
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000056c0  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  004056c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a0  20400218  004058d8  00020218  2**2
                  ALLOC
  3 .heap         00000200  204004b8  00405b78  00020218  2**0
                  ALLOC
  4 .stack        00000400  204006b8  00405d78  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   000222b9  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000048c8  00000000  00000000  00042558  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ac11  00000000  00000000  00046e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c98  00000000  00000000  00051a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ae0  00000000  00000000  000526c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00045bd5  00000000  00000000  000531a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001bb11  00000000  00000000  00098d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00154e21  00000000  00000000  000b488f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002bfc  00000000  00000000  002096b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 0a 40 20 cd 02 40 00 c9 02 40 00 c9 02 40 00     ..@ ..@...@...@.
  400010:	c9 02 40 00 c9 02 40 00 c9 02 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c9 02 40 00 c9 02 40 00 00 00 00 00 c9 02 40 00     ..@...@.......@.
  40003c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40004c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40005c:	c9 02 40 00 c9 02 40 00 00 00 00 00 89 12 40 00     ..@...@.......@.
  40006c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40007c:	c9 02 40 00 7d 12 40 00 c9 02 40 00 c9 02 40 00     ..@.}.@...@...@.
  40008c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40009c:	91 17 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  4000ac:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  4000bc:	59 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     Y.@...@...@...@.
  4000cc:	c9 02 40 00 c9 02 40 00 4d 10 40 00 c9 02 40 00     ..@...@.M.@...@.
  4000dc:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  4000ec:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  4000fc:	c9 02 40 00 c9 02 40 00 c9 02 40 00 a5 17 40 00     ..@...@...@...@.
  40010c:	c9 02 40 00 c9 02 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 c9 02 40 00 c9 02 40 00 01 1b 40 00     ......@...@...@.
  40012c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40013c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40014c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40015c:	c9 02 40 00 c9 02 40 00 c9 02 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	004056c0 	.word	0x004056c0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004056c0 	.word	0x004056c0
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	004056c0 	.word	0x004056c0
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400701 	.word	0x00400701
  4001e4:	00401dad 	.word	0x00401dad

004001e8 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  4001e8:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_sync_enable_channel(ADC_CURRENT_A);
  4001ea:	4d11      	ldr	r5, [pc, #68]	; (400230 <adc_enable_all+0x48>)
  4001ec:	2108      	movs	r1, #8
  4001ee:	4628      	mov	r0, r5
  4001f0:	4c10      	ldr	r4, [pc, #64]	; (400234 <adc_enable_all+0x4c>)
  4001f2:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_CURRENT_B);
  4001f4:	2102      	movs	r1, #2
  4001f6:	4628      	mov	r0, r5
  4001f8:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_CURRENT_C);
  4001fa:	4e0f      	ldr	r6, [pc, #60]	; (400238 <adc_enable_all+0x50>)
  4001fc:	2101      	movs	r1, #1
  4001fe:	4630      	mov	r0, r6
  400200:	47a0      	blx	r4
	
	adc_sync_enable_channel(ADC_SUPPL_VOLTAGE);
  400202:	2106      	movs	r1, #6
  400204:	4630      	mov	r0, r6
  400206:	47a0      	blx	r4
	
	adc_sync_enable_channel(ADC_TEMP_1);
  400208:	2105      	movs	r1, #5
  40020a:	4630      	mov	r0, r6
  40020c:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_2);
  40020e:	2106      	movs	r1, #6
  400210:	4628      	mov	r0, r5
  400212:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_sync_enable_channel(ADC_TEMP_4);
  400214:	210a      	movs	r1, #10
  400216:	4628      	mov	r0, r5
  400218:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_5);
  40021a:	2100      	movs	r1, #0
  40021c:	4630      	mov	r0, r6
  40021e:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_6);
  400220:	2105      	movs	r1, #5
  400222:	4628      	mov	r0, r5
  400224:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_MOTOR);
  400226:	2100      	movs	r1, #0
  400228:	4628      	mov	r0, r5
  40022a:	47a0      	blx	r4
  40022c:	bd70      	pop	{r4, r5, r6, pc}
  40022e:	bf00      	nop
  400230:	20400490 	.word	0x20400490
  400234:	00400839 	.word	0x00400839
  400238:	204004b0 	.word	0x204004b0

0040023c <adc_read>:
	adc_sync_disable_channel(ADC_TEMP_6);
	adc_sync_disable_channel(ADC_TEMP_MOTOR);
}

//reads ADC value
uint16_t adc_read(struct adc_sync_descriptor *const descr, const uint8_t channel){
  40023c:	b510      	push	{r4, lr}
  40023e:	b082      	sub	sp, #8
	
	uint16_t temp;
	
	adc_sync_read_channel(descr, channel, (uint8_t *)&temp, 2);
  400240:	2302      	movs	r3, #2
  400242:	f10d 0206 	add.w	r2, sp, #6
  400246:	4c03      	ldr	r4, [pc, #12]	; (400254 <adc_read+0x18>)
  400248:	47a0      	blx	r4
	
	return temp;
}
  40024a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40024e:	b002      	add	sp, #8
  400250:	bd10      	pop	{r4, pc}
  400252:	bf00      	nop
  400254:	00400865 	.word	0x00400865

00400258 <PWM0_Handler>:
#include <hpl_pwm.h>
#include <hpl_pwm_config.h>



void PWM0_Handler(void){
  400258:	4770      	bx	lr
	...

0040025c <pwm_enable_all>:



//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  40025c:	b570      	push	{r4, r5, r6, lr}
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  40025e:	2201      	movs	r2, #1
  400260:	4b13      	ldr	r3, [pc, #76]	; (4002b0 <pwm_enable_all+0x54>)
  400262:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400264:	4b13      	ldr	r3, [pc, #76]	; (4002b4 <pwm_enable_all+0x58>)
  400266:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40026a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40026e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400272:	f3bf 8f6f 	isb	sy
  400276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40027a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40027e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400282:	f3bf 8f6f 	isb	sy
	NVIC_DisableIRQ(PWM1_IRQn);
	
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  400286:	4c0c      	ldr	r4, [pc, #48]	; (4002b8 <pwm_enable_all+0x5c>)
  400288:	4620      	mov	r0, r4
  40028a:	4e0c      	ldr	r6, [pc, #48]	; (4002bc <pwm_enable_all+0x60>)
  40028c:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  40028e:	4d0c      	ldr	r5, [pc, #48]	; (4002c0 <pwm_enable_all+0x64>)
  400290:	4628      	mov	r0, r5
  400292:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  400294:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400298:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40029c:	4620      	mov	r0, r4
  40029e:	4c09      	ldr	r4, [pc, #36]	; (4002c4 <pwm_enable_all+0x68>)
  4002a0:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD>>1);
  4002a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4002a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4002aa:	4628      	mov	r0, r5
  4002ac:	47a0      	blx	r4
  4002ae:	bd70      	pop	{r4, r5, r6, pc}
  4002b0:	40020000 	.word	0x40020000
  4002b4:	e000e100 	.word	0xe000e100
  4002b8:	20400408 	.word	0x20400408
  4002bc:	00400a85 	.word	0x00400a85
  4002c0:	20400494 	.word	0x20400494
  4002c4:	00400ac1 	.word	0x00400ac1

004002c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4002c8:	e7fe      	b.n	4002c8 <Dummy_Handler>
	...

004002cc <Reset_Handler>:
{
  4002cc:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4002ce:	4b10      	ldr	r3, [pc, #64]	; (400310 <Reset_Handler+0x44>)
  4002d0:	4a10      	ldr	r2, [pc, #64]	; (400314 <Reset_Handler+0x48>)
  4002d2:	429a      	cmp	r2, r3
  4002d4:	d009      	beq.n	4002ea <Reset_Handler+0x1e>
  4002d6:	4b0e      	ldr	r3, [pc, #56]	; (400310 <Reset_Handler+0x44>)
  4002d8:	4a0e      	ldr	r2, [pc, #56]	; (400314 <Reset_Handler+0x48>)
  4002da:	e003      	b.n	4002e4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4002dc:	6811      	ldr	r1, [r2, #0]
  4002de:	6019      	str	r1, [r3, #0]
  4002e0:	3304      	adds	r3, #4
  4002e2:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4002e4:	490c      	ldr	r1, [pc, #48]	; (400318 <Reset_Handler+0x4c>)
  4002e6:	428b      	cmp	r3, r1
  4002e8:	d3f8      	bcc.n	4002dc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4002ea:	4b0c      	ldr	r3, [pc, #48]	; (40031c <Reset_Handler+0x50>)
  4002ec:	e002      	b.n	4002f4 <Reset_Handler+0x28>
                *pDest++ = 0;
  4002ee:	2200      	movs	r2, #0
  4002f0:	601a      	str	r2, [r3, #0]
  4002f2:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4002f4:	4a0a      	ldr	r2, [pc, #40]	; (400320 <Reset_Handler+0x54>)
  4002f6:	4293      	cmp	r3, r2
  4002f8:	d3f9      	bcc.n	4002ee <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4002fa:	4a0a      	ldr	r2, [pc, #40]	; (400324 <Reset_Handler+0x58>)
  4002fc:	4b0a      	ldr	r3, [pc, #40]	; (400328 <Reset_Handler+0x5c>)
  4002fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400302:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400304:	4b09      	ldr	r3, [pc, #36]	; (40032c <Reset_Handler+0x60>)
  400306:	4798      	blx	r3
        main();
  400308:	4b09      	ldr	r3, [pc, #36]	; (400330 <Reset_Handler+0x64>)
  40030a:	4798      	blx	r3
  40030c:	e7fe      	b.n	40030c <Reset_Handler+0x40>
  40030e:	bf00      	nop
  400310:	20400000 	.word	0x20400000
  400314:	004056c0 	.word	0x004056c0
  400318:	20400218 	.word	0x20400218
  40031c:	20400218 	.word	0x20400218
  400320:	204004b8 	.word	0x204004b8
  400324:	e000ed00 	.word	0xe000ed00
  400328:	00400000 	.word	0x00400000
  40032c:	004026c1 	.word	0x004026c1
  400330:	00401bb5 	.word	0x00401bb5

00400334 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400338:	4b08      	ldr	r3, [pc, #32]	; (40035c <ADC_0_PORT_init+0x28>)
  40033a:	601a      	str	r2, [r3, #0]
  40033c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400340:	2208      	movs	r2, #8
  400342:	601a      	str	r2, [r3, #0]
  400344:	2204      	movs	r2, #4
  400346:	601a      	str	r2, [r3, #0]
  400348:	4a05      	ldr	r2, [pc, #20]	; (400360 <ADC_0_PORT_init+0x2c>)
  40034a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40034e:	6011      	str	r1, [r2, #0]
  400350:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400354:	6011      	str	r1, [r2, #0]
  400356:	2201      	movs	r2, #1
  400358:	601a      	str	r2, [r3, #0]
  40035a:	4770      	bx	lr
  40035c:	400e1400 	.word	0x400e1400
  400360:	400e0e00 	.word	0x400e0e00

00400364 <ADC_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400364:	4b04      	ldr	r3, [pc, #16]	; (400378 <ADC_0_CLOCK_init+0x14>)
  400366:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400368:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40036c:	d103      	bne.n	400376 <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40036e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400372:	4b01      	ldr	r3, [pc, #4]	; (400378 <ADC_0_CLOCK_init+0x14>)
  400374:	611a      	str	r2, [r3, #16]
  400376:	4770      	bx	lr
  400378:	400e0600 	.word	0x400e0600

0040037c <ADC_0_init>:

	_pmc_enable_periph_clock(ID_AFEC0);
}

void ADC_0_init(void)
{
  40037c:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  40037e:	4b05      	ldr	r3, [pc, #20]	; (400394 <ADC_0_init+0x18>)
  400380:	4798      	blx	r3
	ADC_0_PORT_init();
  400382:	4b05      	ldr	r3, [pc, #20]	; (400398 <ADC_0_init+0x1c>)
  400384:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  400386:	2200      	movs	r2, #0
  400388:	4904      	ldr	r1, [pc, #16]	; (40039c <ADC_0_init+0x20>)
  40038a:	4805      	ldr	r0, [pc, #20]	; (4003a0 <ADC_0_init+0x24>)
  40038c:	4b05      	ldr	r3, [pc, #20]	; (4003a4 <ADC_0_init+0x28>)
  40038e:	4798      	blx	r3
  400390:	bd08      	pop	{r3, pc}
  400392:	bf00      	nop
  400394:	00400365 	.word	0x00400365
  400398:	00400335 	.word	0x00400335
  40039c:	4003c000 	.word	0x4003c000
  4003a0:	20400490 	.word	0x20400490
  4003a4:	00400809 	.word	0x00400809

004003a8 <ADC_1_PORT_init>:
  4003a8:	2202      	movs	r2, #2
  4003aa:	4b07      	ldr	r3, [pc, #28]	; (4003c8 <ADC_1_PORT_init+0x20>)
  4003ac:	601a      	str	r2, [r3, #0]
  4003ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4003b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4003b6:	601a      	str	r2, [r3, #0]
  4003b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4003bc:	601a      	str	r2, [r3, #0]
  4003be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4003c2:	601a      	str	r2, [r3, #0]
  4003c4:	4770      	bx	lr
  4003c6:	bf00      	nop
  4003c8:	400e1000 	.word	0x400e1000

004003cc <ADC_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4003cc:	4b05      	ldr	r3, [pc, #20]	; (4003e4 <ADC_1_CLOCK_init+0x18>)
  4003ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4003d2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4003d6:	d104      	bne.n	4003e2 <ADC_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4003d8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003dc:	4b01      	ldr	r3, [pc, #4]	; (4003e4 <ADC_1_CLOCK_init+0x18>)
  4003de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4003e2:	4770      	bx	lr
  4003e4:	400e0600 	.word	0x400e0600

004003e8 <ADC_1_init>:

	_pmc_enable_periph_clock(ID_AFEC1);
}

void ADC_1_init(void)
{
  4003e8:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
  4003ea:	4b05      	ldr	r3, [pc, #20]	; (400400 <ADC_1_init+0x18>)
  4003ec:	4798      	blx	r3
	ADC_1_PORT_init();
  4003ee:	4b05      	ldr	r3, [pc, #20]	; (400404 <ADC_1_init+0x1c>)
  4003f0:	4798      	blx	r3
	adc_sync_init(&ADC_1, AFEC1, (void *)NULL);
  4003f2:	2200      	movs	r2, #0
  4003f4:	4904      	ldr	r1, [pc, #16]	; (400408 <ADC_1_init+0x20>)
  4003f6:	4805      	ldr	r0, [pc, #20]	; (40040c <ADC_1_init+0x24>)
  4003f8:	4b05      	ldr	r3, [pc, #20]	; (400410 <ADC_1_init+0x28>)
  4003fa:	4798      	blx	r3
  4003fc:	bd08      	pop	{r3, pc}
  4003fe:	bf00      	nop
  400400:	004003cd 	.word	0x004003cd
  400404:	004003a9 	.word	0x004003a9
  400408:	40064000 	.word	0x40064000
  40040c:	204004b0 	.word	0x204004b0
  400410:	00400809 	.word	0x00400809

00400414 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400414:	4b04      	ldr	r3, [pc, #16]	; (400428 <EXTERNAL_IRQ_D_init+0x14>)
  400416:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40041a:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  40041c:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  40041e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400422:	601a      	str	r2, [r3, #0]
  400424:	4770      	bx	lr
  400426:	bf00      	nop
  400428:	400e1400 	.word	0x400e1400

0040042c <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  40042c:	4b0a      	ldr	r3, [pc, #40]	; (400458 <EXTERNAL_IRQ_A_init+0x2c>)
  40042e:	2204      	movs	r2, #4
  400430:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400432:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400434:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400438:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40043a:	2220      	movs	r2, #32
  40043c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40043e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400440:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400444:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400446:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40044a:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40044c:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40044e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400452:	601a      	str	r2, [r3, #0]
  400454:	4770      	bx	lr
  400456:	bf00      	nop
  400458:	400e0e00 	.word	0x400e0e00

0040045c <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40045c:	4b16      	ldr	r3, [pc, #88]	; (4004b8 <PWM_0_PORT_init+0x5c>)
  40045e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400460:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400464:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400466:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400468:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  40046c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40046e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400472:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400474:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400476:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  40047a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40047c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40047e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400482:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400484:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400488:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40048a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40048c:	f022 0202 	bic.w	r2, r2, #2
  400490:	671a      	str	r2, [r3, #112]	; 0x70
  400492:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400494:	f022 0202 	bic.w	r2, r2, #2
  400498:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40049a:	2202      	movs	r2, #2
  40049c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40049e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004a0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  4004a4:	671a      	str	r2, [r3, #112]	; 0x70
  4004a6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004a8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  4004ac:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4004b2:	605a      	str	r2, [r3, #4]
  4004b4:	4770      	bx	lr
  4004b6:	bf00      	nop
  4004b8:	400e0e00 	.word	0x400e0e00

004004bc <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4004bc:	4b04      	ldr	r3, [pc, #16]	; (4004d0 <PWM_0_CLOCK_init+0x14>)
  4004be:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4004c0:	2b00      	cmp	r3, #0
  4004c2:	db03      	blt.n	4004cc <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4004c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4004c8:	4b01      	ldr	r3, [pc, #4]	; (4004d0 <PWM_0_CLOCK_init+0x14>)
  4004ca:	611a      	str	r2, [r3, #16]
  4004cc:	4770      	bx	lr
  4004ce:	bf00      	nop
  4004d0:	400e0600 	.word	0x400e0600

004004d4 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  4004d4:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  4004d6:	4b06      	ldr	r3, [pc, #24]	; (4004f0 <PWM_0_init+0x1c>)
  4004d8:	4798      	blx	r3
	PWM_0_PORT_init();
  4004da:	4b06      	ldr	r3, [pc, #24]	; (4004f4 <PWM_0_init+0x20>)
  4004dc:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  4004de:	4b06      	ldr	r3, [pc, #24]	; (4004f8 <PWM_0_init+0x24>)
  4004e0:	4798      	blx	r3
  4004e2:	4602      	mov	r2, r0
  4004e4:	4905      	ldr	r1, [pc, #20]	; (4004fc <PWM_0_init+0x28>)
  4004e6:	4806      	ldr	r0, [pc, #24]	; (400500 <PWM_0_init+0x2c>)
  4004e8:	4b06      	ldr	r3, [pc, #24]	; (400504 <PWM_0_init+0x30>)
  4004ea:	4798      	blx	r3
  4004ec:	bd08      	pop	{r3, pc}
  4004ee:	bf00      	nop
  4004f0:	004004bd 	.word	0x004004bd
  4004f4:	0040045d 	.word	0x0040045d
  4004f8:	004015b5 	.word	0x004015b5
  4004fc:	40020000 	.word	0x40020000
  400500:	20400408 	.word	0x20400408
  400504:	00400a41 	.word	0x00400a41

00400508 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400508:	4b0c      	ldr	r3, [pc, #48]	; (40053c <PWM_1_PORT_init+0x34>)
  40050a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40050c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400510:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400512:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400514:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400518:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40051a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40051e:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400520:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400524:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400526:	f042 0201 	orr.w	r2, r2, #1
  40052a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40052c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40052e:	f022 0201 	bic.w	r2, r2, #1
  400532:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400534:	2201      	movs	r2, #1
  400536:	605a      	str	r2, [r3, #4]
  400538:	4770      	bx	lr
  40053a:	bf00      	nop
  40053c:	400e0e00 	.word	0x400e0e00

00400540 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400540:	4b05      	ldr	r3, [pc, #20]	; (400558 <PWM_1_CLOCK_init+0x18>)
  400542:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400546:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  40054a:	d104      	bne.n	400556 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40054c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400550:	4b01      	ldr	r3, [pc, #4]	; (400558 <PWM_1_CLOCK_init+0x18>)
  400552:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400556:	4770      	bx	lr
  400558:	400e0600 	.word	0x400e0600

0040055c <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  40055c:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  40055e:	4b06      	ldr	r3, [pc, #24]	; (400578 <PWM_1_init+0x1c>)
  400560:	4798      	blx	r3
	PWM_1_PORT_init();
  400562:	4b06      	ldr	r3, [pc, #24]	; (40057c <PWM_1_init+0x20>)
  400564:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400566:	4b06      	ldr	r3, [pc, #24]	; (400580 <PWM_1_init+0x24>)
  400568:	4798      	blx	r3
  40056a:	4602      	mov	r2, r0
  40056c:	4905      	ldr	r1, [pc, #20]	; (400584 <PWM_1_init+0x28>)
  40056e:	4806      	ldr	r0, [pc, #24]	; (400588 <PWM_1_init+0x2c>)
  400570:	4b06      	ldr	r3, [pc, #24]	; (40058c <PWM_1_init+0x30>)
  400572:	4798      	blx	r3
  400574:	bd08      	pop	{r3, pc}
  400576:	bf00      	nop
  400578:	00400541 	.word	0x00400541
  40057c:	00400509 	.word	0x00400509
  400580:	004015b5 	.word	0x004015b5
  400584:	4005c000 	.word	0x4005c000
  400588:	20400494 	.word	0x20400494
  40058c:	00400a41 	.word	0x00400a41

00400590 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400590:	4b06      	ldr	r3, [pc, #24]	; (4005ac <ENCODER_A_PORT_init+0x1c>)
  400592:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400594:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400598:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40059a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40059c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  4005a0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4005a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4005a6:	605a      	str	r2, [r3, #4]
  4005a8:	4770      	bx	lr
  4005aa:	bf00      	nop
  4005ac:	400e0e00 	.word	0x400e0e00

004005b0 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  4005b0:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005b2:	4b09      	ldr	r3, [pc, #36]	; (4005d8 <ENCODER_A_init+0x28>)
  4005b4:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4005b6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  4005ba:	d103      	bne.n	4005c4 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4005c0:	4b05      	ldr	r3, [pc, #20]	; (4005d8 <ENCODER_A_init+0x28>)
  4005c2:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  4005c4:	4b05      	ldr	r3, [pc, #20]	; (4005dc <ENCODER_A_init+0x2c>)
  4005c6:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  4005c8:	4b05      	ldr	r3, [pc, #20]	; (4005e0 <ENCODER_A_init+0x30>)
  4005ca:	4798      	blx	r3
  4005cc:	4602      	mov	r2, r0
  4005ce:	4905      	ldr	r1, [pc, #20]	; (4005e4 <ENCODER_A_init+0x34>)
  4005d0:	4805      	ldr	r0, [pc, #20]	; (4005e8 <ENCODER_A_init+0x38>)
  4005d2:	4b06      	ldr	r3, [pc, #24]	; (4005ec <ENCODER_A_init+0x3c>)
  4005d4:	4798      	blx	r3
  4005d6:	bd08      	pop	{r3, pc}
  4005d8:	400e0600 	.word	0x400e0600
  4005dc:	00400591 	.word	0x00400591
  4005e0:	0040178b 	.word	0x0040178b
  4005e4:	4000c000 	.word	0x4000c000
  4005e8:	20400474 	.word	0x20400474
  4005ec:	00400ba9 	.word	0x00400ba9

004005f0 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4005f0:	4b06      	ldr	r3, [pc, #24]	; (40060c <ENCODER_B_PORT_init+0x1c>)
  4005f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005f4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4005f8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4005fa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005fc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  400600:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400602:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400606:	605a      	str	r2, [r3, #4]
  400608:	4770      	bx	lr
  40060a:	bf00      	nop
  40060c:	400e1400 	.word	0x400e1400

00400610 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  400610:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400612:	4b0a      	ldr	r3, [pc, #40]	; (40063c <ENCODER_B_init+0x2c>)
  400614:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400618:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  40061c:	d104      	bne.n	400628 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40061e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400622:	4b06      	ldr	r3, [pc, #24]	; (40063c <ENCODER_B_init+0x2c>)
  400624:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  400628:	4b05      	ldr	r3, [pc, #20]	; (400640 <ENCODER_B_init+0x30>)
  40062a:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  40062c:	4b05      	ldr	r3, [pc, #20]	; (400644 <ENCODER_B_init+0x34>)
  40062e:	4798      	blx	r3
  400630:	4602      	mov	r2, r0
  400632:	4905      	ldr	r1, [pc, #20]	; (400648 <ENCODER_B_init+0x38>)
  400634:	4805      	ldr	r0, [pc, #20]	; (40064c <ENCODER_B_init+0x3c>)
  400636:	4b06      	ldr	r3, [pc, #24]	; (400650 <ENCODER_B_init+0x40>)
  400638:	4798      	blx	r3
  40063a:	bd08      	pop	{r3, pc}
  40063c:	400e0600 	.word	0x400e0600
  400640:	004005f1 	.word	0x004005f1
  400644:	0040178b 	.word	0x0040178b
  400648:	40054000 	.word	0x40054000
  40064c:	20400424 	.word	0x20400424
  400650:	00400ba9 	.word	0x00400ba9

00400654 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400654:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400656:	4802      	ldr	r0, [pc, #8]	; (400660 <delay_driver_init+0xc>)
  400658:	4b02      	ldr	r3, [pc, #8]	; (400664 <delay_driver_init+0x10>)
  40065a:	4798      	blx	r3
  40065c:	bd08      	pop	{r3, pc}
  40065e:	bf00      	nop
  400660:	e000e010 	.word	0xe000e010
  400664:	00400921 	.word	0x00400921

00400668 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400668:	4b0f      	ldr	r3, [pc, #60]	; (4006a8 <EDBG_COM_PORT_init+0x40>)
  40066a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40066c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400670:	671a      	str	r2, [r3, #112]	; 0x70
  400672:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400674:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400678:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40067a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40067e:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400680:	4a0a      	ldr	r2, [pc, #40]	; (4006ac <EDBG_COM_PORT_init+0x44>)
  400682:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400686:	f043 0310 	orr.w	r3, r3, #16
  40068a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40068e:	4b08      	ldr	r3, [pc, #32]	; (4006b0 <EDBG_COM_PORT_init+0x48>)
  400690:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400692:	f042 0210 	orr.w	r2, r2, #16
  400696:	671a      	str	r2, [r3, #112]	; 0x70
  400698:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40069a:	f042 0210 	orr.w	r2, r2, #16
  40069e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4006a0:	2210      	movs	r2, #16
  4006a2:	605a      	str	r2, [r3, #4]
  4006a4:	4770      	bx	lr
  4006a6:	bf00      	nop
  4006a8:	400e0e00 	.word	0x400e0e00
  4006ac:	40088000 	.word	0x40088000
  4006b0:	400e1000 	.word	0x400e1000

004006b4 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4006b4:	4b04      	ldr	r3, [pc, #16]	; (4006c8 <EDBG_COM_CLOCK_init+0x14>)
  4006b6:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4006b8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4006bc:	d103      	bne.n	4006c6 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4006be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4006c2:	4b01      	ldr	r3, [pc, #4]	; (4006c8 <EDBG_COM_CLOCK_init+0x14>)
  4006c4:	611a      	str	r2, [r3, #16]
  4006c6:	4770      	bx	lr
  4006c8:	400e0600 	.word	0x400e0600

004006cc <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  4006cc:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  4006ce:	4b06      	ldr	r3, [pc, #24]	; (4006e8 <EDBG_COM_init+0x1c>)
  4006d0:	4798      	blx	r3
	EDBG_COM_PORT_init();
  4006d2:	4b06      	ldr	r3, [pc, #24]	; (4006ec <EDBG_COM_init+0x20>)
  4006d4:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  4006d6:	4b06      	ldr	r3, [pc, #24]	; (4006f0 <EDBG_COM_init+0x24>)
  4006d8:	4798      	blx	r3
  4006da:	4602      	mov	r2, r0
  4006dc:	4905      	ldr	r1, [pc, #20]	; (4006f4 <EDBG_COM_init+0x28>)
  4006de:	4806      	ldr	r0, [pc, #24]	; (4006f8 <EDBG_COM_init+0x2c>)
  4006e0:	4b06      	ldr	r3, [pc, #24]	; (4006fc <EDBG_COM_init+0x30>)
  4006e2:	4798      	blx	r3
  4006e4:	bd08      	pop	{r3, pc}
  4006e6:	bf00      	nop
  4006e8:	004006b5 	.word	0x004006b5
  4006ec:	00400669 	.word	0x00400669
  4006f0:	004019cd 	.word	0x004019cd
  4006f4:	40028000 	.word	0x40028000
  4006f8:	20400468 	.word	0x20400468
  4006fc:	00400cf1 	.word	0x00400cf1

00400700 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  400700:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400702:	4b32      	ldr	r3, [pc, #200]	; (4007cc <system_init+0xcc>)
  400704:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400706:	4b32      	ldr	r3, [pc, #200]	; (4007d0 <system_init+0xd0>)
  400708:	699b      	ldr	r3, [r3, #24]
  40070a:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40070e:	d103      	bne.n	400718 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400710:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400714:	4b2e      	ldr	r3, [pc, #184]	; (4007d0 <system_init+0xd0>)
  400716:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400718:	4b2d      	ldr	r3, [pc, #180]	; (4007d0 <system_init+0xd0>)
  40071a:	699b      	ldr	r3, [r3, #24]
  40071c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400720:	d103      	bne.n	40072a <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400722:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400726:	4b2a      	ldr	r3, [pc, #168]	; (4007d0 <system_init+0xd0>)
  400728:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40072a:	4b29      	ldr	r3, [pc, #164]	; (4007d0 <system_init+0xd0>)
  40072c:	699b      	ldr	r3, [r3, #24]
  40072e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400732:	d103      	bne.n	40073c <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400734:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400738:	4b25      	ldr	r3, [pc, #148]	; (4007d0 <system_init+0xd0>)
  40073a:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40073c:	4a25      	ldr	r2, [pc, #148]	; (4007d4 <system_init+0xd4>)
  40073e:	6853      	ldr	r3, [r2, #4]
  400740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400744:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  400746:	4b24      	ldr	r3, [pc, #144]	; (4007d8 <system_init+0xd8>)
  400748:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40074c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  40074e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  400752:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  400754:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400756:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40075a:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40075c:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40075e:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400764:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400766:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400768:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40076a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40076e:	f44f 7080 	mov.w	r0, #256	; 0x100
  400772:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400774:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400776:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400778:	f44f 7000 	mov.w	r0, #512	; 0x200
  40077c:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40077e:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400780:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400782:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400786:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400788:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40078a:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40078c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400790:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400792:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400794:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400796:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400798:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40079a:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  40079c:	4b0f      	ldr	r3, [pc, #60]	; (4007dc <system_init+0xdc>)
  40079e:	4798      	blx	r3

	ADC_1_init();
  4007a0:	4b0f      	ldr	r3, [pc, #60]	; (4007e0 <system_init+0xe0>)
  4007a2:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  4007a4:	4b0f      	ldr	r3, [pc, #60]	; (4007e4 <system_init+0xe4>)
  4007a6:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  4007a8:	4b0f      	ldr	r3, [pc, #60]	; (4007e8 <system_init+0xe8>)
  4007aa:	4798      	blx	r3

	PWM_0_init();
  4007ac:	4b0f      	ldr	r3, [pc, #60]	; (4007ec <system_init+0xec>)
  4007ae:	4798      	blx	r3

	PWM_1_init();
  4007b0:	4b0f      	ldr	r3, [pc, #60]	; (4007f0 <system_init+0xf0>)
  4007b2:	4798      	blx	r3
	ENCODER_A_init();
  4007b4:	4b0f      	ldr	r3, [pc, #60]	; (4007f4 <system_init+0xf4>)
  4007b6:	4798      	blx	r3
	ENCODER_B_init();
  4007b8:	4b0f      	ldr	r3, [pc, #60]	; (4007f8 <system_init+0xf8>)
  4007ba:	4798      	blx	r3

	delay_driver_init();
  4007bc:	4b0f      	ldr	r3, [pc, #60]	; (4007fc <system_init+0xfc>)
  4007be:	4798      	blx	r3

	EDBG_COM_init();
  4007c0:	4b0f      	ldr	r3, [pc, #60]	; (400800 <system_init+0x100>)
  4007c2:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  4007c4:	4b0f      	ldr	r3, [pc, #60]	; (400804 <system_init+0x104>)
  4007c6:	4798      	blx	r3
  4007c8:	bd08      	pop	{r3, pc}
  4007ca:	bf00      	nop
  4007cc:	00400f65 	.word	0x00400f65
  4007d0:	400e0600 	.word	0x400e0600
  4007d4:	400e1850 	.word	0x400e1850
  4007d8:	400e0e00 	.word	0x400e0e00
  4007dc:	0040037d 	.word	0x0040037d
  4007e0:	004003e9 	.word	0x004003e9
  4007e4:	00400415 	.word	0x00400415
  4007e8:	0040042d 	.word	0x0040042d
  4007ec:	004004d5 	.word	0x004004d5
  4007f0:	0040055d 	.word	0x0040055d
  4007f4:	004005b1 	.word	0x004005b1
  4007f8:	00400611 	.word	0x00400611
  4007fc:	00400655 	.word	0x00400655
  400800:	004006cd 	.word	0x004006cd
  400804:	00400999 	.word	0x00400999

00400808 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  400808:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40080a:	4604      	mov	r4, r0
  40080c:	460d      	mov	r5, r1
  40080e:	2800      	cmp	r0, #0
  400810:	bf18      	it	ne
  400812:	2900      	cmpne	r1, #0
  400814:	bf14      	ite	ne
  400816:	2001      	movne	r0, #1
  400818:	2000      	moveq	r0, #0
  40081a:	2239      	movs	r2, #57	; 0x39
  40081c:	4903      	ldr	r1, [pc, #12]	; (40082c <adc_sync_init+0x24>)
  40081e:	4b04      	ldr	r3, [pc, #16]	; (400830 <adc_sync_init+0x28>)
  400820:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  400822:	4629      	mov	r1, r5
  400824:	4620      	mov	r0, r4
  400826:	4b03      	ldr	r3, [pc, #12]	; (400834 <adc_sync_init+0x2c>)
  400828:	4798      	blx	r3
}
  40082a:	bd38      	pop	{r3, r4, r5, pc}
  40082c:	00404fd8 	.word	0x00404fd8
  400830:	00400d65 	.word	0x00400d65
  400834:	00400ee1 	.word	0x00400ee1

00400838 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
  400838:	b538      	push	{r3, r4, r5, lr}
  40083a:	460d      	mov	r5, r1
	ASSERT(descr);
  40083c:	4604      	mov	r4, r0
  40083e:	224e      	movs	r2, #78	; 0x4e
  400840:	4905      	ldr	r1, [pc, #20]	; (400858 <adc_sync_enable_channel+0x20>)
  400842:	3000      	adds	r0, #0
  400844:	bf18      	it	ne
  400846:	2001      	movne	r0, #1
  400848:	4b04      	ldr	r3, [pc, #16]	; (40085c <adc_sync_enable_channel+0x24>)
  40084a:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
  40084c:	4629      	mov	r1, r5
  40084e:	4620      	mov	r0, r4
  400850:	4b03      	ldr	r3, [pc, #12]	; (400860 <adc_sync_enable_channel+0x28>)
  400852:	4798      	blx	r3

	return ERR_NONE;
}
  400854:	2000      	movs	r0, #0
  400856:	bd38      	pop	{r3, r4, r5, pc}
  400858:	00404fd8 	.word	0x00404fd8
  40085c:	00400d65 	.word	0x00400d65
  400860:	00400f19 	.word	0x00400f19

00400864 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
  400864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400868:	460d      	mov	r5, r1
  40086a:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
  40086c:	4607      	mov	r7, r0
  40086e:	4690      	mov	r8, r2
  400870:	2800      	cmp	r0, #0
  400872:	bf18      	it	ne
  400874:	2a00      	cmpne	r2, #0
  400876:	d002      	beq.n	40087e <adc_sync_read_channel+0x1a>
  400878:	b9cb      	cbnz	r3, 4008ae <adc_sync_read_channel+0x4a>
  40087a:	2000      	movs	r0, #0
  40087c:	e000      	b.n	400880 <adc_sync_read_channel+0x1c>
  40087e:	2000      	movs	r0, #0
  400880:	f8df a07c 	ldr.w	sl, [pc, #124]	; 400900 <adc_sync_read_channel+0x9c>
  400884:	2267      	movs	r2, #103	; 0x67
  400886:	4651      	mov	r1, sl
  400888:	4e18      	ldr	r6, [pc, #96]	; (4008ec <adc_sync_read_channel+0x88>)
  40088a:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
  40088c:	463c      	mov	r4, r7
  40088e:	4638      	mov	r0, r7
  400890:	4b17      	ldr	r3, [pc, #92]	; (4008f0 <adc_sync_read_channel+0x8c>)
  400892:	4798      	blx	r3
  400894:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
  400896:	fb99 f0f0 	sdiv	r0, r9, r0
  40089a:	fb07 9010 	mls	r0, r7, r0, r9
  40089e:	2269      	movs	r2, #105	; 0x69
  4008a0:	4651      	mov	r1, sl
  4008a2:	fab0 f080 	clz	r0, r0
  4008a6:	0940      	lsrs	r0, r0, #5
  4008a8:	47b0      	blx	r6
	uint16_t offset = 0;
  4008aa:	2600      	movs	r6, #0
  4008ac:	e005      	b.n	4008ba <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
  4008ae:	2001      	movs	r0, #1
  4008b0:	e7e6      	b.n	400880 <adc_sync_read_channel+0x1c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
  4008b2:	443e      	add	r6, r7
  4008b4:	b2b6      	uxth	r6, r6
	} while (offset < length);
  4008b6:	45b1      	cmp	r9, r6
  4008b8:	d915      	bls.n	4008e6 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
  4008ba:	4620      	mov	r0, r4
  4008bc:	4b0d      	ldr	r3, [pc, #52]	; (4008f4 <adc_sync_read_channel+0x90>)
  4008be:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
  4008c0:	4629      	mov	r1, r5
  4008c2:	4620      	mov	r0, r4
  4008c4:	4b0c      	ldr	r3, [pc, #48]	; (4008f8 <adc_sync_read_channel+0x94>)
  4008c6:	4798      	blx	r3
  4008c8:	2800      	cmp	r0, #0
  4008ca:	d0f9      	beq.n	4008c0 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
  4008cc:	4629      	mov	r1, r5
  4008ce:	4620      	mov	r0, r4
  4008d0:	4b0a      	ldr	r3, [pc, #40]	; (4008fc <adc_sync_read_channel+0x98>)
  4008d2:	4798      	blx	r3
		buffer[offset] = result;
  4008d4:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
  4008d8:	2f01      	cmp	r7, #1
  4008da:	d9ea      	bls.n	4008b2 <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
  4008dc:	1c73      	adds	r3, r6, #1
  4008de:	0a00      	lsrs	r0, r0, #8
  4008e0:	f808 0003 	strb.w	r0, [r8, r3]
  4008e4:	e7e5      	b.n	4008b2 <adc_sync_read_channel+0x4e>

	return offset;
}
  4008e6:	4630      	mov	r0, r6
  4008e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4008ec:	00400d65 	.word	0x00400d65
  4008f0:	00400f25 	.word	0x00400f25
  4008f4:	00400f3d 	.word	0x00400f3d
  4008f8:	00400f29 	.word	0x00400f29
  4008fc:	00400f45 	.word	0x00400f45
  400900:	00404fd8 	.word	0x00404fd8

00400904 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400904:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400908:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40090a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40090c:	f3bf 8f5f 	dmb	sy
  400910:	4770      	bx	lr

00400912 <atomic_leave_critical>:
  400912:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400916:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400918:	f383 8810 	msr	PRIMASK, r3
  40091c:	4770      	bx	lr
	...

00400920 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400920:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400922:	4b02      	ldr	r3, [pc, #8]	; (40092c <delay_init+0xc>)
  400924:	6018      	str	r0, [r3, #0]
  400926:	4b02      	ldr	r3, [pc, #8]	; (400930 <delay_init+0x10>)
  400928:	4798      	blx	r3
  40092a:	bd08      	pop	{r3, pc}
  40092c:	20400234 	.word	0x20400234
  400930:	004015cd 	.word	0x004015cd

00400934 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400934:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  400936:	4b04      	ldr	r3, [pc, #16]	; (400948 <delay_ms+0x14>)
  400938:	681c      	ldr	r4, [r3, #0]
  40093a:	4b04      	ldr	r3, [pc, #16]	; (40094c <delay_ms+0x18>)
  40093c:	4798      	blx	r3
  40093e:	4601      	mov	r1, r0
  400940:	4620      	mov	r0, r4
  400942:	4b03      	ldr	r3, [pc, #12]	; (400950 <delay_ms+0x1c>)
  400944:	4798      	blx	r3
  400946:	bd10      	pop	{r4, pc}
  400948:	20400234 	.word	0x20400234
  40094c:	00400f51 	.word	0x00400f51
  400950:	004015d9 	.word	0x004015d9

00400954 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400954:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400956:	2504      	movs	r5, #4
  400958:	2400      	movs	r4, #0

	while (upper >= lower) {
  40095a:	e007      	b.n	40096c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  40095c:	4a0d      	ldr	r2, [pc, #52]	; (400994 <process_ext_irq+0x40>)
  40095e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400962:	b1b3      	cbz	r3, 400992 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400964:	4798      	blx	r3
  400966:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  400968:	3a01      	subs	r2, #1
  40096a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  40096c:	42ac      	cmp	r4, r5
  40096e:	d810      	bhi.n	400992 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400970:	192b      	adds	r3, r5, r4
  400972:	105b      	asrs	r3, r3, #1
  400974:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400976:	2a03      	cmp	r2, #3
  400978:	d80b      	bhi.n	400992 <process_ext_irq+0x3e>
  40097a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  40097c:	4905      	ldr	r1, [pc, #20]	; (400994 <process_ext_irq+0x40>)
  40097e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400982:	6849      	ldr	r1, [r1, #4]
  400984:	4281      	cmp	r1, r0
  400986:	d0e9      	beq.n	40095c <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400988:	4281      	cmp	r1, r0
  40098a:	d2ed      	bcs.n	400968 <process_ext_irq+0x14>
			lower = middle + 1;
  40098c:	3201      	adds	r2, #1
  40098e:	b2d4      	uxtb	r4, r2
  400990:	e7ec      	b.n	40096c <process_ext_irq+0x18>
  400992:	bd38      	pop	{r3, r4, r5, pc}
  400994:	20400238 	.word	0x20400238

00400998 <ext_irq_init>:
{
  400998:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40099a:	2300      	movs	r3, #0
  40099c:	e00a      	b.n	4009b4 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  40099e:	4a08      	ldr	r2, [pc, #32]	; (4009c0 <ext_irq_init+0x28>)
  4009a0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  4009a4:	f04f 30ff 	mov.w	r0, #4294967295
  4009a8:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  4009aa:	2100      	movs	r1, #0
  4009ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4009b0:	3301      	adds	r3, #1
  4009b2:	b29b      	uxth	r3, r3
  4009b4:	2b03      	cmp	r3, #3
  4009b6:	d9f2      	bls.n	40099e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  4009b8:	4802      	ldr	r0, [pc, #8]	; (4009c4 <ext_irq_init+0x2c>)
  4009ba:	4b03      	ldr	r3, [pc, #12]	; (4009c8 <ext_irq_init+0x30>)
  4009bc:	4798      	blx	r3
}
  4009be:	bd08      	pop	{r3, pc}
  4009c0:	20400238 	.word	0x20400238
  4009c4:	00400955 	.word	0x00400955
  4009c8:	00401295 	.word	0x00401295

004009cc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4009cc:	b570      	push	{r4, r5, r6, lr}
  4009ce:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4009d0:	4604      	mov	r4, r0
  4009d2:	460d      	mov	r5, r1
  4009d4:	2800      	cmp	r0, #0
  4009d6:	bf18      	it	ne
  4009d8:	2900      	cmpne	r1, #0
  4009da:	bf14      	ite	ne
  4009dc:	2001      	movne	r0, #1
  4009de:	2000      	moveq	r0, #0
  4009e0:	2234      	movs	r2, #52	; 0x34
  4009e2:	4904      	ldr	r1, [pc, #16]	; (4009f4 <io_write+0x28>)
  4009e4:	4b04      	ldr	r3, [pc, #16]	; (4009f8 <io_write+0x2c>)
  4009e6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  4009e8:	6823      	ldr	r3, [r4, #0]
  4009ea:	4632      	mov	r2, r6
  4009ec:	4629      	mov	r1, r5
  4009ee:	4620      	mov	r0, r4
  4009f0:	4798      	blx	r3
}
  4009f2:	bd70      	pop	{r4, r5, r6, pc}
  4009f4:	00404ff4 	.word	0x00404ff4
  4009f8:	00400d65 	.word	0x00400d65

004009fc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4009fc:	b570      	push	{r4, r5, r6, lr}
  4009fe:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400a00:	4604      	mov	r4, r0
  400a02:	460d      	mov	r5, r1
  400a04:	2800      	cmp	r0, #0
  400a06:	bf18      	it	ne
  400a08:	2900      	cmpne	r1, #0
  400a0a:	bf14      	ite	ne
  400a0c:	2001      	movne	r0, #1
  400a0e:	2000      	moveq	r0, #0
  400a10:	223d      	movs	r2, #61	; 0x3d
  400a12:	4904      	ldr	r1, [pc, #16]	; (400a24 <io_read+0x28>)
  400a14:	4b04      	ldr	r3, [pc, #16]	; (400a28 <io_read+0x2c>)
  400a16:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400a18:	6863      	ldr	r3, [r4, #4]
  400a1a:	4632      	mov	r2, r6
  400a1c:	4629      	mov	r1, r5
  400a1e:	4620      	mov	r0, r4
  400a20:	4798      	blx	r3
}
  400a22:	bd70      	pop	{r4, r5, r6, pc}
  400a24:	00404ff4 	.word	0x00404ff4
  400a28:	00400d65 	.word	0x00400d65

00400a2c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400a2c:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400a2e:	6943      	ldr	r3, [r0, #20]
  400a30:	b103      	cbz	r3, 400a34 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400a32:	4798      	blx	r3
  400a34:	bd08      	pop	{r3, pc}

00400a36 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400a36:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400a38:	6983      	ldr	r3, [r0, #24]
  400a3a:	b103      	cbz	r3, 400a3e <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400a3c:	4798      	blx	r3
  400a3e:	bd08      	pop	{r3, pc}

00400a40 <pwm_init>:
{
  400a40:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400a42:	4604      	mov	r4, r0
  400a44:	460d      	mov	r5, r1
  400a46:	2800      	cmp	r0, #0
  400a48:	bf18      	it	ne
  400a4a:	2900      	cmpne	r1, #0
  400a4c:	bf14      	ite	ne
  400a4e:	2001      	movne	r0, #1
  400a50:	2000      	moveq	r0, #0
  400a52:	2233      	movs	r2, #51	; 0x33
  400a54:	4906      	ldr	r1, [pc, #24]	; (400a70 <pwm_init+0x30>)
  400a56:	4b07      	ldr	r3, [pc, #28]	; (400a74 <pwm_init+0x34>)
  400a58:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  400a5a:	4629      	mov	r1, r5
  400a5c:	4620      	mov	r0, r4
  400a5e:	4b06      	ldr	r3, [pc, #24]	; (400a78 <pwm_init+0x38>)
  400a60:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400a62:	4b06      	ldr	r3, [pc, #24]	; (400a7c <pwm_init+0x3c>)
  400a64:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400a66:	4b06      	ldr	r3, [pc, #24]	; (400a80 <pwm_init+0x40>)
  400a68:	6063      	str	r3, [r4, #4]
}
  400a6a:	2000      	movs	r0, #0
  400a6c:	bd38      	pop	{r3, r4, r5, pc}
  400a6e:	bf00      	nop
  400a70:	00405008 	.word	0x00405008
  400a74:	00400d65 	.word	0x00400d65
  400a78:	0040139d 	.word	0x0040139d
  400a7c:	00400a2d 	.word	0x00400a2d
  400a80:	00400a37 	.word	0x00400a37

00400a84 <pwm_enable>:
{
  400a84:	b510      	push	{r4, lr}
	ASSERT(descr);
  400a86:	4604      	mov	r4, r0
  400a88:	224a      	movs	r2, #74	; 0x4a
  400a8a:	4909      	ldr	r1, [pc, #36]	; (400ab0 <pwm_enable+0x2c>)
  400a8c:	3000      	adds	r0, #0
  400a8e:	bf18      	it	ne
  400a90:	2001      	movne	r0, #1
  400a92:	4b08      	ldr	r3, [pc, #32]	; (400ab4 <pwm_enable+0x30>)
  400a94:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  400a96:	4620      	mov	r0, r4
  400a98:	4b07      	ldr	r3, [pc, #28]	; (400ab8 <pwm_enable+0x34>)
  400a9a:	4798      	blx	r3
  400a9c:	b920      	cbnz	r0, 400aa8 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  400a9e:	4620      	mov	r0, r4
  400aa0:	4b06      	ldr	r3, [pc, #24]	; (400abc <pwm_enable+0x38>)
  400aa2:	4798      	blx	r3
	return ERR_NONE;
  400aa4:	2000      	movs	r0, #0
  400aa6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400aa8:	f06f 0010 	mvn.w	r0, #16
}
  400aac:	bd10      	pop	{r4, pc}
  400aae:	bf00      	nop
  400ab0:	00405008 	.word	0x00405008
  400ab4:	00400d65 	.word	0x00400d65
  400ab8:	00401585 	.word	0x00401585
  400abc:	004014e1 	.word	0x004014e1

00400ac0 <pwm_set_parameters>:
{
  400ac0:	b570      	push	{r4, r5, r6, lr}
  400ac2:	460d      	mov	r5, r1
  400ac4:	4616      	mov	r6, r2
	ASSERT(descr);
  400ac6:	4604      	mov	r4, r0
  400ac8:	227c      	movs	r2, #124	; 0x7c
  400aca:	4906      	ldr	r1, [pc, #24]	; (400ae4 <pwm_set_parameters+0x24>)
  400acc:	3000      	adds	r0, #0
  400ace:	bf18      	it	ne
  400ad0:	2001      	movne	r0, #1
  400ad2:	4b05      	ldr	r3, [pc, #20]	; (400ae8 <pwm_set_parameters+0x28>)
  400ad4:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  400ad6:	4632      	mov	r2, r6
  400ad8:	4629      	mov	r1, r5
  400ada:	4620      	mov	r0, r4
  400adc:	4b03      	ldr	r3, [pc, #12]	; (400aec <pwm_set_parameters+0x2c>)
  400ade:	4798      	blx	r3
}
  400ae0:	2000      	movs	r0, #0
  400ae2:	bd70      	pop	{r4, r5, r6, pc}
  400ae4:	00405008 	.word	0x00405008
  400ae8:	00400d65 	.word	0x00400d65
  400aec:	00401525 	.word	0x00401525

00400af0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400af2:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400af4:	b117      	cbz	r7, 400afc <timer_add_timer_task+0xc>
  400af6:	463c      	mov	r4, r7
  400af8:	2600      	movs	r6, #0
  400afa:	e00b      	b.n	400b14 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400afc:	4b0e      	ldr	r3, [pc, #56]	; (400b38 <timer_add_timer_task+0x48>)
  400afe:	4798      	blx	r3
		return;
  400b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400b02:	68a5      	ldr	r5, [r4, #8]
  400b04:	442b      	add	r3, r5
  400b06:	1a9b      	subs	r3, r3, r2
  400b08:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400b0a:	688d      	ldr	r5, [r1, #8]
  400b0c:	42ab      	cmp	r3, r5
  400b0e:	d209      	bcs.n	400b24 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400b10:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400b12:	6824      	ldr	r4, [r4, #0]
  400b14:	b134      	cbz	r4, 400b24 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400b16:	6863      	ldr	r3, [r4, #4]
  400b18:	4293      	cmp	r3, r2
  400b1a:	d8f2      	bhi.n	400b02 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400b1c:	68a5      	ldr	r5, [r4, #8]
  400b1e:	1a9b      	subs	r3, r3, r2
  400b20:	442b      	add	r3, r5
  400b22:	e7f2      	b.n	400b0a <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400b24:	42bc      	cmp	r4, r7
  400b26:	d003      	beq.n	400b30 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400b28:	4630      	mov	r0, r6
  400b2a:	4b04      	ldr	r3, [pc, #16]	; (400b3c <timer_add_timer_task+0x4c>)
  400b2c:	4798      	blx	r3
  400b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400b30:	4b01      	ldr	r3, [pc, #4]	; (400b38 <timer_add_timer_task+0x48>)
  400b32:	4798      	blx	r3
  400b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b36:	bf00      	nop
  400b38:	00400d81 	.word	0x00400d81
  400b3c:	00400dad 	.word	0x00400dad

00400b40 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b42:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400b44:	6906      	ldr	r6, [r0, #16]
  400b46:	3601      	adds	r6, #1
  400b48:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400b4a:	7e03      	ldrb	r3, [r0, #24]
  400b4c:	f013 0f01 	tst.w	r3, #1
  400b50:	d105      	bne.n	400b5e <timer_process_counted+0x1e>
  400b52:	7e03      	ldrb	r3, [r0, #24]
  400b54:	f013 0f02 	tst.w	r3, #2
  400b58:	d101      	bne.n	400b5e <timer_process_counted+0x1e>
  400b5a:	4605      	mov	r5, r0
  400b5c:	e009      	b.n	400b72 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  400b5e:	7e03      	ldrb	r3, [r0, #24]
  400b60:	f043 0302 	orr.w	r3, r3, #2
  400b64:	7603      	strb	r3, [r0, #24]
		return;
  400b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b68:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  400b6a:	68e3      	ldr	r3, [r4, #12]
  400b6c:	4620      	mov	r0, r4
  400b6e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  400b70:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  400b72:	b19c      	cbz	r4, 400b9c <timer_process_counted+0x5c>
  400b74:	6863      	ldr	r3, [r4, #4]
  400b76:	1af3      	subs	r3, r6, r3
  400b78:	68a2      	ldr	r2, [r4, #8]
  400b7a:	4293      	cmp	r3, r2
  400b7c:	d30e      	bcc.n	400b9c <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  400b7e:	f105 0714 	add.w	r7, r5, #20
  400b82:	4638      	mov	r0, r7
  400b84:	4b06      	ldr	r3, [pc, #24]	; (400ba0 <timer_process_counted+0x60>)
  400b86:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400b88:	7c23      	ldrb	r3, [r4, #16]
  400b8a:	2b01      	cmp	r3, #1
  400b8c:	d1ec      	bne.n	400b68 <timer_process_counted+0x28>
			tmp->time_label = time;
  400b8e:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400b90:	4632      	mov	r2, r6
  400b92:	4621      	mov	r1, r4
  400b94:	4638      	mov	r0, r7
  400b96:	4b03      	ldr	r3, [pc, #12]	; (400ba4 <timer_process_counted+0x64>)
  400b98:	4798      	blx	r3
  400b9a:	e7e5      	b.n	400b68 <timer_process_counted+0x28>
  400b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b9e:	bf00      	nop
  400ba0:	00400db5 	.word	0x00400db5
  400ba4:	00400af1 	.word	0x00400af1

00400ba8 <timer_init>:
{
  400ba8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400baa:	4604      	mov	r4, r0
  400bac:	460d      	mov	r5, r1
  400bae:	2800      	cmp	r0, #0
  400bb0:	bf18      	it	ne
  400bb2:	2900      	cmpne	r1, #0
  400bb4:	bf14      	ite	ne
  400bb6:	2001      	movne	r0, #1
  400bb8:	2000      	moveq	r0, #0
  400bba:	223b      	movs	r2, #59	; 0x3b
  400bbc:	4905      	ldr	r1, [pc, #20]	; (400bd4 <timer_init+0x2c>)
  400bbe:	4b06      	ldr	r3, [pc, #24]	; (400bd8 <timer_init+0x30>)
  400bc0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400bc2:	4629      	mov	r1, r5
  400bc4:	4620      	mov	r0, r4
  400bc6:	4b05      	ldr	r3, [pc, #20]	; (400bdc <timer_init+0x34>)
  400bc8:	4798      	blx	r3
	descr->time                           = 0;
  400bca:	2000      	movs	r0, #0
  400bcc:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400bce:	4b04      	ldr	r3, [pc, #16]	; (400be0 <timer_init+0x38>)
  400bd0:	6023      	str	r3, [r4, #0]
}
  400bd2:	bd38      	pop	{r3, r4, r5, pc}
  400bd4:	00405020 	.word	0x00405020
  400bd8:	00400d65 	.word	0x00400d65
  400bdc:	00401691 	.word	0x00401691
  400be0:	00400b41 	.word	0x00400b41

00400be4 <timer_start>:
{
  400be4:	b510      	push	{r4, lr}
	ASSERT(descr);
  400be6:	4604      	mov	r4, r0
  400be8:	2253      	movs	r2, #83	; 0x53
  400bea:	4909      	ldr	r1, [pc, #36]	; (400c10 <timer_start+0x2c>)
  400bec:	3000      	adds	r0, #0
  400bee:	bf18      	it	ne
  400bf0:	2001      	movne	r0, #1
  400bf2:	4b08      	ldr	r3, [pc, #32]	; (400c14 <timer_start+0x30>)
  400bf4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  400bf6:	4620      	mov	r0, r4
  400bf8:	4b07      	ldr	r3, [pc, #28]	; (400c18 <timer_start+0x34>)
  400bfa:	4798      	blx	r3
  400bfc:	b920      	cbnz	r0, 400c08 <timer_start+0x24>
	_timer_start(&descr->device);
  400bfe:	4620      	mov	r0, r4
  400c00:	4b06      	ldr	r3, [pc, #24]	; (400c1c <timer_start+0x38>)
  400c02:	4798      	blx	r3
	return ERR_NONE;
  400c04:	2000      	movs	r0, #0
  400c06:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400c08:	f06f 0010 	mvn.w	r0, #16
}
  400c0c:	bd10      	pop	{r4, pc}
  400c0e:	bf00      	nop
  400c10:	00405020 	.word	0x00405020
  400c14:	00400d65 	.word	0x00400d65
  400c18:	00401779 	.word	0x00401779
  400c1c:	0040176d 	.word	0x0040176d

00400c20 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400c22:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400c24:	4605      	mov	r5, r0
  400c26:	460f      	mov	r7, r1
  400c28:	2800      	cmp	r0, #0
  400c2a:	bf18      	it	ne
  400c2c:	2900      	cmpne	r1, #0
  400c2e:	d002      	beq.n	400c36 <usart_sync_write+0x16>
  400c30:	bb0a      	cbnz	r2, 400c76 <usart_sync_write+0x56>
  400c32:	2000      	movs	r0, #0
  400c34:	e000      	b.n	400c38 <usart_sync_write+0x18>
  400c36:	2000      	movs	r0, #0
  400c38:	22f1      	movs	r2, #241	; 0xf1
  400c3a:	4910      	ldr	r1, [pc, #64]	; (400c7c <usart_sync_write+0x5c>)
  400c3c:	4b10      	ldr	r3, [pc, #64]	; (400c80 <usart_sync_write+0x60>)
  400c3e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400c40:	f105 0408 	add.w	r4, r5, #8
  400c44:	4620      	mov	r0, r4
  400c46:	4b0f      	ldr	r3, [pc, #60]	; (400c84 <usart_sync_write+0x64>)
  400c48:	4798      	blx	r3
  400c4a:	2800      	cmp	r0, #0
  400c4c:	d0f8      	beq.n	400c40 <usart_sync_write+0x20>
  400c4e:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400c50:	5d79      	ldrb	r1, [r7, r5]
  400c52:	4620      	mov	r0, r4
  400c54:	4b0c      	ldr	r3, [pc, #48]	; (400c88 <usart_sync_write+0x68>)
  400c56:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400c58:	4620      	mov	r0, r4
  400c5a:	4b0a      	ldr	r3, [pc, #40]	; (400c84 <usart_sync_write+0x64>)
  400c5c:	4798      	blx	r3
  400c5e:	2800      	cmp	r0, #0
  400c60:	d0fa      	beq.n	400c58 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  400c62:	3501      	adds	r5, #1
  400c64:	42b5      	cmp	r5, r6
  400c66:	d3f3      	bcc.n	400c50 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400c68:	4620      	mov	r0, r4
  400c6a:	4b08      	ldr	r3, [pc, #32]	; (400c8c <usart_sync_write+0x6c>)
  400c6c:	4798      	blx	r3
  400c6e:	2800      	cmp	r0, #0
  400c70:	d0fa      	beq.n	400c68 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  400c72:	4628      	mov	r0, r5
  400c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400c76:	2001      	movs	r0, #1
  400c78:	e7de      	b.n	400c38 <usart_sync_write+0x18>
  400c7a:	bf00      	nop
  400c7c:	00405038 	.word	0x00405038
  400c80:	00400d65 	.word	0x00400d65
  400c84:	00401955 	.word	0x00401955
  400c88:	0040190d 	.word	0x0040190d
  400c8c:	0040197d 	.word	0x0040197d

00400c90 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c94:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400c96:	4605      	mov	r5, r0
  400c98:	4688      	mov	r8, r1
  400c9a:	2800      	cmp	r0, #0
  400c9c:	bf18      	it	ne
  400c9e:	2900      	cmpne	r1, #0
  400ca0:	d002      	beq.n	400ca8 <usart_sync_read+0x18>
  400ca2:	b9d2      	cbnz	r2, 400cda <usart_sync_read+0x4a>
  400ca4:	2000      	movs	r0, #0
  400ca6:	e000      	b.n	400caa <usart_sync_read+0x1a>
  400ca8:	2000      	movs	r0, #0
  400caa:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400cae:	490c      	ldr	r1, [pc, #48]	; (400ce0 <usart_sync_read+0x50>)
  400cb0:	4b0c      	ldr	r3, [pc, #48]	; (400ce4 <usart_sync_read+0x54>)
  400cb2:	4798      	blx	r3
	uint32_t                      offset = 0;
  400cb4:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400cb6:	f105 0408 	add.w	r4, r5, #8
  400cba:	4620      	mov	r0, r4
  400cbc:	4b0a      	ldr	r3, [pc, #40]	; (400ce8 <usart_sync_read+0x58>)
  400cbe:	4798      	blx	r3
  400cc0:	2800      	cmp	r0, #0
  400cc2:	d0f8      	beq.n	400cb6 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400cc4:	4620      	mov	r0, r4
  400cc6:	4b09      	ldr	r3, [pc, #36]	; (400cec <usart_sync_read+0x5c>)
  400cc8:	4798      	blx	r3
  400cca:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400cce:	3601      	adds	r6, #1
  400cd0:	42be      	cmp	r6, r7
  400cd2:	d3f0      	bcc.n	400cb6 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400cd4:	4630      	mov	r0, r6
  400cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400cda:	2001      	movs	r0, #1
  400cdc:	e7e5      	b.n	400caa <usart_sync_read+0x1a>
  400cde:	bf00      	nop
  400ce0:	00405038 	.word	0x00405038
  400ce4:	00400d65 	.word	0x00400d65
  400ce8:	004019a5 	.word	0x004019a5
  400cec:	00401931 	.word	0x00401931

00400cf0 <usart_sync_init>:
{
  400cf0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400cf2:	4604      	mov	r4, r0
  400cf4:	460d      	mov	r5, r1
  400cf6:	2800      	cmp	r0, #0
  400cf8:	bf18      	it	ne
  400cfa:	2900      	cmpne	r1, #0
  400cfc:	bf14      	ite	ne
  400cfe:	2001      	movne	r0, #1
  400d00:	2000      	moveq	r0, #0
  400d02:	2234      	movs	r2, #52	; 0x34
  400d04:	4907      	ldr	r1, [pc, #28]	; (400d24 <usart_sync_init+0x34>)
  400d06:	4b08      	ldr	r3, [pc, #32]	; (400d28 <usart_sync_init+0x38>)
  400d08:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400d0a:	4629      	mov	r1, r5
  400d0c:	f104 0008 	add.w	r0, r4, #8
  400d10:	4b06      	ldr	r3, [pc, #24]	; (400d2c <usart_sync_init+0x3c>)
  400d12:	4798      	blx	r3
	if (init_status) {
  400d14:	4603      	mov	r3, r0
  400d16:	b918      	cbnz	r0, 400d20 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400d18:	4a05      	ldr	r2, [pc, #20]	; (400d30 <usart_sync_init+0x40>)
  400d1a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400d1c:	4a05      	ldr	r2, [pc, #20]	; (400d34 <usart_sync_init+0x44>)
  400d1e:	6022      	str	r2, [r4, #0]
}
  400d20:	4618      	mov	r0, r3
  400d22:	bd38      	pop	{r3, r4, r5, pc}
  400d24:	00405038 	.word	0x00405038
  400d28:	00400d65 	.word	0x00400d65
  400d2c:	004018a1 	.word	0x004018a1
  400d30:	00400c91 	.word	0x00400c91
  400d34:	00400c21 	.word	0x00400c21

00400d38 <usart_sync_enable>:
{
  400d38:	b510      	push	{r4, lr}
	ASSERT(descr);
  400d3a:	4604      	mov	r4, r0
  400d3c:	2253      	movs	r2, #83	; 0x53
  400d3e:	4906      	ldr	r1, [pc, #24]	; (400d58 <usart_sync_enable+0x20>)
  400d40:	3000      	adds	r0, #0
  400d42:	bf18      	it	ne
  400d44:	2001      	movne	r0, #1
  400d46:	4b05      	ldr	r3, [pc, #20]	; (400d5c <usart_sync_enable+0x24>)
  400d48:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400d4a:	f104 0008 	add.w	r0, r4, #8
  400d4e:	4b04      	ldr	r3, [pc, #16]	; (400d60 <usart_sync_enable+0x28>)
  400d50:	4798      	blx	r3
}
  400d52:	2000      	movs	r0, #0
  400d54:	bd10      	pop	{r4, pc}
  400d56:	bf00      	nop
  400d58:	00405038 	.word	0x00405038
  400d5c:	00400d65 	.word	0x00400d65
  400d60:	004018d9 	.word	0x004018d9

00400d64 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400d64:	b900      	cbnz	r0, 400d68 <assert+0x4>
		__asm("BKPT #0");
  400d66:	be00      	bkpt	0x0000
  400d68:	4770      	bx	lr

00400d6a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  400d6a:	6803      	ldr	r3, [r0, #0]
  400d6c:	b11b      	cbz	r3, 400d76 <is_list_element+0xc>
		if (it == element) {
  400d6e:	428b      	cmp	r3, r1
  400d70:	d003      	beq.n	400d7a <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  400d72:	681b      	ldr	r3, [r3, #0]
  400d74:	e7fa      	b.n	400d6c <is_list_element+0x2>
			return true;
		}
	}

	return false;
  400d76:	2000      	movs	r0, #0
  400d78:	4770      	bx	lr
			return true;
  400d7a:	2001      	movs	r0, #1
}
  400d7c:	4770      	bx	lr
	...

00400d80 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400d80:	b538      	push	{r3, r4, r5, lr}
  400d82:	4604      	mov	r4, r0
  400d84:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  400d86:	4b06      	ldr	r3, [pc, #24]	; (400da0 <list_insert_as_head+0x20>)
  400d88:	4798      	blx	r3
  400d8a:	f080 0001 	eor.w	r0, r0, #1
  400d8e:	2239      	movs	r2, #57	; 0x39
  400d90:	4904      	ldr	r1, [pc, #16]	; (400da4 <list_insert_as_head+0x24>)
  400d92:	b2c0      	uxtb	r0, r0
  400d94:	4b04      	ldr	r3, [pc, #16]	; (400da8 <list_insert_as_head+0x28>)
  400d96:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  400d98:	6823      	ldr	r3, [r4, #0]
  400d9a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  400d9c:	6025      	str	r5, [r4, #0]
  400d9e:	bd38      	pop	{r3, r4, r5, pc}
  400da0:	00400d6b 	.word	0x00400d6b
  400da4:	00405054 	.word	0x00405054
  400da8:	00400d65 	.word	0x00400d65

00400dac <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  400dac:	6803      	ldr	r3, [r0, #0]
  400dae:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400db0:	6001      	str	r1, [r0, #0]
  400db2:	4770      	bx	lr

00400db4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  400db4:	6803      	ldr	r3, [r0, #0]
  400db6:	b11b      	cbz	r3, 400dc0 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400db8:	681a      	ldr	r2, [r3, #0]
  400dba:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400dbc:	4618      	mov	r0, r3
  400dbe:	4770      	bx	lr
	}

	return NULL;
  400dc0:	2000      	movs	r0, #0
}
  400dc2:	4770      	bx	lr

00400dc4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  400dc4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  400dc6:	4a06      	ldr	r2, [pc, #24]	; (400de0 <_sbrk+0x1c>)
  400dc8:	6812      	ldr	r2, [r2, #0]
  400dca:	b122      	cbz	r2, 400dd6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400dcc:	4a04      	ldr	r2, [pc, #16]	; (400de0 <_sbrk+0x1c>)
  400dce:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400dd0:	4403      	add	r3, r0
  400dd2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  400dd4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400dd6:	4903      	ldr	r1, [pc, #12]	; (400de4 <_sbrk+0x20>)
  400dd8:	4a01      	ldr	r2, [pc, #4]	; (400de0 <_sbrk+0x1c>)
  400dda:	6011      	str	r1, [r2, #0]
  400ddc:	e7f6      	b.n	400dcc <_sbrk+0x8>
  400dde:	bf00      	nop
  400de0:	20400258 	.word	0x20400258
  400de4:	20400ab8 	.word	0x20400ab8

00400de8 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  400de8:	f04f 30ff 	mov.w	r0, #4294967295
  400dec:	4770      	bx	lr

00400dee <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400df2:	604b      	str	r3, [r1, #4]

	return 0;
}
  400df4:	2000      	movs	r0, #0
  400df6:	4770      	bx	lr

00400df8 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  400df8:	2001      	movs	r0, #1
  400dfa:	4770      	bx	lr

00400dfc <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400dfc:	2000      	movs	r0, #0
  400dfe:	4770      	bx	lr

00400e00 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  400e00:	2364      	movs	r3, #100	; 0x64
  400e02:	4a1d      	ldr	r2, [pc, #116]	; (400e78 <_afec_init+0x78>)
  400e04:	fb03 2301 	mla	r3, r3, r1, r2
  400e08:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  400e0a:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  400e0c:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  400e0e:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  400e10:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  400e12:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  400e14:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  400e16:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  400e18:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  400e1a:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  400e1c:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  400e1e:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  400e20:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  400e22:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  400e24:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  400e26:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  400e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  400e2c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  400e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  400e32:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  400e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  400e38:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  400e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  400e3e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400e42:	2200      	movs	r2, #0
  400e44:	2a0b      	cmp	r2, #11
  400e46:	d814      	bhi.n	400e72 <_afec_init+0x72>
{
  400e48:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  400e4a:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  400e4c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400e50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400e54:	4413      	add	r3, r2
  400e56:	330c      	adds	r3, #12
  400e58:	4c07      	ldr	r4, [pc, #28]	; (400e78 <_afec_init+0x78>)
  400e5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  400e5e:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  400e60:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400e62:	3201      	adds	r2, #1
  400e64:	b2d2      	uxtb	r2, r2
  400e66:	2a0b      	cmp	r2, #11
  400e68:	d9ef      	bls.n	400e4a <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  400e6a:	2000      	movs	r0, #0
  400e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e70:	4770      	bx	lr
  400e72:	2000      	movs	r0, #0
  400e74:	4770      	bx	lr
  400e76:	bf00      	nop
  400e78:	00405074 	.word	0x00405074

00400e7c <_afec_get_hardware_index>:
{
  400e7c:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  400e7e:	4b09      	ldr	r3, [pc, #36]	; (400ea4 <_afec_get_hardware_index+0x28>)
  400e80:	4298      	cmp	r0, r3
  400e82:	d00a      	beq.n	400e9a <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  400e84:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400e88:	4298      	cmp	r0, r3
  400e8a:	d008      	beq.n	400e9e <_afec_get_hardware_index+0x22>
	ASSERT(false);
  400e8c:	22a3      	movs	r2, #163	; 0xa3
  400e8e:	4906      	ldr	r1, [pc, #24]	; (400ea8 <_afec_get_hardware_index+0x2c>)
  400e90:	2000      	movs	r0, #0
  400e92:	4b06      	ldr	r3, [pc, #24]	; (400eac <_afec_get_hardware_index+0x30>)
  400e94:	4798      	blx	r3
	return 0;
  400e96:	2000      	movs	r0, #0
  400e98:	bd08      	pop	{r3, pc}
		return 0;
  400e9a:	2000      	movs	r0, #0
  400e9c:	bd08      	pop	{r3, pc}
		return 1;
  400e9e:	2001      	movs	r0, #1
}
  400ea0:	bd08      	pop	{r3, pc}
  400ea2:	bf00      	nop
  400ea4:	4003c000 	.word	0x4003c000
  400ea8:	0040513c 	.word	0x0040513c
  400eac:	00400d65 	.word	0x00400d65

00400eb0 <_afec_get_regs>:
{
  400eb0:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  400eb2:	4b09      	ldr	r3, [pc, #36]	; (400ed8 <_afec_get_regs+0x28>)
  400eb4:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400eb6:	2300      	movs	r3, #0
  400eb8:	2b01      	cmp	r3, #1
  400eba:	d809      	bhi.n	400ed0 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  400ebc:	2264      	movs	r2, #100	; 0x64
  400ebe:	fb02 f203 	mul.w	r2, r2, r3
  400ec2:	4906      	ldr	r1, [pc, #24]	; (400edc <_afec_get_regs+0x2c>)
  400ec4:	5c8a      	ldrb	r2, [r1, r2]
  400ec6:	4290      	cmp	r0, r2
  400ec8:	d003      	beq.n	400ed2 <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400eca:	3301      	adds	r3, #1
  400ecc:	b2db      	uxtb	r3, r3
  400ece:	e7f3      	b.n	400eb8 <_afec_get_regs+0x8>
	return 0;
  400ed0:	2300      	movs	r3, #0
}
  400ed2:	4618      	mov	r0, r3
  400ed4:	bd08      	pop	{r3, pc}
  400ed6:	bf00      	nop
  400ed8:	00400e7d 	.word	0x00400e7d
  400edc:	00405074 	.word	0x00405074

00400ee0 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
  400ee0:	b538      	push	{r3, r4, r5, lr}
  400ee2:	460c      	mov	r4, r1
	ASSERT(device);
  400ee4:	4605      	mov	r5, r0
  400ee6:	f44f 728d 	mov.w	r2, #282	; 0x11a
  400eea:	4907      	ldr	r1, [pc, #28]	; (400f08 <_adc_sync_init+0x28>)
  400eec:	3000      	adds	r0, #0
  400eee:	bf18      	it	ne
  400ef0:	2001      	movne	r0, #1
  400ef2:	4b06      	ldr	r3, [pc, #24]	; (400f0c <_adc_sync_init+0x2c>)
  400ef4:	4798      	blx	r3

	device->hw = hw;
  400ef6:	602c      	str	r4, [r5, #0]

	return _afec_init(hw, _afec_get_regs((uint32_t)hw));
  400ef8:	4620      	mov	r0, r4
  400efa:	4b05      	ldr	r3, [pc, #20]	; (400f10 <_adc_sync_init+0x30>)
  400efc:	4798      	blx	r3
  400efe:	4601      	mov	r1, r0
  400f00:	4620      	mov	r0, r4
  400f02:	4b04      	ldr	r3, [pc, #16]	; (400f14 <_adc_sync_init+0x34>)
  400f04:	4798      	blx	r3
}
  400f06:	bd38      	pop	{r3, r4, r5, pc}
  400f08:	0040513c 	.word	0x0040513c
  400f0c:	00400d65 	.word	0x00400d65
  400f10:	00400eb1 	.word	0x00400eb1
  400f14:	00400e01 	.word	0x00400e01

00400f18 <_adc_sync_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  400f18:	6802      	ldr	r2, [r0, #0]
  400f1a:	2301      	movs	r3, #1
  400f1c:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  400f20:	6151      	str	r1, [r2, #20]
  400f22:	4770      	bx	lr

00400f24 <_adc_sync_get_data_size>:
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	(void)device;

	return 2;
}
  400f24:	2002      	movs	r0, #2
  400f26:	4770      	bx	lr

00400f28 <_adc_sync_is_channel_conversion_done>:
/**
 * \brief Check if conversion is done
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	return hri_afec_get_ISR_reg(device->hw, (1 << channel));
  400f28:	6802      	ldr	r2, [r0, #0]
  400f2a:	2301      	movs	r3, #1
  400f2c:	fa03 f101 	lsl.w	r1, r3, r1
	tmp = ((Afec *)hw)->AFEC_ISR;
  400f30:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f32:	4219      	tst	r1, r3
}
  400f34:	bf14      	ite	ne
  400f36:	2001      	movne	r0, #1
  400f38:	2000      	moveq	r0, #0
  400f3a:	4770      	bx	lr

00400f3c <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_afec_write_CR_reg(device->hw, AFEC_CR_START);
  400f3c:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_afec_write_CR_reg(const void *const hw, hri_afec_cr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CR = data;
  400f3e:	2202      	movs	r2, #2
  400f40:	601a      	str	r2, [r3, #0]
  400f42:	4770      	bx	lr

00400f44 <_adc_sync_read_channel_data>:
/**
 * \brief Retrieve the conversion result
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_write_CSELR_reg(device->hw, channel);
  400f44:	6803      	ldr	r3, [r0, #0]
	((Afec *)hw)->AFEC_CSELR = data;
  400f46:	6659      	str	r1, [r3, #100]	; 0x64

	return hri_afec_read_CDR_reg(device->hw);
  400f48:	6803      	ldr	r3, [r0, #0]
	return ((Afec *)hw)->AFEC_CDR;
  400f4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400f4c:	b280      	uxth	r0, r0
  400f4e:	4770      	bx	lr

00400f50 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  400f50:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400f54:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400f5c:	fb03 f000 	mul.w	r0, r3, r0
  400f60:	4770      	bx	lr
	...

00400f64 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400f64:	b500      	push	{lr}
  400f66:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400f68:	a801      	add	r0, sp, #4
  400f6a:	4b14      	ldr	r3, [pc, #80]	; (400fbc <_init_chip+0x58>)
  400f6c:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400f6e:	4a14      	ldr	r2, [pc, #80]	; (400fc0 <_init_chip+0x5c>)
  400f70:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400f7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400f80:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400f84:	a801      	add	r0, sp, #4
  400f86:	4b0f      	ldr	r3, [pc, #60]	; (400fc4 <_init_chip+0x60>)
  400f88:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400f8a:	4a0f      	ldr	r2, [pc, #60]	; (400fc8 <_init_chip+0x64>)
  400f8c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400f8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400f92:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400f96:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400f98:	4b0c      	ldr	r3, [pc, #48]	; (400fcc <_init_chip+0x68>)
  400f9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400f9e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  400fa2:	d104      	bne.n	400fae <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400fa4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400fa8:	4b08      	ldr	r3, [pc, #32]	; (400fcc <_init_chip+0x68>)
  400faa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  400fae:	4b08      	ldr	r3, [pc, #32]	; (400fd0 <_init_chip+0x6c>)
  400fb0:	4798      	blx	r3

#endif
	_pmc_init();
  400fb2:	4b08      	ldr	r3, [pc, #32]	; (400fd4 <_init_chip+0x70>)
  400fb4:	4798      	blx	r3
}
  400fb6:	b003      	add	sp, #12
  400fb8:	f85d fb04 	ldr.w	pc, [sp], #4
  400fbc:	00400905 	.word	0x00400905
  400fc0:	e000ed00 	.word	0xe000ed00
  400fc4:	00400913 	.word	0x00400913
  400fc8:	400e0c00 	.word	0x400e0c00
  400fcc:	400e0600 	.word	0x400e0600
  400fd0:	004019d1 	.word	0x004019d1
  400fd4:	00401359 	.word	0x00401359

00400fd8 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  400fd8:	b538      	push	{r3, r4, r5, lr}
  400fda:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  400fdc:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  400fde:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  400fe0:	f014 0f01 	tst.w	r4, #1
  400fe4:	d11a      	bne.n	40101c <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  400fe6:	f414 7f00 	tst.w	r4, #512	; 0x200
  400fea:	d11a      	bne.n	401022 <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  400fec:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  400ff0:	d11b      	bne.n	40102a <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  400ff2:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  400ff6:	d11d      	bne.n	401034 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  400ff8:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  400ffc:	d008      	beq.n	401010 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400ffe:	68eb      	ldr	r3, [r5, #12]
  401000:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  401002:	6c52      	ldr	r2, [r2, #68]	; 0x44
  401004:	f012 0f20 	tst.w	r2, #32
  401008:	d019      	beq.n	40103e <_can_irq_handler+0x66>
  40100a:	2102      	movs	r1, #2
  40100c:	4628      	mov	r0, r5
  40100e:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  401010:	f014 0f08 	tst.w	r4, #8
  401014:	d115      	bne.n	401042 <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  401016:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  401018:	651c      	str	r4, [r3, #80]	; 0x50
  40101a:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  40101c:	6883      	ldr	r3, [r0, #8]
  40101e:	4798      	blx	r3
  401020:	e7e1      	b.n	400fe6 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  401022:	686b      	ldr	r3, [r5, #4]
  401024:	4628      	mov	r0, r5
  401026:	4798      	blx	r3
  401028:	e7e0      	b.n	400fec <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  40102a:	68eb      	ldr	r3, [r5, #12]
  40102c:	2103      	movs	r1, #3
  40102e:	4628      	mov	r0, r5
  401030:	4798      	blx	r3
  401032:	e7de      	b.n	400ff2 <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  401034:	68eb      	ldr	r3, [r5, #12]
  401036:	2100      	movs	r1, #0
  401038:	4628      	mov	r0, r5
  40103a:	4798      	blx	r3
  40103c:	e7dc      	b.n	400ff8 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  40103e:	2101      	movs	r1, #1
  401040:	e7e4      	b.n	40100c <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  401042:	68eb      	ldr	r3, [r5, #12]
  401044:	2104      	movs	r1, #4
  401046:	4628      	mov	r0, r5
  401048:	4798      	blx	r3
  40104a:	e7e4      	b.n	401016 <_can_irq_handler+0x3e>

0040104c <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  40104c:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  40104e:	4b02      	ldr	r3, [pc, #8]	; (401058 <MCAN1_INT0_Handler+0xc>)
  401050:	6a98      	ldr	r0, [r3, #40]	; 0x28
  401052:	4b02      	ldr	r3, [pc, #8]	; (40105c <MCAN1_INT0_Handler+0x10>)
  401054:	4798      	blx	r3
  401056:	bd08      	pop	{r3, pc}
  401058:	2040025c 	.word	0x2040025c
  40105c:	00400fd9 	.word	0x00400fd9

00401060 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401060:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  401062:	2500      	movs	r5, #0
  401064:	428d      	cmp	r5, r1
  401066:	d210      	bcs.n	40108a <_ffs+0x2a>
  401068:	2201      	movs	r2, #1
  40106a:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40106c:	2b1f      	cmp	r3, #31
  40106e:	d80a      	bhi.n	401086 <_ffs+0x26>
			if (v[i] & bit) {
  401070:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401074:	4222      	tst	r2, r4
  401076:	d102      	bne.n	40107e <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401078:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40107a:	3301      	adds	r3, #1
  40107c:	e7f6      	b.n	40106c <_ffs+0xc>
				return i * 32 + j;
  40107e:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401082:	bc30      	pop	{r4, r5}
  401084:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  401086:	3501      	adds	r5, #1
  401088:	e7ec      	b.n	401064 <_ffs+0x4>
	return -1;
  40108a:	f04f 30ff 	mov.w	r0, #4294967295
  40108e:	e7f8      	b.n	401082 <_ffs+0x22>

00401090 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401090:	b510      	push	{r4, lr}
  401092:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401094:	2300      	movs	r3, #0
  401096:	9301      	str	r3, [sp, #4]
  401098:	9302      	str	r3, [sp, #8]
  40109a:	9303      	str	r3, [sp, #12]
  40109c:	9304      	str	r3, [sp, #16]
  40109e:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  4010a0:	4b21      	ldr	r3, [pc, #132]	; (401128 <_ext_irq_handler+0x98>)
  4010a2:	6818      	ldr	r0, [r3, #0]
  4010a4:	22f8      	movs	r2, #248	; 0xf8
  4010a6:	4921      	ldr	r1, [pc, #132]	; (40112c <_ext_irq_handler+0x9c>)
  4010a8:	3000      	adds	r0, #0
  4010aa:	bf18      	it	ne
  4010ac:	2001      	movne	r0, #1
  4010ae:	4b20      	ldr	r3, [pc, #128]	; (401130 <_ext_irq_handler+0xa0>)
  4010b0:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  4010b2:	4b20      	ldr	r3, [pc, #128]	; (401134 <_ext_irq_handler+0xa4>)
  4010b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4010b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  4010b8:	4013      	ands	r3, r2
  4010ba:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  4010bc:	491e      	ldr	r1, [pc, #120]	; (401138 <_ext_irq_handler+0xa8>)
  4010be:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4010c0:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4010c2:	400a      	ands	r2, r1
  4010c4:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  4010c6:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  4010c8:	e025      	b.n	401116 <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  4010ca:	4b17      	ldr	r3, [pc, #92]	; (401128 <_ext_irq_handler+0x98>)
  4010cc:	681b      	ldr	r3, [r3, #0]
  4010ce:	4620      	mov	r0, r4
  4010d0:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  4010d2:	1163      	asrs	r3, r4, #5
  4010d4:	f004 041f 	and.w	r4, r4, #31
  4010d8:	2201      	movs	r2, #1
  4010da:	fa02 f404 	lsl.w	r4, r2, r4
  4010de:	aa06      	add	r2, sp, #24
  4010e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4010e4:	f853 2c14 	ldr.w	r2, [r3, #-20]
  4010e8:	ea22 0204 	bic.w	r2, r2, r4
  4010ec:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  4010f0:	2105      	movs	r1, #5
  4010f2:	a801      	add	r0, sp, #4
  4010f4:	4b11      	ldr	r3, [pc, #68]	; (40113c <_ext_irq_handler+0xac>)
  4010f6:	4798      	blx	r3
  4010f8:	4604      	mov	r4, r0
		while (-1 != pos) {
  4010fa:	f1b4 3fff 	cmp.w	r4, #4294967295
  4010fe:	d1e4      	bne.n	4010ca <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  401100:	4a0c      	ldr	r2, [pc, #48]	; (401134 <_ext_irq_handler+0xa4>)
  401102:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401104:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401106:	400b      	ands	r3, r1
  401108:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  40110a:	490b      	ldr	r1, [pc, #44]	; (401138 <_ext_irq_handler+0xa8>)
  40110c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40110e:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401110:	4002      	ands	r2, r0
  401112:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  401114:	4313      	orrs	r3, r2
	while (flag_total) {
  401116:	b12b      	cbz	r3, 401124 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  401118:	2105      	movs	r1, #5
  40111a:	a801      	add	r0, sp, #4
  40111c:	4b07      	ldr	r3, [pc, #28]	; (40113c <_ext_irq_handler+0xac>)
  40111e:	4798      	blx	r3
  401120:	4604      	mov	r4, r0
		while (-1 != pos) {
  401122:	e7ea      	b.n	4010fa <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  401124:	b006      	add	sp, #24
  401126:	bd10      	pop	{r4, pc}
  401128:	20400288 	.word	0x20400288
  40112c:	00405194 	.word	0x00405194
  401130:	00400d65 	.word	0x00400d65
  401134:	400e0e00 	.word	0x400e0e00
  401138:	400e1400 	.word	0x400e1400
  40113c:	00401061 	.word	0x00401061

00401140 <_pio_get_hardware_index>:
{
  401140:	b510      	push	{r4, lr}
	ASSERT(hw);
  401142:	4604      	mov	r4, r0
  401144:	22d2      	movs	r2, #210	; 0xd2
  401146:	4905      	ldr	r1, [pc, #20]	; (40115c <_pio_get_hardware_index+0x1c>)
  401148:	3000      	adds	r0, #0
  40114a:	bf18      	it	ne
  40114c:	2001      	movne	r0, #1
  40114e:	4b04      	ldr	r3, [pc, #16]	; (401160 <_pio_get_hardware_index+0x20>)
  401150:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  401152:	4804      	ldr	r0, [pc, #16]	; (401164 <_pio_get_hardware_index+0x24>)
  401154:	4420      	add	r0, r4
}
  401156:	f3c0 2047 	ubfx	r0, r0, #9, #8
  40115a:	bd10      	pop	{r4, pc}
  40115c:	00405194 	.word	0x00405194
  401160:	00400d65 	.word	0x00400d65
  401164:	bff1f200 	.word	0xbff1f200

00401168 <_pio_get_index>:
{
  401168:	b510      	push	{r4, lr}
	ASSERT(hw);
  40116a:	4604      	mov	r4, r0
  40116c:	22e0      	movs	r2, #224	; 0xe0
  40116e:	490d      	ldr	r1, [pc, #52]	; (4011a4 <_pio_get_index+0x3c>)
  401170:	3000      	adds	r0, #0
  401172:	bf18      	it	ne
  401174:	2001      	movne	r0, #1
  401176:	4b0c      	ldr	r3, [pc, #48]	; (4011a8 <_pio_get_index+0x40>)
  401178:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  40117a:	4620      	mov	r0, r4
  40117c:	4b0b      	ldr	r3, [pc, #44]	; (4011ac <_pio_get_index+0x44>)
  40117e:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401180:	2300      	movs	r3, #0
  401182:	2b01      	cmp	r3, #1
  401184:	d80b      	bhi.n	40119e <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  401186:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  40118a:	008a      	lsls	r2, r1, #2
  40118c:	4908      	ldr	r1, [pc, #32]	; (4011b0 <_pio_get_index+0x48>)
  40118e:	5c8a      	ldrb	r2, [r1, r2]
  401190:	4290      	cmp	r0, r2
  401192:	d002      	beq.n	40119a <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401194:	3301      	adds	r3, #1
  401196:	b2db      	uxtb	r3, r3
  401198:	e7f3      	b.n	401182 <_pio_get_index+0x1a>
			return i;
  40119a:	b258      	sxtb	r0, r3
  40119c:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  40119e:	f04f 30ff 	mov.w	r0, #4294967295
}
  4011a2:	bd10      	pop	{r4, pc}
  4011a4:	00405194 	.word	0x00405194
  4011a8:	00400d65 	.word	0x00400d65
  4011ac:	00401141 	.word	0x00401141
  4011b0:	00405154 	.word	0x00405154

004011b4 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  4011b4:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  4011b6:	4604      	mov	r4, r0
  4011b8:	f240 1259 	movw	r2, #345	; 0x159
  4011bc:	4929      	ldr	r1, [pc, #164]	; (401264 <_pio_init+0xb0>)
  4011be:	3000      	adds	r0, #0
  4011c0:	bf18      	it	ne
  4011c2:	2001      	movne	r0, #1
  4011c4:	4b28      	ldr	r3, [pc, #160]	; (401268 <_pio_init+0xb4>)
  4011c6:	4798      	blx	r3

	i = _pio_get_index(hw);
  4011c8:	4620      	mov	r0, r4
  4011ca:	4b28      	ldr	r3, [pc, #160]	; (40126c <_pio_init+0xb8>)
  4011cc:	4798      	blx	r3
	if (i < 0) {
  4011ce:	2800      	cmp	r0, #0
  4011d0:	db43      	blt.n	40125a <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  4011d2:	4d27      	ldr	r5, [pc, #156]	; (401270 <_pio_init+0xbc>)
  4011d4:	00c2      	lsls	r2, r0, #3
  4011d6:	1a11      	subs	r1, r2, r0
  4011d8:	008b      	lsls	r3, r1, #2
  4011da:	442b      	add	r3, r5
  4011dc:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  4011de:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  4011e2:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  4011e4:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  4011e8:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  4011ea:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  4011ee:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  4011f0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  4011f4:	1a10      	subs	r0, r2, r0
  4011f6:	0083      	lsls	r3, r0, #2
  4011f8:	442b      	add	r3, r5
  4011fa:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  4011fc:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401200:	4620      	mov	r0, r4
  401202:	4b1c      	ldr	r3, [pc, #112]	; (401274 <_pio_init+0xc0>)
  401204:	4798      	blx	r3
  401206:	4428      	add	r0, r5
  401208:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  if ((int32_t)(IRQn) >= 0)
  40120c:	2b00      	cmp	r3, #0
  40120e:	db0c      	blt.n	40122a <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401210:	095a      	lsrs	r2, r3, #5
  401212:	f003 001f 	and.w	r0, r3, #31
  401216:	2101      	movs	r1, #1
  401218:	4081      	lsls	r1, r0
  40121a:	3220      	adds	r2, #32
  40121c:	4816      	ldr	r0, [pc, #88]	; (401278 <_pio_init+0xc4>)
  40121e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401222:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401226:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40122a:	2b00      	cmp	r3, #0
  40122c:	db08      	blt.n	401240 <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40122e:	095a      	lsrs	r2, r3, #5
  401230:	f003 001f 	and.w	r0, r3, #31
  401234:	2101      	movs	r1, #1
  401236:	4081      	lsls	r1, r0
  401238:	3260      	adds	r2, #96	; 0x60
  40123a:	480f      	ldr	r0, [pc, #60]	; (401278 <_pio_init+0xc4>)
  40123c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401240:	2b00      	cmp	r3, #0
  401242:	db0d      	blt.n	401260 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401244:	0959      	lsrs	r1, r3, #5
  401246:	f003 031f 	and.w	r3, r3, #31
  40124a:	2201      	movs	r2, #1
  40124c:	fa02 f303 	lsl.w	r3, r2, r3
  401250:	4a09      	ldr	r2, [pc, #36]	; (401278 <_pio_init+0xc4>)
  401252:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  401256:	2000      	movs	r0, #0
  401258:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  40125a:	f06f 0010 	mvn.w	r0, #16
  40125e:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401260:	2000      	movs	r0, #0
}
  401262:	bd38      	pop	{r3, r4, r5, pc}
  401264:	00405194 	.word	0x00405194
  401268:	00400d65 	.word	0x00400d65
  40126c:	00401169 	.word	0x00401169
  401270:	00405154 	.word	0x00405154
  401274:	00401141 	.word	0x00401141
  401278:	e000e100 	.word	0xe000e100

0040127c <PIOD_Handler>:
{
  40127c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40127e:	4b01      	ldr	r3, [pc, #4]	; (401284 <PIOD_Handler+0x8>)
  401280:	4798      	blx	r3
  401282:	bd08      	pop	{r3, pc}
  401284:	00401091 	.word	0x00401091

00401288 <PIOA_Handler>:
{
  401288:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40128a:	4b01      	ldr	r3, [pc, #4]	; (401290 <PIOA_Handler+0x8>)
  40128c:	4798      	blx	r3
  40128e:	bd08      	pop	{r3, pc}
  401290:	00401091 	.word	0x00401091

00401294 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401294:	b538      	push	{r3, r4, r5, lr}
  401296:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401298:	4804      	ldr	r0, [pc, #16]	; (4012ac <_ext_irq_init+0x18>)
  40129a:	4c05      	ldr	r4, [pc, #20]	; (4012b0 <_ext_irq_init+0x1c>)
  40129c:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  40129e:	4805      	ldr	r0, [pc, #20]	; (4012b4 <_ext_irq_init+0x20>)
  4012a0:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  4012a2:	4b05      	ldr	r3, [pc, #20]	; (4012b8 <_ext_irq_init+0x24>)
  4012a4:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  4012a6:	2000      	movs	r0, #0
  4012a8:	bd38      	pop	{r3, r4, r5, pc}
  4012aa:	bf00      	nop
  4012ac:	400e0e00 	.word	0x400e0e00
  4012b0:	004011b5 	.word	0x004011b5
  4012b4:	400e1400 	.word	0x400e1400
  4012b8:	20400288 	.word	0x20400288

004012bc <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  4012bc:	490e      	ldr	r1, [pc, #56]	; (4012f8 <_pmc_init_sources+0x3c>)
  4012be:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  4012c0:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  4012c4:	4b0d      	ldr	r3, [pc, #52]	; (4012fc <_pmc_init_sources+0x40>)
  4012c6:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  4012c8:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  4012ca:	4b0b      	ldr	r3, [pc, #44]	; (4012f8 <_pmc_init_sources+0x3c>)
  4012cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  4012ce:	f013 0f01 	tst.w	r3, #1
  4012d2:	d0fa      	beq.n	4012ca <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  4012d4:	4b08      	ldr	r3, [pc, #32]	; (4012f8 <_pmc_init_sources+0x3c>)
  4012d6:	6a19      	ldr	r1, [r3, #32]
  4012d8:	4a09      	ldr	r2, [pc, #36]	; (401300 <_pmc_init_sources+0x44>)
  4012da:	430a      	orrs	r2, r1
  4012dc:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4012de:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4012e0:	4a08      	ldr	r2, [pc, #32]	; (401304 <_pmc_init_sources+0x48>)
  4012e2:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4012e4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  4012e6:	4a08      	ldr	r2, [pc, #32]	; (401308 <_pmc_init_sources+0x4c>)
  4012e8:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4012ea:	4b03      	ldr	r3, [pc, #12]	; (4012f8 <_pmc_init_sources+0x3c>)
  4012ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4012ee:	f013 0f02 	tst.w	r3, #2
  4012f2:	d0fa      	beq.n	4012ea <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4012f4:	4770      	bx	lr
  4012f6:	bf00      	nop
  4012f8:	400e0600 	.word	0x400e0600
  4012fc:	00373e01 	.word	0x00373e01
  401300:	01370000 	.word	0x01370000
  401304:	f800ffff 	.word	0xf800ffff
  401308:	20183f01 	.word	0x20183f01

0040130c <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40130c:	4a11      	ldr	r2, [pc, #68]	; (401354 <_pmc_init_master_clock+0x48>)
  40130e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  401314:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401316:	4b0f      	ldr	r3, [pc, #60]	; (401354 <_pmc_init_master_clock+0x48>)
  401318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40131a:	f013 0f08 	tst.w	r3, #8
  40131e:	d0fa      	beq.n	401316 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401320:	4a0c      	ldr	r2, [pc, #48]	; (401354 <_pmc_init_master_clock+0x48>)
  401322:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  401324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  40132c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40132e:	4b09      	ldr	r3, [pc, #36]	; (401354 <_pmc_init_master_clock+0x48>)
  401330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401332:	f013 0f08 	tst.w	r3, #8
  401336:	d0fa      	beq.n	40132e <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401338:	4a06      	ldr	r2, [pc, #24]	; (401354 <_pmc_init_master_clock+0x48>)
  40133a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  40133c:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401340:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401344:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401346:	4b03      	ldr	r3, [pc, #12]	; (401354 <_pmc_init_master_clock+0x48>)
  401348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40134a:	f013 0f08 	tst.w	r3, #8
  40134e:	d0fa      	beq.n	401346 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401350:	4770      	bx	lr
  401352:	bf00      	nop
  401354:	400e0600 	.word	0x400e0600

00401358 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401358:	b508      	push	{r3, lr}
	_pmc_init_sources();
  40135a:	4b02      	ldr	r3, [pc, #8]	; (401364 <_pmc_init+0xc>)
  40135c:	4798      	blx	r3
	_pmc_init_master_clock();
  40135e:	4b02      	ldr	r3, [pc, #8]	; (401368 <_pmc_init+0x10>)
  401360:	4798      	blx	r3
  401362:	bd08      	pop	{r3, pc}
  401364:	004012bd 	.word	0x004012bd
  401368:	0040130d 	.word	0x0040130d

0040136c <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  40136c:	2300      	movs	r3, #0
  40136e:	2b01      	cmp	r3, #1
  401370:	d80f      	bhi.n	401392 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  401372:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  401376:	008a      	lsls	r2, r1, #2
  401378:	4907      	ldr	r1, [pc, #28]	; (401398 <_pwm_get_cfg+0x2c>)
  40137a:	588a      	ldr	r2, [r1, r2]
  40137c:	4282      	cmp	r2, r0
  40137e:	d002      	beq.n	401386 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401380:	3301      	adds	r3, #1
  401382:	b2db      	uxtb	r3, r3
  401384:	e7f3      	b.n	40136e <_pwm_get_cfg+0x2>
			return (_pwms + i);
  401386:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40138a:	009a      	lsls	r2, r3, #2
  40138c:	4608      	mov	r0, r1
  40138e:	4410      	add	r0, r2
  401390:	4770      	bx	lr
		}
	}

	return NULL;
  401392:	2000      	movs	r0, #0
}
  401394:	4770      	bx	lr
  401396:	bf00      	nop
  401398:	004051b0 	.word	0x004051b0

0040139c <_pwm_init>:
		_pwm1_dev = dev;
	}
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  40139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40139e:	4605      	mov	r5, r0
	
	ASSERT(hw);
  4013a0:	460c      	mov	r4, r1
  4013a2:	1c08      	adds	r0, r1, #0
  4013a4:	bf18      	it	ne
  4013a6:	2001      	movne	r0, #1
  4013a8:	f240 1261 	movw	r2, #353	; 0x161
  4013ac:	4948      	ldr	r1, [pc, #288]	; (4014d0 <_pwm_init+0x134>)
  4013ae:	4b49      	ldr	r3, [pc, #292]	; (4014d4 <_pwm_init+0x138>)
  4013b0:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  4013b2:	4620      	mov	r0, r4
  4013b4:	4b48      	ldr	r3, [pc, #288]	; (4014d8 <_pwm_init+0x13c>)
  4013b6:	4798      	blx	r3

	device->hw = hw;
  4013b8:	612c      	str	r4, [r5, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  4013ba:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  4013bc:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  4013be:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  4013c0:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  4013c2:	6903      	ldr	r3, [r0, #16]
  4013c4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  4013c8:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  4013ca:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  4013cc:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  4013ce:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  4013d0:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  4013d2:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  4013d6:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  4013d8:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  4013da:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  4013dc:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  4013e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  4013e2:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
	

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  4013e6:	2100      	movs	r1, #0
  4013e8:	e029      	b.n	40143e <_pwm_init+0xa2>
		ch = cfg->ch + i;
  4013ea:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4013ec:	010b      	lsls	r3, r1, #4
  4013ee:	18d7      	adds	r7, r2, r3
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode | PWM_CMR_DTE);					//enable dead time
  4013f0:	5cd5      	ldrb	r5, [r2, r3]
  4013f2:	687e      	ldr	r6, [r7, #4]
  4013f4:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  4013f8:	3510      	adds	r5, #16
  4013fa:	016d      	lsls	r5, r5, #5
  4013fc:	5166      	str	r6, [r4, r5]
		//hri_pwmchnum_set_CMR_DTE_bit((void *) &((Pwm *)hw)->PwmChNum[ch->index]);		//another less elegant way of enabling dead time
		hri_pwm_set_DT_DTH_bf(hw, ch->index, 10);										//set high side deadtime in PWM clock counts
  4013fe:	5cd5      	ldrb	r5, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  401400:	eb04 1545 	add.w	r5, r4, r5, lsl #5
  401404:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  401408:	f046 060a 	orr.w	r6, r6, #10
  40140c:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
		hri_pwm_set_DT_DTL_bf(hw, ch->index, 10);										//set high side deadtime in PWM clock counts
  401410:	5cd5      	ldrb	r5, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  401412:	eb04 1545 	add.w	r5, r4, r5, lsl #5
  401416:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  40141a:	f446 2620 	orr.w	r6, r6, #655360	; 0xa0000
  40141e:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  401422:	5cd5      	ldrb	r5, [r2, r3]
  401424:	68fe      	ldr	r6, [r7, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  401426:	3510      	adds	r5, #16
  401428:	eb04 1545 	add.w	r5, r4, r5, lsl #5
  40142c:	606e      	str	r6, [r5, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  40142e:	5cd3      	ldrb	r3, [r2, r3]
  401430:	68ba      	ldr	r2, [r7, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  401432:	eb04 1343 	add.w	r3, r4, r3, lsl #5
  401436:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  40143a:	3101      	adds	r1, #1
  40143c:	b249      	sxtb	r1, r1
  40143e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  401440:	4299      	cmp	r1, r3
  401442:	d3d2      	bcc.n	4013ea <_pwm_init+0x4e>
  401444:	2300      	movs	r3, #0
  401446:	e011      	b.n	40146c <_pwm_init+0xd0>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  401448:	6b81      	ldr	r1, [r0, #56]	; 0x38
  40144a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
  40144e:	00aa      	lsls	r2, r5, #2
  401450:	188f      	adds	r7, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  401452:	5c8d      	ldrb	r5, [r1, r2]
  401454:	687e      	ldr	r6, [r7, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  401456:	eb04 1505 	add.w	r5, r4, r5, lsl #4
  40145a:	f8c5 6138 	str.w	r6, [r5, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  40145e:	5c8a      	ldrb	r2, [r1, r2]
  401460:	68b9      	ldr	r1, [r7, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  401462:	3213      	adds	r2, #19
  401464:	0112      	lsls	r2, r2, #4
  401466:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  401468:	3301      	adds	r3, #1
  40146a:	b25b      	sxtb	r3, r3
  40146c:	6b42      	ldr	r2, [r0, #52]	; 0x34
  40146e:	4293      	cmp	r3, r2
  401470:	d3ea      	bcc.n	401448 <_pwm_init+0xac>
	}
	//hri_pwm_set_IMR1_CHID1_bit

	_pwm_init_irq_param(hw, device);
	NVIC_DisableIRQ(cfg->irq);
  401472:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  401476:	2b00      	cmp	r3, #0
  401478:	db0d      	blt.n	401496 <_pwm_init+0xfa>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40147a:	095a      	lsrs	r2, r3, #5
  40147c:	f003 031f 	and.w	r3, r3, #31
  401480:	2101      	movs	r1, #1
  401482:	fa01 f303 	lsl.w	r3, r1, r3
  401486:	3220      	adds	r2, #32
  401488:	4914      	ldr	r1, [pc, #80]	; (4014dc <_pwm_init+0x140>)
  40148a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40148e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401492:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  401496:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  40149a:	2b00      	cmp	r3, #0
  40149c:	db09      	blt.n	4014b2 <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40149e:	095a      	lsrs	r2, r3, #5
  4014a0:	f003 031f 	and.w	r3, r3, #31
  4014a4:	2101      	movs	r1, #1
  4014a6:	fa01 f303 	lsl.w	r3, r1, r3
  4014aa:	3260      	adds	r2, #96	; 0x60
  4014ac:	490b      	ldr	r1, [pc, #44]	; (4014dc <_pwm_init+0x140>)
  4014ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  4014b2:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  4014b6:	2b00      	cmp	r3, #0
  4014b8:	db08      	blt.n	4014cc <_pwm_init+0x130>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4014ba:	0959      	lsrs	r1, r3, #5
  4014bc:	f003 031f 	and.w	r3, r3, #31
  4014c0:	2201      	movs	r2, #1
  4014c2:	fa02 f303 	lsl.w	r3, r2, r3
  4014c6:	4a05      	ldr	r2, [pc, #20]	; (4014dc <_pwm_init+0x140>)
  4014c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  4014cc:	2000      	movs	r0, #0
  4014ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4014d0:	00405258 	.word	0x00405258
  4014d4:	00400d65 	.word	0x00400d65
  4014d8:	0040136d 	.word	0x0040136d
  4014dc:	e000e100 	.word	0xe000e100

004014e0 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  4014e0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  4014e2:	4604      	mov	r4, r0
  4014e4:	f240 129d 	movw	r2, #413	; 0x19d
  4014e8:	490b      	ldr	r1, [pc, #44]	; (401518 <_pwm_enable+0x38>)
  4014ea:	3000      	adds	r0, #0
  4014ec:	bf18      	it	ne
  4014ee:	2001      	movne	r0, #1
  4014f0:	4b0a      	ldr	r3, [pc, #40]	; (40151c <_pwm_enable+0x3c>)
  4014f2:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  4014f4:	6920      	ldr	r0, [r4, #16]
  4014f6:	4b0a      	ldr	r3, [pc, #40]	; (401520 <_pwm_enable+0x40>)
  4014f8:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4014fa:	2300      	movs	r3, #0
  4014fc:	e008      	b.n	401510 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  4014fe:	6921      	ldr	r1, [r4, #16]
  401500:	6b05      	ldr	r5, [r0, #48]	; 0x30
  401502:	011a      	lsls	r2, r3, #4
  401504:	5cad      	ldrb	r5, [r5, r2]
  401506:	2201      	movs	r2, #1
  401508:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  40150a:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  40150c:	3301      	adds	r3, #1
  40150e:	b25b      	sxtb	r3, r3
  401510:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401512:	4293      	cmp	r3, r2
  401514:	d3f3      	bcc.n	4014fe <_pwm_enable+0x1e>
	}
}
  401516:	bd38      	pop	{r3, r4, r5, pc}
  401518:	00405258 	.word	0x00405258
  40151c:	00400d65 	.word	0x00400d65
  401520:	0040136d 	.word	0x0040136d

00401524 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  401524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401526:	460d      	mov	r5, r1
  401528:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  40152a:	4604      	mov	r4, r0
  40152c:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  401530:	4911      	ldr	r1, [pc, #68]	; (401578 <_pwm_set_param+0x54>)
  401532:	2800      	cmp	r0, #0
  401534:	bf18      	it	ne
  401536:	42ae      	cmpne	r6, r5
  401538:	bf34      	ite	cc
  40153a:	2001      	movcc	r0, #1
  40153c:	2000      	movcs	r0, #0
  40153e:	4b0f      	ldr	r3, [pc, #60]	; (40157c <_pwm_set_param+0x58>)
  401540:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  401542:	6920      	ldr	r0, [r4, #16]
  401544:	4b0e      	ldr	r3, [pc, #56]	; (401580 <_pwm_set_param+0x5c>)
  401546:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401548:	2300      	movs	r3, #0
  40154a:	e010      	b.n	40156e <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  40154c:	6922      	ldr	r2, [r4, #16]
  40154e:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401550:	0119      	lsls	r1, r3, #4
  401552:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  401554:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  401558:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  40155c:	6922      	ldr	r2, [r4, #16]
  40155e:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401560:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  401562:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  401566:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  40156a:	3301      	adds	r3, #1
  40156c:	b2db      	uxtb	r3, r3
  40156e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401570:	4293      	cmp	r3, r2
  401572:	d3eb      	bcc.n	40154c <_pwm_set_param+0x28>
	}
}
  401574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401576:	bf00      	nop
  401578:	00405258 	.word	0x00405258
  40157c:	00400d65 	.word	0x00400d65
  401580:	0040136d 	.word	0x0040136d

00401584 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  401584:	b510      	push	{r4, lr}
	ASSERT(device);
  401586:	4604      	mov	r4, r0
  401588:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
  40158c:	4907      	ldr	r1, [pc, #28]	; (4015ac <_pwm_is_enabled+0x28>)
  40158e:	3000      	adds	r0, #0
  401590:	bf18      	it	ne
  401592:	2001      	movne	r0, #1
  401594:	4b06      	ldr	r3, [pc, #24]	; (4015b0 <_pwm_is_enabled+0x2c>)
  401596:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  401598:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  40159a:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  40159c:	f013 0f0f 	tst.w	r3, #15
  4015a0:	d001      	beq.n	4015a6 <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  4015a2:	2001      	movs	r0, #1
	}
}
  4015a4:	bd10      	pop	{r4, pc}
		return false;
  4015a6:	2000      	movs	r0, #0
  4015a8:	bd10      	pop	{r4, pc}
  4015aa:	bf00      	nop
  4015ac:	00405258 	.word	0x00405258
  4015b0:	00400d65 	.word	0x00400d65

004015b4 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  4015b4:	2000      	movs	r0, #0
  4015b6:	4770      	bx	lr

004015b8 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  4015b8:	4b03      	ldr	r3, [pc, #12]	; (4015c8 <_system_time_init+0x10>)
  4015ba:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4015be:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  4015c0:	2205      	movs	r2, #5
  4015c2:	601a      	str	r2, [r3, #0]
  4015c4:	4770      	bx	lr
  4015c6:	bf00      	nop
  4015c8:	e000e010 	.word	0xe000e010

004015cc <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  4015cc:	b508      	push	{r3, lr}
	_system_time_init(hw);
  4015ce:	4b01      	ldr	r3, [pc, #4]	; (4015d4 <_delay_init+0x8>)
  4015d0:	4798      	blx	r3
  4015d2:	bd08      	pop	{r3, pc}
  4015d4:	004015b9 	.word	0x004015b9

004015d8 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  4015d8:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  4015da:	e00d      	b.n	4015f8 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  4015dc:	4b0d      	ldr	r3, [pc, #52]	; (401614 <_delay_cycles+0x3c>)
  4015de:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  4015e2:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  4015e4:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4015e6:	4b0b      	ldr	r3, [pc, #44]	; (401614 <_delay_cycles+0x3c>)
  4015e8:	681b      	ldr	r3, [r3, #0]
  4015ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4015ee:	d0fa      	beq.n	4015e6 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  4015f0:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4015f4:	3101      	adds	r1, #1
	while (n--) {
  4015f6:	4610      	mov	r0, r2
  4015f8:	1e43      	subs	r3, r0, #1
  4015fa:	b2da      	uxtb	r2, r3
  4015fc:	2800      	cmp	r0, #0
  4015fe:	d1ed      	bne.n	4015dc <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  401600:	4b04      	ldr	r3, [pc, #16]	; (401614 <_delay_cycles+0x3c>)
  401602:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  401604:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401606:	4b03      	ldr	r3, [pc, #12]	; (401614 <_delay_cycles+0x3c>)
  401608:	681b      	ldr	r3, [r3, #0]
  40160a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40160e:	d0fa      	beq.n	401606 <_delay_cycles+0x2e>
		;
}
  401610:	4770      	bx	lr
  401612:	bf00      	nop
  401614:	e000e010 	.word	0xe000e010

00401618 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401618:	2300      	movs	r3, #0
  40161a:	2b01      	cmp	r3, #1
  40161c:	d815      	bhi.n	40164a <get_cfg+0x32>
{
  40161e:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401620:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401624:	008a      	lsls	r2, r1, #2
  401626:	490a      	ldr	r1, [pc, #40]	; (401650 <get_cfg+0x38>)
  401628:	588a      	ldr	r2, [r1, r2]
  40162a:	4282      	cmp	r2, r0
  40162c:	d007      	beq.n	40163e <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  40162e:	3301      	adds	r3, #1
  401630:	b2db      	uxtb	r3, r3
  401632:	2b01      	cmp	r3, #1
  401634:	d9f4      	bls.n	401620 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  401636:	2000      	movs	r0, #0
}
  401638:	f85d 4b04 	ldr.w	r4, [sp], #4
  40163c:	4770      	bx	lr
			return &(_tcs[i]);
  40163e:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401642:	00a3      	lsls	r3, r4, #2
  401644:	4608      	mov	r0, r1
  401646:	4418      	add	r0, r3
  401648:	e7f6      	b.n	401638 <get_cfg+0x20>
	return NULL;
  40164a:	2000      	movs	r0, #0
  40164c:	4770      	bx	lr
  40164e:	bf00      	nop
  401650:	20400000 	.word	0x20400000

00401654 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  401654:	4b06      	ldr	r3, [pc, #24]	; (401670 <_tc_init_irq_param+0x1c>)
  401656:	4298      	cmp	r0, r3
  401658:	d003      	beq.n	401662 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  40165a:	4b06      	ldr	r3, [pc, #24]	; (401674 <_tc_init_irq_param+0x20>)
  40165c:	4298      	cmp	r0, r3
  40165e:	d003      	beq.n	401668 <_tc_init_irq_param+0x14>
  401660:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  401662:	4b05      	ldr	r3, [pc, #20]	; (401678 <_tc_init_irq_param+0x24>)
  401664:	6019      	str	r1, [r3, #0]
  401666:	e7f8      	b.n	40165a <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  401668:	4b03      	ldr	r3, [pc, #12]	; (401678 <_tc_init_irq_param+0x24>)
  40166a:	6059      	str	r1, [r3, #4]
	}
}
  40166c:	e7f8      	b.n	401660 <_tc_init_irq_param+0xc>
  40166e:	bf00      	nop
  401670:	4000c000 	.word	0x4000c000
  401674:	40054000 	.word	0x40054000
  401678:	204002a4 	.word	0x204002a4

0040167c <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  40167c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  40167e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  401680:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  401682:	f013 0f10 	tst.w	r3, #16
  401686:	d100      	bne.n	40168a <tc_interrupt_handler+0xe>
  401688:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  40168a:	6803      	ldr	r3, [r0, #0]
  40168c:	4798      	blx	r3
	}
}
  40168e:	e7fb      	b.n	401688 <tc_interrupt_handler+0xc>

00401690 <_timer_init>:
{
  401690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401694:	4606      	mov	r6, r0
  401696:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  401698:	4608      	mov	r0, r1
  40169a:	4b2f      	ldr	r3, [pc, #188]	; (401758 <_timer_init+0xc8>)
  40169c:	4798      	blx	r3
  40169e:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  4016a0:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  4016a4:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  4016a8:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  4016aa:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  4016ae:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  4016b0:	22c3      	movs	r2, #195	; 0xc3
  4016b2:	492a      	ldr	r1, [pc, #168]	; (40175c <_timer_init+0xcc>)
  4016b4:	2001      	movs	r0, #1
  4016b6:	4b2a      	ldr	r3, [pc, #168]	; (401760 <_timer_init+0xd0>)
  4016b8:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  4016ba:	f248 0307 	movw	r3, #32775	; 0x8007
  4016be:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4016c0:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4016c4:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4016c8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4016cc:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4016ce:	2300      	movs	r3, #0
  4016d0:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  4016d2:	f248 020f 	movw	r2, #32783	; 0x800f
  4016d6:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4016d8:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4016dc:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4016e0:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4016e4:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4016e6:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  4016e8:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  4016ea:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  4016ee:	4631      	mov	r1, r6
  4016f0:	4620      	mov	r0, r4
  4016f2:	4b1c      	ldr	r3, [pc, #112]	; (401764 <_timer_init+0xd4>)
  4016f4:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  4016f6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4016fa:	2b00      	cmp	r3, #0
  4016fc:	db0d      	blt.n	40171a <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4016fe:	095a      	lsrs	r2, r3, #5
  401700:	f003 031f 	and.w	r3, r3, #31
  401704:	2101      	movs	r1, #1
  401706:	fa01 f303 	lsl.w	r3, r1, r3
  40170a:	3220      	adds	r2, #32
  40170c:	4916      	ldr	r1, [pc, #88]	; (401768 <_timer_init+0xd8>)
  40170e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401712:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401716:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  40171a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40171e:	2b00      	cmp	r3, #0
  401720:	db09      	blt.n	401736 <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401722:	095a      	lsrs	r2, r3, #5
  401724:	f003 031f 	and.w	r3, r3, #31
  401728:	2101      	movs	r1, #1
  40172a:	fa01 f303 	lsl.w	r3, r1, r3
  40172e:	3260      	adds	r2, #96	; 0x60
  401730:	490d      	ldr	r1, [pc, #52]	; (401768 <_timer_init+0xd8>)
  401732:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  401736:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40173a:	2b00      	cmp	r3, #0
  40173c:	db08      	blt.n	401750 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40173e:	0959      	lsrs	r1, r3, #5
  401740:	f003 031f 	and.w	r3, r3, #31
  401744:	2201      	movs	r2, #1
  401746:	fa02 f303 	lsl.w	r3, r2, r3
  40174a:	4a07      	ldr	r2, [pc, #28]	; (401768 <_timer_init+0xd8>)
  40174c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  401750:	2000      	movs	r0, #0
  401752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401756:	bf00      	nop
  401758:	00401619 	.word	0x00401619
  40175c:	00405270 	.word	0x00405270
  401760:	00400d65 	.word	0x00400d65
  401764:	00401655 	.word	0x00401655
  401768:	e000e100 	.word	0xe000e100

0040176c <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  40176c:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  40176e:	2305      	movs	r3, #5
  401770:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  401772:	68c2      	ldr	r2, [r0, #12]
  401774:	6413      	str	r3, [r2, #64]	; 0x40
  401776:	4770      	bx	lr

00401778 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  401778:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  40177a:	6a13      	ldr	r3, [r2, #32]
  40177c:	f3c3 4300 	ubfx	r3, r3, #16, #1
  401780:	6e10      	ldr	r0, [r2, #96]	; 0x60
  401782:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  401786:	4318      	orrs	r0, r3
  401788:	4770      	bx	lr

0040178a <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  40178a:	2000      	movs	r0, #0
  40178c:	4770      	bx	lr
	...

00401790 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  401790:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  401792:	4b02      	ldr	r3, [pc, #8]	; (40179c <TC0_Handler+0xc>)
  401794:	6818      	ldr	r0, [r3, #0]
  401796:	4b02      	ldr	r3, [pc, #8]	; (4017a0 <TC0_Handler+0x10>)
  401798:	4798      	blx	r3
  40179a:	bd08      	pop	{r3, pc}
  40179c:	204002a4 	.word	0x204002a4
  4017a0:	0040167d 	.word	0x0040167d

004017a4 <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  4017a4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  4017a6:	4b02      	ldr	r3, [pc, #8]	; (4017b0 <TC9_Handler+0xc>)
  4017a8:	6858      	ldr	r0, [r3, #4]
  4017aa:	4b02      	ldr	r3, [pc, #8]	; (4017b4 <TC9_Handler+0x10>)
  4017ac:	4798      	blx	r3
  4017ae:	bd08      	pop	{r3, pc}
  4017b0:	204002a4 	.word	0x204002a4
  4017b4:	0040167d 	.word	0x0040167d

004017b8 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  4017b8:	b510      	push	{r4, lr}
	ASSERT(hw);
  4017ba:	4604      	mov	r4, r0
  4017bc:	f240 222b 	movw	r2, #555	; 0x22b
  4017c0:	4905      	ldr	r1, [pc, #20]	; (4017d8 <_usart_get_hardware_index+0x20>)
  4017c2:	3000      	adds	r0, #0
  4017c4:	bf18      	it	ne
  4017c6:	2001      	movne	r0, #1
  4017c8:	4b04      	ldr	r3, [pc, #16]	; (4017dc <_usart_get_hardware_index+0x24>)
  4017ca:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  4017cc:	4804      	ldr	r0, [pc, #16]	; (4017e0 <_usart_get_hardware_index+0x28>)
  4017ce:	4420      	add	r0, r4
}
  4017d0:	f3c0 3087 	ubfx	r0, r0, #14, #8
  4017d4:	bd10      	pop	{r4, pc}
  4017d6:	bf00      	nop
  4017d8:	00405290 	.word	0x00405290
  4017dc:	00400d65 	.word	0x00400d65
  4017e0:	bffdc000 	.word	0xbffdc000

004017e4 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  4017e4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4017e6:	4604      	mov	r4, r0
  4017e8:	f240 2287 	movw	r2, #647	; 0x287
  4017ec:	490e      	ldr	r1, [pc, #56]	; (401828 <_get_usart_index+0x44>)
  4017ee:	3000      	adds	r0, #0
  4017f0:	bf18      	it	ne
  4017f2:	2001      	movne	r0, #1
  4017f4:	4b0d      	ldr	r3, [pc, #52]	; (40182c <_get_usart_index+0x48>)
  4017f6:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  4017f8:	4620      	mov	r0, r4
  4017fa:	4b0d      	ldr	r3, [pc, #52]	; (401830 <_get_usart_index+0x4c>)
  4017fc:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4017fe:	2300      	movs	r3, #0
  401800:	b143      	cbz	r3, 401814 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  401802:	f240 2291 	movw	r2, #657	; 0x291
  401806:	4908      	ldr	r1, [pc, #32]	; (401828 <_get_usart_index+0x44>)
  401808:	2000      	movs	r0, #0
  40180a:	4b08      	ldr	r3, [pc, #32]	; (40182c <_get_usart_index+0x48>)
  40180c:	4798      	blx	r3
	return 0;
  40180e:	2300      	movs	r3, #0
}
  401810:	4618      	mov	r0, r3
  401812:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  401814:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401818:	008a      	lsls	r2, r1, #2
  40181a:	4906      	ldr	r1, [pc, #24]	; (401834 <_get_usart_index+0x50>)
  40181c:	5c8a      	ldrb	r2, [r1, r2]
  40181e:	4290      	cmp	r0, r2
  401820:	d0f6      	beq.n	401810 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401822:	3301      	adds	r3, #1
  401824:	b2db      	uxtb	r3, r3
  401826:	e7eb      	b.n	401800 <_get_usart_index+0x1c>
  401828:	00405290 	.word	0x00405290
  40182c:	00400d65 	.word	0x00400d65
  401830:	004017b9 	.word	0x004017b9
  401834:	00405284 	.word	0x00405284

00401838 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  401838:	b510      	push	{r4, lr}
	ASSERT(hw);
  40183a:	4604      	mov	r4, r0
  40183c:	f240 229e 	movw	r2, #670	; 0x29e
  401840:	4911      	ldr	r1, [pc, #68]	; (401888 <_usart_init+0x50>)
  401842:	3000      	adds	r0, #0
  401844:	bf18      	it	ne
  401846:	2001      	movne	r0, #1
  401848:	4b10      	ldr	r3, [pc, #64]	; (40188c <_usart_init+0x54>)
  40184a:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  40184c:	4620      	mov	r0, r4
  40184e:	4b10      	ldr	r3, [pc, #64]	; (401890 <_usart_init+0x58>)
  401850:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  401852:	4b10      	ldr	r3, [pc, #64]	; (401894 <_usart_init+0x5c>)
  401854:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  401858:	2300      	movs	r3, #0
  40185a:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  40185c:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  40185e:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  401860:	22ac      	movs	r2, #172	; 0xac
  401862:	6022      	str	r2, [r4, #0]
  401864:	f44f 7280 	mov.w	r2, #256	; 0x100
  401868:	6022      	str	r2, [r4, #0]
  40186a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40186e:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  401870:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401874:	0081      	lsls	r1, r0, #2
  401876:	4a08      	ldr	r2, [pc, #32]	; (401898 <_usart_init+0x60>)
  401878:	440a      	add	r2, r1
  40187a:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  40187c:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  40187e:	4a07      	ldr	r2, [pc, #28]	; (40189c <_usart_init+0x64>)
  401880:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  401882:	4618      	mov	r0, r3
  401884:	bd10      	pop	{r4, pc}
  401886:	bf00      	nop
  401888:	00405290 	.word	0x00405290
  40188c:	00400d65 	.word	0x00400d65
  401890:	004017e5 	.word	0x004017e5
  401894:	55534100 	.word	0x55534100
  401898:	00405284 	.word	0x00405284
  40189c:	000100f4 	.word	0x000100f4

004018a0 <_usart_sync_init>:
{
  4018a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4018a2:	460c      	mov	r4, r1
	ASSERT(device);
  4018a4:	4e09      	ldr	r6, [pc, #36]	; (4018cc <_usart_sync_init+0x2c>)
  4018a6:	4607      	mov	r7, r0
  4018a8:	22bd      	movs	r2, #189	; 0xbd
  4018aa:	4631      	mov	r1, r6
  4018ac:	3000      	adds	r0, #0
  4018ae:	bf18      	it	ne
  4018b0:	2001      	movne	r0, #1
  4018b2:	4d07      	ldr	r5, [pc, #28]	; (4018d0 <_usart_sync_init+0x30>)
  4018b4:	47a8      	blx	r5
	ASSERT(hw);
  4018b6:	22be      	movs	r2, #190	; 0xbe
  4018b8:	4631      	mov	r1, r6
  4018ba:	1c20      	adds	r0, r4, #0
  4018bc:	bf18      	it	ne
  4018be:	2001      	movne	r0, #1
  4018c0:	47a8      	blx	r5
	device->hw = hw;
  4018c2:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  4018c4:	4620      	mov	r0, r4
  4018c6:	4b03      	ldr	r3, [pc, #12]	; (4018d4 <_usart_sync_init+0x34>)
  4018c8:	4798      	blx	r3
}
  4018ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4018cc:	00405290 	.word	0x00405290
  4018d0:	00400d65 	.word	0x00400d65
  4018d4:	00401839 	.word	0x00401839

004018d8 <_usart_sync_enable>:
{
  4018d8:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4018da:	4e0a      	ldr	r6, [pc, #40]	; (401904 <_usart_sync_enable+0x2c>)
  4018dc:	4604      	mov	r4, r0
  4018de:	f240 1205 	movw	r2, #261	; 0x105
  4018e2:	4631      	mov	r1, r6
  4018e4:	3000      	adds	r0, #0
  4018e6:	bf18      	it	ne
  4018e8:	2001      	movne	r0, #1
  4018ea:	4d07      	ldr	r5, [pc, #28]	; (401908 <_usart_sync_enable+0x30>)
  4018ec:	47a8      	blx	r5
	_usart_enable(device->hw);
  4018ee:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4018f0:	f240 22c7 	movw	r2, #711	; 0x2c7
  4018f4:	4631      	mov	r1, r6
  4018f6:	1c20      	adds	r0, r4, #0
  4018f8:	bf18      	it	ne
  4018fa:	2001      	movne	r0, #1
  4018fc:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  4018fe:	2350      	movs	r3, #80	; 0x50
  401900:	6023      	str	r3, [r4, #0]
  401902:	bd70      	pop	{r4, r5, r6, pc}
  401904:	00405290 	.word	0x00405290
  401908:	00400d65 	.word	0x00400d65

0040190c <_usart_sync_write_byte>:
{
  40190c:	b538      	push	{r3, r4, r5, lr}
  40190e:	460c      	mov	r4, r1
	ASSERT(device);
  401910:	4605      	mov	r5, r0
  401912:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  401916:	4904      	ldr	r1, [pc, #16]	; (401928 <_usart_sync_write_byte+0x1c>)
  401918:	3000      	adds	r0, #0
  40191a:	bf18      	it	ne
  40191c:	2001      	movne	r0, #1
  40191e:	4b03      	ldr	r3, [pc, #12]	; (40192c <_usart_sync_write_byte+0x20>)
  401920:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  401922:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  401924:	61dc      	str	r4, [r3, #28]
  401926:	bd38      	pop	{r3, r4, r5, pc}
  401928:	00405290 	.word	0x00405290
  40192c:	00400d65 	.word	0x00400d65

00401930 <_usart_sync_read_byte>:
{
  401930:	b510      	push	{r4, lr}
	ASSERT(device);
  401932:	4604      	mov	r4, r0
  401934:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  401938:	4904      	ldr	r1, [pc, #16]	; (40194c <_usart_sync_read_byte+0x1c>)
  40193a:	3000      	adds	r0, #0
  40193c:	bf18      	it	ne
  40193e:	2001      	movne	r0, #1
  401940:	4b03      	ldr	r3, [pc, #12]	; (401950 <_usart_sync_read_byte+0x20>)
  401942:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  401944:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  401946:	6998      	ldr	r0, [r3, #24]
}
  401948:	b2c0      	uxtb	r0, r0
  40194a:	bd10      	pop	{r4, pc}
  40194c:	00405290 	.word	0x00405290
  401950:	00400d65 	.word	0x00400d65

00401954 <_usart_sync_is_ready_to_send>:
{
  401954:	b510      	push	{r4, lr}
	ASSERT(device);
  401956:	4604      	mov	r4, r0
  401958:	f240 12c3 	movw	r2, #451	; 0x1c3
  40195c:	4905      	ldr	r1, [pc, #20]	; (401974 <_usart_sync_is_ready_to_send+0x20>)
  40195e:	3000      	adds	r0, #0
  401960:	bf18      	it	ne
  401962:	2001      	movne	r0, #1
  401964:	4b04      	ldr	r3, [pc, #16]	; (401978 <_usart_sync_is_ready_to_send+0x24>)
  401966:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  401968:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  40196a:	6958      	ldr	r0, [r3, #20]
}
  40196c:	f3c0 0040 	ubfx	r0, r0, #1, #1
  401970:	bd10      	pop	{r4, pc}
  401972:	bf00      	nop
  401974:	00405290 	.word	0x00405290
  401978:	00400d65 	.word	0x00400d65

0040197c <_usart_sync_is_transmit_done>:
{
  40197c:	b510      	push	{r4, lr}
	ASSERT(device);
  40197e:	4604      	mov	r4, r0
  401980:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  401984:	4905      	ldr	r1, [pc, #20]	; (40199c <_usart_sync_is_transmit_done+0x20>)
  401986:	3000      	adds	r0, #0
  401988:	bf18      	it	ne
  40198a:	2001      	movne	r0, #1
  40198c:	4b04      	ldr	r3, [pc, #16]	; (4019a0 <_usart_sync_is_transmit_done+0x24>)
  40198e:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  401990:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  401992:	6958      	ldr	r0, [r3, #20]
}
  401994:	f3c0 2040 	ubfx	r0, r0, #9, #1
  401998:	bd10      	pop	{r4, pc}
  40199a:	bf00      	nop
  40199c:	00405290 	.word	0x00405290
  4019a0:	00400d65 	.word	0x00400d65

004019a4 <_usart_sync_is_byte_received>:
{
  4019a4:	b510      	push	{r4, lr}
	ASSERT(device);
  4019a6:	4604      	mov	r4, r0
  4019a8:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4019ac:	4905      	ldr	r1, [pc, #20]	; (4019c4 <_usart_sync_is_byte_received+0x20>)
  4019ae:	3000      	adds	r0, #0
  4019b0:	bf18      	it	ne
  4019b2:	2001      	movne	r0, #1
  4019b4:	4b04      	ldr	r3, [pc, #16]	; (4019c8 <_usart_sync_is_byte_received+0x24>)
  4019b6:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  4019b8:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  4019ba:	6958      	ldr	r0, [r3, #20]
  4019bc:	f000 0001 	and.w	r0, r0, #1
}
  4019c0:	bd10      	pop	{r4, pc}
  4019c2:	bf00      	nop
  4019c4:	00405290 	.word	0x00405290
  4019c8:	00400d65 	.word	0x00400d65

004019cc <_usart_get_usart_sync>:
}
  4019cc:	2000      	movs	r0, #0
  4019ce:	4770      	bx	lr

004019d0 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  4019d0:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4019d2:	2300      	movs	r3, #0
  4019d4:	e004      	b.n	4019e0 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  4019d6:	0199      	lsls	r1, r3, #6
  4019d8:	4a16      	ldr	r2, [pc, #88]	; (401a34 <_dma_init+0x64>)
  4019da:	5852      	ldr	r2, [r2, r1]
  4019dc:	3301      	adds	r3, #1
  4019de:	b2db      	uxtb	r3, r3
  4019e0:	2b17      	cmp	r3, #23
  4019e2:	d9f8      	bls.n	4019d6 <_dma_init+0x6>
  4019e4:	2300      	movs	r3, #0
  4019e6:	e014      	b.n	401a12 <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  4019e8:	4c13      	ldr	r4, [pc, #76]	; (401a38 <_dma_init+0x68>)
  4019ea:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  4019ee:	2100      	movs	r1, #0
  4019f0:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  4019f2:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  4019f4:	1c98      	adds	r0, r3, #2
  4019f6:	0180      	lsls	r0, r0, #6
  4019f8:	1825      	adds	r5, r4, r0
  4019fa:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  4019fc:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  4019fe:	490f      	ldr	r1, [pc, #60]	; (401a3c <_dma_init+0x6c>)
  401a00:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  401a04:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  401a06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  401a0a:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  401a0c:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  401a0e:	3301      	adds	r3, #1
  401a10:	b2db      	uxtb	r3, r3
  401a12:	2b17      	cmp	r3, #23
  401a14:	d9e8      	bls.n	4019e8 <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a16:	4b0a      	ldr	r3, [pc, #40]	; (401a40 <_dma_init+0x70>)
  401a18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  401a20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401a24:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a28:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a2c:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  401a2e:	2000      	movs	r0, #0
  401a30:	bc30      	pop	{r4, r5}
  401a32:	4770      	bx	lr
  401a34:	4007805c 	.word	0x4007805c
  401a38:	40078000 	.word	0x40078000
  401a3c:	004052ac 	.word	0x004052ac
  401a40:	e000e100 	.word	0xe000e100

00401a44 <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  401a44:	0180      	lsls	r0, r0, #6
  401a46:	4b02      	ldr	r3, [pc, #8]	; (401a50 <_dma_set_destination_address+0xc>)
  401a48:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  401a4a:	2000      	movs	r0, #0
  401a4c:	4770      	bx	lr
  401a4e:	bf00      	nop
  401a50:	40078064 	.word	0x40078064

00401a54 <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  401a54:	0180      	lsls	r0, r0, #6
  401a56:	4b02      	ldr	r3, [pc, #8]	; (401a60 <_dma_set_source_address+0xc>)
  401a58:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  401a5a:	2000      	movs	r0, #0
  401a5c:	4770      	bx	lr
  401a5e:	bf00      	nop
  401a60:	40078060 	.word	0x40078060

00401a64 <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  401a64:	0180      	lsls	r0, r0, #6
  401a66:	4a04      	ldr	r2, [pc, #16]	; (401a78 <_dma_set_data_amount+0x14>)
  401a68:	4402      	add	r2, r0
  401a6a:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  401a6c:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  401a70:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  401a72:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  401a74:	2000      	movs	r0, #0
  401a76:	4770      	bx	lr
  401a78:	40078000 	.word	0x40078000

00401a7c <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  401a7c:	2301      	movs	r3, #1
  401a7e:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  401a82:	4b03      	ldr	r3, [pc, #12]	; (401a90 <_dma_enable_transaction+0x14>)
  401a84:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  401a86:	b101      	cbz	r1, 401a8a <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  401a88:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  401a8a:	2000      	movs	r0, #0
  401a8c:	4770      	bx	lr
  401a8e:	bf00      	nop
  401a90:	40078000 	.word	0x40078000

00401a94 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  401a94:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  401a98:	008a      	lsls	r2, r1, #2
  401a9a:	4b02      	ldr	r3, [pc, #8]	; (401aa4 <_dma_get_channel_resource+0x10>)
  401a9c:	4413      	add	r3, r2
  401a9e:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  401aa0:	2000      	movs	r0, #0
  401aa2:	4770      	bx	lr
  401aa4:	204002ac 	.word	0x204002ac

00401aa8 <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  401aa8:	b19a      	cbz	r2, 401ad2 <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  401aaa:	b951      	cbnz	r1, 401ac2 <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  401aac:	0182      	lsls	r2, r0, #6
  401aae:	4b13      	ldr	r3, [pc, #76]	; (401afc <_dma_set_irq_state+0x54>)
  401ab0:	4413      	add	r3, r2
  401ab2:	2201      	movs	r2, #1
  401ab4:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  401ab6:	2301      	movs	r3, #1
  401ab8:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  401abc:	4b0f      	ldr	r3, [pc, #60]	; (401afc <_dma_set_irq_state+0x54>)
  401abe:	60d8      	str	r0, [r3, #12]
  401ac0:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  401ac2:	2901      	cmp	r1, #1
  401ac4:	d1f7      	bne.n	401ab6 <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  401ac6:	0182      	lsls	r2, r0, #6
  401ac8:	4b0c      	ldr	r3, [pc, #48]	; (401afc <_dma_set_irq_state+0x54>)
  401aca:	4413      	add	r3, r2
  401acc:	2270      	movs	r2, #112	; 0x70
  401ace:	651a      	str	r2, [r3, #80]	; 0x50
  401ad0:	e7f1      	b.n	401ab6 <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  401ad2:	b951      	cbnz	r1, 401aea <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  401ad4:	0182      	lsls	r2, r0, #6
  401ad6:	4b09      	ldr	r3, [pc, #36]	; (401afc <_dma_set_irq_state+0x54>)
  401ad8:	4413      	add	r3, r2
  401ada:	2201      	movs	r2, #1
  401adc:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  401ade:	2301      	movs	r3, #1
  401ae0:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  401ae4:	4b05      	ldr	r3, [pc, #20]	; (401afc <_dma_set_irq_state+0x54>)
  401ae6:	6118      	str	r0, [r3, #16]
  401ae8:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  401aea:	2901      	cmp	r1, #1
  401aec:	d1f7      	bne.n	401ade <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  401aee:	0182      	lsls	r2, r0, #6
  401af0:	4b02      	ldr	r3, [pc, #8]	; (401afc <_dma_set_irq_state+0x54>)
  401af2:	4413      	add	r3, r2
  401af4:	2270      	movs	r2, #112	; 0x70
  401af6:	655a      	str	r2, [r3, #84]	; 0x54
  401af8:	e7f1      	b.n	401ade <_dma_set_irq_state+0x36>
  401afa:	bf00      	nop
  401afc:	40078000 	.word	0x40078000

00401b00 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  401b00:	4b17      	ldr	r3, [pc, #92]	; (401b60 <XDMAC_Handler+0x60>)
  401b02:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  401b04:	2300      	movs	r3, #0
  401b06:	2b17      	cmp	r3, #23
  401b08:	d81b      	bhi.n	401b42 <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  401b0a:	fa21 f203 	lsr.w	r2, r1, r3
  401b0e:	f012 0f01 	tst.w	r2, #1
  401b12:	d102      	bne.n	401b1a <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  401b14:	3301      	adds	r3, #1
  401b16:	b2db      	uxtb	r3, r3
  401b18:	e7f5      	b.n	401b06 <XDMAC_Handler+0x6>
			channel = i;
  401b1a:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  401b1c:	2b00      	cmp	r3, #0
  401b1e:	db1d      	blt.n	401b5c <XDMAC_Handler+0x5c>
{
  401b20:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  401b22:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  401b26:	0090      	lsls	r0, r2, #2
  401b28:	4a0e      	ldr	r2, [pc, #56]	; (401b64 <XDMAC_Handler+0x64>)
  401b2a:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  401b2c:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  401b2e:	0189      	lsls	r1, r1, #6
  401b30:	4a0d      	ldr	r2, [pc, #52]	; (401b68 <XDMAC_Handler+0x68>)
  401b32:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  401b34:	f012 0f70 	tst.w	r2, #112	; 0x70
  401b38:	d106      	bne.n	401b48 <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  401b3a:	f012 0f01 	tst.w	r2, #1
  401b3e:	d106      	bne.n	401b4e <XDMAC_Handler+0x4e>
  401b40:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  401b42:	f04f 33ff 	mov.w	r3, #4294967295
  401b46:	e7e9      	b.n	401b1c <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  401b48:	6843      	ldr	r3, [r0, #4]
  401b4a:	4798      	blx	r3
  401b4c:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  401b4e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  401b52:	00a3      	lsls	r3, r4, #2
  401b54:	4a03      	ldr	r2, [pc, #12]	; (401b64 <XDMAC_Handler+0x64>)
  401b56:	58d3      	ldr	r3, [r2, r3]
  401b58:	4798      	blx	r3
  401b5a:	e7f1      	b.n	401b40 <XDMAC_Handler+0x40>
  401b5c:	4770      	bx	lr
  401b5e:	bf00      	nop
  401b60:	40078000 	.word	0x40078000
  401b64:	204002ac 	.word	0x204002ac
  401b68:	4007805c 	.word	0x4007805c

00401b6c <dma_interrupt>:


static uint32_t afec_buf[12];

static void dma_interrupt(struct _dma_resource *resource)
{
  401b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401b6e:	b08b      	sub	sp, #44	; 0x2c
	/* period interrupt */
	printf("interrupt - %i %i %i %i %i %i %i %i %i %i %i %i  \n", (int)afec_buf[0],(int)afec_buf[1],(int)afec_buf[2],(int)afec_buf[3],(int)afec_buf[4],(int)afec_buf[5],(int)afec_buf[6],(int)afec_buf[7],(int)afec_buf[8],(int)afec_buf[9],(int)afec_buf[10],(int)afec_buf[11]);
  401b70:	480d      	ldr	r0, [pc, #52]	; (401ba8 <dma_interrupt+0x3c>)
  401b72:	6801      	ldr	r1, [r0, #0]
  401b74:	6842      	ldr	r2, [r0, #4]
  401b76:	6883      	ldr	r3, [r0, #8]
  401b78:	68c4      	ldr	r4, [r0, #12]
  401b7a:	9400      	str	r4, [sp, #0]
  401b7c:	6904      	ldr	r4, [r0, #16]
  401b7e:	9401      	str	r4, [sp, #4]
  401b80:	6944      	ldr	r4, [r0, #20]
  401b82:	9402      	str	r4, [sp, #8]
  401b84:	6985      	ldr	r5, [r0, #24]
  401b86:	69c6      	ldr	r6, [r0, #28]
  401b88:	6a07      	ldr	r7, [r0, #32]
  401b8a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  401b8c:	9406      	str	r4, [sp, #24]
  401b8e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  401b90:	9407      	str	r4, [sp, #28]
  401b92:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401b94:	9008      	str	r0, [sp, #32]
  401b96:	9705      	str	r7, [sp, #20]
  401b98:	9604      	str	r6, [sp, #16]
  401b9a:	9503      	str	r5, [sp, #12]
  401b9c:	4803      	ldr	r0, [pc, #12]	; (401bac <dma_interrupt+0x40>)
  401b9e:	4c04      	ldr	r4, [pc, #16]	; (401bb0 <dma_interrupt+0x44>)
  401ba0:	47a0      	blx	r4
}
  401ba2:	b00b      	add	sp, #44	; 0x2c
  401ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401ba6:	bf00      	nop
  401ba8:	204003cc 	.word	0x204003cc
  401bac:	0040536c 	.word	0x0040536c
  401bb0:	00402fed 	.word	0x00402fed

00401bb4 <main>:

int main(void)
{
  401bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401bb8:	b08a      	sub	sp, #40	; 0x28
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  401bba:	4b35      	ldr	r3, [pc, #212]	; (401c90 <main+0xdc>)
  401bbc:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  401bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
  401bc2:	4b34      	ldr	r3, [pc, #208]	; (401c94 <main+0xe0>)
  401bc4:	631a      	str	r2, [r3, #48]	; 0x30
	//Temp 3 currently disabled as pin is shared with edbg com
	
		
	gpio_set_pin_level(PIN_USER_LED, true);
	//_dma_set_source_address(0,(void *) ((Afec *)((&ADC_0)->device.hw) + AFEC_LCDR_OFFSET));
	_dma_set_source_address(0,(void *)0x4003C020);
  401bc6:	4934      	ldr	r1, [pc, #208]	; (401c98 <main+0xe4>)
  401bc8:	2000      	movs	r0, #0
  401bca:	4b34      	ldr	r3, [pc, #208]	; (401c9c <main+0xe8>)
  401bcc:	4798      	blx	r3
	_dma_set_destination_address(0,afec_buf);
  401bce:	4934      	ldr	r1, [pc, #208]	; (401ca0 <main+0xec>)
  401bd0:	2000      	movs	r0, #0
  401bd2:	4b34      	ldr	r3, [pc, #208]	; (401ca4 <main+0xf0>)
  401bd4:	4798      	blx	r3
	_dma_set_data_amount(0,4*6);
  401bd6:	2118      	movs	r1, #24
  401bd8:	2000      	movs	r0, #0
  401bda:	4b33      	ldr	r3, [pc, #204]	; (401ca8 <main+0xf4>)
  401bdc:	4798      	blx	r3
	
	struct _dma_resource **res;
	_dma_get_channel_resource(res, 0);
  401bde:	2100      	movs	r1, #0
  401be0:	460c      	mov	r4, r1
  401be2:	4608      	mov	r0, r1
  401be4:	4b31      	ldr	r3, [pc, #196]	; (401cac <main+0xf8>)
  401be6:	4798      	blx	r3
	(*res)->dma_cb.transfer_done = dma_interrupt;
  401be8:	6823      	ldr	r3, [r4, #0]
  401bea:	4a31      	ldr	r2, [pc, #196]	; (401cb0 <main+0xfc>)
  401bec:	601a      	str	r2, [r3, #0]
	
	//NVIC_DisableIRQ(XDMAC_IRQn);
	_dma_set_irq_state(0,DMA_TRANSFER_COMPLETE_CB,true);
  401bee:	2201      	movs	r2, #1
  401bf0:	4621      	mov	r1, r4
  401bf2:	4620      	mov	r0, r4
  401bf4:	4b2f      	ldr	r3, [pc, #188]	; (401cb4 <main+0x100>)
  401bf6:	4798      	blx	r3
	//_dma_set_irq_state(0,DMA_TRANSFER_ERROR_CB,true);
	//NVIC_EnableIRQ(XDMAC_IRQn);
	
	_dma_enable_transaction(0,true);
  401bf8:	2101      	movs	r1, #1
  401bfa:	4620      	mov	r0, r4
  401bfc:	4b2e      	ldr	r3, [pc, #184]	; (401cb8 <main+0x104>)
  401bfe:	4798      	blx	r3
	
	pwm_enable_all();
  401c00:	4b2e      	ldr	r3, [pc, #184]	; (401cbc <main+0x108>)
  401c02:	4798      	blx	r3
	adc_enable_all();
  401c04:	4b2e      	ldr	r3, [pc, #184]	; (401cc0 <main+0x10c>)
  401c06:	4798      	blx	r3
  401c08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  401c0c:	4b2d      	ldr	r3, [pc, #180]	; (401cc4 <main+0x110>)
  401c0e:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);
	
	timer_start(&ENCODER_A);
  401c10:	482d      	ldr	r0, [pc, #180]	; (401cc8 <main+0x114>)
  401c12:	4c2e      	ldr	r4, [pc, #184]	; (401ccc <main+0x118>)
  401c14:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  401c16:	482e      	ldr	r0, [pc, #184]	; (401cd0 <main+0x11c>)
  401c18:	47a0      	blx	r4
  401c1a:	4e1e      	ldr	r6, [pc, #120]	; (401c94 <main+0xe0>)
  401c1c:	f44f 7780 	mov.w	r7, #256	; 0x100
  401c20:	6337      	str	r7, [r6, #48]	; 0x30

	/* Replace with your application code */
	while (1) {
		
		gpio_set_pin_level(PIN_USER_LED,true);
		delay_ms(500);
  401c22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  401c26:	4d2b      	ldr	r5, [pc, #172]	; (401cd4 <main+0x120>)
  401c28:	47a8      	blx	r5
		
		int a = (int) adc_read(ADC_TEMP_2);
  401c2a:	2106      	movs	r1, #6
  401c2c:	482a      	ldr	r0, [pc, #168]	; (401cd8 <main+0x124>)
  401c2e:	4b2b      	ldr	r3, [pc, #172]	; (401cdc <main+0x128>)
  401c30:	4798      	blx	r3
		printf("main - %i \n",a);
  401c32:	4601      	mov	r1, r0
  401c34:	482a      	ldr	r0, [pc, #168]	; (401ce0 <main+0x12c>)
  401c36:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 401ce8 <main+0x134>
  401c3a:	47c0      	blx	r8
		printf("main - %i %i %i %i %i %i %i %i %i %i %i %i  \n", (int)afec_buf[0],(int)afec_buf[1],(int)afec_buf[2],(int)afec_buf[3],(int)afec_buf[4],(int)afec_buf[5],(int)afec_buf[6],(int)afec_buf[7],(int)afec_buf[8],(int)afec_buf[9],(int)afec_buf[10],(int)afec_buf[11]);
  401c3c:	4c18      	ldr	r4, [pc, #96]	; (401ca0 <main+0xec>)
  401c3e:	6a23      	ldr	r3, [r4, #32]
  401c40:	6a62      	ldr	r2, [r4, #36]	; 0x24
  401c42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  401c44:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c46:	9008      	str	r0, [sp, #32]
  401c48:	9107      	str	r1, [sp, #28]
  401c4a:	9206      	str	r2, [sp, #24]
  401c4c:	9305      	str	r3, [sp, #20]
  401c4e:	69e3      	ldr	r3, [r4, #28]
  401c50:	9304      	str	r3, [sp, #16]
  401c52:	69a3      	ldr	r3, [r4, #24]
  401c54:	9303      	str	r3, [sp, #12]
  401c56:	6963      	ldr	r3, [r4, #20]
  401c58:	9302      	str	r3, [sp, #8]
  401c5a:	6923      	ldr	r3, [r4, #16]
  401c5c:	9301      	str	r3, [sp, #4]
  401c5e:	68e3      	ldr	r3, [r4, #12]
  401c60:	9300      	str	r3, [sp, #0]
  401c62:	68a3      	ldr	r3, [r4, #8]
  401c64:	6862      	ldr	r2, [r4, #4]
  401c66:	6821      	ldr	r1, [r4, #0]
  401c68:	481e      	ldr	r0, [pc, #120]	; (401ce4 <main+0x130>)
  401c6a:	47c0      	blx	r8
		//AFEC0_Handler
		_dma_set_destination_address(0,afec_buf);
  401c6c:	4621      	mov	r1, r4
  401c6e:	2000      	movs	r0, #0
  401c70:	4b0c      	ldr	r3, [pc, #48]	; (401ca4 <main+0xf0>)
  401c72:	4798      	blx	r3
		_dma_set_data_amount(0,4*6);
  401c74:	2118      	movs	r1, #24
  401c76:	2000      	movs	r0, #0
  401c78:	4b0b      	ldr	r3, [pc, #44]	; (401ca8 <main+0xf4>)
  401c7a:	4798      	blx	r3
		_dma_enable_transaction(0,true);
  401c7c:	2101      	movs	r1, #1
  401c7e:	2000      	movs	r0, #0
  401c80:	4b0d      	ldr	r3, [pc, #52]	; (401cb8 <main+0x104>)
  401c82:	4798      	blx	r3
	((Pio *)hw)->PIO_CODR = mask;
  401c84:	6377      	str	r7, [r6, #52]	; 0x34
		gpio_set_pin_level(PIN_USER_LED,false);
		delay_ms(500);
  401c86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  401c8a:	47a8      	blx	r5
  401c8c:	e7c5      	b.n	401c1a <main+0x66>
  401c8e:	bf00      	nop
  401c90:	004001d5 	.word	0x004001d5
  401c94:	400e1200 	.word	0x400e1200
  401c98:	4003c020 	.word	0x4003c020
  401c9c:	00401a55 	.word	0x00401a55
  401ca0:	204003cc 	.word	0x204003cc
  401ca4:	00401a45 	.word	0x00401a45
  401ca8:	00401a65 	.word	0x00401a65
  401cac:	00401a95 	.word	0x00401a95
  401cb0:	00401b6d 	.word	0x00401b6d
  401cb4:	00401aa9 	.word	0x00401aa9
  401cb8:	00401a7d 	.word	0x00401a7d
  401cbc:	0040025d 	.word	0x0040025d
  401cc0:	004001e9 	.word	0x004001e9
  401cc4:	400e0e00 	.word	0x400e0e00
  401cc8:	20400474 	.word	0x20400474
  401ccc:	00400be5 	.word	0x00400be5
  401cd0:	20400424 	.word	0x20400424
  401cd4:	00400935 	.word	0x00400935
  401cd8:	20400490 	.word	0x20400490
  401cdc:	0040023d 	.word	0x0040023d
  401ce0:	004053a0 	.word	0x004053a0
  401ce4:	004053ac 	.word	0x004053ac
  401ce8:	00402fed 	.word	0x00402fed

00401cec <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  401cec:	b958      	cbnz	r0, 401d06 <_read+0x1a>
{
  401cee:	b508      	push	{r3, lr}
  401cf0:	460b      	mov	r3, r1
  401cf2:	4611      	mov	r1, r2
  401cf4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  401cf6:	4b05      	ldr	r3, [pc, #20]	; (401d0c <_read+0x20>)
  401cf8:	4798      	blx	r3
	if (n < 0) {
  401cfa:	2800      	cmp	r0, #0
  401cfc:	db00      	blt.n	401d00 <_read+0x14>
		return -1;
	}

	return n;
}
  401cfe:	bd08      	pop	{r3, pc}
		return -1;
  401d00:	f04f 30ff 	mov.w	r0, #4294967295
  401d04:	bd08      	pop	{r3, pc}
		return -1;
  401d06:	f04f 30ff 	mov.w	r0, #4294967295
  401d0a:	4770      	bx	lr
  401d0c:	00401d65 	.word	0x00401d65

00401d10 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  401d10:	3801      	subs	r0, #1
  401d12:	2802      	cmp	r0, #2
  401d14:	d80b      	bhi.n	401d2e <_write+0x1e>
{
  401d16:	b508      	push	{r3, lr}
  401d18:	460b      	mov	r3, r1
  401d1a:	4611      	mov	r1, r2
  401d1c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  401d1e:	4b05      	ldr	r3, [pc, #20]	; (401d34 <_write+0x24>)
  401d20:	4798      	blx	r3
	if (n < 0) {
  401d22:	2800      	cmp	r0, #0
  401d24:	db00      	blt.n	401d28 <_write+0x18>
		return -1;
	}

	return n;
}
  401d26:	bd08      	pop	{r3, pc}
		return -1;
  401d28:	f04f 30ff 	mov.w	r0, #4294967295
  401d2c:	bd08      	pop	{r3, pc}
		return -1;
  401d2e:	f04f 30ff 	mov.w	r0, #4294967295
  401d32:	4770      	bx	lr
  401d34:	00401d89 	.word	0x00401d89

00401d38 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  401d38:	b570      	push	{r4, r5, r6, lr}
  401d3a:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  401d3c:	4d06      	ldr	r5, [pc, #24]	; (401d58 <stdio_io_init+0x20>)
  401d3e:	682b      	ldr	r3, [r5, #0]
  401d40:	2100      	movs	r1, #0
  401d42:	6898      	ldr	r0, [r3, #8]
  401d44:	4c05      	ldr	r4, [pc, #20]	; (401d5c <stdio_io_init+0x24>)
  401d46:	47a0      	blx	r4
	setbuf(stdin, NULL);
  401d48:	682b      	ldr	r3, [r5, #0]
  401d4a:	2100      	movs	r1, #0
  401d4c:	6858      	ldr	r0, [r3, #4]
  401d4e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  401d50:	4b03      	ldr	r3, [pc, #12]	; (401d60 <stdio_io_init+0x28>)
  401d52:	601e      	str	r6, [r3, #0]
  401d54:	bd70      	pop	{r4, r5, r6, pc}
  401d56:	bf00      	nop
  401d58:	20400048 	.word	0x20400048
  401d5c:	0040301d 	.word	0x0040301d
  401d60:	204003fc 	.word	0x204003fc

00401d64 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  401d64:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401d66:	4b06      	ldr	r3, [pc, #24]	; (401d80 <stdio_io_read+0x1c>)
  401d68:	681b      	ldr	r3, [r3, #0]
  401d6a:	b133      	cbz	r3, 401d7a <stdio_io_read+0x16>
  401d6c:	460a      	mov	r2, r1
  401d6e:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  401d70:	b292      	uxth	r2, r2
  401d72:	4618      	mov	r0, r3
  401d74:	4b03      	ldr	r3, [pc, #12]	; (401d84 <stdio_io_read+0x20>)
  401d76:	4798      	blx	r3
  401d78:	bd08      	pop	{r3, pc}
		return 0;
  401d7a:	2000      	movs	r0, #0
}
  401d7c:	bd08      	pop	{r3, pc}
  401d7e:	bf00      	nop
  401d80:	204003fc 	.word	0x204003fc
  401d84:	004009fd 	.word	0x004009fd

00401d88 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  401d88:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401d8a:	4b06      	ldr	r3, [pc, #24]	; (401da4 <stdio_io_write+0x1c>)
  401d8c:	681b      	ldr	r3, [r3, #0]
  401d8e:	b133      	cbz	r3, 401d9e <stdio_io_write+0x16>
  401d90:	460a      	mov	r2, r1
  401d92:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  401d94:	b292      	uxth	r2, r2
  401d96:	4618      	mov	r0, r3
  401d98:	4b03      	ldr	r3, [pc, #12]	; (401da8 <stdio_io_write+0x20>)
  401d9a:	4798      	blx	r3
  401d9c:	bd08      	pop	{r3, pc}
		return 0;
  401d9e:	2000      	movs	r0, #0
}
  401da0:	bd08      	pop	{r3, pc}
  401da2:	bf00      	nop
  401da4:	204003fc 	.word	0x204003fc
  401da8:	004009cd 	.word	0x004009cd

00401dac <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  401dac:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  401dae:	4c04      	ldr	r4, [pc, #16]	; (401dc0 <stdio_redirect_init+0x14>)
  401db0:	4620      	mov	r0, r4
  401db2:	4b04      	ldr	r3, [pc, #16]	; (401dc4 <stdio_redirect_init+0x18>)
  401db4:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  401db6:	4620      	mov	r0, r4
  401db8:	4b03      	ldr	r3, [pc, #12]	; (401dc8 <stdio_redirect_init+0x1c>)
  401dba:	4798      	blx	r3
  401dbc:	bd10      	pop	{r4, pc}
  401dbe:	bf00      	nop
  401dc0:	20400468 	.word	0x20400468
  401dc4:	00400d39 	.word	0x00400d39
  401dc8:	00401d39 	.word	0x00401d39

00401dcc <__aeabi_drsub>:
  401dcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401dd0:	e002      	b.n	401dd8 <__adddf3>
  401dd2:	bf00      	nop

00401dd4 <__aeabi_dsub>:
  401dd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401dd8 <__adddf3>:
  401dd8:	b530      	push	{r4, r5, lr}
  401dda:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401dde:	ea4f 0543 	mov.w	r5, r3, lsl #1
  401de2:	ea94 0f05 	teq	r4, r5
  401de6:	bf08      	it	eq
  401de8:	ea90 0f02 	teqeq	r0, r2
  401dec:	bf1f      	itttt	ne
  401dee:	ea54 0c00 	orrsne.w	ip, r4, r0
  401df2:	ea55 0c02 	orrsne.w	ip, r5, r2
  401df6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401dfa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401dfe:	f000 80e2 	beq.w	401fc6 <__adddf3+0x1ee>
  401e02:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401e06:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401e0a:	bfb8      	it	lt
  401e0c:	426d      	neglt	r5, r5
  401e0e:	dd0c      	ble.n	401e2a <__adddf3+0x52>
  401e10:	442c      	add	r4, r5
  401e12:	ea80 0202 	eor.w	r2, r0, r2
  401e16:	ea81 0303 	eor.w	r3, r1, r3
  401e1a:	ea82 0000 	eor.w	r0, r2, r0
  401e1e:	ea83 0101 	eor.w	r1, r3, r1
  401e22:	ea80 0202 	eor.w	r2, r0, r2
  401e26:	ea81 0303 	eor.w	r3, r1, r3
  401e2a:	2d36      	cmp	r5, #54	; 0x36
  401e2c:	bf88      	it	hi
  401e2e:	bd30      	pophi	{r4, r5, pc}
  401e30:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401e34:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401e38:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401e3c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401e40:	d002      	beq.n	401e48 <__adddf3+0x70>
  401e42:	4240      	negs	r0, r0
  401e44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401e48:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401e4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401e50:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401e54:	d002      	beq.n	401e5c <__adddf3+0x84>
  401e56:	4252      	negs	r2, r2
  401e58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401e5c:	ea94 0f05 	teq	r4, r5
  401e60:	f000 80a7 	beq.w	401fb2 <__adddf3+0x1da>
  401e64:	f1a4 0401 	sub.w	r4, r4, #1
  401e68:	f1d5 0e20 	rsbs	lr, r5, #32
  401e6c:	db0d      	blt.n	401e8a <__adddf3+0xb2>
  401e6e:	fa02 fc0e 	lsl.w	ip, r2, lr
  401e72:	fa22 f205 	lsr.w	r2, r2, r5
  401e76:	1880      	adds	r0, r0, r2
  401e78:	f141 0100 	adc.w	r1, r1, #0
  401e7c:	fa03 f20e 	lsl.w	r2, r3, lr
  401e80:	1880      	adds	r0, r0, r2
  401e82:	fa43 f305 	asr.w	r3, r3, r5
  401e86:	4159      	adcs	r1, r3
  401e88:	e00e      	b.n	401ea8 <__adddf3+0xd0>
  401e8a:	f1a5 0520 	sub.w	r5, r5, #32
  401e8e:	f10e 0e20 	add.w	lr, lr, #32
  401e92:	2a01      	cmp	r2, #1
  401e94:	fa03 fc0e 	lsl.w	ip, r3, lr
  401e98:	bf28      	it	cs
  401e9a:	f04c 0c02 	orrcs.w	ip, ip, #2
  401e9e:	fa43 f305 	asr.w	r3, r3, r5
  401ea2:	18c0      	adds	r0, r0, r3
  401ea4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401ea8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401eac:	d507      	bpl.n	401ebe <__adddf3+0xe6>
  401eae:	f04f 0e00 	mov.w	lr, #0
  401eb2:	f1dc 0c00 	rsbs	ip, ip, #0
  401eb6:	eb7e 0000 	sbcs.w	r0, lr, r0
  401eba:	eb6e 0101 	sbc.w	r1, lr, r1
  401ebe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401ec2:	d31b      	bcc.n	401efc <__adddf3+0x124>
  401ec4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401ec8:	d30c      	bcc.n	401ee4 <__adddf3+0x10c>
  401eca:	0849      	lsrs	r1, r1, #1
  401ecc:	ea5f 0030 	movs.w	r0, r0, rrx
  401ed0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401ed4:	f104 0401 	add.w	r4, r4, #1
  401ed8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401edc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401ee0:	f080 809a 	bcs.w	402018 <__adddf3+0x240>
  401ee4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401ee8:	bf08      	it	eq
  401eea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401eee:	f150 0000 	adcs.w	r0, r0, #0
  401ef2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401ef6:	ea41 0105 	orr.w	r1, r1, r5
  401efa:	bd30      	pop	{r4, r5, pc}
  401efc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401f00:	4140      	adcs	r0, r0
  401f02:	eb41 0101 	adc.w	r1, r1, r1
  401f06:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401f0a:	f1a4 0401 	sub.w	r4, r4, #1
  401f0e:	d1e9      	bne.n	401ee4 <__adddf3+0x10c>
  401f10:	f091 0f00 	teq	r1, #0
  401f14:	bf04      	itt	eq
  401f16:	4601      	moveq	r1, r0
  401f18:	2000      	moveq	r0, #0
  401f1a:	fab1 f381 	clz	r3, r1
  401f1e:	bf08      	it	eq
  401f20:	3320      	addeq	r3, #32
  401f22:	f1a3 030b 	sub.w	r3, r3, #11
  401f26:	f1b3 0220 	subs.w	r2, r3, #32
  401f2a:	da0c      	bge.n	401f46 <__adddf3+0x16e>
  401f2c:	320c      	adds	r2, #12
  401f2e:	dd08      	ble.n	401f42 <__adddf3+0x16a>
  401f30:	f102 0c14 	add.w	ip, r2, #20
  401f34:	f1c2 020c 	rsb	r2, r2, #12
  401f38:	fa01 f00c 	lsl.w	r0, r1, ip
  401f3c:	fa21 f102 	lsr.w	r1, r1, r2
  401f40:	e00c      	b.n	401f5c <__adddf3+0x184>
  401f42:	f102 0214 	add.w	r2, r2, #20
  401f46:	bfd8      	it	le
  401f48:	f1c2 0c20 	rsble	ip, r2, #32
  401f4c:	fa01 f102 	lsl.w	r1, r1, r2
  401f50:	fa20 fc0c 	lsr.w	ip, r0, ip
  401f54:	bfdc      	itt	le
  401f56:	ea41 010c 	orrle.w	r1, r1, ip
  401f5a:	4090      	lslle	r0, r2
  401f5c:	1ae4      	subs	r4, r4, r3
  401f5e:	bfa2      	ittt	ge
  401f60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401f64:	4329      	orrge	r1, r5
  401f66:	bd30      	popge	{r4, r5, pc}
  401f68:	ea6f 0404 	mvn.w	r4, r4
  401f6c:	3c1f      	subs	r4, #31
  401f6e:	da1c      	bge.n	401faa <__adddf3+0x1d2>
  401f70:	340c      	adds	r4, #12
  401f72:	dc0e      	bgt.n	401f92 <__adddf3+0x1ba>
  401f74:	f104 0414 	add.w	r4, r4, #20
  401f78:	f1c4 0220 	rsb	r2, r4, #32
  401f7c:	fa20 f004 	lsr.w	r0, r0, r4
  401f80:	fa01 f302 	lsl.w	r3, r1, r2
  401f84:	ea40 0003 	orr.w	r0, r0, r3
  401f88:	fa21 f304 	lsr.w	r3, r1, r4
  401f8c:	ea45 0103 	orr.w	r1, r5, r3
  401f90:	bd30      	pop	{r4, r5, pc}
  401f92:	f1c4 040c 	rsb	r4, r4, #12
  401f96:	f1c4 0220 	rsb	r2, r4, #32
  401f9a:	fa20 f002 	lsr.w	r0, r0, r2
  401f9e:	fa01 f304 	lsl.w	r3, r1, r4
  401fa2:	ea40 0003 	orr.w	r0, r0, r3
  401fa6:	4629      	mov	r1, r5
  401fa8:	bd30      	pop	{r4, r5, pc}
  401faa:	fa21 f004 	lsr.w	r0, r1, r4
  401fae:	4629      	mov	r1, r5
  401fb0:	bd30      	pop	{r4, r5, pc}
  401fb2:	f094 0f00 	teq	r4, #0
  401fb6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401fba:	bf06      	itte	eq
  401fbc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401fc0:	3401      	addeq	r4, #1
  401fc2:	3d01      	subne	r5, #1
  401fc4:	e74e      	b.n	401e64 <__adddf3+0x8c>
  401fc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401fca:	bf18      	it	ne
  401fcc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401fd0:	d029      	beq.n	402026 <__adddf3+0x24e>
  401fd2:	ea94 0f05 	teq	r4, r5
  401fd6:	bf08      	it	eq
  401fd8:	ea90 0f02 	teqeq	r0, r2
  401fdc:	d005      	beq.n	401fea <__adddf3+0x212>
  401fde:	ea54 0c00 	orrs.w	ip, r4, r0
  401fe2:	bf04      	itt	eq
  401fe4:	4619      	moveq	r1, r3
  401fe6:	4610      	moveq	r0, r2
  401fe8:	bd30      	pop	{r4, r5, pc}
  401fea:	ea91 0f03 	teq	r1, r3
  401fee:	bf1e      	ittt	ne
  401ff0:	2100      	movne	r1, #0
  401ff2:	2000      	movne	r0, #0
  401ff4:	bd30      	popne	{r4, r5, pc}
  401ff6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401ffa:	d105      	bne.n	402008 <__adddf3+0x230>
  401ffc:	0040      	lsls	r0, r0, #1
  401ffe:	4149      	adcs	r1, r1
  402000:	bf28      	it	cs
  402002:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402006:	bd30      	pop	{r4, r5, pc}
  402008:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40200c:	bf3c      	itt	cc
  40200e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402012:	bd30      	popcc	{r4, r5, pc}
  402014:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402018:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40201c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402020:	f04f 0000 	mov.w	r0, #0
  402024:	bd30      	pop	{r4, r5, pc}
  402026:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40202a:	bf1a      	itte	ne
  40202c:	4619      	movne	r1, r3
  40202e:	4610      	movne	r0, r2
  402030:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402034:	bf1c      	itt	ne
  402036:	460b      	movne	r3, r1
  402038:	4602      	movne	r2, r0
  40203a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40203e:	bf06      	itte	eq
  402040:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402044:	ea91 0f03 	teqeq	r1, r3
  402048:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40204c:	bd30      	pop	{r4, r5, pc}
  40204e:	bf00      	nop

00402050 <__aeabi_ui2d>:
  402050:	f090 0f00 	teq	r0, #0
  402054:	bf04      	itt	eq
  402056:	2100      	moveq	r1, #0
  402058:	4770      	bxeq	lr
  40205a:	b530      	push	{r4, r5, lr}
  40205c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402060:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402064:	f04f 0500 	mov.w	r5, #0
  402068:	f04f 0100 	mov.w	r1, #0
  40206c:	e750      	b.n	401f10 <__adddf3+0x138>
  40206e:	bf00      	nop

00402070 <__aeabi_i2d>:
  402070:	f090 0f00 	teq	r0, #0
  402074:	bf04      	itt	eq
  402076:	2100      	moveq	r1, #0
  402078:	4770      	bxeq	lr
  40207a:	b530      	push	{r4, r5, lr}
  40207c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402080:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402084:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402088:	bf48      	it	mi
  40208a:	4240      	negmi	r0, r0
  40208c:	f04f 0100 	mov.w	r1, #0
  402090:	e73e      	b.n	401f10 <__adddf3+0x138>
  402092:	bf00      	nop

00402094 <__aeabi_f2d>:
  402094:	0042      	lsls	r2, r0, #1
  402096:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40209a:	ea4f 0131 	mov.w	r1, r1, rrx
  40209e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4020a2:	bf1f      	itttt	ne
  4020a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4020a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4020ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4020b0:	4770      	bxne	lr
  4020b2:	f092 0f00 	teq	r2, #0
  4020b6:	bf14      	ite	ne
  4020b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4020bc:	4770      	bxeq	lr
  4020be:	b530      	push	{r4, r5, lr}
  4020c0:	f44f 7460 	mov.w	r4, #896	; 0x380
  4020c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4020c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4020cc:	e720      	b.n	401f10 <__adddf3+0x138>
  4020ce:	bf00      	nop

004020d0 <__aeabi_ul2d>:
  4020d0:	ea50 0201 	orrs.w	r2, r0, r1
  4020d4:	bf08      	it	eq
  4020d6:	4770      	bxeq	lr
  4020d8:	b530      	push	{r4, r5, lr}
  4020da:	f04f 0500 	mov.w	r5, #0
  4020de:	e00a      	b.n	4020f6 <__aeabi_l2d+0x16>

004020e0 <__aeabi_l2d>:
  4020e0:	ea50 0201 	orrs.w	r2, r0, r1
  4020e4:	bf08      	it	eq
  4020e6:	4770      	bxeq	lr
  4020e8:	b530      	push	{r4, r5, lr}
  4020ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4020ee:	d502      	bpl.n	4020f6 <__aeabi_l2d+0x16>
  4020f0:	4240      	negs	r0, r0
  4020f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4020f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4020fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4020fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402102:	f43f aedc 	beq.w	401ebe <__adddf3+0xe6>
  402106:	f04f 0203 	mov.w	r2, #3
  40210a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40210e:	bf18      	it	ne
  402110:	3203      	addne	r2, #3
  402112:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402116:	bf18      	it	ne
  402118:	3203      	addne	r2, #3
  40211a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40211e:	f1c2 0320 	rsb	r3, r2, #32
  402122:	fa00 fc03 	lsl.w	ip, r0, r3
  402126:	fa20 f002 	lsr.w	r0, r0, r2
  40212a:	fa01 fe03 	lsl.w	lr, r1, r3
  40212e:	ea40 000e 	orr.w	r0, r0, lr
  402132:	fa21 f102 	lsr.w	r1, r1, r2
  402136:	4414      	add	r4, r2
  402138:	e6c1      	b.n	401ebe <__adddf3+0xe6>
  40213a:	bf00      	nop

0040213c <__aeabi_dmul>:
  40213c:	b570      	push	{r4, r5, r6, lr}
  40213e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402142:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402146:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40214a:	bf1d      	ittte	ne
  40214c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402150:	ea94 0f0c 	teqne	r4, ip
  402154:	ea95 0f0c 	teqne	r5, ip
  402158:	f000 f8de 	bleq	402318 <__aeabi_dmul+0x1dc>
  40215c:	442c      	add	r4, r5
  40215e:	ea81 0603 	eor.w	r6, r1, r3
  402162:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402166:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40216a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40216e:	bf18      	it	ne
  402170:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402174:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40217c:	d038      	beq.n	4021f0 <__aeabi_dmul+0xb4>
  40217e:	fba0 ce02 	umull	ip, lr, r0, r2
  402182:	f04f 0500 	mov.w	r5, #0
  402186:	fbe1 e502 	umlal	lr, r5, r1, r2
  40218a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40218e:	fbe0 e503 	umlal	lr, r5, r0, r3
  402192:	f04f 0600 	mov.w	r6, #0
  402196:	fbe1 5603 	umlal	r5, r6, r1, r3
  40219a:	f09c 0f00 	teq	ip, #0
  40219e:	bf18      	it	ne
  4021a0:	f04e 0e01 	orrne.w	lr, lr, #1
  4021a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4021a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4021ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4021b0:	d204      	bcs.n	4021bc <__aeabi_dmul+0x80>
  4021b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4021b6:	416d      	adcs	r5, r5
  4021b8:	eb46 0606 	adc.w	r6, r6, r6
  4021bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4021c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4021c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4021c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4021cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4021d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4021d4:	bf88      	it	hi
  4021d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4021da:	d81e      	bhi.n	40221a <__aeabi_dmul+0xde>
  4021dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4021e0:	bf08      	it	eq
  4021e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4021e6:	f150 0000 	adcs.w	r0, r0, #0
  4021ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4021ee:	bd70      	pop	{r4, r5, r6, pc}
  4021f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4021f4:	ea46 0101 	orr.w	r1, r6, r1
  4021f8:	ea40 0002 	orr.w	r0, r0, r2
  4021fc:	ea81 0103 	eor.w	r1, r1, r3
  402200:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402204:	bfc2      	ittt	gt
  402206:	ebd4 050c 	rsbsgt	r5, r4, ip
  40220a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40220e:	bd70      	popgt	{r4, r5, r6, pc}
  402210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402214:	f04f 0e00 	mov.w	lr, #0
  402218:	3c01      	subs	r4, #1
  40221a:	f300 80ab 	bgt.w	402374 <__aeabi_dmul+0x238>
  40221e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402222:	bfde      	ittt	le
  402224:	2000      	movle	r0, #0
  402226:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40222a:	bd70      	pople	{r4, r5, r6, pc}
  40222c:	f1c4 0400 	rsb	r4, r4, #0
  402230:	3c20      	subs	r4, #32
  402232:	da35      	bge.n	4022a0 <__aeabi_dmul+0x164>
  402234:	340c      	adds	r4, #12
  402236:	dc1b      	bgt.n	402270 <__aeabi_dmul+0x134>
  402238:	f104 0414 	add.w	r4, r4, #20
  40223c:	f1c4 0520 	rsb	r5, r4, #32
  402240:	fa00 f305 	lsl.w	r3, r0, r5
  402244:	fa20 f004 	lsr.w	r0, r0, r4
  402248:	fa01 f205 	lsl.w	r2, r1, r5
  40224c:	ea40 0002 	orr.w	r0, r0, r2
  402250:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402254:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402258:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40225c:	fa21 f604 	lsr.w	r6, r1, r4
  402260:	eb42 0106 	adc.w	r1, r2, r6
  402264:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402268:	bf08      	it	eq
  40226a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40226e:	bd70      	pop	{r4, r5, r6, pc}
  402270:	f1c4 040c 	rsb	r4, r4, #12
  402274:	f1c4 0520 	rsb	r5, r4, #32
  402278:	fa00 f304 	lsl.w	r3, r0, r4
  40227c:	fa20 f005 	lsr.w	r0, r0, r5
  402280:	fa01 f204 	lsl.w	r2, r1, r4
  402284:	ea40 0002 	orr.w	r0, r0, r2
  402288:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40228c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402290:	f141 0100 	adc.w	r1, r1, #0
  402294:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402298:	bf08      	it	eq
  40229a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40229e:	bd70      	pop	{r4, r5, r6, pc}
  4022a0:	f1c4 0520 	rsb	r5, r4, #32
  4022a4:	fa00 f205 	lsl.w	r2, r0, r5
  4022a8:	ea4e 0e02 	orr.w	lr, lr, r2
  4022ac:	fa20 f304 	lsr.w	r3, r0, r4
  4022b0:	fa01 f205 	lsl.w	r2, r1, r5
  4022b4:	ea43 0302 	orr.w	r3, r3, r2
  4022b8:	fa21 f004 	lsr.w	r0, r1, r4
  4022bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4022c0:	fa21 f204 	lsr.w	r2, r1, r4
  4022c4:	ea20 0002 	bic.w	r0, r0, r2
  4022c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4022cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4022d0:	bf08      	it	eq
  4022d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4022d6:	bd70      	pop	{r4, r5, r6, pc}
  4022d8:	f094 0f00 	teq	r4, #0
  4022dc:	d10f      	bne.n	4022fe <__aeabi_dmul+0x1c2>
  4022de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4022e2:	0040      	lsls	r0, r0, #1
  4022e4:	eb41 0101 	adc.w	r1, r1, r1
  4022e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4022ec:	bf08      	it	eq
  4022ee:	3c01      	subeq	r4, #1
  4022f0:	d0f7      	beq.n	4022e2 <__aeabi_dmul+0x1a6>
  4022f2:	ea41 0106 	orr.w	r1, r1, r6
  4022f6:	f095 0f00 	teq	r5, #0
  4022fa:	bf18      	it	ne
  4022fc:	4770      	bxne	lr
  4022fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402302:	0052      	lsls	r2, r2, #1
  402304:	eb43 0303 	adc.w	r3, r3, r3
  402308:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40230c:	bf08      	it	eq
  40230e:	3d01      	subeq	r5, #1
  402310:	d0f7      	beq.n	402302 <__aeabi_dmul+0x1c6>
  402312:	ea43 0306 	orr.w	r3, r3, r6
  402316:	4770      	bx	lr
  402318:	ea94 0f0c 	teq	r4, ip
  40231c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402320:	bf18      	it	ne
  402322:	ea95 0f0c 	teqne	r5, ip
  402326:	d00c      	beq.n	402342 <__aeabi_dmul+0x206>
  402328:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40232c:	bf18      	it	ne
  40232e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402332:	d1d1      	bne.n	4022d8 <__aeabi_dmul+0x19c>
  402334:	ea81 0103 	eor.w	r1, r1, r3
  402338:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40233c:	f04f 0000 	mov.w	r0, #0
  402340:	bd70      	pop	{r4, r5, r6, pc}
  402342:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402346:	bf06      	itte	eq
  402348:	4610      	moveq	r0, r2
  40234a:	4619      	moveq	r1, r3
  40234c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402350:	d019      	beq.n	402386 <__aeabi_dmul+0x24a>
  402352:	ea94 0f0c 	teq	r4, ip
  402356:	d102      	bne.n	40235e <__aeabi_dmul+0x222>
  402358:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40235c:	d113      	bne.n	402386 <__aeabi_dmul+0x24a>
  40235e:	ea95 0f0c 	teq	r5, ip
  402362:	d105      	bne.n	402370 <__aeabi_dmul+0x234>
  402364:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402368:	bf1c      	itt	ne
  40236a:	4610      	movne	r0, r2
  40236c:	4619      	movne	r1, r3
  40236e:	d10a      	bne.n	402386 <__aeabi_dmul+0x24a>
  402370:	ea81 0103 	eor.w	r1, r1, r3
  402374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402378:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40237c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402380:	f04f 0000 	mov.w	r0, #0
  402384:	bd70      	pop	{r4, r5, r6, pc}
  402386:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40238a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40238e:	bd70      	pop	{r4, r5, r6, pc}

00402390 <__aeabi_ddiv>:
  402390:	b570      	push	{r4, r5, r6, lr}
  402392:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402396:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40239a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40239e:	bf1d      	ittte	ne
  4023a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4023a4:	ea94 0f0c 	teqne	r4, ip
  4023a8:	ea95 0f0c 	teqne	r5, ip
  4023ac:	f000 f8a7 	bleq	4024fe <__aeabi_ddiv+0x16e>
  4023b0:	eba4 0405 	sub.w	r4, r4, r5
  4023b4:	ea81 0e03 	eor.w	lr, r1, r3
  4023b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4023bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4023c0:	f000 8088 	beq.w	4024d4 <__aeabi_ddiv+0x144>
  4023c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4023c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4023cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4023d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4023d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4023d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4023dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4023e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4023e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4023e8:	429d      	cmp	r5, r3
  4023ea:	bf08      	it	eq
  4023ec:	4296      	cmpeq	r6, r2
  4023ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4023f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4023f6:	d202      	bcs.n	4023fe <__aeabi_ddiv+0x6e>
  4023f8:	085b      	lsrs	r3, r3, #1
  4023fa:	ea4f 0232 	mov.w	r2, r2, rrx
  4023fe:	1ab6      	subs	r6, r6, r2
  402400:	eb65 0503 	sbc.w	r5, r5, r3
  402404:	085b      	lsrs	r3, r3, #1
  402406:	ea4f 0232 	mov.w	r2, r2, rrx
  40240a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40240e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402412:	ebb6 0e02 	subs.w	lr, r6, r2
  402416:	eb75 0e03 	sbcs.w	lr, r5, r3
  40241a:	bf22      	ittt	cs
  40241c:	1ab6      	subcs	r6, r6, r2
  40241e:	4675      	movcs	r5, lr
  402420:	ea40 000c 	orrcs.w	r0, r0, ip
  402424:	085b      	lsrs	r3, r3, #1
  402426:	ea4f 0232 	mov.w	r2, r2, rrx
  40242a:	ebb6 0e02 	subs.w	lr, r6, r2
  40242e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402432:	bf22      	ittt	cs
  402434:	1ab6      	subcs	r6, r6, r2
  402436:	4675      	movcs	r5, lr
  402438:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40243c:	085b      	lsrs	r3, r3, #1
  40243e:	ea4f 0232 	mov.w	r2, r2, rrx
  402442:	ebb6 0e02 	subs.w	lr, r6, r2
  402446:	eb75 0e03 	sbcs.w	lr, r5, r3
  40244a:	bf22      	ittt	cs
  40244c:	1ab6      	subcs	r6, r6, r2
  40244e:	4675      	movcs	r5, lr
  402450:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402454:	085b      	lsrs	r3, r3, #1
  402456:	ea4f 0232 	mov.w	r2, r2, rrx
  40245a:	ebb6 0e02 	subs.w	lr, r6, r2
  40245e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402462:	bf22      	ittt	cs
  402464:	1ab6      	subcs	r6, r6, r2
  402466:	4675      	movcs	r5, lr
  402468:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40246c:	ea55 0e06 	orrs.w	lr, r5, r6
  402470:	d018      	beq.n	4024a4 <__aeabi_ddiv+0x114>
  402472:	ea4f 1505 	mov.w	r5, r5, lsl #4
  402476:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40247a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40247e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402482:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  402486:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40248a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40248e:	d1c0      	bne.n	402412 <__aeabi_ddiv+0x82>
  402490:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402494:	d10b      	bne.n	4024ae <__aeabi_ddiv+0x11e>
  402496:	ea41 0100 	orr.w	r1, r1, r0
  40249a:	f04f 0000 	mov.w	r0, #0
  40249e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4024a2:	e7b6      	b.n	402412 <__aeabi_ddiv+0x82>
  4024a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4024a8:	bf04      	itt	eq
  4024aa:	4301      	orreq	r1, r0
  4024ac:	2000      	moveq	r0, #0
  4024ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4024b2:	bf88      	it	hi
  4024b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4024b8:	f63f aeaf 	bhi.w	40221a <__aeabi_dmul+0xde>
  4024bc:	ebb5 0c03 	subs.w	ip, r5, r3
  4024c0:	bf04      	itt	eq
  4024c2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4024c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4024ca:	f150 0000 	adcs.w	r0, r0, #0
  4024ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4024d2:	bd70      	pop	{r4, r5, r6, pc}
  4024d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4024d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4024dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4024e0:	bfc2      	ittt	gt
  4024e2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4024e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4024ea:	bd70      	popgt	{r4, r5, r6, pc}
  4024ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4024f0:	f04f 0e00 	mov.w	lr, #0
  4024f4:	3c01      	subs	r4, #1
  4024f6:	e690      	b.n	40221a <__aeabi_dmul+0xde>
  4024f8:	ea45 0e06 	orr.w	lr, r5, r6
  4024fc:	e68d      	b.n	40221a <__aeabi_dmul+0xde>
  4024fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402502:	ea94 0f0c 	teq	r4, ip
  402506:	bf08      	it	eq
  402508:	ea95 0f0c 	teqeq	r5, ip
  40250c:	f43f af3b 	beq.w	402386 <__aeabi_dmul+0x24a>
  402510:	ea94 0f0c 	teq	r4, ip
  402514:	d10a      	bne.n	40252c <__aeabi_ddiv+0x19c>
  402516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40251a:	f47f af34 	bne.w	402386 <__aeabi_dmul+0x24a>
  40251e:	ea95 0f0c 	teq	r5, ip
  402522:	f47f af25 	bne.w	402370 <__aeabi_dmul+0x234>
  402526:	4610      	mov	r0, r2
  402528:	4619      	mov	r1, r3
  40252a:	e72c      	b.n	402386 <__aeabi_dmul+0x24a>
  40252c:	ea95 0f0c 	teq	r5, ip
  402530:	d106      	bne.n	402540 <__aeabi_ddiv+0x1b0>
  402532:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402536:	f43f aefd 	beq.w	402334 <__aeabi_dmul+0x1f8>
  40253a:	4610      	mov	r0, r2
  40253c:	4619      	mov	r1, r3
  40253e:	e722      	b.n	402386 <__aeabi_dmul+0x24a>
  402540:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402544:	bf18      	it	ne
  402546:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40254a:	f47f aec5 	bne.w	4022d8 <__aeabi_dmul+0x19c>
  40254e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402552:	f47f af0d 	bne.w	402370 <__aeabi_dmul+0x234>
  402556:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40255a:	f47f aeeb 	bne.w	402334 <__aeabi_dmul+0x1f8>
  40255e:	e712      	b.n	402386 <__aeabi_dmul+0x24a>

00402560 <__gedf2>:
  402560:	f04f 3cff 	mov.w	ip, #4294967295
  402564:	e006      	b.n	402574 <__cmpdf2+0x4>
  402566:	bf00      	nop

00402568 <__ledf2>:
  402568:	f04f 0c01 	mov.w	ip, #1
  40256c:	e002      	b.n	402574 <__cmpdf2+0x4>
  40256e:	bf00      	nop

00402570 <__cmpdf2>:
  402570:	f04f 0c01 	mov.w	ip, #1
  402574:	f84d cd04 	str.w	ip, [sp, #-4]!
  402578:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40257c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402580:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402584:	bf18      	it	ne
  402586:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40258a:	d01b      	beq.n	4025c4 <__cmpdf2+0x54>
  40258c:	b001      	add	sp, #4
  40258e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  402592:	bf0c      	ite	eq
  402594:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  402598:	ea91 0f03 	teqne	r1, r3
  40259c:	bf02      	ittt	eq
  40259e:	ea90 0f02 	teqeq	r0, r2
  4025a2:	2000      	moveq	r0, #0
  4025a4:	4770      	bxeq	lr
  4025a6:	f110 0f00 	cmn.w	r0, #0
  4025aa:	ea91 0f03 	teq	r1, r3
  4025ae:	bf58      	it	pl
  4025b0:	4299      	cmppl	r1, r3
  4025b2:	bf08      	it	eq
  4025b4:	4290      	cmpeq	r0, r2
  4025b6:	bf2c      	ite	cs
  4025b8:	17d8      	asrcs	r0, r3, #31
  4025ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4025be:	f040 0001 	orr.w	r0, r0, #1
  4025c2:	4770      	bx	lr
  4025c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4025c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4025cc:	d102      	bne.n	4025d4 <__cmpdf2+0x64>
  4025ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4025d2:	d107      	bne.n	4025e4 <__cmpdf2+0x74>
  4025d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4025d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4025dc:	d1d6      	bne.n	40258c <__cmpdf2+0x1c>
  4025de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4025e2:	d0d3      	beq.n	40258c <__cmpdf2+0x1c>
  4025e4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4025e8:	4770      	bx	lr
  4025ea:	bf00      	nop

004025ec <__aeabi_cdrcmple>:
  4025ec:	4684      	mov	ip, r0
  4025ee:	4610      	mov	r0, r2
  4025f0:	4662      	mov	r2, ip
  4025f2:	468c      	mov	ip, r1
  4025f4:	4619      	mov	r1, r3
  4025f6:	4663      	mov	r3, ip
  4025f8:	e000      	b.n	4025fc <__aeabi_cdcmpeq>
  4025fa:	bf00      	nop

004025fc <__aeabi_cdcmpeq>:
  4025fc:	b501      	push	{r0, lr}
  4025fe:	f7ff ffb7 	bl	402570 <__cmpdf2>
  402602:	2800      	cmp	r0, #0
  402604:	bf48      	it	mi
  402606:	f110 0f00 	cmnmi.w	r0, #0
  40260a:	bd01      	pop	{r0, pc}

0040260c <__aeabi_dcmpeq>:
  40260c:	f84d ed08 	str.w	lr, [sp, #-8]!
  402610:	f7ff fff4 	bl	4025fc <__aeabi_cdcmpeq>
  402614:	bf0c      	ite	eq
  402616:	2001      	moveq	r0, #1
  402618:	2000      	movne	r0, #0
  40261a:	f85d fb08 	ldr.w	pc, [sp], #8
  40261e:	bf00      	nop

00402620 <__aeabi_dcmplt>:
  402620:	f84d ed08 	str.w	lr, [sp, #-8]!
  402624:	f7ff ffea 	bl	4025fc <__aeabi_cdcmpeq>
  402628:	bf34      	ite	cc
  40262a:	2001      	movcc	r0, #1
  40262c:	2000      	movcs	r0, #0
  40262e:	f85d fb08 	ldr.w	pc, [sp], #8
  402632:	bf00      	nop

00402634 <__aeabi_dcmple>:
  402634:	f84d ed08 	str.w	lr, [sp, #-8]!
  402638:	f7ff ffe0 	bl	4025fc <__aeabi_cdcmpeq>
  40263c:	bf94      	ite	ls
  40263e:	2001      	movls	r0, #1
  402640:	2000      	movhi	r0, #0
  402642:	f85d fb08 	ldr.w	pc, [sp], #8
  402646:	bf00      	nop

00402648 <__aeabi_dcmpge>:
  402648:	f84d ed08 	str.w	lr, [sp, #-8]!
  40264c:	f7ff ffce 	bl	4025ec <__aeabi_cdrcmple>
  402650:	bf94      	ite	ls
  402652:	2001      	movls	r0, #1
  402654:	2000      	movhi	r0, #0
  402656:	f85d fb08 	ldr.w	pc, [sp], #8
  40265a:	bf00      	nop

0040265c <__aeabi_dcmpgt>:
  40265c:	f84d ed08 	str.w	lr, [sp, #-8]!
  402660:	f7ff ffc4 	bl	4025ec <__aeabi_cdrcmple>
  402664:	bf34      	ite	cc
  402666:	2001      	movcc	r0, #1
  402668:	2000      	movcs	r0, #0
  40266a:	f85d fb08 	ldr.w	pc, [sp], #8
  40266e:	bf00      	nop

00402670 <__aeabi_d2iz>:
  402670:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402674:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  402678:	d215      	bcs.n	4026a6 <__aeabi_d2iz+0x36>
  40267a:	d511      	bpl.n	4026a0 <__aeabi_d2iz+0x30>
  40267c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402680:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  402684:	d912      	bls.n	4026ac <__aeabi_d2iz+0x3c>
  402686:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40268a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40268e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  402692:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402696:	fa23 f002 	lsr.w	r0, r3, r2
  40269a:	bf18      	it	ne
  40269c:	4240      	negne	r0, r0
  40269e:	4770      	bx	lr
  4026a0:	f04f 0000 	mov.w	r0, #0
  4026a4:	4770      	bx	lr
  4026a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4026aa:	d105      	bne.n	4026b8 <__aeabi_d2iz+0x48>
  4026ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4026b0:	bf08      	it	eq
  4026b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4026b6:	4770      	bx	lr
  4026b8:	f04f 0000 	mov.w	r0, #0
  4026bc:	4770      	bx	lr
  4026be:	bf00      	nop

004026c0 <__libc_init_array>:
  4026c0:	b570      	push	{r4, r5, r6, lr}
  4026c2:	4e0d      	ldr	r6, [pc, #52]	; (4026f8 <__libc_init_array+0x38>)
  4026c4:	4c0d      	ldr	r4, [pc, #52]	; (4026fc <__libc_init_array+0x3c>)
  4026c6:	1ba4      	subs	r4, r4, r6
  4026c8:	10a4      	asrs	r4, r4, #2
  4026ca:	2500      	movs	r5, #0
  4026cc:	42a5      	cmp	r5, r4
  4026ce:	d109      	bne.n	4026e4 <__libc_init_array+0x24>
  4026d0:	4e0b      	ldr	r6, [pc, #44]	; (402700 <__libc_init_array+0x40>)
  4026d2:	4c0c      	ldr	r4, [pc, #48]	; (402704 <__libc_init_array+0x44>)
  4026d4:	f002 ffe4 	bl	4056a0 <_init>
  4026d8:	1ba4      	subs	r4, r4, r6
  4026da:	10a4      	asrs	r4, r4, #2
  4026dc:	2500      	movs	r5, #0
  4026de:	42a5      	cmp	r5, r4
  4026e0:	d105      	bne.n	4026ee <__libc_init_array+0x2e>
  4026e2:	bd70      	pop	{r4, r5, r6, pc}
  4026e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4026e8:	4798      	blx	r3
  4026ea:	3501      	adds	r5, #1
  4026ec:	e7ee      	b.n	4026cc <__libc_init_array+0xc>
  4026ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4026f2:	4798      	blx	r3
  4026f4:	3501      	adds	r5, #1
  4026f6:	e7f2      	b.n	4026de <__libc_init_array+0x1e>
  4026f8:	004056ac 	.word	0x004056ac
  4026fc:	004056ac 	.word	0x004056ac
  402700:	004056ac 	.word	0x004056ac
  402704:	004056b0 	.word	0x004056b0

00402708 <memcpy>:
  402708:	b510      	push	{r4, lr}
  40270a:	1e43      	subs	r3, r0, #1
  40270c:	440a      	add	r2, r1
  40270e:	4291      	cmp	r1, r2
  402710:	d100      	bne.n	402714 <memcpy+0xc>
  402712:	bd10      	pop	{r4, pc}
  402714:	f811 4b01 	ldrb.w	r4, [r1], #1
  402718:	f803 4f01 	strb.w	r4, [r3, #1]!
  40271c:	e7f7      	b.n	40270e <memcpy+0x6>

0040271e <memset>:
  40271e:	4402      	add	r2, r0
  402720:	4603      	mov	r3, r0
  402722:	4293      	cmp	r3, r2
  402724:	d100      	bne.n	402728 <memset+0xa>
  402726:	4770      	bx	lr
  402728:	f803 1b01 	strb.w	r1, [r3], #1
  40272c:	e7f9      	b.n	402722 <memset+0x4>

0040272e <__cvt>:
  40272e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402732:	b088      	sub	sp, #32
  402734:	2b00      	cmp	r3, #0
  402736:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402738:	9912      	ldr	r1, [sp, #72]	; 0x48
  40273a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40273c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402740:	461e      	mov	r6, r3
  402742:	f027 0720 	bic.w	r7, r7, #32
  402746:	bfbb      	ittet	lt
  402748:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  40274c:	461e      	movlt	r6, r3
  40274e:	2300      	movge	r3, #0
  402750:	232d      	movlt	r3, #45	; 0x2d
  402752:	2f46      	cmp	r7, #70	; 0x46
  402754:	4614      	mov	r4, r2
  402756:	700b      	strb	r3, [r1, #0]
  402758:	d004      	beq.n	402764 <__cvt+0x36>
  40275a:	2f45      	cmp	r7, #69	; 0x45
  40275c:	d100      	bne.n	402760 <__cvt+0x32>
  40275e:	3501      	adds	r5, #1
  402760:	2302      	movs	r3, #2
  402762:	e000      	b.n	402766 <__cvt+0x38>
  402764:	2303      	movs	r3, #3
  402766:	aa07      	add	r2, sp, #28
  402768:	9204      	str	r2, [sp, #16]
  40276a:	aa06      	add	r2, sp, #24
  40276c:	9203      	str	r2, [sp, #12]
  40276e:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  402772:	4622      	mov	r2, r4
  402774:	4633      	mov	r3, r6
  402776:	f000 fd9b 	bl	4032b0 <_dtoa_r>
  40277a:	2f47      	cmp	r7, #71	; 0x47
  40277c:	4680      	mov	r8, r0
  40277e:	d102      	bne.n	402786 <__cvt+0x58>
  402780:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402782:	07db      	lsls	r3, r3, #31
  402784:	d526      	bpl.n	4027d4 <__cvt+0xa6>
  402786:	2f46      	cmp	r7, #70	; 0x46
  402788:	eb08 0905 	add.w	r9, r8, r5
  40278c:	d111      	bne.n	4027b2 <__cvt+0x84>
  40278e:	f898 3000 	ldrb.w	r3, [r8]
  402792:	2b30      	cmp	r3, #48	; 0x30
  402794:	d10a      	bne.n	4027ac <__cvt+0x7e>
  402796:	2200      	movs	r2, #0
  402798:	2300      	movs	r3, #0
  40279a:	4620      	mov	r0, r4
  40279c:	4631      	mov	r1, r6
  40279e:	f7ff ff35 	bl	40260c <__aeabi_dcmpeq>
  4027a2:	b918      	cbnz	r0, 4027ac <__cvt+0x7e>
  4027a4:	f1c5 0501 	rsb	r5, r5, #1
  4027a8:	f8ca 5000 	str.w	r5, [sl]
  4027ac:	f8da 3000 	ldr.w	r3, [sl]
  4027b0:	4499      	add	r9, r3
  4027b2:	2200      	movs	r2, #0
  4027b4:	2300      	movs	r3, #0
  4027b6:	4620      	mov	r0, r4
  4027b8:	4631      	mov	r1, r6
  4027ba:	f7ff ff27 	bl	40260c <__aeabi_dcmpeq>
  4027be:	b938      	cbnz	r0, 4027d0 <__cvt+0xa2>
  4027c0:	2230      	movs	r2, #48	; 0x30
  4027c2:	9b07      	ldr	r3, [sp, #28]
  4027c4:	4599      	cmp	r9, r3
  4027c6:	d905      	bls.n	4027d4 <__cvt+0xa6>
  4027c8:	1c59      	adds	r1, r3, #1
  4027ca:	9107      	str	r1, [sp, #28]
  4027cc:	701a      	strb	r2, [r3, #0]
  4027ce:	e7f8      	b.n	4027c2 <__cvt+0x94>
  4027d0:	f8cd 901c 	str.w	r9, [sp, #28]
  4027d4:	9b07      	ldr	r3, [sp, #28]
  4027d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4027d8:	eba3 0308 	sub.w	r3, r3, r8
  4027dc:	4640      	mov	r0, r8
  4027de:	6013      	str	r3, [r2, #0]
  4027e0:	b008      	add	sp, #32
  4027e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004027e6 <__exponent>:
  4027e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  4027e8:	4603      	mov	r3, r0
  4027ea:	2900      	cmp	r1, #0
  4027ec:	bfb8      	it	lt
  4027ee:	4249      	neglt	r1, r1
  4027f0:	f803 2b02 	strb.w	r2, [r3], #2
  4027f4:	bfb4      	ite	lt
  4027f6:	222d      	movlt	r2, #45	; 0x2d
  4027f8:	222b      	movge	r2, #43	; 0x2b
  4027fa:	2909      	cmp	r1, #9
  4027fc:	7042      	strb	r2, [r0, #1]
  4027fe:	dd20      	ble.n	402842 <__exponent+0x5c>
  402800:	f10d 0207 	add.w	r2, sp, #7
  402804:	4617      	mov	r7, r2
  402806:	260a      	movs	r6, #10
  402808:	fb91 f5f6 	sdiv	r5, r1, r6
  40280c:	fb06 1115 	mls	r1, r6, r5, r1
  402810:	3130      	adds	r1, #48	; 0x30
  402812:	2d09      	cmp	r5, #9
  402814:	f802 1c01 	strb.w	r1, [r2, #-1]
  402818:	f102 34ff 	add.w	r4, r2, #4294967295
  40281c:	4629      	mov	r1, r5
  40281e:	dc09      	bgt.n	402834 <__exponent+0x4e>
  402820:	3130      	adds	r1, #48	; 0x30
  402822:	3a02      	subs	r2, #2
  402824:	f804 1c01 	strb.w	r1, [r4, #-1]
  402828:	42ba      	cmp	r2, r7
  40282a:	461c      	mov	r4, r3
  40282c:	d304      	bcc.n	402838 <__exponent+0x52>
  40282e:	1a20      	subs	r0, r4, r0
  402830:	b003      	add	sp, #12
  402832:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402834:	4622      	mov	r2, r4
  402836:	e7e7      	b.n	402808 <__exponent+0x22>
  402838:	f812 1b01 	ldrb.w	r1, [r2], #1
  40283c:	f803 1b01 	strb.w	r1, [r3], #1
  402840:	e7f2      	b.n	402828 <__exponent+0x42>
  402842:	2230      	movs	r2, #48	; 0x30
  402844:	461c      	mov	r4, r3
  402846:	4411      	add	r1, r2
  402848:	f804 2b02 	strb.w	r2, [r4], #2
  40284c:	7059      	strb	r1, [r3, #1]
  40284e:	e7ee      	b.n	40282e <__exponent+0x48>

00402850 <_printf_float>:
  402850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402854:	b091      	sub	sp, #68	; 0x44
  402856:	460c      	mov	r4, r1
  402858:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  40285a:	4693      	mov	fp, r2
  40285c:	461e      	mov	r6, r3
  40285e:	4605      	mov	r5, r0
  402860:	f001 fc74 	bl	40414c <_localeconv_r>
  402864:	6803      	ldr	r3, [r0, #0]
  402866:	9309      	str	r3, [sp, #36]	; 0x24
  402868:	4618      	mov	r0, r3
  40286a:	f000 fc8d 	bl	403188 <strlen>
  40286e:	2300      	movs	r3, #0
  402870:	930e      	str	r3, [sp, #56]	; 0x38
  402872:	683b      	ldr	r3, [r7, #0]
  402874:	900a      	str	r0, [sp, #40]	; 0x28
  402876:	3307      	adds	r3, #7
  402878:	f023 0307 	bic.w	r3, r3, #7
  40287c:	f103 0208 	add.w	r2, r3, #8
  402880:	f894 8018 	ldrb.w	r8, [r4, #24]
  402884:	f8d4 a000 	ldr.w	sl, [r4]
  402888:	603a      	str	r2, [r7, #0]
  40288a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40288e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402892:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  402896:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  402898:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  40289c:	930b      	str	r3, [sp, #44]	; 0x2c
  40289e:	f04f 32ff 	mov.w	r2, #4294967295
  4028a2:	4ba6      	ldr	r3, [pc, #664]	; (402b3c <_printf_float+0x2ec>)
  4028a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4028a6:	4638      	mov	r0, r7
  4028a8:	f002 fb80 	bl	404fac <__aeabi_dcmpun>
  4028ac:	2800      	cmp	r0, #0
  4028ae:	f040 81f7 	bne.w	402ca0 <_printf_float+0x450>
  4028b2:	f04f 32ff 	mov.w	r2, #4294967295
  4028b6:	4ba1      	ldr	r3, [pc, #644]	; (402b3c <_printf_float+0x2ec>)
  4028b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4028ba:	4638      	mov	r0, r7
  4028bc:	f7ff feba 	bl	402634 <__aeabi_dcmple>
  4028c0:	2800      	cmp	r0, #0
  4028c2:	f040 81ed 	bne.w	402ca0 <_printf_float+0x450>
  4028c6:	2200      	movs	r2, #0
  4028c8:	2300      	movs	r3, #0
  4028ca:	4638      	mov	r0, r7
  4028cc:	4649      	mov	r1, r9
  4028ce:	f7ff fea7 	bl	402620 <__aeabi_dcmplt>
  4028d2:	b110      	cbz	r0, 4028da <_printf_float+0x8a>
  4028d4:	232d      	movs	r3, #45	; 0x2d
  4028d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4028da:	4b99      	ldr	r3, [pc, #612]	; (402b40 <_printf_float+0x2f0>)
  4028dc:	4f99      	ldr	r7, [pc, #612]	; (402b44 <_printf_float+0x2f4>)
  4028de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4028e2:	bf98      	it	ls
  4028e4:	461f      	movls	r7, r3
  4028e6:	2303      	movs	r3, #3
  4028e8:	6123      	str	r3, [r4, #16]
  4028ea:	f02a 0304 	bic.w	r3, sl, #4
  4028ee:	6023      	str	r3, [r4, #0]
  4028f0:	f04f 0900 	mov.w	r9, #0
  4028f4:	9600      	str	r6, [sp, #0]
  4028f6:	465b      	mov	r3, fp
  4028f8:	aa0f      	add	r2, sp, #60	; 0x3c
  4028fa:	4621      	mov	r1, r4
  4028fc:	4628      	mov	r0, r5
  4028fe:	f000 f9df 	bl	402cc0 <_printf_common>
  402902:	3001      	adds	r0, #1
  402904:	f040 809a 	bne.w	402a3c <_printf_float+0x1ec>
  402908:	f04f 30ff 	mov.w	r0, #4294967295
  40290c:	b011      	add	sp, #68	; 0x44
  40290e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402912:	6862      	ldr	r2, [r4, #4]
  402914:	1c53      	adds	r3, r2, #1
  402916:	a80e      	add	r0, sp, #56	; 0x38
  402918:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  40291c:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  402920:	d141      	bne.n	4029a6 <_printf_float+0x156>
  402922:	2206      	movs	r2, #6
  402924:	6062      	str	r2, [r4, #4]
  402926:	6023      	str	r3, [r4, #0]
  402928:	2100      	movs	r1, #0
  40292a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  40292e:	9301      	str	r3, [sp, #4]
  402930:	6863      	ldr	r3, [r4, #4]
  402932:	9005      	str	r0, [sp, #20]
  402934:	9202      	str	r2, [sp, #8]
  402936:	9300      	str	r3, [sp, #0]
  402938:	463a      	mov	r2, r7
  40293a:	464b      	mov	r3, r9
  40293c:	9106      	str	r1, [sp, #24]
  40293e:	f8cd 8010 	str.w	r8, [sp, #16]
  402942:	f8cd e00c 	str.w	lr, [sp, #12]
  402946:	4628      	mov	r0, r5
  402948:	f7ff fef1 	bl	40272e <__cvt>
  40294c:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  402950:	2b47      	cmp	r3, #71	; 0x47
  402952:	4607      	mov	r7, r0
  402954:	d109      	bne.n	40296a <_printf_float+0x11a>
  402956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402958:	1cd8      	adds	r0, r3, #3
  40295a:	db02      	blt.n	402962 <_printf_float+0x112>
  40295c:	6862      	ldr	r2, [r4, #4]
  40295e:	4293      	cmp	r3, r2
  402960:	dd59      	ble.n	402a16 <_printf_float+0x1c6>
  402962:	f1a8 0802 	sub.w	r8, r8, #2
  402966:	fa5f f888 	uxtb.w	r8, r8
  40296a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40296e:	990d      	ldr	r1, [sp, #52]	; 0x34
  402970:	d836      	bhi.n	4029e0 <_printf_float+0x190>
  402972:	3901      	subs	r1, #1
  402974:	4642      	mov	r2, r8
  402976:	f104 0050 	add.w	r0, r4, #80	; 0x50
  40297a:	910d      	str	r1, [sp, #52]	; 0x34
  40297c:	f7ff ff33 	bl	4027e6 <__exponent>
  402980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402982:	1883      	adds	r3, r0, r2
  402984:	2a01      	cmp	r2, #1
  402986:	4681      	mov	r9, r0
  402988:	6123      	str	r3, [r4, #16]
  40298a:	dc02      	bgt.n	402992 <_printf_float+0x142>
  40298c:	6822      	ldr	r2, [r4, #0]
  40298e:	07d1      	lsls	r1, r2, #31
  402990:	d501      	bpl.n	402996 <_printf_float+0x146>
  402992:	3301      	adds	r3, #1
  402994:	6123      	str	r3, [r4, #16]
  402996:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  40299a:	2b00      	cmp	r3, #0
  40299c:	d0aa      	beq.n	4028f4 <_printf_float+0xa4>
  40299e:	232d      	movs	r3, #45	; 0x2d
  4029a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4029a4:	e7a6      	b.n	4028f4 <_printf_float+0xa4>
  4029a6:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  4029aa:	d002      	beq.n	4029b2 <_printf_float+0x162>
  4029ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4029b0:	d1b9      	bne.n	402926 <_printf_float+0xd6>
  4029b2:	b19a      	cbz	r2, 4029dc <_printf_float+0x18c>
  4029b4:	2100      	movs	r1, #0
  4029b6:	9106      	str	r1, [sp, #24]
  4029b8:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  4029bc:	e88d 000c 	stmia.w	sp, {r2, r3}
  4029c0:	6023      	str	r3, [r4, #0]
  4029c2:	9005      	str	r0, [sp, #20]
  4029c4:	463a      	mov	r2, r7
  4029c6:	f8cd 8010 	str.w	r8, [sp, #16]
  4029ca:	f8cd e00c 	str.w	lr, [sp, #12]
  4029ce:	9102      	str	r1, [sp, #8]
  4029d0:	464b      	mov	r3, r9
  4029d2:	4628      	mov	r0, r5
  4029d4:	f7ff feab 	bl	40272e <__cvt>
  4029d8:	4607      	mov	r7, r0
  4029da:	e7bc      	b.n	402956 <_printf_float+0x106>
  4029dc:	2201      	movs	r2, #1
  4029de:	e7a1      	b.n	402924 <_printf_float+0xd4>
  4029e0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  4029e4:	d119      	bne.n	402a1a <_printf_float+0x1ca>
  4029e6:	2900      	cmp	r1, #0
  4029e8:	6863      	ldr	r3, [r4, #4]
  4029ea:	dd0c      	ble.n	402a06 <_printf_float+0x1b6>
  4029ec:	6121      	str	r1, [r4, #16]
  4029ee:	b913      	cbnz	r3, 4029f6 <_printf_float+0x1a6>
  4029f0:	6822      	ldr	r2, [r4, #0]
  4029f2:	07d2      	lsls	r2, r2, #31
  4029f4:	d502      	bpl.n	4029fc <_printf_float+0x1ac>
  4029f6:	3301      	adds	r3, #1
  4029f8:	440b      	add	r3, r1
  4029fa:	6123      	str	r3, [r4, #16]
  4029fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4029fe:	65a3      	str	r3, [r4, #88]	; 0x58
  402a00:	f04f 0900 	mov.w	r9, #0
  402a04:	e7c7      	b.n	402996 <_printf_float+0x146>
  402a06:	b913      	cbnz	r3, 402a0e <_printf_float+0x1be>
  402a08:	6822      	ldr	r2, [r4, #0]
  402a0a:	07d0      	lsls	r0, r2, #31
  402a0c:	d501      	bpl.n	402a12 <_printf_float+0x1c2>
  402a0e:	3302      	adds	r3, #2
  402a10:	e7f3      	b.n	4029fa <_printf_float+0x1aa>
  402a12:	2301      	movs	r3, #1
  402a14:	e7f1      	b.n	4029fa <_printf_float+0x1aa>
  402a16:	f04f 0867 	mov.w	r8, #103	; 0x67
  402a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402a1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402a1e:	4293      	cmp	r3, r2
  402a20:	db05      	blt.n	402a2e <_printf_float+0x1de>
  402a22:	6822      	ldr	r2, [r4, #0]
  402a24:	6123      	str	r3, [r4, #16]
  402a26:	07d1      	lsls	r1, r2, #31
  402a28:	d5e8      	bpl.n	4029fc <_printf_float+0x1ac>
  402a2a:	3301      	adds	r3, #1
  402a2c:	e7e5      	b.n	4029fa <_printf_float+0x1aa>
  402a2e:	2b00      	cmp	r3, #0
  402a30:	bfd4      	ite	le
  402a32:	f1c3 0302 	rsble	r3, r3, #2
  402a36:	2301      	movgt	r3, #1
  402a38:	4413      	add	r3, r2
  402a3a:	e7de      	b.n	4029fa <_printf_float+0x1aa>
  402a3c:	6823      	ldr	r3, [r4, #0]
  402a3e:	055a      	lsls	r2, r3, #21
  402a40:	d407      	bmi.n	402a52 <_printf_float+0x202>
  402a42:	6923      	ldr	r3, [r4, #16]
  402a44:	463a      	mov	r2, r7
  402a46:	4659      	mov	r1, fp
  402a48:	4628      	mov	r0, r5
  402a4a:	47b0      	blx	r6
  402a4c:	3001      	adds	r0, #1
  402a4e:	d12a      	bne.n	402aa6 <_printf_float+0x256>
  402a50:	e75a      	b.n	402908 <_printf_float+0xb8>
  402a52:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  402a56:	f240 80dc 	bls.w	402c12 <_printf_float+0x3c2>
  402a5a:	2200      	movs	r2, #0
  402a5c:	2300      	movs	r3, #0
  402a5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402a62:	f7ff fdd3 	bl	40260c <__aeabi_dcmpeq>
  402a66:	2800      	cmp	r0, #0
  402a68:	d039      	beq.n	402ade <_printf_float+0x28e>
  402a6a:	2301      	movs	r3, #1
  402a6c:	4a36      	ldr	r2, [pc, #216]	; (402b48 <_printf_float+0x2f8>)
  402a6e:	4659      	mov	r1, fp
  402a70:	4628      	mov	r0, r5
  402a72:	47b0      	blx	r6
  402a74:	3001      	adds	r0, #1
  402a76:	f43f af47 	beq.w	402908 <_printf_float+0xb8>
  402a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402a7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402a7e:	429a      	cmp	r2, r3
  402a80:	db02      	blt.n	402a88 <_printf_float+0x238>
  402a82:	6823      	ldr	r3, [r4, #0]
  402a84:	07d8      	lsls	r0, r3, #31
  402a86:	d50e      	bpl.n	402aa6 <_printf_float+0x256>
  402a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402a8c:	4659      	mov	r1, fp
  402a8e:	4628      	mov	r0, r5
  402a90:	47b0      	blx	r6
  402a92:	3001      	adds	r0, #1
  402a94:	f43f af38 	beq.w	402908 <_printf_float+0xb8>
  402a98:	2700      	movs	r7, #0
  402a9a:	f104 081a 	add.w	r8, r4, #26
  402a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402aa0:	3b01      	subs	r3, #1
  402aa2:	429f      	cmp	r7, r3
  402aa4:	db11      	blt.n	402aca <_printf_float+0x27a>
  402aa6:	6823      	ldr	r3, [r4, #0]
  402aa8:	079f      	lsls	r7, r3, #30
  402aaa:	d508      	bpl.n	402abe <_printf_float+0x26e>
  402aac:	2700      	movs	r7, #0
  402aae:	f104 0819 	add.w	r8, r4, #25
  402ab2:	68e3      	ldr	r3, [r4, #12]
  402ab4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402ab6:	1a9b      	subs	r3, r3, r2
  402ab8:	429f      	cmp	r7, r3
  402aba:	f2c0 80e7 	blt.w	402c8c <_printf_float+0x43c>
  402abe:	68e0      	ldr	r0, [r4, #12]
  402ac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402ac2:	4298      	cmp	r0, r3
  402ac4:	bfb8      	it	lt
  402ac6:	4618      	movlt	r0, r3
  402ac8:	e720      	b.n	40290c <_printf_float+0xbc>
  402aca:	2301      	movs	r3, #1
  402acc:	4642      	mov	r2, r8
  402ace:	4659      	mov	r1, fp
  402ad0:	4628      	mov	r0, r5
  402ad2:	47b0      	blx	r6
  402ad4:	3001      	adds	r0, #1
  402ad6:	f43f af17 	beq.w	402908 <_printf_float+0xb8>
  402ada:	3701      	adds	r7, #1
  402adc:	e7df      	b.n	402a9e <_printf_float+0x24e>
  402ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402ae0:	2b00      	cmp	r3, #0
  402ae2:	dc33      	bgt.n	402b4c <_printf_float+0x2fc>
  402ae4:	2301      	movs	r3, #1
  402ae6:	4a18      	ldr	r2, [pc, #96]	; (402b48 <_printf_float+0x2f8>)
  402ae8:	4659      	mov	r1, fp
  402aea:	4628      	mov	r0, r5
  402aec:	47b0      	blx	r6
  402aee:	3001      	adds	r0, #1
  402af0:	f43f af0a 	beq.w	402908 <_printf_float+0xb8>
  402af4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402af6:	b923      	cbnz	r3, 402b02 <_printf_float+0x2b2>
  402af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402afa:	b913      	cbnz	r3, 402b02 <_printf_float+0x2b2>
  402afc:	6823      	ldr	r3, [r4, #0]
  402afe:	07d9      	lsls	r1, r3, #31
  402b00:	d5d1      	bpl.n	402aa6 <_printf_float+0x256>
  402b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402b06:	4659      	mov	r1, fp
  402b08:	4628      	mov	r0, r5
  402b0a:	47b0      	blx	r6
  402b0c:	3001      	adds	r0, #1
  402b0e:	f43f aefb 	beq.w	402908 <_printf_float+0xb8>
  402b12:	f04f 0800 	mov.w	r8, #0
  402b16:	f104 091a 	add.w	r9, r4, #26
  402b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402b1c:	425b      	negs	r3, r3
  402b1e:	4598      	cmp	r8, r3
  402b20:	db01      	blt.n	402b26 <_printf_float+0x2d6>
  402b22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402b24:	e78e      	b.n	402a44 <_printf_float+0x1f4>
  402b26:	2301      	movs	r3, #1
  402b28:	464a      	mov	r2, r9
  402b2a:	4659      	mov	r1, fp
  402b2c:	4628      	mov	r0, r5
  402b2e:	47b0      	blx	r6
  402b30:	3001      	adds	r0, #1
  402b32:	f43f aee9 	beq.w	402908 <_printf_float+0xb8>
  402b36:	f108 0801 	add.w	r8, r8, #1
  402b3a:	e7ee      	b.n	402b1a <_printf_float+0x2ca>
  402b3c:	7fefffff 	.word	0x7fefffff
  402b40:	004053e0 	.word	0x004053e0
  402b44:	004053e4 	.word	0x004053e4
  402b48:	004053f0 	.word	0x004053f0
  402b4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402b4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
  402b50:	429a      	cmp	r2, r3
  402b52:	bfa8      	it	ge
  402b54:	461a      	movge	r2, r3
  402b56:	2a00      	cmp	r2, #0
  402b58:	4690      	mov	r8, r2
  402b5a:	dc36      	bgt.n	402bca <_printf_float+0x37a>
  402b5c:	f104 031a 	add.w	r3, r4, #26
  402b60:	f04f 0a00 	mov.w	sl, #0
  402b64:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  402b68:	930b      	str	r3, [sp, #44]	; 0x2c
  402b6a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  402b6e:	eba9 0308 	sub.w	r3, r9, r8
  402b72:	459a      	cmp	sl, r3
  402b74:	db31      	blt.n	402bda <_printf_float+0x38a>
  402b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402b78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402b7a:	429a      	cmp	r2, r3
  402b7c:	db38      	blt.n	402bf0 <_printf_float+0x3a0>
  402b7e:	6823      	ldr	r3, [r4, #0]
  402b80:	07da      	lsls	r2, r3, #31
  402b82:	d435      	bmi.n	402bf0 <_printf_float+0x3a0>
  402b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402b86:	990d      	ldr	r1, [sp, #52]	; 0x34
  402b88:	eba3 0209 	sub.w	r2, r3, r9
  402b8c:	eba3 0801 	sub.w	r8, r3, r1
  402b90:	4590      	cmp	r8, r2
  402b92:	bfa8      	it	ge
  402b94:	4690      	movge	r8, r2
  402b96:	f1b8 0f00 	cmp.w	r8, #0
  402b9a:	dc31      	bgt.n	402c00 <_printf_float+0x3b0>
  402b9c:	2700      	movs	r7, #0
  402b9e:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  402ba2:	f104 091a 	add.w	r9, r4, #26
  402ba6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402baa:	1a9b      	subs	r3, r3, r2
  402bac:	eba3 0308 	sub.w	r3, r3, r8
  402bb0:	429f      	cmp	r7, r3
  402bb2:	f6bf af78 	bge.w	402aa6 <_printf_float+0x256>
  402bb6:	2301      	movs	r3, #1
  402bb8:	464a      	mov	r2, r9
  402bba:	4659      	mov	r1, fp
  402bbc:	4628      	mov	r0, r5
  402bbe:	47b0      	blx	r6
  402bc0:	3001      	adds	r0, #1
  402bc2:	f43f aea1 	beq.w	402908 <_printf_float+0xb8>
  402bc6:	3701      	adds	r7, #1
  402bc8:	e7ed      	b.n	402ba6 <_printf_float+0x356>
  402bca:	4613      	mov	r3, r2
  402bcc:	4659      	mov	r1, fp
  402bce:	463a      	mov	r2, r7
  402bd0:	4628      	mov	r0, r5
  402bd2:	47b0      	blx	r6
  402bd4:	3001      	adds	r0, #1
  402bd6:	d1c1      	bne.n	402b5c <_printf_float+0x30c>
  402bd8:	e696      	b.n	402908 <_printf_float+0xb8>
  402bda:	2301      	movs	r3, #1
  402bdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402bde:	4659      	mov	r1, fp
  402be0:	4628      	mov	r0, r5
  402be2:	47b0      	blx	r6
  402be4:	3001      	adds	r0, #1
  402be6:	f43f ae8f 	beq.w	402908 <_printf_float+0xb8>
  402bea:	f10a 0a01 	add.w	sl, sl, #1
  402bee:	e7bc      	b.n	402b6a <_printf_float+0x31a>
  402bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402bf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402bf4:	4659      	mov	r1, fp
  402bf6:	4628      	mov	r0, r5
  402bf8:	47b0      	blx	r6
  402bfa:	3001      	adds	r0, #1
  402bfc:	d1c2      	bne.n	402b84 <_printf_float+0x334>
  402bfe:	e683      	b.n	402908 <_printf_float+0xb8>
  402c00:	4643      	mov	r3, r8
  402c02:	eb07 0209 	add.w	r2, r7, r9
  402c06:	4659      	mov	r1, fp
  402c08:	4628      	mov	r0, r5
  402c0a:	47b0      	blx	r6
  402c0c:	3001      	adds	r0, #1
  402c0e:	d1c5      	bne.n	402b9c <_printf_float+0x34c>
  402c10:	e67a      	b.n	402908 <_printf_float+0xb8>
  402c12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402c14:	2a01      	cmp	r2, #1
  402c16:	dc01      	bgt.n	402c1c <_printf_float+0x3cc>
  402c18:	07db      	lsls	r3, r3, #31
  402c1a:	d534      	bpl.n	402c86 <_printf_float+0x436>
  402c1c:	2301      	movs	r3, #1
  402c1e:	463a      	mov	r2, r7
  402c20:	4659      	mov	r1, fp
  402c22:	4628      	mov	r0, r5
  402c24:	47b0      	blx	r6
  402c26:	3001      	adds	r0, #1
  402c28:	f43f ae6e 	beq.w	402908 <_printf_float+0xb8>
  402c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402c30:	4659      	mov	r1, fp
  402c32:	4628      	mov	r0, r5
  402c34:	47b0      	blx	r6
  402c36:	3001      	adds	r0, #1
  402c38:	f43f ae66 	beq.w	402908 <_printf_float+0xb8>
  402c3c:	2200      	movs	r2, #0
  402c3e:	2300      	movs	r3, #0
  402c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402c44:	f7ff fce2 	bl	40260c <__aeabi_dcmpeq>
  402c48:	b150      	cbz	r0, 402c60 <_printf_float+0x410>
  402c4a:	2700      	movs	r7, #0
  402c4c:	f104 081a 	add.w	r8, r4, #26
  402c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402c52:	3b01      	subs	r3, #1
  402c54:	429f      	cmp	r7, r3
  402c56:	db0c      	blt.n	402c72 <_printf_float+0x422>
  402c58:	464b      	mov	r3, r9
  402c5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
  402c5e:	e6f2      	b.n	402a46 <_printf_float+0x1f6>
  402c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402c62:	1c7a      	adds	r2, r7, #1
  402c64:	3b01      	subs	r3, #1
  402c66:	4659      	mov	r1, fp
  402c68:	4628      	mov	r0, r5
  402c6a:	47b0      	blx	r6
  402c6c:	3001      	adds	r0, #1
  402c6e:	d1f3      	bne.n	402c58 <_printf_float+0x408>
  402c70:	e64a      	b.n	402908 <_printf_float+0xb8>
  402c72:	2301      	movs	r3, #1
  402c74:	4642      	mov	r2, r8
  402c76:	4659      	mov	r1, fp
  402c78:	4628      	mov	r0, r5
  402c7a:	47b0      	blx	r6
  402c7c:	3001      	adds	r0, #1
  402c7e:	f43f ae43 	beq.w	402908 <_printf_float+0xb8>
  402c82:	3701      	adds	r7, #1
  402c84:	e7e4      	b.n	402c50 <_printf_float+0x400>
  402c86:	2301      	movs	r3, #1
  402c88:	463a      	mov	r2, r7
  402c8a:	e7ec      	b.n	402c66 <_printf_float+0x416>
  402c8c:	2301      	movs	r3, #1
  402c8e:	4642      	mov	r2, r8
  402c90:	4659      	mov	r1, fp
  402c92:	4628      	mov	r0, r5
  402c94:	47b0      	blx	r6
  402c96:	3001      	adds	r0, #1
  402c98:	f43f ae36 	beq.w	402908 <_printf_float+0xb8>
  402c9c:	3701      	adds	r7, #1
  402c9e:	e708      	b.n	402ab2 <_printf_float+0x262>
  402ca0:	463a      	mov	r2, r7
  402ca2:	464b      	mov	r3, r9
  402ca4:	4638      	mov	r0, r7
  402ca6:	4649      	mov	r1, r9
  402ca8:	f002 f980 	bl	404fac <__aeabi_dcmpun>
  402cac:	2800      	cmp	r0, #0
  402cae:	f43f ae30 	beq.w	402912 <_printf_float+0xc2>
  402cb2:	4b01      	ldr	r3, [pc, #4]	; (402cb8 <_printf_float+0x468>)
  402cb4:	4f01      	ldr	r7, [pc, #4]	; (402cbc <_printf_float+0x46c>)
  402cb6:	e612      	b.n	4028de <_printf_float+0x8e>
  402cb8:	004053e8 	.word	0x004053e8
  402cbc:	004053ec 	.word	0x004053ec

00402cc0 <_printf_common>:
  402cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402cc4:	4691      	mov	r9, r2
  402cc6:	461f      	mov	r7, r3
  402cc8:	688a      	ldr	r2, [r1, #8]
  402cca:	690b      	ldr	r3, [r1, #16]
  402ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  402cd0:	4293      	cmp	r3, r2
  402cd2:	bfb8      	it	lt
  402cd4:	4613      	movlt	r3, r2
  402cd6:	f8c9 3000 	str.w	r3, [r9]
  402cda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  402cde:	4606      	mov	r6, r0
  402ce0:	460c      	mov	r4, r1
  402ce2:	b112      	cbz	r2, 402cea <_printf_common+0x2a>
  402ce4:	3301      	adds	r3, #1
  402ce6:	f8c9 3000 	str.w	r3, [r9]
  402cea:	6823      	ldr	r3, [r4, #0]
  402cec:	0699      	lsls	r1, r3, #26
  402cee:	bf42      	ittt	mi
  402cf0:	f8d9 3000 	ldrmi.w	r3, [r9]
  402cf4:	3302      	addmi	r3, #2
  402cf6:	f8c9 3000 	strmi.w	r3, [r9]
  402cfa:	6825      	ldr	r5, [r4, #0]
  402cfc:	f015 0506 	ands.w	r5, r5, #6
  402d00:	d107      	bne.n	402d12 <_printf_common+0x52>
  402d02:	f104 0a19 	add.w	sl, r4, #25
  402d06:	68e3      	ldr	r3, [r4, #12]
  402d08:	f8d9 2000 	ldr.w	r2, [r9]
  402d0c:	1a9b      	subs	r3, r3, r2
  402d0e:	429d      	cmp	r5, r3
  402d10:	db29      	blt.n	402d66 <_printf_common+0xa6>
  402d12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  402d16:	6822      	ldr	r2, [r4, #0]
  402d18:	3300      	adds	r3, #0
  402d1a:	bf18      	it	ne
  402d1c:	2301      	movne	r3, #1
  402d1e:	0692      	lsls	r2, r2, #26
  402d20:	d42e      	bmi.n	402d80 <_printf_common+0xc0>
  402d22:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402d26:	4639      	mov	r1, r7
  402d28:	4630      	mov	r0, r6
  402d2a:	47c0      	blx	r8
  402d2c:	3001      	adds	r0, #1
  402d2e:	d021      	beq.n	402d74 <_printf_common+0xb4>
  402d30:	6823      	ldr	r3, [r4, #0]
  402d32:	68e5      	ldr	r5, [r4, #12]
  402d34:	f8d9 2000 	ldr.w	r2, [r9]
  402d38:	f003 0306 	and.w	r3, r3, #6
  402d3c:	2b04      	cmp	r3, #4
  402d3e:	bf08      	it	eq
  402d40:	1aad      	subeq	r5, r5, r2
  402d42:	68a3      	ldr	r3, [r4, #8]
  402d44:	6922      	ldr	r2, [r4, #16]
  402d46:	bf0c      	ite	eq
  402d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  402d4c:	2500      	movne	r5, #0
  402d4e:	4293      	cmp	r3, r2
  402d50:	bfc4      	itt	gt
  402d52:	1a9b      	subgt	r3, r3, r2
  402d54:	18ed      	addgt	r5, r5, r3
  402d56:	f04f 0900 	mov.w	r9, #0
  402d5a:	341a      	adds	r4, #26
  402d5c:	454d      	cmp	r5, r9
  402d5e:	d11b      	bne.n	402d98 <_printf_common+0xd8>
  402d60:	2000      	movs	r0, #0
  402d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d66:	2301      	movs	r3, #1
  402d68:	4652      	mov	r2, sl
  402d6a:	4639      	mov	r1, r7
  402d6c:	4630      	mov	r0, r6
  402d6e:	47c0      	blx	r8
  402d70:	3001      	adds	r0, #1
  402d72:	d103      	bne.n	402d7c <_printf_common+0xbc>
  402d74:	f04f 30ff 	mov.w	r0, #4294967295
  402d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d7c:	3501      	adds	r5, #1
  402d7e:	e7c2      	b.n	402d06 <_printf_common+0x46>
  402d80:	18e1      	adds	r1, r4, r3
  402d82:	1c5a      	adds	r2, r3, #1
  402d84:	2030      	movs	r0, #48	; 0x30
  402d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  402d8a:	4422      	add	r2, r4
  402d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  402d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  402d94:	3302      	adds	r3, #2
  402d96:	e7c4      	b.n	402d22 <_printf_common+0x62>
  402d98:	2301      	movs	r3, #1
  402d9a:	4622      	mov	r2, r4
  402d9c:	4639      	mov	r1, r7
  402d9e:	4630      	mov	r0, r6
  402da0:	47c0      	blx	r8
  402da2:	3001      	adds	r0, #1
  402da4:	d0e6      	beq.n	402d74 <_printf_common+0xb4>
  402da6:	f109 0901 	add.w	r9, r9, #1
  402daa:	e7d7      	b.n	402d5c <_printf_common+0x9c>

00402dac <_printf_i>:
  402dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402db0:	4617      	mov	r7, r2
  402db2:	7e0a      	ldrb	r2, [r1, #24]
  402db4:	b085      	sub	sp, #20
  402db6:	2a6e      	cmp	r2, #110	; 0x6e
  402db8:	4698      	mov	r8, r3
  402dba:	4606      	mov	r6, r0
  402dbc:	460c      	mov	r4, r1
  402dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402dc0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  402dc4:	f000 80bc 	beq.w	402f40 <_printf_i+0x194>
  402dc8:	d81a      	bhi.n	402e00 <_printf_i+0x54>
  402dca:	2a63      	cmp	r2, #99	; 0x63
  402dcc:	d02e      	beq.n	402e2c <_printf_i+0x80>
  402dce:	d80a      	bhi.n	402de6 <_printf_i+0x3a>
  402dd0:	2a00      	cmp	r2, #0
  402dd2:	f000 80c8 	beq.w	402f66 <_printf_i+0x1ba>
  402dd6:	2a58      	cmp	r2, #88	; 0x58
  402dd8:	f000 808a 	beq.w	402ef0 <_printf_i+0x144>
  402ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402de0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  402de4:	e02a      	b.n	402e3c <_printf_i+0x90>
  402de6:	2a64      	cmp	r2, #100	; 0x64
  402de8:	d001      	beq.n	402dee <_printf_i+0x42>
  402dea:	2a69      	cmp	r2, #105	; 0x69
  402dec:	d1f6      	bne.n	402ddc <_printf_i+0x30>
  402dee:	6821      	ldr	r1, [r4, #0]
  402df0:	681a      	ldr	r2, [r3, #0]
  402df2:	f011 0f80 	tst.w	r1, #128	; 0x80
  402df6:	d023      	beq.n	402e40 <_printf_i+0x94>
  402df8:	1d11      	adds	r1, r2, #4
  402dfa:	6019      	str	r1, [r3, #0]
  402dfc:	6813      	ldr	r3, [r2, #0]
  402dfe:	e027      	b.n	402e50 <_printf_i+0xa4>
  402e00:	2a73      	cmp	r2, #115	; 0x73
  402e02:	f000 80b4 	beq.w	402f6e <_printf_i+0x1c2>
  402e06:	d808      	bhi.n	402e1a <_printf_i+0x6e>
  402e08:	2a6f      	cmp	r2, #111	; 0x6f
  402e0a:	d02a      	beq.n	402e62 <_printf_i+0xb6>
  402e0c:	2a70      	cmp	r2, #112	; 0x70
  402e0e:	d1e5      	bne.n	402ddc <_printf_i+0x30>
  402e10:	680a      	ldr	r2, [r1, #0]
  402e12:	f042 0220 	orr.w	r2, r2, #32
  402e16:	600a      	str	r2, [r1, #0]
  402e18:	e003      	b.n	402e22 <_printf_i+0x76>
  402e1a:	2a75      	cmp	r2, #117	; 0x75
  402e1c:	d021      	beq.n	402e62 <_printf_i+0xb6>
  402e1e:	2a78      	cmp	r2, #120	; 0x78
  402e20:	d1dc      	bne.n	402ddc <_printf_i+0x30>
  402e22:	2278      	movs	r2, #120	; 0x78
  402e24:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  402e28:	496e      	ldr	r1, [pc, #440]	; (402fe4 <_printf_i+0x238>)
  402e2a:	e064      	b.n	402ef6 <_printf_i+0x14a>
  402e2c:	681a      	ldr	r2, [r3, #0]
  402e2e:	f101 0542 	add.w	r5, r1, #66	; 0x42
  402e32:	1d11      	adds	r1, r2, #4
  402e34:	6019      	str	r1, [r3, #0]
  402e36:	6813      	ldr	r3, [r2, #0]
  402e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402e3c:	2301      	movs	r3, #1
  402e3e:	e0a3      	b.n	402f88 <_printf_i+0x1dc>
  402e40:	f011 0f40 	tst.w	r1, #64	; 0x40
  402e44:	f102 0104 	add.w	r1, r2, #4
  402e48:	6019      	str	r1, [r3, #0]
  402e4a:	d0d7      	beq.n	402dfc <_printf_i+0x50>
  402e4c:	f9b2 3000 	ldrsh.w	r3, [r2]
  402e50:	2b00      	cmp	r3, #0
  402e52:	da03      	bge.n	402e5c <_printf_i+0xb0>
  402e54:	222d      	movs	r2, #45	; 0x2d
  402e56:	425b      	negs	r3, r3
  402e58:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  402e5c:	4962      	ldr	r1, [pc, #392]	; (402fe8 <_printf_i+0x23c>)
  402e5e:	220a      	movs	r2, #10
  402e60:	e017      	b.n	402e92 <_printf_i+0xe6>
  402e62:	6820      	ldr	r0, [r4, #0]
  402e64:	6819      	ldr	r1, [r3, #0]
  402e66:	f010 0f80 	tst.w	r0, #128	; 0x80
  402e6a:	d003      	beq.n	402e74 <_printf_i+0xc8>
  402e6c:	1d08      	adds	r0, r1, #4
  402e6e:	6018      	str	r0, [r3, #0]
  402e70:	680b      	ldr	r3, [r1, #0]
  402e72:	e006      	b.n	402e82 <_printf_i+0xd6>
  402e74:	f010 0f40 	tst.w	r0, #64	; 0x40
  402e78:	f101 0004 	add.w	r0, r1, #4
  402e7c:	6018      	str	r0, [r3, #0]
  402e7e:	d0f7      	beq.n	402e70 <_printf_i+0xc4>
  402e80:	880b      	ldrh	r3, [r1, #0]
  402e82:	4959      	ldr	r1, [pc, #356]	; (402fe8 <_printf_i+0x23c>)
  402e84:	2a6f      	cmp	r2, #111	; 0x6f
  402e86:	bf14      	ite	ne
  402e88:	220a      	movne	r2, #10
  402e8a:	2208      	moveq	r2, #8
  402e8c:	2000      	movs	r0, #0
  402e8e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  402e92:	6865      	ldr	r5, [r4, #4]
  402e94:	60a5      	str	r5, [r4, #8]
  402e96:	2d00      	cmp	r5, #0
  402e98:	f2c0 809c 	blt.w	402fd4 <_printf_i+0x228>
  402e9c:	6820      	ldr	r0, [r4, #0]
  402e9e:	f020 0004 	bic.w	r0, r0, #4
  402ea2:	6020      	str	r0, [r4, #0]
  402ea4:	2b00      	cmp	r3, #0
  402ea6:	d13f      	bne.n	402f28 <_printf_i+0x17c>
  402ea8:	2d00      	cmp	r5, #0
  402eaa:	f040 8095 	bne.w	402fd8 <_printf_i+0x22c>
  402eae:	4675      	mov	r5, lr
  402eb0:	2a08      	cmp	r2, #8
  402eb2:	d10b      	bne.n	402ecc <_printf_i+0x120>
  402eb4:	6823      	ldr	r3, [r4, #0]
  402eb6:	07da      	lsls	r2, r3, #31
  402eb8:	d508      	bpl.n	402ecc <_printf_i+0x120>
  402eba:	6923      	ldr	r3, [r4, #16]
  402ebc:	6862      	ldr	r2, [r4, #4]
  402ebe:	429a      	cmp	r2, r3
  402ec0:	bfde      	ittt	le
  402ec2:	2330      	movle	r3, #48	; 0x30
  402ec4:	f805 3c01 	strble.w	r3, [r5, #-1]
  402ec8:	f105 35ff 	addle.w	r5, r5, #4294967295
  402ecc:	ebae 0305 	sub.w	r3, lr, r5
  402ed0:	6123      	str	r3, [r4, #16]
  402ed2:	f8cd 8000 	str.w	r8, [sp]
  402ed6:	463b      	mov	r3, r7
  402ed8:	aa03      	add	r2, sp, #12
  402eda:	4621      	mov	r1, r4
  402edc:	4630      	mov	r0, r6
  402ede:	f7ff feef 	bl	402cc0 <_printf_common>
  402ee2:	3001      	adds	r0, #1
  402ee4:	d155      	bne.n	402f92 <_printf_i+0x1e6>
  402ee6:	f04f 30ff 	mov.w	r0, #4294967295
  402eea:	b005      	add	sp, #20
  402eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402ef0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  402ef4:	493c      	ldr	r1, [pc, #240]	; (402fe8 <_printf_i+0x23c>)
  402ef6:	6822      	ldr	r2, [r4, #0]
  402ef8:	6818      	ldr	r0, [r3, #0]
  402efa:	f012 0f80 	tst.w	r2, #128	; 0x80
  402efe:	f100 0504 	add.w	r5, r0, #4
  402f02:	601d      	str	r5, [r3, #0]
  402f04:	d001      	beq.n	402f0a <_printf_i+0x15e>
  402f06:	6803      	ldr	r3, [r0, #0]
  402f08:	e002      	b.n	402f10 <_printf_i+0x164>
  402f0a:	0655      	lsls	r5, r2, #25
  402f0c:	d5fb      	bpl.n	402f06 <_printf_i+0x15a>
  402f0e:	8803      	ldrh	r3, [r0, #0]
  402f10:	07d0      	lsls	r0, r2, #31
  402f12:	bf44      	itt	mi
  402f14:	f042 0220 	orrmi.w	r2, r2, #32
  402f18:	6022      	strmi	r2, [r4, #0]
  402f1a:	b91b      	cbnz	r3, 402f24 <_printf_i+0x178>
  402f1c:	6822      	ldr	r2, [r4, #0]
  402f1e:	f022 0220 	bic.w	r2, r2, #32
  402f22:	6022      	str	r2, [r4, #0]
  402f24:	2210      	movs	r2, #16
  402f26:	e7b1      	b.n	402e8c <_printf_i+0xe0>
  402f28:	4675      	mov	r5, lr
  402f2a:	fbb3 f0f2 	udiv	r0, r3, r2
  402f2e:	fb02 3310 	mls	r3, r2, r0, r3
  402f32:	5ccb      	ldrb	r3, [r1, r3]
  402f34:	f805 3d01 	strb.w	r3, [r5, #-1]!
  402f38:	4603      	mov	r3, r0
  402f3a:	2800      	cmp	r0, #0
  402f3c:	d1f5      	bne.n	402f2a <_printf_i+0x17e>
  402f3e:	e7b7      	b.n	402eb0 <_printf_i+0x104>
  402f40:	6808      	ldr	r0, [r1, #0]
  402f42:	681a      	ldr	r2, [r3, #0]
  402f44:	6949      	ldr	r1, [r1, #20]
  402f46:	f010 0f80 	tst.w	r0, #128	; 0x80
  402f4a:	d004      	beq.n	402f56 <_printf_i+0x1aa>
  402f4c:	1d10      	adds	r0, r2, #4
  402f4e:	6018      	str	r0, [r3, #0]
  402f50:	6813      	ldr	r3, [r2, #0]
  402f52:	6019      	str	r1, [r3, #0]
  402f54:	e007      	b.n	402f66 <_printf_i+0x1ba>
  402f56:	f010 0f40 	tst.w	r0, #64	; 0x40
  402f5a:	f102 0004 	add.w	r0, r2, #4
  402f5e:	6018      	str	r0, [r3, #0]
  402f60:	6813      	ldr	r3, [r2, #0]
  402f62:	d0f6      	beq.n	402f52 <_printf_i+0x1a6>
  402f64:	8019      	strh	r1, [r3, #0]
  402f66:	2300      	movs	r3, #0
  402f68:	6123      	str	r3, [r4, #16]
  402f6a:	4675      	mov	r5, lr
  402f6c:	e7b1      	b.n	402ed2 <_printf_i+0x126>
  402f6e:	681a      	ldr	r2, [r3, #0]
  402f70:	1d11      	adds	r1, r2, #4
  402f72:	6019      	str	r1, [r3, #0]
  402f74:	6815      	ldr	r5, [r2, #0]
  402f76:	6862      	ldr	r2, [r4, #4]
  402f78:	2100      	movs	r1, #0
  402f7a:	4628      	mov	r0, r5
  402f7c:	f001 f960 	bl	404240 <memchr>
  402f80:	b108      	cbz	r0, 402f86 <_printf_i+0x1da>
  402f82:	1b40      	subs	r0, r0, r5
  402f84:	6060      	str	r0, [r4, #4]
  402f86:	6863      	ldr	r3, [r4, #4]
  402f88:	6123      	str	r3, [r4, #16]
  402f8a:	2300      	movs	r3, #0
  402f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402f90:	e79f      	b.n	402ed2 <_printf_i+0x126>
  402f92:	6923      	ldr	r3, [r4, #16]
  402f94:	462a      	mov	r2, r5
  402f96:	4639      	mov	r1, r7
  402f98:	4630      	mov	r0, r6
  402f9a:	47c0      	blx	r8
  402f9c:	3001      	adds	r0, #1
  402f9e:	d0a2      	beq.n	402ee6 <_printf_i+0x13a>
  402fa0:	6823      	ldr	r3, [r4, #0]
  402fa2:	079b      	lsls	r3, r3, #30
  402fa4:	d507      	bpl.n	402fb6 <_printf_i+0x20a>
  402fa6:	2500      	movs	r5, #0
  402fa8:	f104 0919 	add.w	r9, r4, #25
  402fac:	68e3      	ldr	r3, [r4, #12]
  402fae:	9a03      	ldr	r2, [sp, #12]
  402fb0:	1a9b      	subs	r3, r3, r2
  402fb2:	429d      	cmp	r5, r3
  402fb4:	db05      	blt.n	402fc2 <_printf_i+0x216>
  402fb6:	68e0      	ldr	r0, [r4, #12]
  402fb8:	9b03      	ldr	r3, [sp, #12]
  402fba:	4298      	cmp	r0, r3
  402fbc:	bfb8      	it	lt
  402fbe:	4618      	movlt	r0, r3
  402fc0:	e793      	b.n	402eea <_printf_i+0x13e>
  402fc2:	2301      	movs	r3, #1
  402fc4:	464a      	mov	r2, r9
  402fc6:	4639      	mov	r1, r7
  402fc8:	4630      	mov	r0, r6
  402fca:	47c0      	blx	r8
  402fcc:	3001      	adds	r0, #1
  402fce:	d08a      	beq.n	402ee6 <_printf_i+0x13a>
  402fd0:	3501      	adds	r5, #1
  402fd2:	e7eb      	b.n	402fac <_printf_i+0x200>
  402fd4:	2b00      	cmp	r3, #0
  402fd6:	d1a7      	bne.n	402f28 <_printf_i+0x17c>
  402fd8:	780b      	ldrb	r3, [r1, #0]
  402fda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402fde:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402fe2:	e765      	b.n	402eb0 <_printf_i+0x104>
  402fe4:	00405403 	.word	0x00405403
  402fe8:	004053f2 	.word	0x004053f2

00402fec <iprintf>:
  402fec:	b40f      	push	{r0, r1, r2, r3}
  402fee:	4b0a      	ldr	r3, [pc, #40]	; (403018 <iprintf+0x2c>)
  402ff0:	b513      	push	{r0, r1, r4, lr}
  402ff2:	681c      	ldr	r4, [r3, #0]
  402ff4:	b124      	cbz	r4, 403000 <iprintf+0x14>
  402ff6:	69a3      	ldr	r3, [r4, #24]
  402ff8:	b913      	cbnz	r3, 403000 <iprintf+0x14>
  402ffa:	4620      	mov	r0, r4
  402ffc:	f001 f81c 	bl	404038 <__sinit>
  403000:	ab05      	add	r3, sp, #20
  403002:	9a04      	ldr	r2, [sp, #16]
  403004:	68a1      	ldr	r1, [r4, #8]
  403006:	9301      	str	r3, [sp, #4]
  403008:	4620      	mov	r0, r4
  40300a:	f001 fd1b 	bl	404a44 <_vfiprintf_r>
  40300e:	b002      	add	sp, #8
  403010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403014:	b004      	add	sp, #16
  403016:	4770      	bx	lr
  403018:	20400048 	.word	0x20400048

0040301c <setbuf>:
  40301c:	2900      	cmp	r1, #0
  40301e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403022:	bf0c      	ite	eq
  403024:	2202      	moveq	r2, #2
  403026:	2200      	movne	r2, #0
  403028:	f000 b800 	b.w	40302c <setvbuf>

0040302c <setvbuf>:
  40302c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403030:	461d      	mov	r5, r3
  403032:	4b51      	ldr	r3, [pc, #324]	; (403178 <setvbuf+0x14c>)
  403034:	681e      	ldr	r6, [r3, #0]
  403036:	4604      	mov	r4, r0
  403038:	460f      	mov	r7, r1
  40303a:	4690      	mov	r8, r2
  40303c:	b126      	cbz	r6, 403048 <setvbuf+0x1c>
  40303e:	69b3      	ldr	r3, [r6, #24]
  403040:	b913      	cbnz	r3, 403048 <setvbuf+0x1c>
  403042:	4630      	mov	r0, r6
  403044:	f000 fff8 	bl	404038 <__sinit>
  403048:	4b4c      	ldr	r3, [pc, #304]	; (40317c <setvbuf+0x150>)
  40304a:	429c      	cmp	r4, r3
  40304c:	d152      	bne.n	4030f4 <setvbuf+0xc8>
  40304e:	6874      	ldr	r4, [r6, #4]
  403050:	f1b8 0f02 	cmp.w	r8, #2
  403054:	d006      	beq.n	403064 <setvbuf+0x38>
  403056:	f1b8 0f01 	cmp.w	r8, #1
  40305a:	f200 8089 	bhi.w	403170 <setvbuf+0x144>
  40305e:	2d00      	cmp	r5, #0
  403060:	f2c0 8086 	blt.w	403170 <setvbuf+0x144>
  403064:	4621      	mov	r1, r4
  403066:	4630      	mov	r0, r6
  403068:	f000 ff7c 	bl	403f64 <_fflush_r>
  40306c:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40306e:	b141      	cbz	r1, 403082 <setvbuf+0x56>
  403070:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403074:	4299      	cmp	r1, r3
  403076:	d002      	beq.n	40307e <setvbuf+0x52>
  403078:	4630      	mov	r0, r6
  40307a:	f001 fc0f 	bl	40489c <_free_r>
  40307e:	2300      	movs	r3, #0
  403080:	6363      	str	r3, [r4, #52]	; 0x34
  403082:	2300      	movs	r3, #0
  403084:	61a3      	str	r3, [r4, #24]
  403086:	6063      	str	r3, [r4, #4]
  403088:	89a3      	ldrh	r3, [r4, #12]
  40308a:	061b      	lsls	r3, r3, #24
  40308c:	d503      	bpl.n	403096 <setvbuf+0x6a>
  40308e:	6921      	ldr	r1, [r4, #16]
  403090:	4630      	mov	r0, r6
  403092:	f001 fc03 	bl	40489c <_free_r>
  403096:	89a3      	ldrh	r3, [r4, #12]
  403098:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40309c:	f023 0303 	bic.w	r3, r3, #3
  4030a0:	f1b8 0f02 	cmp.w	r8, #2
  4030a4:	81a3      	strh	r3, [r4, #12]
  4030a6:	d05d      	beq.n	403164 <setvbuf+0x138>
  4030a8:	ab01      	add	r3, sp, #4
  4030aa:	466a      	mov	r2, sp
  4030ac:	4621      	mov	r1, r4
  4030ae:	4630      	mov	r0, r6
  4030b0:	f001 f85a 	bl	404168 <__swhatbuf_r>
  4030b4:	89a3      	ldrh	r3, [r4, #12]
  4030b6:	4318      	orrs	r0, r3
  4030b8:	81a0      	strh	r0, [r4, #12]
  4030ba:	bb2d      	cbnz	r5, 403108 <setvbuf+0xdc>
  4030bc:	9d00      	ldr	r5, [sp, #0]
  4030be:	4628      	mov	r0, r5
  4030c0:	f001 f8b6 	bl	404230 <malloc>
  4030c4:	4607      	mov	r7, r0
  4030c6:	2800      	cmp	r0, #0
  4030c8:	d14e      	bne.n	403168 <setvbuf+0x13c>
  4030ca:	f8dd 9000 	ldr.w	r9, [sp]
  4030ce:	45a9      	cmp	r9, r5
  4030d0:	d13c      	bne.n	40314c <setvbuf+0x120>
  4030d2:	f04f 30ff 	mov.w	r0, #4294967295
  4030d6:	89a3      	ldrh	r3, [r4, #12]
  4030d8:	f043 0302 	orr.w	r3, r3, #2
  4030dc:	81a3      	strh	r3, [r4, #12]
  4030de:	2300      	movs	r3, #0
  4030e0:	60a3      	str	r3, [r4, #8]
  4030e2:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4030e6:	6023      	str	r3, [r4, #0]
  4030e8:	6123      	str	r3, [r4, #16]
  4030ea:	2301      	movs	r3, #1
  4030ec:	6163      	str	r3, [r4, #20]
  4030ee:	b003      	add	sp, #12
  4030f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4030f4:	4b22      	ldr	r3, [pc, #136]	; (403180 <setvbuf+0x154>)
  4030f6:	429c      	cmp	r4, r3
  4030f8:	d101      	bne.n	4030fe <setvbuf+0xd2>
  4030fa:	68b4      	ldr	r4, [r6, #8]
  4030fc:	e7a8      	b.n	403050 <setvbuf+0x24>
  4030fe:	4b21      	ldr	r3, [pc, #132]	; (403184 <setvbuf+0x158>)
  403100:	429c      	cmp	r4, r3
  403102:	bf08      	it	eq
  403104:	68f4      	ldreq	r4, [r6, #12]
  403106:	e7a3      	b.n	403050 <setvbuf+0x24>
  403108:	2f00      	cmp	r7, #0
  40310a:	d0d8      	beq.n	4030be <setvbuf+0x92>
  40310c:	69b3      	ldr	r3, [r6, #24]
  40310e:	b913      	cbnz	r3, 403116 <setvbuf+0xea>
  403110:	4630      	mov	r0, r6
  403112:	f000 ff91 	bl	404038 <__sinit>
  403116:	f1b8 0f01 	cmp.w	r8, #1
  40311a:	bf08      	it	eq
  40311c:	89a3      	ldrheq	r3, [r4, #12]
  40311e:	6027      	str	r7, [r4, #0]
  403120:	bf04      	itt	eq
  403122:	f043 0301 	orreq.w	r3, r3, #1
  403126:	81a3      	strheq	r3, [r4, #12]
  403128:	89a3      	ldrh	r3, [r4, #12]
  40312a:	6127      	str	r7, [r4, #16]
  40312c:	f013 0008 	ands.w	r0, r3, #8
  403130:	6165      	str	r5, [r4, #20]
  403132:	d01b      	beq.n	40316c <setvbuf+0x140>
  403134:	f013 0001 	ands.w	r0, r3, #1
  403138:	bf18      	it	ne
  40313a:	426d      	negne	r5, r5
  40313c:	f04f 0300 	mov.w	r3, #0
  403140:	bf1d      	ittte	ne
  403142:	60a3      	strne	r3, [r4, #8]
  403144:	61a5      	strne	r5, [r4, #24]
  403146:	4618      	movne	r0, r3
  403148:	60a5      	streq	r5, [r4, #8]
  40314a:	e7d0      	b.n	4030ee <setvbuf+0xc2>
  40314c:	4648      	mov	r0, r9
  40314e:	f001 f86f 	bl	404230 <malloc>
  403152:	4607      	mov	r7, r0
  403154:	2800      	cmp	r0, #0
  403156:	d0bc      	beq.n	4030d2 <setvbuf+0xa6>
  403158:	89a3      	ldrh	r3, [r4, #12]
  40315a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40315e:	81a3      	strh	r3, [r4, #12]
  403160:	464d      	mov	r5, r9
  403162:	e7d3      	b.n	40310c <setvbuf+0xe0>
  403164:	2000      	movs	r0, #0
  403166:	e7b6      	b.n	4030d6 <setvbuf+0xaa>
  403168:	46a9      	mov	r9, r5
  40316a:	e7f5      	b.n	403158 <setvbuf+0x12c>
  40316c:	60a0      	str	r0, [r4, #8]
  40316e:	e7be      	b.n	4030ee <setvbuf+0xc2>
  403170:	f04f 30ff 	mov.w	r0, #4294967295
  403174:	e7bb      	b.n	4030ee <setvbuf+0xc2>
  403176:	bf00      	nop
  403178:	20400048 	.word	0x20400048
  40317c:	00405444 	.word	0x00405444
  403180:	00405464 	.word	0x00405464
  403184:	00405424 	.word	0x00405424

00403188 <strlen>:
  403188:	4603      	mov	r3, r0
  40318a:	f813 2b01 	ldrb.w	r2, [r3], #1
  40318e:	2a00      	cmp	r2, #0
  403190:	d1fb      	bne.n	40318a <strlen+0x2>
  403192:	1a18      	subs	r0, r3, r0
  403194:	3801      	subs	r0, #1
  403196:	4770      	bx	lr

00403198 <quorem>:
  403198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40319c:	6903      	ldr	r3, [r0, #16]
  40319e:	690c      	ldr	r4, [r1, #16]
  4031a0:	429c      	cmp	r4, r3
  4031a2:	4680      	mov	r8, r0
  4031a4:	f300 8082 	bgt.w	4032ac <quorem+0x114>
  4031a8:	3c01      	subs	r4, #1
  4031aa:	f101 0714 	add.w	r7, r1, #20
  4031ae:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  4031b2:	f100 0614 	add.w	r6, r0, #20
  4031b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  4031ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  4031be:	eb06 030e 	add.w	r3, r6, lr
  4031c2:	3501      	adds	r5, #1
  4031c4:	eb07 090e 	add.w	r9, r7, lr
  4031c8:	9301      	str	r3, [sp, #4]
  4031ca:	fbb0 f5f5 	udiv	r5, r0, r5
  4031ce:	b395      	cbz	r5, 403236 <quorem+0x9e>
  4031d0:	f04f 0a00 	mov.w	sl, #0
  4031d4:	4638      	mov	r0, r7
  4031d6:	46b4      	mov	ip, r6
  4031d8:	46d3      	mov	fp, sl
  4031da:	f850 2b04 	ldr.w	r2, [r0], #4
  4031de:	b293      	uxth	r3, r2
  4031e0:	fb05 a303 	mla	r3, r5, r3, sl
  4031e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4031e8:	b29b      	uxth	r3, r3
  4031ea:	ebab 0303 	sub.w	r3, fp, r3
  4031ee:	0c12      	lsrs	r2, r2, #16
  4031f0:	f8bc b000 	ldrh.w	fp, [ip]
  4031f4:	fb05 a202 	mla	r2, r5, r2, sl
  4031f8:	fa13 f38b 	uxtah	r3, r3, fp
  4031fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  403200:	fa1f fb82 	uxth.w	fp, r2
  403204:	f8dc 2000 	ldr.w	r2, [ip]
  403208:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  40320c:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403210:	b29b      	uxth	r3, r3
  403212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403216:	4581      	cmp	r9, r0
  403218:	ea4f 4b22 	mov.w	fp, r2, asr #16
  40321c:	f84c 3b04 	str.w	r3, [ip], #4
  403220:	d2db      	bcs.n	4031da <quorem+0x42>
  403222:	f856 300e 	ldr.w	r3, [r6, lr]
  403226:	b933      	cbnz	r3, 403236 <quorem+0x9e>
  403228:	9b01      	ldr	r3, [sp, #4]
  40322a:	3b04      	subs	r3, #4
  40322c:	429e      	cmp	r6, r3
  40322e:	461a      	mov	r2, r3
  403230:	d330      	bcc.n	403294 <quorem+0xfc>
  403232:	f8c8 4010 	str.w	r4, [r8, #16]
  403236:	4640      	mov	r0, r8
  403238:	f001 fa5b 	bl	4046f2 <__mcmp>
  40323c:	2800      	cmp	r0, #0
  40323e:	db25      	blt.n	40328c <quorem+0xf4>
  403240:	3501      	adds	r5, #1
  403242:	4630      	mov	r0, r6
  403244:	f04f 0e00 	mov.w	lr, #0
  403248:	f857 2b04 	ldr.w	r2, [r7], #4
  40324c:	f8d0 c000 	ldr.w	ip, [r0]
  403250:	b293      	uxth	r3, r2
  403252:	ebae 0303 	sub.w	r3, lr, r3
  403256:	0c12      	lsrs	r2, r2, #16
  403258:	fa13 f38c 	uxtah	r3, r3, ip
  40325c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  403260:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403264:	b29b      	uxth	r3, r3
  403266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40326a:	45b9      	cmp	r9, r7
  40326c:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403270:	f840 3b04 	str.w	r3, [r0], #4
  403274:	d2e8      	bcs.n	403248 <quorem+0xb0>
  403276:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40327a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  40327e:	b92a      	cbnz	r2, 40328c <quorem+0xf4>
  403280:	3b04      	subs	r3, #4
  403282:	429e      	cmp	r6, r3
  403284:	461a      	mov	r2, r3
  403286:	d30b      	bcc.n	4032a0 <quorem+0x108>
  403288:	f8c8 4010 	str.w	r4, [r8, #16]
  40328c:	4628      	mov	r0, r5
  40328e:	b003      	add	sp, #12
  403290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403294:	6812      	ldr	r2, [r2, #0]
  403296:	3b04      	subs	r3, #4
  403298:	2a00      	cmp	r2, #0
  40329a:	d1ca      	bne.n	403232 <quorem+0x9a>
  40329c:	3c01      	subs	r4, #1
  40329e:	e7c5      	b.n	40322c <quorem+0x94>
  4032a0:	6812      	ldr	r2, [r2, #0]
  4032a2:	3b04      	subs	r3, #4
  4032a4:	2a00      	cmp	r2, #0
  4032a6:	d1ef      	bne.n	403288 <quorem+0xf0>
  4032a8:	3c01      	subs	r4, #1
  4032aa:	e7ea      	b.n	403282 <quorem+0xea>
  4032ac:	2000      	movs	r0, #0
  4032ae:	e7ee      	b.n	40328e <quorem+0xf6>

004032b0 <_dtoa_r>:
  4032b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032b4:	6a46      	ldr	r6, [r0, #36]	; 0x24
  4032b6:	b095      	sub	sp, #84	; 0x54
  4032b8:	4604      	mov	r4, r0
  4032ba:	9d21      	ldr	r5, [sp, #132]	; 0x84
  4032bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4032c0:	b93e      	cbnz	r6, 4032d2 <_dtoa_r+0x22>
  4032c2:	2010      	movs	r0, #16
  4032c4:	f000 ffb4 	bl	404230 <malloc>
  4032c8:	6260      	str	r0, [r4, #36]	; 0x24
  4032ca:	6046      	str	r6, [r0, #4]
  4032cc:	6086      	str	r6, [r0, #8]
  4032ce:	6006      	str	r6, [r0, #0]
  4032d0:	60c6      	str	r6, [r0, #12]
  4032d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4032d4:	6819      	ldr	r1, [r3, #0]
  4032d6:	b151      	cbz	r1, 4032ee <_dtoa_r+0x3e>
  4032d8:	685a      	ldr	r2, [r3, #4]
  4032da:	604a      	str	r2, [r1, #4]
  4032dc:	2301      	movs	r3, #1
  4032de:	4093      	lsls	r3, r2
  4032e0:	608b      	str	r3, [r1, #8]
  4032e2:	4620      	mov	r0, r4
  4032e4:	f001 f830 	bl	404348 <_Bfree>
  4032e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4032ea:	2200      	movs	r2, #0
  4032ec:	601a      	str	r2, [r3, #0]
  4032ee:	9b03      	ldr	r3, [sp, #12]
  4032f0:	2b00      	cmp	r3, #0
  4032f2:	bfbf      	itttt	lt
  4032f4:	2301      	movlt	r3, #1
  4032f6:	602b      	strlt	r3, [r5, #0]
  4032f8:	9b03      	ldrlt	r3, [sp, #12]
  4032fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4032fe:	bfb2      	itee	lt
  403300:	9303      	strlt	r3, [sp, #12]
  403302:	2300      	movge	r3, #0
  403304:	602b      	strge	r3, [r5, #0]
  403306:	f8dd 900c 	ldr.w	r9, [sp, #12]
  40330a:	4ba9      	ldr	r3, [pc, #676]	; (4035b0 <_dtoa_r+0x300>)
  40330c:	ea33 0309 	bics.w	r3, r3, r9
  403310:	d11b      	bne.n	40334a <_dtoa_r+0x9a>
  403312:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403314:	f242 730f 	movw	r3, #9999	; 0x270f
  403318:	6013      	str	r3, [r2, #0]
  40331a:	9b02      	ldr	r3, [sp, #8]
  40331c:	b923      	cbnz	r3, 403328 <_dtoa_r+0x78>
  40331e:	f3c9 0013 	ubfx	r0, r9, #0, #20
  403322:	2800      	cmp	r0, #0
  403324:	f000 8581 	beq.w	403e2a <_dtoa_r+0xb7a>
  403328:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40332a:	b953      	cbnz	r3, 403342 <_dtoa_r+0x92>
  40332c:	4ba1      	ldr	r3, [pc, #644]	; (4035b4 <_dtoa_r+0x304>)
  40332e:	e021      	b.n	403374 <_dtoa_r+0xc4>
  403330:	4ba1      	ldr	r3, [pc, #644]	; (4035b8 <_dtoa_r+0x308>)
  403332:	9306      	str	r3, [sp, #24]
  403334:	3308      	adds	r3, #8
  403336:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403338:	6013      	str	r3, [r2, #0]
  40333a:	9806      	ldr	r0, [sp, #24]
  40333c:	b015      	add	sp, #84	; 0x54
  40333e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403342:	4b9c      	ldr	r3, [pc, #624]	; (4035b4 <_dtoa_r+0x304>)
  403344:	9306      	str	r3, [sp, #24]
  403346:	3303      	adds	r3, #3
  403348:	e7f5      	b.n	403336 <_dtoa_r+0x86>
  40334a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40334e:	2200      	movs	r2, #0
  403350:	2300      	movs	r3, #0
  403352:	4630      	mov	r0, r6
  403354:	4639      	mov	r1, r7
  403356:	f7ff f959 	bl	40260c <__aeabi_dcmpeq>
  40335a:	4680      	mov	r8, r0
  40335c:	b160      	cbz	r0, 403378 <_dtoa_r+0xc8>
  40335e:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403360:	2301      	movs	r3, #1
  403362:	6013      	str	r3, [r2, #0]
  403364:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403366:	2b00      	cmp	r3, #0
  403368:	f000 855c 	beq.w	403e24 <_dtoa_r+0xb74>
  40336c:	4b93      	ldr	r3, [pc, #588]	; (4035bc <_dtoa_r+0x30c>)
  40336e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403370:	6013      	str	r3, [r2, #0]
  403372:	3b01      	subs	r3, #1
  403374:	9306      	str	r3, [sp, #24]
  403376:	e7e0      	b.n	40333a <_dtoa_r+0x8a>
  403378:	ab12      	add	r3, sp, #72	; 0x48
  40337a:	9301      	str	r3, [sp, #4]
  40337c:	ab13      	add	r3, sp, #76	; 0x4c
  40337e:	9300      	str	r3, [sp, #0]
  403380:	4632      	mov	r2, r6
  403382:	463b      	mov	r3, r7
  403384:	4620      	mov	r0, r4
  403386:	f001 fa2c 	bl	4047e2 <__d2b>
  40338a:	f3c9 550a 	ubfx	r5, r9, #20, #11
  40338e:	4682      	mov	sl, r0
  403390:	2d00      	cmp	r5, #0
  403392:	d07c      	beq.n	40348e <_dtoa_r+0x1de>
  403394:	f3c7 0313 	ubfx	r3, r7, #0, #20
  403398:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40339c:	4630      	mov	r0, r6
  40339e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4033a2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  4033a6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  4033aa:	2200      	movs	r2, #0
  4033ac:	4b84      	ldr	r3, [pc, #528]	; (4035c0 <_dtoa_r+0x310>)
  4033ae:	f7fe fd11 	bl	401dd4 <__aeabi_dsub>
  4033b2:	a379      	add	r3, pc, #484	; (adr r3, 403598 <_dtoa_r+0x2e8>)
  4033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4033b8:	f7fe fec0 	bl	40213c <__aeabi_dmul>
  4033bc:	a378      	add	r3, pc, #480	; (adr r3, 4035a0 <_dtoa_r+0x2f0>)
  4033be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4033c2:	f7fe fd09 	bl	401dd8 <__adddf3>
  4033c6:	4606      	mov	r6, r0
  4033c8:	4628      	mov	r0, r5
  4033ca:	460f      	mov	r7, r1
  4033cc:	f7fe fe50 	bl	402070 <__aeabi_i2d>
  4033d0:	a375      	add	r3, pc, #468	; (adr r3, 4035a8 <_dtoa_r+0x2f8>)
  4033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4033d6:	f7fe feb1 	bl	40213c <__aeabi_dmul>
  4033da:	4602      	mov	r2, r0
  4033dc:	460b      	mov	r3, r1
  4033de:	4630      	mov	r0, r6
  4033e0:	4639      	mov	r1, r7
  4033e2:	f7fe fcf9 	bl	401dd8 <__adddf3>
  4033e6:	4606      	mov	r6, r0
  4033e8:	460f      	mov	r7, r1
  4033ea:	f7ff f941 	bl	402670 <__aeabi_d2iz>
  4033ee:	2200      	movs	r2, #0
  4033f0:	4683      	mov	fp, r0
  4033f2:	2300      	movs	r3, #0
  4033f4:	4630      	mov	r0, r6
  4033f6:	4639      	mov	r1, r7
  4033f8:	f7ff f912 	bl	402620 <__aeabi_dcmplt>
  4033fc:	b158      	cbz	r0, 403416 <_dtoa_r+0x166>
  4033fe:	4658      	mov	r0, fp
  403400:	f7fe fe36 	bl	402070 <__aeabi_i2d>
  403404:	4602      	mov	r2, r0
  403406:	460b      	mov	r3, r1
  403408:	4630      	mov	r0, r6
  40340a:	4639      	mov	r1, r7
  40340c:	f7ff f8fe 	bl	40260c <__aeabi_dcmpeq>
  403410:	b908      	cbnz	r0, 403416 <_dtoa_r+0x166>
  403412:	f10b 3bff 	add.w	fp, fp, #4294967295
  403416:	f1bb 0f16 	cmp.w	fp, #22
  40341a:	d857      	bhi.n	4034cc <_dtoa_r+0x21c>
  40341c:	4969      	ldr	r1, [pc, #420]	; (4035c4 <_dtoa_r+0x314>)
  40341e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  403422:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403426:	e9d1 0100 	ldrd	r0, r1, [r1]
  40342a:	f7ff f917 	bl	40265c <__aeabi_dcmpgt>
  40342e:	2800      	cmp	r0, #0
  403430:	d04e      	beq.n	4034d0 <_dtoa_r+0x220>
  403432:	f10b 3bff 	add.w	fp, fp, #4294967295
  403436:	2300      	movs	r3, #0
  403438:	930d      	str	r3, [sp, #52]	; 0x34
  40343a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40343c:	1b5d      	subs	r5, r3, r5
  40343e:	1e6b      	subs	r3, r5, #1
  403440:	9307      	str	r3, [sp, #28]
  403442:	bf43      	ittte	mi
  403444:	2300      	movmi	r3, #0
  403446:	f1c5 0801 	rsbmi	r8, r5, #1
  40344a:	9307      	strmi	r3, [sp, #28]
  40344c:	f04f 0800 	movpl.w	r8, #0
  403450:	f1bb 0f00 	cmp.w	fp, #0
  403454:	db3e      	blt.n	4034d4 <_dtoa_r+0x224>
  403456:	9b07      	ldr	r3, [sp, #28]
  403458:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40345c:	445b      	add	r3, fp
  40345e:	9307      	str	r3, [sp, #28]
  403460:	2300      	movs	r3, #0
  403462:	9308      	str	r3, [sp, #32]
  403464:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403466:	2b09      	cmp	r3, #9
  403468:	f200 80b0 	bhi.w	4035cc <_dtoa_r+0x31c>
  40346c:	2b05      	cmp	r3, #5
  40346e:	bfc4      	itt	gt
  403470:	3b04      	subgt	r3, #4
  403472:	931e      	strgt	r3, [sp, #120]	; 0x78
  403474:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403476:	f1a3 0302 	sub.w	r3, r3, #2
  40347a:	bfcc      	ite	gt
  40347c:	2600      	movgt	r6, #0
  40347e:	2601      	movle	r6, #1
  403480:	2b03      	cmp	r3, #3
  403482:	f200 80af 	bhi.w	4035e4 <_dtoa_r+0x334>
  403486:	e8df f003 	tbb	[pc, r3]
  40348a:	8583      	.short	0x8583
  40348c:	772d      	.short	0x772d
  40348e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403490:	9d12      	ldr	r5, [sp, #72]	; 0x48
  403492:	441d      	add	r5, r3
  403494:	f205 4332 	addw	r3, r5, #1074	; 0x432
  403498:	2b20      	cmp	r3, #32
  40349a:	dd11      	ble.n	4034c0 <_dtoa_r+0x210>
  40349c:	9a02      	ldr	r2, [sp, #8]
  40349e:	f205 4012 	addw	r0, r5, #1042	; 0x412
  4034a2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4034a6:	fa22 f000 	lsr.w	r0, r2, r0
  4034aa:	fa09 f303 	lsl.w	r3, r9, r3
  4034ae:	4318      	orrs	r0, r3
  4034b0:	f7fe fdce 	bl	402050 <__aeabi_ui2d>
  4034b4:	2301      	movs	r3, #1
  4034b6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4034ba:	3d01      	subs	r5, #1
  4034bc:	9310      	str	r3, [sp, #64]	; 0x40
  4034be:	e774      	b.n	4033aa <_dtoa_r+0xfa>
  4034c0:	f1c3 0020 	rsb	r0, r3, #32
  4034c4:	9b02      	ldr	r3, [sp, #8]
  4034c6:	fa03 f000 	lsl.w	r0, r3, r0
  4034ca:	e7f1      	b.n	4034b0 <_dtoa_r+0x200>
  4034cc:	2301      	movs	r3, #1
  4034ce:	e7b3      	b.n	403438 <_dtoa_r+0x188>
  4034d0:	900d      	str	r0, [sp, #52]	; 0x34
  4034d2:	e7b2      	b.n	40343a <_dtoa_r+0x18a>
  4034d4:	f1cb 0300 	rsb	r3, fp, #0
  4034d8:	9308      	str	r3, [sp, #32]
  4034da:	2300      	movs	r3, #0
  4034dc:	eba8 080b 	sub.w	r8, r8, fp
  4034e0:	930c      	str	r3, [sp, #48]	; 0x30
  4034e2:	e7bf      	b.n	403464 <_dtoa_r+0x1b4>
  4034e4:	2301      	movs	r3, #1
  4034e6:	9309      	str	r3, [sp, #36]	; 0x24
  4034e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4034ea:	2b00      	cmp	r3, #0
  4034ec:	dd7d      	ble.n	4035ea <_dtoa_r+0x33a>
  4034ee:	9304      	str	r3, [sp, #16]
  4034f0:	4699      	mov	r9, r3
  4034f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4034f4:	2200      	movs	r2, #0
  4034f6:	606a      	str	r2, [r5, #4]
  4034f8:	2104      	movs	r1, #4
  4034fa:	f101 0214 	add.w	r2, r1, #20
  4034fe:	429a      	cmp	r2, r3
  403500:	d978      	bls.n	4035f4 <_dtoa_r+0x344>
  403502:	6869      	ldr	r1, [r5, #4]
  403504:	4620      	mov	r0, r4
  403506:	f000 feeb 	bl	4042e0 <_Balloc>
  40350a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40350c:	6028      	str	r0, [r5, #0]
  40350e:	681b      	ldr	r3, [r3, #0]
  403510:	9306      	str	r3, [sp, #24]
  403512:	f1b9 0f0e 	cmp.w	r9, #14
  403516:	f200 80ee 	bhi.w	4036f6 <_dtoa_r+0x446>
  40351a:	2e00      	cmp	r6, #0
  40351c:	f000 80eb 	beq.w	4036f6 <_dtoa_r+0x446>
  403520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403524:	f1bb 0f00 	cmp.w	fp, #0
  403528:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40352c:	dd77      	ble.n	40361e <_dtoa_r+0x36e>
  40352e:	4a25      	ldr	r2, [pc, #148]	; (4035c4 <_dtoa_r+0x314>)
  403530:	f00b 030f 	and.w	r3, fp, #15
  403534:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403538:	e9d3 2300 	ldrd	r2, r3, [r3]
  40353c:	ea4f 162b 	mov.w	r6, fp, asr #4
  403540:	06f0      	lsls	r0, r6, #27
  403542:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  403546:	d55a      	bpl.n	4035fe <_dtoa_r+0x34e>
  403548:	4b1f      	ldr	r3, [pc, #124]	; (4035c8 <_dtoa_r+0x318>)
  40354a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40354e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403552:	f7fe ff1d 	bl	402390 <__aeabi_ddiv>
  403556:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40355a:	f006 060f 	and.w	r6, r6, #15
  40355e:	2503      	movs	r5, #3
  403560:	4f19      	ldr	r7, [pc, #100]	; (4035c8 <_dtoa_r+0x318>)
  403562:	2e00      	cmp	r6, #0
  403564:	d14d      	bne.n	403602 <_dtoa_r+0x352>
  403566:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40356a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40356e:	f7fe ff0f 	bl	402390 <__aeabi_ddiv>
  403572:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403576:	e06c      	b.n	403652 <_dtoa_r+0x3a2>
  403578:	2301      	movs	r3, #1
  40357a:	9309      	str	r3, [sp, #36]	; 0x24
  40357c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40357e:	445b      	add	r3, fp
  403580:	f103 0901 	add.w	r9, r3, #1
  403584:	9304      	str	r3, [sp, #16]
  403586:	464b      	mov	r3, r9
  403588:	2b01      	cmp	r3, #1
  40358a:	bfb8      	it	lt
  40358c:	2301      	movlt	r3, #1
  40358e:	e7b0      	b.n	4034f2 <_dtoa_r+0x242>
  403590:	2300      	movs	r3, #0
  403592:	e7a8      	b.n	4034e6 <_dtoa_r+0x236>
  403594:	2300      	movs	r3, #0
  403596:	e7f0      	b.n	40357a <_dtoa_r+0x2ca>
  403598:	636f4361 	.word	0x636f4361
  40359c:	3fd287a7 	.word	0x3fd287a7
  4035a0:	8b60c8b3 	.word	0x8b60c8b3
  4035a4:	3fc68a28 	.word	0x3fc68a28
  4035a8:	509f79fb 	.word	0x509f79fb
  4035ac:	3fd34413 	.word	0x3fd34413
  4035b0:	7ff00000 	.word	0x7ff00000
  4035b4:	0040541d 	.word	0x0040541d
  4035b8:	00405414 	.word	0x00405414
  4035bc:	004053f1 	.word	0x004053f1
  4035c0:	3ff80000 	.word	0x3ff80000
  4035c4:	004054b0 	.word	0x004054b0
  4035c8:	00405488 	.word	0x00405488
  4035cc:	2601      	movs	r6, #1
  4035ce:	2300      	movs	r3, #0
  4035d0:	931e      	str	r3, [sp, #120]	; 0x78
  4035d2:	9609      	str	r6, [sp, #36]	; 0x24
  4035d4:	f04f 33ff 	mov.w	r3, #4294967295
  4035d8:	9304      	str	r3, [sp, #16]
  4035da:	4699      	mov	r9, r3
  4035dc:	2200      	movs	r2, #0
  4035de:	2312      	movs	r3, #18
  4035e0:	921f      	str	r2, [sp, #124]	; 0x7c
  4035e2:	e786      	b.n	4034f2 <_dtoa_r+0x242>
  4035e4:	2301      	movs	r3, #1
  4035e6:	9309      	str	r3, [sp, #36]	; 0x24
  4035e8:	e7f4      	b.n	4035d4 <_dtoa_r+0x324>
  4035ea:	2301      	movs	r3, #1
  4035ec:	9304      	str	r3, [sp, #16]
  4035ee:	4699      	mov	r9, r3
  4035f0:	461a      	mov	r2, r3
  4035f2:	e7f5      	b.n	4035e0 <_dtoa_r+0x330>
  4035f4:	686a      	ldr	r2, [r5, #4]
  4035f6:	3201      	adds	r2, #1
  4035f8:	606a      	str	r2, [r5, #4]
  4035fa:	0049      	lsls	r1, r1, #1
  4035fc:	e77d      	b.n	4034fa <_dtoa_r+0x24a>
  4035fe:	2502      	movs	r5, #2
  403600:	e7ae      	b.n	403560 <_dtoa_r+0x2b0>
  403602:	07f1      	lsls	r1, r6, #31
  403604:	d508      	bpl.n	403618 <_dtoa_r+0x368>
  403606:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40360a:	e9d7 2300 	ldrd	r2, r3, [r7]
  40360e:	f7fe fd95 	bl	40213c <__aeabi_dmul>
  403612:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403616:	3501      	adds	r5, #1
  403618:	1076      	asrs	r6, r6, #1
  40361a:	3708      	adds	r7, #8
  40361c:	e7a1      	b.n	403562 <_dtoa_r+0x2b2>
  40361e:	f000 80a5 	beq.w	40376c <_dtoa_r+0x4bc>
  403622:	f1cb 0600 	rsb	r6, fp, #0
  403626:	4ba3      	ldr	r3, [pc, #652]	; (4038b4 <_dtoa_r+0x604>)
  403628:	4fa3      	ldr	r7, [pc, #652]	; (4038b8 <_dtoa_r+0x608>)
  40362a:	f006 020f 	and.w	r2, r6, #15
  40362e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403632:	e9d3 2300 	ldrd	r2, r3, [r3]
  403636:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40363a:	f7fe fd7f 	bl	40213c <__aeabi_dmul>
  40363e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403642:	1136      	asrs	r6, r6, #4
  403644:	2300      	movs	r3, #0
  403646:	2502      	movs	r5, #2
  403648:	2e00      	cmp	r6, #0
  40364a:	f040 8084 	bne.w	403756 <_dtoa_r+0x4a6>
  40364e:	2b00      	cmp	r3, #0
  403650:	d18f      	bne.n	403572 <_dtoa_r+0x2c2>
  403652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403654:	2b00      	cmp	r3, #0
  403656:	f000 808b 	beq.w	403770 <_dtoa_r+0x4c0>
  40365a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40365e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  403662:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403666:	2200      	movs	r2, #0
  403668:	4b94      	ldr	r3, [pc, #592]	; (4038bc <_dtoa_r+0x60c>)
  40366a:	f7fe ffd9 	bl	402620 <__aeabi_dcmplt>
  40366e:	2800      	cmp	r0, #0
  403670:	d07e      	beq.n	403770 <_dtoa_r+0x4c0>
  403672:	f1b9 0f00 	cmp.w	r9, #0
  403676:	d07b      	beq.n	403770 <_dtoa_r+0x4c0>
  403678:	9b04      	ldr	r3, [sp, #16]
  40367a:	2b00      	cmp	r3, #0
  40367c:	dd37      	ble.n	4036ee <_dtoa_r+0x43e>
  40367e:	2200      	movs	r2, #0
  403680:	4b8f      	ldr	r3, [pc, #572]	; (4038c0 <_dtoa_r+0x610>)
  403682:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403686:	f7fe fd59 	bl	40213c <__aeabi_dmul>
  40368a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40368e:	9e04      	ldr	r6, [sp, #16]
  403690:	f10b 37ff 	add.w	r7, fp, #4294967295
  403694:	3501      	adds	r5, #1
  403696:	4628      	mov	r0, r5
  403698:	f7fe fcea 	bl	402070 <__aeabi_i2d>
  40369c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4036a0:	f7fe fd4c 	bl	40213c <__aeabi_dmul>
  4036a4:	4b87      	ldr	r3, [pc, #540]	; (4038c4 <_dtoa_r+0x614>)
  4036a6:	2200      	movs	r2, #0
  4036a8:	f7fe fb96 	bl	401dd8 <__adddf3>
  4036ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4036b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4036b2:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  4036b6:	950b      	str	r5, [sp, #44]	; 0x2c
  4036b8:	2e00      	cmp	r6, #0
  4036ba:	d15c      	bne.n	403776 <_dtoa_r+0x4c6>
  4036bc:	2200      	movs	r2, #0
  4036be:	4b82      	ldr	r3, [pc, #520]	; (4038c8 <_dtoa_r+0x618>)
  4036c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4036c4:	f7fe fb86 	bl	401dd4 <__aeabi_dsub>
  4036c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4036ca:	462b      	mov	r3, r5
  4036cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4036d0:	f7fe ffc4 	bl	40265c <__aeabi_dcmpgt>
  4036d4:	2800      	cmp	r0, #0
  4036d6:	f040 82f7 	bne.w	403cc8 <_dtoa_r+0xa18>
  4036da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4036dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4036e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4036e4:	f7fe ff9c 	bl	402620 <__aeabi_dcmplt>
  4036e8:	2800      	cmp	r0, #0
  4036ea:	f040 82eb 	bne.w	403cc4 <_dtoa_r+0xa14>
  4036ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4036f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4036f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4036f8:	2b00      	cmp	r3, #0
  4036fa:	f2c0 8151 	blt.w	4039a0 <_dtoa_r+0x6f0>
  4036fe:	f1bb 0f0e 	cmp.w	fp, #14
  403702:	f300 814d 	bgt.w	4039a0 <_dtoa_r+0x6f0>
  403706:	4b6b      	ldr	r3, [pc, #428]	; (4038b4 <_dtoa_r+0x604>)
  403708:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  40370c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403710:	e9cd 2304 	strd	r2, r3, [sp, #16]
  403714:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403716:	2b00      	cmp	r3, #0
  403718:	f280 80da 	bge.w	4038d0 <_dtoa_r+0x620>
  40371c:	f1b9 0f00 	cmp.w	r9, #0
  403720:	f300 80d6 	bgt.w	4038d0 <_dtoa_r+0x620>
  403724:	f040 82cd 	bne.w	403cc2 <_dtoa_r+0xa12>
  403728:	2200      	movs	r2, #0
  40372a:	4b67      	ldr	r3, [pc, #412]	; (4038c8 <_dtoa_r+0x618>)
  40372c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403730:	f7fe fd04 	bl	40213c <__aeabi_dmul>
  403734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403738:	f7fe ff86 	bl	402648 <__aeabi_dcmpge>
  40373c:	464e      	mov	r6, r9
  40373e:	464f      	mov	r7, r9
  403740:	2800      	cmp	r0, #0
  403742:	f040 82a4 	bne.w	403c8e <_dtoa_r+0x9de>
  403746:	9b06      	ldr	r3, [sp, #24]
  403748:	9a06      	ldr	r2, [sp, #24]
  40374a:	1c5d      	adds	r5, r3, #1
  40374c:	2331      	movs	r3, #49	; 0x31
  40374e:	7013      	strb	r3, [r2, #0]
  403750:	f10b 0b01 	add.w	fp, fp, #1
  403754:	e29f      	b.n	403c96 <_dtoa_r+0x9e6>
  403756:	07f2      	lsls	r2, r6, #31
  403758:	d505      	bpl.n	403766 <_dtoa_r+0x4b6>
  40375a:	e9d7 2300 	ldrd	r2, r3, [r7]
  40375e:	f7fe fced 	bl	40213c <__aeabi_dmul>
  403762:	3501      	adds	r5, #1
  403764:	2301      	movs	r3, #1
  403766:	1076      	asrs	r6, r6, #1
  403768:	3708      	adds	r7, #8
  40376a:	e76d      	b.n	403648 <_dtoa_r+0x398>
  40376c:	2502      	movs	r5, #2
  40376e:	e770      	b.n	403652 <_dtoa_r+0x3a2>
  403770:	465f      	mov	r7, fp
  403772:	464e      	mov	r6, r9
  403774:	e78f      	b.n	403696 <_dtoa_r+0x3e6>
  403776:	9a06      	ldr	r2, [sp, #24]
  403778:	4b4e      	ldr	r3, [pc, #312]	; (4038b4 <_dtoa_r+0x604>)
  40377a:	4432      	add	r2, r6
  40377c:	9211      	str	r2, [sp, #68]	; 0x44
  40377e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403780:	1e71      	subs	r1, r6, #1
  403782:	2a00      	cmp	r2, #0
  403784:	d048      	beq.n	403818 <_dtoa_r+0x568>
  403786:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  40378a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40378e:	2000      	movs	r0, #0
  403790:	494e      	ldr	r1, [pc, #312]	; (4038cc <_dtoa_r+0x61c>)
  403792:	f7fe fdfd 	bl	402390 <__aeabi_ddiv>
  403796:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40379a:	f7fe fb1b 	bl	401dd4 <__aeabi_dsub>
  40379e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4037a2:	9d06      	ldr	r5, [sp, #24]
  4037a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4037a8:	f7fe ff62 	bl	402670 <__aeabi_d2iz>
  4037ac:	4606      	mov	r6, r0
  4037ae:	f7fe fc5f 	bl	402070 <__aeabi_i2d>
  4037b2:	4602      	mov	r2, r0
  4037b4:	460b      	mov	r3, r1
  4037b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4037ba:	f7fe fb0b 	bl	401dd4 <__aeabi_dsub>
  4037be:	3630      	adds	r6, #48	; 0x30
  4037c0:	f805 6b01 	strb.w	r6, [r5], #1
  4037c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4037c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4037cc:	f7fe ff28 	bl	402620 <__aeabi_dcmplt>
  4037d0:	2800      	cmp	r0, #0
  4037d2:	d165      	bne.n	4038a0 <_dtoa_r+0x5f0>
  4037d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4037d8:	2000      	movs	r0, #0
  4037da:	4938      	ldr	r1, [pc, #224]	; (4038bc <_dtoa_r+0x60c>)
  4037dc:	f7fe fafa 	bl	401dd4 <__aeabi_dsub>
  4037e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4037e4:	f7fe ff1c 	bl	402620 <__aeabi_dcmplt>
  4037e8:	2800      	cmp	r0, #0
  4037ea:	f040 80b9 	bne.w	403960 <_dtoa_r+0x6b0>
  4037ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4037f0:	429d      	cmp	r5, r3
  4037f2:	f43f af7c 	beq.w	4036ee <_dtoa_r+0x43e>
  4037f6:	2200      	movs	r2, #0
  4037f8:	4b31      	ldr	r3, [pc, #196]	; (4038c0 <_dtoa_r+0x610>)
  4037fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4037fe:	f7fe fc9d 	bl	40213c <__aeabi_dmul>
  403802:	2200      	movs	r2, #0
  403804:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403808:	4b2d      	ldr	r3, [pc, #180]	; (4038c0 <_dtoa_r+0x610>)
  40380a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40380e:	f7fe fc95 	bl	40213c <__aeabi_dmul>
  403812:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403816:	e7c5      	b.n	4037a4 <_dtoa_r+0x4f4>
  403818:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  40381c:	e9d1 0100 	ldrd	r0, r1, [r1]
  403820:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403824:	f7fe fc8a 	bl	40213c <__aeabi_dmul>
  403828:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40382c:	9d06      	ldr	r5, [sp, #24]
  40382e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403832:	f7fe ff1d 	bl	402670 <__aeabi_d2iz>
  403836:	4606      	mov	r6, r0
  403838:	f7fe fc1a 	bl	402070 <__aeabi_i2d>
  40383c:	3630      	adds	r6, #48	; 0x30
  40383e:	4602      	mov	r2, r0
  403840:	460b      	mov	r3, r1
  403842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403846:	f7fe fac5 	bl	401dd4 <__aeabi_dsub>
  40384a:	f805 6b01 	strb.w	r6, [r5], #1
  40384e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403850:	42ab      	cmp	r3, r5
  403852:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403856:	f04f 0200 	mov.w	r2, #0
  40385a:	d125      	bne.n	4038a8 <_dtoa_r+0x5f8>
  40385c:	4b1b      	ldr	r3, [pc, #108]	; (4038cc <_dtoa_r+0x61c>)
  40385e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403862:	f7fe fab9 	bl	401dd8 <__adddf3>
  403866:	4602      	mov	r2, r0
  403868:	460b      	mov	r3, r1
  40386a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40386e:	f7fe fef5 	bl	40265c <__aeabi_dcmpgt>
  403872:	2800      	cmp	r0, #0
  403874:	d174      	bne.n	403960 <_dtoa_r+0x6b0>
  403876:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40387a:	2000      	movs	r0, #0
  40387c:	4913      	ldr	r1, [pc, #76]	; (4038cc <_dtoa_r+0x61c>)
  40387e:	f7fe faa9 	bl	401dd4 <__aeabi_dsub>
  403882:	4602      	mov	r2, r0
  403884:	460b      	mov	r3, r1
  403886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40388a:	f7fe fec9 	bl	402620 <__aeabi_dcmplt>
  40388e:	2800      	cmp	r0, #0
  403890:	f43f af2d 	beq.w	4036ee <_dtoa_r+0x43e>
  403894:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  403898:	2b30      	cmp	r3, #48	; 0x30
  40389a:	f105 32ff 	add.w	r2, r5, #4294967295
  40389e:	d001      	beq.n	4038a4 <_dtoa_r+0x5f4>
  4038a0:	46bb      	mov	fp, r7
  4038a2:	e04c      	b.n	40393e <_dtoa_r+0x68e>
  4038a4:	4615      	mov	r5, r2
  4038a6:	e7f5      	b.n	403894 <_dtoa_r+0x5e4>
  4038a8:	4b05      	ldr	r3, [pc, #20]	; (4038c0 <_dtoa_r+0x610>)
  4038aa:	f7fe fc47 	bl	40213c <__aeabi_dmul>
  4038ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4038b2:	e7bc      	b.n	40382e <_dtoa_r+0x57e>
  4038b4:	004054b0 	.word	0x004054b0
  4038b8:	00405488 	.word	0x00405488
  4038bc:	3ff00000 	.word	0x3ff00000
  4038c0:	40240000 	.word	0x40240000
  4038c4:	401c0000 	.word	0x401c0000
  4038c8:	40140000 	.word	0x40140000
  4038cc:	3fe00000 	.word	0x3fe00000
  4038d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4038d4:	9d06      	ldr	r5, [sp, #24]
  4038d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4038da:	4630      	mov	r0, r6
  4038dc:	4639      	mov	r1, r7
  4038de:	f7fe fd57 	bl	402390 <__aeabi_ddiv>
  4038e2:	f7fe fec5 	bl	402670 <__aeabi_d2iz>
  4038e6:	4680      	mov	r8, r0
  4038e8:	f7fe fbc2 	bl	402070 <__aeabi_i2d>
  4038ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4038f0:	f7fe fc24 	bl	40213c <__aeabi_dmul>
  4038f4:	4602      	mov	r2, r0
  4038f6:	460b      	mov	r3, r1
  4038f8:	4630      	mov	r0, r6
  4038fa:	4639      	mov	r1, r7
  4038fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
  403900:	f7fe fa68 	bl	401dd4 <__aeabi_dsub>
  403904:	f805 6b01 	strb.w	r6, [r5], #1
  403908:	9e06      	ldr	r6, [sp, #24]
  40390a:	1bae      	subs	r6, r5, r6
  40390c:	45b1      	cmp	r9, r6
  40390e:	4602      	mov	r2, r0
  403910:	460b      	mov	r3, r1
  403912:	d138      	bne.n	403986 <_dtoa_r+0x6d6>
  403914:	f7fe fa60 	bl	401dd8 <__adddf3>
  403918:	4606      	mov	r6, r0
  40391a:	460f      	mov	r7, r1
  40391c:	4602      	mov	r2, r0
  40391e:	460b      	mov	r3, r1
  403920:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403924:	f7fe fe7c 	bl	402620 <__aeabi_dcmplt>
  403928:	b9c8      	cbnz	r0, 40395e <_dtoa_r+0x6ae>
  40392a:	4632      	mov	r2, r6
  40392c:	463b      	mov	r3, r7
  40392e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403932:	f7fe fe6b 	bl	40260c <__aeabi_dcmpeq>
  403936:	b110      	cbz	r0, 40393e <_dtoa_r+0x68e>
  403938:	f018 0f01 	tst.w	r8, #1
  40393c:	d10f      	bne.n	40395e <_dtoa_r+0x6ae>
  40393e:	4651      	mov	r1, sl
  403940:	4620      	mov	r0, r4
  403942:	f000 fd01 	bl	404348 <_Bfree>
  403946:	2300      	movs	r3, #0
  403948:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40394a:	702b      	strb	r3, [r5, #0]
  40394c:	f10b 0301 	add.w	r3, fp, #1
  403950:	6013      	str	r3, [r2, #0]
  403952:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403954:	2b00      	cmp	r3, #0
  403956:	f43f acf0 	beq.w	40333a <_dtoa_r+0x8a>
  40395a:	601d      	str	r5, [r3, #0]
  40395c:	e4ed      	b.n	40333a <_dtoa_r+0x8a>
  40395e:	465f      	mov	r7, fp
  403960:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  403964:	2a39      	cmp	r2, #57	; 0x39
  403966:	f105 33ff 	add.w	r3, r5, #4294967295
  40396a:	d106      	bne.n	40397a <_dtoa_r+0x6ca>
  40396c:	9a06      	ldr	r2, [sp, #24]
  40396e:	429a      	cmp	r2, r3
  403970:	d107      	bne.n	403982 <_dtoa_r+0x6d2>
  403972:	2330      	movs	r3, #48	; 0x30
  403974:	7013      	strb	r3, [r2, #0]
  403976:	3701      	adds	r7, #1
  403978:	4613      	mov	r3, r2
  40397a:	781a      	ldrb	r2, [r3, #0]
  40397c:	3201      	adds	r2, #1
  40397e:	701a      	strb	r2, [r3, #0]
  403980:	e78e      	b.n	4038a0 <_dtoa_r+0x5f0>
  403982:	461d      	mov	r5, r3
  403984:	e7ec      	b.n	403960 <_dtoa_r+0x6b0>
  403986:	2200      	movs	r2, #0
  403988:	4bb4      	ldr	r3, [pc, #720]	; (403c5c <_dtoa_r+0x9ac>)
  40398a:	f7fe fbd7 	bl	40213c <__aeabi_dmul>
  40398e:	2200      	movs	r2, #0
  403990:	2300      	movs	r3, #0
  403992:	4606      	mov	r6, r0
  403994:	460f      	mov	r7, r1
  403996:	f7fe fe39 	bl	40260c <__aeabi_dcmpeq>
  40399a:	2800      	cmp	r0, #0
  40399c:	d09b      	beq.n	4038d6 <_dtoa_r+0x626>
  40399e:	e7ce      	b.n	40393e <_dtoa_r+0x68e>
  4039a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4039a2:	2a00      	cmp	r2, #0
  4039a4:	f000 8129 	beq.w	403bfa <_dtoa_r+0x94a>
  4039a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4039aa:	2a01      	cmp	r2, #1
  4039ac:	f300 810e 	bgt.w	403bcc <_dtoa_r+0x91c>
  4039b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4039b2:	2a00      	cmp	r2, #0
  4039b4:	f000 8106 	beq.w	403bc4 <_dtoa_r+0x914>
  4039b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4039bc:	9e08      	ldr	r6, [sp, #32]
  4039be:	4645      	mov	r5, r8
  4039c0:	9a07      	ldr	r2, [sp, #28]
  4039c2:	2101      	movs	r1, #1
  4039c4:	441a      	add	r2, r3
  4039c6:	4620      	mov	r0, r4
  4039c8:	4498      	add	r8, r3
  4039ca:	9207      	str	r2, [sp, #28]
  4039cc:	f000 fd5c 	bl	404488 <__i2b>
  4039d0:	4607      	mov	r7, r0
  4039d2:	2d00      	cmp	r5, #0
  4039d4:	dd0b      	ble.n	4039ee <_dtoa_r+0x73e>
  4039d6:	9b07      	ldr	r3, [sp, #28]
  4039d8:	2b00      	cmp	r3, #0
  4039da:	dd08      	ble.n	4039ee <_dtoa_r+0x73e>
  4039dc:	42ab      	cmp	r3, r5
  4039de:	9a07      	ldr	r2, [sp, #28]
  4039e0:	bfa8      	it	ge
  4039e2:	462b      	movge	r3, r5
  4039e4:	eba8 0803 	sub.w	r8, r8, r3
  4039e8:	1aed      	subs	r5, r5, r3
  4039ea:	1ad3      	subs	r3, r2, r3
  4039ec:	9307      	str	r3, [sp, #28]
  4039ee:	9b08      	ldr	r3, [sp, #32]
  4039f0:	b1fb      	cbz	r3, 403a32 <_dtoa_r+0x782>
  4039f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039f4:	2b00      	cmp	r3, #0
  4039f6:	f000 8104 	beq.w	403c02 <_dtoa_r+0x952>
  4039fa:	2e00      	cmp	r6, #0
  4039fc:	dd11      	ble.n	403a22 <_dtoa_r+0x772>
  4039fe:	4639      	mov	r1, r7
  403a00:	4632      	mov	r2, r6
  403a02:	4620      	mov	r0, r4
  403a04:	f000 fdd6 	bl	4045b4 <__pow5mult>
  403a08:	4652      	mov	r2, sl
  403a0a:	4601      	mov	r1, r0
  403a0c:	4607      	mov	r7, r0
  403a0e:	4620      	mov	r0, r4
  403a10:	f000 fd43 	bl	40449a <__multiply>
  403a14:	4651      	mov	r1, sl
  403a16:	900a      	str	r0, [sp, #40]	; 0x28
  403a18:	4620      	mov	r0, r4
  403a1a:	f000 fc95 	bl	404348 <_Bfree>
  403a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403a20:	469a      	mov	sl, r3
  403a22:	9b08      	ldr	r3, [sp, #32]
  403a24:	1b9a      	subs	r2, r3, r6
  403a26:	d004      	beq.n	403a32 <_dtoa_r+0x782>
  403a28:	4651      	mov	r1, sl
  403a2a:	4620      	mov	r0, r4
  403a2c:	f000 fdc2 	bl	4045b4 <__pow5mult>
  403a30:	4682      	mov	sl, r0
  403a32:	2101      	movs	r1, #1
  403a34:	4620      	mov	r0, r4
  403a36:	f000 fd27 	bl	404488 <__i2b>
  403a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403a3c:	2b00      	cmp	r3, #0
  403a3e:	4606      	mov	r6, r0
  403a40:	f340 80e1 	ble.w	403c06 <_dtoa_r+0x956>
  403a44:	461a      	mov	r2, r3
  403a46:	4601      	mov	r1, r0
  403a48:	4620      	mov	r0, r4
  403a4a:	f000 fdb3 	bl	4045b4 <__pow5mult>
  403a4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403a50:	2b01      	cmp	r3, #1
  403a52:	4606      	mov	r6, r0
  403a54:	f340 80da 	ble.w	403c0c <_dtoa_r+0x95c>
  403a58:	2300      	movs	r3, #0
  403a5a:	9308      	str	r3, [sp, #32]
  403a5c:	6933      	ldr	r3, [r6, #16]
  403a5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  403a62:	6918      	ldr	r0, [r3, #16]
  403a64:	f000 fcc2 	bl	4043ec <__hi0bits>
  403a68:	f1c0 0020 	rsb	r0, r0, #32
  403a6c:	9b07      	ldr	r3, [sp, #28]
  403a6e:	4418      	add	r0, r3
  403a70:	f010 001f 	ands.w	r0, r0, #31
  403a74:	f000 80f0 	beq.w	403c58 <_dtoa_r+0x9a8>
  403a78:	f1c0 0320 	rsb	r3, r0, #32
  403a7c:	2b04      	cmp	r3, #4
  403a7e:	f340 80e2 	ble.w	403c46 <_dtoa_r+0x996>
  403a82:	9b07      	ldr	r3, [sp, #28]
  403a84:	f1c0 001c 	rsb	r0, r0, #28
  403a88:	4480      	add	r8, r0
  403a8a:	4405      	add	r5, r0
  403a8c:	4403      	add	r3, r0
  403a8e:	9307      	str	r3, [sp, #28]
  403a90:	f1b8 0f00 	cmp.w	r8, #0
  403a94:	dd05      	ble.n	403aa2 <_dtoa_r+0x7f2>
  403a96:	4651      	mov	r1, sl
  403a98:	4642      	mov	r2, r8
  403a9a:	4620      	mov	r0, r4
  403a9c:	f000 fdd8 	bl	404650 <__lshift>
  403aa0:	4682      	mov	sl, r0
  403aa2:	9b07      	ldr	r3, [sp, #28]
  403aa4:	2b00      	cmp	r3, #0
  403aa6:	dd05      	ble.n	403ab4 <_dtoa_r+0x804>
  403aa8:	4631      	mov	r1, r6
  403aaa:	461a      	mov	r2, r3
  403aac:	4620      	mov	r0, r4
  403aae:	f000 fdcf 	bl	404650 <__lshift>
  403ab2:	4606      	mov	r6, r0
  403ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403ab6:	2b00      	cmp	r3, #0
  403ab8:	f000 80d2 	beq.w	403c60 <_dtoa_r+0x9b0>
  403abc:	4631      	mov	r1, r6
  403abe:	4650      	mov	r0, sl
  403ac0:	f000 fe17 	bl	4046f2 <__mcmp>
  403ac4:	2800      	cmp	r0, #0
  403ac6:	f280 80cb 	bge.w	403c60 <_dtoa_r+0x9b0>
  403aca:	2300      	movs	r3, #0
  403acc:	4651      	mov	r1, sl
  403ace:	220a      	movs	r2, #10
  403ad0:	4620      	mov	r0, r4
  403ad2:	f000 fc50 	bl	404376 <__multadd>
  403ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ad8:	f10b 3bff 	add.w	fp, fp, #4294967295
  403adc:	4682      	mov	sl, r0
  403ade:	2b00      	cmp	r3, #0
  403ae0:	f000 81aa 	beq.w	403e38 <_dtoa_r+0xb88>
  403ae4:	2300      	movs	r3, #0
  403ae6:	4639      	mov	r1, r7
  403ae8:	220a      	movs	r2, #10
  403aea:	4620      	mov	r0, r4
  403aec:	f000 fc43 	bl	404376 <__multadd>
  403af0:	9b04      	ldr	r3, [sp, #16]
  403af2:	2b00      	cmp	r3, #0
  403af4:	4607      	mov	r7, r0
  403af6:	dc03      	bgt.n	403b00 <_dtoa_r+0x850>
  403af8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403afa:	2b02      	cmp	r3, #2
  403afc:	f300 80b8 	bgt.w	403c70 <_dtoa_r+0x9c0>
  403b00:	2d00      	cmp	r5, #0
  403b02:	dd05      	ble.n	403b10 <_dtoa_r+0x860>
  403b04:	4639      	mov	r1, r7
  403b06:	462a      	mov	r2, r5
  403b08:	4620      	mov	r0, r4
  403b0a:	f000 fda1 	bl	404650 <__lshift>
  403b0e:	4607      	mov	r7, r0
  403b10:	9b08      	ldr	r3, [sp, #32]
  403b12:	2b00      	cmp	r3, #0
  403b14:	f000 8110 	beq.w	403d38 <_dtoa_r+0xa88>
  403b18:	6879      	ldr	r1, [r7, #4]
  403b1a:	4620      	mov	r0, r4
  403b1c:	f000 fbe0 	bl	4042e0 <_Balloc>
  403b20:	693a      	ldr	r2, [r7, #16]
  403b22:	3202      	adds	r2, #2
  403b24:	4605      	mov	r5, r0
  403b26:	0092      	lsls	r2, r2, #2
  403b28:	f107 010c 	add.w	r1, r7, #12
  403b2c:	300c      	adds	r0, #12
  403b2e:	f7fe fdeb 	bl	402708 <memcpy>
  403b32:	2201      	movs	r2, #1
  403b34:	4629      	mov	r1, r5
  403b36:	4620      	mov	r0, r4
  403b38:	f000 fd8a 	bl	404650 <__lshift>
  403b3c:	9b02      	ldr	r3, [sp, #8]
  403b3e:	f8dd 8018 	ldr.w	r8, [sp, #24]
  403b42:	9707      	str	r7, [sp, #28]
  403b44:	f003 0301 	and.w	r3, r3, #1
  403b48:	4607      	mov	r7, r0
  403b4a:	9308      	str	r3, [sp, #32]
  403b4c:	4631      	mov	r1, r6
  403b4e:	4650      	mov	r0, sl
  403b50:	f7ff fb22 	bl	403198 <quorem>
  403b54:	9907      	ldr	r1, [sp, #28]
  403b56:	4605      	mov	r5, r0
  403b58:	f100 0930 	add.w	r9, r0, #48	; 0x30
  403b5c:	4650      	mov	r0, sl
  403b5e:	f000 fdc8 	bl	4046f2 <__mcmp>
  403b62:	463a      	mov	r2, r7
  403b64:	9002      	str	r0, [sp, #8]
  403b66:	4631      	mov	r1, r6
  403b68:	4620      	mov	r0, r4
  403b6a:	f000 fddc 	bl	404726 <__mdiff>
  403b6e:	68c3      	ldr	r3, [r0, #12]
  403b70:	4602      	mov	r2, r0
  403b72:	2b00      	cmp	r3, #0
  403b74:	f040 80e2 	bne.w	403d3c <_dtoa_r+0xa8c>
  403b78:	4601      	mov	r1, r0
  403b7a:	9009      	str	r0, [sp, #36]	; 0x24
  403b7c:	4650      	mov	r0, sl
  403b7e:	f000 fdb8 	bl	4046f2 <__mcmp>
  403b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403b84:	4603      	mov	r3, r0
  403b86:	4611      	mov	r1, r2
  403b88:	4620      	mov	r0, r4
  403b8a:	9309      	str	r3, [sp, #36]	; 0x24
  403b8c:	f000 fbdc 	bl	404348 <_Bfree>
  403b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403b92:	2b00      	cmp	r3, #0
  403b94:	f040 80d4 	bne.w	403d40 <_dtoa_r+0xa90>
  403b98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403b9a:	2a00      	cmp	r2, #0
  403b9c:	f040 80d0 	bne.w	403d40 <_dtoa_r+0xa90>
  403ba0:	9a08      	ldr	r2, [sp, #32]
  403ba2:	2a00      	cmp	r2, #0
  403ba4:	f040 80cc 	bne.w	403d40 <_dtoa_r+0xa90>
  403ba8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  403bac:	f000 80e8 	beq.w	403d80 <_dtoa_r+0xad0>
  403bb0:	9b02      	ldr	r3, [sp, #8]
  403bb2:	2b00      	cmp	r3, #0
  403bb4:	dd01      	ble.n	403bba <_dtoa_r+0x90a>
  403bb6:	f105 0931 	add.w	r9, r5, #49	; 0x31
  403bba:	f108 0501 	add.w	r5, r8, #1
  403bbe:	f888 9000 	strb.w	r9, [r8]
  403bc2:	e06a      	b.n	403c9a <_dtoa_r+0x9ea>
  403bc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403bc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  403bca:	e6f7      	b.n	4039bc <_dtoa_r+0x70c>
  403bcc:	9b08      	ldr	r3, [sp, #32]
  403bce:	f109 36ff 	add.w	r6, r9, #4294967295
  403bd2:	42b3      	cmp	r3, r6
  403bd4:	bfbf      	itttt	lt
  403bd6:	9b08      	ldrlt	r3, [sp, #32]
  403bd8:	9608      	strlt	r6, [sp, #32]
  403bda:	1af2      	sublt	r2, r6, r3
  403bdc:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  403bde:	bfb7      	itett	lt
  403be0:	189b      	addlt	r3, r3, r2
  403be2:	1b9e      	subge	r6, r3, r6
  403be4:	930c      	strlt	r3, [sp, #48]	; 0x30
  403be6:	2600      	movlt	r6, #0
  403be8:	f1b9 0f00 	cmp.w	r9, #0
  403bec:	bfb9      	ittee	lt
  403bee:	eba8 0509 	sublt.w	r5, r8, r9
  403bf2:	2300      	movlt	r3, #0
  403bf4:	4645      	movge	r5, r8
  403bf6:	464b      	movge	r3, r9
  403bf8:	e6e2      	b.n	4039c0 <_dtoa_r+0x710>
  403bfa:	9e08      	ldr	r6, [sp, #32]
  403bfc:	9f09      	ldr	r7, [sp, #36]	; 0x24
  403bfe:	4645      	mov	r5, r8
  403c00:	e6e7      	b.n	4039d2 <_dtoa_r+0x722>
  403c02:	9a08      	ldr	r2, [sp, #32]
  403c04:	e710      	b.n	403a28 <_dtoa_r+0x778>
  403c06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403c08:	2b01      	cmp	r3, #1
  403c0a:	dc18      	bgt.n	403c3e <_dtoa_r+0x98e>
  403c0c:	9b02      	ldr	r3, [sp, #8]
  403c0e:	b9b3      	cbnz	r3, 403c3e <_dtoa_r+0x98e>
  403c10:	9b03      	ldr	r3, [sp, #12]
  403c12:	f3c3 0313 	ubfx	r3, r3, #0, #20
  403c16:	b9a3      	cbnz	r3, 403c42 <_dtoa_r+0x992>
  403c18:	9b03      	ldr	r3, [sp, #12]
  403c1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  403c1e:	0d1b      	lsrs	r3, r3, #20
  403c20:	051b      	lsls	r3, r3, #20
  403c22:	b12b      	cbz	r3, 403c30 <_dtoa_r+0x980>
  403c24:	9b07      	ldr	r3, [sp, #28]
  403c26:	3301      	adds	r3, #1
  403c28:	9307      	str	r3, [sp, #28]
  403c2a:	f108 0801 	add.w	r8, r8, #1
  403c2e:	2301      	movs	r3, #1
  403c30:	9308      	str	r3, [sp, #32]
  403c32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403c34:	2b00      	cmp	r3, #0
  403c36:	f47f af11 	bne.w	403a5c <_dtoa_r+0x7ac>
  403c3a:	2001      	movs	r0, #1
  403c3c:	e716      	b.n	403a6c <_dtoa_r+0x7bc>
  403c3e:	2300      	movs	r3, #0
  403c40:	e7f6      	b.n	403c30 <_dtoa_r+0x980>
  403c42:	9b02      	ldr	r3, [sp, #8]
  403c44:	e7f4      	b.n	403c30 <_dtoa_r+0x980>
  403c46:	f43f af23 	beq.w	403a90 <_dtoa_r+0x7e0>
  403c4a:	9a07      	ldr	r2, [sp, #28]
  403c4c:	331c      	adds	r3, #28
  403c4e:	441a      	add	r2, r3
  403c50:	4498      	add	r8, r3
  403c52:	441d      	add	r5, r3
  403c54:	4613      	mov	r3, r2
  403c56:	e71a      	b.n	403a8e <_dtoa_r+0x7de>
  403c58:	4603      	mov	r3, r0
  403c5a:	e7f6      	b.n	403c4a <_dtoa_r+0x99a>
  403c5c:	40240000 	.word	0x40240000
  403c60:	f1b9 0f00 	cmp.w	r9, #0
  403c64:	dc33      	bgt.n	403cce <_dtoa_r+0xa1e>
  403c66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403c68:	2b02      	cmp	r3, #2
  403c6a:	dd30      	ble.n	403cce <_dtoa_r+0xa1e>
  403c6c:	f8cd 9010 	str.w	r9, [sp, #16]
  403c70:	9b04      	ldr	r3, [sp, #16]
  403c72:	b963      	cbnz	r3, 403c8e <_dtoa_r+0x9de>
  403c74:	4631      	mov	r1, r6
  403c76:	2205      	movs	r2, #5
  403c78:	4620      	mov	r0, r4
  403c7a:	f000 fb7c 	bl	404376 <__multadd>
  403c7e:	4601      	mov	r1, r0
  403c80:	4606      	mov	r6, r0
  403c82:	4650      	mov	r0, sl
  403c84:	f000 fd35 	bl	4046f2 <__mcmp>
  403c88:	2800      	cmp	r0, #0
  403c8a:	f73f ad5c 	bgt.w	403746 <_dtoa_r+0x496>
  403c8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403c90:	9d06      	ldr	r5, [sp, #24]
  403c92:	ea6f 0b03 	mvn.w	fp, r3
  403c96:	2300      	movs	r3, #0
  403c98:	9307      	str	r3, [sp, #28]
  403c9a:	4631      	mov	r1, r6
  403c9c:	4620      	mov	r0, r4
  403c9e:	f000 fb53 	bl	404348 <_Bfree>
  403ca2:	2f00      	cmp	r7, #0
  403ca4:	f43f ae4b 	beq.w	40393e <_dtoa_r+0x68e>
  403ca8:	9b07      	ldr	r3, [sp, #28]
  403caa:	b12b      	cbz	r3, 403cb8 <_dtoa_r+0xa08>
  403cac:	42bb      	cmp	r3, r7
  403cae:	d003      	beq.n	403cb8 <_dtoa_r+0xa08>
  403cb0:	4619      	mov	r1, r3
  403cb2:	4620      	mov	r0, r4
  403cb4:	f000 fb48 	bl	404348 <_Bfree>
  403cb8:	4639      	mov	r1, r7
  403cba:	4620      	mov	r0, r4
  403cbc:	f000 fb44 	bl	404348 <_Bfree>
  403cc0:	e63d      	b.n	40393e <_dtoa_r+0x68e>
  403cc2:	2600      	movs	r6, #0
  403cc4:	4637      	mov	r7, r6
  403cc6:	e7e2      	b.n	403c8e <_dtoa_r+0x9de>
  403cc8:	46bb      	mov	fp, r7
  403cca:	4637      	mov	r7, r6
  403ccc:	e53b      	b.n	403746 <_dtoa_r+0x496>
  403cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403cd0:	f8cd 9010 	str.w	r9, [sp, #16]
  403cd4:	2b00      	cmp	r3, #0
  403cd6:	f47f af13 	bne.w	403b00 <_dtoa_r+0x850>
  403cda:	9d06      	ldr	r5, [sp, #24]
  403cdc:	4631      	mov	r1, r6
  403cde:	4650      	mov	r0, sl
  403ce0:	f7ff fa5a 	bl	403198 <quorem>
  403ce4:	f100 0930 	add.w	r9, r0, #48	; 0x30
  403ce8:	f805 9b01 	strb.w	r9, [r5], #1
  403cec:	9b06      	ldr	r3, [sp, #24]
  403cee:	9a04      	ldr	r2, [sp, #16]
  403cf0:	1aeb      	subs	r3, r5, r3
  403cf2:	429a      	cmp	r2, r3
  403cf4:	f300 8083 	bgt.w	403dfe <_dtoa_r+0xb4e>
  403cf8:	9b06      	ldr	r3, [sp, #24]
  403cfa:	2a01      	cmp	r2, #1
  403cfc:	bfac      	ite	ge
  403cfe:	189b      	addge	r3, r3, r2
  403d00:	3301      	addlt	r3, #1
  403d02:	4698      	mov	r8, r3
  403d04:	2300      	movs	r3, #0
  403d06:	9307      	str	r3, [sp, #28]
  403d08:	4651      	mov	r1, sl
  403d0a:	2201      	movs	r2, #1
  403d0c:	4620      	mov	r0, r4
  403d0e:	f000 fc9f 	bl	404650 <__lshift>
  403d12:	4631      	mov	r1, r6
  403d14:	4682      	mov	sl, r0
  403d16:	f000 fcec 	bl	4046f2 <__mcmp>
  403d1a:	2800      	cmp	r0, #0
  403d1c:	dc35      	bgt.n	403d8a <_dtoa_r+0xada>
  403d1e:	d102      	bne.n	403d26 <_dtoa_r+0xa76>
  403d20:	f019 0f01 	tst.w	r9, #1
  403d24:	d131      	bne.n	403d8a <_dtoa_r+0xada>
  403d26:	4645      	mov	r5, r8
  403d28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  403d2c:	2b30      	cmp	r3, #48	; 0x30
  403d2e:	f105 32ff 	add.w	r2, r5, #4294967295
  403d32:	d1b2      	bne.n	403c9a <_dtoa_r+0x9ea>
  403d34:	4615      	mov	r5, r2
  403d36:	e7f7      	b.n	403d28 <_dtoa_r+0xa78>
  403d38:	4638      	mov	r0, r7
  403d3a:	e6ff      	b.n	403b3c <_dtoa_r+0x88c>
  403d3c:	2301      	movs	r3, #1
  403d3e:	e722      	b.n	403b86 <_dtoa_r+0x8d6>
  403d40:	9a02      	ldr	r2, [sp, #8]
  403d42:	2a00      	cmp	r2, #0
  403d44:	db04      	blt.n	403d50 <_dtoa_r+0xaa0>
  403d46:	d129      	bne.n	403d9c <_dtoa_r+0xaec>
  403d48:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403d4a:	bb3a      	cbnz	r2, 403d9c <_dtoa_r+0xaec>
  403d4c:	9a08      	ldr	r2, [sp, #32]
  403d4e:	bb2a      	cbnz	r2, 403d9c <_dtoa_r+0xaec>
  403d50:	2b00      	cmp	r3, #0
  403d52:	f77f af32 	ble.w	403bba <_dtoa_r+0x90a>
  403d56:	4651      	mov	r1, sl
  403d58:	2201      	movs	r2, #1
  403d5a:	4620      	mov	r0, r4
  403d5c:	f000 fc78 	bl	404650 <__lshift>
  403d60:	4631      	mov	r1, r6
  403d62:	4682      	mov	sl, r0
  403d64:	f000 fcc5 	bl	4046f2 <__mcmp>
  403d68:	2800      	cmp	r0, #0
  403d6a:	dc05      	bgt.n	403d78 <_dtoa_r+0xac8>
  403d6c:	f47f af25 	bne.w	403bba <_dtoa_r+0x90a>
  403d70:	f019 0f01 	tst.w	r9, #1
  403d74:	f43f af21 	beq.w	403bba <_dtoa_r+0x90a>
  403d78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  403d7c:	f47f af1b 	bne.w	403bb6 <_dtoa_r+0x906>
  403d80:	2339      	movs	r3, #57	; 0x39
  403d82:	f888 3000 	strb.w	r3, [r8]
  403d86:	f108 0801 	add.w	r8, r8, #1
  403d8a:	4645      	mov	r5, r8
  403d8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  403d90:	2b39      	cmp	r3, #57	; 0x39
  403d92:	f105 32ff 	add.w	r2, r5, #4294967295
  403d96:	d03a      	beq.n	403e0e <_dtoa_r+0xb5e>
  403d98:	3301      	adds	r3, #1
  403d9a:	e03f      	b.n	403e1c <_dtoa_r+0xb6c>
  403d9c:	2b00      	cmp	r3, #0
  403d9e:	f108 0501 	add.w	r5, r8, #1
  403da2:	dd05      	ble.n	403db0 <_dtoa_r+0xb00>
  403da4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  403da8:	d0ea      	beq.n	403d80 <_dtoa_r+0xad0>
  403daa:	f109 0901 	add.w	r9, r9, #1
  403dae:	e706      	b.n	403bbe <_dtoa_r+0x90e>
  403db0:	9b06      	ldr	r3, [sp, #24]
  403db2:	9a04      	ldr	r2, [sp, #16]
  403db4:	f805 9c01 	strb.w	r9, [r5, #-1]
  403db8:	1aeb      	subs	r3, r5, r3
  403dba:	4293      	cmp	r3, r2
  403dbc:	46a8      	mov	r8, r5
  403dbe:	d0a3      	beq.n	403d08 <_dtoa_r+0xa58>
  403dc0:	4651      	mov	r1, sl
  403dc2:	2300      	movs	r3, #0
  403dc4:	220a      	movs	r2, #10
  403dc6:	4620      	mov	r0, r4
  403dc8:	f000 fad5 	bl	404376 <__multadd>
  403dcc:	9b07      	ldr	r3, [sp, #28]
  403dce:	9907      	ldr	r1, [sp, #28]
  403dd0:	42bb      	cmp	r3, r7
  403dd2:	4682      	mov	sl, r0
  403dd4:	f04f 0300 	mov.w	r3, #0
  403dd8:	f04f 020a 	mov.w	r2, #10
  403ddc:	4620      	mov	r0, r4
  403dde:	d104      	bne.n	403dea <_dtoa_r+0xb3a>
  403de0:	f000 fac9 	bl	404376 <__multadd>
  403de4:	9007      	str	r0, [sp, #28]
  403de6:	4607      	mov	r7, r0
  403de8:	e6b0      	b.n	403b4c <_dtoa_r+0x89c>
  403dea:	f000 fac4 	bl	404376 <__multadd>
  403dee:	2300      	movs	r3, #0
  403df0:	9007      	str	r0, [sp, #28]
  403df2:	220a      	movs	r2, #10
  403df4:	4639      	mov	r1, r7
  403df6:	4620      	mov	r0, r4
  403df8:	f000 fabd 	bl	404376 <__multadd>
  403dfc:	e7f3      	b.n	403de6 <_dtoa_r+0xb36>
  403dfe:	4651      	mov	r1, sl
  403e00:	2300      	movs	r3, #0
  403e02:	220a      	movs	r2, #10
  403e04:	4620      	mov	r0, r4
  403e06:	f000 fab6 	bl	404376 <__multadd>
  403e0a:	4682      	mov	sl, r0
  403e0c:	e766      	b.n	403cdc <_dtoa_r+0xa2c>
  403e0e:	9b06      	ldr	r3, [sp, #24]
  403e10:	4293      	cmp	r3, r2
  403e12:	d105      	bne.n	403e20 <_dtoa_r+0xb70>
  403e14:	9a06      	ldr	r2, [sp, #24]
  403e16:	f10b 0b01 	add.w	fp, fp, #1
  403e1a:	2331      	movs	r3, #49	; 0x31
  403e1c:	7013      	strb	r3, [r2, #0]
  403e1e:	e73c      	b.n	403c9a <_dtoa_r+0x9ea>
  403e20:	4615      	mov	r5, r2
  403e22:	e7b3      	b.n	403d8c <_dtoa_r+0xadc>
  403e24:	4b09      	ldr	r3, [pc, #36]	; (403e4c <_dtoa_r+0xb9c>)
  403e26:	f7ff baa5 	b.w	403374 <_dtoa_r+0xc4>
  403e2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403e2c:	2b00      	cmp	r3, #0
  403e2e:	f47f aa7f 	bne.w	403330 <_dtoa_r+0x80>
  403e32:	4b07      	ldr	r3, [pc, #28]	; (403e50 <_dtoa_r+0xba0>)
  403e34:	f7ff ba9e 	b.w	403374 <_dtoa_r+0xc4>
  403e38:	9b04      	ldr	r3, [sp, #16]
  403e3a:	2b00      	cmp	r3, #0
  403e3c:	f73f af4d 	bgt.w	403cda <_dtoa_r+0xa2a>
  403e40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403e42:	2b02      	cmp	r3, #2
  403e44:	f77f af49 	ble.w	403cda <_dtoa_r+0xa2a>
  403e48:	e712      	b.n	403c70 <_dtoa_r+0x9c0>
  403e4a:	bf00      	nop
  403e4c:	004053f0 	.word	0x004053f0
  403e50:	00405414 	.word	0x00405414

00403e54 <__sflush_r>:
  403e54:	898a      	ldrh	r2, [r1, #12]
  403e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403e5a:	4605      	mov	r5, r0
  403e5c:	0710      	lsls	r0, r2, #28
  403e5e:	460c      	mov	r4, r1
  403e60:	d45a      	bmi.n	403f18 <__sflush_r+0xc4>
  403e62:	684b      	ldr	r3, [r1, #4]
  403e64:	2b00      	cmp	r3, #0
  403e66:	dc05      	bgt.n	403e74 <__sflush_r+0x20>
  403e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  403e6a:	2b00      	cmp	r3, #0
  403e6c:	dc02      	bgt.n	403e74 <__sflush_r+0x20>
  403e6e:	2000      	movs	r0, #0
  403e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403e76:	2e00      	cmp	r6, #0
  403e78:	d0f9      	beq.n	403e6e <__sflush_r+0x1a>
  403e7a:	2300      	movs	r3, #0
  403e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  403e80:	682f      	ldr	r7, [r5, #0]
  403e82:	602b      	str	r3, [r5, #0]
  403e84:	d033      	beq.n	403eee <__sflush_r+0x9a>
  403e86:	6d60      	ldr	r0, [r4, #84]	; 0x54
  403e88:	89a3      	ldrh	r3, [r4, #12]
  403e8a:	075a      	lsls	r2, r3, #29
  403e8c:	d505      	bpl.n	403e9a <__sflush_r+0x46>
  403e8e:	6863      	ldr	r3, [r4, #4]
  403e90:	1ac0      	subs	r0, r0, r3
  403e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
  403e94:	b10b      	cbz	r3, 403e9a <__sflush_r+0x46>
  403e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
  403e98:	1ac0      	subs	r0, r0, r3
  403e9a:	2300      	movs	r3, #0
  403e9c:	4602      	mov	r2, r0
  403e9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403ea0:	6a21      	ldr	r1, [r4, #32]
  403ea2:	4628      	mov	r0, r5
  403ea4:	47b0      	blx	r6
  403ea6:	1c43      	adds	r3, r0, #1
  403ea8:	89a3      	ldrh	r3, [r4, #12]
  403eaa:	d106      	bne.n	403eba <__sflush_r+0x66>
  403eac:	6829      	ldr	r1, [r5, #0]
  403eae:	291d      	cmp	r1, #29
  403eb0:	d84b      	bhi.n	403f4a <__sflush_r+0xf6>
  403eb2:	4a2b      	ldr	r2, [pc, #172]	; (403f60 <__sflush_r+0x10c>)
  403eb4:	40ca      	lsrs	r2, r1
  403eb6:	07d6      	lsls	r6, r2, #31
  403eb8:	d547      	bpl.n	403f4a <__sflush_r+0xf6>
  403eba:	2200      	movs	r2, #0
  403ebc:	6062      	str	r2, [r4, #4]
  403ebe:	04d9      	lsls	r1, r3, #19
  403ec0:	6922      	ldr	r2, [r4, #16]
  403ec2:	6022      	str	r2, [r4, #0]
  403ec4:	d504      	bpl.n	403ed0 <__sflush_r+0x7c>
  403ec6:	1c42      	adds	r2, r0, #1
  403ec8:	d101      	bne.n	403ece <__sflush_r+0x7a>
  403eca:	682b      	ldr	r3, [r5, #0]
  403ecc:	b903      	cbnz	r3, 403ed0 <__sflush_r+0x7c>
  403ece:	6560      	str	r0, [r4, #84]	; 0x54
  403ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403ed2:	602f      	str	r7, [r5, #0]
  403ed4:	2900      	cmp	r1, #0
  403ed6:	d0ca      	beq.n	403e6e <__sflush_r+0x1a>
  403ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403edc:	4299      	cmp	r1, r3
  403ede:	d002      	beq.n	403ee6 <__sflush_r+0x92>
  403ee0:	4628      	mov	r0, r5
  403ee2:	f000 fcdb 	bl	40489c <_free_r>
  403ee6:	2000      	movs	r0, #0
  403ee8:	6360      	str	r0, [r4, #52]	; 0x34
  403eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403eee:	6a21      	ldr	r1, [r4, #32]
  403ef0:	2301      	movs	r3, #1
  403ef2:	4628      	mov	r0, r5
  403ef4:	47b0      	blx	r6
  403ef6:	1c41      	adds	r1, r0, #1
  403ef8:	d1c6      	bne.n	403e88 <__sflush_r+0x34>
  403efa:	682b      	ldr	r3, [r5, #0]
  403efc:	2b00      	cmp	r3, #0
  403efe:	d0c3      	beq.n	403e88 <__sflush_r+0x34>
  403f00:	2b1d      	cmp	r3, #29
  403f02:	d001      	beq.n	403f08 <__sflush_r+0xb4>
  403f04:	2b16      	cmp	r3, #22
  403f06:	d101      	bne.n	403f0c <__sflush_r+0xb8>
  403f08:	602f      	str	r7, [r5, #0]
  403f0a:	e7b0      	b.n	403e6e <__sflush_r+0x1a>
  403f0c:	89a3      	ldrh	r3, [r4, #12]
  403f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403f12:	81a3      	strh	r3, [r4, #12]
  403f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f18:	690f      	ldr	r7, [r1, #16]
  403f1a:	2f00      	cmp	r7, #0
  403f1c:	d0a7      	beq.n	403e6e <__sflush_r+0x1a>
  403f1e:	0793      	lsls	r3, r2, #30
  403f20:	680e      	ldr	r6, [r1, #0]
  403f22:	bf08      	it	eq
  403f24:	694b      	ldreq	r3, [r1, #20]
  403f26:	600f      	str	r7, [r1, #0]
  403f28:	bf18      	it	ne
  403f2a:	2300      	movne	r3, #0
  403f2c:	eba6 0807 	sub.w	r8, r6, r7
  403f30:	608b      	str	r3, [r1, #8]
  403f32:	f1b8 0f00 	cmp.w	r8, #0
  403f36:	dd9a      	ble.n	403e6e <__sflush_r+0x1a>
  403f38:	4643      	mov	r3, r8
  403f3a:	463a      	mov	r2, r7
  403f3c:	6a21      	ldr	r1, [r4, #32]
  403f3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  403f40:	4628      	mov	r0, r5
  403f42:	47b0      	blx	r6
  403f44:	2800      	cmp	r0, #0
  403f46:	dc07      	bgt.n	403f58 <__sflush_r+0x104>
  403f48:	89a3      	ldrh	r3, [r4, #12]
  403f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403f4e:	81a3      	strh	r3, [r4, #12]
  403f50:	f04f 30ff 	mov.w	r0, #4294967295
  403f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f58:	4407      	add	r7, r0
  403f5a:	eba8 0800 	sub.w	r8, r8, r0
  403f5e:	e7e8      	b.n	403f32 <__sflush_r+0xde>
  403f60:	20400001 	.word	0x20400001

00403f64 <_fflush_r>:
  403f64:	b538      	push	{r3, r4, r5, lr}
  403f66:	690b      	ldr	r3, [r1, #16]
  403f68:	4605      	mov	r5, r0
  403f6a:	460c      	mov	r4, r1
  403f6c:	b1db      	cbz	r3, 403fa6 <_fflush_r+0x42>
  403f6e:	b118      	cbz	r0, 403f78 <_fflush_r+0x14>
  403f70:	6983      	ldr	r3, [r0, #24]
  403f72:	b90b      	cbnz	r3, 403f78 <_fflush_r+0x14>
  403f74:	f000 f860 	bl	404038 <__sinit>
  403f78:	4b0c      	ldr	r3, [pc, #48]	; (403fac <_fflush_r+0x48>)
  403f7a:	429c      	cmp	r4, r3
  403f7c:	d109      	bne.n	403f92 <_fflush_r+0x2e>
  403f7e:	686c      	ldr	r4, [r5, #4]
  403f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f84:	b17b      	cbz	r3, 403fa6 <_fflush_r+0x42>
  403f86:	4621      	mov	r1, r4
  403f88:	4628      	mov	r0, r5
  403f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403f8e:	f7ff bf61 	b.w	403e54 <__sflush_r>
  403f92:	4b07      	ldr	r3, [pc, #28]	; (403fb0 <_fflush_r+0x4c>)
  403f94:	429c      	cmp	r4, r3
  403f96:	d101      	bne.n	403f9c <_fflush_r+0x38>
  403f98:	68ac      	ldr	r4, [r5, #8]
  403f9a:	e7f1      	b.n	403f80 <_fflush_r+0x1c>
  403f9c:	4b05      	ldr	r3, [pc, #20]	; (403fb4 <_fflush_r+0x50>)
  403f9e:	429c      	cmp	r4, r3
  403fa0:	bf08      	it	eq
  403fa2:	68ec      	ldreq	r4, [r5, #12]
  403fa4:	e7ec      	b.n	403f80 <_fflush_r+0x1c>
  403fa6:	2000      	movs	r0, #0
  403fa8:	bd38      	pop	{r3, r4, r5, pc}
  403faa:	bf00      	nop
  403fac:	00405444 	.word	0x00405444
  403fb0:	00405464 	.word	0x00405464
  403fb4:	00405424 	.word	0x00405424

00403fb8 <_cleanup_r>:
  403fb8:	4901      	ldr	r1, [pc, #4]	; (403fc0 <_cleanup_r+0x8>)
  403fba:	f000 b8a9 	b.w	404110 <_fwalk_reent>
  403fbe:	bf00      	nop
  403fc0:	00403f65 	.word	0x00403f65

00403fc4 <std.isra.0>:
  403fc4:	2300      	movs	r3, #0
  403fc6:	b510      	push	{r4, lr}
  403fc8:	4604      	mov	r4, r0
  403fca:	6003      	str	r3, [r0, #0]
  403fcc:	6043      	str	r3, [r0, #4]
  403fce:	6083      	str	r3, [r0, #8]
  403fd0:	8181      	strh	r1, [r0, #12]
  403fd2:	6643      	str	r3, [r0, #100]	; 0x64
  403fd4:	81c2      	strh	r2, [r0, #14]
  403fd6:	6103      	str	r3, [r0, #16]
  403fd8:	6143      	str	r3, [r0, #20]
  403fda:	6183      	str	r3, [r0, #24]
  403fdc:	4619      	mov	r1, r3
  403fde:	2208      	movs	r2, #8
  403fe0:	305c      	adds	r0, #92	; 0x5c
  403fe2:	f7fe fb9c 	bl	40271e <memset>
  403fe6:	4b05      	ldr	r3, [pc, #20]	; (403ffc <std.isra.0+0x38>)
  403fe8:	6263      	str	r3, [r4, #36]	; 0x24
  403fea:	4b05      	ldr	r3, [pc, #20]	; (404000 <std.isra.0+0x3c>)
  403fec:	62a3      	str	r3, [r4, #40]	; 0x28
  403fee:	4b05      	ldr	r3, [pc, #20]	; (404004 <std.isra.0+0x40>)
  403ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
  403ff2:	4b05      	ldr	r3, [pc, #20]	; (404008 <std.isra.0+0x44>)
  403ff4:	6224      	str	r4, [r4, #32]
  403ff6:	6323      	str	r3, [r4, #48]	; 0x30
  403ff8:	bd10      	pop	{r4, pc}
  403ffa:	bf00      	nop
  403ffc:	00404c91 	.word	0x00404c91
  404000:	00404cb3 	.word	0x00404cb3
  404004:	00404ceb 	.word	0x00404ceb
  404008:	00404d0f 	.word	0x00404d0f

0040400c <__sfmoreglue>:
  40400c:	b570      	push	{r4, r5, r6, lr}
  40400e:	1e4a      	subs	r2, r1, #1
  404010:	2568      	movs	r5, #104	; 0x68
  404012:	4355      	muls	r5, r2
  404014:	460e      	mov	r6, r1
  404016:	f105 0174 	add.w	r1, r5, #116	; 0x74
  40401a:	f000 fc8d 	bl	404938 <_malloc_r>
  40401e:	4604      	mov	r4, r0
  404020:	b140      	cbz	r0, 404034 <__sfmoreglue+0x28>
  404022:	2100      	movs	r1, #0
  404024:	e880 0042 	stmia.w	r0, {r1, r6}
  404028:	300c      	adds	r0, #12
  40402a:	60a0      	str	r0, [r4, #8]
  40402c:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404030:	f7fe fb75 	bl	40271e <memset>
  404034:	4620      	mov	r0, r4
  404036:	bd70      	pop	{r4, r5, r6, pc}

00404038 <__sinit>:
  404038:	6983      	ldr	r3, [r0, #24]
  40403a:	b510      	push	{r4, lr}
  40403c:	4604      	mov	r4, r0
  40403e:	bb33      	cbnz	r3, 40408e <__sinit+0x56>
  404040:	6483      	str	r3, [r0, #72]	; 0x48
  404042:	64c3      	str	r3, [r0, #76]	; 0x4c
  404044:	6503      	str	r3, [r0, #80]	; 0x50
  404046:	4b12      	ldr	r3, [pc, #72]	; (404090 <__sinit+0x58>)
  404048:	4a12      	ldr	r2, [pc, #72]	; (404094 <__sinit+0x5c>)
  40404a:	681b      	ldr	r3, [r3, #0]
  40404c:	6282      	str	r2, [r0, #40]	; 0x28
  40404e:	4298      	cmp	r0, r3
  404050:	bf04      	itt	eq
  404052:	2301      	moveq	r3, #1
  404054:	6183      	streq	r3, [r0, #24]
  404056:	f000 f81f 	bl	404098 <__sfp>
  40405a:	6060      	str	r0, [r4, #4]
  40405c:	4620      	mov	r0, r4
  40405e:	f000 f81b 	bl	404098 <__sfp>
  404062:	60a0      	str	r0, [r4, #8]
  404064:	4620      	mov	r0, r4
  404066:	f000 f817 	bl	404098 <__sfp>
  40406a:	2200      	movs	r2, #0
  40406c:	60e0      	str	r0, [r4, #12]
  40406e:	2104      	movs	r1, #4
  404070:	6860      	ldr	r0, [r4, #4]
  404072:	f7ff ffa7 	bl	403fc4 <std.isra.0>
  404076:	2201      	movs	r2, #1
  404078:	2109      	movs	r1, #9
  40407a:	68a0      	ldr	r0, [r4, #8]
  40407c:	f7ff ffa2 	bl	403fc4 <std.isra.0>
  404080:	2202      	movs	r2, #2
  404082:	2112      	movs	r1, #18
  404084:	68e0      	ldr	r0, [r4, #12]
  404086:	f7ff ff9d 	bl	403fc4 <std.isra.0>
  40408a:	2301      	movs	r3, #1
  40408c:	61a3      	str	r3, [r4, #24]
  40408e:	bd10      	pop	{r4, pc}
  404090:	004053dc 	.word	0x004053dc
  404094:	00403fb9 	.word	0x00403fb9

00404098 <__sfp>:
  404098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40409a:	4b1c      	ldr	r3, [pc, #112]	; (40410c <__sfp+0x74>)
  40409c:	681e      	ldr	r6, [r3, #0]
  40409e:	69b3      	ldr	r3, [r6, #24]
  4040a0:	4607      	mov	r7, r0
  4040a2:	b913      	cbnz	r3, 4040aa <__sfp+0x12>
  4040a4:	4630      	mov	r0, r6
  4040a6:	f7ff ffc7 	bl	404038 <__sinit>
  4040aa:	3648      	adds	r6, #72	; 0x48
  4040ac:	68b4      	ldr	r4, [r6, #8]
  4040ae:	6873      	ldr	r3, [r6, #4]
  4040b0:	3b01      	subs	r3, #1
  4040b2:	d503      	bpl.n	4040bc <__sfp+0x24>
  4040b4:	6833      	ldr	r3, [r6, #0]
  4040b6:	b133      	cbz	r3, 4040c6 <__sfp+0x2e>
  4040b8:	6836      	ldr	r6, [r6, #0]
  4040ba:	e7f7      	b.n	4040ac <__sfp+0x14>
  4040bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  4040c0:	b16d      	cbz	r5, 4040de <__sfp+0x46>
  4040c2:	3468      	adds	r4, #104	; 0x68
  4040c4:	e7f4      	b.n	4040b0 <__sfp+0x18>
  4040c6:	2104      	movs	r1, #4
  4040c8:	4638      	mov	r0, r7
  4040ca:	f7ff ff9f 	bl	40400c <__sfmoreglue>
  4040ce:	6030      	str	r0, [r6, #0]
  4040d0:	2800      	cmp	r0, #0
  4040d2:	d1f1      	bne.n	4040b8 <__sfp+0x20>
  4040d4:	230c      	movs	r3, #12
  4040d6:	603b      	str	r3, [r7, #0]
  4040d8:	4604      	mov	r4, r0
  4040da:	4620      	mov	r0, r4
  4040dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040de:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4040e2:	81e3      	strh	r3, [r4, #14]
  4040e4:	2301      	movs	r3, #1
  4040e6:	81a3      	strh	r3, [r4, #12]
  4040e8:	6665      	str	r5, [r4, #100]	; 0x64
  4040ea:	6025      	str	r5, [r4, #0]
  4040ec:	60a5      	str	r5, [r4, #8]
  4040ee:	6065      	str	r5, [r4, #4]
  4040f0:	6125      	str	r5, [r4, #16]
  4040f2:	6165      	str	r5, [r4, #20]
  4040f4:	61a5      	str	r5, [r4, #24]
  4040f6:	2208      	movs	r2, #8
  4040f8:	4629      	mov	r1, r5
  4040fa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  4040fe:	f7fe fb0e 	bl	40271e <memset>
  404102:	6365      	str	r5, [r4, #52]	; 0x34
  404104:	63a5      	str	r5, [r4, #56]	; 0x38
  404106:	64a5      	str	r5, [r4, #72]	; 0x48
  404108:	64e5      	str	r5, [r4, #76]	; 0x4c
  40410a:	e7e6      	b.n	4040da <__sfp+0x42>
  40410c:	004053dc 	.word	0x004053dc

00404110 <_fwalk_reent>:
  404110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404114:	4680      	mov	r8, r0
  404116:	4689      	mov	r9, r1
  404118:	f100 0448 	add.w	r4, r0, #72	; 0x48
  40411c:	2600      	movs	r6, #0
  40411e:	b914      	cbnz	r4, 404126 <_fwalk_reent+0x16>
  404120:	4630      	mov	r0, r6
  404122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404126:	68a5      	ldr	r5, [r4, #8]
  404128:	6867      	ldr	r7, [r4, #4]
  40412a:	3f01      	subs	r7, #1
  40412c:	d501      	bpl.n	404132 <_fwalk_reent+0x22>
  40412e:	6824      	ldr	r4, [r4, #0]
  404130:	e7f5      	b.n	40411e <_fwalk_reent+0xe>
  404132:	89ab      	ldrh	r3, [r5, #12]
  404134:	2b01      	cmp	r3, #1
  404136:	d907      	bls.n	404148 <_fwalk_reent+0x38>
  404138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  40413c:	3301      	adds	r3, #1
  40413e:	d003      	beq.n	404148 <_fwalk_reent+0x38>
  404140:	4629      	mov	r1, r5
  404142:	4640      	mov	r0, r8
  404144:	47c8      	blx	r9
  404146:	4306      	orrs	r6, r0
  404148:	3568      	adds	r5, #104	; 0x68
  40414a:	e7ee      	b.n	40412a <_fwalk_reent+0x1a>

0040414c <_localeconv_r>:
  40414c:	4b04      	ldr	r3, [pc, #16]	; (404160 <_localeconv_r+0x14>)
  40414e:	681b      	ldr	r3, [r3, #0]
  404150:	6a18      	ldr	r0, [r3, #32]
  404152:	4b04      	ldr	r3, [pc, #16]	; (404164 <_localeconv_r+0x18>)
  404154:	2800      	cmp	r0, #0
  404156:	bf08      	it	eq
  404158:	4618      	moveq	r0, r3
  40415a:	30f0      	adds	r0, #240	; 0xf0
  40415c:	4770      	bx	lr
  40415e:	bf00      	nop
  404160:	20400048 	.word	0x20400048
  404164:	204000ac 	.word	0x204000ac

00404168 <__swhatbuf_r>:
  404168:	b570      	push	{r4, r5, r6, lr}
  40416a:	460e      	mov	r6, r1
  40416c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404170:	2900      	cmp	r1, #0
  404172:	b090      	sub	sp, #64	; 0x40
  404174:	4614      	mov	r4, r2
  404176:	461d      	mov	r5, r3
  404178:	da07      	bge.n	40418a <__swhatbuf_r+0x22>
  40417a:	2300      	movs	r3, #0
  40417c:	602b      	str	r3, [r5, #0]
  40417e:	89b3      	ldrh	r3, [r6, #12]
  404180:	061a      	lsls	r2, r3, #24
  404182:	d410      	bmi.n	4041a6 <__swhatbuf_r+0x3e>
  404184:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404188:	e00e      	b.n	4041a8 <__swhatbuf_r+0x40>
  40418a:	aa01      	add	r2, sp, #4
  40418c:	f000 fea6 	bl	404edc <_fstat_r>
  404190:	2800      	cmp	r0, #0
  404192:	dbf2      	blt.n	40417a <__swhatbuf_r+0x12>
  404194:	9a02      	ldr	r2, [sp, #8]
  404196:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40419a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  40419e:	425a      	negs	r2, r3
  4041a0:	415a      	adcs	r2, r3
  4041a2:	602a      	str	r2, [r5, #0]
  4041a4:	e7ee      	b.n	404184 <__swhatbuf_r+0x1c>
  4041a6:	2340      	movs	r3, #64	; 0x40
  4041a8:	2000      	movs	r0, #0
  4041aa:	6023      	str	r3, [r4, #0]
  4041ac:	b010      	add	sp, #64	; 0x40
  4041ae:	bd70      	pop	{r4, r5, r6, pc}

004041b0 <__smakebuf_r>:
  4041b0:	898b      	ldrh	r3, [r1, #12]
  4041b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  4041b4:	079d      	lsls	r5, r3, #30
  4041b6:	4606      	mov	r6, r0
  4041b8:	460c      	mov	r4, r1
  4041ba:	d507      	bpl.n	4041cc <__smakebuf_r+0x1c>
  4041bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4041c0:	6023      	str	r3, [r4, #0]
  4041c2:	6123      	str	r3, [r4, #16]
  4041c4:	2301      	movs	r3, #1
  4041c6:	6163      	str	r3, [r4, #20]
  4041c8:	b002      	add	sp, #8
  4041ca:	bd70      	pop	{r4, r5, r6, pc}
  4041cc:	ab01      	add	r3, sp, #4
  4041ce:	466a      	mov	r2, sp
  4041d0:	f7ff ffca 	bl	404168 <__swhatbuf_r>
  4041d4:	9900      	ldr	r1, [sp, #0]
  4041d6:	4605      	mov	r5, r0
  4041d8:	4630      	mov	r0, r6
  4041da:	f000 fbad 	bl	404938 <_malloc_r>
  4041de:	b948      	cbnz	r0, 4041f4 <__smakebuf_r+0x44>
  4041e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041e4:	059a      	lsls	r2, r3, #22
  4041e6:	d4ef      	bmi.n	4041c8 <__smakebuf_r+0x18>
  4041e8:	f023 0303 	bic.w	r3, r3, #3
  4041ec:	f043 0302 	orr.w	r3, r3, #2
  4041f0:	81a3      	strh	r3, [r4, #12]
  4041f2:	e7e3      	b.n	4041bc <__smakebuf_r+0xc>
  4041f4:	4b0d      	ldr	r3, [pc, #52]	; (40422c <__smakebuf_r+0x7c>)
  4041f6:	62b3      	str	r3, [r6, #40]	; 0x28
  4041f8:	89a3      	ldrh	r3, [r4, #12]
  4041fa:	6020      	str	r0, [r4, #0]
  4041fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404200:	81a3      	strh	r3, [r4, #12]
  404202:	9b00      	ldr	r3, [sp, #0]
  404204:	6163      	str	r3, [r4, #20]
  404206:	9b01      	ldr	r3, [sp, #4]
  404208:	6120      	str	r0, [r4, #16]
  40420a:	b15b      	cbz	r3, 404224 <__smakebuf_r+0x74>
  40420c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404210:	4630      	mov	r0, r6
  404212:	f000 fe75 	bl	404f00 <_isatty_r>
  404216:	b128      	cbz	r0, 404224 <__smakebuf_r+0x74>
  404218:	89a3      	ldrh	r3, [r4, #12]
  40421a:	f023 0303 	bic.w	r3, r3, #3
  40421e:	f043 0301 	orr.w	r3, r3, #1
  404222:	81a3      	strh	r3, [r4, #12]
  404224:	89a3      	ldrh	r3, [r4, #12]
  404226:	431d      	orrs	r5, r3
  404228:	81a5      	strh	r5, [r4, #12]
  40422a:	e7cd      	b.n	4041c8 <__smakebuf_r+0x18>
  40422c:	00403fb9 	.word	0x00403fb9

00404230 <malloc>:
  404230:	4b02      	ldr	r3, [pc, #8]	; (40423c <malloc+0xc>)
  404232:	4601      	mov	r1, r0
  404234:	6818      	ldr	r0, [r3, #0]
  404236:	f000 bb7f 	b.w	404938 <_malloc_r>
  40423a:	bf00      	nop
  40423c:	20400048 	.word	0x20400048

00404240 <memchr>:
  404240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404244:	2a10      	cmp	r2, #16
  404246:	db2b      	blt.n	4042a0 <memchr+0x60>
  404248:	f010 0f07 	tst.w	r0, #7
  40424c:	d008      	beq.n	404260 <memchr+0x20>
  40424e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404252:	3a01      	subs	r2, #1
  404254:	428b      	cmp	r3, r1
  404256:	d02d      	beq.n	4042b4 <memchr+0x74>
  404258:	f010 0f07 	tst.w	r0, #7
  40425c:	b342      	cbz	r2, 4042b0 <memchr+0x70>
  40425e:	d1f6      	bne.n	40424e <memchr+0xe>
  404260:	b4f0      	push	{r4, r5, r6, r7}
  404262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40426a:	f022 0407 	bic.w	r4, r2, #7
  40426e:	f07f 0700 	mvns.w	r7, #0
  404272:	2300      	movs	r3, #0
  404274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404278:	3c08      	subs	r4, #8
  40427a:	ea85 0501 	eor.w	r5, r5, r1
  40427e:	ea86 0601 	eor.w	r6, r6, r1
  404282:	fa85 f547 	uadd8	r5, r5, r7
  404286:	faa3 f587 	sel	r5, r3, r7
  40428a:	fa86 f647 	uadd8	r6, r6, r7
  40428e:	faa5 f687 	sel	r6, r5, r7
  404292:	b98e      	cbnz	r6, 4042b8 <memchr+0x78>
  404294:	d1ee      	bne.n	404274 <memchr+0x34>
  404296:	bcf0      	pop	{r4, r5, r6, r7}
  404298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40429c:	f002 0207 	and.w	r2, r2, #7
  4042a0:	b132      	cbz	r2, 4042b0 <memchr+0x70>
  4042a2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4042a6:	3a01      	subs	r2, #1
  4042a8:	ea83 0301 	eor.w	r3, r3, r1
  4042ac:	b113      	cbz	r3, 4042b4 <memchr+0x74>
  4042ae:	d1f8      	bne.n	4042a2 <memchr+0x62>
  4042b0:	2000      	movs	r0, #0
  4042b2:	4770      	bx	lr
  4042b4:	3801      	subs	r0, #1
  4042b6:	4770      	bx	lr
  4042b8:	2d00      	cmp	r5, #0
  4042ba:	bf06      	itte	eq
  4042bc:	4635      	moveq	r5, r6
  4042be:	3803      	subeq	r0, #3
  4042c0:	3807      	subne	r0, #7
  4042c2:	f015 0f01 	tst.w	r5, #1
  4042c6:	d107      	bne.n	4042d8 <memchr+0x98>
  4042c8:	3001      	adds	r0, #1
  4042ca:	f415 7f80 	tst.w	r5, #256	; 0x100
  4042ce:	bf02      	ittt	eq
  4042d0:	3001      	addeq	r0, #1
  4042d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4042d6:	3001      	addeq	r0, #1
  4042d8:	bcf0      	pop	{r4, r5, r6, r7}
  4042da:	3801      	subs	r0, #1
  4042dc:	4770      	bx	lr
  4042de:	bf00      	nop

004042e0 <_Balloc>:
  4042e0:	b570      	push	{r4, r5, r6, lr}
  4042e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4042e4:	4604      	mov	r4, r0
  4042e6:	460e      	mov	r6, r1
  4042e8:	b93d      	cbnz	r5, 4042fa <_Balloc+0x1a>
  4042ea:	2010      	movs	r0, #16
  4042ec:	f7ff ffa0 	bl	404230 <malloc>
  4042f0:	6260      	str	r0, [r4, #36]	; 0x24
  4042f2:	6045      	str	r5, [r0, #4]
  4042f4:	6085      	str	r5, [r0, #8]
  4042f6:	6005      	str	r5, [r0, #0]
  4042f8:	60c5      	str	r5, [r0, #12]
  4042fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4042fc:	68eb      	ldr	r3, [r5, #12]
  4042fe:	b183      	cbz	r3, 404322 <_Balloc+0x42>
  404300:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404302:	68db      	ldr	r3, [r3, #12]
  404304:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  404308:	b9b8      	cbnz	r0, 40433a <_Balloc+0x5a>
  40430a:	2101      	movs	r1, #1
  40430c:	fa01 f506 	lsl.w	r5, r1, r6
  404310:	1d6a      	adds	r2, r5, #5
  404312:	0092      	lsls	r2, r2, #2
  404314:	4620      	mov	r0, r4
  404316:	f000 fab3 	bl	404880 <_calloc_r>
  40431a:	b160      	cbz	r0, 404336 <_Balloc+0x56>
  40431c:	6046      	str	r6, [r0, #4]
  40431e:	6085      	str	r5, [r0, #8]
  404320:	e00e      	b.n	404340 <_Balloc+0x60>
  404322:	2221      	movs	r2, #33	; 0x21
  404324:	2104      	movs	r1, #4
  404326:	4620      	mov	r0, r4
  404328:	f000 faaa 	bl	404880 <_calloc_r>
  40432c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40432e:	60e8      	str	r0, [r5, #12]
  404330:	68db      	ldr	r3, [r3, #12]
  404332:	2b00      	cmp	r3, #0
  404334:	d1e4      	bne.n	404300 <_Balloc+0x20>
  404336:	2000      	movs	r0, #0
  404338:	bd70      	pop	{r4, r5, r6, pc}
  40433a:	6802      	ldr	r2, [r0, #0]
  40433c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  404340:	2300      	movs	r3, #0
  404342:	6103      	str	r3, [r0, #16]
  404344:	60c3      	str	r3, [r0, #12]
  404346:	bd70      	pop	{r4, r5, r6, pc}

00404348 <_Bfree>:
  404348:	b570      	push	{r4, r5, r6, lr}
  40434a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40434c:	4606      	mov	r6, r0
  40434e:	460d      	mov	r5, r1
  404350:	b93c      	cbnz	r4, 404362 <_Bfree+0x1a>
  404352:	2010      	movs	r0, #16
  404354:	f7ff ff6c 	bl	404230 <malloc>
  404358:	6270      	str	r0, [r6, #36]	; 0x24
  40435a:	6044      	str	r4, [r0, #4]
  40435c:	6084      	str	r4, [r0, #8]
  40435e:	6004      	str	r4, [r0, #0]
  404360:	60c4      	str	r4, [r0, #12]
  404362:	b13d      	cbz	r5, 404374 <_Bfree+0x2c>
  404364:	6a73      	ldr	r3, [r6, #36]	; 0x24
  404366:	686a      	ldr	r2, [r5, #4]
  404368:	68db      	ldr	r3, [r3, #12]
  40436a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40436e:	6029      	str	r1, [r5, #0]
  404370:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  404374:	bd70      	pop	{r4, r5, r6, pc}

00404376 <__multadd>:
  404376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40437a:	690d      	ldr	r5, [r1, #16]
  40437c:	461f      	mov	r7, r3
  40437e:	4606      	mov	r6, r0
  404380:	460c      	mov	r4, r1
  404382:	f101 0e14 	add.w	lr, r1, #20
  404386:	2300      	movs	r3, #0
  404388:	f8de 0000 	ldr.w	r0, [lr]
  40438c:	b281      	uxth	r1, r0
  40438e:	fb02 7101 	mla	r1, r2, r1, r7
  404392:	0c0f      	lsrs	r7, r1, #16
  404394:	0c00      	lsrs	r0, r0, #16
  404396:	fb02 7000 	mla	r0, r2, r0, r7
  40439a:	b289      	uxth	r1, r1
  40439c:	3301      	adds	r3, #1
  40439e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  4043a2:	429d      	cmp	r5, r3
  4043a4:	ea4f 4710 	mov.w	r7, r0, lsr #16
  4043a8:	f84e 1b04 	str.w	r1, [lr], #4
  4043ac:	dcec      	bgt.n	404388 <__multadd+0x12>
  4043ae:	b1d7      	cbz	r7, 4043e6 <__multadd+0x70>
  4043b0:	68a3      	ldr	r3, [r4, #8]
  4043b2:	429d      	cmp	r5, r3
  4043b4:	db12      	blt.n	4043dc <__multadd+0x66>
  4043b6:	6861      	ldr	r1, [r4, #4]
  4043b8:	4630      	mov	r0, r6
  4043ba:	3101      	adds	r1, #1
  4043bc:	f7ff ff90 	bl	4042e0 <_Balloc>
  4043c0:	6922      	ldr	r2, [r4, #16]
  4043c2:	3202      	adds	r2, #2
  4043c4:	f104 010c 	add.w	r1, r4, #12
  4043c8:	4680      	mov	r8, r0
  4043ca:	0092      	lsls	r2, r2, #2
  4043cc:	300c      	adds	r0, #12
  4043ce:	f7fe f99b 	bl	402708 <memcpy>
  4043d2:	4621      	mov	r1, r4
  4043d4:	4630      	mov	r0, r6
  4043d6:	f7ff ffb7 	bl	404348 <_Bfree>
  4043da:	4644      	mov	r4, r8
  4043dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4043e0:	3501      	adds	r5, #1
  4043e2:	615f      	str	r7, [r3, #20]
  4043e4:	6125      	str	r5, [r4, #16]
  4043e6:	4620      	mov	r0, r4
  4043e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004043ec <__hi0bits>:
  4043ec:	0c02      	lsrs	r2, r0, #16
  4043ee:	0412      	lsls	r2, r2, #16
  4043f0:	4603      	mov	r3, r0
  4043f2:	b9b2      	cbnz	r2, 404422 <__hi0bits+0x36>
  4043f4:	0403      	lsls	r3, r0, #16
  4043f6:	2010      	movs	r0, #16
  4043f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4043fc:	bf04      	itt	eq
  4043fe:	021b      	lsleq	r3, r3, #8
  404400:	3008      	addeq	r0, #8
  404402:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  404406:	bf04      	itt	eq
  404408:	011b      	lsleq	r3, r3, #4
  40440a:	3004      	addeq	r0, #4
  40440c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  404410:	bf04      	itt	eq
  404412:	009b      	lsleq	r3, r3, #2
  404414:	3002      	addeq	r0, #2
  404416:	2b00      	cmp	r3, #0
  404418:	db06      	blt.n	404428 <__hi0bits+0x3c>
  40441a:	005b      	lsls	r3, r3, #1
  40441c:	d503      	bpl.n	404426 <__hi0bits+0x3a>
  40441e:	3001      	adds	r0, #1
  404420:	4770      	bx	lr
  404422:	2000      	movs	r0, #0
  404424:	e7e8      	b.n	4043f8 <__hi0bits+0xc>
  404426:	2020      	movs	r0, #32
  404428:	4770      	bx	lr

0040442a <__lo0bits>:
  40442a:	6803      	ldr	r3, [r0, #0]
  40442c:	f013 0207 	ands.w	r2, r3, #7
  404430:	4601      	mov	r1, r0
  404432:	d00b      	beq.n	40444c <__lo0bits+0x22>
  404434:	07da      	lsls	r2, r3, #31
  404436:	d423      	bmi.n	404480 <__lo0bits+0x56>
  404438:	0798      	lsls	r0, r3, #30
  40443a:	bf49      	itett	mi
  40443c:	085b      	lsrmi	r3, r3, #1
  40443e:	089b      	lsrpl	r3, r3, #2
  404440:	2001      	movmi	r0, #1
  404442:	600b      	strmi	r3, [r1, #0]
  404444:	bf5c      	itt	pl
  404446:	600b      	strpl	r3, [r1, #0]
  404448:	2002      	movpl	r0, #2
  40444a:	4770      	bx	lr
  40444c:	b298      	uxth	r0, r3
  40444e:	b9a8      	cbnz	r0, 40447c <__lo0bits+0x52>
  404450:	0c1b      	lsrs	r3, r3, #16
  404452:	2010      	movs	r0, #16
  404454:	f013 0fff 	tst.w	r3, #255	; 0xff
  404458:	bf04      	itt	eq
  40445a:	0a1b      	lsreq	r3, r3, #8
  40445c:	3008      	addeq	r0, #8
  40445e:	071a      	lsls	r2, r3, #28
  404460:	bf04      	itt	eq
  404462:	091b      	lsreq	r3, r3, #4
  404464:	3004      	addeq	r0, #4
  404466:	079a      	lsls	r2, r3, #30
  404468:	bf04      	itt	eq
  40446a:	089b      	lsreq	r3, r3, #2
  40446c:	3002      	addeq	r0, #2
  40446e:	07da      	lsls	r2, r3, #31
  404470:	d402      	bmi.n	404478 <__lo0bits+0x4e>
  404472:	085b      	lsrs	r3, r3, #1
  404474:	d006      	beq.n	404484 <__lo0bits+0x5a>
  404476:	3001      	adds	r0, #1
  404478:	600b      	str	r3, [r1, #0]
  40447a:	4770      	bx	lr
  40447c:	4610      	mov	r0, r2
  40447e:	e7e9      	b.n	404454 <__lo0bits+0x2a>
  404480:	2000      	movs	r0, #0
  404482:	4770      	bx	lr
  404484:	2020      	movs	r0, #32
  404486:	4770      	bx	lr

00404488 <__i2b>:
  404488:	b510      	push	{r4, lr}
  40448a:	460c      	mov	r4, r1
  40448c:	2101      	movs	r1, #1
  40448e:	f7ff ff27 	bl	4042e0 <_Balloc>
  404492:	2201      	movs	r2, #1
  404494:	6144      	str	r4, [r0, #20]
  404496:	6102      	str	r2, [r0, #16]
  404498:	bd10      	pop	{r4, pc}

0040449a <__multiply>:
  40449a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40449e:	4614      	mov	r4, r2
  4044a0:	690a      	ldr	r2, [r1, #16]
  4044a2:	6923      	ldr	r3, [r4, #16]
  4044a4:	429a      	cmp	r2, r3
  4044a6:	bfb8      	it	lt
  4044a8:	460b      	movlt	r3, r1
  4044aa:	4689      	mov	r9, r1
  4044ac:	bfbc      	itt	lt
  4044ae:	46a1      	movlt	r9, r4
  4044b0:	461c      	movlt	r4, r3
  4044b2:	f8d9 7010 	ldr.w	r7, [r9, #16]
  4044b6:	f8d4 a010 	ldr.w	sl, [r4, #16]
  4044ba:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4044be:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4044c2:	eb07 060a 	add.w	r6, r7, sl
  4044c6:	429e      	cmp	r6, r3
  4044c8:	bfc8      	it	gt
  4044ca:	3101      	addgt	r1, #1
  4044cc:	f7ff ff08 	bl	4042e0 <_Balloc>
  4044d0:	f100 0514 	add.w	r5, r0, #20
  4044d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  4044d8:	462b      	mov	r3, r5
  4044da:	2200      	movs	r2, #0
  4044dc:	4543      	cmp	r3, r8
  4044de:	d316      	bcc.n	40450e <__multiply+0x74>
  4044e0:	f104 0214 	add.w	r2, r4, #20
  4044e4:	f109 0114 	add.w	r1, r9, #20
  4044e8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  4044ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  4044f0:	9301      	str	r3, [sp, #4]
  4044f2:	9c01      	ldr	r4, [sp, #4]
  4044f4:	4294      	cmp	r4, r2
  4044f6:	4613      	mov	r3, r2
  4044f8:	d80c      	bhi.n	404514 <__multiply+0x7a>
  4044fa:	2e00      	cmp	r6, #0
  4044fc:	dd03      	ble.n	404506 <__multiply+0x6c>
  4044fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  404502:	2b00      	cmp	r3, #0
  404504:	d054      	beq.n	4045b0 <__multiply+0x116>
  404506:	6106      	str	r6, [r0, #16]
  404508:	b003      	add	sp, #12
  40450a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40450e:	f843 2b04 	str.w	r2, [r3], #4
  404512:	e7e3      	b.n	4044dc <__multiply+0x42>
  404514:	f8b3 a000 	ldrh.w	sl, [r3]
  404518:	3204      	adds	r2, #4
  40451a:	f1ba 0f00 	cmp.w	sl, #0
  40451e:	d020      	beq.n	404562 <__multiply+0xc8>
  404520:	46ae      	mov	lr, r5
  404522:	4689      	mov	r9, r1
  404524:	f04f 0c00 	mov.w	ip, #0
  404528:	f859 4b04 	ldr.w	r4, [r9], #4
  40452c:	f8be b000 	ldrh.w	fp, [lr]
  404530:	b2a3      	uxth	r3, r4
  404532:	fb0a b303 	mla	r3, sl, r3, fp
  404536:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  40453a:	f8de 4000 	ldr.w	r4, [lr]
  40453e:	4463      	add	r3, ip
  404540:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  404544:	fb0a c40b 	mla	r4, sl, fp, ip
  404548:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40454c:	b29b      	uxth	r3, r3
  40454e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  404552:	454f      	cmp	r7, r9
  404554:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  404558:	f84e 3b04 	str.w	r3, [lr], #4
  40455c:	d8e4      	bhi.n	404528 <__multiply+0x8e>
  40455e:	f8ce c000 	str.w	ip, [lr]
  404562:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  404566:	f1b9 0f00 	cmp.w	r9, #0
  40456a:	d01f      	beq.n	4045ac <__multiply+0x112>
  40456c:	682b      	ldr	r3, [r5, #0]
  40456e:	46ae      	mov	lr, r5
  404570:	468c      	mov	ip, r1
  404572:	f04f 0a00 	mov.w	sl, #0
  404576:	f8bc 4000 	ldrh.w	r4, [ip]
  40457a:	f8be b002 	ldrh.w	fp, [lr, #2]
  40457e:	fb09 b404 	mla	r4, r9, r4, fp
  404582:	44a2      	add	sl, r4
  404584:	b29b      	uxth	r3, r3
  404586:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  40458a:	f84e 3b04 	str.w	r3, [lr], #4
  40458e:	f85c 3b04 	ldr.w	r3, [ip], #4
  404592:	f8be 4000 	ldrh.w	r4, [lr]
  404596:	0c1b      	lsrs	r3, r3, #16
  404598:	fb09 4303 	mla	r3, r9, r3, r4
  40459c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  4045a0:	4567      	cmp	r7, ip
  4045a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4045a6:	d8e6      	bhi.n	404576 <__multiply+0xdc>
  4045a8:	f8ce 3000 	str.w	r3, [lr]
  4045ac:	3504      	adds	r5, #4
  4045ae:	e7a0      	b.n	4044f2 <__multiply+0x58>
  4045b0:	3e01      	subs	r6, #1
  4045b2:	e7a2      	b.n	4044fa <__multiply+0x60>

004045b4 <__pow5mult>:
  4045b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4045b8:	4615      	mov	r5, r2
  4045ba:	f012 0203 	ands.w	r2, r2, #3
  4045be:	4606      	mov	r6, r0
  4045c0:	460f      	mov	r7, r1
  4045c2:	d007      	beq.n	4045d4 <__pow5mult+0x20>
  4045c4:	3a01      	subs	r2, #1
  4045c6:	4c21      	ldr	r4, [pc, #132]	; (40464c <__pow5mult+0x98>)
  4045c8:	2300      	movs	r3, #0
  4045ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  4045ce:	f7ff fed2 	bl	404376 <__multadd>
  4045d2:	4607      	mov	r7, r0
  4045d4:	10ad      	asrs	r5, r5, #2
  4045d6:	d035      	beq.n	404644 <__pow5mult+0x90>
  4045d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
  4045da:	b93c      	cbnz	r4, 4045ec <__pow5mult+0x38>
  4045dc:	2010      	movs	r0, #16
  4045de:	f7ff fe27 	bl	404230 <malloc>
  4045e2:	6270      	str	r0, [r6, #36]	; 0x24
  4045e4:	6044      	str	r4, [r0, #4]
  4045e6:	6084      	str	r4, [r0, #8]
  4045e8:	6004      	str	r4, [r0, #0]
  4045ea:	60c4      	str	r4, [r0, #12]
  4045ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  4045f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
  4045f4:	b94c      	cbnz	r4, 40460a <__pow5mult+0x56>
  4045f6:	f240 2171 	movw	r1, #625	; 0x271
  4045fa:	4630      	mov	r0, r6
  4045fc:	f7ff ff44 	bl	404488 <__i2b>
  404600:	2300      	movs	r3, #0
  404602:	f8c8 0008 	str.w	r0, [r8, #8]
  404606:	4604      	mov	r4, r0
  404608:	6003      	str	r3, [r0, #0]
  40460a:	f04f 0800 	mov.w	r8, #0
  40460e:	07eb      	lsls	r3, r5, #31
  404610:	d50a      	bpl.n	404628 <__pow5mult+0x74>
  404612:	4639      	mov	r1, r7
  404614:	4622      	mov	r2, r4
  404616:	4630      	mov	r0, r6
  404618:	f7ff ff3f 	bl	40449a <__multiply>
  40461c:	4639      	mov	r1, r7
  40461e:	4681      	mov	r9, r0
  404620:	4630      	mov	r0, r6
  404622:	f7ff fe91 	bl	404348 <_Bfree>
  404626:	464f      	mov	r7, r9
  404628:	106d      	asrs	r5, r5, #1
  40462a:	d00b      	beq.n	404644 <__pow5mult+0x90>
  40462c:	6820      	ldr	r0, [r4, #0]
  40462e:	b938      	cbnz	r0, 404640 <__pow5mult+0x8c>
  404630:	4622      	mov	r2, r4
  404632:	4621      	mov	r1, r4
  404634:	4630      	mov	r0, r6
  404636:	f7ff ff30 	bl	40449a <__multiply>
  40463a:	6020      	str	r0, [r4, #0]
  40463c:	f8c0 8000 	str.w	r8, [r0]
  404640:	4604      	mov	r4, r0
  404642:	e7e4      	b.n	40460e <__pow5mult+0x5a>
  404644:	4638      	mov	r0, r7
  404646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40464a:	bf00      	nop
  40464c:	00405578 	.word	0x00405578

00404650 <__lshift>:
  404650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404654:	460c      	mov	r4, r1
  404656:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40465a:	6923      	ldr	r3, [r4, #16]
  40465c:	6849      	ldr	r1, [r1, #4]
  40465e:	eb0a 0903 	add.w	r9, sl, r3
  404662:	68a3      	ldr	r3, [r4, #8]
  404664:	4607      	mov	r7, r0
  404666:	4616      	mov	r6, r2
  404668:	f109 0501 	add.w	r5, r9, #1
  40466c:	42ab      	cmp	r3, r5
  40466e:	db31      	blt.n	4046d4 <__lshift+0x84>
  404670:	4638      	mov	r0, r7
  404672:	f7ff fe35 	bl	4042e0 <_Balloc>
  404676:	2200      	movs	r2, #0
  404678:	4680      	mov	r8, r0
  40467a:	f100 0314 	add.w	r3, r0, #20
  40467e:	4611      	mov	r1, r2
  404680:	4552      	cmp	r2, sl
  404682:	db2a      	blt.n	4046da <__lshift+0x8a>
  404684:	6920      	ldr	r0, [r4, #16]
  404686:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  40468a:	f104 0114 	add.w	r1, r4, #20
  40468e:	f016 021f 	ands.w	r2, r6, #31
  404692:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  404696:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  40469a:	d022      	beq.n	4046e2 <__lshift+0x92>
  40469c:	f1c2 0c20 	rsb	ip, r2, #32
  4046a0:	2000      	movs	r0, #0
  4046a2:	680e      	ldr	r6, [r1, #0]
  4046a4:	4096      	lsls	r6, r2
  4046a6:	4330      	orrs	r0, r6
  4046a8:	f843 0b04 	str.w	r0, [r3], #4
  4046ac:	f851 0b04 	ldr.w	r0, [r1], #4
  4046b0:	458e      	cmp	lr, r1
  4046b2:	fa20 f00c 	lsr.w	r0, r0, ip
  4046b6:	d8f4      	bhi.n	4046a2 <__lshift+0x52>
  4046b8:	6018      	str	r0, [r3, #0]
  4046ba:	b108      	cbz	r0, 4046c0 <__lshift+0x70>
  4046bc:	f109 0502 	add.w	r5, r9, #2
  4046c0:	3d01      	subs	r5, #1
  4046c2:	4638      	mov	r0, r7
  4046c4:	f8c8 5010 	str.w	r5, [r8, #16]
  4046c8:	4621      	mov	r1, r4
  4046ca:	f7ff fe3d 	bl	404348 <_Bfree>
  4046ce:	4640      	mov	r0, r8
  4046d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4046d4:	3101      	adds	r1, #1
  4046d6:	005b      	lsls	r3, r3, #1
  4046d8:	e7c8      	b.n	40466c <__lshift+0x1c>
  4046da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4046de:	3201      	adds	r2, #1
  4046e0:	e7ce      	b.n	404680 <__lshift+0x30>
  4046e2:	3b04      	subs	r3, #4
  4046e4:	f851 2b04 	ldr.w	r2, [r1], #4
  4046e8:	f843 2f04 	str.w	r2, [r3, #4]!
  4046ec:	458e      	cmp	lr, r1
  4046ee:	d8f9      	bhi.n	4046e4 <__lshift+0x94>
  4046f0:	e7e6      	b.n	4046c0 <__lshift+0x70>

004046f2 <__mcmp>:
  4046f2:	6903      	ldr	r3, [r0, #16]
  4046f4:	690a      	ldr	r2, [r1, #16]
  4046f6:	1a9b      	subs	r3, r3, r2
  4046f8:	b530      	push	{r4, r5, lr}
  4046fa:	d10c      	bne.n	404716 <__mcmp+0x24>
  4046fc:	0092      	lsls	r2, r2, #2
  4046fe:	3014      	adds	r0, #20
  404700:	3114      	adds	r1, #20
  404702:	1884      	adds	r4, r0, r2
  404704:	4411      	add	r1, r2
  404706:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40470a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40470e:	4295      	cmp	r5, r2
  404710:	d003      	beq.n	40471a <__mcmp+0x28>
  404712:	d305      	bcc.n	404720 <__mcmp+0x2e>
  404714:	2301      	movs	r3, #1
  404716:	4618      	mov	r0, r3
  404718:	bd30      	pop	{r4, r5, pc}
  40471a:	42a0      	cmp	r0, r4
  40471c:	d3f3      	bcc.n	404706 <__mcmp+0x14>
  40471e:	e7fa      	b.n	404716 <__mcmp+0x24>
  404720:	f04f 33ff 	mov.w	r3, #4294967295
  404724:	e7f7      	b.n	404716 <__mcmp+0x24>

00404726 <__mdiff>:
  404726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40472a:	460d      	mov	r5, r1
  40472c:	4607      	mov	r7, r0
  40472e:	4611      	mov	r1, r2
  404730:	4628      	mov	r0, r5
  404732:	4614      	mov	r4, r2
  404734:	f7ff ffdd 	bl	4046f2 <__mcmp>
  404738:	1e06      	subs	r6, r0, #0
  40473a:	d108      	bne.n	40474e <__mdiff+0x28>
  40473c:	4631      	mov	r1, r6
  40473e:	4638      	mov	r0, r7
  404740:	f7ff fdce 	bl	4042e0 <_Balloc>
  404744:	2301      	movs	r3, #1
  404746:	6103      	str	r3, [r0, #16]
  404748:	6146      	str	r6, [r0, #20]
  40474a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40474e:	bfa4      	itt	ge
  404750:	4623      	movge	r3, r4
  404752:	462c      	movge	r4, r5
  404754:	4638      	mov	r0, r7
  404756:	6861      	ldr	r1, [r4, #4]
  404758:	bfa6      	itte	ge
  40475a:	461d      	movge	r5, r3
  40475c:	2600      	movge	r6, #0
  40475e:	2601      	movlt	r6, #1
  404760:	f7ff fdbe 	bl	4042e0 <_Balloc>
  404764:	692b      	ldr	r3, [r5, #16]
  404766:	60c6      	str	r6, [r0, #12]
  404768:	6926      	ldr	r6, [r4, #16]
  40476a:	f105 0914 	add.w	r9, r5, #20
  40476e:	f104 0214 	add.w	r2, r4, #20
  404772:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  404776:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40477a:	f100 0514 	add.w	r5, r0, #20
  40477e:	f04f 0c00 	mov.w	ip, #0
  404782:	f852 ab04 	ldr.w	sl, [r2], #4
  404786:	f859 4b04 	ldr.w	r4, [r9], #4
  40478a:	fa1c f18a 	uxtah	r1, ip, sl
  40478e:	b2a3      	uxth	r3, r4
  404790:	1ac9      	subs	r1, r1, r3
  404792:	0c23      	lsrs	r3, r4, #16
  404794:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  404798:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40479c:	b289      	uxth	r1, r1
  40479e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4047a2:	45c8      	cmp	r8, r9
  4047a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  4047a8:	4696      	mov	lr, r2
  4047aa:	f845 3b04 	str.w	r3, [r5], #4
  4047ae:	d8e8      	bhi.n	404782 <__mdiff+0x5c>
  4047b0:	45be      	cmp	lr, r7
  4047b2:	d305      	bcc.n	4047c0 <__mdiff+0x9a>
  4047b4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4047b8:	b18b      	cbz	r3, 4047de <__mdiff+0xb8>
  4047ba:	6106      	str	r6, [r0, #16]
  4047bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4047c0:	f85e 1b04 	ldr.w	r1, [lr], #4
  4047c4:	fa1c f381 	uxtah	r3, ip, r1
  4047c8:	141a      	asrs	r2, r3, #16
  4047ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  4047ce:	b29b      	uxth	r3, r3
  4047d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4047d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
  4047d8:	f845 3b04 	str.w	r3, [r5], #4
  4047dc:	e7e8      	b.n	4047b0 <__mdiff+0x8a>
  4047de:	3e01      	subs	r6, #1
  4047e0:	e7e8      	b.n	4047b4 <__mdiff+0x8e>

004047e2 <__d2b>:
  4047e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  4047e6:	2101      	movs	r1, #1
  4047e8:	461c      	mov	r4, r3
  4047ea:	4690      	mov	r8, r2
  4047ec:	9e08      	ldr	r6, [sp, #32]
  4047ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4047f0:	f7ff fd76 	bl	4042e0 <_Balloc>
  4047f4:	f3c4 0213 	ubfx	r2, r4, #0, #20
  4047f8:	f3c4 540a 	ubfx	r4, r4, #20, #11
  4047fc:	4607      	mov	r7, r0
  4047fe:	bb34      	cbnz	r4, 40484e <__d2b+0x6c>
  404800:	9201      	str	r2, [sp, #4]
  404802:	f1b8 0f00 	cmp.w	r8, #0
  404806:	d027      	beq.n	404858 <__d2b+0x76>
  404808:	a802      	add	r0, sp, #8
  40480a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40480e:	f7ff fe0c 	bl	40442a <__lo0bits>
  404812:	9900      	ldr	r1, [sp, #0]
  404814:	b1f0      	cbz	r0, 404854 <__d2b+0x72>
  404816:	9a01      	ldr	r2, [sp, #4]
  404818:	f1c0 0320 	rsb	r3, r0, #32
  40481c:	fa02 f303 	lsl.w	r3, r2, r3
  404820:	430b      	orrs	r3, r1
  404822:	40c2      	lsrs	r2, r0
  404824:	617b      	str	r3, [r7, #20]
  404826:	9201      	str	r2, [sp, #4]
  404828:	9b01      	ldr	r3, [sp, #4]
  40482a:	61bb      	str	r3, [r7, #24]
  40482c:	2b00      	cmp	r3, #0
  40482e:	bf14      	ite	ne
  404830:	2102      	movne	r1, #2
  404832:	2101      	moveq	r1, #1
  404834:	6139      	str	r1, [r7, #16]
  404836:	b1c4      	cbz	r4, 40486a <__d2b+0x88>
  404838:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40483c:	4404      	add	r4, r0
  40483e:	6034      	str	r4, [r6, #0]
  404840:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  404844:	6028      	str	r0, [r5, #0]
  404846:	4638      	mov	r0, r7
  404848:	b002      	add	sp, #8
  40484a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40484e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  404852:	e7d5      	b.n	404800 <__d2b+0x1e>
  404854:	6179      	str	r1, [r7, #20]
  404856:	e7e7      	b.n	404828 <__d2b+0x46>
  404858:	a801      	add	r0, sp, #4
  40485a:	f7ff fde6 	bl	40442a <__lo0bits>
  40485e:	9b01      	ldr	r3, [sp, #4]
  404860:	617b      	str	r3, [r7, #20]
  404862:	2101      	movs	r1, #1
  404864:	6139      	str	r1, [r7, #16]
  404866:	3020      	adds	r0, #32
  404868:	e7e5      	b.n	404836 <__d2b+0x54>
  40486a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40486e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  404872:	6030      	str	r0, [r6, #0]
  404874:	6918      	ldr	r0, [r3, #16]
  404876:	f7ff fdb9 	bl	4043ec <__hi0bits>
  40487a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40487e:	e7e1      	b.n	404844 <__d2b+0x62>

00404880 <_calloc_r>:
  404880:	b538      	push	{r3, r4, r5, lr}
  404882:	fb02 f401 	mul.w	r4, r2, r1
  404886:	4621      	mov	r1, r4
  404888:	f000 f856 	bl	404938 <_malloc_r>
  40488c:	4605      	mov	r5, r0
  40488e:	b118      	cbz	r0, 404898 <_calloc_r+0x18>
  404890:	4622      	mov	r2, r4
  404892:	2100      	movs	r1, #0
  404894:	f7fd ff43 	bl	40271e <memset>
  404898:	4628      	mov	r0, r5
  40489a:	bd38      	pop	{r3, r4, r5, pc}

0040489c <_free_r>:
  40489c:	b538      	push	{r3, r4, r5, lr}
  40489e:	4605      	mov	r5, r0
  4048a0:	2900      	cmp	r1, #0
  4048a2:	d045      	beq.n	404930 <_free_r+0x94>
  4048a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4048a8:	1f0c      	subs	r4, r1, #4
  4048aa:	2b00      	cmp	r3, #0
  4048ac:	bfb8      	it	lt
  4048ae:	18e4      	addlt	r4, r4, r3
  4048b0:	f000 fb5a 	bl	404f68 <__malloc_lock>
  4048b4:	4a1f      	ldr	r2, [pc, #124]	; (404934 <_free_r+0x98>)
  4048b6:	6813      	ldr	r3, [r2, #0]
  4048b8:	4610      	mov	r0, r2
  4048ba:	b933      	cbnz	r3, 4048ca <_free_r+0x2e>
  4048bc:	6063      	str	r3, [r4, #4]
  4048be:	6014      	str	r4, [r2, #0]
  4048c0:	4628      	mov	r0, r5
  4048c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4048c6:	f000 bb50 	b.w	404f6a <__malloc_unlock>
  4048ca:	42a3      	cmp	r3, r4
  4048cc:	d90c      	bls.n	4048e8 <_free_r+0x4c>
  4048ce:	6821      	ldr	r1, [r4, #0]
  4048d0:	1862      	adds	r2, r4, r1
  4048d2:	4293      	cmp	r3, r2
  4048d4:	bf04      	itt	eq
  4048d6:	681a      	ldreq	r2, [r3, #0]
  4048d8:	685b      	ldreq	r3, [r3, #4]
  4048da:	6063      	str	r3, [r4, #4]
  4048dc:	bf04      	itt	eq
  4048de:	1852      	addeq	r2, r2, r1
  4048e0:	6022      	streq	r2, [r4, #0]
  4048e2:	6004      	str	r4, [r0, #0]
  4048e4:	e7ec      	b.n	4048c0 <_free_r+0x24>
  4048e6:	4613      	mov	r3, r2
  4048e8:	685a      	ldr	r2, [r3, #4]
  4048ea:	b10a      	cbz	r2, 4048f0 <_free_r+0x54>
  4048ec:	42a2      	cmp	r2, r4
  4048ee:	d9fa      	bls.n	4048e6 <_free_r+0x4a>
  4048f0:	6819      	ldr	r1, [r3, #0]
  4048f2:	1858      	adds	r0, r3, r1
  4048f4:	42a0      	cmp	r0, r4
  4048f6:	d10b      	bne.n	404910 <_free_r+0x74>
  4048f8:	6820      	ldr	r0, [r4, #0]
  4048fa:	4401      	add	r1, r0
  4048fc:	1858      	adds	r0, r3, r1
  4048fe:	4282      	cmp	r2, r0
  404900:	6019      	str	r1, [r3, #0]
  404902:	d1dd      	bne.n	4048c0 <_free_r+0x24>
  404904:	6810      	ldr	r0, [r2, #0]
  404906:	6852      	ldr	r2, [r2, #4]
  404908:	605a      	str	r2, [r3, #4]
  40490a:	4401      	add	r1, r0
  40490c:	6019      	str	r1, [r3, #0]
  40490e:	e7d7      	b.n	4048c0 <_free_r+0x24>
  404910:	d902      	bls.n	404918 <_free_r+0x7c>
  404912:	230c      	movs	r3, #12
  404914:	602b      	str	r3, [r5, #0]
  404916:	e7d3      	b.n	4048c0 <_free_r+0x24>
  404918:	6820      	ldr	r0, [r4, #0]
  40491a:	1821      	adds	r1, r4, r0
  40491c:	428a      	cmp	r2, r1
  40491e:	bf04      	itt	eq
  404920:	6811      	ldreq	r1, [r2, #0]
  404922:	6852      	ldreq	r2, [r2, #4]
  404924:	6062      	str	r2, [r4, #4]
  404926:	bf04      	itt	eq
  404928:	1809      	addeq	r1, r1, r0
  40492a:	6021      	streq	r1, [r4, #0]
  40492c:	605c      	str	r4, [r3, #4]
  40492e:	e7c7      	b.n	4048c0 <_free_r+0x24>
  404930:	bd38      	pop	{r3, r4, r5, pc}
  404932:	bf00      	nop
  404934:	20400400 	.word	0x20400400

00404938 <_malloc_r>:
  404938:	b570      	push	{r4, r5, r6, lr}
  40493a:	1ccd      	adds	r5, r1, #3
  40493c:	f025 0503 	bic.w	r5, r5, #3
  404940:	3508      	adds	r5, #8
  404942:	2d0c      	cmp	r5, #12
  404944:	bf38      	it	cc
  404946:	250c      	movcc	r5, #12
  404948:	2d00      	cmp	r5, #0
  40494a:	4606      	mov	r6, r0
  40494c:	db01      	blt.n	404952 <_malloc_r+0x1a>
  40494e:	42a9      	cmp	r1, r5
  404950:	d903      	bls.n	40495a <_malloc_r+0x22>
  404952:	230c      	movs	r3, #12
  404954:	6033      	str	r3, [r6, #0]
  404956:	2000      	movs	r0, #0
  404958:	bd70      	pop	{r4, r5, r6, pc}
  40495a:	f000 fb05 	bl	404f68 <__malloc_lock>
  40495e:	4a23      	ldr	r2, [pc, #140]	; (4049ec <_malloc_r+0xb4>)
  404960:	6814      	ldr	r4, [r2, #0]
  404962:	4621      	mov	r1, r4
  404964:	b991      	cbnz	r1, 40498c <_malloc_r+0x54>
  404966:	4c22      	ldr	r4, [pc, #136]	; (4049f0 <_malloc_r+0xb8>)
  404968:	6823      	ldr	r3, [r4, #0]
  40496a:	b91b      	cbnz	r3, 404974 <_malloc_r+0x3c>
  40496c:	4630      	mov	r0, r6
  40496e:	f000 f97f 	bl	404c70 <_sbrk_r>
  404972:	6020      	str	r0, [r4, #0]
  404974:	4629      	mov	r1, r5
  404976:	4630      	mov	r0, r6
  404978:	f000 f97a 	bl	404c70 <_sbrk_r>
  40497c:	1c43      	adds	r3, r0, #1
  40497e:	d126      	bne.n	4049ce <_malloc_r+0x96>
  404980:	230c      	movs	r3, #12
  404982:	6033      	str	r3, [r6, #0]
  404984:	4630      	mov	r0, r6
  404986:	f000 faf0 	bl	404f6a <__malloc_unlock>
  40498a:	e7e4      	b.n	404956 <_malloc_r+0x1e>
  40498c:	680b      	ldr	r3, [r1, #0]
  40498e:	1b5b      	subs	r3, r3, r5
  404990:	d41a      	bmi.n	4049c8 <_malloc_r+0x90>
  404992:	2b0b      	cmp	r3, #11
  404994:	d90f      	bls.n	4049b6 <_malloc_r+0x7e>
  404996:	600b      	str	r3, [r1, #0]
  404998:	50cd      	str	r5, [r1, r3]
  40499a:	18cc      	adds	r4, r1, r3
  40499c:	4630      	mov	r0, r6
  40499e:	f000 fae4 	bl	404f6a <__malloc_unlock>
  4049a2:	f104 000b 	add.w	r0, r4, #11
  4049a6:	1d23      	adds	r3, r4, #4
  4049a8:	f020 0007 	bic.w	r0, r0, #7
  4049ac:	1ac3      	subs	r3, r0, r3
  4049ae:	d01b      	beq.n	4049e8 <_malloc_r+0xb0>
  4049b0:	425a      	negs	r2, r3
  4049b2:	50e2      	str	r2, [r4, r3]
  4049b4:	bd70      	pop	{r4, r5, r6, pc}
  4049b6:	428c      	cmp	r4, r1
  4049b8:	bf0d      	iteet	eq
  4049ba:	6863      	ldreq	r3, [r4, #4]
  4049bc:	684b      	ldrne	r3, [r1, #4]
  4049be:	6063      	strne	r3, [r4, #4]
  4049c0:	6013      	streq	r3, [r2, #0]
  4049c2:	bf18      	it	ne
  4049c4:	460c      	movne	r4, r1
  4049c6:	e7e9      	b.n	40499c <_malloc_r+0x64>
  4049c8:	460c      	mov	r4, r1
  4049ca:	6849      	ldr	r1, [r1, #4]
  4049cc:	e7ca      	b.n	404964 <_malloc_r+0x2c>
  4049ce:	1cc4      	adds	r4, r0, #3
  4049d0:	f024 0403 	bic.w	r4, r4, #3
  4049d4:	42a0      	cmp	r0, r4
  4049d6:	d005      	beq.n	4049e4 <_malloc_r+0xac>
  4049d8:	1a21      	subs	r1, r4, r0
  4049da:	4630      	mov	r0, r6
  4049dc:	f000 f948 	bl	404c70 <_sbrk_r>
  4049e0:	3001      	adds	r0, #1
  4049e2:	d0cd      	beq.n	404980 <_malloc_r+0x48>
  4049e4:	6025      	str	r5, [r4, #0]
  4049e6:	e7d9      	b.n	40499c <_malloc_r+0x64>
  4049e8:	bd70      	pop	{r4, r5, r6, pc}
  4049ea:	bf00      	nop
  4049ec:	20400400 	.word	0x20400400
  4049f0:	20400404 	.word	0x20400404

004049f4 <__sfputc_r>:
  4049f4:	6893      	ldr	r3, [r2, #8]
  4049f6:	3b01      	subs	r3, #1
  4049f8:	2b00      	cmp	r3, #0
  4049fa:	b410      	push	{r4}
  4049fc:	6093      	str	r3, [r2, #8]
  4049fe:	da08      	bge.n	404a12 <__sfputc_r+0x1e>
  404a00:	6994      	ldr	r4, [r2, #24]
  404a02:	42a3      	cmp	r3, r4
  404a04:	db02      	blt.n	404a0c <__sfputc_r+0x18>
  404a06:	b2cb      	uxtb	r3, r1
  404a08:	2b0a      	cmp	r3, #10
  404a0a:	d102      	bne.n	404a12 <__sfputc_r+0x1e>
  404a0c:	bc10      	pop	{r4}
  404a0e:	f000 b983 	b.w	404d18 <__swbuf_r>
  404a12:	6813      	ldr	r3, [r2, #0]
  404a14:	1c58      	adds	r0, r3, #1
  404a16:	6010      	str	r0, [r2, #0]
  404a18:	7019      	strb	r1, [r3, #0]
  404a1a:	b2c8      	uxtb	r0, r1
  404a1c:	bc10      	pop	{r4}
  404a1e:	4770      	bx	lr

00404a20 <__sfputs_r>:
  404a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404a22:	4606      	mov	r6, r0
  404a24:	460f      	mov	r7, r1
  404a26:	4614      	mov	r4, r2
  404a28:	18d5      	adds	r5, r2, r3
  404a2a:	42ac      	cmp	r4, r5
  404a2c:	d101      	bne.n	404a32 <__sfputs_r+0x12>
  404a2e:	2000      	movs	r0, #0
  404a30:	e007      	b.n	404a42 <__sfputs_r+0x22>
  404a32:	463a      	mov	r2, r7
  404a34:	f814 1b01 	ldrb.w	r1, [r4], #1
  404a38:	4630      	mov	r0, r6
  404a3a:	f7ff ffdb 	bl	4049f4 <__sfputc_r>
  404a3e:	1c43      	adds	r3, r0, #1
  404a40:	d1f3      	bne.n	404a2a <__sfputs_r+0xa>
  404a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00404a44 <_vfiprintf_r>:
  404a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a48:	b09d      	sub	sp, #116	; 0x74
  404a4a:	460c      	mov	r4, r1
  404a4c:	4617      	mov	r7, r2
  404a4e:	9303      	str	r3, [sp, #12]
  404a50:	4606      	mov	r6, r0
  404a52:	b118      	cbz	r0, 404a5c <_vfiprintf_r+0x18>
  404a54:	6983      	ldr	r3, [r0, #24]
  404a56:	b90b      	cbnz	r3, 404a5c <_vfiprintf_r+0x18>
  404a58:	f7ff faee 	bl	404038 <__sinit>
  404a5c:	4b7c      	ldr	r3, [pc, #496]	; (404c50 <_vfiprintf_r+0x20c>)
  404a5e:	429c      	cmp	r4, r3
  404a60:	d157      	bne.n	404b12 <_vfiprintf_r+0xce>
  404a62:	6874      	ldr	r4, [r6, #4]
  404a64:	89a3      	ldrh	r3, [r4, #12]
  404a66:	0718      	lsls	r0, r3, #28
  404a68:	d55d      	bpl.n	404b26 <_vfiprintf_r+0xe2>
  404a6a:	6923      	ldr	r3, [r4, #16]
  404a6c:	2b00      	cmp	r3, #0
  404a6e:	d05a      	beq.n	404b26 <_vfiprintf_r+0xe2>
  404a70:	2300      	movs	r3, #0
  404a72:	9309      	str	r3, [sp, #36]	; 0x24
  404a74:	2320      	movs	r3, #32
  404a76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  404a7a:	2330      	movs	r3, #48	; 0x30
  404a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  404a80:	f04f 0b01 	mov.w	fp, #1
  404a84:	46b8      	mov	r8, r7
  404a86:	4645      	mov	r5, r8
  404a88:	f815 3b01 	ldrb.w	r3, [r5], #1
  404a8c:	2b00      	cmp	r3, #0
  404a8e:	d155      	bne.n	404b3c <_vfiprintf_r+0xf8>
  404a90:	ebb8 0a07 	subs.w	sl, r8, r7
  404a94:	d00b      	beq.n	404aae <_vfiprintf_r+0x6a>
  404a96:	4653      	mov	r3, sl
  404a98:	463a      	mov	r2, r7
  404a9a:	4621      	mov	r1, r4
  404a9c:	4630      	mov	r0, r6
  404a9e:	f7ff ffbf 	bl	404a20 <__sfputs_r>
  404aa2:	3001      	adds	r0, #1
  404aa4:	f000 80c4 	beq.w	404c30 <_vfiprintf_r+0x1ec>
  404aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404aaa:	4453      	add	r3, sl
  404aac:	9309      	str	r3, [sp, #36]	; 0x24
  404aae:	f898 3000 	ldrb.w	r3, [r8]
  404ab2:	2b00      	cmp	r3, #0
  404ab4:	f000 80bc 	beq.w	404c30 <_vfiprintf_r+0x1ec>
  404ab8:	2300      	movs	r3, #0
  404aba:	f04f 32ff 	mov.w	r2, #4294967295
  404abe:	9304      	str	r3, [sp, #16]
  404ac0:	9307      	str	r3, [sp, #28]
  404ac2:	9205      	str	r2, [sp, #20]
  404ac4:	9306      	str	r3, [sp, #24]
  404ac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  404aca:	931a      	str	r3, [sp, #104]	; 0x68
  404acc:	2205      	movs	r2, #5
  404ace:	7829      	ldrb	r1, [r5, #0]
  404ad0:	4860      	ldr	r0, [pc, #384]	; (404c54 <_vfiprintf_r+0x210>)
  404ad2:	f7ff fbb5 	bl	404240 <memchr>
  404ad6:	f105 0801 	add.w	r8, r5, #1
  404ada:	9b04      	ldr	r3, [sp, #16]
  404adc:	2800      	cmp	r0, #0
  404ade:	d131      	bne.n	404b44 <_vfiprintf_r+0x100>
  404ae0:	06d9      	lsls	r1, r3, #27
  404ae2:	bf44      	itt	mi
  404ae4:	2220      	movmi	r2, #32
  404ae6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404aea:	071a      	lsls	r2, r3, #28
  404aec:	bf44      	itt	mi
  404aee:	222b      	movmi	r2, #43	; 0x2b
  404af0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404af4:	782a      	ldrb	r2, [r5, #0]
  404af6:	2a2a      	cmp	r2, #42	; 0x2a
  404af8:	d02c      	beq.n	404b54 <_vfiprintf_r+0x110>
  404afa:	9a07      	ldr	r2, [sp, #28]
  404afc:	2100      	movs	r1, #0
  404afe:	200a      	movs	r0, #10
  404b00:	46a8      	mov	r8, r5
  404b02:	3501      	adds	r5, #1
  404b04:	f898 3000 	ldrb.w	r3, [r8]
  404b08:	3b30      	subs	r3, #48	; 0x30
  404b0a:	2b09      	cmp	r3, #9
  404b0c:	d96d      	bls.n	404bea <_vfiprintf_r+0x1a6>
  404b0e:	b371      	cbz	r1, 404b6e <_vfiprintf_r+0x12a>
  404b10:	e026      	b.n	404b60 <_vfiprintf_r+0x11c>
  404b12:	4b51      	ldr	r3, [pc, #324]	; (404c58 <_vfiprintf_r+0x214>)
  404b14:	429c      	cmp	r4, r3
  404b16:	d101      	bne.n	404b1c <_vfiprintf_r+0xd8>
  404b18:	68b4      	ldr	r4, [r6, #8]
  404b1a:	e7a3      	b.n	404a64 <_vfiprintf_r+0x20>
  404b1c:	4b4f      	ldr	r3, [pc, #316]	; (404c5c <_vfiprintf_r+0x218>)
  404b1e:	429c      	cmp	r4, r3
  404b20:	bf08      	it	eq
  404b22:	68f4      	ldreq	r4, [r6, #12]
  404b24:	e79e      	b.n	404a64 <_vfiprintf_r+0x20>
  404b26:	4621      	mov	r1, r4
  404b28:	4630      	mov	r0, r6
  404b2a:	f000 f959 	bl	404de0 <__swsetup_r>
  404b2e:	2800      	cmp	r0, #0
  404b30:	d09e      	beq.n	404a70 <_vfiprintf_r+0x2c>
  404b32:	f04f 30ff 	mov.w	r0, #4294967295
  404b36:	b01d      	add	sp, #116	; 0x74
  404b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b3c:	2b25      	cmp	r3, #37	; 0x25
  404b3e:	d0a7      	beq.n	404a90 <_vfiprintf_r+0x4c>
  404b40:	46a8      	mov	r8, r5
  404b42:	e7a0      	b.n	404a86 <_vfiprintf_r+0x42>
  404b44:	4a43      	ldr	r2, [pc, #268]	; (404c54 <_vfiprintf_r+0x210>)
  404b46:	1a80      	subs	r0, r0, r2
  404b48:	fa0b f000 	lsl.w	r0, fp, r0
  404b4c:	4318      	orrs	r0, r3
  404b4e:	9004      	str	r0, [sp, #16]
  404b50:	4645      	mov	r5, r8
  404b52:	e7bb      	b.n	404acc <_vfiprintf_r+0x88>
  404b54:	9a03      	ldr	r2, [sp, #12]
  404b56:	1d11      	adds	r1, r2, #4
  404b58:	6812      	ldr	r2, [r2, #0]
  404b5a:	9103      	str	r1, [sp, #12]
  404b5c:	2a00      	cmp	r2, #0
  404b5e:	db01      	blt.n	404b64 <_vfiprintf_r+0x120>
  404b60:	9207      	str	r2, [sp, #28]
  404b62:	e004      	b.n	404b6e <_vfiprintf_r+0x12a>
  404b64:	4252      	negs	r2, r2
  404b66:	f043 0302 	orr.w	r3, r3, #2
  404b6a:	9207      	str	r2, [sp, #28]
  404b6c:	9304      	str	r3, [sp, #16]
  404b6e:	f898 3000 	ldrb.w	r3, [r8]
  404b72:	2b2e      	cmp	r3, #46	; 0x2e
  404b74:	d110      	bne.n	404b98 <_vfiprintf_r+0x154>
  404b76:	f898 3001 	ldrb.w	r3, [r8, #1]
  404b7a:	2b2a      	cmp	r3, #42	; 0x2a
  404b7c:	f108 0101 	add.w	r1, r8, #1
  404b80:	d137      	bne.n	404bf2 <_vfiprintf_r+0x1ae>
  404b82:	9b03      	ldr	r3, [sp, #12]
  404b84:	1d1a      	adds	r2, r3, #4
  404b86:	681b      	ldr	r3, [r3, #0]
  404b88:	9203      	str	r2, [sp, #12]
  404b8a:	2b00      	cmp	r3, #0
  404b8c:	bfb8      	it	lt
  404b8e:	f04f 33ff 	movlt.w	r3, #4294967295
  404b92:	f108 0802 	add.w	r8, r8, #2
  404b96:	9305      	str	r3, [sp, #20]
  404b98:	4d31      	ldr	r5, [pc, #196]	; (404c60 <_vfiprintf_r+0x21c>)
  404b9a:	f898 1000 	ldrb.w	r1, [r8]
  404b9e:	2203      	movs	r2, #3
  404ba0:	4628      	mov	r0, r5
  404ba2:	f7ff fb4d 	bl	404240 <memchr>
  404ba6:	b140      	cbz	r0, 404bba <_vfiprintf_r+0x176>
  404ba8:	2340      	movs	r3, #64	; 0x40
  404baa:	1b40      	subs	r0, r0, r5
  404bac:	fa03 f000 	lsl.w	r0, r3, r0
  404bb0:	9b04      	ldr	r3, [sp, #16]
  404bb2:	4303      	orrs	r3, r0
  404bb4:	9304      	str	r3, [sp, #16]
  404bb6:	f108 0801 	add.w	r8, r8, #1
  404bba:	f898 1000 	ldrb.w	r1, [r8]
  404bbe:	4829      	ldr	r0, [pc, #164]	; (404c64 <_vfiprintf_r+0x220>)
  404bc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  404bc4:	2206      	movs	r2, #6
  404bc6:	f108 0701 	add.w	r7, r8, #1
  404bca:	f7ff fb39 	bl	404240 <memchr>
  404bce:	2800      	cmp	r0, #0
  404bd0:	d034      	beq.n	404c3c <_vfiprintf_r+0x1f8>
  404bd2:	4b25      	ldr	r3, [pc, #148]	; (404c68 <_vfiprintf_r+0x224>)
  404bd4:	bb03      	cbnz	r3, 404c18 <_vfiprintf_r+0x1d4>
  404bd6:	9b03      	ldr	r3, [sp, #12]
  404bd8:	3307      	adds	r3, #7
  404bda:	f023 0307 	bic.w	r3, r3, #7
  404bde:	3308      	adds	r3, #8
  404be0:	9303      	str	r3, [sp, #12]
  404be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404be4:	444b      	add	r3, r9
  404be6:	9309      	str	r3, [sp, #36]	; 0x24
  404be8:	e74c      	b.n	404a84 <_vfiprintf_r+0x40>
  404bea:	fb00 3202 	mla	r2, r0, r2, r3
  404bee:	2101      	movs	r1, #1
  404bf0:	e786      	b.n	404b00 <_vfiprintf_r+0xbc>
  404bf2:	2300      	movs	r3, #0
  404bf4:	9305      	str	r3, [sp, #20]
  404bf6:	4618      	mov	r0, r3
  404bf8:	250a      	movs	r5, #10
  404bfa:	4688      	mov	r8, r1
  404bfc:	3101      	adds	r1, #1
  404bfe:	f898 2000 	ldrb.w	r2, [r8]
  404c02:	3a30      	subs	r2, #48	; 0x30
  404c04:	2a09      	cmp	r2, #9
  404c06:	d903      	bls.n	404c10 <_vfiprintf_r+0x1cc>
  404c08:	2b00      	cmp	r3, #0
  404c0a:	d0c5      	beq.n	404b98 <_vfiprintf_r+0x154>
  404c0c:	9005      	str	r0, [sp, #20]
  404c0e:	e7c3      	b.n	404b98 <_vfiprintf_r+0x154>
  404c10:	fb05 2000 	mla	r0, r5, r0, r2
  404c14:	2301      	movs	r3, #1
  404c16:	e7f0      	b.n	404bfa <_vfiprintf_r+0x1b6>
  404c18:	ab03      	add	r3, sp, #12
  404c1a:	9300      	str	r3, [sp, #0]
  404c1c:	4622      	mov	r2, r4
  404c1e:	4b13      	ldr	r3, [pc, #76]	; (404c6c <_vfiprintf_r+0x228>)
  404c20:	a904      	add	r1, sp, #16
  404c22:	4630      	mov	r0, r6
  404c24:	f7fd fe14 	bl	402850 <_printf_float>
  404c28:	f1b0 3fff 	cmp.w	r0, #4294967295
  404c2c:	4681      	mov	r9, r0
  404c2e:	d1d8      	bne.n	404be2 <_vfiprintf_r+0x19e>
  404c30:	89a3      	ldrh	r3, [r4, #12]
  404c32:	065b      	lsls	r3, r3, #25
  404c34:	f53f af7d 	bmi.w	404b32 <_vfiprintf_r+0xee>
  404c38:	9809      	ldr	r0, [sp, #36]	; 0x24
  404c3a:	e77c      	b.n	404b36 <_vfiprintf_r+0xf2>
  404c3c:	ab03      	add	r3, sp, #12
  404c3e:	9300      	str	r3, [sp, #0]
  404c40:	4622      	mov	r2, r4
  404c42:	4b0a      	ldr	r3, [pc, #40]	; (404c6c <_vfiprintf_r+0x228>)
  404c44:	a904      	add	r1, sp, #16
  404c46:	4630      	mov	r0, r6
  404c48:	f7fe f8b0 	bl	402dac <_printf_i>
  404c4c:	e7ec      	b.n	404c28 <_vfiprintf_r+0x1e4>
  404c4e:	bf00      	nop
  404c50:	00405444 	.word	0x00405444
  404c54:	00405584 	.word	0x00405584
  404c58:	00405464 	.word	0x00405464
  404c5c:	00405424 	.word	0x00405424
  404c60:	0040558a 	.word	0x0040558a
  404c64:	0040558e 	.word	0x0040558e
  404c68:	00402851 	.word	0x00402851
  404c6c:	00404a21 	.word	0x00404a21

00404c70 <_sbrk_r>:
  404c70:	b538      	push	{r3, r4, r5, lr}
  404c72:	4c06      	ldr	r4, [pc, #24]	; (404c8c <_sbrk_r+0x1c>)
  404c74:	2300      	movs	r3, #0
  404c76:	4605      	mov	r5, r0
  404c78:	4608      	mov	r0, r1
  404c7a:	6023      	str	r3, [r4, #0]
  404c7c:	f7fc f8a2 	bl	400dc4 <_sbrk>
  404c80:	1c43      	adds	r3, r0, #1
  404c82:	d102      	bne.n	404c8a <_sbrk_r+0x1a>
  404c84:	6823      	ldr	r3, [r4, #0]
  404c86:	b103      	cbz	r3, 404c8a <_sbrk_r+0x1a>
  404c88:	602b      	str	r3, [r5, #0]
  404c8a:	bd38      	pop	{r3, r4, r5, pc}
  404c8c:	204004b4 	.word	0x204004b4

00404c90 <__sread>:
  404c90:	b510      	push	{r4, lr}
  404c92:	460c      	mov	r4, r1
  404c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404c98:	f000 f968 	bl	404f6c <_read_r>
  404c9c:	2800      	cmp	r0, #0
  404c9e:	bfab      	itete	ge
  404ca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  404ca2:	89a3      	ldrhlt	r3, [r4, #12]
  404ca4:	181b      	addge	r3, r3, r0
  404ca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  404caa:	bfac      	ite	ge
  404cac:	6563      	strge	r3, [r4, #84]	; 0x54
  404cae:	81a3      	strhlt	r3, [r4, #12]
  404cb0:	bd10      	pop	{r4, pc}

00404cb2 <__swrite>:
  404cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404cb6:	461f      	mov	r7, r3
  404cb8:	898b      	ldrh	r3, [r1, #12]
  404cba:	05db      	lsls	r3, r3, #23
  404cbc:	4605      	mov	r5, r0
  404cbe:	460c      	mov	r4, r1
  404cc0:	4616      	mov	r6, r2
  404cc2:	d505      	bpl.n	404cd0 <__swrite+0x1e>
  404cc4:	2302      	movs	r3, #2
  404cc6:	2200      	movs	r2, #0
  404cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404ccc:	f000 f928 	bl	404f20 <_lseek_r>
  404cd0:	89a3      	ldrh	r3, [r4, #12]
  404cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404cda:	81a3      	strh	r3, [r4, #12]
  404cdc:	4632      	mov	r2, r6
  404cde:	463b      	mov	r3, r7
  404ce0:	4628      	mov	r0, r5
  404ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404ce6:	f000 b869 	b.w	404dbc <_write_r>

00404cea <__sseek>:
  404cea:	b510      	push	{r4, lr}
  404cec:	460c      	mov	r4, r1
  404cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404cf2:	f000 f915 	bl	404f20 <_lseek_r>
  404cf6:	1c43      	adds	r3, r0, #1
  404cf8:	89a3      	ldrh	r3, [r4, #12]
  404cfa:	bf15      	itete	ne
  404cfc:	6560      	strne	r0, [r4, #84]	; 0x54
  404cfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404d02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404d06:	81a3      	strheq	r3, [r4, #12]
  404d08:	bf18      	it	ne
  404d0a:	81a3      	strhne	r3, [r4, #12]
  404d0c:	bd10      	pop	{r4, pc}

00404d0e <__sclose>:
  404d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404d12:	f000 b8d3 	b.w	404ebc <_close_r>
	...

00404d18 <__swbuf_r>:
  404d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404d1a:	460e      	mov	r6, r1
  404d1c:	4614      	mov	r4, r2
  404d1e:	4605      	mov	r5, r0
  404d20:	b118      	cbz	r0, 404d2a <__swbuf_r+0x12>
  404d22:	6983      	ldr	r3, [r0, #24]
  404d24:	b90b      	cbnz	r3, 404d2a <__swbuf_r+0x12>
  404d26:	f7ff f987 	bl	404038 <__sinit>
  404d2a:	4b21      	ldr	r3, [pc, #132]	; (404db0 <__swbuf_r+0x98>)
  404d2c:	429c      	cmp	r4, r3
  404d2e:	d12a      	bne.n	404d86 <__swbuf_r+0x6e>
  404d30:	686c      	ldr	r4, [r5, #4]
  404d32:	69a3      	ldr	r3, [r4, #24]
  404d34:	60a3      	str	r3, [r4, #8]
  404d36:	89a3      	ldrh	r3, [r4, #12]
  404d38:	071a      	lsls	r2, r3, #28
  404d3a:	d52e      	bpl.n	404d9a <__swbuf_r+0x82>
  404d3c:	6923      	ldr	r3, [r4, #16]
  404d3e:	b363      	cbz	r3, 404d9a <__swbuf_r+0x82>
  404d40:	6923      	ldr	r3, [r4, #16]
  404d42:	6820      	ldr	r0, [r4, #0]
  404d44:	1ac0      	subs	r0, r0, r3
  404d46:	6963      	ldr	r3, [r4, #20]
  404d48:	b2f6      	uxtb	r6, r6
  404d4a:	4298      	cmp	r0, r3
  404d4c:	4637      	mov	r7, r6
  404d4e:	db04      	blt.n	404d5a <__swbuf_r+0x42>
  404d50:	4621      	mov	r1, r4
  404d52:	4628      	mov	r0, r5
  404d54:	f7ff f906 	bl	403f64 <_fflush_r>
  404d58:	bb28      	cbnz	r0, 404da6 <__swbuf_r+0x8e>
  404d5a:	68a3      	ldr	r3, [r4, #8]
  404d5c:	3b01      	subs	r3, #1
  404d5e:	60a3      	str	r3, [r4, #8]
  404d60:	6823      	ldr	r3, [r4, #0]
  404d62:	1c5a      	adds	r2, r3, #1
  404d64:	6022      	str	r2, [r4, #0]
  404d66:	701e      	strb	r6, [r3, #0]
  404d68:	6963      	ldr	r3, [r4, #20]
  404d6a:	3001      	adds	r0, #1
  404d6c:	4298      	cmp	r0, r3
  404d6e:	d004      	beq.n	404d7a <__swbuf_r+0x62>
  404d70:	89a3      	ldrh	r3, [r4, #12]
  404d72:	07db      	lsls	r3, r3, #31
  404d74:	d519      	bpl.n	404daa <__swbuf_r+0x92>
  404d76:	2e0a      	cmp	r6, #10
  404d78:	d117      	bne.n	404daa <__swbuf_r+0x92>
  404d7a:	4621      	mov	r1, r4
  404d7c:	4628      	mov	r0, r5
  404d7e:	f7ff f8f1 	bl	403f64 <_fflush_r>
  404d82:	b190      	cbz	r0, 404daa <__swbuf_r+0x92>
  404d84:	e00f      	b.n	404da6 <__swbuf_r+0x8e>
  404d86:	4b0b      	ldr	r3, [pc, #44]	; (404db4 <__swbuf_r+0x9c>)
  404d88:	429c      	cmp	r4, r3
  404d8a:	d101      	bne.n	404d90 <__swbuf_r+0x78>
  404d8c:	68ac      	ldr	r4, [r5, #8]
  404d8e:	e7d0      	b.n	404d32 <__swbuf_r+0x1a>
  404d90:	4b09      	ldr	r3, [pc, #36]	; (404db8 <__swbuf_r+0xa0>)
  404d92:	429c      	cmp	r4, r3
  404d94:	bf08      	it	eq
  404d96:	68ec      	ldreq	r4, [r5, #12]
  404d98:	e7cb      	b.n	404d32 <__swbuf_r+0x1a>
  404d9a:	4621      	mov	r1, r4
  404d9c:	4628      	mov	r0, r5
  404d9e:	f000 f81f 	bl	404de0 <__swsetup_r>
  404da2:	2800      	cmp	r0, #0
  404da4:	d0cc      	beq.n	404d40 <__swbuf_r+0x28>
  404da6:	f04f 37ff 	mov.w	r7, #4294967295
  404daa:	4638      	mov	r0, r7
  404dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404dae:	bf00      	nop
  404db0:	00405444 	.word	0x00405444
  404db4:	00405464 	.word	0x00405464
  404db8:	00405424 	.word	0x00405424

00404dbc <_write_r>:
  404dbc:	b538      	push	{r3, r4, r5, lr}
  404dbe:	4c07      	ldr	r4, [pc, #28]	; (404ddc <_write_r+0x20>)
  404dc0:	4605      	mov	r5, r0
  404dc2:	4608      	mov	r0, r1
  404dc4:	4611      	mov	r1, r2
  404dc6:	2200      	movs	r2, #0
  404dc8:	6022      	str	r2, [r4, #0]
  404dca:	461a      	mov	r2, r3
  404dcc:	f7fc ffa0 	bl	401d10 <_write>
  404dd0:	1c43      	adds	r3, r0, #1
  404dd2:	d102      	bne.n	404dda <_write_r+0x1e>
  404dd4:	6823      	ldr	r3, [r4, #0]
  404dd6:	b103      	cbz	r3, 404dda <_write_r+0x1e>
  404dd8:	602b      	str	r3, [r5, #0]
  404dda:	bd38      	pop	{r3, r4, r5, pc}
  404ddc:	204004b4 	.word	0x204004b4

00404de0 <__swsetup_r>:
  404de0:	4b32      	ldr	r3, [pc, #200]	; (404eac <__swsetup_r+0xcc>)
  404de2:	b570      	push	{r4, r5, r6, lr}
  404de4:	681d      	ldr	r5, [r3, #0]
  404de6:	4606      	mov	r6, r0
  404de8:	460c      	mov	r4, r1
  404dea:	b125      	cbz	r5, 404df6 <__swsetup_r+0x16>
  404dec:	69ab      	ldr	r3, [r5, #24]
  404dee:	b913      	cbnz	r3, 404df6 <__swsetup_r+0x16>
  404df0:	4628      	mov	r0, r5
  404df2:	f7ff f921 	bl	404038 <__sinit>
  404df6:	4b2e      	ldr	r3, [pc, #184]	; (404eb0 <__swsetup_r+0xd0>)
  404df8:	429c      	cmp	r4, r3
  404dfa:	d10f      	bne.n	404e1c <__swsetup_r+0x3c>
  404dfc:	686c      	ldr	r4, [r5, #4]
  404dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e02:	b29a      	uxth	r2, r3
  404e04:	0715      	lsls	r5, r2, #28
  404e06:	d42c      	bmi.n	404e62 <__swsetup_r+0x82>
  404e08:	06d0      	lsls	r0, r2, #27
  404e0a:	d411      	bmi.n	404e30 <__swsetup_r+0x50>
  404e0c:	2209      	movs	r2, #9
  404e0e:	6032      	str	r2, [r6, #0]
  404e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404e14:	81a3      	strh	r3, [r4, #12]
  404e16:	f04f 30ff 	mov.w	r0, #4294967295
  404e1a:	bd70      	pop	{r4, r5, r6, pc}
  404e1c:	4b25      	ldr	r3, [pc, #148]	; (404eb4 <__swsetup_r+0xd4>)
  404e1e:	429c      	cmp	r4, r3
  404e20:	d101      	bne.n	404e26 <__swsetup_r+0x46>
  404e22:	68ac      	ldr	r4, [r5, #8]
  404e24:	e7eb      	b.n	404dfe <__swsetup_r+0x1e>
  404e26:	4b24      	ldr	r3, [pc, #144]	; (404eb8 <__swsetup_r+0xd8>)
  404e28:	429c      	cmp	r4, r3
  404e2a:	bf08      	it	eq
  404e2c:	68ec      	ldreq	r4, [r5, #12]
  404e2e:	e7e6      	b.n	404dfe <__swsetup_r+0x1e>
  404e30:	0751      	lsls	r1, r2, #29
  404e32:	d512      	bpl.n	404e5a <__swsetup_r+0x7a>
  404e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
  404e36:	b141      	cbz	r1, 404e4a <__swsetup_r+0x6a>
  404e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404e3c:	4299      	cmp	r1, r3
  404e3e:	d002      	beq.n	404e46 <__swsetup_r+0x66>
  404e40:	4630      	mov	r0, r6
  404e42:	f7ff fd2b 	bl	40489c <_free_r>
  404e46:	2300      	movs	r3, #0
  404e48:	6363      	str	r3, [r4, #52]	; 0x34
  404e4a:	89a3      	ldrh	r3, [r4, #12]
  404e4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  404e50:	81a3      	strh	r3, [r4, #12]
  404e52:	2300      	movs	r3, #0
  404e54:	6063      	str	r3, [r4, #4]
  404e56:	6923      	ldr	r3, [r4, #16]
  404e58:	6023      	str	r3, [r4, #0]
  404e5a:	89a3      	ldrh	r3, [r4, #12]
  404e5c:	f043 0308 	orr.w	r3, r3, #8
  404e60:	81a3      	strh	r3, [r4, #12]
  404e62:	6923      	ldr	r3, [r4, #16]
  404e64:	b94b      	cbnz	r3, 404e7a <__swsetup_r+0x9a>
  404e66:	89a3      	ldrh	r3, [r4, #12]
  404e68:	f403 7320 	and.w	r3, r3, #640	; 0x280
  404e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404e70:	d003      	beq.n	404e7a <__swsetup_r+0x9a>
  404e72:	4621      	mov	r1, r4
  404e74:	4630      	mov	r0, r6
  404e76:	f7ff f99b 	bl	4041b0 <__smakebuf_r>
  404e7a:	89a2      	ldrh	r2, [r4, #12]
  404e7c:	f012 0301 	ands.w	r3, r2, #1
  404e80:	d00c      	beq.n	404e9c <__swsetup_r+0xbc>
  404e82:	2300      	movs	r3, #0
  404e84:	60a3      	str	r3, [r4, #8]
  404e86:	6963      	ldr	r3, [r4, #20]
  404e88:	425b      	negs	r3, r3
  404e8a:	61a3      	str	r3, [r4, #24]
  404e8c:	6923      	ldr	r3, [r4, #16]
  404e8e:	b953      	cbnz	r3, 404ea6 <__swsetup_r+0xc6>
  404e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e94:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  404e98:	d1ba      	bne.n	404e10 <__swsetup_r+0x30>
  404e9a:	bd70      	pop	{r4, r5, r6, pc}
  404e9c:	0792      	lsls	r2, r2, #30
  404e9e:	bf58      	it	pl
  404ea0:	6963      	ldrpl	r3, [r4, #20]
  404ea2:	60a3      	str	r3, [r4, #8]
  404ea4:	e7f2      	b.n	404e8c <__swsetup_r+0xac>
  404ea6:	2000      	movs	r0, #0
  404ea8:	e7f7      	b.n	404e9a <__swsetup_r+0xba>
  404eaa:	bf00      	nop
  404eac:	20400048 	.word	0x20400048
  404eb0:	00405444 	.word	0x00405444
  404eb4:	00405464 	.word	0x00405464
  404eb8:	00405424 	.word	0x00405424

00404ebc <_close_r>:
  404ebc:	b538      	push	{r3, r4, r5, lr}
  404ebe:	4c06      	ldr	r4, [pc, #24]	; (404ed8 <_close_r+0x1c>)
  404ec0:	2300      	movs	r3, #0
  404ec2:	4605      	mov	r5, r0
  404ec4:	4608      	mov	r0, r1
  404ec6:	6023      	str	r3, [r4, #0]
  404ec8:	f7fb ff8e 	bl	400de8 <_close>
  404ecc:	1c43      	adds	r3, r0, #1
  404ece:	d102      	bne.n	404ed6 <_close_r+0x1a>
  404ed0:	6823      	ldr	r3, [r4, #0]
  404ed2:	b103      	cbz	r3, 404ed6 <_close_r+0x1a>
  404ed4:	602b      	str	r3, [r5, #0]
  404ed6:	bd38      	pop	{r3, r4, r5, pc}
  404ed8:	204004b4 	.word	0x204004b4

00404edc <_fstat_r>:
  404edc:	b538      	push	{r3, r4, r5, lr}
  404ede:	4c07      	ldr	r4, [pc, #28]	; (404efc <_fstat_r+0x20>)
  404ee0:	2300      	movs	r3, #0
  404ee2:	4605      	mov	r5, r0
  404ee4:	4608      	mov	r0, r1
  404ee6:	4611      	mov	r1, r2
  404ee8:	6023      	str	r3, [r4, #0]
  404eea:	f7fb ff80 	bl	400dee <_fstat>
  404eee:	1c43      	adds	r3, r0, #1
  404ef0:	d102      	bne.n	404ef8 <_fstat_r+0x1c>
  404ef2:	6823      	ldr	r3, [r4, #0]
  404ef4:	b103      	cbz	r3, 404ef8 <_fstat_r+0x1c>
  404ef6:	602b      	str	r3, [r5, #0]
  404ef8:	bd38      	pop	{r3, r4, r5, pc}
  404efa:	bf00      	nop
  404efc:	204004b4 	.word	0x204004b4

00404f00 <_isatty_r>:
  404f00:	b538      	push	{r3, r4, r5, lr}
  404f02:	4c06      	ldr	r4, [pc, #24]	; (404f1c <_isatty_r+0x1c>)
  404f04:	2300      	movs	r3, #0
  404f06:	4605      	mov	r5, r0
  404f08:	4608      	mov	r0, r1
  404f0a:	6023      	str	r3, [r4, #0]
  404f0c:	f7fb ff74 	bl	400df8 <_isatty>
  404f10:	1c43      	adds	r3, r0, #1
  404f12:	d102      	bne.n	404f1a <_isatty_r+0x1a>
  404f14:	6823      	ldr	r3, [r4, #0]
  404f16:	b103      	cbz	r3, 404f1a <_isatty_r+0x1a>
  404f18:	602b      	str	r3, [r5, #0]
  404f1a:	bd38      	pop	{r3, r4, r5, pc}
  404f1c:	204004b4 	.word	0x204004b4

00404f20 <_lseek_r>:
  404f20:	b538      	push	{r3, r4, r5, lr}
  404f22:	4c07      	ldr	r4, [pc, #28]	; (404f40 <_lseek_r+0x20>)
  404f24:	4605      	mov	r5, r0
  404f26:	4608      	mov	r0, r1
  404f28:	4611      	mov	r1, r2
  404f2a:	2200      	movs	r2, #0
  404f2c:	6022      	str	r2, [r4, #0]
  404f2e:	461a      	mov	r2, r3
  404f30:	f7fb ff64 	bl	400dfc <_lseek>
  404f34:	1c43      	adds	r3, r0, #1
  404f36:	d102      	bne.n	404f3e <_lseek_r+0x1e>
  404f38:	6823      	ldr	r3, [r4, #0]
  404f3a:	b103      	cbz	r3, 404f3e <_lseek_r+0x1e>
  404f3c:	602b      	str	r3, [r5, #0]
  404f3e:	bd38      	pop	{r3, r4, r5, pc}
  404f40:	204004b4 	.word	0x204004b4

00404f44 <__ascii_mbtowc>:
  404f44:	b082      	sub	sp, #8
  404f46:	b901      	cbnz	r1, 404f4a <__ascii_mbtowc+0x6>
  404f48:	a901      	add	r1, sp, #4
  404f4a:	b142      	cbz	r2, 404f5e <__ascii_mbtowc+0x1a>
  404f4c:	b14b      	cbz	r3, 404f62 <__ascii_mbtowc+0x1e>
  404f4e:	7813      	ldrb	r3, [r2, #0]
  404f50:	600b      	str	r3, [r1, #0]
  404f52:	7812      	ldrb	r2, [r2, #0]
  404f54:	1c10      	adds	r0, r2, #0
  404f56:	bf18      	it	ne
  404f58:	2001      	movne	r0, #1
  404f5a:	b002      	add	sp, #8
  404f5c:	4770      	bx	lr
  404f5e:	4610      	mov	r0, r2
  404f60:	e7fb      	b.n	404f5a <__ascii_mbtowc+0x16>
  404f62:	f06f 0001 	mvn.w	r0, #1
  404f66:	e7f8      	b.n	404f5a <__ascii_mbtowc+0x16>

00404f68 <__malloc_lock>:
  404f68:	4770      	bx	lr

00404f6a <__malloc_unlock>:
  404f6a:	4770      	bx	lr

00404f6c <_read_r>:
  404f6c:	b538      	push	{r3, r4, r5, lr}
  404f6e:	4c07      	ldr	r4, [pc, #28]	; (404f8c <_read_r+0x20>)
  404f70:	4605      	mov	r5, r0
  404f72:	4608      	mov	r0, r1
  404f74:	4611      	mov	r1, r2
  404f76:	2200      	movs	r2, #0
  404f78:	6022      	str	r2, [r4, #0]
  404f7a:	461a      	mov	r2, r3
  404f7c:	f7fc feb6 	bl	401cec <_read>
  404f80:	1c43      	adds	r3, r0, #1
  404f82:	d102      	bne.n	404f8a <_read_r+0x1e>
  404f84:	6823      	ldr	r3, [r4, #0]
  404f86:	b103      	cbz	r3, 404f8a <_read_r+0x1e>
  404f88:	602b      	str	r3, [r5, #0]
  404f8a:	bd38      	pop	{r3, r4, r5, pc}
  404f8c:	204004b4 	.word	0x204004b4

00404f90 <__ascii_wctomb>:
  404f90:	b149      	cbz	r1, 404fa6 <__ascii_wctomb+0x16>
  404f92:	2aff      	cmp	r2, #255	; 0xff
  404f94:	bf85      	ittet	hi
  404f96:	238a      	movhi	r3, #138	; 0x8a
  404f98:	6003      	strhi	r3, [r0, #0]
  404f9a:	700a      	strbls	r2, [r1, #0]
  404f9c:	f04f 30ff 	movhi.w	r0, #4294967295
  404fa0:	bf98      	it	ls
  404fa2:	2001      	movls	r0, #1
  404fa4:	4770      	bx	lr
  404fa6:	4608      	mov	r0, r1
  404fa8:	4770      	bx	lr
	...

00404fac <__aeabi_dcmpun>:
  404fac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404fb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404fb4:	d102      	bne.n	404fbc <__aeabi_dcmpun+0x10>
  404fb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404fba:	d10a      	bne.n	404fd2 <__aeabi_dcmpun+0x26>
  404fbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404fc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404fc4:	d102      	bne.n	404fcc <__aeabi_dcmpun+0x20>
  404fc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404fca:	d102      	bne.n	404fd2 <__aeabi_dcmpun+0x26>
  404fcc:	f04f 0000 	mov.w	r0, #0
  404fd0:	4770      	bx	lr
  404fd2:	f04f 0001 	mov.w	r0, #1
  404fd6:	4770      	bx	lr
  404fd8:	682f2e2e 	.word	0x682f2e2e
  404fdc:	732f6c61 	.word	0x732f6c61
  404fe0:	682f6372 	.word	0x682f6372
  404fe4:	615f6c61 	.word	0x615f6c61
  404fe8:	735f6364 	.word	0x735f6364
  404fec:	2e636e79 	.word	0x2e636e79
  404ff0:	00000063 	.word	0x00000063
  404ff4:	682f2e2e 	.word	0x682f2e2e
  404ff8:	732f6c61 	.word	0x732f6c61
  404ffc:	682f6372 	.word	0x682f6372
  405000:	695f6c61 	.word	0x695f6c61
  405004:	00632e6f 	.word	0x00632e6f
  405008:	682f2e2e 	.word	0x682f2e2e
  40500c:	732f6c61 	.word	0x732f6c61
  405010:	682f6372 	.word	0x682f6372
  405014:	705f6c61 	.word	0x705f6c61
  405018:	632e6d77 	.word	0x632e6d77
  40501c:	00000000 	.word	0x00000000
  405020:	682f2e2e 	.word	0x682f2e2e
  405024:	732f6c61 	.word	0x732f6c61
  405028:	682f6372 	.word	0x682f6372
  40502c:	745f6c61 	.word	0x745f6c61
  405030:	72656d69 	.word	0x72656d69
  405034:	0000632e 	.word	0x0000632e
  405038:	682f2e2e 	.word	0x682f2e2e
  40503c:	732f6c61 	.word	0x732f6c61
  405040:	682f6372 	.word	0x682f6372
  405044:	755f6c61 	.word	0x755f6c61
  405048:	74726173 	.word	0x74726173
  40504c:	6e79735f 	.word	0x6e79735f
  405050:	00632e63 	.word	0x00632e63
  405054:	682f2e2e 	.word	0x682f2e2e
  405058:	752f6c61 	.word	0x752f6c61
  40505c:	736c6974 	.word	0x736c6974
  405060:	6372732f 	.word	0x6372732f
  405064:	6974752f 	.word	0x6974752f
  405068:	6c5f736c 	.word	0x6c5f736c
  40506c:	2e747369 	.word	0x2e747369
  405070:	00000063 	.word	0x00000063

00405074 <_afecs>:
  405074:	00000000 2f843100 23000000 ffffffff     .....1./...#....
  405084:	0000ffff 00000000 00000000 00000000     ................
  405094:	0000010c 00000000 00000000 00000000     ................
  4050a4:	00000000 00000200 00000200 00000200     ................
  4050b4:	00000200 00000200 00000200 00000200     ................
  4050c4:	00000200 00000200 00000200 00000200     ................
  4050d4:	00000200 00000001 2f843100 03000000     .........1./....
  4050e4:	ffffffff 0000ffff 00000000 00000000     ................
  4050f4:	00000000 0000010c 00000000 00000000     ................
	...
  40510c:	00000200 00000200 00000200 00000200     ................
  40511c:	00000200 00000200 00000200 00000200     ................
  40512c:	00000200 00000200 00000200 00000200     ................
  40513c:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  40514c:	63656661 0000632e                       afec.c..

00405154 <_ext_irq>:
  405154:	00000000 00000024 00000000 00000000     ....$...........
	...
  405170:	00000003 00080000 00000000 00000000     ................
	...

0040518c <_pio_irq_n>:
  40518c:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  40519c:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  4051ac:	00000000                                ....

004051b0 <_pwms>:
  4051b0:	40020000 0000001f 00010019 00000001     ...@............
  4051c0:	00000001 000000ff 00000000 00000004     ................
	...
  4051dc:	00000002 00405238 00000000 20400298     ....8R@.......@ 
  4051ec:	4005c000 0000003c 00010019 00000001     ...@<...........
  4051fc:	00000001 000000ff 00000000 00000004     ................
	...
  405218:	00000001 00405228 00000000 2040028c     ....(R@.......@ 

00405228 <_ch_cfg1>:
  405228:	00000000 0000010b 000003e8 00000200     ................

00405238 <_ch_cfg0>:
  405238:	00000000 0000010b 000003e8 00000200     ................
  405248:	00000002 0000010b 000003e8 00000200     ................
  405258:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  405268:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  405278:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00405284 <_usarts>:
  405284:	00000001 001008c0 000100f4 682f2e2e     ............../h
  405294:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  4052a4:	632e7472 00000000                       rt.c....

004052ac <_cfgs>:
  4052ac:	23043001 00000000 00000040 00000000     .0.#....@.......
  4052bc:	00000040 00000000 00000040 00000000     @.......@.......
  4052cc:	00000040 00000000 00000040 00000000     @.......@.......
  4052dc:	00000040 00000000 00000040 00000000     @.......@.......
  4052ec:	00000040 00000000 00000040 00000000     @.......@.......
  4052fc:	00000040 00000000 00000040 00000000     @.......@.......
  40530c:	00000040 00000000 00000040 00000000     @.......@.......
  40531c:	00000040 00000000 00000040 00000000     @.......@.......
  40532c:	00000040 00000000 00000040 00000000     @.......@.......
  40533c:	00000040 00000000 00000040 00000000     @.......@.......
  40534c:	00000040 00000000 00000040 00000000     @.......@.......
  40535c:	00000040 00000000 00000040 00000000     @.......@.......
  40536c:	65746e69 70757272 202d2074 25206925     interrupt - %i %
  40537c:	69252069 20692520 25206925 69252069     i %i %i %i %i %i
  40538c:	20692520 25206925 69252069 20692520      %i %i %i %i %i 
  40539c:	00000a20 6e69616d 25202d20 000a2069      ...main - %i ..
  4053ac:	6e69616d 25202d20 69252069 20692520     main - %i %i %i 
  4053bc:	25206925 69252069 20692520 25206925     %i %i %i %i %i %
  4053cc:	69252069 20692520 20206925 0000000a     i %i %i %i  ....

004053dc <_global_impure_ptr>:
  4053dc:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  4053ec:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  4053fc:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  40540c:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  40541c:	4e614e00 00000000                       .NaN....

00405424 <__sf_fake_stderr>:
	...

00405444 <__sf_fake_stdin>:
	...

00405464 <__sf_fake_stdout>:
	...

00405488 <__mprec_bigtens>:
  405488:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  405498:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4054a8:	7f73bf3c 75154fdd                       <.s..O.u

004054b0 <__mprec_tens>:
  4054b0:	00000000 3ff00000 00000000 40240000     .......?......$@
  4054c0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4054d0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4054e0:	00000000 412e8480 00000000 416312d0     .......A......cA
  4054f0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  405500:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  405510:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  405520:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  405530:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  405540:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  405550:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  405560:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  405570:	79d99db4 44ea7843                       ...yCx.D

00405578 <p05.6047>:
  405578:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  405588:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  405598:	5849534f 00002e00                                OSIX...

0040559f <_ctype_>:
  40559f:	20202000 20202020 28282020 20282828     .         ((((( 
  4055af:	20202020 20202020 20202020 20202020                     
  4055bf:	10108820 10101010 10101010 10101010      ...............
  4055cf:	04040410 04040404 10040404 10101010     ................
  4055df:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4055ef:	01010101 01010101 01010101 10101010     ................
  4055ff:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40560f:	02020202 02020202 02020202 10101010     ................
  40561f:	00000020 00000000 00000000 00000000      ...............
	...

004056a0 <_init>:
  4056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4056a2:	bf00      	nop
  4056a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4056a6:	bc08      	pop	{r3}
  4056a8:	469e      	mov	lr, r3
  4056aa:	4770      	bx	lr

004056ac <__init_array_start>:
  4056ac:	0040018d 	.word	0x0040018d

004056b0 <_fini>:
  4056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4056b2:	bf00      	nop
  4056b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4056b6:	bc08      	pop	{r3}
  4056b8:	469e      	mov	lr, r3
  4056ba:	4770      	bx	lr

004056bc <__fini_array_start>:
  4056bc:	00400169 	.word	0x00400169
