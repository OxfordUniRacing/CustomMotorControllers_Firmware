
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005f88  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  00405f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004b8  20400218  004061a0  00020218  2**2
                  ALLOC
  3 .heap         00000200  204006d0  00406658  00020218  2**0
                  ALLOC
  4 .stack        00000400  204008d0  00406858  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   00026161  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004e78  00000000  00000000  00046400  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000bc8c  00000000  00000000  0004b278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d90  00000000  00000000  00056f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bb8  00000000  00000000  00057c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00046d45  00000000  00000000  0005884c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001dc11  00000000  00000000  0009f591  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00155ce3  00000000  00000000  000bd1a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002f04  00000000  00000000  00212e88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 0c 40 20 31 06 40 00 2d 06 40 00 2d 06 40 00     ..@ 1.@.-.@.-.@.
  400010:	2d 06 40 00 2d 06 40 00 2d 06 40 00 00 00 00 00     -.@.-.@.-.@.....
	...
  40002c:	2d 06 40 00 2d 06 40 00 00 00 00 00 2d 06 40 00     -.@.-.@.....-.@.
  40003c:	2d 06 40 00 2d 06 40 00 2d 06 40 00 2d 06 40 00     -.@.-.@.-.@.-.@.
  40004c:	2d 06 40 00 2d 06 40 00 2d 06 40 00 2d 06 40 00     -.@.-.@.-.@.-.@.
  40005c:	2d 06 40 00 2d 06 40 00 00 00 00 00 b1 1a 40 00     -.@.-.@.......@.
  40006c:	2d 06 40 00 2d 06 40 00 2d 06 40 00 2d 06 40 00     -.@.-.@.-.@.-.@.
  40007c:	2d 06 40 00 a5 1a 40 00 2d 06 40 00 2d 06 40 00     -.@...@.-.@.-.@.
  40008c:	2d 06 40 00 2d 06 40 00 2d 06 40 00 2d 06 40 00     -.@.-.@.-.@.-.@.
  40009c:	cd 20 40 00 2d 06 40 00 2d 06 40 00 2d 06 40 00     . @.-.@.-.@.-.@.
  4000ac:	2d 06 40 00 2d 06 40 00 85 16 40 00 2d 06 40 00     -.@.-.@...@.-.@.
  4000bc:	5d 1c 40 00 2d 06 40 00 2d 06 40 00 2d 06 40 00     ].@.-.@.-.@.-.@.
  4000cc:	2d 06 40 00 2d 06 40 00 75 18 40 00 2d 06 40 00     -.@.-.@.u.@.-.@.
  4000dc:	2d 06 40 00 99 16 40 00 2d 06 40 00 2d 06 40 00     -.@...@.-.@.-.@.
  4000ec:	2d 06 40 00 2d 06 40 00 2d 06 40 00 2d 06 40 00     -.@.-.@.-.@.-.@.
  4000fc:	2d 06 40 00 2d 06 40 00 2d 06 40 00 e1 20 40 00     -.@.-.@.-.@.. @.
  40010c:	2d 06 40 00 2d 06 40 00 00 00 00 00 00 00 00 00     -.@.-.@.........
  40011c:	00 00 00 00 2d 06 40 00 2d 06 40 00 3d 24 40 00     ....-.@.-.@.=$@.
  40012c:	2d 06 40 00 71 1c 40 00 2d 06 40 00 2d 06 40 00     -.@.q.@.-.@.-.@.
  40013c:	2d 06 40 00 2d 06 40 00 2d 06 40 00 2d 06 40 00     -.@.-.@.-.@.-.@.
  40014c:	2d 06 40 00 2d 06 40 00 2d 06 40 00 2d 06 40 00     -.@.-.@.-.@.-.@.
  40015c:	2d 06 40 00 2d 06 40 00 2d 06 40 00                 -.@.-.@.-.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	00405f88 	.word	0x00405f88

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00405f88 	.word	0x00405f88
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	00405f88 	.word	0x00405f88
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400b01 	.word	0x00400b01
  4001e4:	00402605 	.word	0x00402605

004001e8 <encoder_init>:
	
	//increment rotation counter
	encoder_rotations ++;
}

void encoder_init(void){
  4001e8:	b508      	push	{r3, lr}
	//enable external interrupt on the Z line 
	ext_irq_register(PIO_PA26_IDX,Encoder_Z_Interrupt);
  4001ea:	4917      	ldr	r1, [pc, #92]	; (400248 <encoder_init+0x60>)
  4001ec:	201a      	movs	r0, #26
  4001ee:	4b17      	ldr	r3, [pc, #92]	; (40024c <encoder_init+0x64>)
  4001f0:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4001f2:	4b17      	ldr	r3, [pc, #92]	; (400250 <encoder_init+0x68>)
  4001f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4001f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4001fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400200:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400204:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40020c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400210:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400214:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400218:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40021c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400224:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400228:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40022c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400230:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400238:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40023c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400240:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  400244:	bd08      	pop	{r3, pc}
  400246:	bf00      	nop
  400248:	00400279 	.word	0x00400279
  40024c:	00400f09 	.word	0x00400f09
  400250:	e000e100 	.word	0xe000e100

00400254 <encoder_get_counter>:
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV(mask)) >> TC_CV_CV_Pos;
}

static inline hri_tc_cv_reg_t hri_tc_read_CV_CV_bf(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV_Msk) >> TC_CV_CV_Pos;
  400254:	4a06      	ldr	r2, [pc, #24]	; (400270 <encoder_get_counter+0x1c>)
  400256:	6913      	ldr	r3, [r2, #16]
  400258:	6d10      	ldr	r0, [r2, #80]	; 0x50
	//if starting offset is 0 (which is the case before it was recorded) then it returns the actual counter
	
	
	//get A (first line) and B (second line) counters
	//note that rising and falling edges could be the other way round. It doesn't matter for the current implementation
	int encoder_counter_no_offset =	  ( int) hri_tc_read_CV_CV_bf(TC0,0) + ( int) hri_tc_read_CV_CV_bf(TC0,1) \
  40025a:	4403      	add	r3, r0
  40025c:	f502 2290 	add.w	r2, r2, #294912	; 0x48000
  400260:	6910      	ldr	r0, [r2, #16]
									+ ( int) hri_tc_read_CV_CV_bf(TC3,0) + ( int) hri_tc_read_CV_CV_bf(TC3,1) \
  400262:	4403      	add	r3, r0
  400264:	6d10      	ldr	r0, [r2, #80]	; 0x50
  400266:	4403      	add	r3, r0
									- encoder_inital_offset;														//get the number of steps normalised to the starting offset
  400268:	4a02      	ldr	r2, [pc, #8]	; (400274 <encoder_get_counter+0x20>)
  40026a:	6810      	ldr	r0, [r2, #0]
								
	return encoder_counter_no_offset;
}
  40026c:	1a18      	subs	r0, r3, r0
  40026e:	4770      	bx	lr
  400270:	4000c000 	.word	0x4000c000
  400274:	204004c8 	.word	0x204004c8

00400278 <Encoder_Z_Interrupt>:
static void Encoder_Z_Interrupt (void){
  400278:	b508      	push	{r3, lr}
	int encoder_counter_no_offset = encoder_get_counter();
  40027a:	4b05      	ldr	r3, [pc, #20]	; (400290 <Encoder_Z_Interrupt+0x18>)
  40027c:	4798      	blx	r3
	if(encoder_rotations == 0){
  40027e:	4b05      	ldr	r3, [pc, #20]	; (400294 <Encoder_Z_Interrupt+0x1c>)
  400280:	681b      	ldr	r3, [r3, #0]
  400282:	b90b      	cbnz	r3, 400288 <Encoder_Z_Interrupt+0x10>
		encoder_inital_offset = encoder_counter_no_offset;
  400284:	4a04      	ldr	r2, [pc, #16]	; (400298 <Encoder_Z_Interrupt+0x20>)
  400286:	6010      	str	r0, [r2, #0]
	encoder_rotations ++;
  400288:	3301      	adds	r3, #1
  40028a:	4a02      	ldr	r2, [pc, #8]	; (400294 <Encoder_Z_Interrupt+0x1c>)
  40028c:	6013      	str	r3, [r2, #0]
  40028e:	bd08      	pop	{r3, pc}
  400290:	00400255 	.word	0x00400255
  400294:	204004cc 	.word	0x204004cc
  400298:	204004c8 	.word	0x204004c8

0040029c <dma_adc_1_callback>:
		printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
	}
	
}

static void dma_adc_1_callback(struct _dma_resource *resource){
  40029c:	b530      	push	{r4, r5, lr}
  40029e:	b083      	sub	sp, #12
	//just for testing
	printf("interrupt - ADC 1 - %i %i %i %i  \n", (int)dma_adc_1_buff[0],(int)dma_adc_1_buff[1],(int)dma_adc_1_buff[2],(int)dma_adc_1_buff[3]);
  4002a0:	4820      	ldr	r0, [pc, #128]	; (400324 <dma_adc_1_callback+0x88>)
  4002a2:	6801      	ldr	r1, [r0, #0]
  4002a4:	6842      	ldr	r2, [r0, #4]
  4002a6:	6883      	ldr	r3, [r0, #8]
  4002a8:	68c0      	ldr	r0, [r0, #12]
  4002aa:	9000      	str	r0, [sp, #0]
  4002ac:	481e      	ldr	r0, [pc, #120]	; (400328 <dma_adc_1_callback+0x8c>)
  4002ae:	4c1f      	ldr	r4, [pc, #124]	; (40032c <dma_adc_1_callback+0x90>)
  4002b0:	47a0      	blx	r4
	
	//go through the values that the DMA got and get the ones that we need (currents and bus voltage)
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  4002b2:	2300      	movs	r3, #0
  4002b4:	e008      	b.n	4002c8 <dma_adc_1_callback+0x2c>
		
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
			
			case AFEC_LCDR_CHNB(ADC_CURRENT_C_CHANNEL):
				currents[2] = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  4002b6:	b292      	uxth	r2, r2
  4002b8:	491d      	ldr	r1, [pc, #116]	; (400330 <dma_adc_1_callback+0x94>)
  4002ba:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  4002bc:	4919      	ldr	r1, [pc, #100]	; (400324 <dma_adc_1_callback+0x88>)
  4002be:	7c0a      	ldrb	r2, [r1, #16]
  4002c0:	f042 0204 	orr.w	r2, r2, #4
  4002c4:	740a      	strb	r2, [r1, #16]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  4002c6:	3301      	adds	r3, #1
  4002c8:	2b03      	cmp	r3, #3
  4002ca:	dc13      	bgt.n	4002f4 <dma_adc_1_callback+0x58>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  4002cc:	4a15      	ldr	r2, [pc, #84]	; (400324 <dma_adc_1_callback+0x88>)
  4002ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4002d2:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  4002d6:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  4002da:	d0ec      	beq.n	4002b6 <dma_adc_1_callback+0x1a>
  4002dc:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  4002e0:	d1f1      	bne.n	4002c6 <dma_adc_1_callback+0x2a>
				break;
			
			case AFEC_LCDR_CHNB(ADC_SUPPL_VOLTAGE_CHANNEL):
				voltage = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  4002e2:	b292      	uxth	r2, r2
  4002e4:	4913      	ldr	r1, [pc, #76]	; (400334 <dma_adc_1_callback+0x98>)
  4002e6:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<3);
  4002e8:	490e      	ldr	r1, [pc, #56]	; (400324 <dma_adc_1_callback+0x88>)
  4002ea:	7c0a      	ldrb	r2, [r1, #16]
  4002ec:	f042 0208 	orr.w	r2, r2, #8
  4002f0:	740a      	strb	r2, [r1, #16]
				break;
  4002f2:	e7e8      	b.n	4002c6 <dma_adc_1_callback+0x2a>
			default:
				;
		}
	}
	
	if(ready_values == ALL_VALUES_READY){
  4002f4:	4b0b      	ldr	r3, [pc, #44]	; (400324 <dma_adc_1_callback+0x88>)
  4002f6:	7c1b      	ldrb	r3, [r3, #16]
  4002f8:	2b0f      	cmp	r3, #15
  4002fa:	d001      	beq.n	400300 <dma_adc_1_callback+0x64>
		
		//launch control loop
		printf("Data collected, launching control loop from adc 1 \n");
		printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
	}
}
  4002fc:	b003      	add	sp, #12
  4002fe:	bd30      	pop	{r4, r5, pc}
		ready_values = 0;
  400300:	2200      	movs	r2, #0
  400302:	4b08      	ldr	r3, [pc, #32]	; (400324 <dma_adc_1_callback+0x88>)
  400304:	741a      	strb	r2, [r3, #16]
		printf("Data collected, launching control loop from adc 1 \n");
  400306:	480c      	ldr	r0, [pc, #48]	; (400338 <dma_adc_1_callback+0x9c>)
  400308:	4c08      	ldr	r4, [pc, #32]	; (40032c <dma_adc_1_callback+0x90>)
  40030a:	47a0      	blx	r4
		printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
  40030c:	4808      	ldr	r0, [pc, #32]	; (400330 <dma_adc_1_callback+0x94>)
  40030e:	6843      	ldr	r3, [r0, #4]
  400310:	6802      	ldr	r2, [r0, #0]
  400312:	4908      	ldr	r1, [pc, #32]	; (400334 <dma_adc_1_callback+0x98>)
  400314:	6809      	ldr	r1, [r1, #0]
  400316:	68c5      	ldr	r5, [r0, #12]
  400318:	9501      	str	r5, [sp, #4]
  40031a:	6880      	ldr	r0, [r0, #8]
  40031c:	9000      	str	r0, [sp, #0]
  40031e:	4807      	ldr	r0, [pc, #28]	; (40033c <dma_adc_1_callback+0xa0>)
  400320:	47a0      	blx	r4
}
  400322:	e7eb      	b.n	4002fc <dma_adc_1_callback+0x60>
  400324:	20400234 	.word	0x20400234
  400328:	00405838 	.word	0x00405838
  40032c:	00403845 	.word	0x00403845
  400330:	204004d4 	.word	0x204004d4
  400334:	204004d0 	.word	0x204004d0
  400338:	0040585c 	.word	0x0040585c
  40033c:	0040584c 	.word	0x0040584c

00400340 <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  400340:	b530      	push	{r4, r5, lr}
  400342:	b085      	sub	sp, #20
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3],\
  400344:	4823      	ldr	r0, [pc, #140]	; (4003d4 <dma_adc_0_callback+0x94>)
  400346:	6941      	ldr	r1, [r0, #20]
  400348:	6982      	ldr	r2, [r0, #24]
  40034a:	69c3      	ldr	r3, [r0, #28]
  40034c:	6a04      	ldr	r4, [r0, #32]
		(int)dma_adc_0_buff[4],(int)dma_adc_0_buff[5]);
  40034e:	6a45      	ldr	r5, [r0, #36]	; 0x24
  400350:	6a80      	ldr	r0, [r0, #40]	; 0x28
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3],\
  400352:	9002      	str	r0, [sp, #8]
  400354:	9501      	str	r5, [sp, #4]
  400356:	9400      	str	r4, [sp, #0]
  400358:	481f      	ldr	r0, [pc, #124]	; (4003d8 <dma_adc_0_callback+0x98>)
  40035a:	4c20      	ldr	r4, [pc, #128]	; (4003dc <dma_adc_0_callback+0x9c>)
  40035c:	47a0      	blx	r4
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  40035e:	2300      	movs	r3, #0
  400360:	e008      	b.n	400374 <dma_adc_0_callback+0x34>
				currents[1] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400362:	b292      	uxth	r2, r2
  400364:	491e      	ldr	r1, [pc, #120]	; (4003e0 <dma_adc_0_callback+0xa0>)
  400366:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  400368:	491a      	ldr	r1, [pc, #104]	; (4003d4 <dma_adc_0_callback+0x94>)
  40036a:	7c0a      	ldrb	r2, [r1, #16]
  40036c:	f042 0202 	orr.w	r2, r2, #2
  400370:	740a      	strb	r2, [r1, #16]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400372:	3301      	adds	r3, #1
  400374:	2b05      	cmp	r3, #5
  400376:	dc14      	bgt.n	4003a2 <dma_adc_0_callback+0x62>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400378:	4a16      	ldr	r2, [pc, #88]	; (4003d4 <dma_adc_0_callback+0x94>)
  40037a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  40037e:	6952      	ldr	r2, [r2, #20]
  400380:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400384:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  400388:	d0eb      	beq.n	400362 <dma_adc_0_callback+0x22>
  40038a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40038e:	d1f0      	bne.n	400372 <dma_adc_0_callback+0x32>
				currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400390:	b292      	uxth	r2, r2
  400392:	4913      	ldr	r1, [pc, #76]	; (4003e0 <dma_adc_0_callback+0xa0>)
  400394:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  400396:	490f      	ldr	r1, [pc, #60]	; (4003d4 <dma_adc_0_callback+0x94>)
  400398:	7c0a      	ldrb	r2, [r1, #16]
  40039a:	f042 0201 	orr.w	r2, r2, #1
  40039e:	740a      	strb	r2, [r1, #16]
				break;
  4003a0:	e7e7      	b.n	400372 <dma_adc_0_callback+0x32>
	if(ready_values == ALL_VALUES_READY){
  4003a2:	4b0c      	ldr	r3, [pc, #48]	; (4003d4 <dma_adc_0_callback+0x94>)
  4003a4:	7c1b      	ldrb	r3, [r3, #16]
  4003a6:	2b0f      	cmp	r3, #15
  4003a8:	d001      	beq.n	4003ae <dma_adc_0_callback+0x6e>
}
  4003aa:	b005      	add	sp, #20
  4003ac:	bd30      	pop	{r4, r5, pc}
		ready_values = 0;
  4003ae:	2200      	movs	r2, #0
  4003b0:	4b08      	ldr	r3, [pc, #32]	; (4003d4 <dma_adc_0_callback+0x94>)
  4003b2:	741a      	strb	r2, [r3, #16]
		printf("Data collected, launching control loop from adc 0\n");
  4003b4:	480b      	ldr	r0, [pc, #44]	; (4003e4 <dma_adc_0_callback+0xa4>)
  4003b6:	4c09      	ldr	r4, [pc, #36]	; (4003dc <dma_adc_0_callback+0x9c>)
  4003b8:	47a0      	blx	r4
		printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
  4003ba:	4809      	ldr	r0, [pc, #36]	; (4003e0 <dma_adc_0_callback+0xa0>)
  4003bc:	6843      	ldr	r3, [r0, #4]
  4003be:	6802      	ldr	r2, [r0, #0]
  4003c0:	4909      	ldr	r1, [pc, #36]	; (4003e8 <dma_adc_0_callback+0xa8>)
  4003c2:	6809      	ldr	r1, [r1, #0]
  4003c4:	68c5      	ldr	r5, [r0, #12]
  4003c6:	9501      	str	r5, [sp, #4]
  4003c8:	6880      	ldr	r0, [r0, #8]
  4003ca:	9000      	str	r0, [sp, #0]
  4003cc:	4807      	ldr	r0, [pc, #28]	; (4003ec <dma_adc_0_callback+0xac>)
  4003ce:	47a0      	blx	r4
}
  4003d0:	e7eb      	b.n	4003aa <dma_adc_0_callback+0x6a>
  4003d2:	bf00      	nop
  4003d4:	20400234 	.word	0x20400234
  4003d8:	00405890 	.word	0x00405890
  4003dc:	00403845 	.word	0x00403845
  4003e0:	204004d4 	.word	0x204004d4
  4003e4:	004058bc 	.word	0x004058bc
  4003e8:	204004d0 	.word	0x204004d0
  4003ec:	0040584c 	.word	0x0040584c

004003f0 <dma_adc_init>:


void dma_adc_init(void){
  4003f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	//channel 0 for ADC 0
	
	//source address = AFEC 0->LCDR
	//_dma_set_source_address(0,(void *) ((Afec *)((&ADC_0)->device.hw) + AFEC_LCDR_OFFSET));
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  4003f4:	4919      	ldr	r1, [pc, #100]	; (40045c <dma_adc_init+0x6c>)
  4003f6:	2000      	movs	r0, #0
  4003f8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 40047c <dma_adc_init+0x8c>
  4003fc:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  4003fe:	f8df 8080 	ldr.w	r8, [pc, #128]	; 400480 <dma_adc_init+0x90>
  400402:	f108 0114 	add.w	r1, r8, #20
  400406:	2000      	movs	r0, #0
  400408:	4f15      	ldr	r7, [pc, #84]	; (400460 <dma_adc_init+0x70>)
  40040a:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  40040c:	2118      	movs	r1, #24
  40040e:	2000      	movs	r0, #0
  400410:	4d14      	ldr	r5, [pc, #80]	; (400464 <dma_adc_init+0x74>)
  400412:	47a8      	blx	r5
	
	//set callback function
	struct _dma_resource **res0;
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  400414:	2100      	movs	r1, #0
  400416:	460c      	mov	r4, r1
  400418:	4608      	mov	r0, r1
  40041a:	4e13      	ldr	r6, [pc, #76]	; (400468 <dma_adc_init+0x78>)
  40041c:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  40041e:	6823      	ldr	r3, [r4, #0]
  400420:	4a12      	ldr	r2, [pc, #72]	; (40046c <dma_adc_init+0x7c>)
  400422:	601a      	str	r2, [r3, #0]
	
	//enable interrupt on successful transfer
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400424:	2201      	movs	r2, #1
  400426:	4621      	mov	r1, r4
  400428:	4620      	mov	r0, r4
  40042a:	4c11      	ldr	r4, [pc, #68]	; (400470 <dma_adc_init+0x80>)
  40042c:	47a0      	blx	r4
	
	//channel 0 for ADC 0
	
	//source address = AFEC 1->LCDR
	//_dma_set_source_address(0,(void *) ((Afec *)((&ADC_0)->device.hw) + AFEC_LCDR_OFFSET));
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  40042e:	4911      	ldr	r1, [pc, #68]	; (400474 <dma_adc_init+0x84>)
  400430:	2001      	movs	r0, #1
  400432:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400434:	4641      	mov	r1, r8
  400436:	2001      	movs	r0, #1
  400438:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  40043a:	2110      	movs	r1, #16
  40043c:	2001      	movs	r0, #1
  40043e:	47a8      	blx	r5
	
	//set callback function
	struct _dma_resource **res1;
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  400440:	2101      	movs	r1, #1
  400442:	2500      	movs	r5, #0
  400444:	4628      	mov	r0, r5
  400446:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  400448:	682b      	ldr	r3, [r5, #0]
  40044a:	4a0b      	ldr	r2, [pc, #44]	; (400478 <dma_adc_init+0x88>)
  40044c:	601a      	str	r2, [r3, #0]
	
	//enable interrupt on successful transfer
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  40044e:	2201      	movs	r2, #1
  400450:	4629      	mov	r1, r5
  400452:	4610      	mov	r0, r2
  400454:	47a0      	blx	r4
  400456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40045a:	bf00      	nop
  40045c:	4003c020 	.word	0x4003c020
  400460:	00402381 	.word	0x00402381
  400464:	004023a1 	.word	0x004023a1
  400468:	004023d1 	.word	0x004023d1
  40046c:	00400341 	.word	0x00400341
  400470:	004023e5 	.word	0x004023e5
  400474:	40064020 	.word	0x40064020
  400478:	0040029d 	.word	0x0040029d
  40047c:	00402391 	.word	0x00402391
  400480:	20400234 	.word	0x20400234

00400484 <dma_adc_0_enable_for_one_transaction>:
	//_dma_set_irq_state(DMA_ADC_1_CHANNEL,DMA_TRANSFER_ERROR_CB,true);
		
	
}

void dma_adc_0_enable_for_one_transaction(void){
  400484:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  400486:	4906      	ldr	r1, [pc, #24]	; (4004a0 <dma_adc_0_enable_for_one_transaction+0x1c>)
  400488:	2000      	movs	r0, #0
  40048a:	4b06      	ldr	r3, [pc, #24]	; (4004a4 <dma_adc_0_enable_for_one_transaction+0x20>)
  40048c:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  40048e:	2118      	movs	r1, #24
  400490:	2000      	movs	r0, #0
  400492:	4b05      	ldr	r3, [pc, #20]	; (4004a8 <dma_adc_0_enable_for_one_transaction+0x24>)
  400494:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  400496:	2101      	movs	r1, #1
  400498:	2000      	movs	r0, #0
  40049a:	4b04      	ldr	r3, [pc, #16]	; (4004ac <dma_adc_0_enable_for_one_transaction+0x28>)
  40049c:	4798      	blx	r3
  40049e:	bd08      	pop	{r3, pc}
  4004a0:	20400248 	.word	0x20400248
  4004a4:	00402381 	.word	0x00402381
  4004a8:	004023a1 	.word	0x004023a1
  4004ac:	004023b9 	.word	0x004023b9

004004b0 <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  4004b0:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  4004b2:	4906      	ldr	r1, [pc, #24]	; (4004cc <dma_adc_1_enable_for_one_transaction+0x1c>)
  4004b4:	2001      	movs	r0, #1
  4004b6:	4b06      	ldr	r3, [pc, #24]	; (4004d0 <dma_adc_1_enable_for_one_transaction+0x20>)
  4004b8:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  4004ba:	2110      	movs	r1, #16
  4004bc:	2001      	movs	r0, #1
  4004be:	4b05      	ldr	r3, [pc, #20]	; (4004d4 <dma_adc_1_enable_for_one_transaction+0x24>)
  4004c0:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  4004c2:	2101      	movs	r1, #1
  4004c4:	4608      	mov	r0, r1
  4004c6:	4b04      	ldr	r3, [pc, #16]	; (4004d8 <dma_adc_1_enable_for_one_transaction+0x28>)
  4004c8:	4798      	blx	r3
  4004ca:	bd08      	pop	{r3, pc}
  4004cc:	20400234 	.word	0x20400234
  4004d0:	00402381 	.word	0x00402381
  4004d4:	004023a1 	.word	0x004023a1
  4004d8:	004023b9 	.word	0x004023b9

004004dc <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  4004dc:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  4004de:	4d11      	ldr	r5, [pc, #68]	; (400524 <adc_enable_all+0x48>)
  4004e0:	2108      	movs	r1, #8
  4004e2:	4628      	mov	r0, r5
  4004e4:	4c10      	ldr	r4, [pc, #64]	; (400528 <adc_enable_all+0x4c>)
  4004e6:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  4004e8:	2102      	movs	r1, #2
  4004ea:	4628      	mov	r0, r5
  4004ec:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  4004ee:	4e0f      	ldr	r6, [pc, #60]	; (40052c <adc_enable_all+0x50>)
  4004f0:	2101      	movs	r1, #1
  4004f2:	4630      	mov	r0, r6
  4004f4:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  4004f6:	2106      	movs	r1, #6
  4004f8:	4630      	mov	r0, r6
  4004fa:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  4004fc:	2105      	movs	r1, #5
  4004fe:	4630      	mov	r0, r6
  400500:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  400502:	2106      	movs	r1, #6
  400504:	4628      	mov	r0, r5
  400506:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  400508:	210a      	movs	r1, #10
  40050a:	4628      	mov	r0, r5
  40050c:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  40050e:	2100      	movs	r1, #0
  400510:	4630      	mov	r0, r6
  400512:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  400514:	2105      	movs	r1, #5
  400516:	4628      	mov	r0, r5
  400518:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  40051a:	2100      	movs	r1, #0
  40051c:	4628      	mov	r0, r5
  40051e:	47a0      	blx	r4
  400520:	bd70      	pop	{r4, r5, r6, pc}
  400522:	bf00      	nop
  400524:	204005c8 	.word	0x204005c8
  400528:	00400dd9 	.word	0x00400dd9
  40052c:	204006a0 	.word	0x204006a0

00400530 <pwm_0_callback>:
#include <hpl_pwm.h>
#include <hpl_pwm_config.h>



void pwm_0_callback(void){
  400530:	4770      	bx	lr
	...

00400534 <pwm_init_user>:
	
}


void pwm_init_user(void){
  400534:	b508      	push	{r3, lr}
}

static inline void hri_pwm_set_CMR_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmr_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400536:	4b28      	ldr	r3, [pc, #160]	; (4005d8 <pwm_init_user+0xa4>)
  400538:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  40053c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400540:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}

static inline void hri_pwm_set_DT_DTH_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400544:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400548:	f042 020a 	orr.w	r2, r2, #10
  40054c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
}

static inline void hri_pwm_set_DT_DTL_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400550:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400554:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  400558:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  40055c:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
  400560:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400564:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400568:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  40056c:	f042 020a 	orr.w	r2, r2, #10
  400570:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400574:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400578:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  40057c:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400580:	4a16      	ldr	r2, [pc, #88]	; (4005dc <pwm_init_user+0xa8>)
  400582:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  400586:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  40058a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  40058e:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400592:	f041 010a 	orr.w	r1, r1, #10
  400596:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  40059a:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  40059e:	f441 2120 	orr.w	r1, r1, #655360	; 0xa0000
  4005a2:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  4005a6:	2201      	movs	r2, #1
  4005a8:	611a      	str	r2, [r3, #16]
	
	
	//we want interrupt from one of the PWMs so that we can start the control loop
	//interrupt on PWM 0, channel 0 is enabled ; on PWM 1 is disabled
	hri_pwm_set_IMR1_CHID0_bit(PWM0);									//enable the interrupt from ADC 0, channel 0
	pwm_register_callback(&PWM_0, PWM_PERIOD_CB, pwm_0_callback);
  4005aa:	4a0d      	ldr	r2, [pc, #52]	; (4005e0 <pwm_init_user+0xac>)
  4005ac:	2100      	movs	r1, #0
  4005ae:	480d      	ldr	r0, [pc, #52]	; (4005e4 <pwm_init_user+0xb0>)
  4005b0:	4b0d      	ldr	r3, [pc, #52]	; (4005e8 <pwm_init_user+0xb4>)
  4005b2:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4005b4:	4b0d      	ldr	r3, [pc, #52]	; (4005ec <pwm_init_user+0xb8>)
  4005b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4005ba:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4005bc:	2140      	movs	r1, #64	; 0x40
  4005be:	f883 131f 	strb.w	r1, [r3, #799]	; 0x31f
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4005c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005c6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4005ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4005ce:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4005d2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  4005d6:	bd08      	pop	{r3, pc}
  4005d8:	40020000 	.word	0x40020000
  4005dc:	4005c000 	.word	0x4005c000
  4005e0:	00400531 	.word	0x00400531
  4005e4:	204004e0 	.word	0x204004e0
  4005e8:	004010cd 	.word	0x004010cd
  4005ec:	e000e100 	.word	0xe000e100

004005f0 <pwm_enable_all>:
}


//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  4005f0:	b570      	push	{r4, r5, r6, lr}
	//note it's possible to eable individual channels, but not through these functions
	//functions from hal_pwm.h
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  4005f2:	4c0a      	ldr	r4, [pc, #40]	; (40061c <pwm_enable_all+0x2c>)
  4005f4:	4620      	mov	r0, r4
  4005f6:	4e0a      	ldr	r6, [pc, #40]	; (400620 <pwm_enable_all+0x30>)
  4005f8:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  4005fa:	4d0a      	ldr	r5, [pc, #40]	; (400624 <pwm_enable_all+0x34>)
  4005fc:	4628      	mov	r0, r5
  4005fe:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  400600:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400604:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400608:	4620      	mov	r0, r4
  40060a:	4c07      	ldr	r4, [pc, #28]	; (400628 <pwm_enable_all+0x38>)
  40060c:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD>>1);
  40060e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400612:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400616:	4628      	mov	r0, r5
  400618:	47a0      	blx	r4
  40061a:	bd70      	pop	{r4, r5, r6, pc}
  40061c:	204004e0 	.word	0x204004e0
  400620:	00401091 	.word	0x00401091
  400624:	20400684 	.word	0x20400684
  400628:	00401115 	.word	0x00401115

0040062c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40062c:	e7fe      	b.n	40062c <Dummy_Handler>
	...

00400630 <Reset_Handler>:
{
  400630:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400632:	4b10      	ldr	r3, [pc, #64]	; (400674 <Reset_Handler+0x44>)
  400634:	4a10      	ldr	r2, [pc, #64]	; (400678 <Reset_Handler+0x48>)
  400636:	429a      	cmp	r2, r3
  400638:	d009      	beq.n	40064e <Reset_Handler+0x1e>
  40063a:	4b0e      	ldr	r3, [pc, #56]	; (400674 <Reset_Handler+0x44>)
  40063c:	4a0e      	ldr	r2, [pc, #56]	; (400678 <Reset_Handler+0x48>)
  40063e:	e003      	b.n	400648 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400640:	6811      	ldr	r1, [r2, #0]
  400642:	6019      	str	r1, [r3, #0]
  400644:	3304      	adds	r3, #4
  400646:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400648:	490c      	ldr	r1, [pc, #48]	; (40067c <Reset_Handler+0x4c>)
  40064a:	428b      	cmp	r3, r1
  40064c:	d3f8      	bcc.n	400640 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40064e:	4b0c      	ldr	r3, [pc, #48]	; (400680 <Reset_Handler+0x50>)
  400650:	e002      	b.n	400658 <Reset_Handler+0x28>
                *pDest++ = 0;
  400652:	2200      	movs	r2, #0
  400654:	601a      	str	r2, [r3, #0]
  400656:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400658:	4a0a      	ldr	r2, [pc, #40]	; (400684 <Reset_Handler+0x54>)
  40065a:	4293      	cmp	r3, r2
  40065c:	d3f9      	bcc.n	400652 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40065e:	4a0a      	ldr	r2, [pc, #40]	; (400688 <Reset_Handler+0x58>)
  400660:	4b0a      	ldr	r3, [pc, #40]	; (40068c <Reset_Handler+0x5c>)
  400662:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400666:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400668:	4b09      	ldr	r3, [pc, #36]	; (400690 <Reset_Handler+0x60>)
  40066a:	4798      	blx	r3
        main();
  40066c:	4b09      	ldr	r3, [pc, #36]	; (400694 <Reset_Handler+0x64>)
  40066e:	4798      	blx	r3
  400670:	e7fe      	b.n	400670 <Reset_Handler+0x40>
  400672:	bf00      	nop
  400674:	20400000 	.word	0x20400000
  400678:	00405f88 	.word	0x00405f88
  40067c:	20400218 	.word	0x20400218
  400680:	20400218 	.word	0x20400218
  400684:	204006d0 	.word	0x204006d0
  400688:	e000ed00 	.word	0xe000ed00
  40068c:	00400000 	.word	0x00400000
  400690:	00402f19 	.word	0x00402f19
  400694:	004024a9 	.word	0x004024a9

00400698 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  400698:	b5f0      	push	{r4, r5, r6, r7, lr}
  40069a:	b085      	sub	sp, #20
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40069c:	4b20      	ldr	r3, [pc, #128]	; (400720 <ADC_1_init+0x88>)
  40069e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4006a2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4006a6:	d104      	bne.n	4006b2 <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4006a8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4006ac:	4b1c      	ldr	r3, [pc, #112]	; (400720 <ADC_1_init+0x88>)
  4006ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  4006b2:	4d1c      	ldr	r5, [pc, #112]	; (400724 <ADC_1_init+0x8c>)
  4006b4:	4c1c      	ldr	r4, [pc, #112]	; (400728 <ADC_1_init+0x90>)
  4006b6:	2600      	movs	r6, #0
  4006b8:	9602      	str	r6, [sp, #8]
  4006ba:	4b1c      	ldr	r3, [pc, #112]	; (40072c <ADC_1_init+0x94>)
  4006bc:	9301      	str	r3, [sp, #4]
  4006be:	2304      	movs	r3, #4
  4006c0:	9300      	str	r3, [sp, #0]
  4006c2:	2306      	movs	r3, #6
  4006c4:	462a      	mov	r2, r5
  4006c6:	491a      	ldr	r1, [pc, #104]	; (400730 <ADC_1_init+0x98>)
  4006c8:	4620      	mov	r0, r4
  4006ca:	4f1a      	ldr	r7, [pc, #104]	; (400734 <ADC_1_init+0x9c>)
  4006cc:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  4006ce:	2310      	movs	r3, #16
  4006d0:	f105 0208 	add.w	r2, r5, #8
  4006d4:	4631      	mov	r1, r6
  4006d6:	4620      	mov	r0, r4
  4006d8:	4e17      	ldr	r6, [pc, #92]	; (400738 <ADC_1_init+0xa0>)
  4006da:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  4006dc:	2310      	movs	r3, #16
  4006de:	f105 0218 	add.w	r2, r5, #24
  4006e2:	2101      	movs	r1, #1
  4006e4:	4620      	mov	r0, r4
  4006e6:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  4006e8:	2310      	movs	r3, #16
  4006ea:	f105 0228 	add.w	r2, r5, #40	; 0x28
  4006ee:	2105      	movs	r1, #5
  4006f0:	4620      	mov	r0, r4
  4006f2:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  4006f4:	2310      	movs	r3, #16
  4006f6:	f105 0238 	add.w	r2, r5, #56	; 0x38
  4006fa:	2106      	movs	r1, #6
  4006fc:	4620      	mov	r0, r4
  4006fe:	47b0      	blx	r6
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400700:	2202      	movs	r2, #2
  400702:	4b0e      	ldr	r3, [pc, #56]	; (40073c <ADC_1_init+0xa4>)
  400704:	601a      	str	r2, [r3, #0]
  400706:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40070a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40070e:	601a      	str	r2, [r3, #0]
  400710:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400714:	601a      	str	r2, [r3, #0]
  400716:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40071a:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  40071c:	b005      	add	sp, #20
  40071e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400720:	400e0600 	.word	0x400e0600
  400724:	20400260 	.word	0x20400260
  400728:	204006a0 	.word	0x204006a0
  40072c:	20400540 	.word	0x20400540
  400730:	40064000 	.word	0x40064000
  400734:	00400c79 	.word	0x00400c79
  400738:	00400d21 	.word	0x00400d21
  40073c:	400e1000 	.word	0x400e1000

00400740 <ADC_0_init>:
{
  400740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400744:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400746:	4b2a      	ldr	r3, [pc, #168]	; (4007f0 <ADC_0_init+0xb0>)
  400748:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40074a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40074e:	d103      	bne.n	400758 <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400750:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400754:	4b26      	ldr	r3, [pc, #152]	; (4007f0 <ADC_0_init+0xb0>)
  400756:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  400758:	4d26      	ldr	r5, [pc, #152]	; (4007f4 <ADC_0_init+0xb4>)
  40075a:	4c27      	ldr	r4, [pc, #156]	; (4007f8 <ADC_0_init+0xb8>)
  40075c:	2600      	movs	r6, #0
  40075e:	9602      	str	r6, [sp, #8]
  400760:	4b26      	ldr	r3, [pc, #152]	; (4007fc <ADC_0_init+0xbc>)
  400762:	9301      	str	r3, [sp, #4]
  400764:	2706      	movs	r7, #6
  400766:	9700      	str	r7, [sp, #0]
  400768:	230a      	movs	r3, #10
  40076a:	f105 0248 	add.w	r2, r5, #72	; 0x48
  40076e:	4924      	ldr	r1, [pc, #144]	; (400800 <ADC_0_init+0xc0>)
  400770:	4620      	mov	r0, r4
  400772:	f8df 809c 	ldr.w	r8, [pc, #156]	; 400810 <ADC_0_init+0xd0>
  400776:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  400778:	2310      	movs	r3, #16
  40077a:	f105 0254 	add.w	r2, r5, #84	; 0x54
  40077e:	4631      	mov	r1, r6
  400780:	4620      	mov	r0, r4
  400782:	4e20      	ldr	r6, [pc, #128]	; (400804 <ADC_0_init+0xc4>)
  400784:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  400786:	2310      	movs	r3, #16
  400788:	f105 0264 	add.w	r2, r5, #100	; 0x64
  40078c:	2102      	movs	r1, #2
  40078e:	4620      	mov	r0, r4
  400790:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  400792:	2310      	movs	r3, #16
  400794:	f105 0274 	add.w	r2, r5, #116	; 0x74
  400798:	2105      	movs	r1, #5
  40079a:	4620      	mov	r0, r4
  40079c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  40079e:	2310      	movs	r3, #16
  4007a0:	f105 0284 	add.w	r2, r5, #132	; 0x84
  4007a4:	4639      	mov	r1, r7
  4007a6:	4620      	mov	r0, r4
  4007a8:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  4007aa:	2310      	movs	r3, #16
  4007ac:	f105 0294 	add.w	r2, r5, #148	; 0x94
  4007b0:	2108      	movs	r1, #8
  4007b2:	4620      	mov	r0, r4
  4007b4:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  4007b6:	2310      	movs	r3, #16
  4007b8:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  4007bc:	210a      	movs	r1, #10
  4007be:	4620      	mov	r0, r4
  4007c0:	47b0      	blx	r6
  4007c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4007c6:	4b10      	ldr	r3, [pc, #64]	; (400808 <ADC_0_init+0xc8>)
  4007c8:	601a      	str	r2, [r3, #0]
  4007ca:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4007ce:	2208      	movs	r2, #8
  4007d0:	601a      	str	r2, [r3, #0]
  4007d2:	2204      	movs	r2, #4
  4007d4:	601a      	str	r2, [r3, #0]
  4007d6:	4a0d      	ldr	r2, [pc, #52]	; (40080c <ADC_0_init+0xcc>)
  4007d8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4007dc:	6011      	str	r1, [r2, #0]
  4007de:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4007e2:	6011      	str	r1, [r2, #0]
  4007e4:	2201      	movs	r2, #1
  4007e6:	601a      	str	r2, [r3, #0]
}
  4007e8:	b004      	add	sp, #16
  4007ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007ee:	bf00      	nop
  4007f0:	400e0600 	.word	0x400e0600
  4007f4:	20400260 	.word	0x20400260
  4007f8:	204005c8 	.word	0x204005c8
  4007fc:	204005f4 	.word	0x204005f4
  400800:	4003c000 	.word	0x4003c000
  400804:	00400d21 	.word	0x00400d21
  400808:	400e1400 	.word	0x400e1400
  40080c:	400e0e00 	.word	0x400e0e00
  400810:	00400c79 	.word	0x00400c79

00400814 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400814:	4b04      	ldr	r3, [pc, #16]	; (400828 <EXTERNAL_IRQ_D_init+0x14>)
  400816:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40081a:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  40081c:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  40081e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400822:	601a      	str	r2, [r3, #0]
  400824:	4770      	bx	lr
  400826:	bf00      	nop
  400828:	400e1400 	.word	0x400e1400

0040082c <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  40082c:	4b0a      	ldr	r3, [pc, #40]	; (400858 <EXTERNAL_IRQ_A_init+0x2c>)
  40082e:	2204      	movs	r2, #4
  400830:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400832:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400834:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400838:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40083a:	2220      	movs	r2, #32
  40083c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40083e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400840:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400844:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400846:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40084a:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40084c:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40084e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400852:	601a      	str	r2, [r3, #0]
  400854:	4770      	bx	lr
  400856:	bf00      	nop
  400858:	400e0e00 	.word	0x400e0e00

0040085c <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40085c:	4b16      	ldr	r3, [pc, #88]	; (4008b8 <PWM_0_PORT_init+0x5c>)
  40085e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400860:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400864:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400866:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400868:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  40086c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40086e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400872:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400874:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400876:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  40087a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40087c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40087e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400882:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400888:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40088a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40088c:	f022 0202 	bic.w	r2, r2, #2
  400890:	671a      	str	r2, [r3, #112]	; 0x70
  400892:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400894:	f022 0202 	bic.w	r2, r2, #2
  400898:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40089a:	2202      	movs	r2, #2
  40089c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40089e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4008a0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  4008a4:	671a      	str	r2, [r3, #112]	; 0x70
  4008a6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4008a8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  4008ac:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4008ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4008b2:	605a      	str	r2, [r3, #4]
  4008b4:	4770      	bx	lr
  4008b6:	bf00      	nop
  4008b8:	400e0e00 	.word	0x400e0e00

004008bc <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4008bc:	4b04      	ldr	r3, [pc, #16]	; (4008d0 <PWM_0_CLOCK_init+0x14>)
  4008be:	699b      	ldr	r3, [r3, #24]
  4008c0:	2b00      	cmp	r3, #0
  4008c2:	db03      	blt.n	4008cc <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4008c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4008c8:	4b01      	ldr	r3, [pc, #4]	; (4008d0 <PWM_0_CLOCK_init+0x14>)
  4008ca:	611a      	str	r2, [r3, #16]
  4008cc:	4770      	bx	lr
  4008ce:	bf00      	nop
  4008d0:	400e0600 	.word	0x400e0600

004008d4 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  4008d4:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  4008d6:	4b06      	ldr	r3, [pc, #24]	; (4008f0 <PWM_0_init+0x1c>)
  4008d8:	4798      	blx	r3
	PWM_0_PORT_init();
  4008da:	4b06      	ldr	r3, [pc, #24]	; (4008f4 <PWM_0_init+0x20>)
  4008dc:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  4008de:	4b06      	ldr	r3, [pc, #24]	; (4008f8 <PWM_0_init+0x24>)
  4008e0:	4798      	blx	r3
  4008e2:	4602      	mov	r2, r0
  4008e4:	4905      	ldr	r1, [pc, #20]	; (4008fc <PWM_0_init+0x28>)
  4008e6:	4806      	ldr	r0, [pc, #24]	; (400900 <PWM_0_init+0x2c>)
  4008e8:	4b06      	ldr	r3, [pc, #24]	; (400904 <PWM_0_init+0x30>)
  4008ea:	4798      	blx	r3
  4008ec:	bd08      	pop	{r3, pc}
  4008ee:	bf00      	nop
  4008f0:	004008bd 	.word	0x004008bd
  4008f4:	0040085d 	.word	0x0040085d
  4008f8:	00401ef1 	.word	0x00401ef1
  4008fc:	40020000 	.word	0x40020000
  400900:	204004e0 	.word	0x204004e0
  400904:	0040104d 	.word	0x0040104d

00400908 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400908:	4b0c      	ldr	r3, [pc, #48]	; (40093c <PWM_1_PORT_init+0x34>)
  40090a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40090c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400910:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400912:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400914:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400918:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40091a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40091e:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400920:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400924:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400926:	f042 0201 	orr.w	r2, r2, #1
  40092a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40092c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40092e:	f022 0201 	bic.w	r2, r2, #1
  400932:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400934:	2201      	movs	r2, #1
  400936:	605a      	str	r2, [r3, #4]
  400938:	4770      	bx	lr
  40093a:	bf00      	nop
  40093c:	400e0e00 	.word	0x400e0e00

00400940 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400940:	4b05      	ldr	r3, [pc, #20]	; (400958 <PWM_1_CLOCK_init+0x18>)
  400942:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400946:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  40094a:	d104      	bne.n	400956 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40094c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400950:	4b01      	ldr	r3, [pc, #4]	; (400958 <PWM_1_CLOCK_init+0x18>)
  400952:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400956:	4770      	bx	lr
  400958:	400e0600 	.word	0x400e0600

0040095c <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  40095c:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  40095e:	4b06      	ldr	r3, [pc, #24]	; (400978 <PWM_1_init+0x1c>)
  400960:	4798      	blx	r3
	PWM_1_PORT_init();
  400962:	4b06      	ldr	r3, [pc, #24]	; (40097c <PWM_1_init+0x20>)
  400964:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400966:	4b06      	ldr	r3, [pc, #24]	; (400980 <PWM_1_init+0x24>)
  400968:	4798      	blx	r3
  40096a:	4602      	mov	r2, r0
  40096c:	4905      	ldr	r1, [pc, #20]	; (400984 <PWM_1_init+0x28>)
  40096e:	4806      	ldr	r0, [pc, #24]	; (400988 <PWM_1_init+0x2c>)
  400970:	4b06      	ldr	r3, [pc, #24]	; (40098c <PWM_1_init+0x30>)
  400972:	4798      	blx	r3
  400974:	bd08      	pop	{r3, pc}
  400976:	bf00      	nop
  400978:	00400941 	.word	0x00400941
  40097c:	00400909 	.word	0x00400909
  400980:	00401ef1 	.word	0x00401ef1
  400984:	4005c000 	.word	0x4005c000
  400988:	20400684 	.word	0x20400684
  40098c:	0040104d 	.word	0x0040104d

00400990 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400990:	4b06      	ldr	r3, [pc, #24]	; (4009ac <ENCODER_A_PORT_init+0x1c>)
  400992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400994:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400998:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40099a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40099c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  4009a0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4009a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4009a6:	605a      	str	r2, [r3, #4]
  4009a8:	4770      	bx	lr
  4009aa:	bf00      	nop
  4009ac:	400e0e00 	.word	0x400e0e00

004009b0 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  4009b0:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4009b2:	4b09      	ldr	r3, [pc, #36]	; (4009d8 <ENCODER_A_init+0x28>)
  4009b4:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4009b6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  4009ba:	d103      	bne.n	4009c4 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4009bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4009c0:	4b05      	ldr	r3, [pc, #20]	; (4009d8 <ENCODER_A_init+0x28>)
  4009c2:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  4009c4:	4b05      	ldr	r3, [pc, #20]	; (4009dc <ENCODER_A_init+0x2c>)
  4009c6:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  4009c8:	4b05      	ldr	r3, [pc, #20]	; (4009e0 <ENCODER_A_init+0x30>)
  4009ca:	4798      	blx	r3
  4009cc:	4602      	mov	r2, r0
  4009ce:	4905      	ldr	r1, [pc, #20]	; (4009e4 <ENCODER_A_init+0x34>)
  4009d0:	4805      	ldr	r0, [pc, #20]	; (4009e8 <ENCODER_A_init+0x38>)
  4009d2:	4b06      	ldr	r3, [pc, #24]	; (4009ec <ENCODER_A_init+0x3c>)
  4009d4:	4798      	blx	r3
  4009d6:	bd08      	pop	{r3, pc}
  4009d8:	400e0600 	.word	0x400e0600
  4009dc:	00400991 	.word	0x00400991
  4009e0:	004020c7 	.word	0x004020c7
  4009e4:	4000c000 	.word	0x4000c000
  4009e8:	204005ac 	.word	0x204005ac
  4009ec:	004011fd 	.word	0x004011fd

004009f0 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4009f0:	4b06      	ldr	r3, [pc, #24]	; (400a0c <ENCODER_B_PORT_init+0x1c>)
  4009f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4009f4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4009f8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4009fa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4009fc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  400a00:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400a02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400a06:	605a      	str	r2, [r3, #4]
  400a08:	4770      	bx	lr
  400a0a:	bf00      	nop
  400a0c:	400e1400 	.word	0x400e1400

00400a10 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  400a10:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400a12:	4b0a      	ldr	r3, [pc, #40]	; (400a3c <ENCODER_B_init+0x2c>)
  400a14:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400a18:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  400a1c:	d104      	bne.n	400a28 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400a1e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400a22:	4b06      	ldr	r3, [pc, #24]	; (400a3c <ENCODER_B_init+0x2c>)
  400a24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  400a28:	4b05      	ldr	r3, [pc, #20]	; (400a40 <ENCODER_B_init+0x30>)
  400a2a:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  400a2c:	4b05      	ldr	r3, [pc, #20]	; (400a44 <ENCODER_B_init+0x34>)
  400a2e:	4798      	blx	r3
  400a30:	4602      	mov	r2, r0
  400a32:	4905      	ldr	r1, [pc, #20]	; (400a48 <ENCODER_B_init+0x38>)
  400a34:	4805      	ldr	r0, [pc, #20]	; (400a4c <ENCODER_B_init+0x3c>)
  400a36:	4b06      	ldr	r3, [pc, #24]	; (400a50 <ENCODER_B_init+0x40>)
  400a38:	4798      	blx	r3
  400a3a:	bd08      	pop	{r3, pc}
  400a3c:	400e0600 	.word	0x400e0600
  400a40:	004009f1 	.word	0x004009f1
  400a44:	004020c7 	.word	0x004020c7
  400a48:	40054000 	.word	0x40054000
  400a4c:	204004fc 	.word	0x204004fc
  400a50:	004011fd 	.word	0x004011fd

00400a54 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400a54:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400a56:	4802      	ldr	r0, [pc, #8]	; (400a60 <delay_driver_init+0xc>)
  400a58:	4b02      	ldr	r3, [pc, #8]	; (400a64 <delay_driver_init+0x10>)
  400a5a:	4798      	blx	r3
  400a5c:	bd08      	pop	{r3, pc}
  400a5e:	bf00      	nop
  400a60:	e000e010 	.word	0xe000e010
  400a64:	00400e5d 	.word	0x00400e5d

00400a68 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400a68:	4b0f      	ldr	r3, [pc, #60]	; (400aa8 <EDBG_COM_PORT_init+0x40>)
  400a6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400a6c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400a70:	671a      	str	r2, [r3, #112]	; 0x70
  400a72:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a74:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400a78:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400a7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a7e:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400a80:	4a0a      	ldr	r2, [pc, #40]	; (400aac <EDBG_COM_PORT_init+0x44>)
  400a82:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400a86:	f043 0310 	orr.w	r3, r3, #16
  400a8a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400a8e:	4b08      	ldr	r3, [pc, #32]	; (400ab0 <EDBG_COM_PORT_init+0x48>)
  400a90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400a92:	f042 0210 	orr.w	r2, r2, #16
  400a96:	671a      	str	r2, [r3, #112]	; 0x70
  400a98:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a9a:	f042 0210 	orr.w	r2, r2, #16
  400a9e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400aa0:	2210      	movs	r2, #16
  400aa2:	605a      	str	r2, [r3, #4]
  400aa4:	4770      	bx	lr
  400aa6:	bf00      	nop
  400aa8:	400e0e00 	.word	0x400e0e00
  400aac:	40088000 	.word	0x40088000
  400ab0:	400e1000 	.word	0x400e1000

00400ab4 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400ab4:	4b04      	ldr	r3, [pc, #16]	; (400ac8 <EDBG_COM_CLOCK_init+0x14>)
  400ab6:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400ab8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400abc:	d103      	bne.n	400ac6 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400abe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400ac2:	4b01      	ldr	r3, [pc, #4]	; (400ac8 <EDBG_COM_CLOCK_init+0x14>)
  400ac4:	611a      	str	r2, [r3, #16]
  400ac6:	4770      	bx	lr
  400ac8:	400e0600 	.word	0x400e0600

00400acc <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  400acc:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  400ace:	4b06      	ldr	r3, [pc, #24]	; (400ae8 <EDBG_COM_init+0x1c>)
  400ad0:	4798      	blx	r3
	EDBG_COM_PORT_init();
  400ad2:	4b06      	ldr	r3, [pc, #24]	; (400aec <EDBG_COM_init+0x20>)
  400ad4:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  400ad6:	4b06      	ldr	r3, [pc, #24]	; (400af0 <EDBG_COM_init+0x24>)
  400ad8:	4798      	blx	r3
  400ada:	4602      	mov	r2, r0
  400adc:	4905      	ldr	r1, [pc, #20]	; (400af4 <EDBG_COM_init+0x28>)
  400ade:	4806      	ldr	r0, [pc, #24]	; (400af8 <EDBG_COM_init+0x2c>)
  400ae0:	4b06      	ldr	r3, [pc, #24]	; (400afc <EDBG_COM_init+0x30>)
  400ae2:	4798      	blx	r3
  400ae4:	bd08      	pop	{r3, pc}
  400ae6:	bf00      	nop
  400ae8:	00400ab5 	.word	0x00400ab5
  400aec:	00400a69 	.word	0x00400a69
  400af0:	00402309 	.word	0x00402309
  400af4:	40028000 	.word	0x40028000
  400af8:	204005a0 	.word	0x204005a0
  400afc:	00401345 	.word	0x00401345

00400b00 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  400b00:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400b02:	4b32      	ldr	r3, [pc, #200]	; (400bcc <system_init+0xcc>)
  400b04:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400b06:	4b32      	ldr	r3, [pc, #200]	; (400bd0 <system_init+0xd0>)
  400b08:	699b      	ldr	r3, [r3, #24]
  400b0a:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400b0e:	d103      	bne.n	400b18 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400b14:	4b2e      	ldr	r3, [pc, #184]	; (400bd0 <system_init+0xd0>)
  400b16:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400b18:	4b2d      	ldr	r3, [pc, #180]	; (400bd0 <system_init+0xd0>)
  400b1a:	699b      	ldr	r3, [r3, #24]
  400b1c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400b20:	d103      	bne.n	400b2a <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400b22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400b26:	4b2a      	ldr	r3, [pc, #168]	; (400bd0 <system_init+0xd0>)
  400b28:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400b2a:	4b29      	ldr	r3, [pc, #164]	; (400bd0 <system_init+0xd0>)
  400b2c:	699b      	ldr	r3, [r3, #24]
  400b2e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400b32:	d103      	bne.n	400b3c <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400b34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400b38:	4b25      	ldr	r3, [pc, #148]	; (400bd0 <system_init+0xd0>)
  400b3a:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400b3c:	4a25      	ldr	r2, [pc, #148]	; (400bd4 <system_init+0xd4>)
  400b3e:	6853      	ldr	r3, [r2, #4]
  400b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400b44:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  400b46:	4b24      	ldr	r3, [pc, #144]	; (400bd8 <system_init+0xd8>)
  400b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400b4c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  400b4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  400b52:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  400b54:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400b56:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  400b5a:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400b5c:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400b5e:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400b64:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400b66:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400b68:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400b6e:	f44f 7080 	mov.w	r0, #256	; 0x100
  400b72:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400b74:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400b76:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400b78:	f44f 7000 	mov.w	r0, #512	; 0x200
  400b7c:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400b7e:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400b80:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400b82:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400b86:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400b88:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400b8a:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400b8c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400b90:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400b92:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400b94:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400b96:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400b98:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400b9a:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  400b9c:	4b0f      	ldr	r3, [pc, #60]	; (400bdc <system_init+0xdc>)
  400b9e:	4798      	blx	r3
	ADC_1_init();
  400ba0:	4b0f      	ldr	r3, [pc, #60]	; (400be0 <system_init+0xe0>)
  400ba2:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  400ba4:	4b0f      	ldr	r3, [pc, #60]	; (400be4 <system_init+0xe4>)
  400ba6:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  400ba8:	4b0f      	ldr	r3, [pc, #60]	; (400be8 <system_init+0xe8>)
  400baa:	4798      	blx	r3

	PWM_0_init();
  400bac:	4b0f      	ldr	r3, [pc, #60]	; (400bec <system_init+0xec>)
  400bae:	4798      	blx	r3

	PWM_1_init();
  400bb0:	4b0f      	ldr	r3, [pc, #60]	; (400bf0 <system_init+0xf0>)
  400bb2:	4798      	blx	r3
	ENCODER_A_init();
  400bb4:	4b0f      	ldr	r3, [pc, #60]	; (400bf4 <system_init+0xf4>)
  400bb6:	4798      	blx	r3
	ENCODER_B_init();
  400bb8:	4b0f      	ldr	r3, [pc, #60]	; (400bf8 <system_init+0xf8>)
  400bba:	4798      	blx	r3

	delay_driver_init();
  400bbc:	4b0f      	ldr	r3, [pc, #60]	; (400bfc <system_init+0xfc>)
  400bbe:	4798      	blx	r3

	EDBG_COM_init();
  400bc0:	4b0f      	ldr	r3, [pc, #60]	; (400c00 <system_init+0x100>)
  400bc2:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  400bc4:	4b0f      	ldr	r3, [pc, #60]	; (400c04 <system_init+0x104>)
  400bc6:	4798      	blx	r3
  400bc8:	bd08      	pop	{r3, pc}
  400bca:	bf00      	nop
  400bcc:	0040178d 	.word	0x0040178d
  400bd0:	400e0600 	.word	0x400e0600
  400bd4:	400e1850 	.word	0x400e1850
  400bd8:	400e0e00 	.word	0x400e0e00
  400bdc:	00400741 	.word	0x00400741
  400be0:	00400699 	.word	0x00400699
  400be4:	00400815 	.word	0x00400815
  400be8:	0040082d 	.word	0x0040082d
  400bec:	004008d5 	.word	0x004008d5
  400bf0:	0040095d 	.word	0x0040095d
  400bf4:	004009b1 	.word	0x004009b1
  400bf8:	00400a11 	.word	0x00400a11
  400bfc:	00400a55 	.word	0x00400a55
  400c00:	00400acd 	.word	0x00400acd
  400c04:	00400ed5 	.word	0x00400ed5

00400c08 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  400c08:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  400c0a:	6983      	ldr	r3, [r0, #24]
  400c0c:	b103      	cbz	r3, 400c10 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  400c0e:	4798      	blx	r3
  400c10:	bd08      	pop	{r3, pc}

00400c12 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  400c12:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  400c14:	69c3      	ldr	r3, [r0, #28]
  400c16:	b103      	cbz	r3, 400c1a <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  400c18:	4798      	blx	r3
  400c1a:	bd08      	pop	{r3, pc}

00400c1c <adc_async_channel_conversion_done>:
{
  400c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400c20:	4605      	mov	r5, r0
  400c22:	4688      	mov	r8, r1
  400c24:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  400c26:	6a03      	ldr	r3, [r0, #32]
  400c28:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  400c2a:	6a87      	ldr	r7, [r0, #40]	; 0x28
  400c2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400c30:	00de      	lsls	r6, r3, #3
  400c32:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  400c34:	f104 0a04 	add.w	sl, r4, #4
  400c38:	b2d1      	uxtb	r1, r2
  400c3a:	4650      	mov	r0, sl
  400c3c:	4b0c      	ldr	r3, [pc, #48]	; (400c70 <adc_async_channel_conversion_done+0x54>)
  400c3e:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  400c40:	4628      	mov	r0, r5
  400c42:	4b0c      	ldr	r3, [pc, #48]	; (400c74 <adc_async_channel_conversion_done+0x58>)
  400c44:	4798      	blx	r3
  400c46:	2801      	cmp	r0, #1
  400c48:	d907      	bls.n	400c5a <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  400c4a:	ea4f 2119 	mov.w	r1, r9, lsr #8
  400c4e:	4650      	mov	r0, sl
  400c50:	4b07      	ldr	r3, [pc, #28]	; (400c70 <adc_async_channel_conversion_done+0x54>)
  400c52:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  400c54:	8aa3      	ldrh	r3, [r4, #20]
  400c56:	3301      	adds	r3, #1
  400c58:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  400c5a:	8aa3      	ldrh	r3, [r4, #20]
  400c5c:	3301      	adds	r3, #1
  400c5e:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  400c60:	59bb      	ldr	r3, [r7, r6]
  400c62:	b113      	cbz	r3, 400c6a <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  400c64:	4641      	mov	r1, r8
  400c66:	4628      	mov	r0, r5
  400c68:	4798      	blx	r3
  400c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c6e:	bf00      	nop
  400c70:	0040145d 	.word	0x0040145d
  400c74:	0040176d 	.word	0x0040176d

00400c78 <adc_async_init>:
{
  400c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c7c:	4616      	mov	r6, r2
  400c7e:	461c      	mov	r4, r3
  400c80:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  400c84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  400c86:	4607      	mov	r7, r0
  400c88:	4689      	mov	r9, r1
  400c8a:	2800      	cmp	r0, #0
  400c8c:	bf18      	it	ne
  400c8e:	2900      	cmpne	r1, #0
  400c90:	d00b      	beq.n	400caa <adc_async_init+0x32>
  400c92:	1c13      	adds	r3, r2, #0
  400c94:	bf18      	it	ne
  400c96:	2301      	movne	r3, #1
  400c98:	f1b8 0f00 	cmp.w	r8, #0
  400c9c:	d017      	beq.n	400cce <adc_async_init+0x56>
  400c9e:	b1b3      	cbz	r3, 400cce <adc_async_init+0x56>
  400ca0:	b10d      	cbz	r5, 400ca6 <adc_async_init+0x2e>
  400ca2:	2001      	movs	r0, #1
  400ca4:	e002      	b.n	400cac <adc_async_init+0x34>
  400ca6:	2000      	movs	r0, #0
  400ca8:	e000      	b.n	400cac <adc_async_init+0x34>
  400caa:	2000      	movs	r0, #0
  400cac:	f8df b068 	ldr.w	fp, [pc, #104]	; 400d18 <adc_async_init+0xa0>
  400cb0:	223f      	movs	r2, #63	; 0x3f
  400cb2:	4659      	mov	r1, fp
  400cb4:	f8df a064 	ldr.w	sl, [pc, #100]	; 400d1c <adc_async_init+0xa4>
  400cb8:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  400cba:	1c60      	adds	r0, r4, #1
  400cbc:	2240      	movs	r2, #64	; 0x40
  400cbe:	4659      	mov	r1, fp
  400cc0:	4580      	cmp	r8, r0
  400cc2:	bfcc      	ite	gt
  400cc4:	2000      	movgt	r0, #0
  400cc6:	2001      	movle	r0, #1
  400cc8:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  400cca:	2300      	movs	r3, #0
  400ccc:	e005      	b.n	400cda <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  400cce:	2000      	movs	r0, #0
  400cd0:	e7ec      	b.n	400cac <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  400cd2:	22ff      	movs	r2, #255	; 0xff
  400cd4:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  400cd6:	3301      	adds	r3, #1
  400cd8:	b2db      	uxtb	r3, r3
  400cda:	42a3      	cmp	r3, r4
  400cdc:	d9f9      	bls.n	400cd2 <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  400cde:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  400ce0:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  400ce4:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  400ce8:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  400cea:	4649      	mov	r1, r9
  400cec:	4638      	mov	r0, r7
  400cee:	4b06      	ldr	r3, [pc, #24]	; (400d08 <adc_async_init+0x90>)
  400cf0:	4798      	blx	r3
	if (init_status) {
  400cf2:	4603      	mov	r3, r0
  400cf4:	b928      	cbnz	r0, 400d02 <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  400cf6:	4a05      	ldr	r2, [pc, #20]	; (400d0c <adc_async_init+0x94>)
  400cf8:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  400cfa:	4a05      	ldr	r2, [pc, #20]	; (400d10 <adc_async_init+0x98>)
  400cfc:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  400cfe:	4a05      	ldr	r2, [pc, #20]	; (400d14 <adc_async_init+0x9c>)
  400d00:	607a      	str	r2, [r7, #4]
}
  400d02:	4618      	mov	r0, r3
  400d04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400d08:	004016ad 	.word	0x004016ad
  400d0c:	00400c1d 	.word	0x00400c1d
  400d10:	00400c09 	.word	0x00400c09
  400d14:	00400c13 	.word	0x00400c13
  400d18:	004058f0 	.word	0x004058f0
  400d1c:	004013b9 	.word	0x004013b9

00400d20 <adc_async_register_channel_buffer>:
{
  400d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400d24:	460e      	mov	r6, r1
  400d26:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  400d28:	4605      	mov	r5, r0
  400d2a:	4690      	mov	r8, r2
  400d2c:	2800      	cmp	r0, #0
  400d2e:	bf18      	it	ne
  400d30:	2a00      	cmpne	r2, #0
  400d32:	d002      	beq.n	400d3a <adc_async_register_channel_buffer+0x1a>
  400d34:	b9c3      	cbnz	r3, 400d68 <adc_async_register_channel_buffer+0x48>
  400d36:	2000      	movs	r0, #0
  400d38:	e000      	b.n	400d3c <adc_async_register_channel_buffer+0x1c>
  400d3a:	2000      	movs	r0, #0
  400d3c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 400dd4 <adc_async_register_channel_buffer+0xb4>
  400d40:	2266      	movs	r2, #102	; 0x66
  400d42:	4649      	mov	r1, r9
  400d44:	4c21      	ldr	r4, [pc, #132]	; (400dcc <adc_async_register_channel_buffer+0xac>)
  400d46:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  400d48:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  400d4c:	2267      	movs	r2, #103	; 0x67
  400d4e:	4649      	mov	r1, r9
  400d50:	42b0      	cmp	r0, r6
  400d52:	bf34      	ite	cc
  400d54:	2000      	movcc	r0, #0
  400d56:	2001      	movcs	r0, #1
  400d58:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  400d5a:	6a29      	ldr	r1, [r5, #32]
  400d5c:	5d8b      	ldrb	r3, [r1, r6]
  400d5e:	2bff      	cmp	r3, #255	; 0xff
  400d60:	d12b      	bne.n	400dba <adc_async_register_channel_buffer+0x9a>
  400d62:	2400      	movs	r4, #0
  400d64:	4623      	mov	r3, r4
  400d66:	e003      	b.n	400d70 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  400d68:	2001      	movs	r0, #1
  400d6a:	e7e7      	b.n	400d3c <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  400d6c:	3301      	adds	r3, #1
  400d6e:	b2db      	uxtb	r3, r3
  400d70:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  400d74:	4293      	cmp	r3, r2
  400d76:	d805      	bhi.n	400d84 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  400d78:	5cca      	ldrb	r2, [r1, r3]
  400d7a:	2aff      	cmp	r2, #255	; 0xff
  400d7c:	d0f6      	beq.n	400d6c <adc_async_register_channel_buffer+0x4c>
			index++;
  400d7e:	3401      	adds	r4, #1
  400d80:	b2e4      	uxtb	r4, r4
  400d82:	e7f3      	b.n	400d6c <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  400d84:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  400d88:	429c      	cmp	r4, r3
  400d8a:	d819      	bhi.n	400dc0 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  400d8c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  400d8e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  400d92:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  400d96:	4448      	add	r0, r9
  400d98:	463a      	mov	r2, r7
  400d9a:	4641      	mov	r1, r8
  400d9c:	3004      	adds	r0, #4
  400d9e:	4b0c      	ldr	r3, [pc, #48]	; (400dd0 <adc_async_register_channel_buffer+0xb0>)
  400da0:	4798      	blx	r3
  400da2:	4602      	mov	r2, r0
  400da4:	b978      	cbnz	r0, 400dc6 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  400da6:	6a2b      	ldr	r3, [r5, #32]
  400da8:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  400daa:	6aab      	ldr	r3, [r5, #40]	; 0x28
  400dac:	4499      	add	r9, r3
  400dae:	2300      	movs	r3, #0
  400db0:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  400db4:	4610      	mov	r0, r2
  400db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  400dba:	f06f 020c 	mvn.w	r2, #12
  400dbe:	e7f9      	b.n	400db4 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  400dc0:	f06f 021b 	mvn.w	r2, #27
  400dc4:	e7f6      	b.n	400db4 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  400dc6:	f06f 020c 	mvn.w	r2, #12
  400dca:	e7f3      	b.n	400db4 <adc_async_register_channel_buffer+0x94>
  400dcc:	004013b9 	.word	0x004013b9
  400dd0:	00401419 	.word	0x00401419
  400dd4:	004058f0 	.word	0x004058f0

00400dd8 <adc_async_enable_channel>:
{
  400dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400dda:	460d      	mov	r5, r1
	ASSERT(descr);
  400ddc:	4f0b      	ldr	r7, [pc, #44]	; (400e0c <adc_async_enable_channel+0x34>)
  400dde:	4604      	mov	r4, r0
  400de0:	2283      	movs	r2, #131	; 0x83
  400de2:	4639      	mov	r1, r7
  400de4:	3000      	adds	r0, #0
  400de6:	bf18      	it	ne
  400de8:	2001      	movne	r0, #1
  400dea:	4e09      	ldr	r6, [pc, #36]	; (400e10 <adc_async_enable_channel+0x38>)
  400dec:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  400dee:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  400df2:	2284      	movs	r2, #132	; 0x84
  400df4:	4639      	mov	r1, r7
  400df6:	42a8      	cmp	r0, r5
  400df8:	bf34      	ite	cc
  400dfa:	2000      	movcc	r0, #0
  400dfc:	2001      	movcs	r0, #1
  400dfe:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  400e00:	4629      	mov	r1, r5
  400e02:	4620      	mov	r0, r4
  400e04:	4b03      	ldr	r3, [pc, #12]	; (400e14 <adc_async_enable_channel+0x3c>)
  400e06:	4798      	blx	r3
}
  400e08:	2000      	movs	r0, #0
  400e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e0c:	004058f0 	.word	0x004058f0
  400e10:	004013b9 	.word	0x004013b9
  400e14:	00401761 	.word	0x00401761

00400e18 <adc_async_start_conversion>:
{
  400e18:	b510      	push	{r4, lr}
	ASSERT(descr);
  400e1a:	4604      	mov	r4, r0
  400e1c:	22d6      	movs	r2, #214	; 0xd6
  400e1e:	4905      	ldr	r1, [pc, #20]	; (400e34 <adc_async_start_conversion+0x1c>)
  400e20:	3000      	adds	r0, #0
  400e22:	bf18      	it	ne
  400e24:	2001      	movne	r0, #1
  400e26:	4b04      	ldr	r3, [pc, #16]	; (400e38 <adc_async_start_conversion+0x20>)
  400e28:	4798      	blx	r3
	_adc_async_convert(&descr->device);
  400e2a:	4620      	mov	r0, r4
  400e2c:	4b03      	ldr	r3, [pc, #12]	; (400e3c <adc_async_start_conversion+0x24>)
  400e2e:	4798      	blx	r3
}
  400e30:	2000      	movs	r0, #0
  400e32:	bd10      	pop	{r4, pc}
  400e34:	004058f0 	.word	0x004058f0
  400e38:	004013b9 	.word	0x004013b9
  400e3c:	00401771 	.word	0x00401771

00400e40 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400e40:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400e44:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400e46:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400e48:	f3bf 8f5f 	dmb	sy
  400e4c:	4770      	bx	lr

00400e4e <atomic_leave_critical>:
  400e4e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400e52:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400e54:	f383 8810 	msr	PRIMASK, r3
  400e58:	4770      	bx	lr
	...

00400e5c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400e5c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400e5e:	4b02      	ldr	r3, [pc, #8]	; (400e68 <delay_init+0xc>)
  400e60:	6018      	str	r0, [r3, #0]
  400e62:	4b02      	ldr	r3, [pc, #8]	; (400e6c <delay_init+0x10>)
  400e64:	4798      	blx	r3
  400e66:	bd08      	pop	{r3, pc}
  400e68:	20400314 	.word	0x20400314
  400e6c:	00401f09 	.word	0x00401f09

00400e70 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400e70:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  400e72:	4b04      	ldr	r3, [pc, #16]	; (400e84 <delay_ms+0x14>)
  400e74:	681c      	ldr	r4, [r3, #0]
  400e76:	4b04      	ldr	r3, [pc, #16]	; (400e88 <delay_ms+0x18>)
  400e78:	4798      	blx	r3
  400e7a:	4601      	mov	r1, r0
  400e7c:	4620      	mov	r0, r4
  400e7e:	4b03      	ldr	r3, [pc, #12]	; (400e8c <delay_ms+0x1c>)
  400e80:	4798      	blx	r3
  400e82:	bd10      	pop	{r4, pc}
  400e84:	20400314 	.word	0x20400314
  400e88:	00401779 	.word	0x00401779
  400e8c:	00401f15 	.word	0x00401f15

00400e90 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400e90:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400e92:	2504      	movs	r5, #4
  400e94:	2400      	movs	r4, #0

	while (upper >= lower) {
  400e96:	e007      	b.n	400ea8 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  400e98:	4a0d      	ldr	r2, [pc, #52]	; (400ed0 <process_ext_irq+0x40>)
  400e9a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400e9e:	b1b3      	cbz	r3, 400ece <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400ea0:	4798      	blx	r3
  400ea2:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  400ea4:	3a01      	subs	r2, #1
  400ea6:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  400ea8:	42ac      	cmp	r4, r5
  400eaa:	d810      	bhi.n	400ece <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400eac:	192b      	adds	r3, r5, r4
  400eae:	105b      	asrs	r3, r3, #1
  400eb0:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400eb2:	2a03      	cmp	r2, #3
  400eb4:	d80b      	bhi.n	400ece <process_ext_irq+0x3e>
  400eb6:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  400eb8:	4905      	ldr	r1, [pc, #20]	; (400ed0 <process_ext_irq+0x40>)
  400eba:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400ebe:	6849      	ldr	r1, [r1, #4]
  400ec0:	4281      	cmp	r1, r0
  400ec2:	d0e9      	beq.n	400e98 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400ec4:	4281      	cmp	r1, r0
  400ec6:	d2ed      	bcs.n	400ea4 <process_ext_irq+0x14>
			lower = middle + 1;
  400ec8:	3201      	adds	r2, #1
  400eca:	b2d4      	uxtb	r4, r2
  400ecc:	e7ec      	b.n	400ea8 <process_ext_irq+0x18>
  400ece:	bd38      	pop	{r3, r4, r5, pc}
  400ed0:	20400318 	.word	0x20400318

00400ed4 <ext_irq_init>:
{
  400ed4:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400ed6:	2300      	movs	r3, #0
  400ed8:	e00a      	b.n	400ef0 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400eda:	4a08      	ldr	r2, [pc, #32]	; (400efc <ext_irq_init+0x28>)
  400edc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400ee0:	f04f 30ff 	mov.w	r0, #4294967295
  400ee4:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400ee6:	2100      	movs	r1, #0
  400ee8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400eec:	3301      	adds	r3, #1
  400eee:	b29b      	uxth	r3, r3
  400ef0:	2b03      	cmp	r3, #3
  400ef2:	d9f2      	bls.n	400eda <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400ef4:	4802      	ldr	r0, [pc, #8]	; (400f00 <ext_irq_init+0x2c>)
  400ef6:	4b03      	ldr	r3, [pc, #12]	; (400f04 <ext_irq_init+0x30>)
  400ef8:	4798      	blx	r3
}
  400efa:	bd08      	pop	{r3, pc}
  400efc:	20400318 	.word	0x20400318
  400f00:	00400e91 	.word	0x00400e91
  400f04:	00401abd 	.word	0x00401abd

00400f08 <ext_irq_register>:
{
  400f08:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f0a:	b083      	sub	sp, #12
  400f0c:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  400f0e:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400f10:	2b03      	cmp	r3, #3
  400f12:	d80e      	bhi.n	400f32 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  400f14:	4618      	mov	r0, r3
  400f16:	4a2e      	ldr	r2, [pc, #184]	; (400fd0 <ext_irq_register+0xc8>)
  400f18:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400f1c:	6852      	ldr	r2, [r2, #4]
  400f1e:	42aa      	cmp	r2, r5
  400f20:	d002      	beq.n	400f28 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  400f22:	3301      	adds	r3, #1
  400f24:	b2db      	uxtb	r3, r3
  400f26:	e7f3      	b.n	400f10 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  400f28:	4b29      	ldr	r3, [pc, #164]	; (400fd0 <ext_irq_register+0xc8>)
  400f2a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  400f2e:	2701      	movs	r7, #1
			break;
  400f30:	e000      	b.n	400f34 <ext_irq_register+0x2c>
	bool    found = false;
  400f32:	2700      	movs	r7, #0
	if (NULL == cb) {
  400f34:	b159      	cbz	r1, 400f4e <ext_irq_register+0x46>
	if (!found) {
  400f36:	2f00      	cmp	r7, #0
  400f38:	d13d      	bne.n	400fb6 <ext_irq_register+0xae>
  400f3a:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400f3c:	2e03      	cmp	r6, #3
  400f3e:	d813      	bhi.n	400f68 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  400f40:	4b23      	ldr	r3, [pc, #140]	; (400fd0 <ext_irq_register+0xc8>)
  400f42:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  400f46:	b143      	cbz	r3, 400f5a <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400f48:	3601      	adds	r6, #1
  400f4a:	b2f6      	uxtb	r6, r6
  400f4c:	e7f6      	b.n	400f3c <ext_irq_register+0x34>
		if (!found) {
  400f4e:	2f00      	cmp	r7, #0
  400f50:	d038      	beq.n	400fc4 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  400f52:	4628      	mov	r0, r5
  400f54:	4b1f      	ldr	r3, [pc, #124]	; (400fd4 <ext_irq_register+0xcc>)
  400f56:	4798      	blx	r3
  400f58:	e032      	b.n	400fc0 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  400f5a:	4b1d      	ldr	r3, [pc, #116]	; (400fd0 <ext_irq_register+0xc8>)
  400f5c:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  400f60:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  400f64:	605d      	str	r5, [r3, #4]
				found           = true;
  400f66:	2701      	movs	r7, #1
  400f68:	2300      	movs	r3, #0
  400f6a:	e001      	b.n	400f70 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  400f6c:	3301      	adds	r3, #1
  400f6e:	b2db      	uxtb	r3, r3
  400f70:	2b03      	cmp	r3, #3
  400f72:	bf98      	it	ls
  400f74:	2e03      	cmpls	r6, #3
  400f76:	d81e      	bhi.n	400fb6 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  400f78:	46b6      	mov	lr, r6
  400f7a:	4a15      	ldr	r2, [pc, #84]	; (400fd0 <ext_irq_register+0xc8>)
  400f7c:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  400f80:	6848      	ldr	r0, [r1, #4]
  400f82:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  400f86:	6852      	ldr	r2, [r2, #4]
  400f88:	4290      	cmp	r0, r2
  400f8a:	d2ef      	bcs.n	400f6c <ext_irq_register+0x64>
  400f8c:	f1b2 3fff 	cmp.w	r2, #4294967295
  400f90:	d0ec      	beq.n	400f6c <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  400f92:	4c0f      	ldr	r4, [pc, #60]	; (400fd0 <ext_irq_register+0xc8>)
  400f94:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  400f98:	e892 0003 	ldmia.w	r2, {r0, r1}
  400f9c:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  400fa0:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  400fa4:	e894 0003 	ldmia.w	r4, {r0, r1}
  400fa8:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  400fac:	e89d 0003 	ldmia.w	sp, {r0, r1}
  400fb0:	e884 0003 	stmia.w	r4, {r0, r1}
  400fb4:	e7da      	b.n	400f6c <ext_irq_register+0x64>
	if (!found) {
  400fb6:	b147      	cbz	r7, 400fca <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  400fb8:	2101      	movs	r1, #1
  400fba:	4628      	mov	r0, r5
  400fbc:	4b05      	ldr	r3, [pc, #20]	; (400fd4 <ext_irq_register+0xcc>)
  400fbe:	4798      	blx	r3
}
  400fc0:	b003      	add	sp, #12
  400fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  400fc4:	f06f 000c 	mvn.w	r0, #12
  400fc8:	e7fa      	b.n	400fc0 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  400fca:	f06f 000c 	mvn.w	r0, #12
  400fce:	e7f7      	b.n	400fc0 <ext_irq_register+0xb8>
  400fd0:	20400318 	.word	0x20400318
  400fd4:	00401ae5 	.word	0x00401ae5

00400fd8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400fd8:	b570      	push	{r4, r5, r6, lr}
  400fda:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400fdc:	4604      	mov	r4, r0
  400fde:	460d      	mov	r5, r1
  400fe0:	2800      	cmp	r0, #0
  400fe2:	bf18      	it	ne
  400fe4:	2900      	cmpne	r1, #0
  400fe6:	bf14      	ite	ne
  400fe8:	2001      	movne	r0, #1
  400fea:	2000      	moveq	r0, #0
  400fec:	2234      	movs	r2, #52	; 0x34
  400fee:	4904      	ldr	r1, [pc, #16]	; (401000 <io_write+0x28>)
  400ff0:	4b04      	ldr	r3, [pc, #16]	; (401004 <io_write+0x2c>)
  400ff2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400ff4:	6823      	ldr	r3, [r4, #0]
  400ff6:	4632      	mov	r2, r6
  400ff8:	4629      	mov	r1, r5
  400ffa:	4620      	mov	r0, r4
  400ffc:	4798      	blx	r3
}
  400ffe:	bd70      	pop	{r4, r5, r6, pc}
  401000:	0040590c 	.word	0x0040590c
  401004:	004013b9 	.word	0x004013b9

00401008 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401008:	b570      	push	{r4, r5, r6, lr}
  40100a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  40100c:	4604      	mov	r4, r0
  40100e:	460d      	mov	r5, r1
  401010:	2800      	cmp	r0, #0
  401012:	bf18      	it	ne
  401014:	2900      	cmpne	r1, #0
  401016:	bf14      	ite	ne
  401018:	2001      	movne	r0, #1
  40101a:	2000      	moveq	r0, #0
  40101c:	223d      	movs	r2, #61	; 0x3d
  40101e:	4904      	ldr	r1, [pc, #16]	; (401030 <io_read+0x28>)
  401020:	4b04      	ldr	r3, [pc, #16]	; (401034 <io_read+0x2c>)
  401022:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  401024:	6863      	ldr	r3, [r4, #4]
  401026:	4632      	mov	r2, r6
  401028:	4629      	mov	r1, r5
  40102a:	4620      	mov	r0, r4
  40102c:	4798      	blx	r3
}
  40102e:	bd70      	pop	{r4, r5, r6, pc}
  401030:	0040590c 	.word	0x0040590c
  401034:	004013b9 	.word	0x004013b9

00401038 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  401038:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  40103a:	6943      	ldr	r3, [r0, #20]
  40103c:	b103      	cbz	r3, 401040 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  40103e:	4798      	blx	r3
  401040:	bd08      	pop	{r3, pc}

00401042 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  401042:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  401044:	6983      	ldr	r3, [r0, #24]
  401046:	b103      	cbz	r3, 40104a <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  401048:	4798      	blx	r3
  40104a:	bd08      	pop	{r3, pc}

0040104c <pwm_init>:
{
  40104c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40104e:	4604      	mov	r4, r0
  401050:	460d      	mov	r5, r1
  401052:	2800      	cmp	r0, #0
  401054:	bf18      	it	ne
  401056:	2900      	cmpne	r1, #0
  401058:	bf14      	ite	ne
  40105a:	2001      	movne	r0, #1
  40105c:	2000      	moveq	r0, #0
  40105e:	2233      	movs	r2, #51	; 0x33
  401060:	4906      	ldr	r1, [pc, #24]	; (40107c <pwm_init+0x30>)
  401062:	4b07      	ldr	r3, [pc, #28]	; (401080 <pwm_init+0x34>)
  401064:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  401066:	4629      	mov	r1, r5
  401068:	4620      	mov	r0, r4
  40106a:	4b06      	ldr	r3, [pc, #24]	; (401084 <pwm_init+0x38>)
  40106c:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  40106e:	4b06      	ldr	r3, [pc, #24]	; (401088 <pwm_init+0x3c>)
  401070:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  401072:	4b06      	ldr	r3, [pc, #24]	; (40108c <pwm_init+0x40>)
  401074:	6063      	str	r3, [r4, #4]
}
  401076:	2000      	movs	r0, #0
  401078:	bd38      	pop	{r3, r4, r5, pc}
  40107a:	bf00      	nop
  40107c:	00405920 	.word	0x00405920
  401080:	004013b9 	.word	0x004013b9
  401084:	00401c85 	.word	0x00401c85
  401088:	00401039 	.word	0x00401039
  40108c:	00401043 	.word	0x00401043

00401090 <pwm_enable>:
{
  401090:	b510      	push	{r4, lr}
	ASSERT(descr);
  401092:	4604      	mov	r4, r0
  401094:	224a      	movs	r2, #74	; 0x4a
  401096:	4909      	ldr	r1, [pc, #36]	; (4010bc <pwm_enable+0x2c>)
  401098:	3000      	adds	r0, #0
  40109a:	bf18      	it	ne
  40109c:	2001      	movne	r0, #1
  40109e:	4b08      	ldr	r3, [pc, #32]	; (4010c0 <pwm_enable+0x30>)
  4010a0:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  4010a2:	4620      	mov	r0, r4
  4010a4:	4b07      	ldr	r3, [pc, #28]	; (4010c4 <pwm_enable+0x34>)
  4010a6:	4798      	blx	r3
  4010a8:	b920      	cbnz	r0, 4010b4 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  4010aa:	4620      	mov	r0, r4
  4010ac:	4b06      	ldr	r3, [pc, #24]	; (4010c8 <pwm_enable+0x38>)
  4010ae:	4798      	blx	r3
	return ERR_NONE;
  4010b0:	2000      	movs	r0, #0
  4010b2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4010b4:	f06f 0010 	mvn.w	r0, #16
}
  4010b8:	bd10      	pop	{r4, pc}
  4010ba:	bf00      	nop
  4010bc:	00405920 	.word	0x00405920
  4010c0:	004013b9 	.word	0x004013b9
  4010c4:	00401e61 	.word	0x00401e61
  4010c8:	00401dbd 	.word	0x00401dbd

004010cc <pwm_register_callback>:
{
  4010cc:	b570      	push	{r4, r5, r6, lr}
	switch (type) {
  4010ce:	460d      	mov	r5, r1
  4010d0:	b121      	cbz	r1, 4010dc <pwm_register_callback+0x10>
  4010d2:	2901      	cmp	r1, #1
  4010d4:	d015      	beq.n	401102 <pwm_register_callback+0x36>
		return ERR_INVALID_ARG;
  4010d6:	f06f 000c 	mvn.w	r0, #12
}
  4010da:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.period = cb;
  4010dc:	6142      	str	r2, [r0, #20]
  4010de:	4616      	mov	r6, r2
  4010e0:	4604      	mov	r4, r0
	ASSERT(descr);
  4010e2:	2272      	movs	r2, #114	; 0x72
  4010e4:	4908      	ldr	r1, [pc, #32]	; (401108 <pwm_register_callback+0x3c>)
  4010e6:	3000      	adds	r0, #0
  4010e8:	bf18      	it	ne
  4010ea:	2001      	movne	r0, #1
  4010ec:	4b07      	ldr	r3, [pc, #28]	; (40110c <pwm_register_callback+0x40>)
  4010ee:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
  4010f0:	1c32      	adds	r2, r6, #0
  4010f2:	bf18      	it	ne
  4010f4:	2201      	movne	r2, #1
  4010f6:	4629      	mov	r1, r5
  4010f8:	4620      	mov	r0, r4
  4010fa:	4b05      	ldr	r3, [pc, #20]	; (401110 <pwm_register_callback+0x44>)
  4010fc:	4798      	blx	r3
	return ERR_NONE;
  4010fe:	2000      	movs	r0, #0
  401100:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
  401102:	6182      	str	r2, [r0, #24]
		break;
  401104:	e7eb      	b.n	4010de <pwm_register_callback+0x12>
  401106:	bf00      	nop
  401108:	00405920 	.word	0x00405920
  40110c:	004013b9 	.word	0x004013b9
  401110:	00401e91 	.word	0x00401e91

00401114 <pwm_set_parameters>:
{
  401114:	b570      	push	{r4, r5, r6, lr}
  401116:	460d      	mov	r5, r1
  401118:	4616      	mov	r6, r2
	ASSERT(descr);
  40111a:	4604      	mov	r4, r0
  40111c:	227c      	movs	r2, #124	; 0x7c
  40111e:	4906      	ldr	r1, [pc, #24]	; (401138 <pwm_set_parameters+0x24>)
  401120:	3000      	adds	r0, #0
  401122:	bf18      	it	ne
  401124:	2001      	movne	r0, #1
  401126:	4b05      	ldr	r3, [pc, #20]	; (40113c <pwm_set_parameters+0x28>)
  401128:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  40112a:	4632      	mov	r2, r6
  40112c:	4629      	mov	r1, r5
  40112e:	4620      	mov	r0, r4
  401130:	4b03      	ldr	r3, [pc, #12]	; (401140 <pwm_set_parameters+0x2c>)
  401132:	4798      	blx	r3
}
  401134:	2000      	movs	r0, #0
  401136:	bd70      	pop	{r4, r5, r6, pc}
  401138:	00405920 	.word	0x00405920
  40113c:	004013b9 	.word	0x004013b9
  401140:	00401e01 	.word	0x00401e01

00401144 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  401144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  401146:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  401148:	b117      	cbz	r7, 401150 <timer_add_timer_task+0xc>
  40114a:	463c      	mov	r4, r7
  40114c:	2600      	movs	r6, #0
  40114e:	e00b      	b.n	401168 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  401150:	4b0e      	ldr	r3, [pc, #56]	; (40118c <timer_add_timer_task+0x48>)
  401152:	4798      	blx	r3
		return;
  401154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  401156:	68a5      	ldr	r5, [r4, #8]
  401158:	442b      	add	r3, r5
  40115a:	1a9b      	subs	r3, r3, r2
  40115c:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  40115e:	688d      	ldr	r5, [r1, #8]
  401160:	42ab      	cmp	r3, r5
  401162:	d209      	bcs.n	401178 <timer_add_timer_task+0x34>
			break;
		prev = it;
  401164:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  401166:	6824      	ldr	r4, [r4, #0]
  401168:	b134      	cbz	r4, 401178 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  40116a:	6863      	ldr	r3, [r4, #4]
  40116c:	4293      	cmp	r3, r2
  40116e:	d8f2      	bhi.n	401156 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  401170:	68a5      	ldr	r5, [r4, #8]
  401172:	1a9b      	subs	r3, r3, r2
  401174:	442b      	add	r3, r5
  401176:	e7f2      	b.n	40115e <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  401178:	42bc      	cmp	r4, r7
  40117a:	d003      	beq.n	401184 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  40117c:	4630      	mov	r0, r6
  40117e:	4b04      	ldr	r3, [pc, #16]	; (401190 <timer_add_timer_task+0x4c>)
  401180:	4798      	blx	r3
  401182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  401184:	4b01      	ldr	r3, [pc, #4]	; (40118c <timer_add_timer_task+0x48>)
  401186:	4798      	blx	r3
  401188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40118a:	bf00      	nop
  40118c:	004013d5 	.word	0x004013d5
  401190:	00401401 	.word	0x00401401

00401194 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  401194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401196:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  401198:	6906      	ldr	r6, [r0, #16]
  40119a:	3601      	adds	r6, #1
  40119c:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  40119e:	7e03      	ldrb	r3, [r0, #24]
  4011a0:	f013 0f01 	tst.w	r3, #1
  4011a4:	d105      	bne.n	4011b2 <timer_process_counted+0x1e>
  4011a6:	7e03      	ldrb	r3, [r0, #24]
  4011a8:	f013 0f02 	tst.w	r3, #2
  4011ac:	d101      	bne.n	4011b2 <timer_process_counted+0x1e>
  4011ae:	4605      	mov	r5, r0
  4011b0:	e009      	b.n	4011c6 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  4011b2:	7e03      	ldrb	r3, [r0, #24]
  4011b4:	f043 0302 	orr.w	r3, r3, #2
  4011b8:	7603      	strb	r3, [r0, #24]
		return;
  4011ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011bc:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  4011be:	68e3      	ldr	r3, [r4, #12]
  4011c0:	4620      	mov	r0, r4
  4011c2:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  4011c4:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  4011c6:	b19c      	cbz	r4, 4011f0 <timer_process_counted+0x5c>
  4011c8:	6863      	ldr	r3, [r4, #4]
  4011ca:	1af3      	subs	r3, r6, r3
  4011cc:	68a2      	ldr	r2, [r4, #8]
  4011ce:	4293      	cmp	r3, r2
  4011d0:	d30e      	bcc.n	4011f0 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  4011d2:	f105 0714 	add.w	r7, r5, #20
  4011d6:	4638      	mov	r0, r7
  4011d8:	4b06      	ldr	r3, [pc, #24]	; (4011f4 <timer_process_counted+0x60>)
  4011da:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  4011dc:	7c23      	ldrb	r3, [r4, #16]
  4011de:	2b01      	cmp	r3, #1
  4011e0:	d1ec      	bne.n	4011bc <timer_process_counted+0x28>
			tmp->time_label = time;
  4011e2:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  4011e4:	4632      	mov	r2, r6
  4011e6:	4621      	mov	r1, r4
  4011e8:	4638      	mov	r0, r7
  4011ea:	4b03      	ldr	r3, [pc, #12]	; (4011f8 <timer_process_counted+0x64>)
  4011ec:	4798      	blx	r3
  4011ee:	e7e5      	b.n	4011bc <timer_process_counted+0x28>
  4011f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011f2:	bf00      	nop
  4011f4:	00401409 	.word	0x00401409
  4011f8:	00401145 	.word	0x00401145

004011fc <timer_init>:
{
  4011fc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4011fe:	4604      	mov	r4, r0
  401200:	460d      	mov	r5, r1
  401202:	2800      	cmp	r0, #0
  401204:	bf18      	it	ne
  401206:	2900      	cmpne	r1, #0
  401208:	bf14      	ite	ne
  40120a:	2001      	movne	r0, #1
  40120c:	2000      	moveq	r0, #0
  40120e:	223b      	movs	r2, #59	; 0x3b
  401210:	4905      	ldr	r1, [pc, #20]	; (401228 <timer_init+0x2c>)
  401212:	4b06      	ldr	r3, [pc, #24]	; (40122c <timer_init+0x30>)
  401214:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  401216:	4629      	mov	r1, r5
  401218:	4620      	mov	r0, r4
  40121a:	4b05      	ldr	r3, [pc, #20]	; (401230 <timer_init+0x34>)
  40121c:	4798      	blx	r3
	descr->time                           = 0;
  40121e:	2000      	movs	r0, #0
  401220:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  401222:	4b04      	ldr	r3, [pc, #16]	; (401234 <timer_init+0x38>)
  401224:	6023      	str	r3, [r4, #0]
}
  401226:	bd38      	pop	{r3, r4, r5, pc}
  401228:	00405938 	.word	0x00405938
  40122c:	004013b9 	.word	0x004013b9
  401230:	00401fcd 	.word	0x00401fcd
  401234:	00401195 	.word	0x00401195

00401238 <timer_start>:
{
  401238:	b510      	push	{r4, lr}
	ASSERT(descr);
  40123a:	4604      	mov	r4, r0
  40123c:	2253      	movs	r2, #83	; 0x53
  40123e:	4909      	ldr	r1, [pc, #36]	; (401264 <timer_start+0x2c>)
  401240:	3000      	adds	r0, #0
  401242:	bf18      	it	ne
  401244:	2001      	movne	r0, #1
  401246:	4b08      	ldr	r3, [pc, #32]	; (401268 <timer_start+0x30>)
  401248:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  40124a:	4620      	mov	r0, r4
  40124c:	4b07      	ldr	r3, [pc, #28]	; (40126c <timer_start+0x34>)
  40124e:	4798      	blx	r3
  401250:	b920      	cbnz	r0, 40125c <timer_start+0x24>
	_timer_start(&descr->device);
  401252:	4620      	mov	r0, r4
  401254:	4b06      	ldr	r3, [pc, #24]	; (401270 <timer_start+0x38>)
  401256:	4798      	blx	r3
	return ERR_NONE;
  401258:	2000      	movs	r0, #0
  40125a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  40125c:	f06f 0010 	mvn.w	r0, #16
}
  401260:	bd10      	pop	{r4, pc}
  401262:	bf00      	nop
  401264:	00405938 	.word	0x00405938
  401268:	004013b9 	.word	0x004013b9
  40126c:	004020b5 	.word	0x004020b5
  401270:	004020a9 	.word	0x004020a9

00401274 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401276:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401278:	4605      	mov	r5, r0
  40127a:	460f      	mov	r7, r1
  40127c:	2800      	cmp	r0, #0
  40127e:	bf18      	it	ne
  401280:	2900      	cmpne	r1, #0
  401282:	d002      	beq.n	40128a <usart_sync_write+0x16>
  401284:	bb0a      	cbnz	r2, 4012ca <usart_sync_write+0x56>
  401286:	2000      	movs	r0, #0
  401288:	e000      	b.n	40128c <usart_sync_write+0x18>
  40128a:	2000      	movs	r0, #0
  40128c:	22f1      	movs	r2, #241	; 0xf1
  40128e:	4910      	ldr	r1, [pc, #64]	; (4012d0 <usart_sync_write+0x5c>)
  401290:	4b10      	ldr	r3, [pc, #64]	; (4012d4 <usart_sync_write+0x60>)
  401292:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  401294:	f105 0408 	add.w	r4, r5, #8
  401298:	4620      	mov	r0, r4
  40129a:	4b0f      	ldr	r3, [pc, #60]	; (4012d8 <usart_sync_write+0x64>)
  40129c:	4798      	blx	r3
  40129e:	2800      	cmp	r0, #0
  4012a0:	d0f8      	beq.n	401294 <usart_sync_write+0x20>
  4012a2:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  4012a4:	5d79      	ldrb	r1, [r7, r5]
  4012a6:	4620      	mov	r0, r4
  4012a8:	4b0c      	ldr	r3, [pc, #48]	; (4012dc <usart_sync_write+0x68>)
  4012aa:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  4012ac:	4620      	mov	r0, r4
  4012ae:	4b0a      	ldr	r3, [pc, #40]	; (4012d8 <usart_sync_write+0x64>)
  4012b0:	4798      	blx	r3
  4012b2:	2800      	cmp	r0, #0
  4012b4:	d0fa      	beq.n	4012ac <usart_sync_write+0x38>
			;
	} while (++offset < length);
  4012b6:	3501      	adds	r5, #1
  4012b8:	42b5      	cmp	r5, r6
  4012ba:	d3f3      	bcc.n	4012a4 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  4012bc:	4620      	mov	r0, r4
  4012be:	4b08      	ldr	r3, [pc, #32]	; (4012e0 <usart_sync_write+0x6c>)
  4012c0:	4798      	blx	r3
  4012c2:	2800      	cmp	r0, #0
  4012c4:	d0fa      	beq.n	4012bc <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  4012c6:	4628      	mov	r0, r5
  4012c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  4012ca:	2001      	movs	r0, #1
  4012cc:	e7de      	b.n	40128c <usart_sync_write+0x18>
  4012ce:	bf00      	nop
  4012d0:	00405950 	.word	0x00405950
  4012d4:	004013b9 	.word	0x004013b9
  4012d8:	00402291 	.word	0x00402291
  4012dc:	00402249 	.word	0x00402249
  4012e0:	004022b9 	.word	0x004022b9

004012e4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4012e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012e8:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4012ea:	4605      	mov	r5, r0
  4012ec:	4688      	mov	r8, r1
  4012ee:	2800      	cmp	r0, #0
  4012f0:	bf18      	it	ne
  4012f2:	2900      	cmpne	r1, #0
  4012f4:	d002      	beq.n	4012fc <usart_sync_read+0x18>
  4012f6:	b9d2      	cbnz	r2, 40132e <usart_sync_read+0x4a>
  4012f8:	2000      	movs	r0, #0
  4012fa:	e000      	b.n	4012fe <usart_sync_read+0x1a>
  4012fc:	2000      	movs	r0, #0
  4012fe:	f44f 7286 	mov.w	r2, #268	; 0x10c
  401302:	490c      	ldr	r1, [pc, #48]	; (401334 <usart_sync_read+0x50>)
  401304:	4b0c      	ldr	r3, [pc, #48]	; (401338 <usart_sync_read+0x54>)
  401306:	4798      	blx	r3
	uint32_t                      offset = 0;
  401308:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  40130a:	f105 0408 	add.w	r4, r5, #8
  40130e:	4620      	mov	r0, r4
  401310:	4b0a      	ldr	r3, [pc, #40]	; (40133c <usart_sync_read+0x58>)
  401312:	4798      	blx	r3
  401314:	2800      	cmp	r0, #0
  401316:	d0f8      	beq.n	40130a <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  401318:	4620      	mov	r0, r4
  40131a:	4b09      	ldr	r3, [pc, #36]	; (401340 <usart_sync_read+0x5c>)
  40131c:	4798      	blx	r3
  40131e:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  401322:	3601      	adds	r6, #1
  401324:	42be      	cmp	r6, r7
  401326:	d3f0      	bcc.n	40130a <usart_sync_read+0x26>

	return (int32_t)offset;
}
  401328:	4630      	mov	r0, r6
  40132a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  40132e:	2001      	movs	r0, #1
  401330:	e7e5      	b.n	4012fe <usart_sync_read+0x1a>
  401332:	bf00      	nop
  401334:	00405950 	.word	0x00405950
  401338:	004013b9 	.word	0x004013b9
  40133c:	004022e1 	.word	0x004022e1
  401340:	0040226d 	.word	0x0040226d

00401344 <usart_sync_init>:
{
  401344:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401346:	4604      	mov	r4, r0
  401348:	460d      	mov	r5, r1
  40134a:	2800      	cmp	r0, #0
  40134c:	bf18      	it	ne
  40134e:	2900      	cmpne	r1, #0
  401350:	bf14      	ite	ne
  401352:	2001      	movne	r0, #1
  401354:	2000      	moveq	r0, #0
  401356:	2234      	movs	r2, #52	; 0x34
  401358:	4907      	ldr	r1, [pc, #28]	; (401378 <usart_sync_init+0x34>)
  40135a:	4b08      	ldr	r3, [pc, #32]	; (40137c <usart_sync_init+0x38>)
  40135c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  40135e:	4629      	mov	r1, r5
  401360:	f104 0008 	add.w	r0, r4, #8
  401364:	4b06      	ldr	r3, [pc, #24]	; (401380 <usart_sync_init+0x3c>)
  401366:	4798      	blx	r3
	if (init_status) {
  401368:	4603      	mov	r3, r0
  40136a:	b918      	cbnz	r0, 401374 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  40136c:	4a05      	ldr	r2, [pc, #20]	; (401384 <usart_sync_init+0x40>)
  40136e:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  401370:	4a05      	ldr	r2, [pc, #20]	; (401388 <usart_sync_init+0x44>)
  401372:	6022      	str	r2, [r4, #0]
}
  401374:	4618      	mov	r0, r3
  401376:	bd38      	pop	{r3, r4, r5, pc}
  401378:	00405950 	.word	0x00405950
  40137c:	004013b9 	.word	0x004013b9
  401380:	004021dd 	.word	0x004021dd
  401384:	004012e5 	.word	0x004012e5
  401388:	00401275 	.word	0x00401275

0040138c <usart_sync_enable>:
{
  40138c:	b510      	push	{r4, lr}
	ASSERT(descr);
  40138e:	4604      	mov	r4, r0
  401390:	2253      	movs	r2, #83	; 0x53
  401392:	4906      	ldr	r1, [pc, #24]	; (4013ac <usart_sync_enable+0x20>)
  401394:	3000      	adds	r0, #0
  401396:	bf18      	it	ne
  401398:	2001      	movne	r0, #1
  40139a:	4b05      	ldr	r3, [pc, #20]	; (4013b0 <usart_sync_enable+0x24>)
  40139c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  40139e:	f104 0008 	add.w	r0, r4, #8
  4013a2:	4b04      	ldr	r3, [pc, #16]	; (4013b4 <usart_sync_enable+0x28>)
  4013a4:	4798      	blx	r3
}
  4013a6:	2000      	movs	r0, #0
  4013a8:	bd10      	pop	{r4, pc}
  4013aa:	bf00      	nop
  4013ac:	00405950 	.word	0x00405950
  4013b0:	004013b9 	.word	0x004013b9
  4013b4:	00402215 	.word	0x00402215

004013b8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  4013b8:	b900      	cbnz	r0, 4013bc <assert+0x4>
		__asm("BKPT #0");
  4013ba:	be00      	bkpt	0x0000
  4013bc:	4770      	bx	lr

004013be <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  4013be:	6803      	ldr	r3, [r0, #0]
  4013c0:	b11b      	cbz	r3, 4013ca <is_list_element+0xc>
		if (it == element) {
  4013c2:	428b      	cmp	r3, r1
  4013c4:	d003      	beq.n	4013ce <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  4013c6:	681b      	ldr	r3, [r3, #0]
  4013c8:	e7fa      	b.n	4013c0 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  4013ca:	2000      	movs	r0, #0
  4013cc:	4770      	bx	lr
			return true;
  4013ce:	2001      	movs	r0, #1
}
  4013d0:	4770      	bx	lr
	...

004013d4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  4013d4:	b538      	push	{r3, r4, r5, lr}
  4013d6:	4604      	mov	r4, r0
  4013d8:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  4013da:	4b06      	ldr	r3, [pc, #24]	; (4013f4 <list_insert_as_head+0x20>)
  4013dc:	4798      	blx	r3
  4013de:	f080 0001 	eor.w	r0, r0, #1
  4013e2:	2239      	movs	r2, #57	; 0x39
  4013e4:	4904      	ldr	r1, [pc, #16]	; (4013f8 <list_insert_as_head+0x24>)
  4013e6:	b2c0      	uxtb	r0, r0
  4013e8:	4b04      	ldr	r3, [pc, #16]	; (4013fc <list_insert_as_head+0x28>)
  4013ea:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  4013ec:	6823      	ldr	r3, [r4, #0]
  4013ee:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  4013f0:	6025      	str	r5, [r4, #0]
  4013f2:	bd38      	pop	{r3, r4, r5, pc}
  4013f4:	004013bf 	.word	0x004013bf
  4013f8:	0040596c 	.word	0x0040596c
  4013fc:	004013b9 	.word	0x004013b9

00401400 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  401400:	6803      	ldr	r3, [r0, #0]
  401402:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  401404:	6001      	str	r1, [r0, #0]
  401406:	4770      	bx	lr

00401408 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  401408:	6803      	ldr	r3, [r0, #0]
  40140a:	b11b      	cbz	r3, 401414 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  40140c:	681a      	ldr	r2, [r3, #0]
  40140e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  401410:	4618      	mov	r0, r3
  401412:	4770      	bx	lr
	}

	return NULL;
  401414:	2000      	movs	r0, #0
}
  401416:	4770      	bx	lr

00401418 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  401418:	b570      	push	{r4, r5, r6, lr}
  40141a:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  40141c:	4604      	mov	r4, r0
  40141e:	460e      	mov	r6, r1
  401420:	2800      	cmp	r0, #0
  401422:	bf18      	it	ne
  401424:	2900      	cmpne	r1, #0
  401426:	d002      	beq.n	40142e <ringbuffer_init+0x16>
  401428:	b97a      	cbnz	r2, 40144a <ringbuffer_init+0x32>
  40142a:	2000      	movs	r0, #0
  40142c:	e000      	b.n	401430 <ringbuffer_init+0x18>
  40142e:	2000      	movs	r0, #0
  401430:	2228      	movs	r2, #40	; 0x28
  401432:	4908      	ldr	r1, [pc, #32]	; (401454 <ringbuffer_init+0x3c>)
  401434:	4b08      	ldr	r3, [pc, #32]	; (401458 <ringbuffer_init+0x40>)
  401436:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  401438:	1e6b      	subs	r3, r5, #1
  40143a:	421d      	tst	r5, r3
  40143c:	d107      	bne.n	40144e <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  40143e:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  401440:	2000      	movs	r0, #0
  401442:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  401444:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  401446:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  401448:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  40144a:	2001      	movs	r0, #1
  40144c:	e7f0      	b.n	401430 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  40144e:	f06f 000c 	mvn.w	r0, #12
}
  401452:	bd70      	pop	{r4, r5, r6, pc}
  401454:	0040598c 	.word	0x0040598c
  401458:	004013b9 	.word	0x004013b9

0040145c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  40145c:	b538      	push	{r3, r4, r5, lr}
  40145e:	460d      	mov	r5, r1
	ASSERT(rb);
  401460:	4604      	mov	r4, r0
  401462:	2251      	movs	r2, #81	; 0x51
  401464:	490b      	ldr	r1, [pc, #44]	; (401494 <ringbuffer_put+0x38>)
  401466:	3000      	adds	r0, #0
  401468:	bf18      	it	ne
  40146a:	2001      	movne	r0, #1
  40146c:	4b0a      	ldr	r3, [pc, #40]	; (401498 <ringbuffer_put+0x3c>)
  40146e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  401470:	6822      	ldr	r2, [r4, #0]
  401472:	68e3      	ldr	r3, [r4, #12]
  401474:	6861      	ldr	r1, [r4, #4]
  401476:	400b      	ands	r3, r1
  401478:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  40147a:	68e3      	ldr	r3, [r4, #12]
  40147c:	68a2      	ldr	r2, [r4, #8]
  40147e:	1a9a      	subs	r2, r3, r2
  401480:	6861      	ldr	r1, [r4, #4]
  401482:	428a      	cmp	r2, r1
  401484:	d901      	bls.n	40148a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  401486:	1a59      	subs	r1, r3, r1
  401488:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  40148a:	3301      	adds	r3, #1
  40148c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  40148e:	2000      	movs	r0, #0
  401490:	bd38      	pop	{r3, r4, r5, pc}
  401492:	bf00      	nop
  401494:	0040598c 	.word	0x0040598c
  401498:	004013b9 	.word	0x004013b9

0040149c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  40149c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  40149e:	4a06      	ldr	r2, [pc, #24]	; (4014b8 <_sbrk+0x1c>)
  4014a0:	6812      	ldr	r2, [r2, #0]
  4014a2:	b122      	cbz	r2, 4014ae <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4014a4:	4a04      	ldr	r2, [pc, #16]	; (4014b8 <_sbrk+0x1c>)
  4014a6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  4014a8:	4403      	add	r3, r0
  4014aa:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  4014ac:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4014ae:	4903      	ldr	r1, [pc, #12]	; (4014bc <_sbrk+0x20>)
  4014b0:	4a01      	ldr	r2, [pc, #4]	; (4014b8 <_sbrk+0x1c>)
  4014b2:	6011      	str	r1, [r2, #0]
  4014b4:	e7f6      	b.n	4014a4 <_sbrk+0x8>
  4014b6:	bf00      	nop
  4014b8:	20400338 	.word	0x20400338
  4014bc:	20400cd0 	.word	0x20400cd0

004014c0 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  4014c0:	f04f 30ff 	mov.w	r0, #4294967295
  4014c4:	4770      	bx	lr

004014c6 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  4014c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4014ca:	604b      	str	r3, [r1, #4]

	return 0;
}
  4014cc:	2000      	movs	r0, #0
  4014ce:	4770      	bx	lr

004014d0 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  4014d0:	2001      	movs	r0, #1
  4014d2:	4770      	bx	lr

004014d4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  4014d4:	2000      	movs	r0, #0
  4014d6:	4770      	bx	lr

004014d8 <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  4014d8:	6943      	ldr	r3, [r0, #20]
  4014da:	4a07      	ldr	r2, [pc, #28]	; (4014f8 <_afec_get_irq_num+0x20>)
  4014dc:	4293      	cmp	r3, r2
  4014de:	d005      	beq.n	4014ec <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  4014e0:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  4014e4:	4293      	cmp	r3, r2
  4014e6:	d103      	bne.n	4014f0 <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  4014e8:	2028      	movs	r0, #40	; 0x28
  4014ea:	4770      	bx	lr
		return AFEC0_IRQn;
  4014ec:	201d      	movs	r0, #29
  4014ee:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  4014f0:	f04f 30ff 	mov.w	r0, #4294967295
}
  4014f4:	4770      	bx	lr
  4014f6:	bf00      	nop
  4014f8:	4003c000 	.word	0x4003c000

004014fc <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  4014fc:	4b06      	ldr	r3, [pc, #24]	; (401518 <_afec_init_irq_param+0x1c>)
  4014fe:	4298      	cmp	r0, r3
  401500:	d003      	beq.n	40150a <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  401502:	4b06      	ldr	r3, [pc, #24]	; (40151c <_afec_init_irq_param+0x20>)
  401504:	4298      	cmp	r0, r3
  401506:	d003      	beq.n	401510 <_afec_init_irq_param+0x14>
  401508:	4770      	bx	lr
		_afec0_dev = dev;
  40150a:	4b05      	ldr	r3, [pc, #20]	; (401520 <_afec_init_irq_param+0x24>)
  40150c:	6019      	str	r1, [r3, #0]
  40150e:	e7f8      	b.n	401502 <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  401510:	4b03      	ldr	r3, [pc, #12]	; (401520 <_afec_init_irq_param+0x24>)
  401512:	6059      	str	r1, [r3, #4]
	}
}
  401514:	e7f8      	b.n	401508 <_afec_init_irq_param+0xc>
  401516:	bf00      	nop
  401518:	4003c000 	.word	0x4003c000
  40151c:	40064000 	.word	0x40064000
  401520:	2040033c 	.word	0x2040033c

00401524 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  401524:	2364      	movs	r3, #100	; 0x64
  401526:	4a1d      	ldr	r2, [pc, #116]	; (40159c <_afec_init+0x78>)
  401528:	fb03 2301 	mla	r3, r3, r1, r2
  40152c:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  40152e:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  401530:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  401532:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  401534:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  401536:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  401538:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  40153a:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  40153c:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  40153e:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  401540:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  401542:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  401544:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  401546:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  401548:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  40154a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  40154e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  401550:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  401554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  401556:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  40155a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  40155c:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  401560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  401562:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401566:	2200      	movs	r2, #0
  401568:	2a0b      	cmp	r2, #11
  40156a:	d814      	bhi.n	401596 <_afec_init+0x72>
{
  40156c:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  40156e:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  401570:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401574:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401578:	4413      	add	r3, r2
  40157a:	330c      	adds	r3, #12
  40157c:	4c07      	ldr	r4, [pc, #28]	; (40159c <_afec_init+0x78>)
  40157e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  401582:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  401584:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401586:	3201      	adds	r2, #1
  401588:	b2d2      	uxtb	r2, r2
  40158a:	2a0b      	cmp	r2, #11
  40158c:	d9ef      	bls.n	40156e <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  40158e:	2000      	movs	r0, #0
  401590:	f85d 4b04 	ldr.w	r4, [sp], #4
  401594:	4770      	bx	lr
  401596:	2000      	movs	r0, #0
  401598:	4770      	bx	lr
  40159a:	bf00      	nop
  40159c:	004059b0 	.word	0x004059b0

004015a0 <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  4015a0:	b530      	push	{r4, r5, lr}
  4015a2:	b083      	sub	sp, #12
  4015a4:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  4015a6:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  4015a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  4015aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  4015ac:	400b      	ands	r3, r1
  4015ae:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  4015b0:	9b01      	ldr	r3, [sp, #4]
  4015b2:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  4015b6:	d10e      	bne.n	4015d6 <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  4015b8:	9b01      	ldr	r3, [sp, #4]
  4015ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  4015be:	d10e      	bne.n	4015de <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  4015c0:	9b01      	ldr	r3, [sp, #4]
  4015c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4015c6:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  4015c8:	9c01      	ldr	r4, [sp, #4]
  4015ca:	fab4 f484 	clz	r4, r4
  4015ce:	f1c4 0420 	rsb	r4, r4, #32
  4015d2:	b2e4      	uxtb	r4, r4
	while (cnt) {
  4015d4:	e01f      	b.n	401616 <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  4015d6:	6803      	ldr	r3, [r0, #0]
  4015d8:	2100      	movs	r1, #0
  4015da:	4798      	blx	r3
  4015dc:	e7ec      	b.n	4015b8 <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  4015de:	686b      	ldr	r3, [r5, #4]
  4015e0:	2100      	movs	r1, #0
  4015e2:	4628      	mov	r0, r5
  4015e4:	4798      	blx	r3
  4015e6:	e7eb      	b.n	4015c0 <_afec_interrupt_handler+0x20>
		cnt--;
  4015e8:	3c01      	subs	r4, #1
  4015ea:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  4015ec:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  4015ee:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  4015f0:	68ab      	ldr	r3, [r5, #8]
  4015f2:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  4015f4:	6e92      	ldr	r2, [r2, #104]	; 0x68
  4015f6:	b292      	uxth	r2, r2
  4015f8:	4621      	mov	r1, r4
  4015fa:	4628      	mov	r0, r5
  4015fc:	4798      	blx	r3
		status &= ~(1 << cnt);
  4015fe:	2301      	movs	r3, #1
  401600:	40a3      	lsls	r3, r4
  401602:	9c01      	ldr	r4, [sp, #4]
  401604:	ea24 0403 	bic.w	r4, r4, r3
  401608:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  40160a:	9c01      	ldr	r4, [sp, #4]
  40160c:	fab4 f484 	clz	r4, r4
  401610:	f1c4 0420 	rsb	r4, r4, #32
  401614:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401616:	2c00      	cmp	r4, #0
  401618:	d1e6      	bne.n	4015e8 <_afec_interrupt_handler+0x48>
	}
}
  40161a:	b003      	add	sp, #12
  40161c:	bd30      	pop	{r4, r5, pc}
	...

00401620 <_afec_get_hardware_index>:
{
  401620:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  401622:	4b09      	ldr	r3, [pc, #36]	; (401648 <_afec_get_hardware_index+0x28>)
  401624:	4298      	cmp	r0, r3
  401626:	d00a      	beq.n	40163e <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  401628:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  40162c:	4298      	cmp	r0, r3
  40162e:	d008      	beq.n	401642 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  401630:	22a7      	movs	r2, #167	; 0xa7
  401632:	4906      	ldr	r1, [pc, #24]	; (40164c <_afec_get_hardware_index+0x2c>)
  401634:	2000      	movs	r0, #0
  401636:	4b06      	ldr	r3, [pc, #24]	; (401650 <_afec_get_hardware_index+0x30>)
  401638:	4798      	blx	r3
	return 0;
  40163a:	2000      	movs	r0, #0
  40163c:	bd08      	pop	{r3, pc}
		return 0;
  40163e:	2000      	movs	r0, #0
  401640:	bd08      	pop	{r3, pc}
		return 1;
  401642:	2001      	movs	r0, #1
}
  401644:	bd08      	pop	{r3, pc}
  401646:	bf00      	nop
  401648:	4003c000 	.word	0x4003c000
  40164c:	00405a78 	.word	0x00405a78
  401650:	004013b9 	.word	0x004013b9

00401654 <_afec_get_regs>:
{
  401654:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  401656:	4b09      	ldr	r3, [pc, #36]	; (40167c <_afec_get_regs+0x28>)
  401658:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  40165a:	2300      	movs	r3, #0
  40165c:	2b01      	cmp	r3, #1
  40165e:	d809      	bhi.n	401674 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  401660:	2264      	movs	r2, #100	; 0x64
  401662:	fb02 f203 	mul.w	r2, r2, r3
  401666:	4906      	ldr	r1, [pc, #24]	; (401680 <_afec_get_regs+0x2c>)
  401668:	5c8a      	ldrb	r2, [r1, r2]
  40166a:	4290      	cmp	r0, r2
  40166c:	d003      	beq.n	401676 <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  40166e:	3301      	adds	r3, #1
  401670:	b2db      	uxtb	r3, r3
  401672:	e7f3      	b.n	40165c <_afec_get_regs+0x8>
	return 0;
  401674:	2300      	movs	r3, #0
}
  401676:	4618      	mov	r0, r3
  401678:	bd08      	pop	{r3, pc}
  40167a:	bf00      	nop
  40167c:	00401621 	.word	0x00401621
  401680:	004059b0 	.word	0x004059b0

00401684 <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  401684:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  401686:	4b02      	ldr	r3, [pc, #8]	; (401690 <AFEC0_Handler+0xc>)
  401688:	6818      	ldr	r0, [r3, #0]
  40168a:	4b02      	ldr	r3, [pc, #8]	; (401694 <AFEC0_Handler+0x10>)
  40168c:	4798      	blx	r3
  40168e:	bd08      	pop	{r3, pc}
  401690:	2040033c 	.word	0x2040033c
  401694:	004015a1 	.word	0x004015a1

00401698 <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  401698:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  40169a:	4b02      	ldr	r3, [pc, #8]	; (4016a4 <AFEC1_Handler+0xc>)
  40169c:	6858      	ldr	r0, [r3, #4]
  40169e:	4b02      	ldr	r3, [pc, #8]	; (4016a8 <AFEC1_Handler+0x10>)
  4016a0:	4798      	blx	r3
  4016a2:	bd08      	pop	{r3, pc}
  4016a4:	2040033c 	.word	0x2040033c
  4016a8:	004015a1 	.word	0x004015a1

004016ac <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  4016ac:	b570      	push	{r4, r5, r6, lr}
  4016ae:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  4016b0:	4605      	mov	r5, r0
  4016b2:	f44f 72a1 	mov.w	r2, #322	; 0x142
  4016b6:	4923      	ldr	r1, [pc, #140]	; (401744 <_adc_async_init+0x98>)
  4016b8:	3000      	adds	r0, #0
  4016ba:	bf18      	it	ne
  4016bc:	2001      	movne	r0, #1
  4016be:	4b22      	ldr	r3, [pc, #136]	; (401748 <_adc_async_init+0x9c>)
  4016c0:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  4016c2:	4620      	mov	r0, r4
  4016c4:	4b21      	ldr	r3, [pc, #132]	; (40174c <_adc_async_init+0xa0>)
  4016c6:	4798      	blx	r3
  4016c8:	4601      	mov	r1, r0
  4016ca:	4620      	mov	r0, r4
  4016cc:	4b20      	ldr	r3, [pc, #128]	; (401750 <_adc_async_init+0xa4>)
  4016ce:	4798      	blx	r3
	if (init_status) {
  4016d0:	4606      	mov	r6, r0
  4016d2:	b108      	cbz	r0, 4016d8 <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  4016d4:	4630      	mov	r0, r6
  4016d6:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  4016d8:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  4016da:	4629      	mov	r1, r5
  4016dc:	4620      	mov	r0, r4
  4016de:	4b1d      	ldr	r3, [pc, #116]	; (401754 <_adc_async_init+0xa8>)
  4016e0:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  4016e2:	4628      	mov	r0, r5
  4016e4:	4b1c      	ldr	r3, [pc, #112]	; (401758 <_adc_async_init+0xac>)
  4016e6:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  4016e8:	2800      	cmp	r0, #0
  4016ea:	db0d      	blt.n	401708 <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4016ec:	0943      	lsrs	r3, r0, #5
  4016ee:	f000 001f 	and.w	r0, r0, #31
  4016f2:	2201      	movs	r2, #1
  4016f4:	fa02 f000 	lsl.w	r0, r2, r0
  4016f8:	3320      	adds	r3, #32
  4016fa:	4a18      	ldr	r2, [pc, #96]	; (40175c <_adc_async_init+0xb0>)
  4016fc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401700:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401704:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  401708:	4628      	mov	r0, r5
  40170a:	4b13      	ldr	r3, [pc, #76]	; (401758 <_adc_async_init+0xac>)
  40170c:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  40170e:	2800      	cmp	r0, #0
  401710:	db09      	blt.n	401726 <_adc_async_init+0x7a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401712:	0943      	lsrs	r3, r0, #5
  401714:	f000 001f 	and.w	r0, r0, #31
  401718:	2201      	movs	r2, #1
  40171a:	fa02 f000 	lsl.w	r0, r2, r0
  40171e:	3360      	adds	r3, #96	; 0x60
  401720:	4a0e      	ldr	r2, [pc, #56]	; (40175c <_adc_async_init+0xb0>)
  401722:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  401726:	4628      	mov	r0, r5
  401728:	4b0b      	ldr	r3, [pc, #44]	; (401758 <_adc_async_init+0xac>)
  40172a:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  40172c:	2800      	cmp	r0, #0
  40172e:	dbd1      	blt.n	4016d4 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401730:	0942      	lsrs	r2, r0, #5
  401732:	f000 001f 	and.w	r0, r0, #31
  401736:	2301      	movs	r3, #1
  401738:	fa03 f000 	lsl.w	r0, r3, r0
  40173c:	4b07      	ldr	r3, [pc, #28]	; (40175c <_adc_async_init+0xb0>)
  40173e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  401742:	e7c7      	b.n	4016d4 <_adc_async_init+0x28>
  401744:	00405a78 	.word	0x00405a78
  401748:	004013b9 	.word	0x004013b9
  40174c:	00401655 	.word	0x00401655
  401750:	00401525 	.word	0x00401525
  401754:	004014fd 	.word	0x004014fd
  401758:	004014d9 	.word	0x004014d9
  40175c:	e000e100 	.word	0xe000e100

00401760 <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  401760:	6942      	ldr	r2, [r0, #20]
  401762:	2301      	movs	r3, #1
  401764:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  401768:	6151      	str	r1, [r2, #20]
  40176a:	4770      	bx	lr

0040176c <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  40176c:	2002      	movs	r0, #2
  40176e:	4770      	bx	lr

00401770 <_adc_async_convert>:
/**
 * \brief Make conversion
 */
void _adc_async_convert(struct _adc_async_device *const device)
{
	hri_afec_write_CR_reg(device->hw, AFEC_CR_START);
  401770:	6943      	ldr	r3, [r0, #20]
}

static inline void hri_afec_write_CR_reg(const void *const hw, hri_afec_cr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CR = data;
  401772:	2202      	movs	r2, #2
  401774:	601a      	str	r2, [r3, #0]
  401776:	4770      	bx	lr

00401778 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  401778:	f44f 7396 	mov.w	r3, #300	; 0x12c
  40177c:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  401780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401784:	fb03 f000 	mul.w	r0, r3, r0
  401788:	4770      	bx	lr
	...

0040178c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  40178c:	b500      	push	{lr}
  40178e:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  401790:	a801      	add	r0, sp, #4
  401792:	4b14      	ldr	r3, [pc, #80]	; (4017e4 <_init_chip+0x58>)
  401794:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  401796:	4a14      	ldr	r2, [pc, #80]	; (4017e8 <_init_chip+0x5c>)
  401798:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  40179c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4017a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4017a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4017a8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  4017ac:	a801      	add	r0, sp, #4
  4017ae:	4b0f      	ldr	r3, [pc, #60]	; (4017ec <_init_chip+0x60>)
  4017b0:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  4017b2:	4a0f      	ldr	r2, [pc, #60]	; (4017f0 <_init_chip+0x64>)
  4017b4:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4017b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  4017ba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  4017be:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4017c0:	4b0c      	ldr	r3, [pc, #48]	; (4017f4 <_init_chip+0x68>)
  4017c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4017c6:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  4017ca:	d104      	bne.n	4017d6 <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4017cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4017d0:	4b08      	ldr	r3, [pc, #32]	; (4017f4 <_init_chip+0x68>)
  4017d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  4017d6:	4b08      	ldr	r3, [pc, #32]	; (4017f8 <_init_chip+0x6c>)
  4017d8:	4798      	blx	r3

#endif
	_pmc_init();
  4017da:	4b08      	ldr	r3, [pc, #32]	; (4017fc <_init_chip+0x70>)
  4017dc:	4798      	blx	r3
}
  4017de:	b003      	add	sp, #12
  4017e0:	f85d fb04 	ldr.w	pc, [sp], #4
  4017e4:	00400e41 	.word	0x00400e41
  4017e8:	e000ed00 	.word	0xe000ed00
  4017ec:	00400e4f 	.word	0x00400e4f
  4017f0:	400e0c00 	.word	0x400e0c00
  4017f4:	400e0600 	.word	0x400e0600
  4017f8:	0040230d 	.word	0x0040230d
  4017fc:	00401be1 	.word	0x00401be1

00401800 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  401800:	b538      	push	{r3, r4, r5, lr}
  401802:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  401804:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  401806:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  401808:	f014 0f01 	tst.w	r4, #1
  40180c:	d11a      	bne.n	401844 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  40180e:	f414 7f00 	tst.w	r4, #512	; 0x200
  401812:	d11a      	bne.n	40184a <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  401814:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  401818:	d11b      	bne.n	401852 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  40181a:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  40181e:	d11d      	bne.n	40185c <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  401820:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  401824:	d008      	beq.n	401838 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401826:	68eb      	ldr	r3, [r5, #12]
  401828:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  40182a:	6c52      	ldr	r2, [r2, #68]	; 0x44
  40182c:	f012 0f20 	tst.w	r2, #32
  401830:	d019      	beq.n	401866 <_can_irq_handler+0x66>
  401832:	2102      	movs	r1, #2
  401834:	4628      	mov	r0, r5
  401836:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  401838:	f014 0f08 	tst.w	r4, #8
  40183c:	d115      	bne.n	40186a <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  40183e:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  401840:	651c      	str	r4, [r3, #80]	; 0x50
  401842:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  401844:	6883      	ldr	r3, [r0, #8]
  401846:	4798      	blx	r3
  401848:	e7e1      	b.n	40180e <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  40184a:	686b      	ldr	r3, [r5, #4]
  40184c:	4628      	mov	r0, r5
  40184e:	4798      	blx	r3
  401850:	e7e0      	b.n	401814 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  401852:	68eb      	ldr	r3, [r5, #12]
  401854:	2103      	movs	r1, #3
  401856:	4628      	mov	r0, r5
  401858:	4798      	blx	r3
  40185a:	e7de      	b.n	40181a <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  40185c:	68eb      	ldr	r3, [r5, #12]
  40185e:	2100      	movs	r1, #0
  401860:	4628      	mov	r0, r5
  401862:	4798      	blx	r3
  401864:	e7dc      	b.n	401820 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401866:	2101      	movs	r1, #1
  401868:	e7e4      	b.n	401834 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  40186a:	68eb      	ldr	r3, [r5, #12]
  40186c:	2104      	movs	r1, #4
  40186e:	4628      	mov	r0, r5
  401870:	4798      	blx	r3
  401872:	e7e4      	b.n	40183e <_can_irq_handler+0x3e>

00401874 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  401874:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  401876:	4b02      	ldr	r3, [pc, #8]	; (401880 <MCAN1_INT0_Handler+0xc>)
  401878:	6a98      	ldr	r0, [r3, #40]	; 0x28
  40187a:	4b02      	ldr	r3, [pc, #8]	; (401884 <MCAN1_INT0_Handler+0x10>)
  40187c:	4798      	blx	r3
  40187e:	bd08      	pop	{r3, pc}
  401880:	20400344 	.word	0x20400344
  401884:	00401801 	.word	0x00401801

00401888 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401888:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  40188a:	2500      	movs	r5, #0
  40188c:	428d      	cmp	r5, r1
  40188e:	d210      	bcs.n	4018b2 <_ffs+0x2a>
  401890:	2201      	movs	r2, #1
  401892:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401894:	2b1f      	cmp	r3, #31
  401896:	d80a      	bhi.n	4018ae <_ffs+0x26>
			if (v[i] & bit) {
  401898:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  40189c:	4222      	tst	r2, r4
  40189e:	d102      	bne.n	4018a6 <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  4018a0:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  4018a2:	3301      	adds	r3, #1
  4018a4:	e7f6      	b.n	401894 <_ffs+0xc>
				return i * 32 + j;
  4018a6:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  4018aa:	bc30      	pop	{r4, r5}
  4018ac:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  4018ae:	3501      	adds	r5, #1
  4018b0:	e7ec      	b.n	40188c <_ffs+0x4>
	return -1;
  4018b2:	f04f 30ff 	mov.w	r0, #4294967295
  4018b6:	e7f8      	b.n	4018aa <_ffs+0x22>

004018b8 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  4018b8:	b510      	push	{r4, lr}
  4018ba:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  4018bc:	2300      	movs	r3, #0
  4018be:	9301      	str	r3, [sp, #4]
  4018c0:	9302      	str	r3, [sp, #8]
  4018c2:	9303      	str	r3, [sp, #12]
  4018c4:	9304      	str	r3, [sp, #16]
  4018c6:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  4018c8:	4b21      	ldr	r3, [pc, #132]	; (401950 <_ext_irq_handler+0x98>)
  4018ca:	6818      	ldr	r0, [r3, #0]
  4018cc:	22f8      	movs	r2, #248	; 0xf8
  4018ce:	4921      	ldr	r1, [pc, #132]	; (401954 <_ext_irq_handler+0x9c>)
  4018d0:	3000      	adds	r0, #0
  4018d2:	bf18      	it	ne
  4018d4:	2001      	movne	r0, #1
  4018d6:	4b20      	ldr	r3, [pc, #128]	; (401958 <_ext_irq_handler+0xa0>)
  4018d8:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  4018da:	4b20      	ldr	r3, [pc, #128]	; (40195c <_ext_irq_handler+0xa4>)
  4018dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4018de:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  4018e0:	4013      	ands	r3, r2
  4018e2:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  4018e4:	491e      	ldr	r1, [pc, #120]	; (401960 <_ext_irq_handler+0xa8>)
  4018e6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4018e8:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4018ea:	400a      	ands	r2, r1
  4018ec:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  4018ee:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  4018f0:	e025      	b.n	40193e <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  4018f2:	4b17      	ldr	r3, [pc, #92]	; (401950 <_ext_irq_handler+0x98>)
  4018f4:	681b      	ldr	r3, [r3, #0]
  4018f6:	4620      	mov	r0, r4
  4018f8:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  4018fa:	1163      	asrs	r3, r4, #5
  4018fc:	f004 041f 	and.w	r4, r4, #31
  401900:	2201      	movs	r2, #1
  401902:	fa02 f404 	lsl.w	r4, r2, r4
  401906:	aa06      	add	r2, sp, #24
  401908:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40190c:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401910:	ea22 0204 	bic.w	r2, r2, r4
  401914:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  401918:	2105      	movs	r1, #5
  40191a:	a801      	add	r0, sp, #4
  40191c:	4b11      	ldr	r3, [pc, #68]	; (401964 <_ext_irq_handler+0xac>)
  40191e:	4798      	blx	r3
  401920:	4604      	mov	r4, r0
		while (-1 != pos) {
  401922:	f1b4 3fff 	cmp.w	r4, #4294967295
  401926:	d1e4      	bne.n	4018f2 <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  401928:	4a0c      	ldr	r2, [pc, #48]	; (40195c <_ext_irq_handler+0xa4>)
  40192a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40192c:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  40192e:	400b      	ands	r3, r1
  401930:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401932:	490b      	ldr	r1, [pc, #44]	; (401960 <_ext_irq_handler+0xa8>)
  401934:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401936:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401938:	4002      	ands	r2, r0
  40193a:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  40193c:	4313      	orrs	r3, r2
	while (flag_total) {
  40193e:	b12b      	cbz	r3, 40194c <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  401940:	2105      	movs	r1, #5
  401942:	a801      	add	r0, sp, #4
  401944:	4b07      	ldr	r3, [pc, #28]	; (401964 <_ext_irq_handler+0xac>)
  401946:	4798      	blx	r3
  401948:	4604      	mov	r4, r0
		while (-1 != pos) {
  40194a:	e7ea      	b.n	401922 <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  40194c:	b006      	add	sp, #24
  40194e:	bd10      	pop	{r4, pc}
  401950:	20400370 	.word	0x20400370
  401954:	00405ad0 	.word	0x00405ad0
  401958:	004013b9 	.word	0x004013b9
  40195c:	400e0e00 	.word	0x400e0e00
  401960:	400e1400 	.word	0x400e1400
  401964:	00401889 	.word	0x00401889

00401968 <_pio_get_hardware_index>:
{
  401968:	b510      	push	{r4, lr}
	ASSERT(hw);
  40196a:	4604      	mov	r4, r0
  40196c:	22d2      	movs	r2, #210	; 0xd2
  40196e:	4905      	ldr	r1, [pc, #20]	; (401984 <_pio_get_hardware_index+0x1c>)
  401970:	3000      	adds	r0, #0
  401972:	bf18      	it	ne
  401974:	2001      	movne	r0, #1
  401976:	4b04      	ldr	r3, [pc, #16]	; (401988 <_pio_get_hardware_index+0x20>)
  401978:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  40197a:	4804      	ldr	r0, [pc, #16]	; (40198c <_pio_get_hardware_index+0x24>)
  40197c:	4420      	add	r0, r4
}
  40197e:	f3c0 2047 	ubfx	r0, r0, #9, #8
  401982:	bd10      	pop	{r4, pc}
  401984:	00405ad0 	.word	0x00405ad0
  401988:	004013b9 	.word	0x004013b9
  40198c:	bff1f200 	.word	0xbff1f200

00401990 <_pio_get_index>:
{
  401990:	b510      	push	{r4, lr}
	ASSERT(hw);
  401992:	4604      	mov	r4, r0
  401994:	22e0      	movs	r2, #224	; 0xe0
  401996:	490d      	ldr	r1, [pc, #52]	; (4019cc <_pio_get_index+0x3c>)
  401998:	3000      	adds	r0, #0
  40199a:	bf18      	it	ne
  40199c:	2001      	movne	r0, #1
  40199e:	4b0c      	ldr	r3, [pc, #48]	; (4019d0 <_pio_get_index+0x40>)
  4019a0:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  4019a2:	4620      	mov	r0, r4
  4019a4:	4b0b      	ldr	r3, [pc, #44]	; (4019d4 <_pio_get_index+0x44>)
  4019a6:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  4019a8:	2300      	movs	r3, #0
  4019aa:	2b01      	cmp	r3, #1
  4019ac:	d80b      	bhi.n	4019c6 <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  4019ae:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  4019b2:	008a      	lsls	r2, r1, #2
  4019b4:	4908      	ldr	r1, [pc, #32]	; (4019d8 <_pio_get_index+0x48>)
  4019b6:	5c8a      	ldrb	r2, [r1, r2]
  4019b8:	4290      	cmp	r0, r2
  4019ba:	d002      	beq.n	4019c2 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  4019bc:	3301      	adds	r3, #1
  4019be:	b2db      	uxtb	r3, r3
  4019c0:	e7f3      	b.n	4019aa <_pio_get_index+0x1a>
			return i;
  4019c2:	b258      	sxtb	r0, r3
  4019c4:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  4019c6:	f04f 30ff 	mov.w	r0, #4294967295
}
  4019ca:	bd10      	pop	{r4, pc}
  4019cc:	00405ad0 	.word	0x00405ad0
  4019d0:	004013b9 	.word	0x004013b9
  4019d4:	00401969 	.word	0x00401969
  4019d8:	00405a90 	.word	0x00405a90

004019dc <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  4019dc:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  4019de:	4604      	mov	r4, r0
  4019e0:	f240 1259 	movw	r2, #345	; 0x159
  4019e4:	4929      	ldr	r1, [pc, #164]	; (401a8c <_pio_init+0xb0>)
  4019e6:	3000      	adds	r0, #0
  4019e8:	bf18      	it	ne
  4019ea:	2001      	movne	r0, #1
  4019ec:	4b28      	ldr	r3, [pc, #160]	; (401a90 <_pio_init+0xb4>)
  4019ee:	4798      	blx	r3

	i = _pio_get_index(hw);
  4019f0:	4620      	mov	r0, r4
  4019f2:	4b28      	ldr	r3, [pc, #160]	; (401a94 <_pio_init+0xb8>)
  4019f4:	4798      	blx	r3
	if (i < 0) {
  4019f6:	2800      	cmp	r0, #0
  4019f8:	db43      	blt.n	401a82 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  4019fa:	4d27      	ldr	r5, [pc, #156]	; (401a98 <_pio_init+0xbc>)
  4019fc:	00c2      	lsls	r2, r0, #3
  4019fe:	1a11      	subs	r1, r2, r0
  401a00:	008b      	lsls	r3, r1, #2
  401a02:	442b      	add	r3, r5
  401a04:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  401a06:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  401a0a:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  401a0c:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  401a10:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  401a12:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  401a16:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  401a18:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  401a1c:	1a10      	subs	r0, r2, r0
  401a1e:	0083      	lsls	r3, r0, #2
  401a20:	442b      	add	r3, r5
  401a22:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  401a24:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401a28:	4620      	mov	r0, r4
  401a2a:	4b1c      	ldr	r3, [pc, #112]	; (401a9c <_pio_init+0xc0>)
  401a2c:	4798      	blx	r3
  401a2e:	4428      	add	r0, r5
  401a30:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  if ((int32_t)(IRQn) >= 0)
  401a34:	2b00      	cmp	r3, #0
  401a36:	db0c      	blt.n	401a52 <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a38:	095a      	lsrs	r2, r3, #5
  401a3a:	f003 001f 	and.w	r0, r3, #31
  401a3e:	2101      	movs	r1, #1
  401a40:	4081      	lsls	r1, r0
  401a42:	3220      	adds	r2, #32
  401a44:	4816      	ldr	r0, [pc, #88]	; (401aa0 <_pio_init+0xc4>)
  401a46:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401a4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401a4e:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  401a52:	2b00      	cmp	r3, #0
  401a54:	db08      	blt.n	401a68 <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a56:	095a      	lsrs	r2, r3, #5
  401a58:	f003 001f 	and.w	r0, r3, #31
  401a5c:	2101      	movs	r1, #1
  401a5e:	4081      	lsls	r1, r0
  401a60:	3260      	adds	r2, #96	; 0x60
  401a62:	480f      	ldr	r0, [pc, #60]	; (401aa0 <_pio_init+0xc4>)
  401a64:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401a68:	2b00      	cmp	r3, #0
  401a6a:	db0d      	blt.n	401a88 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a6c:	0959      	lsrs	r1, r3, #5
  401a6e:	f003 031f 	and.w	r3, r3, #31
  401a72:	2201      	movs	r2, #1
  401a74:	fa02 f303 	lsl.w	r3, r2, r3
  401a78:	4a09      	ldr	r2, [pc, #36]	; (401aa0 <_pio_init+0xc4>)
  401a7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  401a7e:	2000      	movs	r0, #0
  401a80:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  401a82:	f06f 0010 	mvn.w	r0, #16
  401a86:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401a88:	2000      	movs	r0, #0
}
  401a8a:	bd38      	pop	{r3, r4, r5, pc}
  401a8c:	00405ad0 	.word	0x00405ad0
  401a90:	004013b9 	.word	0x004013b9
  401a94:	00401991 	.word	0x00401991
  401a98:	00405a90 	.word	0x00405a90
  401a9c:	00401969 	.word	0x00401969
  401aa0:	e000e100 	.word	0xe000e100

00401aa4 <PIOD_Handler>:
{
  401aa4:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401aa6:	4b01      	ldr	r3, [pc, #4]	; (401aac <PIOD_Handler+0x8>)
  401aa8:	4798      	blx	r3
  401aaa:	bd08      	pop	{r3, pc}
  401aac:	004018b9 	.word	0x004018b9

00401ab0 <PIOA_Handler>:
{
  401ab0:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401ab2:	4b01      	ldr	r3, [pc, #4]	; (401ab8 <PIOA_Handler+0x8>)
  401ab4:	4798      	blx	r3
  401ab6:	bd08      	pop	{r3, pc}
  401ab8:	004018b9 	.word	0x004018b9

00401abc <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401abc:	b538      	push	{r3, r4, r5, lr}
  401abe:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401ac0:	4804      	ldr	r0, [pc, #16]	; (401ad4 <_ext_irq_init+0x18>)
  401ac2:	4c05      	ldr	r4, [pc, #20]	; (401ad8 <_ext_irq_init+0x1c>)
  401ac4:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  401ac6:	4805      	ldr	r0, [pc, #20]	; (401adc <_ext_irq_init+0x20>)
  401ac8:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401aca:	4b05      	ldr	r3, [pc, #20]	; (401ae0 <_ext_irq_init+0x24>)
  401acc:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401ace:	2000      	movs	r0, #0
  401ad0:	bd38      	pop	{r3, r4, r5, pc}
  401ad2:	bf00      	nop
  401ad4:	400e0e00 	.word	0x400e0e00
  401ad8:	004019dd 	.word	0x004019dd
  401adc:	400e1400 	.word	0x400e1400
  401ae0:	20400370 	.word	0x20400370

00401ae4 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  401ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ae8:	4604      	mov	r4, r0
  401aea:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  401aec:	f8df 8050 	ldr.w	r8, [pc, #80]	; 401b40 <_ext_irq_enable+0x5c>
  401af0:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
  401af4:	4641      	mov	r1, r8
  401af6:	289f      	cmp	r0, #159	; 0x9f
  401af8:	bf8c      	ite	hi
  401afa:	2000      	movhi	r0, #0
  401afc:	2001      	movls	r0, #1
  401afe:	4e0e      	ldr	r6, [pc, #56]	; (401b38 <_ext_irq_enable+0x54>)
  401b00:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  401b02:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  401b04:	22c3      	movs	r2, #195	; 0xc3
  401b06:	4641      	mov	r1, r8
  401b08:	2d9f      	cmp	r5, #159	; 0x9f
  401b0a:	bf8c      	ite	hi
  401b0c:	2000      	movhi	r0, #0
  401b0e:	2001      	movls	r0, #1
  401b10:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  401b12:	096d      	lsrs	r5, r5, #5
  401b14:	4b09      	ldr	r3, [pc, #36]	; (401b3c <_ext_irq_enable+0x58>)
  401b16:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  401b1a:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  401b1e:	b937      	cbnz	r7, 401b2e <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  401b20:	2301      	movs	r3, #1
  401b22:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  401b26:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  401b28:	2000      	movs	r0, #0
  401b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  401b2e:	2301      	movs	r3, #1
  401b30:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  401b34:	642c      	str	r4, [r5, #64]	; 0x40
  401b36:	e7f7      	b.n	401b28 <_ext_irq_enable+0x44>
  401b38:	004013b9 	.word	0x004013b9
  401b3c:	400e0e00 	.word	0x400e0e00
  401b40:	00405ad0 	.word	0x00405ad0

00401b44 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  401b44:	490e      	ldr	r1, [pc, #56]	; (401b80 <_pmc_init_sources+0x3c>)
  401b46:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401b48:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  401b4c:	4b0d      	ldr	r3, [pc, #52]	; (401b84 <_pmc_init_sources+0x40>)
  401b4e:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401b50:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  401b52:	4b0b      	ldr	r3, [pc, #44]	; (401b80 <_pmc_init_sources+0x3c>)
  401b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  401b56:	f013 0f01 	tst.w	r3, #1
  401b5a:	d0fa      	beq.n	401b52 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  401b5c:	4b08      	ldr	r3, [pc, #32]	; (401b80 <_pmc_init_sources+0x3c>)
  401b5e:	6a19      	ldr	r1, [r3, #32]
  401b60:	4a09      	ldr	r2, [pc, #36]	; (401b88 <_pmc_init_sources+0x44>)
  401b62:	430a      	orrs	r2, r1
  401b64:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  401b66:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  401b68:	4a08      	ldr	r2, [pc, #32]	; (401b8c <_pmc_init_sources+0x48>)
  401b6a:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  401b6c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  401b6e:	4a08      	ldr	r2, [pc, #32]	; (401b90 <_pmc_init_sources+0x4c>)
  401b70:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  401b72:	4b03      	ldr	r3, [pc, #12]	; (401b80 <_pmc_init_sources+0x3c>)
  401b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  401b76:	f013 0f02 	tst.w	r3, #2
  401b7a:	d0fa      	beq.n	401b72 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  401b7c:	4770      	bx	lr
  401b7e:	bf00      	nop
  401b80:	400e0600 	.word	0x400e0600
  401b84:	00373e01 	.word	0x00373e01
  401b88:	01370000 	.word	0x01370000
  401b8c:	f800ffff 	.word	0xf800ffff
  401b90:	20183f01 	.word	0x20183f01

00401b94 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401b94:	4a11      	ldr	r2, [pc, #68]	; (401bdc <_pmc_init_master_clock+0x48>)
  401b96:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  401b9c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401b9e:	4b0f      	ldr	r3, [pc, #60]	; (401bdc <_pmc_init_master_clock+0x48>)
  401ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401ba2:	f013 0f08 	tst.w	r3, #8
  401ba6:	d0fa      	beq.n	401b9e <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401ba8:	4a0c      	ldr	r2, [pc, #48]	; (401bdc <_pmc_init_master_clock+0x48>)
  401baa:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  401bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401bb4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401bb6:	4b09      	ldr	r3, [pc, #36]	; (401bdc <_pmc_init_master_clock+0x48>)
  401bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401bba:	f013 0f08 	tst.w	r3, #8
  401bbe:	d0fa      	beq.n	401bb6 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401bc0:	4a06      	ldr	r2, [pc, #24]	; (401bdc <_pmc_init_master_clock+0x48>)
  401bc2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401bc4:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401bc8:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401bcc:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401bce:	4b03      	ldr	r3, [pc, #12]	; (401bdc <_pmc_init_master_clock+0x48>)
  401bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401bd2:	f013 0f08 	tst.w	r3, #8
  401bd6:	d0fa      	beq.n	401bce <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401bd8:	4770      	bx	lr
  401bda:	bf00      	nop
  401bdc:	400e0600 	.word	0x400e0600

00401be0 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401be0:	b508      	push	{r3, lr}
	_pmc_init_sources();
  401be2:	4b02      	ldr	r3, [pc, #8]	; (401bec <_pmc_init+0xc>)
  401be4:	4798      	blx	r3
	_pmc_init_master_clock();
  401be6:	4b02      	ldr	r3, [pc, #8]	; (401bf0 <_pmc_init+0x10>)
  401be8:	4798      	blx	r3
  401bea:	bd08      	pop	{r3, pc}
  401bec:	00401b45 	.word	0x00401b45
  401bf0:	00401b95 	.word	0x00401b95

00401bf4 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401bf4:	2300      	movs	r3, #0
  401bf6:	2b01      	cmp	r3, #1
  401bf8:	d80f      	bhi.n	401c1a <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  401bfa:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  401bfe:	008a      	lsls	r2, r1, #2
  401c00:	4907      	ldr	r1, [pc, #28]	; (401c20 <_pwm_get_cfg+0x2c>)
  401c02:	588a      	ldr	r2, [r1, r2]
  401c04:	4282      	cmp	r2, r0
  401c06:	d002      	beq.n	401c0e <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401c08:	3301      	adds	r3, #1
  401c0a:	b2db      	uxtb	r3, r3
  401c0c:	e7f3      	b.n	401bf6 <_pwm_get_cfg+0x2>
			return (_pwms + i);
  401c0e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  401c12:	009a      	lsls	r2, r3, #2
  401c14:	4608      	mov	r0, r1
  401c16:	4410      	add	r0, r2
  401c18:	4770      	bx	lr
		}
	}

	return NULL;
  401c1a:	2000      	movs	r0, #0
}
  401c1c:	4770      	bx	lr
  401c1e:	bf00      	nop
  401c20:	00405aec 	.word	0x00405aec

00401c24 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  401c24:	4b06      	ldr	r3, [pc, #24]	; (401c40 <_pwm_init_irq_param+0x1c>)
  401c26:	4298      	cmp	r0, r3
  401c28:	d003      	beq.n	401c32 <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  401c2a:	4b06      	ldr	r3, [pc, #24]	; (401c44 <_pwm_init_irq_param+0x20>)
  401c2c:	4298      	cmp	r0, r3
  401c2e:	d003      	beq.n	401c38 <_pwm_init_irq_param+0x14>
  401c30:	4770      	bx	lr
		_pwm0_dev = dev;
  401c32:	4b05      	ldr	r3, [pc, #20]	; (401c48 <_pwm_init_irq_param+0x24>)
  401c34:	6019      	str	r1, [r3, #0]
  401c36:	e7f8      	b.n	401c2a <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  401c38:	4b03      	ldr	r3, [pc, #12]	; (401c48 <_pwm_init_irq_param+0x24>)
  401c3a:	6059      	str	r1, [r3, #4]
	}
}
  401c3c:	e7f8      	b.n	401c30 <_pwm_init_irq_param+0xc>
  401c3e:	bf00      	nop
  401c40:	40020000 	.word	0x40020000
  401c44:	4005c000 	.word	0x4005c000
  401c48:	20400374 	.word	0x20400374

00401c4c <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  401c4c:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  401c4e:	6903      	ldr	r3, [r0, #16]
	return ((Pwm *)hw)->PWM_ISR1;
  401c50:	69db      	ldr	r3, [r3, #28]
  401c52:	b113      	cbz	r3, 401c5a <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  401c54:	6803      	ldr	r3, [r0, #0]
  401c56:	b103      	cbz	r3, 401c5a <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  401c58:	4798      	blx	r3
  401c5a:	bd08      	pop	{r3, pc}

00401c5c <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  401c5c:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  401c5e:	4b02      	ldr	r3, [pc, #8]	; (401c68 <PWM0_Handler+0xc>)
  401c60:	6818      	ldr	r0, [r3, #0]
  401c62:	4b02      	ldr	r3, [pc, #8]	; (401c6c <PWM0_Handler+0x10>)
  401c64:	4798      	blx	r3
  401c66:	bd08      	pop	{r3, pc}
  401c68:	20400374 	.word	0x20400374
  401c6c:	00401c4d 	.word	0x00401c4d

00401c70 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  401c70:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  401c72:	4b02      	ldr	r3, [pc, #8]	; (401c7c <PWM1_Handler+0xc>)
  401c74:	6858      	ldr	r0, [r3, #4]
  401c76:	4b02      	ldr	r3, [pc, #8]	; (401c80 <PWM1_Handler+0x10>)
  401c78:	4798      	blx	r3
  401c7a:	bd08      	pop	{r3, pc}
  401c7c:	20400374 	.word	0x20400374
  401c80:	00401c4d 	.word	0x00401c4d

00401c84 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  401c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401c86:	4606      	mov	r6, r0
	ASSERT(hw);
  401c88:	460c      	mov	r4, r1
  401c8a:	1c08      	adds	r0, r1, #0
  401c8c:	bf18      	it	ne
  401c8e:	2001      	movne	r0, #1
  401c90:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  401c94:	4944      	ldr	r1, [pc, #272]	; (401da8 <_pwm_init+0x124>)
  401c96:	4b45      	ldr	r3, [pc, #276]	; (401dac <_pwm_init+0x128>)
  401c98:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  401c9a:	4620      	mov	r0, r4
  401c9c:	4b44      	ldr	r3, [pc, #272]	; (401db0 <_pwm_init+0x12c>)
  401c9e:	4798      	blx	r3
  401ca0:	4605      	mov	r5, r0

	device->hw = hw;
  401ca2:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  401ca4:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  401ca6:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  401ca8:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  401caa:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  401cac:	6903      	ldr	r3, [r0, #16]
  401cae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  401cb2:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  401cb4:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  401cb6:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  401cb8:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  401cba:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  401cbc:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  401cc0:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  401cc2:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  401cc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  401cc6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  401cca:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  401ccc:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  401cd0:	2300      	movs	r3, #0
  401cd2:	e019      	b.n	401d08 <_pwm_init+0x84>
		ch = cfg->ch + i;
  401cd4:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  401cd6:	0118      	lsls	r0, r3, #4
  401cd8:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  401cdc:	5c3a      	ldrb	r2, [r7, r0]
  401cde:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  401ce2:	3210      	adds	r2, #16
  401ce4:	0152      	lsls	r2, r2, #5
  401ce6:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  401ce8:	5c3a      	ldrb	r2, [r7, r0]
  401cea:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  401cee:	3210      	adds	r2, #16
  401cf0:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401cf4:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  401cf6:	5c3a      	ldrb	r2, [r7, r0]
  401cf8:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  401cfc:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401d00:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  401d04:	3301      	adds	r3, #1
  401d06:	b25b      	sxtb	r3, r3
  401d08:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401d0a:	4293      	cmp	r3, r2
  401d0c:	d3e2      	bcc.n	401cd4 <_pwm_init+0x50>
  401d0e:	2300      	movs	r3, #0
  401d10:	e014      	b.n	401d3c <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  401d12:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  401d14:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  401d18:	0082      	lsls	r2, r0, #2
  401d1a:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  401d1e:	5c88      	ldrb	r0, [r1, r2]
  401d20:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  401d24:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  401d28:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  401d2c:	5c8a      	ldrb	r2, [r1, r2]
  401d2e:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  401d32:	3213      	adds	r2, #19
  401d34:	0112      	lsls	r2, r2, #4
  401d36:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  401d38:	3301      	adds	r3, #1
  401d3a:	b25b      	sxtb	r3, r3
  401d3c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  401d3e:	4293      	cmp	r3, r2
  401d40:	d3e7      	bcc.n	401d12 <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  401d42:	4631      	mov	r1, r6
  401d44:	4620      	mov	r0, r4
  401d46:	4b1b      	ldr	r3, [pc, #108]	; (401db4 <_pwm_init+0x130>)
  401d48:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  401d4a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401d4e:	2b00      	cmp	r3, #0
  401d50:	db0d      	blt.n	401d6e <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401d52:	095a      	lsrs	r2, r3, #5
  401d54:	f003 031f 	and.w	r3, r3, #31
  401d58:	2101      	movs	r1, #1
  401d5a:	fa01 f303 	lsl.w	r3, r1, r3
  401d5e:	3220      	adds	r2, #32
  401d60:	4915      	ldr	r1, [pc, #84]	; (401db8 <_pwm_init+0x134>)
  401d62:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401d66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401d6a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  401d6e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401d72:	2b00      	cmp	r3, #0
  401d74:	db09      	blt.n	401d8a <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401d76:	095a      	lsrs	r2, r3, #5
  401d78:	f003 031f 	and.w	r3, r3, #31
  401d7c:	2101      	movs	r1, #1
  401d7e:	fa01 f303 	lsl.w	r3, r1, r3
  401d82:	3260      	adds	r2, #96	; 0x60
  401d84:	490c      	ldr	r1, [pc, #48]	; (401db8 <_pwm_init+0x134>)
  401d86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  401d8a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401d8e:	2b00      	cmp	r3, #0
  401d90:	db08      	blt.n	401da4 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401d92:	0959      	lsrs	r1, r3, #5
  401d94:	f003 031f 	and.w	r3, r3, #31
  401d98:	2201      	movs	r2, #1
  401d9a:	fa02 f303 	lsl.w	r3, r2, r3
  401d9e:	4a06      	ldr	r2, [pc, #24]	; (401db8 <_pwm_init+0x134>)
  401da0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  401da4:	2000      	movs	r0, #0
  401da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401da8:	00405b94 	.word	0x00405b94
  401dac:	004013b9 	.word	0x004013b9
  401db0:	00401bf5 	.word	0x00401bf5
  401db4:	00401c25 	.word	0x00401c25
  401db8:	e000e100 	.word	0xe000e100

00401dbc <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  401dbc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  401dbe:	4604      	mov	r4, r0
  401dc0:	f240 12b5 	movw	r2, #437	; 0x1b5
  401dc4:	490b      	ldr	r1, [pc, #44]	; (401df4 <_pwm_enable+0x38>)
  401dc6:	3000      	adds	r0, #0
  401dc8:	bf18      	it	ne
  401dca:	2001      	movne	r0, #1
  401dcc:	4b0a      	ldr	r3, [pc, #40]	; (401df8 <_pwm_enable+0x3c>)
  401dce:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  401dd0:	6920      	ldr	r0, [r4, #16]
  401dd2:	4b0a      	ldr	r3, [pc, #40]	; (401dfc <_pwm_enable+0x40>)
  401dd4:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401dd6:	2300      	movs	r3, #0
  401dd8:	e008      	b.n	401dec <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  401dda:	6921      	ldr	r1, [r4, #16]
  401ddc:	6b05      	ldr	r5, [r0, #48]	; 0x30
  401dde:	011a      	lsls	r2, r3, #4
  401de0:	5cad      	ldrb	r5, [r5, r2]
  401de2:	2201      	movs	r2, #1
  401de4:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  401de6:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  401de8:	3301      	adds	r3, #1
  401dea:	b25b      	sxtb	r3, r3
  401dec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401dee:	4293      	cmp	r3, r2
  401df0:	d3f3      	bcc.n	401dda <_pwm_enable+0x1e>
	}
}
  401df2:	bd38      	pop	{r3, r4, r5, pc}
  401df4:	00405b94 	.word	0x00405b94
  401df8:	004013b9 	.word	0x004013b9
  401dfc:	00401bf5 	.word	0x00401bf5

00401e00 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  401e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e02:	460d      	mov	r5, r1
  401e04:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  401e06:	4604      	mov	r4, r0
  401e08:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  401e0c:	4911      	ldr	r1, [pc, #68]	; (401e54 <_pwm_set_param+0x54>)
  401e0e:	2800      	cmp	r0, #0
  401e10:	bf18      	it	ne
  401e12:	42ae      	cmpne	r6, r5
  401e14:	bf34      	ite	cc
  401e16:	2001      	movcc	r0, #1
  401e18:	2000      	movcs	r0, #0
  401e1a:	4b0f      	ldr	r3, [pc, #60]	; (401e58 <_pwm_set_param+0x58>)
  401e1c:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  401e1e:	6920      	ldr	r0, [r4, #16]
  401e20:	4b0e      	ldr	r3, [pc, #56]	; (401e5c <_pwm_set_param+0x5c>)
  401e22:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401e24:	2300      	movs	r3, #0
  401e26:	e010      	b.n	401e4a <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  401e28:	6922      	ldr	r2, [r4, #16]
  401e2a:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401e2c:	0119      	lsls	r1, r3, #4
  401e2e:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  401e30:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  401e34:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  401e38:	6922      	ldr	r2, [r4, #16]
  401e3a:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401e3c:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  401e3e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  401e42:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  401e46:	3301      	adds	r3, #1
  401e48:	b2db      	uxtb	r3, r3
  401e4a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401e4c:	4293      	cmp	r3, r2
  401e4e:	d3eb      	bcc.n	401e28 <_pwm_set_param+0x28>
	}
}
  401e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401e52:	bf00      	nop
  401e54:	00405b94 	.word	0x00405b94
  401e58:	004013b9 	.word	0x004013b9
  401e5c:	00401bf5 	.word	0x00401bf5

00401e60 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  401e60:	b510      	push	{r4, lr}
	ASSERT(device);
  401e62:	4604      	mov	r4, r0
  401e64:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401e68:	4907      	ldr	r1, [pc, #28]	; (401e88 <_pwm_is_enabled+0x28>)
  401e6a:	3000      	adds	r0, #0
  401e6c:	bf18      	it	ne
  401e6e:	2001      	movne	r0, #1
  401e70:	4b06      	ldr	r3, [pc, #24]	; (401e8c <_pwm_is_enabled+0x2c>)
  401e72:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  401e74:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  401e76:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  401e78:	f013 0f0f 	tst.w	r3, #15
  401e7c:	d001      	beq.n	401e82 <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  401e7e:	2001      	movs	r0, #1
	}
}
  401e80:	bd10      	pop	{r4, pc}
		return false;
  401e82:	2000      	movs	r0, #0
  401e84:	bd10      	pop	{r4, pc}
  401e86:	bf00      	nop
  401e88:	00405b94 	.word	0x00405b94
  401e8c:	004013b9 	.word	0x004013b9

00401e90 <_pwm_set_irq_state>:

	return hri_pwm_read_CDTY_reg(device->hw, cfg->ch[0].index);
}

void _pwm_set_irq_state(struct _pwm_device *const device, const enum _pwm_callback_type type, const bool disable)
{
  401e90:	b538      	push	{r3, r4, r5, lr}
  401e92:	460d      	mov	r5, r1
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device);
  401e94:	4604      	mov	r4, r0
  401e96:	f44f 7200 	mov.w	r2, #512	; 0x200
  401e9a:	4912      	ldr	r1, [pc, #72]	; (401ee4 <_pwm_set_irq_state+0x54>)
  401e9c:	3000      	adds	r0, #0
  401e9e:	bf18      	it	ne
  401ea0:	2001      	movne	r0, #1
  401ea2:	4b11      	ldr	r3, [pc, #68]	; (401ee8 <_pwm_set_irq_state+0x58>)
  401ea4:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  401ea6:	6920      	ldr	r0, [r4, #16]
  401ea8:	4b10      	ldr	r3, [pc, #64]	; (401eec <_pwm_set_irq_state+0x5c>)
  401eaa:	4798      	blx	r3

	if (PWM_DEVICE_PERIOD_CB == type) {
  401eac:	b18d      	cbz	r5, 401ed2 <_pwm_set_irq_state+0x42>
		for (i = 0; i < cfg->ch_num; i++) {
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
		}
	} else if (PWM_DEVICE_ERROR_CB == type) {
  401eae:	2d01      	cmp	r5, #1
  401eb0:	d011      	beq.n	401ed6 <_pwm_set_irq_state+0x46>
  401eb2:	bd38      	pop	{r3, r4, r5, pc}
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
  401eb4:	6921      	ldr	r1, [r4, #16]
  401eb6:	6b05      	ldr	r5, [r0, #48]	; 0x30
  401eb8:	0113      	lsls	r3, r2, #4
  401eba:	5ced      	ldrb	r5, [r5, r3]
  401ebc:	2301      	movs	r3, #1
  401ebe:	40ab      	lsls	r3, r5
	((Pwm *)hw)->PWM_IER1 = data;
  401ec0:	610b      	str	r3, [r1, #16]
	((Pwm *)hw)->PWM_IDR1 = ~data;
  401ec2:	43db      	mvns	r3, r3
  401ec4:	614b      	str	r3, [r1, #20]
		for (i = 0; i < cfg->ch_num; i++) {
  401ec6:	3201      	adds	r2, #1
  401ec8:	b2d2      	uxtb	r2, r2
  401eca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  401ecc:	429a      	cmp	r2, r3
  401ece:	d3f1      	bcc.n	401eb4 <_pwm_set_irq_state+0x24>
  401ed0:	bd38      	pop	{r3, r4, r5, pc}
  401ed2:	2200      	movs	r2, #0
  401ed4:	e7f9      	b.n	401eca <_pwm_set_irq_state+0x3a>
		ASSERT(false);
  401ed6:	f240 2209 	movw	r2, #521	; 0x209
  401eda:	4902      	ldr	r1, [pc, #8]	; (401ee4 <_pwm_set_irq_state+0x54>)
  401edc:	2000      	movs	r0, #0
  401ede:	4b02      	ldr	r3, [pc, #8]	; (401ee8 <_pwm_set_irq_state+0x58>)
  401ee0:	4798      	blx	r3
	}
}
  401ee2:	e7e6      	b.n	401eb2 <_pwm_set_irq_state+0x22>
  401ee4:	00405b94 	.word	0x00405b94
  401ee8:	004013b9 	.word	0x004013b9
  401eec:	00401bf5 	.word	0x00401bf5

00401ef0 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  401ef0:	2000      	movs	r0, #0
  401ef2:	4770      	bx	lr

00401ef4 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  401ef4:	4b03      	ldr	r3, [pc, #12]	; (401f04 <_system_time_init+0x10>)
  401ef6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  401efa:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  401efc:	2205      	movs	r2, #5
  401efe:	601a      	str	r2, [r3, #0]
  401f00:	4770      	bx	lr
  401f02:	bf00      	nop
  401f04:	e000e010 	.word	0xe000e010

00401f08 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  401f08:	b508      	push	{r3, lr}
	_system_time_init(hw);
  401f0a:	4b01      	ldr	r3, [pc, #4]	; (401f10 <_delay_init+0x8>)
  401f0c:	4798      	blx	r3
  401f0e:	bd08      	pop	{r3, pc}
  401f10:	00401ef5 	.word	0x00401ef5

00401f14 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  401f14:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  401f16:	e00d      	b.n	401f34 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  401f18:	4b0d      	ldr	r3, [pc, #52]	; (401f50 <_delay_cycles+0x3c>)
  401f1a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401f1e:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401f20:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401f22:	4b0b      	ldr	r3, [pc, #44]	; (401f50 <_delay_cycles+0x3c>)
  401f24:	681b      	ldr	r3, [r3, #0]
  401f26:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401f2a:	d0fa      	beq.n	401f22 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  401f2c:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  401f30:	3101      	adds	r1, #1
	while (n--) {
  401f32:	4610      	mov	r0, r2
  401f34:	1e43      	subs	r3, r0, #1
  401f36:	b2da      	uxtb	r2, r3
  401f38:	2800      	cmp	r0, #0
  401f3a:	d1ed      	bne.n	401f18 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  401f3c:	4b04      	ldr	r3, [pc, #16]	; (401f50 <_delay_cycles+0x3c>)
  401f3e:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  401f40:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401f42:	4b03      	ldr	r3, [pc, #12]	; (401f50 <_delay_cycles+0x3c>)
  401f44:	681b      	ldr	r3, [r3, #0]
  401f46:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401f4a:	d0fa      	beq.n	401f42 <_delay_cycles+0x2e>
		;
}
  401f4c:	4770      	bx	lr
  401f4e:	bf00      	nop
  401f50:	e000e010 	.word	0xe000e010

00401f54 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401f54:	2300      	movs	r3, #0
  401f56:	2b01      	cmp	r3, #1
  401f58:	d815      	bhi.n	401f86 <get_cfg+0x32>
{
  401f5a:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401f5c:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401f60:	008a      	lsls	r2, r1, #2
  401f62:	490a      	ldr	r1, [pc, #40]	; (401f8c <get_cfg+0x38>)
  401f64:	588a      	ldr	r2, [r1, r2]
  401f66:	4282      	cmp	r2, r0
  401f68:	d007      	beq.n	401f7a <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401f6a:	3301      	adds	r3, #1
  401f6c:	b2db      	uxtb	r3, r3
  401f6e:	2b01      	cmp	r3, #1
  401f70:	d9f4      	bls.n	401f5c <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  401f72:	2000      	movs	r0, #0
}
  401f74:	f85d 4b04 	ldr.w	r4, [sp], #4
  401f78:	4770      	bx	lr
			return &(_tcs[i]);
  401f7a:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401f7e:	00a3      	lsls	r3, r4, #2
  401f80:	4608      	mov	r0, r1
  401f82:	4418      	add	r0, r3
  401f84:	e7f6      	b.n	401f74 <get_cfg+0x20>
	return NULL;
  401f86:	2000      	movs	r0, #0
  401f88:	4770      	bx	lr
  401f8a:	bf00      	nop
  401f8c:	20400000 	.word	0x20400000

00401f90 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  401f90:	4b06      	ldr	r3, [pc, #24]	; (401fac <_tc_init_irq_param+0x1c>)
  401f92:	4298      	cmp	r0, r3
  401f94:	d003      	beq.n	401f9e <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  401f96:	4b06      	ldr	r3, [pc, #24]	; (401fb0 <_tc_init_irq_param+0x20>)
  401f98:	4298      	cmp	r0, r3
  401f9a:	d003      	beq.n	401fa4 <_tc_init_irq_param+0x14>
  401f9c:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  401f9e:	4b05      	ldr	r3, [pc, #20]	; (401fb4 <_tc_init_irq_param+0x24>)
  401fa0:	6019      	str	r1, [r3, #0]
  401fa2:	e7f8      	b.n	401f96 <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  401fa4:	4b03      	ldr	r3, [pc, #12]	; (401fb4 <_tc_init_irq_param+0x24>)
  401fa6:	6059      	str	r1, [r3, #4]
	}
}
  401fa8:	e7f8      	b.n	401f9c <_tc_init_irq_param+0xc>
  401faa:	bf00      	nop
  401fac:	4000c000 	.word	0x4000c000
  401fb0:	40054000 	.word	0x40054000
  401fb4:	20400394 	.word	0x20400394

00401fb8 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  401fb8:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  401fba:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  401fbc:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  401fbe:	f013 0f10 	tst.w	r3, #16
  401fc2:	d100      	bne.n	401fc6 <tc_interrupt_handler+0xe>
  401fc4:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  401fc6:	6803      	ldr	r3, [r0, #0]
  401fc8:	4798      	blx	r3
	}
}
  401fca:	e7fb      	b.n	401fc4 <tc_interrupt_handler+0xc>

00401fcc <_timer_init>:
{
  401fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401fd0:	4606      	mov	r6, r0
  401fd2:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  401fd4:	4608      	mov	r0, r1
  401fd6:	4b2f      	ldr	r3, [pc, #188]	; (402094 <_timer_init+0xc8>)
  401fd8:	4798      	blx	r3
  401fda:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  401fdc:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  401fe0:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  401fe4:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  401fe6:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  401fea:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  401fec:	22c3      	movs	r2, #195	; 0xc3
  401fee:	492a      	ldr	r1, [pc, #168]	; (402098 <_timer_init+0xcc>)
  401ff0:	2001      	movs	r0, #1
  401ff2:	4b2a      	ldr	r3, [pc, #168]	; (40209c <_timer_init+0xd0>)
  401ff4:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401ff6:	f248 0307 	movw	r3, #32775	; 0x8007
  401ffa:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  401ffc:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  402000:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  402004:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  402008:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  40200a:	2300      	movs	r3, #0
  40200c:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  40200e:	f248 020f 	movw	r2, #32783	; 0x800f
  402012:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  402014:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  402018:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  40201c:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  402020:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  402022:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  402024:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  402026:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  40202a:	4631      	mov	r1, r6
  40202c:	4620      	mov	r0, r4
  40202e:	4b1c      	ldr	r3, [pc, #112]	; (4020a0 <_timer_init+0xd4>)
  402030:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  402032:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402036:	2b00      	cmp	r3, #0
  402038:	db0d      	blt.n	402056 <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40203a:	095a      	lsrs	r2, r3, #5
  40203c:	f003 031f 	and.w	r3, r3, #31
  402040:	2101      	movs	r1, #1
  402042:	fa01 f303 	lsl.w	r3, r1, r3
  402046:	3220      	adds	r2, #32
  402048:	4916      	ldr	r1, [pc, #88]	; (4020a4 <_timer_init+0xd8>)
  40204a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40204e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402052:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  402056:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40205a:	2b00      	cmp	r3, #0
  40205c:	db09      	blt.n	402072 <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40205e:	095a      	lsrs	r2, r3, #5
  402060:	f003 031f 	and.w	r3, r3, #31
  402064:	2101      	movs	r1, #1
  402066:	fa01 f303 	lsl.w	r3, r1, r3
  40206a:	3260      	adds	r2, #96	; 0x60
  40206c:	490d      	ldr	r1, [pc, #52]	; (4020a4 <_timer_init+0xd8>)
  40206e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  402072:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402076:	2b00      	cmp	r3, #0
  402078:	db08      	blt.n	40208c <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40207a:	0959      	lsrs	r1, r3, #5
  40207c:	f003 031f 	and.w	r3, r3, #31
  402080:	2201      	movs	r2, #1
  402082:	fa02 f303 	lsl.w	r3, r2, r3
  402086:	4a07      	ldr	r2, [pc, #28]	; (4020a4 <_timer_init+0xd8>)
  402088:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  40208c:	2000      	movs	r0, #0
  40208e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402092:	bf00      	nop
  402094:	00401f55 	.word	0x00401f55
  402098:	00405bac 	.word	0x00405bac
  40209c:	004013b9 	.word	0x004013b9
  4020a0:	00401f91 	.word	0x00401f91
  4020a4:	e000e100 	.word	0xe000e100

004020a8 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  4020a8:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  4020aa:	2305      	movs	r3, #5
  4020ac:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  4020ae:	68c2      	ldr	r2, [r0, #12]
  4020b0:	6413      	str	r3, [r2, #64]	; 0x40
  4020b2:	4770      	bx	lr

004020b4 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  4020b4:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  4020b6:	6a13      	ldr	r3, [r2, #32]
  4020b8:	f3c3 4300 	ubfx	r3, r3, #16, #1
  4020bc:	6e10      	ldr	r0, [r2, #96]	; 0x60
  4020be:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  4020c2:	4318      	orrs	r0, r3
  4020c4:	4770      	bx	lr

004020c6 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  4020c6:	2000      	movs	r0, #0
  4020c8:	4770      	bx	lr
	...

004020cc <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  4020cc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  4020ce:	4b02      	ldr	r3, [pc, #8]	; (4020d8 <TC0_Handler+0xc>)
  4020d0:	6818      	ldr	r0, [r3, #0]
  4020d2:	4b02      	ldr	r3, [pc, #8]	; (4020dc <TC0_Handler+0x10>)
  4020d4:	4798      	blx	r3
  4020d6:	bd08      	pop	{r3, pc}
  4020d8:	20400394 	.word	0x20400394
  4020dc:	00401fb9 	.word	0x00401fb9

004020e0 <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  4020e0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  4020e2:	4b02      	ldr	r3, [pc, #8]	; (4020ec <TC9_Handler+0xc>)
  4020e4:	6858      	ldr	r0, [r3, #4]
  4020e6:	4b02      	ldr	r3, [pc, #8]	; (4020f0 <TC9_Handler+0x10>)
  4020e8:	4798      	blx	r3
  4020ea:	bd08      	pop	{r3, pc}
  4020ec:	20400394 	.word	0x20400394
  4020f0:	00401fb9 	.word	0x00401fb9

004020f4 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  4020f4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4020f6:	4604      	mov	r4, r0
  4020f8:	f240 222b 	movw	r2, #555	; 0x22b
  4020fc:	4905      	ldr	r1, [pc, #20]	; (402114 <_usart_get_hardware_index+0x20>)
  4020fe:	3000      	adds	r0, #0
  402100:	bf18      	it	ne
  402102:	2001      	movne	r0, #1
  402104:	4b04      	ldr	r3, [pc, #16]	; (402118 <_usart_get_hardware_index+0x24>)
  402106:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  402108:	4804      	ldr	r0, [pc, #16]	; (40211c <_usart_get_hardware_index+0x28>)
  40210a:	4420      	add	r0, r4
}
  40210c:	f3c0 3087 	ubfx	r0, r0, #14, #8
  402110:	bd10      	pop	{r4, pc}
  402112:	bf00      	nop
  402114:	00405bcc 	.word	0x00405bcc
  402118:	004013b9 	.word	0x004013b9
  40211c:	bffdc000 	.word	0xbffdc000

00402120 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  402120:	b510      	push	{r4, lr}
	ASSERT(hw);
  402122:	4604      	mov	r4, r0
  402124:	f240 2287 	movw	r2, #647	; 0x287
  402128:	490e      	ldr	r1, [pc, #56]	; (402164 <_get_usart_index+0x44>)
  40212a:	3000      	adds	r0, #0
  40212c:	bf18      	it	ne
  40212e:	2001      	movne	r0, #1
  402130:	4b0d      	ldr	r3, [pc, #52]	; (402168 <_get_usart_index+0x48>)
  402132:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  402134:	4620      	mov	r0, r4
  402136:	4b0d      	ldr	r3, [pc, #52]	; (40216c <_get_usart_index+0x4c>)
  402138:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40213a:	2300      	movs	r3, #0
  40213c:	b143      	cbz	r3, 402150 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  40213e:	f240 2291 	movw	r2, #657	; 0x291
  402142:	4908      	ldr	r1, [pc, #32]	; (402164 <_get_usart_index+0x44>)
  402144:	2000      	movs	r0, #0
  402146:	4b08      	ldr	r3, [pc, #32]	; (402168 <_get_usart_index+0x48>)
  402148:	4798      	blx	r3
	return 0;
  40214a:	2300      	movs	r3, #0
}
  40214c:	4618      	mov	r0, r3
  40214e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  402150:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402154:	008a      	lsls	r2, r1, #2
  402156:	4906      	ldr	r1, [pc, #24]	; (402170 <_get_usart_index+0x50>)
  402158:	5c8a      	ldrb	r2, [r1, r2]
  40215a:	4290      	cmp	r0, r2
  40215c:	d0f6      	beq.n	40214c <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40215e:	3301      	adds	r3, #1
  402160:	b2db      	uxtb	r3, r3
  402162:	e7eb      	b.n	40213c <_get_usart_index+0x1c>
  402164:	00405bcc 	.word	0x00405bcc
  402168:	004013b9 	.word	0x004013b9
  40216c:	004020f5 	.word	0x004020f5
  402170:	00405bc0 	.word	0x00405bc0

00402174 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  402174:	b510      	push	{r4, lr}
	ASSERT(hw);
  402176:	4604      	mov	r4, r0
  402178:	f240 229e 	movw	r2, #670	; 0x29e
  40217c:	4911      	ldr	r1, [pc, #68]	; (4021c4 <_usart_init+0x50>)
  40217e:	3000      	adds	r0, #0
  402180:	bf18      	it	ne
  402182:	2001      	movne	r0, #1
  402184:	4b10      	ldr	r3, [pc, #64]	; (4021c8 <_usart_init+0x54>)
  402186:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  402188:	4620      	mov	r0, r4
  40218a:	4b10      	ldr	r3, [pc, #64]	; (4021cc <_usart_init+0x58>)
  40218c:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  40218e:	4b10      	ldr	r3, [pc, #64]	; (4021d0 <_usart_init+0x5c>)
  402190:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  402194:	2300      	movs	r3, #0
  402196:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  402198:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  40219a:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  40219c:	22ac      	movs	r2, #172	; 0xac
  40219e:	6022      	str	r2, [r4, #0]
  4021a0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4021a4:	6022      	str	r2, [r4, #0]
  4021a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4021aa:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  4021ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4021b0:	0081      	lsls	r1, r0, #2
  4021b2:	4a08      	ldr	r2, [pc, #32]	; (4021d4 <_usart_init+0x60>)
  4021b4:	440a      	add	r2, r1
  4021b6:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  4021b8:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  4021ba:	4a07      	ldr	r2, [pc, #28]	; (4021d8 <_usart_init+0x64>)
  4021bc:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  4021be:	4618      	mov	r0, r3
  4021c0:	bd10      	pop	{r4, pc}
  4021c2:	bf00      	nop
  4021c4:	00405bcc 	.word	0x00405bcc
  4021c8:	004013b9 	.word	0x004013b9
  4021cc:	00402121 	.word	0x00402121
  4021d0:	55534100 	.word	0x55534100
  4021d4:	00405bc0 	.word	0x00405bc0
  4021d8:	000100f4 	.word	0x000100f4

004021dc <_usart_sync_init>:
{
  4021dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4021de:	460c      	mov	r4, r1
	ASSERT(device);
  4021e0:	4e09      	ldr	r6, [pc, #36]	; (402208 <_usart_sync_init+0x2c>)
  4021e2:	4607      	mov	r7, r0
  4021e4:	22bd      	movs	r2, #189	; 0xbd
  4021e6:	4631      	mov	r1, r6
  4021e8:	3000      	adds	r0, #0
  4021ea:	bf18      	it	ne
  4021ec:	2001      	movne	r0, #1
  4021ee:	4d07      	ldr	r5, [pc, #28]	; (40220c <_usart_sync_init+0x30>)
  4021f0:	47a8      	blx	r5
	ASSERT(hw);
  4021f2:	22be      	movs	r2, #190	; 0xbe
  4021f4:	4631      	mov	r1, r6
  4021f6:	1c20      	adds	r0, r4, #0
  4021f8:	bf18      	it	ne
  4021fa:	2001      	movne	r0, #1
  4021fc:	47a8      	blx	r5
	device->hw = hw;
  4021fe:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  402200:	4620      	mov	r0, r4
  402202:	4b03      	ldr	r3, [pc, #12]	; (402210 <_usart_sync_init+0x34>)
  402204:	4798      	blx	r3
}
  402206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402208:	00405bcc 	.word	0x00405bcc
  40220c:	004013b9 	.word	0x004013b9
  402210:	00402175 	.word	0x00402175

00402214 <_usart_sync_enable>:
{
  402214:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  402216:	4e0a      	ldr	r6, [pc, #40]	; (402240 <_usart_sync_enable+0x2c>)
  402218:	4604      	mov	r4, r0
  40221a:	f240 1205 	movw	r2, #261	; 0x105
  40221e:	4631      	mov	r1, r6
  402220:	3000      	adds	r0, #0
  402222:	bf18      	it	ne
  402224:	2001      	movne	r0, #1
  402226:	4d07      	ldr	r5, [pc, #28]	; (402244 <_usart_sync_enable+0x30>)
  402228:	47a8      	blx	r5
	_usart_enable(device->hw);
  40222a:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  40222c:	f240 22c7 	movw	r2, #711	; 0x2c7
  402230:	4631      	mov	r1, r6
  402232:	1c20      	adds	r0, r4, #0
  402234:	bf18      	it	ne
  402236:	2001      	movne	r0, #1
  402238:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  40223a:	2350      	movs	r3, #80	; 0x50
  40223c:	6023      	str	r3, [r4, #0]
  40223e:	bd70      	pop	{r4, r5, r6, pc}
  402240:	00405bcc 	.word	0x00405bcc
  402244:	004013b9 	.word	0x004013b9

00402248 <_usart_sync_write_byte>:
{
  402248:	b538      	push	{r3, r4, r5, lr}
  40224a:	460c      	mov	r4, r1
	ASSERT(device);
  40224c:	4605      	mov	r5, r0
  40224e:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  402252:	4904      	ldr	r1, [pc, #16]	; (402264 <_usart_sync_write_byte+0x1c>)
  402254:	3000      	adds	r0, #0
  402256:	bf18      	it	ne
  402258:	2001      	movne	r0, #1
  40225a:	4b03      	ldr	r3, [pc, #12]	; (402268 <_usart_sync_write_byte+0x20>)
  40225c:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  40225e:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  402260:	61dc      	str	r4, [r3, #28]
  402262:	bd38      	pop	{r3, r4, r5, pc}
  402264:	00405bcc 	.word	0x00405bcc
  402268:	004013b9 	.word	0x004013b9

0040226c <_usart_sync_read_byte>:
{
  40226c:	b510      	push	{r4, lr}
	ASSERT(device);
  40226e:	4604      	mov	r4, r0
  402270:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  402274:	4904      	ldr	r1, [pc, #16]	; (402288 <_usart_sync_read_byte+0x1c>)
  402276:	3000      	adds	r0, #0
  402278:	bf18      	it	ne
  40227a:	2001      	movne	r0, #1
  40227c:	4b03      	ldr	r3, [pc, #12]	; (40228c <_usart_sync_read_byte+0x20>)
  40227e:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  402280:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  402282:	6998      	ldr	r0, [r3, #24]
}
  402284:	b2c0      	uxtb	r0, r0
  402286:	bd10      	pop	{r4, pc}
  402288:	00405bcc 	.word	0x00405bcc
  40228c:	004013b9 	.word	0x004013b9

00402290 <_usart_sync_is_ready_to_send>:
{
  402290:	b510      	push	{r4, lr}
	ASSERT(device);
  402292:	4604      	mov	r4, r0
  402294:	f240 12c3 	movw	r2, #451	; 0x1c3
  402298:	4905      	ldr	r1, [pc, #20]	; (4022b0 <_usart_sync_is_ready_to_send+0x20>)
  40229a:	3000      	adds	r0, #0
  40229c:	bf18      	it	ne
  40229e:	2001      	movne	r0, #1
  4022a0:	4b04      	ldr	r3, [pc, #16]	; (4022b4 <_usart_sync_is_ready_to_send+0x24>)
  4022a2:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  4022a4:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  4022a6:	6958      	ldr	r0, [r3, #20]
}
  4022a8:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4022ac:	bd10      	pop	{r4, pc}
  4022ae:	bf00      	nop
  4022b0:	00405bcc 	.word	0x00405bcc
  4022b4:	004013b9 	.word	0x004013b9

004022b8 <_usart_sync_is_transmit_done>:
{
  4022b8:	b510      	push	{r4, lr}
	ASSERT(device);
  4022ba:	4604      	mov	r4, r0
  4022bc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  4022c0:	4905      	ldr	r1, [pc, #20]	; (4022d8 <_usart_sync_is_transmit_done+0x20>)
  4022c2:	3000      	adds	r0, #0
  4022c4:	bf18      	it	ne
  4022c6:	2001      	movne	r0, #1
  4022c8:	4b04      	ldr	r3, [pc, #16]	; (4022dc <_usart_sync_is_transmit_done+0x24>)
  4022ca:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  4022cc:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  4022ce:	6958      	ldr	r0, [r3, #20]
}
  4022d0:	f3c0 2040 	ubfx	r0, r0, #9, #1
  4022d4:	bd10      	pop	{r4, pc}
  4022d6:	bf00      	nop
  4022d8:	00405bcc 	.word	0x00405bcc
  4022dc:	004013b9 	.word	0x004013b9

004022e0 <_usart_sync_is_byte_received>:
{
  4022e0:	b510      	push	{r4, lr}
	ASSERT(device);
  4022e2:	4604      	mov	r4, r0
  4022e4:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4022e8:	4905      	ldr	r1, [pc, #20]	; (402300 <_usart_sync_is_byte_received+0x20>)
  4022ea:	3000      	adds	r0, #0
  4022ec:	bf18      	it	ne
  4022ee:	2001      	movne	r0, #1
  4022f0:	4b04      	ldr	r3, [pc, #16]	; (402304 <_usart_sync_is_byte_received+0x24>)
  4022f2:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  4022f4:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  4022f6:	6958      	ldr	r0, [r3, #20]
  4022f8:	f000 0001 	and.w	r0, r0, #1
}
  4022fc:	bd10      	pop	{r4, pc}
  4022fe:	bf00      	nop
  402300:	00405bcc 	.word	0x00405bcc
  402304:	004013b9 	.word	0x004013b9

00402308 <_usart_get_usart_sync>:
}
  402308:	2000      	movs	r0, #0
  40230a:	4770      	bx	lr

0040230c <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  40230c:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  40230e:	2300      	movs	r3, #0
  402310:	e004      	b.n	40231c <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  402312:	0199      	lsls	r1, r3, #6
  402314:	4a16      	ldr	r2, [pc, #88]	; (402370 <_dma_init+0x64>)
  402316:	5852      	ldr	r2, [r2, r1]
  402318:	3301      	adds	r3, #1
  40231a:	b2db      	uxtb	r3, r3
  40231c:	2b17      	cmp	r3, #23
  40231e:	d9f8      	bls.n	402312 <_dma_init+0x6>
  402320:	2300      	movs	r3, #0
  402322:	e014      	b.n	40234e <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  402324:	4c13      	ldr	r4, [pc, #76]	; (402374 <_dma_init+0x68>)
  402326:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  40232a:	2100      	movs	r1, #0
  40232c:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  40232e:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  402330:	1c98      	adds	r0, r3, #2
  402332:	0180      	lsls	r0, r0, #6
  402334:	1825      	adds	r5, r4, r0
  402336:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  402338:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  40233a:	490f      	ldr	r1, [pc, #60]	; (402378 <_dma_init+0x6c>)
  40233c:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  402340:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  402342:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  402346:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  402348:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  40234a:	3301      	adds	r3, #1
  40234c:	b2db      	uxtb	r3, r3
  40234e:	2b17      	cmp	r3, #23
  402350:	d9e8      	bls.n	402324 <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402352:	4b0a      	ldr	r3, [pc, #40]	; (40237c <_dma_init+0x70>)
  402354:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40235c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402360:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402364:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402368:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  40236a:	2000      	movs	r0, #0
  40236c:	bc30      	pop	{r4, r5}
  40236e:	4770      	bx	lr
  402370:	4007805c 	.word	0x4007805c
  402374:	40078000 	.word	0x40078000
  402378:	00405be8 	.word	0x00405be8
  40237c:	e000e100 	.word	0xe000e100

00402380 <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  402380:	0180      	lsls	r0, r0, #6
  402382:	4b02      	ldr	r3, [pc, #8]	; (40238c <_dma_set_destination_address+0xc>)
  402384:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  402386:	2000      	movs	r0, #0
  402388:	4770      	bx	lr
  40238a:	bf00      	nop
  40238c:	40078064 	.word	0x40078064

00402390 <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  402390:	0180      	lsls	r0, r0, #6
  402392:	4b02      	ldr	r3, [pc, #8]	; (40239c <_dma_set_source_address+0xc>)
  402394:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  402396:	2000      	movs	r0, #0
  402398:	4770      	bx	lr
  40239a:	bf00      	nop
  40239c:	40078060 	.word	0x40078060

004023a0 <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  4023a0:	0180      	lsls	r0, r0, #6
  4023a2:	4a04      	ldr	r2, [pc, #16]	; (4023b4 <_dma_set_data_amount+0x14>)
  4023a4:	4402      	add	r2, r0
  4023a6:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  4023a8:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  4023ac:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  4023ae:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  4023b0:	2000      	movs	r0, #0
  4023b2:	4770      	bx	lr
  4023b4:	40078000 	.word	0x40078000

004023b8 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  4023b8:	2301      	movs	r3, #1
  4023ba:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  4023be:	4b03      	ldr	r3, [pc, #12]	; (4023cc <_dma_enable_transaction+0x14>)
  4023c0:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  4023c2:	b101      	cbz	r1, 4023c6 <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  4023c4:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  4023c6:	2000      	movs	r0, #0
  4023c8:	4770      	bx	lr
  4023ca:	bf00      	nop
  4023cc:	40078000 	.word	0x40078000

004023d0 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  4023d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4023d4:	008a      	lsls	r2, r1, #2
  4023d6:	4b02      	ldr	r3, [pc, #8]	; (4023e0 <_dma_get_channel_resource+0x10>)
  4023d8:	4413      	add	r3, r2
  4023da:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  4023dc:	2000      	movs	r0, #0
  4023de:	4770      	bx	lr
  4023e0:	2040039c 	.word	0x2040039c

004023e4 <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  4023e4:	b19a      	cbz	r2, 40240e <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  4023e6:	b951      	cbnz	r1, 4023fe <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  4023e8:	0182      	lsls	r2, r0, #6
  4023ea:	4b13      	ldr	r3, [pc, #76]	; (402438 <_dma_set_irq_state+0x54>)
  4023ec:	4413      	add	r3, r2
  4023ee:	2201      	movs	r2, #1
  4023f0:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  4023f2:	2301      	movs	r3, #1
  4023f4:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  4023f8:	4b0f      	ldr	r3, [pc, #60]	; (402438 <_dma_set_irq_state+0x54>)
  4023fa:	60d8      	str	r0, [r3, #12]
  4023fc:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4023fe:	2901      	cmp	r1, #1
  402400:	d1f7      	bne.n	4023f2 <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  402402:	0182      	lsls	r2, r0, #6
  402404:	4b0c      	ldr	r3, [pc, #48]	; (402438 <_dma_set_irq_state+0x54>)
  402406:	4413      	add	r3, r2
  402408:	2270      	movs	r2, #112	; 0x70
  40240a:	651a      	str	r2, [r3, #80]	; 0x50
  40240c:	e7f1      	b.n	4023f2 <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  40240e:	b951      	cbnz	r1, 402426 <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  402410:	0182      	lsls	r2, r0, #6
  402412:	4b09      	ldr	r3, [pc, #36]	; (402438 <_dma_set_irq_state+0x54>)
  402414:	4413      	add	r3, r2
  402416:	2201      	movs	r2, #1
  402418:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  40241a:	2301      	movs	r3, #1
  40241c:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  402420:	4b05      	ldr	r3, [pc, #20]	; (402438 <_dma_set_irq_state+0x54>)
  402422:	6118      	str	r0, [r3, #16]
  402424:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  402426:	2901      	cmp	r1, #1
  402428:	d1f7      	bne.n	40241a <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  40242a:	0182      	lsls	r2, r0, #6
  40242c:	4b02      	ldr	r3, [pc, #8]	; (402438 <_dma_set_irq_state+0x54>)
  40242e:	4413      	add	r3, r2
  402430:	2270      	movs	r2, #112	; 0x70
  402432:	655a      	str	r2, [r3, #84]	; 0x54
  402434:	e7f1      	b.n	40241a <_dma_set_irq_state+0x36>
  402436:	bf00      	nop
  402438:	40078000 	.word	0x40078000

0040243c <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  40243c:	4b17      	ldr	r3, [pc, #92]	; (40249c <XDMAC_Handler+0x60>)
  40243e:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  402440:	2300      	movs	r3, #0
  402442:	2b17      	cmp	r3, #23
  402444:	d81b      	bhi.n	40247e <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  402446:	fa21 f203 	lsr.w	r2, r1, r3
  40244a:	f012 0f01 	tst.w	r2, #1
  40244e:	d102      	bne.n	402456 <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  402450:	3301      	adds	r3, #1
  402452:	b2db      	uxtb	r3, r3
  402454:	e7f5      	b.n	402442 <XDMAC_Handler+0x6>
			channel = i;
  402456:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  402458:	2b00      	cmp	r3, #0
  40245a:	db1d      	blt.n	402498 <XDMAC_Handler+0x5c>
{
  40245c:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  40245e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  402462:	0090      	lsls	r0, r2, #2
  402464:	4a0e      	ldr	r2, [pc, #56]	; (4024a0 <XDMAC_Handler+0x64>)
  402466:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  402468:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  40246a:	0189      	lsls	r1, r1, #6
  40246c:	4a0d      	ldr	r2, [pc, #52]	; (4024a4 <XDMAC_Handler+0x68>)
  40246e:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  402470:	f012 0f70 	tst.w	r2, #112	; 0x70
  402474:	d106      	bne.n	402484 <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  402476:	f012 0f01 	tst.w	r2, #1
  40247a:	d106      	bne.n	40248a <XDMAC_Handler+0x4e>
  40247c:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  40247e:	f04f 33ff 	mov.w	r3, #4294967295
  402482:	e7e9      	b.n	402458 <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  402484:	6843      	ldr	r3, [r0, #4]
  402486:	4798      	blx	r3
  402488:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  40248a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  40248e:	00a3      	lsls	r3, r4, #2
  402490:	4a03      	ldr	r2, [pc, #12]	; (4024a0 <XDMAC_Handler+0x64>)
  402492:	58d3      	ldr	r3, [r2, r3]
  402494:	4798      	blx	r3
  402496:	e7f1      	b.n	40247c <XDMAC_Handler+0x40>
  402498:	4770      	bx	lr
  40249a:	bf00      	nop
  40249c:	40078000 	.word	0x40078000
  4024a0:	2040039c 	.word	0x2040039c
  4024a4:	4007805c 	.word	0x4007805c

004024a8 <main>:




int main(void)
{
  4024a8:	b580      	push	{r7, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  4024aa:	4b15      	ldr	r3, [pc, #84]	; (402500 <main+0x58>)
  4024ac:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	/* Additional User initialisation */
	dma_adc_init();
  4024ae:	4b15      	ldr	r3, [pc, #84]	; (402504 <main+0x5c>)
  4024b0:	4798      	blx	r3
	pwm_init_user();
  4024b2:	4b15      	ldr	r3, [pc, #84]	; (402508 <main+0x60>)
  4024b4:	4798      	blx	r3
	encoder_init();
  4024b6:	4b15      	ldr	r3, [pc, #84]	; (40250c <main+0x64>)
  4024b8:	4798      	blx	r3
	
	/* Enable all devices */
	pwm_enable_all();
  4024ba:	4b15      	ldr	r3, [pc, #84]	; (402510 <main+0x68>)
  4024bc:	4798      	blx	r3
	adc_enable_all();
  4024be:	4b15      	ldr	r3, [pc, #84]	; (402514 <main+0x6c>)
  4024c0:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  4024c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4024c6:	4b14      	ldr	r3, [pc, #80]	; (402518 <main+0x70>)
  4024c8:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);		//enables the DC-DC converter for the HV side
	
	timer_start(&ENCODER_A);
  4024ca:	4814      	ldr	r0, [pc, #80]	; (40251c <main+0x74>)
  4024cc:	4c14      	ldr	r4, [pc, #80]	; (402520 <main+0x78>)
  4024ce:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  4024d0:	4814      	ldr	r0, [pc, #80]	; (402524 <main+0x7c>)
  4024d2:	47a0      	blx	r4
  4024d4:	4d14      	ldr	r5, [pc, #80]	; (402528 <main+0x80>)
  4024d6:	f44f 7680 	mov.w	r6, #256	; 0x100
  4024da:	632e      	str	r6, [r5, #48]	; 0x30

	/* Replace with your application code */
	while (1) {
		
		gpio_set_pin_level(PIN_USER_LED,true);
		delay_ms(500);
  4024dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4024e0:	4c12      	ldr	r4, [pc, #72]	; (40252c <main+0x84>)
  4024e2:	47a0      	blx	r4
		
		dma_adc_0_enable_for_one_transaction();
  4024e4:	4b12      	ldr	r3, [pc, #72]	; (402530 <main+0x88>)
  4024e6:	4798      	blx	r3
		dma_adc_1_enable_for_one_transaction();
  4024e8:	4b12      	ldr	r3, [pc, #72]	; (402534 <main+0x8c>)
  4024ea:	4798      	blx	r3
		adc_async_start_conversion(&ADC_0);
  4024ec:	4812      	ldr	r0, [pc, #72]	; (402538 <main+0x90>)
  4024ee:	4f13      	ldr	r7, [pc, #76]	; (40253c <main+0x94>)
  4024f0:	47b8      	blx	r7
		adc_async_start_conversion(&ADC_1);
  4024f2:	4813      	ldr	r0, [pc, #76]	; (402540 <main+0x98>)
  4024f4:	47b8      	blx	r7
	((Pio *)hw)->PIO_CODR = mask;
  4024f6:	636e      	str	r6, [r5, #52]	; 0x34
		//printf("main - %i %i %i %i %i %i %i %i %i %i %i %i  \n", (int)afec_buf[0],(int)afec_buf[1],(int)afec_buf[2],(int)afec_buf[3],(int)afec_buf[4],(int)afec_buf[5],(int)afec_buf[6],(int)afec_buf[7],(int)afec_buf[8],(int)afec_buf[9],(int)afec_buf[10],(int)afec_buf[11]);
		//AFEC0_Handler

		gpio_set_pin_level(PIN_USER_LED,false);
		delay_ms(500);
  4024f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4024fc:	47a0      	blx	r4
  4024fe:	e7e9      	b.n	4024d4 <main+0x2c>
  402500:	004001d5 	.word	0x004001d5
  402504:	004003f1 	.word	0x004003f1
  402508:	00400535 	.word	0x00400535
  40250c:	004001e9 	.word	0x004001e9
  402510:	004005f1 	.word	0x004005f1
  402514:	004004dd 	.word	0x004004dd
  402518:	400e0e00 	.word	0x400e0e00
  40251c:	204005ac 	.word	0x204005ac
  402520:	00401239 	.word	0x00401239
  402524:	204004fc 	.word	0x204004fc
  402528:	400e1200 	.word	0x400e1200
  40252c:	00400e71 	.word	0x00400e71
  402530:	00400485 	.word	0x00400485
  402534:	004004b1 	.word	0x004004b1
  402538:	204005c8 	.word	0x204005c8
  40253c:	00400e19 	.word	0x00400e19
  402540:	204006a0 	.word	0x204006a0

00402544 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  402544:	b958      	cbnz	r0, 40255e <_read+0x1a>
{
  402546:	b508      	push	{r3, lr}
  402548:	460b      	mov	r3, r1
  40254a:	4611      	mov	r1, r2
  40254c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  40254e:	4b05      	ldr	r3, [pc, #20]	; (402564 <_read+0x20>)
  402550:	4798      	blx	r3
	if (n < 0) {
  402552:	2800      	cmp	r0, #0
  402554:	db00      	blt.n	402558 <_read+0x14>
		return -1;
	}

	return n;
}
  402556:	bd08      	pop	{r3, pc}
		return -1;
  402558:	f04f 30ff 	mov.w	r0, #4294967295
  40255c:	bd08      	pop	{r3, pc}
		return -1;
  40255e:	f04f 30ff 	mov.w	r0, #4294967295
  402562:	4770      	bx	lr
  402564:	004025bd 	.word	0x004025bd

00402568 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  402568:	3801      	subs	r0, #1
  40256a:	2802      	cmp	r0, #2
  40256c:	d80b      	bhi.n	402586 <_write+0x1e>
{
  40256e:	b508      	push	{r3, lr}
  402570:	460b      	mov	r3, r1
  402572:	4611      	mov	r1, r2
  402574:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  402576:	4b05      	ldr	r3, [pc, #20]	; (40258c <_write+0x24>)
  402578:	4798      	blx	r3
	if (n < 0) {
  40257a:	2800      	cmp	r0, #0
  40257c:	db00      	blt.n	402580 <_write+0x18>
		return -1;
	}

	return n;
}
  40257e:	bd08      	pop	{r3, pc}
		return -1;
  402580:	f04f 30ff 	mov.w	r0, #4294967295
  402584:	bd08      	pop	{r3, pc}
		return -1;
  402586:	f04f 30ff 	mov.w	r0, #4294967295
  40258a:	4770      	bx	lr
  40258c:	004025e1 	.word	0x004025e1

00402590 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  402590:	b570      	push	{r4, r5, r6, lr}
  402592:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  402594:	4d06      	ldr	r5, [pc, #24]	; (4025b0 <stdio_io_init+0x20>)
  402596:	682b      	ldr	r3, [r5, #0]
  402598:	2100      	movs	r1, #0
  40259a:	6898      	ldr	r0, [r3, #8]
  40259c:	4c05      	ldr	r4, [pc, #20]	; (4025b4 <stdio_io_init+0x24>)
  40259e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4025a0:	682b      	ldr	r3, [r5, #0]
  4025a2:	2100      	movs	r1, #0
  4025a4:	6858      	ldr	r0, [r3, #4]
  4025a6:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  4025a8:	4b03      	ldr	r3, [pc, #12]	; (4025b8 <stdio_io_init+0x28>)
  4025aa:	601e      	str	r6, [r3, #0]
  4025ac:	bd70      	pop	{r4, r5, r6, pc}
  4025ae:	bf00      	nop
  4025b0:	20400048 	.word	0x20400048
  4025b4:	00403875 	.word	0x00403875
  4025b8:	204004bc 	.word	0x204004bc

004025bc <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  4025bc:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4025be:	4b06      	ldr	r3, [pc, #24]	; (4025d8 <stdio_io_read+0x1c>)
  4025c0:	681b      	ldr	r3, [r3, #0]
  4025c2:	b133      	cbz	r3, 4025d2 <stdio_io_read+0x16>
  4025c4:	460a      	mov	r2, r1
  4025c6:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  4025c8:	b292      	uxth	r2, r2
  4025ca:	4618      	mov	r0, r3
  4025cc:	4b03      	ldr	r3, [pc, #12]	; (4025dc <stdio_io_read+0x20>)
  4025ce:	4798      	blx	r3
  4025d0:	bd08      	pop	{r3, pc}
		return 0;
  4025d2:	2000      	movs	r0, #0
}
  4025d4:	bd08      	pop	{r3, pc}
  4025d6:	bf00      	nop
  4025d8:	204004bc 	.word	0x204004bc
  4025dc:	00401009 	.word	0x00401009

004025e0 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  4025e0:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4025e2:	4b06      	ldr	r3, [pc, #24]	; (4025fc <stdio_io_write+0x1c>)
  4025e4:	681b      	ldr	r3, [r3, #0]
  4025e6:	b133      	cbz	r3, 4025f6 <stdio_io_write+0x16>
  4025e8:	460a      	mov	r2, r1
  4025ea:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  4025ec:	b292      	uxth	r2, r2
  4025ee:	4618      	mov	r0, r3
  4025f0:	4b03      	ldr	r3, [pc, #12]	; (402600 <stdio_io_write+0x20>)
  4025f2:	4798      	blx	r3
  4025f4:	bd08      	pop	{r3, pc}
		return 0;
  4025f6:	2000      	movs	r0, #0
}
  4025f8:	bd08      	pop	{r3, pc}
  4025fa:	bf00      	nop
  4025fc:	204004bc 	.word	0x204004bc
  402600:	00400fd9 	.word	0x00400fd9

00402604 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  402604:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  402606:	4c04      	ldr	r4, [pc, #16]	; (402618 <stdio_redirect_init+0x14>)
  402608:	4620      	mov	r0, r4
  40260a:	4b04      	ldr	r3, [pc, #16]	; (40261c <stdio_redirect_init+0x18>)
  40260c:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  40260e:	4620      	mov	r0, r4
  402610:	4b03      	ldr	r3, [pc, #12]	; (402620 <stdio_redirect_init+0x1c>)
  402612:	4798      	blx	r3
  402614:	bd10      	pop	{r4, pc}
  402616:	bf00      	nop
  402618:	204005a0 	.word	0x204005a0
  40261c:	0040138d 	.word	0x0040138d
  402620:	00402591 	.word	0x00402591

00402624 <__aeabi_drsub>:
  402624:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402628:	e002      	b.n	402630 <__adddf3>
  40262a:	bf00      	nop

0040262c <__aeabi_dsub>:
  40262c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402630 <__adddf3>:
  402630:	b530      	push	{r4, r5, lr}
  402632:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402636:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40263a:	ea94 0f05 	teq	r4, r5
  40263e:	bf08      	it	eq
  402640:	ea90 0f02 	teqeq	r0, r2
  402644:	bf1f      	itttt	ne
  402646:	ea54 0c00 	orrsne.w	ip, r4, r0
  40264a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40264e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402652:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402656:	f000 80e2 	beq.w	40281e <__adddf3+0x1ee>
  40265a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40265e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402662:	bfb8      	it	lt
  402664:	426d      	neglt	r5, r5
  402666:	dd0c      	ble.n	402682 <__adddf3+0x52>
  402668:	442c      	add	r4, r5
  40266a:	ea80 0202 	eor.w	r2, r0, r2
  40266e:	ea81 0303 	eor.w	r3, r1, r3
  402672:	ea82 0000 	eor.w	r0, r2, r0
  402676:	ea83 0101 	eor.w	r1, r3, r1
  40267a:	ea80 0202 	eor.w	r2, r0, r2
  40267e:	ea81 0303 	eor.w	r3, r1, r3
  402682:	2d36      	cmp	r5, #54	; 0x36
  402684:	bf88      	it	hi
  402686:	bd30      	pophi	{r4, r5, pc}
  402688:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40268c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402690:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402694:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402698:	d002      	beq.n	4026a0 <__adddf3+0x70>
  40269a:	4240      	negs	r0, r0
  40269c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4026a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4026a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4026a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4026ac:	d002      	beq.n	4026b4 <__adddf3+0x84>
  4026ae:	4252      	negs	r2, r2
  4026b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4026b4:	ea94 0f05 	teq	r4, r5
  4026b8:	f000 80a7 	beq.w	40280a <__adddf3+0x1da>
  4026bc:	f1a4 0401 	sub.w	r4, r4, #1
  4026c0:	f1d5 0e20 	rsbs	lr, r5, #32
  4026c4:	db0d      	blt.n	4026e2 <__adddf3+0xb2>
  4026c6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4026ca:	fa22 f205 	lsr.w	r2, r2, r5
  4026ce:	1880      	adds	r0, r0, r2
  4026d0:	f141 0100 	adc.w	r1, r1, #0
  4026d4:	fa03 f20e 	lsl.w	r2, r3, lr
  4026d8:	1880      	adds	r0, r0, r2
  4026da:	fa43 f305 	asr.w	r3, r3, r5
  4026de:	4159      	adcs	r1, r3
  4026e0:	e00e      	b.n	402700 <__adddf3+0xd0>
  4026e2:	f1a5 0520 	sub.w	r5, r5, #32
  4026e6:	f10e 0e20 	add.w	lr, lr, #32
  4026ea:	2a01      	cmp	r2, #1
  4026ec:	fa03 fc0e 	lsl.w	ip, r3, lr
  4026f0:	bf28      	it	cs
  4026f2:	f04c 0c02 	orrcs.w	ip, ip, #2
  4026f6:	fa43 f305 	asr.w	r3, r3, r5
  4026fa:	18c0      	adds	r0, r0, r3
  4026fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402700:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402704:	d507      	bpl.n	402716 <__adddf3+0xe6>
  402706:	f04f 0e00 	mov.w	lr, #0
  40270a:	f1dc 0c00 	rsbs	ip, ip, #0
  40270e:	eb7e 0000 	sbcs.w	r0, lr, r0
  402712:	eb6e 0101 	sbc.w	r1, lr, r1
  402716:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40271a:	d31b      	bcc.n	402754 <__adddf3+0x124>
  40271c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402720:	d30c      	bcc.n	40273c <__adddf3+0x10c>
  402722:	0849      	lsrs	r1, r1, #1
  402724:	ea5f 0030 	movs.w	r0, r0, rrx
  402728:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40272c:	f104 0401 	add.w	r4, r4, #1
  402730:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402734:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402738:	f080 809a 	bcs.w	402870 <__adddf3+0x240>
  40273c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402740:	bf08      	it	eq
  402742:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402746:	f150 0000 	adcs.w	r0, r0, #0
  40274a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40274e:	ea41 0105 	orr.w	r1, r1, r5
  402752:	bd30      	pop	{r4, r5, pc}
  402754:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402758:	4140      	adcs	r0, r0
  40275a:	eb41 0101 	adc.w	r1, r1, r1
  40275e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402762:	f1a4 0401 	sub.w	r4, r4, #1
  402766:	d1e9      	bne.n	40273c <__adddf3+0x10c>
  402768:	f091 0f00 	teq	r1, #0
  40276c:	bf04      	itt	eq
  40276e:	4601      	moveq	r1, r0
  402770:	2000      	moveq	r0, #0
  402772:	fab1 f381 	clz	r3, r1
  402776:	bf08      	it	eq
  402778:	3320      	addeq	r3, #32
  40277a:	f1a3 030b 	sub.w	r3, r3, #11
  40277e:	f1b3 0220 	subs.w	r2, r3, #32
  402782:	da0c      	bge.n	40279e <__adddf3+0x16e>
  402784:	320c      	adds	r2, #12
  402786:	dd08      	ble.n	40279a <__adddf3+0x16a>
  402788:	f102 0c14 	add.w	ip, r2, #20
  40278c:	f1c2 020c 	rsb	r2, r2, #12
  402790:	fa01 f00c 	lsl.w	r0, r1, ip
  402794:	fa21 f102 	lsr.w	r1, r1, r2
  402798:	e00c      	b.n	4027b4 <__adddf3+0x184>
  40279a:	f102 0214 	add.w	r2, r2, #20
  40279e:	bfd8      	it	le
  4027a0:	f1c2 0c20 	rsble	ip, r2, #32
  4027a4:	fa01 f102 	lsl.w	r1, r1, r2
  4027a8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4027ac:	bfdc      	itt	le
  4027ae:	ea41 010c 	orrle.w	r1, r1, ip
  4027b2:	4090      	lslle	r0, r2
  4027b4:	1ae4      	subs	r4, r4, r3
  4027b6:	bfa2      	ittt	ge
  4027b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4027bc:	4329      	orrge	r1, r5
  4027be:	bd30      	popge	{r4, r5, pc}
  4027c0:	ea6f 0404 	mvn.w	r4, r4
  4027c4:	3c1f      	subs	r4, #31
  4027c6:	da1c      	bge.n	402802 <__adddf3+0x1d2>
  4027c8:	340c      	adds	r4, #12
  4027ca:	dc0e      	bgt.n	4027ea <__adddf3+0x1ba>
  4027cc:	f104 0414 	add.w	r4, r4, #20
  4027d0:	f1c4 0220 	rsb	r2, r4, #32
  4027d4:	fa20 f004 	lsr.w	r0, r0, r4
  4027d8:	fa01 f302 	lsl.w	r3, r1, r2
  4027dc:	ea40 0003 	orr.w	r0, r0, r3
  4027e0:	fa21 f304 	lsr.w	r3, r1, r4
  4027e4:	ea45 0103 	orr.w	r1, r5, r3
  4027e8:	bd30      	pop	{r4, r5, pc}
  4027ea:	f1c4 040c 	rsb	r4, r4, #12
  4027ee:	f1c4 0220 	rsb	r2, r4, #32
  4027f2:	fa20 f002 	lsr.w	r0, r0, r2
  4027f6:	fa01 f304 	lsl.w	r3, r1, r4
  4027fa:	ea40 0003 	orr.w	r0, r0, r3
  4027fe:	4629      	mov	r1, r5
  402800:	bd30      	pop	{r4, r5, pc}
  402802:	fa21 f004 	lsr.w	r0, r1, r4
  402806:	4629      	mov	r1, r5
  402808:	bd30      	pop	{r4, r5, pc}
  40280a:	f094 0f00 	teq	r4, #0
  40280e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402812:	bf06      	itte	eq
  402814:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402818:	3401      	addeq	r4, #1
  40281a:	3d01      	subne	r5, #1
  40281c:	e74e      	b.n	4026bc <__adddf3+0x8c>
  40281e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402822:	bf18      	it	ne
  402824:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402828:	d029      	beq.n	40287e <__adddf3+0x24e>
  40282a:	ea94 0f05 	teq	r4, r5
  40282e:	bf08      	it	eq
  402830:	ea90 0f02 	teqeq	r0, r2
  402834:	d005      	beq.n	402842 <__adddf3+0x212>
  402836:	ea54 0c00 	orrs.w	ip, r4, r0
  40283a:	bf04      	itt	eq
  40283c:	4619      	moveq	r1, r3
  40283e:	4610      	moveq	r0, r2
  402840:	bd30      	pop	{r4, r5, pc}
  402842:	ea91 0f03 	teq	r1, r3
  402846:	bf1e      	ittt	ne
  402848:	2100      	movne	r1, #0
  40284a:	2000      	movne	r0, #0
  40284c:	bd30      	popne	{r4, r5, pc}
  40284e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402852:	d105      	bne.n	402860 <__adddf3+0x230>
  402854:	0040      	lsls	r0, r0, #1
  402856:	4149      	adcs	r1, r1
  402858:	bf28      	it	cs
  40285a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40285e:	bd30      	pop	{r4, r5, pc}
  402860:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402864:	bf3c      	itt	cc
  402866:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40286a:	bd30      	popcc	{r4, r5, pc}
  40286c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402870:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402874:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402878:	f04f 0000 	mov.w	r0, #0
  40287c:	bd30      	pop	{r4, r5, pc}
  40287e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402882:	bf1a      	itte	ne
  402884:	4619      	movne	r1, r3
  402886:	4610      	movne	r0, r2
  402888:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40288c:	bf1c      	itt	ne
  40288e:	460b      	movne	r3, r1
  402890:	4602      	movne	r2, r0
  402892:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402896:	bf06      	itte	eq
  402898:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40289c:	ea91 0f03 	teqeq	r1, r3
  4028a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4028a4:	bd30      	pop	{r4, r5, pc}
  4028a6:	bf00      	nop

004028a8 <__aeabi_ui2d>:
  4028a8:	f090 0f00 	teq	r0, #0
  4028ac:	bf04      	itt	eq
  4028ae:	2100      	moveq	r1, #0
  4028b0:	4770      	bxeq	lr
  4028b2:	b530      	push	{r4, r5, lr}
  4028b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4028b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4028bc:	f04f 0500 	mov.w	r5, #0
  4028c0:	f04f 0100 	mov.w	r1, #0
  4028c4:	e750      	b.n	402768 <__adddf3+0x138>
  4028c6:	bf00      	nop

004028c8 <__aeabi_i2d>:
  4028c8:	f090 0f00 	teq	r0, #0
  4028cc:	bf04      	itt	eq
  4028ce:	2100      	moveq	r1, #0
  4028d0:	4770      	bxeq	lr
  4028d2:	b530      	push	{r4, r5, lr}
  4028d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4028d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4028dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4028e0:	bf48      	it	mi
  4028e2:	4240      	negmi	r0, r0
  4028e4:	f04f 0100 	mov.w	r1, #0
  4028e8:	e73e      	b.n	402768 <__adddf3+0x138>
  4028ea:	bf00      	nop

004028ec <__aeabi_f2d>:
  4028ec:	0042      	lsls	r2, r0, #1
  4028ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4028f2:	ea4f 0131 	mov.w	r1, r1, rrx
  4028f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4028fa:	bf1f      	itttt	ne
  4028fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402900:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402904:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402908:	4770      	bxne	lr
  40290a:	f092 0f00 	teq	r2, #0
  40290e:	bf14      	ite	ne
  402910:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402914:	4770      	bxeq	lr
  402916:	b530      	push	{r4, r5, lr}
  402918:	f44f 7460 	mov.w	r4, #896	; 0x380
  40291c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402920:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402924:	e720      	b.n	402768 <__adddf3+0x138>
  402926:	bf00      	nop

00402928 <__aeabi_ul2d>:
  402928:	ea50 0201 	orrs.w	r2, r0, r1
  40292c:	bf08      	it	eq
  40292e:	4770      	bxeq	lr
  402930:	b530      	push	{r4, r5, lr}
  402932:	f04f 0500 	mov.w	r5, #0
  402936:	e00a      	b.n	40294e <__aeabi_l2d+0x16>

00402938 <__aeabi_l2d>:
  402938:	ea50 0201 	orrs.w	r2, r0, r1
  40293c:	bf08      	it	eq
  40293e:	4770      	bxeq	lr
  402940:	b530      	push	{r4, r5, lr}
  402942:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402946:	d502      	bpl.n	40294e <__aeabi_l2d+0x16>
  402948:	4240      	negs	r0, r0
  40294a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40294e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402952:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402956:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40295a:	f43f aedc 	beq.w	402716 <__adddf3+0xe6>
  40295e:	f04f 0203 	mov.w	r2, #3
  402962:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402966:	bf18      	it	ne
  402968:	3203      	addne	r2, #3
  40296a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40296e:	bf18      	it	ne
  402970:	3203      	addne	r2, #3
  402972:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402976:	f1c2 0320 	rsb	r3, r2, #32
  40297a:	fa00 fc03 	lsl.w	ip, r0, r3
  40297e:	fa20 f002 	lsr.w	r0, r0, r2
  402982:	fa01 fe03 	lsl.w	lr, r1, r3
  402986:	ea40 000e 	orr.w	r0, r0, lr
  40298a:	fa21 f102 	lsr.w	r1, r1, r2
  40298e:	4414      	add	r4, r2
  402990:	e6c1      	b.n	402716 <__adddf3+0xe6>
  402992:	bf00      	nop

00402994 <__aeabi_dmul>:
  402994:	b570      	push	{r4, r5, r6, lr}
  402996:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40299a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40299e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4029a2:	bf1d      	ittte	ne
  4029a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4029a8:	ea94 0f0c 	teqne	r4, ip
  4029ac:	ea95 0f0c 	teqne	r5, ip
  4029b0:	f000 f8de 	bleq	402b70 <__aeabi_dmul+0x1dc>
  4029b4:	442c      	add	r4, r5
  4029b6:	ea81 0603 	eor.w	r6, r1, r3
  4029ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4029be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4029c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4029c6:	bf18      	it	ne
  4029c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4029cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4029d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4029d4:	d038      	beq.n	402a48 <__aeabi_dmul+0xb4>
  4029d6:	fba0 ce02 	umull	ip, lr, r0, r2
  4029da:	f04f 0500 	mov.w	r5, #0
  4029de:	fbe1 e502 	umlal	lr, r5, r1, r2
  4029e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4029e6:	fbe0 e503 	umlal	lr, r5, r0, r3
  4029ea:	f04f 0600 	mov.w	r6, #0
  4029ee:	fbe1 5603 	umlal	r5, r6, r1, r3
  4029f2:	f09c 0f00 	teq	ip, #0
  4029f6:	bf18      	it	ne
  4029f8:	f04e 0e01 	orrne.w	lr, lr, #1
  4029fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402a00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402a04:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402a08:	d204      	bcs.n	402a14 <__aeabi_dmul+0x80>
  402a0a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402a0e:	416d      	adcs	r5, r5
  402a10:	eb46 0606 	adc.w	r6, r6, r6
  402a14:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402a18:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402a1c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402a20:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402a24:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402a28:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402a2c:	bf88      	it	hi
  402a2e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402a32:	d81e      	bhi.n	402a72 <__aeabi_dmul+0xde>
  402a34:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402a38:	bf08      	it	eq
  402a3a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402a3e:	f150 0000 	adcs.w	r0, r0, #0
  402a42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402a46:	bd70      	pop	{r4, r5, r6, pc}
  402a48:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402a4c:	ea46 0101 	orr.w	r1, r6, r1
  402a50:	ea40 0002 	orr.w	r0, r0, r2
  402a54:	ea81 0103 	eor.w	r1, r1, r3
  402a58:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402a5c:	bfc2      	ittt	gt
  402a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
  402a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402a66:	bd70      	popgt	{r4, r5, r6, pc}
  402a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402a6c:	f04f 0e00 	mov.w	lr, #0
  402a70:	3c01      	subs	r4, #1
  402a72:	f300 80ab 	bgt.w	402bcc <__aeabi_dmul+0x238>
  402a76:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402a7a:	bfde      	ittt	le
  402a7c:	2000      	movle	r0, #0
  402a7e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402a82:	bd70      	pople	{r4, r5, r6, pc}
  402a84:	f1c4 0400 	rsb	r4, r4, #0
  402a88:	3c20      	subs	r4, #32
  402a8a:	da35      	bge.n	402af8 <__aeabi_dmul+0x164>
  402a8c:	340c      	adds	r4, #12
  402a8e:	dc1b      	bgt.n	402ac8 <__aeabi_dmul+0x134>
  402a90:	f104 0414 	add.w	r4, r4, #20
  402a94:	f1c4 0520 	rsb	r5, r4, #32
  402a98:	fa00 f305 	lsl.w	r3, r0, r5
  402a9c:	fa20 f004 	lsr.w	r0, r0, r4
  402aa0:	fa01 f205 	lsl.w	r2, r1, r5
  402aa4:	ea40 0002 	orr.w	r0, r0, r2
  402aa8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402aac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402ab0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402ab4:	fa21 f604 	lsr.w	r6, r1, r4
  402ab8:	eb42 0106 	adc.w	r1, r2, r6
  402abc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402ac0:	bf08      	it	eq
  402ac2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402ac6:	bd70      	pop	{r4, r5, r6, pc}
  402ac8:	f1c4 040c 	rsb	r4, r4, #12
  402acc:	f1c4 0520 	rsb	r5, r4, #32
  402ad0:	fa00 f304 	lsl.w	r3, r0, r4
  402ad4:	fa20 f005 	lsr.w	r0, r0, r5
  402ad8:	fa01 f204 	lsl.w	r2, r1, r4
  402adc:	ea40 0002 	orr.w	r0, r0, r2
  402ae0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402ae4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402ae8:	f141 0100 	adc.w	r1, r1, #0
  402aec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402af0:	bf08      	it	eq
  402af2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402af6:	bd70      	pop	{r4, r5, r6, pc}
  402af8:	f1c4 0520 	rsb	r5, r4, #32
  402afc:	fa00 f205 	lsl.w	r2, r0, r5
  402b00:	ea4e 0e02 	orr.w	lr, lr, r2
  402b04:	fa20 f304 	lsr.w	r3, r0, r4
  402b08:	fa01 f205 	lsl.w	r2, r1, r5
  402b0c:	ea43 0302 	orr.w	r3, r3, r2
  402b10:	fa21 f004 	lsr.w	r0, r1, r4
  402b14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402b18:	fa21 f204 	lsr.w	r2, r1, r4
  402b1c:	ea20 0002 	bic.w	r0, r0, r2
  402b20:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402b24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402b28:	bf08      	it	eq
  402b2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402b2e:	bd70      	pop	{r4, r5, r6, pc}
  402b30:	f094 0f00 	teq	r4, #0
  402b34:	d10f      	bne.n	402b56 <__aeabi_dmul+0x1c2>
  402b36:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402b3a:	0040      	lsls	r0, r0, #1
  402b3c:	eb41 0101 	adc.w	r1, r1, r1
  402b40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402b44:	bf08      	it	eq
  402b46:	3c01      	subeq	r4, #1
  402b48:	d0f7      	beq.n	402b3a <__aeabi_dmul+0x1a6>
  402b4a:	ea41 0106 	orr.w	r1, r1, r6
  402b4e:	f095 0f00 	teq	r5, #0
  402b52:	bf18      	it	ne
  402b54:	4770      	bxne	lr
  402b56:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402b5a:	0052      	lsls	r2, r2, #1
  402b5c:	eb43 0303 	adc.w	r3, r3, r3
  402b60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402b64:	bf08      	it	eq
  402b66:	3d01      	subeq	r5, #1
  402b68:	d0f7      	beq.n	402b5a <__aeabi_dmul+0x1c6>
  402b6a:	ea43 0306 	orr.w	r3, r3, r6
  402b6e:	4770      	bx	lr
  402b70:	ea94 0f0c 	teq	r4, ip
  402b74:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402b78:	bf18      	it	ne
  402b7a:	ea95 0f0c 	teqne	r5, ip
  402b7e:	d00c      	beq.n	402b9a <__aeabi_dmul+0x206>
  402b80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402b84:	bf18      	it	ne
  402b86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402b8a:	d1d1      	bne.n	402b30 <__aeabi_dmul+0x19c>
  402b8c:	ea81 0103 	eor.w	r1, r1, r3
  402b90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402b94:	f04f 0000 	mov.w	r0, #0
  402b98:	bd70      	pop	{r4, r5, r6, pc}
  402b9a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402b9e:	bf06      	itte	eq
  402ba0:	4610      	moveq	r0, r2
  402ba2:	4619      	moveq	r1, r3
  402ba4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402ba8:	d019      	beq.n	402bde <__aeabi_dmul+0x24a>
  402baa:	ea94 0f0c 	teq	r4, ip
  402bae:	d102      	bne.n	402bb6 <__aeabi_dmul+0x222>
  402bb0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402bb4:	d113      	bne.n	402bde <__aeabi_dmul+0x24a>
  402bb6:	ea95 0f0c 	teq	r5, ip
  402bba:	d105      	bne.n	402bc8 <__aeabi_dmul+0x234>
  402bbc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402bc0:	bf1c      	itt	ne
  402bc2:	4610      	movne	r0, r2
  402bc4:	4619      	movne	r1, r3
  402bc6:	d10a      	bne.n	402bde <__aeabi_dmul+0x24a>
  402bc8:	ea81 0103 	eor.w	r1, r1, r3
  402bcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402bd0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402bd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402bd8:	f04f 0000 	mov.w	r0, #0
  402bdc:	bd70      	pop	{r4, r5, r6, pc}
  402bde:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402be2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402be6:	bd70      	pop	{r4, r5, r6, pc}

00402be8 <__aeabi_ddiv>:
  402be8:	b570      	push	{r4, r5, r6, lr}
  402bea:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402bee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402bf2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402bf6:	bf1d      	ittte	ne
  402bf8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402bfc:	ea94 0f0c 	teqne	r4, ip
  402c00:	ea95 0f0c 	teqne	r5, ip
  402c04:	f000 f8a7 	bleq	402d56 <__aeabi_ddiv+0x16e>
  402c08:	eba4 0405 	sub.w	r4, r4, r5
  402c0c:	ea81 0e03 	eor.w	lr, r1, r3
  402c10:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402c14:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402c18:	f000 8088 	beq.w	402d2c <__aeabi_ddiv+0x144>
  402c1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402c20:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402c24:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402c28:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402c2c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402c30:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402c34:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402c38:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402c3c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402c40:	429d      	cmp	r5, r3
  402c42:	bf08      	it	eq
  402c44:	4296      	cmpeq	r6, r2
  402c46:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402c4a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402c4e:	d202      	bcs.n	402c56 <__aeabi_ddiv+0x6e>
  402c50:	085b      	lsrs	r3, r3, #1
  402c52:	ea4f 0232 	mov.w	r2, r2, rrx
  402c56:	1ab6      	subs	r6, r6, r2
  402c58:	eb65 0503 	sbc.w	r5, r5, r3
  402c5c:	085b      	lsrs	r3, r3, #1
  402c5e:	ea4f 0232 	mov.w	r2, r2, rrx
  402c62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402c66:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402c6a:	ebb6 0e02 	subs.w	lr, r6, r2
  402c6e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402c72:	bf22      	ittt	cs
  402c74:	1ab6      	subcs	r6, r6, r2
  402c76:	4675      	movcs	r5, lr
  402c78:	ea40 000c 	orrcs.w	r0, r0, ip
  402c7c:	085b      	lsrs	r3, r3, #1
  402c7e:	ea4f 0232 	mov.w	r2, r2, rrx
  402c82:	ebb6 0e02 	subs.w	lr, r6, r2
  402c86:	eb75 0e03 	sbcs.w	lr, r5, r3
  402c8a:	bf22      	ittt	cs
  402c8c:	1ab6      	subcs	r6, r6, r2
  402c8e:	4675      	movcs	r5, lr
  402c90:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402c94:	085b      	lsrs	r3, r3, #1
  402c96:	ea4f 0232 	mov.w	r2, r2, rrx
  402c9a:	ebb6 0e02 	subs.w	lr, r6, r2
  402c9e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402ca2:	bf22      	ittt	cs
  402ca4:	1ab6      	subcs	r6, r6, r2
  402ca6:	4675      	movcs	r5, lr
  402ca8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402cac:	085b      	lsrs	r3, r3, #1
  402cae:	ea4f 0232 	mov.w	r2, r2, rrx
  402cb2:	ebb6 0e02 	subs.w	lr, r6, r2
  402cb6:	eb75 0e03 	sbcs.w	lr, r5, r3
  402cba:	bf22      	ittt	cs
  402cbc:	1ab6      	subcs	r6, r6, r2
  402cbe:	4675      	movcs	r5, lr
  402cc0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402cc4:	ea55 0e06 	orrs.w	lr, r5, r6
  402cc8:	d018      	beq.n	402cfc <__aeabi_ddiv+0x114>
  402cca:	ea4f 1505 	mov.w	r5, r5, lsl #4
  402cce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402cd2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402cd6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402cda:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  402cde:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402ce2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402ce6:	d1c0      	bne.n	402c6a <__aeabi_ddiv+0x82>
  402ce8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402cec:	d10b      	bne.n	402d06 <__aeabi_ddiv+0x11e>
  402cee:	ea41 0100 	orr.w	r1, r1, r0
  402cf2:	f04f 0000 	mov.w	r0, #0
  402cf6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402cfa:	e7b6      	b.n	402c6a <__aeabi_ddiv+0x82>
  402cfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402d00:	bf04      	itt	eq
  402d02:	4301      	orreq	r1, r0
  402d04:	2000      	moveq	r0, #0
  402d06:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402d0a:	bf88      	it	hi
  402d0c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402d10:	f63f aeaf 	bhi.w	402a72 <__aeabi_dmul+0xde>
  402d14:	ebb5 0c03 	subs.w	ip, r5, r3
  402d18:	bf04      	itt	eq
  402d1a:	ebb6 0c02 	subseq.w	ip, r6, r2
  402d1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402d22:	f150 0000 	adcs.w	r0, r0, #0
  402d26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402d2a:	bd70      	pop	{r4, r5, r6, pc}
  402d2c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402d30:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402d34:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402d38:	bfc2      	ittt	gt
  402d3a:	ebd4 050c 	rsbsgt	r5, r4, ip
  402d3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402d42:	bd70      	popgt	{r4, r5, r6, pc}
  402d44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402d48:	f04f 0e00 	mov.w	lr, #0
  402d4c:	3c01      	subs	r4, #1
  402d4e:	e690      	b.n	402a72 <__aeabi_dmul+0xde>
  402d50:	ea45 0e06 	orr.w	lr, r5, r6
  402d54:	e68d      	b.n	402a72 <__aeabi_dmul+0xde>
  402d56:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402d5a:	ea94 0f0c 	teq	r4, ip
  402d5e:	bf08      	it	eq
  402d60:	ea95 0f0c 	teqeq	r5, ip
  402d64:	f43f af3b 	beq.w	402bde <__aeabi_dmul+0x24a>
  402d68:	ea94 0f0c 	teq	r4, ip
  402d6c:	d10a      	bne.n	402d84 <__aeabi_ddiv+0x19c>
  402d6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402d72:	f47f af34 	bne.w	402bde <__aeabi_dmul+0x24a>
  402d76:	ea95 0f0c 	teq	r5, ip
  402d7a:	f47f af25 	bne.w	402bc8 <__aeabi_dmul+0x234>
  402d7e:	4610      	mov	r0, r2
  402d80:	4619      	mov	r1, r3
  402d82:	e72c      	b.n	402bde <__aeabi_dmul+0x24a>
  402d84:	ea95 0f0c 	teq	r5, ip
  402d88:	d106      	bne.n	402d98 <__aeabi_ddiv+0x1b0>
  402d8a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402d8e:	f43f aefd 	beq.w	402b8c <__aeabi_dmul+0x1f8>
  402d92:	4610      	mov	r0, r2
  402d94:	4619      	mov	r1, r3
  402d96:	e722      	b.n	402bde <__aeabi_dmul+0x24a>
  402d98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402d9c:	bf18      	it	ne
  402d9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402da2:	f47f aec5 	bne.w	402b30 <__aeabi_dmul+0x19c>
  402da6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402daa:	f47f af0d 	bne.w	402bc8 <__aeabi_dmul+0x234>
  402dae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402db2:	f47f aeeb 	bne.w	402b8c <__aeabi_dmul+0x1f8>
  402db6:	e712      	b.n	402bde <__aeabi_dmul+0x24a>

00402db8 <__gedf2>:
  402db8:	f04f 3cff 	mov.w	ip, #4294967295
  402dbc:	e006      	b.n	402dcc <__cmpdf2+0x4>
  402dbe:	bf00      	nop

00402dc0 <__ledf2>:
  402dc0:	f04f 0c01 	mov.w	ip, #1
  402dc4:	e002      	b.n	402dcc <__cmpdf2+0x4>
  402dc6:	bf00      	nop

00402dc8 <__cmpdf2>:
  402dc8:	f04f 0c01 	mov.w	ip, #1
  402dcc:	f84d cd04 	str.w	ip, [sp, #-4]!
  402dd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402dd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402dd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402ddc:	bf18      	it	ne
  402dde:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  402de2:	d01b      	beq.n	402e1c <__cmpdf2+0x54>
  402de4:	b001      	add	sp, #4
  402de6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  402dea:	bf0c      	ite	eq
  402dec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  402df0:	ea91 0f03 	teqne	r1, r3
  402df4:	bf02      	ittt	eq
  402df6:	ea90 0f02 	teqeq	r0, r2
  402dfa:	2000      	moveq	r0, #0
  402dfc:	4770      	bxeq	lr
  402dfe:	f110 0f00 	cmn.w	r0, #0
  402e02:	ea91 0f03 	teq	r1, r3
  402e06:	bf58      	it	pl
  402e08:	4299      	cmppl	r1, r3
  402e0a:	bf08      	it	eq
  402e0c:	4290      	cmpeq	r0, r2
  402e0e:	bf2c      	ite	cs
  402e10:	17d8      	asrcs	r0, r3, #31
  402e12:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  402e16:	f040 0001 	orr.w	r0, r0, #1
  402e1a:	4770      	bx	lr
  402e1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402e20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402e24:	d102      	bne.n	402e2c <__cmpdf2+0x64>
  402e26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  402e2a:	d107      	bne.n	402e3c <__cmpdf2+0x74>
  402e2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402e30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402e34:	d1d6      	bne.n	402de4 <__cmpdf2+0x1c>
  402e36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  402e3a:	d0d3      	beq.n	402de4 <__cmpdf2+0x1c>
  402e3c:	f85d 0b04 	ldr.w	r0, [sp], #4
  402e40:	4770      	bx	lr
  402e42:	bf00      	nop

00402e44 <__aeabi_cdrcmple>:
  402e44:	4684      	mov	ip, r0
  402e46:	4610      	mov	r0, r2
  402e48:	4662      	mov	r2, ip
  402e4a:	468c      	mov	ip, r1
  402e4c:	4619      	mov	r1, r3
  402e4e:	4663      	mov	r3, ip
  402e50:	e000      	b.n	402e54 <__aeabi_cdcmpeq>
  402e52:	bf00      	nop

00402e54 <__aeabi_cdcmpeq>:
  402e54:	b501      	push	{r0, lr}
  402e56:	f7ff ffb7 	bl	402dc8 <__cmpdf2>
  402e5a:	2800      	cmp	r0, #0
  402e5c:	bf48      	it	mi
  402e5e:	f110 0f00 	cmnmi.w	r0, #0
  402e62:	bd01      	pop	{r0, pc}

00402e64 <__aeabi_dcmpeq>:
  402e64:	f84d ed08 	str.w	lr, [sp, #-8]!
  402e68:	f7ff fff4 	bl	402e54 <__aeabi_cdcmpeq>
  402e6c:	bf0c      	ite	eq
  402e6e:	2001      	moveq	r0, #1
  402e70:	2000      	movne	r0, #0
  402e72:	f85d fb08 	ldr.w	pc, [sp], #8
  402e76:	bf00      	nop

00402e78 <__aeabi_dcmplt>:
  402e78:	f84d ed08 	str.w	lr, [sp, #-8]!
  402e7c:	f7ff ffea 	bl	402e54 <__aeabi_cdcmpeq>
  402e80:	bf34      	ite	cc
  402e82:	2001      	movcc	r0, #1
  402e84:	2000      	movcs	r0, #0
  402e86:	f85d fb08 	ldr.w	pc, [sp], #8
  402e8a:	bf00      	nop

00402e8c <__aeabi_dcmple>:
  402e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
  402e90:	f7ff ffe0 	bl	402e54 <__aeabi_cdcmpeq>
  402e94:	bf94      	ite	ls
  402e96:	2001      	movls	r0, #1
  402e98:	2000      	movhi	r0, #0
  402e9a:	f85d fb08 	ldr.w	pc, [sp], #8
  402e9e:	bf00      	nop

00402ea0 <__aeabi_dcmpge>:
  402ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
  402ea4:	f7ff ffce 	bl	402e44 <__aeabi_cdrcmple>
  402ea8:	bf94      	ite	ls
  402eaa:	2001      	movls	r0, #1
  402eac:	2000      	movhi	r0, #0
  402eae:	f85d fb08 	ldr.w	pc, [sp], #8
  402eb2:	bf00      	nop

00402eb4 <__aeabi_dcmpgt>:
  402eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
  402eb8:	f7ff ffc4 	bl	402e44 <__aeabi_cdrcmple>
  402ebc:	bf34      	ite	cc
  402ebe:	2001      	movcc	r0, #1
  402ec0:	2000      	movcs	r0, #0
  402ec2:	f85d fb08 	ldr.w	pc, [sp], #8
  402ec6:	bf00      	nop

00402ec8 <__aeabi_d2iz>:
  402ec8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402ecc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  402ed0:	d215      	bcs.n	402efe <__aeabi_d2iz+0x36>
  402ed2:	d511      	bpl.n	402ef8 <__aeabi_d2iz+0x30>
  402ed4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402ed8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  402edc:	d912      	bls.n	402f04 <__aeabi_d2iz+0x3c>
  402ede:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402ee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402ee6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  402eea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402eee:	fa23 f002 	lsr.w	r0, r3, r2
  402ef2:	bf18      	it	ne
  402ef4:	4240      	negne	r0, r0
  402ef6:	4770      	bx	lr
  402ef8:	f04f 0000 	mov.w	r0, #0
  402efc:	4770      	bx	lr
  402efe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  402f02:	d105      	bne.n	402f10 <__aeabi_d2iz+0x48>
  402f04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  402f08:	bf08      	it	eq
  402f0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  402f0e:	4770      	bx	lr
  402f10:	f04f 0000 	mov.w	r0, #0
  402f14:	4770      	bx	lr
  402f16:	bf00      	nop

00402f18 <__libc_init_array>:
  402f18:	b570      	push	{r4, r5, r6, lr}
  402f1a:	4e0d      	ldr	r6, [pc, #52]	; (402f50 <__libc_init_array+0x38>)
  402f1c:	4c0d      	ldr	r4, [pc, #52]	; (402f54 <__libc_init_array+0x3c>)
  402f1e:	1ba4      	subs	r4, r4, r6
  402f20:	10a4      	asrs	r4, r4, #2
  402f22:	2500      	movs	r5, #0
  402f24:	42a5      	cmp	r5, r4
  402f26:	d109      	bne.n	402f3c <__libc_init_array+0x24>
  402f28:	4e0b      	ldr	r6, [pc, #44]	; (402f58 <__libc_init_array+0x40>)
  402f2a:	4c0c      	ldr	r4, [pc, #48]	; (402f5c <__libc_init_array+0x44>)
  402f2c:	f003 f81c 	bl	405f68 <_init>
  402f30:	1ba4      	subs	r4, r4, r6
  402f32:	10a4      	asrs	r4, r4, #2
  402f34:	2500      	movs	r5, #0
  402f36:	42a5      	cmp	r5, r4
  402f38:	d105      	bne.n	402f46 <__libc_init_array+0x2e>
  402f3a:	bd70      	pop	{r4, r5, r6, pc}
  402f3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402f40:	4798      	blx	r3
  402f42:	3501      	adds	r5, #1
  402f44:	e7ee      	b.n	402f24 <__libc_init_array+0xc>
  402f46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402f4a:	4798      	blx	r3
  402f4c:	3501      	adds	r5, #1
  402f4e:	e7f2      	b.n	402f36 <__libc_init_array+0x1e>
  402f50:	00405f74 	.word	0x00405f74
  402f54:	00405f74 	.word	0x00405f74
  402f58:	00405f74 	.word	0x00405f74
  402f5c:	00405f78 	.word	0x00405f78

00402f60 <memcpy>:
  402f60:	b510      	push	{r4, lr}
  402f62:	1e43      	subs	r3, r0, #1
  402f64:	440a      	add	r2, r1
  402f66:	4291      	cmp	r1, r2
  402f68:	d100      	bne.n	402f6c <memcpy+0xc>
  402f6a:	bd10      	pop	{r4, pc}
  402f6c:	f811 4b01 	ldrb.w	r4, [r1], #1
  402f70:	f803 4f01 	strb.w	r4, [r3, #1]!
  402f74:	e7f7      	b.n	402f66 <memcpy+0x6>

00402f76 <memset>:
  402f76:	4402      	add	r2, r0
  402f78:	4603      	mov	r3, r0
  402f7a:	4293      	cmp	r3, r2
  402f7c:	d100      	bne.n	402f80 <memset+0xa>
  402f7e:	4770      	bx	lr
  402f80:	f803 1b01 	strb.w	r1, [r3], #1
  402f84:	e7f9      	b.n	402f7a <memset+0x4>

00402f86 <__cvt>:
  402f86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402f8a:	b088      	sub	sp, #32
  402f8c:	2b00      	cmp	r3, #0
  402f8e:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402f90:	9912      	ldr	r1, [sp, #72]	; 0x48
  402f92:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402f94:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402f98:	461e      	mov	r6, r3
  402f9a:	f027 0720 	bic.w	r7, r7, #32
  402f9e:	bfbb      	ittet	lt
  402fa0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  402fa4:	461e      	movlt	r6, r3
  402fa6:	2300      	movge	r3, #0
  402fa8:	232d      	movlt	r3, #45	; 0x2d
  402faa:	2f46      	cmp	r7, #70	; 0x46
  402fac:	4614      	mov	r4, r2
  402fae:	700b      	strb	r3, [r1, #0]
  402fb0:	d004      	beq.n	402fbc <__cvt+0x36>
  402fb2:	2f45      	cmp	r7, #69	; 0x45
  402fb4:	d100      	bne.n	402fb8 <__cvt+0x32>
  402fb6:	3501      	adds	r5, #1
  402fb8:	2302      	movs	r3, #2
  402fba:	e000      	b.n	402fbe <__cvt+0x38>
  402fbc:	2303      	movs	r3, #3
  402fbe:	aa07      	add	r2, sp, #28
  402fc0:	9204      	str	r2, [sp, #16]
  402fc2:	aa06      	add	r2, sp, #24
  402fc4:	9203      	str	r2, [sp, #12]
  402fc6:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  402fca:	4622      	mov	r2, r4
  402fcc:	4633      	mov	r3, r6
  402fce:	f000 fd9b 	bl	403b08 <_dtoa_r>
  402fd2:	2f47      	cmp	r7, #71	; 0x47
  402fd4:	4680      	mov	r8, r0
  402fd6:	d102      	bne.n	402fde <__cvt+0x58>
  402fd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402fda:	07db      	lsls	r3, r3, #31
  402fdc:	d526      	bpl.n	40302c <__cvt+0xa6>
  402fde:	2f46      	cmp	r7, #70	; 0x46
  402fe0:	eb08 0905 	add.w	r9, r8, r5
  402fe4:	d111      	bne.n	40300a <__cvt+0x84>
  402fe6:	f898 3000 	ldrb.w	r3, [r8]
  402fea:	2b30      	cmp	r3, #48	; 0x30
  402fec:	d10a      	bne.n	403004 <__cvt+0x7e>
  402fee:	2200      	movs	r2, #0
  402ff0:	2300      	movs	r3, #0
  402ff2:	4620      	mov	r0, r4
  402ff4:	4631      	mov	r1, r6
  402ff6:	f7ff ff35 	bl	402e64 <__aeabi_dcmpeq>
  402ffa:	b918      	cbnz	r0, 403004 <__cvt+0x7e>
  402ffc:	f1c5 0501 	rsb	r5, r5, #1
  403000:	f8ca 5000 	str.w	r5, [sl]
  403004:	f8da 3000 	ldr.w	r3, [sl]
  403008:	4499      	add	r9, r3
  40300a:	2200      	movs	r2, #0
  40300c:	2300      	movs	r3, #0
  40300e:	4620      	mov	r0, r4
  403010:	4631      	mov	r1, r6
  403012:	f7ff ff27 	bl	402e64 <__aeabi_dcmpeq>
  403016:	b938      	cbnz	r0, 403028 <__cvt+0xa2>
  403018:	2230      	movs	r2, #48	; 0x30
  40301a:	9b07      	ldr	r3, [sp, #28]
  40301c:	4599      	cmp	r9, r3
  40301e:	d905      	bls.n	40302c <__cvt+0xa6>
  403020:	1c59      	adds	r1, r3, #1
  403022:	9107      	str	r1, [sp, #28]
  403024:	701a      	strb	r2, [r3, #0]
  403026:	e7f8      	b.n	40301a <__cvt+0x94>
  403028:	f8cd 901c 	str.w	r9, [sp, #28]
  40302c:	9b07      	ldr	r3, [sp, #28]
  40302e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403030:	eba3 0308 	sub.w	r3, r3, r8
  403034:	4640      	mov	r0, r8
  403036:	6013      	str	r3, [r2, #0]
  403038:	b008      	add	sp, #32
  40303a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040303e <__exponent>:
  40303e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  403040:	4603      	mov	r3, r0
  403042:	2900      	cmp	r1, #0
  403044:	bfb8      	it	lt
  403046:	4249      	neglt	r1, r1
  403048:	f803 2b02 	strb.w	r2, [r3], #2
  40304c:	bfb4      	ite	lt
  40304e:	222d      	movlt	r2, #45	; 0x2d
  403050:	222b      	movge	r2, #43	; 0x2b
  403052:	2909      	cmp	r1, #9
  403054:	7042      	strb	r2, [r0, #1]
  403056:	dd20      	ble.n	40309a <__exponent+0x5c>
  403058:	f10d 0207 	add.w	r2, sp, #7
  40305c:	4617      	mov	r7, r2
  40305e:	260a      	movs	r6, #10
  403060:	fb91 f5f6 	sdiv	r5, r1, r6
  403064:	fb06 1115 	mls	r1, r6, r5, r1
  403068:	3130      	adds	r1, #48	; 0x30
  40306a:	2d09      	cmp	r5, #9
  40306c:	f802 1c01 	strb.w	r1, [r2, #-1]
  403070:	f102 34ff 	add.w	r4, r2, #4294967295
  403074:	4629      	mov	r1, r5
  403076:	dc09      	bgt.n	40308c <__exponent+0x4e>
  403078:	3130      	adds	r1, #48	; 0x30
  40307a:	3a02      	subs	r2, #2
  40307c:	f804 1c01 	strb.w	r1, [r4, #-1]
  403080:	42ba      	cmp	r2, r7
  403082:	461c      	mov	r4, r3
  403084:	d304      	bcc.n	403090 <__exponent+0x52>
  403086:	1a20      	subs	r0, r4, r0
  403088:	b003      	add	sp, #12
  40308a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40308c:	4622      	mov	r2, r4
  40308e:	e7e7      	b.n	403060 <__exponent+0x22>
  403090:	f812 1b01 	ldrb.w	r1, [r2], #1
  403094:	f803 1b01 	strb.w	r1, [r3], #1
  403098:	e7f2      	b.n	403080 <__exponent+0x42>
  40309a:	2230      	movs	r2, #48	; 0x30
  40309c:	461c      	mov	r4, r3
  40309e:	4411      	add	r1, r2
  4030a0:	f804 2b02 	strb.w	r2, [r4], #2
  4030a4:	7059      	strb	r1, [r3, #1]
  4030a6:	e7ee      	b.n	403086 <__exponent+0x48>

004030a8 <_printf_float>:
  4030a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030ac:	b091      	sub	sp, #68	; 0x44
  4030ae:	460c      	mov	r4, r1
  4030b0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  4030b2:	4693      	mov	fp, r2
  4030b4:	461e      	mov	r6, r3
  4030b6:	4605      	mov	r5, r0
  4030b8:	f001 fc74 	bl	4049a4 <_localeconv_r>
  4030bc:	6803      	ldr	r3, [r0, #0]
  4030be:	9309      	str	r3, [sp, #36]	; 0x24
  4030c0:	4618      	mov	r0, r3
  4030c2:	f000 fc8d 	bl	4039e0 <strlen>
  4030c6:	2300      	movs	r3, #0
  4030c8:	930e      	str	r3, [sp, #56]	; 0x38
  4030ca:	683b      	ldr	r3, [r7, #0]
  4030cc:	900a      	str	r0, [sp, #40]	; 0x28
  4030ce:	3307      	adds	r3, #7
  4030d0:	f023 0307 	bic.w	r3, r3, #7
  4030d4:	f103 0208 	add.w	r2, r3, #8
  4030d8:	f894 8018 	ldrb.w	r8, [r4, #24]
  4030dc:	f8d4 a000 	ldr.w	sl, [r4]
  4030e0:	603a      	str	r2, [r7, #0]
  4030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4030e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  4030ea:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  4030ee:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  4030f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4030f4:	930b      	str	r3, [sp, #44]	; 0x2c
  4030f6:	f04f 32ff 	mov.w	r2, #4294967295
  4030fa:	4ba6      	ldr	r3, [pc, #664]	; (403394 <_printf_float+0x2ec>)
  4030fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4030fe:	4638      	mov	r0, r7
  403100:	f002 fb84 	bl	40580c <__aeabi_dcmpun>
  403104:	2800      	cmp	r0, #0
  403106:	f040 81f7 	bne.w	4034f8 <_printf_float+0x450>
  40310a:	f04f 32ff 	mov.w	r2, #4294967295
  40310e:	4ba1      	ldr	r3, [pc, #644]	; (403394 <_printf_float+0x2ec>)
  403110:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403112:	4638      	mov	r0, r7
  403114:	f7ff feba 	bl	402e8c <__aeabi_dcmple>
  403118:	2800      	cmp	r0, #0
  40311a:	f040 81ed 	bne.w	4034f8 <_printf_float+0x450>
  40311e:	2200      	movs	r2, #0
  403120:	2300      	movs	r3, #0
  403122:	4638      	mov	r0, r7
  403124:	4649      	mov	r1, r9
  403126:	f7ff fea7 	bl	402e78 <__aeabi_dcmplt>
  40312a:	b110      	cbz	r0, 403132 <_printf_float+0x8a>
  40312c:	232d      	movs	r3, #45	; 0x2d
  40312e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403132:	4b99      	ldr	r3, [pc, #612]	; (403398 <_printf_float+0x2f0>)
  403134:	4f99      	ldr	r7, [pc, #612]	; (40339c <_printf_float+0x2f4>)
  403136:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40313a:	bf98      	it	ls
  40313c:	461f      	movls	r7, r3
  40313e:	2303      	movs	r3, #3
  403140:	6123      	str	r3, [r4, #16]
  403142:	f02a 0304 	bic.w	r3, sl, #4
  403146:	6023      	str	r3, [r4, #0]
  403148:	f04f 0900 	mov.w	r9, #0
  40314c:	9600      	str	r6, [sp, #0]
  40314e:	465b      	mov	r3, fp
  403150:	aa0f      	add	r2, sp, #60	; 0x3c
  403152:	4621      	mov	r1, r4
  403154:	4628      	mov	r0, r5
  403156:	f000 f9df 	bl	403518 <_printf_common>
  40315a:	3001      	adds	r0, #1
  40315c:	f040 809a 	bne.w	403294 <_printf_float+0x1ec>
  403160:	f04f 30ff 	mov.w	r0, #4294967295
  403164:	b011      	add	sp, #68	; 0x44
  403166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40316a:	6862      	ldr	r2, [r4, #4]
  40316c:	1c53      	adds	r3, r2, #1
  40316e:	a80e      	add	r0, sp, #56	; 0x38
  403170:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  403174:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  403178:	d141      	bne.n	4031fe <_printf_float+0x156>
  40317a:	2206      	movs	r2, #6
  40317c:	6062      	str	r2, [r4, #4]
  40317e:	6023      	str	r3, [r4, #0]
  403180:	2100      	movs	r1, #0
  403182:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  403186:	9301      	str	r3, [sp, #4]
  403188:	6863      	ldr	r3, [r4, #4]
  40318a:	9005      	str	r0, [sp, #20]
  40318c:	9202      	str	r2, [sp, #8]
  40318e:	9300      	str	r3, [sp, #0]
  403190:	463a      	mov	r2, r7
  403192:	464b      	mov	r3, r9
  403194:	9106      	str	r1, [sp, #24]
  403196:	f8cd 8010 	str.w	r8, [sp, #16]
  40319a:	f8cd e00c 	str.w	lr, [sp, #12]
  40319e:	4628      	mov	r0, r5
  4031a0:	f7ff fef1 	bl	402f86 <__cvt>
  4031a4:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  4031a8:	2b47      	cmp	r3, #71	; 0x47
  4031aa:	4607      	mov	r7, r0
  4031ac:	d109      	bne.n	4031c2 <_printf_float+0x11a>
  4031ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4031b0:	1cd8      	adds	r0, r3, #3
  4031b2:	db02      	blt.n	4031ba <_printf_float+0x112>
  4031b4:	6862      	ldr	r2, [r4, #4]
  4031b6:	4293      	cmp	r3, r2
  4031b8:	dd59      	ble.n	40326e <_printf_float+0x1c6>
  4031ba:	f1a8 0802 	sub.w	r8, r8, #2
  4031be:	fa5f f888 	uxtb.w	r8, r8
  4031c2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4031c6:	990d      	ldr	r1, [sp, #52]	; 0x34
  4031c8:	d836      	bhi.n	403238 <_printf_float+0x190>
  4031ca:	3901      	subs	r1, #1
  4031cc:	4642      	mov	r2, r8
  4031ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
  4031d2:	910d      	str	r1, [sp, #52]	; 0x34
  4031d4:	f7ff ff33 	bl	40303e <__exponent>
  4031d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4031da:	1883      	adds	r3, r0, r2
  4031dc:	2a01      	cmp	r2, #1
  4031de:	4681      	mov	r9, r0
  4031e0:	6123      	str	r3, [r4, #16]
  4031e2:	dc02      	bgt.n	4031ea <_printf_float+0x142>
  4031e4:	6822      	ldr	r2, [r4, #0]
  4031e6:	07d1      	lsls	r1, r2, #31
  4031e8:	d501      	bpl.n	4031ee <_printf_float+0x146>
  4031ea:	3301      	adds	r3, #1
  4031ec:	6123      	str	r3, [r4, #16]
  4031ee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  4031f2:	2b00      	cmp	r3, #0
  4031f4:	d0aa      	beq.n	40314c <_printf_float+0xa4>
  4031f6:	232d      	movs	r3, #45	; 0x2d
  4031f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4031fc:	e7a6      	b.n	40314c <_printf_float+0xa4>
  4031fe:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  403202:	d002      	beq.n	40320a <_printf_float+0x162>
  403204:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403208:	d1b9      	bne.n	40317e <_printf_float+0xd6>
  40320a:	b19a      	cbz	r2, 403234 <_printf_float+0x18c>
  40320c:	2100      	movs	r1, #0
  40320e:	9106      	str	r1, [sp, #24]
  403210:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  403214:	e88d 000c 	stmia.w	sp, {r2, r3}
  403218:	6023      	str	r3, [r4, #0]
  40321a:	9005      	str	r0, [sp, #20]
  40321c:	463a      	mov	r2, r7
  40321e:	f8cd 8010 	str.w	r8, [sp, #16]
  403222:	f8cd e00c 	str.w	lr, [sp, #12]
  403226:	9102      	str	r1, [sp, #8]
  403228:	464b      	mov	r3, r9
  40322a:	4628      	mov	r0, r5
  40322c:	f7ff feab 	bl	402f86 <__cvt>
  403230:	4607      	mov	r7, r0
  403232:	e7bc      	b.n	4031ae <_printf_float+0x106>
  403234:	2201      	movs	r2, #1
  403236:	e7a1      	b.n	40317c <_printf_float+0xd4>
  403238:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40323c:	d119      	bne.n	403272 <_printf_float+0x1ca>
  40323e:	2900      	cmp	r1, #0
  403240:	6863      	ldr	r3, [r4, #4]
  403242:	dd0c      	ble.n	40325e <_printf_float+0x1b6>
  403244:	6121      	str	r1, [r4, #16]
  403246:	b913      	cbnz	r3, 40324e <_printf_float+0x1a6>
  403248:	6822      	ldr	r2, [r4, #0]
  40324a:	07d2      	lsls	r2, r2, #31
  40324c:	d502      	bpl.n	403254 <_printf_float+0x1ac>
  40324e:	3301      	adds	r3, #1
  403250:	440b      	add	r3, r1
  403252:	6123      	str	r3, [r4, #16]
  403254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403256:	65a3      	str	r3, [r4, #88]	; 0x58
  403258:	f04f 0900 	mov.w	r9, #0
  40325c:	e7c7      	b.n	4031ee <_printf_float+0x146>
  40325e:	b913      	cbnz	r3, 403266 <_printf_float+0x1be>
  403260:	6822      	ldr	r2, [r4, #0]
  403262:	07d0      	lsls	r0, r2, #31
  403264:	d501      	bpl.n	40326a <_printf_float+0x1c2>
  403266:	3302      	adds	r3, #2
  403268:	e7f3      	b.n	403252 <_printf_float+0x1aa>
  40326a:	2301      	movs	r3, #1
  40326c:	e7f1      	b.n	403252 <_printf_float+0x1aa>
  40326e:	f04f 0867 	mov.w	r8, #103	; 0x67
  403272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403276:	4293      	cmp	r3, r2
  403278:	db05      	blt.n	403286 <_printf_float+0x1de>
  40327a:	6822      	ldr	r2, [r4, #0]
  40327c:	6123      	str	r3, [r4, #16]
  40327e:	07d1      	lsls	r1, r2, #31
  403280:	d5e8      	bpl.n	403254 <_printf_float+0x1ac>
  403282:	3301      	adds	r3, #1
  403284:	e7e5      	b.n	403252 <_printf_float+0x1aa>
  403286:	2b00      	cmp	r3, #0
  403288:	bfd4      	ite	le
  40328a:	f1c3 0302 	rsble	r3, r3, #2
  40328e:	2301      	movgt	r3, #1
  403290:	4413      	add	r3, r2
  403292:	e7de      	b.n	403252 <_printf_float+0x1aa>
  403294:	6823      	ldr	r3, [r4, #0]
  403296:	055a      	lsls	r2, r3, #21
  403298:	d407      	bmi.n	4032aa <_printf_float+0x202>
  40329a:	6923      	ldr	r3, [r4, #16]
  40329c:	463a      	mov	r2, r7
  40329e:	4659      	mov	r1, fp
  4032a0:	4628      	mov	r0, r5
  4032a2:	47b0      	blx	r6
  4032a4:	3001      	adds	r0, #1
  4032a6:	d12a      	bne.n	4032fe <_printf_float+0x256>
  4032a8:	e75a      	b.n	403160 <_printf_float+0xb8>
  4032aa:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4032ae:	f240 80dc 	bls.w	40346a <_printf_float+0x3c2>
  4032b2:	2200      	movs	r2, #0
  4032b4:	2300      	movs	r3, #0
  4032b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4032ba:	f7ff fdd3 	bl	402e64 <__aeabi_dcmpeq>
  4032be:	2800      	cmp	r0, #0
  4032c0:	d039      	beq.n	403336 <_printf_float+0x28e>
  4032c2:	2301      	movs	r3, #1
  4032c4:	4a36      	ldr	r2, [pc, #216]	; (4033a0 <_printf_float+0x2f8>)
  4032c6:	4659      	mov	r1, fp
  4032c8:	4628      	mov	r0, r5
  4032ca:	47b0      	blx	r6
  4032cc:	3001      	adds	r0, #1
  4032ce:	f43f af47 	beq.w	403160 <_printf_float+0xb8>
  4032d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4032d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4032d6:	429a      	cmp	r2, r3
  4032d8:	db02      	blt.n	4032e0 <_printf_float+0x238>
  4032da:	6823      	ldr	r3, [r4, #0]
  4032dc:	07d8      	lsls	r0, r3, #31
  4032de:	d50e      	bpl.n	4032fe <_printf_float+0x256>
  4032e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4032e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4032e4:	4659      	mov	r1, fp
  4032e6:	4628      	mov	r0, r5
  4032e8:	47b0      	blx	r6
  4032ea:	3001      	adds	r0, #1
  4032ec:	f43f af38 	beq.w	403160 <_printf_float+0xb8>
  4032f0:	2700      	movs	r7, #0
  4032f2:	f104 081a 	add.w	r8, r4, #26
  4032f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4032f8:	3b01      	subs	r3, #1
  4032fa:	429f      	cmp	r7, r3
  4032fc:	db11      	blt.n	403322 <_printf_float+0x27a>
  4032fe:	6823      	ldr	r3, [r4, #0]
  403300:	079f      	lsls	r7, r3, #30
  403302:	d508      	bpl.n	403316 <_printf_float+0x26e>
  403304:	2700      	movs	r7, #0
  403306:	f104 0819 	add.w	r8, r4, #25
  40330a:	68e3      	ldr	r3, [r4, #12]
  40330c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40330e:	1a9b      	subs	r3, r3, r2
  403310:	429f      	cmp	r7, r3
  403312:	f2c0 80e7 	blt.w	4034e4 <_printf_float+0x43c>
  403316:	68e0      	ldr	r0, [r4, #12]
  403318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40331a:	4298      	cmp	r0, r3
  40331c:	bfb8      	it	lt
  40331e:	4618      	movlt	r0, r3
  403320:	e720      	b.n	403164 <_printf_float+0xbc>
  403322:	2301      	movs	r3, #1
  403324:	4642      	mov	r2, r8
  403326:	4659      	mov	r1, fp
  403328:	4628      	mov	r0, r5
  40332a:	47b0      	blx	r6
  40332c:	3001      	adds	r0, #1
  40332e:	f43f af17 	beq.w	403160 <_printf_float+0xb8>
  403332:	3701      	adds	r7, #1
  403334:	e7df      	b.n	4032f6 <_printf_float+0x24e>
  403336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403338:	2b00      	cmp	r3, #0
  40333a:	dc33      	bgt.n	4033a4 <_printf_float+0x2fc>
  40333c:	2301      	movs	r3, #1
  40333e:	4a18      	ldr	r2, [pc, #96]	; (4033a0 <_printf_float+0x2f8>)
  403340:	4659      	mov	r1, fp
  403342:	4628      	mov	r0, r5
  403344:	47b0      	blx	r6
  403346:	3001      	adds	r0, #1
  403348:	f43f af0a 	beq.w	403160 <_printf_float+0xb8>
  40334c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40334e:	b923      	cbnz	r3, 40335a <_printf_float+0x2b2>
  403350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403352:	b913      	cbnz	r3, 40335a <_printf_float+0x2b2>
  403354:	6823      	ldr	r3, [r4, #0]
  403356:	07d9      	lsls	r1, r3, #31
  403358:	d5d1      	bpl.n	4032fe <_printf_float+0x256>
  40335a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40335c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40335e:	4659      	mov	r1, fp
  403360:	4628      	mov	r0, r5
  403362:	47b0      	blx	r6
  403364:	3001      	adds	r0, #1
  403366:	f43f aefb 	beq.w	403160 <_printf_float+0xb8>
  40336a:	f04f 0800 	mov.w	r8, #0
  40336e:	f104 091a 	add.w	r9, r4, #26
  403372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403374:	425b      	negs	r3, r3
  403376:	4598      	cmp	r8, r3
  403378:	db01      	blt.n	40337e <_printf_float+0x2d6>
  40337a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40337c:	e78e      	b.n	40329c <_printf_float+0x1f4>
  40337e:	2301      	movs	r3, #1
  403380:	464a      	mov	r2, r9
  403382:	4659      	mov	r1, fp
  403384:	4628      	mov	r0, r5
  403386:	47b0      	blx	r6
  403388:	3001      	adds	r0, #1
  40338a:	f43f aee9 	beq.w	403160 <_printf_float+0xb8>
  40338e:	f108 0801 	add.w	r8, r8, #1
  403392:	e7ee      	b.n	403372 <_printf_float+0x2ca>
  403394:	7fefffff 	.word	0x7fefffff
  403398:	00405cac 	.word	0x00405cac
  40339c:	00405cb0 	.word	0x00405cb0
  4033a0:	00405cbc 	.word	0x00405cbc
  4033a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4033a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4033a8:	429a      	cmp	r2, r3
  4033aa:	bfa8      	it	ge
  4033ac:	461a      	movge	r2, r3
  4033ae:	2a00      	cmp	r2, #0
  4033b0:	4690      	mov	r8, r2
  4033b2:	dc36      	bgt.n	403422 <_printf_float+0x37a>
  4033b4:	f104 031a 	add.w	r3, r4, #26
  4033b8:	f04f 0a00 	mov.w	sl, #0
  4033bc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4033c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4033c2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  4033c6:	eba9 0308 	sub.w	r3, r9, r8
  4033ca:	459a      	cmp	sl, r3
  4033cc:	db31      	blt.n	403432 <_printf_float+0x38a>
  4033ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4033d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4033d2:	429a      	cmp	r2, r3
  4033d4:	db38      	blt.n	403448 <_printf_float+0x3a0>
  4033d6:	6823      	ldr	r3, [r4, #0]
  4033d8:	07da      	lsls	r2, r3, #31
  4033da:	d435      	bmi.n	403448 <_printf_float+0x3a0>
  4033dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4033de:	990d      	ldr	r1, [sp, #52]	; 0x34
  4033e0:	eba3 0209 	sub.w	r2, r3, r9
  4033e4:	eba3 0801 	sub.w	r8, r3, r1
  4033e8:	4590      	cmp	r8, r2
  4033ea:	bfa8      	it	ge
  4033ec:	4690      	movge	r8, r2
  4033ee:	f1b8 0f00 	cmp.w	r8, #0
  4033f2:	dc31      	bgt.n	403458 <_printf_float+0x3b0>
  4033f4:	2700      	movs	r7, #0
  4033f6:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4033fa:	f104 091a 	add.w	r9, r4, #26
  4033fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403402:	1a9b      	subs	r3, r3, r2
  403404:	eba3 0308 	sub.w	r3, r3, r8
  403408:	429f      	cmp	r7, r3
  40340a:	f6bf af78 	bge.w	4032fe <_printf_float+0x256>
  40340e:	2301      	movs	r3, #1
  403410:	464a      	mov	r2, r9
  403412:	4659      	mov	r1, fp
  403414:	4628      	mov	r0, r5
  403416:	47b0      	blx	r6
  403418:	3001      	adds	r0, #1
  40341a:	f43f aea1 	beq.w	403160 <_printf_float+0xb8>
  40341e:	3701      	adds	r7, #1
  403420:	e7ed      	b.n	4033fe <_printf_float+0x356>
  403422:	4613      	mov	r3, r2
  403424:	4659      	mov	r1, fp
  403426:	463a      	mov	r2, r7
  403428:	4628      	mov	r0, r5
  40342a:	47b0      	blx	r6
  40342c:	3001      	adds	r0, #1
  40342e:	d1c1      	bne.n	4033b4 <_printf_float+0x30c>
  403430:	e696      	b.n	403160 <_printf_float+0xb8>
  403432:	2301      	movs	r3, #1
  403434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403436:	4659      	mov	r1, fp
  403438:	4628      	mov	r0, r5
  40343a:	47b0      	blx	r6
  40343c:	3001      	adds	r0, #1
  40343e:	f43f ae8f 	beq.w	403160 <_printf_float+0xb8>
  403442:	f10a 0a01 	add.w	sl, sl, #1
  403446:	e7bc      	b.n	4033c2 <_printf_float+0x31a>
  403448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40344a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40344c:	4659      	mov	r1, fp
  40344e:	4628      	mov	r0, r5
  403450:	47b0      	blx	r6
  403452:	3001      	adds	r0, #1
  403454:	d1c2      	bne.n	4033dc <_printf_float+0x334>
  403456:	e683      	b.n	403160 <_printf_float+0xb8>
  403458:	4643      	mov	r3, r8
  40345a:	eb07 0209 	add.w	r2, r7, r9
  40345e:	4659      	mov	r1, fp
  403460:	4628      	mov	r0, r5
  403462:	47b0      	blx	r6
  403464:	3001      	adds	r0, #1
  403466:	d1c5      	bne.n	4033f4 <_printf_float+0x34c>
  403468:	e67a      	b.n	403160 <_printf_float+0xb8>
  40346a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40346c:	2a01      	cmp	r2, #1
  40346e:	dc01      	bgt.n	403474 <_printf_float+0x3cc>
  403470:	07db      	lsls	r3, r3, #31
  403472:	d534      	bpl.n	4034de <_printf_float+0x436>
  403474:	2301      	movs	r3, #1
  403476:	463a      	mov	r2, r7
  403478:	4659      	mov	r1, fp
  40347a:	4628      	mov	r0, r5
  40347c:	47b0      	blx	r6
  40347e:	3001      	adds	r0, #1
  403480:	f43f ae6e 	beq.w	403160 <_printf_float+0xb8>
  403484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403486:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403488:	4659      	mov	r1, fp
  40348a:	4628      	mov	r0, r5
  40348c:	47b0      	blx	r6
  40348e:	3001      	adds	r0, #1
  403490:	f43f ae66 	beq.w	403160 <_printf_float+0xb8>
  403494:	2200      	movs	r2, #0
  403496:	2300      	movs	r3, #0
  403498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40349c:	f7ff fce2 	bl	402e64 <__aeabi_dcmpeq>
  4034a0:	b150      	cbz	r0, 4034b8 <_printf_float+0x410>
  4034a2:	2700      	movs	r7, #0
  4034a4:	f104 081a 	add.w	r8, r4, #26
  4034a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4034aa:	3b01      	subs	r3, #1
  4034ac:	429f      	cmp	r7, r3
  4034ae:	db0c      	blt.n	4034ca <_printf_float+0x422>
  4034b0:	464b      	mov	r3, r9
  4034b2:	f104 0250 	add.w	r2, r4, #80	; 0x50
  4034b6:	e6f2      	b.n	40329e <_printf_float+0x1f6>
  4034b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4034ba:	1c7a      	adds	r2, r7, #1
  4034bc:	3b01      	subs	r3, #1
  4034be:	4659      	mov	r1, fp
  4034c0:	4628      	mov	r0, r5
  4034c2:	47b0      	blx	r6
  4034c4:	3001      	adds	r0, #1
  4034c6:	d1f3      	bne.n	4034b0 <_printf_float+0x408>
  4034c8:	e64a      	b.n	403160 <_printf_float+0xb8>
  4034ca:	2301      	movs	r3, #1
  4034cc:	4642      	mov	r2, r8
  4034ce:	4659      	mov	r1, fp
  4034d0:	4628      	mov	r0, r5
  4034d2:	47b0      	blx	r6
  4034d4:	3001      	adds	r0, #1
  4034d6:	f43f ae43 	beq.w	403160 <_printf_float+0xb8>
  4034da:	3701      	adds	r7, #1
  4034dc:	e7e4      	b.n	4034a8 <_printf_float+0x400>
  4034de:	2301      	movs	r3, #1
  4034e0:	463a      	mov	r2, r7
  4034e2:	e7ec      	b.n	4034be <_printf_float+0x416>
  4034e4:	2301      	movs	r3, #1
  4034e6:	4642      	mov	r2, r8
  4034e8:	4659      	mov	r1, fp
  4034ea:	4628      	mov	r0, r5
  4034ec:	47b0      	blx	r6
  4034ee:	3001      	adds	r0, #1
  4034f0:	f43f ae36 	beq.w	403160 <_printf_float+0xb8>
  4034f4:	3701      	adds	r7, #1
  4034f6:	e708      	b.n	40330a <_printf_float+0x262>
  4034f8:	463a      	mov	r2, r7
  4034fa:	464b      	mov	r3, r9
  4034fc:	4638      	mov	r0, r7
  4034fe:	4649      	mov	r1, r9
  403500:	f002 f984 	bl	40580c <__aeabi_dcmpun>
  403504:	2800      	cmp	r0, #0
  403506:	f43f ae30 	beq.w	40316a <_printf_float+0xc2>
  40350a:	4b01      	ldr	r3, [pc, #4]	; (403510 <_printf_float+0x468>)
  40350c:	4f01      	ldr	r7, [pc, #4]	; (403514 <_printf_float+0x46c>)
  40350e:	e612      	b.n	403136 <_printf_float+0x8e>
  403510:	00405cb4 	.word	0x00405cb4
  403514:	00405cb8 	.word	0x00405cb8

00403518 <_printf_common>:
  403518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40351c:	4691      	mov	r9, r2
  40351e:	461f      	mov	r7, r3
  403520:	688a      	ldr	r2, [r1, #8]
  403522:	690b      	ldr	r3, [r1, #16]
  403524:	f8dd 8020 	ldr.w	r8, [sp, #32]
  403528:	4293      	cmp	r3, r2
  40352a:	bfb8      	it	lt
  40352c:	4613      	movlt	r3, r2
  40352e:	f8c9 3000 	str.w	r3, [r9]
  403532:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  403536:	4606      	mov	r6, r0
  403538:	460c      	mov	r4, r1
  40353a:	b112      	cbz	r2, 403542 <_printf_common+0x2a>
  40353c:	3301      	adds	r3, #1
  40353e:	f8c9 3000 	str.w	r3, [r9]
  403542:	6823      	ldr	r3, [r4, #0]
  403544:	0699      	lsls	r1, r3, #26
  403546:	bf42      	ittt	mi
  403548:	f8d9 3000 	ldrmi.w	r3, [r9]
  40354c:	3302      	addmi	r3, #2
  40354e:	f8c9 3000 	strmi.w	r3, [r9]
  403552:	6825      	ldr	r5, [r4, #0]
  403554:	f015 0506 	ands.w	r5, r5, #6
  403558:	d107      	bne.n	40356a <_printf_common+0x52>
  40355a:	f104 0a19 	add.w	sl, r4, #25
  40355e:	68e3      	ldr	r3, [r4, #12]
  403560:	f8d9 2000 	ldr.w	r2, [r9]
  403564:	1a9b      	subs	r3, r3, r2
  403566:	429d      	cmp	r5, r3
  403568:	db29      	blt.n	4035be <_printf_common+0xa6>
  40356a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  40356e:	6822      	ldr	r2, [r4, #0]
  403570:	3300      	adds	r3, #0
  403572:	bf18      	it	ne
  403574:	2301      	movne	r3, #1
  403576:	0692      	lsls	r2, r2, #26
  403578:	d42e      	bmi.n	4035d8 <_printf_common+0xc0>
  40357a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40357e:	4639      	mov	r1, r7
  403580:	4630      	mov	r0, r6
  403582:	47c0      	blx	r8
  403584:	3001      	adds	r0, #1
  403586:	d021      	beq.n	4035cc <_printf_common+0xb4>
  403588:	6823      	ldr	r3, [r4, #0]
  40358a:	68e5      	ldr	r5, [r4, #12]
  40358c:	f8d9 2000 	ldr.w	r2, [r9]
  403590:	f003 0306 	and.w	r3, r3, #6
  403594:	2b04      	cmp	r3, #4
  403596:	bf08      	it	eq
  403598:	1aad      	subeq	r5, r5, r2
  40359a:	68a3      	ldr	r3, [r4, #8]
  40359c:	6922      	ldr	r2, [r4, #16]
  40359e:	bf0c      	ite	eq
  4035a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  4035a4:	2500      	movne	r5, #0
  4035a6:	4293      	cmp	r3, r2
  4035a8:	bfc4      	itt	gt
  4035aa:	1a9b      	subgt	r3, r3, r2
  4035ac:	18ed      	addgt	r5, r5, r3
  4035ae:	f04f 0900 	mov.w	r9, #0
  4035b2:	341a      	adds	r4, #26
  4035b4:	454d      	cmp	r5, r9
  4035b6:	d11b      	bne.n	4035f0 <_printf_common+0xd8>
  4035b8:	2000      	movs	r0, #0
  4035ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4035be:	2301      	movs	r3, #1
  4035c0:	4652      	mov	r2, sl
  4035c2:	4639      	mov	r1, r7
  4035c4:	4630      	mov	r0, r6
  4035c6:	47c0      	blx	r8
  4035c8:	3001      	adds	r0, #1
  4035ca:	d103      	bne.n	4035d4 <_printf_common+0xbc>
  4035cc:	f04f 30ff 	mov.w	r0, #4294967295
  4035d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4035d4:	3501      	adds	r5, #1
  4035d6:	e7c2      	b.n	40355e <_printf_common+0x46>
  4035d8:	18e1      	adds	r1, r4, r3
  4035da:	1c5a      	adds	r2, r3, #1
  4035dc:	2030      	movs	r0, #48	; 0x30
  4035de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4035e2:	4422      	add	r2, r4
  4035e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4035e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4035ec:	3302      	adds	r3, #2
  4035ee:	e7c4      	b.n	40357a <_printf_common+0x62>
  4035f0:	2301      	movs	r3, #1
  4035f2:	4622      	mov	r2, r4
  4035f4:	4639      	mov	r1, r7
  4035f6:	4630      	mov	r0, r6
  4035f8:	47c0      	blx	r8
  4035fa:	3001      	adds	r0, #1
  4035fc:	d0e6      	beq.n	4035cc <_printf_common+0xb4>
  4035fe:	f109 0901 	add.w	r9, r9, #1
  403602:	e7d7      	b.n	4035b4 <_printf_common+0x9c>

00403604 <_printf_i>:
  403604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403608:	4617      	mov	r7, r2
  40360a:	7e0a      	ldrb	r2, [r1, #24]
  40360c:	b085      	sub	sp, #20
  40360e:	2a6e      	cmp	r2, #110	; 0x6e
  403610:	4698      	mov	r8, r3
  403612:	4606      	mov	r6, r0
  403614:	460c      	mov	r4, r1
  403616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403618:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  40361c:	f000 80bc 	beq.w	403798 <_printf_i+0x194>
  403620:	d81a      	bhi.n	403658 <_printf_i+0x54>
  403622:	2a63      	cmp	r2, #99	; 0x63
  403624:	d02e      	beq.n	403684 <_printf_i+0x80>
  403626:	d80a      	bhi.n	40363e <_printf_i+0x3a>
  403628:	2a00      	cmp	r2, #0
  40362a:	f000 80c8 	beq.w	4037be <_printf_i+0x1ba>
  40362e:	2a58      	cmp	r2, #88	; 0x58
  403630:	f000 808a 	beq.w	403748 <_printf_i+0x144>
  403634:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403638:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  40363c:	e02a      	b.n	403694 <_printf_i+0x90>
  40363e:	2a64      	cmp	r2, #100	; 0x64
  403640:	d001      	beq.n	403646 <_printf_i+0x42>
  403642:	2a69      	cmp	r2, #105	; 0x69
  403644:	d1f6      	bne.n	403634 <_printf_i+0x30>
  403646:	6821      	ldr	r1, [r4, #0]
  403648:	681a      	ldr	r2, [r3, #0]
  40364a:	f011 0f80 	tst.w	r1, #128	; 0x80
  40364e:	d023      	beq.n	403698 <_printf_i+0x94>
  403650:	1d11      	adds	r1, r2, #4
  403652:	6019      	str	r1, [r3, #0]
  403654:	6813      	ldr	r3, [r2, #0]
  403656:	e027      	b.n	4036a8 <_printf_i+0xa4>
  403658:	2a73      	cmp	r2, #115	; 0x73
  40365a:	f000 80b4 	beq.w	4037c6 <_printf_i+0x1c2>
  40365e:	d808      	bhi.n	403672 <_printf_i+0x6e>
  403660:	2a6f      	cmp	r2, #111	; 0x6f
  403662:	d02a      	beq.n	4036ba <_printf_i+0xb6>
  403664:	2a70      	cmp	r2, #112	; 0x70
  403666:	d1e5      	bne.n	403634 <_printf_i+0x30>
  403668:	680a      	ldr	r2, [r1, #0]
  40366a:	f042 0220 	orr.w	r2, r2, #32
  40366e:	600a      	str	r2, [r1, #0]
  403670:	e003      	b.n	40367a <_printf_i+0x76>
  403672:	2a75      	cmp	r2, #117	; 0x75
  403674:	d021      	beq.n	4036ba <_printf_i+0xb6>
  403676:	2a78      	cmp	r2, #120	; 0x78
  403678:	d1dc      	bne.n	403634 <_printf_i+0x30>
  40367a:	2278      	movs	r2, #120	; 0x78
  40367c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  403680:	496e      	ldr	r1, [pc, #440]	; (40383c <_printf_i+0x238>)
  403682:	e064      	b.n	40374e <_printf_i+0x14a>
  403684:	681a      	ldr	r2, [r3, #0]
  403686:	f101 0542 	add.w	r5, r1, #66	; 0x42
  40368a:	1d11      	adds	r1, r2, #4
  40368c:	6019      	str	r1, [r3, #0]
  40368e:	6813      	ldr	r3, [r2, #0]
  403690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403694:	2301      	movs	r3, #1
  403696:	e0a3      	b.n	4037e0 <_printf_i+0x1dc>
  403698:	f011 0f40 	tst.w	r1, #64	; 0x40
  40369c:	f102 0104 	add.w	r1, r2, #4
  4036a0:	6019      	str	r1, [r3, #0]
  4036a2:	d0d7      	beq.n	403654 <_printf_i+0x50>
  4036a4:	f9b2 3000 	ldrsh.w	r3, [r2]
  4036a8:	2b00      	cmp	r3, #0
  4036aa:	da03      	bge.n	4036b4 <_printf_i+0xb0>
  4036ac:	222d      	movs	r2, #45	; 0x2d
  4036ae:	425b      	negs	r3, r3
  4036b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  4036b4:	4962      	ldr	r1, [pc, #392]	; (403840 <_printf_i+0x23c>)
  4036b6:	220a      	movs	r2, #10
  4036b8:	e017      	b.n	4036ea <_printf_i+0xe6>
  4036ba:	6820      	ldr	r0, [r4, #0]
  4036bc:	6819      	ldr	r1, [r3, #0]
  4036be:	f010 0f80 	tst.w	r0, #128	; 0x80
  4036c2:	d003      	beq.n	4036cc <_printf_i+0xc8>
  4036c4:	1d08      	adds	r0, r1, #4
  4036c6:	6018      	str	r0, [r3, #0]
  4036c8:	680b      	ldr	r3, [r1, #0]
  4036ca:	e006      	b.n	4036da <_printf_i+0xd6>
  4036cc:	f010 0f40 	tst.w	r0, #64	; 0x40
  4036d0:	f101 0004 	add.w	r0, r1, #4
  4036d4:	6018      	str	r0, [r3, #0]
  4036d6:	d0f7      	beq.n	4036c8 <_printf_i+0xc4>
  4036d8:	880b      	ldrh	r3, [r1, #0]
  4036da:	4959      	ldr	r1, [pc, #356]	; (403840 <_printf_i+0x23c>)
  4036dc:	2a6f      	cmp	r2, #111	; 0x6f
  4036de:	bf14      	ite	ne
  4036e0:	220a      	movne	r2, #10
  4036e2:	2208      	moveq	r2, #8
  4036e4:	2000      	movs	r0, #0
  4036e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  4036ea:	6865      	ldr	r5, [r4, #4]
  4036ec:	60a5      	str	r5, [r4, #8]
  4036ee:	2d00      	cmp	r5, #0
  4036f0:	f2c0 809c 	blt.w	40382c <_printf_i+0x228>
  4036f4:	6820      	ldr	r0, [r4, #0]
  4036f6:	f020 0004 	bic.w	r0, r0, #4
  4036fa:	6020      	str	r0, [r4, #0]
  4036fc:	2b00      	cmp	r3, #0
  4036fe:	d13f      	bne.n	403780 <_printf_i+0x17c>
  403700:	2d00      	cmp	r5, #0
  403702:	f040 8095 	bne.w	403830 <_printf_i+0x22c>
  403706:	4675      	mov	r5, lr
  403708:	2a08      	cmp	r2, #8
  40370a:	d10b      	bne.n	403724 <_printf_i+0x120>
  40370c:	6823      	ldr	r3, [r4, #0]
  40370e:	07da      	lsls	r2, r3, #31
  403710:	d508      	bpl.n	403724 <_printf_i+0x120>
  403712:	6923      	ldr	r3, [r4, #16]
  403714:	6862      	ldr	r2, [r4, #4]
  403716:	429a      	cmp	r2, r3
  403718:	bfde      	ittt	le
  40371a:	2330      	movle	r3, #48	; 0x30
  40371c:	f805 3c01 	strble.w	r3, [r5, #-1]
  403720:	f105 35ff 	addle.w	r5, r5, #4294967295
  403724:	ebae 0305 	sub.w	r3, lr, r5
  403728:	6123      	str	r3, [r4, #16]
  40372a:	f8cd 8000 	str.w	r8, [sp]
  40372e:	463b      	mov	r3, r7
  403730:	aa03      	add	r2, sp, #12
  403732:	4621      	mov	r1, r4
  403734:	4630      	mov	r0, r6
  403736:	f7ff feef 	bl	403518 <_printf_common>
  40373a:	3001      	adds	r0, #1
  40373c:	d155      	bne.n	4037ea <_printf_i+0x1e6>
  40373e:	f04f 30ff 	mov.w	r0, #4294967295
  403742:	b005      	add	sp, #20
  403744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403748:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  40374c:	493c      	ldr	r1, [pc, #240]	; (403840 <_printf_i+0x23c>)
  40374e:	6822      	ldr	r2, [r4, #0]
  403750:	6818      	ldr	r0, [r3, #0]
  403752:	f012 0f80 	tst.w	r2, #128	; 0x80
  403756:	f100 0504 	add.w	r5, r0, #4
  40375a:	601d      	str	r5, [r3, #0]
  40375c:	d001      	beq.n	403762 <_printf_i+0x15e>
  40375e:	6803      	ldr	r3, [r0, #0]
  403760:	e002      	b.n	403768 <_printf_i+0x164>
  403762:	0655      	lsls	r5, r2, #25
  403764:	d5fb      	bpl.n	40375e <_printf_i+0x15a>
  403766:	8803      	ldrh	r3, [r0, #0]
  403768:	07d0      	lsls	r0, r2, #31
  40376a:	bf44      	itt	mi
  40376c:	f042 0220 	orrmi.w	r2, r2, #32
  403770:	6022      	strmi	r2, [r4, #0]
  403772:	b91b      	cbnz	r3, 40377c <_printf_i+0x178>
  403774:	6822      	ldr	r2, [r4, #0]
  403776:	f022 0220 	bic.w	r2, r2, #32
  40377a:	6022      	str	r2, [r4, #0]
  40377c:	2210      	movs	r2, #16
  40377e:	e7b1      	b.n	4036e4 <_printf_i+0xe0>
  403780:	4675      	mov	r5, lr
  403782:	fbb3 f0f2 	udiv	r0, r3, r2
  403786:	fb02 3310 	mls	r3, r2, r0, r3
  40378a:	5ccb      	ldrb	r3, [r1, r3]
  40378c:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403790:	4603      	mov	r3, r0
  403792:	2800      	cmp	r0, #0
  403794:	d1f5      	bne.n	403782 <_printf_i+0x17e>
  403796:	e7b7      	b.n	403708 <_printf_i+0x104>
  403798:	6808      	ldr	r0, [r1, #0]
  40379a:	681a      	ldr	r2, [r3, #0]
  40379c:	6949      	ldr	r1, [r1, #20]
  40379e:	f010 0f80 	tst.w	r0, #128	; 0x80
  4037a2:	d004      	beq.n	4037ae <_printf_i+0x1aa>
  4037a4:	1d10      	adds	r0, r2, #4
  4037a6:	6018      	str	r0, [r3, #0]
  4037a8:	6813      	ldr	r3, [r2, #0]
  4037aa:	6019      	str	r1, [r3, #0]
  4037ac:	e007      	b.n	4037be <_printf_i+0x1ba>
  4037ae:	f010 0f40 	tst.w	r0, #64	; 0x40
  4037b2:	f102 0004 	add.w	r0, r2, #4
  4037b6:	6018      	str	r0, [r3, #0]
  4037b8:	6813      	ldr	r3, [r2, #0]
  4037ba:	d0f6      	beq.n	4037aa <_printf_i+0x1a6>
  4037bc:	8019      	strh	r1, [r3, #0]
  4037be:	2300      	movs	r3, #0
  4037c0:	6123      	str	r3, [r4, #16]
  4037c2:	4675      	mov	r5, lr
  4037c4:	e7b1      	b.n	40372a <_printf_i+0x126>
  4037c6:	681a      	ldr	r2, [r3, #0]
  4037c8:	1d11      	adds	r1, r2, #4
  4037ca:	6019      	str	r1, [r3, #0]
  4037cc:	6815      	ldr	r5, [r2, #0]
  4037ce:	6862      	ldr	r2, [r4, #4]
  4037d0:	2100      	movs	r1, #0
  4037d2:	4628      	mov	r0, r5
  4037d4:	f001 f964 	bl	404aa0 <memchr>
  4037d8:	b108      	cbz	r0, 4037de <_printf_i+0x1da>
  4037da:	1b40      	subs	r0, r0, r5
  4037dc:	6060      	str	r0, [r4, #4]
  4037de:	6863      	ldr	r3, [r4, #4]
  4037e0:	6123      	str	r3, [r4, #16]
  4037e2:	2300      	movs	r3, #0
  4037e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4037e8:	e79f      	b.n	40372a <_printf_i+0x126>
  4037ea:	6923      	ldr	r3, [r4, #16]
  4037ec:	462a      	mov	r2, r5
  4037ee:	4639      	mov	r1, r7
  4037f0:	4630      	mov	r0, r6
  4037f2:	47c0      	blx	r8
  4037f4:	3001      	adds	r0, #1
  4037f6:	d0a2      	beq.n	40373e <_printf_i+0x13a>
  4037f8:	6823      	ldr	r3, [r4, #0]
  4037fa:	079b      	lsls	r3, r3, #30
  4037fc:	d507      	bpl.n	40380e <_printf_i+0x20a>
  4037fe:	2500      	movs	r5, #0
  403800:	f104 0919 	add.w	r9, r4, #25
  403804:	68e3      	ldr	r3, [r4, #12]
  403806:	9a03      	ldr	r2, [sp, #12]
  403808:	1a9b      	subs	r3, r3, r2
  40380a:	429d      	cmp	r5, r3
  40380c:	db05      	blt.n	40381a <_printf_i+0x216>
  40380e:	68e0      	ldr	r0, [r4, #12]
  403810:	9b03      	ldr	r3, [sp, #12]
  403812:	4298      	cmp	r0, r3
  403814:	bfb8      	it	lt
  403816:	4618      	movlt	r0, r3
  403818:	e793      	b.n	403742 <_printf_i+0x13e>
  40381a:	2301      	movs	r3, #1
  40381c:	464a      	mov	r2, r9
  40381e:	4639      	mov	r1, r7
  403820:	4630      	mov	r0, r6
  403822:	47c0      	blx	r8
  403824:	3001      	adds	r0, #1
  403826:	d08a      	beq.n	40373e <_printf_i+0x13a>
  403828:	3501      	adds	r5, #1
  40382a:	e7eb      	b.n	403804 <_printf_i+0x200>
  40382c:	2b00      	cmp	r3, #0
  40382e:	d1a7      	bne.n	403780 <_printf_i+0x17c>
  403830:	780b      	ldrb	r3, [r1, #0]
  403832:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403836:	f104 0542 	add.w	r5, r4, #66	; 0x42
  40383a:	e765      	b.n	403708 <_printf_i+0x104>
  40383c:	00405ccf 	.word	0x00405ccf
  403840:	00405cbe 	.word	0x00405cbe

00403844 <iprintf>:
  403844:	b40f      	push	{r0, r1, r2, r3}
  403846:	4b0a      	ldr	r3, [pc, #40]	; (403870 <iprintf+0x2c>)
  403848:	b513      	push	{r0, r1, r4, lr}
  40384a:	681c      	ldr	r4, [r3, #0]
  40384c:	b124      	cbz	r4, 403858 <iprintf+0x14>
  40384e:	69a3      	ldr	r3, [r4, #24]
  403850:	b913      	cbnz	r3, 403858 <iprintf+0x14>
  403852:	4620      	mov	r0, r4
  403854:	f001 f81c 	bl	404890 <__sinit>
  403858:	ab05      	add	r3, sp, #20
  40385a:	9a04      	ldr	r2, [sp, #16]
  40385c:	68a1      	ldr	r1, [r4, #8]
  40385e:	9301      	str	r3, [sp, #4]
  403860:	4620      	mov	r0, r4
  403862:	f001 fd1f 	bl	4052a4 <_vfiprintf_r>
  403866:	b002      	add	sp, #8
  403868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40386c:	b004      	add	sp, #16
  40386e:	4770      	bx	lr
  403870:	20400048 	.word	0x20400048

00403874 <setbuf>:
  403874:	2900      	cmp	r1, #0
  403876:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40387a:	bf0c      	ite	eq
  40387c:	2202      	moveq	r2, #2
  40387e:	2200      	movne	r2, #0
  403880:	f000 b800 	b.w	403884 <setvbuf>

00403884 <setvbuf>:
  403884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403888:	461d      	mov	r5, r3
  40388a:	4b51      	ldr	r3, [pc, #324]	; (4039d0 <setvbuf+0x14c>)
  40388c:	681e      	ldr	r6, [r3, #0]
  40388e:	4604      	mov	r4, r0
  403890:	460f      	mov	r7, r1
  403892:	4690      	mov	r8, r2
  403894:	b126      	cbz	r6, 4038a0 <setvbuf+0x1c>
  403896:	69b3      	ldr	r3, [r6, #24]
  403898:	b913      	cbnz	r3, 4038a0 <setvbuf+0x1c>
  40389a:	4630      	mov	r0, r6
  40389c:	f000 fff8 	bl	404890 <__sinit>
  4038a0:	4b4c      	ldr	r3, [pc, #304]	; (4039d4 <setvbuf+0x150>)
  4038a2:	429c      	cmp	r4, r3
  4038a4:	d152      	bne.n	40394c <setvbuf+0xc8>
  4038a6:	6874      	ldr	r4, [r6, #4]
  4038a8:	f1b8 0f02 	cmp.w	r8, #2
  4038ac:	d006      	beq.n	4038bc <setvbuf+0x38>
  4038ae:	f1b8 0f01 	cmp.w	r8, #1
  4038b2:	f200 8089 	bhi.w	4039c8 <setvbuf+0x144>
  4038b6:	2d00      	cmp	r5, #0
  4038b8:	f2c0 8086 	blt.w	4039c8 <setvbuf+0x144>
  4038bc:	4621      	mov	r1, r4
  4038be:	4630      	mov	r0, r6
  4038c0:	f000 ff7c 	bl	4047bc <_fflush_r>
  4038c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4038c6:	b141      	cbz	r1, 4038da <setvbuf+0x56>
  4038c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4038cc:	4299      	cmp	r1, r3
  4038ce:	d002      	beq.n	4038d6 <setvbuf+0x52>
  4038d0:	4630      	mov	r0, r6
  4038d2:	f001 fc13 	bl	4050fc <_free_r>
  4038d6:	2300      	movs	r3, #0
  4038d8:	6363      	str	r3, [r4, #52]	; 0x34
  4038da:	2300      	movs	r3, #0
  4038dc:	61a3      	str	r3, [r4, #24]
  4038de:	6063      	str	r3, [r4, #4]
  4038e0:	89a3      	ldrh	r3, [r4, #12]
  4038e2:	061b      	lsls	r3, r3, #24
  4038e4:	d503      	bpl.n	4038ee <setvbuf+0x6a>
  4038e6:	6921      	ldr	r1, [r4, #16]
  4038e8:	4630      	mov	r0, r6
  4038ea:	f001 fc07 	bl	4050fc <_free_r>
  4038ee:	89a3      	ldrh	r3, [r4, #12]
  4038f0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4038f4:	f023 0303 	bic.w	r3, r3, #3
  4038f8:	f1b8 0f02 	cmp.w	r8, #2
  4038fc:	81a3      	strh	r3, [r4, #12]
  4038fe:	d05d      	beq.n	4039bc <setvbuf+0x138>
  403900:	ab01      	add	r3, sp, #4
  403902:	466a      	mov	r2, sp
  403904:	4621      	mov	r1, r4
  403906:	4630      	mov	r0, r6
  403908:	f001 f85a 	bl	4049c0 <__swhatbuf_r>
  40390c:	89a3      	ldrh	r3, [r4, #12]
  40390e:	4318      	orrs	r0, r3
  403910:	81a0      	strh	r0, [r4, #12]
  403912:	bb2d      	cbnz	r5, 403960 <setvbuf+0xdc>
  403914:	9d00      	ldr	r5, [sp, #0]
  403916:	4628      	mov	r0, r5
  403918:	f001 f8b6 	bl	404a88 <malloc>
  40391c:	4607      	mov	r7, r0
  40391e:	2800      	cmp	r0, #0
  403920:	d14e      	bne.n	4039c0 <setvbuf+0x13c>
  403922:	f8dd 9000 	ldr.w	r9, [sp]
  403926:	45a9      	cmp	r9, r5
  403928:	d13c      	bne.n	4039a4 <setvbuf+0x120>
  40392a:	f04f 30ff 	mov.w	r0, #4294967295
  40392e:	89a3      	ldrh	r3, [r4, #12]
  403930:	f043 0302 	orr.w	r3, r3, #2
  403934:	81a3      	strh	r3, [r4, #12]
  403936:	2300      	movs	r3, #0
  403938:	60a3      	str	r3, [r4, #8]
  40393a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40393e:	6023      	str	r3, [r4, #0]
  403940:	6123      	str	r3, [r4, #16]
  403942:	2301      	movs	r3, #1
  403944:	6163      	str	r3, [r4, #20]
  403946:	b003      	add	sp, #12
  403948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40394c:	4b22      	ldr	r3, [pc, #136]	; (4039d8 <setvbuf+0x154>)
  40394e:	429c      	cmp	r4, r3
  403950:	d101      	bne.n	403956 <setvbuf+0xd2>
  403952:	68b4      	ldr	r4, [r6, #8]
  403954:	e7a8      	b.n	4038a8 <setvbuf+0x24>
  403956:	4b21      	ldr	r3, [pc, #132]	; (4039dc <setvbuf+0x158>)
  403958:	429c      	cmp	r4, r3
  40395a:	bf08      	it	eq
  40395c:	68f4      	ldreq	r4, [r6, #12]
  40395e:	e7a3      	b.n	4038a8 <setvbuf+0x24>
  403960:	2f00      	cmp	r7, #0
  403962:	d0d8      	beq.n	403916 <setvbuf+0x92>
  403964:	69b3      	ldr	r3, [r6, #24]
  403966:	b913      	cbnz	r3, 40396e <setvbuf+0xea>
  403968:	4630      	mov	r0, r6
  40396a:	f000 ff91 	bl	404890 <__sinit>
  40396e:	f1b8 0f01 	cmp.w	r8, #1
  403972:	bf08      	it	eq
  403974:	89a3      	ldrheq	r3, [r4, #12]
  403976:	6027      	str	r7, [r4, #0]
  403978:	bf04      	itt	eq
  40397a:	f043 0301 	orreq.w	r3, r3, #1
  40397e:	81a3      	strheq	r3, [r4, #12]
  403980:	89a3      	ldrh	r3, [r4, #12]
  403982:	6127      	str	r7, [r4, #16]
  403984:	f013 0008 	ands.w	r0, r3, #8
  403988:	6165      	str	r5, [r4, #20]
  40398a:	d01b      	beq.n	4039c4 <setvbuf+0x140>
  40398c:	f013 0001 	ands.w	r0, r3, #1
  403990:	bf18      	it	ne
  403992:	426d      	negne	r5, r5
  403994:	f04f 0300 	mov.w	r3, #0
  403998:	bf1d      	ittte	ne
  40399a:	60a3      	strne	r3, [r4, #8]
  40399c:	61a5      	strne	r5, [r4, #24]
  40399e:	4618      	movne	r0, r3
  4039a0:	60a5      	streq	r5, [r4, #8]
  4039a2:	e7d0      	b.n	403946 <setvbuf+0xc2>
  4039a4:	4648      	mov	r0, r9
  4039a6:	f001 f86f 	bl	404a88 <malloc>
  4039aa:	4607      	mov	r7, r0
  4039ac:	2800      	cmp	r0, #0
  4039ae:	d0bc      	beq.n	40392a <setvbuf+0xa6>
  4039b0:	89a3      	ldrh	r3, [r4, #12]
  4039b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4039b6:	81a3      	strh	r3, [r4, #12]
  4039b8:	464d      	mov	r5, r9
  4039ba:	e7d3      	b.n	403964 <setvbuf+0xe0>
  4039bc:	2000      	movs	r0, #0
  4039be:	e7b6      	b.n	40392e <setvbuf+0xaa>
  4039c0:	46a9      	mov	r9, r5
  4039c2:	e7f5      	b.n	4039b0 <setvbuf+0x12c>
  4039c4:	60a0      	str	r0, [r4, #8]
  4039c6:	e7be      	b.n	403946 <setvbuf+0xc2>
  4039c8:	f04f 30ff 	mov.w	r0, #4294967295
  4039cc:	e7bb      	b.n	403946 <setvbuf+0xc2>
  4039ce:	bf00      	nop
  4039d0:	20400048 	.word	0x20400048
  4039d4:	00405d10 	.word	0x00405d10
  4039d8:	00405d30 	.word	0x00405d30
  4039dc:	00405cf0 	.word	0x00405cf0

004039e0 <strlen>:
  4039e0:	4603      	mov	r3, r0
  4039e2:	f813 2b01 	ldrb.w	r2, [r3], #1
  4039e6:	2a00      	cmp	r2, #0
  4039e8:	d1fb      	bne.n	4039e2 <strlen+0x2>
  4039ea:	1a18      	subs	r0, r3, r0
  4039ec:	3801      	subs	r0, #1
  4039ee:	4770      	bx	lr

004039f0 <quorem>:
  4039f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4039f4:	6903      	ldr	r3, [r0, #16]
  4039f6:	690c      	ldr	r4, [r1, #16]
  4039f8:	429c      	cmp	r4, r3
  4039fa:	4680      	mov	r8, r0
  4039fc:	f300 8082 	bgt.w	403b04 <quorem+0x114>
  403a00:	3c01      	subs	r4, #1
  403a02:	f101 0714 	add.w	r7, r1, #20
  403a06:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  403a0a:	f100 0614 	add.w	r6, r0, #20
  403a0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  403a12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  403a16:	eb06 030e 	add.w	r3, r6, lr
  403a1a:	3501      	adds	r5, #1
  403a1c:	eb07 090e 	add.w	r9, r7, lr
  403a20:	9301      	str	r3, [sp, #4]
  403a22:	fbb0 f5f5 	udiv	r5, r0, r5
  403a26:	b395      	cbz	r5, 403a8e <quorem+0x9e>
  403a28:	f04f 0a00 	mov.w	sl, #0
  403a2c:	4638      	mov	r0, r7
  403a2e:	46b4      	mov	ip, r6
  403a30:	46d3      	mov	fp, sl
  403a32:	f850 2b04 	ldr.w	r2, [r0], #4
  403a36:	b293      	uxth	r3, r2
  403a38:	fb05 a303 	mla	r3, r5, r3, sl
  403a3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  403a40:	b29b      	uxth	r3, r3
  403a42:	ebab 0303 	sub.w	r3, fp, r3
  403a46:	0c12      	lsrs	r2, r2, #16
  403a48:	f8bc b000 	ldrh.w	fp, [ip]
  403a4c:	fb05 a202 	mla	r2, r5, r2, sl
  403a50:	fa13 f38b 	uxtah	r3, r3, fp
  403a54:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  403a58:	fa1f fb82 	uxth.w	fp, r2
  403a5c:	f8dc 2000 	ldr.w	r2, [ip]
  403a60:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  403a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403a68:	b29b      	uxth	r3, r3
  403a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403a6e:	4581      	cmp	r9, r0
  403a70:	ea4f 4b22 	mov.w	fp, r2, asr #16
  403a74:	f84c 3b04 	str.w	r3, [ip], #4
  403a78:	d2db      	bcs.n	403a32 <quorem+0x42>
  403a7a:	f856 300e 	ldr.w	r3, [r6, lr]
  403a7e:	b933      	cbnz	r3, 403a8e <quorem+0x9e>
  403a80:	9b01      	ldr	r3, [sp, #4]
  403a82:	3b04      	subs	r3, #4
  403a84:	429e      	cmp	r6, r3
  403a86:	461a      	mov	r2, r3
  403a88:	d330      	bcc.n	403aec <quorem+0xfc>
  403a8a:	f8c8 4010 	str.w	r4, [r8, #16]
  403a8e:	4640      	mov	r0, r8
  403a90:	f001 fa5f 	bl	404f52 <__mcmp>
  403a94:	2800      	cmp	r0, #0
  403a96:	db25      	blt.n	403ae4 <quorem+0xf4>
  403a98:	3501      	adds	r5, #1
  403a9a:	4630      	mov	r0, r6
  403a9c:	f04f 0e00 	mov.w	lr, #0
  403aa0:	f857 2b04 	ldr.w	r2, [r7], #4
  403aa4:	f8d0 c000 	ldr.w	ip, [r0]
  403aa8:	b293      	uxth	r3, r2
  403aaa:	ebae 0303 	sub.w	r3, lr, r3
  403aae:	0c12      	lsrs	r2, r2, #16
  403ab0:	fa13 f38c 	uxtah	r3, r3, ip
  403ab4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  403ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403abc:	b29b      	uxth	r3, r3
  403abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403ac2:	45b9      	cmp	r9, r7
  403ac4:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403ac8:	f840 3b04 	str.w	r3, [r0], #4
  403acc:	d2e8      	bcs.n	403aa0 <quorem+0xb0>
  403ace:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403ad2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  403ad6:	b92a      	cbnz	r2, 403ae4 <quorem+0xf4>
  403ad8:	3b04      	subs	r3, #4
  403ada:	429e      	cmp	r6, r3
  403adc:	461a      	mov	r2, r3
  403ade:	d30b      	bcc.n	403af8 <quorem+0x108>
  403ae0:	f8c8 4010 	str.w	r4, [r8, #16]
  403ae4:	4628      	mov	r0, r5
  403ae6:	b003      	add	sp, #12
  403ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403aec:	6812      	ldr	r2, [r2, #0]
  403aee:	3b04      	subs	r3, #4
  403af0:	2a00      	cmp	r2, #0
  403af2:	d1ca      	bne.n	403a8a <quorem+0x9a>
  403af4:	3c01      	subs	r4, #1
  403af6:	e7c5      	b.n	403a84 <quorem+0x94>
  403af8:	6812      	ldr	r2, [r2, #0]
  403afa:	3b04      	subs	r3, #4
  403afc:	2a00      	cmp	r2, #0
  403afe:	d1ef      	bne.n	403ae0 <quorem+0xf0>
  403b00:	3c01      	subs	r4, #1
  403b02:	e7ea      	b.n	403ada <quorem+0xea>
  403b04:	2000      	movs	r0, #0
  403b06:	e7ee      	b.n	403ae6 <quorem+0xf6>

00403b08 <_dtoa_r>:
  403b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b0c:	6a46      	ldr	r6, [r0, #36]	; 0x24
  403b0e:	b095      	sub	sp, #84	; 0x54
  403b10:	4604      	mov	r4, r0
  403b12:	9d21      	ldr	r5, [sp, #132]	; 0x84
  403b14:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403b18:	b93e      	cbnz	r6, 403b2a <_dtoa_r+0x22>
  403b1a:	2010      	movs	r0, #16
  403b1c:	f000 ffb4 	bl	404a88 <malloc>
  403b20:	6260      	str	r0, [r4, #36]	; 0x24
  403b22:	6046      	str	r6, [r0, #4]
  403b24:	6086      	str	r6, [r0, #8]
  403b26:	6006      	str	r6, [r0, #0]
  403b28:	60c6      	str	r6, [r0, #12]
  403b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403b2c:	6819      	ldr	r1, [r3, #0]
  403b2e:	b151      	cbz	r1, 403b46 <_dtoa_r+0x3e>
  403b30:	685a      	ldr	r2, [r3, #4]
  403b32:	604a      	str	r2, [r1, #4]
  403b34:	2301      	movs	r3, #1
  403b36:	4093      	lsls	r3, r2
  403b38:	608b      	str	r3, [r1, #8]
  403b3a:	4620      	mov	r0, r4
  403b3c:	f001 f834 	bl	404ba8 <_Bfree>
  403b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403b42:	2200      	movs	r2, #0
  403b44:	601a      	str	r2, [r3, #0]
  403b46:	9b03      	ldr	r3, [sp, #12]
  403b48:	2b00      	cmp	r3, #0
  403b4a:	bfbf      	itttt	lt
  403b4c:	2301      	movlt	r3, #1
  403b4e:	602b      	strlt	r3, [r5, #0]
  403b50:	9b03      	ldrlt	r3, [sp, #12]
  403b52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  403b56:	bfb2      	itee	lt
  403b58:	9303      	strlt	r3, [sp, #12]
  403b5a:	2300      	movge	r3, #0
  403b5c:	602b      	strge	r3, [r5, #0]
  403b5e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  403b62:	4ba9      	ldr	r3, [pc, #676]	; (403e08 <_dtoa_r+0x300>)
  403b64:	ea33 0309 	bics.w	r3, r3, r9
  403b68:	d11b      	bne.n	403ba2 <_dtoa_r+0x9a>
  403b6a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403b6c:	f242 730f 	movw	r3, #9999	; 0x270f
  403b70:	6013      	str	r3, [r2, #0]
  403b72:	9b02      	ldr	r3, [sp, #8]
  403b74:	b923      	cbnz	r3, 403b80 <_dtoa_r+0x78>
  403b76:	f3c9 0013 	ubfx	r0, r9, #0, #20
  403b7a:	2800      	cmp	r0, #0
  403b7c:	f000 8581 	beq.w	404682 <_dtoa_r+0xb7a>
  403b80:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403b82:	b953      	cbnz	r3, 403b9a <_dtoa_r+0x92>
  403b84:	4ba1      	ldr	r3, [pc, #644]	; (403e0c <_dtoa_r+0x304>)
  403b86:	e021      	b.n	403bcc <_dtoa_r+0xc4>
  403b88:	4ba1      	ldr	r3, [pc, #644]	; (403e10 <_dtoa_r+0x308>)
  403b8a:	9306      	str	r3, [sp, #24]
  403b8c:	3308      	adds	r3, #8
  403b8e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403b90:	6013      	str	r3, [r2, #0]
  403b92:	9806      	ldr	r0, [sp, #24]
  403b94:	b015      	add	sp, #84	; 0x54
  403b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b9a:	4b9c      	ldr	r3, [pc, #624]	; (403e0c <_dtoa_r+0x304>)
  403b9c:	9306      	str	r3, [sp, #24]
  403b9e:	3303      	adds	r3, #3
  403ba0:	e7f5      	b.n	403b8e <_dtoa_r+0x86>
  403ba2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  403ba6:	2200      	movs	r2, #0
  403ba8:	2300      	movs	r3, #0
  403baa:	4630      	mov	r0, r6
  403bac:	4639      	mov	r1, r7
  403bae:	f7ff f959 	bl	402e64 <__aeabi_dcmpeq>
  403bb2:	4680      	mov	r8, r0
  403bb4:	b160      	cbz	r0, 403bd0 <_dtoa_r+0xc8>
  403bb6:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403bb8:	2301      	movs	r3, #1
  403bba:	6013      	str	r3, [r2, #0]
  403bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403bbe:	2b00      	cmp	r3, #0
  403bc0:	f000 855c 	beq.w	40467c <_dtoa_r+0xb74>
  403bc4:	4b93      	ldr	r3, [pc, #588]	; (403e14 <_dtoa_r+0x30c>)
  403bc6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403bc8:	6013      	str	r3, [r2, #0]
  403bca:	3b01      	subs	r3, #1
  403bcc:	9306      	str	r3, [sp, #24]
  403bce:	e7e0      	b.n	403b92 <_dtoa_r+0x8a>
  403bd0:	ab12      	add	r3, sp, #72	; 0x48
  403bd2:	9301      	str	r3, [sp, #4]
  403bd4:	ab13      	add	r3, sp, #76	; 0x4c
  403bd6:	9300      	str	r3, [sp, #0]
  403bd8:	4632      	mov	r2, r6
  403bda:	463b      	mov	r3, r7
  403bdc:	4620      	mov	r0, r4
  403bde:	f001 fa30 	bl	405042 <__d2b>
  403be2:	f3c9 550a 	ubfx	r5, r9, #20, #11
  403be6:	4682      	mov	sl, r0
  403be8:	2d00      	cmp	r5, #0
  403bea:	d07c      	beq.n	403ce6 <_dtoa_r+0x1de>
  403bec:	f3c7 0313 	ubfx	r3, r7, #0, #20
  403bf0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  403bf4:	4630      	mov	r0, r6
  403bf6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403bfa:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  403bfe:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  403c02:	2200      	movs	r2, #0
  403c04:	4b84      	ldr	r3, [pc, #528]	; (403e18 <_dtoa_r+0x310>)
  403c06:	f7fe fd11 	bl	40262c <__aeabi_dsub>
  403c0a:	a379      	add	r3, pc, #484	; (adr r3, 403df0 <_dtoa_r+0x2e8>)
  403c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c10:	f7fe fec0 	bl	402994 <__aeabi_dmul>
  403c14:	a378      	add	r3, pc, #480	; (adr r3, 403df8 <_dtoa_r+0x2f0>)
  403c16:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c1a:	f7fe fd09 	bl	402630 <__adddf3>
  403c1e:	4606      	mov	r6, r0
  403c20:	4628      	mov	r0, r5
  403c22:	460f      	mov	r7, r1
  403c24:	f7fe fe50 	bl	4028c8 <__aeabi_i2d>
  403c28:	a375      	add	r3, pc, #468	; (adr r3, 403e00 <_dtoa_r+0x2f8>)
  403c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c2e:	f7fe feb1 	bl	402994 <__aeabi_dmul>
  403c32:	4602      	mov	r2, r0
  403c34:	460b      	mov	r3, r1
  403c36:	4630      	mov	r0, r6
  403c38:	4639      	mov	r1, r7
  403c3a:	f7fe fcf9 	bl	402630 <__adddf3>
  403c3e:	4606      	mov	r6, r0
  403c40:	460f      	mov	r7, r1
  403c42:	f7ff f941 	bl	402ec8 <__aeabi_d2iz>
  403c46:	2200      	movs	r2, #0
  403c48:	4683      	mov	fp, r0
  403c4a:	2300      	movs	r3, #0
  403c4c:	4630      	mov	r0, r6
  403c4e:	4639      	mov	r1, r7
  403c50:	f7ff f912 	bl	402e78 <__aeabi_dcmplt>
  403c54:	b158      	cbz	r0, 403c6e <_dtoa_r+0x166>
  403c56:	4658      	mov	r0, fp
  403c58:	f7fe fe36 	bl	4028c8 <__aeabi_i2d>
  403c5c:	4602      	mov	r2, r0
  403c5e:	460b      	mov	r3, r1
  403c60:	4630      	mov	r0, r6
  403c62:	4639      	mov	r1, r7
  403c64:	f7ff f8fe 	bl	402e64 <__aeabi_dcmpeq>
  403c68:	b908      	cbnz	r0, 403c6e <_dtoa_r+0x166>
  403c6a:	f10b 3bff 	add.w	fp, fp, #4294967295
  403c6e:	f1bb 0f16 	cmp.w	fp, #22
  403c72:	d857      	bhi.n	403d24 <_dtoa_r+0x21c>
  403c74:	4969      	ldr	r1, [pc, #420]	; (403e1c <_dtoa_r+0x314>)
  403c76:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  403c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
  403c82:	f7ff f917 	bl	402eb4 <__aeabi_dcmpgt>
  403c86:	2800      	cmp	r0, #0
  403c88:	d04e      	beq.n	403d28 <_dtoa_r+0x220>
  403c8a:	f10b 3bff 	add.w	fp, fp, #4294967295
  403c8e:	2300      	movs	r3, #0
  403c90:	930d      	str	r3, [sp, #52]	; 0x34
  403c92:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403c94:	1b5d      	subs	r5, r3, r5
  403c96:	1e6b      	subs	r3, r5, #1
  403c98:	9307      	str	r3, [sp, #28]
  403c9a:	bf43      	ittte	mi
  403c9c:	2300      	movmi	r3, #0
  403c9e:	f1c5 0801 	rsbmi	r8, r5, #1
  403ca2:	9307      	strmi	r3, [sp, #28]
  403ca4:	f04f 0800 	movpl.w	r8, #0
  403ca8:	f1bb 0f00 	cmp.w	fp, #0
  403cac:	db3e      	blt.n	403d2c <_dtoa_r+0x224>
  403cae:	9b07      	ldr	r3, [sp, #28]
  403cb0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  403cb4:	445b      	add	r3, fp
  403cb6:	9307      	str	r3, [sp, #28]
  403cb8:	2300      	movs	r3, #0
  403cba:	9308      	str	r3, [sp, #32]
  403cbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403cbe:	2b09      	cmp	r3, #9
  403cc0:	f200 80b0 	bhi.w	403e24 <_dtoa_r+0x31c>
  403cc4:	2b05      	cmp	r3, #5
  403cc6:	bfc4      	itt	gt
  403cc8:	3b04      	subgt	r3, #4
  403cca:	931e      	strgt	r3, [sp, #120]	; 0x78
  403ccc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403cce:	f1a3 0302 	sub.w	r3, r3, #2
  403cd2:	bfcc      	ite	gt
  403cd4:	2600      	movgt	r6, #0
  403cd6:	2601      	movle	r6, #1
  403cd8:	2b03      	cmp	r3, #3
  403cda:	f200 80af 	bhi.w	403e3c <_dtoa_r+0x334>
  403cde:	e8df f003 	tbb	[pc, r3]
  403ce2:	8583      	.short	0x8583
  403ce4:	772d      	.short	0x772d
  403ce6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403ce8:	9d12      	ldr	r5, [sp, #72]	; 0x48
  403cea:	441d      	add	r5, r3
  403cec:	f205 4332 	addw	r3, r5, #1074	; 0x432
  403cf0:	2b20      	cmp	r3, #32
  403cf2:	dd11      	ble.n	403d18 <_dtoa_r+0x210>
  403cf4:	9a02      	ldr	r2, [sp, #8]
  403cf6:	f205 4012 	addw	r0, r5, #1042	; 0x412
  403cfa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  403cfe:	fa22 f000 	lsr.w	r0, r2, r0
  403d02:	fa09 f303 	lsl.w	r3, r9, r3
  403d06:	4318      	orrs	r0, r3
  403d08:	f7fe fdce 	bl	4028a8 <__aeabi_ui2d>
  403d0c:	2301      	movs	r3, #1
  403d0e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403d12:	3d01      	subs	r5, #1
  403d14:	9310      	str	r3, [sp, #64]	; 0x40
  403d16:	e774      	b.n	403c02 <_dtoa_r+0xfa>
  403d18:	f1c3 0020 	rsb	r0, r3, #32
  403d1c:	9b02      	ldr	r3, [sp, #8]
  403d1e:	fa03 f000 	lsl.w	r0, r3, r0
  403d22:	e7f1      	b.n	403d08 <_dtoa_r+0x200>
  403d24:	2301      	movs	r3, #1
  403d26:	e7b3      	b.n	403c90 <_dtoa_r+0x188>
  403d28:	900d      	str	r0, [sp, #52]	; 0x34
  403d2a:	e7b2      	b.n	403c92 <_dtoa_r+0x18a>
  403d2c:	f1cb 0300 	rsb	r3, fp, #0
  403d30:	9308      	str	r3, [sp, #32]
  403d32:	2300      	movs	r3, #0
  403d34:	eba8 080b 	sub.w	r8, r8, fp
  403d38:	930c      	str	r3, [sp, #48]	; 0x30
  403d3a:	e7bf      	b.n	403cbc <_dtoa_r+0x1b4>
  403d3c:	2301      	movs	r3, #1
  403d3e:	9309      	str	r3, [sp, #36]	; 0x24
  403d40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403d42:	2b00      	cmp	r3, #0
  403d44:	dd7d      	ble.n	403e42 <_dtoa_r+0x33a>
  403d46:	9304      	str	r3, [sp, #16]
  403d48:	4699      	mov	r9, r3
  403d4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  403d4c:	2200      	movs	r2, #0
  403d4e:	606a      	str	r2, [r5, #4]
  403d50:	2104      	movs	r1, #4
  403d52:	f101 0214 	add.w	r2, r1, #20
  403d56:	429a      	cmp	r2, r3
  403d58:	d978      	bls.n	403e4c <_dtoa_r+0x344>
  403d5a:	6869      	ldr	r1, [r5, #4]
  403d5c:	4620      	mov	r0, r4
  403d5e:	f000 feef 	bl	404b40 <_Balloc>
  403d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403d64:	6028      	str	r0, [r5, #0]
  403d66:	681b      	ldr	r3, [r3, #0]
  403d68:	9306      	str	r3, [sp, #24]
  403d6a:	f1b9 0f0e 	cmp.w	r9, #14
  403d6e:	f200 80ee 	bhi.w	403f4e <_dtoa_r+0x446>
  403d72:	2e00      	cmp	r6, #0
  403d74:	f000 80eb 	beq.w	403f4e <_dtoa_r+0x446>
  403d78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403d7c:	f1bb 0f00 	cmp.w	fp, #0
  403d80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  403d84:	dd77      	ble.n	403e76 <_dtoa_r+0x36e>
  403d86:	4a25      	ldr	r2, [pc, #148]	; (403e1c <_dtoa_r+0x314>)
  403d88:	f00b 030f 	and.w	r3, fp, #15
  403d8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403d90:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d94:	ea4f 162b 	mov.w	r6, fp, asr #4
  403d98:	06f0      	lsls	r0, r6, #27
  403d9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  403d9e:	d55a      	bpl.n	403e56 <_dtoa_r+0x34e>
  403da0:	4b1f      	ldr	r3, [pc, #124]	; (403e20 <_dtoa_r+0x318>)
  403da2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403da6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403daa:	f7fe ff1d 	bl	402be8 <__aeabi_ddiv>
  403dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403db2:	f006 060f 	and.w	r6, r6, #15
  403db6:	2503      	movs	r5, #3
  403db8:	4f19      	ldr	r7, [pc, #100]	; (403e20 <_dtoa_r+0x318>)
  403dba:	2e00      	cmp	r6, #0
  403dbc:	d14d      	bne.n	403e5a <_dtoa_r+0x352>
  403dbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403dc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403dc6:	f7fe ff0f 	bl	402be8 <__aeabi_ddiv>
  403dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403dce:	e06c      	b.n	403eaa <_dtoa_r+0x3a2>
  403dd0:	2301      	movs	r3, #1
  403dd2:	9309      	str	r3, [sp, #36]	; 0x24
  403dd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403dd6:	445b      	add	r3, fp
  403dd8:	f103 0901 	add.w	r9, r3, #1
  403ddc:	9304      	str	r3, [sp, #16]
  403dde:	464b      	mov	r3, r9
  403de0:	2b01      	cmp	r3, #1
  403de2:	bfb8      	it	lt
  403de4:	2301      	movlt	r3, #1
  403de6:	e7b0      	b.n	403d4a <_dtoa_r+0x242>
  403de8:	2300      	movs	r3, #0
  403dea:	e7a8      	b.n	403d3e <_dtoa_r+0x236>
  403dec:	2300      	movs	r3, #0
  403dee:	e7f0      	b.n	403dd2 <_dtoa_r+0x2ca>
  403df0:	636f4361 	.word	0x636f4361
  403df4:	3fd287a7 	.word	0x3fd287a7
  403df8:	8b60c8b3 	.word	0x8b60c8b3
  403dfc:	3fc68a28 	.word	0x3fc68a28
  403e00:	509f79fb 	.word	0x509f79fb
  403e04:	3fd34413 	.word	0x3fd34413
  403e08:	7ff00000 	.word	0x7ff00000
  403e0c:	00405ce9 	.word	0x00405ce9
  403e10:	00405ce0 	.word	0x00405ce0
  403e14:	00405cbd 	.word	0x00405cbd
  403e18:	3ff80000 	.word	0x3ff80000
  403e1c:	00405d78 	.word	0x00405d78
  403e20:	00405d50 	.word	0x00405d50
  403e24:	2601      	movs	r6, #1
  403e26:	2300      	movs	r3, #0
  403e28:	931e      	str	r3, [sp, #120]	; 0x78
  403e2a:	9609      	str	r6, [sp, #36]	; 0x24
  403e2c:	f04f 33ff 	mov.w	r3, #4294967295
  403e30:	9304      	str	r3, [sp, #16]
  403e32:	4699      	mov	r9, r3
  403e34:	2200      	movs	r2, #0
  403e36:	2312      	movs	r3, #18
  403e38:	921f      	str	r2, [sp, #124]	; 0x7c
  403e3a:	e786      	b.n	403d4a <_dtoa_r+0x242>
  403e3c:	2301      	movs	r3, #1
  403e3e:	9309      	str	r3, [sp, #36]	; 0x24
  403e40:	e7f4      	b.n	403e2c <_dtoa_r+0x324>
  403e42:	2301      	movs	r3, #1
  403e44:	9304      	str	r3, [sp, #16]
  403e46:	4699      	mov	r9, r3
  403e48:	461a      	mov	r2, r3
  403e4a:	e7f5      	b.n	403e38 <_dtoa_r+0x330>
  403e4c:	686a      	ldr	r2, [r5, #4]
  403e4e:	3201      	adds	r2, #1
  403e50:	606a      	str	r2, [r5, #4]
  403e52:	0049      	lsls	r1, r1, #1
  403e54:	e77d      	b.n	403d52 <_dtoa_r+0x24a>
  403e56:	2502      	movs	r5, #2
  403e58:	e7ae      	b.n	403db8 <_dtoa_r+0x2b0>
  403e5a:	07f1      	lsls	r1, r6, #31
  403e5c:	d508      	bpl.n	403e70 <_dtoa_r+0x368>
  403e5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403e62:	e9d7 2300 	ldrd	r2, r3, [r7]
  403e66:	f7fe fd95 	bl	402994 <__aeabi_dmul>
  403e6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403e6e:	3501      	adds	r5, #1
  403e70:	1076      	asrs	r6, r6, #1
  403e72:	3708      	adds	r7, #8
  403e74:	e7a1      	b.n	403dba <_dtoa_r+0x2b2>
  403e76:	f000 80a5 	beq.w	403fc4 <_dtoa_r+0x4bc>
  403e7a:	f1cb 0600 	rsb	r6, fp, #0
  403e7e:	4ba3      	ldr	r3, [pc, #652]	; (40410c <_dtoa_r+0x604>)
  403e80:	4fa3      	ldr	r7, [pc, #652]	; (404110 <_dtoa_r+0x608>)
  403e82:	f006 020f 	and.w	r2, r6, #15
  403e86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403e92:	f7fe fd7f 	bl	402994 <__aeabi_dmul>
  403e96:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403e9a:	1136      	asrs	r6, r6, #4
  403e9c:	2300      	movs	r3, #0
  403e9e:	2502      	movs	r5, #2
  403ea0:	2e00      	cmp	r6, #0
  403ea2:	f040 8084 	bne.w	403fae <_dtoa_r+0x4a6>
  403ea6:	2b00      	cmp	r3, #0
  403ea8:	d18f      	bne.n	403dca <_dtoa_r+0x2c2>
  403eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403eac:	2b00      	cmp	r3, #0
  403eae:	f000 808b 	beq.w	403fc8 <_dtoa_r+0x4c0>
  403eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403eb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  403eba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403ebe:	2200      	movs	r2, #0
  403ec0:	4b94      	ldr	r3, [pc, #592]	; (404114 <_dtoa_r+0x60c>)
  403ec2:	f7fe ffd9 	bl	402e78 <__aeabi_dcmplt>
  403ec6:	2800      	cmp	r0, #0
  403ec8:	d07e      	beq.n	403fc8 <_dtoa_r+0x4c0>
  403eca:	f1b9 0f00 	cmp.w	r9, #0
  403ece:	d07b      	beq.n	403fc8 <_dtoa_r+0x4c0>
  403ed0:	9b04      	ldr	r3, [sp, #16]
  403ed2:	2b00      	cmp	r3, #0
  403ed4:	dd37      	ble.n	403f46 <_dtoa_r+0x43e>
  403ed6:	2200      	movs	r2, #0
  403ed8:	4b8f      	ldr	r3, [pc, #572]	; (404118 <_dtoa_r+0x610>)
  403eda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403ede:	f7fe fd59 	bl	402994 <__aeabi_dmul>
  403ee2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403ee6:	9e04      	ldr	r6, [sp, #16]
  403ee8:	f10b 37ff 	add.w	r7, fp, #4294967295
  403eec:	3501      	adds	r5, #1
  403eee:	4628      	mov	r0, r5
  403ef0:	f7fe fcea 	bl	4028c8 <__aeabi_i2d>
  403ef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403ef8:	f7fe fd4c 	bl	402994 <__aeabi_dmul>
  403efc:	4b87      	ldr	r3, [pc, #540]	; (40411c <_dtoa_r+0x614>)
  403efe:	2200      	movs	r2, #0
  403f00:	f7fe fb96 	bl	402630 <__adddf3>
  403f04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403f0a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  403f0e:	950b      	str	r5, [sp, #44]	; 0x2c
  403f10:	2e00      	cmp	r6, #0
  403f12:	d15c      	bne.n	403fce <_dtoa_r+0x4c6>
  403f14:	2200      	movs	r2, #0
  403f16:	4b82      	ldr	r3, [pc, #520]	; (404120 <_dtoa_r+0x618>)
  403f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403f1c:	f7fe fb86 	bl	40262c <__aeabi_dsub>
  403f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403f22:	462b      	mov	r3, r5
  403f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403f28:	f7fe ffc4 	bl	402eb4 <__aeabi_dcmpgt>
  403f2c:	2800      	cmp	r0, #0
  403f2e:	f040 82f7 	bne.w	404520 <_dtoa_r+0xa18>
  403f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403f34:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  403f38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403f3c:	f7fe ff9c 	bl	402e78 <__aeabi_dcmplt>
  403f40:	2800      	cmp	r0, #0
  403f42:	f040 82eb 	bne.w	40451c <_dtoa_r+0xa14>
  403f46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  403f4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403f4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403f50:	2b00      	cmp	r3, #0
  403f52:	f2c0 8151 	blt.w	4041f8 <_dtoa_r+0x6f0>
  403f56:	f1bb 0f0e 	cmp.w	fp, #14
  403f5a:	f300 814d 	bgt.w	4041f8 <_dtoa_r+0x6f0>
  403f5e:	4b6b      	ldr	r3, [pc, #428]	; (40410c <_dtoa_r+0x604>)
  403f60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  403f64:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f68:	e9cd 2304 	strd	r2, r3, [sp, #16]
  403f6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403f6e:	2b00      	cmp	r3, #0
  403f70:	f280 80da 	bge.w	404128 <_dtoa_r+0x620>
  403f74:	f1b9 0f00 	cmp.w	r9, #0
  403f78:	f300 80d6 	bgt.w	404128 <_dtoa_r+0x620>
  403f7c:	f040 82cd 	bne.w	40451a <_dtoa_r+0xa12>
  403f80:	2200      	movs	r2, #0
  403f82:	4b67      	ldr	r3, [pc, #412]	; (404120 <_dtoa_r+0x618>)
  403f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403f88:	f7fe fd04 	bl	402994 <__aeabi_dmul>
  403f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403f90:	f7fe ff86 	bl	402ea0 <__aeabi_dcmpge>
  403f94:	464e      	mov	r6, r9
  403f96:	464f      	mov	r7, r9
  403f98:	2800      	cmp	r0, #0
  403f9a:	f040 82a4 	bne.w	4044e6 <_dtoa_r+0x9de>
  403f9e:	9b06      	ldr	r3, [sp, #24]
  403fa0:	9a06      	ldr	r2, [sp, #24]
  403fa2:	1c5d      	adds	r5, r3, #1
  403fa4:	2331      	movs	r3, #49	; 0x31
  403fa6:	7013      	strb	r3, [r2, #0]
  403fa8:	f10b 0b01 	add.w	fp, fp, #1
  403fac:	e29f      	b.n	4044ee <_dtoa_r+0x9e6>
  403fae:	07f2      	lsls	r2, r6, #31
  403fb0:	d505      	bpl.n	403fbe <_dtoa_r+0x4b6>
  403fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
  403fb6:	f7fe fced 	bl	402994 <__aeabi_dmul>
  403fba:	3501      	adds	r5, #1
  403fbc:	2301      	movs	r3, #1
  403fbe:	1076      	asrs	r6, r6, #1
  403fc0:	3708      	adds	r7, #8
  403fc2:	e76d      	b.n	403ea0 <_dtoa_r+0x398>
  403fc4:	2502      	movs	r5, #2
  403fc6:	e770      	b.n	403eaa <_dtoa_r+0x3a2>
  403fc8:	465f      	mov	r7, fp
  403fca:	464e      	mov	r6, r9
  403fcc:	e78f      	b.n	403eee <_dtoa_r+0x3e6>
  403fce:	9a06      	ldr	r2, [sp, #24]
  403fd0:	4b4e      	ldr	r3, [pc, #312]	; (40410c <_dtoa_r+0x604>)
  403fd2:	4432      	add	r2, r6
  403fd4:	9211      	str	r2, [sp, #68]	; 0x44
  403fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403fd8:	1e71      	subs	r1, r6, #1
  403fda:	2a00      	cmp	r2, #0
  403fdc:	d048      	beq.n	404070 <_dtoa_r+0x568>
  403fde:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  403fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
  403fe6:	2000      	movs	r0, #0
  403fe8:	494e      	ldr	r1, [pc, #312]	; (404124 <_dtoa_r+0x61c>)
  403fea:	f7fe fdfd 	bl	402be8 <__aeabi_ddiv>
  403fee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403ff2:	f7fe fb1b 	bl	40262c <__aeabi_dsub>
  403ff6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403ffa:	9d06      	ldr	r5, [sp, #24]
  403ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404000:	f7fe ff62 	bl	402ec8 <__aeabi_d2iz>
  404004:	4606      	mov	r6, r0
  404006:	f7fe fc5f 	bl	4028c8 <__aeabi_i2d>
  40400a:	4602      	mov	r2, r0
  40400c:	460b      	mov	r3, r1
  40400e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404012:	f7fe fb0b 	bl	40262c <__aeabi_dsub>
  404016:	3630      	adds	r6, #48	; 0x30
  404018:	f805 6b01 	strb.w	r6, [r5], #1
  40401c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404020:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404024:	f7fe ff28 	bl	402e78 <__aeabi_dcmplt>
  404028:	2800      	cmp	r0, #0
  40402a:	d165      	bne.n	4040f8 <_dtoa_r+0x5f0>
  40402c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404030:	2000      	movs	r0, #0
  404032:	4938      	ldr	r1, [pc, #224]	; (404114 <_dtoa_r+0x60c>)
  404034:	f7fe fafa 	bl	40262c <__aeabi_dsub>
  404038:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40403c:	f7fe ff1c 	bl	402e78 <__aeabi_dcmplt>
  404040:	2800      	cmp	r0, #0
  404042:	f040 80b9 	bne.w	4041b8 <_dtoa_r+0x6b0>
  404046:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404048:	429d      	cmp	r5, r3
  40404a:	f43f af7c 	beq.w	403f46 <_dtoa_r+0x43e>
  40404e:	2200      	movs	r2, #0
  404050:	4b31      	ldr	r3, [pc, #196]	; (404118 <_dtoa_r+0x610>)
  404052:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404056:	f7fe fc9d 	bl	402994 <__aeabi_dmul>
  40405a:	2200      	movs	r2, #0
  40405c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404060:	4b2d      	ldr	r3, [pc, #180]	; (404118 <_dtoa_r+0x610>)
  404062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404066:	f7fe fc95 	bl	402994 <__aeabi_dmul>
  40406a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40406e:	e7c5      	b.n	403ffc <_dtoa_r+0x4f4>
  404070:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404074:	e9d1 0100 	ldrd	r0, r1, [r1]
  404078:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40407c:	f7fe fc8a 	bl	402994 <__aeabi_dmul>
  404080:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404084:	9d06      	ldr	r5, [sp, #24]
  404086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40408a:	f7fe ff1d 	bl	402ec8 <__aeabi_d2iz>
  40408e:	4606      	mov	r6, r0
  404090:	f7fe fc1a 	bl	4028c8 <__aeabi_i2d>
  404094:	3630      	adds	r6, #48	; 0x30
  404096:	4602      	mov	r2, r0
  404098:	460b      	mov	r3, r1
  40409a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40409e:	f7fe fac5 	bl	40262c <__aeabi_dsub>
  4040a2:	f805 6b01 	strb.w	r6, [r5], #1
  4040a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4040a8:	42ab      	cmp	r3, r5
  4040aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4040ae:	f04f 0200 	mov.w	r2, #0
  4040b2:	d125      	bne.n	404100 <_dtoa_r+0x5f8>
  4040b4:	4b1b      	ldr	r3, [pc, #108]	; (404124 <_dtoa_r+0x61c>)
  4040b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4040ba:	f7fe fab9 	bl	402630 <__adddf3>
  4040be:	4602      	mov	r2, r0
  4040c0:	460b      	mov	r3, r1
  4040c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4040c6:	f7fe fef5 	bl	402eb4 <__aeabi_dcmpgt>
  4040ca:	2800      	cmp	r0, #0
  4040cc:	d174      	bne.n	4041b8 <_dtoa_r+0x6b0>
  4040ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4040d2:	2000      	movs	r0, #0
  4040d4:	4913      	ldr	r1, [pc, #76]	; (404124 <_dtoa_r+0x61c>)
  4040d6:	f7fe faa9 	bl	40262c <__aeabi_dsub>
  4040da:	4602      	mov	r2, r0
  4040dc:	460b      	mov	r3, r1
  4040de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4040e2:	f7fe fec9 	bl	402e78 <__aeabi_dcmplt>
  4040e6:	2800      	cmp	r0, #0
  4040e8:	f43f af2d 	beq.w	403f46 <_dtoa_r+0x43e>
  4040ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4040f0:	2b30      	cmp	r3, #48	; 0x30
  4040f2:	f105 32ff 	add.w	r2, r5, #4294967295
  4040f6:	d001      	beq.n	4040fc <_dtoa_r+0x5f4>
  4040f8:	46bb      	mov	fp, r7
  4040fa:	e04c      	b.n	404196 <_dtoa_r+0x68e>
  4040fc:	4615      	mov	r5, r2
  4040fe:	e7f5      	b.n	4040ec <_dtoa_r+0x5e4>
  404100:	4b05      	ldr	r3, [pc, #20]	; (404118 <_dtoa_r+0x610>)
  404102:	f7fe fc47 	bl	402994 <__aeabi_dmul>
  404106:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40410a:	e7bc      	b.n	404086 <_dtoa_r+0x57e>
  40410c:	00405d78 	.word	0x00405d78
  404110:	00405d50 	.word	0x00405d50
  404114:	3ff00000 	.word	0x3ff00000
  404118:	40240000 	.word	0x40240000
  40411c:	401c0000 	.word	0x401c0000
  404120:	40140000 	.word	0x40140000
  404124:	3fe00000 	.word	0x3fe00000
  404128:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40412c:	9d06      	ldr	r5, [sp, #24]
  40412e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404132:	4630      	mov	r0, r6
  404134:	4639      	mov	r1, r7
  404136:	f7fe fd57 	bl	402be8 <__aeabi_ddiv>
  40413a:	f7fe fec5 	bl	402ec8 <__aeabi_d2iz>
  40413e:	4680      	mov	r8, r0
  404140:	f7fe fbc2 	bl	4028c8 <__aeabi_i2d>
  404144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404148:	f7fe fc24 	bl	402994 <__aeabi_dmul>
  40414c:	4602      	mov	r2, r0
  40414e:	460b      	mov	r3, r1
  404150:	4630      	mov	r0, r6
  404152:	4639      	mov	r1, r7
  404154:	f108 0630 	add.w	r6, r8, #48	; 0x30
  404158:	f7fe fa68 	bl	40262c <__aeabi_dsub>
  40415c:	f805 6b01 	strb.w	r6, [r5], #1
  404160:	9e06      	ldr	r6, [sp, #24]
  404162:	1bae      	subs	r6, r5, r6
  404164:	45b1      	cmp	r9, r6
  404166:	4602      	mov	r2, r0
  404168:	460b      	mov	r3, r1
  40416a:	d138      	bne.n	4041de <_dtoa_r+0x6d6>
  40416c:	f7fe fa60 	bl	402630 <__adddf3>
  404170:	4606      	mov	r6, r0
  404172:	460f      	mov	r7, r1
  404174:	4602      	mov	r2, r0
  404176:	460b      	mov	r3, r1
  404178:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40417c:	f7fe fe7c 	bl	402e78 <__aeabi_dcmplt>
  404180:	b9c8      	cbnz	r0, 4041b6 <_dtoa_r+0x6ae>
  404182:	4632      	mov	r2, r6
  404184:	463b      	mov	r3, r7
  404186:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40418a:	f7fe fe6b 	bl	402e64 <__aeabi_dcmpeq>
  40418e:	b110      	cbz	r0, 404196 <_dtoa_r+0x68e>
  404190:	f018 0f01 	tst.w	r8, #1
  404194:	d10f      	bne.n	4041b6 <_dtoa_r+0x6ae>
  404196:	4651      	mov	r1, sl
  404198:	4620      	mov	r0, r4
  40419a:	f000 fd05 	bl	404ba8 <_Bfree>
  40419e:	2300      	movs	r3, #0
  4041a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4041a2:	702b      	strb	r3, [r5, #0]
  4041a4:	f10b 0301 	add.w	r3, fp, #1
  4041a8:	6013      	str	r3, [r2, #0]
  4041aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4041ac:	2b00      	cmp	r3, #0
  4041ae:	f43f acf0 	beq.w	403b92 <_dtoa_r+0x8a>
  4041b2:	601d      	str	r5, [r3, #0]
  4041b4:	e4ed      	b.n	403b92 <_dtoa_r+0x8a>
  4041b6:	465f      	mov	r7, fp
  4041b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4041bc:	2a39      	cmp	r2, #57	; 0x39
  4041be:	f105 33ff 	add.w	r3, r5, #4294967295
  4041c2:	d106      	bne.n	4041d2 <_dtoa_r+0x6ca>
  4041c4:	9a06      	ldr	r2, [sp, #24]
  4041c6:	429a      	cmp	r2, r3
  4041c8:	d107      	bne.n	4041da <_dtoa_r+0x6d2>
  4041ca:	2330      	movs	r3, #48	; 0x30
  4041cc:	7013      	strb	r3, [r2, #0]
  4041ce:	3701      	adds	r7, #1
  4041d0:	4613      	mov	r3, r2
  4041d2:	781a      	ldrb	r2, [r3, #0]
  4041d4:	3201      	adds	r2, #1
  4041d6:	701a      	strb	r2, [r3, #0]
  4041d8:	e78e      	b.n	4040f8 <_dtoa_r+0x5f0>
  4041da:	461d      	mov	r5, r3
  4041dc:	e7ec      	b.n	4041b8 <_dtoa_r+0x6b0>
  4041de:	2200      	movs	r2, #0
  4041e0:	4bb4      	ldr	r3, [pc, #720]	; (4044b4 <_dtoa_r+0x9ac>)
  4041e2:	f7fe fbd7 	bl	402994 <__aeabi_dmul>
  4041e6:	2200      	movs	r2, #0
  4041e8:	2300      	movs	r3, #0
  4041ea:	4606      	mov	r6, r0
  4041ec:	460f      	mov	r7, r1
  4041ee:	f7fe fe39 	bl	402e64 <__aeabi_dcmpeq>
  4041f2:	2800      	cmp	r0, #0
  4041f4:	d09b      	beq.n	40412e <_dtoa_r+0x626>
  4041f6:	e7ce      	b.n	404196 <_dtoa_r+0x68e>
  4041f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4041fa:	2a00      	cmp	r2, #0
  4041fc:	f000 8129 	beq.w	404452 <_dtoa_r+0x94a>
  404200:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404202:	2a01      	cmp	r2, #1
  404204:	f300 810e 	bgt.w	404424 <_dtoa_r+0x91c>
  404208:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40420a:	2a00      	cmp	r2, #0
  40420c:	f000 8106 	beq.w	40441c <_dtoa_r+0x914>
  404210:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404214:	9e08      	ldr	r6, [sp, #32]
  404216:	4645      	mov	r5, r8
  404218:	9a07      	ldr	r2, [sp, #28]
  40421a:	2101      	movs	r1, #1
  40421c:	441a      	add	r2, r3
  40421e:	4620      	mov	r0, r4
  404220:	4498      	add	r8, r3
  404222:	9207      	str	r2, [sp, #28]
  404224:	f000 fd60 	bl	404ce8 <__i2b>
  404228:	4607      	mov	r7, r0
  40422a:	2d00      	cmp	r5, #0
  40422c:	dd0b      	ble.n	404246 <_dtoa_r+0x73e>
  40422e:	9b07      	ldr	r3, [sp, #28]
  404230:	2b00      	cmp	r3, #0
  404232:	dd08      	ble.n	404246 <_dtoa_r+0x73e>
  404234:	42ab      	cmp	r3, r5
  404236:	9a07      	ldr	r2, [sp, #28]
  404238:	bfa8      	it	ge
  40423a:	462b      	movge	r3, r5
  40423c:	eba8 0803 	sub.w	r8, r8, r3
  404240:	1aed      	subs	r5, r5, r3
  404242:	1ad3      	subs	r3, r2, r3
  404244:	9307      	str	r3, [sp, #28]
  404246:	9b08      	ldr	r3, [sp, #32]
  404248:	b1fb      	cbz	r3, 40428a <_dtoa_r+0x782>
  40424a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40424c:	2b00      	cmp	r3, #0
  40424e:	f000 8104 	beq.w	40445a <_dtoa_r+0x952>
  404252:	2e00      	cmp	r6, #0
  404254:	dd11      	ble.n	40427a <_dtoa_r+0x772>
  404256:	4639      	mov	r1, r7
  404258:	4632      	mov	r2, r6
  40425a:	4620      	mov	r0, r4
  40425c:	f000 fdda 	bl	404e14 <__pow5mult>
  404260:	4652      	mov	r2, sl
  404262:	4601      	mov	r1, r0
  404264:	4607      	mov	r7, r0
  404266:	4620      	mov	r0, r4
  404268:	f000 fd47 	bl	404cfa <__multiply>
  40426c:	4651      	mov	r1, sl
  40426e:	900a      	str	r0, [sp, #40]	; 0x28
  404270:	4620      	mov	r0, r4
  404272:	f000 fc99 	bl	404ba8 <_Bfree>
  404276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404278:	469a      	mov	sl, r3
  40427a:	9b08      	ldr	r3, [sp, #32]
  40427c:	1b9a      	subs	r2, r3, r6
  40427e:	d004      	beq.n	40428a <_dtoa_r+0x782>
  404280:	4651      	mov	r1, sl
  404282:	4620      	mov	r0, r4
  404284:	f000 fdc6 	bl	404e14 <__pow5mult>
  404288:	4682      	mov	sl, r0
  40428a:	2101      	movs	r1, #1
  40428c:	4620      	mov	r0, r4
  40428e:	f000 fd2b 	bl	404ce8 <__i2b>
  404292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404294:	2b00      	cmp	r3, #0
  404296:	4606      	mov	r6, r0
  404298:	f340 80e1 	ble.w	40445e <_dtoa_r+0x956>
  40429c:	461a      	mov	r2, r3
  40429e:	4601      	mov	r1, r0
  4042a0:	4620      	mov	r0, r4
  4042a2:	f000 fdb7 	bl	404e14 <__pow5mult>
  4042a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4042a8:	2b01      	cmp	r3, #1
  4042aa:	4606      	mov	r6, r0
  4042ac:	f340 80da 	ble.w	404464 <_dtoa_r+0x95c>
  4042b0:	2300      	movs	r3, #0
  4042b2:	9308      	str	r3, [sp, #32]
  4042b4:	6933      	ldr	r3, [r6, #16]
  4042b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4042ba:	6918      	ldr	r0, [r3, #16]
  4042bc:	f000 fcc6 	bl	404c4c <__hi0bits>
  4042c0:	f1c0 0020 	rsb	r0, r0, #32
  4042c4:	9b07      	ldr	r3, [sp, #28]
  4042c6:	4418      	add	r0, r3
  4042c8:	f010 001f 	ands.w	r0, r0, #31
  4042cc:	f000 80f0 	beq.w	4044b0 <_dtoa_r+0x9a8>
  4042d0:	f1c0 0320 	rsb	r3, r0, #32
  4042d4:	2b04      	cmp	r3, #4
  4042d6:	f340 80e2 	ble.w	40449e <_dtoa_r+0x996>
  4042da:	9b07      	ldr	r3, [sp, #28]
  4042dc:	f1c0 001c 	rsb	r0, r0, #28
  4042e0:	4480      	add	r8, r0
  4042e2:	4405      	add	r5, r0
  4042e4:	4403      	add	r3, r0
  4042e6:	9307      	str	r3, [sp, #28]
  4042e8:	f1b8 0f00 	cmp.w	r8, #0
  4042ec:	dd05      	ble.n	4042fa <_dtoa_r+0x7f2>
  4042ee:	4651      	mov	r1, sl
  4042f0:	4642      	mov	r2, r8
  4042f2:	4620      	mov	r0, r4
  4042f4:	f000 fddc 	bl	404eb0 <__lshift>
  4042f8:	4682      	mov	sl, r0
  4042fa:	9b07      	ldr	r3, [sp, #28]
  4042fc:	2b00      	cmp	r3, #0
  4042fe:	dd05      	ble.n	40430c <_dtoa_r+0x804>
  404300:	4631      	mov	r1, r6
  404302:	461a      	mov	r2, r3
  404304:	4620      	mov	r0, r4
  404306:	f000 fdd3 	bl	404eb0 <__lshift>
  40430a:	4606      	mov	r6, r0
  40430c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40430e:	2b00      	cmp	r3, #0
  404310:	f000 80d2 	beq.w	4044b8 <_dtoa_r+0x9b0>
  404314:	4631      	mov	r1, r6
  404316:	4650      	mov	r0, sl
  404318:	f000 fe1b 	bl	404f52 <__mcmp>
  40431c:	2800      	cmp	r0, #0
  40431e:	f280 80cb 	bge.w	4044b8 <_dtoa_r+0x9b0>
  404322:	2300      	movs	r3, #0
  404324:	4651      	mov	r1, sl
  404326:	220a      	movs	r2, #10
  404328:	4620      	mov	r0, r4
  40432a:	f000 fc54 	bl	404bd6 <__multadd>
  40432e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404330:	f10b 3bff 	add.w	fp, fp, #4294967295
  404334:	4682      	mov	sl, r0
  404336:	2b00      	cmp	r3, #0
  404338:	f000 81aa 	beq.w	404690 <_dtoa_r+0xb88>
  40433c:	2300      	movs	r3, #0
  40433e:	4639      	mov	r1, r7
  404340:	220a      	movs	r2, #10
  404342:	4620      	mov	r0, r4
  404344:	f000 fc47 	bl	404bd6 <__multadd>
  404348:	9b04      	ldr	r3, [sp, #16]
  40434a:	2b00      	cmp	r3, #0
  40434c:	4607      	mov	r7, r0
  40434e:	dc03      	bgt.n	404358 <_dtoa_r+0x850>
  404350:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404352:	2b02      	cmp	r3, #2
  404354:	f300 80b8 	bgt.w	4044c8 <_dtoa_r+0x9c0>
  404358:	2d00      	cmp	r5, #0
  40435a:	dd05      	ble.n	404368 <_dtoa_r+0x860>
  40435c:	4639      	mov	r1, r7
  40435e:	462a      	mov	r2, r5
  404360:	4620      	mov	r0, r4
  404362:	f000 fda5 	bl	404eb0 <__lshift>
  404366:	4607      	mov	r7, r0
  404368:	9b08      	ldr	r3, [sp, #32]
  40436a:	2b00      	cmp	r3, #0
  40436c:	f000 8110 	beq.w	404590 <_dtoa_r+0xa88>
  404370:	6879      	ldr	r1, [r7, #4]
  404372:	4620      	mov	r0, r4
  404374:	f000 fbe4 	bl	404b40 <_Balloc>
  404378:	693a      	ldr	r2, [r7, #16]
  40437a:	3202      	adds	r2, #2
  40437c:	4605      	mov	r5, r0
  40437e:	0092      	lsls	r2, r2, #2
  404380:	f107 010c 	add.w	r1, r7, #12
  404384:	300c      	adds	r0, #12
  404386:	f7fe fdeb 	bl	402f60 <memcpy>
  40438a:	2201      	movs	r2, #1
  40438c:	4629      	mov	r1, r5
  40438e:	4620      	mov	r0, r4
  404390:	f000 fd8e 	bl	404eb0 <__lshift>
  404394:	9b02      	ldr	r3, [sp, #8]
  404396:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40439a:	9707      	str	r7, [sp, #28]
  40439c:	f003 0301 	and.w	r3, r3, #1
  4043a0:	4607      	mov	r7, r0
  4043a2:	9308      	str	r3, [sp, #32]
  4043a4:	4631      	mov	r1, r6
  4043a6:	4650      	mov	r0, sl
  4043a8:	f7ff fb22 	bl	4039f0 <quorem>
  4043ac:	9907      	ldr	r1, [sp, #28]
  4043ae:	4605      	mov	r5, r0
  4043b0:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4043b4:	4650      	mov	r0, sl
  4043b6:	f000 fdcc 	bl	404f52 <__mcmp>
  4043ba:	463a      	mov	r2, r7
  4043bc:	9002      	str	r0, [sp, #8]
  4043be:	4631      	mov	r1, r6
  4043c0:	4620      	mov	r0, r4
  4043c2:	f000 fde0 	bl	404f86 <__mdiff>
  4043c6:	68c3      	ldr	r3, [r0, #12]
  4043c8:	4602      	mov	r2, r0
  4043ca:	2b00      	cmp	r3, #0
  4043cc:	f040 80e2 	bne.w	404594 <_dtoa_r+0xa8c>
  4043d0:	4601      	mov	r1, r0
  4043d2:	9009      	str	r0, [sp, #36]	; 0x24
  4043d4:	4650      	mov	r0, sl
  4043d6:	f000 fdbc 	bl	404f52 <__mcmp>
  4043da:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4043dc:	4603      	mov	r3, r0
  4043de:	4611      	mov	r1, r2
  4043e0:	4620      	mov	r0, r4
  4043e2:	9309      	str	r3, [sp, #36]	; 0x24
  4043e4:	f000 fbe0 	bl	404ba8 <_Bfree>
  4043e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4043ea:	2b00      	cmp	r3, #0
  4043ec:	f040 80d4 	bne.w	404598 <_dtoa_r+0xa90>
  4043f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4043f2:	2a00      	cmp	r2, #0
  4043f4:	f040 80d0 	bne.w	404598 <_dtoa_r+0xa90>
  4043f8:	9a08      	ldr	r2, [sp, #32]
  4043fa:	2a00      	cmp	r2, #0
  4043fc:	f040 80cc 	bne.w	404598 <_dtoa_r+0xa90>
  404400:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404404:	f000 80e8 	beq.w	4045d8 <_dtoa_r+0xad0>
  404408:	9b02      	ldr	r3, [sp, #8]
  40440a:	2b00      	cmp	r3, #0
  40440c:	dd01      	ble.n	404412 <_dtoa_r+0x90a>
  40440e:	f105 0931 	add.w	r9, r5, #49	; 0x31
  404412:	f108 0501 	add.w	r5, r8, #1
  404416:	f888 9000 	strb.w	r9, [r8]
  40441a:	e06a      	b.n	4044f2 <_dtoa_r+0x9ea>
  40441c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40441e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404422:	e6f7      	b.n	404214 <_dtoa_r+0x70c>
  404424:	9b08      	ldr	r3, [sp, #32]
  404426:	f109 36ff 	add.w	r6, r9, #4294967295
  40442a:	42b3      	cmp	r3, r6
  40442c:	bfbf      	itttt	lt
  40442e:	9b08      	ldrlt	r3, [sp, #32]
  404430:	9608      	strlt	r6, [sp, #32]
  404432:	1af2      	sublt	r2, r6, r3
  404434:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  404436:	bfb7      	itett	lt
  404438:	189b      	addlt	r3, r3, r2
  40443a:	1b9e      	subge	r6, r3, r6
  40443c:	930c      	strlt	r3, [sp, #48]	; 0x30
  40443e:	2600      	movlt	r6, #0
  404440:	f1b9 0f00 	cmp.w	r9, #0
  404444:	bfb9      	ittee	lt
  404446:	eba8 0509 	sublt.w	r5, r8, r9
  40444a:	2300      	movlt	r3, #0
  40444c:	4645      	movge	r5, r8
  40444e:	464b      	movge	r3, r9
  404450:	e6e2      	b.n	404218 <_dtoa_r+0x710>
  404452:	9e08      	ldr	r6, [sp, #32]
  404454:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404456:	4645      	mov	r5, r8
  404458:	e6e7      	b.n	40422a <_dtoa_r+0x722>
  40445a:	9a08      	ldr	r2, [sp, #32]
  40445c:	e710      	b.n	404280 <_dtoa_r+0x778>
  40445e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404460:	2b01      	cmp	r3, #1
  404462:	dc18      	bgt.n	404496 <_dtoa_r+0x98e>
  404464:	9b02      	ldr	r3, [sp, #8]
  404466:	b9b3      	cbnz	r3, 404496 <_dtoa_r+0x98e>
  404468:	9b03      	ldr	r3, [sp, #12]
  40446a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40446e:	b9a3      	cbnz	r3, 40449a <_dtoa_r+0x992>
  404470:	9b03      	ldr	r3, [sp, #12]
  404472:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  404476:	0d1b      	lsrs	r3, r3, #20
  404478:	051b      	lsls	r3, r3, #20
  40447a:	b12b      	cbz	r3, 404488 <_dtoa_r+0x980>
  40447c:	9b07      	ldr	r3, [sp, #28]
  40447e:	3301      	adds	r3, #1
  404480:	9307      	str	r3, [sp, #28]
  404482:	f108 0801 	add.w	r8, r8, #1
  404486:	2301      	movs	r3, #1
  404488:	9308      	str	r3, [sp, #32]
  40448a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40448c:	2b00      	cmp	r3, #0
  40448e:	f47f af11 	bne.w	4042b4 <_dtoa_r+0x7ac>
  404492:	2001      	movs	r0, #1
  404494:	e716      	b.n	4042c4 <_dtoa_r+0x7bc>
  404496:	2300      	movs	r3, #0
  404498:	e7f6      	b.n	404488 <_dtoa_r+0x980>
  40449a:	9b02      	ldr	r3, [sp, #8]
  40449c:	e7f4      	b.n	404488 <_dtoa_r+0x980>
  40449e:	f43f af23 	beq.w	4042e8 <_dtoa_r+0x7e0>
  4044a2:	9a07      	ldr	r2, [sp, #28]
  4044a4:	331c      	adds	r3, #28
  4044a6:	441a      	add	r2, r3
  4044a8:	4498      	add	r8, r3
  4044aa:	441d      	add	r5, r3
  4044ac:	4613      	mov	r3, r2
  4044ae:	e71a      	b.n	4042e6 <_dtoa_r+0x7de>
  4044b0:	4603      	mov	r3, r0
  4044b2:	e7f6      	b.n	4044a2 <_dtoa_r+0x99a>
  4044b4:	40240000 	.word	0x40240000
  4044b8:	f1b9 0f00 	cmp.w	r9, #0
  4044bc:	dc33      	bgt.n	404526 <_dtoa_r+0xa1e>
  4044be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4044c0:	2b02      	cmp	r3, #2
  4044c2:	dd30      	ble.n	404526 <_dtoa_r+0xa1e>
  4044c4:	f8cd 9010 	str.w	r9, [sp, #16]
  4044c8:	9b04      	ldr	r3, [sp, #16]
  4044ca:	b963      	cbnz	r3, 4044e6 <_dtoa_r+0x9de>
  4044cc:	4631      	mov	r1, r6
  4044ce:	2205      	movs	r2, #5
  4044d0:	4620      	mov	r0, r4
  4044d2:	f000 fb80 	bl	404bd6 <__multadd>
  4044d6:	4601      	mov	r1, r0
  4044d8:	4606      	mov	r6, r0
  4044da:	4650      	mov	r0, sl
  4044dc:	f000 fd39 	bl	404f52 <__mcmp>
  4044e0:	2800      	cmp	r0, #0
  4044e2:	f73f ad5c 	bgt.w	403f9e <_dtoa_r+0x496>
  4044e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4044e8:	9d06      	ldr	r5, [sp, #24]
  4044ea:	ea6f 0b03 	mvn.w	fp, r3
  4044ee:	2300      	movs	r3, #0
  4044f0:	9307      	str	r3, [sp, #28]
  4044f2:	4631      	mov	r1, r6
  4044f4:	4620      	mov	r0, r4
  4044f6:	f000 fb57 	bl	404ba8 <_Bfree>
  4044fa:	2f00      	cmp	r7, #0
  4044fc:	f43f ae4b 	beq.w	404196 <_dtoa_r+0x68e>
  404500:	9b07      	ldr	r3, [sp, #28]
  404502:	b12b      	cbz	r3, 404510 <_dtoa_r+0xa08>
  404504:	42bb      	cmp	r3, r7
  404506:	d003      	beq.n	404510 <_dtoa_r+0xa08>
  404508:	4619      	mov	r1, r3
  40450a:	4620      	mov	r0, r4
  40450c:	f000 fb4c 	bl	404ba8 <_Bfree>
  404510:	4639      	mov	r1, r7
  404512:	4620      	mov	r0, r4
  404514:	f000 fb48 	bl	404ba8 <_Bfree>
  404518:	e63d      	b.n	404196 <_dtoa_r+0x68e>
  40451a:	2600      	movs	r6, #0
  40451c:	4637      	mov	r7, r6
  40451e:	e7e2      	b.n	4044e6 <_dtoa_r+0x9de>
  404520:	46bb      	mov	fp, r7
  404522:	4637      	mov	r7, r6
  404524:	e53b      	b.n	403f9e <_dtoa_r+0x496>
  404526:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404528:	f8cd 9010 	str.w	r9, [sp, #16]
  40452c:	2b00      	cmp	r3, #0
  40452e:	f47f af13 	bne.w	404358 <_dtoa_r+0x850>
  404532:	9d06      	ldr	r5, [sp, #24]
  404534:	4631      	mov	r1, r6
  404536:	4650      	mov	r0, sl
  404538:	f7ff fa5a 	bl	4039f0 <quorem>
  40453c:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404540:	f805 9b01 	strb.w	r9, [r5], #1
  404544:	9b06      	ldr	r3, [sp, #24]
  404546:	9a04      	ldr	r2, [sp, #16]
  404548:	1aeb      	subs	r3, r5, r3
  40454a:	429a      	cmp	r2, r3
  40454c:	f300 8083 	bgt.w	404656 <_dtoa_r+0xb4e>
  404550:	9b06      	ldr	r3, [sp, #24]
  404552:	2a01      	cmp	r2, #1
  404554:	bfac      	ite	ge
  404556:	189b      	addge	r3, r3, r2
  404558:	3301      	addlt	r3, #1
  40455a:	4698      	mov	r8, r3
  40455c:	2300      	movs	r3, #0
  40455e:	9307      	str	r3, [sp, #28]
  404560:	4651      	mov	r1, sl
  404562:	2201      	movs	r2, #1
  404564:	4620      	mov	r0, r4
  404566:	f000 fca3 	bl	404eb0 <__lshift>
  40456a:	4631      	mov	r1, r6
  40456c:	4682      	mov	sl, r0
  40456e:	f000 fcf0 	bl	404f52 <__mcmp>
  404572:	2800      	cmp	r0, #0
  404574:	dc35      	bgt.n	4045e2 <_dtoa_r+0xada>
  404576:	d102      	bne.n	40457e <_dtoa_r+0xa76>
  404578:	f019 0f01 	tst.w	r9, #1
  40457c:	d131      	bne.n	4045e2 <_dtoa_r+0xada>
  40457e:	4645      	mov	r5, r8
  404580:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404584:	2b30      	cmp	r3, #48	; 0x30
  404586:	f105 32ff 	add.w	r2, r5, #4294967295
  40458a:	d1b2      	bne.n	4044f2 <_dtoa_r+0x9ea>
  40458c:	4615      	mov	r5, r2
  40458e:	e7f7      	b.n	404580 <_dtoa_r+0xa78>
  404590:	4638      	mov	r0, r7
  404592:	e6ff      	b.n	404394 <_dtoa_r+0x88c>
  404594:	2301      	movs	r3, #1
  404596:	e722      	b.n	4043de <_dtoa_r+0x8d6>
  404598:	9a02      	ldr	r2, [sp, #8]
  40459a:	2a00      	cmp	r2, #0
  40459c:	db04      	blt.n	4045a8 <_dtoa_r+0xaa0>
  40459e:	d129      	bne.n	4045f4 <_dtoa_r+0xaec>
  4045a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4045a2:	bb3a      	cbnz	r2, 4045f4 <_dtoa_r+0xaec>
  4045a4:	9a08      	ldr	r2, [sp, #32]
  4045a6:	bb2a      	cbnz	r2, 4045f4 <_dtoa_r+0xaec>
  4045a8:	2b00      	cmp	r3, #0
  4045aa:	f77f af32 	ble.w	404412 <_dtoa_r+0x90a>
  4045ae:	4651      	mov	r1, sl
  4045b0:	2201      	movs	r2, #1
  4045b2:	4620      	mov	r0, r4
  4045b4:	f000 fc7c 	bl	404eb0 <__lshift>
  4045b8:	4631      	mov	r1, r6
  4045ba:	4682      	mov	sl, r0
  4045bc:	f000 fcc9 	bl	404f52 <__mcmp>
  4045c0:	2800      	cmp	r0, #0
  4045c2:	dc05      	bgt.n	4045d0 <_dtoa_r+0xac8>
  4045c4:	f47f af25 	bne.w	404412 <_dtoa_r+0x90a>
  4045c8:	f019 0f01 	tst.w	r9, #1
  4045cc:	f43f af21 	beq.w	404412 <_dtoa_r+0x90a>
  4045d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4045d4:	f47f af1b 	bne.w	40440e <_dtoa_r+0x906>
  4045d8:	2339      	movs	r3, #57	; 0x39
  4045da:	f888 3000 	strb.w	r3, [r8]
  4045de:	f108 0801 	add.w	r8, r8, #1
  4045e2:	4645      	mov	r5, r8
  4045e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4045e8:	2b39      	cmp	r3, #57	; 0x39
  4045ea:	f105 32ff 	add.w	r2, r5, #4294967295
  4045ee:	d03a      	beq.n	404666 <_dtoa_r+0xb5e>
  4045f0:	3301      	adds	r3, #1
  4045f2:	e03f      	b.n	404674 <_dtoa_r+0xb6c>
  4045f4:	2b00      	cmp	r3, #0
  4045f6:	f108 0501 	add.w	r5, r8, #1
  4045fa:	dd05      	ble.n	404608 <_dtoa_r+0xb00>
  4045fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404600:	d0ea      	beq.n	4045d8 <_dtoa_r+0xad0>
  404602:	f109 0901 	add.w	r9, r9, #1
  404606:	e706      	b.n	404416 <_dtoa_r+0x90e>
  404608:	9b06      	ldr	r3, [sp, #24]
  40460a:	9a04      	ldr	r2, [sp, #16]
  40460c:	f805 9c01 	strb.w	r9, [r5, #-1]
  404610:	1aeb      	subs	r3, r5, r3
  404612:	4293      	cmp	r3, r2
  404614:	46a8      	mov	r8, r5
  404616:	d0a3      	beq.n	404560 <_dtoa_r+0xa58>
  404618:	4651      	mov	r1, sl
  40461a:	2300      	movs	r3, #0
  40461c:	220a      	movs	r2, #10
  40461e:	4620      	mov	r0, r4
  404620:	f000 fad9 	bl	404bd6 <__multadd>
  404624:	9b07      	ldr	r3, [sp, #28]
  404626:	9907      	ldr	r1, [sp, #28]
  404628:	42bb      	cmp	r3, r7
  40462a:	4682      	mov	sl, r0
  40462c:	f04f 0300 	mov.w	r3, #0
  404630:	f04f 020a 	mov.w	r2, #10
  404634:	4620      	mov	r0, r4
  404636:	d104      	bne.n	404642 <_dtoa_r+0xb3a>
  404638:	f000 facd 	bl	404bd6 <__multadd>
  40463c:	9007      	str	r0, [sp, #28]
  40463e:	4607      	mov	r7, r0
  404640:	e6b0      	b.n	4043a4 <_dtoa_r+0x89c>
  404642:	f000 fac8 	bl	404bd6 <__multadd>
  404646:	2300      	movs	r3, #0
  404648:	9007      	str	r0, [sp, #28]
  40464a:	220a      	movs	r2, #10
  40464c:	4639      	mov	r1, r7
  40464e:	4620      	mov	r0, r4
  404650:	f000 fac1 	bl	404bd6 <__multadd>
  404654:	e7f3      	b.n	40463e <_dtoa_r+0xb36>
  404656:	4651      	mov	r1, sl
  404658:	2300      	movs	r3, #0
  40465a:	220a      	movs	r2, #10
  40465c:	4620      	mov	r0, r4
  40465e:	f000 faba 	bl	404bd6 <__multadd>
  404662:	4682      	mov	sl, r0
  404664:	e766      	b.n	404534 <_dtoa_r+0xa2c>
  404666:	9b06      	ldr	r3, [sp, #24]
  404668:	4293      	cmp	r3, r2
  40466a:	d105      	bne.n	404678 <_dtoa_r+0xb70>
  40466c:	9a06      	ldr	r2, [sp, #24]
  40466e:	f10b 0b01 	add.w	fp, fp, #1
  404672:	2331      	movs	r3, #49	; 0x31
  404674:	7013      	strb	r3, [r2, #0]
  404676:	e73c      	b.n	4044f2 <_dtoa_r+0x9ea>
  404678:	4615      	mov	r5, r2
  40467a:	e7b3      	b.n	4045e4 <_dtoa_r+0xadc>
  40467c:	4b09      	ldr	r3, [pc, #36]	; (4046a4 <_dtoa_r+0xb9c>)
  40467e:	f7ff baa5 	b.w	403bcc <_dtoa_r+0xc4>
  404682:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404684:	2b00      	cmp	r3, #0
  404686:	f47f aa7f 	bne.w	403b88 <_dtoa_r+0x80>
  40468a:	4b07      	ldr	r3, [pc, #28]	; (4046a8 <_dtoa_r+0xba0>)
  40468c:	f7ff ba9e 	b.w	403bcc <_dtoa_r+0xc4>
  404690:	9b04      	ldr	r3, [sp, #16]
  404692:	2b00      	cmp	r3, #0
  404694:	f73f af4d 	bgt.w	404532 <_dtoa_r+0xa2a>
  404698:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40469a:	2b02      	cmp	r3, #2
  40469c:	f77f af49 	ble.w	404532 <_dtoa_r+0xa2a>
  4046a0:	e712      	b.n	4044c8 <_dtoa_r+0x9c0>
  4046a2:	bf00      	nop
  4046a4:	00405cbc 	.word	0x00405cbc
  4046a8:	00405ce0 	.word	0x00405ce0

004046ac <__sflush_r>:
  4046ac:	898a      	ldrh	r2, [r1, #12]
  4046ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4046b2:	4605      	mov	r5, r0
  4046b4:	0710      	lsls	r0, r2, #28
  4046b6:	460c      	mov	r4, r1
  4046b8:	d45a      	bmi.n	404770 <__sflush_r+0xc4>
  4046ba:	684b      	ldr	r3, [r1, #4]
  4046bc:	2b00      	cmp	r3, #0
  4046be:	dc05      	bgt.n	4046cc <__sflush_r+0x20>
  4046c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4046c2:	2b00      	cmp	r3, #0
  4046c4:	dc02      	bgt.n	4046cc <__sflush_r+0x20>
  4046c6:	2000      	movs	r0, #0
  4046c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4046cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4046ce:	2e00      	cmp	r6, #0
  4046d0:	d0f9      	beq.n	4046c6 <__sflush_r+0x1a>
  4046d2:	2300      	movs	r3, #0
  4046d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  4046d8:	682f      	ldr	r7, [r5, #0]
  4046da:	602b      	str	r3, [r5, #0]
  4046dc:	d033      	beq.n	404746 <__sflush_r+0x9a>
  4046de:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4046e0:	89a3      	ldrh	r3, [r4, #12]
  4046e2:	075a      	lsls	r2, r3, #29
  4046e4:	d505      	bpl.n	4046f2 <__sflush_r+0x46>
  4046e6:	6863      	ldr	r3, [r4, #4]
  4046e8:	1ac0      	subs	r0, r0, r3
  4046ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4046ec:	b10b      	cbz	r3, 4046f2 <__sflush_r+0x46>
  4046ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4046f0:	1ac0      	subs	r0, r0, r3
  4046f2:	2300      	movs	r3, #0
  4046f4:	4602      	mov	r2, r0
  4046f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4046f8:	6a21      	ldr	r1, [r4, #32]
  4046fa:	4628      	mov	r0, r5
  4046fc:	47b0      	blx	r6
  4046fe:	1c43      	adds	r3, r0, #1
  404700:	89a3      	ldrh	r3, [r4, #12]
  404702:	d106      	bne.n	404712 <__sflush_r+0x66>
  404704:	6829      	ldr	r1, [r5, #0]
  404706:	291d      	cmp	r1, #29
  404708:	d84b      	bhi.n	4047a2 <__sflush_r+0xf6>
  40470a:	4a2b      	ldr	r2, [pc, #172]	; (4047b8 <__sflush_r+0x10c>)
  40470c:	40ca      	lsrs	r2, r1
  40470e:	07d6      	lsls	r6, r2, #31
  404710:	d547      	bpl.n	4047a2 <__sflush_r+0xf6>
  404712:	2200      	movs	r2, #0
  404714:	6062      	str	r2, [r4, #4]
  404716:	04d9      	lsls	r1, r3, #19
  404718:	6922      	ldr	r2, [r4, #16]
  40471a:	6022      	str	r2, [r4, #0]
  40471c:	d504      	bpl.n	404728 <__sflush_r+0x7c>
  40471e:	1c42      	adds	r2, r0, #1
  404720:	d101      	bne.n	404726 <__sflush_r+0x7a>
  404722:	682b      	ldr	r3, [r5, #0]
  404724:	b903      	cbnz	r3, 404728 <__sflush_r+0x7c>
  404726:	6560      	str	r0, [r4, #84]	; 0x54
  404728:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40472a:	602f      	str	r7, [r5, #0]
  40472c:	2900      	cmp	r1, #0
  40472e:	d0ca      	beq.n	4046c6 <__sflush_r+0x1a>
  404730:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404734:	4299      	cmp	r1, r3
  404736:	d002      	beq.n	40473e <__sflush_r+0x92>
  404738:	4628      	mov	r0, r5
  40473a:	f000 fcdf 	bl	4050fc <_free_r>
  40473e:	2000      	movs	r0, #0
  404740:	6360      	str	r0, [r4, #52]	; 0x34
  404742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404746:	6a21      	ldr	r1, [r4, #32]
  404748:	2301      	movs	r3, #1
  40474a:	4628      	mov	r0, r5
  40474c:	47b0      	blx	r6
  40474e:	1c41      	adds	r1, r0, #1
  404750:	d1c6      	bne.n	4046e0 <__sflush_r+0x34>
  404752:	682b      	ldr	r3, [r5, #0]
  404754:	2b00      	cmp	r3, #0
  404756:	d0c3      	beq.n	4046e0 <__sflush_r+0x34>
  404758:	2b1d      	cmp	r3, #29
  40475a:	d001      	beq.n	404760 <__sflush_r+0xb4>
  40475c:	2b16      	cmp	r3, #22
  40475e:	d101      	bne.n	404764 <__sflush_r+0xb8>
  404760:	602f      	str	r7, [r5, #0]
  404762:	e7b0      	b.n	4046c6 <__sflush_r+0x1a>
  404764:	89a3      	ldrh	r3, [r4, #12]
  404766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40476a:	81a3      	strh	r3, [r4, #12]
  40476c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404770:	690f      	ldr	r7, [r1, #16]
  404772:	2f00      	cmp	r7, #0
  404774:	d0a7      	beq.n	4046c6 <__sflush_r+0x1a>
  404776:	0793      	lsls	r3, r2, #30
  404778:	680e      	ldr	r6, [r1, #0]
  40477a:	bf08      	it	eq
  40477c:	694b      	ldreq	r3, [r1, #20]
  40477e:	600f      	str	r7, [r1, #0]
  404780:	bf18      	it	ne
  404782:	2300      	movne	r3, #0
  404784:	eba6 0807 	sub.w	r8, r6, r7
  404788:	608b      	str	r3, [r1, #8]
  40478a:	f1b8 0f00 	cmp.w	r8, #0
  40478e:	dd9a      	ble.n	4046c6 <__sflush_r+0x1a>
  404790:	4643      	mov	r3, r8
  404792:	463a      	mov	r2, r7
  404794:	6a21      	ldr	r1, [r4, #32]
  404796:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  404798:	4628      	mov	r0, r5
  40479a:	47b0      	blx	r6
  40479c:	2800      	cmp	r0, #0
  40479e:	dc07      	bgt.n	4047b0 <__sflush_r+0x104>
  4047a0:	89a3      	ldrh	r3, [r4, #12]
  4047a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4047a6:	81a3      	strh	r3, [r4, #12]
  4047a8:	f04f 30ff 	mov.w	r0, #4294967295
  4047ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4047b0:	4407      	add	r7, r0
  4047b2:	eba8 0800 	sub.w	r8, r8, r0
  4047b6:	e7e8      	b.n	40478a <__sflush_r+0xde>
  4047b8:	20400001 	.word	0x20400001

004047bc <_fflush_r>:
  4047bc:	b538      	push	{r3, r4, r5, lr}
  4047be:	690b      	ldr	r3, [r1, #16]
  4047c0:	4605      	mov	r5, r0
  4047c2:	460c      	mov	r4, r1
  4047c4:	b1db      	cbz	r3, 4047fe <_fflush_r+0x42>
  4047c6:	b118      	cbz	r0, 4047d0 <_fflush_r+0x14>
  4047c8:	6983      	ldr	r3, [r0, #24]
  4047ca:	b90b      	cbnz	r3, 4047d0 <_fflush_r+0x14>
  4047cc:	f000 f860 	bl	404890 <__sinit>
  4047d0:	4b0c      	ldr	r3, [pc, #48]	; (404804 <_fflush_r+0x48>)
  4047d2:	429c      	cmp	r4, r3
  4047d4:	d109      	bne.n	4047ea <_fflush_r+0x2e>
  4047d6:	686c      	ldr	r4, [r5, #4]
  4047d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047dc:	b17b      	cbz	r3, 4047fe <_fflush_r+0x42>
  4047de:	4621      	mov	r1, r4
  4047e0:	4628      	mov	r0, r5
  4047e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4047e6:	f7ff bf61 	b.w	4046ac <__sflush_r>
  4047ea:	4b07      	ldr	r3, [pc, #28]	; (404808 <_fflush_r+0x4c>)
  4047ec:	429c      	cmp	r4, r3
  4047ee:	d101      	bne.n	4047f4 <_fflush_r+0x38>
  4047f0:	68ac      	ldr	r4, [r5, #8]
  4047f2:	e7f1      	b.n	4047d8 <_fflush_r+0x1c>
  4047f4:	4b05      	ldr	r3, [pc, #20]	; (40480c <_fflush_r+0x50>)
  4047f6:	429c      	cmp	r4, r3
  4047f8:	bf08      	it	eq
  4047fa:	68ec      	ldreq	r4, [r5, #12]
  4047fc:	e7ec      	b.n	4047d8 <_fflush_r+0x1c>
  4047fe:	2000      	movs	r0, #0
  404800:	bd38      	pop	{r3, r4, r5, pc}
  404802:	bf00      	nop
  404804:	00405d10 	.word	0x00405d10
  404808:	00405d30 	.word	0x00405d30
  40480c:	00405cf0 	.word	0x00405cf0

00404810 <_cleanup_r>:
  404810:	4901      	ldr	r1, [pc, #4]	; (404818 <_cleanup_r+0x8>)
  404812:	f000 b8a9 	b.w	404968 <_fwalk_reent>
  404816:	bf00      	nop
  404818:	004047bd 	.word	0x004047bd

0040481c <std.isra.0>:
  40481c:	2300      	movs	r3, #0
  40481e:	b510      	push	{r4, lr}
  404820:	4604      	mov	r4, r0
  404822:	6003      	str	r3, [r0, #0]
  404824:	6043      	str	r3, [r0, #4]
  404826:	6083      	str	r3, [r0, #8]
  404828:	8181      	strh	r1, [r0, #12]
  40482a:	6643      	str	r3, [r0, #100]	; 0x64
  40482c:	81c2      	strh	r2, [r0, #14]
  40482e:	6103      	str	r3, [r0, #16]
  404830:	6143      	str	r3, [r0, #20]
  404832:	6183      	str	r3, [r0, #24]
  404834:	4619      	mov	r1, r3
  404836:	2208      	movs	r2, #8
  404838:	305c      	adds	r0, #92	; 0x5c
  40483a:	f7fe fb9c 	bl	402f76 <memset>
  40483e:	4b05      	ldr	r3, [pc, #20]	; (404854 <std.isra.0+0x38>)
  404840:	6263      	str	r3, [r4, #36]	; 0x24
  404842:	4b05      	ldr	r3, [pc, #20]	; (404858 <std.isra.0+0x3c>)
  404844:	62a3      	str	r3, [r4, #40]	; 0x28
  404846:	4b05      	ldr	r3, [pc, #20]	; (40485c <std.isra.0+0x40>)
  404848:	62e3      	str	r3, [r4, #44]	; 0x2c
  40484a:	4b05      	ldr	r3, [pc, #20]	; (404860 <std.isra.0+0x44>)
  40484c:	6224      	str	r4, [r4, #32]
  40484e:	6323      	str	r3, [r4, #48]	; 0x30
  404850:	bd10      	pop	{r4, pc}
  404852:	bf00      	nop
  404854:	004054f1 	.word	0x004054f1
  404858:	00405513 	.word	0x00405513
  40485c:	0040554b 	.word	0x0040554b
  404860:	0040556f 	.word	0x0040556f

00404864 <__sfmoreglue>:
  404864:	b570      	push	{r4, r5, r6, lr}
  404866:	1e4a      	subs	r2, r1, #1
  404868:	2568      	movs	r5, #104	; 0x68
  40486a:	4355      	muls	r5, r2
  40486c:	460e      	mov	r6, r1
  40486e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  404872:	f000 fc91 	bl	405198 <_malloc_r>
  404876:	4604      	mov	r4, r0
  404878:	b140      	cbz	r0, 40488c <__sfmoreglue+0x28>
  40487a:	2100      	movs	r1, #0
  40487c:	e880 0042 	stmia.w	r0, {r1, r6}
  404880:	300c      	adds	r0, #12
  404882:	60a0      	str	r0, [r4, #8]
  404884:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404888:	f7fe fb75 	bl	402f76 <memset>
  40488c:	4620      	mov	r0, r4
  40488e:	bd70      	pop	{r4, r5, r6, pc}

00404890 <__sinit>:
  404890:	6983      	ldr	r3, [r0, #24]
  404892:	b510      	push	{r4, lr}
  404894:	4604      	mov	r4, r0
  404896:	bb33      	cbnz	r3, 4048e6 <__sinit+0x56>
  404898:	6483      	str	r3, [r0, #72]	; 0x48
  40489a:	64c3      	str	r3, [r0, #76]	; 0x4c
  40489c:	6503      	str	r3, [r0, #80]	; 0x50
  40489e:	4b12      	ldr	r3, [pc, #72]	; (4048e8 <__sinit+0x58>)
  4048a0:	4a12      	ldr	r2, [pc, #72]	; (4048ec <__sinit+0x5c>)
  4048a2:	681b      	ldr	r3, [r3, #0]
  4048a4:	6282      	str	r2, [r0, #40]	; 0x28
  4048a6:	4298      	cmp	r0, r3
  4048a8:	bf04      	itt	eq
  4048aa:	2301      	moveq	r3, #1
  4048ac:	6183      	streq	r3, [r0, #24]
  4048ae:	f000 f81f 	bl	4048f0 <__sfp>
  4048b2:	6060      	str	r0, [r4, #4]
  4048b4:	4620      	mov	r0, r4
  4048b6:	f000 f81b 	bl	4048f0 <__sfp>
  4048ba:	60a0      	str	r0, [r4, #8]
  4048bc:	4620      	mov	r0, r4
  4048be:	f000 f817 	bl	4048f0 <__sfp>
  4048c2:	2200      	movs	r2, #0
  4048c4:	60e0      	str	r0, [r4, #12]
  4048c6:	2104      	movs	r1, #4
  4048c8:	6860      	ldr	r0, [r4, #4]
  4048ca:	f7ff ffa7 	bl	40481c <std.isra.0>
  4048ce:	2201      	movs	r2, #1
  4048d0:	2109      	movs	r1, #9
  4048d2:	68a0      	ldr	r0, [r4, #8]
  4048d4:	f7ff ffa2 	bl	40481c <std.isra.0>
  4048d8:	2202      	movs	r2, #2
  4048da:	2112      	movs	r1, #18
  4048dc:	68e0      	ldr	r0, [r4, #12]
  4048de:	f7ff ff9d 	bl	40481c <std.isra.0>
  4048e2:	2301      	movs	r3, #1
  4048e4:	61a3      	str	r3, [r4, #24]
  4048e6:	bd10      	pop	{r4, pc}
  4048e8:	00405ca8 	.word	0x00405ca8
  4048ec:	00404811 	.word	0x00404811

004048f0 <__sfp>:
  4048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4048f2:	4b1c      	ldr	r3, [pc, #112]	; (404964 <__sfp+0x74>)
  4048f4:	681e      	ldr	r6, [r3, #0]
  4048f6:	69b3      	ldr	r3, [r6, #24]
  4048f8:	4607      	mov	r7, r0
  4048fa:	b913      	cbnz	r3, 404902 <__sfp+0x12>
  4048fc:	4630      	mov	r0, r6
  4048fe:	f7ff ffc7 	bl	404890 <__sinit>
  404902:	3648      	adds	r6, #72	; 0x48
  404904:	68b4      	ldr	r4, [r6, #8]
  404906:	6873      	ldr	r3, [r6, #4]
  404908:	3b01      	subs	r3, #1
  40490a:	d503      	bpl.n	404914 <__sfp+0x24>
  40490c:	6833      	ldr	r3, [r6, #0]
  40490e:	b133      	cbz	r3, 40491e <__sfp+0x2e>
  404910:	6836      	ldr	r6, [r6, #0]
  404912:	e7f7      	b.n	404904 <__sfp+0x14>
  404914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  404918:	b16d      	cbz	r5, 404936 <__sfp+0x46>
  40491a:	3468      	adds	r4, #104	; 0x68
  40491c:	e7f4      	b.n	404908 <__sfp+0x18>
  40491e:	2104      	movs	r1, #4
  404920:	4638      	mov	r0, r7
  404922:	f7ff ff9f 	bl	404864 <__sfmoreglue>
  404926:	6030      	str	r0, [r6, #0]
  404928:	2800      	cmp	r0, #0
  40492a:	d1f1      	bne.n	404910 <__sfp+0x20>
  40492c:	230c      	movs	r3, #12
  40492e:	603b      	str	r3, [r7, #0]
  404930:	4604      	mov	r4, r0
  404932:	4620      	mov	r0, r4
  404934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404936:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40493a:	81e3      	strh	r3, [r4, #14]
  40493c:	2301      	movs	r3, #1
  40493e:	81a3      	strh	r3, [r4, #12]
  404940:	6665      	str	r5, [r4, #100]	; 0x64
  404942:	6025      	str	r5, [r4, #0]
  404944:	60a5      	str	r5, [r4, #8]
  404946:	6065      	str	r5, [r4, #4]
  404948:	6125      	str	r5, [r4, #16]
  40494a:	6165      	str	r5, [r4, #20]
  40494c:	61a5      	str	r5, [r4, #24]
  40494e:	2208      	movs	r2, #8
  404950:	4629      	mov	r1, r5
  404952:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  404956:	f7fe fb0e 	bl	402f76 <memset>
  40495a:	6365      	str	r5, [r4, #52]	; 0x34
  40495c:	63a5      	str	r5, [r4, #56]	; 0x38
  40495e:	64a5      	str	r5, [r4, #72]	; 0x48
  404960:	64e5      	str	r5, [r4, #76]	; 0x4c
  404962:	e7e6      	b.n	404932 <__sfp+0x42>
  404964:	00405ca8 	.word	0x00405ca8

00404968 <_fwalk_reent>:
  404968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40496c:	4680      	mov	r8, r0
  40496e:	4689      	mov	r9, r1
  404970:	f100 0448 	add.w	r4, r0, #72	; 0x48
  404974:	2600      	movs	r6, #0
  404976:	b914      	cbnz	r4, 40497e <_fwalk_reent+0x16>
  404978:	4630      	mov	r0, r6
  40497a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40497e:	68a5      	ldr	r5, [r4, #8]
  404980:	6867      	ldr	r7, [r4, #4]
  404982:	3f01      	subs	r7, #1
  404984:	d501      	bpl.n	40498a <_fwalk_reent+0x22>
  404986:	6824      	ldr	r4, [r4, #0]
  404988:	e7f5      	b.n	404976 <_fwalk_reent+0xe>
  40498a:	89ab      	ldrh	r3, [r5, #12]
  40498c:	2b01      	cmp	r3, #1
  40498e:	d907      	bls.n	4049a0 <_fwalk_reent+0x38>
  404990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  404994:	3301      	adds	r3, #1
  404996:	d003      	beq.n	4049a0 <_fwalk_reent+0x38>
  404998:	4629      	mov	r1, r5
  40499a:	4640      	mov	r0, r8
  40499c:	47c8      	blx	r9
  40499e:	4306      	orrs	r6, r0
  4049a0:	3568      	adds	r5, #104	; 0x68
  4049a2:	e7ee      	b.n	404982 <_fwalk_reent+0x1a>

004049a4 <_localeconv_r>:
  4049a4:	4b04      	ldr	r3, [pc, #16]	; (4049b8 <_localeconv_r+0x14>)
  4049a6:	681b      	ldr	r3, [r3, #0]
  4049a8:	6a18      	ldr	r0, [r3, #32]
  4049aa:	4b04      	ldr	r3, [pc, #16]	; (4049bc <_localeconv_r+0x18>)
  4049ac:	2800      	cmp	r0, #0
  4049ae:	bf08      	it	eq
  4049b0:	4618      	moveq	r0, r3
  4049b2:	30f0      	adds	r0, #240	; 0xf0
  4049b4:	4770      	bx	lr
  4049b6:	bf00      	nop
  4049b8:	20400048 	.word	0x20400048
  4049bc:	204000ac 	.word	0x204000ac

004049c0 <__swhatbuf_r>:
  4049c0:	b570      	push	{r4, r5, r6, lr}
  4049c2:	460e      	mov	r6, r1
  4049c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4049c8:	2900      	cmp	r1, #0
  4049ca:	b090      	sub	sp, #64	; 0x40
  4049cc:	4614      	mov	r4, r2
  4049ce:	461d      	mov	r5, r3
  4049d0:	da07      	bge.n	4049e2 <__swhatbuf_r+0x22>
  4049d2:	2300      	movs	r3, #0
  4049d4:	602b      	str	r3, [r5, #0]
  4049d6:	89b3      	ldrh	r3, [r6, #12]
  4049d8:	061a      	lsls	r2, r3, #24
  4049da:	d410      	bmi.n	4049fe <__swhatbuf_r+0x3e>
  4049dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4049e0:	e00e      	b.n	404a00 <__swhatbuf_r+0x40>
  4049e2:	aa01      	add	r2, sp, #4
  4049e4:	f000 feaa 	bl	40573c <_fstat_r>
  4049e8:	2800      	cmp	r0, #0
  4049ea:	dbf2      	blt.n	4049d2 <__swhatbuf_r+0x12>
  4049ec:	9a02      	ldr	r2, [sp, #8]
  4049ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4049f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  4049f6:	425a      	negs	r2, r3
  4049f8:	415a      	adcs	r2, r3
  4049fa:	602a      	str	r2, [r5, #0]
  4049fc:	e7ee      	b.n	4049dc <__swhatbuf_r+0x1c>
  4049fe:	2340      	movs	r3, #64	; 0x40
  404a00:	2000      	movs	r0, #0
  404a02:	6023      	str	r3, [r4, #0]
  404a04:	b010      	add	sp, #64	; 0x40
  404a06:	bd70      	pop	{r4, r5, r6, pc}

00404a08 <__smakebuf_r>:
  404a08:	898b      	ldrh	r3, [r1, #12]
  404a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  404a0c:	079d      	lsls	r5, r3, #30
  404a0e:	4606      	mov	r6, r0
  404a10:	460c      	mov	r4, r1
  404a12:	d507      	bpl.n	404a24 <__smakebuf_r+0x1c>
  404a14:	f104 0347 	add.w	r3, r4, #71	; 0x47
  404a18:	6023      	str	r3, [r4, #0]
  404a1a:	6123      	str	r3, [r4, #16]
  404a1c:	2301      	movs	r3, #1
  404a1e:	6163      	str	r3, [r4, #20]
  404a20:	b002      	add	sp, #8
  404a22:	bd70      	pop	{r4, r5, r6, pc}
  404a24:	ab01      	add	r3, sp, #4
  404a26:	466a      	mov	r2, sp
  404a28:	f7ff ffca 	bl	4049c0 <__swhatbuf_r>
  404a2c:	9900      	ldr	r1, [sp, #0]
  404a2e:	4605      	mov	r5, r0
  404a30:	4630      	mov	r0, r6
  404a32:	f000 fbb1 	bl	405198 <_malloc_r>
  404a36:	b948      	cbnz	r0, 404a4c <__smakebuf_r+0x44>
  404a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a3c:	059a      	lsls	r2, r3, #22
  404a3e:	d4ef      	bmi.n	404a20 <__smakebuf_r+0x18>
  404a40:	f023 0303 	bic.w	r3, r3, #3
  404a44:	f043 0302 	orr.w	r3, r3, #2
  404a48:	81a3      	strh	r3, [r4, #12]
  404a4a:	e7e3      	b.n	404a14 <__smakebuf_r+0xc>
  404a4c:	4b0d      	ldr	r3, [pc, #52]	; (404a84 <__smakebuf_r+0x7c>)
  404a4e:	62b3      	str	r3, [r6, #40]	; 0x28
  404a50:	89a3      	ldrh	r3, [r4, #12]
  404a52:	6020      	str	r0, [r4, #0]
  404a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404a58:	81a3      	strh	r3, [r4, #12]
  404a5a:	9b00      	ldr	r3, [sp, #0]
  404a5c:	6163      	str	r3, [r4, #20]
  404a5e:	9b01      	ldr	r3, [sp, #4]
  404a60:	6120      	str	r0, [r4, #16]
  404a62:	b15b      	cbz	r3, 404a7c <__smakebuf_r+0x74>
  404a64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404a68:	4630      	mov	r0, r6
  404a6a:	f000 fe79 	bl	405760 <_isatty_r>
  404a6e:	b128      	cbz	r0, 404a7c <__smakebuf_r+0x74>
  404a70:	89a3      	ldrh	r3, [r4, #12]
  404a72:	f023 0303 	bic.w	r3, r3, #3
  404a76:	f043 0301 	orr.w	r3, r3, #1
  404a7a:	81a3      	strh	r3, [r4, #12]
  404a7c:	89a3      	ldrh	r3, [r4, #12]
  404a7e:	431d      	orrs	r5, r3
  404a80:	81a5      	strh	r5, [r4, #12]
  404a82:	e7cd      	b.n	404a20 <__smakebuf_r+0x18>
  404a84:	00404811 	.word	0x00404811

00404a88 <malloc>:
  404a88:	4b02      	ldr	r3, [pc, #8]	; (404a94 <malloc+0xc>)
  404a8a:	4601      	mov	r1, r0
  404a8c:	6818      	ldr	r0, [r3, #0]
  404a8e:	f000 bb83 	b.w	405198 <_malloc_r>
  404a92:	bf00      	nop
  404a94:	20400048 	.word	0x20400048
	...

00404aa0 <memchr>:
  404aa0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404aa4:	2a10      	cmp	r2, #16
  404aa6:	db2b      	blt.n	404b00 <memchr+0x60>
  404aa8:	f010 0f07 	tst.w	r0, #7
  404aac:	d008      	beq.n	404ac0 <memchr+0x20>
  404aae:	f810 3b01 	ldrb.w	r3, [r0], #1
  404ab2:	3a01      	subs	r2, #1
  404ab4:	428b      	cmp	r3, r1
  404ab6:	d02d      	beq.n	404b14 <memchr+0x74>
  404ab8:	f010 0f07 	tst.w	r0, #7
  404abc:	b342      	cbz	r2, 404b10 <memchr+0x70>
  404abe:	d1f6      	bne.n	404aae <memchr+0xe>
  404ac0:	b4f0      	push	{r4, r5, r6, r7}
  404ac2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404ac6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404aca:	f022 0407 	bic.w	r4, r2, #7
  404ace:	f07f 0700 	mvns.w	r7, #0
  404ad2:	2300      	movs	r3, #0
  404ad4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404ad8:	3c08      	subs	r4, #8
  404ada:	ea85 0501 	eor.w	r5, r5, r1
  404ade:	ea86 0601 	eor.w	r6, r6, r1
  404ae2:	fa85 f547 	uadd8	r5, r5, r7
  404ae6:	faa3 f587 	sel	r5, r3, r7
  404aea:	fa86 f647 	uadd8	r6, r6, r7
  404aee:	faa5 f687 	sel	r6, r5, r7
  404af2:	b98e      	cbnz	r6, 404b18 <memchr+0x78>
  404af4:	d1ee      	bne.n	404ad4 <memchr+0x34>
  404af6:	bcf0      	pop	{r4, r5, r6, r7}
  404af8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404afc:	f002 0207 	and.w	r2, r2, #7
  404b00:	b132      	cbz	r2, 404b10 <memchr+0x70>
  404b02:	f810 3b01 	ldrb.w	r3, [r0], #1
  404b06:	3a01      	subs	r2, #1
  404b08:	ea83 0301 	eor.w	r3, r3, r1
  404b0c:	b113      	cbz	r3, 404b14 <memchr+0x74>
  404b0e:	d1f8      	bne.n	404b02 <memchr+0x62>
  404b10:	2000      	movs	r0, #0
  404b12:	4770      	bx	lr
  404b14:	3801      	subs	r0, #1
  404b16:	4770      	bx	lr
  404b18:	2d00      	cmp	r5, #0
  404b1a:	bf06      	itte	eq
  404b1c:	4635      	moveq	r5, r6
  404b1e:	3803      	subeq	r0, #3
  404b20:	3807      	subne	r0, #7
  404b22:	f015 0f01 	tst.w	r5, #1
  404b26:	d107      	bne.n	404b38 <memchr+0x98>
  404b28:	3001      	adds	r0, #1
  404b2a:	f415 7f80 	tst.w	r5, #256	; 0x100
  404b2e:	bf02      	ittt	eq
  404b30:	3001      	addeq	r0, #1
  404b32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404b36:	3001      	addeq	r0, #1
  404b38:	bcf0      	pop	{r4, r5, r6, r7}
  404b3a:	3801      	subs	r0, #1
  404b3c:	4770      	bx	lr
  404b3e:	bf00      	nop

00404b40 <_Balloc>:
  404b40:	b570      	push	{r4, r5, r6, lr}
  404b42:	6a45      	ldr	r5, [r0, #36]	; 0x24
  404b44:	4604      	mov	r4, r0
  404b46:	460e      	mov	r6, r1
  404b48:	b93d      	cbnz	r5, 404b5a <_Balloc+0x1a>
  404b4a:	2010      	movs	r0, #16
  404b4c:	f7ff ff9c 	bl	404a88 <malloc>
  404b50:	6260      	str	r0, [r4, #36]	; 0x24
  404b52:	6045      	str	r5, [r0, #4]
  404b54:	6085      	str	r5, [r0, #8]
  404b56:	6005      	str	r5, [r0, #0]
  404b58:	60c5      	str	r5, [r0, #12]
  404b5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  404b5c:	68eb      	ldr	r3, [r5, #12]
  404b5e:	b183      	cbz	r3, 404b82 <_Balloc+0x42>
  404b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404b62:	68db      	ldr	r3, [r3, #12]
  404b64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  404b68:	b9b8      	cbnz	r0, 404b9a <_Balloc+0x5a>
  404b6a:	2101      	movs	r1, #1
  404b6c:	fa01 f506 	lsl.w	r5, r1, r6
  404b70:	1d6a      	adds	r2, r5, #5
  404b72:	0092      	lsls	r2, r2, #2
  404b74:	4620      	mov	r0, r4
  404b76:	f000 fab3 	bl	4050e0 <_calloc_r>
  404b7a:	b160      	cbz	r0, 404b96 <_Balloc+0x56>
  404b7c:	6046      	str	r6, [r0, #4]
  404b7e:	6085      	str	r5, [r0, #8]
  404b80:	e00e      	b.n	404ba0 <_Balloc+0x60>
  404b82:	2221      	movs	r2, #33	; 0x21
  404b84:	2104      	movs	r1, #4
  404b86:	4620      	mov	r0, r4
  404b88:	f000 faaa 	bl	4050e0 <_calloc_r>
  404b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404b8e:	60e8      	str	r0, [r5, #12]
  404b90:	68db      	ldr	r3, [r3, #12]
  404b92:	2b00      	cmp	r3, #0
  404b94:	d1e4      	bne.n	404b60 <_Balloc+0x20>
  404b96:	2000      	movs	r0, #0
  404b98:	bd70      	pop	{r4, r5, r6, pc}
  404b9a:	6802      	ldr	r2, [r0, #0]
  404b9c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  404ba0:	2300      	movs	r3, #0
  404ba2:	6103      	str	r3, [r0, #16]
  404ba4:	60c3      	str	r3, [r0, #12]
  404ba6:	bd70      	pop	{r4, r5, r6, pc}

00404ba8 <_Bfree>:
  404ba8:	b570      	push	{r4, r5, r6, lr}
  404baa:	6a44      	ldr	r4, [r0, #36]	; 0x24
  404bac:	4606      	mov	r6, r0
  404bae:	460d      	mov	r5, r1
  404bb0:	b93c      	cbnz	r4, 404bc2 <_Bfree+0x1a>
  404bb2:	2010      	movs	r0, #16
  404bb4:	f7ff ff68 	bl	404a88 <malloc>
  404bb8:	6270      	str	r0, [r6, #36]	; 0x24
  404bba:	6044      	str	r4, [r0, #4]
  404bbc:	6084      	str	r4, [r0, #8]
  404bbe:	6004      	str	r4, [r0, #0]
  404bc0:	60c4      	str	r4, [r0, #12]
  404bc2:	b13d      	cbz	r5, 404bd4 <_Bfree+0x2c>
  404bc4:	6a73      	ldr	r3, [r6, #36]	; 0x24
  404bc6:	686a      	ldr	r2, [r5, #4]
  404bc8:	68db      	ldr	r3, [r3, #12]
  404bca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404bce:	6029      	str	r1, [r5, #0]
  404bd0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  404bd4:	bd70      	pop	{r4, r5, r6, pc}

00404bd6 <__multadd>:
  404bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404bda:	690d      	ldr	r5, [r1, #16]
  404bdc:	461f      	mov	r7, r3
  404bde:	4606      	mov	r6, r0
  404be0:	460c      	mov	r4, r1
  404be2:	f101 0e14 	add.w	lr, r1, #20
  404be6:	2300      	movs	r3, #0
  404be8:	f8de 0000 	ldr.w	r0, [lr]
  404bec:	b281      	uxth	r1, r0
  404bee:	fb02 7101 	mla	r1, r2, r1, r7
  404bf2:	0c0f      	lsrs	r7, r1, #16
  404bf4:	0c00      	lsrs	r0, r0, #16
  404bf6:	fb02 7000 	mla	r0, r2, r0, r7
  404bfa:	b289      	uxth	r1, r1
  404bfc:	3301      	adds	r3, #1
  404bfe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  404c02:	429d      	cmp	r5, r3
  404c04:	ea4f 4710 	mov.w	r7, r0, lsr #16
  404c08:	f84e 1b04 	str.w	r1, [lr], #4
  404c0c:	dcec      	bgt.n	404be8 <__multadd+0x12>
  404c0e:	b1d7      	cbz	r7, 404c46 <__multadd+0x70>
  404c10:	68a3      	ldr	r3, [r4, #8]
  404c12:	429d      	cmp	r5, r3
  404c14:	db12      	blt.n	404c3c <__multadd+0x66>
  404c16:	6861      	ldr	r1, [r4, #4]
  404c18:	4630      	mov	r0, r6
  404c1a:	3101      	adds	r1, #1
  404c1c:	f7ff ff90 	bl	404b40 <_Balloc>
  404c20:	6922      	ldr	r2, [r4, #16]
  404c22:	3202      	adds	r2, #2
  404c24:	f104 010c 	add.w	r1, r4, #12
  404c28:	4680      	mov	r8, r0
  404c2a:	0092      	lsls	r2, r2, #2
  404c2c:	300c      	adds	r0, #12
  404c2e:	f7fe f997 	bl	402f60 <memcpy>
  404c32:	4621      	mov	r1, r4
  404c34:	4630      	mov	r0, r6
  404c36:	f7ff ffb7 	bl	404ba8 <_Bfree>
  404c3a:	4644      	mov	r4, r8
  404c3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  404c40:	3501      	adds	r5, #1
  404c42:	615f      	str	r7, [r3, #20]
  404c44:	6125      	str	r5, [r4, #16]
  404c46:	4620      	mov	r0, r4
  404c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404c4c <__hi0bits>:
  404c4c:	0c02      	lsrs	r2, r0, #16
  404c4e:	0412      	lsls	r2, r2, #16
  404c50:	4603      	mov	r3, r0
  404c52:	b9b2      	cbnz	r2, 404c82 <__hi0bits+0x36>
  404c54:	0403      	lsls	r3, r0, #16
  404c56:	2010      	movs	r0, #16
  404c58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  404c5c:	bf04      	itt	eq
  404c5e:	021b      	lsleq	r3, r3, #8
  404c60:	3008      	addeq	r0, #8
  404c62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  404c66:	bf04      	itt	eq
  404c68:	011b      	lsleq	r3, r3, #4
  404c6a:	3004      	addeq	r0, #4
  404c6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  404c70:	bf04      	itt	eq
  404c72:	009b      	lsleq	r3, r3, #2
  404c74:	3002      	addeq	r0, #2
  404c76:	2b00      	cmp	r3, #0
  404c78:	db06      	blt.n	404c88 <__hi0bits+0x3c>
  404c7a:	005b      	lsls	r3, r3, #1
  404c7c:	d503      	bpl.n	404c86 <__hi0bits+0x3a>
  404c7e:	3001      	adds	r0, #1
  404c80:	4770      	bx	lr
  404c82:	2000      	movs	r0, #0
  404c84:	e7e8      	b.n	404c58 <__hi0bits+0xc>
  404c86:	2020      	movs	r0, #32
  404c88:	4770      	bx	lr

00404c8a <__lo0bits>:
  404c8a:	6803      	ldr	r3, [r0, #0]
  404c8c:	f013 0207 	ands.w	r2, r3, #7
  404c90:	4601      	mov	r1, r0
  404c92:	d00b      	beq.n	404cac <__lo0bits+0x22>
  404c94:	07da      	lsls	r2, r3, #31
  404c96:	d423      	bmi.n	404ce0 <__lo0bits+0x56>
  404c98:	0798      	lsls	r0, r3, #30
  404c9a:	bf49      	itett	mi
  404c9c:	085b      	lsrmi	r3, r3, #1
  404c9e:	089b      	lsrpl	r3, r3, #2
  404ca0:	2001      	movmi	r0, #1
  404ca2:	600b      	strmi	r3, [r1, #0]
  404ca4:	bf5c      	itt	pl
  404ca6:	600b      	strpl	r3, [r1, #0]
  404ca8:	2002      	movpl	r0, #2
  404caa:	4770      	bx	lr
  404cac:	b298      	uxth	r0, r3
  404cae:	b9a8      	cbnz	r0, 404cdc <__lo0bits+0x52>
  404cb0:	0c1b      	lsrs	r3, r3, #16
  404cb2:	2010      	movs	r0, #16
  404cb4:	f013 0fff 	tst.w	r3, #255	; 0xff
  404cb8:	bf04      	itt	eq
  404cba:	0a1b      	lsreq	r3, r3, #8
  404cbc:	3008      	addeq	r0, #8
  404cbe:	071a      	lsls	r2, r3, #28
  404cc0:	bf04      	itt	eq
  404cc2:	091b      	lsreq	r3, r3, #4
  404cc4:	3004      	addeq	r0, #4
  404cc6:	079a      	lsls	r2, r3, #30
  404cc8:	bf04      	itt	eq
  404cca:	089b      	lsreq	r3, r3, #2
  404ccc:	3002      	addeq	r0, #2
  404cce:	07da      	lsls	r2, r3, #31
  404cd0:	d402      	bmi.n	404cd8 <__lo0bits+0x4e>
  404cd2:	085b      	lsrs	r3, r3, #1
  404cd4:	d006      	beq.n	404ce4 <__lo0bits+0x5a>
  404cd6:	3001      	adds	r0, #1
  404cd8:	600b      	str	r3, [r1, #0]
  404cda:	4770      	bx	lr
  404cdc:	4610      	mov	r0, r2
  404cde:	e7e9      	b.n	404cb4 <__lo0bits+0x2a>
  404ce0:	2000      	movs	r0, #0
  404ce2:	4770      	bx	lr
  404ce4:	2020      	movs	r0, #32
  404ce6:	4770      	bx	lr

00404ce8 <__i2b>:
  404ce8:	b510      	push	{r4, lr}
  404cea:	460c      	mov	r4, r1
  404cec:	2101      	movs	r1, #1
  404cee:	f7ff ff27 	bl	404b40 <_Balloc>
  404cf2:	2201      	movs	r2, #1
  404cf4:	6144      	str	r4, [r0, #20]
  404cf6:	6102      	str	r2, [r0, #16]
  404cf8:	bd10      	pop	{r4, pc}

00404cfa <__multiply>:
  404cfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404cfe:	4614      	mov	r4, r2
  404d00:	690a      	ldr	r2, [r1, #16]
  404d02:	6923      	ldr	r3, [r4, #16]
  404d04:	429a      	cmp	r2, r3
  404d06:	bfb8      	it	lt
  404d08:	460b      	movlt	r3, r1
  404d0a:	4689      	mov	r9, r1
  404d0c:	bfbc      	itt	lt
  404d0e:	46a1      	movlt	r9, r4
  404d10:	461c      	movlt	r4, r3
  404d12:	f8d9 7010 	ldr.w	r7, [r9, #16]
  404d16:	f8d4 a010 	ldr.w	sl, [r4, #16]
  404d1a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  404d1e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  404d22:	eb07 060a 	add.w	r6, r7, sl
  404d26:	429e      	cmp	r6, r3
  404d28:	bfc8      	it	gt
  404d2a:	3101      	addgt	r1, #1
  404d2c:	f7ff ff08 	bl	404b40 <_Balloc>
  404d30:	f100 0514 	add.w	r5, r0, #20
  404d34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  404d38:	462b      	mov	r3, r5
  404d3a:	2200      	movs	r2, #0
  404d3c:	4543      	cmp	r3, r8
  404d3e:	d316      	bcc.n	404d6e <__multiply+0x74>
  404d40:	f104 0214 	add.w	r2, r4, #20
  404d44:	f109 0114 	add.w	r1, r9, #20
  404d48:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  404d4c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  404d50:	9301      	str	r3, [sp, #4]
  404d52:	9c01      	ldr	r4, [sp, #4]
  404d54:	4294      	cmp	r4, r2
  404d56:	4613      	mov	r3, r2
  404d58:	d80c      	bhi.n	404d74 <__multiply+0x7a>
  404d5a:	2e00      	cmp	r6, #0
  404d5c:	dd03      	ble.n	404d66 <__multiply+0x6c>
  404d5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  404d62:	2b00      	cmp	r3, #0
  404d64:	d054      	beq.n	404e10 <__multiply+0x116>
  404d66:	6106      	str	r6, [r0, #16]
  404d68:	b003      	add	sp, #12
  404d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d6e:	f843 2b04 	str.w	r2, [r3], #4
  404d72:	e7e3      	b.n	404d3c <__multiply+0x42>
  404d74:	f8b3 a000 	ldrh.w	sl, [r3]
  404d78:	3204      	adds	r2, #4
  404d7a:	f1ba 0f00 	cmp.w	sl, #0
  404d7e:	d020      	beq.n	404dc2 <__multiply+0xc8>
  404d80:	46ae      	mov	lr, r5
  404d82:	4689      	mov	r9, r1
  404d84:	f04f 0c00 	mov.w	ip, #0
  404d88:	f859 4b04 	ldr.w	r4, [r9], #4
  404d8c:	f8be b000 	ldrh.w	fp, [lr]
  404d90:	b2a3      	uxth	r3, r4
  404d92:	fb0a b303 	mla	r3, sl, r3, fp
  404d96:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  404d9a:	f8de 4000 	ldr.w	r4, [lr]
  404d9e:	4463      	add	r3, ip
  404da0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  404da4:	fb0a c40b 	mla	r4, sl, fp, ip
  404da8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  404dac:	b29b      	uxth	r3, r3
  404dae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  404db2:	454f      	cmp	r7, r9
  404db4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  404db8:	f84e 3b04 	str.w	r3, [lr], #4
  404dbc:	d8e4      	bhi.n	404d88 <__multiply+0x8e>
  404dbe:	f8ce c000 	str.w	ip, [lr]
  404dc2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  404dc6:	f1b9 0f00 	cmp.w	r9, #0
  404dca:	d01f      	beq.n	404e0c <__multiply+0x112>
  404dcc:	682b      	ldr	r3, [r5, #0]
  404dce:	46ae      	mov	lr, r5
  404dd0:	468c      	mov	ip, r1
  404dd2:	f04f 0a00 	mov.w	sl, #0
  404dd6:	f8bc 4000 	ldrh.w	r4, [ip]
  404dda:	f8be b002 	ldrh.w	fp, [lr, #2]
  404dde:	fb09 b404 	mla	r4, r9, r4, fp
  404de2:	44a2      	add	sl, r4
  404de4:	b29b      	uxth	r3, r3
  404de6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  404dea:	f84e 3b04 	str.w	r3, [lr], #4
  404dee:	f85c 3b04 	ldr.w	r3, [ip], #4
  404df2:	f8be 4000 	ldrh.w	r4, [lr]
  404df6:	0c1b      	lsrs	r3, r3, #16
  404df8:	fb09 4303 	mla	r3, r9, r3, r4
  404dfc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  404e00:	4567      	cmp	r7, ip
  404e02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  404e06:	d8e6      	bhi.n	404dd6 <__multiply+0xdc>
  404e08:	f8ce 3000 	str.w	r3, [lr]
  404e0c:	3504      	adds	r5, #4
  404e0e:	e7a0      	b.n	404d52 <__multiply+0x58>
  404e10:	3e01      	subs	r6, #1
  404e12:	e7a2      	b.n	404d5a <__multiply+0x60>

00404e14 <__pow5mult>:
  404e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404e18:	4615      	mov	r5, r2
  404e1a:	f012 0203 	ands.w	r2, r2, #3
  404e1e:	4606      	mov	r6, r0
  404e20:	460f      	mov	r7, r1
  404e22:	d007      	beq.n	404e34 <__pow5mult+0x20>
  404e24:	3a01      	subs	r2, #1
  404e26:	4c21      	ldr	r4, [pc, #132]	; (404eac <__pow5mult+0x98>)
  404e28:	2300      	movs	r3, #0
  404e2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  404e2e:	f7ff fed2 	bl	404bd6 <__multadd>
  404e32:	4607      	mov	r7, r0
  404e34:	10ad      	asrs	r5, r5, #2
  404e36:	d035      	beq.n	404ea4 <__pow5mult+0x90>
  404e38:	6a74      	ldr	r4, [r6, #36]	; 0x24
  404e3a:	b93c      	cbnz	r4, 404e4c <__pow5mult+0x38>
  404e3c:	2010      	movs	r0, #16
  404e3e:	f7ff fe23 	bl	404a88 <malloc>
  404e42:	6270      	str	r0, [r6, #36]	; 0x24
  404e44:	6044      	str	r4, [r0, #4]
  404e46:	6084      	str	r4, [r0, #8]
  404e48:	6004      	str	r4, [r0, #0]
  404e4a:	60c4      	str	r4, [r0, #12]
  404e4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  404e50:	f8d8 4008 	ldr.w	r4, [r8, #8]
  404e54:	b94c      	cbnz	r4, 404e6a <__pow5mult+0x56>
  404e56:	f240 2171 	movw	r1, #625	; 0x271
  404e5a:	4630      	mov	r0, r6
  404e5c:	f7ff ff44 	bl	404ce8 <__i2b>
  404e60:	2300      	movs	r3, #0
  404e62:	f8c8 0008 	str.w	r0, [r8, #8]
  404e66:	4604      	mov	r4, r0
  404e68:	6003      	str	r3, [r0, #0]
  404e6a:	f04f 0800 	mov.w	r8, #0
  404e6e:	07eb      	lsls	r3, r5, #31
  404e70:	d50a      	bpl.n	404e88 <__pow5mult+0x74>
  404e72:	4639      	mov	r1, r7
  404e74:	4622      	mov	r2, r4
  404e76:	4630      	mov	r0, r6
  404e78:	f7ff ff3f 	bl	404cfa <__multiply>
  404e7c:	4639      	mov	r1, r7
  404e7e:	4681      	mov	r9, r0
  404e80:	4630      	mov	r0, r6
  404e82:	f7ff fe91 	bl	404ba8 <_Bfree>
  404e86:	464f      	mov	r7, r9
  404e88:	106d      	asrs	r5, r5, #1
  404e8a:	d00b      	beq.n	404ea4 <__pow5mult+0x90>
  404e8c:	6820      	ldr	r0, [r4, #0]
  404e8e:	b938      	cbnz	r0, 404ea0 <__pow5mult+0x8c>
  404e90:	4622      	mov	r2, r4
  404e92:	4621      	mov	r1, r4
  404e94:	4630      	mov	r0, r6
  404e96:	f7ff ff30 	bl	404cfa <__multiply>
  404e9a:	6020      	str	r0, [r4, #0]
  404e9c:	f8c0 8000 	str.w	r8, [r0]
  404ea0:	4604      	mov	r4, r0
  404ea2:	e7e4      	b.n	404e6e <__pow5mult+0x5a>
  404ea4:	4638      	mov	r0, r7
  404ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404eaa:	bf00      	nop
  404eac:	00405e40 	.word	0x00405e40

00404eb0 <__lshift>:
  404eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404eb4:	460c      	mov	r4, r1
  404eb6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  404eba:	6923      	ldr	r3, [r4, #16]
  404ebc:	6849      	ldr	r1, [r1, #4]
  404ebe:	eb0a 0903 	add.w	r9, sl, r3
  404ec2:	68a3      	ldr	r3, [r4, #8]
  404ec4:	4607      	mov	r7, r0
  404ec6:	4616      	mov	r6, r2
  404ec8:	f109 0501 	add.w	r5, r9, #1
  404ecc:	42ab      	cmp	r3, r5
  404ece:	db31      	blt.n	404f34 <__lshift+0x84>
  404ed0:	4638      	mov	r0, r7
  404ed2:	f7ff fe35 	bl	404b40 <_Balloc>
  404ed6:	2200      	movs	r2, #0
  404ed8:	4680      	mov	r8, r0
  404eda:	f100 0314 	add.w	r3, r0, #20
  404ede:	4611      	mov	r1, r2
  404ee0:	4552      	cmp	r2, sl
  404ee2:	db2a      	blt.n	404f3a <__lshift+0x8a>
  404ee4:	6920      	ldr	r0, [r4, #16]
  404ee6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  404eea:	f104 0114 	add.w	r1, r4, #20
  404eee:	f016 021f 	ands.w	r2, r6, #31
  404ef2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  404ef6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  404efa:	d022      	beq.n	404f42 <__lshift+0x92>
  404efc:	f1c2 0c20 	rsb	ip, r2, #32
  404f00:	2000      	movs	r0, #0
  404f02:	680e      	ldr	r6, [r1, #0]
  404f04:	4096      	lsls	r6, r2
  404f06:	4330      	orrs	r0, r6
  404f08:	f843 0b04 	str.w	r0, [r3], #4
  404f0c:	f851 0b04 	ldr.w	r0, [r1], #4
  404f10:	458e      	cmp	lr, r1
  404f12:	fa20 f00c 	lsr.w	r0, r0, ip
  404f16:	d8f4      	bhi.n	404f02 <__lshift+0x52>
  404f18:	6018      	str	r0, [r3, #0]
  404f1a:	b108      	cbz	r0, 404f20 <__lshift+0x70>
  404f1c:	f109 0502 	add.w	r5, r9, #2
  404f20:	3d01      	subs	r5, #1
  404f22:	4638      	mov	r0, r7
  404f24:	f8c8 5010 	str.w	r5, [r8, #16]
  404f28:	4621      	mov	r1, r4
  404f2a:	f7ff fe3d 	bl	404ba8 <_Bfree>
  404f2e:	4640      	mov	r0, r8
  404f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404f34:	3101      	adds	r1, #1
  404f36:	005b      	lsls	r3, r3, #1
  404f38:	e7c8      	b.n	404ecc <__lshift+0x1c>
  404f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  404f3e:	3201      	adds	r2, #1
  404f40:	e7ce      	b.n	404ee0 <__lshift+0x30>
  404f42:	3b04      	subs	r3, #4
  404f44:	f851 2b04 	ldr.w	r2, [r1], #4
  404f48:	f843 2f04 	str.w	r2, [r3, #4]!
  404f4c:	458e      	cmp	lr, r1
  404f4e:	d8f9      	bhi.n	404f44 <__lshift+0x94>
  404f50:	e7e6      	b.n	404f20 <__lshift+0x70>

00404f52 <__mcmp>:
  404f52:	6903      	ldr	r3, [r0, #16]
  404f54:	690a      	ldr	r2, [r1, #16]
  404f56:	1a9b      	subs	r3, r3, r2
  404f58:	b530      	push	{r4, r5, lr}
  404f5a:	d10c      	bne.n	404f76 <__mcmp+0x24>
  404f5c:	0092      	lsls	r2, r2, #2
  404f5e:	3014      	adds	r0, #20
  404f60:	3114      	adds	r1, #20
  404f62:	1884      	adds	r4, r0, r2
  404f64:	4411      	add	r1, r2
  404f66:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  404f6a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  404f6e:	4295      	cmp	r5, r2
  404f70:	d003      	beq.n	404f7a <__mcmp+0x28>
  404f72:	d305      	bcc.n	404f80 <__mcmp+0x2e>
  404f74:	2301      	movs	r3, #1
  404f76:	4618      	mov	r0, r3
  404f78:	bd30      	pop	{r4, r5, pc}
  404f7a:	42a0      	cmp	r0, r4
  404f7c:	d3f3      	bcc.n	404f66 <__mcmp+0x14>
  404f7e:	e7fa      	b.n	404f76 <__mcmp+0x24>
  404f80:	f04f 33ff 	mov.w	r3, #4294967295
  404f84:	e7f7      	b.n	404f76 <__mcmp+0x24>

00404f86 <__mdiff>:
  404f86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404f8a:	460d      	mov	r5, r1
  404f8c:	4607      	mov	r7, r0
  404f8e:	4611      	mov	r1, r2
  404f90:	4628      	mov	r0, r5
  404f92:	4614      	mov	r4, r2
  404f94:	f7ff ffdd 	bl	404f52 <__mcmp>
  404f98:	1e06      	subs	r6, r0, #0
  404f9a:	d108      	bne.n	404fae <__mdiff+0x28>
  404f9c:	4631      	mov	r1, r6
  404f9e:	4638      	mov	r0, r7
  404fa0:	f7ff fdce 	bl	404b40 <_Balloc>
  404fa4:	2301      	movs	r3, #1
  404fa6:	6103      	str	r3, [r0, #16]
  404fa8:	6146      	str	r6, [r0, #20]
  404faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404fae:	bfa4      	itt	ge
  404fb0:	4623      	movge	r3, r4
  404fb2:	462c      	movge	r4, r5
  404fb4:	4638      	mov	r0, r7
  404fb6:	6861      	ldr	r1, [r4, #4]
  404fb8:	bfa6      	itte	ge
  404fba:	461d      	movge	r5, r3
  404fbc:	2600      	movge	r6, #0
  404fbe:	2601      	movlt	r6, #1
  404fc0:	f7ff fdbe 	bl	404b40 <_Balloc>
  404fc4:	692b      	ldr	r3, [r5, #16]
  404fc6:	60c6      	str	r6, [r0, #12]
  404fc8:	6926      	ldr	r6, [r4, #16]
  404fca:	f105 0914 	add.w	r9, r5, #20
  404fce:	f104 0214 	add.w	r2, r4, #20
  404fd2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  404fd6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  404fda:	f100 0514 	add.w	r5, r0, #20
  404fde:	f04f 0c00 	mov.w	ip, #0
  404fe2:	f852 ab04 	ldr.w	sl, [r2], #4
  404fe6:	f859 4b04 	ldr.w	r4, [r9], #4
  404fea:	fa1c f18a 	uxtah	r1, ip, sl
  404fee:	b2a3      	uxth	r3, r4
  404ff0:	1ac9      	subs	r1, r1, r3
  404ff2:	0c23      	lsrs	r3, r4, #16
  404ff4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  404ff8:	eb03 4321 	add.w	r3, r3, r1, asr #16
  404ffc:	b289      	uxth	r1, r1
  404ffe:	ea4f 4c23 	mov.w	ip, r3, asr #16
  405002:	45c8      	cmp	r8, r9
  405004:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  405008:	4696      	mov	lr, r2
  40500a:	f845 3b04 	str.w	r3, [r5], #4
  40500e:	d8e8      	bhi.n	404fe2 <__mdiff+0x5c>
  405010:	45be      	cmp	lr, r7
  405012:	d305      	bcc.n	405020 <__mdiff+0x9a>
  405014:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405018:	b18b      	cbz	r3, 40503e <__mdiff+0xb8>
  40501a:	6106      	str	r6, [r0, #16]
  40501c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405020:	f85e 1b04 	ldr.w	r1, [lr], #4
  405024:	fa1c f381 	uxtah	r3, ip, r1
  405028:	141a      	asrs	r2, r3, #16
  40502a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  40502e:	b29b      	uxth	r3, r3
  405030:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405034:	ea4f 4c22 	mov.w	ip, r2, asr #16
  405038:	f845 3b04 	str.w	r3, [r5], #4
  40503c:	e7e8      	b.n	405010 <__mdiff+0x8a>
  40503e:	3e01      	subs	r6, #1
  405040:	e7e8      	b.n	405014 <__mdiff+0x8e>

00405042 <__d2b>:
  405042:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  405046:	2101      	movs	r1, #1
  405048:	461c      	mov	r4, r3
  40504a:	4690      	mov	r8, r2
  40504c:	9e08      	ldr	r6, [sp, #32]
  40504e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405050:	f7ff fd76 	bl	404b40 <_Balloc>
  405054:	f3c4 0213 	ubfx	r2, r4, #0, #20
  405058:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40505c:	4607      	mov	r7, r0
  40505e:	bb34      	cbnz	r4, 4050ae <__d2b+0x6c>
  405060:	9201      	str	r2, [sp, #4]
  405062:	f1b8 0f00 	cmp.w	r8, #0
  405066:	d027      	beq.n	4050b8 <__d2b+0x76>
  405068:	a802      	add	r0, sp, #8
  40506a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40506e:	f7ff fe0c 	bl	404c8a <__lo0bits>
  405072:	9900      	ldr	r1, [sp, #0]
  405074:	b1f0      	cbz	r0, 4050b4 <__d2b+0x72>
  405076:	9a01      	ldr	r2, [sp, #4]
  405078:	f1c0 0320 	rsb	r3, r0, #32
  40507c:	fa02 f303 	lsl.w	r3, r2, r3
  405080:	430b      	orrs	r3, r1
  405082:	40c2      	lsrs	r2, r0
  405084:	617b      	str	r3, [r7, #20]
  405086:	9201      	str	r2, [sp, #4]
  405088:	9b01      	ldr	r3, [sp, #4]
  40508a:	61bb      	str	r3, [r7, #24]
  40508c:	2b00      	cmp	r3, #0
  40508e:	bf14      	ite	ne
  405090:	2102      	movne	r1, #2
  405092:	2101      	moveq	r1, #1
  405094:	6139      	str	r1, [r7, #16]
  405096:	b1c4      	cbz	r4, 4050ca <__d2b+0x88>
  405098:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40509c:	4404      	add	r4, r0
  40509e:	6034      	str	r4, [r6, #0]
  4050a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4050a4:	6028      	str	r0, [r5, #0]
  4050a6:	4638      	mov	r0, r7
  4050a8:	b002      	add	sp, #8
  4050aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4050b2:	e7d5      	b.n	405060 <__d2b+0x1e>
  4050b4:	6179      	str	r1, [r7, #20]
  4050b6:	e7e7      	b.n	405088 <__d2b+0x46>
  4050b8:	a801      	add	r0, sp, #4
  4050ba:	f7ff fde6 	bl	404c8a <__lo0bits>
  4050be:	9b01      	ldr	r3, [sp, #4]
  4050c0:	617b      	str	r3, [r7, #20]
  4050c2:	2101      	movs	r1, #1
  4050c4:	6139      	str	r1, [r7, #16]
  4050c6:	3020      	adds	r0, #32
  4050c8:	e7e5      	b.n	405096 <__d2b+0x54>
  4050ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  4050ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4050d2:	6030      	str	r0, [r6, #0]
  4050d4:	6918      	ldr	r0, [r3, #16]
  4050d6:	f7ff fdb9 	bl	404c4c <__hi0bits>
  4050da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4050de:	e7e1      	b.n	4050a4 <__d2b+0x62>

004050e0 <_calloc_r>:
  4050e0:	b538      	push	{r3, r4, r5, lr}
  4050e2:	fb02 f401 	mul.w	r4, r2, r1
  4050e6:	4621      	mov	r1, r4
  4050e8:	f000 f856 	bl	405198 <_malloc_r>
  4050ec:	4605      	mov	r5, r0
  4050ee:	b118      	cbz	r0, 4050f8 <_calloc_r+0x18>
  4050f0:	4622      	mov	r2, r4
  4050f2:	2100      	movs	r1, #0
  4050f4:	f7fd ff3f 	bl	402f76 <memset>
  4050f8:	4628      	mov	r0, r5
  4050fa:	bd38      	pop	{r3, r4, r5, pc}

004050fc <_free_r>:
  4050fc:	b538      	push	{r3, r4, r5, lr}
  4050fe:	4605      	mov	r5, r0
  405100:	2900      	cmp	r1, #0
  405102:	d045      	beq.n	405190 <_free_r+0x94>
  405104:	f851 3c04 	ldr.w	r3, [r1, #-4]
  405108:	1f0c      	subs	r4, r1, #4
  40510a:	2b00      	cmp	r3, #0
  40510c:	bfb8      	it	lt
  40510e:	18e4      	addlt	r4, r4, r3
  405110:	f000 fb5a 	bl	4057c8 <__malloc_lock>
  405114:	4a1f      	ldr	r2, [pc, #124]	; (405194 <_free_r+0x98>)
  405116:	6813      	ldr	r3, [r2, #0]
  405118:	4610      	mov	r0, r2
  40511a:	b933      	cbnz	r3, 40512a <_free_r+0x2e>
  40511c:	6063      	str	r3, [r4, #4]
  40511e:	6014      	str	r4, [r2, #0]
  405120:	4628      	mov	r0, r5
  405122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405126:	f000 bb50 	b.w	4057ca <__malloc_unlock>
  40512a:	42a3      	cmp	r3, r4
  40512c:	d90c      	bls.n	405148 <_free_r+0x4c>
  40512e:	6821      	ldr	r1, [r4, #0]
  405130:	1862      	adds	r2, r4, r1
  405132:	4293      	cmp	r3, r2
  405134:	bf04      	itt	eq
  405136:	681a      	ldreq	r2, [r3, #0]
  405138:	685b      	ldreq	r3, [r3, #4]
  40513a:	6063      	str	r3, [r4, #4]
  40513c:	bf04      	itt	eq
  40513e:	1852      	addeq	r2, r2, r1
  405140:	6022      	streq	r2, [r4, #0]
  405142:	6004      	str	r4, [r0, #0]
  405144:	e7ec      	b.n	405120 <_free_r+0x24>
  405146:	4613      	mov	r3, r2
  405148:	685a      	ldr	r2, [r3, #4]
  40514a:	b10a      	cbz	r2, 405150 <_free_r+0x54>
  40514c:	42a2      	cmp	r2, r4
  40514e:	d9fa      	bls.n	405146 <_free_r+0x4a>
  405150:	6819      	ldr	r1, [r3, #0]
  405152:	1858      	adds	r0, r3, r1
  405154:	42a0      	cmp	r0, r4
  405156:	d10b      	bne.n	405170 <_free_r+0x74>
  405158:	6820      	ldr	r0, [r4, #0]
  40515a:	4401      	add	r1, r0
  40515c:	1858      	adds	r0, r3, r1
  40515e:	4282      	cmp	r2, r0
  405160:	6019      	str	r1, [r3, #0]
  405162:	d1dd      	bne.n	405120 <_free_r+0x24>
  405164:	6810      	ldr	r0, [r2, #0]
  405166:	6852      	ldr	r2, [r2, #4]
  405168:	605a      	str	r2, [r3, #4]
  40516a:	4401      	add	r1, r0
  40516c:	6019      	str	r1, [r3, #0]
  40516e:	e7d7      	b.n	405120 <_free_r+0x24>
  405170:	d902      	bls.n	405178 <_free_r+0x7c>
  405172:	230c      	movs	r3, #12
  405174:	602b      	str	r3, [r5, #0]
  405176:	e7d3      	b.n	405120 <_free_r+0x24>
  405178:	6820      	ldr	r0, [r4, #0]
  40517a:	1821      	adds	r1, r4, r0
  40517c:	428a      	cmp	r2, r1
  40517e:	bf04      	itt	eq
  405180:	6811      	ldreq	r1, [r2, #0]
  405182:	6852      	ldreq	r2, [r2, #4]
  405184:	6062      	str	r2, [r4, #4]
  405186:	bf04      	itt	eq
  405188:	1809      	addeq	r1, r1, r0
  40518a:	6021      	streq	r1, [r4, #0]
  40518c:	605c      	str	r4, [r3, #4]
  40518e:	e7c7      	b.n	405120 <_free_r+0x24>
  405190:	bd38      	pop	{r3, r4, r5, pc}
  405192:	bf00      	nop
  405194:	204004c0 	.word	0x204004c0

00405198 <_malloc_r>:
  405198:	b570      	push	{r4, r5, r6, lr}
  40519a:	1ccd      	adds	r5, r1, #3
  40519c:	f025 0503 	bic.w	r5, r5, #3
  4051a0:	3508      	adds	r5, #8
  4051a2:	2d0c      	cmp	r5, #12
  4051a4:	bf38      	it	cc
  4051a6:	250c      	movcc	r5, #12
  4051a8:	2d00      	cmp	r5, #0
  4051aa:	4606      	mov	r6, r0
  4051ac:	db01      	blt.n	4051b2 <_malloc_r+0x1a>
  4051ae:	42a9      	cmp	r1, r5
  4051b0:	d903      	bls.n	4051ba <_malloc_r+0x22>
  4051b2:	230c      	movs	r3, #12
  4051b4:	6033      	str	r3, [r6, #0]
  4051b6:	2000      	movs	r0, #0
  4051b8:	bd70      	pop	{r4, r5, r6, pc}
  4051ba:	f000 fb05 	bl	4057c8 <__malloc_lock>
  4051be:	4a23      	ldr	r2, [pc, #140]	; (40524c <_malloc_r+0xb4>)
  4051c0:	6814      	ldr	r4, [r2, #0]
  4051c2:	4621      	mov	r1, r4
  4051c4:	b991      	cbnz	r1, 4051ec <_malloc_r+0x54>
  4051c6:	4c22      	ldr	r4, [pc, #136]	; (405250 <_malloc_r+0xb8>)
  4051c8:	6823      	ldr	r3, [r4, #0]
  4051ca:	b91b      	cbnz	r3, 4051d4 <_malloc_r+0x3c>
  4051cc:	4630      	mov	r0, r6
  4051ce:	f000 f97f 	bl	4054d0 <_sbrk_r>
  4051d2:	6020      	str	r0, [r4, #0]
  4051d4:	4629      	mov	r1, r5
  4051d6:	4630      	mov	r0, r6
  4051d8:	f000 f97a 	bl	4054d0 <_sbrk_r>
  4051dc:	1c43      	adds	r3, r0, #1
  4051de:	d126      	bne.n	40522e <_malloc_r+0x96>
  4051e0:	230c      	movs	r3, #12
  4051e2:	6033      	str	r3, [r6, #0]
  4051e4:	4630      	mov	r0, r6
  4051e6:	f000 faf0 	bl	4057ca <__malloc_unlock>
  4051ea:	e7e4      	b.n	4051b6 <_malloc_r+0x1e>
  4051ec:	680b      	ldr	r3, [r1, #0]
  4051ee:	1b5b      	subs	r3, r3, r5
  4051f0:	d41a      	bmi.n	405228 <_malloc_r+0x90>
  4051f2:	2b0b      	cmp	r3, #11
  4051f4:	d90f      	bls.n	405216 <_malloc_r+0x7e>
  4051f6:	600b      	str	r3, [r1, #0]
  4051f8:	50cd      	str	r5, [r1, r3]
  4051fa:	18cc      	adds	r4, r1, r3
  4051fc:	4630      	mov	r0, r6
  4051fe:	f000 fae4 	bl	4057ca <__malloc_unlock>
  405202:	f104 000b 	add.w	r0, r4, #11
  405206:	1d23      	adds	r3, r4, #4
  405208:	f020 0007 	bic.w	r0, r0, #7
  40520c:	1ac3      	subs	r3, r0, r3
  40520e:	d01b      	beq.n	405248 <_malloc_r+0xb0>
  405210:	425a      	negs	r2, r3
  405212:	50e2      	str	r2, [r4, r3]
  405214:	bd70      	pop	{r4, r5, r6, pc}
  405216:	428c      	cmp	r4, r1
  405218:	bf0d      	iteet	eq
  40521a:	6863      	ldreq	r3, [r4, #4]
  40521c:	684b      	ldrne	r3, [r1, #4]
  40521e:	6063      	strne	r3, [r4, #4]
  405220:	6013      	streq	r3, [r2, #0]
  405222:	bf18      	it	ne
  405224:	460c      	movne	r4, r1
  405226:	e7e9      	b.n	4051fc <_malloc_r+0x64>
  405228:	460c      	mov	r4, r1
  40522a:	6849      	ldr	r1, [r1, #4]
  40522c:	e7ca      	b.n	4051c4 <_malloc_r+0x2c>
  40522e:	1cc4      	adds	r4, r0, #3
  405230:	f024 0403 	bic.w	r4, r4, #3
  405234:	42a0      	cmp	r0, r4
  405236:	d005      	beq.n	405244 <_malloc_r+0xac>
  405238:	1a21      	subs	r1, r4, r0
  40523a:	4630      	mov	r0, r6
  40523c:	f000 f948 	bl	4054d0 <_sbrk_r>
  405240:	3001      	adds	r0, #1
  405242:	d0cd      	beq.n	4051e0 <_malloc_r+0x48>
  405244:	6025      	str	r5, [r4, #0]
  405246:	e7d9      	b.n	4051fc <_malloc_r+0x64>
  405248:	bd70      	pop	{r4, r5, r6, pc}
  40524a:	bf00      	nop
  40524c:	204004c0 	.word	0x204004c0
  405250:	204004c4 	.word	0x204004c4

00405254 <__sfputc_r>:
  405254:	6893      	ldr	r3, [r2, #8]
  405256:	3b01      	subs	r3, #1
  405258:	2b00      	cmp	r3, #0
  40525a:	b410      	push	{r4}
  40525c:	6093      	str	r3, [r2, #8]
  40525e:	da08      	bge.n	405272 <__sfputc_r+0x1e>
  405260:	6994      	ldr	r4, [r2, #24]
  405262:	42a3      	cmp	r3, r4
  405264:	db02      	blt.n	40526c <__sfputc_r+0x18>
  405266:	b2cb      	uxtb	r3, r1
  405268:	2b0a      	cmp	r3, #10
  40526a:	d102      	bne.n	405272 <__sfputc_r+0x1e>
  40526c:	bc10      	pop	{r4}
  40526e:	f000 b983 	b.w	405578 <__swbuf_r>
  405272:	6813      	ldr	r3, [r2, #0]
  405274:	1c58      	adds	r0, r3, #1
  405276:	6010      	str	r0, [r2, #0]
  405278:	7019      	strb	r1, [r3, #0]
  40527a:	b2c8      	uxtb	r0, r1
  40527c:	bc10      	pop	{r4}
  40527e:	4770      	bx	lr

00405280 <__sfputs_r>:
  405280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405282:	4606      	mov	r6, r0
  405284:	460f      	mov	r7, r1
  405286:	4614      	mov	r4, r2
  405288:	18d5      	adds	r5, r2, r3
  40528a:	42ac      	cmp	r4, r5
  40528c:	d101      	bne.n	405292 <__sfputs_r+0x12>
  40528e:	2000      	movs	r0, #0
  405290:	e007      	b.n	4052a2 <__sfputs_r+0x22>
  405292:	463a      	mov	r2, r7
  405294:	f814 1b01 	ldrb.w	r1, [r4], #1
  405298:	4630      	mov	r0, r6
  40529a:	f7ff ffdb 	bl	405254 <__sfputc_r>
  40529e:	1c43      	adds	r3, r0, #1
  4052a0:	d1f3      	bne.n	40528a <__sfputs_r+0xa>
  4052a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004052a4 <_vfiprintf_r>:
  4052a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4052a8:	b09d      	sub	sp, #116	; 0x74
  4052aa:	460c      	mov	r4, r1
  4052ac:	4617      	mov	r7, r2
  4052ae:	9303      	str	r3, [sp, #12]
  4052b0:	4606      	mov	r6, r0
  4052b2:	b118      	cbz	r0, 4052bc <_vfiprintf_r+0x18>
  4052b4:	6983      	ldr	r3, [r0, #24]
  4052b6:	b90b      	cbnz	r3, 4052bc <_vfiprintf_r+0x18>
  4052b8:	f7ff faea 	bl	404890 <__sinit>
  4052bc:	4b7c      	ldr	r3, [pc, #496]	; (4054b0 <_vfiprintf_r+0x20c>)
  4052be:	429c      	cmp	r4, r3
  4052c0:	d157      	bne.n	405372 <_vfiprintf_r+0xce>
  4052c2:	6874      	ldr	r4, [r6, #4]
  4052c4:	89a3      	ldrh	r3, [r4, #12]
  4052c6:	0718      	lsls	r0, r3, #28
  4052c8:	d55d      	bpl.n	405386 <_vfiprintf_r+0xe2>
  4052ca:	6923      	ldr	r3, [r4, #16]
  4052cc:	2b00      	cmp	r3, #0
  4052ce:	d05a      	beq.n	405386 <_vfiprintf_r+0xe2>
  4052d0:	2300      	movs	r3, #0
  4052d2:	9309      	str	r3, [sp, #36]	; 0x24
  4052d4:	2320      	movs	r3, #32
  4052d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  4052da:	2330      	movs	r3, #48	; 0x30
  4052dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4052e0:	f04f 0b01 	mov.w	fp, #1
  4052e4:	46b8      	mov	r8, r7
  4052e6:	4645      	mov	r5, r8
  4052e8:	f815 3b01 	ldrb.w	r3, [r5], #1
  4052ec:	2b00      	cmp	r3, #0
  4052ee:	d155      	bne.n	40539c <_vfiprintf_r+0xf8>
  4052f0:	ebb8 0a07 	subs.w	sl, r8, r7
  4052f4:	d00b      	beq.n	40530e <_vfiprintf_r+0x6a>
  4052f6:	4653      	mov	r3, sl
  4052f8:	463a      	mov	r2, r7
  4052fa:	4621      	mov	r1, r4
  4052fc:	4630      	mov	r0, r6
  4052fe:	f7ff ffbf 	bl	405280 <__sfputs_r>
  405302:	3001      	adds	r0, #1
  405304:	f000 80c4 	beq.w	405490 <_vfiprintf_r+0x1ec>
  405308:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40530a:	4453      	add	r3, sl
  40530c:	9309      	str	r3, [sp, #36]	; 0x24
  40530e:	f898 3000 	ldrb.w	r3, [r8]
  405312:	2b00      	cmp	r3, #0
  405314:	f000 80bc 	beq.w	405490 <_vfiprintf_r+0x1ec>
  405318:	2300      	movs	r3, #0
  40531a:	f04f 32ff 	mov.w	r2, #4294967295
  40531e:	9304      	str	r3, [sp, #16]
  405320:	9307      	str	r3, [sp, #28]
  405322:	9205      	str	r2, [sp, #20]
  405324:	9306      	str	r3, [sp, #24]
  405326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40532a:	931a      	str	r3, [sp, #104]	; 0x68
  40532c:	2205      	movs	r2, #5
  40532e:	7829      	ldrb	r1, [r5, #0]
  405330:	4860      	ldr	r0, [pc, #384]	; (4054b4 <_vfiprintf_r+0x210>)
  405332:	f7ff fbb5 	bl	404aa0 <memchr>
  405336:	f105 0801 	add.w	r8, r5, #1
  40533a:	9b04      	ldr	r3, [sp, #16]
  40533c:	2800      	cmp	r0, #0
  40533e:	d131      	bne.n	4053a4 <_vfiprintf_r+0x100>
  405340:	06d9      	lsls	r1, r3, #27
  405342:	bf44      	itt	mi
  405344:	2220      	movmi	r2, #32
  405346:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40534a:	071a      	lsls	r2, r3, #28
  40534c:	bf44      	itt	mi
  40534e:	222b      	movmi	r2, #43	; 0x2b
  405350:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  405354:	782a      	ldrb	r2, [r5, #0]
  405356:	2a2a      	cmp	r2, #42	; 0x2a
  405358:	d02c      	beq.n	4053b4 <_vfiprintf_r+0x110>
  40535a:	9a07      	ldr	r2, [sp, #28]
  40535c:	2100      	movs	r1, #0
  40535e:	200a      	movs	r0, #10
  405360:	46a8      	mov	r8, r5
  405362:	3501      	adds	r5, #1
  405364:	f898 3000 	ldrb.w	r3, [r8]
  405368:	3b30      	subs	r3, #48	; 0x30
  40536a:	2b09      	cmp	r3, #9
  40536c:	d96d      	bls.n	40544a <_vfiprintf_r+0x1a6>
  40536e:	b371      	cbz	r1, 4053ce <_vfiprintf_r+0x12a>
  405370:	e026      	b.n	4053c0 <_vfiprintf_r+0x11c>
  405372:	4b51      	ldr	r3, [pc, #324]	; (4054b8 <_vfiprintf_r+0x214>)
  405374:	429c      	cmp	r4, r3
  405376:	d101      	bne.n	40537c <_vfiprintf_r+0xd8>
  405378:	68b4      	ldr	r4, [r6, #8]
  40537a:	e7a3      	b.n	4052c4 <_vfiprintf_r+0x20>
  40537c:	4b4f      	ldr	r3, [pc, #316]	; (4054bc <_vfiprintf_r+0x218>)
  40537e:	429c      	cmp	r4, r3
  405380:	bf08      	it	eq
  405382:	68f4      	ldreq	r4, [r6, #12]
  405384:	e79e      	b.n	4052c4 <_vfiprintf_r+0x20>
  405386:	4621      	mov	r1, r4
  405388:	4630      	mov	r0, r6
  40538a:	f000 f959 	bl	405640 <__swsetup_r>
  40538e:	2800      	cmp	r0, #0
  405390:	d09e      	beq.n	4052d0 <_vfiprintf_r+0x2c>
  405392:	f04f 30ff 	mov.w	r0, #4294967295
  405396:	b01d      	add	sp, #116	; 0x74
  405398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40539c:	2b25      	cmp	r3, #37	; 0x25
  40539e:	d0a7      	beq.n	4052f0 <_vfiprintf_r+0x4c>
  4053a0:	46a8      	mov	r8, r5
  4053a2:	e7a0      	b.n	4052e6 <_vfiprintf_r+0x42>
  4053a4:	4a43      	ldr	r2, [pc, #268]	; (4054b4 <_vfiprintf_r+0x210>)
  4053a6:	1a80      	subs	r0, r0, r2
  4053a8:	fa0b f000 	lsl.w	r0, fp, r0
  4053ac:	4318      	orrs	r0, r3
  4053ae:	9004      	str	r0, [sp, #16]
  4053b0:	4645      	mov	r5, r8
  4053b2:	e7bb      	b.n	40532c <_vfiprintf_r+0x88>
  4053b4:	9a03      	ldr	r2, [sp, #12]
  4053b6:	1d11      	adds	r1, r2, #4
  4053b8:	6812      	ldr	r2, [r2, #0]
  4053ba:	9103      	str	r1, [sp, #12]
  4053bc:	2a00      	cmp	r2, #0
  4053be:	db01      	blt.n	4053c4 <_vfiprintf_r+0x120>
  4053c0:	9207      	str	r2, [sp, #28]
  4053c2:	e004      	b.n	4053ce <_vfiprintf_r+0x12a>
  4053c4:	4252      	negs	r2, r2
  4053c6:	f043 0302 	orr.w	r3, r3, #2
  4053ca:	9207      	str	r2, [sp, #28]
  4053cc:	9304      	str	r3, [sp, #16]
  4053ce:	f898 3000 	ldrb.w	r3, [r8]
  4053d2:	2b2e      	cmp	r3, #46	; 0x2e
  4053d4:	d110      	bne.n	4053f8 <_vfiprintf_r+0x154>
  4053d6:	f898 3001 	ldrb.w	r3, [r8, #1]
  4053da:	2b2a      	cmp	r3, #42	; 0x2a
  4053dc:	f108 0101 	add.w	r1, r8, #1
  4053e0:	d137      	bne.n	405452 <_vfiprintf_r+0x1ae>
  4053e2:	9b03      	ldr	r3, [sp, #12]
  4053e4:	1d1a      	adds	r2, r3, #4
  4053e6:	681b      	ldr	r3, [r3, #0]
  4053e8:	9203      	str	r2, [sp, #12]
  4053ea:	2b00      	cmp	r3, #0
  4053ec:	bfb8      	it	lt
  4053ee:	f04f 33ff 	movlt.w	r3, #4294967295
  4053f2:	f108 0802 	add.w	r8, r8, #2
  4053f6:	9305      	str	r3, [sp, #20]
  4053f8:	4d31      	ldr	r5, [pc, #196]	; (4054c0 <_vfiprintf_r+0x21c>)
  4053fa:	f898 1000 	ldrb.w	r1, [r8]
  4053fe:	2203      	movs	r2, #3
  405400:	4628      	mov	r0, r5
  405402:	f7ff fb4d 	bl	404aa0 <memchr>
  405406:	b140      	cbz	r0, 40541a <_vfiprintf_r+0x176>
  405408:	2340      	movs	r3, #64	; 0x40
  40540a:	1b40      	subs	r0, r0, r5
  40540c:	fa03 f000 	lsl.w	r0, r3, r0
  405410:	9b04      	ldr	r3, [sp, #16]
  405412:	4303      	orrs	r3, r0
  405414:	9304      	str	r3, [sp, #16]
  405416:	f108 0801 	add.w	r8, r8, #1
  40541a:	f898 1000 	ldrb.w	r1, [r8]
  40541e:	4829      	ldr	r0, [pc, #164]	; (4054c4 <_vfiprintf_r+0x220>)
  405420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  405424:	2206      	movs	r2, #6
  405426:	f108 0701 	add.w	r7, r8, #1
  40542a:	f7ff fb39 	bl	404aa0 <memchr>
  40542e:	2800      	cmp	r0, #0
  405430:	d034      	beq.n	40549c <_vfiprintf_r+0x1f8>
  405432:	4b25      	ldr	r3, [pc, #148]	; (4054c8 <_vfiprintf_r+0x224>)
  405434:	bb03      	cbnz	r3, 405478 <_vfiprintf_r+0x1d4>
  405436:	9b03      	ldr	r3, [sp, #12]
  405438:	3307      	adds	r3, #7
  40543a:	f023 0307 	bic.w	r3, r3, #7
  40543e:	3308      	adds	r3, #8
  405440:	9303      	str	r3, [sp, #12]
  405442:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405444:	444b      	add	r3, r9
  405446:	9309      	str	r3, [sp, #36]	; 0x24
  405448:	e74c      	b.n	4052e4 <_vfiprintf_r+0x40>
  40544a:	fb00 3202 	mla	r2, r0, r2, r3
  40544e:	2101      	movs	r1, #1
  405450:	e786      	b.n	405360 <_vfiprintf_r+0xbc>
  405452:	2300      	movs	r3, #0
  405454:	9305      	str	r3, [sp, #20]
  405456:	4618      	mov	r0, r3
  405458:	250a      	movs	r5, #10
  40545a:	4688      	mov	r8, r1
  40545c:	3101      	adds	r1, #1
  40545e:	f898 2000 	ldrb.w	r2, [r8]
  405462:	3a30      	subs	r2, #48	; 0x30
  405464:	2a09      	cmp	r2, #9
  405466:	d903      	bls.n	405470 <_vfiprintf_r+0x1cc>
  405468:	2b00      	cmp	r3, #0
  40546a:	d0c5      	beq.n	4053f8 <_vfiprintf_r+0x154>
  40546c:	9005      	str	r0, [sp, #20]
  40546e:	e7c3      	b.n	4053f8 <_vfiprintf_r+0x154>
  405470:	fb05 2000 	mla	r0, r5, r0, r2
  405474:	2301      	movs	r3, #1
  405476:	e7f0      	b.n	40545a <_vfiprintf_r+0x1b6>
  405478:	ab03      	add	r3, sp, #12
  40547a:	9300      	str	r3, [sp, #0]
  40547c:	4622      	mov	r2, r4
  40547e:	4b13      	ldr	r3, [pc, #76]	; (4054cc <_vfiprintf_r+0x228>)
  405480:	a904      	add	r1, sp, #16
  405482:	4630      	mov	r0, r6
  405484:	f7fd fe10 	bl	4030a8 <_printf_float>
  405488:	f1b0 3fff 	cmp.w	r0, #4294967295
  40548c:	4681      	mov	r9, r0
  40548e:	d1d8      	bne.n	405442 <_vfiprintf_r+0x19e>
  405490:	89a3      	ldrh	r3, [r4, #12]
  405492:	065b      	lsls	r3, r3, #25
  405494:	f53f af7d 	bmi.w	405392 <_vfiprintf_r+0xee>
  405498:	9809      	ldr	r0, [sp, #36]	; 0x24
  40549a:	e77c      	b.n	405396 <_vfiprintf_r+0xf2>
  40549c:	ab03      	add	r3, sp, #12
  40549e:	9300      	str	r3, [sp, #0]
  4054a0:	4622      	mov	r2, r4
  4054a2:	4b0a      	ldr	r3, [pc, #40]	; (4054cc <_vfiprintf_r+0x228>)
  4054a4:	a904      	add	r1, sp, #16
  4054a6:	4630      	mov	r0, r6
  4054a8:	f7fe f8ac 	bl	403604 <_printf_i>
  4054ac:	e7ec      	b.n	405488 <_vfiprintf_r+0x1e4>
  4054ae:	bf00      	nop
  4054b0:	00405d10 	.word	0x00405d10
  4054b4:	00405e4c 	.word	0x00405e4c
  4054b8:	00405d30 	.word	0x00405d30
  4054bc:	00405cf0 	.word	0x00405cf0
  4054c0:	00405e52 	.word	0x00405e52
  4054c4:	00405e56 	.word	0x00405e56
  4054c8:	004030a9 	.word	0x004030a9
  4054cc:	00405281 	.word	0x00405281

004054d0 <_sbrk_r>:
  4054d0:	b538      	push	{r3, r4, r5, lr}
  4054d2:	4c06      	ldr	r4, [pc, #24]	; (4054ec <_sbrk_r+0x1c>)
  4054d4:	2300      	movs	r3, #0
  4054d6:	4605      	mov	r5, r0
  4054d8:	4608      	mov	r0, r1
  4054da:	6023      	str	r3, [r4, #0]
  4054dc:	f7fb ffde 	bl	40149c <_sbrk>
  4054e0:	1c43      	adds	r3, r0, #1
  4054e2:	d102      	bne.n	4054ea <_sbrk_r+0x1a>
  4054e4:	6823      	ldr	r3, [r4, #0]
  4054e6:	b103      	cbz	r3, 4054ea <_sbrk_r+0x1a>
  4054e8:	602b      	str	r3, [r5, #0]
  4054ea:	bd38      	pop	{r3, r4, r5, pc}
  4054ec:	204006cc 	.word	0x204006cc

004054f0 <__sread>:
  4054f0:	b510      	push	{r4, lr}
  4054f2:	460c      	mov	r4, r1
  4054f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4054f8:	f000 f968 	bl	4057cc <_read_r>
  4054fc:	2800      	cmp	r0, #0
  4054fe:	bfab      	itete	ge
  405500:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  405502:	89a3      	ldrhlt	r3, [r4, #12]
  405504:	181b      	addge	r3, r3, r0
  405506:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  40550a:	bfac      	ite	ge
  40550c:	6563      	strge	r3, [r4, #84]	; 0x54
  40550e:	81a3      	strhlt	r3, [r4, #12]
  405510:	bd10      	pop	{r4, pc}

00405512 <__swrite>:
  405512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405516:	461f      	mov	r7, r3
  405518:	898b      	ldrh	r3, [r1, #12]
  40551a:	05db      	lsls	r3, r3, #23
  40551c:	4605      	mov	r5, r0
  40551e:	460c      	mov	r4, r1
  405520:	4616      	mov	r6, r2
  405522:	d505      	bpl.n	405530 <__swrite+0x1e>
  405524:	2302      	movs	r3, #2
  405526:	2200      	movs	r2, #0
  405528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40552c:	f000 f928 	bl	405780 <_lseek_r>
  405530:	89a3      	ldrh	r3, [r4, #12]
  405532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40553a:	81a3      	strh	r3, [r4, #12]
  40553c:	4632      	mov	r2, r6
  40553e:	463b      	mov	r3, r7
  405540:	4628      	mov	r0, r5
  405542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405546:	f000 b869 	b.w	40561c <_write_r>

0040554a <__sseek>:
  40554a:	b510      	push	{r4, lr}
  40554c:	460c      	mov	r4, r1
  40554e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405552:	f000 f915 	bl	405780 <_lseek_r>
  405556:	1c43      	adds	r3, r0, #1
  405558:	89a3      	ldrh	r3, [r4, #12]
  40555a:	bf15      	itete	ne
  40555c:	6560      	strne	r0, [r4, #84]	; 0x54
  40555e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405562:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405566:	81a3      	strheq	r3, [r4, #12]
  405568:	bf18      	it	ne
  40556a:	81a3      	strhne	r3, [r4, #12]
  40556c:	bd10      	pop	{r4, pc}

0040556e <__sclose>:
  40556e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405572:	f000 b8d3 	b.w	40571c <_close_r>
	...

00405578 <__swbuf_r>:
  405578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40557a:	460e      	mov	r6, r1
  40557c:	4614      	mov	r4, r2
  40557e:	4605      	mov	r5, r0
  405580:	b118      	cbz	r0, 40558a <__swbuf_r+0x12>
  405582:	6983      	ldr	r3, [r0, #24]
  405584:	b90b      	cbnz	r3, 40558a <__swbuf_r+0x12>
  405586:	f7ff f983 	bl	404890 <__sinit>
  40558a:	4b21      	ldr	r3, [pc, #132]	; (405610 <__swbuf_r+0x98>)
  40558c:	429c      	cmp	r4, r3
  40558e:	d12a      	bne.n	4055e6 <__swbuf_r+0x6e>
  405590:	686c      	ldr	r4, [r5, #4]
  405592:	69a3      	ldr	r3, [r4, #24]
  405594:	60a3      	str	r3, [r4, #8]
  405596:	89a3      	ldrh	r3, [r4, #12]
  405598:	071a      	lsls	r2, r3, #28
  40559a:	d52e      	bpl.n	4055fa <__swbuf_r+0x82>
  40559c:	6923      	ldr	r3, [r4, #16]
  40559e:	b363      	cbz	r3, 4055fa <__swbuf_r+0x82>
  4055a0:	6923      	ldr	r3, [r4, #16]
  4055a2:	6820      	ldr	r0, [r4, #0]
  4055a4:	1ac0      	subs	r0, r0, r3
  4055a6:	6963      	ldr	r3, [r4, #20]
  4055a8:	b2f6      	uxtb	r6, r6
  4055aa:	4298      	cmp	r0, r3
  4055ac:	4637      	mov	r7, r6
  4055ae:	db04      	blt.n	4055ba <__swbuf_r+0x42>
  4055b0:	4621      	mov	r1, r4
  4055b2:	4628      	mov	r0, r5
  4055b4:	f7ff f902 	bl	4047bc <_fflush_r>
  4055b8:	bb28      	cbnz	r0, 405606 <__swbuf_r+0x8e>
  4055ba:	68a3      	ldr	r3, [r4, #8]
  4055bc:	3b01      	subs	r3, #1
  4055be:	60a3      	str	r3, [r4, #8]
  4055c0:	6823      	ldr	r3, [r4, #0]
  4055c2:	1c5a      	adds	r2, r3, #1
  4055c4:	6022      	str	r2, [r4, #0]
  4055c6:	701e      	strb	r6, [r3, #0]
  4055c8:	6963      	ldr	r3, [r4, #20]
  4055ca:	3001      	adds	r0, #1
  4055cc:	4298      	cmp	r0, r3
  4055ce:	d004      	beq.n	4055da <__swbuf_r+0x62>
  4055d0:	89a3      	ldrh	r3, [r4, #12]
  4055d2:	07db      	lsls	r3, r3, #31
  4055d4:	d519      	bpl.n	40560a <__swbuf_r+0x92>
  4055d6:	2e0a      	cmp	r6, #10
  4055d8:	d117      	bne.n	40560a <__swbuf_r+0x92>
  4055da:	4621      	mov	r1, r4
  4055dc:	4628      	mov	r0, r5
  4055de:	f7ff f8ed 	bl	4047bc <_fflush_r>
  4055e2:	b190      	cbz	r0, 40560a <__swbuf_r+0x92>
  4055e4:	e00f      	b.n	405606 <__swbuf_r+0x8e>
  4055e6:	4b0b      	ldr	r3, [pc, #44]	; (405614 <__swbuf_r+0x9c>)
  4055e8:	429c      	cmp	r4, r3
  4055ea:	d101      	bne.n	4055f0 <__swbuf_r+0x78>
  4055ec:	68ac      	ldr	r4, [r5, #8]
  4055ee:	e7d0      	b.n	405592 <__swbuf_r+0x1a>
  4055f0:	4b09      	ldr	r3, [pc, #36]	; (405618 <__swbuf_r+0xa0>)
  4055f2:	429c      	cmp	r4, r3
  4055f4:	bf08      	it	eq
  4055f6:	68ec      	ldreq	r4, [r5, #12]
  4055f8:	e7cb      	b.n	405592 <__swbuf_r+0x1a>
  4055fa:	4621      	mov	r1, r4
  4055fc:	4628      	mov	r0, r5
  4055fe:	f000 f81f 	bl	405640 <__swsetup_r>
  405602:	2800      	cmp	r0, #0
  405604:	d0cc      	beq.n	4055a0 <__swbuf_r+0x28>
  405606:	f04f 37ff 	mov.w	r7, #4294967295
  40560a:	4638      	mov	r0, r7
  40560c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40560e:	bf00      	nop
  405610:	00405d10 	.word	0x00405d10
  405614:	00405d30 	.word	0x00405d30
  405618:	00405cf0 	.word	0x00405cf0

0040561c <_write_r>:
  40561c:	b538      	push	{r3, r4, r5, lr}
  40561e:	4c07      	ldr	r4, [pc, #28]	; (40563c <_write_r+0x20>)
  405620:	4605      	mov	r5, r0
  405622:	4608      	mov	r0, r1
  405624:	4611      	mov	r1, r2
  405626:	2200      	movs	r2, #0
  405628:	6022      	str	r2, [r4, #0]
  40562a:	461a      	mov	r2, r3
  40562c:	f7fc ff9c 	bl	402568 <_write>
  405630:	1c43      	adds	r3, r0, #1
  405632:	d102      	bne.n	40563a <_write_r+0x1e>
  405634:	6823      	ldr	r3, [r4, #0]
  405636:	b103      	cbz	r3, 40563a <_write_r+0x1e>
  405638:	602b      	str	r3, [r5, #0]
  40563a:	bd38      	pop	{r3, r4, r5, pc}
  40563c:	204006cc 	.word	0x204006cc

00405640 <__swsetup_r>:
  405640:	4b32      	ldr	r3, [pc, #200]	; (40570c <__swsetup_r+0xcc>)
  405642:	b570      	push	{r4, r5, r6, lr}
  405644:	681d      	ldr	r5, [r3, #0]
  405646:	4606      	mov	r6, r0
  405648:	460c      	mov	r4, r1
  40564a:	b125      	cbz	r5, 405656 <__swsetup_r+0x16>
  40564c:	69ab      	ldr	r3, [r5, #24]
  40564e:	b913      	cbnz	r3, 405656 <__swsetup_r+0x16>
  405650:	4628      	mov	r0, r5
  405652:	f7ff f91d 	bl	404890 <__sinit>
  405656:	4b2e      	ldr	r3, [pc, #184]	; (405710 <__swsetup_r+0xd0>)
  405658:	429c      	cmp	r4, r3
  40565a:	d10f      	bne.n	40567c <__swsetup_r+0x3c>
  40565c:	686c      	ldr	r4, [r5, #4]
  40565e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405662:	b29a      	uxth	r2, r3
  405664:	0715      	lsls	r5, r2, #28
  405666:	d42c      	bmi.n	4056c2 <__swsetup_r+0x82>
  405668:	06d0      	lsls	r0, r2, #27
  40566a:	d411      	bmi.n	405690 <__swsetup_r+0x50>
  40566c:	2209      	movs	r2, #9
  40566e:	6032      	str	r2, [r6, #0]
  405670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405674:	81a3      	strh	r3, [r4, #12]
  405676:	f04f 30ff 	mov.w	r0, #4294967295
  40567a:	bd70      	pop	{r4, r5, r6, pc}
  40567c:	4b25      	ldr	r3, [pc, #148]	; (405714 <__swsetup_r+0xd4>)
  40567e:	429c      	cmp	r4, r3
  405680:	d101      	bne.n	405686 <__swsetup_r+0x46>
  405682:	68ac      	ldr	r4, [r5, #8]
  405684:	e7eb      	b.n	40565e <__swsetup_r+0x1e>
  405686:	4b24      	ldr	r3, [pc, #144]	; (405718 <__swsetup_r+0xd8>)
  405688:	429c      	cmp	r4, r3
  40568a:	bf08      	it	eq
  40568c:	68ec      	ldreq	r4, [r5, #12]
  40568e:	e7e6      	b.n	40565e <__swsetup_r+0x1e>
  405690:	0751      	lsls	r1, r2, #29
  405692:	d512      	bpl.n	4056ba <__swsetup_r+0x7a>
  405694:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405696:	b141      	cbz	r1, 4056aa <__swsetup_r+0x6a>
  405698:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40569c:	4299      	cmp	r1, r3
  40569e:	d002      	beq.n	4056a6 <__swsetup_r+0x66>
  4056a0:	4630      	mov	r0, r6
  4056a2:	f7ff fd2b 	bl	4050fc <_free_r>
  4056a6:	2300      	movs	r3, #0
  4056a8:	6363      	str	r3, [r4, #52]	; 0x34
  4056aa:	89a3      	ldrh	r3, [r4, #12]
  4056ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4056b0:	81a3      	strh	r3, [r4, #12]
  4056b2:	2300      	movs	r3, #0
  4056b4:	6063      	str	r3, [r4, #4]
  4056b6:	6923      	ldr	r3, [r4, #16]
  4056b8:	6023      	str	r3, [r4, #0]
  4056ba:	89a3      	ldrh	r3, [r4, #12]
  4056bc:	f043 0308 	orr.w	r3, r3, #8
  4056c0:	81a3      	strh	r3, [r4, #12]
  4056c2:	6923      	ldr	r3, [r4, #16]
  4056c4:	b94b      	cbnz	r3, 4056da <__swsetup_r+0x9a>
  4056c6:	89a3      	ldrh	r3, [r4, #12]
  4056c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
  4056cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4056d0:	d003      	beq.n	4056da <__swsetup_r+0x9a>
  4056d2:	4621      	mov	r1, r4
  4056d4:	4630      	mov	r0, r6
  4056d6:	f7ff f997 	bl	404a08 <__smakebuf_r>
  4056da:	89a2      	ldrh	r2, [r4, #12]
  4056dc:	f012 0301 	ands.w	r3, r2, #1
  4056e0:	d00c      	beq.n	4056fc <__swsetup_r+0xbc>
  4056e2:	2300      	movs	r3, #0
  4056e4:	60a3      	str	r3, [r4, #8]
  4056e6:	6963      	ldr	r3, [r4, #20]
  4056e8:	425b      	negs	r3, r3
  4056ea:	61a3      	str	r3, [r4, #24]
  4056ec:	6923      	ldr	r3, [r4, #16]
  4056ee:	b953      	cbnz	r3, 405706 <__swsetup_r+0xc6>
  4056f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4056f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  4056f8:	d1ba      	bne.n	405670 <__swsetup_r+0x30>
  4056fa:	bd70      	pop	{r4, r5, r6, pc}
  4056fc:	0792      	lsls	r2, r2, #30
  4056fe:	bf58      	it	pl
  405700:	6963      	ldrpl	r3, [r4, #20]
  405702:	60a3      	str	r3, [r4, #8]
  405704:	e7f2      	b.n	4056ec <__swsetup_r+0xac>
  405706:	2000      	movs	r0, #0
  405708:	e7f7      	b.n	4056fa <__swsetup_r+0xba>
  40570a:	bf00      	nop
  40570c:	20400048 	.word	0x20400048
  405710:	00405d10 	.word	0x00405d10
  405714:	00405d30 	.word	0x00405d30
  405718:	00405cf0 	.word	0x00405cf0

0040571c <_close_r>:
  40571c:	b538      	push	{r3, r4, r5, lr}
  40571e:	4c06      	ldr	r4, [pc, #24]	; (405738 <_close_r+0x1c>)
  405720:	2300      	movs	r3, #0
  405722:	4605      	mov	r5, r0
  405724:	4608      	mov	r0, r1
  405726:	6023      	str	r3, [r4, #0]
  405728:	f7fb feca 	bl	4014c0 <_close>
  40572c:	1c43      	adds	r3, r0, #1
  40572e:	d102      	bne.n	405736 <_close_r+0x1a>
  405730:	6823      	ldr	r3, [r4, #0]
  405732:	b103      	cbz	r3, 405736 <_close_r+0x1a>
  405734:	602b      	str	r3, [r5, #0]
  405736:	bd38      	pop	{r3, r4, r5, pc}
  405738:	204006cc 	.word	0x204006cc

0040573c <_fstat_r>:
  40573c:	b538      	push	{r3, r4, r5, lr}
  40573e:	4c07      	ldr	r4, [pc, #28]	; (40575c <_fstat_r+0x20>)
  405740:	2300      	movs	r3, #0
  405742:	4605      	mov	r5, r0
  405744:	4608      	mov	r0, r1
  405746:	4611      	mov	r1, r2
  405748:	6023      	str	r3, [r4, #0]
  40574a:	f7fb febc 	bl	4014c6 <_fstat>
  40574e:	1c43      	adds	r3, r0, #1
  405750:	d102      	bne.n	405758 <_fstat_r+0x1c>
  405752:	6823      	ldr	r3, [r4, #0]
  405754:	b103      	cbz	r3, 405758 <_fstat_r+0x1c>
  405756:	602b      	str	r3, [r5, #0]
  405758:	bd38      	pop	{r3, r4, r5, pc}
  40575a:	bf00      	nop
  40575c:	204006cc 	.word	0x204006cc

00405760 <_isatty_r>:
  405760:	b538      	push	{r3, r4, r5, lr}
  405762:	4c06      	ldr	r4, [pc, #24]	; (40577c <_isatty_r+0x1c>)
  405764:	2300      	movs	r3, #0
  405766:	4605      	mov	r5, r0
  405768:	4608      	mov	r0, r1
  40576a:	6023      	str	r3, [r4, #0]
  40576c:	f7fb feb0 	bl	4014d0 <_isatty>
  405770:	1c43      	adds	r3, r0, #1
  405772:	d102      	bne.n	40577a <_isatty_r+0x1a>
  405774:	6823      	ldr	r3, [r4, #0]
  405776:	b103      	cbz	r3, 40577a <_isatty_r+0x1a>
  405778:	602b      	str	r3, [r5, #0]
  40577a:	bd38      	pop	{r3, r4, r5, pc}
  40577c:	204006cc 	.word	0x204006cc

00405780 <_lseek_r>:
  405780:	b538      	push	{r3, r4, r5, lr}
  405782:	4c07      	ldr	r4, [pc, #28]	; (4057a0 <_lseek_r+0x20>)
  405784:	4605      	mov	r5, r0
  405786:	4608      	mov	r0, r1
  405788:	4611      	mov	r1, r2
  40578a:	2200      	movs	r2, #0
  40578c:	6022      	str	r2, [r4, #0]
  40578e:	461a      	mov	r2, r3
  405790:	f7fb fea0 	bl	4014d4 <_lseek>
  405794:	1c43      	adds	r3, r0, #1
  405796:	d102      	bne.n	40579e <_lseek_r+0x1e>
  405798:	6823      	ldr	r3, [r4, #0]
  40579a:	b103      	cbz	r3, 40579e <_lseek_r+0x1e>
  40579c:	602b      	str	r3, [r5, #0]
  40579e:	bd38      	pop	{r3, r4, r5, pc}
  4057a0:	204006cc 	.word	0x204006cc

004057a4 <__ascii_mbtowc>:
  4057a4:	b082      	sub	sp, #8
  4057a6:	b901      	cbnz	r1, 4057aa <__ascii_mbtowc+0x6>
  4057a8:	a901      	add	r1, sp, #4
  4057aa:	b142      	cbz	r2, 4057be <__ascii_mbtowc+0x1a>
  4057ac:	b14b      	cbz	r3, 4057c2 <__ascii_mbtowc+0x1e>
  4057ae:	7813      	ldrb	r3, [r2, #0]
  4057b0:	600b      	str	r3, [r1, #0]
  4057b2:	7812      	ldrb	r2, [r2, #0]
  4057b4:	1c10      	adds	r0, r2, #0
  4057b6:	bf18      	it	ne
  4057b8:	2001      	movne	r0, #1
  4057ba:	b002      	add	sp, #8
  4057bc:	4770      	bx	lr
  4057be:	4610      	mov	r0, r2
  4057c0:	e7fb      	b.n	4057ba <__ascii_mbtowc+0x16>
  4057c2:	f06f 0001 	mvn.w	r0, #1
  4057c6:	e7f8      	b.n	4057ba <__ascii_mbtowc+0x16>

004057c8 <__malloc_lock>:
  4057c8:	4770      	bx	lr

004057ca <__malloc_unlock>:
  4057ca:	4770      	bx	lr

004057cc <_read_r>:
  4057cc:	b538      	push	{r3, r4, r5, lr}
  4057ce:	4c07      	ldr	r4, [pc, #28]	; (4057ec <_read_r+0x20>)
  4057d0:	4605      	mov	r5, r0
  4057d2:	4608      	mov	r0, r1
  4057d4:	4611      	mov	r1, r2
  4057d6:	2200      	movs	r2, #0
  4057d8:	6022      	str	r2, [r4, #0]
  4057da:	461a      	mov	r2, r3
  4057dc:	f7fc feb2 	bl	402544 <_read>
  4057e0:	1c43      	adds	r3, r0, #1
  4057e2:	d102      	bne.n	4057ea <_read_r+0x1e>
  4057e4:	6823      	ldr	r3, [r4, #0]
  4057e6:	b103      	cbz	r3, 4057ea <_read_r+0x1e>
  4057e8:	602b      	str	r3, [r5, #0]
  4057ea:	bd38      	pop	{r3, r4, r5, pc}
  4057ec:	204006cc 	.word	0x204006cc

004057f0 <__ascii_wctomb>:
  4057f0:	b149      	cbz	r1, 405806 <__ascii_wctomb+0x16>
  4057f2:	2aff      	cmp	r2, #255	; 0xff
  4057f4:	bf85      	ittet	hi
  4057f6:	238a      	movhi	r3, #138	; 0x8a
  4057f8:	6003      	strhi	r3, [r0, #0]
  4057fa:	700a      	strbls	r2, [r1, #0]
  4057fc:	f04f 30ff 	movhi.w	r0, #4294967295
  405800:	bf98      	it	ls
  405802:	2001      	movls	r0, #1
  405804:	4770      	bx	lr
  405806:	4608      	mov	r0, r1
  405808:	4770      	bx	lr
	...

0040580c <__aeabi_dcmpun>:
  40580c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405810:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405814:	d102      	bne.n	40581c <__aeabi_dcmpun+0x10>
  405816:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40581a:	d10a      	bne.n	405832 <__aeabi_dcmpun+0x26>
  40581c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405824:	d102      	bne.n	40582c <__aeabi_dcmpun+0x20>
  405826:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40582a:	d102      	bne.n	405832 <__aeabi_dcmpun+0x26>
  40582c:	f04f 0000 	mov.w	r0, #0
  405830:	4770      	bx	lr
  405832:	f04f 0001 	mov.w	r0, #1
  405836:	4770      	bx	lr
  405838:	65746e69 	.word	0x65746e69
  40583c:	70757272 	.word	0x70757272
  405840:	202d2074 	.word	0x202d2074
  405844:	20434441 	.word	0x20434441
  405848:	202d2031 	.word	0x202d2031
  40584c:	25206925 	.word	0x25206925
  405850:	69252069 	.word	0x69252069
  405854:	20692520 	.word	0x20692520
  405858:	00000a20 	.word	0x00000a20
  40585c:	61746144 	.word	0x61746144
  405860:	6c6f6320 	.word	0x6c6f6320
  405864:	7463656c 	.word	0x7463656c
  405868:	202c6465 	.word	0x202c6465
  40586c:	6e75616c 	.word	0x6e75616c
  405870:	6e696863 	.word	0x6e696863
  405874:	6f632067 	.word	0x6f632067
  405878:	6f72746e 	.word	0x6f72746e
  40587c:	6f6c206c 	.word	0x6f6c206c
  405880:	6620706f 	.word	0x6620706f
  405884:	206d6f72 	.word	0x206d6f72
  405888:	20636461 	.word	0x20636461
  40588c:	000a2031 	.word	0x000a2031
  405890:	65746e69 	.word	0x65746e69
  405894:	70757272 	.word	0x70757272
  405898:	202d2074 	.word	0x202d2074
  40589c:	20434441 	.word	0x20434441
  4058a0:	202d2030 	.word	0x202d2030
  4058a4:	25206925 	.word	0x25206925
  4058a8:	69252069 	.word	0x69252069
  4058ac:	20692520 	.word	0x20692520
  4058b0:	25206925 	.word	0x25206925
  4058b4:	0a202069 	.word	0x0a202069
  4058b8:	00000000 	.word	0x00000000
  4058bc:	61746144 	.word	0x61746144
  4058c0:	6c6f6320 	.word	0x6c6f6320
  4058c4:	7463656c 	.word	0x7463656c
  4058c8:	202c6465 	.word	0x202c6465
  4058cc:	6e75616c 	.word	0x6e75616c
  4058d0:	6e696863 	.word	0x6e696863
  4058d4:	6f632067 	.word	0x6f632067
  4058d8:	6f72746e 	.word	0x6f72746e
  4058dc:	6f6c206c 	.word	0x6f6c206c
  4058e0:	6620706f 	.word	0x6620706f
  4058e4:	206d6f72 	.word	0x206d6f72
  4058e8:	20636461 	.word	0x20636461
  4058ec:	00000a30 	.word	0x00000a30
  4058f0:	682f2e2e 	.word	0x682f2e2e
  4058f4:	732f6c61 	.word	0x732f6c61
  4058f8:	682f6372 	.word	0x682f6372
  4058fc:	615f6c61 	.word	0x615f6c61
  405900:	615f6364 	.word	0x615f6364
  405904:	636e7973 	.word	0x636e7973
  405908:	0000632e 	.word	0x0000632e
  40590c:	682f2e2e 	.word	0x682f2e2e
  405910:	732f6c61 	.word	0x732f6c61
  405914:	682f6372 	.word	0x682f6372
  405918:	695f6c61 	.word	0x695f6c61
  40591c:	00632e6f 	.word	0x00632e6f
  405920:	682f2e2e 	.word	0x682f2e2e
  405924:	732f6c61 	.word	0x732f6c61
  405928:	682f6372 	.word	0x682f6372
  40592c:	705f6c61 	.word	0x705f6c61
  405930:	632e6d77 	.word	0x632e6d77
  405934:	00000000 	.word	0x00000000
  405938:	682f2e2e 	.word	0x682f2e2e
  40593c:	732f6c61 	.word	0x732f6c61
  405940:	682f6372 	.word	0x682f6372
  405944:	745f6c61 	.word	0x745f6c61
  405948:	72656d69 	.word	0x72656d69
  40594c:	0000632e 	.word	0x0000632e
  405950:	682f2e2e 	.word	0x682f2e2e
  405954:	732f6c61 	.word	0x732f6c61
  405958:	682f6372 	.word	0x682f6372
  40595c:	755f6c61 	.word	0x755f6c61
  405960:	74726173 	.word	0x74726173
  405964:	6e79735f 	.word	0x6e79735f
  405968:	00632e63 	.word	0x00632e63
  40596c:	682f2e2e 	.word	0x682f2e2e
  405970:	752f6c61 	.word	0x752f6c61
  405974:	736c6974 	.word	0x736c6974
  405978:	6372732f 	.word	0x6372732f
  40597c:	6974752f 	.word	0x6974752f
  405980:	6c5f736c 	.word	0x6c5f736c
  405984:	2e747369 	.word	0x2e747369
  405988:	00000063 	.word	0x00000063
  40598c:	682f2e2e 	.word	0x682f2e2e
  405990:	752f6c61 	.word	0x752f6c61
  405994:	736c6974 	.word	0x736c6974
  405998:	6372732f 	.word	0x6372732f
  40599c:	6974752f 	.word	0x6974752f
  4059a0:	725f736c 	.word	0x725f736c
  4059a4:	62676e69 	.word	0x62676e69
  4059a8:	65666675 	.word	0x65666675
  4059ac:	00632e72 	.word	0x00632e72

004059b0 <_afecs>:
  4059b0:	00000000 2f843100 23000000 ffffffff     .....1./...#....
  4059c0:	0000ffff 00000000 00000000 00000000     ................
  4059d0:	0000010c 00000000 00000000 00000000     ................
  4059e0:	00000000 00000200 00000200 00000200     ................
  4059f0:	00000200 00000200 00000200 00000200     ................
  405a00:	00000200 00000200 00000200 00000200     ................
  405a10:	00000200 00000001 2f843100 23000000     .........1./...#
  405a20:	ffffffff 0000ffff 00000000 00000000     ................
  405a30:	00000000 0000010c 00000000 00000000     ................
	...
  405a48:	00000200 00000200 00000200 00000200     ................
  405a58:	00000200 00000200 00000200 00000200     ................
  405a68:	00000200 00000200 00000200 00000200     ................
  405a78:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  405a88:	63656661 0000632e                       afec.c..

00405a90 <_ext_irq>:
  405a90:	00000000 00000024 00000000 00000000     ....$...........
	...
  405aac:	00000003 00080000 00000000 00000000     ................
	...

00405ac8 <_pio_irq_n>:
  405ac8:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  405ad8:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  405ae8:	00000000                                ....

00405aec <_pwms>:
  405aec:	40020000 0000001f 00010019 00000001     ...@............
  405afc:	00000001 000000ff 00000000 00000004     ................
	...
  405b18:	00000002 00405b74 00000000 20400388     ....t[@.......@ 
  405b28:	4005c000 0000003c 00010019 00000001     ...@<...........
  405b38:	00000001 000000ff 00000000 00000004     ................
	...
  405b54:	00000001 00405b64 00000000 2040037c     ....d[@.....|.@ 

00405b64 <_ch_cfg1>:
  405b64:	00000000 0000010b 000003e8 00000200     ................

00405b74 <_ch_cfg0>:
  405b74:	00000000 0000010b 000003e8 00000200     ................
  405b84:	00000002 0000010b 000003e8 00000200     ................
  405b94:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  405ba4:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  405bb4:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00405bc0 <_usarts>:
  405bc0:	00000001 001008c0 000100f4 682f2e2e     ............../h
  405bd0:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  405be0:	632e7472 00000000                       rt.c....

00405be8 <_cfgs>:
  405be8:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  405bf8:	00000040 00000000 00000040 00000000     @.......@.......
  405c08:	00000040 00000000 00000040 00000000     @.......@.......
  405c18:	00000040 00000000 00000040 00000000     @.......@.......
  405c28:	00000040 00000000 00000040 00000000     @.......@.......
  405c38:	00000040 00000000 00000040 00000000     @.......@.......
  405c48:	00000040 00000000 00000040 00000000     @.......@.......
  405c58:	00000040 00000000 00000040 00000000     @.......@.......
  405c68:	00000040 00000000 00000040 00000000     @.......@.......
  405c78:	00000040 00000000 00000040 00000000     @.......@.......
  405c88:	00000040 00000000 00000040 00000000     @.......@.......
  405c98:	00000040 00000000 00000040 00000000     @.......@.......

00405ca8 <_global_impure_ptr>:
  405ca8:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  405cb8:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  405cc8:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  405cd8:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  405ce8:	4e614e00 00000000                       .NaN....

00405cf0 <__sf_fake_stderr>:
	...

00405d10 <__sf_fake_stdin>:
	...

00405d30 <__sf_fake_stdout>:
	...

00405d50 <__mprec_bigtens>:
  405d50:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  405d60:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  405d70:	7f73bf3c 75154fdd                       <.s..O.u

00405d78 <__mprec_tens>:
  405d78:	00000000 3ff00000 00000000 40240000     .......?......$@
  405d88:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  405d98:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  405da8:	00000000 412e8480 00000000 416312d0     .......A......cA
  405db8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  405dc8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  405dd8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  405de8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  405df8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  405e08:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  405e18:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  405e28:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  405e38:	79d99db4 44ea7843                       ...yCx.D

00405e40 <p05.6047>:
  405e40:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  405e50:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  405e60:	5849534f 00002e00                                OSIX...

00405e67 <_ctype_>:
  405e67:	20202000 20202020 28282020 20282828     .         ((((( 
  405e77:	20202020 20202020 20202020 20202020                     
  405e87:	10108820 10101010 10101010 10101010      ...............
  405e97:	04040410 04040404 10040404 10101010     ................
  405ea7:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405eb7:	01010101 01010101 01010101 10101010     ................
  405ec7:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405ed7:	02020202 02020202 02020202 10101010     ................
  405ee7:	00000020 00000000 00000000 00000000      ...............
	...

00405f68 <_init>:
  405f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405f6a:	bf00      	nop
  405f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405f6e:	bc08      	pop	{r3}
  405f70:	469e      	mov	lr, r3
  405f72:	4770      	bx	lr

00405f74 <__init_array_start>:
  405f74:	0040018d 	.word	0x0040018d

00405f78 <_fini>:
  405f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405f7a:	bf00      	nop
  405f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405f7e:	bc08      	pop	{r3}
  405f80:	469e      	mov	lr, r3
  405f82:	4770      	bx	lr

00405f84 <__fini_array_start>:
  405f84:	00400169 	.word	0x00400169
