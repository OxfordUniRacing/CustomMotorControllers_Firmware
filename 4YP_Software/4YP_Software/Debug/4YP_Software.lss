
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000060e8  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  004060e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004dc  20400218  00406300  00020218  2**2
                  ALLOC
  3 .heap         00000204  204006f4  004067dc  00020218  2**0
                  ALLOC
  4 .stack        00000400  204008f8  004069e0  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   000288a3  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000051fa  00000000  00000000  00048b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000c071  00000000  00000000  0004dd3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000dd0  00000000  00000000  00059dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c30  00000000  00000000  0005ab7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000476c9  00000000  00000000  0005b7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ed08  00000000  00000000  000a2e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00155e4b  00000000  00000000  000c1b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002f68  00000000  00000000  002179cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f8 0c 40 20 15 08 40 00 11 08 40 00 11 08 40 00     ..@ ..@...@...@.
  400010:	11 08 40 00 11 08 40 00 11 08 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	11 08 40 00 11 08 40 00 00 00 00 00 11 08 40 00     ..@...@.......@.
  40003c:	11 08 40 00 11 08 40 00 11 08 40 00 11 08 40 00     ..@...@...@...@.
  40004c:	11 08 40 00 11 08 40 00 11 08 40 00 11 08 40 00     ..@...@...@...@.
  40005c:	11 08 40 00 11 08 40 00 00 00 00 00 95 1c 40 00     ..@...@.......@.
  40006c:	11 08 40 00 11 08 40 00 11 08 40 00 11 08 40 00     ..@...@...@...@.
  40007c:	11 08 40 00 89 1c 40 00 11 08 40 00 11 08 40 00     ..@...@...@...@.
  40008c:	11 08 40 00 11 08 40 00 11 08 40 00 11 08 40 00     ..@...@...@...@.
  40009c:	b1 22 40 00 11 08 40 00 11 08 40 00 11 08 40 00     ."@...@...@...@.
  4000ac:	11 08 40 00 11 08 40 00 69 18 40 00 11 08 40 00     ..@...@.i.@...@.
  4000bc:	41 1e 40 00 11 08 40 00 11 08 40 00 11 08 40 00     A.@...@...@...@.
  4000cc:	11 08 40 00 11 08 40 00 59 1a 40 00 11 08 40 00     ..@...@.Y.@...@.
  4000dc:	11 08 40 00 7d 18 40 00 11 08 40 00 11 08 40 00     ..@.}.@...@...@.
  4000ec:	11 08 40 00 11 08 40 00 11 08 40 00 11 08 40 00     ..@...@...@...@.
  4000fc:	11 08 40 00 11 08 40 00 11 08 40 00 c5 22 40 00     ..@...@...@.."@.
  40010c:	11 08 40 00 11 08 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 11 08 40 00 11 08 40 00 21 26 40 00     ......@...@.!&@.
  40012c:	11 08 40 00 55 1e 40 00 11 08 40 00 11 08 40 00     ..@.U.@...@...@.
  40013c:	11 08 40 00 11 08 40 00 11 08 40 00 11 08 40 00     ..@...@...@...@.
  40014c:	11 08 40 00 11 08 40 00 11 08 40 00 11 08 40 00     ..@...@...@...@.
  40015c:	11 08 40 00 11 08 40 00 11 08 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	004060e8 	.word	0x004060e8

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004060e8 	.word	0x004060e8
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	004060e8 	.word	0x004060e8
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400ce5 	.word	0x00400ce5
  4001e4:	00402805 	.word	0x00402805

004001e8 <encoder_init>:
	
	//increment rotation counter
	encoder_rotations ++;
}

void encoder_init(void){
  4001e8:	b508      	push	{r3, lr}
	//enable external interrupt on the Z line 
	ext_irq_register(PIO_PA26_IDX,Encoder_Z_Interrupt);
  4001ea:	493f      	ldr	r1, [pc, #252]	; (4002e8 <encoder_init+0x100>)
  4001ec:	201a      	movs	r0, #26
  4001ee:	4b3f      	ldr	r3, [pc, #252]	; (4002ec <encoder_init+0x104>)
  4001f0:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4001f2:	4b3f      	ldr	r3, [pc, #252]	; (4002f0 <encoder_init+0x108>)
  4001f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4001f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4001fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400200:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400204:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40020c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400210:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400214:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400218:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40021c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400224:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400228:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40022c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400230:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400238:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40023c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400240:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400244:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  40024c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400250:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400254:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40025c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400260:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400264:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400268:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40026c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400274:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400278:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40027c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400280:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400288:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40028c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400290:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400294:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40029c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002a0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002a4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4002ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002b4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002b8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4002c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002c8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002cc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4002d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002dc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002e0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  4002e4:	bd08      	pop	{r3, pc}
  4002e6:	bf00      	nop
  4002e8:	00400319 	.word	0x00400319
  4002ec:	004010ed 	.word	0x004010ed
  4002f0:	e000e100 	.word	0xe000e100

004002f4 <encoder_get_counter>:
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV(mask)) >> TC_CV_CV_Pos;
}

static inline hri_tc_cv_reg_t hri_tc_read_CV_CV_bf(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV_Msk) >> TC_CV_CV_Pos;
  4002f4:	4a06      	ldr	r2, [pc, #24]	; (400310 <encoder_get_counter+0x1c>)
  4002f6:	6913      	ldr	r3, [r2, #16]
  4002f8:	6d10      	ldr	r0, [r2, #80]	; 0x50
	//if starting offset is 0 (which is the case before it was recorded) then it returns the actual counter
	
	
	//get A (first line) and B (second line) counters
	//note that rising and falling edges could be the other way round. It doesn't matter for the current implementation
	int encoder_counter_no_offset =	  ( int) hri_tc_read_CV_CV_bf(TC0,0) + ( int) hri_tc_read_CV_CV_bf(TC0,1) \
  4002fa:	4403      	add	r3, r0
  4002fc:	f502 2290 	add.w	r2, r2, #294912	; 0x48000
  400300:	6910      	ldr	r0, [r2, #16]
									+ ( int) hri_tc_read_CV_CV_bf(TC3,0) + ( int) hri_tc_read_CV_CV_bf(TC3,1) \
  400302:	4403      	add	r3, r0
  400304:	6d10      	ldr	r0, [r2, #80]	; 0x50
  400306:	4403      	add	r3, r0
									- encoder_inital_offset;														//get the number of steps normalised to the starting offset
  400308:	4a02      	ldr	r2, [pc, #8]	; (400314 <encoder_get_counter+0x20>)
  40030a:	6810      	ldr	r0, [r2, #0]
								
	return encoder_counter_no_offset;
}
  40030c:	1a18      	subs	r0, r3, r0
  40030e:	4770      	bx	lr
  400310:	4000c000 	.word	0x4000c000
  400314:	204004c8 	.word	0x204004c8

00400318 <Encoder_Z_Interrupt>:
static void Encoder_Z_Interrupt (void){
  400318:	b508      	push	{r3, lr}
	int encoder_counter_no_offset = encoder_get_counter();
  40031a:	4b05      	ldr	r3, [pc, #20]	; (400330 <Encoder_Z_Interrupt+0x18>)
  40031c:	4798      	blx	r3
	if(encoder_rotations == 0){
  40031e:	4b05      	ldr	r3, [pc, #20]	; (400334 <Encoder_Z_Interrupt+0x1c>)
  400320:	681b      	ldr	r3, [r3, #0]
  400322:	b90b      	cbnz	r3, 400328 <Encoder_Z_Interrupt+0x10>
		encoder_inital_offset = encoder_counter_no_offset;
  400324:	4a04      	ldr	r2, [pc, #16]	; (400338 <Encoder_Z_Interrupt+0x20>)
  400326:	6010      	str	r0, [r2, #0]
	encoder_rotations ++;
  400328:	3301      	adds	r3, #1
  40032a:	4a02      	ldr	r2, [pc, #8]	; (400334 <Encoder_Z_Interrupt+0x1c>)
  40032c:	6013      	str	r3, [r2, #0]
  40032e:	bd08      	pop	{r3, pc}
  400330:	004002f5 	.word	0x004002f5
  400334:	204004cc 	.word	0x204004cc
  400338:	204004c8 	.word	0x204004c8

0040033c <Position_1_Interrupt>:
	
	// update previous systick value
	pos_sens_last_SysTick_count = current_systick;
}

static void Position_1_Interrupt (void){
  40033c:	b538      	push	{r3, r4, r5, lr}
	int current_systick = SysTick->VAL;
  40033e:	4b14      	ldr	r3, [pc, #80]	; (400390 <Position_1_Interrupt+0x54>)
  400340:	689d      	ldr	r5, [r3, #8]
	int delta = current_systick - pos_sens_last_SysTick_count;
  400342:	4b14      	ldr	r3, [pc, #80]	; (400394 <Position_1_Interrupt+0x58>)
  400344:	681c      	ldr	r4, [r3, #0]
  400346:	1b2c      	subs	r4, r5, r4
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  400348:	2c00      	cmp	r4, #0
  40034a:	dd01      	ble.n	400350 <Position_1_Interrupt+0x14>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40034c:	2207      	movs	r2, #7
  40034e:	e00b      	b.n	400368 <Position_1_Interrupt+0x2c>
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  400350:	f104 7400 	add.w	r4, r4, #33554432	; 0x2000000
  400354:	e7fa      	b.n	40034c <Position_1_Interrupt+0x10>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400356:	1e51      	subs	r1, r2, #1
  400358:	4b0f      	ldr	r3, [pc, #60]	; (400398 <Position_1_Interrupt+0x5c>)
  40035a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
  40035e:	6800      	ldr	r0, [r0, #0]
  400360:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  400364:	6018      	str	r0, [r3, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400366:	460a      	mov	r2, r1
  400368:	2a00      	cmp	r2, #0
  40036a:	dcf4      	bgt.n	400356 <Position_1_Interrupt+0x1a>
	pos_sens_deltas [0] = (float) delta / 300;
  40036c:	ee07 4a90 	vmov	s15, r4
  400370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400374:	eddf 6a09 	vldr	s13, [pc, #36]	; 40039c <Position_1_Interrupt+0x60>
  400378:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  40037c:	4b06      	ldr	r3, [pc, #24]	; (400398 <Position_1_Interrupt+0x5c>)
  40037e:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  400382:	4b04      	ldr	r3, [pc, #16]	; (400394 <Position_1_Interrupt+0x58>)
  400384:	601d      	str	r5, [r3, #0]
	Position_General_Interrupt();
	printf("POS 1\n");
  400386:	4806      	ldr	r0, [pc, #24]	; (4003a0 <Position_1_Interrupt+0x64>)
  400388:	4b06      	ldr	r3, [pc, #24]	; (4003a4 <Position_1_Interrupt+0x68>)
  40038a:	4798      	blx	r3
  40038c:	bd38      	pop	{r3, r4, r5, pc}
  40038e:	bf00      	nop
  400390:	e000e010 	.word	0xe000e010
  400394:	204004f0 	.word	0x204004f0
  400398:	204004d0 	.word	0x204004d0
  40039c:	43960000 	.word	0x43960000
  4003a0:	00405a38 	.word	0x00405a38
  4003a4:	00403a45 	.word	0x00403a45

004003a8 <Position_2_Interrupt>:
}

static void Position_2_Interrupt (void){
  4003a8:	b538      	push	{r3, r4, r5, lr}
	int current_systick = SysTick->VAL;
  4003aa:	4b14      	ldr	r3, [pc, #80]	; (4003fc <Position_2_Interrupt+0x54>)
  4003ac:	689d      	ldr	r5, [r3, #8]
	int delta = current_systick - pos_sens_last_SysTick_count;
  4003ae:	4b14      	ldr	r3, [pc, #80]	; (400400 <Position_2_Interrupt+0x58>)
  4003b0:	681c      	ldr	r4, [r3, #0]
  4003b2:	1b2c      	subs	r4, r5, r4
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  4003b4:	2c00      	cmp	r4, #0
  4003b6:	dd01      	ble.n	4003bc <Position_2_Interrupt+0x14>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4003b8:	2207      	movs	r2, #7
  4003ba:	e00b      	b.n	4003d4 <Position_2_Interrupt+0x2c>
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  4003bc:	f104 7400 	add.w	r4, r4, #33554432	; 0x2000000
  4003c0:	e7fa      	b.n	4003b8 <Position_2_Interrupt+0x10>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  4003c2:	1e51      	subs	r1, r2, #1
  4003c4:	4b0f      	ldr	r3, [pc, #60]	; (400404 <Position_2_Interrupt+0x5c>)
  4003c6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
  4003ca:	6800      	ldr	r0, [r0, #0]
  4003cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4003d0:	6018      	str	r0, [r3, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4003d2:	460a      	mov	r2, r1
  4003d4:	2a00      	cmp	r2, #0
  4003d6:	dcf4      	bgt.n	4003c2 <Position_2_Interrupt+0x1a>
	pos_sens_deltas [0] = (float) delta / 300;
  4003d8:	ee07 4a90 	vmov	s15, r4
  4003dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4003e0:	eddf 6a09 	vldr	s13, [pc, #36]	; 400408 <Position_2_Interrupt+0x60>
  4003e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4003e8:	4b06      	ldr	r3, [pc, #24]	; (400404 <Position_2_Interrupt+0x5c>)
  4003ea:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  4003ee:	4b04      	ldr	r3, [pc, #16]	; (400400 <Position_2_Interrupt+0x58>)
  4003f0:	601d      	str	r5, [r3, #0]
	Position_General_Interrupt();
	printf("POS 2\n");
  4003f2:	4806      	ldr	r0, [pc, #24]	; (40040c <Position_2_Interrupt+0x64>)
  4003f4:	4b06      	ldr	r3, [pc, #24]	; (400410 <Position_2_Interrupt+0x68>)
  4003f6:	4798      	blx	r3
  4003f8:	bd38      	pop	{r3, r4, r5, pc}
  4003fa:	bf00      	nop
  4003fc:	e000e010 	.word	0xe000e010
  400400:	204004f0 	.word	0x204004f0
  400404:	204004d0 	.word	0x204004d0
  400408:	43960000 	.word	0x43960000
  40040c:	00405a40 	.word	0x00405a40
  400410:	00403a45 	.word	0x00403a45

00400414 <Position_3_Interrupt>:
}

static void Position_3_Interrupt (void){
  400414:	b538      	push	{r3, r4, r5, lr}
	int current_systick = SysTick->VAL;
  400416:	4b14      	ldr	r3, [pc, #80]	; (400468 <Position_3_Interrupt+0x54>)
  400418:	689d      	ldr	r5, [r3, #8]
	int delta = current_systick - pos_sens_last_SysTick_count;
  40041a:	4b14      	ldr	r3, [pc, #80]	; (40046c <Position_3_Interrupt+0x58>)
  40041c:	681c      	ldr	r4, [r3, #0]
  40041e:	1b2c      	subs	r4, r5, r4
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  400420:	2c00      	cmp	r4, #0
  400422:	dd01      	ble.n	400428 <Position_3_Interrupt+0x14>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400424:	2207      	movs	r2, #7
  400426:	e00b      	b.n	400440 <Position_3_Interrupt+0x2c>
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  400428:	f104 7400 	add.w	r4, r4, #33554432	; 0x2000000
  40042c:	e7fa      	b.n	400424 <Position_3_Interrupt+0x10>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  40042e:	1e51      	subs	r1, r2, #1
  400430:	4b0f      	ldr	r3, [pc, #60]	; (400470 <Position_3_Interrupt+0x5c>)
  400432:	eb03 0081 	add.w	r0, r3, r1, lsl #2
  400436:	6800      	ldr	r0, [r0, #0]
  400438:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40043c:	6018      	str	r0, [r3, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40043e:	460a      	mov	r2, r1
  400440:	2a00      	cmp	r2, #0
  400442:	dcf4      	bgt.n	40042e <Position_3_Interrupt+0x1a>
	pos_sens_deltas [0] = (float) delta / 300;
  400444:	ee07 4a90 	vmov	s15, r4
  400448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40044c:	eddf 6a09 	vldr	s13, [pc, #36]	; 400474 <Position_3_Interrupt+0x60>
  400450:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400454:	4b06      	ldr	r3, [pc, #24]	; (400470 <Position_3_Interrupt+0x5c>)
  400456:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  40045a:	4b04      	ldr	r3, [pc, #16]	; (40046c <Position_3_Interrupt+0x58>)
  40045c:	601d      	str	r5, [r3, #0]
	Position_General_Interrupt();
	printf("POS 3\n");
  40045e:	4806      	ldr	r0, [pc, #24]	; (400478 <Position_3_Interrupt+0x64>)
  400460:	4b06      	ldr	r3, [pc, #24]	; (40047c <Position_3_Interrupt+0x68>)
  400462:	4798      	blx	r3
  400464:	bd38      	pop	{r3, r4, r5, pc}
  400466:	bf00      	nop
  400468:	e000e010 	.word	0xe000e010
  40046c:	204004f0 	.word	0x204004f0
  400470:	204004d0 	.word	0x204004d0
  400474:	43960000 	.word	0x43960000
  400478:	00405a48 	.word	0x00405a48
  40047c:	00403a45 	.word	0x00403a45

00400480 <pos_sens_init>:
}

void pos_sens_init (void){
  400480:	b510      	push	{r4, lr}
	//set interrupt handlers
	ext_irq_register(PIO_PD19_IDX, Position_3_Interrupt);		//POS 3
  400482:	490f      	ldr	r1, [pc, #60]	; (4004c0 <pos_sens_init+0x40>)
  400484:	2073      	movs	r0, #115	; 0x73
  400486:	4c0f      	ldr	r4, [pc, #60]	; (4004c4 <pos_sens_init+0x44>)
  400488:	47a0      	blx	r4
	ext_irq_register(PIO_PA2_IDX, Position_2_Interrupt);		//POS 2
  40048a:	490f      	ldr	r1, [pc, #60]	; (4004c8 <pos_sens_init+0x48>)
  40048c:	2002      	movs	r0, #2
  40048e:	47a0      	blx	r4
	ext_irq_register(PIO_PA5_IDX, Position_1_Interrupt);		//POS 1
  400490:	490e      	ldr	r1, [pc, #56]	; (4004cc <pos_sens_init+0x4c>)
  400492:	2005      	movs	r0, #5
  400494:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400496:	4b0e      	ldr	r3, [pc, #56]	; (4004d0 <pos_sens_init+0x50>)
  400498:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40049c:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40049e:	2220      	movs	r2, #32
  4004a0:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4004a4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4004a8:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4004aa:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_SetPriority(PIOD_IRQn, IRQ_PRIORITY_PERIPHERAL);
	//NVIC_DisableIRQ (PIOD_IRQn);
	//NVIC_ClearPendingIRQ (PIOD_IRQn);
	
	//SysTick starting from 0
	pos_sens_last_SysTick_count = 0;
  4004ae:	2200      	movs	r2, #0
  4004b0:	4b08      	ldr	r3, [pc, #32]	; (4004d4 <pos_sens_init+0x54>)
  4004b2:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
  4004b4:	4b08      	ldr	r3, [pc, #32]	; (4004d8 <pos_sens_init+0x58>)
  4004b6:	609a      	str	r2, [r3, #8]
	//make the load value max, so that the overflows are as rare as possible
	SysTick->LOAD = (0xFFFFFF);
  4004b8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4004bc:	605a      	str	r2, [r3, #4]
  4004be:	bd10      	pop	{r4, pc}
  4004c0:	00400415 	.word	0x00400415
  4004c4:	004010ed 	.word	0x004010ed
  4004c8:	004003a9 	.word	0x004003a9
  4004cc:	0040033d 	.word	0x0040033d
  4004d0:	e000e100 	.word	0xe000e100
  4004d4:	204004f0 	.word	0x204004f0
  4004d8:	e000e010 	.word	0xe000e010

004004dc <dma_adc_0_callback>:
	//printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3],\
	//	(int)dma_adc_0_buff[4],(int)dma_adc_0_buff[5]);
	
	
	//go through the values that the DMA got and get the ones that we need (currents and bus voltage)
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  4004dc:	2300      	movs	r3, #0
  4004de:	e008      	b.n	4004f2 <dma_adc_0_callback+0x16>
				currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
				ready_values |= (1<<0);
				break;
			
			case AFEC_LCDR_CHNB(ADC_CURRENT_B_CHANNEL):
				currents[1] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  4004e0:	b292      	uxth	r2, r2
  4004e2:	4913      	ldr	r1, [pc, #76]	; (400530 <dma_adc_0_callback+0x54>)
  4004e4:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  4004e6:	4913      	ldr	r1, [pc, #76]	; (400534 <dma_adc_0_callback+0x58>)
  4004e8:	7e0a      	ldrb	r2, [r1, #24]
  4004ea:	f042 0202 	orr.w	r2, r2, #2
  4004ee:	760a      	strb	r2, [r1, #24]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  4004f0:	3301      	adds	r3, #1
  4004f2:	2b05      	cmp	r3, #5
  4004f4:	dc13      	bgt.n	40051e <dma_adc_0_callback+0x42>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  4004f6:	4a0f      	ldr	r2, [pc, #60]	; (400534 <dma_adc_0_callback+0x58>)
  4004f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4004fc:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400500:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  400504:	d0ec      	beq.n	4004e0 <dma_adc_0_callback+0x4>
  400506:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40050a:	d1f1      	bne.n	4004f0 <dma_adc_0_callback+0x14>
				currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  40050c:	b292      	uxth	r2, r2
  40050e:	4908      	ldr	r1, [pc, #32]	; (400530 <dma_adc_0_callback+0x54>)
  400510:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  400512:	4908      	ldr	r1, [pc, #32]	; (400534 <dma_adc_0_callback+0x58>)
  400514:	7e0a      	ldrb	r2, [r1, #24]
  400516:	f042 0201 	orr.w	r2, r2, #1
  40051a:	760a      	strb	r2, [r1, #24]
				break;
  40051c:	e7e8      	b.n	4004f0 <dma_adc_0_callback+0x14>
			default:
				;
		}
	}
	
	if(ready_values == ALL_VALUES_READY){
  40051e:	4b05      	ldr	r3, [pc, #20]	; (400534 <dma_adc_0_callback+0x58>)
  400520:	7e1b      	ldrb	r3, [r3, #24]
  400522:	2b0f      	cmp	r3, #15
  400524:	d000      	beq.n	400528 <dma_adc_0_callback+0x4c>
  400526:	4770      	bx	lr
		//means we have collected the data from all ADCs
		
		//we would need new values for next loop
		ready_values = 0;
  400528:	2200      	movs	r2, #0
  40052a:	4b02      	ldr	r3, [pc, #8]	; (400534 <dma_adc_0_callback+0x58>)
  40052c:	761a      	strb	r2, [r3, #24]
		//launch control loop
		//printf("Data collected, launching control loop from adc 0\n");
		//printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
	}
	
}
  40052e:	e7fa      	b.n	400526 <dma_adc_0_callback+0x4a>
  400530:	204004f8 	.word	0x204004f8
  400534:	20400234 	.word	0x20400234

00400538 <dma_adc_1_callback>:
static void dma_adc_1_callback(struct _dma_resource *resource){
	//just for testing
	//printf("interrupt - ADC 1 - %i %i %i %i  \n", (int)dma_adc_1_buff[0],(int)dma_adc_1_buff[1],(int)dma_adc_1_buff[2],(int)dma_adc_1_buff[3]);
	
	//go through the values that the DMA got and get the ones that we need (currents and bus voltage)
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400538:	2300      	movs	r3, #0
  40053a:	e008      	b.n	40054e <dma_adc_1_callback+0x16>
		
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
			
			case AFEC_LCDR_CHNB(ADC_CURRENT_C_CHANNEL):
				currents[2] = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  40053c:	b292      	uxth	r2, r2
  40053e:	4914      	ldr	r1, [pc, #80]	; (400590 <dma_adc_1_callback+0x58>)
  400540:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  400542:	4914      	ldr	r1, [pc, #80]	; (400594 <dma_adc_1_callback+0x5c>)
  400544:	7e0a      	ldrb	r2, [r1, #24]
  400546:	f042 0204 	orr.w	r2, r2, #4
  40054a:	760a      	strb	r2, [r1, #24]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  40054c:	3301      	adds	r3, #1
  40054e:	2b03      	cmp	r3, #3
  400550:	dc14      	bgt.n	40057c <dma_adc_1_callback+0x44>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400552:	4a10      	ldr	r2, [pc, #64]	; (400594 <dma_adc_1_callback+0x5c>)
  400554:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  400558:	69d2      	ldr	r2, [r2, #28]
  40055a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  40055e:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  400562:	d0eb      	beq.n	40053c <dma_adc_1_callback+0x4>
  400564:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  400568:	d1f0      	bne.n	40054c <dma_adc_1_callback+0x14>
				break;
			
			case AFEC_LCDR_CHNB(ADC_SUPPL_VOLTAGE_CHANNEL):
				voltage = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  40056a:	b292      	uxth	r2, r2
  40056c:	490a      	ldr	r1, [pc, #40]	; (400598 <dma_adc_1_callback+0x60>)
  40056e:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<3);
  400570:	4908      	ldr	r1, [pc, #32]	; (400594 <dma_adc_1_callback+0x5c>)
  400572:	7e0a      	ldrb	r2, [r1, #24]
  400574:	f042 0208 	orr.w	r2, r2, #8
  400578:	760a      	strb	r2, [r1, #24]
				break;
  40057a:	e7e7      	b.n	40054c <dma_adc_1_callback+0x14>
			default:
				;
		}
	}
	
	if(ready_values == ALL_VALUES_READY){
  40057c:	4b05      	ldr	r3, [pc, #20]	; (400594 <dma_adc_1_callback+0x5c>)
  40057e:	7e1b      	ldrb	r3, [r3, #24]
  400580:	2b0f      	cmp	r3, #15
  400582:	d000      	beq.n	400586 <dma_adc_1_callback+0x4e>
  400584:	4770      	bx	lr
		//means we have collected the data from all ADCs
		
		//we would need new values for next loop
		ready_values = 0;
  400586:	2200      	movs	r2, #0
  400588:	4b02      	ldr	r3, [pc, #8]	; (400594 <dma_adc_1_callback+0x5c>)
  40058a:	761a      	strb	r2, [r3, #24]
		
		//launch control loop
		//printf("Data collected, launching control loop from adc 1 \n");
		//printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
	}
}
  40058c:	e7fa      	b.n	400584 <dma_adc_1_callback+0x4c>
  40058e:	bf00      	nop
  400590:	204004f8 	.word	0x204004f8
  400594:	20400234 	.word	0x20400234
  400598:	204004f4 	.word	0x204004f4

0040059c <dma_adc_init>:


void dma_adc_init(void){
  40059c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	//channel 0 for ADC 0
	
	//source address = AFEC 0->LCDR
	//_dma_set_source_address(0,(void *) ((Afec *)((&ADC_0)->device.hw) + AFEC_LCDR_OFFSET));
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  4005a0:	4926      	ldr	r1, [pc, #152]	; (40063c <dma_adc_init+0xa0>)
  4005a2:	2000      	movs	r0, #0
  4005a4:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 400660 <dma_adc_init+0xc4>
  4005a8:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  4005aa:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 400664 <dma_adc_init+0xc8>
  4005ae:	4641      	mov	r1, r8
  4005b0:	2000      	movs	r0, #0
  4005b2:	4f23      	ldr	r7, [pc, #140]	; (400640 <dma_adc_init+0xa4>)
  4005b4:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  4005b6:	2118      	movs	r1, #24
  4005b8:	2000      	movs	r0, #0
  4005ba:	4d22      	ldr	r5, [pc, #136]	; (400644 <dma_adc_init+0xa8>)
  4005bc:	47a8      	blx	r5
	
	//set callback function
	struct _dma_resource **res0;
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  4005be:	2100      	movs	r1, #0
  4005c0:	460c      	mov	r4, r1
  4005c2:	4608      	mov	r0, r1
  4005c4:	4e20      	ldr	r6, [pc, #128]	; (400648 <dma_adc_init+0xac>)
  4005c6:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  4005c8:	6823      	ldr	r3, [r4, #0]
  4005ca:	4a20      	ldr	r2, [pc, #128]	; (40064c <dma_adc_init+0xb0>)
  4005cc:	601a      	str	r2, [r3, #0]
	
	//enable interrupt on successful transfer
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  4005ce:	2201      	movs	r2, #1
  4005d0:	4621      	mov	r1, r4
  4005d2:	4620      	mov	r0, r4
  4005d4:	4c1e      	ldr	r4, [pc, #120]	; (400650 <dma_adc_init+0xb4>)
  4005d6:	47a0      	blx	r4
	
	//channel 0 for ADC 0
	
	//source address = AFEC 1->LCDR
	//_dma_set_source_address(0,(void *) ((Afec *)((&ADC_0)->device.hw) + AFEC_LCDR_OFFSET));
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  4005d8:	491e      	ldr	r1, [pc, #120]	; (400654 <dma_adc_init+0xb8>)
  4005da:	2001      	movs	r0, #1
  4005dc:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  4005de:	f108 011c 	add.w	r1, r8, #28
  4005e2:	2001      	movs	r0, #1
  4005e4:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  4005e6:	2110      	movs	r1, #16
  4005e8:	2001      	movs	r0, #1
  4005ea:	47a8      	blx	r5
	
	//set callback function
	struct _dma_resource **res1;
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  4005ec:	2101      	movs	r1, #1
  4005ee:	2500      	movs	r5, #0
  4005f0:	4628      	mov	r0, r5
  4005f2:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  4005f4:	682b      	ldr	r3, [r5, #0]
  4005f6:	4a18      	ldr	r2, [pc, #96]	; (400658 <dma_adc_init+0xbc>)
  4005f8:	601a      	str	r2, [r3, #0]
	
	//enable interrupt on successful transfer
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  4005fa:	2201      	movs	r2, #1
  4005fc:	4629      	mov	r1, r5
  4005fe:	4610      	mov	r0, r2
  400600:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400602:	4b16      	ldr	r3, [pc, #88]	; (40065c <dma_adc_init+0xc0>)
  400604:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400608:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40060a:	2260      	movs	r2, #96	; 0x60
  40060c:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400610:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400618:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40061c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400620:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400624:	f44f 7280 	mov.w	r2, #256	; 0x100
  400628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40062c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400630:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400634:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40063c:	4003c020 	.word	0x4003c020
  400640:	00402565 	.word	0x00402565
  400644:	00402585 	.word	0x00402585
  400648:	004025b5 	.word	0x004025b5
  40064c:	004004dd 	.word	0x004004dd
  400650:	004025c9 	.word	0x004025c9
  400654:	40064020 	.word	0x40064020
  400658:	00400539 	.word	0x00400539
  40065c:	e000e100 	.word	0xe000e100
  400660:	00402575 	.word	0x00402575
  400664:	20400234 	.word	0x20400234

00400668 <dma_adc_0_enable_for_one_transaction>:
	NVIC_ClearPendingIRQ(AFEC0_IRQn);
	NVIC_DisableIRQ		(AFEC1_IRQn);
	NVIC_ClearPendingIRQ(AFEC1_IRQn);
}

void dma_adc_0_enable_for_one_transaction(void){
  400668:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  40066a:	4906      	ldr	r1, [pc, #24]	; (400684 <dma_adc_0_enable_for_one_transaction+0x1c>)
  40066c:	2000      	movs	r0, #0
  40066e:	4b06      	ldr	r3, [pc, #24]	; (400688 <dma_adc_0_enable_for_one_transaction+0x20>)
  400670:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  400672:	2118      	movs	r1, #24
  400674:	2000      	movs	r0, #0
  400676:	4b05      	ldr	r3, [pc, #20]	; (40068c <dma_adc_0_enable_for_one_transaction+0x24>)
  400678:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  40067a:	2101      	movs	r1, #1
  40067c:	2000      	movs	r0, #0
  40067e:	4b04      	ldr	r3, [pc, #16]	; (400690 <dma_adc_0_enable_for_one_transaction+0x28>)
  400680:	4798      	blx	r3
  400682:	bd08      	pop	{r3, pc}
  400684:	20400234 	.word	0x20400234
  400688:	00402565 	.word	0x00402565
  40068c:	00402585 	.word	0x00402585
  400690:	0040259d 	.word	0x0040259d

00400694 <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  400694:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400696:	4906      	ldr	r1, [pc, #24]	; (4006b0 <dma_adc_1_enable_for_one_transaction+0x1c>)
  400698:	2001      	movs	r0, #1
  40069a:	4b06      	ldr	r3, [pc, #24]	; (4006b4 <dma_adc_1_enable_for_one_transaction+0x20>)
  40069c:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  40069e:	2110      	movs	r1, #16
  4006a0:	2001      	movs	r0, #1
  4006a2:	4b05      	ldr	r3, [pc, #20]	; (4006b8 <dma_adc_1_enable_for_one_transaction+0x24>)
  4006a4:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  4006a6:	2101      	movs	r1, #1
  4006a8:	4608      	mov	r0, r1
  4006aa:	4b04      	ldr	r3, [pc, #16]	; (4006bc <dma_adc_1_enable_for_one_transaction+0x28>)
  4006ac:	4798      	blx	r3
  4006ae:	bd08      	pop	{r3, pc}
  4006b0:	20400250 	.word	0x20400250
  4006b4:	00402565 	.word	0x00402565
  4006b8:	00402585 	.word	0x00402585
  4006bc:	0040259d 	.word	0x0040259d

004006c0 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  4006c0:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  4006c2:	4d11      	ldr	r5, [pc, #68]	; (400708 <adc_enable_all+0x48>)
  4006c4:	2108      	movs	r1, #8
  4006c6:	4628      	mov	r0, r5
  4006c8:	4c10      	ldr	r4, [pc, #64]	; (40070c <adc_enable_all+0x4c>)
  4006ca:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  4006cc:	2102      	movs	r1, #2
  4006ce:	4628      	mov	r0, r5
  4006d0:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  4006d2:	4e0f      	ldr	r6, [pc, #60]	; (400710 <adc_enable_all+0x50>)
  4006d4:	2101      	movs	r1, #1
  4006d6:	4630      	mov	r0, r6
  4006d8:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  4006da:	2106      	movs	r1, #6
  4006dc:	4630      	mov	r0, r6
  4006de:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  4006e0:	2105      	movs	r1, #5
  4006e2:	4630      	mov	r0, r6
  4006e4:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  4006e6:	2106      	movs	r1, #6
  4006e8:	4628      	mov	r0, r5
  4006ea:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  4006ec:	210a      	movs	r1, #10
  4006ee:	4628      	mov	r0, r5
  4006f0:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  4006f2:	2100      	movs	r1, #0
  4006f4:	4630      	mov	r0, r6
  4006f6:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  4006f8:	2105      	movs	r1, #5
  4006fa:	4628      	mov	r0, r5
  4006fc:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  4006fe:	2100      	movs	r1, #0
  400700:	4628      	mov	r0, r5
  400702:	47a0      	blx	r4
  400704:	bd70      	pop	{r4, r5, r6, pc}
  400706:	bf00      	nop
  400708:	204005ec 	.word	0x204005ec
  40070c:	00400fbd 	.word	0x00400fbd
  400710:	204006c4 	.word	0x204006c4

00400714 <pwm_0_callback>:
#include <hpl_pwm.h>
#include <hpl_pwm_config.h>



void pwm_0_callback(void){
  400714:	4770      	bx	lr
	...

00400718 <pwm_init_user>:
	
}


void pwm_init_user(void){
  400718:	b508      	push	{r3, lr}
}

static inline void hri_pwm_set_CMR_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmr_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  40071a:	4b28      	ldr	r3, [pc, #160]	; (4007bc <pwm_init_user+0xa4>)
  40071c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  400720:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400724:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}

static inline void hri_pwm_set_DT_DTH_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400728:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  40072c:	f042 020a 	orr.w	r2, r2, #10
  400730:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
}

static inline void hri_pwm_set_DT_DTL_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400734:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400738:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  40073c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400740:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
  400744:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400748:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  40074c:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400750:	f042 020a 	orr.w	r2, r2, #10
  400754:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400758:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  40075c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  400760:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400764:	4a16      	ldr	r2, [pc, #88]	; (4007c0 <pwm_init_user+0xa8>)
  400766:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  40076a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  40076e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400772:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400776:	f041 010a 	orr.w	r1, r1, #10
  40077a:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  40077e:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400782:	f441 2120 	orr.w	r1, r1, #655360	; 0xa0000
  400786:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  40078a:	2201      	movs	r2, #1
  40078c:	611a      	str	r2, [r3, #16]
	
	
	//we want interrupt from one of the PWMs so that we can start the control loop
	//interrupt on PWM 0, channel 0 is enabled ; on PWM 1 is disabled
	hri_pwm_set_IMR1_CHID0_bit(PWM0);									//enable the interrupt from ADC 0, channel 0
	pwm_register_callback(&PWM_0, PWM_PERIOD_CB, pwm_0_callback);
  40078e:	4a0d      	ldr	r2, [pc, #52]	; (4007c4 <pwm_init_user+0xac>)
  400790:	2100      	movs	r1, #0
  400792:	480d      	ldr	r0, [pc, #52]	; (4007c8 <pwm_init_user+0xb0>)
  400794:	4b0d      	ldr	r3, [pc, #52]	; (4007cc <pwm_init_user+0xb4>)
  400796:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400798:	4b0d      	ldr	r3, [pc, #52]	; (4007d0 <pwm_init_user+0xb8>)
  40079a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40079e:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4007a0:	2240      	movs	r2, #64	; 0x40
  4007a2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4007aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4007ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007b2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007b6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  4007ba:	bd08      	pop	{r3, pc}
  4007bc:	40020000 	.word	0x40020000
  4007c0:	4005c000 	.word	0x4005c000
  4007c4:	00400715 	.word	0x00400715
  4007c8:	20400504 	.word	0x20400504
  4007cc:	004012b1 	.word	0x004012b1
  4007d0:	e000e100 	.word	0xe000e100

004007d4 <pwm_enable_all>:
}


//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  4007d4:	b570      	push	{r4, r5, r6, lr}
	//note it's possible to eable individual channels, but not through these functions
	//functions from hal_pwm.h
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  4007d6:	4c0a      	ldr	r4, [pc, #40]	; (400800 <pwm_enable_all+0x2c>)
  4007d8:	4620      	mov	r0, r4
  4007da:	4e0a      	ldr	r6, [pc, #40]	; (400804 <pwm_enable_all+0x30>)
  4007dc:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  4007de:	4d0a      	ldr	r5, [pc, #40]	; (400808 <pwm_enable_all+0x34>)
  4007e0:	4628      	mov	r0, r5
  4007e2:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  4007e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4007e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4007ec:	4620      	mov	r0, r4
  4007ee:	4c07      	ldr	r4, [pc, #28]	; (40080c <pwm_enable_all+0x38>)
  4007f0:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD>>1);
  4007f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4007f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4007fa:	4628      	mov	r0, r5
  4007fc:	47a0      	blx	r4
  4007fe:	bd70      	pop	{r4, r5, r6, pc}
  400800:	20400504 	.word	0x20400504
  400804:	00401275 	.word	0x00401275
  400808:	204006a8 	.word	0x204006a8
  40080c:	004012f9 	.word	0x004012f9

00400810 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400810:	e7fe      	b.n	400810 <Dummy_Handler>
	...

00400814 <Reset_Handler>:
{
  400814:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400816:	4b10      	ldr	r3, [pc, #64]	; (400858 <Reset_Handler+0x44>)
  400818:	4a10      	ldr	r2, [pc, #64]	; (40085c <Reset_Handler+0x48>)
  40081a:	429a      	cmp	r2, r3
  40081c:	d009      	beq.n	400832 <Reset_Handler+0x1e>
  40081e:	4b0e      	ldr	r3, [pc, #56]	; (400858 <Reset_Handler+0x44>)
  400820:	4a0e      	ldr	r2, [pc, #56]	; (40085c <Reset_Handler+0x48>)
  400822:	e003      	b.n	40082c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400824:	6811      	ldr	r1, [r2, #0]
  400826:	6019      	str	r1, [r3, #0]
  400828:	3304      	adds	r3, #4
  40082a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  40082c:	490c      	ldr	r1, [pc, #48]	; (400860 <Reset_Handler+0x4c>)
  40082e:	428b      	cmp	r3, r1
  400830:	d3f8      	bcc.n	400824 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400832:	4b0c      	ldr	r3, [pc, #48]	; (400864 <Reset_Handler+0x50>)
  400834:	e002      	b.n	40083c <Reset_Handler+0x28>
                *pDest++ = 0;
  400836:	2200      	movs	r2, #0
  400838:	601a      	str	r2, [r3, #0]
  40083a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40083c:	4a0a      	ldr	r2, [pc, #40]	; (400868 <Reset_Handler+0x54>)
  40083e:	4293      	cmp	r3, r2
  400840:	d3f9      	bcc.n	400836 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400842:	4a0a      	ldr	r2, [pc, #40]	; (40086c <Reset_Handler+0x58>)
  400844:	4b0a      	ldr	r3, [pc, #40]	; (400870 <Reset_Handler+0x5c>)
  400846:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40084a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40084c:	4b09      	ldr	r3, [pc, #36]	; (400874 <Reset_Handler+0x60>)
  40084e:	4798      	blx	r3
        main();
  400850:	4b09      	ldr	r3, [pc, #36]	; (400878 <Reset_Handler+0x64>)
  400852:	4798      	blx	r3
  400854:	e7fe      	b.n	400854 <Reset_Handler+0x40>
  400856:	bf00      	nop
  400858:	20400000 	.word	0x20400000
  40085c:	004060e8 	.word	0x004060e8
  400860:	20400218 	.word	0x20400218
  400864:	20400218 	.word	0x20400218
  400868:	204006f4 	.word	0x204006f4
  40086c:	e000ed00 	.word	0xe000ed00
  400870:	00400000 	.word	0x00400000
  400874:	00403119 	.word	0x00403119
  400878:	0040268d 	.word	0x0040268d

0040087c <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  40087c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40087e:	b085      	sub	sp, #20
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400880:	4b20      	ldr	r3, [pc, #128]	; (400904 <ADC_1_init+0x88>)
  400882:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400886:	f413 7f80 	tst.w	r3, #256	; 0x100
  40088a:	d104      	bne.n	400896 <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40088c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400890:	4b1c      	ldr	r3, [pc, #112]	; (400904 <ADC_1_init+0x88>)
  400892:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  400896:	4d1c      	ldr	r5, [pc, #112]	; (400908 <ADC_1_init+0x8c>)
  400898:	4c1c      	ldr	r4, [pc, #112]	; (40090c <ADC_1_init+0x90>)
  40089a:	2600      	movs	r6, #0
  40089c:	9602      	str	r6, [sp, #8]
  40089e:	4b1c      	ldr	r3, [pc, #112]	; (400910 <ADC_1_init+0x94>)
  4008a0:	9301      	str	r3, [sp, #4]
  4008a2:	2304      	movs	r3, #4
  4008a4:	9300      	str	r3, [sp, #0]
  4008a6:	2306      	movs	r3, #6
  4008a8:	462a      	mov	r2, r5
  4008aa:	491a      	ldr	r1, [pc, #104]	; (400914 <ADC_1_init+0x98>)
  4008ac:	4620      	mov	r0, r4
  4008ae:	4f1a      	ldr	r7, [pc, #104]	; (400918 <ADC_1_init+0x9c>)
  4008b0:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  4008b2:	2310      	movs	r3, #16
  4008b4:	f105 0208 	add.w	r2, r5, #8
  4008b8:	4631      	mov	r1, r6
  4008ba:	4620      	mov	r0, r4
  4008bc:	4e17      	ldr	r6, [pc, #92]	; (40091c <ADC_1_init+0xa0>)
  4008be:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  4008c0:	2310      	movs	r3, #16
  4008c2:	f105 0218 	add.w	r2, r5, #24
  4008c6:	2101      	movs	r1, #1
  4008c8:	4620      	mov	r0, r4
  4008ca:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  4008cc:	2310      	movs	r3, #16
  4008ce:	f105 0228 	add.w	r2, r5, #40	; 0x28
  4008d2:	2105      	movs	r1, #5
  4008d4:	4620      	mov	r0, r4
  4008d6:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  4008d8:	2310      	movs	r3, #16
  4008da:	f105 0238 	add.w	r2, r5, #56	; 0x38
  4008de:	2106      	movs	r1, #6
  4008e0:	4620      	mov	r0, r4
  4008e2:	47b0      	blx	r6
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  4008e4:	2202      	movs	r2, #2
  4008e6:	4b0e      	ldr	r3, [pc, #56]	; (400920 <ADC_1_init+0xa4>)
  4008e8:	601a      	str	r2, [r3, #0]
  4008ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4008ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4008f2:	601a      	str	r2, [r3, #0]
  4008f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4008f8:	601a      	str	r2, [r3, #0]
  4008fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4008fe:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  400900:	b005      	add	sp, #20
  400902:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400904:	400e0600 	.word	0x400e0600
  400908:	20400260 	.word	0x20400260
  40090c:	204006c4 	.word	0x204006c4
  400910:	20400564 	.word	0x20400564
  400914:	40064000 	.word	0x40064000
  400918:	00400e5d 	.word	0x00400e5d
  40091c:	00400f05 	.word	0x00400f05
  400920:	400e1000 	.word	0x400e1000

00400924 <ADC_0_init>:
{
  400924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400928:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40092a:	4b2a      	ldr	r3, [pc, #168]	; (4009d4 <ADC_0_init+0xb0>)
  40092c:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40092e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400932:	d103      	bne.n	40093c <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400934:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400938:	4b26      	ldr	r3, [pc, #152]	; (4009d4 <ADC_0_init+0xb0>)
  40093a:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  40093c:	4d26      	ldr	r5, [pc, #152]	; (4009d8 <ADC_0_init+0xb4>)
  40093e:	4c27      	ldr	r4, [pc, #156]	; (4009dc <ADC_0_init+0xb8>)
  400940:	2600      	movs	r6, #0
  400942:	9602      	str	r6, [sp, #8]
  400944:	4b26      	ldr	r3, [pc, #152]	; (4009e0 <ADC_0_init+0xbc>)
  400946:	9301      	str	r3, [sp, #4]
  400948:	2706      	movs	r7, #6
  40094a:	9700      	str	r7, [sp, #0]
  40094c:	230a      	movs	r3, #10
  40094e:	f105 0248 	add.w	r2, r5, #72	; 0x48
  400952:	4924      	ldr	r1, [pc, #144]	; (4009e4 <ADC_0_init+0xc0>)
  400954:	4620      	mov	r0, r4
  400956:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4009f4 <ADC_0_init+0xd0>
  40095a:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  40095c:	2310      	movs	r3, #16
  40095e:	f105 0254 	add.w	r2, r5, #84	; 0x54
  400962:	4631      	mov	r1, r6
  400964:	4620      	mov	r0, r4
  400966:	4e20      	ldr	r6, [pc, #128]	; (4009e8 <ADC_0_init+0xc4>)
  400968:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  40096a:	2310      	movs	r3, #16
  40096c:	f105 0264 	add.w	r2, r5, #100	; 0x64
  400970:	2102      	movs	r1, #2
  400972:	4620      	mov	r0, r4
  400974:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  400976:	2310      	movs	r3, #16
  400978:	f105 0274 	add.w	r2, r5, #116	; 0x74
  40097c:	2105      	movs	r1, #5
  40097e:	4620      	mov	r0, r4
  400980:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  400982:	2310      	movs	r3, #16
  400984:	f105 0284 	add.w	r2, r5, #132	; 0x84
  400988:	4639      	mov	r1, r7
  40098a:	4620      	mov	r0, r4
  40098c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  40098e:	2310      	movs	r3, #16
  400990:	f105 0294 	add.w	r2, r5, #148	; 0x94
  400994:	2108      	movs	r1, #8
  400996:	4620      	mov	r0, r4
  400998:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  40099a:	2310      	movs	r3, #16
  40099c:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  4009a0:	210a      	movs	r1, #10
  4009a2:	4620      	mov	r0, r4
  4009a4:	47b0      	blx	r6
  4009a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4009aa:	4b10      	ldr	r3, [pc, #64]	; (4009ec <ADC_0_init+0xc8>)
  4009ac:	601a      	str	r2, [r3, #0]
  4009ae:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4009b2:	2208      	movs	r2, #8
  4009b4:	601a      	str	r2, [r3, #0]
  4009b6:	2204      	movs	r2, #4
  4009b8:	601a      	str	r2, [r3, #0]
  4009ba:	4a0d      	ldr	r2, [pc, #52]	; (4009f0 <ADC_0_init+0xcc>)
  4009bc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4009c0:	6011      	str	r1, [r2, #0]
  4009c2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4009c6:	6011      	str	r1, [r2, #0]
  4009c8:	2201      	movs	r2, #1
  4009ca:	601a      	str	r2, [r3, #0]
}
  4009cc:	b004      	add	sp, #16
  4009ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4009d2:	bf00      	nop
  4009d4:	400e0600 	.word	0x400e0600
  4009d8:	20400260 	.word	0x20400260
  4009dc:	204005ec 	.word	0x204005ec
  4009e0:	20400618 	.word	0x20400618
  4009e4:	4003c000 	.word	0x4003c000
  4009e8:	00400f05 	.word	0x00400f05
  4009ec:	400e1400 	.word	0x400e1400
  4009f0:	400e0e00 	.word	0x400e0e00
  4009f4:	00400e5d 	.word	0x00400e5d

004009f8 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  4009f8:	4b04      	ldr	r3, [pc, #16]	; (400a0c <EXTERNAL_IRQ_D_init+0x14>)
  4009fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4009fe:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  400a00:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  400a02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400a06:	601a      	str	r2, [r3, #0]
  400a08:	4770      	bx	lr
  400a0a:	bf00      	nop
  400a0c:	400e1400 	.word	0x400e1400

00400a10 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400a10:	4b0a      	ldr	r3, [pc, #40]	; (400a3c <EXTERNAL_IRQ_A_init+0x2c>)
  400a12:	2204      	movs	r2, #4
  400a14:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400a16:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400a18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400a1c:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400a1e:	2220      	movs	r2, #32
  400a20:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400a22:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400a24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400a28:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400a2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a2e:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400a30:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400a32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400a36:	601a      	str	r2, [r3, #0]
  400a38:	4770      	bx	lr
  400a3a:	bf00      	nop
  400a3c:	400e0e00 	.word	0x400e0e00

00400a40 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400a40:	4b16      	ldr	r3, [pc, #88]	; (400a9c <PWM_0_PORT_init+0x5c>)
  400a42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400a44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400a48:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400a4a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a4c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  400a50:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400a52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400a56:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400a58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400a5a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  400a5e:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400a60:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a62:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400a66:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a6c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400a6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400a70:	f022 0202 	bic.w	r2, r2, #2
  400a74:	671a      	str	r2, [r3, #112]	; 0x70
  400a76:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a78:	f022 0202 	bic.w	r2, r2, #2
  400a7c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400a7e:	2202      	movs	r2, #2
  400a80:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400a82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400a84:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400a88:	671a      	str	r2, [r3, #112]	; 0x70
  400a8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a8c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400a90:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400a96:	605a      	str	r2, [r3, #4]
  400a98:	4770      	bx	lr
  400a9a:	bf00      	nop
  400a9c:	400e0e00 	.word	0x400e0e00

00400aa0 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400aa0:	4b04      	ldr	r3, [pc, #16]	; (400ab4 <PWM_0_CLOCK_init+0x14>)
  400aa2:	699b      	ldr	r3, [r3, #24]
  400aa4:	2b00      	cmp	r3, #0
  400aa6:	db03      	blt.n	400ab0 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400aa8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400aac:	4b01      	ldr	r3, [pc, #4]	; (400ab4 <PWM_0_CLOCK_init+0x14>)
  400aae:	611a      	str	r2, [r3, #16]
  400ab0:	4770      	bx	lr
  400ab2:	bf00      	nop
  400ab4:	400e0600 	.word	0x400e0600

00400ab8 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400ab8:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  400aba:	4b06      	ldr	r3, [pc, #24]	; (400ad4 <PWM_0_init+0x1c>)
  400abc:	4798      	blx	r3
	PWM_0_PORT_init();
  400abe:	4b06      	ldr	r3, [pc, #24]	; (400ad8 <PWM_0_init+0x20>)
  400ac0:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400ac2:	4b06      	ldr	r3, [pc, #24]	; (400adc <PWM_0_init+0x24>)
  400ac4:	4798      	blx	r3
  400ac6:	4602      	mov	r2, r0
  400ac8:	4905      	ldr	r1, [pc, #20]	; (400ae0 <PWM_0_init+0x28>)
  400aca:	4806      	ldr	r0, [pc, #24]	; (400ae4 <PWM_0_init+0x2c>)
  400acc:	4b06      	ldr	r3, [pc, #24]	; (400ae8 <PWM_0_init+0x30>)
  400ace:	4798      	blx	r3
  400ad0:	bd08      	pop	{r3, pc}
  400ad2:	bf00      	nop
  400ad4:	00400aa1 	.word	0x00400aa1
  400ad8:	00400a41 	.word	0x00400a41
  400adc:	004020d5 	.word	0x004020d5
  400ae0:	40020000 	.word	0x40020000
  400ae4:	20400504 	.word	0x20400504
  400ae8:	00401231 	.word	0x00401231

00400aec <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400aec:	4b0c      	ldr	r3, [pc, #48]	; (400b20 <PWM_1_PORT_init+0x34>)
  400aee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400af0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400af4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400af6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400af8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400afc:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400afe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400b02:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400b04:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400b08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400b0a:	f042 0201 	orr.w	r2, r2, #1
  400b0e:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400b10:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b12:	f022 0201 	bic.w	r2, r2, #1
  400b16:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400b18:	2201      	movs	r2, #1
  400b1a:	605a      	str	r2, [r3, #4]
  400b1c:	4770      	bx	lr
  400b1e:	bf00      	nop
  400b20:	400e0e00 	.word	0x400e0e00

00400b24 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400b24:	4b05      	ldr	r3, [pc, #20]	; (400b3c <PWM_1_CLOCK_init+0x18>)
  400b26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400b2a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  400b2e:	d104      	bne.n	400b3a <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400b34:	4b01      	ldr	r3, [pc, #4]	; (400b3c <PWM_1_CLOCK_init+0x18>)
  400b36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400b3a:	4770      	bx	lr
  400b3c:	400e0600 	.word	0x400e0600

00400b40 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  400b40:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  400b42:	4b06      	ldr	r3, [pc, #24]	; (400b5c <PWM_1_init+0x1c>)
  400b44:	4798      	blx	r3
	PWM_1_PORT_init();
  400b46:	4b06      	ldr	r3, [pc, #24]	; (400b60 <PWM_1_init+0x20>)
  400b48:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400b4a:	4b06      	ldr	r3, [pc, #24]	; (400b64 <PWM_1_init+0x24>)
  400b4c:	4798      	blx	r3
  400b4e:	4602      	mov	r2, r0
  400b50:	4905      	ldr	r1, [pc, #20]	; (400b68 <PWM_1_init+0x28>)
  400b52:	4806      	ldr	r0, [pc, #24]	; (400b6c <PWM_1_init+0x2c>)
  400b54:	4b06      	ldr	r3, [pc, #24]	; (400b70 <PWM_1_init+0x30>)
  400b56:	4798      	blx	r3
  400b58:	bd08      	pop	{r3, pc}
  400b5a:	bf00      	nop
  400b5c:	00400b25 	.word	0x00400b25
  400b60:	00400aed 	.word	0x00400aed
  400b64:	004020d5 	.word	0x004020d5
  400b68:	4005c000 	.word	0x4005c000
  400b6c:	204006a8 	.word	0x204006a8
  400b70:	00401231 	.word	0x00401231

00400b74 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400b74:	4b06      	ldr	r3, [pc, #24]	; (400b90 <ENCODER_A_PORT_init+0x1c>)
  400b76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400b78:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400b7c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400b7e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400b80:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  400b84:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400b86:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400b8a:	605a      	str	r2, [r3, #4]
  400b8c:	4770      	bx	lr
  400b8e:	bf00      	nop
  400b90:	400e0e00 	.word	0x400e0e00

00400b94 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  400b94:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400b96:	4b09      	ldr	r3, [pc, #36]	; (400bbc <ENCODER_A_init+0x28>)
  400b98:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400b9a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400b9e:	d103      	bne.n	400ba8 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400ba0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400ba4:	4b05      	ldr	r3, [pc, #20]	; (400bbc <ENCODER_A_init+0x28>)
  400ba6:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  400ba8:	4b05      	ldr	r3, [pc, #20]	; (400bc0 <ENCODER_A_init+0x2c>)
  400baa:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  400bac:	4b05      	ldr	r3, [pc, #20]	; (400bc4 <ENCODER_A_init+0x30>)
  400bae:	4798      	blx	r3
  400bb0:	4602      	mov	r2, r0
  400bb2:	4905      	ldr	r1, [pc, #20]	; (400bc8 <ENCODER_A_init+0x34>)
  400bb4:	4805      	ldr	r0, [pc, #20]	; (400bcc <ENCODER_A_init+0x38>)
  400bb6:	4b06      	ldr	r3, [pc, #24]	; (400bd0 <ENCODER_A_init+0x3c>)
  400bb8:	4798      	blx	r3
  400bba:	bd08      	pop	{r3, pc}
  400bbc:	400e0600 	.word	0x400e0600
  400bc0:	00400b75 	.word	0x00400b75
  400bc4:	004022ab 	.word	0x004022ab
  400bc8:	4000c000 	.word	0x4000c000
  400bcc:	204005d0 	.word	0x204005d0
  400bd0:	004013e1 	.word	0x004013e1

00400bd4 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400bd4:	4b06      	ldr	r3, [pc, #24]	; (400bf0 <ENCODER_B_PORT_init+0x1c>)
  400bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400bd8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  400bdc:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400bde:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400be0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  400be4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400be6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400bea:	605a      	str	r2, [r3, #4]
  400bec:	4770      	bx	lr
  400bee:	bf00      	nop
  400bf0:	400e1400 	.word	0x400e1400

00400bf4 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  400bf4:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400bf6:	4b0a      	ldr	r3, [pc, #40]	; (400c20 <ENCODER_B_init+0x2c>)
  400bf8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400bfc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  400c00:	d104      	bne.n	400c0c <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400c02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400c06:	4b06      	ldr	r3, [pc, #24]	; (400c20 <ENCODER_B_init+0x2c>)
  400c08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  400c0c:	4b05      	ldr	r3, [pc, #20]	; (400c24 <ENCODER_B_init+0x30>)
  400c0e:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  400c10:	4b05      	ldr	r3, [pc, #20]	; (400c28 <ENCODER_B_init+0x34>)
  400c12:	4798      	blx	r3
  400c14:	4602      	mov	r2, r0
  400c16:	4905      	ldr	r1, [pc, #20]	; (400c2c <ENCODER_B_init+0x38>)
  400c18:	4805      	ldr	r0, [pc, #20]	; (400c30 <ENCODER_B_init+0x3c>)
  400c1a:	4b06      	ldr	r3, [pc, #24]	; (400c34 <ENCODER_B_init+0x40>)
  400c1c:	4798      	blx	r3
  400c1e:	bd08      	pop	{r3, pc}
  400c20:	400e0600 	.word	0x400e0600
  400c24:	00400bd5 	.word	0x00400bd5
  400c28:	004022ab 	.word	0x004022ab
  400c2c:	40054000 	.word	0x40054000
  400c30:	20400520 	.word	0x20400520
  400c34:	004013e1 	.word	0x004013e1

00400c38 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400c38:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400c3a:	4802      	ldr	r0, [pc, #8]	; (400c44 <delay_driver_init+0xc>)
  400c3c:	4b02      	ldr	r3, [pc, #8]	; (400c48 <delay_driver_init+0x10>)
  400c3e:	4798      	blx	r3
  400c40:	bd08      	pop	{r3, pc}
  400c42:	bf00      	nop
  400c44:	e000e010 	.word	0xe000e010
  400c48:	00401041 	.word	0x00401041

00400c4c <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400c4c:	4b0f      	ldr	r3, [pc, #60]	; (400c8c <EDBG_COM_PORT_init+0x40>)
  400c4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c50:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400c54:	671a      	str	r2, [r3, #112]	; 0x70
  400c56:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c58:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400c5c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400c5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400c62:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400c64:	4a0a      	ldr	r2, [pc, #40]	; (400c90 <EDBG_COM_PORT_init+0x44>)
  400c66:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400c6a:	f043 0310 	orr.w	r3, r3, #16
  400c6e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400c72:	4b08      	ldr	r3, [pc, #32]	; (400c94 <EDBG_COM_PORT_init+0x48>)
  400c74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c76:	f042 0210 	orr.w	r2, r2, #16
  400c7a:	671a      	str	r2, [r3, #112]	; 0x70
  400c7c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c7e:	f042 0210 	orr.w	r2, r2, #16
  400c82:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400c84:	2210      	movs	r2, #16
  400c86:	605a      	str	r2, [r3, #4]
  400c88:	4770      	bx	lr
  400c8a:	bf00      	nop
  400c8c:	400e0e00 	.word	0x400e0e00
  400c90:	40088000 	.word	0x40088000
  400c94:	400e1000 	.word	0x400e1000

00400c98 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400c98:	4b04      	ldr	r3, [pc, #16]	; (400cac <EDBG_COM_CLOCK_init+0x14>)
  400c9a:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400c9c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400ca0:	d103      	bne.n	400caa <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400ca2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400ca6:	4b01      	ldr	r3, [pc, #4]	; (400cac <EDBG_COM_CLOCK_init+0x14>)
  400ca8:	611a      	str	r2, [r3, #16]
  400caa:	4770      	bx	lr
  400cac:	400e0600 	.word	0x400e0600

00400cb0 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  400cb0:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  400cb2:	4b06      	ldr	r3, [pc, #24]	; (400ccc <EDBG_COM_init+0x1c>)
  400cb4:	4798      	blx	r3
	EDBG_COM_PORT_init();
  400cb6:	4b06      	ldr	r3, [pc, #24]	; (400cd0 <EDBG_COM_init+0x20>)
  400cb8:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  400cba:	4b06      	ldr	r3, [pc, #24]	; (400cd4 <EDBG_COM_init+0x24>)
  400cbc:	4798      	blx	r3
  400cbe:	4602      	mov	r2, r0
  400cc0:	4905      	ldr	r1, [pc, #20]	; (400cd8 <EDBG_COM_init+0x28>)
  400cc2:	4806      	ldr	r0, [pc, #24]	; (400cdc <EDBG_COM_init+0x2c>)
  400cc4:	4b06      	ldr	r3, [pc, #24]	; (400ce0 <EDBG_COM_init+0x30>)
  400cc6:	4798      	blx	r3
  400cc8:	bd08      	pop	{r3, pc}
  400cca:	bf00      	nop
  400ccc:	00400c99 	.word	0x00400c99
  400cd0:	00400c4d 	.word	0x00400c4d
  400cd4:	004024ed 	.word	0x004024ed
  400cd8:	40028000 	.word	0x40028000
  400cdc:	204005c4 	.word	0x204005c4
  400ce0:	00401529 	.word	0x00401529

00400ce4 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  400ce4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400ce6:	4b32      	ldr	r3, [pc, #200]	; (400db0 <system_init+0xcc>)
  400ce8:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400cea:	4b32      	ldr	r3, [pc, #200]	; (400db4 <system_init+0xd0>)
  400cec:	699b      	ldr	r3, [r3, #24]
  400cee:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400cf2:	d103      	bne.n	400cfc <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400cf8:	4b2e      	ldr	r3, [pc, #184]	; (400db4 <system_init+0xd0>)
  400cfa:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400cfc:	4b2d      	ldr	r3, [pc, #180]	; (400db4 <system_init+0xd0>)
  400cfe:	699b      	ldr	r3, [r3, #24]
  400d00:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400d04:	d103      	bne.n	400d0e <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400d06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400d0a:	4b2a      	ldr	r3, [pc, #168]	; (400db4 <system_init+0xd0>)
  400d0c:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400d0e:	4b29      	ldr	r3, [pc, #164]	; (400db4 <system_init+0xd0>)
  400d10:	699b      	ldr	r3, [r3, #24]
  400d12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400d16:	d103      	bne.n	400d20 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400d18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400d1c:	4b25      	ldr	r3, [pc, #148]	; (400db4 <system_init+0xd0>)
  400d1e:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400d20:	4a25      	ldr	r2, [pc, #148]	; (400db8 <system_init+0xd4>)
  400d22:	6853      	ldr	r3, [r2, #4]
  400d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400d28:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  400d2a:	4b24      	ldr	r3, [pc, #144]	; (400dbc <system_init+0xd8>)
  400d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d30:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  400d32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  400d36:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  400d38:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400d3a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  400d3e:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400d40:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400d42:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d48:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400d4a:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400d4c:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400d52:	f44f 7080 	mov.w	r0, #256	; 0x100
  400d56:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400d58:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400d5a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400d5c:	f44f 7000 	mov.w	r0, #512	; 0x200
  400d60:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400d62:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400d64:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400d66:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400d6a:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400d6c:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400d6e:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400d70:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400d74:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400d76:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400d78:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400d7a:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400d7c:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400d7e:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  400d80:	4b0f      	ldr	r3, [pc, #60]	; (400dc0 <system_init+0xdc>)
  400d82:	4798      	blx	r3
	ADC_1_init();
  400d84:	4b0f      	ldr	r3, [pc, #60]	; (400dc4 <system_init+0xe0>)
  400d86:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  400d88:	4b0f      	ldr	r3, [pc, #60]	; (400dc8 <system_init+0xe4>)
  400d8a:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  400d8c:	4b0f      	ldr	r3, [pc, #60]	; (400dcc <system_init+0xe8>)
  400d8e:	4798      	blx	r3

	PWM_0_init();
  400d90:	4b0f      	ldr	r3, [pc, #60]	; (400dd0 <system_init+0xec>)
  400d92:	4798      	blx	r3

	PWM_1_init();
  400d94:	4b0f      	ldr	r3, [pc, #60]	; (400dd4 <system_init+0xf0>)
  400d96:	4798      	blx	r3
	ENCODER_A_init();
  400d98:	4b0f      	ldr	r3, [pc, #60]	; (400dd8 <system_init+0xf4>)
  400d9a:	4798      	blx	r3
	ENCODER_B_init();
  400d9c:	4b0f      	ldr	r3, [pc, #60]	; (400ddc <system_init+0xf8>)
  400d9e:	4798      	blx	r3

	delay_driver_init();
  400da0:	4b0f      	ldr	r3, [pc, #60]	; (400de0 <system_init+0xfc>)
  400da2:	4798      	blx	r3

	EDBG_COM_init();
  400da4:	4b0f      	ldr	r3, [pc, #60]	; (400de4 <system_init+0x100>)
  400da6:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  400da8:	4b0f      	ldr	r3, [pc, #60]	; (400de8 <system_init+0x104>)
  400daa:	4798      	blx	r3
  400dac:	bd08      	pop	{r3, pc}
  400dae:	bf00      	nop
  400db0:	00401971 	.word	0x00401971
  400db4:	400e0600 	.word	0x400e0600
  400db8:	400e1850 	.word	0x400e1850
  400dbc:	400e0e00 	.word	0x400e0e00
  400dc0:	00400925 	.word	0x00400925
  400dc4:	0040087d 	.word	0x0040087d
  400dc8:	004009f9 	.word	0x004009f9
  400dcc:	00400a11 	.word	0x00400a11
  400dd0:	00400ab9 	.word	0x00400ab9
  400dd4:	00400b41 	.word	0x00400b41
  400dd8:	00400b95 	.word	0x00400b95
  400ddc:	00400bf5 	.word	0x00400bf5
  400de0:	00400c39 	.word	0x00400c39
  400de4:	00400cb1 	.word	0x00400cb1
  400de8:	004010b9 	.word	0x004010b9

00400dec <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  400dec:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  400dee:	6983      	ldr	r3, [r0, #24]
  400df0:	b103      	cbz	r3, 400df4 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  400df2:	4798      	blx	r3
  400df4:	bd08      	pop	{r3, pc}

00400df6 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  400df6:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  400df8:	69c3      	ldr	r3, [r0, #28]
  400dfa:	b103      	cbz	r3, 400dfe <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  400dfc:	4798      	blx	r3
  400dfe:	bd08      	pop	{r3, pc}

00400e00 <adc_async_channel_conversion_done>:
{
  400e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400e04:	4605      	mov	r5, r0
  400e06:	4688      	mov	r8, r1
  400e08:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  400e0a:	6a03      	ldr	r3, [r0, #32]
  400e0c:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  400e0e:	6a87      	ldr	r7, [r0, #40]	; 0x28
  400e10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400e14:	00de      	lsls	r6, r3, #3
  400e16:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  400e18:	f104 0a04 	add.w	sl, r4, #4
  400e1c:	b2d1      	uxtb	r1, r2
  400e1e:	4650      	mov	r0, sl
  400e20:	4b0c      	ldr	r3, [pc, #48]	; (400e54 <adc_async_channel_conversion_done+0x54>)
  400e22:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  400e24:	4628      	mov	r0, r5
  400e26:	4b0c      	ldr	r3, [pc, #48]	; (400e58 <adc_async_channel_conversion_done+0x58>)
  400e28:	4798      	blx	r3
  400e2a:	2801      	cmp	r0, #1
  400e2c:	d907      	bls.n	400e3e <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  400e2e:	ea4f 2119 	mov.w	r1, r9, lsr #8
  400e32:	4650      	mov	r0, sl
  400e34:	4b07      	ldr	r3, [pc, #28]	; (400e54 <adc_async_channel_conversion_done+0x54>)
  400e36:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  400e38:	8aa3      	ldrh	r3, [r4, #20]
  400e3a:	3301      	adds	r3, #1
  400e3c:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  400e3e:	8aa3      	ldrh	r3, [r4, #20]
  400e40:	3301      	adds	r3, #1
  400e42:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  400e44:	59bb      	ldr	r3, [r7, r6]
  400e46:	b113      	cbz	r3, 400e4e <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  400e48:	4641      	mov	r1, r8
  400e4a:	4628      	mov	r0, r5
  400e4c:	4798      	blx	r3
  400e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400e52:	bf00      	nop
  400e54:	00401641 	.word	0x00401641
  400e58:	00401951 	.word	0x00401951

00400e5c <adc_async_init>:
{
  400e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e60:	4616      	mov	r6, r2
  400e62:	461c      	mov	r4, r3
  400e64:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  400e68:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  400e6a:	4607      	mov	r7, r0
  400e6c:	4689      	mov	r9, r1
  400e6e:	2800      	cmp	r0, #0
  400e70:	bf18      	it	ne
  400e72:	2900      	cmpne	r1, #0
  400e74:	d00b      	beq.n	400e8e <adc_async_init+0x32>
  400e76:	1c13      	adds	r3, r2, #0
  400e78:	bf18      	it	ne
  400e7a:	2301      	movne	r3, #1
  400e7c:	f1b8 0f00 	cmp.w	r8, #0
  400e80:	d017      	beq.n	400eb2 <adc_async_init+0x56>
  400e82:	b1b3      	cbz	r3, 400eb2 <adc_async_init+0x56>
  400e84:	b10d      	cbz	r5, 400e8a <adc_async_init+0x2e>
  400e86:	2001      	movs	r0, #1
  400e88:	e002      	b.n	400e90 <adc_async_init+0x34>
  400e8a:	2000      	movs	r0, #0
  400e8c:	e000      	b.n	400e90 <adc_async_init+0x34>
  400e8e:	2000      	movs	r0, #0
  400e90:	f8df b068 	ldr.w	fp, [pc, #104]	; 400efc <adc_async_init+0xa0>
  400e94:	223f      	movs	r2, #63	; 0x3f
  400e96:	4659      	mov	r1, fp
  400e98:	f8df a064 	ldr.w	sl, [pc, #100]	; 400f00 <adc_async_init+0xa4>
  400e9c:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  400e9e:	1c60      	adds	r0, r4, #1
  400ea0:	2240      	movs	r2, #64	; 0x40
  400ea2:	4659      	mov	r1, fp
  400ea4:	4580      	cmp	r8, r0
  400ea6:	bfcc      	ite	gt
  400ea8:	2000      	movgt	r0, #0
  400eaa:	2001      	movle	r0, #1
  400eac:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  400eae:	2300      	movs	r3, #0
  400eb0:	e005      	b.n	400ebe <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  400eb2:	2000      	movs	r0, #0
  400eb4:	e7ec      	b.n	400e90 <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  400eb6:	22ff      	movs	r2, #255	; 0xff
  400eb8:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  400eba:	3301      	adds	r3, #1
  400ebc:	b2db      	uxtb	r3, r3
  400ebe:	42a3      	cmp	r3, r4
  400ec0:	d9f9      	bls.n	400eb6 <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  400ec2:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  400ec4:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  400ec8:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  400ecc:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  400ece:	4649      	mov	r1, r9
  400ed0:	4638      	mov	r0, r7
  400ed2:	4b06      	ldr	r3, [pc, #24]	; (400eec <adc_async_init+0x90>)
  400ed4:	4798      	blx	r3
	if (init_status) {
  400ed6:	4603      	mov	r3, r0
  400ed8:	b928      	cbnz	r0, 400ee6 <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  400eda:	4a05      	ldr	r2, [pc, #20]	; (400ef0 <adc_async_init+0x94>)
  400edc:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  400ede:	4a05      	ldr	r2, [pc, #20]	; (400ef4 <adc_async_init+0x98>)
  400ee0:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  400ee2:	4a05      	ldr	r2, [pc, #20]	; (400ef8 <adc_async_init+0x9c>)
  400ee4:	607a      	str	r2, [r7, #4]
}
  400ee6:	4618      	mov	r0, r3
  400ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400eec:	00401891 	.word	0x00401891
  400ef0:	00400e01 	.word	0x00400e01
  400ef4:	00400ded 	.word	0x00400ded
  400ef8:	00400df7 	.word	0x00400df7
  400efc:	00405a50 	.word	0x00405a50
  400f00:	0040159d 	.word	0x0040159d

00400f04 <adc_async_register_channel_buffer>:
{
  400f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400f08:	460e      	mov	r6, r1
  400f0a:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  400f0c:	4605      	mov	r5, r0
  400f0e:	4690      	mov	r8, r2
  400f10:	2800      	cmp	r0, #0
  400f12:	bf18      	it	ne
  400f14:	2a00      	cmpne	r2, #0
  400f16:	d002      	beq.n	400f1e <adc_async_register_channel_buffer+0x1a>
  400f18:	b9c3      	cbnz	r3, 400f4c <adc_async_register_channel_buffer+0x48>
  400f1a:	2000      	movs	r0, #0
  400f1c:	e000      	b.n	400f20 <adc_async_register_channel_buffer+0x1c>
  400f1e:	2000      	movs	r0, #0
  400f20:	f8df 9094 	ldr.w	r9, [pc, #148]	; 400fb8 <adc_async_register_channel_buffer+0xb4>
  400f24:	2266      	movs	r2, #102	; 0x66
  400f26:	4649      	mov	r1, r9
  400f28:	4c21      	ldr	r4, [pc, #132]	; (400fb0 <adc_async_register_channel_buffer+0xac>)
  400f2a:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  400f2c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  400f30:	2267      	movs	r2, #103	; 0x67
  400f32:	4649      	mov	r1, r9
  400f34:	42b0      	cmp	r0, r6
  400f36:	bf34      	ite	cc
  400f38:	2000      	movcc	r0, #0
  400f3a:	2001      	movcs	r0, #1
  400f3c:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  400f3e:	6a29      	ldr	r1, [r5, #32]
  400f40:	5d8b      	ldrb	r3, [r1, r6]
  400f42:	2bff      	cmp	r3, #255	; 0xff
  400f44:	d12b      	bne.n	400f9e <adc_async_register_channel_buffer+0x9a>
  400f46:	2400      	movs	r4, #0
  400f48:	4623      	mov	r3, r4
  400f4a:	e003      	b.n	400f54 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  400f4c:	2001      	movs	r0, #1
  400f4e:	e7e7      	b.n	400f20 <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  400f50:	3301      	adds	r3, #1
  400f52:	b2db      	uxtb	r3, r3
  400f54:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  400f58:	4293      	cmp	r3, r2
  400f5a:	d805      	bhi.n	400f68 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  400f5c:	5cca      	ldrb	r2, [r1, r3]
  400f5e:	2aff      	cmp	r2, #255	; 0xff
  400f60:	d0f6      	beq.n	400f50 <adc_async_register_channel_buffer+0x4c>
			index++;
  400f62:	3401      	adds	r4, #1
  400f64:	b2e4      	uxtb	r4, r4
  400f66:	e7f3      	b.n	400f50 <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  400f68:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  400f6c:	429c      	cmp	r4, r3
  400f6e:	d819      	bhi.n	400fa4 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  400f70:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  400f72:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  400f76:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  400f7a:	4448      	add	r0, r9
  400f7c:	463a      	mov	r2, r7
  400f7e:	4641      	mov	r1, r8
  400f80:	3004      	adds	r0, #4
  400f82:	4b0c      	ldr	r3, [pc, #48]	; (400fb4 <adc_async_register_channel_buffer+0xb0>)
  400f84:	4798      	blx	r3
  400f86:	4602      	mov	r2, r0
  400f88:	b978      	cbnz	r0, 400faa <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  400f8a:	6a2b      	ldr	r3, [r5, #32]
  400f8c:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  400f8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  400f90:	4499      	add	r9, r3
  400f92:	2300      	movs	r3, #0
  400f94:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  400f98:	4610      	mov	r0, r2
  400f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  400f9e:	f06f 020c 	mvn.w	r2, #12
  400fa2:	e7f9      	b.n	400f98 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  400fa4:	f06f 021b 	mvn.w	r2, #27
  400fa8:	e7f6      	b.n	400f98 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  400faa:	f06f 020c 	mvn.w	r2, #12
  400fae:	e7f3      	b.n	400f98 <adc_async_register_channel_buffer+0x94>
  400fb0:	0040159d 	.word	0x0040159d
  400fb4:	004015fd 	.word	0x004015fd
  400fb8:	00405a50 	.word	0x00405a50

00400fbc <adc_async_enable_channel>:
{
  400fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400fbe:	460d      	mov	r5, r1
	ASSERT(descr);
  400fc0:	4f0b      	ldr	r7, [pc, #44]	; (400ff0 <adc_async_enable_channel+0x34>)
  400fc2:	4604      	mov	r4, r0
  400fc4:	2283      	movs	r2, #131	; 0x83
  400fc6:	4639      	mov	r1, r7
  400fc8:	3000      	adds	r0, #0
  400fca:	bf18      	it	ne
  400fcc:	2001      	movne	r0, #1
  400fce:	4e09      	ldr	r6, [pc, #36]	; (400ff4 <adc_async_enable_channel+0x38>)
  400fd0:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  400fd2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  400fd6:	2284      	movs	r2, #132	; 0x84
  400fd8:	4639      	mov	r1, r7
  400fda:	42a8      	cmp	r0, r5
  400fdc:	bf34      	ite	cc
  400fde:	2000      	movcc	r0, #0
  400fe0:	2001      	movcs	r0, #1
  400fe2:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  400fe4:	4629      	mov	r1, r5
  400fe6:	4620      	mov	r0, r4
  400fe8:	4b03      	ldr	r3, [pc, #12]	; (400ff8 <adc_async_enable_channel+0x3c>)
  400fea:	4798      	blx	r3
}
  400fec:	2000      	movs	r0, #0
  400fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ff0:	00405a50 	.word	0x00405a50
  400ff4:	0040159d 	.word	0x0040159d
  400ff8:	00401945 	.word	0x00401945

00400ffc <adc_async_start_conversion>:
{
  400ffc:	b510      	push	{r4, lr}
	ASSERT(descr);
  400ffe:	4604      	mov	r4, r0
  401000:	22d6      	movs	r2, #214	; 0xd6
  401002:	4905      	ldr	r1, [pc, #20]	; (401018 <adc_async_start_conversion+0x1c>)
  401004:	3000      	adds	r0, #0
  401006:	bf18      	it	ne
  401008:	2001      	movne	r0, #1
  40100a:	4b04      	ldr	r3, [pc, #16]	; (40101c <adc_async_start_conversion+0x20>)
  40100c:	4798      	blx	r3
	_adc_async_convert(&descr->device);
  40100e:	4620      	mov	r0, r4
  401010:	4b03      	ldr	r3, [pc, #12]	; (401020 <adc_async_start_conversion+0x24>)
  401012:	4798      	blx	r3
}
  401014:	2000      	movs	r0, #0
  401016:	bd10      	pop	{r4, pc}
  401018:	00405a50 	.word	0x00405a50
  40101c:	0040159d 	.word	0x0040159d
  401020:	00401955 	.word	0x00401955

00401024 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401024:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  401028:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40102a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40102c:	f3bf 8f5f 	dmb	sy
  401030:	4770      	bx	lr

00401032 <atomic_leave_critical>:
  401032:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  401036:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  401038:	f383 8810 	msr	PRIMASK, r3
  40103c:	4770      	bx	lr
	...

00401040 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  401040:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  401042:	4b02      	ldr	r3, [pc, #8]	; (40104c <delay_init+0xc>)
  401044:	6018      	str	r0, [r3, #0]
  401046:	4b02      	ldr	r3, [pc, #8]	; (401050 <delay_init+0x10>)
  401048:	4798      	blx	r3
  40104a:	bd08      	pop	{r3, pc}
  40104c:	20400314 	.word	0x20400314
  401050:	004020ed 	.word	0x004020ed

00401054 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  401054:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  401056:	4b04      	ldr	r3, [pc, #16]	; (401068 <delay_ms+0x14>)
  401058:	681c      	ldr	r4, [r3, #0]
  40105a:	4b04      	ldr	r3, [pc, #16]	; (40106c <delay_ms+0x18>)
  40105c:	4798      	blx	r3
  40105e:	4601      	mov	r1, r0
  401060:	4620      	mov	r0, r4
  401062:	4b03      	ldr	r3, [pc, #12]	; (401070 <delay_ms+0x1c>)
  401064:	4798      	blx	r3
  401066:	bd10      	pop	{r4, pc}
  401068:	20400314 	.word	0x20400314
  40106c:	0040195d 	.word	0x0040195d
  401070:	004020f9 	.word	0x004020f9

00401074 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  401074:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  401076:	2504      	movs	r5, #4
  401078:	2400      	movs	r4, #0

	while (upper >= lower) {
  40107a:	e007      	b.n	40108c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  40107c:	4a0d      	ldr	r2, [pc, #52]	; (4010b4 <process_ext_irq+0x40>)
  40107e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  401082:	b1b3      	cbz	r3, 4010b2 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  401084:	4798      	blx	r3
  401086:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  401088:	3a01      	subs	r2, #1
  40108a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  40108c:	42ac      	cmp	r4, r5
  40108e:	d810      	bhi.n	4010b2 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  401090:	192b      	adds	r3, r5, r4
  401092:	105b      	asrs	r3, r3, #1
  401094:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  401096:	2a03      	cmp	r2, #3
  401098:	d80b      	bhi.n	4010b2 <process_ext_irq+0x3e>
  40109a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  40109c:	4905      	ldr	r1, [pc, #20]	; (4010b4 <process_ext_irq+0x40>)
  40109e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  4010a2:	6849      	ldr	r1, [r1, #4]
  4010a4:	4281      	cmp	r1, r0
  4010a6:	d0e9      	beq.n	40107c <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  4010a8:	4281      	cmp	r1, r0
  4010aa:	d2ed      	bcs.n	401088 <process_ext_irq+0x14>
			lower = middle + 1;
  4010ac:	3201      	adds	r2, #1
  4010ae:	b2d4      	uxtb	r4, r2
  4010b0:	e7ec      	b.n	40108c <process_ext_irq+0x18>
  4010b2:	bd38      	pop	{r3, r4, r5, pc}
  4010b4:	20400318 	.word	0x20400318

004010b8 <ext_irq_init>:
{
  4010b8:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4010ba:	2300      	movs	r3, #0
  4010bc:	e00a      	b.n	4010d4 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  4010be:	4a08      	ldr	r2, [pc, #32]	; (4010e0 <ext_irq_init+0x28>)
  4010c0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  4010c4:	f04f 30ff 	mov.w	r0, #4294967295
  4010c8:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  4010ca:	2100      	movs	r1, #0
  4010cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4010d0:	3301      	adds	r3, #1
  4010d2:	b29b      	uxth	r3, r3
  4010d4:	2b03      	cmp	r3, #3
  4010d6:	d9f2      	bls.n	4010be <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  4010d8:	4802      	ldr	r0, [pc, #8]	; (4010e4 <ext_irq_init+0x2c>)
  4010da:	4b03      	ldr	r3, [pc, #12]	; (4010e8 <ext_irq_init+0x30>)
  4010dc:	4798      	blx	r3
}
  4010de:	bd08      	pop	{r3, pc}
  4010e0:	20400318 	.word	0x20400318
  4010e4:	00401075 	.word	0x00401075
  4010e8:	00401ca1 	.word	0x00401ca1

004010ec <ext_irq_register>:
{
  4010ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4010ee:	b083      	sub	sp, #12
  4010f0:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  4010f2:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  4010f4:	2b03      	cmp	r3, #3
  4010f6:	d80e      	bhi.n	401116 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  4010f8:	4618      	mov	r0, r3
  4010fa:	4a2e      	ldr	r2, [pc, #184]	; (4011b4 <ext_irq_register+0xc8>)
  4010fc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  401100:	6852      	ldr	r2, [r2, #4]
  401102:	42aa      	cmp	r2, r5
  401104:	d002      	beq.n	40110c <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  401106:	3301      	adds	r3, #1
  401108:	b2db      	uxtb	r3, r3
  40110a:	e7f3      	b.n	4010f4 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  40110c:	4b29      	ldr	r3, [pc, #164]	; (4011b4 <ext_irq_register+0xc8>)
  40110e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  401112:	2701      	movs	r7, #1
			break;
  401114:	e000      	b.n	401118 <ext_irq_register+0x2c>
	bool    found = false;
  401116:	2700      	movs	r7, #0
	if (NULL == cb) {
  401118:	b159      	cbz	r1, 401132 <ext_irq_register+0x46>
	if (!found) {
  40111a:	2f00      	cmp	r7, #0
  40111c:	d13d      	bne.n	40119a <ext_irq_register+0xae>
  40111e:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401120:	2e03      	cmp	r6, #3
  401122:	d813      	bhi.n	40114c <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  401124:	4b23      	ldr	r3, [pc, #140]	; (4011b4 <ext_irq_register+0xc8>)
  401126:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  40112a:	b143      	cbz	r3, 40113e <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40112c:	3601      	adds	r6, #1
  40112e:	b2f6      	uxtb	r6, r6
  401130:	e7f6      	b.n	401120 <ext_irq_register+0x34>
		if (!found) {
  401132:	2f00      	cmp	r7, #0
  401134:	d038      	beq.n	4011a8 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  401136:	4628      	mov	r0, r5
  401138:	4b1f      	ldr	r3, [pc, #124]	; (4011b8 <ext_irq_register+0xcc>)
  40113a:	4798      	blx	r3
  40113c:	e032      	b.n	4011a4 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  40113e:	4b1d      	ldr	r3, [pc, #116]	; (4011b4 <ext_irq_register+0xc8>)
  401140:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  401144:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  401148:	605d      	str	r5, [r3, #4]
				found           = true;
  40114a:	2701      	movs	r7, #1
  40114c:	2300      	movs	r3, #0
  40114e:	e001      	b.n	401154 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  401150:	3301      	adds	r3, #1
  401152:	b2db      	uxtb	r3, r3
  401154:	2b03      	cmp	r3, #3
  401156:	bf98      	it	ls
  401158:	2e03      	cmpls	r6, #3
  40115a:	d81e      	bhi.n	40119a <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  40115c:	46b6      	mov	lr, r6
  40115e:	4a15      	ldr	r2, [pc, #84]	; (4011b4 <ext_irq_register+0xc8>)
  401160:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  401164:	6848      	ldr	r0, [r1, #4]
  401166:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40116a:	6852      	ldr	r2, [r2, #4]
  40116c:	4290      	cmp	r0, r2
  40116e:	d2ef      	bcs.n	401150 <ext_irq_register+0x64>
  401170:	f1b2 3fff 	cmp.w	r2, #4294967295
  401174:	d0ec      	beq.n	401150 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  401176:	4c0f      	ldr	r4, [pc, #60]	; (4011b4 <ext_irq_register+0xc8>)
  401178:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  40117c:	e892 0003 	ldmia.w	r2, {r0, r1}
  401180:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  401184:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  401188:	e894 0003 	ldmia.w	r4, {r0, r1}
  40118c:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  401190:	e89d 0003 	ldmia.w	sp, {r0, r1}
  401194:	e884 0003 	stmia.w	r4, {r0, r1}
  401198:	e7da      	b.n	401150 <ext_irq_register+0x64>
	if (!found) {
  40119a:	b147      	cbz	r7, 4011ae <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  40119c:	2101      	movs	r1, #1
  40119e:	4628      	mov	r0, r5
  4011a0:	4b05      	ldr	r3, [pc, #20]	; (4011b8 <ext_irq_register+0xcc>)
  4011a2:	4798      	blx	r3
}
  4011a4:	b003      	add	sp, #12
  4011a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  4011a8:	f06f 000c 	mvn.w	r0, #12
  4011ac:	e7fa      	b.n	4011a4 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  4011ae:	f06f 000c 	mvn.w	r0, #12
  4011b2:	e7f7      	b.n	4011a4 <ext_irq_register+0xb8>
  4011b4:	20400318 	.word	0x20400318
  4011b8:	00401cc9 	.word	0x00401cc9

004011bc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4011bc:	b570      	push	{r4, r5, r6, lr}
  4011be:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4011c0:	4604      	mov	r4, r0
  4011c2:	460d      	mov	r5, r1
  4011c4:	2800      	cmp	r0, #0
  4011c6:	bf18      	it	ne
  4011c8:	2900      	cmpne	r1, #0
  4011ca:	bf14      	ite	ne
  4011cc:	2001      	movne	r0, #1
  4011ce:	2000      	moveq	r0, #0
  4011d0:	2234      	movs	r2, #52	; 0x34
  4011d2:	4904      	ldr	r1, [pc, #16]	; (4011e4 <io_write+0x28>)
  4011d4:	4b04      	ldr	r3, [pc, #16]	; (4011e8 <io_write+0x2c>)
  4011d6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  4011d8:	6823      	ldr	r3, [r4, #0]
  4011da:	4632      	mov	r2, r6
  4011dc:	4629      	mov	r1, r5
  4011de:	4620      	mov	r0, r4
  4011e0:	4798      	blx	r3
}
  4011e2:	bd70      	pop	{r4, r5, r6, pc}
  4011e4:	00405a6c 	.word	0x00405a6c
  4011e8:	0040159d 	.word	0x0040159d

004011ec <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4011ec:	b570      	push	{r4, r5, r6, lr}
  4011ee:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4011f0:	4604      	mov	r4, r0
  4011f2:	460d      	mov	r5, r1
  4011f4:	2800      	cmp	r0, #0
  4011f6:	bf18      	it	ne
  4011f8:	2900      	cmpne	r1, #0
  4011fa:	bf14      	ite	ne
  4011fc:	2001      	movne	r0, #1
  4011fe:	2000      	moveq	r0, #0
  401200:	223d      	movs	r2, #61	; 0x3d
  401202:	4904      	ldr	r1, [pc, #16]	; (401214 <io_read+0x28>)
  401204:	4b04      	ldr	r3, [pc, #16]	; (401218 <io_read+0x2c>)
  401206:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  401208:	6863      	ldr	r3, [r4, #4]
  40120a:	4632      	mov	r2, r6
  40120c:	4629      	mov	r1, r5
  40120e:	4620      	mov	r0, r4
  401210:	4798      	blx	r3
}
  401212:	bd70      	pop	{r4, r5, r6, pc}
  401214:	00405a6c 	.word	0x00405a6c
  401218:	0040159d 	.word	0x0040159d

0040121c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  40121c:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  40121e:	6943      	ldr	r3, [r0, #20]
  401220:	b103      	cbz	r3, 401224 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  401222:	4798      	blx	r3
  401224:	bd08      	pop	{r3, pc}

00401226 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  401226:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  401228:	6983      	ldr	r3, [r0, #24]
  40122a:	b103      	cbz	r3, 40122e <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  40122c:	4798      	blx	r3
  40122e:	bd08      	pop	{r3, pc}

00401230 <pwm_init>:
{
  401230:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401232:	4604      	mov	r4, r0
  401234:	460d      	mov	r5, r1
  401236:	2800      	cmp	r0, #0
  401238:	bf18      	it	ne
  40123a:	2900      	cmpne	r1, #0
  40123c:	bf14      	ite	ne
  40123e:	2001      	movne	r0, #1
  401240:	2000      	moveq	r0, #0
  401242:	2233      	movs	r2, #51	; 0x33
  401244:	4906      	ldr	r1, [pc, #24]	; (401260 <pwm_init+0x30>)
  401246:	4b07      	ldr	r3, [pc, #28]	; (401264 <pwm_init+0x34>)
  401248:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  40124a:	4629      	mov	r1, r5
  40124c:	4620      	mov	r0, r4
  40124e:	4b06      	ldr	r3, [pc, #24]	; (401268 <pwm_init+0x38>)
  401250:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  401252:	4b06      	ldr	r3, [pc, #24]	; (40126c <pwm_init+0x3c>)
  401254:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  401256:	4b06      	ldr	r3, [pc, #24]	; (401270 <pwm_init+0x40>)
  401258:	6063      	str	r3, [r4, #4]
}
  40125a:	2000      	movs	r0, #0
  40125c:	bd38      	pop	{r3, r4, r5, pc}
  40125e:	bf00      	nop
  401260:	00405a80 	.word	0x00405a80
  401264:	0040159d 	.word	0x0040159d
  401268:	00401e69 	.word	0x00401e69
  40126c:	0040121d 	.word	0x0040121d
  401270:	00401227 	.word	0x00401227

00401274 <pwm_enable>:
{
  401274:	b510      	push	{r4, lr}
	ASSERT(descr);
  401276:	4604      	mov	r4, r0
  401278:	224a      	movs	r2, #74	; 0x4a
  40127a:	4909      	ldr	r1, [pc, #36]	; (4012a0 <pwm_enable+0x2c>)
  40127c:	3000      	adds	r0, #0
  40127e:	bf18      	it	ne
  401280:	2001      	movne	r0, #1
  401282:	4b08      	ldr	r3, [pc, #32]	; (4012a4 <pwm_enable+0x30>)
  401284:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  401286:	4620      	mov	r0, r4
  401288:	4b07      	ldr	r3, [pc, #28]	; (4012a8 <pwm_enable+0x34>)
  40128a:	4798      	blx	r3
  40128c:	b920      	cbnz	r0, 401298 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  40128e:	4620      	mov	r0, r4
  401290:	4b06      	ldr	r3, [pc, #24]	; (4012ac <pwm_enable+0x38>)
  401292:	4798      	blx	r3
	return ERR_NONE;
  401294:	2000      	movs	r0, #0
  401296:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401298:	f06f 0010 	mvn.w	r0, #16
}
  40129c:	bd10      	pop	{r4, pc}
  40129e:	bf00      	nop
  4012a0:	00405a80 	.word	0x00405a80
  4012a4:	0040159d 	.word	0x0040159d
  4012a8:	00402045 	.word	0x00402045
  4012ac:	00401fa1 	.word	0x00401fa1

004012b0 <pwm_register_callback>:
{
  4012b0:	b570      	push	{r4, r5, r6, lr}
	switch (type) {
  4012b2:	460d      	mov	r5, r1
  4012b4:	b121      	cbz	r1, 4012c0 <pwm_register_callback+0x10>
  4012b6:	2901      	cmp	r1, #1
  4012b8:	d015      	beq.n	4012e6 <pwm_register_callback+0x36>
		return ERR_INVALID_ARG;
  4012ba:	f06f 000c 	mvn.w	r0, #12
}
  4012be:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.period = cb;
  4012c0:	6142      	str	r2, [r0, #20]
  4012c2:	4616      	mov	r6, r2
  4012c4:	4604      	mov	r4, r0
	ASSERT(descr);
  4012c6:	2272      	movs	r2, #114	; 0x72
  4012c8:	4908      	ldr	r1, [pc, #32]	; (4012ec <pwm_register_callback+0x3c>)
  4012ca:	3000      	adds	r0, #0
  4012cc:	bf18      	it	ne
  4012ce:	2001      	movne	r0, #1
  4012d0:	4b07      	ldr	r3, [pc, #28]	; (4012f0 <pwm_register_callback+0x40>)
  4012d2:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
  4012d4:	1c32      	adds	r2, r6, #0
  4012d6:	bf18      	it	ne
  4012d8:	2201      	movne	r2, #1
  4012da:	4629      	mov	r1, r5
  4012dc:	4620      	mov	r0, r4
  4012de:	4b05      	ldr	r3, [pc, #20]	; (4012f4 <pwm_register_callback+0x44>)
  4012e0:	4798      	blx	r3
	return ERR_NONE;
  4012e2:	2000      	movs	r0, #0
  4012e4:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
  4012e6:	6182      	str	r2, [r0, #24]
		break;
  4012e8:	e7eb      	b.n	4012c2 <pwm_register_callback+0x12>
  4012ea:	bf00      	nop
  4012ec:	00405a80 	.word	0x00405a80
  4012f0:	0040159d 	.word	0x0040159d
  4012f4:	00402075 	.word	0x00402075

004012f8 <pwm_set_parameters>:
{
  4012f8:	b570      	push	{r4, r5, r6, lr}
  4012fa:	460d      	mov	r5, r1
  4012fc:	4616      	mov	r6, r2
	ASSERT(descr);
  4012fe:	4604      	mov	r4, r0
  401300:	227c      	movs	r2, #124	; 0x7c
  401302:	4906      	ldr	r1, [pc, #24]	; (40131c <pwm_set_parameters+0x24>)
  401304:	3000      	adds	r0, #0
  401306:	bf18      	it	ne
  401308:	2001      	movne	r0, #1
  40130a:	4b05      	ldr	r3, [pc, #20]	; (401320 <pwm_set_parameters+0x28>)
  40130c:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  40130e:	4632      	mov	r2, r6
  401310:	4629      	mov	r1, r5
  401312:	4620      	mov	r0, r4
  401314:	4b03      	ldr	r3, [pc, #12]	; (401324 <pwm_set_parameters+0x2c>)
  401316:	4798      	blx	r3
}
  401318:	2000      	movs	r0, #0
  40131a:	bd70      	pop	{r4, r5, r6, pc}
  40131c:	00405a80 	.word	0x00405a80
  401320:	0040159d 	.word	0x0040159d
  401324:	00401fe5 	.word	0x00401fe5

00401328 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  401328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  40132a:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  40132c:	b117      	cbz	r7, 401334 <timer_add_timer_task+0xc>
  40132e:	463c      	mov	r4, r7
  401330:	2600      	movs	r6, #0
  401332:	e00b      	b.n	40134c <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  401334:	4b0e      	ldr	r3, [pc, #56]	; (401370 <timer_add_timer_task+0x48>)
  401336:	4798      	blx	r3
		return;
  401338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  40133a:	68a5      	ldr	r5, [r4, #8]
  40133c:	442b      	add	r3, r5
  40133e:	1a9b      	subs	r3, r3, r2
  401340:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  401342:	688d      	ldr	r5, [r1, #8]
  401344:	42ab      	cmp	r3, r5
  401346:	d209      	bcs.n	40135c <timer_add_timer_task+0x34>
			break;
		prev = it;
  401348:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  40134a:	6824      	ldr	r4, [r4, #0]
  40134c:	b134      	cbz	r4, 40135c <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  40134e:	6863      	ldr	r3, [r4, #4]
  401350:	4293      	cmp	r3, r2
  401352:	d8f2      	bhi.n	40133a <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  401354:	68a5      	ldr	r5, [r4, #8]
  401356:	1a9b      	subs	r3, r3, r2
  401358:	442b      	add	r3, r5
  40135a:	e7f2      	b.n	401342 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  40135c:	42bc      	cmp	r4, r7
  40135e:	d003      	beq.n	401368 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  401360:	4630      	mov	r0, r6
  401362:	4b04      	ldr	r3, [pc, #16]	; (401374 <timer_add_timer_task+0x4c>)
  401364:	4798      	blx	r3
  401366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  401368:	4b01      	ldr	r3, [pc, #4]	; (401370 <timer_add_timer_task+0x48>)
  40136a:	4798      	blx	r3
  40136c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40136e:	bf00      	nop
  401370:	004015b9 	.word	0x004015b9
  401374:	004015e5 	.word	0x004015e5

00401378 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  401378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40137a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  40137c:	6906      	ldr	r6, [r0, #16]
  40137e:	3601      	adds	r6, #1
  401380:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  401382:	7e03      	ldrb	r3, [r0, #24]
  401384:	f013 0f01 	tst.w	r3, #1
  401388:	d105      	bne.n	401396 <timer_process_counted+0x1e>
  40138a:	7e03      	ldrb	r3, [r0, #24]
  40138c:	f013 0f02 	tst.w	r3, #2
  401390:	d101      	bne.n	401396 <timer_process_counted+0x1e>
  401392:	4605      	mov	r5, r0
  401394:	e009      	b.n	4013aa <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  401396:	7e03      	ldrb	r3, [r0, #24]
  401398:	f043 0302 	orr.w	r3, r3, #2
  40139c:	7603      	strb	r3, [r0, #24]
		return;
  40139e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4013a0:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  4013a2:	68e3      	ldr	r3, [r4, #12]
  4013a4:	4620      	mov	r0, r4
  4013a6:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  4013a8:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  4013aa:	b19c      	cbz	r4, 4013d4 <timer_process_counted+0x5c>
  4013ac:	6863      	ldr	r3, [r4, #4]
  4013ae:	1af3      	subs	r3, r6, r3
  4013b0:	68a2      	ldr	r2, [r4, #8]
  4013b2:	4293      	cmp	r3, r2
  4013b4:	d30e      	bcc.n	4013d4 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  4013b6:	f105 0714 	add.w	r7, r5, #20
  4013ba:	4638      	mov	r0, r7
  4013bc:	4b06      	ldr	r3, [pc, #24]	; (4013d8 <timer_process_counted+0x60>)
  4013be:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  4013c0:	7c23      	ldrb	r3, [r4, #16]
  4013c2:	2b01      	cmp	r3, #1
  4013c4:	d1ec      	bne.n	4013a0 <timer_process_counted+0x28>
			tmp->time_label = time;
  4013c6:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  4013c8:	4632      	mov	r2, r6
  4013ca:	4621      	mov	r1, r4
  4013cc:	4638      	mov	r0, r7
  4013ce:	4b03      	ldr	r3, [pc, #12]	; (4013dc <timer_process_counted+0x64>)
  4013d0:	4798      	blx	r3
  4013d2:	e7e5      	b.n	4013a0 <timer_process_counted+0x28>
  4013d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4013d6:	bf00      	nop
  4013d8:	004015ed 	.word	0x004015ed
  4013dc:	00401329 	.word	0x00401329

004013e0 <timer_init>:
{
  4013e0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4013e2:	4604      	mov	r4, r0
  4013e4:	460d      	mov	r5, r1
  4013e6:	2800      	cmp	r0, #0
  4013e8:	bf18      	it	ne
  4013ea:	2900      	cmpne	r1, #0
  4013ec:	bf14      	ite	ne
  4013ee:	2001      	movne	r0, #1
  4013f0:	2000      	moveq	r0, #0
  4013f2:	223b      	movs	r2, #59	; 0x3b
  4013f4:	4905      	ldr	r1, [pc, #20]	; (40140c <timer_init+0x2c>)
  4013f6:	4b06      	ldr	r3, [pc, #24]	; (401410 <timer_init+0x30>)
  4013f8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  4013fa:	4629      	mov	r1, r5
  4013fc:	4620      	mov	r0, r4
  4013fe:	4b05      	ldr	r3, [pc, #20]	; (401414 <timer_init+0x34>)
  401400:	4798      	blx	r3
	descr->time                           = 0;
  401402:	2000      	movs	r0, #0
  401404:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  401406:	4b04      	ldr	r3, [pc, #16]	; (401418 <timer_init+0x38>)
  401408:	6023      	str	r3, [r4, #0]
}
  40140a:	bd38      	pop	{r3, r4, r5, pc}
  40140c:	00405a98 	.word	0x00405a98
  401410:	0040159d 	.word	0x0040159d
  401414:	004021b1 	.word	0x004021b1
  401418:	00401379 	.word	0x00401379

0040141c <timer_start>:
{
  40141c:	b510      	push	{r4, lr}
	ASSERT(descr);
  40141e:	4604      	mov	r4, r0
  401420:	2253      	movs	r2, #83	; 0x53
  401422:	4909      	ldr	r1, [pc, #36]	; (401448 <timer_start+0x2c>)
  401424:	3000      	adds	r0, #0
  401426:	bf18      	it	ne
  401428:	2001      	movne	r0, #1
  40142a:	4b08      	ldr	r3, [pc, #32]	; (40144c <timer_start+0x30>)
  40142c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  40142e:	4620      	mov	r0, r4
  401430:	4b07      	ldr	r3, [pc, #28]	; (401450 <timer_start+0x34>)
  401432:	4798      	blx	r3
  401434:	b920      	cbnz	r0, 401440 <timer_start+0x24>
	_timer_start(&descr->device);
  401436:	4620      	mov	r0, r4
  401438:	4b06      	ldr	r3, [pc, #24]	; (401454 <timer_start+0x38>)
  40143a:	4798      	blx	r3
	return ERR_NONE;
  40143c:	2000      	movs	r0, #0
  40143e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401440:	f06f 0010 	mvn.w	r0, #16
}
  401444:	bd10      	pop	{r4, pc}
  401446:	bf00      	nop
  401448:	00405a98 	.word	0x00405a98
  40144c:	0040159d 	.word	0x0040159d
  401450:	00402299 	.word	0x00402299
  401454:	0040228d 	.word	0x0040228d

00401458 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40145a:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  40145c:	4605      	mov	r5, r0
  40145e:	460f      	mov	r7, r1
  401460:	2800      	cmp	r0, #0
  401462:	bf18      	it	ne
  401464:	2900      	cmpne	r1, #0
  401466:	d002      	beq.n	40146e <usart_sync_write+0x16>
  401468:	bb0a      	cbnz	r2, 4014ae <usart_sync_write+0x56>
  40146a:	2000      	movs	r0, #0
  40146c:	e000      	b.n	401470 <usart_sync_write+0x18>
  40146e:	2000      	movs	r0, #0
  401470:	22f1      	movs	r2, #241	; 0xf1
  401472:	4910      	ldr	r1, [pc, #64]	; (4014b4 <usart_sync_write+0x5c>)
  401474:	4b10      	ldr	r3, [pc, #64]	; (4014b8 <usart_sync_write+0x60>)
  401476:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  401478:	f105 0408 	add.w	r4, r5, #8
  40147c:	4620      	mov	r0, r4
  40147e:	4b0f      	ldr	r3, [pc, #60]	; (4014bc <usart_sync_write+0x64>)
  401480:	4798      	blx	r3
  401482:	2800      	cmp	r0, #0
  401484:	d0f8      	beq.n	401478 <usart_sync_write+0x20>
  401486:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  401488:	5d79      	ldrb	r1, [r7, r5]
  40148a:	4620      	mov	r0, r4
  40148c:	4b0c      	ldr	r3, [pc, #48]	; (4014c0 <usart_sync_write+0x68>)
  40148e:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  401490:	4620      	mov	r0, r4
  401492:	4b0a      	ldr	r3, [pc, #40]	; (4014bc <usart_sync_write+0x64>)
  401494:	4798      	blx	r3
  401496:	2800      	cmp	r0, #0
  401498:	d0fa      	beq.n	401490 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  40149a:	3501      	adds	r5, #1
  40149c:	42b5      	cmp	r5, r6
  40149e:	d3f3      	bcc.n	401488 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  4014a0:	4620      	mov	r0, r4
  4014a2:	4b08      	ldr	r3, [pc, #32]	; (4014c4 <usart_sync_write+0x6c>)
  4014a4:	4798      	blx	r3
  4014a6:	2800      	cmp	r0, #0
  4014a8:	d0fa      	beq.n	4014a0 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  4014aa:	4628      	mov	r0, r5
  4014ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  4014ae:	2001      	movs	r0, #1
  4014b0:	e7de      	b.n	401470 <usart_sync_write+0x18>
  4014b2:	bf00      	nop
  4014b4:	00405ab0 	.word	0x00405ab0
  4014b8:	0040159d 	.word	0x0040159d
  4014bc:	00402475 	.word	0x00402475
  4014c0:	0040242d 	.word	0x0040242d
  4014c4:	0040249d 	.word	0x0040249d

004014c8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4014c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4014cc:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4014ce:	4605      	mov	r5, r0
  4014d0:	4688      	mov	r8, r1
  4014d2:	2800      	cmp	r0, #0
  4014d4:	bf18      	it	ne
  4014d6:	2900      	cmpne	r1, #0
  4014d8:	d002      	beq.n	4014e0 <usart_sync_read+0x18>
  4014da:	b9d2      	cbnz	r2, 401512 <usart_sync_read+0x4a>
  4014dc:	2000      	movs	r0, #0
  4014de:	e000      	b.n	4014e2 <usart_sync_read+0x1a>
  4014e0:	2000      	movs	r0, #0
  4014e2:	f44f 7286 	mov.w	r2, #268	; 0x10c
  4014e6:	490c      	ldr	r1, [pc, #48]	; (401518 <usart_sync_read+0x50>)
  4014e8:	4b0c      	ldr	r3, [pc, #48]	; (40151c <usart_sync_read+0x54>)
  4014ea:	4798      	blx	r3
	uint32_t                      offset = 0;
  4014ec:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  4014ee:	f105 0408 	add.w	r4, r5, #8
  4014f2:	4620      	mov	r0, r4
  4014f4:	4b0a      	ldr	r3, [pc, #40]	; (401520 <usart_sync_read+0x58>)
  4014f6:	4798      	blx	r3
  4014f8:	2800      	cmp	r0, #0
  4014fa:	d0f8      	beq.n	4014ee <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  4014fc:	4620      	mov	r0, r4
  4014fe:	4b09      	ldr	r3, [pc, #36]	; (401524 <usart_sync_read+0x5c>)
  401500:	4798      	blx	r3
  401502:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  401506:	3601      	adds	r6, #1
  401508:	42be      	cmp	r6, r7
  40150a:	d3f0      	bcc.n	4014ee <usart_sync_read+0x26>

	return (int32_t)offset;
}
  40150c:	4630      	mov	r0, r6
  40150e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  401512:	2001      	movs	r0, #1
  401514:	e7e5      	b.n	4014e2 <usart_sync_read+0x1a>
  401516:	bf00      	nop
  401518:	00405ab0 	.word	0x00405ab0
  40151c:	0040159d 	.word	0x0040159d
  401520:	004024c5 	.word	0x004024c5
  401524:	00402451 	.word	0x00402451

00401528 <usart_sync_init>:
{
  401528:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40152a:	4604      	mov	r4, r0
  40152c:	460d      	mov	r5, r1
  40152e:	2800      	cmp	r0, #0
  401530:	bf18      	it	ne
  401532:	2900      	cmpne	r1, #0
  401534:	bf14      	ite	ne
  401536:	2001      	movne	r0, #1
  401538:	2000      	moveq	r0, #0
  40153a:	2234      	movs	r2, #52	; 0x34
  40153c:	4907      	ldr	r1, [pc, #28]	; (40155c <usart_sync_init+0x34>)
  40153e:	4b08      	ldr	r3, [pc, #32]	; (401560 <usart_sync_init+0x38>)
  401540:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  401542:	4629      	mov	r1, r5
  401544:	f104 0008 	add.w	r0, r4, #8
  401548:	4b06      	ldr	r3, [pc, #24]	; (401564 <usart_sync_init+0x3c>)
  40154a:	4798      	blx	r3
	if (init_status) {
  40154c:	4603      	mov	r3, r0
  40154e:	b918      	cbnz	r0, 401558 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  401550:	4a05      	ldr	r2, [pc, #20]	; (401568 <usart_sync_init+0x40>)
  401552:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  401554:	4a05      	ldr	r2, [pc, #20]	; (40156c <usart_sync_init+0x44>)
  401556:	6022      	str	r2, [r4, #0]
}
  401558:	4618      	mov	r0, r3
  40155a:	bd38      	pop	{r3, r4, r5, pc}
  40155c:	00405ab0 	.word	0x00405ab0
  401560:	0040159d 	.word	0x0040159d
  401564:	004023c1 	.word	0x004023c1
  401568:	004014c9 	.word	0x004014c9
  40156c:	00401459 	.word	0x00401459

00401570 <usart_sync_enable>:
{
  401570:	b510      	push	{r4, lr}
	ASSERT(descr);
  401572:	4604      	mov	r4, r0
  401574:	2253      	movs	r2, #83	; 0x53
  401576:	4906      	ldr	r1, [pc, #24]	; (401590 <usart_sync_enable+0x20>)
  401578:	3000      	adds	r0, #0
  40157a:	bf18      	it	ne
  40157c:	2001      	movne	r0, #1
  40157e:	4b05      	ldr	r3, [pc, #20]	; (401594 <usart_sync_enable+0x24>)
  401580:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  401582:	f104 0008 	add.w	r0, r4, #8
  401586:	4b04      	ldr	r3, [pc, #16]	; (401598 <usart_sync_enable+0x28>)
  401588:	4798      	blx	r3
}
  40158a:	2000      	movs	r0, #0
  40158c:	bd10      	pop	{r4, pc}
  40158e:	bf00      	nop
  401590:	00405ab0 	.word	0x00405ab0
  401594:	0040159d 	.word	0x0040159d
  401598:	004023f9 	.word	0x004023f9

0040159c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  40159c:	b900      	cbnz	r0, 4015a0 <assert+0x4>
		__asm("BKPT #0");
  40159e:	be00      	bkpt	0x0000
  4015a0:	4770      	bx	lr

004015a2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  4015a2:	6803      	ldr	r3, [r0, #0]
  4015a4:	b11b      	cbz	r3, 4015ae <is_list_element+0xc>
		if (it == element) {
  4015a6:	428b      	cmp	r3, r1
  4015a8:	d003      	beq.n	4015b2 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  4015aa:	681b      	ldr	r3, [r3, #0]
  4015ac:	e7fa      	b.n	4015a4 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  4015ae:	2000      	movs	r0, #0
  4015b0:	4770      	bx	lr
			return true;
  4015b2:	2001      	movs	r0, #1
}
  4015b4:	4770      	bx	lr
	...

004015b8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  4015b8:	b538      	push	{r3, r4, r5, lr}
  4015ba:	4604      	mov	r4, r0
  4015bc:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  4015be:	4b06      	ldr	r3, [pc, #24]	; (4015d8 <list_insert_as_head+0x20>)
  4015c0:	4798      	blx	r3
  4015c2:	f080 0001 	eor.w	r0, r0, #1
  4015c6:	2239      	movs	r2, #57	; 0x39
  4015c8:	4904      	ldr	r1, [pc, #16]	; (4015dc <list_insert_as_head+0x24>)
  4015ca:	b2c0      	uxtb	r0, r0
  4015cc:	4b04      	ldr	r3, [pc, #16]	; (4015e0 <list_insert_as_head+0x28>)
  4015ce:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  4015d0:	6823      	ldr	r3, [r4, #0]
  4015d2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  4015d4:	6025      	str	r5, [r4, #0]
  4015d6:	bd38      	pop	{r3, r4, r5, pc}
  4015d8:	004015a3 	.word	0x004015a3
  4015dc:	00405acc 	.word	0x00405acc
  4015e0:	0040159d 	.word	0x0040159d

004015e4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  4015e4:	6803      	ldr	r3, [r0, #0]
  4015e6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  4015e8:	6001      	str	r1, [r0, #0]
  4015ea:	4770      	bx	lr

004015ec <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  4015ec:	6803      	ldr	r3, [r0, #0]
  4015ee:	b11b      	cbz	r3, 4015f8 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  4015f0:	681a      	ldr	r2, [r3, #0]
  4015f2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  4015f4:	4618      	mov	r0, r3
  4015f6:	4770      	bx	lr
	}

	return NULL;
  4015f8:	2000      	movs	r0, #0
}
  4015fa:	4770      	bx	lr

004015fc <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  4015fc:	b570      	push	{r4, r5, r6, lr}
  4015fe:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  401600:	4604      	mov	r4, r0
  401602:	460e      	mov	r6, r1
  401604:	2800      	cmp	r0, #0
  401606:	bf18      	it	ne
  401608:	2900      	cmpne	r1, #0
  40160a:	d002      	beq.n	401612 <ringbuffer_init+0x16>
  40160c:	b97a      	cbnz	r2, 40162e <ringbuffer_init+0x32>
  40160e:	2000      	movs	r0, #0
  401610:	e000      	b.n	401614 <ringbuffer_init+0x18>
  401612:	2000      	movs	r0, #0
  401614:	2228      	movs	r2, #40	; 0x28
  401616:	4908      	ldr	r1, [pc, #32]	; (401638 <ringbuffer_init+0x3c>)
  401618:	4b08      	ldr	r3, [pc, #32]	; (40163c <ringbuffer_init+0x40>)
  40161a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  40161c:	1e6b      	subs	r3, r5, #1
  40161e:	421d      	tst	r5, r3
  401620:	d107      	bne.n	401632 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  401622:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  401624:	2000      	movs	r0, #0
  401626:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  401628:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  40162a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  40162c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  40162e:	2001      	movs	r0, #1
  401630:	e7f0      	b.n	401614 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  401632:	f06f 000c 	mvn.w	r0, #12
}
  401636:	bd70      	pop	{r4, r5, r6, pc}
  401638:	00405aec 	.word	0x00405aec
  40163c:	0040159d 	.word	0x0040159d

00401640 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  401640:	b538      	push	{r3, r4, r5, lr}
  401642:	460d      	mov	r5, r1
	ASSERT(rb);
  401644:	4604      	mov	r4, r0
  401646:	2251      	movs	r2, #81	; 0x51
  401648:	490b      	ldr	r1, [pc, #44]	; (401678 <ringbuffer_put+0x38>)
  40164a:	3000      	adds	r0, #0
  40164c:	bf18      	it	ne
  40164e:	2001      	movne	r0, #1
  401650:	4b0a      	ldr	r3, [pc, #40]	; (40167c <ringbuffer_put+0x3c>)
  401652:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  401654:	6822      	ldr	r2, [r4, #0]
  401656:	68e3      	ldr	r3, [r4, #12]
  401658:	6861      	ldr	r1, [r4, #4]
  40165a:	400b      	ands	r3, r1
  40165c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  40165e:	68e3      	ldr	r3, [r4, #12]
  401660:	68a2      	ldr	r2, [r4, #8]
  401662:	1a9a      	subs	r2, r3, r2
  401664:	6861      	ldr	r1, [r4, #4]
  401666:	428a      	cmp	r2, r1
  401668:	d901      	bls.n	40166e <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  40166a:	1a59      	subs	r1, r3, r1
  40166c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  40166e:	3301      	adds	r3, #1
  401670:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  401672:	2000      	movs	r0, #0
  401674:	bd38      	pop	{r3, r4, r5, pc}
  401676:	bf00      	nop
  401678:	00405aec 	.word	0x00405aec
  40167c:	0040159d 	.word	0x0040159d

00401680 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  401680:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  401682:	4a06      	ldr	r2, [pc, #24]	; (40169c <_sbrk+0x1c>)
  401684:	6812      	ldr	r2, [r2, #0]
  401686:	b122      	cbz	r2, 401692 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401688:	4a04      	ldr	r2, [pc, #16]	; (40169c <_sbrk+0x1c>)
  40168a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  40168c:	4403      	add	r3, r0
  40168e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  401690:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401692:	4903      	ldr	r1, [pc, #12]	; (4016a0 <_sbrk+0x20>)
  401694:	4a01      	ldr	r2, [pc, #4]	; (40169c <_sbrk+0x1c>)
  401696:	6011      	str	r1, [r2, #0]
  401698:	e7f6      	b.n	401688 <_sbrk+0x8>
  40169a:	bf00      	nop
  40169c:	20400338 	.word	0x20400338
  4016a0:	20400cf8 	.word	0x20400cf8

004016a4 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  4016a4:	f04f 30ff 	mov.w	r0, #4294967295
  4016a8:	4770      	bx	lr

004016aa <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  4016aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4016ae:	604b      	str	r3, [r1, #4]

	return 0;
}
  4016b0:	2000      	movs	r0, #0
  4016b2:	4770      	bx	lr

004016b4 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  4016b4:	2001      	movs	r0, #1
  4016b6:	4770      	bx	lr

004016b8 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  4016b8:	2000      	movs	r0, #0
  4016ba:	4770      	bx	lr

004016bc <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  4016bc:	6943      	ldr	r3, [r0, #20]
  4016be:	4a07      	ldr	r2, [pc, #28]	; (4016dc <_afec_get_irq_num+0x20>)
  4016c0:	4293      	cmp	r3, r2
  4016c2:	d005      	beq.n	4016d0 <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  4016c4:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  4016c8:	4293      	cmp	r3, r2
  4016ca:	d103      	bne.n	4016d4 <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  4016cc:	2028      	movs	r0, #40	; 0x28
  4016ce:	4770      	bx	lr
		return AFEC0_IRQn;
  4016d0:	201d      	movs	r0, #29
  4016d2:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  4016d4:	f04f 30ff 	mov.w	r0, #4294967295
}
  4016d8:	4770      	bx	lr
  4016da:	bf00      	nop
  4016dc:	4003c000 	.word	0x4003c000

004016e0 <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  4016e0:	4b06      	ldr	r3, [pc, #24]	; (4016fc <_afec_init_irq_param+0x1c>)
  4016e2:	4298      	cmp	r0, r3
  4016e4:	d003      	beq.n	4016ee <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  4016e6:	4b06      	ldr	r3, [pc, #24]	; (401700 <_afec_init_irq_param+0x20>)
  4016e8:	4298      	cmp	r0, r3
  4016ea:	d003      	beq.n	4016f4 <_afec_init_irq_param+0x14>
  4016ec:	4770      	bx	lr
		_afec0_dev = dev;
  4016ee:	4b05      	ldr	r3, [pc, #20]	; (401704 <_afec_init_irq_param+0x24>)
  4016f0:	6019      	str	r1, [r3, #0]
  4016f2:	e7f8      	b.n	4016e6 <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  4016f4:	4b03      	ldr	r3, [pc, #12]	; (401704 <_afec_init_irq_param+0x24>)
  4016f6:	6059      	str	r1, [r3, #4]
	}
}
  4016f8:	e7f8      	b.n	4016ec <_afec_init_irq_param+0xc>
  4016fa:	bf00      	nop
  4016fc:	4003c000 	.word	0x4003c000
  401700:	40064000 	.word	0x40064000
  401704:	2040033c 	.word	0x2040033c

00401708 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  401708:	2364      	movs	r3, #100	; 0x64
  40170a:	4a1d      	ldr	r2, [pc, #116]	; (401780 <_afec_init+0x78>)
  40170c:	fb03 2301 	mla	r3, r3, r1, r2
  401710:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  401712:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  401714:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  401716:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  401718:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  40171a:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  40171c:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  40171e:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  401720:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  401722:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  401724:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  401726:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  401728:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  40172a:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  40172c:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  40172e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  401732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  401734:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  401738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  40173a:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  40173e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  401740:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  401744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  401746:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  40174a:	2200      	movs	r2, #0
  40174c:	2a0b      	cmp	r2, #11
  40174e:	d814      	bhi.n	40177a <_afec_init+0x72>
{
  401750:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  401752:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  401754:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401758:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40175c:	4413      	add	r3, r2
  40175e:	330c      	adds	r3, #12
  401760:	4c07      	ldr	r4, [pc, #28]	; (401780 <_afec_init+0x78>)
  401762:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  401766:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  401768:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  40176a:	3201      	adds	r2, #1
  40176c:	b2d2      	uxtb	r2, r2
  40176e:	2a0b      	cmp	r2, #11
  401770:	d9ef      	bls.n	401752 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  401772:	2000      	movs	r0, #0
  401774:	f85d 4b04 	ldr.w	r4, [sp], #4
  401778:	4770      	bx	lr
  40177a:	2000      	movs	r0, #0
  40177c:	4770      	bx	lr
  40177e:	bf00      	nop
  401780:	00405b10 	.word	0x00405b10

00401784 <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  401784:	b530      	push	{r4, r5, lr}
  401786:	b083      	sub	sp, #12
  401788:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  40178a:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  40178c:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  40178e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  401790:	400b      	ands	r3, r1
  401792:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  401794:	9b01      	ldr	r3, [sp, #4]
  401796:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  40179a:	d10e      	bne.n	4017ba <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  40179c:	9b01      	ldr	r3, [sp, #4]
  40179e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  4017a2:	d10e      	bne.n	4017c2 <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  4017a4:	9b01      	ldr	r3, [sp, #4]
  4017a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4017aa:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  4017ac:	9c01      	ldr	r4, [sp, #4]
  4017ae:	fab4 f484 	clz	r4, r4
  4017b2:	f1c4 0420 	rsb	r4, r4, #32
  4017b6:	b2e4      	uxtb	r4, r4
	while (cnt) {
  4017b8:	e01f      	b.n	4017fa <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  4017ba:	6803      	ldr	r3, [r0, #0]
  4017bc:	2100      	movs	r1, #0
  4017be:	4798      	blx	r3
  4017c0:	e7ec      	b.n	40179c <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  4017c2:	686b      	ldr	r3, [r5, #4]
  4017c4:	2100      	movs	r1, #0
  4017c6:	4628      	mov	r0, r5
  4017c8:	4798      	blx	r3
  4017ca:	e7eb      	b.n	4017a4 <_afec_interrupt_handler+0x20>
		cnt--;
  4017cc:	3c01      	subs	r4, #1
  4017ce:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  4017d0:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  4017d2:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  4017d4:	68ab      	ldr	r3, [r5, #8]
  4017d6:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  4017d8:	6e92      	ldr	r2, [r2, #104]	; 0x68
  4017da:	b292      	uxth	r2, r2
  4017dc:	4621      	mov	r1, r4
  4017de:	4628      	mov	r0, r5
  4017e0:	4798      	blx	r3
		status &= ~(1 << cnt);
  4017e2:	2301      	movs	r3, #1
  4017e4:	40a3      	lsls	r3, r4
  4017e6:	9c01      	ldr	r4, [sp, #4]
  4017e8:	ea24 0403 	bic.w	r4, r4, r3
  4017ec:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  4017ee:	9c01      	ldr	r4, [sp, #4]
  4017f0:	fab4 f484 	clz	r4, r4
  4017f4:	f1c4 0420 	rsb	r4, r4, #32
  4017f8:	b2e4      	uxtb	r4, r4
	while (cnt) {
  4017fa:	2c00      	cmp	r4, #0
  4017fc:	d1e6      	bne.n	4017cc <_afec_interrupt_handler+0x48>
	}
}
  4017fe:	b003      	add	sp, #12
  401800:	bd30      	pop	{r4, r5, pc}
	...

00401804 <_afec_get_hardware_index>:
{
  401804:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  401806:	4b09      	ldr	r3, [pc, #36]	; (40182c <_afec_get_hardware_index+0x28>)
  401808:	4298      	cmp	r0, r3
  40180a:	d00a      	beq.n	401822 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  40180c:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  401810:	4298      	cmp	r0, r3
  401812:	d008      	beq.n	401826 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  401814:	22a7      	movs	r2, #167	; 0xa7
  401816:	4906      	ldr	r1, [pc, #24]	; (401830 <_afec_get_hardware_index+0x2c>)
  401818:	2000      	movs	r0, #0
  40181a:	4b06      	ldr	r3, [pc, #24]	; (401834 <_afec_get_hardware_index+0x30>)
  40181c:	4798      	blx	r3
	return 0;
  40181e:	2000      	movs	r0, #0
  401820:	bd08      	pop	{r3, pc}
		return 0;
  401822:	2000      	movs	r0, #0
  401824:	bd08      	pop	{r3, pc}
		return 1;
  401826:	2001      	movs	r0, #1
}
  401828:	bd08      	pop	{r3, pc}
  40182a:	bf00      	nop
  40182c:	4003c000 	.word	0x4003c000
  401830:	00405bd8 	.word	0x00405bd8
  401834:	0040159d 	.word	0x0040159d

00401838 <_afec_get_regs>:
{
  401838:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  40183a:	4b09      	ldr	r3, [pc, #36]	; (401860 <_afec_get_regs+0x28>)
  40183c:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  40183e:	2300      	movs	r3, #0
  401840:	2b01      	cmp	r3, #1
  401842:	d809      	bhi.n	401858 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  401844:	2264      	movs	r2, #100	; 0x64
  401846:	fb02 f203 	mul.w	r2, r2, r3
  40184a:	4906      	ldr	r1, [pc, #24]	; (401864 <_afec_get_regs+0x2c>)
  40184c:	5c8a      	ldrb	r2, [r1, r2]
  40184e:	4290      	cmp	r0, r2
  401850:	d003      	beq.n	40185a <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401852:	3301      	adds	r3, #1
  401854:	b2db      	uxtb	r3, r3
  401856:	e7f3      	b.n	401840 <_afec_get_regs+0x8>
	return 0;
  401858:	2300      	movs	r3, #0
}
  40185a:	4618      	mov	r0, r3
  40185c:	bd08      	pop	{r3, pc}
  40185e:	bf00      	nop
  401860:	00401805 	.word	0x00401805
  401864:	00405b10 	.word	0x00405b10

00401868 <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  401868:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  40186a:	4b02      	ldr	r3, [pc, #8]	; (401874 <AFEC0_Handler+0xc>)
  40186c:	6818      	ldr	r0, [r3, #0]
  40186e:	4b02      	ldr	r3, [pc, #8]	; (401878 <AFEC0_Handler+0x10>)
  401870:	4798      	blx	r3
  401872:	bd08      	pop	{r3, pc}
  401874:	2040033c 	.word	0x2040033c
  401878:	00401785 	.word	0x00401785

0040187c <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  40187c:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  40187e:	4b02      	ldr	r3, [pc, #8]	; (401888 <AFEC1_Handler+0xc>)
  401880:	6858      	ldr	r0, [r3, #4]
  401882:	4b02      	ldr	r3, [pc, #8]	; (40188c <AFEC1_Handler+0x10>)
  401884:	4798      	blx	r3
  401886:	bd08      	pop	{r3, pc}
  401888:	2040033c 	.word	0x2040033c
  40188c:	00401785 	.word	0x00401785

00401890 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  401890:	b570      	push	{r4, r5, r6, lr}
  401892:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  401894:	4605      	mov	r5, r0
  401896:	f44f 72a1 	mov.w	r2, #322	; 0x142
  40189a:	4923      	ldr	r1, [pc, #140]	; (401928 <_adc_async_init+0x98>)
  40189c:	3000      	adds	r0, #0
  40189e:	bf18      	it	ne
  4018a0:	2001      	movne	r0, #1
  4018a2:	4b22      	ldr	r3, [pc, #136]	; (40192c <_adc_async_init+0x9c>)
  4018a4:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  4018a6:	4620      	mov	r0, r4
  4018a8:	4b21      	ldr	r3, [pc, #132]	; (401930 <_adc_async_init+0xa0>)
  4018aa:	4798      	blx	r3
  4018ac:	4601      	mov	r1, r0
  4018ae:	4620      	mov	r0, r4
  4018b0:	4b20      	ldr	r3, [pc, #128]	; (401934 <_adc_async_init+0xa4>)
  4018b2:	4798      	blx	r3
	if (init_status) {
  4018b4:	4606      	mov	r6, r0
  4018b6:	b108      	cbz	r0, 4018bc <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  4018b8:	4630      	mov	r0, r6
  4018ba:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  4018bc:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  4018be:	4629      	mov	r1, r5
  4018c0:	4620      	mov	r0, r4
  4018c2:	4b1d      	ldr	r3, [pc, #116]	; (401938 <_adc_async_init+0xa8>)
  4018c4:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  4018c6:	4628      	mov	r0, r5
  4018c8:	4b1c      	ldr	r3, [pc, #112]	; (40193c <_adc_async_init+0xac>)
  4018ca:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  4018cc:	2800      	cmp	r0, #0
  4018ce:	db0d      	blt.n	4018ec <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4018d0:	0943      	lsrs	r3, r0, #5
  4018d2:	f000 001f 	and.w	r0, r0, #31
  4018d6:	2201      	movs	r2, #1
  4018d8:	fa02 f000 	lsl.w	r0, r2, r0
  4018dc:	3320      	adds	r3, #32
  4018de:	4a18      	ldr	r2, [pc, #96]	; (401940 <_adc_async_init+0xb0>)
  4018e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4018e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4018e8:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  4018ec:	4628      	mov	r0, r5
  4018ee:	4b13      	ldr	r3, [pc, #76]	; (40193c <_adc_async_init+0xac>)
  4018f0:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  4018f2:	2800      	cmp	r0, #0
  4018f4:	db09      	blt.n	40190a <_adc_async_init+0x7a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4018f6:	0943      	lsrs	r3, r0, #5
  4018f8:	f000 001f 	and.w	r0, r0, #31
  4018fc:	2201      	movs	r2, #1
  4018fe:	fa02 f000 	lsl.w	r0, r2, r0
  401902:	3360      	adds	r3, #96	; 0x60
  401904:	4a0e      	ldr	r2, [pc, #56]	; (401940 <_adc_async_init+0xb0>)
  401906:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  40190a:	4628      	mov	r0, r5
  40190c:	4b0b      	ldr	r3, [pc, #44]	; (40193c <_adc_async_init+0xac>)
  40190e:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401910:	2800      	cmp	r0, #0
  401912:	dbd1      	blt.n	4018b8 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401914:	0942      	lsrs	r2, r0, #5
  401916:	f000 001f 	and.w	r0, r0, #31
  40191a:	2301      	movs	r3, #1
  40191c:	fa03 f000 	lsl.w	r0, r3, r0
  401920:	4b07      	ldr	r3, [pc, #28]	; (401940 <_adc_async_init+0xb0>)
  401922:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  401926:	e7c7      	b.n	4018b8 <_adc_async_init+0x28>
  401928:	00405bd8 	.word	0x00405bd8
  40192c:	0040159d 	.word	0x0040159d
  401930:	00401839 	.word	0x00401839
  401934:	00401709 	.word	0x00401709
  401938:	004016e1 	.word	0x004016e1
  40193c:	004016bd 	.word	0x004016bd
  401940:	e000e100 	.word	0xe000e100

00401944 <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  401944:	6942      	ldr	r2, [r0, #20]
  401946:	2301      	movs	r3, #1
  401948:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  40194c:	6151      	str	r1, [r2, #20]
  40194e:	4770      	bx	lr

00401950 <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  401950:	2002      	movs	r0, #2
  401952:	4770      	bx	lr

00401954 <_adc_async_convert>:
/**
 * \brief Make conversion
 */
void _adc_async_convert(struct _adc_async_device *const device)
{
	hri_afec_write_CR_reg(device->hw, AFEC_CR_START);
  401954:	6943      	ldr	r3, [r0, #20]
}

static inline void hri_afec_write_CR_reg(const void *const hw, hri_afec_cr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CR = data;
  401956:	2202      	movs	r2, #2
  401958:	601a      	str	r2, [r3, #0]
  40195a:	4770      	bx	lr

0040195c <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  40195c:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401960:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  401964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401968:	fb03 f000 	mul.w	r0, r3, r0
  40196c:	4770      	bx	lr
	...

00401970 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  401970:	b500      	push	{lr}
  401972:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  401974:	a801      	add	r0, sp, #4
  401976:	4b14      	ldr	r3, [pc, #80]	; (4019c8 <_init_chip+0x58>)
  401978:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  40197a:	4a14      	ldr	r2, [pc, #80]	; (4019cc <_init_chip+0x5c>)
  40197c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  401988:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40198c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  401990:	a801      	add	r0, sp, #4
  401992:	4b0f      	ldr	r3, [pc, #60]	; (4019d0 <_init_chip+0x60>)
  401994:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  401996:	4a0f      	ldr	r2, [pc, #60]	; (4019d4 <_init_chip+0x64>)
  401998:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  40199a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  40199e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  4019a2:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4019a4:	4b0c      	ldr	r3, [pc, #48]	; (4019d8 <_init_chip+0x68>)
  4019a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4019aa:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  4019ae:	d104      	bne.n	4019ba <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4019b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4019b4:	4b08      	ldr	r3, [pc, #32]	; (4019d8 <_init_chip+0x68>)
  4019b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  4019ba:	4b08      	ldr	r3, [pc, #32]	; (4019dc <_init_chip+0x6c>)
  4019bc:	4798      	blx	r3

#endif
	_pmc_init();
  4019be:	4b08      	ldr	r3, [pc, #32]	; (4019e0 <_init_chip+0x70>)
  4019c0:	4798      	blx	r3
}
  4019c2:	b003      	add	sp, #12
  4019c4:	f85d fb04 	ldr.w	pc, [sp], #4
  4019c8:	00401025 	.word	0x00401025
  4019cc:	e000ed00 	.word	0xe000ed00
  4019d0:	00401033 	.word	0x00401033
  4019d4:	400e0c00 	.word	0x400e0c00
  4019d8:	400e0600 	.word	0x400e0600
  4019dc:	004024f1 	.word	0x004024f1
  4019e0:	00401dc5 	.word	0x00401dc5

004019e4 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  4019e4:	b538      	push	{r3, r4, r5, lr}
  4019e6:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  4019e8:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  4019ea:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  4019ec:	f014 0f01 	tst.w	r4, #1
  4019f0:	d11a      	bne.n	401a28 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  4019f2:	f414 7f00 	tst.w	r4, #512	; 0x200
  4019f6:	d11a      	bne.n	401a2e <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  4019f8:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  4019fc:	d11b      	bne.n	401a36 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  4019fe:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  401a02:	d11d      	bne.n	401a40 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  401a04:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  401a08:	d008      	beq.n	401a1c <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401a0a:	68eb      	ldr	r3, [r5, #12]
  401a0c:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  401a0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
  401a10:	f012 0f20 	tst.w	r2, #32
  401a14:	d019      	beq.n	401a4a <_can_irq_handler+0x66>
  401a16:	2102      	movs	r1, #2
  401a18:	4628      	mov	r0, r5
  401a1a:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  401a1c:	f014 0f08 	tst.w	r4, #8
  401a20:	d115      	bne.n	401a4e <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  401a22:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  401a24:	651c      	str	r4, [r3, #80]	; 0x50
  401a26:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  401a28:	6883      	ldr	r3, [r0, #8]
  401a2a:	4798      	blx	r3
  401a2c:	e7e1      	b.n	4019f2 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  401a2e:	686b      	ldr	r3, [r5, #4]
  401a30:	4628      	mov	r0, r5
  401a32:	4798      	blx	r3
  401a34:	e7e0      	b.n	4019f8 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  401a36:	68eb      	ldr	r3, [r5, #12]
  401a38:	2103      	movs	r1, #3
  401a3a:	4628      	mov	r0, r5
  401a3c:	4798      	blx	r3
  401a3e:	e7de      	b.n	4019fe <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  401a40:	68eb      	ldr	r3, [r5, #12]
  401a42:	2100      	movs	r1, #0
  401a44:	4628      	mov	r0, r5
  401a46:	4798      	blx	r3
  401a48:	e7dc      	b.n	401a04 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401a4a:	2101      	movs	r1, #1
  401a4c:	e7e4      	b.n	401a18 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  401a4e:	68eb      	ldr	r3, [r5, #12]
  401a50:	2104      	movs	r1, #4
  401a52:	4628      	mov	r0, r5
  401a54:	4798      	blx	r3
  401a56:	e7e4      	b.n	401a22 <_can_irq_handler+0x3e>

00401a58 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  401a58:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  401a5a:	4b02      	ldr	r3, [pc, #8]	; (401a64 <MCAN1_INT0_Handler+0xc>)
  401a5c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  401a5e:	4b02      	ldr	r3, [pc, #8]	; (401a68 <MCAN1_INT0_Handler+0x10>)
  401a60:	4798      	blx	r3
  401a62:	bd08      	pop	{r3, pc}
  401a64:	20400344 	.word	0x20400344
  401a68:	004019e5 	.word	0x004019e5

00401a6c <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401a6c:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  401a6e:	2500      	movs	r5, #0
  401a70:	428d      	cmp	r5, r1
  401a72:	d210      	bcs.n	401a96 <_ffs+0x2a>
  401a74:	2201      	movs	r2, #1
  401a76:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401a78:	2b1f      	cmp	r3, #31
  401a7a:	d80a      	bhi.n	401a92 <_ffs+0x26>
			if (v[i] & bit) {
  401a7c:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401a80:	4222      	tst	r2, r4
  401a82:	d102      	bne.n	401a8a <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401a84:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401a86:	3301      	adds	r3, #1
  401a88:	e7f6      	b.n	401a78 <_ffs+0xc>
				return i * 32 + j;
  401a8a:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401a8e:	bc30      	pop	{r4, r5}
  401a90:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  401a92:	3501      	adds	r5, #1
  401a94:	e7ec      	b.n	401a70 <_ffs+0x4>
	return -1;
  401a96:	f04f 30ff 	mov.w	r0, #4294967295
  401a9a:	e7f8      	b.n	401a8e <_ffs+0x22>

00401a9c <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401a9c:	b510      	push	{r4, lr}
  401a9e:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401aa0:	2300      	movs	r3, #0
  401aa2:	9301      	str	r3, [sp, #4]
  401aa4:	9302      	str	r3, [sp, #8]
  401aa6:	9303      	str	r3, [sp, #12]
  401aa8:	9304      	str	r3, [sp, #16]
  401aaa:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401aac:	4b21      	ldr	r3, [pc, #132]	; (401b34 <_ext_irq_handler+0x98>)
  401aae:	6818      	ldr	r0, [r3, #0]
  401ab0:	22f8      	movs	r2, #248	; 0xf8
  401ab2:	4921      	ldr	r1, [pc, #132]	; (401b38 <_ext_irq_handler+0x9c>)
  401ab4:	3000      	adds	r0, #0
  401ab6:	bf18      	it	ne
  401ab8:	2001      	movne	r0, #1
  401aba:	4b20      	ldr	r3, [pc, #128]	; (401b3c <_ext_irq_handler+0xa0>)
  401abc:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401abe:	4b20      	ldr	r3, [pc, #128]	; (401b40 <_ext_irq_handler+0xa4>)
  401ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401ac4:	4013      	ands	r3, r2
  401ac6:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401ac8:	491e      	ldr	r1, [pc, #120]	; (401b44 <_ext_irq_handler+0xa8>)
  401aca:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401acc:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401ace:	400a      	ands	r2, r1
  401ad0:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  401ad2:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  401ad4:	e025      	b.n	401b22 <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  401ad6:	4b17      	ldr	r3, [pc, #92]	; (401b34 <_ext_irq_handler+0x98>)
  401ad8:	681b      	ldr	r3, [r3, #0]
  401ada:	4620      	mov	r0, r4
  401adc:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  401ade:	1163      	asrs	r3, r4, #5
  401ae0:	f004 041f 	and.w	r4, r4, #31
  401ae4:	2201      	movs	r2, #1
  401ae6:	fa02 f404 	lsl.w	r4, r2, r4
  401aea:	aa06      	add	r2, sp, #24
  401aec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401af0:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401af4:	ea22 0204 	bic.w	r2, r2, r4
  401af8:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  401afc:	2105      	movs	r1, #5
  401afe:	a801      	add	r0, sp, #4
  401b00:	4b11      	ldr	r3, [pc, #68]	; (401b48 <_ext_irq_handler+0xac>)
  401b02:	4798      	blx	r3
  401b04:	4604      	mov	r4, r0
		while (-1 != pos) {
  401b06:	f1b4 3fff 	cmp.w	r4, #4294967295
  401b0a:	d1e4      	bne.n	401ad6 <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  401b0c:	4a0c      	ldr	r2, [pc, #48]	; (401b40 <_ext_irq_handler+0xa4>)
  401b0e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401b10:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401b12:	400b      	ands	r3, r1
  401b14:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401b16:	490b      	ldr	r1, [pc, #44]	; (401b44 <_ext_irq_handler+0xa8>)
  401b18:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401b1a:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401b1c:	4002      	ands	r2, r0
  401b1e:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  401b20:	4313      	orrs	r3, r2
	while (flag_total) {
  401b22:	b12b      	cbz	r3, 401b30 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  401b24:	2105      	movs	r1, #5
  401b26:	a801      	add	r0, sp, #4
  401b28:	4b07      	ldr	r3, [pc, #28]	; (401b48 <_ext_irq_handler+0xac>)
  401b2a:	4798      	blx	r3
  401b2c:	4604      	mov	r4, r0
		while (-1 != pos) {
  401b2e:	e7ea      	b.n	401b06 <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  401b30:	b006      	add	sp, #24
  401b32:	bd10      	pop	{r4, pc}
  401b34:	20400370 	.word	0x20400370
  401b38:	00405c30 	.word	0x00405c30
  401b3c:	0040159d 	.word	0x0040159d
  401b40:	400e0e00 	.word	0x400e0e00
  401b44:	400e1400 	.word	0x400e1400
  401b48:	00401a6d 	.word	0x00401a6d

00401b4c <_pio_get_hardware_index>:
{
  401b4c:	b510      	push	{r4, lr}
	ASSERT(hw);
  401b4e:	4604      	mov	r4, r0
  401b50:	22d2      	movs	r2, #210	; 0xd2
  401b52:	4905      	ldr	r1, [pc, #20]	; (401b68 <_pio_get_hardware_index+0x1c>)
  401b54:	3000      	adds	r0, #0
  401b56:	bf18      	it	ne
  401b58:	2001      	movne	r0, #1
  401b5a:	4b04      	ldr	r3, [pc, #16]	; (401b6c <_pio_get_hardware_index+0x20>)
  401b5c:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  401b5e:	4804      	ldr	r0, [pc, #16]	; (401b70 <_pio_get_hardware_index+0x24>)
  401b60:	4420      	add	r0, r4
}
  401b62:	f3c0 2047 	ubfx	r0, r0, #9, #8
  401b66:	bd10      	pop	{r4, pc}
  401b68:	00405c30 	.word	0x00405c30
  401b6c:	0040159d 	.word	0x0040159d
  401b70:	bff1f200 	.word	0xbff1f200

00401b74 <_pio_get_index>:
{
  401b74:	b510      	push	{r4, lr}
	ASSERT(hw);
  401b76:	4604      	mov	r4, r0
  401b78:	22e0      	movs	r2, #224	; 0xe0
  401b7a:	490d      	ldr	r1, [pc, #52]	; (401bb0 <_pio_get_index+0x3c>)
  401b7c:	3000      	adds	r0, #0
  401b7e:	bf18      	it	ne
  401b80:	2001      	movne	r0, #1
  401b82:	4b0c      	ldr	r3, [pc, #48]	; (401bb4 <_pio_get_index+0x40>)
  401b84:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  401b86:	4620      	mov	r0, r4
  401b88:	4b0b      	ldr	r3, [pc, #44]	; (401bb8 <_pio_get_index+0x44>)
  401b8a:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401b8c:	2300      	movs	r3, #0
  401b8e:	2b01      	cmp	r3, #1
  401b90:	d80b      	bhi.n	401baa <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  401b92:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  401b96:	008a      	lsls	r2, r1, #2
  401b98:	4908      	ldr	r1, [pc, #32]	; (401bbc <_pio_get_index+0x48>)
  401b9a:	5c8a      	ldrb	r2, [r1, r2]
  401b9c:	4290      	cmp	r0, r2
  401b9e:	d002      	beq.n	401ba6 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401ba0:	3301      	adds	r3, #1
  401ba2:	b2db      	uxtb	r3, r3
  401ba4:	e7f3      	b.n	401b8e <_pio_get_index+0x1a>
			return i;
  401ba6:	b258      	sxtb	r0, r3
  401ba8:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  401baa:	f04f 30ff 	mov.w	r0, #4294967295
}
  401bae:	bd10      	pop	{r4, pc}
  401bb0:	00405c30 	.word	0x00405c30
  401bb4:	0040159d 	.word	0x0040159d
  401bb8:	00401b4d 	.word	0x00401b4d
  401bbc:	00405bf0 	.word	0x00405bf0

00401bc0 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401bc0:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  401bc2:	4604      	mov	r4, r0
  401bc4:	f240 1259 	movw	r2, #345	; 0x159
  401bc8:	4929      	ldr	r1, [pc, #164]	; (401c70 <_pio_init+0xb0>)
  401bca:	3000      	adds	r0, #0
  401bcc:	bf18      	it	ne
  401bce:	2001      	movne	r0, #1
  401bd0:	4b28      	ldr	r3, [pc, #160]	; (401c74 <_pio_init+0xb4>)
  401bd2:	4798      	blx	r3

	i = _pio_get_index(hw);
  401bd4:	4620      	mov	r0, r4
  401bd6:	4b28      	ldr	r3, [pc, #160]	; (401c78 <_pio_init+0xb8>)
  401bd8:	4798      	blx	r3
	if (i < 0) {
  401bda:	2800      	cmp	r0, #0
  401bdc:	db43      	blt.n	401c66 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  401bde:	4d27      	ldr	r5, [pc, #156]	; (401c7c <_pio_init+0xbc>)
  401be0:	00c2      	lsls	r2, r0, #3
  401be2:	1a11      	subs	r1, r2, r0
  401be4:	008b      	lsls	r3, r1, #2
  401be6:	442b      	add	r3, r5
  401be8:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  401bea:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  401bee:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  401bf0:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  401bf4:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  401bf6:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  401bfa:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  401bfc:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  401c00:	1a10      	subs	r0, r2, r0
  401c02:	0083      	lsls	r3, r0, #2
  401c04:	442b      	add	r3, r5
  401c06:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  401c08:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401c0c:	4620      	mov	r0, r4
  401c0e:	4b1c      	ldr	r3, [pc, #112]	; (401c80 <_pio_init+0xc0>)
  401c10:	4798      	blx	r3
  401c12:	4428      	add	r0, r5
  401c14:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  if ((int32_t)(IRQn) >= 0)
  401c18:	2b00      	cmp	r3, #0
  401c1a:	db0c      	blt.n	401c36 <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c1c:	095a      	lsrs	r2, r3, #5
  401c1e:	f003 001f 	and.w	r0, r3, #31
  401c22:	2101      	movs	r1, #1
  401c24:	4081      	lsls	r1, r0
  401c26:	3220      	adds	r2, #32
  401c28:	4816      	ldr	r0, [pc, #88]	; (401c84 <_pio_init+0xc4>)
  401c2a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401c2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401c32:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  401c36:	2b00      	cmp	r3, #0
  401c38:	db08      	blt.n	401c4c <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c3a:	095a      	lsrs	r2, r3, #5
  401c3c:	f003 001f 	and.w	r0, r3, #31
  401c40:	2101      	movs	r1, #1
  401c42:	4081      	lsls	r1, r0
  401c44:	3260      	adds	r2, #96	; 0x60
  401c46:	480f      	ldr	r0, [pc, #60]	; (401c84 <_pio_init+0xc4>)
  401c48:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401c4c:	2b00      	cmp	r3, #0
  401c4e:	db0d      	blt.n	401c6c <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c50:	0959      	lsrs	r1, r3, #5
  401c52:	f003 031f 	and.w	r3, r3, #31
  401c56:	2201      	movs	r2, #1
  401c58:	fa02 f303 	lsl.w	r3, r2, r3
  401c5c:	4a09      	ldr	r2, [pc, #36]	; (401c84 <_pio_init+0xc4>)
  401c5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  401c62:	2000      	movs	r0, #0
  401c64:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  401c66:	f06f 0010 	mvn.w	r0, #16
  401c6a:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401c6c:	2000      	movs	r0, #0
}
  401c6e:	bd38      	pop	{r3, r4, r5, pc}
  401c70:	00405c30 	.word	0x00405c30
  401c74:	0040159d 	.word	0x0040159d
  401c78:	00401b75 	.word	0x00401b75
  401c7c:	00405bf0 	.word	0x00405bf0
  401c80:	00401b4d 	.word	0x00401b4d
  401c84:	e000e100 	.word	0xe000e100

00401c88 <PIOD_Handler>:
{
  401c88:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401c8a:	4b01      	ldr	r3, [pc, #4]	; (401c90 <PIOD_Handler+0x8>)
  401c8c:	4798      	blx	r3
  401c8e:	bd08      	pop	{r3, pc}
  401c90:	00401a9d 	.word	0x00401a9d

00401c94 <PIOA_Handler>:
{
  401c94:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401c96:	4b01      	ldr	r3, [pc, #4]	; (401c9c <PIOA_Handler+0x8>)
  401c98:	4798      	blx	r3
  401c9a:	bd08      	pop	{r3, pc}
  401c9c:	00401a9d 	.word	0x00401a9d

00401ca0 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401ca0:	b538      	push	{r3, r4, r5, lr}
  401ca2:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401ca4:	4804      	ldr	r0, [pc, #16]	; (401cb8 <_ext_irq_init+0x18>)
  401ca6:	4c05      	ldr	r4, [pc, #20]	; (401cbc <_ext_irq_init+0x1c>)
  401ca8:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  401caa:	4805      	ldr	r0, [pc, #20]	; (401cc0 <_ext_irq_init+0x20>)
  401cac:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401cae:	4b05      	ldr	r3, [pc, #20]	; (401cc4 <_ext_irq_init+0x24>)
  401cb0:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401cb2:	2000      	movs	r0, #0
  401cb4:	bd38      	pop	{r3, r4, r5, pc}
  401cb6:	bf00      	nop
  401cb8:	400e0e00 	.word	0x400e0e00
  401cbc:	00401bc1 	.word	0x00401bc1
  401cc0:	400e1400 	.word	0x400e1400
  401cc4:	20400370 	.word	0x20400370

00401cc8 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  401cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ccc:	4604      	mov	r4, r0
  401cce:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  401cd0:	f8df 8050 	ldr.w	r8, [pc, #80]	; 401d24 <_ext_irq_enable+0x5c>
  401cd4:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
  401cd8:	4641      	mov	r1, r8
  401cda:	289f      	cmp	r0, #159	; 0x9f
  401cdc:	bf8c      	ite	hi
  401cde:	2000      	movhi	r0, #0
  401ce0:	2001      	movls	r0, #1
  401ce2:	4e0e      	ldr	r6, [pc, #56]	; (401d1c <_ext_irq_enable+0x54>)
  401ce4:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  401ce6:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  401ce8:	22c3      	movs	r2, #195	; 0xc3
  401cea:	4641      	mov	r1, r8
  401cec:	2d9f      	cmp	r5, #159	; 0x9f
  401cee:	bf8c      	ite	hi
  401cf0:	2000      	movhi	r0, #0
  401cf2:	2001      	movls	r0, #1
  401cf4:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  401cf6:	096d      	lsrs	r5, r5, #5
  401cf8:	4b09      	ldr	r3, [pc, #36]	; (401d20 <_ext_irq_enable+0x58>)
  401cfa:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  401cfe:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  401d02:	b937      	cbnz	r7, 401d12 <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  401d04:	2301      	movs	r3, #1
  401d06:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  401d0a:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  401d0c:	2000      	movs	r0, #0
  401d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  401d12:	2301      	movs	r3, #1
  401d14:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  401d18:	642c      	str	r4, [r5, #64]	; 0x40
  401d1a:	e7f7      	b.n	401d0c <_ext_irq_enable+0x44>
  401d1c:	0040159d 	.word	0x0040159d
  401d20:	400e0e00 	.word	0x400e0e00
  401d24:	00405c30 	.word	0x00405c30

00401d28 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  401d28:	490e      	ldr	r1, [pc, #56]	; (401d64 <_pmc_init_sources+0x3c>)
  401d2a:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401d2c:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  401d30:	4b0d      	ldr	r3, [pc, #52]	; (401d68 <_pmc_init_sources+0x40>)
  401d32:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401d34:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  401d36:	4b0b      	ldr	r3, [pc, #44]	; (401d64 <_pmc_init_sources+0x3c>)
  401d38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  401d3a:	f013 0f01 	tst.w	r3, #1
  401d3e:	d0fa      	beq.n	401d36 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  401d40:	4b08      	ldr	r3, [pc, #32]	; (401d64 <_pmc_init_sources+0x3c>)
  401d42:	6a19      	ldr	r1, [r3, #32]
  401d44:	4a09      	ldr	r2, [pc, #36]	; (401d6c <_pmc_init_sources+0x44>)
  401d46:	430a      	orrs	r2, r1
  401d48:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  401d4a:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  401d4c:	4a08      	ldr	r2, [pc, #32]	; (401d70 <_pmc_init_sources+0x48>)
  401d4e:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  401d50:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  401d52:	4a08      	ldr	r2, [pc, #32]	; (401d74 <_pmc_init_sources+0x4c>)
  401d54:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  401d56:	4b03      	ldr	r3, [pc, #12]	; (401d64 <_pmc_init_sources+0x3c>)
  401d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  401d5a:	f013 0f02 	tst.w	r3, #2
  401d5e:	d0fa      	beq.n	401d56 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  401d60:	4770      	bx	lr
  401d62:	bf00      	nop
  401d64:	400e0600 	.word	0x400e0600
  401d68:	00373e01 	.word	0x00373e01
  401d6c:	01370000 	.word	0x01370000
  401d70:	f800ffff 	.word	0xf800ffff
  401d74:	20183f01 	.word	0x20183f01

00401d78 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401d78:	4a11      	ldr	r2, [pc, #68]	; (401dc0 <_pmc_init_master_clock+0x48>)
  401d7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  401d80:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401d82:	4b0f      	ldr	r3, [pc, #60]	; (401dc0 <_pmc_init_master_clock+0x48>)
  401d84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401d86:	f013 0f08 	tst.w	r3, #8
  401d8a:	d0fa      	beq.n	401d82 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401d8c:	4a0c      	ldr	r2, [pc, #48]	; (401dc0 <_pmc_init_master_clock+0x48>)
  401d8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  401d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401d98:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401d9a:	4b09      	ldr	r3, [pc, #36]	; (401dc0 <_pmc_init_master_clock+0x48>)
  401d9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401d9e:	f013 0f08 	tst.w	r3, #8
  401da2:	d0fa      	beq.n	401d9a <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401da4:	4a06      	ldr	r2, [pc, #24]	; (401dc0 <_pmc_init_master_clock+0x48>)
  401da6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401da8:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401dac:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401db0:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401db2:	4b03      	ldr	r3, [pc, #12]	; (401dc0 <_pmc_init_master_clock+0x48>)
  401db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401db6:	f013 0f08 	tst.w	r3, #8
  401dba:	d0fa      	beq.n	401db2 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401dbc:	4770      	bx	lr
  401dbe:	bf00      	nop
  401dc0:	400e0600 	.word	0x400e0600

00401dc4 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401dc4:	b508      	push	{r3, lr}
	_pmc_init_sources();
  401dc6:	4b02      	ldr	r3, [pc, #8]	; (401dd0 <_pmc_init+0xc>)
  401dc8:	4798      	blx	r3
	_pmc_init_master_clock();
  401dca:	4b02      	ldr	r3, [pc, #8]	; (401dd4 <_pmc_init+0x10>)
  401dcc:	4798      	blx	r3
  401dce:	bd08      	pop	{r3, pc}
  401dd0:	00401d29 	.word	0x00401d29
  401dd4:	00401d79 	.word	0x00401d79

00401dd8 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401dd8:	2300      	movs	r3, #0
  401dda:	2b01      	cmp	r3, #1
  401ddc:	d80f      	bhi.n	401dfe <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  401dde:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  401de2:	008a      	lsls	r2, r1, #2
  401de4:	4907      	ldr	r1, [pc, #28]	; (401e04 <_pwm_get_cfg+0x2c>)
  401de6:	588a      	ldr	r2, [r1, r2]
  401de8:	4282      	cmp	r2, r0
  401dea:	d002      	beq.n	401df2 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401dec:	3301      	adds	r3, #1
  401dee:	b2db      	uxtb	r3, r3
  401df0:	e7f3      	b.n	401dda <_pwm_get_cfg+0x2>
			return (_pwms + i);
  401df2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  401df6:	009a      	lsls	r2, r3, #2
  401df8:	4608      	mov	r0, r1
  401dfa:	4410      	add	r0, r2
  401dfc:	4770      	bx	lr
		}
	}

	return NULL;
  401dfe:	2000      	movs	r0, #0
}
  401e00:	4770      	bx	lr
  401e02:	bf00      	nop
  401e04:	00405c4c 	.word	0x00405c4c

00401e08 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  401e08:	4b06      	ldr	r3, [pc, #24]	; (401e24 <_pwm_init_irq_param+0x1c>)
  401e0a:	4298      	cmp	r0, r3
  401e0c:	d003      	beq.n	401e16 <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  401e0e:	4b06      	ldr	r3, [pc, #24]	; (401e28 <_pwm_init_irq_param+0x20>)
  401e10:	4298      	cmp	r0, r3
  401e12:	d003      	beq.n	401e1c <_pwm_init_irq_param+0x14>
  401e14:	4770      	bx	lr
		_pwm0_dev = dev;
  401e16:	4b05      	ldr	r3, [pc, #20]	; (401e2c <_pwm_init_irq_param+0x24>)
  401e18:	6019      	str	r1, [r3, #0]
  401e1a:	e7f8      	b.n	401e0e <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  401e1c:	4b03      	ldr	r3, [pc, #12]	; (401e2c <_pwm_init_irq_param+0x24>)
  401e1e:	6059      	str	r1, [r3, #4]
	}
}
  401e20:	e7f8      	b.n	401e14 <_pwm_init_irq_param+0xc>
  401e22:	bf00      	nop
  401e24:	40020000 	.word	0x40020000
  401e28:	4005c000 	.word	0x4005c000
  401e2c:	20400374 	.word	0x20400374

00401e30 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  401e30:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  401e32:	6903      	ldr	r3, [r0, #16]
	return ((Pwm *)hw)->PWM_ISR1;
  401e34:	69db      	ldr	r3, [r3, #28]
  401e36:	b113      	cbz	r3, 401e3e <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  401e38:	6803      	ldr	r3, [r0, #0]
  401e3a:	b103      	cbz	r3, 401e3e <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  401e3c:	4798      	blx	r3
  401e3e:	bd08      	pop	{r3, pc}

00401e40 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  401e40:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  401e42:	4b02      	ldr	r3, [pc, #8]	; (401e4c <PWM0_Handler+0xc>)
  401e44:	6818      	ldr	r0, [r3, #0]
  401e46:	4b02      	ldr	r3, [pc, #8]	; (401e50 <PWM0_Handler+0x10>)
  401e48:	4798      	blx	r3
  401e4a:	bd08      	pop	{r3, pc}
  401e4c:	20400374 	.word	0x20400374
  401e50:	00401e31 	.word	0x00401e31

00401e54 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  401e54:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  401e56:	4b02      	ldr	r3, [pc, #8]	; (401e60 <PWM1_Handler+0xc>)
  401e58:	6858      	ldr	r0, [r3, #4]
  401e5a:	4b02      	ldr	r3, [pc, #8]	; (401e64 <PWM1_Handler+0x10>)
  401e5c:	4798      	blx	r3
  401e5e:	bd08      	pop	{r3, pc}
  401e60:	20400374 	.word	0x20400374
  401e64:	00401e31 	.word	0x00401e31

00401e68 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  401e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e6a:	4606      	mov	r6, r0
	ASSERT(hw);
  401e6c:	460c      	mov	r4, r1
  401e6e:	1c08      	adds	r0, r1, #0
  401e70:	bf18      	it	ne
  401e72:	2001      	movne	r0, #1
  401e74:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  401e78:	4944      	ldr	r1, [pc, #272]	; (401f8c <_pwm_init+0x124>)
  401e7a:	4b45      	ldr	r3, [pc, #276]	; (401f90 <_pwm_init+0x128>)
  401e7c:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  401e7e:	4620      	mov	r0, r4
  401e80:	4b44      	ldr	r3, [pc, #272]	; (401f94 <_pwm_init+0x12c>)
  401e82:	4798      	blx	r3
  401e84:	4605      	mov	r5, r0

	device->hw = hw;
  401e86:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  401e88:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  401e8a:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  401e8c:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  401e8e:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  401e90:	6903      	ldr	r3, [r0, #16]
  401e92:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  401e96:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  401e98:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  401e9a:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  401e9c:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  401e9e:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  401ea0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  401ea4:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  401ea6:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  401ea8:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  401eaa:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  401eae:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  401eb0:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  401eb4:	2300      	movs	r3, #0
  401eb6:	e019      	b.n	401eec <_pwm_init+0x84>
		ch = cfg->ch + i;
  401eb8:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  401eba:	0118      	lsls	r0, r3, #4
  401ebc:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  401ec0:	5c3a      	ldrb	r2, [r7, r0]
  401ec2:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  401ec6:	3210      	adds	r2, #16
  401ec8:	0152      	lsls	r2, r2, #5
  401eca:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  401ecc:	5c3a      	ldrb	r2, [r7, r0]
  401ece:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  401ed2:	3210      	adds	r2, #16
  401ed4:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401ed8:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  401eda:	5c3a      	ldrb	r2, [r7, r0]
  401edc:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  401ee0:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401ee4:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  401ee8:	3301      	adds	r3, #1
  401eea:	b25b      	sxtb	r3, r3
  401eec:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401eee:	4293      	cmp	r3, r2
  401ef0:	d3e2      	bcc.n	401eb8 <_pwm_init+0x50>
  401ef2:	2300      	movs	r3, #0
  401ef4:	e014      	b.n	401f20 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  401ef6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  401ef8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  401efc:	0082      	lsls	r2, r0, #2
  401efe:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  401f02:	5c88      	ldrb	r0, [r1, r2]
  401f04:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  401f08:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  401f0c:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  401f10:	5c8a      	ldrb	r2, [r1, r2]
  401f12:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  401f16:	3213      	adds	r2, #19
  401f18:	0112      	lsls	r2, r2, #4
  401f1a:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  401f1c:	3301      	adds	r3, #1
  401f1e:	b25b      	sxtb	r3, r3
  401f20:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  401f22:	4293      	cmp	r3, r2
  401f24:	d3e7      	bcc.n	401ef6 <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  401f26:	4631      	mov	r1, r6
  401f28:	4620      	mov	r0, r4
  401f2a:	4b1b      	ldr	r3, [pc, #108]	; (401f98 <_pwm_init+0x130>)
  401f2c:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  401f2e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401f32:	2b00      	cmp	r3, #0
  401f34:	db0d      	blt.n	401f52 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401f36:	095a      	lsrs	r2, r3, #5
  401f38:	f003 031f 	and.w	r3, r3, #31
  401f3c:	2101      	movs	r1, #1
  401f3e:	fa01 f303 	lsl.w	r3, r1, r3
  401f42:	3220      	adds	r2, #32
  401f44:	4915      	ldr	r1, [pc, #84]	; (401f9c <_pwm_init+0x134>)
  401f46:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401f4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401f4e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  401f52:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401f56:	2b00      	cmp	r3, #0
  401f58:	db09      	blt.n	401f6e <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401f5a:	095a      	lsrs	r2, r3, #5
  401f5c:	f003 031f 	and.w	r3, r3, #31
  401f60:	2101      	movs	r1, #1
  401f62:	fa01 f303 	lsl.w	r3, r1, r3
  401f66:	3260      	adds	r2, #96	; 0x60
  401f68:	490c      	ldr	r1, [pc, #48]	; (401f9c <_pwm_init+0x134>)
  401f6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  401f6e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401f72:	2b00      	cmp	r3, #0
  401f74:	db08      	blt.n	401f88 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401f76:	0959      	lsrs	r1, r3, #5
  401f78:	f003 031f 	and.w	r3, r3, #31
  401f7c:	2201      	movs	r2, #1
  401f7e:	fa02 f303 	lsl.w	r3, r2, r3
  401f82:	4a06      	ldr	r2, [pc, #24]	; (401f9c <_pwm_init+0x134>)
  401f84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  401f88:	2000      	movs	r0, #0
  401f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401f8c:	00405cf4 	.word	0x00405cf4
  401f90:	0040159d 	.word	0x0040159d
  401f94:	00401dd9 	.word	0x00401dd9
  401f98:	00401e09 	.word	0x00401e09
  401f9c:	e000e100 	.word	0xe000e100

00401fa0 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  401fa0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  401fa2:	4604      	mov	r4, r0
  401fa4:	f240 12b5 	movw	r2, #437	; 0x1b5
  401fa8:	490b      	ldr	r1, [pc, #44]	; (401fd8 <_pwm_enable+0x38>)
  401faa:	3000      	adds	r0, #0
  401fac:	bf18      	it	ne
  401fae:	2001      	movne	r0, #1
  401fb0:	4b0a      	ldr	r3, [pc, #40]	; (401fdc <_pwm_enable+0x3c>)
  401fb2:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  401fb4:	6920      	ldr	r0, [r4, #16]
  401fb6:	4b0a      	ldr	r3, [pc, #40]	; (401fe0 <_pwm_enable+0x40>)
  401fb8:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401fba:	2300      	movs	r3, #0
  401fbc:	e008      	b.n	401fd0 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  401fbe:	6921      	ldr	r1, [r4, #16]
  401fc0:	6b05      	ldr	r5, [r0, #48]	; 0x30
  401fc2:	011a      	lsls	r2, r3, #4
  401fc4:	5cad      	ldrb	r5, [r5, r2]
  401fc6:	2201      	movs	r2, #1
  401fc8:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  401fca:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  401fcc:	3301      	adds	r3, #1
  401fce:	b25b      	sxtb	r3, r3
  401fd0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401fd2:	4293      	cmp	r3, r2
  401fd4:	d3f3      	bcc.n	401fbe <_pwm_enable+0x1e>
	}
}
  401fd6:	bd38      	pop	{r3, r4, r5, pc}
  401fd8:	00405cf4 	.word	0x00405cf4
  401fdc:	0040159d 	.word	0x0040159d
  401fe0:	00401dd9 	.word	0x00401dd9

00401fe4 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  401fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401fe6:	460d      	mov	r5, r1
  401fe8:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  401fea:	4604      	mov	r4, r0
  401fec:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  401ff0:	4911      	ldr	r1, [pc, #68]	; (402038 <_pwm_set_param+0x54>)
  401ff2:	2800      	cmp	r0, #0
  401ff4:	bf18      	it	ne
  401ff6:	42ae      	cmpne	r6, r5
  401ff8:	bf34      	ite	cc
  401ffa:	2001      	movcc	r0, #1
  401ffc:	2000      	movcs	r0, #0
  401ffe:	4b0f      	ldr	r3, [pc, #60]	; (40203c <_pwm_set_param+0x58>)
  402000:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  402002:	6920      	ldr	r0, [r4, #16]
  402004:	4b0e      	ldr	r3, [pc, #56]	; (402040 <_pwm_set_param+0x5c>)
  402006:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  402008:	2300      	movs	r3, #0
  40200a:	e010      	b.n	40202e <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  40200c:	6922      	ldr	r2, [r4, #16]
  40200e:	6b07      	ldr	r7, [r0, #48]	; 0x30
  402010:	0119      	lsls	r1, r3, #4
  402012:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  402014:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  402018:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  40201c:	6922      	ldr	r2, [r4, #16]
  40201e:	6b07      	ldr	r7, [r0, #48]	; 0x30
  402020:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  402022:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  402026:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  40202a:	3301      	adds	r3, #1
  40202c:	b2db      	uxtb	r3, r3
  40202e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402030:	4293      	cmp	r3, r2
  402032:	d3eb      	bcc.n	40200c <_pwm_set_param+0x28>
	}
}
  402034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402036:	bf00      	nop
  402038:	00405cf4 	.word	0x00405cf4
  40203c:	0040159d 	.word	0x0040159d
  402040:	00401dd9 	.word	0x00401dd9

00402044 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  402044:	b510      	push	{r4, lr}
	ASSERT(device);
  402046:	4604      	mov	r4, r0
  402048:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  40204c:	4907      	ldr	r1, [pc, #28]	; (40206c <_pwm_is_enabled+0x28>)
  40204e:	3000      	adds	r0, #0
  402050:	bf18      	it	ne
  402052:	2001      	movne	r0, #1
  402054:	4b06      	ldr	r3, [pc, #24]	; (402070 <_pwm_is_enabled+0x2c>)
  402056:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  402058:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  40205a:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  40205c:	f013 0f0f 	tst.w	r3, #15
  402060:	d001      	beq.n	402066 <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  402062:	2001      	movs	r0, #1
	}
}
  402064:	bd10      	pop	{r4, pc}
		return false;
  402066:	2000      	movs	r0, #0
  402068:	bd10      	pop	{r4, pc}
  40206a:	bf00      	nop
  40206c:	00405cf4 	.word	0x00405cf4
  402070:	0040159d 	.word	0x0040159d

00402074 <_pwm_set_irq_state>:

	return hri_pwm_read_CDTY_reg(device->hw, cfg->ch[0].index);
}

void _pwm_set_irq_state(struct _pwm_device *const device, const enum _pwm_callback_type type, const bool disable)
{
  402074:	b538      	push	{r3, r4, r5, lr}
  402076:	460d      	mov	r5, r1
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device);
  402078:	4604      	mov	r4, r0
  40207a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40207e:	4912      	ldr	r1, [pc, #72]	; (4020c8 <_pwm_set_irq_state+0x54>)
  402080:	3000      	adds	r0, #0
  402082:	bf18      	it	ne
  402084:	2001      	movne	r0, #1
  402086:	4b11      	ldr	r3, [pc, #68]	; (4020cc <_pwm_set_irq_state+0x58>)
  402088:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  40208a:	6920      	ldr	r0, [r4, #16]
  40208c:	4b10      	ldr	r3, [pc, #64]	; (4020d0 <_pwm_set_irq_state+0x5c>)
  40208e:	4798      	blx	r3

	if (PWM_DEVICE_PERIOD_CB == type) {
  402090:	b18d      	cbz	r5, 4020b6 <_pwm_set_irq_state+0x42>
		for (i = 0; i < cfg->ch_num; i++) {
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
		}
	} else if (PWM_DEVICE_ERROR_CB == type) {
  402092:	2d01      	cmp	r5, #1
  402094:	d011      	beq.n	4020ba <_pwm_set_irq_state+0x46>
  402096:	bd38      	pop	{r3, r4, r5, pc}
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
  402098:	6921      	ldr	r1, [r4, #16]
  40209a:	6b05      	ldr	r5, [r0, #48]	; 0x30
  40209c:	0113      	lsls	r3, r2, #4
  40209e:	5ced      	ldrb	r5, [r5, r3]
  4020a0:	2301      	movs	r3, #1
  4020a2:	40ab      	lsls	r3, r5
	((Pwm *)hw)->PWM_IER1 = data;
  4020a4:	610b      	str	r3, [r1, #16]
	((Pwm *)hw)->PWM_IDR1 = ~data;
  4020a6:	43db      	mvns	r3, r3
  4020a8:	614b      	str	r3, [r1, #20]
		for (i = 0; i < cfg->ch_num; i++) {
  4020aa:	3201      	adds	r2, #1
  4020ac:	b2d2      	uxtb	r2, r2
  4020ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  4020b0:	429a      	cmp	r2, r3
  4020b2:	d3f1      	bcc.n	402098 <_pwm_set_irq_state+0x24>
  4020b4:	bd38      	pop	{r3, r4, r5, pc}
  4020b6:	2200      	movs	r2, #0
  4020b8:	e7f9      	b.n	4020ae <_pwm_set_irq_state+0x3a>
		ASSERT(false);
  4020ba:	f240 2209 	movw	r2, #521	; 0x209
  4020be:	4902      	ldr	r1, [pc, #8]	; (4020c8 <_pwm_set_irq_state+0x54>)
  4020c0:	2000      	movs	r0, #0
  4020c2:	4b02      	ldr	r3, [pc, #8]	; (4020cc <_pwm_set_irq_state+0x58>)
  4020c4:	4798      	blx	r3
	}
}
  4020c6:	e7e6      	b.n	402096 <_pwm_set_irq_state+0x22>
  4020c8:	00405cf4 	.word	0x00405cf4
  4020cc:	0040159d 	.word	0x0040159d
  4020d0:	00401dd9 	.word	0x00401dd9

004020d4 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  4020d4:	2000      	movs	r0, #0
  4020d6:	4770      	bx	lr

004020d8 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  4020d8:	4b03      	ldr	r3, [pc, #12]	; (4020e8 <_system_time_init+0x10>)
  4020da:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4020de:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  4020e0:	2205      	movs	r2, #5
  4020e2:	601a      	str	r2, [r3, #0]
  4020e4:	4770      	bx	lr
  4020e6:	bf00      	nop
  4020e8:	e000e010 	.word	0xe000e010

004020ec <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  4020ec:	b508      	push	{r3, lr}
	_system_time_init(hw);
  4020ee:	4b01      	ldr	r3, [pc, #4]	; (4020f4 <_delay_init+0x8>)
  4020f0:	4798      	blx	r3
  4020f2:	bd08      	pop	{r3, pc}
  4020f4:	004020d9 	.word	0x004020d9

004020f8 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  4020f8:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  4020fa:	e00d      	b.n	402118 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  4020fc:	4b0d      	ldr	r3, [pc, #52]	; (402134 <_delay_cycles+0x3c>)
  4020fe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  402102:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  402104:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  402106:	4b0b      	ldr	r3, [pc, #44]	; (402134 <_delay_cycles+0x3c>)
  402108:	681b      	ldr	r3, [r3, #0]
  40210a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40210e:	d0fa      	beq.n	402106 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  402110:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  402114:	3101      	adds	r1, #1
	while (n--) {
  402116:	4610      	mov	r0, r2
  402118:	1e43      	subs	r3, r0, #1
  40211a:	b2da      	uxtb	r2, r3
  40211c:	2800      	cmp	r0, #0
  40211e:	d1ed      	bne.n	4020fc <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  402120:	4b04      	ldr	r3, [pc, #16]	; (402134 <_delay_cycles+0x3c>)
  402122:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  402124:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  402126:	4b03      	ldr	r3, [pc, #12]	; (402134 <_delay_cycles+0x3c>)
  402128:	681b      	ldr	r3, [r3, #0]
  40212a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40212e:	d0fa      	beq.n	402126 <_delay_cycles+0x2e>
		;
}
  402130:	4770      	bx	lr
  402132:	bf00      	nop
  402134:	e000e010 	.word	0xe000e010

00402138 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  402138:	2300      	movs	r3, #0
  40213a:	2b01      	cmp	r3, #1
  40213c:	d815      	bhi.n	40216a <get_cfg+0x32>
{
  40213e:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  402140:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  402144:	008a      	lsls	r2, r1, #2
  402146:	490a      	ldr	r1, [pc, #40]	; (402170 <get_cfg+0x38>)
  402148:	588a      	ldr	r2, [r1, r2]
  40214a:	4282      	cmp	r2, r0
  40214c:	d007      	beq.n	40215e <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  40214e:	3301      	adds	r3, #1
  402150:	b2db      	uxtb	r3, r3
  402152:	2b01      	cmp	r3, #1
  402154:	d9f4      	bls.n	402140 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  402156:	2000      	movs	r0, #0
}
  402158:	f85d 4b04 	ldr.w	r4, [sp], #4
  40215c:	4770      	bx	lr
			return &(_tcs[i]);
  40215e:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  402162:	00a3      	lsls	r3, r4, #2
  402164:	4608      	mov	r0, r1
  402166:	4418      	add	r0, r3
  402168:	e7f6      	b.n	402158 <get_cfg+0x20>
	return NULL;
  40216a:	2000      	movs	r0, #0
  40216c:	4770      	bx	lr
  40216e:	bf00      	nop
  402170:	20400000 	.word	0x20400000

00402174 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  402174:	4b06      	ldr	r3, [pc, #24]	; (402190 <_tc_init_irq_param+0x1c>)
  402176:	4298      	cmp	r0, r3
  402178:	d003      	beq.n	402182 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  40217a:	4b06      	ldr	r3, [pc, #24]	; (402194 <_tc_init_irq_param+0x20>)
  40217c:	4298      	cmp	r0, r3
  40217e:	d003      	beq.n	402188 <_tc_init_irq_param+0x14>
  402180:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  402182:	4b05      	ldr	r3, [pc, #20]	; (402198 <_tc_init_irq_param+0x24>)
  402184:	6019      	str	r1, [r3, #0]
  402186:	e7f8      	b.n	40217a <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  402188:	4b03      	ldr	r3, [pc, #12]	; (402198 <_tc_init_irq_param+0x24>)
  40218a:	6059      	str	r1, [r3, #4]
	}
}
  40218c:	e7f8      	b.n	402180 <_tc_init_irq_param+0xc>
  40218e:	bf00      	nop
  402190:	4000c000 	.word	0x4000c000
  402194:	40054000 	.word	0x40054000
  402198:	20400394 	.word	0x20400394

0040219c <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  40219c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  40219e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  4021a0:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  4021a2:	f013 0f10 	tst.w	r3, #16
  4021a6:	d100      	bne.n	4021aa <tc_interrupt_handler+0xe>
  4021a8:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  4021aa:	6803      	ldr	r3, [r0, #0]
  4021ac:	4798      	blx	r3
	}
}
  4021ae:	e7fb      	b.n	4021a8 <tc_interrupt_handler+0xc>

004021b0 <_timer_init>:
{
  4021b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4021b4:	4606      	mov	r6, r0
  4021b6:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  4021b8:	4608      	mov	r0, r1
  4021ba:	4b2f      	ldr	r3, [pc, #188]	; (402278 <_timer_init+0xc8>)
  4021bc:	4798      	blx	r3
  4021be:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  4021c0:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  4021c4:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  4021c8:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  4021ca:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  4021ce:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  4021d0:	22c3      	movs	r2, #195	; 0xc3
  4021d2:	492a      	ldr	r1, [pc, #168]	; (40227c <_timer_init+0xcc>)
  4021d4:	2001      	movs	r0, #1
  4021d6:	4b2a      	ldr	r3, [pc, #168]	; (402280 <_timer_init+0xd0>)
  4021d8:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  4021da:	f248 0307 	movw	r3, #32775	; 0x8007
  4021de:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4021e0:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4021e4:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4021e8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4021ec:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4021ee:	2300      	movs	r3, #0
  4021f0:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  4021f2:	f248 020f 	movw	r2, #32783	; 0x800f
  4021f6:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4021f8:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4021fc:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  402200:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  402204:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  402206:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  402208:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  40220a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  40220e:	4631      	mov	r1, r6
  402210:	4620      	mov	r0, r4
  402212:	4b1c      	ldr	r3, [pc, #112]	; (402284 <_timer_init+0xd4>)
  402214:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  402216:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40221a:	2b00      	cmp	r3, #0
  40221c:	db0d      	blt.n	40223a <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40221e:	095a      	lsrs	r2, r3, #5
  402220:	f003 031f 	and.w	r3, r3, #31
  402224:	2101      	movs	r1, #1
  402226:	fa01 f303 	lsl.w	r3, r1, r3
  40222a:	3220      	adds	r2, #32
  40222c:	4916      	ldr	r1, [pc, #88]	; (402288 <_timer_init+0xd8>)
  40222e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402232:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402236:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  40223a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40223e:	2b00      	cmp	r3, #0
  402240:	db09      	blt.n	402256 <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402242:	095a      	lsrs	r2, r3, #5
  402244:	f003 031f 	and.w	r3, r3, #31
  402248:	2101      	movs	r1, #1
  40224a:	fa01 f303 	lsl.w	r3, r1, r3
  40224e:	3260      	adds	r2, #96	; 0x60
  402250:	490d      	ldr	r1, [pc, #52]	; (402288 <_timer_init+0xd8>)
  402252:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  402256:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40225a:	2b00      	cmp	r3, #0
  40225c:	db08      	blt.n	402270 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40225e:	0959      	lsrs	r1, r3, #5
  402260:	f003 031f 	and.w	r3, r3, #31
  402264:	2201      	movs	r2, #1
  402266:	fa02 f303 	lsl.w	r3, r2, r3
  40226a:	4a07      	ldr	r2, [pc, #28]	; (402288 <_timer_init+0xd8>)
  40226c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  402270:	2000      	movs	r0, #0
  402272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402276:	bf00      	nop
  402278:	00402139 	.word	0x00402139
  40227c:	00405d0c 	.word	0x00405d0c
  402280:	0040159d 	.word	0x0040159d
  402284:	00402175 	.word	0x00402175
  402288:	e000e100 	.word	0xe000e100

0040228c <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  40228c:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  40228e:	2305      	movs	r3, #5
  402290:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402292:	68c2      	ldr	r2, [r0, #12]
  402294:	6413      	str	r3, [r2, #64]	; 0x40
  402296:	4770      	bx	lr

00402298 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  402298:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  40229a:	6a13      	ldr	r3, [r2, #32]
  40229c:	f3c3 4300 	ubfx	r3, r3, #16, #1
  4022a0:	6e10      	ldr	r0, [r2, #96]	; 0x60
  4022a2:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  4022a6:	4318      	orrs	r0, r3
  4022a8:	4770      	bx	lr

004022aa <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  4022aa:	2000      	movs	r0, #0
  4022ac:	4770      	bx	lr
	...

004022b0 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  4022b0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  4022b2:	4b02      	ldr	r3, [pc, #8]	; (4022bc <TC0_Handler+0xc>)
  4022b4:	6818      	ldr	r0, [r3, #0]
  4022b6:	4b02      	ldr	r3, [pc, #8]	; (4022c0 <TC0_Handler+0x10>)
  4022b8:	4798      	blx	r3
  4022ba:	bd08      	pop	{r3, pc}
  4022bc:	20400394 	.word	0x20400394
  4022c0:	0040219d 	.word	0x0040219d

004022c4 <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  4022c4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  4022c6:	4b02      	ldr	r3, [pc, #8]	; (4022d0 <TC9_Handler+0xc>)
  4022c8:	6858      	ldr	r0, [r3, #4]
  4022ca:	4b02      	ldr	r3, [pc, #8]	; (4022d4 <TC9_Handler+0x10>)
  4022cc:	4798      	blx	r3
  4022ce:	bd08      	pop	{r3, pc}
  4022d0:	20400394 	.word	0x20400394
  4022d4:	0040219d 	.word	0x0040219d

004022d8 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  4022d8:	b510      	push	{r4, lr}
	ASSERT(hw);
  4022da:	4604      	mov	r4, r0
  4022dc:	f240 222b 	movw	r2, #555	; 0x22b
  4022e0:	4905      	ldr	r1, [pc, #20]	; (4022f8 <_usart_get_hardware_index+0x20>)
  4022e2:	3000      	adds	r0, #0
  4022e4:	bf18      	it	ne
  4022e6:	2001      	movne	r0, #1
  4022e8:	4b04      	ldr	r3, [pc, #16]	; (4022fc <_usart_get_hardware_index+0x24>)
  4022ea:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  4022ec:	4804      	ldr	r0, [pc, #16]	; (402300 <_usart_get_hardware_index+0x28>)
  4022ee:	4420      	add	r0, r4
}
  4022f0:	f3c0 3087 	ubfx	r0, r0, #14, #8
  4022f4:	bd10      	pop	{r4, pc}
  4022f6:	bf00      	nop
  4022f8:	00405d2c 	.word	0x00405d2c
  4022fc:	0040159d 	.word	0x0040159d
  402300:	bffdc000 	.word	0xbffdc000

00402304 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  402304:	b510      	push	{r4, lr}
	ASSERT(hw);
  402306:	4604      	mov	r4, r0
  402308:	f240 2287 	movw	r2, #647	; 0x287
  40230c:	490e      	ldr	r1, [pc, #56]	; (402348 <_get_usart_index+0x44>)
  40230e:	3000      	adds	r0, #0
  402310:	bf18      	it	ne
  402312:	2001      	movne	r0, #1
  402314:	4b0d      	ldr	r3, [pc, #52]	; (40234c <_get_usart_index+0x48>)
  402316:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  402318:	4620      	mov	r0, r4
  40231a:	4b0d      	ldr	r3, [pc, #52]	; (402350 <_get_usart_index+0x4c>)
  40231c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40231e:	2300      	movs	r3, #0
  402320:	b143      	cbz	r3, 402334 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  402322:	f240 2291 	movw	r2, #657	; 0x291
  402326:	4908      	ldr	r1, [pc, #32]	; (402348 <_get_usart_index+0x44>)
  402328:	2000      	movs	r0, #0
  40232a:	4b08      	ldr	r3, [pc, #32]	; (40234c <_get_usart_index+0x48>)
  40232c:	4798      	blx	r3
	return 0;
  40232e:	2300      	movs	r3, #0
}
  402330:	4618      	mov	r0, r3
  402332:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  402334:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402338:	008a      	lsls	r2, r1, #2
  40233a:	4906      	ldr	r1, [pc, #24]	; (402354 <_get_usart_index+0x50>)
  40233c:	5c8a      	ldrb	r2, [r1, r2]
  40233e:	4290      	cmp	r0, r2
  402340:	d0f6      	beq.n	402330 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  402342:	3301      	adds	r3, #1
  402344:	b2db      	uxtb	r3, r3
  402346:	e7eb      	b.n	402320 <_get_usart_index+0x1c>
  402348:	00405d2c 	.word	0x00405d2c
  40234c:	0040159d 	.word	0x0040159d
  402350:	004022d9 	.word	0x004022d9
  402354:	00405d20 	.word	0x00405d20

00402358 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  402358:	b510      	push	{r4, lr}
	ASSERT(hw);
  40235a:	4604      	mov	r4, r0
  40235c:	f240 229e 	movw	r2, #670	; 0x29e
  402360:	4911      	ldr	r1, [pc, #68]	; (4023a8 <_usart_init+0x50>)
  402362:	3000      	adds	r0, #0
  402364:	bf18      	it	ne
  402366:	2001      	movne	r0, #1
  402368:	4b10      	ldr	r3, [pc, #64]	; (4023ac <_usart_init+0x54>)
  40236a:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  40236c:	4620      	mov	r0, r4
  40236e:	4b10      	ldr	r3, [pc, #64]	; (4023b0 <_usart_init+0x58>)
  402370:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  402372:	4b10      	ldr	r3, [pc, #64]	; (4023b4 <_usart_init+0x5c>)
  402374:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  402378:	2300      	movs	r3, #0
  40237a:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  40237c:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  40237e:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  402380:	22ac      	movs	r2, #172	; 0xac
  402382:	6022      	str	r2, [r4, #0]
  402384:	f44f 7280 	mov.w	r2, #256	; 0x100
  402388:	6022      	str	r2, [r4, #0]
  40238a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40238e:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  402390:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  402394:	0081      	lsls	r1, r0, #2
  402396:	4a08      	ldr	r2, [pc, #32]	; (4023b8 <_usart_init+0x60>)
  402398:	440a      	add	r2, r1
  40239a:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  40239c:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  40239e:	4a07      	ldr	r2, [pc, #28]	; (4023bc <_usart_init+0x64>)
  4023a0:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  4023a2:	4618      	mov	r0, r3
  4023a4:	bd10      	pop	{r4, pc}
  4023a6:	bf00      	nop
  4023a8:	00405d2c 	.word	0x00405d2c
  4023ac:	0040159d 	.word	0x0040159d
  4023b0:	00402305 	.word	0x00402305
  4023b4:	55534100 	.word	0x55534100
  4023b8:	00405d20 	.word	0x00405d20
  4023bc:	000100f4 	.word	0x000100f4

004023c0 <_usart_sync_init>:
{
  4023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4023c2:	460c      	mov	r4, r1
	ASSERT(device);
  4023c4:	4e09      	ldr	r6, [pc, #36]	; (4023ec <_usart_sync_init+0x2c>)
  4023c6:	4607      	mov	r7, r0
  4023c8:	22bd      	movs	r2, #189	; 0xbd
  4023ca:	4631      	mov	r1, r6
  4023cc:	3000      	adds	r0, #0
  4023ce:	bf18      	it	ne
  4023d0:	2001      	movne	r0, #1
  4023d2:	4d07      	ldr	r5, [pc, #28]	; (4023f0 <_usart_sync_init+0x30>)
  4023d4:	47a8      	blx	r5
	ASSERT(hw);
  4023d6:	22be      	movs	r2, #190	; 0xbe
  4023d8:	4631      	mov	r1, r6
  4023da:	1c20      	adds	r0, r4, #0
  4023dc:	bf18      	it	ne
  4023de:	2001      	movne	r0, #1
  4023e0:	47a8      	blx	r5
	device->hw = hw;
  4023e2:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  4023e4:	4620      	mov	r0, r4
  4023e6:	4b03      	ldr	r3, [pc, #12]	; (4023f4 <_usart_sync_init+0x34>)
  4023e8:	4798      	blx	r3
}
  4023ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4023ec:	00405d2c 	.word	0x00405d2c
  4023f0:	0040159d 	.word	0x0040159d
  4023f4:	00402359 	.word	0x00402359

004023f8 <_usart_sync_enable>:
{
  4023f8:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4023fa:	4e0a      	ldr	r6, [pc, #40]	; (402424 <_usart_sync_enable+0x2c>)
  4023fc:	4604      	mov	r4, r0
  4023fe:	f240 1205 	movw	r2, #261	; 0x105
  402402:	4631      	mov	r1, r6
  402404:	3000      	adds	r0, #0
  402406:	bf18      	it	ne
  402408:	2001      	movne	r0, #1
  40240a:	4d07      	ldr	r5, [pc, #28]	; (402428 <_usart_sync_enable+0x30>)
  40240c:	47a8      	blx	r5
	_usart_enable(device->hw);
  40240e:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  402410:	f240 22c7 	movw	r2, #711	; 0x2c7
  402414:	4631      	mov	r1, r6
  402416:	1c20      	adds	r0, r4, #0
  402418:	bf18      	it	ne
  40241a:	2001      	movne	r0, #1
  40241c:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  40241e:	2350      	movs	r3, #80	; 0x50
  402420:	6023      	str	r3, [r4, #0]
  402422:	bd70      	pop	{r4, r5, r6, pc}
  402424:	00405d2c 	.word	0x00405d2c
  402428:	0040159d 	.word	0x0040159d

0040242c <_usart_sync_write_byte>:
{
  40242c:	b538      	push	{r3, r4, r5, lr}
  40242e:	460c      	mov	r4, r1
	ASSERT(device);
  402430:	4605      	mov	r5, r0
  402432:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  402436:	4904      	ldr	r1, [pc, #16]	; (402448 <_usart_sync_write_byte+0x1c>)
  402438:	3000      	adds	r0, #0
  40243a:	bf18      	it	ne
  40243c:	2001      	movne	r0, #1
  40243e:	4b03      	ldr	r3, [pc, #12]	; (40244c <_usart_sync_write_byte+0x20>)
  402440:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  402442:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  402444:	61dc      	str	r4, [r3, #28]
  402446:	bd38      	pop	{r3, r4, r5, pc}
  402448:	00405d2c 	.word	0x00405d2c
  40244c:	0040159d 	.word	0x0040159d

00402450 <_usart_sync_read_byte>:
{
  402450:	b510      	push	{r4, lr}
	ASSERT(device);
  402452:	4604      	mov	r4, r0
  402454:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  402458:	4904      	ldr	r1, [pc, #16]	; (40246c <_usart_sync_read_byte+0x1c>)
  40245a:	3000      	adds	r0, #0
  40245c:	bf18      	it	ne
  40245e:	2001      	movne	r0, #1
  402460:	4b03      	ldr	r3, [pc, #12]	; (402470 <_usart_sync_read_byte+0x20>)
  402462:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  402464:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  402466:	6998      	ldr	r0, [r3, #24]
}
  402468:	b2c0      	uxtb	r0, r0
  40246a:	bd10      	pop	{r4, pc}
  40246c:	00405d2c 	.word	0x00405d2c
  402470:	0040159d 	.word	0x0040159d

00402474 <_usart_sync_is_ready_to_send>:
{
  402474:	b510      	push	{r4, lr}
	ASSERT(device);
  402476:	4604      	mov	r4, r0
  402478:	f240 12c3 	movw	r2, #451	; 0x1c3
  40247c:	4905      	ldr	r1, [pc, #20]	; (402494 <_usart_sync_is_ready_to_send+0x20>)
  40247e:	3000      	adds	r0, #0
  402480:	bf18      	it	ne
  402482:	2001      	movne	r0, #1
  402484:	4b04      	ldr	r3, [pc, #16]	; (402498 <_usart_sync_is_ready_to_send+0x24>)
  402486:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  402488:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  40248a:	6958      	ldr	r0, [r3, #20]
}
  40248c:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402490:	bd10      	pop	{r4, pc}
  402492:	bf00      	nop
  402494:	00405d2c 	.word	0x00405d2c
  402498:	0040159d 	.word	0x0040159d

0040249c <_usart_sync_is_transmit_done>:
{
  40249c:	b510      	push	{r4, lr}
	ASSERT(device);
  40249e:	4604      	mov	r4, r0
  4024a0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  4024a4:	4905      	ldr	r1, [pc, #20]	; (4024bc <_usart_sync_is_transmit_done+0x20>)
  4024a6:	3000      	adds	r0, #0
  4024a8:	bf18      	it	ne
  4024aa:	2001      	movne	r0, #1
  4024ac:	4b04      	ldr	r3, [pc, #16]	; (4024c0 <_usart_sync_is_transmit_done+0x24>)
  4024ae:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  4024b0:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  4024b2:	6958      	ldr	r0, [r3, #20]
}
  4024b4:	f3c0 2040 	ubfx	r0, r0, #9, #1
  4024b8:	bd10      	pop	{r4, pc}
  4024ba:	bf00      	nop
  4024bc:	00405d2c 	.word	0x00405d2c
  4024c0:	0040159d 	.word	0x0040159d

004024c4 <_usart_sync_is_byte_received>:
{
  4024c4:	b510      	push	{r4, lr}
	ASSERT(device);
  4024c6:	4604      	mov	r4, r0
  4024c8:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4024cc:	4905      	ldr	r1, [pc, #20]	; (4024e4 <_usart_sync_is_byte_received+0x20>)
  4024ce:	3000      	adds	r0, #0
  4024d0:	bf18      	it	ne
  4024d2:	2001      	movne	r0, #1
  4024d4:	4b04      	ldr	r3, [pc, #16]	; (4024e8 <_usart_sync_is_byte_received+0x24>)
  4024d6:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  4024d8:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  4024da:	6958      	ldr	r0, [r3, #20]
  4024dc:	f000 0001 	and.w	r0, r0, #1
}
  4024e0:	bd10      	pop	{r4, pc}
  4024e2:	bf00      	nop
  4024e4:	00405d2c 	.word	0x00405d2c
  4024e8:	0040159d 	.word	0x0040159d

004024ec <_usart_get_usart_sync>:
}
  4024ec:	2000      	movs	r0, #0
  4024ee:	4770      	bx	lr

004024f0 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  4024f0:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4024f2:	2300      	movs	r3, #0
  4024f4:	e004      	b.n	402500 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  4024f6:	0199      	lsls	r1, r3, #6
  4024f8:	4a16      	ldr	r2, [pc, #88]	; (402554 <_dma_init+0x64>)
  4024fa:	5852      	ldr	r2, [r2, r1]
  4024fc:	3301      	adds	r3, #1
  4024fe:	b2db      	uxtb	r3, r3
  402500:	2b17      	cmp	r3, #23
  402502:	d9f8      	bls.n	4024f6 <_dma_init+0x6>
  402504:	2300      	movs	r3, #0
  402506:	e014      	b.n	402532 <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  402508:	4c13      	ldr	r4, [pc, #76]	; (402558 <_dma_init+0x68>)
  40250a:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  40250e:	2100      	movs	r1, #0
  402510:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  402512:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  402514:	1c98      	adds	r0, r3, #2
  402516:	0180      	lsls	r0, r0, #6
  402518:	1825      	adds	r5, r4, r0
  40251a:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  40251c:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  40251e:	490f      	ldr	r1, [pc, #60]	; (40255c <_dma_init+0x6c>)
  402520:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  402524:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  402526:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40252a:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  40252c:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  40252e:	3301      	adds	r3, #1
  402530:	b2db      	uxtb	r3, r3
  402532:	2b17      	cmp	r3, #23
  402534:	d9e8      	bls.n	402508 <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402536:	4b0a      	ldr	r3, [pc, #40]	; (402560 <_dma_init+0x70>)
  402538:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40253c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  402540:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402544:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402548:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40254c:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  40254e:	2000      	movs	r0, #0
  402550:	bc30      	pop	{r4, r5}
  402552:	4770      	bx	lr
  402554:	4007805c 	.word	0x4007805c
  402558:	40078000 	.word	0x40078000
  40255c:	00405d48 	.word	0x00405d48
  402560:	e000e100 	.word	0xe000e100

00402564 <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  402564:	0180      	lsls	r0, r0, #6
  402566:	4b02      	ldr	r3, [pc, #8]	; (402570 <_dma_set_destination_address+0xc>)
  402568:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  40256a:	2000      	movs	r0, #0
  40256c:	4770      	bx	lr
  40256e:	bf00      	nop
  402570:	40078064 	.word	0x40078064

00402574 <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  402574:	0180      	lsls	r0, r0, #6
  402576:	4b02      	ldr	r3, [pc, #8]	; (402580 <_dma_set_source_address+0xc>)
  402578:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  40257a:	2000      	movs	r0, #0
  40257c:	4770      	bx	lr
  40257e:	bf00      	nop
  402580:	40078060 	.word	0x40078060

00402584 <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  402584:	0180      	lsls	r0, r0, #6
  402586:	4a04      	ldr	r2, [pc, #16]	; (402598 <_dma_set_data_amount+0x14>)
  402588:	4402      	add	r2, r0
  40258a:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  40258c:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  402590:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  402592:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  402594:	2000      	movs	r0, #0
  402596:	4770      	bx	lr
  402598:	40078000 	.word	0x40078000

0040259c <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  40259c:	2301      	movs	r3, #1
  40259e:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  4025a2:	4b03      	ldr	r3, [pc, #12]	; (4025b0 <_dma_enable_transaction+0x14>)
  4025a4:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  4025a6:	b101      	cbz	r1, 4025aa <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  4025a8:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  4025aa:	2000      	movs	r0, #0
  4025ac:	4770      	bx	lr
  4025ae:	bf00      	nop
  4025b0:	40078000 	.word	0x40078000

004025b4 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  4025b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4025b8:	008a      	lsls	r2, r1, #2
  4025ba:	4b02      	ldr	r3, [pc, #8]	; (4025c4 <_dma_get_channel_resource+0x10>)
  4025bc:	4413      	add	r3, r2
  4025be:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  4025c0:	2000      	movs	r0, #0
  4025c2:	4770      	bx	lr
  4025c4:	2040039c 	.word	0x2040039c

004025c8 <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  4025c8:	b19a      	cbz	r2, 4025f2 <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  4025ca:	b951      	cbnz	r1, 4025e2 <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  4025cc:	0182      	lsls	r2, r0, #6
  4025ce:	4b13      	ldr	r3, [pc, #76]	; (40261c <_dma_set_irq_state+0x54>)
  4025d0:	4413      	add	r3, r2
  4025d2:	2201      	movs	r2, #1
  4025d4:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  4025d6:	2301      	movs	r3, #1
  4025d8:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  4025dc:	4b0f      	ldr	r3, [pc, #60]	; (40261c <_dma_set_irq_state+0x54>)
  4025de:	60d8      	str	r0, [r3, #12]
  4025e0:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4025e2:	2901      	cmp	r1, #1
  4025e4:	d1f7      	bne.n	4025d6 <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  4025e6:	0182      	lsls	r2, r0, #6
  4025e8:	4b0c      	ldr	r3, [pc, #48]	; (40261c <_dma_set_irq_state+0x54>)
  4025ea:	4413      	add	r3, r2
  4025ec:	2270      	movs	r2, #112	; 0x70
  4025ee:	651a      	str	r2, [r3, #80]	; 0x50
  4025f0:	e7f1      	b.n	4025d6 <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  4025f2:	b951      	cbnz	r1, 40260a <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4025f4:	0182      	lsls	r2, r0, #6
  4025f6:	4b09      	ldr	r3, [pc, #36]	; (40261c <_dma_set_irq_state+0x54>)
  4025f8:	4413      	add	r3, r2
  4025fa:	2201      	movs	r2, #1
  4025fc:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  4025fe:	2301      	movs	r3, #1
  402600:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  402604:	4b05      	ldr	r3, [pc, #20]	; (40261c <_dma_set_irq_state+0x54>)
  402606:	6118      	str	r0, [r3, #16]
  402608:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  40260a:	2901      	cmp	r1, #1
  40260c:	d1f7      	bne.n	4025fe <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  40260e:	0182      	lsls	r2, r0, #6
  402610:	4b02      	ldr	r3, [pc, #8]	; (40261c <_dma_set_irq_state+0x54>)
  402612:	4413      	add	r3, r2
  402614:	2270      	movs	r2, #112	; 0x70
  402616:	655a      	str	r2, [r3, #84]	; 0x54
  402618:	e7f1      	b.n	4025fe <_dma_set_irq_state+0x36>
  40261a:	bf00      	nop
  40261c:	40078000 	.word	0x40078000

00402620 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  402620:	4b17      	ldr	r3, [pc, #92]	; (402680 <XDMAC_Handler+0x60>)
  402622:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  402624:	2300      	movs	r3, #0
  402626:	2b17      	cmp	r3, #23
  402628:	d81b      	bhi.n	402662 <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  40262a:	fa21 f203 	lsr.w	r2, r1, r3
  40262e:	f012 0f01 	tst.w	r2, #1
  402632:	d102      	bne.n	40263a <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  402634:	3301      	adds	r3, #1
  402636:	b2db      	uxtb	r3, r3
  402638:	e7f5      	b.n	402626 <XDMAC_Handler+0x6>
			channel = i;
  40263a:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  40263c:	2b00      	cmp	r3, #0
  40263e:	db1d      	blt.n	40267c <XDMAC_Handler+0x5c>
{
  402640:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  402642:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  402646:	0090      	lsls	r0, r2, #2
  402648:	4a0e      	ldr	r2, [pc, #56]	; (402684 <XDMAC_Handler+0x64>)
  40264a:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  40264c:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  40264e:	0189      	lsls	r1, r1, #6
  402650:	4a0d      	ldr	r2, [pc, #52]	; (402688 <XDMAC_Handler+0x68>)
  402652:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  402654:	f012 0f70 	tst.w	r2, #112	; 0x70
  402658:	d106      	bne.n	402668 <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  40265a:	f012 0f01 	tst.w	r2, #1
  40265e:	d106      	bne.n	40266e <XDMAC_Handler+0x4e>
  402660:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  402662:	f04f 33ff 	mov.w	r3, #4294967295
  402666:	e7e9      	b.n	40263c <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  402668:	6843      	ldr	r3, [r0, #4]
  40266a:	4798      	blx	r3
  40266c:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  40266e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  402672:	00a3      	lsls	r3, r4, #2
  402674:	4a03      	ldr	r2, [pc, #12]	; (402684 <XDMAC_Handler+0x64>)
  402676:	58d3      	ldr	r3, [r2, r3]
  402678:	4798      	blx	r3
  40267a:	e7f1      	b.n	402660 <XDMAC_Handler+0x40>
  40267c:	4770      	bx	lr
  40267e:	bf00      	nop
  402680:	40078000 	.word	0x40078000
  402684:	2040039c 	.word	0x2040039c
  402688:	4007805c 	.word	0x4007805c

0040268c <main>:




int main(void)
{
  40268c:	b580      	push	{r7, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  40268e:	4b1a      	ldr	r3, [pc, #104]	; (4026f8 <main+0x6c>)
  402690:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	/* Additional User initialisation */
	dma_adc_init();
  402692:	4b1a      	ldr	r3, [pc, #104]	; (4026fc <main+0x70>)
  402694:	4798      	blx	r3
	pwm_init_user();
  402696:	4b1a      	ldr	r3, [pc, #104]	; (402700 <main+0x74>)
  402698:	4798      	blx	r3
	encoder_init();
  40269a:	4b1a      	ldr	r3, [pc, #104]	; (402704 <main+0x78>)
  40269c:	4798      	blx	r3
	pos_sens_init();
  40269e:	4b1a      	ldr	r3, [pc, #104]	; (402708 <main+0x7c>)
  4026a0:	4798      	blx	r3
	
	/* Enable all devices */
	pwm_enable_all();
  4026a2:	4b1a      	ldr	r3, [pc, #104]	; (40270c <main+0x80>)
  4026a4:	4798      	blx	r3
	adc_enable_all();
  4026a6:	4b1a      	ldr	r3, [pc, #104]	; (402710 <main+0x84>)
  4026a8:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  4026aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4026ae:	4b19      	ldr	r3, [pc, #100]	; (402714 <main+0x88>)
  4026b0:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);		//enables the DC-DC converter for the HV side
	
	timer_start(&ENCODER_A);
  4026b2:	4819      	ldr	r0, [pc, #100]	; (402718 <main+0x8c>)
  4026b4:	4c19      	ldr	r4, [pc, #100]	; (40271c <main+0x90>)
  4026b6:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  4026b8:	4819      	ldr	r0, [pc, #100]	; (402720 <main+0x94>)
  4026ba:	47a0      	blx	r4
  4026bc:	4f19      	ldr	r7, [pc, #100]	; (402724 <main+0x98>)
  4026be:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
  4026c2:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
  4026c6:	4d18      	ldr	r5, [pc, #96]	; (402728 <main+0x9c>)
  4026c8:	f44f 7680 	mov.w	r6, #256	; 0x100
  4026cc:	632e      	str	r6, [r5, #48]	; 0x30
	/* Replace with your application code */
	while (1) {
		
		gpio_set_pin_level(PIN_GPIO_6,true);
		gpio_set_pin_level(PIN_USER_LED,true);
		delay_ms(500);
  4026ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4026d2:	4c16      	ldr	r4, [pc, #88]	; (40272c <main+0xa0>)
  4026d4:	47a0      	blx	r4
		
		dma_adc_0_enable_for_one_transaction();
  4026d6:	4b16      	ldr	r3, [pc, #88]	; (402730 <main+0xa4>)
  4026d8:	4798      	blx	r3
		dma_adc_1_enable_for_one_transaction();
  4026da:	4b16      	ldr	r3, [pc, #88]	; (402734 <main+0xa8>)
  4026dc:	4798      	blx	r3
		adc_async_start_conversion(&ADC_0);
  4026de:	4816      	ldr	r0, [pc, #88]	; (402738 <main+0xac>)
  4026e0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 402740 <main+0xb4>
  4026e4:	47c8      	blx	r9
		adc_async_start_conversion(&ADC_1);
  4026e6:	4815      	ldr	r0, [pc, #84]	; (40273c <main+0xb0>)
  4026e8:	47c8      	blx	r9
	((Pio *)hw)->PIO_CODR = mask;
  4026ea:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4026ee:	636e      	str	r6, [r5, #52]	; 0x34
		//printf("main - %i %i %i %i %i %i %i %i %i %i %i %i  \n", (int)afec_buf[0],(int)afec_buf[1],(int)afec_buf[2],(int)afec_buf[3],(int)afec_buf[4],(int)afec_buf[5],(int)afec_buf[6],(int)afec_buf[7],(int)afec_buf[8],(int)afec_buf[9],(int)afec_buf[10],(int)afec_buf[11]);
		//AFEC0_Handler
		
		gpio_set_pin_level(PIN_GPIO_6,false);
		gpio_set_pin_level(PIN_USER_LED,false);
		delay_ms(500);
  4026f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4026f4:	47a0      	blx	r4
  4026f6:	e7e1      	b.n	4026bc <main+0x30>
  4026f8:	004001d5 	.word	0x004001d5
  4026fc:	0040059d 	.word	0x0040059d
  402700:	00400719 	.word	0x00400719
  402704:	004001e9 	.word	0x004001e9
  402708:	00400481 	.word	0x00400481
  40270c:	004007d5 	.word	0x004007d5
  402710:	004006c1 	.word	0x004006c1
  402714:	400e0e00 	.word	0x400e0e00
  402718:	204005d0 	.word	0x204005d0
  40271c:	0040141d 	.word	0x0040141d
  402720:	20400520 	.word	0x20400520
  402724:	400e1400 	.word	0x400e1400
  402728:	400e1200 	.word	0x400e1200
  40272c:	00401055 	.word	0x00401055
  402730:	00400669 	.word	0x00400669
  402734:	00400695 	.word	0x00400695
  402738:	204005ec 	.word	0x204005ec
  40273c:	204006c4 	.word	0x204006c4
  402740:	00400ffd 	.word	0x00400ffd

00402744 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  402744:	b958      	cbnz	r0, 40275e <_read+0x1a>
{
  402746:	b508      	push	{r3, lr}
  402748:	460b      	mov	r3, r1
  40274a:	4611      	mov	r1, r2
  40274c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  40274e:	4b05      	ldr	r3, [pc, #20]	; (402764 <_read+0x20>)
  402750:	4798      	blx	r3
	if (n < 0) {
  402752:	2800      	cmp	r0, #0
  402754:	db00      	blt.n	402758 <_read+0x14>
		return -1;
	}

	return n;
}
  402756:	bd08      	pop	{r3, pc}
		return -1;
  402758:	f04f 30ff 	mov.w	r0, #4294967295
  40275c:	bd08      	pop	{r3, pc}
		return -1;
  40275e:	f04f 30ff 	mov.w	r0, #4294967295
  402762:	4770      	bx	lr
  402764:	004027bd 	.word	0x004027bd

00402768 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  402768:	3801      	subs	r0, #1
  40276a:	2802      	cmp	r0, #2
  40276c:	d80b      	bhi.n	402786 <_write+0x1e>
{
  40276e:	b508      	push	{r3, lr}
  402770:	460b      	mov	r3, r1
  402772:	4611      	mov	r1, r2
  402774:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  402776:	4b05      	ldr	r3, [pc, #20]	; (40278c <_write+0x24>)
  402778:	4798      	blx	r3
	if (n < 0) {
  40277a:	2800      	cmp	r0, #0
  40277c:	db00      	blt.n	402780 <_write+0x18>
		return -1;
	}

	return n;
}
  40277e:	bd08      	pop	{r3, pc}
		return -1;
  402780:	f04f 30ff 	mov.w	r0, #4294967295
  402784:	bd08      	pop	{r3, pc}
		return -1;
  402786:	f04f 30ff 	mov.w	r0, #4294967295
  40278a:	4770      	bx	lr
  40278c:	004027e1 	.word	0x004027e1

00402790 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  402790:	b570      	push	{r4, r5, r6, lr}
  402792:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  402794:	4d06      	ldr	r5, [pc, #24]	; (4027b0 <stdio_io_init+0x20>)
  402796:	682b      	ldr	r3, [r5, #0]
  402798:	2100      	movs	r1, #0
  40279a:	6898      	ldr	r0, [r3, #8]
  40279c:	4c05      	ldr	r4, [pc, #20]	; (4027b4 <stdio_io_init+0x24>)
  40279e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4027a0:	682b      	ldr	r3, [r5, #0]
  4027a2:	2100      	movs	r1, #0
  4027a4:	6858      	ldr	r0, [r3, #4]
  4027a6:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  4027a8:	4b03      	ldr	r3, [pc, #12]	; (4027b8 <stdio_io_init+0x28>)
  4027aa:	601e      	str	r6, [r3, #0]
  4027ac:	bd70      	pop	{r4, r5, r6, pc}
  4027ae:	bf00      	nop
  4027b0:	20400048 	.word	0x20400048
  4027b4:	00403a75 	.word	0x00403a75
  4027b8:	204004bc 	.word	0x204004bc

004027bc <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  4027bc:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4027be:	4b06      	ldr	r3, [pc, #24]	; (4027d8 <stdio_io_read+0x1c>)
  4027c0:	681b      	ldr	r3, [r3, #0]
  4027c2:	b133      	cbz	r3, 4027d2 <stdio_io_read+0x16>
  4027c4:	460a      	mov	r2, r1
  4027c6:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  4027c8:	b292      	uxth	r2, r2
  4027ca:	4618      	mov	r0, r3
  4027cc:	4b03      	ldr	r3, [pc, #12]	; (4027dc <stdio_io_read+0x20>)
  4027ce:	4798      	blx	r3
  4027d0:	bd08      	pop	{r3, pc}
		return 0;
  4027d2:	2000      	movs	r0, #0
}
  4027d4:	bd08      	pop	{r3, pc}
  4027d6:	bf00      	nop
  4027d8:	204004bc 	.word	0x204004bc
  4027dc:	004011ed 	.word	0x004011ed

004027e0 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  4027e0:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4027e2:	4b06      	ldr	r3, [pc, #24]	; (4027fc <stdio_io_write+0x1c>)
  4027e4:	681b      	ldr	r3, [r3, #0]
  4027e6:	b133      	cbz	r3, 4027f6 <stdio_io_write+0x16>
  4027e8:	460a      	mov	r2, r1
  4027ea:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  4027ec:	b292      	uxth	r2, r2
  4027ee:	4618      	mov	r0, r3
  4027f0:	4b03      	ldr	r3, [pc, #12]	; (402800 <stdio_io_write+0x20>)
  4027f2:	4798      	blx	r3
  4027f4:	bd08      	pop	{r3, pc}
		return 0;
  4027f6:	2000      	movs	r0, #0
}
  4027f8:	bd08      	pop	{r3, pc}
  4027fa:	bf00      	nop
  4027fc:	204004bc 	.word	0x204004bc
  402800:	004011bd 	.word	0x004011bd

00402804 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  402804:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  402806:	4c04      	ldr	r4, [pc, #16]	; (402818 <stdio_redirect_init+0x14>)
  402808:	4620      	mov	r0, r4
  40280a:	4b04      	ldr	r3, [pc, #16]	; (40281c <stdio_redirect_init+0x18>)
  40280c:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  40280e:	4620      	mov	r0, r4
  402810:	4b03      	ldr	r3, [pc, #12]	; (402820 <stdio_redirect_init+0x1c>)
  402812:	4798      	blx	r3
  402814:	bd10      	pop	{r4, pc}
  402816:	bf00      	nop
  402818:	204005c4 	.word	0x204005c4
  40281c:	00401571 	.word	0x00401571
  402820:	00402791 	.word	0x00402791

00402824 <__aeabi_drsub>:
  402824:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402828:	e002      	b.n	402830 <__adddf3>
  40282a:	bf00      	nop

0040282c <__aeabi_dsub>:
  40282c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402830 <__adddf3>:
  402830:	b530      	push	{r4, r5, lr}
  402832:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402836:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40283a:	ea94 0f05 	teq	r4, r5
  40283e:	bf08      	it	eq
  402840:	ea90 0f02 	teqeq	r0, r2
  402844:	bf1f      	itttt	ne
  402846:	ea54 0c00 	orrsne.w	ip, r4, r0
  40284a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40284e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402852:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402856:	f000 80e2 	beq.w	402a1e <__adddf3+0x1ee>
  40285a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40285e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402862:	bfb8      	it	lt
  402864:	426d      	neglt	r5, r5
  402866:	dd0c      	ble.n	402882 <__adddf3+0x52>
  402868:	442c      	add	r4, r5
  40286a:	ea80 0202 	eor.w	r2, r0, r2
  40286e:	ea81 0303 	eor.w	r3, r1, r3
  402872:	ea82 0000 	eor.w	r0, r2, r0
  402876:	ea83 0101 	eor.w	r1, r3, r1
  40287a:	ea80 0202 	eor.w	r2, r0, r2
  40287e:	ea81 0303 	eor.w	r3, r1, r3
  402882:	2d36      	cmp	r5, #54	; 0x36
  402884:	bf88      	it	hi
  402886:	bd30      	pophi	{r4, r5, pc}
  402888:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40288c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402890:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402894:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402898:	d002      	beq.n	4028a0 <__adddf3+0x70>
  40289a:	4240      	negs	r0, r0
  40289c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4028a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4028a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4028a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4028ac:	d002      	beq.n	4028b4 <__adddf3+0x84>
  4028ae:	4252      	negs	r2, r2
  4028b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4028b4:	ea94 0f05 	teq	r4, r5
  4028b8:	f000 80a7 	beq.w	402a0a <__adddf3+0x1da>
  4028bc:	f1a4 0401 	sub.w	r4, r4, #1
  4028c0:	f1d5 0e20 	rsbs	lr, r5, #32
  4028c4:	db0d      	blt.n	4028e2 <__adddf3+0xb2>
  4028c6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4028ca:	fa22 f205 	lsr.w	r2, r2, r5
  4028ce:	1880      	adds	r0, r0, r2
  4028d0:	f141 0100 	adc.w	r1, r1, #0
  4028d4:	fa03 f20e 	lsl.w	r2, r3, lr
  4028d8:	1880      	adds	r0, r0, r2
  4028da:	fa43 f305 	asr.w	r3, r3, r5
  4028de:	4159      	adcs	r1, r3
  4028e0:	e00e      	b.n	402900 <__adddf3+0xd0>
  4028e2:	f1a5 0520 	sub.w	r5, r5, #32
  4028e6:	f10e 0e20 	add.w	lr, lr, #32
  4028ea:	2a01      	cmp	r2, #1
  4028ec:	fa03 fc0e 	lsl.w	ip, r3, lr
  4028f0:	bf28      	it	cs
  4028f2:	f04c 0c02 	orrcs.w	ip, ip, #2
  4028f6:	fa43 f305 	asr.w	r3, r3, r5
  4028fa:	18c0      	adds	r0, r0, r3
  4028fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402900:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402904:	d507      	bpl.n	402916 <__adddf3+0xe6>
  402906:	f04f 0e00 	mov.w	lr, #0
  40290a:	f1dc 0c00 	rsbs	ip, ip, #0
  40290e:	eb7e 0000 	sbcs.w	r0, lr, r0
  402912:	eb6e 0101 	sbc.w	r1, lr, r1
  402916:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40291a:	d31b      	bcc.n	402954 <__adddf3+0x124>
  40291c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402920:	d30c      	bcc.n	40293c <__adddf3+0x10c>
  402922:	0849      	lsrs	r1, r1, #1
  402924:	ea5f 0030 	movs.w	r0, r0, rrx
  402928:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40292c:	f104 0401 	add.w	r4, r4, #1
  402930:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402934:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402938:	f080 809a 	bcs.w	402a70 <__adddf3+0x240>
  40293c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402940:	bf08      	it	eq
  402942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402946:	f150 0000 	adcs.w	r0, r0, #0
  40294a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40294e:	ea41 0105 	orr.w	r1, r1, r5
  402952:	bd30      	pop	{r4, r5, pc}
  402954:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402958:	4140      	adcs	r0, r0
  40295a:	eb41 0101 	adc.w	r1, r1, r1
  40295e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402962:	f1a4 0401 	sub.w	r4, r4, #1
  402966:	d1e9      	bne.n	40293c <__adddf3+0x10c>
  402968:	f091 0f00 	teq	r1, #0
  40296c:	bf04      	itt	eq
  40296e:	4601      	moveq	r1, r0
  402970:	2000      	moveq	r0, #0
  402972:	fab1 f381 	clz	r3, r1
  402976:	bf08      	it	eq
  402978:	3320      	addeq	r3, #32
  40297a:	f1a3 030b 	sub.w	r3, r3, #11
  40297e:	f1b3 0220 	subs.w	r2, r3, #32
  402982:	da0c      	bge.n	40299e <__adddf3+0x16e>
  402984:	320c      	adds	r2, #12
  402986:	dd08      	ble.n	40299a <__adddf3+0x16a>
  402988:	f102 0c14 	add.w	ip, r2, #20
  40298c:	f1c2 020c 	rsb	r2, r2, #12
  402990:	fa01 f00c 	lsl.w	r0, r1, ip
  402994:	fa21 f102 	lsr.w	r1, r1, r2
  402998:	e00c      	b.n	4029b4 <__adddf3+0x184>
  40299a:	f102 0214 	add.w	r2, r2, #20
  40299e:	bfd8      	it	le
  4029a0:	f1c2 0c20 	rsble	ip, r2, #32
  4029a4:	fa01 f102 	lsl.w	r1, r1, r2
  4029a8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4029ac:	bfdc      	itt	le
  4029ae:	ea41 010c 	orrle.w	r1, r1, ip
  4029b2:	4090      	lslle	r0, r2
  4029b4:	1ae4      	subs	r4, r4, r3
  4029b6:	bfa2      	ittt	ge
  4029b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4029bc:	4329      	orrge	r1, r5
  4029be:	bd30      	popge	{r4, r5, pc}
  4029c0:	ea6f 0404 	mvn.w	r4, r4
  4029c4:	3c1f      	subs	r4, #31
  4029c6:	da1c      	bge.n	402a02 <__adddf3+0x1d2>
  4029c8:	340c      	adds	r4, #12
  4029ca:	dc0e      	bgt.n	4029ea <__adddf3+0x1ba>
  4029cc:	f104 0414 	add.w	r4, r4, #20
  4029d0:	f1c4 0220 	rsb	r2, r4, #32
  4029d4:	fa20 f004 	lsr.w	r0, r0, r4
  4029d8:	fa01 f302 	lsl.w	r3, r1, r2
  4029dc:	ea40 0003 	orr.w	r0, r0, r3
  4029e0:	fa21 f304 	lsr.w	r3, r1, r4
  4029e4:	ea45 0103 	orr.w	r1, r5, r3
  4029e8:	bd30      	pop	{r4, r5, pc}
  4029ea:	f1c4 040c 	rsb	r4, r4, #12
  4029ee:	f1c4 0220 	rsb	r2, r4, #32
  4029f2:	fa20 f002 	lsr.w	r0, r0, r2
  4029f6:	fa01 f304 	lsl.w	r3, r1, r4
  4029fa:	ea40 0003 	orr.w	r0, r0, r3
  4029fe:	4629      	mov	r1, r5
  402a00:	bd30      	pop	{r4, r5, pc}
  402a02:	fa21 f004 	lsr.w	r0, r1, r4
  402a06:	4629      	mov	r1, r5
  402a08:	bd30      	pop	{r4, r5, pc}
  402a0a:	f094 0f00 	teq	r4, #0
  402a0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402a12:	bf06      	itte	eq
  402a14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402a18:	3401      	addeq	r4, #1
  402a1a:	3d01      	subne	r5, #1
  402a1c:	e74e      	b.n	4028bc <__adddf3+0x8c>
  402a1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402a22:	bf18      	it	ne
  402a24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402a28:	d029      	beq.n	402a7e <__adddf3+0x24e>
  402a2a:	ea94 0f05 	teq	r4, r5
  402a2e:	bf08      	it	eq
  402a30:	ea90 0f02 	teqeq	r0, r2
  402a34:	d005      	beq.n	402a42 <__adddf3+0x212>
  402a36:	ea54 0c00 	orrs.w	ip, r4, r0
  402a3a:	bf04      	itt	eq
  402a3c:	4619      	moveq	r1, r3
  402a3e:	4610      	moveq	r0, r2
  402a40:	bd30      	pop	{r4, r5, pc}
  402a42:	ea91 0f03 	teq	r1, r3
  402a46:	bf1e      	ittt	ne
  402a48:	2100      	movne	r1, #0
  402a4a:	2000      	movne	r0, #0
  402a4c:	bd30      	popne	{r4, r5, pc}
  402a4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402a52:	d105      	bne.n	402a60 <__adddf3+0x230>
  402a54:	0040      	lsls	r0, r0, #1
  402a56:	4149      	adcs	r1, r1
  402a58:	bf28      	it	cs
  402a5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402a5e:	bd30      	pop	{r4, r5, pc}
  402a60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402a64:	bf3c      	itt	cc
  402a66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402a6a:	bd30      	popcc	{r4, r5, pc}
  402a6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402a70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402a74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402a78:	f04f 0000 	mov.w	r0, #0
  402a7c:	bd30      	pop	{r4, r5, pc}
  402a7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402a82:	bf1a      	itte	ne
  402a84:	4619      	movne	r1, r3
  402a86:	4610      	movne	r0, r2
  402a88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402a8c:	bf1c      	itt	ne
  402a8e:	460b      	movne	r3, r1
  402a90:	4602      	movne	r2, r0
  402a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402a96:	bf06      	itte	eq
  402a98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402a9c:	ea91 0f03 	teqeq	r1, r3
  402aa0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402aa4:	bd30      	pop	{r4, r5, pc}
  402aa6:	bf00      	nop

00402aa8 <__aeabi_ui2d>:
  402aa8:	f090 0f00 	teq	r0, #0
  402aac:	bf04      	itt	eq
  402aae:	2100      	moveq	r1, #0
  402ab0:	4770      	bxeq	lr
  402ab2:	b530      	push	{r4, r5, lr}
  402ab4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402ab8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402abc:	f04f 0500 	mov.w	r5, #0
  402ac0:	f04f 0100 	mov.w	r1, #0
  402ac4:	e750      	b.n	402968 <__adddf3+0x138>
  402ac6:	bf00      	nop

00402ac8 <__aeabi_i2d>:
  402ac8:	f090 0f00 	teq	r0, #0
  402acc:	bf04      	itt	eq
  402ace:	2100      	moveq	r1, #0
  402ad0:	4770      	bxeq	lr
  402ad2:	b530      	push	{r4, r5, lr}
  402ad4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402ad8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402adc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402ae0:	bf48      	it	mi
  402ae2:	4240      	negmi	r0, r0
  402ae4:	f04f 0100 	mov.w	r1, #0
  402ae8:	e73e      	b.n	402968 <__adddf3+0x138>
  402aea:	bf00      	nop

00402aec <__aeabi_f2d>:
  402aec:	0042      	lsls	r2, r0, #1
  402aee:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402af2:	ea4f 0131 	mov.w	r1, r1, rrx
  402af6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402afa:	bf1f      	itttt	ne
  402afc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402b00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402b04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402b08:	4770      	bxne	lr
  402b0a:	f092 0f00 	teq	r2, #0
  402b0e:	bf14      	ite	ne
  402b10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402b14:	4770      	bxeq	lr
  402b16:	b530      	push	{r4, r5, lr}
  402b18:	f44f 7460 	mov.w	r4, #896	; 0x380
  402b1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402b20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402b24:	e720      	b.n	402968 <__adddf3+0x138>
  402b26:	bf00      	nop

00402b28 <__aeabi_ul2d>:
  402b28:	ea50 0201 	orrs.w	r2, r0, r1
  402b2c:	bf08      	it	eq
  402b2e:	4770      	bxeq	lr
  402b30:	b530      	push	{r4, r5, lr}
  402b32:	f04f 0500 	mov.w	r5, #0
  402b36:	e00a      	b.n	402b4e <__aeabi_l2d+0x16>

00402b38 <__aeabi_l2d>:
  402b38:	ea50 0201 	orrs.w	r2, r0, r1
  402b3c:	bf08      	it	eq
  402b3e:	4770      	bxeq	lr
  402b40:	b530      	push	{r4, r5, lr}
  402b42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402b46:	d502      	bpl.n	402b4e <__aeabi_l2d+0x16>
  402b48:	4240      	negs	r0, r0
  402b4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402b4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402b52:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402b56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402b5a:	f43f aedc 	beq.w	402916 <__adddf3+0xe6>
  402b5e:	f04f 0203 	mov.w	r2, #3
  402b62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402b66:	bf18      	it	ne
  402b68:	3203      	addne	r2, #3
  402b6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402b6e:	bf18      	it	ne
  402b70:	3203      	addne	r2, #3
  402b72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402b76:	f1c2 0320 	rsb	r3, r2, #32
  402b7a:	fa00 fc03 	lsl.w	ip, r0, r3
  402b7e:	fa20 f002 	lsr.w	r0, r0, r2
  402b82:	fa01 fe03 	lsl.w	lr, r1, r3
  402b86:	ea40 000e 	orr.w	r0, r0, lr
  402b8a:	fa21 f102 	lsr.w	r1, r1, r2
  402b8e:	4414      	add	r4, r2
  402b90:	e6c1      	b.n	402916 <__adddf3+0xe6>
  402b92:	bf00      	nop

00402b94 <__aeabi_dmul>:
  402b94:	b570      	push	{r4, r5, r6, lr}
  402b96:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402b9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402b9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402ba2:	bf1d      	ittte	ne
  402ba4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402ba8:	ea94 0f0c 	teqne	r4, ip
  402bac:	ea95 0f0c 	teqne	r5, ip
  402bb0:	f000 f8de 	bleq	402d70 <__aeabi_dmul+0x1dc>
  402bb4:	442c      	add	r4, r5
  402bb6:	ea81 0603 	eor.w	r6, r1, r3
  402bba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402bbe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402bc2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402bc6:	bf18      	it	ne
  402bc8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402bcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402bd4:	d038      	beq.n	402c48 <__aeabi_dmul+0xb4>
  402bd6:	fba0 ce02 	umull	ip, lr, r0, r2
  402bda:	f04f 0500 	mov.w	r5, #0
  402bde:	fbe1 e502 	umlal	lr, r5, r1, r2
  402be2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402be6:	fbe0 e503 	umlal	lr, r5, r0, r3
  402bea:	f04f 0600 	mov.w	r6, #0
  402bee:	fbe1 5603 	umlal	r5, r6, r1, r3
  402bf2:	f09c 0f00 	teq	ip, #0
  402bf6:	bf18      	it	ne
  402bf8:	f04e 0e01 	orrne.w	lr, lr, #1
  402bfc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402c00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402c04:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402c08:	d204      	bcs.n	402c14 <__aeabi_dmul+0x80>
  402c0a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402c0e:	416d      	adcs	r5, r5
  402c10:	eb46 0606 	adc.w	r6, r6, r6
  402c14:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402c18:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402c1c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402c20:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402c24:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402c28:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402c2c:	bf88      	it	hi
  402c2e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402c32:	d81e      	bhi.n	402c72 <__aeabi_dmul+0xde>
  402c34:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402c38:	bf08      	it	eq
  402c3a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402c3e:	f150 0000 	adcs.w	r0, r0, #0
  402c42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402c46:	bd70      	pop	{r4, r5, r6, pc}
  402c48:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402c4c:	ea46 0101 	orr.w	r1, r6, r1
  402c50:	ea40 0002 	orr.w	r0, r0, r2
  402c54:	ea81 0103 	eor.w	r1, r1, r3
  402c58:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402c5c:	bfc2      	ittt	gt
  402c5e:	ebd4 050c 	rsbsgt	r5, r4, ip
  402c62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402c66:	bd70      	popgt	{r4, r5, r6, pc}
  402c68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402c6c:	f04f 0e00 	mov.w	lr, #0
  402c70:	3c01      	subs	r4, #1
  402c72:	f300 80ab 	bgt.w	402dcc <__aeabi_dmul+0x238>
  402c76:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402c7a:	bfde      	ittt	le
  402c7c:	2000      	movle	r0, #0
  402c7e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402c82:	bd70      	pople	{r4, r5, r6, pc}
  402c84:	f1c4 0400 	rsb	r4, r4, #0
  402c88:	3c20      	subs	r4, #32
  402c8a:	da35      	bge.n	402cf8 <__aeabi_dmul+0x164>
  402c8c:	340c      	adds	r4, #12
  402c8e:	dc1b      	bgt.n	402cc8 <__aeabi_dmul+0x134>
  402c90:	f104 0414 	add.w	r4, r4, #20
  402c94:	f1c4 0520 	rsb	r5, r4, #32
  402c98:	fa00 f305 	lsl.w	r3, r0, r5
  402c9c:	fa20 f004 	lsr.w	r0, r0, r4
  402ca0:	fa01 f205 	lsl.w	r2, r1, r5
  402ca4:	ea40 0002 	orr.w	r0, r0, r2
  402ca8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402cac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402cb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402cb4:	fa21 f604 	lsr.w	r6, r1, r4
  402cb8:	eb42 0106 	adc.w	r1, r2, r6
  402cbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402cc0:	bf08      	it	eq
  402cc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402cc6:	bd70      	pop	{r4, r5, r6, pc}
  402cc8:	f1c4 040c 	rsb	r4, r4, #12
  402ccc:	f1c4 0520 	rsb	r5, r4, #32
  402cd0:	fa00 f304 	lsl.w	r3, r0, r4
  402cd4:	fa20 f005 	lsr.w	r0, r0, r5
  402cd8:	fa01 f204 	lsl.w	r2, r1, r4
  402cdc:	ea40 0002 	orr.w	r0, r0, r2
  402ce0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402ce4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402ce8:	f141 0100 	adc.w	r1, r1, #0
  402cec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402cf0:	bf08      	it	eq
  402cf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402cf6:	bd70      	pop	{r4, r5, r6, pc}
  402cf8:	f1c4 0520 	rsb	r5, r4, #32
  402cfc:	fa00 f205 	lsl.w	r2, r0, r5
  402d00:	ea4e 0e02 	orr.w	lr, lr, r2
  402d04:	fa20 f304 	lsr.w	r3, r0, r4
  402d08:	fa01 f205 	lsl.w	r2, r1, r5
  402d0c:	ea43 0302 	orr.w	r3, r3, r2
  402d10:	fa21 f004 	lsr.w	r0, r1, r4
  402d14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402d18:	fa21 f204 	lsr.w	r2, r1, r4
  402d1c:	ea20 0002 	bic.w	r0, r0, r2
  402d20:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402d24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402d28:	bf08      	it	eq
  402d2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402d2e:	bd70      	pop	{r4, r5, r6, pc}
  402d30:	f094 0f00 	teq	r4, #0
  402d34:	d10f      	bne.n	402d56 <__aeabi_dmul+0x1c2>
  402d36:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402d3a:	0040      	lsls	r0, r0, #1
  402d3c:	eb41 0101 	adc.w	r1, r1, r1
  402d40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402d44:	bf08      	it	eq
  402d46:	3c01      	subeq	r4, #1
  402d48:	d0f7      	beq.n	402d3a <__aeabi_dmul+0x1a6>
  402d4a:	ea41 0106 	orr.w	r1, r1, r6
  402d4e:	f095 0f00 	teq	r5, #0
  402d52:	bf18      	it	ne
  402d54:	4770      	bxne	lr
  402d56:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402d5a:	0052      	lsls	r2, r2, #1
  402d5c:	eb43 0303 	adc.w	r3, r3, r3
  402d60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402d64:	bf08      	it	eq
  402d66:	3d01      	subeq	r5, #1
  402d68:	d0f7      	beq.n	402d5a <__aeabi_dmul+0x1c6>
  402d6a:	ea43 0306 	orr.w	r3, r3, r6
  402d6e:	4770      	bx	lr
  402d70:	ea94 0f0c 	teq	r4, ip
  402d74:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402d78:	bf18      	it	ne
  402d7a:	ea95 0f0c 	teqne	r5, ip
  402d7e:	d00c      	beq.n	402d9a <__aeabi_dmul+0x206>
  402d80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402d84:	bf18      	it	ne
  402d86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402d8a:	d1d1      	bne.n	402d30 <__aeabi_dmul+0x19c>
  402d8c:	ea81 0103 	eor.w	r1, r1, r3
  402d90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402d94:	f04f 0000 	mov.w	r0, #0
  402d98:	bd70      	pop	{r4, r5, r6, pc}
  402d9a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402d9e:	bf06      	itte	eq
  402da0:	4610      	moveq	r0, r2
  402da2:	4619      	moveq	r1, r3
  402da4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402da8:	d019      	beq.n	402dde <__aeabi_dmul+0x24a>
  402daa:	ea94 0f0c 	teq	r4, ip
  402dae:	d102      	bne.n	402db6 <__aeabi_dmul+0x222>
  402db0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402db4:	d113      	bne.n	402dde <__aeabi_dmul+0x24a>
  402db6:	ea95 0f0c 	teq	r5, ip
  402dba:	d105      	bne.n	402dc8 <__aeabi_dmul+0x234>
  402dbc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402dc0:	bf1c      	itt	ne
  402dc2:	4610      	movne	r0, r2
  402dc4:	4619      	movne	r1, r3
  402dc6:	d10a      	bne.n	402dde <__aeabi_dmul+0x24a>
  402dc8:	ea81 0103 	eor.w	r1, r1, r3
  402dcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402dd0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402dd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402dd8:	f04f 0000 	mov.w	r0, #0
  402ddc:	bd70      	pop	{r4, r5, r6, pc}
  402dde:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402de2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402de6:	bd70      	pop	{r4, r5, r6, pc}

00402de8 <__aeabi_ddiv>:
  402de8:	b570      	push	{r4, r5, r6, lr}
  402dea:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402dee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402df2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402df6:	bf1d      	ittte	ne
  402df8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402dfc:	ea94 0f0c 	teqne	r4, ip
  402e00:	ea95 0f0c 	teqne	r5, ip
  402e04:	f000 f8a7 	bleq	402f56 <__aeabi_ddiv+0x16e>
  402e08:	eba4 0405 	sub.w	r4, r4, r5
  402e0c:	ea81 0e03 	eor.w	lr, r1, r3
  402e10:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402e14:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402e18:	f000 8088 	beq.w	402f2c <__aeabi_ddiv+0x144>
  402e1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402e20:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402e24:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402e28:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402e2c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402e30:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402e34:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402e38:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402e3c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402e40:	429d      	cmp	r5, r3
  402e42:	bf08      	it	eq
  402e44:	4296      	cmpeq	r6, r2
  402e46:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402e4a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402e4e:	d202      	bcs.n	402e56 <__aeabi_ddiv+0x6e>
  402e50:	085b      	lsrs	r3, r3, #1
  402e52:	ea4f 0232 	mov.w	r2, r2, rrx
  402e56:	1ab6      	subs	r6, r6, r2
  402e58:	eb65 0503 	sbc.w	r5, r5, r3
  402e5c:	085b      	lsrs	r3, r3, #1
  402e5e:	ea4f 0232 	mov.w	r2, r2, rrx
  402e62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402e66:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402e6a:	ebb6 0e02 	subs.w	lr, r6, r2
  402e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402e72:	bf22      	ittt	cs
  402e74:	1ab6      	subcs	r6, r6, r2
  402e76:	4675      	movcs	r5, lr
  402e78:	ea40 000c 	orrcs.w	r0, r0, ip
  402e7c:	085b      	lsrs	r3, r3, #1
  402e7e:	ea4f 0232 	mov.w	r2, r2, rrx
  402e82:	ebb6 0e02 	subs.w	lr, r6, r2
  402e86:	eb75 0e03 	sbcs.w	lr, r5, r3
  402e8a:	bf22      	ittt	cs
  402e8c:	1ab6      	subcs	r6, r6, r2
  402e8e:	4675      	movcs	r5, lr
  402e90:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402e94:	085b      	lsrs	r3, r3, #1
  402e96:	ea4f 0232 	mov.w	r2, r2, rrx
  402e9a:	ebb6 0e02 	subs.w	lr, r6, r2
  402e9e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402ea2:	bf22      	ittt	cs
  402ea4:	1ab6      	subcs	r6, r6, r2
  402ea6:	4675      	movcs	r5, lr
  402ea8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402eac:	085b      	lsrs	r3, r3, #1
  402eae:	ea4f 0232 	mov.w	r2, r2, rrx
  402eb2:	ebb6 0e02 	subs.w	lr, r6, r2
  402eb6:	eb75 0e03 	sbcs.w	lr, r5, r3
  402eba:	bf22      	ittt	cs
  402ebc:	1ab6      	subcs	r6, r6, r2
  402ebe:	4675      	movcs	r5, lr
  402ec0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402ec4:	ea55 0e06 	orrs.w	lr, r5, r6
  402ec8:	d018      	beq.n	402efc <__aeabi_ddiv+0x114>
  402eca:	ea4f 1505 	mov.w	r5, r5, lsl #4
  402ece:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402ed2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402ed6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402eda:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  402ede:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402ee2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402ee6:	d1c0      	bne.n	402e6a <__aeabi_ddiv+0x82>
  402ee8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402eec:	d10b      	bne.n	402f06 <__aeabi_ddiv+0x11e>
  402eee:	ea41 0100 	orr.w	r1, r1, r0
  402ef2:	f04f 0000 	mov.w	r0, #0
  402ef6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402efa:	e7b6      	b.n	402e6a <__aeabi_ddiv+0x82>
  402efc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402f00:	bf04      	itt	eq
  402f02:	4301      	orreq	r1, r0
  402f04:	2000      	moveq	r0, #0
  402f06:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402f0a:	bf88      	it	hi
  402f0c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402f10:	f63f aeaf 	bhi.w	402c72 <__aeabi_dmul+0xde>
  402f14:	ebb5 0c03 	subs.w	ip, r5, r3
  402f18:	bf04      	itt	eq
  402f1a:	ebb6 0c02 	subseq.w	ip, r6, r2
  402f1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402f22:	f150 0000 	adcs.w	r0, r0, #0
  402f26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402f2a:	bd70      	pop	{r4, r5, r6, pc}
  402f2c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402f30:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402f34:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402f38:	bfc2      	ittt	gt
  402f3a:	ebd4 050c 	rsbsgt	r5, r4, ip
  402f3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402f42:	bd70      	popgt	{r4, r5, r6, pc}
  402f44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402f48:	f04f 0e00 	mov.w	lr, #0
  402f4c:	3c01      	subs	r4, #1
  402f4e:	e690      	b.n	402c72 <__aeabi_dmul+0xde>
  402f50:	ea45 0e06 	orr.w	lr, r5, r6
  402f54:	e68d      	b.n	402c72 <__aeabi_dmul+0xde>
  402f56:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402f5a:	ea94 0f0c 	teq	r4, ip
  402f5e:	bf08      	it	eq
  402f60:	ea95 0f0c 	teqeq	r5, ip
  402f64:	f43f af3b 	beq.w	402dde <__aeabi_dmul+0x24a>
  402f68:	ea94 0f0c 	teq	r4, ip
  402f6c:	d10a      	bne.n	402f84 <__aeabi_ddiv+0x19c>
  402f6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402f72:	f47f af34 	bne.w	402dde <__aeabi_dmul+0x24a>
  402f76:	ea95 0f0c 	teq	r5, ip
  402f7a:	f47f af25 	bne.w	402dc8 <__aeabi_dmul+0x234>
  402f7e:	4610      	mov	r0, r2
  402f80:	4619      	mov	r1, r3
  402f82:	e72c      	b.n	402dde <__aeabi_dmul+0x24a>
  402f84:	ea95 0f0c 	teq	r5, ip
  402f88:	d106      	bne.n	402f98 <__aeabi_ddiv+0x1b0>
  402f8a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402f8e:	f43f aefd 	beq.w	402d8c <__aeabi_dmul+0x1f8>
  402f92:	4610      	mov	r0, r2
  402f94:	4619      	mov	r1, r3
  402f96:	e722      	b.n	402dde <__aeabi_dmul+0x24a>
  402f98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402f9c:	bf18      	it	ne
  402f9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402fa2:	f47f aec5 	bne.w	402d30 <__aeabi_dmul+0x19c>
  402fa6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402faa:	f47f af0d 	bne.w	402dc8 <__aeabi_dmul+0x234>
  402fae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402fb2:	f47f aeeb 	bne.w	402d8c <__aeabi_dmul+0x1f8>
  402fb6:	e712      	b.n	402dde <__aeabi_dmul+0x24a>

00402fb8 <__gedf2>:
  402fb8:	f04f 3cff 	mov.w	ip, #4294967295
  402fbc:	e006      	b.n	402fcc <__cmpdf2+0x4>
  402fbe:	bf00      	nop

00402fc0 <__ledf2>:
  402fc0:	f04f 0c01 	mov.w	ip, #1
  402fc4:	e002      	b.n	402fcc <__cmpdf2+0x4>
  402fc6:	bf00      	nop

00402fc8 <__cmpdf2>:
  402fc8:	f04f 0c01 	mov.w	ip, #1
  402fcc:	f84d cd04 	str.w	ip, [sp, #-4]!
  402fd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402fd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402fd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402fdc:	bf18      	it	ne
  402fde:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  402fe2:	d01b      	beq.n	40301c <__cmpdf2+0x54>
  402fe4:	b001      	add	sp, #4
  402fe6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  402fea:	bf0c      	ite	eq
  402fec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  402ff0:	ea91 0f03 	teqne	r1, r3
  402ff4:	bf02      	ittt	eq
  402ff6:	ea90 0f02 	teqeq	r0, r2
  402ffa:	2000      	moveq	r0, #0
  402ffc:	4770      	bxeq	lr
  402ffe:	f110 0f00 	cmn.w	r0, #0
  403002:	ea91 0f03 	teq	r1, r3
  403006:	bf58      	it	pl
  403008:	4299      	cmppl	r1, r3
  40300a:	bf08      	it	eq
  40300c:	4290      	cmpeq	r0, r2
  40300e:	bf2c      	ite	cs
  403010:	17d8      	asrcs	r0, r3, #31
  403012:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  403016:	f040 0001 	orr.w	r0, r0, #1
  40301a:	4770      	bx	lr
  40301c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403020:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403024:	d102      	bne.n	40302c <__cmpdf2+0x64>
  403026:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40302a:	d107      	bne.n	40303c <__cmpdf2+0x74>
  40302c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403030:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403034:	d1d6      	bne.n	402fe4 <__cmpdf2+0x1c>
  403036:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40303a:	d0d3      	beq.n	402fe4 <__cmpdf2+0x1c>
  40303c:	f85d 0b04 	ldr.w	r0, [sp], #4
  403040:	4770      	bx	lr
  403042:	bf00      	nop

00403044 <__aeabi_cdrcmple>:
  403044:	4684      	mov	ip, r0
  403046:	4610      	mov	r0, r2
  403048:	4662      	mov	r2, ip
  40304a:	468c      	mov	ip, r1
  40304c:	4619      	mov	r1, r3
  40304e:	4663      	mov	r3, ip
  403050:	e000      	b.n	403054 <__aeabi_cdcmpeq>
  403052:	bf00      	nop

00403054 <__aeabi_cdcmpeq>:
  403054:	b501      	push	{r0, lr}
  403056:	f7ff ffb7 	bl	402fc8 <__cmpdf2>
  40305a:	2800      	cmp	r0, #0
  40305c:	bf48      	it	mi
  40305e:	f110 0f00 	cmnmi.w	r0, #0
  403062:	bd01      	pop	{r0, pc}

00403064 <__aeabi_dcmpeq>:
  403064:	f84d ed08 	str.w	lr, [sp, #-8]!
  403068:	f7ff fff4 	bl	403054 <__aeabi_cdcmpeq>
  40306c:	bf0c      	ite	eq
  40306e:	2001      	moveq	r0, #1
  403070:	2000      	movne	r0, #0
  403072:	f85d fb08 	ldr.w	pc, [sp], #8
  403076:	bf00      	nop

00403078 <__aeabi_dcmplt>:
  403078:	f84d ed08 	str.w	lr, [sp, #-8]!
  40307c:	f7ff ffea 	bl	403054 <__aeabi_cdcmpeq>
  403080:	bf34      	ite	cc
  403082:	2001      	movcc	r0, #1
  403084:	2000      	movcs	r0, #0
  403086:	f85d fb08 	ldr.w	pc, [sp], #8
  40308a:	bf00      	nop

0040308c <__aeabi_dcmple>:
  40308c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403090:	f7ff ffe0 	bl	403054 <__aeabi_cdcmpeq>
  403094:	bf94      	ite	ls
  403096:	2001      	movls	r0, #1
  403098:	2000      	movhi	r0, #0
  40309a:	f85d fb08 	ldr.w	pc, [sp], #8
  40309e:	bf00      	nop

004030a0 <__aeabi_dcmpge>:
  4030a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4030a4:	f7ff ffce 	bl	403044 <__aeabi_cdrcmple>
  4030a8:	bf94      	ite	ls
  4030aa:	2001      	movls	r0, #1
  4030ac:	2000      	movhi	r0, #0
  4030ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4030b2:	bf00      	nop

004030b4 <__aeabi_dcmpgt>:
  4030b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4030b8:	f7ff ffc4 	bl	403044 <__aeabi_cdrcmple>
  4030bc:	bf34      	ite	cc
  4030be:	2001      	movcc	r0, #1
  4030c0:	2000      	movcs	r0, #0
  4030c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4030c6:	bf00      	nop

004030c8 <__aeabi_d2iz>:
  4030c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4030cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4030d0:	d215      	bcs.n	4030fe <__aeabi_d2iz+0x36>
  4030d2:	d511      	bpl.n	4030f8 <__aeabi_d2iz+0x30>
  4030d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4030d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4030dc:	d912      	bls.n	403104 <__aeabi_d2iz+0x3c>
  4030de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4030e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4030e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4030ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4030ee:	fa23 f002 	lsr.w	r0, r3, r2
  4030f2:	bf18      	it	ne
  4030f4:	4240      	negne	r0, r0
  4030f6:	4770      	bx	lr
  4030f8:	f04f 0000 	mov.w	r0, #0
  4030fc:	4770      	bx	lr
  4030fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403102:	d105      	bne.n	403110 <__aeabi_d2iz+0x48>
  403104:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  403108:	bf08      	it	eq
  40310a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40310e:	4770      	bx	lr
  403110:	f04f 0000 	mov.w	r0, #0
  403114:	4770      	bx	lr
  403116:	bf00      	nop

00403118 <__libc_init_array>:
  403118:	b570      	push	{r4, r5, r6, lr}
  40311a:	4e0d      	ldr	r6, [pc, #52]	; (403150 <__libc_init_array+0x38>)
  40311c:	4c0d      	ldr	r4, [pc, #52]	; (403154 <__libc_init_array+0x3c>)
  40311e:	1ba4      	subs	r4, r4, r6
  403120:	10a4      	asrs	r4, r4, #2
  403122:	2500      	movs	r5, #0
  403124:	42a5      	cmp	r5, r4
  403126:	d109      	bne.n	40313c <__libc_init_array+0x24>
  403128:	4e0b      	ldr	r6, [pc, #44]	; (403158 <__libc_init_array+0x40>)
  40312a:	4c0c      	ldr	r4, [pc, #48]	; (40315c <__libc_init_array+0x44>)
  40312c:	f002 ffcc 	bl	4060c8 <_init>
  403130:	1ba4      	subs	r4, r4, r6
  403132:	10a4      	asrs	r4, r4, #2
  403134:	2500      	movs	r5, #0
  403136:	42a5      	cmp	r5, r4
  403138:	d105      	bne.n	403146 <__libc_init_array+0x2e>
  40313a:	bd70      	pop	{r4, r5, r6, pc}
  40313c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  403140:	4798      	blx	r3
  403142:	3501      	adds	r5, #1
  403144:	e7ee      	b.n	403124 <__libc_init_array+0xc>
  403146:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40314a:	4798      	blx	r3
  40314c:	3501      	adds	r5, #1
  40314e:	e7f2      	b.n	403136 <__libc_init_array+0x1e>
  403150:	004060d4 	.word	0x004060d4
  403154:	004060d4 	.word	0x004060d4
  403158:	004060d4 	.word	0x004060d4
  40315c:	004060d8 	.word	0x004060d8

00403160 <memcpy>:
  403160:	b510      	push	{r4, lr}
  403162:	1e43      	subs	r3, r0, #1
  403164:	440a      	add	r2, r1
  403166:	4291      	cmp	r1, r2
  403168:	d100      	bne.n	40316c <memcpy+0xc>
  40316a:	bd10      	pop	{r4, pc}
  40316c:	f811 4b01 	ldrb.w	r4, [r1], #1
  403170:	f803 4f01 	strb.w	r4, [r3, #1]!
  403174:	e7f7      	b.n	403166 <memcpy+0x6>

00403176 <memset>:
  403176:	4402      	add	r2, r0
  403178:	4603      	mov	r3, r0
  40317a:	4293      	cmp	r3, r2
  40317c:	d100      	bne.n	403180 <memset+0xa>
  40317e:	4770      	bx	lr
  403180:	f803 1b01 	strb.w	r1, [r3], #1
  403184:	e7f9      	b.n	40317a <memset+0x4>

00403186 <__cvt>:
  403186:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40318a:	b088      	sub	sp, #32
  40318c:	2b00      	cmp	r3, #0
  40318e:	9f14      	ldr	r7, [sp, #80]	; 0x50
  403190:	9912      	ldr	r1, [sp, #72]	; 0x48
  403192:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403194:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  403198:	461e      	mov	r6, r3
  40319a:	f027 0720 	bic.w	r7, r7, #32
  40319e:	bfbb      	ittet	lt
  4031a0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  4031a4:	461e      	movlt	r6, r3
  4031a6:	2300      	movge	r3, #0
  4031a8:	232d      	movlt	r3, #45	; 0x2d
  4031aa:	2f46      	cmp	r7, #70	; 0x46
  4031ac:	4614      	mov	r4, r2
  4031ae:	700b      	strb	r3, [r1, #0]
  4031b0:	d004      	beq.n	4031bc <__cvt+0x36>
  4031b2:	2f45      	cmp	r7, #69	; 0x45
  4031b4:	d100      	bne.n	4031b8 <__cvt+0x32>
  4031b6:	3501      	adds	r5, #1
  4031b8:	2302      	movs	r3, #2
  4031ba:	e000      	b.n	4031be <__cvt+0x38>
  4031bc:	2303      	movs	r3, #3
  4031be:	aa07      	add	r2, sp, #28
  4031c0:	9204      	str	r2, [sp, #16]
  4031c2:	aa06      	add	r2, sp, #24
  4031c4:	9203      	str	r2, [sp, #12]
  4031c6:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  4031ca:	4622      	mov	r2, r4
  4031cc:	4633      	mov	r3, r6
  4031ce:	f000 fd9b 	bl	403d08 <_dtoa_r>
  4031d2:	2f47      	cmp	r7, #71	; 0x47
  4031d4:	4680      	mov	r8, r0
  4031d6:	d102      	bne.n	4031de <__cvt+0x58>
  4031d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4031da:	07db      	lsls	r3, r3, #31
  4031dc:	d526      	bpl.n	40322c <__cvt+0xa6>
  4031de:	2f46      	cmp	r7, #70	; 0x46
  4031e0:	eb08 0905 	add.w	r9, r8, r5
  4031e4:	d111      	bne.n	40320a <__cvt+0x84>
  4031e6:	f898 3000 	ldrb.w	r3, [r8]
  4031ea:	2b30      	cmp	r3, #48	; 0x30
  4031ec:	d10a      	bne.n	403204 <__cvt+0x7e>
  4031ee:	2200      	movs	r2, #0
  4031f0:	2300      	movs	r3, #0
  4031f2:	4620      	mov	r0, r4
  4031f4:	4631      	mov	r1, r6
  4031f6:	f7ff ff35 	bl	403064 <__aeabi_dcmpeq>
  4031fa:	b918      	cbnz	r0, 403204 <__cvt+0x7e>
  4031fc:	f1c5 0501 	rsb	r5, r5, #1
  403200:	f8ca 5000 	str.w	r5, [sl]
  403204:	f8da 3000 	ldr.w	r3, [sl]
  403208:	4499      	add	r9, r3
  40320a:	2200      	movs	r2, #0
  40320c:	2300      	movs	r3, #0
  40320e:	4620      	mov	r0, r4
  403210:	4631      	mov	r1, r6
  403212:	f7ff ff27 	bl	403064 <__aeabi_dcmpeq>
  403216:	b938      	cbnz	r0, 403228 <__cvt+0xa2>
  403218:	2230      	movs	r2, #48	; 0x30
  40321a:	9b07      	ldr	r3, [sp, #28]
  40321c:	4599      	cmp	r9, r3
  40321e:	d905      	bls.n	40322c <__cvt+0xa6>
  403220:	1c59      	adds	r1, r3, #1
  403222:	9107      	str	r1, [sp, #28]
  403224:	701a      	strb	r2, [r3, #0]
  403226:	e7f8      	b.n	40321a <__cvt+0x94>
  403228:	f8cd 901c 	str.w	r9, [sp, #28]
  40322c:	9b07      	ldr	r3, [sp, #28]
  40322e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403230:	eba3 0308 	sub.w	r3, r3, r8
  403234:	4640      	mov	r0, r8
  403236:	6013      	str	r3, [r2, #0]
  403238:	b008      	add	sp, #32
  40323a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040323e <__exponent>:
  40323e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  403240:	4603      	mov	r3, r0
  403242:	2900      	cmp	r1, #0
  403244:	bfb8      	it	lt
  403246:	4249      	neglt	r1, r1
  403248:	f803 2b02 	strb.w	r2, [r3], #2
  40324c:	bfb4      	ite	lt
  40324e:	222d      	movlt	r2, #45	; 0x2d
  403250:	222b      	movge	r2, #43	; 0x2b
  403252:	2909      	cmp	r1, #9
  403254:	7042      	strb	r2, [r0, #1]
  403256:	dd20      	ble.n	40329a <__exponent+0x5c>
  403258:	f10d 0207 	add.w	r2, sp, #7
  40325c:	4617      	mov	r7, r2
  40325e:	260a      	movs	r6, #10
  403260:	fb91 f5f6 	sdiv	r5, r1, r6
  403264:	fb06 1115 	mls	r1, r6, r5, r1
  403268:	3130      	adds	r1, #48	; 0x30
  40326a:	2d09      	cmp	r5, #9
  40326c:	f802 1c01 	strb.w	r1, [r2, #-1]
  403270:	f102 34ff 	add.w	r4, r2, #4294967295
  403274:	4629      	mov	r1, r5
  403276:	dc09      	bgt.n	40328c <__exponent+0x4e>
  403278:	3130      	adds	r1, #48	; 0x30
  40327a:	3a02      	subs	r2, #2
  40327c:	f804 1c01 	strb.w	r1, [r4, #-1]
  403280:	42ba      	cmp	r2, r7
  403282:	461c      	mov	r4, r3
  403284:	d304      	bcc.n	403290 <__exponent+0x52>
  403286:	1a20      	subs	r0, r4, r0
  403288:	b003      	add	sp, #12
  40328a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40328c:	4622      	mov	r2, r4
  40328e:	e7e7      	b.n	403260 <__exponent+0x22>
  403290:	f812 1b01 	ldrb.w	r1, [r2], #1
  403294:	f803 1b01 	strb.w	r1, [r3], #1
  403298:	e7f2      	b.n	403280 <__exponent+0x42>
  40329a:	2230      	movs	r2, #48	; 0x30
  40329c:	461c      	mov	r4, r3
  40329e:	4411      	add	r1, r2
  4032a0:	f804 2b02 	strb.w	r2, [r4], #2
  4032a4:	7059      	strb	r1, [r3, #1]
  4032a6:	e7ee      	b.n	403286 <__exponent+0x48>

004032a8 <_printf_float>:
  4032a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032ac:	b091      	sub	sp, #68	; 0x44
  4032ae:	460c      	mov	r4, r1
  4032b0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  4032b2:	4693      	mov	fp, r2
  4032b4:	461e      	mov	r6, r3
  4032b6:	4605      	mov	r5, r0
  4032b8:	f001 fc74 	bl	404ba4 <_localeconv_r>
  4032bc:	6803      	ldr	r3, [r0, #0]
  4032be:	9309      	str	r3, [sp, #36]	; 0x24
  4032c0:	4618      	mov	r0, r3
  4032c2:	f000 fc8d 	bl	403be0 <strlen>
  4032c6:	2300      	movs	r3, #0
  4032c8:	930e      	str	r3, [sp, #56]	; 0x38
  4032ca:	683b      	ldr	r3, [r7, #0]
  4032cc:	900a      	str	r0, [sp, #40]	; 0x28
  4032ce:	3307      	adds	r3, #7
  4032d0:	f023 0307 	bic.w	r3, r3, #7
  4032d4:	f103 0208 	add.w	r2, r3, #8
  4032d8:	f894 8018 	ldrb.w	r8, [r4, #24]
  4032dc:	f8d4 a000 	ldr.w	sl, [r4]
  4032e0:	603a      	str	r2, [r7, #0]
  4032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4032e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  4032ea:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  4032ee:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  4032f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4032f4:	930b      	str	r3, [sp, #44]	; 0x2c
  4032f6:	f04f 32ff 	mov.w	r2, #4294967295
  4032fa:	4ba6      	ldr	r3, [pc, #664]	; (403594 <_printf_float+0x2ec>)
  4032fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4032fe:	4638      	mov	r0, r7
  403300:	f002 fb84 	bl	405a0c <__aeabi_dcmpun>
  403304:	2800      	cmp	r0, #0
  403306:	f040 81f7 	bne.w	4036f8 <_printf_float+0x450>
  40330a:	f04f 32ff 	mov.w	r2, #4294967295
  40330e:	4ba1      	ldr	r3, [pc, #644]	; (403594 <_printf_float+0x2ec>)
  403310:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403312:	4638      	mov	r0, r7
  403314:	f7ff feba 	bl	40308c <__aeabi_dcmple>
  403318:	2800      	cmp	r0, #0
  40331a:	f040 81ed 	bne.w	4036f8 <_printf_float+0x450>
  40331e:	2200      	movs	r2, #0
  403320:	2300      	movs	r3, #0
  403322:	4638      	mov	r0, r7
  403324:	4649      	mov	r1, r9
  403326:	f7ff fea7 	bl	403078 <__aeabi_dcmplt>
  40332a:	b110      	cbz	r0, 403332 <_printf_float+0x8a>
  40332c:	232d      	movs	r3, #45	; 0x2d
  40332e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403332:	4b99      	ldr	r3, [pc, #612]	; (403598 <_printf_float+0x2f0>)
  403334:	4f99      	ldr	r7, [pc, #612]	; (40359c <_printf_float+0x2f4>)
  403336:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40333a:	bf98      	it	ls
  40333c:	461f      	movls	r7, r3
  40333e:	2303      	movs	r3, #3
  403340:	6123      	str	r3, [r4, #16]
  403342:	f02a 0304 	bic.w	r3, sl, #4
  403346:	6023      	str	r3, [r4, #0]
  403348:	f04f 0900 	mov.w	r9, #0
  40334c:	9600      	str	r6, [sp, #0]
  40334e:	465b      	mov	r3, fp
  403350:	aa0f      	add	r2, sp, #60	; 0x3c
  403352:	4621      	mov	r1, r4
  403354:	4628      	mov	r0, r5
  403356:	f000 f9df 	bl	403718 <_printf_common>
  40335a:	3001      	adds	r0, #1
  40335c:	f040 809a 	bne.w	403494 <_printf_float+0x1ec>
  403360:	f04f 30ff 	mov.w	r0, #4294967295
  403364:	b011      	add	sp, #68	; 0x44
  403366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40336a:	6862      	ldr	r2, [r4, #4]
  40336c:	1c53      	adds	r3, r2, #1
  40336e:	a80e      	add	r0, sp, #56	; 0x38
  403370:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  403374:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  403378:	d141      	bne.n	4033fe <_printf_float+0x156>
  40337a:	2206      	movs	r2, #6
  40337c:	6062      	str	r2, [r4, #4]
  40337e:	6023      	str	r3, [r4, #0]
  403380:	2100      	movs	r1, #0
  403382:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  403386:	9301      	str	r3, [sp, #4]
  403388:	6863      	ldr	r3, [r4, #4]
  40338a:	9005      	str	r0, [sp, #20]
  40338c:	9202      	str	r2, [sp, #8]
  40338e:	9300      	str	r3, [sp, #0]
  403390:	463a      	mov	r2, r7
  403392:	464b      	mov	r3, r9
  403394:	9106      	str	r1, [sp, #24]
  403396:	f8cd 8010 	str.w	r8, [sp, #16]
  40339a:	f8cd e00c 	str.w	lr, [sp, #12]
  40339e:	4628      	mov	r0, r5
  4033a0:	f7ff fef1 	bl	403186 <__cvt>
  4033a4:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  4033a8:	2b47      	cmp	r3, #71	; 0x47
  4033aa:	4607      	mov	r7, r0
  4033ac:	d109      	bne.n	4033c2 <_printf_float+0x11a>
  4033ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4033b0:	1cd8      	adds	r0, r3, #3
  4033b2:	db02      	blt.n	4033ba <_printf_float+0x112>
  4033b4:	6862      	ldr	r2, [r4, #4]
  4033b6:	4293      	cmp	r3, r2
  4033b8:	dd59      	ble.n	40346e <_printf_float+0x1c6>
  4033ba:	f1a8 0802 	sub.w	r8, r8, #2
  4033be:	fa5f f888 	uxtb.w	r8, r8
  4033c2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4033c6:	990d      	ldr	r1, [sp, #52]	; 0x34
  4033c8:	d836      	bhi.n	403438 <_printf_float+0x190>
  4033ca:	3901      	subs	r1, #1
  4033cc:	4642      	mov	r2, r8
  4033ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
  4033d2:	910d      	str	r1, [sp, #52]	; 0x34
  4033d4:	f7ff ff33 	bl	40323e <__exponent>
  4033d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4033da:	1883      	adds	r3, r0, r2
  4033dc:	2a01      	cmp	r2, #1
  4033de:	4681      	mov	r9, r0
  4033e0:	6123      	str	r3, [r4, #16]
  4033e2:	dc02      	bgt.n	4033ea <_printf_float+0x142>
  4033e4:	6822      	ldr	r2, [r4, #0]
  4033e6:	07d1      	lsls	r1, r2, #31
  4033e8:	d501      	bpl.n	4033ee <_printf_float+0x146>
  4033ea:	3301      	adds	r3, #1
  4033ec:	6123      	str	r3, [r4, #16]
  4033ee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  4033f2:	2b00      	cmp	r3, #0
  4033f4:	d0aa      	beq.n	40334c <_printf_float+0xa4>
  4033f6:	232d      	movs	r3, #45	; 0x2d
  4033f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4033fc:	e7a6      	b.n	40334c <_printf_float+0xa4>
  4033fe:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  403402:	d002      	beq.n	40340a <_printf_float+0x162>
  403404:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403408:	d1b9      	bne.n	40337e <_printf_float+0xd6>
  40340a:	b19a      	cbz	r2, 403434 <_printf_float+0x18c>
  40340c:	2100      	movs	r1, #0
  40340e:	9106      	str	r1, [sp, #24]
  403410:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  403414:	e88d 000c 	stmia.w	sp, {r2, r3}
  403418:	6023      	str	r3, [r4, #0]
  40341a:	9005      	str	r0, [sp, #20]
  40341c:	463a      	mov	r2, r7
  40341e:	f8cd 8010 	str.w	r8, [sp, #16]
  403422:	f8cd e00c 	str.w	lr, [sp, #12]
  403426:	9102      	str	r1, [sp, #8]
  403428:	464b      	mov	r3, r9
  40342a:	4628      	mov	r0, r5
  40342c:	f7ff feab 	bl	403186 <__cvt>
  403430:	4607      	mov	r7, r0
  403432:	e7bc      	b.n	4033ae <_printf_float+0x106>
  403434:	2201      	movs	r2, #1
  403436:	e7a1      	b.n	40337c <_printf_float+0xd4>
  403438:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40343c:	d119      	bne.n	403472 <_printf_float+0x1ca>
  40343e:	2900      	cmp	r1, #0
  403440:	6863      	ldr	r3, [r4, #4]
  403442:	dd0c      	ble.n	40345e <_printf_float+0x1b6>
  403444:	6121      	str	r1, [r4, #16]
  403446:	b913      	cbnz	r3, 40344e <_printf_float+0x1a6>
  403448:	6822      	ldr	r2, [r4, #0]
  40344a:	07d2      	lsls	r2, r2, #31
  40344c:	d502      	bpl.n	403454 <_printf_float+0x1ac>
  40344e:	3301      	adds	r3, #1
  403450:	440b      	add	r3, r1
  403452:	6123      	str	r3, [r4, #16]
  403454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403456:	65a3      	str	r3, [r4, #88]	; 0x58
  403458:	f04f 0900 	mov.w	r9, #0
  40345c:	e7c7      	b.n	4033ee <_printf_float+0x146>
  40345e:	b913      	cbnz	r3, 403466 <_printf_float+0x1be>
  403460:	6822      	ldr	r2, [r4, #0]
  403462:	07d0      	lsls	r0, r2, #31
  403464:	d501      	bpl.n	40346a <_printf_float+0x1c2>
  403466:	3302      	adds	r3, #2
  403468:	e7f3      	b.n	403452 <_printf_float+0x1aa>
  40346a:	2301      	movs	r3, #1
  40346c:	e7f1      	b.n	403452 <_printf_float+0x1aa>
  40346e:	f04f 0867 	mov.w	r8, #103	; 0x67
  403472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403474:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403476:	4293      	cmp	r3, r2
  403478:	db05      	blt.n	403486 <_printf_float+0x1de>
  40347a:	6822      	ldr	r2, [r4, #0]
  40347c:	6123      	str	r3, [r4, #16]
  40347e:	07d1      	lsls	r1, r2, #31
  403480:	d5e8      	bpl.n	403454 <_printf_float+0x1ac>
  403482:	3301      	adds	r3, #1
  403484:	e7e5      	b.n	403452 <_printf_float+0x1aa>
  403486:	2b00      	cmp	r3, #0
  403488:	bfd4      	ite	le
  40348a:	f1c3 0302 	rsble	r3, r3, #2
  40348e:	2301      	movgt	r3, #1
  403490:	4413      	add	r3, r2
  403492:	e7de      	b.n	403452 <_printf_float+0x1aa>
  403494:	6823      	ldr	r3, [r4, #0]
  403496:	055a      	lsls	r2, r3, #21
  403498:	d407      	bmi.n	4034aa <_printf_float+0x202>
  40349a:	6923      	ldr	r3, [r4, #16]
  40349c:	463a      	mov	r2, r7
  40349e:	4659      	mov	r1, fp
  4034a0:	4628      	mov	r0, r5
  4034a2:	47b0      	blx	r6
  4034a4:	3001      	adds	r0, #1
  4034a6:	d12a      	bne.n	4034fe <_printf_float+0x256>
  4034a8:	e75a      	b.n	403360 <_printf_float+0xb8>
  4034aa:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4034ae:	f240 80dc 	bls.w	40366a <_printf_float+0x3c2>
  4034b2:	2200      	movs	r2, #0
  4034b4:	2300      	movs	r3, #0
  4034b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4034ba:	f7ff fdd3 	bl	403064 <__aeabi_dcmpeq>
  4034be:	2800      	cmp	r0, #0
  4034c0:	d039      	beq.n	403536 <_printf_float+0x28e>
  4034c2:	2301      	movs	r3, #1
  4034c4:	4a36      	ldr	r2, [pc, #216]	; (4035a0 <_printf_float+0x2f8>)
  4034c6:	4659      	mov	r1, fp
  4034c8:	4628      	mov	r0, r5
  4034ca:	47b0      	blx	r6
  4034cc:	3001      	adds	r0, #1
  4034ce:	f43f af47 	beq.w	403360 <_printf_float+0xb8>
  4034d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4034d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4034d6:	429a      	cmp	r2, r3
  4034d8:	db02      	blt.n	4034e0 <_printf_float+0x238>
  4034da:	6823      	ldr	r3, [r4, #0]
  4034dc:	07d8      	lsls	r0, r3, #31
  4034de:	d50e      	bpl.n	4034fe <_printf_float+0x256>
  4034e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4034e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4034e4:	4659      	mov	r1, fp
  4034e6:	4628      	mov	r0, r5
  4034e8:	47b0      	blx	r6
  4034ea:	3001      	adds	r0, #1
  4034ec:	f43f af38 	beq.w	403360 <_printf_float+0xb8>
  4034f0:	2700      	movs	r7, #0
  4034f2:	f104 081a 	add.w	r8, r4, #26
  4034f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4034f8:	3b01      	subs	r3, #1
  4034fa:	429f      	cmp	r7, r3
  4034fc:	db11      	blt.n	403522 <_printf_float+0x27a>
  4034fe:	6823      	ldr	r3, [r4, #0]
  403500:	079f      	lsls	r7, r3, #30
  403502:	d508      	bpl.n	403516 <_printf_float+0x26e>
  403504:	2700      	movs	r7, #0
  403506:	f104 0819 	add.w	r8, r4, #25
  40350a:	68e3      	ldr	r3, [r4, #12]
  40350c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40350e:	1a9b      	subs	r3, r3, r2
  403510:	429f      	cmp	r7, r3
  403512:	f2c0 80e7 	blt.w	4036e4 <_printf_float+0x43c>
  403516:	68e0      	ldr	r0, [r4, #12]
  403518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40351a:	4298      	cmp	r0, r3
  40351c:	bfb8      	it	lt
  40351e:	4618      	movlt	r0, r3
  403520:	e720      	b.n	403364 <_printf_float+0xbc>
  403522:	2301      	movs	r3, #1
  403524:	4642      	mov	r2, r8
  403526:	4659      	mov	r1, fp
  403528:	4628      	mov	r0, r5
  40352a:	47b0      	blx	r6
  40352c:	3001      	adds	r0, #1
  40352e:	f43f af17 	beq.w	403360 <_printf_float+0xb8>
  403532:	3701      	adds	r7, #1
  403534:	e7df      	b.n	4034f6 <_printf_float+0x24e>
  403536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403538:	2b00      	cmp	r3, #0
  40353a:	dc33      	bgt.n	4035a4 <_printf_float+0x2fc>
  40353c:	2301      	movs	r3, #1
  40353e:	4a18      	ldr	r2, [pc, #96]	; (4035a0 <_printf_float+0x2f8>)
  403540:	4659      	mov	r1, fp
  403542:	4628      	mov	r0, r5
  403544:	47b0      	blx	r6
  403546:	3001      	adds	r0, #1
  403548:	f43f af0a 	beq.w	403360 <_printf_float+0xb8>
  40354c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40354e:	b923      	cbnz	r3, 40355a <_printf_float+0x2b2>
  403550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403552:	b913      	cbnz	r3, 40355a <_printf_float+0x2b2>
  403554:	6823      	ldr	r3, [r4, #0]
  403556:	07d9      	lsls	r1, r3, #31
  403558:	d5d1      	bpl.n	4034fe <_printf_float+0x256>
  40355a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40355c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40355e:	4659      	mov	r1, fp
  403560:	4628      	mov	r0, r5
  403562:	47b0      	blx	r6
  403564:	3001      	adds	r0, #1
  403566:	f43f aefb 	beq.w	403360 <_printf_float+0xb8>
  40356a:	f04f 0800 	mov.w	r8, #0
  40356e:	f104 091a 	add.w	r9, r4, #26
  403572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403574:	425b      	negs	r3, r3
  403576:	4598      	cmp	r8, r3
  403578:	db01      	blt.n	40357e <_printf_float+0x2d6>
  40357a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40357c:	e78e      	b.n	40349c <_printf_float+0x1f4>
  40357e:	2301      	movs	r3, #1
  403580:	464a      	mov	r2, r9
  403582:	4659      	mov	r1, fp
  403584:	4628      	mov	r0, r5
  403586:	47b0      	blx	r6
  403588:	3001      	adds	r0, #1
  40358a:	f43f aee9 	beq.w	403360 <_printf_float+0xb8>
  40358e:	f108 0801 	add.w	r8, r8, #1
  403592:	e7ee      	b.n	403572 <_printf_float+0x2ca>
  403594:	7fefffff 	.word	0x7fefffff
  403598:	00405e0c 	.word	0x00405e0c
  40359c:	00405e10 	.word	0x00405e10
  4035a0:	00405e1c 	.word	0x00405e1c
  4035a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4035a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4035a8:	429a      	cmp	r2, r3
  4035aa:	bfa8      	it	ge
  4035ac:	461a      	movge	r2, r3
  4035ae:	2a00      	cmp	r2, #0
  4035b0:	4690      	mov	r8, r2
  4035b2:	dc36      	bgt.n	403622 <_printf_float+0x37a>
  4035b4:	f104 031a 	add.w	r3, r4, #26
  4035b8:	f04f 0a00 	mov.w	sl, #0
  4035bc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4035c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4035c2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  4035c6:	eba9 0308 	sub.w	r3, r9, r8
  4035ca:	459a      	cmp	sl, r3
  4035cc:	db31      	blt.n	403632 <_printf_float+0x38a>
  4035ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4035d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4035d2:	429a      	cmp	r2, r3
  4035d4:	db38      	blt.n	403648 <_printf_float+0x3a0>
  4035d6:	6823      	ldr	r3, [r4, #0]
  4035d8:	07da      	lsls	r2, r3, #31
  4035da:	d435      	bmi.n	403648 <_printf_float+0x3a0>
  4035dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4035de:	990d      	ldr	r1, [sp, #52]	; 0x34
  4035e0:	eba3 0209 	sub.w	r2, r3, r9
  4035e4:	eba3 0801 	sub.w	r8, r3, r1
  4035e8:	4590      	cmp	r8, r2
  4035ea:	bfa8      	it	ge
  4035ec:	4690      	movge	r8, r2
  4035ee:	f1b8 0f00 	cmp.w	r8, #0
  4035f2:	dc31      	bgt.n	403658 <_printf_float+0x3b0>
  4035f4:	2700      	movs	r7, #0
  4035f6:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4035fa:	f104 091a 	add.w	r9, r4, #26
  4035fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403602:	1a9b      	subs	r3, r3, r2
  403604:	eba3 0308 	sub.w	r3, r3, r8
  403608:	429f      	cmp	r7, r3
  40360a:	f6bf af78 	bge.w	4034fe <_printf_float+0x256>
  40360e:	2301      	movs	r3, #1
  403610:	464a      	mov	r2, r9
  403612:	4659      	mov	r1, fp
  403614:	4628      	mov	r0, r5
  403616:	47b0      	blx	r6
  403618:	3001      	adds	r0, #1
  40361a:	f43f aea1 	beq.w	403360 <_printf_float+0xb8>
  40361e:	3701      	adds	r7, #1
  403620:	e7ed      	b.n	4035fe <_printf_float+0x356>
  403622:	4613      	mov	r3, r2
  403624:	4659      	mov	r1, fp
  403626:	463a      	mov	r2, r7
  403628:	4628      	mov	r0, r5
  40362a:	47b0      	blx	r6
  40362c:	3001      	adds	r0, #1
  40362e:	d1c1      	bne.n	4035b4 <_printf_float+0x30c>
  403630:	e696      	b.n	403360 <_printf_float+0xb8>
  403632:	2301      	movs	r3, #1
  403634:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403636:	4659      	mov	r1, fp
  403638:	4628      	mov	r0, r5
  40363a:	47b0      	blx	r6
  40363c:	3001      	adds	r0, #1
  40363e:	f43f ae8f 	beq.w	403360 <_printf_float+0xb8>
  403642:	f10a 0a01 	add.w	sl, sl, #1
  403646:	e7bc      	b.n	4035c2 <_printf_float+0x31a>
  403648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40364a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40364c:	4659      	mov	r1, fp
  40364e:	4628      	mov	r0, r5
  403650:	47b0      	blx	r6
  403652:	3001      	adds	r0, #1
  403654:	d1c2      	bne.n	4035dc <_printf_float+0x334>
  403656:	e683      	b.n	403360 <_printf_float+0xb8>
  403658:	4643      	mov	r3, r8
  40365a:	eb07 0209 	add.w	r2, r7, r9
  40365e:	4659      	mov	r1, fp
  403660:	4628      	mov	r0, r5
  403662:	47b0      	blx	r6
  403664:	3001      	adds	r0, #1
  403666:	d1c5      	bne.n	4035f4 <_printf_float+0x34c>
  403668:	e67a      	b.n	403360 <_printf_float+0xb8>
  40366a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40366c:	2a01      	cmp	r2, #1
  40366e:	dc01      	bgt.n	403674 <_printf_float+0x3cc>
  403670:	07db      	lsls	r3, r3, #31
  403672:	d534      	bpl.n	4036de <_printf_float+0x436>
  403674:	2301      	movs	r3, #1
  403676:	463a      	mov	r2, r7
  403678:	4659      	mov	r1, fp
  40367a:	4628      	mov	r0, r5
  40367c:	47b0      	blx	r6
  40367e:	3001      	adds	r0, #1
  403680:	f43f ae6e 	beq.w	403360 <_printf_float+0xb8>
  403684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403686:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403688:	4659      	mov	r1, fp
  40368a:	4628      	mov	r0, r5
  40368c:	47b0      	blx	r6
  40368e:	3001      	adds	r0, #1
  403690:	f43f ae66 	beq.w	403360 <_printf_float+0xb8>
  403694:	2200      	movs	r2, #0
  403696:	2300      	movs	r3, #0
  403698:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40369c:	f7ff fce2 	bl	403064 <__aeabi_dcmpeq>
  4036a0:	b150      	cbz	r0, 4036b8 <_printf_float+0x410>
  4036a2:	2700      	movs	r7, #0
  4036a4:	f104 081a 	add.w	r8, r4, #26
  4036a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4036aa:	3b01      	subs	r3, #1
  4036ac:	429f      	cmp	r7, r3
  4036ae:	db0c      	blt.n	4036ca <_printf_float+0x422>
  4036b0:	464b      	mov	r3, r9
  4036b2:	f104 0250 	add.w	r2, r4, #80	; 0x50
  4036b6:	e6f2      	b.n	40349e <_printf_float+0x1f6>
  4036b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4036ba:	1c7a      	adds	r2, r7, #1
  4036bc:	3b01      	subs	r3, #1
  4036be:	4659      	mov	r1, fp
  4036c0:	4628      	mov	r0, r5
  4036c2:	47b0      	blx	r6
  4036c4:	3001      	adds	r0, #1
  4036c6:	d1f3      	bne.n	4036b0 <_printf_float+0x408>
  4036c8:	e64a      	b.n	403360 <_printf_float+0xb8>
  4036ca:	2301      	movs	r3, #1
  4036cc:	4642      	mov	r2, r8
  4036ce:	4659      	mov	r1, fp
  4036d0:	4628      	mov	r0, r5
  4036d2:	47b0      	blx	r6
  4036d4:	3001      	adds	r0, #1
  4036d6:	f43f ae43 	beq.w	403360 <_printf_float+0xb8>
  4036da:	3701      	adds	r7, #1
  4036dc:	e7e4      	b.n	4036a8 <_printf_float+0x400>
  4036de:	2301      	movs	r3, #1
  4036e0:	463a      	mov	r2, r7
  4036e2:	e7ec      	b.n	4036be <_printf_float+0x416>
  4036e4:	2301      	movs	r3, #1
  4036e6:	4642      	mov	r2, r8
  4036e8:	4659      	mov	r1, fp
  4036ea:	4628      	mov	r0, r5
  4036ec:	47b0      	blx	r6
  4036ee:	3001      	adds	r0, #1
  4036f0:	f43f ae36 	beq.w	403360 <_printf_float+0xb8>
  4036f4:	3701      	adds	r7, #1
  4036f6:	e708      	b.n	40350a <_printf_float+0x262>
  4036f8:	463a      	mov	r2, r7
  4036fa:	464b      	mov	r3, r9
  4036fc:	4638      	mov	r0, r7
  4036fe:	4649      	mov	r1, r9
  403700:	f002 f984 	bl	405a0c <__aeabi_dcmpun>
  403704:	2800      	cmp	r0, #0
  403706:	f43f ae30 	beq.w	40336a <_printf_float+0xc2>
  40370a:	4b01      	ldr	r3, [pc, #4]	; (403710 <_printf_float+0x468>)
  40370c:	4f01      	ldr	r7, [pc, #4]	; (403714 <_printf_float+0x46c>)
  40370e:	e612      	b.n	403336 <_printf_float+0x8e>
  403710:	00405e14 	.word	0x00405e14
  403714:	00405e18 	.word	0x00405e18

00403718 <_printf_common>:
  403718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40371c:	4691      	mov	r9, r2
  40371e:	461f      	mov	r7, r3
  403720:	688a      	ldr	r2, [r1, #8]
  403722:	690b      	ldr	r3, [r1, #16]
  403724:	f8dd 8020 	ldr.w	r8, [sp, #32]
  403728:	4293      	cmp	r3, r2
  40372a:	bfb8      	it	lt
  40372c:	4613      	movlt	r3, r2
  40372e:	f8c9 3000 	str.w	r3, [r9]
  403732:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  403736:	4606      	mov	r6, r0
  403738:	460c      	mov	r4, r1
  40373a:	b112      	cbz	r2, 403742 <_printf_common+0x2a>
  40373c:	3301      	adds	r3, #1
  40373e:	f8c9 3000 	str.w	r3, [r9]
  403742:	6823      	ldr	r3, [r4, #0]
  403744:	0699      	lsls	r1, r3, #26
  403746:	bf42      	ittt	mi
  403748:	f8d9 3000 	ldrmi.w	r3, [r9]
  40374c:	3302      	addmi	r3, #2
  40374e:	f8c9 3000 	strmi.w	r3, [r9]
  403752:	6825      	ldr	r5, [r4, #0]
  403754:	f015 0506 	ands.w	r5, r5, #6
  403758:	d107      	bne.n	40376a <_printf_common+0x52>
  40375a:	f104 0a19 	add.w	sl, r4, #25
  40375e:	68e3      	ldr	r3, [r4, #12]
  403760:	f8d9 2000 	ldr.w	r2, [r9]
  403764:	1a9b      	subs	r3, r3, r2
  403766:	429d      	cmp	r5, r3
  403768:	db29      	blt.n	4037be <_printf_common+0xa6>
  40376a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  40376e:	6822      	ldr	r2, [r4, #0]
  403770:	3300      	adds	r3, #0
  403772:	bf18      	it	ne
  403774:	2301      	movne	r3, #1
  403776:	0692      	lsls	r2, r2, #26
  403778:	d42e      	bmi.n	4037d8 <_printf_common+0xc0>
  40377a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40377e:	4639      	mov	r1, r7
  403780:	4630      	mov	r0, r6
  403782:	47c0      	blx	r8
  403784:	3001      	adds	r0, #1
  403786:	d021      	beq.n	4037cc <_printf_common+0xb4>
  403788:	6823      	ldr	r3, [r4, #0]
  40378a:	68e5      	ldr	r5, [r4, #12]
  40378c:	f8d9 2000 	ldr.w	r2, [r9]
  403790:	f003 0306 	and.w	r3, r3, #6
  403794:	2b04      	cmp	r3, #4
  403796:	bf08      	it	eq
  403798:	1aad      	subeq	r5, r5, r2
  40379a:	68a3      	ldr	r3, [r4, #8]
  40379c:	6922      	ldr	r2, [r4, #16]
  40379e:	bf0c      	ite	eq
  4037a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  4037a4:	2500      	movne	r5, #0
  4037a6:	4293      	cmp	r3, r2
  4037a8:	bfc4      	itt	gt
  4037aa:	1a9b      	subgt	r3, r3, r2
  4037ac:	18ed      	addgt	r5, r5, r3
  4037ae:	f04f 0900 	mov.w	r9, #0
  4037b2:	341a      	adds	r4, #26
  4037b4:	454d      	cmp	r5, r9
  4037b6:	d11b      	bne.n	4037f0 <_printf_common+0xd8>
  4037b8:	2000      	movs	r0, #0
  4037ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4037be:	2301      	movs	r3, #1
  4037c0:	4652      	mov	r2, sl
  4037c2:	4639      	mov	r1, r7
  4037c4:	4630      	mov	r0, r6
  4037c6:	47c0      	blx	r8
  4037c8:	3001      	adds	r0, #1
  4037ca:	d103      	bne.n	4037d4 <_printf_common+0xbc>
  4037cc:	f04f 30ff 	mov.w	r0, #4294967295
  4037d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4037d4:	3501      	adds	r5, #1
  4037d6:	e7c2      	b.n	40375e <_printf_common+0x46>
  4037d8:	18e1      	adds	r1, r4, r3
  4037da:	1c5a      	adds	r2, r3, #1
  4037dc:	2030      	movs	r0, #48	; 0x30
  4037de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4037e2:	4422      	add	r2, r4
  4037e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4037e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4037ec:	3302      	adds	r3, #2
  4037ee:	e7c4      	b.n	40377a <_printf_common+0x62>
  4037f0:	2301      	movs	r3, #1
  4037f2:	4622      	mov	r2, r4
  4037f4:	4639      	mov	r1, r7
  4037f6:	4630      	mov	r0, r6
  4037f8:	47c0      	blx	r8
  4037fa:	3001      	adds	r0, #1
  4037fc:	d0e6      	beq.n	4037cc <_printf_common+0xb4>
  4037fe:	f109 0901 	add.w	r9, r9, #1
  403802:	e7d7      	b.n	4037b4 <_printf_common+0x9c>

00403804 <_printf_i>:
  403804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403808:	4617      	mov	r7, r2
  40380a:	7e0a      	ldrb	r2, [r1, #24]
  40380c:	b085      	sub	sp, #20
  40380e:	2a6e      	cmp	r2, #110	; 0x6e
  403810:	4698      	mov	r8, r3
  403812:	4606      	mov	r6, r0
  403814:	460c      	mov	r4, r1
  403816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403818:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  40381c:	f000 80bc 	beq.w	403998 <_printf_i+0x194>
  403820:	d81a      	bhi.n	403858 <_printf_i+0x54>
  403822:	2a63      	cmp	r2, #99	; 0x63
  403824:	d02e      	beq.n	403884 <_printf_i+0x80>
  403826:	d80a      	bhi.n	40383e <_printf_i+0x3a>
  403828:	2a00      	cmp	r2, #0
  40382a:	f000 80c8 	beq.w	4039be <_printf_i+0x1ba>
  40382e:	2a58      	cmp	r2, #88	; 0x58
  403830:	f000 808a 	beq.w	403948 <_printf_i+0x144>
  403834:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403838:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  40383c:	e02a      	b.n	403894 <_printf_i+0x90>
  40383e:	2a64      	cmp	r2, #100	; 0x64
  403840:	d001      	beq.n	403846 <_printf_i+0x42>
  403842:	2a69      	cmp	r2, #105	; 0x69
  403844:	d1f6      	bne.n	403834 <_printf_i+0x30>
  403846:	6821      	ldr	r1, [r4, #0]
  403848:	681a      	ldr	r2, [r3, #0]
  40384a:	f011 0f80 	tst.w	r1, #128	; 0x80
  40384e:	d023      	beq.n	403898 <_printf_i+0x94>
  403850:	1d11      	adds	r1, r2, #4
  403852:	6019      	str	r1, [r3, #0]
  403854:	6813      	ldr	r3, [r2, #0]
  403856:	e027      	b.n	4038a8 <_printf_i+0xa4>
  403858:	2a73      	cmp	r2, #115	; 0x73
  40385a:	f000 80b4 	beq.w	4039c6 <_printf_i+0x1c2>
  40385e:	d808      	bhi.n	403872 <_printf_i+0x6e>
  403860:	2a6f      	cmp	r2, #111	; 0x6f
  403862:	d02a      	beq.n	4038ba <_printf_i+0xb6>
  403864:	2a70      	cmp	r2, #112	; 0x70
  403866:	d1e5      	bne.n	403834 <_printf_i+0x30>
  403868:	680a      	ldr	r2, [r1, #0]
  40386a:	f042 0220 	orr.w	r2, r2, #32
  40386e:	600a      	str	r2, [r1, #0]
  403870:	e003      	b.n	40387a <_printf_i+0x76>
  403872:	2a75      	cmp	r2, #117	; 0x75
  403874:	d021      	beq.n	4038ba <_printf_i+0xb6>
  403876:	2a78      	cmp	r2, #120	; 0x78
  403878:	d1dc      	bne.n	403834 <_printf_i+0x30>
  40387a:	2278      	movs	r2, #120	; 0x78
  40387c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  403880:	496e      	ldr	r1, [pc, #440]	; (403a3c <_printf_i+0x238>)
  403882:	e064      	b.n	40394e <_printf_i+0x14a>
  403884:	681a      	ldr	r2, [r3, #0]
  403886:	f101 0542 	add.w	r5, r1, #66	; 0x42
  40388a:	1d11      	adds	r1, r2, #4
  40388c:	6019      	str	r1, [r3, #0]
  40388e:	6813      	ldr	r3, [r2, #0]
  403890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403894:	2301      	movs	r3, #1
  403896:	e0a3      	b.n	4039e0 <_printf_i+0x1dc>
  403898:	f011 0f40 	tst.w	r1, #64	; 0x40
  40389c:	f102 0104 	add.w	r1, r2, #4
  4038a0:	6019      	str	r1, [r3, #0]
  4038a2:	d0d7      	beq.n	403854 <_printf_i+0x50>
  4038a4:	f9b2 3000 	ldrsh.w	r3, [r2]
  4038a8:	2b00      	cmp	r3, #0
  4038aa:	da03      	bge.n	4038b4 <_printf_i+0xb0>
  4038ac:	222d      	movs	r2, #45	; 0x2d
  4038ae:	425b      	negs	r3, r3
  4038b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  4038b4:	4962      	ldr	r1, [pc, #392]	; (403a40 <_printf_i+0x23c>)
  4038b6:	220a      	movs	r2, #10
  4038b8:	e017      	b.n	4038ea <_printf_i+0xe6>
  4038ba:	6820      	ldr	r0, [r4, #0]
  4038bc:	6819      	ldr	r1, [r3, #0]
  4038be:	f010 0f80 	tst.w	r0, #128	; 0x80
  4038c2:	d003      	beq.n	4038cc <_printf_i+0xc8>
  4038c4:	1d08      	adds	r0, r1, #4
  4038c6:	6018      	str	r0, [r3, #0]
  4038c8:	680b      	ldr	r3, [r1, #0]
  4038ca:	e006      	b.n	4038da <_printf_i+0xd6>
  4038cc:	f010 0f40 	tst.w	r0, #64	; 0x40
  4038d0:	f101 0004 	add.w	r0, r1, #4
  4038d4:	6018      	str	r0, [r3, #0]
  4038d6:	d0f7      	beq.n	4038c8 <_printf_i+0xc4>
  4038d8:	880b      	ldrh	r3, [r1, #0]
  4038da:	4959      	ldr	r1, [pc, #356]	; (403a40 <_printf_i+0x23c>)
  4038dc:	2a6f      	cmp	r2, #111	; 0x6f
  4038de:	bf14      	ite	ne
  4038e0:	220a      	movne	r2, #10
  4038e2:	2208      	moveq	r2, #8
  4038e4:	2000      	movs	r0, #0
  4038e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  4038ea:	6865      	ldr	r5, [r4, #4]
  4038ec:	60a5      	str	r5, [r4, #8]
  4038ee:	2d00      	cmp	r5, #0
  4038f0:	f2c0 809c 	blt.w	403a2c <_printf_i+0x228>
  4038f4:	6820      	ldr	r0, [r4, #0]
  4038f6:	f020 0004 	bic.w	r0, r0, #4
  4038fa:	6020      	str	r0, [r4, #0]
  4038fc:	2b00      	cmp	r3, #0
  4038fe:	d13f      	bne.n	403980 <_printf_i+0x17c>
  403900:	2d00      	cmp	r5, #0
  403902:	f040 8095 	bne.w	403a30 <_printf_i+0x22c>
  403906:	4675      	mov	r5, lr
  403908:	2a08      	cmp	r2, #8
  40390a:	d10b      	bne.n	403924 <_printf_i+0x120>
  40390c:	6823      	ldr	r3, [r4, #0]
  40390e:	07da      	lsls	r2, r3, #31
  403910:	d508      	bpl.n	403924 <_printf_i+0x120>
  403912:	6923      	ldr	r3, [r4, #16]
  403914:	6862      	ldr	r2, [r4, #4]
  403916:	429a      	cmp	r2, r3
  403918:	bfde      	ittt	le
  40391a:	2330      	movle	r3, #48	; 0x30
  40391c:	f805 3c01 	strble.w	r3, [r5, #-1]
  403920:	f105 35ff 	addle.w	r5, r5, #4294967295
  403924:	ebae 0305 	sub.w	r3, lr, r5
  403928:	6123      	str	r3, [r4, #16]
  40392a:	f8cd 8000 	str.w	r8, [sp]
  40392e:	463b      	mov	r3, r7
  403930:	aa03      	add	r2, sp, #12
  403932:	4621      	mov	r1, r4
  403934:	4630      	mov	r0, r6
  403936:	f7ff feef 	bl	403718 <_printf_common>
  40393a:	3001      	adds	r0, #1
  40393c:	d155      	bne.n	4039ea <_printf_i+0x1e6>
  40393e:	f04f 30ff 	mov.w	r0, #4294967295
  403942:	b005      	add	sp, #20
  403944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403948:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  40394c:	493c      	ldr	r1, [pc, #240]	; (403a40 <_printf_i+0x23c>)
  40394e:	6822      	ldr	r2, [r4, #0]
  403950:	6818      	ldr	r0, [r3, #0]
  403952:	f012 0f80 	tst.w	r2, #128	; 0x80
  403956:	f100 0504 	add.w	r5, r0, #4
  40395a:	601d      	str	r5, [r3, #0]
  40395c:	d001      	beq.n	403962 <_printf_i+0x15e>
  40395e:	6803      	ldr	r3, [r0, #0]
  403960:	e002      	b.n	403968 <_printf_i+0x164>
  403962:	0655      	lsls	r5, r2, #25
  403964:	d5fb      	bpl.n	40395e <_printf_i+0x15a>
  403966:	8803      	ldrh	r3, [r0, #0]
  403968:	07d0      	lsls	r0, r2, #31
  40396a:	bf44      	itt	mi
  40396c:	f042 0220 	orrmi.w	r2, r2, #32
  403970:	6022      	strmi	r2, [r4, #0]
  403972:	b91b      	cbnz	r3, 40397c <_printf_i+0x178>
  403974:	6822      	ldr	r2, [r4, #0]
  403976:	f022 0220 	bic.w	r2, r2, #32
  40397a:	6022      	str	r2, [r4, #0]
  40397c:	2210      	movs	r2, #16
  40397e:	e7b1      	b.n	4038e4 <_printf_i+0xe0>
  403980:	4675      	mov	r5, lr
  403982:	fbb3 f0f2 	udiv	r0, r3, r2
  403986:	fb02 3310 	mls	r3, r2, r0, r3
  40398a:	5ccb      	ldrb	r3, [r1, r3]
  40398c:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403990:	4603      	mov	r3, r0
  403992:	2800      	cmp	r0, #0
  403994:	d1f5      	bne.n	403982 <_printf_i+0x17e>
  403996:	e7b7      	b.n	403908 <_printf_i+0x104>
  403998:	6808      	ldr	r0, [r1, #0]
  40399a:	681a      	ldr	r2, [r3, #0]
  40399c:	6949      	ldr	r1, [r1, #20]
  40399e:	f010 0f80 	tst.w	r0, #128	; 0x80
  4039a2:	d004      	beq.n	4039ae <_printf_i+0x1aa>
  4039a4:	1d10      	adds	r0, r2, #4
  4039a6:	6018      	str	r0, [r3, #0]
  4039a8:	6813      	ldr	r3, [r2, #0]
  4039aa:	6019      	str	r1, [r3, #0]
  4039ac:	e007      	b.n	4039be <_printf_i+0x1ba>
  4039ae:	f010 0f40 	tst.w	r0, #64	; 0x40
  4039b2:	f102 0004 	add.w	r0, r2, #4
  4039b6:	6018      	str	r0, [r3, #0]
  4039b8:	6813      	ldr	r3, [r2, #0]
  4039ba:	d0f6      	beq.n	4039aa <_printf_i+0x1a6>
  4039bc:	8019      	strh	r1, [r3, #0]
  4039be:	2300      	movs	r3, #0
  4039c0:	6123      	str	r3, [r4, #16]
  4039c2:	4675      	mov	r5, lr
  4039c4:	e7b1      	b.n	40392a <_printf_i+0x126>
  4039c6:	681a      	ldr	r2, [r3, #0]
  4039c8:	1d11      	adds	r1, r2, #4
  4039ca:	6019      	str	r1, [r3, #0]
  4039cc:	6815      	ldr	r5, [r2, #0]
  4039ce:	6862      	ldr	r2, [r4, #4]
  4039d0:	2100      	movs	r1, #0
  4039d2:	4628      	mov	r0, r5
  4039d4:	f001 f964 	bl	404ca0 <memchr>
  4039d8:	b108      	cbz	r0, 4039de <_printf_i+0x1da>
  4039da:	1b40      	subs	r0, r0, r5
  4039dc:	6060      	str	r0, [r4, #4]
  4039de:	6863      	ldr	r3, [r4, #4]
  4039e0:	6123      	str	r3, [r4, #16]
  4039e2:	2300      	movs	r3, #0
  4039e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4039e8:	e79f      	b.n	40392a <_printf_i+0x126>
  4039ea:	6923      	ldr	r3, [r4, #16]
  4039ec:	462a      	mov	r2, r5
  4039ee:	4639      	mov	r1, r7
  4039f0:	4630      	mov	r0, r6
  4039f2:	47c0      	blx	r8
  4039f4:	3001      	adds	r0, #1
  4039f6:	d0a2      	beq.n	40393e <_printf_i+0x13a>
  4039f8:	6823      	ldr	r3, [r4, #0]
  4039fa:	079b      	lsls	r3, r3, #30
  4039fc:	d507      	bpl.n	403a0e <_printf_i+0x20a>
  4039fe:	2500      	movs	r5, #0
  403a00:	f104 0919 	add.w	r9, r4, #25
  403a04:	68e3      	ldr	r3, [r4, #12]
  403a06:	9a03      	ldr	r2, [sp, #12]
  403a08:	1a9b      	subs	r3, r3, r2
  403a0a:	429d      	cmp	r5, r3
  403a0c:	db05      	blt.n	403a1a <_printf_i+0x216>
  403a0e:	68e0      	ldr	r0, [r4, #12]
  403a10:	9b03      	ldr	r3, [sp, #12]
  403a12:	4298      	cmp	r0, r3
  403a14:	bfb8      	it	lt
  403a16:	4618      	movlt	r0, r3
  403a18:	e793      	b.n	403942 <_printf_i+0x13e>
  403a1a:	2301      	movs	r3, #1
  403a1c:	464a      	mov	r2, r9
  403a1e:	4639      	mov	r1, r7
  403a20:	4630      	mov	r0, r6
  403a22:	47c0      	blx	r8
  403a24:	3001      	adds	r0, #1
  403a26:	d08a      	beq.n	40393e <_printf_i+0x13a>
  403a28:	3501      	adds	r5, #1
  403a2a:	e7eb      	b.n	403a04 <_printf_i+0x200>
  403a2c:	2b00      	cmp	r3, #0
  403a2e:	d1a7      	bne.n	403980 <_printf_i+0x17c>
  403a30:	780b      	ldrb	r3, [r1, #0]
  403a32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403a36:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403a3a:	e765      	b.n	403908 <_printf_i+0x104>
  403a3c:	00405e2f 	.word	0x00405e2f
  403a40:	00405e1e 	.word	0x00405e1e

00403a44 <iprintf>:
  403a44:	b40f      	push	{r0, r1, r2, r3}
  403a46:	4b0a      	ldr	r3, [pc, #40]	; (403a70 <iprintf+0x2c>)
  403a48:	b513      	push	{r0, r1, r4, lr}
  403a4a:	681c      	ldr	r4, [r3, #0]
  403a4c:	b124      	cbz	r4, 403a58 <iprintf+0x14>
  403a4e:	69a3      	ldr	r3, [r4, #24]
  403a50:	b913      	cbnz	r3, 403a58 <iprintf+0x14>
  403a52:	4620      	mov	r0, r4
  403a54:	f001 f81c 	bl	404a90 <__sinit>
  403a58:	ab05      	add	r3, sp, #20
  403a5a:	9a04      	ldr	r2, [sp, #16]
  403a5c:	68a1      	ldr	r1, [r4, #8]
  403a5e:	9301      	str	r3, [sp, #4]
  403a60:	4620      	mov	r0, r4
  403a62:	f001 fd1f 	bl	4054a4 <_vfiprintf_r>
  403a66:	b002      	add	sp, #8
  403a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403a6c:	b004      	add	sp, #16
  403a6e:	4770      	bx	lr
  403a70:	20400048 	.word	0x20400048

00403a74 <setbuf>:
  403a74:	2900      	cmp	r1, #0
  403a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403a7a:	bf0c      	ite	eq
  403a7c:	2202      	moveq	r2, #2
  403a7e:	2200      	movne	r2, #0
  403a80:	f000 b800 	b.w	403a84 <setvbuf>

00403a84 <setvbuf>:
  403a84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403a88:	461d      	mov	r5, r3
  403a8a:	4b51      	ldr	r3, [pc, #324]	; (403bd0 <setvbuf+0x14c>)
  403a8c:	681e      	ldr	r6, [r3, #0]
  403a8e:	4604      	mov	r4, r0
  403a90:	460f      	mov	r7, r1
  403a92:	4690      	mov	r8, r2
  403a94:	b126      	cbz	r6, 403aa0 <setvbuf+0x1c>
  403a96:	69b3      	ldr	r3, [r6, #24]
  403a98:	b913      	cbnz	r3, 403aa0 <setvbuf+0x1c>
  403a9a:	4630      	mov	r0, r6
  403a9c:	f000 fff8 	bl	404a90 <__sinit>
  403aa0:	4b4c      	ldr	r3, [pc, #304]	; (403bd4 <setvbuf+0x150>)
  403aa2:	429c      	cmp	r4, r3
  403aa4:	d152      	bne.n	403b4c <setvbuf+0xc8>
  403aa6:	6874      	ldr	r4, [r6, #4]
  403aa8:	f1b8 0f02 	cmp.w	r8, #2
  403aac:	d006      	beq.n	403abc <setvbuf+0x38>
  403aae:	f1b8 0f01 	cmp.w	r8, #1
  403ab2:	f200 8089 	bhi.w	403bc8 <setvbuf+0x144>
  403ab6:	2d00      	cmp	r5, #0
  403ab8:	f2c0 8086 	blt.w	403bc8 <setvbuf+0x144>
  403abc:	4621      	mov	r1, r4
  403abe:	4630      	mov	r0, r6
  403ac0:	f000 ff7c 	bl	4049bc <_fflush_r>
  403ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403ac6:	b141      	cbz	r1, 403ada <setvbuf+0x56>
  403ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403acc:	4299      	cmp	r1, r3
  403ace:	d002      	beq.n	403ad6 <setvbuf+0x52>
  403ad0:	4630      	mov	r0, r6
  403ad2:	f001 fc13 	bl	4052fc <_free_r>
  403ad6:	2300      	movs	r3, #0
  403ad8:	6363      	str	r3, [r4, #52]	; 0x34
  403ada:	2300      	movs	r3, #0
  403adc:	61a3      	str	r3, [r4, #24]
  403ade:	6063      	str	r3, [r4, #4]
  403ae0:	89a3      	ldrh	r3, [r4, #12]
  403ae2:	061b      	lsls	r3, r3, #24
  403ae4:	d503      	bpl.n	403aee <setvbuf+0x6a>
  403ae6:	6921      	ldr	r1, [r4, #16]
  403ae8:	4630      	mov	r0, r6
  403aea:	f001 fc07 	bl	4052fc <_free_r>
  403aee:	89a3      	ldrh	r3, [r4, #12]
  403af0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403af4:	f023 0303 	bic.w	r3, r3, #3
  403af8:	f1b8 0f02 	cmp.w	r8, #2
  403afc:	81a3      	strh	r3, [r4, #12]
  403afe:	d05d      	beq.n	403bbc <setvbuf+0x138>
  403b00:	ab01      	add	r3, sp, #4
  403b02:	466a      	mov	r2, sp
  403b04:	4621      	mov	r1, r4
  403b06:	4630      	mov	r0, r6
  403b08:	f001 f85a 	bl	404bc0 <__swhatbuf_r>
  403b0c:	89a3      	ldrh	r3, [r4, #12]
  403b0e:	4318      	orrs	r0, r3
  403b10:	81a0      	strh	r0, [r4, #12]
  403b12:	bb2d      	cbnz	r5, 403b60 <setvbuf+0xdc>
  403b14:	9d00      	ldr	r5, [sp, #0]
  403b16:	4628      	mov	r0, r5
  403b18:	f001 f8b6 	bl	404c88 <malloc>
  403b1c:	4607      	mov	r7, r0
  403b1e:	2800      	cmp	r0, #0
  403b20:	d14e      	bne.n	403bc0 <setvbuf+0x13c>
  403b22:	f8dd 9000 	ldr.w	r9, [sp]
  403b26:	45a9      	cmp	r9, r5
  403b28:	d13c      	bne.n	403ba4 <setvbuf+0x120>
  403b2a:	f04f 30ff 	mov.w	r0, #4294967295
  403b2e:	89a3      	ldrh	r3, [r4, #12]
  403b30:	f043 0302 	orr.w	r3, r3, #2
  403b34:	81a3      	strh	r3, [r4, #12]
  403b36:	2300      	movs	r3, #0
  403b38:	60a3      	str	r3, [r4, #8]
  403b3a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  403b3e:	6023      	str	r3, [r4, #0]
  403b40:	6123      	str	r3, [r4, #16]
  403b42:	2301      	movs	r3, #1
  403b44:	6163      	str	r3, [r4, #20]
  403b46:	b003      	add	sp, #12
  403b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403b4c:	4b22      	ldr	r3, [pc, #136]	; (403bd8 <setvbuf+0x154>)
  403b4e:	429c      	cmp	r4, r3
  403b50:	d101      	bne.n	403b56 <setvbuf+0xd2>
  403b52:	68b4      	ldr	r4, [r6, #8]
  403b54:	e7a8      	b.n	403aa8 <setvbuf+0x24>
  403b56:	4b21      	ldr	r3, [pc, #132]	; (403bdc <setvbuf+0x158>)
  403b58:	429c      	cmp	r4, r3
  403b5a:	bf08      	it	eq
  403b5c:	68f4      	ldreq	r4, [r6, #12]
  403b5e:	e7a3      	b.n	403aa8 <setvbuf+0x24>
  403b60:	2f00      	cmp	r7, #0
  403b62:	d0d8      	beq.n	403b16 <setvbuf+0x92>
  403b64:	69b3      	ldr	r3, [r6, #24]
  403b66:	b913      	cbnz	r3, 403b6e <setvbuf+0xea>
  403b68:	4630      	mov	r0, r6
  403b6a:	f000 ff91 	bl	404a90 <__sinit>
  403b6e:	f1b8 0f01 	cmp.w	r8, #1
  403b72:	bf08      	it	eq
  403b74:	89a3      	ldrheq	r3, [r4, #12]
  403b76:	6027      	str	r7, [r4, #0]
  403b78:	bf04      	itt	eq
  403b7a:	f043 0301 	orreq.w	r3, r3, #1
  403b7e:	81a3      	strheq	r3, [r4, #12]
  403b80:	89a3      	ldrh	r3, [r4, #12]
  403b82:	6127      	str	r7, [r4, #16]
  403b84:	f013 0008 	ands.w	r0, r3, #8
  403b88:	6165      	str	r5, [r4, #20]
  403b8a:	d01b      	beq.n	403bc4 <setvbuf+0x140>
  403b8c:	f013 0001 	ands.w	r0, r3, #1
  403b90:	bf18      	it	ne
  403b92:	426d      	negne	r5, r5
  403b94:	f04f 0300 	mov.w	r3, #0
  403b98:	bf1d      	ittte	ne
  403b9a:	60a3      	strne	r3, [r4, #8]
  403b9c:	61a5      	strne	r5, [r4, #24]
  403b9e:	4618      	movne	r0, r3
  403ba0:	60a5      	streq	r5, [r4, #8]
  403ba2:	e7d0      	b.n	403b46 <setvbuf+0xc2>
  403ba4:	4648      	mov	r0, r9
  403ba6:	f001 f86f 	bl	404c88 <malloc>
  403baa:	4607      	mov	r7, r0
  403bac:	2800      	cmp	r0, #0
  403bae:	d0bc      	beq.n	403b2a <setvbuf+0xa6>
  403bb0:	89a3      	ldrh	r3, [r4, #12]
  403bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403bb6:	81a3      	strh	r3, [r4, #12]
  403bb8:	464d      	mov	r5, r9
  403bba:	e7d3      	b.n	403b64 <setvbuf+0xe0>
  403bbc:	2000      	movs	r0, #0
  403bbe:	e7b6      	b.n	403b2e <setvbuf+0xaa>
  403bc0:	46a9      	mov	r9, r5
  403bc2:	e7f5      	b.n	403bb0 <setvbuf+0x12c>
  403bc4:	60a0      	str	r0, [r4, #8]
  403bc6:	e7be      	b.n	403b46 <setvbuf+0xc2>
  403bc8:	f04f 30ff 	mov.w	r0, #4294967295
  403bcc:	e7bb      	b.n	403b46 <setvbuf+0xc2>
  403bce:	bf00      	nop
  403bd0:	20400048 	.word	0x20400048
  403bd4:	00405e70 	.word	0x00405e70
  403bd8:	00405e90 	.word	0x00405e90
  403bdc:	00405e50 	.word	0x00405e50

00403be0 <strlen>:
  403be0:	4603      	mov	r3, r0
  403be2:	f813 2b01 	ldrb.w	r2, [r3], #1
  403be6:	2a00      	cmp	r2, #0
  403be8:	d1fb      	bne.n	403be2 <strlen+0x2>
  403bea:	1a18      	subs	r0, r3, r0
  403bec:	3801      	subs	r0, #1
  403bee:	4770      	bx	lr

00403bf0 <quorem>:
  403bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403bf4:	6903      	ldr	r3, [r0, #16]
  403bf6:	690c      	ldr	r4, [r1, #16]
  403bf8:	429c      	cmp	r4, r3
  403bfa:	4680      	mov	r8, r0
  403bfc:	f300 8082 	bgt.w	403d04 <quorem+0x114>
  403c00:	3c01      	subs	r4, #1
  403c02:	f101 0714 	add.w	r7, r1, #20
  403c06:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  403c0a:	f100 0614 	add.w	r6, r0, #20
  403c0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  403c12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  403c16:	eb06 030e 	add.w	r3, r6, lr
  403c1a:	3501      	adds	r5, #1
  403c1c:	eb07 090e 	add.w	r9, r7, lr
  403c20:	9301      	str	r3, [sp, #4]
  403c22:	fbb0 f5f5 	udiv	r5, r0, r5
  403c26:	b395      	cbz	r5, 403c8e <quorem+0x9e>
  403c28:	f04f 0a00 	mov.w	sl, #0
  403c2c:	4638      	mov	r0, r7
  403c2e:	46b4      	mov	ip, r6
  403c30:	46d3      	mov	fp, sl
  403c32:	f850 2b04 	ldr.w	r2, [r0], #4
  403c36:	b293      	uxth	r3, r2
  403c38:	fb05 a303 	mla	r3, r5, r3, sl
  403c3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  403c40:	b29b      	uxth	r3, r3
  403c42:	ebab 0303 	sub.w	r3, fp, r3
  403c46:	0c12      	lsrs	r2, r2, #16
  403c48:	f8bc b000 	ldrh.w	fp, [ip]
  403c4c:	fb05 a202 	mla	r2, r5, r2, sl
  403c50:	fa13 f38b 	uxtah	r3, r3, fp
  403c54:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  403c58:	fa1f fb82 	uxth.w	fp, r2
  403c5c:	f8dc 2000 	ldr.w	r2, [ip]
  403c60:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  403c64:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403c68:	b29b      	uxth	r3, r3
  403c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403c6e:	4581      	cmp	r9, r0
  403c70:	ea4f 4b22 	mov.w	fp, r2, asr #16
  403c74:	f84c 3b04 	str.w	r3, [ip], #4
  403c78:	d2db      	bcs.n	403c32 <quorem+0x42>
  403c7a:	f856 300e 	ldr.w	r3, [r6, lr]
  403c7e:	b933      	cbnz	r3, 403c8e <quorem+0x9e>
  403c80:	9b01      	ldr	r3, [sp, #4]
  403c82:	3b04      	subs	r3, #4
  403c84:	429e      	cmp	r6, r3
  403c86:	461a      	mov	r2, r3
  403c88:	d330      	bcc.n	403cec <quorem+0xfc>
  403c8a:	f8c8 4010 	str.w	r4, [r8, #16]
  403c8e:	4640      	mov	r0, r8
  403c90:	f001 fa5f 	bl	405152 <__mcmp>
  403c94:	2800      	cmp	r0, #0
  403c96:	db25      	blt.n	403ce4 <quorem+0xf4>
  403c98:	3501      	adds	r5, #1
  403c9a:	4630      	mov	r0, r6
  403c9c:	f04f 0e00 	mov.w	lr, #0
  403ca0:	f857 2b04 	ldr.w	r2, [r7], #4
  403ca4:	f8d0 c000 	ldr.w	ip, [r0]
  403ca8:	b293      	uxth	r3, r2
  403caa:	ebae 0303 	sub.w	r3, lr, r3
  403cae:	0c12      	lsrs	r2, r2, #16
  403cb0:	fa13 f38c 	uxtah	r3, r3, ip
  403cb4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  403cb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403cbc:	b29b      	uxth	r3, r3
  403cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403cc2:	45b9      	cmp	r9, r7
  403cc4:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403cc8:	f840 3b04 	str.w	r3, [r0], #4
  403ccc:	d2e8      	bcs.n	403ca0 <quorem+0xb0>
  403cce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403cd2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  403cd6:	b92a      	cbnz	r2, 403ce4 <quorem+0xf4>
  403cd8:	3b04      	subs	r3, #4
  403cda:	429e      	cmp	r6, r3
  403cdc:	461a      	mov	r2, r3
  403cde:	d30b      	bcc.n	403cf8 <quorem+0x108>
  403ce0:	f8c8 4010 	str.w	r4, [r8, #16]
  403ce4:	4628      	mov	r0, r5
  403ce6:	b003      	add	sp, #12
  403ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403cec:	6812      	ldr	r2, [r2, #0]
  403cee:	3b04      	subs	r3, #4
  403cf0:	2a00      	cmp	r2, #0
  403cf2:	d1ca      	bne.n	403c8a <quorem+0x9a>
  403cf4:	3c01      	subs	r4, #1
  403cf6:	e7c5      	b.n	403c84 <quorem+0x94>
  403cf8:	6812      	ldr	r2, [r2, #0]
  403cfa:	3b04      	subs	r3, #4
  403cfc:	2a00      	cmp	r2, #0
  403cfe:	d1ef      	bne.n	403ce0 <quorem+0xf0>
  403d00:	3c01      	subs	r4, #1
  403d02:	e7ea      	b.n	403cda <quorem+0xea>
  403d04:	2000      	movs	r0, #0
  403d06:	e7ee      	b.n	403ce6 <quorem+0xf6>

00403d08 <_dtoa_r>:
  403d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d0c:	6a46      	ldr	r6, [r0, #36]	; 0x24
  403d0e:	b095      	sub	sp, #84	; 0x54
  403d10:	4604      	mov	r4, r0
  403d12:	9d21      	ldr	r5, [sp, #132]	; 0x84
  403d14:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403d18:	b93e      	cbnz	r6, 403d2a <_dtoa_r+0x22>
  403d1a:	2010      	movs	r0, #16
  403d1c:	f000 ffb4 	bl	404c88 <malloc>
  403d20:	6260      	str	r0, [r4, #36]	; 0x24
  403d22:	6046      	str	r6, [r0, #4]
  403d24:	6086      	str	r6, [r0, #8]
  403d26:	6006      	str	r6, [r0, #0]
  403d28:	60c6      	str	r6, [r0, #12]
  403d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403d2c:	6819      	ldr	r1, [r3, #0]
  403d2e:	b151      	cbz	r1, 403d46 <_dtoa_r+0x3e>
  403d30:	685a      	ldr	r2, [r3, #4]
  403d32:	604a      	str	r2, [r1, #4]
  403d34:	2301      	movs	r3, #1
  403d36:	4093      	lsls	r3, r2
  403d38:	608b      	str	r3, [r1, #8]
  403d3a:	4620      	mov	r0, r4
  403d3c:	f001 f834 	bl	404da8 <_Bfree>
  403d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403d42:	2200      	movs	r2, #0
  403d44:	601a      	str	r2, [r3, #0]
  403d46:	9b03      	ldr	r3, [sp, #12]
  403d48:	2b00      	cmp	r3, #0
  403d4a:	bfbf      	itttt	lt
  403d4c:	2301      	movlt	r3, #1
  403d4e:	602b      	strlt	r3, [r5, #0]
  403d50:	9b03      	ldrlt	r3, [sp, #12]
  403d52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  403d56:	bfb2      	itee	lt
  403d58:	9303      	strlt	r3, [sp, #12]
  403d5a:	2300      	movge	r3, #0
  403d5c:	602b      	strge	r3, [r5, #0]
  403d5e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  403d62:	4ba9      	ldr	r3, [pc, #676]	; (404008 <_dtoa_r+0x300>)
  403d64:	ea33 0309 	bics.w	r3, r3, r9
  403d68:	d11b      	bne.n	403da2 <_dtoa_r+0x9a>
  403d6a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403d6c:	f242 730f 	movw	r3, #9999	; 0x270f
  403d70:	6013      	str	r3, [r2, #0]
  403d72:	9b02      	ldr	r3, [sp, #8]
  403d74:	b923      	cbnz	r3, 403d80 <_dtoa_r+0x78>
  403d76:	f3c9 0013 	ubfx	r0, r9, #0, #20
  403d7a:	2800      	cmp	r0, #0
  403d7c:	f000 8581 	beq.w	404882 <_dtoa_r+0xb7a>
  403d80:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403d82:	b953      	cbnz	r3, 403d9a <_dtoa_r+0x92>
  403d84:	4ba1      	ldr	r3, [pc, #644]	; (40400c <_dtoa_r+0x304>)
  403d86:	e021      	b.n	403dcc <_dtoa_r+0xc4>
  403d88:	4ba1      	ldr	r3, [pc, #644]	; (404010 <_dtoa_r+0x308>)
  403d8a:	9306      	str	r3, [sp, #24]
  403d8c:	3308      	adds	r3, #8
  403d8e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403d90:	6013      	str	r3, [r2, #0]
  403d92:	9806      	ldr	r0, [sp, #24]
  403d94:	b015      	add	sp, #84	; 0x54
  403d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d9a:	4b9c      	ldr	r3, [pc, #624]	; (40400c <_dtoa_r+0x304>)
  403d9c:	9306      	str	r3, [sp, #24]
  403d9e:	3303      	adds	r3, #3
  403da0:	e7f5      	b.n	403d8e <_dtoa_r+0x86>
  403da2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  403da6:	2200      	movs	r2, #0
  403da8:	2300      	movs	r3, #0
  403daa:	4630      	mov	r0, r6
  403dac:	4639      	mov	r1, r7
  403dae:	f7ff f959 	bl	403064 <__aeabi_dcmpeq>
  403db2:	4680      	mov	r8, r0
  403db4:	b160      	cbz	r0, 403dd0 <_dtoa_r+0xc8>
  403db6:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403db8:	2301      	movs	r3, #1
  403dba:	6013      	str	r3, [r2, #0]
  403dbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403dbe:	2b00      	cmp	r3, #0
  403dc0:	f000 855c 	beq.w	40487c <_dtoa_r+0xb74>
  403dc4:	4b93      	ldr	r3, [pc, #588]	; (404014 <_dtoa_r+0x30c>)
  403dc6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403dc8:	6013      	str	r3, [r2, #0]
  403dca:	3b01      	subs	r3, #1
  403dcc:	9306      	str	r3, [sp, #24]
  403dce:	e7e0      	b.n	403d92 <_dtoa_r+0x8a>
  403dd0:	ab12      	add	r3, sp, #72	; 0x48
  403dd2:	9301      	str	r3, [sp, #4]
  403dd4:	ab13      	add	r3, sp, #76	; 0x4c
  403dd6:	9300      	str	r3, [sp, #0]
  403dd8:	4632      	mov	r2, r6
  403dda:	463b      	mov	r3, r7
  403ddc:	4620      	mov	r0, r4
  403dde:	f001 fa30 	bl	405242 <__d2b>
  403de2:	f3c9 550a 	ubfx	r5, r9, #20, #11
  403de6:	4682      	mov	sl, r0
  403de8:	2d00      	cmp	r5, #0
  403dea:	d07c      	beq.n	403ee6 <_dtoa_r+0x1de>
  403dec:	f3c7 0313 	ubfx	r3, r7, #0, #20
  403df0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  403df4:	4630      	mov	r0, r6
  403df6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403dfa:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  403dfe:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  403e02:	2200      	movs	r2, #0
  403e04:	4b84      	ldr	r3, [pc, #528]	; (404018 <_dtoa_r+0x310>)
  403e06:	f7fe fd11 	bl	40282c <__aeabi_dsub>
  403e0a:	a379      	add	r3, pc, #484	; (adr r3, 403ff0 <_dtoa_r+0x2e8>)
  403e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e10:	f7fe fec0 	bl	402b94 <__aeabi_dmul>
  403e14:	a378      	add	r3, pc, #480	; (adr r3, 403ff8 <_dtoa_r+0x2f0>)
  403e16:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e1a:	f7fe fd09 	bl	402830 <__adddf3>
  403e1e:	4606      	mov	r6, r0
  403e20:	4628      	mov	r0, r5
  403e22:	460f      	mov	r7, r1
  403e24:	f7fe fe50 	bl	402ac8 <__aeabi_i2d>
  403e28:	a375      	add	r3, pc, #468	; (adr r3, 404000 <_dtoa_r+0x2f8>)
  403e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e2e:	f7fe feb1 	bl	402b94 <__aeabi_dmul>
  403e32:	4602      	mov	r2, r0
  403e34:	460b      	mov	r3, r1
  403e36:	4630      	mov	r0, r6
  403e38:	4639      	mov	r1, r7
  403e3a:	f7fe fcf9 	bl	402830 <__adddf3>
  403e3e:	4606      	mov	r6, r0
  403e40:	460f      	mov	r7, r1
  403e42:	f7ff f941 	bl	4030c8 <__aeabi_d2iz>
  403e46:	2200      	movs	r2, #0
  403e48:	4683      	mov	fp, r0
  403e4a:	2300      	movs	r3, #0
  403e4c:	4630      	mov	r0, r6
  403e4e:	4639      	mov	r1, r7
  403e50:	f7ff f912 	bl	403078 <__aeabi_dcmplt>
  403e54:	b158      	cbz	r0, 403e6e <_dtoa_r+0x166>
  403e56:	4658      	mov	r0, fp
  403e58:	f7fe fe36 	bl	402ac8 <__aeabi_i2d>
  403e5c:	4602      	mov	r2, r0
  403e5e:	460b      	mov	r3, r1
  403e60:	4630      	mov	r0, r6
  403e62:	4639      	mov	r1, r7
  403e64:	f7ff f8fe 	bl	403064 <__aeabi_dcmpeq>
  403e68:	b908      	cbnz	r0, 403e6e <_dtoa_r+0x166>
  403e6a:	f10b 3bff 	add.w	fp, fp, #4294967295
  403e6e:	f1bb 0f16 	cmp.w	fp, #22
  403e72:	d857      	bhi.n	403f24 <_dtoa_r+0x21c>
  403e74:	4969      	ldr	r1, [pc, #420]	; (40401c <_dtoa_r+0x314>)
  403e76:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  403e7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
  403e82:	f7ff f917 	bl	4030b4 <__aeabi_dcmpgt>
  403e86:	2800      	cmp	r0, #0
  403e88:	d04e      	beq.n	403f28 <_dtoa_r+0x220>
  403e8a:	f10b 3bff 	add.w	fp, fp, #4294967295
  403e8e:	2300      	movs	r3, #0
  403e90:	930d      	str	r3, [sp, #52]	; 0x34
  403e92:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403e94:	1b5d      	subs	r5, r3, r5
  403e96:	1e6b      	subs	r3, r5, #1
  403e98:	9307      	str	r3, [sp, #28]
  403e9a:	bf43      	ittte	mi
  403e9c:	2300      	movmi	r3, #0
  403e9e:	f1c5 0801 	rsbmi	r8, r5, #1
  403ea2:	9307      	strmi	r3, [sp, #28]
  403ea4:	f04f 0800 	movpl.w	r8, #0
  403ea8:	f1bb 0f00 	cmp.w	fp, #0
  403eac:	db3e      	blt.n	403f2c <_dtoa_r+0x224>
  403eae:	9b07      	ldr	r3, [sp, #28]
  403eb0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  403eb4:	445b      	add	r3, fp
  403eb6:	9307      	str	r3, [sp, #28]
  403eb8:	2300      	movs	r3, #0
  403eba:	9308      	str	r3, [sp, #32]
  403ebc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403ebe:	2b09      	cmp	r3, #9
  403ec0:	f200 80b0 	bhi.w	404024 <_dtoa_r+0x31c>
  403ec4:	2b05      	cmp	r3, #5
  403ec6:	bfc4      	itt	gt
  403ec8:	3b04      	subgt	r3, #4
  403eca:	931e      	strgt	r3, [sp, #120]	; 0x78
  403ecc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403ece:	f1a3 0302 	sub.w	r3, r3, #2
  403ed2:	bfcc      	ite	gt
  403ed4:	2600      	movgt	r6, #0
  403ed6:	2601      	movle	r6, #1
  403ed8:	2b03      	cmp	r3, #3
  403eda:	f200 80af 	bhi.w	40403c <_dtoa_r+0x334>
  403ede:	e8df f003 	tbb	[pc, r3]
  403ee2:	8583      	.short	0x8583
  403ee4:	772d      	.short	0x772d
  403ee6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403ee8:	9d12      	ldr	r5, [sp, #72]	; 0x48
  403eea:	441d      	add	r5, r3
  403eec:	f205 4332 	addw	r3, r5, #1074	; 0x432
  403ef0:	2b20      	cmp	r3, #32
  403ef2:	dd11      	ble.n	403f18 <_dtoa_r+0x210>
  403ef4:	9a02      	ldr	r2, [sp, #8]
  403ef6:	f205 4012 	addw	r0, r5, #1042	; 0x412
  403efa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  403efe:	fa22 f000 	lsr.w	r0, r2, r0
  403f02:	fa09 f303 	lsl.w	r3, r9, r3
  403f06:	4318      	orrs	r0, r3
  403f08:	f7fe fdce 	bl	402aa8 <__aeabi_ui2d>
  403f0c:	2301      	movs	r3, #1
  403f0e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403f12:	3d01      	subs	r5, #1
  403f14:	9310      	str	r3, [sp, #64]	; 0x40
  403f16:	e774      	b.n	403e02 <_dtoa_r+0xfa>
  403f18:	f1c3 0020 	rsb	r0, r3, #32
  403f1c:	9b02      	ldr	r3, [sp, #8]
  403f1e:	fa03 f000 	lsl.w	r0, r3, r0
  403f22:	e7f1      	b.n	403f08 <_dtoa_r+0x200>
  403f24:	2301      	movs	r3, #1
  403f26:	e7b3      	b.n	403e90 <_dtoa_r+0x188>
  403f28:	900d      	str	r0, [sp, #52]	; 0x34
  403f2a:	e7b2      	b.n	403e92 <_dtoa_r+0x18a>
  403f2c:	f1cb 0300 	rsb	r3, fp, #0
  403f30:	9308      	str	r3, [sp, #32]
  403f32:	2300      	movs	r3, #0
  403f34:	eba8 080b 	sub.w	r8, r8, fp
  403f38:	930c      	str	r3, [sp, #48]	; 0x30
  403f3a:	e7bf      	b.n	403ebc <_dtoa_r+0x1b4>
  403f3c:	2301      	movs	r3, #1
  403f3e:	9309      	str	r3, [sp, #36]	; 0x24
  403f40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403f42:	2b00      	cmp	r3, #0
  403f44:	dd7d      	ble.n	404042 <_dtoa_r+0x33a>
  403f46:	9304      	str	r3, [sp, #16]
  403f48:	4699      	mov	r9, r3
  403f4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  403f4c:	2200      	movs	r2, #0
  403f4e:	606a      	str	r2, [r5, #4]
  403f50:	2104      	movs	r1, #4
  403f52:	f101 0214 	add.w	r2, r1, #20
  403f56:	429a      	cmp	r2, r3
  403f58:	d978      	bls.n	40404c <_dtoa_r+0x344>
  403f5a:	6869      	ldr	r1, [r5, #4]
  403f5c:	4620      	mov	r0, r4
  403f5e:	f000 feef 	bl	404d40 <_Balloc>
  403f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403f64:	6028      	str	r0, [r5, #0]
  403f66:	681b      	ldr	r3, [r3, #0]
  403f68:	9306      	str	r3, [sp, #24]
  403f6a:	f1b9 0f0e 	cmp.w	r9, #14
  403f6e:	f200 80ee 	bhi.w	40414e <_dtoa_r+0x446>
  403f72:	2e00      	cmp	r6, #0
  403f74:	f000 80eb 	beq.w	40414e <_dtoa_r+0x446>
  403f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403f7c:	f1bb 0f00 	cmp.w	fp, #0
  403f80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  403f84:	dd77      	ble.n	404076 <_dtoa_r+0x36e>
  403f86:	4a25      	ldr	r2, [pc, #148]	; (40401c <_dtoa_r+0x314>)
  403f88:	f00b 030f 	and.w	r3, fp, #15
  403f8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403f90:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f94:	ea4f 162b 	mov.w	r6, fp, asr #4
  403f98:	06f0      	lsls	r0, r6, #27
  403f9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  403f9e:	d55a      	bpl.n	404056 <_dtoa_r+0x34e>
  403fa0:	4b1f      	ldr	r3, [pc, #124]	; (404020 <_dtoa_r+0x318>)
  403fa2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403fa6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403faa:	f7fe ff1d 	bl	402de8 <__aeabi_ddiv>
  403fae:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403fb2:	f006 060f 	and.w	r6, r6, #15
  403fb6:	2503      	movs	r5, #3
  403fb8:	4f19      	ldr	r7, [pc, #100]	; (404020 <_dtoa_r+0x318>)
  403fba:	2e00      	cmp	r6, #0
  403fbc:	d14d      	bne.n	40405a <_dtoa_r+0x352>
  403fbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403fc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403fc6:	f7fe ff0f 	bl	402de8 <__aeabi_ddiv>
  403fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403fce:	e06c      	b.n	4040aa <_dtoa_r+0x3a2>
  403fd0:	2301      	movs	r3, #1
  403fd2:	9309      	str	r3, [sp, #36]	; 0x24
  403fd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403fd6:	445b      	add	r3, fp
  403fd8:	f103 0901 	add.w	r9, r3, #1
  403fdc:	9304      	str	r3, [sp, #16]
  403fde:	464b      	mov	r3, r9
  403fe0:	2b01      	cmp	r3, #1
  403fe2:	bfb8      	it	lt
  403fe4:	2301      	movlt	r3, #1
  403fe6:	e7b0      	b.n	403f4a <_dtoa_r+0x242>
  403fe8:	2300      	movs	r3, #0
  403fea:	e7a8      	b.n	403f3e <_dtoa_r+0x236>
  403fec:	2300      	movs	r3, #0
  403fee:	e7f0      	b.n	403fd2 <_dtoa_r+0x2ca>
  403ff0:	636f4361 	.word	0x636f4361
  403ff4:	3fd287a7 	.word	0x3fd287a7
  403ff8:	8b60c8b3 	.word	0x8b60c8b3
  403ffc:	3fc68a28 	.word	0x3fc68a28
  404000:	509f79fb 	.word	0x509f79fb
  404004:	3fd34413 	.word	0x3fd34413
  404008:	7ff00000 	.word	0x7ff00000
  40400c:	00405e49 	.word	0x00405e49
  404010:	00405e40 	.word	0x00405e40
  404014:	00405e1d 	.word	0x00405e1d
  404018:	3ff80000 	.word	0x3ff80000
  40401c:	00405ed8 	.word	0x00405ed8
  404020:	00405eb0 	.word	0x00405eb0
  404024:	2601      	movs	r6, #1
  404026:	2300      	movs	r3, #0
  404028:	931e      	str	r3, [sp, #120]	; 0x78
  40402a:	9609      	str	r6, [sp, #36]	; 0x24
  40402c:	f04f 33ff 	mov.w	r3, #4294967295
  404030:	9304      	str	r3, [sp, #16]
  404032:	4699      	mov	r9, r3
  404034:	2200      	movs	r2, #0
  404036:	2312      	movs	r3, #18
  404038:	921f      	str	r2, [sp, #124]	; 0x7c
  40403a:	e786      	b.n	403f4a <_dtoa_r+0x242>
  40403c:	2301      	movs	r3, #1
  40403e:	9309      	str	r3, [sp, #36]	; 0x24
  404040:	e7f4      	b.n	40402c <_dtoa_r+0x324>
  404042:	2301      	movs	r3, #1
  404044:	9304      	str	r3, [sp, #16]
  404046:	4699      	mov	r9, r3
  404048:	461a      	mov	r2, r3
  40404a:	e7f5      	b.n	404038 <_dtoa_r+0x330>
  40404c:	686a      	ldr	r2, [r5, #4]
  40404e:	3201      	adds	r2, #1
  404050:	606a      	str	r2, [r5, #4]
  404052:	0049      	lsls	r1, r1, #1
  404054:	e77d      	b.n	403f52 <_dtoa_r+0x24a>
  404056:	2502      	movs	r5, #2
  404058:	e7ae      	b.n	403fb8 <_dtoa_r+0x2b0>
  40405a:	07f1      	lsls	r1, r6, #31
  40405c:	d508      	bpl.n	404070 <_dtoa_r+0x368>
  40405e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404062:	e9d7 2300 	ldrd	r2, r3, [r7]
  404066:	f7fe fd95 	bl	402b94 <__aeabi_dmul>
  40406a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40406e:	3501      	adds	r5, #1
  404070:	1076      	asrs	r6, r6, #1
  404072:	3708      	adds	r7, #8
  404074:	e7a1      	b.n	403fba <_dtoa_r+0x2b2>
  404076:	f000 80a5 	beq.w	4041c4 <_dtoa_r+0x4bc>
  40407a:	f1cb 0600 	rsb	r6, fp, #0
  40407e:	4ba3      	ldr	r3, [pc, #652]	; (40430c <_dtoa_r+0x604>)
  404080:	4fa3      	ldr	r7, [pc, #652]	; (404310 <_dtoa_r+0x608>)
  404082:	f006 020f 	and.w	r2, r6, #15
  404086:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40408a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40408e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404092:	f7fe fd7f 	bl	402b94 <__aeabi_dmul>
  404096:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40409a:	1136      	asrs	r6, r6, #4
  40409c:	2300      	movs	r3, #0
  40409e:	2502      	movs	r5, #2
  4040a0:	2e00      	cmp	r6, #0
  4040a2:	f040 8084 	bne.w	4041ae <_dtoa_r+0x4a6>
  4040a6:	2b00      	cmp	r3, #0
  4040a8:	d18f      	bne.n	403fca <_dtoa_r+0x2c2>
  4040aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4040ac:	2b00      	cmp	r3, #0
  4040ae:	f000 808b 	beq.w	4041c8 <_dtoa_r+0x4c0>
  4040b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4040b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  4040ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4040be:	2200      	movs	r2, #0
  4040c0:	4b94      	ldr	r3, [pc, #592]	; (404314 <_dtoa_r+0x60c>)
  4040c2:	f7fe ffd9 	bl	403078 <__aeabi_dcmplt>
  4040c6:	2800      	cmp	r0, #0
  4040c8:	d07e      	beq.n	4041c8 <_dtoa_r+0x4c0>
  4040ca:	f1b9 0f00 	cmp.w	r9, #0
  4040ce:	d07b      	beq.n	4041c8 <_dtoa_r+0x4c0>
  4040d0:	9b04      	ldr	r3, [sp, #16]
  4040d2:	2b00      	cmp	r3, #0
  4040d4:	dd37      	ble.n	404146 <_dtoa_r+0x43e>
  4040d6:	2200      	movs	r2, #0
  4040d8:	4b8f      	ldr	r3, [pc, #572]	; (404318 <_dtoa_r+0x610>)
  4040da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4040de:	f7fe fd59 	bl	402b94 <__aeabi_dmul>
  4040e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4040e6:	9e04      	ldr	r6, [sp, #16]
  4040e8:	f10b 37ff 	add.w	r7, fp, #4294967295
  4040ec:	3501      	adds	r5, #1
  4040ee:	4628      	mov	r0, r5
  4040f0:	f7fe fcea 	bl	402ac8 <__aeabi_i2d>
  4040f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4040f8:	f7fe fd4c 	bl	402b94 <__aeabi_dmul>
  4040fc:	4b87      	ldr	r3, [pc, #540]	; (40431c <_dtoa_r+0x614>)
  4040fe:	2200      	movs	r2, #0
  404100:	f7fe fb96 	bl	402830 <__adddf3>
  404104:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40410a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  40410e:	950b      	str	r5, [sp, #44]	; 0x2c
  404110:	2e00      	cmp	r6, #0
  404112:	d15c      	bne.n	4041ce <_dtoa_r+0x4c6>
  404114:	2200      	movs	r2, #0
  404116:	4b82      	ldr	r3, [pc, #520]	; (404320 <_dtoa_r+0x618>)
  404118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40411c:	f7fe fb86 	bl	40282c <__aeabi_dsub>
  404120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404122:	462b      	mov	r3, r5
  404124:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404128:	f7fe ffc4 	bl	4030b4 <__aeabi_dcmpgt>
  40412c:	2800      	cmp	r0, #0
  40412e:	f040 82f7 	bne.w	404720 <_dtoa_r+0xa18>
  404132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404134:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  404138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40413c:	f7fe ff9c 	bl	403078 <__aeabi_dcmplt>
  404140:	2800      	cmp	r0, #0
  404142:	f040 82eb 	bne.w	40471c <_dtoa_r+0xa14>
  404146:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40414a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40414e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404150:	2b00      	cmp	r3, #0
  404152:	f2c0 8151 	blt.w	4043f8 <_dtoa_r+0x6f0>
  404156:	f1bb 0f0e 	cmp.w	fp, #14
  40415a:	f300 814d 	bgt.w	4043f8 <_dtoa_r+0x6f0>
  40415e:	4b6b      	ldr	r3, [pc, #428]	; (40430c <_dtoa_r+0x604>)
  404160:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  404164:	e9d3 2300 	ldrd	r2, r3, [r3]
  404168:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40416c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40416e:	2b00      	cmp	r3, #0
  404170:	f280 80da 	bge.w	404328 <_dtoa_r+0x620>
  404174:	f1b9 0f00 	cmp.w	r9, #0
  404178:	f300 80d6 	bgt.w	404328 <_dtoa_r+0x620>
  40417c:	f040 82cd 	bne.w	40471a <_dtoa_r+0xa12>
  404180:	2200      	movs	r2, #0
  404182:	4b67      	ldr	r3, [pc, #412]	; (404320 <_dtoa_r+0x618>)
  404184:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404188:	f7fe fd04 	bl	402b94 <__aeabi_dmul>
  40418c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404190:	f7fe ff86 	bl	4030a0 <__aeabi_dcmpge>
  404194:	464e      	mov	r6, r9
  404196:	464f      	mov	r7, r9
  404198:	2800      	cmp	r0, #0
  40419a:	f040 82a4 	bne.w	4046e6 <_dtoa_r+0x9de>
  40419e:	9b06      	ldr	r3, [sp, #24]
  4041a0:	9a06      	ldr	r2, [sp, #24]
  4041a2:	1c5d      	adds	r5, r3, #1
  4041a4:	2331      	movs	r3, #49	; 0x31
  4041a6:	7013      	strb	r3, [r2, #0]
  4041a8:	f10b 0b01 	add.w	fp, fp, #1
  4041ac:	e29f      	b.n	4046ee <_dtoa_r+0x9e6>
  4041ae:	07f2      	lsls	r2, r6, #31
  4041b0:	d505      	bpl.n	4041be <_dtoa_r+0x4b6>
  4041b2:	e9d7 2300 	ldrd	r2, r3, [r7]
  4041b6:	f7fe fced 	bl	402b94 <__aeabi_dmul>
  4041ba:	3501      	adds	r5, #1
  4041bc:	2301      	movs	r3, #1
  4041be:	1076      	asrs	r6, r6, #1
  4041c0:	3708      	adds	r7, #8
  4041c2:	e76d      	b.n	4040a0 <_dtoa_r+0x398>
  4041c4:	2502      	movs	r5, #2
  4041c6:	e770      	b.n	4040aa <_dtoa_r+0x3a2>
  4041c8:	465f      	mov	r7, fp
  4041ca:	464e      	mov	r6, r9
  4041cc:	e78f      	b.n	4040ee <_dtoa_r+0x3e6>
  4041ce:	9a06      	ldr	r2, [sp, #24]
  4041d0:	4b4e      	ldr	r3, [pc, #312]	; (40430c <_dtoa_r+0x604>)
  4041d2:	4432      	add	r2, r6
  4041d4:	9211      	str	r2, [sp, #68]	; 0x44
  4041d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4041d8:	1e71      	subs	r1, r6, #1
  4041da:	2a00      	cmp	r2, #0
  4041dc:	d048      	beq.n	404270 <_dtoa_r+0x568>
  4041de:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  4041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4041e6:	2000      	movs	r0, #0
  4041e8:	494e      	ldr	r1, [pc, #312]	; (404324 <_dtoa_r+0x61c>)
  4041ea:	f7fe fdfd 	bl	402de8 <__aeabi_ddiv>
  4041ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4041f2:	f7fe fb1b 	bl	40282c <__aeabi_dsub>
  4041f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4041fa:	9d06      	ldr	r5, [sp, #24]
  4041fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404200:	f7fe ff62 	bl	4030c8 <__aeabi_d2iz>
  404204:	4606      	mov	r6, r0
  404206:	f7fe fc5f 	bl	402ac8 <__aeabi_i2d>
  40420a:	4602      	mov	r2, r0
  40420c:	460b      	mov	r3, r1
  40420e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404212:	f7fe fb0b 	bl	40282c <__aeabi_dsub>
  404216:	3630      	adds	r6, #48	; 0x30
  404218:	f805 6b01 	strb.w	r6, [r5], #1
  40421c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404220:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404224:	f7fe ff28 	bl	403078 <__aeabi_dcmplt>
  404228:	2800      	cmp	r0, #0
  40422a:	d165      	bne.n	4042f8 <_dtoa_r+0x5f0>
  40422c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404230:	2000      	movs	r0, #0
  404232:	4938      	ldr	r1, [pc, #224]	; (404314 <_dtoa_r+0x60c>)
  404234:	f7fe fafa 	bl	40282c <__aeabi_dsub>
  404238:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40423c:	f7fe ff1c 	bl	403078 <__aeabi_dcmplt>
  404240:	2800      	cmp	r0, #0
  404242:	f040 80b9 	bne.w	4043b8 <_dtoa_r+0x6b0>
  404246:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404248:	429d      	cmp	r5, r3
  40424a:	f43f af7c 	beq.w	404146 <_dtoa_r+0x43e>
  40424e:	2200      	movs	r2, #0
  404250:	4b31      	ldr	r3, [pc, #196]	; (404318 <_dtoa_r+0x610>)
  404252:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404256:	f7fe fc9d 	bl	402b94 <__aeabi_dmul>
  40425a:	2200      	movs	r2, #0
  40425c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404260:	4b2d      	ldr	r3, [pc, #180]	; (404318 <_dtoa_r+0x610>)
  404262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404266:	f7fe fc95 	bl	402b94 <__aeabi_dmul>
  40426a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40426e:	e7c5      	b.n	4041fc <_dtoa_r+0x4f4>
  404270:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404274:	e9d1 0100 	ldrd	r0, r1, [r1]
  404278:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40427c:	f7fe fc8a 	bl	402b94 <__aeabi_dmul>
  404280:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404284:	9d06      	ldr	r5, [sp, #24]
  404286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40428a:	f7fe ff1d 	bl	4030c8 <__aeabi_d2iz>
  40428e:	4606      	mov	r6, r0
  404290:	f7fe fc1a 	bl	402ac8 <__aeabi_i2d>
  404294:	3630      	adds	r6, #48	; 0x30
  404296:	4602      	mov	r2, r0
  404298:	460b      	mov	r3, r1
  40429a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40429e:	f7fe fac5 	bl	40282c <__aeabi_dsub>
  4042a2:	f805 6b01 	strb.w	r6, [r5], #1
  4042a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4042a8:	42ab      	cmp	r3, r5
  4042aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4042ae:	f04f 0200 	mov.w	r2, #0
  4042b2:	d125      	bne.n	404300 <_dtoa_r+0x5f8>
  4042b4:	4b1b      	ldr	r3, [pc, #108]	; (404324 <_dtoa_r+0x61c>)
  4042b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4042ba:	f7fe fab9 	bl	402830 <__adddf3>
  4042be:	4602      	mov	r2, r0
  4042c0:	460b      	mov	r3, r1
  4042c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4042c6:	f7fe fef5 	bl	4030b4 <__aeabi_dcmpgt>
  4042ca:	2800      	cmp	r0, #0
  4042cc:	d174      	bne.n	4043b8 <_dtoa_r+0x6b0>
  4042ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4042d2:	2000      	movs	r0, #0
  4042d4:	4913      	ldr	r1, [pc, #76]	; (404324 <_dtoa_r+0x61c>)
  4042d6:	f7fe faa9 	bl	40282c <__aeabi_dsub>
  4042da:	4602      	mov	r2, r0
  4042dc:	460b      	mov	r3, r1
  4042de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4042e2:	f7fe fec9 	bl	403078 <__aeabi_dcmplt>
  4042e6:	2800      	cmp	r0, #0
  4042e8:	f43f af2d 	beq.w	404146 <_dtoa_r+0x43e>
  4042ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4042f0:	2b30      	cmp	r3, #48	; 0x30
  4042f2:	f105 32ff 	add.w	r2, r5, #4294967295
  4042f6:	d001      	beq.n	4042fc <_dtoa_r+0x5f4>
  4042f8:	46bb      	mov	fp, r7
  4042fa:	e04c      	b.n	404396 <_dtoa_r+0x68e>
  4042fc:	4615      	mov	r5, r2
  4042fe:	e7f5      	b.n	4042ec <_dtoa_r+0x5e4>
  404300:	4b05      	ldr	r3, [pc, #20]	; (404318 <_dtoa_r+0x610>)
  404302:	f7fe fc47 	bl	402b94 <__aeabi_dmul>
  404306:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40430a:	e7bc      	b.n	404286 <_dtoa_r+0x57e>
  40430c:	00405ed8 	.word	0x00405ed8
  404310:	00405eb0 	.word	0x00405eb0
  404314:	3ff00000 	.word	0x3ff00000
  404318:	40240000 	.word	0x40240000
  40431c:	401c0000 	.word	0x401c0000
  404320:	40140000 	.word	0x40140000
  404324:	3fe00000 	.word	0x3fe00000
  404328:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40432c:	9d06      	ldr	r5, [sp, #24]
  40432e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404332:	4630      	mov	r0, r6
  404334:	4639      	mov	r1, r7
  404336:	f7fe fd57 	bl	402de8 <__aeabi_ddiv>
  40433a:	f7fe fec5 	bl	4030c8 <__aeabi_d2iz>
  40433e:	4680      	mov	r8, r0
  404340:	f7fe fbc2 	bl	402ac8 <__aeabi_i2d>
  404344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404348:	f7fe fc24 	bl	402b94 <__aeabi_dmul>
  40434c:	4602      	mov	r2, r0
  40434e:	460b      	mov	r3, r1
  404350:	4630      	mov	r0, r6
  404352:	4639      	mov	r1, r7
  404354:	f108 0630 	add.w	r6, r8, #48	; 0x30
  404358:	f7fe fa68 	bl	40282c <__aeabi_dsub>
  40435c:	f805 6b01 	strb.w	r6, [r5], #1
  404360:	9e06      	ldr	r6, [sp, #24]
  404362:	1bae      	subs	r6, r5, r6
  404364:	45b1      	cmp	r9, r6
  404366:	4602      	mov	r2, r0
  404368:	460b      	mov	r3, r1
  40436a:	d138      	bne.n	4043de <_dtoa_r+0x6d6>
  40436c:	f7fe fa60 	bl	402830 <__adddf3>
  404370:	4606      	mov	r6, r0
  404372:	460f      	mov	r7, r1
  404374:	4602      	mov	r2, r0
  404376:	460b      	mov	r3, r1
  404378:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40437c:	f7fe fe7c 	bl	403078 <__aeabi_dcmplt>
  404380:	b9c8      	cbnz	r0, 4043b6 <_dtoa_r+0x6ae>
  404382:	4632      	mov	r2, r6
  404384:	463b      	mov	r3, r7
  404386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40438a:	f7fe fe6b 	bl	403064 <__aeabi_dcmpeq>
  40438e:	b110      	cbz	r0, 404396 <_dtoa_r+0x68e>
  404390:	f018 0f01 	tst.w	r8, #1
  404394:	d10f      	bne.n	4043b6 <_dtoa_r+0x6ae>
  404396:	4651      	mov	r1, sl
  404398:	4620      	mov	r0, r4
  40439a:	f000 fd05 	bl	404da8 <_Bfree>
  40439e:	2300      	movs	r3, #0
  4043a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4043a2:	702b      	strb	r3, [r5, #0]
  4043a4:	f10b 0301 	add.w	r3, fp, #1
  4043a8:	6013      	str	r3, [r2, #0]
  4043aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4043ac:	2b00      	cmp	r3, #0
  4043ae:	f43f acf0 	beq.w	403d92 <_dtoa_r+0x8a>
  4043b2:	601d      	str	r5, [r3, #0]
  4043b4:	e4ed      	b.n	403d92 <_dtoa_r+0x8a>
  4043b6:	465f      	mov	r7, fp
  4043b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4043bc:	2a39      	cmp	r2, #57	; 0x39
  4043be:	f105 33ff 	add.w	r3, r5, #4294967295
  4043c2:	d106      	bne.n	4043d2 <_dtoa_r+0x6ca>
  4043c4:	9a06      	ldr	r2, [sp, #24]
  4043c6:	429a      	cmp	r2, r3
  4043c8:	d107      	bne.n	4043da <_dtoa_r+0x6d2>
  4043ca:	2330      	movs	r3, #48	; 0x30
  4043cc:	7013      	strb	r3, [r2, #0]
  4043ce:	3701      	adds	r7, #1
  4043d0:	4613      	mov	r3, r2
  4043d2:	781a      	ldrb	r2, [r3, #0]
  4043d4:	3201      	adds	r2, #1
  4043d6:	701a      	strb	r2, [r3, #0]
  4043d8:	e78e      	b.n	4042f8 <_dtoa_r+0x5f0>
  4043da:	461d      	mov	r5, r3
  4043dc:	e7ec      	b.n	4043b8 <_dtoa_r+0x6b0>
  4043de:	2200      	movs	r2, #0
  4043e0:	4bb4      	ldr	r3, [pc, #720]	; (4046b4 <_dtoa_r+0x9ac>)
  4043e2:	f7fe fbd7 	bl	402b94 <__aeabi_dmul>
  4043e6:	2200      	movs	r2, #0
  4043e8:	2300      	movs	r3, #0
  4043ea:	4606      	mov	r6, r0
  4043ec:	460f      	mov	r7, r1
  4043ee:	f7fe fe39 	bl	403064 <__aeabi_dcmpeq>
  4043f2:	2800      	cmp	r0, #0
  4043f4:	d09b      	beq.n	40432e <_dtoa_r+0x626>
  4043f6:	e7ce      	b.n	404396 <_dtoa_r+0x68e>
  4043f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4043fa:	2a00      	cmp	r2, #0
  4043fc:	f000 8129 	beq.w	404652 <_dtoa_r+0x94a>
  404400:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404402:	2a01      	cmp	r2, #1
  404404:	f300 810e 	bgt.w	404624 <_dtoa_r+0x91c>
  404408:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40440a:	2a00      	cmp	r2, #0
  40440c:	f000 8106 	beq.w	40461c <_dtoa_r+0x914>
  404410:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404414:	9e08      	ldr	r6, [sp, #32]
  404416:	4645      	mov	r5, r8
  404418:	9a07      	ldr	r2, [sp, #28]
  40441a:	2101      	movs	r1, #1
  40441c:	441a      	add	r2, r3
  40441e:	4620      	mov	r0, r4
  404420:	4498      	add	r8, r3
  404422:	9207      	str	r2, [sp, #28]
  404424:	f000 fd60 	bl	404ee8 <__i2b>
  404428:	4607      	mov	r7, r0
  40442a:	2d00      	cmp	r5, #0
  40442c:	dd0b      	ble.n	404446 <_dtoa_r+0x73e>
  40442e:	9b07      	ldr	r3, [sp, #28]
  404430:	2b00      	cmp	r3, #0
  404432:	dd08      	ble.n	404446 <_dtoa_r+0x73e>
  404434:	42ab      	cmp	r3, r5
  404436:	9a07      	ldr	r2, [sp, #28]
  404438:	bfa8      	it	ge
  40443a:	462b      	movge	r3, r5
  40443c:	eba8 0803 	sub.w	r8, r8, r3
  404440:	1aed      	subs	r5, r5, r3
  404442:	1ad3      	subs	r3, r2, r3
  404444:	9307      	str	r3, [sp, #28]
  404446:	9b08      	ldr	r3, [sp, #32]
  404448:	b1fb      	cbz	r3, 40448a <_dtoa_r+0x782>
  40444a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40444c:	2b00      	cmp	r3, #0
  40444e:	f000 8104 	beq.w	40465a <_dtoa_r+0x952>
  404452:	2e00      	cmp	r6, #0
  404454:	dd11      	ble.n	40447a <_dtoa_r+0x772>
  404456:	4639      	mov	r1, r7
  404458:	4632      	mov	r2, r6
  40445a:	4620      	mov	r0, r4
  40445c:	f000 fdda 	bl	405014 <__pow5mult>
  404460:	4652      	mov	r2, sl
  404462:	4601      	mov	r1, r0
  404464:	4607      	mov	r7, r0
  404466:	4620      	mov	r0, r4
  404468:	f000 fd47 	bl	404efa <__multiply>
  40446c:	4651      	mov	r1, sl
  40446e:	900a      	str	r0, [sp, #40]	; 0x28
  404470:	4620      	mov	r0, r4
  404472:	f000 fc99 	bl	404da8 <_Bfree>
  404476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404478:	469a      	mov	sl, r3
  40447a:	9b08      	ldr	r3, [sp, #32]
  40447c:	1b9a      	subs	r2, r3, r6
  40447e:	d004      	beq.n	40448a <_dtoa_r+0x782>
  404480:	4651      	mov	r1, sl
  404482:	4620      	mov	r0, r4
  404484:	f000 fdc6 	bl	405014 <__pow5mult>
  404488:	4682      	mov	sl, r0
  40448a:	2101      	movs	r1, #1
  40448c:	4620      	mov	r0, r4
  40448e:	f000 fd2b 	bl	404ee8 <__i2b>
  404492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404494:	2b00      	cmp	r3, #0
  404496:	4606      	mov	r6, r0
  404498:	f340 80e1 	ble.w	40465e <_dtoa_r+0x956>
  40449c:	461a      	mov	r2, r3
  40449e:	4601      	mov	r1, r0
  4044a0:	4620      	mov	r0, r4
  4044a2:	f000 fdb7 	bl	405014 <__pow5mult>
  4044a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4044a8:	2b01      	cmp	r3, #1
  4044aa:	4606      	mov	r6, r0
  4044ac:	f340 80da 	ble.w	404664 <_dtoa_r+0x95c>
  4044b0:	2300      	movs	r3, #0
  4044b2:	9308      	str	r3, [sp, #32]
  4044b4:	6933      	ldr	r3, [r6, #16]
  4044b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4044ba:	6918      	ldr	r0, [r3, #16]
  4044bc:	f000 fcc6 	bl	404e4c <__hi0bits>
  4044c0:	f1c0 0020 	rsb	r0, r0, #32
  4044c4:	9b07      	ldr	r3, [sp, #28]
  4044c6:	4418      	add	r0, r3
  4044c8:	f010 001f 	ands.w	r0, r0, #31
  4044cc:	f000 80f0 	beq.w	4046b0 <_dtoa_r+0x9a8>
  4044d0:	f1c0 0320 	rsb	r3, r0, #32
  4044d4:	2b04      	cmp	r3, #4
  4044d6:	f340 80e2 	ble.w	40469e <_dtoa_r+0x996>
  4044da:	9b07      	ldr	r3, [sp, #28]
  4044dc:	f1c0 001c 	rsb	r0, r0, #28
  4044e0:	4480      	add	r8, r0
  4044e2:	4405      	add	r5, r0
  4044e4:	4403      	add	r3, r0
  4044e6:	9307      	str	r3, [sp, #28]
  4044e8:	f1b8 0f00 	cmp.w	r8, #0
  4044ec:	dd05      	ble.n	4044fa <_dtoa_r+0x7f2>
  4044ee:	4651      	mov	r1, sl
  4044f0:	4642      	mov	r2, r8
  4044f2:	4620      	mov	r0, r4
  4044f4:	f000 fddc 	bl	4050b0 <__lshift>
  4044f8:	4682      	mov	sl, r0
  4044fa:	9b07      	ldr	r3, [sp, #28]
  4044fc:	2b00      	cmp	r3, #0
  4044fe:	dd05      	ble.n	40450c <_dtoa_r+0x804>
  404500:	4631      	mov	r1, r6
  404502:	461a      	mov	r2, r3
  404504:	4620      	mov	r0, r4
  404506:	f000 fdd3 	bl	4050b0 <__lshift>
  40450a:	4606      	mov	r6, r0
  40450c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40450e:	2b00      	cmp	r3, #0
  404510:	f000 80d2 	beq.w	4046b8 <_dtoa_r+0x9b0>
  404514:	4631      	mov	r1, r6
  404516:	4650      	mov	r0, sl
  404518:	f000 fe1b 	bl	405152 <__mcmp>
  40451c:	2800      	cmp	r0, #0
  40451e:	f280 80cb 	bge.w	4046b8 <_dtoa_r+0x9b0>
  404522:	2300      	movs	r3, #0
  404524:	4651      	mov	r1, sl
  404526:	220a      	movs	r2, #10
  404528:	4620      	mov	r0, r4
  40452a:	f000 fc54 	bl	404dd6 <__multadd>
  40452e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404530:	f10b 3bff 	add.w	fp, fp, #4294967295
  404534:	4682      	mov	sl, r0
  404536:	2b00      	cmp	r3, #0
  404538:	f000 81aa 	beq.w	404890 <_dtoa_r+0xb88>
  40453c:	2300      	movs	r3, #0
  40453e:	4639      	mov	r1, r7
  404540:	220a      	movs	r2, #10
  404542:	4620      	mov	r0, r4
  404544:	f000 fc47 	bl	404dd6 <__multadd>
  404548:	9b04      	ldr	r3, [sp, #16]
  40454a:	2b00      	cmp	r3, #0
  40454c:	4607      	mov	r7, r0
  40454e:	dc03      	bgt.n	404558 <_dtoa_r+0x850>
  404550:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404552:	2b02      	cmp	r3, #2
  404554:	f300 80b8 	bgt.w	4046c8 <_dtoa_r+0x9c0>
  404558:	2d00      	cmp	r5, #0
  40455a:	dd05      	ble.n	404568 <_dtoa_r+0x860>
  40455c:	4639      	mov	r1, r7
  40455e:	462a      	mov	r2, r5
  404560:	4620      	mov	r0, r4
  404562:	f000 fda5 	bl	4050b0 <__lshift>
  404566:	4607      	mov	r7, r0
  404568:	9b08      	ldr	r3, [sp, #32]
  40456a:	2b00      	cmp	r3, #0
  40456c:	f000 8110 	beq.w	404790 <_dtoa_r+0xa88>
  404570:	6879      	ldr	r1, [r7, #4]
  404572:	4620      	mov	r0, r4
  404574:	f000 fbe4 	bl	404d40 <_Balloc>
  404578:	693a      	ldr	r2, [r7, #16]
  40457a:	3202      	adds	r2, #2
  40457c:	4605      	mov	r5, r0
  40457e:	0092      	lsls	r2, r2, #2
  404580:	f107 010c 	add.w	r1, r7, #12
  404584:	300c      	adds	r0, #12
  404586:	f7fe fdeb 	bl	403160 <memcpy>
  40458a:	2201      	movs	r2, #1
  40458c:	4629      	mov	r1, r5
  40458e:	4620      	mov	r0, r4
  404590:	f000 fd8e 	bl	4050b0 <__lshift>
  404594:	9b02      	ldr	r3, [sp, #8]
  404596:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40459a:	9707      	str	r7, [sp, #28]
  40459c:	f003 0301 	and.w	r3, r3, #1
  4045a0:	4607      	mov	r7, r0
  4045a2:	9308      	str	r3, [sp, #32]
  4045a4:	4631      	mov	r1, r6
  4045a6:	4650      	mov	r0, sl
  4045a8:	f7ff fb22 	bl	403bf0 <quorem>
  4045ac:	9907      	ldr	r1, [sp, #28]
  4045ae:	4605      	mov	r5, r0
  4045b0:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4045b4:	4650      	mov	r0, sl
  4045b6:	f000 fdcc 	bl	405152 <__mcmp>
  4045ba:	463a      	mov	r2, r7
  4045bc:	9002      	str	r0, [sp, #8]
  4045be:	4631      	mov	r1, r6
  4045c0:	4620      	mov	r0, r4
  4045c2:	f000 fde0 	bl	405186 <__mdiff>
  4045c6:	68c3      	ldr	r3, [r0, #12]
  4045c8:	4602      	mov	r2, r0
  4045ca:	2b00      	cmp	r3, #0
  4045cc:	f040 80e2 	bne.w	404794 <_dtoa_r+0xa8c>
  4045d0:	4601      	mov	r1, r0
  4045d2:	9009      	str	r0, [sp, #36]	; 0x24
  4045d4:	4650      	mov	r0, sl
  4045d6:	f000 fdbc 	bl	405152 <__mcmp>
  4045da:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4045dc:	4603      	mov	r3, r0
  4045de:	4611      	mov	r1, r2
  4045e0:	4620      	mov	r0, r4
  4045e2:	9309      	str	r3, [sp, #36]	; 0x24
  4045e4:	f000 fbe0 	bl	404da8 <_Bfree>
  4045e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4045ea:	2b00      	cmp	r3, #0
  4045ec:	f040 80d4 	bne.w	404798 <_dtoa_r+0xa90>
  4045f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4045f2:	2a00      	cmp	r2, #0
  4045f4:	f040 80d0 	bne.w	404798 <_dtoa_r+0xa90>
  4045f8:	9a08      	ldr	r2, [sp, #32]
  4045fa:	2a00      	cmp	r2, #0
  4045fc:	f040 80cc 	bne.w	404798 <_dtoa_r+0xa90>
  404600:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404604:	f000 80e8 	beq.w	4047d8 <_dtoa_r+0xad0>
  404608:	9b02      	ldr	r3, [sp, #8]
  40460a:	2b00      	cmp	r3, #0
  40460c:	dd01      	ble.n	404612 <_dtoa_r+0x90a>
  40460e:	f105 0931 	add.w	r9, r5, #49	; 0x31
  404612:	f108 0501 	add.w	r5, r8, #1
  404616:	f888 9000 	strb.w	r9, [r8]
  40461a:	e06a      	b.n	4046f2 <_dtoa_r+0x9ea>
  40461c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40461e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404622:	e6f7      	b.n	404414 <_dtoa_r+0x70c>
  404624:	9b08      	ldr	r3, [sp, #32]
  404626:	f109 36ff 	add.w	r6, r9, #4294967295
  40462a:	42b3      	cmp	r3, r6
  40462c:	bfbf      	itttt	lt
  40462e:	9b08      	ldrlt	r3, [sp, #32]
  404630:	9608      	strlt	r6, [sp, #32]
  404632:	1af2      	sublt	r2, r6, r3
  404634:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  404636:	bfb7      	itett	lt
  404638:	189b      	addlt	r3, r3, r2
  40463a:	1b9e      	subge	r6, r3, r6
  40463c:	930c      	strlt	r3, [sp, #48]	; 0x30
  40463e:	2600      	movlt	r6, #0
  404640:	f1b9 0f00 	cmp.w	r9, #0
  404644:	bfb9      	ittee	lt
  404646:	eba8 0509 	sublt.w	r5, r8, r9
  40464a:	2300      	movlt	r3, #0
  40464c:	4645      	movge	r5, r8
  40464e:	464b      	movge	r3, r9
  404650:	e6e2      	b.n	404418 <_dtoa_r+0x710>
  404652:	9e08      	ldr	r6, [sp, #32]
  404654:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404656:	4645      	mov	r5, r8
  404658:	e6e7      	b.n	40442a <_dtoa_r+0x722>
  40465a:	9a08      	ldr	r2, [sp, #32]
  40465c:	e710      	b.n	404480 <_dtoa_r+0x778>
  40465e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404660:	2b01      	cmp	r3, #1
  404662:	dc18      	bgt.n	404696 <_dtoa_r+0x98e>
  404664:	9b02      	ldr	r3, [sp, #8]
  404666:	b9b3      	cbnz	r3, 404696 <_dtoa_r+0x98e>
  404668:	9b03      	ldr	r3, [sp, #12]
  40466a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40466e:	b9a3      	cbnz	r3, 40469a <_dtoa_r+0x992>
  404670:	9b03      	ldr	r3, [sp, #12]
  404672:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  404676:	0d1b      	lsrs	r3, r3, #20
  404678:	051b      	lsls	r3, r3, #20
  40467a:	b12b      	cbz	r3, 404688 <_dtoa_r+0x980>
  40467c:	9b07      	ldr	r3, [sp, #28]
  40467e:	3301      	adds	r3, #1
  404680:	9307      	str	r3, [sp, #28]
  404682:	f108 0801 	add.w	r8, r8, #1
  404686:	2301      	movs	r3, #1
  404688:	9308      	str	r3, [sp, #32]
  40468a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40468c:	2b00      	cmp	r3, #0
  40468e:	f47f af11 	bne.w	4044b4 <_dtoa_r+0x7ac>
  404692:	2001      	movs	r0, #1
  404694:	e716      	b.n	4044c4 <_dtoa_r+0x7bc>
  404696:	2300      	movs	r3, #0
  404698:	e7f6      	b.n	404688 <_dtoa_r+0x980>
  40469a:	9b02      	ldr	r3, [sp, #8]
  40469c:	e7f4      	b.n	404688 <_dtoa_r+0x980>
  40469e:	f43f af23 	beq.w	4044e8 <_dtoa_r+0x7e0>
  4046a2:	9a07      	ldr	r2, [sp, #28]
  4046a4:	331c      	adds	r3, #28
  4046a6:	441a      	add	r2, r3
  4046a8:	4498      	add	r8, r3
  4046aa:	441d      	add	r5, r3
  4046ac:	4613      	mov	r3, r2
  4046ae:	e71a      	b.n	4044e6 <_dtoa_r+0x7de>
  4046b0:	4603      	mov	r3, r0
  4046b2:	e7f6      	b.n	4046a2 <_dtoa_r+0x99a>
  4046b4:	40240000 	.word	0x40240000
  4046b8:	f1b9 0f00 	cmp.w	r9, #0
  4046bc:	dc33      	bgt.n	404726 <_dtoa_r+0xa1e>
  4046be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4046c0:	2b02      	cmp	r3, #2
  4046c2:	dd30      	ble.n	404726 <_dtoa_r+0xa1e>
  4046c4:	f8cd 9010 	str.w	r9, [sp, #16]
  4046c8:	9b04      	ldr	r3, [sp, #16]
  4046ca:	b963      	cbnz	r3, 4046e6 <_dtoa_r+0x9de>
  4046cc:	4631      	mov	r1, r6
  4046ce:	2205      	movs	r2, #5
  4046d0:	4620      	mov	r0, r4
  4046d2:	f000 fb80 	bl	404dd6 <__multadd>
  4046d6:	4601      	mov	r1, r0
  4046d8:	4606      	mov	r6, r0
  4046da:	4650      	mov	r0, sl
  4046dc:	f000 fd39 	bl	405152 <__mcmp>
  4046e0:	2800      	cmp	r0, #0
  4046e2:	f73f ad5c 	bgt.w	40419e <_dtoa_r+0x496>
  4046e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4046e8:	9d06      	ldr	r5, [sp, #24]
  4046ea:	ea6f 0b03 	mvn.w	fp, r3
  4046ee:	2300      	movs	r3, #0
  4046f0:	9307      	str	r3, [sp, #28]
  4046f2:	4631      	mov	r1, r6
  4046f4:	4620      	mov	r0, r4
  4046f6:	f000 fb57 	bl	404da8 <_Bfree>
  4046fa:	2f00      	cmp	r7, #0
  4046fc:	f43f ae4b 	beq.w	404396 <_dtoa_r+0x68e>
  404700:	9b07      	ldr	r3, [sp, #28]
  404702:	b12b      	cbz	r3, 404710 <_dtoa_r+0xa08>
  404704:	42bb      	cmp	r3, r7
  404706:	d003      	beq.n	404710 <_dtoa_r+0xa08>
  404708:	4619      	mov	r1, r3
  40470a:	4620      	mov	r0, r4
  40470c:	f000 fb4c 	bl	404da8 <_Bfree>
  404710:	4639      	mov	r1, r7
  404712:	4620      	mov	r0, r4
  404714:	f000 fb48 	bl	404da8 <_Bfree>
  404718:	e63d      	b.n	404396 <_dtoa_r+0x68e>
  40471a:	2600      	movs	r6, #0
  40471c:	4637      	mov	r7, r6
  40471e:	e7e2      	b.n	4046e6 <_dtoa_r+0x9de>
  404720:	46bb      	mov	fp, r7
  404722:	4637      	mov	r7, r6
  404724:	e53b      	b.n	40419e <_dtoa_r+0x496>
  404726:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404728:	f8cd 9010 	str.w	r9, [sp, #16]
  40472c:	2b00      	cmp	r3, #0
  40472e:	f47f af13 	bne.w	404558 <_dtoa_r+0x850>
  404732:	9d06      	ldr	r5, [sp, #24]
  404734:	4631      	mov	r1, r6
  404736:	4650      	mov	r0, sl
  404738:	f7ff fa5a 	bl	403bf0 <quorem>
  40473c:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404740:	f805 9b01 	strb.w	r9, [r5], #1
  404744:	9b06      	ldr	r3, [sp, #24]
  404746:	9a04      	ldr	r2, [sp, #16]
  404748:	1aeb      	subs	r3, r5, r3
  40474a:	429a      	cmp	r2, r3
  40474c:	f300 8083 	bgt.w	404856 <_dtoa_r+0xb4e>
  404750:	9b06      	ldr	r3, [sp, #24]
  404752:	2a01      	cmp	r2, #1
  404754:	bfac      	ite	ge
  404756:	189b      	addge	r3, r3, r2
  404758:	3301      	addlt	r3, #1
  40475a:	4698      	mov	r8, r3
  40475c:	2300      	movs	r3, #0
  40475e:	9307      	str	r3, [sp, #28]
  404760:	4651      	mov	r1, sl
  404762:	2201      	movs	r2, #1
  404764:	4620      	mov	r0, r4
  404766:	f000 fca3 	bl	4050b0 <__lshift>
  40476a:	4631      	mov	r1, r6
  40476c:	4682      	mov	sl, r0
  40476e:	f000 fcf0 	bl	405152 <__mcmp>
  404772:	2800      	cmp	r0, #0
  404774:	dc35      	bgt.n	4047e2 <_dtoa_r+0xada>
  404776:	d102      	bne.n	40477e <_dtoa_r+0xa76>
  404778:	f019 0f01 	tst.w	r9, #1
  40477c:	d131      	bne.n	4047e2 <_dtoa_r+0xada>
  40477e:	4645      	mov	r5, r8
  404780:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404784:	2b30      	cmp	r3, #48	; 0x30
  404786:	f105 32ff 	add.w	r2, r5, #4294967295
  40478a:	d1b2      	bne.n	4046f2 <_dtoa_r+0x9ea>
  40478c:	4615      	mov	r5, r2
  40478e:	e7f7      	b.n	404780 <_dtoa_r+0xa78>
  404790:	4638      	mov	r0, r7
  404792:	e6ff      	b.n	404594 <_dtoa_r+0x88c>
  404794:	2301      	movs	r3, #1
  404796:	e722      	b.n	4045de <_dtoa_r+0x8d6>
  404798:	9a02      	ldr	r2, [sp, #8]
  40479a:	2a00      	cmp	r2, #0
  40479c:	db04      	blt.n	4047a8 <_dtoa_r+0xaa0>
  40479e:	d129      	bne.n	4047f4 <_dtoa_r+0xaec>
  4047a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4047a2:	bb3a      	cbnz	r2, 4047f4 <_dtoa_r+0xaec>
  4047a4:	9a08      	ldr	r2, [sp, #32]
  4047a6:	bb2a      	cbnz	r2, 4047f4 <_dtoa_r+0xaec>
  4047a8:	2b00      	cmp	r3, #0
  4047aa:	f77f af32 	ble.w	404612 <_dtoa_r+0x90a>
  4047ae:	4651      	mov	r1, sl
  4047b0:	2201      	movs	r2, #1
  4047b2:	4620      	mov	r0, r4
  4047b4:	f000 fc7c 	bl	4050b0 <__lshift>
  4047b8:	4631      	mov	r1, r6
  4047ba:	4682      	mov	sl, r0
  4047bc:	f000 fcc9 	bl	405152 <__mcmp>
  4047c0:	2800      	cmp	r0, #0
  4047c2:	dc05      	bgt.n	4047d0 <_dtoa_r+0xac8>
  4047c4:	f47f af25 	bne.w	404612 <_dtoa_r+0x90a>
  4047c8:	f019 0f01 	tst.w	r9, #1
  4047cc:	f43f af21 	beq.w	404612 <_dtoa_r+0x90a>
  4047d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4047d4:	f47f af1b 	bne.w	40460e <_dtoa_r+0x906>
  4047d8:	2339      	movs	r3, #57	; 0x39
  4047da:	f888 3000 	strb.w	r3, [r8]
  4047de:	f108 0801 	add.w	r8, r8, #1
  4047e2:	4645      	mov	r5, r8
  4047e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4047e8:	2b39      	cmp	r3, #57	; 0x39
  4047ea:	f105 32ff 	add.w	r2, r5, #4294967295
  4047ee:	d03a      	beq.n	404866 <_dtoa_r+0xb5e>
  4047f0:	3301      	adds	r3, #1
  4047f2:	e03f      	b.n	404874 <_dtoa_r+0xb6c>
  4047f4:	2b00      	cmp	r3, #0
  4047f6:	f108 0501 	add.w	r5, r8, #1
  4047fa:	dd05      	ble.n	404808 <_dtoa_r+0xb00>
  4047fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404800:	d0ea      	beq.n	4047d8 <_dtoa_r+0xad0>
  404802:	f109 0901 	add.w	r9, r9, #1
  404806:	e706      	b.n	404616 <_dtoa_r+0x90e>
  404808:	9b06      	ldr	r3, [sp, #24]
  40480a:	9a04      	ldr	r2, [sp, #16]
  40480c:	f805 9c01 	strb.w	r9, [r5, #-1]
  404810:	1aeb      	subs	r3, r5, r3
  404812:	4293      	cmp	r3, r2
  404814:	46a8      	mov	r8, r5
  404816:	d0a3      	beq.n	404760 <_dtoa_r+0xa58>
  404818:	4651      	mov	r1, sl
  40481a:	2300      	movs	r3, #0
  40481c:	220a      	movs	r2, #10
  40481e:	4620      	mov	r0, r4
  404820:	f000 fad9 	bl	404dd6 <__multadd>
  404824:	9b07      	ldr	r3, [sp, #28]
  404826:	9907      	ldr	r1, [sp, #28]
  404828:	42bb      	cmp	r3, r7
  40482a:	4682      	mov	sl, r0
  40482c:	f04f 0300 	mov.w	r3, #0
  404830:	f04f 020a 	mov.w	r2, #10
  404834:	4620      	mov	r0, r4
  404836:	d104      	bne.n	404842 <_dtoa_r+0xb3a>
  404838:	f000 facd 	bl	404dd6 <__multadd>
  40483c:	9007      	str	r0, [sp, #28]
  40483e:	4607      	mov	r7, r0
  404840:	e6b0      	b.n	4045a4 <_dtoa_r+0x89c>
  404842:	f000 fac8 	bl	404dd6 <__multadd>
  404846:	2300      	movs	r3, #0
  404848:	9007      	str	r0, [sp, #28]
  40484a:	220a      	movs	r2, #10
  40484c:	4639      	mov	r1, r7
  40484e:	4620      	mov	r0, r4
  404850:	f000 fac1 	bl	404dd6 <__multadd>
  404854:	e7f3      	b.n	40483e <_dtoa_r+0xb36>
  404856:	4651      	mov	r1, sl
  404858:	2300      	movs	r3, #0
  40485a:	220a      	movs	r2, #10
  40485c:	4620      	mov	r0, r4
  40485e:	f000 faba 	bl	404dd6 <__multadd>
  404862:	4682      	mov	sl, r0
  404864:	e766      	b.n	404734 <_dtoa_r+0xa2c>
  404866:	9b06      	ldr	r3, [sp, #24]
  404868:	4293      	cmp	r3, r2
  40486a:	d105      	bne.n	404878 <_dtoa_r+0xb70>
  40486c:	9a06      	ldr	r2, [sp, #24]
  40486e:	f10b 0b01 	add.w	fp, fp, #1
  404872:	2331      	movs	r3, #49	; 0x31
  404874:	7013      	strb	r3, [r2, #0]
  404876:	e73c      	b.n	4046f2 <_dtoa_r+0x9ea>
  404878:	4615      	mov	r5, r2
  40487a:	e7b3      	b.n	4047e4 <_dtoa_r+0xadc>
  40487c:	4b09      	ldr	r3, [pc, #36]	; (4048a4 <_dtoa_r+0xb9c>)
  40487e:	f7ff baa5 	b.w	403dcc <_dtoa_r+0xc4>
  404882:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404884:	2b00      	cmp	r3, #0
  404886:	f47f aa7f 	bne.w	403d88 <_dtoa_r+0x80>
  40488a:	4b07      	ldr	r3, [pc, #28]	; (4048a8 <_dtoa_r+0xba0>)
  40488c:	f7ff ba9e 	b.w	403dcc <_dtoa_r+0xc4>
  404890:	9b04      	ldr	r3, [sp, #16]
  404892:	2b00      	cmp	r3, #0
  404894:	f73f af4d 	bgt.w	404732 <_dtoa_r+0xa2a>
  404898:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40489a:	2b02      	cmp	r3, #2
  40489c:	f77f af49 	ble.w	404732 <_dtoa_r+0xa2a>
  4048a0:	e712      	b.n	4046c8 <_dtoa_r+0x9c0>
  4048a2:	bf00      	nop
  4048a4:	00405e1c 	.word	0x00405e1c
  4048a8:	00405e40 	.word	0x00405e40

004048ac <__sflush_r>:
  4048ac:	898a      	ldrh	r2, [r1, #12]
  4048ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4048b2:	4605      	mov	r5, r0
  4048b4:	0710      	lsls	r0, r2, #28
  4048b6:	460c      	mov	r4, r1
  4048b8:	d45a      	bmi.n	404970 <__sflush_r+0xc4>
  4048ba:	684b      	ldr	r3, [r1, #4]
  4048bc:	2b00      	cmp	r3, #0
  4048be:	dc05      	bgt.n	4048cc <__sflush_r+0x20>
  4048c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4048c2:	2b00      	cmp	r3, #0
  4048c4:	dc02      	bgt.n	4048cc <__sflush_r+0x20>
  4048c6:	2000      	movs	r0, #0
  4048c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4048cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4048ce:	2e00      	cmp	r6, #0
  4048d0:	d0f9      	beq.n	4048c6 <__sflush_r+0x1a>
  4048d2:	2300      	movs	r3, #0
  4048d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  4048d8:	682f      	ldr	r7, [r5, #0]
  4048da:	602b      	str	r3, [r5, #0]
  4048dc:	d033      	beq.n	404946 <__sflush_r+0x9a>
  4048de:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4048e0:	89a3      	ldrh	r3, [r4, #12]
  4048e2:	075a      	lsls	r2, r3, #29
  4048e4:	d505      	bpl.n	4048f2 <__sflush_r+0x46>
  4048e6:	6863      	ldr	r3, [r4, #4]
  4048e8:	1ac0      	subs	r0, r0, r3
  4048ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4048ec:	b10b      	cbz	r3, 4048f2 <__sflush_r+0x46>
  4048ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4048f0:	1ac0      	subs	r0, r0, r3
  4048f2:	2300      	movs	r3, #0
  4048f4:	4602      	mov	r2, r0
  4048f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4048f8:	6a21      	ldr	r1, [r4, #32]
  4048fa:	4628      	mov	r0, r5
  4048fc:	47b0      	blx	r6
  4048fe:	1c43      	adds	r3, r0, #1
  404900:	89a3      	ldrh	r3, [r4, #12]
  404902:	d106      	bne.n	404912 <__sflush_r+0x66>
  404904:	6829      	ldr	r1, [r5, #0]
  404906:	291d      	cmp	r1, #29
  404908:	d84b      	bhi.n	4049a2 <__sflush_r+0xf6>
  40490a:	4a2b      	ldr	r2, [pc, #172]	; (4049b8 <__sflush_r+0x10c>)
  40490c:	40ca      	lsrs	r2, r1
  40490e:	07d6      	lsls	r6, r2, #31
  404910:	d547      	bpl.n	4049a2 <__sflush_r+0xf6>
  404912:	2200      	movs	r2, #0
  404914:	6062      	str	r2, [r4, #4]
  404916:	04d9      	lsls	r1, r3, #19
  404918:	6922      	ldr	r2, [r4, #16]
  40491a:	6022      	str	r2, [r4, #0]
  40491c:	d504      	bpl.n	404928 <__sflush_r+0x7c>
  40491e:	1c42      	adds	r2, r0, #1
  404920:	d101      	bne.n	404926 <__sflush_r+0x7a>
  404922:	682b      	ldr	r3, [r5, #0]
  404924:	b903      	cbnz	r3, 404928 <__sflush_r+0x7c>
  404926:	6560      	str	r0, [r4, #84]	; 0x54
  404928:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40492a:	602f      	str	r7, [r5, #0]
  40492c:	2900      	cmp	r1, #0
  40492e:	d0ca      	beq.n	4048c6 <__sflush_r+0x1a>
  404930:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404934:	4299      	cmp	r1, r3
  404936:	d002      	beq.n	40493e <__sflush_r+0x92>
  404938:	4628      	mov	r0, r5
  40493a:	f000 fcdf 	bl	4052fc <_free_r>
  40493e:	2000      	movs	r0, #0
  404940:	6360      	str	r0, [r4, #52]	; 0x34
  404942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404946:	6a21      	ldr	r1, [r4, #32]
  404948:	2301      	movs	r3, #1
  40494a:	4628      	mov	r0, r5
  40494c:	47b0      	blx	r6
  40494e:	1c41      	adds	r1, r0, #1
  404950:	d1c6      	bne.n	4048e0 <__sflush_r+0x34>
  404952:	682b      	ldr	r3, [r5, #0]
  404954:	2b00      	cmp	r3, #0
  404956:	d0c3      	beq.n	4048e0 <__sflush_r+0x34>
  404958:	2b1d      	cmp	r3, #29
  40495a:	d001      	beq.n	404960 <__sflush_r+0xb4>
  40495c:	2b16      	cmp	r3, #22
  40495e:	d101      	bne.n	404964 <__sflush_r+0xb8>
  404960:	602f      	str	r7, [r5, #0]
  404962:	e7b0      	b.n	4048c6 <__sflush_r+0x1a>
  404964:	89a3      	ldrh	r3, [r4, #12]
  404966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40496a:	81a3      	strh	r3, [r4, #12]
  40496c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404970:	690f      	ldr	r7, [r1, #16]
  404972:	2f00      	cmp	r7, #0
  404974:	d0a7      	beq.n	4048c6 <__sflush_r+0x1a>
  404976:	0793      	lsls	r3, r2, #30
  404978:	680e      	ldr	r6, [r1, #0]
  40497a:	bf08      	it	eq
  40497c:	694b      	ldreq	r3, [r1, #20]
  40497e:	600f      	str	r7, [r1, #0]
  404980:	bf18      	it	ne
  404982:	2300      	movne	r3, #0
  404984:	eba6 0807 	sub.w	r8, r6, r7
  404988:	608b      	str	r3, [r1, #8]
  40498a:	f1b8 0f00 	cmp.w	r8, #0
  40498e:	dd9a      	ble.n	4048c6 <__sflush_r+0x1a>
  404990:	4643      	mov	r3, r8
  404992:	463a      	mov	r2, r7
  404994:	6a21      	ldr	r1, [r4, #32]
  404996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  404998:	4628      	mov	r0, r5
  40499a:	47b0      	blx	r6
  40499c:	2800      	cmp	r0, #0
  40499e:	dc07      	bgt.n	4049b0 <__sflush_r+0x104>
  4049a0:	89a3      	ldrh	r3, [r4, #12]
  4049a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4049a6:	81a3      	strh	r3, [r4, #12]
  4049a8:	f04f 30ff 	mov.w	r0, #4294967295
  4049ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4049b0:	4407      	add	r7, r0
  4049b2:	eba8 0800 	sub.w	r8, r8, r0
  4049b6:	e7e8      	b.n	40498a <__sflush_r+0xde>
  4049b8:	20400001 	.word	0x20400001

004049bc <_fflush_r>:
  4049bc:	b538      	push	{r3, r4, r5, lr}
  4049be:	690b      	ldr	r3, [r1, #16]
  4049c0:	4605      	mov	r5, r0
  4049c2:	460c      	mov	r4, r1
  4049c4:	b1db      	cbz	r3, 4049fe <_fflush_r+0x42>
  4049c6:	b118      	cbz	r0, 4049d0 <_fflush_r+0x14>
  4049c8:	6983      	ldr	r3, [r0, #24]
  4049ca:	b90b      	cbnz	r3, 4049d0 <_fflush_r+0x14>
  4049cc:	f000 f860 	bl	404a90 <__sinit>
  4049d0:	4b0c      	ldr	r3, [pc, #48]	; (404a04 <_fflush_r+0x48>)
  4049d2:	429c      	cmp	r4, r3
  4049d4:	d109      	bne.n	4049ea <_fflush_r+0x2e>
  4049d6:	686c      	ldr	r4, [r5, #4]
  4049d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4049dc:	b17b      	cbz	r3, 4049fe <_fflush_r+0x42>
  4049de:	4621      	mov	r1, r4
  4049e0:	4628      	mov	r0, r5
  4049e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4049e6:	f7ff bf61 	b.w	4048ac <__sflush_r>
  4049ea:	4b07      	ldr	r3, [pc, #28]	; (404a08 <_fflush_r+0x4c>)
  4049ec:	429c      	cmp	r4, r3
  4049ee:	d101      	bne.n	4049f4 <_fflush_r+0x38>
  4049f0:	68ac      	ldr	r4, [r5, #8]
  4049f2:	e7f1      	b.n	4049d8 <_fflush_r+0x1c>
  4049f4:	4b05      	ldr	r3, [pc, #20]	; (404a0c <_fflush_r+0x50>)
  4049f6:	429c      	cmp	r4, r3
  4049f8:	bf08      	it	eq
  4049fa:	68ec      	ldreq	r4, [r5, #12]
  4049fc:	e7ec      	b.n	4049d8 <_fflush_r+0x1c>
  4049fe:	2000      	movs	r0, #0
  404a00:	bd38      	pop	{r3, r4, r5, pc}
  404a02:	bf00      	nop
  404a04:	00405e70 	.word	0x00405e70
  404a08:	00405e90 	.word	0x00405e90
  404a0c:	00405e50 	.word	0x00405e50

00404a10 <_cleanup_r>:
  404a10:	4901      	ldr	r1, [pc, #4]	; (404a18 <_cleanup_r+0x8>)
  404a12:	f000 b8a9 	b.w	404b68 <_fwalk_reent>
  404a16:	bf00      	nop
  404a18:	004049bd 	.word	0x004049bd

00404a1c <std.isra.0>:
  404a1c:	2300      	movs	r3, #0
  404a1e:	b510      	push	{r4, lr}
  404a20:	4604      	mov	r4, r0
  404a22:	6003      	str	r3, [r0, #0]
  404a24:	6043      	str	r3, [r0, #4]
  404a26:	6083      	str	r3, [r0, #8]
  404a28:	8181      	strh	r1, [r0, #12]
  404a2a:	6643      	str	r3, [r0, #100]	; 0x64
  404a2c:	81c2      	strh	r2, [r0, #14]
  404a2e:	6103      	str	r3, [r0, #16]
  404a30:	6143      	str	r3, [r0, #20]
  404a32:	6183      	str	r3, [r0, #24]
  404a34:	4619      	mov	r1, r3
  404a36:	2208      	movs	r2, #8
  404a38:	305c      	adds	r0, #92	; 0x5c
  404a3a:	f7fe fb9c 	bl	403176 <memset>
  404a3e:	4b05      	ldr	r3, [pc, #20]	; (404a54 <std.isra.0+0x38>)
  404a40:	6263      	str	r3, [r4, #36]	; 0x24
  404a42:	4b05      	ldr	r3, [pc, #20]	; (404a58 <std.isra.0+0x3c>)
  404a44:	62a3      	str	r3, [r4, #40]	; 0x28
  404a46:	4b05      	ldr	r3, [pc, #20]	; (404a5c <std.isra.0+0x40>)
  404a48:	62e3      	str	r3, [r4, #44]	; 0x2c
  404a4a:	4b05      	ldr	r3, [pc, #20]	; (404a60 <std.isra.0+0x44>)
  404a4c:	6224      	str	r4, [r4, #32]
  404a4e:	6323      	str	r3, [r4, #48]	; 0x30
  404a50:	bd10      	pop	{r4, pc}
  404a52:	bf00      	nop
  404a54:	004056f1 	.word	0x004056f1
  404a58:	00405713 	.word	0x00405713
  404a5c:	0040574b 	.word	0x0040574b
  404a60:	0040576f 	.word	0x0040576f

00404a64 <__sfmoreglue>:
  404a64:	b570      	push	{r4, r5, r6, lr}
  404a66:	1e4a      	subs	r2, r1, #1
  404a68:	2568      	movs	r5, #104	; 0x68
  404a6a:	4355      	muls	r5, r2
  404a6c:	460e      	mov	r6, r1
  404a6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  404a72:	f000 fc91 	bl	405398 <_malloc_r>
  404a76:	4604      	mov	r4, r0
  404a78:	b140      	cbz	r0, 404a8c <__sfmoreglue+0x28>
  404a7a:	2100      	movs	r1, #0
  404a7c:	e880 0042 	stmia.w	r0, {r1, r6}
  404a80:	300c      	adds	r0, #12
  404a82:	60a0      	str	r0, [r4, #8]
  404a84:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404a88:	f7fe fb75 	bl	403176 <memset>
  404a8c:	4620      	mov	r0, r4
  404a8e:	bd70      	pop	{r4, r5, r6, pc}

00404a90 <__sinit>:
  404a90:	6983      	ldr	r3, [r0, #24]
  404a92:	b510      	push	{r4, lr}
  404a94:	4604      	mov	r4, r0
  404a96:	bb33      	cbnz	r3, 404ae6 <__sinit+0x56>
  404a98:	6483      	str	r3, [r0, #72]	; 0x48
  404a9a:	64c3      	str	r3, [r0, #76]	; 0x4c
  404a9c:	6503      	str	r3, [r0, #80]	; 0x50
  404a9e:	4b12      	ldr	r3, [pc, #72]	; (404ae8 <__sinit+0x58>)
  404aa0:	4a12      	ldr	r2, [pc, #72]	; (404aec <__sinit+0x5c>)
  404aa2:	681b      	ldr	r3, [r3, #0]
  404aa4:	6282      	str	r2, [r0, #40]	; 0x28
  404aa6:	4298      	cmp	r0, r3
  404aa8:	bf04      	itt	eq
  404aaa:	2301      	moveq	r3, #1
  404aac:	6183      	streq	r3, [r0, #24]
  404aae:	f000 f81f 	bl	404af0 <__sfp>
  404ab2:	6060      	str	r0, [r4, #4]
  404ab4:	4620      	mov	r0, r4
  404ab6:	f000 f81b 	bl	404af0 <__sfp>
  404aba:	60a0      	str	r0, [r4, #8]
  404abc:	4620      	mov	r0, r4
  404abe:	f000 f817 	bl	404af0 <__sfp>
  404ac2:	2200      	movs	r2, #0
  404ac4:	60e0      	str	r0, [r4, #12]
  404ac6:	2104      	movs	r1, #4
  404ac8:	6860      	ldr	r0, [r4, #4]
  404aca:	f7ff ffa7 	bl	404a1c <std.isra.0>
  404ace:	2201      	movs	r2, #1
  404ad0:	2109      	movs	r1, #9
  404ad2:	68a0      	ldr	r0, [r4, #8]
  404ad4:	f7ff ffa2 	bl	404a1c <std.isra.0>
  404ad8:	2202      	movs	r2, #2
  404ada:	2112      	movs	r1, #18
  404adc:	68e0      	ldr	r0, [r4, #12]
  404ade:	f7ff ff9d 	bl	404a1c <std.isra.0>
  404ae2:	2301      	movs	r3, #1
  404ae4:	61a3      	str	r3, [r4, #24]
  404ae6:	bd10      	pop	{r4, pc}
  404ae8:	00405e08 	.word	0x00405e08
  404aec:	00404a11 	.word	0x00404a11

00404af0 <__sfp>:
  404af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404af2:	4b1c      	ldr	r3, [pc, #112]	; (404b64 <__sfp+0x74>)
  404af4:	681e      	ldr	r6, [r3, #0]
  404af6:	69b3      	ldr	r3, [r6, #24]
  404af8:	4607      	mov	r7, r0
  404afa:	b913      	cbnz	r3, 404b02 <__sfp+0x12>
  404afc:	4630      	mov	r0, r6
  404afe:	f7ff ffc7 	bl	404a90 <__sinit>
  404b02:	3648      	adds	r6, #72	; 0x48
  404b04:	68b4      	ldr	r4, [r6, #8]
  404b06:	6873      	ldr	r3, [r6, #4]
  404b08:	3b01      	subs	r3, #1
  404b0a:	d503      	bpl.n	404b14 <__sfp+0x24>
  404b0c:	6833      	ldr	r3, [r6, #0]
  404b0e:	b133      	cbz	r3, 404b1e <__sfp+0x2e>
  404b10:	6836      	ldr	r6, [r6, #0]
  404b12:	e7f7      	b.n	404b04 <__sfp+0x14>
  404b14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  404b18:	b16d      	cbz	r5, 404b36 <__sfp+0x46>
  404b1a:	3468      	adds	r4, #104	; 0x68
  404b1c:	e7f4      	b.n	404b08 <__sfp+0x18>
  404b1e:	2104      	movs	r1, #4
  404b20:	4638      	mov	r0, r7
  404b22:	f7ff ff9f 	bl	404a64 <__sfmoreglue>
  404b26:	6030      	str	r0, [r6, #0]
  404b28:	2800      	cmp	r0, #0
  404b2a:	d1f1      	bne.n	404b10 <__sfp+0x20>
  404b2c:	230c      	movs	r3, #12
  404b2e:	603b      	str	r3, [r7, #0]
  404b30:	4604      	mov	r4, r0
  404b32:	4620      	mov	r0, r4
  404b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404b3a:	81e3      	strh	r3, [r4, #14]
  404b3c:	2301      	movs	r3, #1
  404b3e:	81a3      	strh	r3, [r4, #12]
  404b40:	6665      	str	r5, [r4, #100]	; 0x64
  404b42:	6025      	str	r5, [r4, #0]
  404b44:	60a5      	str	r5, [r4, #8]
  404b46:	6065      	str	r5, [r4, #4]
  404b48:	6125      	str	r5, [r4, #16]
  404b4a:	6165      	str	r5, [r4, #20]
  404b4c:	61a5      	str	r5, [r4, #24]
  404b4e:	2208      	movs	r2, #8
  404b50:	4629      	mov	r1, r5
  404b52:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  404b56:	f7fe fb0e 	bl	403176 <memset>
  404b5a:	6365      	str	r5, [r4, #52]	; 0x34
  404b5c:	63a5      	str	r5, [r4, #56]	; 0x38
  404b5e:	64a5      	str	r5, [r4, #72]	; 0x48
  404b60:	64e5      	str	r5, [r4, #76]	; 0x4c
  404b62:	e7e6      	b.n	404b32 <__sfp+0x42>
  404b64:	00405e08 	.word	0x00405e08

00404b68 <_fwalk_reent>:
  404b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404b6c:	4680      	mov	r8, r0
  404b6e:	4689      	mov	r9, r1
  404b70:	f100 0448 	add.w	r4, r0, #72	; 0x48
  404b74:	2600      	movs	r6, #0
  404b76:	b914      	cbnz	r4, 404b7e <_fwalk_reent+0x16>
  404b78:	4630      	mov	r0, r6
  404b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404b7e:	68a5      	ldr	r5, [r4, #8]
  404b80:	6867      	ldr	r7, [r4, #4]
  404b82:	3f01      	subs	r7, #1
  404b84:	d501      	bpl.n	404b8a <_fwalk_reent+0x22>
  404b86:	6824      	ldr	r4, [r4, #0]
  404b88:	e7f5      	b.n	404b76 <_fwalk_reent+0xe>
  404b8a:	89ab      	ldrh	r3, [r5, #12]
  404b8c:	2b01      	cmp	r3, #1
  404b8e:	d907      	bls.n	404ba0 <_fwalk_reent+0x38>
  404b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  404b94:	3301      	adds	r3, #1
  404b96:	d003      	beq.n	404ba0 <_fwalk_reent+0x38>
  404b98:	4629      	mov	r1, r5
  404b9a:	4640      	mov	r0, r8
  404b9c:	47c8      	blx	r9
  404b9e:	4306      	orrs	r6, r0
  404ba0:	3568      	adds	r5, #104	; 0x68
  404ba2:	e7ee      	b.n	404b82 <_fwalk_reent+0x1a>

00404ba4 <_localeconv_r>:
  404ba4:	4b04      	ldr	r3, [pc, #16]	; (404bb8 <_localeconv_r+0x14>)
  404ba6:	681b      	ldr	r3, [r3, #0]
  404ba8:	6a18      	ldr	r0, [r3, #32]
  404baa:	4b04      	ldr	r3, [pc, #16]	; (404bbc <_localeconv_r+0x18>)
  404bac:	2800      	cmp	r0, #0
  404bae:	bf08      	it	eq
  404bb0:	4618      	moveq	r0, r3
  404bb2:	30f0      	adds	r0, #240	; 0xf0
  404bb4:	4770      	bx	lr
  404bb6:	bf00      	nop
  404bb8:	20400048 	.word	0x20400048
  404bbc:	204000ac 	.word	0x204000ac

00404bc0 <__swhatbuf_r>:
  404bc0:	b570      	push	{r4, r5, r6, lr}
  404bc2:	460e      	mov	r6, r1
  404bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404bc8:	2900      	cmp	r1, #0
  404bca:	b090      	sub	sp, #64	; 0x40
  404bcc:	4614      	mov	r4, r2
  404bce:	461d      	mov	r5, r3
  404bd0:	da07      	bge.n	404be2 <__swhatbuf_r+0x22>
  404bd2:	2300      	movs	r3, #0
  404bd4:	602b      	str	r3, [r5, #0]
  404bd6:	89b3      	ldrh	r3, [r6, #12]
  404bd8:	061a      	lsls	r2, r3, #24
  404bda:	d410      	bmi.n	404bfe <__swhatbuf_r+0x3e>
  404bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404be0:	e00e      	b.n	404c00 <__swhatbuf_r+0x40>
  404be2:	aa01      	add	r2, sp, #4
  404be4:	f000 feaa 	bl	40593c <_fstat_r>
  404be8:	2800      	cmp	r0, #0
  404bea:	dbf2      	blt.n	404bd2 <__swhatbuf_r+0x12>
  404bec:	9a02      	ldr	r2, [sp, #8]
  404bee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404bf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  404bf6:	425a      	negs	r2, r3
  404bf8:	415a      	adcs	r2, r3
  404bfa:	602a      	str	r2, [r5, #0]
  404bfc:	e7ee      	b.n	404bdc <__swhatbuf_r+0x1c>
  404bfe:	2340      	movs	r3, #64	; 0x40
  404c00:	2000      	movs	r0, #0
  404c02:	6023      	str	r3, [r4, #0]
  404c04:	b010      	add	sp, #64	; 0x40
  404c06:	bd70      	pop	{r4, r5, r6, pc}

00404c08 <__smakebuf_r>:
  404c08:	898b      	ldrh	r3, [r1, #12]
  404c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  404c0c:	079d      	lsls	r5, r3, #30
  404c0e:	4606      	mov	r6, r0
  404c10:	460c      	mov	r4, r1
  404c12:	d507      	bpl.n	404c24 <__smakebuf_r+0x1c>
  404c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
  404c18:	6023      	str	r3, [r4, #0]
  404c1a:	6123      	str	r3, [r4, #16]
  404c1c:	2301      	movs	r3, #1
  404c1e:	6163      	str	r3, [r4, #20]
  404c20:	b002      	add	sp, #8
  404c22:	bd70      	pop	{r4, r5, r6, pc}
  404c24:	ab01      	add	r3, sp, #4
  404c26:	466a      	mov	r2, sp
  404c28:	f7ff ffca 	bl	404bc0 <__swhatbuf_r>
  404c2c:	9900      	ldr	r1, [sp, #0]
  404c2e:	4605      	mov	r5, r0
  404c30:	4630      	mov	r0, r6
  404c32:	f000 fbb1 	bl	405398 <_malloc_r>
  404c36:	b948      	cbnz	r0, 404c4c <__smakebuf_r+0x44>
  404c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c3c:	059a      	lsls	r2, r3, #22
  404c3e:	d4ef      	bmi.n	404c20 <__smakebuf_r+0x18>
  404c40:	f023 0303 	bic.w	r3, r3, #3
  404c44:	f043 0302 	orr.w	r3, r3, #2
  404c48:	81a3      	strh	r3, [r4, #12]
  404c4a:	e7e3      	b.n	404c14 <__smakebuf_r+0xc>
  404c4c:	4b0d      	ldr	r3, [pc, #52]	; (404c84 <__smakebuf_r+0x7c>)
  404c4e:	62b3      	str	r3, [r6, #40]	; 0x28
  404c50:	89a3      	ldrh	r3, [r4, #12]
  404c52:	6020      	str	r0, [r4, #0]
  404c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404c58:	81a3      	strh	r3, [r4, #12]
  404c5a:	9b00      	ldr	r3, [sp, #0]
  404c5c:	6163      	str	r3, [r4, #20]
  404c5e:	9b01      	ldr	r3, [sp, #4]
  404c60:	6120      	str	r0, [r4, #16]
  404c62:	b15b      	cbz	r3, 404c7c <__smakebuf_r+0x74>
  404c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404c68:	4630      	mov	r0, r6
  404c6a:	f000 fe79 	bl	405960 <_isatty_r>
  404c6e:	b128      	cbz	r0, 404c7c <__smakebuf_r+0x74>
  404c70:	89a3      	ldrh	r3, [r4, #12]
  404c72:	f023 0303 	bic.w	r3, r3, #3
  404c76:	f043 0301 	orr.w	r3, r3, #1
  404c7a:	81a3      	strh	r3, [r4, #12]
  404c7c:	89a3      	ldrh	r3, [r4, #12]
  404c7e:	431d      	orrs	r5, r3
  404c80:	81a5      	strh	r5, [r4, #12]
  404c82:	e7cd      	b.n	404c20 <__smakebuf_r+0x18>
  404c84:	00404a11 	.word	0x00404a11

00404c88 <malloc>:
  404c88:	4b02      	ldr	r3, [pc, #8]	; (404c94 <malloc+0xc>)
  404c8a:	4601      	mov	r1, r0
  404c8c:	6818      	ldr	r0, [r3, #0]
  404c8e:	f000 bb83 	b.w	405398 <_malloc_r>
  404c92:	bf00      	nop
  404c94:	20400048 	.word	0x20400048
	...

00404ca0 <memchr>:
  404ca0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404ca4:	2a10      	cmp	r2, #16
  404ca6:	db2b      	blt.n	404d00 <memchr+0x60>
  404ca8:	f010 0f07 	tst.w	r0, #7
  404cac:	d008      	beq.n	404cc0 <memchr+0x20>
  404cae:	f810 3b01 	ldrb.w	r3, [r0], #1
  404cb2:	3a01      	subs	r2, #1
  404cb4:	428b      	cmp	r3, r1
  404cb6:	d02d      	beq.n	404d14 <memchr+0x74>
  404cb8:	f010 0f07 	tst.w	r0, #7
  404cbc:	b342      	cbz	r2, 404d10 <memchr+0x70>
  404cbe:	d1f6      	bne.n	404cae <memchr+0xe>
  404cc0:	b4f0      	push	{r4, r5, r6, r7}
  404cc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404cc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404cca:	f022 0407 	bic.w	r4, r2, #7
  404cce:	f07f 0700 	mvns.w	r7, #0
  404cd2:	2300      	movs	r3, #0
  404cd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404cd8:	3c08      	subs	r4, #8
  404cda:	ea85 0501 	eor.w	r5, r5, r1
  404cde:	ea86 0601 	eor.w	r6, r6, r1
  404ce2:	fa85 f547 	uadd8	r5, r5, r7
  404ce6:	faa3 f587 	sel	r5, r3, r7
  404cea:	fa86 f647 	uadd8	r6, r6, r7
  404cee:	faa5 f687 	sel	r6, r5, r7
  404cf2:	b98e      	cbnz	r6, 404d18 <memchr+0x78>
  404cf4:	d1ee      	bne.n	404cd4 <memchr+0x34>
  404cf6:	bcf0      	pop	{r4, r5, r6, r7}
  404cf8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404cfc:	f002 0207 	and.w	r2, r2, #7
  404d00:	b132      	cbz	r2, 404d10 <memchr+0x70>
  404d02:	f810 3b01 	ldrb.w	r3, [r0], #1
  404d06:	3a01      	subs	r2, #1
  404d08:	ea83 0301 	eor.w	r3, r3, r1
  404d0c:	b113      	cbz	r3, 404d14 <memchr+0x74>
  404d0e:	d1f8      	bne.n	404d02 <memchr+0x62>
  404d10:	2000      	movs	r0, #0
  404d12:	4770      	bx	lr
  404d14:	3801      	subs	r0, #1
  404d16:	4770      	bx	lr
  404d18:	2d00      	cmp	r5, #0
  404d1a:	bf06      	itte	eq
  404d1c:	4635      	moveq	r5, r6
  404d1e:	3803      	subeq	r0, #3
  404d20:	3807      	subne	r0, #7
  404d22:	f015 0f01 	tst.w	r5, #1
  404d26:	d107      	bne.n	404d38 <memchr+0x98>
  404d28:	3001      	adds	r0, #1
  404d2a:	f415 7f80 	tst.w	r5, #256	; 0x100
  404d2e:	bf02      	ittt	eq
  404d30:	3001      	addeq	r0, #1
  404d32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404d36:	3001      	addeq	r0, #1
  404d38:	bcf0      	pop	{r4, r5, r6, r7}
  404d3a:	3801      	subs	r0, #1
  404d3c:	4770      	bx	lr
  404d3e:	bf00      	nop

00404d40 <_Balloc>:
  404d40:	b570      	push	{r4, r5, r6, lr}
  404d42:	6a45      	ldr	r5, [r0, #36]	; 0x24
  404d44:	4604      	mov	r4, r0
  404d46:	460e      	mov	r6, r1
  404d48:	b93d      	cbnz	r5, 404d5a <_Balloc+0x1a>
  404d4a:	2010      	movs	r0, #16
  404d4c:	f7ff ff9c 	bl	404c88 <malloc>
  404d50:	6260      	str	r0, [r4, #36]	; 0x24
  404d52:	6045      	str	r5, [r0, #4]
  404d54:	6085      	str	r5, [r0, #8]
  404d56:	6005      	str	r5, [r0, #0]
  404d58:	60c5      	str	r5, [r0, #12]
  404d5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  404d5c:	68eb      	ldr	r3, [r5, #12]
  404d5e:	b183      	cbz	r3, 404d82 <_Balloc+0x42>
  404d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404d62:	68db      	ldr	r3, [r3, #12]
  404d64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  404d68:	b9b8      	cbnz	r0, 404d9a <_Balloc+0x5a>
  404d6a:	2101      	movs	r1, #1
  404d6c:	fa01 f506 	lsl.w	r5, r1, r6
  404d70:	1d6a      	adds	r2, r5, #5
  404d72:	0092      	lsls	r2, r2, #2
  404d74:	4620      	mov	r0, r4
  404d76:	f000 fab3 	bl	4052e0 <_calloc_r>
  404d7a:	b160      	cbz	r0, 404d96 <_Balloc+0x56>
  404d7c:	6046      	str	r6, [r0, #4]
  404d7e:	6085      	str	r5, [r0, #8]
  404d80:	e00e      	b.n	404da0 <_Balloc+0x60>
  404d82:	2221      	movs	r2, #33	; 0x21
  404d84:	2104      	movs	r1, #4
  404d86:	4620      	mov	r0, r4
  404d88:	f000 faaa 	bl	4052e0 <_calloc_r>
  404d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404d8e:	60e8      	str	r0, [r5, #12]
  404d90:	68db      	ldr	r3, [r3, #12]
  404d92:	2b00      	cmp	r3, #0
  404d94:	d1e4      	bne.n	404d60 <_Balloc+0x20>
  404d96:	2000      	movs	r0, #0
  404d98:	bd70      	pop	{r4, r5, r6, pc}
  404d9a:	6802      	ldr	r2, [r0, #0]
  404d9c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  404da0:	2300      	movs	r3, #0
  404da2:	6103      	str	r3, [r0, #16]
  404da4:	60c3      	str	r3, [r0, #12]
  404da6:	bd70      	pop	{r4, r5, r6, pc}

00404da8 <_Bfree>:
  404da8:	b570      	push	{r4, r5, r6, lr}
  404daa:	6a44      	ldr	r4, [r0, #36]	; 0x24
  404dac:	4606      	mov	r6, r0
  404dae:	460d      	mov	r5, r1
  404db0:	b93c      	cbnz	r4, 404dc2 <_Bfree+0x1a>
  404db2:	2010      	movs	r0, #16
  404db4:	f7ff ff68 	bl	404c88 <malloc>
  404db8:	6270      	str	r0, [r6, #36]	; 0x24
  404dba:	6044      	str	r4, [r0, #4]
  404dbc:	6084      	str	r4, [r0, #8]
  404dbe:	6004      	str	r4, [r0, #0]
  404dc0:	60c4      	str	r4, [r0, #12]
  404dc2:	b13d      	cbz	r5, 404dd4 <_Bfree+0x2c>
  404dc4:	6a73      	ldr	r3, [r6, #36]	; 0x24
  404dc6:	686a      	ldr	r2, [r5, #4]
  404dc8:	68db      	ldr	r3, [r3, #12]
  404dca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404dce:	6029      	str	r1, [r5, #0]
  404dd0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  404dd4:	bd70      	pop	{r4, r5, r6, pc}

00404dd6 <__multadd>:
  404dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404dda:	690d      	ldr	r5, [r1, #16]
  404ddc:	461f      	mov	r7, r3
  404dde:	4606      	mov	r6, r0
  404de0:	460c      	mov	r4, r1
  404de2:	f101 0e14 	add.w	lr, r1, #20
  404de6:	2300      	movs	r3, #0
  404de8:	f8de 0000 	ldr.w	r0, [lr]
  404dec:	b281      	uxth	r1, r0
  404dee:	fb02 7101 	mla	r1, r2, r1, r7
  404df2:	0c0f      	lsrs	r7, r1, #16
  404df4:	0c00      	lsrs	r0, r0, #16
  404df6:	fb02 7000 	mla	r0, r2, r0, r7
  404dfa:	b289      	uxth	r1, r1
  404dfc:	3301      	adds	r3, #1
  404dfe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  404e02:	429d      	cmp	r5, r3
  404e04:	ea4f 4710 	mov.w	r7, r0, lsr #16
  404e08:	f84e 1b04 	str.w	r1, [lr], #4
  404e0c:	dcec      	bgt.n	404de8 <__multadd+0x12>
  404e0e:	b1d7      	cbz	r7, 404e46 <__multadd+0x70>
  404e10:	68a3      	ldr	r3, [r4, #8]
  404e12:	429d      	cmp	r5, r3
  404e14:	db12      	blt.n	404e3c <__multadd+0x66>
  404e16:	6861      	ldr	r1, [r4, #4]
  404e18:	4630      	mov	r0, r6
  404e1a:	3101      	adds	r1, #1
  404e1c:	f7ff ff90 	bl	404d40 <_Balloc>
  404e20:	6922      	ldr	r2, [r4, #16]
  404e22:	3202      	adds	r2, #2
  404e24:	f104 010c 	add.w	r1, r4, #12
  404e28:	4680      	mov	r8, r0
  404e2a:	0092      	lsls	r2, r2, #2
  404e2c:	300c      	adds	r0, #12
  404e2e:	f7fe f997 	bl	403160 <memcpy>
  404e32:	4621      	mov	r1, r4
  404e34:	4630      	mov	r0, r6
  404e36:	f7ff ffb7 	bl	404da8 <_Bfree>
  404e3a:	4644      	mov	r4, r8
  404e3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  404e40:	3501      	adds	r5, #1
  404e42:	615f      	str	r7, [r3, #20]
  404e44:	6125      	str	r5, [r4, #16]
  404e46:	4620      	mov	r0, r4
  404e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404e4c <__hi0bits>:
  404e4c:	0c02      	lsrs	r2, r0, #16
  404e4e:	0412      	lsls	r2, r2, #16
  404e50:	4603      	mov	r3, r0
  404e52:	b9b2      	cbnz	r2, 404e82 <__hi0bits+0x36>
  404e54:	0403      	lsls	r3, r0, #16
  404e56:	2010      	movs	r0, #16
  404e58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  404e5c:	bf04      	itt	eq
  404e5e:	021b      	lsleq	r3, r3, #8
  404e60:	3008      	addeq	r0, #8
  404e62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  404e66:	bf04      	itt	eq
  404e68:	011b      	lsleq	r3, r3, #4
  404e6a:	3004      	addeq	r0, #4
  404e6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  404e70:	bf04      	itt	eq
  404e72:	009b      	lsleq	r3, r3, #2
  404e74:	3002      	addeq	r0, #2
  404e76:	2b00      	cmp	r3, #0
  404e78:	db06      	blt.n	404e88 <__hi0bits+0x3c>
  404e7a:	005b      	lsls	r3, r3, #1
  404e7c:	d503      	bpl.n	404e86 <__hi0bits+0x3a>
  404e7e:	3001      	adds	r0, #1
  404e80:	4770      	bx	lr
  404e82:	2000      	movs	r0, #0
  404e84:	e7e8      	b.n	404e58 <__hi0bits+0xc>
  404e86:	2020      	movs	r0, #32
  404e88:	4770      	bx	lr

00404e8a <__lo0bits>:
  404e8a:	6803      	ldr	r3, [r0, #0]
  404e8c:	f013 0207 	ands.w	r2, r3, #7
  404e90:	4601      	mov	r1, r0
  404e92:	d00b      	beq.n	404eac <__lo0bits+0x22>
  404e94:	07da      	lsls	r2, r3, #31
  404e96:	d423      	bmi.n	404ee0 <__lo0bits+0x56>
  404e98:	0798      	lsls	r0, r3, #30
  404e9a:	bf49      	itett	mi
  404e9c:	085b      	lsrmi	r3, r3, #1
  404e9e:	089b      	lsrpl	r3, r3, #2
  404ea0:	2001      	movmi	r0, #1
  404ea2:	600b      	strmi	r3, [r1, #0]
  404ea4:	bf5c      	itt	pl
  404ea6:	600b      	strpl	r3, [r1, #0]
  404ea8:	2002      	movpl	r0, #2
  404eaa:	4770      	bx	lr
  404eac:	b298      	uxth	r0, r3
  404eae:	b9a8      	cbnz	r0, 404edc <__lo0bits+0x52>
  404eb0:	0c1b      	lsrs	r3, r3, #16
  404eb2:	2010      	movs	r0, #16
  404eb4:	f013 0fff 	tst.w	r3, #255	; 0xff
  404eb8:	bf04      	itt	eq
  404eba:	0a1b      	lsreq	r3, r3, #8
  404ebc:	3008      	addeq	r0, #8
  404ebe:	071a      	lsls	r2, r3, #28
  404ec0:	bf04      	itt	eq
  404ec2:	091b      	lsreq	r3, r3, #4
  404ec4:	3004      	addeq	r0, #4
  404ec6:	079a      	lsls	r2, r3, #30
  404ec8:	bf04      	itt	eq
  404eca:	089b      	lsreq	r3, r3, #2
  404ecc:	3002      	addeq	r0, #2
  404ece:	07da      	lsls	r2, r3, #31
  404ed0:	d402      	bmi.n	404ed8 <__lo0bits+0x4e>
  404ed2:	085b      	lsrs	r3, r3, #1
  404ed4:	d006      	beq.n	404ee4 <__lo0bits+0x5a>
  404ed6:	3001      	adds	r0, #1
  404ed8:	600b      	str	r3, [r1, #0]
  404eda:	4770      	bx	lr
  404edc:	4610      	mov	r0, r2
  404ede:	e7e9      	b.n	404eb4 <__lo0bits+0x2a>
  404ee0:	2000      	movs	r0, #0
  404ee2:	4770      	bx	lr
  404ee4:	2020      	movs	r0, #32
  404ee6:	4770      	bx	lr

00404ee8 <__i2b>:
  404ee8:	b510      	push	{r4, lr}
  404eea:	460c      	mov	r4, r1
  404eec:	2101      	movs	r1, #1
  404eee:	f7ff ff27 	bl	404d40 <_Balloc>
  404ef2:	2201      	movs	r2, #1
  404ef4:	6144      	str	r4, [r0, #20]
  404ef6:	6102      	str	r2, [r0, #16]
  404ef8:	bd10      	pop	{r4, pc}

00404efa <__multiply>:
  404efa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404efe:	4614      	mov	r4, r2
  404f00:	690a      	ldr	r2, [r1, #16]
  404f02:	6923      	ldr	r3, [r4, #16]
  404f04:	429a      	cmp	r2, r3
  404f06:	bfb8      	it	lt
  404f08:	460b      	movlt	r3, r1
  404f0a:	4689      	mov	r9, r1
  404f0c:	bfbc      	itt	lt
  404f0e:	46a1      	movlt	r9, r4
  404f10:	461c      	movlt	r4, r3
  404f12:	f8d9 7010 	ldr.w	r7, [r9, #16]
  404f16:	f8d4 a010 	ldr.w	sl, [r4, #16]
  404f1a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  404f1e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  404f22:	eb07 060a 	add.w	r6, r7, sl
  404f26:	429e      	cmp	r6, r3
  404f28:	bfc8      	it	gt
  404f2a:	3101      	addgt	r1, #1
  404f2c:	f7ff ff08 	bl	404d40 <_Balloc>
  404f30:	f100 0514 	add.w	r5, r0, #20
  404f34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  404f38:	462b      	mov	r3, r5
  404f3a:	2200      	movs	r2, #0
  404f3c:	4543      	cmp	r3, r8
  404f3e:	d316      	bcc.n	404f6e <__multiply+0x74>
  404f40:	f104 0214 	add.w	r2, r4, #20
  404f44:	f109 0114 	add.w	r1, r9, #20
  404f48:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  404f4c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  404f50:	9301      	str	r3, [sp, #4]
  404f52:	9c01      	ldr	r4, [sp, #4]
  404f54:	4294      	cmp	r4, r2
  404f56:	4613      	mov	r3, r2
  404f58:	d80c      	bhi.n	404f74 <__multiply+0x7a>
  404f5a:	2e00      	cmp	r6, #0
  404f5c:	dd03      	ble.n	404f66 <__multiply+0x6c>
  404f5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  404f62:	2b00      	cmp	r3, #0
  404f64:	d054      	beq.n	405010 <__multiply+0x116>
  404f66:	6106      	str	r6, [r0, #16]
  404f68:	b003      	add	sp, #12
  404f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f6e:	f843 2b04 	str.w	r2, [r3], #4
  404f72:	e7e3      	b.n	404f3c <__multiply+0x42>
  404f74:	f8b3 a000 	ldrh.w	sl, [r3]
  404f78:	3204      	adds	r2, #4
  404f7a:	f1ba 0f00 	cmp.w	sl, #0
  404f7e:	d020      	beq.n	404fc2 <__multiply+0xc8>
  404f80:	46ae      	mov	lr, r5
  404f82:	4689      	mov	r9, r1
  404f84:	f04f 0c00 	mov.w	ip, #0
  404f88:	f859 4b04 	ldr.w	r4, [r9], #4
  404f8c:	f8be b000 	ldrh.w	fp, [lr]
  404f90:	b2a3      	uxth	r3, r4
  404f92:	fb0a b303 	mla	r3, sl, r3, fp
  404f96:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  404f9a:	f8de 4000 	ldr.w	r4, [lr]
  404f9e:	4463      	add	r3, ip
  404fa0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  404fa4:	fb0a c40b 	mla	r4, sl, fp, ip
  404fa8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  404fac:	b29b      	uxth	r3, r3
  404fae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  404fb2:	454f      	cmp	r7, r9
  404fb4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  404fb8:	f84e 3b04 	str.w	r3, [lr], #4
  404fbc:	d8e4      	bhi.n	404f88 <__multiply+0x8e>
  404fbe:	f8ce c000 	str.w	ip, [lr]
  404fc2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  404fc6:	f1b9 0f00 	cmp.w	r9, #0
  404fca:	d01f      	beq.n	40500c <__multiply+0x112>
  404fcc:	682b      	ldr	r3, [r5, #0]
  404fce:	46ae      	mov	lr, r5
  404fd0:	468c      	mov	ip, r1
  404fd2:	f04f 0a00 	mov.w	sl, #0
  404fd6:	f8bc 4000 	ldrh.w	r4, [ip]
  404fda:	f8be b002 	ldrh.w	fp, [lr, #2]
  404fde:	fb09 b404 	mla	r4, r9, r4, fp
  404fe2:	44a2      	add	sl, r4
  404fe4:	b29b      	uxth	r3, r3
  404fe6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  404fea:	f84e 3b04 	str.w	r3, [lr], #4
  404fee:	f85c 3b04 	ldr.w	r3, [ip], #4
  404ff2:	f8be 4000 	ldrh.w	r4, [lr]
  404ff6:	0c1b      	lsrs	r3, r3, #16
  404ff8:	fb09 4303 	mla	r3, r9, r3, r4
  404ffc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  405000:	4567      	cmp	r7, ip
  405002:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  405006:	d8e6      	bhi.n	404fd6 <__multiply+0xdc>
  405008:	f8ce 3000 	str.w	r3, [lr]
  40500c:	3504      	adds	r5, #4
  40500e:	e7a0      	b.n	404f52 <__multiply+0x58>
  405010:	3e01      	subs	r6, #1
  405012:	e7a2      	b.n	404f5a <__multiply+0x60>

00405014 <__pow5mult>:
  405014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405018:	4615      	mov	r5, r2
  40501a:	f012 0203 	ands.w	r2, r2, #3
  40501e:	4606      	mov	r6, r0
  405020:	460f      	mov	r7, r1
  405022:	d007      	beq.n	405034 <__pow5mult+0x20>
  405024:	3a01      	subs	r2, #1
  405026:	4c21      	ldr	r4, [pc, #132]	; (4050ac <__pow5mult+0x98>)
  405028:	2300      	movs	r3, #0
  40502a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40502e:	f7ff fed2 	bl	404dd6 <__multadd>
  405032:	4607      	mov	r7, r0
  405034:	10ad      	asrs	r5, r5, #2
  405036:	d035      	beq.n	4050a4 <__pow5mult+0x90>
  405038:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40503a:	b93c      	cbnz	r4, 40504c <__pow5mult+0x38>
  40503c:	2010      	movs	r0, #16
  40503e:	f7ff fe23 	bl	404c88 <malloc>
  405042:	6270      	str	r0, [r6, #36]	; 0x24
  405044:	6044      	str	r4, [r0, #4]
  405046:	6084      	str	r4, [r0, #8]
  405048:	6004      	str	r4, [r0, #0]
  40504a:	60c4      	str	r4, [r0, #12]
  40504c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  405050:	f8d8 4008 	ldr.w	r4, [r8, #8]
  405054:	b94c      	cbnz	r4, 40506a <__pow5mult+0x56>
  405056:	f240 2171 	movw	r1, #625	; 0x271
  40505a:	4630      	mov	r0, r6
  40505c:	f7ff ff44 	bl	404ee8 <__i2b>
  405060:	2300      	movs	r3, #0
  405062:	f8c8 0008 	str.w	r0, [r8, #8]
  405066:	4604      	mov	r4, r0
  405068:	6003      	str	r3, [r0, #0]
  40506a:	f04f 0800 	mov.w	r8, #0
  40506e:	07eb      	lsls	r3, r5, #31
  405070:	d50a      	bpl.n	405088 <__pow5mult+0x74>
  405072:	4639      	mov	r1, r7
  405074:	4622      	mov	r2, r4
  405076:	4630      	mov	r0, r6
  405078:	f7ff ff3f 	bl	404efa <__multiply>
  40507c:	4639      	mov	r1, r7
  40507e:	4681      	mov	r9, r0
  405080:	4630      	mov	r0, r6
  405082:	f7ff fe91 	bl	404da8 <_Bfree>
  405086:	464f      	mov	r7, r9
  405088:	106d      	asrs	r5, r5, #1
  40508a:	d00b      	beq.n	4050a4 <__pow5mult+0x90>
  40508c:	6820      	ldr	r0, [r4, #0]
  40508e:	b938      	cbnz	r0, 4050a0 <__pow5mult+0x8c>
  405090:	4622      	mov	r2, r4
  405092:	4621      	mov	r1, r4
  405094:	4630      	mov	r0, r6
  405096:	f7ff ff30 	bl	404efa <__multiply>
  40509a:	6020      	str	r0, [r4, #0]
  40509c:	f8c0 8000 	str.w	r8, [r0]
  4050a0:	4604      	mov	r4, r0
  4050a2:	e7e4      	b.n	40506e <__pow5mult+0x5a>
  4050a4:	4638      	mov	r0, r7
  4050a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4050aa:	bf00      	nop
  4050ac:	00405fa0 	.word	0x00405fa0

004050b0 <__lshift>:
  4050b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4050b4:	460c      	mov	r4, r1
  4050b6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4050ba:	6923      	ldr	r3, [r4, #16]
  4050bc:	6849      	ldr	r1, [r1, #4]
  4050be:	eb0a 0903 	add.w	r9, sl, r3
  4050c2:	68a3      	ldr	r3, [r4, #8]
  4050c4:	4607      	mov	r7, r0
  4050c6:	4616      	mov	r6, r2
  4050c8:	f109 0501 	add.w	r5, r9, #1
  4050cc:	42ab      	cmp	r3, r5
  4050ce:	db31      	blt.n	405134 <__lshift+0x84>
  4050d0:	4638      	mov	r0, r7
  4050d2:	f7ff fe35 	bl	404d40 <_Balloc>
  4050d6:	2200      	movs	r2, #0
  4050d8:	4680      	mov	r8, r0
  4050da:	f100 0314 	add.w	r3, r0, #20
  4050de:	4611      	mov	r1, r2
  4050e0:	4552      	cmp	r2, sl
  4050e2:	db2a      	blt.n	40513a <__lshift+0x8a>
  4050e4:	6920      	ldr	r0, [r4, #16]
  4050e6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  4050ea:	f104 0114 	add.w	r1, r4, #20
  4050ee:	f016 021f 	ands.w	r2, r6, #31
  4050f2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  4050f6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  4050fa:	d022      	beq.n	405142 <__lshift+0x92>
  4050fc:	f1c2 0c20 	rsb	ip, r2, #32
  405100:	2000      	movs	r0, #0
  405102:	680e      	ldr	r6, [r1, #0]
  405104:	4096      	lsls	r6, r2
  405106:	4330      	orrs	r0, r6
  405108:	f843 0b04 	str.w	r0, [r3], #4
  40510c:	f851 0b04 	ldr.w	r0, [r1], #4
  405110:	458e      	cmp	lr, r1
  405112:	fa20 f00c 	lsr.w	r0, r0, ip
  405116:	d8f4      	bhi.n	405102 <__lshift+0x52>
  405118:	6018      	str	r0, [r3, #0]
  40511a:	b108      	cbz	r0, 405120 <__lshift+0x70>
  40511c:	f109 0502 	add.w	r5, r9, #2
  405120:	3d01      	subs	r5, #1
  405122:	4638      	mov	r0, r7
  405124:	f8c8 5010 	str.w	r5, [r8, #16]
  405128:	4621      	mov	r1, r4
  40512a:	f7ff fe3d 	bl	404da8 <_Bfree>
  40512e:	4640      	mov	r0, r8
  405130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405134:	3101      	adds	r1, #1
  405136:	005b      	lsls	r3, r3, #1
  405138:	e7c8      	b.n	4050cc <__lshift+0x1c>
  40513a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40513e:	3201      	adds	r2, #1
  405140:	e7ce      	b.n	4050e0 <__lshift+0x30>
  405142:	3b04      	subs	r3, #4
  405144:	f851 2b04 	ldr.w	r2, [r1], #4
  405148:	f843 2f04 	str.w	r2, [r3, #4]!
  40514c:	458e      	cmp	lr, r1
  40514e:	d8f9      	bhi.n	405144 <__lshift+0x94>
  405150:	e7e6      	b.n	405120 <__lshift+0x70>

00405152 <__mcmp>:
  405152:	6903      	ldr	r3, [r0, #16]
  405154:	690a      	ldr	r2, [r1, #16]
  405156:	1a9b      	subs	r3, r3, r2
  405158:	b530      	push	{r4, r5, lr}
  40515a:	d10c      	bne.n	405176 <__mcmp+0x24>
  40515c:	0092      	lsls	r2, r2, #2
  40515e:	3014      	adds	r0, #20
  405160:	3114      	adds	r1, #20
  405162:	1884      	adds	r4, r0, r2
  405164:	4411      	add	r1, r2
  405166:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40516a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40516e:	4295      	cmp	r5, r2
  405170:	d003      	beq.n	40517a <__mcmp+0x28>
  405172:	d305      	bcc.n	405180 <__mcmp+0x2e>
  405174:	2301      	movs	r3, #1
  405176:	4618      	mov	r0, r3
  405178:	bd30      	pop	{r4, r5, pc}
  40517a:	42a0      	cmp	r0, r4
  40517c:	d3f3      	bcc.n	405166 <__mcmp+0x14>
  40517e:	e7fa      	b.n	405176 <__mcmp+0x24>
  405180:	f04f 33ff 	mov.w	r3, #4294967295
  405184:	e7f7      	b.n	405176 <__mcmp+0x24>

00405186 <__mdiff>:
  405186:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40518a:	460d      	mov	r5, r1
  40518c:	4607      	mov	r7, r0
  40518e:	4611      	mov	r1, r2
  405190:	4628      	mov	r0, r5
  405192:	4614      	mov	r4, r2
  405194:	f7ff ffdd 	bl	405152 <__mcmp>
  405198:	1e06      	subs	r6, r0, #0
  40519a:	d108      	bne.n	4051ae <__mdiff+0x28>
  40519c:	4631      	mov	r1, r6
  40519e:	4638      	mov	r0, r7
  4051a0:	f7ff fdce 	bl	404d40 <_Balloc>
  4051a4:	2301      	movs	r3, #1
  4051a6:	6103      	str	r3, [r0, #16]
  4051a8:	6146      	str	r6, [r0, #20]
  4051aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4051ae:	bfa4      	itt	ge
  4051b0:	4623      	movge	r3, r4
  4051b2:	462c      	movge	r4, r5
  4051b4:	4638      	mov	r0, r7
  4051b6:	6861      	ldr	r1, [r4, #4]
  4051b8:	bfa6      	itte	ge
  4051ba:	461d      	movge	r5, r3
  4051bc:	2600      	movge	r6, #0
  4051be:	2601      	movlt	r6, #1
  4051c0:	f7ff fdbe 	bl	404d40 <_Balloc>
  4051c4:	692b      	ldr	r3, [r5, #16]
  4051c6:	60c6      	str	r6, [r0, #12]
  4051c8:	6926      	ldr	r6, [r4, #16]
  4051ca:	f105 0914 	add.w	r9, r5, #20
  4051ce:	f104 0214 	add.w	r2, r4, #20
  4051d2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  4051d6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  4051da:	f100 0514 	add.w	r5, r0, #20
  4051de:	f04f 0c00 	mov.w	ip, #0
  4051e2:	f852 ab04 	ldr.w	sl, [r2], #4
  4051e6:	f859 4b04 	ldr.w	r4, [r9], #4
  4051ea:	fa1c f18a 	uxtah	r1, ip, sl
  4051ee:	b2a3      	uxth	r3, r4
  4051f0:	1ac9      	subs	r1, r1, r3
  4051f2:	0c23      	lsrs	r3, r4, #16
  4051f4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  4051f8:	eb03 4321 	add.w	r3, r3, r1, asr #16
  4051fc:	b289      	uxth	r1, r1
  4051fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
  405202:	45c8      	cmp	r8, r9
  405204:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  405208:	4696      	mov	lr, r2
  40520a:	f845 3b04 	str.w	r3, [r5], #4
  40520e:	d8e8      	bhi.n	4051e2 <__mdiff+0x5c>
  405210:	45be      	cmp	lr, r7
  405212:	d305      	bcc.n	405220 <__mdiff+0x9a>
  405214:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405218:	b18b      	cbz	r3, 40523e <__mdiff+0xb8>
  40521a:	6106      	str	r6, [r0, #16]
  40521c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405220:	f85e 1b04 	ldr.w	r1, [lr], #4
  405224:	fa1c f381 	uxtah	r3, ip, r1
  405228:	141a      	asrs	r2, r3, #16
  40522a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  40522e:	b29b      	uxth	r3, r3
  405230:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405234:	ea4f 4c22 	mov.w	ip, r2, asr #16
  405238:	f845 3b04 	str.w	r3, [r5], #4
  40523c:	e7e8      	b.n	405210 <__mdiff+0x8a>
  40523e:	3e01      	subs	r6, #1
  405240:	e7e8      	b.n	405214 <__mdiff+0x8e>

00405242 <__d2b>:
  405242:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  405246:	2101      	movs	r1, #1
  405248:	461c      	mov	r4, r3
  40524a:	4690      	mov	r8, r2
  40524c:	9e08      	ldr	r6, [sp, #32]
  40524e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405250:	f7ff fd76 	bl	404d40 <_Balloc>
  405254:	f3c4 0213 	ubfx	r2, r4, #0, #20
  405258:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40525c:	4607      	mov	r7, r0
  40525e:	bb34      	cbnz	r4, 4052ae <__d2b+0x6c>
  405260:	9201      	str	r2, [sp, #4]
  405262:	f1b8 0f00 	cmp.w	r8, #0
  405266:	d027      	beq.n	4052b8 <__d2b+0x76>
  405268:	a802      	add	r0, sp, #8
  40526a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40526e:	f7ff fe0c 	bl	404e8a <__lo0bits>
  405272:	9900      	ldr	r1, [sp, #0]
  405274:	b1f0      	cbz	r0, 4052b4 <__d2b+0x72>
  405276:	9a01      	ldr	r2, [sp, #4]
  405278:	f1c0 0320 	rsb	r3, r0, #32
  40527c:	fa02 f303 	lsl.w	r3, r2, r3
  405280:	430b      	orrs	r3, r1
  405282:	40c2      	lsrs	r2, r0
  405284:	617b      	str	r3, [r7, #20]
  405286:	9201      	str	r2, [sp, #4]
  405288:	9b01      	ldr	r3, [sp, #4]
  40528a:	61bb      	str	r3, [r7, #24]
  40528c:	2b00      	cmp	r3, #0
  40528e:	bf14      	ite	ne
  405290:	2102      	movne	r1, #2
  405292:	2101      	moveq	r1, #1
  405294:	6139      	str	r1, [r7, #16]
  405296:	b1c4      	cbz	r4, 4052ca <__d2b+0x88>
  405298:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40529c:	4404      	add	r4, r0
  40529e:	6034      	str	r4, [r6, #0]
  4052a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4052a4:	6028      	str	r0, [r5, #0]
  4052a6:	4638      	mov	r0, r7
  4052a8:	b002      	add	sp, #8
  4052aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4052ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4052b2:	e7d5      	b.n	405260 <__d2b+0x1e>
  4052b4:	6179      	str	r1, [r7, #20]
  4052b6:	e7e7      	b.n	405288 <__d2b+0x46>
  4052b8:	a801      	add	r0, sp, #4
  4052ba:	f7ff fde6 	bl	404e8a <__lo0bits>
  4052be:	9b01      	ldr	r3, [sp, #4]
  4052c0:	617b      	str	r3, [r7, #20]
  4052c2:	2101      	movs	r1, #1
  4052c4:	6139      	str	r1, [r7, #16]
  4052c6:	3020      	adds	r0, #32
  4052c8:	e7e5      	b.n	405296 <__d2b+0x54>
  4052ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  4052ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4052d2:	6030      	str	r0, [r6, #0]
  4052d4:	6918      	ldr	r0, [r3, #16]
  4052d6:	f7ff fdb9 	bl	404e4c <__hi0bits>
  4052da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4052de:	e7e1      	b.n	4052a4 <__d2b+0x62>

004052e0 <_calloc_r>:
  4052e0:	b538      	push	{r3, r4, r5, lr}
  4052e2:	fb02 f401 	mul.w	r4, r2, r1
  4052e6:	4621      	mov	r1, r4
  4052e8:	f000 f856 	bl	405398 <_malloc_r>
  4052ec:	4605      	mov	r5, r0
  4052ee:	b118      	cbz	r0, 4052f8 <_calloc_r+0x18>
  4052f0:	4622      	mov	r2, r4
  4052f2:	2100      	movs	r1, #0
  4052f4:	f7fd ff3f 	bl	403176 <memset>
  4052f8:	4628      	mov	r0, r5
  4052fa:	bd38      	pop	{r3, r4, r5, pc}

004052fc <_free_r>:
  4052fc:	b538      	push	{r3, r4, r5, lr}
  4052fe:	4605      	mov	r5, r0
  405300:	2900      	cmp	r1, #0
  405302:	d045      	beq.n	405390 <_free_r+0x94>
  405304:	f851 3c04 	ldr.w	r3, [r1, #-4]
  405308:	1f0c      	subs	r4, r1, #4
  40530a:	2b00      	cmp	r3, #0
  40530c:	bfb8      	it	lt
  40530e:	18e4      	addlt	r4, r4, r3
  405310:	f000 fb5a 	bl	4059c8 <__malloc_lock>
  405314:	4a1f      	ldr	r2, [pc, #124]	; (405394 <_free_r+0x98>)
  405316:	6813      	ldr	r3, [r2, #0]
  405318:	4610      	mov	r0, r2
  40531a:	b933      	cbnz	r3, 40532a <_free_r+0x2e>
  40531c:	6063      	str	r3, [r4, #4]
  40531e:	6014      	str	r4, [r2, #0]
  405320:	4628      	mov	r0, r5
  405322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405326:	f000 bb50 	b.w	4059ca <__malloc_unlock>
  40532a:	42a3      	cmp	r3, r4
  40532c:	d90c      	bls.n	405348 <_free_r+0x4c>
  40532e:	6821      	ldr	r1, [r4, #0]
  405330:	1862      	adds	r2, r4, r1
  405332:	4293      	cmp	r3, r2
  405334:	bf04      	itt	eq
  405336:	681a      	ldreq	r2, [r3, #0]
  405338:	685b      	ldreq	r3, [r3, #4]
  40533a:	6063      	str	r3, [r4, #4]
  40533c:	bf04      	itt	eq
  40533e:	1852      	addeq	r2, r2, r1
  405340:	6022      	streq	r2, [r4, #0]
  405342:	6004      	str	r4, [r0, #0]
  405344:	e7ec      	b.n	405320 <_free_r+0x24>
  405346:	4613      	mov	r3, r2
  405348:	685a      	ldr	r2, [r3, #4]
  40534a:	b10a      	cbz	r2, 405350 <_free_r+0x54>
  40534c:	42a2      	cmp	r2, r4
  40534e:	d9fa      	bls.n	405346 <_free_r+0x4a>
  405350:	6819      	ldr	r1, [r3, #0]
  405352:	1858      	adds	r0, r3, r1
  405354:	42a0      	cmp	r0, r4
  405356:	d10b      	bne.n	405370 <_free_r+0x74>
  405358:	6820      	ldr	r0, [r4, #0]
  40535a:	4401      	add	r1, r0
  40535c:	1858      	adds	r0, r3, r1
  40535e:	4282      	cmp	r2, r0
  405360:	6019      	str	r1, [r3, #0]
  405362:	d1dd      	bne.n	405320 <_free_r+0x24>
  405364:	6810      	ldr	r0, [r2, #0]
  405366:	6852      	ldr	r2, [r2, #4]
  405368:	605a      	str	r2, [r3, #4]
  40536a:	4401      	add	r1, r0
  40536c:	6019      	str	r1, [r3, #0]
  40536e:	e7d7      	b.n	405320 <_free_r+0x24>
  405370:	d902      	bls.n	405378 <_free_r+0x7c>
  405372:	230c      	movs	r3, #12
  405374:	602b      	str	r3, [r5, #0]
  405376:	e7d3      	b.n	405320 <_free_r+0x24>
  405378:	6820      	ldr	r0, [r4, #0]
  40537a:	1821      	adds	r1, r4, r0
  40537c:	428a      	cmp	r2, r1
  40537e:	bf04      	itt	eq
  405380:	6811      	ldreq	r1, [r2, #0]
  405382:	6852      	ldreq	r2, [r2, #4]
  405384:	6062      	str	r2, [r4, #4]
  405386:	bf04      	itt	eq
  405388:	1809      	addeq	r1, r1, r0
  40538a:	6021      	streq	r1, [r4, #0]
  40538c:	605c      	str	r4, [r3, #4]
  40538e:	e7c7      	b.n	405320 <_free_r+0x24>
  405390:	bd38      	pop	{r3, r4, r5, pc}
  405392:	bf00      	nop
  405394:	204004c0 	.word	0x204004c0

00405398 <_malloc_r>:
  405398:	b570      	push	{r4, r5, r6, lr}
  40539a:	1ccd      	adds	r5, r1, #3
  40539c:	f025 0503 	bic.w	r5, r5, #3
  4053a0:	3508      	adds	r5, #8
  4053a2:	2d0c      	cmp	r5, #12
  4053a4:	bf38      	it	cc
  4053a6:	250c      	movcc	r5, #12
  4053a8:	2d00      	cmp	r5, #0
  4053aa:	4606      	mov	r6, r0
  4053ac:	db01      	blt.n	4053b2 <_malloc_r+0x1a>
  4053ae:	42a9      	cmp	r1, r5
  4053b0:	d903      	bls.n	4053ba <_malloc_r+0x22>
  4053b2:	230c      	movs	r3, #12
  4053b4:	6033      	str	r3, [r6, #0]
  4053b6:	2000      	movs	r0, #0
  4053b8:	bd70      	pop	{r4, r5, r6, pc}
  4053ba:	f000 fb05 	bl	4059c8 <__malloc_lock>
  4053be:	4a23      	ldr	r2, [pc, #140]	; (40544c <_malloc_r+0xb4>)
  4053c0:	6814      	ldr	r4, [r2, #0]
  4053c2:	4621      	mov	r1, r4
  4053c4:	b991      	cbnz	r1, 4053ec <_malloc_r+0x54>
  4053c6:	4c22      	ldr	r4, [pc, #136]	; (405450 <_malloc_r+0xb8>)
  4053c8:	6823      	ldr	r3, [r4, #0]
  4053ca:	b91b      	cbnz	r3, 4053d4 <_malloc_r+0x3c>
  4053cc:	4630      	mov	r0, r6
  4053ce:	f000 f97f 	bl	4056d0 <_sbrk_r>
  4053d2:	6020      	str	r0, [r4, #0]
  4053d4:	4629      	mov	r1, r5
  4053d6:	4630      	mov	r0, r6
  4053d8:	f000 f97a 	bl	4056d0 <_sbrk_r>
  4053dc:	1c43      	adds	r3, r0, #1
  4053de:	d126      	bne.n	40542e <_malloc_r+0x96>
  4053e0:	230c      	movs	r3, #12
  4053e2:	6033      	str	r3, [r6, #0]
  4053e4:	4630      	mov	r0, r6
  4053e6:	f000 faf0 	bl	4059ca <__malloc_unlock>
  4053ea:	e7e4      	b.n	4053b6 <_malloc_r+0x1e>
  4053ec:	680b      	ldr	r3, [r1, #0]
  4053ee:	1b5b      	subs	r3, r3, r5
  4053f0:	d41a      	bmi.n	405428 <_malloc_r+0x90>
  4053f2:	2b0b      	cmp	r3, #11
  4053f4:	d90f      	bls.n	405416 <_malloc_r+0x7e>
  4053f6:	600b      	str	r3, [r1, #0]
  4053f8:	50cd      	str	r5, [r1, r3]
  4053fa:	18cc      	adds	r4, r1, r3
  4053fc:	4630      	mov	r0, r6
  4053fe:	f000 fae4 	bl	4059ca <__malloc_unlock>
  405402:	f104 000b 	add.w	r0, r4, #11
  405406:	1d23      	adds	r3, r4, #4
  405408:	f020 0007 	bic.w	r0, r0, #7
  40540c:	1ac3      	subs	r3, r0, r3
  40540e:	d01b      	beq.n	405448 <_malloc_r+0xb0>
  405410:	425a      	negs	r2, r3
  405412:	50e2      	str	r2, [r4, r3]
  405414:	bd70      	pop	{r4, r5, r6, pc}
  405416:	428c      	cmp	r4, r1
  405418:	bf0d      	iteet	eq
  40541a:	6863      	ldreq	r3, [r4, #4]
  40541c:	684b      	ldrne	r3, [r1, #4]
  40541e:	6063      	strne	r3, [r4, #4]
  405420:	6013      	streq	r3, [r2, #0]
  405422:	bf18      	it	ne
  405424:	460c      	movne	r4, r1
  405426:	e7e9      	b.n	4053fc <_malloc_r+0x64>
  405428:	460c      	mov	r4, r1
  40542a:	6849      	ldr	r1, [r1, #4]
  40542c:	e7ca      	b.n	4053c4 <_malloc_r+0x2c>
  40542e:	1cc4      	adds	r4, r0, #3
  405430:	f024 0403 	bic.w	r4, r4, #3
  405434:	42a0      	cmp	r0, r4
  405436:	d005      	beq.n	405444 <_malloc_r+0xac>
  405438:	1a21      	subs	r1, r4, r0
  40543a:	4630      	mov	r0, r6
  40543c:	f000 f948 	bl	4056d0 <_sbrk_r>
  405440:	3001      	adds	r0, #1
  405442:	d0cd      	beq.n	4053e0 <_malloc_r+0x48>
  405444:	6025      	str	r5, [r4, #0]
  405446:	e7d9      	b.n	4053fc <_malloc_r+0x64>
  405448:	bd70      	pop	{r4, r5, r6, pc}
  40544a:	bf00      	nop
  40544c:	204004c0 	.word	0x204004c0
  405450:	204004c4 	.word	0x204004c4

00405454 <__sfputc_r>:
  405454:	6893      	ldr	r3, [r2, #8]
  405456:	3b01      	subs	r3, #1
  405458:	2b00      	cmp	r3, #0
  40545a:	b410      	push	{r4}
  40545c:	6093      	str	r3, [r2, #8]
  40545e:	da08      	bge.n	405472 <__sfputc_r+0x1e>
  405460:	6994      	ldr	r4, [r2, #24]
  405462:	42a3      	cmp	r3, r4
  405464:	db02      	blt.n	40546c <__sfputc_r+0x18>
  405466:	b2cb      	uxtb	r3, r1
  405468:	2b0a      	cmp	r3, #10
  40546a:	d102      	bne.n	405472 <__sfputc_r+0x1e>
  40546c:	bc10      	pop	{r4}
  40546e:	f000 b983 	b.w	405778 <__swbuf_r>
  405472:	6813      	ldr	r3, [r2, #0]
  405474:	1c58      	adds	r0, r3, #1
  405476:	6010      	str	r0, [r2, #0]
  405478:	7019      	strb	r1, [r3, #0]
  40547a:	b2c8      	uxtb	r0, r1
  40547c:	bc10      	pop	{r4}
  40547e:	4770      	bx	lr

00405480 <__sfputs_r>:
  405480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405482:	4606      	mov	r6, r0
  405484:	460f      	mov	r7, r1
  405486:	4614      	mov	r4, r2
  405488:	18d5      	adds	r5, r2, r3
  40548a:	42ac      	cmp	r4, r5
  40548c:	d101      	bne.n	405492 <__sfputs_r+0x12>
  40548e:	2000      	movs	r0, #0
  405490:	e007      	b.n	4054a2 <__sfputs_r+0x22>
  405492:	463a      	mov	r2, r7
  405494:	f814 1b01 	ldrb.w	r1, [r4], #1
  405498:	4630      	mov	r0, r6
  40549a:	f7ff ffdb 	bl	405454 <__sfputc_r>
  40549e:	1c43      	adds	r3, r0, #1
  4054a0:	d1f3      	bne.n	40548a <__sfputs_r+0xa>
  4054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004054a4 <_vfiprintf_r>:
  4054a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054a8:	b09d      	sub	sp, #116	; 0x74
  4054aa:	460c      	mov	r4, r1
  4054ac:	4617      	mov	r7, r2
  4054ae:	9303      	str	r3, [sp, #12]
  4054b0:	4606      	mov	r6, r0
  4054b2:	b118      	cbz	r0, 4054bc <_vfiprintf_r+0x18>
  4054b4:	6983      	ldr	r3, [r0, #24]
  4054b6:	b90b      	cbnz	r3, 4054bc <_vfiprintf_r+0x18>
  4054b8:	f7ff faea 	bl	404a90 <__sinit>
  4054bc:	4b7c      	ldr	r3, [pc, #496]	; (4056b0 <_vfiprintf_r+0x20c>)
  4054be:	429c      	cmp	r4, r3
  4054c0:	d157      	bne.n	405572 <_vfiprintf_r+0xce>
  4054c2:	6874      	ldr	r4, [r6, #4]
  4054c4:	89a3      	ldrh	r3, [r4, #12]
  4054c6:	0718      	lsls	r0, r3, #28
  4054c8:	d55d      	bpl.n	405586 <_vfiprintf_r+0xe2>
  4054ca:	6923      	ldr	r3, [r4, #16]
  4054cc:	2b00      	cmp	r3, #0
  4054ce:	d05a      	beq.n	405586 <_vfiprintf_r+0xe2>
  4054d0:	2300      	movs	r3, #0
  4054d2:	9309      	str	r3, [sp, #36]	; 0x24
  4054d4:	2320      	movs	r3, #32
  4054d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  4054da:	2330      	movs	r3, #48	; 0x30
  4054dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4054e0:	f04f 0b01 	mov.w	fp, #1
  4054e4:	46b8      	mov	r8, r7
  4054e6:	4645      	mov	r5, r8
  4054e8:	f815 3b01 	ldrb.w	r3, [r5], #1
  4054ec:	2b00      	cmp	r3, #0
  4054ee:	d155      	bne.n	40559c <_vfiprintf_r+0xf8>
  4054f0:	ebb8 0a07 	subs.w	sl, r8, r7
  4054f4:	d00b      	beq.n	40550e <_vfiprintf_r+0x6a>
  4054f6:	4653      	mov	r3, sl
  4054f8:	463a      	mov	r2, r7
  4054fa:	4621      	mov	r1, r4
  4054fc:	4630      	mov	r0, r6
  4054fe:	f7ff ffbf 	bl	405480 <__sfputs_r>
  405502:	3001      	adds	r0, #1
  405504:	f000 80c4 	beq.w	405690 <_vfiprintf_r+0x1ec>
  405508:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40550a:	4453      	add	r3, sl
  40550c:	9309      	str	r3, [sp, #36]	; 0x24
  40550e:	f898 3000 	ldrb.w	r3, [r8]
  405512:	2b00      	cmp	r3, #0
  405514:	f000 80bc 	beq.w	405690 <_vfiprintf_r+0x1ec>
  405518:	2300      	movs	r3, #0
  40551a:	f04f 32ff 	mov.w	r2, #4294967295
  40551e:	9304      	str	r3, [sp, #16]
  405520:	9307      	str	r3, [sp, #28]
  405522:	9205      	str	r2, [sp, #20]
  405524:	9306      	str	r3, [sp, #24]
  405526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40552a:	931a      	str	r3, [sp, #104]	; 0x68
  40552c:	2205      	movs	r2, #5
  40552e:	7829      	ldrb	r1, [r5, #0]
  405530:	4860      	ldr	r0, [pc, #384]	; (4056b4 <_vfiprintf_r+0x210>)
  405532:	f7ff fbb5 	bl	404ca0 <memchr>
  405536:	f105 0801 	add.w	r8, r5, #1
  40553a:	9b04      	ldr	r3, [sp, #16]
  40553c:	2800      	cmp	r0, #0
  40553e:	d131      	bne.n	4055a4 <_vfiprintf_r+0x100>
  405540:	06d9      	lsls	r1, r3, #27
  405542:	bf44      	itt	mi
  405544:	2220      	movmi	r2, #32
  405546:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40554a:	071a      	lsls	r2, r3, #28
  40554c:	bf44      	itt	mi
  40554e:	222b      	movmi	r2, #43	; 0x2b
  405550:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  405554:	782a      	ldrb	r2, [r5, #0]
  405556:	2a2a      	cmp	r2, #42	; 0x2a
  405558:	d02c      	beq.n	4055b4 <_vfiprintf_r+0x110>
  40555a:	9a07      	ldr	r2, [sp, #28]
  40555c:	2100      	movs	r1, #0
  40555e:	200a      	movs	r0, #10
  405560:	46a8      	mov	r8, r5
  405562:	3501      	adds	r5, #1
  405564:	f898 3000 	ldrb.w	r3, [r8]
  405568:	3b30      	subs	r3, #48	; 0x30
  40556a:	2b09      	cmp	r3, #9
  40556c:	d96d      	bls.n	40564a <_vfiprintf_r+0x1a6>
  40556e:	b371      	cbz	r1, 4055ce <_vfiprintf_r+0x12a>
  405570:	e026      	b.n	4055c0 <_vfiprintf_r+0x11c>
  405572:	4b51      	ldr	r3, [pc, #324]	; (4056b8 <_vfiprintf_r+0x214>)
  405574:	429c      	cmp	r4, r3
  405576:	d101      	bne.n	40557c <_vfiprintf_r+0xd8>
  405578:	68b4      	ldr	r4, [r6, #8]
  40557a:	e7a3      	b.n	4054c4 <_vfiprintf_r+0x20>
  40557c:	4b4f      	ldr	r3, [pc, #316]	; (4056bc <_vfiprintf_r+0x218>)
  40557e:	429c      	cmp	r4, r3
  405580:	bf08      	it	eq
  405582:	68f4      	ldreq	r4, [r6, #12]
  405584:	e79e      	b.n	4054c4 <_vfiprintf_r+0x20>
  405586:	4621      	mov	r1, r4
  405588:	4630      	mov	r0, r6
  40558a:	f000 f959 	bl	405840 <__swsetup_r>
  40558e:	2800      	cmp	r0, #0
  405590:	d09e      	beq.n	4054d0 <_vfiprintf_r+0x2c>
  405592:	f04f 30ff 	mov.w	r0, #4294967295
  405596:	b01d      	add	sp, #116	; 0x74
  405598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40559c:	2b25      	cmp	r3, #37	; 0x25
  40559e:	d0a7      	beq.n	4054f0 <_vfiprintf_r+0x4c>
  4055a0:	46a8      	mov	r8, r5
  4055a2:	e7a0      	b.n	4054e6 <_vfiprintf_r+0x42>
  4055a4:	4a43      	ldr	r2, [pc, #268]	; (4056b4 <_vfiprintf_r+0x210>)
  4055a6:	1a80      	subs	r0, r0, r2
  4055a8:	fa0b f000 	lsl.w	r0, fp, r0
  4055ac:	4318      	orrs	r0, r3
  4055ae:	9004      	str	r0, [sp, #16]
  4055b0:	4645      	mov	r5, r8
  4055b2:	e7bb      	b.n	40552c <_vfiprintf_r+0x88>
  4055b4:	9a03      	ldr	r2, [sp, #12]
  4055b6:	1d11      	adds	r1, r2, #4
  4055b8:	6812      	ldr	r2, [r2, #0]
  4055ba:	9103      	str	r1, [sp, #12]
  4055bc:	2a00      	cmp	r2, #0
  4055be:	db01      	blt.n	4055c4 <_vfiprintf_r+0x120>
  4055c0:	9207      	str	r2, [sp, #28]
  4055c2:	e004      	b.n	4055ce <_vfiprintf_r+0x12a>
  4055c4:	4252      	negs	r2, r2
  4055c6:	f043 0302 	orr.w	r3, r3, #2
  4055ca:	9207      	str	r2, [sp, #28]
  4055cc:	9304      	str	r3, [sp, #16]
  4055ce:	f898 3000 	ldrb.w	r3, [r8]
  4055d2:	2b2e      	cmp	r3, #46	; 0x2e
  4055d4:	d110      	bne.n	4055f8 <_vfiprintf_r+0x154>
  4055d6:	f898 3001 	ldrb.w	r3, [r8, #1]
  4055da:	2b2a      	cmp	r3, #42	; 0x2a
  4055dc:	f108 0101 	add.w	r1, r8, #1
  4055e0:	d137      	bne.n	405652 <_vfiprintf_r+0x1ae>
  4055e2:	9b03      	ldr	r3, [sp, #12]
  4055e4:	1d1a      	adds	r2, r3, #4
  4055e6:	681b      	ldr	r3, [r3, #0]
  4055e8:	9203      	str	r2, [sp, #12]
  4055ea:	2b00      	cmp	r3, #0
  4055ec:	bfb8      	it	lt
  4055ee:	f04f 33ff 	movlt.w	r3, #4294967295
  4055f2:	f108 0802 	add.w	r8, r8, #2
  4055f6:	9305      	str	r3, [sp, #20]
  4055f8:	4d31      	ldr	r5, [pc, #196]	; (4056c0 <_vfiprintf_r+0x21c>)
  4055fa:	f898 1000 	ldrb.w	r1, [r8]
  4055fe:	2203      	movs	r2, #3
  405600:	4628      	mov	r0, r5
  405602:	f7ff fb4d 	bl	404ca0 <memchr>
  405606:	b140      	cbz	r0, 40561a <_vfiprintf_r+0x176>
  405608:	2340      	movs	r3, #64	; 0x40
  40560a:	1b40      	subs	r0, r0, r5
  40560c:	fa03 f000 	lsl.w	r0, r3, r0
  405610:	9b04      	ldr	r3, [sp, #16]
  405612:	4303      	orrs	r3, r0
  405614:	9304      	str	r3, [sp, #16]
  405616:	f108 0801 	add.w	r8, r8, #1
  40561a:	f898 1000 	ldrb.w	r1, [r8]
  40561e:	4829      	ldr	r0, [pc, #164]	; (4056c4 <_vfiprintf_r+0x220>)
  405620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  405624:	2206      	movs	r2, #6
  405626:	f108 0701 	add.w	r7, r8, #1
  40562a:	f7ff fb39 	bl	404ca0 <memchr>
  40562e:	2800      	cmp	r0, #0
  405630:	d034      	beq.n	40569c <_vfiprintf_r+0x1f8>
  405632:	4b25      	ldr	r3, [pc, #148]	; (4056c8 <_vfiprintf_r+0x224>)
  405634:	bb03      	cbnz	r3, 405678 <_vfiprintf_r+0x1d4>
  405636:	9b03      	ldr	r3, [sp, #12]
  405638:	3307      	adds	r3, #7
  40563a:	f023 0307 	bic.w	r3, r3, #7
  40563e:	3308      	adds	r3, #8
  405640:	9303      	str	r3, [sp, #12]
  405642:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405644:	444b      	add	r3, r9
  405646:	9309      	str	r3, [sp, #36]	; 0x24
  405648:	e74c      	b.n	4054e4 <_vfiprintf_r+0x40>
  40564a:	fb00 3202 	mla	r2, r0, r2, r3
  40564e:	2101      	movs	r1, #1
  405650:	e786      	b.n	405560 <_vfiprintf_r+0xbc>
  405652:	2300      	movs	r3, #0
  405654:	9305      	str	r3, [sp, #20]
  405656:	4618      	mov	r0, r3
  405658:	250a      	movs	r5, #10
  40565a:	4688      	mov	r8, r1
  40565c:	3101      	adds	r1, #1
  40565e:	f898 2000 	ldrb.w	r2, [r8]
  405662:	3a30      	subs	r2, #48	; 0x30
  405664:	2a09      	cmp	r2, #9
  405666:	d903      	bls.n	405670 <_vfiprintf_r+0x1cc>
  405668:	2b00      	cmp	r3, #0
  40566a:	d0c5      	beq.n	4055f8 <_vfiprintf_r+0x154>
  40566c:	9005      	str	r0, [sp, #20]
  40566e:	e7c3      	b.n	4055f8 <_vfiprintf_r+0x154>
  405670:	fb05 2000 	mla	r0, r5, r0, r2
  405674:	2301      	movs	r3, #1
  405676:	e7f0      	b.n	40565a <_vfiprintf_r+0x1b6>
  405678:	ab03      	add	r3, sp, #12
  40567a:	9300      	str	r3, [sp, #0]
  40567c:	4622      	mov	r2, r4
  40567e:	4b13      	ldr	r3, [pc, #76]	; (4056cc <_vfiprintf_r+0x228>)
  405680:	a904      	add	r1, sp, #16
  405682:	4630      	mov	r0, r6
  405684:	f7fd fe10 	bl	4032a8 <_printf_float>
  405688:	f1b0 3fff 	cmp.w	r0, #4294967295
  40568c:	4681      	mov	r9, r0
  40568e:	d1d8      	bne.n	405642 <_vfiprintf_r+0x19e>
  405690:	89a3      	ldrh	r3, [r4, #12]
  405692:	065b      	lsls	r3, r3, #25
  405694:	f53f af7d 	bmi.w	405592 <_vfiprintf_r+0xee>
  405698:	9809      	ldr	r0, [sp, #36]	; 0x24
  40569a:	e77c      	b.n	405596 <_vfiprintf_r+0xf2>
  40569c:	ab03      	add	r3, sp, #12
  40569e:	9300      	str	r3, [sp, #0]
  4056a0:	4622      	mov	r2, r4
  4056a2:	4b0a      	ldr	r3, [pc, #40]	; (4056cc <_vfiprintf_r+0x228>)
  4056a4:	a904      	add	r1, sp, #16
  4056a6:	4630      	mov	r0, r6
  4056a8:	f7fe f8ac 	bl	403804 <_printf_i>
  4056ac:	e7ec      	b.n	405688 <_vfiprintf_r+0x1e4>
  4056ae:	bf00      	nop
  4056b0:	00405e70 	.word	0x00405e70
  4056b4:	00405fac 	.word	0x00405fac
  4056b8:	00405e90 	.word	0x00405e90
  4056bc:	00405e50 	.word	0x00405e50
  4056c0:	00405fb2 	.word	0x00405fb2
  4056c4:	00405fb6 	.word	0x00405fb6
  4056c8:	004032a9 	.word	0x004032a9
  4056cc:	00405481 	.word	0x00405481

004056d0 <_sbrk_r>:
  4056d0:	b538      	push	{r3, r4, r5, lr}
  4056d2:	4c06      	ldr	r4, [pc, #24]	; (4056ec <_sbrk_r+0x1c>)
  4056d4:	2300      	movs	r3, #0
  4056d6:	4605      	mov	r5, r0
  4056d8:	4608      	mov	r0, r1
  4056da:	6023      	str	r3, [r4, #0]
  4056dc:	f7fb ffd0 	bl	401680 <_sbrk>
  4056e0:	1c43      	adds	r3, r0, #1
  4056e2:	d102      	bne.n	4056ea <_sbrk_r+0x1a>
  4056e4:	6823      	ldr	r3, [r4, #0]
  4056e6:	b103      	cbz	r3, 4056ea <_sbrk_r+0x1a>
  4056e8:	602b      	str	r3, [r5, #0]
  4056ea:	bd38      	pop	{r3, r4, r5, pc}
  4056ec:	204006f0 	.word	0x204006f0

004056f0 <__sread>:
  4056f0:	b510      	push	{r4, lr}
  4056f2:	460c      	mov	r4, r1
  4056f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4056f8:	f000 f968 	bl	4059cc <_read_r>
  4056fc:	2800      	cmp	r0, #0
  4056fe:	bfab      	itete	ge
  405700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  405702:	89a3      	ldrhlt	r3, [r4, #12]
  405704:	181b      	addge	r3, r3, r0
  405706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  40570a:	bfac      	ite	ge
  40570c:	6563      	strge	r3, [r4, #84]	; 0x54
  40570e:	81a3      	strhlt	r3, [r4, #12]
  405710:	bd10      	pop	{r4, pc}

00405712 <__swrite>:
  405712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405716:	461f      	mov	r7, r3
  405718:	898b      	ldrh	r3, [r1, #12]
  40571a:	05db      	lsls	r3, r3, #23
  40571c:	4605      	mov	r5, r0
  40571e:	460c      	mov	r4, r1
  405720:	4616      	mov	r6, r2
  405722:	d505      	bpl.n	405730 <__swrite+0x1e>
  405724:	2302      	movs	r3, #2
  405726:	2200      	movs	r2, #0
  405728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40572c:	f000 f928 	bl	405980 <_lseek_r>
  405730:	89a3      	ldrh	r3, [r4, #12]
  405732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40573a:	81a3      	strh	r3, [r4, #12]
  40573c:	4632      	mov	r2, r6
  40573e:	463b      	mov	r3, r7
  405740:	4628      	mov	r0, r5
  405742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405746:	f000 b869 	b.w	40581c <_write_r>

0040574a <__sseek>:
  40574a:	b510      	push	{r4, lr}
  40574c:	460c      	mov	r4, r1
  40574e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405752:	f000 f915 	bl	405980 <_lseek_r>
  405756:	1c43      	adds	r3, r0, #1
  405758:	89a3      	ldrh	r3, [r4, #12]
  40575a:	bf15      	itete	ne
  40575c:	6560      	strne	r0, [r4, #84]	; 0x54
  40575e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405766:	81a3      	strheq	r3, [r4, #12]
  405768:	bf18      	it	ne
  40576a:	81a3      	strhne	r3, [r4, #12]
  40576c:	bd10      	pop	{r4, pc}

0040576e <__sclose>:
  40576e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405772:	f000 b8d3 	b.w	40591c <_close_r>
	...

00405778 <__swbuf_r>:
  405778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40577a:	460e      	mov	r6, r1
  40577c:	4614      	mov	r4, r2
  40577e:	4605      	mov	r5, r0
  405780:	b118      	cbz	r0, 40578a <__swbuf_r+0x12>
  405782:	6983      	ldr	r3, [r0, #24]
  405784:	b90b      	cbnz	r3, 40578a <__swbuf_r+0x12>
  405786:	f7ff f983 	bl	404a90 <__sinit>
  40578a:	4b21      	ldr	r3, [pc, #132]	; (405810 <__swbuf_r+0x98>)
  40578c:	429c      	cmp	r4, r3
  40578e:	d12a      	bne.n	4057e6 <__swbuf_r+0x6e>
  405790:	686c      	ldr	r4, [r5, #4]
  405792:	69a3      	ldr	r3, [r4, #24]
  405794:	60a3      	str	r3, [r4, #8]
  405796:	89a3      	ldrh	r3, [r4, #12]
  405798:	071a      	lsls	r2, r3, #28
  40579a:	d52e      	bpl.n	4057fa <__swbuf_r+0x82>
  40579c:	6923      	ldr	r3, [r4, #16]
  40579e:	b363      	cbz	r3, 4057fa <__swbuf_r+0x82>
  4057a0:	6923      	ldr	r3, [r4, #16]
  4057a2:	6820      	ldr	r0, [r4, #0]
  4057a4:	1ac0      	subs	r0, r0, r3
  4057a6:	6963      	ldr	r3, [r4, #20]
  4057a8:	b2f6      	uxtb	r6, r6
  4057aa:	4298      	cmp	r0, r3
  4057ac:	4637      	mov	r7, r6
  4057ae:	db04      	blt.n	4057ba <__swbuf_r+0x42>
  4057b0:	4621      	mov	r1, r4
  4057b2:	4628      	mov	r0, r5
  4057b4:	f7ff f902 	bl	4049bc <_fflush_r>
  4057b8:	bb28      	cbnz	r0, 405806 <__swbuf_r+0x8e>
  4057ba:	68a3      	ldr	r3, [r4, #8]
  4057bc:	3b01      	subs	r3, #1
  4057be:	60a3      	str	r3, [r4, #8]
  4057c0:	6823      	ldr	r3, [r4, #0]
  4057c2:	1c5a      	adds	r2, r3, #1
  4057c4:	6022      	str	r2, [r4, #0]
  4057c6:	701e      	strb	r6, [r3, #0]
  4057c8:	6963      	ldr	r3, [r4, #20]
  4057ca:	3001      	adds	r0, #1
  4057cc:	4298      	cmp	r0, r3
  4057ce:	d004      	beq.n	4057da <__swbuf_r+0x62>
  4057d0:	89a3      	ldrh	r3, [r4, #12]
  4057d2:	07db      	lsls	r3, r3, #31
  4057d4:	d519      	bpl.n	40580a <__swbuf_r+0x92>
  4057d6:	2e0a      	cmp	r6, #10
  4057d8:	d117      	bne.n	40580a <__swbuf_r+0x92>
  4057da:	4621      	mov	r1, r4
  4057dc:	4628      	mov	r0, r5
  4057de:	f7ff f8ed 	bl	4049bc <_fflush_r>
  4057e2:	b190      	cbz	r0, 40580a <__swbuf_r+0x92>
  4057e4:	e00f      	b.n	405806 <__swbuf_r+0x8e>
  4057e6:	4b0b      	ldr	r3, [pc, #44]	; (405814 <__swbuf_r+0x9c>)
  4057e8:	429c      	cmp	r4, r3
  4057ea:	d101      	bne.n	4057f0 <__swbuf_r+0x78>
  4057ec:	68ac      	ldr	r4, [r5, #8]
  4057ee:	e7d0      	b.n	405792 <__swbuf_r+0x1a>
  4057f0:	4b09      	ldr	r3, [pc, #36]	; (405818 <__swbuf_r+0xa0>)
  4057f2:	429c      	cmp	r4, r3
  4057f4:	bf08      	it	eq
  4057f6:	68ec      	ldreq	r4, [r5, #12]
  4057f8:	e7cb      	b.n	405792 <__swbuf_r+0x1a>
  4057fa:	4621      	mov	r1, r4
  4057fc:	4628      	mov	r0, r5
  4057fe:	f000 f81f 	bl	405840 <__swsetup_r>
  405802:	2800      	cmp	r0, #0
  405804:	d0cc      	beq.n	4057a0 <__swbuf_r+0x28>
  405806:	f04f 37ff 	mov.w	r7, #4294967295
  40580a:	4638      	mov	r0, r7
  40580c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40580e:	bf00      	nop
  405810:	00405e70 	.word	0x00405e70
  405814:	00405e90 	.word	0x00405e90
  405818:	00405e50 	.word	0x00405e50

0040581c <_write_r>:
  40581c:	b538      	push	{r3, r4, r5, lr}
  40581e:	4c07      	ldr	r4, [pc, #28]	; (40583c <_write_r+0x20>)
  405820:	4605      	mov	r5, r0
  405822:	4608      	mov	r0, r1
  405824:	4611      	mov	r1, r2
  405826:	2200      	movs	r2, #0
  405828:	6022      	str	r2, [r4, #0]
  40582a:	461a      	mov	r2, r3
  40582c:	f7fc ff9c 	bl	402768 <_write>
  405830:	1c43      	adds	r3, r0, #1
  405832:	d102      	bne.n	40583a <_write_r+0x1e>
  405834:	6823      	ldr	r3, [r4, #0]
  405836:	b103      	cbz	r3, 40583a <_write_r+0x1e>
  405838:	602b      	str	r3, [r5, #0]
  40583a:	bd38      	pop	{r3, r4, r5, pc}
  40583c:	204006f0 	.word	0x204006f0

00405840 <__swsetup_r>:
  405840:	4b32      	ldr	r3, [pc, #200]	; (40590c <__swsetup_r+0xcc>)
  405842:	b570      	push	{r4, r5, r6, lr}
  405844:	681d      	ldr	r5, [r3, #0]
  405846:	4606      	mov	r6, r0
  405848:	460c      	mov	r4, r1
  40584a:	b125      	cbz	r5, 405856 <__swsetup_r+0x16>
  40584c:	69ab      	ldr	r3, [r5, #24]
  40584e:	b913      	cbnz	r3, 405856 <__swsetup_r+0x16>
  405850:	4628      	mov	r0, r5
  405852:	f7ff f91d 	bl	404a90 <__sinit>
  405856:	4b2e      	ldr	r3, [pc, #184]	; (405910 <__swsetup_r+0xd0>)
  405858:	429c      	cmp	r4, r3
  40585a:	d10f      	bne.n	40587c <__swsetup_r+0x3c>
  40585c:	686c      	ldr	r4, [r5, #4]
  40585e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405862:	b29a      	uxth	r2, r3
  405864:	0715      	lsls	r5, r2, #28
  405866:	d42c      	bmi.n	4058c2 <__swsetup_r+0x82>
  405868:	06d0      	lsls	r0, r2, #27
  40586a:	d411      	bmi.n	405890 <__swsetup_r+0x50>
  40586c:	2209      	movs	r2, #9
  40586e:	6032      	str	r2, [r6, #0]
  405870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405874:	81a3      	strh	r3, [r4, #12]
  405876:	f04f 30ff 	mov.w	r0, #4294967295
  40587a:	bd70      	pop	{r4, r5, r6, pc}
  40587c:	4b25      	ldr	r3, [pc, #148]	; (405914 <__swsetup_r+0xd4>)
  40587e:	429c      	cmp	r4, r3
  405880:	d101      	bne.n	405886 <__swsetup_r+0x46>
  405882:	68ac      	ldr	r4, [r5, #8]
  405884:	e7eb      	b.n	40585e <__swsetup_r+0x1e>
  405886:	4b24      	ldr	r3, [pc, #144]	; (405918 <__swsetup_r+0xd8>)
  405888:	429c      	cmp	r4, r3
  40588a:	bf08      	it	eq
  40588c:	68ec      	ldreq	r4, [r5, #12]
  40588e:	e7e6      	b.n	40585e <__swsetup_r+0x1e>
  405890:	0751      	lsls	r1, r2, #29
  405892:	d512      	bpl.n	4058ba <__swsetup_r+0x7a>
  405894:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405896:	b141      	cbz	r1, 4058aa <__swsetup_r+0x6a>
  405898:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40589c:	4299      	cmp	r1, r3
  40589e:	d002      	beq.n	4058a6 <__swsetup_r+0x66>
  4058a0:	4630      	mov	r0, r6
  4058a2:	f7ff fd2b 	bl	4052fc <_free_r>
  4058a6:	2300      	movs	r3, #0
  4058a8:	6363      	str	r3, [r4, #52]	; 0x34
  4058aa:	89a3      	ldrh	r3, [r4, #12]
  4058ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4058b0:	81a3      	strh	r3, [r4, #12]
  4058b2:	2300      	movs	r3, #0
  4058b4:	6063      	str	r3, [r4, #4]
  4058b6:	6923      	ldr	r3, [r4, #16]
  4058b8:	6023      	str	r3, [r4, #0]
  4058ba:	89a3      	ldrh	r3, [r4, #12]
  4058bc:	f043 0308 	orr.w	r3, r3, #8
  4058c0:	81a3      	strh	r3, [r4, #12]
  4058c2:	6923      	ldr	r3, [r4, #16]
  4058c4:	b94b      	cbnz	r3, 4058da <__swsetup_r+0x9a>
  4058c6:	89a3      	ldrh	r3, [r4, #12]
  4058c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
  4058cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4058d0:	d003      	beq.n	4058da <__swsetup_r+0x9a>
  4058d2:	4621      	mov	r1, r4
  4058d4:	4630      	mov	r0, r6
  4058d6:	f7ff f997 	bl	404c08 <__smakebuf_r>
  4058da:	89a2      	ldrh	r2, [r4, #12]
  4058dc:	f012 0301 	ands.w	r3, r2, #1
  4058e0:	d00c      	beq.n	4058fc <__swsetup_r+0xbc>
  4058e2:	2300      	movs	r3, #0
  4058e4:	60a3      	str	r3, [r4, #8]
  4058e6:	6963      	ldr	r3, [r4, #20]
  4058e8:	425b      	negs	r3, r3
  4058ea:	61a3      	str	r3, [r4, #24]
  4058ec:	6923      	ldr	r3, [r4, #16]
  4058ee:	b953      	cbnz	r3, 405906 <__swsetup_r+0xc6>
  4058f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4058f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  4058f8:	d1ba      	bne.n	405870 <__swsetup_r+0x30>
  4058fa:	bd70      	pop	{r4, r5, r6, pc}
  4058fc:	0792      	lsls	r2, r2, #30
  4058fe:	bf58      	it	pl
  405900:	6963      	ldrpl	r3, [r4, #20]
  405902:	60a3      	str	r3, [r4, #8]
  405904:	e7f2      	b.n	4058ec <__swsetup_r+0xac>
  405906:	2000      	movs	r0, #0
  405908:	e7f7      	b.n	4058fa <__swsetup_r+0xba>
  40590a:	bf00      	nop
  40590c:	20400048 	.word	0x20400048
  405910:	00405e70 	.word	0x00405e70
  405914:	00405e90 	.word	0x00405e90
  405918:	00405e50 	.word	0x00405e50

0040591c <_close_r>:
  40591c:	b538      	push	{r3, r4, r5, lr}
  40591e:	4c06      	ldr	r4, [pc, #24]	; (405938 <_close_r+0x1c>)
  405920:	2300      	movs	r3, #0
  405922:	4605      	mov	r5, r0
  405924:	4608      	mov	r0, r1
  405926:	6023      	str	r3, [r4, #0]
  405928:	f7fb febc 	bl	4016a4 <_close>
  40592c:	1c43      	adds	r3, r0, #1
  40592e:	d102      	bne.n	405936 <_close_r+0x1a>
  405930:	6823      	ldr	r3, [r4, #0]
  405932:	b103      	cbz	r3, 405936 <_close_r+0x1a>
  405934:	602b      	str	r3, [r5, #0]
  405936:	bd38      	pop	{r3, r4, r5, pc}
  405938:	204006f0 	.word	0x204006f0

0040593c <_fstat_r>:
  40593c:	b538      	push	{r3, r4, r5, lr}
  40593e:	4c07      	ldr	r4, [pc, #28]	; (40595c <_fstat_r+0x20>)
  405940:	2300      	movs	r3, #0
  405942:	4605      	mov	r5, r0
  405944:	4608      	mov	r0, r1
  405946:	4611      	mov	r1, r2
  405948:	6023      	str	r3, [r4, #0]
  40594a:	f7fb feae 	bl	4016aa <_fstat>
  40594e:	1c43      	adds	r3, r0, #1
  405950:	d102      	bne.n	405958 <_fstat_r+0x1c>
  405952:	6823      	ldr	r3, [r4, #0]
  405954:	b103      	cbz	r3, 405958 <_fstat_r+0x1c>
  405956:	602b      	str	r3, [r5, #0]
  405958:	bd38      	pop	{r3, r4, r5, pc}
  40595a:	bf00      	nop
  40595c:	204006f0 	.word	0x204006f0

00405960 <_isatty_r>:
  405960:	b538      	push	{r3, r4, r5, lr}
  405962:	4c06      	ldr	r4, [pc, #24]	; (40597c <_isatty_r+0x1c>)
  405964:	2300      	movs	r3, #0
  405966:	4605      	mov	r5, r0
  405968:	4608      	mov	r0, r1
  40596a:	6023      	str	r3, [r4, #0]
  40596c:	f7fb fea2 	bl	4016b4 <_isatty>
  405970:	1c43      	adds	r3, r0, #1
  405972:	d102      	bne.n	40597a <_isatty_r+0x1a>
  405974:	6823      	ldr	r3, [r4, #0]
  405976:	b103      	cbz	r3, 40597a <_isatty_r+0x1a>
  405978:	602b      	str	r3, [r5, #0]
  40597a:	bd38      	pop	{r3, r4, r5, pc}
  40597c:	204006f0 	.word	0x204006f0

00405980 <_lseek_r>:
  405980:	b538      	push	{r3, r4, r5, lr}
  405982:	4c07      	ldr	r4, [pc, #28]	; (4059a0 <_lseek_r+0x20>)
  405984:	4605      	mov	r5, r0
  405986:	4608      	mov	r0, r1
  405988:	4611      	mov	r1, r2
  40598a:	2200      	movs	r2, #0
  40598c:	6022      	str	r2, [r4, #0]
  40598e:	461a      	mov	r2, r3
  405990:	f7fb fe92 	bl	4016b8 <_lseek>
  405994:	1c43      	adds	r3, r0, #1
  405996:	d102      	bne.n	40599e <_lseek_r+0x1e>
  405998:	6823      	ldr	r3, [r4, #0]
  40599a:	b103      	cbz	r3, 40599e <_lseek_r+0x1e>
  40599c:	602b      	str	r3, [r5, #0]
  40599e:	bd38      	pop	{r3, r4, r5, pc}
  4059a0:	204006f0 	.word	0x204006f0

004059a4 <__ascii_mbtowc>:
  4059a4:	b082      	sub	sp, #8
  4059a6:	b901      	cbnz	r1, 4059aa <__ascii_mbtowc+0x6>
  4059a8:	a901      	add	r1, sp, #4
  4059aa:	b142      	cbz	r2, 4059be <__ascii_mbtowc+0x1a>
  4059ac:	b14b      	cbz	r3, 4059c2 <__ascii_mbtowc+0x1e>
  4059ae:	7813      	ldrb	r3, [r2, #0]
  4059b0:	600b      	str	r3, [r1, #0]
  4059b2:	7812      	ldrb	r2, [r2, #0]
  4059b4:	1c10      	adds	r0, r2, #0
  4059b6:	bf18      	it	ne
  4059b8:	2001      	movne	r0, #1
  4059ba:	b002      	add	sp, #8
  4059bc:	4770      	bx	lr
  4059be:	4610      	mov	r0, r2
  4059c0:	e7fb      	b.n	4059ba <__ascii_mbtowc+0x16>
  4059c2:	f06f 0001 	mvn.w	r0, #1
  4059c6:	e7f8      	b.n	4059ba <__ascii_mbtowc+0x16>

004059c8 <__malloc_lock>:
  4059c8:	4770      	bx	lr

004059ca <__malloc_unlock>:
  4059ca:	4770      	bx	lr

004059cc <_read_r>:
  4059cc:	b538      	push	{r3, r4, r5, lr}
  4059ce:	4c07      	ldr	r4, [pc, #28]	; (4059ec <_read_r+0x20>)
  4059d0:	4605      	mov	r5, r0
  4059d2:	4608      	mov	r0, r1
  4059d4:	4611      	mov	r1, r2
  4059d6:	2200      	movs	r2, #0
  4059d8:	6022      	str	r2, [r4, #0]
  4059da:	461a      	mov	r2, r3
  4059dc:	f7fc feb2 	bl	402744 <_read>
  4059e0:	1c43      	adds	r3, r0, #1
  4059e2:	d102      	bne.n	4059ea <_read_r+0x1e>
  4059e4:	6823      	ldr	r3, [r4, #0]
  4059e6:	b103      	cbz	r3, 4059ea <_read_r+0x1e>
  4059e8:	602b      	str	r3, [r5, #0]
  4059ea:	bd38      	pop	{r3, r4, r5, pc}
  4059ec:	204006f0 	.word	0x204006f0

004059f0 <__ascii_wctomb>:
  4059f0:	b149      	cbz	r1, 405a06 <__ascii_wctomb+0x16>
  4059f2:	2aff      	cmp	r2, #255	; 0xff
  4059f4:	bf85      	ittet	hi
  4059f6:	238a      	movhi	r3, #138	; 0x8a
  4059f8:	6003      	strhi	r3, [r0, #0]
  4059fa:	700a      	strbls	r2, [r1, #0]
  4059fc:	f04f 30ff 	movhi.w	r0, #4294967295
  405a00:	bf98      	it	ls
  405a02:	2001      	movls	r0, #1
  405a04:	4770      	bx	lr
  405a06:	4608      	mov	r0, r1
  405a08:	4770      	bx	lr
	...

00405a0c <__aeabi_dcmpun>:
  405a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405a14:	d102      	bne.n	405a1c <__aeabi_dcmpun+0x10>
  405a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405a1a:	d10a      	bne.n	405a32 <__aeabi_dcmpun+0x26>
  405a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405a24:	d102      	bne.n	405a2c <__aeabi_dcmpun+0x20>
  405a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405a2a:	d102      	bne.n	405a32 <__aeabi_dcmpun+0x26>
  405a2c:	f04f 0000 	mov.w	r0, #0
  405a30:	4770      	bx	lr
  405a32:	f04f 0001 	mov.w	r0, #1
  405a36:	4770      	bx	lr
  405a38:	20534f50 	.word	0x20534f50
  405a3c:	00000a31 	.word	0x00000a31
  405a40:	20534f50 	.word	0x20534f50
  405a44:	00000a32 	.word	0x00000a32
  405a48:	20534f50 	.word	0x20534f50
  405a4c:	00000a33 	.word	0x00000a33
  405a50:	682f2e2e 	.word	0x682f2e2e
  405a54:	732f6c61 	.word	0x732f6c61
  405a58:	682f6372 	.word	0x682f6372
  405a5c:	615f6c61 	.word	0x615f6c61
  405a60:	615f6364 	.word	0x615f6364
  405a64:	636e7973 	.word	0x636e7973
  405a68:	0000632e 	.word	0x0000632e
  405a6c:	682f2e2e 	.word	0x682f2e2e
  405a70:	732f6c61 	.word	0x732f6c61
  405a74:	682f6372 	.word	0x682f6372
  405a78:	695f6c61 	.word	0x695f6c61
  405a7c:	00632e6f 	.word	0x00632e6f
  405a80:	682f2e2e 	.word	0x682f2e2e
  405a84:	732f6c61 	.word	0x732f6c61
  405a88:	682f6372 	.word	0x682f6372
  405a8c:	705f6c61 	.word	0x705f6c61
  405a90:	632e6d77 	.word	0x632e6d77
  405a94:	00000000 	.word	0x00000000
  405a98:	682f2e2e 	.word	0x682f2e2e
  405a9c:	732f6c61 	.word	0x732f6c61
  405aa0:	682f6372 	.word	0x682f6372
  405aa4:	745f6c61 	.word	0x745f6c61
  405aa8:	72656d69 	.word	0x72656d69
  405aac:	0000632e 	.word	0x0000632e
  405ab0:	682f2e2e 	.word	0x682f2e2e
  405ab4:	732f6c61 	.word	0x732f6c61
  405ab8:	682f6372 	.word	0x682f6372
  405abc:	755f6c61 	.word	0x755f6c61
  405ac0:	74726173 	.word	0x74726173
  405ac4:	6e79735f 	.word	0x6e79735f
  405ac8:	00632e63 	.word	0x00632e63
  405acc:	682f2e2e 	.word	0x682f2e2e
  405ad0:	752f6c61 	.word	0x752f6c61
  405ad4:	736c6974 	.word	0x736c6974
  405ad8:	6372732f 	.word	0x6372732f
  405adc:	6974752f 	.word	0x6974752f
  405ae0:	6c5f736c 	.word	0x6c5f736c
  405ae4:	2e747369 	.word	0x2e747369
  405ae8:	00000063 	.word	0x00000063
  405aec:	682f2e2e 	.word	0x682f2e2e
  405af0:	752f6c61 	.word	0x752f6c61
  405af4:	736c6974 	.word	0x736c6974
  405af8:	6372732f 	.word	0x6372732f
  405afc:	6974752f 	.word	0x6974752f
  405b00:	725f736c 	.word	0x725f736c
  405b04:	62676e69 	.word	0x62676e69
  405b08:	65666675 	.word	0x65666675
  405b0c:	00632e72 	.word	0x00632e72

00405b10 <_afecs>:
  405b10:	00000000 2f843100 23000000 ffffffff     .....1./...#....
  405b20:	0000ffff 00000000 00000000 00000000     ................
  405b30:	0000010c 00000000 00000000 00000000     ................
  405b40:	00000000 00000200 00000200 00000200     ................
  405b50:	00000200 00000200 00000200 00000200     ................
  405b60:	00000200 00000200 00000200 00000200     ................
  405b70:	00000200 00000001 2f843100 23000000     .........1./...#
  405b80:	ffffffff 0000ffff 00000000 00000000     ................
  405b90:	00000000 0000010c 00000000 00000000     ................
	...
  405ba8:	00000200 00000200 00000200 00000200     ................
  405bb8:	00000200 00000200 00000200 00000200     ................
  405bc8:	00000200 00000200 00000200 00000200     ................
  405bd8:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  405be8:	63656661 0000632e                       afec.c..

00405bf0 <_ext_irq>:
  405bf0:	00000000 00000024 00000000 00000000     ....$...........
	...
  405c0c:	00000003 00080000 00000000 00000000     ................
	...

00405c28 <_pio_irq_n>:
  405c28:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  405c38:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  405c48:	00000000                                ....

00405c4c <_pwms>:
  405c4c:	40020000 0000001f 00010019 00000001     ...@............
  405c5c:	00000001 000000ff 00000000 00000004     ................
	...
  405c78:	00000002 00405cd4 00000000 20400388     .....\@.......@ 
  405c88:	4005c000 0000003c 00010019 00000001     ...@<...........
  405c98:	00000001 000000ff 00000000 00000004     ................
	...
  405cb4:	00000001 00405cc4 00000000 2040037c     .....\@.....|.@ 

00405cc4 <_ch_cfg1>:
  405cc4:	00000000 0000010b 000003e8 00000200     ................

00405cd4 <_ch_cfg0>:
  405cd4:	00000000 0000010b 000003e8 00000200     ................
  405ce4:	00000002 0000010b 000003e8 00000200     ................
  405cf4:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  405d04:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  405d14:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00405d20 <_usarts>:
  405d20:	00000001 001008c0 000100f4 682f2e2e     ............../h
  405d30:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  405d40:	632e7472 00000000                       rt.c....

00405d48 <_cfgs>:
  405d48:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  405d58:	00000040 00000000 00000040 00000000     @.......@.......
  405d68:	00000040 00000000 00000040 00000000     @.......@.......
  405d78:	00000040 00000000 00000040 00000000     @.......@.......
  405d88:	00000040 00000000 00000040 00000000     @.......@.......
  405d98:	00000040 00000000 00000040 00000000     @.......@.......
  405da8:	00000040 00000000 00000040 00000000     @.......@.......
  405db8:	00000040 00000000 00000040 00000000     @.......@.......
  405dc8:	00000040 00000000 00000040 00000000     @.......@.......
  405dd8:	00000040 00000000 00000040 00000000     @.......@.......
  405de8:	00000040 00000000 00000040 00000000     @.......@.......
  405df8:	00000040 00000000 00000040 00000000     @.......@.......

00405e08 <_global_impure_ptr>:
  405e08:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  405e18:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  405e28:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  405e38:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  405e48:	4e614e00 00000000                       .NaN....

00405e50 <__sf_fake_stderr>:
	...

00405e70 <__sf_fake_stdin>:
	...

00405e90 <__sf_fake_stdout>:
	...

00405eb0 <__mprec_bigtens>:
  405eb0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  405ec0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  405ed0:	7f73bf3c 75154fdd                       <.s..O.u

00405ed8 <__mprec_tens>:
  405ed8:	00000000 3ff00000 00000000 40240000     .......?......$@
  405ee8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  405ef8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  405f08:	00000000 412e8480 00000000 416312d0     .......A......cA
  405f18:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  405f28:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  405f38:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  405f48:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  405f58:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  405f68:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  405f78:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  405f88:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  405f98:	79d99db4 44ea7843                       ...yCx.D

00405fa0 <p05.6047>:
  405fa0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  405fb0:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  405fc0:	5849534f 00002e00                                OSIX...

00405fc7 <_ctype_>:
  405fc7:	20202000 20202020 28282020 20282828     .         ((((( 
  405fd7:	20202020 20202020 20202020 20202020                     
  405fe7:	10108820 10101010 10101010 10101010      ...............
  405ff7:	04040410 04040404 10040404 10101010     ................
  406007:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406017:	01010101 01010101 01010101 10101010     ................
  406027:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406037:	02020202 02020202 02020202 10101010     ................
  406047:	00000020 00000000 00000000 00000000      ...............
	...

004060c8 <_init>:
  4060c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4060ca:	bf00      	nop
  4060cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4060ce:	bc08      	pop	{r3}
  4060d0:	469e      	mov	lr, r3
  4060d2:	4770      	bx	lr

004060d4 <__init_array_start>:
  4060d4:	0040018d 	.word	0x0040018d

004060d8 <_fini>:
  4060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4060da:	bf00      	nop
  4060dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4060de:	bc08      	pop	{r3}
  4060e0:	469e      	mov	lr, r3
  4060e2:	4770      	bx	lr

004060e4 <__fini_array_start>:
  4060e4:	00400169 	.word	0x00400169
