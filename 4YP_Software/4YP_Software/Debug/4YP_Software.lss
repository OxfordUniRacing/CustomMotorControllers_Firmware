
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000088f8  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000021c  20400000  004088f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000744  20400220  00408b20  00020220  2**5
                  ALLOC
  3 .heap         00000204  20400964  00409264  00020220  2**0
                  ALLOC
  4 .stack        00000400  20400b68  00409468  00020220  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
  6 .comment      000000c7  00000000  00000000  0002024a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00033a11  00000000  00000000  00020311  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006575  00000000  00000000  00053d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000dc2c  00000000  00000000  0005a297  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000fc0  00000000  00000000  00067ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ef0  00000000  00000000  00068e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0004bca5  00000000  00000000  00069d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002574a  00000000  00000000  000b5a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00159846  00000000  00000000  000db162  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003738  00000000  00000000  002349a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	68 0f 40 20 95 16 40 00 91 16 40 00 91 16 40 00     h.@ ..@...@...@.
  400010:	91 16 40 00 91 16 40 00 91 16 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	91 16 40 00 91 16 40 00 00 00 00 00 91 16 40 00     ..@...@.......@.
  40003c:	91 16 40 00 91 16 40 00 91 16 40 00 91 16 40 00     ..@...@...@...@.
  40004c:	91 16 40 00 91 16 40 00 91 16 40 00 91 16 40 00     ..@...@...@...@.
  40005c:	91 16 40 00 91 16 40 00 00 00 00 00 31 2b 40 00     ..@...@.....1+@.
  40006c:	25 2b 40 00 91 16 40 00 91 16 40 00 91 16 40 00     %+@...@...@...@.
  40007c:	91 16 40 00 19 2b 40 00 91 16 40 00 91 16 40 00     ..@..+@...@...@.
  40008c:	91 16 40 00 91 16 40 00 91 16 40 00 91 16 40 00     ..@...@...@...@.
  40009c:	55 31 40 00 91 16 40 00 91 16 40 00 91 16 40 00     U1@...@...@...@.
  4000ac:	91 16 40 00 91 16 40 00 e1 26 40 00 91 16 40 00     ..@...@..&@...@.
  4000bc:	e5 2c 40 00 91 16 40 00 91 16 40 00 91 16 40 00     .,@...@...@...@.
  4000cc:	91 16 40 00 91 16 40 00 c9 28 40 00 91 16 40 00     ..@...@..(@...@.
  4000dc:	91 16 40 00 f5 26 40 00 91 16 40 00 91 16 40 00     ..@..&@...@...@.
  4000ec:	91 16 40 00 91 16 40 00 91 16 40 00 91 16 40 00     ..@...@...@...@.
  4000fc:	91 16 40 00 91 16 40 00 91 16 40 00 69 31 40 00     ..@...@...@.i1@.
  40010c:	91 16 40 00 91 16 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 91 16 40 00 91 16 40 00 c5 34 40 00     ......@...@..4@.
  40012c:	91 16 40 00 f9 2c 40 00 91 16 40 00 91 16 40 00     ..@..,@...@...@.
  40013c:	91 16 40 00 91 16 40 00 91 16 40 00 91 16 40 00     ..@...@...@...@.
  40014c:	91 16 40 00 91 16 40 00 91 16 40 00 91 16 40 00     ..@...@...@...@.
  40015c:	91 16 40 00 91 16 40 00 91 16 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400220 	.word	0x20400220
  400184:	00000000 	.word	0x00000000
  400188:	004088f8 	.word	0x004088f8

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004088f8 	.word	0x004088f8
  4001c8:	20400224 	.word	0x20400224
  4001cc:	004088f8 	.word	0x004088f8
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00401b6d 	.word	0x00401b6d
  4001e4:	0040373d 	.word	0x0040373d

004001e8 <Init_Control>:


int cntrrr = 0;
float control_time;

void Init_Control(void) {
  4001e8:	b570      	push	{r4, r5, r6, lr}
  4001ea:	b082      	sub	sp, #8
	arm_mat_init_f32 (&A,A_rows,A_cols,(float32_t *)A_data);    //MATRIX EXAMPLE
  4001ec:	4b11      	ldr	r3, [pc, #68]	; (400234 <Init_Control+0x4c>)
  4001ee:	2202      	movs	r2, #2
  4001f0:	2103      	movs	r1, #3
  4001f2:	4811      	ldr	r0, [pc, #68]	; (400238 <Init_Control+0x50>)
  4001f4:	4c11      	ldr	r4, [pc, #68]	; (40023c <Init_Control+0x54>)
  4001f6:	47a0      	blx	r4
	arm_mat_init_f32 (&I,I_rows,I_cols,(float32_t *)control_currents);    //create current vector
  4001f8:	4b11      	ldr	r3, [pc, #68]	; (400240 <Init_Control+0x58>)
  4001fa:	2201      	movs	r2, #1
  4001fc:	2103      	movs	r1, #3
  4001fe:	4811      	ldr	r0, [pc, #68]	; (400244 <Init_Control+0x5c>)
  400200:	47a0      	blx	r4
	arm_mat_init_f32 (&PWM,PWM_rows,PWM_cols,(float32_t *)PWM_data);    //create pwm vector
  400202:	4b11      	ldr	r3, [pc, #68]	; (400248 <Init_Control+0x60>)
  400204:	2201      	movs	r2, #1
  400206:	2103      	movs	r1, #3
  400208:	4810      	ldr	r0, [pc, #64]	; (40024c <Init_Control+0x64>)
  40020a:	47a0      	blx	r4
	
	PID_init_cts(&PID_d, PID_d_Kp, PID_d_Ki, PID_d_Kd,(float)1/15000);		//initialise the PID controller for d and q values
  40020c:	2400      	movs	r4, #0
  40020e:	4e10      	ldr	r6, [pc, #64]	; (400250 <Init_Control+0x68>)
  400210:	9600      	str	r6, [sp, #0]
  400212:	4623      	mov	r3, r4
  400214:	4a0f      	ldr	r2, [pc, #60]	; (400254 <Init_Control+0x6c>)
  400216:	4910      	ldr	r1, [pc, #64]	; (400258 <Init_Control+0x70>)
  400218:	4810      	ldr	r0, [pc, #64]	; (40025c <Init_Control+0x74>)
  40021a:	4d11      	ldr	r5, [pc, #68]	; (400260 <Init_Control+0x78>)
  40021c:	47a8      	blx	r5
	PID_init_cts(&PID_q, PID_q_Kp, PID_q_Ki, PID_q_Kd,(float)1/15000);
  40021e:	9600      	str	r6, [sp, #0]
  400220:	4623      	mov	r3, r4
  400222:	4a10      	ldr	r2, [pc, #64]	; (400264 <Init_Control+0x7c>)
  400224:	4910      	ldr	r1, [pc, #64]	; (400268 <Init_Control+0x80>)
  400226:	4811      	ldr	r0, [pc, #68]	; (40026c <Init_Control+0x84>)
  400228:	47a8      	blx	r5
	
	oldtorquerequest = 0;
  40022a:	4b11      	ldr	r3, [pc, #68]	; (400270 <Init_Control+0x88>)
  40022c:	601c      	str	r4, [r3, #0]
}
  40022e:	b002      	add	sp, #8
  400230:	bd70      	pop	{r4, r5, r6, pc}
  400232:	bf00      	nop
  400234:	204005d4 	.word	0x204005d4
  400238:	204005f0 	.word	0x204005f0
  40023c:	00404d75 	.word	0x00404d75
  400240:	204006b0 	.word	0x204006b0
  400244:	20400688 	.word	0x20400688
  400248:	20400694 	.word	0x20400694
  40024c:	20400674 	.word	0x20400674
  400250:	388bcf65 	.word	0x388bcf65
  400254:	431a2794 	.word	0x431a2794
  400258:	3f1aa32f 	.word	0x3f1aa32f
  40025c:	20400654 	.word	0x20400654
  400260:	004009a5 	.word	0x004009a5
  400264:	43227a93 	.word	0x43227a93
  400268:	3f29dbab 	.word	0x3f29dbab
  40026c:	20400614 	.word	0x20400614
  400270:	20400670 	.word	0x20400670
  400274:	00000000 	.word	0x00000000

00400278 <getIqId_r>:


void getIqId_r(float torquerequest, float* Iq_r, float* Id_r, float V_dc) {		//Calculates reference currents based on the torque requests 
  400278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40027c:	ed2d 8b02 	vpush	{d8}
  400280:	460f      	mov	r7, r1
  400282:	4690      	mov	r8, r2
	
	//float omega_base_e = V_dc*LST_SQ_OMEGA_BASE_E				//FIELD WEAKENING PART TO FINISH
	//if(omega_e > omega_base_e ){}
		
	float I_m = 2* torquerequest / (3*PP*FLUX_PM);
  400284:	ee07 0a90 	vmov	s15, r0
  400288:	ee77 7aa7 	vadd.f32	s15, s15, s15
  40028c:	ee17 0a90 	vmov	r0, s15
  400290:	4b27      	ldr	r3, [pc, #156]	; (400330 <getIqId_r+0xb8>)
  400292:	4798      	blx	r3
  400294:	a320      	add	r3, pc, #128	; (adr r3, 400318 <getIqId_r+0xa0>)
  400296:	e9d3 2300 	ldrd	r2, r3, [r3]
  40029a:	4c26      	ldr	r4, [pc, #152]	; (400334 <getIqId_r+0xbc>)
  40029c:	47a0      	blx	r4
  40029e:	4b26      	ldr	r3, [pc, #152]	; (400338 <getIqId_r+0xc0>)
  4002a0:	4798      	blx	r3
  4002a2:	ee07 0a90 	vmov	s15, r0
	
	if (I_m > I_MAX){I_m = I_MAX;}
  4002a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
  4002aa:	eef4 7ac7 	vcmpe.f32	s15, s14
  4002ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4002b2:	dd01      	ble.n	4002b8 <getIqId_r+0x40>
  4002b4:	eef0 7a47 	vmov.f32	s15, s14
	*Id_r = C1 - sqrt(C1_SQR - 0.5*(I_m*I_m));
  4002b8:	ee27 8aa7 	vmul.f32	s16, s15, s15
  4002bc:	4e1c      	ldr	r6, [pc, #112]	; (400330 <getIqId_r+0xb8>)
  4002be:	ee18 0a10 	vmov	r0, s16
  4002c2:	47b0      	blx	r6
  4002c4:	2200      	movs	r2, #0
  4002c6:	4b1d      	ldr	r3, [pc, #116]	; (40033c <getIqId_r+0xc4>)
  4002c8:	4c1d      	ldr	r4, [pc, #116]	; (400340 <getIqId_r+0xc8>)
  4002ca:	47a0      	blx	r4
  4002cc:	4c1d      	ldr	r4, [pc, #116]	; (400344 <getIqId_r+0xcc>)
  4002ce:	4602      	mov	r2, r0
  4002d0:	460b      	mov	r3, r1
  4002d2:	a113      	add	r1, pc, #76	; (adr r1, 400320 <getIqId_r+0xa8>)
  4002d4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4002d8:	47a0      	blx	r4
  4002da:	4d1b      	ldr	r5, [pc, #108]	; (400348 <getIqId_r+0xd0>)
  4002dc:	47a8      	blx	r5
  4002de:	4602      	mov	r2, r0
  4002e0:	460b      	mov	r3, r1
  4002e2:	a111      	add	r1, pc, #68	; (adr r1, 400328 <getIqId_r+0xb0>)
  4002e4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4002e8:	47a0      	blx	r4
  4002ea:	4c13      	ldr	r4, [pc, #76]	; (400338 <getIqId_r+0xc0>)
  4002ec:	47a0      	blx	r4
  4002ee:	ee07 0a90 	vmov	s15, r0
  4002f2:	f8c8 0000 	str.w	r0, [r8]
	
	*Iq_r = sqrt(I_m*I_m - (*Id_r)*(*Id_r));
  4002f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
  4002fa:	ee78 7a67 	vsub.f32	s15, s16, s15
  4002fe:	ee17 0a90 	vmov	r0, s15
  400302:	47b0      	blx	r6
  400304:	47a8      	blx	r5
  400306:	47a0      	blx	r4
  400308:	6038      	str	r0, [r7, #0]
}	
  40030a:	ecbd 8b02 	vpop	{d8}
  40030e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400312:	bf00      	nop
  400314:	f3af 8000 	nop.w
  400318:	47ae147b 	.word	0x47ae147b
  40031c:	3fd87ae1 	.word	0x3fd87ae1
  400320:	00000000 	.word	0x00000000
  400324:	40f06550 	.word	0x40f06550
  400328:	3eab367a 	.word	0x3eab367a
  40032c:	40703257 	.word	0x40703257
  400330:	00405045 	.word	0x00405045
  400334:	00405341 	.word	0x00405341
  400338:	0040569d 	.word	0x0040569d
  40033c:	3fe00000 	.word	0x3fe00000
  400340:	004050ed 	.word	0x004050ed
  400344:	00404d85 	.word	0x00404d85
  400348:	00403879 	.word	0x00403879

0040034c <SVPWM>:
int cntrrar;
void SVPWM(float Va_aim, float Vb_aim, float* PWM, float V_dc) {							//Space Vector Modulation Function
  40034c:	ee07 0a10 	vmov	s14, r0
  400350:	ee07 1a90 	vmov	s15, r1
  400354:	ee06 3a90 	vmov	s13, r3
	float Vc_aim;
	Vc_aim = -Vb_aim - Va_aim;										//Calculates third voltage aim
  400358:	eeb1 6a67 	vneg.f32	s12, s15
  40035c:	ee36 6a47 	vsub.f32	s12, s12, s14
	
	float Va_comp, Vb_comp, Vc_comp;
	Va_comp = (V_dc-Va_aim)/V_dc;									//normalise 
  400360:	ee76 5ac7 	vsub.f32	s11, s13, s14
  400364:	ee85 7aa6 	vdiv.f32	s14, s11, s13
	Vb_comp = (V_dc-Vb_aim)/V_dc;	
  400368:	ee76 5ae7 	vsub.f32	s11, s13, s15
  40036c:	eec5 7aa6 	vdiv.f32	s15, s11, s13
	Vc_comp = (V_dc-Vc_aim)/V_dc;
  400370:	ee36 6ac6 	vsub.f32	s12, s13, s12
  400374:	eec6 5a26 	vdiv.f32	s11, s12, s13
	
	float V_min;
	
	if((Va_comp<Vb_comp)&&(Va_comp<Vc_comp)) {					//Finds minimum 
  400378:	eeb4 7ae7 	vcmpe.f32	s14, s15
  40037c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400380:	d504      	bpl.n	40038c <SVPWM+0x40>
  400382:	eeb4 7ae5 	vcmpe.f32	s14, s11
  400386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40038a:	d423      	bmi.n	4003d4 <SVPWM+0x88>
		V_min = Va_comp;
	}else{
		if(Vb_comp<Vc_comp){
  40038c:	eef4 7ae5 	vcmpe.f32	s15, s11
  400390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400394:	d521      	bpl.n	4003da <SVPWM+0x8e>
			V_min = Vb_comp;
  400396:	eeb0 6a67 	vmov.f32	s12, s15
			V_min = Vc_comp;
		}
	}
	
	float Va_dc, Vb_dc, Vc_dc;					//does down clamping and sets minimum to zero, subtracting minimum from all three
	PWM[0] = 1 - (Va_comp - V_min);
  40039a:	ee37 7a46 	vsub.f32	s14, s14, s12
  40039e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  4003a2:	ee36 7ac7 	vsub.f32	s14, s13, s14
  4003a6:	ed82 7a00 	vstr	s14, [r2]
	PWM[1] = 1 - (Vb_comp - V_min);
  4003aa:	ee77 7ac6 	vsub.f32	s15, s15, s12
  4003ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
  4003b2:	edc2 7a01 	vstr	s15, [r2, #4]
	PWM[2] = 1 - (Vc_comp - V_min);
  4003b6:	ee75 5ac6 	vsub.f32	s11, s11, s12
  4003ba:	ee76 6ae5 	vsub.f32	s13, s13, s11
  4003be:	edc2 6a02 	vstr	s13, [r2, #8]
	cntrrar++;
  4003c2:	4a09      	ldr	r2, [pc, #36]	; (4003e8 <SVPWM+0x9c>)
  4003c4:	6813      	ldr	r3, [r2, #0]
  4003c6:	3301      	adds	r3, #1
  4003c8:	6013      	str	r3, [r2, #0]
	if(cntrrar == 15000){
  4003ca:	f643 2298 	movw	r2, #15000	; 0x3a98
  4003ce:	4293      	cmp	r3, r2
  4003d0:	d006      	beq.n	4003e0 <SVPWM+0x94>
  4003d2:	4770      	bx	lr
		V_min = Va_comp;
  4003d4:	eeb0 6a47 	vmov.f32	s12, s14
  4003d8:	e7df      	b.n	40039a <SVPWM+0x4e>
			V_min = Vc_comp;
  4003da:	eeb0 6a65 	vmov.f32	s12, s11
  4003de:	e7dc      	b.n	40039a <SVPWM+0x4e>
		cntrrar = 0;
  4003e0:	2200      	movs	r2, #0
  4003e2:	4b01      	ldr	r3, [pc, #4]	; (4003e8 <SVPWM+0x9c>)
  4003e4:	601a      	str	r2, [r3, #0]
		
		//printf("\n PWM A = %f \t PWM B = %f \t PWM C - %f ", PWM[0], PWM[1], PWM[2]);
	}

}
  4003e6:	e7f4      	b.n	4003d2 <SVPWM+0x86>
  4003e8:	20400690 	.word	0x20400690

004003ec <update_PWM>:
	}
}



void update_PWM(float* PWM){
  4003ec:	b570      	push	{r4, r5, r6, lr}
  4003ee:	ed2d 8b02 	vpush	{d8}
  4003f2:	4605      	mov	r5, r0
	pwm_set_duty(PWM_PHASE_A, (int) ((PWM_PERIOD-1) * PWM[2]));
  4003f4:	edd0 7a02 	vldr	s15, [r0, #8]
  4003f8:	ed9f 8a12 	vldr	s16, [pc, #72]	; 400444 <update_PWM+0x58>
  4003fc:	ee67 7a88 	vmul.f32	s15, s15, s16
  400400:	4e11      	ldr	r6, [pc, #68]	; (400448 <update_PWM+0x5c>)
  400402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400406:	ee17 2a90 	vmov	r2, s15
  40040a:	2100      	movs	r1, #0
  40040c:	4630      	mov	r0, r6
  40040e:	4c0f      	ldr	r4, [pc, #60]	; (40044c <update_PWM+0x60>)
  400410:	47a0      	blx	r4
	pwm_set_duty(PWM_PHASE_B, (int) ((PWM_PERIOD-1) * PWM[1]));
  400412:	edd5 7a01 	vldr	s15, [r5, #4]
  400416:	ee67 7a88 	vmul.f32	s15, s15, s16
  40041a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  40041e:	ee17 2a90 	vmov	r2, s15
  400422:	2102      	movs	r1, #2
  400424:	4630      	mov	r0, r6
  400426:	47a0      	blx	r4
	pwm_set_duty(PWM_PHASE_C, (int) ((PWM_PERIOD-1) * PWM[0]));
  400428:	edd5 7a00 	vldr	s15, [r5]
  40042c:	ee67 7a88 	vmul.f32	s15, s15, s16
  400430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400434:	ee17 2a90 	vmov	r2, s15
  400438:	2100      	movs	r1, #0
  40043a:	4805      	ldr	r0, [pc, #20]	; (400450 <update_PWM+0x64>)
  40043c:	47a0      	blx	r4
	
  40043e:	ecbd 8b02 	vpop	{d8}
  400442:	bd70      	pop	{r4, r5, r6, pc}
  400444:	4479c000 	.word	0x4479c000
  400448:	20400774 	.word	0x20400774
  40044c:	00401639 	.word	0x00401639
  400450:	20400918 	.word	0x20400918
  400454:	00000000 	.word	0x00000000

00400458 <Control>:
void Control(float torquerequest, float V_dc, int pos_HS_state, float pos_HS_t1, float *pos_HS_dts, float pos_ENC_angle) {
  400458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40045c:	ed2d 8b04 	vpush	{d8-d9}
  400460:	b083      	sub	sp, #12
  400462:	4604      	mov	r4, r0
  400464:	4692      	mov	sl, r2
  400466:	469b      	mov	fp, r3
	if (torquerequest - T_RATE_UP > oldtorquerequest){torquerequest = oldtorquerequest + T_RATE_UP;} //Limit Increase Rate
  400468:	4d65      	ldr	r5, [pc, #404]	; (400600 <Control+0x1a8>)
  40046a:	47a8      	blx	r5
  40046c:	a362      	add	r3, pc, #392	; (adr r3, 4005f8 <Control+0x1a0>)
  40046e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400472:	4e64      	ldr	r6, [pc, #400]	; (400604 <Control+0x1ac>)
  400474:	47b0      	blx	r6
  400476:	4680      	mov	r8, r0
  400478:	4689      	mov	r9, r1
  40047a:	4b63      	ldr	r3, [pc, #396]	; (400608 <Control+0x1b0>)
  40047c:	6818      	ldr	r0, [r3, #0]
  40047e:	47a8      	blx	r5
  400480:	4606      	mov	r6, r0
  400482:	460f      	mov	r7, r1
  400484:	4602      	mov	r2, r0
  400486:	460b      	mov	r3, r1
  400488:	4640      	mov	r0, r8
  40048a:	4649      	mov	r1, r9
  40048c:	4d5f      	ldr	r5, [pc, #380]	; (40060c <Control+0x1b4>)
  40048e:	47a8      	blx	r5
  400490:	b148      	cbz	r0, 4004a6 <Control+0x4e>
  400492:	a359      	add	r3, pc, #356	; (adr r3, 4005f8 <Control+0x1a0>)
  400494:	e9d3 2300 	ldrd	r2, r3, [r3]
  400498:	4630      	mov	r0, r6
  40049a:	4639      	mov	r1, r7
  40049c:	4c5c      	ldr	r4, [pc, #368]	; (400610 <Control+0x1b8>)
  40049e:	47a0      	blx	r4
  4004a0:	4b5c      	ldr	r3, [pc, #368]	; (400614 <Control+0x1bc>)
  4004a2:	4798      	blx	r3
  4004a4:	4604      	mov	r4, r0
	if (torquerequest + T_RATE_DOWN < oldtorquerequest){torquerequest = oldtorquerequest - T_RATE_DOWN;} //Limit Decrease Rate
  4004a6:	4620      	mov	r0, r4
  4004a8:	4b55      	ldr	r3, [pc, #340]	; (400600 <Control+0x1a8>)
  4004aa:	4798      	blx	r3
  4004ac:	a352      	add	r3, pc, #328	; (adr r3, 4005f8 <Control+0x1a0>)
  4004ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4004b2:	4d57      	ldr	r5, [pc, #348]	; (400610 <Control+0x1b8>)
  4004b4:	47a8      	blx	r5
  4004b6:	4602      	mov	r2, r0
  4004b8:	460b      	mov	r3, r1
  4004ba:	4630      	mov	r0, r6
  4004bc:	4639      	mov	r1, r7
  4004be:	4d53      	ldr	r5, [pc, #332]	; (40060c <Control+0x1b4>)
  4004c0:	47a8      	blx	r5
  4004c2:	b148      	cbz	r0, 4004d8 <Control+0x80>
  4004c4:	a34c      	add	r3, pc, #304	; (adr r3, 4005f8 <Control+0x1a0>)
  4004c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4004ca:	4630      	mov	r0, r6
  4004cc:	4639      	mov	r1, r7
  4004ce:	4c4d      	ldr	r4, [pc, #308]	; (400604 <Control+0x1ac>)
  4004d0:	47a0      	blx	r4
  4004d2:	4b50      	ldr	r3, [pc, #320]	; (400614 <Control+0x1bc>)
  4004d4:	4798      	blx	r3
  4004d6:	4604      	mov	r4, r0
	oldtorquerequest = torquerequest;	//Update the new old value
  4004d8:	4b4b      	ldr	r3, [pc, #300]	; (400608 <Control+0x1b0>)
  4004da:	601c      	str	r4, [r3, #0]
	getIqId_r(torquerequest, &Iq_r, &Id_r, V_dc);	//Get the id and iq requested current
  4004dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
  4004e0:	466a      	mov	r2, sp
  4004e2:	a901      	add	r1, sp, #4
  4004e4:	4620      	mov	r0, r4
  4004e6:	4c4c      	ldr	r4, [pc, #304]	; (400618 <Control+0x1c0>)
  4004e8:	47a0      	blx	r4
	theta_e = EstimateTheta(pos_HS_state, pos_HS_t1, &pos_HS_dts, pos_ENC_angle);
  4004ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4004ec:	aa10      	add	r2, sp, #64	; 0x40
  4004ee:	4659      	mov	r1, fp
  4004f0:	4650      	mov	r0, sl
  4004f2:	4c4a      	ldr	r4, [pc, #296]	; (40061c <Control+0x1c4>)
  4004f4:	47a0      	blx	r4
  4004f6:	4b4a      	ldr	r3, [pc, #296]	; (400620 <Control+0x1c8>)
  4004f8:	6018      	str	r0, [r3, #0]
	float sintheta_e = sin(theta_e);
  4004fa:	4b41      	ldr	r3, [pc, #260]	; (400600 <Control+0x1a8>)
  4004fc:	4798      	blx	r3
  4004fe:	4606      	mov	r6, r0
  400500:	460f      	mov	r7, r1
  400502:	4b48      	ldr	r3, [pc, #288]	; (400624 <Control+0x1cc>)
  400504:	4798      	blx	r3
  400506:	4c43      	ldr	r4, [pc, #268]	; (400614 <Control+0x1bc>)
  400508:	47a0      	blx	r4
  40050a:	ee08 0a10 	vmov	s16, r0
	float costheta_e = cos(theta_e);	//(Currently uses fast sin and cosine)
  40050e:	4630      	mov	r0, r6
  400510:	4639      	mov	r1, r7
  400512:	4b45      	ldr	r3, [pc, #276]	; (400628 <Control+0x1d0>)
  400514:	4798      	blx	r3
  400516:	47a0      	blx	r4
  400518:	ee09 0a10 	vmov	s18, r0
	arm_clarke_f32(control_currents[0],control_currents[1],&I_alpha,&I_beta); //Does clarke transform
  40051c:	4b43      	ldr	r3, [pc, #268]	; (40062c <Control+0x1d4>)
  40051e:	ed93 7a00 	vldr	s14, [r3]
  400522:	edd3 6a01 	vldr	s13, [r3, #4]
  {
    /* Calculate pIalpha using the equation, pIalpha = Ia */
    *pIalpha = Ia;

    /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
  400526:	eddf 7a42 	vldr	s15, [pc, #264]	; 400630 <Control+0x1d8>
  40052a:	ee67 7a27 	vmul.f32	s15, s14, s15
  40052e:	ed9f 6a41 	vldr	s12, [pc, #260]	; 400634 <Control+0x1dc>
  400532:	ee66 6a86 	vmul.f32	s13, s13, s12
  400536:	ee77 7aa6 	vadd.f32	s15, s15, s13
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
  40053a:	ee29 6a07 	vmul.f32	s12, s18, s14
  40053e:	ee68 6a27 	vmul.f32	s13, s16, s15

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
  400542:	ee27 7a48 	vnmul.f32	s14, s14, s16
  400546:	ee69 7a27 	vmul.f32	s15, s18, s15
  40054a:	ee77 8a27 	vadd.f32	s17, s14, s15
	Vd_aim = runPID(&PID_d, Id_r, I_d);								//PID 
  40054e:	ee76 7a26 	vadd.f32	s15, s12, s13
  400552:	ee17 2a90 	vmov	r2, s15
  400556:	9900      	ldr	r1, [sp, #0]
  400558:	4837      	ldr	r0, [pc, #220]	; (400638 <Control+0x1e0>)
  40055a:	4d38      	ldr	r5, [pc, #224]	; (40063c <Control+0x1e4>)
  40055c:	47a8      	blx	r5
  40055e:	4c38      	ldr	r4, [pc, #224]	; (400640 <Control+0x1e8>)
  400560:	6020      	str	r0, [r4, #0]
	Vq_aim = runPID(&PID_q, Iq_r, I_q);
  400562:	ee18 2a90 	vmov	r2, s17
  400566:	9901      	ldr	r1, [sp, #4]
  400568:	4836      	ldr	r0, [pc, #216]	; (400644 <Control+0x1ec>)
  40056a:	47a8      	blx	r5
  40056c:	ee07 0a10 	vmov	s14, r0
  400570:	4b35      	ldr	r3, [pc, #212]	; (400648 <Control+0x1f0>)
  400572:	6018      	str	r0, [r3, #0]
	arm_inv_park_f32(Vd_aim,Vq_aim,&Valpha_aim,&Vbeta_aim,sintheta_e,costheta_e);	//Inverse Park transform
  400574:	edd4 6a00 	vldr	s13, [r4]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
  400578:	ee69 7a26 	vmul.f32	s15, s18, s13
  40057c:	ee28 6a07 	vmul.f32	s12, s16, s14
  400580:	ee77 7ac6 	vsub.f32	s15, s15, s12

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
  400584:	ee28 8a26 	vmul.f32	s16, s16, s13
  400588:	ee29 9a07 	vmul.f32	s18, s18, s14
  40058c:	ee38 8a09 	vadd.f32	s16, s16, s18
    *pIb = -0.5f * Ialpha + 0.8660254039f * Ibeta;
  400590:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
  400594:	ee27 7a87 	vmul.f32	s14, s15, s14
  400598:	eddf 6a2c 	vldr	s13, [pc, #176]	; 40064c <Control+0x1f4>
  40059c:	ee28 8a26 	vmul.f32	s16, s16, s13
	SVPWM(Va_aim, Vb_aim, (float32_t *)PWM_data, V_dc);										//Updates PWM values using space vector PWM
  4005a0:	4c2b      	ldr	r4, [pc, #172]	; (400650 <Control+0x1f8>)
  4005a2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
  4005a6:	4622      	mov	r2, r4
  4005a8:	ee37 7a08 	vadd.f32	s14, s14, s16
  4005ac:	ee17 1a10 	vmov	r1, s14
  4005b0:	ee17 0a90 	vmov	r0, s15
  4005b4:	4d27      	ldr	r5, [pc, #156]	; (400654 <Control+0x1fc>)
  4005b6:	47a8      	blx	r5
	update_PWM((float32_t *)PWM_data);
  4005b8:	4620      	mov	r0, r4
  4005ba:	4b27      	ldr	r3, [pc, #156]	; (400658 <Control+0x200>)
  4005bc:	4798      	blx	r3
	control_time = time_get_delta_us();
  4005be:	4b27      	ldr	r3, [pc, #156]	; (40065c <Control+0x204>)
  4005c0:	4798      	blx	r3
  4005c2:	4b27      	ldr	r3, [pc, #156]	; (400660 <Control+0x208>)
  4005c4:	6018      	str	r0, [r3, #0]
	cntrrr++;
  4005c6:	4a27      	ldr	r2, [pc, #156]	; (400664 <Control+0x20c>)
  4005c8:	6813      	ldr	r3, [r2, #0]
  4005ca:	3301      	adds	r3, #1
  4005cc:	6013      	str	r3, [r2, #0]
	if(cntrrr == 15000){
  4005ce:	f643 2298 	movw	r2, #15000	; 0x3a98
  4005d2:	4293      	cmp	r3, r2
  4005d4:	d004      	beq.n	4005e0 <Control+0x188>
}
  4005d6:	b003      	add	sp, #12
  4005d8:	ecbd 8b04 	vpop	{d8-d9}
  4005dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cntrrr = 0;
  4005e0:	2200      	movs	r2, #0
  4005e2:	4b20      	ldr	r3, [pc, #128]	; (400664 <Control+0x20c>)
  4005e4:	601a      	str	r2, [r3, #0]
		printf("Time Control = %f us \n",control_time);
  4005e6:	4b06      	ldr	r3, [pc, #24]	; (400600 <Control+0x1a8>)
  4005e8:	4798      	blx	r3
  4005ea:	4602      	mov	r2, r0
  4005ec:	460b      	mov	r3, r1
  4005ee:	481e      	ldr	r0, [pc, #120]	; (400668 <Control+0x210>)
  4005f0:	491e      	ldr	r1, [pc, #120]	; (40066c <Control+0x214>)
  4005f2:	4788      	blx	r1
}
  4005f4:	e7ef      	b.n	4005d6 <Control+0x17e>
  4005f6:	bf00      	nop
  4005f8:	eb1c432d 	.word	0xeb1c432d
  4005fc:	3f1a36e2 	.word	0x3f1a36e2
  400600:	00405045 	.word	0x00405045
  400604:	00404d85 	.word	0x00404d85
  400608:	20400670 	.word	0x20400670
  40060c:	0040560d 	.word	0x0040560d
  400610:	00404d89 	.word	0x00404d89
  400614:	0040569d 	.word	0x0040569d
  400618:	00400279 	.word	0x00400279
  40061c:	00400969 	.word	0x00400969
  400620:	20400630 	.word	0x20400630
  400624:	004037f1 	.word	0x004037f1
  400628:	0040375d 	.word	0x0040375d
  40062c:	204006b0 	.word	0x204006b0
  400630:	3f13cd3a 	.word	0x3f13cd3a
  400634:	3f93cd3a 	.word	0x3f93cd3a
  400638:	20400654 	.word	0x20400654
  40063c:	004009bb 	.word	0x004009bb
  400640:	204006a4 	.word	0x204006a4
  400644:	20400614 	.word	0x20400614
  400648:	204006a8 	.word	0x204006a8
  40064c:	3f5db3d7 	.word	0x3f5db3d7
  400650:	20400694 	.word	0x20400694
  400654:	0040034d 	.word	0x0040034d
  400658:	004003ed 	.word	0x004003ed
  40065c:	00401659 	.word	0x00401659
  400660:	2040067c 	.word	0x2040067c
  400664:	2040023c 	.word	0x2040023c
  400668:	00408044 	.word	0x00408044
  40066c:	004061e1 	.word	0x004061e1

00400670 <init_LPF>:
#include "Control.h"
#include "Time_Tester.h"


// digital low pass filter stuff
void init_LPF(void){
  400670:	b570      	push	{r4, r5, r6, lr}
	DLPF_Init(&DLPF_Curr_A,2,1500,15000);
  400672:	4e09      	ldr	r6, [pc, #36]	; (400698 <init_LPF+0x28>)
  400674:	4d09      	ldr	r5, [pc, #36]	; (40069c <init_LPF+0x2c>)
  400676:	4633      	mov	r3, r6
  400678:	462a      	mov	r2, r5
  40067a:	2102      	movs	r1, #2
  40067c:	4808      	ldr	r0, [pc, #32]	; (4006a0 <init_LPF+0x30>)
  40067e:	4c09      	ldr	r4, [pc, #36]	; (4006a4 <init_LPF+0x34>)
  400680:	47a0      	blx	r4
	DLPF_Init(&DLPF_Curr_B,2,1500,15000);
  400682:	4633      	mov	r3, r6
  400684:	462a      	mov	r2, r5
  400686:	2102      	movs	r1, #2
  400688:	4807      	ldr	r0, [pc, #28]	; (4006a8 <init_LPF+0x38>)
  40068a:	47a0      	blx	r4
	DLPF_Init(&DLPF_Curr_C,2,1500,15000);
  40068c:	4633      	mov	r3, r6
  40068e:	462a      	mov	r2, r5
  400690:	2102      	movs	r1, #2
  400692:	4806      	ldr	r0, [pc, #24]	; (4006ac <init_LPF+0x3c>)
  400694:	47a0      	blx	r4
  400696:	bd70      	pop	{r4, r5, r6, pc}
  400698:	466a6000 	.word	0x466a6000
  40069c:	44bb8000 	.word	0x44bb8000
  4006a0:	204006bc 	.word	0x204006bc
  4006a4:	004007bd 	.word	0x004007bd
  4006a8:	20400634 	.word	0x20400634
  4006ac:	204005f8 	.word	0x204005f8

004006b0 <gather_control_data>:
}

float gather_data_time, control_dummy_time;

//get position data, timing and torque request
void gather_control_data(void){
  4006b0:	b508      	push	{r3, lr}
	//get torque request
	control_torque_request = 0;
  4006b2:	2200      	movs	r2, #0
  4006b4:	4b07      	ldr	r3, [pc, #28]	; (4006d4 <gather_control_data+0x24>)
  4006b6:	601a      	str	r2, [r3, #0]
	
	get_Data_Pos(&(control_pos_sens_deltas[0]), &control_pos_sens_sector, &control_pos_sens_time_in_current_sector);
  4006b8:	4a07      	ldr	r2, [pc, #28]	; (4006d8 <gather_control_data+0x28>)
  4006ba:	4908      	ldr	r1, [pc, #32]	; (4006dc <gather_control_data+0x2c>)
  4006bc:	4808      	ldr	r0, [pc, #32]	; (4006e0 <gather_control_data+0x30>)
  4006be:	4b09      	ldr	r3, [pc, #36]	; (4006e4 <gather_control_data+0x34>)
  4006c0:	4798      	blx	r3
	
	
	//do last as this is the most frequently updated data
	encoder_get_angle(& control_encoder_angle);
  4006c2:	4809      	ldr	r0, [pc, #36]	; (4006e8 <gather_control_data+0x38>)
  4006c4:	4b09      	ldr	r3, [pc, #36]	; (4006ec <gather_control_data+0x3c>)
  4006c6:	4798      	blx	r3
	
	gather_data_time = time_get_delta_us();
  4006c8:	4b09      	ldr	r3, [pc, #36]	; (4006f0 <gather_control_data+0x40>)
  4006ca:	4798      	blx	r3
  4006cc:	4b09      	ldr	r3, [pc, #36]	; (4006f4 <gather_control_data+0x44>)
  4006ce:	6018      	str	r0, [r3, #0]
  4006d0:	bd08      	pop	{r3, pc}
  4006d2:	bf00      	nop
  4006d4:	204006ac 	.word	0x204006ac
  4006d8:	204005d0 	.word	0x204005d0
  4006dc:	20400650 	.word	0x20400650
  4006e0:	20400680 	.word	0x20400680
  4006e4:	00401005 	.word	0x00401005
  4006e8:	204005cc 	.word	0x204005cc
  4006ec:	00400e01 	.word	0x00400e01
  4006f0:	00401659 	.word	0x00401659
  4006f4:	2040072c 	.word	0x2040072c

004006f8 <start_control_loop_dummy>:
int fcntr;


//process ADC data and start the control loop
//this is being called from the ADC DMA, so we know that the analog sensor values passed are not going to change, hence use pointers instead of copyin data
void start_control_loop_dummy(int * currentsss, int voltageee){
  4006f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4006fa:	b083      	sub	sp, #12
  4006fc:	4606      	mov	r6, r0
  4006fe:	460f      	mov	r7, r1
	control_currents[0] = fy_z0;
	
	*/
	
	//store in local variables to prevent data from being overwritten
	control_currents[0] = DLPF_Filter(&DLPF_Curr_A,reconstruct_curr_A( currentsss[0]));
  400700:	6800      	ldr	r0, [r0, #0]
  400702:	4b1c      	ldr	r3, [pc, #112]	; (400774 <start_control_loop_dummy+0x7c>)
  400704:	4798      	blx	r3
  400706:	4601      	mov	r1, r0
  400708:	481b      	ldr	r0, [pc, #108]	; (400778 <start_control_loop_dummy+0x80>)
  40070a:	4d1c      	ldr	r5, [pc, #112]	; (40077c <start_control_loop_dummy+0x84>)
  40070c:	47a8      	blx	r5
  40070e:	4c1c      	ldr	r4, [pc, #112]	; (400780 <start_control_loop_dummy+0x88>)
  400710:	6020      	str	r0, [r4, #0]
	control_currents[1] = DLPF_Filter(&DLPF_Curr_B,reconstruct_curr_B( currentsss[1]));
  400712:	6870      	ldr	r0, [r6, #4]
  400714:	4b1b      	ldr	r3, [pc, #108]	; (400784 <start_control_loop_dummy+0x8c>)
  400716:	4798      	blx	r3
  400718:	4601      	mov	r1, r0
  40071a:	481b      	ldr	r0, [pc, #108]	; (400788 <start_control_loop_dummy+0x90>)
  40071c:	47a8      	blx	r5
  40071e:	6060      	str	r0, [r4, #4]
	control_currents[2] = DLPF_Filter(&DLPF_Curr_C,reconstruct_curr_C( currentsss[2]));
  400720:	68b0      	ldr	r0, [r6, #8]
  400722:	4b1a      	ldr	r3, [pc, #104]	; (40078c <start_control_loop_dummy+0x94>)
  400724:	4798      	blx	r3
  400726:	4601      	mov	r1, r0
  400728:	4819      	ldr	r0, [pc, #100]	; (400790 <start_control_loop_dummy+0x98>)
  40072a:	47a8      	blx	r5
  40072c:	60a0      	str	r0, [r4, #8]
	
	control_supply_voltage = reconstruct_bus_voltage( voltageee);
  40072e:	4638      	mov	r0, r7
  400730:	4b18      	ldr	r3, [pc, #96]	; (400794 <start_control_loop_dummy+0x9c>)
  400732:	4798      	blx	r3
  400734:	4601      	mov	r1, r0
  400736:	4b18      	ldr	r3, [pc, #96]	; (400798 <start_control_loop_dummy+0xa0>)
  400738:	6018      	str	r0, [r3, #0]
	
	//for testing
	control_torque_request = 2.5;
  40073a:	4a18      	ldr	r2, [pc, #96]	; (40079c <start_control_loop_dummy+0xa4>)
  40073c:	4b18      	ldr	r3, [pc, #96]	; (4007a0 <start_control_loop_dummy+0xa8>)
  40073e:	601a      	str	r2, [r3, #0]
	
	
	
	fcntr++;
  400740:	4a18      	ldr	r2, [pc, #96]	; (4007a4 <start_control_loop_dummy+0xac>)
  400742:	6813      	ldr	r3, [r2, #0]
  400744:	3301      	adds	r3, #1
  400746:	6013      	str	r3, [r2, #0]
	if(fcntr == 10000){
  400748:	f242 7210 	movw	r2, #10000	; 0x2710
  40074c:	4293      	cmp	r3, r2
  40074e:	d00d      	beq.n	40076c <start_control_loop_dummy+0x74>
// 		printf("LPF C \n");
// 		DLPF_Print_IO(&DLPF_Curr_C);
	}
	
	//start control loop below
	Control(control_torque_request, control_supply_voltage, control_pos_sens_sector, control_pos_sens_time_in_current_sector, (float *) control_pos_sens_deltas, control_encoder_angle);
  400750:	4b15      	ldr	r3, [pc, #84]	; (4007a8 <start_control_loop_dummy+0xb0>)
  400752:	681b      	ldr	r3, [r3, #0]
  400754:	4a15      	ldr	r2, [pc, #84]	; (4007ac <start_control_loop_dummy+0xb4>)
  400756:	6812      	ldr	r2, [r2, #0]
  400758:	4815      	ldr	r0, [pc, #84]	; (4007b0 <start_control_loop_dummy+0xb8>)
  40075a:	6800      	ldr	r0, [r0, #0]
  40075c:	9001      	str	r0, [sp, #4]
  40075e:	4815      	ldr	r0, [pc, #84]	; (4007b4 <start_control_loop_dummy+0xbc>)
  400760:	9000      	str	r0, [sp, #0]
  400762:	480e      	ldr	r0, [pc, #56]	; (40079c <start_control_loop_dummy+0xa4>)
  400764:	4c14      	ldr	r4, [pc, #80]	; (4007b8 <start_control_loop_dummy+0xc0>)
  400766:	47a0      	blx	r4
	//controlV(control_torque_request, control_supply_voltage, control_pos_sens_sector, control_pos_sens_time_in_current_sector, (float *) control_pos_sens_deltas, control_encoder_angle);
  400768:	b003      	add	sp, #12
  40076a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fcntr =0;
  40076c:	2200      	movs	r2, #0
  40076e:	4b0d      	ldr	r3, [pc, #52]	; (4007a4 <start_control_loop_dummy+0xac>)
  400770:	601a      	str	r2, [r3, #0]
  400772:	e7ed      	b.n	400750 <start_control_loop_dummy+0x58>
  400774:	00400b29 	.word	0x00400b29
  400778:	204006bc 	.word	0x204006bc
  40077c:	004008d9 	.word	0x004008d9
  400780:	204006b0 	.word	0x204006b0
  400784:	00400b79 	.word	0x00400b79
  400788:	20400634 	.word	0x20400634
  40078c:	00400bc9 	.word	0x00400bc9
  400790:	204005f8 	.word	0x204005f8
  400794:	004009f5 	.word	0x004009f5
  400798:	20400610 	.word	0x20400610
  40079c:	40200000 	.word	0x40200000
  4007a0:	204006ac 	.word	0x204006ac
  4007a4:	20400748 	.word	0x20400748
  4007a8:	204005d0 	.word	0x204005d0
  4007ac:	20400650 	.word	0x20400650
  4007b0:	204005cc 	.word	0x204005cc
  4007b4:	20400680 	.word	0x20400680
  4007b8:	00400459 	.word	0x00400459

004007bc <DLPF_Init>:
#include <atmel_start.h>
#include "arm_math.h"



void DLPF_Init(struct DLPF* LPF, int order, float cutoff_freq, float sampling_freq){
  4007bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007c0:	ed2d 8b02 	vpush	{d8}
  4007c4:	4604      	mov	r4, r0
  4007c6:	460e      	mov	r6, r1
  4007c8:	ee08 2a10 	vmov	s16, r2
  4007cc:	ee08 3a90 	vmov	s17, r3
	//index 0 <=> z^-1, index 1 <=> z^-2 etc
	//some of the arrays are one larger than they need to be but that is worth the ease of programming
	LPF->previous_inputs	= (float *) malloc((order+1)*sizeof(float));
  4007d0:	1c4f      	adds	r7, r1, #1
  4007d2:	00bd      	lsls	r5, r7, #2
  4007d4:	4628      	mov	r0, r5
  4007d6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 4008cc <DLPF_Init+0x110>
  4007da:	47c0      	blx	r8
  4007dc:	60a0      	str	r0, [r4, #8]
	LPF->previous_outputs	= (float *) malloc((order+1)*sizeof(float));
  4007de:	4628      	mov	r0, r5
  4007e0:	47c0      	blx	r8
  4007e2:	60e0      	str	r0, [r4, #12]

	LPF->order = order;
  4007e4:	6026      	str	r6, [r4, #0]
	LPF->array_size = order + 1;
  4007e6:	6067      	str	r7, [r4, #4]
	
	
	
	if (LPF->order == 1){
  4007e8:	2e01      	cmp	r6, #1
  4007ea:	d04b      	beq.n	400884 <DLPF_Init+0xc8>
		LPF->coef_output[0] = 0;
		LPF->coef_output[1] = (temp-1) / (common_denom);
	}
	
	//orders higher than two not supported, but it is possible to input the values manually
	if (LPF->order >= 2){
  4007ec:	6823      	ldr	r3, [r4, #0]
  4007ee:	2b01      	cmp	r3, #1
  4007f0:	dd44      	ble.n	40087c <DLPF_Init+0xc0>
		//second order butterworth filter
		LPF->order = 2;
  4007f2:	2302      	movs	r3, #2
  4007f4:	6023      	str	r3, [r4, #0]
		
		LPF->coef_input			= (float *) malloc((order+1)*sizeof(float));
  4007f6:	4628      	mov	r0, r5
  4007f8:	4f34      	ldr	r7, [pc, #208]	; (4008cc <DLPF_Init+0x110>)
  4007fa:	47b8      	blx	r7
  4007fc:	4606      	mov	r6, r0
  4007fe:	6120      	str	r0, [r4, #16]
		LPF->coef_output		= (float *) malloc((order+1)*sizeof(float));
  400800:	4628      	mov	r0, r5
  400802:	47b8      	blx	r7
  400804:	6160      	str	r0, [r4, #20]
		
		float temp = sampling_freq / (PI * cutoff_freq);
  400806:	eddf 7a32 	vldr	s15, [pc, #200]	; 4008d0 <DLPF_Init+0x114>
  40080a:	ee28 8a27 	vmul.f32	s16, s16, s15
  40080e:	ee88 7a88 	vdiv.f32	s14, s17, s16
		float zeta = 1.4142;	//sqrt 2
		
		float common_denom = temp*temp + zeta *temp + 1;
  400812:	ee67 7a07 	vmul.f32	s15, s14, s14
  400816:	eddf 5a2f 	vldr	s11, [pc, #188]	; 4008d4 <DLPF_Init+0x118>
  40081a:	ee67 5a25 	vmul.f32	s11, s14, s11
  40081e:	ee77 6aa5 	vadd.f32	s13, s15, s11
  400822:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
  400826:	ee76 6a85 	vadd.f32	s13, s13, s10
		LPF->coef_input[0] = 1 / (common_denom);
  40082a:	eec5 4a26 	vdiv.f32	s9, s10, s13
  40082e:	edc6 4a00 	vstr	s9, [r6]
		LPF->coef_input[1] = 2 / (common_denom);
  400832:	6923      	ldr	r3, [r4, #16]
  400834:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
  400838:	ee86 4a26 	vdiv.f32	s8, s12, s13
  40083c:	ed83 4a01 	vstr	s8, [r3, #4]
		LPF->coef_input[2] = 1 / (common_denom);
  400840:	6923      	ldr	r3, [r4, #16]
  400842:	edc3 4a02 	vstr	s9, [r3, #8]
		
		LPF->coef_output[0] = 0;
  400846:	6963      	ldr	r3, [r4, #20]
  400848:	2200      	movs	r2, #0
  40084a:	601a      	str	r2, [r3, #0]
		LPF->coef_output[1] = - (2 - 2*temp*temp) / (common_denom);
  40084c:	6963      	ldr	r3, [r4, #20]
  40084e:	ee77 4a07 	vadd.f32	s9, s14, s14
  400852:	ee27 7a24 	vmul.f32	s14, s14, s9
  400856:	ee36 7a47 	vsub.f32	s14, s12, s14
  40085a:	eeb1 7a47 	vneg.f32	s14, s14
  40085e:	ee87 6a26 	vdiv.f32	s12, s14, s13
  400862:	ed83 6a01 	vstr	s12, [r3, #4]
		LPF->coef_output[2] = - (temp*temp - zeta *temp + 1) / (common_denom);
  400866:	6963      	ldr	r3, [r4, #20]
  400868:	ee77 7ae5 	vsub.f32	s15, s15, s11
  40086c:	ee77 7a85 	vadd.f32	s15, s15, s10
  400870:	eef1 7a67 	vneg.f32	s15, s15
  400874:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400878:	ed83 7a02 	vstr	s14, [r3, #8]
	}
	
	//DLPF_Print_Coeff(LPF);
	
}
  40087c:	ecbd 8b02 	vpop	{d8}
  400880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LPF->coef_input			= (float *) malloc((order+1)*sizeof(float));
  400884:	4628      	mov	r0, r5
  400886:	47c0      	blx	r8
  400888:	4606      	mov	r6, r0
  40088a:	6120      	str	r0, [r4, #16]
		LPF->coef_output		= (float *) malloc((order+1)*sizeof(float));
  40088c:	4628      	mov	r0, r5
  40088e:	47c0      	blx	r8
  400890:	6160      	str	r0, [r4, #20]
		float temp = sampling_freq / (PI * cutoff_freq);
  400892:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 4008d0 <DLPF_Init+0x114>
  400896:	ee28 7a07 	vmul.f32	s14, s16, s14
  40089a:	eec8 7a87 	vdiv.f32	s15, s17, s14
		float common_denom = 1+temp;
  40089e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  4008a2:	ee77 6a87 	vadd.f32	s13, s15, s14
		LPF->coef_input[0] = 1 / (common_denom);
  4008a6:	ee87 6a26 	vdiv.f32	s12, s14, s13
  4008aa:	ed86 6a00 	vstr	s12, [r6]
		LPF->coef_input[1] = 1 / (common_denom);
  4008ae:	6923      	ldr	r3, [r4, #16]
  4008b0:	ed83 6a01 	vstr	s12, [r3, #4]
		LPF->coef_output[0] = 0;
  4008b4:	6963      	ldr	r3, [r4, #20]
  4008b6:	2200      	movs	r2, #0
  4008b8:	601a      	str	r2, [r3, #0]
		LPF->coef_output[1] = (temp-1) / (common_denom);
  4008ba:	6963      	ldr	r3, [r4, #20]
  4008bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
  4008c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4008c4:	ed83 7a01 	vstr	s14, [r3, #4]
  4008c8:	e790      	b.n	4007ec <DLPF_Init+0x30>
  4008ca:	bf00      	nop
  4008cc:	00405791 	.word	0x00405791
  4008d0:	40490fdb 	.word	0x40490fdb
  4008d4:	3fb50481 	.word	0x3fb50481

004008d8 <DLPF_Filter>:

float DLPF_Filter(struct DLPF* LPF, float input){
	//there is a more efficient way of doing this whole calculation, but it shouldnt matter in this case
	LPF->previous_inputs[0] = input;
  4008d8:	6883      	ldr	r3, [r0, #8]
  4008da:	6019      	str	r1, [r3, #0]
	
	float output =0;
	for (int i=0;i <= LPF->order;i++){
  4008dc:	2200      	movs	r2, #0
	float output =0;
  4008de:	eddf 7a20 	vldr	s15, [pc, #128]	; 400960 <DLPF_Filter+0x88>
	for (int i=0;i <= LPF->order;i++){
  4008e2:	e019      	b.n	400918 <DLPF_Filter+0x40>
		output += LPF->previous_inputs[i] * LPF->coef_input[i];
  4008e4:	6881      	ldr	r1, [r0, #8]
  4008e6:	0093      	lsls	r3, r2, #2
  4008e8:	4419      	add	r1, r3
  4008ea:	ed91 7a00 	vldr	s14, [r1]
  4008ee:	6901      	ldr	r1, [r0, #16]
  4008f0:	4419      	add	r1, r3
  4008f2:	edd1 6a00 	vldr	s13, [r1]
  4008f6:	ee27 7a26 	vmul.f32	s14, s14, s13
  4008fa:	ee77 7a87 	vadd.f32	s15, s15, s14
		output += LPF->previous_outputs[i] * LPF->coef_output[i];
  4008fe:	68c1      	ldr	r1, [r0, #12]
  400900:	4419      	add	r1, r3
  400902:	ed91 7a00 	vldr	s14, [r1]
  400906:	6941      	ldr	r1, [r0, #20]
  400908:	440b      	add	r3, r1
  40090a:	edd3 6a00 	vldr	s13, [r3]
  40090e:	ee27 7a26 	vmul.f32	s14, s14, s13
  400912:	ee77 7a87 	vadd.f32	s15, s15, s14
	for (int i=0;i <= LPF->order;i++){
  400916:	3201      	adds	r2, #1
  400918:	6803      	ldr	r3, [r0, #0]
  40091a:	429a      	cmp	r2, r3
  40091c:	dde2      	ble.n	4008e4 <DLPF_Filter+0xc>
	}
	
	LPF->previous_outputs[0] = output;
  40091e:	68c3      	ldr	r3, [r0, #12]
  400920:	edc3 7a00 	vstr	s15, [r3]
	
	//shift values back by one z
	for(int i=LPF->array_size-1; i>0; i--){
  400924:	6842      	ldr	r2, [r0, #4]
  400926:	3a01      	subs	r2, #1
  400928:	2a00      	cmp	r2, #0
  40092a:	dd16      	ble.n	40095a <DLPF_Filter+0x82>
float DLPF_Filter(struct DLPF* LPF, float input){
  40092c:	b430      	push	{r4, r5}
		LPF->previous_inputs[i] = LPF->previous_inputs[i-1];
  40092e:	6884      	ldr	r4, [r0, #8]
  400930:	0091      	lsls	r1, r2, #2
  400932:	1865      	adds	r5, r4, r1
  400934:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  400938:	4413      	add	r3, r2
  40093a:	009b      	lsls	r3, r3, #2
  40093c:	441c      	add	r4, r3
  40093e:	6824      	ldr	r4, [r4, #0]
  400940:	602c      	str	r4, [r5, #0]
		LPF->previous_outputs[i] = LPF->previous_outputs[i-1];
  400942:	68c4      	ldr	r4, [r0, #12]
  400944:	4421      	add	r1, r4
  400946:	4423      	add	r3, r4
  400948:	681b      	ldr	r3, [r3, #0]
  40094a:	600b      	str	r3, [r1, #0]
	for(int i=LPF->array_size-1; i>0; i--){
  40094c:	3a01      	subs	r2, #1
  40094e:	2a00      	cmp	r2, #0
  400950:	dced      	bgt.n	40092e <DLPF_Filter+0x56>
	}
	
	return output;
}
  400952:	ee17 0a90 	vmov	r0, s15
  400956:	bc30      	pop	{r4, r5}
  400958:	4770      	bx	lr
  40095a:	ee17 0a90 	vmov	r0, s15
  40095e:	4770      	bx	lr
  400960:	00000000 	.word	0x00000000

00400964 <EstimateThetaHS>:
}

float EstimateThetaHS(int pos_HS_state, float pos_HS_t1, float *pos_HS_dts){
//Estimate angle from hall sensors
return 0;
}
  400964:	2000      	movs	r0, #0
  400966:	4770      	bx	lr

00400968 <EstimateTheta>:
float EstimateTheta(int pos_HS_state, float pos_HS_t1, float *pos_HS_dts, float pos_ENC_angle){
  400968:	b508      	push	{r3, lr}
  40096a:	ed2d 8b02 	vpush	{d8}
  40096e:	ee08 3a10 	vmov	s16, r3
	theta_e_HS = EstimateThetaHS(pos_HS_state, pos_HS_t1, pos_HS_dts);
  400972:	4b08      	ldr	r3, [pc, #32]	; (400994 <EstimateTheta+0x2c>)
  400974:	4798      	blx	r3
  400976:	4b08      	ldr	r3, [pc, #32]	; (400998 <EstimateTheta+0x30>)
  400978:	6018      	str	r0, [r3, #0]
	theta_e_ENC = pos_ENC_angle*(PP*GR);
  40097a:	eddf 7a08 	vldr	s15, [pc, #32]	; 40099c <EstimateTheta+0x34>
  40097e:	ee68 7a27 	vmul.f32	s15, s16, s15
  400982:	4b07      	ldr	r3, [pc, #28]	; (4009a0 <EstimateTheta+0x38>)
  400984:	edc3 7a00 	vstr	s15, [r3]
}
  400988:	ee17 0a90 	vmov	r0, s15
  40098c:	ecbd 8b02 	vpop	{d8}
  400990:	bd08      	pop	{r3, pc}
  400992:	bf00      	nop
  400994:	00400965 	.word	0x00400965
  400998:	204006a0 	.word	0x204006a0
  40099c:	42960000 	.word	0x42960000
  4009a0:	2040064c 	.word	0x2040064c

004009a4 <PID_init_cts>:




void PID_init_cts(struct PID_instance* PID,float Kp,float Ki,float Kd, float time_step){
	PID->Kd = Kd;
  4009a4:	6083      	str	r3, [r0, #8]
	PID->Ki = Ki;
  4009a6:	6042      	str	r2, [r0, #4]
	PID->Kp = Kp;							//sets gains
  4009a8:	6001      	str	r1, [r0, #0]
	PID->integral_v = 0;
  4009aa:	2300      	movs	r3, #0
  4009ac:	6103      	str	r3, [r0, #16]
	PID->previous_error = 0;
  4009ae:	60c3      	str	r3, [r0, #12]
	PID->is_using_constant_timestep = true;
  4009b0:	2301      	movs	r3, #1
  4009b2:	7603      	strb	r3, [r0, #24]
	PID->time_step = time_step;
  4009b4:	9b00      	ldr	r3, [sp, #0]
  4009b6:	6143      	str	r3, [r0, #20]
  4009b8:	4770      	bx	lr

004009ba <runPID>:
	//if(!PID->is_using_constant_timestep){
		//PID->time_step = getTimeStep();
	//}
	
	float Ap, Ad, Ai;
	float error = ref - feedback;
  4009ba:	ee07 1a90 	vmov	s15, r1
  4009be:	ee07 2a10 	vmov	s14, r2
  4009c2:	ee77 6ac7 	vsub.f32	s13, s15, s14
	
	Ap = error*PID->Kp;
  4009c6:	ed90 7a00 	vldr	s14, [r0]
  4009ca:	ee26 7a87 	vmul.f32	s14, s13, s14
	//Ad = PID->Kd*(error - PID->previous_error)/PID->time_step;
	Ai = PID->Ki*(error*PID->time_step) + PID->integral_v;
  4009ce:	edd0 7a01 	vldr	s15, [r0, #4]
  4009d2:	ed90 6a05 	vldr	s12, [r0, #20]
  4009d6:	ee26 6a86 	vmul.f32	s12, s13, s12
  4009da:	ee67 7a86 	vmul.f32	s15, s15, s12
  4009de:	ed90 6a04 	vldr	s12, [r0, #16]
  4009e2:	ee77 7a86 	vadd.f32	s15, s15, s12
	
	//if( ((Ai>=Ap) & (Ap>=0)) | ((Ai<=Ap) & (Ap<=0)) )   Ai = Ap;		//set anti-windup for integral action
	
	PID->previous_error = error;
  4009e6:	edc0 6a03 	vstr	s13, [r0, #12]
	return (Ap + Ai);		//+optional Ad


	
  4009ea:	ee77 7a27 	vadd.f32	s15, s14, s15
  4009ee:	ee17 0a90 	vmov	r0, s15
  4009f2:	4770      	bx	lr

004009f4 <reconstruct_bus_voltage>:


float reconstruct_bus_voltage(uint32_t raw_voltage_data){
	
	return 0;
}
  4009f4:	2000      	movs	r0, #0
  4009f6:	4770      	bx	lr

004009f8 <raw_data_to_voltage>:
	
	return 0;
}


float raw_data_to_voltage(uint32_t analog_data){
  4009f8:	b510      	push	{r4, lr}
	//12 bit ADCs
	//Vref = 3.3V
	float voltage = (((float) analog_data) / (4096)) * 3.3;
  4009fa:	ee07 0a90 	vmov	s15, r0
  4009fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  400a02:	eddf 7a0b 	vldr	s15, [pc, #44]	; 400a30 <raw_data_to_voltage+0x38>
  400a06:	ee67 7a27 	vmul.f32	s15, s14, s15
  400a0a:	ee17 0a90 	vmov	r0, s15
  400a0e:	4b09      	ldr	r3, [pc, #36]	; (400a34 <raw_data_to_voltage+0x3c>)
  400a10:	4798      	blx	r3
  400a12:	a305      	add	r3, pc, #20	; (adr r3, 400a28 <raw_data_to_voltage+0x30>)
  400a14:	e9d3 2300 	ldrd	r2, r3, [r3]
  400a18:	4c07      	ldr	r4, [pc, #28]	; (400a38 <raw_data_to_voltage+0x40>)
  400a1a:	47a0      	blx	r4
  400a1c:	4b07      	ldr	r3, [pc, #28]	; (400a3c <raw_data_to_voltage+0x44>)
  400a1e:	4798      	blx	r3
	//printf("raw data - %i \t voltage - %f \n",(int) analog_data, voltage);
	return voltage;
  400a20:	bd10      	pop	{r4, pc}
  400a22:	bf00      	nop
  400a24:	f3af 8000 	nop.w
  400a28:	66666666 	.word	0x66666666
  400a2c:	400a6666 	.word	0x400a6666
  400a30:	39800000 	.word	0x39800000
  400a34:	00405045 	.word	0x00405045
  400a38:	004050ed 	.word	0x004050ed
  400a3c:	0040569d 	.word	0x0040569d

00400a40 <calibrate_curr_sensors>:
void calibrate_curr_sensors(void){
  400a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dma_adc_0_enable_for_one_transaction();
  400a42:	4b2e      	ldr	r3, [pc, #184]	; (400afc <calibrate_curr_sensors+0xbc>)
  400a44:	4798      	blx	r3
	dma_adc_1_enable_for_one_transaction();
  400a46:	4b2e      	ldr	r3, [pc, #184]	; (400b00 <calibrate_curr_sensors+0xc0>)
  400a48:	4798      	blx	r3
	delay_ms(1);
  400a4a:	2001      	movs	r0, #1
  400a4c:	4b2d      	ldr	r3, [pc, #180]	; (400b04 <calibrate_curr_sensors+0xc4>)
  400a4e:	4798      	blx	r3
	curr_A_offset = 0;
  400a50:	2300      	movs	r3, #0
  400a52:	4a2d      	ldr	r2, [pc, #180]	; (400b08 <calibrate_curr_sensors+0xc8>)
  400a54:	6013      	str	r3, [r2, #0]
	curr_B_offset = 0;
  400a56:	4a2d      	ldr	r2, [pc, #180]	; (400b0c <calibrate_curr_sensors+0xcc>)
  400a58:	6013      	str	r3, [r2, #0]
	curr_C_offset = 0;
  400a5a:	4a2d      	ldr	r2, [pc, #180]	; (400b10 <calibrate_curr_sensors+0xd0>)
  400a5c:	6013      	str	r3, [r2, #0]
	for(int i =0; i<10; i++){
  400a5e:	2600      	movs	r6, #0
  400a60:	e031      	b.n	400ac6 <calibrate_curr_sensors+0x86>
			dma_adc_0_enable_for_one_transaction();
  400a62:	4b26      	ldr	r3, [pc, #152]	; (400afc <calibrate_curr_sensors+0xbc>)
  400a64:	4798      	blx	r3
			dma_adc_1_enable_for_one_transaction();
  400a66:	4b26      	ldr	r3, [pc, #152]	; (400b00 <calibrate_curr_sensors+0xc0>)
  400a68:	4798      	blx	r3
			delay_ms(1);
  400a6a:	2001      	movs	r0, #1
  400a6c:	4b25      	ldr	r3, [pc, #148]	; (400b04 <calibrate_curr_sensors+0xc4>)
  400a6e:	4798      	blx	r3
		curr_A_offset += raw_data_to_voltage(adc_read(ADC_CURRENT_A));
  400a70:	4f28      	ldr	r7, [pc, #160]	; (400b14 <calibrate_curr_sensors+0xd4>)
  400a72:	2108      	movs	r1, #8
  400a74:	4638      	mov	r0, r7
  400a76:	4d28      	ldr	r5, [pc, #160]	; (400b18 <calibrate_curr_sensors+0xd8>)
  400a78:	47a8      	blx	r5
  400a7a:	4c28      	ldr	r4, [pc, #160]	; (400b1c <calibrate_curr_sensors+0xdc>)
  400a7c:	47a0      	blx	r4
  400a7e:	4b22      	ldr	r3, [pc, #136]	; (400b08 <calibrate_curr_sensors+0xc8>)
  400a80:	edd3 7a00 	vldr	s15, [r3]
  400a84:	ee07 0a10 	vmov	s14, r0
  400a88:	ee77 7a87 	vadd.f32	s15, s15, s14
  400a8c:	edc3 7a00 	vstr	s15, [r3]
		curr_B_offset += raw_data_to_voltage(adc_read(ADC_CURRENT_B));
  400a90:	2102      	movs	r1, #2
  400a92:	4638      	mov	r0, r7
  400a94:	47a8      	blx	r5
  400a96:	47a0      	blx	r4
  400a98:	4b1c      	ldr	r3, [pc, #112]	; (400b0c <calibrate_curr_sensors+0xcc>)
  400a9a:	edd3 7a00 	vldr	s15, [r3]
  400a9e:	ee07 0a10 	vmov	s14, r0
  400aa2:	ee77 7a87 	vadd.f32	s15, s15, s14
  400aa6:	edc3 7a00 	vstr	s15, [r3]
		curr_C_offset += raw_data_to_voltage(adc_read(ADC_CURRENT_C));
  400aaa:	2101      	movs	r1, #1
  400aac:	481c      	ldr	r0, [pc, #112]	; (400b20 <calibrate_curr_sensors+0xe0>)
  400aae:	47a8      	blx	r5
  400ab0:	47a0      	blx	r4
  400ab2:	4b17      	ldr	r3, [pc, #92]	; (400b10 <calibrate_curr_sensors+0xd0>)
  400ab4:	edd3 7a00 	vldr	s15, [r3]
  400ab8:	ee07 0a10 	vmov	s14, r0
  400abc:	ee77 7a87 	vadd.f32	s15, s15, s14
  400ac0:	edc3 7a00 	vstr	s15, [r3]
	for(int i =0; i<10; i++){
  400ac4:	3601      	adds	r6, #1
  400ac6:	2e09      	cmp	r6, #9
  400ac8:	ddcb      	ble.n	400a62 <calibrate_curr_sensors+0x22>
	curr_A_offset /= 10;
  400aca:	4b0f      	ldr	r3, [pc, #60]	; (400b08 <calibrate_curr_sensors+0xc8>)
  400acc:	edd3 6a00 	vldr	s13, [r3]
  400ad0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  400ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  400ad8:	ed83 7a00 	vstr	s14, [r3]
	curr_B_offset /= 10;
  400adc:	4b0b      	ldr	r3, [pc, #44]	; (400b0c <calibrate_curr_sensors+0xcc>)
  400ade:	edd3 6a00 	vldr	s13, [r3]
  400ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  400ae6:	ed83 7a00 	vstr	s14, [r3]
	curr_C_offset /= 10;
  400aea:	4b09      	ldr	r3, [pc, #36]	; (400b10 <calibrate_curr_sensors+0xd0>)
  400aec:	edd3 6a00 	vldr	s13, [r3]
  400af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  400af4:	ed83 7a00 	vstr	s14, [r3]
  400af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400afa:	bf00      	nop
  400afc:	004010a9 	.word	0x004010a9
  400b00:	004011cd 	.word	0x004011cd
  400b04:	00401ecd 	.word	0x00401ecd
  400b08:	20400724 	.word	0x20400724
  400b0c:	20400730 	.word	0x20400730
  400b10:	204006fc 	.word	0x204006fc
  400b14:	2040085c 	.word	0x2040085c
  400b18:	00401479 	.word	0x00401479
  400b1c:	004009f9 	.word	0x004009f9
  400b20:	20400934 	.word	0x20400934
  400b24:	00000000 	.word	0x00000000

00400b28 <reconstruct_curr_A>:
float reconstruct_curr_A(uint32_t raw_current_data){
  400b28:	b510      	push	{r4, lr}
	float I = (raw_data_to_voltage(raw_current_data)   -   curr_A_offset)/CURR_A_SLOPE;
  400b2a:	4b0d      	ldr	r3, [pc, #52]	; (400b60 <reconstruct_curr_A+0x38>)
  400b2c:	4798      	blx	r3
  400b2e:	4b0d      	ldr	r3, [pc, #52]	; (400b64 <reconstruct_curr_A+0x3c>)
  400b30:	edd3 7a00 	vldr	s15, [r3]
  400b34:	ee07 0a10 	vmov	s14, r0
  400b38:	ee77 7a67 	vsub.f32	s15, s14, s15
  400b3c:	ee17 0a90 	vmov	r0, s15
  400b40:	4b09      	ldr	r3, [pc, #36]	; (400b68 <reconstruct_curr_A+0x40>)
  400b42:	4798      	blx	r3
  400b44:	a304      	add	r3, pc, #16	; (adr r3, 400b58 <reconstruct_curr_A+0x30>)
  400b46:	e9d3 2300 	ldrd	r2, r3, [r3]
  400b4a:	4c08      	ldr	r4, [pc, #32]	; (400b6c <reconstruct_curr_A+0x44>)
  400b4c:	47a0      	blx	r4
  400b4e:	4b08      	ldr	r3, [pc, #32]	; (400b70 <reconstruct_curr_A+0x48>)
  400b50:	4798      	blx	r3
}
  400b52:	bd10      	pop	{r4, pc}
  400b54:	f3af 8000 	nop.w
  400b58:	47ae147b 	.word	0x47ae147b
  400b5c:	3f747ae1 	.word	0x3f747ae1
  400b60:	004009f9 	.word	0x004009f9
  400b64:	20400724 	.word	0x20400724
  400b68:	00405045 	.word	0x00405045
  400b6c:	00405341 	.word	0x00405341
  400b70:	0040569d 	.word	0x0040569d
  400b74:	00000000 	.word	0x00000000

00400b78 <reconstruct_curr_B>:
float reconstruct_curr_B(uint32_t raw_current_data){
  400b78:	b510      	push	{r4, lr}
	float I = (raw_data_to_voltage(raw_current_data)   -   curr_B_offset)/CURR_B_SLOPE;
  400b7a:	4b0d      	ldr	r3, [pc, #52]	; (400bb0 <reconstruct_curr_B+0x38>)
  400b7c:	4798      	blx	r3
  400b7e:	4b0d      	ldr	r3, [pc, #52]	; (400bb4 <reconstruct_curr_B+0x3c>)
  400b80:	edd3 7a00 	vldr	s15, [r3]
  400b84:	ee07 0a10 	vmov	s14, r0
  400b88:	ee77 7a67 	vsub.f32	s15, s14, s15
  400b8c:	ee17 0a90 	vmov	r0, s15
  400b90:	4b09      	ldr	r3, [pc, #36]	; (400bb8 <reconstruct_curr_B+0x40>)
  400b92:	4798      	blx	r3
  400b94:	a304      	add	r3, pc, #16	; (adr r3, 400ba8 <reconstruct_curr_B+0x30>)
  400b96:	e9d3 2300 	ldrd	r2, r3, [r3]
  400b9a:	4c08      	ldr	r4, [pc, #32]	; (400bbc <reconstruct_curr_B+0x44>)
  400b9c:	47a0      	blx	r4
  400b9e:	4b08      	ldr	r3, [pc, #32]	; (400bc0 <reconstruct_curr_B+0x48>)
  400ba0:	4798      	blx	r3
}
  400ba2:	bd10      	pop	{r4, pc}
  400ba4:	f3af 8000 	nop.w
  400ba8:	47ae147b 	.word	0x47ae147b
  400bac:	3f747ae1 	.word	0x3f747ae1
  400bb0:	004009f9 	.word	0x004009f9
  400bb4:	20400730 	.word	0x20400730
  400bb8:	00405045 	.word	0x00405045
  400bbc:	00405341 	.word	0x00405341
  400bc0:	0040569d 	.word	0x0040569d
  400bc4:	00000000 	.word	0x00000000

00400bc8 <reconstruct_curr_C>:
float reconstruct_curr_C(uint32_t raw_current_data){		
  400bc8:	b510      	push	{r4, lr}
	float I = (raw_data_to_voltage(raw_current_data)   -   curr_C_offset)/CURR_C_SLOPE;
  400bca:	4b0d      	ldr	r3, [pc, #52]	; (400c00 <reconstruct_curr_C+0x38>)
  400bcc:	4798      	blx	r3
  400bce:	4b0d      	ldr	r3, [pc, #52]	; (400c04 <reconstruct_curr_C+0x3c>)
  400bd0:	edd3 7a00 	vldr	s15, [r3]
  400bd4:	ee07 0a10 	vmov	s14, r0
  400bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
  400bdc:	ee17 0a90 	vmov	r0, s15
  400be0:	4b09      	ldr	r3, [pc, #36]	; (400c08 <reconstruct_curr_C+0x40>)
  400be2:	4798      	blx	r3
  400be4:	a304      	add	r3, pc, #16	; (adr r3, 400bf8 <reconstruct_curr_C+0x30>)
  400be6:	e9d3 2300 	ldrd	r2, r3, [r3]
  400bea:	4c08      	ldr	r4, [pc, #32]	; (400c0c <reconstruct_curr_C+0x44>)
  400bec:	47a0      	blx	r4
  400bee:	4b08      	ldr	r3, [pc, #32]	; (400c10 <reconstruct_curr_C+0x48>)
  400bf0:	4798      	blx	r3
}
  400bf2:	bd10      	pop	{r4, pc}
  400bf4:	f3af 8000 	nop.w
  400bf8:	47ae147b 	.word	0x47ae147b
  400bfc:	3f747ae1 	.word	0x3f747ae1
  400c00:	004009f9 	.word	0x004009f9
  400c04:	204006fc 	.word	0x204006fc
  400c08:	00405045 	.word	0x00405045
  400c0c:	00405341 	.word	0x00405341
  400c10:	0040569d 	.word	0x0040569d

00400c14 <encoder_init>:
		encoder_num_Z_interrupts ++;
	}
	encoder_last_count = encoder_counter_no_offset;
}

void encoder_init(void){
  400c14:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400c16:	4b56      	ldr	r3, [pc, #344]	; (400d70 <encoder_init+0x15c>)
  400c18:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400c1a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400c1e:	d103      	bne.n	400c28 <encoder_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400c20:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400c24:	4b52      	ldr	r3, [pc, #328]	; (400d70 <encoder_init+0x15c>)
  400c26:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400c28:	4b51      	ldr	r3, [pc, #324]	; (400d70 <encoder_init+0x15c>)
  400c2a:	699b      	ldr	r3, [r3, #24]
  400c2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c30:	d103      	bne.n	400c3a <encoder_init+0x26>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400c32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400c36:	4b4e      	ldr	r3, [pc, #312]	; (400d70 <encoder_init+0x15c>)
  400c38:	611a      	str	r2, [r3, #16]
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400c3a:	4b4d      	ldr	r3, [pc, #308]	; (400d70 <encoder_init+0x15c>)
  400c3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400c40:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  400c44:	d104      	bne.n	400c50 <encoder_init+0x3c>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400c46:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400c4a:	4b49      	ldr	r3, [pc, #292]	; (400d70 <encoder_init+0x15c>)
  400c4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400c50:	4b47      	ldr	r3, [pc, #284]	; (400d70 <encoder_init+0x15c>)
  400c52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  400c56:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  400c5a:	d104      	bne.n	400c66 <encoder_init+0x52>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400c5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400c60:	4b43      	ldr	r3, [pc, #268]	; (400d70 <encoder_init+0x15c>)
  400c62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	_pmc_enable_periph_clock(ID_TC3_CHANNEL1);
	
	
	//enable external interrupt on the Z line 
	ext_irq_register(PIO_PB13_IDX,Encoder_Z_Interrupt);
  400c66:	4943      	ldr	r1, [pc, #268]	; (400d74 <encoder_init+0x160>)
  400c68:	202d      	movs	r0, #45	; 0x2d
  400c6a:	4b43      	ldr	r3, [pc, #268]	; (400d78 <encoder_init+0x164>)
  400c6c:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c6e:	4b43      	ldr	r3, [pc, #268]	; (400d7c <encoder_init+0x168>)
  400c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400c74:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400c76:	2240      	movs	r2, #64	; 0x40
  400c78:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c7c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400c84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400c88:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c8c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400c98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400c9c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ca0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400cb0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400cb4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400cb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400cc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400cc4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400cc8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ccc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400cd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400cd8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400cdc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400ce8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400cec:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400cf0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400cf4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400cfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d00:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d04:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400d10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d14:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d18:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400d24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d28:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d2c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400d38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d3c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d40:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400d4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d50:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d54:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400d60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d64:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d68:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400d6c:	bd08      	pop	{r3, pc}
  400d6e:	bf00      	nop
  400d70:	400e0600 	.word	0x400e0600
  400d74:	00400d9d 	.word	0x00400d9d
  400d78:	00401f65 	.word	0x00401f65
  400d7c:	e000e100 	.word	0xe000e100

00400d80 <encoder_get_counter>:
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV(mask)) >> TC_CV_CV_Pos;
}

static inline hri_tc_cv_reg_t hri_tc_read_CV_CV_bf(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV_Msk) >> TC_CV_CV_Pos;
  400d80:	4a05      	ldr	r2, [pc, #20]	; (400d98 <encoder_get_counter+0x18>)
  400d82:	6913      	ldr	r3, [r2, #16]
  400d84:	6d10      	ldr	r0, [r2, #80]	; 0x50
	//if starting offset is 0 (which is the case before it was recorded) then it returns the actual counter
	
	
	//get A (first line) and B (second line) counters
	//note that rising and falling edges could be the other way round. It doesn't matter for the current implementation
	int encoder_counter_no_offset =	  ( int) hri_tc_read_CV_CV_bf(TC0,0) + ( int) hri_tc_read_CV_CV_bf(TC0,1) \
  400d86:	4403      	add	r3, r0
  400d88:	f502 2290 	add.w	r2, r2, #294912	; 0x48000
  400d8c:	6910      	ldr	r0, [r2, #16]
									+ ( int) hri_tc_read_CV_CV_bf(TC3,0) + ( int) hri_tc_read_CV_CV_bf(TC3,1);						
  400d8e:	4403      	add	r3, r0
  400d90:	6d10      	ldr	r0, [r2, #80]	; 0x50
	
	return encoder_counter_no_offset;
}
  400d92:	4418      	add	r0, r3
  400d94:	4770      	bx	lr
  400d96:	bf00      	nop
  400d98:	4000c000 	.word	0x4000c000

00400d9c <Encoder_Z_Interrupt>:
static void Encoder_Z_Interrupt (void){
  400d9c:	b538      	push	{r3, r4, r5, lr}
	int encoder_counter_no_offset = encoder_get_counter();
  400d9e:	4b13      	ldr	r3, [pc, #76]	; (400dec <Encoder_Z_Interrupt+0x50>)
  400da0:	4798      	blx	r3
	if(encoder_counter_no_offset - encoder_last_count > ENCODER_MIN_Z_DELTA || encoder_counter_no_offset - encoder_last_count < -ENCODER_MIN_Z_DELTA){
  400da2:	4b13      	ldr	r3, [pc, #76]	; (400df0 <Encoder_Z_Interrupt+0x54>)
  400da4:	681b      	ldr	r3, [r3, #0]
  400da6:	1ac3      	subs	r3, r0, r3
  400da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  400dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  400db0:	d907      	bls.n	400dc2 <Encoder_Z_Interrupt+0x26>
		if(encoder_num_Z_interrupts == 0){
  400db2:	4b10      	ldr	r3, [pc, #64]	; (400df4 <Encoder_Z_Interrupt+0x58>)
  400db4:	681b      	ldr	r3, [r3, #0]
  400db6:	b93b      	cbnz	r3, 400dc8 <Encoder_Z_Interrupt+0x2c>
			encoder_Z_offset = encoder_counter_no_offset;
  400db8:	4a0f      	ldr	r2, [pc, #60]	; (400df8 <Encoder_Z_Interrupt+0x5c>)
  400dba:	6010      	str	r0, [r2, #0]
		encoder_num_Z_interrupts ++;
  400dbc:	3301      	adds	r3, #1
  400dbe:	4a0d      	ldr	r2, [pc, #52]	; (400df4 <Encoder_Z_Interrupt+0x58>)
  400dc0:	6013      	str	r3, [r2, #0]
	encoder_last_count = encoder_counter_no_offset;
  400dc2:	4b0b      	ldr	r3, [pc, #44]	; (400df0 <Encoder_Z_Interrupt+0x54>)
  400dc4:	6018      	str	r0, [r3, #0]
  400dc6:	bd38      	pop	{r3, r4, r5, pc}
			unsigned int delta = (encoder_counter_no_offset - encoder_Z_offset) & (ENCODER_STEPS - 1);
  400dc8:	4a0b      	ldr	r2, [pc, #44]	; (400df8 <Encoder_Z_Interrupt+0x5c>)
  400dca:	6811      	ldr	r1, [r2, #0]
  400dcc:	1a42      	subs	r2, r0, r1
  400dce:	f3c2 020d 	ubfx	r2, r2, #0, #14
			if( (delta <= ENCODER_MAX_DELTA) || (delta >= ENCODER_STEPS-1 - ENCODER_MAX_DELTA) ){
  400dd2:	1f95      	subs	r5, r2, #6
  400dd4:	f643 74f3 	movw	r4, #16371	; 0x3ff3
  400dd8:	42a5      	cmp	r5, r4
  400dda:	d8ef      	bhi.n	400dbc <Encoder_Z_Interrupt+0x20>
				encoder_Z_offset += delta;
  400ddc:	4411      	add	r1, r2
  400dde:	4c06      	ldr	r4, [pc, #24]	; (400df8 <Encoder_Z_Interrupt+0x5c>)
  400de0:	6021      	str	r1, [r4, #0]
				encoder_Daxis_offset += delta;
  400de2:	4c06      	ldr	r4, [pc, #24]	; (400dfc <Encoder_Z_Interrupt+0x60>)
  400de4:	6821      	ldr	r1, [r4, #0]
  400de6:	440a      	add	r2, r1
  400de8:	6022      	str	r2, [r4, #0]
  400dea:	e7e7      	b.n	400dbc <Encoder_Z_Interrupt+0x20>
  400dec:	00400d81 	.word	0x00400d81
  400df0:	20400734 	.word	0x20400734
  400df4:	20400704 	.word	0x20400704
  400df8:	20400710 	.word	0x20400710
  400dfc:	20400738 	.word	0x20400738

00400e00 <encoder_get_angle>:
void encoder_get_angle(float * angl){
  400e00:	b510      	push	{r4, lr}
  400e02:	4604      	mov	r4, r0
	int encoder_counter_no_offset = encoder_get_counter();
  400e04:	4b0a      	ldr	r3, [pc, #40]	; (400e30 <encoder_get_angle+0x30>)
  400e06:	4798      	blx	r3
	int current_counter = (encoder_counter_no_offset - encoder_Daxis_offset) & (ENCODER_STEPS - 1);
  400e08:	4b0a      	ldr	r3, [pc, #40]	; (400e34 <encoder_get_angle+0x34>)
  400e0a:	681b      	ldr	r3, [r3, #0]
  400e0c:	1ac0      	subs	r0, r0, r3
  400e0e:	f3c0 030d 	ubfx	r3, r0, #0, #14
  400e12:	ee07 3a90 	vmov	s15, r3
	float current_counter_float = (float) current_counter;
  400e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	*angl  = (2 * PI * current_counter_float / (ENCODER_STEPS));
  400e1a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 400e38 <encoder_get_angle+0x38>
  400e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
  400e22:	ed9f 7a06 	vldr	s14, [pc, #24]	; 400e3c <encoder_get_angle+0x3c>
  400e26:	ee67 7a87 	vmul.f32	s15, s15, s14
  400e2a:	edc4 7a00 	vstr	s15, [r4]
  400e2e:	bd10      	pop	{r4, pc}
  400e30:	00400d81 	.word	0x00400d81
  400e34:	20400738 	.word	0x20400738
  400e38:	40c90fdb 	.word	0x40c90fdb
  400e3c:	38800000 	.word	0x38800000

00400e40 <Position_2_Interrupt>:
static void Position_1_Interrupt (void){
	Position_General_Interrupt();
	//printf("POS 1\n");
}

static void Position_2_Interrupt (void){
  400e40:	b430      	push	{r4, r5}
	has_triggered = true;
  400e42:	2201      	movs	r2, #1
  400e44:	4b13      	ldr	r3, [pc, #76]	; (400e94 <Position_2_Interrupt+0x54>)
  400e46:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400e48:	4b13      	ldr	r3, [pc, #76]	; (400e98 <Position_2_Interrupt+0x58>)
  400e4a:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400e4c:	4b13      	ldr	r3, [pc, #76]	; (400e9c <Position_2_Interrupt+0x5c>)
  400e4e:	681b      	ldr	r3, [r3, #0]
  400e50:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400e52:	2b00      	cmp	r3, #0
  400e54:	dd11      	ble.n	400e7a <Position_2_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400e56:	2201      	movs	r2, #1
  400e58:	2a00      	cmp	r2, #0
  400e5a:	dc11      	bgt.n	400e80 <Position_2_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  400e5c:	ee07 3a90 	vmov	s15, r3
  400e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400e64:	eddf 6a0e 	vldr	s13, [pc, #56]	; 400ea0 <Position_2_Interrupt+0x60>
  400e68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400e6c:	4b0d      	ldr	r3, [pc, #52]	; (400ea4 <Position_2_Interrupt+0x64>)
  400e6e:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  400e72:	4b0a      	ldr	r3, [pc, #40]	; (400e9c <Position_2_Interrupt+0x5c>)
  400e74:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	//printf("POS 2\n");
}
  400e76:	bc30      	pop	{r4, r5}
  400e78:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400e7a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  400e7e:	e7ea      	b.n	400e56 <Position_2_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400e80:	1e54      	subs	r4, r2, #1
  400e82:	4908      	ldr	r1, [pc, #32]	; (400ea4 <Position_2_Interrupt+0x64>)
  400e84:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400e88:	682d      	ldr	r5, [r5, #0]
  400e8a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400e8e:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400e90:	4622      	mov	r2, r4
  400e92:	e7e1      	b.n	400e58 <Position_2_Interrupt+0x18>
  400e94:	20400700 	.word	0x20400700
  400e98:	e000e010 	.word	0xe000e010
  400e9c:	2040071c 	.word	0x2040071c
  400ea0:	43960000 	.word	0x43960000
  400ea4:	20400714 	.word	0x20400714

00400ea8 <Position_3_Interrupt>:
int cntr = 0;
static void Position_3_Interrupt (void){
  400ea8:	b430      	push	{r4, r5}
	has_triggered = true;
  400eaa:	2201      	movs	r2, #1
  400eac:	4b13      	ldr	r3, [pc, #76]	; (400efc <Position_3_Interrupt+0x54>)
  400eae:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400eb0:	4b13      	ldr	r3, [pc, #76]	; (400f00 <Position_3_Interrupt+0x58>)
  400eb2:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400eb4:	4b13      	ldr	r3, [pc, #76]	; (400f04 <Position_3_Interrupt+0x5c>)
  400eb6:	681b      	ldr	r3, [r3, #0]
  400eb8:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400eba:	2b00      	cmp	r3, #0
  400ebc:	dd11      	ble.n	400ee2 <Position_3_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400ebe:	2201      	movs	r2, #1
  400ec0:	2a00      	cmp	r2, #0
  400ec2:	dc11      	bgt.n	400ee8 <Position_3_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  400ec4:	ee07 3a90 	vmov	s15, r3
  400ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400ecc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 400f08 <Position_3_Interrupt+0x60>
  400ed0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400ed4:	4b0d      	ldr	r3, [pc, #52]	; (400f0c <Position_3_Interrupt+0x64>)
  400ed6:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  400eda:	4b0a      	ldr	r3, [pc, #40]	; (400f04 <Position_3_Interrupt+0x5c>)
  400edc:	6018      	str	r0, [r3, #0]
		
			printf("%f\n",angleee);
		}
	}
	*/
}
  400ede:	bc30      	pop	{r4, r5}
  400ee0:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400ee2:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  400ee6:	e7ea      	b.n	400ebe <Position_3_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400ee8:	1e54      	subs	r4, r2, #1
  400eea:	4908      	ldr	r1, [pc, #32]	; (400f0c <Position_3_Interrupt+0x64>)
  400eec:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400ef0:	682d      	ldr	r5, [r5, #0]
  400ef2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400ef6:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400ef8:	4622      	mov	r2, r4
  400efa:	e7e1      	b.n	400ec0 <Position_3_Interrupt+0x18>
  400efc:	20400700 	.word	0x20400700
  400f00:	e000e010 	.word	0xe000e010
  400f04:	2040071c 	.word	0x2040071c
  400f08:	43960000 	.word	0x43960000
  400f0c:	20400714 	.word	0x20400714

00400f10 <Position_1_Interrupt>:
static void Position_1_Interrupt (void){
  400f10:	b430      	push	{r4, r5}
	has_triggered = true;
  400f12:	2201      	movs	r2, #1
  400f14:	4b13      	ldr	r3, [pc, #76]	; (400f64 <Position_1_Interrupt+0x54>)
  400f16:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400f18:	4b13      	ldr	r3, [pc, #76]	; (400f68 <Position_1_Interrupt+0x58>)
  400f1a:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400f1c:	4b13      	ldr	r3, [pc, #76]	; (400f6c <Position_1_Interrupt+0x5c>)
  400f1e:	681b      	ldr	r3, [r3, #0]
  400f20:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400f22:	2b00      	cmp	r3, #0
  400f24:	dd11      	ble.n	400f4a <Position_1_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400f26:	2201      	movs	r2, #1
  400f28:	2a00      	cmp	r2, #0
  400f2a:	dc11      	bgt.n	400f50 <Position_1_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  400f2c:	ee07 3a90 	vmov	s15, r3
  400f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400f34:	eddf 6a0e 	vldr	s13, [pc, #56]	; 400f70 <Position_1_Interrupt+0x60>
  400f38:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400f3c:	4b0d      	ldr	r3, [pc, #52]	; (400f74 <Position_1_Interrupt+0x64>)
  400f3e:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  400f42:	4b0a      	ldr	r3, [pc, #40]	; (400f6c <Position_1_Interrupt+0x5c>)
  400f44:	6018      	str	r0, [r3, #0]
}
  400f46:	bc30      	pop	{r4, r5}
  400f48:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400f4a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  400f4e:	e7ea      	b.n	400f26 <Position_1_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400f50:	1e54      	subs	r4, r2, #1
  400f52:	4908      	ldr	r1, [pc, #32]	; (400f74 <Position_1_Interrupt+0x64>)
  400f54:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400f58:	682d      	ldr	r5, [r5, #0]
  400f5a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400f5e:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400f60:	4622      	mov	r2, r4
  400f62:	e7e1      	b.n	400f28 <Position_1_Interrupt+0x18>
  400f64:	20400700 	.word	0x20400700
  400f68:	e000e010 	.word	0xe000e010
  400f6c:	2040071c 	.word	0x2040071c
  400f70:	43960000 	.word	0x43960000
  400f74:	20400714 	.word	0x20400714

00400f78 <pos_sens_init>:

void pos_sens_init (void){
  400f78:	b510      	push	{r4, lr}
	//set interrupt handlers
	ext_irq_register(PIO_PD19_IDX, Position_3_Interrupt);		//POS 3
  400f7a:	4919      	ldr	r1, [pc, #100]	; (400fe0 <pos_sens_init+0x68>)
  400f7c:	2073      	movs	r0, #115	; 0x73
  400f7e:	4c19      	ldr	r4, [pc, #100]	; (400fe4 <pos_sens_init+0x6c>)
  400f80:	47a0      	blx	r4
	ext_irq_register(PIO_PA2_IDX, Position_2_Interrupt);		//POS 2
  400f82:	4919      	ldr	r1, [pc, #100]	; (400fe8 <pos_sens_init+0x70>)
  400f84:	2002      	movs	r0, #2
  400f86:	47a0      	blx	r4
	ext_irq_register(PIO_PA5_IDX, Position_1_Interrupt);		//POS 1
  400f88:	4918      	ldr	r1, [pc, #96]	; (400fec <pos_sens_init+0x74>)
  400f8a:	2005      	movs	r0, #5
  400f8c:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400f8e:	4b18      	ldr	r3, [pc, #96]	; (400ff0 <pos_sens_init+0x78>)
  400f90:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400f94:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400f96:	2220      	movs	r2, #32
  400f98:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400f9c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400fa0:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400fa2:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ	(PIOD_IRQn);
	NVIC_SetPriority(PIOD_IRQn, IRQ_PRIORITY_POSITION_SENS);

	
	//SysTick starting from 0
	pos_sens_last_SysTick_count = 0;
  400fa6:	2200      	movs	r2, #0
  400fa8:	4b12      	ldr	r3, [pc, #72]	; (400ff4 <pos_sens_init+0x7c>)
  400faa:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
  400fac:	4b12      	ldr	r3, [pc, #72]	; (400ff8 <pos_sens_init+0x80>)
  400fae:	609a      	str	r2, [r3, #8]
	//make the load value max, so that the overflows are as rare as possible
	SysTick->LOAD = (0xFFFFFF);
  400fb0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  400fb4:	6059      	str	r1, [r3, #4]

	this means that the moment we transition to state (POS1=1, POS2=0 POS3=0) we are at 0 electrical degrees
	*/

	// sector_lookup_table[POS3][POS2][POS1];
	sector_lookup_table[0][0][1] = 1;
  400fb6:	4b11      	ldr	r3, [pc, #68]	; (400ffc <pos_sens_init+0x84>)
  400fb8:	2101      	movs	r1, #1
  400fba:	6059      	str	r1, [r3, #4]
	sector_lookup_table[0][1][1] = 2;
  400fbc:	2102      	movs	r1, #2
  400fbe:	60d9      	str	r1, [r3, #12]
	sector_lookup_table[0][1][0] = 3;
  400fc0:	2103      	movs	r1, #3
  400fc2:	6099      	str	r1, [r3, #8]
	sector_lookup_table[1][1][0] = 4;
  400fc4:	2104      	movs	r1, #4
  400fc6:	6199      	str	r1, [r3, #24]
	sector_lookup_table[1][0][0] = 5;
  400fc8:	2105      	movs	r1, #5
  400fca:	6119      	str	r1, [r3, #16]
	sector_lookup_table[1][0][1] = 6;
  400fcc:	2106      	movs	r1, #6
  400fce:	6159      	str	r1, [r3, #20]
	//Error states
	sector_lookup_table[0][0][0] = -1;
  400fd0:	f04f 31ff 	mov.w	r1, #4294967295
  400fd4:	6019      	str	r1, [r3, #0]
	sector_lookup_table[1][1][1] = -1;
  400fd6:	61d9      	str	r1, [r3, #28]
	
	has_triggered = false;
  400fd8:	4b09      	ldr	r3, [pc, #36]	; (401000 <pos_sens_init+0x88>)
  400fda:	701a      	strb	r2, [r3, #0]
  400fdc:	bd10      	pop	{r4, pc}
  400fde:	bf00      	nop
  400fe0:	00400ea9 	.word	0x00400ea9
  400fe4:	00401f65 	.word	0x00401f65
  400fe8:	00400e41 	.word	0x00400e41
  400fec:	00400f11 	.word	0x00400f11
  400ff0:	e000e100 	.word	0xe000e100
  400ff4:	2040071c 	.word	0x2040071c
  400ff8:	e000e010 	.word	0xe000e010
  400ffc:	204006d8 	.word	0x204006d8
  401000:	20400700 	.word	0x20400700

00401004 <get_Data_Pos>:
}

//returns time spent in previous sectors
// which sector we are at currently (see above for position convention)
// how much time has elapsed since we entered this sector
void get_Data_Pos (float * previous_deltas, int * current_sector, float * time_in_current_sector){
  401004:	b570      	push	{r4, r5, r6, lr}
	//null checking variable to see if a write has occurred
	has_triggered = false;
  401006:	2400      	movs	r4, #0
  401008:	4b1d      	ldr	r3, [pc, #116]	; (401080 <get_Data_Pos+0x7c>)
  40100a:	701c      	strb	r4, [r3, #0]
	
	
	//get systick value immediately for most accurate result
	int current_systick = SysTick->VAL;
  40100c:	4b1d      	ldr	r3, [pc, #116]	; (401084 <get_Data_Pos+0x80>)
  40100e:	689c      	ldr	r4, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  401010:	4b1d      	ldr	r3, [pc, #116]	; (401088 <get_Data_Pos+0x84>)
  401012:	681b      	ldr	r3, [r3, #0]
  401014:	1b1b      	subs	r3, r3, r4
	
	//if there was an overflow, account for it
	//NB this can only handle one overflow at max <=> if systick frequency < interrupt frequency timing will be very inaccurate
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  401016:	2b00      	cmp	r3, #0
  401018:	dd0b      	ble.n	401032 <get_Data_Pos+0x2e>
	
	//systick clock frequency equals MCU clock at 300MHz
	(*time_in_current_sector) = (float) delta / 300;
  40101a:	ee07 3a90 	vmov	s15, r3
  40101e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  401022:	eddf 6a1a 	vldr	s13, [pc, #104]	; 40108c <get_Data_Pos+0x88>
  401026:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  40102a:	ed82 7a00 	vstr	s14, [r2]
	
	
	//copy data over
	for (int i = 0 ; i < POS_SENS_DELTAS_SIZE; i++){
  40102e:	2300      	movs	r3, #0
  401030:	e009      	b.n	401046 <get_Data_Pos+0x42>
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  401032:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  401036:	e7f0      	b.n	40101a <get_Data_Pos+0x16>
		previous_deltas[i] = pos_sens_deltas[i];
  401038:	009d      	lsls	r5, r3, #2
  40103a:	1946      	adds	r6, r0, r5
  40103c:	4c14      	ldr	r4, [pc, #80]	; (401090 <get_Data_Pos+0x8c>)
  40103e:	442c      	add	r4, r5
  401040:	6824      	ldr	r4, [r4, #0]
  401042:	6034      	str	r4, [r6, #0]
	for (int i = 0 ; i < POS_SENS_DELTAS_SIZE; i++){
  401044:	3301      	adds	r3, #1
  401046:	2b01      	cmp	r3, #1
  401048:	ddf6      	ble.n	401038 <get_Data_Pos+0x34>
	return tmp;
}

static inline hri_pio_pdsr_reg_t hri_pio_read_PDSR_reg(const void *const hw)
{
	return ((Pio *)hw)->PIO_PDSR;
  40104a:	4b12      	ldr	r3, [pc, #72]	; (401094 <get_Data_Pos+0x90>)
  40104c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
  40104e:	f3c5 45c0 	ubfx	r5, r5, #19, #1
  401052:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  401056:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  401058:	f3c4 0480 	ubfx	r4, r4, #2, #1
  40105c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40105e:	f3c3 1340 	ubfx	r3, r3, #5, #1
	}
	
	//get which sector we are in
	(*current_sector) = sector_lookup_table	[gpio_get_pin_level(PIN_GPIO_POS_3)]\
											[gpio_get_pin_level(PIN_GPIO_POS_2)]\
											[gpio_get_pin_level(PIN_GPIO_POS_1)];
  401062:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  401066:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  40106a:	4c0b      	ldr	r4, [pc, #44]	; (401098 <get_Data_Pos+0x94>)
  40106c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	(*current_sector) = sector_lookup_table	[gpio_get_pin_level(PIN_GPIO_POS_3)]\
  401070:	600b      	str	r3, [r1, #0]
											
											
	if(has_triggered){
  401072:	4b03      	ldr	r3, [pc, #12]	; (401080 <get_Data_Pos+0x7c>)
  401074:	781b      	ldrb	r3, [r3, #0]
  401076:	b903      	cbnz	r3, 40107a <get_Data_Pos+0x76>
  401078:	bd70      	pop	{r4, r5, r6, pc}
		// this means the value of has_triggered was modified while we were reading the data <=> retake reading
		// since data writes are rare there is no chance of a long wait on the recursive function
		get_Data_Pos (previous_deltas, current_sector, time_in_current_sector);
  40107a:	f7ff ffc3 	bl	401004 <get_Data_Pos>
	}

  40107e:	e7fb      	b.n	401078 <get_Data_Pos+0x74>
  401080:	20400700 	.word	0x20400700
  401084:	e000e010 	.word	0xe000e010
  401088:	2040071c 	.word	0x2040071c
  40108c:	43960000 	.word	0x43960000
  401090:	20400714 	.word	0x20400714
  401094:	400e1400 	.word	0x400e1400
  401098:	204006d8 	.word	0x204006d8

0040109c <enable_control>:



//enables calling the control loop from the DMA
void enable_control(void){
	is_control_enabled = true;
  40109c:	2201      	movs	r2, #1
  40109e:	4b01      	ldr	r3, [pc, #4]	; (4010a4 <enable_control+0x8>)
  4010a0:	701a      	strb	r2, [r3, #0]
  4010a2:	4770      	bx	lr
  4010a4:	204006f8 	.word	0x204006f8

004010a8 <dma_adc_0_enable_for_one_transaction>:
	
	has_0_triggered = false;
	has_1_triggered = false;
}

void dma_adc_0_enable_for_one_transaction(void){
  4010a8:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  4010aa:	4906      	ldr	r1, [pc, #24]	; (4010c4 <dma_adc_0_enable_for_one_transaction+0x1c>)
  4010ac:	2000      	movs	r0, #0
  4010ae:	4b06      	ldr	r3, [pc, #24]	; (4010c8 <dma_adc_0_enable_for_one_transaction+0x20>)
  4010b0:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  4010b2:	2118      	movs	r1, #24
  4010b4:	2000      	movs	r0, #0
  4010b6:	4b05      	ldr	r3, [pc, #20]	; (4010cc <dma_adc_0_enable_for_one_transaction+0x24>)
  4010b8:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  4010ba:	2101      	movs	r1, #1
  4010bc:	2000      	movs	r0, #0
  4010be:	4b04      	ldr	r3, [pc, #16]	; (4010d0 <dma_adc_0_enable_for_one_transaction+0x28>)
  4010c0:	4798      	blx	r3
  4010c2:	bd08      	pop	{r3, pc}
  4010c4:	20400240 	.word	0x20400240
  4010c8:	00403409 	.word	0x00403409
  4010cc:	00403429 	.word	0x00403429
  4010d0:	00403441 	.word	0x00403441

004010d4 <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  4010d4:	b508      	push	{r3, lr}
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t)addr;
  4010d6:	4a31      	ldr	r2, [pc, #196]	; (40119c <dma_adc_0_callback+0xc8>)
  __ASM volatile ("dsb 0xF":::"memory");
  4010d8:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
  4010dc:	2320      	movs	r3, #32
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
  4010de:	2b00      	cmp	r3, #0
  4010e0:	dc08      	bgt.n	4010f4 <dma_adc_0_callback+0x20>
  4010e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4010e6:	f3bf 8f6f 	isb	sy
	has_0_triggered = true;
  4010ea:	2201      	movs	r2, #1
  4010ec:	4b2c      	ldr	r3, [pc, #176]	; (4011a0 <dma_adc_0_callback+0xcc>)
  4010ee:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  4010f0:	2300      	movs	r3, #0
  4010f2:	e010      	b.n	401116 <dma_adc_0_callback+0x42>
      SCB->DCIMVAC = op_addr;
  4010f4:	492b      	ldr	r1, [pc, #172]	; (4011a4 <dma_adc_0_callback+0xd0>)
  4010f6:	f8c1 225c 	str.w	r2, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
  4010fa:	3220      	adds	r2, #32
      op_size -=           linesize;
  4010fc:	3b20      	subs	r3, #32
  4010fe:	e7ee      	b.n	4010de <dma_adc_0_callback+0xa>
				raw_data = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  401100:	b292      	uxth	r2, r2
				currents_int[1]= (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  401102:	4929      	ldr	r1, [pc, #164]	; (4011a8 <dma_adc_0_callback+0xd4>)
  401104:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  401106:	4925      	ldr	r1, [pc, #148]	; (40119c <dma_adc_0_callback+0xc8>)
  401108:	f891 2080 	ldrb.w	r2, [r1, #128]	; 0x80
  40110c:	f042 0202 	orr.w	r2, r2, #2
  401110:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  401114:	3301      	adds	r3, #1
  401116:	2b05      	cmp	r3, #5
  401118:	dc15      	bgt.n	401146 <dma_adc_0_callback+0x72>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  40111a:	4a20      	ldr	r2, [pc, #128]	; (40119c <dma_adc_0_callback+0xc8>)
  40111c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  401120:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  401124:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  401128:	d0ea      	beq.n	401100 <dma_adc_0_callback+0x2c>
  40112a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40112e:	d1f1      	bne.n	401114 <dma_adc_0_callback+0x40>
				currents_int[0]= (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  401130:	b292      	uxth	r2, r2
  401132:	491d      	ldr	r1, [pc, #116]	; (4011a8 <dma_adc_0_callback+0xd4>)
  401134:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  401136:	4919      	ldr	r1, [pc, #100]	; (40119c <dma_adc_0_callback+0xc8>)
  401138:	f891 2080 	ldrb.w	r2, [r1, #128]	; 0x80
  40113c:	f042 0201 	orr.w	r2, r2, #1
  401140:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
				break;
  401144:	e7e6      	b.n	401114 <dma_adc_0_callback+0x40>
	if(is_dma_adc_0_continuous){
  401146:	4b19      	ldr	r3, [pc, #100]	; (4011ac <dma_adc_0_callback+0xd8>)
  401148:	781b      	ldrb	r3, [r3, #0]
  40114a:	b94b      	cbnz	r3, 401160 <dma_adc_0_callback+0x8c>
	time_delta_adc_0 = time_get_delta_us();
  40114c:	4b18      	ldr	r3, [pc, #96]	; (4011b0 <dma_adc_0_callback+0xdc>)
  40114e:	4798      	blx	r3
  401150:	4b18      	ldr	r3, [pc, #96]	; (4011b4 <dma_adc_0_callback+0xe0>)
  401152:	6018      	str	r0, [r3, #0]
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  401154:	4b11      	ldr	r3, [pc, #68]	; (40119c <dma_adc_0_callback+0xc8>)
  401156:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
  40115a:	2b0f      	cmp	r3, #15
  40115c:	d003      	beq.n	401166 <dma_adc_0_callback+0x92>
  40115e:	bd08      	pop	{r3, pc}
		dma_adc_0_enable_for_one_transaction();
  401160:	4b15      	ldr	r3, [pc, #84]	; (4011b8 <dma_adc_0_callback+0xe4>)
  401162:	4798      	blx	r3
  401164:	e7f2      	b.n	40114c <dma_adc_0_callback+0x78>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  401166:	4b15      	ldr	r3, [pc, #84]	; (4011bc <dma_adc_0_callback+0xe8>)
  401168:	781b      	ldrb	r3, [r3, #0]
  40116a:	2b00      	cmp	r3, #0
  40116c:	d0f7      	beq.n	40115e <dma_adc_0_callback+0x8a>
		adc_cntr++;
  40116e:	4a14      	ldr	r2, [pc, #80]	; (4011c0 <dma_adc_0_callback+0xec>)
  401170:	6813      	ldr	r3, [r2, #0]
  401172:	3301      	adds	r3, #1
  401174:	6013      	str	r3, [r2, #0]
		if(adc_cntr == 12000){
  401176:	f642 62e0 	movw	r2, #12000	; 0x2ee0
  40117a:	4293      	cmp	r3, r2
  40117c:	d009      	beq.n	401192 <dma_adc_0_callback+0xbe>
		ready_values = 0;
  40117e:	2200      	movs	r2, #0
  401180:	4b06      	ldr	r3, [pc, #24]	; (40119c <dma_adc_0_callback+0xc8>)
  401182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		start_control_loop_dummy((int *) &currents_int, voltage_int);
  401186:	4b0f      	ldr	r3, [pc, #60]	; (4011c4 <dma_adc_0_callback+0xf0>)
  401188:	6819      	ldr	r1, [r3, #0]
  40118a:	4807      	ldr	r0, [pc, #28]	; (4011a8 <dma_adc_0_callback+0xd4>)
  40118c:	4b0e      	ldr	r3, [pc, #56]	; (4011c8 <dma_adc_0_callback+0xf4>)
  40118e:	4798      	blx	r3
}
  401190:	e7e5      	b.n	40115e <dma_adc_0_callback+0x8a>
			adc_cntr=0;
  401192:	2200      	movs	r2, #0
  401194:	4b0a      	ldr	r3, [pc, #40]	; (4011c0 <dma_adc_0_callback+0xec>)
  401196:	601a      	str	r2, [r3, #0]
  401198:	e7f1      	b.n	40117e <dma_adc_0_callback+0xaa>
  40119a:	bf00      	nop
  40119c:	20400240 	.word	0x20400240
  4011a0:	20400728 	.word	0x20400728
  4011a4:	e000ed00 	.word	0xe000ed00
  4011a8:	20400758 	.word	0x20400758
  4011ac:	2040074c 	.word	0x2040074c
  4011b0:	00401659 	.word	0x00401659
  4011b4:	20400720 	.word	0x20400720
  4011b8:	004010a9 	.word	0x004010a9
  4011bc:	204006f8 	.word	0x204006f8
  4011c0:	20400750 	.word	0x20400750
  4011c4:	20400770 	.word	0x20400770
  4011c8:	004006f9 	.word	0x004006f9

004011cc <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  4011cc:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  4011ce:	4906      	ldr	r1, [pc, #24]	; (4011e8 <dma_adc_1_enable_for_one_transaction+0x1c>)
  4011d0:	2001      	movs	r0, #1
  4011d2:	4b06      	ldr	r3, [pc, #24]	; (4011ec <dma_adc_1_enable_for_one_transaction+0x20>)
  4011d4:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  4011d6:	2110      	movs	r1, #16
  4011d8:	2001      	movs	r0, #1
  4011da:	4b05      	ldr	r3, [pc, #20]	; (4011f0 <dma_adc_1_enable_for_one_transaction+0x24>)
  4011dc:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  4011de:	2101      	movs	r1, #1
  4011e0:	4608      	mov	r0, r1
  4011e2:	4b04      	ldr	r3, [pc, #16]	; (4011f4 <dma_adc_1_enable_for_one_transaction+0x28>)
  4011e4:	4798      	blx	r3
  4011e6:	bd08      	pop	{r3, pc}
  4011e8:	204002e0 	.word	0x204002e0
  4011ec:	00403409 	.word	0x00403409
  4011f0:	00403429 	.word	0x00403429
  4011f4:	00403441 	.word	0x00403441

004011f8 <dma_adc_1_callback>:
static void dma_adc_1_callback(struct _dma_resource *resource){
  4011f8:	b508      	push	{r3, lr}
    uint32_t op_addr = (uint32_t)addr;
  4011fa:	4a30      	ldr	r2, [pc, #192]	; (4012bc <dma_adc_1_callback+0xc4>)
  __ASM volatile ("dsb 0xF":::"memory");
  4011fc:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
  401200:	2320      	movs	r3, #32
    while (op_size > 0) {
  401202:	2b00      	cmp	r3, #0
  401204:	dc08      	bgt.n	401218 <dma_adc_1_callback+0x20>
  401206:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40120a:	f3bf 8f6f 	isb	sy
	has_1_triggered = true;
  40120e:	2201      	movs	r2, #1
  401210:	4b2b      	ldr	r3, [pc, #172]	; (4012c0 <dma_adc_1_callback+0xc8>)
  401212:	701a      	strb	r2, [r3, #0]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  401214:	2300      	movs	r3, #0
  401216:	e010      	b.n	40123a <dma_adc_1_callback+0x42>
      SCB->DCIMVAC = op_addr;
  401218:	492a      	ldr	r1, [pc, #168]	; (4012c4 <dma_adc_1_callback+0xcc>)
  40121a:	f8c1 225c 	str.w	r2, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
  40121e:	3220      	adds	r2, #32
      op_size -=           linesize;
  401220:	3b20      	subs	r3, #32
  401222:	e7ee      	b.n	401202 <dma_adc_1_callback+0xa>
				currents_int[2]= (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  401224:	b292      	uxth	r2, r2
  401226:	4928      	ldr	r1, [pc, #160]	; (4012c8 <dma_adc_1_callback+0xd0>)
  401228:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  40122a:	4928      	ldr	r1, [pc, #160]	; (4012cc <dma_adc_1_callback+0xd4>)
  40122c:	f891 2080 	ldrb.w	r2, [r1, #128]	; 0x80
  401230:	f042 0204 	orr.w	r2, r2, #4
  401234:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  401238:	3301      	adds	r3, #1
  40123a:	2b03      	cmp	r3, #3
  40123c:	dc14      	bgt.n	401268 <dma_adc_1_callback+0x70>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  40123e:	4a23      	ldr	r2, [pc, #140]	; (4012cc <dma_adc_1_callback+0xd4>)
  401240:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  401244:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
  401248:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  40124c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  401250:	d0e8      	beq.n	401224 <dma_adc_1_callback+0x2c>
  401252:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  401256:	d1ef      	bne.n	401238 <dma_adc_1_callback+0x40>
				ready_values |= (1<<3);
  401258:	491c      	ldr	r1, [pc, #112]	; (4012cc <dma_adc_1_callback+0xd4>)
  40125a:	f891 2080 	ldrb.w	r2, [r1, #128]	; 0x80
  40125e:	f042 0208 	orr.w	r2, r2, #8
  401262:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
				break;
  401266:	e7e7      	b.n	401238 <dma_adc_1_callback+0x40>
	if(is_dma_adc_1_continuous){
  401268:	4b19      	ldr	r3, [pc, #100]	; (4012d0 <dma_adc_1_callback+0xd8>)
  40126a:	781b      	ldrb	r3, [r3, #0]
  40126c:	b94b      	cbnz	r3, 401282 <dma_adc_1_callback+0x8a>
	time_delta_adc_1 = time_get_delta_us();
  40126e:	4b19      	ldr	r3, [pc, #100]	; (4012d4 <dma_adc_1_callback+0xdc>)
  401270:	4798      	blx	r3
  401272:	4b19      	ldr	r3, [pc, #100]	; (4012d8 <dma_adc_1_callback+0xe0>)
  401274:	6018      	str	r0, [r3, #0]
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  401276:	4b15      	ldr	r3, [pc, #84]	; (4012cc <dma_adc_1_callback+0xd4>)
  401278:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
  40127c:	2b0f      	cmp	r3, #15
  40127e:	d003      	beq.n	401288 <dma_adc_1_callback+0x90>
  401280:	bd08      	pop	{r3, pc}
		dma_adc_1_enable_for_one_transaction();
  401282:	4b16      	ldr	r3, [pc, #88]	; (4012dc <dma_adc_1_callback+0xe4>)
  401284:	4798      	blx	r3
  401286:	e7f2      	b.n	40126e <dma_adc_1_callback+0x76>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  401288:	4b15      	ldr	r3, [pc, #84]	; (4012e0 <dma_adc_1_callback+0xe8>)
  40128a:	781b      	ldrb	r3, [r3, #0]
  40128c:	2b00      	cmp	r3, #0
  40128e:	d0f7      	beq.n	401280 <dma_adc_1_callback+0x88>
		adc_cntr++;
  401290:	4a14      	ldr	r2, [pc, #80]	; (4012e4 <dma_adc_1_callback+0xec>)
  401292:	6813      	ldr	r3, [r2, #0]
  401294:	3301      	adds	r3, #1
  401296:	6013      	str	r3, [r2, #0]
		if(adc_cntr == 12000){
  401298:	f642 62e0 	movw	r2, #12000	; 0x2ee0
  40129c:	4293      	cmp	r3, r2
  40129e:	d009      	beq.n	4012b4 <dma_adc_1_callback+0xbc>
		ready_values = 0;
  4012a0:	2200      	movs	r2, #0
  4012a2:	4b0a      	ldr	r3, [pc, #40]	; (4012cc <dma_adc_1_callback+0xd4>)
  4012a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		start_control_loop_dummy((int *) &currents_int, voltage_int);
  4012a8:	4b0f      	ldr	r3, [pc, #60]	; (4012e8 <dma_adc_1_callback+0xf0>)
  4012aa:	6819      	ldr	r1, [r3, #0]
  4012ac:	4806      	ldr	r0, [pc, #24]	; (4012c8 <dma_adc_1_callback+0xd0>)
  4012ae:	4b0f      	ldr	r3, [pc, #60]	; (4012ec <dma_adc_1_callback+0xf4>)
  4012b0:	4798      	blx	r3
}
  4012b2:	e7e5      	b.n	401280 <dma_adc_1_callback+0x88>
			adc_cntr=0;
  4012b4:	2200      	movs	r2, #0
  4012b6:	4b0b      	ldr	r3, [pc, #44]	; (4012e4 <dma_adc_1_callback+0xec>)
  4012b8:	601a      	str	r2, [r3, #0]
  4012ba:	e7f1      	b.n	4012a0 <dma_adc_1_callback+0xa8>
  4012bc:	204002e0 	.word	0x204002e0
  4012c0:	204006f9 	.word	0x204006f9
  4012c4:	e000ed00 	.word	0xe000ed00
  4012c8:	20400758 	.word	0x20400758
  4012cc:	20400240 	.word	0x20400240
  4012d0:	20400740 	.word	0x20400740
  4012d4:	00401659 	.word	0x00401659
  4012d8:	20400744 	.word	0x20400744
  4012dc:	004011cd 	.word	0x004011cd
  4012e0:	204006f8 	.word	0x204006f8
  4012e4:	20400750 	.word	0x20400750
  4012e8:	20400770 	.word	0x20400770
  4012ec:	004006f9 	.word	0x004006f9

004012f0 <dma_adc_0_enable_continuously>:
}

void dma_adc_0_enable_continuously(void){
  4012f0:	b508      	push	{r3, lr}
	is_dma_adc_0_continuous = true;
  4012f2:	2201      	movs	r2, #1
  4012f4:	4b02      	ldr	r3, [pc, #8]	; (401300 <dma_adc_0_enable_continuously+0x10>)
  4012f6:	701a      	strb	r2, [r3, #0]
	dma_adc_0_enable_for_one_transaction();
  4012f8:	4b02      	ldr	r3, [pc, #8]	; (401304 <dma_adc_0_enable_continuously+0x14>)
  4012fa:	4798      	blx	r3
  4012fc:	bd08      	pop	{r3, pc}
  4012fe:	bf00      	nop
  401300:	2040074c 	.word	0x2040074c
  401304:	004010a9 	.word	0x004010a9

00401308 <dma_adc_1_enable_continuously>:
}
void dma_adc_1_enable_continuously(void){
  401308:	b508      	push	{r3, lr}
	is_dma_adc_1_continuous = true;
  40130a:	2201      	movs	r2, #1
  40130c:	4b02      	ldr	r3, [pc, #8]	; (401318 <dma_adc_1_enable_continuously+0x10>)
  40130e:	701a      	strb	r2, [r3, #0]
	dma_adc_1_enable_for_one_transaction();
  401310:	4b02      	ldr	r3, [pc, #8]	; (40131c <dma_adc_1_enable_continuously+0x14>)
  401312:	4798      	blx	r3
  401314:	bd08      	pop	{r3, pc}
  401316:	bf00      	nop
  401318:	20400740 	.word	0x20400740
  40131c:	004011cd 	.word	0x004011cd

00401320 <dma_adc_0_disable_continuously>:
}

void dma_adc_0_disable_continuously(void){
	is_dma_adc_0_continuous = false;
  401320:	2200      	movs	r2, #0
  401322:	4b01      	ldr	r3, [pc, #4]	; (401328 <dma_adc_0_disable_continuously+0x8>)
  401324:	701a      	strb	r2, [r3, #0]
  401326:	4770      	bx	lr
  401328:	2040074c 	.word	0x2040074c

0040132c <dma_adc_1_disable_continuously>:
}
void dma_adc_1_disable_continuously(void){
	is_dma_adc_1_continuous = false;
  40132c:	2200      	movs	r2, #0
  40132e:	4b01      	ldr	r3, [pc, #4]	; (401334 <dma_adc_1_disable_continuously+0x8>)
  401330:	701a      	strb	r2, [r3, #0]
  401332:	4770      	bx	lr
  401334:	20400740 	.word	0x20400740

00401338 <dma_adc_init>:
void dma_adc_init(void){
  401338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  40133c:	492a      	ldr	r1, [pc, #168]	; (4013e8 <dma_adc_init+0xb0>)
  40133e:	2000      	movs	r0, #0
  401340:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 40141c <dma_adc_init+0xe4>
  401344:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  401346:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 401420 <dma_adc_init+0xe8>
  40134a:	4641      	mov	r1, r8
  40134c:	2000      	movs	r0, #0
  40134e:	4f27      	ldr	r7, [pc, #156]	; (4013ec <dma_adc_init+0xb4>)
  401350:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  401352:	2118      	movs	r1, #24
  401354:	2000      	movs	r0, #0
  401356:	4d26      	ldr	r5, [pc, #152]	; (4013f0 <dma_adc_init+0xb8>)
  401358:	47a8      	blx	r5
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  40135a:	2100      	movs	r1, #0
  40135c:	460c      	mov	r4, r1
  40135e:	4608      	mov	r0, r1
  401360:	4e24      	ldr	r6, [pc, #144]	; (4013f4 <dma_adc_init+0xbc>)
  401362:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  401364:	6823      	ldr	r3, [r4, #0]
  401366:	4a24      	ldr	r2, [pc, #144]	; (4013f8 <dma_adc_init+0xc0>)
  401368:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  40136a:	2201      	movs	r2, #1
  40136c:	4621      	mov	r1, r4
  40136e:	4620      	mov	r0, r4
  401370:	4c22      	ldr	r4, [pc, #136]	; (4013fc <dma_adc_init+0xc4>)
  401372:	47a0      	blx	r4
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  401374:	4922      	ldr	r1, [pc, #136]	; (401400 <dma_adc_init+0xc8>)
  401376:	2001      	movs	r0, #1
  401378:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  40137a:	f108 01a0 	add.w	r1, r8, #160	; 0xa0
  40137e:	2001      	movs	r0, #1
  401380:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  401382:	2110      	movs	r1, #16
  401384:	2001      	movs	r0, #1
  401386:	47a8      	blx	r5
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  401388:	2101      	movs	r1, #1
  40138a:	2500      	movs	r5, #0
  40138c:	4628      	mov	r0, r5
  40138e:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  401390:	682b      	ldr	r3, [r5, #0]
  401392:	4a1c      	ldr	r2, [pc, #112]	; (401404 <dma_adc_init+0xcc>)
  401394:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  401396:	2201      	movs	r2, #1
  401398:	4629      	mov	r1, r5
  40139a:	4610      	mov	r0, r2
  40139c:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40139e:	4b1a      	ldr	r3, [pc, #104]	; (401408 <dma_adc_init+0xd0>)
  4013a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4013a4:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4013a6:	2280      	movs	r2, #128	; 0x80
  4013a8:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4013b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4013b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4013b8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013c0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4013c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4013c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4013cc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	dma_adc_0_disable_continuously();
  4013d4:	4b0d      	ldr	r3, [pc, #52]	; (40140c <dma_adc_init+0xd4>)
  4013d6:	4798      	blx	r3
	dma_adc_1_disable_continuously();
  4013d8:	4b0d      	ldr	r3, [pc, #52]	; (401410 <dma_adc_init+0xd8>)
  4013da:	4798      	blx	r3
	has_0_triggered = false;
  4013dc:	4a0d      	ldr	r2, [pc, #52]	; (401414 <dma_adc_init+0xdc>)
  4013de:	7015      	strb	r5, [r2, #0]
	has_1_triggered = false;
  4013e0:	4a0d      	ldr	r2, [pc, #52]	; (401418 <dma_adc_init+0xe0>)
  4013e2:	7015      	strb	r5, [r2, #0]
  4013e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4013e8:	4003c020 	.word	0x4003c020
  4013ec:	00403409 	.word	0x00403409
  4013f0:	00403429 	.word	0x00403429
  4013f4:	00403459 	.word	0x00403459
  4013f8:	004010d5 	.word	0x004010d5
  4013fc:	0040346d 	.word	0x0040346d
  401400:	40064020 	.word	0x40064020
  401404:	004011f9 	.word	0x004011f9
  401408:	e000e100 	.word	0xe000e100
  40140c:	00401321 	.word	0x00401321
  401410:	0040132d 	.word	0x0040132d
  401414:	20400728 	.word	0x20400728
  401418:	204006f9 	.word	0x204006f9
  40141c:	00403419 	.word	0x00403419
  401420:	20400240 	.word	0x20400240

00401424 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  401424:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  401426:	4d11      	ldr	r5, [pc, #68]	; (40146c <adc_enable_all+0x48>)
  401428:	2108      	movs	r1, #8
  40142a:	4628      	mov	r0, r5
  40142c:	4c10      	ldr	r4, [pc, #64]	; (401470 <adc_enable_all+0x4c>)
  40142e:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  401430:	2102      	movs	r1, #2
  401432:	4628      	mov	r0, r5
  401434:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  401436:	4e0f      	ldr	r6, [pc, #60]	; (401474 <adc_enable_all+0x50>)
  401438:	2101      	movs	r1, #1
  40143a:	4630      	mov	r0, r6
  40143c:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  40143e:	2106      	movs	r1, #6
  401440:	4630      	mov	r0, r6
  401442:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  401444:	2105      	movs	r1, #5
  401446:	4630      	mov	r0, r6
  401448:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  40144a:	2106      	movs	r1, #6
  40144c:	4628      	mov	r0, r5
  40144e:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  401450:	210a      	movs	r1, #10
  401452:	4628      	mov	r0, r5
  401454:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  401456:	2100      	movs	r1, #0
  401458:	4630      	mov	r0, r6
  40145a:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  40145c:	2105      	movs	r1, #5
  40145e:	4628      	mov	r0, r5
  401460:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  401462:	2100      	movs	r1, #0
  401464:	4628      	mov	r0, r5
  401466:	47a0      	blx	r4
  401468:	bd70      	pop	{r4, r5, r6, pc}
  40146a:	bf00      	nop
  40146c:	2040085c 	.word	0x2040085c
  401470:	00401e5d 	.word	0x00401e5d
  401474:	20400934 	.word	0x20400934

00401478 <adc_read>:
	adc_async_disable_channel(ADC_TEMP_MOTOR);
}


//reads data from the DMA buffers
int adc_read(struct adc_async_descriptor *const descr, const uint8_t channel){
  401478:	b410      	push	{r4}
	//null checking variable to see if a write has occured
	has_0_triggered = false;
  40147a:	2300      	movs	r3, #0
  40147c:	4a17      	ldr	r2, [pc, #92]	; (4014dc <adc_read+0x64>)
  40147e:	7013      	strb	r3, [r2, #0]
	has_1_triggered = false;
  401480:	4a17      	ldr	r2, [pc, #92]	; (4014e0 <adc_read+0x68>)
  401482:	7013      	strb	r3, [r2, #0]
	
		
	if (descr == (&ADC_0)){
  401484:	4b17      	ldr	r3, [pc, #92]	; (4014e4 <adc_read+0x6c>)
  401486:	4298      	cmp	r0, r3
  401488:	d008      	beq.n	40149c <adc_read+0x24>
				return temp;
			}
		}
	}
	
	if (descr == (&ADC_1)){
  40148a:	4b17      	ldr	r3, [pc, #92]	; (4014e8 <adc_read+0x70>)
  40148c:	4298      	cmp	r0, r3
  40148e:	d014      	beq.n	4014ba <adc_read+0x42>
			}
		}
	}
	
	
	return 0;
  401490:	2000      	movs	r0, #0
  401492:	f85d 4b04 	ldr.w	r4, [sp], #4
  401496:	4770      	bx	lr
				int temp = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  401498:	b298      	uxth	r0, r3
  40149a:	e7fa      	b.n	401492 <adc_read+0x1a>
  40149c:	2200      	movs	r2, #0
		for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  40149e:	2a05      	cmp	r2, #5
  4014a0:	dcf3      	bgt.n	40148a <adc_read+0x12>
			if((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk) == AFEC_LCDR_CHNB(channel)){
  4014a2:	4b12      	ldr	r3, [pc, #72]	; (4014ec <adc_read+0x74>)
  4014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4014a8:	ea83 6401 	eor.w	r4, r3, r1, lsl #24
  4014ac:	f014 6f70 	tst.w	r4, #251658240	; 0xf000000
  4014b0:	d0f2      	beq.n	401498 <adc_read+0x20>
		for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  4014b2:	3201      	adds	r2, #1
  4014b4:	e7f3      	b.n	40149e <adc_read+0x26>
				int temp = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  4014b6:	b280      	uxth	r0, r0
  4014b8:	e7eb      	b.n	401492 <adc_read+0x1a>
  4014ba:	2300      	movs	r3, #0
		for (int i =0; i<ADC_1_NUM_ACTIVE_CHANNELS; i++){
  4014bc:	2b03      	cmp	r3, #3
  4014be:	dc0b      	bgt.n	4014d8 <adc_read+0x60>
			if((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk) == AFEC_LCDR_CHNB(channel)){
  4014c0:	4a0a      	ldr	r2, [pc, #40]	; (4014ec <adc_read+0x74>)
  4014c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  4014c6:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
  4014ca:	ea80 6201 	eor.w	r2, r0, r1, lsl #24
  4014ce:	f012 6f70 	tst.w	r2, #251658240	; 0xf000000
  4014d2:	d0f0      	beq.n	4014b6 <adc_read+0x3e>
		for (int i =0; i<ADC_1_NUM_ACTIVE_CHANNELS; i++){
  4014d4:	3301      	adds	r3, #1
  4014d6:	e7f1      	b.n	4014bc <adc_read+0x44>
	return 0;
  4014d8:	2000      	movs	r0, #0
  4014da:	e7da      	b.n	401492 <adc_read+0x1a>
  4014dc:	20400728 	.word	0x20400728
  4014e0:	204006f9 	.word	0x204006f9
  4014e4:	2040085c 	.word	0x2040085c
  4014e8:	20400934 	.word	0x20400934
  4014ec:	20400240 	.word	0x20400240

004014f0 <pwm_0_callback>:
#include <hpl_pwm_config.h>
#include "Time_Tester.h"

int counter = 0;

void pwm_0_callback(const struct pwm_descriptor *const descr){
  4014f0:	b508      	push	{r3, lr}
	
	gather_control_data();
  4014f2:	4b02      	ldr	r3, [pc, #8]	; (4014fc <pwm_0_callback+0xc>)
  4014f4:	4798      	blx	r3
		printf("PWM Interrupt \n");
	}
	*/
	
	//for timing diagram
	time_record_timestamp();
  4014f6:	4b02      	ldr	r3, [pc, #8]	; (401500 <pwm_0_callback+0x10>)
  4014f8:	4798      	blx	r3
  4014fa:	bd08      	pop	{r3, pc}
  4014fc:	004006b1 	.word	0x004006b1
  401500:	00401645 	.word	0x00401645

00401504 <pwm_init_user>:
// 	//for timing diagram
// 	//time_record_timestamp();
// }


void pwm_init_user(void){
  401504:	b508      	push	{r3, lr}
}

static inline void hri_pwm_set_CMR_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmr_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  401506:	4b2e      	ldr	r3, [pc, #184]	; (4015c0 <pwm_init_user+0xbc>)
  401508:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  40150c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  401510:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}

static inline void hri_pwm_set_DT_DTH_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  401514:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  401518:	f042 020a 	orr.w	r2, r2, #10
  40151c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
}

static inline void hri_pwm_set_DT_DTL_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  401520:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  401524:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  401528:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  40152c:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
  401530:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  401534:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  401538:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  40153c:	f042 020a 	orr.w	r2, r2, #10
  401540:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  401544:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  401548:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  40154c:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  401550:	4a1c      	ldr	r2, [pc, #112]	; (4015c4 <pwm_init_user+0xc0>)
  401552:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  401556:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  40155a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  40155e:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  401562:	f041 010a 	orr.w	r1, r1, #10
  401566:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  40156a:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  40156e:	f441 2120 	orr.w	r1, r1, #655360	; 0xa0000
  401572:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
}

static inline void hri_pwm_set_CMPV_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmpv_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV |= mask;
  401576:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
  40157a:	f041 0101 	orr.w	r1, r1, #1
  40157e:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  401582:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
  401586:	f041 0101 	orr.w	r1, r1, #1
  40158a:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  40158e:	2201      	movs	r2, #1
  401590:	611a      	str	r2, [r3, #16]
	
	
	//we want interrupt from one of the PWMs so that we can start the control loop
	//interrupt on PWM 0, channel 0 is enabled ; on PWM 1 is disabled
	hri_pwm_set_IMR1_CHID0_bit(PWM0);									//enable the interrupt from PWM 0, channel 0
	pwm_register_callback(&PWM_0, PWM_PERIOD_CB, pwm_0_callback);
  401592:	4a0d      	ldr	r2, [pc, #52]	; (4015c8 <pwm_init_user+0xc4>)
  401594:	2100      	movs	r1, #0
  401596:	480d      	ldr	r0, [pc, #52]	; (4015cc <pwm_init_user+0xc8>)
  401598:	4b0d      	ldr	r3, [pc, #52]	; (4015d0 <pwm_init_user+0xcc>)
  40159a:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40159c:	4b0d      	ldr	r3, [pc, #52]	; (4015d4 <pwm_init_user+0xd0>)
  40159e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4015a2:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4015a4:	2260      	movs	r2, #96	; 0x60
  4015a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4015aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4015b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4015b6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4015ba:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  4015be:	bd08      	pop	{r3, pc}
  4015c0:	40020000 	.word	0x40020000
  4015c4:	4005c000 	.word	0x4005c000
  4015c8:	004014f1 	.word	0x004014f1
  4015cc:	20400774 	.word	0x20400774
  4015d0:	00402129 	.word	0x00402129
  4015d4:	e000e100 	.word	0xe000e100

004015d8 <pwm_enable_all>:
}


//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  4015d8:	b570      	push	{r4, r5, r6, lr}
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM |= mask;
  4015da:	4a12      	ldr	r2, [pc, #72]	; (401624 <pwm_enable_all+0x4c>)
  4015dc:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  4015e0:	f043 0301 	orr.w	r3, r3, #1
  4015e4:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
  4015e8:	f502 3270 	add.w	r2, r2, #245760	; 0x3c000
  4015ec:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  4015f0:	f043 0301 	orr.w	r3, r3, #1
  4015f4:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	hri_pwm_set_CMPM_reg(PWM0, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	hri_pwm_set_CMPM_reg(PWM1, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  4015f8:	4c0b      	ldr	r4, [pc, #44]	; (401628 <pwm_enable_all+0x50>)
  4015fa:	4620      	mov	r0, r4
  4015fc:	4e0b      	ldr	r6, [pc, #44]	; (40162c <pwm_enable_all+0x54>)
  4015fe:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  401600:	4d0b      	ldr	r5, [pc, #44]	; (401630 <pwm_enable_all+0x58>)
  401602:	4628      	mov	r0, r5
  401604:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD-1);
  401606:	f240 32e7 	movw	r2, #999	; 0x3e7
  40160a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40160e:	4620      	mov	r0, r4
  401610:	4c08      	ldr	r4, [pc, #32]	; (401634 <pwm_enable_all+0x5c>)
  401612:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD-1);
  401614:	f240 32e7 	movw	r2, #999	; 0x3e7
  401618:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40161c:	4628      	mov	r0, r5
  40161e:	47a0      	blx	r4
  401620:	bd70      	pop	{r4, r5, r6, pc}
  401622:	bf00      	nop
  401624:	40020000 	.word	0x40020000
  401628:	20400774 	.word	0x20400774
  40162c:	004020ed 	.word	0x004020ed
  401630:	20400918 	.word	0x20400918
  401634:	00402171 	.word	0x00402171

00401638 <pwm_set_duty>:
//sets individual channel pwm duty cycle
void pwm_set_duty(struct  pwm_descriptor * const descr, const uint8_t channel, const pwm_period_t duty_cycle){
	// based on available code from <hpl_pwm.h>
	// the default function doesn't allow to set the PWM cycle on individual channels
	
	hri_pwm_write_CDTYUPD_reg(descr->device.hw, channel, duty_cycle);
  401638:	6903      	ldr	r3, [r0, #16]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  40163a:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  40163e:	f8c1 2208 	str.w	r2, [r1, #520]	; 0x208
  401642:	4770      	bx	lr

00401644 <time_record_timestamp>:




inline void time_record_timestamp(void){
	int current_systick = SysTick->VAL;
  401644:	4b02      	ldr	r3, [pc, #8]	; (401650 <time_record_timestamp+0xc>)
  401646:	689a      	ldr	r2, [r3, #8]
	timestamp = current_systick;
  401648:	4b02      	ldr	r3, [pc, #8]	; (401654 <time_record_timestamp+0x10>)
  40164a:	601a      	str	r2, [r3, #0]
  40164c:	4770      	bx	lr
  40164e:	bf00      	nop
  401650:	e000e010 	.word	0xe000e010
  401654:	204005ec 	.word	0x204005ec

00401658 <time_get_delta_us>:
}

inline float time_get_delta_us(void){
	int current_systick = SysTick->VAL;
  401658:	4b0a      	ldr	r3, [pc, #40]	; (401684 <time_get_delta_us+0x2c>)
  40165a:	689a      	ldr	r2, [r3, #8]
	int delta = timestamp - current_systick;
  40165c:	4b0a      	ldr	r3, [pc, #40]	; (401688 <time_get_delta_us+0x30>)
  40165e:	681b      	ldr	r3, [r3, #0]
  401660:	1a9b      	subs	r3, r3, r2
	if(delta <= 0) delta += (1<<24);
  401662:	2b00      	cmp	r3, #0
  401664:	dd0a      	ble.n	40167c <time_get_delta_us+0x24>
	//systick clock frequency equals MCU clock at 300MHz
	return (float) delta / 300;
  401666:	ee07 3a90 	vmov	s15, r3
  40166a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40166e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 40168c <time_get_delta_us+0x34>
  401672:	eec7 6a87 	vdiv.f32	s13, s15, s14
  401676:	ee16 0a90 	vmov	r0, s13
  40167a:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);
  40167c:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  401680:	e7f1      	b.n	401666 <time_get_delta_us+0xe>
  401682:	bf00      	nop
  401684:	e000e010 	.word	0xe000e010
  401688:	204005ec 	.word	0x204005ec
  40168c:	43960000 	.word	0x43960000

00401690 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401690:	e7fe      	b.n	401690 <Dummy_Handler>
	...

00401694 <Reset_Handler>:
{
  401694:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  401696:	4b10      	ldr	r3, [pc, #64]	; (4016d8 <Reset_Handler+0x44>)
  401698:	4a10      	ldr	r2, [pc, #64]	; (4016dc <Reset_Handler+0x48>)
  40169a:	429a      	cmp	r2, r3
  40169c:	d009      	beq.n	4016b2 <Reset_Handler+0x1e>
  40169e:	4b0e      	ldr	r3, [pc, #56]	; (4016d8 <Reset_Handler+0x44>)
  4016a0:	4a0e      	ldr	r2, [pc, #56]	; (4016dc <Reset_Handler+0x48>)
  4016a2:	e003      	b.n	4016ac <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4016a4:	6811      	ldr	r1, [r2, #0]
  4016a6:	6019      	str	r1, [r3, #0]
  4016a8:	3304      	adds	r3, #4
  4016aa:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4016ac:	490c      	ldr	r1, [pc, #48]	; (4016e0 <Reset_Handler+0x4c>)
  4016ae:	428b      	cmp	r3, r1
  4016b0:	d3f8      	bcc.n	4016a4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4016b2:	4b0c      	ldr	r3, [pc, #48]	; (4016e4 <Reset_Handler+0x50>)
  4016b4:	e002      	b.n	4016bc <Reset_Handler+0x28>
                *pDest++ = 0;
  4016b6:	2200      	movs	r2, #0
  4016b8:	601a      	str	r2, [r3, #0]
  4016ba:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4016bc:	4a0a      	ldr	r2, [pc, #40]	; (4016e8 <Reset_Handler+0x54>)
  4016be:	4293      	cmp	r3, r2
  4016c0:	d3f9      	bcc.n	4016b6 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4016c2:	4a0a      	ldr	r2, [pc, #40]	; (4016ec <Reset_Handler+0x58>)
  4016c4:	4b0a      	ldr	r3, [pc, #40]	; (4016f0 <Reset_Handler+0x5c>)
  4016c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4016ca:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4016cc:	4b09      	ldr	r3, [pc, #36]	; (4016f4 <Reset_Handler+0x60>)
  4016ce:	4798      	blx	r3
        main();
  4016d0:	4b09      	ldr	r3, [pc, #36]	; (4016f8 <Reset_Handler+0x64>)
  4016d2:	4798      	blx	r3
  4016d4:	e7fe      	b.n	4016d4 <Reset_Handler+0x40>
  4016d6:	bf00      	nop
  4016d8:	20400000 	.word	0x20400000
  4016dc:	004088f8 	.word	0x004088f8
  4016e0:	2040021c 	.word	0x2040021c
  4016e4:	20400220 	.word	0x20400220
  4016e8:	20400964 	.word	0x20400964
  4016ec:	e000ed00 	.word	0xe000ed00
  4016f0:	00400000 	.word	0x00400000
  4016f4:	00405749 	.word	0x00405749
  4016f8:	00403531 	.word	0x00403531

004016fc <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  4016fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4016fe:	b085      	sub	sp, #20
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401700:	4b20      	ldr	r3, [pc, #128]	; (401784 <ADC_1_init+0x88>)
  401702:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  401706:	f413 7f80 	tst.w	r3, #256	; 0x100
  40170a:	d104      	bne.n	401716 <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40170c:	f44f 7280 	mov.w	r2, #256	; 0x100
  401710:	4b1c      	ldr	r3, [pc, #112]	; (401784 <ADC_1_init+0x88>)
  401712:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  401716:	4d1c      	ldr	r5, [pc, #112]	; (401788 <ADC_1_init+0x8c>)
  401718:	4c1c      	ldr	r4, [pc, #112]	; (40178c <ADC_1_init+0x90>)
  40171a:	2600      	movs	r6, #0
  40171c:	9602      	str	r6, [sp, #8]
  40171e:	4b1c      	ldr	r3, [pc, #112]	; (401790 <ADC_1_init+0x94>)
  401720:	9301      	str	r3, [sp, #4]
  401722:	2304      	movs	r3, #4
  401724:	9300      	str	r3, [sp, #0]
  401726:	2306      	movs	r3, #6
  401728:	462a      	mov	r2, r5
  40172a:	491a      	ldr	r1, [pc, #104]	; (401794 <ADC_1_init+0x98>)
  40172c:	4620      	mov	r0, r4
  40172e:	4f1a      	ldr	r7, [pc, #104]	; (401798 <ADC_1_init+0x9c>)
  401730:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  401732:	2310      	movs	r3, #16
  401734:	f105 0208 	add.w	r2, r5, #8
  401738:	4631      	mov	r1, r6
  40173a:	4620      	mov	r0, r4
  40173c:	4e17      	ldr	r6, [pc, #92]	; (40179c <ADC_1_init+0xa0>)
  40173e:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  401740:	2310      	movs	r3, #16
  401742:	f105 0218 	add.w	r2, r5, #24
  401746:	2101      	movs	r1, #1
  401748:	4620      	mov	r0, r4
  40174a:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  40174c:	2310      	movs	r3, #16
  40174e:	f105 0228 	add.w	r2, r5, #40	; 0x28
  401752:	2105      	movs	r1, #5
  401754:	4620      	mov	r0, r4
  401756:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  401758:	2310      	movs	r3, #16
  40175a:	f105 0238 	add.w	r2, r5, #56	; 0x38
  40175e:	2106      	movs	r1, #6
  401760:	4620      	mov	r0, r4
  401762:	47b0      	blx	r6
	((Pio *)hw)->PIO_PER = mask;
  401764:	2202      	movs	r2, #2
  401766:	4b0e      	ldr	r3, [pc, #56]	; (4017a0 <ADC_1_init+0xa4>)
  401768:	601a      	str	r2, [r3, #0]
  40176a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40176e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401772:	601a      	str	r2, [r3, #0]
  401774:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401778:	601a      	str	r2, [r3, #0]
  40177a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40177e:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  401780:	b005      	add	sp, #20
  401782:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401784:	400e0600 	.word	0x400e0600
  401788:	20400360 	.word	0x20400360
  40178c:	20400934 	.word	0x20400934
  401790:	204007d4 	.word	0x204007d4
  401794:	40064000 	.word	0x40064000
  401798:	00401cfd 	.word	0x00401cfd
  40179c:	00401da5 	.word	0x00401da5
  4017a0:	400e1000 	.word	0x400e1000

004017a4 <ADC_0_init>:
{
  4017a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4017a8:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4017aa:	4b2a      	ldr	r3, [pc, #168]	; (401854 <ADC_0_init+0xb0>)
  4017ac:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4017ae:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  4017b2:	d103      	bne.n	4017bc <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4017b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4017b8:	4b26      	ldr	r3, [pc, #152]	; (401854 <ADC_0_init+0xb0>)
  4017ba:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  4017bc:	4d26      	ldr	r5, [pc, #152]	; (401858 <ADC_0_init+0xb4>)
  4017be:	4c27      	ldr	r4, [pc, #156]	; (40185c <ADC_0_init+0xb8>)
  4017c0:	2600      	movs	r6, #0
  4017c2:	9602      	str	r6, [sp, #8]
  4017c4:	4b26      	ldr	r3, [pc, #152]	; (401860 <ADC_0_init+0xbc>)
  4017c6:	9301      	str	r3, [sp, #4]
  4017c8:	2706      	movs	r7, #6
  4017ca:	9700      	str	r7, [sp, #0]
  4017cc:	230a      	movs	r3, #10
  4017ce:	f105 0248 	add.w	r2, r5, #72	; 0x48
  4017d2:	4924      	ldr	r1, [pc, #144]	; (401864 <ADC_0_init+0xc0>)
  4017d4:	4620      	mov	r0, r4
  4017d6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 401874 <ADC_0_init+0xd0>
  4017da:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  4017dc:	2310      	movs	r3, #16
  4017de:	f105 0254 	add.w	r2, r5, #84	; 0x54
  4017e2:	4631      	mov	r1, r6
  4017e4:	4620      	mov	r0, r4
  4017e6:	4e20      	ldr	r6, [pc, #128]	; (401868 <ADC_0_init+0xc4>)
  4017e8:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  4017ea:	2310      	movs	r3, #16
  4017ec:	f105 0264 	add.w	r2, r5, #100	; 0x64
  4017f0:	2102      	movs	r1, #2
  4017f2:	4620      	mov	r0, r4
  4017f4:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  4017f6:	2310      	movs	r3, #16
  4017f8:	f105 0274 	add.w	r2, r5, #116	; 0x74
  4017fc:	2105      	movs	r1, #5
  4017fe:	4620      	mov	r0, r4
  401800:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  401802:	2310      	movs	r3, #16
  401804:	f105 0284 	add.w	r2, r5, #132	; 0x84
  401808:	4639      	mov	r1, r7
  40180a:	4620      	mov	r0, r4
  40180c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  40180e:	2310      	movs	r3, #16
  401810:	f105 0294 	add.w	r2, r5, #148	; 0x94
  401814:	2108      	movs	r1, #8
  401816:	4620      	mov	r0, r4
  401818:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  40181a:	2310      	movs	r3, #16
  40181c:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  401820:	210a      	movs	r1, #10
  401822:	4620      	mov	r0, r4
  401824:	47b0      	blx	r6
  401826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40182a:	4b10      	ldr	r3, [pc, #64]	; (40186c <ADC_0_init+0xc8>)
  40182c:	601a      	str	r2, [r3, #0]
  40182e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401832:	2208      	movs	r2, #8
  401834:	601a      	str	r2, [r3, #0]
  401836:	2204      	movs	r2, #4
  401838:	601a      	str	r2, [r3, #0]
  40183a:	4a0d      	ldr	r2, [pc, #52]	; (401870 <ADC_0_init+0xcc>)
  40183c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401840:	6011      	str	r1, [r2, #0]
  401842:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401846:	6011      	str	r1, [r2, #0]
  401848:	2201      	movs	r2, #1
  40184a:	601a      	str	r2, [r3, #0]
}
  40184c:	b004      	add	sp, #16
  40184e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401852:	bf00      	nop
  401854:	400e0600 	.word	0x400e0600
  401858:	20400360 	.word	0x20400360
  40185c:	2040085c 	.word	0x2040085c
  401860:	20400888 	.word	0x20400888
  401864:	4003c000 	.word	0x4003c000
  401868:	00401da5 	.word	0x00401da5
  40186c:	400e1400 	.word	0x400e1400
  401870:	400e0e00 	.word	0x400e0e00
  401874:	00401cfd 	.word	0x00401cfd

00401878 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = mask;
  401878:	4b04      	ldr	r3, [pc, #16]	; (40188c <EXTERNAL_IRQ_D_init+0x14>)
  40187a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40187e:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  401880:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  401882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  401886:	601a      	str	r2, [r3, #0]
  401888:	4770      	bx	lr
  40188a:	bf00      	nop
  40188c:	400e1400 	.word	0x400e1400

00401890 <EXTERNAL_IRQ_B_init>:
	((Pio *)hw)->PIO_ODR = mask;
  401890:	4b04      	ldr	r3, [pc, #16]	; (4018a4 <EXTERNAL_IRQ_B_init+0x14>)
  401892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401896:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  401898:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40189a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40189e:	601a      	str	r2, [r3, #0]
  4018a0:	4770      	bx	lr
  4018a2:	bf00      	nop
  4018a4:	400e1000 	.word	0x400e1000

004018a8 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4018a8:	4b06      	ldr	r3, [pc, #24]	; (4018c4 <EXTERNAL_IRQ_A_init+0x1c>)
  4018aa:	2204      	movs	r2, #4
  4018ac:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4018ae:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4018b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4018b4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4018b6:	2220      	movs	r2, #32
  4018b8:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4018ba:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4018bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4018c0:	601a      	str	r2, [r3, #0]
  4018c2:	4770      	bx	lr
  4018c4:	400e0e00 	.word	0x400e0e00

004018c8 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4018c8:	4b16      	ldr	r3, [pc, #88]	; (401924 <PWM_0_PORT_init+0x5c>)
  4018ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4018cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  4018d0:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4018d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4018d4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  4018d8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4018da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4018de:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4018e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4018e2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  4018e6:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4018e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4018ea:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  4018ee:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4018f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4018f4:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4018f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4018f8:	f022 0202 	bic.w	r2, r2, #2
  4018fc:	671a      	str	r2, [r3, #112]	; 0x70
  4018fe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401900:	f022 0202 	bic.w	r2, r2, #2
  401904:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401906:	2202      	movs	r2, #2
  401908:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40190a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40190c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  401910:	671a      	str	r2, [r3, #112]	; 0x70
  401912:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401914:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  401918:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40191a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40191e:	605a      	str	r2, [r3, #4]
  401920:	4770      	bx	lr
  401922:	bf00      	nop
  401924:	400e0e00 	.word	0x400e0e00

00401928 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401928:	4b04      	ldr	r3, [pc, #16]	; (40193c <PWM_0_CLOCK_init+0x14>)
  40192a:	699b      	ldr	r3, [r3, #24]
  40192c:	2b00      	cmp	r3, #0
  40192e:	db03      	blt.n	401938 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401930:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401934:	4b01      	ldr	r3, [pc, #4]	; (40193c <PWM_0_CLOCK_init+0x14>)
  401936:	611a      	str	r2, [r3, #16]
  401938:	4770      	bx	lr
  40193a:	bf00      	nop
  40193c:	400e0600 	.word	0x400e0600

00401940 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  401940:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  401942:	4b06      	ldr	r3, [pc, #24]	; (40195c <PWM_0_init+0x1c>)
  401944:	4798      	blx	r3
	PWM_0_PORT_init();
  401946:	4b06      	ldr	r3, [pc, #24]	; (401960 <PWM_0_init+0x20>)
  401948:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  40194a:	4b06      	ldr	r3, [pc, #24]	; (401964 <PWM_0_init+0x24>)
  40194c:	4798      	blx	r3
  40194e:	4602      	mov	r2, r0
  401950:	4905      	ldr	r1, [pc, #20]	; (401968 <PWM_0_init+0x28>)
  401952:	4806      	ldr	r0, [pc, #24]	; (40196c <PWM_0_init+0x2c>)
  401954:	4b06      	ldr	r3, [pc, #24]	; (401970 <PWM_0_init+0x30>)
  401956:	4798      	blx	r3
  401958:	bd08      	pop	{r3, pc}
  40195a:	bf00      	nop
  40195c:	00401929 	.word	0x00401929
  401960:	004018c9 	.word	0x004018c9
  401964:	00402f79 	.word	0x00402f79
  401968:	40020000 	.word	0x40020000
  40196c:	20400774 	.word	0x20400774
  401970:	004020a9 	.word	0x004020a9

00401974 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401974:	4b0c      	ldr	r3, [pc, #48]	; (4019a8 <PWM_1_PORT_init+0x34>)
  401976:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401978:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40197c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40197e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401980:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  401984:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401986:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40198a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40198c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  401990:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401992:	f042 0201 	orr.w	r2, r2, #1
  401996:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401998:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40199a:	f022 0201 	bic.w	r2, r2, #1
  40199e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4019a0:	2201      	movs	r2, #1
  4019a2:	605a      	str	r2, [r3, #4]
  4019a4:	4770      	bx	lr
  4019a6:	bf00      	nop
  4019a8:	400e0e00 	.word	0x400e0e00

004019ac <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4019ac:	4b05      	ldr	r3, [pc, #20]	; (4019c4 <PWM_1_CLOCK_init+0x18>)
  4019ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4019b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  4019b6:	d104      	bne.n	4019c2 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4019b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019bc:	4b01      	ldr	r3, [pc, #4]	; (4019c4 <PWM_1_CLOCK_init+0x18>)
  4019be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4019c2:	4770      	bx	lr
  4019c4:	400e0600 	.word	0x400e0600

004019c8 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  4019c8:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  4019ca:	4b06      	ldr	r3, [pc, #24]	; (4019e4 <PWM_1_init+0x1c>)
  4019cc:	4798      	blx	r3
	PWM_1_PORT_init();
  4019ce:	4b06      	ldr	r3, [pc, #24]	; (4019e8 <PWM_1_init+0x20>)
  4019d0:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  4019d2:	4b06      	ldr	r3, [pc, #24]	; (4019ec <PWM_1_init+0x24>)
  4019d4:	4798      	blx	r3
  4019d6:	4602      	mov	r2, r0
  4019d8:	4905      	ldr	r1, [pc, #20]	; (4019f0 <PWM_1_init+0x28>)
  4019da:	4806      	ldr	r0, [pc, #24]	; (4019f4 <PWM_1_init+0x2c>)
  4019dc:	4b06      	ldr	r3, [pc, #24]	; (4019f8 <PWM_1_init+0x30>)
  4019de:	4798      	blx	r3
  4019e0:	bd08      	pop	{r3, pc}
  4019e2:	bf00      	nop
  4019e4:	004019ad 	.word	0x004019ad
  4019e8:	00401975 	.word	0x00401975
  4019ec:	00402f79 	.word	0x00402f79
  4019f0:	4005c000 	.word	0x4005c000
  4019f4:	20400918 	.word	0x20400918
  4019f8:	004020a9 	.word	0x004020a9

004019fc <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4019fc:	4b06      	ldr	r3, [pc, #24]	; (401a18 <ENCODER_A_PORT_init+0x1c>)
  4019fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a00:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  401a04:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401a06:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a08:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  401a0c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401a0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401a12:	605a      	str	r2, [r3, #4]
  401a14:	4770      	bx	lr
  401a16:	bf00      	nop
  401a18:	400e0e00 	.word	0x400e0e00

00401a1c <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  401a1c:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401a1e:	4b09      	ldr	r3, [pc, #36]	; (401a44 <ENCODER_A_init+0x28>)
  401a20:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  401a22:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  401a26:	d103      	bne.n	401a30 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401a28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401a2c:	4b05      	ldr	r3, [pc, #20]	; (401a44 <ENCODER_A_init+0x28>)
  401a2e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  401a30:	4b05      	ldr	r3, [pc, #20]	; (401a48 <ENCODER_A_init+0x2c>)
  401a32:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  401a34:	4b05      	ldr	r3, [pc, #20]	; (401a4c <ENCODER_A_init+0x30>)
  401a36:	4798      	blx	r3
  401a38:	4602      	mov	r2, r0
  401a3a:	4905      	ldr	r1, [pc, #20]	; (401a50 <ENCODER_A_init+0x34>)
  401a3c:	4805      	ldr	r0, [pc, #20]	; (401a54 <ENCODER_A_init+0x38>)
  401a3e:	4b06      	ldr	r3, [pc, #24]	; (401a58 <ENCODER_A_init+0x3c>)
  401a40:	4798      	blx	r3
  401a42:	bd08      	pop	{r3, pc}
  401a44:	400e0600 	.word	0x400e0600
  401a48:	004019fd 	.word	0x004019fd
  401a4c:	0040314f 	.word	0x0040314f
  401a50:	4000c000 	.word	0x4000c000
  401a54:	20400840 	.word	0x20400840
  401a58:	00402259 	.word	0x00402259

00401a5c <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401a5c:	4b06      	ldr	r3, [pc, #24]	; (401a78 <ENCODER_B_PORT_init+0x1c>)
  401a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a60:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  401a64:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401a66:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a68:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  401a6c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401a6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  401a72:	605a      	str	r2, [r3, #4]
  401a74:	4770      	bx	lr
  401a76:	bf00      	nop
  401a78:	400e1400 	.word	0x400e1400

00401a7c <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  401a7c:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401a7e:	4b0a      	ldr	r3, [pc, #40]	; (401aa8 <ENCODER_B_init+0x2c>)
  401a80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  401a84:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  401a88:	d104      	bne.n	401a94 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401a8a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  401a8e:	4b06      	ldr	r3, [pc, #24]	; (401aa8 <ENCODER_B_init+0x2c>)
  401a90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  401a94:	4b05      	ldr	r3, [pc, #20]	; (401aac <ENCODER_B_init+0x30>)
  401a96:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  401a98:	4b05      	ldr	r3, [pc, #20]	; (401ab0 <ENCODER_B_init+0x34>)
  401a9a:	4798      	blx	r3
  401a9c:	4602      	mov	r2, r0
  401a9e:	4905      	ldr	r1, [pc, #20]	; (401ab4 <ENCODER_B_init+0x38>)
  401aa0:	4805      	ldr	r0, [pc, #20]	; (401ab8 <ENCODER_B_init+0x3c>)
  401aa2:	4b06      	ldr	r3, [pc, #24]	; (401abc <ENCODER_B_init+0x40>)
  401aa4:	4798      	blx	r3
  401aa6:	bd08      	pop	{r3, pc}
  401aa8:	400e0600 	.word	0x400e0600
  401aac:	00401a5d 	.word	0x00401a5d
  401ab0:	0040314f 	.word	0x0040314f
  401ab4:	40054000 	.word	0x40054000
  401ab8:	20400790 	.word	0x20400790
  401abc:	00402259 	.word	0x00402259

00401ac0 <delay_driver_init>:
}

void delay_driver_init(void)
{
  401ac0:	b508      	push	{r3, lr}
	delay_init(SysTick);
  401ac2:	4802      	ldr	r0, [pc, #8]	; (401acc <delay_driver_init+0xc>)
  401ac4:	4b02      	ldr	r3, [pc, #8]	; (401ad0 <delay_driver_init+0x10>)
  401ac6:	4798      	blx	r3
  401ac8:	bd08      	pop	{r3, pc}
  401aca:	bf00      	nop
  401acc:	e000e010 	.word	0xe000e010
  401ad0:	00401eb9 	.word	0x00401eb9

00401ad4 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401ad4:	4b0f      	ldr	r3, [pc, #60]	; (401b14 <EDBG_COM_PORT_init+0x40>)
  401ad6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401ad8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401adc:	671a      	str	r2, [r3, #112]	; 0x70
  401ade:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401ae0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401ae4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401ae6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401aea:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  401aec:	4a0a      	ldr	r2, [pc, #40]	; (401b18 <EDBG_COM_PORT_init+0x44>)
  401aee:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  401af2:	f043 0310 	orr.w	r3, r3, #16
  401af6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401afa:	4b08      	ldr	r3, [pc, #32]	; (401b1c <EDBG_COM_PORT_init+0x48>)
  401afc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401afe:	f042 0210 	orr.w	r2, r2, #16
  401b02:	671a      	str	r2, [r3, #112]	; 0x70
  401b04:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401b06:	f042 0210 	orr.w	r2, r2, #16
  401b0a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401b0c:	2210      	movs	r2, #16
  401b0e:	605a      	str	r2, [r3, #4]
  401b10:	4770      	bx	lr
  401b12:	bf00      	nop
  401b14:	400e0e00 	.word	0x400e0e00
  401b18:	40088000 	.word	0x40088000
  401b1c:	400e1000 	.word	0x400e1000

00401b20 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401b20:	4b04      	ldr	r3, [pc, #16]	; (401b34 <EDBG_COM_CLOCK_init+0x14>)
  401b22:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  401b24:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  401b28:	d103      	bne.n	401b32 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401b2e:	4b01      	ldr	r3, [pc, #4]	; (401b34 <EDBG_COM_CLOCK_init+0x14>)
  401b30:	611a      	str	r2, [r3, #16]
  401b32:	4770      	bx	lr
  401b34:	400e0600 	.word	0x400e0600

00401b38 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  401b38:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  401b3a:	4b06      	ldr	r3, [pc, #24]	; (401b54 <EDBG_COM_init+0x1c>)
  401b3c:	4798      	blx	r3
	EDBG_COM_PORT_init();
  401b3e:	4b06      	ldr	r3, [pc, #24]	; (401b58 <EDBG_COM_init+0x20>)
  401b40:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  401b42:	4b06      	ldr	r3, [pc, #24]	; (401b5c <EDBG_COM_init+0x24>)
  401b44:	4798      	blx	r3
  401b46:	4602      	mov	r2, r0
  401b48:	4905      	ldr	r1, [pc, #20]	; (401b60 <EDBG_COM_init+0x28>)
  401b4a:	4806      	ldr	r0, [pc, #24]	; (401b64 <EDBG_COM_init+0x2c>)
  401b4c:	4b06      	ldr	r3, [pc, #24]	; (401b68 <EDBG_COM_init+0x30>)
  401b4e:	4798      	blx	r3
  401b50:	bd08      	pop	{r3, pc}
  401b52:	bf00      	nop
  401b54:	00401b21 	.word	0x00401b21
  401b58:	00401ad5 	.word	0x00401ad5
  401b5c:	00403391 	.word	0x00403391
  401b60:	40028000 	.word	0x40028000
  401b64:	20400834 	.word	0x20400834
  401b68:	004023a1 	.word	0x004023a1

00401b6c <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  401b6c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  401b6e:	4b37      	ldr	r3, [pc, #220]	; (401c4c <system_init+0xe0>)
  401b70:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401b72:	4b37      	ldr	r3, [pc, #220]	; (401c50 <system_init+0xe4>)
  401b74:	699b      	ldr	r3, [r3, #24]
  401b76:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401b7a:	d103      	bne.n	401b84 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401b80:	4b33      	ldr	r3, [pc, #204]	; (401c50 <system_init+0xe4>)
  401b82:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401b84:	4b32      	ldr	r3, [pc, #200]	; (401c50 <system_init+0xe4>)
  401b86:	699b      	ldr	r3, [r3, #24]
  401b88:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401b8c:	d103      	bne.n	401b96 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401b8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401b92:	4b2f      	ldr	r3, [pc, #188]	; (401c50 <system_init+0xe4>)
  401b94:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401b96:	4b2e      	ldr	r3, [pc, #184]	; (401c50 <system_init+0xe4>)
  401b98:	699b      	ldr	r3, [r3, #24]
  401b9a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  401b9e:	d103      	bne.n	401ba8 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401ba0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401ba4:	4b2a      	ldr	r3, [pc, #168]	; (401c50 <system_init+0xe4>)
  401ba6:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401ba8:	4b29      	ldr	r3, [pc, #164]	; (401c50 <system_init+0xe4>)
  401baa:	699b      	ldr	r3, [r3, #24]
  401bac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401bb0:	d103      	bne.n	401bba <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401bb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401bb6:	4b26      	ldr	r3, [pc, #152]	; (401c50 <system_init+0xe4>)
  401bb8:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  401bba:	4a26      	ldr	r2, [pc, #152]	; (401c54 <system_init+0xe8>)
  401bbc:	6853      	ldr	r3, [r2, #4]
  401bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401bc2:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  401bc4:	4b24      	ldr	r3, [pc, #144]	; (401c58 <system_init+0xec>)
  401bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401bca:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  401bcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  401bd0:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  401bd2:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401bd4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  401bd8:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401bda:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401bdc:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401be2:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401be4:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401be6:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  401bec:	f44f 7080 	mov.w	r0, #256	; 0x100
  401bf0:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401bf2:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401bf4:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401bf6:	f44f 7000 	mov.w	r0, #512	; 0x200
  401bfa:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401bfc:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401bfe:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c00:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401c04:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c06:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c08:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c0a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401c0e:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c10:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c12:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401c14:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401c16:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401c18:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  401c1a:	4b10      	ldr	r3, [pc, #64]	; (401c5c <system_init+0xf0>)
  401c1c:	4798      	blx	r3
	ADC_1_init();
  401c1e:	4b10      	ldr	r3, [pc, #64]	; (401c60 <system_init+0xf4>)
  401c20:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  401c22:	4b10      	ldr	r3, [pc, #64]	; (401c64 <system_init+0xf8>)
  401c24:	4798      	blx	r3
	EXTERNAL_IRQ_B_init();
  401c26:	4b10      	ldr	r3, [pc, #64]	; (401c68 <system_init+0xfc>)
  401c28:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  401c2a:	4b10      	ldr	r3, [pc, #64]	; (401c6c <system_init+0x100>)
  401c2c:	4798      	blx	r3

	PWM_0_init();
  401c2e:	4b10      	ldr	r3, [pc, #64]	; (401c70 <system_init+0x104>)
  401c30:	4798      	blx	r3

	PWM_1_init();
  401c32:	4b10      	ldr	r3, [pc, #64]	; (401c74 <system_init+0x108>)
  401c34:	4798      	blx	r3
	ENCODER_A_init();
  401c36:	4b10      	ldr	r3, [pc, #64]	; (401c78 <system_init+0x10c>)
  401c38:	4798      	blx	r3
	ENCODER_B_init();
  401c3a:	4b10      	ldr	r3, [pc, #64]	; (401c7c <system_init+0x110>)
  401c3c:	4798      	blx	r3

	delay_driver_init();
  401c3e:	4b10      	ldr	r3, [pc, #64]	; (401c80 <system_init+0x114>)
  401c40:	4798      	blx	r3

	EDBG_COM_init();
  401c42:	4b10      	ldr	r3, [pc, #64]	; (401c84 <system_init+0x118>)
  401c44:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  401c46:	4b10      	ldr	r3, [pc, #64]	; (401c88 <system_init+0x11c>)
  401c48:	4798      	blx	r3
  401c4a:	bd08      	pop	{r3, pc}
  401c4c:	004027e1 	.word	0x004027e1
  401c50:	400e0600 	.word	0x400e0600
  401c54:	400e1850 	.word	0x400e1850
  401c58:	400e0e00 	.word	0x400e0e00
  401c5c:	004017a5 	.word	0x004017a5
  401c60:	004016fd 	.word	0x004016fd
  401c64:	00401879 	.word	0x00401879
  401c68:	00401891 	.word	0x00401891
  401c6c:	004018a9 	.word	0x004018a9
  401c70:	00401941 	.word	0x00401941
  401c74:	004019c9 	.word	0x004019c9
  401c78:	00401a1d 	.word	0x00401a1d
  401c7c:	00401a7d 	.word	0x00401a7d
  401c80:	00401ac1 	.word	0x00401ac1
  401c84:	00401b39 	.word	0x00401b39
  401c88:	00401f31 	.word	0x00401f31

00401c8c <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  401c8c:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  401c8e:	6983      	ldr	r3, [r0, #24]
  401c90:	b103      	cbz	r3, 401c94 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  401c92:	4798      	blx	r3
  401c94:	bd08      	pop	{r3, pc}

00401c96 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  401c96:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  401c98:	69c3      	ldr	r3, [r0, #28]
  401c9a:	b103      	cbz	r3, 401c9e <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  401c9c:	4798      	blx	r3
  401c9e:	bd08      	pop	{r3, pc}

00401ca0 <adc_async_channel_conversion_done>:
{
  401ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401ca4:	4605      	mov	r5, r0
  401ca6:	4688      	mov	r8, r1
  401ca8:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  401caa:	6a03      	ldr	r3, [r0, #32]
  401cac:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  401cae:	6a87      	ldr	r7, [r0, #40]	; 0x28
  401cb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401cb4:	00de      	lsls	r6, r3, #3
  401cb6:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  401cb8:	f104 0a04 	add.w	sl, r4, #4
  401cbc:	b2d1      	uxtb	r1, r2
  401cbe:	4650      	mov	r0, sl
  401cc0:	4b0c      	ldr	r3, [pc, #48]	; (401cf4 <adc_async_channel_conversion_done+0x54>)
  401cc2:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  401cc4:	4628      	mov	r0, r5
  401cc6:	4b0c      	ldr	r3, [pc, #48]	; (401cf8 <adc_async_channel_conversion_done+0x58>)
  401cc8:	4798      	blx	r3
  401cca:	2801      	cmp	r0, #1
  401ccc:	d907      	bls.n	401cde <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  401cce:	ea4f 2119 	mov.w	r1, r9, lsr #8
  401cd2:	4650      	mov	r0, sl
  401cd4:	4b07      	ldr	r3, [pc, #28]	; (401cf4 <adc_async_channel_conversion_done+0x54>)
  401cd6:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  401cd8:	8aa3      	ldrh	r3, [r4, #20]
  401cda:	3301      	adds	r3, #1
  401cdc:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  401cde:	8aa3      	ldrh	r3, [r4, #20]
  401ce0:	3301      	adds	r3, #1
  401ce2:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  401ce4:	59bb      	ldr	r3, [r7, r6]
  401ce6:	b113      	cbz	r3, 401cee <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  401ce8:	4641      	mov	r1, r8
  401cea:	4628      	mov	r0, r5
  401cec:	4798      	blx	r3
  401cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401cf2:	bf00      	nop
  401cf4:	004024b9 	.word	0x004024b9
  401cf8:	004027c9 	.word	0x004027c9

00401cfc <adc_async_init>:
{
  401cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d00:	4616      	mov	r6, r2
  401d02:	461c      	mov	r4, r3
  401d04:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  401d08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  401d0a:	4607      	mov	r7, r0
  401d0c:	4689      	mov	r9, r1
  401d0e:	2800      	cmp	r0, #0
  401d10:	bf18      	it	ne
  401d12:	2900      	cmpne	r1, #0
  401d14:	d00b      	beq.n	401d2e <adc_async_init+0x32>
  401d16:	1c13      	adds	r3, r2, #0
  401d18:	bf18      	it	ne
  401d1a:	2301      	movne	r3, #1
  401d1c:	f1b8 0f00 	cmp.w	r8, #0
  401d20:	d017      	beq.n	401d52 <adc_async_init+0x56>
  401d22:	b1b3      	cbz	r3, 401d52 <adc_async_init+0x56>
  401d24:	b10d      	cbz	r5, 401d2a <adc_async_init+0x2e>
  401d26:	2001      	movs	r0, #1
  401d28:	e002      	b.n	401d30 <adc_async_init+0x34>
  401d2a:	2000      	movs	r0, #0
  401d2c:	e000      	b.n	401d30 <adc_async_init+0x34>
  401d2e:	2000      	movs	r0, #0
  401d30:	f8df b068 	ldr.w	fp, [pc, #104]	; 401d9c <adc_async_init+0xa0>
  401d34:	223f      	movs	r2, #63	; 0x3f
  401d36:	4659      	mov	r1, fp
  401d38:	f8df a064 	ldr.w	sl, [pc, #100]	; 401da0 <adc_async_init+0xa4>
  401d3c:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  401d3e:	1c60      	adds	r0, r4, #1
  401d40:	2240      	movs	r2, #64	; 0x40
  401d42:	4659      	mov	r1, fp
  401d44:	4580      	cmp	r8, r0
  401d46:	bfcc      	ite	gt
  401d48:	2000      	movgt	r0, #0
  401d4a:	2001      	movle	r0, #1
  401d4c:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  401d4e:	2300      	movs	r3, #0
  401d50:	e005      	b.n	401d5e <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  401d52:	2000      	movs	r0, #0
  401d54:	e7ec      	b.n	401d30 <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  401d56:	22ff      	movs	r2, #255	; 0xff
  401d58:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  401d5a:	3301      	adds	r3, #1
  401d5c:	b2db      	uxtb	r3, r3
  401d5e:	42a3      	cmp	r3, r4
  401d60:	d9f9      	bls.n	401d56 <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  401d62:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  401d64:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  401d68:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  401d6c:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  401d6e:	4649      	mov	r1, r9
  401d70:	4638      	mov	r0, r7
  401d72:	4b06      	ldr	r3, [pc, #24]	; (401d8c <adc_async_init+0x90>)
  401d74:	4798      	blx	r3
	if (init_status) {
  401d76:	4603      	mov	r3, r0
  401d78:	b928      	cbnz	r0, 401d86 <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  401d7a:	4a05      	ldr	r2, [pc, #20]	; (401d90 <adc_async_init+0x94>)
  401d7c:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  401d7e:	4a05      	ldr	r2, [pc, #20]	; (401d94 <adc_async_init+0x98>)
  401d80:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  401d82:	4a05      	ldr	r2, [pc, #20]	; (401d98 <adc_async_init+0x9c>)
  401d84:	607a      	str	r2, [r7, #4]
}
  401d86:	4618      	mov	r0, r3
  401d88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d8c:	00402709 	.word	0x00402709
  401d90:	00401ca1 	.word	0x00401ca1
  401d94:	00401c8d 	.word	0x00401c8d
  401d98:	00401c97 	.word	0x00401c97
  401d9c:	0040805c 	.word	0x0040805c
  401da0:	00402415 	.word	0x00402415

00401da4 <adc_async_register_channel_buffer>:
{
  401da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401da8:	460e      	mov	r6, r1
  401daa:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  401dac:	4605      	mov	r5, r0
  401dae:	4690      	mov	r8, r2
  401db0:	2800      	cmp	r0, #0
  401db2:	bf18      	it	ne
  401db4:	2a00      	cmpne	r2, #0
  401db6:	d002      	beq.n	401dbe <adc_async_register_channel_buffer+0x1a>
  401db8:	b9c3      	cbnz	r3, 401dec <adc_async_register_channel_buffer+0x48>
  401dba:	2000      	movs	r0, #0
  401dbc:	e000      	b.n	401dc0 <adc_async_register_channel_buffer+0x1c>
  401dbe:	2000      	movs	r0, #0
  401dc0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401e58 <adc_async_register_channel_buffer+0xb4>
  401dc4:	2266      	movs	r2, #102	; 0x66
  401dc6:	4649      	mov	r1, r9
  401dc8:	4c21      	ldr	r4, [pc, #132]	; (401e50 <adc_async_register_channel_buffer+0xac>)
  401dca:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  401dcc:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  401dd0:	2267      	movs	r2, #103	; 0x67
  401dd2:	4649      	mov	r1, r9
  401dd4:	42b0      	cmp	r0, r6
  401dd6:	bf34      	ite	cc
  401dd8:	2000      	movcc	r0, #0
  401dda:	2001      	movcs	r0, #1
  401ddc:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  401dde:	6a29      	ldr	r1, [r5, #32]
  401de0:	5d8b      	ldrb	r3, [r1, r6]
  401de2:	2bff      	cmp	r3, #255	; 0xff
  401de4:	d12b      	bne.n	401e3e <adc_async_register_channel_buffer+0x9a>
  401de6:	2400      	movs	r4, #0
  401de8:	4623      	mov	r3, r4
  401dea:	e003      	b.n	401df4 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  401dec:	2001      	movs	r0, #1
  401dee:	e7e7      	b.n	401dc0 <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  401df0:	3301      	adds	r3, #1
  401df2:	b2db      	uxtb	r3, r3
  401df4:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  401df8:	4293      	cmp	r3, r2
  401dfa:	d805      	bhi.n	401e08 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  401dfc:	5cca      	ldrb	r2, [r1, r3]
  401dfe:	2aff      	cmp	r2, #255	; 0xff
  401e00:	d0f6      	beq.n	401df0 <adc_async_register_channel_buffer+0x4c>
			index++;
  401e02:	3401      	adds	r4, #1
  401e04:	b2e4      	uxtb	r4, r4
  401e06:	e7f3      	b.n	401df0 <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  401e08:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  401e0c:	429c      	cmp	r4, r3
  401e0e:	d819      	bhi.n	401e44 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  401e10:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  401e12:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  401e16:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  401e1a:	4448      	add	r0, r9
  401e1c:	463a      	mov	r2, r7
  401e1e:	4641      	mov	r1, r8
  401e20:	3004      	adds	r0, #4
  401e22:	4b0c      	ldr	r3, [pc, #48]	; (401e54 <adc_async_register_channel_buffer+0xb0>)
  401e24:	4798      	blx	r3
  401e26:	4602      	mov	r2, r0
  401e28:	b978      	cbnz	r0, 401e4a <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  401e2a:	6a2b      	ldr	r3, [r5, #32]
  401e2c:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  401e2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401e30:	4499      	add	r9, r3
  401e32:	2300      	movs	r3, #0
  401e34:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  401e38:	4610      	mov	r0, r2
  401e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  401e3e:	f06f 020c 	mvn.w	r2, #12
  401e42:	e7f9      	b.n	401e38 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  401e44:	f06f 021b 	mvn.w	r2, #27
  401e48:	e7f6      	b.n	401e38 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  401e4a:	f06f 020c 	mvn.w	r2, #12
  401e4e:	e7f3      	b.n	401e38 <adc_async_register_channel_buffer+0x94>
  401e50:	00402415 	.word	0x00402415
  401e54:	00402475 	.word	0x00402475
  401e58:	0040805c 	.word	0x0040805c

00401e5c <adc_async_enable_channel>:
{
  401e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e5e:	460d      	mov	r5, r1
	ASSERT(descr);
  401e60:	4f0b      	ldr	r7, [pc, #44]	; (401e90 <adc_async_enable_channel+0x34>)
  401e62:	4604      	mov	r4, r0
  401e64:	2283      	movs	r2, #131	; 0x83
  401e66:	4639      	mov	r1, r7
  401e68:	3000      	adds	r0, #0
  401e6a:	bf18      	it	ne
  401e6c:	2001      	movne	r0, #1
  401e6e:	4e09      	ldr	r6, [pc, #36]	; (401e94 <adc_async_enable_channel+0x38>)
  401e70:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  401e72:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  401e76:	2284      	movs	r2, #132	; 0x84
  401e78:	4639      	mov	r1, r7
  401e7a:	42a8      	cmp	r0, r5
  401e7c:	bf34      	ite	cc
  401e7e:	2000      	movcc	r0, #0
  401e80:	2001      	movcs	r0, #1
  401e82:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  401e84:	4629      	mov	r1, r5
  401e86:	4620      	mov	r0, r4
  401e88:	4b03      	ldr	r3, [pc, #12]	; (401e98 <adc_async_enable_channel+0x3c>)
  401e8a:	4798      	blx	r3
}
  401e8c:	2000      	movs	r0, #0
  401e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401e90:	0040805c 	.word	0x0040805c
  401e94:	00402415 	.word	0x00402415
  401e98:	004027bd 	.word	0x004027bd

00401e9c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401e9c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  401ea0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401ea2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401ea4:	f3bf 8f5f 	dmb	sy
  401ea8:	4770      	bx	lr

00401eaa <atomic_leave_critical>:
  401eaa:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  401eae:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  401eb0:	f383 8810 	msr	PRIMASK, r3
  401eb4:	4770      	bx	lr
	...

00401eb8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  401eb8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  401eba:	4b02      	ldr	r3, [pc, #8]	; (401ec4 <delay_init+0xc>)
  401ebc:	6018      	str	r0, [r3, #0]
  401ebe:	4b02      	ldr	r3, [pc, #8]	; (401ec8 <delay_init+0x10>)
  401ec0:	4798      	blx	r3
  401ec2:	bd08      	pop	{r3, pc}
  401ec4:	20400414 	.word	0x20400414
  401ec8:	00402f91 	.word	0x00402f91

00401ecc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  401ecc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  401ece:	4b04      	ldr	r3, [pc, #16]	; (401ee0 <delay_ms+0x14>)
  401ed0:	681c      	ldr	r4, [r3, #0]
  401ed2:	4b04      	ldr	r3, [pc, #16]	; (401ee4 <delay_ms+0x18>)
  401ed4:	4798      	blx	r3
  401ed6:	4601      	mov	r1, r0
  401ed8:	4620      	mov	r0, r4
  401eda:	4b03      	ldr	r3, [pc, #12]	; (401ee8 <delay_ms+0x1c>)
  401edc:	4798      	blx	r3
  401ede:	bd10      	pop	{r4, pc}
  401ee0:	20400414 	.word	0x20400414
  401ee4:	004027cd 	.word	0x004027cd
  401ee8:	00402f9d 	.word	0x00402f9d

00401eec <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  401eec:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  401eee:	2504      	movs	r5, #4
  401ef0:	2400      	movs	r4, #0

	while (upper >= lower) {
  401ef2:	e007      	b.n	401f04 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  401ef4:	4a0d      	ldr	r2, [pc, #52]	; (401f2c <process_ext_irq+0x40>)
  401ef6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  401efa:	b1b3      	cbz	r3, 401f2a <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  401efc:	4798      	blx	r3
  401efe:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  401f00:	3a01      	subs	r2, #1
  401f02:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  401f04:	42ac      	cmp	r4, r5
  401f06:	d810      	bhi.n	401f2a <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  401f08:	192b      	adds	r3, r5, r4
  401f0a:	105b      	asrs	r3, r3, #1
  401f0c:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  401f0e:	2a03      	cmp	r2, #3
  401f10:	d80b      	bhi.n	401f2a <process_ext_irq+0x3e>
  401f12:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  401f14:	4905      	ldr	r1, [pc, #20]	; (401f2c <process_ext_irq+0x40>)
  401f16:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  401f1a:	6849      	ldr	r1, [r1, #4]
  401f1c:	4281      	cmp	r1, r0
  401f1e:	d0e9      	beq.n	401ef4 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  401f20:	4281      	cmp	r1, r0
  401f22:	d2ed      	bcs.n	401f00 <process_ext_irq+0x14>
			lower = middle + 1;
  401f24:	3201      	adds	r2, #1
  401f26:	b2d4      	uxtb	r4, r2
  401f28:	e7ec      	b.n	401f04 <process_ext_irq+0x18>
  401f2a:	bd38      	pop	{r3, r4, r5, pc}
  401f2c:	20400418 	.word	0x20400418

00401f30 <ext_irq_init>:
{
  401f30:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401f32:	2300      	movs	r3, #0
  401f34:	e00a      	b.n	401f4c <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  401f36:	4a08      	ldr	r2, [pc, #32]	; (401f58 <ext_irq_init+0x28>)
  401f38:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  401f3c:	f04f 30ff 	mov.w	r0, #4294967295
  401f40:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  401f42:	2100      	movs	r1, #0
  401f44:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401f48:	3301      	adds	r3, #1
  401f4a:	b29b      	uxth	r3, r3
  401f4c:	2b03      	cmp	r3, #3
  401f4e:	d9f2      	bls.n	401f36 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  401f50:	4802      	ldr	r0, [pc, #8]	; (401f5c <ext_irq_init+0x2c>)
  401f52:	4b03      	ldr	r3, [pc, #12]	; (401f60 <ext_irq_init+0x30>)
  401f54:	4798      	blx	r3
}
  401f56:	bd08      	pop	{r3, pc}
  401f58:	20400418 	.word	0x20400418
  401f5c:	00401eed 	.word	0x00401eed
  401f60:	00402b3d 	.word	0x00402b3d

00401f64 <ext_irq_register>:
{
  401f64:	b5f0      	push	{r4, r5, r6, r7, lr}
  401f66:	b083      	sub	sp, #12
  401f68:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  401f6a:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  401f6c:	2b03      	cmp	r3, #3
  401f6e:	d80e      	bhi.n	401f8e <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  401f70:	4618      	mov	r0, r3
  401f72:	4a2e      	ldr	r2, [pc, #184]	; (40202c <ext_irq_register+0xc8>)
  401f74:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  401f78:	6852      	ldr	r2, [r2, #4]
  401f7a:	42aa      	cmp	r2, r5
  401f7c:	d002      	beq.n	401f84 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  401f7e:	3301      	adds	r3, #1
  401f80:	b2db      	uxtb	r3, r3
  401f82:	e7f3      	b.n	401f6c <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  401f84:	4b29      	ldr	r3, [pc, #164]	; (40202c <ext_irq_register+0xc8>)
  401f86:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  401f8a:	2701      	movs	r7, #1
			break;
  401f8c:	e000      	b.n	401f90 <ext_irq_register+0x2c>
	bool    found = false;
  401f8e:	2700      	movs	r7, #0
	if (NULL == cb) {
  401f90:	b159      	cbz	r1, 401faa <ext_irq_register+0x46>
	if (!found) {
  401f92:	2f00      	cmp	r7, #0
  401f94:	d13d      	bne.n	402012 <ext_irq_register+0xae>
  401f96:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401f98:	2e03      	cmp	r6, #3
  401f9a:	d813      	bhi.n	401fc4 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  401f9c:	4b23      	ldr	r3, [pc, #140]	; (40202c <ext_irq_register+0xc8>)
  401f9e:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  401fa2:	b143      	cbz	r3, 401fb6 <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401fa4:	3601      	adds	r6, #1
  401fa6:	b2f6      	uxtb	r6, r6
  401fa8:	e7f6      	b.n	401f98 <ext_irq_register+0x34>
		if (!found) {
  401faa:	2f00      	cmp	r7, #0
  401fac:	d038      	beq.n	402020 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  401fae:	4628      	mov	r0, r5
  401fb0:	4b1f      	ldr	r3, [pc, #124]	; (402030 <ext_irq_register+0xcc>)
  401fb2:	4798      	blx	r3
  401fb4:	e032      	b.n	40201c <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  401fb6:	4b1d      	ldr	r3, [pc, #116]	; (40202c <ext_irq_register+0xc8>)
  401fb8:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  401fbc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  401fc0:	605d      	str	r5, [r3, #4]
				found           = true;
  401fc2:	2701      	movs	r7, #1
  401fc4:	2300      	movs	r3, #0
  401fc6:	e001      	b.n	401fcc <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  401fc8:	3301      	adds	r3, #1
  401fca:	b2db      	uxtb	r3, r3
  401fcc:	2b03      	cmp	r3, #3
  401fce:	bf98      	it	ls
  401fd0:	2e03      	cmpls	r6, #3
  401fd2:	d81e      	bhi.n	402012 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  401fd4:	46b6      	mov	lr, r6
  401fd6:	4a15      	ldr	r2, [pc, #84]	; (40202c <ext_irq_register+0xc8>)
  401fd8:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  401fdc:	6848      	ldr	r0, [r1, #4]
  401fde:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  401fe2:	6852      	ldr	r2, [r2, #4]
  401fe4:	4290      	cmp	r0, r2
  401fe6:	d2ef      	bcs.n	401fc8 <ext_irq_register+0x64>
  401fe8:	f1b2 3fff 	cmp.w	r2, #4294967295
  401fec:	d0ec      	beq.n	401fc8 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  401fee:	4c0f      	ldr	r4, [pc, #60]	; (40202c <ext_irq_register+0xc8>)
  401ff0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  401ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
  401ff8:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  401ffc:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  402000:	e894 0003 	ldmia.w	r4, {r0, r1}
  402004:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  402008:	e89d 0003 	ldmia.w	sp, {r0, r1}
  40200c:	e884 0003 	stmia.w	r4, {r0, r1}
  402010:	e7da      	b.n	401fc8 <ext_irq_register+0x64>
	if (!found) {
  402012:	b147      	cbz	r7, 402026 <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  402014:	2101      	movs	r1, #1
  402016:	4628      	mov	r0, r5
  402018:	4b05      	ldr	r3, [pc, #20]	; (402030 <ext_irq_register+0xcc>)
  40201a:	4798      	blx	r3
}
  40201c:	b003      	add	sp, #12
  40201e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  402020:	f06f 000c 	mvn.w	r0, #12
  402024:	e7fa      	b.n	40201c <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  402026:	f06f 000c 	mvn.w	r0, #12
  40202a:	e7f7      	b.n	40201c <ext_irq_register+0xb8>
  40202c:	20400418 	.word	0x20400418
  402030:	00402b6d 	.word	0x00402b6d

00402034 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  402034:	b570      	push	{r4, r5, r6, lr}
  402036:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  402038:	4604      	mov	r4, r0
  40203a:	460d      	mov	r5, r1
  40203c:	2800      	cmp	r0, #0
  40203e:	bf18      	it	ne
  402040:	2900      	cmpne	r1, #0
  402042:	bf14      	ite	ne
  402044:	2001      	movne	r0, #1
  402046:	2000      	moveq	r0, #0
  402048:	2234      	movs	r2, #52	; 0x34
  40204a:	4904      	ldr	r1, [pc, #16]	; (40205c <io_write+0x28>)
  40204c:	4b04      	ldr	r3, [pc, #16]	; (402060 <io_write+0x2c>)
  40204e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  402050:	6823      	ldr	r3, [r4, #0]
  402052:	4632      	mov	r2, r6
  402054:	4629      	mov	r1, r5
  402056:	4620      	mov	r0, r4
  402058:	4798      	blx	r3
}
  40205a:	bd70      	pop	{r4, r5, r6, pc}
  40205c:	00408078 	.word	0x00408078
  402060:	00402415 	.word	0x00402415

00402064 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  402064:	b570      	push	{r4, r5, r6, lr}
  402066:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  402068:	4604      	mov	r4, r0
  40206a:	460d      	mov	r5, r1
  40206c:	2800      	cmp	r0, #0
  40206e:	bf18      	it	ne
  402070:	2900      	cmpne	r1, #0
  402072:	bf14      	ite	ne
  402074:	2001      	movne	r0, #1
  402076:	2000      	moveq	r0, #0
  402078:	223d      	movs	r2, #61	; 0x3d
  40207a:	4904      	ldr	r1, [pc, #16]	; (40208c <io_read+0x28>)
  40207c:	4b04      	ldr	r3, [pc, #16]	; (402090 <io_read+0x2c>)
  40207e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  402080:	6863      	ldr	r3, [r4, #4]
  402082:	4632      	mov	r2, r6
  402084:	4629      	mov	r1, r5
  402086:	4620      	mov	r0, r4
  402088:	4798      	blx	r3
}
  40208a:	bd70      	pop	{r4, r5, r6, pc}
  40208c:	00408078 	.word	0x00408078
  402090:	00402415 	.word	0x00402415

00402094 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  402094:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  402096:	6943      	ldr	r3, [r0, #20]
  402098:	b103      	cbz	r3, 40209c <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  40209a:	4798      	blx	r3
  40209c:	bd08      	pop	{r3, pc}

0040209e <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  40209e:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  4020a0:	6983      	ldr	r3, [r0, #24]
  4020a2:	b103      	cbz	r3, 4020a6 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  4020a4:	4798      	blx	r3
  4020a6:	bd08      	pop	{r3, pc}

004020a8 <pwm_init>:
{
  4020a8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4020aa:	4604      	mov	r4, r0
  4020ac:	460d      	mov	r5, r1
  4020ae:	2800      	cmp	r0, #0
  4020b0:	bf18      	it	ne
  4020b2:	2900      	cmpne	r1, #0
  4020b4:	bf14      	ite	ne
  4020b6:	2001      	movne	r0, #1
  4020b8:	2000      	moveq	r0, #0
  4020ba:	2233      	movs	r2, #51	; 0x33
  4020bc:	4906      	ldr	r1, [pc, #24]	; (4020d8 <pwm_init+0x30>)
  4020be:	4b07      	ldr	r3, [pc, #28]	; (4020dc <pwm_init+0x34>)
  4020c0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  4020c2:	4629      	mov	r1, r5
  4020c4:	4620      	mov	r0, r4
  4020c6:	4b06      	ldr	r3, [pc, #24]	; (4020e0 <pwm_init+0x38>)
  4020c8:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  4020ca:	4b06      	ldr	r3, [pc, #24]	; (4020e4 <pwm_init+0x3c>)
  4020cc:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  4020ce:	4b06      	ldr	r3, [pc, #24]	; (4020e8 <pwm_init+0x40>)
  4020d0:	6063      	str	r3, [r4, #4]
}
  4020d2:	2000      	movs	r0, #0
  4020d4:	bd38      	pop	{r3, r4, r5, pc}
  4020d6:	bf00      	nop
  4020d8:	0040808c 	.word	0x0040808c
  4020dc:	00402415 	.word	0x00402415
  4020e0:	00402d0d 	.word	0x00402d0d
  4020e4:	00402095 	.word	0x00402095
  4020e8:	0040209f 	.word	0x0040209f

004020ec <pwm_enable>:
{
  4020ec:	b510      	push	{r4, lr}
	ASSERT(descr);
  4020ee:	4604      	mov	r4, r0
  4020f0:	224a      	movs	r2, #74	; 0x4a
  4020f2:	4909      	ldr	r1, [pc, #36]	; (402118 <pwm_enable+0x2c>)
  4020f4:	3000      	adds	r0, #0
  4020f6:	bf18      	it	ne
  4020f8:	2001      	movne	r0, #1
  4020fa:	4b08      	ldr	r3, [pc, #32]	; (40211c <pwm_enable+0x30>)
  4020fc:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  4020fe:	4620      	mov	r0, r4
  402100:	4b07      	ldr	r3, [pc, #28]	; (402120 <pwm_enable+0x34>)
  402102:	4798      	blx	r3
  402104:	b920      	cbnz	r0, 402110 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  402106:	4620      	mov	r0, r4
  402108:	4b06      	ldr	r3, [pc, #24]	; (402124 <pwm_enable+0x38>)
  40210a:	4798      	blx	r3
	return ERR_NONE;
  40210c:	2000      	movs	r0, #0
  40210e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  402110:	f06f 0010 	mvn.w	r0, #16
}
  402114:	bd10      	pop	{r4, pc}
  402116:	bf00      	nop
  402118:	0040808c 	.word	0x0040808c
  40211c:	00402415 	.word	0x00402415
  402120:	00402ee9 	.word	0x00402ee9
  402124:	00402e45 	.word	0x00402e45

00402128 <pwm_register_callback>:
{
  402128:	b570      	push	{r4, r5, r6, lr}
	switch (type) {
  40212a:	460d      	mov	r5, r1
  40212c:	b121      	cbz	r1, 402138 <pwm_register_callback+0x10>
  40212e:	2901      	cmp	r1, #1
  402130:	d015      	beq.n	40215e <pwm_register_callback+0x36>
		return ERR_INVALID_ARG;
  402132:	f06f 000c 	mvn.w	r0, #12
}
  402136:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.period = cb;
  402138:	6142      	str	r2, [r0, #20]
  40213a:	4616      	mov	r6, r2
  40213c:	4604      	mov	r4, r0
	ASSERT(descr);
  40213e:	2272      	movs	r2, #114	; 0x72
  402140:	4908      	ldr	r1, [pc, #32]	; (402164 <pwm_register_callback+0x3c>)
  402142:	3000      	adds	r0, #0
  402144:	bf18      	it	ne
  402146:	2001      	movne	r0, #1
  402148:	4b07      	ldr	r3, [pc, #28]	; (402168 <pwm_register_callback+0x40>)
  40214a:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
  40214c:	1c32      	adds	r2, r6, #0
  40214e:	bf18      	it	ne
  402150:	2201      	movne	r2, #1
  402152:	4629      	mov	r1, r5
  402154:	4620      	mov	r0, r4
  402156:	4b05      	ldr	r3, [pc, #20]	; (40216c <pwm_register_callback+0x44>)
  402158:	4798      	blx	r3
	return ERR_NONE;
  40215a:	2000      	movs	r0, #0
  40215c:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
  40215e:	6182      	str	r2, [r0, #24]
		break;
  402160:	e7eb      	b.n	40213a <pwm_register_callback+0x12>
  402162:	bf00      	nop
  402164:	0040808c 	.word	0x0040808c
  402168:	00402415 	.word	0x00402415
  40216c:	00402f19 	.word	0x00402f19

00402170 <pwm_set_parameters>:
{
  402170:	b570      	push	{r4, r5, r6, lr}
  402172:	460d      	mov	r5, r1
  402174:	4616      	mov	r6, r2
	ASSERT(descr);
  402176:	4604      	mov	r4, r0
  402178:	227c      	movs	r2, #124	; 0x7c
  40217a:	4906      	ldr	r1, [pc, #24]	; (402194 <pwm_set_parameters+0x24>)
  40217c:	3000      	adds	r0, #0
  40217e:	bf18      	it	ne
  402180:	2001      	movne	r0, #1
  402182:	4b05      	ldr	r3, [pc, #20]	; (402198 <pwm_set_parameters+0x28>)
  402184:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  402186:	4632      	mov	r2, r6
  402188:	4629      	mov	r1, r5
  40218a:	4620      	mov	r0, r4
  40218c:	4b03      	ldr	r3, [pc, #12]	; (40219c <pwm_set_parameters+0x2c>)
  40218e:	4798      	blx	r3
}
  402190:	2000      	movs	r0, #0
  402192:	bd70      	pop	{r4, r5, r6, pc}
  402194:	0040808c 	.word	0x0040808c
  402198:	00402415 	.word	0x00402415
  40219c:	00402e89 	.word	0x00402e89

004021a0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  4021a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  4021a2:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  4021a4:	b117      	cbz	r7, 4021ac <timer_add_timer_task+0xc>
  4021a6:	463c      	mov	r4, r7
  4021a8:	2600      	movs	r6, #0
  4021aa:	e00b      	b.n	4021c4 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  4021ac:	4b0e      	ldr	r3, [pc, #56]	; (4021e8 <timer_add_timer_task+0x48>)
  4021ae:	4798      	blx	r3
		return;
  4021b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  4021b2:	68a5      	ldr	r5, [r4, #8]
  4021b4:	442b      	add	r3, r5
  4021b6:	1a9b      	subs	r3, r3, r2
  4021b8:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  4021ba:	688d      	ldr	r5, [r1, #8]
  4021bc:	42ab      	cmp	r3, r5
  4021be:	d209      	bcs.n	4021d4 <timer_add_timer_task+0x34>
			break;
		prev = it;
  4021c0:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  4021c2:	6824      	ldr	r4, [r4, #0]
  4021c4:	b134      	cbz	r4, 4021d4 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  4021c6:	6863      	ldr	r3, [r4, #4]
  4021c8:	4293      	cmp	r3, r2
  4021ca:	d8f2      	bhi.n	4021b2 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  4021cc:	68a5      	ldr	r5, [r4, #8]
  4021ce:	1a9b      	subs	r3, r3, r2
  4021d0:	442b      	add	r3, r5
  4021d2:	e7f2      	b.n	4021ba <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  4021d4:	42bc      	cmp	r4, r7
  4021d6:	d003      	beq.n	4021e0 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  4021d8:	4630      	mov	r0, r6
  4021da:	4b04      	ldr	r3, [pc, #16]	; (4021ec <timer_add_timer_task+0x4c>)
  4021dc:	4798      	blx	r3
  4021de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  4021e0:	4b01      	ldr	r3, [pc, #4]	; (4021e8 <timer_add_timer_task+0x48>)
  4021e2:	4798      	blx	r3
  4021e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021e6:	bf00      	nop
  4021e8:	00402431 	.word	0x00402431
  4021ec:	0040245d 	.word	0x0040245d

004021f0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  4021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4021f2:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  4021f4:	6906      	ldr	r6, [r0, #16]
  4021f6:	3601      	adds	r6, #1
  4021f8:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  4021fa:	7e03      	ldrb	r3, [r0, #24]
  4021fc:	f013 0f01 	tst.w	r3, #1
  402200:	d105      	bne.n	40220e <timer_process_counted+0x1e>
  402202:	7e03      	ldrb	r3, [r0, #24]
  402204:	f013 0f02 	tst.w	r3, #2
  402208:	d101      	bne.n	40220e <timer_process_counted+0x1e>
  40220a:	4605      	mov	r5, r0
  40220c:	e009      	b.n	402222 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  40220e:	7e03      	ldrb	r3, [r0, #24]
  402210:	f043 0302 	orr.w	r3, r3, #2
  402214:	7603      	strb	r3, [r0, #24]
		return;
  402216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402218:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  40221a:	68e3      	ldr	r3, [r4, #12]
  40221c:	4620      	mov	r0, r4
  40221e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  402220:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  402222:	b19c      	cbz	r4, 40224c <timer_process_counted+0x5c>
  402224:	6863      	ldr	r3, [r4, #4]
  402226:	1af3      	subs	r3, r6, r3
  402228:	68a2      	ldr	r2, [r4, #8]
  40222a:	4293      	cmp	r3, r2
  40222c:	d30e      	bcc.n	40224c <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  40222e:	f105 0714 	add.w	r7, r5, #20
  402232:	4638      	mov	r0, r7
  402234:	4b06      	ldr	r3, [pc, #24]	; (402250 <timer_process_counted+0x60>)
  402236:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  402238:	7c23      	ldrb	r3, [r4, #16]
  40223a:	2b01      	cmp	r3, #1
  40223c:	d1ec      	bne.n	402218 <timer_process_counted+0x28>
			tmp->time_label = time;
  40223e:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  402240:	4632      	mov	r2, r6
  402242:	4621      	mov	r1, r4
  402244:	4638      	mov	r0, r7
  402246:	4b03      	ldr	r3, [pc, #12]	; (402254 <timer_process_counted+0x64>)
  402248:	4798      	blx	r3
  40224a:	e7e5      	b.n	402218 <timer_process_counted+0x28>
  40224c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40224e:	bf00      	nop
  402250:	00402465 	.word	0x00402465
  402254:	004021a1 	.word	0x004021a1

00402258 <timer_init>:
{
  402258:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40225a:	4604      	mov	r4, r0
  40225c:	460d      	mov	r5, r1
  40225e:	2800      	cmp	r0, #0
  402260:	bf18      	it	ne
  402262:	2900      	cmpne	r1, #0
  402264:	bf14      	ite	ne
  402266:	2001      	movne	r0, #1
  402268:	2000      	moveq	r0, #0
  40226a:	223b      	movs	r2, #59	; 0x3b
  40226c:	4905      	ldr	r1, [pc, #20]	; (402284 <timer_init+0x2c>)
  40226e:	4b06      	ldr	r3, [pc, #24]	; (402288 <timer_init+0x30>)
  402270:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  402272:	4629      	mov	r1, r5
  402274:	4620      	mov	r0, r4
  402276:	4b05      	ldr	r3, [pc, #20]	; (40228c <timer_init+0x34>)
  402278:	4798      	blx	r3
	descr->time                           = 0;
  40227a:	2000      	movs	r0, #0
  40227c:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  40227e:	4b04      	ldr	r3, [pc, #16]	; (402290 <timer_init+0x38>)
  402280:	6023      	str	r3, [r4, #0]
}
  402282:	bd38      	pop	{r3, r4, r5, pc}
  402284:	004080a4 	.word	0x004080a4
  402288:	00402415 	.word	0x00402415
  40228c:	00403055 	.word	0x00403055
  402290:	004021f1 	.word	0x004021f1

00402294 <timer_start>:
{
  402294:	b510      	push	{r4, lr}
	ASSERT(descr);
  402296:	4604      	mov	r4, r0
  402298:	2253      	movs	r2, #83	; 0x53
  40229a:	4909      	ldr	r1, [pc, #36]	; (4022c0 <timer_start+0x2c>)
  40229c:	3000      	adds	r0, #0
  40229e:	bf18      	it	ne
  4022a0:	2001      	movne	r0, #1
  4022a2:	4b08      	ldr	r3, [pc, #32]	; (4022c4 <timer_start+0x30>)
  4022a4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  4022a6:	4620      	mov	r0, r4
  4022a8:	4b07      	ldr	r3, [pc, #28]	; (4022c8 <timer_start+0x34>)
  4022aa:	4798      	blx	r3
  4022ac:	b920      	cbnz	r0, 4022b8 <timer_start+0x24>
	_timer_start(&descr->device);
  4022ae:	4620      	mov	r0, r4
  4022b0:	4b06      	ldr	r3, [pc, #24]	; (4022cc <timer_start+0x38>)
  4022b2:	4798      	blx	r3
	return ERR_NONE;
  4022b4:	2000      	movs	r0, #0
  4022b6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4022b8:	f06f 0010 	mvn.w	r0, #16
}
  4022bc:	bd10      	pop	{r4, pc}
  4022be:	bf00      	nop
  4022c0:	004080a4 	.word	0x004080a4
  4022c4:	00402415 	.word	0x00402415
  4022c8:	0040313d 	.word	0x0040313d
  4022cc:	00403131 	.word	0x00403131

004022d0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4022d2:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4022d4:	4605      	mov	r5, r0
  4022d6:	460f      	mov	r7, r1
  4022d8:	2800      	cmp	r0, #0
  4022da:	bf18      	it	ne
  4022dc:	2900      	cmpne	r1, #0
  4022de:	d002      	beq.n	4022e6 <usart_sync_write+0x16>
  4022e0:	bb0a      	cbnz	r2, 402326 <usart_sync_write+0x56>
  4022e2:	2000      	movs	r0, #0
  4022e4:	e000      	b.n	4022e8 <usart_sync_write+0x18>
  4022e6:	2000      	movs	r0, #0
  4022e8:	22f1      	movs	r2, #241	; 0xf1
  4022ea:	4910      	ldr	r1, [pc, #64]	; (40232c <usart_sync_write+0x5c>)
  4022ec:	4b10      	ldr	r3, [pc, #64]	; (402330 <usart_sync_write+0x60>)
  4022ee:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  4022f0:	f105 0408 	add.w	r4, r5, #8
  4022f4:	4620      	mov	r0, r4
  4022f6:	4b0f      	ldr	r3, [pc, #60]	; (402334 <usart_sync_write+0x64>)
  4022f8:	4798      	blx	r3
  4022fa:	2800      	cmp	r0, #0
  4022fc:	d0f8      	beq.n	4022f0 <usart_sync_write+0x20>
  4022fe:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  402300:	5d79      	ldrb	r1, [r7, r5]
  402302:	4620      	mov	r0, r4
  402304:	4b0c      	ldr	r3, [pc, #48]	; (402338 <usart_sync_write+0x68>)
  402306:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  402308:	4620      	mov	r0, r4
  40230a:	4b0a      	ldr	r3, [pc, #40]	; (402334 <usart_sync_write+0x64>)
  40230c:	4798      	blx	r3
  40230e:	2800      	cmp	r0, #0
  402310:	d0fa      	beq.n	402308 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  402312:	3501      	adds	r5, #1
  402314:	42b5      	cmp	r5, r6
  402316:	d3f3      	bcc.n	402300 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  402318:	4620      	mov	r0, r4
  40231a:	4b08      	ldr	r3, [pc, #32]	; (40233c <usart_sync_write+0x6c>)
  40231c:	4798      	blx	r3
  40231e:	2800      	cmp	r0, #0
  402320:	d0fa      	beq.n	402318 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  402322:	4628      	mov	r0, r5
  402324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  402326:	2001      	movs	r0, #1
  402328:	e7de      	b.n	4022e8 <usart_sync_write+0x18>
  40232a:	bf00      	nop
  40232c:	004080bc 	.word	0x004080bc
  402330:	00402415 	.word	0x00402415
  402334:	00403319 	.word	0x00403319
  402338:	004032d1 	.word	0x004032d1
  40233c:	00403341 	.word	0x00403341

00402340 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  402340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402344:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  402346:	4605      	mov	r5, r0
  402348:	4688      	mov	r8, r1
  40234a:	2800      	cmp	r0, #0
  40234c:	bf18      	it	ne
  40234e:	2900      	cmpne	r1, #0
  402350:	d002      	beq.n	402358 <usart_sync_read+0x18>
  402352:	b9d2      	cbnz	r2, 40238a <usart_sync_read+0x4a>
  402354:	2000      	movs	r0, #0
  402356:	e000      	b.n	40235a <usart_sync_read+0x1a>
  402358:	2000      	movs	r0, #0
  40235a:	f44f 7286 	mov.w	r2, #268	; 0x10c
  40235e:	490c      	ldr	r1, [pc, #48]	; (402390 <usart_sync_read+0x50>)
  402360:	4b0c      	ldr	r3, [pc, #48]	; (402394 <usart_sync_read+0x54>)
  402362:	4798      	blx	r3
	uint32_t                      offset = 0;
  402364:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  402366:	f105 0408 	add.w	r4, r5, #8
  40236a:	4620      	mov	r0, r4
  40236c:	4b0a      	ldr	r3, [pc, #40]	; (402398 <usart_sync_read+0x58>)
  40236e:	4798      	blx	r3
  402370:	2800      	cmp	r0, #0
  402372:	d0f8      	beq.n	402366 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  402374:	4620      	mov	r0, r4
  402376:	4b09      	ldr	r3, [pc, #36]	; (40239c <usart_sync_read+0x5c>)
  402378:	4798      	blx	r3
  40237a:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  40237e:	3601      	adds	r6, #1
  402380:	42be      	cmp	r6, r7
  402382:	d3f0      	bcc.n	402366 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  402384:	4630      	mov	r0, r6
  402386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  40238a:	2001      	movs	r0, #1
  40238c:	e7e5      	b.n	40235a <usart_sync_read+0x1a>
  40238e:	bf00      	nop
  402390:	004080bc 	.word	0x004080bc
  402394:	00402415 	.word	0x00402415
  402398:	00403369 	.word	0x00403369
  40239c:	004032f5 	.word	0x004032f5

004023a0 <usart_sync_init>:
{
  4023a0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4023a2:	4604      	mov	r4, r0
  4023a4:	460d      	mov	r5, r1
  4023a6:	2800      	cmp	r0, #0
  4023a8:	bf18      	it	ne
  4023aa:	2900      	cmpne	r1, #0
  4023ac:	bf14      	ite	ne
  4023ae:	2001      	movne	r0, #1
  4023b0:	2000      	moveq	r0, #0
  4023b2:	2234      	movs	r2, #52	; 0x34
  4023b4:	4907      	ldr	r1, [pc, #28]	; (4023d4 <usart_sync_init+0x34>)
  4023b6:	4b08      	ldr	r3, [pc, #32]	; (4023d8 <usart_sync_init+0x38>)
  4023b8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  4023ba:	4629      	mov	r1, r5
  4023bc:	f104 0008 	add.w	r0, r4, #8
  4023c0:	4b06      	ldr	r3, [pc, #24]	; (4023dc <usart_sync_init+0x3c>)
  4023c2:	4798      	blx	r3
	if (init_status) {
  4023c4:	4603      	mov	r3, r0
  4023c6:	b918      	cbnz	r0, 4023d0 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  4023c8:	4a05      	ldr	r2, [pc, #20]	; (4023e0 <usart_sync_init+0x40>)
  4023ca:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  4023cc:	4a05      	ldr	r2, [pc, #20]	; (4023e4 <usart_sync_init+0x44>)
  4023ce:	6022      	str	r2, [r4, #0]
}
  4023d0:	4618      	mov	r0, r3
  4023d2:	bd38      	pop	{r3, r4, r5, pc}
  4023d4:	004080bc 	.word	0x004080bc
  4023d8:	00402415 	.word	0x00402415
  4023dc:	00403265 	.word	0x00403265
  4023e0:	00402341 	.word	0x00402341
  4023e4:	004022d1 	.word	0x004022d1

004023e8 <usart_sync_enable>:
{
  4023e8:	b510      	push	{r4, lr}
	ASSERT(descr);
  4023ea:	4604      	mov	r4, r0
  4023ec:	2253      	movs	r2, #83	; 0x53
  4023ee:	4906      	ldr	r1, [pc, #24]	; (402408 <usart_sync_enable+0x20>)
  4023f0:	3000      	adds	r0, #0
  4023f2:	bf18      	it	ne
  4023f4:	2001      	movne	r0, #1
  4023f6:	4b05      	ldr	r3, [pc, #20]	; (40240c <usart_sync_enable+0x24>)
  4023f8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  4023fa:	f104 0008 	add.w	r0, r4, #8
  4023fe:	4b04      	ldr	r3, [pc, #16]	; (402410 <usart_sync_enable+0x28>)
  402400:	4798      	blx	r3
}
  402402:	2000      	movs	r0, #0
  402404:	bd10      	pop	{r4, pc}
  402406:	bf00      	nop
  402408:	004080bc 	.word	0x004080bc
  40240c:	00402415 	.word	0x00402415
  402410:	0040329d 	.word	0x0040329d

00402414 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  402414:	b900      	cbnz	r0, 402418 <assert+0x4>
		__asm("BKPT #0");
  402416:	be00      	bkpt	0x0000
  402418:	4770      	bx	lr

0040241a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  40241a:	6803      	ldr	r3, [r0, #0]
  40241c:	b11b      	cbz	r3, 402426 <is_list_element+0xc>
		if (it == element) {
  40241e:	428b      	cmp	r3, r1
  402420:	d003      	beq.n	40242a <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  402422:	681b      	ldr	r3, [r3, #0]
  402424:	e7fa      	b.n	40241c <is_list_element+0x2>
			return true;
		}
	}

	return false;
  402426:	2000      	movs	r0, #0
  402428:	4770      	bx	lr
			return true;
  40242a:	2001      	movs	r0, #1
}
  40242c:	4770      	bx	lr
	...

00402430 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  402430:	b538      	push	{r3, r4, r5, lr}
  402432:	4604      	mov	r4, r0
  402434:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  402436:	4b06      	ldr	r3, [pc, #24]	; (402450 <list_insert_as_head+0x20>)
  402438:	4798      	blx	r3
  40243a:	f080 0001 	eor.w	r0, r0, #1
  40243e:	2239      	movs	r2, #57	; 0x39
  402440:	4904      	ldr	r1, [pc, #16]	; (402454 <list_insert_as_head+0x24>)
  402442:	b2c0      	uxtb	r0, r0
  402444:	4b04      	ldr	r3, [pc, #16]	; (402458 <list_insert_as_head+0x28>)
  402446:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  402448:	6823      	ldr	r3, [r4, #0]
  40244a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  40244c:	6025      	str	r5, [r4, #0]
  40244e:	bd38      	pop	{r3, r4, r5, pc}
  402450:	0040241b 	.word	0x0040241b
  402454:	004080d8 	.word	0x004080d8
  402458:	00402415 	.word	0x00402415

0040245c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  40245c:	6803      	ldr	r3, [r0, #0]
  40245e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  402460:	6001      	str	r1, [r0, #0]
  402462:	4770      	bx	lr

00402464 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  402464:	6803      	ldr	r3, [r0, #0]
  402466:	b11b      	cbz	r3, 402470 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  402468:	681a      	ldr	r2, [r3, #0]
  40246a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  40246c:	4618      	mov	r0, r3
  40246e:	4770      	bx	lr
	}

	return NULL;
  402470:	2000      	movs	r0, #0
}
  402472:	4770      	bx	lr

00402474 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  402474:	b570      	push	{r4, r5, r6, lr}
  402476:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  402478:	4604      	mov	r4, r0
  40247a:	460e      	mov	r6, r1
  40247c:	2800      	cmp	r0, #0
  40247e:	bf18      	it	ne
  402480:	2900      	cmpne	r1, #0
  402482:	d002      	beq.n	40248a <ringbuffer_init+0x16>
  402484:	b97a      	cbnz	r2, 4024a6 <ringbuffer_init+0x32>
  402486:	2000      	movs	r0, #0
  402488:	e000      	b.n	40248c <ringbuffer_init+0x18>
  40248a:	2000      	movs	r0, #0
  40248c:	2228      	movs	r2, #40	; 0x28
  40248e:	4908      	ldr	r1, [pc, #32]	; (4024b0 <ringbuffer_init+0x3c>)
  402490:	4b08      	ldr	r3, [pc, #32]	; (4024b4 <ringbuffer_init+0x40>)
  402492:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  402494:	1e6b      	subs	r3, r5, #1
  402496:	421d      	tst	r5, r3
  402498:	d107      	bne.n	4024aa <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  40249a:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  40249c:	2000      	movs	r0, #0
  40249e:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  4024a0:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  4024a2:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  4024a4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  4024a6:	2001      	movs	r0, #1
  4024a8:	e7f0      	b.n	40248c <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  4024aa:	f06f 000c 	mvn.w	r0, #12
}
  4024ae:	bd70      	pop	{r4, r5, r6, pc}
  4024b0:	004080f8 	.word	0x004080f8
  4024b4:	00402415 	.word	0x00402415

004024b8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  4024b8:	b538      	push	{r3, r4, r5, lr}
  4024ba:	460d      	mov	r5, r1
	ASSERT(rb);
  4024bc:	4604      	mov	r4, r0
  4024be:	2251      	movs	r2, #81	; 0x51
  4024c0:	490b      	ldr	r1, [pc, #44]	; (4024f0 <ringbuffer_put+0x38>)
  4024c2:	3000      	adds	r0, #0
  4024c4:	bf18      	it	ne
  4024c6:	2001      	movne	r0, #1
  4024c8:	4b0a      	ldr	r3, [pc, #40]	; (4024f4 <ringbuffer_put+0x3c>)
  4024ca:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  4024cc:	6822      	ldr	r2, [r4, #0]
  4024ce:	68e3      	ldr	r3, [r4, #12]
  4024d0:	6861      	ldr	r1, [r4, #4]
  4024d2:	400b      	ands	r3, r1
  4024d4:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  4024d6:	68e3      	ldr	r3, [r4, #12]
  4024d8:	68a2      	ldr	r2, [r4, #8]
  4024da:	1a9a      	subs	r2, r3, r2
  4024dc:	6861      	ldr	r1, [r4, #4]
  4024de:	428a      	cmp	r2, r1
  4024e0:	d901      	bls.n	4024e6 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  4024e2:	1a59      	subs	r1, r3, r1
  4024e4:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  4024e6:	3301      	adds	r3, #1
  4024e8:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  4024ea:	2000      	movs	r0, #0
  4024ec:	bd38      	pop	{r3, r4, r5, pc}
  4024ee:	bf00      	nop
  4024f0:	004080f8 	.word	0x004080f8
  4024f4:	00402415 	.word	0x00402415

004024f8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  4024f8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  4024fa:	4a06      	ldr	r2, [pc, #24]	; (402514 <_sbrk+0x1c>)
  4024fc:	6812      	ldr	r2, [r2, #0]
  4024fe:	b122      	cbz	r2, 40250a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  402500:	4a04      	ldr	r2, [pc, #16]	; (402514 <_sbrk+0x1c>)
  402502:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  402504:	4403      	add	r3, r0
  402506:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  402508:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40250a:	4903      	ldr	r1, [pc, #12]	; (402518 <_sbrk+0x20>)
  40250c:	4a01      	ldr	r2, [pc, #4]	; (402514 <_sbrk+0x1c>)
  40250e:	6011      	str	r1, [r2, #0]
  402510:	e7f6      	b.n	402500 <_sbrk+0x8>
  402512:	bf00      	nop
  402514:	20400438 	.word	0x20400438
  402518:	20400f68 	.word	0x20400f68

0040251c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  40251c:	f04f 30ff 	mov.w	r0, #4294967295
  402520:	4770      	bx	lr

00402522 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  402522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402526:	604b      	str	r3, [r1, #4]

	return 0;
}
  402528:	2000      	movs	r0, #0
  40252a:	4770      	bx	lr

0040252c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  40252c:	2001      	movs	r0, #1
  40252e:	4770      	bx	lr

00402530 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  402530:	2000      	movs	r0, #0
  402532:	4770      	bx	lr

00402534 <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  402534:	6943      	ldr	r3, [r0, #20]
  402536:	4a07      	ldr	r2, [pc, #28]	; (402554 <_afec_get_irq_num+0x20>)
  402538:	4293      	cmp	r3, r2
  40253a:	d005      	beq.n	402548 <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  40253c:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  402540:	4293      	cmp	r3, r2
  402542:	d103      	bne.n	40254c <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  402544:	2028      	movs	r0, #40	; 0x28
  402546:	4770      	bx	lr
		return AFEC0_IRQn;
  402548:	201d      	movs	r0, #29
  40254a:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  40254c:	f04f 30ff 	mov.w	r0, #4294967295
}
  402550:	4770      	bx	lr
  402552:	bf00      	nop
  402554:	4003c000 	.word	0x4003c000

00402558 <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  402558:	4b06      	ldr	r3, [pc, #24]	; (402574 <_afec_init_irq_param+0x1c>)
  40255a:	4298      	cmp	r0, r3
  40255c:	d003      	beq.n	402566 <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  40255e:	4b06      	ldr	r3, [pc, #24]	; (402578 <_afec_init_irq_param+0x20>)
  402560:	4298      	cmp	r0, r3
  402562:	d003      	beq.n	40256c <_afec_init_irq_param+0x14>
  402564:	4770      	bx	lr
		_afec0_dev = dev;
  402566:	4b05      	ldr	r3, [pc, #20]	; (40257c <_afec_init_irq_param+0x24>)
  402568:	6019      	str	r1, [r3, #0]
  40256a:	e7f8      	b.n	40255e <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  40256c:	4b03      	ldr	r3, [pc, #12]	; (40257c <_afec_init_irq_param+0x24>)
  40256e:	6059      	str	r1, [r3, #4]
	}
}
  402570:	e7f8      	b.n	402564 <_afec_init_irq_param+0xc>
  402572:	bf00      	nop
  402574:	4003c000 	.word	0x4003c000
  402578:	40064000 	.word	0x40064000
  40257c:	2040043c 	.word	0x2040043c

00402580 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  402580:	2364      	movs	r3, #100	; 0x64
  402582:	4a1d      	ldr	r2, [pc, #116]	; (4025f8 <_afec_init+0x78>)
  402584:	fb03 2301 	mla	r3, r3, r1, r2
  402588:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  40258a:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  40258c:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  40258e:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  402590:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  402592:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  402594:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  402596:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  402598:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  40259a:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  40259c:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  40259e:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  4025a0:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  4025a2:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  4025a4:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  4025a6:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  4025aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  4025ac:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  4025b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  4025b2:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  4025b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  4025b8:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  4025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  4025be:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  4025c2:	2200      	movs	r2, #0
  4025c4:	2a0b      	cmp	r2, #11
  4025c6:	d814      	bhi.n	4025f2 <_afec_init+0x72>
{
  4025c8:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  4025ca:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  4025cc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4025d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4025d4:	4413      	add	r3, r2
  4025d6:	330c      	adds	r3, #12
  4025d8:	4c07      	ldr	r4, [pc, #28]	; (4025f8 <_afec_init+0x78>)
  4025da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4025de:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  4025e0:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  4025e2:	3201      	adds	r2, #1
  4025e4:	b2d2      	uxtb	r2, r2
  4025e6:	2a0b      	cmp	r2, #11
  4025e8:	d9ef      	bls.n	4025ca <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  4025ea:	2000      	movs	r0, #0
  4025ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4025f0:	4770      	bx	lr
  4025f2:	2000      	movs	r0, #0
  4025f4:	4770      	bx	lr
  4025f6:	bf00      	nop
  4025f8:	0040811c 	.word	0x0040811c

004025fc <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  4025fc:	b530      	push	{r4, r5, lr}
  4025fe:	b083      	sub	sp, #12
  402600:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  402602:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  402604:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  402606:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  402608:	400b      	ands	r3, r1
  40260a:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  40260c:	9b01      	ldr	r3, [sp, #4]
  40260e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  402612:	d10e      	bne.n	402632 <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  402614:	9b01      	ldr	r3, [sp, #4]
  402616:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  40261a:	d10e      	bne.n	40263a <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  40261c:	9b01      	ldr	r3, [sp, #4]
  40261e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  402622:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  402624:	9c01      	ldr	r4, [sp, #4]
  402626:	fab4 f484 	clz	r4, r4
  40262a:	f1c4 0420 	rsb	r4, r4, #32
  40262e:	b2e4      	uxtb	r4, r4
	while (cnt) {
  402630:	e01f      	b.n	402672 <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  402632:	6803      	ldr	r3, [r0, #0]
  402634:	2100      	movs	r1, #0
  402636:	4798      	blx	r3
  402638:	e7ec      	b.n	402614 <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  40263a:	686b      	ldr	r3, [r5, #4]
  40263c:	2100      	movs	r1, #0
  40263e:	4628      	mov	r0, r5
  402640:	4798      	blx	r3
  402642:	e7eb      	b.n	40261c <_afec_interrupt_handler+0x20>
		cnt--;
  402644:	3c01      	subs	r4, #1
  402646:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  402648:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  40264a:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  40264c:	68ab      	ldr	r3, [r5, #8]
  40264e:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  402650:	6e92      	ldr	r2, [r2, #104]	; 0x68
  402652:	b292      	uxth	r2, r2
  402654:	4621      	mov	r1, r4
  402656:	4628      	mov	r0, r5
  402658:	4798      	blx	r3
		status &= ~(1 << cnt);
  40265a:	2301      	movs	r3, #1
  40265c:	40a3      	lsls	r3, r4
  40265e:	9c01      	ldr	r4, [sp, #4]
  402660:	ea24 0403 	bic.w	r4, r4, r3
  402664:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  402666:	9c01      	ldr	r4, [sp, #4]
  402668:	fab4 f484 	clz	r4, r4
  40266c:	f1c4 0420 	rsb	r4, r4, #32
  402670:	b2e4      	uxtb	r4, r4
	while (cnt) {
  402672:	2c00      	cmp	r4, #0
  402674:	d1e6      	bne.n	402644 <_afec_interrupt_handler+0x48>
	}
}
  402676:	b003      	add	sp, #12
  402678:	bd30      	pop	{r4, r5, pc}
	...

0040267c <_afec_get_hardware_index>:
{
  40267c:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  40267e:	4b09      	ldr	r3, [pc, #36]	; (4026a4 <_afec_get_hardware_index+0x28>)
  402680:	4298      	cmp	r0, r3
  402682:	d00a      	beq.n	40269a <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  402684:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  402688:	4298      	cmp	r0, r3
  40268a:	d008      	beq.n	40269e <_afec_get_hardware_index+0x22>
	ASSERT(false);
  40268c:	22a7      	movs	r2, #167	; 0xa7
  40268e:	4906      	ldr	r1, [pc, #24]	; (4026a8 <_afec_get_hardware_index+0x2c>)
  402690:	2000      	movs	r0, #0
  402692:	4b06      	ldr	r3, [pc, #24]	; (4026ac <_afec_get_hardware_index+0x30>)
  402694:	4798      	blx	r3
	return 0;
  402696:	2000      	movs	r0, #0
  402698:	bd08      	pop	{r3, pc}
		return 0;
  40269a:	2000      	movs	r0, #0
  40269c:	bd08      	pop	{r3, pc}
		return 1;
  40269e:	2001      	movs	r0, #1
}
  4026a0:	bd08      	pop	{r3, pc}
  4026a2:	bf00      	nop
  4026a4:	4003c000 	.word	0x4003c000
  4026a8:	004081e4 	.word	0x004081e4
  4026ac:	00402415 	.word	0x00402415

004026b0 <_afec_get_regs>:
{
  4026b0:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  4026b2:	4b09      	ldr	r3, [pc, #36]	; (4026d8 <_afec_get_regs+0x28>)
  4026b4:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  4026b6:	2300      	movs	r3, #0
  4026b8:	2b01      	cmp	r3, #1
  4026ba:	d809      	bhi.n	4026d0 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  4026bc:	2264      	movs	r2, #100	; 0x64
  4026be:	fb02 f203 	mul.w	r2, r2, r3
  4026c2:	4906      	ldr	r1, [pc, #24]	; (4026dc <_afec_get_regs+0x2c>)
  4026c4:	5c8a      	ldrb	r2, [r1, r2]
  4026c6:	4290      	cmp	r0, r2
  4026c8:	d003      	beq.n	4026d2 <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  4026ca:	3301      	adds	r3, #1
  4026cc:	b2db      	uxtb	r3, r3
  4026ce:	e7f3      	b.n	4026b8 <_afec_get_regs+0x8>
	return 0;
  4026d0:	2300      	movs	r3, #0
}
  4026d2:	4618      	mov	r0, r3
  4026d4:	bd08      	pop	{r3, pc}
  4026d6:	bf00      	nop
  4026d8:	0040267d 	.word	0x0040267d
  4026dc:	0040811c 	.word	0x0040811c

004026e0 <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  4026e0:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  4026e2:	4b02      	ldr	r3, [pc, #8]	; (4026ec <AFEC0_Handler+0xc>)
  4026e4:	6818      	ldr	r0, [r3, #0]
  4026e6:	4b02      	ldr	r3, [pc, #8]	; (4026f0 <AFEC0_Handler+0x10>)
  4026e8:	4798      	blx	r3
  4026ea:	bd08      	pop	{r3, pc}
  4026ec:	2040043c 	.word	0x2040043c
  4026f0:	004025fd 	.word	0x004025fd

004026f4 <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  4026f4:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  4026f6:	4b02      	ldr	r3, [pc, #8]	; (402700 <AFEC1_Handler+0xc>)
  4026f8:	6858      	ldr	r0, [r3, #4]
  4026fa:	4b02      	ldr	r3, [pc, #8]	; (402704 <AFEC1_Handler+0x10>)
  4026fc:	4798      	blx	r3
  4026fe:	bd08      	pop	{r3, pc}
  402700:	2040043c 	.word	0x2040043c
  402704:	004025fd 	.word	0x004025fd

00402708 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  402708:	b570      	push	{r4, r5, r6, lr}
  40270a:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  40270c:	4605      	mov	r5, r0
  40270e:	f44f 72a1 	mov.w	r2, #322	; 0x142
  402712:	4923      	ldr	r1, [pc, #140]	; (4027a0 <_adc_async_init+0x98>)
  402714:	3000      	adds	r0, #0
  402716:	bf18      	it	ne
  402718:	2001      	movne	r0, #1
  40271a:	4b22      	ldr	r3, [pc, #136]	; (4027a4 <_adc_async_init+0x9c>)
  40271c:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  40271e:	4620      	mov	r0, r4
  402720:	4b21      	ldr	r3, [pc, #132]	; (4027a8 <_adc_async_init+0xa0>)
  402722:	4798      	blx	r3
  402724:	4601      	mov	r1, r0
  402726:	4620      	mov	r0, r4
  402728:	4b20      	ldr	r3, [pc, #128]	; (4027ac <_adc_async_init+0xa4>)
  40272a:	4798      	blx	r3
	if (init_status) {
  40272c:	4606      	mov	r6, r0
  40272e:	b108      	cbz	r0, 402734 <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  402730:	4630      	mov	r0, r6
  402732:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  402734:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  402736:	4629      	mov	r1, r5
  402738:	4620      	mov	r0, r4
  40273a:	4b1d      	ldr	r3, [pc, #116]	; (4027b0 <_adc_async_init+0xa8>)
  40273c:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  40273e:	4628      	mov	r0, r5
  402740:	4b1c      	ldr	r3, [pc, #112]	; (4027b4 <_adc_async_init+0xac>)
  402742:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  402744:	2800      	cmp	r0, #0
  402746:	db0d      	blt.n	402764 <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402748:	0943      	lsrs	r3, r0, #5
  40274a:	f000 001f 	and.w	r0, r0, #31
  40274e:	2201      	movs	r2, #1
  402750:	fa02 f000 	lsl.w	r0, r2, r0
  402754:	3320      	adds	r3, #32
  402756:	4a18      	ldr	r2, [pc, #96]	; (4027b8 <_adc_async_init+0xb0>)
  402758:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40275c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402760:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  402764:	4628      	mov	r0, r5
  402766:	4b13      	ldr	r3, [pc, #76]	; (4027b4 <_adc_async_init+0xac>)
  402768:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  40276a:	2800      	cmp	r0, #0
  40276c:	db09      	blt.n	402782 <_adc_async_init+0x7a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40276e:	0943      	lsrs	r3, r0, #5
  402770:	f000 001f 	and.w	r0, r0, #31
  402774:	2201      	movs	r2, #1
  402776:	fa02 f000 	lsl.w	r0, r2, r0
  40277a:	3360      	adds	r3, #96	; 0x60
  40277c:	4a0e      	ldr	r2, [pc, #56]	; (4027b8 <_adc_async_init+0xb0>)
  40277e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  402782:	4628      	mov	r0, r5
  402784:	4b0b      	ldr	r3, [pc, #44]	; (4027b4 <_adc_async_init+0xac>)
  402786:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  402788:	2800      	cmp	r0, #0
  40278a:	dbd1      	blt.n	402730 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40278c:	0942      	lsrs	r2, r0, #5
  40278e:	f000 001f 	and.w	r0, r0, #31
  402792:	2301      	movs	r3, #1
  402794:	fa03 f000 	lsl.w	r0, r3, r0
  402798:	4b07      	ldr	r3, [pc, #28]	; (4027b8 <_adc_async_init+0xb0>)
  40279a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  40279e:	e7c7      	b.n	402730 <_adc_async_init+0x28>
  4027a0:	004081e4 	.word	0x004081e4
  4027a4:	00402415 	.word	0x00402415
  4027a8:	004026b1 	.word	0x004026b1
  4027ac:	00402581 	.word	0x00402581
  4027b0:	00402559 	.word	0x00402559
  4027b4:	00402535 	.word	0x00402535
  4027b8:	e000e100 	.word	0xe000e100

004027bc <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  4027bc:	6942      	ldr	r2, [r0, #20]
  4027be:	2301      	movs	r3, #1
  4027c0:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  4027c4:	6151      	str	r1, [r2, #20]
  4027c6:	4770      	bx	lr

004027c8 <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  4027c8:	2002      	movs	r0, #2
  4027ca:	4770      	bx	lr

004027cc <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  4027cc:	f44f 7396 	mov.w	r3, #300	; 0x12c
  4027d0:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  4027d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4027d8:	fb03 f000 	mul.w	r0, r3, r0
  4027dc:	4770      	bx	lr
	...

004027e0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  4027e0:	b500      	push	{lr}
  4027e2:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  4027e4:	a801      	add	r0, sp, #4
  4027e6:	4b14      	ldr	r3, [pc, #80]	; (402838 <_init_chip+0x58>)
  4027e8:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4027ea:	4a14      	ldr	r2, [pc, #80]	; (40283c <_init_chip+0x5c>)
  4027ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4027f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4027f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4027f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4027fc:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  402800:	a801      	add	r0, sp, #4
  402802:	4b0f      	ldr	r3, [pc, #60]	; (402840 <_init_chip+0x60>)
  402804:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  402806:	4a0f      	ldr	r2, [pc, #60]	; (402844 <_init_chip+0x64>)
  402808:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  40280a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  40280e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  402812:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  402814:	4b0c      	ldr	r3, [pc, #48]	; (402848 <_init_chip+0x68>)
  402816:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40281a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  40281e:	d104      	bne.n	40282a <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  402820:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402824:	4b08      	ldr	r3, [pc, #32]	; (402848 <_init_chip+0x68>)
  402826:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  40282a:	4b08      	ldr	r3, [pc, #32]	; (40284c <_init_chip+0x6c>)
  40282c:	4798      	blx	r3

#endif
	_pmc_init();
  40282e:	4b08      	ldr	r3, [pc, #32]	; (402850 <_init_chip+0x70>)
  402830:	4798      	blx	r3
}
  402832:	b003      	add	sp, #12
  402834:	f85d fb04 	ldr.w	pc, [sp], #4
  402838:	00401e9d 	.word	0x00401e9d
  40283c:	e000ed00 	.word	0xe000ed00
  402840:	00401eab 	.word	0x00401eab
  402844:	400e0c00 	.word	0x400e0c00
  402848:	400e0600 	.word	0x400e0600
  40284c:	00403395 	.word	0x00403395
  402850:	00402c69 	.word	0x00402c69

00402854 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  402854:	b538      	push	{r3, r4, r5, lr}
  402856:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  402858:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  40285a:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  40285c:	f014 0f01 	tst.w	r4, #1
  402860:	d11a      	bne.n	402898 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  402862:	f414 7f00 	tst.w	r4, #512	; 0x200
  402866:	d11a      	bne.n	40289e <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  402868:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  40286c:	d11b      	bne.n	4028a6 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  40286e:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  402872:	d11d      	bne.n	4028b0 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  402874:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  402878:	d008      	beq.n	40288c <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  40287a:	68eb      	ldr	r3, [r5, #12]
  40287c:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  40287e:	6c52      	ldr	r2, [r2, #68]	; 0x44
  402880:	f012 0f20 	tst.w	r2, #32
  402884:	d019      	beq.n	4028ba <_can_irq_handler+0x66>
  402886:	2102      	movs	r1, #2
  402888:	4628      	mov	r0, r5
  40288a:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  40288c:	f014 0f08 	tst.w	r4, #8
  402890:	d115      	bne.n	4028be <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  402892:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  402894:	651c      	str	r4, [r3, #80]	; 0x50
  402896:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  402898:	6883      	ldr	r3, [r0, #8]
  40289a:	4798      	blx	r3
  40289c:	e7e1      	b.n	402862 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  40289e:	686b      	ldr	r3, [r5, #4]
  4028a0:	4628      	mov	r0, r5
  4028a2:	4798      	blx	r3
  4028a4:	e7e0      	b.n	402868 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  4028a6:	68eb      	ldr	r3, [r5, #12]
  4028a8:	2103      	movs	r1, #3
  4028aa:	4628      	mov	r0, r5
  4028ac:	4798      	blx	r3
  4028ae:	e7de      	b.n	40286e <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  4028b0:	68eb      	ldr	r3, [r5, #12]
  4028b2:	2100      	movs	r1, #0
  4028b4:	4628      	mov	r0, r5
  4028b6:	4798      	blx	r3
  4028b8:	e7dc      	b.n	402874 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4028ba:	2101      	movs	r1, #1
  4028bc:	e7e4      	b.n	402888 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  4028be:	68eb      	ldr	r3, [r5, #12]
  4028c0:	2104      	movs	r1, #4
  4028c2:	4628      	mov	r0, r5
  4028c4:	4798      	blx	r3
  4028c6:	e7e4      	b.n	402892 <_can_irq_handler+0x3e>

004028c8 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  4028c8:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  4028ca:	4b02      	ldr	r3, [pc, #8]	; (4028d4 <MCAN1_INT0_Handler+0xc>)
  4028cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
  4028ce:	4b02      	ldr	r3, [pc, #8]	; (4028d8 <MCAN1_INT0_Handler+0x10>)
  4028d0:	4798      	blx	r3
  4028d2:	bd08      	pop	{r3, pc}
  4028d4:	20400444 	.word	0x20400444
  4028d8:	00402855 	.word	0x00402855

004028dc <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  4028dc:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  4028de:	2500      	movs	r5, #0
  4028e0:	428d      	cmp	r5, r1
  4028e2:	d210      	bcs.n	402906 <_ffs+0x2a>
  4028e4:	2201      	movs	r2, #1
  4028e6:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  4028e8:	2b1f      	cmp	r3, #31
  4028ea:	d80a      	bhi.n	402902 <_ffs+0x26>
			if (v[i] & bit) {
  4028ec:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  4028f0:	4222      	tst	r2, r4
  4028f2:	d102      	bne.n	4028fa <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  4028f4:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  4028f6:	3301      	adds	r3, #1
  4028f8:	e7f6      	b.n	4028e8 <_ffs+0xc>
				return i * 32 + j;
  4028fa:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  4028fe:	bc30      	pop	{r4, r5}
  402900:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  402902:	3501      	adds	r5, #1
  402904:	e7ec      	b.n	4028e0 <_ffs+0x4>
	return -1;
  402906:	f04f 30ff 	mov.w	r0, #4294967295
  40290a:	e7f8      	b.n	4028fe <_ffs+0x22>

0040290c <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  40290c:	b510      	push	{r4, lr}
  40290e:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  402910:	2300      	movs	r3, #0
  402912:	9301      	str	r3, [sp, #4]
  402914:	9302      	str	r3, [sp, #8]
  402916:	9303      	str	r3, [sp, #12]
  402918:	9304      	str	r3, [sp, #16]
  40291a:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  40291c:	4b28      	ldr	r3, [pc, #160]	; (4029c0 <_ext_irq_handler+0xb4>)
  40291e:	6818      	ldr	r0, [r3, #0]
  402920:	22f8      	movs	r2, #248	; 0xf8
  402922:	4928      	ldr	r1, [pc, #160]	; (4029c4 <_ext_irq_handler+0xb8>)
  402924:	3000      	adds	r0, #0
  402926:	bf18      	it	ne
  402928:	2001      	movne	r0, #1
  40292a:	4b27      	ldr	r3, [pc, #156]	; (4029c8 <_ext_irq_handler+0xbc>)
  40292c:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  40292e:	4b27      	ldr	r3, [pc, #156]	; (4029cc <_ext_irq_handler+0xc0>)
  402930:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  402932:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  402934:	4013      	ands	r3, r2
  402936:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  402938:	4a25      	ldr	r2, [pc, #148]	; (4029d0 <_ext_irq_handler+0xc4>)
  40293a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40293c:	6c92      	ldr	r2, [r2, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  40293e:	400a      	ands	r2, r1
  402940:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  402942:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  402944:	4923      	ldr	r1, [pc, #140]	; (4029d4 <_ext_irq_handler+0xc8>)
  402946:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  402948:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  40294a:	400a      	ands	r2, r1
  40294c:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  40294e:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  402950:	e02c      	b.n	4029ac <_ext_irq_handler+0xa0>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  402952:	4b1b      	ldr	r3, [pc, #108]	; (4029c0 <_ext_irq_handler+0xb4>)
  402954:	681b      	ldr	r3, [r3, #0]
  402956:	4620      	mov	r0, r4
  402958:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  40295a:	1163      	asrs	r3, r4, #5
  40295c:	f004 041f 	and.w	r4, r4, #31
  402960:	2201      	movs	r2, #1
  402962:	fa02 f404 	lsl.w	r4, r2, r4
  402966:	aa06      	add	r2, sp, #24
  402968:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40296c:	f853 2c14 	ldr.w	r2, [r3, #-20]
  402970:	ea22 0204 	bic.w	r2, r2, r4
  402974:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  402978:	2105      	movs	r1, #5
  40297a:	a801      	add	r0, sp, #4
  40297c:	4b16      	ldr	r3, [pc, #88]	; (4029d8 <_ext_irq_handler+0xcc>)
  40297e:	4798      	blx	r3
  402980:	4604      	mov	r4, r0
		while (-1 != pos) {
  402982:	f1b4 3fff 	cmp.w	r4, #4294967295
  402986:	d1e4      	bne.n	402952 <_ext_irq_handler+0x46>
	return ((Pio *)hw)->PIO_ISR;
  402988:	4a10      	ldr	r2, [pc, #64]	; (4029cc <_ext_irq_handler+0xc0>)
  40298a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40298c:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  40298e:	400b      	ands	r3, r1
  402990:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  402992:	490f      	ldr	r1, [pc, #60]	; (4029d0 <_ext_irq_handler+0xc4>)
  402994:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  402996:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  402998:	4002      	ands	r2, r0
  40299a:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  40299c:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  40299e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  4029a2:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4029a4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4029a6:	4002      	ands	r2, r0
  4029a8:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  4029aa:	4313      	orrs	r3, r2
	while (flag_total) {
  4029ac:	b12b      	cbz	r3, 4029ba <_ext_irq_handler+0xae>
		pos = _ffs(flags, 5);
  4029ae:	2105      	movs	r1, #5
  4029b0:	a801      	add	r0, sp, #4
  4029b2:	4b09      	ldr	r3, [pc, #36]	; (4029d8 <_ext_irq_handler+0xcc>)
  4029b4:	4798      	blx	r3
  4029b6:	4604      	mov	r4, r0
		while (-1 != pos) {
  4029b8:	e7e3      	b.n	402982 <_ext_irq_handler+0x76>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  4029ba:	b006      	add	sp, #24
  4029bc:	bd10      	pop	{r4, pc}
  4029be:	bf00      	nop
  4029c0:	20400470 	.word	0x20400470
  4029c4:	00408258 	.word	0x00408258
  4029c8:	00402415 	.word	0x00402415
  4029cc:	400e0e00 	.word	0x400e0e00
  4029d0:	400e1000 	.word	0x400e1000
  4029d4:	400e1400 	.word	0x400e1400
  4029d8:	004028dd 	.word	0x004028dd

004029dc <_pio_get_hardware_index>:
{
  4029dc:	b510      	push	{r4, lr}
	ASSERT(hw);
  4029de:	4604      	mov	r4, r0
  4029e0:	22d2      	movs	r2, #210	; 0xd2
  4029e2:	4905      	ldr	r1, [pc, #20]	; (4029f8 <_pio_get_hardware_index+0x1c>)
  4029e4:	3000      	adds	r0, #0
  4029e6:	bf18      	it	ne
  4029e8:	2001      	movne	r0, #1
  4029ea:	4b04      	ldr	r3, [pc, #16]	; (4029fc <_pio_get_hardware_index+0x20>)
  4029ec:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  4029ee:	4804      	ldr	r0, [pc, #16]	; (402a00 <_pio_get_hardware_index+0x24>)
  4029f0:	4420      	add	r0, r4
}
  4029f2:	f3c0 2047 	ubfx	r0, r0, #9, #8
  4029f6:	bd10      	pop	{r4, pc}
  4029f8:	00408258 	.word	0x00408258
  4029fc:	00402415 	.word	0x00402415
  402a00:	bff1f200 	.word	0xbff1f200

00402a04 <_pio_get_index>:
{
  402a04:	b510      	push	{r4, lr}
	ASSERT(hw);
  402a06:	4604      	mov	r4, r0
  402a08:	22e0      	movs	r2, #224	; 0xe0
  402a0a:	490d      	ldr	r1, [pc, #52]	; (402a40 <_pio_get_index+0x3c>)
  402a0c:	3000      	adds	r0, #0
  402a0e:	bf18      	it	ne
  402a10:	2001      	movne	r0, #1
  402a12:	4b0c      	ldr	r3, [pc, #48]	; (402a44 <_pio_get_index+0x40>)
  402a14:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  402a16:	4620      	mov	r0, r4
  402a18:	4b0b      	ldr	r3, [pc, #44]	; (402a48 <_pio_get_index+0x44>)
  402a1a:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  402a1c:	2300      	movs	r3, #0
  402a1e:	2b02      	cmp	r3, #2
  402a20:	d80b      	bhi.n	402a3a <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  402a22:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  402a26:	008a      	lsls	r2, r1, #2
  402a28:	4908      	ldr	r1, [pc, #32]	; (402a4c <_pio_get_index+0x48>)
  402a2a:	5c8a      	ldrb	r2, [r1, r2]
  402a2c:	4290      	cmp	r0, r2
  402a2e:	d002      	beq.n	402a36 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  402a30:	3301      	adds	r3, #1
  402a32:	b2db      	uxtb	r3, r3
  402a34:	e7f3      	b.n	402a1e <_pio_get_index+0x1a>
			return i;
  402a36:	b258      	sxtb	r0, r3
  402a38:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  402a3a:	f04f 30ff 	mov.w	r0, #4294967295
}
  402a3e:	bd10      	pop	{r4, pc}
  402a40:	00408258 	.word	0x00408258
  402a44:	00402415 	.word	0x00402415
  402a48:	004029dd 	.word	0x004029dd
  402a4c:	004081fc 	.word	0x004081fc

00402a50 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  402a50:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  402a52:	4604      	mov	r4, r0
  402a54:	f44f 72af 	mov.w	r2, #350	; 0x15e
  402a58:	4929      	ldr	r1, [pc, #164]	; (402b00 <_pio_init+0xb0>)
  402a5a:	3000      	adds	r0, #0
  402a5c:	bf18      	it	ne
  402a5e:	2001      	movne	r0, #1
  402a60:	4b28      	ldr	r3, [pc, #160]	; (402b04 <_pio_init+0xb4>)
  402a62:	4798      	blx	r3

	i = _pio_get_index(hw);
  402a64:	4620      	mov	r0, r4
  402a66:	4b28      	ldr	r3, [pc, #160]	; (402b08 <_pio_init+0xb8>)
  402a68:	4798      	blx	r3
	if (i < 0) {
  402a6a:	2800      	cmp	r0, #0
  402a6c:	db43      	blt.n	402af6 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  402a6e:	4d27      	ldr	r5, [pc, #156]	; (402b0c <_pio_init+0xbc>)
  402a70:	00c2      	lsls	r2, r0, #3
  402a72:	1a11      	subs	r1, r2, r0
  402a74:	008b      	lsls	r3, r1, #2
  402a76:	442b      	add	r3, r5
  402a78:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  402a7a:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  402a7e:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  402a80:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  402a84:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  402a86:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  402a8a:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  402a8c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  402a90:	1a10      	subs	r0, r2, r0
  402a92:	0083      	lsls	r3, r0, #2
  402a94:	442b      	add	r3, r5
  402a96:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  402a98:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  402a9c:	4620      	mov	r0, r4
  402a9e:	4b1c      	ldr	r3, [pc, #112]	; (402b10 <_pio_init+0xc0>)
  402aa0:	4798      	blx	r3
  402aa2:	4428      	add	r0, r5
  402aa4:	f990 3054 	ldrsb.w	r3, [r0, #84]	; 0x54
  if ((int32_t)(IRQn) >= 0)
  402aa8:	2b00      	cmp	r3, #0
  402aaa:	db0c      	blt.n	402ac6 <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402aac:	095a      	lsrs	r2, r3, #5
  402aae:	f003 001f 	and.w	r0, r3, #31
  402ab2:	2101      	movs	r1, #1
  402ab4:	4081      	lsls	r1, r0
  402ab6:	3220      	adds	r2, #32
  402ab8:	4816      	ldr	r0, [pc, #88]	; (402b14 <_pio_init+0xc4>)
  402aba:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402abe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402ac2:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  402ac6:	2b00      	cmp	r3, #0
  402ac8:	db08      	blt.n	402adc <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402aca:	095a      	lsrs	r2, r3, #5
  402acc:	f003 001f 	and.w	r0, r3, #31
  402ad0:	2101      	movs	r1, #1
  402ad2:	4081      	lsls	r1, r0
  402ad4:	3260      	adds	r2, #96	; 0x60
  402ad6:	480f      	ldr	r0, [pc, #60]	; (402b14 <_pio_init+0xc4>)
  402ad8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  402adc:	2b00      	cmp	r3, #0
  402ade:	db0d      	blt.n	402afc <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402ae0:	0959      	lsrs	r1, r3, #5
  402ae2:	f003 031f 	and.w	r3, r3, #31
  402ae6:	2201      	movs	r2, #1
  402ae8:	fa02 f303 	lsl.w	r3, r2, r3
  402aec:	4a09      	ldr	r2, [pc, #36]	; (402b14 <_pio_init+0xc4>)
  402aee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  402af2:	2000      	movs	r0, #0
  402af4:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  402af6:	f06f 0010 	mvn.w	r0, #16
  402afa:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  402afc:	2000      	movs	r0, #0
}
  402afe:	bd38      	pop	{r3, r4, r5, pc}
  402b00:	00408258 	.word	0x00408258
  402b04:	00402415 	.word	0x00402415
  402b08:	00402a05 	.word	0x00402a05
  402b0c:	004081fc 	.word	0x004081fc
  402b10:	004029dd 	.word	0x004029dd
  402b14:	e000e100 	.word	0xe000e100

00402b18 <PIOD_Handler>:
{
  402b18:	b508      	push	{r3, lr}
	_ext_irq_handler();
  402b1a:	4b01      	ldr	r3, [pc, #4]	; (402b20 <PIOD_Handler+0x8>)
  402b1c:	4798      	blx	r3
  402b1e:	bd08      	pop	{r3, pc}
  402b20:	0040290d 	.word	0x0040290d

00402b24 <PIOB_Handler>:
{
  402b24:	b508      	push	{r3, lr}
	_ext_irq_handler();
  402b26:	4b01      	ldr	r3, [pc, #4]	; (402b2c <PIOB_Handler+0x8>)
  402b28:	4798      	blx	r3
  402b2a:	bd08      	pop	{r3, pc}
  402b2c:	0040290d 	.word	0x0040290d

00402b30 <PIOA_Handler>:
{
  402b30:	b508      	push	{r3, lr}
	_ext_irq_handler();
  402b32:	4b01      	ldr	r3, [pc, #4]	; (402b38 <PIOA_Handler+0x8>)
  402b34:	4798      	blx	r3
  402b36:	bd08      	pop	{r3, pc}
  402b38:	0040290d 	.word	0x0040290d

00402b3c <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  402b3c:	b538      	push	{r3, r4, r5, lr}
  402b3e:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  402b40:	4805      	ldr	r0, [pc, #20]	; (402b58 <_ext_irq_init+0x1c>)
  402b42:	4c06      	ldr	r4, [pc, #24]	; (402b5c <_ext_irq_init+0x20>)
  402b44:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  402b46:	4806      	ldr	r0, [pc, #24]	; (402b60 <_ext_irq_init+0x24>)
  402b48:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  402b4a:	4806      	ldr	r0, [pc, #24]	; (402b64 <_ext_irq_init+0x28>)
  402b4c:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  402b4e:	4b06      	ldr	r3, [pc, #24]	; (402b68 <_ext_irq_init+0x2c>)
  402b50:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  402b52:	2000      	movs	r0, #0
  402b54:	bd38      	pop	{r3, r4, r5, pc}
  402b56:	bf00      	nop
  402b58:	400e0e00 	.word	0x400e0e00
  402b5c:	00402a51 	.word	0x00402a51
  402b60:	400e1000 	.word	0x400e1000
  402b64:	400e1400 	.word	0x400e1400
  402b68:	20400470 	.word	0x20400470

00402b6c <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  402b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b70:	4604      	mov	r4, r0
  402b72:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  402b74:	f8df 8050 	ldr.w	r8, [pc, #80]	; 402bc8 <_ext_irq_enable+0x5c>
  402b78:	f240 12ab 	movw	r2, #427	; 0x1ab
  402b7c:	4641      	mov	r1, r8
  402b7e:	289f      	cmp	r0, #159	; 0x9f
  402b80:	bf8c      	ite	hi
  402b82:	2000      	movhi	r0, #0
  402b84:	2001      	movls	r0, #1
  402b86:	4e0e      	ldr	r6, [pc, #56]	; (402bc0 <_ext_irq_enable+0x54>)
  402b88:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  402b8a:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  402b8c:	22c3      	movs	r2, #195	; 0xc3
  402b8e:	4641      	mov	r1, r8
  402b90:	2d9f      	cmp	r5, #159	; 0x9f
  402b92:	bf8c      	ite	hi
  402b94:	2000      	movhi	r0, #0
  402b96:	2001      	movls	r0, #1
  402b98:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  402b9a:	096d      	lsrs	r5, r5, #5
  402b9c:	4b09      	ldr	r3, [pc, #36]	; (402bc4 <_ext_irq_enable+0x58>)
  402b9e:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  402ba2:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  402ba6:	b937      	cbnz	r7, 402bb6 <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  402ba8:	2301      	movs	r3, #1
  402baa:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  402bae:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  402bb0:	2000      	movs	r0, #0
  402bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  402bb6:	2301      	movs	r3, #1
  402bb8:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  402bbc:	642c      	str	r4, [r5, #64]	; 0x40
  402bbe:	e7f7      	b.n	402bb0 <_ext_irq_enable+0x44>
  402bc0:	00402415 	.word	0x00402415
  402bc4:	400e0e00 	.word	0x400e0e00
  402bc8:	00408258 	.word	0x00408258

00402bcc <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  402bcc:	490e      	ldr	r1, [pc, #56]	; (402c08 <_pmc_init_sources+0x3c>)
  402bce:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  402bd0:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  402bd4:	4b0d      	ldr	r3, [pc, #52]	; (402c0c <_pmc_init_sources+0x40>)
  402bd6:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  402bd8:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  402bda:	4b0b      	ldr	r3, [pc, #44]	; (402c08 <_pmc_init_sources+0x3c>)
  402bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  402bde:	f013 0f01 	tst.w	r3, #1
  402be2:	d0fa      	beq.n	402bda <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  402be4:	4b08      	ldr	r3, [pc, #32]	; (402c08 <_pmc_init_sources+0x3c>)
  402be6:	6a19      	ldr	r1, [r3, #32]
  402be8:	4a09      	ldr	r2, [pc, #36]	; (402c10 <_pmc_init_sources+0x44>)
  402bea:	430a      	orrs	r2, r1
  402bec:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  402bee:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  402bf0:	4a08      	ldr	r2, [pc, #32]	; (402c14 <_pmc_init_sources+0x48>)
  402bf2:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  402bf4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  402bf6:	4a08      	ldr	r2, [pc, #32]	; (402c18 <_pmc_init_sources+0x4c>)
  402bf8:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  402bfa:	4b03      	ldr	r3, [pc, #12]	; (402c08 <_pmc_init_sources+0x3c>)
  402bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  402bfe:	f013 0f02 	tst.w	r3, #2
  402c02:	d0fa      	beq.n	402bfa <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  402c04:	4770      	bx	lr
  402c06:	bf00      	nop
  402c08:	400e0600 	.word	0x400e0600
  402c0c:	00373e01 	.word	0x00373e01
  402c10:	01370000 	.word	0x01370000
  402c14:	f800ffff 	.word	0xf800ffff
  402c18:	20183f01 	.word	0x20183f01

00402c1c <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402c1c:	4a11      	ldr	r2, [pc, #68]	; (402c64 <_pmc_init_master_clock+0x48>)
  402c1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  402c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  402c24:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  402c26:	4b0f      	ldr	r3, [pc, #60]	; (402c64 <_pmc_init_master_clock+0x48>)
  402c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  402c2a:	f013 0f08 	tst.w	r3, #8
  402c2e:	d0fa      	beq.n	402c26 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402c30:	4a0c      	ldr	r2, [pc, #48]	; (402c64 <_pmc_init_master_clock+0x48>)
  402c32:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  402c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  402c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  402c3c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  402c3e:	4b09      	ldr	r3, [pc, #36]	; (402c64 <_pmc_init_master_clock+0x48>)
  402c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  402c42:	f013 0f08 	tst.w	r3, #8
  402c46:	d0fa      	beq.n	402c3e <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402c48:	4a06      	ldr	r2, [pc, #24]	; (402c64 <_pmc_init_master_clock+0x48>)
  402c4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  402c4c:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  402c50:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  402c54:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  402c56:	4b03      	ldr	r3, [pc, #12]	; (402c64 <_pmc_init_master_clock+0x48>)
  402c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  402c5a:	f013 0f08 	tst.w	r3, #8
  402c5e:	d0fa      	beq.n	402c56 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  402c60:	4770      	bx	lr
  402c62:	bf00      	nop
  402c64:	400e0600 	.word	0x400e0600

00402c68 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  402c68:	b508      	push	{r3, lr}
	_pmc_init_sources();
  402c6a:	4b02      	ldr	r3, [pc, #8]	; (402c74 <_pmc_init+0xc>)
  402c6c:	4798      	blx	r3
	_pmc_init_master_clock();
  402c6e:	4b02      	ldr	r3, [pc, #8]	; (402c78 <_pmc_init+0x10>)
  402c70:	4798      	blx	r3
  402c72:	bd08      	pop	{r3, pc}
  402c74:	00402bcd 	.word	0x00402bcd
  402c78:	00402c1d 	.word	0x00402c1d

00402c7c <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  402c7c:	2300      	movs	r3, #0
  402c7e:	2b01      	cmp	r3, #1
  402c80:	d80f      	bhi.n	402ca2 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  402c82:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  402c86:	008a      	lsls	r2, r1, #2
  402c88:	4907      	ldr	r1, [pc, #28]	; (402ca8 <_pwm_get_cfg+0x2c>)
  402c8a:	588a      	ldr	r2, [r1, r2]
  402c8c:	4282      	cmp	r2, r0
  402c8e:	d002      	beq.n	402c96 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  402c90:	3301      	adds	r3, #1
  402c92:	b2db      	uxtb	r3, r3
  402c94:	e7f3      	b.n	402c7e <_pwm_get_cfg+0x2>
			return (_pwms + i);
  402c96:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  402c9a:	009a      	lsls	r2, r3, #2
  402c9c:	4608      	mov	r0, r1
  402c9e:	4410      	add	r0, r2
  402ca0:	4770      	bx	lr
		}
	}

	return NULL;
  402ca2:	2000      	movs	r0, #0
}
  402ca4:	4770      	bx	lr
  402ca6:	bf00      	nop
  402ca8:	00408274 	.word	0x00408274

00402cac <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  402cac:	4b06      	ldr	r3, [pc, #24]	; (402cc8 <_pwm_init_irq_param+0x1c>)
  402cae:	4298      	cmp	r0, r3
  402cb0:	d003      	beq.n	402cba <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  402cb2:	4b06      	ldr	r3, [pc, #24]	; (402ccc <_pwm_init_irq_param+0x20>)
  402cb4:	4298      	cmp	r0, r3
  402cb6:	d003      	beq.n	402cc0 <_pwm_init_irq_param+0x14>
  402cb8:	4770      	bx	lr
		_pwm0_dev = dev;
  402cba:	4b05      	ldr	r3, [pc, #20]	; (402cd0 <_pwm_init_irq_param+0x24>)
  402cbc:	6019      	str	r1, [r3, #0]
  402cbe:	e7f8      	b.n	402cb2 <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  402cc0:	4b03      	ldr	r3, [pc, #12]	; (402cd0 <_pwm_init_irq_param+0x24>)
  402cc2:	6059      	str	r1, [r3, #4]
	}
}
  402cc4:	e7f8      	b.n	402cb8 <_pwm_init_irq_param+0xc>
  402cc6:	bf00      	nop
  402cc8:	40020000 	.word	0x40020000
  402ccc:	4005c000 	.word	0x4005c000
  402cd0:	20400474 	.word	0x20400474

00402cd4 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  402cd4:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  402cd6:	6903      	ldr	r3, [r0, #16]
	return ((Pwm *)hw)->PWM_ISR1;
  402cd8:	69db      	ldr	r3, [r3, #28]
  402cda:	b113      	cbz	r3, 402ce2 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  402cdc:	6803      	ldr	r3, [r0, #0]
  402cde:	b103      	cbz	r3, 402ce2 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  402ce0:	4798      	blx	r3
  402ce2:	bd08      	pop	{r3, pc}

00402ce4 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  402ce4:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  402ce6:	4b02      	ldr	r3, [pc, #8]	; (402cf0 <PWM0_Handler+0xc>)
  402ce8:	6818      	ldr	r0, [r3, #0]
  402cea:	4b02      	ldr	r3, [pc, #8]	; (402cf4 <PWM0_Handler+0x10>)
  402cec:	4798      	blx	r3
  402cee:	bd08      	pop	{r3, pc}
  402cf0:	20400474 	.word	0x20400474
  402cf4:	00402cd5 	.word	0x00402cd5

00402cf8 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  402cf8:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  402cfa:	4b02      	ldr	r3, [pc, #8]	; (402d04 <PWM1_Handler+0xc>)
  402cfc:	6858      	ldr	r0, [r3, #4]
  402cfe:	4b02      	ldr	r3, [pc, #8]	; (402d08 <PWM1_Handler+0x10>)
  402d00:	4798      	blx	r3
  402d02:	bd08      	pop	{r3, pc}
  402d04:	20400474 	.word	0x20400474
  402d08:	00402cd5 	.word	0x00402cd5

00402d0c <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  402d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d0e:	4606      	mov	r6, r0
	ASSERT(hw);
  402d10:	460c      	mov	r4, r1
  402d12:	1c08      	adds	r0, r1, #0
  402d14:	bf18      	it	ne
  402d16:	2001      	movne	r0, #1
  402d18:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  402d1c:	4944      	ldr	r1, [pc, #272]	; (402e30 <_pwm_init+0x124>)
  402d1e:	4b45      	ldr	r3, [pc, #276]	; (402e34 <_pwm_init+0x128>)
  402d20:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  402d22:	4620      	mov	r0, r4
  402d24:	4b44      	ldr	r3, [pc, #272]	; (402e38 <_pwm_init+0x12c>)
  402d26:	4798      	blx	r3
  402d28:	4605      	mov	r5, r0

	device->hw = hw;
  402d2a:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  402d2c:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  402d2e:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  402d30:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  402d32:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  402d34:	6903      	ldr	r3, [r0, #16]
  402d36:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  402d3a:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  402d3c:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  402d3e:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  402d40:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  402d42:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  402d44:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  402d48:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  402d4a:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  402d4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  402d4e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  402d52:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  402d54:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  402d58:	2300      	movs	r3, #0
  402d5a:	e019      	b.n	402d90 <_pwm_init+0x84>
		ch = cfg->ch + i;
  402d5c:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  402d5e:	0118      	lsls	r0, r3, #4
  402d60:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  402d64:	5c3a      	ldrb	r2, [r7, r0]
  402d66:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  402d6a:	3210      	adds	r2, #16
  402d6c:	0152      	lsls	r2, r2, #5
  402d6e:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  402d70:	5c3a      	ldrb	r2, [r7, r0]
  402d72:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  402d76:	3210      	adds	r2, #16
  402d78:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  402d7c:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  402d7e:	5c3a      	ldrb	r2, [r7, r0]
  402d80:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  402d84:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  402d88:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  402d8c:	3301      	adds	r3, #1
  402d8e:	b25b      	sxtb	r3, r3
  402d90:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402d92:	4293      	cmp	r3, r2
  402d94:	d3e2      	bcc.n	402d5c <_pwm_init+0x50>
  402d96:	2300      	movs	r3, #0
  402d98:	e014      	b.n	402dc4 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  402d9a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  402d9c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  402da0:	0082      	lsls	r2, r0, #2
  402da2:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  402da6:	5c88      	ldrb	r0, [r1, r2]
  402da8:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  402dac:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  402db0:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  402db4:	5c8a      	ldrb	r2, [r1, r2]
  402db6:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  402dba:	3213      	adds	r2, #19
  402dbc:	0112      	lsls	r2, r2, #4
  402dbe:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  402dc0:	3301      	adds	r3, #1
  402dc2:	b25b      	sxtb	r3, r3
  402dc4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  402dc6:	4293      	cmp	r3, r2
  402dc8:	d3e7      	bcc.n	402d9a <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  402dca:	4631      	mov	r1, r6
  402dcc:	4620      	mov	r0, r4
  402dce:	4b1b      	ldr	r3, [pc, #108]	; (402e3c <_pwm_init+0x130>)
  402dd0:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  402dd2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402dd6:	2b00      	cmp	r3, #0
  402dd8:	db0d      	blt.n	402df6 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402dda:	095a      	lsrs	r2, r3, #5
  402ddc:	f003 031f 	and.w	r3, r3, #31
  402de0:	2101      	movs	r1, #1
  402de2:	fa01 f303 	lsl.w	r3, r1, r3
  402de6:	3220      	adds	r2, #32
  402de8:	4915      	ldr	r1, [pc, #84]	; (402e40 <_pwm_init+0x134>)
  402dea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402dee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402df2:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  402df6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402dfa:	2b00      	cmp	r3, #0
  402dfc:	db09      	blt.n	402e12 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402dfe:	095a      	lsrs	r2, r3, #5
  402e00:	f003 031f 	and.w	r3, r3, #31
  402e04:	2101      	movs	r1, #1
  402e06:	fa01 f303 	lsl.w	r3, r1, r3
  402e0a:	3260      	adds	r2, #96	; 0x60
  402e0c:	490c      	ldr	r1, [pc, #48]	; (402e40 <_pwm_init+0x134>)
  402e0e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  402e12:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402e16:	2b00      	cmp	r3, #0
  402e18:	db08      	blt.n	402e2c <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402e1a:	0959      	lsrs	r1, r3, #5
  402e1c:	f003 031f 	and.w	r3, r3, #31
  402e20:	2201      	movs	r2, #1
  402e22:	fa02 f303 	lsl.w	r3, r2, r3
  402e26:	4a06      	ldr	r2, [pc, #24]	; (402e40 <_pwm_init+0x134>)
  402e28:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  402e2c:	2000      	movs	r0, #0
  402e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402e30:	0040831c 	.word	0x0040831c
  402e34:	00402415 	.word	0x00402415
  402e38:	00402c7d 	.word	0x00402c7d
  402e3c:	00402cad 	.word	0x00402cad
  402e40:	e000e100 	.word	0xe000e100

00402e44 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  402e44:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  402e46:	4604      	mov	r4, r0
  402e48:	f240 12b5 	movw	r2, #437	; 0x1b5
  402e4c:	490b      	ldr	r1, [pc, #44]	; (402e7c <_pwm_enable+0x38>)
  402e4e:	3000      	adds	r0, #0
  402e50:	bf18      	it	ne
  402e52:	2001      	movne	r0, #1
  402e54:	4b0a      	ldr	r3, [pc, #40]	; (402e80 <_pwm_enable+0x3c>)
  402e56:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  402e58:	6920      	ldr	r0, [r4, #16]
  402e5a:	4b0a      	ldr	r3, [pc, #40]	; (402e84 <_pwm_enable+0x40>)
  402e5c:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  402e5e:	2300      	movs	r3, #0
  402e60:	e008      	b.n	402e74 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  402e62:	6921      	ldr	r1, [r4, #16]
  402e64:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402e66:	011a      	lsls	r2, r3, #4
  402e68:	5cad      	ldrb	r5, [r5, r2]
  402e6a:	2201      	movs	r2, #1
  402e6c:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  402e6e:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  402e70:	3301      	adds	r3, #1
  402e72:	b25b      	sxtb	r3, r3
  402e74:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402e76:	4293      	cmp	r3, r2
  402e78:	d3f3      	bcc.n	402e62 <_pwm_enable+0x1e>
	}
}
  402e7a:	bd38      	pop	{r3, r4, r5, pc}
  402e7c:	0040831c 	.word	0x0040831c
  402e80:	00402415 	.word	0x00402415
  402e84:	00402c7d 	.word	0x00402c7d

00402e88 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  402e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e8a:	460d      	mov	r5, r1
  402e8c:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  402e8e:	4604      	mov	r4, r0
  402e90:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  402e94:	4911      	ldr	r1, [pc, #68]	; (402edc <_pwm_set_param+0x54>)
  402e96:	2800      	cmp	r0, #0
  402e98:	bf18      	it	ne
  402e9a:	42ae      	cmpne	r6, r5
  402e9c:	bf34      	ite	cc
  402e9e:	2001      	movcc	r0, #1
  402ea0:	2000      	movcs	r0, #0
  402ea2:	4b0f      	ldr	r3, [pc, #60]	; (402ee0 <_pwm_set_param+0x58>)
  402ea4:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  402ea6:	6920      	ldr	r0, [r4, #16]
  402ea8:	4b0e      	ldr	r3, [pc, #56]	; (402ee4 <_pwm_set_param+0x5c>)
  402eaa:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  402eac:	2300      	movs	r3, #0
  402eae:	e010      	b.n	402ed2 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  402eb0:	6922      	ldr	r2, [r4, #16]
  402eb2:	6b07      	ldr	r7, [r0, #48]	; 0x30
  402eb4:	0119      	lsls	r1, r3, #4
  402eb6:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  402eb8:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  402ebc:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  402ec0:	6922      	ldr	r2, [r4, #16]
  402ec2:	6b07      	ldr	r7, [r0, #48]	; 0x30
  402ec4:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  402ec6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  402eca:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  402ece:	3301      	adds	r3, #1
  402ed0:	b2db      	uxtb	r3, r3
  402ed2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402ed4:	4293      	cmp	r3, r2
  402ed6:	d3eb      	bcc.n	402eb0 <_pwm_set_param+0x28>
	}
}
  402ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402eda:	bf00      	nop
  402edc:	0040831c 	.word	0x0040831c
  402ee0:	00402415 	.word	0x00402415
  402ee4:	00402c7d 	.word	0x00402c7d

00402ee8 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  402ee8:	b510      	push	{r4, lr}
	ASSERT(device);
  402eea:	4604      	mov	r4, r0
  402eec:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402ef0:	4907      	ldr	r1, [pc, #28]	; (402f10 <_pwm_is_enabled+0x28>)
  402ef2:	3000      	adds	r0, #0
  402ef4:	bf18      	it	ne
  402ef6:	2001      	movne	r0, #1
  402ef8:	4b06      	ldr	r3, [pc, #24]	; (402f14 <_pwm_is_enabled+0x2c>)
  402efa:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  402efc:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  402efe:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  402f00:	f013 0f0f 	tst.w	r3, #15
  402f04:	d001      	beq.n	402f0a <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  402f06:	2001      	movs	r0, #1
	}
}
  402f08:	bd10      	pop	{r4, pc}
		return false;
  402f0a:	2000      	movs	r0, #0
  402f0c:	bd10      	pop	{r4, pc}
  402f0e:	bf00      	nop
  402f10:	0040831c 	.word	0x0040831c
  402f14:	00402415 	.word	0x00402415

00402f18 <_pwm_set_irq_state>:

	return hri_pwm_read_CDTY_reg(device->hw, cfg->ch[0].index);
}

void _pwm_set_irq_state(struct _pwm_device *const device, const enum _pwm_callback_type type, const bool disable)
{
  402f18:	b538      	push	{r3, r4, r5, lr}
  402f1a:	460d      	mov	r5, r1
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device);
  402f1c:	4604      	mov	r4, r0
  402f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
  402f22:	4912      	ldr	r1, [pc, #72]	; (402f6c <_pwm_set_irq_state+0x54>)
  402f24:	3000      	adds	r0, #0
  402f26:	bf18      	it	ne
  402f28:	2001      	movne	r0, #1
  402f2a:	4b11      	ldr	r3, [pc, #68]	; (402f70 <_pwm_set_irq_state+0x58>)
  402f2c:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  402f2e:	6920      	ldr	r0, [r4, #16]
  402f30:	4b10      	ldr	r3, [pc, #64]	; (402f74 <_pwm_set_irq_state+0x5c>)
  402f32:	4798      	blx	r3

	if (PWM_DEVICE_PERIOD_CB == type) {
  402f34:	b18d      	cbz	r5, 402f5a <_pwm_set_irq_state+0x42>
		for (i = 0; i < cfg->ch_num; i++) {
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
		}
	} else if (PWM_DEVICE_ERROR_CB == type) {
  402f36:	2d01      	cmp	r5, #1
  402f38:	d011      	beq.n	402f5e <_pwm_set_irq_state+0x46>
  402f3a:	bd38      	pop	{r3, r4, r5, pc}
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
  402f3c:	6921      	ldr	r1, [r4, #16]
  402f3e:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402f40:	0113      	lsls	r3, r2, #4
  402f42:	5ced      	ldrb	r5, [r5, r3]
  402f44:	2301      	movs	r3, #1
  402f46:	40ab      	lsls	r3, r5
	((Pwm *)hw)->PWM_IER1 = data;
  402f48:	610b      	str	r3, [r1, #16]
	((Pwm *)hw)->PWM_IDR1 = ~data;
  402f4a:	43db      	mvns	r3, r3
  402f4c:	614b      	str	r3, [r1, #20]
		for (i = 0; i < cfg->ch_num; i++) {
  402f4e:	3201      	adds	r2, #1
  402f50:	b2d2      	uxtb	r2, r2
  402f52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402f54:	429a      	cmp	r2, r3
  402f56:	d3f1      	bcc.n	402f3c <_pwm_set_irq_state+0x24>
  402f58:	bd38      	pop	{r3, r4, r5, pc}
  402f5a:	2200      	movs	r2, #0
  402f5c:	e7f9      	b.n	402f52 <_pwm_set_irq_state+0x3a>
		ASSERT(false);
  402f5e:	f240 2209 	movw	r2, #521	; 0x209
  402f62:	4902      	ldr	r1, [pc, #8]	; (402f6c <_pwm_set_irq_state+0x54>)
  402f64:	2000      	movs	r0, #0
  402f66:	4b02      	ldr	r3, [pc, #8]	; (402f70 <_pwm_set_irq_state+0x58>)
  402f68:	4798      	blx	r3
	}
}
  402f6a:	e7e6      	b.n	402f3a <_pwm_set_irq_state+0x22>
  402f6c:	0040831c 	.word	0x0040831c
  402f70:	00402415 	.word	0x00402415
  402f74:	00402c7d 	.word	0x00402c7d

00402f78 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  402f78:	2000      	movs	r0, #0
  402f7a:	4770      	bx	lr

00402f7c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  402f7c:	4b03      	ldr	r3, [pc, #12]	; (402f8c <_system_time_init+0x10>)
  402f7e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  402f82:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  402f84:	2205      	movs	r2, #5
  402f86:	601a      	str	r2, [r3, #0]
  402f88:	4770      	bx	lr
  402f8a:	bf00      	nop
  402f8c:	e000e010 	.word	0xe000e010

00402f90 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  402f90:	b508      	push	{r3, lr}
	_system_time_init(hw);
  402f92:	4b01      	ldr	r3, [pc, #4]	; (402f98 <_delay_init+0x8>)
  402f94:	4798      	blx	r3
  402f96:	bd08      	pop	{r3, pc}
  402f98:	00402f7d 	.word	0x00402f7d

00402f9c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  402f9c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  402f9e:	e00d      	b.n	402fbc <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  402fa0:	4b0d      	ldr	r3, [pc, #52]	; (402fd8 <_delay_cycles+0x3c>)
  402fa2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  402fa6:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  402fa8:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  402faa:	4b0b      	ldr	r3, [pc, #44]	; (402fd8 <_delay_cycles+0x3c>)
  402fac:	681b      	ldr	r3, [r3, #0]
  402fae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402fb2:	d0fa      	beq.n	402faa <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  402fb4:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  402fb8:	3101      	adds	r1, #1
	while (n--) {
  402fba:	4610      	mov	r0, r2
  402fbc:	1e43      	subs	r3, r0, #1
  402fbe:	b2da      	uxtb	r2, r3
  402fc0:	2800      	cmp	r0, #0
  402fc2:	d1ed      	bne.n	402fa0 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  402fc4:	4b04      	ldr	r3, [pc, #16]	; (402fd8 <_delay_cycles+0x3c>)
  402fc6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  402fc8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  402fca:	4b03      	ldr	r3, [pc, #12]	; (402fd8 <_delay_cycles+0x3c>)
  402fcc:	681b      	ldr	r3, [r3, #0]
  402fce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402fd2:	d0fa      	beq.n	402fca <_delay_cycles+0x2e>
		;
}
  402fd4:	4770      	bx	lr
  402fd6:	bf00      	nop
  402fd8:	e000e010 	.word	0xe000e010

00402fdc <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  402fdc:	2300      	movs	r3, #0
  402fde:	2b01      	cmp	r3, #1
  402fe0:	d815      	bhi.n	40300e <get_cfg+0x32>
{
  402fe2:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  402fe4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  402fe8:	008a      	lsls	r2, r1, #2
  402fea:	490a      	ldr	r1, [pc, #40]	; (403014 <get_cfg+0x38>)
  402fec:	588a      	ldr	r2, [r1, r2]
  402fee:	4282      	cmp	r2, r0
  402ff0:	d007      	beq.n	403002 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  402ff2:	3301      	adds	r3, #1
  402ff4:	b2db      	uxtb	r3, r3
  402ff6:	2b01      	cmp	r3, #1
  402ff8:	d9f4      	bls.n	402fe4 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  402ffa:	2000      	movs	r0, #0
}
  402ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
  403000:	4770      	bx	lr
			return &(_tcs[i]);
  403002:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  403006:	00a3      	lsls	r3, r4, #2
  403008:	4608      	mov	r0, r1
  40300a:	4418      	add	r0, r3
  40300c:	e7f6      	b.n	402ffc <get_cfg+0x20>
	return NULL;
  40300e:	2000      	movs	r0, #0
  403010:	4770      	bx	lr
  403012:	bf00      	nop
  403014:	20400000 	.word	0x20400000

00403018 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  403018:	4b06      	ldr	r3, [pc, #24]	; (403034 <_tc_init_irq_param+0x1c>)
  40301a:	4298      	cmp	r0, r3
  40301c:	d003      	beq.n	403026 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  40301e:	4b06      	ldr	r3, [pc, #24]	; (403038 <_tc_init_irq_param+0x20>)
  403020:	4298      	cmp	r0, r3
  403022:	d003      	beq.n	40302c <_tc_init_irq_param+0x14>
  403024:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  403026:	4b05      	ldr	r3, [pc, #20]	; (40303c <_tc_init_irq_param+0x24>)
  403028:	6019      	str	r1, [r3, #0]
  40302a:	e7f8      	b.n	40301e <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  40302c:	4b03      	ldr	r3, [pc, #12]	; (40303c <_tc_init_irq_param+0x24>)
  40302e:	6059      	str	r1, [r3, #4]
	}
}
  403030:	e7f8      	b.n	403024 <_tc_init_irq_param+0xc>
  403032:	bf00      	nop
  403034:	4000c000 	.word	0x4000c000
  403038:	40054000 	.word	0x40054000
  40303c:	20400494 	.word	0x20400494

00403040 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  403040:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  403042:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  403044:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  403046:	f013 0f10 	tst.w	r3, #16
  40304a:	d100      	bne.n	40304e <tc_interrupt_handler+0xe>
  40304c:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  40304e:	6803      	ldr	r3, [r0, #0]
  403050:	4798      	blx	r3
	}
}
  403052:	e7fb      	b.n	40304c <tc_interrupt_handler+0xc>

00403054 <_timer_init>:
{
  403054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403058:	4606      	mov	r6, r0
  40305a:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  40305c:	4608      	mov	r0, r1
  40305e:	4b2f      	ldr	r3, [pc, #188]	; (40311c <_timer_init+0xc8>)
  403060:	4798      	blx	r3
  403062:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  403064:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  403068:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  40306c:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  40306e:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  403072:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  403074:	22c3      	movs	r2, #195	; 0xc3
  403076:	492a      	ldr	r1, [pc, #168]	; (403120 <_timer_init+0xcc>)
  403078:	2001      	movs	r0, #1
  40307a:	4b2a      	ldr	r3, [pc, #168]	; (403124 <_timer_init+0xd0>)
  40307c:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  40307e:	f248 0307 	movw	r3, #32775	; 0x8007
  403082:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  403084:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  403088:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  40308c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  403090:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  403092:	2300      	movs	r3, #0
  403094:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  403096:	f248 020f 	movw	r2, #32783	; 0x800f
  40309a:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  40309c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4030a0:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4030a4:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4030a8:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4030aa:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  4030ac:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  4030ae:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  4030b2:	4631      	mov	r1, r6
  4030b4:	4620      	mov	r0, r4
  4030b6:	4b1c      	ldr	r3, [pc, #112]	; (403128 <_timer_init+0xd4>)
  4030b8:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  4030ba:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4030be:	2b00      	cmp	r3, #0
  4030c0:	db0d      	blt.n	4030de <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4030c2:	095a      	lsrs	r2, r3, #5
  4030c4:	f003 031f 	and.w	r3, r3, #31
  4030c8:	2101      	movs	r1, #1
  4030ca:	fa01 f303 	lsl.w	r3, r1, r3
  4030ce:	3220      	adds	r2, #32
  4030d0:	4916      	ldr	r1, [pc, #88]	; (40312c <_timer_init+0xd8>)
  4030d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4030d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4030da:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  4030de:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4030e2:	2b00      	cmp	r3, #0
  4030e4:	db09      	blt.n	4030fa <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4030e6:	095a      	lsrs	r2, r3, #5
  4030e8:	f003 031f 	and.w	r3, r3, #31
  4030ec:	2101      	movs	r1, #1
  4030ee:	fa01 f303 	lsl.w	r3, r1, r3
  4030f2:	3260      	adds	r2, #96	; 0x60
  4030f4:	490d      	ldr	r1, [pc, #52]	; (40312c <_timer_init+0xd8>)
  4030f6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  4030fa:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4030fe:	2b00      	cmp	r3, #0
  403100:	db08      	blt.n	403114 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403102:	0959      	lsrs	r1, r3, #5
  403104:	f003 031f 	and.w	r3, r3, #31
  403108:	2201      	movs	r2, #1
  40310a:	fa02 f303 	lsl.w	r3, r2, r3
  40310e:	4a07      	ldr	r2, [pc, #28]	; (40312c <_timer_init+0xd8>)
  403110:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  403114:	2000      	movs	r0, #0
  403116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40311a:	bf00      	nop
  40311c:	00402fdd 	.word	0x00402fdd
  403120:	00408334 	.word	0x00408334
  403124:	00402415 	.word	0x00402415
  403128:	00403019 	.word	0x00403019
  40312c:	e000e100 	.word	0xe000e100

00403130 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  403130:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  403132:	2305      	movs	r3, #5
  403134:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  403136:	68c2      	ldr	r2, [r0, #12]
  403138:	6413      	str	r3, [r2, #64]	; 0x40
  40313a:	4770      	bx	lr

0040313c <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  40313c:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  40313e:	6a13      	ldr	r3, [r2, #32]
  403140:	f3c3 4300 	ubfx	r3, r3, #16, #1
  403144:	6e10      	ldr	r0, [r2, #96]	; 0x60
  403146:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  40314a:	4318      	orrs	r0, r3
  40314c:	4770      	bx	lr

0040314e <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  40314e:	2000      	movs	r0, #0
  403150:	4770      	bx	lr
	...

00403154 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  403154:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  403156:	4b02      	ldr	r3, [pc, #8]	; (403160 <TC0_Handler+0xc>)
  403158:	6818      	ldr	r0, [r3, #0]
  40315a:	4b02      	ldr	r3, [pc, #8]	; (403164 <TC0_Handler+0x10>)
  40315c:	4798      	blx	r3
  40315e:	bd08      	pop	{r3, pc}
  403160:	20400494 	.word	0x20400494
  403164:	00403041 	.word	0x00403041

00403168 <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  403168:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  40316a:	4b02      	ldr	r3, [pc, #8]	; (403174 <TC9_Handler+0xc>)
  40316c:	6858      	ldr	r0, [r3, #4]
  40316e:	4b02      	ldr	r3, [pc, #8]	; (403178 <TC9_Handler+0x10>)
  403170:	4798      	blx	r3
  403172:	bd08      	pop	{r3, pc}
  403174:	20400494 	.word	0x20400494
  403178:	00403041 	.word	0x00403041

0040317c <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  40317c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40317e:	4604      	mov	r4, r0
  403180:	f240 222b 	movw	r2, #555	; 0x22b
  403184:	4905      	ldr	r1, [pc, #20]	; (40319c <_usart_get_hardware_index+0x20>)
  403186:	3000      	adds	r0, #0
  403188:	bf18      	it	ne
  40318a:	2001      	movne	r0, #1
  40318c:	4b04      	ldr	r3, [pc, #16]	; (4031a0 <_usart_get_hardware_index+0x24>)
  40318e:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  403190:	4804      	ldr	r0, [pc, #16]	; (4031a4 <_usart_get_hardware_index+0x28>)
  403192:	4420      	add	r0, r4
}
  403194:	f3c0 3087 	ubfx	r0, r0, #14, #8
  403198:	bd10      	pop	{r4, pc}
  40319a:	bf00      	nop
  40319c:	00408354 	.word	0x00408354
  4031a0:	00402415 	.word	0x00402415
  4031a4:	bffdc000 	.word	0xbffdc000

004031a8 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  4031a8:	b510      	push	{r4, lr}
	ASSERT(hw);
  4031aa:	4604      	mov	r4, r0
  4031ac:	f240 2287 	movw	r2, #647	; 0x287
  4031b0:	490e      	ldr	r1, [pc, #56]	; (4031ec <_get_usart_index+0x44>)
  4031b2:	3000      	adds	r0, #0
  4031b4:	bf18      	it	ne
  4031b6:	2001      	movne	r0, #1
  4031b8:	4b0d      	ldr	r3, [pc, #52]	; (4031f0 <_get_usart_index+0x48>)
  4031ba:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  4031bc:	4620      	mov	r0, r4
  4031be:	4b0d      	ldr	r3, [pc, #52]	; (4031f4 <_get_usart_index+0x4c>)
  4031c0:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4031c2:	2300      	movs	r3, #0
  4031c4:	b143      	cbz	r3, 4031d8 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  4031c6:	f240 2291 	movw	r2, #657	; 0x291
  4031ca:	4908      	ldr	r1, [pc, #32]	; (4031ec <_get_usart_index+0x44>)
  4031cc:	2000      	movs	r0, #0
  4031ce:	4b08      	ldr	r3, [pc, #32]	; (4031f0 <_get_usart_index+0x48>)
  4031d0:	4798      	blx	r3
	return 0;
  4031d2:	2300      	movs	r3, #0
}
  4031d4:	4618      	mov	r0, r3
  4031d6:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  4031d8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4031dc:	008a      	lsls	r2, r1, #2
  4031de:	4906      	ldr	r1, [pc, #24]	; (4031f8 <_get_usart_index+0x50>)
  4031e0:	5c8a      	ldrb	r2, [r1, r2]
  4031e2:	4290      	cmp	r0, r2
  4031e4:	d0f6      	beq.n	4031d4 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4031e6:	3301      	adds	r3, #1
  4031e8:	b2db      	uxtb	r3, r3
  4031ea:	e7eb      	b.n	4031c4 <_get_usart_index+0x1c>
  4031ec:	00408354 	.word	0x00408354
  4031f0:	00402415 	.word	0x00402415
  4031f4:	0040317d 	.word	0x0040317d
  4031f8:	00408348 	.word	0x00408348

004031fc <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  4031fc:	b510      	push	{r4, lr}
	ASSERT(hw);
  4031fe:	4604      	mov	r4, r0
  403200:	f240 229e 	movw	r2, #670	; 0x29e
  403204:	4911      	ldr	r1, [pc, #68]	; (40324c <_usart_init+0x50>)
  403206:	3000      	adds	r0, #0
  403208:	bf18      	it	ne
  40320a:	2001      	movne	r0, #1
  40320c:	4b10      	ldr	r3, [pc, #64]	; (403250 <_usart_init+0x54>)
  40320e:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  403210:	4620      	mov	r0, r4
  403212:	4b10      	ldr	r3, [pc, #64]	; (403254 <_usart_init+0x58>)
  403214:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  403216:	4b10      	ldr	r3, [pc, #64]	; (403258 <_usart_init+0x5c>)
  403218:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  40321c:	2300      	movs	r3, #0
  40321e:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  403220:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  403222:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  403224:	22ac      	movs	r2, #172	; 0xac
  403226:	6022      	str	r2, [r4, #0]
  403228:	f44f 7280 	mov.w	r2, #256	; 0x100
  40322c:	6022      	str	r2, [r4, #0]
  40322e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403232:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  403234:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  403238:	0081      	lsls	r1, r0, #2
  40323a:	4a08      	ldr	r2, [pc, #32]	; (40325c <_usart_init+0x60>)
  40323c:	440a      	add	r2, r1
  40323e:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  403240:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  403242:	4a07      	ldr	r2, [pc, #28]	; (403260 <_usart_init+0x64>)
  403244:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  403246:	4618      	mov	r0, r3
  403248:	bd10      	pop	{r4, pc}
  40324a:	bf00      	nop
  40324c:	00408354 	.word	0x00408354
  403250:	00402415 	.word	0x00402415
  403254:	004031a9 	.word	0x004031a9
  403258:	55534100 	.word	0x55534100
  40325c:	00408348 	.word	0x00408348
  403260:	000100f4 	.word	0x000100f4

00403264 <_usart_sync_init>:
{
  403264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403266:	460c      	mov	r4, r1
	ASSERT(device);
  403268:	4e09      	ldr	r6, [pc, #36]	; (403290 <_usart_sync_init+0x2c>)
  40326a:	4607      	mov	r7, r0
  40326c:	22bd      	movs	r2, #189	; 0xbd
  40326e:	4631      	mov	r1, r6
  403270:	3000      	adds	r0, #0
  403272:	bf18      	it	ne
  403274:	2001      	movne	r0, #1
  403276:	4d07      	ldr	r5, [pc, #28]	; (403294 <_usart_sync_init+0x30>)
  403278:	47a8      	blx	r5
	ASSERT(hw);
  40327a:	22be      	movs	r2, #190	; 0xbe
  40327c:	4631      	mov	r1, r6
  40327e:	1c20      	adds	r0, r4, #0
  403280:	bf18      	it	ne
  403282:	2001      	movne	r0, #1
  403284:	47a8      	blx	r5
	device->hw = hw;
  403286:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  403288:	4620      	mov	r0, r4
  40328a:	4b03      	ldr	r3, [pc, #12]	; (403298 <_usart_sync_init+0x34>)
  40328c:	4798      	blx	r3
}
  40328e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403290:	00408354 	.word	0x00408354
  403294:	00402415 	.word	0x00402415
  403298:	004031fd 	.word	0x004031fd

0040329c <_usart_sync_enable>:
{
  40329c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  40329e:	4e0a      	ldr	r6, [pc, #40]	; (4032c8 <_usart_sync_enable+0x2c>)
  4032a0:	4604      	mov	r4, r0
  4032a2:	f240 1205 	movw	r2, #261	; 0x105
  4032a6:	4631      	mov	r1, r6
  4032a8:	3000      	adds	r0, #0
  4032aa:	bf18      	it	ne
  4032ac:	2001      	movne	r0, #1
  4032ae:	4d07      	ldr	r5, [pc, #28]	; (4032cc <_usart_sync_enable+0x30>)
  4032b0:	47a8      	blx	r5
	_usart_enable(device->hw);
  4032b2:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4032b4:	f240 22c7 	movw	r2, #711	; 0x2c7
  4032b8:	4631      	mov	r1, r6
  4032ba:	1c20      	adds	r0, r4, #0
  4032bc:	bf18      	it	ne
  4032be:	2001      	movne	r0, #1
  4032c0:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  4032c2:	2350      	movs	r3, #80	; 0x50
  4032c4:	6023      	str	r3, [r4, #0]
  4032c6:	bd70      	pop	{r4, r5, r6, pc}
  4032c8:	00408354 	.word	0x00408354
  4032cc:	00402415 	.word	0x00402415

004032d0 <_usart_sync_write_byte>:
{
  4032d0:	b538      	push	{r3, r4, r5, lr}
  4032d2:	460c      	mov	r4, r1
	ASSERT(device);
  4032d4:	4605      	mov	r5, r0
  4032d6:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4032da:	4904      	ldr	r1, [pc, #16]	; (4032ec <_usart_sync_write_byte+0x1c>)
  4032dc:	3000      	adds	r0, #0
  4032de:	bf18      	it	ne
  4032e0:	2001      	movne	r0, #1
  4032e2:	4b03      	ldr	r3, [pc, #12]	; (4032f0 <_usart_sync_write_byte+0x20>)
  4032e4:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  4032e6:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  4032e8:	61dc      	str	r4, [r3, #28]
  4032ea:	bd38      	pop	{r3, r4, r5, pc}
  4032ec:	00408354 	.word	0x00408354
  4032f0:	00402415 	.word	0x00402415

004032f4 <_usart_sync_read_byte>:
{
  4032f4:	b510      	push	{r4, lr}
	ASSERT(device);
  4032f6:	4604      	mov	r4, r0
  4032f8:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  4032fc:	4904      	ldr	r1, [pc, #16]	; (403310 <_usart_sync_read_byte+0x1c>)
  4032fe:	3000      	adds	r0, #0
  403300:	bf18      	it	ne
  403302:	2001      	movne	r0, #1
  403304:	4b03      	ldr	r3, [pc, #12]	; (403314 <_usart_sync_read_byte+0x20>)
  403306:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  403308:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  40330a:	6998      	ldr	r0, [r3, #24]
}
  40330c:	b2c0      	uxtb	r0, r0
  40330e:	bd10      	pop	{r4, pc}
  403310:	00408354 	.word	0x00408354
  403314:	00402415 	.word	0x00402415

00403318 <_usart_sync_is_ready_to_send>:
{
  403318:	b510      	push	{r4, lr}
	ASSERT(device);
  40331a:	4604      	mov	r4, r0
  40331c:	f240 12c3 	movw	r2, #451	; 0x1c3
  403320:	4905      	ldr	r1, [pc, #20]	; (403338 <_usart_sync_is_ready_to_send+0x20>)
  403322:	3000      	adds	r0, #0
  403324:	bf18      	it	ne
  403326:	2001      	movne	r0, #1
  403328:	4b04      	ldr	r3, [pc, #16]	; (40333c <_usart_sync_is_ready_to_send+0x24>)
  40332a:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  40332c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  40332e:	6958      	ldr	r0, [r3, #20]
}
  403330:	f3c0 0040 	ubfx	r0, r0, #1, #1
  403334:	bd10      	pop	{r4, pc}
  403336:	bf00      	nop
  403338:	00408354 	.word	0x00408354
  40333c:	00402415 	.word	0x00402415

00403340 <_usart_sync_is_transmit_done>:
{
  403340:	b510      	push	{r4, lr}
	ASSERT(device);
  403342:	4604      	mov	r4, r0
  403344:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  403348:	4905      	ldr	r1, [pc, #20]	; (403360 <_usart_sync_is_transmit_done+0x20>)
  40334a:	3000      	adds	r0, #0
  40334c:	bf18      	it	ne
  40334e:	2001      	movne	r0, #1
  403350:	4b04      	ldr	r3, [pc, #16]	; (403364 <_usart_sync_is_transmit_done+0x24>)
  403352:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  403354:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  403356:	6958      	ldr	r0, [r3, #20]
}
  403358:	f3c0 2040 	ubfx	r0, r0, #9, #1
  40335c:	bd10      	pop	{r4, pc}
  40335e:	bf00      	nop
  403360:	00408354 	.word	0x00408354
  403364:	00402415 	.word	0x00402415

00403368 <_usart_sync_is_byte_received>:
{
  403368:	b510      	push	{r4, lr}
	ASSERT(device);
  40336a:	4604      	mov	r4, r0
  40336c:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  403370:	4905      	ldr	r1, [pc, #20]	; (403388 <_usart_sync_is_byte_received+0x20>)
  403372:	3000      	adds	r0, #0
  403374:	bf18      	it	ne
  403376:	2001      	movne	r0, #1
  403378:	4b04      	ldr	r3, [pc, #16]	; (40338c <_usart_sync_is_byte_received+0x24>)
  40337a:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  40337c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  40337e:	6958      	ldr	r0, [r3, #20]
  403380:	f000 0001 	and.w	r0, r0, #1
}
  403384:	bd10      	pop	{r4, pc}
  403386:	bf00      	nop
  403388:	00408354 	.word	0x00408354
  40338c:	00402415 	.word	0x00402415

00403390 <_usart_get_usart_sync>:
}
  403390:	2000      	movs	r0, #0
  403392:	4770      	bx	lr

00403394 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  403394:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  403396:	2300      	movs	r3, #0
  403398:	e004      	b.n	4033a4 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  40339a:	0199      	lsls	r1, r3, #6
  40339c:	4a16      	ldr	r2, [pc, #88]	; (4033f8 <_dma_init+0x64>)
  40339e:	5852      	ldr	r2, [r2, r1]
  4033a0:	3301      	adds	r3, #1
  4033a2:	b2db      	uxtb	r3, r3
  4033a4:	2b17      	cmp	r3, #23
  4033a6:	d9f8      	bls.n	40339a <_dma_init+0x6>
  4033a8:	2300      	movs	r3, #0
  4033aa:	e014      	b.n	4033d6 <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  4033ac:	4c13      	ldr	r4, [pc, #76]	; (4033fc <_dma_init+0x68>)
  4033ae:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  4033b2:	2100      	movs	r1, #0
  4033b4:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  4033b6:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  4033b8:	1c98      	adds	r0, r3, #2
  4033ba:	0180      	lsls	r0, r0, #6
  4033bc:	1825      	adds	r5, r4, r0
  4033be:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  4033c0:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  4033c2:	490f      	ldr	r1, [pc, #60]	; (403400 <_dma_init+0x6c>)
  4033c4:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  4033c8:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  4033ca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4033ce:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  4033d0:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4033d2:	3301      	adds	r3, #1
  4033d4:	b2db      	uxtb	r3, r3
  4033d6:	2b17      	cmp	r3, #23
  4033d8:	d9e8      	bls.n	4033ac <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4033da:	4b0a      	ldr	r3, [pc, #40]	; (403404 <_dma_init+0x70>)
  4033dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4033e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4033e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4033e8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4033ec:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4033f0:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  4033f2:	2000      	movs	r0, #0
  4033f4:	bc30      	pop	{r4, r5}
  4033f6:	4770      	bx	lr
  4033f8:	4007805c 	.word	0x4007805c
  4033fc:	40078000 	.word	0x40078000
  403400:	00408370 	.word	0x00408370
  403404:	e000e100 	.word	0xe000e100

00403408 <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  403408:	0180      	lsls	r0, r0, #6
  40340a:	4b02      	ldr	r3, [pc, #8]	; (403414 <_dma_set_destination_address+0xc>)
  40340c:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  40340e:	2000      	movs	r0, #0
  403410:	4770      	bx	lr
  403412:	bf00      	nop
  403414:	40078064 	.word	0x40078064

00403418 <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  403418:	0180      	lsls	r0, r0, #6
  40341a:	4b02      	ldr	r3, [pc, #8]	; (403424 <_dma_set_source_address+0xc>)
  40341c:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  40341e:	2000      	movs	r0, #0
  403420:	4770      	bx	lr
  403422:	bf00      	nop
  403424:	40078060 	.word	0x40078060

00403428 <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  403428:	0180      	lsls	r0, r0, #6
  40342a:	4a04      	ldr	r2, [pc, #16]	; (40343c <_dma_set_data_amount+0x14>)
  40342c:	4402      	add	r2, r0
  40342e:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  403430:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  403434:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  403436:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  403438:	2000      	movs	r0, #0
  40343a:	4770      	bx	lr
  40343c:	40078000 	.word	0x40078000

00403440 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  403440:	2301      	movs	r3, #1
  403442:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  403446:	4b03      	ldr	r3, [pc, #12]	; (403454 <_dma_enable_transaction+0x14>)
  403448:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  40344a:	b101      	cbz	r1, 40344e <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  40344c:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  40344e:	2000      	movs	r0, #0
  403450:	4770      	bx	lr
  403452:	bf00      	nop
  403454:	40078000 	.word	0x40078000

00403458 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  403458:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  40345c:	008a      	lsls	r2, r1, #2
  40345e:	4b02      	ldr	r3, [pc, #8]	; (403468 <_dma_get_channel_resource+0x10>)
  403460:	4413      	add	r3, r2
  403462:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  403464:	2000      	movs	r0, #0
  403466:	4770      	bx	lr
  403468:	2040049c 	.word	0x2040049c

0040346c <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  40346c:	b19a      	cbz	r2, 403496 <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  40346e:	b951      	cbnz	r1, 403486 <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  403470:	0182      	lsls	r2, r0, #6
  403472:	4b13      	ldr	r3, [pc, #76]	; (4034c0 <_dma_set_irq_state+0x54>)
  403474:	4413      	add	r3, r2
  403476:	2201      	movs	r2, #1
  403478:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  40347a:	2301      	movs	r3, #1
  40347c:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  403480:	4b0f      	ldr	r3, [pc, #60]	; (4034c0 <_dma_set_irq_state+0x54>)
  403482:	60d8      	str	r0, [r3, #12]
  403484:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  403486:	2901      	cmp	r1, #1
  403488:	d1f7      	bne.n	40347a <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  40348a:	0182      	lsls	r2, r0, #6
  40348c:	4b0c      	ldr	r3, [pc, #48]	; (4034c0 <_dma_set_irq_state+0x54>)
  40348e:	4413      	add	r3, r2
  403490:	2270      	movs	r2, #112	; 0x70
  403492:	651a      	str	r2, [r3, #80]	; 0x50
  403494:	e7f1      	b.n	40347a <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  403496:	b951      	cbnz	r1, 4034ae <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  403498:	0182      	lsls	r2, r0, #6
  40349a:	4b09      	ldr	r3, [pc, #36]	; (4034c0 <_dma_set_irq_state+0x54>)
  40349c:	4413      	add	r3, r2
  40349e:	2201      	movs	r2, #1
  4034a0:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  4034a2:	2301      	movs	r3, #1
  4034a4:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  4034a8:	4b05      	ldr	r3, [pc, #20]	; (4034c0 <_dma_set_irq_state+0x54>)
  4034aa:	6118      	str	r0, [r3, #16]
  4034ac:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4034ae:	2901      	cmp	r1, #1
  4034b0:	d1f7      	bne.n	4034a2 <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4034b2:	0182      	lsls	r2, r0, #6
  4034b4:	4b02      	ldr	r3, [pc, #8]	; (4034c0 <_dma_set_irq_state+0x54>)
  4034b6:	4413      	add	r3, r2
  4034b8:	2270      	movs	r2, #112	; 0x70
  4034ba:	655a      	str	r2, [r3, #84]	; 0x54
  4034bc:	e7f1      	b.n	4034a2 <_dma_set_irq_state+0x36>
  4034be:	bf00      	nop
  4034c0:	40078000 	.word	0x40078000

004034c4 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  4034c4:	4b17      	ldr	r3, [pc, #92]	; (403524 <XDMAC_Handler+0x60>)
  4034c6:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4034c8:	2300      	movs	r3, #0
  4034ca:	2b17      	cmp	r3, #23
  4034cc:	d81b      	bhi.n	403506 <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  4034ce:	fa21 f203 	lsr.w	r2, r1, r3
  4034d2:	f012 0f01 	tst.w	r2, #1
  4034d6:	d102      	bne.n	4034de <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4034d8:	3301      	adds	r3, #1
  4034da:	b2db      	uxtb	r3, r3
  4034dc:	e7f5      	b.n	4034ca <XDMAC_Handler+0x6>
			channel = i;
  4034de:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  4034e0:	2b00      	cmp	r3, #0
  4034e2:	db1d      	blt.n	403520 <XDMAC_Handler+0x5c>
{
  4034e4:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  4034e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  4034ea:	0090      	lsls	r0, r2, #2
  4034ec:	4a0e      	ldr	r2, [pc, #56]	; (403528 <XDMAC_Handler+0x64>)
  4034ee:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  4034f0:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  4034f2:	0189      	lsls	r1, r1, #6
  4034f4:	4a0d      	ldr	r2, [pc, #52]	; (40352c <XDMAC_Handler+0x68>)
  4034f6:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  4034f8:	f012 0f70 	tst.w	r2, #112	; 0x70
  4034fc:	d106      	bne.n	40350c <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  4034fe:	f012 0f01 	tst.w	r2, #1
  403502:	d106      	bne.n	403512 <XDMAC_Handler+0x4e>
  403504:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  403506:	f04f 33ff 	mov.w	r3, #4294967295
  40350a:	e7e9      	b.n	4034e0 <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  40350c:	6843      	ldr	r3, [r0, #4]
  40350e:	4798      	blx	r3
  403510:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  403512:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  403516:	00a3      	lsls	r3, r4, #2
  403518:	4a03      	ldr	r2, [pc, #12]	; (403528 <XDMAC_Handler+0x64>)
  40351a:	58d3      	ldr	r3, [r2, r3]
  40351c:	4798      	blx	r3
  40351e:	e7f1      	b.n	403504 <XDMAC_Handler+0x40>
  403520:	4770      	bx	lr
  403522:	bf00      	nop
  403524:	40078000 	.word	0x40078000
  403528:	2040049c 	.word	0x2040049c
  40352c:	4007805c 	.word	0x4007805c

00403530 <main>:
	// (reenabling it will halt the system)
	return;
}
*/
int main(void)
{
  403530:	b508      	push	{r3, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  403532:	4b3c      	ldr	r3, [pc, #240]	; (403624 <main+0xf4>)
  403534:	4798      	blx	r3
	REG_CPACR |= (0xFu << 20);
  403536:	4a3c      	ldr	r2, [pc, #240]	; (403628 <main+0xf8>)
  403538:	6813      	ldr	r3, [r2, #0]
  40353a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40353e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  403540:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  403544:	f3bf 8f6f 	isb	sy
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	//enable performance optimising features
	fpu_enable();
	if(SCB->CCR & (uint32_t)SCB_CCR_DC_Msk){
  403548:	4b38      	ldr	r3, [pc, #224]	; (40362c <main+0xfc>)
  40354a:	695b      	ldr	r3, [r3, #20]
  40354c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  403550:	d03f      	beq.n	4035d2 <main+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
  403552:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  403556:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  40355a:	4b34      	ldr	r3, [pc, #208]	; (40362c <main+0xfc>)
  40355c:	2200      	movs	r2, #0
  40355e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  403562:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  403566:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  40356a:	695a      	ldr	r2, [r3, #20]
  40356c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  403570:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  403572:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  403576:	f3bf 8f6f 	isb	sy
	SCB_EnableICache();
	
	
	
	/* Additional User initialisation */
	dma_adc_init();
  40357a:	4b2d      	ldr	r3, [pc, #180]	; (403630 <main+0x100>)
  40357c:	4798      	blx	r3
	pwm_init_user();
  40357e:	4b2d      	ldr	r3, [pc, #180]	; (403634 <main+0x104>)
  403580:	4798      	blx	r3
	encoder_init();
  403582:	4b2d      	ldr	r3, [pc, #180]	; (403638 <main+0x108>)
  403584:	4798      	blx	r3
	pos_sens_init();
  403586:	4b2d      	ldr	r3, [pc, #180]	; (40363c <main+0x10c>)
  403588:	4798      	blx	r3
	
	/* Enable all devices */
	pwm_enable_all();
  40358a:	4b2d      	ldr	r3, [pc, #180]	; (403640 <main+0x110>)
  40358c:	4798      	blx	r3
	adc_enable_all();
  40358e:	4b2d      	ldr	r3, [pc, #180]	; (403644 <main+0x114>)
  403590:	4798      	blx	r3
	calibrate_curr_sensors();	//both PWM and ADC need to be enabled to calibrate the current sensors
  403592:	4b2d      	ldr	r3, [pc, #180]	; (403648 <main+0x118>)
  403594:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  403596:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40359a:	4b2c      	ldr	r3, [pc, #176]	; (40364c <main+0x11c>)
  40359c:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);		//enables the DC-DC converter for the HV side
	
	timer_start(&ENCODER_A);
  40359e:	482c      	ldr	r0, [pc, #176]	; (403650 <main+0x120>)
  4035a0:	4c2c      	ldr	r4, [pc, #176]	; (403654 <main+0x124>)
  4035a2:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  4035a4:	482c      	ldr	r0, [pc, #176]	; (403658 <main+0x128>)
  4035a6:	47a0      	blx	r4
	
	dma_adc_0_enable_continuously();
  4035a8:	4b2c      	ldr	r3, [pc, #176]	; (40365c <main+0x12c>)
  4035aa:	4798      	blx	r3
	dma_adc_1_enable_continuously();
  4035ac:	4b2c      	ldr	r3, [pc, #176]	; (403660 <main+0x130>)
  4035ae:	4798      	blx	r3
	
	delay_ms(2000);
  4035b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  4035b4:	4c2b      	ldr	r4, [pc, #172]	; (403664 <main+0x134>)
  4035b6:	47a0      	blx	r4
	printf("START \n");
  4035b8:	482b      	ldr	r0, [pc, #172]	; (403668 <main+0x138>)
  4035ba:	4b2c      	ldr	r3, [pc, #176]	; (40366c <main+0x13c>)
  4035bc:	4798      	blx	r3
	delay_ms(2000);
  4035be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  4035c2:	47a0      	blx	r4
	
	Init_Control();
  4035c4:	4b2a      	ldr	r3, [pc, #168]	; (403670 <main+0x140>)
  4035c6:	4798      	blx	r3
	init_LPF();
  4035c8:	4b2a      	ldr	r3, [pc, #168]	; (403674 <main+0x144>)
  4035ca:	4798      	blx	r3
	enable_control();
  4035cc:	4b2a      	ldr	r3, [pc, #168]	; (403678 <main+0x148>)
  4035ce:	4798      	blx	r3
  4035d0:	e7fe      	b.n	4035d0 <main+0xa0>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  4035d2:	4b16      	ldr	r3, [pc, #88]	; (40362c <main+0xfc>)
  4035d4:	2200      	movs	r2, #0
  4035d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4035da:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
  4035de:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  4035e2:	f3c4 314e 	ubfx	r1, r4, #13, #15
  4035e6:	e00f      	b.n	403608 <main+0xd8>
      } while (ways-- != 0U);
  4035e8:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4035ea:	f643 73e0 	movw	r3, #16352	; 0x3fe0
  4035ee:	ea03 1341 	and.w	r3, r3, r1, lsl #5
  4035f2:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
  4035f6:	480d      	ldr	r0, [pc, #52]	; (40362c <main+0xfc>)
  4035f8:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
  4035fc:	1e53      	subs	r3, r2, #1
  4035fe:	2a00      	cmp	r2, #0
  403600:	d1f2      	bne.n	4035e8 <main+0xb8>
    } while(sets-- != 0U);
  403602:	1e4b      	subs	r3, r1, #1
  403604:	b119      	cbz	r1, 40360e <main+0xde>
  403606:	4619      	mov	r1, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  403608:	f3c4 02c9 	ubfx	r2, r4, #3, #10
  40360c:	e7ed      	b.n	4035ea <main+0xba>
  40360e:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  403612:	6943      	ldr	r3, [r0, #20]
  403614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  403618:	6143      	str	r3, [r0, #20]
  40361a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40361e:	f3bf 8f6f 	isb	sy
  403622:	e796      	b.n	403552 <main+0x22>
  403624:	004001d5 	.word	0x004001d5
  403628:	e000ed88 	.word	0xe000ed88
  40362c:	e000ed00 	.word	0xe000ed00
  403630:	00401339 	.word	0x00401339
  403634:	00401505 	.word	0x00401505
  403638:	00400c15 	.word	0x00400c15
  40363c:	00400f79 	.word	0x00400f79
  403640:	004015d9 	.word	0x004015d9
  403644:	00401425 	.word	0x00401425
  403648:	00400a41 	.word	0x00400a41
  40364c:	400e0e00 	.word	0x400e0e00
  403650:	20400840 	.word	0x20400840
  403654:	00402295 	.word	0x00402295
  403658:	20400790 	.word	0x20400790
  40365c:	004012f1 	.word	0x004012f1
  403660:	00401309 	.word	0x00401309
  403664:	00401ecd 	.word	0x00401ecd
  403668:	00408430 	.word	0x00408430
  40366c:	004061e1 	.word	0x004061e1
  403670:	004001e9 	.word	0x004001e9
  403674:	00400671 	.word	0x00400671
  403678:	0040109d 	.word	0x0040109d

0040367c <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  40367c:	b958      	cbnz	r0, 403696 <_read+0x1a>
{
  40367e:	b508      	push	{r3, lr}
  403680:	460b      	mov	r3, r1
  403682:	4611      	mov	r1, r2
  403684:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  403686:	4b05      	ldr	r3, [pc, #20]	; (40369c <_read+0x20>)
  403688:	4798      	blx	r3
	if (n < 0) {
  40368a:	2800      	cmp	r0, #0
  40368c:	db00      	blt.n	403690 <_read+0x14>
		return -1;
	}

	return n;
}
  40368e:	bd08      	pop	{r3, pc}
		return -1;
  403690:	f04f 30ff 	mov.w	r0, #4294967295
  403694:	bd08      	pop	{r3, pc}
		return -1;
  403696:	f04f 30ff 	mov.w	r0, #4294967295
  40369a:	4770      	bx	lr
  40369c:	004036f5 	.word	0x004036f5

004036a0 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  4036a0:	3801      	subs	r0, #1
  4036a2:	2802      	cmp	r0, #2
  4036a4:	d80b      	bhi.n	4036be <_write+0x1e>
{
  4036a6:	b508      	push	{r3, lr}
  4036a8:	460b      	mov	r3, r1
  4036aa:	4611      	mov	r1, r2
  4036ac:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  4036ae:	4b05      	ldr	r3, [pc, #20]	; (4036c4 <_write+0x24>)
  4036b0:	4798      	blx	r3
	if (n < 0) {
  4036b2:	2800      	cmp	r0, #0
  4036b4:	db00      	blt.n	4036b8 <_write+0x18>
		return -1;
	}

	return n;
}
  4036b6:	bd08      	pop	{r3, pc}
		return -1;
  4036b8:	f04f 30ff 	mov.w	r0, #4294967295
  4036bc:	bd08      	pop	{r3, pc}
		return -1;
  4036be:	f04f 30ff 	mov.w	r0, #4294967295
  4036c2:	4770      	bx	lr
  4036c4:	00403719 	.word	0x00403719

004036c8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  4036c8:	b570      	push	{r4, r5, r6, lr}
  4036ca:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  4036cc:	4d06      	ldr	r5, [pc, #24]	; (4036e8 <stdio_io_init+0x20>)
  4036ce:	682b      	ldr	r3, [r5, #0]
  4036d0:	2100      	movs	r1, #0
  4036d2:	6898      	ldr	r0, [r3, #8]
  4036d4:	4c05      	ldr	r4, [pc, #20]	; (4036ec <stdio_io_init+0x24>)
  4036d6:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4036d8:	682b      	ldr	r3, [r5, #0]
  4036da:	2100      	movs	r1, #0
  4036dc:	6858      	ldr	r0, [r3, #4]
  4036de:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  4036e0:	4b03      	ldr	r3, [pc, #12]	; (4036f0 <stdio_io_init+0x28>)
  4036e2:	601e      	str	r6, [r3, #0]
  4036e4:	bd70      	pop	{r4, r5, r6, pc}
  4036e6:	bf00      	nop
  4036e8:	2040004c 	.word	0x2040004c
  4036ec:	00406231 	.word	0x00406231
  4036f0:	204005bc 	.word	0x204005bc

004036f4 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  4036f4:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4036f6:	4b06      	ldr	r3, [pc, #24]	; (403710 <stdio_io_read+0x1c>)
  4036f8:	681b      	ldr	r3, [r3, #0]
  4036fa:	b133      	cbz	r3, 40370a <stdio_io_read+0x16>
  4036fc:	460a      	mov	r2, r1
  4036fe:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  403700:	b292      	uxth	r2, r2
  403702:	4618      	mov	r0, r3
  403704:	4b03      	ldr	r3, [pc, #12]	; (403714 <stdio_io_read+0x20>)
  403706:	4798      	blx	r3
  403708:	bd08      	pop	{r3, pc}
		return 0;
  40370a:	2000      	movs	r0, #0
}
  40370c:	bd08      	pop	{r3, pc}
  40370e:	bf00      	nop
  403710:	204005bc 	.word	0x204005bc
  403714:	00402065 	.word	0x00402065

00403718 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  403718:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40371a:	4b06      	ldr	r3, [pc, #24]	; (403734 <stdio_io_write+0x1c>)
  40371c:	681b      	ldr	r3, [r3, #0]
  40371e:	b133      	cbz	r3, 40372e <stdio_io_write+0x16>
  403720:	460a      	mov	r2, r1
  403722:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  403724:	b292      	uxth	r2, r2
  403726:	4618      	mov	r0, r3
  403728:	4b03      	ldr	r3, [pc, #12]	; (403738 <stdio_io_write+0x20>)
  40372a:	4798      	blx	r3
  40372c:	bd08      	pop	{r3, pc}
		return 0;
  40372e:	2000      	movs	r0, #0
}
  403730:	bd08      	pop	{r3, pc}
  403732:	bf00      	nop
  403734:	204005bc 	.word	0x204005bc
  403738:	00402035 	.word	0x00402035

0040373c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  40373c:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  40373e:	4c04      	ldr	r4, [pc, #16]	; (403750 <stdio_redirect_init+0x14>)
  403740:	4620      	mov	r0, r4
  403742:	4b04      	ldr	r3, [pc, #16]	; (403754 <stdio_redirect_init+0x18>)
  403744:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  403746:	4620      	mov	r0, r4
  403748:	4b03      	ldr	r3, [pc, #12]	; (403758 <stdio_redirect_init+0x1c>)
  40374a:	4798      	blx	r3
  40374c:	bd10      	pop	{r4, pc}
  40374e:	bf00      	nop
  403750:	20400834 	.word	0x20400834
  403754:	004023e9 	.word	0x004023e9
  403758:	004036c9 	.word	0x004036c9

0040375c <cos>:
  40375c:	b530      	push	{r4, r5, lr}
  40375e:	4a22      	ldr	r2, [pc, #136]	; (4037e8 <cos+0x8c>)
  403760:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  403764:	4293      	cmp	r3, r2
  403766:	b087      	sub	sp, #28
  403768:	dd1b      	ble.n	4037a2 <cos+0x46>
  40376a:	4a20      	ldr	r2, [pc, #128]	; (4037ec <cos+0x90>)
  40376c:	4293      	cmp	r3, r2
  40376e:	dd05      	ble.n	40377c <cos+0x20>
  403770:	4602      	mov	r2, r0
  403772:	460b      	mov	r3, r1
  403774:	f001 fb06 	bl	404d84 <__aeabi_dsub>
  403778:	b007      	add	sp, #28
  40377a:	bd30      	pop	{r4, r5, pc}
  40377c:	aa02      	add	r2, sp, #8
  40377e:	f000 f8db 	bl	403938 <__ieee754_rem_pio2>
  403782:	f000 0303 	and.w	r3, r0, #3
  403786:	2b01      	cmp	r3, #1
  403788:	d01a      	beq.n	4037c0 <cos+0x64>
  40378a:	2b02      	cmp	r3, #2
  40378c:	d00f      	beq.n	4037ae <cos+0x52>
  40378e:	b31b      	cbz	r3, 4037d8 <cos+0x7c>
  403790:	2401      	movs	r4, #1
  403792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40379a:	9400      	str	r4, [sp, #0]
  40379c:	f001 f918 	bl	4049d0 <__kernel_sin>
  4037a0:	e7ea      	b.n	403778 <cos+0x1c>
  4037a2:	2200      	movs	r2, #0
  4037a4:	2300      	movs	r3, #0
  4037a6:	f000 fba7 	bl	403ef8 <__kernel_cos>
  4037aa:	b007      	add	sp, #28
  4037ac:	bd30      	pop	{r4, r5, pc}
  4037ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4037b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4037b6:	f000 fb9f 	bl	403ef8 <__kernel_cos>
  4037ba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4037be:	e7db      	b.n	403778 <cos+0x1c>
  4037c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4037c4:	9300      	str	r3, [sp, #0]
  4037c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4037ca:	4622      	mov	r2, r4
  4037cc:	462b      	mov	r3, r5
  4037ce:	f001 f8ff 	bl	4049d0 <__kernel_sin>
  4037d2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4037d6:	e7cf      	b.n	403778 <cos+0x1c>
  4037d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4037dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4037e0:	f000 fb8a 	bl	403ef8 <__kernel_cos>
  4037e4:	e7c8      	b.n	403778 <cos+0x1c>
  4037e6:	bf00      	nop
  4037e8:	3fe921fb 	.word	0x3fe921fb
  4037ec:	7fefffff 	.word	0x7fefffff

004037f0 <sin>:
  4037f0:	b530      	push	{r4, r5, lr}
  4037f2:	4a1f      	ldr	r2, [pc, #124]	; (403870 <sin+0x80>)
  4037f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4037f8:	4293      	cmp	r3, r2
  4037fa:	b087      	sub	sp, #28
  4037fc:	dd1b      	ble.n	403836 <sin+0x46>
  4037fe:	4a1d      	ldr	r2, [pc, #116]	; (403874 <sin+0x84>)
  403800:	4293      	cmp	r3, r2
  403802:	dd05      	ble.n	403810 <sin+0x20>
  403804:	4602      	mov	r2, r0
  403806:	460b      	mov	r3, r1
  403808:	f001 fabc 	bl	404d84 <__aeabi_dsub>
  40380c:	b007      	add	sp, #28
  40380e:	bd30      	pop	{r4, r5, pc}
  403810:	aa02      	add	r2, sp, #8
  403812:	f000 f891 	bl	403938 <__ieee754_rem_pio2>
  403816:	f000 0003 	and.w	r0, r0, #3
  40381a:	2801      	cmp	r0, #1
  40381c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403820:	d01a      	beq.n	403858 <sin+0x68>
  403822:	2802      	cmp	r0, #2
  403824:	d00f      	beq.n	403846 <sin+0x56>
  403826:	b1e0      	cbz	r0, 403862 <sin+0x72>
  403828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40382c:	f000 fb64 	bl	403ef8 <__kernel_cos>
  403830:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403834:	e7ea      	b.n	40380c <sin+0x1c>
  403836:	2300      	movs	r3, #0
  403838:	9300      	str	r3, [sp, #0]
  40383a:	2200      	movs	r2, #0
  40383c:	2300      	movs	r3, #0
  40383e:	f001 f8c7 	bl	4049d0 <__kernel_sin>
  403842:	b007      	add	sp, #28
  403844:	bd30      	pop	{r4, r5, pc}
  403846:	2401      	movs	r4, #1
  403848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40384c:	9400      	str	r4, [sp, #0]
  40384e:	f001 f8bf 	bl	4049d0 <__kernel_sin>
  403852:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403856:	e7d9      	b.n	40380c <sin+0x1c>
  403858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40385c:	f000 fb4c 	bl	403ef8 <__kernel_cos>
  403860:	e7d4      	b.n	40380c <sin+0x1c>
  403862:	2401      	movs	r4, #1
  403864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403868:	9400      	str	r4, [sp, #0]
  40386a:	f001 f8b1 	bl	4049d0 <__kernel_sin>
  40386e:	e7cd      	b.n	40380c <sin+0x1c>
  403870:	3fe921fb 	.word	0x3fe921fb
  403874:	7fefffff 	.word	0x7fefffff

00403878 <sqrt>:
  403878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40387c:	b08b      	sub	sp, #44	; 0x2c
  40387e:	4604      	mov	r4, r0
  403880:	460d      	mov	r5, r1
  403882:	f000 fa7b 	bl	403d7c <__ieee754_sqrt>
  403886:	4b29      	ldr	r3, [pc, #164]	; (40392c <sqrt+0xb4>)
  403888:	f993 a000 	ldrsb.w	sl, [r3]
  40388c:	f1ba 3fff 	cmp.w	sl, #4294967295
  403890:	4606      	mov	r6, r0
  403892:	460f      	mov	r7, r1
  403894:	d012      	beq.n	4038bc <sqrt+0x44>
  403896:	4622      	mov	r2, r4
  403898:	462b      	mov	r3, r5
  40389a:	4620      	mov	r0, r4
  40389c:	4629      	mov	r1, r5
  40389e:	f001 febf 	bl	405620 <__aeabi_dcmpun>
  4038a2:	4683      	mov	fp, r0
  4038a4:	b950      	cbnz	r0, 4038bc <sqrt+0x44>
  4038a6:	f04f 0800 	mov.w	r8, #0
  4038aa:	f04f 0900 	mov.w	r9, #0
  4038ae:	4642      	mov	r2, r8
  4038b0:	464b      	mov	r3, r9
  4038b2:	4620      	mov	r0, r4
  4038b4:	4629      	mov	r1, r5
  4038b6:	f001 fe8b 	bl	4055d0 <__aeabi_dcmplt>
  4038ba:	b920      	cbnz	r0, 4038c6 <sqrt+0x4e>
  4038bc:	4630      	mov	r0, r6
  4038be:	4639      	mov	r1, r7
  4038c0:	b00b      	add	sp, #44	; 0x2c
  4038c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038c6:	4b1a      	ldr	r3, [pc, #104]	; (403930 <sqrt+0xb8>)
  4038c8:	f8cd b020 	str.w	fp, [sp, #32]
  4038cc:	2201      	movs	r2, #1
  4038ce:	e9cd 4504 	strd	r4, r5, [sp, #16]
  4038d2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4038d6:	e88d 000c 	stmia.w	sp, {r2, r3}
  4038da:	f1ba 0f00 	cmp.w	sl, #0
  4038de:	d017      	beq.n	403910 <sqrt+0x98>
  4038e0:	4642      	mov	r2, r8
  4038e2:	464b      	mov	r3, r9
  4038e4:	4640      	mov	r0, r8
  4038e6:	4649      	mov	r1, r9
  4038e8:	f001 fd2a 	bl	405340 <__aeabi_ddiv>
  4038ec:	f1ba 0f02 	cmp.w	sl, #2
  4038f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4038f4:	d10e      	bne.n	403914 <sqrt+0x9c>
  4038f6:	f001 ff21 	bl	40573c <__errno>
  4038fa:	2321      	movs	r3, #33	; 0x21
  4038fc:	6003      	str	r3, [r0, #0]
  4038fe:	9b08      	ldr	r3, [sp, #32]
  403900:	b973      	cbnz	r3, 403920 <sqrt+0xa8>
  403902:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  403906:	4630      	mov	r0, r6
  403908:	4639      	mov	r1, r7
  40390a:	b00b      	add	sp, #44	; 0x2c
  40390c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403910:	e9cd 8906 	strd	r8, r9, [sp, #24]
  403914:	4668      	mov	r0, sp
  403916:	f001 f9a3 	bl	404c60 <matherr>
  40391a:	2800      	cmp	r0, #0
  40391c:	d1ef      	bne.n	4038fe <sqrt+0x86>
  40391e:	e7ea      	b.n	4038f6 <sqrt+0x7e>
  403920:	f001 ff0c 	bl	40573c <__errno>
  403924:	9b08      	ldr	r3, [sp, #32]
  403926:	6003      	str	r3, [r0, #0]
  403928:	e7eb      	b.n	403902 <sqrt+0x8a>
  40392a:	bf00      	nop
  40392c:	20400048 	.word	0x20400048
  403930:	00408438 	.word	0x00408438
  403934:	00000000 	.word	0x00000000

00403938 <__ieee754_rem_pio2>:
  403938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40393c:	4e9a      	ldr	r6, [pc, #616]	; (403ba8 <__ieee754_rem_pio2+0x270>)
  40393e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  403942:	42b7      	cmp	r7, r6
  403944:	b091      	sub	sp, #68	; 0x44
  403946:	f340 808e 	ble.w	403a66 <__ieee754_rem_pio2+0x12e>
  40394a:	4692      	mov	sl, r2
  40394c:	4a97      	ldr	r2, [pc, #604]	; (403bac <__ieee754_rem_pio2+0x274>)
  40394e:	4297      	cmp	r7, r2
  403950:	460c      	mov	r4, r1
  403952:	dc26      	bgt.n	4039a2 <__ieee754_rem_pio2+0x6a>
  403954:	2900      	cmp	r1, #0
  403956:	a38a      	add	r3, pc, #552	; (adr r3, 403b80 <__ieee754_rem_pio2+0x248>)
  403958:	e9d3 2300 	ldrd	r2, r3, [r3]
  40395c:	f340 81b4 	ble.w	403cc8 <__ieee754_rem_pio2+0x390>
  403960:	f001 fa10 	bl	404d84 <__aeabi_dsub>
  403964:	4b92      	ldr	r3, [pc, #584]	; (403bb0 <__ieee754_rem_pio2+0x278>)
  403966:	429f      	cmp	r7, r3
  403968:	4604      	mov	r4, r0
  40396a:	460d      	mov	r5, r1
  40396c:	f000 8090 	beq.w	403a90 <__ieee754_rem_pio2+0x158>
  403970:	a385      	add	r3, pc, #532	; (adr r3, 403b88 <__ieee754_rem_pio2+0x250>)
  403972:	e9d3 2300 	ldrd	r2, r3, [r3]
  403976:	f001 fa05 	bl	404d84 <__aeabi_dsub>
  40397a:	4602      	mov	r2, r0
  40397c:	460b      	mov	r3, r1
  40397e:	e9ca 2300 	strd	r2, r3, [sl]
  403982:	4620      	mov	r0, r4
  403984:	4629      	mov	r1, r5
  403986:	f001 f9fd 	bl	404d84 <__aeabi_dsub>
  40398a:	a37f      	add	r3, pc, #508	; (adr r3, 403b88 <__ieee754_rem_pio2+0x250>)
  40398c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403990:	f001 f9f8 	bl	404d84 <__aeabi_dsub>
  403994:	2501      	movs	r5, #1
  403996:	e9ca 0102 	strd	r0, r1, [sl, #8]
  40399a:	4628      	mov	r0, r5
  40399c:	b011      	add	sp, #68	; 0x44
  40399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039a2:	4a84      	ldr	r2, [pc, #528]	; (403bb4 <__ieee754_rem_pio2+0x27c>)
  4039a4:	4297      	cmp	r7, r2
  4039a6:	f340 8090 	ble.w	403aca <__ieee754_rem_pio2+0x192>
  4039aa:	4a83      	ldr	r2, [pc, #524]	; (403bb8 <__ieee754_rem_pio2+0x280>)
  4039ac:	4297      	cmp	r7, r2
  4039ae:	dc65      	bgt.n	403a7c <__ieee754_rem_pio2+0x144>
  4039b0:	153d      	asrs	r5, r7, #20
  4039b2:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  4039b6:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  4039ba:	4619      	mov	r1, r3
  4039bc:	461f      	mov	r7, r3
  4039be:	4606      	mov	r6, r0
  4039c0:	f001 fe44 	bl	40564c <__aeabi_d2iz>
  4039c4:	f001 fb2c 	bl	405020 <__aeabi_i2d>
  4039c8:	4680      	mov	r8, r0
  4039ca:	4689      	mov	r9, r1
  4039cc:	4602      	mov	r2, r0
  4039ce:	460b      	mov	r3, r1
  4039d0:	4630      	mov	r0, r6
  4039d2:	4639      	mov	r1, r7
  4039d4:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  4039d8:	f001 f9d4 	bl	404d84 <__aeabi_dsub>
  4039dc:	2200      	movs	r2, #0
  4039de:	4b77      	ldr	r3, [pc, #476]	; (403bbc <__ieee754_rem_pio2+0x284>)
  4039e0:	f001 fb84 	bl	4050ec <__aeabi_dmul>
  4039e4:	4689      	mov	r9, r1
  4039e6:	4680      	mov	r8, r0
  4039e8:	f001 fe30 	bl	40564c <__aeabi_d2iz>
  4039ec:	f001 fb18 	bl	405020 <__aeabi_i2d>
  4039f0:	4602      	mov	r2, r0
  4039f2:	460b      	mov	r3, r1
  4039f4:	4606      	mov	r6, r0
  4039f6:	460f      	mov	r7, r1
  4039f8:	4640      	mov	r0, r8
  4039fa:	4649      	mov	r1, r9
  4039fc:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  403a00:	f001 f9c0 	bl	404d84 <__aeabi_dsub>
  403a04:	2200      	movs	r2, #0
  403a06:	4b6d      	ldr	r3, [pc, #436]	; (403bbc <__ieee754_rem_pio2+0x284>)
  403a08:	f001 fb70 	bl	4050ec <__aeabi_dmul>
  403a0c:	2200      	movs	r2, #0
  403a0e:	2300      	movs	r3, #0
  403a10:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  403a14:	f001 fdd2 	bl	4055bc <__aeabi_dcmpeq>
  403a18:	2800      	cmp	r0, #0
  403a1a:	f000 8173 	beq.w	403d04 <__ieee754_rem_pio2+0x3cc>
  403a1e:	2300      	movs	r3, #0
  403a20:	4630      	mov	r0, r6
  403a22:	4639      	mov	r1, r7
  403a24:	2200      	movs	r2, #0
  403a26:	f001 fdc9 	bl	4055bc <__aeabi_dcmpeq>
  403a2a:	2800      	cmp	r0, #0
  403a2c:	bf14      	ite	ne
  403a2e:	2301      	movne	r3, #1
  403a30:	2302      	moveq	r3, #2
  403a32:	4a63      	ldr	r2, [pc, #396]	; (403bc0 <__ieee754_rem_pio2+0x288>)
  403a34:	9201      	str	r2, [sp, #4]
  403a36:	2102      	movs	r1, #2
  403a38:	462a      	mov	r2, r5
  403a3a:	9100      	str	r1, [sp, #0]
  403a3c:	a80a      	add	r0, sp, #40	; 0x28
  403a3e:	4651      	mov	r1, sl
  403a40:	f000 fb7e 	bl	404140 <__kernel_rem_pio2>
  403a44:	2c00      	cmp	r4, #0
  403a46:	4605      	mov	r5, r0
  403a48:	da14      	bge.n	403a74 <__ieee754_rem_pio2+0x13c>
  403a4a:	f8da 2004 	ldr.w	r2, [sl, #4]
  403a4e:	f8da 300c 	ldr.w	r3, [sl, #12]
  403a52:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  403a56:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  403a5a:	4245      	negs	r5, r0
  403a5c:	f8ca 2004 	str.w	r2, [sl, #4]
  403a60:	f8ca 300c 	str.w	r3, [sl, #12]
  403a64:	e006      	b.n	403a74 <__ieee754_rem_pio2+0x13c>
  403a66:	e9c2 0100 	strd	r0, r1, [r2]
  403a6a:	2500      	movs	r5, #0
  403a6c:	2400      	movs	r4, #0
  403a6e:	e9c2 4502 	strd	r4, r5, [r2, #8]
  403a72:	2500      	movs	r5, #0
  403a74:	4628      	mov	r0, r5
  403a76:	b011      	add	sp, #68	; 0x44
  403a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a7c:	4602      	mov	r2, r0
  403a7e:	460b      	mov	r3, r1
  403a80:	f001 f980 	bl	404d84 <__aeabi_dsub>
  403a84:	2500      	movs	r5, #0
  403a86:	e9ca 0102 	strd	r0, r1, [sl, #8]
  403a8a:	e9ca 0100 	strd	r0, r1, [sl]
  403a8e:	e7f1      	b.n	403a74 <__ieee754_rem_pio2+0x13c>
  403a90:	a33f      	add	r3, pc, #252	; (adr r3, 403b90 <__ieee754_rem_pio2+0x258>)
  403a92:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a96:	f001 f975 	bl	404d84 <__aeabi_dsub>
  403a9a:	a33f      	add	r3, pc, #252	; (adr r3, 403b98 <__ieee754_rem_pio2+0x260>)
  403a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403aa0:	460d      	mov	r5, r1
  403aa2:	4604      	mov	r4, r0
  403aa4:	f001 f96e 	bl	404d84 <__aeabi_dsub>
  403aa8:	4602      	mov	r2, r0
  403aaa:	460b      	mov	r3, r1
  403aac:	e9ca 2300 	strd	r2, r3, [sl]
  403ab0:	4629      	mov	r1, r5
  403ab2:	4620      	mov	r0, r4
  403ab4:	f001 f966 	bl	404d84 <__aeabi_dsub>
  403ab8:	a337      	add	r3, pc, #220	; (adr r3, 403b98 <__ieee754_rem_pio2+0x260>)
  403aba:	e9d3 2300 	ldrd	r2, r3, [r3]
  403abe:	f001 f961 	bl	404d84 <__aeabi_dsub>
  403ac2:	2501      	movs	r5, #1
  403ac4:	e9ca 0102 	strd	r0, r1, [sl, #8]
  403ac8:	e7d4      	b.n	403a74 <__ieee754_rem_pio2+0x13c>
  403aca:	f001 f837 	bl	404b3c <fabs>
  403ace:	a334      	add	r3, pc, #208	; (adr r3, 403ba0 <__ieee754_rem_pio2+0x268>)
  403ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
  403ad4:	4680      	mov	r8, r0
  403ad6:	4689      	mov	r9, r1
  403ad8:	f001 fb08 	bl	4050ec <__aeabi_dmul>
  403adc:	2200      	movs	r2, #0
  403ade:	4b39      	ldr	r3, [pc, #228]	; (403bc4 <__ieee754_rem_pio2+0x28c>)
  403ae0:	f001 f952 	bl	404d88 <__adddf3>
  403ae4:	f001 fdb2 	bl	40564c <__aeabi_d2iz>
  403ae8:	4605      	mov	r5, r0
  403aea:	f001 fa99 	bl	405020 <__aeabi_i2d>
  403aee:	a324      	add	r3, pc, #144	; (adr r3, 403b80 <__ieee754_rem_pio2+0x248>)
  403af0:	e9d3 2300 	ldrd	r2, r3, [r3]
  403af4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403af8:	f001 faf8 	bl	4050ec <__aeabi_dmul>
  403afc:	4602      	mov	r2, r0
  403afe:	460b      	mov	r3, r1
  403b00:	4640      	mov	r0, r8
  403b02:	4649      	mov	r1, r9
  403b04:	f001 f93e 	bl	404d84 <__aeabi_dsub>
  403b08:	a31f      	add	r3, pc, #124	; (adr r3, 403b88 <__ieee754_rem_pio2+0x250>)
  403b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b0e:	4680      	mov	r8, r0
  403b10:	4689      	mov	r9, r1
  403b12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403b16:	f001 fae9 	bl	4050ec <__aeabi_dmul>
  403b1a:	2d1f      	cmp	r5, #31
  403b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403b20:	dc54      	bgt.n	403bcc <__ieee754_rem_pio2+0x294>
  403b22:	4b29      	ldr	r3, [pc, #164]	; (403bc8 <__ieee754_rem_pio2+0x290>)
  403b24:	1e6a      	subs	r2, r5, #1
  403b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403b2a:	429f      	cmp	r7, r3
  403b2c:	d04e      	beq.n	403bcc <__ieee754_rem_pio2+0x294>
  403b2e:	4602      	mov	r2, r0
  403b30:	460b      	mov	r3, r1
  403b32:	4640      	mov	r0, r8
  403b34:	4649      	mov	r1, r9
  403b36:	f001 f925 	bl	404d84 <__aeabi_dsub>
  403b3a:	4602      	mov	r2, r0
  403b3c:	460b      	mov	r3, r1
  403b3e:	e9ca 2300 	strd	r2, r3, [sl]
  403b42:	4683      	mov	fp, r0
  403b44:	460e      	mov	r6, r1
  403b46:	465a      	mov	r2, fp
  403b48:	4633      	mov	r3, r6
  403b4a:	4640      	mov	r0, r8
  403b4c:	4649      	mov	r1, r9
  403b4e:	f001 f919 	bl	404d84 <__aeabi_dsub>
  403b52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403b56:	f001 f915 	bl	404d84 <__aeabi_dsub>
  403b5a:	2c00      	cmp	r4, #0
  403b5c:	4602      	mov	r2, r0
  403b5e:	460b      	mov	r3, r1
  403b60:	e9ca 2302 	strd	r2, r3, [sl, #8]
  403b64:	da86      	bge.n	403a74 <__ieee754_rem_pio2+0x13c>
  403b66:	465b      	mov	r3, fp
  403b68:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  403b6c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403b70:	e88a 0048 	stmia.w	sl, {r3, r6}
  403b74:	f8ca 100c 	str.w	r1, [sl, #12]
  403b78:	f8ca 0008 	str.w	r0, [sl, #8]
  403b7c:	426d      	negs	r5, r5
  403b7e:	e779      	b.n	403a74 <__ieee754_rem_pio2+0x13c>
  403b80:	54400000 	.word	0x54400000
  403b84:	3ff921fb 	.word	0x3ff921fb
  403b88:	1a626331 	.word	0x1a626331
  403b8c:	3dd0b461 	.word	0x3dd0b461
  403b90:	1a600000 	.word	0x1a600000
  403b94:	3dd0b461 	.word	0x3dd0b461
  403b98:	2e037073 	.word	0x2e037073
  403b9c:	3ba3198a 	.word	0x3ba3198a
  403ba0:	6dc9c883 	.word	0x6dc9c883
  403ba4:	3fe45f30 	.word	0x3fe45f30
  403ba8:	3fe921fb 	.word	0x3fe921fb
  403bac:	4002d97b 	.word	0x4002d97b
  403bb0:	3ff921fb 	.word	0x3ff921fb
  403bb4:	413921fb 	.word	0x413921fb
  403bb8:	7fefffff 	.word	0x7fefffff
  403bbc:	41700000 	.word	0x41700000
  403bc0:	004084c0 	.word	0x004084c0
  403bc4:	3fe00000 	.word	0x3fe00000
  403bc8:	00408440 	.word	0x00408440
  403bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403bd0:	4640      	mov	r0, r8
  403bd2:	4649      	mov	r1, r9
  403bd4:	f001 f8d6 	bl	404d84 <__aeabi_dsub>
  403bd8:	153a      	asrs	r2, r7, #20
  403bda:	f3c1 530a 	ubfx	r3, r1, #20, #11
  403bde:	1ad3      	subs	r3, r2, r3
  403be0:	2b10      	cmp	r3, #16
  403be2:	4683      	mov	fp, r0
  403be4:	460e      	mov	r6, r1
  403be6:	9209      	str	r2, [sp, #36]	; 0x24
  403be8:	e9ca 0100 	strd	r0, r1, [sl]
  403bec:	ddab      	ble.n	403b46 <__ieee754_rem_pio2+0x20e>
  403bee:	a358      	add	r3, pc, #352	; (adr r3, 403d50 <__ieee754_rem_pio2+0x418>)
  403bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
  403bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403bf8:	f001 fa78 	bl	4050ec <__aeabi_dmul>
  403bfc:	4606      	mov	r6, r0
  403bfe:	460f      	mov	r7, r1
  403c00:	4602      	mov	r2, r0
  403c02:	460b      	mov	r3, r1
  403c04:	4640      	mov	r0, r8
  403c06:	4649      	mov	r1, r9
  403c08:	f001 f8bc 	bl	404d84 <__aeabi_dsub>
  403c0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403c10:	4602      	mov	r2, r0
  403c12:	460b      	mov	r3, r1
  403c14:	4640      	mov	r0, r8
  403c16:	4649      	mov	r1, r9
  403c18:	f001 f8b4 	bl	404d84 <__aeabi_dsub>
  403c1c:	4632      	mov	r2, r6
  403c1e:	463b      	mov	r3, r7
  403c20:	f001 f8b0 	bl	404d84 <__aeabi_dsub>
  403c24:	a34c      	add	r3, pc, #304	; (adr r3, 403d58 <__ieee754_rem_pio2+0x420>)
  403c26:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c2a:	4606      	mov	r6, r0
  403c2c:	460f      	mov	r7, r1
  403c2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403c32:	f001 fa5b 	bl	4050ec <__aeabi_dmul>
  403c36:	4632      	mov	r2, r6
  403c38:	463b      	mov	r3, r7
  403c3a:	f001 f8a3 	bl	404d84 <__aeabi_dsub>
  403c3e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  403c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403c46:	4602      	mov	r2, r0
  403c48:	460b      	mov	r3, r1
  403c4a:	4640      	mov	r0, r8
  403c4c:	4649      	mov	r1, r9
  403c4e:	f001 f899 	bl	404d84 <__aeabi_dsub>
  403c52:	460b      	mov	r3, r1
  403c54:	f3c1 570a 	ubfx	r7, r1, #20, #11
  403c58:	460e      	mov	r6, r1
  403c5a:	9909      	ldr	r1, [sp, #36]	; 0x24
  403c5c:	1bcf      	subs	r7, r1, r7
  403c5e:	4602      	mov	r2, r0
  403c60:	2f31      	cmp	r7, #49	; 0x31
  403c62:	4683      	mov	fp, r0
  403c64:	e9ca 2300 	strd	r2, r3, [sl]
  403c68:	dd6c      	ble.n	403d44 <__ieee754_rem_pio2+0x40c>
  403c6a:	a33d      	add	r3, pc, #244	; (adr r3, 403d60 <__ieee754_rem_pio2+0x428>)
  403c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403c74:	f001 fa3a 	bl	4050ec <__aeabi_dmul>
  403c78:	4606      	mov	r6, r0
  403c7a:	460f      	mov	r7, r1
  403c7c:	4602      	mov	r2, r0
  403c7e:	460b      	mov	r3, r1
  403c80:	4640      	mov	r0, r8
  403c82:	4649      	mov	r1, r9
  403c84:	e9cd 8906 	strd	r8, r9, [sp, #24]
  403c88:	f001 f87c 	bl	404d84 <__aeabi_dsub>
  403c8c:	4602      	mov	r2, r0
  403c8e:	460b      	mov	r3, r1
  403c90:	4680      	mov	r8, r0
  403c92:	4689      	mov	r9, r1
  403c94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  403c98:	f001 f874 	bl	404d84 <__aeabi_dsub>
  403c9c:	4632      	mov	r2, r6
  403c9e:	463b      	mov	r3, r7
  403ca0:	f001 f870 	bl	404d84 <__aeabi_dsub>
  403ca4:	a330      	add	r3, pc, #192	; (adr r3, 403d68 <__ieee754_rem_pio2+0x430>)
  403ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
  403caa:	4606      	mov	r6, r0
  403cac:	460f      	mov	r7, r1
  403cae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403cb2:	f001 fa1b 	bl	4050ec <__aeabi_dmul>
  403cb6:	4632      	mov	r2, r6
  403cb8:	463b      	mov	r3, r7
  403cba:	f001 f863 	bl	404d84 <__aeabi_dsub>
  403cbe:	4602      	mov	r2, r0
  403cc0:	460b      	mov	r3, r1
  403cc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403cc6:	e734      	b.n	403b32 <__ieee754_rem_pio2+0x1fa>
  403cc8:	f001 f85e 	bl	404d88 <__adddf3>
  403ccc:	4b2a      	ldr	r3, [pc, #168]	; (403d78 <__ieee754_rem_pio2+0x440>)
  403cce:	429f      	cmp	r7, r3
  403cd0:	4604      	mov	r4, r0
  403cd2:	460d      	mov	r5, r1
  403cd4:	d018      	beq.n	403d08 <__ieee754_rem_pio2+0x3d0>
  403cd6:	a326      	add	r3, pc, #152	; (adr r3, 403d70 <__ieee754_rem_pio2+0x438>)
  403cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
  403cdc:	f001 f854 	bl	404d88 <__adddf3>
  403ce0:	4602      	mov	r2, r0
  403ce2:	460b      	mov	r3, r1
  403ce4:	e9ca 2300 	strd	r2, r3, [sl]
  403ce8:	4629      	mov	r1, r5
  403cea:	4620      	mov	r0, r4
  403cec:	f001 f84a 	bl	404d84 <__aeabi_dsub>
  403cf0:	a31f      	add	r3, pc, #124	; (adr r3, 403d70 <__ieee754_rem_pio2+0x438>)
  403cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
  403cf6:	f001 f847 	bl	404d88 <__adddf3>
  403cfa:	f04f 35ff 	mov.w	r5, #4294967295
  403cfe:	e9ca 0102 	strd	r0, r1, [sl, #8]
  403d02:	e6b7      	b.n	403a74 <__ieee754_rem_pio2+0x13c>
  403d04:	2303      	movs	r3, #3
  403d06:	e694      	b.n	403a32 <__ieee754_rem_pio2+0xfa>
  403d08:	a311      	add	r3, pc, #68	; (adr r3, 403d50 <__ieee754_rem_pio2+0x418>)
  403d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d0e:	f001 f83b 	bl	404d88 <__adddf3>
  403d12:	a311      	add	r3, pc, #68	; (adr r3, 403d58 <__ieee754_rem_pio2+0x420>)
  403d14:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d18:	460d      	mov	r5, r1
  403d1a:	4604      	mov	r4, r0
  403d1c:	f001 f834 	bl	404d88 <__adddf3>
  403d20:	4602      	mov	r2, r0
  403d22:	460b      	mov	r3, r1
  403d24:	e9ca 2300 	strd	r2, r3, [sl]
  403d28:	4629      	mov	r1, r5
  403d2a:	4620      	mov	r0, r4
  403d2c:	f001 f82a 	bl	404d84 <__aeabi_dsub>
  403d30:	a309      	add	r3, pc, #36	; (adr r3, 403d58 <__ieee754_rem_pio2+0x420>)
  403d32:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d36:	f001 f827 	bl	404d88 <__adddf3>
  403d3a:	f04f 35ff 	mov.w	r5, #4294967295
  403d3e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  403d42:	e697      	b.n	403a74 <__ieee754_rem_pio2+0x13c>
  403d44:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  403d48:	e6fd      	b.n	403b46 <__ieee754_rem_pio2+0x20e>
  403d4a:	bf00      	nop
  403d4c:	f3af 8000 	nop.w
  403d50:	1a600000 	.word	0x1a600000
  403d54:	3dd0b461 	.word	0x3dd0b461
  403d58:	2e037073 	.word	0x2e037073
  403d5c:	3ba3198a 	.word	0x3ba3198a
  403d60:	2e000000 	.word	0x2e000000
  403d64:	3ba3198a 	.word	0x3ba3198a
  403d68:	252049c1 	.word	0x252049c1
  403d6c:	397b839a 	.word	0x397b839a
  403d70:	1a626331 	.word	0x1a626331
  403d74:	3dd0b461 	.word	0x3dd0b461
  403d78:	3ff921fb 	.word	0x3ff921fb

00403d7c <__ieee754_sqrt>:
  403d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403d80:	4f5b      	ldr	r7, [pc, #364]	; (403ef0 <__ieee754_sqrt+0x174>)
  403d82:	438f      	bics	r7, r1
  403d84:	4605      	mov	r5, r0
  403d86:	460c      	mov	r4, r1
  403d88:	f000 8092 	beq.w	403eb0 <__ieee754_sqrt+0x134>
  403d8c:	2900      	cmp	r1, #0
  403d8e:	460b      	mov	r3, r1
  403d90:	4602      	mov	r2, r0
  403d92:	dd6f      	ble.n	403e74 <__ieee754_sqrt+0xf8>
  403d94:	150f      	asrs	r7, r1, #20
  403d96:	d07b      	beq.n	403e90 <__ieee754_sqrt+0x114>
  403d98:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  403d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
  403da0:	07f8      	lsls	r0, r7, #31
  403da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403da6:	d45c      	bmi.n	403e62 <__ieee754_sqrt+0xe6>
  403da8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  403dac:	2600      	movs	r6, #0
  403dae:	440b      	add	r3, r1
  403db0:	107f      	asrs	r7, r7, #1
  403db2:	0052      	lsls	r2, r2, #1
  403db4:	46b6      	mov	lr, r6
  403db6:	2016      	movs	r0, #22
  403db8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  403dbc:	eb0e 0401 	add.w	r4, lr, r1
  403dc0:	429c      	cmp	r4, r3
  403dc2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  403dc6:	ea4f 0242 	mov.w	r2, r2, lsl #1
  403dca:	dc03      	bgt.n	403dd4 <__ieee754_sqrt+0x58>
  403dcc:	1b1b      	subs	r3, r3, r4
  403dce:	eb04 0e01 	add.w	lr, r4, r1
  403dd2:	440e      	add	r6, r1
  403dd4:	3801      	subs	r0, #1
  403dd6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  403dda:	ea4f 0151 	mov.w	r1, r1, lsr #1
  403dde:	d1ed      	bne.n	403dbc <__ieee754_sqrt+0x40>
  403de0:	4684      	mov	ip, r0
  403de2:	2420      	movs	r4, #32
  403de4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403de8:	e009      	b.n	403dfe <__ieee754_sqrt+0x82>
  403dea:	d020      	beq.n	403e2e <__ieee754_sqrt+0xb2>
  403dec:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  403df0:	3c01      	subs	r4, #1
  403df2:	ea4f 0151 	mov.w	r1, r1, lsr #1
  403df6:	442b      	add	r3, r5
  403df8:	ea4f 0242 	mov.w	r2, r2, lsl #1
  403dfc:	d020      	beq.n	403e40 <__ieee754_sqrt+0xc4>
  403dfe:	4573      	cmp	r3, lr
  403e00:	eb01 050c 	add.w	r5, r1, ip
  403e04:	ddf1      	ble.n	403dea <__ieee754_sqrt+0x6e>
  403e06:	2d00      	cmp	r5, #0
  403e08:	eb05 0c01 	add.w	ip, r5, r1
  403e0c:	db09      	blt.n	403e22 <__ieee754_sqrt+0xa6>
  403e0e:	46f0      	mov	r8, lr
  403e10:	4295      	cmp	r5, r2
  403e12:	eba3 030e 	sub.w	r3, r3, lr
  403e16:	d900      	bls.n	403e1a <__ieee754_sqrt+0x9e>
  403e18:	3b01      	subs	r3, #1
  403e1a:	1b52      	subs	r2, r2, r5
  403e1c:	4408      	add	r0, r1
  403e1e:	46c6      	mov	lr, r8
  403e20:	e7e4      	b.n	403dec <__ieee754_sqrt+0x70>
  403e22:	f1bc 0f00 	cmp.w	ip, #0
  403e26:	dbf2      	blt.n	403e0e <__ieee754_sqrt+0x92>
  403e28:	f10e 0801 	add.w	r8, lr, #1
  403e2c:	e7f0      	b.n	403e10 <__ieee754_sqrt+0x94>
  403e2e:	4295      	cmp	r5, r2
  403e30:	d8dc      	bhi.n	403dec <__ieee754_sqrt+0x70>
  403e32:	2d00      	cmp	r5, #0
  403e34:	eb05 0c01 	add.w	ip, r5, r1
  403e38:	db44      	blt.n	403ec4 <__ieee754_sqrt+0x148>
  403e3a:	4698      	mov	r8, r3
  403e3c:	2300      	movs	r3, #0
  403e3e:	e7ec      	b.n	403e1a <__ieee754_sqrt+0x9e>
  403e40:	4313      	orrs	r3, r2
  403e42:	d113      	bne.n	403e6c <__ieee754_sqrt+0xf0>
  403e44:	0840      	lsrs	r0, r0, #1
  403e46:	1073      	asrs	r3, r6, #1
  403e48:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  403e4c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403e50:	07f2      	lsls	r2, r6, #31
  403e52:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  403e56:	bf48      	it	mi
  403e58:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  403e5c:	4649      	mov	r1, r9
  403e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403e62:	005b      	lsls	r3, r3, #1
  403e64:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  403e68:	0052      	lsls	r2, r2, #1
  403e6a:	e79d      	b.n	403da8 <__ieee754_sqrt+0x2c>
  403e6c:	1c41      	adds	r1, r0, #1
  403e6e:	d02d      	beq.n	403ecc <__ieee754_sqrt+0x150>
  403e70:	3001      	adds	r0, #1
  403e72:	e7e7      	b.n	403e44 <__ieee754_sqrt+0xc8>
  403e74:	4606      	mov	r6, r0
  403e76:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  403e7a:	433e      	orrs	r6, r7
  403e7c:	d0ef      	beq.n	403e5e <__ieee754_sqrt+0xe2>
  403e7e:	bb69      	cbnz	r1, 403edc <__ieee754_sqrt+0x160>
  403e80:	460f      	mov	r7, r1
  403e82:	0ad3      	lsrs	r3, r2, #11
  403e84:	3f15      	subs	r7, #21
  403e86:	0552      	lsls	r2, r2, #21
  403e88:	2b00      	cmp	r3, #0
  403e8a:	d0fa      	beq.n	403e82 <__ieee754_sqrt+0x106>
  403e8c:	02de      	lsls	r6, r3, #11
  403e8e:	d420      	bmi.n	403ed2 <__ieee754_sqrt+0x156>
  403e90:	2400      	movs	r4, #0
  403e92:	e000      	b.n	403e96 <__ieee754_sqrt+0x11a>
  403e94:	4604      	mov	r4, r0
  403e96:	005b      	lsls	r3, r3, #1
  403e98:	02dd      	lsls	r5, r3, #11
  403e9a:	f104 0001 	add.w	r0, r4, #1
  403e9e:	d5f9      	bpl.n	403e94 <__ieee754_sqrt+0x118>
  403ea0:	f1c0 0120 	rsb	r1, r0, #32
  403ea4:	fa22 f101 	lsr.w	r1, r2, r1
  403ea8:	430b      	orrs	r3, r1
  403eaa:	1b3f      	subs	r7, r7, r4
  403eac:	4082      	lsls	r2, r0
  403eae:	e773      	b.n	403d98 <__ieee754_sqrt+0x1c>
  403eb0:	4602      	mov	r2, r0
  403eb2:	460b      	mov	r3, r1
  403eb4:	f001 f91a 	bl	4050ec <__aeabi_dmul>
  403eb8:	462a      	mov	r2, r5
  403eba:	4623      	mov	r3, r4
  403ebc:	f000 ff64 	bl	404d88 <__adddf3>
  403ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403ec4:	f1bc 0f00 	cmp.w	ip, #0
  403ec8:	daae      	bge.n	403e28 <__ieee754_sqrt+0xac>
  403eca:	e7b6      	b.n	403e3a <__ieee754_sqrt+0xbe>
  403ecc:	3601      	adds	r6, #1
  403ece:	4620      	mov	r0, r4
  403ed0:	e7b9      	b.n	403e46 <__ieee754_sqrt+0xca>
  403ed2:	2000      	movs	r0, #0
  403ed4:	2120      	movs	r1, #32
  403ed6:	f04f 34ff 	mov.w	r4, #4294967295
  403eda:	e7e3      	b.n	403ea4 <__ieee754_sqrt+0x128>
  403edc:	4602      	mov	r2, r0
  403ede:	460b      	mov	r3, r1
  403ee0:	f000 ff50 	bl	404d84 <__aeabi_dsub>
  403ee4:	4602      	mov	r2, r0
  403ee6:	460b      	mov	r3, r1
  403ee8:	f001 fa2a 	bl	405340 <__aeabi_ddiv>
  403eec:	e7b7      	b.n	403e5e <__ieee754_sqrt+0xe2>
  403eee:	bf00      	nop
  403ef0:	7ff00000 	.word	0x7ff00000
  403ef4:	00000000 	.word	0x00000000

00403ef8 <__kernel_cos>:
  403ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403efc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  403f00:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  403f04:	b085      	sub	sp, #20
  403f06:	460c      	mov	r4, r1
  403f08:	4692      	mov	sl, r2
  403f0a:	469b      	mov	fp, r3
  403f0c:	4605      	mov	r5, r0
  403f0e:	da6b      	bge.n	403fe8 <__kernel_cos+0xf0>
  403f10:	f001 fb9c 	bl	40564c <__aeabi_d2iz>
  403f14:	2800      	cmp	r0, #0
  403f16:	f000 80e8 	beq.w	4040ea <__kernel_cos+0x1f2>
  403f1a:	462a      	mov	r2, r5
  403f1c:	4623      	mov	r3, r4
  403f1e:	4628      	mov	r0, r5
  403f20:	4621      	mov	r1, r4
  403f22:	f001 f8e3 	bl	4050ec <__aeabi_dmul>
  403f26:	a374      	add	r3, pc, #464	; (adr r3, 4040f8 <__kernel_cos+0x200>)
  403f28:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f2c:	4680      	mov	r8, r0
  403f2e:	4689      	mov	r9, r1
  403f30:	f001 f8dc 	bl	4050ec <__aeabi_dmul>
  403f34:	a372      	add	r3, pc, #456	; (adr r3, 404100 <__kernel_cos+0x208>)
  403f36:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f3a:	f000 ff25 	bl	404d88 <__adddf3>
  403f3e:	4642      	mov	r2, r8
  403f40:	464b      	mov	r3, r9
  403f42:	f001 f8d3 	bl	4050ec <__aeabi_dmul>
  403f46:	a370      	add	r3, pc, #448	; (adr r3, 404108 <__kernel_cos+0x210>)
  403f48:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f4c:	f000 ff1a 	bl	404d84 <__aeabi_dsub>
  403f50:	4642      	mov	r2, r8
  403f52:	464b      	mov	r3, r9
  403f54:	f001 f8ca 	bl	4050ec <__aeabi_dmul>
  403f58:	a36d      	add	r3, pc, #436	; (adr r3, 404110 <__kernel_cos+0x218>)
  403f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f5e:	f000 ff13 	bl	404d88 <__adddf3>
  403f62:	4642      	mov	r2, r8
  403f64:	464b      	mov	r3, r9
  403f66:	f001 f8c1 	bl	4050ec <__aeabi_dmul>
  403f6a:	a36b      	add	r3, pc, #428	; (adr r3, 404118 <__kernel_cos+0x220>)
  403f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f70:	f000 ff08 	bl	404d84 <__aeabi_dsub>
  403f74:	4642      	mov	r2, r8
  403f76:	464b      	mov	r3, r9
  403f78:	f001 f8b8 	bl	4050ec <__aeabi_dmul>
  403f7c:	a368      	add	r3, pc, #416	; (adr r3, 404120 <__kernel_cos+0x228>)
  403f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f82:	f000 ff01 	bl	404d88 <__adddf3>
  403f86:	4642      	mov	r2, r8
  403f88:	464b      	mov	r3, r9
  403f8a:	f001 f8af 	bl	4050ec <__aeabi_dmul>
  403f8e:	e9cd 0100 	strd	r0, r1, [sp]
  403f92:	2200      	movs	r2, #0
  403f94:	4b64      	ldr	r3, [pc, #400]	; (404128 <__kernel_cos+0x230>)
  403f96:	4640      	mov	r0, r8
  403f98:	4649      	mov	r1, r9
  403f9a:	f001 f8a7 	bl	4050ec <__aeabi_dmul>
  403f9e:	e9dd 2300 	ldrd	r2, r3, [sp]
  403fa2:	4606      	mov	r6, r0
  403fa4:	460f      	mov	r7, r1
  403fa6:	4640      	mov	r0, r8
  403fa8:	4649      	mov	r1, r9
  403faa:	f001 f89f 	bl	4050ec <__aeabi_dmul>
  403fae:	4652      	mov	r2, sl
  403fb0:	4680      	mov	r8, r0
  403fb2:	4689      	mov	r9, r1
  403fb4:	465b      	mov	r3, fp
  403fb6:	4628      	mov	r0, r5
  403fb8:	4621      	mov	r1, r4
  403fba:	f001 f897 	bl	4050ec <__aeabi_dmul>
  403fbe:	4602      	mov	r2, r0
  403fc0:	460b      	mov	r3, r1
  403fc2:	4640      	mov	r0, r8
  403fc4:	4649      	mov	r1, r9
  403fc6:	f000 fedd 	bl	404d84 <__aeabi_dsub>
  403fca:	4602      	mov	r2, r0
  403fcc:	460b      	mov	r3, r1
  403fce:	4630      	mov	r0, r6
  403fd0:	4639      	mov	r1, r7
  403fd2:	f000 fed7 	bl	404d84 <__aeabi_dsub>
  403fd6:	4602      	mov	r2, r0
  403fd8:	460b      	mov	r3, r1
  403fda:	2000      	movs	r0, #0
  403fdc:	4953      	ldr	r1, [pc, #332]	; (40412c <__kernel_cos+0x234>)
  403fde:	f000 fed1 	bl	404d84 <__aeabi_dsub>
  403fe2:	b005      	add	sp, #20
  403fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fe8:	4602      	mov	r2, r0
  403fea:	460b      	mov	r3, r1
  403fec:	f001 f87e 	bl	4050ec <__aeabi_dmul>
  403ff0:	a341      	add	r3, pc, #260	; (adr r3, 4040f8 <__kernel_cos+0x200>)
  403ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
  403ff6:	4680      	mov	r8, r0
  403ff8:	4689      	mov	r9, r1
  403ffa:	f001 f877 	bl	4050ec <__aeabi_dmul>
  403ffe:	a340      	add	r3, pc, #256	; (adr r3, 404100 <__kernel_cos+0x208>)
  404000:	e9d3 2300 	ldrd	r2, r3, [r3]
  404004:	f000 fec0 	bl	404d88 <__adddf3>
  404008:	4642      	mov	r2, r8
  40400a:	464b      	mov	r3, r9
  40400c:	f001 f86e 	bl	4050ec <__aeabi_dmul>
  404010:	a33d      	add	r3, pc, #244	; (adr r3, 404108 <__kernel_cos+0x210>)
  404012:	e9d3 2300 	ldrd	r2, r3, [r3]
  404016:	f000 feb5 	bl	404d84 <__aeabi_dsub>
  40401a:	4642      	mov	r2, r8
  40401c:	464b      	mov	r3, r9
  40401e:	f001 f865 	bl	4050ec <__aeabi_dmul>
  404022:	a33b      	add	r3, pc, #236	; (adr r3, 404110 <__kernel_cos+0x218>)
  404024:	e9d3 2300 	ldrd	r2, r3, [r3]
  404028:	f000 feae 	bl	404d88 <__adddf3>
  40402c:	4642      	mov	r2, r8
  40402e:	464b      	mov	r3, r9
  404030:	f001 f85c 	bl	4050ec <__aeabi_dmul>
  404034:	a338      	add	r3, pc, #224	; (adr r3, 404118 <__kernel_cos+0x220>)
  404036:	e9d3 2300 	ldrd	r2, r3, [r3]
  40403a:	f000 fea3 	bl	404d84 <__aeabi_dsub>
  40403e:	4642      	mov	r2, r8
  404040:	464b      	mov	r3, r9
  404042:	f001 f853 	bl	4050ec <__aeabi_dmul>
  404046:	a336      	add	r3, pc, #216	; (adr r3, 404120 <__kernel_cos+0x228>)
  404048:	e9d3 2300 	ldrd	r2, r3, [r3]
  40404c:	f000 fe9c 	bl	404d88 <__adddf3>
  404050:	464b      	mov	r3, r9
  404052:	4642      	mov	r2, r8
  404054:	f001 f84a 	bl	4050ec <__aeabi_dmul>
  404058:	4b35      	ldr	r3, [pc, #212]	; (404130 <__kernel_cos+0x238>)
  40405a:	429e      	cmp	r6, r3
  40405c:	e9cd 0100 	strd	r0, r1, [sp]
  404060:	dd97      	ble.n	403f92 <__kernel_cos+0x9a>
  404062:	4b34      	ldr	r3, [pc, #208]	; (404134 <__kernel_cos+0x23c>)
  404064:	429e      	cmp	r6, r3
  404066:	f04f 0200 	mov.w	r2, #0
  40406a:	dc38      	bgt.n	4040de <__kernel_cos+0x1e6>
  40406c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  404070:	2000      	movs	r0, #0
  404072:	492e      	ldr	r1, [pc, #184]	; (40412c <__kernel_cos+0x234>)
  404074:	4616      	mov	r6, r2
  404076:	461f      	mov	r7, r3
  404078:	f000 fe84 	bl	404d84 <__aeabi_dsub>
  40407c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404080:	2200      	movs	r2, #0
  404082:	4b29      	ldr	r3, [pc, #164]	; (404128 <__kernel_cos+0x230>)
  404084:	4640      	mov	r0, r8
  404086:	4649      	mov	r1, r9
  404088:	f001 f830 	bl	4050ec <__aeabi_dmul>
  40408c:	4632      	mov	r2, r6
  40408e:	463b      	mov	r3, r7
  404090:	f000 fe78 	bl	404d84 <__aeabi_dsub>
  404094:	e9dd 2300 	ldrd	r2, r3, [sp]
  404098:	4606      	mov	r6, r0
  40409a:	460f      	mov	r7, r1
  40409c:	4640      	mov	r0, r8
  40409e:	4649      	mov	r1, r9
  4040a0:	f001 f824 	bl	4050ec <__aeabi_dmul>
  4040a4:	4652      	mov	r2, sl
  4040a6:	4680      	mov	r8, r0
  4040a8:	4689      	mov	r9, r1
  4040aa:	465b      	mov	r3, fp
  4040ac:	4628      	mov	r0, r5
  4040ae:	4621      	mov	r1, r4
  4040b0:	f001 f81c 	bl	4050ec <__aeabi_dmul>
  4040b4:	4602      	mov	r2, r0
  4040b6:	460b      	mov	r3, r1
  4040b8:	4640      	mov	r0, r8
  4040ba:	4649      	mov	r1, r9
  4040bc:	f000 fe62 	bl	404d84 <__aeabi_dsub>
  4040c0:	4602      	mov	r2, r0
  4040c2:	460b      	mov	r3, r1
  4040c4:	4630      	mov	r0, r6
  4040c6:	4639      	mov	r1, r7
  4040c8:	f000 fe5c 	bl	404d84 <__aeabi_dsub>
  4040cc:	4602      	mov	r2, r0
  4040ce:	460b      	mov	r3, r1
  4040d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4040d4:	f000 fe56 	bl	404d84 <__aeabi_dsub>
  4040d8:	b005      	add	sp, #20
  4040da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040de:	4b16      	ldr	r3, [pc, #88]	; (404138 <__kernel_cos+0x240>)
  4040e0:	4f16      	ldr	r7, [pc, #88]	; (40413c <__kernel_cos+0x244>)
  4040e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4040e6:	2600      	movs	r6, #0
  4040e8:	e7ca      	b.n	404080 <__kernel_cos+0x188>
  4040ea:	4910      	ldr	r1, [pc, #64]	; (40412c <__kernel_cos+0x234>)
  4040ec:	2000      	movs	r0, #0
  4040ee:	b005      	add	sp, #20
  4040f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040f4:	f3af 8000 	nop.w
  4040f8:	be8838d4 	.word	0xbe8838d4
  4040fc:	bda8fae9 	.word	0xbda8fae9
  404100:	bdb4b1c4 	.word	0xbdb4b1c4
  404104:	3e21ee9e 	.word	0x3e21ee9e
  404108:	809c52ad 	.word	0x809c52ad
  40410c:	3e927e4f 	.word	0x3e927e4f
  404110:	19cb1590 	.word	0x19cb1590
  404114:	3efa01a0 	.word	0x3efa01a0
  404118:	16c15177 	.word	0x16c15177
  40411c:	3f56c16c 	.word	0x3f56c16c
  404120:	5555554c 	.word	0x5555554c
  404124:	3fa55555 	.word	0x3fa55555
  404128:	3fe00000 	.word	0x3fe00000
  40412c:	3ff00000 	.word	0x3ff00000
  404130:	3fd33332 	.word	0x3fd33332
  404134:	3fe90000 	.word	0x3fe90000
  404138:	3fe70000 	.word	0x3fe70000
  40413c:	3fd20000 	.word	0x3fd20000

00404140 <__kernel_rem_pio2>:
  404140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404144:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
  404148:	4c9c      	ldr	r4, [pc, #624]	; (4043bc <__kernel_rem_pio2+0x27c>)
  40414a:	9ea2      	ldr	r6, [sp, #648]	; 0x288
  40414c:	4d9c      	ldr	r5, [pc, #624]	; (4043c0 <__kernel_rem_pio2+0x280>)
  40414e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  404152:	9405      	str	r4, [sp, #20]
  404154:	4626      	mov	r6, r4
  404156:	1ed4      	subs	r4, r2, #3
  404158:	fb85 7504 	smull	r7, r5, r5, r4
  40415c:	17e4      	asrs	r4, r4, #31
  40415e:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  404162:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  404166:	461d      	mov	r5, r3
  404168:	9308      	str	r3, [sp, #32]
  40416a:	1c63      	adds	r3, r4, #1
  40416c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  404170:	3d01      	subs	r5, #1
  404172:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404176:	9304      	str	r3, [sp, #16]
  404178:	462b      	mov	r3, r5
  40417a:	9409      	str	r4, [sp, #36]	; 0x24
  40417c:	9502      	str	r5, [sp, #8]
  40417e:	1b65      	subs	r5, r4, r5
  404180:	18f4      	adds	r4, r6, r3
  404182:	9003      	str	r0, [sp, #12]
  404184:	9106      	str	r1, [sp, #24]
  404186:	d41a      	bmi.n	4041be <__kernel_rem_pio2+0x7e>
  404188:	442c      	add	r4, r5
  40418a:	3401      	adds	r4, #1
  40418c:	f10d 0878 	add.w	r8, sp, #120	; 0x78
  404190:	2600      	movs	r6, #0
  404192:	2700      	movs	r7, #0
  404194:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
  404198:	e008      	b.n	4041ac <__kernel_rem_pio2+0x6c>
  40419a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
  40419e:	f000 ff3f 	bl	405020 <__aeabi_i2d>
  4041a2:	3501      	adds	r5, #1
  4041a4:	42a5      	cmp	r5, r4
  4041a6:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  4041aa:	d008      	beq.n	4041be <__kernel_rem_pio2+0x7e>
  4041ac:	2d00      	cmp	r5, #0
  4041ae:	daf4      	bge.n	40419a <__kernel_rem_pio2+0x5a>
  4041b0:	3501      	adds	r5, #1
  4041b2:	4630      	mov	r0, r6
  4041b4:	4639      	mov	r1, r7
  4041b6:	42a5      	cmp	r5, r4
  4041b8:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  4041bc:	d1f6      	bne.n	4041ac <__kernel_rem_pio2+0x6c>
  4041be:	9b05      	ldr	r3, [sp, #20]
  4041c0:	2b00      	cmp	r3, #0
  4041c2:	db2e      	blt.n	404222 <__kernel_rem_pio2+0xe2>
  4041c4:	9b08      	ldr	r3, [sp, #32]
  4041c6:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  4041ca:	9b03      	ldr	r3, [sp, #12]
  4041cc:	f1a9 0808 	sub.w	r8, r9, #8
  4041d0:	4498      	add	r8, r3
  4041d2:	ab20      	add	r3, sp, #128	; 0x80
  4041d4:	4499      	add	r9, r3
  4041d6:	9b05      	ldr	r3, [sp, #20]
  4041d8:	aa70      	add	r2, sp, #448	; 0x1c0
  4041da:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
  4041de:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  4041e2:	9b02      	ldr	r3, [sp, #8]
  4041e4:	2b00      	cmp	r3, #0
  4041e6:	f2c0 830f 	blt.w	404808 <__kernel_rem_pio2+0x6c8>
  4041ea:	9b03      	ldr	r3, [sp, #12]
  4041ec:	464d      	mov	r5, r9
  4041ee:	f1a3 0408 	sub.w	r4, r3, #8
  4041f2:	2600      	movs	r6, #0
  4041f4:	2700      	movs	r7, #0
  4041f6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  4041fa:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  4041fe:	f000 ff75 	bl	4050ec <__aeabi_dmul>
  404202:	4602      	mov	r2, r0
  404204:	460b      	mov	r3, r1
  404206:	4630      	mov	r0, r6
  404208:	4639      	mov	r1, r7
  40420a:	f000 fdbd 	bl	404d88 <__adddf3>
  40420e:	4544      	cmp	r4, r8
  404210:	4606      	mov	r6, r0
  404212:	460f      	mov	r7, r1
  404214:	d1ef      	bne.n	4041f6 <__kernel_rem_pio2+0xb6>
  404216:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  40421a:	45da      	cmp	sl, fp
  40421c:	f109 0908 	add.w	r9, r9, #8
  404220:	d1df      	bne.n	4041e2 <__kernel_rem_pio2+0xa2>
  404222:	9805      	ldr	r0, [sp, #20]
  404224:	9a08      	ldr	r2, [sp, #32]
  404226:	9000      	str	r0, [sp, #0]
  404228:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  40422c:	3b01      	subs	r3, #1
  40422e:	009b      	lsls	r3, r3, #2
  404230:	ac0c      	add	r4, sp, #48	; 0x30
  404232:	1f19      	subs	r1, r3, #4
  404234:	4423      	add	r3, r4
  404236:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
  40423a:	930b      	str	r3, [sp, #44]	; 0x2c
  40423c:	9b03      	ldr	r3, [sp, #12]
  40423e:	3a01      	subs	r2, #1
  404240:	4421      	add	r1, r4
  404242:	910a      	str	r1, [sp, #40]	; 0x28
  404244:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
  404248:	9a00      	ldr	r2, [sp, #0]
  40424a:	a998      	add	r1, sp, #608	; 0x260
  40424c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  404250:	2a00      	cmp	r2, #0
  404252:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
  404256:	4613      	mov	r3, r2
  404258:	dd2b      	ble.n	4042b2 <__kernel_rem_pio2+0x172>
  40425a:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  40425e:	f1a8 08a8 	sub.w	r8, r8, #168	; 0xa8
  404262:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  404266:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  40426a:	2200      	movs	r2, #0
  40426c:	4b55      	ldr	r3, [pc, #340]	; (4043c4 <__kernel_rem_pio2+0x284>)
  40426e:	4620      	mov	r0, r4
  404270:	4629      	mov	r1, r5
  404272:	f000 ff3b 	bl	4050ec <__aeabi_dmul>
  404276:	f001 f9e9 	bl	40564c <__aeabi_d2iz>
  40427a:	f000 fed1 	bl	405020 <__aeabi_i2d>
  40427e:	2200      	movs	r2, #0
  404280:	4b51      	ldr	r3, [pc, #324]	; (4043c8 <__kernel_rem_pio2+0x288>)
  404282:	4606      	mov	r6, r0
  404284:	460f      	mov	r7, r1
  404286:	f000 ff31 	bl	4050ec <__aeabi_dmul>
  40428a:	4602      	mov	r2, r0
  40428c:	460b      	mov	r3, r1
  40428e:	4620      	mov	r0, r4
  404290:	4629      	mov	r1, r5
  404292:	f000 fd77 	bl	404d84 <__aeabi_dsub>
  404296:	f001 f9d9 	bl	40564c <__aeabi_d2iz>
  40429a:	e878 2302 	ldrd	r2, r3, [r8], #-8
  40429e:	f849 0f04 	str.w	r0, [r9, #4]!
  4042a2:	4639      	mov	r1, r7
  4042a4:	4630      	mov	r0, r6
  4042a6:	f000 fd6f 	bl	404d88 <__adddf3>
  4042aa:	45d0      	cmp	r8, sl
  4042ac:	4604      	mov	r4, r0
  4042ae:	460d      	mov	r5, r1
  4042b0:	d1db      	bne.n	40426a <__kernel_rem_pio2+0x12a>
  4042b2:	f8dd 9010 	ldr.w	r9, [sp, #16]
  4042b6:	4620      	mov	r0, r4
  4042b8:	4629      	mov	r1, r5
  4042ba:	464a      	mov	r2, r9
  4042bc:	f000 fcd4 	bl	404c68 <scalbn>
  4042c0:	2200      	movs	r2, #0
  4042c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  4042c6:	4604      	mov	r4, r0
  4042c8:	460d      	mov	r5, r1
  4042ca:	f000 ff0f 	bl	4050ec <__aeabi_dmul>
  4042ce:	f000 fc3b 	bl	404b48 <floor>
  4042d2:	2200      	movs	r2, #0
  4042d4:	4b3d      	ldr	r3, [pc, #244]	; (4043cc <__kernel_rem_pio2+0x28c>)
  4042d6:	f000 ff09 	bl	4050ec <__aeabi_dmul>
  4042da:	4602      	mov	r2, r0
  4042dc:	460b      	mov	r3, r1
  4042de:	4620      	mov	r0, r4
  4042e0:	4629      	mov	r1, r5
  4042e2:	f000 fd4f 	bl	404d84 <__aeabi_dsub>
  4042e6:	460d      	mov	r5, r1
  4042e8:	4604      	mov	r4, r0
  4042ea:	f001 f9af 	bl	40564c <__aeabi_d2iz>
  4042ee:	4680      	mov	r8, r0
  4042f0:	f000 fe96 	bl	405020 <__aeabi_i2d>
  4042f4:	460b      	mov	r3, r1
  4042f6:	4602      	mov	r2, r0
  4042f8:	4629      	mov	r1, r5
  4042fa:	4620      	mov	r0, r4
  4042fc:	f000 fd42 	bl	404d84 <__aeabi_dsub>
  404300:	464b      	mov	r3, r9
  404302:	2b00      	cmp	r3, #0
  404304:	4606      	mov	r6, r0
  404306:	460f      	mov	r7, r1
  404308:	f340 80f7 	ble.w	4044fa <__kernel_rem_pio2+0x3ba>
  40430c:	9a00      	ldr	r2, [sp, #0]
  40430e:	a90c      	add	r1, sp, #48	; 0x30
  404310:	3a01      	subs	r2, #1
  404312:	f1c9 0318 	rsb	r3, r9, #24
  404316:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
  40431a:	fa45 f103 	asr.w	r1, r5, r3
  40431e:	fa01 f303 	lsl.w	r3, r1, r3
  404322:	a80c      	add	r0, sp, #48	; 0x30
  404324:	1aeb      	subs	r3, r5, r3
  404326:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  40432a:	f1c9 0517 	rsb	r5, r9, #23
  40432e:	4488      	add	r8, r1
  404330:	fa43 f505 	asr.w	r5, r3, r5
  404334:	2d00      	cmp	r5, #0
  404336:	dd63      	ble.n	404400 <__kernel_rem_pio2+0x2c0>
  404338:	9b00      	ldr	r3, [sp, #0]
  40433a:	2b00      	cmp	r3, #0
  40433c:	f108 0801 	add.w	r8, r8, #1
  404340:	f340 8281 	ble.w	404846 <__kernel_rem_pio2+0x706>
  404344:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404346:	2c00      	cmp	r4, #0
  404348:	f000 8318 	beq.w	40497c <__kernel_rem_pio2+0x83c>
  40434c:	2001      	movs	r0, #1
  40434e:	2300      	movs	r3, #0
  404350:	aa0c      	add	r2, sp, #48	; 0x30
  404352:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
  404356:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  40435a:	9a00      	ldr	r2, [sp, #0]
  40435c:	4282      	cmp	r2, r0
  40435e:	dd19      	ble.n	404394 <__kernel_rem_pio2+0x254>
  404360:	aa0c      	add	r2, sp, #48	; 0x30
  404362:	ac0c      	add	r4, sp, #48	; 0x30
  404364:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
  404368:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  40436c:	1a51      	subs	r1, r2, r1
  40436e:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
  404372:	9900      	ldr	r1, [sp, #0]
  404374:	3302      	adds	r3, #2
  404376:	4299      	cmp	r1, r3
  404378:	dd0c      	ble.n	404394 <__kernel_rem_pio2+0x254>
  40437a:	4610      	mov	r0, r2
  40437c:	9a00      	ldr	r2, [sp, #0]
  40437e:	a90c      	add	r1, sp, #48	; 0x30
  404380:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  404384:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  404388:	681a      	ldr	r2, [r3, #0]
  40438a:	1a82      	subs	r2, r0, r2
  40438c:	f843 2b04 	str.w	r2, [r3], #4
  404390:	428b      	cmp	r3, r1
  404392:	d1f9      	bne.n	404388 <__kernel_rem_pio2+0x248>
  404394:	9b04      	ldr	r3, [sp, #16]
  404396:	2b00      	cmp	r3, #0
  404398:	dd1a      	ble.n	4043d0 <__kernel_rem_pio2+0x290>
  40439a:	9b04      	ldr	r3, [sp, #16]
  40439c:	2b01      	cmp	r3, #1
  40439e:	f04f 0401 	mov.w	r4, #1
  4043a2:	f040 8258 	bne.w	404856 <__kernel_rem_pio2+0x716>
  4043a6:	9b00      	ldr	r3, [sp, #0]
  4043a8:	1e5a      	subs	r2, r3, #1
  4043aa:	ab0c      	add	r3, sp, #48	; 0x30
  4043ac:	a90c      	add	r1, sp, #48	; 0x30
  4043ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4043b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
  4043b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  4043ba:	e258      	b.n	40486e <__kernel_rem_pio2+0x72e>
  4043bc:	00408608 	.word	0x00408608
  4043c0:	2aaaaaab 	.word	0x2aaaaaab
  4043c4:	3e700000 	.word	0x3e700000
  4043c8:	41700000 	.word	0x41700000
  4043cc:	40200000 	.word	0x40200000
  4043d0:	2d02      	cmp	r5, #2
  4043d2:	d115      	bne.n	404400 <__kernel_rem_pio2+0x2c0>
  4043d4:	4632      	mov	r2, r6
  4043d6:	463b      	mov	r3, r7
  4043d8:	2000      	movs	r0, #0
  4043da:	4997      	ldr	r1, [pc, #604]	; (404638 <__kernel_rem_pio2+0x4f8>)
  4043dc:	f000 fcd2 	bl	404d84 <__aeabi_dsub>
  4043e0:	4606      	mov	r6, r0
  4043e2:	460f      	mov	r7, r1
  4043e4:	9a04      	ldr	r2, [sp, #16]
  4043e6:	4994      	ldr	r1, [pc, #592]	; (404638 <__kernel_rem_pio2+0x4f8>)
  4043e8:	2000      	movs	r0, #0
  4043ea:	f000 fc3d 	bl	404c68 <scalbn>
  4043ee:	4602      	mov	r2, r0
  4043f0:	460b      	mov	r3, r1
  4043f2:	4630      	mov	r0, r6
  4043f4:	4639      	mov	r1, r7
  4043f6:	f000 fcc5 	bl	404d84 <__aeabi_dsub>
  4043fa:	2502      	movs	r5, #2
  4043fc:	4606      	mov	r6, r0
  4043fe:	460f      	mov	r7, r1
  404400:	2200      	movs	r2, #0
  404402:	2300      	movs	r3, #0
  404404:	4630      	mov	r0, r6
  404406:	4639      	mov	r1, r7
  404408:	f001 f8d8 	bl	4055bc <__aeabi_dcmpeq>
  40440c:	2800      	cmp	r0, #0
  40440e:	f000 8252 	beq.w	4048b6 <__kernel_rem_pio2+0x776>
  404412:	9a00      	ldr	r2, [sp, #0]
  404414:	9b05      	ldr	r3, [sp, #20]
  404416:	1e50      	subs	r0, r2, #1
  404418:	4283      	cmp	r3, r0
  40441a:	dc0f      	bgt.n	40443c <__kernel_rem_pio2+0x2fc>
  40441c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
  404420:	3b01      	subs	r3, #1
  404422:	aa0c      	add	r2, sp, #48	; 0x30
  404424:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404426:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40442a:	2200      	movs	r2, #0
  40442c:	f853 1904 	ldr.w	r1, [r3], #-4
  404430:	42a3      	cmp	r3, r4
  404432:	ea42 0201 	orr.w	r2, r2, r1
  404436:	d1f9      	bne.n	40442c <__kernel_rem_pio2+0x2ec>
  404438:	2a00      	cmp	r2, #0
  40443a:	d16f      	bne.n	40451c <__kernel_rem_pio2+0x3dc>
  40443c:	9b05      	ldr	r3, [sp, #20]
  40443e:	aa0c      	add	r2, sp, #48	; 0x30
  404440:	3b01      	subs	r3, #1
  404442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404446:	2b00      	cmp	r3, #0
  404448:	f040 8233 	bne.w	4048b2 <__kernel_rem_pio2+0x772>
  40444c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40444e:	2301      	movs	r3, #1
  404450:	f852 1904 	ldr.w	r1, [r2], #-4
  404454:	3301      	adds	r3, #1
  404456:	2900      	cmp	r1, #0
  404458:	d0fa      	beq.n	404450 <__kernel_rem_pio2+0x310>
  40445a:	9a00      	ldr	r2, [sp, #0]
  40445c:	18d3      	adds	r3, r2, r3
  40445e:	f102 0a01 	add.w	sl, r2, #1
  404462:	459a      	cmp	sl, r3
  404464:	9307      	str	r3, [sp, #28]
  404466:	dc3d      	bgt.n	4044e4 <__kernel_rem_pio2+0x3a4>
  404468:	9b00      	ldr	r3, [sp, #0]
  40446a:	9908      	ldr	r1, [sp, #32]
  40446c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40446e:	440b      	add	r3, r1
  404470:	9907      	ldr	r1, [sp, #28]
  404472:	eb0a 0802 	add.w	r8, sl, r2
  404476:	4699      	mov	r9, r3
  404478:	ab20      	add	r3, sp, #128	; 0x80
  40447a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
  40447e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
  404482:	188b      	adds	r3, r1, r2
  404484:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  404486:	f108 38ff 	add.w	r8, r8, #4294967295
  40448a:	eb02 0888 	add.w	r8, r2, r8, lsl #2
  40448e:	aa70      	add	r2, sp, #448	; 0x1c0
  404490:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
  404494:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  404496:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40449a:	9300      	str	r3, [sp, #0]
  40449c:	f858 0f04 	ldr.w	r0, [r8, #4]!
  4044a0:	f000 fdbe 	bl	405020 <__aeabi_i2d>
  4044a4:	9b02      	ldr	r3, [sp, #8]
  4044a6:	2b00      	cmp	r3, #0
  4044a8:	e8e9 0102 	strd	r0, r1, [r9], #8
  4044ac:	db1d      	blt.n	4044ea <__kernel_rem_pio2+0x3aa>
  4044ae:	9b03      	ldr	r3, [sp, #12]
  4044b0:	464d      	mov	r5, r9
  4044b2:	f1a3 0408 	sub.w	r4, r3, #8
  4044b6:	2600      	movs	r6, #0
  4044b8:	2700      	movs	r7, #0
  4044ba:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  4044be:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  4044c2:	f000 fe13 	bl	4050ec <__aeabi_dmul>
  4044c6:	4602      	mov	r2, r0
  4044c8:	460b      	mov	r3, r1
  4044ca:	4630      	mov	r0, r6
  4044cc:	4639      	mov	r1, r7
  4044ce:	f000 fc5b 	bl	404d88 <__adddf3>
  4044d2:	455c      	cmp	r4, fp
  4044d4:	4606      	mov	r6, r0
  4044d6:	460f      	mov	r7, r1
  4044d8:	d1ef      	bne.n	4044ba <__kernel_rem_pio2+0x37a>
  4044da:	9b00      	ldr	r3, [sp, #0]
  4044dc:	4598      	cmp	r8, r3
  4044de:	e8ea 6702 	strd	r6, r7, [sl], #8
  4044e2:	d1db      	bne.n	40449c <__kernel_rem_pio2+0x35c>
  4044e4:	9b07      	ldr	r3, [sp, #28]
  4044e6:	9300      	str	r3, [sp, #0]
  4044e8:	e6ae      	b.n	404248 <__kernel_rem_pio2+0x108>
  4044ea:	9b00      	ldr	r3, [sp, #0]
  4044ec:	2600      	movs	r6, #0
  4044ee:	2700      	movs	r7, #0
  4044f0:	4598      	cmp	r8, r3
  4044f2:	e8ea 6702 	strd	r6, r7, [sl], #8
  4044f6:	d1d1      	bne.n	40449c <__kernel_rem_pio2+0x35c>
  4044f8:	e7f4      	b.n	4044e4 <__kernel_rem_pio2+0x3a4>
  4044fa:	d106      	bne.n	40450a <__kernel_rem_pio2+0x3ca>
  4044fc:	9b00      	ldr	r3, [sp, #0]
  4044fe:	aa0c      	add	r2, sp, #48	; 0x30
  404500:	3b01      	subs	r3, #1
  404502:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  404506:	15ed      	asrs	r5, r5, #23
  404508:	e714      	b.n	404334 <__kernel_rem_pio2+0x1f4>
  40450a:	2200      	movs	r2, #0
  40450c:	4b4b      	ldr	r3, [pc, #300]	; (40463c <__kernel_rem_pio2+0x4fc>)
  40450e:	f001 f873 	bl	4055f8 <__aeabi_dcmpge>
  404512:	2800      	cmp	r0, #0
  404514:	f040 8182 	bne.w	40481c <__kernel_rem_pio2+0x6dc>
  404518:	4605      	mov	r5, r0
  40451a:	e771      	b.n	404400 <__kernel_rem_pio2+0x2c0>
  40451c:	a90c      	add	r1, sp, #48	; 0x30
  40451e:	9502      	str	r5, [sp, #8]
  404520:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
  404524:	9904      	ldr	r1, [sp, #16]
  404526:	f8cd 801c 	str.w	r8, [sp, #28]
  40452a:	3918      	subs	r1, #24
  40452c:	4602      	mov	r2, r0
  40452e:	9000      	str	r0, [sp, #0]
  404530:	9104      	str	r1, [sp, #16]
  404532:	b96b      	cbnz	r3, 404550 <__kernel_rem_pio2+0x410>
  404534:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  404538:	3b01      	subs	r3, #1
  40453a:	a80c      	add	r0, sp, #48	; 0x30
  40453c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  404540:	f853 0904 	ldr.w	r0, [r3], #-4
  404544:	3a01      	subs	r2, #1
  404546:	3918      	subs	r1, #24
  404548:	2800      	cmp	r0, #0
  40454a:	d0f9      	beq.n	404540 <__kernel_rem_pio2+0x400>
  40454c:	9200      	str	r2, [sp, #0]
  40454e:	9104      	str	r1, [sp, #16]
  404550:	9a04      	ldr	r2, [sp, #16]
  404552:	4939      	ldr	r1, [pc, #228]	; (404638 <__kernel_rem_pio2+0x4f8>)
  404554:	2000      	movs	r0, #0
  404556:	f000 fb87 	bl	404c68 <scalbn>
  40455a:	9b00      	ldr	r3, [sp, #0]
  40455c:	2b00      	cmp	r3, #0
  40455e:	4604      	mov	r4, r0
  404560:	460d      	mov	r5, r1
  404562:	f2c0 8203 	blt.w	40496c <__kernel_rem_pio2+0x82c>
  404566:	00da      	lsls	r2, r3, #3
  404568:	a970      	add	r1, sp, #448	; 0x1c0
  40456a:	eb01 0b02 	add.w	fp, r1, r2
  40456e:	9204      	str	r2, [sp, #16]
  404570:	aa0c      	add	r2, sp, #48	; 0x30
  404572:	eb02 0683 	add.w	r6, r2, r3, lsl #2
  404576:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 404640 <__kernel_rem_pio2+0x500>
  40457a:	f10b 0708 	add.w	r7, fp, #8
  40457e:	3604      	adds	r6, #4
  404580:	f04f 0800 	mov.w	r8, #0
  404584:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  404588:	f000 fd4a 	bl	405020 <__aeabi_i2d>
  40458c:	4622      	mov	r2, r4
  40458e:	462b      	mov	r3, r5
  404590:	f000 fdac 	bl	4050ec <__aeabi_dmul>
  404594:	464b      	mov	r3, r9
  404596:	e967 0102 	strd	r0, r1, [r7, #-8]!
  40459a:	4642      	mov	r2, r8
  40459c:	4620      	mov	r0, r4
  40459e:	4629      	mov	r1, r5
  4045a0:	f000 fda4 	bl	4050ec <__aeabi_dmul>
  4045a4:	ab0c      	add	r3, sp, #48	; 0x30
  4045a6:	429e      	cmp	r6, r3
  4045a8:	4604      	mov	r4, r0
  4045aa:	460d      	mov	r5, r1
  4045ac:	d1ea      	bne.n	404584 <__kernel_rem_pio2+0x444>
  4045ae:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  4045b2:	f8cd a00c 	str.w	sl, [sp, #12]
  4045b6:	f8dd a014 	ldr.w	sl, [sp, #20]
  4045ba:	f04f 0900 	mov.w	r9, #0
  4045be:	f1ba 0f00 	cmp.w	sl, #0
  4045c2:	f2c0 813d 	blt.w	404840 <__kernel_rem_pio2+0x700>
  4045c6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 404644 <__kernel_rem_pio2+0x504>
  4045ca:	465d      	mov	r5, fp
  4045cc:	a118      	add	r1, pc, #96	; (adr r1, 404630 <__kernel_rem_pio2+0x4f0>)
  4045ce:	e9d1 0100 	ldrd	r0, r1, [r1]
  4045d2:	2600      	movs	r6, #0
  4045d4:	2700      	movs	r7, #0
  4045d6:	2400      	movs	r4, #0
  4045d8:	e003      	b.n	4045e2 <__kernel_rem_pio2+0x4a2>
  4045da:	454c      	cmp	r4, r9
  4045dc:	dc10      	bgt.n	404600 <__kernel_rem_pio2+0x4c0>
  4045de:	e8f8 0102 	ldrd	r0, r1, [r8], #8
  4045e2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
  4045e6:	f000 fd81 	bl	4050ec <__aeabi_dmul>
  4045ea:	4602      	mov	r2, r0
  4045ec:	460b      	mov	r3, r1
  4045ee:	4630      	mov	r0, r6
  4045f0:	4639      	mov	r1, r7
  4045f2:	f000 fbc9 	bl	404d88 <__adddf3>
  4045f6:	3401      	adds	r4, #1
  4045f8:	45a2      	cmp	sl, r4
  4045fa:	4606      	mov	r6, r0
  4045fc:	460f      	mov	r7, r1
  4045fe:	daec      	bge.n	4045da <__kernel_rem_pio2+0x49a>
  404600:	9b03      	ldr	r3, [sp, #12]
  404602:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  404606:	f1ab 0b08 	sub.w	fp, fp, #8
  40460a:	e9c3 6700 	strd	r6, r7, [r3]
  40460e:	ab6e      	add	r3, sp, #440	; 0x1b8
  404610:	455b      	cmp	r3, fp
  404612:	f109 0901 	add.w	r9, r9, #1
  404616:	d1d2      	bne.n	4045be <__kernel_rem_pio2+0x47e>
  404618:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  40461a:	f8dd a00c 	ldr.w	sl, [sp, #12]
  40461e:	2b03      	cmp	r3, #3
  404620:	f200 808b 	bhi.w	40473a <__kernel_rem_pio2+0x5fa>
  404624:	e8df f013 	tbh	[pc, r3, lsl #1]
  404628:	009000d1 	.word	0x009000d1
  40462c:	00100090 	.word	0x00100090
  404630:	40000000 	.word	0x40000000
  404634:	3ff921fb 	.word	0x3ff921fb
  404638:	3ff00000 	.word	0x3ff00000
  40463c:	3fe00000 	.word	0x3fe00000
  404640:	3e700000 	.word	0x3e700000
  404644:	004085d0 	.word	0x004085d0
  404648:	9b00      	ldr	r3, [sp, #0]
  40464a:	2b00      	cmp	r3, #0
  40464c:	f340 81a4 	ble.w	404998 <__kernel_rem_pio2+0x858>
  404650:	9b04      	ldr	r3, [sp, #16]
  404652:	eb0a 0803 	add.w	r8, sl, r3
  404656:	e9d8 6700 	ldrd	r6, r7, [r8]
  40465a:	46d3      	mov	fp, sl
  40465c:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  404660:	4632      	mov	r2, r6
  404662:	463b      	mov	r3, r7
  404664:	4648      	mov	r0, r9
  404666:	4651      	mov	r1, sl
  404668:	f000 fb8e 	bl	404d88 <__adddf3>
  40466c:	4604      	mov	r4, r0
  40466e:	460d      	mov	r5, r1
  404670:	4602      	mov	r2, r0
  404672:	460b      	mov	r3, r1
  404674:	4648      	mov	r0, r9
  404676:	4651      	mov	r1, sl
  404678:	f000 fb84 	bl	404d84 <__aeabi_dsub>
  40467c:	4632      	mov	r2, r6
  40467e:	463b      	mov	r3, r7
  404680:	f000 fb82 	bl	404d88 <__adddf3>
  404684:	e9c8 0100 	strd	r0, r1, [r8]
  404688:	e968 4502 	strd	r4, r5, [r8, #-8]!
  40468c:	45c3      	cmp	fp, r8
  40468e:	4626      	mov	r6, r4
  404690:	462f      	mov	r7, r5
  404692:	d1e3      	bne.n	40465c <__kernel_rem_pio2+0x51c>
  404694:	9b00      	ldr	r3, [sp, #0]
  404696:	2b01      	cmp	r3, #1
  404698:	46da      	mov	sl, fp
  40469a:	f340 817d 	ble.w	404998 <__kernel_rem_pio2+0x858>
  40469e:	9b04      	ldr	r3, [sp, #16]
  4046a0:	445b      	add	r3, fp
  4046a2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4046a6:	4698      	mov	r8, r3
  4046a8:	4699      	mov	r9, r3
  4046aa:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
  4046ae:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  4046b2:	4632      	mov	r2, r6
  4046b4:	4618      	mov	r0, r3
  4046b6:	4621      	mov	r1, r4
  4046b8:	463b      	mov	r3, r7
  4046ba:	e9cd 0100 	strd	r0, r1, [sp]
  4046be:	f000 fb63 	bl	404d88 <__adddf3>
  4046c2:	4604      	mov	r4, r0
  4046c4:	460d      	mov	r5, r1
  4046c6:	4602      	mov	r2, r0
  4046c8:	460b      	mov	r3, r1
  4046ca:	e9dd 0100 	ldrd	r0, r1, [sp]
  4046ce:	f000 fb59 	bl	404d84 <__aeabi_dsub>
  4046d2:	4632      	mov	r2, r6
  4046d4:	463b      	mov	r3, r7
  4046d6:	f000 fb57 	bl	404d88 <__adddf3>
  4046da:	e9c9 0100 	strd	r0, r1, [r9]
  4046de:	e969 4502 	strd	r4, r5, [r9, #-8]!
  4046e2:	45cb      	cmp	fp, r9
  4046e4:	4626      	mov	r6, r4
  4046e6:	462f      	mov	r7, r5
  4046e8:	d1e1      	bne.n	4046ae <__kernel_rem_pio2+0x56e>
  4046ea:	2300      	movs	r3, #0
  4046ec:	f108 0808 	add.w	r8, r8, #8
  4046f0:	461d      	mov	r5, r3
  4046f2:	ac4c      	add	r4, sp, #304	; 0x130
  4046f4:	4618      	mov	r0, r3
  4046f6:	4629      	mov	r1, r5
  4046f8:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  4046fc:	f000 fb44 	bl	404d88 <__adddf3>
  404700:	4544      	cmp	r4, r8
  404702:	4603      	mov	r3, r0
  404704:	460d      	mov	r5, r1
  404706:	d1f5      	bne.n	4046f4 <__kernel_rem_pio2+0x5b4>
  404708:	9a02      	ldr	r2, [sp, #8]
  40470a:	2a00      	cmp	r2, #0
  40470c:	f000 8120 	beq.w	404950 <__kernel_rem_pio2+0x810>
  404710:	f8da 4004 	ldr.w	r4, [sl, #4]
  404714:	f8da 200c 	ldr.w	r2, [sl, #12]
  404718:	9f06      	ldr	r7, [sp, #24]
  40471a:	f8da 1000 	ldr.w	r1, [sl]
  40471e:	f8da 0008 	ldr.w	r0, [sl, #8]
  404722:	613b      	str	r3, [r7, #16]
  404724:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  404728:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  40472c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404730:	617d      	str	r5, [r7, #20]
  404732:	607c      	str	r4, [r7, #4]
  404734:	60fa      	str	r2, [r7, #12]
  404736:	6039      	str	r1, [r7, #0]
  404738:	60b8      	str	r0, [r7, #8]
  40473a:	9b07      	ldr	r3, [sp, #28]
  40473c:	f003 0007 	and.w	r0, r3, #7
  404740:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  404744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404748:	9c04      	ldr	r4, [sp, #16]
  40474a:	2600      	movs	r6, #0
  40474c:	3408      	adds	r4, #8
  40474e:	4454      	add	r4, sl
  404750:	4633      	mov	r3, r6
  404752:	4630      	mov	r0, r6
  404754:	4619      	mov	r1, r3
  404756:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  40475a:	f000 fb15 	bl	404d88 <__adddf3>
  40475e:	4554      	cmp	r4, sl
  404760:	4606      	mov	r6, r0
  404762:	460b      	mov	r3, r1
  404764:	d1f5      	bne.n	404752 <__kernel_rem_pio2+0x612>
  404766:	9a02      	ldr	r2, [sp, #8]
  404768:	4630      	mov	r0, r6
  40476a:	4619      	mov	r1, r3
  40476c:	2a00      	cmp	r2, #0
  40476e:	f000 80da 	beq.w	404926 <__kernel_rem_pio2+0x7e6>
  404772:	9806      	ldr	r0, [sp, #24]
  404774:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  404778:	4632      	mov	r2, r6
  40477a:	6044      	str	r4, [r0, #4]
  40477c:	6006      	str	r6, [r0, #0]
  40477e:	e9da 0100 	ldrd	r0, r1, [sl]
  404782:	f000 faff 	bl	404d84 <__aeabi_dsub>
  404786:	460b      	mov	r3, r1
  404788:	9900      	ldr	r1, [sp, #0]
  40478a:	2900      	cmp	r1, #0
  40478c:	4602      	mov	r2, r0
  40478e:	dd0e      	ble.n	4047ae <__kernel_rem_pio2+0x66e>
  404790:	2401      	movs	r4, #1
  404792:	4610      	mov	r0, r2
  404794:	4619      	mov	r1, r3
  404796:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  40479a:	f000 faf5 	bl	404d88 <__adddf3>
  40479e:	460b      	mov	r3, r1
  4047a0:	9900      	ldr	r1, [sp, #0]
  4047a2:	3401      	adds	r4, #1
  4047a4:	42a1      	cmp	r1, r4
  4047a6:	4602      	mov	r2, r0
  4047a8:	daf3      	bge.n	404792 <__kernel_rem_pio2+0x652>
  4047aa:	9902      	ldr	r1, [sp, #8]
  4047ac:	b109      	cbz	r1, 4047b2 <__kernel_rem_pio2+0x672>
  4047ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4047b2:	4619      	mov	r1, r3
  4047b4:	9b06      	ldr	r3, [sp, #24]
  4047b6:	4610      	mov	r0, r2
  4047b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
  4047bc:	9b07      	ldr	r3, [sp, #28]
  4047be:	f003 0007 	and.w	r0, r3, #7
  4047c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  4047c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047ca:	9c04      	ldr	r4, [sp, #16]
  4047cc:	2200      	movs	r2, #0
  4047ce:	3408      	adds	r4, #8
  4047d0:	4454      	add	r4, sl
  4047d2:	4613      	mov	r3, r2
  4047d4:	4610      	mov	r0, r2
  4047d6:	4619      	mov	r1, r3
  4047d8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  4047dc:	f000 fad4 	bl	404d88 <__adddf3>
  4047e0:	45a2      	cmp	sl, r4
  4047e2:	4602      	mov	r2, r0
  4047e4:	460b      	mov	r3, r1
  4047e6:	d1f5      	bne.n	4047d4 <__kernel_rem_pio2+0x694>
  4047e8:	9902      	ldr	r1, [sp, #8]
  4047ea:	b109      	cbz	r1, 4047f0 <__kernel_rem_pio2+0x6b0>
  4047ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4047f0:	4619      	mov	r1, r3
  4047f2:	9b06      	ldr	r3, [sp, #24]
  4047f4:	4610      	mov	r0, r2
  4047f6:	e9c3 0100 	strd	r0, r1, [r3]
  4047fa:	9b07      	ldr	r3, [sp, #28]
  4047fc:	f003 0007 	and.w	r0, r3, #7
  404800:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  404804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404808:	2600      	movs	r6, #0
  40480a:	2700      	movs	r7, #0
  40480c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  404810:	45da      	cmp	sl, fp
  404812:	f109 0908 	add.w	r9, r9, #8
  404816:	f47f ace4 	bne.w	4041e2 <__kernel_rem_pio2+0xa2>
  40481a:	e502      	b.n	404222 <__kernel_rem_pio2+0xe2>
  40481c:	9b00      	ldr	r3, [sp, #0]
  40481e:	2b00      	cmp	r3, #0
  404820:	f108 0801 	add.w	r8, r8, #1
  404824:	bfc8      	it	gt
  404826:	2502      	movgt	r5, #2
  404828:	f73f ad8c 	bgt.w	404344 <__kernel_rem_pio2+0x204>
  40482c:	4632      	mov	r2, r6
  40482e:	463b      	mov	r3, r7
  404830:	2000      	movs	r0, #0
  404832:	4963      	ldr	r1, [pc, #396]	; (4049c0 <__kernel_rem_pio2+0x880>)
  404834:	f000 faa6 	bl	404d84 <__aeabi_dsub>
  404838:	2502      	movs	r5, #2
  40483a:	4606      	mov	r6, r0
  40483c:	460f      	mov	r7, r1
  40483e:	e5df      	b.n	404400 <__kernel_rem_pio2+0x2c0>
  404840:	2600      	movs	r6, #0
  404842:	2700      	movs	r7, #0
  404844:	e6dc      	b.n	404600 <__kernel_rem_pio2+0x4c0>
  404846:	9b04      	ldr	r3, [sp, #16]
  404848:	2b00      	cmp	r3, #0
  40484a:	dd26      	ble.n	40489a <__kernel_rem_pio2+0x75a>
  40484c:	2400      	movs	r4, #0
  40484e:	9b04      	ldr	r3, [sp, #16]
  404850:	2b01      	cmp	r3, #1
  404852:	f43f ada8 	beq.w	4043a6 <__kernel_rem_pio2+0x266>
  404856:	2b02      	cmp	r3, #2
  404858:	d109      	bne.n	40486e <__kernel_rem_pio2+0x72e>
  40485a:	9b00      	ldr	r3, [sp, #0]
  40485c:	1e5a      	subs	r2, r3, #1
  40485e:	ab0c      	add	r3, sp, #48	; 0x30
  404860:	a90c      	add	r1, sp, #48	; 0x30
  404862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404866:	f3c3 0315 	ubfx	r3, r3, #0, #22
  40486a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  40486e:	2d02      	cmp	r5, #2
  404870:	f47f adc6 	bne.w	404400 <__kernel_rem_pio2+0x2c0>
  404874:	4632      	mov	r2, r6
  404876:	463b      	mov	r3, r7
  404878:	2000      	movs	r0, #0
  40487a:	4951      	ldr	r1, [pc, #324]	; (4049c0 <__kernel_rem_pio2+0x880>)
  40487c:	f000 fa82 	bl	404d84 <__aeabi_dsub>
  404880:	4606      	mov	r6, r0
  404882:	460f      	mov	r7, r1
  404884:	2c00      	cmp	r4, #0
  404886:	f43f adbb 	beq.w	404400 <__kernel_rem_pio2+0x2c0>
  40488a:	e5ab      	b.n	4043e4 <__kernel_rem_pio2+0x2a4>
  40488c:	9900      	ldr	r1, [sp, #0]
  40488e:	3301      	adds	r3, #1
  404890:	4299      	cmp	r1, r3
  404892:	d178      	bne.n	404986 <__kernel_rem_pio2+0x846>
  404894:	9b04      	ldr	r3, [sp, #16]
  404896:	2b00      	cmp	r3, #0
  404898:	dcd9      	bgt.n	40484e <__kernel_rem_pio2+0x70e>
  40489a:	2d02      	cmp	r5, #2
  40489c:	f47f adb0 	bne.w	404400 <__kernel_rem_pio2+0x2c0>
  4048a0:	4632      	mov	r2, r6
  4048a2:	463b      	mov	r3, r7
  4048a4:	2000      	movs	r0, #0
  4048a6:	4946      	ldr	r1, [pc, #280]	; (4049c0 <__kernel_rem_pio2+0x880>)
  4048a8:	f000 fa6c 	bl	404d84 <__aeabi_dsub>
  4048ac:	4606      	mov	r6, r0
  4048ae:	460f      	mov	r7, r1
  4048b0:	e5a6      	b.n	404400 <__kernel_rem_pio2+0x2c0>
  4048b2:	2301      	movs	r3, #1
  4048b4:	e5d1      	b.n	40445a <__kernel_rem_pio2+0x31a>
  4048b6:	4639      	mov	r1, r7
  4048b8:	9f04      	ldr	r7, [sp, #16]
  4048ba:	9502      	str	r5, [sp, #8]
  4048bc:	427a      	negs	r2, r7
  4048be:	4630      	mov	r0, r6
  4048c0:	f8cd 801c 	str.w	r8, [sp, #28]
  4048c4:	f000 f9d0 	bl	404c68 <scalbn>
  4048c8:	2200      	movs	r2, #0
  4048ca:	4b3e      	ldr	r3, [pc, #248]	; (4049c4 <__kernel_rem_pio2+0x884>)
  4048cc:	4604      	mov	r4, r0
  4048ce:	460d      	mov	r5, r1
  4048d0:	f000 fe92 	bl	4055f8 <__aeabi_dcmpge>
  4048d4:	2800      	cmp	r0, #0
  4048d6:	d062      	beq.n	40499e <__kernel_rem_pio2+0x85e>
  4048d8:	2200      	movs	r2, #0
  4048da:	4b3b      	ldr	r3, [pc, #236]	; (4049c8 <__kernel_rem_pio2+0x888>)
  4048dc:	4620      	mov	r0, r4
  4048de:	4629      	mov	r1, r5
  4048e0:	f000 fc04 	bl	4050ec <__aeabi_dmul>
  4048e4:	f000 feb2 	bl	40564c <__aeabi_d2iz>
  4048e8:	4606      	mov	r6, r0
  4048ea:	f000 fb99 	bl	405020 <__aeabi_i2d>
  4048ee:	2200      	movs	r2, #0
  4048f0:	4b34      	ldr	r3, [pc, #208]	; (4049c4 <__kernel_rem_pio2+0x884>)
  4048f2:	f000 fbfb 	bl	4050ec <__aeabi_dmul>
  4048f6:	4602      	mov	r2, r0
  4048f8:	460b      	mov	r3, r1
  4048fa:	4620      	mov	r0, r4
  4048fc:	4629      	mov	r1, r5
  4048fe:	f000 fa41 	bl	404d84 <__aeabi_dsub>
  404902:	f000 fea3 	bl	40564c <__aeabi_d2iz>
  404906:	9900      	ldr	r1, [sp, #0]
  404908:	460b      	mov	r3, r1
  40490a:	3301      	adds	r3, #1
  40490c:	461a      	mov	r2, r3
  40490e:	9300      	str	r3, [sp, #0]
  404910:	463b      	mov	r3, r7
  404912:	3318      	adds	r3, #24
  404914:	9304      	str	r3, [sp, #16]
  404916:	460b      	mov	r3, r1
  404918:	a90c      	add	r1, sp, #48	; 0x30
  40491a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  40491e:	4613      	mov	r3, r2
  404920:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
  404924:	e614      	b.n	404550 <__kernel_rem_pio2+0x410>
  404926:	9b06      	ldr	r3, [sp, #24]
  404928:	4632      	mov	r2, r6
  40492a:	e9c3 0100 	strd	r0, r1, [r3]
  40492e:	460b      	mov	r3, r1
  404930:	e9da 0100 	ldrd	r0, r1, [sl]
  404934:	f000 fa26 	bl	404d84 <__aeabi_dsub>
  404938:	460b      	mov	r3, r1
  40493a:	9900      	ldr	r1, [sp, #0]
  40493c:	2900      	cmp	r1, #0
  40493e:	4602      	mov	r2, r0
  404940:	f73f af26 	bgt.w	404790 <__kernel_rem_pio2+0x650>
  404944:	4619      	mov	r1, r3
  404946:	9b06      	ldr	r3, [sp, #24]
  404948:	4610      	mov	r0, r2
  40494a:	e9c3 0102 	strd	r0, r1, [r3, #8]
  40494e:	e735      	b.n	4047bc <__kernel_rem_pio2+0x67c>
  404950:	4618      	mov	r0, r3
  404952:	4629      	mov	r1, r5
  404954:	e9da 2300 	ldrd	r2, r3, [sl]
  404958:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  40495c:	9f06      	ldr	r7, [sp, #24]
  40495e:	e9c7 0104 	strd	r0, r1, [r7, #16]
  404962:	e9c7 2300 	strd	r2, r3, [r7]
  404966:	e9c7 4502 	strd	r4, r5, [r7, #8]
  40496a:	e6e6      	b.n	40473a <__kernel_rem_pio2+0x5fa>
  40496c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  40496e:	2b03      	cmp	r3, #3
  404970:	f63f aee3 	bhi.w	40473a <__kernel_rem_pio2+0x5fa>
  404974:	e8df f003 	tbb	[pc, r3]
  404978:	0e1c1c21 	.word	0x0e1c1c21
  40497c:	9b00      	ldr	r3, [sp, #0]
  40497e:	2b01      	cmp	r3, #1
  404980:	dd88      	ble.n	404894 <__kernel_rem_pio2+0x754>
  404982:	aa0c      	add	r2, sp, #48	; 0x30
  404984:	2301      	movs	r3, #1
  404986:	f852 4f04 	ldr.w	r4, [r2, #4]!
  40498a:	2c00      	cmp	r4, #0
  40498c:	f43f af7e 	beq.w	40488c <__kernel_rem_pio2+0x74c>
  404990:	1c58      	adds	r0, r3, #1
  404992:	e4dd      	b.n	404350 <__kernel_rem_pio2+0x210>
  404994:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  404998:	2300      	movs	r3, #0
  40499a:	461d      	mov	r5, r3
  40499c:	e6b4      	b.n	404708 <__kernel_rem_pio2+0x5c8>
  40499e:	4629      	mov	r1, r5
  4049a0:	4620      	mov	r0, r4
  4049a2:	f000 fe53 	bl	40564c <__aeabi_d2iz>
  4049a6:	9a00      	ldr	r2, [sp, #0]
  4049a8:	a90c      	add	r1, sp, #48	; 0x30
  4049aa:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
  4049ae:	e5cf      	b.n	404550 <__kernel_rem_pio2+0x410>
  4049b0:	2600      	movs	r6, #0
  4049b2:	4633      	mov	r3, r6
  4049b4:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  4049b8:	e6d5      	b.n	404766 <__kernel_rem_pio2+0x626>
  4049ba:	2200      	movs	r2, #0
  4049bc:	4613      	mov	r3, r2
  4049be:	e713      	b.n	4047e8 <__kernel_rem_pio2+0x6a8>
  4049c0:	3ff00000 	.word	0x3ff00000
  4049c4:	41700000 	.word	0x41700000
  4049c8:	3e700000 	.word	0x3e700000
  4049cc:	00000000 	.word	0x00000000

004049d0 <__kernel_sin>:
  4049d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4049d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4049d8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  4049dc:	b085      	sub	sp, #20
  4049de:	460c      	mov	r4, r1
  4049e0:	4690      	mov	r8, r2
  4049e2:	4699      	mov	r9, r3
  4049e4:	4605      	mov	r5, r0
  4049e6:	da04      	bge.n	4049f2 <__kernel_sin+0x22>
  4049e8:	f000 fe30 	bl	40564c <__aeabi_d2iz>
  4049ec:	2800      	cmp	r0, #0
  4049ee:	f000 8085 	beq.w	404afc <__kernel_sin+0x12c>
  4049f2:	462a      	mov	r2, r5
  4049f4:	4623      	mov	r3, r4
  4049f6:	4628      	mov	r0, r5
  4049f8:	4621      	mov	r1, r4
  4049fa:	f000 fb77 	bl	4050ec <__aeabi_dmul>
  4049fe:	4606      	mov	r6, r0
  404a00:	460f      	mov	r7, r1
  404a02:	4602      	mov	r2, r0
  404a04:	460b      	mov	r3, r1
  404a06:	4628      	mov	r0, r5
  404a08:	4621      	mov	r1, r4
  404a0a:	f000 fb6f 	bl	4050ec <__aeabi_dmul>
  404a0e:	a33e      	add	r3, pc, #248	; (adr r3, 404b08 <__kernel_sin+0x138>)
  404a10:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a14:	4682      	mov	sl, r0
  404a16:	468b      	mov	fp, r1
  404a18:	4630      	mov	r0, r6
  404a1a:	4639      	mov	r1, r7
  404a1c:	f000 fb66 	bl	4050ec <__aeabi_dmul>
  404a20:	a33b      	add	r3, pc, #236	; (adr r3, 404b10 <__kernel_sin+0x140>)
  404a22:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a26:	f000 f9ad 	bl	404d84 <__aeabi_dsub>
  404a2a:	4632      	mov	r2, r6
  404a2c:	463b      	mov	r3, r7
  404a2e:	f000 fb5d 	bl	4050ec <__aeabi_dmul>
  404a32:	a339      	add	r3, pc, #228	; (adr r3, 404b18 <__kernel_sin+0x148>)
  404a34:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a38:	f000 f9a6 	bl	404d88 <__adddf3>
  404a3c:	4632      	mov	r2, r6
  404a3e:	463b      	mov	r3, r7
  404a40:	f000 fb54 	bl	4050ec <__aeabi_dmul>
  404a44:	a336      	add	r3, pc, #216	; (adr r3, 404b20 <__kernel_sin+0x150>)
  404a46:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a4a:	f000 f99b 	bl	404d84 <__aeabi_dsub>
  404a4e:	4632      	mov	r2, r6
  404a50:	463b      	mov	r3, r7
  404a52:	f000 fb4b 	bl	4050ec <__aeabi_dmul>
  404a56:	a334      	add	r3, pc, #208	; (adr r3, 404b28 <__kernel_sin+0x158>)
  404a58:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a5c:	f000 f994 	bl	404d88 <__adddf3>
  404a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404a62:	e9cd 0100 	strd	r0, r1, [sp]
  404a66:	b39b      	cbz	r3, 404ad0 <__kernel_sin+0x100>
  404a68:	2200      	movs	r2, #0
  404a6a:	4b33      	ldr	r3, [pc, #204]	; (404b38 <__kernel_sin+0x168>)
  404a6c:	4640      	mov	r0, r8
  404a6e:	4649      	mov	r1, r9
  404a70:	f000 fb3c 	bl	4050ec <__aeabi_dmul>
  404a74:	e9dd 2300 	ldrd	r2, r3, [sp]
  404a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404a7c:	4650      	mov	r0, sl
  404a7e:	4659      	mov	r1, fp
  404a80:	f000 fb34 	bl	4050ec <__aeabi_dmul>
  404a84:	4602      	mov	r2, r0
  404a86:	460b      	mov	r3, r1
  404a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404a8c:	f000 f97a 	bl	404d84 <__aeabi_dsub>
  404a90:	4632      	mov	r2, r6
  404a92:	463b      	mov	r3, r7
  404a94:	f000 fb2a 	bl	4050ec <__aeabi_dmul>
  404a98:	4642      	mov	r2, r8
  404a9a:	464b      	mov	r3, r9
  404a9c:	f000 f972 	bl	404d84 <__aeabi_dsub>
  404aa0:	a323      	add	r3, pc, #140	; (adr r3, 404b30 <__kernel_sin+0x160>)
  404aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
  404aa6:	4606      	mov	r6, r0
  404aa8:	460f      	mov	r7, r1
  404aaa:	4650      	mov	r0, sl
  404aac:	4659      	mov	r1, fp
  404aae:	f000 fb1d 	bl	4050ec <__aeabi_dmul>
  404ab2:	4602      	mov	r2, r0
  404ab4:	460b      	mov	r3, r1
  404ab6:	4630      	mov	r0, r6
  404ab8:	4639      	mov	r1, r7
  404aba:	f000 f965 	bl	404d88 <__adddf3>
  404abe:	4602      	mov	r2, r0
  404ac0:	460b      	mov	r3, r1
  404ac2:	4628      	mov	r0, r5
  404ac4:	4621      	mov	r1, r4
  404ac6:	f000 f95d 	bl	404d84 <__aeabi_dsub>
  404aca:	b005      	add	sp, #20
  404acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ad0:	4602      	mov	r2, r0
  404ad2:	460b      	mov	r3, r1
  404ad4:	4630      	mov	r0, r6
  404ad6:	4639      	mov	r1, r7
  404ad8:	f000 fb08 	bl	4050ec <__aeabi_dmul>
  404adc:	a314      	add	r3, pc, #80	; (adr r3, 404b30 <__kernel_sin+0x160>)
  404ade:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ae2:	f000 f94f 	bl	404d84 <__aeabi_dsub>
  404ae6:	4652      	mov	r2, sl
  404ae8:	465b      	mov	r3, fp
  404aea:	f000 faff 	bl	4050ec <__aeabi_dmul>
  404aee:	462a      	mov	r2, r5
  404af0:	4623      	mov	r3, r4
  404af2:	f000 f949 	bl	404d88 <__adddf3>
  404af6:	b005      	add	sp, #20
  404af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404afc:	4628      	mov	r0, r5
  404afe:	4621      	mov	r1, r4
  404b00:	b005      	add	sp, #20
  404b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b06:	bf00      	nop
  404b08:	5acfd57c 	.word	0x5acfd57c
  404b0c:	3de5d93a 	.word	0x3de5d93a
  404b10:	8a2b9ceb 	.word	0x8a2b9ceb
  404b14:	3e5ae5e6 	.word	0x3e5ae5e6
  404b18:	57b1fe7d 	.word	0x57b1fe7d
  404b1c:	3ec71de3 	.word	0x3ec71de3
  404b20:	19c161d5 	.word	0x19c161d5
  404b24:	3f2a01a0 	.word	0x3f2a01a0
  404b28:	1110f8a6 	.word	0x1110f8a6
  404b2c:	3f811111 	.word	0x3f811111
  404b30:	55555549 	.word	0x55555549
  404b34:	3fc55555 	.word	0x3fc55555
  404b38:	3fe00000 	.word	0x3fe00000

00404b3c <fabs>:
  404b3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404b40:	4770      	bx	lr
  404b42:	bf00      	nop
  404b44:	0000      	movs	r0, r0
	...

00404b48 <floor>:
  404b48:	f3c1 520a 	ubfx	r2, r1, #20, #11
  404b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404b50:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  404b54:	2e13      	cmp	r6, #19
  404b56:	460b      	mov	r3, r1
  404b58:	460d      	mov	r5, r1
  404b5a:	4604      	mov	r4, r0
  404b5c:	4688      	mov	r8, r1
  404b5e:	4607      	mov	r7, r0
  404b60:	dc1d      	bgt.n	404b9e <floor+0x56>
  404b62:	2e00      	cmp	r6, #0
  404b64:	db40      	blt.n	404be8 <floor+0xa0>
  404b66:	4a3c      	ldr	r2, [pc, #240]	; (404c58 <floor+0x110>)
  404b68:	fa42 f906 	asr.w	r9, r2, r6
  404b6c:	ea01 0209 	and.w	r2, r1, r9
  404b70:	4302      	orrs	r2, r0
  404b72:	4686      	mov	lr, r0
  404b74:	d018      	beq.n	404ba8 <floor+0x60>
  404b76:	a336      	add	r3, pc, #216	; (adr r3, 404c50 <floor+0x108>)
  404b78:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b7c:	f000 f904 	bl	404d88 <__adddf3>
  404b80:	2200      	movs	r2, #0
  404b82:	2300      	movs	r3, #0
  404b84:	f000 fd42 	bl	40560c <__aeabi_dcmpgt>
  404b88:	b120      	cbz	r0, 404b94 <floor+0x4c>
  404b8a:	2d00      	cmp	r5, #0
  404b8c:	db42      	blt.n	404c14 <floor+0xcc>
  404b8e:	ea28 0509 	bic.w	r5, r8, r9
  404b92:	2700      	movs	r7, #0
  404b94:	463c      	mov	r4, r7
  404b96:	4629      	mov	r1, r5
  404b98:	4620      	mov	r0, r4
  404b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404b9e:	2e33      	cmp	r6, #51	; 0x33
  404ba0:	dd06      	ble.n	404bb0 <floor+0x68>
  404ba2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  404ba6:	d02f      	beq.n	404c08 <floor+0xc0>
  404ba8:	4619      	mov	r1, r3
  404baa:	4620      	mov	r0, r4
  404bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404bb0:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  404bb4:	f04f 39ff 	mov.w	r9, #4294967295
  404bb8:	fa29 f902 	lsr.w	r9, r9, r2
  404bbc:	ea10 0f09 	tst.w	r0, r9
  404bc0:	d0f2      	beq.n	404ba8 <floor+0x60>
  404bc2:	a323      	add	r3, pc, #140	; (adr r3, 404c50 <floor+0x108>)
  404bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
  404bc8:	f000 f8de 	bl	404d88 <__adddf3>
  404bcc:	2200      	movs	r2, #0
  404bce:	2300      	movs	r3, #0
  404bd0:	f000 fd1c 	bl	40560c <__aeabi_dcmpgt>
  404bd4:	2800      	cmp	r0, #0
  404bd6:	d0dd      	beq.n	404b94 <floor+0x4c>
  404bd8:	2d00      	cmp	r5, #0
  404bda:	db21      	blt.n	404c20 <floor+0xd8>
  404bdc:	4645      	mov	r5, r8
  404bde:	ea27 0709 	bic.w	r7, r7, r9
  404be2:	463c      	mov	r4, r7
  404be4:	4629      	mov	r1, r5
  404be6:	e7d7      	b.n	404b98 <floor+0x50>
  404be8:	a319      	add	r3, pc, #100	; (adr r3, 404c50 <floor+0x108>)
  404bea:	e9d3 2300 	ldrd	r2, r3, [r3]
  404bee:	f000 f8cb 	bl	404d88 <__adddf3>
  404bf2:	2200      	movs	r2, #0
  404bf4:	2300      	movs	r3, #0
  404bf6:	f000 fd09 	bl	40560c <__aeabi_dcmpgt>
  404bfa:	2800      	cmp	r0, #0
  404bfc:	d0ca      	beq.n	404b94 <floor+0x4c>
  404bfe:	2d00      	cmp	r5, #0
  404c00:	db19      	blt.n	404c36 <floor+0xee>
  404c02:	2700      	movs	r7, #0
  404c04:	463d      	mov	r5, r7
  404c06:	e7c5      	b.n	404b94 <floor+0x4c>
  404c08:	4602      	mov	r2, r0
  404c0a:	460b      	mov	r3, r1
  404c0c:	f000 f8bc 	bl	404d88 <__adddf3>
  404c10:	4604      	mov	r4, r0
  404c12:	e7ca      	b.n	404baa <floor+0x62>
  404c14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  404c18:	fa43 f606 	asr.w	r6, r3, r6
  404c1c:	44b0      	add	r8, r6
  404c1e:	e7b6      	b.n	404b8e <floor+0x46>
  404c20:	2e14      	cmp	r6, #20
  404c22:	d010      	beq.n	404c46 <floor+0xfe>
  404c24:	2301      	movs	r3, #1
  404c26:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  404c2a:	fa03 f606 	lsl.w	r6, r3, r6
  404c2e:	1937      	adds	r7, r6, r4
  404c30:	bf28      	it	cs
  404c32:	4498      	addcs	r8, r3
  404c34:	e7d2      	b.n	404bdc <floor+0x94>
  404c36:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  404c3a:	4b08      	ldr	r3, [pc, #32]	; (404c5c <floor+0x114>)
  404c3c:	4322      	orrs	r2, r4
  404c3e:	bf18      	it	ne
  404c40:	461d      	movne	r5, r3
  404c42:	2700      	movs	r7, #0
  404c44:	e7a6      	b.n	404b94 <floor+0x4c>
  404c46:	f105 0801 	add.w	r8, r5, #1
  404c4a:	e7c7      	b.n	404bdc <floor+0x94>
  404c4c:	f3af 8000 	nop.w
  404c50:	8800759c 	.word	0x8800759c
  404c54:	7e37e43c 	.word	0x7e37e43c
  404c58:	000fffff 	.word	0x000fffff
  404c5c:	bff00000 	.word	0xbff00000

00404c60 <matherr>:
  404c60:	2000      	movs	r0, #0
  404c62:	4770      	bx	lr
  404c64:	0000      	movs	r0, r0
	...

00404c68 <scalbn>:
  404c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404c6a:	f3c1 560a 	ubfx	r6, r1, #20, #11
  404c6e:	4604      	mov	r4, r0
  404c70:	460d      	mov	r5, r1
  404c72:	460b      	mov	r3, r1
  404c74:	4617      	mov	r7, r2
  404c76:	bb0e      	cbnz	r6, 404cbc <scalbn+0x54>
  404c78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404c7c:	4303      	orrs	r3, r0
  404c7e:	4686      	mov	lr, r0
  404c80:	d025      	beq.n	404cce <scalbn+0x66>
  404c82:	2200      	movs	r2, #0
  404c84:	4b34      	ldr	r3, [pc, #208]	; (404d58 <scalbn+0xf0>)
  404c86:	f000 fa31 	bl	4050ec <__aeabi_dmul>
  404c8a:	4a34      	ldr	r2, [pc, #208]	; (404d5c <scalbn+0xf4>)
  404c8c:	4297      	cmp	r7, r2
  404c8e:	4604      	mov	r4, r0
  404c90:	460d      	mov	r5, r1
  404c92:	460b      	mov	r3, r1
  404c94:	db2a      	blt.n	404cec <scalbn+0x84>
  404c96:	f3c1 560a 	ubfx	r6, r1, #20, #11
  404c9a:	3e36      	subs	r6, #54	; 0x36
  404c9c:	443e      	add	r6, r7
  404c9e:	f240 72fe 	movw	r2, #2046	; 0x7fe
  404ca2:	4296      	cmp	r6, r2
  404ca4:	dc28      	bgt.n	404cf8 <scalbn+0x90>
  404ca6:	2e00      	cmp	r6, #0
  404ca8:	dd12      	ble.n	404cd0 <scalbn+0x68>
  404caa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  404cae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  404cb2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  404cb6:	4620      	mov	r0, r4
  404cb8:	4629      	mov	r1, r5
  404cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404cbc:	f240 72ff 	movw	r2, #2047	; 0x7ff
  404cc0:	4296      	cmp	r6, r2
  404cc2:	d1eb      	bne.n	404c9c <scalbn+0x34>
  404cc4:	4602      	mov	r2, r0
  404cc6:	460b      	mov	r3, r1
  404cc8:	f000 f85e 	bl	404d88 <__adddf3>
  404ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404cd0:	f116 0f35 	cmn.w	r6, #53	; 0x35
  404cd4:	da1d      	bge.n	404d12 <scalbn+0xaa>
  404cd6:	f24c 3350 	movw	r3, #50000	; 0xc350
  404cda:	429f      	cmp	r7, r3
  404cdc:	4622      	mov	r2, r4
  404cde:	462b      	mov	r3, r5
  404ce0:	dc25      	bgt.n	404d2e <scalbn+0xc6>
  404ce2:	a119      	add	r1, pc, #100	; (adr r1, 404d48 <scalbn+0xe0>)
  404ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
  404ce8:	f000 f83c 	bl	404d64 <copysign>
  404cec:	a316      	add	r3, pc, #88	; (adr r3, 404d48 <scalbn+0xe0>)
  404cee:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cf2:	f000 f9fb 	bl	4050ec <__aeabi_dmul>
  404cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404cf8:	4622      	mov	r2, r4
  404cfa:	462b      	mov	r3, r5
  404cfc:	a114      	add	r1, pc, #80	; (adr r1, 404d50 <scalbn+0xe8>)
  404cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
  404d02:	f000 f82f 	bl	404d64 <copysign>
  404d06:	a312      	add	r3, pc, #72	; (adr r3, 404d50 <scalbn+0xe8>)
  404d08:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d0c:	f000 f9ee 	bl	4050ec <__aeabi_dmul>
  404d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404d12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  404d16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  404d1a:	3636      	adds	r6, #54	; 0x36
  404d1c:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  404d20:	4620      	mov	r0, r4
  404d22:	4629      	mov	r1, r5
  404d24:	2200      	movs	r2, #0
  404d26:	4b0e      	ldr	r3, [pc, #56]	; (404d60 <scalbn+0xf8>)
  404d28:	f000 f9e0 	bl	4050ec <__aeabi_dmul>
  404d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404d2e:	a108      	add	r1, pc, #32	; (adr r1, 404d50 <scalbn+0xe8>)
  404d30:	e9d1 0100 	ldrd	r0, r1, [r1]
  404d34:	f000 f816 	bl	404d64 <copysign>
  404d38:	a305      	add	r3, pc, #20	; (adr r3, 404d50 <scalbn+0xe8>)
  404d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d3e:	f000 f9d5 	bl	4050ec <__aeabi_dmul>
  404d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404d44:	f3af 8000 	nop.w
  404d48:	c2f8f359 	.word	0xc2f8f359
  404d4c:	01a56e1f 	.word	0x01a56e1f
  404d50:	8800759c 	.word	0x8800759c
  404d54:	7e37e43c 	.word	0x7e37e43c
  404d58:	43500000 	.word	0x43500000
  404d5c:	ffff3cb0 	.word	0xffff3cb0
  404d60:	3c900000 	.word	0x3c900000

00404d64 <copysign>:
  404d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  404d68:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  404d6c:	ea42 0103 	orr.w	r1, r2, r3
  404d70:	4770      	bx	lr
  404d72:	bf00      	nop

00404d74 <arm_mat_init_f32>:
  404d74:	8001      	strh	r1, [r0, #0]
  404d76:	8042      	strh	r2, [r0, #2]
  404d78:	6043      	str	r3, [r0, #4]
  404d7a:	4770      	bx	lr

00404d7c <__aeabi_drsub>:
  404d7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  404d80:	e002      	b.n	404d88 <__adddf3>
  404d82:	bf00      	nop

00404d84 <__aeabi_dsub>:
  404d84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00404d88 <__adddf3>:
  404d88:	b530      	push	{r4, r5, lr}
  404d8a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  404d8e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  404d92:	ea94 0f05 	teq	r4, r5
  404d96:	bf08      	it	eq
  404d98:	ea90 0f02 	teqeq	r0, r2
  404d9c:	bf1f      	itttt	ne
  404d9e:	ea54 0c00 	orrsne.w	ip, r4, r0
  404da2:	ea55 0c02 	orrsne.w	ip, r5, r2
  404da6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  404daa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404dae:	f000 80e2 	beq.w	404f76 <__adddf3+0x1ee>
  404db2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  404db6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  404dba:	bfb8      	it	lt
  404dbc:	426d      	neglt	r5, r5
  404dbe:	dd0c      	ble.n	404dda <__adddf3+0x52>
  404dc0:	442c      	add	r4, r5
  404dc2:	ea80 0202 	eor.w	r2, r0, r2
  404dc6:	ea81 0303 	eor.w	r3, r1, r3
  404dca:	ea82 0000 	eor.w	r0, r2, r0
  404dce:	ea83 0101 	eor.w	r1, r3, r1
  404dd2:	ea80 0202 	eor.w	r2, r0, r2
  404dd6:	ea81 0303 	eor.w	r3, r1, r3
  404dda:	2d36      	cmp	r5, #54	; 0x36
  404ddc:	bf88      	it	hi
  404dde:	bd30      	pophi	{r4, r5, pc}
  404de0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404de4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404de8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404dec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404df0:	d002      	beq.n	404df8 <__adddf3+0x70>
  404df2:	4240      	negs	r0, r0
  404df4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404df8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404dfc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404e00:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404e04:	d002      	beq.n	404e0c <__adddf3+0x84>
  404e06:	4252      	negs	r2, r2
  404e08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404e0c:	ea94 0f05 	teq	r4, r5
  404e10:	f000 80a7 	beq.w	404f62 <__adddf3+0x1da>
  404e14:	f1a4 0401 	sub.w	r4, r4, #1
  404e18:	f1d5 0e20 	rsbs	lr, r5, #32
  404e1c:	db0d      	blt.n	404e3a <__adddf3+0xb2>
  404e1e:	fa02 fc0e 	lsl.w	ip, r2, lr
  404e22:	fa22 f205 	lsr.w	r2, r2, r5
  404e26:	1880      	adds	r0, r0, r2
  404e28:	f141 0100 	adc.w	r1, r1, #0
  404e2c:	fa03 f20e 	lsl.w	r2, r3, lr
  404e30:	1880      	adds	r0, r0, r2
  404e32:	fa43 f305 	asr.w	r3, r3, r5
  404e36:	4159      	adcs	r1, r3
  404e38:	e00e      	b.n	404e58 <__adddf3+0xd0>
  404e3a:	f1a5 0520 	sub.w	r5, r5, #32
  404e3e:	f10e 0e20 	add.w	lr, lr, #32
  404e42:	2a01      	cmp	r2, #1
  404e44:	fa03 fc0e 	lsl.w	ip, r3, lr
  404e48:	bf28      	it	cs
  404e4a:	f04c 0c02 	orrcs.w	ip, ip, #2
  404e4e:	fa43 f305 	asr.w	r3, r3, r5
  404e52:	18c0      	adds	r0, r0, r3
  404e54:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  404e58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404e5c:	d507      	bpl.n	404e6e <__adddf3+0xe6>
  404e5e:	f04f 0e00 	mov.w	lr, #0
  404e62:	f1dc 0c00 	rsbs	ip, ip, #0
  404e66:	eb7e 0000 	sbcs.w	r0, lr, r0
  404e6a:	eb6e 0101 	sbc.w	r1, lr, r1
  404e6e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  404e72:	d31b      	bcc.n	404eac <__adddf3+0x124>
  404e74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  404e78:	d30c      	bcc.n	404e94 <__adddf3+0x10c>
  404e7a:	0849      	lsrs	r1, r1, #1
  404e7c:	ea5f 0030 	movs.w	r0, r0, rrx
  404e80:	ea4f 0c3c 	mov.w	ip, ip, rrx
  404e84:	f104 0401 	add.w	r4, r4, #1
  404e88:	ea4f 5244 	mov.w	r2, r4, lsl #21
  404e8c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  404e90:	f080 809a 	bcs.w	404fc8 <__adddf3+0x240>
  404e94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  404e98:	bf08      	it	eq
  404e9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404e9e:	f150 0000 	adcs.w	r0, r0, #0
  404ea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404ea6:	ea41 0105 	orr.w	r1, r1, r5
  404eaa:	bd30      	pop	{r4, r5, pc}
  404eac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  404eb0:	4140      	adcs	r0, r0
  404eb2:	eb41 0101 	adc.w	r1, r1, r1
  404eb6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404eba:	f1a4 0401 	sub.w	r4, r4, #1
  404ebe:	d1e9      	bne.n	404e94 <__adddf3+0x10c>
  404ec0:	f091 0f00 	teq	r1, #0
  404ec4:	bf04      	itt	eq
  404ec6:	4601      	moveq	r1, r0
  404ec8:	2000      	moveq	r0, #0
  404eca:	fab1 f381 	clz	r3, r1
  404ece:	bf08      	it	eq
  404ed0:	3320      	addeq	r3, #32
  404ed2:	f1a3 030b 	sub.w	r3, r3, #11
  404ed6:	f1b3 0220 	subs.w	r2, r3, #32
  404eda:	da0c      	bge.n	404ef6 <__adddf3+0x16e>
  404edc:	320c      	adds	r2, #12
  404ede:	dd08      	ble.n	404ef2 <__adddf3+0x16a>
  404ee0:	f102 0c14 	add.w	ip, r2, #20
  404ee4:	f1c2 020c 	rsb	r2, r2, #12
  404ee8:	fa01 f00c 	lsl.w	r0, r1, ip
  404eec:	fa21 f102 	lsr.w	r1, r1, r2
  404ef0:	e00c      	b.n	404f0c <__adddf3+0x184>
  404ef2:	f102 0214 	add.w	r2, r2, #20
  404ef6:	bfd8      	it	le
  404ef8:	f1c2 0c20 	rsble	ip, r2, #32
  404efc:	fa01 f102 	lsl.w	r1, r1, r2
  404f00:	fa20 fc0c 	lsr.w	ip, r0, ip
  404f04:	bfdc      	itt	le
  404f06:	ea41 010c 	orrle.w	r1, r1, ip
  404f0a:	4090      	lslle	r0, r2
  404f0c:	1ae4      	subs	r4, r4, r3
  404f0e:	bfa2      	ittt	ge
  404f10:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  404f14:	4329      	orrge	r1, r5
  404f16:	bd30      	popge	{r4, r5, pc}
  404f18:	ea6f 0404 	mvn.w	r4, r4
  404f1c:	3c1f      	subs	r4, #31
  404f1e:	da1c      	bge.n	404f5a <__adddf3+0x1d2>
  404f20:	340c      	adds	r4, #12
  404f22:	dc0e      	bgt.n	404f42 <__adddf3+0x1ba>
  404f24:	f104 0414 	add.w	r4, r4, #20
  404f28:	f1c4 0220 	rsb	r2, r4, #32
  404f2c:	fa20 f004 	lsr.w	r0, r0, r4
  404f30:	fa01 f302 	lsl.w	r3, r1, r2
  404f34:	ea40 0003 	orr.w	r0, r0, r3
  404f38:	fa21 f304 	lsr.w	r3, r1, r4
  404f3c:	ea45 0103 	orr.w	r1, r5, r3
  404f40:	bd30      	pop	{r4, r5, pc}
  404f42:	f1c4 040c 	rsb	r4, r4, #12
  404f46:	f1c4 0220 	rsb	r2, r4, #32
  404f4a:	fa20 f002 	lsr.w	r0, r0, r2
  404f4e:	fa01 f304 	lsl.w	r3, r1, r4
  404f52:	ea40 0003 	orr.w	r0, r0, r3
  404f56:	4629      	mov	r1, r5
  404f58:	bd30      	pop	{r4, r5, pc}
  404f5a:	fa21 f004 	lsr.w	r0, r1, r4
  404f5e:	4629      	mov	r1, r5
  404f60:	bd30      	pop	{r4, r5, pc}
  404f62:	f094 0f00 	teq	r4, #0
  404f66:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  404f6a:	bf06      	itte	eq
  404f6c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  404f70:	3401      	addeq	r4, #1
  404f72:	3d01      	subne	r5, #1
  404f74:	e74e      	b.n	404e14 <__adddf3+0x8c>
  404f76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404f7a:	bf18      	it	ne
  404f7c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404f80:	d029      	beq.n	404fd6 <__adddf3+0x24e>
  404f82:	ea94 0f05 	teq	r4, r5
  404f86:	bf08      	it	eq
  404f88:	ea90 0f02 	teqeq	r0, r2
  404f8c:	d005      	beq.n	404f9a <__adddf3+0x212>
  404f8e:	ea54 0c00 	orrs.w	ip, r4, r0
  404f92:	bf04      	itt	eq
  404f94:	4619      	moveq	r1, r3
  404f96:	4610      	moveq	r0, r2
  404f98:	bd30      	pop	{r4, r5, pc}
  404f9a:	ea91 0f03 	teq	r1, r3
  404f9e:	bf1e      	ittt	ne
  404fa0:	2100      	movne	r1, #0
  404fa2:	2000      	movne	r0, #0
  404fa4:	bd30      	popne	{r4, r5, pc}
  404fa6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  404faa:	d105      	bne.n	404fb8 <__adddf3+0x230>
  404fac:	0040      	lsls	r0, r0, #1
  404fae:	4149      	adcs	r1, r1
  404fb0:	bf28      	it	cs
  404fb2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  404fb6:	bd30      	pop	{r4, r5, pc}
  404fb8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  404fbc:	bf3c      	itt	cc
  404fbe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  404fc2:	bd30      	popcc	{r4, r5, pc}
  404fc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404fc8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  404fcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404fd0:	f04f 0000 	mov.w	r0, #0
  404fd4:	bd30      	pop	{r4, r5, pc}
  404fd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404fda:	bf1a      	itte	ne
  404fdc:	4619      	movne	r1, r3
  404fde:	4610      	movne	r0, r2
  404fe0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  404fe4:	bf1c      	itt	ne
  404fe6:	460b      	movne	r3, r1
  404fe8:	4602      	movne	r2, r0
  404fea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404fee:	bf06      	itte	eq
  404ff0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  404ff4:	ea91 0f03 	teqeq	r1, r3
  404ff8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404ffc:	bd30      	pop	{r4, r5, pc}
  404ffe:	bf00      	nop

00405000 <__aeabi_ui2d>:
  405000:	f090 0f00 	teq	r0, #0
  405004:	bf04      	itt	eq
  405006:	2100      	moveq	r1, #0
  405008:	4770      	bxeq	lr
  40500a:	b530      	push	{r4, r5, lr}
  40500c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405010:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405014:	f04f 0500 	mov.w	r5, #0
  405018:	f04f 0100 	mov.w	r1, #0
  40501c:	e750      	b.n	404ec0 <__adddf3+0x138>
  40501e:	bf00      	nop

00405020 <__aeabi_i2d>:
  405020:	f090 0f00 	teq	r0, #0
  405024:	bf04      	itt	eq
  405026:	2100      	moveq	r1, #0
  405028:	4770      	bxeq	lr
  40502a:	b530      	push	{r4, r5, lr}
  40502c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405030:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405034:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405038:	bf48      	it	mi
  40503a:	4240      	negmi	r0, r0
  40503c:	f04f 0100 	mov.w	r1, #0
  405040:	e73e      	b.n	404ec0 <__adddf3+0x138>
  405042:	bf00      	nop

00405044 <__aeabi_f2d>:
  405044:	0042      	lsls	r2, r0, #1
  405046:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40504a:	ea4f 0131 	mov.w	r1, r1, rrx
  40504e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405052:	bf1f      	itttt	ne
  405054:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405058:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40505c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405060:	4770      	bxne	lr
  405062:	f092 0f00 	teq	r2, #0
  405066:	bf14      	ite	ne
  405068:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40506c:	4770      	bxeq	lr
  40506e:	b530      	push	{r4, r5, lr}
  405070:	f44f 7460 	mov.w	r4, #896	; 0x380
  405074:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405078:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40507c:	e720      	b.n	404ec0 <__adddf3+0x138>
  40507e:	bf00      	nop

00405080 <__aeabi_ul2d>:
  405080:	ea50 0201 	orrs.w	r2, r0, r1
  405084:	bf08      	it	eq
  405086:	4770      	bxeq	lr
  405088:	b530      	push	{r4, r5, lr}
  40508a:	f04f 0500 	mov.w	r5, #0
  40508e:	e00a      	b.n	4050a6 <__aeabi_l2d+0x16>

00405090 <__aeabi_l2d>:
  405090:	ea50 0201 	orrs.w	r2, r0, r1
  405094:	bf08      	it	eq
  405096:	4770      	bxeq	lr
  405098:	b530      	push	{r4, r5, lr}
  40509a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40509e:	d502      	bpl.n	4050a6 <__aeabi_l2d+0x16>
  4050a0:	4240      	negs	r0, r0
  4050a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4050a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4050aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4050ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4050b2:	f43f aedc 	beq.w	404e6e <__adddf3+0xe6>
  4050b6:	f04f 0203 	mov.w	r2, #3
  4050ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4050be:	bf18      	it	ne
  4050c0:	3203      	addne	r2, #3
  4050c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4050c6:	bf18      	it	ne
  4050c8:	3203      	addne	r2, #3
  4050ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4050ce:	f1c2 0320 	rsb	r3, r2, #32
  4050d2:	fa00 fc03 	lsl.w	ip, r0, r3
  4050d6:	fa20 f002 	lsr.w	r0, r0, r2
  4050da:	fa01 fe03 	lsl.w	lr, r1, r3
  4050de:	ea40 000e 	orr.w	r0, r0, lr
  4050e2:	fa21 f102 	lsr.w	r1, r1, r2
  4050e6:	4414      	add	r4, r2
  4050e8:	e6c1      	b.n	404e6e <__adddf3+0xe6>
  4050ea:	bf00      	nop

004050ec <__aeabi_dmul>:
  4050ec:	b570      	push	{r4, r5, r6, lr}
  4050ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4050f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4050f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4050fa:	bf1d      	ittte	ne
  4050fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405100:	ea94 0f0c 	teqne	r4, ip
  405104:	ea95 0f0c 	teqne	r5, ip
  405108:	f000 f8de 	bleq	4052c8 <__aeabi_dmul+0x1dc>
  40510c:	442c      	add	r4, r5
  40510e:	ea81 0603 	eor.w	r6, r1, r3
  405112:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405116:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40511a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40511e:	bf18      	it	ne
  405120:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405124:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405128:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40512c:	d038      	beq.n	4051a0 <__aeabi_dmul+0xb4>
  40512e:	fba0 ce02 	umull	ip, lr, r0, r2
  405132:	f04f 0500 	mov.w	r5, #0
  405136:	fbe1 e502 	umlal	lr, r5, r1, r2
  40513a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40513e:	fbe0 e503 	umlal	lr, r5, r0, r3
  405142:	f04f 0600 	mov.w	r6, #0
  405146:	fbe1 5603 	umlal	r5, r6, r1, r3
  40514a:	f09c 0f00 	teq	ip, #0
  40514e:	bf18      	it	ne
  405150:	f04e 0e01 	orrne.w	lr, lr, #1
  405154:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405158:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40515c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405160:	d204      	bcs.n	40516c <__aeabi_dmul+0x80>
  405162:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405166:	416d      	adcs	r5, r5
  405168:	eb46 0606 	adc.w	r6, r6, r6
  40516c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405170:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405174:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405178:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40517c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405180:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405184:	bf88      	it	hi
  405186:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40518a:	d81e      	bhi.n	4051ca <__aeabi_dmul+0xde>
  40518c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405190:	bf08      	it	eq
  405192:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405196:	f150 0000 	adcs.w	r0, r0, #0
  40519a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40519e:	bd70      	pop	{r4, r5, r6, pc}
  4051a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4051a4:	ea46 0101 	orr.w	r1, r6, r1
  4051a8:	ea40 0002 	orr.w	r0, r0, r2
  4051ac:	ea81 0103 	eor.w	r1, r1, r3
  4051b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4051b4:	bfc2      	ittt	gt
  4051b6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4051ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4051be:	bd70      	popgt	{r4, r5, r6, pc}
  4051c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4051c4:	f04f 0e00 	mov.w	lr, #0
  4051c8:	3c01      	subs	r4, #1
  4051ca:	f300 80ab 	bgt.w	405324 <__aeabi_dmul+0x238>
  4051ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4051d2:	bfde      	ittt	le
  4051d4:	2000      	movle	r0, #0
  4051d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4051da:	bd70      	pople	{r4, r5, r6, pc}
  4051dc:	f1c4 0400 	rsb	r4, r4, #0
  4051e0:	3c20      	subs	r4, #32
  4051e2:	da35      	bge.n	405250 <__aeabi_dmul+0x164>
  4051e4:	340c      	adds	r4, #12
  4051e6:	dc1b      	bgt.n	405220 <__aeabi_dmul+0x134>
  4051e8:	f104 0414 	add.w	r4, r4, #20
  4051ec:	f1c4 0520 	rsb	r5, r4, #32
  4051f0:	fa00 f305 	lsl.w	r3, r0, r5
  4051f4:	fa20 f004 	lsr.w	r0, r0, r4
  4051f8:	fa01 f205 	lsl.w	r2, r1, r5
  4051fc:	ea40 0002 	orr.w	r0, r0, r2
  405200:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405204:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405208:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40520c:	fa21 f604 	lsr.w	r6, r1, r4
  405210:	eb42 0106 	adc.w	r1, r2, r6
  405214:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405218:	bf08      	it	eq
  40521a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40521e:	bd70      	pop	{r4, r5, r6, pc}
  405220:	f1c4 040c 	rsb	r4, r4, #12
  405224:	f1c4 0520 	rsb	r5, r4, #32
  405228:	fa00 f304 	lsl.w	r3, r0, r4
  40522c:	fa20 f005 	lsr.w	r0, r0, r5
  405230:	fa01 f204 	lsl.w	r2, r1, r4
  405234:	ea40 0002 	orr.w	r0, r0, r2
  405238:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40523c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405240:	f141 0100 	adc.w	r1, r1, #0
  405244:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405248:	bf08      	it	eq
  40524a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40524e:	bd70      	pop	{r4, r5, r6, pc}
  405250:	f1c4 0520 	rsb	r5, r4, #32
  405254:	fa00 f205 	lsl.w	r2, r0, r5
  405258:	ea4e 0e02 	orr.w	lr, lr, r2
  40525c:	fa20 f304 	lsr.w	r3, r0, r4
  405260:	fa01 f205 	lsl.w	r2, r1, r5
  405264:	ea43 0302 	orr.w	r3, r3, r2
  405268:	fa21 f004 	lsr.w	r0, r1, r4
  40526c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405270:	fa21 f204 	lsr.w	r2, r1, r4
  405274:	ea20 0002 	bic.w	r0, r0, r2
  405278:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40527c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405280:	bf08      	it	eq
  405282:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405286:	bd70      	pop	{r4, r5, r6, pc}
  405288:	f094 0f00 	teq	r4, #0
  40528c:	d10f      	bne.n	4052ae <__aeabi_dmul+0x1c2>
  40528e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405292:	0040      	lsls	r0, r0, #1
  405294:	eb41 0101 	adc.w	r1, r1, r1
  405298:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40529c:	bf08      	it	eq
  40529e:	3c01      	subeq	r4, #1
  4052a0:	d0f7      	beq.n	405292 <__aeabi_dmul+0x1a6>
  4052a2:	ea41 0106 	orr.w	r1, r1, r6
  4052a6:	f095 0f00 	teq	r5, #0
  4052aa:	bf18      	it	ne
  4052ac:	4770      	bxne	lr
  4052ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4052b2:	0052      	lsls	r2, r2, #1
  4052b4:	eb43 0303 	adc.w	r3, r3, r3
  4052b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4052bc:	bf08      	it	eq
  4052be:	3d01      	subeq	r5, #1
  4052c0:	d0f7      	beq.n	4052b2 <__aeabi_dmul+0x1c6>
  4052c2:	ea43 0306 	orr.w	r3, r3, r6
  4052c6:	4770      	bx	lr
  4052c8:	ea94 0f0c 	teq	r4, ip
  4052cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4052d0:	bf18      	it	ne
  4052d2:	ea95 0f0c 	teqne	r5, ip
  4052d6:	d00c      	beq.n	4052f2 <__aeabi_dmul+0x206>
  4052d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4052dc:	bf18      	it	ne
  4052de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4052e2:	d1d1      	bne.n	405288 <__aeabi_dmul+0x19c>
  4052e4:	ea81 0103 	eor.w	r1, r1, r3
  4052e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4052ec:	f04f 0000 	mov.w	r0, #0
  4052f0:	bd70      	pop	{r4, r5, r6, pc}
  4052f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4052f6:	bf06      	itte	eq
  4052f8:	4610      	moveq	r0, r2
  4052fa:	4619      	moveq	r1, r3
  4052fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405300:	d019      	beq.n	405336 <__aeabi_dmul+0x24a>
  405302:	ea94 0f0c 	teq	r4, ip
  405306:	d102      	bne.n	40530e <__aeabi_dmul+0x222>
  405308:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40530c:	d113      	bne.n	405336 <__aeabi_dmul+0x24a>
  40530e:	ea95 0f0c 	teq	r5, ip
  405312:	d105      	bne.n	405320 <__aeabi_dmul+0x234>
  405314:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405318:	bf1c      	itt	ne
  40531a:	4610      	movne	r0, r2
  40531c:	4619      	movne	r1, r3
  40531e:	d10a      	bne.n	405336 <__aeabi_dmul+0x24a>
  405320:	ea81 0103 	eor.w	r1, r1, r3
  405324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405328:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40532c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405330:	f04f 0000 	mov.w	r0, #0
  405334:	bd70      	pop	{r4, r5, r6, pc}
  405336:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40533a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40533e:	bd70      	pop	{r4, r5, r6, pc}

00405340 <__aeabi_ddiv>:
  405340:	b570      	push	{r4, r5, r6, lr}
  405342:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405346:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40534a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40534e:	bf1d      	ittte	ne
  405350:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405354:	ea94 0f0c 	teqne	r4, ip
  405358:	ea95 0f0c 	teqne	r5, ip
  40535c:	f000 f8a7 	bleq	4054ae <__aeabi_ddiv+0x16e>
  405360:	eba4 0405 	sub.w	r4, r4, r5
  405364:	ea81 0e03 	eor.w	lr, r1, r3
  405368:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40536c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405370:	f000 8088 	beq.w	405484 <__aeabi_ddiv+0x144>
  405374:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405378:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40537c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405380:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405384:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405388:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40538c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405390:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405394:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405398:	429d      	cmp	r5, r3
  40539a:	bf08      	it	eq
  40539c:	4296      	cmpeq	r6, r2
  40539e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4053a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4053a6:	d202      	bcs.n	4053ae <__aeabi_ddiv+0x6e>
  4053a8:	085b      	lsrs	r3, r3, #1
  4053aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4053ae:	1ab6      	subs	r6, r6, r2
  4053b0:	eb65 0503 	sbc.w	r5, r5, r3
  4053b4:	085b      	lsrs	r3, r3, #1
  4053b6:	ea4f 0232 	mov.w	r2, r2, rrx
  4053ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4053be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4053c2:	ebb6 0e02 	subs.w	lr, r6, r2
  4053c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4053ca:	bf22      	ittt	cs
  4053cc:	1ab6      	subcs	r6, r6, r2
  4053ce:	4675      	movcs	r5, lr
  4053d0:	ea40 000c 	orrcs.w	r0, r0, ip
  4053d4:	085b      	lsrs	r3, r3, #1
  4053d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4053da:	ebb6 0e02 	subs.w	lr, r6, r2
  4053de:	eb75 0e03 	sbcs.w	lr, r5, r3
  4053e2:	bf22      	ittt	cs
  4053e4:	1ab6      	subcs	r6, r6, r2
  4053e6:	4675      	movcs	r5, lr
  4053e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4053ec:	085b      	lsrs	r3, r3, #1
  4053ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4053f2:	ebb6 0e02 	subs.w	lr, r6, r2
  4053f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4053fa:	bf22      	ittt	cs
  4053fc:	1ab6      	subcs	r6, r6, r2
  4053fe:	4675      	movcs	r5, lr
  405400:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405404:	085b      	lsrs	r3, r3, #1
  405406:	ea4f 0232 	mov.w	r2, r2, rrx
  40540a:	ebb6 0e02 	subs.w	lr, r6, r2
  40540e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405412:	bf22      	ittt	cs
  405414:	1ab6      	subcs	r6, r6, r2
  405416:	4675      	movcs	r5, lr
  405418:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40541c:	ea55 0e06 	orrs.w	lr, r5, r6
  405420:	d018      	beq.n	405454 <__aeabi_ddiv+0x114>
  405422:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405426:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40542a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40542e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405432:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405436:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40543a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40543e:	d1c0      	bne.n	4053c2 <__aeabi_ddiv+0x82>
  405440:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405444:	d10b      	bne.n	40545e <__aeabi_ddiv+0x11e>
  405446:	ea41 0100 	orr.w	r1, r1, r0
  40544a:	f04f 0000 	mov.w	r0, #0
  40544e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405452:	e7b6      	b.n	4053c2 <__aeabi_ddiv+0x82>
  405454:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405458:	bf04      	itt	eq
  40545a:	4301      	orreq	r1, r0
  40545c:	2000      	moveq	r0, #0
  40545e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405462:	bf88      	it	hi
  405464:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405468:	f63f aeaf 	bhi.w	4051ca <__aeabi_dmul+0xde>
  40546c:	ebb5 0c03 	subs.w	ip, r5, r3
  405470:	bf04      	itt	eq
  405472:	ebb6 0c02 	subseq.w	ip, r6, r2
  405476:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40547a:	f150 0000 	adcs.w	r0, r0, #0
  40547e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405482:	bd70      	pop	{r4, r5, r6, pc}
  405484:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405488:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40548c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405490:	bfc2      	ittt	gt
  405492:	ebd4 050c 	rsbsgt	r5, r4, ip
  405496:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40549a:	bd70      	popgt	{r4, r5, r6, pc}
  40549c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4054a0:	f04f 0e00 	mov.w	lr, #0
  4054a4:	3c01      	subs	r4, #1
  4054a6:	e690      	b.n	4051ca <__aeabi_dmul+0xde>
  4054a8:	ea45 0e06 	orr.w	lr, r5, r6
  4054ac:	e68d      	b.n	4051ca <__aeabi_dmul+0xde>
  4054ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4054b2:	ea94 0f0c 	teq	r4, ip
  4054b6:	bf08      	it	eq
  4054b8:	ea95 0f0c 	teqeq	r5, ip
  4054bc:	f43f af3b 	beq.w	405336 <__aeabi_dmul+0x24a>
  4054c0:	ea94 0f0c 	teq	r4, ip
  4054c4:	d10a      	bne.n	4054dc <__aeabi_ddiv+0x19c>
  4054c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4054ca:	f47f af34 	bne.w	405336 <__aeabi_dmul+0x24a>
  4054ce:	ea95 0f0c 	teq	r5, ip
  4054d2:	f47f af25 	bne.w	405320 <__aeabi_dmul+0x234>
  4054d6:	4610      	mov	r0, r2
  4054d8:	4619      	mov	r1, r3
  4054da:	e72c      	b.n	405336 <__aeabi_dmul+0x24a>
  4054dc:	ea95 0f0c 	teq	r5, ip
  4054e0:	d106      	bne.n	4054f0 <__aeabi_ddiv+0x1b0>
  4054e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4054e6:	f43f aefd 	beq.w	4052e4 <__aeabi_dmul+0x1f8>
  4054ea:	4610      	mov	r0, r2
  4054ec:	4619      	mov	r1, r3
  4054ee:	e722      	b.n	405336 <__aeabi_dmul+0x24a>
  4054f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4054f4:	bf18      	it	ne
  4054f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4054fa:	f47f aec5 	bne.w	405288 <__aeabi_dmul+0x19c>
  4054fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405502:	f47f af0d 	bne.w	405320 <__aeabi_dmul+0x234>
  405506:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40550a:	f47f aeeb 	bne.w	4052e4 <__aeabi_dmul+0x1f8>
  40550e:	e712      	b.n	405336 <__aeabi_dmul+0x24a>

00405510 <__gedf2>:
  405510:	f04f 3cff 	mov.w	ip, #4294967295
  405514:	e006      	b.n	405524 <__cmpdf2+0x4>
  405516:	bf00      	nop

00405518 <__ledf2>:
  405518:	f04f 0c01 	mov.w	ip, #1
  40551c:	e002      	b.n	405524 <__cmpdf2+0x4>
  40551e:	bf00      	nop

00405520 <__cmpdf2>:
  405520:	f04f 0c01 	mov.w	ip, #1
  405524:	f84d cd04 	str.w	ip, [sp, #-4]!
  405528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40552c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405530:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405534:	bf18      	it	ne
  405536:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40553a:	d01b      	beq.n	405574 <__cmpdf2+0x54>
  40553c:	b001      	add	sp, #4
  40553e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  405542:	bf0c      	ite	eq
  405544:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  405548:	ea91 0f03 	teqne	r1, r3
  40554c:	bf02      	ittt	eq
  40554e:	ea90 0f02 	teqeq	r0, r2
  405552:	2000      	moveq	r0, #0
  405554:	4770      	bxeq	lr
  405556:	f110 0f00 	cmn.w	r0, #0
  40555a:	ea91 0f03 	teq	r1, r3
  40555e:	bf58      	it	pl
  405560:	4299      	cmppl	r1, r3
  405562:	bf08      	it	eq
  405564:	4290      	cmpeq	r0, r2
  405566:	bf2c      	ite	cs
  405568:	17d8      	asrcs	r0, r3, #31
  40556a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40556e:	f040 0001 	orr.w	r0, r0, #1
  405572:	4770      	bx	lr
  405574:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40557c:	d102      	bne.n	405584 <__cmpdf2+0x64>
  40557e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405582:	d107      	bne.n	405594 <__cmpdf2+0x74>
  405584:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405588:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40558c:	d1d6      	bne.n	40553c <__cmpdf2+0x1c>
  40558e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405592:	d0d3      	beq.n	40553c <__cmpdf2+0x1c>
  405594:	f85d 0b04 	ldr.w	r0, [sp], #4
  405598:	4770      	bx	lr
  40559a:	bf00      	nop

0040559c <__aeabi_cdrcmple>:
  40559c:	4684      	mov	ip, r0
  40559e:	4610      	mov	r0, r2
  4055a0:	4662      	mov	r2, ip
  4055a2:	468c      	mov	ip, r1
  4055a4:	4619      	mov	r1, r3
  4055a6:	4663      	mov	r3, ip
  4055a8:	e000      	b.n	4055ac <__aeabi_cdcmpeq>
  4055aa:	bf00      	nop

004055ac <__aeabi_cdcmpeq>:
  4055ac:	b501      	push	{r0, lr}
  4055ae:	f7ff ffb7 	bl	405520 <__cmpdf2>
  4055b2:	2800      	cmp	r0, #0
  4055b4:	bf48      	it	mi
  4055b6:	f110 0f00 	cmnmi.w	r0, #0
  4055ba:	bd01      	pop	{r0, pc}

004055bc <__aeabi_dcmpeq>:
  4055bc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4055c0:	f7ff fff4 	bl	4055ac <__aeabi_cdcmpeq>
  4055c4:	bf0c      	ite	eq
  4055c6:	2001      	moveq	r0, #1
  4055c8:	2000      	movne	r0, #0
  4055ca:	f85d fb08 	ldr.w	pc, [sp], #8
  4055ce:	bf00      	nop

004055d0 <__aeabi_dcmplt>:
  4055d0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4055d4:	f7ff ffea 	bl	4055ac <__aeabi_cdcmpeq>
  4055d8:	bf34      	ite	cc
  4055da:	2001      	movcc	r0, #1
  4055dc:	2000      	movcs	r0, #0
  4055de:	f85d fb08 	ldr.w	pc, [sp], #8
  4055e2:	bf00      	nop

004055e4 <__aeabi_dcmple>:
  4055e4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4055e8:	f7ff ffe0 	bl	4055ac <__aeabi_cdcmpeq>
  4055ec:	bf94      	ite	ls
  4055ee:	2001      	movls	r0, #1
  4055f0:	2000      	movhi	r0, #0
  4055f2:	f85d fb08 	ldr.w	pc, [sp], #8
  4055f6:	bf00      	nop

004055f8 <__aeabi_dcmpge>:
  4055f8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4055fc:	f7ff ffce 	bl	40559c <__aeabi_cdrcmple>
  405600:	bf94      	ite	ls
  405602:	2001      	movls	r0, #1
  405604:	2000      	movhi	r0, #0
  405606:	f85d fb08 	ldr.w	pc, [sp], #8
  40560a:	bf00      	nop

0040560c <__aeabi_dcmpgt>:
  40560c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405610:	f7ff ffc4 	bl	40559c <__aeabi_cdrcmple>
  405614:	bf34      	ite	cc
  405616:	2001      	movcc	r0, #1
  405618:	2000      	movcs	r0, #0
  40561a:	f85d fb08 	ldr.w	pc, [sp], #8
  40561e:	bf00      	nop

00405620 <__aeabi_dcmpun>:
  405620:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405628:	d102      	bne.n	405630 <__aeabi_dcmpun+0x10>
  40562a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40562e:	d10a      	bne.n	405646 <__aeabi_dcmpun+0x26>
  405630:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405634:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405638:	d102      	bne.n	405640 <__aeabi_dcmpun+0x20>
  40563a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40563e:	d102      	bne.n	405646 <__aeabi_dcmpun+0x26>
  405640:	f04f 0000 	mov.w	r0, #0
  405644:	4770      	bx	lr
  405646:	f04f 0001 	mov.w	r0, #1
  40564a:	4770      	bx	lr

0040564c <__aeabi_d2iz>:
  40564c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405650:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405654:	d215      	bcs.n	405682 <__aeabi_d2iz+0x36>
  405656:	d511      	bpl.n	40567c <__aeabi_d2iz+0x30>
  405658:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40565c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  405660:	d912      	bls.n	405688 <__aeabi_d2iz+0x3c>
  405662:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405666:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40566a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40566e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405672:	fa23 f002 	lsr.w	r0, r3, r2
  405676:	bf18      	it	ne
  405678:	4240      	negne	r0, r0
  40567a:	4770      	bx	lr
  40567c:	f04f 0000 	mov.w	r0, #0
  405680:	4770      	bx	lr
  405682:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405686:	d105      	bne.n	405694 <__aeabi_d2iz+0x48>
  405688:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40568c:	bf08      	it	eq
  40568e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405692:	4770      	bx	lr
  405694:	f04f 0000 	mov.w	r0, #0
  405698:	4770      	bx	lr
  40569a:	bf00      	nop

0040569c <__aeabi_d2f>:
  40569c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4056a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4056a4:	bf24      	itt	cs
  4056a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4056aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4056ae:	d90d      	bls.n	4056cc <__aeabi_d2f+0x30>
  4056b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4056b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4056b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4056bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4056c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4056c4:	bf08      	it	eq
  4056c6:	f020 0001 	biceq.w	r0, r0, #1
  4056ca:	4770      	bx	lr
  4056cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4056d0:	d121      	bne.n	405716 <__aeabi_d2f+0x7a>
  4056d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4056d6:	bfbc      	itt	lt
  4056d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4056dc:	4770      	bxlt	lr
  4056de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4056e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4056e6:	f1c2 0218 	rsb	r2, r2, #24
  4056ea:	f1c2 0c20 	rsb	ip, r2, #32
  4056ee:	fa10 f30c 	lsls.w	r3, r0, ip
  4056f2:	fa20 f002 	lsr.w	r0, r0, r2
  4056f6:	bf18      	it	ne
  4056f8:	f040 0001 	orrne.w	r0, r0, #1
  4056fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405700:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  405704:	fa03 fc0c 	lsl.w	ip, r3, ip
  405708:	ea40 000c 	orr.w	r0, r0, ip
  40570c:	fa23 f302 	lsr.w	r3, r3, r2
  405710:	ea4f 0343 	mov.w	r3, r3, lsl #1
  405714:	e7cc      	b.n	4056b0 <__aeabi_d2f+0x14>
  405716:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40571a:	d107      	bne.n	40572c <__aeabi_d2f+0x90>
  40571c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  405720:	bf1e      	ittt	ne
  405722:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  405726:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40572a:	4770      	bxne	lr
  40572c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  405730:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405734:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405738:	4770      	bx	lr
  40573a:	bf00      	nop

0040573c <__errno>:
  40573c:	4b01      	ldr	r3, [pc, #4]	; (405744 <__errno+0x8>)
  40573e:	6818      	ldr	r0, [r3, #0]
  405740:	4770      	bx	lr
  405742:	bf00      	nop
  405744:	2040004c 	.word	0x2040004c

00405748 <__libc_init_array>:
  405748:	b570      	push	{r4, r5, r6, lr}
  40574a:	4e0d      	ldr	r6, [pc, #52]	; (405780 <__libc_init_array+0x38>)
  40574c:	4c0d      	ldr	r4, [pc, #52]	; (405784 <__libc_init_array+0x3c>)
  40574e:	1ba4      	subs	r4, r4, r6
  405750:	10a4      	asrs	r4, r4, #2
  405752:	2500      	movs	r5, #0
  405754:	42a5      	cmp	r5, r4
  405756:	d109      	bne.n	40576c <__libc_init_array+0x24>
  405758:	4e0b      	ldr	r6, [pc, #44]	; (405788 <__libc_init_array+0x40>)
  40575a:	4c0c      	ldr	r4, [pc, #48]	; (40578c <__libc_init_array+0x44>)
  40575c:	f003 f8bc 	bl	4088d8 <_init>
  405760:	1ba4      	subs	r4, r4, r6
  405762:	10a4      	asrs	r4, r4, #2
  405764:	2500      	movs	r5, #0
  405766:	42a5      	cmp	r5, r4
  405768:	d105      	bne.n	405776 <__libc_init_array+0x2e>
  40576a:	bd70      	pop	{r4, r5, r6, pc}
  40576c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  405770:	4798      	blx	r3
  405772:	3501      	adds	r5, #1
  405774:	e7ee      	b.n	405754 <__libc_init_array+0xc>
  405776:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40577a:	4798      	blx	r3
  40577c:	3501      	adds	r5, #1
  40577e:	e7f2      	b.n	405766 <__libc_init_array+0x1e>
  405780:	004088e4 	.word	0x004088e4
  405784:	004088e4 	.word	0x004088e4
  405788:	004088e4 	.word	0x004088e4
  40578c:	004088e8 	.word	0x004088e8

00405790 <malloc>:
  405790:	4b02      	ldr	r3, [pc, #8]	; (40579c <malloc+0xc>)
  405792:	4601      	mov	r1, r0
  405794:	6818      	ldr	r0, [r3, #0]
  405796:	f000 b865 	b.w	405864 <_malloc_r>
  40579a:	bf00      	nop
  40579c:	2040004c 	.word	0x2040004c

004057a0 <memcpy>:
  4057a0:	b510      	push	{r4, lr}
  4057a2:	1e43      	subs	r3, r0, #1
  4057a4:	440a      	add	r2, r1
  4057a6:	4291      	cmp	r1, r2
  4057a8:	d100      	bne.n	4057ac <memcpy+0xc>
  4057aa:	bd10      	pop	{r4, pc}
  4057ac:	f811 4b01 	ldrb.w	r4, [r1], #1
  4057b0:	f803 4f01 	strb.w	r4, [r3, #1]!
  4057b4:	e7f7      	b.n	4057a6 <memcpy+0x6>

004057b6 <memset>:
  4057b6:	4402      	add	r2, r0
  4057b8:	4603      	mov	r3, r0
  4057ba:	4293      	cmp	r3, r2
  4057bc:	d100      	bne.n	4057c0 <memset+0xa>
  4057be:	4770      	bx	lr
  4057c0:	f803 1b01 	strb.w	r1, [r3], #1
  4057c4:	e7f9      	b.n	4057ba <memset+0x4>
	...

004057c8 <_free_r>:
  4057c8:	b538      	push	{r3, r4, r5, lr}
  4057ca:	4605      	mov	r5, r0
  4057cc:	2900      	cmp	r1, #0
  4057ce:	d045      	beq.n	40585c <_free_r+0x94>
  4057d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4057d4:	1f0c      	subs	r4, r1, #4
  4057d6:	2b00      	cmp	r3, #0
  4057d8:	bfb8      	it	lt
  4057da:	18e4      	addlt	r4, r4, r3
  4057dc:	f001 fe88 	bl	4074f0 <__malloc_lock>
  4057e0:	4a1f      	ldr	r2, [pc, #124]	; (405860 <_free_r+0x98>)
  4057e2:	6813      	ldr	r3, [r2, #0]
  4057e4:	4610      	mov	r0, r2
  4057e6:	b933      	cbnz	r3, 4057f6 <_free_r+0x2e>
  4057e8:	6063      	str	r3, [r4, #4]
  4057ea:	6014      	str	r4, [r2, #0]
  4057ec:	4628      	mov	r0, r5
  4057ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4057f2:	f001 be7e 	b.w	4074f2 <__malloc_unlock>
  4057f6:	42a3      	cmp	r3, r4
  4057f8:	d90c      	bls.n	405814 <_free_r+0x4c>
  4057fa:	6821      	ldr	r1, [r4, #0]
  4057fc:	1862      	adds	r2, r4, r1
  4057fe:	4293      	cmp	r3, r2
  405800:	bf04      	itt	eq
  405802:	681a      	ldreq	r2, [r3, #0]
  405804:	685b      	ldreq	r3, [r3, #4]
  405806:	6063      	str	r3, [r4, #4]
  405808:	bf04      	itt	eq
  40580a:	1852      	addeq	r2, r2, r1
  40580c:	6022      	streq	r2, [r4, #0]
  40580e:	6004      	str	r4, [r0, #0]
  405810:	e7ec      	b.n	4057ec <_free_r+0x24>
  405812:	4613      	mov	r3, r2
  405814:	685a      	ldr	r2, [r3, #4]
  405816:	b10a      	cbz	r2, 40581c <_free_r+0x54>
  405818:	42a2      	cmp	r2, r4
  40581a:	d9fa      	bls.n	405812 <_free_r+0x4a>
  40581c:	6819      	ldr	r1, [r3, #0]
  40581e:	1858      	adds	r0, r3, r1
  405820:	42a0      	cmp	r0, r4
  405822:	d10b      	bne.n	40583c <_free_r+0x74>
  405824:	6820      	ldr	r0, [r4, #0]
  405826:	4401      	add	r1, r0
  405828:	1858      	adds	r0, r3, r1
  40582a:	4282      	cmp	r2, r0
  40582c:	6019      	str	r1, [r3, #0]
  40582e:	d1dd      	bne.n	4057ec <_free_r+0x24>
  405830:	6810      	ldr	r0, [r2, #0]
  405832:	6852      	ldr	r2, [r2, #4]
  405834:	605a      	str	r2, [r3, #4]
  405836:	4401      	add	r1, r0
  405838:	6019      	str	r1, [r3, #0]
  40583a:	e7d7      	b.n	4057ec <_free_r+0x24>
  40583c:	d902      	bls.n	405844 <_free_r+0x7c>
  40583e:	230c      	movs	r3, #12
  405840:	602b      	str	r3, [r5, #0]
  405842:	e7d3      	b.n	4057ec <_free_r+0x24>
  405844:	6820      	ldr	r0, [r4, #0]
  405846:	1821      	adds	r1, r4, r0
  405848:	428a      	cmp	r2, r1
  40584a:	bf04      	itt	eq
  40584c:	6811      	ldreq	r1, [r2, #0]
  40584e:	6852      	ldreq	r2, [r2, #4]
  405850:	6062      	str	r2, [r4, #4]
  405852:	bf04      	itt	eq
  405854:	1809      	addeq	r1, r1, r0
  405856:	6021      	streq	r1, [r4, #0]
  405858:	605c      	str	r4, [r3, #4]
  40585a:	e7c7      	b.n	4057ec <_free_r+0x24>
  40585c:	bd38      	pop	{r3, r4, r5, pc}
  40585e:	bf00      	nop
  405860:	204005c0 	.word	0x204005c0

00405864 <_malloc_r>:
  405864:	b570      	push	{r4, r5, r6, lr}
  405866:	1ccd      	adds	r5, r1, #3
  405868:	f025 0503 	bic.w	r5, r5, #3
  40586c:	3508      	adds	r5, #8
  40586e:	2d0c      	cmp	r5, #12
  405870:	bf38      	it	cc
  405872:	250c      	movcc	r5, #12
  405874:	2d00      	cmp	r5, #0
  405876:	4606      	mov	r6, r0
  405878:	db01      	blt.n	40587e <_malloc_r+0x1a>
  40587a:	42a9      	cmp	r1, r5
  40587c:	d903      	bls.n	405886 <_malloc_r+0x22>
  40587e:	230c      	movs	r3, #12
  405880:	6033      	str	r3, [r6, #0]
  405882:	2000      	movs	r0, #0
  405884:	bd70      	pop	{r4, r5, r6, pc}
  405886:	f001 fe33 	bl	4074f0 <__malloc_lock>
  40588a:	4a23      	ldr	r2, [pc, #140]	; (405918 <_malloc_r+0xb4>)
  40588c:	6814      	ldr	r4, [r2, #0]
  40588e:	4621      	mov	r1, r4
  405890:	b991      	cbnz	r1, 4058b8 <_malloc_r+0x54>
  405892:	4c22      	ldr	r4, [pc, #136]	; (40591c <_malloc_r+0xb8>)
  405894:	6823      	ldr	r3, [r4, #0]
  405896:	b91b      	cbnz	r3, 4058a0 <_malloc_r+0x3c>
  405898:	4630      	mov	r0, r6
  40589a:	f000 fcb9 	bl	406210 <_sbrk_r>
  40589e:	6020      	str	r0, [r4, #0]
  4058a0:	4629      	mov	r1, r5
  4058a2:	4630      	mov	r0, r6
  4058a4:	f000 fcb4 	bl	406210 <_sbrk_r>
  4058a8:	1c43      	adds	r3, r0, #1
  4058aa:	d126      	bne.n	4058fa <_malloc_r+0x96>
  4058ac:	230c      	movs	r3, #12
  4058ae:	6033      	str	r3, [r6, #0]
  4058b0:	4630      	mov	r0, r6
  4058b2:	f001 fe1e 	bl	4074f2 <__malloc_unlock>
  4058b6:	e7e4      	b.n	405882 <_malloc_r+0x1e>
  4058b8:	680b      	ldr	r3, [r1, #0]
  4058ba:	1b5b      	subs	r3, r3, r5
  4058bc:	d41a      	bmi.n	4058f4 <_malloc_r+0x90>
  4058be:	2b0b      	cmp	r3, #11
  4058c0:	d90f      	bls.n	4058e2 <_malloc_r+0x7e>
  4058c2:	600b      	str	r3, [r1, #0]
  4058c4:	50cd      	str	r5, [r1, r3]
  4058c6:	18cc      	adds	r4, r1, r3
  4058c8:	4630      	mov	r0, r6
  4058ca:	f001 fe12 	bl	4074f2 <__malloc_unlock>
  4058ce:	f104 000b 	add.w	r0, r4, #11
  4058d2:	1d23      	adds	r3, r4, #4
  4058d4:	f020 0007 	bic.w	r0, r0, #7
  4058d8:	1ac3      	subs	r3, r0, r3
  4058da:	d01b      	beq.n	405914 <_malloc_r+0xb0>
  4058dc:	425a      	negs	r2, r3
  4058de:	50e2      	str	r2, [r4, r3]
  4058e0:	bd70      	pop	{r4, r5, r6, pc}
  4058e2:	428c      	cmp	r4, r1
  4058e4:	bf0d      	iteet	eq
  4058e6:	6863      	ldreq	r3, [r4, #4]
  4058e8:	684b      	ldrne	r3, [r1, #4]
  4058ea:	6063      	strne	r3, [r4, #4]
  4058ec:	6013      	streq	r3, [r2, #0]
  4058ee:	bf18      	it	ne
  4058f0:	460c      	movne	r4, r1
  4058f2:	e7e9      	b.n	4058c8 <_malloc_r+0x64>
  4058f4:	460c      	mov	r4, r1
  4058f6:	6849      	ldr	r1, [r1, #4]
  4058f8:	e7ca      	b.n	405890 <_malloc_r+0x2c>
  4058fa:	1cc4      	adds	r4, r0, #3
  4058fc:	f024 0403 	bic.w	r4, r4, #3
  405900:	42a0      	cmp	r0, r4
  405902:	d005      	beq.n	405910 <_malloc_r+0xac>
  405904:	1a21      	subs	r1, r4, r0
  405906:	4630      	mov	r0, r6
  405908:	f000 fc82 	bl	406210 <_sbrk_r>
  40590c:	3001      	adds	r0, #1
  40590e:	d0cd      	beq.n	4058ac <_malloc_r+0x48>
  405910:	6025      	str	r5, [r4, #0]
  405912:	e7d9      	b.n	4058c8 <_malloc_r+0x64>
  405914:	bd70      	pop	{r4, r5, r6, pc}
  405916:	bf00      	nop
  405918:	204005c0 	.word	0x204005c0
  40591c:	204005c4 	.word	0x204005c4

00405920 <__cvt>:
  405920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405924:	b088      	sub	sp, #32
  405926:	2b00      	cmp	r3, #0
  405928:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40592a:	9912      	ldr	r1, [sp, #72]	; 0x48
  40592c:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40592e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  405932:	461e      	mov	r6, r3
  405934:	f027 0720 	bic.w	r7, r7, #32
  405938:	bfbb      	ittet	lt
  40593a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  40593e:	461e      	movlt	r6, r3
  405940:	2300      	movge	r3, #0
  405942:	232d      	movlt	r3, #45	; 0x2d
  405944:	2f46      	cmp	r7, #70	; 0x46
  405946:	4614      	mov	r4, r2
  405948:	700b      	strb	r3, [r1, #0]
  40594a:	d004      	beq.n	405956 <__cvt+0x36>
  40594c:	2f45      	cmp	r7, #69	; 0x45
  40594e:	d100      	bne.n	405952 <__cvt+0x32>
  405950:	3501      	adds	r5, #1
  405952:	2302      	movs	r3, #2
  405954:	e000      	b.n	405958 <__cvt+0x38>
  405956:	2303      	movs	r3, #3
  405958:	aa07      	add	r2, sp, #28
  40595a:	9204      	str	r2, [sp, #16]
  40595c:	aa06      	add	r2, sp, #24
  40595e:	9203      	str	r2, [sp, #12]
  405960:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  405964:	4622      	mov	r2, r4
  405966:	4633      	mov	r3, r6
  405968:	f000 fdae 	bl	4064c8 <_dtoa_r>
  40596c:	2f47      	cmp	r7, #71	; 0x47
  40596e:	4680      	mov	r8, r0
  405970:	d102      	bne.n	405978 <__cvt+0x58>
  405972:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405974:	07db      	lsls	r3, r3, #31
  405976:	d526      	bpl.n	4059c6 <__cvt+0xa6>
  405978:	2f46      	cmp	r7, #70	; 0x46
  40597a:	eb08 0905 	add.w	r9, r8, r5
  40597e:	d111      	bne.n	4059a4 <__cvt+0x84>
  405980:	f898 3000 	ldrb.w	r3, [r8]
  405984:	2b30      	cmp	r3, #48	; 0x30
  405986:	d10a      	bne.n	40599e <__cvt+0x7e>
  405988:	2200      	movs	r2, #0
  40598a:	2300      	movs	r3, #0
  40598c:	4620      	mov	r0, r4
  40598e:	4631      	mov	r1, r6
  405990:	f7ff fe14 	bl	4055bc <__aeabi_dcmpeq>
  405994:	b918      	cbnz	r0, 40599e <__cvt+0x7e>
  405996:	f1c5 0501 	rsb	r5, r5, #1
  40599a:	f8ca 5000 	str.w	r5, [sl]
  40599e:	f8da 3000 	ldr.w	r3, [sl]
  4059a2:	4499      	add	r9, r3
  4059a4:	2200      	movs	r2, #0
  4059a6:	2300      	movs	r3, #0
  4059a8:	4620      	mov	r0, r4
  4059aa:	4631      	mov	r1, r6
  4059ac:	f7ff fe06 	bl	4055bc <__aeabi_dcmpeq>
  4059b0:	b938      	cbnz	r0, 4059c2 <__cvt+0xa2>
  4059b2:	2230      	movs	r2, #48	; 0x30
  4059b4:	9b07      	ldr	r3, [sp, #28]
  4059b6:	4599      	cmp	r9, r3
  4059b8:	d905      	bls.n	4059c6 <__cvt+0xa6>
  4059ba:	1c59      	adds	r1, r3, #1
  4059bc:	9107      	str	r1, [sp, #28]
  4059be:	701a      	strb	r2, [r3, #0]
  4059c0:	e7f8      	b.n	4059b4 <__cvt+0x94>
  4059c2:	f8cd 901c 	str.w	r9, [sp, #28]
  4059c6:	9b07      	ldr	r3, [sp, #28]
  4059c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4059ca:	eba3 0308 	sub.w	r3, r3, r8
  4059ce:	4640      	mov	r0, r8
  4059d0:	6013      	str	r3, [r2, #0]
  4059d2:	b008      	add	sp, #32
  4059d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004059d8 <__exponent>:
  4059d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  4059da:	4603      	mov	r3, r0
  4059dc:	2900      	cmp	r1, #0
  4059de:	bfb8      	it	lt
  4059e0:	4249      	neglt	r1, r1
  4059e2:	f803 2b02 	strb.w	r2, [r3], #2
  4059e6:	bfb4      	ite	lt
  4059e8:	222d      	movlt	r2, #45	; 0x2d
  4059ea:	222b      	movge	r2, #43	; 0x2b
  4059ec:	2909      	cmp	r1, #9
  4059ee:	7042      	strb	r2, [r0, #1]
  4059f0:	dd20      	ble.n	405a34 <__exponent+0x5c>
  4059f2:	f10d 0207 	add.w	r2, sp, #7
  4059f6:	4617      	mov	r7, r2
  4059f8:	260a      	movs	r6, #10
  4059fa:	fb91 f5f6 	sdiv	r5, r1, r6
  4059fe:	fb06 1115 	mls	r1, r6, r5, r1
  405a02:	3130      	adds	r1, #48	; 0x30
  405a04:	2d09      	cmp	r5, #9
  405a06:	f802 1c01 	strb.w	r1, [r2, #-1]
  405a0a:	f102 34ff 	add.w	r4, r2, #4294967295
  405a0e:	4629      	mov	r1, r5
  405a10:	dc09      	bgt.n	405a26 <__exponent+0x4e>
  405a12:	3130      	adds	r1, #48	; 0x30
  405a14:	3a02      	subs	r2, #2
  405a16:	f804 1c01 	strb.w	r1, [r4, #-1]
  405a1a:	42ba      	cmp	r2, r7
  405a1c:	461c      	mov	r4, r3
  405a1e:	d304      	bcc.n	405a2a <__exponent+0x52>
  405a20:	1a20      	subs	r0, r4, r0
  405a22:	b003      	add	sp, #12
  405a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405a26:	4622      	mov	r2, r4
  405a28:	e7e7      	b.n	4059fa <__exponent+0x22>
  405a2a:	f812 1b01 	ldrb.w	r1, [r2], #1
  405a2e:	f803 1b01 	strb.w	r1, [r3], #1
  405a32:	e7f2      	b.n	405a1a <__exponent+0x42>
  405a34:	2230      	movs	r2, #48	; 0x30
  405a36:	461c      	mov	r4, r3
  405a38:	4411      	add	r1, r2
  405a3a:	f804 2b02 	strb.w	r2, [r4], #2
  405a3e:	7059      	strb	r1, [r3, #1]
  405a40:	e7ee      	b.n	405a20 <__exponent+0x48>
	...

00405a44 <_printf_float>:
  405a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a48:	b091      	sub	sp, #68	; 0x44
  405a4a:	460c      	mov	r4, r1
  405a4c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  405a4e:	4693      	mov	fp, r2
  405a50:	461e      	mov	r6, r3
  405a52:	4605      	mov	r5, r0
  405a54:	f001 fc86 	bl	407364 <_localeconv_r>
  405a58:	6803      	ldr	r3, [r0, #0]
  405a5a:	9309      	str	r3, [sp, #36]	; 0x24
  405a5c:	4618      	mov	r0, r3
  405a5e:	f000 fc9d 	bl	40639c <strlen>
  405a62:	2300      	movs	r3, #0
  405a64:	930e      	str	r3, [sp, #56]	; 0x38
  405a66:	683b      	ldr	r3, [r7, #0]
  405a68:	900a      	str	r0, [sp, #40]	; 0x28
  405a6a:	3307      	adds	r3, #7
  405a6c:	f023 0307 	bic.w	r3, r3, #7
  405a70:	f103 0208 	add.w	r2, r3, #8
  405a74:	f894 8018 	ldrb.w	r8, [r4, #24]
  405a78:	f8d4 a000 	ldr.w	sl, [r4]
  405a7c:	603a      	str	r2, [r7, #0]
  405a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  405a86:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  405a8a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  405a8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  405a90:	930b      	str	r3, [sp, #44]	; 0x2c
  405a92:	f04f 32ff 	mov.w	r2, #4294967295
  405a96:	4ba6      	ldr	r3, [pc, #664]	; (405d30 <_printf_float+0x2ec>)
  405a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a9a:	4638      	mov	r0, r7
  405a9c:	f7ff fdc0 	bl	405620 <__aeabi_dcmpun>
  405aa0:	2800      	cmp	r0, #0
  405aa2:	f040 81f7 	bne.w	405e94 <_printf_float+0x450>
  405aa6:	f04f 32ff 	mov.w	r2, #4294967295
  405aaa:	4ba1      	ldr	r3, [pc, #644]	; (405d30 <_printf_float+0x2ec>)
  405aac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405aae:	4638      	mov	r0, r7
  405ab0:	f7ff fd98 	bl	4055e4 <__aeabi_dcmple>
  405ab4:	2800      	cmp	r0, #0
  405ab6:	f040 81ed 	bne.w	405e94 <_printf_float+0x450>
  405aba:	2200      	movs	r2, #0
  405abc:	2300      	movs	r3, #0
  405abe:	4638      	mov	r0, r7
  405ac0:	4649      	mov	r1, r9
  405ac2:	f7ff fd85 	bl	4055d0 <__aeabi_dcmplt>
  405ac6:	b110      	cbz	r0, 405ace <_printf_float+0x8a>
  405ac8:	232d      	movs	r3, #45	; 0x2d
  405aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  405ace:	4b99      	ldr	r3, [pc, #612]	; (405d34 <_printf_float+0x2f0>)
  405ad0:	4f99      	ldr	r7, [pc, #612]	; (405d38 <_printf_float+0x2f4>)
  405ad2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  405ad6:	bf98      	it	ls
  405ad8:	461f      	movls	r7, r3
  405ada:	2303      	movs	r3, #3
  405adc:	6123      	str	r3, [r4, #16]
  405ade:	f02a 0304 	bic.w	r3, sl, #4
  405ae2:	6023      	str	r3, [r4, #0]
  405ae4:	f04f 0900 	mov.w	r9, #0
  405ae8:	9600      	str	r6, [sp, #0]
  405aea:	465b      	mov	r3, fp
  405aec:	aa0f      	add	r2, sp, #60	; 0x3c
  405aee:	4621      	mov	r1, r4
  405af0:	4628      	mov	r0, r5
  405af2:	f000 f9df 	bl	405eb4 <_printf_common>
  405af6:	3001      	adds	r0, #1
  405af8:	f040 809a 	bne.w	405c30 <_printf_float+0x1ec>
  405afc:	f04f 30ff 	mov.w	r0, #4294967295
  405b00:	b011      	add	sp, #68	; 0x44
  405b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b06:	6862      	ldr	r2, [r4, #4]
  405b08:	1c53      	adds	r3, r2, #1
  405b0a:	a80e      	add	r0, sp, #56	; 0x38
  405b0c:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  405b10:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  405b14:	d141      	bne.n	405b9a <_printf_float+0x156>
  405b16:	2206      	movs	r2, #6
  405b18:	6062      	str	r2, [r4, #4]
  405b1a:	6023      	str	r3, [r4, #0]
  405b1c:	2100      	movs	r1, #0
  405b1e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  405b22:	9301      	str	r3, [sp, #4]
  405b24:	6863      	ldr	r3, [r4, #4]
  405b26:	9005      	str	r0, [sp, #20]
  405b28:	9202      	str	r2, [sp, #8]
  405b2a:	9300      	str	r3, [sp, #0]
  405b2c:	463a      	mov	r2, r7
  405b2e:	464b      	mov	r3, r9
  405b30:	9106      	str	r1, [sp, #24]
  405b32:	f8cd 8010 	str.w	r8, [sp, #16]
  405b36:	f8cd e00c 	str.w	lr, [sp, #12]
  405b3a:	4628      	mov	r0, r5
  405b3c:	f7ff fef0 	bl	405920 <__cvt>
  405b40:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  405b44:	2b47      	cmp	r3, #71	; 0x47
  405b46:	4607      	mov	r7, r0
  405b48:	d109      	bne.n	405b5e <_printf_float+0x11a>
  405b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405b4c:	1cd8      	adds	r0, r3, #3
  405b4e:	db02      	blt.n	405b56 <_printf_float+0x112>
  405b50:	6862      	ldr	r2, [r4, #4]
  405b52:	4293      	cmp	r3, r2
  405b54:	dd59      	ble.n	405c0a <_printf_float+0x1c6>
  405b56:	f1a8 0802 	sub.w	r8, r8, #2
  405b5a:	fa5f f888 	uxtb.w	r8, r8
  405b5e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  405b62:	990d      	ldr	r1, [sp, #52]	; 0x34
  405b64:	d836      	bhi.n	405bd4 <_printf_float+0x190>
  405b66:	3901      	subs	r1, #1
  405b68:	4642      	mov	r2, r8
  405b6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
  405b6e:	910d      	str	r1, [sp, #52]	; 0x34
  405b70:	f7ff ff32 	bl	4059d8 <__exponent>
  405b74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405b76:	1883      	adds	r3, r0, r2
  405b78:	2a01      	cmp	r2, #1
  405b7a:	4681      	mov	r9, r0
  405b7c:	6123      	str	r3, [r4, #16]
  405b7e:	dc02      	bgt.n	405b86 <_printf_float+0x142>
  405b80:	6822      	ldr	r2, [r4, #0]
  405b82:	07d1      	lsls	r1, r2, #31
  405b84:	d501      	bpl.n	405b8a <_printf_float+0x146>
  405b86:	3301      	adds	r3, #1
  405b88:	6123      	str	r3, [r4, #16]
  405b8a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  405b8e:	2b00      	cmp	r3, #0
  405b90:	d0aa      	beq.n	405ae8 <_printf_float+0xa4>
  405b92:	232d      	movs	r3, #45	; 0x2d
  405b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  405b98:	e7a6      	b.n	405ae8 <_printf_float+0xa4>
  405b9a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  405b9e:	d002      	beq.n	405ba6 <_printf_float+0x162>
  405ba0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  405ba4:	d1b9      	bne.n	405b1a <_printf_float+0xd6>
  405ba6:	b19a      	cbz	r2, 405bd0 <_printf_float+0x18c>
  405ba8:	2100      	movs	r1, #0
  405baa:	9106      	str	r1, [sp, #24]
  405bac:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  405bb0:	e88d 000c 	stmia.w	sp, {r2, r3}
  405bb4:	6023      	str	r3, [r4, #0]
  405bb6:	9005      	str	r0, [sp, #20]
  405bb8:	463a      	mov	r2, r7
  405bba:	f8cd 8010 	str.w	r8, [sp, #16]
  405bbe:	f8cd e00c 	str.w	lr, [sp, #12]
  405bc2:	9102      	str	r1, [sp, #8]
  405bc4:	464b      	mov	r3, r9
  405bc6:	4628      	mov	r0, r5
  405bc8:	f7ff feaa 	bl	405920 <__cvt>
  405bcc:	4607      	mov	r7, r0
  405bce:	e7bc      	b.n	405b4a <_printf_float+0x106>
  405bd0:	2201      	movs	r2, #1
  405bd2:	e7a1      	b.n	405b18 <_printf_float+0xd4>
  405bd4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  405bd8:	d119      	bne.n	405c0e <_printf_float+0x1ca>
  405bda:	2900      	cmp	r1, #0
  405bdc:	6863      	ldr	r3, [r4, #4]
  405bde:	dd0c      	ble.n	405bfa <_printf_float+0x1b6>
  405be0:	6121      	str	r1, [r4, #16]
  405be2:	b913      	cbnz	r3, 405bea <_printf_float+0x1a6>
  405be4:	6822      	ldr	r2, [r4, #0]
  405be6:	07d2      	lsls	r2, r2, #31
  405be8:	d502      	bpl.n	405bf0 <_printf_float+0x1ac>
  405bea:	3301      	adds	r3, #1
  405bec:	440b      	add	r3, r1
  405bee:	6123      	str	r3, [r4, #16]
  405bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405bf2:	65a3      	str	r3, [r4, #88]	; 0x58
  405bf4:	f04f 0900 	mov.w	r9, #0
  405bf8:	e7c7      	b.n	405b8a <_printf_float+0x146>
  405bfa:	b913      	cbnz	r3, 405c02 <_printf_float+0x1be>
  405bfc:	6822      	ldr	r2, [r4, #0]
  405bfe:	07d0      	lsls	r0, r2, #31
  405c00:	d501      	bpl.n	405c06 <_printf_float+0x1c2>
  405c02:	3302      	adds	r3, #2
  405c04:	e7f3      	b.n	405bee <_printf_float+0x1aa>
  405c06:	2301      	movs	r3, #1
  405c08:	e7f1      	b.n	405bee <_printf_float+0x1aa>
  405c0a:	f04f 0867 	mov.w	r8, #103	; 0x67
  405c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405c10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405c12:	4293      	cmp	r3, r2
  405c14:	db05      	blt.n	405c22 <_printf_float+0x1de>
  405c16:	6822      	ldr	r2, [r4, #0]
  405c18:	6123      	str	r3, [r4, #16]
  405c1a:	07d1      	lsls	r1, r2, #31
  405c1c:	d5e8      	bpl.n	405bf0 <_printf_float+0x1ac>
  405c1e:	3301      	adds	r3, #1
  405c20:	e7e5      	b.n	405bee <_printf_float+0x1aa>
  405c22:	2b00      	cmp	r3, #0
  405c24:	bfd4      	ite	le
  405c26:	f1c3 0302 	rsble	r3, r3, #2
  405c2a:	2301      	movgt	r3, #1
  405c2c:	4413      	add	r3, r2
  405c2e:	e7de      	b.n	405bee <_printf_float+0x1aa>
  405c30:	6823      	ldr	r3, [r4, #0]
  405c32:	055a      	lsls	r2, r3, #21
  405c34:	d407      	bmi.n	405c46 <_printf_float+0x202>
  405c36:	6923      	ldr	r3, [r4, #16]
  405c38:	463a      	mov	r2, r7
  405c3a:	4659      	mov	r1, fp
  405c3c:	4628      	mov	r0, r5
  405c3e:	47b0      	blx	r6
  405c40:	3001      	adds	r0, #1
  405c42:	d12a      	bne.n	405c9a <_printf_float+0x256>
  405c44:	e75a      	b.n	405afc <_printf_float+0xb8>
  405c46:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  405c4a:	f240 80dc 	bls.w	405e06 <_printf_float+0x3c2>
  405c4e:	2200      	movs	r2, #0
  405c50:	2300      	movs	r3, #0
  405c52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  405c56:	f7ff fcb1 	bl	4055bc <__aeabi_dcmpeq>
  405c5a:	2800      	cmp	r0, #0
  405c5c:	d039      	beq.n	405cd2 <_printf_float+0x28e>
  405c5e:	2301      	movs	r3, #1
  405c60:	4a36      	ldr	r2, [pc, #216]	; (405d3c <_printf_float+0x2f8>)
  405c62:	4659      	mov	r1, fp
  405c64:	4628      	mov	r0, r5
  405c66:	47b0      	blx	r6
  405c68:	3001      	adds	r0, #1
  405c6a:	f43f af47 	beq.w	405afc <_printf_float+0xb8>
  405c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405c70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405c72:	429a      	cmp	r2, r3
  405c74:	db02      	blt.n	405c7c <_printf_float+0x238>
  405c76:	6823      	ldr	r3, [r4, #0]
  405c78:	07d8      	lsls	r0, r3, #31
  405c7a:	d50e      	bpl.n	405c9a <_printf_float+0x256>
  405c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405c80:	4659      	mov	r1, fp
  405c82:	4628      	mov	r0, r5
  405c84:	47b0      	blx	r6
  405c86:	3001      	adds	r0, #1
  405c88:	f43f af38 	beq.w	405afc <_printf_float+0xb8>
  405c8c:	2700      	movs	r7, #0
  405c8e:	f104 081a 	add.w	r8, r4, #26
  405c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405c94:	3b01      	subs	r3, #1
  405c96:	429f      	cmp	r7, r3
  405c98:	db11      	blt.n	405cbe <_printf_float+0x27a>
  405c9a:	6823      	ldr	r3, [r4, #0]
  405c9c:	079f      	lsls	r7, r3, #30
  405c9e:	d508      	bpl.n	405cb2 <_printf_float+0x26e>
  405ca0:	2700      	movs	r7, #0
  405ca2:	f104 0819 	add.w	r8, r4, #25
  405ca6:	68e3      	ldr	r3, [r4, #12]
  405ca8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405caa:	1a9b      	subs	r3, r3, r2
  405cac:	429f      	cmp	r7, r3
  405cae:	f2c0 80e7 	blt.w	405e80 <_printf_float+0x43c>
  405cb2:	68e0      	ldr	r0, [r4, #12]
  405cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405cb6:	4298      	cmp	r0, r3
  405cb8:	bfb8      	it	lt
  405cba:	4618      	movlt	r0, r3
  405cbc:	e720      	b.n	405b00 <_printf_float+0xbc>
  405cbe:	2301      	movs	r3, #1
  405cc0:	4642      	mov	r2, r8
  405cc2:	4659      	mov	r1, fp
  405cc4:	4628      	mov	r0, r5
  405cc6:	47b0      	blx	r6
  405cc8:	3001      	adds	r0, #1
  405cca:	f43f af17 	beq.w	405afc <_printf_float+0xb8>
  405cce:	3701      	adds	r7, #1
  405cd0:	e7df      	b.n	405c92 <_printf_float+0x24e>
  405cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405cd4:	2b00      	cmp	r3, #0
  405cd6:	dc33      	bgt.n	405d40 <_printf_float+0x2fc>
  405cd8:	2301      	movs	r3, #1
  405cda:	4a18      	ldr	r2, [pc, #96]	; (405d3c <_printf_float+0x2f8>)
  405cdc:	4659      	mov	r1, fp
  405cde:	4628      	mov	r0, r5
  405ce0:	47b0      	blx	r6
  405ce2:	3001      	adds	r0, #1
  405ce4:	f43f af0a 	beq.w	405afc <_printf_float+0xb8>
  405ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405cea:	b923      	cbnz	r3, 405cf6 <_printf_float+0x2b2>
  405cec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405cee:	b913      	cbnz	r3, 405cf6 <_printf_float+0x2b2>
  405cf0:	6823      	ldr	r3, [r4, #0]
  405cf2:	07d9      	lsls	r1, r3, #31
  405cf4:	d5d1      	bpl.n	405c9a <_printf_float+0x256>
  405cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405cfa:	4659      	mov	r1, fp
  405cfc:	4628      	mov	r0, r5
  405cfe:	47b0      	blx	r6
  405d00:	3001      	adds	r0, #1
  405d02:	f43f aefb 	beq.w	405afc <_printf_float+0xb8>
  405d06:	f04f 0800 	mov.w	r8, #0
  405d0a:	f104 091a 	add.w	r9, r4, #26
  405d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405d10:	425b      	negs	r3, r3
  405d12:	4598      	cmp	r8, r3
  405d14:	db01      	blt.n	405d1a <_printf_float+0x2d6>
  405d16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405d18:	e78e      	b.n	405c38 <_printf_float+0x1f4>
  405d1a:	2301      	movs	r3, #1
  405d1c:	464a      	mov	r2, r9
  405d1e:	4659      	mov	r1, fp
  405d20:	4628      	mov	r0, r5
  405d22:	47b0      	blx	r6
  405d24:	3001      	adds	r0, #1
  405d26:	f43f aee9 	beq.w	405afc <_printf_float+0xb8>
  405d2a:	f108 0801 	add.w	r8, r8, #1
  405d2e:	e7ee      	b.n	405d0e <_printf_float+0x2ca>
  405d30:	7fefffff 	.word	0x7fefffff
  405d34:	0040861c 	.word	0x0040861c
  405d38:	00408620 	.word	0x00408620
  405d3c:	0040862c 	.word	0x0040862c
  405d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405d42:	6da3      	ldr	r3, [r4, #88]	; 0x58
  405d44:	429a      	cmp	r2, r3
  405d46:	bfa8      	it	ge
  405d48:	461a      	movge	r2, r3
  405d4a:	2a00      	cmp	r2, #0
  405d4c:	4690      	mov	r8, r2
  405d4e:	dc36      	bgt.n	405dbe <_printf_float+0x37a>
  405d50:	f104 031a 	add.w	r3, r4, #26
  405d54:	f04f 0a00 	mov.w	sl, #0
  405d58:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  405d5c:	930b      	str	r3, [sp, #44]	; 0x2c
  405d5e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  405d62:	eba9 0308 	sub.w	r3, r9, r8
  405d66:	459a      	cmp	sl, r3
  405d68:	db31      	blt.n	405dce <_printf_float+0x38a>
  405d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405d6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405d6e:	429a      	cmp	r2, r3
  405d70:	db38      	blt.n	405de4 <_printf_float+0x3a0>
  405d72:	6823      	ldr	r3, [r4, #0]
  405d74:	07da      	lsls	r2, r3, #31
  405d76:	d435      	bmi.n	405de4 <_printf_float+0x3a0>
  405d78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405d7a:	990d      	ldr	r1, [sp, #52]	; 0x34
  405d7c:	eba3 0209 	sub.w	r2, r3, r9
  405d80:	eba3 0801 	sub.w	r8, r3, r1
  405d84:	4590      	cmp	r8, r2
  405d86:	bfa8      	it	ge
  405d88:	4690      	movge	r8, r2
  405d8a:	f1b8 0f00 	cmp.w	r8, #0
  405d8e:	dc31      	bgt.n	405df4 <_printf_float+0x3b0>
  405d90:	2700      	movs	r7, #0
  405d92:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  405d96:	f104 091a 	add.w	r9, r4, #26
  405d9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405d9e:	1a9b      	subs	r3, r3, r2
  405da0:	eba3 0308 	sub.w	r3, r3, r8
  405da4:	429f      	cmp	r7, r3
  405da6:	f6bf af78 	bge.w	405c9a <_printf_float+0x256>
  405daa:	2301      	movs	r3, #1
  405dac:	464a      	mov	r2, r9
  405dae:	4659      	mov	r1, fp
  405db0:	4628      	mov	r0, r5
  405db2:	47b0      	blx	r6
  405db4:	3001      	adds	r0, #1
  405db6:	f43f aea1 	beq.w	405afc <_printf_float+0xb8>
  405dba:	3701      	adds	r7, #1
  405dbc:	e7ed      	b.n	405d9a <_printf_float+0x356>
  405dbe:	4613      	mov	r3, r2
  405dc0:	4659      	mov	r1, fp
  405dc2:	463a      	mov	r2, r7
  405dc4:	4628      	mov	r0, r5
  405dc6:	47b0      	blx	r6
  405dc8:	3001      	adds	r0, #1
  405dca:	d1c1      	bne.n	405d50 <_printf_float+0x30c>
  405dcc:	e696      	b.n	405afc <_printf_float+0xb8>
  405dce:	2301      	movs	r3, #1
  405dd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405dd2:	4659      	mov	r1, fp
  405dd4:	4628      	mov	r0, r5
  405dd6:	47b0      	blx	r6
  405dd8:	3001      	adds	r0, #1
  405dda:	f43f ae8f 	beq.w	405afc <_printf_float+0xb8>
  405dde:	f10a 0a01 	add.w	sl, sl, #1
  405de2:	e7bc      	b.n	405d5e <_printf_float+0x31a>
  405de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405de8:	4659      	mov	r1, fp
  405dea:	4628      	mov	r0, r5
  405dec:	47b0      	blx	r6
  405dee:	3001      	adds	r0, #1
  405df0:	d1c2      	bne.n	405d78 <_printf_float+0x334>
  405df2:	e683      	b.n	405afc <_printf_float+0xb8>
  405df4:	4643      	mov	r3, r8
  405df6:	eb07 0209 	add.w	r2, r7, r9
  405dfa:	4659      	mov	r1, fp
  405dfc:	4628      	mov	r0, r5
  405dfe:	47b0      	blx	r6
  405e00:	3001      	adds	r0, #1
  405e02:	d1c5      	bne.n	405d90 <_printf_float+0x34c>
  405e04:	e67a      	b.n	405afc <_printf_float+0xb8>
  405e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405e08:	2a01      	cmp	r2, #1
  405e0a:	dc01      	bgt.n	405e10 <_printf_float+0x3cc>
  405e0c:	07db      	lsls	r3, r3, #31
  405e0e:	d534      	bpl.n	405e7a <_printf_float+0x436>
  405e10:	2301      	movs	r3, #1
  405e12:	463a      	mov	r2, r7
  405e14:	4659      	mov	r1, fp
  405e16:	4628      	mov	r0, r5
  405e18:	47b0      	blx	r6
  405e1a:	3001      	adds	r0, #1
  405e1c:	f43f ae6e 	beq.w	405afc <_printf_float+0xb8>
  405e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405e24:	4659      	mov	r1, fp
  405e26:	4628      	mov	r0, r5
  405e28:	47b0      	blx	r6
  405e2a:	3001      	adds	r0, #1
  405e2c:	f43f ae66 	beq.w	405afc <_printf_float+0xb8>
  405e30:	2200      	movs	r2, #0
  405e32:	2300      	movs	r3, #0
  405e34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  405e38:	f7ff fbc0 	bl	4055bc <__aeabi_dcmpeq>
  405e3c:	b150      	cbz	r0, 405e54 <_printf_float+0x410>
  405e3e:	2700      	movs	r7, #0
  405e40:	f104 081a 	add.w	r8, r4, #26
  405e44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405e46:	3b01      	subs	r3, #1
  405e48:	429f      	cmp	r7, r3
  405e4a:	db0c      	blt.n	405e66 <_printf_float+0x422>
  405e4c:	464b      	mov	r3, r9
  405e4e:	f104 0250 	add.w	r2, r4, #80	; 0x50
  405e52:	e6f2      	b.n	405c3a <_printf_float+0x1f6>
  405e54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405e56:	1c7a      	adds	r2, r7, #1
  405e58:	3b01      	subs	r3, #1
  405e5a:	4659      	mov	r1, fp
  405e5c:	4628      	mov	r0, r5
  405e5e:	47b0      	blx	r6
  405e60:	3001      	adds	r0, #1
  405e62:	d1f3      	bne.n	405e4c <_printf_float+0x408>
  405e64:	e64a      	b.n	405afc <_printf_float+0xb8>
  405e66:	2301      	movs	r3, #1
  405e68:	4642      	mov	r2, r8
  405e6a:	4659      	mov	r1, fp
  405e6c:	4628      	mov	r0, r5
  405e6e:	47b0      	blx	r6
  405e70:	3001      	adds	r0, #1
  405e72:	f43f ae43 	beq.w	405afc <_printf_float+0xb8>
  405e76:	3701      	adds	r7, #1
  405e78:	e7e4      	b.n	405e44 <_printf_float+0x400>
  405e7a:	2301      	movs	r3, #1
  405e7c:	463a      	mov	r2, r7
  405e7e:	e7ec      	b.n	405e5a <_printf_float+0x416>
  405e80:	2301      	movs	r3, #1
  405e82:	4642      	mov	r2, r8
  405e84:	4659      	mov	r1, fp
  405e86:	4628      	mov	r0, r5
  405e88:	47b0      	blx	r6
  405e8a:	3001      	adds	r0, #1
  405e8c:	f43f ae36 	beq.w	405afc <_printf_float+0xb8>
  405e90:	3701      	adds	r7, #1
  405e92:	e708      	b.n	405ca6 <_printf_float+0x262>
  405e94:	463a      	mov	r2, r7
  405e96:	464b      	mov	r3, r9
  405e98:	4638      	mov	r0, r7
  405e9a:	4649      	mov	r1, r9
  405e9c:	f7ff fbc0 	bl	405620 <__aeabi_dcmpun>
  405ea0:	2800      	cmp	r0, #0
  405ea2:	f43f ae30 	beq.w	405b06 <_printf_float+0xc2>
  405ea6:	4b01      	ldr	r3, [pc, #4]	; (405eac <_printf_float+0x468>)
  405ea8:	4f01      	ldr	r7, [pc, #4]	; (405eb0 <_printf_float+0x46c>)
  405eaa:	e612      	b.n	405ad2 <_printf_float+0x8e>
  405eac:	00408624 	.word	0x00408624
  405eb0:	00408628 	.word	0x00408628

00405eb4 <_printf_common>:
  405eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405eb8:	4691      	mov	r9, r2
  405eba:	461f      	mov	r7, r3
  405ebc:	688a      	ldr	r2, [r1, #8]
  405ebe:	690b      	ldr	r3, [r1, #16]
  405ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  405ec4:	4293      	cmp	r3, r2
  405ec6:	bfb8      	it	lt
  405ec8:	4613      	movlt	r3, r2
  405eca:	f8c9 3000 	str.w	r3, [r9]
  405ece:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  405ed2:	4606      	mov	r6, r0
  405ed4:	460c      	mov	r4, r1
  405ed6:	b112      	cbz	r2, 405ede <_printf_common+0x2a>
  405ed8:	3301      	adds	r3, #1
  405eda:	f8c9 3000 	str.w	r3, [r9]
  405ede:	6823      	ldr	r3, [r4, #0]
  405ee0:	0699      	lsls	r1, r3, #26
  405ee2:	bf42      	ittt	mi
  405ee4:	f8d9 3000 	ldrmi.w	r3, [r9]
  405ee8:	3302      	addmi	r3, #2
  405eea:	f8c9 3000 	strmi.w	r3, [r9]
  405eee:	6825      	ldr	r5, [r4, #0]
  405ef0:	f015 0506 	ands.w	r5, r5, #6
  405ef4:	d107      	bne.n	405f06 <_printf_common+0x52>
  405ef6:	f104 0a19 	add.w	sl, r4, #25
  405efa:	68e3      	ldr	r3, [r4, #12]
  405efc:	f8d9 2000 	ldr.w	r2, [r9]
  405f00:	1a9b      	subs	r3, r3, r2
  405f02:	429d      	cmp	r5, r3
  405f04:	db29      	blt.n	405f5a <_printf_common+0xa6>
  405f06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  405f0a:	6822      	ldr	r2, [r4, #0]
  405f0c:	3300      	adds	r3, #0
  405f0e:	bf18      	it	ne
  405f10:	2301      	movne	r3, #1
  405f12:	0692      	lsls	r2, r2, #26
  405f14:	d42e      	bmi.n	405f74 <_printf_common+0xc0>
  405f16:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405f1a:	4639      	mov	r1, r7
  405f1c:	4630      	mov	r0, r6
  405f1e:	47c0      	blx	r8
  405f20:	3001      	adds	r0, #1
  405f22:	d021      	beq.n	405f68 <_printf_common+0xb4>
  405f24:	6823      	ldr	r3, [r4, #0]
  405f26:	68e5      	ldr	r5, [r4, #12]
  405f28:	f8d9 2000 	ldr.w	r2, [r9]
  405f2c:	f003 0306 	and.w	r3, r3, #6
  405f30:	2b04      	cmp	r3, #4
  405f32:	bf08      	it	eq
  405f34:	1aad      	subeq	r5, r5, r2
  405f36:	68a3      	ldr	r3, [r4, #8]
  405f38:	6922      	ldr	r2, [r4, #16]
  405f3a:	bf0c      	ite	eq
  405f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  405f40:	2500      	movne	r5, #0
  405f42:	4293      	cmp	r3, r2
  405f44:	bfc4      	itt	gt
  405f46:	1a9b      	subgt	r3, r3, r2
  405f48:	18ed      	addgt	r5, r5, r3
  405f4a:	f04f 0900 	mov.w	r9, #0
  405f4e:	341a      	adds	r4, #26
  405f50:	454d      	cmp	r5, r9
  405f52:	d11b      	bne.n	405f8c <_printf_common+0xd8>
  405f54:	2000      	movs	r0, #0
  405f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405f5a:	2301      	movs	r3, #1
  405f5c:	4652      	mov	r2, sl
  405f5e:	4639      	mov	r1, r7
  405f60:	4630      	mov	r0, r6
  405f62:	47c0      	blx	r8
  405f64:	3001      	adds	r0, #1
  405f66:	d103      	bne.n	405f70 <_printf_common+0xbc>
  405f68:	f04f 30ff 	mov.w	r0, #4294967295
  405f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405f70:	3501      	adds	r5, #1
  405f72:	e7c2      	b.n	405efa <_printf_common+0x46>
  405f74:	18e1      	adds	r1, r4, r3
  405f76:	1c5a      	adds	r2, r3, #1
  405f78:	2030      	movs	r0, #48	; 0x30
  405f7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  405f7e:	4422      	add	r2, r4
  405f80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  405f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  405f88:	3302      	adds	r3, #2
  405f8a:	e7c4      	b.n	405f16 <_printf_common+0x62>
  405f8c:	2301      	movs	r3, #1
  405f8e:	4622      	mov	r2, r4
  405f90:	4639      	mov	r1, r7
  405f92:	4630      	mov	r0, r6
  405f94:	47c0      	blx	r8
  405f96:	3001      	adds	r0, #1
  405f98:	d0e6      	beq.n	405f68 <_printf_common+0xb4>
  405f9a:	f109 0901 	add.w	r9, r9, #1
  405f9e:	e7d7      	b.n	405f50 <_printf_common+0x9c>

00405fa0 <_printf_i>:
  405fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405fa4:	4617      	mov	r7, r2
  405fa6:	7e0a      	ldrb	r2, [r1, #24]
  405fa8:	b085      	sub	sp, #20
  405faa:	2a6e      	cmp	r2, #110	; 0x6e
  405fac:	4698      	mov	r8, r3
  405fae:	4606      	mov	r6, r0
  405fb0:	460c      	mov	r4, r1
  405fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405fb4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  405fb8:	f000 80bc 	beq.w	406134 <_printf_i+0x194>
  405fbc:	d81a      	bhi.n	405ff4 <_printf_i+0x54>
  405fbe:	2a63      	cmp	r2, #99	; 0x63
  405fc0:	d02e      	beq.n	406020 <_printf_i+0x80>
  405fc2:	d80a      	bhi.n	405fda <_printf_i+0x3a>
  405fc4:	2a00      	cmp	r2, #0
  405fc6:	f000 80c8 	beq.w	40615a <_printf_i+0x1ba>
  405fca:	2a58      	cmp	r2, #88	; 0x58
  405fcc:	f000 808a 	beq.w	4060e4 <_printf_i+0x144>
  405fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
  405fd4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  405fd8:	e02a      	b.n	406030 <_printf_i+0x90>
  405fda:	2a64      	cmp	r2, #100	; 0x64
  405fdc:	d001      	beq.n	405fe2 <_printf_i+0x42>
  405fde:	2a69      	cmp	r2, #105	; 0x69
  405fe0:	d1f6      	bne.n	405fd0 <_printf_i+0x30>
  405fe2:	6821      	ldr	r1, [r4, #0]
  405fe4:	681a      	ldr	r2, [r3, #0]
  405fe6:	f011 0f80 	tst.w	r1, #128	; 0x80
  405fea:	d023      	beq.n	406034 <_printf_i+0x94>
  405fec:	1d11      	adds	r1, r2, #4
  405fee:	6019      	str	r1, [r3, #0]
  405ff0:	6813      	ldr	r3, [r2, #0]
  405ff2:	e027      	b.n	406044 <_printf_i+0xa4>
  405ff4:	2a73      	cmp	r2, #115	; 0x73
  405ff6:	f000 80b4 	beq.w	406162 <_printf_i+0x1c2>
  405ffa:	d808      	bhi.n	40600e <_printf_i+0x6e>
  405ffc:	2a6f      	cmp	r2, #111	; 0x6f
  405ffe:	d02a      	beq.n	406056 <_printf_i+0xb6>
  406000:	2a70      	cmp	r2, #112	; 0x70
  406002:	d1e5      	bne.n	405fd0 <_printf_i+0x30>
  406004:	680a      	ldr	r2, [r1, #0]
  406006:	f042 0220 	orr.w	r2, r2, #32
  40600a:	600a      	str	r2, [r1, #0]
  40600c:	e003      	b.n	406016 <_printf_i+0x76>
  40600e:	2a75      	cmp	r2, #117	; 0x75
  406010:	d021      	beq.n	406056 <_printf_i+0xb6>
  406012:	2a78      	cmp	r2, #120	; 0x78
  406014:	d1dc      	bne.n	405fd0 <_printf_i+0x30>
  406016:	2278      	movs	r2, #120	; 0x78
  406018:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  40601c:	496e      	ldr	r1, [pc, #440]	; (4061d8 <_printf_i+0x238>)
  40601e:	e064      	b.n	4060ea <_printf_i+0x14a>
  406020:	681a      	ldr	r2, [r3, #0]
  406022:	f101 0542 	add.w	r5, r1, #66	; 0x42
  406026:	1d11      	adds	r1, r2, #4
  406028:	6019      	str	r1, [r3, #0]
  40602a:	6813      	ldr	r3, [r2, #0]
  40602c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  406030:	2301      	movs	r3, #1
  406032:	e0a3      	b.n	40617c <_printf_i+0x1dc>
  406034:	f011 0f40 	tst.w	r1, #64	; 0x40
  406038:	f102 0104 	add.w	r1, r2, #4
  40603c:	6019      	str	r1, [r3, #0]
  40603e:	d0d7      	beq.n	405ff0 <_printf_i+0x50>
  406040:	f9b2 3000 	ldrsh.w	r3, [r2]
  406044:	2b00      	cmp	r3, #0
  406046:	da03      	bge.n	406050 <_printf_i+0xb0>
  406048:	222d      	movs	r2, #45	; 0x2d
  40604a:	425b      	negs	r3, r3
  40604c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  406050:	4962      	ldr	r1, [pc, #392]	; (4061dc <_printf_i+0x23c>)
  406052:	220a      	movs	r2, #10
  406054:	e017      	b.n	406086 <_printf_i+0xe6>
  406056:	6820      	ldr	r0, [r4, #0]
  406058:	6819      	ldr	r1, [r3, #0]
  40605a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40605e:	d003      	beq.n	406068 <_printf_i+0xc8>
  406060:	1d08      	adds	r0, r1, #4
  406062:	6018      	str	r0, [r3, #0]
  406064:	680b      	ldr	r3, [r1, #0]
  406066:	e006      	b.n	406076 <_printf_i+0xd6>
  406068:	f010 0f40 	tst.w	r0, #64	; 0x40
  40606c:	f101 0004 	add.w	r0, r1, #4
  406070:	6018      	str	r0, [r3, #0]
  406072:	d0f7      	beq.n	406064 <_printf_i+0xc4>
  406074:	880b      	ldrh	r3, [r1, #0]
  406076:	4959      	ldr	r1, [pc, #356]	; (4061dc <_printf_i+0x23c>)
  406078:	2a6f      	cmp	r2, #111	; 0x6f
  40607a:	bf14      	ite	ne
  40607c:	220a      	movne	r2, #10
  40607e:	2208      	moveq	r2, #8
  406080:	2000      	movs	r0, #0
  406082:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  406086:	6865      	ldr	r5, [r4, #4]
  406088:	60a5      	str	r5, [r4, #8]
  40608a:	2d00      	cmp	r5, #0
  40608c:	f2c0 809c 	blt.w	4061c8 <_printf_i+0x228>
  406090:	6820      	ldr	r0, [r4, #0]
  406092:	f020 0004 	bic.w	r0, r0, #4
  406096:	6020      	str	r0, [r4, #0]
  406098:	2b00      	cmp	r3, #0
  40609a:	d13f      	bne.n	40611c <_printf_i+0x17c>
  40609c:	2d00      	cmp	r5, #0
  40609e:	f040 8095 	bne.w	4061cc <_printf_i+0x22c>
  4060a2:	4675      	mov	r5, lr
  4060a4:	2a08      	cmp	r2, #8
  4060a6:	d10b      	bne.n	4060c0 <_printf_i+0x120>
  4060a8:	6823      	ldr	r3, [r4, #0]
  4060aa:	07da      	lsls	r2, r3, #31
  4060ac:	d508      	bpl.n	4060c0 <_printf_i+0x120>
  4060ae:	6923      	ldr	r3, [r4, #16]
  4060b0:	6862      	ldr	r2, [r4, #4]
  4060b2:	429a      	cmp	r2, r3
  4060b4:	bfde      	ittt	le
  4060b6:	2330      	movle	r3, #48	; 0x30
  4060b8:	f805 3c01 	strble.w	r3, [r5, #-1]
  4060bc:	f105 35ff 	addle.w	r5, r5, #4294967295
  4060c0:	ebae 0305 	sub.w	r3, lr, r5
  4060c4:	6123      	str	r3, [r4, #16]
  4060c6:	f8cd 8000 	str.w	r8, [sp]
  4060ca:	463b      	mov	r3, r7
  4060cc:	aa03      	add	r2, sp, #12
  4060ce:	4621      	mov	r1, r4
  4060d0:	4630      	mov	r0, r6
  4060d2:	f7ff feef 	bl	405eb4 <_printf_common>
  4060d6:	3001      	adds	r0, #1
  4060d8:	d155      	bne.n	406186 <_printf_i+0x1e6>
  4060da:	f04f 30ff 	mov.w	r0, #4294967295
  4060de:	b005      	add	sp, #20
  4060e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4060e4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  4060e8:	493c      	ldr	r1, [pc, #240]	; (4061dc <_printf_i+0x23c>)
  4060ea:	6822      	ldr	r2, [r4, #0]
  4060ec:	6818      	ldr	r0, [r3, #0]
  4060ee:	f012 0f80 	tst.w	r2, #128	; 0x80
  4060f2:	f100 0504 	add.w	r5, r0, #4
  4060f6:	601d      	str	r5, [r3, #0]
  4060f8:	d001      	beq.n	4060fe <_printf_i+0x15e>
  4060fa:	6803      	ldr	r3, [r0, #0]
  4060fc:	e002      	b.n	406104 <_printf_i+0x164>
  4060fe:	0655      	lsls	r5, r2, #25
  406100:	d5fb      	bpl.n	4060fa <_printf_i+0x15a>
  406102:	8803      	ldrh	r3, [r0, #0]
  406104:	07d0      	lsls	r0, r2, #31
  406106:	bf44      	itt	mi
  406108:	f042 0220 	orrmi.w	r2, r2, #32
  40610c:	6022      	strmi	r2, [r4, #0]
  40610e:	b91b      	cbnz	r3, 406118 <_printf_i+0x178>
  406110:	6822      	ldr	r2, [r4, #0]
  406112:	f022 0220 	bic.w	r2, r2, #32
  406116:	6022      	str	r2, [r4, #0]
  406118:	2210      	movs	r2, #16
  40611a:	e7b1      	b.n	406080 <_printf_i+0xe0>
  40611c:	4675      	mov	r5, lr
  40611e:	fbb3 f0f2 	udiv	r0, r3, r2
  406122:	fb02 3310 	mls	r3, r2, r0, r3
  406126:	5ccb      	ldrb	r3, [r1, r3]
  406128:	f805 3d01 	strb.w	r3, [r5, #-1]!
  40612c:	4603      	mov	r3, r0
  40612e:	2800      	cmp	r0, #0
  406130:	d1f5      	bne.n	40611e <_printf_i+0x17e>
  406132:	e7b7      	b.n	4060a4 <_printf_i+0x104>
  406134:	6808      	ldr	r0, [r1, #0]
  406136:	681a      	ldr	r2, [r3, #0]
  406138:	6949      	ldr	r1, [r1, #20]
  40613a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40613e:	d004      	beq.n	40614a <_printf_i+0x1aa>
  406140:	1d10      	adds	r0, r2, #4
  406142:	6018      	str	r0, [r3, #0]
  406144:	6813      	ldr	r3, [r2, #0]
  406146:	6019      	str	r1, [r3, #0]
  406148:	e007      	b.n	40615a <_printf_i+0x1ba>
  40614a:	f010 0f40 	tst.w	r0, #64	; 0x40
  40614e:	f102 0004 	add.w	r0, r2, #4
  406152:	6018      	str	r0, [r3, #0]
  406154:	6813      	ldr	r3, [r2, #0]
  406156:	d0f6      	beq.n	406146 <_printf_i+0x1a6>
  406158:	8019      	strh	r1, [r3, #0]
  40615a:	2300      	movs	r3, #0
  40615c:	6123      	str	r3, [r4, #16]
  40615e:	4675      	mov	r5, lr
  406160:	e7b1      	b.n	4060c6 <_printf_i+0x126>
  406162:	681a      	ldr	r2, [r3, #0]
  406164:	1d11      	adds	r1, r2, #4
  406166:	6019      	str	r1, [r3, #0]
  406168:	6815      	ldr	r5, [r2, #0]
  40616a:	6862      	ldr	r2, [r4, #4]
  40616c:	2100      	movs	r1, #0
  40616e:	4628      	mov	r0, r5
  406170:	f001 f96e 	bl	407450 <memchr>
  406174:	b108      	cbz	r0, 40617a <_printf_i+0x1da>
  406176:	1b40      	subs	r0, r0, r5
  406178:	6060      	str	r0, [r4, #4]
  40617a:	6863      	ldr	r3, [r4, #4]
  40617c:	6123      	str	r3, [r4, #16]
  40617e:	2300      	movs	r3, #0
  406180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  406184:	e79f      	b.n	4060c6 <_printf_i+0x126>
  406186:	6923      	ldr	r3, [r4, #16]
  406188:	462a      	mov	r2, r5
  40618a:	4639      	mov	r1, r7
  40618c:	4630      	mov	r0, r6
  40618e:	47c0      	blx	r8
  406190:	3001      	adds	r0, #1
  406192:	d0a2      	beq.n	4060da <_printf_i+0x13a>
  406194:	6823      	ldr	r3, [r4, #0]
  406196:	079b      	lsls	r3, r3, #30
  406198:	d507      	bpl.n	4061aa <_printf_i+0x20a>
  40619a:	2500      	movs	r5, #0
  40619c:	f104 0919 	add.w	r9, r4, #25
  4061a0:	68e3      	ldr	r3, [r4, #12]
  4061a2:	9a03      	ldr	r2, [sp, #12]
  4061a4:	1a9b      	subs	r3, r3, r2
  4061a6:	429d      	cmp	r5, r3
  4061a8:	db05      	blt.n	4061b6 <_printf_i+0x216>
  4061aa:	68e0      	ldr	r0, [r4, #12]
  4061ac:	9b03      	ldr	r3, [sp, #12]
  4061ae:	4298      	cmp	r0, r3
  4061b0:	bfb8      	it	lt
  4061b2:	4618      	movlt	r0, r3
  4061b4:	e793      	b.n	4060de <_printf_i+0x13e>
  4061b6:	2301      	movs	r3, #1
  4061b8:	464a      	mov	r2, r9
  4061ba:	4639      	mov	r1, r7
  4061bc:	4630      	mov	r0, r6
  4061be:	47c0      	blx	r8
  4061c0:	3001      	adds	r0, #1
  4061c2:	d08a      	beq.n	4060da <_printf_i+0x13a>
  4061c4:	3501      	adds	r5, #1
  4061c6:	e7eb      	b.n	4061a0 <_printf_i+0x200>
  4061c8:	2b00      	cmp	r3, #0
  4061ca:	d1a7      	bne.n	40611c <_printf_i+0x17c>
  4061cc:	780b      	ldrb	r3, [r1, #0]
  4061ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4061d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4061d6:	e765      	b.n	4060a4 <_printf_i+0x104>
  4061d8:	0040863f 	.word	0x0040863f
  4061dc:	0040862e 	.word	0x0040862e

004061e0 <iprintf>:
  4061e0:	b40f      	push	{r0, r1, r2, r3}
  4061e2:	4b0a      	ldr	r3, [pc, #40]	; (40620c <iprintf+0x2c>)
  4061e4:	b513      	push	{r0, r1, r4, lr}
  4061e6:	681c      	ldr	r4, [r3, #0]
  4061e8:	b124      	cbz	r4, 4061f4 <iprintf+0x14>
  4061ea:	69a3      	ldr	r3, [r4, #24]
  4061ec:	b913      	cbnz	r3, 4061f4 <iprintf+0x14>
  4061ee:	4620      	mov	r0, r4
  4061f0:	f001 f82e 	bl	407250 <__sinit>
  4061f4:	ab05      	add	r3, sp, #20
  4061f6:	9a04      	ldr	r2, [sp, #16]
  4061f8:	68a1      	ldr	r1, [r4, #8]
  4061fa:	9301      	str	r3, [sp, #4]
  4061fc:	4620      	mov	r0, r4
  4061fe:	f001 fc7f 	bl	407b00 <_vfiprintf_r>
  406202:	b002      	add	sp, #8
  406204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406208:	b004      	add	sp, #16
  40620a:	4770      	bx	lr
  40620c:	2040004c 	.word	0x2040004c

00406210 <_sbrk_r>:
  406210:	b538      	push	{r3, r4, r5, lr}
  406212:	4c06      	ldr	r4, [pc, #24]	; (40622c <_sbrk_r+0x1c>)
  406214:	2300      	movs	r3, #0
  406216:	4605      	mov	r5, r0
  406218:	4608      	mov	r0, r1
  40621a:	6023      	str	r3, [r4, #0]
  40621c:	f7fc f96c 	bl	4024f8 <_sbrk>
  406220:	1c43      	adds	r3, r0, #1
  406222:	d102      	bne.n	40622a <_sbrk_r+0x1a>
  406224:	6823      	ldr	r3, [r4, #0]
  406226:	b103      	cbz	r3, 40622a <_sbrk_r+0x1a>
  406228:	602b      	str	r3, [r5, #0]
  40622a:	bd38      	pop	{r3, r4, r5, pc}
  40622c:	20400960 	.word	0x20400960

00406230 <setbuf>:
  406230:	2900      	cmp	r1, #0
  406232:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406236:	bf0c      	ite	eq
  406238:	2202      	moveq	r2, #2
  40623a:	2200      	movne	r2, #0
  40623c:	f000 b800 	b.w	406240 <setvbuf>

00406240 <setvbuf>:
  406240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  406244:	461d      	mov	r5, r3
  406246:	4b51      	ldr	r3, [pc, #324]	; (40638c <setvbuf+0x14c>)
  406248:	681e      	ldr	r6, [r3, #0]
  40624a:	4604      	mov	r4, r0
  40624c:	460f      	mov	r7, r1
  40624e:	4690      	mov	r8, r2
  406250:	b126      	cbz	r6, 40625c <setvbuf+0x1c>
  406252:	69b3      	ldr	r3, [r6, #24]
  406254:	b913      	cbnz	r3, 40625c <setvbuf+0x1c>
  406256:	4630      	mov	r0, r6
  406258:	f000 fffa 	bl	407250 <__sinit>
  40625c:	4b4c      	ldr	r3, [pc, #304]	; (406390 <setvbuf+0x150>)
  40625e:	429c      	cmp	r4, r3
  406260:	d152      	bne.n	406308 <setvbuf+0xc8>
  406262:	6874      	ldr	r4, [r6, #4]
  406264:	f1b8 0f02 	cmp.w	r8, #2
  406268:	d006      	beq.n	406278 <setvbuf+0x38>
  40626a:	f1b8 0f01 	cmp.w	r8, #1
  40626e:	f200 8089 	bhi.w	406384 <setvbuf+0x144>
  406272:	2d00      	cmp	r5, #0
  406274:	f2c0 8086 	blt.w	406384 <setvbuf+0x144>
  406278:	4621      	mov	r1, r4
  40627a:	4630      	mov	r0, r6
  40627c:	f000 ff7e 	bl	40717c <_fflush_r>
  406280:	6b61      	ldr	r1, [r4, #52]	; 0x34
  406282:	b141      	cbz	r1, 406296 <setvbuf+0x56>
  406284:	f104 0344 	add.w	r3, r4, #68	; 0x44
  406288:	4299      	cmp	r1, r3
  40628a:	d002      	beq.n	406292 <setvbuf+0x52>
  40628c:	4630      	mov	r0, r6
  40628e:	f7ff fa9b 	bl	4057c8 <_free_r>
  406292:	2300      	movs	r3, #0
  406294:	6363      	str	r3, [r4, #52]	; 0x34
  406296:	2300      	movs	r3, #0
  406298:	61a3      	str	r3, [r4, #24]
  40629a:	6063      	str	r3, [r4, #4]
  40629c:	89a3      	ldrh	r3, [r4, #12]
  40629e:	061b      	lsls	r3, r3, #24
  4062a0:	d503      	bpl.n	4062aa <setvbuf+0x6a>
  4062a2:	6921      	ldr	r1, [r4, #16]
  4062a4:	4630      	mov	r0, r6
  4062a6:	f7ff fa8f 	bl	4057c8 <_free_r>
  4062aa:	89a3      	ldrh	r3, [r4, #12]
  4062ac:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4062b0:	f023 0303 	bic.w	r3, r3, #3
  4062b4:	f1b8 0f02 	cmp.w	r8, #2
  4062b8:	81a3      	strh	r3, [r4, #12]
  4062ba:	d05d      	beq.n	406378 <setvbuf+0x138>
  4062bc:	ab01      	add	r3, sp, #4
  4062be:	466a      	mov	r2, sp
  4062c0:	4621      	mov	r1, r4
  4062c2:	4630      	mov	r0, r6
  4062c4:	f001 f85c 	bl	407380 <__swhatbuf_r>
  4062c8:	89a3      	ldrh	r3, [r4, #12]
  4062ca:	4318      	orrs	r0, r3
  4062cc:	81a0      	strh	r0, [r4, #12]
  4062ce:	bb2d      	cbnz	r5, 40631c <setvbuf+0xdc>
  4062d0:	9d00      	ldr	r5, [sp, #0]
  4062d2:	4628      	mov	r0, r5
  4062d4:	f7ff fa5c 	bl	405790 <malloc>
  4062d8:	4607      	mov	r7, r0
  4062da:	2800      	cmp	r0, #0
  4062dc:	d14e      	bne.n	40637c <setvbuf+0x13c>
  4062de:	f8dd 9000 	ldr.w	r9, [sp]
  4062e2:	45a9      	cmp	r9, r5
  4062e4:	d13c      	bne.n	406360 <setvbuf+0x120>
  4062e6:	f04f 30ff 	mov.w	r0, #4294967295
  4062ea:	89a3      	ldrh	r3, [r4, #12]
  4062ec:	f043 0302 	orr.w	r3, r3, #2
  4062f0:	81a3      	strh	r3, [r4, #12]
  4062f2:	2300      	movs	r3, #0
  4062f4:	60a3      	str	r3, [r4, #8]
  4062f6:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4062fa:	6023      	str	r3, [r4, #0]
  4062fc:	6123      	str	r3, [r4, #16]
  4062fe:	2301      	movs	r3, #1
  406300:	6163      	str	r3, [r4, #20]
  406302:	b003      	add	sp, #12
  406304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406308:	4b22      	ldr	r3, [pc, #136]	; (406394 <setvbuf+0x154>)
  40630a:	429c      	cmp	r4, r3
  40630c:	d101      	bne.n	406312 <setvbuf+0xd2>
  40630e:	68b4      	ldr	r4, [r6, #8]
  406310:	e7a8      	b.n	406264 <setvbuf+0x24>
  406312:	4b21      	ldr	r3, [pc, #132]	; (406398 <setvbuf+0x158>)
  406314:	429c      	cmp	r4, r3
  406316:	bf08      	it	eq
  406318:	68f4      	ldreq	r4, [r6, #12]
  40631a:	e7a3      	b.n	406264 <setvbuf+0x24>
  40631c:	2f00      	cmp	r7, #0
  40631e:	d0d8      	beq.n	4062d2 <setvbuf+0x92>
  406320:	69b3      	ldr	r3, [r6, #24]
  406322:	b913      	cbnz	r3, 40632a <setvbuf+0xea>
  406324:	4630      	mov	r0, r6
  406326:	f000 ff93 	bl	407250 <__sinit>
  40632a:	f1b8 0f01 	cmp.w	r8, #1
  40632e:	bf08      	it	eq
  406330:	89a3      	ldrheq	r3, [r4, #12]
  406332:	6027      	str	r7, [r4, #0]
  406334:	bf04      	itt	eq
  406336:	f043 0301 	orreq.w	r3, r3, #1
  40633a:	81a3      	strheq	r3, [r4, #12]
  40633c:	89a3      	ldrh	r3, [r4, #12]
  40633e:	6127      	str	r7, [r4, #16]
  406340:	f013 0008 	ands.w	r0, r3, #8
  406344:	6165      	str	r5, [r4, #20]
  406346:	d01b      	beq.n	406380 <setvbuf+0x140>
  406348:	f013 0001 	ands.w	r0, r3, #1
  40634c:	bf18      	it	ne
  40634e:	426d      	negne	r5, r5
  406350:	f04f 0300 	mov.w	r3, #0
  406354:	bf1d      	ittte	ne
  406356:	60a3      	strne	r3, [r4, #8]
  406358:	61a5      	strne	r5, [r4, #24]
  40635a:	4618      	movne	r0, r3
  40635c:	60a5      	streq	r5, [r4, #8]
  40635e:	e7d0      	b.n	406302 <setvbuf+0xc2>
  406360:	4648      	mov	r0, r9
  406362:	f7ff fa15 	bl	405790 <malloc>
  406366:	4607      	mov	r7, r0
  406368:	2800      	cmp	r0, #0
  40636a:	d0bc      	beq.n	4062e6 <setvbuf+0xa6>
  40636c:	89a3      	ldrh	r3, [r4, #12]
  40636e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406372:	81a3      	strh	r3, [r4, #12]
  406374:	464d      	mov	r5, r9
  406376:	e7d3      	b.n	406320 <setvbuf+0xe0>
  406378:	2000      	movs	r0, #0
  40637a:	e7b6      	b.n	4062ea <setvbuf+0xaa>
  40637c:	46a9      	mov	r9, r5
  40637e:	e7f5      	b.n	40636c <setvbuf+0x12c>
  406380:	60a0      	str	r0, [r4, #8]
  406382:	e7be      	b.n	406302 <setvbuf+0xc2>
  406384:	f04f 30ff 	mov.w	r0, #4294967295
  406388:	e7bb      	b.n	406302 <setvbuf+0xc2>
  40638a:	bf00      	nop
  40638c:	2040004c 	.word	0x2040004c
  406390:	00408680 	.word	0x00408680
  406394:	004086a0 	.word	0x004086a0
  406398:	00408660 	.word	0x00408660

0040639c <strlen>:
  40639c:	4603      	mov	r3, r0
  40639e:	f813 2b01 	ldrb.w	r2, [r3], #1
  4063a2:	2a00      	cmp	r2, #0
  4063a4:	d1fb      	bne.n	40639e <strlen+0x2>
  4063a6:	1a18      	subs	r0, r3, r0
  4063a8:	3801      	subs	r0, #1
  4063aa:	4770      	bx	lr

004063ac <quorem>:
  4063ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063b0:	6903      	ldr	r3, [r0, #16]
  4063b2:	690c      	ldr	r4, [r1, #16]
  4063b4:	429c      	cmp	r4, r3
  4063b6:	4680      	mov	r8, r0
  4063b8:	f300 8082 	bgt.w	4064c0 <quorem+0x114>
  4063bc:	3c01      	subs	r4, #1
  4063be:	f101 0714 	add.w	r7, r1, #20
  4063c2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  4063c6:	f100 0614 	add.w	r6, r0, #20
  4063ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  4063ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  4063d2:	eb06 030e 	add.w	r3, r6, lr
  4063d6:	3501      	adds	r5, #1
  4063d8:	eb07 090e 	add.w	r9, r7, lr
  4063dc:	9301      	str	r3, [sp, #4]
  4063de:	fbb0 f5f5 	udiv	r5, r0, r5
  4063e2:	b395      	cbz	r5, 40644a <quorem+0x9e>
  4063e4:	f04f 0a00 	mov.w	sl, #0
  4063e8:	4638      	mov	r0, r7
  4063ea:	46b4      	mov	ip, r6
  4063ec:	46d3      	mov	fp, sl
  4063ee:	f850 2b04 	ldr.w	r2, [r0], #4
  4063f2:	b293      	uxth	r3, r2
  4063f4:	fb05 a303 	mla	r3, r5, r3, sl
  4063f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4063fc:	b29b      	uxth	r3, r3
  4063fe:	ebab 0303 	sub.w	r3, fp, r3
  406402:	0c12      	lsrs	r2, r2, #16
  406404:	f8bc b000 	ldrh.w	fp, [ip]
  406408:	fb05 a202 	mla	r2, r5, r2, sl
  40640c:	fa13 f38b 	uxtah	r3, r3, fp
  406410:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  406414:	fa1f fb82 	uxth.w	fp, r2
  406418:	f8dc 2000 	ldr.w	r2, [ip]
  40641c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  406420:	eb02 4223 	add.w	r2, r2, r3, asr #16
  406424:	b29b      	uxth	r3, r3
  406426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40642a:	4581      	cmp	r9, r0
  40642c:	ea4f 4b22 	mov.w	fp, r2, asr #16
  406430:	f84c 3b04 	str.w	r3, [ip], #4
  406434:	d2db      	bcs.n	4063ee <quorem+0x42>
  406436:	f856 300e 	ldr.w	r3, [r6, lr]
  40643a:	b933      	cbnz	r3, 40644a <quorem+0x9e>
  40643c:	9b01      	ldr	r3, [sp, #4]
  40643e:	3b04      	subs	r3, #4
  406440:	429e      	cmp	r6, r3
  406442:	461a      	mov	r2, r3
  406444:	d330      	bcc.n	4064a8 <quorem+0xfc>
  406446:	f8c8 4010 	str.w	r4, [r8, #16]
  40644a:	4640      	mov	r0, r8
  40644c:	f001 fa5b 	bl	407906 <__mcmp>
  406450:	2800      	cmp	r0, #0
  406452:	db25      	blt.n	4064a0 <quorem+0xf4>
  406454:	3501      	adds	r5, #1
  406456:	4630      	mov	r0, r6
  406458:	f04f 0e00 	mov.w	lr, #0
  40645c:	f857 2b04 	ldr.w	r2, [r7], #4
  406460:	f8d0 c000 	ldr.w	ip, [r0]
  406464:	b293      	uxth	r3, r2
  406466:	ebae 0303 	sub.w	r3, lr, r3
  40646a:	0c12      	lsrs	r2, r2, #16
  40646c:	fa13 f38c 	uxtah	r3, r3, ip
  406470:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  406474:	eb02 4223 	add.w	r2, r2, r3, asr #16
  406478:	b29b      	uxth	r3, r3
  40647a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40647e:	45b9      	cmp	r9, r7
  406480:	ea4f 4e22 	mov.w	lr, r2, asr #16
  406484:	f840 3b04 	str.w	r3, [r0], #4
  406488:	d2e8      	bcs.n	40645c <quorem+0xb0>
  40648a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40648e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  406492:	b92a      	cbnz	r2, 4064a0 <quorem+0xf4>
  406494:	3b04      	subs	r3, #4
  406496:	429e      	cmp	r6, r3
  406498:	461a      	mov	r2, r3
  40649a:	d30b      	bcc.n	4064b4 <quorem+0x108>
  40649c:	f8c8 4010 	str.w	r4, [r8, #16]
  4064a0:	4628      	mov	r0, r5
  4064a2:	b003      	add	sp, #12
  4064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064a8:	6812      	ldr	r2, [r2, #0]
  4064aa:	3b04      	subs	r3, #4
  4064ac:	2a00      	cmp	r2, #0
  4064ae:	d1ca      	bne.n	406446 <quorem+0x9a>
  4064b0:	3c01      	subs	r4, #1
  4064b2:	e7c5      	b.n	406440 <quorem+0x94>
  4064b4:	6812      	ldr	r2, [r2, #0]
  4064b6:	3b04      	subs	r3, #4
  4064b8:	2a00      	cmp	r2, #0
  4064ba:	d1ef      	bne.n	40649c <quorem+0xf0>
  4064bc:	3c01      	subs	r4, #1
  4064be:	e7ea      	b.n	406496 <quorem+0xea>
  4064c0:	2000      	movs	r0, #0
  4064c2:	e7ee      	b.n	4064a2 <quorem+0xf6>
  4064c4:	0000      	movs	r0, r0
	...

004064c8 <_dtoa_r>:
  4064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4064cc:	6a46      	ldr	r6, [r0, #36]	; 0x24
  4064ce:	b095      	sub	sp, #84	; 0x54
  4064d0:	4604      	mov	r4, r0
  4064d2:	9d21      	ldr	r5, [sp, #132]	; 0x84
  4064d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4064d8:	b93e      	cbnz	r6, 4064ea <_dtoa_r+0x22>
  4064da:	2010      	movs	r0, #16
  4064dc:	f7ff f958 	bl	405790 <malloc>
  4064e0:	6260      	str	r0, [r4, #36]	; 0x24
  4064e2:	6046      	str	r6, [r0, #4]
  4064e4:	6086      	str	r6, [r0, #8]
  4064e6:	6006      	str	r6, [r0, #0]
  4064e8:	60c6      	str	r6, [r0, #12]
  4064ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4064ec:	6819      	ldr	r1, [r3, #0]
  4064ee:	b151      	cbz	r1, 406506 <_dtoa_r+0x3e>
  4064f0:	685a      	ldr	r2, [r3, #4]
  4064f2:	604a      	str	r2, [r1, #4]
  4064f4:	2301      	movs	r3, #1
  4064f6:	4093      	lsls	r3, r2
  4064f8:	608b      	str	r3, [r1, #8]
  4064fa:	4620      	mov	r0, r4
  4064fc:	f001 f82e 	bl	40755c <_Bfree>
  406500:	6a63      	ldr	r3, [r4, #36]	; 0x24
  406502:	2200      	movs	r2, #0
  406504:	601a      	str	r2, [r3, #0]
  406506:	9b03      	ldr	r3, [sp, #12]
  406508:	2b00      	cmp	r3, #0
  40650a:	bfbf      	itttt	lt
  40650c:	2301      	movlt	r3, #1
  40650e:	602b      	strlt	r3, [r5, #0]
  406510:	9b03      	ldrlt	r3, [sp, #12]
  406512:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  406516:	bfb2      	itee	lt
  406518:	9303      	strlt	r3, [sp, #12]
  40651a:	2300      	movge	r3, #0
  40651c:	602b      	strge	r3, [r5, #0]
  40651e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  406522:	4ba9      	ldr	r3, [pc, #676]	; (4067c8 <_dtoa_r+0x300>)
  406524:	ea33 0309 	bics.w	r3, r3, r9
  406528:	d11b      	bne.n	406562 <_dtoa_r+0x9a>
  40652a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40652c:	f242 730f 	movw	r3, #9999	; 0x270f
  406530:	6013      	str	r3, [r2, #0]
  406532:	9b02      	ldr	r3, [sp, #8]
  406534:	b923      	cbnz	r3, 406540 <_dtoa_r+0x78>
  406536:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40653a:	2800      	cmp	r0, #0
  40653c:	f000 8581 	beq.w	407042 <_dtoa_r+0xb7a>
  406540:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406542:	b953      	cbnz	r3, 40655a <_dtoa_r+0x92>
  406544:	4ba1      	ldr	r3, [pc, #644]	; (4067cc <_dtoa_r+0x304>)
  406546:	e021      	b.n	40658c <_dtoa_r+0xc4>
  406548:	4ba1      	ldr	r3, [pc, #644]	; (4067d0 <_dtoa_r+0x308>)
  40654a:	9306      	str	r3, [sp, #24]
  40654c:	3308      	adds	r3, #8
  40654e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  406550:	6013      	str	r3, [r2, #0]
  406552:	9806      	ldr	r0, [sp, #24]
  406554:	b015      	add	sp, #84	; 0x54
  406556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40655a:	4b9c      	ldr	r3, [pc, #624]	; (4067cc <_dtoa_r+0x304>)
  40655c:	9306      	str	r3, [sp, #24]
  40655e:	3303      	adds	r3, #3
  406560:	e7f5      	b.n	40654e <_dtoa_r+0x86>
  406562:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  406566:	2200      	movs	r2, #0
  406568:	2300      	movs	r3, #0
  40656a:	4630      	mov	r0, r6
  40656c:	4639      	mov	r1, r7
  40656e:	f7ff f825 	bl	4055bc <__aeabi_dcmpeq>
  406572:	4680      	mov	r8, r0
  406574:	b160      	cbz	r0, 406590 <_dtoa_r+0xc8>
  406576:	9a20      	ldr	r2, [sp, #128]	; 0x80
  406578:	2301      	movs	r3, #1
  40657a:	6013      	str	r3, [r2, #0]
  40657c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40657e:	2b00      	cmp	r3, #0
  406580:	f000 855c 	beq.w	40703c <_dtoa_r+0xb74>
  406584:	4b93      	ldr	r3, [pc, #588]	; (4067d4 <_dtoa_r+0x30c>)
  406586:	9a22      	ldr	r2, [sp, #136]	; 0x88
  406588:	6013      	str	r3, [r2, #0]
  40658a:	3b01      	subs	r3, #1
  40658c:	9306      	str	r3, [sp, #24]
  40658e:	e7e0      	b.n	406552 <_dtoa_r+0x8a>
  406590:	ab12      	add	r3, sp, #72	; 0x48
  406592:	9301      	str	r3, [sp, #4]
  406594:	ab13      	add	r3, sp, #76	; 0x4c
  406596:	9300      	str	r3, [sp, #0]
  406598:	4632      	mov	r2, r6
  40659a:	463b      	mov	r3, r7
  40659c:	4620      	mov	r0, r4
  40659e:	f001 fa2a 	bl	4079f6 <__d2b>
  4065a2:	f3c9 550a 	ubfx	r5, r9, #20, #11
  4065a6:	4682      	mov	sl, r0
  4065a8:	2d00      	cmp	r5, #0
  4065aa:	d07c      	beq.n	4066a6 <_dtoa_r+0x1de>
  4065ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
  4065b0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4065b4:	4630      	mov	r0, r6
  4065b6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4065ba:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  4065be:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  4065c2:	2200      	movs	r2, #0
  4065c4:	4b84      	ldr	r3, [pc, #528]	; (4067d8 <_dtoa_r+0x310>)
  4065c6:	f7fe fbdd 	bl	404d84 <__aeabi_dsub>
  4065ca:	a379      	add	r3, pc, #484	; (adr r3, 4067b0 <_dtoa_r+0x2e8>)
  4065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4065d0:	f7fe fd8c 	bl	4050ec <__aeabi_dmul>
  4065d4:	a378      	add	r3, pc, #480	; (adr r3, 4067b8 <_dtoa_r+0x2f0>)
  4065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4065da:	f7fe fbd5 	bl	404d88 <__adddf3>
  4065de:	4606      	mov	r6, r0
  4065e0:	4628      	mov	r0, r5
  4065e2:	460f      	mov	r7, r1
  4065e4:	f7fe fd1c 	bl	405020 <__aeabi_i2d>
  4065e8:	a375      	add	r3, pc, #468	; (adr r3, 4067c0 <_dtoa_r+0x2f8>)
  4065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4065ee:	f7fe fd7d 	bl	4050ec <__aeabi_dmul>
  4065f2:	4602      	mov	r2, r0
  4065f4:	460b      	mov	r3, r1
  4065f6:	4630      	mov	r0, r6
  4065f8:	4639      	mov	r1, r7
  4065fa:	f7fe fbc5 	bl	404d88 <__adddf3>
  4065fe:	4606      	mov	r6, r0
  406600:	460f      	mov	r7, r1
  406602:	f7ff f823 	bl	40564c <__aeabi_d2iz>
  406606:	2200      	movs	r2, #0
  406608:	4683      	mov	fp, r0
  40660a:	2300      	movs	r3, #0
  40660c:	4630      	mov	r0, r6
  40660e:	4639      	mov	r1, r7
  406610:	f7fe ffde 	bl	4055d0 <__aeabi_dcmplt>
  406614:	b158      	cbz	r0, 40662e <_dtoa_r+0x166>
  406616:	4658      	mov	r0, fp
  406618:	f7fe fd02 	bl	405020 <__aeabi_i2d>
  40661c:	4602      	mov	r2, r0
  40661e:	460b      	mov	r3, r1
  406620:	4630      	mov	r0, r6
  406622:	4639      	mov	r1, r7
  406624:	f7fe ffca 	bl	4055bc <__aeabi_dcmpeq>
  406628:	b908      	cbnz	r0, 40662e <_dtoa_r+0x166>
  40662a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40662e:	f1bb 0f16 	cmp.w	fp, #22
  406632:	d857      	bhi.n	4066e4 <_dtoa_r+0x21c>
  406634:	4969      	ldr	r1, [pc, #420]	; (4067dc <_dtoa_r+0x314>)
  406636:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40663a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40663e:	e9d1 0100 	ldrd	r0, r1, [r1]
  406642:	f7fe ffe3 	bl	40560c <__aeabi_dcmpgt>
  406646:	2800      	cmp	r0, #0
  406648:	d04e      	beq.n	4066e8 <_dtoa_r+0x220>
  40664a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40664e:	2300      	movs	r3, #0
  406650:	930d      	str	r3, [sp, #52]	; 0x34
  406652:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406654:	1b5d      	subs	r5, r3, r5
  406656:	1e6b      	subs	r3, r5, #1
  406658:	9307      	str	r3, [sp, #28]
  40665a:	bf43      	ittte	mi
  40665c:	2300      	movmi	r3, #0
  40665e:	f1c5 0801 	rsbmi	r8, r5, #1
  406662:	9307      	strmi	r3, [sp, #28]
  406664:	f04f 0800 	movpl.w	r8, #0
  406668:	f1bb 0f00 	cmp.w	fp, #0
  40666c:	db3e      	blt.n	4066ec <_dtoa_r+0x224>
  40666e:	9b07      	ldr	r3, [sp, #28]
  406670:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  406674:	445b      	add	r3, fp
  406676:	9307      	str	r3, [sp, #28]
  406678:	2300      	movs	r3, #0
  40667a:	9308      	str	r3, [sp, #32]
  40667c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40667e:	2b09      	cmp	r3, #9
  406680:	f200 80b0 	bhi.w	4067e4 <_dtoa_r+0x31c>
  406684:	2b05      	cmp	r3, #5
  406686:	bfc4      	itt	gt
  406688:	3b04      	subgt	r3, #4
  40668a:	931e      	strgt	r3, [sp, #120]	; 0x78
  40668c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40668e:	f1a3 0302 	sub.w	r3, r3, #2
  406692:	bfcc      	ite	gt
  406694:	2600      	movgt	r6, #0
  406696:	2601      	movle	r6, #1
  406698:	2b03      	cmp	r3, #3
  40669a:	f200 80af 	bhi.w	4067fc <_dtoa_r+0x334>
  40669e:	e8df f003 	tbb	[pc, r3]
  4066a2:	8583      	.short	0x8583
  4066a4:	772d      	.short	0x772d
  4066a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4066a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
  4066aa:	441d      	add	r5, r3
  4066ac:	f205 4332 	addw	r3, r5, #1074	; 0x432
  4066b0:	2b20      	cmp	r3, #32
  4066b2:	dd11      	ble.n	4066d8 <_dtoa_r+0x210>
  4066b4:	9a02      	ldr	r2, [sp, #8]
  4066b6:	f205 4012 	addw	r0, r5, #1042	; 0x412
  4066ba:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4066be:	fa22 f000 	lsr.w	r0, r2, r0
  4066c2:	fa09 f303 	lsl.w	r3, r9, r3
  4066c6:	4318      	orrs	r0, r3
  4066c8:	f7fe fc9a 	bl	405000 <__aeabi_ui2d>
  4066cc:	2301      	movs	r3, #1
  4066ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4066d2:	3d01      	subs	r5, #1
  4066d4:	9310      	str	r3, [sp, #64]	; 0x40
  4066d6:	e774      	b.n	4065c2 <_dtoa_r+0xfa>
  4066d8:	f1c3 0020 	rsb	r0, r3, #32
  4066dc:	9b02      	ldr	r3, [sp, #8]
  4066de:	fa03 f000 	lsl.w	r0, r3, r0
  4066e2:	e7f1      	b.n	4066c8 <_dtoa_r+0x200>
  4066e4:	2301      	movs	r3, #1
  4066e6:	e7b3      	b.n	406650 <_dtoa_r+0x188>
  4066e8:	900d      	str	r0, [sp, #52]	; 0x34
  4066ea:	e7b2      	b.n	406652 <_dtoa_r+0x18a>
  4066ec:	f1cb 0300 	rsb	r3, fp, #0
  4066f0:	9308      	str	r3, [sp, #32]
  4066f2:	2300      	movs	r3, #0
  4066f4:	eba8 080b 	sub.w	r8, r8, fp
  4066f8:	930c      	str	r3, [sp, #48]	; 0x30
  4066fa:	e7bf      	b.n	40667c <_dtoa_r+0x1b4>
  4066fc:	2301      	movs	r3, #1
  4066fe:	9309      	str	r3, [sp, #36]	; 0x24
  406700:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406702:	2b00      	cmp	r3, #0
  406704:	dd7d      	ble.n	406802 <_dtoa_r+0x33a>
  406706:	9304      	str	r3, [sp, #16]
  406708:	4699      	mov	r9, r3
  40670a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40670c:	2200      	movs	r2, #0
  40670e:	606a      	str	r2, [r5, #4]
  406710:	2104      	movs	r1, #4
  406712:	f101 0214 	add.w	r2, r1, #20
  406716:	429a      	cmp	r2, r3
  406718:	d978      	bls.n	40680c <_dtoa_r+0x344>
  40671a:	6869      	ldr	r1, [r5, #4]
  40671c:	4620      	mov	r0, r4
  40671e:	f000 fee9 	bl	4074f4 <_Balloc>
  406722:	6a63      	ldr	r3, [r4, #36]	; 0x24
  406724:	6028      	str	r0, [r5, #0]
  406726:	681b      	ldr	r3, [r3, #0]
  406728:	9306      	str	r3, [sp, #24]
  40672a:	f1b9 0f0e 	cmp.w	r9, #14
  40672e:	f200 80ee 	bhi.w	40690e <_dtoa_r+0x446>
  406732:	2e00      	cmp	r6, #0
  406734:	f000 80eb 	beq.w	40690e <_dtoa_r+0x446>
  406738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40673c:	f1bb 0f00 	cmp.w	fp, #0
  406740:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  406744:	dd77      	ble.n	406836 <_dtoa_r+0x36e>
  406746:	4a25      	ldr	r2, [pc, #148]	; (4067dc <_dtoa_r+0x314>)
  406748:	f00b 030f 	and.w	r3, fp, #15
  40674c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  406750:	e9d3 2300 	ldrd	r2, r3, [r3]
  406754:	ea4f 162b 	mov.w	r6, fp, asr #4
  406758:	06f0      	lsls	r0, r6, #27
  40675a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40675e:	d55a      	bpl.n	406816 <_dtoa_r+0x34e>
  406760:	4b1f      	ldr	r3, [pc, #124]	; (4067e0 <_dtoa_r+0x318>)
  406762:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  406766:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40676a:	f7fe fde9 	bl	405340 <__aeabi_ddiv>
  40676e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406772:	f006 060f 	and.w	r6, r6, #15
  406776:	2503      	movs	r5, #3
  406778:	4f19      	ldr	r7, [pc, #100]	; (4067e0 <_dtoa_r+0x318>)
  40677a:	2e00      	cmp	r6, #0
  40677c:	d14d      	bne.n	40681a <_dtoa_r+0x352>
  40677e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  406782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406786:	f7fe fddb 	bl	405340 <__aeabi_ddiv>
  40678a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40678e:	e06c      	b.n	40686a <_dtoa_r+0x3a2>
  406790:	2301      	movs	r3, #1
  406792:	9309      	str	r3, [sp, #36]	; 0x24
  406794:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406796:	445b      	add	r3, fp
  406798:	f103 0901 	add.w	r9, r3, #1
  40679c:	9304      	str	r3, [sp, #16]
  40679e:	464b      	mov	r3, r9
  4067a0:	2b01      	cmp	r3, #1
  4067a2:	bfb8      	it	lt
  4067a4:	2301      	movlt	r3, #1
  4067a6:	e7b0      	b.n	40670a <_dtoa_r+0x242>
  4067a8:	2300      	movs	r3, #0
  4067aa:	e7a8      	b.n	4066fe <_dtoa_r+0x236>
  4067ac:	2300      	movs	r3, #0
  4067ae:	e7f0      	b.n	406792 <_dtoa_r+0x2ca>
  4067b0:	636f4361 	.word	0x636f4361
  4067b4:	3fd287a7 	.word	0x3fd287a7
  4067b8:	8b60c8b3 	.word	0x8b60c8b3
  4067bc:	3fc68a28 	.word	0x3fc68a28
  4067c0:	509f79fb 	.word	0x509f79fb
  4067c4:	3fd34413 	.word	0x3fd34413
  4067c8:	7ff00000 	.word	0x7ff00000
  4067cc:	00408659 	.word	0x00408659
  4067d0:	00408650 	.word	0x00408650
  4067d4:	0040862d 	.word	0x0040862d
  4067d8:	3ff80000 	.word	0x3ff80000
  4067dc:	004086e8 	.word	0x004086e8
  4067e0:	004086c0 	.word	0x004086c0
  4067e4:	2601      	movs	r6, #1
  4067e6:	2300      	movs	r3, #0
  4067e8:	931e      	str	r3, [sp, #120]	; 0x78
  4067ea:	9609      	str	r6, [sp, #36]	; 0x24
  4067ec:	f04f 33ff 	mov.w	r3, #4294967295
  4067f0:	9304      	str	r3, [sp, #16]
  4067f2:	4699      	mov	r9, r3
  4067f4:	2200      	movs	r2, #0
  4067f6:	2312      	movs	r3, #18
  4067f8:	921f      	str	r2, [sp, #124]	; 0x7c
  4067fa:	e786      	b.n	40670a <_dtoa_r+0x242>
  4067fc:	2301      	movs	r3, #1
  4067fe:	9309      	str	r3, [sp, #36]	; 0x24
  406800:	e7f4      	b.n	4067ec <_dtoa_r+0x324>
  406802:	2301      	movs	r3, #1
  406804:	9304      	str	r3, [sp, #16]
  406806:	4699      	mov	r9, r3
  406808:	461a      	mov	r2, r3
  40680a:	e7f5      	b.n	4067f8 <_dtoa_r+0x330>
  40680c:	686a      	ldr	r2, [r5, #4]
  40680e:	3201      	adds	r2, #1
  406810:	606a      	str	r2, [r5, #4]
  406812:	0049      	lsls	r1, r1, #1
  406814:	e77d      	b.n	406712 <_dtoa_r+0x24a>
  406816:	2502      	movs	r5, #2
  406818:	e7ae      	b.n	406778 <_dtoa_r+0x2b0>
  40681a:	07f1      	lsls	r1, r6, #31
  40681c:	d508      	bpl.n	406830 <_dtoa_r+0x368>
  40681e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  406822:	e9d7 2300 	ldrd	r2, r3, [r7]
  406826:	f7fe fc61 	bl	4050ec <__aeabi_dmul>
  40682a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40682e:	3501      	adds	r5, #1
  406830:	1076      	asrs	r6, r6, #1
  406832:	3708      	adds	r7, #8
  406834:	e7a1      	b.n	40677a <_dtoa_r+0x2b2>
  406836:	f000 80a5 	beq.w	406984 <_dtoa_r+0x4bc>
  40683a:	f1cb 0600 	rsb	r6, fp, #0
  40683e:	4ba3      	ldr	r3, [pc, #652]	; (406acc <_dtoa_r+0x604>)
  406840:	4fa3      	ldr	r7, [pc, #652]	; (406ad0 <_dtoa_r+0x608>)
  406842:	f006 020f 	and.w	r2, r6, #15
  406846:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40684a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40684e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  406852:	f7fe fc4b 	bl	4050ec <__aeabi_dmul>
  406856:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40685a:	1136      	asrs	r6, r6, #4
  40685c:	2300      	movs	r3, #0
  40685e:	2502      	movs	r5, #2
  406860:	2e00      	cmp	r6, #0
  406862:	f040 8084 	bne.w	40696e <_dtoa_r+0x4a6>
  406866:	2b00      	cmp	r3, #0
  406868:	d18f      	bne.n	40678a <_dtoa_r+0x2c2>
  40686a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40686c:	2b00      	cmp	r3, #0
  40686e:	f000 808b 	beq.w	406988 <_dtoa_r+0x4c0>
  406872:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406876:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40687a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40687e:	2200      	movs	r2, #0
  406880:	4b94      	ldr	r3, [pc, #592]	; (406ad4 <_dtoa_r+0x60c>)
  406882:	f7fe fea5 	bl	4055d0 <__aeabi_dcmplt>
  406886:	2800      	cmp	r0, #0
  406888:	d07e      	beq.n	406988 <_dtoa_r+0x4c0>
  40688a:	f1b9 0f00 	cmp.w	r9, #0
  40688e:	d07b      	beq.n	406988 <_dtoa_r+0x4c0>
  406890:	9b04      	ldr	r3, [sp, #16]
  406892:	2b00      	cmp	r3, #0
  406894:	dd37      	ble.n	406906 <_dtoa_r+0x43e>
  406896:	2200      	movs	r2, #0
  406898:	4b8f      	ldr	r3, [pc, #572]	; (406ad8 <_dtoa_r+0x610>)
  40689a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40689e:	f7fe fc25 	bl	4050ec <__aeabi_dmul>
  4068a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4068a6:	9e04      	ldr	r6, [sp, #16]
  4068a8:	f10b 37ff 	add.w	r7, fp, #4294967295
  4068ac:	3501      	adds	r5, #1
  4068ae:	4628      	mov	r0, r5
  4068b0:	f7fe fbb6 	bl	405020 <__aeabi_i2d>
  4068b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4068b8:	f7fe fc18 	bl	4050ec <__aeabi_dmul>
  4068bc:	4b87      	ldr	r3, [pc, #540]	; (406adc <_dtoa_r+0x614>)
  4068be:	2200      	movs	r2, #0
  4068c0:	f7fe fa62 	bl	404d88 <__adddf3>
  4068c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4068c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4068ca:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  4068ce:	950b      	str	r5, [sp, #44]	; 0x2c
  4068d0:	2e00      	cmp	r6, #0
  4068d2:	d15c      	bne.n	40698e <_dtoa_r+0x4c6>
  4068d4:	2200      	movs	r2, #0
  4068d6:	4b82      	ldr	r3, [pc, #520]	; (406ae0 <_dtoa_r+0x618>)
  4068d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4068dc:	f7fe fa52 	bl	404d84 <__aeabi_dsub>
  4068e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4068e2:	462b      	mov	r3, r5
  4068e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4068e8:	f7fe fe90 	bl	40560c <__aeabi_dcmpgt>
  4068ec:	2800      	cmp	r0, #0
  4068ee:	f040 82f7 	bne.w	406ee0 <_dtoa_r+0xa18>
  4068f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4068f4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4068f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4068fc:	f7fe fe68 	bl	4055d0 <__aeabi_dcmplt>
  406900:	2800      	cmp	r0, #0
  406902:	f040 82eb 	bne.w	406edc <_dtoa_r+0xa14>
  406906:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40690a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40690e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406910:	2b00      	cmp	r3, #0
  406912:	f2c0 8151 	blt.w	406bb8 <_dtoa_r+0x6f0>
  406916:	f1bb 0f0e 	cmp.w	fp, #14
  40691a:	f300 814d 	bgt.w	406bb8 <_dtoa_r+0x6f0>
  40691e:	4b6b      	ldr	r3, [pc, #428]	; (406acc <_dtoa_r+0x604>)
  406920:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  406924:	e9d3 2300 	ldrd	r2, r3, [r3]
  406928:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40692c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40692e:	2b00      	cmp	r3, #0
  406930:	f280 80da 	bge.w	406ae8 <_dtoa_r+0x620>
  406934:	f1b9 0f00 	cmp.w	r9, #0
  406938:	f300 80d6 	bgt.w	406ae8 <_dtoa_r+0x620>
  40693c:	f040 82cd 	bne.w	406eda <_dtoa_r+0xa12>
  406940:	2200      	movs	r2, #0
  406942:	4b67      	ldr	r3, [pc, #412]	; (406ae0 <_dtoa_r+0x618>)
  406944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406948:	f7fe fbd0 	bl	4050ec <__aeabi_dmul>
  40694c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406950:	f7fe fe52 	bl	4055f8 <__aeabi_dcmpge>
  406954:	464e      	mov	r6, r9
  406956:	464f      	mov	r7, r9
  406958:	2800      	cmp	r0, #0
  40695a:	f040 82a4 	bne.w	406ea6 <_dtoa_r+0x9de>
  40695e:	9b06      	ldr	r3, [sp, #24]
  406960:	9a06      	ldr	r2, [sp, #24]
  406962:	1c5d      	adds	r5, r3, #1
  406964:	2331      	movs	r3, #49	; 0x31
  406966:	7013      	strb	r3, [r2, #0]
  406968:	f10b 0b01 	add.w	fp, fp, #1
  40696c:	e29f      	b.n	406eae <_dtoa_r+0x9e6>
  40696e:	07f2      	lsls	r2, r6, #31
  406970:	d505      	bpl.n	40697e <_dtoa_r+0x4b6>
  406972:	e9d7 2300 	ldrd	r2, r3, [r7]
  406976:	f7fe fbb9 	bl	4050ec <__aeabi_dmul>
  40697a:	3501      	adds	r5, #1
  40697c:	2301      	movs	r3, #1
  40697e:	1076      	asrs	r6, r6, #1
  406980:	3708      	adds	r7, #8
  406982:	e76d      	b.n	406860 <_dtoa_r+0x398>
  406984:	2502      	movs	r5, #2
  406986:	e770      	b.n	40686a <_dtoa_r+0x3a2>
  406988:	465f      	mov	r7, fp
  40698a:	464e      	mov	r6, r9
  40698c:	e78f      	b.n	4068ae <_dtoa_r+0x3e6>
  40698e:	9a06      	ldr	r2, [sp, #24]
  406990:	4b4e      	ldr	r3, [pc, #312]	; (406acc <_dtoa_r+0x604>)
  406992:	4432      	add	r2, r6
  406994:	9211      	str	r2, [sp, #68]	; 0x44
  406996:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406998:	1e71      	subs	r1, r6, #1
  40699a:	2a00      	cmp	r2, #0
  40699c:	d048      	beq.n	406a30 <_dtoa_r+0x568>
  40699e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  4069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4069a6:	2000      	movs	r0, #0
  4069a8:	494e      	ldr	r1, [pc, #312]	; (406ae4 <_dtoa_r+0x61c>)
  4069aa:	f7fe fcc9 	bl	405340 <__aeabi_ddiv>
  4069ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4069b2:	f7fe f9e7 	bl	404d84 <__aeabi_dsub>
  4069b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4069ba:	9d06      	ldr	r5, [sp, #24]
  4069bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4069c0:	f7fe fe44 	bl	40564c <__aeabi_d2iz>
  4069c4:	4606      	mov	r6, r0
  4069c6:	f7fe fb2b 	bl	405020 <__aeabi_i2d>
  4069ca:	4602      	mov	r2, r0
  4069cc:	460b      	mov	r3, r1
  4069ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4069d2:	f7fe f9d7 	bl	404d84 <__aeabi_dsub>
  4069d6:	3630      	adds	r6, #48	; 0x30
  4069d8:	f805 6b01 	strb.w	r6, [r5], #1
  4069dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4069e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4069e4:	f7fe fdf4 	bl	4055d0 <__aeabi_dcmplt>
  4069e8:	2800      	cmp	r0, #0
  4069ea:	d165      	bne.n	406ab8 <_dtoa_r+0x5f0>
  4069ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4069f0:	2000      	movs	r0, #0
  4069f2:	4938      	ldr	r1, [pc, #224]	; (406ad4 <_dtoa_r+0x60c>)
  4069f4:	f7fe f9c6 	bl	404d84 <__aeabi_dsub>
  4069f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4069fc:	f7fe fde8 	bl	4055d0 <__aeabi_dcmplt>
  406a00:	2800      	cmp	r0, #0
  406a02:	f040 80b9 	bne.w	406b78 <_dtoa_r+0x6b0>
  406a06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a08:	429d      	cmp	r5, r3
  406a0a:	f43f af7c 	beq.w	406906 <_dtoa_r+0x43e>
  406a0e:	2200      	movs	r2, #0
  406a10:	4b31      	ldr	r3, [pc, #196]	; (406ad8 <_dtoa_r+0x610>)
  406a12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  406a16:	f7fe fb69 	bl	4050ec <__aeabi_dmul>
  406a1a:	2200      	movs	r2, #0
  406a1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  406a20:	4b2d      	ldr	r3, [pc, #180]	; (406ad8 <_dtoa_r+0x610>)
  406a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406a26:	f7fe fb61 	bl	4050ec <__aeabi_dmul>
  406a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406a2e:	e7c5      	b.n	4069bc <_dtoa_r+0x4f4>
  406a30:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  406a34:	e9d1 0100 	ldrd	r0, r1, [r1]
  406a38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  406a3c:	f7fe fb56 	bl	4050ec <__aeabi_dmul>
  406a40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  406a44:	9d06      	ldr	r5, [sp, #24]
  406a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406a4a:	f7fe fdff 	bl	40564c <__aeabi_d2iz>
  406a4e:	4606      	mov	r6, r0
  406a50:	f7fe fae6 	bl	405020 <__aeabi_i2d>
  406a54:	3630      	adds	r6, #48	; 0x30
  406a56:	4602      	mov	r2, r0
  406a58:	460b      	mov	r3, r1
  406a5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406a5e:	f7fe f991 	bl	404d84 <__aeabi_dsub>
  406a62:	f805 6b01 	strb.w	r6, [r5], #1
  406a66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a68:	42ab      	cmp	r3, r5
  406a6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406a6e:	f04f 0200 	mov.w	r2, #0
  406a72:	d125      	bne.n	406ac0 <_dtoa_r+0x5f8>
  406a74:	4b1b      	ldr	r3, [pc, #108]	; (406ae4 <_dtoa_r+0x61c>)
  406a76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  406a7a:	f7fe f985 	bl	404d88 <__adddf3>
  406a7e:	4602      	mov	r2, r0
  406a80:	460b      	mov	r3, r1
  406a82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406a86:	f7fe fdc1 	bl	40560c <__aeabi_dcmpgt>
  406a8a:	2800      	cmp	r0, #0
  406a8c:	d174      	bne.n	406b78 <_dtoa_r+0x6b0>
  406a8e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  406a92:	2000      	movs	r0, #0
  406a94:	4913      	ldr	r1, [pc, #76]	; (406ae4 <_dtoa_r+0x61c>)
  406a96:	f7fe f975 	bl	404d84 <__aeabi_dsub>
  406a9a:	4602      	mov	r2, r0
  406a9c:	460b      	mov	r3, r1
  406a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406aa2:	f7fe fd95 	bl	4055d0 <__aeabi_dcmplt>
  406aa6:	2800      	cmp	r0, #0
  406aa8:	f43f af2d 	beq.w	406906 <_dtoa_r+0x43e>
  406aac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406ab0:	2b30      	cmp	r3, #48	; 0x30
  406ab2:	f105 32ff 	add.w	r2, r5, #4294967295
  406ab6:	d001      	beq.n	406abc <_dtoa_r+0x5f4>
  406ab8:	46bb      	mov	fp, r7
  406aba:	e04c      	b.n	406b56 <_dtoa_r+0x68e>
  406abc:	4615      	mov	r5, r2
  406abe:	e7f5      	b.n	406aac <_dtoa_r+0x5e4>
  406ac0:	4b05      	ldr	r3, [pc, #20]	; (406ad8 <_dtoa_r+0x610>)
  406ac2:	f7fe fb13 	bl	4050ec <__aeabi_dmul>
  406ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406aca:	e7bc      	b.n	406a46 <_dtoa_r+0x57e>
  406acc:	004086e8 	.word	0x004086e8
  406ad0:	004086c0 	.word	0x004086c0
  406ad4:	3ff00000 	.word	0x3ff00000
  406ad8:	40240000 	.word	0x40240000
  406adc:	401c0000 	.word	0x401c0000
  406ae0:	40140000 	.word	0x40140000
  406ae4:	3fe00000 	.word	0x3fe00000
  406ae8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  406aec:	9d06      	ldr	r5, [sp, #24]
  406aee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  406af2:	4630      	mov	r0, r6
  406af4:	4639      	mov	r1, r7
  406af6:	f7fe fc23 	bl	405340 <__aeabi_ddiv>
  406afa:	f7fe fda7 	bl	40564c <__aeabi_d2iz>
  406afe:	4680      	mov	r8, r0
  406b00:	f7fe fa8e 	bl	405020 <__aeabi_i2d>
  406b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  406b08:	f7fe faf0 	bl	4050ec <__aeabi_dmul>
  406b0c:	4602      	mov	r2, r0
  406b0e:	460b      	mov	r3, r1
  406b10:	4630      	mov	r0, r6
  406b12:	4639      	mov	r1, r7
  406b14:	f108 0630 	add.w	r6, r8, #48	; 0x30
  406b18:	f7fe f934 	bl	404d84 <__aeabi_dsub>
  406b1c:	f805 6b01 	strb.w	r6, [r5], #1
  406b20:	9e06      	ldr	r6, [sp, #24]
  406b22:	1bae      	subs	r6, r5, r6
  406b24:	45b1      	cmp	r9, r6
  406b26:	4602      	mov	r2, r0
  406b28:	460b      	mov	r3, r1
  406b2a:	d138      	bne.n	406b9e <_dtoa_r+0x6d6>
  406b2c:	f7fe f92c 	bl	404d88 <__adddf3>
  406b30:	4606      	mov	r6, r0
  406b32:	460f      	mov	r7, r1
  406b34:	4602      	mov	r2, r0
  406b36:	460b      	mov	r3, r1
  406b38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406b3c:	f7fe fd48 	bl	4055d0 <__aeabi_dcmplt>
  406b40:	b9c8      	cbnz	r0, 406b76 <_dtoa_r+0x6ae>
  406b42:	4632      	mov	r2, r6
  406b44:	463b      	mov	r3, r7
  406b46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406b4a:	f7fe fd37 	bl	4055bc <__aeabi_dcmpeq>
  406b4e:	b110      	cbz	r0, 406b56 <_dtoa_r+0x68e>
  406b50:	f018 0f01 	tst.w	r8, #1
  406b54:	d10f      	bne.n	406b76 <_dtoa_r+0x6ae>
  406b56:	4651      	mov	r1, sl
  406b58:	4620      	mov	r0, r4
  406b5a:	f000 fcff 	bl	40755c <_Bfree>
  406b5e:	2300      	movs	r3, #0
  406b60:	9a20      	ldr	r2, [sp, #128]	; 0x80
  406b62:	702b      	strb	r3, [r5, #0]
  406b64:	f10b 0301 	add.w	r3, fp, #1
  406b68:	6013      	str	r3, [r2, #0]
  406b6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406b6c:	2b00      	cmp	r3, #0
  406b6e:	f43f acf0 	beq.w	406552 <_dtoa_r+0x8a>
  406b72:	601d      	str	r5, [r3, #0]
  406b74:	e4ed      	b.n	406552 <_dtoa_r+0x8a>
  406b76:	465f      	mov	r7, fp
  406b78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406b7c:	2a39      	cmp	r2, #57	; 0x39
  406b7e:	f105 33ff 	add.w	r3, r5, #4294967295
  406b82:	d106      	bne.n	406b92 <_dtoa_r+0x6ca>
  406b84:	9a06      	ldr	r2, [sp, #24]
  406b86:	429a      	cmp	r2, r3
  406b88:	d107      	bne.n	406b9a <_dtoa_r+0x6d2>
  406b8a:	2330      	movs	r3, #48	; 0x30
  406b8c:	7013      	strb	r3, [r2, #0]
  406b8e:	3701      	adds	r7, #1
  406b90:	4613      	mov	r3, r2
  406b92:	781a      	ldrb	r2, [r3, #0]
  406b94:	3201      	adds	r2, #1
  406b96:	701a      	strb	r2, [r3, #0]
  406b98:	e78e      	b.n	406ab8 <_dtoa_r+0x5f0>
  406b9a:	461d      	mov	r5, r3
  406b9c:	e7ec      	b.n	406b78 <_dtoa_r+0x6b0>
  406b9e:	2200      	movs	r2, #0
  406ba0:	4bb4      	ldr	r3, [pc, #720]	; (406e74 <_dtoa_r+0x9ac>)
  406ba2:	f7fe faa3 	bl	4050ec <__aeabi_dmul>
  406ba6:	2200      	movs	r2, #0
  406ba8:	2300      	movs	r3, #0
  406baa:	4606      	mov	r6, r0
  406bac:	460f      	mov	r7, r1
  406bae:	f7fe fd05 	bl	4055bc <__aeabi_dcmpeq>
  406bb2:	2800      	cmp	r0, #0
  406bb4:	d09b      	beq.n	406aee <_dtoa_r+0x626>
  406bb6:	e7ce      	b.n	406b56 <_dtoa_r+0x68e>
  406bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406bba:	2a00      	cmp	r2, #0
  406bbc:	f000 8129 	beq.w	406e12 <_dtoa_r+0x94a>
  406bc0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  406bc2:	2a01      	cmp	r2, #1
  406bc4:	f300 810e 	bgt.w	406de4 <_dtoa_r+0x91c>
  406bc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  406bca:	2a00      	cmp	r2, #0
  406bcc:	f000 8106 	beq.w	406ddc <_dtoa_r+0x914>
  406bd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406bd4:	9e08      	ldr	r6, [sp, #32]
  406bd6:	4645      	mov	r5, r8
  406bd8:	9a07      	ldr	r2, [sp, #28]
  406bda:	2101      	movs	r1, #1
  406bdc:	441a      	add	r2, r3
  406bde:	4620      	mov	r0, r4
  406be0:	4498      	add	r8, r3
  406be2:	9207      	str	r2, [sp, #28]
  406be4:	f000 fd5a 	bl	40769c <__i2b>
  406be8:	4607      	mov	r7, r0
  406bea:	2d00      	cmp	r5, #0
  406bec:	dd0b      	ble.n	406c06 <_dtoa_r+0x73e>
  406bee:	9b07      	ldr	r3, [sp, #28]
  406bf0:	2b00      	cmp	r3, #0
  406bf2:	dd08      	ble.n	406c06 <_dtoa_r+0x73e>
  406bf4:	42ab      	cmp	r3, r5
  406bf6:	9a07      	ldr	r2, [sp, #28]
  406bf8:	bfa8      	it	ge
  406bfa:	462b      	movge	r3, r5
  406bfc:	eba8 0803 	sub.w	r8, r8, r3
  406c00:	1aed      	subs	r5, r5, r3
  406c02:	1ad3      	subs	r3, r2, r3
  406c04:	9307      	str	r3, [sp, #28]
  406c06:	9b08      	ldr	r3, [sp, #32]
  406c08:	b1fb      	cbz	r3, 406c4a <_dtoa_r+0x782>
  406c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406c0c:	2b00      	cmp	r3, #0
  406c0e:	f000 8104 	beq.w	406e1a <_dtoa_r+0x952>
  406c12:	2e00      	cmp	r6, #0
  406c14:	dd11      	ble.n	406c3a <_dtoa_r+0x772>
  406c16:	4639      	mov	r1, r7
  406c18:	4632      	mov	r2, r6
  406c1a:	4620      	mov	r0, r4
  406c1c:	f000 fdd4 	bl	4077c8 <__pow5mult>
  406c20:	4652      	mov	r2, sl
  406c22:	4601      	mov	r1, r0
  406c24:	4607      	mov	r7, r0
  406c26:	4620      	mov	r0, r4
  406c28:	f000 fd41 	bl	4076ae <__multiply>
  406c2c:	4651      	mov	r1, sl
  406c2e:	900a      	str	r0, [sp, #40]	; 0x28
  406c30:	4620      	mov	r0, r4
  406c32:	f000 fc93 	bl	40755c <_Bfree>
  406c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c38:	469a      	mov	sl, r3
  406c3a:	9b08      	ldr	r3, [sp, #32]
  406c3c:	1b9a      	subs	r2, r3, r6
  406c3e:	d004      	beq.n	406c4a <_dtoa_r+0x782>
  406c40:	4651      	mov	r1, sl
  406c42:	4620      	mov	r0, r4
  406c44:	f000 fdc0 	bl	4077c8 <__pow5mult>
  406c48:	4682      	mov	sl, r0
  406c4a:	2101      	movs	r1, #1
  406c4c:	4620      	mov	r0, r4
  406c4e:	f000 fd25 	bl	40769c <__i2b>
  406c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406c54:	2b00      	cmp	r3, #0
  406c56:	4606      	mov	r6, r0
  406c58:	f340 80e1 	ble.w	406e1e <_dtoa_r+0x956>
  406c5c:	461a      	mov	r2, r3
  406c5e:	4601      	mov	r1, r0
  406c60:	4620      	mov	r0, r4
  406c62:	f000 fdb1 	bl	4077c8 <__pow5mult>
  406c66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  406c68:	2b01      	cmp	r3, #1
  406c6a:	4606      	mov	r6, r0
  406c6c:	f340 80da 	ble.w	406e24 <_dtoa_r+0x95c>
  406c70:	2300      	movs	r3, #0
  406c72:	9308      	str	r3, [sp, #32]
  406c74:	6933      	ldr	r3, [r6, #16]
  406c76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  406c7a:	6918      	ldr	r0, [r3, #16]
  406c7c:	f000 fcc0 	bl	407600 <__hi0bits>
  406c80:	f1c0 0020 	rsb	r0, r0, #32
  406c84:	9b07      	ldr	r3, [sp, #28]
  406c86:	4418      	add	r0, r3
  406c88:	f010 001f 	ands.w	r0, r0, #31
  406c8c:	f000 80f0 	beq.w	406e70 <_dtoa_r+0x9a8>
  406c90:	f1c0 0320 	rsb	r3, r0, #32
  406c94:	2b04      	cmp	r3, #4
  406c96:	f340 80e2 	ble.w	406e5e <_dtoa_r+0x996>
  406c9a:	9b07      	ldr	r3, [sp, #28]
  406c9c:	f1c0 001c 	rsb	r0, r0, #28
  406ca0:	4480      	add	r8, r0
  406ca2:	4405      	add	r5, r0
  406ca4:	4403      	add	r3, r0
  406ca6:	9307      	str	r3, [sp, #28]
  406ca8:	f1b8 0f00 	cmp.w	r8, #0
  406cac:	dd05      	ble.n	406cba <_dtoa_r+0x7f2>
  406cae:	4651      	mov	r1, sl
  406cb0:	4642      	mov	r2, r8
  406cb2:	4620      	mov	r0, r4
  406cb4:	f000 fdd6 	bl	407864 <__lshift>
  406cb8:	4682      	mov	sl, r0
  406cba:	9b07      	ldr	r3, [sp, #28]
  406cbc:	2b00      	cmp	r3, #0
  406cbe:	dd05      	ble.n	406ccc <_dtoa_r+0x804>
  406cc0:	4631      	mov	r1, r6
  406cc2:	461a      	mov	r2, r3
  406cc4:	4620      	mov	r0, r4
  406cc6:	f000 fdcd 	bl	407864 <__lshift>
  406cca:	4606      	mov	r6, r0
  406ccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406cce:	2b00      	cmp	r3, #0
  406cd0:	f000 80d2 	beq.w	406e78 <_dtoa_r+0x9b0>
  406cd4:	4631      	mov	r1, r6
  406cd6:	4650      	mov	r0, sl
  406cd8:	f000 fe15 	bl	407906 <__mcmp>
  406cdc:	2800      	cmp	r0, #0
  406cde:	f280 80cb 	bge.w	406e78 <_dtoa_r+0x9b0>
  406ce2:	2300      	movs	r3, #0
  406ce4:	4651      	mov	r1, sl
  406ce6:	220a      	movs	r2, #10
  406ce8:	4620      	mov	r0, r4
  406cea:	f000 fc4e 	bl	40758a <__multadd>
  406cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406cf0:	f10b 3bff 	add.w	fp, fp, #4294967295
  406cf4:	4682      	mov	sl, r0
  406cf6:	2b00      	cmp	r3, #0
  406cf8:	f000 81aa 	beq.w	407050 <_dtoa_r+0xb88>
  406cfc:	2300      	movs	r3, #0
  406cfe:	4639      	mov	r1, r7
  406d00:	220a      	movs	r2, #10
  406d02:	4620      	mov	r0, r4
  406d04:	f000 fc41 	bl	40758a <__multadd>
  406d08:	9b04      	ldr	r3, [sp, #16]
  406d0a:	2b00      	cmp	r3, #0
  406d0c:	4607      	mov	r7, r0
  406d0e:	dc03      	bgt.n	406d18 <_dtoa_r+0x850>
  406d10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  406d12:	2b02      	cmp	r3, #2
  406d14:	f300 80b8 	bgt.w	406e88 <_dtoa_r+0x9c0>
  406d18:	2d00      	cmp	r5, #0
  406d1a:	dd05      	ble.n	406d28 <_dtoa_r+0x860>
  406d1c:	4639      	mov	r1, r7
  406d1e:	462a      	mov	r2, r5
  406d20:	4620      	mov	r0, r4
  406d22:	f000 fd9f 	bl	407864 <__lshift>
  406d26:	4607      	mov	r7, r0
  406d28:	9b08      	ldr	r3, [sp, #32]
  406d2a:	2b00      	cmp	r3, #0
  406d2c:	f000 8110 	beq.w	406f50 <_dtoa_r+0xa88>
  406d30:	6879      	ldr	r1, [r7, #4]
  406d32:	4620      	mov	r0, r4
  406d34:	f000 fbde 	bl	4074f4 <_Balloc>
  406d38:	693a      	ldr	r2, [r7, #16]
  406d3a:	3202      	adds	r2, #2
  406d3c:	4605      	mov	r5, r0
  406d3e:	0092      	lsls	r2, r2, #2
  406d40:	f107 010c 	add.w	r1, r7, #12
  406d44:	300c      	adds	r0, #12
  406d46:	f7fe fd2b 	bl	4057a0 <memcpy>
  406d4a:	2201      	movs	r2, #1
  406d4c:	4629      	mov	r1, r5
  406d4e:	4620      	mov	r0, r4
  406d50:	f000 fd88 	bl	407864 <__lshift>
  406d54:	9b02      	ldr	r3, [sp, #8]
  406d56:	f8dd 8018 	ldr.w	r8, [sp, #24]
  406d5a:	9707      	str	r7, [sp, #28]
  406d5c:	f003 0301 	and.w	r3, r3, #1
  406d60:	4607      	mov	r7, r0
  406d62:	9308      	str	r3, [sp, #32]
  406d64:	4631      	mov	r1, r6
  406d66:	4650      	mov	r0, sl
  406d68:	f7ff fb20 	bl	4063ac <quorem>
  406d6c:	9907      	ldr	r1, [sp, #28]
  406d6e:	4605      	mov	r5, r0
  406d70:	f100 0930 	add.w	r9, r0, #48	; 0x30
  406d74:	4650      	mov	r0, sl
  406d76:	f000 fdc6 	bl	407906 <__mcmp>
  406d7a:	463a      	mov	r2, r7
  406d7c:	9002      	str	r0, [sp, #8]
  406d7e:	4631      	mov	r1, r6
  406d80:	4620      	mov	r0, r4
  406d82:	f000 fdda 	bl	40793a <__mdiff>
  406d86:	68c3      	ldr	r3, [r0, #12]
  406d88:	4602      	mov	r2, r0
  406d8a:	2b00      	cmp	r3, #0
  406d8c:	f040 80e2 	bne.w	406f54 <_dtoa_r+0xa8c>
  406d90:	4601      	mov	r1, r0
  406d92:	9009      	str	r0, [sp, #36]	; 0x24
  406d94:	4650      	mov	r0, sl
  406d96:	f000 fdb6 	bl	407906 <__mcmp>
  406d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406d9c:	4603      	mov	r3, r0
  406d9e:	4611      	mov	r1, r2
  406da0:	4620      	mov	r0, r4
  406da2:	9309      	str	r3, [sp, #36]	; 0x24
  406da4:	f000 fbda 	bl	40755c <_Bfree>
  406da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406daa:	2b00      	cmp	r3, #0
  406dac:	f040 80d4 	bne.w	406f58 <_dtoa_r+0xa90>
  406db0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  406db2:	2a00      	cmp	r2, #0
  406db4:	f040 80d0 	bne.w	406f58 <_dtoa_r+0xa90>
  406db8:	9a08      	ldr	r2, [sp, #32]
  406dba:	2a00      	cmp	r2, #0
  406dbc:	f040 80cc 	bne.w	406f58 <_dtoa_r+0xa90>
  406dc0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  406dc4:	f000 80e8 	beq.w	406f98 <_dtoa_r+0xad0>
  406dc8:	9b02      	ldr	r3, [sp, #8]
  406dca:	2b00      	cmp	r3, #0
  406dcc:	dd01      	ble.n	406dd2 <_dtoa_r+0x90a>
  406dce:	f105 0931 	add.w	r9, r5, #49	; 0x31
  406dd2:	f108 0501 	add.w	r5, r8, #1
  406dd6:	f888 9000 	strb.w	r9, [r8]
  406dda:	e06a      	b.n	406eb2 <_dtoa_r+0x9ea>
  406ddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406dde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406de2:	e6f7      	b.n	406bd4 <_dtoa_r+0x70c>
  406de4:	9b08      	ldr	r3, [sp, #32]
  406de6:	f109 36ff 	add.w	r6, r9, #4294967295
  406dea:	42b3      	cmp	r3, r6
  406dec:	bfbf      	itttt	lt
  406dee:	9b08      	ldrlt	r3, [sp, #32]
  406df0:	9608      	strlt	r6, [sp, #32]
  406df2:	1af2      	sublt	r2, r6, r3
  406df4:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  406df6:	bfb7      	itett	lt
  406df8:	189b      	addlt	r3, r3, r2
  406dfa:	1b9e      	subge	r6, r3, r6
  406dfc:	930c      	strlt	r3, [sp, #48]	; 0x30
  406dfe:	2600      	movlt	r6, #0
  406e00:	f1b9 0f00 	cmp.w	r9, #0
  406e04:	bfb9      	ittee	lt
  406e06:	eba8 0509 	sublt.w	r5, r8, r9
  406e0a:	2300      	movlt	r3, #0
  406e0c:	4645      	movge	r5, r8
  406e0e:	464b      	movge	r3, r9
  406e10:	e6e2      	b.n	406bd8 <_dtoa_r+0x710>
  406e12:	9e08      	ldr	r6, [sp, #32]
  406e14:	9f09      	ldr	r7, [sp, #36]	; 0x24
  406e16:	4645      	mov	r5, r8
  406e18:	e6e7      	b.n	406bea <_dtoa_r+0x722>
  406e1a:	9a08      	ldr	r2, [sp, #32]
  406e1c:	e710      	b.n	406c40 <_dtoa_r+0x778>
  406e1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  406e20:	2b01      	cmp	r3, #1
  406e22:	dc18      	bgt.n	406e56 <_dtoa_r+0x98e>
  406e24:	9b02      	ldr	r3, [sp, #8]
  406e26:	b9b3      	cbnz	r3, 406e56 <_dtoa_r+0x98e>
  406e28:	9b03      	ldr	r3, [sp, #12]
  406e2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  406e2e:	b9a3      	cbnz	r3, 406e5a <_dtoa_r+0x992>
  406e30:	9b03      	ldr	r3, [sp, #12]
  406e32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  406e36:	0d1b      	lsrs	r3, r3, #20
  406e38:	051b      	lsls	r3, r3, #20
  406e3a:	b12b      	cbz	r3, 406e48 <_dtoa_r+0x980>
  406e3c:	9b07      	ldr	r3, [sp, #28]
  406e3e:	3301      	adds	r3, #1
  406e40:	9307      	str	r3, [sp, #28]
  406e42:	f108 0801 	add.w	r8, r8, #1
  406e46:	2301      	movs	r3, #1
  406e48:	9308      	str	r3, [sp, #32]
  406e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406e4c:	2b00      	cmp	r3, #0
  406e4e:	f47f af11 	bne.w	406c74 <_dtoa_r+0x7ac>
  406e52:	2001      	movs	r0, #1
  406e54:	e716      	b.n	406c84 <_dtoa_r+0x7bc>
  406e56:	2300      	movs	r3, #0
  406e58:	e7f6      	b.n	406e48 <_dtoa_r+0x980>
  406e5a:	9b02      	ldr	r3, [sp, #8]
  406e5c:	e7f4      	b.n	406e48 <_dtoa_r+0x980>
  406e5e:	f43f af23 	beq.w	406ca8 <_dtoa_r+0x7e0>
  406e62:	9a07      	ldr	r2, [sp, #28]
  406e64:	331c      	adds	r3, #28
  406e66:	441a      	add	r2, r3
  406e68:	4498      	add	r8, r3
  406e6a:	441d      	add	r5, r3
  406e6c:	4613      	mov	r3, r2
  406e6e:	e71a      	b.n	406ca6 <_dtoa_r+0x7de>
  406e70:	4603      	mov	r3, r0
  406e72:	e7f6      	b.n	406e62 <_dtoa_r+0x99a>
  406e74:	40240000 	.word	0x40240000
  406e78:	f1b9 0f00 	cmp.w	r9, #0
  406e7c:	dc33      	bgt.n	406ee6 <_dtoa_r+0xa1e>
  406e7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  406e80:	2b02      	cmp	r3, #2
  406e82:	dd30      	ble.n	406ee6 <_dtoa_r+0xa1e>
  406e84:	f8cd 9010 	str.w	r9, [sp, #16]
  406e88:	9b04      	ldr	r3, [sp, #16]
  406e8a:	b963      	cbnz	r3, 406ea6 <_dtoa_r+0x9de>
  406e8c:	4631      	mov	r1, r6
  406e8e:	2205      	movs	r2, #5
  406e90:	4620      	mov	r0, r4
  406e92:	f000 fb7a 	bl	40758a <__multadd>
  406e96:	4601      	mov	r1, r0
  406e98:	4606      	mov	r6, r0
  406e9a:	4650      	mov	r0, sl
  406e9c:	f000 fd33 	bl	407906 <__mcmp>
  406ea0:	2800      	cmp	r0, #0
  406ea2:	f73f ad5c 	bgt.w	40695e <_dtoa_r+0x496>
  406ea6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406ea8:	9d06      	ldr	r5, [sp, #24]
  406eaa:	ea6f 0b03 	mvn.w	fp, r3
  406eae:	2300      	movs	r3, #0
  406eb0:	9307      	str	r3, [sp, #28]
  406eb2:	4631      	mov	r1, r6
  406eb4:	4620      	mov	r0, r4
  406eb6:	f000 fb51 	bl	40755c <_Bfree>
  406eba:	2f00      	cmp	r7, #0
  406ebc:	f43f ae4b 	beq.w	406b56 <_dtoa_r+0x68e>
  406ec0:	9b07      	ldr	r3, [sp, #28]
  406ec2:	b12b      	cbz	r3, 406ed0 <_dtoa_r+0xa08>
  406ec4:	42bb      	cmp	r3, r7
  406ec6:	d003      	beq.n	406ed0 <_dtoa_r+0xa08>
  406ec8:	4619      	mov	r1, r3
  406eca:	4620      	mov	r0, r4
  406ecc:	f000 fb46 	bl	40755c <_Bfree>
  406ed0:	4639      	mov	r1, r7
  406ed2:	4620      	mov	r0, r4
  406ed4:	f000 fb42 	bl	40755c <_Bfree>
  406ed8:	e63d      	b.n	406b56 <_dtoa_r+0x68e>
  406eda:	2600      	movs	r6, #0
  406edc:	4637      	mov	r7, r6
  406ede:	e7e2      	b.n	406ea6 <_dtoa_r+0x9de>
  406ee0:	46bb      	mov	fp, r7
  406ee2:	4637      	mov	r7, r6
  406ee4:	e53b      	b.n	40695e <_dtoa_r+0x496>
  406ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406ee8:	f8cd 9010 	str.w	r9, [sp, #16]
  406eec:	2b00      	cmp	r3, #0
  406eee:	f47f af13 	bne.w	406d18 <_dtoa_r+0x850>
  406ef2:	9d06      	ldr	r5, [sp, #24]
  406ef4:	4631      	mov	r1, r6
  406ef6:	4650      	mov	r0, sl
  406ef8:	f7ff fa58 	bl	4063ac <quorem>
  406efc:	f100 0930 	add.w	r9, r0, #48	; 0x30
  406f00:	f805 9b01 	strb.w	r9, [r5], #1
  406f04:	9b06      	ldr	r3, [sp, #24]
  406f06:	9a04      	ldr	r2, [sp, #16]
  406f08:	1aeb      	subs	r3, r5, r3
  406f0a:	429a      	cmp	r2, r3
  406f0c:	f300 8083 	bgt.w	407016 <_dtoa_r+0xb4e>
  406f10:	9b06      	ldr	r3, [sp, #24]
  406f12:	2a01      	cmp	r2, #1
  406f14:	bfac      	ite	ge
  406f16:	189b      	addge	r3, r3, r2
  406f18:	3301      	addlt	r3, #1
  406f1a:	4698      	mov	r8, r3
  406f1c:	2300      	movs	r3, #0
  406f1e:	9307      	str	r3, [sp, #28]
  406f20:	4651      	mov	r1, sl
  406f22:	2201      	movs	r2, #1
  406f24:	4620      	mov	r0, r4
  406f26:	f000 fc9d 	bl	407864 <__lshift>
  406f2a:	4631      	mov	r1, r6
  406f2c:	4682      	mov	sl, r0
  406f2e:	f000 fcea 	bl	407906 <__mcmp>
  406f32:	2800      	cmp	r0, #0
  406f34:	dc35      	bgt.n	406fa2 <_dtoa_r+0xada>
  406f36:	d102      	bne.n	406f3e <_dtoa_r+0xa76>
  406f38:	f019 0f01 	tst.w	r9, #1
  406f3c:	d131      	bne.n	406fa2 <_dtoa_r+0xada>
  406f3e:	4645      	mov	r5, r8
  406f40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406f44:	2b30      	cmp	r3, #48	; 0x30
  406f46:	f105 32ff 	add.w	r2, r5, #4294967295
  406f4a:	d1b2      	bne.n	406eb2 <_dtoa_r+0x9ea>
  406f4c:	4615      	mov	r5, r2
  406f4e:	e7f7      	b.n	406f40 <_dtoa_r+0xa78>
  406f50:	4638      	mov	r0, r7
  406f52:	e6ff      	b.n	406d54 <_dtoa_r+0x88c>
  406f54:	2301      	movs	r3, #1
  406f56:	e722      	b.n	406d9e <_dtoa_r+0x8d6>
  406f58:	9a02      	ldr	r2, [sp, #8]
  406f5a:	2a00      	cmp	r2, #0
  406f5c:	db04      	blt.n	406f68 <_dtoa_r+0xaa0>
  406f5e:	d129      	bne.n	406fb4 <_dtoa_r+0xaec>
  406f60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  406f62:	bb3a      	cbnz	r2, 406fb4 <_dtoa_r+0xaec>
  406f64:	9a08      	ldr	r2, [sp, #32]
  406f66:	bb2a      	cbnz	r2, 406fb4 <_dtoa_r+0xaec>
  406f68:	2b00      	cmp	r3, #0
  406f6a:	f77f af32 	ble.w	406dd2 <_dtoa_r+0x90a>
  406f6e:	4651      	mov	r1, sl
  406f70:	2201      	movs	r2, #1
  406f72:	4620      	mov	r0, r4
  406f74:	f000 fc76 	bl	407864 <__lshift>
  406f78:	4631      	mov	r1, r6
  406f7a:	4682      	mov	sl, r0
  406f7c:	f000 fcc3 	bl	407906 <__mcmp>
  406f80:	2800      	cmp	r0, #0
  406f82:	dc05      	bgt.n	406f90 <_dtoa_r+0xac8>
  406f84:	f47f af25 	bne.w	406dd2 <_dtoa_r+0x90a>
  406f88:	f019 0f01 	tst.w	r9, #1
  406f8c:	f43f af21 	beq.w	406dd2 <_dtoa_r+0x90a>
  406f90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  406f94:	f47f af1b 	bne.w	406dce <_dtoa_r+0x906>
  406f98:	2339      	movs	r3, #57	; 0x39
  406f9a:	f888 3000 	strb.w	r3, [r8]
  406f9e:	f108 0801 	add.w	r8, r8, #1
  406fa2:	4645      	mov	r5, r8
  406fa4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406fa8:	2b39      	cmp	r3, #57	; 0x39
  406faa:	f105 32ff 	add.w	r2, r5, #4294967295
  406fae:	d03a      	beq.n	407026 <_dtoa_r+0xb5e>
  406fb0:	3301      	adds	r3, #1
  406fb2:	e03f      	b.n	407034 <_dtoa_r+0xb6c>
  406fb4:	2b00      	cmp	r3, #0
  406fb6:	f108 0501 	add.w	r5, r8, #1
  406fba:	dd05      	ble.n	406fc8 <_dtoa_r+0xb00>
  406fbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  406fc0:	d0ea      	beq.n	406f98 <_dtoa_r+0xad0>
  406fc2:	f109 0901 	add.w	r9, r9, #1
  406fc6:	e706      	b.n	406dd6 <_dtoa_r+0x90e>
  406fc8:	9b06      	ldr	r3, [sp, #24]
  406fca:	9a04      	ldr	r2, [sp, #16]
  406fcc:	f805 9c01 	strb.w	r9, [r5, #-1]
  406fd0:	1aeb      	subs	r3, r5, r3
  406fd2:	4293      	cmp	r3, r2
  406fd4:	46a8      	mov	r8, r5
  406fd6:	d0a3      	beq.n	406f20 <_dtoa_r+0xa58>
  406fd8:	4651      	mov	r1, sl
  406fda:	2300      	movs	r3, #0
  406fdc:	220a      	movs	r2, #10
  406fde:	4620      	mov	r0, r4
  406fe0:	f000 fad3 	bl	40758a <__multadd>
  406fe4:	9b07      	ldr	r3, [sp, #28]
  406fe6:	9907      	ldr	r1, [sp, #28]
  406fe8:	42bb      	cmp	r3, r7
  406fea:	4682      	mov	sl, r0
  406fec:	f04f 0300 	mov.w	r3, #0
  406ff0:	f04f 020a 	mov.w	r2, #10
  406ff4:	4620      	mov	r0, r4
  406ff6:	d104      	bne.n	407002 <_dtoa_r+0xb3a>
  406ff8:	f000 fac7 	bl	40758a <__multadd>
  406ffc:	9007      	str	r0, [sp, #28]
  406ffe:	4607      	mov	r7, r0
  407000:	e6b0      	b.n	406d64 <_dtoa_r+0x89c>
  407002:	f000 fac2 	bl	40758a <__multadd>
  407006:	2300      	movs	r3, #0
  407008:	9007      	str	r0, [sp, #28]
  40700a:	220a      	movs	r2, #10
  40700c:	4639      	mov	r1, r7
  40700e:	4620      	mov	r0, r4
  407010:	f000 fabb 	bl	40758a <__multadd>
  407014:	e7f3      	b.n	406ffe <_dtoa_r+0xb36>
  407016:	4651      	mov	r1, sl
  407018:	2300      	movs	r3, #0
  40701a:	220a      	movs	r2, #10
  40701c:	4620      	mov	r0, r4
  40701e:	f000 fab4 	bl	40758a <__multadd>
  407022:	4682      	mov	sl, r0
  407024:	e766      	b.n	406ef4 <_dtoa_r+0xa2c>
  407026:	9b06      	ldr	r3, [sp, #24]
  407028:	4293      	cmp	r3, r2
  40702a:	d105      	bne.n	407038 <_dtoa_r+0xb70>
  40702c:	9a06      	ldr	r2, [sp, #24]
  40702e:	f10b 0b01 	add.w	fp, fp, #1
  407032:	2331      	movs	r3, #49	; 0x31
  407034:	7013      	strb	r3, [r2, #0]
  407036:	e73c      	b.n	406eb2 <_dtoa_r+0x9ea>
  407038:	4615      	mov	r5, r2
  40703a:	e7b3      	b.n	406fa4 <_dtoa_r+0xadc>
  40703c:	4b09      	ldr	r3, [pc, #36]	; (407064 <_dtoa_r+0xb9c>)
  40703e:	f7ff baa5 	b.w	40658c <_dtoa_r+0xc4>
  407042:	9b22      	ldr	r3, [sp, #136]	; 0x88
  407044:	2b00      	cmp	r3, #0
  407046:	f47f aa7f 	bne.w	406548 <_dtoa_r+0x80>
  40704a:	4b07      	ldr	r3, [pc, #28]	; (407068 <_dtoa_r+0xba0>)
  40704c:	f7ff ba9e 	b.w	40658c <_dtoa_r+0xc4>
  407050:	9b04      	ldr	r3, [sp, #16]
  407052:	2b00      	cmp	r3, #0
  407054:	f73f af4d 	bgt.w	406ef2 <_dtoa_r+0xa2a>
  407058:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40705a:	2b02      	cmp	r3, #2
  40705c:	f77f af49 	ble.w	406ef2 <_dtoa_r+0xa2a>
  407060:	e712      	b.n	406e88 <_dtoa_r+0x9c0>
  407062:	bf00      	nop
  407064:	0040862c 	.word	0x0040862c
  407068:	00408650 	.word	0x00408650

0040706c <__sflush_r>:
  40706c:	898a      	ldrh	r2, [r1, #12]
  40706e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407072:	4605      	mov	r5, r0
  407074:	0710      	lsls	r0, r2, #28
  407076:	460c      	mov	r4, r1
  407078:	d45a      	bmi.n	407130 <__sflush_r+0xc4>
  40707a:	684b      	ldr	r3, [r1, #4]
  40707c:	2b00      	cmp	r3, #0
  40707e:	dc05      	bgt.n	40708c <__sflush_r+0x20>
  407080:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  407082:	2b00      	cmp	r3, #0
  407084:	dc02      	bgt.n	40708c <__sflush_r+0x20>
  407086:	2000      	movs	r0, #0
  407088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40708c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40708e:	2e00      	cmp	r6, #0
  407090:	d0f9      	beq.n	407086 <__sflush_r+0x1a>
  407092:	2300      	movs	r3, #0
  407094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  407098:	682f      	ldr	r7, [r5, #0]
  40709a:	602b      	str	r3, [r5, #0]
  40709c:	d033      	beq.n	407106 <__sflush_r+0x9a>
  40709e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4070a0:	89a3      	ldrh	r3, [r4, #12]
  4070a2:	075a      	lsls	r2, r3, #29
  4070a4:	d505      	bpl.n	4070b2 <__sflush_r+0x46>
  4070a6:	6863      	ldr	r3, [r4, #4]
  4070a8:	1ac0      	subs	r0, r0, r3
  4070aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4070ac:	b10b      	cbz	r3, 4070b2 <__sflush_r+0x46>
  4070ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4070b0:	1ac0      	subs	r0, r0, r3
  4070b2:	2300      	movs	r3, #0
  4070b4:	4602      	mov	r2, r0
  4070b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4070b8:	6a21      	ldr	r1, [r4, #32]
  4070ba:	4628      	mov	r0, r5
  4070bc:	47b0      	blx	r6
  4070be:	1c43      	adds	r3, r0, #1
  4070c0:	89a3      	ldrh	r3, [r4, #12]
  4070c2:	d106      	bne.n	4070d2 <__sflush_r+0x66>
  4070c4:	6829      	ldr	r1, [r5, #0]
  4070c6:	291d      	cmp	r1, #29
  4070c8:	d84b      	bhi.n	407162 <__sflush_r+0xf6>
  4070ca:	4a2b      	ldr	r2, [pc, #172]	; (407178 <__sflush_r+0x10c>)
  4070cc:	40ca      	lsrs	r2, r1
  4070ce:	07d6      	lsls	r6, r2, #31
  4070d0:	d547      	bpl.n	407162 <__sflush_r+0xf6>
  4070d2:	2200      	movs	r2, #0
  4070d4:	6062      	str	r2, [r4, #4]
  4070d6:	04d9      	lsls	r1, r3, #19
  4070d8:	6922      	ldr	r2, [r4, #16]
  4070da:	6022      	str	r2, [r4, #0]
  4070dc:	d504      	bpl.n	4070e8 <__sflush_r+0x7c>
  4070de:	1c42      	adds	r2, r0, #1
  4070e0:	d101      	bne.n	4070e6 <__sflush_r+0x7a>
  4070e2:	682b      	ldr	r3, [r5, #0]
  4070e4:	b903      	cbnz	r3, 4070e8 <__sflush_r+0x7c>
  4070e6:	6560      	str	r0, [r4, #84]	; 0x54
  4070e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4070ea:	602f      	str	r7, [r5, #0]
  4070ec:	2900      	cmp	r1, #0
  4070ee:	d0ca      	beq.n	407086 <__sflush_r+0x1a>
  4070f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4070f4:	4299      	cmp	r1, r3
  4070f6:	d002      	beq.n	4070fe <__sflush_r+0x92>
  4070f8:	4628      	mov	r0, r5
  4070fa:	f7fe fb65 	bl	4057c8 <_free_r>
  4070fe:	2000      	movs	r0, #0
  407100:	6360      	str	r0, [r4, #52]	; 0x34
  407102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407106:	6a21      	ldr	r1, [r4, #32]
  407108:	2301      	movs	r3, #1
  40710a:	4628      	mov	r0, r5
  40710c:	47b0      	blx	r6
  40710e:	1c41      	adds	r1, r0, #1
  407110:	d1c6      	bne.n	4070a0 <__sflush_r+0x34>
  407112:	682b      	ldr	r3, [r5, #0]
  407114:	2b00      	cmp	r3, #0
  407116:	d0c3      	beq.n	4070a0 <__sflush_r+0x34>
  407118:	2b1d      	cmp	r3, #29
  40711a:	d001      	beq.n	407120 <__sflush_r+0xb4>
  40711c:	2b16      	cmp	r3, #22
  40711e:	d101      	bne.n	407124 <__sflush_r+0xb8>
  407120:	602f      	str	r7, [r5, #0]
  407122:	e7b0      	b.n	407086 <__sflush_r+0x1a>
  407124:	89a3      	ldrh	r3, [r4, #12]
  407126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40712a:	81a3      	strh	r3, [r4, #12]
  40712c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407130:	690f      	ldr	r7, [r1, #16]
  407132:	2f00      	cmp	r7, #0
  407134:	d0a7      	beq.n	407086 <__sflush_r+0x1a>
  407136:	0793      	lsls	r3, r2, #30
  407138:	680e      	ldr	r6, [r1, #0]
  40713a:	bf08      	it	eq
  40713c:	694b      	ldreq	r3, [r1, #20]
  40713e:	600f      	str	r7, [r1, #0]
  407140:	bf18      	it	ne
  407142:	2300      	movne	r3, #0
  407144:	eba6 0807 	sub.w	r8, r6, r7
  407148:	608b      	str	r3, [r1, #8]
  40714a:	f1b8 0f00 	cmp.w	r8, #0
  40714e:	dd9a      	ble.n	407086 <__sflush_r+0x1a>
  407150:	4643      	mov	r3, r8
  407152:	463a      	mov	r2, r7
  407154:	6a21      	ldr	r1, [r4, #32]
  407156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  407158:	4628      	mov	r0, r5
  40715a:	47b0      	blx	r6
  40715c:	2800      	cmp	r0, #0
  40715e:	dc07      	bgt.n	407170 <__sflush_r+0x104>
  407160:	89a3      	ldrh	r3, [r4, #12]
  407162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407166:	81a3      	strh	r3, [r4, #12]
  407168:	f04f 30ff 	mov.w	r0, #4294967295
  40716c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407170:	4407      	add	r7, r0
  407172:	eba8 0800 	sub.w	r8, r8, r0
  407176:	e7e8      	b.n	40714a <__sflush_r+0xde>
  407178:	20400001 	.word	0x20400001

0040717c <_fflush_r>:
  40717c:	b538      	push	{r3, r4, r5, lr}
  40717e:	690b      	ldr	r3, [r1, #16]
  407180:	4605      	mov	r5, r0
  407182:	460c      	mov	r4, r1
  407184:	b1db      	cbz	r3, 4071be <_fflush_r+0x42>
  407186:	b118      	cbz	r0, 407190 <_fflush_r+0x14>
  407188:	6983      	ldr	r3, [r0, #24]
  40718a:	b90b      	cbnz	r3, 407190 <_fflush_r+0x14>
  40718c:	f000 f860 	bl	407250 <__sinit>
  407190:	4b0c      	ldr	r3, [pc, #48]	; (4071c4 <_fflush_r+0x48>)
  407192:	429c      	cmp	r4, r3
  407194:	d109      	bne.n	4071aa <_fflush_r+0x2e>
  407196:	686c      	ldr	r4, [r5, #4]
  407198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40719c:	b17b      	cbz	r3, 4071be <_fflush_r+0x42>
  40719e:	4621      	mov	r1, r4
  4071a0:	4628      	mov	r0, r5
  4071a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4071a6:	f7ff bf61 	b.w	40706c <__sflush_r>
  4071aa:	4b07      	ldr	r3, [pc, #28]	; (4071c8 <_fflush_r+0x4c>)
  4071ac:	429c      	cmp	r4, r3
  4071ae:	d101      	bne.n	4071b4 <_fflush_r+0x38>
  4071b0:	68ac      	ldr	r4, [r5, #8]
  4071b2:	e7f1      	b.n	407198 <_fflush_r+0x1c>
  4071b4:	4b05      	ldr	r3, [pc, #20]	; (4071cc <_fflush_r+0x50>)
  4071b6:	429c      	cmp	r4, r3
  4071b8:	bf08      	it	eq
  4071ba:	68ec      	ldreq	r4, [r5, #12]
  4071bc:	e7ec      	b.n	407198 <_fflush_r+0x1c>
  4071be:	2000      	movs	r0, #0
  4071c0:	bd38      	pop	{r3, r4, r5, pc}
  4071c2:	bf00      	nop
  4071c4:	00408680 	.word	0x00408680
  4071c8:	004086a0 	.word	0x004086a0
  4071cc:	00408660 	.word	0x00408660

004071d0 <_cleanup_r>:
  4071d0:	4901      	ldr	r1, [pc, #4]	; (4071d8 <_cleanup_r+0x8>)
  4071d2:	f000 b8a9 	b.w	407328 <_fwalk_reent>
  4071d6:	bf00      	nop
  4071d8:	0040717d 	.word	0x0040717d

004071dc <std.isra.0>:
  4071dc:	2300      	movs	r3, #0
  4071de:	b510      	push	{r4, lr}
  4071e0:	4604      	mov	r4, r0
  4071e2:	6003      	str	r3, [r0, #0]
  4071e4:	6043      	str	r3, [r0, #4]
  4071e6:	6083      	str	r3, [r0, #8]
  4071e8:	8181      	strh	r1, [r0, #12]
  4071ea:	6643      	str	r3, [r0, #100]	; 0x64
  4071ec:	81c2      	strh	r2, [r0, #14]
  4071ee:	6103      	str	r3, [r0, #16]
  4071f0:	6143      	str	r3, [r0, #20]
  4071f2:	6183      	str	r3, [r0, #24]
  4071f4:	4619      	mov	r1, r3
  4071f6:	2208      	movs	r2, #8
  4071f8:	305c      	adds	r0, #92	; 0x5c
  4071fa:	f7fe fadc 	bl	4057b6 <memset>
  4071fe:	4b05      	ldr	r3, [pc, #20]	; (407214 <std.isra.0+0x38>)
  407200:	6263      	str	r3, [r4, #36]	; 0x24
  407202:	4b05      	ldr	r3, [pc, #20]	; (407218 <std.isra.0+0x3c>)
  407204:	62a3      	str	r3, [r4, #40]	; 0x28
  407206:	4b05      	ldr	r3, [pc, #20]	; (40721c <std.isra.0+0x40>)
  407208:	62e3      	str	r3, [r4, #44]	; 0x2c
  40720a:	4b05      	ldr	r3, [pc, #20]	; (407220 <std.isra.0+0x44>)
  40720c:	6224      	str	r4, [r4, #32]
  40720e:	6323      	str	r3, [r4, #48]	; 0x30
  407210:	bd10      	pop	{r4, pc}
  407212:	bf00      	nop
  407214:	00407d2d 	.word	0x00407d2d
  407218:	00407d4f 	.word	0x00407d4f
  40721c:	00407d87 	.word	0x00407d87
  407220:	00407dab 	.word	0x00407dab

00407224 <__sfmoreglue>:
  407224:	b570      	push	{r4, r5, r6, lr}
  407226:	1e4a      	subs	r2, r1, #1
  407228:	2568      	movs	r5, #104	; 0x68
  40722a:	4355      	muls	r5, r2
  40722c:	460e      	mov	r6, r1
  40722e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  407232:	f7fe fb17 	bl	405864 <_malloc_r>
  407236:	4604      	mov	r4, r0
  407238:	b140      	cbz	r0, 40724c <__sfmoreglue+0x28>
  40723a:	2100      	movs	r1, #0
  40723c:	e880 0042 	stmia.w	r0, {r1, r6}
  407240:	300c      	adds	r0, #12
  407242:	60a0      	str	r0, [r4, #8]
  407244:	f105 0268 	add.w	r2, r5, #104	; 0x68
  407248:	f7fe fab5 	bl	4057b6 <memset>
  40724c:	4620      	mov	r0, r4
  40724e:	bd70      	pop	{r4, r5, r6, pc}

00407250 <__sinit>:
  407250:	6983      	ldr	r3, [r0, #24]
  407252:	b510      	push	{r4, lr}
  407254:	4604      	mov	r4, r0
  407256:	bb33      	cbnz	r3, 4072a6 <__sinit+0x56>
  407258:	6483      	str	r3, [r0, #72]	; 0x48
  40725a:	64c3      	str	r3, [r0, #76]	; 0x4c
  40725c:	6503      	str	r3, [r0, #80]	; 0x50
  40725e:	4b12      	ldr	r3, [pc, #72]	; (4072a8 <__sinit+0x58>)
  407260:	4a12      	ldr	r2, [pc, #72]	; (4072ac <__sinit+0x5c>)
  407262:	681b      	ldr	r3, [r3, #0]
  407264:	6282      	str	r2, [r0, #40]	; 0x28
  407266:	4298      	cmp	r0, r3
  407268:	bf04      	itt	eq
  40726a:	2301      	moveq	r3, #1
  40726c:	6183      	streq	r3, [r0, #24]
  40726e:	f000 f81f 	bl	4072b0 <__sfp>
  407272:	6060      	str	r0, [r4, #4]
  407274:	4620      	mov	r0, r4
  407276:	f000 f81b 	bl	4072b0 <__sfp>
  40727a:	60a0      	str	r0, [r4, #8]
  40727c:	4620      	mov	r0, r4
  40727e:	f000 f817 	bl	4072b0 <__sfp>
  407282:	2200      	movs	r2, #0
  407284:	60e0      	str	r0, [r4, #12]
  407286:	2104      	movs	r1, #4
  407288:	6860      	ldr	r0, [r4, #4]
  40728a:	f7ff ffa7 	bl	4071dc <std.isra.0>
  40728e:	2201      	movs	r2, #1
  407290:	2109      	movs	r1, #9
  407292:	68a0      	ldr	r0, [r4, #8]
  407294:	f7ff ffa2 	bl	4071dc <std.isra.0>
  407298:	2202      	movs	r2, #2
  40729a:	2112      	movs	r1, #18
  40729c:	68e0      	ldr	r0, [r4, #12]
  40729e:	f7ff ff9d 	bl	4071dc <std.isra.0>
  4072a2:	2301      	movs	r3, #1
  4072a4:	61a3      	str	r3, [r4, #24]
  4072a6:	bd10      	pop	{r4, pc}
  4072a8:	00408618 	.word	0x00408618
  4072ac:	004071d1 	.word	0x004071d1

004072b0 <__sfp>:
  4072b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4072b2:	4b1c      	ldr	r3, [pc, #112]	; (407324 <__sfp+0x74>)
  4072b4:	681e      	ldr	r6, [r3, #0]
  4072b6:	69b3      	ldr	r3, [r6, #24]
  4072b8:	4607      	mov	r7, r0
  4072ba:	b913      	cbnz	r3, 4072c2 <__sfp+0x12>
  4072bc:	4630      	mov	r0, r6
  4072be:	f7ff ffc7 	bl	407250 <__sinit>
  4072c2:	3648      	adds	r6, #72	; 0x48
  4072c4:	68b4      	ldr	r4, [r6, #8]
  4072c6:	6873      	ldr	r3, [r6, #4]
  4072c8:	3b01      	subs	r3, #1
  4072ca:	d503      	bpl.n	4072d4 <__sfp+0x24>
  4072cc:	6833      	ldr	r3, [r6, #0]
  4072ce:	b133      	cbz	r3, 4072de <__sfp+0x2e>
  4072d0:	6836      	ldr	r6, [r6, #0]
  4072d2:	e7f7      	b.n	4072c4 <__sfp+0x14>
  4072d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  4072d8:	b16d      	cbz	r5, 4072f6 <__sfp+0x46>
  4072da:	3468      	adds	r4, #104	; 0x68
  4072dc:	e7f4      	b.n	4072c8 <__sfp+0x18>
  4072de:	2104      	movs	r1, #4
  4072e0:	4638      	mov	r0, r7
  4072e2:	f7ff ff9f 	bl	407224 <__sfmoreglue>
  4072e6:	6030      	str	r0, [r6, #0]
  4072e8:	2800      	cmp	r0, #0
  4072ea:	d1f1      	bne.n	4072d0 <__sfp+0x20>
  4072ec:	230c      	movs	r3, #12
  4072ee:	603b      	str	r3, [r7, #0]
  4072f0:	4604      	mov	r4, r0
  4072f2:	4620      	mov	r0, r4
  4072f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4072f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4072fa:	81e3      	strh	r3, [r4, #14]
  4072fc:	2301      	movs	r3, #1
  4072fe:	81a3      	strh	r3, [r4, #12]
  407300:	6665      	str	r5, [r4, #100]	; 0x64
  407302:	6025      	str	r5, [r4, #0]
  407304:	60a5      	str	r5, [r4, #8]
  407306:	6065      	str	r5, [r4, #4]
  407308:	6125      	str	r5, [r4, #16]
  40730a:	6165      	str	r5, [r4, #20]
  40730c:	61a5      	str	r5, [r4, #24]
  40730e:	2208      	movs	r2, #8
  407310:	4629      	mov	r1, r5
  407312:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  407316:	f7fe fa4e 	bl	4057b6 <memset>
  40731a:	6365      	str	r5, [r4, #52]	; 0x34
  40731c:	63a5      	str	r5, [r4, #56]	; 0x38
  40731e:	64a5      	str	r5, [r4, #72]	; 0x48
  407320:	64e5      	str	r5, [r4, #76]	; 0x4c
  407322:	e7e6      	b.n	4072f2 <__sfp+0x42>
  407324:	00408618 	.word	0x00408618

00407328 <_fwalk_reent>:
  407328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40732c:	4680      	mov	r8, r0
  40732e:	4689      	mov	r9, r1
  407330:	f100 0448 	add.w	r4, r0, #72	; 0x48
  407334:	2600      	movs	r6, #0
  407336:	b914      	cbnz	r4, 40733e <_fwalk_reent+0x16>
  407338:	4630      	mov	r0, r6
  40733a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40733e:	68a5      	ldr	r5, [r4, #8]
  407340:	6867      	ldr	r7, [r4, #4]
  407342:	3f01      	subs	r7, #1
  407344:	d501      	bpl.n	40734a <_fwalk_reent+0x22>
  407346:	6824      	ldr	r4, [r4, #0]
  407348:	e7f5      	b.n	407336 <_fwalk_reent+0xe>
  40734a:	89ab      	ldrh	r3, [r5, #12]
  40734c:	2b01      	cmp	r3, #1
  40734e:	d907      	bls.n	407360 <_fwalk_reent+0x38>
  407350:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  407354:	3301      	adds	r3, #1
  407356:	d003      	beq.n	407360 <_fwalk_reent+0x38>
  407358:	4629      	mov	r1, r5
  40735a:	4640      	mov	r0, r8
  40735c:	47c8      	blx	r9
  40735e:	4306      	orrs	r6, r0
  407360:	3568      	adds	r5, #104	; 0x68
  407362:	e7ee      	b.n	407342 <_fwalk_reent+0x1a>

00407364 <_localeconv_r>:
  407364:	4b04      	ldr	r3, [pc, #16]	; (407378 <_localeconv_r+0x14>)
  407366:	681b      	ldr	r3, [r3, #0]
  407368:	6a18      	ldr	r0, [r3, #32]
  40736a:	4b04      	ldr	r3, [pc, #16]	; (40737c <_localeconv_r+0x18>)
  40736c:	2800      	cmp	r0, #0
  40736e:	bf08      	it	eq
  407370:	4618      	moveq	r0, r3
  407372:	30f0      	adds	r0, #240	; 0xf0
  407374:	4770      	bx	lr
  407376:	bf00      	nop
  407378:	2040004c 	.word	0x2040004c
  40737c:	204000b0 	.word	0x204000b0

00407380 <__swhatbuf_r>:
  407380:	b570      	push	{r4, r5, r6, lr}
  407382:	460e      	mov	r6, r1
  407384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407388:	2900      	cmp	r1, #0
  40738a:	b090      	sub	sp, #64	; 0x40
  40738c:	4614      	mov	r4, r2
  40738e:	461d      	mov	r5, r3
  407390:	da07      	bge.n	4073a2 <__swhatbuf_r+0x22>
  407392:	2300      	movs	r3, #0
  407394:	602b      	str	r3, [r5, #0]
  407396:	89b3      	ldrh	r3, [r6, #12]
  407398:	061a      	lsls	r2, r3, #24
  40739a:	d410      	bmi.n	4073be <__swhatbuf_r+0x3e>
  40739c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4073a0:	e00e      	b.n	4073c0 <__swhatbuf_r+0x40>
  4073a2:	aa01      	add	r2, sp, #4
  4073a4:	f000 fde8 	bl	407f78 <_fstat_r>
  4073a8:	2800      	cmp	r0, #0
  4073aa:	dbf2      	blt.n	407392 <__swhatbuf_r+0x12>
  4073ac:	9a02      	ldr	r2, [sp, #8]
  4073ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4073b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  4073b6:	425a      	negs	r2, r3
  4073b8:	415a      	adcs	r2, r3
  4073ba:	602a      	str	r2, [r5, #0]
  4073bc:	e7ee      	b.n	40739c <__swhatbuf_r+0x1c>
  4073be:	2340      	movs	r3, #64	; 0x40
  4073c0:	2000      	movs	r0, #0
  4073c2:	6023      	str	r3, [r4, #0]
  4073c4:	b010      	add	sp, #64	; 0x40
  4073c6:	bd70      	pop	{r4, r5, r6, pc}

004073c8 <__smakebuf_r>:
  4073c8:	898b      	ldrh	r3, [r1, #12]
  4073ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  4073cc:	079d      	lsls	r5, r3, #30
  4073ce:	4606      	mov	r6, r0
  4073d0:	460c      	mov	r4, r1
  4073d2:	d507      	bpl.n	4073e4 <__smakebuf_r+0x1c>
  4073d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4073d8:	6023      	str	r3, [r4, #0]
  4073da:	6123      	str	r3, [r4, #16]
  4073dc:	2301      	movs	r3, #1
  4073de:	6163      	str	r3, [r4, #20]
  4073e0:	b002      	add	sp, #8
  4073e2:	bd70      	pop	{r4, r5, r6, pc}
  4073e4:	ab01      	add	r3, sp, #4
  4073e6:	466a      	mov	r2, sp
  4073e8:	f7ff ffca 	bl	407380 <__swhatbuf_r>
  4073ec:	9900      	ldr	r1, [sp, #0]
  4073ee:	4605      	mov	r5, r0
  4073f0:	4630      	mov	r0, r6
  4073f2:	f7fe fa37 	bl	405864 <_malloc_r>
  4073f6:	b948      	cbnz	r0, 40740c <__smakebuf_r+0x44>
  4073f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4073fc:	059a      	lsls	r2, r3, #22
  4073fe:	d4ef      	bmi.n	4073e0 <__smakebuf_r+0x18>
  407400:	f023 0303 	bic.w	r3, r3, #3
  407404:	f043 0302 	orr.w	r3, r3, #2
  407408:	81a3      	strh	r3, [r4, #12]
  40740a:	e7e3      	b.n	4073d4 <__smakebuf_r+0xc>
  40740c:	4b0d      	ldr	r3, [pc, #52]	; (407444 <__smakebuf_r+0x7c>)
  40740e:	62b3      	str	r3, [r6, #40]	; 0x28
  407410:	89a3      	ldrh	r3, [r4, #12]
  407412:	6020      	str	r0, [r4, #0]
  407414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407418:	81a3      	strh	r3, [r4, #12]
  40741a:	9b00      	ldr	r3, [sp, #0]
  40741c:	6163      	str	r3, [r4, #20]
  40741e:	9b01      	ldr	r3, [sp, #4]
  407420:	6120      	str	r0, [r4, #16]
  407422:	b15b      	cbz	r3, 40743c <__smakebuf_r+0x74>
  407424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407428:	4630      	mov	r0, r6
  40742a:	f000 fdb7 	bl	407f9c <_isatty_r>
  40742e:	b128      	cbz	r0, 40743c <__smakebuf_r+0x74>
  407430:	89a3      	ldrh	r3, [r4, #12]
  407432:	f023 0303 	bic.w	r3, r3, #3
  407436:	f043 0301 	orr.w	r3, r3, #1
  40743a:	81a3      	strh	r3, [r4, #12]
  40743c:	89a3      	ldrh	r3, [r4, #12]
  40743e:	431d      	orrs	r5, r3
  407440:	81a5      	strh	r5, [r4, #12]
  407442:	e7cd      	b.n	4073e0 <__smakebuf_r+0x18>
  407444:	004071d1 	.word	0x004071d1
	...

00407450 <memchr>:
  407450:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407454:	2a10      	cmp	r2, #16
  407456:	db2b      	blt.n	4074b0 <memchr+0x60>
  407458:	f010 0f07 	tst.w	r0, #7
  40745c:	d008      	beq.n	407470 <memchr+0x20>
  40745e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407462:	3a01      	subs	r2, #1
  407464:	428b      	cmp	r3, r1
  407466:	d02d      	beq.n	4074c4 <memchr+0x74>
  407468:	f010 0f07 	tst.w	r0, #7
  40746c:	b342      	cbz	r2, 4074c0 <memchr+0x70>
  40746e:	d1f6      	bne.n	40745e <memchr+0xe>
  407470:	b4f0      	push	{r4, r5, r6, r7}
  407472:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407476:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40747a:	f022 0407 	bic.w	r4, r2, #7
  40747e:	f07f 0700 	mvns.w	r7, #0
  407482:	2300      	movs	r3, #0
  407484:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407488:	3c08      	subs	r4, #8
  40748a:	ea85 0501 	eor.w	r5, r5, r1
  40748e:	ea86 0601 	eor.w	r6, r6, r1
  407492:	fa85 f547 	uadd8	r5, r5, r7
  407496:	faa3 f587 	sel	r5, r3, r7
  40749a:	fa86 f647 	uadd8	r6, r6, r7
  40749e:	faa5 f687 	sel	r6, r5, r7
  4074a2:	b98e      	cbnz	r6, 4074c8 <memchr+0x78>
  4074a4:	d1ee      	bne.n	407484 <memchr+0x34>
  4074a6:	bcf0      	pop	{r4, r5, r6, r7}
  4074a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4074ac:	f002 0207 	and.w	r2, r2, #7
  4074b0:	b132      	cbz	r2, 4074c0 <memchr+0x70>
  4074b2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4074b6:	3a01      	subs	r2, #1
  4074b8:	ea83 0301 	eor.w	r3, r3, r1
  4074bc:	b113      	cbz	r3, 4074c4 <memchr+0x74>
  4074be:	d1f8      	bne.n	4074b2 <memchr+0x62>
  4074c0:	2000      	movs	r0, #0
  4074c2:	4770      	bx	lr
  4074c4:	3801      	subs	r0, #1
  4074c6:	4770      	bx	lr
  4074c8:	2d00      	cmp	r5, #0
  4074ca:	bf06      	itte	eq
  4074cc:	4635      	moveq	r5, r6
  4074ce:	3803      	subeq	r0, #3
  4074d0:	3807      	subne	r0, #7
  4074d2:	f015 0f01 	tst.w	r5, #1
  4074d6:	d107      	bne.n	4074e8 <memchr+0x98>
  4074d8:	3001      	adds	r0, #1
  4074da:	f415 7f80 	tst.w	r5, #256	; 0x100
  4074de:	bf02      	ittt	eq
  4074e0:	3001      	addeq	r0, #1
  4074e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4074e6:	3001      	addeq	r0, #1
  4074e8:	bcf0      	pop	{r4, r5, r6, r7}
  4074ea:	3801      	subs	r0, #1
  4074ec:	4770      	bx	lr
  4074ee:	bf00      	nop

004074f0 <__malloc_lock>:
  4074f0:	4770      	bx	lr

004074f2 <__malloc_unlock>:
  4074f2:	4770      	bx	lr

004074f4 <_Balloc>:
  4074f4:	b570      	push	{r4, r5, r6, lr}
  4074f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4074f8:	4604      	mov	r4, r0
  4074fa:	460e      	mov	r6, r1
  4074fc:	b93d      	cbnz	r5, 40750e <_Balloc+0x1a>
  4074fe:	2010      	movs	r0, #16
  407500:	f7fe f946 	bl	405790 <malloc>
  407504:	6260      	str	r0, [r4, #36]	; 0x24
  407506:	6045      	str	r5, [r0, #4]
  407508:	6085      	str	r5, [r0, #8]
  40750a:	6005      	str	r5, [r0, #0]
  40750c:	60c5      	str	r5, [r0, #12]
  40750e:	6a65      	ldr	r5, [r4, #36]	; 0x24
  407510:	68eb      	ldr	r3, [r5, #12]
  407512:	b183      	cbz	r3, 407536 <_Balloc+0x42>
  407514:	6a63      	ldr	r3, [r4, #36]	; 0x24
  407516:	68db      	ldr	r3, [r3, #12]
  407518:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  40751c:	b9b8      	cbnz	r0, 40754e <_Balloc+0x5a>
  40751e:	2101      	movs	r1, #1
  407520:	fa01 f506 	lsl.w	r5, r1, r6
  407524:	1d6a      	adds	r2, r5, #5
  407526:	0092      	lsls	r2, r2, #2
  407528:	4620      	mov	r0, r4
  40752a:	f000 fab3 	bl	407a94 <_calloc_r>
  40752e:	b160      	cbz	r0, 40754a <_Balloc+0x56>
  407530:	6046      	str	r6, [r0, #4]
  407532:	6085      	str	r5, [r0, #8]
  407534:	e00e      	b.n	407554 <_Balloc+0x60>
  407536:	2221      	movs	r2, #33	; 0x21
  407538:	2104      	movs	r1, #4
  40753a:	4620      	mov	r0, r4
  40753c:	f000 faaa 	bl	407a94 <_calloc_r>
  407540:	6a63      	ldr	r3, [r4, #36]	; 0x24
  407542:	60e8      	str	r0, [r5, #12]
  407544:	68db      	ldr	r3, [r3, #12]
  407546:	2b00      	cmp	r3, #0
  407548:	d1e4      	bne.n	407514 <_Balloc+0x20>
  40754a:	2000      	movs	r0, #0
  40754c:	bd70      	pop	{r4, r5, r6, pc}
  40754e:	6802      	ldr	r2, [r0, #0]
  407550:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  407554:	2300      	movs	r3, #0
  407556:	6103      	str	r3, [r0, #16]
  407558:	60c3      	str	r3, [r0, #12]
  40755a:	bd70      	pop	{r4, r5, r6, pc}

0040755c <_Bfree>:
  40755c:	b570      	push	{r4, r5, r6, lr}
  40755e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  407560:	4606      	mov	r6, r0
  407562:	460d      	mov	r5, r1
  407564:	b93c      	cbnz	r4, 407576 <_Bfree+0x1a>
  407566:	2010      	movs	r0, #16
  407568:	f7fe f912 	bl	405790 <malloc>
  40756c:	6270      	str	r0, [r6, #36]	; 0x24
  40756e:	6044      	str	r4, [r0, #4]
  407570:	6084      	str	r4, [r0, #8]
  407572:	6004      	str	r4, [r0, #0]
  407574:	60c4      	str	r4, [r0, #12]
  407576:	b13d      	cbz	r5, 407588 <_Bfree+0x2c>
  407578:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40757a:	686a      	ldr	r2, [r5, #4]
  40757c:	68db      	ldr	r3, [r3, #12]
  40757e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407582:	6029      	str	r1, [r5, #0]
  407584:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  407588:	bd70      	pop	{r4, r5, r6, pc}

0040758a <__multadd>:
  40758a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40758e:	690d      	ldr	r5, [r1, #16]
  407590:	461f      	mov	r7, r3
  407592:	4606      	mov	r6, r0
  407594:	460c      	mov	r4, r1
  407596:	f101 0e14 	add.w	lr, r1, #20
  40759a:	2300      	movs	r3, #0
  40759c:	f8de 0000 	ldr.w	r0, [lr]
  4075a0:	b281      	uxth	r1, r0
  4075a2:	fb02 7101 	mla	r1, r2, r1, r7
  4075a6:	0c0f      	lsrs	r7, r1, #16
  4075a8:	0c00      	lsrs	r0, r0, #16
  4075aa:	fb02 7000 	mla	r0, r2, r0, r7
  4075ae:	b289      	uxth	r1, r1
  4075b0:	3301      	adds	r3, #1
  4075b2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  4075b6:	429d      	cmp	r5, r3
  4075b8:	ea4f 4710 	mov.w	r7, r0, lsr #16
  4075bc:	f84e 1b04 	str.w	r1, [lr], #4
  4075c0:	dcec      	bgt.n	40759c <__multadd+0x12>
  4075c2:	b1d7      	cbz	r7, 4075fa <__multadd+0x70>
  4075c4:	68a3      	ldr	r3, [r4, #8]
  4075c6:	429d      	cmp	r5, r3
  4075c8:	db12      	blt.n	4075f0 <__multadd+0x66>
  4075ca:	6861      	ldr	r1, [r4, #4]
  4075cc:	4630      	mov	r0, r6
  4075ce:	3101      	adds	r1, #1
  4075d0:	f7ff ff90 	bl	4074f4 <_Balloc>
  4075d4:	6922      	ldr	r2, [r4, #16]
  4075d6:	3202      	adds	r2, #2
  4075d8:	f104 010c 	add.w	r1, r4, #12
  4075dc:	4680      	mov	r8, r0
  4075de:	0092      	lsls	r2, r2, #2
  4075e0:	300c      	adds	r0, #12
  4075e2:	f7fe f8dd 	bl	4057a0 <memcpy>
  4075e6:	4621      	mov	r1, r4
  4075e8:	4630      	mov	r0, r6
  4075ea:	f7ff ffb7 	bl	40755c <_Bfree>
  4075ee:	4644      	mov	r4, r8
  4075f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4075f4:	3501      	adds	r5, #1
  4075f6:	615f      	str	r7, [r3, #20]
  4075f8:	6125      	str	r5, [r4, #16]
  4075fa:	4620      	mov	r0, r4
  4075fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407600 <__hi0bits>:
  407600:	0c02      	lsrs	r2, r0, #16
  407602:	0412      	lsls	r2, r2, #16
  407604:	4603      	mov	r3, r0
  407606:	b9b2      	cbnz	r2, 407636 <__hi0bits+0x36>
  407608:	0403      	lsls	r3, r0, #16
  40760a:	2010      	movs	r0, #16
  40760c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  407610:	bf04      	itt	eq
  407612:	021b      	lsleq	r3, r3, #8
  407614:	3008      	addeq	r0, #8
  407616:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40761a:	bf04      	itt	eq
  40761c:	011b      	lsleq	r3, r3, #4
  40761e:	3004      	addeq	r0, #4
  407620:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  407624:	bf04      	itt	eq
  407626:	009b      	lsleq	r3, r3, #2
  407628:	3002      	addeq	r0, #2
  40762a:	2b00      	cmp	r3, #0
  40762c:	db06      	blt.n	40763c <__hi0bits+0x3c>
  40762e:	005b      	lsls	r3, r3, #1
  407630:	d503      	bpl.n	40763a <__hi0bits+0x3a>
  407632:	3001      	adds	r0, #1
  407634:	4770      	bx	lr
  407636:	2000      	movs	r0, #0
  407638:	e7e8      	b.n	40760c <__hi0bits+0xc>
  40763a:	2020      	movs	r0, #32
  40763c:	4770      	bx	lr

0040763e <__lo0bits>:
  40763e:	6803      	ldr	r3, [r0, #0]
  407640:	f013 0207 	ands.w	r2, r3, #7
  407644:	4601      	mov	r1, r0
  407646:	d00b      	beq.n	407660 <__lo0bits+0x22>
  407648:	07da      	lsls	r2, r3, #31
  40764a:	d423      	bmi.n	407694 <__lo0bits+0x56>
  40764c:	0798      	lsls	r0, r3, #30
  40764e:	bf49      	itett	mi
  407650:	085b      	lsrmi	r3, r3, #1
  407652:	089b      	lsrpl	r3, r3, #2
  407654:	2001      	movmi	r0, #1
  407656:	600b      	strmi	r3, [r1, #0]
  407658:	bf5c      	itt	pl
  40765a:	600b      	strpl	r3, [r1, #0]
  40765c:	2002      	movpl	r0, #2
  40765e:	4770      	bx	lr
  407660:	b298      	uxth	r0, r3
  407662:	b9a8      	cbnz	r0, 407690 <__lo0bits+0x52>
  407664:	0c1b      	lsrs	r3, r3, #16
  407666:	2010      	movs	r0, #16
  407668:	f013 0fff 	tst.w	r3, #255	; 0xff
  40766c:	bf04      	itt	eq
  40766e:	0a1b      	lsreq	r3, r3, #8
  407670:	3008      	addeq	r0, #8
  407672:	071a      	lsls	r2, r3, #28
  407674:	bf04      	itt	eq
  407676:	091b      	lsreq	r3, r3, #4
  407678:	3004      	addeq	r0, #4
  40767a:	079a      	lsls	r2, r3, #30
  40767c:	bf04      	itt	eq
  40767e:	089b      	lsreq	r3, r3, #2
  407680:	3002      	addeq	r0, #2
  407682:	07da      	lsls	r2, r3, #31
  407684:	d402      	bmi.n	40768c <__lo0bits+0x4e>
  407686:	085b      	lsrs	r3, r3, #1
  407688:	d006      	beq.n	407698 <__lo0bits+0x5a>
  40768a:	3001      	adds	r0, #1
  40768c:	600b      	str	r3, [r1, #0]
  40768e:	4770      	bx	lr
  407690:	4610      	mov	r0, r2
  407692:	e7e9      	b.n	407668 <__lo0bits+0x2a>
  407694:	2000      	movs	r0, #0
  407696:	4770      	bx	lr
  407698:	2020      	movs	r0, #32
  40769a:	4770      	bx	lr

0040769c <__i2b>:
  40769c:	b510      	push	{r4, lr}
  40769e:	460c      	mov	r4, r1
  4076a0:	2101      	movs	r1, #1
  4076a2:	f7ff ff27 	bl	4074f4 <_Balloc>
  4076a6:	2201      	movs	r2, #1
  4076a8:	6144      	str	r4, [r0, #20]
  4076aa:	6102      	str	r2, [r0, #16]
  4076ac:	bd10      	pop	{r4, pc}

004076ae <__multiply>:
  4076ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4076b2:	4614      	mov	r4, r2
  4076b4:	690a      	ldr	r2, [r1, #16]
  4076b6:	6923      	ldr	r3, [r4, #16]
  4076b8:	429a      	cmp	r2, r3
  4076ba:	bfb8      	it	lt
  4076bc:	460b      	movlt	r3, r1
  4076be:	4689      	mov	r9, r1
  4076c0:	bfbc      	itt	lt
  4076c2:	46a1      	movlt	r9, r4
  4076c4:	461c      	movlt	r4, r3
  4076c6:	f8d9 7010 	ldr.w	r7, [r9, #16]
  4076ca:	f8d4 a010 	ldr.w	sl, [r4, #16]
  4076ce:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4076d2:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4076d6:	eb07 060a 	add.w	r6, r7, sl
  4076da:	429e      	cmp	r6, r3
  4076dc:	bfc8      	it	gt
  4076de:	3101      	addgt	r1, #1
  4076e0:	f7ff ff08 	bl	4074f4 <_Balloc>
  4076e4:	f100 0514 	add.w	r5, r0, #20
  4076e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  4076ec:	462b      	mov	r3, r5
  4076ee:	2200      	movs	r2, #0
  4076f0:	4543      	cmp	r3, r8
  4076f2:	d316      	bcc.n	407722 <__multiply+0x74>
  4076f4:	f104 0214 	add.w	r2, r4, #20
  4076f8:	f109 0114 	add.w	r1, r9, #20
  4076fc:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  407700:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  407704:	9301      	str	r3, [sp, #4]
  407706:	9c01      	ldr	r4, [sp, #4]
  407708:	4294      	cmp	r4, r2
  40770a:	4613      	mov	r3, r2
  40770c:	d80c      	bhi.n	407728 <__multiply+0x7a>
  40770e:	2e00      	cmp	r6, #0
  407710:	dd03      	ble.n	40771a <__multiply+0x6c>
  407712:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  407716:	2b00      	cmp	r3, #0
  407718:	d054      	beq.n	4077c4 <__multiply+0x116>
  40771a:	6106      	str	r6, [r0, #16]
  40771c:	b003      	add	sp, #12
  40771e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407722:	f843 2b04 	str.w	r2, [r3], #4
  407726:	e7e3      	b.n	4076f0 <__multiply+0x42>
  407728:	f8b3 a000 	ldrh.w	sl, [r3]
  40772c:	3204      	adds	r2, #4
  40772e:	f1ba 0f00 	cmp.w	sl, #0
  407732:	d020      	beq.n	407776 <__multiply+0xc8>
  407734:	46ae      	mov	lr, r5
  407736:	4689      	mov	r9, r1
  407738:	f04f 0c00 	mov.w	ip, #0
  40773c:	f859 4b04 	ldr.w	r4, [r9], #4
  407740:	f8be b000 	ldrh.w	fp, [lr]
  407744:	b2a3      	uxth	r3, r4
  407746:	fb0a b303 	mla	r3, sl, r3, fp
  40774a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  40774e:	f8de 4000 	ldr.w	r4, [lr]
  407752:	4463      	add	r3, ip
  407754:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  407758:	fb0a c40b 	mla	r4, sl, fp, ip
  40775c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  407760:	b29b      	uxth	r3, r3
  407762:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  407766:	454f      	cmp	r7, r9
  407768:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  40776c:	f84e 3b04 	str.w	r3, [lr], #4
  407770:	d8e4      	bhi.n	40773c <__multiply+0x8e>
  407772:	f8ce c000 	str.w	ip, [lr]
  407776:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  40777a:	f1b9 0f00 	cmp.w	r9, #0
  40777e:	d01f      	beq.n	4077c0 <__multiply+0x112>
  407780:	682b      	ldr	r3, [r5, #0]
  407782:	46ae      	mov	lr, r5
  407784:	468c      	mov	ip, r1
  407786:	f04f 0a00 	mov.w	sl, #0
  40778a:	f8bc 4000 	ldrh.w	r4, [ip]
  40778e:	f8be b002 	ldrh.w	fp, [lr, #2]
  407792:	fb09 b404 	mla	r4, r9, r4, fp
  407796:	44a2      	add	sl, r4
  407798:	b29b      	uxth	r3, r3
  40779a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  40779e:	f84e 3b04 	str.w	r3, [lr], #4
  4077a2:	f85c 3b04 	ldr.w	r3, [ip], #4
  4077a6:	f8be 4000 	ldrh.w	r4, [lr]
  4077aa:	0c1b      	lsrs	r3, r3, #16
  4077ac:	fb09 4303 	mla	r3, r9, r3, r4
  4077b0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  4077b4:	4567      	cmp	r7, ip
  4077b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4077ba:	d8e6      	bhi.n	40778a <__multiply+0xdc>
  4077bc:	f8ce 3000 	str.w	r3, [lr]
  4077c0:	3504      	adds	r5, #4
  4077c2:	e7a0      	b.n	407706 <__multiply+0x58>
  4077c4:	3e01      	subs	r6, #1
  4077c6:	e7a2      	b.n	40770e <__multiply+0x60>

004077c8 <__pow5mult>:
  4077c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4077cc:	4615      	mov	r5, r2
  4077ce:	f012 0203 	ands.w	r2, r2, #3
  4077d2:	4606      	mov	r6, r0
  4077d4:	460f      	mov	r7, r1
  4077d6:	d007      	beq.n	4077e8 <__pow5mult+0x20>
  4077d8:	3a01      	subs	r2, #1
  4077da:	4c21      	ldr	r4, [pc, #132]	; (407860 <__pow5mult+0x98>)
  4077dc:	2300      	movs	r3, #0
  4077de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  4077e2:	f7ff fed2 	bl	40758a <__multadd>
  4077e6:	4607      	mov	r7, r0
  4077e8:	10ad      	asrs	r5, r5, #2
  4077ea:	d035      	beq.n	407858 <__pow5mult+0x90>
  4077ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
  4077ee:	b93c      	cbnz	r4, 407800 <__pow5mult+0x38>
  4077f0:	2010      	movs	r0, #16
  4077f2:	f7fd ffcd 	bl	405790 <malloc>
  4077f6:	6270      	str	r0, [r6, #36]	; 0x24
  4077f8:	6044      	str	r4, [r0, #4]
  4077fa:	6084      	str	r4, [r0, #8]
  4077fc:	6004      	str	r4, [r0, #0]
  4077fe:	60c4      	str	r4, [r0, #12]
  407800:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  407804:	f8d8 4008 	ldr.w	r4, [r8, #8]
  407808:	b94c      	cbnz	r4, 40781e <__pow5mult+0x56>
  40780a:	f240 2171 	movw	r1, #625	; 0x271
  40780e:	4630      	mov	r0, r6
  407810:	f7ff ff44 	bl	40769c <__i2b>
  407814:	2300      	movs	r3, #0
  407816:	f8c8 0008 	str.w	r0, [r8, #8]
  40781a:	4604      	mov	r4, r0
  40781c:	6003      	str	r3, [r0, #0]
  40781e:	f04f 0800 	mov.w	r8, #0
  407822:	07eb      	lsls	r3, r5, #31
  407824:	d50a      	bpl.n	40783c <__pow5mult+0x74>
  407826:	4639      	mov	r1, r7
  407828:	4622      	mov	r2, r4
  40782a:	4630      	mov	r0, r6
  40782c:	f7ff ff3f 	bl	4076ae <__multiply>
  407830:	4639      	mov	r1, r7
  407832:	4681      	mov	r9, r0
  407834:	4630      	mov	r0, r6
  407836:	f7ff fe91 	bl	40755c <_Bfree>
  40783a:	464f      	mov	r7, r9
  40783c:	106d      	asrs	r5, r5, #1
  40783e:	d00b      	beq.n	407858 <__pow5mult+0x90>
  407840:	6820      	ldr	r0, [r4, #0]
  407842:	b938      	cbnz	r0, 407854 <__pow5mult+0x8c>
  407844:	4622      	mov	r2, r4
  407846:	4621      	mov	r1, r4
  407848:	4630      	mov	r0, r6
  40784a:	f7ff ff30 	bl	4076ae <__multiply>
  40784e:	6020      	str	r0, [r4, #0]
  407850:	f8c0 8000 	str.w	r8, [r0]
  407854:	4604      	mov	r4, r0
  407856:	e7e4      	b.n	407822 <__pow5mult+0x5a>
  407858:	4638      	mov	r0, r7
  40785a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40785e:	bf00      	nop
  407860:	004087b0 	.word	0x004087b0

00407864 <__lshift>:
  407864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407868:	460c      	mov	r4, r1
  40786a:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40786e:	6923      	ldr	r3, [r4, #16]
  407870:	6849      	ldr	r1, [r1, #4]
  407872:	eb0a 0903 	add.w	r9, sl, r3
  407876:	68a3      	ldr	r3, [r4, #8]
  407878:	4607      	mov	r7, r0
  40787a:	4616      	mov	r6, r2
  40787c:	f109 0501 	add.w	r5, r9, #1
  407880:	42ab      	cmp	r3, r5
  407882:	db31      	blt.n	4078e8 <__lshift+0x84>
  407884:	4638      	mov	r0, r7
  407886:	f7ff fe35 	bl	4074f4 <_Balloc>
  40788a:	2200      	movs	r2, #0
  40788c:	4680      	mov	r8, r0
  40788e:	f100 0314 	add.w	r3, r0, #20
  407892:	4611      	mov	r1, r2
  407894:	4552      	cmp	r2, sl
  407896:	db2a      	blt.n	4078ee <__lshift+0x8a>
  407898:	6920      	ldr	r0, [r4, #16]
  40789a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  40789e:	f104 0114 	add.w	r1, r4, #20
  4078a2:	f016 021f 	ands.w	r2, r6, #31
  4078a6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  4078aa:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  4078ae:	d022      	beq.n	4078f6 <__lshift+0x92>
  4078b0:	f1c2 0c20 	rsb	ip, r2, #32
  4078b4:	2000      	movs	r0, #0
  4078b6:	680e      	ldr	r6, [r1, #0]
  4078b8:	4096      	lsls	r6, r2
  4078ba:	4330      	orrs	r0, r6
  4078bc:	f843 0b04 	str.w	r0, [r3], #4
  4078c0:	f851 0b04 	ldr.w	r0, [r1], #4
  4078c4:	458e      	cmp	lr, r1
  4078c6:	fa20 f00c 	lsr.w	r0, r0, ip
  4078ca:	d8f4      	bhi.n	4078b6 <__lshift+0x52>
  4078cc:	6018      	str	r0, [r3, #0]
  4078ce:	b108      	cbz	r0, 4078d4 <__lshift+0x70>
  4078d0:	f109 0502 	add.w	r5, r9, #2
  4078d4:	3d01      	subs	r5, #1
  4078d6:	4638      	mov	r0, r7
  4078d8:	f8c8 5010 	str.w	r5, [r8, #16]
  4078dc:	4621      	mov	r1, r4
  4078de:	f7ff fe3d 	bl	40755c <_Bfree>
  4078e2:	4640      	mov	r0, r8
  4078e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4078e8:	3101      	adds	r1, #1
  4078ea:	005b      	lsls	r3, r3, #1
  4078ec:	e7c8      	b.n	407880 <__lshift+0x1c>
  4078ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4078f2:	3201      	adds	r2, #1
  4078f4:	e7ce      	b.n	407894 <__lshift+0x30>
  4078f6:	3b04      	subs	r3, #4
  4078f8:	f851 2b04 	ldr.w	r2, [r1], #4
  4078fc:	f843 2f04 	str.w	r2, [r3, #4]!
  407900:	458e      	cmp	lr, r1
  407902:	d8f9      	bhi.n	4078f8 <__lshift+0x94>
  407904:	e7e6      	b.n	4078d4 <__lshift+0x70>

00407906 <__mcmp>:
  407906:	6903      	ldr	r3, [r0, #16]
  407908:	690a      	ldr	r2, [r1, #16]
  40790a:	1a9b      	subs	r3, r3, r2
  40790c:	b530      	push	{r4, r5, lr}
  40790e:	d10c      	bne.n	40792a <__mcmp+0x24>
  407910:	0092      	lsls	r2, r2, #2
  407912:	3014      	adds	r0, #20
  407914:	3114      	adds	r1, #20
  407916:	1884      	adds	r4, r0, r2
  407918:	4411      	add	r1, r2
  40791a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40791e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407922:	4295      	cmp	r5, r2
  407924:	d003      	beq.n	40792e <__mcmp+0x28>
  407926:	d305      	bcc.n	407934 <__mcmp+0x2e>
  407928:	2301      	movs	r3, #1
  40792a:	4618      	mov	r0, r3
  40792c:	bd30      	pop	{r4, r5, pc}
  40792e:	42a0      	cmp	r0, r4
  407930:	d3f3      	bcc.n	40791a <__mcmp+0x14>
  407932:	e7fa      	b.n	40792a <__mcmp+0x24>
  407934:	f04f 33ff 	mov.w	r3, #4294967295
  407938:	e7f7      	b.n	40792a <__mcmp+0x24>

0040793a <__mdiff>:
  40793a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40793e:	460d      	mov	r5, r1
  407940:	4607      	mov	r7, r0
  407942:	4611      	mov	r1, r2
  407944:	4628      	mov	r0, r5
  407946:	4614      	mov	r4, r2
  407948:	f7ff ffdd 	bl	407906 <__mcmp>
  40794c:	1e06      	subs	r6, r0, #0
  40794e:	d108      	bne.n	407962 <__mdiff+0x28>
  407950:	4631      	mov	r1, r6
  407952:	4638      	mov	r0, r7
  407954:	f7ff fdce 	bl	4074f4 <_Balloc>
  407958:	2301      	movs	r3, #1
  40795a:	6103      	str	r3, [r0, #16]
  40795c:	6146      	str	r6, [r0, #20]
  40795e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407962:	bfa4      	itt	ge
  407964:	4623      	movge	r3, r4
  407966:	462c      	movge	r4, r5
  407968:	4638      	mov	r0, r7
  40796a:	6861      	ldr	r1, [r4, #4]
  40796c:	bfa6      	itte	ge
  40796e:	461d      	movge	r5, r3
  407970:	2600      	movge	r6, #0
  407972:	2601      	movlt	r6, #1
  407974:	f7ff fdbe 	bl	4074f4 <_Balloc>
  407978:	692b      	ldr	r3, [r5, #16]
  40797a:	60c6      	str	r6, [r0, #12]
  40797c:	6926      	ldr	r6, [r4, #16]
  40797e:	f105 0914 	add.w	r9, r5, #20
  407982:	f104 0214 	add.w	r2, r4, #20
  407986:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  40798a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40798e:	f100 0514 	add.w	r5, r0, #20
  407992:	f04f 0c00 	mov.w	ip, #0
  407996:	f852 ab04 	ldr.w	sl, [r2], #4
  40799a:	f859 4b04 	ldr.w	r4, [r9], #4
  40799e:	fa1c f18a 	uxtah	r1, ip, sl
  4079a2:	b2a3      	uxth	r3, r4
  4079a4:	1ac9      	subs	r1, r1, r3
  4079a6:	0c23      	lsrs	r3, r4, #16
  4079a8:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  4079ac:	eb03 4321 	add.w	r3, r3, r1, asr #16
  4079b0:	b289      	uxth	r1, r1
  4079b2:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4079b6:	45c8      	cmp	r8, r9
  4079b8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  4079bc:	4696      	mov	lr, r2
  4079be:	f845 3b04 	str.w	r3, [r5], #4
  4079c2:	d8e8      	bhi.n	407996 <__mdiff+0x5c>
  4079c4:	45be      	cmp	lr, r7
  4079c6:	d305      	bcc.n	4079d4 <__mdiff+0x9a>
  4079c8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4079cc:	b18b      	cbz	r3, 4079f2 <__mdiff+0xb8>
  4079ce:	6106      	str	r6, [r0, #16]
  4079d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4079d4:	f85e 1b04 	ldr.w	r1, [lr], #4
  4079d8:	fa1c f381 	uxtah	r3, ip, r1
  4079dc:	141a      	asrs	r2, r3, #16
  4079de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  4079e2:	b29b      	uxth	r3, r3
  4079e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4079e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
  4079ec:	f845 3b04 	str.w	r3, [r5], #4
  4079f0:	e7e8      	b.n	4079c4 <__mdiff+0x8a>
  4079f2:	3e01      	subs	r6, #1
  4079f4:	e7e8      	b.n	4079c8 <__mdiff+0x8e>

004079f6 <__d2b>:
  4079f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  4079fa:	2101      	movs	r1, #1
  4079fc:	461c      	mov	r4, r3
  4079fe:	4690      	mov	r8, r2
  407a00:	9e08      	ldr	r6, [sp, #32]
  407a02:	9d09      	ldr	r5, [sp, #36]	; 0x24
  407a04:	f7ff fd76 	bl	4074f4 <_Balloc>
  407a08:	f3c4 0213 	ubfx	r2, r4, #0, #20
  407a0c:	f3c4 540a 	ubfx	r4, r4, #20, #11
  407a10:	4607      	mov	r7, r0
  407a12:	bb34      	cbnz	r4, 407a62 <__d2b+0x6c>
  407a14:	9201      	str	r2, [sp, #4]
  407a16:	f1b8 0f00 	cmp.w	r8, #0
  407a1a:	d027      	beq.n	407a6c <__d2b+0x76>
  407a1c:	a802      	add	r0, sp, #8
  407a1e:	f840 8d08 	str.w	r8, [r0, #-8]!
  407a22:	f7ff fe0c 	bl	40763e <__lo0bits>
  407a26:	9900      	ldr	r1, [sp, #0]
  407a28:	b1f0      	cbz	r0, 407a68 <__d2b+0x72>
  407a2a:	9a01      	ldr	r2, [sp, #4]
  407a2c:	f1c0 0320 	rsb	r3, r0, #32
  407a30:	fa02 f303 	lsl.w	r3, r2, r3
  407a34:	430b      	orrs	r3, r1
  407a36:	40c2      	lsrs	r2, r0
  407a38:	617b      	str	r3, [r7, #20]
  407a3a:	9201      	str	r2, [sp, #4]
  407a3c:	9b01      	ldr	r3, [sp, #4]
  407a3e:	61bb      	str	r3, [r7, #24]
  407a40:	2b00      	cmp	r3, #0
  407a42:	bf14      	ite	ne
  407a44:	2102      	movne	r1, #2
  407a46:	2101      	moveq	r1, #1
  407a48:	6139      	str	r1, [r7, #16]
  407a4a:	b1c4      	cbz	r4, 407a7e <__d2b+0x88>
  407a4c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  407a50:	4404      	add	r4, r0
  407a52:	6034      	str	r4, [r6, #0]
  407a54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407a58:	6028      	str	r0, [r5, #0]
  407a5a:	4638      	mov	r0, r7
  407a5c:	b002      	add	sp, #8
  407a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407a62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  407a66:	e7d5      	b.n	407a14 <__d2b+0x1e>
  407a68:	6179      	str	r1, [r7, #20]
  407a6a:	e7e7      	b.n	407a3c <__d2b+0x46>
  407a6c:	a801      	add	r0, sp, #4
  407a6e:	f7ff fde6 	bl	40763e <__lo0bits>
  407a72:	9b01      	ldr	r3, [sp, #4]
  407a74:	617b      	str	r3, [r7, #20]
  407a76:	2101      	movs	r1, #1
  407a78:	6139      	str	r1, [r7, #16]
  407a7a:	3020      	adds	r0, #32
  407a7c:	e7e5      	b.n	407a4a <__d2b+0x54>
  407a7e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  407a82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407a86:	6030      	str	r0, [r6, #0]
  407a88:	6918      	ldr	r0, [r3, #16]
  407a8a:	f7ff fdb9 	bl	407600 <__hi0bits>
  407a8e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407a92:	e7e1      	b.n	407a58 <__d2b+0x62>

00407a94 <_calloc_r>:
  407a94:	b538      	push	{r3, r4, r5, lr}
  407a96:	fb02 f401 	mul.w	r4, r2, r1
  407a9a:	4621      	mov	r1, r4
  407a9c:	f7fd fee2 	bl	405864 <_malloc_r>
  407aa0:	4605      	mov	r5, r0
  407aa2:	b118      	cbz	r0, 407aac <_calloc_r+0x18>
  407aa4:	4622      	mov	r2, r4
  407aa6:	2100      	movs	r1, #0
  407aa8:	f7fd fe85 	bl	4057b6 <memset>
  407aac:	4628      	mov	r0, r5
  407aae:	bd38      	pop	{r3, r4, r5, pc}

00407ab0 <__sfputc_r>:
  407ab0:	6893      	ldr	r3, [r2, #8]
  407ab2:	3b01      	subs	r3, #1
  407ab4:	2b00      	cmp	r3, #0
  407ab6:	b410      	push	{r4}
  407ab8:	6093      	str	r3, [r2, #8]
  407aba:	da08      	bge.n	407ace <__sfputc_r+0x1e>
  407abc:	6994      	ldr	r4, [r2, #24]
  407abe:	42a3      	cmp	r3, r4
  407ac0:	db02      	blt.n	407ac8 <__sfputc_r+0x18>
  407ac2:	b2cb      	uxtb	r3, r1
  407ac4:	2b0a      	cmp	r3, #10
  407ac6:	d102      	bne.n	407ace <__sfputc_r+0x1e>
  407ac8:	bc10      	pop	{r4}
  407aca:	f000 b973 	b.w	407db4 <__swbuf_r>
  407ace:	6813      	ldr	r3, [r2, #0]
  407ad0:	1c58      	adds	r0, r3, #1
  407ad2:	6010      	str	r0, [r2, #0]
  407ad4:	7019      	strb	r1, [r3, #0]
  407ad6:	b2c8      	uxtb	r0, r1
  407ad8:	bc10      	pop	{r4}
  407ada:	4770      	bx	lr

00407adc <__sfputs_r>:
  407adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407ade:	4606      	mov	r6, r0
  407ae0:	460f      	mov	r7, r1
  407ae2:	4614      	mov	r4, r2
  407ae4:	18d5      	adds	r5, r2, r3
  407ae6:	42ac      	cmp	r4, r5
  407ae8:	d101      	bne.n	407aee <__sfputs_r+0x12>
  407aea:	2000      	movs	r0, #0
  407aec:	e007      	b.n	407afe <__sfputs_r+0x22>
  407aee:	463a      	mov	r2, r7
  407af0:	f814 1b01 	ldrb.w	r1, [r4], #1
  407af4:	4630      	mov	r0, r6
  407af6:	f7ff ffdb 	bl	407ab0 <__sfputc_r>
  407afa:	1c43      	adds	r3, r0, #1
  407afc:	d1f3      	bne.n	407ae6 <__sfputs_r+0xa>
  407afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00407b00 <_vfiprintf_r>:
  407b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b04:	b09d      	sub	sp, #116	; 0x74
  407b06:	460c      	mov	r4, r1
  407b08:	4617      	mov	r7, r2
  407b0a:	9303      	str	r3, [sp, #12]
  407b0c:	4606      	mov	r6, r0
  407b0e:	b118      	cbz	r0, 407b18 <_vfiprintf_r+0x18>
  407b10:	6983      	ldr	r3, [r0, #24]
  407b12:	b90b      	cbnz	r3, 407b18 <_vfiprintf_r+0x18>
  407b14:	f7ff fb9c 	bl	407250 <__sinit>
  407b18:	4b7c      	ldr	r3, [pc, #496]	; (407d0c <_vfiprintf_r+0x20c>)
  407b1a:	429c      	cmp	r4, r3
  407b1c:	d157      	bne.n	407bce <_vfiprintf_r+0xce>
  407b1e:	6874      	ldr	r4, [r6, #4]
  407b20:	89a3      	ldrh	r3, [r4, #12]
  407b22:	0718      	lsls	r0, r3, #28
  407b24:	d55d      	bpl.n	407be2 <_vfiprintf_r+0xe2>
  407b26:	6923      	ldr	r3, [r4, #16]
  407b28:	2b00      	cmp	r3, #0
  407b2a:	d05a      	beq.n	407be2 <_vfiprintf_r+0xe2>
  407b2c:	2300      	movs	r3, #0
  407b2e:	9309      	str	r3, [sp, #36]	; 0x24
  407b30:	2320      	movs	r3, #32
  407b32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  407b36:	2330      	movs	r3, #48	; 0x30
  407b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  407b3c:	f04f 0b01 	mov.w	fp, #1
  407b40:	46b8      	mov	r8, r7
  407b42:	4645      	mov	r5, r8
  407b44:	f815 3b01 	ldrb.w	r3, [r5], #1
  407b48:	2b00      	cmp	r3, #0
  407b4a:	d155      	bne.n	407bf8 <_vfiprintf_r+0xf8>
  407b4c:	ebb8 0a07 	subs.w	sl, r8, r7
  407b50:	d00b      	beq.n	407b6a <_vfiprintf_r+0x6a>
  407b52:	4653      	mov	r3, sl
  407b54:	463a      	mov	r2, r7
  407b56:	4621      	mov	r1, r4
  407b58:	4630      	mov	r0, r6
  407b5a:	f7ff ffbf 	bl	407adc <__sfputs_r>
  407b5e:	3001      	adds	r0, #1
  407b60:	f000 80c4 	beq.w	407cec <_vfiprintf_r+0x1ec>
  407b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407b66:	4453      	add	r3, sl
  407b68:	9309      	str	r3, [sp, #36]	; 0x24
  407b6a:	f898 3000 	ldrb.w	r3, [r8]
  407b6e:	2b00      	cmp	r3, #0
  407b70:	f000 80bc 	beq.w	407cec <_vfiprintf_r+0x1ec>
  407b74:	2300      	movs	r3, #0
  407b76:	f04f 32ff 	mov.w	r2, #4294967295
  407b7a:	9304      	str	r3, [sp, #16]
  407b7c:	9307      	str	r3, [sp, #28]
  407b7e:	9205      	str	r2, [sp, #20]
  407b80:	9306      	str	r3, [sp, #24]
  407b82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  407b86:	931a      	str	r3, [sp, #104]	; 0x68
  407b88:	2205      	movs	r2, #5
  407b8a:	7829      	ldrb	r1, [r5, #0]
  407b8c:	4860      	ldr	r0, [pc, #384]	; (407d10 <_vfiprintf_r+0x210>)
  407b8e:	f7ff fc5f 	bl	407450 <memchr>
  407b92:	f105 0801 	add.w	r8, r5, #1
  407b96:	9b04      	ldr	r3, [sp, #16]
  407b98:	2800      	cmp	r0, #0
  407b9a:	d131      	bne.n	407c00 <_vfiprintf_r+0x100>
  407b9c:	06d9      	lsls	r1, r3, #27
  407b9e:	bf44      	itt	mi
  407ba0:	2220      	movmi	r2, #32
  407ba2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  407ba6:	071a      	lsls	r2, r3, #28
  407ba8:	bf44      	itt	mi
  407baa:	222b      	movmi	r2, #43	; 0x2b
  407bac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  407bb0:	782a      	ldrb	r2, [r5, #0]
  407bb2:	2a2a      	cmp	r2, #42	; 0x2a
  407bb4:	d02c      	beq.n	407c10 <_vfiprintf_r+0x110>
  407bb6:	9a07      	ldr	r2, [sp, #28]
  407bb8:	2100      	movs	r1, #0
  407bba:	200a      	movs	r0, #10
  407bbc:	46a8      	mov	r8, r5
  407bbe:	3501      	adds	r5, #1
  407bc0:	f898 3000 	ldrb.w	r3, [r8]
  407bc4:	3b30      	subs	r3, #48	; 0x30
  407bc6:	2b09      	cmp	r3, #9
  407bc8:	d96d      	bls.n	407ca6 <_vfiprintf_r+0x1a6>
  407bca:	b371      	cbz	r1, 407c2a <_vfiprintf_r+0x12a>
  407bcc:	e026      	b.n	407c1c <_vfiprintf_r+0x11c>
  407bce:	4b51      	ldr	r3, [pc, #324]	; (407d14 <_vfiprintf_r+0x214>)
  407bd0:	429c      	cmp	r4, r3
  407bd2:	d101      	bne.n	407bd8 <_vfiprintf_r+0xd8>
  407bd4:	68b4      	ldr	r4, [r6, #8]
  407bd6:	e7a3      	b.n	407b20 <_vfiprintf_r+0x20>
  407bd8:	4b4f      	ldr	r3, [pc, #316]	; (407d18 <_vfiprintf_r+0x218>)
  407bda:	429c      	cmp	r4, r3
  407bdc:	bf08      	it	eq
  407bde:	68f4      	ldreq	r4, [r6, #12]
  407be0:	e79e      	b.n	407b20 <_vfiprintf_r+0x20>
  407be2:	4621      	mov	r1, r4
  407be4:	4630      	mov	r0, r6
  407be6:	f000 f949 	bl	407e7c <__swsetup_r>
  407bea:	2800      	cmp	r0, #0
  407bec:	d09e      	beq.n	407b2c <_vfiprintf_r+0x2c>
  407bee:	f04f 30ff 	mov.w	r0, #4294967295
  407bf2:	b01d      	add	sp, #116	; 0x74
  407bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407bf8:	2b25      	cmp	r3, #37	; 0x25
  407bfa:	d0a7      	beq.n	407b4c <_vfiprintf_r+0x4c>
  407bfc:	46a8      	mov	r8, r5
  407bfe:	e7a0      	b.n	407b42 <_vfiprintf_r+0x42>
  407c00:	4a43      	ldr	r2, [pc, #268]	; (407d10 <_vfiprintf_r+0x210>)
  407c02:	1a80      	subs	r0, r0, r2
  407c04:	fa0b f000 	lsl.w	r0, fp, r0
  407c08:	4318      	orrs	r0, r3
  407c0a:	9004      	str	r0, [sp, #16]
  407c0c:	4645      	mov	r5, r8
  407c0e:	e7bb      	b.n	407b88 <_vfiprintf_r+0x88>
  407c10:	9a03      	ldr	r2, [sp, #12]
  407c12:	1d11      	adds	r1, r2, #4
  407c14:	6812      	ldr	r2, [r2, #0]
  407c16:	9103      	str	r1, [sp, #12]
  407c18:	2a00      	cmp	r2, #0
  407c1a:	db01      	blt.n	407c20 <_vfiprintf_r+0x120>
  407c1c:	9207      	str	r2, [sp, #28]
  407c1e:	e004      	b.n	407c2a <_vfiprintf_r+0x12a>
  407c20:	4252      	negs	r2, r2
  407c22:	f043 0302 	orr.w	r3, r3, #2
  407c26:	9207      	str	r2, [sp, #28]
  407c28:	9304      	str	r3, [sp, #16]
  407c2a:	f898 3000 	ldrb.w	r3, [r8]
  407c2e:	2b2e      	cmp	r3, #46	; 0x2e
  407c30:	d110      	bne.n	407c54 <_vfiprintf_r+0x154>
  407c32:	f898 3001 	ldrb.w	r3, [r8, #1]
  407c36:	2b2a      	cmp	r3, #42	; 0x2a
  407c38:	f108 0101 	add.w	r1, r8, #1
  407c3c:	d137      	bne.n	407cae <_vfiprintf_r+0x1ae>
  407c3e:	9b03      	ldr	r3, [sp, #12]
  407c40:	1d1a      	adds	r2, r3, #4
  407c42:	681b      	ldr	r3, [r3, #0]
  407c44:	9203      	str	r2, [sp, #12]
  407c46:	2b00      	cmp	r3, #0
  407c48:	bfb8      	it	lt
  407c4a:	f04f 33ff 	movlt.w	r3, #4294967295
  407c4e:	f108 0802 	add.w	r8, r8, #2
  407c52:	9305      	str	r3, [sp, #20]
  407c54:	4d31      	ldr	r5, [pc, #196]	; (407d1c <_vfiprintf_r+0x21c>)
  407c56:	f898 1000 	ldrb.w	r1, [r8]
  407c5a:	2203      	movs	r2, #3
  407c5c:	4628      	mov	r0, r5
  407c5e:	f7ff fbf7 	bl	407450 <memchr>
  407c62:	b140      	cbz	r0, 407c76 <_vfiprintf_r+0x176>
  407c64:	2340      	movs	r3, #64	; 0x40
  407c66:	1b40      	subs	r0, r0, r5
  407c68:	fa03 f000 	lsl.w	r0, r3, r0
  407c6c:	9b04      	ldr	r3, [sp, #16]
  407c6e:	4303      	orrs	r3, r0
  407c70:	9304      	str	r3, [sp, #16]
  407c72:	f108 0801 	add.w	r8, r8, #1
  407c76:	f898 1000 	ldrb.w	r1, [r8]
  407c7a:	4829      	ldr	r0, [pc, #164]	; (407d20 <_vfiprintf_r+0x220>)
  407c7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  407c80:	2206      	movs	r2, #6
  407c82:	f108 0701 	add.w	r7, r8, #1
  407c86:	f7ff fbe3 	bl	407450 <memchr>
  407c8a:	2800      	cmp	r0, #0
  407c8c:	d034      	beq.n	407cf8 <_vfiprintf_r+0x1f8>
  407c8e:	4b25      	ldr	r3, [pc, #148]	; (407d24 <_vfiprintf_r+0x224>)
  407c90:	bb03      	cbnz	r3, 407cd4 <_vfiprintf_r+0x1d4>
  407c92:	9b03      	ldr	r3, [sp, #12]
  407c94:	3307      	adds	r3, #7
  407c96:	f023 0307 	bic.w	r3, r3, #7
  407c9a:	3308      	adds	r3, #8
  407c9c:	9303      	str	r3, [sp, #12]
  407c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407ca0:	444b      	add	r3, r9
  407ca2:	9309      	str	r3, [sp, #36]	; 0x24
  407ca4:	e74c      	b.n	407b40 <_vfiprintf_r+0x40>
  407ca6:	fb00 3202 	mla	r2, r0, r2, r3
  407caa:	2101      	movs	r1, #1
  407cac:	e786      	b.n	407bbc <_vfiprintf_r+0xbc>
  407cae:	2300      	movs	r3, #0
  407cb0:	9305      	str	r3, [sp, #20]
  407cb2:	4618      	mov	r0, r3
  407cb4:	250a      	movs	r5, #10
  407cb6:	4688      	mov	r8, r1
  407cb8:	3101      	adds	r1, #1
  407cba:	f898 2000 	ldrb.w	r2, [r8]
  407cbe:	3a30      	subs	r2, #48	; 0x30
  407cc0:	2a09      	cmp	r2, #9
  407cc2:	d903      	bls.n	407ccc <_vfiprintf_r+0x1cc>
  407cc4:	2b00      	cmp	r3, #0
  407cc6:	d0c5      	beq.n	407c54 <_vfiprintf_r+0x154>
  407cc8:	9005      	str	r0, [sp, #20]
  407cca:	e7c3      	b.n	407c54 <_vfiprintf_r+0x154>
  407ccc:	fb05 2000 	mla	r0, r5, r0, r2
  407cd0:	2301      	movs	r3, #1
  407cd2:	e7f0      	b.n	407cb6 <_vfiprintf_r+0x1b6>
  407cd4:	ab03      	add	r3, sp, #12
  407cd6:	9300      	str	r3, [sp, #0]
  407cd8:	4622      	mov	r2, r4
  407cda:	4b13      	ldr	r3, [pc, #76]	; (407d28 <_vfiprintf_r+0x228>)
  407cdc:	a904      	add	r1, sp, #16
  407cde:	4630      	mov	r0, r6
  407ce0:	f7fd feb0 	bl	405a44 <_printf_float>
  407ce4:	f1b0 3fff 	cmp.w	r0, #4294967295
  407ce8:	4681      	mov	r9, r0
  407cea:	d1d8      	bne.n	407c9e <_vfiprintf_r+0x19e>
  407cec:	89a3      	ldrh	r3, [r4, #12]
  407cee:	065b      	lsls	r3, r3, #25
  407cf0:	f53f af7d 	bmi.w	407bee <_vfiprintf_r+0xee>
  407cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
  407cf6:	e77c      	b.n	407bf2 <_vfiprintf_r+0xf2>
  407cf8:	ab03      	add	r3, sp, #12
  407cfa:	9300      	str	r3, [sp, #0]
  407cfc:	4622      	mov	r2, r4
  407cfe:	4b0a      	ldr	r3, [pc, #40]	; (407d28 <_vfiprintf_r+0x228>)
  407d00:	a904      	add	r1, sp, #16
  407d02:	4630      	mov	r0, r6
  407d04:	f7fe f94c 	bl	405fa0 <_printf_i>
  407d08:	e7ec      	b.n	407ce4 <_vfiprintf_r+0x1e4>
  407d0a:	bf00      	nop
  407d0c:	00408680 	.word	0x00408680
  407d10:	004087bc 	.word	0x004087bc
  407d14:	004086a0 	.word	0x004086a0
  407d18:	00408660 	.word	0x00408660
  407d1c:	004087c2 	.word	0x004087c2
  407d20:	004087c6 	.word	0x004087c6
  407d24:	00405a45 	.word	0x00405a45
  407d28:	00407add 	.word	0x00407add

00407d2c <__sread>:
  407d2c:	b510      	push	{r4, lr}
  407d2e:	460c      	mov	r4, r1
  407d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407d34:	f000 f966 	bl	408004 <_read_r>
  407d38:	2800      	cmp	r0, #0
  407d3a:	bfab      	itete	ge
  407d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  407d3e:	89a3      	ldrhlt	r3, [r4, #12]
  407d40:	181b      	addge	r3, r3, r0
  407d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  407d46:	bfac      	ite	ge
  407d48:	6563      	strge	r3, [r4, #84]	; 0x54
  407d4a:	81a3      	strhlt	r3, [r4, #12]
  407d4c:	bd10      	pop	{r4, pc}

00407d4e <__swrite>:
  407d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407d52:	461f      	mov	r7, r3
  407d54:	898b      	ldrh	r3, [r1, #12]
  407d56:	05db      	lsls	r3, r3, #23
  407d58:	4605      	mov	r5, r0
  407d5a:	460c      	mov	r4, r1
  407d5c:	4616      	mov	r6, r2
  407d5e:	d505      	bpl.n	407d6c <__swrite+0x1e>
  407d60:	2302      	movs	r3, #2
  407d62:	2200      	movs	r2, #0
  407d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407d68:	f000 f928 	bl	407fbc <_lseek_r>
  407d6c:	89a3      	ldrh	r3, [r4, #12]
  407d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407d76:	81a3      	strh	r3, [r4, #12]
  407d78:	4632      	mov	r2, r6
  407d7a:	463b      	mov	r3, r7
  407d7c:	4628      	mov	r0, r5
  407d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407d82:	f000 b869 	b.w	407e58 <_write_r>

00407d86 <__sseek>:
  407d86:	b510      	push	{r4, lr}
  407d88:	460c      	mov	r4, r1
  407d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407d8e:	f000 f915 	bl	407fbc <_lseek_r>
  407d92:	1c43      	adds	r3, r0, #1
  407d94:	89a3      	ldrh	r3, [r4, #12]
  407d96:	bf15      	itete	ne
  407d98:	6560      	strne	r0, [r4, #84]	; 0x54
  407d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  407d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  407da2:	81a3      	strheq	r3, [r4, #12]
  407da4:	bf18      	it	ne
  407da6:	81a3      	strhne	r3, [r4, #12]
  407da8:	bd10      	pop	{r4, pc}

00407daa <__sclose>:
  407daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407dae:	f000 b8d3 	b.w	407f58 <_close_r>
	...

00407db4 <__swbuf_r>:
  407db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407db6:	460e      	mov	r6, r1
  407db8:	4614      	mov	r4, r2
  407dba:	4605      	mov	r5, r0
  407dbc:	b118      	cbz	r0, 407dc6 <__swbuf_r+0x12>
  407dbe:	6983      	ldr	r3, [r0, #24]
  407dc0:	b90b      	cbnz	r3, 407dc6 <__swbuf_r+0x12>
  407dc2:	f7ff fa45 	bl	407250 <__sinit>
  407dc6:	4b21      	ldr	r3, [pc, #132]	; (407e4c <__swbuf_r+0x98>)
  407dc8:	429c      	cmp	r4, r3
  407dca:	d12a      	bne.n	407e22 <__swbuf_r+0x6e>
  407dcc:	686c      	ldr	r4, [r5, #4]
  407dce:	69a3      	ldr	r3, [r4, #24]
  407dd0:	60a3      	str	r3, [r4, #8]
  407dd2:	89a3      	ldrh	r3, [r4, #12]
  407dd4:	071a      	lsls	r2, r3, #28
  407dd6:	d52e      	bpl.n	407e36 <__swbuf_r+0x82>
  407dd8:	6923      	ldr	r3, [r4, #16]
  407dda:	b363      	cbz	r3, 407e36 <__swbuf_r+0x82>
  407ddc:	6923      	ldr	r3, [r4, #16]
  407dde:	6820      	ldr	r0, [r4, #0]
  407de0:	1ac0      	subs	r0, r0, r3
  407de2:	6963      	ldr	r3, [r4, #20]
  407de4:	b2f6      	uxtb	r6, r6
  407de6:	4298      	cmp	r0, r3
  407de8:	4637      	mov	r7, r6
  407dea:	db04      	blt.n	407df6 <__swbuf_r+0x42>
  407dec:	4621      	mov	r1, r4
  407dee:	4628      	mov	r0, r5
  407df0:	f7ff f9c4 	bl	40717c <_fflush_r>
  407df4:	bb28      	cbnz	r0, 407e42 <__swbuf_r+0x8e>
  407df6:	68a3      	ldr	r3, [r4, #8]
  407df8:	3b01      	subs	r3, #1
  407dfa:	60a3      	str	r3, [r4, #8]
  407dfc:	6823      	ldr	r3, [r4, #0]
  407dfe:	1c5a      	adds	r2, r3, #1
  407e00:	6022      	str	r2, [r4, #0]
  407e02:	701e      	strb	r6, [r3, #0]
  407e04:	6963      	ldr	r3, [r4, #20]
  407e06:	3001      	adds	r0, #1
  407e08:	4298      	cmp	r0, r3
  407e0a:	d004      	beq.n	407e16 <__swbuf_r+0x62>
  407e0c:	89a3      	ldrh	r3, [r4, #12]
  407e0e:	07db      	lsls	r3, r3, #31
  407e10:	d519      	bpl.n	407e46 <__swbuf_r+0x92>
  407e12:	2e0a      	cmp	r6, #10
  407e14:	d117      	bne.n	407e46 <__swbuf_r+0x92>
  407e16:	4621      	mov	r1, r4
  407e18:	4628      	mov	r0, r5
  407e1a:	f7ff f9af 	bl	40717c <_fflush_r>
  407e1e:	b190      	cbz	r0, 407e46 <__swbuf_r+0x92>
  407e20:	e00f      	b.n	407e42 <__swbuf_r+0x8e>
  407e22:	4b0b      	ldr	r3, [pc, #44]	; (407e50 <__swbuf_r+0x9c>)
  407e24:	429c      	cmp	r4, r3
  407e26:	d101      	bne.n	407e2c <__swbuf_r+0x78>
  407e28:	68ac      	ldr	r4, [r5, #8]
  407e2a:	e7d0      	b.n	407dce <__swbuf_r+0x1a>
  407e2c:	4b09      	ldr	r3, [pc, #36]	; (407e54 <__swbuf_r+0xa0>)
  407e2e:	429c      	cmp	r4, r3
  407e30:	bf08      	it	eq
  407e32:	68ec      	ldreq	r4, [r5, #12]
  407e34:	e7cb      	b.n	407dce <__swbuf_r+0x1a>
  407e36:	4621      	mov	r1, r4
  407e38:	4628      	mov	r0, r5
  407e3a:	f000 f81f 	bl	407e7c <__swsetup_r>
  407e3e:	2800      	cmp	r0, #0
  407e40:	d0cc      	beq.n	407ddc <__swbuf_r+0x28>
  407e42:	f04f 37ff 	mov.w	r7, #4294967295
  407e46:	4638      	mov	r0, r7
  407e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407e4a:	bf00      	nop
  407e4c:	00408680 	.word	0x00408680
  407e50:	004086a0 	.word	0x004086a0
  407e54:	00408660 	.word	0x00408660

00407e58 <_write_r>:
  407e58:	b538      	push	{r3, r4, r5, lr}
  407e5a:	4c07      	ldr	r4, [pc, #28]	; (407e78 <_write_r+0x20>)
  407e5c:	4605      	mov	r5, r0
  407e5e:	4608      	mov	r0, r1
  407e60:	4611      	mov	r1, r2
  407e62:	2200      	movs	r2, #0
  407e64:	6022      	str	r2, [r4, #0]
  407e66:	461a      	mov	r2, r3
  407e68:	f7fb fc1a 	bl	4036a0 <_write>
  407e6c:	1c43      	adds	r3, r0, #1
  407e6e:	d102      	bne.n	407e76 <_write_r+0x1e>
  407e70:	6823      	ldr	r3, [r4, #0]
  407e72:	b103      	cbz	r3, 407e76 <_write_r+0x1e>
  407e74:	602b      	str	r3, [r5, #0]
  407e76:	bd38      	pop	{r3, r4, r5, pc}
  407e78:	20400960 	.word	0x20400960

00407e7c <__swsetup_r>:
  407e7c:	4b32      	ldr	r3, [pc, #200]	; (407f48 <__swsetup_r+0xcc>)
  407e7e:	b570      	push	{r4, r5, r6, lr}
  407e80:	681d      	ldr	r5, [r3, #0]
  407e82:	4606      	mov	r6, r0
  407e84:	460c      	mov	r4, r1
  407e86:	b125      	cbz	r5, 407e92 <__swsetup_r+0x16>
  407e88:	69ab      	ldr	r3, [r5, #24]
  407e8a:	b913      	cbnz	r3, 407e92 <__swsetup_r+0x16>
  407e8c:	4628      	mov	r0, r5
  407e8e:	f7ff f9df 	bl	407250 <__sinit>
  407e92:	4b2e      	ldr	r3, [pc, #184]	; (407f4c <__swsetup_r+0xd0>)
  407e94:	429c      	cmp	r4, r3
  407e96:	d10f      	bne.n	407eb8 <__swsetup_r+0x3c>
  407e98:	686c      	ldr	r4, [r5, #4]
  407e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e9e:	b29a      	uxth	r2, r3
  407ea0:	0715      	lsls	r5, r2, #28
  407ea2:	d42c      	bmi.n	407efe <__swsetup_r+0x82>
  407ea4:	06d0      	lsls	r0, r2, #27
  407ea6:	d411      	bmi.n	407ecc <__swsetup_r+0x50>
  407ea8:	2209      	movs	r2, #9
  407eaa:	6032      	str	r2, [r6, #0]
  407eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407eb0:	81a3      	strh	r3, [r4, #12]
  407eb2:	f04f 30ff 	mov.w	r0, #4294967295
  407eb6:	bd70      	pop	{r4, r5, r6, pc}
  407eb8:	4b25      	ldr	r3, [pc, #148]	; (407f50 <__swsetup_r+0xd4>)
  407eba:	429c      	cmp	r4, r3
  407ebc:	d101      	bne.n	407ec2 <__swsetup_r+0x46>
  407ebe:	68ac      	ldr	r4, [r5, #8]
  407ec0:	e7eb      	b.n	407e9a <__swsetup_r+0x1e>
  407ec2:	4b24      	ldr	r3, [pc, #144]	; (407f54 <__swsetup_r+0xd8>)
  407ec4:	429c      	cmp	r4, r3
  407ec6:	bf08      	it	eq
  407ec8:	68ec      	ldreq	r4, [r5, #12]
  407eca:	e7e6      	b.n	407e9a <__swsetup_r+0x1e>
  407ecc:	0751      	lsls	r1, r2, #29
  407ece:	d512      	bpl.n	407ef6 <__swsetup_r+0x7a>
  407ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  407ed2:	b141      	cbz	r1, 407ee6 <__swsetup_r+0x6a>
  407ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
  407ed8:	4299      	cmp	r1, r3
  407eda:	d002      	beq.n	407ee2 <__swsetup_r+0x66>
  407edc:	4630      	mov	r0, r6
  407ede:	f7fd fc73 	bl	4057c8 <_free_r>
  407ee2:	2300      	movs	r3, #0
  407ee4:	6363      	str	r3, [r4, #52]	; 0x34
  407ee6:	89a3      	ldrh	r3, [r4, #12]
  407ee8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  407eec:	81a3      	strh	r3, [r4, #12]
  407eee:	2300      	movs	r3, #0
  407ef0:	6063      	str	r3, [r4, #4]
  407ef2:	6923      	ldr	r3, [r4, #16]
  407ef4:	6023      	str	r3, [r4, #0]
  407ef6:	89a3      	ldrh	r3, [r4, #12]
  407ef8:	f043 0308 	orr.w	r3, r3, #8
  407efc:	81a3      	strh	r3, [r4, #12]
  407efe:	6923      	ldr	r3, [r4, #16]
  407f00:	b94b      	cbnz	r3, 407f16 <__swsetup_r+0x9a>
  407f02:	89a3      	ldrh	r3, [r4, #12]
  407f04:	f403 7320 	and.w	r3, r3, #640	; 0x280
  407f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407f0c:	d003      	beq.n	407f16 <__swsetup_r+0x9a>
  407f0e:	4621      	mov	r1, r4
  407f10:	4630      	mov	r0, r6
  407f12:	f7ff fa59 	bl	4073c8 <__smakebuf_r>
  407f16:	89a2      	ldrh	r2, [r4, #12]
  407f18:	f012 0301 	ands.w	r3, r2, #1
  407f1c:	d00c      	beq.n	407f38 <__swsetup_r+0xbc>
  407f1e:	2300      	movs	r3, #0
  407f20:	60a3      	str	r3, [r4, #8]
  407f22:	6963      	ldr	r3, [r4, #20]
  407f24:	425b      	negs	r3, r3
  407f26:	61a3      	str	r3, [r4, #24]
  407f28:	6923      	ldr	r3, [r4, #16]
  407f2a:	b953      	cbnz	r3, 407f42 <__swsetup_r+0xc6>
  407f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407f30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  407f34:	d1ba      	bne.n	407eac <__swsetup_r+0x30>
  407f36:	bd70      	pop	{r4, r5, r6, pc}
  407f38:	0792      	lsls	r2, r2, #30
  407f3a:	bf58      	it	pl
  407f3c:	6963      	ldrpl	r3, [r4, #20]
  407f3e:	60a3      	str	r3, [r4, #8]
  407f40:	e7f2      	b.n	407f28 <__swsetup_r+0xac>
  407f42:	2000      	movs	r0, #0
  407f44:	e7f7      	b.n	407f36 <__swsetup_r+0xba>
  407f46:	bf00      	nop
  407f48:	2040004c 	.word	0x2040004c
  407f4c:	00408680 	.word	0x00408680
  407f50:	004086a0 	.word	0x004086a0
  407f54:	00408660 	.word	0x00408660

00407f58 <_close_r>:
  407f58:	b538      	push	{r3, r4, r5, lr}
  407f5a:	4c06      	ldr	r4, [pc, #24]	; (407f74 <_close_r+0x1c>)
  407f5c:	2300      	movs	r3, #0
  407f5e:	4605      	mov	r5, r0
  407f60:	4608      	mov	r0, r1
  407f62:	6023      	str	r3, [r4, #0]
  407f64:	f7fa fada 	bl	40251c <_close>
  407f68:	1c43      	adds	r3, r0, #1
  407f6a:	d102      	bne.n	407f72 <_close_r+0x1a>
  407f6c:	6823      	ldr	r3, [r4, #0]
  407f6e:	b103      	cbz	r3, 407f72 <_close_r+0x1a>
  407f70:	602b      	str	r3, [r5, #0]
  407f72:	bd38      	pop	{r3, r4, r5, pc}
  407f74:	20400960 	.word	0x20400960

00407f78 <_fstat_r>:
  407f78:	b538      	push	{r3, r4, r5, lr}
  407f7a:	4c07      	ldr	r4, [pc, #28]	; (407f98 <_fstat_r+0x20>)
  407f7c:	2300      	movs	r3, #0
  407f7e:	4605      	mov	r5, r0
  407f80:	4608      	mov	r0, r1
  407f82:	4611      	mov	r1, r2
  407f84:	6023      	str	r3, [r4, #0]
  407f86:	f7fa facc 	bl	402522 <_fstat>
  407f8a:	1c43      	adds	r3, r0, #1
  407f8c:	d102      	bne.n	407f94 <_fstat_r+0x1c>
  407f8e:	6823      	ldr	r3, [r4, #0]
  407f90:	b103      	cbz	r3, 407f94 <_fstat_r+0x1c>
  407f92:	602b      	str	r3, [r5, #0]
  407f94:	bd38      	pop	{r3, r4, r5, pc}
  407f96:	bf00      	nop
  407f98:	20400960 	.word	0x20400960

00407f9c <_isatty_r>:
  407f9c:	b538      	push	{r3, r4, r5, lr}
  407f9e:	4c06      	ldr	r4, [pc, #24]	; (407fb8 <_isatty_r+0x1c>)
  407fa0:	2300      	movs	r3, #0
  407fa2:	4605      	mov	r5, r0
  407fa4:	4608      	mov	r0, r1
  407fa6:	6023      	str	r3, [r4, #0]
  407fa8:	f7fa fac0 	bl	40252c <_isatty>
  407fac:	1c43      	adds	r3, r0, #1
  407fae:	d102      	bne.n	407fb6 <_isatty_r+0x1a>
  407fb0:	6823      	ldr	r3, [r4, #0]
  407fb2:	b103      	cbz	r3, 407fb6 <_isatty_r+0x1a>
  407fb4:	602b      	str	r3, [r5, #0]
  407fb6:	bd38      	pop	{r3, r4, r5, pc}
  407fb8:	20400960 	.word	0x20400960

00407fbc <_lseek_r>:
  407fbc:	b538      	push	{r3, r4, r5, lr}
  407fbe:	4c07      	ldr	r4, [pc, #28]	; (407fdc <_lseek_r+0x20>)
  407fc0:	4605      	mov	r5, r0
  407fc2:	4608      	mov	r0, r1
  407fc4:	4611      	mov	r1, r2
  407fc6:	2200      	movs	r2, #0
  407fc8:	6022      	str	r2, [r4, #0]
  407fca:	461a      	mov	r2, r3
  407fcc:	f7fa fab0 	bl	402530 <_lseek>
  407fd0:	1c43      	adds	r3, r0, #1
  407fd2:	d102      	bne.n	407fda <_lseek_r+0x1e>
  407fd4:	6823      	ldr	r3, [r4, #0]
  407fd6:	b103      	cbz	r3, 407fda <_lseek_r+0x1e>
  407fd8:	602b      	str	r3, [r5, #0]
  407fda:	bd38      	pop	{r3, r4, r5, pc}
  407fdc:	20400960 	.word	0x20400960

00407fe0 <__ascii_mbtowc>:
  407fe0:	b082      	sub	sp, #8
  407fe2:	b901      	cbnz	r1, 407fe6 <__ascii_mbtowc+0x6>
  407fe4:	a901      	add	r1, sp, #4
  407fe6:	b142      	cbz	r2, 407ffa <__ascii_mbtowc+0x1a>
  407fe8:	b14b      	cbz	r3, 407ffe <__ascii_mbtowc+0x1e>
  407fea:	7813      	ldrb	r3, [r2, #0]
  407fec:	600b      	str	r3, [r1, #0]
  407fee:	7812      	ldrb	r2, [r2, #0]
  407ff0:	1c10      	adds	r0, r2, #0
  407ff2:	bf18      	it	ne
  407ff4:	2001      	movne	r0, #1
  407ff6:	b002      	add	sp, #8
  407ff8:	4770      	bx	lr
  407ffa:	4610      	mov	r0, r2
  407ffc:	e7fb      	b.n	407ff6 <__ascii_mbtowc+0x16>
  407ffe:	f06f 0001 	mvn.w	r0, #1
  408002:	e7f8      	b.n	407ff6 <__ascii_mbtowc+0x16>

00408004 <_read_r>:
  408004:	b538      	push	{r3, r4, r5, lr}
  408006:	4c07      	ldr	r4, [pc, #28]	; (408024 <_read_r+0x20>)
  408008:	4605      	mov	r5, r0
  40800a:	4608      	mov	r0, r1
  40800c:	4611      	mov	r1, r2
  40800e:	2200      	movs	r2, #0
  408010:	6022      	str	r2, [r4, #0]
  408012:	461a      	mov	r2, r3
  408014:	f7fb fb32 	bl	40367c <_read>
  408018:	1c43      	adds	r3, r0, #1
  40801a:	d102      	bne.n	408022 <_read_r+0x1e>
  40801c:	6823      	ldr	r3, [r4, #0]
  40801e:	b103      	cbz	r3, 408022 <_read_r+0x1e>
  408020:	602b      	str	r3, [r5, #0]
  408022:	bd38      	pop	{r3, r4, r5, pc}
  408024:	20400960 	.word	0x20400960

00408028 <__ascii_wctomb>:
  408028:	b149      	cbz	r1, 40803e <__ascii_wctomb+0x16>
  40802a:	2aff      	cmp	r2, #255	; 0xff
  40802c:	bf85      	ittet	hi
  40802e:	238a      	movhi	r3, #138	; 0x8a
  408030:	6003      	strhi	r3, [r0, #0]
  408032:	700a      	strbls	r2, [r1, #0]
  408034:	f04f 30ff 	movhi.w	r0, #4294967295
  408038:	bf98      	it	ls
  40803a:	2001      	movls	r0, #1
  40803c:	4770      	bx	lr
  40803e:	4608      	mov	r0, r1
  408040:	4770      	bx	lr
  408042:	0000      	movs	r0, r0
  408044:	656d6954 	.word	0x656d6954
  408048:	6e6f4320 	.word	0x6e6f4320
  40804c:	6c6f7274 	.word	0x6c6f7274
  408050:	25203d20 	.word	0x25203d20
  408054:	73752066 	.word	0x73752066
  408058:	00000a20 	.word	0x00000a20
  40805c:	682f2e2e 	.word	0x682f2e2e
  408060:	732f6c61 	.word	0x732f6c61
  408064:	682f6372 	.word	0x682f6372
  408068:	615f6c61 	.word	0x615f6c61
  40806c:	615f6364 	.word	0x615f6364
  408070:	636e7973 	.word	0x636e7973
  408074:	0000632e 	.word	0x0000632e
  408078:	682f2e2e 	.word	0x682f2e2e
  40807c:	732f6c61 	.word	0x732f6c61
  408080:	682f6372 	.word	0x682f6372
  408084:	695f6c61 	.word	0x695f6c61
  408088:	00632e6f 	.word	0x00632e6f
  40808c:	682f2e2e 	.word	0x682f2e2e
  408090:	732f6c61 	.word	0x732f6c61
  408094:	682f6372 	.word	0x682f6372
  408098:	705f6c61 	.word	0x705f6c61
  40809c:	632e6d77 	.word	0x632e6d77
  4080a0:	00000000 	.word	0x00000000
  4080a4:	682f2e2e 	.word	0x682f2e2e
  4080a8:	732f6c61 	.word	0x732f6c61
  4080ac:	682f6372 	.word	0x682f6372
  4080b0:	745f6c61 	.word	0x745f6c61
  4080b4:	72656d69 	.word	0x72656d69
  4080b8:	0000632e 	.word	0x0000632e
  4080bc:	682f2e2e 	.word	0x682f2e2e
  4080c0:	732f6c61 	.word	0x732f6c61
  4080c4:	682f6372 	.word	0x682f6372
  4080c8:	755f6c61 	.word	0x755f6c61
  4080cc:	74726173 	.word	0x74726173
  4080d0:	6e79735f 	.word	0x6e79735f
  4080d4:	00632e63 	.word	0x00632e63
  4080d8:	682f2e2e 	.word	0x682f2e2e
  4080dc:	752f6c61 	.word	0x752f6c61
  4080e0:	736c6974 	.word	0x736c6974
  4080e4:	6372732f 	.word	0x6372732f
  4080e8:	6974752f 	.word	0x6974752f
  4080ec:	6c5f736c 	.word	0x6c5f736c
  4080f0:	2e747369 	.word	0x2e747369
  4080f4:	00000063 	.word	0x00000063
  4080f8:	682f2e2e 	.word	0x682f2e2e
  4080fc:	752f6c61 	.word	0x752f6c61
  408100:	736c6974 	.word	0x736c6974
  408104:	6372732f 	.word	0x6372732f
  408108:	6974752f 	.word	0x6974752f
  40810c:	725f736c 	.word	0x725f736c
  408110:	62676e69 	.word	0x62676e69
  408114:	65666675 	.word	0x65666675
  408118:	00632e72 	.word	0x00632e72

0040811c <_afecs>:
  40811c:	00000000 2f84080b 23000000 ffffffff     ......./...#....
  40812c:	0000ffff 00000000 00000000 00000000     ................
  40813c:	0000030c 00000000 00000000 00000000     ................
  40814c:	00000000 00000200 00000200 00000200     ................
  40815c:	00000200 00000200 00000200 00000200     ................
  40816c:	00000200 00000200 00000200 00000200     ................
  40817c:	00000200 00000001 2f84080b 23000000     .........../...#
  40818c:	ffffffff 0000ffff 00000000 00000000     ................
  40819c:	00000000 0000030c 00000000 00000000     ................
	...
  4081b4:	00000200 00000200 00000200 00000200     ................
  4081c4:	00000200 00000200 00000200 00000200     ................
  4081d4:	00000200 00000200 00000200 00000200     ................
  4081e4:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  4081f4:	63656661 0000632e                       afec.c..

004081fc <_ext_irq>:
  4081fc:	00000000 00000024 00000000 00000000     ....$...........
	...
  408218:	00000001 00002000 00002000 00002000     ..... ... ... ..
  408228:	00000000 00002000 00000000 00000003     ..... ..........
  408238:	00080000 00000000 00000000 00000000     ................
	...

00408250 <_pio_irq_n>:
  408250:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  408260:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  408270:	00000000                                ....

00408274 <_pwms>:
  408274:	40020000 0000001f 00010005 00000001     ...@............
  408284:	00000001 000000ff 00000000 00000004     ................
	...
  4082a0:	00000002 004082fc 00000001 20400488     ......@.......@ 
  4082b0:	4005c000 0000003c 00010005 00000001     ...@<...........
  4082c0:	00000001 000000ff 00000000 00000004     ................
	...
  4082dc:	00000001 004082ec 00000001 2040047c     ......@.....|.@ 

004082ec <_ch_cfg1>:
  4082ec:	00000000 0000010b 000003e8 00000200     ................

004082fc <_ch_cfg0>:
  4082fc:	00000000 0000010b 000003e8 00000200     ................
  40830c:	00000002 0000010b 000003e8 00000200     ................
  40831c:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  40832c:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  40833c:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00408348 <_usarts>:
  408348:	00000001 001008c0 000100f4 682f2e2e     ............../h
  408358:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  408368:	632e7472 00000000                       rt.c....

00408370 <_cfgs>:
  408370:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  408380:	00000040 00000000 00000040 00000000     @.......@.......
  408390:	00000040 00000000 00000040 00000000     @.......@.......
  4083a0:	00000040 00000000 00000040 00000000     @.......@.......
  4083b0:	00000040 00000000 00000040 00000000     @.......@.......
  4083c0:	00000040 00000000 00000040 00000000     @.......@.......
  4083d0:	00000040 00000000 00000040 00000000     @.......@.......
  4083e0:	00000040 00000000 00000040 00000000     @.......@.......
  4083f0:	00000040 00000000 00000040 00000000     @.......@.......
  408400:	00000040 00000000 00000040 00000000     @.......@.......
  408410:	00000040 00000000 00000040 00000000     @.......@.......
  408420:	00000040 00000000 00000040 00000000     @.......@.......
  408430:	52415453 000a2054 74727173 00000000     START ..sqrt....

00408440 <npio2_hw>:
  408440:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  408450:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  408460:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  408470:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  408480:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  408490:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  4084a0:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  4084b0:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

004084c0 <two_over_pi>:
  4084c0:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  4084d0:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  4084e0:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  4084f0:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  408500:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  408510:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  408520:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  408530:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  408540:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  408550:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  408560:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  408570:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  408580:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  408590:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  4085a0:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  4085b0:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  4085c0:	0060e27b 00c08c6b                       {.`.k...

004085c8 <PIo2>:
  4085c8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  4085d8:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  4085e8:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  4085f8:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00408608 <init_jk>:
  408608:	00000002 00000003 00000004 00000006     ................

00408618 <_global_impure_ptr>:
  408618:	20400050 00464e49 00666e69 004e414e     P.@ INF.inf.NAN.
  408628:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  408638:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  408648:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  408658:	4e614e00 00000000                       .NaN....

00408660 <__sf_fake_stderr>:
	...

00408680 <__sf_fake_stdin>:
	...

004086a0 <__sf_fake_stdout>:
	...

004086c0 <__mprec_bigtens>:
  4086c0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4086d0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4086e0:	7f73bf3c 75154fdd                       <.s..O.u

004086e8 <__mprec_tens>:
  4086e8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4086f8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408708:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408718:	00000000 412e8480 00000000 416312d0     .......A......cA
  408728:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408738:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408748:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408758:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408768:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408778:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408788:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408798:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4087a8:	79d99db4 44ea7843                       ...yCx.D

004087b0 <p05.6047>:
  4087b0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  4087c0:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  4087d0:	5849534f 00002e00                                OSIX...

004087d7 <_ctype_>:
  4087d7:	20202000 20202020 28282020 20282828     .         ((((( 
  4087e7:	20202020 20202020 20202020 20202020                     
  4087f7:	10108820 10101010 10101010 10101010      ...............
  408807:	04040410 04040404 10040404 10101010     ................
  408817:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408827:	01010101 01010101 01010101 10101010     ................
  408837:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408847:	02020202 02020202 02020202 10101010     ................
  408857:	00000020 00000000 00000000 00000000      ...............
	...

004088d8 <_init>:
  4088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4088da:	bf00      	nop
  4088dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4088de:	bc08      	pop	{r3}
  4088e0:	469e      	mov	lr, r3
  4088e2:	4770      	bx	lr

004088e4 <__init_array_start>:
  4088e4:	0040018d 	.word	0x0040018d

004088e8 <_fini>:
  4088e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4088ea:	bf00      	nop
  4088ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4088ee:	bc08      	pop	{r3}
  4088f0:	469e      	mov	lr, r3
  4088f2:	4770      	bx	lr

004088f4 <__fini_array_start>:
  4088f4:	00400169 	.word	0x00400169
