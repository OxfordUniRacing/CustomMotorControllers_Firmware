
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c18  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  00405c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004a8  20400218  00405e30  00020218  2**2
                  ALLOC
  3 .heap         00000200  204006c0  004062d8  00020218  2**0
                  ALLOC
  4 .stack        00000400  204008c0  004064d8  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   00024012  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004ae4  00000000  00000000  000442b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000b7e7  00000000  00000000  00048d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d28  00000000  00000000  0005457c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b60  00000000  00000000  000552a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00046372  00000000  00000000  00055e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001cb06  00000000  00000000  0009c176  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00155aca  00000000  00000000  000b8c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002e14  00000000  00000000  0020e748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 0c 40 20 f1 04 40 00 ed 04 40 00 ed 04 40 00     ..@ ..@...@...@.
  400010:	ed 04 40 00 ed 04 40 00 ed 04 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ed 04 40 00 ed 04 40 00 00 00 00 00 ed 04 40 00     ..@...@.......@.
  40003c:	ed 04 40 00 ed 04 40 00 ed 04 40 00 ed 04 40 00     ..@...@...@...@.
  40004c:	ed 04 40 00 ed 04 40 00 ed 04 40 00 ed 04 40 00     ..@...@...@...@.
  40005c:	ed 04 40 00 ed 04 40 00 00 00 00 00 59 18 40 00     ..@...@.....Y.@.
  40006c:	ed 04 40 00 ed 04 40 00 ed 04 40 00 ed 04 40 00     ..@...@...@...@.
  40007c:	ed 04 40 00 4d 18 40 00 ed 04 40 00 ed 04 40 00     ..@.M.@...@...@.
  40008c:	ed 04 40 00 ed 04 40 00 ed 04 40 00 ed 04 40 00     ..@...@...@...@.
  40009c:	61 1d 40 00 ed 04 40 00 ed 04 40 00 ed 04 40 00     a.@...@...@...@.
  4000ac:	ed 04 40 00 ed 04 40 00 2d 14 40 00 ed 04 40 00     ..@...@.-.@...@.
  4000bc:	7d 04 40 00 ed 04 40 00 ed 04 40 00 ed 04 40 00     }.@...@...@...@.
  4000cc:	ed 04 40 00 ed 04 40 00 1d 16 40 00 ed 04 40 00     ..@...@...@...@.
  4000dc:	ed 04 40 00 41 14 40 00 ed 04 40 00 ed 04 40 00     ..@.A.@...@...@.
  4000ec:	ed 04 40 00 ed 04 40 00 ed 04 40 00 ed 04 40 00     ..@...@...@...@.
  4000fc:	ed 04 40 00 ed 04 40 00 ed 04 40 00 75 1d 40 00     ..@...@...@.u.@.
  40010c:	ed 04 40 00 ed 04 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 ed 04 40 00 ed 04 40 00 d1 20 40 00     ......@...@.. @.
  40012c:	ed 04 40 00 ed 04 40 00 ed 04 40 00 ed 04 40 00     ..@...@...@...@.
  40013c:	ed 04 40 00 ed 04 40 00 ed 04 40 00 ed 04 40 00     ..@...@...@...@.
  40014c:	ed 04 40 00 ed 04 40 00 ed 04 40 00 ed 04 40 00     ..@...@...@...@.
  40015c:	ed 04 40 00 ed 04 40 00 ed 04 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	00405c18 	.word	0x00405c18

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00405c18 	.word	0x00405c18
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	00405c18 	.word	0x00405c18
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	004009c1 	.word	0x004009c1
  4001e4:	00402291 	.word	0x00402291

004001e8 <dma_adc_1_callback>:
		printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
	}
	
}

static void dma_adc_1_callback(struct _dma_resource *resource){
  4001e8:	b530      	push	{r4, r5, lr}
  4001ea:	b083      	sub	sp, #12
	//just for testing
	printf("interrupt - ADC 1 - %i %i %i %i  \n", (int)dma_adc_1_buff[0],(int)dma_adc_1_buff[1],(int)dma_adc_1_buff[2],(int)dma_adc_1_buff[3]);
  4001ec:	4820      	ldr	r0, [pc, #128]	; (400270 <dma_adc_1_callback+0x88>)
  4001ee:	6801      	ldr	r1, [r0, #0]
  4001f0:	6842      	ldr	r2, [r0, #4]
  4001f2:	6883      	ldr	r3, [r0, #8]
  4001f4:	68c0      	ldr	r0, [r0, #12]
  4001f6:	9000      	str	r0, [sp, #0]
  4001f8:	481e      	ldr	r0, [pc, #120]	; (400274 <dma_adc_1_callback+0x8c>)
  4001fa:	4c1f      	ldr	r4, [pc, #124]	; (400278 <dma_adc_1_callback+0x90>)
  4001fc:	47a0      	blx	r4
	
	//go through the values that the DMA got and get the ones that we need (currents and bus voltage)
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  4001fe:	2300      	movs	r3, #0
  400200:	e008      	b.n	400214 <dma_adc_1_callback+0x2c>
		
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
			
			case AFEC_LCDR_CHNB(ADC_CURRENT_C_CHANNEL):
				currents[2] = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400202:	b292      	uxth	r2, r2
  400204:	491d      	ldr	r1, [pc, #116]	; (40027c <dma_adc_1_callback+0x94>)
  400206:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  400208:	4919      	ldr	r1, [pc, #100]	; (400270 <dma_adc_1_callback+0x88>)
  40020a:	7c0a      	ldrb	r2, [r1, #16]
  40020c:	f042 0204 	orr.w	r2, r2, #4
  400210:	740a      	strb	r2, [r1, #16]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400212:	3301      	adds	r3, #1
  400214:	2b03      	cmp	r3, #3
  400216:	dc13      	bgt.n	400240 <dma_adc_1_callback+0x58>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400218:	4a15      	ldr	r2, [pc, #84]	; (400270 <dma_adc_1_callback+0x88>)
  40021a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40021e:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400222:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  400226:	d0ec      	beq.n	400202 <dma_adc_1_callback+0x1a>
  400228:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  40022c:	d1f1      	bne.n	400212 <dma_adc_1_callback+0x2a>
				break;
			
			case AFEC_LCDR_CHNB(ADC_SUPPL_VOLTAGE_CHANNEL):
				voltage = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  40022e:	b292      	uxth	r2, r2
  400230:	4913      	ldr	r1, [pc, #76]	; (400280 <dma_adc_1_callback+0x98>)
  400232:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<3);
  400234:	490e      	ldr	r1, [pc, #56]	; (400270 <dma_adc_1_callback+0x88>)
  400236:	7c0a      	ldrb	r2, [r1, #16]
  400238:	f042 0208 	orr.w	r2, r2, #8
  40023c:	740a      	strb	r2, [r1, #16]
				break;
  40023e:	e7e8      	b.n	400212 <dma_adc_1_callback+0x2a>
			default:
				;
		}
	}
	
	if(ready_values == ALL_VALUES_READY){
  400240:	4b0b      	ldr	r3, [pc, #44]	; (400270 <dma_adc_1_callback+0x88>)
  400242:	7c1b      	ldrb	r3, [r3, #16]
  400244:	2b0f      	cmp	r3, #15
  400246:	d001      	beq.n	40024c <dma_adc_1_callback+0x64>
		
		//launch control loop
		printf("Data collected, launching control loop from adc 1 \n");
		printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
	}
}
  400248:	b003      	add	sp, #12
  40024a:	bd30      	pop	{r4, r5, pc}
		ready_values = 0;
  40024c:	2200      	movs	r2, #0
  40024e:	4b08      	ldr	r3, [pc, #32]	; (400270 <dma_adc_1_callback+0x88>)
  400250:	741a      	strb	r2, [r3, #16]
		printf("Data collected, launching control loop from adc 1 \n");
  400252:	480c      	ldr	r0, [pc, #48]	; (400284 <dma_adc_1_callback+0x9c>)
  400254:	4c08      	ldr	r4, [pc, #32]	; (400278 <dma_adc_1_callback+0x90>)
  400256:	47a0      	blx	r4
		printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
  400258:	4808      	ldr	r0, [pc, #32]	; (40027c <dma_adc_1_callback+0x94>)
  40025a:	6843      	ldr	r3, [r0, #4]
  40025c:	6802      	ldr	r2, [r0, #0]
  40025e:	4908      	ldr	r1, [pc, #32]	; (400280 <dma_adc_1_callback+0x98>)
  400260:	6809      	ldr	r1, [r1, #0]
  400262:	68c5      	ldr	r5, [r0, #12]
  400264:	9501      	str	r5, [sp, #4]
  400266:	6880      	ldr	r0, [r0, #8]
  400268:	9000      	str	r0, [sp, #0]
  40026a:	4807      	ldr	r0, [pc, #28]	; (400288 <dma_adc_1_callback+0xa0>)
  40026c:	47a0      	blx	r4
}
  40026e:	e7eb      	b.n	400248 <dma_adc_1_callback+0x60>
  400270:	20400234 	.word	0x20400234
  400274:	004054c8 	.word	0x004054c8
  400278:	004034d1 	.word	0x004034d1
  40027c:	204004c4 	.word	0x204004c4
  400280:	204004c0 	.word	0x204004c0
  400284:	004054ec 	.word	0x004054ec
  400288:	004054dc 	.word	0x004054dc

0040028c <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  40028c:	b530      	push	{r4, r5, lr}
  40028e:	b085      	sub	sp, #20
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3],\
  400290:	4823      	ldr	r0, [pc, #140]	; (400320 <dma_adc_0_callback+0x94>)
  400292:	6941      	ldr	r1, [r0, #20]
  400294:	6982      	ldr	r2, [r0, #24]
  400296:	69c3      	ldr	r3, [r0, #28]
  400298:	6a04      	ldr	r4, [r0, #32]
		(int)dma_adc_0_buff[4],(int)dma_adc_0_buff[5]);
  40029a:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40029c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3],\
  40029e:	9002      	str	r0, [sp, #8]
  4002a0:	9501      	str	r5, [sp, #4]
  4002a2:	9400      	str	r4, [sp, #0]
  4002a4:	481f      	ldr	r0, [pc, #124]	; (400324 <dma_adc_0_callback+0x98>)
  4002a6:	4c20      	ldr	r4, [pc, #128]	; (400328 <dma_adc_0_callback+0x9c>)
  4002a8:	47a0      	blx	r4
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  4002aa:	2300      	movs	r3, #0
  4002ac:	e008      	b.n	4002c0 <dma_adc_0_callback+0x34>
				currents[1] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  4002ae:	b292      	uxth	r2, r2
  4002b0:	491e      	ldr	r1, [pc, #120]	; (40032c <dma_adc_0_callback+0xa0>)
  4002b2:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  4002b4:	491a      	ldr	r1, [pc, #104]	; (400320 <dma_adc_0_callback+0x94>)
  4002b6:	7c0a      	ldrb	r2, [r1, #16]
  4002b8:	f042 0202 	orr.w	r2, r2, #2
  4002bc:	740a      	strb	r2, [r1, #16]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  4002be:	3301      	adds	r3, #1
  4002c0:	2b05      	cmp	r3, #5
  4002c2:	dc14      	bgt.n	4002ee <dma_adc_0_callback+0x62>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  4002c4:	4a16      	ldr	r2, [pc, #88]	; (400320 <dma_adc_0_callback+0x94>)
  4002c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  4002ca:	6952      	ldr	r2, [r2, #20]
  4002cc:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  4002d0:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  4002d4:	d0eb      	beq.n	4002ae <dma_adc_0_callback+0x22>
  4002d6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4002da:	d1f0      	bne.n	4002be <dma_adc_0_callback+0x32>
				currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  4002dc:	b292      	uxth	r2, r2
  4002de:	4913      	ldr	r1, [pc, #76]	; (40032c <dma_adc_0_callback+0xa0>)
  4002e0:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  4002e2:	490f      	ldr	r1, [pc, #60]	; (400320 <dma_adc_0_callback+0x94>)
  4002e4:	7c0a      	ldrb	r2, [r1, #16]
  4002e6:	f042 0201 	orr.w	r2, r2, #1
  4002ea:	740a      	strb	r2, [r1, #16]
				break;
  4002ec:	e7e7      	b.n	4002be <dma_adc_0_callback+0x32>
	if(ready_values == ALL_VALUES_READY){
  4002ee:	4b0c      	ldr	r3, [pc, #48]	; (400320 <dma_adc_0_callback+0x94>)
  4002f0:	7c1b      	ldrb	r3, [r3, #16]
  4002f2:	2b0f      	cmp	r3, #15
  4002f4:	d001      	beq.n	4002fa <dma_adc_0_callback+0x6e>
}
  4002f6:	b005      	add	sp, #20
  4002f8:	bd30      	pop	{r4, r5, pc}
		ready_values = 0;
  4002fa:	2200      	movs	r2, #0
  4002fc:	4b08      	ldr	r3, [pc, #32]	; (400320 <dma_adc_0_callback+0x94>)
  4002fe:	741a      	strb	r2, [r3, #16]
		printf("Data collected, launching control loop from adc 0\n");
  400300:	480b      	ldr	r0, [pc, #44]	; (400330 <dma_adc_0_callback+0xa4>)
  400302:	4c09      	ldr	r4, [pc, #36]	; (400328 <dma_adc_0_callback+0x9c>)
  400304:	47a0      	blx	r4
		printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
  400306:	4809      	ldr	r0, [pc, #36]	; (40032c <dma_adc_0_callback+0xa0>)
  400308:	6843      	ldr	r3, [r0, #4]
  40030a:	6802      	ldr	r2, [r0, #0]
  40030c:	4909      	ldr	r1, [pc, #36]	; (400334 <dma_adc_0_callback+0xa8>)
  40030e:	6809      	ldr	r1, [r1, #0]
  400310:	68c5      	ldr	r5, [r0, #12]
  400312:	9501      	str	r5, [sp, #4]
  400314:	6880      	ldr	r0, [r0, #8]
  400316:	9000      	str	r0, [sp, #0]
  400318:	4807      	ldr	r0, [pc, #28]	; (400338 <dma_adc_0_callback+0xac>)
  40031a:	47a0      	blx	r4
}
  40031c:	e7eb      	b.n	4002f6 <dma_adc_0_callback+0x6a>
  40031e:	bf00      	nop
  400320:	20400234 	.word	0x20400234
  400324:	00405520 	.word	0x00405520
  400328:	004034d1 	.word	0x004034d1
  40032c:	204004c4 	.word	0x204004c4
  400330:	0040554c 	.word	0x0040554c
  400334:	204004c0 	.word	0x204004c0
  400338:	004054dc 	.word	0x004054dc

0040033c <dma_adc_init>:


void dma_adc_init(void){
  40033c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	//channel 0 for ADC 0
	
	//source address = AFEC 0->LCDR
	//_dma_set_source_address(0,(void *) ((Afec *)((&ADC_0)->device.hw) + AFEC_LCDR_OFFSET));
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  400340:	4919      	ldr	r1, [pc, #100]	; (4003a8 <dma_adc_init+0x6c>)
  400342:	2000      	movs	r0, #0
  400344:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4003c8 <dma_adc_init+0x8c>
  400348:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  40034a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4003cc <dma_adc_init+0x90>
  40034e:	f108 0114 	add.w	r1, r8, #20
  400352:	2000      	movs	r0, #0
  400354:	4f15      	ldr	r7, [pc, #84]	; (4003ac <dma_adc_init+0x70>)
  400356:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  400358:	2118      	movs	r1, #24
  40035a:	2000      	movs	r0, #0
  40035c:	4d14      	ldr	r5, [pc, #80]	; (4003b0 <dma_adc_init+0x74>)
  40035e:	47a8      	blx	r5
	
	//set callback function
	struct _dma_resource **res0;
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  400360:	2100      	movs	r1, #0
  400362:	460c      	mov	r4, r1
  400364:	4608      	mov	r0, r1
  400366:	4e13      	ldr	r6, [pc, #76]	; (4003b4 <dma_adc_init+0x78>)
  400368:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  40036a:	6823      	ldr	r3, [r4, #0]
  40036c:	4a12      	ldr	r2, [pc, #72]	; (4003b8 <dma_adc_init+0x7c>)
  40036e:	601a      	str	r2, [r3, #0]
	
	//enable interrupt on successful transfer
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400370:	2201      	movs	r2, #1
  400372:	4621      	mov	r1, r4
  400374:	4620      	mov	r0, r4
  400376:	4c11      	ldr	r4, [pc, #68]	; (4003bc <dma_adc_init+0x80>)
  400378:	47a0      	blx	r4
	
	//channel 0 for ADC 0
	
	//source address = AFEC 1->LCDR
	//_dma_set_source_address(0,(void *) ((Afec *)((&ADC_0)->device.hw) + AFEC_LCDR_OFFSET));
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  40037a:	4911      	ldr	r1, [pc, #68]	; (4003c0 <dma_adc_init+0x84>)
  40037c:	2001      	movs	r0, #1
  40037e:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400380:	4641      	mov	r1, r8
  400382:	2001      	movs	r0, #1
  400384:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  400386:	2110      	movs	r1, #16
  400388:	2001      	movs	r0, #1
  40038a:	47a8      	blx	r5
	
	//set callback function
	struct _dma_resource **res1;
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  40038c:	2101      	movs	r1, #1
  40038e:	2500      	movs	r5, #0
  400390:	4628      	mov	r0, r5
  400392:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  400394:	682b      	ldr	r3, [r5, #0]
  400396:	4a0b      	ldr	r2, [pc, #44]	; (4003c4 <dma_adc_init+0x88>)
  400398:	601a      	str	r2, [r3, #0]
	
	//enable interrupt on successful transfer
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  40039a:	2201      	movs	r2, #1
  40039c:	4629      	mov	r1, r5
  40039e:	4610      	mov	r0, r2
  4003a0:	47a0      	blx	r4
  4003a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4003a6:	bf00      	nop
  4003a8:	4003c020 	.word	0x4003c020
  4003ac:	00402015 	.word	0x00402015
  4003b0:	00402035 	.word	0x00402035
  4003b4:	00402065 	.word	0x00402065
  4003b8:	0040028d 	.word	0x0040028d
  4003bc:	00402079 	.word	0x00402079
  4003c0:	40064020 	.word	0x40064020
  4003c4:	004001e9 	.word	0x004001e9
  4003c8:	00402025 	.word	0x00402025
  4003cc:	20400234 	.word	0x20400234

004003d0 <dma_adc_0_enable_for_one_transaction>:
	//_dma_set_irq_state(DMA_ADC_1_CHANNEL,DMA_TRANSFER_ERROR_CB,true);
		
	
}

void dma_adc_0_enable_for_one_transaction(void){
  4003d0:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  4003d2:	4906      	ldr	r1, [pc, #24]	; (4003ec <dma_adc_0_enable_for_one_transaction+0x1c>)
  4003d4:	2000      	movs	r0, #0
  4003d6:	4b06      	ldr	r3, [pc, #24]	; (4003f0 <dma_adc_0_enable_for_one_transaction+0x20>)
  4003d8:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  4003da:	2118      	movs	r1, #24
  4003dc:	2000      	movs	r0, #0
  4003de:	4b05      	ldr	r3, [pc, #20]	; (4003f4 <dma_adc_0_enable_for_one_transaction+0x24>)
  4003e0:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  4003e2:	2101      	movs	r1, #1
  4003e4:	2000      	movs	r0, #0
  4003e6:	4b04      	ldr	r3, [pc, #16]	; (4003f8 <dma_adc_0_enable_for_one_transaction+0x28>)
  4003e8:	4798      	blx	r3
  4003ea:	bd08      	pop	{r3, pc}
  4003ec:	20400248 	.word	0x20400248
  4003f0:	00402015 	.word	0x00402015
  4003f4:	00402035 	.word	0x00402035
  4003f8:	0040204d 	.word	0x0040204d

004003fc <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  4003fc:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  4003fe:	4906      	ldr	r1, [pc, #24]	; (400418 <dma_adc_1_enable_for_one_transaction+0x1c>)
  400400:	2001      	movs	r0, #1
  400402:	4b06      	ldr	r3, [pc, #24]	; (40041c <dma_adc_1_enable_for_one_transaction+0x20>)
  400404:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  400406:	2110      	movs	r1, #16
  400408:	2001      	movs	r0, #1
  40040a:	4b05      	ldr	r3, [pc, #20]	; (400420 <dma_adc_1_enable_for_one_transaction+0x24>)
  40040c:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  40040e:	2101      	movs	r1, #1
  400410:	4608      	mov	r0, r1
  400412:	4b04      	ldr	r3, [pc, #16]	; (400424 <dma_adc_1_enable_for_one_transaction+0x28>)
  400414:	4798      	blx	r3
  400416:	bd08      	pop	{r3, pc}
  400418:	20400234 	.word	0x20400234
  40041c:	00402015 	.word	0x00402015
  400420:	00402035 	.word	0x00402035
  400424:	0040204d 	.word	0x0040204d

00400428 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  400428:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  40042a:	4d11      	ldr	r5, [pc, #68]	; (400470 <adc_enable_all+0x48>)
  40042c:	2108      	movs	r1, #8
  40042e:	4628      	mov	r0, r5
  400430:	4c10      	ldr	r4, [pc, #64]	; (400474 <adc_enable_all+0x4c>)
  400432:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  400434:	2102      	movs	r1, #2
  400436:	4628      	mov	r0, r5
  400438:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  40043a:	4e0f      	ldr	r6, [pc, #60]	; (400478 <adc_enable_all+0x50>)
  40043c:	2101      	movs	r1, #1
  40043e:	4630      	mov	r0, r6
  400440:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  400442:	2106      	movs	r1, #6
  400444:	4630      	mov	r0, r6
  400446:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  400448:	2105      	movs	r1, #5
  40044a:	4630      	mov	r0, r6
  40044c:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  40044e:	2106      	movs	r1, #6
  400450:	4628      	mov	r0, r5
  400452:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  400454:	210a      	movs	r1, #10
  400456:	4628      	mov	r0, r5
  400458:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  40045a:	2100      	movs	r1, #0
  40045c:	4630      	mov	r0, r6
  40045e:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  400460:	2105      	movs	r1, #5
  400462:	4628      	mov	r0, r5
  400464:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  400466:	2100      	movs	r1, #0
  400468:	4628      	mov	r0, r5
  40046a:	47a0      	blx	r4
  40046c:	bd70      	pop	{r4, r5, r6, pc}
  40046e:	bf00      	nop
  400470:	204005b8 	.word	0x204005b8
  400474:	00400c99 	.word	0x00400c99
  400478:	20400690 	.word	0x20400690

0040047c <PWM0_Handler>:
#include <hpl_pwm.h>
#include <hpl_pwm_config.h>



void PWM0_Handler(void){
  40047c:	4770      	bx	lr
	...

00400480 <pwm_enable_all>:



//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400480:	b570      	push	{r4, r5, r6, lr}
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  400482:	2201      	movs	r2, #1
  400484:	4b13      	ldr	r3, [pc, #76]	; (4004d4 <pwm_enable_all+0x54>)
  400486:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400488:	4b13      	ldr	r3, [pc, #76]	; (4004d8 <pwm_enable_all+0x58>)
  40048a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40048e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400492:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400496:	f3bf 8f6f 	isb	sy
  40049a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40049e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4004a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4004a6:	f3bf 8f6f 	isb	sy
	NVIC_DisableIRQ(PWM1_IRQn);
	
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  4004aa:	4c0c      	ldr	r4, [pc, #48]	; (4004dc <pwm_enable_all+0x5c>)
  4004ac:	4620      	mov	r0, r4
  4004ae:	4e0c      	ldr	r6, [pc, #48]	; (4004e0 <pwm_enable_all+0x60>)
  4004b0:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  4004b2:	4d0c      	ldr	r5, [pc, #48]	; (4004e4 <pwm_enable_all+0x64>)
  4004b4:	4628      	mov	r0, r5
  4004b6:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  4004b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4004bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4004c0:	4620      	mov	r0, r4
  4004c2:	4c09      	ldr	r4, [pc, #36]	; (4004e8 <pwm_enable_all+0x68>)
  4004c4:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD>>1);
  4004c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4004ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4004ce:	4628      	mov	r0, r5
  4004d0:	47a0      	blx	r4
  4004d2:	bd70      	pop	{r4, r5, r6, pc}
  4004d4:	40020000 	.word	0x40020000
  4004d8:	e000e100 	.word	0xe000e100
  4004dc:	204004d0 	.word	0x204004d0
  4004e0:	00400e81 	.word	0x00400e81
  4004e4:	20400674 	.word	0x20400674
  4004e8:	00400ebd 	.word	0x00400ebd

004004ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4004ec:	e7fe      	b.n	4004ec <Dummy_Handler>
	...

004004f0 <Reset_Handler>:
{
  4004f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4004f2:	4b10      	ldr	r3, [pc, #64]	; (400534 <Reset_Handler+0x44>)
  4004f4:	4a10      	ldr	r2, [pc, #64]	; (400538 <Reset_Handler+0x48>)
  4004f6:	429a      	cmp	r2, r3
  4004f8:	d009      	beq.n	40050e <Reset_Handler+0x1e>
  4004fa:	4b0e      	ldr	r3, [pc, #56]	; (400534 <Reset_Handler+0x44>)
  4004fc:	4a0e      	ldr	r2, [pc, #56]	; (400538 <Reset_Handler+0x48>)
  4004fe:	e003      	b.n	400508 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400500:	6811      	ldr	r1, [r2, #0]
  400502:	6019      	str	r1, [r3, #0]
  400504:	3304      	adds	r3, #4
  400506:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400508:	490c      	ldr	r1, [pc, #48]	; (40053c <Reset_Handler+0x4c>)
  40050a:	428b      	cmp	r3, r1
  40050c:	d3f8      	bcc.n	400500 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40050e:	4b0c      	ldr	r3, [pc, #48]	; (400540 <Reset_Handler+0x50>)
  400510:	e002      	b.n	400518 <Reset_Handler+0x28>
                *pDest++ = 0;
  400512:	2200      	movs	r2, #0
  400514:	601a      	str	r2, [r3, #0]
  400516:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400518:	4a0a      	ldr	r2, [pc, #40]	; (400544 <Reset_Handler+0x54>)
  40051a:	4293      	cmp	r3, r2
  40051c:	d3f9      	bcc.n	400512 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40051e:	4a0a      	ldr	r2, [pc, #40]	; (400548 <Reset_Handler+0x58>)
  400520:	4b0a      	ldr	r3, [pc, #40]	; (40054c <Reset_Handler+0x5c>)
  400522:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400526:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400528:	4b09      	ldr	r3, [pc, #36]	; (400550 <Reset_Handler+0x60>)
  40052a:	4798      	blx	r3
        main();
  40052c:	4b09      	ldr	r3, [pc, #36]	; (400554 <Reset_Handler+0x64>)
  40052e:	4798      	blx	r3
  400530:	e7fe      	b.n	400530 <Reset_Handler+0x40>
  400532:	bf00      	nop
  400534:	20400000 	.word	0x20400000
  400538:	00405c18 	.word	0x00405c18
  40053c:	20400218 	.word	0x20400218
  400540:	20400218 	.word	0x20400218
  400544:	204006c0 	.word	0x204006c0
  400548:	e000ed00 	.word	0xe000ed00
  40054c:	00400000 	.word	0x00400000
  400550:	00402ba5 	.word	0x00402ba5
  400554:	0040213d 	.word	0x0040213d

00400558 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  400558:	b5f0      	push	{r4, r5, r6, r7, lr}
  40055a:	b085      	sub	sp, #20
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40055c:	4b20      	ldr	r3, [pc, #128]	; (4005e0 <ADC_1_init+0x88>)
  40055e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400562:	f413 7f80 	tst.w	r3, #256	; 0x100
  400566:	d104      	bne.n	400572 <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400568:	f44f 7280 	mov.w	r2, #256	; 0x100
  40056c:	4b1c      	ldr	r3, [pc, #112]	; (4005e0 <ADC_1_init+0x88>)
  40056e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  400572:	4d1c      	ldr	r5, [pc, #112]	; (4005e4 <ADC_1_init+0x8c>)
  400574:	4c1c      	ldr	r4, [pc, #112]	; (4005e8 <ADC_1_init+0x90>)
  400576:	2600      	movs	r6, #0
  400578:	9602      	str	r6, [sp, #8]
  40057a:	4b1c      	ldr	r3, [pc, #112]	; (4005ec <ADC_1_init+0x94>)
  40057c:	9301      	str	r3, [sp, #4]
  40057e:	2304      	movs	r3, #4
  400580:	9300      	str	r3, [sp, #0]
  400582:	2306      	movs	r3, #6
  400584:	462a      	mov	r2, r5
  400586:	491a      	ldr	r1, [pc, #104]	; (4005f0 <ADC_1_init+0x98>)
  400588:	4620      	mov	r0, r4
  40058a:	4f1a      	ldr	r7, [pc, #104]	; (4005f4 <ADC_1_init+0x9c>)
  40058c:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  40058e:	2310      	movs	r3, #16
  400590:	f105 0208 	add.w	r2, r5, #8
  400594:	4631      	mov	r1, r6
  400596:	4620      	mov	r0, r4
  400598:	4e17      	ldr	r6, [pc, #92]	; (4005f8 <ADC_1_init+0xa0>)
  40059a:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  40059c:	2310      	movs	r3, #16
  40059e:	f105 0218 	add.w	r2, r5, #24
  4005a2:	2101      	movs	r1, #1
  4005a4:	4620      	mov	r0, r4
  4005a6:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  4005a8:	2310      	movs	r3, #16
  4005aa:	f105 0228 	add.w	r2, r5, #40	; 0x28
  4005ae:	2105      	movs	r1, #5
  4005b0:	4620      	mov	r0, r4
  4005b2:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  4005b4:	2310      	movs	r3, #16
  4005b6:	f105 0238 	add.w	r2, r5, #56	; 0x38
  4005ba:	2106      	movs	r1, #6
  4005bc:	4620      	mov	r0, r4
  4005be:	47b0      	blx	r6
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  4005c0:	2202      	movs	r2, #2
  4005c2:	4b0e      	ldr	r3, [pc, #56]	; (4005fc <ADC_1_init+0xa4>)
  4005c4:	601a      	str	r2, [r3, #0]
  4005c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4005ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4005ce:	601a      	str	r2, [r3, #0]
  4005d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4005d4:	601a      	str	r2, [r3, #0]
  4005d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4005da:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  4005dc:	b005      	add	sp, #20
  4005de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4005e0:	400e0600 	.word	0x400e0600
  4005e4:	20400260 	.word	0x20400260
  4005e8:	20400690 	.word	0x20400690
  4005ec:	20400530 	.word	0x20400530
  4005f0:	40064000 	.word	0x40064000
  4005f4:	00400b39 	.word	0x00400b39
  4005f8:	00400be1 	.word	0x00400be1
  4005fc:	400e1000 	.word	0x400e1000

00400600 <ADC_0_init>:
{
  400600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400604:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400606:	4b2a      	ldr	r3, [pc, #168]	; (4006b0 <ADC_0_init+0xb0>)
  400608:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40060a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40060e:	d103      	bne.n	400618 <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400610:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400614:	4b26      	ldr	r3, [pc, #152]	; (4006b0 <ADC_0_init+0xb0>)
  400616:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  400618:	4d26      	ldr	r5, [pc, #152]	; (4006b4 <ADC_0_init+0xb4>)
  40061a:	4c27      	ldr	r4, [pc, #156]	; (4006b8 <ADC_0_init+0xb8>)
  40061c:	2600      	movs	r6, #0
  40061e:	9602      	str	r6, [sp, #8]
  400620:	4b26      	ldr	r3, [pc, #152]	; (4006bc <ADC_0_init+0xbc>)
  400622:	9301      	str	r3, [sp, #4]
  400624:	2706      	movs	r7, #6
  400626:	9700      	str	r7, [sp, #0]
  400628:	230a      	movs	r3, #10
  40062a:	f105 0248 	add.w	r2, r5, #72	; 0x48
  40062e:	4924      	ldr	r1, [pc, #144]	; (4006c0 <ADC_0_init+0xc0>)
  400630:	4620      	mov	r0, r4
  400632:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4006d0 <ADC_0_init+0xd0>
  400636:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  400638:	2310      	movs	r3, #16
  40063a:	f105 0254 	add.w	r2, r5, #84	; 0x54
  40063e:	4631      	mov	r1, r6
  400640:	4620      	mov	r0, r4
  400642:	4e20      	ldr	r6, [pc, #128]	; (4006c4 <ADC_0_init+0xc4>)
  400644:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  400646:	2310      	movs	r3, #16
  400648:	f105 0264 	add.w	r2, r5, #100	; 0x64
  40064c:	2102      	movs	r1, #2
  40064e:	4620      	mov	r0, r4
  400650:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  400652:	2310      	movs	r3, #16
  400654:	f105 0274 	add.w	r2, r5, #116	; 0x74
  400658:	2105      	movs	r1, #5
  40065a:	4620      	mov	r0, r4
  40065c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  40065e:	2310      	movs	r3, #16
  400660:	f105 0284 	add.w	r2, r5, #132	; 0x84
  400664:	4639      	mov	r1, r7
  400666:	4620      	mov	r0, r4
  400668:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  40066a:	2310      	movs	r3, #16
  40066c:	f105 0294 	add.w	r2, r5, #148	; 0x94
  400670:	2108      	movs	r1, #8
  400672:	4620      	mov	r0, r4
  400674:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  400676:	2310      	movs	r3, #16
  400678:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  40067c:	210a      	movs	r1, #10
  40067e:	4620      	mov	r0, r4
  400680:	47b0      	blx	r6
  400682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400686:	4b10      	ldr	r3, [pc, #64]	; (4006c8 <ADC_0_init+0xc8>)
  400688:	601a      	str	r2, [r3, #0]
  40068a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40068e:	2208      	movs	r2, #8
  400690:	601a      	str	r2, [r3, #0]
  400692:	2204      	movs	r2, #4
  400694:	601a      	str	r2, [r3, #0]
  400696:	4a0d      	ldr	r2, [pc, #52]	; (4006cc <ADC_0_init+0xcc>)
  400698:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40069c:	6011      	str	r1, [r2, #0]
  40069e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4006a2:	6011      	str	r1, [r2, #0]
  4006a4:	2201      	movs	r2, #1
  4006a6:	601a      	str	r2, [r3, #0]
}
  4006a8:	b004      	add	sp, #16
  4006aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4006ae:	bf00      	nop
  4006b0:	400e0600 	.word	0x400e0600
  4006b4:	20400260 	.word	0x20400260
  4006b8:	204005b8 	.word	0x204005b8
  4006bc:	204005e4 	.word	0x204005e4
  4006c0:	4003c000 	.word	0x4003c000
  4006c4:	00400be1 	.word	0x00400be1
  4006c8:	400e1400 	.word	0x400e1400
  4006cc:	400e0e00 	.word	0x400e0e00
  4006d0:	00400b39 	.word	0x00400b39

004006d4 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  4006d4:	4b04      	ldr	r3, [pc, #16]	; (4006e8 <EXTERNAL_IRQ_D_init+0x14>)
  4006d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4006da:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  4006dc:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  4006de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006e2:	601a      	str	r2, [r3, #0]
  4006e4:	4770      	bx	lr
  4006e6:	bf00      	nop
  4006e8:	400e1400 	.word	0x400e1400

004006ec <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4006ec:	4b0a      	ldr	r3, [pc, #40]	; (400718 <EXTERNAL_IRQ_A_init+0x2c>)
  4006ee:	2204      	movs	r2, #4
  4006f0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006f2:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4006f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4006f8:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4006fa:	2220      	movs	r2, #32
  4006fc:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4006fe:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400700:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400704:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400706:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40070a:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40070c:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40070e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400712:	601a      	str	r2, [r3, #0]
  400714:	4770      	bx	lr
  400716:	bf00      	nop
  400718:	400e0e00 	.word	0x400e0e00

0040071c <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40071c:	4b16      	ldr	r3, [pc, #88]	; (400778 <PWM_0_PORT_init+0x5c>)
  40071e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400720:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400724:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400726:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400728:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  40072c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40072e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400732:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400734:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400736:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  40073a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40073c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40073e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400742:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400748:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40074a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40074c:	f022 0202 	bic.w	r2, r2, #2
  400750:	671a      	str	r2, [r3, #112]	; 0x70
  400752:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400754:	f022 0202 	bic.w	r2, r2, #2
  400758:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40075a:	2202      	movs	r2, #2
  40075c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40075e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400760:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400764:	671a      	str	r2, [r3, #112]	; 0x70
  400766:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400768:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  40076c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40076e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400772:	605a      	str	r2, [r3, #4]
  400774:	4770      	bx	lr
  400776:	bf00      	nop
  400778:	400e0e00 	.word	0x400e0e00

0040077c <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40077c:	4b04      	ldr	r3, [pc, #16]	; (400790 <PWM_0_CLOCK_init+0x14>)
  40077e:	699b      	ldr	r3, [r3, #24]
  400780:	2b00      	cmp	r3, #0
  400782:	db03      	blt.n	40078c <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400784:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400788:	4b01      	ldr	r3, [pc, #4]	; (400790 <PWM_0_CLOCK_init+0x14>)
  40078a:	611a      	str	r2, [r3, #16]
  40078c:	4770      	bx	lr
  40078e:	bf00      	nop
  400790:	400e0600 	.word	0x400e0600

00400794 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400794:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  400796:	4b06      	ldr	r3, [pc, #24]	; (4007b0 <PWM_0_init+0x1c>)
  400798:	4798      	blx	r3
	PWM_0_PORT_init();
  40079a:	4b06      	ldr	r3, [pc, #24]	; (4007b4 <PWM_0_init+0x20>)
  40079c:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  40079e:	4b06      	ldr	r3, [pc, #24]	; (4007b8 <PWM_0_init+0x24>)
  4007a0:	4798      	blx	r3
  4007a2:	4602      	mov	r2, r0
  4007a4:	4905      	ldr	r1, [pc, #20]	; (4007bc <PWM_0_init+0x28>)
  4007a6:	4806      	ldr	r0, [pc, #24]	; (4007c0 <PWM_0_init+0x2c>)
  4007a8:	4b06      	ldr	r3, [pc, #24]	; (4007c4 <PWM_0_init+0x30>)
  4007aa:	4798      	blx	r3
  4007ac:	bd08      	pop	{r3, pc}
  4007ae:	bf00      	nop
  4007b0:	0040077d 	.word	0x0040077d
  4007b4:	0040071d 	.word	0x0040071d
  4007b8:	00401b85 	.word	0x00401b85
  4007bc:	40020000 	.word	0x40020000
  4007c0:	204004d0 	.word	0x204004d0
  4007c4:	00400e3d 	.word	0x00400e3d

004007c8 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4007c8:	4b0c      	ldr	r3, [pc, #48]	; (4007fc <PWM_1_PORT_init+0x34>)
  4007ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4007cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4007d0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4007d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4007d8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4007da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4007de:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4007e0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4007e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4007e6:	f042 0201 	orr.w	r2, r2, #1
  4007ea:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4007ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007ee:	f022 0201 	bic.w	r2, r2, #1
  4007f2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4007f4:	2201      	movs	r2, #1
  4007f6:	605a      	str	r2, [r3, #4]
  4007f8:	4770      	bx	lr
  4007fa:	bf00      	nop
  4007fc:	400e0e00 	.word	0x400e0e00

00400800 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400800:	4b05      	ldr	r3, [pc, #20]	; (400818 <PWM_1_CLOCK_init+0x18>)
  400802:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400806:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  40080a:	d104      	bne.n	400816 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40080c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400810:	4b01      	ldr	r3, [pc, #4]	; (400818 <PWM_1_CLOCK_init+0x18>)
  400812:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400816:	4770      	bx	lr
  400818:	400e0600 	.word	0x400e0600

0040081c <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  40081c:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  40081e:	4b06      	ldr	r3, [pc, #24]	; (400838 <PWM_1_init+0x1c>)
  400820:	4798      	blx	r3
	PWM_1_PORT_init();
  400822:	4b06      	ldr	r3, [pc, #24]	; (40083c <PWM_1_init+0x20>)
  400824:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400826:	4b06      	ldr	r3, [pc, #24]	; (400840 <PWM_1_init+0x24>)
  400828:	4798      	blx	r3
  40082a:	4602      	mov	r2, r0
  40082c:	4905      	ldr	r1, [pc, #20]	; (400844 <PWM_1_init+0x28>)
  40082e:	4806      	ldr	r0, [pc, #24]	; (400848 <PWM_1_init+0x2c>)
  400830:	4b06      	ldr	r3, [pc, #24]	; (40084c <PWM_1_init+0x30>)
  400832:	4798      	blx	r3
  400834:	bd08      	pop	{r3, pc}
  400836:	bf00      	nop
  400838:	00400801 	.word	0x00400801
  40083c:	004007c9 	.word	0x004007c9
  400840:	00401b85 	.word	0x00401b85
  400844:	4005c000 	.word	0x4005c000
  400848:	20400674 	.word	0x20400674
  40084c:	00400e3d 	.word	0x00400e3d

00400850 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400850:	4b06      	ldr	r3, [pc, #24]	; (40086c <ENCODER_A_PORT_init+0x1c>)
  400852:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400854:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400858:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40085a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40085c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  400860:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400862:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400866:	605a      	str	r2, [r3, #4]
  400868:	4770      	bx	lr
  40086a:	bf00      	nop
  40086c:	400e0e00 	.word	0x400e0e00

00400870 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  400870:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400872:	4b09      	ldr	r3, [pc, #36]	; (400898 <ENCODER_A_init+0x28>)
  400874:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400876:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40087a:	d103      	bne.n	400884 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40087c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400880:	4b05      	ldr	r3, [pc, #20]	; (400898 <ENCODER_A_init+0x28>)
  400882:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  400884:	4b05      	ldr	r3, [pc, #20]	; (40089c <ENCODER_A_init+0x2c>)
  400886:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  400888:	4b05      	ldr	r3, [pc, #20]	; (4008a0 <ENCODER_A_init+0x30>)
  40088a:	4798      	blx	r3
  40088c:	4602      	mov	r2, r0
  40088e:	4905      	ldr	r1, [pc, #20]	; (4008a4 <ENCODER_A_init+0x34>)
  400890:	4805      	ldr	r0, [pc, #20]	; (4008a8 <ENCODER_A_init+0x38>)
  400892:	4b06      	ldr	r3, [pc, #24]	; (4008ac <ENCODER_A_init+0x3c>)
  400894:	4798      	blx	r3
  400896:	bd08      	pop	{r3, pc}
  400898:	400e0600 	.word	0x400e0600
  40089c:	00400851 	.word	0x00400851
  4008a0:	00401d5b 	.word	0x00401d5b
  4008a4:	4000c000 	.word	0x4000c000
  4008a8:	2040059c 	.word	0x2040059c
  4008ac:	00400fa5 	.word	0x00400fa5

004008b0 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4008b0:	4b06      	ldr	r3, [pc, #24]	; (4008cc <ENCODER_B_PORT_init+0x1c>)
  4008b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4008b4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4008b8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4008ba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4008bc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  4008c0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4008c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4008c6:	605a      	str	r2, [r3, #4]
  4008c8:	4770      	bx	lr
  4008ca:	bf00      	nop
  4008cc:	400e1400 	.word	0x400e1400

004008d0 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  4008d0:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4008d2:	4b0a      	ldr	r3, [pc, #40]	; (4008fc <ENCODER_B_init+0x2c>)
  4008d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4008d8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  4008dc:	d104      	bne.n	4008e8 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4008de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4008e2:	4b06      	ldr	r3, [pc, #24]	; (4008fc <ENCODER_B_init+0x2c>)
  4008e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  4008e8:	4b05      	ldr	r3, [pc, #20]	; (400900 <ENCODER_B_init+0x30>)
  4008ea:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  4008ec:	4b05      	ldr	r3, [pc, #20]	; (400904 <ENCODER_B_init+0x34>)
  4008ee:	4798      	blx	r3
  4008f0:	4602      	mov	r2, r0
  4008f2:	4905      	ldr	r1, [pc, #20]	; (400908 <ENCODER_B_init+0x38>)
  4008f4:	4805      	ldr	r0, [pc, #20]	; (40090c <ENCODER_B_init+0x3c>)
  4008f6:	4b06      	ldr	r3, [pc, #24]	; (400910 <ENCODER_B_init+0x40>)
  4008f8:	4798      	blx	r3
  4008fa:	bd08      	pop	{r3, pc}
  4008fc:	400e0600 	.word	0x400e0600
  400900:	004008b1 	.word	0x004008b1
  400904:	00401d5b 	.word	0x00401d5b
  400908:	40054000 	.word	0x40054000
  40090c:	204004ec 	.word	0x204004ec
  400910:	00400fa5 	.word	0x00400fa5

00400914 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400914:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400916:	4802      	ldr	r0, [pc, #8]	; (400920 <delay_driver_init+0xc>)
  400918:	4b02      	ldr	r3, [pc, #8]	; (400924 <delay_driver_init+0x10>)
  40091a:	4798      	blx	r3
  40091c:	bd08      	pop	{r3, pc}
  40091e:	bf00      	nop
  400920:	e000e010 	.word	0xe000e010
  400924:	00400d1d 	.word	0x00400d1d

00400928 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400928:	4b0f      	ldr	r3, [pc, #60]	; (400968 <EDBG_COM_PORT_init+0x40>)
  40092a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40092c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400930:	671a      	str	r2, [r3, #112]	; 0x70
  400932:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400934:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400938:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40093a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40093e:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400940:	4a0a      	ldr	r2, [pc, #40]	; (40096c <EDBG_COM_PORT_init+0x44>)
  400942:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400946:	f043 0310 	orr.w	r3, r3, #16
  40094a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40094e:	4b08      	ldr	r3, [pc, #32]	; (400970 <EDBG_COM_PORT_init+0x48>)
  400950:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400952:	f042 0210 	orr.w	r2, r2, #16
  400956:	671a      	str	r2, [r3, #112]	; 0x70
  400958:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40095a:	f042 0210 	orr.w	r2, r2, #16
  40095e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400960:	2210      	movs	r2, #16
  400962:	605a      	str	r2, [r3, #4]
  400964:	4770      	bx	lr
  400966:	bf00      	nop
  400968:	400e0e00 	.word	0x400e0e00
  40096c:	40088000 	.word	0x40088000
  400970:	400e1000 	.word	0x400e1000

00400974 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400974:	4b04      	ldr	r3, [pc, #16]	; (400988 <EDBG_COM_CLOCK_init+0x14>)
  400976:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400978:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  40097c:	d103      	bne.n	400986 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40097e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400982:	4b01      	ldr	r3, [pc, #4]	; (400988 <EDBG_COM_CLOCK_init+0x14>)
  400984:	611a      	str	r2, [r3, #16]
  400986:	4770      	bx	lr
  400988:	400e0600 	.word	0x400e0600

0040098c <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  40098c:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  40098e:	4b06      	ldr	r3, [pc, #24]	; (4009a8 <EDBG_COM_init+0x1c>)
  400990:	4798      	blx	r3
	EDBG_COM_PORT_init();
  400992:	4b06      	ldr	r3, [pc, #24]	; (4009ac <EDBG_COM_init+0x20>)
  400994:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  400996:	4b06      	ldr	r3, [pc, #24]	; (4009b0 <EDBG_COM_init+0x24>)
  400998:	4798      	blx	r3
  40099a:	4602      	mov	r2, r0
  40099c:	4905      	ldr	r1, [pc, #20]	; (4009b4 <EDBG_COM_init+0x28>)
  40099e:	4806      	ldr	r0, [pc, #24]	; (4009b8 <EDBG_COM_init+0x2c>)
  4009a0:	4b06      	ldr	r3, [pc, #24]	; (4009bc <EDBG_COM_init+0x30>)
  4009a2:	4798      	blx	r3
  4009a4:	bd08      	pop	{r3, pc}
  4009a6:	bf00      	nop
  4009a8:	00400975 	.word	0x00400975
  4009ac:	00400929 	.word	0x00400929
  4009b0:	00401f9d 	.word	0x00401f9d
  4009b4:	40028000 	.word	0x40028000
  4009b8:	20400590 	.word	0x20400590
  4009bc:	004010ed 	.word	0x004010ed

004009c0 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  4009c0:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4009c2:	4b32      	ldr	r3, [pc, #200]	; (400a8c <system_init+0xcc>)
  4009c4:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4009c6:	4b32      	ldr	r3, [pc, #200]	; (400a90 <system_init+0xd0>)
  4009c8:	699b      	ldr	r3, [r3, #24]
  4009ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4009ce:	d103      	bne.n	4009d8 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4009d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4009d4:	4b2e      	ldr	r3, [pc, #184]	; (400a90 <system_init+0xd0>)
  4009d6:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4009d8:	4b2d      	ldr	r3, [pc, #180]	; (400a90 <system_init+0xd0>)
  4009da:	699b      	ldr	r3, [r3, #24]
  4009dc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  4009e0:	d103      	bne.n	4009ea <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4009e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4009e6:	4b2a      	ldr	r3, [pc, #168]	; (400a90 <system_init+0xd0>)
  4009e8:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4009ea:	4b29      	ldr	r3, [pc, #164]	; (400a90 <system_init+0xd0>)
  4009ec:	699b      	ldr	r3, [r3, #24]
  4009ee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4009f2:	d103      	bne.n	4009fc <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4009f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4009f8:	4b25      	ldr	r3, [pc, #148]	; (400a90 <system_init+0xd0>)
  4009fa:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  4009fc:	4a25      	ldr	r2, [pc, #148]	; (400a94 <system_init+0xd4>)
  4009fe:	6853      	ldr	r3, [r2, #4]
  400a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400a04:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  400a06:	4b24      	ldr	r3, [pc, #144]	; (400a98 <system_init+0xd8>)
  400a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400a0c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  400a0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  400a12:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  400a14:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400a16:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  400a1a:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400a1c:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400a1e:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400a24:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400a26:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400a28:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400a2e:	f44f 7080 	mov.w	r0, #256	; 0x100
  400a32:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400a34:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400a36:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400a38:	f44f 7000 	mov.w	r0, #512	; 0x200
  400a3c:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400a3e:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400a40:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400a42:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400a46:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400a48:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400a4a:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400a4c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a50:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400a52:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400a54:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400a56:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400a58:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400a5a:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  400a5c:	4b0f      	ldr	r3, [pc, #60]	; (400a9c <system_init+0xdc>)
  400a5e:	4798      	blx	r3
	ADC_1_init();
  400a60:	4b0f      	ldr	r3, [pc, #60]	; (400aa0 <system_init+0xe0>)
  400a62:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  400a64:	4b0f      	ldr	r3, [pc, #60]	; (400aa4 <system_init+0xe4>)
  400a66:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  400a68:	4b0f      	ldr	r3, [pc, #60]	; (400aa8 <system_init+0xe8>)
  400a6a:	4798      	blx	r3

	PWM_0_init();
  400a6c:	4b0f      	ldr	r3, [pc, #60]	; (400aac <system_init+0xec>)
  400a6e:	4798      	blx	r3

	PWM_1_init();
  400a70:	4b0f      	ldr	r3, [pc, #60]	; (400ab0 <system_init+0xf0>)
  400a72:	4798      	blx	r3
	ENCODER_A_init();
  400a74:	4b0f      	ldr	r3, [pc, #60]	; (400ab4 <system_init+0xf4>)
  400a76:	4798      	blx	r3
	ENCODER_B_init();
  400a78:	4b0f      	ldr	r3, [pc, #60]	; (400ab8 <system_init+0xf8>)
  400a7a:	4798      	blx	r3

	delay_driver_init();
  400a7c:	4b0f      	ldr	r3, [pc, #60]	; (400abc <system_init+0xfc>)
  400a7e:	4798      	blx	r3

	EDBG_COM_init();
  400a80:	4b0f      	ldr	r3, [pc, #60]	; (400ac0 <system_init+0x100>)
  400a82:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  400a84:	4b0f      	ldr	r3, [pc, #60]	; (400ac4 <system_init+0x104>)
  400a86:	4798      	blx	r3
  400a88:	bd08      	pop	{r3, pc}
  400a8a:	bf00      	nop
  400a8c:	00401535 	.word	0x00401535
  400a90:	400e0600 	.word	0x400e0600
  400a94:	400e1850 	.word	0x400e1850
  400a98:	400e0e00 	.word	0x400e0e00
  400a9c:	00400601 	.word	0x00400601
  400aa0:	00400559 	.word	0x00400559
  400aa4:	004006d5 	.word	0x004006d5
  400aa8:	004006ed 	.word	0x004006ed
  400aac:	00400795 	.word	0x00400795
  400ab0:	0040081d 	.word	0x0040081d
  400ab4:	00400871 	.word	0x00400871
  400ab8:	004008d1 	.word	0x004008d1
  400abc:	00400915 	.word	0x00400915
  400ac0:	0040098d 	.word	0x0040098d
  400ac4:	00400d95 	.word	0x00400d95

00400ac8 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  400ac8:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  400aca:	6983      	ldr	r3, [r0, #24]
  400acc:	b103      	cbz	r3, 400ad0 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  400ace:	4798      	blx	r3
  400ad0:	bd08      	pop	{r3, pc}

00400ad2 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  400ad2:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  400ad4:	69c3      	ldr	r3, [r0, #28]
  400ad6:	b103      	cbz	r3, 400ada <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  400ad8:	4798      	blx	r3
  400ada:	bd08      	pop	{r3, pc}

00400adc <adc_async_channel_conversion_done>:
{
  400adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400ae0:	4605      	mov	r5, r0
  400ae2:	4688      	mov	r8, r1
  400ae4:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  400ae6:	6a03      	ldr	r3, [r0, #32]
  400ae8:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  400aea:	6a87      	ldr	r7, [r0, #40]	; 0x28
  400aec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400af0:	00de      	lsls	r6, r3, #3
  400af2:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  400af4:	f104 0a04 	add.w	sl, r4, #4
  400af8:	b2d1      	uxtb	r1, r2
  400afa:	4650      	mov	r0, sl
  400afc:	4b0c      	ldr	r3, [pc, #48]	; (400b30 <adc_async_channel_conversion_done+0x54>)
  400afe:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  400b00:	4628      	mov	r0, r5
  400b02:	4b0c      	ldr	r3, [pc, #48]	; (400b34 <adc_async_channel_conversion_done+0x58>)
  400b04:	4798      	blx	r3
  400b06:	2801      	cmp	r0, #1
  400b08:	d907      	bls.n	400b1a <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  400b0a:	ea4f 2119 	mov.w	r1, r9, lsr #8
  400b0e:	4650      	mov	r0, sl
  400b10:	4b07      	ldr	r3, [pc, #28]	; (400b30 <adc_async_channel_conversion_done+0x54>)
  400b12:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  400b14:	8aa3      	ldrh	r3, [r4, #20]
  400b16:	3301      	adds	r3, #1
  400b18:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  400b1a:	8aa3      	ldrh	r3, [r4, #20]
  400b1c:	3301      	adds	r3, #1
  400b1e:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  400b20:	59bb      	ldr	r3, [r7, r6]
  400b22:	b113      	cbz	r3, 400b2a <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  400b24:	4641      	mov	r1, r8
  400b26:	4628      	mov	r0, r5
  400b28:	4798      	blx	r3
  400b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b2e:	bf00      	nop
  400b30:	00401205 	.word	0x00401205
  400b34:	00401515 	.word	0x00401515

00400b38 <adc_async_init>:
{
  400b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b3c:	4616      	mov	r6, r2
  400b3e:	461c      	mov	r4, r3
  400b40:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  400b44:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  400b46:	4607      	mov	r7, r0
  400b48:	4689      	mov	r9, r1
  400b4a:	2800      	cmp	r0, #0
  400b4c:	bf18      	it	ne
  400b4e:	2900      	cmpne	r1, #0
  400b50:	d00b      	beq.n	400b6a <adc_async_init+0x32>
  400b52:	1c13      	adds	r3, r2, #0
  400b54:	bf18      	it	ne
  400b56:	2301      	movne	r3, #1
  400b58:	f1b8 0f00 	cmp.w	r8, #0
  400b5c:	d017      	beq.n	400b8e <adc_async_init+0x56>
  400b5e:	b1b3      	cbz	r3, 400b8e <adc_async_init+0x56>
  400b60:	b10d      	cbz	r5, 400b66 <adc_async_init+0x2e>
  400b62:	2001      	movs	r0, #1
  400b64:	e002      	b.n	400b6c <adc_async_init+0x34>
  400b66:	2000      	movs	r0, #0
  400b68:	e000      	b.n	400b6c <adc_async_init+0x34>
  400b6a:	2000      	movs	r0, #0
  400b6c:	f8df b068 	ldr.w	fp, [pc, #104]	; 400bd8 <adc_async_init+0xa0>
  400b70:	223f      	movs	r2, #63	; 0x3f
  400b72:	4659      	mov	r1, fp
  400b74:	f8df a064 	ldr.w	sl, [pc, #100]	; 400bdc <adc_async_init+0xa4>
  400b78:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  400b7a:	1c60      	adds	r0, r4, #1
  400b7c:	2240      	movs	r2, #64	; 0x40
  400b7e:	4659      	mov	r1, fp
  400b80:	4580      	cmp	r8, r0
  400b82:	bfcc      	ite	gt
  400b84:	2000      	movgt	r0, #0
  400b86:	2001      	movle	r0, #1
  400b88:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  400b8a:	2300      	movs	r3, #0
  400b8c:	e005      	b.n	400b9a <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  400b8e:	2000      	movs	r0, #0
  400b90:	e7ec      	b.n	400b6c <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  400b92:	22ff      	movs	r2, #255	; 0xff
  400b94:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  400b96:	3301      	adds	r3, #1
  400b98:	b2db      	uxtb	r3, r3
  400b9a:	42a3      	cmp	r3, r4
  400b9c:	d9f9      	bls.n	400b92 <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  400b9e:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  400ba0:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  400ba4:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  400ba8:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  400baa:	4649      	mov	r1, r9
  400bac:	4638      	mov	r0, r7
  400bae:	4b06      	ldr	r3, [pc, #24]	; (400bc8 <adc_async_init+0x90>)
  400bb0:	4798      	blx	r3
	if (init_status) {
  400bb2:	4603      	mov	r3, r0
  400bb4:	b928      	cbnz	r0, 400bc2 <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  400bb6:	4a05      	ldr	r2, [pc, #20]	; (400bcc <adc_async_init+0x94>)
  400bb8:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  400bba:	4a05      	ldr	r2, [pc, #20]	; (400bd0 <adc_async_init+0x98>)
  400bbc:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  400bbe:	4a05      	ldr	r2, [pc, #20]	; (400bd4 <adc_async_init+0x9c>)
  400bc0:	607a      	str	r2, [r7, #4]
}
  400bc2:	4618      	mov	r0, r3
  400bc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400bc8:	00401455 	.word	0x00401455
  400bcc:	00400add 	.word	0x00400add
  400bd0:	00400ac9 	.word	0x00400ac9
  400bd4:	00400ad3 	.word	0x00400ad3
  400bd8:	00405580 	.word	0x00405580
  400bdc:	00401161 	.word	0x00401161

00400be0 <adc_async_register_channel_buffer>:
{
  400be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400be4:	460e      	mov	r6, r1
  400be6:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  400be8:	4605      	mov	r5, r0
  400bea:	4690      	mov	r8, r2
  400bec:	2800      	cmp	r0, #0
  400bee:	bf18      	it	ne
  400bf0:	2a00      	cmpne	r2, #0
  400bf2:	d002      	beq.n	400bfa <adc_async_register_channel_buffer+0x1a>
  400bf4:	b9c3      	cbnz	r3, 400c28 <adc_async_register_channel_buffer+0x48>
  400bf6:	2000      	movs	r0, #0
  400bf8:	e000      	b.n	400bfc <adc_async_register_channel_buffer+0x1c>
  400bfa:	2000      	movs	r0, #0
  400bfc:	f8df 9094 	ldr.w	r9, [pc, #148]	; 400c94 <adc_async_register_channel_buffer+0xb4>
  400c00:	2266      	movs	r2, #102	; 0x66
  400c02:	4649      	mov	r1, r9
  400c04:	4c21      	ldr	r4, [pc, #132]	; (400c8c <adc_async_register_channel_buffer+0xac>)
  400c06:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  400c08:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  400c0c:	2267      	movs	r2, #103	; 0x67
  400c0e:	4649      	mov	r1, r9
  400c10:	42b0      	cmp	r0, r6
  400c12:	bf34      	ite	cc
  400c14:	2000      	movcc	r0, #0
  400c16:	2001      	movcs	r0, #1
  400c18:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  400c1a:	6a29      	ldr	r1, [r5, #32]
  400c1c:	5d8b      	ldrb	r3, [r1, r6]
  400c1e:	2bff      	cmp	r3, #255	; 0xff
  400c20:	d12b      	bne.n	400c7a <adc_async_register_channel_buffer+0x9a>
  400c22:	2400      	movs	r4, #0
  400c24:	4623      	mov	r3, r4
  400c26:	e003      	b.n	400c30 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  400c28:	2001      	movs	r0, #1
  400c2a:	e7e7      	b.n	400bfc <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  400c2c:	3301      	adds	r3, #1
  400c2e:	b2db      	uxtb	r3, r3
  400c30:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  400c34:	4293      	cmp	r3, r2
  400c36:	d805      	bhi.n	400c44 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  400c38:	5cca      	ldrb	r2, [r1, r3]
  400c3a:	2aff      	cmp	r2, #255	; 0xff
  400c3c:	d0f6      	beq.n	400c2c <adc_async_register_channel_buffer+0x4c>
			index++;
  400c3e:	3401      	adds	r4, #1
  400c40:	b2e4      	uxtb	r4, r4
  400c42:	e7f3      	b.n	400c2c <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  400c44:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  400c48:	429c      	cmp	r4, r3
  400c4a:	d819      	bhi.n	400c80 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  400c4c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  400c4e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  400c52:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  400c56:	4448      	add	r0, r9
  400c58:	463a      	mov	r2, r7
  400c5a:	4641      	mov	r1, r8
  400c5c:	3004      	adds	r0, #4
  400c5e:	4b0c      	ldr	r3, [pc, #48]	; (400c90 <adc_async_register_channel_buffer+0xb0>)
  400c60:	4798      	blx	r3
  400c62:	4602      	mov	r2, r0
  400c64:	b978      	cbnz	r0, 400c86 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  400c66:	6a2b      	ldr	r3, [r5, #32]
  400c68:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  400c6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  400c6c:	4499      	add	r9, r3
  400c6e:	2300      	movs	r3, #0
  400c70:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  400c74:	4610      	mov	r0, r2
  400c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  400c7a:	f06f 020c 	mvn.w	r2, #12
  400c7e:	e7f9      	b.n	400c74 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  400c80:	f06f 021b 	mvn.w	r2, #27
  400c84:	e7f6      	b.n	400c74 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  400c86:	f06f 020c 	mvn.w	r2, #12
  400c8a:	e7f3      	b.n	400c74 <adc_async_register_channel_buffer+0x94>
  400c8c:	00401161 	.word	0x00401161
  400c90:	004011c1 	.word	0x004011c1
  400c94:	00405580 	.word	0x00405580

00400c98 <adc_async_enable_channel>:
{
  400c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400c9a:	460d      	mov	r5, r1
	ASSERT(descr);
  400c9c:	4f0b      	ldr	r7, [pc, #44]	; (400ccc <adc_async_enable_channel+0x34>)
  400c9e:	4604      	mov	r4, r0
  400ca0:	2283      	movs	r2, #131	; 0x83
  400ca2:	4639      	mov	r1, r7
  400ca4:	3000      	adds	r0, #0
  400ca6:	bf18      	it	ne
  400ca8:	2001      	movne	r0, #1
  400caa:	4e09      	ldr	r6, [pc, #36]	; (400cd0 <adc_async_enable_channel+0x38>)
  400cac:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  400cae:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  400cb2:	2284      	movs	r2, #132	; 0x84
  400cb4:	4639      	mov	r1, r7
  400cb6:	42a8      	cmp	r0, r5
  400cb8:	bf34      	ite	cc
  400cba:	2000      	movcc	r0, #0
  400cbc:	2001      	movcs	r0, #1
  400cbe:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  400cc0:	4629      	mov	r1, r5
  400cc2:	4620      	mov	r0, r4
  400cc4:	4b03      	ldr	r3, [pc, #12]	; (400cd4 <adc_async_enable_channel+0x3c>)
  400cc6:	4798      	blx	r3
}
  400cc8:	2000      	movs	r0, #0
  400cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ccc:	00405580 	.word	0x00405580
  400cd0:	00401161 	.word	0x00401161
  400cd4:	00401509 	.word	0x00401509

00400cd8 <adc_async_start_conversion>:
{
  400cd8:	b510      	push	{r4, lr}
	ASSERT(descr);
  400cda:	4604      	mov	r4, r0
  400cdc:	22d6      	movs	r2, #214	; 0xd6
  400cde:	4905      	ldr	r1, [pc, #20]	; (400cf4 <adc_async_start_conversion+0x1c>)
  400ce0:	3000      	adds	r0, #0
  400ce2:	bf18      	it	ne
  400ce4:	2001      	movne	r0, #1
  400ce6:	4b04      	ldr	r3, [pc, #16]	; (400cf8 <adc_async_start_conversion+0x20>)
  400ce8:	4798      	blx	r3
	_adc_async_convert(&descr->device);
  400cea:	4620      	mov	r0, r4
  400cec:	4b03      	ldr	r3, [pc, #12]	; (400cfc <adc_async_start_conversion+0x24>)
  400cee:	4798      	blx	r3
}
  400cf0:	2000      	movs	r0, #0
  400cf2:	bd10      	pop	{r4, pc}
  400cf4:	00405580 	.word	0x00405580
  400cf8:	00401161 	.word	0x00401161
  400cfc:	00401519 	.word	0x00401519

00400d00 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400d00:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400d04:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400d06:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400d08:	f3bf 8f5f 	dmb	sy
  400d0c:	4770      	bx	lr

00400d0e <atomic_leave_critical>:
  400d0e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400d12:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400d14:	f383 8810 	msr	PRIMASK, r3
  400d18:	4770      	bx	lr
	...

00400d1c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400d1c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400d1e:	4b02      	ldr	r3, [pc, #8]	; (400d28 <delay_init+0xc>)
  400d20:	6018      	str	r0, [r3, #0]
  400d22:	4b02      	ldr	r3, [pc, #8]	; (400d2c <delay_init+0x10>)
  400d24:	4798      	blx	r3
  400d26:	bd08      	pop	{r3, pc}
  400d28:	20400314 	.word	0x20400314
  400d2c:	00401b9d 	.word	0x00401b9d

00400d30 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400d30:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  400d32:	4b04      	ldr	r3, [pc, #16]	; (400d44 <delay_ms+0x14>)
  400d34:	681c      	ldr	r4, [r3, #0]
  400d36:	4b04      	ldr	r3, [pc, #16]	; (400d48 <delay_ms+0x18>)
  400d38:	4798      	blx	r3
  400d3a:	4601      	mov	r1, r0
  400d3c:	4620      	mov	r0, r4
  400d3e:	4b03      	ldr	r3, [pc, #12]	; (400d4c <delay_ms+0x1c>)
  400d40:	4798      	blx	r3
  400d42:	bd10      	pop	{r4, pc}
  400d44:	20400314 	.word	0x20400314
  400d48:	00401521 	.word	0x00401521
  400d4c:	00401ba9 	.word	0x00401ba9

00400d50 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400d50:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400d52:	2504      	movs	r5, #4
  400d54:	2400      	movs	r4, #0

	while (upper >= lower) {
  400d56:	e007      	b.n	400d68 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  400d58:	4a0d      	ldr	r2, [pc, #52]	; (400d90 <process_ext_irq+0x40>)
  400d5a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400d5e:	b1b3      	cbz	r3, 400d8e <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400d60:	4798      	blx	r3
  400d62:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  400d64:	3a01      	subs	r2, #1
  400d66:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  400d68:	42ac      	cmp	r4, r5
  400d6a:	d810      	bhi.n	400d8e <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400d6c:	192b      	adds	r3, r5, r4
  400d6e:	105b      	asrs	r3, r3, #1
  400d70:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400d72:	2a03      	cmp	r2, #3
  400d74:	d80b      	bhi.n	400d8e <process_ext_irq+0x3e>
  400d76:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  400d78:	4905      	ldr	r1, [pc, #20]	; (400d90 <process_ext_irq+0x40>)
  400d7a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400d7e:	6849      	ldr	r1, [r1, #4]
  400d80:	4281      	cmp	r1, r0
  400d82:	d0e9      	beq.n	400d58 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400d84:	4281      	cmp	r1, r0
  400d86:	d2ed      	bcs.n	400d64 <process_ext_irq+0x14>
			lower = middle + 1;
  400d88:	3201      	adds	r2, #1
  400d8a:	b2d4      	uxtb	r4, r2
  400d8c:	e7ec      	b.n	400d68 <process_ext_irq+0x18>
  400d8e:	bd38      	pop	{r3, r4, r5, pc}
  400d90:	20400318 	.word	0x20400318

00400d94 <ext_irq_init>:
{
  400d94:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400d96:	2300      	movs	r3, #0
  400d98:	e00a      	b.n	400db0 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400d9a:	4a08      	ldr	r2, [pc, #32]	; (400dbc <ext_irq_init+0x28>)
  400d9c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400da0:	f04f 30ff 	mov.w	r0, #4294967295
  400da4:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400da6:	2100      	movs	r1, #0
  400da8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400dac:	3301      	adds	r3, #1
  400dae:	b29b      	uxth	r3, r3
  400db0:	2b03      	cmp	r3, #3
  400db2:	d9f2      	bls.n	400d9a <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400db4:	4802      	ldr	r0, [pc, #8]	; (400dc0 <ext_irq_init+0x2c>)
  400db6:	4b03      	ldr	r3, [pc, #12]	; (400dc4 <ext_irq_init+0x30>)
  400db8:	4798      	blx	r3
}
  400dba:	bd08      	pop	{r3, pc}
  400dbc:	20400318 	.word	0x20400318
  400dc0:	00400d51 	.word	0x00400d51
  400dc4:	00401865 	.word	0x00401865

00400dc8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400dc8:	b570      	push	{r4, r5, r6, lr}
  400dca:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400dcc:	4604      	mov	r4, r0
  400dce:	460d      	mov	r5, r1
  400dd0:	2800      	cmp	r0, #0
  400dd2:	bf18      	it	ne
  400dd4:	2900      	cmpne	r1, #0
  400dd6:	bf14      	ite	ne
  400dd8:	2001      	movne	r0, #1
  400dda:	2000      	moveq	r0, #0
  400ddc:	2234      	movs	r2, #52	; 0x34
  400dde:	4904      	ldr	r1, [pc, #16]	; (400df0 <io_write+0x28>)
  400de0:	4b04      	ldr	r3, [pc, #16]	; (400df4 <io_write+0x2c>)
  400de2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400de4:	6823      	ldr	r3, [r4, #0]
  400de6:	4632      	mov	r2, r6
  400de8:	4629      	mov	r1, r5
  400dea:	4620      	mov	r0, r4
  400dec:	4798      	blx	r3
}
  400dee:	bd70      	pop	{r4, r5, r6, pc}
  400df0:	0040559c 	.word	0x0040559c
  400df4:	00401161 	.word	0x00401161

00400df8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400df8:	b570      	push	{r4, r5, r6, lr}
  400dfa:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400dfc:	4604      	mov	r4, r0
  400dfe:	460d      	mov	r5, r1
  400e00:	2800      	cmp	r0, #0
  400e02:	bf18      	it	ne
  400e04:	2900      	cmpne	r1, #0
  400e06:	bf14      	ite	ne
  400e08:	2001      	movne	r0, #1
  400e0a:	2000      	moveq	r0, #0
  400e0c:	223d      	movs	r2, #61	; 0x3d
  400e0e:	4904      	ldr	r1, [pc, #16]	; (400e20 <io_read+0x28>)
  400e10:	4b04      	ldr	r3, [pc, #16]	; (400e24 <io_read+0x2c>)
  400e12:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400e14:	6863      	ldr	r3, [r4, #4]
  400e16:	4632      	mov	r2, r6
  400e18:	4629      	mov	r1, r5
  400e1a:	4620      	mov	r0, r4
  400e1c:	4798      	blx	r3
}
  400e1e:	bd70      	pop	{r4, r5, r6, pc}
  400e20:	0040559c 	.word	0x0040559c
  400e24:	00401161 	.word	0x00401161

00400e28 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400e28:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400e2a:	6943      	ldr	r3, [r0, #20]
  400e2c:	b103      	cbz	r3, 400e30 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400e2e:	4798      	blx	r3
  400e30:	bd08      	pop	{r3, pc}

00400e32 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400e32:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400e34:	6983      	ldr	r3, [r0, #24]
  400e36:	b103      	cbz	r3, 400e3a <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400e38:	4798      	blx	r3
  400e3a:	bd08      	pop	{r3, pc}

00400e3c <pwm_init>:
{
  400e3c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400e3e:	4604      	mov	r4, r0
  400e40:	460d      	mov	r5, r1
  400e42:	2800      	cmp	r0, #0
  400e44:	bf18      	it	ne
  400e46:	2900      	cmpne	r1, #0
  400e48:	bf14      	ite	ne
  400e4a:	2001      	movne	r0, #1
  400e4c:	2000      	moveq	r0, #0
  400e4e:	2233      	movs	r2, #51	; 0x33
  400e50:	4906      	ldr	r1, [pc, #24]	; (400e6c <pwm_init+0x30>)
  400e52:	4b07      	ldr	r3, [pc, #28]	; (400e70 <pwm_init+0x34>)
  400e54:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  400e56:	4629      	mov	r1, r5
  400e58:	4620      	mov	r0, r4
  400e5a:	4b06      	ldr	r3, [pc, #24]	; (400e74 <pwm_init+0x38>)
  400e5c:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400e5e:	4b06      	ldr	r3, [pc, #24]	; (400e78 <pwm_init+0x3c>)
  400e60:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400e62:	4b06      	ldr	r3, [pc, #24]	; (400e7c <pwm_init+0x40>)
  400e64:	6063      	str	r3, [r4, #4]
}
  400e66:	2000      	movs	r0, #0
  400e68:	bd38      	pop	{r3, r4, r5, pc}
  400e6a:	bf00      	nop
  400e6c:	004055b0 	.word	0x004055b0
  400e70:	00401161 	.word	0x00401161
  400e74:	0040196d 	.word	0x0040196d
  400e78:	00400e29 	.word	0x00400e29
  400e7c:	00400e33 	.word	0x00400e33

00400e80 <pwm_enable>:
{
  400e80:	b510      	push	{r4, lr}
	ASSERT(descr);
  400e82:	4604      	mov	r4, r0
  400e84:	224a      	movs	r2, #74	; 0x4a
  400e86:	4909      	ldr	r1, [pc, #36]	; (400eac <pwm_enable+0x2c>)
  400e88:	3000      	adds	r0, #0
  400e8a:	bf18      	it	ne
  400e8c:	2001      	movne	r0, #1
  400e8e:	4b08      	ldr	r3, [pc, #32]	; (400eb0 <pwm_enable+0x30>)
  400e90:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  400e92:	4620      	mov	r0, r4
  400e94:	4b07      	ldr	r3, [pc, #28]	; (400eb4 <pwm_enable+0x34>)
  400e96:	4798      	blx	r3
  400e98:	b920      	cbnz	r0, 400ea4 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  400e9a:	4620      	mov	r0, r4
  400e9c:	4b06      	ldr	r3, [pc, #24]	; (400eb8 <pwm_enable+0x38>)
  400e9e:	4798      	blx	r3
	return ERR_NONE;
  400ea0:	2000      	movs	r0, #0
  400ea2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400ea4:	f06f 0010 	mvn.w	r0, #16
}
  400ea8:	bd10      	pop	{r4, pc}
  400eaa:	bf00      	nop
  400eac:	004055b0 	.word	0x004055b0
  400eb0:	00401161 	.word	0x00401161
  400eb4:	00401b55 	.word	0x00401b55
  400eb8:	00401ab1 	.word	0x00401ab1

00400ebc <pwm_set_parameters>:
{
  400ebc:	b570      	push	{r4, r5, r6, lr}
  400ebe:	460d      	mov	r5, r1
  400ec0:	4616      	mov	r6, r2
	ASSERT(descr);
  400ec2:	4604      	mov	r4, r0
  400ec4:	227c      	movs	r2, #124	; 0x7c
  400ec6:	4906      	ldr	r1, [pc, #24]	; (400ee0 <pwm_set_parameters+0x24>)
  400ec8:	3000      	adds	r0, #0
  400eca:	bf18      	it	ne
  400ecc:	2001      	movne	r0, #1
  400ece:	4b05      	ldr	r3, [pc, #20]	; (400ee4 <pwm_set_parameters+0x28>)
  400ed0:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  400ed2:	4632      	mov	r2, r6
  400ed4:	4629      	mov	r1, r5
  400ed6:	4620      	mov	r0, r4
  400ed8:	4b03      	ldr	r3, [pc, #12]	; (400ee8 <pwm_set_parameters+0x2c>)
  400eda:	4798      	blx	r3
}
  400edc:	2000      	movs	r0, #0
  400ede:	bd70      	pop	{r4, r5, r6, pc}
  400ee0:	004055b0 	.word	0x004055b0
  400ee4:	00401161 	.word	0x00401161
  400ee8:	00401af5 	.word	0x00401af5

00400eec <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400eee:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400ef0:	b117      	cbz	r7, 400ef8 <timer_add_timer_task+0xc>
  400ef2:	463c      	mov	r4, r7
  400ef4:	2600      	movs	r6, #0
  400ef6:	e00b      	b.n	400f10 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400ef8:	4b0e      	ldr	r3, [pc, #56]	; (400f34 <timer_add_timer_task+0x48>)
  400efa:	4798      	blx	r3
		return;
  400efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400efe:	68a5      	ldr	r5, [r4, #8]
  400f00:	442b      	add	r3, r5
  400f02:	1a9b      	subs	r3, r3, r2
  400f04:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400f06:	688d      	ldr	r5, [r1, #8]
  400f08:	42ab      	cmp	r3, r5
  400f0a:	d209      	bcs.n	400f20 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400f0c:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400f0e:	6824      	ldr	r4, [r4, #0]
  400f10:	b134      	cbz	r4, 400f20 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400f12:	6863      	ldr	r3, [r4, #4]
  400f14:	4293      	cmp	r3, r2
  400f16:	d8f2      	bhi.n	400efe <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400f18:	68a5      	ldr	r5, [r4, #8]
  400f1a:	1a9b      	subs	r3, r3, r2
  400f1c:	442b      	add	r3, r5
  400f1e:	e7f2      	b.n	400f06 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400f20:	42bc      	cmp	r4, r7
  400f22:	d003      	beq.n	400f2c <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400f24:	4630      	mov	r0, r6
  400f26:	4b04      	ldr	r3, [pc, #16]	; (400f38 <timer_add_timer_task+0x4c>)
  400f28:	4798      	blx	r3
  400f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400f2c:	4b01      	ldr	r3, [pc, #4]	; (400f34 <timer_add_timer_task+0x48>)
  400f2e:	4798      	blx	r3
  400f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f32:	bf00      	nop
  400f34:	0040117d 	.word	0x0040117d
  400f38:	004011a9 	.word	0x004011a9

00400f3c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f3e:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400f40:	6906      	ldr	r6, [r0, #16]
  400f42:	3601      	adds	r6, #1
  400f44:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400f46:	7e03      	ldrb	r3, [r0, #24]
  400f48:	f013 0f01 	tst.w	r3, #1
  400f4c:	d105      	bne.n	400f5a <timer_process_counted+0x1e>
  400f4e:	7e03      	ldrb	r3, [r0, #24]
  400f50:	f013 0f02 	tst.w	r3, #2
  400f54:	d101      	bne.n	400f5a <timer_process_counted+0x1e>
  400f56:	4605      	mov	r5, r0
  400f58:	e009      	b.n	400f6e <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  400f5a:	7e03      	ldrb	r3, [r0, #24]
  400f5c:	f043 0302 	orr.w	r3, r3, #2
  400f60:	7603      	strb	r3, [r0, #24]
		return;
  400f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f64:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  400f66:	68e3      	ldr	r3, [r4, #12]
  400f68:	4620      	mov	r0, r4
  400f6a:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  400f6c:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  400f6e:	b19c      	cbz	r4, 400f98 <timer_process_counted+0x5c>
  400f70:	6863      	ldr	r3, [r4, #4]
  400f72:	1af3      	subs	r3, r6, r3
  400f74:	68a2      	ldr	r2, [r4, #8]
  400f76:	4293      	cmp	r3, r2
  400f78:	d30e      	bcc.n	400f98 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  400f7a:	f105 0714 	add.w	r7, r5, #20
  400f7e:	4638      	mov	r0, r7
  400f80:	4b06      	ldr	r3, [pc, #24]	; (400f9c <timer_process_counted+0x60>)
  400f82:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400f84:	7c23      	ldrb	r3, [r4, #16]
  400f86:	2b01      	cmp	r3, #1
  400f88:	d1ec      	bne.n	400f64 <timer_process_counted+0x28>
			tmp->time_label = time;
  400f8a:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400f8c:	4632      	mov	r2, r6
  400f8e:	4621      	mov	r1, r4
  400f90:	4638      	mov	r0, r7
  400f92:	4b03      	ldr	r3, [pc, #12]	; (400fa0 <timer_process_counted+0x64>)
  400f94:	4798      	blx	r3
  400f96:	e7e5      	b.n	400f64 <timer_process_counted+0x28>
  400f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f9a:	bf00      	nop
  400f9c:	004011b1 	.word	0x004011b1
  400fa0:	00400eed 	.word	0x00400eed

00400fa4 <timer_init>:
{
  400fa4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400fa6:	4604      	mov	r4, r0
  400fa8:	460d      	mov	r5, r1
  400faa:	2800      	cmp	r0, #0
  400fac:	bf18      	it	ne
  400fae:	2900      	cmpne	r1, #0
  400fb0:	bf14      	ite	ne
  400fb2:	2001      	movne	r0, #1
  400fb4:	2000      	moveq	r0, #0
  400fb6:	223b      	movs	r2, #59	; 0x3b
  400fb8:	4905      	ldr	r1, [pc, #20]	; (400fd0 <timer_init+0x2c>)
  400fba:	4b06      	ldr	r3, [pc, #24]	; (400fd4 <timer_init+0x30>)
  400fbc:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400fbe:	4629      	mov	r1, r5
  400fc0:	4620      	mov	r0, r4
  400fc2:	4b05      	ldr	r3, [pc, #20]	; (400fd8 <timer_init+0x34>)
  400fc4:	4798      	blx	r3
	descr->time                           = 0;
  400fc6:	2000      	movs	r0, #0
  400fc8:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400fca:	4b04      	ldr	r3, [pc, #16]	; (400fdc <timer_init+0x38>)
  400fcc:	6023      	str	r3, [r4, #0]
}
  400fce:	bd38      	pop	{r3, r4, r5, pc}
  400fd0:	004055c8 	.word	0x004055c8
  400fd4:	00401161 	.word	0x00401161
  400fd8:	00401c61 	.word	0x00401c61
  400fdc:	00400f3d 	.word	0x00400f3d

00400fe0 <timer_start>:
{
  400fe0:	b510      	push	{r4, lr}
	ASSERT(descr);
  400fe2:	4604      	mov	r4, r0
  400fe4:	2253      	movs	r2, #83	; 0x53
  400fe6:	4909      	ldr	r1, [pc, #36]	; (40100c <timer_start+0x2c>)
  400fe8:	3000      	adds	r0, #0
  400fea:	bf18      	it	ne
  400fec:	2001      	movne	r0, #1
  400fee:	4b08      	ldr	r3, [pc, #32]	; (401010 <timer_start+0x30>)
  400ff0:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  400ff2:	4620      	mov	r0, r4
  400ff4:	4b07      	ldr	r3, [pc, #28]	; (401014 <timer_start+0x34>)
  400ff6:	4798      	blx	r3
  400ff8:	b920      	cbnz	r0, 401004 <timer_start+0x24>
	_timer_start(&descr->device);
  400ffa:	4620      	mov	r0, r4
  400ffc:	4b06      	ldr	r3, [pc, #24]	; (401018 <timer_start+0x38>)
  400ffe:	4798      	blx	r3
	return ERR_NONE;
  401000:	2000      	movs	r0, #0
  401002:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401004:	f06f 0010 	mvn.w	r0, #16
}
  401008:	bd10      	pop	{r4, pc}
  40100a:	bf00      	nop
  40100c:	004055c8 	.word	0x004055c8
  401010:	00401161 	.word	0x00401161
  401014:	00401d49 	.word	0x00401d49
  401018:	00401d3d 	.word	0x00401d3d

0040101c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  40101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40101e:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401020:	4605      	mov	r5, r0
  401022:	460f      	mov	r7, r1
  401024:	2800      	cmp	r0, #0
  401026:	bf18      	it	ne
  401028:	2900      	cmpne	r1, #0
  40102a:	d002      	beq.n	401032 <usart_sync_write+0x16>
  40102c:	bb0a      	cbnz	r2, 401072 <usart_sync_write+0x56>
  40102e:	2000      	movs	r0, #0
  401030:	e000      	b.n	401034 <usart_sync_write+0x18>
  401032:	2000      	movs	r0, #0
  401034:	22f1      	movs	r2, #241	; 0xf1
  401036:	4910      	ldr	r1, [pc, #64]	; (401078 <usart_sync_write+0x5c>)
  401038:	4b10      	ldr	r3, [pc, #64]	; (40107c <usart_sync_write+0x60>)
  40103a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  40103c:	f105 0408 	add.w	r4, r5, #8
  401040:	4620      	mov	r0, r4
  401042:	4b0f      	ldr	r3, [pc, #60]	; (401080 <usart_sync_write+0x64>)
  401044:	4798      	blx	r3
  401046:	2800      	cmp	r0, #0
  401048:	d0f8      	beq.n	40103c <usart_sync_write+0x20>
  40104a:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  40104c:	5d79      	ldrb	r1, [r7, r5]
  40104e:	4620      	mov	r0, r4
  401050:	4b0c      	ldr	r3, [pc, #48]	; (401084 <usart_sync_write+0x68>)
  401052:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  401054:	4620      	mov	r0, r4
  401056:	4b0a      	ldr	r3, [pc, #40]	; (401080 <usart_sync_write+0x64>)
  401058:	4798      	blx	r3
  40105a:	2800      	cmp	r0, #0
  40105c:	d0fa      	beq.n	401054 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  40105e:	3501      	adds	r5, #1
  401060:	42b5      	cmp	r5, r6
  401062:	d3f3      	bcc.n	40104c <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  401064:	4620      	mov	r0, r4
  401066:	4b08      	ldr	r3, [pc, #32]	; (401088 <usart_sync_write+0x6c>)
  401068:	4798      	blx	r3
  40106a:	2800      	cmp	r0, #0
  40106c:	d0fa      	beq.n	401064 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  40106e:	4628      	mov	r0, r5
  401070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  401072:	2001      	movs	r0, #1
  401074:	e7de      	b.n	401034 <usart_sync_write+0x18>
  401076:	bf00      	nop
  401078:	004055e0 	.word	0x004055e0
  40107c:	00401161 	.word	0x00401161
  401080:	00401f25 	.word	0x00401f25
  401084:	00401edd 	.word	0x00401edd
  401088:	00401f4d 	.word	0x00401f4d

0040108c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  40108c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401090:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401092:	4605      	mov	r5, r0
  401094:	4688      	mov	r8, r1
  401096:	2800      	cmp	r0, #0
  401098:	bf18      	it	ne
  40109a:	2900      	cmpne	r1, #0
  40109c:	d002      	beq.n	4010a4 <usart_sync_read+0x18>
  40109e:	b9d2      	cbnz	r2, 4010d6 <usart_sync_read+0x4a>
  4010a0:	2000      	movs	r0, #0
  4010a2:	e000      	b.n	4010a6 <usart_sync_read+0x1a>
  4010a4:	2000      	movs	r0, #0
  4010a6:	f44f 7286 	mov.w	r2, #268	; 0x10c
  4010aa:	490c      	ldr	r1, [pc, #48]	; (4010dc <usart_sync_read+0x50>)
  4010ac:	4b0c      	ldr	r3, [pc, #48]	; (4010e0 <usart_sync_read+0x54>)
  4010ae:	4798      	blx	r3
	uint32_t                      offset = 0;
  4010b0:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  4010b2:	f105 0408 	add.w	r4, r5, #8
  4010b6:	4620      	mov	r0, r4
  4010b8:	4b0a      	ldr	r3, [pc, #40]	; (4010e4 <usart_sync_read+0x58>)
  4010ba:	4798      	blx	r3
  4010bc:	2800      	cmp	r0, #0
  4010be:	d0f8      	beq.n	4010b2 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  4010c0:	4620      	mov	r0, r4
  4010c2:	4b09      	ldr	r3, [pc, #36]	; (4010e8 <usart_sync_read+0x5c>)
  4010c4:	4798      	blx	r3
  4010c6:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  4010ca:	3601      	adds	r6, #1
  4010cc:	42be      	cmp	r6, r7
  4010ce:	d3f0      	bcc.n	4010b2 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  4010d0:	4630      	mov	r0, r6
  4010d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  4010d6:	2001      	movs	r0, #1
  4010d8:	e7e5      	b.n	4010a6 <usart_sync_read+0x1a>
  4010da:	bf00      	nop
  4010dc:	004055e0 	.word	0x004055e0
  4010e0:	00401161 	.word	0x00401161
  4010e4:	00401f75 	.word	0x00401f75
  4010e8:	00401f01 	.word	0x00401f01

004010ec <usart_sync_init>:
{
  4010ec:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4010ee:	4604      	mov	r4, r0
  4010f0:	460d      	mov	r5, r1
  4010f2:	2800      	cmp	r0, #0
  4010f4:	bf18      	it	ne
  4010f6:	2900      	cmpne	r1, #0
  4010f8:	bf14      	ite	ne
  4010fa:	2001      	movne	r0, #1
  4010fc:	2000      	moveq	r0, #0
  4010fe:	2234      	movs	r2, #52	; 0x34
  401100:	4907      	ldr	r1, [pc, #28]	; (401120 <usart_sync_init+0x34>)
  401102:	4b08      	ldr	r3, [pc, #32]	; (401124 <usart_sync_init+0x38>)
  401104:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  401106:	4629      	mov	r1, r5
  401108:	f104 0008 	add.w	r0, r4, #8
  40110c:	4b06      	ldr	r3, [pc, #24]	; (401128 <usart_sync_init+0x3c>)
  40110e:	4798      	blx	r3
	if (init_status) {
  401110:	4603      	mov	r3, r0
  401112:	b918      	cbnz	r0, 40111c <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  401114:	4a05      	ldr	r2, [pc, #20]	; (40112c <usart_sync_init+0x40>)
  401116:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  401118:	4a05      	ldr	r2, [pc, #20]	; (401130 <usart_sync_init+0x44>)
  40111a:	6022      	str	r2, [r4, #0]
}
  40111c:	4618      	mov	r0, r3
  40111e:	bd38      	pop	{r3, r4, r5, pc}
  401120:	004055e0 	.word	0x004055e0
  401124:	00401161 	.word	0x00401161
  401128:	00401e71 	.word	0x00401e71
  40112c:	0040108d 	.word	0x0040108d
  401130:	0040101d 	.word	0x0040101d

00401134 <usart_sync_enable>:
{
  401134:	b510      	push	{r4, lr}
	ASSERT(descr);
  401136:	4604      	mov	r4, r0
  401138:	2253      	movs	r2, #83	; 0x53
  40113a:	4906      	ldr	r1, [pc, #24]	; (401154 <usart_sync_enable+0x20>)
  40113c:	3000      	adds	r0, #0
  40113e:	bf18      	it	ne
  401140:	2001      	movne	r0, #1
  401142:	4b05      	ldr	r3, [pc, #20]	; (401158 <usart_sync_enable+0x24>)
  401144:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  401146:	f104 0008 	add.w	r0, r4, #8
  40114a:	4b04      	ldr	r3, [pc, #16]	; (40115c <usart_sync_enable+0x28>)
  40114c:	4798      	blx	r3
}
  40114e:	2000      	movs	r0, #0
  401150:	bd10      	pop	{r4, pc}
  401152:	bf00      	nop
  401154:	004055e0 	.word	0x004055e0
  401158:	00401161 	.word	0x00401161
  40115c:	00401ea9 	.word	0x00401ea9

00401160 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401160:	b900      	cbnz	r0, 401164 <assert+0x4>
		__asm("BKPT #0");
  401162:	be00      	bkpt	0x0000
  401164:	4770      	bx	lr

00401166 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  401166:	6803      	ldr	r3, [r0, #0]
  401168:	b11b      	cbz	r3, 401172 <is_list_element+0xc>
		if (it == element) {
  40116a:	428b      	cmp	r3, r1
  40116c:	d003      	beq.n	401176 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  40116e:	681b      	ldr	r3, [r3, #0]
  401170:	e7fa      	b.n	401168 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  401172:	2000      	movs	r0, #0
  401174:	4770      	bx	lr
			return true;
  401176:	2001      	movs	r0, #1
}
  401178:	4770      	bx	lr
	...

0040117c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  40117c:	b538      	push	{r3, r4, r5, lr}
  40117e:	4604      	mov	r4, r0
  401180:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  401182:	4b06      	ldr	r3, [pc, #24]	; (40119c <list_insert_as_head+0x20>)
  401184:	4798      	blx	r3
  401186:	f080 0001 	eor.w	r0, r0, #1
  40118a:	2239      	movs	r2, #57	; 0x39
  40118c:	4904      	ldr	r1, [pc, #16]	; (4011a0 <list_insert_as_head+0x24>)
  40118e:	b2c0      	uxtb	r0, r0
  401190:	4b04      	ldr	r3, [pc, #16]	; (4011a4 <list_insert_as_head+0x28>)
  401192:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  401194:	6823      	ldr	r3, [r4, #0]
  401196:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  401198:	6025      	str	r5, [r4, #0]
  40119a:	bd38      	pop	{r3, r4, r5, pc}
  40119c:	00401167 	.word	0x00401167
  4011a0:	004055fc 	.word	0x004055fc
  4011a4:	00401161 	.word	0x00401161

004011a8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  4011a8:	6803      	ldr	r3, [r0, #0]
  4011aa:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  4011ac:	6001      	str	r1, [r0, #0]
  4011ae:	4770      	bx	lr

004011b0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  4011b0:	6803      	ldr	r3, [r0, #0]
  4011b2:	b11b      	cbz	r3, 4011bc <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  4011b4:	681a      	ldr	r2, [r3, #0]
  4011b6:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  4011b8:	4618      	mov	r0, r3
  4011ba:	4770      	bx	lr
	}

	return NULL;
  4011bc:	2000      	movs	r0, #0
}
  4011be:	4770      	bx	lr

004011c0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  4011c0:	b570      	push	{r4, r5, r6, lr}
  4011c2:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  4011c4:	4604      	mov	r4, r0
  4011c6:	460e      	mov	r6, r1
  4011c8:	2800      	cmp	r0, #0
  4011ca:	bf18      	it	ne
  4011cc:	2900      	cmpne	r1, #0
  4011ce:	d002      	beq.n	4011d6 <ringbuffer_init+0x16>
  4011d0:	b97a      	cbnz	r2, 4011f2 <ringbuffer_init+0x32>
  4011d2:	2000      	movs	r0, #0
  4011d4:	e000      	b.n	4011d8 <ringbuffer_init+0x18>
  4011d6:	2000      	movs	r0, #0
  4011d8:	2228      	movs	r2, #40	; 0x28
  4011da:	4908      	ldr	r1, [pc, #32]	; (4011fc <ringbuffer_init+0x3c>)
  4011dc:	4b08      	ldr	r3, [pc, #32]	; (401200 <ringbuffer_init+0x40>)
  4011de:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  4011e0:	1e6b      	subs	r3, r5, #1
  4011e2:	421d      	tst	r5, r3
  4011e4:	d107      	bne.n	4011f6 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  4011e6:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  4011e8:	2000      	movs	r0, #0
  4011ea:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  4011ec:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  4011ee:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  4011f0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  4011f2:	2001      	movs	r0, #1
  4011f4:	e7f0      	b.n	4011d8 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  4011f6:	f06f 000c 	mvn.w	r0, #12
}
  4011fa:	bd70      	pop	{r4, r5, r6, pc}
  4011fc:	0040561c 	.word	0x0040561c
  401200:	00401161 	.word	0x00401161

00401204 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  401204:	b538      	push	{r3, r4, r5, lr}
  401206:	460d      	mov	r5, r1
	ASSERT(rb);
  401208:	4604      	mov	r4, r0
  40120a:	2251      	movs	r2, #81	; 0x51
  40120c:	490b      	ldr	r1, [pc, #44]	; (40123c <ringbuffer_put+0x38>)
  40120e:	3000      	adds	r0, #0
  401210:	bf18      	it	ne
  401212:	2001      	movne	r0, #1
  401214:	4b0a      	ldr	r3, [pc, #40]	; (401240 <ringbuffer_put+0x3c>)
  401216:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  401218:	6822      	ldr	r2, [r4, #0]
  40121a:	68e3      	ldr	r3, [r4, #12]
  40121c:	6861      	ldr	r1, [r4, #4]
  40121e:	400b      	ands	r3, r1
  401220:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  401222:	68e3      	ldr	r3, [r4, #12]
  401224:	68a2      	ldr	r2, [r4, #8]
  401226:	1a9a      	subs	r2, r3, r2
  401228:	6861      	ldr	r1, [r4, #4]
  40122a:	428a      	cmp	r2, r1
  40122c:	d901      	bls.n	401232 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  40122e:	1a59      	subs	r1, r3, r1
  401230:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  401232:	3301      	adds	r3, #1
  401234:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  401236:	2000      	movs	r0, #0
  401238:	bd38      	pop	{r3, r4, r5, pc}
  40123a:	bf00      	nop
  40123c:	0040561c 	.word	0x0040561c
  401240:	00401161 	.word	0x00401161

00401244 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  401244:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  401246:	4a06      	ldr	r2, [pc, #24]	; (401260 <_sbrk+0x1c>)
  401248:	6812      	ldr	r2, [r2, #0]
  40124a:	b122      	cbz	r2, 401256 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40124c:	4a04      	ldr	r2, [pc, #16]	; (401260 <_sbrk+0x1c>)
  40124e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  401250:	4403      	add	r3, r0
  401252:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  401254:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401256:	4903      	ldr	r1, [pc, #12]	; (401264 <_sbrk+0x20>)
  401258:	4a01      	ldr	r2, [pc, #4]	; (401260 <_sbrk+0x1c>)
  40125a:	6011      	str	r1, [r2, #0]
  40125c:	e7f6      	b.n	40124c <_sbrk+0x8>
  40125e:	bf00      	nop
  401260:	20400338 	.word	0x20400338
  401264:	20400cc0 	.word	0x20400cc0

00401268 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  401268:	f04f 30ff 	mov.w	r0, #4294967295
  40126c:	4770      	bx	lr

0040126e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  40126e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401272:	604b      	str	r3, [r1, #4]

	return 0;
}
  401274:	2000      	movs	r0, #0
  401276:	4770      	bx	lr

00401278 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  401278:	2001      	movs	r0, #1
  40127a:	4770      	bx	lr

0040127c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  40127c:	2000      	movs	r0, #0
  40127e:	4770      	bx	lr

00401280 <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  401280:	6943      	ldr	r3, [r0, #20]
  401282:	4a07      	ldr	r2, [pc, #28]	; (4012a0 <_afec_get_irq_num+0x20>)
  401284:	4293      	cmp	r3, r2
  401286:	d005      	beq.n	401294 <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  401288:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  40128c:	4293      	cmp	r3, r2
  40128e:	d103      	bne.n	401298 <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  401290:	2028      	movs	r0, #40	; 0x28
  401292:	4770      	bx	lr
		return AFEC0_IRQn;
  401294:	201d      	movs	r0, #29
  401296:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  401298:	f04f 30ff 	mov.w	r0, #4294967295
}
  40129c:	4770      	bx	lr
  40129e:	bf00      	nop
  4012a0:	4003c000 	.word	0x4003c000

004012a4 <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  4012a4:	4b06      	ldr	r3, [pc, #24]	; (4012c0 <_afec_init_irq_param+0x1c>)
  4012a6:	4298      	cmp	r0, r3
  4012a8:	d003      	beq.n	4012b2 <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  4012aa:	4b06      	ldr	r3, [pc, #24]	; (4012c4 <_afec_init_irq_param+0x20>)
  4012ac:	4298      	cmp	r0, r3
  4012ae:	d003      	beq.n	4012b8 <_afec_init_irq_param+0x14>
  4012b0:	4770      	bx	lr
		_afec0_dev = dev;
  4012b2:	4b05      	ldr	r3, [pc, #20]	; (4012c8 <_afec_init_irq_param+0x24>)
  4012b4:	6019      	str	r1, [r3, #0]
  4012b6:	e7f8      	b.n	4012aa <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  4012b8:	4b03      	ldr	r3, [pc, #12]	; (4012c8 <_afec_init_irq_param+0x24>)
  4012ba:	6059      	str	r1, [r3, #4]
	}
}
  4012bc:	e7f8      	b.n	4012b0 <_afec_init_irq_param+0xc>
  4012be:	bf00      	nop
  4012c0:	4003c000 	.word	0x4003c000
  4012c4:	40064000 	.word	0x40064000
  4012c8:	2040033c 	.word	0x2040033c

004012cc <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  4012cc:	2364      	movs	r3, #100	; 0x64
  4012ce:	4a1d      	ldr	r2, [pc, #116]	; (401344 <_afec_init+0x78>)
  4012d0:	fb03 2301 	mla	r3, r3, r1, r2
  4012d4:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  4012d6:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  4012d8:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  4012da:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  4012dc:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  4012de:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  4012e0:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  4012e2:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  4012e4:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  4012e6:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  4012e8:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  4012ea:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  4012ec:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  4012ee:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  4012f0:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  4012f2:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  4012f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  4012f8:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  4012fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  4012fe:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  401302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  401304:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  401308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  40130a:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  40130e:	2200      	movs	r2, #0
  401310:	2a0b      	cmp	r2, #11
  401312:	d814      	bhi.n	40133e <_afec_init+0x72>
{
  401314:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  401316:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  401318:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  40131c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401320:	4413      	add	r3, r2
  401322:	330c      	adds	r3, #12
  401324:	4c07      	ldr	r4, [pc, #28]	; (401344 <_afec_init+0x78>)
  401326:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40132a:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  40132c:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  40132e:	3201      	adds	r2, #1
  401330:	b2d2      	uxtb	r2, r2
  401332:	2a0b      	cmp	r2, #11
  401334:	d9ef      	bls.n	401316 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  401336:	2000      	movs	r0, #0
  401338:	f85d 4b04 	ldr.w	r4, [sp], #4
  40133c:	4770      	bx	lr
  40133e:	2000      	movs	r0, #0
  401340:	4770      	bx	lr
  401342:	bf00      	nop
  401344:	00405640 	.word	0x00405640

00401348 <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  401348:	b530      	push	{r4, r5, lr}
  40134a:	b083      	sub	sp, #12
  40134c:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  40134e:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  401350:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  401352:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  401354:	400b      	ands	r3, r1
  401356:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  401358:	9b01      	ldr	r3, [sp, #4]
  40135a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  40135e:	d10e      	bne.n	40137e <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  401360:	9b01      	ldr	r3, [sp, #4]
  401362:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  401366:	d10e      	bne.n	401386 <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  401368:	9b01      	ldr	r3, [sp, #4]
  40136a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40136e:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  401370:	9c01      	ldr	r4, [sp, #4]
  401372:	fab4 f484 	clz	r4, r4
  401376:	f1c4 0420 	rsb	r4, r4, #32
  40137a:	b2e4      	uxtb	r4, r4
	while (cnt) {
  40137c:	e01f      	b.n	4013be <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  40137e:	6803      	ldr	r3, [r0, #0]
  401380:	2100      	movs	r1, #0
  401382:	4798      	blx	r3
  401384:	e7ec      	b.n	401360 <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  401386:	686b      	ldr	r3, [r5, #4]
  401388:	2100      	movs	r1, #0
  40138a:	4628      	mov	r0, r5
  40138c:	4798      	blx	r3
  40138e:	e7eb      	b.n	401368 <_afec_interrupt_handler+0x20>
		cnt--;
  401390:	3c01      	subs	r4, #1
  401392:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  401394:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  401396:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  401398:	68ab      	ldr	r3, [r5, #8]
  40139a:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  40139c:	6e92      	ldr	r2, [r2, #104]	; 0x68
  40139e:	b292      	uxth	r2, r2
  4013a0:	4621      	mov	r1, r4
  4013a2:	4628      	mov	r0, r5
  4013a4:	4798      	blx	r3
		status &= ~(1 << cnt);
  4013a6:	2301      	movs	r3, #1
  4013a8:	40a3      	lsls	r3, r4
  4013aa:	9c01      	ldr	r4, [sp, #4]
  4013ac:	ea24 0403 	bic.w	r4, r4, r3
  4013b0:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  4013b2:	9c01      	ldr	r4, [sp, #4]
  4013b4:	fab4 f484 	clz	r4, r4
  4013b8:	f1c4 0420 	rsb	r4, r4, #32
  4013bc:	b2e4      	uxtb	r4, r4
	while (cnt) {
  4013be:	2c00      	cmp	r4, #0
  4013c0:	d1e6      	bne.n	401390 <_afec_interrupt_handler+0x48>
	}
}
  4013c2:	b003      	add	sp, #12
  4013c4:	bd30      	pop	{r4, r5, pc}
	...

004013c8 <_afec_get_hardware_index>:
{
  4013c8:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  4013ca:	4b09      	ldr	r3, [pc, #36]	; (4013f0 <_afec_get_hardware_index+0x28>)
  4013cc:	4298      	cmp	r0, r3
  4013ce:	d00a      	beq.n	4013e6 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  4013d0:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4013d4:	4298      	cmp	r0, r3
  4013d6:	d008      	beq.n	4013ea <_afec_get_hardware_index+0x22>
	ASSERT(false);
  4013d8:	22a7      	movs	r2, #167	; 0xa7
  4013da:	4906      	ldr	r1, [pc, #24]	; (4013f4 <_afec_get_hardware_index+0x2c>)
  4013dc:	2000      	movs	r0, #0
  4013de:	4b06      	ldr	r3, [pc, #24]	; (4013f8 <_afec_get_hardware_index+0x30>)
  4013e0:	4798      	blx	r3
	return 0;
  4013e2:	2000      	movs	r0, #0
  4013e4:	bd08      	pop	{r3, pc}
		return 0;
  4013e6:	2000      	movs	r0, #0
  4013e8:	bd08      	pop	{r3, pc}
		return 1;
  4013ea:	2001      	movs	r0, #1
}
  4013ec:	bd08      	pop	{r3, pc}
  4013ee:	bf00      	nop
  4013f0:	4003c000 	.word	0x4003c000
  4013f4:	00405708 	.word	0x00405708
  4013f8:	00401161 	.word	0x00401161

004013fc <_afec_get_regs>:
{
  4013fc:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  4013fe:	4b09      	ldr	r3, [pc, #36]	; (401424 <_afec_get_regs+0x28>)
  401400:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401402:	2300      	movs	r3, #0
  401404:	2b01      	cmp	r3, #1
  401406:	d809      	bhi.n	40141c <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  401408:	2264      	movs	r2, #100	; 0x64
  40140a:	fb02 f203 	mul.w	r2, r2, r3
  40140e:	4906      	ldr	r1, [pc, #24]	; (401428 <_afec_get_regs+0x2c>)
  401410:	5c8a      	ldrb	r2, [r1, r2]
  401412:	4290      	cmp	r0, r2
  401414:	d003      	beq.n	40141e <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401416:	3301      	adds	r3, #1
  401418:	b2db      	uxtb	r3, r3
  40141a:	e7f3      	b.n	401404 <_afec_get_regs+0x8>
	return 0;
  40141c:	2300      	movs	r3, #0
}
  40141e:	4618      	mov	r0, r3
  401420:	bd08      	pop	{r3, pc}
  401422:	bf00      	nop
  401424:	004013c9 	.word	0x004013c9
  401428:	00405640 	.word	0x00405640

0040142c <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  40142c:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  40142e:	4b02      	ldr	r3, [pc, #8]	; (401438 <AFEC0_Handler+0xc>)
  401430:	6818      	ldr	r0, [r3, #0]
  401432:	4b02      	ldr	r3, [pc, #8]	; (40143c <AFEC0_Handler+0x10>)
  401434:	4798      	blx	r3
  401436:	bd08      	pop	{r3, pc}
  401438:	2040033c 	.word	0x2040033c
  40143c:	00401349 	.word	0x00401349

00401440 <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  401440:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  401442:	4b02      	ldr	r3, [pc, #8]	; (40144c <AFEC1_Handler+0xc>)
  401444:	6858      	ldr	r0, [r3, #4]
  401446:	4b02      	ldr	r3, [pc, #8]	; (401450 <AFEC1_Handler+0x10>)
  401448:	4798      	blx	r3
  40144a:	bd08      	pop	{r3, pc}
  40144c:	2040033c 	.word	0x2040033c
  401450:	00401349 	.word	0x00401349

00401454 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  401454:	b570      	push	{r4, r5, r6, lr}
  401456:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  401458:	4605      	mov	r5, r0
  40145a:	f44f 72a1 	mov.w	r2, #322	; 0x142
  40145e:	4923      	ldr	r1, [pc, #140]	; (4014ec <_adc_async_init+0x98>)
  401460:	3000      	adds	r0, #0
  401462:	bf18      	it	ne
  401464:	2001      	movne	r0, #1
  401466:	4b22      	ldr	r3, [pc, #136]	; (4014f0 <_adc_async_init+0x9c>)
  401468:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  40146a:	4620      	mov	r0, r4
  40146c:	4b21      	ldr	r3, [pc, #132]	; (4014f4 <_adc_async_init+0xa0>)
  40146e:	4798      	blx	r3
  401470:	4601      	mov	r1, r0
  401472:	4620      	mov	r0, r4
  401474:	4b20      	ldr	r3, [pc, #128]	; (4014f8 <_adc_async_init+0xa4>)
  401476:	4798      	blx	r3
	if (init_status) {
  401478:	4606      	mov	r6, r0
  40147a:	b108      	cbz	r0, 401480 <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  40147c:	4630      	mov	r0, r6
  40147e:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  401480:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  401482:	4629      	mov	r1, r5
  401484:	4620      	mov	r0, r4
  401486:	4b1d      	ldr	r3, [pc, #116]	; (4014fc <_adc_async_init+0xa8>)
  401488:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  40148a:	4628      	mov	r0, r5
  40148c:	4b1c      	ldr	r3, [pc, #112]	; (401500 <_adc_async_init+0xac>)
  40148e:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401490:	2800      	cmp	r0, #0
  401492:	db0d      	blt.n	4014b0 <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401494:	0943      	lsrs	r3, r0, #5
  401496:	f000 001f 	and.w	r0, r0, #31
  40149a:	2201      	movs	r2, #1
  40149c:	fa02 f000 	lsl.w	r0, r2, r0
  4014a0:	3320      	adds	r3, #32
  4014a2:	4a18      	ldr	r2, [pc, #96]	; (401504 <_adc_async_init+0xb0>)
  4014a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4014a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4014ac:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  4014b0:	4628      	mov	r0, r5
  4014b2:	4b13      	ldr	r3, [pc, #76]	; (401500 <_adc_async_init+0xac>)
  4014b4:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4014b6:	2800      	cmp	r0, #0
  4014b8:	db09      	blt.n	4014ce <_adc_async_init+0x7a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4014ba:	0943      	lsrs	r3, r0, #5
  4014bc:	f000 001f 	and.w	r0, r0, #31
  4014c0:	2201      	movs	r2, #1
  4014c2:	fa02 f000 	lsl.w	r0, r2, r0
  4014c6:	3360      	adds	r3, #96	; 0x60
  4014c8:	4a0e      	ldr	r2, [pc, #56]	; (401504 <_adc_async_init+0xb0>)
  4014ca:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  4014ce:	4628      	mov	r0, r5
  4014d0:	4b0b      	ldr	r3, [pc, #44]	; (401500 <_adc_async_init+0xac>)
  4014d2:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  4014d4:	2800      	cmp	r0, #0
  4014d6:	dbd1      	blt.n	40147c <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4014d8:	0942      	lsrs	r2, r0, #5
  4014da:	f000 001f 	and.w	r0, r0, #31
  4014de:	2301      	movs	r3, #1
  4014e0:	fa03 f000 	lsl.w	r0, r3, r0
  4014e4:	4b07      	ldr	r3, [pc, #28]	; (401504 <_adc_async_init+0xb0>)
  4014e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  4014ea:	e7c7      	b.n	40147c <_adc_async_init+0x28>
  4014ec:	00405708 	.word	0x00405708
  4014f0:	00401161 	.word	0x00401161
  4014f4:	004013fd 	.word	0x004013fd
  4014f8:	004012cd 	.word	0x004012cd
  4014fc:	004012a5 	.word	0x004012a5
  401500:	00401281 	.word	0x00401281
  401504:	e000e100 	.word	0xe000e100

00401508 <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  401508:	6942      	ldr	r2, [r0, #20]
  40150a:	2301      	movs	r3, #1
  40150c:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  401510:	6151      	str	r1, [r2, #20]
  401512:	4770      	bx	lr

00401514 <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  401514:	2002      	movs	r0, #2
  401516:	4770      	bx	lr

00401518 <_adc_async_convert>:
/**
 * \brief Make conversion
 */
void _adc_async_convert(struct _adc_async_device *const device)
{
	hri_afec_write_CR_reg(device->hw, AFEC_CR_START);
  401518:	6943      	ldr	r3, [r0, #20]
}

static inline void hri_afec_write_CR_reg(const void *const hw, hri_afec_cr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CR = data;
  40151a:	2202      	movs	r2, #2
  40151c:	601a      	str	r2, [r3, #0]
  40151e:	4770      	bx	lr

00401520 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  401520:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401524:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  401528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40152c:	fb03 f000 	mul.w	r0, r3, r0
  401530:	4770      	bx	lr
	...

00401534 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  401534:	b500      	push	{lr}
  401536:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  401538:	a801      	add	r0, sp, #4
  40153a:	4b14      	ldr	r3, [pc, #80]	; (40158c <_init_chip+0x58>)
  40153c:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  40153e:	4a14      	ldr	r2, [pc, #80]	; (401590 <_init_chip+0x5c>)
  401540:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  40154c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401550:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  401554:	a801      	add	r0, sp, #4
  401556:	4b0f      	ldr	r3, [pc, #60]	; (401594 <_init_chip+0x60>)
  401558:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  40155a:	4a0f      	ldr	r2, [pc, #60]	; (401598 <_init_chip+0x64>)
  40155c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  40155e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  401562:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  401566:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401568:	4b0c      	ldr	r3, [pc, #48]	; (40159c <_init_chip+0x68>)
  40156a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40156e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401572:	d104      	bne.n	40157e <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401574:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401578:	4b08      	ldr	r3, [pc, #32]	; (40159c <_init_chip+0x68>)
  40157a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  40157e:	4b08      	ldr	r3, [pc, #32]	; (4015a0 <_init_chip+0x6c>)
  401580:	4798      	blx	r3

#endif
	_pmc_init();
  401582:	4b08      	ldr	r3, [pc, #32]	; (4015a4 <_init_chip+0x70>)
  401584:	4798      	blx	r3
}
  401586:	b003      	add	sp, #12
  401588:	f85d fb04 	ldr.w	pc, [sp], #4
  40158c:	00400d01 	.word	0x00400d01
  401590:	e000ed00 	.word	0xe000ed00
  401594:	00400d0f 	.word	0x00400d0f
  401598:	400e0c00 	.word	0x400e0c00
  40159c:	400e0600 	.word	0x400e0600
  4015a0:	00401fa1 	.word	0x00401fa1
  4015a4:	00401929 	.word	0x00401929

004015a8 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  4015a8:	b538      	push	{r3, r4, r5, lr}
  4015aa:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  4015ac:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  4015ae:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  4015b0:	f014 0f01 	tst.w	r4, #1
  4015b4:	d11a      	bne.n	4015ec <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  4015b6:	f414 7f00 	tst.w	r4, #512	; 0x200
  4015ba:	d11a      	bne.n	4015f2 <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  4015bc:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  4015c0:	d11b      	bne.n	4015fa <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  4015c2:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  4015c6:	d11d      	bne.n	401604 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  4015c8:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  4015cc:	d008      	beq.n	4015e0 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4015ce:	68eb      	ldr	r3, [r5, #12]
  4015d0:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  4015d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
  4015d4:	f012 0f20 	tst.w	r2, #32
  4015d8:	d019      	beq.n	40160e <_can_irq_handler+0x66>
  4015da:	2102      	movs	r1, #2
  4015dc:	4628      	mov	r0, r5
  4015de:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  4015e0:	f014 0f08 	tst.w	r4, #8
  4015e4:	d115      	bne.n	401612 <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  4015e6:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  4015e8:	651c      	str	r4, [r3, #80]	; 0x50
  4015ea:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  4015ec:	6883      	ldr	r3, [r0, #8]
  4015ee:	4798      	blx	r3
  4015f0:	e7e1      	b.n	4015b6 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  4015f2:	686b      	ldr	r3, [r5, #4]
  4015f4:	4628      	mov	r0, r5
  4015f6:	4798      	blx	r3
  4015f8:	e7e0      	b.n	4015bc <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  4015fa:	68eb      	ldr	r3, [r5, #12]
  4015fc:	2103      	movs	r1, #3
  4015fe:	4628      	mov	r0, r5
  401600:	4798      	blx	r3
  401602:	e7de      	b.n	4015c2 <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  401604:	68eb      	ldr	r3, [r5, #12]
  401606:	2100      	movs	r1, #0
  401608:	4628      	mov	r0, r5
  40160a:	4798      	blx	r3
  40160c:	e7dc      	b.n	4015c8 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  40160e:	2101      	movs	r1, #1
  401610:	e7e4      	b.n	4015dc <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  401612:	68eb      	ldr	r3, [r5, #12]
  401614:	2104      	movs	r1, #4
  401616:	4628      	mov	r0, r5
  401618:	4798      	blx	r3
  40161a:	e7e4      	b.n	4015e6 <_can_irq_handler+0x3e>

0040161c <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  40161c:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  40161e:	4b02      	ldr	r3, [pc, #8]	; (401628 <MCAN1_INT0_Handler+0xc>)
  401620:	6a98      	ldr	r0, [r3, #40]	; 0x28
  401622:	4b02      	ldr	r3, [pc, #8]	; (40162c <MCAN1_INT0_Handler+0x10>)
  401624:	4798      	blx	r3
  401626:	bd08      	pop	{r3, pc}
  401628:	20400344 	.word	0x20400344
  40162c:	004015a9 	.word	0x004015a9

00401630 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401630:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  401632:	2500      	movs	r5, #0
  401634:	428d      	cmp	r5, r1
  401636:	d210      	bcs.n	40165a <_ffs+0x2a>
  401638:	2201      	movs	r2, #1
  40163a:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40163c:	2b1f      	cmp	r3, #31
  40163e:	d80a      	bhi.n	401656 <_ffs+0x26>
			if (v[i] & bit) {
  401640:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401644:	4222      	tst	r2, r4
  401646:	d102      	bne.n	40164e <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401648:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40164a:	3301      	adds	r3, #1
  40164c:	e7f6      	b.n	40163c <_ffs+0xc>
				return i * 32 + j;
  40164e:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401652:	bc30      	pop	{r4, r5}
  401654:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  401656:	3501      	adds	r5, #1
  401658:	e7ec      	b.n	401634 <_ffs+0x4>
	return -1;
  40165a:	f04f 30ff 	mov.w	r0, #4294967295
  40165e:	e7f8      	b.n	401652 <_ffs+0x22>

00401660 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401660:	b510      	push	{r4, lr}
  401662:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401664:	2300      	movs	r3, #0
  401666:	9301      	str	r3, [sp, #4]
  401668:	9302      	str	r3, [sp, #8]
  40166a:	9303      	str	r3, [sp, #12]
  40166c:	9304      	str	r3, [sp, #16]
  40166e:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401670:	4b21      	ldr	r3, [pc, #132]	; (4016f8 <_ext_irq_handler+0x98>)
  401672:	6818      	ldr	r0, [r3, #0]
  401674:	22f8      	movs	r2, #248	; 0xf8
  401676:	4921      	ldr	r1, [pc, #132]	; (4016fc <_ext_irq_handler+0x9c>)
  401678:	3000      	adds	r0, #0
  40167a:	bf18      	it	ne
  40167c:	2001      	movne	r0, #1
  40167e:	4b20      	ldr	r3, [pc, #128]	; (401700 <_ext_irq_handler+0xa0>)
  401680:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401682:	4b20      	ldr	r3, [pc, #128]	; (401704 <_ext_irq_handler+0xa4>)
  401684:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401686:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401688:	4013      	ands	r3, r2
  40168a:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  40168c:	491e      	ldr	r1, [pc, #120]	; (401708 <_ext_irq_handler+0xa8>)
  40168e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401690:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401692:	400a      	ands	r2, r1
  401694:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  401696:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  401698:	e025      	b.n	4016e6 <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  40169a:	4b17      	ldr	r3, [pc, #92]	; (4016f8 <_ext_irq_handler+0x98>)
  40169c:	681b      	ldr	r3, [r3, #0]
  40169e:	4620      	mov	r0, r4
  4016a0:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  4016a2:	1163      	asrs	r3, r4, #5
  4016a4:	f004 041f 	and.w	r4, r4, #31
  4016a8:	2201      	movs	r2, #1
  4016aa:	fa02 f404 	lsl.w	r4, r2, r4
  4016ae:	aa06      	add	r2, sp, #24
  4016b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4016b4:	f853 2c14 	ldr.w	r2, [r3, #-20]
  4016b8:	ea22 0204 	bic.w	r2, r2, r4
  4016bc:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  4016c0:	2105      	movs	r1, #5
  4016c2:	a801      	add	r0, sp, #4
  4016c4:	4b11      	ldr	r3, [pc, #68]	; (40170c <_ext_irq_handler+0xac>)
  4016c6:	4798      	blx	r3
  4016c8:	4604      	mov	r4, r0
		while (-1 != pos) {
  4016ca:	f1b4 3fff 	cmp.w	r4, #4294967295
  4016ce:	d1e4      	bne.n	40169a <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  4016d0:	4a0c      	ldr	r2, [pc, #48]	; (401704 <_ext_irq_handler+0xa4>)
  4016d2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4016d4:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  4016d6:	400b      	ands	r3, r1
  4016d8:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  4016da:	490b      	ldr	r1, [pc, #44]	; (401708 <_ext_irq_handler+0xa8>)
  4016dc:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4016de:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4016e0:	4002      	ands	r2, r0
  4016e2:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  4016e4:	4313      	orrs	r3, r2
	while (flag_total) {
  4016e6:	b12b      	cbz	r3, 4016f4 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  4016e8:	2105      	movs	r1, #5
  4016ea:	a801      	add	r0, sp, #4
  4016ec:	4b07      	ldr	r3, [pc, #28]	; (40170c <_ext_irq_handler+0xac>)
  4016ee:	4798      	blx	r3
  4016f0:	4604      	mov	r4, r0
		while (-1 != pos) {
  4016f2:	e7ea      	b.n	4016ca <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  4016f4:	b006      	add	sp, #24
  4016f6:	bd10      	pop	{r4, pc}
  4016f8:	20400370 	.word	0x20400370
  4016fc:	00405760 	.word	0x00405760
  401700:	00401161 	.word	0x00401161
  401704:	400e0e00 	.word	0x400e0e00
  401708:	400e1400 	.word	0x400e1400
  40170c:	00401631 	.word	0x00401631

00401710 <_pio_get_hardware_index>:
{
  401710:	b510      	push	{r4, lr}
	ASSERT(hw);
  401712:	4604      	mov	r4, r0
  401714:	22d2      	movs	r2, #210	; 0xd2
  401716:	4905      	ldr	r1, [pc, #20]	; (40172c <_pio_get_hardware_index+0x1c>)
  401718:	3000      	adds	r0, #0
  40171a:	bf18      	it	ne
  40171c:	2001      	movne	r0, #1
  40171e:	4b04      	ldr	r3, [pc, #16]	; (401730 <_pio_get_hardware_index+0x20>)
  401720:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  401722:	4804      	ldr	r0, [pc, #16]	; (401734 <_pio_get_hardware_index+0x24>)
  401724:	4420      	add	r0, r4
}
  401726:	f3c0 2047 	ubfx	r0, r0, #9, #8
  40172a:	bd10      	pop	{r4, pc}
  40172c:	00405760 	.word	0x00405760
  401730:	00401161 	.word	0x00401161
  401734:	bff1f200 	.word	0xbff1f200

00401738 <_pio_get_index>:
{
  401738:	b510      	push	{r4, lr}
	ASSERT(hw);
  40173a:	4604      	mov	r4, r0
  40173c:	22e0      	movs	r2, #224	; 0xe0
  40173e:	490d      	ldr	r1, [pc, #52]	; (401774 <_pio_get_index+0x3c>)
  401740:	3000      	adds	r0, #0
  401742:	bf18      	it	ne
  401744:	2001      	movne	r0, #1
  401746:	4b0c      	ldr	r3, [pc, #48]	; (401778 <_pio_get_index+0x40>)
  401748:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  40174a:	4620      	mov	r0, r4
  40174c:	4b0b      	ldr	r3, [pc, #44]	; (40177c <_pio_get_index+0x44>)
  40174e:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401750:	2300      	movs	r3, #0
  401752:	2b01      	cmp	r3, #1
  401754:	d80b      	bhi.n	40176e <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  401756:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  40175a:	008a      	lsls	r2, r1, #2
  40175c:	4908      	ldr	r1, [pc, #32]	; (401780 <_pio_get_index+0x48>)
  40175e:	5c8a      	ldrb	r2, [r1, r2]
  401760:	4290      	cmp	r0, r2
  401762:	d002      	beq.n	40176a <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401764:	3301      	adds	r3, #1
  401766:	b2db      	uxtb	r3, r3
  401768:	e7f3      	b.n	401752 <_pio_get_index+0x1a>
			return i;
  40176a:	b258      	sxtb	r0, r3
  40176c:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  40176e:	f04f 30ff 	mov.w	r0, #4294967295
}
  401772:	bd10      	pop	{r4, pc}
  401774:	00405760 	.word	0x00405760
  401778:	00401161 	.word	0x00401161
  40177c:	00401711 	.word	0x00401711
  401780:	00405720 	.word	0x00405720

00401784 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401784:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  401786:	4604      	mov	r4, r0
  401788:	f240 1259 	movw	r2, #345	; 0x159
  40178c:	4929      	ldr	r1, [pc, #164]	; (401834 <_pio_init+0xb0>)
  40178e:	3000      	adds	r0, #0
  401790:	bf18      	it	ne
  401792:	2001      	movne	r0, #1
  401794:	4b28      	ldr	r3, [pc, #160]	; (401838 <_pio_init+0xb4>)
  401796:	4798      	blx	r3

	i = _pio_get_index(hw);
  401798:	4620      	mov	r0, r4
  40179a:	4b28      	ldr	r3, [pc, #160]	; (40183c <_pio_init+0xb8>)
  40179c:	4798      	blx	r3
	if (i < 0) {
  40179e:	2800      	cmp	r0, #0
  4017a0:	db43      	blt.n	40182a <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  4017a2:	4d27      	ldr	r5, [pc, #156]	; (401840 <_pio_init+0xbc>)
  4017a4:	00c2      	lsls	r2, r0, #3
  4017a6:	1a11      	subs	r1, r2, r0
  4017a8:	008b      	lsls	r3, r1, #2
  4017aa:	442b      	add	r3, r5
  4017ac:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  4017ae:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  4017b2:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  4017b4:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  4017b8:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  4017ba:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  4017be:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  4017c0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  4017c4:	1a10      	subs	r0, r2, r0
  4017c6:	0083      	lsls	r3, r0, #2
  4017c8:	442b      	add	r3, r5
  4017ca:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  4017cc:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  4017d0:	4620      	mov	r0, r4
  4017d2:	4b1c      	ldr	r3, [pc, #112]	; (401844 <_pio_init+0xc0>)
  4017d4:	4798      	blx	r3
  4017d6:	4428      	add	r0, r5
  4017d8:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  if ((int32_t)(IRQn) >= 0)
  4017dc:	2b00      	cmp	r3, #0
  4017de:	db0c      	blt.n	4017fa <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4017e0:	095a      	lsrs	r2, r3, #5
  4017e2:	f003 001f 	and.w	r0, r3, #31
  4017e6:	2101      	movs	r1, #1
  4017e8:	4081      	lsls	r1, r0
  4017ea:	3220      	adds	r2, #32
  4017ec:	4816      	ldr	r0, [pc, #88]	; (401848 <_pio_init+0xc4>)
  4017ee:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4017f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4017f6:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  4017fa:	2b00      	cmp	r3, #0
  4017fc:	db08      	blt.n	401810 <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4017fe:	095a      	lsrs	r2, r3, #5
  401800:	f003 001f 	and.w	r0, r3, #31
  401804:	2101      	movs	r1, #1
  401806:	4081      	lsls	r1, r0
  401808:	3260      	adds	r2, #96	; 0x60
  40180a:	480f      	ldr	r0, [pc, #60]	; (401848 <_pio_init+0xc4>)
  40180c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401810:	2b00      	cmp	r3, #0
  401812:	db0d      	blt.n	401830 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401814:	0959      	lsrs	r1, r3, #5
  401816:	f003 031f 	and.w	r3, r3, #31
  40181a:	2201      	movs	r2, #1
  40181c:	fa02 f303 	lsl.w	r3, r2, r3
  401820:	4a09      	ldr	r2, [pc, #36]	; (401848 <_pio_init+0xc4>)
  401822:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  401826:	2000      	movs	r0, #0
  401828:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  40182a:	f06f 0010 	mvn.w	r0, #16
  40182e:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401830:	2000      	movs	r0, #0
}
  401832:	bd38      	pop	{r3, r4, r5, pc}
  401834:	00405760 	.word	0x00405760
  401838:	00401161 	.word	0x00401161
  40183c:	00401739 	.word	0x00401739
  401840:	00405720 	.word	0x00405720
  401844:	00401711 	.word	0x00401711
  401848:	e000e100 	.word	0xe000e100

0040184c <PIOD_Handler>:
{
  40184c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40184e:	4b01      	ldr	r3, [pc, #4]	; (401854 <PIOD_Handler+0x8>)
  401850:	4798      	blx	r3
  401852:	bd08      	pop	{r3, pc}
  401854:	00401661 	.word	0x00401661

00401858 <PIOA_Handler>:
{
  401858:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40185a:	4b01      	ldr	r3, [pc, #4]	; (401860 <PIOA_Handler+0x8>)
  40185c:	4798      	blx	r3
  40185e:	bd08      	pop	{r3, pc}
  401860:	00401661 	.word	0x00401661

00401864 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401864:	b538      	push	{r3, r4, r5, lr}
  401866:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401868:	4804      	ldr	r0, [pc, #16]	; (40187c <_ext_irq_init+0x18>)
  40186a:	4c05      	ldr	r4, [pc, #20]	; (401880 <_ext_irq_init+0x1c>)
  40186c:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  40186e:	4805      	ldr	r0, [pc, #20]	; (401884 <_ext_irq_init+0x20>)
  401870:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401872:	4b05      	ldr	r3, [pc, #20]	; (401888 <_ext_irq_init+0x24>)
  401874:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401876:	2000      	movs	r0, #0
  401878:	bd38      	pop	{r3, r4, r5, pc}
  40187a:	bf00      	nop
  40187c:	400e0e00 	.word	0x400e0e00
  401880:	00401785 	.word	0x00401785
  401884:	400e1400 	.word	0x400e1400
  401888:	20400370 	.word	0x20400370

0040188c <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  40188c:	490e      	ldr	r1, [pc, #56]	; (4018c8 <_pmc_init_sources+0x3c>)
  40188e:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401890:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  401894:	4b0d      	ldr	r3, [pc, #52]	; (4018cc <_pmc_init_sources+0x40>)
  401896:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401898:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40189a:	4b0b      	ldr	r3, [pc, #44]	; (4018c8 <_pmc_init_sources+0x3c>)
  40189c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  40189e:	f013 0f01 	tst.w	r3, #1
  4018a2:	d0fa      	beq.n	40189a <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  4018a4:	4b08      	ldr	r3, [pc, #32]	; (4018c8 <_pmc_init_sources+0x3c>)
  4018a6:	6a19      	ldr	r1, [r3, #32]
  4018a8:	4a09      	ldr	r2, [pc, #36]	; (4018d0 <_pmc_init_sources+0x44>)
  4018aa:	430a      	orrs	r2, r1
  4018ac:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4018ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4018b0:	4a08      	ldr	r2, [pc, #32]	; (4018d4 <_pmc_init_sources+0x48>)
  4018b2:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4018b4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  4018b6:	4a08      	ldr	r2, [pc, #32]	; (4018d8 <_pmc_init_sources+0x4c>)
  4018b8:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4018ba:	4b03      	ldr	r3, [pc, #12]	; (4018c8 <_pmc_init_sources+0x3c>)
  4018bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4018be:	f013 0f02 	tst.w	r3, #2
  4018c2:	d0fa      	beq.n	4018ba <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4018c4:	4770      	bx	lr
  4018c6:	bf00      	nop
  4018c8:	400e0600 	.word	0x400e0600
  4018cc:	00373e01 	.word	0x00373e01
  4018d0:	01370000 	.word	0x01370000
  4018d4:	f800ffff 	.word	0xf800ffff
  4018d8:	20183f01 	.word	0x20183f01

004018dc <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4018dc:	4a11      	ldr	r2, [pc, #68]	; (401924 <_pmc_init_master_clock+0x48>)
  4018de:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  4018e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4018e4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4018e6:	4b0f      	ldr	r3, [pc, #60]	; (401924 <_pmc_init_master_clock+0x48>)
  4018e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4018ea:	f013 0f08 	tst.w	r3, #8
  4018ee:	d0fa      	beq.n	4018e6 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4018f0:	4a0c      	ldr	r2, [pc, #48]	; (401924 <_pmc_init_master_clock+0x48>)
  4018f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  4018f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  4018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  4018fc:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4018fe:	4b09      	ldr	r3, [pc, #36]	; (401924 <_pmc_init_master_clock+0x48>)
  401900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401902:	f013 0f08 	tst.w	r3, #8
  401906:	d0fa      	beq.n	4018fe <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401908:	4a06      	ldr	r2, [pc, #24]	; (401924 <_pmc_init_master_clock+0x48>)
  40190a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  40190c:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401910:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401914:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401916:	4b03      	ldr	r3, [pc, #12]	; (401924 <_pmc_init_master_clock+0x48>)
  401918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40191a:	f013 0f08 	tst.w	r3, #8
  40191e:	d0fa      	beq.n	401916 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401920:	4770      	bx	lr
  401922:	bf00      	nop
  401924:	400e0600 	.word	0x400e0600

00401928 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401928:	b508      	push	{r3, lr}
	_pmc_init_sources();
  40192a:	4b02      	ldr	r3, [pc, #8]	; (401934 <_pmc_init+0xc>)
  40192c:	4798      	blx	r3
	_pmc_init_master_clock();
  40192e:	4b02      	ldr	r3, [pc, #8]	; (401938 <_pmc_init+0x10>)
  401930:	4798      	blx	r3
  401932:	bd08      	pop	{r3, pc}
  401934:	0040188d 	.word	0x0040188d
  401938:	004018dd 	.word	0x004018dd

0040193c <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  40193c:	2300      	movs	r3, #0
  40193e:	2b01      	cmp	r3, #1
  401940:	d80f      	bhi.n	401962 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  401942:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  401946:	008a      	lsls	r2, r1, #2
  401948:	4907      	ldr	r1, [pc, #28]	; (401968 <_pwm_get_cfg+0x2c>)
  40194a:	588a      	ldr	r2, [r1, r2]
  40194c:	4282      	cmp	r2, r0
  40194e:	d002      	beq.n	401956 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401950:	3301      	adds	r3, #1
  401952:	b2db      	uxtb	r3, r3
  401954:	e7f3      	b.n	40193e <_pwm_get_cfg+0x2>
			return (_pwms + i);
  401956:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40195a:	009a      	lsls	r2, r3, #2
  40195c:	4608      	mov	r0, r1
  40195e:	4410      	add	r0, r2
  401960:	4770      	bx	lr
		}
	}

	return NULL;
  401962:	2000      	movs	r0, #0
}
  401964:	4770      	bx	lr
  401966:	bf00      	nop
  401968:	0040577c 	.word	0x0040577c

0040196c <_pwm_init>:
		_pwm1_dev = dev;
	}
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  40196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40196e:	4605      	mov	r5, r0
	
	ASSERT(hw);
  401970:	460c      	mov	r4, r1
  401972:	1c08      	adds	r0, r1, #0
  401974:	bf18      	it	ne
  401976:	2001      	movne	r0, #1
  401978:	f240 1261 	movw	r2, #353	; 0x161
  40197c:	4948      	ldr	r1, [pc, #288]	; (401aa0 <_pwm_init+0x134>)
  40197e:	4b49      	ldr	r3, [pc, #292]	; (401aa4 <_pwm_init+0x138>)
  401980:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  401982:	4620      	mov	r0, r4
  401984:	4b48      	ldr	r3, [pc, #288]	; (401aa8 <_pwm_init+0x13c>)
  401986:	4798      	blx	r3

	device->hw = hw;
  401988:	612c      	str	r4, [r5, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  40198a:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  40198c:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  40198e:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  401990:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  401992:	6903      	ldr	r3, [r0, #16]
  401994:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  401998:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  40199a:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  40199c:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  40199e:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  4019a0:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  4019a2:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  4019a6:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  4019a8:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  4019aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  4019ac:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  4019b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  4019b2:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
	

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  4019b6:	2100      	movs	r1, #0
  4019b8:	e029      	b.n	401a0e <_pwm_init+0xa2>
		ch = cfg->ch + i;
  4019ba:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4019bc:	010b      	lsls	r3, r1, #4
  4019be:	18d7      	adds	r7, r2, r3
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode | PWM_CMR_DTE);					//enable dead time
  4019c0:	5cd5      	ldrb	r5, [r2, r3]
  4019c2:	687e      	ldr	r6, [r7, #4]
  4019c4:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  4019c8:	3510      	adds	r5, #16
  4019ca:	016d      	lsls	r5, r5, #5
  4019cc:	5166      	str	r6, [r4, r5]
		//hri_pwmchnum_set_CMR_DTE_bit((void *) &((Pwm *)hw)->PwmChNum[ch->index]);		//another less elegant way of enabling dead time
		hri_pwm_set_DT_DTH_bf(hw, ch->index, 10);										//set high side deadtime in PWM clock counts
  4019ce:	5cd5      	ldrb	r5, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  4019d0:	eb04 1545 	add.w	r5, r4, r5, lsl #5
  4019d4:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  4019d8:	f046 060a 	orr.w	r6, r6, #10
  4019dc:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
		hri_pwm_set_DT_DTL_bf(hw, ch->index, 10);										//set high side deadtime in PWM clock counts
  4019e0:	5cd5      	ldrb	r5, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  4019e2:	eb04 1545 	add.w	r5, r4, r5, lsl #5
  4019e6:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  4019ea:	f446 2620 	orr.w	r6, r6, #655360	; 0xa0000
  4019ee:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  4019f2:	5cd5      	ldrb	r5, [r2, r3]
  4019f4:	68fe      	ldr	r6, [r7, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  4019f6:	3510      	adds	r5, #16
  4019f8:	eb04 1545 	add.w	r5, r4, r5, lsl #5
  4019fc:	606e      	str	r6, [r5, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  4019fe:	5cd3      	ldrb	r3, [r2, r3]
  401a00:	68ba      	ldr	r2, [r7, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  401a02:	eb04 1343 	add.w	r3, r4, r3, lsl #5
  401a06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  401a0a:	3101      	adds	r1, #1
  401a0c:	b249      	sxtb	r1, r1
  401a0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  401a10:	4299      	cmp	r1, r3
  401a12:	d3d2      	bcc.n	4019ba <_pwm_init+0x4e>
  401a14:	2300      	movs	r3, #0
  401a16:	e011      	b.n	401a3c <_pwm_init+0xd0>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  401a18:	6b81      	ldr	r1, [r0, #56]	; 0x38
  401a1a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
  401a1e:	00aa      	lsls	r2, r5, #2
  401a20:	188f      	adds	r7, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  401a22:	5c8d      	ldrb	r5, [r1, r2]
  401a24:	687e      	ldr	r6, [r7, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  401a26:	eb04 1505 	add.w	r5, r4, r5, lsl #4
  401a2a:	f8c5 6138 	str.w	r6, [r5, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  401a2e:	5c8a      	ldrb	r2, [r1, r2]
  401a30:	68b9      	ldr	r1, [r7, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  401a32:	3213      	adds	r2, #19
  401a34:	0112      	lsls	r2, r2, #4
  401a36:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  401a38:	3301      	adds	r3, #1
  401a3a:	b25b      	sxtb	r3, r3
  401a3c:	6b42      	ldr	r2, [r0, #52]	; 0x34
  401a3e:	4293      	cmp	r3, r2
  401a40:	d3ea      	bcc.n	401a18 <_pwm_init+0xac>
	}
	//hri_pwm_set_IMR1_CHID1_bit

	_pwm_init_irq_param(hw, device);
	NVIC_DisableIRQ(cfg->irq);
  401a42:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  401a46:	2b00      	cmp	r3, #0
  401a48:	db0d      	blt.n	401a66 <_pwm_init+0xfa>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a4a:	095a      	lsrs	r2, r3, #5
  401a4c:	f003 031f 	and.w	r3, r3, #31
  401a50:	2101      	movs	r1, #1
  401a52:	fa01 f303 	lsl.w	r3, r1, r3
  401a56:	3220      	adds	r2, #32
  401a58:	4914      	ldr	r1, [pc, #80]	; (401aac <_pwm_init+0x140>)
  401a5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401a5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401a62:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  401a66:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  401a6a:	2b00      	cmp	r3, #0
  401a6c:	db09      	blt.n	401a82 <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a6e:	095a      	lsrs	r2, r3, #5
  401a70:	f003 031f 	and.w	r3, r3, #31
  401a74:	2101      	movs	r1, #1
  401a76:	fa01 f303 	lsl.w	r3, r1, r3
  401a7a:	3260      	adds	r2, #96	; 0x60
  401a7c:	490b      	ldr	r1, [pc, #44]	; (401aac <_pwm_init+0x140>)
  401a7e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  401a82:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  401a86:	2b00      	cmp	r3, #0
  401a88:	db08      	blt.n	401a9c <_pwm_init+0x130>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a8a:	0959      	lsrs	r1, r3, #5
  401a8c:	f003 031f 	and.w	r3, r3, #31
  401a90:	2201      	movs	r2, #1
  401a92:	fa02 f303 	lsl.w	r3, r2, r3
  401a96:	4a05      	ldr	r2, [pc, #20]	; (401aac <_pwm_init+0x140>)
  401a98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  401a9c:	2000      	movs	r0, #0
  401a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401aa0:	00405824 	.word	0x00405824
  401aa4:	00401161 	.word	0x00401161
  401aa8:	0040193d 	.word	0x0040193d
  401aac:	e000e100 	.word	0xe000e100

00401ab0 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  401ab0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  401ab2:	4604      	mov	r4, r0
  401ab4:	f240 129d 	movw	r2, #413	; 0x19d
  401ab8:	490b      	ldr	r1, [pc, #44]	; (401ae8 <_pwm_enable+0x38>)
  401aba:	3000      	adds	r0, #0
  401abc:	bf18      	it	ne
  401abe:	2001      	movne	r0, #1
  401ac0:	4b0a      	ldr	r3, [pc, #40]	; (401aec <_pwm_enable+0x3c>)
  401ac2:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  401ac4:	6920      	ldr	r0, [r4, #16]
  401ac6:	4b0a      	ldr	r3, [pc, #40]	; (401af0 <_pwm_enable+0x40>)
  401ac8:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401aca:	2300      	movs	r3, #0
  401acc:	e008      	b.n	401ae0 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  401ace:	6921      	ldr	r1, [r4, #16]
  401ad0:	6b05      	ldr	r5, [r0, #48]	; 0x30
  401ad2:	011a      	lsls	r2, r3, #4
  401ad4:	5cad      	ldrb	r5, [r5, r2]
  401ad6:	2201      	movs	r2, #1
  401ad8:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  401ada:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  401adc:	3301      	adds	r3, #1
  401ade:	b25b      	sxtb	r3, r3
  401ae0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401ae2:	4293      	cmp	r3, r2
  401ae4:	d3f3      	bcc.n	401ace <_pwm_enable+0x1e>
	}
}
  401ae6:	bd38      	pop	{r3, r4, r5, pc}
  401ae8:	00405824 	.word	0x00405824
  401aec:	00401161 	.word	0x00401161
  401af0:	0040193d 	.word	0x0040193d

00401af4 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  401af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401af6:	460d      	mov	r5, r1
  401af8:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  401afa:	4604      	mov	r4, r0
  401afc:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  401b00:	4911      	ldr	r1, [pc, #68]	; (401b48 <_pwm_set_param+0x54>)
  401b02:	2800      	cmp	r0, #0
  401b04:	bf18      	it	ne
  401b06:	42ae      	cmpne	r6, r5
  401b08:	bf34      	ite	cc
  401b0a:	2001      	movcc	r0, #1
  401b0c:	2000      	movcs	r0, #0
  401b0e:	4b0f      	ldr	r3, [pc, #60]	; (401b4c <_pwm_set_param+0x58>)
  401b10:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  401b12:	6920      	ldr	r0, [r4, #16]
  401b14:	4b0e      	ldr	r3, [pc, #56]	; (401b50 <_pwm_set_param+0x5c>)
  401b16:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401b18:	2300      	movs	r3, #0
  401b1a:	e010      	b.n	401b3e <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  401b1c:	6922      	ldr	r2, [r4, #16]
  401b1e:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401b20:	0119      	lsls	r1, r3, #4
  401b22:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  401b24:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  401b28:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  401b2c:	6922      	ldr	r2, [r4, #16]
  401b2e:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401b30:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  401b32:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  401b36:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  401b3a:	3301      	adds	r3, #1
  401b3c:	b2db      	uxtb	r3, r3
  401b3e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401b40:	4293      	cmp	r3, r2
  401b42:	d3eb      	bcc.n	401b1c <_pwm_set_param+0x28>
	}
}
  401b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401b46:	bf00      	nop
  401b48:	00405824 	.word	0x00405824
  401b4c:	00401161 	.word	0x00401161
  401b50:	0040193d 	.word	0x0040193d

00401b54 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  401b54:	b510      	push	{r4, lr}
	ASSERT(device);
  401b56:	4604      	mov	r4, r0
  401b58:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
  401b5c:	4907      	ldr	r1, [pc, #28]	; (401b7c <_pwm_is_enabled+0x28>)
  401b5e:	3000      	adds	r0, #0
  401b60:	bf18      	it	ne
  401b62:	2001      	movne	r0, #1
  401b64:	4b06      	ldr	r3, [pc, #24]	; (401b80 <_pwm_is_enabled+0x2c>)
  401b66:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  401b68:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  401b6a:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  401b6c:	f013 0f0f 	tst.w	r3, #15
  401b70:	d001      	beq.n	401b76 <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  401b72:	2001      	movs	r0, #1
	}
}
  401b74:	bd10      	pop	{r4, pc}
		return false;
  401b76:	2000      	movs	r0, #0
  401b78:	bd10      	pop	{r4, pc}
  401b7a:	bf00      	nop
  401b7c:	00405824 	.word	0x00405824
  401b80:	00401161 	.word	0x00401161

00401b84 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  401b84:	2000      	movs	r0, #0
  401b86:	4770      	bx	lr

00401b88 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  401b88:	4b03      	ldr	r3, [pc, #12]	; (401b98 <_system_time_init+0x10>)
  401b8a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  401b8e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  401b90:	2205      	movs	r2, #5
  401b92:	601a      	str	r2, [r3, #0]
  401b94:	4770      	bx	lr
  401b96:	bf00      	nop
  401b98:	e000e010 	.word	0xe000e010

00401b9c <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  401b9c:	b508      	push	{r3, lr}
	_system_time_init(hw);
  401b9e:	4b01      	ldr	r3, [pc, #4]	; (401ba4 <_delay_init+0x8>)
  401ba0:	4798      	blx	r3
  401ba2:	bd08      	pop	{r3, pc}
  401ba4:	00401b89 	.word	0x00401b89

00401ba8 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  401ba8:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  401baa:	e00d      	b.n	401bc8 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  401bac:	4b0d      	ldr	r3, [pc, #52]	; (401be4 <_delay_cycles+0x3c>)
  401bae:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401bb2:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401bb4:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401bb6:	4b0b      	ldr	r3, [pc, #44]	; (401be4 <_delay_cycles+0x3c>)
  401bb8:	681b      	ldr	r3, [r3, #0]
  401bba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401bbe:	d0fa      	beq.n	401bb6 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  401bc0:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  401bc4:	3101      	adds	r1, #1
	while (n--) {
  401bc6:	4610      	mov	r0, r2
  401bc8:	1e43      	subs	r3, r0, #1
  401bca:	b2da      	uxtb	r2, r3
  401bcc:	2800      	cmp	r0, #0
  401bce:	d1ed      	bne.n	401bac <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  401bd0:	4b04      	ldr	r3, [pc, #16]	; (401be4 <_delay_cycles+0x3c>)
  401bd2:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  401bd4:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401bd6:	4b03      	ldr	r3, [pc, #12]	; (401be4 <_delay_cycles+0x3c>)
  401bd8:	681b      	ldr	r3, [r3, #0]
  401bda:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401bde:	d0fa      	beq.n	401bd6 <_delay_cycles+0x2e>
		;
}
  401be0:	4770      	bx	lr
  401be2:	bf00      	nop
  401be4:	e000e010 	.word	0xe000e010

00401be8 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401be8:	2300      	movs	r3, #0
  401bea:	2b01      	cmp	r3, #1
  401bec:	d815      	bhi.n	401c1a <get_cfg+0x32>
{
  401bee:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401bf0:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401bf4:	008a      	lsls	r2, r1, #2
  401bf6:	490a      	ldr	r1, [pc, #40]	; (401c20 <get_cfg+0x38>)
  401bf8:	588a      	ldr	r2, [r1, r2]
  401bfa:	4282      	cmp	r2, r0
  401bfc:	d007      	beq.n	401c0e <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401bfe:	3301      	adds	r3, #1
  401c00:	b2db      	uxtb	r3, r3
  401c02:	2b01      	cmp	r3, #1
  401c04:	d9f4      	bls.n	401bf0 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  401c06:	2000      	movs	r0, #0
}
  401c08:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c0c:	4770      	bx	lr
			return &(_tcs[i]);
  401c0e:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401c12:	00a3      	lsls	r3, r4, #2
  401c14:	4608      	mov	r0, r1
  401c16:	4418      	add	r0, r3
  401c18:	e7f6      	b.n	401c08 <get_cfg+0x20>
	return NULL;
  401c1a:	2000      	movs	r0, #0
  401c1c:	4770      	bx	lr
  401c1e:	bf00      	nop
  401c20:	20400000 	.word	0x20400000

00401c24 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  401c24:	4b06      	ldr	r3, [pc, #24]	; (401c40 <_tc_init_irq_param+0x1c>)
  401c26:	4298      	cmp	r0, r3
  401c28:	d003      	beq.n	401c32 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  401c2a:	4b06      	ldr	r3, [pc, #24]	; (401c44 <_tc_init_irq_param+0x20>)
  401c2c:	4298      	cmp	r0, r3
  401c2e:	d003      	beq.n	401c38 <_tc_init_irq_param+0x14>
  401c30:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  401c32:	4b05      	ldr	r3, [pc, #20]	; (401c48 <_tc_init_irq_param+0x24>)
  401c34:	6019      	str	r1, [r3, #0]
  401c36:	e7f8      	b.n	401c2a <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  401c38:	4b03      	ldr	r3, [pc, #12]	; (401c48 <_tc_init_irq_param+0x24>)
  401c3a:	6059      	str	r1, [r3, #4]
	}
}
  401c3c:	e7f8      	b.n	401c30 <_tc_init_irq_param+0xc>
  401c3e:	bf00      	nop
  401c40:	4000c000 	.word	0x4000c000
  401c44:	40054000 	.word	0x40054000
  401c48:	2040038c 	.word	0x2040038c

00401c4c <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  401c4c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  401c4e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  401c50:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  401c52:	f013 0f10 	tst.w	r3, #16
  401c56:	d100      	bne.n	401c5a <tc_interrupt_handler+0xe>
  401c58:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  401c5a:	6803      	ldr	r3, [r0, #0]
  401c5c:	4798      	blx	r3
	}
}
  401c5e:	e7fb      	b.n	401c58 <tc_interrupt_handler+0xc>

00401c60 <_timer_init>:
{
  401c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401c64:	4606      	mov	r6, r0
  401c66:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  401c68:	4608      	mov	r0, r1
  401c6a:	4b2f      	ldr	r3, [pc, #188]	; (401d28 <_timer_init+0xc8>)
  401c6c:	4798      	blx	r3
  401c6e:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  401c70:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  401c74:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  401c78:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  401c7a:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  401c7e:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  401c80:	22c3      	movs	r2, #195	; 0xc3
  401c82:	492a      	ldr	r1, [pc, #168]	; (401d2c <_timer_init+0xcc>)
  401c84:	2001      	movs	r0, #1
  401c86:	4b2a      	ldr	r3, [pc, #168]	; (401d30 <_timer_init+0xd0>)
  401c88:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401c8a:	f248 0307 	movw	r3, #32775	; 0x8007
  401c8e:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  401c90:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  401c94:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401c98:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401c9c:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401c9e:	2300      	movs	r3, #0
  401ca0:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401ca2:	f248 020f 	movw	r2, #32783	; 0x800f
  401ca6:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  401ca8:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  401cac:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401cb0:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401cb4:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401cb6:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  401cb8:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  401cba:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  401cbe:	4631      	mov	r1, r6
  401cc0:	4620      	mov	r0, r4
  401cc2:	4b1c      	ldr	r3, [pc, #112]	; (401d34 <_timer_init+0xd4>)
  401cc4:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  401cc6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401cca:	2b00      	cmp	r3, #0
  401ccc:	db0d      	blt.n	401cea <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401cce:	095a      	lsrs	r2, r3, #5
  401cd0:	f003 031f 	and.w	r3, r3, #31
  401cd4:	2101      	movs	r1, #1
  401cd6:	fa01 f303 	lsl.w	r3, r1, r3
  401cda:	3220      	adds	r2, #32
  401cdc:	4916      	ldr	r1, [pc, #88]	; (401d38 <_timer_init+0xd8>)
  401cde:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401ce2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401ce6:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  401cea:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401cee:	2b00      	cmp	r3, #0
  401cf0:	db09      	blt.n	401d06 <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401cf2:	095a      	lsrs	r2, r3, #5
  401cf4:	f003 031f 	and.w	r3, r3, #31
  401cf8:	2101      	movs	r1, #1
  401cfa:	fa01 f303 	lsl.w	r3, r1, r3
  401cfe:	3260      	adds	r2, #96	; 0x60
  401d00:	490d      	ldr	r1, [pc, #52]	; (401d38 <_timer_init+0xd8>)
  401d02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  401d06:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401d0a:	2b00      	cmp	r3, #0
  401d0c:	db08      	blt.n	401d20 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401d0e:	0959      	lsrs	r1, r3, #5
  401d10:	f003 031f 	and.w	r3, r3, #31
  401d14:	2201      	movs	r2, #1
  401d16:	fa02 f303 	lsl.w	r3, r2, r3
  401d1a:	4a07      	ldr	r2, [pc, #28]	; (401d38 <_timer_init+0xd8>)
  401d1c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  401d20:	2000      	movs	r0, #0
  401d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401d26:	bf00      	nop
  401d28:	00401be9 	.word	0x00401be9
  401d2c:	0040583c 	.word	0x0040583c
  401d30:	00401161 	.word	0x00401161
  401d34:	00401c25 	.word	0x00401c25
  401d38:	e000e100 	.word	0xe000e100

00401d3c <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  401d3c:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  401d3e:	2305      	movs	r3, #5
  401d40:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  401d42:	68c2      	ldr	r2, [r0, #12]
  401d44:	6413      	str	r3, [r2, #64]	; 0x40
  401d46:	4770      	bx	lr

00401d48 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  401d48:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  401d4a:	6a13      	ldr	r3, [r2, #32]
  401d4c:	f3c3 4300 	ubfx	r3, r3, #16, #1
  401d50:	6e10      	ldr	r0, [r2, #96]	; 0x60
  401d52:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  401d56:	4318      	orrs	r0, r3
  401d58:	4770      	bx	lr

00401d5a <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  401d5a:	2000      	movs	r0, #0
  401d5c:	4770      	bx	lr
	...

00401d60 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  401d60:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  401d62:	4b02      	ldr	r3, [pc, #8]	; (401d6c <TC0_Handler+0xc>)
  401d64:	6818      	ldr	r0, [r3, #0]
  401d66:	4b02      	ldr	r3, [pc, #8]	; (401d70 <TC0_Handler+0x10>)
  401d68:	4798      	blx	r3
  401d6a:	bd08      	pop	{r3, pc}
  401d6c:	2040038c 	.word	0x2040038c
  401d70:	00401c4d 	.word	0x00401c4d

00401d74 <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  401d74:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  401d76:	4b02      	ldr	r3, [pc, #8]	; (401d80 <TC9_Handler+0xc>)
  401d78:	6858      	ldr	r0, [r3, #4]
  401d7a:	4b02      	ldr	r3, [pc, #8]	; (401d84 <TC9_Handler+0x10>)
  401d7c:	4798      	blx	r3
  401d7e:	bd08      	pop	{r3, pc}
  401d80:	2040038c 	.word	0x2040038c
  401d84:	00401c4d 	.word	0x00401c4d

00401d88 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  401d88:	b510      	push	{r4, lr}
	ASSERT(hw);
  401d8a:	4604      	mov	r4, r0
  401d8c:	f240 222b 	movw	r2, #555	; 0x22b
  401d90:	4905      	ldr	r1, [pc, #20]	; (401da8 <_usart_get_hardware_index+0x20>)
  401d92:	3000      	adds	r0, #0
  401d94:	bf18      	it	ne
  401d96:	2001      	movne	r0, #1
  401d98:	4b04      	ldr	r3, [pc, #16]	; (401dac <_usart_get_hardware_index+0x24>)
  401d9a:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  401d9c:	4804      	ldr	r0, [pc, #16]	; (401db0 <_usart_get_hardware_index+0x28>)
  401d9e:	4420      	add	r0, r4
}
  401da0:	f3c0 3087 	ubfx	r0, r0, #14, #8
  401da4:	bd10      	pop	{r4, pc}
  401da6:	bf00      	nop
  401da8:	0040585c 	.word	0x0040585c
  401dac:	00401161 	.word	0x00401161
  401db0:	bffdc000 	.word	0xbffdc000

00401db4 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  401db4:	b510      	push	{r4, lr}
	ASSERT(hw);
  401db6:	4604      	mov	r4, r0
  401db8:	f240 2287 	movw	r2, #647	; 0x287
  401dbc:	490e      	ldr	r1, [pc, #56]	; (401df8 <_get_usart_index+0x44>)
  401dbe:	3000      	adds	r0, #0
  401dc0:	bf18      	it	ne
  401dc2:	2001      	movne	r0, #1
  401dc4:	4b0d      	ldr	r3, [pc, #52]	; (401dfc <_get_usart_index+0x48>)
  401dc6:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  401dc8:	4620      	mov	r0, r4
  401dca:	4b0d      	ldr	r3, [pc, #52]	; (401e00 <_get_usart_index+0x4c>)
  401dcc:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401dce:	2300      	movs	r3, #0
  401dd0:	b143      	cbz	r3, 401de4 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  401dd2:	f240 2291 	movw	r2, #657	; 0x291
  401dd6:	4908      	ldr	r1, [pc, #32]	; (401df8 <_get_usart_index+0x44>)
  401dd8:	2000      	movs	r0, #0
  401dda:	4b08      	ldr	r3, [pc, #32]	; (401dfc <_get_usart_index+0x48>)
  401ddc:	4798      	blx	r3
	return 0;
  401dde:	2300      	movs	r3, #0
}
  401de0:	4618      	mov	r0, r3
  401de2:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  401de4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401de8:	008a      	lsls	r2, r1, #2
  401dea:	4906      	ldr	r1, [pc, #24]	; (401e04 <_get_usart_index+0x50>)
  401dec:	5c8a      	ldrb	r2, [r1, r2]
  401dee:	4290      	cmp	r0, r2
  401df0:	d0f6      	beq.n	401de0 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401df2:	3301      	adds	r3, #1
  401df4:	b2db      	uxtb	r3, r3
  401df6:	e7eb      	b.n	401dd0 <_get_usart_index+0x1c>
  401df8:	0040585c 	.word	0x0040585c
  401dfc:	00401161 	.word	0x00401161
  401e00:	00401d89 	.word	0x00401d89
  401e04:	00405850 	.word	0x00405850

00401e08 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  401e08:	b510      	push	{r4, lr}
	ASSERT(hw);
  401e0a:	4604      	mov	r4, r0
  401e0c:	f240 229e 	movw	r2, #670	; 0x29e
  401e10:	4911      	ldr	r1, [pc, #68]	; (401e58 <_usart_init+0x50>)
  401e12:	3000      	adds	r0, #0
  401e14:	bf18      	it	ne
  401e16:	2001      	movne	r0, #1
  401e18:	4b10      	ldr	r3, [pc, #64]	; (401e5c <_usart_init+0x54>)
  401e1a:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  401e1c:	4620      	mov	r0, r4
  401e1e:	4b10      	ldr	r3, [pc, #64]	; (401e60 <_usart_init+0x58>)
  401e20:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  401e22:	4b10      	ldr	r3, [pc, #64]	; (401e64 <_usart_init+0x5c>)
  401e24:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  401e28:	2300      	movs	r3, #0
  401e2a:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  401e2c:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  401e2e:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  401e30:	22ac      	movs	r2, #172	; 0xac
  401e32:	6022      	str	r2, [r4, #0]
  401e34:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e38:	6022      	str	r2, [r4, #0]
  401e3a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401e3e:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  401e40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401e44:	0081      	lsls	r1, r0, #2
  401e46:	4a08      	ldr	r2, [pc, #32]	; (401e68 <_usart_init+0x60>)
  401e48:	440a      	add	r2, r1
  401e4a:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  401e4c:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  401e4e:	4a07      	ldr	r2, [pc, #28]	; (401e6c <_usart_init+0x64>)
  401e50:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  401e52:	4618      	mov	r0, r3
  401e54:	bd10      	pop	{r4, pc}
  401e56:	bf00      	nop
  401e58:	0040585c 	.word	0x0040585c
  401e5c:	00401161 	.word	0x00401161
  401e60:	00401db5 	.word	0x00401db5
  401e64:	55534100 	.word	0x55534100
  401e68:	00405850 	.word	0x00405850
  401e6c:	000100f4 	.word	0x000100f4

00401e70 <_usart_sync_init>:
{
  401e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e72:	460c      	mov	r4, r1
	ASSERT(device);
  401e74:	4e09      	ldr	r6, [pc, #36]	; (401e9c <_usart_sync_init+0x2c>)
  401e76:	4607      	mov	r7, r0
  401e78:	22bd      	movs	r2, #189	; 0xbd
  401e7a:	4631      	mov	r1, r6
  401e7c:	3000      	adds	r0, #0
  401e7e:	bf18      	it	ne
  401e80:	2001      	movne	r0, #1
  401e82:	4d07      	ldr	r5, [pc, #28]	; (401ea0 <_usart_sync_init+0x30>)
  401e84:	47a8      	blx	r5
	ASSERT(hw);
  401e86:	22be      	movs	r2, #190	; 0xbe
  401e88:	4631      	mov	r1, r6
  401e8a:	1c20      	adds	r0, r4, #0
  401e8c:	bf18      	it	ne
  401e8e:	2001      	movne	r0, #1
  401e90:	47a8      	blx	r5
	device->hw = hw;
  401e92:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  401e94:	4620      	mov	r0, r4
  401e96:	4b03      	ldr	r3, [pc, #12]	; (401ea4 <_usart_sync_init+0x34>)
  401e98:	4798      	blx	r3
}
  401e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401e9c:	0040585c 	.word	0x0040585c
  401ea0:	00401161 	.word	0x00401161
  401ea4:	00401e09 	.word	0x00401e09

00401ea8 <_usart_sync_enable>:
{
  401ea8:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  401eaa:	4e0a      	ldr	r6, [pc, #40]	; (401ed4 <_usart_sync_enable+0x2c>)
  401eac:	4604      	mov	r4, r0
  401eae:	f240 1205 	movw	r2, #261	; 0x105
  401eb2:	4631      	mov	r1, r6
  401eb4:	3000      	adds	r0, #0
  401eb6:	bf18      	it	ne
  401eb8:	2001      	movne	r0, #1
  401eba:	4d07      	ldr	r5, [pc, #28]	; (401ed8 <_usart_sync_enable+0x30>)
  401ebc:	47a8      	blx	r5
	_usart_enable(device->hw);
  401ebe:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  401ec0:	f240 22c7 	movw	r2, #711	; 0x2c7
  401ec4:	4631      	mov	r1, r6
  401ec6:	1c20      	adds	r0, r4, #0
  401ec8:	bf18      	it	ne
  401eca:	2001      	movne	r0, #1
  401ecc:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  401ece:	2350      	movs	r3, #80	; 0x50
  401ed0:	6023      	str	r3, [r4, #0]
  401ed2:	bd70      	pop	{r4, r5, r6, pc}
  401ed4:	0040585c 	.word	0x0040585c
  401ed8:	00401161 	.word	0x00401161

00401edc <_usart_sync_write_byte>:
{
  401edc:	b538      	push	{r3, r4, r5, lr}
  401ede:	460c      	mov	r4, r1
	ASSERT(device);
  401ee0:	4605      	mov	r5, r0
  401ee2:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  401ee6:	4904      	ldr	r1, [pc, #16]	; (401ef8 <_usart_sync_write_byte+0x1c>)
  401ee8:	3000      	adds	r0, #0
  401eea:	bf18      	it	ne
  401eec:	2001      	movne	r0, #1
  401eee:	4b03      	ldr	r3, [pc, #12]	; (401efc <_usart_sync_write_byte+0x20>)
  401ef0:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  401ef2:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  401ef4:	61dc      	str	r4, [r3, #28]
  401ef6:	bd38      	pop	{r3, r4, r5, pc}
  401ef8:	0040585c 	.word	0x0040585c
  401efc:	00401161 	.word	0x00401161

00401f00 <_usart_sync_read_byte>:
{
  401f00:	b510      	push	{r4, lr}
	ASSERT(device);
  401f02:	4604      	mov	r4, r0
  401f04:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  401f08:	4904      	ldr	r1, [pc, #16]	; (401f1c <_usart_sync_read_byte+0x1c>)
  401f0a:	3000      	adds	r0, #0
  401f0c:	bf18      	it	ne
  401f0e:	2001      	movne	r0, #1
  401f10:	4b03      	ldr	r3, [pc, #12]	; (401f20 <_usart_sync_read_byte+0x20>)
  401f12:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  401f14:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  401f16:	6998      	ldr	r0, [r3, #24]
}
  401f18:	b2c0      	uxtb	r0, r0
  401f1a:	bd10      	pop	{r4, pc}
  401f1c:	0040585c 	.word	0x0040585c
  401f20:	00401161 	.word	0x00401161

00401f24 <_usart_sync_is_ready_to_send>:
{
  401f24:	b510      	push	{r4, lr}
	ASSERT(device);
  401f26:	4604      	mov	r4, r0
  401f28:	f240 12c3 	movw	r2, #451	; 0x1c3
  401f2c:	4905      	ldr	r1, [pc, #20]	; (401f44 <_usart_sync_is_ready_to_send+0x20>)
  401f2e:	3000      	adds	r0, #0
  401f30:	bf18      	it	ne
  401f32:	2001      	movne	r0, #1
  401f34:	4b04      	ldr	r3, [pc, #16]	; (401f48 <_usart_sync_is_ready_to_send+0x24>)
  401f36:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  401f38:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  401f3a:	6958      	ldr	r0, [r3, #20]
}
  401f3c:	f3c0 0040 	ubfx	r0, r0, #1, #1
  401f40:	bd10      	pop	{r4, pc}
  401f42:	bf00      	nop
  401f44:	0040585c 	.word	0x0040585c
  401f48:	00401161 	.word	0x00401161

00401f4c <_usart_sync_is_transmit_done>:
{
  401f4c:	b510      	push	{r4, lr}
	ASSERT(device);
  401f4e:	4604      	mov	r4, r0
  401f50:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  401f54:	4905      	ldr	r1, [pc, #20]	; (401f6c <_usart_sync_is_transmit_done+0x20>)
  401f56:	3000      	adds	r0, #0
  401f58:	bf18      	it	ne
  401f5a:	2001      	movne	r0, #1
  401f5c:	4b04      	ldr	r3, [pc, #16]	; (401f70 <_usart_sync_is_transmit_done+0x24>)
  401f5e:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  401f60:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  401f62:	6958      	ldr	r0, [r3, #20]
}
  401f64:	f3c0 2040 	ubfx	r0, r0, #9, #1
  401f68:	bd10      	pop	{r4, pc}
  401f6a:	bf00      	nop
  401f6c:	0040585c 	.word	0x0040585c
  401f70:	00401161 	.word	0x00401161

00401f74 <_usart_sync_is_byte_received>:
{
  401f74:	b510      	push	{r4, lr}
	ASSERT(device);
  401f76:	4604      	mov	r4, r0
  401f78:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401f7c:	4905      	ldr	r1, [pc, #20]	; (401f94 <_usart_sync_is_byte_received+0x20>)
  401f7e:	3000      	adds	r0, #0
  401f80:	bf18      	it	ne
  401f82:	2001      	movne	r0, #1
  401f84:	4b04      	ldr	r3, [pc, #16]	; (401f98 <_usart_sync_is_byte_received+0x24>)
  401f86:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  401f88:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  401f8a:	6958      	ldr	r0, [r3, #20]
  401f8c:	f000 0001 	and.w	r0, r0, #1
}
  401f90:	bd10      	pop	{r4, pc}
  401f92:	bf00      	nop
  401f94:	0040585c 	.word	0x0040585c
  401f98:	00401161 	.word	0x00401161

00401f9c <_usart_get_usart_sync>:
}
  401f9c:	2000      	movs	r0, #0
  401f9e:	4770      	bx	lr

00401fa0 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  401fa0:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  401fa2:	2300      	movs	r3, #0
  401fa4:	e004      	b.n	401fb0 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  401fa6:	0199      	lsls	r1, r3, #6
  401fa8:	4a16      	ldr	r2, [pc, #88]	; (402004 <_dma_init+0x64>)
  401faa:	5852      	ldr	r2, [r2, r1]
  401fac:	3301      	adds	r3, #1
  401fae:	b2db      	uxtb	r3, r3
  401fb0:	2b17      	cmp	r3, #23
  401fb2:	d9f8      	bls.n	401fa6 <_dma_init+0x6>
  401fb4:	2300      	movs	r3, #0
  401fb6:	e014      	b.n	401fe2 <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  401fb8:	4c13      	ldr	r4, [pc, #76]	; (402008 <_dma_init+0x68>)
  401fba:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  401fbe:	2100      	movs	r1, #0
  401fc0:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  401fc2:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  401fc4:	1c98      	adds	r0, r3, #2
  401fc6:	0180      	lsls	r0, r0, #6
  401fc8:	1825      	adds	r5, r4, r0
  401fca:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  401fcc:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  401fce:	490f      	ldr	r1, [pc, #60]	; (40200c <_dma_init+0x6c>)
  401fd0:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  401fd4:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  401fd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  401fda:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  401fdc:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  401fde:	3301      	adds	r3, #1
  401fe0:	b2db      	uxtb	r3, r3
  401fe2:	2b17      	cmp	r3, #23
  401fe4:	d9e8      	bls.n	401fb8 <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401fe6:	4b0a      	ldr	r3, [pc, #40]	; (402010 <_dma_init+0x70>)
  401fe8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  401ff0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401ff4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ff8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ffc:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  401ffe:	2000      	movs	r0, #0
  402000:	bc30      	pop	{r4, r5}
  402002:	4770      	bx	lr
  402004:	4007805c 	.word	0x4007805c
  402008:	40078000 	.word	0x40078000
  40200c:	00405878 	.word	0x00405878
  402010:	e000e100 	.word	0xe000e100

00402014 <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  402014:	0180      	lsls	r0, r0, #6
  402016:	4b02      	ldr	r3, [pc, #8]	; (402020 <_dma_set_destination_address+0xc>)
  402018:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  40201a:	2000      	movs	r0, #0
  40201c:	4770      	bx	lr
  40201e:	bf00      	nop
  402020:	40078064 	.word	0x40078064

00402024 <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  402024:	0180      	lsls	r0, r0, #6
  402026:	4b02      	ldr	r3, [pc, #8]	; (402030 <_dma_set_source_address+0xc>)
  402028:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  40202a:	2000      	movs	r0, #0
  40202c:	4770      	bx	lr
  40202e:	bf00      	nop
  402030:	40078060 	.word	0x40078060

00402034 <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  402034:	0180      	lsls	r0, r0, #6
  402036:	4a04      	ldr	r2, [pc, #16]	; (402048 <_dma_set_data_amount+0x14>)
  402038:	4402      	add	r2, r0
  40203a:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  40203c:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  402040:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  402042:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  402044:	2000      	movs	r0, #0
  402046:	4770      	bx	lr
  402048:	40078000 	.word	0x40078000

0040204c <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  40204c:	2301      	movs	r3, #1
  40204e:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  402052:	4b03      	ldr	r3, [pc, #12]	; (402060 <_dma_enable_transaction+0x14>)
  402054:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  402056:	b101      	cbz	r1, 40205a <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  402058:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  40205a:	2000      	movs	r0, #0
  40205c:	4770      	bx	lr
  40205e:	bf00      	nop
  402060:	40078000 	.word	0x40078000

00402064 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  402064:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  402068:	008a      	lsls	r2, r1, #2
  40206a:	4b02      	ldr	r3, [pc, #8]	; (402074 <_dma_get_channel_resource+0x10>)
  40206c:	4413      	add	r3, r2
  40206e:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  402070:	2000      	movs	r0, #0
  402072:	4770      	bx	lr
  402074:	20400394 	.word	0x20400394

00402078 <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  402078:	b19a      	cbz	r2, 4020a2 <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  40207a:	b951      	cbnz	r1, 402092 <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  40207c:	0182      	lsls	r2, r0, #6
  40207e:	4b13      	ldr	r3, [pc, #76]	; (4020cc <_dma_set_irq_state+0x54>)
  402080:	4413      	add	r3, r2
  402082:	2201      	movs	r2, #1
  402084:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  402086:	2301      	movs	r3, #1
  402088:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  40208c:	4b0f      	ldr	r3, [pc, #60]	; (4020cc <_dma_set_irq_state+0x54>)
  40208e:	60d8      	str	r0, [r3, #12]
  402090:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  402092:	2901      	cmp	r1, #1
  402094:	d1f7      	bne.n	402086 <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  402096:	0182      	lsls	r2, r0, #6
  402098:	4b0c      	ldr	r3, [pc, #48]	; (4020cc <_dma_set_irq_state+0x54>)
  40209a:	4413      	add	r3, r2
  40209c:	2270      	movs	r2, #112	; 0x70
  40209e:	651a      	str	r2, [r3, #80]	; 0x50
  4020a0:	e7f1      	b.n	402086 <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  4020a2:	b951      	cbnz	r1, 4020ba <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4020a4:	0182      	lsls	r2, r0, #6
  4020a6:	4b09      	ldr	r3, [pc, #36]	; (4020cc <_dma_set_irq_state+0x54>)
  4020a8:	4413      	add	r3, r2
  4020aa:	2201      	movs	r2, #1
  4020ac:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  4020ae:	2301      	movs	r3, #1
  4020b0:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  4020b4:	4b05      	ldr	r3, [pc, #20]	; (4020cc <_dma_set_irq_state+0x54>)
  4020b6:	6118      	str	r0, [r3, #16]
  4020b8:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4020ba:	2901      	cmp	r1, #1
  4020bc:	d1f7      	bne.n	4020ae <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4020be:	0182      	lsls	r2, r0, #6
  4020c0:	4b02      	ldr	r3, [pc, #8]	; (4020cc <_dma_set_irq_state+0x54>)
  4020c2:	4413      	add	r3, r2
  4020c4:	2270      	movs	r2, #112	; 0x70
  4020c6:	655a      	str	r2, [r3, #84]	; 0x54
  4020c8:	e7f1      	b.n	4020ae <_dma_set_irq_state+0x36>
  4020ca:	bf00      	nop
  4020cc:	40078000 	.word	0x40078000

004020d0 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  4020d0:	4b17      	ldr	r3, [pc, #92]	; (402130 <XDMAC_Handler+0x60>)
  4020d2:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4020d4:	2300      	movs	r3, #0
  4020d6:	2b17      	cmp	r3, #23
  4020d8:	d81b      	bhi.n	402112 <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  4020da:	fa21 f203 	lsr.w	r2, r1, r3
  4020de:	f012 0f01 	tst.w	r2, #1
  4020e2:	d102      	bne.n	4020ea <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4020e4:	3301      	adds	r3, #1
  4020e6:	b2db      	uxtb	r3, r3
  4020e8:	e7f5      	b.n	4020d6 <XDMAC_Handler+0x6>
			channel = i;
  4020ea:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  4020ec:	2b00      	cmp	r3, #0
  4020ee:	db1d      	blt.n	40212c <XDMAC_Handler+0x5c>
{
  4020f0:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  4020f2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  4020f6:	0090      	lsls	r0, r2, #2
  4020f8:	4a0e      	ldr	r2, [pc, #56]	; (402134 <XDMAC_Handler+0x64>)
  4020fa:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  4020fc:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  4020fe:	0189      	lsls	r1, r1, #6
  402100:	4a0d      	ldr	r2, [pc, #52]	; (402138 <XDMAC_Handler+0x68>)
  402102:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  402104:	f012 0f70 	tst.w	r2, #112	; 0x70
  402108:	d106      	bne.n	402118 <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  40210a:	f012 0f01 	tst.w	r2, #1
  40210e:	d106      	bne.n	40211e <XDMAC_Handler+0x4e>
  402110:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  402112:	f04f 33ff 	mov.w	r3, #4294967295
  402116:	e7e9      	b.n	4020ec <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  402118:	6843      	ldr	r3, [r0, #4]
  40211a:	4798      	blx	r3
  40211c:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  40211e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  402122:	00a3      	lsls	r3, r4, #2
  402124:	4a03      	ldr	r2, [pc, #12]	; (402134 <XDMAC_Handler+0x64>)
  402126:	58d3      	ldr	r3, [r2, r3]
  402128:	4798      	blx	r3
  40212a:	e7f1      	b.n	402110 <XDMAC_Handler+0x40>
  40212c:	4770      	bx	lr
  40212e:	bf00      	nop
  402130:	40078000 	.word	0x40078000
  402134:	20400394 	.word	0x20400394
  402138:	4007805c 	.word	0x4007805c

0040213c <main>:




int main(void)
{
  40213c:	b580      	push	{r7, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  40213e:	4b15      	ldr	r3, [pc, #84]	; (402194 <main+0x58>)
  402140:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  402142:	f44f 7280 	mov.w	r2, #256	; 0x100
  402146:	4b14      	ldr	r3, [pc, #80]	; (402198 <main+0x5c>)
  402148:	631a      	str	r2, [r3, #48]	; 0x30
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
		
	gpio_set_pin_level(PIN_USER_LED, true);
	dma_adc_init();
  40214a:	4b14      	ldr	r3, [pc, #80]	; (40219c <main+0x60>)
  40214c:	4798      	blx	r3
	
	pwm_enable_all();
  40214e:	4b14      	ldr	r3, [pc, #80]	; (4021a0 <main+0x64>)
  402150:	4798      	blx	r3
	adc_enable_all();
  402152:	4b14      	ldr	r3, [pc, #80]	; (4021a4 <main+0x68>)
  402154:	4798      	blx	r3
  402156:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40215a:	4b13      	ldr	r3, [pc, #76]	; (4021a8 <main+0x6c>)
  40215c:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);
	
	timer_start(&ENCODER_A);
  40215e:	4813      	ldr	r0, [pc, #76]	; (4021ac <main+0x70>)
  402160:	4c13      	ldr	r4, [pc, #76]	; (4021b0 <main+0x74>)
  402162:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  402164:	4813      	ldr	r0, [pc, #76]	; (4021b4 <main+0x78>)
  402166:	47a0      	blx	r4
  402168:	4d0b      	ldr	r5, [pc, #44]	; (402198 <main+0x5c>)
  40216a:	f44f 7680 	mov.w	r6, #256	; 0x100
  40216e:	632e      	str	r6, [r5, #48]	; 0x30

	/* Replace with your application code */
	while (1) {
		
		gpio_set_pin_level(PIN_USER_LED,true);
		delay_ms(500);
  402170:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402174:	4c10      	ldr	r4, [pc, #64]	; (4021b8 <main+0x7c>)
  402176:	47a0      	blx	r4
		
		dma_adc_0_enable_for_one_transaction();
  402178:	4b10      	ldr	r3, [pc, #64]	; (4021bc <main+0x80>)
  40217a:	4798      	blx	r3
		dma_adc_1_enable_for_one_transaction();
  40217c:	4b10      	ldr	r3, [pc, #64]	; (4021c0 <main+0x84>)
  40217e:	4798      	blx	r3
		adc_async_start_conversion(&ADC_0);
  402180:	4810      	ldr	r0, [pc, #64]	; (4021c4 <main+0x88>)
  402182:	4f11      	ldr	r7, [pc, #68]	; (4021c8 <main+0x8c>)
  402184:	47b8      	blx	r7
		adc_async_start_conversion(&ADC_1);
  402186:	4811      	ldr	r0, [pc, #68]	; (4021cc <main+0x90>)
  402188:	47b8      	blx	r7
	((Pio *)hw)->PIO_CODR = mask;
  40218a:	636e      	str	r6, [r5, #52]	; 0x34
		//printf("main - %i %i %i %i %i %i %i %i %i %i %i %i  \n", (int)afec_buf[0],(int)afec_buf[1],(int)afec_buf[2],(int)afec_buf[3],(int)afec_buf[4],(int)afec_buf[5],(int)afec_buf[6],(int)afec_buf[7],(int)afec_buf[8],(int)afec_buf[9],(int)afec_buf[10],(int)afec_buf[11]);
		//AFEC0_Handler

		gpio_set_pin_level(PIN_USER_LED,false);
		delay_ms(500);
  40218c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402190:	47a0      	blx	r4
  402192:	e7e9      	b.n	402168 <main+0x2c>
  402194:	004001d5 	.word	0x004001d5
  402198:	400e1200 	.word	0x400e1200
  40219c:	0040033d 	.word	0x0040033d
  4021a0:	00400481 	.word	0x00400481
  4021a4:	00400429 	.word	0x00400429
  4021a8:	400e0e00 	.word	0x400e0e00
  4021ac:	2040059c 	.word	0x2040059c
  4021b0:	00400fe1 	.word	0x00400fe1
  4021b4:	204004ec 	.word	0x204004ec
  4021b8:	00400d31 	.word	0x00400d31
  4021bc:	004003d1 	.word	0x004003d1
  4021c0:	004003fd 	.word	0x004003fd
  4021c4:	204005b8 	.word	0x204005b8
  4021c8:	00400cd9 	.word	0x00400cd9
  4021cc:	20400690 	.word	0x20400690

004021d0 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  4021d0:	b958      	cbnz	r0, 4021ea <_read+0x1a>
{
  4021d2:	b508      	push	{r3, lr}
  4021d4:	460b      	mov	r3, r1
  4021d6:	4611      	mov	r1, r2
  4021d8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  4021da:	4b05      	ldr	r3, [pc, #20]	; (4021f0 <_read+0x20>)
  4021dc:	4798      	blx	r3
	if (n < 0) {
  4021de:	2800      	cmp	r0, #0
  4021e0:	db00      	blt.n	4021e4 <_read+0x14>
		return -1;
	}

	return n;
}
  4021e2:	bd08      	pop	{r3, pc}
		return -1;
  4021e4:	f04f 30ff 	mov.w	r0, #4294967295
  4021e8:	bd08      	pop	{r3, pc}
		return -1;
  4021ea:	f04f 30ff 	mov.w	r0, #4294967295
  4021ee:	4770      	bx	lr
  4021f0:	00402249 	.word	0x00402249

004021f4 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  4021f4:	3801      	subs	r0, #1
  4021f6:	2802      	cmp	r0, #2
  4021f8:	d80b      	bhi.n	402212 <_write+0x1e>
{
  4021fa:	b508      	push	{r3, lr}
  4021fc:	460b      	mov	r3, r1
  4021fe:	4611      	mov	r1, r2
  402200:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  402202:	4b05      	ldr	r3, [pc, #20]	; (402218 <_write+0x24>)
  402204:	4798      	blx	r3
	if (n < 0) {
  402206:	2800      	cmp	r0, #0
  402208:	db00      	blt.n	40220c <_write+0x18>
		return -1;
	}

	return n;
}
  40220a:	bd08      	pop	{r3, pc}
		return -1;
  40220c:	f04f 30ff 	mov.w	r0, #4294967295
  402210:	bd08      	pop	{r3, pc}
		return -1;
  402212:	f04f 30ff 	mov.w	r0, #4294967295
  402216:	4770      	bx	lr
  402218:	0040226d 	.word	0x0040226d

0040221c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  40221c:	b570      	push	{r4, r5, r6, lr}
  40221e:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  402220:	4d06      	ldr	r5, [pc, #24]	; (40223c <stdio_io_init+0x20>)
  402222:	682b      	ldr	r3, [r5, #0]
  402224:	2100      	movs	r1, #0
  402226:	6898      	ldr	r0, [r3, #8]
  402228:	4c05      	ldr	r4, [pc, #20]	; (402240 <stdio_io_init+0x24>)
  40222a:	47a0      	blx	r4
	setbuf(stdin, NULL);
  40222c:	682b      	ldr	r3, [r5, #0]
  40222e:	2100      	movs	r1, #0
  402230:	6858      	ldr	r0, [r3, #4]
  402232:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  402234:	4b03      	ldr	r3, [pc, #12]	; (402244 <stdio_io_init+0x28>)
  402236:	601e      	str	r6, [r3, #0]
  402238:	bd70      	pop	{r4, r5, r6, pc}
  40223a:	bf00      	nop
  40223c:	20400048 	.word	0x20400048
  402240:	00403501 	.word	0x00403501
  402244:	204004b4 	.word	0x204004b4

00402248 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  402248:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40224a:	4b06      	ldr	r3, [pc, #24]	; (402264 <stdio_io_read+0x1c>)
  40224c:	681b      	ldr	r3, [r3, #0]
  40224e:	b133      	cbz	r3, 40225e <stdio_io_read+0x16>
  402250:	460a      	mov	r2, r1
  402252:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  402254:	b292      	uxth	r2, r2
  402256:	4618      	mov	r0, r3
  402258:	4b03      	ldr	r3, [pc, #12]	; (402268 <stdio_io_read+0x20>)
  40225a:	4798      	blx	r3
  40225c:	bd08      	pop	{r3, pc}
		return 0;
  40225e:	2000      	movs	r0, #0
}
  402260:	bd08      	pop	{r3, pc}
  402262:	bf00      	nop
  402264:	204004b4 	.word	0x204004b4
  402268:	00400df9 	.word	0x00400df9

0040226c <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  40226c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40226e:	4b06      	ldr	r3, [pc, #24]	; (402288 <stdio_io_write+0x1c>)
  402270:	681b      	ldr	r3, [r3, #0]
  402272:	b133      	cbz	r3, 402282 <stdio_io_write+0x16>
  402274:	460a      	mov	r2, r1
  402276:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  402278:	b292      	uxth	r2, r2
  40227a:	4618      	mov	r0, r3
  40227c:	4b03      	ldr	r3, [pc, #12]	; (40228c <stdio_io_write+0x20>)
  40227e:	4798      	blx	r3
  402280:	bd08      	pop	{r3, pc}
		return 0;
  402282:	2000      	movs	r0, #0
}
  402284:	bd08      	pop	{r3, pc}
  402286:	bf00      	nop
  402288:	204004b4 	.word	0x204004b4
  40228c:	00400dc9 	.word	0x00400dc9

00402290 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  402290:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  402292:	4c04      	ldr	r4, [pc, #16]	; (4022a4 <stdio_redirect_init+0x14>)
  402294:	4620      	mov	r0, r4
  402296:	4b04      	ldr	r3, [pc, #16]	; (4022a8 <stdio_redirect_init+0x18>)
  402298:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  40229a:	4620      	mov	r0, r4
  40229c:	4b03      	ldr	r3, [pc, #12]	; (4022ac <stdio_redirect_init+0x1c>)
  40229e:	4798      	blx	r3
  4022a0:	bd10      	pop	{r4, pc}
  4022a2:	bf00      	nop
  4022a4:	20400590 	.word	0x20400590
  4022a8:	00401135 	.word	0x00401135
  4022ac:	0040221d 	.word	0x0040221d

004022b0 <__aeabi_drsub>:
  4022b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4022b4:	e002      	b.n	4022bc <__adddf3>
  4022b6:	bf00      	nop

004022b8 <__aeabi_dsub>:
  4022b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004022bc <__adddf3>:
  4022bc:	b530      	push	{r4, r5, lr}
  4022be:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4022c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4022c6:	ea94 0f05 	teq	r4, r5
  4022ca:	bf08      	it	eq
  4022cc:	ea90 0f02 	teqeq	r0, r2
  4022d0:	bf1f      	itttt	ne
  4022d2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4022d6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4022da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4022de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4022e2:	f000 80e2 	beq.w	4024aa <__adddf3+0x1ee>
  4022e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4022ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4022ee:	bfb8      	it	lt
  4022f0:	426d      	neglt	r5, r5
  4022f2:	dd0c      	ble.n	40230e <__adddf3+0x52>
  4022f4:	442c      	add	r4, r5
  4022f6:	ea80 0202 	eor.w	r2, r0, r2
  4022fa:	ea81 0303 	eor.w	r3, r1, r3
  4022fe:	ea82 0000 	eor.w	r0, r2, r0
  402302:	ea83 0101 	eor.w	r1, r3, r1
  402306:	ea80 0202 	eor.w	r2, r0, r2
  40230a:	ea81 0303 	eor.w	r3, r1, r3
  40230e:	2d36      	cmp	r5, #54	; 0x36
  402310:	bf88      	it	hi
  402312:	bd30      	pophi	{r4, r5, pc}
  402314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402318:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40231c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402324:	d002      	beq.n	40232c <__adddf3+0x70>
  402326:	4240      	negs	r0, r0
  402328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40232c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402330:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402338:	d002      	beq.n	402340 <__adddf3+0x84>
  40233a:	4252      	negs	r2, r2
  40233c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402340:	ea94 0f05 	teq	r4, r5
  402344:	f000 80a7 	beq.w	402496 <__adddf3+0x1da>
  402348:	f1a4 0401 	sub.w	r4, r4, #1
  40234c:	f1d5 0e20 	rsbs	lr, r5, #32
  402350:	db0d      	blt.n	40236e <__adddf3+0xb2>
  402352:	fa02 fc0e 	lsl.w	ip, r2, lr
  402356:	fa22 f205 	lsr.w	r2, r2, r5
  40235a:	1880      	adds	r0, r0, r2
  40235c:	f141 0100 	adc.w	r1, r1, #0
  402360:	fa03 f20e 	lsl.w	r2, r3, lr
  402364:	1880      	adds	r0, r0, r2
  402366:	fa43 f305 	asr.w	r3, r3, r5
  40236a:	4159      	adcs	r1, r3
  40236c:	e00e      	b.n	40238c <__adddf3+0xd0>
  40236e:	f1a5 0520 	sub.w	r5, r5, #32
  402372:	f10e 0e20 	add.w	lr, lr, #32
  402376:	2a01      	cmp	r2, #1
  402378:	fa03 fc0e 	lsl.w	ip, r3, lr
  40237c:	bf28      	it	cs
  40237e:	f04c 0c02 	orrcs.w	ip, ip, #2
  402382:	fa43 f305 	asr.w	r3, r3, r5
  402386:	18c0      	adds	r0, r0, r3
  402388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40238c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402390:	d507      	bpl.n	4023a2 <__adddf3+0xe6>
  402392:	f04f 0e00 	mov.w	lr, #0
  402396:	f1dc 0c00 	rsbs	ip, ip, #0
  40239a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40239e:	eb6e 0101 	sbc.w	r1, lr, r1
  4023a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4023a6:	d31b      	bcc.n	4023e0 <__adddf3+0x124>
  4023a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4023ac:	d30c      	bcc.n	4023c8 <__adddf3+0x10c>
  4023ae:	0849      	lsrs	r1, r1, #1
  4023b0:	ea5f 0030 	movs.w	r0, r0, rrx
  4023b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4023b8:	f104 0401 	add.w	r4, r4, #1
  4023bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4023c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4023c4:	f080 809a 	bcs.w	4024fc <__adddf3+0x240>
  4023c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4023cc:	bf08      	it	eq
  4023ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4023d2:	f150 0000 	adcs.w	r0, r0, #0
  4023d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4023da:	ea41 0105 	orr.w	r1, r1, r5
  4023de:	bd30      	pop	{r4, r5, pc}
  4023e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4023e4:	4140      	adcs	r0, r0
  4023e6:	eb41 0101 	adc.w	r1, r1, r1
  4023ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4023ee:	f1a4 0401 	sub.w	r4, r4, #1
  4023f2:	d1e9      	bne.n	4023c8 <__adddf3+0x10c>
  4023f4:	f091 0f00 	teq	r1, #0
  4023f8:	bf04      	itt	eq
  4023fa:	4601      	moveq	r1, r0
  4023fc:	2000      	moveq	r0, #0
  4023fe:	fab1 f381 	clz	r3, r1
  402402:	bf08      	it	eq
  402404:	3320      	addeq	r3, #32
  402406:	f1a3 030b 	sub.w	r3, r3, #11
  40240a:	f1b3 0220 	subs.w	r2, r3, #32
  40240e:	da0c      	bge.n	40242a <__adddf3+0x16e>
  402410:	320c      	adds	r2, #12
  402412:	dd08      	ble.n	402426 <__adddf3+0x16a>
  402414:	f102 0c14 	add.w	ip, r2, #20
  402418:	f1c2 020c 	rsb	r2, r2, #12
  40241c:	fa01 f00c 	lsl.w	r0, r1, ip
  402420:	fa21 f102 	lsr.w	r1, r1, r2
  402424:	e00c      	b.n	402440 <__adddf3+0x184>
  402426:	f102 0214 	add.w	r2, r2, #20
  40242a:	bfd8      	it	le
  40242c:	f1c2 0c20 	rsble	ip, r2, #32
  402430:	fa01 f102 	lsl.w	r1, r1, r2
  402434:	fa20 fc0c 	lsr.w	ip, r0, ip
  402438:	bfdc      	itt	le
  40243a:	ea41 010c 	orrle.w	r1, r1, ip
  40243e:	4090      	lslle	r0, r2
  402440:	1ae4      	subs	r4, r4, r3
  402442:	bfa2      	ittt	ge
  402444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402448:	4329      	orrge	r1, r5
  40244a:	bd30      	popge	{r4, r5, pc}
  40244c:	ea6f 0404 	mvn.w	r4, r4
  402450:	3c1f      	subs	r4, #31
  402452:	da1c      	bge.n	40248e <__adddf3+0x1d2>
  402454:	340c      	adds	r4, #12
  402456:	dc0e      	bgt.n	402476 <__adddf3+0x1ba>
  402458:	f104 0414 	add.w	r4, r4, #20
  40245c:	f1c4 0220 	rsb	r2, r4, #32
  402460:	fa20 f004 	lsr.w	r0, r0, r4
  402464:	fa01 f302 	lsl.w	r3, r1, r2
  402468:	ea40 0003 	orr.w	r0, r0, r3
  40246c:	fa21 f304 	lsr.w	r3, r1, r4
  402470:	ea45 0103 	orr.w	r1, r5, r3
  402474:	bd30      	pop	{r4, r5, pc}
  402476:	f1c4 040c 	rsb	r4, r4, #12
  40247a:	f1c4 0220 	rsb	r2, r4, #32
  40247e:	fa20 f002 	lsr.w	r0, r0, r2
  402482:	fa01 f304 	lsl.w	r3, r1, r4
  402486:	ea40 0003 	orr.w	r0, r0, r3
  40248a:	4629      	mov	r1, r5
  40248c:	bd30      	pop	{r4, r5, pc}
  40248e:	fa21 f004 	lsr.w	r0, r1, r4
  402492:	4629      	mov	r1, r5
  402494:	bd30      	pop	{r4, r5, pc}
  402496:	f094 0f00 	teq	r4, #0
  40249a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40249e:	bf06      	itte	eq
  4024a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4024a4:	3401      	addeq	r4, #1
  4024a6:	3d01      	subne	r5, #1
  4024a8:	e74e      	b.n	402348 <__adddf3+0x8c>
  4024aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4024ae:	bf18      	it	ne
  4024b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4024b4:	d029      	beq.n	40250a <__adddf3+0x24e>
  4024b6:	ea94 0f05 	teq	r4, r5
  4024ba:	bf08      	it	eq
  4024bc:	ea90 0f02 	teqeq	r0, r2
  4024c0:	d005      	beq.n	4024ce <__adddf3+0x212>
  4024c2:	ea54 0c00 	orrs.w	ip, r4, r0
  4024c6:	bf04      	itt	eq
  4024c8:	4619      	moveq	r1, r3
  4024ca:	4610      	moveq	r0, r2
  4024cc:	bd30      	pop	{r4, r5, pc}
  4024ce:	ea91 0f03 	teq	r1, r3
  4024d2:	bf1e      	ittt	ne
  4024d4:	2100      	movne	r1, #0
  4024d6:	2000      	movne	r0, #0
  4024d8:	bd30      	popne	{r4, r5, pc}
  4024da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4024de:	d105      	bne.n	4024ec <__adddf3+0x230>
  4024e0:	0040      	lsls	r0, r0, #1
  4024e2:	4149      	adcs	r1, r1
  4024e4:	bf28      	it	cs
  4024e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4024ea:	bd30      	pop	{r4, r5, pc}
  4024ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4024f0:	bf3c      	itt	cc
  4024f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4024f6:	bd30      	popcc	{r4, r5, pc}
  4024f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4024fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402504:	f04f 0000 	mov.w	r0, #0
  402508:	bd30      	pop	{r4, r5, pc}
  40250a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40250e:	bf1a      	itte	ne
  402510:	4619      	movne	r1, r3
  402512:	4610      	movne	r0, r2
  402514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402518:	bf1c      	itt	ne
  40251a:	460b      	movne	r3, r1
  40251c:	4602      	movne	r2, r0
  40251e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402522:	bf06      	itte	eq
  402524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402528:	ea91 0f03 	teqeq	r1, r3
  40252c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402530:	bd30      	pop	{r4, r5, pc}
  402532:	bf00      	nop

00402534 <__aeabi_ui2d>:
  402534:	f090 0f00 	teq	r0, #0
  402538:	bf04      	itt	eq
  40253a:	2100      	moveq	r1, #0
  40253c:	4770      	bxeq	lr
  40253e:	b530      	push	{r4, r5, lr}
  402540:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402544:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402548:	f04f 0500 	mov.w	r5, #0
  40254c:	f04f 0100 	mov.w	r1, #0
  402550:	e750      	b.n	4023f4 <__adddf3+0x138>
  402552:	bf00      	nop

00402554 <__aeabi_i2d>:
  402554:	f090 0f00 	teq	r0, #0
  402558:	bf04      	itt	eq
  40255a:	2100      	moveq	r1, #0
  40255c:	4770      	bxeq	lr
  40255e:	b530      	push	{r4, r5, lr}
  402560:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402564:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40256c:	bf48      	it	mi
  40256e:	4240      	negmi	r0, r0
  402570:	f04f 0100 	mov.w	r1, #0
  402574:	e73e      	b.n	4023f4 <__adddf3+0x138>
  402576:	bf00      	nop

00402578 <__aeabi_f2d>:
  402578:	0042      	lsls	r2, r0, #1
  40257a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40257e:	ea4f 0131 	mov.w	r1, r1, rrx
  402582:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402586:	bf1f      	itttt	ne
  402588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40258c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402594:	4770      	bxne	lr
  402596:	f092 0f00 	teq	r2, #0
  40259a:	bf14      	ite	ne
  40259c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4025a0:	4770      	bxeq	lr
  4025a2:	b530      	push	{r4, r5, lr}
  4025a4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4025a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4025ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4025b0:	e720      	b.n	4023f4 <__adddf3+0x138>
  4025b2:	bf00      	nop

004025b4 <__aeabi_ul2d>:
  4025b4:	ea50 0201 	orrs.w	r2, r0, r1
  4025b8:	bf08      	it	eq
  4025ba:	4770      	bxeq	lr
  4025bc:	b530      	push	{r4, r5, lr}
  4025be:	f04f 0500 	mov.w	r5, #0
  4025c2:	e00a      	b.n	4025da <__aeabi_l2d+0x16>

004025c4 <__aeabi_l2d>:
  4025c4:	ea50 0201 	orrs.w	r2, r0, r1
  4025c8:	bf08      	it	eq
  4025ca:	4770      	bxeq	lr
  4025cc:	b530      	push	{r4, r5, lr}
  4025ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4025d2:	d502      	bpl.n	4025da <__aeabi_l2d+0x16>
  4025d4:	4240      	negs	r0, r0
  4025d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4025da:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4025de:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4025e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4025e6:	f43f aedc 	beq.w	4023a2 <__adddf3+0xe6>
  4025ea:	f04f 0203 	mov.w	r2, #3
  4025ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4025f2:	bf18      	it	ne
  4025f4:	3203      	addne	r2, #3
  4025f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4025fa:	bf18      	it	ne
  4025fc:	3203      	addne	r2, #3
  4025fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402602:	f1c2 0320 	rsb	r3, r2, #32
  402606:	fa00 fc03 	lsl.w	ip, r0, r3
  40260a:	fa20 f002 	lsr.w	r0, r0, r2
  40260e:	fa01 fe03 	lsl.w	lr, r1, r3
  402612:	ea40 000e 	orr.w	r0, r0, lr
  402616:	fa21 f102 	lsr.w	r1, r1, r2
  40261a:	4414      	add	r4, r2
  40261c:	e6c1      	b.n	4023a2 <__adddf3+0xe6>
  40261e:	bf00      	nop

00402620 <__aeabi_dmul>:
  402620:	b570      	push	{r4, r5, r6, lr}
  402622:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40262a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40262e:	bf1d      	ittte	ne
  402630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402634:	ea94 0f0c 	teqne	r4, ip
  402638:	ea95 0f0c 	teqne	r5, ip
  40263c:	f000 f8de 	bleq	4027fc <__aeabi_dmul+0x1dc>
  402640:	442c      	add	r4, r5
  402642:	ea81 0603 	eor.w	r6, r1, r3
  402646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40264a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40264e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402652:	bf18      	it	ne
  402654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40265c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402660:	d038      	beq.n	4026d4 <__aeabi_dmul+0xb4>
  402662:	fba0 ce02 	umull	ip, lr, r0, r2
  402666:	f04f 0500 	mov.w	r5, #0
  40266a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40266e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402672:	fbe0 e503 	umlal	lr, r5, r0, r3
  402676:	f04f 0600 	mov.w	r6, #0
  40267a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40267e:	f09c 0f00 	teq	ip, #0
  402682:	bf18      	it	ne
  402684:	f04e 0e01 	orrne.w	lr, lr, #1
  402688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40268c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402694:	d204      	bcs.n	4026a0 <__aeabi_dmul+0x80>
  402696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40269a:	416d      	adcs	r5, r5
  40269c:	eb46 0606 	adc.w	r6, r6, r6
  4026a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4026a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4026a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4026ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4026b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4026b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4026b8:	bf88      	it	hi
  4026ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4026be:	d81e      	bhi.n	4026fe <__aeabi_dmul+0xde>
  4026c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4026c4:	bf08      	it	eq
  4026c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4026ca:	f150 0000 	adcs.w	r0, r0, #0
  4026ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4026d2:	bd70      	pop	{r4, r5, r6, pc}
  4026d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4026d8:	ea46 0101 	orr.w	r1, r6, r1
  4026dc:	ea40 0002 	orr.w	r0, r0, r2
  4026e0:	ea81 0103 	eor.w	r1, r1, r3
  4026e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4026e8:	bfc2      	ittt	gt
  4026ea:	ebd4 050c 	rsbsgt	r5, r4, ip
  4026ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4026f2:	bd70      	popgt	{r4, r5, r6, pc}
  4026f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4026f8:	f04f 0e00 	mov.w	lr, #0
  4026fc:	3c01      	subs	r4, #1
  4026fe:	f300 80ab 	bgt.w	402858 <__aeabi_dmul+0x238>
  402702:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402706:	bfde      	ittt	le
  402708:	2000      	movle	r0, #0
  40270a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40270e:	bd70      	pople	{r4, r5, r6, pc}
  402710:	f1c4 0400 	rsb	r4, r4, #0
  402714:	3c20      	subs	r4, #32
  402716:	da35      	bge.n	402784 <__aeabi_dmul+0x164>
  402718:	340c      	adds	r4, #12
  40271a:	dc1b      	bgt.n	402754 <__aeabi_dmul+0x134>
  40271c:	f104 0414 	add.w	r4, r4, #20
  402720:	f1c4 0520 	rsb	r5, r4, #32
  402724:	fa00 f305 	lsl.w	r3, r0, r5
  402728:	fa20 f004 	lsr.w	r0, r0, r4
  40272c:	fa01 f205 	lsl.w	r2, r1, r5
  402730:	ea40 0002 	orr.w	r0, r0, r2
  402734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40273c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402740:	fa21 f604 	lsr.w	r6, r1, r4
  402744:	eb42 0106 	adc.w	r1, r2, r6
  402748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40274c:	bf08      	it	eq
  40274e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402752:	bd70      	pop	{r4, r5, r6, pc}
  402754:	f1c4 040c 	rsb	r4, r4, #12
  402758:	f1c4 0520 	rsb	r5, r4, #32
  40275c:	fa00 f304 	lsl.w	r3, r0, r4
  402760:	fa20 f005 	lsr.w	r0, r0, r5
  402764:	fa01 f204 	lsl.w	r2, r1, r4
  402768:	ea40 0002 	orr.w	r0, r0, r2
  40276c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402774:	f141 0100 	adc.w	r1, r1, #0
  402778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40277c:	bf08      	it	eq
  40277e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402782:	bd70      	pop	{r4, r5, r6, pc}
  402784:	f1c4 0520 	rsb	r5, r4, #32
  402788:	fa00 f205 	lsl.w	r2, r0, r5
  40278c:	ea4e 0e02 	orr.w	lr, lr, r2
  402790:	fa20 f304 	lsr.w	r3, r0, r4
  402794:	fa01 f205 	lsl.w	r2, r1, r5
  402798:	ea43 0302 	orr.w	r3, r3, r2
  40279c:	fa21 f004 	lsr.w	r0, r1, r4
  4027a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4027a4:	fa21 f204 	lsr.w	r2, r1, r4
  4027a8:	ea20 0002 	bic.w	r0, r0, r2
  4027ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4027b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4027b4:	bf08      	it	eq
  4027b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4027ba:	bd70      	pop	{r4, r5, r6, pc}
  4027bc:	f094 0f00 	teq	r4, #0
  4027c0:	d10f      	bne.n	4027e2 <__aeabi_dmul+0x1c2>
  4027c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4027c6:	0040      	lsls	r0, r0, #1
  4027c8:	eb41 0101 	adc.w	r1, r1, r1
  4027cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4027d0:	bf08      	it	eq
  4027d2:	3c01      	subeq	r4, #1
  4027d4:	d0f7      	beq.n	4027c6 <__aeabi_dmul+0x1a6>
  4027d6:	ea41 0106 	orr.w	r1, r1, r6
  4027da:	f095 0f00 	teq	r5, #0
  4027de:	bf18      	it	ne
  4027e0:	4770      	bxne	lr
  4027e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4027e6:	0052      	lsls	r2, r2, #1
  4027e8:	eb43 0303 	adc.w	r3, r3, r3
  4027ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4027f0:	bf08      	it	eq
  4027f2:	3d01      	subeq	r5, #1
  4027f4:	d0f7      	beq.n	4027e6 <__aeabi_dmul+0x1c6>
  4027f6:	ea43 0306 	orr.w	r3, r3, r6
  4027fa:	4770      	bx	lr
  4027fc:	ea94 0f0c 	teq	r4, ip
  402800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402804:	bf18      	it	ne
  402806:	ea95 0f0c 	teqne	r5, ip
  40280a:	d00c      	beq.n	402826 <__aeabi_dmul+0x206>
  40280c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402810:	bf18      	it	ne
  402812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402816:	d1d1      	bne.n	4027bc <__aeabi_dmul+0x19c>
  402818:	ea81 0103 	eor.w	r1, r1, r3
  40281c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402820:	f04f 0000 	mov.w	r0, #0
  402824:	bd70      	pop	{r4, r5, r6, pc}
  402826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40282a:	bf06      	itte	eq
  40282c:	4610      	moveq	r0, r2
  40282e:	4619      	moveq	r1, r3
  402830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402834:	d019      	beq.n	40286a <__aeabi_dmul+0x24a>
  402836:	ea94 0f0c 	teq	r4, ip
  40283a:	d102      	bne.n	402842 <__aeabi_dmul+0x222>
  40283c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402840:	d113      	bne.n	40286a <__aeabi_dmul+0x24a>
  402842:	ea95 0f0c 	teq	r5, ip
  402846:	d105      	bne.n	402854 <__aeabi_dmul+0x234>
  402848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40284c:	bf1c      	itt	ne
  40284e:	4610      	movne	r0, r2
  402850:	4619      	movne	r1, r3
  402852:	d10a      	bne.n	40286a <__aeabi_dmul+0x24a>
  402854:	ea81 0103 	eor.w	r1, r1, r3
  402858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40285c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402864:	f04f 0000 	mov.w	r0, #0
  402868:	bd70      	pop	{r4, r5, r6, pc}
  40286a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40286e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402872:	bd70      	pop	{r4, r5, r6, pc}

00402874 <__aeabi_ddiv>:
  402874:	b570      	push	{r4, r5, r6, lr}
  402876:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40287a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40287e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402882:	bf1d      	ittte	ne
  402884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402888:	ea94 0f0c 	teqne	r4, ip
  40288c:	ea95 0f0c 	teqne	r5, ip
  402890:	f000 f8a7 	bleq	4029e2 <__aeabi_ddiv+0x16e>
  402894:	eba4 0405 	sub.w	r4, r4, r5
  402898:	ea81 0e03 	eor.w	lr, r1, r3
  40289c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4028a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4028a4:	f000 8088 	beq.w	4029b8 <__aeabi_ddiv+0x144>
  4028a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4028ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4028b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4028b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4028b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4028bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4028c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4028c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4028c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4028cc:	429d      	cmp	r5, r3
  4028ce:	bf08      	it	eq
  4028d0:	4296      	cmpeq	r6, r2
  4028d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4028d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4028da:	d202      	bcs.n	4028e2 <__aeabi_ddiv+0x6e>
  4028dc:	085b      	lsrs	r3, r3, #1
  4028de:	ea4f 0232 	mov.w	r2, r2, rrx
  4028e2:	1ab6      	subs	r6, r6, r2
  4028e4:	eb65 0503 	sbc.w	r5, r5, r3
  4028e8:	085b      	lsrs	r3, r3, #1
  4028ea:	ea4f 0232 	mov.w	r2, r2, rrx
  4028ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4028f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4028f6:	ebb6 0e02 	subs.w	lr, r6, r2
  4028fa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4028fe:	bf22      	ittt	cs
  402900:	1ab6      	subcs	r6, r6, r2
  402902:	4675      	movcs	r5, lr
  402904:	ea40 000c 	orrcs.w	r0, r0, ip
  402908:	085b      	lsrs	r3, r3, #1
  40290a:	ea4f 0232 	mov.w	r2, r2, rrx
  40290e:	ebb6 0e02 	subs.w	lr, r6, r2
  402912:	eb75 0e03 	sbcs.w	lr, r5, r3
  402916:	bf22      	ittt	cs
  402918:	1ab6      	subcs	r6, r6, r2
  40291a:	4675      	movcs	r5, lr
  40291c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402920:	085b      	lsrs	r3, r3, #1
  402922:	ea4f 0232 	mov.w	r2, r2, rrx
  402926:	ebb6 0e02 	subs.w	lr, r6, r2
  40292a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40292e:	bf22      	ittt	cs
  402930:	1ab6      	subcs	r6, r6, r2
  402932:	4675      	movcs	r5, lr
  402934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402938:	085b      	lsrs	r3, r3, #1
  40293a:	ea4f 0232 	mov.w	r2, r2, rrx
  40293e:	ebb6 0e02 	subs.w	lr, r6, r2
  402942:	eb75 0e03 	sbcs.w	lr, r5, r3
  402946:	bf22      	ittt	cs
  402948:	1ab6      	subcs	r6, r6, r2
  40294a:	4675      	movcs	r5, lr
  40294c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402950:	ea55 0e06 	orrs.w	lr, r5, r6
  402954:	d018      	beq.n	402988 <__aeabi_ddiv+0x114>
  402956:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40295a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40295e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40296a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40296e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402972:	d1c0      	bne.n	4028f6 <__aeabi_ddiv+0x82>
  402974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402978:	d10b      	bne.n	402992 <__aeabi_ddiv+0x11e>
  40297a:	ea41 0100 	orr.w	r1, r1, r0
  40297e:	f04f 0000 	mov.w	r0, #0
  402982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402986:	e7b6      	b.n	4028f6 <__aeabi_ddiv+0x82>
  402988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40298c:	bf04      	itt	eq
  40298e:	4301      	orreq	r1, r0
  402990:	2000      	moveq	r0, #0
  402992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402996:	bf88      	it	hi
  402998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40299c:	f63f aeaf 	bhi.w	4026fe <__aeabi_dmul+0xde>
  4029a0:	ebb5 0c03 	subs.w	ip, r5, r3
  4029a4:	bf04      	itt	eq
  4029a6:	ebb6 0c02 	subseq.w	ip, r6, r2
  4029aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4029ae:	f150 0000 	adcs.w	r0, r0, #0
  4029b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4029b6:	bd70      	pop	{r4, r5, r6, pc}
  4029b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4029bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4029c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4029c4:	bfc2      	ittt	gt
  4029c6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4029ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4029ce:	bd70      	popgt	{r4, r5, r6, pc}
  4029d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4029d4:	f04f 0e00 	mov.w	lr, #0
  4029d8:	3c01      	subs	r4, #1
  4029da:	e690      	b.n	4026fe <__aeabi_dmul+0xde>
  4029dc:	ea45 0e06 	orr.w	lr, r5, r6
  4029e0:	e68d      	b.n	4026fe <__aeabi_dmul+0xde>
  4029e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4029e6:	ea94 0f0c 	teq	r4, ip
  4029ea:	bf08      	it	eq
  4029ec:	ea95 0f0c 	teqeq	r5, ip
  4029f0:	f43f af3b 	beq.w	40286a <__aeabi_dmul+0x24a>
  4029f4:	ea94 0f0c 	teq	r4, ip
  4029f8:	d10a      	bne.n	402a10 <__aeabi_ddiv+0x19c>
  4029fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4029fe:	f47f af34 	bne.w	40286a <__aeabi_dmul+0x24a>
  402a02:	ea95 0f0c 	teq	r5, ip
  402a06:	f47f af25 	bne.w	402854 <__aeabi_dmul+0x234>
  402a0a:	4610      	mov	r0, r2
  402a0c:	4619      	mov	r1, r3
  402a0e:	e72c      	b.n	40286a <__aeabi_dmul+0x24a>
  402a10:	ea95 0f0c 	teq	r5, ip
  402a14:	d106      	bne.n	402a24 <__aeabi_ddiv+0x1b0>
  402a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402a1a:	f43f aefd 	beq.w	402818 <__aeabi_dmul+0x1f8>
  402a1e:	4610      	mov	r0, r2
  402a20:	4619      	mov	r1, r3
  402a22:	e722      	b.n	40286a <__aeabi_dmul+0x24a>
  402a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402a28:	bf18      	it	ne
  402a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402a2e:	f47f aec5 	bne.w	4027bc <__aeabi_dmul+0x19c>
  402a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402a36:	f47f af0d 	bne.w	402854 <__aeabi_dmul+0x234>
  402a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402a3e:	f47f aeeb 	bne.w	402818 <__aeabi_dmul+0x1f8>
  402a42:	e712      	b.n	40286a <__aeabi_dmul+0x24a>

00402a44 <__gedf2>:
  402a44:	f04f 3cff 	mov.w	ip, #4294967295
  402a48:	e006      	b.n	402a58 <__cmpdf2+0x4>
  402a4a:	bf00      	nop

00402a4c <__ledf2>:
  402a4c:	f04f 0c01 	mov.w	ip, #1
  402a50:	e002      	b.n	402a58 <__cmpdf2+0x4>
  402a52:	bf00      	nop

00402a54 <__cmpdf2>:
  402a54:	f04f 0c01 	mov.w	ip, #1
  402a58:	f84d cd04 	str.w	ip, [sp, #-4]!
  402a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402a68:	bf18      	it	ne
  402a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  402a6e:	d01b      	beq.n	402aa8 <__cmpdf2+0x54>
  402a70:	b001      	add	sp, #4
  402a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  402a76:	bf0c      	ite	eq
  402a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  402a7c:	ea91 0f03 	teqne	r1, r3
  402a80:	bf02      	ittt	eq
  402a82:	ea90 0f02 	teqeq	r0, r2
  402a86:	2000      	moveq	r0, #0
  402a88:	4770      	bxeq	lr
  402a8a:	f110 0f00 	cmn.w	r0, #0
  402a8e:	ea91 0f03 	teq	r1, r3
  402a92:	bf58      	it	pl
  402a94:	4299      	cmppl	r1, r3
  402a96:	bf08      	it	eq
  402a98:	4290      	cmpeq	r0, r2
  402a9a:	bf2c      	ite	cs
  402a9c:	17d8      	asrcs	r0, r3, #31
  402a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  402aa2:	f040 0001 	orr.w	r0, r0, #1
  402aa6:	4770      	bx	lr
  402aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402ab0:	d102      	bne.n	402ab8 <__cmpdf2+0x64>
  402ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  402ab6:	d107      	bne.n	402ac8 <__cmpdf2+0x74>
  402ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402ac0:	d1d6      	bne.n	402a70 <__cmpdf2+0x1c>
  402ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  402ac6:	d0d3      	beq.n	402a70 <__cmpdf2+0x1c>
  402ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
  402acc:	4770      	bx	lr
  402ace:	bf00      	nop

00402ad0 <__aeabi_cdrcmple>:
  402ad0:	4684      	mov	ip, r0
  402ad2:	4610      	mov	r0, r2
  402ad4:	4662      	mov	r2, ip
  402ad6:	468c      	mov	ip, r1
  402ad8:	4619      	mov	r1, r3
  402ada:	4663      	mov	r3, ip
  402adc:	e000      	b.n	402ae0 <__aeabi_cdcmpeq>
  402ade:	bf00      	nop

00402ae0 <__aeabi_cdcmpeq>:
  402ae0:	b501      	push	{r0, lr}
  402ae2:	f7ff ffb7 	bl	402a54 <__cmpdf2>
  402ae6:	2800      	cmp	r0, #0
  402ae8:	bf48      	it	mi
  402aea:	f110 0f00 	cmnmi.w	r0, #0
  402aee:	bd01      	pop	{r0, pc}

00402af0 <__aeabi_dcmpeq>:
  402af0:	f84d ed08 	str.w	lr, [sp, #-8]!
  402af4:	f7ff fff4 	bl	402ae0 <__aeabi_cdcmpeq>
  402af8:	bf0c      	ite	eq
  402afa:	2001      	moveq	r0, #1
  402afc:	2000      	movne	r0, #0
  402afe:	f85d fb08 	ldr.w	pc, [sp], #8
  402b02:	bf00      	nop

00402b04 <__aeabi_dcmplt>:
  402b04:	f84d ed08 	str.w	lr, [sp, #-8]!
  402b08:	f7ff ffea 	bl	402ae0 <__aeabi_cdcmpeq>
  402b0c:	bf34      	ite	cc
  402b0e:	2001      	movcc	r0, #1
  402b10:	2000      	movcs	r0, #0
  402b12:	f85d fb08 	ldr.w	pc, [sp], #8
  402b16:	bf00      	nop

00402b18 <__aeabi_dcmple>:
  402b18:	f84d ed08 	str.w	lr, [sp, #-8]!
  402b1c:	f7ff ffe0 	bl	402ae0 <__aeabi_cdcmpeq>
  402b20:	bf94      	ite	ls
  402b22:	2001      	movls	r0, #1
  402b24:	2000      	movhi	r0, #0
  402b26:	f85d fb08 	ldr.w	pc, [sp], #8
  402b2a:	bf00      	nop

00402b2c <__aeabi_dcmpge>:
  402b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
  402b30:	f7ff ffce 	bl	402ad0 <__aeabi_cdrcmple>
  402b34:	bf94      	ite	ls
  402b36:	2001      	movls	r0, #1
  402b38:	2000      	movhi	r0, #0
  402b3a:	f85d fb08 	ldr.w	pc, [sp], #8
  402b3e:	bf00      	nop

00402b40 <__aeabi_dcmpgt>:
  402b40:	f84d ed08 	str.w	lr, [sp, #-8]!
  402b44:	f7ff ffc4 	bl	402ad0 <__aeabi_cdrcmple>
  402b48:	bf34      	ite	cc
  402b4a:	2001      	movcc	r0, #1
  402b4c:	2000      	movcs	r0, #0
  402b4e:	f85d fb08 	ldr.w	pc, [sp], #8
  402b52:	bf00      	nop

00402b54 <__aeabi_d2iz>:
  402b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402b58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  402b5c:	d215      	bcs.n	402b8a <__aeabi_d2iz+0x36>
  402b5e:	d511      	bpl.n	402b84 <__aeabi_d2iz+0x30>
  402b60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402b64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  402b68:	d912      	bls.n	402b90 <__aeabi_d2iz+0x3c>
  402b6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402b72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  402b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402b7a:	fa23 f002 	lsr.w	r0, r3, r2
  402b7e:	bf18      	it	ne
  402b80:	4240      	negne	r0, r0
  402b82:	4770      	bx	lr
  402b84:	f04f 0000 	mov.w	r0, #0
  402b88:	4770      	bx	lr
  402b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  402b8e:	d105      	bne.n	402b9c <__aeabi_d2iz+0x48>
  402b90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  402b94:	bf08      	it	eq
  402b96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  402b9a:	4770      	bx	lr
  402b9c:	f04f 0000 	mov.w	r0, #0
  402ba0:	4770      	bx	lr
  402ba2:	bf00      	nop

00402ba4 <__libc_init_array>:
  402ba4:	b570      	push	{r4, r5, r6, lr}
  402ba6:	4e0d      	ldr	r6, [pc, #52]	; (402bdc <__libc_init_array+0x38>)
  402ba8:	4c0d      	ldr	r4, [pc, #52]	; (402be0 <__libc_init_array+0x3c>)
  402baa:	1ba4      	subs	r4, r4, r6
  402bac:	10a4      	asrs	r4, r4, #2
  402bae:	2500      	movs	r5, #0
  402bb0:	42a5      	cmp	r5, r4
  402bb2:	d109      	bne.n	402bc8 <__libc_init_array+0x24>
  402bb4:	4e0b      	ldr	r6, [pc, #44]	; (402be4 <__libc_init_array+0x40>)
  402bb6:	4c0c      	ldr	r4, [pc, #48]	; (402be8 <__libc_init_array+0x44>)
  402bb8:	f003 f81e 	bl	405bf8 <_init>
  402bbc:	1ba4      	subs	r4, r4, r6
  402bbe:	10a4      	asrs	r4, r4, #2
  402bc0:	2500      	movs	r5, #0
  402bc2:	42a5      	cmp	r5, r4
  402bc4:	d105      	bne.n	402bd2 <__libc_init_array+0x2e>
  402bc6:	bd70      	pop	{r4, r5, r6, pc}
  402bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402bcc:	4798      	blx	r3
  402bce:	3501      	adds	r5, #1
  402bd0:	e7ee      	b.n	402bb0 <__libc_init_array+0xc>
  402bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402bd6:	4798      	blx	r3
  402bd8:	3501      	adds	r5, #1
  402bda:	e7f2      	b.n	402bc2 <__libc_init_array+0x1e>
  402bdc:	00405c04 	.word	0x00405c04
  402be0:	00405c04 	.word	0x00405c04
  402be4:	00405c04 	.word	0x00405c04
  402be8:	00405c08 	.word	0x00405c08

00402bec <memcpy>:
  402bec:	b510      	push	{r4, lr}
  402bee:	1e43      	subs	r3, r0, #1
  402bf0:	440a      	add	r2, r1
  402bf2:	4291      	cmp	r1, r2
  402bf4:	d100      	bne.n	402bf8 <memcpy+0xc>
  402bf6:	bd10      	pop	{r4, pc}
  402bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
  402bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
  402c00:	e7f7      	b.n	402bf2 <memcpy+0x6>

00402c02 <memset>:
  402c02:	4402      	add	r2, r0
  402c04:	4603      	mov	r3, r0
  402c06:	4293      	cmp	r3, r2
  402c08:	d100      	bne.n	402c0c <memset+0xa>
  402c0a:	4770      	bx	lr
  402c0c:	f803 1b01 	strb.w	r1, [r3], #1
  402c10:	e7f9      	b.n	402c06 <memset+0x4>

00402c12 <__cvt>:
  402c12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c16:	b088      	sub	sp, #32
  402c18:	2b00      	cmp	r3, #0
  402c1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402c1c:	9912      	ldr	r1, [sp, #72]	; 0x48
  402c1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402c20:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402c24:	461e      	mov	r6, r3
  402c26:	f027 0720 	bic.w	r7, r7, #32
  402c2a:	bfbb      	ittet	lt
  402c2c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  402c30:	461e      	movlt	r6, r3
  402c32:	2300      	movge	r3, #0
  402c34:	232d      	movlt	r3, #45	; 0x2d
  402c36:	2f46      	cmp	r7, #70	; 0x46
  402c38:	4614      	mov	r4, r2
  402c3a:	700b      	strb	r3, [r1, #0]
  402c3c:	d004      	beq.n	402c48 <__cvt+0x36>
  402c3e:	2f45      	cmp	r7, #69	; 0x45
  402c40:	d100      	bne.n	402c44 <__cvt+0x32>
  402c42:	3501      	adds	r5, #1
  402c44:	2302      	movs	r3, #2
  402c46:	e000      	b.n	402c4a <__cvt+0x38>
  402c48:	2303      	movs	r3, #3
  402c4a:	aa07      	add	r2, sp, #28
  402c4c:	9204      	str	r2, [sp, #16]
  402c4e:	aa06      	add	r2, sp, #24
  402c50:	9203      	str	r2, [sp, #12]
  402c52:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  402c56:	4622      	mov	r2, r4
  402c58:	4633      	mov	r3, r6
  402c5a:	f000 fd9d 	bl	403798 <_dtoa_r>
  402c5e:	2f47      	cmp	r7, #71	; 0x47
  402c60:	4680      	mov	r8, r0
  402c62:	d102      	bne.n	402c6a <__cvt+0x58>
  402c64:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402c66:	07db      	lsls	r3, r3, #31
  402c68:	d526      	bpl.n	402cb8 <__cvt+0xa6>
  402c6a:	2f46      	cmp	r7, #70	; 0x46
  402c6c:	eb08 0905 	add.w	r9, r8, r5
  402c70:	d111      	bne.n	402c96 <__cvt+0x84>
  402c72:	f898 3000 	ldrb.w	r3, [r8]
  402c76:	2b30      	cmp	r3, #48	; 0x30
  402c78:	d10a      	bne.n	402c90 <__cvt+0x7e>
  402c7a:	2200      	movs	r2, #0
  402c7c:	2300      	movs	r3, #0
  402c7e:	4620      	mov	r0, r4
  402c80:	4631      	mov	r1, r6
  402c82:	f7ff ff35 	bl	402af0 <__aeabi_dcmpeq>
  402c86:	b918      	cbnz	r0, 402c90 <__cvt+0x7e>
  402c88:	f1c5 0501 	rsb	r5, r5, #1
  402c8c:	f8ca 5000 	str.w	r5, [sl]
  402c90:	f8da 3000 	ldr.w	r3, [sl]
  402c94:	4499      	add	r9, r3
  402c96:	2200      	movs	r2, #0
  402c98:	2300      	movs	r3, #0
  402c9a:	4620      	mov	r0, r4
  402c9c:	4631      	mov	r1, r6
  402c9e:	f7ff ff27 	bl	402af0 <__aeabi_dcmpeq>
  402ca2:	b938      	cbnz	r0, 402cb4 <__cvt+0xa2>
  402ca4:	2230      	movs	r2, #48	; 0x30
  402ca6:	9b07      	ldr	r3, [sp, #28]
  402ca8:	4599      	cmp	r9, r3
  402caa:	d905      	bls.n	402cb8 <__cvt+0xa6>
  402cac:	1c59      	adds	r1, r3, #1
  402cae:	9107      	str	r1, [sp, #28]
  402cb0:	701a      	strb	r2, [r3, #0]
  402cb2:	e7f8      	b.n	402ca6 <__cvt+0x94>
  402cb4:	f8cd 901c 	str.w	r9, [sp, #28]
  402cb8:	9b07      	ldr	r3, [sp, #28]
  402cba:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402cbc:	eba3 0308 	sub.w	r3, r3, r8
  402cc0:	4640      	mov	r0, r8
  402cc2:	6013      	str	r3, [r2, #0]
  402cc4:	b008      	add	sp, #32
  402cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402cca <__exponent>:
  402cca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  402ccc:	4603      	mov	r3, r0
  402cce:	2900      	cmp	r1, #0
  402cd0:	bfb8      	it	lt
  402cd2:	4249      	neglt	r1, r1
  402cd4:	f803 2b02 	strb.w	r2, [r3], #2
  402cd8:	bfb4      	ite	lt
  402cda:	222d      	movlt	r2, #45	; 0x2d
  402cdc:	222b      	movge	r2, #43	; 0x2b
  402cde:	2909      	cmp	r1, #9
  402ce0:	7042      	strb	r2, [r0, #1]
  402ce2:	dd20      	ble.n	402d26 <__exponent+0x5c>
  402ce4:	f10d 0207 	add.w	r2, sp, #7
  402ce8:	4617      	mov	r7, r2
  402cea:	260a      	movs	r6, #10
  402cec:	fb91 f5f6 	sdiv	r5, r1, r6
  402cf0:	fb06 1115 	mls	r1, r6, r5, r1
  402cf4:	3130      	adds	r1, #48	; 0x30
  402cf6:	2d09      	cmp	r5, #9
  402cf8:	f802 1c01 	strb.w	r1, [r2, #-1]
  402cfc:	f102 34ff 	add.w	r4, r2, #4294967295
  402d00:	4629      	mov	r1, r5
  402d02:	dc09      	bgt.n	402d18 <__exponent+0x4e>
  402d04:	3130      	adds	r1, #48	; 0x30
  402d06:	3a02      	subs	r2, #2
  402d08:	f804 1c01 	strb.w	r1, [r4, #-1]
  402d0c:	42ba      	cmp	r2, r7
  402d0e:	461c      	mov	r4, r3
  402d10:	d304      	bcc.n	402d1c <__exponent+0x52>
  402d12:	1a20      	subs	r0, r4, r0
  402d14:	b003      	add	sp, #12
  402d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402d18:	4622      	mov	r2, r4
  402d1a:	e7e7      	b.n	402cec <__exponent+0x22>
  402d1c:	f812 1b01 	ldrb.w	r1, [r2], #1
  402d20:	f803 1b01 	strb.w	r1, [r3], #1
  402d24:	e7f2      	b.n	402d0c <__exponent+0x42>
  402d26:	2230      	movs	r2, #48	; 0x30
  402d28:	461c      	mov	r4, r3
  402d2a:	4411      	add	r1, r2
  402d2c:	f804 2b02 	strb.w	r2, [r4], #2
  402d30:	7059      	strb	r1, [r3, #1]
  402d32:	e7ee      	b.n	402d12 <__exponent+0x48>

00402d34 <_printf_float>:
  402d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d38:	b091      	sub	sp, #68	; 0x44
  402d3a:	460c      	mov	r4, r1
  402d3c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  402d3e:	4693      	mov	fp, r2
  402d40:	461e      	mov	r6, r3
  402d42:	4605      	mov	r5, r0
  402d44:	f001 fc76 	bl	404634 <_localeconv_r>
  402d48:	6803      	ldr	r3, [r0, #0]
  402d4a:	9309      	str	r3, [sp, #36]	; 0x24
  402d4c:	4618      	mov	r0, r3
  402d4e:	f000 fc8d 	bl	40366c <strlen>
  402d52:	2300      	movs	r3, #0
  402d54:	930e      	str	r3, [sp, #56]	; 0x38
  402d56:	683b      	ldr	r3, [r7, #0]
  402d58:	900a      	str	r0, [sp, #40]	; 0x28
  402d5a:	3307      	adds	r3, #7
  402d5c:	f023 0307 	bic.w	r3, r3, #7
  402d60:	f103 0208 	add.w	r2, r3, #8
  402d64:	f894 8018 	ldrb.w	r8, [r4, #24]
  402d68:	f8d4 a000 	ldr.w	sl, [r4]
  402d6c:	603a      	str	r2, [r7, #0]
  402d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402d76:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  402d7a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  402d7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  402d80:	930b      	str	r3, [sp, #44]	; 0x2c
  402d82:	f04f 32ff 	mov.w	r2, #4294967295
  402d86:	4ba6      	ldr	r3, [pc, #664]	; (403020 <_printf_float+0x2ec>)
  402d88:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402d8a:	4638      	mov	r0, r7
  402d8c:	f002 fb86 	bl	40549c <__aeabi_dcmpun>
  402d90:	2800      	cmp	r0, #0
  402d92:	f040 81f7 	bne.w	403184 <_printf_float+0x450>
  402d96:	f04f 32ff 	mov.w	r2, #4294967295
  402d9a:	4ba1      	ldr	r3, [pc, #644]	; (403020 <_printf_float+0x2ec>)
  402d9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402d9e:	4638      	mov	r0, r7
  402da0:	f7ff feba 	bl	402b18 <__aeabi_dcmple>
  402da4:	2800      	cmp	r0, #0
  402da6:	f040 81ed 	bne.w	403184 <_printf_float+0x450>
  402daa:	2200      	movs	r2, #0
  402dac:	2300      	movs	r3, #0
  402dae:	4638      	mov	r0, r7
  402db0:	4649      	mov	r1, r9
  402db2:	f7ff fea7 	bl	402b04 <__aeabi_dcmplt>
  402db6:	b110      	cbz	r0, 402dbe <_printf_float+0x8a>
  402db8:	232d      	movs	r3, #45	; 0x2d
  402dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402dbe:	4b99      	ldr	r3, [pc, #612]	; (403024 <_printf_float+0x2f0>)
  402dc0:	4f99      	ldr	r7, [pc, #612]	; (403028 <_printf_float+0x2f4>)
  402dc2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  402dc6:	bf98      	it	ls
  402dc8:	461f      	movls	r7, r3
  402dca:	2303      	movs	r3, #3
  402dcc:	6123      	str	r3, [r4, #16]
  402dce:	f02a 0304 	bic.w	r3, sl, #4
  402dd2:	6023      	str	r3, [r4, #0]
  402dd4:	f04f 0900 	mov.w	r9, #0
  402dd8:	9600      	str	r6, [sp, #0]
  402dda:	465b      	mov	r3, fp
  402ddc:	aa0f      	add	r2, sp, #60	; 0x3c
  402dde:	4621      	mov	r1, r4
  402de0:	4628      	mov	r0, r5
  402de2:	f000 f9df 	bl	4031a4 <_printf_common>
  402de6:	3001      	adds	r0, #1
  402de8:	f040 809a 	bne.w	402f20 <_printf_float+0x1ec>
  402dec:	f04f 30ff 	mov.w	r0, #4294967295
  402df0:	b011      	add	sp, #68	; 0x44
  402df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402df6:	6862      	ldr	r2, [r4, #4]
  402df8:	1c53      	adds	r3, r2, #1
  402dfa:	a80e      	add	r0, sp, #56	; 0x38
  402dfc:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  402e00:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  402e04:	d141      	bne.n	402e8a <_printf_float+0x156>
  402e06:	2206      	movs	r2, #6
  402e08:	6062      	str	r2, [r4, #4]
  402e0a:	6023      	str	r3, [r4, #0]
  402e0c:	2100      	movs	r1, #0
  402e0e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  402e12:	9301      	str	r3, [sp, #4]
  402e14:	6863      	ldr	r3, [r4, #4]
  402e16:	9005      	str	r0, [sp, #20]
  402e18:	9202      	str	r2, [sp, #8]
  402e1a:	9300      	str	r3, [sp, #0]
  402e1c:	463a      	mov	r2, r7
  402e1e:	464b      	mov	r3, r9
  402e20:	9106      	str	r1, [sp, #24]
  402e22:	f8cd 8010 	str.w	r8, [sp, #16]
  402e26:	f8cd e00c 	str.w	lr, [sp, #12]
  402e2a:	4628      	mov	r0, r5
  402e2c:	f7ff fef1 	bl	402c12 <__cvt>
  402e30:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  402e34:	2b47      	cmp	r3, #71	; 0x47
  402e36:	4607      	mov	r7, r0
  402e38:	d109      	bne.n	402e4e <_printf_float+0x11a>
  402e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402e3c:	1cd8      	adds	r0, r3, #3
  402e3e:	db02      	blt.n	402e46 <_printf_float+0x112>
  402e40:	6862      	ldr	r2, [r4, #4]
  402e42:	4293      	cmp	r3, r2
  402e44:	dd59      	ble.n	402efa <_printf_float+0x1c6>
  402e46:	f1a8 0802 	sub.w	r8, r8, #2
  402e4a:	fa5f f888 	uxtb.w	r8, r8
  402e4e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  402e52:	990d      	ldr	r1, [sp, #52]	; 0x34
  402e54:	d836      	bhi.n	402ec4 <_printf_float+0x190>
  402e56:	3901      	subs	r1, #1
  402e58:	4642      	mov	r2, r8
  402e5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
  402e5e:	910d      	str	r1, [sp, #52]	; 0x34
  402e60:	f7ff ff33 	bl	402cca <__exponent>
  402e64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402e66:	1883      	adds	r3, r0, r2
  402e68:	2a01      	cmp	r2, #1
  402e6a:	4681      	mov	r9, r0
  402e6c:	6123      	str	r3, [r4, #16]
  402e6e:	dc02      	bgt.n	402e76 <_printf_float+0x142>
  402e70:	6822      	ldr	r2, [r4, #0]
  402e72:	07d1      	lsls	r1, r2, #31
  402e74:	d501      	bpl.n	402e7a <_printf_float+0x146>
  402e76:	3301      	adds	r3, #1
  402e78:	6123      	str	r3, [r4, #16]
  402e7a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  402e7e:	2b00      	cmp	r3, #0
  402e80:	d0aa      	beq.n	402dd8 <_printf_float+0xa4>
  402e82:	232d      	movs	r3, #45	; 0x2d
  402e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402e88:	e7a6      	b.n	402dd8 <_printf_float+0xa4>
  402e8a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  402e8e:	d002      	beq.n	402e96 <_printf_float+0x162>
  402e90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  402e94:	d1b9      	bne.n	402e0a <_printf_float+0xd6>
  402e96:	b19a      	cbz	r2, 402ec0 <_printf_float+0x18c>
  402e98:	2100      	movs	r1, #0
  402e9a:	9106      	str	r1, [sp, #24]
  402e9c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  402ea0:	e88d 000c 	stmia.w	sp, {r2, r3}
  402ea4:	6023      	str	r3, [r4, #0]
  402ea6:	9005      	str	r0, [sp, #20]
  402ea8:	463a      	mov	r2, r7
  402eaa:	f8cd 8010 	str.w	r8, [sp, #16]
  402eae:	f8cd e00c 	str.w	lr, [sp, #12]
  402eb2:	9102      	str	r1, [sp, #8]
  402eb4:	464b      	mov	r3, r9
  402eb6:	4628      	mov	r0, r5
  402eb8:	f7ff feab 	bl	402c12 <__cvt>
  402ebc:	4607      	mov	r7, r0
  402ebe:	e7bc      	b.n	402e3a <_printf_float+0x106>
  402ec0:	2201      	movs	r2, #1
  402ec2:	e7a1      	b.n	402e08 <_printf_float+0xd4>
  402ec4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  402ec8:	d119      	bne.n	402efe <_printf_float+0x1ca>
  402eca:	2900      	cmp	r1, #0
  402ecc:	6863      	ldr	r3, [r4, #4]
  402ece:	dd0c      	ble.n	402eea <_printf_float+0x1b6>
  402ed0:	6121      	str	r1, [r4, #16]
  402ed2:	b913      	cbnz	r3, 402eda <_printf_float+0x1a6>
  402ed4:	6822      	ldr	r2, [r4, #0]
  402ed6:	07d2      	lsls	r2, r2, #31
  402ed8:	d502      	bpl.n	402ee0 <_printf_float+0x1ac>
  402eda:	3301      	adds	r3, #1
  402edc:	440b      	add	r3, r1
  402ede:	6123      	str	r3, [r4, #16]
  402ee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402ee2:	65a3      	str	r3, [r4, #88]	; 0x58
  402ee4:	f04f 0900 	mov.w	r9, #0
  402ee8:	e7c7      	b.n	402e7a <_printf_float+0x146>
  402eea:	b913      	cbnz	r3, 402ef2 <_printf_float+0x1be>
  402eec:	6822      	ldr	r2, [r4, #0]
  402eee:	07d0      	lsls	r0, r2, #31
  402ef0:	d501      	bpl.n	402ef6 <_printf_float+0x1c2>
  402ef2:	3302      	adds	r3, #2
  402ef4:	e7f3      	b.n	402ede <_printf_float+0x1aa>
  402ef6:	2301      	movs	r3, #1
  402ef8:	e7f1      	b.n	402ede <_printf_float+0x1aa>
  402efa:	f04f 0867 	mov.w	r8, #103	; 0x67
  402efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402f00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402f02:	4293      	cmp	r3, r2
  402f04:	db05      	blt.n	402f12 <_printf_float+0x1de>
  402f06:	6822      	ldr	r2, [r4, #0]
  402f08:	6123      	str	r3, [r4, #16]
  402f0a:	07d1      	lsls	r1, r2, #31
  402f0c:	d5e8      	bpl.n	402ee0 <_printf_float+0x1ac>
  402f0e:	3301      	adds	r3, #1
  402f10:	e7e5      	b.n	402ede <_printf_float+0x1aa>
  402f12:	2b00      	cmp	r3, #0
  402f14:	bfd4      	ite	le
  402f16:	f1c3 0302 	rsble	r3, r3, #2
  402f1a:	2301      	movgt	r3, #1
  402f1c:	4413      	add	r3, r2
  402f1e:	e7de      	b.n	402ede <_printf_float+0x1aa>
  402f20:	6823      	ldr	r3, [r4, #0]
  402f22:	055a      	lsls	r2, r3, #21
  402f24:	d407      	bmi.n	402f36 <_printf_float+0x202>
  402f26:	6923      	ldr	r3, [r4, #16]
  402f28:	463a      	mov	r2, r7
  402f2a:	4659      	mov	r1, fp
  402f2c:	4628      	mov	r0, r5
  402f2e:	47b0      	blx	r6
  402f30:	3001      	adds	r0, #1
  402f32:	d12a      	bne.n	402f8a <_printf_float+0x256>
  402f34:	e75a      	b.n	402dec <_printf_float+0xb8>
  402f36:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  402f3a:	f240 80dc 	bls.w	4030f6 <_printf_float+0x3c2>
  402f3e:	2200      	movs	r2, #0
  402f40:	2300      	movs	r3, #0
  402f42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402f46:	f7ff fdd3 	bl	402af0 <__aeabi_dcmpeq>
  402f4a:	2800      	cmp	r0, #0
  402f4c:	d039      	beq.n	402fc2 <_printf_float+0x28e>
  402f4e:	2301      	movs	r3, #1
  402f50:	4a36      	ldr	r2, [pc, #216]	; (40302c <_printf_float+0x2f8>)
  402f52:	4659      	mov	r1, fp
  402f54:	4628      	mov	r0, r5
  402f56:	47b0      	blx	r6
  402f58:	3001      	adds	r0, #1
  402f5a:	f43f af47 	beq.w	402dec <_printf_float+0xb8>
  402f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402f60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402f62:	429a      	cmp	r2, r3
  402f64:	db02      	blt.n	402f6c <_printf_float+0x238>
  402f66:	6823      	ldr	r3, [r4, #0]
  402f68:	07d8      	lsls	r0, r3, #31
  402f6a:	d50e      	bpl.n	402f8a <_printf_float+0x256>
  402f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402f70:	4659      	mov	r1, fp
  402f72:	4628      	mov	r0, r5
  402f74:	47b0      	blx	r6
  402f76:	3001      	adds	r0, #1
  402f78:	f43f af38 	beq.w	402dec <_printf_float+0xb8>
  402f7c:	2700      	movs	r7, #0
  402f7e:	f104 081a 	add.w	r8, r4, #26
  402f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402f84:	3b01      	subs	r3, #1
  402f86:	429f      	cmp	r7, r3
  402f88:	db11      	blt.n	402fae <_printf_float+0x27a>
  402f8a:	6823      	ldr	r3, [r4, #0]
  402f8c:	079f      	lsls	r7, r3, #30
  402f8e:	d508      	bpl.n	402fa2 <_printf_float+0x26e>
  402f90:	2700      	movs	r7, #0
  402f92:	f104 0819 	add.w	r8, r4, #25
  402f96:	68e3      	ldr	r3, [r4, #12]
  402f98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f9a:	1a9b      	subs	r3, r3, r2
  402f9c:	429f      	cmp	r7, r3
  402f9e:	f2c0 80e7 	blt.w	403170 <_printf_float+0x43c>
  402fa2:	68e0      	ldr	r0, [r4, #12]
  402fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402fa6:	4298      	cmp	r0, r3
  402fa8:	bfb8      	it	lt
  402faa:	4618      	movlt	r0, r3
  402fac:	e720      	b.n	402df0 <_printf_float+0xbc>
  402fae:	2301      	movs	r3, #1
  402fb0:	4642      	mov	r2, r8
  402fb2:	4659      	mov	r1, fp
  402fb4:	4628      	mov	r0, r5
  402fb6:	47b0      	blx	r6
  402fb8:	3001      	adds	r0, #1
  402fba:	f43f af17 	beq.w	402dec <_printf_float+0xb8>
  402fbe:	3701      	adds	r7, #1
  402fc0:	e7df      	b.n	402f82 <_printf_float+0x24e>
  402fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402fc4:	2b00      	cmp	r3, #0
  402fc6:	dc33      	bgt.n	403030 <_printf_float+0x2fc>
  402fc8:	2301      	movs	r3, #1
  402fca:	4a18      	ldr	r2, [pc, #96]	; (40302c <_printf_float+0x2f8>)
  402fcc:	4659      	mov	r1, fp
  402fce:	4628      	mov	r0, r5
  402fd0:	47b0      	blx	r6
  402fd2:	3001      	adds	r0, #1
  402fd4:	f43f af0a 	beq.w	402dec <_printf_float+0xb8>
  402fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402fda:	b923      	cbnz	r3, 402fe6 <_printf_float+0x2b2>
  402fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402fde:	b913      	cbnz	r3, 402fe6 <_printf_float+0x2b2>
  402fe0:	6823      	ldr	r3, [r4, #0]
  402fe2:	07d9      	lsls	r1, r3, #31
  402fe4:	d5d1      	bpl.n	402f8a <_printf_float+0x256>
  402fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402fea:	4659      	mov	r1, fp
  402fec:	4628      	mov	r0, r5
  402fee:	47b0      	blx	r6
  402ff0:	3001      	adds	r0, #1
  402ff2:	f43f aefb 	beq.w	402dec <_printf_float+0xb8>
  402ff6:	f04f 0800 	mov.w	r8, #0
  402ffa:	f104 091a 	add.w	r9, r4, #26
  402ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403000:	425b      	negs	r3, r3
  403002:	4598      	cmp	r8, r3
  403004:	db01      	blt.n	40300a <_printf_float+0x2d6>
  403006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403008:	e78e      	b.n	402f28 <_printf_float+0x1f4>
  40300a:	2301      	movs	r3, #1
  40300c:	464a      	mov	r2, r9
  40300e:	4659      	mov	r1, fp
  403010:	4628      	mov	r0, r5
  403012:	47b0      	blx	r6
  403014:	3001      	adds	r0, #1
  403016:	f43f aee9 	beq.w	402dec <_printf_float+0xb8>
  40301a:	f108 0801 	add.w	r8, r8, #1
  40301e:	e7ee      	b.n	402ffe <_printf_float+0x2ca>
  403020:	7fefffff 	.word	0x7fefffff
  403024:	0040593c 	.word	0x0040593c
  403028:	00405940 	.word	0x00405940
  40302c:	0040594c 	.word	0x0040594c
  403030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403032:	6da3      	ldr	r3, [r4, #88]	; 0x58
  403034:	429a      	cmp	r2, r3
  403036:	bfa8      	it	ge
  403038:	461a      	movge	r2, r3
  40303a:	2a00      	cmp	r2, #0
  40303c:	4690      	mov	r8, r2
  40303e:	dc36      	bgt.n	4030ae <_printf_float+0x37a>
  403040:	f104 031a 	add.w	r3, r4, #26
  403044:	f04f 0a00 	mov.w	sl, #0
  403048:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  40304c:	930b      	str	r3, [sp, #44]	; 0x2c
  40304e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  403052:	eba9 0308 	sub.w	r3, r9, r8
  403056:	459a      	cmp	sl, r3
  403058:	db31      	blt.n	4030be <_printf_float+0x38a>
  40305a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40305c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40305e:	429a      	cmp	r2, r3
  403060:	db38      	blt.n	4030d4 <_printf_float+0x3a0>
  403062:	6823      	ldr	r3, [r4, #0]
  403064:	07da      	lsls	r2, r3, #31
  403066:	d435      	bmi.n	4030d4 <_printf_float+0x3a0>
  403068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40306a:	990d      	ldr	r1, [sp, #52]	; 0x34
  40306c:	eba3 0209 	sub.w	r2, r3, r9
  403070:	eba3 0801 	sub.w	r8, r3, r1
  403074:	4590      	cmp	r8, r2
  403076:	bfa8      	it	ge
  403078:	4690      	movge	r8, r2
  40307a:	f1b8 0f00 	cmp.w	r8, #0
  40307e:	dc31      	bgt.n	4030e4 <_printf_float+0x3b0>
  403080:	2700      	movs	r7, #0
  403082:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  403086:	f104 091a 	add.w	r9, r4, #26
  40308a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40308c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40308e:	1a9b      	subs	r3, r3, r2
  403090:	eba3 0308 	sub.w	r3, r3, r8
  403094:	429f      	cmp	r7, r3
  403096:	f6bf af78 	bge.w	402f8a <_printf_float+0x256>
  40309a:	2301      	movs	r3, #1
  40309c:	464a      	mov	r2, r9
  40309e:	4659      	mov	r1, fp
  4030a0:	4628      	mov	r0, r5
  4030a2:	47b0      	blx	r6
  4030a4:	3001      	adds	r0, #1
  4030a6:	f43f aea1 	beq.w	402dec <_printf_float+0xb8>
  4030aa:	3701      	adds	r7, #1
  4030ac:	e7ed      	b.n	40308a <_printf_float+0x356>
  4030ae:	4613      	mov	r3, r2
  4030b0:	4659      	mov	r1, fp
  4030b2:	463a      	mov	r2, r7
  4030b4:	4628      	mov	r0, r5
  4030b6:	47b0      	blx	r6
  4030b8:	3001      	adds	r0, #1
  4030ba:	d1c1      	bne.n	403040 <_printf_float+0x30c>
  4030bc:	e696      	b.n	402dec <_printf_float+0xb8>
  4030be:	2301      	movs	r3, #1
  4030c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4030c2:	4659      	mov	r1, fp
  4030c4:	4628      	mov	r0, r5
  4030c6:	47b0      	blx	r6
  4030c8:	3001      	adds	r0, #1
  4030ca:	f43f ae8f 	beq.w	402dec <_printf_float+0xb8>
  4030ce:	f10a 0a01 	add.w	sl, sl, #1
  4030d2:	e7bc      	b.n	40304e <_printf_float+0x31a>
  4030d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4030d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4030d8:	4659      	mov	r1, fp
  4030da:	4628      	mov	r0, r5
  4030dc:	47b0      	blx	r6
  4030de:	3001      	adds	r0, #1
  4030e0:	d1c2      	bne.n	403068 <_printf_float+0x334>
  4030e2:	e683      	b.n	402dec <_printf_float+0xb8>
  4030e4:	4643      	mov	r3, r8
  4030e6:	eb07 0209 	add.w	r2, r7, r9
  4030ea:	4659      	mov	r1, fp
  4030ec:	4628      	mov	r0, r5
  4030ee:	47b0      	blx	r6
  4030f0:	3001      	adds	r0, #1
  4030f2:	d1c5      	bne.n	403080 <_printf_float+0x34c>
  4030f4:	e67a      	b.n	402dec <_printf_float+0xb8>
  4030f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4030f8:	2a01      	cmp	r2, #1
  4030fa:	dc01      	bgt.n	403100 <_printf_float+0x3cc>
  4030fc:	07db      	lsls	r3, r3, #31
  4030fe:	d534      	bpl.n	40316a <_printf_float+0x436>
  403100:	2301      	movs	r3, #1
  403102:	463a      	mov	r2, r7
  403104:	4659      	mov	r1, fp
  403106:	4628      	mov	r0, r5
  403108:	47b0      	blx	r6
  40310a:	3001      	adds	r0, #1
  40310c:	f43f ae6e 	beq.w	402dec <_printf_float+0xb8>
  403110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403112:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403114:	4659      	mov	r1, fp
  403116:	4628      	mov	r0, r5
  403118:	47b0      	blx	r6
  40311a:	3001      	adds	r0, #1
  40311c:	f43f ae66 	beq.w	402dec <_printf_float+0xb8>
  403120:	2200      	movs	r2, #0
  403122:	2300      	movs	r3, #0
  403124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403128:	f7ff fce2 	bl	402af0 <__aeabi_dcmpeq>
  40312c:	b150      	cbz	r0, 403144 <_printf_float+0x410>
  40312e:	2700      	movs	r7, #0
  403130:	f104 081a 	add.w	r8, r4, #26
  403134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403136:	3b01      	subs	r3, #1
  403138:	429f      	cmp	r7, r3
  40313a:	db0c      	blt.n	403156 <_printf_float+0x422>
  40313c:	464b      	mov	r3, r9
  40313e:	f104 0250 	add.w	r2, r4, #80	; 0x50
  403142:	e6f2      	b.n	402f2a <_printf_float+0x1f6>
  403144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403146:	1c7a      	adds	r2, r7, #1
  403148:	3b01      	subs	r3, #1
  40314a:	4659      	mov	r1, fp
  40314c:	4628      	mov	r0, r5
  40314e:	47b0      	blx	r6
  403150:	3001      	adds	r0, #1
  403152:	d1f3      	bne.n	40313c <_printf_float+0x408>
  403154:	e64a      	b.n	402dec <_printf_float+0xb8>
  403156:	2301      	movs	r3, #1
  403158:	4642      	mov	r2, r8
  40315a:	4659      	mov	r1, fp
  40315c:	4628      	mov	r0, r5
  40315e:	47b0      	blx	r6
  403160:	3001      	adds	r0, #1
  403162:	f43f ae43 	beq.w	402dec <_printf_float+0xb8>
  403166:	3701      	adds	r7, #1
  403168:	e7e4      	b.n	403134 <_printf_float+0x400>
  40316a:	2301      	movs	r3, #1
  40316c:	463a      	mov	r2, r7
  40316e:	e7ec      	b.n	40314a <_printf_float+0x416>
  403170:	2301      	movs	r3, #1
  403172:	4642      	mov	r2, r8
  403174:	4659      	mov	r1, fp
  403176:	4628      	mov	r0, r5
  403178:	47b0      	blx	r6
  40317a:	3001      	adds	r0, #1
  40317c:	f43f ae36 	beq.w	402dec <_printf_float+0xb8>
  403180:	3701      	adds	r7, #1
  403182:	e708      	b.n	402f96 <_printf_float+0x262>
  403184:	463a      	mov	r2, r7
  403186:	464b      	mov	r3, r9
  403188:	4638      	mov	r0, r7
  40318a:	4649      	mov	r1, r9
  40318c:	f002 f986 	bl	40549c <__aeabi_dcmpun>
  403190:	2800      	cmp	r0, #0
  403192:	f43f ae30 	beq.w	402df6 <_printf_float+0xc2>
  403196:	4b01      	ldr	r3, [pc, #4]	; (40319c <_printf_float+0x468>)
  403198:	4f01      	ldr	r7, [pc, #4]	; (4031a0 <_printf_float+0x46c>)
  40319a:	e612      	b.n	402dc2 <_printf_float+0x8e>
  40319c:	00405944 	.word	0x00405944
  4031a0:	00405948 	.word	0x00405948

004031a4 <_printf_common>:
  4031a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4031a8:	4691      	mov	r9, r2
  4031aa:	461f      	mov	r7, r3
  4031ac:	688a      	ldr	r2, [r1, #8]
  4031ae:	690b      	ldr	r3, [r1, #16]
  4031b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4031b4:	4293      	cmp	r3, r2
  4031b6:	bfb8      	it	lt
  4031b8:	4613      	movlt	r3, r2
  4031ba:	f8c9 3000 	str.w	r3, [r9]
  4031be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4031c2:	4606      	mov	r6, r0
  4031c4:	460c      	mov	r4, r1
  4031c6:	b112      	cbz	r2, 4031ce <_printf_common+0x2a>
  4031c8:	3301      	adds	r3, #1
  4031ca:	f8c9 3000 	str.w	r3, [r9]
  4031ce:	6823      	ldr	r3, [r4, #0]
  4031d0:	0699      	lsls	r1, r3, #26
  4031d2:	bf42      	ittt	mi
  4031d4:	f8d9 3000 	ldrmi.w	r3, [r9]
  4031d8:	3302      	addmi	r3, #2
  4031da:	f8c9 3000 	strmi.w	r3, [r9]
  4031de:	6825      	ldr	r5, [r4, #0]
  4031e0:	f015 0506 	ands.w	r5, r5, #6
  4031e4:	d107      	bne.n	4031f6 <_printf_common+0x52>
  4031e6:	f104 0a19 	add.w	sl, r4, #25
  4031ea:	68e3      	ldr	r3, [r4, #12]
  4031ec:	f8d9 2000 	ldr.w	r2, [r9]
  4031f0:	1a9b      	subs	r3, r3, r2
  4031f2:	429d      	cmp	r5, r3
  4031f4:	db29      	blt.n	40324a <_printf_common+0xa6>
  4031f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4031fa:	6822      	ldr	r2, [r4, #0]
  4031fc:	3300      	adds	r3, #0
  4031fe:	bf18      	it	ne
  403200:	2301      	movne	r3, #1
  403202:	0692      	lsls	r2, r2, #26
  403204:	d42e      	bmi.n	403264 <_printf_common+0xc0>
  403206:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40320a:	4639      	mov	r1, r7
  40320c:	4630      	mov	r0, r6
  40320e:	47c0      	blx	r8
  403210:	3001      	adds	r0, #1
  403212:	d021      	beq.n	403258 <_printf_common+0xb4>
  403214:	6823      	ldr	r3, [r4, #0]
  403216:	68e5      	ldr	r5, [r4, #12]
  403218:	f8d9 2000 	ldr.w	r2, [r9]
  40321c:	f003 0306 	and.w	r3, r3, #6
  403220:	2b04      	cmp	r3, #4
  403222:	bf08      	it	eq
  403224:	1aad      	subeq	r5, r5, r2
  403226:	68a3      	ldr	r3, [r4, #8]
  403228:	6922      	ldr	r2, [r4, #16]
  40322a:	bf0c      	ite	eq
  40322c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  403230:	2500      	movne	r5, #0
  403232:	4293      	cmp	r3, r2
  403234:	bfc4      	itt	gt
  403236:	1a9b      	subgt	r3, r3, r2
  403238:	18ed      	addgt	r5, r5, r3
  40323a:	f04f 0900 	mov.w	r9, #0
  40323e:	341a      	adds	r4, #26
  403240:	454d      	cmp	r5, r9
  403242:	d11b      	bne.n	40327c <_printf_common+0xd8>
  403244:	2000      	movs	r0, #0
  403246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40324a:	2301      	movs	r3, #1
  40324c:	4652      	mov	r2, sl
  40324e:	4639      	mov	r1, r7
  403250:	4630      	mov	r0, r6
  403252:	47c0      	blx	r8
  403254:	3001      	adds	r0, #1
  403256:	d103      	bne.n	403260 <_printf_common+0xbc>
  403258:	f04f 30ff 	mov.w	r0, #4294967295
  40325c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403260:	3501      	adds	r5, #1
  403262:	e7c2      	b.n	4031ea <_printf_common+0x46>
  403264:	18e1      	adds	r1, r4, r3
  403266:	1c5a      	adds	r2, r3, #1
  403268:	2030      	movs	r0, #48	; 0x30
  40326a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  40326e:	4422      	add	r2, r4
  403270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  403274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  403278:	3302      	adds	r3, #2
  40327a:	e7c4      	b.n	403206 <_printf_common+0x62>
  40327c:	2301      	movs	r3, #1
  40327e:	4622      	mov	r2, r4
  403280:	4639      	mov	r1, r7
  403282:	4630      	mov	r0, r6
  403284:	47c0      	blx	r8
  403286:	3001      	adds	r0, #1
  403288:	d0e6      	beq.n	403258 <_printf_common+0xb4>
  40328a:	f109 0901 	add.w	r9, r9, #1
  40328e:	e7d7      	b.n	403240 <_printf_common+0x9c>

00403290 <_printf_i>:
  403290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403294:	4617      	mov	r7, r2
  403296:	7e0a      	ldrb	r2, [r1, #24]
  403298:	b085      	sub	sp, #20
  40329a:	2a6e      	cmp	r2, #110	; 0x6e
  40329c:	4698      	mov	r8, r3
  40329e:	4606      	mov	r6, r0
  4032a0:	460c      	mov	r4, r1
  4032a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4032a4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  4032a8:	f000 80bc 	beq.w	403424 <_printf_i+0x194>
  4032ac:	d81a      	bhi.n	4032e4 <_printf_i+0x54>
  4032ae:	2a63      	cmp	r2, #99	; 0x63
  4032b0:	d02e      	beq.n	403310 <_printf_i+0x80>
  4032b2:	d80a      	bhi.n	4032ca <_printf_i+0x3a>
  4032b4:	2a00      	cmp	r2, #0
  4032b6:	f000 80c8 	beq.w	40344a <_printf_i+0x1ba>
  4032ba:	2a58      	cmp	r2, #88	; 0x58
  4032bc:	f000 808a 	beq.w	4033d4 <_printf_i+0x144>
  4032c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4032c4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  4032c8:	e02a      	b.n	403320 <_printf_i+0x90>
  4032ca:	2a64      	cmp	r2, #100	; 0x64
  4032cc:	d001      	beq.n	4032d2 <_printf_i+0x42>
  4032ce:	2a69      	cmp	r2, #105	; 0x69
  4032d0:	d1f6      	bne.n	4032c0 <_printf_i+0x30>
  4032d2:	6821      	ldr	r1, [r4, #0]
  4032d4:	681a      	ldr	r2, [r3, #0]
  4032d6:	f011 0f80 	tst.w	r1, #128	; 0x80
  4032da:	d023      	beq.n	403324 <_printf_i+0x94>
  4032dc:	1d11      	adds	r1, r2, #4
  4032de:	6019      	str	r1, [r3, #0]
  4032e0:	6813      	ldr	r3, [r2, #0]
  4032e2:	e027      	b.n	403334 <_printf_i+0xa4>
  4032e4:	2a73      	cmp	r2, #115	; 0x73
  4032e6:	f000 80b4 	beq.w	403452 <_printf_i+0x1c2>
  4032ea:	d808      	bhi.n	4032fe <_printf_i+0x6e>
  4032ec:	2a6f      	cmp	r2, #111	; 0x6f
  4032ee:	d02a      	beq.n	403346 <_printf_i+0xb6>
  4032f0:	2a70      	cmp	r2, #112	; 0x70
  4032f2:	d1e5      	bne.n	4032c0 <_printf_i+0x30>
  4032f4:	680a      	ldr	r2, [r1, #0]
  4032f6:	f042 0220 	orr.w	r2, r2, #32
  4032fa:	600a      	str	r2, [r1, #0]
  4032fc:	e003      	b.n	403306 <_printf_i+0x76>
  4032fe:	2a75      	cmp	r2, #117	; 0x75
  403300:	d021      	beq.n	403346 <_printf_i+0xb6>
  403302:	2a78      	cmp	r2, #120	; 0x78
  403304:	d1dc      	bne.n	4032c0 <_printf_i+0x30>
  403306:	2278      	movs	r2, #120	; 0x78
  403308:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  40330c:	496e      	ldr	r1, [pc, #440]	; (4034c8 <_printf_i+0x238>)
  40330e:	e064      	b.n	4033da <_printf_i+0x14a>
  403310:	681a      	ldr	r2, [r3, #0]
  403312:	f101 0542 	add.w	r5, r1, #66	; 0x42
  403316:	1d11      	adds	r1, r2, #4
  403318:	6019      	str	r1, [r3, #0]
  40331a:	6813      	ldr	r3, [r2, #0]
  40331c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403320:	2301      	movs	r3, #1
  403322:	e0a3      	b.n	40346c <_printf_i+0x1dc>
  403324:	f011 0f40 	tst.w	r1, #64	; 0x40
  403328:	f102 0104 	add.w	r1, r2, #4
  40332c:	6019      	str	r1, [r3, #0]
  40332e:	d0d7      	beq.n	4032e0 <_printf_i+0x50>
  403330:	f9b2 3000 	ldrsh.w	r3, [r2]
  403334:	2b00      	cmp	r3, #0
  403336:	da03      	bge.n	403340 <_printf_i+0xb0>
  403338:	222d      	movs	r2, #45	; 0x2d
  40333a:	425b      	negs	r3, r3
  40333c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  403340:	4962      	ldr	r1, [pc, #392]	; (4034cc <_printf_i+0x23c>)
  403342:	220a      	movs	r2, #10
  403344:	e017      	b.n	403376 <_printf_i+0xe6>
  403346:	6820      	ldr	r0, [r4, #0]
  403348:	6819      	ldr	r1, [r3, #0]
  40334a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40334e:	d003      	beq.n	403358 <_printf_i+0xc8>
  403350:	1d08      	adds	r0, r1, #4
  403352:	6018      	str	r0, [r3, #0]
  403354:	680b      	ldr	r3, [r1, #0]
  403356:	e006      	b.n	403366 <_printf_i+0xd6>
  403358:	f010 0f40 	tst.w	r0, #64	; 0x40
  40335c:	f101 0004 	add.w	r0, r1, #4
  403360:	6018      	str	r0, [r3, #0]
  403362:	d0f7      	beq.n	403354 <_printf_i+0xc4>
  403364:	880b      	ldrh	r3, [r1, #0]
  403366:	4959      	ldr	r1, [pc, #356]	; (4034cc <_printf_i+0x23c>)
  403368:	2a6f      	cmp	r2, #111	; 0x6f
  40336a:	bf14      	ite	ne
  40336c:	220a      	movne	r2, #10
  40336e:	2208      	moveq	r2, #8
  403370:	2000      	movs	r0, #0
  403372:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  403376:	6865      	ldr	r5, [r4, #4]
  403378:	60a5      	str	r5, [r4, #8]
  40337a:	2d00      	cmp	r5, #0
  40337c:	f2c0 809c 	blt.w	4034b8 <_printf_i+0x228>
  403380:	6820      	ldr	r0, [r4, #0]
  403382:	f020 0004 	bic.w	r0, r0, #4
  403386:	6020      	str	r0, [r4, #0]
  403388:	2b00      	cmp	r3, #0
  40338a:	d13f      	bne.n	40340c <_printf_i+0x17c>
  40338c:	2d00      	cmp	r5, #0
  40338e:	f040 8095 	bne.w	4034bc <_printf_i+0x22c>
  403392:	4675      	mov	r5, lr
  403394:	2a08      	cmp	r2, #8
  403396:	d10b      	bne.n	4033b0 <_printf_i+0x120>
  403398:	6823      	ldr	r3, [r4, #0]
  40339a:	07da      	lsls	r2, r3, #31
  40339c:	d508      	bpl.n	4033b0 <_printf_i+0x120>
  40339e:	6923      	ldr	r3, [r4, #16]
  4033a0:	6862      	ldr	r2, [r4, #4]
  4033a2:	429a      	cmp	r2, r3
  4033a4:	bfde      	ittt	le
  4033a6:	2330      	movle	r3, #48	; 0x30
  4033a8:	f805 3c01 	strble.w	r3, [r5, #-1]
  4033ac:	f105 35ff 	addle.w	r5, r5, #4294967295
  4033b0:	ebae 0305 	sub.w	r3, lr, r5
  4033b4:	6123      	str	r3, [r4, #16]
  4033b6:	f8cd 8000 	str.w	r8, [sp]
  4033ba:	463b      	mov	r3, r7
  4033bc:	aa03      	add	r2, sp, #12
  4033be:	4621      	mov	r1, r4
  4033c0:	4630      	mov	r0, r6
  4033c2:	f7ff feef 	bl	4031a4 <_printf_common>
  4033c6:	3001      	adds	r0, #1
  4033c8:	d155      	bne.n	403476 <_printf_i+0x1e6>
  4033ca:	f04f 30ff 	mov.w	r0, #4294967295
  4033ce:	b005      	add	sp, #20
  4033d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4033d4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  4033d8:	493c      	ldr	r1, [pc, #240]	; (4034cc <_printf_i+0x23c>)
  4033da:	6822      	ldr	r2, [r4, #0]
  4033dc:	6818      	ldr	r0, [r3, #0]
  4033de:	f012 0f80 	tst.w	r2, #128	; 0x80
  4033e2:	f100 0504 	add.w	r5, r0, #4
  4033e6:	601d      	str	r5, [r3, #0]
  4033e8:	d001      	beq.n	4033ee <_printf_i+0x15e>
  4033ea:	6803      	ldr	r3, [r0, #0]
  4033ec:	e002      	b.n	4033f4 <_printf_i+0x164>
  4033ee:	0655      	lsls	r5, r2, #25
  4033f0:	d5fb      	bpl.n	4033ea <_printf_i+0x15a>
  4033f2:	8803      	ldrh	r3, [r0, #0]
  4033f4:	07d0      	lsls	r0, r2, #31
  4033f6:	bf44      	itt	mi
  4033f8:	f042 0220 	orrmi.w	r2, r2, #32
  4033fc:	6022      	strmi	r2, [r4, #0]
  4033fe:	b91b      	cbnz	r3, 403408 <_printf_i+0x178>
  403400:	6822      	ldr	r2, [r4, #0]
  403402:	f022 0220 	bic.w	r2, r2, #32
  403406:	6022      	str	r2, [r4, #0]
  403408:	2210      	movs	r2, #16
  40340a:	e7b1      	b.n	403370 <_printf_i+0xe0>
  40340c:	4675      	mov	r5, lr
  40340e:	fbb3 f0f2 	udiv	r0, r3, r2
  403412:	fb02 3310 	mls	r3, r2, r0, r3
  403416:	5ccb      	ldrb	r3, [r1, r3]
  403418:	f805 3d01 	strb.w	r3, [r5, #-1]!
  40341c:	4603      	mov	r3, r0
  40341e:	2800      	cmp	r0, #0
  403420:	d1f5      	bne.n	40340e <_printf_i+0x17e>
  403422:	e7b7      	b.n	403394 <_printf_i+0x104>
  403424:	6808      	ldr	r0, [r1, #0]
  403426:	681a      	ldr	r2, [r3, #0]
  403428:	6949      	ldr	r1, [r1, #20]
  40342a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40342e:	d004      	beq.n	40343a <_printf_i+0x1aa>
  403430:	1d10      	adds	r0, r2, #4
  403432:	6018      	str	r0, [r3, #0]
  403434:	6813      	ldr	r3, [r2, #0]
  403436:	6019      	str	r1, [r3, #0]
  403438:	e007      	b.n	40344a <_printf_i+0x1ba>
  40343a:	f010 0f40 	tst.w	r0, #64	; 0x40
  40343e:	f102 0004 	add.w	r0, r2, #4
  403442:	6018      	str	r0, [r3, #0]
  403444:	6813      	ldr	r3, [r2, #0]
  403446:	d0f6      	beq.n	403436 <_printf_i+0x1a6>
  403448:	8019      	strh	r1, [r3, #0]
  40344a:	2300      	movs	r3, #0
  40344c:	6123      	str	r3, [r4, #16]
  40344e:	4675      	mov	r5, lr
  403450:	e7b1      	b.n	4033b6 <_printf_i+0x126>
  403452:	681a      	ldr	r2, [r3, #0]
  403454:	1d11      	adds	r1, r2, #4
  403456:	6019      	str	r1, [r3, #0]
  403458:	6815      	ldr	r5, [r2, #0]
  40345a:	6862      	ldr	r2, [r4, #4]
  40345c:	2100      	movs	r1, #0
  40345e:	4628      	mov	r0, r5
  403460:	f001 f966 	bl	404730 <memchr>
  403464:	b108      	cbz	r0, 40346a <_printf_i+0x1da>
  403466:	1b40      	subs	r0, r0, r5
  403468:	6060      	str	r0, [r4, #4]
  40346a:	6863      	ldr	r3, [r4, #4]
  40346c:	6123      	str	r3, [r4, #16]
  40346e:	2300      	movs	r3, #0
  403470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403474:	e79f      	b.n	4033b6 <_printf_i+0x126>
  403476:	6923      	ldr	r3, [r4, #16]
  403478:	462a      	mov	r2, r5
  40347a:	4639      	mov	r1, r7
  40347c:	4630      	mov	r0, r6
  40347e:	47c0      	blx	r8
  403480:	3001      	adds	r0, #1
  403482:	d0a2      	beq.n	4033ca <_printf_i+0x13a>
  403484:	6823      	ldr	r3, [r4, #0]
  403486:	079b      	lsls	r3, r3, #30
  403488:	d507      	bpl.n	40349a <_printf_i+0x20a>
  40348a:	2500      	movs	r5, #0
  40348c:	f104 0919 	add.w	r9, r4, #25
  403490:	68e3      	ldr	r3, [r4, #12]
  403492:	9a03      	ldr	r2, [sp, #12]
  403494:	1a9b      	subs	r3, r3, r2
  403496:	429d      	cmp	r5, r3
  403498:	db05      	blt.n	4034a6 <_printf_i+0x216>
  40349a:	68e0      	ldr	r0, [r4, #12]
  40349c:	9b03      	ldr	r3, [sp, #12]
  40349e:	4298      	cmp	r0, r3
  4034a0:	bfb8      	it	lt
  4034a2:	4618      	movlt	r0, r3
  4034a4:	e793      	b.n	4033ce <_printf_i+0x13e>
  4034a6:	2301      	movs	r3, #1
  4034a8:	464a      	mov	r2, r9
  4034aa:	4639      	mov	r1, r7
  4034ac:	4630      	mov	r0, r6
  4034ae:	47c0      	blx	r8
  4034b0:	3001      	adds	r0, #1
  4034b2:	d08a      	beq.n	4033ca <_printf_i+0x13a>
  4034b4:	3501      	adds	r5, #1
  4034b6:	e7eb      	b.n	403490 <_printf_i+0x200>
  4034b8:	2b00      	cmp	r3, #0
  4034ba:	d1a7      	bne.n	40340c <_printf_i+0x17c>
  4034bc:	780b      	ldrb	r3, [r1, #0]
  4034be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4034c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4034c6:	e765      	b.n	403394 <_printf_i+0x104>
  4034c8:	0040595f 	.word	0x0040595f
  4034cc:	0040594e 	.word	0x0040594e

004034d0 <iprintf>:
  4034d0:	b40f      	push	{r0, r1, r2, r3}
  4034d2:	4b0a      	ldr	r3, [pc, #40]	; (4034fc <iprintf+0x2c>)
  4034d4:	b513      	push	{r0, r1, r4, lr}
  4034d6:	681c      	ldr	r4, [r3, #0]
  4034d8:	b124      	cbz	r4, 4034e4 <iprintf+0x14>
  4034da:	69a3      	ldr	r3, [r4, #24]
  4034dc:	b913      	cbnz	r3, 4034e4 <iprintf+0x14>
  4034de:	4620      	mov	r0, r4
  4034e0:	f001 f81e 	bl	404520 <__sinit>
  4034e4:	ab05      	add	r3, sp, #20
  4034e6:	9a04      	ldr	r2, [sp, #16]
  4034e8:	68a1      	ldr	r1, [r4, #8]
  4034ea:	9301      	str	r3, [sp, #4]
  4034ec:	4620      	mov	r0, r4
  4034ee:	f001 fd21 	bl	404f34 <_vfiprintf_r>
  4034f2:	b002      	add	sp, #8
  4034f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4034f8:	b004      	add	sp, #16
  4034fa:	4770      	bx	lr
  4034fc:	20400048 	.word	0x20400048

00403500 <setbuf>:
  403500:	2900      	cmp	r1, #0
  403502:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403506:	bf0c      	ite	eq
  403508:	2202      	moveq	r2, #2
  40350a:	2200      	movne	r2, #0
  40350c:	f000 b800 	b.w	403510 <setvbuf>

00403510 <setvbuf>:
  403510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403514:	461d      	mov	r5, r3
  403516:	4b51      	ldr	r3, [pc, #324]	; (40365c <setvbuf+0x14c>)
  403518:	681e      	ldr	r6, [r3, #0]
  40351a:	4604      	mov	r4, r0
  40351c:	460f      	mov	r7, r1
  40351e:	4690      	mov	r8, r2
  403520:	b126      	cbz	r6, 40352c <setvbuf+0x1c>
  403522:	69b3      	ldr	r3, [r6, #24]
  403524:	b913      	cbnz	r3, 40352c <setvbuf+0x1c>
  403526:	4630      	mov	r0, r6
  403528:	f000 fffa 	bl	404520 <__sinit>
  40352c:	4b4c      	ldr	r3, [pc, #304]	; (403660 <setvbuf+0x150>)
  40352e:	429c      	cmp	r4, r3
  403530:	d152      	bne.n	4035d8 <setvbuf+0xc8>
  403532:	6874      	ldr	r4, [r6, #4]
  403534:	f1b8 0f02 	cmp.w	r8, #2
  403538:	d006      	beq.n	403548 <setvbuf+0x38>
  40353a:	f1b8 0f01 	cmp.w	r8, #1
  40353e:	f200 8089 	bhi.w	403654 <setvbuf+0x144>
  403542:	2d00      	cmp	r5, #0
  403544:	f2c0 8086 	blt.w	403654 <setvbuf+0x144>
  403548:	4621      	mov	r1, r4
  40354a:	4630      	mov	r0, r6
  40354c:	f000 ff7e 	bl	40444c <_fflush_r>
  403550:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403552:	b141      	cbz	r1, 403566 <setvbuf+0x56>
  403554:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403558:	4299      	cmp	r1, r3
  40355a:	d002      	beq.n	403562 <setvbuf+0x52>
  40355c:	4630      	mov	r0, r6
  40355e:	f001 fc15 	bl	404d8c <_free_r>
  403562:	2300      	movs	r3, #0
  403564:	6363      	str	r3, [r4, #52]	; 0x34
  403566:	2300      	movs	r3, #0
  403568:	61a3      	str	r3, [r4, #24]
  40356a:	6063      	str	r3, [r4, #4]
  40356c:	89a3      	ldrh	r3, [r4, #12]
  40356e:	061b      	lsls	r3, r3, #24
  403570:	d503      	bpl.n	40357a <setvbuf+0x6a>
  403572:	6921      	ldr	r1, [r4, #16]
  403574:	4630      	mov	r0, r6
  403576:	f001 fc09 	bl	404d8c <_free_r>
  40357a:	89a3      	ldrh	r3, [r4, #12]
  40357c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403580:	f023 0303 	bic.w	r3, r3, #3
  403584:	f1b8 0f02 	cmp.w	r8, #2
  403588:	81a3      	strh	r3, [r4, #12]
  40358a:	d05d      	beq.n	403648 <setvbuf+0x138>
  40358c:	ab01      	add	r3, sp, #4
  40358e:	466a      	mov	r2, sp
  403590:	4621      	mov	r1, r4
  403592:	4630      	mov	r0, r6
  403594:	f001 f85c 	bl	404650 <__swhatbuf_r>
  403598:	89a3      	ldrh	r3, [r4, #12]
  40359a:	4318      	orrs	r0, r3
  40359c:	81a0      	strh	r0, [r4, #12]
  40359e:	bb2d      	cbnz	r5, 4035ec <setvbuf+0xdc>
  4035a0:	9d00      	ldr	r5, [sp, #0]
  4035a2:	4628      	mov	r0, r5
  4035a4:	f001 f8b8 	bl	404718 <malloc>
  4035a8:	4607      	mov	r7, r0
  4035aa:	2800      	cmp	r0, #0
  4035ac:	d14e      	bne.n	40364c <setvbuf+0x13c>
  4035ae:	f8dd 9000 	ldr.w	r9, [sp]
  4035b2:	45a9      	cmp	r9, r5
  4035b4:	d13c      	bne.n	403630 <setvbuf+0x120>
  4035b6:	f04f 30ff 	mov.w	r0, #4294967295
  4035ba:	89a3      	ldrh	r3, [r4, #12]
  4035bc:	f043 0302 	orr.w	r3, r3, #2
  4035c0:	81a3      	strh	r3, [r4, #12]
  4035c2:	2300      	movs	r3, #0
  4035c4:	60a3      	str	r3, [r4, #8]
  4035c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4035ca:	6023      	str	r3, [r4, #0]
  4035cc:	6123      	str	r3, [r4, #16]
  4035ce:	2301      	movs	r3, #1
  4035d0:	6163      	str	r3, [r4, #20]
  4035d2:	b003      	add	sp, #12
  4035d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4035d8:	4b22      	ldr	r3, [pc, #136]	; (403664 <setvbuf+0x154>)
  4035da:	429c      	cmp	r4, r3
  4035dc:	d101      	bne.n	4035e2 <setvbuf+0xd2>
  4035de:	68b4      	ldr	r4, [r6, #8]
  4035e0:	e7a8      	b.n	403534 <setvbuf+0x24>
  4035e2:	4b21      	ldr	r3, [pc, #132]	; (403668 <setvbuf+0x158>)
  4035e4:	429c      	cmp	r4, r3
  4035e6:	bf08      	it	eq
  4035e8:	68f4      	ldreq	r4, [r6, #12]
  4035ea:	e7a3      	b.n	403534 <setvbuf+0x24>
  4035ec:	2f00      	cmp	r7, #0
  4035ee:	d0d8      	beq.n	4035a2 <setvbuf+0x92>
  4035f0:	69b3      	ldr	r3, [r6, #24]
  4035f2:	b913      	cbnz	r3, 4035fa <setvbuf+0xea>
  4035f4:	4630      	mov	r0, r6
  4035f6:	f000 ff93 	bl	404520 <__sinit>
  4035fa:	f1b8 0f01 	cmp.w	r8, #1
  4035fe:	bf08      	it	eq
  403600:	89a3      	ldrheq	r3, [r4, #12]
  403602:	6027      	str	r7, [r4, #0]
  403604:	bf04      	itt	eq
  403606:	f043 0301 	orreq.w	r3, r3, #1
  40360a:	81a3      	strheq	r3, [r4, #12]
  40360c:	89a3      	ldrh	r3, [r4, #12]
  40360e:	6127      	str	r7, [r4, #16]
  403610:	f013 0008 	ands.w	r0, r3, #8
  403614:	6165      	str	r5, [r4, #20]
  403616:	d01b      	beq.n	403650 <setvbuf+0x140>
  403618:	f013 0001 	ands.w	r0, r3, #1
  40361c:	bf18      	it	ne
  40361e:	426d      	negne	r5, r5
  403620:	f04f 0300 	mov.w	r3, #0
  403624:	bf1d      	ittte	ne
  403626:	60a3      	strne	r3, [r4, #8]
  403628:	61a5      	strne	r5, [r4, #24]
  40362a:	4618      	movne	r0, r3
  40362c:	60a5      	streq	r5, [r4, #8]
  40362e:	e7d0      	b.n	4035d2 <setvbuf+0xc2>
  403630:	4648      	mov	r0, r9
  403632:	f001 f871 	bl	404718 <malloc>
  403636:	4607      	mov	r7, r0
  403638:	2800      	cmp	r0, #0
  40363a:	d0bc      	beq.n	4035b6 <setvbuf+0xa6>
  40363c:	89a3      	ldrh	r3, [r4, #12]
  40363e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403642:	81a3      	strh	r3, [r4, #12]
  403644:	464d      	mov	r5, r9
  403646:	e7d3      	b.n	4035f0 <setvbuf+0xe0>
  403648:	2000      	movs	r0, #0
  40364a:	e7b6      	b.n	4035ba <setvbuf+0xaa>
  40364c:	46a9      	mov	r9, r5
  40364e:	e7f5      	b.n	40363c <setvbuf+0x12c>
  403650:	60a0      	str	r0, [r4, #8]
  403652:	e7be      	b.n	4035d2 <setvbuf+0xc2>
  403654:	f04f 30ff 	mov.w	r0, #4294967295
  403658:	e7bb      	b.n	4035d2 <setvbuf+0xc2>
  40365a:	bf00      	nop
  40365c:	20400048 	.word	0x20400048
  403660:	004059a0 	.word	0x004059a0
  403664:	004059c0 	.word	0x004059c0
  403668:	00405980 	.word	0x00405980

0040366c <strlen>:
  40366c:	4603      	mov	r3, r0
  40366e:	f813 2b01 	ldrb.w	r2, [r3], #1
  403672:	2a00      	cmp	r2, #0
  403674:	d1fb      	bne.n	40366e <strlen+0x2>
  403676:	1a18      	subs	r0, r3, r0
  403678:	3801      	subs	r0, #1
  40367a:	4770      	bx	lr

0040367c <quorem>:
  40367c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403680:	6903      	ldr	r3, [r0, #16]
  403682:	690c      	ldr	r4, [r1, #16]
  403684:	429c      	cmp	r4, r3
  403686:	4680      	mov	r8, r0
  403688:	f300 8082 	bgt.w	403790 <quorem+0x114>
  40368c:	3c01      	subs	r4, #1
  40368e:	f101 0714 	add.w	r7, r1, #20
  403692:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  403696:	f100 0614 	add.w	r6, r0, #20
  40369a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  40369e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  4036a2:	eb06 030e 	add.w	r3, r6, lr
  4036a6:	3501      	adds	r5, #1
  4036a8:	eb07 090e 	add.w	r9, r7, lr
  4036ac:	9301      	str	r3, [sp, #4]
  4036ae:	fbb0 f5f5 	udiv	r5, r0, r5
  4036b2:	b395      	cbz	r5, 40371a <quorem+0x9e>
  4036b4:	f04f 0a00 	mov.w	sl, #0
  4036b8:	4638      	mov	r0, r7
  4036ba:	46b4      	mov	ip, r6
  4036bc:	46d3      	mov	fp, sl
  4036be:	f850 2b04 	ldr.w	r2, [r0], #4
  4036c2:	b293      	uxth	r3, r2
  4036c4:	fb05 a303 	mla	r3, r5, r3, sl
  4036c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4036cc:	b29b      	uxth	r3, r3
  4036ce:	ebab 0303 	sub.w	r3, fp, r3
  4036d2:	0c12      	lsrs	r2, r2, #16
  4036d4:	f8bc b000 	ldrh.w	fp, [ip]
  4036d8:	fb05 a202 	mla	r2, r5, r2, sl
  4036dc:	fa13 f38b 	uxtah	r3, r3, fp
  4036e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  4036e4:	fa1f fb82 	uxth.w	fp, r2
  4036e8:	f8dc 2000 	ldr.w	r2, [ip]
  4036ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  4036f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4036f4:	b29b      	uxth	r3, r3
  4036f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4036fa:	4581      	cmp	r9, r0
  4036fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
  403700:	f84c 3b04 	str.w	r3, [ip], #4
  403704:	d2db      	bcs.n	4036be <quorem+0x42>
  403706:	f856 300e 	ldr.w	r3, [r6, lr]
  40370a:	b933      	cbnz	r3, 40371a <quorem+0x9e>
  40370c:	9b01      	ldr	r3, [sp, #4]
  40370e:	3b04      	subs	r3, #4
  403710:	429e      	cmp	r6, r3
  403712:	461a      	mov	r2, r3
  403714:	d330      	bcc.n	403778 <quorem+0xfc>
  403716:	f8c8 4010 	str.w	r4, [r8, #16]
  40371a:	4640      	mov	r0, r8
  40371c:	f001 fa61 	bl	404be2 <__mcmp>
  403720:	2800      	cmp	r0, #0
  403722:	db25      	blt.n	403770 <quorem+0xf4>
  403724:	3501      	adds	r5, #1
  403726:	4630      	mov	r0, r6
  403728:	f04f 0e00 	mov.w	lr, #0
  40372c:	f857 2b04 	ldr.w	r2, [r7], #4
  403730:	f8d0 c000 	ldr.w	ip, [r0]
  403734:	b293      	uxth	r3, r2
  403736:	ebae 0303 	sub.w	r3, lr, r3
  40373a:	0c12      	lsrs	r2, r2, #16
  40373c:	fa13 f38c 	uxtah	r3, r3, ip
  403740:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  403744:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403748:	b29b      	uxth	r3, r3
  40374a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40374e:	45b9      	cmp	r9, r7
  403750:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403754:	f840 3b04 	str.w	r3, [r0], #4
  403758:	d2e8      	bcs.n	40372c <quorem+0xb0>
  40375a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40375e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  403762:	b92a      	cbnz	r2, 403770 <quorem+0xf4>
  403764:	3b04      	subs	r3, #4
  403766:	429e      	cmp	r6, r3
  403768:	461a      	mov	r2, r3
  40376a:	d30b      	bcc.n	403784 <quorem+0x108>
  40376c:	f8c8 4010 	str.w	r4, [r8, #16]
  403770:	4628      	mov	r0, r5
  403772:	b003      	add	sp, #12
  403774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403778:	6812      	ldr	r2, [r2, #0]
  40377a:	3b04      	subs	r3, #4
  40377c:	2a00      	cmp	r2, #0
  40377e:	d1ca      	bne.n	403716 <quorem+0x9a>
  403780:	3c01      	subs	r4, #1
  403782:	e7c5      	b.n	403710 <quorem+0x94>
  403784:	6812      	ldr	r2, [r2, #0]
  403786:	3b04      	subs	r3, #4
  403788:	2a00      	cmp	r2, #0
  40378a:	d1ef      	bne.n	40376c <quorem+0xf0>
  40378c:	3c01      	subs	r4, #1
  40378e:	e7ea      	b.n	403766 <quorem+0xea>
  403790:	2000      	movs	r0, #0
  403792:	e7ee      	b.n	403772 <quorem+0xf6>
  403794:	0000      	movs	r0, r0
	...

00403798 <_dtoa_r>:
  403798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40379c:	6a46      	ldr	r6, [r0, #36]	; 0x24
  40379e:	b095      	sub	sp, #84	; 0x54
  4037a0:	4604      	mov	r4, r0
  4037a2:	9d21      	ldr	r5, [sp, #132]	; 0x84
  4037a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4037a8:	b93e      	cbnz	r6, 4037ba <_dtoa_r+0x22>
  4037aa:	2010      	movs	r0, #16
  4037ac:	f000 ffb4 	bl	404718 <malloc>
  4037b0:	6260      	str	r0, [r4, #36]	; 0x24
  4037b2:	6046      	str	r6, [r0, #4]
  4037b4:	6086      	str	r6, [r0, #8]
  4037b6:	6006      	str	r6, [r0, #0]
  4037b8:	60c6      	str	r6, [r0, #12]
  4037ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4037bc:	6819      	ldr	r1, [r3, #0]
  4037be:	b151      	cbz	r1, 4037d6 <_dtoa_r+0x3e>
  4037c0:	685a      	ldr	r2, [r3, #4]
  4037c2:	604a      	str	r2, [r1, #4]
  4037c4:	2301      	movs	r3, #1
  4037c6:	4093      	lsls	r3, r2
  4037c8:	608b      	str	r3, [r1, #8]
  4037ca:	4620      	mov	r0, r4
  4037cc:	f001 f834 	bl	404838 <_Bfree>
  4037d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4037d2:	2200      	movs	r2, #0
  4037d4:	601a      	str	r2, [r3, #0]
  4037d6:	9b03      	ldr	r3, [sp, #12]
  4037d8:	2b00      	cmp	r3, #0
  4037da:	bfbf      	itttt	lt
  4037dc:	2301      	movlt	r3, #1
  4037de:	602b      	strlt	r3, [r5, #0]
  4037e0:	9b03      	ldrlt	r3, [sp, #12]
  4037e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4037e6:	bfb2      	itee	lt
  4037e8:	9303      	strlt	r3, [sp, #12]
  4037ea:	2300      	movge	r3, #0
  4037ec:	602b      	strge	r3, [r5, #0]
  4037ee:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4037f2:	4ba9      	ldr	r3, [pc, #676]	; (403a98 <_dtoa_r+0x300>)
  4037f4:	ea33 0309 	bics.w	r3, r3, r9
  4037f8:	d11b      	bne.n	403832 <_dtoa_r+0x9a>
  4037fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4037fc:	f242 730f 	movw	r3, #9999	; 0x270f
  403800:	6013      	str	r3, [r2, #0]
  403802:	9b02      	ldr	r3, [sp, #8]
  403804:	b923      	cbnz	r3, 403810 <_dtoa_r+0x78>
  403806:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40380a:	2800      	cmp	r0, #0
  40380c:	f000 8581 	beq.w	404312 <_dtoa_r+0xb7a>
  403810:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403812:	b953      	cbnz	r3, 40382a <_dtoa_r+0x92>
  403814:	4ba1      	ldr	r3, [pc, #644]	; (403a9c <_dtoa_r+0x304>)
  403816:	e021      	b.n	40385c <_dtoa_r+0xc4>
  403818:	4ba1      	ldr	r3, [pc, #644]	; (403aa0 <_dtoa_r+0x308>)
  40381a:	9306      	str	r3, [sp, #24]
  40381c:	3308      	adds	r3, #8
  40381e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403820:	6013      	str	r3, [r2, #0]
  403822:	9806      	ldr	r0, [sp, #24]
  403824:	b015      	add	sp, #84	; 0x54
  403826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40382a:	4b9c      	ldr	r3, [pc, #624]	; (403a9c <_dtoa_r+0x304>)
  40382c:	9306      	str	r3, [sp, #24]
  40382e:	3303      	adds	r3, #3
  403830:	e7f5      	b.n	40381e <_dtoa_r+0x86>
  403832:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  403836:	2200      	movs	r2, #0
  403838:	2300      	movs	r3, #0
  40383a:	4630      	mov	r0, r6
  40383c:	4639      	mov	r1, r7
  40383e:	f7ff f957 	bl	402af0 <__aeabi_dcmpeq>
  403842:	4680      	mov	r8, r0
  403844:	b160      	cbz	r0, 403860 <_dtoa_r+0xc8>
  403846:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403848:	2301      	movs	r3, #1
  40384a:	6013      	str	r3, [r2, #0]
  40384c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40384e:	2b00      	cmp	r3, #0
  403850:	f000 855c 	beq.w	40430c <_dtoa_r+0xb74>
  403854:	4b93      	ldr	r3, [pc, #588]	; (403aa4 <_dtoa_r+0x30c>)
  403856:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403858:	6013      	str	r3, [r2, #0]
  40385a:	3b01      	subs	r3, #1
  40385c:	9306      	str	r3, [sp, #24]
  40385e:	e7e0      	b.n	403822 <_dtoa_r+0x8a>
  403860:	ab12      	add	r3, sp, #72	; 0x48
  403862:	9301      	str	r3, [sp, #4]
  403864:	ab13      	add	r3, sp, #76	; 0x4c
  403866:	9300      	str	r3, [sp, #0]
  403868:	4632      	mov	r2, r6
  40386a:	463b      	mov	r3, r7
  40386c:	4620      	mov	r0, r4
  40386e:	f001 fa30 	bl	404cd2 <__d2b>
  403872:	f3c9 550a 	ubfx	r5, r9, #20, #11
  403876:	4682      	mov	sl, r0
  403878:	2d00      	cmp	r5, #0
  40387a:	d07c      	beq.n	403976 <_dtoa_r+0x1de>
  40387c:	f3c7 0313 	ubfx	r3, r7, #0, #20
  403880:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  403884:	4630      	mov	r0, r6
  403886:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40388a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40388e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  403892:	2200      	movs	r2, #0
  403894:	4b84      	ldr	r3, [pc, #528]	; (403aa8 <_dtoa_r+0x310>)
  403896:	f7fe fd0f 	bl	4022b8 <__aeabi_dsub>
  40389a:	a379      	add	r3, pc, #484	; (adr r3, 403a80 <_dtoa_r+0x2e8>)
  40389c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038a0:	f7fe febe 	bl	402620 <__aeabi_dmul>
  4038a4:	a378      	add	r3, pc, #480	; (adr r3, 403a88 <_dtoa_r+0x2f0>)
  4038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038aa:	f7fe fd07 	bl	4022bc <__adddf3>
  4038ae:	4606      	mov	r6, r0
  4038b0:	4628      	mov	r0, r5
  4038b2:	460f      	mov	r7, r1
  4038b4:	f7fe fe4e 	bl	402554 <__aeabi_i2d>
  4038b8:	a375      	add	r3, pc, #468	; (adr r3, 403a90 <_dtoa_r+0x2f8>)
  4038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038be:	f7fe feaf 	bl	402620 <__aeabi_dmul>
  4038c2:	4602      	mov	r2, r0
  4038c4:	460b      	mov	r3, r1
  4038c6:	4630      	mov	r0, r6
  4038c8:	4639      	mov	r1, r7
  4038ca:	f7fe fcf7 	bl	4022bc <__adddf3>
  4038ce:	4606      	mov	r6, r0
  4038d0:	460f      	mov	r7, r1
  4038d2:	f7ff f93f 	bl	402b54 <__aeabi_d2iz>
  4038d6:	2200      	movs	r2, #0
  4038d8:	4683      	mov	fp, r0
  4038da:	2300      	movs	r3, #0
  4038dc:	4630      	mov	r0, r6
  4038de:	4639      	mov	r1, r7
  4038e0:	f7ff f910 	bl	402b04 <__aeabi_dcmplt>
  4038e4:	b158      	cbz	r0, 4038fe <_dtoa_r+0x166>
  4038e6:	4658      	mov	r0, fp
  4038e8:	f7fe fe34 	bl	402554 <__aeabi_i2d>
  4038ec:	4602      	mov	r2, r0
  4038ee:	460b      	mov	r3, r1
  4038f0:	4630      	mov	r0, r6
  4038f2:	4639      	mov	r1, r7
  4038f4:	f7ff f8fc 	bl	402af0 <__aeabi_dcmpeq>
  4038f8:	b908      	cbnz	r0, 4038fe <_dtoa_r+0x166>
  4038fa:	f10b 3bff 	add.w	fp, fp, #4294967295
  4038fe:	f1bb 0f16 	cmp.w	fp, #22
  403902:	d857      	bhi.n	4039b4 <_dtoa_r+0x21c>
  403904:	4969      	ldr	r1, [pc, #420]	; (403aac <_dtoa_r+0x314>)
  403906:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40390a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40390e:	e9d1 0100 	ldrd	r0, r1, [r1]
  403912:	f7ff f915 	bl	402b40 <__aeabi_dcmpgt>
  403916:	2800      	cmp	r0, #0
  403918:	d04e      	beq.n	4039b8 <_dtoa_r+0x220>
  40391a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40391e:	2300      	movs	r3, #0
  403920:	930d      	str	r3, [sp, #52]	; 0x34
  403922:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403924:	1b5d      	subs	r5, r3, r5
  403926:	1e6b      	subs	r3, r5, #1
  403928:	9307      	str	r3, [sp, #28]
  40392a:	bf43      	ittte	mi
  40392c:	2300      	movmi	r3, #0
  40392e:	f1c5 0801 	rsbmi	r8, r5, #1
  403932:	9307      	strmi	r3, [sp, #28]
  403934:	f04f 0800 	movpl.w	r8, #0
  403938:	f1bb 0f00 	cmp.w	fp, #0
  40393c:	db3e      	blt.n	4039bc <_dtoa_r+0x224>
  40393e:	9b07      	ldr	r3, [sp, #28]
  403940:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  403944:	445b      	add	r3, fp
  403946:	9307      	str	r3, [sp, #28]
  403948:	2300      	movs	r3, #0
  40394a:	9308      	str	r3, [sp, #32]
  40394c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40394e:	2b09      	cmp	r3, #9
  403950:	f200 80b0 	bhi.w	403ab4 <_dtoa_r+0x31c>
  403954:	2b05      	cmp	r3, #5
  403956:	bfc4      	itt	gt
  403958:	3b04      	subgt	r3, #4
  40395a:	931e      	strgt	r3, [sp, #120]	; 0x78
  40395c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40395e:	f1a3 0302 	sub.w	r3, r3, #2
  403962:	bfcc      	ite	gt
  403964:	2600      	movgt	r6, #0
  403966:	2601      	movle	r6, #1
  403968:	2b03      	cmp	r3, #3
  40396a:	f200 80af 	bhi.w	403acc <_dtoa_r+0x334>
  40396e:	e8df f003 	tbb	[pc, r3]
  403972:	8583      	.short	0x8583
  403974:	772d      	.short	0x772d
  403976:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403978:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40397a:	441d      	add	r5, r3
  40397c:	f205 4332 	addw	r3, r5, #1074	; 0x432
  403980:	2b20      	cmp	r3, #32
  403982:	dd11      	ble.n	4039a8 <_dtoa_r+0x210>
  403984:	9a02      	ldr	r2, [sp, #8]
  403986:	f205 4012 	addw	r0, r5, #1042	; 0x412
  40398a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40398e:	fa22 f000 	lsr.w	r0, r2, r0
  403992:	fa09 f303 	lsl.w	r3, r9, r3
  403996:	4318      	orrs	r0, r3
  403998:	f7fe fdcc 	bl	402534 <__aeabi_ui2d>
  40399c:	2301      	movs	r3, #1
  40399e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4039a2:	3d01      	subs	r5, #1
  4039a4:	9310      	str	r3, [sp, #64]	; 0x40
  4039a6:	e774      	b.n	403892 <_dtoa_r+0xfa>
  4039a8:	f1c3 0020 	rsb	r0, r3, #32
  4039ac:	9b02      	ldr	r3, [sp, #8]
  4039ae:	fa03 f000 	lsl.w	r0, r3, r0
  4039b2:	e7f1      	b.n	403998 <_dtoa_r+0x200>
  4039b4:	2301      	movs	r3, #1
  4039b6:	e7b3      	b.n	403920 <_dtoa_r+0x188>
  4039b8:	900d      	str	r0, [sp, #52]	; 0x34
  4039ba:	e7b2      	b.n	403922 <_dtoa_r+0x18a>
  4039bc:	f1cb 0300 	rsb	r3, fp, #0
  4039c0:	9308      	str	r3, [sp, #32]
  4039c2:	2300      	movs	r3, #0
  4039c4:	eba8 080b 	sub.w	r8, r8, fp
  4039c8:	930c      	str	r3, [sp, #48]	; 0x30
  4039ca:	e7bf      	b.n	40394c <_dtoa_r+0x1b4>
  4039cc:	2301      	movs	r3, #1
  4039ce:	9309      	str	r3, [sp, #36]	; 0x24
  4039d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4039d2:	2b00      	cmp	r3, #0
  4039d4:	dd7d      	ble.n	403ad2 <_dtoa_r+0x33a>
  4039d6:	9304      	str	r3, [sp, #16]
  4039d8:	4699      	mov	r9, r3
  4039da:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4039dc:	2200      	movs	r2, #0
  4039de:	606a      	str	r2, [r5, #4]
  4039e0:	2104      	movs	r1, #4
  4039e2:	f101 0214 	add.w	r2, r1, #20
  4039e6:	429a      	cmp	r2, r3
  4039e8:	d978      	bls.n	403adc <_dtoa_r+0x344>
  4039ea:	6869      	ldr	r1, [r5, #4]
  4039ec:	4620      	mov	r0, r4
  4039ee:	f000 feef 	bl	4047d0 <_Balloc>
  4039f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4039f4:	6028      	str	r0, [r5, #0]
  4039f6:	681b      	ldr	r3, [r3, #0]
  4039f8:	9306      	str	r3, [sp, #24]
  4039fa:	f1b9 0f0e 	cmp.w	r9, #14
  4039fe:	f200 80ee 	bhi.w	403bde <_dtoa_r+0x446>
  403a02:	2e00      	cmp	r6, #0
  403a04:	f000 80eb 	beq.w	403bde <_dtoa_r+0x446>
  403a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403a0c:	f1bb 0f00 	cmp.w	fp, #0
  403a10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  403a14:	dd77      	ble.n	403b06 <_dtoa_r+0x36e>
  403a16:	4a25      	ldr	r2, [pc, #148]	; (403aac <_dtoa_r+0x314>)
  403a18:	f00b 030f 	and.w	r3, fp, #15
  403a1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403a20:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a24:	ea4f 162b 	mov.w	r6, fp, asr #4
  403a28:	06f0      	lsls	r0, r6, #27
  403a2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  403a2e:	d55a      	bpl.n	403ae6 <_dtoa_r+0x34e>
  403a30:	4b1f      	ldr	r3, [pc, #124]	; (403ab0 <_dtoa_r+0x318>)
  403a32:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403a36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403a3a:	f7fe ff1b 	bl	402874 <__aeabi_ddiv>
  403a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403a42:	f006 060f 	and.w	r6, r6, #15
  403a46:	2503      	movs	r5, #3
  403a48:	4f19      	ldr	r7, [pc, #100]	; (403ab0 <_dtoa_r+0x318>)
  403a4a:	2e00      	cmp	r6, #0
  403a4c:	d14d      	bne.n	403aea <_dtoa_r+0x352>
  403a4e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403a52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403a56:	f7fe ff0d 	bl	402874 <__aeabi_ddiv>
  403a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403a5e:	e06c      	b.n	403b3a <_dtoa_r+0x3a2>
  403a60:	2301      	movs	r3, #1
  403a62:	9309      	str	r3, [sp, #36]	; 0x24
  403a64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403a66:	445b      	add	r3, fp
  403a68:	f103 0901 	add.w	r9, r3, #1
  403a6c:	9304      	str	r3, [sp, #16]
  403a6e:	464b      	mov	r3, r9
  403a70:	2b01      	cmp	r3, #1
  403a72:	bfb8      	it	lt
  403a74:	2301      	movlt	r3, #1
  403a76:	e7b0      	b.n	4039da <_dtoa_r+0x242>
  403a78:	2300      	movs	r3, #0
  403a7a:	e7a8      	b.n	4039ce <_dtoa_r+0x236>
  403a7c:	2300      	movs	r3, #0
  403a7e:	e7f0      	b.n	403a62 <_dtoa_r+0x2ca>
  403a80:	636f4361 	.word	0x636f4361
  403a84:	3fd287a7 	.word	0x3fd287a7
  403a88:	8b60c8b3 	.word	0x8b60c8b3
  403a8c:	3fc68a28 	.word	0x3fc68a28
  403a90:	509f79fb 	.word	0x509f79fb
  403a94:	3fd34413 	.word	0x3fd34413
  403a98:	7ff00000 	.word	0x7ff00000
  403a9c:	00405979 	.word	0x00405979
  403aa0:	00405970 	.word	0x00405970
  403aa4:	0040594d 	.word	0x0040594d
  403aa8:	3ff80000 	.word	0x3ff80000
  403aac:	00405a08 	.word	0x00405a08
  403ab0:	004059e0 	.word	0x004059e0
  403ab4:	2601      	movs	r6, #1
  403ab6:	2300      	movs	r3, #0
  403ab8:	931e      	str	r3, [sp, #120]	; 0x78
  403aba:	9609      	str	r6, [sp, #36]	; 0x24
  403abc:	f04f 33ff 	mov.w	r3, #4294967295
  403ac0:	9304      	str	r3, [sp, #16]
  403ac2:	4699      	mov	r9, r3
  403ac4:	2200      	movs	r2, #0
  403ac6:	2312      	movs	r3, #18
  403ac8:	921f      	str	r2, [sp, #124]	; 0x7c
  403aca:	e786      	b.n	4039da <_dtoa_r+0x242>
  403acc:	2301      	movs	r3, #1
  403ace:	9309      	str	r3, [sp, #36]	; 0x24
  403ad0:	e7f4      	b.n	403abc <_dtoa_r+0x324>
  403ad2:	2301      	movs	r3, #1
  403ad4:	9304      	str	r3, [sp, #16]
  403ad6:	4699      	mov	r9, r3
  403ad8:	461a      	mov	r2, r3
  403ada:	e7f5      	b.n	403ac8 <_dtoa_r+0x330>
  403adc:	686a      	ldr	r2, [r5, #4]
  403ade:	3201      	adds	r2, #1
  403ae0:	606a      	str	r2, [r5, #4]
  403ae2:	0049      	lsls	r1, r1, #1
  403ae4:	e77d      	b.n	4039e2 <_dtoa_r+0x24a>
  403ae6:	2502      	movs	r5, #2
  403ae8:	e7ae      	b.n	403a48 <_dtoa_r+0x2b0>
  403aea:	07f1      	lsls	r1, r6, #31
  403aec:	d508      	bpl.n	403b00 <_dtoa_r+0x368>
  403aee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403af2:	e9d7 2300 	ldrd	r2, r3, [r7]
  403af6:	f7fe fd93 	bl	402620 <__aeabi_dmul>
  403afa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403afe:	3501      	adds	r5, #1
  403b00:	1076      	asrs	r6, r6, #1
  403b02:	3708      	adds	r7, #8
  403b04:	e7a1      	b.n	403a4a <_dtoa_r+0x2b2>
  403b06:	f000 80a5 	beq.w	403c54 <_dtoa_r+0x4bc>
  403b0a:	f1cb 0600 	rsb	r6, fp, #0
  403b0e:	4ba3      	ldr	r3, [pc, #652]	; (403d9c <_dtoa_r+0x604>)
  403b10:	4fa3      	ldr	r7, [pc, #652]	; (403da0 <_dtoa_r+0x608>)
  403b12:	f006 020f 	and.w	r2, r6, #15
  403b16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403b22:	f7fe fd7d 	bl	402620 <__aeabi_dmul>
  403b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403b2a:	1136      	asrs	r6, r6, #4
  403b2c:	2300      	movs	r3, #0
  403b2e:	2502      	movs	r5, #2
  403b30:	2e00      	cmp	r6, #0
  403b32:	f040 8084 	bne.w	403c3e <_dtoa_r+0x4a6>
  403b36:	2b00      	cmp	r3, #0
  403b38:	d18f      	bne.n	403a5a <_dtoa_r+0x2c2>
  403b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403b3c:	2b00      	cmp	r3, #0
  403b3e:	f000 808b 	beq.w	403c58 <_dtoa_r+0x4c0>
  403b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403b46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  403b4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403b4e:	2200      	movs	r2, #0
  403b50:	4b94      	ldr	r3, [pc, #592]	; (403da4 <_dtoa_r+0x60c>)
  403b52:	f7fe ffd7 	bl	402b04 <__aeabi_dcmplt>
  403b56:	2800      	cmp	r0, #0
  403b58:	d07e      	beq.n	403c58 <_dtoa_r+0x4c0>
  403b5a:	f1b9 0f00 	cmp.w	r9, #0
  403b5e:	d07b      	beq.n	403c58 <_dtoa_r+0x4c0>
  403b60:	9b04      	ldr	r3, [sp, #16]
  403b62:	2b00      	cmp	r3, #0
  403b64:	dd37      	ble.n	403bd6 <_dtoa_r+0x43e>
  403b66:	2200      	movs	r2, #0
  403b68:	4b8f      	ldr	r3, [pc, #572]	; (403da8 <_dtoa_r+0x610>)
  403b6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403b6e:	f7fe fd57 	bl	402620 <__aeabi_dmul>
  403b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403b76:	9e04      	ldr	r6, [sp, #16]
  403b78:	f10b 37ff 	add.w	r7, fp, #4294967295
  403b7c:	3501      	adds	r5, #1
  403b7e:	4628      	mov	r0, r5
  403b80:	f7fe fce8 	bl	402554 <__aeabi_i2d>
  403b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403b88:	f7fe fd4a 	bl	402620 <__aeabi_dmul>
  403b8c:	4b87      	ldr	r3, [pc, #540]	; (403dac <_dtoa_r+0x614>)
  403b8e:	2200      	movs	r2, #0
  403b90:	f7fe fb94 	bl	4022bc <__adddf3>
  403b94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403b9a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  403b9e:	950b      	str	r5, [sp, #44]	; 0x2c
  403ba0:	2e00      	cmp	r6, #0
  403ba2:	d15c      	bne.n	403c5e <_dtoa_r+0x4c6>
  403ba4:	2200      	movs	r2, #0
  403ba6:	4b82      	ldr	r3, [pc, #520]	; (403db0 <_dtoa_r+0x618>)
  403ba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403bac:	f7fe fb84 	bl	4022b8 <__aeabi_dsub>
  403bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403bb2:	462b      	mov	r3, r5
  403bb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403bb8:	f7fe ffc2 	bl	402b40 <__aeabi_dcmpgt>
  403bbc:	2800      	cmp	r0, #0
  403bbe:	f040 82f7 	bne.w	4041b0 <_dtoa_r+0xa18>
  403bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403bc4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  403bc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403bcc:	f7fe ff9a 	bl	402b04 <__aeabi_dcmplt>
  403bd0:	2800      	cmp	r0, #0
  403bd2:	f040 82eb 	bne.w	4041ac <_dtoa_r+0xa14>
  403bd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  403bda:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403bde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403be0:	2b00      	cmp	r3, #0
  403be2:	f2c0 8151 	blt.w	403e88 <_dtoa_r+0x6f0>
  403be6:	f1bb 0f0e 	cmp.w	fp, #14
  403bea:	f300 814d 	bgt.w	403e88 <_dtoa_r+0x6f0>
  403bee:	4b6b      	ldr	r3, [pc, #428]	; (403d9c <_dtoa_r+0x604>)
  403bf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  403bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
  403bf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  403bfc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403bfe:	2b00      	cmp	r3, #0
  403c00:	f280 80da 	bge.w	403db8 <_dtoa_r+0x620>
  403c04:	f1b9 0f00 	cmp.w	r9, #0
  403c08:	f300 80d6 	bgt.w	403db8 <_dtoa_r+0x620>
  403c0c:	f040 82cd 	bne.w	4041aa <_dtoa_r+0xa12>
  403c10:	2200      	movs	r2, #0
  403c12:	4b67      	ldr	r3, [pc, #412]	; (403db0 <_dtoa_r+0x618>)
  403c14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403c18:	f7fe fd02 	bl	402620 <__aeabi_dmul>
  403c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403c20:	f7fe ff84 	bl	402b2c <__aeabi_dcmpge>
  403c24:	464e      	mov	r6, r9
  403c26:	464f      	mov	r7, r9
  403c28:	2800      	cmp	r0, #0
  403c2a:	f040 82a4 	bne.w	404176 <_dtoa_r+0x9de>
  403c2e:	9b06      	ldr	r3, [sp, #24]
  403c30:	9a06      	ldr	r2, [sp, #24]
  403c32:	1c5d      	adds	r5, r3, #1
  403c34:	2331      	movs	r3, #49	; 0x31
  403c36:	7013      	strb	r3, [r2, #0]
  403c38:	f10b 0b01 	add.w	fp, fp, #1
  403c3c:	e29f      	b.n	40417e <_dtoa_r+0x9e6>
  403c3e:	07f2      	lsls	r2, r6, #31
  403c40:	d505      	bpl.n	403c4e <_dtoa_r+0x4b6>
  403c42:	e9d7 2300 	ldrd	r2, r3, [r7]
  403c46:	f7fe fceb 	bl	402620 <__aeabi_dmul>
  403c4a:	3501      	adds	r5, #1
  403c4c:	2301      	movs	r3, #1
  403c4e:	1076      	asrs	r6, r6, #1
  403c50:	3708      	adds	r7, #8
  403c52:	e76d      	b.n	403b30 <_dtoa_r+0x398>
  403c54:	2502      	movs	r5, #2
  403c56:	e770      	b.n	403b3a <_dtoa_r+0x3a2>
  403c58:	465f      	mov	r7, fp
  403c5a:	464e      	mov	r6, r9
  403c5c:	e78f      	b.n	403b7e <_dtoa_r+0x3e6>
  403c5e:	9a06      	ldr	r2, [sp, #24]
  403c60:	4b4e      	ldr	r3, [pc, #312]	; (403d9c <_dtoa_r+0x604>)
  403c62:	4432      	add	r2, r6
  403c64:	9211      	str	r2, [sp, #68]	; 0x44
  403c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403c68:	1e71      	subs	r1, r6, #1
  403c6a:	2a00      	cmp	r2, #0
  403c6c:	d048      	beq.n	403d00 <_dtoa_r+0x568>
  403c6e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  403c72:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c76:	2000      	movs	r0, #0
  403c78:	494e      	ldr	r1, [pc, #312]	; (403db4 <_dtoa_r+0x61c>)
  403c7a:	f7fe fdfb 	bl	402874 <__aeabi_ddiv>
  403c7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403c82:	f7fe fb19 	bl	4022b8 <__aeabi_dsub>
  403c86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403c8a:	9d06      	ldr	r5, [sp, #24]
  403c8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403c90:	f7fe ff60 	bl	402b54 <__aeabi_d2iz>
  403c94:	4606      	mov	r6, r0
  403c96:	f7fe fc5d 	bl	402554 <__aeabi_i2d>
  403c9a:	4602      	mov	r2, r0
  403c9c:	460b      	mov	r3, r1
  403c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403ca2:	f7fe fb09 	bl	4022b8 <__aeabi_dsub>
  403ca6:	3630      	adds	r6, #48	; 0x30
  403ca8:	f805 6b01 	strb.w	r6, [r5], #1
  403cac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403cb4:	f7fe ff26 	bl	402b04 <__aeabi_dcmplt>
  403cb8:	2800      	cmp	r0, #0
  403cba:	d165      	bne.n	403d88 <_dtoa_r+0x5f0>
  403cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403cc0:	2000      	movs	r0, #0
  403cc2:	4938      	ldr	r1, [pc, #224]	; (403da4 <_dtoa_r+0x60c>)
  403cc4:	f7fe faf8 	bl	4022b8 <__aeabi_dsub>
  403cc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403ccc:	f7fe ff1a 	bl	402b04 <__aeabi_dcmplt>
  403cd0:	2800      	cmp	r0, #0
  403cd2:	f040 80b9 	bne.w	403e48 <_dtoa_r+0x6b0>
  403cd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403cd8:	429d      	cmp	r5, r3
  403cda:	f43f af7c 	beq.w	403bd6 <_dtoa_r+0x43e>
  403cde:	2200      	movs	r2, #0
  403ce0:	4b31      	ldr	r3, [pc, #196]	; (403da8 <_dtoa_r+0x610>)
  403ce2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403ce6:	f7fe fc9b 	bl	402620 <__aeabi_dmul>
  403cea:	2200      	movs	r2, #0
  403cec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403cf0:	4b2d      	ldr	r3, [pc, #180]	; (403da8 <_dtoa_r+0x610>)
  403cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403cf6:	f7fe fc93 	bl	402620 <__aeabi_dmul>
  403cfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403cfe:	e7c5      	b.n	403c8c <_dtoa_r+0x4f4>
  403d00:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  403d04:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403d0c:	f7fe fc88 	bl	402620 <__aeabi_dmul>
  403d10:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403d14:	9d06      	ldr	r5, [sp, #24]
  403d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403d1a:	f7fe ff1b 	bl	402b54 <__aeabi_d2iz>
  403d1e:	4606      	mov	r6, r0
  403d20:	f7fe fc18 	bl	402554 <__aeabi_i2d>
  403d24:	3630      	adds	r6, #48	; 0x30
  403d26:	4602      	mov	r2, r0
  403d28:	460b      	mov	r3, r1
  403d2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403d2e:	f7fe fac3 	bl	4022b8 <__aeabi_dsub>
  403d32:	f805 6b01 	strb.w	r6, [r5], #1
  403d36:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403d38:	42ab      	cmp	r3, r5
  403d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403d3e:	f04f 0200 	mov.w	r2, #0
  403d42:	d125      	bne.n	403d90 <_dtoa_r+0x5f8>
  403d44:	4b1b      	ldr	r3, [pc, #108]	; (403db4 <_dtoa_r+0x61c>)
  403d46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403d4a:	f7fe fab7 	bl	4022bc <__adddf3>
  403d4e:	4602      	mov	r2, r0
  403d50:	460b      	mov	r3, r1
  403d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403d56:	f7fe fef3 	bl	402b40 <__aeabi_dcmpgt>
  403d5a:	2800      	cmp	r0, #0
  403d5c:	d174      	bne.n	403e48 <_dtoa_r+0x6b0>
  403d5e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403d62:	2000      	movs	r0, #0
  403d64:	4913      	ldr	r1, [pc, #76]	; (403db4 <_dtoa_r+0x61c>)
  403d66:	f7fe faa7 	bl	4022b8 <__aeabi_dsub>
  403d6a:	4602      	mov	r2, r0
  403d6c:	460b      	mov	r3, r1
  403d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403d72:	f7fe fec7 	bl	402b04 <__aeabi_dcmplt>
  403d76:	2800      	cmp	r0, #0
  403d78:	f43f af2d 	beq.w	403bd6 <_dtoa_r+0x43e>
  403d7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  403d80:	2b30      	cmp	r3, #48	; 0x30
  403d82:	f105 32ff 	add.w	r2, r5, #4294967295
  403d86:	d001      	beq.n	403d8c <_dtoa_r+0x5f4>
  403d88:	46bb      	mov	fp, r7
  403d8a:	e04c      	b.n	403e26 <_dtoa_r+0x68e>
  403d8c:	4615      	mov	r5, r2
  403d8e:	e7f5      	b.n	403d7c <_dtoa_r+0x5e4>
  403d90:	4b05      	ldr	r3, [pc, #20]	; (403da8 <_dtoa_r+0x610>)
  403d92:	f7fe fc45 	bl	402620 <__aeabi_dmul>
  403d96:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403d9a:	e7bc      	b.n	403d16 <_dtoa_r+0x57e>
  403d9c:	00405a08 	.word	0x00405a08
  403da0:	004059e0 	.word	0x004059e0
  403da4:	3ff00000 	.word	0x3ff00000
  403da8:	40240000 	.word	0x40240000
  403dac:	401c0000 	.word	0x401c0000
  403db0:	40140000 	.word	0x40140000
  403db4:	3fe00000 	.word	0x3fe00000
  403db8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  403dbc:	9d06      	ldr	r5, [sp, #24]
  403dbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403dc2:	4630      	mov	r0, r6
  403dc4:	4639      	mov	r1, r7
  403dc6:	f7fe fd55 	bl	402874 <__aeabi_ddiv>
  403dca:	f7fe fec3 	bl	402b54 <__aeabi_d2iz>
  403dce:	4680      	mov	r8, r0
  403dd0:	f7fe fbc0 	bl	402554 <__aeabi_i2d>
  403dd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403dd8:	f7fe fc22 	bl	402620 <__aeabi_dmul>
  403ddc:	4602      	mov	r2, r0
  403dde:	460b      	mov	r3, r1
  403de0:	4630      	mov	r0, r6
  403de2:	4639      	mov	r1, r7
  403de4:	f108 0630 	add.w	r6, r8, #48	; 0x30
  403de8:	f7fe fa66 	bl	4022b8 <__aeabi_dsub>
  403dec:	f805 6b01 	strb.w	r6, [r5], #1
  403df0:	9e06      	ldr	r6, [sp, #24]
  403df2:	1bae      	subs	r6, r5, r6
  403df4:	45b1      	cmp	r9, r6
  403df6:	4602      	mov	r2, r0
  403df8:	460b      	mov	r3, r1
  403dfa:	d138      	bne.n	403e6e <_dtoa_r+0x6d6>
  403dfc:	f7fe fa5e 	bl	4022bc <__adddf3>
  403e00:	4606      	mov	r6, r0
  403e02:	460f      	mov	r7, r1
  403e04:	4602      	mov	r2, r0
  403e06:	460b      	mov	r3, r1
  403e08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403e0c:	f7fe fe7a 	bl	402b04 <__aeabi_dcmplt>
  403e10:	b9c8      	cbnz	r0, 403e46 <_dtoa_r+0x6ae>
  403e12:	4632      	mov	r2, r6
  403e14:	463b      	mov	r3, r7
  403e16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403e1a:	f7fe fe69 	bl	402af0 <__aeabi_dcmpeq>
  403e1e:	b110      	cbz	r0, 403e26 <_dtoa_r+0x68e>
  403e20:	f018 0f01 	tst.w	r8, #1
  403e24:	d10f      	bne.n	403e46 <_dtoa_r+0x6ae>
  403e26:	4651      	mov	r1, sl
  403e28:	4620      	mov	r0, r4
  403e2a:	f000 fd05 	bl	404838 <_Bfree>
  403e2e:	2300      	movs	r3, #0
  403e30:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403e32:	702b      	strb	r3, [r5, #0]
  403e34:	f10b 0301 	add.w	r3, fp, #1
  403e38:	6013      	str	r3, [r2, #0]
  403e3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403e3c:	2b00      	cmp	r3, #0
  403e3e:	f43f acf0 	beq.w	403822 <_dtoa_r+0x8a>
  403e42:	601d      	str	r5, [r3, #0]
  403e44:	e4ed      	b.n	403822 <_dtoa_r+0x8a>
  403e46:	465f      	mov	r7, fp
  403e48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  403e4c:	2a39      	cmp	r2, #57	; 0x39
  403e4e:	f105 33ff 	add.w	r3, r5, #4294967295
  403e52:	d106      	bne.n	403e62 <_dtoa_r+0x6ca>
  403e54:	9a06      	ldr	r2, [sp, #24]
  403e56:	429a      	cmp	r2, r3
  403e58:	d107      	bne.n	403e6a <_dtoa_r+0x6d2>
  403e5a:	2330      	movs	r3, #48	; 0x30
  403e5c:	7013      	strb	r3, [r2, #0]
  403e5e:	3701      	adds	r7, #1
  403e60:	4613      	mov	r3, r2
  403e62:	781a      	ldrb	r2, [r3, #0]
  403e64:	3201      	adds	r2, #1
  403e66:	701a      	strb	r2, [r3, #0]
  403e68:	e78e      	b.n	403d88 <_dtoa_r+0x5f0>
  403e6a:	461d      	mov	r5, r3
  403e6c:	e7ec      	b.n	403e48 <_dtoa_r+0x6b0>
  403e6e:	2200      	movs	r2, #0
  403e70:	4bb4      	ldr	r3, [pc, #720]	; (404144 <_dtoa_r+0x9ac>)
  403e72:	f7fe fbd5 	bl	402620 <__aeabi_dmul>
  403e76:	2200      	movs	r2, #0
  403e78:	2300      	movs	r3, #0
  403e7a:	4606      	mov	r6, r0
  403e7c:	460f      	mov	r7, r1
  403e7e:	f7fe fe37 	bl	402af0 <__aeabi_dcmpeq>
  403e82:	2800      	cmp	r0, #0
  403e84:	d09b      	beq.n	403dbe <_dtoa_r+0x626>
  403e86:	e7ce      	b.n	403e26 <_dtoa_r+0x68e>
  403e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403e8a:	2a00      	cmp	r2, #0
  403e8c:	f000 8129 	beq.w	4040e2 <_dtoa_r+0x94a>
  403e90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403e92:	2a01      	cmp	r2, #1
  403e94:	f300 810e 	bgt.w	4040b4 <_dtoa_r+0x91c>
  403e98:	9a10      	ldr	r2, [sp, #64]	; 0x40
  403e9a:	2a00      	cmp	r2, #0
  403e9c:	f000 8106 	beq.w	4040ac <_dtoa_r+0x914>
  403ea0:	f203 4333 	addw	r3, r3, #1075	; 0x433
  403ea4:	9e08      	ldr	r6, [sp, #32]
  403ea6:	4645      	mov	r5, r8
  403ea8:	9a07      	ldr	r2, [sp, #28]
  403eaa:	2101      	movs	r1, #1
  403eac:	441a      	add	r2, r3
  403eae:	4620      	mov	r0, r4
  403eb0:	4498      	add	r8, r3
  403eb2:	9207      	str	r2, [sp, #28]
  403eb4:	f000 fd60 	bl	404978 <__i2b>
  403eb8:	4607      	mov	r7, r0
  403eba:	2d00      	cmp	r5, #0
  403ebc:	dd0b      	ble.n	403ed6 <_dtoa_r+0x73e>
  403ebe:	9b07      	ldr	r3, [sp, #28]
  403ec0:	2b00      	cmp	r3, #0
  403ec2:	dd08      	ble.n	403ed6 <_dtoa_r+0x73e>
  403ec4:	42ab      	cmp	r3, r5
  403ec6:	9a07      	ldr	r2, [sp, #28]
  403ec8:	bfa8      	it	ge
  403eca:	462b      	movge	r3, r5
  403ecc:	eba8 0803 	sub.w	r8, r8, r3
  403ed0:	1aed      	subs	r5, r5, r3
  403ed2:	1ad3      	subs	r3, r2, r3
  403ed4:	9307      	str	r3, [sp, #28]
  403ed6:	9b08      	ldr	r3, [sp, #32]
  403ed8:	b1fb      	cbz	r3, 403f1a <_dtoa_r+0x782>
  403eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403edc:	2b00      	cmp	r3, #0
  403ede:	f000 8104 	beq.w	4040ea <_dtoa_r+0x952>
  403ee2:	2e00      	cmp	r6, #0
  403ee4:	dd11      	ble.n	403f0a <_dtoa_r+0x772>
  403ee6:	4639      	mov	r1, r7
  403ee8:	4632      	mov	r2, r6
  403eea:	4620      	mov	r0, r4
  403eec:	f000 fdda 	bl	404aa4 <__pow5mult>
  403ef0:	4652      	mov	r2, sl
  403ef2:	4601      	mov	r1, r0
  403ef4:	4607      	mov	r7, r0
  403ef6:	4620      	mov	r0, r4
  403ef8:	f000 fd47 	bl	40498a <__multiply>
  403efc:	4651      	mov	r1, sl
  403efe:	900a      	str	r0, [sp, #40]	; 0x28
  403f00:	4620      	mov	r0, r4
  403f02:	f000 fc99 	bl	404838 <_Bfree>
  403f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f08:	469a      	mov	sl, r3
  403f0a:	9b08      	ldr	r3, [sp, #32]
  403f0c:	1b9a      	subs	r2, r3, r6
  403f0e:	d004      	beq.n	403f1a <_dtoa_r+0x782>
  403f10:	4651      	mov	r1, sl
  403f12:	4620      	mov	r0, r4
  403f14:	f000 fdc6 	bl	404aa4 <__pow5mult>
  403f18:	4682      	mov	sl, r0
  403f1a:	2101      	movs	r1, #1
  403f1c:	4620      	mov	r0, r4
  403f1e:	f000 fd2b 	bl	404978 <__i2b>
  403f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403f24:	2b00      	cmp	r3, #0
  403f26:	4606      	mov	r6, r0
  403f28:	f340 80e1 	ble.w	4040ee <_dtoa_r+0x956>
  403f2c:	461a      	mov	r2, r3
  403f2e:	4601      	mov	r1, r0
  403f30:	4620      	mov	r0, r4
  403f32:	f000 fdb7 	bl	404aa4 <__pow5mult>
  403f36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403f38:	2b01      	cmp	r3, #1
  403f3a:	4606      	mov	r6, r0
  403f3c:	f340 80da 	ble.w	4040f4 <_dtoa_r+0x95c>
  403f40:	2300      	movs	r3, #0
  403f42:	9308      	str	r3, [sp, #32]
  403f44:	6933      	ldr	r3, [r6, #16]
  403f46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  403f4a:	6918      	ldr	r0, [r3, #16]
  403f4c:	f000 fcc6 	bl	4048dc <__hi0bits>
  403f50:	f1c0 0020 	rsb	r0, r0, #32
  403f54:	9b07      	ldr	r3, [sp, #28]
  403f56:	4418      	add	r0, r3
  403f58:	f010 001f 	ands.w	r0, r0, #31
  403f5c:	f000 80f0 	beq.w	404140 <_dtoa_r+0x9a8>
  403f60:	f1c0 0320 	rsb	r3, r0, #32
  403f64:	2b04      	cmp	r3, #4
  403f66:	f340 80e2 	ble.w	40412e <_dtoa_r+0x996>
  403f6a:	9b07      	ldr	r3, [sp, #28]
  403f6c:	f1c0 001c 	rsb	r0, r0, #28
  403f70:	4480      	add	r8, r0
  403f72:	4405      	add	r5, r0
  403f74:	4403      	add	r3, r0
  403f76:	9307      	str	r3, [sp, #28]
  403f78:	f1b8 0f00 	cmp.w	r8, #0
  403f7c:	dd05      	ble.n	403f8a <_dtoa_r+0x7f2>
  403f7e:	4651      	mov	r1, sl
  403f80:	4642      	mov	r2, r8
  403f82:	4620      	mov	r0, r4
  403f84:	f000 fddc 	bl	404b40 <__lshift>
  403f88:	4682      	mov	sl, r0
  403f8a:	9b07      	ldr	r3, [sp, #28]
  403f8c:	2b00      	cmp	r3, #0
  403f8e:	dd05      	ble.n	403f9c <_dtoa_r+0x804>
  403f90:	4631      	mov	r1, r6
  403f92:	461a      	mov	r2, r3
  403f94:	4620      	mov	r0, r4
  403f96:	f000 fdd3 	bl	404b40 <__lshift>
  403f9a:	4606      	mov	r6, r0
  403f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f9e:	2b00      	cmp	r3, #0
  403fa0:	f000 80d2 	beq.w	404148 <_dtoa_r+0x9b0>
  403fa4:	4631      	mov	r1, r6
  403fa6:	4650      	mov	r0, sl
  403fa8:	f000 fe1b 	bl	404be2 <__mcmp>
  403fac:	2800      	cmp	r0, #0
  403fae:	f280 80cb 	bge.w	404148 <_dtoa_r+0x9b0>
  403fb2:	2300      	movs	r3, #0
  403fb4:	4651      	mov	r1, sl
  403fb6:	220a      	movs	r2, #10
  403fb8:	4620      	mov	r0, r4
  403fba:	f000 fc54 	bl	404866 <__multadd>
  403fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403fc0:	f10b 3bff 	add.w	fp, fp, #4294967295
  403fc4:	4682      	mov	sl, r0
  403fc6:	2b00      	cmp	r3, #0
  403fc8:	f000 81aa 	beq.w	404320 <_dtoa_r+0xb88>
  403fcc:	2300      	movs	r3, #0
  403fce:	4639      	mov	r1, r7
  403fd0:	220a      	movs	r2, #10
  403fd2:	4620      	mov	r0, r4
  403fd4:	f000 fc47 	bl	404866 <__multadd>
  403fd8:	9b04      	ldr	r3, [sp, #16]
  403fda:	2b00      	cmp	r3, #0
  403fdc:	4607      	mov	r7, r0
  403fde:	dc03      	bgt.n	403fe8 <_dtoa_r+0x850>
  403fe0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403fe2:	2b02      	cmp	r3, #2
  403fe4:	f300 80b8 	bgt.w	404158 <_dtoa_r+0x9c0>
  403fe8:	2d00      	cmp	r5, #0
  403fea:	dd05      	ble.n	403ff8 <_dtoa_r+0x860>
  403fec:	4639      	mov	r1, r7
  403fee:	462a      	mov	r2, r5
  403ff0:	4620      	mov	r0, r4
  403ff2:	f000 fda5 	bl	404b40 <__lshift>
  403ff6:	4607      	mov	r7, r0
  403ff8:	9b08      	ldr	r3, [sp, #32]
  403ffa:	2b00      	cmp	r3, #0
  403ffc:	f000 8110 	beq.w	404220 <_dtoa_r+0xa88>
  404000:	6879      	ldr	r1, [r7, #4]
  404002:	4620      	mov	r0, r4
  404004:	f000 fbe4 	bl	4047d0 <_Balloc>
  404008:	693a      	ldr	r2, [r7, #16]
  40400a:	3202      	adds	r2, #2
  40400c:	4605      	mov	r5, r0
  40400e:	0092      	lsls	r2, r2, #2
  404010:	f107 010c 	add.w	r1, r7, #12
  404014:	300c      	adds	r0, #12
  404016:	f7fe fde9 	bl	402bec <memcpy>
  40401a:	2201      	movs	r2, #1
  40401c:	4629      	mov	r1, r5
  40401e:	4620      	mov	r0, r4
  404020:	f000 fd8e 	bl	404b40 <__lshift>
  404024:	9b02      	ldr	r3, [sp, #8]
  404026:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40402a:	9707      	str	r7, [sp, #28]
  40402c:	f003 0301 	and.w	r3, r3, #1
  404030:	4607      	mov	r7, r0
  404032:	9308      	str	r3, [sp, #32]
  404034:	4631      	mov	r1, r6
  404036:	4650      	mov	r0, sl
  404038:	f7ff fb20 	bl	40367c <quorem>
  40403c:	9907      	ldr	r1, [sp, #28]
  40403e:	4605      	mov	r5, r0
  404040:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404044:	4650      	mov	r0, sl
  404046:	f000 fdcc 	bl	404be2 <__mcmp>
  40404a:	463a      	mov	r2, r7
  40404c:	9002      	str	r0, [sp, #8]
  40404e:	4631      	mov	r1, r6
  404050:	4620      	mov	r0, r4
  404052:	f000 fde0 	bl	404c16 <__mdiff>
  404056:	68c3      	ldr	r3, [r0, #12]
  404058:	4602      	mov	r2, r0
  40405a:	2b00      	cmp	r3, #0
  40405c:	f040 80e2 	bne.w	404224 <_dtoa_r+0xa8c>
  404060:	4601      	mov	r1, r0
  404062:	9009      	str	r0, [sp, #36]	; 0x24
  404064:	4650      	mov	r0, sl
  404066:	f000 fdbc 	bl	404be2 <__mcmp>
  40406a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40406c:	4603      	mov	r3, r0
  40406e:	4611      	mov	r1, r2
  404070:	4620      	mov	r0, r4
  404072:	9309      	str	r3, [sp, #36]	; 0x24
  404074:	f000 fbe0 	bl	404838 <_Bfree>
  404078:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40407a:	2b00      	cmp	r3, #0
  40407c:	f040 80d4 	bne.w	404228 <_dtoa_r+0xa90>
  404080:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404082:	2a00      	cmp	r2, #0
  404084:	f040 80d0 	bne.w	404228 <_dtoa_r+0xa90>
  404088:	9a08      	ldr	r2, [sp, #32]
  40408a:	2a00      	cmp	r2, #0
  40408c:	f040 80cc 	bne.w	404228 <_dtoa_r+0xa90>
  404090:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404094:	f000 80e8 	beq.w	404268 <_dtoa_r+0xad0>
  404098:	9b02      	ldr	r3, [sp, #8]
  40409a:	2b00      	cmp	r3, #0
  40409c:	dd01      	ble.n	4040a2 <_dtoa_r+0x90a>
  40409e:	f105 0931 	add.w	r9, r5, #49	; 0x31
  4040a2:	f108 0501 	add.w	r5, r8, #1
  4040a6:	f888 9000 	strb.w	r9, [r8]
  4040aa:	e06a      	b.n	404182 <_dtoa_r+0x9ea>
  4040ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4040ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4040b2:	e6f7      	b.n	403ea4 <_dtoa_r+0x70c>
  4040b4:	9b08      	ldr	r3, [sp, #32]
  4040b6:	f109 36ff 	add.w	r6, r9, #4294967295
  4040ba:	42b3      	cmp	r3, r6
  4040bc:	bfbf      	itttt	lt
  4040be:	9b08      	ldrlt	r3, [sp, #32]
  4040c0:	9608      	strlt	r6, [sp, #32]
  4040c2:	1af2      	sublt	r2, r6, r3
  4040c4:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  4040c6:	bfb7      	itett	lt
  4040c8:	189b      	addlt	r3, r3, r2
  4040ca:	1b9e      	subge	r6, r3, r6
  4040cc:	930c      	strlt	r3, [sp, #48]	; 0x30
  4040ce:	2600      	movlt	r6, #0
  4040d0:	f1b9 0f00 	cmp.w	r9, #0
  4040d4:	bfb9      	ittee	lt
  4040d6:	eba8 0509 	sublt.w	r5, r8, r9
  4040da:	2300      	movlt	r3, #0
  4040dc:	4645      	movge	r5, r8
  4040de:	464b      	movge	r3, r9
  4040e0:	e6e2      	b.n	403ea8 <_dtoa_r+0x710>
  4040e2:	9e08      	ldr	r6, [sp, #32]
  4040e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4040e6:	4645      	mov	r5, r8
  4040e8:	e6e7      	b.n	403eba <_dtoa_r+0x722>
  4040ea:	9a08      	ldr	r2, [sp, #32]
  4040ec:	e710      	b.n	403f10 <_dtoa_r+0x778>
  4040ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4040f0:	2b01      	cmp	r3, #1
  4040f2:	dc18      	bgt.n	404126 <_dtoa_r+0x98e>
  4040f4:	9b02      	ldr	r3, [sp, #8]
  4040f6:	b9b3      	cbnz	r3, 404126 <_dtoa_r+0x98e>
  4040f8:	9b03      	ldr	r3, [sp, #12]
  4040fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4040fe:	b9a3      	cbnz	r3, 40412a <_dtoa_r+0x992>
  404100:	9b03      	ldr	r3, [sp, #12]
  404102:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  404106:	0d1b      	lsrs	r3, r3, #20
  404108:	051b      	lsls	r3, r3, #20
  40410a:	b12b      	cbz	r3, 404118 <_dtoa_r+0x980>
  40410c:	9b07      	ldr	r3, [sp, #28]
  40410e:	3301      	adds	r3, #1
  404110:	9307      	str	r3, [sp, #28]
  404112:	f108 0801 	add.w	r8, r8, #1
  404116:	2301      	movs	r3, #1
  404118:	9308      	str	r3, [sp, #32]
  40411a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40411c:	2b00      	cmp	r3, #0
  40411e:	f47f af11 	bne.w	403f44 <_dtoa_r+0x7ac>
  404122:	2001      	movs	r0, #1
  404124:	e716      	b.n	403f54 <_dtoa_r+0x7bc>
  404126:	2300      	movs	r3, #0
  404128:	e7f6      	b.n	404118 <_dtoa_r+0x980>
  40412a:	9b02      	ldr	r3, [sp, #8]
  40412c:	e7f4      	b.n	404118 <_dtoa_r+0x980>
  40412e:	f43f af23 	beq.w	403f78 <_dtoa_r+0x7e0>
  404132:	9a07      	ldr	r2, [sp, #28]
  404134:	331c      	adds	r3, #28
  404136:	441a      	add	r2, r3
  404138:	4498      	add	r8, r3
  40413a:	441d      	add	r5, r3
  40413c:	4613      	mov	r3, r2
  40413e:	e71a      	b.n	403f76 <_dtoa_r+0x7de>
  404140:	4603      	mov	r3, r0
  404142:	e7f6      	b.n	404132 <_dtoa_r+0x99a>
  404144:	40240000 	.word	0x40240000
  404148:	f1b9 0f00 	cmp.w	r9, #0
  40414c:	dc33      	bgt.n	4041b6 <_dtoa_r+0xa1e>
  40414e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404150:	2b02      	cmp	r3, #2
  404152:	dd30      	ble.n	4041b6 <_dtoa_r+0xa1e>
  404154:	f8cd 9010 	str.w	r9, [sp, #16]
  404158:	9b04      	ldr	r3, [sp, #16]
  40415a:	b963      	cbnz	r3, 404176 <_dtoa_r+0x9de>
  40415c:	4631      	mov	r1, r6
  40415e:	2205      	movs	r2, #5
  404160:	4620      	mov	r0, r4
  404162:	f000 fb80 	bl	404866 <__multadd>
  404166:	4601      	mov	r1, r0
  404168:	4606      	mov	r6, r0
  40416a:	4650      	mov	r0, sl
  40416c:	f000 fd39 	bl	404be2 <__mcmp>
  404170:	2800      	cmp	r0, #0
  404172:	f73f ad5c 	bgt.w	403c2e <_dtoa_r+0x496>
  404176:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404178:	9d06      	ldr	r5, [sp, #24]
  40417a:	ea6f 0b03 	mvn.w	fp, r3
  40417e:	2300      	movs	r3, #0
  404180:	9307      	str	r3, [sp, #28]
  404182:	4631      	mov	r1, r6
  404184:	4620      	mov	r0, r4
  404186:	f000 fb57 	bl	404838 <_Bfree>
  40418a:	2f00      	cmp	r7, #0
  40418c:	f43f ae4b 	beq.w	403e26 <_dtoa_r+0x68e>
  404190:	9b07      	ldr	r3, [sp, #28]
  404192:	b12b      	cbz	r3, 4041a0 <_dtoa_r+0xa08>
  404194:	42bb      	cmp	r3, r7
  404196:	d003      	beq.n	4041a0 <_dtoa_r+0xa08>
  404198:	4619      	mov	r1, r3
  40419a:	4620      	mov	r0, r4
  40419c:	f000 fb4c 	bl	404838 <_Bfree>
  4041a0:	4639      	mov	r1, r7
  4041a2:	4620      	mov	r0, r4
  4041a4:	f000 fb48 	bl	404838 <_Bfree>
  4041a8:	e63d      	b.n	403e26 <_dtoa_r+0x68e>
  4041aa:	2600      	movs	r6, #0
  4041ac:	4637      	mov	r7, r6
  4041ae:	e7e2      	b.n	404176 <_dtoa_r+0x9de>
  4041b0:	46bb      	mov	fp, r7
  4041b2:	4637      	mov	r7, r6
  4041b4:	e53b      	b.n	403c2e <_dtoa_r+0x496>
  4041b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4041b8:	f8cd 9010 	str.w	r9, [sp, #16]
  4041bc:	2b00      	cmp	r3, #0
  4041be:	f47f af13 	bne.w	403fe8 <_dtoa_r+0x850>
  4041c2:	9d06      	ldr	r5, [sp, #24]
  4041c4:	4631      	mov	r1, r6
  4041c6:	4650      	mov	r0, sl
  4041c8:	f7ff fa58 	bl	40367c <quorem>
  4041cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4041d0:	f805 9b01 	strb.w	r9, [r5], #1
  4041d4:	9b06      	ldr	r3, [sp, #24]
  4041d6:	9a04      	ldr	r2, [sp, #16]
  4041d8:	1aeb      	subs	r3, r5, r3
  4041da:	429a      	cmp	r2, r3
  4041dc:	f300 8083 	bgt.w	4042e6 <_dtoa_r+0xb4e>
  4041e0:	9b06      	ldr	r3, [sp, #24]
  4041e2:	2a01      	cmp	r2, #1
  4041e4:	bfac      	ite	ge
  4041e6:	189b      	addge	r3, r3, r2
  4041e8:	3301      	addlt	r3, #1
  4041ea:	4698      	mov	r8, r3
  4041ec:	2300      	movs	r3, #0
  4041ee:	9307      	str	r3, [sp, #28]
  4041f0:	4651      	mov	r1, sl
  4041f2:	2201      	movs	r2, #1
  4041f4:	4620      	mov	r0, r4
  4041f6:	f000 fca3 	bl	404b40 <__lshift>
  4041fa:	4631      	mov	r1, r6
  4041fc:	4682      	mov	sl, r0
  4041fe:	f000 fcf0 	bl	404be2 <__mcmp>
  404202:	2800      	cmp	r0, #0
  404204:	dc35      	bgt.n	404272 <_dtoa_r+0xada>
  404206:	d102      	bne.n	40420e <_dtoa_r+0xa76>
  404208:	f019 0f01 	tst.w	r9, #1
  40420c:	d131      	bne.n	404272 <_dtoa_r+0xada>
  40420e:	4645      	mov	r5, r8
  404210:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404214:	2b30      	cmp	r3, #48	; 0x30
  404216:	f105 32ff 	add.w	r2, r5, #4294967295
  40421a:	d1b2      	bne.n	404182 <_dtoa_r+0x9ea>
  40421c:	4615      	mov	r5, r2
  40421e:	e7f7      	b.n	404210 <_dtoa_r+0xa78>
  404220:	4638      	mov	r0, r7
  404222:	e6ff      	b.n	404024 <_dtoa_r+0x88c>
  404224:	2301      	movs	r3, #1
  404226:	e722      	b.n	40406e <_dtoa_r+0x8d6>
  404228:	9a02      	ldr	r2, [sp, #8]
  40422a:	2a00      	cmp	r2, #0
  40422c:	db04      	blt.n	404238 <_dtoa_r+0xaa0>
  40422e:	d129      	bne.n	404284 <_dtoa_r+0xaec>
  404230:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404232:	bb3a      	cbnz	r2, 404284 <_dtoa_r+0xaec>
  404234:	9a08      	ldr	r2, [sp, #32]
  404236:	bb2a      	cbnz	r2, 404284 <_dtoa_r+0xaec>
  404238:	2b00      	cmp	r3, #0
  40423a:	f77f af32 	ble.w	4040a2 <_dtoa_r+0x90a>
  40423e:	4651      	mov	r1, sl
  404240:	2201      	movs	r2, #1
  404242:	4620      	mov	r0, r4
  404244:	f000 fc7c 	bl	404b40 <__lshift>
  404248:	4631      	mov	r1, r6
  40424a:	4682      	mov	sl, r0
  40424c:	f000 fcc9 	bl	404be2 <__mcmp>
  404250:	2800      	cmp	r0, #0
  404252:	dc05      	bgt.n	404260 <_dtoa_r+0xac8>
  404254:	f47f af25 	bne.w	4040a2 <_dtoa_r+0x90a>
  404258:	f019 0f01 	tst.w	r9, #1
  40425c:	f43f af21 	beq.w	4040a2 <_dtoa_r+0x90a>
  404260:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404264:	f47f af1b 	bne.w	40409e <_dtoa_r+0x906>
  404268:	2339      	movs	r3, #57	; 0x39
  40426a:	f888 3000 	strb.w	r3, [r8]
  40426e:	f108 0801 	add.w	r8, r8, #1
  404272:	4645      	mov	r5, r8
  404274:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404278:	2b39      	cmp	r3, #57	; 0x39
  40427a:	f105 32ff 	add.w	r2, r5, #4294967295
  40427e:	d03a      	beq.n	4042f6 <_dtoa_r+0xb5e>
  404280:	3301      	adds	r3, #1
  404282:	e03f      	b.n	404304 <_dtoa_r+0xb6c>
  404284:	2b00      	cmp	r3, #0
  404286:	f108 0501 	add.w	r5, r8, #1
  40428a:	dd05      	ble.n	404298 <_dtoa_r+0xb00>
  40428c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404290:	d0ea      	beq.n	404268 <_dtoa_r+0xad0>
  404292:	f109 0901 	add.w	r9, r9, #1
  404296:	e706      	b.n	4040a6 <_dtoa_r+0x90e>
  404298:	9b06      	ldr	r3, [sp, #24]
  40429a:	9a04      	ldr	r2, [sp, #16]
  40429c:	f805 9c01 	strb.w	r9, [r5, #-1]
  4042a0:	1aeb      	subs	r3, r5, r3
  4042a2:	4293      	cmp	r3, r2
  4042a4:	46a8      	mov	r8, r5
  4042a6:	d0a3      	beq.n	4041f0 <_dtoa_r+0xa58>
  4042a8:	4651      	mov	r1, sl
  4042aa:	2300      	movs	r3, #0
  4042ac:	220a      	movs	r2, #10
  4042ae:	4620      	mov	r0, r4
  4042b0:	f000 fad9 	bl	404866 <__multadd>
  4042b4:	9b07      	ldr	r3, [sp, #28]
  4042b6:	9907      	ldr	r1, [sp, #28]
  4042b8:	42bb      	cmp	r3, r7
  4042ba:	4682      	mov	sl, r0
  4042bc:	f04f 0300 	mov.w	r3, #0
  4042c0:	f04f 020a 	mov.w	r2, #10
  4042c4:	4620      	mov	r0, r4
  4042c6:	d104      	bne.n	4042d2 <_dtoa_r+0xb3a>
  4042c8:	f000 facd 	bl	404866 <__multadd>
  4042cc:	9007      	str	r0, [sp, #28]
  4042ce:	4607      	mov	r7, r0
  4042d0:	e6b0      	b.n	404034 <_dtoa_r+0x89c>
  4042d2:	f000 fac8 	bl	404866 <__multadd>
  4042d6:	2300      	movs	r3, #0
  4042d8:	9007      	str	r0, [sp, #28]
  4042da:	220a      	movs	r2, #10
  4042dc:	4639      	mov	r1, r7
  4042de:	4620      	mov	r0, r4
  4042e0:	f000 fac1 	bl	404866 <__multadd>
  4042e4:	e7f3      	b.n	4042ce <_dtoa_r+0xb36>
  4042e6:	4651      	mov	r1, sl
  4042e8:	2300      	movs	r3, #0
  4042ea:	220a      	movs	r2, #10
  4042ec:	4620      	mov	r0, r4
  4042ee:	f000 faba 	bl	404866 <__multadd>
  4042f2:	4682      	mov	sl, r0
  4042f4:	e766      	b.n	4041c4 <_dtoa_r+0xa2c>
  4042f6:	9b06      	ldr	r3, [sp, #24]
  4042f8:	4293      	cmp	r3, r2
  4042fa:	d105      	bne.n	404308 <_dtoa_r+0xb70>
  4042fc:	9a06      	ldr	r2, [sp, #24]
  4042fe:	f10b 0b01 	add.w	fp, fp, #1
  404302:	2331      	movs	r3, #49	; 0x31
  404304:	7013      	strb	r3, [r2, #0]
  404306:	e73c      	b.n	404182 <_dtoa_r+0x9ea>
  404308:	4615      	mov	r5, r2
  40430a:	e7b3      	b.n	404274 <_dtoa_r+0xadc>
  40430c:	4b09      	ldr	r3, [pc, #36]	; (404334 <_dtoa_r+0xb9c>)
  40430e:	f7ff baa5 	b.w	40385c <_dtoa_r+0xc4>
  404312:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404314:	2b00      	cmp	r3, #0
  404316:	f47f aa7f 	bne.w	403818 <_dtoa_r+0x80>
  40431a:	4b07      	ldr	r3, [pc, #28]	; (404338 <_dtoa_r+0xba0>)
  40431c:	f7ff ba9e 	b.w	40385c <_dtoa_r+0xc4>
  404320:	9b04      	ldr	r3, [sp, #16]
  404322:	2b00      	cmp	r3, #0
  404324:	f73f af4d 	bgt.w	4041c2 <_dtoa_r+0xa2a>
  404328:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40432a:	2b02      	cmp	r3, #2
  40432c:	f77f af49 	ble.w	4041c2 <_dtoa_r+0xa2a>
  404330:	e712      	b.n	404158 <_dtoa_r+0x9c0>
  404332:	bf00      	nop
  404334:	0040594c 	.word	0x0040594c
  404338:	00405970 	.word	0x00405970

0040433c <__sflush_r>:
  40433c:	898a      	ldrh	r2, [r1, #12]
  40433e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404342:	4605      	mov	r5, r0
  404344:	0710      	lsls	r0, r2, #28
  404346:	460c      	mov	r4, r1
  404348:	d45a      	bmi.n	404400 <__sflush_r+0xc4>
  40434a:	684b      	ldr	r3, [r1, #4]
  40434c:	2b00      	cmp	r3, #0
  40434e:	dc05      	bgt.n	40435c <__sflush_r+0x20>
  404350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  404352:	2b00      	cmp	r3, #0
  404354:	dc02      	bgt.n	40435c <__sflush_r+0x20>
  404356:	2000      	movs	r0, #0
  404358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40435c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40435e:	2e00      	cmp	r6, #0
  404360:	d0f9      	beq.n	404356 <__sflush_r+0x1a>
  404362:	2300      	movs	r3, #0
  404364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  404368:	682f      	ldr	r7, [r5, #0]
  40436a:	602b      	str	r3, [r5, #0]
  40436c:	d033      	beq.n	4043d6 <__sflush_r+0x9a>
  40436e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  404370:	89a3      	ldrh	r3, [r4, #12]
  404372:	075a      	lsls	r2, r3, #29
  404374:	d505      	bpl.n	404382 <__sflush_r+0x46>
  404376:	6863      	ldr	r3, [r4, #4]
  404378:	1ac0      	subs	r0, r0, r3
  40437a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40437c:	b10b      	cbz	r3, 404382 <__sflush_r+0x46>
  40437e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  404380:	1ac0      	subs	r0, r0, r3
  404382:	2300      	movs	r3, #0
  404384:	4602      	mov	r2, r0
  404386:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404388:	6a21      	ldr	r1, [r4, #32]
  40438a:	4628      	mov	r0, r5
  40438c:	47b0      	blx	r6
  40438e:	1c43      	adds	r3, r0, #1
  404390:	89a3      	ldrh	r3, [r4, #12]
  404392:	d106      	bne.n	4043a2 <__sflush_r+0x66>
  404394:	6829      	ldr	r1, [r5, #0]
  404396:	291d      	cmp	r1, #29
  404398:	d84b      	bhi.n	404432 <__sflush_r+0xf6>
  40439a:	4a2b      	ldr	r2, [pc, #172]	; (404448 <__sflush_r+0x10c>)
  40439c:	40ca      	lsrs	r2, r1
  40439e:	07d6      	lsls	r6, r2, #31
  4043a0:	d547      	bpl.n	404432 <__sflush_r+0xf6>
  4043a2:	2200      	movs	r2, #0
  4043a4:	6062      	str	r2, [r4, #4]
  4043a6:	04d9      	lsls	r1, r3, #19
  4043a8:	6922      	ldr	r2, [r4, #16]
  4043aa:	6022      	str	r2, [r4, #0]
  4043ac:	d504      	bpl.n	4043b8 <__sflush_r+0x7c>
  4043ae:	1c42      	adds	r2, r0, #1
  4043b0:	d101      	bne.n	4043b6 <__sflush_r+0x7a>
  4043b2:	682b      	ldr	r3, [r5, #0]
  4043b4:	b903      	cbnz	r3, 4043b8 <__sflush_r+0x7c>
  4043b6:	6560      	str	r0, [r4, #84]	; 0x54
  4043b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4043ba:	602f      	str	r7, [r5, #0]
  4043bc:	2900      	cmp	r1, #0
  4043be:	d0ca      	beq.n	404356 <__sflush_r+0x1a>
  4043c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4043c4:	4299      	cmp	r1, r3
  4043c6:	d002      	beq.n	4043ce <__sflush_r+0x92>
  4043c8:	4628      	mov	r0, r5
  4043ca:	f000 fcdf 	bl	404d8c <_free_r>
  4043ce:	2000      	movs	r0, #0
  4043d0:	6360      	str	r0, [r4, #52]	; 0x34
  4043d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4043d6:	6a21      	ldr	r1, [r4, #32]
  4043d8:	2301      	movs	r3, #1
  4043da:	4628      	mov	r0, r5
  4043dc:	47b0      	blx	r6
  4043de:	1c41      	adds	r1, r0, #1
  4043e0:	d1c6      	bne.n	404370 <__sflush_r+0x34>
  4043e2:	682b      	ldr	r3, [r5, #0]
  4043e4:	2b00      	cmp	r3, #0
  4043e6:	d0c3      	beq.n	404370 <__sflush_r+0x34>
  4043e8:	2b1d      	cmp	r3, #29
  4043ea:	d001      	beq.n	4043f0 <__sflush_r+0xb4>
  4043ec:	2b16      	cmp	r3, #22
  4043ee:	d101      	bne.n	4043f4 <__sflush_r+0xb8>
  4043f0:	602f      	str	r7, [r5, #0]
  4043f2:	e7b0      	b.n	404356 <__sflush_r+0x1a>
  4043f4:	89a3      	ldrh	r3, [r4, #12]
  4043f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4043fa:	81a3      	strh	r3, [r4, #12]
  4043fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404400:	690f      	ldr	r7, [r1, #16]
  404402:	2f00      	cmp	r7, #0
  404404:	d0a7      	beq.n	404356 <__sflush_r+0x1a>
  404406:	0793      	lsls	r3, r2, #30
  404408:	680e      	ldr	r6, [r1, #0]
  40440a:	bf08      	it	eq
  40440c:	694b      	ldreq	r3, [r1, #20]
  40440e:	600f      	str	r7, [r1, #0]
  404410:	bf18      	it	ne
  404412:	2300      	movne	r3, #0
  404414:	eba6 0807 	sub.w	r8, r6, r7
  404418:	608b      	str	r3, [r1, #8]
  40441a:	f1b8 0f00 	cmp.w	r8, #0
  40441e:	dd9a      	ble.n	404356 <__sflush_r+0x1a>
  404420:	4643      	mov	r3, r8
  404422:	463a      	mov	r2, r7
  404424:	6a21      	ldr	r1, [r4, #32]
  404426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  404428:	4628      	mov	r0, r5
  40442a:	47b0      	blx	r6
  40442c:	2800      	cmp	r0, #0
  40442e:	dc07      	bgt.n	404440 <__sflush_r+0x104>
  404430:	89a3      	ldrh	r3, [r4, #12]
  404432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404436:	81a3      	strh	r3, [r4, #12]
  404438:	f04f 30ff 	mov.w	r0, #4294967295
  40443c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404440:	4407      	add	r7, r0
  404442:	eba8 0800 	sub.w	r8, r8, r0
  404446:	e7e8      	b.n	40441a <__sflush_r+0xde>
  404448:	20400001 	.word	0x20400001

0040444c <_fflush_r>:
  40444c:	b538      	push	{r3, r4, r5, lr}
  40444e:	690b      	ldr	r3, [r1, #16]
  404450:	4605      	mov	r5, r0
  404452:	460c      	mov	r4, r1
  404454:	b1db      	cbz	r3, 40448e <_fflush_r+0x42>
  404456:	b118      	cbz	r0, 404460 <_fflush_r+0x14>
  404458:	6983      	ldr	r3, [r0, #24]
  40445a:	b90b      	cbnz	r3, 404460 <_fflush_r+0x14>
  40445c:	f000 f860 	bl	404520 <__sinit>
  404460:	4b0c      	ldr	r3, [pc, #48]	; (404494 <_fflush_r+0x48>)
  404462:	429c      	cmp	r4, r3
  404464:	d109      	bne.n	40447a <_fflush_r+0x2e>
  404466:	686c      	ldr	r4, [r5, #4]
  404468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40446c:	b17b      	cbz	r3, 40448e <_fflush_r+0x42>
  40446e:	4621      	mov	r1, r4
  404470:	4628      	mov	r0, r5
  404472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404476:	f7ff bf61 	b.w	40433c <__sflush_r>
  40447a:	4b07      	ldr	r3, [pc, #28]	; (404498 <_fflush_r+0x4c>)
  40447c:	429c      	cmp	r4, r3
  40447e:	d101      	bne.n	404484 <_fflush_r+0x38>
  404480:	68ac      	ldr	r4, [r5, #8]
  404482:	e7f1      	b.n	404468 <_fflush_r+0x1c>
  404484:	4b05      	ldr	r3, [pc, #20]	; (40449c <_fflush_r+0x50>)
  404486:	429c      	cmp	r4, r3
  404488:	bf08      	it	eq
  40448a:	68ec      	ldreq	r4, [r5, #12]
  40448c:	e7ec      	b.n	404468 <_fflush_r+0x1c>
  40448e:	2000      	movs	r0, #0
  404490:	bd38      	pop	{r3, r4, r5, pc}
  404492:	bf00      	nop
  404494:	004059a0 	.word	0x004059a0
  404498:	004059c0 	.word	0x004059c0
  40449c:	00405980 	.word	0x00405980

004044a0 <_cleanup_r>:
  4044a0:	4901      	ldr	r1, [pc, #4]	; (4044a8 <_cleanup_r+0x8>)
  4044a2:	f000 b8a9 	b.w	4045f8 <_fwalk_reent>
  4044a6:	bf00      	nop
  4044a8:	0040444d 	.word	0x0040444d

004044ac <std.isra.0>:
  4044ac:	2300      	movs	r3, #0
  4044ae:	b510      	push	{r4, lr}
  4044b0:	4604      	mov	r4, r0
  4044b2:	6003      	str	r3, [r0, #0]
  4044b4:	6043      	str	r3, [r0, #4]
  4044b6:	6083      	str	r3, [r0, #8]
  4044b8:	8181      	strh	r1, [r0, #12]
  4044ba:	6643      	str	r3, [r0, #100]	; 0x64
  4044bc:	81c2      	strh	r2, [r0, #14]
  4044be:	6103      	str	r3, [r0, #16]
  4044c0:	6143      	str	r3, [r0, #20]
  4044c2:	6183      	str	r3, [r0, #24]
  4044c4:	4619      	mov	r1, r3
  4044c6:	2208      	movs	r2, #8
  4044c8:	305c      	adds	r0, #92	; 0x5c
  4044ca:	f7fe fb9a 	bl	402c02 <memset>
  4044ce:	4b05      	ldr	r3, [pc, #20]	; (4044e4 <std.isra.0+0x38>)
  4044d0:	6263      	str	r3, [r4, #36]	; 0x24
  4044d2:	4b05      	ldr	r3, [pc, #20]	; (4044e8 <std.isra.0+0x3c>)
  4044d4:	62a3      	str	r3, [r4, #40]	; 0x28
  4044d6:	4b05      	ldr	r3, [pc, #20]	; (4044ec <std.isra.0+0x40>)
  4044d8:	62e3      	str	r3, [r4, #44]	; 0x2c
  4044da:	4b05      	ldr	r3, [pc, #20]	; (4044f0 <std.isra.0+0x44>)
  4044dc:	6224      	str	r4, [r4, #32]
  4044de:	6323      	str	r3, [r4, #48]	; 0x30
  4044e0:	bd10      	pop	{r4, pc}
  4044e2:	bf00      	nop
  4044e4:	00405181 	.word	0x00405181
  4044e8:	004051a3 	.word	0x004051a3
  4044ec:	004051db 	.word	0x004051db
  4044f0:	004051ff 	.word	0x004051ff

004044f4 <__sfmoreglue>:
  4044f4:	b570      	push	{r4, r5, r6, lr}
  4044f6:	1e4a      	subs	r2, r1, #1
  4044f8:	2568      	movs	r5, #104	; 0x68
  4044fa:	4355      	muls	r5, r2
  4044fc:	460e      	mov	r6, r1
  4044fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
  404502:	f000 fc91 	bl	404e28 <_malloc_r>
  404506:	4604      	mov	r4, r0
  404508:	b140      	cbz	r0, 40451c <__sfmoreglue+0x28>
  40450a:	2100      	movs	r1, #0
  40450c:	e880 0042 	stmia.w	r0, {r1, r6}
  404510:	300c      	adds	r0, #12
  404512:	60a0      	str	r0, [r4, #8]
  404514:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404518:	f7fe fb73 	bl	402c02 <memset>
  40451c:	4620      	mov	r0, r4
  40451e:	bd70      	pop	{r4, r5, r6, pc}

00404520 <__sinit>:
  404520:	6983      	ldr	r3, [r0, #24]
  404522:	b510      	push	{r4, lr}
  404524:	4604      	mov	r4, r0
  404526:	bb33      	cbnz	r3, 404576 <__sinit+0x56>
  404528:	6483      	str	r3, [r0, #72]	; 0x48
  40452a:	64c3      	str	r3, [r0, #76]	; 0x4c
  40452c:	6503      	str	r3, [r0, #80]	; 0x50
  40452e:	4b12      	ldr	r3, [pc, #72]	; (404578 <__sinit+0x58>)
  404530:	4a12      	ldr	r2, [pc, #72]	; (40457c <__sinit+0x5c>)
  404532:	681b      	ldr	r3, [r3, #0]
  404534:	6282      	str	r2, [r0, #40]	; 0x28
  404536:	4298      	cmp	r0, r3
  404538:	bf04      	itt	eq
  40453a:	2301      	moveq	r3, #1
  40453c:	6183      	streq	r3, [r0, #24]
  40453e:	f000 f81f 	bl	404580 <__sfp>
  404542:	6060      	str	r0, [r4, #4]
  404544:	4620      	mov	r0, r4
  404546:	f000 f81b 	bl	404580 <__sfp>
  40454a:	60a0      	str	r0, [r4, #8]
  40454c:	4620      	mov	r0, r4
  40454e:	f000 f817 	bl	404580 <__sfp>
  404552:	2200      	movs	r2, #0
  404554:	60e0      	str	r0, [r4, #12]
  404556:	2104      	movs	r1, #4
  404558:	6860      	ldr	r0, [r4, #4]
  40455a:	f7ff ffa7 	bl	4044ac <std.isra.0>
  40455e:	2201      	movs	r2, #1
  404560:	2109      	movs	r1, #9
  404562:	68a0      	ldr	r0, [r4, #8]
  404564:	f7ff ffa2 	bl	4044ac <std.isra.0>
  404568:	2202      	movs	r2, #2
  40456a:	2112      	movs	r1, #18
  40456c:	68e0      	ldr	r0, [r4, #12]
  40456e:	f7ff ff9d 	bl	4044ac <std.isra.0>
  404572:	2301      	movs	r3, #1
  404574:	61a3      	str	r3, [r4, #24]
  404576:	bd10      	pop	{r4, pc}
  404578:	00405938 	.word	0x00405938
  40457c:	004044a1 	.word	0x004044a1

00404580 <__sfp>:
  404580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404582:	4b1c      	ldr	r3, [pc, #112]	; (4045f4 <__sfp+0x74>)
  404584:	681e      	ldr	r6, [r3, #0]
  404586:	69b3      	ldr	r3, [r6, #24]
  404588:	4607      	mov	r7, r0
  40458a:	b913      	cbnz	r3, 404592 <__sfp+0x12>
  40458c:	4630      	mov	r0, r6
  40458e:	f7ff ffc7 	bl	404520 <__sinit>
  404592:	3648      	adds	r6, #72	; 0x48
  404594:	68b4      	ldr	r4, [r6, #8]
  404596:	6873      	ldr	r3, [r6, #4]
  404598:	3b01      	subs	r3, #1
  40459a:	d503      	bpl.n	4045a4 <__sfp+0x24>
  40459c:	6833      	ldr	r3, [r6, #0]
  40459e:	b133      	cbz	r3, 4045ae <__sfp+0x2e>
  4045a0:	6836      	ldr	r6, [r6, #0]
  4045a2:	e7f7      	b.n	404594 <__sfp+0x14>
  4045a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  4045a8:	b16d      	cbz	r5, 4045c6 <__sfp+0x46>
  4045aa:	3468      	adds	r4, #104	; 0x68
  4045ac:	e7f4      	b.n	404598 <__sfp+0x18>
  4045ae:	2104      	movs	r1, #4
  4045b0:	4638      	mov	r0, r7
  4045b2:	f7ff ff9f 	bl	4044f4 <__sfmoreglue>
  4045b6:	6030      	str	r0, [r6, #0]
  4045b8:	2800      	cmp	r0, #0
  4045ba:	d1f1      	bne.n	4045a0 <__sfp+0x20>
  4045bc:	230c      	movs	r3, #12
  4045be:	603b      	str	r3, [r7, #0]
  4045c0:	4604      	mov	r4, r0
  4045c2:	4620      	mov	r0, r4
  4045c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4045c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4045ca:	81e3      	strh	r3, [r4, #14]
  4045cc:	2301      	movs	r3, #1
  4045ce:	81a3      	strh	r3, [r4, #12]
  4045d0:	6665      	str	r5, [r4, #100]	; 0x64
  4045d2:	6025      	str	r5, [r4, #0]
  4045d4:	60a5      	str	r5, [r4, #8]
  4045d6:	6065      	str	r5, [r4, #4]
  4045d8:	6125      	str	r5, [r4, #16]
  4045da:	6165      	str	r5, [r4, #20]
  4045dc:	61a5      	str	r5, [r4, #24]
  4045de:	2208      	movs	r2, #8
  4045e0:	4629      	mov	r1, r5
  4045e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  4045e6:	f7fe fb0c 	bl	402c02 <memset>
  4045ea:	6365      	str	r5, [r4, #52]	; 0x34
  4045ec:	63a5      	str	r5, [r4, #56]	; 0x38
  4045ee:	64a5      	str	r5, [r4, #72]	; 0x48
  4045f0:	64e5      	str	r5, [r4, #76]	; 0x4c
  4045f2:	e7e6      	b.n	4045c2 <__sfp+0x42>
  4045f4:	00405938 	.word	0x00405938

004045f8 <_fwalk_reent>:
  4045f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4045fc:	4680      	mov	r8, r0
  4045fe:	4689      	mov	r9, r1
  404600:	f100 0448 	add.w	r4, r0, #72	; 0x48
  404604:	2600      	movs	r6, #0
  404606:	b914      	cbnz	r4, 40460e <_fwalk_reent+0x16>
  404608:	4630      	mov	r0, r6
  40460a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40460e:	68a5      	ldr	r5, [r4, #8]
  404610:	6867      	ldr	r7, [r4, #4]
  404612:	3f01      	subs	r7, #1
  404614:	d501      	bpl.n	40461a <_fwalk_reent+0x22>
  404616:	6824      	ldr	r4, [r4, #0]
  404618:	e7f5      	b.n	404606 <_fwalk_reent+0xe>
  40461a:	89ab      	ldrh	r3, [r5, #12]
  40461c:	2b01      	cmp	r3, #1
  40461e:	d907      	bls.n	404630 <_fwalk_reent+0x38>
  404620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  404624:	3301      	adds	r3, #1
  404626:	d003      	beq.n	404630 <_fwalk_reent+0x38>
  404628:	4629      	mov	r1, r5
  40462a:	4640      	mov	r0, r8
  40462c:	47c8      	blx	r9
  40462e:	4306      	orrs	r6, r0
  404630:	3568      	adds	r5, #104	; 0x68
  404632:	e7ee      	b.n	404612 <_fwalk_reent+0x1a>

00404634 <_localeconv_r>:
  404634:	4b04      	ldr	r3, [pc, #16]	; (404648 <_localeconv_r+0x14>)
  404636:	681b      	ldr	r3, [r3, #0]
  404638:	6a18      	ldr	r0, [r3, #32]
  40463a:	4b04      	ldr	r3, [pc, #16]	; (40464c <_localeconv_r+0x18>)
  40463c:	2800      	cmp	r0, #0
  40463e:	bf08      	it	eq
  404640:	4618      	moveq	r0, r3
  404642:	30f0      	adds	r0, #240	; 0xf0
  404644:	4770      	bx	lr
  404646:	bf00      	nop
  404648:	20400048 	.word	0x20400048
  40464c:	204000ac 	.word	0x204000ac

00404650 <__swhatbuf_r>:
  404650:	b570      	push	{r4, r5, r6, lr}
  404652:	460e      	mov	r6, r1
  404654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404658:	2900      	cmp	r1, #0
  40465a:	b090      	sub	sp, #64	; 0x40
  40465c:	4614      	mov	r4, r2
  40465e:	461d      	mov	r5, r3
  404660:	da07      	bge.n	404672 <__swhatbuf_r+0x22>
  404662:	2300      	movs	r3, #0
  404664:	602b      	str	r3, [r5, #0]
  404666:	89b3      	ldrh	r3, [r6, #12]
  404668:	061a      	lsls	r2, r3, #24
  40466a:	d410      	bmi.n	40468e <__swhatbuf_r+0x3e>
  40466c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404670:	e00e      	b.n	404690 <__swhatbuf_r+0x40>
  404672:	aa01      	add	r2, sp, #4
  404674:	f000 feaa 	bl	4053cc <_fstat_r>
  404678:	2800      	cmp	r0, #0
  40467a:	dbf2      	blt.n	404662 <__swhatbuf_r+0x12>
  40467c:	9a02      	ldr	r2, [sp, #8]
  40467e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404682:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  404686:	425a      	negs	r2, r3
  404688:	415a      	adcs	r2, r3
  40468a:	602a      	str	r2, [r5, #0]
  40468c:	e7ee      	b.n	40466c <__swhatbuf_r+0x1c>
  40468e:	2340      	movs	r3, #64	; 0x40
  404690:	2000      	movs	r0, #0
  404692:	6023      	str	r3, [r4, #0]
  404694:	b010      	add	sp, #64	; 0x40
  404696:	bd70      	pop	{r4, r5, r6, pc}

00404698 <__smakebuf_r>:
  404698:	898b      	ldrh	r3, [r1, #12]
  40469a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  40469c:	079d      	lsls	r5, r3, #30
  40469e:	4606      	mov	r6, r0
  4046a0:	460c      	mov	r4, r1
  4046a2:	d507      	bpl.n	4046b4 <__smakebuf_r+0x1c>
  4046a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4046a8:	6023      	str	r3, [r4, #0]
  4046aa:	6123      	str	r3, [r4, #16]
  4046ac:	2301      	movs	r3, #1
  4046ae:	6163      	str	r3, [r4, #20]
  4046b0:	b002      	add	sp, #8
  4046b2:	bd70      	pop	{r4, r5, r6, pc}
  4046b4:	ab01      	add	r3, sp, #4
  4046b6:	466a      	mov	r2, sp
  4046b8:	f7ff ffca 	bl	404650 <__swhatbuf_r>
  4046bc:	9900      	ldr	r1, [sp, #0]
  4046be:	4605      	mov	r5, r0
  4046c0:	4630      	mov	r0, r6
  4046c2:	f000 fbb1 	bl	404e28 <_malloc_r>
  4046c6:	b948      	cbnz	r0, 4046dc <__smakebuf_r+0x44>
  4046c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4046cc:	059a      	lsls	r2, r3, #22
  4046ce:	d4ef      	bmi.n	4046b0 <__smakebuf_r+0x18>
  4046d0:	f023 0303 	bic.w	r3, r3, #3
  4046d4:	f043 0302 	orr.w	r3, r3, #2
  4046d8:	81a3      	strh	r3, [r4, #12]
  4046da:	e7e3      	b.n	4046a4 <__smakebuf_r+0xc>
  4046dc:	4b0d      	ldr	r3, [pc, #52]	; (404714 <__smakebuf_r+0x7c>)
  4046de:	62b3      	str	r3, [r6, #40]	; 0x28
  4046e0:	89a3      	ldrh	r3, [r4, #12]
  4046e2:	6020      	str	r0, [r4, #0]
  4046e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4046e8:	81a3      	strh	r3, [r4, #12]
  4046ea:	9b00      	ldr	r3, [sp, #0]
  4046ec:	6163      	str	r3, [r4, #20]
  4046ee:	9b01      	ldr	r3, [sp, #4]
  4046f0:	6120      	str	r0, [r4, #16]
  4046f2:	b15b      	cbz	r3, 40470c <__smakebuf_r+0x74>
  4046f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4046f8:	4630      	mov	r0, r6
  4046fa:	f000 fe79 	bl	4053f0 <_isatty_r>
  4046fe:	b128      	cbz	r0, 40470c <__smakebuf_r+0x74>
  404700:	89a3      	ldrh	r3, [r4, #12]
  404702:	f023 0303 	bic.w	r3, r3, #3
  404706:	f043 0301 	orr.w	r3, r3, #1
  40470a:	81a3      	strh	r3, [r4, #12]
  40470c:	89a3      	ldrh	r3, [r4, #12]
  40470e:	431d      	orrs	r5, r3
  404710:	81a5      	strh	r5, [r4, #12]
  404712:	e7cd      	b.n	4046b0 <__smakebuf_r+0x18>
  404714:	004044a1 	.word	0x004044a1

00404718 <malloc>:
  404718:	4b02      	ldr	r3, [pc, #8]	; (404724 <malloc+0xc>)
  40471a:	4601      	mov	r1, r0
  40471c:	6818      	ldr	r0, [r3, #0]
  40471e:	f000 bb83 	b.w	404e28 <_malloc_r>
  404722:	bf00      	nop
  404724:	20400048 	.word	0x20400048
	...

00404730 <memchr>:
  404730:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404734:	2a10      	cmp	r2, #16
  404736:	db2b      	blt.n	404790 <memchr+0x60>
  404738:	f010 0f07 	tst.w	r0, #7
  40473c:	d008      	beq.n	404750 <memchr+0x20>
  40473e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404742:	3a01      	subs	r2, #1
  404744:	428b      	cmp	r3, r1
  404746:	d02d      	beq.n	4047a4 <memchr+0x74>
  404748:	f010 0f07 	tst.w	r0, #7
  40474c:	b342      	cbz	r2, 4047a0 <memchr+0x70>
  40474e:	d1f6      	bne.n	40473e <memchr+0xe>
  404750:	b4f0      	push	{r4, r5, r6, r7}
  404752:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404756:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40475a:	f022 0407 	bic.w	r4, r2, #7
  40475e:	f07f 0700 	mvns.w	r7, #0
  404762:	2300      	movs	r3, #0
  404764:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404768:	3c08      	subs	r4, #8
  40476a:	ea85 0501 	eor.w	r5, r5, r1
  40476e:	ea86 0601 	eor.w	r6, r6, r1
  404772:	fa85 f547 	uadd8	r5, r5, r7
  404776:	faa3 f587 	sel	r5, r3, r7
  40477a:	fa86 f647 	uadd8	r6, r6, r7
  40477e:	faa5 f687 	sel	r6, r5, r7
  404782:	b98e      	cbnz	r6, 4047a8 <memchr+0x78>
  404784:	d1ee      	bne.n	404764 <memchr+0x34>
  404786:	bcf0      	pop	{r4, r5, r6, r7}
  404788:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40478c:	f002 0207 	and.w	r2, r2, #7
  404790:	b132      	cbz	r2, 4047a0 <memchr+0x70>
  404792:	f810 3b01 	ldrb.w	r3, [r0], #1
  404796:	3a01      	subs	r2, #1
  404798:	ea83 0301 	eor.w	r3, r3, r1
  40479c:	b113      	cbz	r3, 4047a4 <memchr+0x74>
  40479e:	d1f8      	bne.n	404792 <memchr+0x62>
  4047a0:	2000      	movs	r0, #0
  4047a2:	4770      	bx	lr
  4047a4:	3801      	subs	r0, #1
  4047a6:	4770      	bx	lr
  4047a8:	2d00      	cmp	r5, #0
  4047aa:	bf06      	itte	eq
  4047ac:	4635      	moveq	r5, r6
  4047ae:	3803      	subeq	r0, #3
  4047b0:	3807      	subne	r0, #7
  4047b2:	f015 0f01 	tst.w	r5, #1
  4047b6:	d107      	bne.n	4047c8 <memchr+0x98>
  4047b8:	3001      	adds	r0, #1
  4047ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4047be:	bf02      	ittt	eq
  4047c0:	3001      	addeq	r0, #1
  4047c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4047c6:	3001      	addeq	r0, #1
  4047c8:	bcf0      	pop	{r4, r5, r6, r7}
  4047ca:	3801      	subs	r0, #1
  4047cc:	4770      	bx	lr
  4047ce:	bf00      	nop

004047d0 <_Balloc>:
  4047d0:	b570      	push	{r4, r5, r6, lr}
  4047d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4047d4:	4604      	mov	r4, r0
  4047d6:	460e      	mov	r6, r1
  4047d8:	b93d      	cbnz	r5, 4047ea <_Balloc+0x1a>
  4047da:	2010      	movs	r0, #16
  4047dc:	f7ff ff9c 	bl	404718 <malloc>
  4047e0:	6260      	str	r0, [r4, #36]	; 0x24
  4047e2:	6045      	str	r5, [r0, #4]
  4047e4:	6085      	str	r5, [r0, #8]
  4047e6:	6005      	str	r5, [r0, #0]
  4047e8:	60c5      	str	r5, [r0, #12]
  4047ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4047ec:	68eb      	ldr	r3, [r5, #12]
  4047ee:	b183      	cbz	r3, 404812 <_Balloc+0x42>
  4047f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4047f2:	68db      	ldr	r3, [r3, #12]
  4047f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  4047f8:	b9b8      	cbnz	r0, 40482a <_Balloc+0x5a>
  4047fa:	2101      	movs	r1, #1
  4047fc:	fa01 f506 	lsl.w	r5, r1, r6
  404800:	1d6a      	adds	r2, r5, #5
  404802:	0092      	lsls	r2, r2, #2
  404804:	4620      	mov	r0, r4
  404806:	f000 fab3 	bl	404d70 <_calloc_r>
  40480a:	b160      	cbz	r0, 404826 <_Balloc+0x56>
  40480c:	6046      	str	r6, [r0, #4]
  40480e:	6085      	str	r5, [r0, #8]
  404810:	e00e      	b.n	404830 <_Balloc+0x60>
  404812:	2221      	movs	r2, #33	; 0x21
  404814:	2104      	movs	r1, #4
  404816:	4620      	mov	r0, r4
  404818:	f000 faaa 	bl	404d70 <_calloc_r>
  40481c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40481e:	60e8      	str	r0, [r5, #12]
  404820:	68db      	ldr	r3, [r3, #12]
  404822:	2b00      	cmp	r3, #0
  404824:	d1e4      	bne.n	4047f0 <_Balloc+0x20>
  404826:	2000      	movs	r0, #0
  404828:	bd70      	pop	{r4, r5, r6, pc}
  40482a:	6802      	ldr	r2, [r0, #0]
  40482c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  404830:	2300      	movs	r3, #0
  404832:	6103      	str	r3, [r0, #16]
  404834:	60c3      	str	r3, [r0, #12]
  404836:	bd70      	pop	{r4, r5, r6, pc}

00404838 <_Bfree>:
  404838:	b570      	push	{r4, r5, r6, lr}
  40483a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40483c:	4606      	mov	r6, r0
  40483e:	460d      	mov	r5, r1
  404840:	b93c      	cbnz	r4, 404852 <_Bfree+0x1a>
  404842:	2010      	movs	r0, #16
  404844:	f7ff ff68 	bl	404718 <malloc>
  404848:	6270      	str	r0, [r6, #36]	; 0x24
  40484a:	6044      	str	r4, [r0, #4]
  40484c:	6084      	str	r4, [r0, #8]
  40484e:	6004      	str	r4, [r0, #0]
  404850:	60c4      	str	r4, [r0, #12]
  404852:	b13d      	cbz	r5, 404864 <_Bfree+0x2c>
  404854:	6a73      	ldr	r3, [r6, #36]	; 0x24
  404856:	686a      	ldr	r2, [r5, #4]
  404858:	68db      	ldr	r3, [r3, #12]
  40485a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40485e:	6029      	str	r1, [r5, #0]
  404860:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  404864:	bd70      	pop	{r4, r5, r6, pc}

00404866 <__multadd>:
  404866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40486a:	690d      	ldr	r5, [r1, #16]
  40486c:	461f      	mov	r7, r3
  40486e:	4606      	mov	r6, r0
  404870:	460c      	mov	r4, r1
  404872:	f101 0e14 	add.w	lr, r1, #20
  404876:	2300      	movs	r3, #0
  404878:	f8de 0000 	ldr.w	r0, [lr]
  40487c:	b281      	uxth	r1, r0
  40487e:	fb02 7101 	mla	r1, r2, r1, r7
  404882:	0c0f      	lsrs	r7, r1, #16
  404884:	0c00      	lsrs	r0, r0, #16
  404886:	fb02 7000 	mla	r0, r2, r0, r7
  40488a:	b289      	uxth	r1, r1
  40488c:	3301      	adds	r3, #1
  40488e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  404892:	429d      	cmp	r5, r3
  404894:	ea4f 4710 	mov.w	r7, r0, lsr #16
  404898:	f84e 1b04 	str.w	r1, [lr], #4
  40489c:	dcec      	bgt.n	404878 <__multadd+0x12>
  40489e:	b1d7      	cbz	r7, 4048d6 <__multadd+0x70>
  4048a0:	68a3      	ldr	r3, [r4, #8]
  4048a2:	429d      	cmp	r5, r3
  4048a4:	db12      	blt.n	4048cc <__multadd+0x66>
  4048a6:	6861      	ldr	r1, [r4, #4]
  4048a8:	4630      	mov	r0, r6
  4048aa:	3101      	adds	r1, #1
  4048ac:	f7ff ff90 	bl	4047d0 <_Balloc>
  4048b0:	6922      	ldr	r2, [r4, #16]
  4048b2:	3202      	adds	r2, #2
  4048b4:	f104 010c 	add.w	r1, r4, #12
  4048b8:	4680      	mov	r8, r0
  4048ba:	0092      	lsls	r2, r2, #2
  4048bc:	300c      	adds	r0, #12
  4048be:	f7fe f995 	bl	402bec <memcpy>
  4048c2:	4621      	mov	r1, r4
  4048c4:	4630      	mov	r0, r6
  4048c6:	f7ff ffb7 	bl	404838 <_Bfree>
  4048ca:	4644      	mov	r4, r8
  4048cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4048d0:	3501      	adds	r5, #1
  4048d2:	615f      	str	r7, [r3, #20]
  4048d4:	6125      	str	r5, [r4, #16]
  4048d6:	4620      	mov	r0, r4
  4048d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004048dc <__hi0bits>:
  4048dc:	0c02      	lsrs	r2, r0, #16
  4048de:	0412      	lsls	r2, r2, #16
  4048e0:	4603      	mov	r3, r0
  4048e2:	b9b2      	cbnz	r2, 404912 <__hi0bits+0x36>
  4048e4:	0403      	lsls	r3, r0, #16
  4048e6:	2010      	movs	r0, #16
  4048e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4048ec:	bf04      	itt	eq
  4048ee:	021b      	lsleq	r3, r3, #8
  4048f0:	3008      	addeq	r0, #8
  4048f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4048f6:	bf04      	itt	eq
  4048f8:	011b      	lsleq	r3, r3, #4
  4048fa:	3004      	addeq	r0, #4
  4048fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  404900:	bf04      	itt	eq
  404902:	009b      	lsleq	r3, r3, #2
  404904:	3002      	addeq	r0, #2
  404906:	2b00      	cmp	r3, #0
  404908:	db06      	blt.n	404918 <__hi0bits+0x3c>
  40490a:	005b      	lsls	r3, r3, #1
  40490c:	d503      	bpl.n	404916 <__hi0bits+0x3a>
  40490e:	3001      	adds	r0, #1
  404910:	4770      	bx	lr
  404912:	2000      	movs	r0, #0
  404914:	e7e8      	b.n	4048e8 <__hi0bits+0xc>
  404916:	2020      	movs	r0, #32
  404918:	4770      	bx	lr

0040491a <__lo0bits>:
  40491a:	6803      	ldr	r3, [r0, #0]
  40491c:	f013 0207 	ands.w	r2, r3, #7
  404920:	4601      	mov	r1, r0
  404922:	d00b      	beq.n	40493c <__lo0bits+0x22>
  404924:	07da      	lsls	r2, r3, #31
  404926:	d423      	bmi.n	404970 <__lo0bits+0x56>
  404928:	0798      	lsls	r0, r3, #30
  40492a:	bf49      	itett	mi
  40492c:	085b      	lsrmi	r3, r3, #1
  40492e:	089b      	lsrpl	r3, r3, #2
  404930:	2001      	movmi	r0, #1
  404932:	600b      	strmi	r3, [r1, #0]
  404934:	bf5c      	itt	pl
  404936:	600b      	strpl	r3, [r1, #0]
  404938:	2002      	movpl	r0, #2
  40493a:	4770      	bx	lr
  40493c:	b298      	uxth	r0, r3
  40493e:	b9a8      	cbnz	r0, 40496c <__lo0bits+0x52>
  404940:	0c1b      	lsrs	r3, r3, #16
  404942:	2010      	movs	r0, #16
  404944:	f013 0fff 	tst.w	r3, #255	; 0xff
  404948:	bf04      	itt	eq
  40494a:	0a1b      	lsreq	r3, r3, #8
  40494c:	3008      	addeq	r0, #8
  40494e:	071a      	lsls	r2, r3, #28
  404950:	bf04      	itt	eq
  404952:	091b      	lsreq	r3, r3, #4
  404954:	3004      	addeq	r0, #4
  404956:	079a      	lsls	r2, r3, #30
  404958:	bf04      	itt	eq
  40495a:	089b      	lsreq	r3, r3, #2
  40495c:	3002      	addeq	r0, #2
  40495e:	07da      	lsls	r2, r3, #31
  404960:	d402      	bmi.n	404968 <__lo0bits+0x4e>
  404962:	085b      	lsrs	r3, r3, #1
  404964:	d006      	beq.n	404974 <__lo0bits+0x5a>
  404966:	3001      	adds	r0, #1
  404968:	600b      	str	r3, [r1, #0]
  40496a:	4770      	bx	lr
  40496c:	4610      	mov	r0, r2
  40496e:	e7e9      	b.n	404944 <__lo0bits+0x2a>
  404970:	2000      	movs	r0, #0
  404972:	4770      	bx	lr
  404974:	2020      	movs	r0, #32
  404976:	4770      	bx	lr

00404978 <__i2b>:
  404978:	b510      	push	{r4, lr}
  40497a:	460c      	mov	r4, r1
  40497c:	2101      	movs	r1, #1
  40497e:	f7ff ff27 	bl	4047d0 <_Balloc>
  404982:	2201      	movs	r2, #1
  404984:	6144      	str	r4, [r0, #20]
  404986:	6102      	str	r2, [r0, #16]
  404988:	bd10      	pop	{r4, pc}

0040498a <__multiply>:
  40498a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40498e:	4614      	mov	r4, r2
  404990:	690a      	ldr	r2, [r1, #16]
  404992:	6923      	ldr	r3, [r4, #16]
  404994:	429a      	cmp	r2, r3
  404996:	bfb8      	it	lt
  404998:	460b      	movlt	r3, r1
  40499a:	4689      	mov	r9, r1
  40499c:	bfbc      	itt	lt
  40499e:	46a1      	movlt	r9, r4
  4049a0:	461c      	movlt	r4, r3
  4049a2:	f8d9 7010 	ldr.w	r7, [r9, #16]
  4049a6:	f8d4 a010 	ldr.w	sl, [r4, #16]
  4049aa:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4049ae:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4049b2:	eb07 060a 	add.w	r6, r7, sl
  4049b6:	429e      	cmp	r6, r3
  4049b8:	bfc8      	it	gt
  4049ba:	3101      	addgt	r1, #1
  4049bc:	f7ff ff08 	bl	4047d0 <_Balloc>
  4049c0:	f100 0514 	add.w	r5, r0, #20
  4049c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  4049c8:	462b      	mov	r3, r5
  4049ca:	2200      	movs	r2, #0
  4049cc:	4543      	cmp	r3, r8
  4049ce:	d316      	bcc.n	4049fe <__multiply+0x74>
  4049d0:	f104 0214 	add.w	r2, r4, #20
  4049d4:	f109 0114 	add.w	r1, r9, #20
  4049d8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  4049dc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  4049e0:	9301      	str	r3, [sp, #4]
  4049e2:	9c01      	ldr	r4, [sp, #4]
  4049e4:	4294      	cmp	r4, r2
  4049e6:	4613      	mov	r3, r2
  4049e8:	d80c      	bhi.n	404a04 <__multiply+0x7a>
  4049ea:	2e00      	cmp	r6, #0
  4049ec:	dd03      	ble.n	4049f6 <__multiply+0x6c>
  4049ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  4049f2:	2b00      	cmp	r3, #0
  4049f4:	d054      	beq.n	404aa0 <__multiply+0x116>
  4049f6:	6106      	str	r6, [r0, #16]
  4049f8:	b003      	add	sp, #12
  4049fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049fe:	f843 2b04 	str.w	r2, [r3], #4
  404a02:	e7e3      	b.n	4049cc <__multiply+0x42>
  404a04:	f8b3 a000 	ldrh.w	sl, [r3]
  404a08:	3204      	adds	r2, #4
  404a0a:	f1ba 0f00 	cmp.w	sl, #0
  404a0e:	d020      	beq.n	404a52 <__multiply+0xc8>
  404a10:	46ae      	mov	lr, r5
  404a12:	4689      	mov	r9, r1
  404a14:	f04f 0c00 	mov.w	ip, #0
  404a18:	f859 4b04 	ldr.w	r4, [r9], #4
  404a1c:	f8be b000 	ldrh.w	fp, [lr]
  404a20:	b2a3      	uxth	r3, r4
  404a22:	fb0a b303 	mla	r3, sl, r3, fp
  404a26:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  404a2a:	f8de 4000 	ldr.w	r4, [lr]
  404a2e:	4463      	add	r3, ip
  404a30:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  404a34:	fb0a c40b 	mla	r4, sl, fp, ip
  404a38:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  404a3c:	b29b      	uxth	r3, r3
  404a3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  404a42:	454f      	cmp	r7, r9
  404a44:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  404a48:	f84e 3b04 	str.w	r3, [lr], #4
  404a4c:	d8e4      	bhi.n	404a18 <__multiply+0x8e>
  404a4e:	f8ce c000 	str.w	ip, [lr]
  404a52:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  404a56:	f1b9 0f00 	cmp.w	r9, #0
  404a5a:	d01f      	beq.n	404a9c <__multiply+0x112>
  404a5c:	682b      	ldr	r3, [r5, #0]
  404a5e:	46ae      	mov	lr, r5
  404a60:	468c      	mov	ip, r1
  404a62:	f04f 0a00 	mov.w	sl, #0
  404a66:	f8bc 4000 	ldrh.w	r4, [ip]
  404a6a:	f8be b002 	ldrh.w	fp, [lr, #2]
  404a6e:	fb09 b404 	mla	r4, r9, r4, fp
  404a72:	44a2      	add	sl, r4
  404a74:	b29b      	uxth	r3, r3
  404a76:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  404a7a:	f84e 3b04 	str.w	r3, [lr], #4
  404a7e:	f85c 3b04 	ldr.w	r3, [ip], #4
  404a82:	f8be 4000 	ldrh.w	r4, [lr]
  404a86:	0c1b      	lsrs	r3, r3, #16
  404a88:	fb09 4303 	mla	r3, r9, r3, r4
  404a8c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  404a90:	4567      	cmp	r7, ip
  404a92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  404a96:	d8e6      	bhi.n	404a66 <__multiply+0xdc>
  404a98:	f8ce 3000 	str.w	r3, [lr]
  404a9c:	3504      	adds	r5, #4
  404a9e:	e7a0      	b.n	4049e2 <__multiply+0x58>
  404aa0:	3e01      	subs	r6, #1
  404aa2:	e7a2      	b.n	4049ea <__multiply+0x60>

00404aa4 <__pow5mult>:
  404aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404aa8:	4615      	mov	r5, r2
  404aaa:	f012 0203 	ands.w	r2, r2, #3
  404aae:	4606      	mov	r6, r0
  404ab0:	460f      	mov	r7, r1
  404ab2:	d007      	beq.n	404ac4 <__pow5mult+0x20>
  404ab4:	3a01      	subs	r2, #1
  404ab6:	4c21      	ldr	r4, [pc, #132]	; (404b3c <__pow5mult+0x98>)
  404ab8:	2300      	movs	r3, #0
  404aba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  404abe:	f7ff fed2 	bl	404866 <__multadd>
  404ac2:	4607      	mov	r7, r0
  404ac4:	10ad      	asrs	r5, r5, #2
  404ac6:	d035      	beq.n	404b34 <__pow5mult+0x90>
  404ac8:	6a74      	ldr	r4, [r6, #36]	; 0x24
  404aca:	b93c      	cbnz	r4, 404adc <__pow5mult+0x38>
  404acc:	2010      	movs	r0, #16
  404ace:	f7ff fe23 	bl	404718 <malloc>
  404ad2:	6270      	str	r0, [r6, #36]	; 0x24
  404ad4:	6044      	str	r4, [r0, #4]
  404ad6:	6084      	str	r4, [r0, #8]
  404ad8:	6004      	str	r4, [r0, #0]
  404ada:	60c4      	str	r4, [r0, #12]
  404adc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  404ae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
  404ae4:	b94c      	cbnz	r4, 404afa <__pow5mult+0x56>
  404ae6:	f240 2171 	movw	r1, #625	; 0x271
  404aea:	4630      	mov	r0, r6
  404aec:	f7ff ff44 	bl	404978 <__i2b>
  404af0:	2300      	movs	r3, #0
  404af2:	f8c8 0008 	str.w	r0, [r8, #8]
  404af6:	4604      	mov	r4, r0
  404af8:	6003      	str	r3, [r0, #0]
  404afa:	f04f 0800 	mov.w	r8, #0
  404afe:	07eb      	lsls	r3, r5, #31
  404b00:	d50a      	bpl.n	404b18 <__pow5mult+0x74>
  404b02:	4639      	mov	r1, r7
  404b04:	4622      	mov	r2, r4
  404b06:	4630      	mov	r0, r6
  404b08:	f7ff ff3f 	bl	40498a <__multiply>
  404b0c:	4639      	mov	r1, r7
  404b0e:	4681      	mov	r9, r0
  404b10:	4630      	mov	r0, r6
  404b12:	f7ff fe91 	bl	404838 <_Bfree>
  404b16:	464f      	mov	r7, r9
  404b18:	106d      	asrs	r5, r5, #1
  404b1a:	d00b      	beq.n	404b34 <__pow5mult+0x90>
  404b1c:	6820      	ldr	r0, [r4, #0]
  404b1e:	b938      	cbnz	r0, 404b30 <__pow5mult+0x8c>
  404b20:	4622      	mov	r2, r4
  404b22:	4621      	mov	r1, r4
  404b24:	4630      	mov	r0, r6
  404b26:	f7ff ff30 	bl	40498a <__multiply>
  404b2a:	6020      	str	r0, [r4, #0]
  404b2c:	f8c0 8000 	str.w	r8, [r0]
  404b30:	4604      	mov	r4, r0
  404b32:	e7e4      	b.n	404afe <__pow5mult+0x5a>
  404b34:	4638      	mov	r0, r7
  404b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404b3a:	bf00      	nop
  404b3c:	00405ad0 	.word	0x00405ad0

00404b40 <__lshift>:
  404b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404b44:	460c      	mov	r4, r1
  404b46:	ea4f 1a62 	mov.w	sl, r2, asr #5
  404b4a:	6923      	ldr	r3, [r4, #16]
  404b4c:	6849      	ldr	r1, [r1, #4]
  404b4e:	eb0a 0903 	add.w	r9, sl, r3
  404b52:	68a3      	ldr	r3, [r4, #8]
  404b54:	4607      	mov	r7, r0
  404b56:	4616      	mov	r6, r2
  404b58:	f109 0501 	add.w	r5, r9, #1
  404b5c:	42ab      	cmp	r3, r5
  404b5e:	db31      	blt.n	404bc4 <__lshift+0x84>
  404b60:	4638      	mov	r0, r7
  404b62:	f7ff fe35 	bl	4047d0 <_Balloc>
  404b66:	2200      	movs	r2, #0
  404b68:	4680      	mov	r8, r0
  404b6a:	f100 0314 	add.w	r3, r0, #20
  404b6e:	4611      	mov	r1, r2
  404b70:	4552      	cmp	r2, sl
  404b72:	db2a      	blt.n	404bca <__lshift+0x8a>
  404b74:	6920      	ldr	r0, [r4, #16]
  404b76:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  404b7a:	f104 0114 	add.w	r1, r4, #20
  404b7e:	f016 021f 	ands.w	r2, r6, #31
  404b82:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  404b86:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  404b8a:	d022      	beq.n	404bd2 <__lshift+0x92>
  404b8c:	f1c2 0c20 	rsb	ip, r2, #32
  404b90:	2000      	movs	r0, #0
  404b92:	680e      	ldr	r6, [r1, #0]
  404b94:	4096      	lsls	r6, r2
  404b96:	4330      	orrs	r0, r6
  404b98:	f843 0b04 	str.w	r0, [r3], #4
  404b9c:	f851 0b04 	ldr.w	r0, [r1], #4
  404ba0:	458e      	cmp	lr, r1
  404ba2:	fa20 f00c 	lsr.w	r0, r0, ip
  404ba6:	d8f4      	bhi.n	404b92 <__lshift+0x52>
  404ba8:	6018      	str	r0, [r3, #0]
  404baa:	b108      	cbz	r0, 404bb0 <__lshift+0x70>
  404bac:	f109 0502 	add.w	r5, r9, #2
  404bb0:	3d01      	subs	r5, #1
  404bb2:	4638      	mov	r0, r7
  404bb4:	f8c8 5010 	str.w	r5, [r8, #16]
  404bb8:	4621      	mov	r1, r4
  404bba:	f7ff fe3d 	bl	404838 <_Bfree>
  404bbe:	4640      	mov	r0, r8
  404bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404bc4:	3101      	adds	r1, #1
  404bc6:	005b      	lsls	r3, r3, #1
  404bc8:	e7c8      	b.n	404b5c <__lshift+0x1c>
  404bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  404bce:	3201      	adds	r2, #1
  404bd0:	e7ce      	b.n	404b70 <__lshift+0x30>
  404bd2:	3b04      	subs	r3, #4
  404bd4:	f851 2b04 	ldr.w	r2, [r1], #4
  404bd8:	f843 2f04 	str.w	r2, [r3, #4]!
  404bdc:	458e      	cmp	lr, r1
  404bde:	d8f9      	bhi.n	404bd4 <__lshift+0x94>
  404be0:	e7e6      	b.n	404bb0 <__lshift+0x70>

00404be2 <__mcmp>:
  404be2:	6903      	ldr	r3, [r0, #16]
  404be4:	690a      	ldr	r2, [r1, #16]
  404be6:	1a9b      	subs	r3, r3, r2
  404be8:	b530      	push	{r4, r5, lr}
  404bea:	d10c      	bne.n	404c06 <__mcmp+0x24>
  404bec:	0092      	lsls	r2, r2, #2
  404bee:	3014      	adds	r0, #20
  404bf0:	3114      	adds	r1, #20
  404bf2:	1884      	adds	r4, r0, r2
  404bf4:	4411      	add	r1, r2
  404bf6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  404bfa:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  404bfe:	4295      	cmp	r5, r2
  404c00:	d003      	beq.n	404c0a <__mcmp+0x28>
  404c02:	d305      	bcc.n	404c10 <__mcmp+0x2e>
  404c04:	2301      	movs	r3, #1
  404c06:	4618      	mov	r0, r3
  404c08:	bd30      	pop	{r4, r5, pc}
  404c0a:	42a0      	cmp	r0, r4
  404c0c:	d3f3      	bcc.n	404bf6 <__mcmp+0x14>
  404c0e:	e7fa      	b.n	404c06 <__mcmp+0x24>
  404c10:	f04f 33ff 	mov.w	r3, #4294967295
  404c14:	e7f7      	b.n	404c06 <__mcmp+0x24>

00404c16 <__mdiff>:
  404c16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404c1a:	460d      	mov	r5, r1
  404c1c:	4607      	mov	r7, r0
  404c1e:	4611      	mov	r1, r2
  404c20:	4628      	mov	r0, r5
  404c22:	4614      	mov	r4, r2
  404c24:	f7ff ffdd 	bl	404be2 <__mcmp>
  404c28:	1e06      	subs	r6, r0, #0
  404c2a:	d108      	bne.n	404c3e <__mdiff+0x28>
  404c2c:	4631      	mov	r1, r6
  404c2e:	4638      	mov	r0, r7
  404c30:	f7ff fdce 	bl	4047d0 <_Balloc>
  404c34:	2301      	movs	r3, #1
  404c36:	6103      	str	r3, [r0, #16]
  404c38:	6146      	str	r6, [r0, #20]
  404c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404c3e:	bfa4      	itt	ge
  404c40:	4623      	movge	r3, r4
  404c42:	462c      	movge	r4, r5
  404c44:	4638      	mov	r0, r7
  404c46:	6861      	ldr	r1, [r4, #4]
  404c48:	bfa6      	itte	ge
  404c4a:	461d      	movge	r5, r3
  404c4c:	2600      	movge	r6, #0
  404c4e:	2601      	movlt	r6, #1
  404c50:	f7ff fdbe 	bl	4047d0 <_Balloc>
  404c54:	692b      	ldr	r3, [r5, #16]
  404c56:	60c6      	str	r6, [r0, #12]
  404c58:	6926      	ldr	r6, [r4, #16]
  404c5a:	f105 0914 	add.w	r9, r5, #20
  404c5e:	f104 0214 	add.w	r2, r4, #20
  404c62:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  404c66:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  404c6a:	f100 0514 	add.w	r5, r0, #20
  404c6e:	f04f 0c00 	mov.w	ip, #0
  404c72:	f852 ab04 	ldr.w	sl, [r2], #4
  404c76:	f859 4b04 	ldr.w	r4, [r9], #4
  404c7a:	fa1c f18a 	uxtah	r1, ip, sl
  404c7e:	b2a3      	uxth	r3, r4
  404c80:	1ac9      	subs	r1, r1, r3
  404c82:	0c23      	lsrs	r3, r4, #16
  404c84:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  404c88:	eb03 4321 	add.w	r3, r3, r1, asr #16
  404c8c:	b289      	uxth	r1, r1
  404c8e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  404c92:	45c8      	cmp	r8, r9
  404c94:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  404c98:	4696      	mov	lr, r2
  404c9a:	f845 3b04 	str.w	r3, [r5], #4
  404c9e:	d8e8      	bhi.n	404c72 <__mdiff+0x5c>
  404ca0:	45be      	cmp	lr, r7
  404ca2:	d305      	bcc.n	404cb0 <__mdiff+0x9a>
  404ca4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404ca8:	b18b      	cbz	r3, 404cce <__mdiff+0xb8>
  404caa:	6106      	str	r6, [r0, #16]
  404cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404cb0:	f85e 1b04 	ldr.w	r1, [lr], #4
  404cb4:	fa1c f381 	uxtah	r3, ip, r1
  404cb8:	141a      	asrs	r2, r3, #16
  404cba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  404cbe:	b29b      	uxth	r3, r3
  404cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404cc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
  404cc8:	f845 3b04 	str.w	r3, [r5], #4
  404ccc:	e7e8      	b.n	404ca0 <__mdiff+0x8a>
  404cce:	3e01      	subs	r6, #1
  404cd0:	e7e8      	b.n	404ca4 <__mdiff+0x8e>

00404cd2 <__d2b>:
  404cd2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  404cd6:	2101      	movs	r1, #1
  404cd8:	461c      	mov	r4, r3
  404cda:	4690      	mov	r8, r2
  404cdc:	9e08      	ldr	r6, [sp, #32]
  404cde:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404ce0:	f7ff fd76 	bl	4047d0 <_Balloc>
  404ce4:	f3c4 0213 	ubfx	r2, r4, #0, #20
  404ce8:	f3c4 540a 	ubfx	r4, r4, #20, #11
  404cec:	4607      	mov	r7, r0
  404cee:	bb34      	cbnz	r4, 404d3e <__d2b+0x6c>
  404cf0:	9201      	str	r2, [sp, #4]
  404cf2:	f1b8 0f00 	cmp.w	r8, #0
  404cf6:	d027      	beq.n	404d48 <__d2b+0x76>
  404cf8:	a802      	add	r0, sp, #8
  404cfa:	f840 8d08 	str.w	r8, [r0, #-8]!
  404cfe:	f7ff fe0c 	bl	40491a <__lo0bits>
  404d02:	9900      	ldr	r1, [sp, #0]
  404d04:	b1f0      	cbz	r0, 404d44 <__d2b+0x72>
  404d06:	9a01      	ldr	r2, [sp, #4]
  404d08:	f1c0 0320 	rsb	r3, r0, #32
  404d0c:	fa02 f303 	lsl.w	r3, r2, r3
  404d10:	430b      	orrs	r3, r1
  404d12:	40c2      	lsrs	r2, r0
  404d14:	617b      	str	r3, [r7, #20]
  404d16:	9201      	str	r2, [sp, #4]
  404d18:	9b01      	ldr	r3, [sp, #4]
  404d1a:	61bb      	str	r3, [r7, #24]
  404d1c:	2b00      	cmp	r3, #0
  404d1e:	bf14      	ite	ne
  404d20:	2102      	movne	r1, #2
  404d22:	2101      	moveq	r1, #1
  404d24:	6139      	str	r1, [r7, #16]
  404d26:	b1c4      	cbz	r4, 404d5a <__d2b+0x88>
  404d28:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  404d2c:	4404      	add	r4, r0
  404d2e:	6034      	str	r4, [r6, #0]
  404d30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  404d34:	6028      	str	r0, [r5, #0]
  404d36:	4638      	mov	r0, r7
  404d38:	b002      	add	sp, #8
  404d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  404d42:	e7d5      	b.n	404cf0 <__d2b+0x1e>
  404d44:	6179      	str	r1, [r7, #20]
  404d46:	e7e7      	b.n	404d18 <__d2b+0x46>
  404d48:	a801      	add	r0, sp, #4
  404d4a:	f7ff fde6 	bl	40491a <__lo0bits>
  404d4e:	9b01      	ldr	r3, [sp, #4]
  404d50:	617b      	str	r3, [r7, #20]
  404d52:	2101      	movs	r1, #1
  404d54:	6139      	str	r1, [r7, #16]
  404d56:	3020      	adds	r0, #32
  404d58:	e7e5      	b.n	404d26 <__d2b+0x54>
  404d5a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  404d5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  404d62:	6030      	str	r0, [r6, #0]
  404d64:	6918      	ldr	r0, [r3, #16]
  404d66:	f7ff fdb9 	bl	4048dc <__hi0bits>
  404d6a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  404d6e:	e7e1      	b.n	404d34 <__d2b+0x62>

00404d70 <_calloc_r>:
  404d70:	b538      	push	{r3, r4, r5, lr}
  404d72:	fb02 f401 	mul.w	r4, r2, r1
  404d76:	4621      	mov	r1, r4
  404d78:	f000 f856 	bl	404e28 <_malloc_r>
  404d7c:	4605      	mov	r5, r0
  404d7e:	b118      	cbz	r0, 404d88 <_calloc_r+0x18>
  404d80:	4622      	mov	r2, r4
  404d82:	2100      	movs	r1, #0
  404d84:	f7fd ff3d 	bl	402c02 <memset>
  404d88:	4628      	mov	r0, r5
  404d8a:	bd38      	pop	{r3, r4, r5, pc}

00404d8c <_free_r>:
  404d8c:	b538      	push	{r3, r4, r5, lr}
  404d8e:	4605      	mov	r5, r0
  404d90:	2900      	cmp	r1, #0
  404d92:	d045      	beq.n	404e20 <_free_r+0x94>
  404d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
  404d98:	1f0c      	subs	r4, r1, #4
  404d9a:	2b00      	cmp	r3, #0
  404d9c:	bfb8      	it	lt
  404d9e:	18e4      	addlt	r4, r4, r3
  404da0:	f000 fb5a 	bl	405458 <__malloc_lock>
  404da4:	4a1f      	ldr	r2, [pc, #124]	; (404e24 <_free_r+0x98>)
  404da6:	6813      	ldr	r3, [r2, #0]
  404da8:	4610      	mov	r0, r2
  404daa:	b933      	cbnz	r3, 404dba <_free_r+0x2e>
  404dac:	6063      	str	r3, [r4, #4]
  404dae:	6014      	str	r4, [r2, #0]
  404db0:	4628      	mov	r0, r5
  404db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404db6:	f000 bb50 	b.w	40545a <__malloc_unlock>
  404dba:	42a3      	cmp	r3, r4
  404dbc:	d90c      	bls.n	404dd8 <_free_r+0x4c>
  404dbe:	6821      	ldr	r1, [r4, #0]
  404dc0:	1862      	adds	r2, r4, r1
  404dc2:	4293      	cmp	r3, r2
  404dc4:	bf04      	itt	eq
  404dc6:	681a      	ldreq	r2, [r3, #0]
  404dc8:	685b      	ldreq	r3, [r3, #4]
  404dca:	6063      	str	r3, [r4, #4]
  404dcc:	bf04      	itt	eq
  404dce:	1852      	addeq	r2, r2, r1
  404dd0:	6022      	streq	r2, [r4, #0]
  404dd2:	6004      	str	r4, [r0, #0]
  404dd4:	e7ec      	b.n	404db0 <_free_r+0x24>
  404dd6:	4613      	mov	r3, r2
  404dd8:	685a      	ldr	r2, [r3, #4]
  404dda:	b10a      	cbz	r2, 404de0 <_free_r+0x54>
  404ddc:	42a2      	cmp	r2, r4
  404dde:	d9fa      	bls.n	404dd6 <_free_r+0x4a>
  404de0:	6819      	ldr	r1, [r3, #0]
  404de2:	1858      	adds	r0, r3, r1
  404de4:	42a0      	cmp	r0, r4
  404de6:	d10b      	bne.n	404e00 <_free_r+0x74>
  404de8:	6820      	ldr	r0, [r4, #0]
  404dea:	4401      	add	r1, r0
  404dec:	1858      	adds	r0, r3, r1
  404dee:	4282      	cmp	r2, r0
  404df0:	6019      	str	r1, [r3, #0]
  404df2:	d1dd      	bne.n	404db0 <_free_r+0x24>
  404df4:	6810      	ldr	r0, [r2, #0]
  404df6:	6852      	ldr	r2, [r2, #4]
  404df8:	605a      	str	r2, [r3, #4]
  404dfa:	4401      	add	r1, r0
  404dfc:	6019      	str	r1, [r3, #0]
  404dfe:	e7d7      	b.n	404db0 <_free_r+0x24>
  404e00:	d902      	bls.n	404e08 <_free_r+0x7c>
  404e02:	230c      	movs	r3, #12
  404e04:	602b      	str	r3, [r5, #0]
  404e06:	e7d3      	b.n	404db0 <_free_r+0x24>
  404e08:	6820      	ldr	r0, [r4, #0]
  404e0a:	1821      	adds	r1, r4, r0
  404e0c:	428a      	cmp	r2, r1
  404e0e:	bf04      	itt	eq
  404e10:	6811      	ldreq	r1, [r2, #0]
  404e12:	6852      	ldreq	r2, [r2, #4]
  404e14:	6062      	str	r2, [r4, #4]
  404e16:	bf04      	itt	eq
  404e18:	1809      	addeq	r1, r1, r0
  404e1a:	6021      	streq	r1, [r4, #0]
  404e1c:	605c      	str	r4, [r3, #4]
  404e1e:	e7c7      	b.n	404db0 <_free_r+0x24>
  404e20:	bd38      	pop	{r3, r4, r5, pc}
  404e22:	bf00      	nop
  404e24:	204004b8 	.word	0x204004b8

00404e28 <_malloc_r>:
  404e28:	b570      	push	{r4, r5, r6, lr}
  404e2a:	1ccd      	adds	r5, r1, #3
  404e2c:	f025 0503 	bic.w	r5, r5, #3
  404e30:	3508      	adds	r5, #8
  404e32:	2d0c      	cmp	r5, #12
  404e34:	bf38      	it	cc
  404e36:	250c      	movcc	r5, #12
  404e38:	2d00      	cmp	r5, #0
  404e3a:	4606      	mov	r6, r0
  404e3c:	db01      	blt.n	404e42 <_malloc_r+0x1a>
  404e3e:	42a9      	cmp	r1, r5
  404e40:	d903      	bls.n	404e4a <_malloc_r+0x22>
  404e42:	230c      	movs	r3, #12
  404e44:	6033      	str	r3, [r6, #0]
  404e46:	2000      	movs	r0, #0
  404e48:	bd70      	pop	{r4, r5, r6, pc}
  404e4a:	f000 fb05 	bl	405458 <__malloc_lock>
  404e4e:	4a23      	ldr	r2, [pc, #140]	; (404edc <_malloc_r+0xb4>)
  404e50:	6814      	ldr	r4, [r2, #0]
  404e52:	4621      	mov	r1, r4
  404e54:	b991      	cbnz	r1, 404e7c <_malloc_r+0x54>
  404e56:	4c22      	ldr	r4, [pc, #136]	; (404ee0 <_malloc_r+0xb8>)
  404e58:	6823      	ldr	r3, [r4, #0]
  404e5a:	b91b      	cbnz	r3, 404e64 <_malloc_r+0x3c>
  404e5c:	4630      	mov	r0, r6
  404e5e:	f000 f97f 	bl	405160 <_sbrk_r>
  404e62:	6020      	str	r0, [r4, #0]
  404e64:	4629      	mov	r1, r5
  404e66:	4630      	mov	r0, r6
  404e68:	f000 f97a 	bl	405160 <_sbrk_r>
  404e6c:	1c43      	adds	r3, r0, #1
  404e6e:	d126      	bne.n	404ebe <_malloc_r+0x96>
  404e70:	230c      	movs	r3, #12
  404e72:	6033      	str	r3, [r6, #0]
  404e74:	4630      	mov	r0, r6
  404e76:	f000 faf0 	bl	40545a <__malloc_unlock>
  404e7a:	e7e4      	b.n	404e46 <_malloc_r+0x1e>
  404e7c:	680b      	ldr	r3, [r1, #0]
  404e7e:	1b5b      	subs	r3, r3, r5
  404e80:	d41a      	bmi.n	404eb8 <_malloc_r+0x90>
  404e82:	2b0b      	cmp	r3, #11
  404e84:	d90f      	bls.n	404ea6 <_malloc_r+0x7e>
  404e86:	600b      	str	r3, [r1, #0]
  404e88:	50cd      	str	r5, [r1, r3]
  404e8a:	18cc      	adds	r4, r1, r3
  404e8c:	4630      	mov	r0, r6
  404e8e:	f000 fae4 	bl	40545a <__malloc_unlock>
  404e92:	f104 000b 	add.w	r0, r4, #11
  404e96:	1d23      	adds	r3, r4, #4
  404e98:	f020 0007 	bic.w	r0, r0, #7
  404e9c:	1ac3      	subs	r3, r0, r3
  404e9e:	d01b      	beq.n	404ed8 <_malloc_r+0xb0>
  404ea0:	425a      	negs	r2, r3
  404ea2:	50e2      	str	r2, [r4, r3]
  404ea4:	bd70      	pop	{r4, r5, r6, pc}
  404ea6:	428c      	cmp	r4, r1
  404ea8:	bf0d      	iteet	eq
  404eaa:	6863      	ldreq	r3, [r4, #4]
  404eac:	684b      	ldrne	r3, [r1, #4]
  404eae:	6063      	strne	r3, [r4, #4]
  404eb0:	6013      	streq	r3, [r2, #0]
  404eb2:	bf18      	it	ne
  404eb4:	460c      	movne	r4, r1
  404eb6:	e7e9      	b.n	404e8c <_malloc_r+0x64>
  404eb8:	460c      	mov	r4, r1
  404eba:	6849      	ldr	r1, [r1, #4]
  404ebc:	e7ca      	b.n	404e54 <_malloc_r+0x2c>
  404ebe:	1cc4      	adds	r4, r0, #3
  404ec0:	f024 0403 	bic.w	r4, r4, #3
  404ec4:	42a0      	cmp	r0, r4
  404ec6:	d005      	beq.n	404ed4 <_malloc_r+0xac>
  404ec8:	1a21      	subs	r1, r4, r0
  404eca:	4630      	mov	r0, r6
  404ecc:	f000 f948 	bl	405160 <_sbrk_r>
  404ed0:	3001      	adds	r0, #1
  404ed2:	d0cd      	beq.n	404e70 <_malloc_r+0x48>
  404ed4:	6025      	str	r5, [r4, #0]
  404ed6:	e7d9      	b.n	404e8c <_malloc_r+0x64>
  404ed8:	bd70      	pop	{r4, r5, r6, pc}
  404eda:	bf00      	nop
  404edc:	204004b8 	.word	0x204004b8
  404ee0:	204004bc 	.word	0x204004bc

00404ee4 <__sfputc_r>:
  404ee4:	6893      	ldr	r3, [r2, #8]
  404ee6:	3b01      	subs	r3, #1
  404ee8:	2b00      	cmp	r3, #0
  404eea:	b410      	push	{r4}
  404eec:	6093      	str	r3, [r2, #8]
  404eee:	da08      	bge.n	404f02 <__sfputc_r+0x1e>
  404ef0:	6994      	ldr	r4, [r2, #24]
  404ef2:	42a3      	cmp	r3, r4
  404ef4:	db02      	blt.n	404efc <__sfputc_r+0x18>
  404ef6:	b2cb      	uxtb	r3, r1
  404ef8:	2b0a      	cmp	r3, #10
  404efa:	d102      	bne.n	404f02 <__sfputc_r+0x1e>
  404efc:	bc10      	pop	{r4}
  404efe:	f000 b983 	b.w	405208 <__swbuf_r>
  404f02:	6813      	ldr	r3, [r2, #0]
  404f04:	1c58      	adds	r0, r3, #1
  404f06:	6010      	str	r0, [r2, #0]
  404f08:	7019      	strb	r1, [r3, #0]
  404f0a:	b2c8      	uxtb	r0, r1
  404f0c:	bc10      	pop	{r4}
  404f0e:	4770      	bx	lr

00404f10 <__sfputs_r>:
  404f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404f12:	4606      	mov	r6, r0
  404f14:	460f      	mov	r7, r1
  404f16:	4614      	mov	r4, r2
  404f18:	18d5      	adds	r5, r2, r3
  404f1a:	42ac      	cmp	r4, r5
  404f1c:	d101      	bne.n	404f22 <__sfputs_r+0x12>
  404f1e:	2000      	movs	r0, #0
  404f20:	e007      	b.n	404f32 <__sfputs_r+0x22>
  404f22:	463a      	mov	r2, r7
  404f24:	f814 1b01 	ldrb.w	r1, [r4], #1
  404f28:	4630      	mov	r0, r6
  404f2a:	f7ff ffdb 	bl	404ee4 <__sfputc_r>
  404f2e:	1c43      	adds	r3, r0, #1
  404f30:	d1f3      	bne.n	404f1a <__sfputs_r+0xa>
  404f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00404f34 <_vfiprintf_r>:
  404f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f38:	b09d      	sub	sp, #116	; 0x74
  404f3a:	460c      	mov	r4, r1
  404f3c:	4617      	mov	r7, r2
  404f3e:	9303      	str	r3, [sp, #12]
  404f40:	4606      	mov	r6, r0
  404f42:	b118      	cbz	r0, 404f4c <_vfiprintf_r+0x18>
  404f44:	6983      	ldr	r3, [r0, #24]
  404f46:	b90b      	cbnz	r3, 404f4c <_vfiprintf_r+0x18>
  404f48:	f7ff faea 	bl	404520 <__sinit>
  404f4c:	4b7c      	ldr	r3, [pc, #496]	; (405140 <_vfiprintf_r+0x20c>)
  404f4e:	429c      	cmp	r4, r3
  404f50:	d157      	bne.n	405002 <_vfiprintf_r+0xce>
  404f52:	6874      	ldr	r4, [r6, #4]
  404f54:	89a3      	ldrh	r3, [r4, #12]
  404f56:	0718      	lsls	r0, r3, #28
  404f58:	d55d      	bpl.n	405016 <_vfiprintf_r+0xe2>
  404f5a:	6923      	ldr	r3, [r4, #16]
  404f5c:	2b00      	cmp	r3, #0
  404f5e:	d05a      	beq.n	405016 <_vfiprintf_r+0xe2>
  404f60:	2300      	movs	r3, #0
  404f62:	9309      	str	r3, [sp, #36]	; 0x24
  404f64:	2320      	movs	r3, #32
  404f66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  404f6a:	2330      	movs	r3, #48	; 0x30
  404f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  404f70:	f04f 0b01 	mov.w	fp, #1
  404f74:	46b8      	mov	r8, r7
  404f76:	4645      	mov	r5, r8
  404f78:	f815 3b01 	ldrb.w	r3, [r5], #1
  404f7c:	2b00      	cmp	r3, #0
  404f7e:	d155      	bne.n	40502c <_vfiprintf_r+0xf8>
  404f80:	ebb8 0a07 	subs.w	sl, r8, r7
  404f84:	d00b      	beq.n	404f9e <_vfiprintf_r+0x6a>
  404f86:	4653      	mov	r3, sl
  404f88:	463a      	mov	r2, r7
  404f8a:	4621      	mov	r1, r4
  404f8c:	4630      	mov	r0, r6
  404f8e:	f7ff ffbf 	bl	404f10 <__sfputs_r>
  404f92:	3001      	adds	r0, #1
  404f94:	f000 80c4 	beq.w	405120 <_vfiprintf_r+0x1ec>
  404f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404f9a:	4453      	add	r3, sl
  404f9c:	9309      	str	r3, [sp, #36]	; 0x24
  404f9e:	f898 3000 	ldrb.w	r3, [r8]
  404fa2:	2b00      	cmp	r3, #0
  404fa4:	f000 80bc 	beq.w	405120 <_vfiprintf_r+0x1ec>
  404fa8:	2300      	movs	r3, #0
  404faa:	f04f 32ff 	mov.w	r2, #4294967295
  404fae:	9304      	str	r3, [sp, #16]
  404fb0:	9307      	str	r3, [sp, #28]
  404fb2:	9205      	str	r2, [sp, #20]
  404fb4:	9306      	str	r3, [sp, #24]
  404fb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  404fba:	931a      	str	r3, [sp, #104]	; 0x68
  404fbc:	2205      	movs	r2, #5
  404fbe:	7829      	ldrb	r1, [r5, #0]
  404fc0:	4860      	ldr	r0, [pc, #384]	; (405144 <_vfiprintf_r+0x210>)
  404fc2:	f7ff fbb5 	bl	404730 <memchr>
  404fc6:	f105 0801 	add.w	r8, r5, #1
  404fca:	9b04      	ldr	r3, [sp, #16]
  404fcc:	2800      	cmp	r0, #0
  404fce:	d131      	bne.n	405034 <_vfiprintf_r+0x100>
  404fd0:	06d9      	lsls	r1, r3, #27
  404fd2:	bf44      	itt	mi
  404fd4:	2220      	movmi	r2, #32
  404fd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404fda:	071a      	lsls	r2, r3, #28
  404fdc:	bf44      	itt	mi
  404fde:	222b      	movmi	r2, #43	; 0x2b
  404fe0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404fe4:	782a      	ldrb	r2, [r5, #0]
  404fe6:	2a2a      	cmp	r2, #42	; 0x2a
  404fe8:	d02c      	beq.n	405044 <_vfiprintf_r+0x110>
  404fea:	9a07      	ldr	r2, [sp, #28]
  404fec:	2100      	movs	r1, #0
  404fee:	200a      	movs	r0, #10
  404ff0:	46a8      	mov	r8, r5
  404ff2:	3501      	adds	r5, #1
  404ff4:	f898 3000 	ldrb.w	r3, [r8]
  404ff8:	3b30      	subs	r3, #48	; 0x30
  404ffa:	2b09      	cmp	r3, #9
  404ffc:	d96d      	bls.n	4050da <_vfiprintf_r+0x1a6>
  404ffe:	b371      	cbz	r1, 40505e <_vfiprintf_r+0x12a>
  405000:	e026      	b.n	405050 <_vfiprintf_r+0x11c>
  405002:	4b51      	ldr	r3, [pc, #324]	; (405148 <_vfiprintf_r+0x214>)
  405004:	429c      	cmp	r4, r3
  405006:	d101      	bne.n	40500c <_vfiprintf_r+0xd8>
  405008:	68b4      	ldr	r4, [r6, #8]
  40500a:	e7a3      	b.n	404f54 <_vfiprintf_r+0x20>
  40500c:	4b4f      	ldr	r3, [pc, #316]	; (40514c <_vfiprintf_r+0x218>)
  40500e:	429c      	cmp	r4, r3
  405010:	bf08      	it	eq
  405012:	68f4      	ldreq	r4, [r6, #12]
  405014:	e79e      	b.n	404f54 <_vfiprintf_r+0x20>
  405016:	4621      	mov	r1, r4
  405018:	4630      	mov	r0, r6
  40501a:	f000 f959 	bl	4052d0 <__swsetup_r>
  40501e:	2800      	cmp	r0, #0
  405020:	d09e      	beq.n	404f60 <_vfiprintf_r+0x2c>
  405022:	f04f 30ff 	mov.w	r0, #4294967295
  405026:	b01d      	add	sp, #116	; 0x74
  405028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40502c:	2b25      	cmp	r3, #37	; 0x25
  40502e:	d0a7      	beq.n	404f80 <_vfiprintf_r+0x4c>
  405030:	46a8      	mov	r8, r5
  405032:	e7a0      	b.n	404f76 <_vfiprintf_r+0x42>
  405034:	4a43      	ldr	r2, [pc, #268]	; (405144 <_vfiprintf_r+0x210>)
  405036:	1a80      	subs	r0, r0, r2
  405038:	fa0b f000 	lsl.w	r0, fp, r0
  40503c:	4318      	orrs	r0, r3
  40503e:	9004      	str	r0, [sp, #16]
  405040:	4645      	mov	r5, r8
  405042:	e7bb      	b.n	404fbc <_vfiprintf_r+0x88>
  405044:	9a03      	ldr	r2, [sp, #12]
  405046:	1d11      	adds	r1, r2, #4
  405048:	6812      	ldr	r2, [r2, #0]
  40504a:	9103      	str	r1, [sp, #12]
  40504c:	2a00      	cmp	r2, #0
  40504e:	db01      	blt.n	405054 <_vfiprintf_r+0x120>
  405050:	9207      	str	r2, [sp, #28]
  405052:	e004      	b.n	40505e <_vfiprintf_r+0x12a>
  405054:	4252      	negs	r2, r2
  405056:	f043 0302 	orr.w	r3, r3, #2
  40505a:	9207      	str	r2, [sp, #28]
  40505c:	9304      	str	r3, [sp, #16]
  40505e:	f898 3000 	ldrb.w	r3, [r8]
  405062:	2b2e      	cmp	r3, #46	; 0x2e
  405064:	d110      	bne.n	405088 <_vfiprintf_r+0x154>
  405066:	f898 3001 	ldrb.w	r3, [r8, #1]
  40506a:	2b2a      	cmp	r3, #42	; 0x2a
  40506c:	f108 0101 	add.w	r1, r8, #1
  405070:	d137      	bne.n	4050e2 <_vfiprintf_r+0x1ae>
  405072:	9b03      	ldr	r3, [sp, #12]
  405074:	1d1a      	adds	r2, r3, #4
  405076:	681b      	ldr	r3, [r3, #0]
  405078:	9203      	str	r2, [sp, #12]
  40507a:	2b00      	cmp	r3, #0
  40507c:	bfb8      	it	lt
  40507e:	f04f 33ff 	movlt.w	r3, #4294967295
  405082:	f108 0802 	add.w	r8, r8, #2
  405086:	9305      	str	r3, [sp, #20]
  405088:	4d31      	ldr	r5, [pc, #196]	; (405150 <_vfiprintf_r+0x21c>)
  40508a:	f898 1000 	ldrb.w	r1, [r8]
  40508e:	2203      	movs	r2, #3
  405090:	4628      	mov	r0, r5
  405092:	f7ff fb4d 	bl	404730 <memchr>
  405096:	b140      	cbz	r0, 4050aa <_vfiprintf_r+0x176>
  405098:	2340      	movs	r3, #64	; 0x40
  40509a:	1b40      	subs	r0, r0, r5
  40509c:	fa03 f000 	lsl.w	r0, r3, r0
  4050a0:	9b04      	ldr	r3, [sp, #16]
  4050a2:	4303      	orrs	r3, r0
  4050a4:	9304      	str	r3, [sp, #16]
  4050a6:	f108 0801 	add.w	r8, r8, #1
  4050aa:	f898 1000 	ldrb.w	r1, [r8]
  4050ae:	4829      	ldr	r0, [pc, #164]	; (405154 <_vfiprintf_r+0x220>)
  4050b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  4050b4:	2206      	movs	r2, #6
  4050b6:	f108 0701 	add.w	r7, r8, #1
  4050ba:	f7ff fb39 	bl	404730 <memchr>
  4050be:	2800      	cmp	r0, #0
  4050c0:	d034      	beq.n	40512c <_vfiprintf_r+0x1f8>
  4050c2:	4b25      	ldr	r3, [pc, #148]	; (405158 <_vfiprintf_r+0x224>)
  4050c4:	bb03      	cbnz	r3, 405108 <_vfiprintf_r+0x1d4>
  4050c6:	9b03      	ldr	r3, [sp, #12]
  4050c8:	3307      	adds	r3, #7
  4050ca:	f023 0307 	bic.w	r3, r3, #7
  4050ce:	3308      	adds	r3, #8
  4050d0:	9303      	str	r3, [sp, #12]
  4050d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4050d4:	444b      	add	r3, r9
  4050d6:	9309      	str	r3, [sp, #36]	; 0x24
  4050d8:	e74c      	b.n	404f74 <_vfiprintf_r+0x40>
  4050da:	fb00 3202 	mla	r2, r0, r2, r3
  4050de:	2101      	movs	r1, #1
  4050e0:	e786      	b.n	404ff0 <_vfiprintf_r+0xbc>
  4050e2:	2300      	movs	r3, #0
  4050e4:	9305      	str	r3, [sp, #20]
  4050e6:	4618      	mov	r0, r3
  4050e8:	250a      	movs	r5, #10
  4050ea:	4688      	mov	r8, r1
  4050ec:	3101      	adds	r1, #1
  4050ee:	f898 2000 	ldrb.w	r2, [r8]
  4050f2:	3a30      	subs	r2, #48	; 0x30
  4050f4:	2a09      	cmp	r2, #9
  4050f6:	d903      	bls.n	405100 <_vfiprintf_r+0x1cc>
  4050f8:	2b00      	cmp	r3, #0
  4050fa:	d0c5      	beq.n	405088 <_vfiprintf_r+0x154>
  4050fc:	9005      	str	r0, [sp, #20]
  4050fe:	e7c3      	b.n	405088 <_vfiprintf_r+0x154>
  405100:	fb05 2000 	mla	r0, r5, r0, r2
  405104:	2301      	movs	r3, #1
  405106:	e7f0      	b.n	4050ea <_vfiprintf_r+0x1b6>
  405108:	ab03      	add	r3, sp, #12
  40510a:	9300      	str	r3, [sp, #0]
  40510c:	4622      	mov	r2, r4
  40510e:	4b13      	ldr	r3, [pc, #76]	; (40515c <_vfiprintf_r+0x228>)
  405110:	a904      	add	r1, sp, #16
  405112:	4630      	mov	r0, r6
  405114:	f7fd fe0e 	bl	402d34 <_printf_float>
  405118:	f1b0 3fff 	cmp.w	r0, #4294967295
  40511c:	4681      	mov	r9, r0
  40511e:	d1d8      	bne.n	4050d2 <_vfiprintf_r+0x19e>
  405120:	89a3      	ldrh	r3, [r4, #12]
  405122:	065b      	lsls	r3, r3, #25
  405124:	f53f af7d 	bmi.w	405022 <_vfiprintf_r+0xee>
  405128:	9809      	ldr	r0, [sp, #36]	; 0x24
  40512a:	e77c      	b.n	405026 <_vfiprintf_r+0xf2>
  40512c:	ab03      	add	r3, sp, #12
  40512e:	9300      	str	r3, [sp, #0]
  405130:	4622      	mov	r2, r4
  405132:	4b0a      	ldr	r3, [pc, #40]	; (40515c <_vfiprintf_r+0x228>)
  405134:	a904      	add	r1, sp, #16
  405136:	4630      	mov	r0, r6
  405138:	f7fe f8aa 	bl	403290 <_printf_i>
  40513c:	e7ec      	b.n	405118 <_vfiprintf_r+0x1e4>
  40513e:	bf00      	nop
  405140:	004059a0 	.word	0x004059a0
  405144:	00405adc 	.word	0x00405adc
  405148:	004059c0 	.word	0x004059c0
  40514c:	00405980 	.word	0x00405980
  405150:	00405ae2 	.word	0x00405ae2
  405154:	00405ae6 	.word	0x00405ae6
  405158:	00402d35 	.word	0x00402d35
  40515c:	00404f11 	.word	0x00404f11

00405160 <_sbrk_r>:
  405160:	b538      	push	{r3, r4, r5, lr}
  405162:	4c06      	ldr	r4, [pc, #24]	; (40517c <_sbrk_r+0x1c>)
  405164:	2300      	movs	r3, #0
  405166:	4605      	mov	r5, r0
  405168:	4608      	mov	r0, r1
  40516a:	6023      	str	r3, [r4, #0]
  40516c:	f7fc f86a 	bl	401244 <_sbrk>
  405170:	1c43      	adds	r3, r0, #1
  405172:	d102      	bne.n	40517a <_sbrk_r+0x1a>
  405174:	6823      	ldr	r3, [r4, #0]
  405176:	b103      	cbz	r3, 40517a <_sbrk_r+0x1a>
  405178:	602b      	str	r3, [r5, #0]
  40517a:	bd38      	pop	{r3, r4, r5, pc}
  40517c:	204006bc 	.word	0x204006bc

00405180 <__sread>:
  405180:	b510      	push	{r4, lr}
  405182:	460c      	mov	r4, r1
  405184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405188:	f000 f968 	bl	40545c <_read_r>
  40518c:	2800      	cmp	r0, #0
  40518e:	bfab      	itete	ge
  405190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  405192:	89a3      	ldrhlt	r3, [r4, #12]
  405194:	181b      	addge	r3, r3, r0
  405196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  40519a:	bfac      	ite	ge
  40519c:	6563      	strge	r3, [r4, #84]	; 0x54
  40519e:	81a3      	strhlt	r3, [r4, #12]
  4051a0:	bd10      	pop	{r4, pc}

004051a2 <__swrite>:
  4051a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4051a6:	461f      	mov	r7, r3
  4051a8:	898b      	ldrh	r3, [r1, #12]
  4051aa:	05db      	lsls	r3, r3, #23
  4051ac:	4605      	mov	r5, r0
  4051ae:	460c      	mov	r4, r1
  4051b0:	4616      	mov	r6, r2
  4051b2:	d505      	bpl.n	4051c0 <__swrite+0x1e>
  4051b4:	2302      	movs	r3, #2
  4051b6:	2200      	movs	r2, #0
  4051b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4051bc:	f000 f928 	bl	405410 <_lseek_r>
  4051c0:	89a3      	ldrh	r3, [r4, #12]
  4051c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4051c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4051ca:	81a3      	strh	r3, [r4, #12]
  4051cc:	4632      	mov	r2, r6
  4051ce:	463b      	mov	r3, r7
  4051d0:	4628      	mov	r0, r5
  4051d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4051d6:	f000 b869 	b.w	4052ac <_write_r>

004051da <__sseek>:
  4051da:	b510      	push	{r4, lr}
  4051dc:	460c      	mov	r4, r1
  4051de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4051e2:	f000 f915 	bl	405410 <_lseek_r>
  4051e6:	1c43      	adds	r3, r0, #1
  4051e8:	89a3      	ldrh	r3, [r4, #12]
  4051ea:	bf15      	itete	ne
  4051ec:	6560      	strne	r0, [r4, #84]	; 0x54
  4051ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4051f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4051f6:	81a3      	strheq	r3, [r4, #12]
  4051f8:	bf18      	it	ne
  4051fa:	81a3      	strhne	r3, [r4, #12]
  4051fc:	bd10      	pop	{r4, pc}

004051fe <__sclose>:
  4051fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405202:	f000 b8d3 	b.w	4053ac <_close_r>
	...

00405208 <__swbuf_r>:
  405208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40520a:	460e      	mov	r6, r1
  40520c:	4614      	mov	r4, r2
  40520e:	4605      	mov	r5, r0
  405210:	b118      	cbz	r0, 40521a <__swbuf_r+0x12>
  405212:	6983      	ldr	r3, [r0, #24]
  405214:	b90b      	cbnz	r3, 40521a <__swbuf_r+0x12>
  405216:	f7ff f983 	bl	404520 <__sinit>
  40521a:	4b21      	ldr	r3, [pc, #132]	; (4052a0 <__swbuf_r+0x98>)
  40521c:	429c      	cmp	r4, r3
  40521e:	d12a      	bne.n	405276 <__swbuf_r+0x6e>
  405220:	686c      	ldr	r4, [r5, #4]
  405222:	69a3      	ldr	r3, [r4, #24]
  405224:	60a3      	str	r3, [r4, #8]
  405226:	89a3      	ldrh	r3, [r4, #12]
  405228:	071a      	lsls	r2, r3, #28
  40522a:	d52e      	bpl.n	40528a <__swbuf_r+0x82>
  40522c:	6923      	ldr	r3, [r4, #16]
  40522e:	b363      	cbz	r3, 40528a <__swbuf_r+0x82>
  405230:	6923      	ldr	r3, [r4, #16]
  405232:	6820      	ldr	r0, [r4, #0]
  405234:	1ac0      	subs	r0, r0, r3
  405236:	6963      	ldr	r3, [r4, #20]
  405238:	b2f6      	uxtb	r6, r6
  40523a:	4298      	cmp	r0, r3
  40523c:	4637      	mov	r7, r6
  40523e:	db04      	blt.n	40524a <__swbuf_r+0x42>
  405240:	4621      	mov	r1, r4
  405242:	4628      	mov	r0, r5
  405244:	f7ff f902 	bl	40444c <_fflush_r>
  405248:	bb28      	cbnz	r0, 405296 <__swbuf_r+0x8e>
  40524a:	68a3      	ldr	r3, [r4, #8]
  40524c:	3b01      	subs	r3, #1
  40524e:	60a3      	str	r3, [r4, #8]
  405250:	6823      	ldr	r3, [r4, #0]
  405252:	1c5a      	adds	r2, r3, #1
  405254:	6022      	str	r2, [r4, #0]
  405256:	701e      	strb	r6, [r3, #0]
  405258:	6963      	ldr	r3, [r4, #20]
  40525a:	3001      	adds	r0, #1
  40525c:	4298      	cmp	r0, r3
  40525e:	d004      	beq.n	40526a <__swbuf_r+0x62>
  405260:	89a3      	ldrh	r3, [r4, #12]
  405262:	07db      	lsls	r3, r3, #31
  405264:	d519      	bpl.n	40529a <__swbuf_r+0x92>
  405266:	2e0a      	cmp	r6, #10
  405268:	d117      	bne.n	40529a <__swbuf_r+0x92>
  40526a:	4621      	mov	r1, r4
  40526c:	4628      	mov	r0, r5
  40526e:	f7ff f8ed 	bl	40444c <_fflush_r>
  405272:	b190      	cbz	r0, 40529a <__swbuf_r+0x92>
  405274:	e00f      	b.n	405296 <__swbuf_r+0x8e>
  405276:	4b0b      	ldr	r3, [pc, #44]	; (4052a4 <__swbuf_r+0x9c>)
  405278:	429c      	cmp	r4, r3
  40527a:	d101      	bne.n	405280 <__swbuf_r+0x78>
  40527c:	68ac      	ldr	r4, [r5, #8]
  40527e:	e7d0      	b.n	405222 <__swbuf_r+0x1a>
  405280:	4b09      	ldr	r3, [pc, #36]	; (4052a8 <__swbuf_r+0xa0>)
  405282:	429c      	cmp	r4, r3
  405284:	bf08      	it	eq
  405286:	68ec      	ldreq	r4, [r5, #12]
  405288:	e7cb      	b.n	405222 <__swbuf_r+0x1a>
  40528a:	4621      	mov	r1, r4
  40528c:	4628      	mov	r0, r5
  40528e:	f000 f81f 	bl	4052d0 <__swsetup_r>
  405292:	2800      	cmp	r0, #0
  405294:	d0cc      	beq.n	405230 <__swbuf_r+0x28>
  405296:	f04f 37ff 	mov.w	r7, #4294967295
  40529a:	4638      	mov	r0, r7
  40529c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40529e:	bf00      	nop
  4052a0:	004059a0 	.word	0x004059a0
  4052a4:	004059c0 	.word	0x004059c0
  4052a8:	00405980 	.word	0x00405980

004052ac <_write_r>:
  4052ac:	b538      	push	{r3, r4, r5, lr}
  4052ae:	4c07      	ldr	r4, [pc, #28]	; (4052cc <_write_r+0x20>)
  4052b0:	4605      	mov	r5, r0
  4052b2:	4608      	mov	r0, r1
  4052b4:	4611      	mov	r1, r2
  4052b6:	2200      	movs	r2, #0
  4052b8:	6022      	str	r2, [r4, #0]
  4052ba:	461a      	mov	r2, r3
  4052bc:	f7fc ff9a 	bl	4021f4 <_write>
  4052c0:	1c43      	adds	r3, r0, #1
  4052c2:	d102      	bne.n	4052ca <_write_r+0x1e>
  4052c4:	6823      	ldr	r3, [r4, #0]
  4052c6:	b103      	cbz	r3, 4052ca <_write_r+0x1e>
  4052c8:	602b      	str	r3, [r5, #0]
  4052ca:	bd38      	pop	{r3, r4, r5, pc}
  4052cc:	204006bc 	.word	0x204006bc

004052d0 <__swsetup_r>:
  4052d0:	4b32      	ldr	r3, [pc, #200]	; (40539c <__swsetup_r+0xcc>)
  4052d2:	b570      	push	{r4, r5, r6, lr}
  4052d4:	681d      	ldr	r5, [r3, #0]
  4052d6:	4606      	mov	r6, r0
  4052d8:	460c      	mov	r4, r1
  4052da:	b125      	cbz	r5, 4052e6 <__swsetup_r+0x16>
  4052dc:	69ab      	ldr	r3, [r5, #24]
  4052de:	b913      	cbnz	r3, 4052e6 <__swsetup_r+0x16>
  4052e0:	4628      	mov	r0, r5
  4052e2:	f7ff f91d 	bl	404520 <__sinit>
  4052e6:	4b2e      	ldr	r3, [pc, #184]	; (4053a0 <__swsetup_r+0xd0>)
  4052e8:	429c      	cmp	r4, r3
  4052ea:	d10f      	bne.n	40530c <__swsetup_r+0x3c>
  4052ec:	686c      	ldr	r4, [r5, #4]
  4052ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4052f2:	b29a      	uxth	r2, r3
  4052f4:	0715      	lsls	r5, r2, #28
  4052f6:	d42c      	bmi.n	405352 <__swsetup_r+0x82>
  4052f8:	06d0      	lsls	r0, r2, #27
  4052fa:	d411      	bmi.n	405320 <__swsetup_r+0x50>
  4052fc:	2209      	movs	r2, #9
  4052fe:	6032      	str	r2, [r6, #0]
  405300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405304:	81a3      	strh	r3, [r4, #12]
  405306:	f04f 30ff 	mov.w	r0, #4294967295
  40530a:	bd70      	pop	{r4, r5, r6, pc}
  40530c:	4b25      	ldr	r3, [pc, #148]	; (4053a4 <__swsetup_r+0xd4>)
  40530e:	429c      	cmp	r4, r3
  405310:	d101      	bne.n	405316 <__swsetup_r+0x46>
  405312:	68ac      	ldr	r4, [r5, #8]
  405314:	e7eb      	b.n	4052ee <__swsetup_r+0x1e>
  405316:	4b24      	ldr	r3, [pc, #144]	; (4053a8 <__swsetup_r+0xd8>)
  405318:	429c      	cmp	r4, r3
  40531a:	bf08      	it	eq
  40531c:	68ec      	ldreq	r4, [r5, #12]
  40531e:	e7e6      	b.n	4052ee <__swsetup_r+0x1e>
  405320:	0751      	lsls	r1, r2, #29
  405322:	d512      	bpl.n	40534a <__swsetup_r+0x7a>
  405324:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405326:	b141      	cbz	r1, 40533a <__swsetup_r+0x6a>
  405328:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40532c:	4299      	cmp	r1, r3
  40532e:	d002      	beq.n	405336 <__swsetup_r+0x66>
  405330:	4630      	mov	r0, r6
  405332:	f7ff fd2b 	bl	404d8c <_free_r>
  405336:	2300      	movs	r3, #0
  405338:	6363      	str	r3, [r4, #52]	; 0x34
  40533a:	89a3      	ldrh	r3, [r4, #12]
  40533c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  405340:	81a3      	strh	r3, [r4, #12]
  405342:	2300      	movs	r3, #0
  405344:	6063      	str	r3, [r4, #4]
  405346:	6923      	ldr	r3, [r4, #16]
  405348:	6023      	str	r3, [r4, #0]
  40534a:	89a3      	ldrh	r3, [r4, #12]
  40534c:	f043 0308 	orr.w	r3, r3, #8
  405350:	81a3      	strh	r3, [r4, #12]
  405352:	6923      	ldr	r3, [r4, #16]
  405354:	b94b      	cbnz	r3, 40536a <__swsetup_r+0x9a>
  405356:	89a3      	ldrh	r3, [r4, #12]
  405358:	f403 7320 	and.w	r3, r3, #640	; 0x280
  40535c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405360:	d003      	beq.n	40536a <__swsetup_r+0x9a>
  405362:	4621      	mov	r1, r4
  405364:	4630      	mov	r0, r6
  405366:	f7ff f997 	bl	404698 <__smakebuf_r>
  40536a:	89a2      	ldrh	r2, [r4, #12]
  40536c:	f012 0301 	ands.w	r3, r2, #1
  405370:	d00c      	beq.n	40538c <__swsetup_r+0xbc>
  405372:	2300      	movs	r3, #0
  405374:	60a3      	str	r3, [r4, #8]
  405376:	6963      	ldr	r3, [r4, #20]
  405378:	425b      	negs	r3, r3
  40537a:	61a3      	str	r3, [r4, #24]
  40537c:	6923      	ldr	r3, [r4, #16]
  40537e:	b953      	cbnz	r3, 405396 <__swsetup_r+0xc6>
  405380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405384:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  405388:	d1ba      	bne.n	405300 <__swsetup_r+0x30>
  40538a:	bd70      	pop	{r4, r5, r6, pc}
  40538c:	0792      	lsls	r2, r2, #30
  40538e:	bf58      	it	pl
  405390:	6963      	ldrpl	r3, [r4, #20]
  405392:	60a3      	str	r3, [r4, #8]
  405394:	e7f2      	b.n	40537c <__swsetup_r+0xac>
  405396:	2000      	movs	r0, #0
  405398:	e7f7      	b.n	40538a <__swsetup_r+0xba>
  40539a:	bf00      	nop
  40539c:	20400048 	.word	0x20400048
  4053a0:	004059a0 	.word	0x004059a0
  4053a4:	004059c0 	.word	0x004059c0
  4053a8:	00405980 	.word	0x00405980

004053ac <_close_r>:
  4053ac:	b538      	push	{r3, r4, r5, lr}
  4053ae:	4c06      	ldr	r4, [pc, #24]	; (4053c8 <_close_r+0x1c>)
  4053b0:	2300      	movs	r3, #0
  4053b2:	4605      	mov	r5, r0
  4053b4:	4608      	mov	r0, r1
  4053b6:	6023      	str	r3, [r4, #0]
  4053b8:	f7fb ff56 	bl	401268 <_close>
  4053bc:	1c43      	adds	r3, r0, #1
  4053be:	d102      	bne.n	4053c6 <_close_r+0x1a>
  4053c0:	6823      	ldr	r3, [r4, #0]
  4053c2:	b103      	cbz	r3, 4053c6 <_close_r+0x1a>
  4053c4:	602b      	str	r3, [r5, #0]
  4053c6:	bd38      	pop	{r3, r4, r5, pc}
  4053c8:	204006bc 	.word	0x204006bc

004053cc <_fstat_r>:
  4053cc:	b538      	push	{r3, r4, r5, lr}
  4053ce:	4c07      	ldr	r4, [pc, #28]	; (4053ec <_fstat_r+0x20>)
  4053d0:	2300      	movs	r3, #0
  4053d2:	4605      	mov	r5, r0
  4053d4:	4608      	mov	r0, r1
  4053d6:	4611      	mov	r1, r2
  4053d8:	6023      	str	r3, [r4, #0]
  4053da:	f7fb ff48 	bl	40126e <_fstat>
  4053de:	1c43      	adds	r3, r0, #1
  4053e0:	d102      	bne.n	4053e8 <_fstat_r+0x1c>
  4053e2:	6823      	ldr	r3, [r4, #0]
  4053e4:	b103      	cbz	r3, 4053e8 <_fstat_r+0x1c>
  4053e6:	602b      	str	r3, [r5, #0]
  4053e8:	bd38      	pop	{r3, r4, r5, pc}
  4053ea:	bf00      	nop
  4053ec:	204006bc 	.word	0x204006bc

004053f0 <_isatty_r>:
  4053f0:	b538      	push	{r3, r4, r5, lr}
  4053f2:	4c06      	ldr	r4, [pc, #24]	; (40540c <_isatty_r+0x1c>)
  4053f4:	2300      	movs	r3, #0
  4053f6:	4605      	mov	r5, r0
  4053f8:	4608      	mov	r0, r1
  4053fa:	6023      	str	r3, [r4, #0]
  4053fc:	f7fb ff3c 	bl	401278 <_isatty>
  405400:	1c43      	adds	r3, r0, #1
  405402:	d102      	bne.n	40540a <_isatty_r+0x1a>
  405404:	6823      	ldr	r3, [r4, #0]
  405406:	b103      	cbz	r3, 40540a <_isatty_r+0x1a>
  405408:	602b      	str	r3, [r5, #0]
  40540a:	bd38      	pop	{r3, r4, r5, pc}
  40540c:	204006bc 	.word	0x204006bc

00405410 <_lseek_r>:
  405410:	b538      	push	{r3, r4, r5, lr}
  405412:	4c07      	ldr	r4, [pc, #28]	; (405430 <_lseek_r+0x20>)
  405414:	4605      	mov	r5, r0
  405416:	4608      	mov	r0, r1
  405418:	4611      	mov	r1, r2
  40541a:	2200      	movs	r2, #0
  40541c:	6022      	str	r2, [r4, #0]
  40541e:	461a      	mov	r2, r3
  405420:	f7fb ff2c 	bl	40127c <_lseek>
  405424:	1c43      	adds	r3, r0, #1
  405426:	d102      	bne.n	40542e <_lseek_r+0x1e>
  405428:	6823      	ldr	r3, [r4, #0]
  40542a:	b103      	cbz	r3, 40542e <_lseek_r+0x1e>
  40542c:	602b      	str	r3, [r5, #0]
  40542e:	bd38      	pop	{r3, r4, r5, pc}
  405430:	204006bc 	.word	0x204006bc

00405434 <__ascii_mbtowc>:
  405434:	b082      	sub	sp, #8
  405436:	b901      	cbnz	r1, 40543a <__ascii_mbtowc+0x6>
  405438:	a901      	add	r1, sp, #4
  40543a:	b142      	cbz	r2, 40544e <__ascii_mbtowc+0x1a>
  40543c:	b14b      	cbz	r3, 405452 <__ascii_mbtowc+0x1e>
  40543e:	7813      	ldrb	r3, [r2, #0]
  405440:	600b      	str	r3, [r1, #0]
  405442:	7812      	ldrb	r2, [r2, #0]
  405444:	1c10      	adds	r0, r2, #0
  405446:	bf18      	it	ne
  405448:	2001      	movne	r0, #1
  40544a:	b002      	add	sp, #8
  40544c:	4770      	bx	lr
  40544e:	4610      	mov	r0, r2
  405450:	e7fb      	b.n	40544a <__ascii_mbtowc+0x16>
  405452:	f06f 0001 	mvn.w	r0, #1
  405456:	e7f8      	b.n	40544a <__ascii_mbtowc+0x16>

00405458 <__malloc_lock>:
  405458:	4770      	bx	lr

0040545a <__malloc_unlock>:
  40545a:	4770      	bx	lr

0040545c <_read_r>:
  40545c:	b538      	push	{r3, r4, r5, lr}
  40545e:	4c07      	ldr	r4, [pc, #28]	; (40547c <_read_r+0x20>)
  405460:	4605      	mov	r5, r0
  405462:	4608      	mov	r0, r1
  405464:	4611      	mov	r1, r2
  405466:	2200      	movs	r2, #0
  405468:	6022      	str	r2, [r4, #0]
  40546a:	461a      	mov	r2, r3
  40546c:	f7fc feb0 	bl	4021d0 <_read>
  405470:	1c43      	adds	r3, r0, #1
  405472:	d102      	bne.n	40547a <_read_r+0x1e>
  405474:	6823      	ldr	r3, [r4, #0]
  405476:	b103      	cbz	r3, 40547a <_read_r+0x1e>
  405478:	602b      	str	r3, [r5, #0]
  40547a:	bd38      	pop	{r3, r4, r5, pc}
  40547c:	204006bc 	.word	0x204006bc

00405480 <__ascii_wctomb>:
  405480:	b149      	cbz	r1, 405496 <__ascii_wctomb+0x16>
  405482:	2aff      	cmp	r2, #255	; 0xff
  405484:	bf85      	ittet	hi
  405486:	238a      	movhi	r3, #138	; 0x8a
  405488:	6003      	strhi	r3, [r0, #0]
  40548a:	700a      	strbls	r2, [r1, #0]
  40548c:	f04f 30ff 	movhi.w	r0, #4294967295
  405490:	bf98      	it	ls
  405492:	2001      	movls	r0, #1
  405494:	4770      	bx	lr
  405496:	4608      	mov	r0, r1
  405498:	4770      	bx	lr
	...

0040549c <__aeabi_dcmpun>:
  40549c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4054a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4054a4:	d102      	bne.n	4054ac <__aeabi_dcmpun+0x10>
  4054a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4054aa:	d10a      	bne.n	4054c2 <__aeabi_dcmpun+0x26>
  4054ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4054b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4054b4:	d102      	bne.n	4054bc <__aeabi_dcmpun+0x20>
  4054b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4054ba:	d102      	bne.n	4054c2 <__aeabi_dcmpun+0x26>
  4054bc:	f04f 0000 	mov.w	r0, #0
  4054c0:	4770      	bx	lr
  4054c2:	f04f 0001 	mov.w	r0, #1
  4054c6:	4770      	bx	lr
  4054c8:	65746e69 	.word	0x65746e69
  4054cc:	70757272 	.word	0x70757272
  4054d0:	202d2074 	.word	0x202d2074
  4054d4:	20434441 	.word	0x20434441
  4054d8:	202d2031 	.word	0x202d2031
  4054dc:	25206925 	.word	0x25206925
  4054e0:	69252069 	.word	0x69252069
  4054e4:	20692520 	.word	0x20692520
  4054e8:	00000a20 	.word	0x00000a20
  4054ec:	61746144 	.word	0x61746144
  4054f0:	6c6f6320 	.word	0x6c6f6320
  4054f4:	7463656c 	.word	0x7463656c
  4054f8:	202c6465 	.word	0x202c6465
  4054fc:	6e75616c 	.word	0x6e75616c
  405500:	6e696863 	.word	0x6e696863
  405504:	6f632067 	.word	0x6f632067
  405508:	6f72746e 	.word	0x6f72746e
  40550c:	6f6c206c 	.word	0x6f6c206c
  405510:	6620706f 	.word	0x6620706f
  405514:	206d6f72 	.word	0x206d6f72
  405518:	20636461 	.word	0x20636461
  40551c:	000a2031 	.word	0x000a2031
  405520:	65746e69 	.word	0x65746e69
  405524:	70757272 	.word	0x70757272
  405528:	202d2074 	.word	0x202d2074
  40552c:	20434441 	.word	0x20434441
  405530:	202d2030 	.word	0x202d2030
  405534:	25206925 	.word	0x25206925
  405538:	69252069 	.word	0x69252069
  40553c:	20692520 	.word	0x20692520
  405540:	25206925 	.word	0x25206925
  405544:	0a202069 	.word	0x0a202069
  405548:	00000000 	.word	0x00000000
  40554c:	61746144 	.word	0x61746144
  405550:	6c6f6320 	.word	0x6c6f6320
  405554:	7463656c 	.word	0x7463656c
  405558:	202c6465 	.word	0x202c6465
  40555c:	6e75616c 	.word	0x6e75616c
  405560:	6e696863 	.word	0x6e696863
  405564:	6f632067 	.word	0x6f632067
  405568:	6f72746e 	.word	0x6f72746e
  40556c:	6f6c206c 	.word	0x6f6c206c
  405570:	6620706f 	.word	0x6620706f
  405574:	206d6f72 	.word	0x206d6f72
  405578:	20636461 	.word	0x20636461
  40557c:	00000a30 	.word	0x00000a30
  405580:	682f2e2e 	.word	0x682f2e2e
  405584:	732f6c61 	.word	0x732f6c61
  405588:	682f6372 	.word	0x682f6372
  40558c:	615f6c61 	.word	0x615f6c61
  405590:	615f6364 	.word	0x615f6364
  405594:	636e7973 	.word	0x636e7973
  405598:	0000632e 	.word	0x0000632e
  40559c:	682f2e2e 	.word	0x682f2e2e
  4055a0:	732f6c61 	.word	0x732f6c61
  4055a4:	682f6372 	.word	0x682f6372
  4055a8:	695f6c61 	.word	0x695f6c61
  4055ac:	00632e6f 	.word	0x00632e6f
  4055b0:	682f2e2e 	.word	0x682f2e2e
  4055b4:	732f6c61 	.word	0x732f6c61
  4055b8:	682f6372 	.word	0x682f6372
  4055bc:	705f6c61 	.word	0x705f6c61
  4055c0:	632e6d77 	.word	0x632e6d77
  4055c4:	00000000 	.word	0x00000000
  4055c8:	682f2e2e 	.word	0x682f2e2e
  4055cc:	732f6c61 	.word	0x732f6c61
  4055d0:	682f6372 	.word	0x682f6372
  4055d4:	745f6c61 	.word	0x745f6c61
  4055d8:	72656d69 	.word	0x72656d69
  4055dc:	0000632e 	.word	0x0000632e
  4055e0:	682f2e2e 	.word	0x682f2e2e
  4055e4:	732f6c61 	.word	0x732f6c61
  4055e8:	682f6372 	.word	0x682f6372
  4055ec:	755f6c61 	.word	0x755f6c61
  4055f0:	74726173 	.word	0x74726173
  4055f4:	6e79735f 	.word	0x6e79735f
  4055f8:	00632e63 	.word	0x00632e63
  4055fc:	682f2e2e 	.word	0x682f2e2e
  405600:	752f6c61 	.word	0x752f6c61
  405604:	736c6974 	.word	0x736c6974
  405608:	6372732f 	.word	0x6372732f
  40560c:	6974752f 	.word	0x6974752f
  405610:	6c5f736c 	.word	0x6c5f736c
  405614:	2e747369 	.word	0x2e747369
  405618:	00000063 	.word	0x00000063
  40561c:	682f2e2e 	.word	0x682f2e2e
  405620:	752f6c61 	.word	0x752f6c61
  405624:	736c6974 	.word	0x736c6974
  405628:	6372732f 	.word	0x6372732f
  40562c:	6974752f 	.word	0x6974752f
  405630:	725f736c 	.word	0x725f736c
  405634:	62676e69 	.word	0x62676e69
  405638:	65666675 	.word	0x65666675
  40563c:	00632e72 	.word	0x00632e72

00405640 <_afecs>:
  405640:	00000000 2f843100 23000000 ffffffff     .....1./...#....
  405650:	0000ffff 00000000 00000000 00000000     ................
  405660:	0000010c 00000000 00000000 00000000     ................
  405670:	00000000 00000200 00000200 00000200     ................
  405680:	00000200 00000200 00000200 00000200     ................
  405690:	00000200 00000200 00000200 00000200     ................
  4056a0:	00000200 00000001 2f843100 23000000     .........1./...#
  4056b0:	ffffffff 0000ffff 00000000 00000000     ................
  4056c0:	00000000 0000010c 00000000 00000000     ................
	...
  4056d8:	00000200 00000200 00000200 00000200     ................
  4056e8:	00000200 00000200 00000200 00000200     ................
  4056f8:	00000200 00000200 00000200 00000200     ................
  405708:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  405718:	63656661 0000632e                       afec.c..

00405720 <_ext_irq>:
  405720:	00000000 00000024 00000000 00000000     ....$...........
	...
  40573c:	00000003 00080000 00000000 00000000     ................
	...

00405758 <_pio_irq_n>:
  405758:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  405768:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  405778:	00000000                                ....

0040577c <_pwms>:
  40577c:	40020000 0000001f 00010019 00000001     ...@............
  40578c:	00000001 000000ff 00000000 00000004     ................
	...
  4057a8:	00000002 00405804 00000000 20400380     .....X@.......@ 
  4057b8:	4005c000 0000003c 00010019 00000001     ...@<...........
  4057c8:	00000001 000000ff 00000000 00000004     ................
	...
  4057e4:	00000001 004057f4 00000000 20400374     .....W@.....t.@ 

004057f4 <_ch_cfg1>:
  4057f4:	00000000 0000010b 000003e8 00000200     ................

00405804 <_ch_cfg0>:
  405804:	00000000 0000010b 000003e8 00000200     ................
  405814:	00000002 0000010b 000003e8 00000200     ................
  405824:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  405834:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  405844:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00405850 <_usarts>:
  405850:	00000001 001008c0 000100f4 682f2e2e     ............../h
  405860:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  405870:	632e7472 00000000                       rt.c....

00405878 <_cfgs>:
  405878:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  405888:	00000040 00000000 00000040 00000000     @.......@.......
  405898:	00000040 00000000 00000040 00000000     @.......@.......
  4058a8:	00000040 00000000 00000040 00000000     @.......@.......
  4058b8:	00000040 00000000 00000040 00000000     @.......@.......
  4058c8:	00000040 00000000 00000040 00000000     @.......@.......
  4058d8:	00000040 00000000 00000040 00000000     @.......@.......
  4058e8:	00000040 00000000 00000040 00000000     @.......@.......
  4058f8:	00000040 00000000 00000040 00000000     @.......@.......
  405908:	00000040 00000000 00000040 00000000     @.......@.......
  405918:	00000040 00000000 00000040 00000000     @.......@.......
  405928:	00000040 00000000 00000040 00000000     @.......@.......

00405938 <_global_impure_ptr>:
  405938:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  405948:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  405958:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  405968:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  405978:	4e614e00 00000000                       .NaN....

00405980 <__sf_fake_stderr>:
	...

004059a0 <__sf_fake_stdin>:
	...

004059c0 <__sf_fake_stdout>:
	...

004059e0 <__mprec_bigtens>:
  4059e0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4059f0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  405a00:	7f73bf3c 75154fdd                       <.s..O.u

00405a08 <__mprec_tens>:
  405a08:	00000000 3ff00000 00000000 40240000     .......?......$@
  405a18:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  405a28:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  405a38:	00000000 412e8480 00000000 416312d0     .......A......cA
  405a48:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  405a58:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  405a68:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  405a78:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  405a88:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  405a98:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  405aa8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  405ab8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  405ac8:	79d99db4 44ea7843                       ...yCx.D

00405ad0 <p05.6047>:
  405ad0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  405ae0:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  405af0:	5849534f 00002e00                                OSIX...

00405af7 <_ctype_>:
  405af7:	20202000 20202020 28282020 20282828     .         ((((( 
  405b07:	20202020 20202020 20202020 20202020                     
  405b17:	10108820 10101010 10101010 10101010      ...............
  405b27:	04040410 04040404 10040404 10101010     ................
  405b37:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405b47:	01010101 01010101 01010101 10101010     ................
  405b57:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405b67:	02020202 02020202 02020202 10101010     ................
  405b77:	00000020 00000000 00000000 00000000      ...............
	...

00405bf8 <_init>:
  405bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405bfa:	bf00      	nop
  405bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405bfe:	bc08      	pop	{r3}
  405c00:	469e      	mov	lr, r3
  405c02:	4770      	bx	lr

00405c04 <__init_array_start>:
  405c04:	0040018d 	.word	0x0040018d

00405c08 <_fini>:
  405c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405c0a:	bf00      	nop
  405c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405c0e:	bc08      	pop	{r3}
  405c10:	469e      	mov	lr, r3
  405c12:	4770      	bx	lr

00405c14 <__fini_array_start>:
  405c14:	00400169 	.word	0x00400169
