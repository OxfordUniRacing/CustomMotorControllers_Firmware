
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006618  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  00406618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000520  20400218  00406830  00020218  2**2
                  ALLOC
  3 .heap         00000200  20400738  00406d50  00020218  2**0
                  ALLOC
  4 .stack        00000400  20400938  00406f50  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002c927  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000058b2  00000000  00000000  0004cbc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cbdc  00000000  00000000  00052478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e70  00000000  00000000  0005f054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d60  00000000  00000000  0005fec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00048c91  00000000  00000000  00060c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00020eae  00000000  00000000  000a98b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00158e35  00000000  00000000  000ca763  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003144  00000000  00000000  00223598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	38 0d 40 20 bd 0a 40 00 b9 0a 40 00 b9 0a 40 00     8.@ ..@...@...@.
  400010:	b9 0a 40 00 b9 0a 40 00 b9 0a 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b9 0a 40 00 b9 0a 40 00 00 00 00 00 b9 0a 40 00     ..@...@.......@.
  40003c:	b9 0a 40 00 b9 0a 40 00 b9 0a 40 00 b9 0a 40 00     ..@...@...@...@.
  40004c:	b9 0a 40 00 b9 0a 40 00 b9 0a 40 00 b9 0a 40 00     ..@...@...@...@.
  40005c:	b9 0a 40 00 b9 0a 40 00 00 00 00 00 4d 1f 40 00     ..@...@.....M.@.
  40006c:	59 1f 40 00 b9 0a 40 00 b9 0a 40 00 b9 0a 40 00     Y.@...@...@...@.
  40007c:	b9 0a 40 00 41 1f 40 00 b9 0a 40 00 b9 0a 40 00     ..@.A.@...@...@.
  40008c:	b9 0a 40 00 b9 0a 40 00 b9 0a 40 00 b9 0a 40 00     ..@...@...@...@.
  40009c:	7d 25 40 00 b9 0a 40 00 b9 0a 40 00 b9 0a 40 00     }%@...@...@...@.
  4000ac:	b9 0a 40 00 b9 0a 40 00 09 1b 40 00 b9 0a 40 00     ..@...@...@...@.
  4000bc:	0d 21 40 00 b9 0a 40 00 b9 0a 40 00 b9 0a 40 00     .!@...@...@...@.
  4000cc:	b9 0a 40 00 b9 0a 40 00 f1 1c 40 00 b9 0a 40 00     ..@...@...@...@.
  4000dc:	b9 0a 40 00 1d 1b 40 00 b9 0a 40 00 b9 0a 40 00     ..@...@...@...@.
  4000ec:	b9 0a 40 00 b9 0a 40 00 b9 0a 40 00 b9 0a 40 00     ..@...@...@...@.
  4000fc:	b9 0a 40 00 b9 0a 40 00 b9 0a 40 00 91 25 40 00     ..@...@...@..%@.
  40010c:	b9 0a 40 00 b9 0a 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b9 0a 40 00 b9 0a 40 00 ed 28 40 00     ......@...@..(@.
  40012c:	b9 0a 40 00 21 21 40 00 b9 0a 40 00 b9 0a 40 00     ..@.!!@...@...@.
  40013c:	b9 0a 40 00 b9 0a 40 00 b9 0a 40 00 b9 0a 40 00     ..@...@...@...@.
  40014c:	b9 0a 40 00 b9 0a 40 00 b9 0a 40 00 b9 0a 40 00     ..@...@...@...@.
  40015c:	b9 0a 40 00 b9 0a 40 00 b9 0a 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	00406618 	.word	0x00406618

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406618 	.word	0x00406618
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	00406618 	.word	0x00406618
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400f95 	.word	0x00400f95
  4001e4:	00402ac1 	.word	0x00402ac1

004001e8 <encoder_get_counter>:
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV(mask)) >> TC_CV_CV_Pos;
}

static inline hri_tc_cv_reg_t hri_tc_read_CV_CV_bf(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV_Msk) >> TC_CV_CV_Pos;
  4001e8:	4a06      	ldr	r2, [pc, #24]	; (400204 <encoder_get_counter+0x1c>)
  4001ea:	6913      	ldr	r3, [r2, #16]
  4001ec:	6d10      	ldr	r0, [r2, #80]	; 0x50
	//if starting offset is 0 (which is the case before it was recorded) then it returns the actual counter
	
	
	//get A (first line) and B (second line) counters
	//note that rising and falling edges could be the other way round. It doesn't matter for the current implementation
	int encoder_counter_no_offset =	  ( int) hri_tc_read_CV_CV_bf(TC0,0) + ( int) hri_tc_read_CV_CV_bf(TC0,1) \
  4001ee:	4403      	add	r3, r0
  4001f0:	f502 2290 	add.w	r2, r2, #294912	; 0x48000
  4001f4:	6910      	ldr	r0, [r2, #16]
									+ ( int) hri_tc_read_CV_CV_bf(TC3,0) + ( int) hri_tc_read_CV_CV_bf(TC3,1) \
  4001f6:	4403      	add	r3, r0
  4001f8:	6d10      	ldr	r0, [r2, #80]	; 0x50
  4001fa:	4403      	add	r3, r0
									- encoder_inital_offset;														//get the number of steps normalised to the starting offset
  4001fc:	4a02      	ldr	r2, [pc, #8]	; (400208 <encoder_get_counter+0x20>)
  4001fe:	6810      	ldr	r0, [r2, #0]
								
	return encoder_counter_no_offset;
}
  400200:	1a18      	subs	r0, r3, r0
  400202:	4770      	bx	lr
  400204:	4000c000 	.word	0x4000c000
  400208:	20400500 	.word	0x20400500

0040020c <Encoder_Z_Interrupt>:
static void Encoder_Z_Interrupt (void){
  40020c:	b508      	push	{r3, lr}
	int encoder_counter_no_offset = encoder_get_counter();
  40020e:	4b05      	ldr	r3, [pc, #20]	; (400224 <Encoder_Z_Interrupt+0x18>)
  400210:	4798      	blx	r3
	if(encoder_num_Z_interrupts == 0){
  400212:	4b05      	ldr	r3, [pc, #20]	; (400228 <Encoder_Z_Interrupt+0x1c>)
  400214:	681b      	ldr	r3, [r3, #0]
  400216:	b90b      	cbnz	r3, 40021c <Encoder_Z_Interrupt+0x10>
		encoder_inital_offset = encoder_counter_no_offset;
  400218:	4a04      	ldr	r2, [pc, #16]	; (40022c <Encoder_Z_Interrupt+0x20>)
  40021a:	6010      	str	r0, [r2, #0]
	encoder_num_Z_interrupts ++;
  40021c:	3301      	adds	r3, #1
  40021e:	4a02      	ldr	r2, [pc, #8]	; (400228 <Encoder_Z_Interrupt+0x1c>)
  400220:	6013      	str	r3, [r2, #0]
  400222:	bd08      	pop	{r3, pc}
  400224:	004001e9 	.word	0x004001e9
  400228:	204004fc 	.word	0x204004fc
  40022c:	20400500 	.word	0x20400500

00400230 <encoder_init>:
void encoder_init(void){
  400230:	b508      	push	{r3, lr}
	ext_irq_register(PIO_PB13_IDX,Encoder_Z_Interrupt);
  400232:	4942      	ldr	r1, [pc, #264]	; (40033c <encoder_init+0x10c>)
  400234:	202d      	movs	r0, #45	; 0x2d
  400236:	4b42      	ldr	r3, [pc, #264]	; (400340 <encoder_init+0x110>)
  400238:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40023a:	4b42      	ldr	r3, [pc, #264]	; (400344 <encoder_init+0x114>)
  40023c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400240:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400242:	2240      	movs	r2, #64	; 0x40
  400244:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400248:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40024c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400250:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400254:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400258:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40025c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400264:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400268:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40026c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400278:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40027c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400280:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400284:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  40028c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400290:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400294:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400298:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40029c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4002a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002a4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4002b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4002b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002b8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002cc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4002d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002e0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002e4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4002ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002f4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002f8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400304:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400308:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40030c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400310:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400318:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40031c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400320:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400324:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40032c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400330:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400334:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400338:	bd08      	pop	{r3, pc}
  40033a:	bf00      	nop
  40033c:	0040020d 	.word	0x0040020d
  400340:	0040138d 	.word	0x0040138d
  400344:	e000e100 	.word	0xe000e100

00400348 <Position_1_Interrupt>:
	
	
	
}

static void Position_1_Interrupt (void){
  400348:	b538      	push	{r3, r4, r5, lr}
	has_triggered = true;
  40034a:	2201      	movs	r2, #1
  40034c:	4b14      	ldr	r3, [pc, #80]	; (4003a0 <Position_1_Interrupt+0x58>)
  40034e:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400350:	4b14      	ldr	r3, [pc, #80]	; (4003a4 <Position_1_Interrupt+0x5c>)
  400352:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400354:	4b14      	ldr	r3, [pc, #80]	; (4003a8 <Position_1_Interrupt+0x60>)
  400356:	681b      	ldr	r3, [r3, #0]
  400358:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40035a:	2b00      	cmp	r3, #0
  40035c:	dd13      	ble.n	400386 <Position_1_Interrupt+0x3e>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40035e:	2201      	movs	r2, #1
  400360:	2a00      	cmp	r2, #0
  400362:	dc13      	bgt.n	40038c <Position_1_Interrupt+0x44>
	pos_sens_deltas [0] = (float) delta / 300;
  400364:	ee07 3a90 	vmov	s15, r3
  400368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40036c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 4003ac <Position_1_Interrupt+0x64>
  400370:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400374:	4b0e      	ldr	r3, [pc, #56]	; (4003b0 <Position_1_Interrupt+0x68>)
  400376:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  40037a:	4b0b      	ldr	r3, [pc, #44]	; (4003a8 <Position_1_Interrupt+0x60>)
  40037c:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	printf("POS 1\n");
  40037e:	480d      	ldr	r0, [pc, #52]	; (4003b4 <Position_1_Interrupt+0x6c>)
  400380:	4b0d      	ldr	r3, [pc, #52]	; (4003b8 <Position_1_Interrupt+0x70>)
  400382:	4798      	blx	r3
  400384:	bd38      	pop	{r3, r4, r5, pc}
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400386:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  40038a:	e7e8      	b.n	40035e <Position_1_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  40038c:	1e54      	subs	r4, r2, #1
  40038e:	4908      	ldr	r1, [pc, #32]	; (4003b0 <Position_1_Interrupt+0x68>)
  400390:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400394:	682d      	ldr	r5, [r5, #0]
  400396:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40039a:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40039c:	4622      	mov	r2, r4
  40039e:	e7df      	b.n	400360 <Position_1_Interrupt+0x18>
  4003a0:	204004f5 	.word	0x204004f5
  4003a4:	e000e010 	.word	0xe000e010
  4003a8:	20400510 	.word	0x20400510
  4003ac:	43960000 	.word	0x43960000
  4003b0:	20400508 	.word	0x20400508
  4003b4:	00405cf8 	.word	0x00405cf8
  4003b8:	00403d01 	.word	0x00403d01

004003bc <Position_2_Interrupt>:
}

static void Position_2_Interrupt (void){
  4003bc:	b430      	push	{r4, r5}
	has_triggered = true;
  4003be:	2201      	movs	r2, #1
  4003c0:	4b13      	ldr	r3, [pc, #76]	; (400410 <Position_2_Interrupt+0x54>)
  4003c2:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  4003c4:	4b13      	ldr	r3, [pc, #76]	; (400414 <Position_2_Interrupt+0x58>)
  4003c6:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  4003c8:	4b13      	ldr	r3, [pc, #76]	; (400418 <Position_2_Interrupt+0x5c>)
  4003ca:	681b      	ldr	r3, [r3, #0]
  4003cc:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4003ce:	2b00      	cmp	r3, #0
  4003d0:	dd11      	ble.n	4003f6 <Position_2_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4003d2:	2201      	movs	r2, #1
  4003d4:	2a00      	cmp	r2, #0
  4003d6:	dc11      	bgt.n	4003fc <Position_2_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  4003d8:	ee07 3a90 	vmov	s15, r3
  4003dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4003e0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 40041c <Position_2_Interrupt+0x60>
  4003e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4003e8:	4b0d      	ldr	r3, [pc, #52]	; (400420 <Position_2_Interrupt+0x64>)
  4003ea:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  4003ee:	4b0a      	ldr	r3, [pc, #40]	; (400418 <Position_2_Interrupt+0x5c>)
  4003f0:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	//printf("POS 2\n");
}
  4003f2:	bc30      	pop	{r4, r5}
  4003f4:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4003f6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  4003fa:	e7ea      	b.n	4003d2 <Position_2_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  4003fc:	1e54      	subs	r4, r2, #1
  4003fe:	4908      	ldr	r1, [pc, #32]	; (400420 <Position_2_Interrupt+0x64>)
  400400:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400404:	682d      	ldr	r5, [r5, #0]
  400406:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40040a:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40040c:	4622      	mov	r2, r4
  40040e:	e7e1      	b.n	4003d4 <Position_2_Interrupt+0x18>
  400410:	204004f5 	.word	0x204004f5
  400414:	e000e010 	.word	0xe000e010
  400418:	20400510 	.word	0x20400510
  40041c:	43960000 	.word	0x43960000
  400420:	20400508 	.word	0x20400508

00400424 <Position_3_Interrupt>:

static void Position_3_Interrupt (void){
  400424:	b538      	push	{r3, r4, r5, lr}
	has_triggered = true;
  400426:	2201      	movs	r2, #1
  400428:	4b14      	ldr	r3, [pc, #80]	; (40047c <Position_3_Interrupt+0x58>)
  40042a:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  40042c:	4b14      	ldr	r3, [pc, #80]	; (400480 <Position_3_Interrupt+0x5c>)
  40042e:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400430:	4b14      	ldr	r3, [pc, #80]	; (400484 <Position_3_Interrupt+0x60>)
  400432:	681b      	ldr	r3, [r3, #0]
  400434:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400436:	2b00      	cmp	r3, #0
  400438:	dd13      	ble.n	400462 <Position_3_Interrupt+0x3e>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40043a:	2201      	movs	r2, #1
  40043c:	2a00      	cmp	r2, #0
  40043e:	dc13      	bgt.n	400468 <Position_3_Interrupt+0x44>
	pos_sens_deltas [0] = (float) delta / 300;
  400440:	ee07 3a90 	vmov	s15, r3
  400444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400448:	eddf 6a0f 	vldr	s13, [pc, #60]	; 400488 <Position_3_Interrupt+0x64>
  40044c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400450:	4b0e      	ldr	r3, [pc, #56]	; (40048c <Position_3_Interrupt+0x68>)
  400452:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  400456:	4b0b      	ldr	r3, [pc, #44]	; (400484 <Position_3_Interrupt+0x60>)
  400458:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	printf("POS 3\n");
  40045a:	480d      	ldr	r0, [pc, #52]	; (400490 <Position_3_Interrupt+0x6c>)
  40045c:	4b0d      	ldr	r3, [pc, #52]	; (400494 <Position_3_Interrupt+0x70>)
  40045e:	4798      	blx	r3
  400460:	bd38      	pop	{r3, r4, r5, pc}
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400462:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  400466:	e7e8      	b.n	40043a <Position_3_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400468:	1e54      	subs	r4, r2, #1
  40046a:	4908      	ldr	r1, [pc, #32]	; (40048c <Position_3_Interrupt+0x68>)
  40046c:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400470:	682d      	ldr	r5, [r5, #0]
  400472:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400476:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400478:	4622      	mov	r2, r4
  40047a:	e7df      	b.n	40043c <Position_3_Interrupt+0x18>
  40047c:	204004f5 	.word	0x204004f5
  400480:	e000e010 	.word	0xe000e010
  400484:	20400510 	.word	0x20400510
  400488:	43960000 	.word	0x43960000
  40048c:	20400508 	.word	0x20400508
  400490:	00405d00 	.word	0x00405d00
  400494:	00403d01 	.word	0x00403d01

00400498 <pos_sens_init>:
}

void pos_sens_init (void){
  400498:	b510      	push	{r4, lr}
	//set interrupt handlers
	ext_irq_register(PIO_PD19_IDX, Position_3_Interrupt);		//POS 3
  40049a:	4919      	ldr	r1, [pc, #100]	; (400500 <pos_sens_init+0x68>)
  40049c:	2073      	movs	r0, #115	; 0x73
  40049e:	4c19      	ldr	r4, [pc, #100]	; (400504 <pos_sens_init+0x6c>)
  4004a0:	47a0      	blx	r4
	ext_irq_register(PIO_PA2_IDX, Position_2_Interrupt);		//POS 2
  4004a2:	4919      	ldr	r1, [pc, #100]	; (400508 <pos_sens_init+0x70>)
  4004a4:	2002      	movs	r0, #2
  4004a6:	47a0      	blx	r4
	ext_irq_register(PIO_PA5_IDX, Position_1_Interrupt);		//POS 1
  4004a8:	4918      	ldr	r1, [pc, #96]	; (40050c <pos_sens_init+0x74>)
  4004aa:	2005      	movs	r0, #5
  4004ac:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4004ae:	4b18      	ldr	r3, [pc, #96]	; (400510 <pos_sens_init+0x78>)
  4004b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4004b4:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4004b6:	2220      	movs	r2, #32
  4004b8:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4004bc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4004c0:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4004c2:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ	(PIOD_IRQn);
	NVIC_SetPriority(PIOD_IRQn, IRQ_PRIORITY_POSITION_SENS);

	
	//SysTick starting from 0
	pos_sens_last_SysTick_count = 0;
  4004c6:	2200      	movs	r2, #0
  4004c8:	4b12      	ldr	r3, [pc, #72]	; (400514 <pos_sens_init+0x7c>)
  4004ca:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
  4004cc:	4b12      	ldr	r3, [pc, #72]	; (400518 <pos_sens_init+0x80>)
  4004ce:	609a      	str	r2, [r3, #8]
	//make the load value max, so that the overflows are as rare as possible
	SysTick->LOAD = (0xFFFFFF);
  4004d0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  4004d4:	6059      	str	r1, [r3, #4]

	this means that the moment we transition to state (POS1=1, POS2=0 POS3=0) we are at 0 electrical degrees
	*/

	// sector_lookup_table[POS3][POS2][POS1];
	sector_lookup_table[0][0][1] = 1;
  4004d6:	4b11      	ldr	r3, [pc, #68]	; (40051c <pos_sens_init+0x84>)
  4004d8:	2101      	movs	r1, #1
  4004da:	6059      	str	r1, [r3, #4]
	sector_lookup_table[0][1][1] = 2;
  4004dc:	2102      	movs	r1, #2
  4004de:	60d9      	str	r1, [r3, #12]
	sector_lookup_table[0][1][0] = 3;
  4004e0:	2103      	movs	r1, #3
  4004e2:	6099      	str	r1, [r3, #8]
	sector_lookup_table[1][1][0] = 4;
  4004e4:	2104      	movs	r1, #4
  4004e6:	6199      	str	r1, [r3, #24]
	sector_lookup_table[1][0][0] = 5;
  4004e8:	2105      	movs	r1, #5
  4004ea:	6119      	str	r1, [r3, #16]
	sector_lookup_table[1][0][1] = 6;
  4004ec:	2106      	movs	r1, #6
  4004ee:	6159      	str	r1, [r3, #20]
	//Error states
	sector_lookup_table[0][0][0] = -1;
  4004f0:	f04f 31ff 	mov.w	r1, #4294967295
  4004f4:	6019      	str	r1, [r3, #0]
	sector_lookup_table[1][1][1] = -1;
  4004f6:	61d9      	str	r1, [r3, #28]
	
	has_triggered = false;
  4004f8:	4b09      	ldr	r3, [pc, #36]	; (400520 <pos_sens_init+0x88>)
  4004fa:	701a      	strb	r2, [r3, #0]
  4004fc:	bd10      	pop	{r4, pc}
  4004fe:	bf00      	nop
  400500:	00400425 	.word	0x00400425
  400504:	0040138d 	.word	0x0040138d
  400508:	004003bd 	.word	0x004003bd
  40050c:	00400349 	.word	0x00400349
  400510:	e000e100 	.word	0xe000e100
  400514:	20400510 	.word	0x20400510
  400518:	e000e010 	.word	0xe000e010
  40051c:	204004cc 	.word	0x204004cc
  400520:	204004f5 	.word	0x204004f5

00400524 <get_Data_Pos>:
}

//returns time spent in previous sectors
// which sector we are at currently (see above for position convention)
// how much time has elapsed since we entered this sector
void get_Data_Pos (float * previous_deltas, int * current_sector, float * time_in_current_sector){
  400524:	b570      	push	{r4, r5, r6, lr}
	//null checking variable to see if a write has occurred
	has_triggered = false;
  400526:	2400      	movs	r4, #0
  400528:	4b1d      	ldr	r3, [pc, #116]	; (4005a0 <get_Data_Pos+0x7c>)
  40052a:	701c      	strb	r4, [r3, #0]
	
	
	//get systick value immediately for most accurate result
	int current_systick = SysTick->VAL;
  40052c:	4b1d      	ldr	r3, [pc, #116]	; (4005a4 <get_Data_Pos+0x80>)
  40052e:	689c      	ldr	r4, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400530:	4b1d      	ldr	r3, [pc, #116]	; (4005a8 <get_Data_Pos+0x84>)
  400532:	681b      	ldr	r3, [r3, #0]
  400534:	1b1b      	subs	r3, r3, r4
	
	//if there was an overflow, account for it
	//NB this can only handle one overflow at max <=> if systick frequency < interrupt frequency timing will be very inaccurate
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400536:	2b00      	cmp	r3, #0
  400538:	dd0b      	ble.n	400552 <get_Data_Pos+0x2e>
	
	//systick clock frequency equals MCU clock at 300MHz
	(*time_in_current_sector) = (float) delta / 300;
  40053a:	ee07 3a90 	vmov	s15, r3
  40053e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400542:	eddf 6a1a 	vldr	s13, [pc, #104]	; 4005ac <get_Data_Pos+0x88>
  400546:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  40054a:	ed82 7a00 	vstr	s14, [r2]
	
	
	//copy data over
	for (int i = 0 ; i < POS_SENS_DELTAS_SIZE; i++){
  40054e:	2300      	movs	r3, #0
  400550:	e009      	b.n	400566 <get_Data_Pos+0x42>
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400552:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  400556:	e7f0      	b.n	40053a <get_Data_Pos+0x16>
		previous_deltas[i] = pos_sens_deltas[i];
  400558:	009d      	lsls	r5, r3, #2
  40055a:	1946      	adds	r6, r0, r5
  40055c:	4c14      	ldr	r4, [pc, #80]	; (4005b0 <get_Data_Pos+0x8c>)
  40055e:	442c      	add	r4, r5
  400560:	6824      	ldr	r4, [r4, #0]
  400562:	6034      	str	r4, [r6, #0]
	for (int i = 0 ; i < POS_SENS_DELTAS_SIZE; i++){
  400564:	3301      	adds	r3, #1
  400566:	2b01      	cmp	r3, #1
  400568:	ddf6      	ble.n	400558 <get_Data_Pos+0x34>
	return tmp;
}

static inline hri_pio_pdsr_reg_t hri_pio_read_PDSR_reg(const void *const hw)
{
	return ((Pio *)hw)->PIO_PDSR;
  40056a:	4b12      	ldr	r3, [pc, #72]	; (4005b4 <get_Data_Pos+0x90>)
  40056c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
  40056e:	f3c5 45c0 	ubfx	r5, r5, #19, #1
  400572:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400576:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  400578:	f3c4 0480 	ubfx	r4, r4, #2, #1
  40057c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40057e:	f3c3 1340 	ubfx	r3, r3, #5, #1
	}
	
	//get which sector we are in
	(*current_sector) = sector_lookup_table	[gpio_get_pin_level(PIN_GPIO_POS_3)]\
											[gpio_get_pin_level(PIN_GPIO_POS_2)]\
											[gpio_get_pin_level(PIN_GPIO_POS_1)];
  400582:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  400586:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  40058a:	4c0b      	ldr	r4, [pc, #44]	; (4005b8 <get_Data_Pos+0x94>)
  40058c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	(*current_sector) = sector_lookup_table	[gpio_get_pin_level(PIN_GPIO_POS_3)]\
  400590:	600b      	str	r3, [r1, #0]
											
											
	if(has_triggered){
  400592:	4b03      	ldr	r3, [pc, #12]	; (4005a0 <get_Data_Pos+0x7c>)
  400594:	781b      	ldrb	r3, [r3, #0]
  400596:	b903      	cbnz	r3, 40059a <get_Data_Pos+0x76>
  400598:	bd70      	pop	{r4, r5, r6, pc}
		// this means the value of has_triggered was modified while we were reading the data <=> retake reading
		// since data writes are rare there is no chance of a long wait on the recursive function
		get_Data_Pos (previous_deltas, current_sector, time_in_current_sector);
  40059a:	f7ff ffc3 	bl	400524 <get_Data_Pos>
	}

  40059e:	e7fb      	b.n	400598 <get_Data_Pos+0x74>
  4005a0:	204004f5 	.word	0x204004f5
  4005a4:	e000e010 	.word	0xe000e010
  4005a8:	20400510 	.word	0x20400510
  4005ac:	43960000 	.word	0x43960000
  4005b0:	20400508 	.word	0x20400508
  4005b4:	400e1400 	.word	0x400e1400
  4005b8:	204004cc 	.word	0x204004cc

004005bc <dma_adc_0_enable_for_one_transaction>:
	
	has_0_triggered = false;
	has_1_triggered = false;
}

void dma_adc_0_enable_for_one_transaction(void){
  4005bc:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  4005be:	4906      	ldr	r1, [pc, #24]	; (4005d8 <dma_adc_0_enable_for_one_transaction+0x1c>)
  4005c0:	2000      	movs	r0, #0
  4005c2:	4b06      	ldr	r3, [pc, #24]	; (4005dc <dma_adc_0_enable_for_one_transaction+0x20>)
  4005c4:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  4005c6:	2118      	movs	r1, #24
  4005c8:	2000      	movs	r0, #0
  4005ca:	4b05      	ldr	r3, [pc, #20]	; (4005e0 <dma_adc_0_enable_for_one_transaction+0x24>)
  4005cc:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  4005ce:	2101      	movs	r1, #1
  4005d0:	2000      	movs	r0, #0
  4005d2:	4b04      	ldr	r3, [pc, #16]	; (4005e4 <dma_adc_0_enable_for_one_transaction+0x28>)
  4005d4:	4798      	blx	r3
  4005d6:	bd08      	pop	{r3, pc}
  4005d8:	20400234 	.word	0x20400234
  4005dc:	00402831 	.word	0x00402831
  4005e0:	00402851 	.word	0x00402851
  4005e4:	00402869 	.word	0x00402869

004005e8 <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  4005e8:	b530      	push	{r4, r5, lr}
  4005ea:	b085      	sub	sp, #20
	has_0_triggered = true;
  4005ec:	2201      	movs	r2, #1
  4005ee:	4b27      	ldr	r3, [pc, #156]	; (40068c <dma_adc_0_callback+0xa4>)
  4005f0:	701a      	strb	r2, [r3, #0]
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3], (int)dma_adc_0_buff[4],(int)dma_adc_0_buff[5]);
  4005f2:	4827      	ldr	r0, [pc, #156]	; (400690 <dma_adc_0_callback+0xa8>)
  4005f4:	6801      	ldr	r1, [r0, #0]
  4005f6:	6842      	ldr	r2, [r0, #4]
  4005f8:	6883      	ldr	r3, [r0, #8]
  4005fa:	68c4      	ldr	r4, [r0, #12]
  4005fc:	6905      	ldr	r5, [r0, #16]
  4005fe:	6940      	ldr	r0, [r0, #20]
  400600:	9002      	str	r0, [sp, #8]
  400602:	9501      	str	r5, [sp, #4]
  400604:	9400      	str	r4, [sp, #0]
  400606:	4823      	ldr	r0, [pc, #140]	; (400694 <dma_adc_0_callback+0xac>)
  400608:	4c23      	ldr	r4, [pc, #140]	; (400698 <dma_adc_0_callback+0xb0>)
  40060a:	47a0      	blx	r4
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  40060c:	2300      	movs	r3, #0
  40060e:	e008      	b.n	400622 <dma_adc_0_callback+0x3a>
				raw_currents[1] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400610:	b292      	uxth	r2, r2
  400612:	4922      	ldr	r1, [pc, #136]	; (40069c <dma_adc_0_callback+0xb4>)
  400614:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  400616:	491e      	ldr	r1, [pc, #120]	; (400690 <dma_adc_0_callback+0xa8>)
  400618:	7e0a      	ldrb	r2, [r1, #24]
  40061a:	f042 0202 	orr.w	r2, r2, #2
  40061e:	760a      	strb	r2, [r1, #24]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400620:	3301      	adds	r3, #1
  400622:	2b05      	cmp	r3, #5
  400624:	dc13      	bgt.n	40064e <dma_adc_0_callback+0x66>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400626:	4a1a      	ldr	r2, [pc, #104]	; (400690 <dma_adc_0_callback+0xa8>)
  400628:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40062c:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400630:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  400634:	d0ec      	beq.n	400610 <dma_adc_0_callback+0x28>
  400636:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40063a:	d1f1      	bne.n	400620 <dma_adc_0_callback+0x38>
				raw_currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  40063c:	b292      	uxth	r2, r2
  40063e:	4917      	ldr	r1, [pc, #92]	; (40069c <dma_adc_0_callback+0xb4>)
  400640:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  400642:	4913      	ldr	r1, [pc, #76]	; (400690 <dma_adc_0_callback+0xa8>)
  400644:	7e0a      	ldrb	r2, [r1, #24]
  400646:	f042 0201 	orr.w	r2, r2, #1
  40064a:	760a      	strb	r2, [r1, #24]
				break;
  40064c:	e7e8      	b.n	400620 <dma_adc_0_callback+0x38>
	if(is_dma_adc_0_continuous){
  40064e:	4b14      	ldr	r3, [pc, #80]	; (4006a0 <dma_adc_0_callback+0xb8>)
  400650:	781b      	ldrb	r3, [r3, #0]
  400652:	b92b      	cbnz	r3, 400660 <dma_adc_0_callback+0x78>
	if(ready_values == ALL_VALUES_READY){
  400654:	4b0e      	ldr	r3, [pc, #56]	; (400690 <dma_adc_0_callback+0xa8>)
  400656:	7e1b      	ldrb	r3, [r3, #24]
  400658:	2b0f      	cmp	r3, #15
  40065a:	d004      	beq.n	400666 <dma_adc_0_callback+0x7e>
}
  40065c:	b005      	add	sp, #20
  40065e:	bd30      	pop	{r4, r5, pc}
		dma_adc_0_enable_for_one_transaction();
  400660:	4b10      	ldr	r3, [pc, #64]	; (4006a4 <dma_adc_0_callback+0xbc>)
  400662:	4798      	blx	r3
  400664:	e7f6      	b.n	400654 <dma_adc_0_callback+0x6c>
		ready_values = 0;
  400666:	2200      	movs	r2, #0
  400668:	4b09      	ldr	r3, [pc, #36]	; (400690 <dma_adc_0_callback+0xa8>)
  40066a:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 0\n");
  40066c:	480e      	ldr	r0, [pc, #56]	; (4006a8 <dma_adc_0_callback+0xc0>)
  40066e:	4c0a      	ldr	r4, [pc, #40]	; (400698 <dma_adc_0_callback+0xb0>)
  400670:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  400672:	480a      	ldr	r0, [pc, #40]	; (40069c <dma_adc_0_callback+0xb4>)
  400674:	6843      	ldr	r3, [r0, #4]
  400676:	6802      	ldr	r2, [r0, #0]
  400678:	490c      	ldr	r1, [pc, #48]	; (4006ac <dma_adc_0_callback+0xc4>)
  40067a:	6809      	ldr	r1, [r1, #0]
  40067c:	68c5      	ldr	r5, [r0, #12]
  40067e:	9501      	str	r5, [sp, #4]
  400680:	6880      	ldr	r0, [r0, #8]
  400682:	9000      	str	r0, [sp, #0]
  400684:	480a      	ldr	r0, [pc, #40]	; (4006b0 <dma_adc_0_callback+0xc8>)
  400686:	47a0      	blx	r4
}
  400688:	e7e8      	b.n	40065c <dma_adc_0_callback+0x74>
  40068a:	bf00      	nop
  40068c:	20400514 	.word	0x20400514
  400690:	20400234 	.word	0x20400234
  400694:	00405d08 	.word	0x00405d08
  400698:	00403d01 	.word	0x00403d01
  40069c:	20400538 	.word	0x20400538
  4006a0:	20400534 	.word	0x20400534
  4006a4:	004005bd 	.word	0x004005bd
  4006a8:	00405d34 	.word	0x00405d34
  4006ac:	20400544 	.word	0x20400544
  4006b0:	00405d7c 	.word	0x00405d7c

004006b4 <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  4006b4:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  4006b6:	4906      	ldr	r1, [pc, #24]	; (4006d0 <dma_adc_1_enable_for_one_transaction+0x1c>)
  4006b8:	2001      	movs	r0, #1
  4006ba:	4b06      	ldr	r3, [pc, #24]	; (4006d4 <dma_adc_1_enable_for_one_transaction+0x20>)
  4006bc:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  4006be:	2110      	movs	r1, #16
  4006c0:	2001      	movs	r0, #1
  4006c2:	4b05      	ldr	r3, [pc, #20]	; (4006d8 <dma_adc_1_enable_for_one_transaction+0x24>)
  4006c4:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  4006c6:	2101      	movs	r1, #1
  4006c8:	4608      	mov	r0, r1
  4006ca:	4b04      	ldr	r3, [pc, #16]	; (4006dc <dma_adc_1_enable_for_one_transaction+0x28>)
  4006cc:	4798      	blx	r3
  4006ce:	bd08      	pop	{r3, pc}
  4006d0:	20400250 	.word	0x20400250
  4006d4:	00402831 	.word	0x00402831
  4006d8:	00402851 	.word	0x00402851
  4006dc:	00402869 	.word	0x00402869

004006e0 <dma_adc_1_callback>:
static void dma_adc_1_callback(struct _dma_resource *resource){
  4006e0:	b530      	push	{r4, r5, lr}
  4006e2:	b083      	sub	sp, #12
	has_1_triggered = true;
  4006e4:	2201      	movs	r2, #1
  4006e6:	4b25      	ldr	r3, [pc, #148]	; (40077c <dma_adc_1_callback+0x9c>)
  4006e8:	701a      	strb	r2, [r3, #0]
	printf("interrupt - ADC 1 - %i %i %i %i  \n", (int)dma_adc_1_buff[0],(int)dma_adc_1_buff[1],(int)dma_adc_1_buff[2],(int)dma_adc_1_buff[3]);
  4006ea:	4825      	ldr	r0, [pc, #148]	; (400780 <dma_adc_1_callback+0xa0>)
  4006ec:	69c1      	ldr	r1, [r0, #28]
  4006ee:	6a02      	ldr	r2, [r0, #32]
  4006f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  4006f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  4006f4:	9000      	str	r0, [sp, #0]
  4006f6:	4823      	ldr	r0, [pc, #140]	; (400784 <dma_adc_1_callback+0xa4>)
  4006f8:	4c23      	ldr	r4, [pc, #140]	; (400788 <dma_adc_1_callback+0xa8>)
  4006fa:	47a0      	blx	r4
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  4006fc:	2300      	movs	r3, #0
  4006fe:	e008      	b.n	400712 <dma_adc_1_callback+0x32>
				raw_currents[2] = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400700:	b292      	uxth	r2, r2
  400702:	4922      	ldr	r1, [pc, #136]	; (40078c <dma_adc_1_callback+0xac>)
  400704:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  400706:	491e      	ldr	r1, [pc, #120]	; (400780 <dma_adc_1_callback+0xa0>)
  400708:	7e0a      	ldrb	r2, [r1, #24]
  40070a:	f042 0204 	orr.w	r2, r2, #4
  40070e:	760a      	strb	r2, [r1, #24]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400710:	3301      	adds	r3, #1
  400712:	2b03      	cmp	r3, #3
  400714:	dc14      	bgt.n	400740 <dma_adc_1_callback+0x60>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400716:	4a1a      	ldr	r2, [pc, #104]	; (400780 <dma_adc_1_callback+0xa0>)
  400718:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  40071c:	69d2      	ldr	r2, [r2, #28]
  40071e:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400722:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  400726:	d0eb      	beq.n	400700 <dma_adc_1_callback+0x20>
  400728:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  40072c:	d1f0      	bne.n	400710 <dma_adc_1_callback+0x30>
				raw_voltage = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  40072e:	b292      	uxth	r2, r2
  400730:	4917      	ldr	r1, [pc, #92]	; (400790 <dma_adc_1_callback+0xb0>)
  400732:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<3);
  400734:	4912      	ldr	r1, [pc, #72]	; (400780 <dma_adc_1_callback+0xa0>)
  400736:	7e0a      	ldrb	r2, [r1, #24]
  400738:	f042 0208 	orr.w	r2, r2, #8
  40073c:	760a      	strb	r2, [r1, #24]
				break;
  40073e:	e7e7      	b.n	400710 <dma_adc_1_callback+0x30>
	if(is_dma_adc_1_continuous){
  400740:	4b14      	ldr	r3, [pc, #80]	; (400794 <dma_adc_1_callback+0xb4>)
  400742:	781b      	ldrb	r3, [r3, #0]
  400744:	b92b      	cbnz	r3, 400752 <dma_adc_1_callback+0x72>
	if(ready_values == ALL_VALUES_READY){
  400746:	4b0e      	ldr	r3, [pc, #56]	; (400780 <dma_adc_1_callback+0xa0>)
  400748:	7e1b      	ldrb	r3, [r3, #24]
  40074a:	2b0f      	cmp	r3, #15
  40074c:	d004      	beq.n	400758 <dma_adc_1_callback+0x78>
}
  40074e:	b003      	add	sp, #12
  400750:	bd30      	pop	{r4, r5, pc}
		dma_adc_1_enable_for_one_transaction();
  400752:	4b11      	ldr	r3, [pc, #68]	; (400798 <dma_adc_1_callback+0xb8>)
  400754:	4798      	blx	r3
  400756:	e7f6      	b.n	400746 <dma_adc_1_callback+0x66>
		ready_values = 0;
  400758:	2200      	movs	r2, #0
  40075a:	4b09      	ldr	r3, [pc, #36]	; (400780 <dma_adc_1_callback+0xa0>)
  40075c:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 1 \n");
  40075e:	480f      	ldr	r0, [pc, #60]	; (40079c <dma_adc_1_callback+0xbc>)
  400760:	4c09      	ldr	r4, [pc, #36]	; (400788 <dma_adc_1_callback+0xa8>)
  400762:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  400764:	4809      	ldr	r0, [pc, #36]	; (40078c <dma_adc_1_callback+0xac>)
  400766:	6843      	ldr	r3, [r0, #4]
  400768:	6802      	ldr	r2, [r0, #0]
  40076a:	4909      	ldr	r1, [pc, #36]	; (400790 <dma_adc_1_callback+0xb0>)
  40076c:	6809      	ldr	r1, [r1, #0]
  40076e:	68c5      	ldr	r5, [r0, #12]
  400770:	9501      	str	r5, [sp, #4]
  400772:	6880      	ldr	r0, [r0, #8]
  400774:	9000      	str	r0, [sp, #0]
  400776:	480a      	ldr	r0, [pc, #40]	; (4007a0 <dma_adc_1_callback+0xc0>)
  400778:	47a0      	blx	r4
}
  40077a:	e7e8      	b.n	40074e <dma_adc_1_callback+0x6e>
  40077c:	204004f4 	.word	0x204004f4
  400780:	20400234 	.word	0x20400234
  400784:	00405d68 	.word	0x00405d68
  400788:	00403d01 	.word	0x00403d01
  40078c:	20400538 	.word	0x20400538
  400790:	20400544 	.word	0x20400544
  400794:	20400520 	.word	0x20400520
  400798:	004006b5 	.word	0x004006b5
  40079c:	00405d8c 	.word	0x00405d8c
  4007a0:	00405d7c 	.word	0x00405d7c

004007a4 <dma_adc_0_disable_continuously>:
	is_dma_adc_1_continuous = true;
	dma_adc_1_enable_for_one_transaction();
}

void dma_adc_0_disable_continuously(void){
	is_dma_adc_0_continuous = false;
  4007a4:	2200      	movs	r2, #0
  4007a6:	4b01      	ldr	r3, [pc, #4]	; (4007ac <dma_adc_0_disable_continuously+0x8>)
  4007a8:	701a      	strb	r2, [r3, #0]
  4007aa:	4770      	bx	lr
  4007ac:	20400534 	.word	0x20400534

004007b0 <dma_adc_1_disable_continuously>:
}
void dma_adc_1_disable_continuously(void){
	is_dma_adc_1_continuous = false;
  4007b0:	2200      	movs	r2, #0
  4007b2:	4b01      	ldr	r3, [pc, #4]	; (4007b8 <dma_adc_1_disable_continuously+0x8>)
  4007b4:	701a      	strb	r2, [r3, #0]
  4007b6:	4770      	bx	lr
  4007b8:	20400520 	.word	0x20400520

004007bc <dma_adc_init>:
void dma_adc_init(void){
  4007bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  4007c0:	492a      	ldr	r1, [pc, #168]	; (40086c <dma_adc_init+0xb0>)
  4007c2:	2000      	movs	r0, #0
  4007c4:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 4008a0 <dma_adc_init+0xe4>
  4007c8:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  4007ca:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4008a4 <dma_adc_init+0xe8>
  4007ce:	4641      	mov	r1, r8
  4007d0:	2000      	movs	r0, #0
  4007d2:	4f27      	ldr	r7, [pc, #156]	; (400870 <dma_adc_init+0xb4>)
  4007d4:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  4007d6:	2118      	movs	r1, #24
  4007d8:	2000      	movs	r0, #0
  4007da:	4d26      	ldr	r5, [pc, #152]	; (400874 <dma_adc_init+0xb8>)
  4007dc:	47a8      	blx	r5
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  4007de:	2100      	movs	r1, #0
  4007e0:	460c      	mov	r4, r1
  4007e2:	4608      	mov	r0, r1
  4007e4:	4e24      	ldr	r6, [pc, #144]	; (400878 <dma_adc_init+0xbc>)
  4007e6:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  4007e8:	6823      	ldr	r3, [r4, #0]
  4007ea:	4a24      	ldr	r2, [pc, #144]	; (40087c <dma_adc_init+0xc0>)
  4007ec:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  4007ee:	2201      	movs	r2, #1
  4007f0:	4621      	mov	r1, r4
  4007f2:	4620      	mov	r0, r4
  4007f4:	4c22      	ldr	r4, [pc, #136]	; (400880 <dma_adc_init+0xc4>)
  4007f6:	47a0      	blx	r4
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  4007f8:	4922      	ldr	r1, [pc, #136]	; (400884 <dma_adc_init+0xc8>)
  4007fa:	2001      	movs	r0, #1
  4007fc:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  4007fe:	f108 011c 	add.w	r1, r8, #28
  400802:	2001      	movs	r0, #1
  400804:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  400806:	2110      	movs	r1, #16
  400808:	2001      	movs	r0, #1
  40080a:	47a8      	blx	r5
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  40080c:	2101      	movs	r1, #1
  40080e:	2500      	movs	r5, #0
  400810:	4628      	mov	r0, r5
  400812:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  400814:	682b      	ldr	r3, [r5, #0]
  400816:	4a1c      	ldr	r2, [pc, #112]	; (400888 <dma_adc_init+0xcc>)
  400818:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  40081a:	2201      	movs	r2, #1
  40081c:	4629      	mov	r1, r5
  40081e:	4610      	mov	r0, r2
  400820:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400822:	4b1a      	ldr	r3, [pc, #104]	; (40088c <dma_adc_init+0xd0>)
  400824:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400828:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40082a:	2280      	movs	r2, #128	; 0x80
  40082c:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400830:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400838:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40083c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400840:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400844:	f44f 7280 	mov.w	r2, #256	; 0x100
  400848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40084c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400850:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400854:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	dma_adc_0_disable_continuously();
  400858:	4b0d      	ldr	r3, [pc, #52]	; (400890 <dma_adc_init+0xd4>)
  40085a:	4798      	blx	r3
	dma_adc_1_disable_continuously();
  40085c:	4b0d      	ldr	r3, [pc, #52]	; (400894 <dma_adc_init+0xd8>)
  40085e:	4798      	blx	r3
	has_0_triggered = false;
  400860:	4a0d      	ldr	r2, [pc, #52]	; (400898 <dma_adc_init+0xdc>)
  400862:	7015      	strb	r5, [r2, #0]
	has_1_triggered = false;
  400864:	4a0d      	ldr	r2, [pc, #52]	; (40089c <dma_adc_init+0xe0>)
  400866:	7015      	strb	r5, [r2, #0]
  400868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40086c:	4003c020 	.word	0x4003c020
  400870:	00402831 	.word	0x00402831
  400874:	00402851 	.word	0x00402851
  400878:	00402881 	.word	0x00402881
  40087c:	004005e9 	.word	0x004005e9
  400880:	00402895 	.word	0x00402895
  400884:	40064020 	.word	0x40064020
  400888:	004006e1 	.word	0x004006e1
  40088c:	e000e100 	.word	0xe000e100
  400890:	004007a5 	.word	0x004007a5
  400894:	004007b1 	.word	0x004007b1
  400898:	20400514 	.word	0x20400514
  40089c:	204004f4 	.word	0x204004f4
  4008a0:	00402841 	.word	0x00402841
  4008a4:	20400234 	.word	0x20400234

004008a8 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  4008a8:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  4008aa:	4d11      	ldr	r5, [pc, #68]	; (4008f0 <adc_enable_all+0x48>)
  4008ac:	2108      	movs	r1, #8
  4008ae:	4628      	mov	r0, r5
  4008b0:	4c10      	ldr	r4, [pc, #64]	; (4008f4 <adc_enable_all+0x4c>)
  4008b2:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  4008b4:	2102      	movs	r1, #2
  4008b6:	4628      	mov	r0, r5
  4008b8:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  4008ba:	4e0f      	ldr	r6, [pc, #60]	; (4008f8 <adc_enable_all+0x50>)
  4008bc:	2101      	movs	r1, #1
  4008be:	4630      	mov	r0, r6
  4008c0:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  4008c2:	2106      	movs	r1, #6
  4008c4:	4630      	mov	r0, r6
  4008c6:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  4008c8:	2105      	movs	r1, #5
  4008ca:	4630      	mov	r0, r6
  4008cc:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  4008ce:	2106      	movs	r1, #6
  4008d0:	4628      	mov	r0, r5
  4008d2:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  4008d4:	210a      	movs	r1, #10
  4008d6:	4628      	mov	r0, r5
  4008d8:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  4008da:	2100      	movs	r1, #0
  4008dc:	4630      	mov	r0, r6
  4008de:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  4008e0:	2105      	movs	r1, #5
  4008e2:	4628      	mov	r0, r5
  4008e4:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  4008e6:	2100      	movs	r1, #0
  4008e8:	4628      	mov	r0, r5
  4008ea:	47a0      	blx	r4
  4008ec:	bd70      	pop	{r4, r5, r6, pc}
  4008ee:	bf00      	nop
  4008f0:	20400630 	.word	0x20400630
  4008f4:	00401285 	.word	0x00401285
  4008f8:	20400708 	.word	0x20400708

004008fc <pwm_0_callback>:
#include <hpl_pwm_config.h>

int counter = 0;

void pwm_0_callback(const struct pwm_descriptor *const descr){
	counter ++;
  4008fc:	4a05      	ldr	r2, [pc, #20]	; (400914 <pwm_0_callback+0x18>)
  4008fe:	6813      	ldr	r3, [r2, #0]
  400900:	3301      	adds	r3, #1
  400902:	6013      	str	r3, [r2, #0]
	if (counter > 3000){
  400904:	f640 32b8 	movw	r2, #3000	; 0xbb8
  400908:	4293      	cmp	r3, r2
  40090a:	dd02      	ble.n	400912 <pwm_0_callback+0x16>
		counter = 0;
  40090c:	2200      	movs	r2, #0
  40090e:	4b01      	ldr	r3, [pc, #4]	; (400914 <pwm_0_callback+0x18>)
  400910:	601a      	str	r2, [r3, #0]
  400912:	4770      	bx	lr
  400914:	20400260 	.word	0x20400260

00400918 <pwm_init_user>:
		//printf("PWM Interrupt \n");
	}
}


void pwm_init_user(void){
  400918:	b508      	push	{r3, lr}
}

static inline void hri_pwm_set_CMR_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmr_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  40091a:	4b2e      	ldr	r3, [pc, #184]	; (4009d4 <pwm_init_user+0xbc>)
  40091c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  400920:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400924:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}

static inline void hri_pwm_set_DT_DTH_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400928:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  40092c:	f042 020a 	orr.w	r2, r2, #10
  400930:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
}

static inline void hri_pwm_set_DT_DTL_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400934:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400938:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  40093c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400940:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
  400944:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400948:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  40094c:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400950:	f042 020a 	orr.w	r2, r2, #10
  400954:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400958:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  40095c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  400960:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400964:	4a1c      	ldr	r2, [pc, #112]	; (4009d8 <pwm_init_user+0xc0>)
  400966:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  40096a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  40096e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400972:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400976:	f041 010a 	orr.w	r1, r1, #10
  40097a:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  40097e:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400982:	f441 2120 	orr.w	r1, r1, #655360	; 0xa0000
  400986:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
}

static inline void hri_pwm_set_CMPV_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmpv_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV |= mask;
  40098a:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
  40098e:	f041 0101 	orr.w	r1, r1, #1
  400992:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  400996:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
  40099a:	f041 0101 	orr.w	r1, r1, #1
  40099e:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  4009a2:	2201      	movs	r2, #1
  4009a4:	611a      	str	r2, [r3, #16]
	
	
	//we want interrupt from one of the PWMs so that we can start the control loop
	//interrupt on PWM 0, channel 0 is enabled ; on PWM 1 is disabled
	hri_pwm_set_IMR1_CHID0_bit(PWM0);									//enable the interrupt from ADC 0, channel 0
	pwm_register_callback(&PWM_0, PWM_PERIOD_CB, pwm_0_callback);
  4009a6:	4a0d      	ldr	r2, [pc, #52]	; (4009dc <pwm_init_user+0xc4>)
  4009a8:	2100      	movs	r1, #0
  4009aa:	480d      	ldr	r0, [pc, #52]	; (4009e0 <pwm_init_user+0xc8>)
  4009ac:	4b0d      	ldr	r3, [pc, #52]	; (4009e4 <pwm_init_user+0xcc>)
  4009ae:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4009b0:	4b0d      	ldr	r3, [pc, #52]	; (4009e8 <pwm_init_user+0xd0>)
  4009b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4009b6:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4009b8:	2260      	movs	r2, #96	; 0x60
  4009ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4009be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4009c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4009c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4009ca:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4009ce:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  4009d2:	bd08      	pop	{r3, pc}
  4009d4:	40020000 	.word	0x40020000
  4009d8:	4005c000 	.word	0x4005c000
  4009dc:	004008fd 	.word	0x004008fd
  4009e0:	20400548 	.word	0x20400548
  4009e4:	00401551 	.word	0x00401551
  4009e8:	e000e100 	.word	0xe000e100

004009ec <pwm_enable_all>:
}


//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  4009ec:	b570      	push	{r4, r5, r6, lr}
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM |= mask;
  4009ee:	4a12      	ldr	r2, [pc, #72]	; (400a38 <pwm_enable_all+0x4c>)
  4009f0:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  4009f4:	f043 0301 	orr.w	r3, r3, #1
  4009f8:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
  4009fc:	f502 3270 	add.w	r2, r2, #245760	; 0x3c000
  400a00:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400a04:	f043 0301 	orr.w	r3, r3, #1
  400a08:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	hri_pwm_set_CMPM_reg(PWM0, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	hri_pwm_set_CMPM_reg(PWM1, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  400a0c:	4c0b      	ldr	r4, [pc, #44]	; (400a3c <pwm_enable_all+0x50>)
  400a0e:	4620      	mov	r0, r4
  400a10:	4e0b      	ldr	r6, [pc, #44]	; (400a40 <pwm_enable_all+0x54>)
  400a12:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  400a14:	4d0b      	ldr	r5, [pc, #44]	; (400a44 <pwm_enable_all+0x58>)
  400a16:	4628      	mov	r0, r5
  400a18:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  400a1a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400a1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400a22:	4620      	mov	r0, r4
  400a24:	4c08      	ldr	r4, [pc, #32]	; (400a48 <pwm_enable_all+0x5c>)
  400a26:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD>>1);
  400a28:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400a2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400a30:	4628      	mov	r0, r5
  400a32:	47a0      	blx	r4
  400a34:	bd70      	pop	{r4, r5, r6, pc}
  400a36:	bf00      	nop
  400a38:	40020000 	.word	0x40020000
  400a3c:	20400548 	.word	0x20400548
  400a40:	00401515 	.word	0x00401515
  400a44:	204006ec 	.word	0x204006ec
  400a48:	00401599 	.word	0x00401599

00400a4c <POS_Sensor_Initial_Test>:
	}
}


void PWM_Initial_Test (void);
void POS_Sensor_Initial_Test (void){
  400a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a4e:	b087      	sub	sp, #28
  400a50:	e008      	b.n	400a64 <POS_Sensor_Initial_Test+0x18>
		printf("Curr time = %f\n", control_pos_sens_time_in_current_sector);
		
		//do an artificial delay without using the delay function as that alters the SysTick
		int k =1;
		for (int i = 1; i<(1<<26);i++){
			k = k*i;
  400a52:	fb03 f101 	mul.w	r1, r3, r1
		for (int i = 1; i<(1<<26);i++){
  400a56:	3301      	adds	r3, #1
  400a58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
  400a5c:	dbf9      	blt.n	400a52 <POS_Sensor_Initial_Test+0x6>
		}
		printf("k = %i \n",k);
  400a5e:	4810      	ldr	r0, [pc, #64]	; (400aa0 <POS_Sensor_Initial_Test+0x54>)
  400a60:	4b10      	ldr	r3, [pc, #64]	; (400aa4 <POS_Sensor_Initial_Test+0x58>)
  400a62:	4798      	blx	r3
		get_Data_Pos(&(control_pos_sens_deltas[0]), &control_pos_sens_sector, &control_pos_sens_time_in_current_sector);
  400a64:	aa02      	add	r2, sp, #8
  400a66:	a905      	add	r1, sp, #20
  400a68:	a803      	add	r0, sp, #12
  400a6a:	4b0f      	ldr	r3, [pc, #60]	; (400aa8 <POS_Sensor_Initial_Test+0x5c>)
  400a6c:	4798      	blx	r3
		printf("Deltas = %f \t %f\n",control_pos_sens_deltas[0],control_pos_sens_deltas[1]);
  400a6e:	9d04      	ldr	r5, [sp, #16]
  400a70:	4c0e      	ldr	r4, [pc, #56]	; (400aac <POS_Sensor_Initial_Test+0x60>)
  400a72:	9803      	ldr	r0, [sp, #12]
  400a74:	47a0      	blx	r4
  400a76:	4606      	mov	r6, r0
  400a78:	460f      	mov	r7, r1
  400a7a:	4628      	mov	r0, r5
  400a7c:	47a0      	blx	r4
  400a7e:	e9cd 0100 	strd	r0, r1, [sp]
  400a82:	4632      	mov	r2, r6
  400a84:	463b      	mov	r3, r7
  400a86:	480a      	ldr	r0, [pc, #40]	; (400ab0 <POS_Sensor_Initial_Test+0x64>)
  400a88:	4d06      	ldr	r5, [pc, #24]	; (400aa4 <POS_Sensor_Initial_Test+0x58>)
  400a8a:	47a8      	blx	r5
		printf("Curr time = %f\n", control_pos_sens_time_in_current_sector);
  400a8c:	9802      	ldr	r0, [sp, #8]
  400a8e:	47a0      	blx	r4
  400a90:	4602      	mov	r2, r0
  400a92:	460b      	mov	r3, r1
  400a94:	4807      	ldr	r0, [pc, #28]	; (400ab4 <POS_Sensor_Initial_Test+0x68>)
  400a96:	47a8      	blx	r5
		for (int i = 1; i<(1<<26);i++){
  400a98:	2301      	movs	r3, #1
		int k =1;
  400a9a:	4619      	mov	r1, r3
		for (int i = 1; i<(1<<26);i++){
  400a9c:	e7dc      	b.n	400a58 <POS_Sensor_Initial_Test+0xc>
  400a9e:	bf00      	nop
  400aa0:	00405f04 	.word	0x00405f04
  400aa4:	00403d01 	.word	0x00403d01
  400aa8:	00400525 	.word	0x00400525
  400aac:	00402da9 	.word	0x00402da9
  400ab0:	00405ee0 	.word	0x00405ee0
  400ab4:	00405ef4 	.word	0x00405ef4

00400ab8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400ab8:	e7fe      	b.n	400ab8 <Dummy_Handler>
	...

00400abc <Reset_Handler>:
{
  400abc:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400abe:	4b10      	ldr	r3, [pc, #64]	; (400b00 <Reset_Handler+0x44>)
  400ac0:	4a10      	ldr	r2, [pc, #64]	; (400b04 <Reset_Handler+0x48>)
  400ac2:	429a      	cmp	r2, r3
  400ac4:	d009      	beq.n	400ada <Reset_Handler+0x1e>
  400ac6:	4b0e      	ldr	r3, [pc, #56]	; (400b00 <Reset_Handler+0x44>)
  400ac8:	4a0e      	ldr	r2, [pc, #56]	; (400b04 <Reset_Handler+0x48>)
  400aca:	e003      	b.n	400ad4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400acc:	6811      	ldr	r1, [r2, #0]
  400ace:	6019      	str	r1, [r3, #0]
  400ad0:	3304      	adds	r3, #4
  400ad2:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400ad4:	490c      	ldr	r1, [pc, #48]	; (400b08 <Reset_Handler+0x4c>)
  400ad6:	428b      	cmp	r3, r1
  400ad8:	d3f8      	bcc.n	400acc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400ada:	4b0c      	ldr	r3, [pc, #48]	; (400b0c <Reset_Handler+0x50>)
  400adc:	e002      	b.n	400ae4 <Reset_Handler+0x28>
                *pDest++ = 0;
  400ade:	2200      	movs	r2, #0
  400ae0:	601a      	str	r2, [r3, #0]
  400ae2:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400ae4:	4a0a      	ldr	r2, [pc, #40]	; (400b10 <Reset_Handler+0x54>)
  400ae6:	4293      	cmp	r3, r2
  400ae8:	d3f9      	bcc.n	400ade <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400aea:	4a0a      	ldr	r2, [pc, #40]	; (400b14 <Reset_Handler+0x58>)
  400aec:	4b0a      	ldr	r3, [pc, #40]	; (400b18 <Reset_Handler+0x5c>)
  400aee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400af2:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400af4:	4b09      	ldr	r3, [pc, #36]	; (400b1c <Reset_Handler+0x60>)
  400af6:	4798      	blx	r3
        main();
  400af8:	4b09      	ldr	r3, [pc, #36]	; (400b20 <Reset_Handler+0x64>)
  400afa:	4798      	blx	r3
  400afc:	e7fe      	b.n	400afc <Reset_Handler+0x40>
  400afe:	bf00      	nop
  400b00:	20400000 	.word	0x20400000
  400b04:	00406618 	.word	0x00406618
  400b08:	20400218 	.word	0x20400218
  400b0c:	20400218 	.word	0x20400218
  400b10:	20400738 	.word	0x20400738
  400b14:	e000ed00 	.word	0xe000ed00
  400b18:	00400000 	.word	0x00400000
  400b1c:	004033d5 	.word	0x004033d5
  400b20:	00402959 	.word	0x00402959

00400b24 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  400b24:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b26:	b085      	sub	sp, #20
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400b28:	4b20      	ldr	r3, [pc, #128]	; (400bac <ADC_1_init+0x88>)
  400b2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400b2e:	f413 7f80 	tst.w	r3, #256	; 0x100
  400b32:	d104      	bne.n	400b3e <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400b34:	f44f 7280 	mov.w	r2, #256	; 0x100
  400b38:	4b1c      	ldr	r3, [pc, #112]	; (400bac <ADC_1_init+0x88>)
  400b3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  400b3e:	4d1c      	ldr	r5, [pc, #112]	; (400bb0 <ADC_1_init+0x8c>)
  400b40:	4c1c      	ldr	r4, [pc, #112]	; (400bb4 <ADC_1_init+0x90>)
  400b42:	2600      	movs	r6, #0
  400b44:	9602      	str	r6, [sp, #8]
  400b46:	4b1c      	ldr	r3, [pc, #112]	; (400bb8 <ADC_1_init+0x94>)
  400b48:	9301      	str	r3, [sp, #4]
  400b4a:	2304      	movs	r3, #4
  400b4c:	9300      	str	r3, [sp, #0]
  400b4e:	2306      	movs	r3, #6
  400b50:	462a      	mov	r2, r5
  400b52:	491a      	ldr	r1, [pc, #104]	; (400bbc <ADC_1_init+0x98>)
  400b54:	4620      	mov	r0, r4
  400b56:	4f1a      	ldr	r7, [pc, #104]	; (400bc0 <ADC_1_init+0x9c>)
  400b58:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  400b5a:	2310      	movs	r3, #16
  400b5c:	f105 0208 	add.w	r2, r5, #8
  400b60:	4631      	mov	r1, r6
  400b62:	4620      	mov	r0, r4
  400b64:	4e17      	ldr	r6, [pc, #92]	; (400bc4 <ADC_1_init+0xa0>)
  400b66:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  400b68:	2310      	movs	r3, #16
  400b6a:	f105 0218 	add.w	r2, r5, #24
  400b6e:	2101      	movs	r1, #1
  400b70:	4620      	mov	r0, r4
  400b72:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  400b74:	2310      	movs	r3, #16
  400b76:	f105 0228 	add.w	r2, r5, #40	; 0x28
  400b7a:	2105      	movs	r1, #5
  400b7c:	4620      	mov	r0, r4
  400b7e:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  400b80:	2310      	movs	r3, #16
  400b82:	f105 0238 	add.w	r2, r5, #56	; 0x38
  400b86:	2106      	movs	r1, #6
  400b88:	4620      	mov	r0, r4
  400b8a:	47b0      	blx	r6
	((Pio *)hw)->PIO_PER = mask;
  400b8c:	2202      	movs	r2, #2
  400b8e:	4b0e      	ldr	r3, [pc, #56]	; (400bc8 <ADC_1_init+0xa4>)
  400b90:	601a      	str	r2, [r3, #0]
  400b92:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400b9a:	601a      	str	r2, [r3, #0]
  400b9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400ba0:	601a      	str	r2, [r3, #0]
  400ba2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400ba6:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  400ba8:	b005      	add	sp, #20
  400baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400bac:	400e0600 	.word	0x400e0600
  400bb0:	20400264 	.word	0x20400264
  400bb4:	20400708 	.word	0x20400708
  400bb8:	204005a8 	.word	0x204005a8
  400bbc:	40064000 	.word	0x40064000
  400bc0:	00401125 	.word	0x00401125
  400bc4:	004011cd 	.word	0x004011cd
  400bc8:	400e1000 	.word	0x400e1000

00400bcc <ADC_0_init>:
{
  400bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400bd0:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400bd2:	4b2a      	ldr	r3, [pc, #168]	; (400c7c <ADC_0_init+0xb0>)
  400bd4:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400bd6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400bda:	d103      	bne.n	400be4 <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400bdc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400be0:	4b26      	ldr	r3, [pc, #152]	; (400c7c <ADC_0_init+0xb0>)
  400be2:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  400be4:	4d26      	ldr	r5, [pc, #152]	; (400c80 <ADC_0_init+0xb4>)
  400be6:	4c27      	ldr	r4, [pc, #156]	; (400c84 <ADC_0_init+0xb8>)
  400be8:	2600      	movs	r6, #0
  400bea:	9602      	str	r6, [sp, #8]
  400bec:	4b26      	ldr	r3, [pc, #152]	; (400c88 <ADC_0_init+0xbc>)
  400bee:	9301      	str	r3, [sp, #4]
  400bf0:	2706      	movs	r7, #6
  400bf2:	9700      	str	r7, [sp, #0]
  400bf4:	230a      	movs	r3, #10
  400bf6:	f105 0248 	add.w	r2, r5, #72	; 0x48
  400bfa:	4924      	ldr	r1, [pc, #144]	; (400c8c <ADC_0_init+0xc0>)
  400bfc:	4620      	mov	r0, r4
  400bfe:	f8df 809c 	ldr.w	r8, [pc, #156]	; 400c9c <ADC_0_init+0xd0>
  400c02:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  400c04:	2310      	movs	r3, #16
  400c06:	f105 0254 	add.w	r2, r5, #84	; 0x54
  400c0a:	4631      	mov	r1, r6
  400c0c:	4620      	mov	r0, r4
  400c0e:	4e20      	ldr	r6, [pc, #128]	; (400c90 <ADC_0_init+0xc4>)
  400c10:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  400c12:	2310      	movs	r3, #16
  400c14:	f105 0264 	add.w	r2, r5, #100	; 0x64
  400c18:	2102      	movs	r1, #2
  400c1a:	4620      	mov	r0, r4
  400c1c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  400c1e:	2310      	movs	r3, #16
  400c20:	f105 0274 	add.w	r2, r5, #116	; 0x74
  400c24:	2105      	movs	r1, #5
  400c26:	4620      	mov	r0, r4
  400c28:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  400c2a:	2310      	movs	r3, #16
  400c2c:	f105 0284 	add.w	r2, r5, #132	; 0x84
  400c30:	4639      	mov	r1, r7
  400c32:	4620      	mov	r0, r4
  400c34:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  400c36:	2310      	movs	r3, #16
  400c38:	f105 0294 	add.w	r2, r5, #148	; 0x94
  400c3c:	2108      	movs	r1, #8
  400c3e:	4620      	mov	r0, r4
  400c40:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  400c42:	2310      	movs	r3, #16
  400c44:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  400c48:	210a      	movs	r1, #10
  400c4a:	4620      	mov	r0, r4
  400c4c:	47b0      	blx	r6
  400c4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400c52:	4b10      	ldr	r3, [pc, #64]	; (400c94 <ADC_0_init+0xc8>)
  400c54:	601a      	str	r2, [r3, #0]
  400c56:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400c5a:	2208      	movs	r2, #8
  400c5c:	601a      	str	r2, [r3, #0]
  400c5e:	2204      	movs	r2, #4
  400c60:	601a      	str	r2, [r3, #0]
  400c62:	4a0d      	ldr	r2, [pc, #52]	; (400c98 <ADC_0_init+0xcc>)
  400c64:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400c68:	6011      	str	r1, [r2, #0]
  400c6a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400c6e:	6011      	str	r1, [r2, #0]
  400c70:	2201      	movs	r2, #1
  400c72:	601a      	str	r2, [r3, #0]
}
  400c74:	b004      	add	sp, #16
  400c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c7a:	bf00      	nop
  400c7c:	400e0600 	.word	0x400e0600
  400c80:	20400264 	.word	0x20400264
  400c84:	20400630 	.word	0x20400630
  400c88:	2040065c 	.word	0x2040065c
  400c8c:	4003c000 	.word	0x4003c000
  400c90:	004011cd 	.word	0x004011cd
  400c94:	400e1400 	.word	0x400e1400
  400c98:	400e0e00 	.word	0x400e0e00
  400c9c:	00401125 	.word	0x00401125

00400ca0 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400ca0:	4b04      	ldr	r3, [pc, #16]	; (400cb4 <EXTERNAL_IRQ_D_init+0x14>)
  400ca2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400ca6:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400ca8:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400caa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400cae:	601a      	str	r2, [r3, #0]
  400cb0:	4770      	bx	lr
  400cb2:	bf00      	nop
  400cb4:	400e1400 	.word	0x400e1400

00400cb8 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400cb8:	4b06      	ldr	r3, [pc, #24]	; (400cd4 <EXTERNAL_IRQ_A_init+0x1c>)
  400cba:	2204      	movs	r2, #4
  400cbc:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400cbe:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400cc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400cc4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400cc6:	2220      	movs	r2, #32
  400cc8:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400cca:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400ccc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400cd0:	601a      	str	r2, [r3, #0]
  400cd2:	4770      	bx	lr
  400cd4:	400e0e00 	.word	0x400e0e00

00400cd8 <EXTERNAL_IRQ_B_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400cd8:	4b04      	ldr	r3, [pc, #16]	; (400cec <EXTERNAL_IRQ_B_init+0x14>)
  400cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400cde:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400ce0:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400ce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400ce6:	601a      	str	r2, [r3, #0]
  400ce8:	4770      	bx	lr
  400cea:	bf00      	nop
  400cec:	400e1000 	.word	0x400e1000

00400cf0 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400cf0:	4b16      	ldr	r3, [pc, #88]	; (400d4c <PWM_0_PORT_init+0x5c>)
  400cf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400cf4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400cf8:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400cfa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400cfc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  400d00:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d02:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400d06:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400d08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d0a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  400d0e:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d10:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d12:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400d16:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400d1c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d20:	f022 0202 	bic.w	r2, r2, #2
  400d24:	671a      	str	r2, [r3, #112]	; 0x70
  400d26:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d28:	f022 0202 	bic.w	r2, r2, #2
  400d2c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d2e:	2202      	movs	r2, #2
  400d30:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d34:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400d38:	671a      	str	r2, [r3, #112]	; 0x70
  400d3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d3c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400d40:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400d46:	605a      	str	r2, [r3, #4]
  400d48:	4770      	bx	lr
  400d4a:	bf00      	nop
  400d4c:	400e0e00 	.word	0x400e0e00

00400d50 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400d50:	4b04      	ldr	r3, [pc, #16]	; (400d64 <PWM_0_CLOCK_init+0x14>)
  400d52:	699b      	ldr	r3, [r3, #24]
  400d54:	2b00      	cmp	r3, #0
  400d56:	db03      	blt.n	400d60 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400d58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400d5c:	4b01      	ldr	r3, [pc, #4]	; (400d64 <PWM_0_CLOCK_init+0x14>)
  400d5e:	611a      	str	r2, [r3, #16]
  400d60:	4770      	bx	lr
  400d62:	bf00      	nop
  400d64:	400e0600 	.word	0x400e0600

00400d68 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400d68:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  400d6a:	4b06      	ldr	r3, [pc, #24]	; (400d84 <PWM_0_init+0x1c>)
  400d6c:	4798      	blx	r3
	PWM_0_PORT_init();
  400d6e:	4b06      	ldr	r3, [pc, #24]	; (400d88 <PWM_0_init+0x20>)
  400d70:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400d72:	4b06      	ldr	r3, [pc, #24]	; (400d8c <PWM_0_init+0x24>)
  400d74:	4798      	blx	r3
  400d76:	4602      	mov	r2, r0
  400d78:	4905      	ldr	r1, [pc, #20]	; (400d90 <PWM_0_init+0x28>)
  400d7a:	4806      	ldr	r0, [pc, #24]	; (400d94 <PWM_0_init+0x2c>)
  400d7c:	4b06      	ldr	r3, [pc, #24]	; (400d98 <PWM_0_init+0x30>)
  400d7e:	4798      	blx	r3
  400d80:	bd08      	pop	{r3, pc}
  400d82:	bf00      	nop
  400d84:	00400d51 	.word	0x00400d51
  400d88:	00400cf1 	.word	0x00400cf1
  400d8c:	004023a1 	.word	0x004023a1
  400d90:	40020000 	.word	0x40020000
  400d94:	20400548 	.word	0x20400548
  400d98:	004014d1 	.word	0x004014d1

00400d9c <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d9c:	4b0c      	ldr	r3, [pc, #48]	; (400dd0 <PWM_1_PORT_init+0x34>)
  400d9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400da0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400da4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400da6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400da8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400dac:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400dae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400db2:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400db4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400db8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400dba:	f042 0201 	orr.w	r2, r2, #1
  400dbe:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400dc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400dc2:	f022 0201 	bic.w	r2, r2, #1
  400dc6:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400dc8:	2201      	movs	r2, #1
  400dca:	605a      	str	r2, [r3, #4]
  400dcc:	4770      	bx	lr
  400dce:	bf00      	nop
  400dd0:	400e0e00 	.word	0x400e0e00

00400dd4 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400dd4:	4b05      	ldr	r3, [pc, #20]	; (400dec <PWM_1_CLOCK_init+0x18>)
  400dd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400dda:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  400dde:	d104      	bne.n	400dea <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400de4:	4b01      	ldr	r3, [pc, #4]	; (400dec <PWM_1_CLOCK_init+0x18>)
  400de6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400dea:	4770      	bx	lr
  400dec:	400e0600 	.word	0x400e0600

00400df0 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  400df0:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  400df2:	4b06      	ldr	r3, [pc, #24]	; (400e0c <PWM_1_init+0x1c>)
  400df4:	4798      	blx	r3
	PWM_1_PORT_init();
  400df6:	4b06      	ldr	r3, [pc, #24]	; (400e10 <PWM_1_init+0x20>)
  400df8:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400dfa:	4b06      	ldr	r3, [pc, #24]	; (400e14 <PWM_1_init+0x24>)
  400dfc:	4798      	blx	r3
  400dfe:	4602      	mov	r2, r0
  400e00:	4905      	ldr	r1, [pc, #20]	; (400e18 <PWM_1_init+0x28>)
  400e02:	4806      	ldr	r0, [pc, #24]	; (400e1c <PWM_1_init+0x2c>)
  400e04:	4b06      	ldr	r3, [pc, #24]	; (400e20 <PWM_1_init+0x30>)
  400e06:	4798      	blx	r3
  400e08:	bd08      	pop	{r3, pc}
  400e0a:	bf00      	nop
  400e0c:	00400dd5 	.word	0x00400dd5
  400e10:	00400d9d 	.word	0x00400d9d
  400e14:	004023a1 	.word	0x004023a1
  400e18:	4005c000 	.word	0x4005c000
  400e1c:	204006ec 	.word	0x204006ec
  400e20:	004014d1 	.word	0x004014d1

00400e24 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400e24:	4b06      	ldr	r3, [pc, #24]	; (400e40 <ENCODER_A_PORT_init+0x1c>)
  400e26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e28:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400e2c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400e2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e30:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  400e34:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e36:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e3a:	605a      	str	r2, [r3, #4]
  400e3c:	4770      	bx	lr
  400e3e:	bf00      	nop
  400e40:	400e0e00 	.word	0x400e0e00

00400e44 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  400e44:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400e46:	4b09      	ldr	r3, [pc, #36]	; (400e6c <ENCODER_A_init+0x28>)
  400e48:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400e4a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400e4e:	d103      	bne.n	400e58 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400e50:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400e54:	4b05      	ldr	r3, [pc, #20]	; (400e6c <ENCODER_A_init+0x28>)
  400e56:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  400e58:	4b05      	ldr	r3, [pc, #20]	; (400e70 <ENCODER_A_init+0x2c>)
  400e5a:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  400e5c:	4b05      	ldr	r3, [pc, #20]	; (400e74 <ENCODER_A_init+0x30>)
  400e5e:	4798      	blx	r3
  400e60:	4602      	mov	r2, r0
  400e62:	4905      	ldr	r1, [pc, #20]	; (400e78 <ENCODER_A_init+0x34>)
  400e64:	4805      	ldr	r0, [pc, #20]	; (400e7c <ENCODER_A_init+0x38>)
  400e66:	4b06      	ldr	r3, [pc, #24]	; (400e80 <ENCODER_A_init+0x3c>)
  400e68:	4798      	blx	r3
  400e6a:	bd08      	pop	{r3, pc}
  400e6c:	400e0600 	.word	0x400e0600
  400e70:	00400e25 	.word	0x00400e25
  400e74:	00402577 	.word	0x00402577
  400e78:	4000c000 	.word	0x4000c000
  400e7c:	20400614 	.word	0x20400614
  400e80:	00401681 	.word	0x00401681

00400e84 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400e84:	4b06      	ldr	r3, [pc, #24]	; (400ea0 <ENCODER_B_PORT_init+0x1c>)
  400e86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e88:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  400e8c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400e8e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e90:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  400e94:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400e9a:	605a      	str	r2, [r3, #4]
  400e9c:	4770      	bx	lr
  400e9e:	bf00      	nop
  400ea0:	400e1400 	.word	0x400e1400

00400ea4 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  400ea4:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400ea6:	4b0a      	ldr	r3, [pc, #40]	; (400ed0 <ENCODER_B_init+0x2c>)
  400ea8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400eac:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  400eb0:	d104      	bne.n	400ebc <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400eb2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400eb6:	4b06      	ldr	r3, [pc, #24]	; (400ed0 <ENCODER_B_init+0x2c>)
  400eb8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  400ebc:	4b05      	ldr	r3, [pc, #20]	; (400ed4 <ENCODER_B_init+0x30>)
  400ebe:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  400ec0:	4b05      	ldr	r3, [pc, #20]	; (400ed8 <ENCODER_B_init+0x34>)
  400ec2:	4798      	blx	r3
  400ec4:	4602      	mov	r2, r0
  400ec6:	4905      	ldr	r1, [pc, #20]	; (400edc <ENCODER_B_init+0x38>)
  400ec8:	4805      	ldr	r0, [pc, #20]	; (400ee0 <ENCODER_B_init+0x3c>)
  400eca:	4b06      	ldr	r3, [pc, #24]	; (400ee4 <ENCODER_B_init+0x40>)
  400ecc:	4798      	blx	r3
  400ece:	bd08      	pop	{r3, pc}
  400ed0:	400e0600 	.word	0x400e0600
  400ed4:	00400e85 	.word	0x00400e85
  400ed8:	00402577 	.word	0x00402577
  400edc:	40054000 	.word	0x40054000
  400ee0:	20400564 	.word	0x20400564
  400ee4:	00401681 	.word	0x00401681

00400ee8 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400ee8:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400eea:	4802      	ldr	r0, [pc, #8]	; (400ef4 <delay_driver_init+0xc>)
  400eec:	4b02      	ldr	r3, [pc, #8]	; (400ef8 <delay_driver_init+0x10>)
  400eee:	4798      	blx	r3
  400ef0:	bd08      	pop	{r3, pc}
  400ef2:	bf00      	nop
  400ef4:	e000e010 	.word	0xe000e010
  400ef8:	004012e1 	.word	0x004012e1

00400efc <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400efc:	4b0f      	ldr	r3, [pc, #60]	; (400f3c <EDBG_COM_PORT_init+0x40>)
  400efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f00:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400f04:	671a      	str	r2, [r3, #112]	; 0x70
  400f06:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f08:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400f0c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400f0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400f12:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400f14:	4a0a      	ldr	r2, [pc, #40]	; (400f40 <EDBG_COM_PORT_init+0x44>)
  400f16:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400f1a:	f043 0310 	orr.w	r3, r3, #16
  400f1e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400f22:	4b08      	ldr	r3, [pc, #32]	; (400f44 <EDBG_COM_PORT_init+0x48>)
  400f24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f26:	f042 0210 	orr.w	r2, r2, #16
  400f2a:	671a      	str	r2, [r3, #112]	; 0x70
  400f2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f2e:	f042 0210 	orr.w	r2, r2, #16
  400f32:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400f34:	2210      	movs	r2, #16
  400f36:	605a      	str	r2, [r3, #4]
  400f38:	4770      	bx	lr
  400f3a:	bf00      	nop
  400f3c:	400e0e00 	.word	0x400e0e00
  400f40:	40088000 	.word	0x40088000
  400f44:	400e1000 	.word	0x400e1000

00400f48 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400f48:	4b04      	ldr	r3, [pc, #16]	; (400f5c <EDBG_COM_CLOCK_init+0x14>)
  400f4a:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400f4c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400f50:	d103      	bne.n	400f5a <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400f52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400f56:	4b01      	ldr	r3, [pc, #4]	; (400f5c <EDBG_COM_CLOCK_init+0x14>)
  400f58:	611a      	str	r2, [r3, #16]
  400f5a:	4770      	bx	lr
  400f5c:	400e0600 	.word	0x400e0600

00400f60 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  400f60:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  400f62:	4b06      	ldr	r3, [pc, #24]	; (400f7c <EDBG_COM_init+0x1c>)
  400f64:	4798      	blx	r3
	EDBG_COM_PORT_init();
  400f66:	4b06      	ldr	r3, [pc, #24]	; (400f80 <EDBG_COM_init+0x20>)
  400f68:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  400f6a:	4b06      	ldr	r3, [pc, #24]	; (400f84 <EDBG_COM_init+0x24>)
  400f6c:	4798      	blx	r3
  400f6e:	4602      	mov	r2, r0
  400f70:	4905      	ldr	r1, [pc, #20]	; (400f88 <EDBG_COM_init+0x28>)
  400f72:	4806      	ldr	r0, [pc, #24]	; (400f8c <EDBG_COM_init+0x2c>)
  400f74:	4b06      	ldr	r3, [pc, #24]	; (400f90 <EDBG_COM_init+0x30>)
  400f76:	4798      	blx	r3
  400f78:	bd08      	pop	{r3, pc}
  400f7a:	bf00      	nop
  400f7c:	00400f49 	.word	0x00400f49
  400f80:	00400efd 	.word	0x00400efd
  400f84:	004027b9 	.word	0x004027b9
  400f88:	40028000 	.word	0x40028000
  400f8c:	20400608 	.word	0x20400608
  400f90:	004017c9 	.word	0x004017c9

00400f94 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  400f94:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400f96:	4b37      	ldr	r3, [pc, #220]	; (401074 <system_init+0xe0>)
  400f98:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400f9a:	4b37      	ldr	r3, [pc, #220]	; (401078 <system_init+0xe4>)
  400f9c:	699b      	ldr	r3, [r3, #24]
  400f9e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400fa2:	d103      	bne.n	400fac <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400fa8:	4b33      	ldr	r3, [pc, #204]	; (401078 <system_init+0xe4>)
  400faa:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400fac:	4b32      	ldr	r3, [pc, #200]	; (401078 <system_init+0xe4>)
  400fae:	699b      	ldr	r3, [r3, #24]
  400fb0:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400fb4:	d103      	bne.n	400fbe <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400fb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400fba:	4b2f      	ldr	r3, [pc, #188]	; (401078 <system_init+0xe4>)
  400fbc:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400fbe:	4b2e      	ldr	r3, [pc, #184]	; (401078 <system_init+0xe4>)
  400fc0:	699b      	ldr	r3, [r3, #24]
  400fc2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400fc6:	d103      	bne.n	400fd0 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400fc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400fcc:	4b2a      	ldr	r3, [pc, #168]	; (401078 <system_init+0xe4>)
  400fce:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400fd0:	4b29      	ldr	r3, [pc, #164]	; (401078 <system_init+0xe4>)
  400fd2:	699b      	ldr	r3, [r3, #24]
  400fd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400fd8:	d103      	bne.n	400fe2 <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400fde:	4b26      	ldr	r3, [pc, #152]	; (401078 <system_init+0xe4>)
  400fe0:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400fe2:	4a26      	ldr	r2, [pc, #152]	; (40107c <system_init+0xe8>)
  400fe4:	6853      	ldr	r3, [r2, #4]
  400fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400fea:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  400fec:	4b24      	ldr	r3, [pc, #144]	; (401080 <system_init+0xec>)
  400fee:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400ff2:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  400ff4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  400ff8:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  400ffa:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400ffc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  401000:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401002:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401004:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40100a:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40100c:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40100e:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  401014:	f44f 7080 	mov.w	r0, #256	; 0x100
  401018:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40101a:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40101c:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40101e:	f44f 7000 	mov.w	r0, #512	; 0x200
  401022:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401024:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401026:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401028:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40102c:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40102e:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401030:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401032:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401036:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401038:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40103a:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40103c:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40103e:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401040:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  401042:	4b10      	ldr	r3, [pc, #64]	; (401084 <system_init+0xf0>)
  401044:	4798      	blx	r3
	ADC_1_init();
  401046:	4b10      	ldr	r3, [pc, #64]	; (401088 <system_init+0xf4>)
  401048:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  40104a:	4b10      	ldr	r3, [pc, #64]	; (40108c <system_init+0xf8>)
  40104c:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  40104e:	4b10      	ldr	r3, [pc, #64]	; (401090 <system_init+0xfc>)
  401050:	4798      	blx	r3
	EXTERNAL_IRQ_B_init();
  401052:	4b10      	ldr	r3, [pc, #64]	; (401094 <system_init+0x100>)
  401054:	4798      	blx	r3

	PWM_0_init();
  401056:	4b10      	ldr	r3, [pc, #64]	; (401098 <system_init+0x104>)
  401058:	4798      	blx	r3

	PWM_1_init();
  40105a:	4b10      	ldr	r3, [pc, #64]	; (40109c <system_init+0x108>)
  40105c:	4798      	blx	r3
	ENCODER_A_init();
  40105e:	4b10      	ldr	r3, [pc, #64]	; (4010a0 <system_init+0x10c>)
  401060:	4798      	blx	r3
	ENCODER_B_init();
  401062:	4b10      	ldr	r3, [pc, #64]	; (4010a4 <system_init+0x110>)
  401064:	4798      	blx	r3

	delay_driver_init();
  401066:	4b10      	ldr	r3, [pc, #64]	; (4010a8 <system_init+0x114>)
  401068:	4798      	blx	r3

	EDBG_COM_init();
  40106a:	4b10      	ldr	r3, [pc, #64]	; (4010ac <system_init+0x118>)
  40106c:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  40106e:	4b10      	ldr	r3, [pc, #64]	; (4010b0 <system_init+0x11c>)
  401070:	4798      	blx	r3
  401072:	bd08      	pop	{r3, pc}
  401074:	00401c09 	.word	0x00401c09
  401078:	400e0600 	.word	0x400e0600
  40107c:	400e1850 	.word	0x400e1850
  401080:	400e0e00 	.word	0x400e0e00
  401084:	00400bcd 	.word	0x00400bcd
  401088:	00400b25 	.word	0x00400b25
  40108c:	00400ca1 	.word	0x00400ca1
  401090:	00400cb9 	.word	0x00400cb9
  401094:	00400cd9 	.word	0x00400cd9
  401098:	00400d69 	.word	0x00400d69
  40109c:	00400df1 	.word	0x00400df1
  4010a0:	00400e45 	.word	0x00400e45
  4010a4:	00400ea5 	.word	0x00400ea5
  4010a8:	00400ee9 	.word	0x00400ee9
  4010ac:	00400f61 	.word	0x00400f61
  4010b0:	00401359 	.word	0x00401359

004010b4 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  4010b4:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  4010b6:	6983      	ldr	r3, [r0, #24]
  4010b8:	b103      	cbz	r3, 4010bc <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  4010ba:	4798      	blx	r3
  4010bc:	bd08      	pop	{r3, pc}

004010be <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  4010be:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  4010c0:	69c3      	ldr	r3, [r0, #28]
  4010c2:	b103      	cbz	r3, 4010c6 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  4010c4:	4798      	blx	r3
  4010c6:	bd08      	pop	{r3, pc}

004010c8 <adc_async_channel_conversion_done>:
{
  4010c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4010cc:	4605      	mov	r5, r0
  4010ce:	4688      	mov	r8, r1
  4010d0:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  4010d2:	6a03      	ldr	r3, [r0, #32]
  4010d4:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  4010d6:	6a87      	ldr	r7, [r0, #40]	; 0x28
  4010d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4010dc:	00de      	lsls	r6, r3, #3
  4010de:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  4010e0:	f104 0a04 	add.w	sl, r4, #4
  4010e4:	b2d1      	uxtb	r1, r2
  4010e6:	4650      	mov	r0, sl
  4010e8:	4b0c      	ldr	r3, [pc, #48]	; (40111c <adc_async_channel_conversion_done+0x54>)
  4010ea:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  4010ec:	4628      	mov	r0, r5
  4010ee:	4b0c      	ldr	r3, [pc, #48]	; (401120 <adc_async_channel_conversion_done+0x58>)
  4010f0:	4798      	blx	r3
  4010f2:	2801      	cmp	r0, #1
  4010f4:	d907      	bls.n	401106 <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  4010f6:	ea4f 2119 	mov.w	r1, r9, lsr #8
  4010fa:	4650      	mov	r0, sl
  4010fc:	4b07      	ldr	r3, [pc, #28]	; (40111c <adc_async_channel_conversion_done+0x54>)
  4010fe:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  401100:	8aa3      	ldrh	r3, [r4, #20]
  401102:	3301      	adds	r3, #1
  401104:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  401106:	8aa3      	ldrh	r3, [r4, #20]
  401108:	3301      	adds	r3, #1
  40110a:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  40110c:	59bb      	ldr	r3, [r7, r6]
  40110e:	b113      	cbz	r3, 401116 <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  401110:	4641      	mov	r1, r8
  401112:	4628      	mov	r0, r5
  401114:	4798      	blx	r3
  401116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40111a:	bf00      	nop
  40111c:	004018e1 	.word	0x004018e1
  401120:	00401bf1 	.word	0x00401bf1

00401124 <adc_async_init>:
{
  401124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401128:	4616      	mov	r6, r2
  40112a:	461c      	mov	r4, r3
  40112c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  401130:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  401132:	4607      	mov	r7, r0
  401134:	4689      	mov	r9, r1
  401136:	2800      	cmp	r0, #0
  401138:	bf18      	it	ne
  40113a:	2900      	cmpne	r1, #0
  40113c:	d00b      	beq.n	401156 <adc_async_init+0x32>
  40113e:	1c13      	adds	r3, r2, #0
  401140:	bf18      	it	ne
  401142:	2301      	movne	r3, #1
  401144:	f1b8 0f00 	cmp.w	r8, #0
  401148:	d017      	beq.n	40117a <adc_async_init+0x56>
  40114a:	b1b3      	cbz	r3, 40117a <adc_async_init+0x56>
  40114c:	b10d      	cbz	r5, 401152 <adc_async_init+0x2e>
  40114e:	2001      	movs	r0, #1
  401150:	e002      	b.n	401158 <adc_async_init+0x34>
  401152:	2000      	movs	r0, #0
  401154:	e000      	b.n	401158 <adc_async_init+0x34>
  401156:	2000      	movs	r0, #0
  401158:	f8df b068 	ldr.w	fp, [pc, #104]	; 4011c4 <adc_async_init+0xa0>
  40115c:	223f      	movs	r2, #63	; 0x3f
  40115e:	4659      	mov	r1, fp
  401160:	f8df a064 	ldr.w	sl, [pc, #100]	; 4011c8 <adc_async_init+0xa4>
  401164:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  401166:	1c60      	adds	r0, r4, #1
  401168:	2240      	movs	r2, #64	; 0x40
  40116a:	4659      	mov	r1, fp
  40116c:	4580      	cmp	r8, r0
  40116e:	bfcc      	ite	gt
  401170:	2000      	movgt	r0, #0
  401172:	2001      	movle	r0, #1
  401174:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  401176:	2300      	movs	r3, #0
  401178:	e005      	b.n	401186 <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  40117a:	2000      	movs	r0, #0
  40117c:	e7ec      	b.n	401158 <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  40117e:	22ff      	movs	r2, #255	; 0xff
  401180:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  401182:	3301      	adds	r3, #1
  401184:	b2db      	uxtb	r3, r3
  401186:	42a3      	cmp	r3, r4
  401188:	d9f9      	bls.n	40117e <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  40118a:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  40118c:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  401190:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  401194:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  401196:	4649      	mov	r1, r9
  401198:	4638      	mov	r0, r7
  40119a:	4b06      	ldr	r3, [pc, #24]	; (4011b4 <adc_async_init+0x90>)
  40119c:	4798      	blx	r3
	if (init_status) {
  40119e:	4603      	mov	r3, r0
  4011a0:	b928      	cbnz	r0, 4011ae <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  4011a2:	4a05      	ldr	r2, [pc, #20]	; (4011b8 <adc_async_init+0x94>)
  4011a4:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  4011a6:	4a05      	ldr	r2, [pc, #20]	; (4011bc <adc_async_init+0x98>)
  4011a8:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  4011aa:	4a05      	ldr	r2, [pc, #20]	; (4011c0 <adc_async_init+0x9c>)
  4011ac:	607a      	str	r2, [r7, #4]
}
  4011ae:	4618      	mov	r0, r3
  4011b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4011b4:	00401b31 	.word	0x00401b31
  4011b8:	004010c9 	.word	0x004010c9
  4011bc:	004010b5 	.word	0x004010b5
  4011c0:	004010bf 	.word	0x004010bf
  4011c4:	00405f60 	.word	0x00405f60
  4011c8:	0040183d 	.word	0x0040183d

004011cc <adc_async_register_channel_buffer>:
{
  4011cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4011d0:	460e      	mov	r6, r1
  4011d2:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  4011d4:	4605      	mov	r5, r0
  4011d6:	4690      	mov	r8, r2
  4011d8:	2800      	cmp	r0, #0
  4011da:	bf18      	it	ne
  4011dc:	2a00      	cmpne	r2, #0
  4011de:	d002      	beq.n	4011e6 <adc_async_register_channel_buffer+0x1a>
  4011e0:	b9c3      	cbnz	r3, 401214 <adc_async_register_channel_buffer+0x48>
  4011e2:	2000      	movs	r0, #0
  4011e4:	e000      	b.n	4011e8 <adc_async_register_channel_buffer+0x1c>
  4011e6:	2000      	movs	r0, #0
  4011e8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401280 <adc_async_register_channel_buffer+0xb4>
  4011ec:	2266      	movs	r2, #102	; 0x66
  4011ee:	4649      	mov	r1, r9
  4011f0:	4c21      	ldr	r4, [pc, #132]	; (401278 <adc_async_register_channel_buffer+0xac>)
  4011f2:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  4011f4:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  4011f8:	2267      	movs	r2, #103	; 0x67
  4011fa:	4649      	mov	r1, r9
  4011fc:	42b0      	cmp	r0, r6
  4011fe:	bf34      	ite	cc
  401200:	2000      	movcc	r0, #0
  401202:	2001      	movcs	r0, #1
  401204:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  401206:	6a29      	ldr	r1, [r5, #32]
  401208:	5d8b      	ldrb	r3, [r1, r6]
  40120a:	2bff      	cmp	r3, #255	; 0xff
  40120c:	d12b      	bne.n	401266 <adc_async_register_channel_buffer+0x9a>
  40120e:	2400      	movs	r4, #0
  401210:	4623      	mov	r3, r4
  401212:	e003      	b.n	40121c <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  401214:	2001      	movs	r0, #1
  401216:	e7e7      	b.n	4011e8 <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  401218:	3301      	adds	r3, #1
  40121a:	b2db      	uxtb	r3, r3
  40121c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  401220:	4293      	cmp	r3, r2
  401222:	d805      	bhi.n	401230 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  401224:	5cca      	ldrb	r2, [r1, r3]
  401226:	2aff      	cmp	r2, #255	; 0xff
  401228:	d0f6      	beq.n	401218 <adc_async_register_channel_buffer+0x4c>
			index++;
  40122a:	3401      	adds	r4, #1
  40122c:	b2e4      	uxtb	r4, r4
  40122e:	e7f3      	b.n	401218 <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  401230:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  401234:	429c      	cmp	r4, r3
  401236:	d819      	bhi.n	40126c <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  401238:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  40123a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  40123e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  401242:	4448      	add	r0, r9
  401244:	463a      	mov	r2, r7
  401246:	4641      	mov	r1, r8
  401248:	3004      	adds	r0, #4
  40124a:	4b0c      	ldr	r3, [pc, #48]	; (40127c <adc_async_register_channel_buffer+0xb0>)
  40124c:	4798      	blx	r3
  40124e:	4602      	mov	r2, r0
  401250:	b978      	cbnz	r0, 401272 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  401252:	6a2b      	ldr	r3, [r5, #32]
  401254:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  401256:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401258:	4499      	add	r9, r3
  40125a:	2300      	movs	r3, #0
  40125c:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  401260:	4610      	mov	r0, r2
  401262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  401266:	f06f 020c 	mvn.w	r2, #12
  40126a:	e7f9      	b.n	401260 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  40126c:	f06f 021b 	mvn.w	r2, #27
  401270:	e7f6      	b.n	401260 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  401272:	f06f 020c 	mvn.w	r2, #12
  401276:	e7f3      	b.n	401260 <adc_async_register_channel_buffer+0x94>
  401278:	0040183d 	.word	0x0040183d
  40127c:	0040189d 	.word	0x0040189d
  401280:	00405f60 	.word	0x00405f60

00401284 <adc_async_enable_channel>:
{
  401284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401286:	460d      	mov	r5, r1
	ASSERT(descr);
  401288:	4f0b      	ldr	r7, [pc, #44]	; (4012b8 <adc_async_enable_channel+0x34>)
  40128a:	4604      	mov	r4, r0
  40128c:	2283      	movs	r2, #131	; 0x83
  40128e:	4639      	mov	r1, r7
  401290:	3000      	adds	r0, #0
  401292:	bf18      	it	ne
  401294:	2001      	movne	r0, #1
  401296:	4e09      	ldr	r6, [pc, #36]	; (4012bc <adc_async_enable_channel+0x38>)
  401298:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  40129a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  40129e:	2284      	movs	r2, #132	; 0x84
  4012a0:	4639      	mov	r1, r7
  4012a2:	42a8      	cmp	r0, r5
  4012a4:	bf34      	ite	cc
  4012a6:	2000      	movcc	r0, #0
  4012a8:	2001      	movcs	r0, #1
  4012aa:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  4012ac:	4629      	mov	r1, r5
  4012ae:	4620      	mov	r0, r4
  4012b0:	4b03      	ldr	r3, [pc, #12]	; (4012c0 <adc_async_enable_channel+0x3c>)
  4012b2:	4798      	blx	r3
}
  4012b4:	2000      	movs	r0, #0
  4012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4012b8:	00405f60 	.word	0x00405f60
  4012bc:	0040183d 	.word	0x0040183d
  4012c0:	00401be5 	.word	0x00401be5

004012c4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4012c4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4012c8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4012ca:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4012cc:	f3bf 8f5f 	dmb	sy
  4012d0:	4770      	bx	lr

004012d2 <atomic_leave_critical>:
  4012d2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4012d6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4012d8:	f383 8810 	msr	PRIMASK, r3
  4012dc:	4770      	bx	lr
	...

004012e0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4012e0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4012e2:	4b02      	ldr	r3, [pc, #8]	; (4012ec <delay_init+0xc>)
  4012e4:	6018      	str	r0, [r3, #0]
  4012e6:	4b02      	ldr	r3, [pc, #8]	; (4012f0 <delay_init+0x10>)
  4012e8:	4798      	blx	r3
  4012ea:	bd08      	pop	{r3, pc}
  4012ec:	20400318 	.word	0x20400318
  4012f0:	004023b9 	.word	0x004023b9

004012f4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4012f4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4012f6:	4b04      	ldr	r3, [pc, #16]	; (401308 <delay_ms+0x14>)
  4012f8:	681c      	ldr	r4, [r3, #0]
  4012fa:	4b04      	ldr	r3, [pc, #16]	; (40130c <delay_ms+0x18>)
  4012fc:	4798      	blx	r3
  4012fe:	4601      	mov	r1, r0
  401300:	4620      	mov	r0, r4
  401302:	4b03      	ldr	r3, [pc, #12]	; (401310 <delay_ms+0x1c>)
  401304:	4798      	blx	r3
  401306:	bd10      	pop	{r4, pc}
  401308:	20400318 	.word	0x20400318
  40130c:	00401bf5 	.word	0x00401bf5
  401310:	004023c5 	.word	0x004023c5

00401314 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  401314:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  401316:	2504      	movs	r5, #4
  401318:	2400      	movs	r4, #0

	while (upper >= lower) {
  40131a:	e007      	b.n	40132c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  40131c:	4a0d      	ldr	r2, [pc, #52]	; (401354 <process_ext_irq+0x40>)
  40131e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  401322:	b1b3      	cbz	r3, 401352 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  401324:	4798      	blx	r3
  401326:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  401328:	3a01      	subs	r2, #1
  40132a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  40132c:	42ac      	cmp	r4, r5
  40132e:	d810      	bhi.n	401352 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  401330:	192b      	adds	r3, r5, r4
  401332:	105b      	asrs	r3, r3, #1
  401334:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  401336:	2a03      	cmp	r2, #3
  401338:	d80b      	bhi.n	401352 <process_ext_irq+0x3e>
  40133a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  40133c:	4905      	ldr	r1, [pc, #20]	; (401354 <process_ext_irq+0x40>)
  40133e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  401342:	6849      	ldr	r1, [r1, #4]
  401344:	4281      	cmp	r1, r0
  401346:	d0e9      	beq.n	40131c <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  401348:	4281      	cmp	r1, r0
  40134a:	d2ed      	bcs.n	401328 <process_ext_irq+0x14>
			lower = middle + 1;
  40134c:	3201      	adds	r2, #1
  40134e:	b2d4      	uxtb	r4, r2
  401350:	e7ec      	b.n	40132c <process_ext_irq+0x18>
  401352:	bd38      	pop	{r3, r4, r5, pc}
  401354:	2040031c 	.word	0x2040031c

00401358 <ext_irq_init>:
{
  401358:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40135a:	2300      	movs	r3, #0
  40135c:	e00a      	b.n	401374 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  40135e:	4a08      	ldr	r2, [pc, #32]	; (401380 <ext_irq_init+0x28>)
  401360:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  401364:	f04f 30ff 	mov.w	r0, #4294967295
  401368:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  40136a:	2100      	movs	r1, #0
  40136c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401370:	3301      	adds	r3, #1
  401372:	b29b      	uxth	r3, r3
  401374:	2b03      	cmp	r3, #3
  401376:	d9f2      	bls.n	40135e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  401378:	4802      	ldr	r0, [pc, #8]	; (401384 <ext_irq_init+0x2c>)
  40137a:	4b03      	ldr	r3, [pc, #12]	; (401388 <ext_irq_init+0x30>)
  40137c:	4798      	blx	r3
}
  40137e:	bd08      	pop	{r3, pc}
  401380:	2040031c 	.word	0x2040031c
  401384:	00401315 	.word	0x00401315
  401388:	00401f65 	.word	0x00401f65

0040138c <ext_irq_register>:
{
  40138c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40138e:	b083      	sub	sp, #12
  401390:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  401392:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  401394:	2b03      	cmp	r3, #3
  401396:	d80e      	bhi.n	4013b6 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  401398:	4618      	mov	r0, r3
  40139a:	4a2e      	ldr	r2, [pc, #184]	; (401454 <ext_irq_register+0xc8>)
  40139c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4013a0:	6852      	ldr	r2, [r2, #4]
  4013a2:	42aa      	cmp	r2, r5
  4013a4:	d002      	beq.n	4013ac <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  4013a6:	3301      	adds	r3, #1
  4013a8:	b2db      	uxtb	r3, r3
  4013aa:	e7f3      	b.n	401394 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  4013ac:	4b29      	ldr	r3, [pc, #164]	; (401454 <ext_irq_register+0xc8>)
  4013ae:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  4013b2:	2701      	movs	r7, #1
			break;
  4013b4:	e000      	b.n	4013b8 <ext_irq_register+0x2c>
	bool    found = false;
  4013b6:	2700      	movs	r7, #0
	if (NULL == cb) {
  4013b8:	b159      	cbz	r1, 4013d2 <ext_irq_register+0x46>
	if (!found) {
  4013ba:	2f00      	cmp	r7, #0
  4013bc:	d13d      	bne.n	40143a <ext_irq_register+0xae>
  4013be:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4013c0:	2e03      	cmp	r6, #3
  4013c2:	d813      	bhi.n	4013ec <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  4013c4:	4b23      	ldr	r3, [pc, #140]	; (401454 <ext_irq_register+0xc8>)
  4013c6:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  4013ca:	b143      	cbz	r3, 4013de <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4013cc:	3601      	adds	r6, #1
  4013ce:	b2f6      	uxtb	r6, r6
  4013d0:	e7f6      	b.n	4013c0 <ext_irq_register+0x34>
		if (!found) {
  4013d2:	2f00      	cmp	r7, #0
  4013d4:	d038      	beq.n	401448 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  4013d6:	4628      	mov	r0, r5
  4013d8:	4b1f      	ldr	r3, [pc, #124]	; (401458 <ext_irq_register+0xcc>)
  4013da:	4798      	blx	r3
  4013dc:	e032      	b.n	401444 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  4013de:	4b1d      	ldr	r3, [pc, #116]	; (401454 <ext_irq_register+0xc8>)
  4013e0:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  4013e4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4013e8:	605d      	str	r5, [r3, #4]
				found           = true;
  4013ea:	2701      	movs	r7, #1
  4013ec:	2300      	movs	r3, #0
  4013ee:	e001      	b.n	4013f4 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  4013f0:	3301      	adds	r3, #1
  4013f2:	b2db      	uxtb	r3, r3
  4013f4:	2b03      	cmp	r3, #3
  4013f6:	bf98      	it	ls
  4013f8:	2e03      	cmpls	r6, #3
  4013fa:	d81e      	bhi.n	40143a <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  4013fc:	46b6      	mov	lr, r6
  4013fe:	4a15      	ldr	r2, [pc, #84]	; (401454 <ext_irq_register+0xc8>)
  401400:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  401404:	6848      	ldr	r0, [r1, #4]
  401406:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40140a:	6852      	ldr	r2, [r2, #4]
  40140c:	4290      	cmp	r0, r2
  40140e:	d2ef      	bcs.n	4013f0 <ext_irq_register+0x64>
  401410:	f1b2 3fff 	cmp.w	r2, #4294967295
  401414:	d0ec      	beq.n	4013f0 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  401416:	4c0f      	ldr	r4, [pc, #60]	; (401454 <ext_irq_register+0xc8>)
  401418:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  40141c:	e892 0003 	ldmia.w	r2, {r0, r1}
  401420:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  401424:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  401428:	e894 0003 	ldmia.w	r4, {r0, r1}
  40142c:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  401430:	e89d 0003 	ldmia.w	sp, {r0, r1}
  401434:	e884 0003 	stmia.w	r4, {r0, r1}
  401438:	e7da      	b.n	4013f0 <ext_irq_register+0x64>
	if (!found) {
  40143a:	b147      	cbz	r7, 40144e <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  40143c:	2101      	movs	r1, #1
  40143e:	4628      	mov	r0, r5
  401440:	4b05      	ldr	r3, [pc, #20]	; (401458 <ext_irq_register+0xcc>)
  401442:	4798      	blx	r3
}
  401444:	b003      	add	sp, #12
  401446:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  401448:	f06f 000c 	mvn.w	r0, #12
  40144c:	e7fa      	b.n	401444 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  40144e:	f06f 000c 	mvn.w	r0, #12
  401452:	e7f7      	b.n	401444 <ext_irq_register+0xb8>
  401454:	2040031c 	.word	0x2040031c
  401458:	00401f95 	.word	0x00401f95

0040145c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  40145c:	b570      	push	{r4, r5, r6, lr}
  40145e:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  401460:	4604      	mov	r4, r0
  401462:	460d      	mov	r5, r1
  401464:	2800      	cmp	r0, #0
  401466:	bf18      	it	ne
  401468:	2900      	cmpne	r1, #0
  40146a:	bf14      	ite	ne
  40146c:	2001      	movne	r0, #1
  40146e:	2000      	moveq	r0, #0
  401470:	2234      	movs	r2, #52	; 0x34
  401472:	4904      	ldr	r1, [pc, #16]	; (401484 <io_write+0x28>)
  401474:	4b04      	ldr	r3, [pc, #16]	; (401488 <io_write+0x2c>)
  401476:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  401478:	6823      	ldr	r3, [r4, #0]
  40147a:	4632      	mov	r2, r6
  40147c:	4629      	mov	r1, r5
  40147e:	4620      	mov	r0, r4
  401480:	4798      	blx	r3
}
  401482:	bd70      	pop	{r4, r5, r6, pc}
  401484:	00405f7c 	.word	0x00405f7c
  401488:	0040183d 	.word	0x0040183d

0040148c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  40148c:	b570      	push	{r4, r5, r6, lr}
  40148e:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  401490:	4604      	mov	r4, r0
  401492:	460d      	mov	r5, r1
  401494:	2800      	cmp	r0, #0
  401496:	bf18      	it	ne
  401498:	2900      	cmpne	r1, #0
  40149a:	bf14      	ite	ne
  40149c:	2001      	movne	r0, #1
  40149e:	2000      	moveq	r0, #0
  4014a0:	223d      	movs	r2, #61	; 0x3d
  4014a2:	4904      	ldr	r1, [pc, #16]	; (4014b4 <io_read+0x28>)
  4014a4:	4b04      	ldr	r3, [pc, #16]	; (4014b8 <io_read+0x2c>)
  4014a6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  4014a8:	6863      	ldr	r3, [r4, #4]
  4014aa:	4632      	mov	r2, r6
  4014ac:	4629      	mov	r1, r5
  4014ae:	4620      	mov	r0, r4
  4014b0:	4798      	blx	r3
}
  4014b2:	bd70      	pop	{r4, r5, r6, pc}
  4014b4:	00405f7c 	.word	0x00405f7c
  4014b8:	0040183d 	.word	0x0040183d

004014bc <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  4014bc:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  4014be:	6943      	ldr	r3, [r0, #20]
  4014c0:	b103      	cbz	r3, 4014c4 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  4014c2:	4798      	blx	r3
  4014c4:	bd08      	pop	{r3, pc}

004014c6 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  4014c6:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  4014c8:	6983      	ldr	r3, [r0, #24]
  4014ca:	b103      	cbz	r3, 4014ce <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  4014cc:	4798      	blx	r3
  4014ce:	bd08      	pop	{r3, pc}

004014d0 <pwm_init>:
{
  4014d0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4014d2:	4604      	mov	r4, r0
  4014d4:	460d      	mov	r5, r1
  4014d6:	2800      	cmp	r0, #0
  4014d8:	bf18      	it	ne
  4014da:	2900      	cmpne	r1, #0
  4014dc:	bf14      	ite	ne
  4014de:	2001      	movne	r0, #1
  4014e0:	2000      	moveq	r0, #0
  4014e2:	2233      	movs	r2, #51	; 0x33
  4014e4:	4906      	ldr	r1, [pc, #24]	; (401500 <pwm_init+0x30>)
  4014e6:	4b07      	ldr	r3, [pc, #28]	; (401504 <pwm_init+0x34>)
  4014e8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  4014ea:	4629      	mov	r1, r5
  4014ec:	4620      	mov	r0, r4
  4014ee:	4b06      	ldr	r3, [pc, #24]	; (401508 <pwm_init+0x38>)
  4014f0:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  4014f2:	4b06      	ldr	r3, [pc, #24]	; (40150c <pwm_init+0x3c>)
  4014f4:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  4014f6:	4b06      	ldr	r3, [pc, #24]	; (401510 <pwm_init+0x40>)
  4014f8:	6063      	str	r3, [r4, #4]
}
  4014fa:	2000      	movs	r0, #0
  4014fc:	bd38      	pop	{r3, r4, r5, pc}
  4014fe:	bf00      	nop
  401500:	00405f90 	.word	0x00405f90
  401504:	0040183d 	.word	0x0040183d
  401508:	00402135 	.word	0x00402135
  40150c:	004014bd 	.word	0x004014bd
  401510:	004014c7 	.word	0x004014c7

00401514 <pwm_enable>:
{
  401514:	b510      	push	{r4, lr}
	ASSERT(descr);
  401516:	4604      	mov	r4, r0
  401518:	224a      	movs	r2, #74	; 0x4a
  40151a:	4909      	ldr	r1, [pc, #36]	; (401540 <pwm_enable+0x2c>)
  40151c:	3000      	adds	r0, #0
  40151e:	bf18      	it	ne
  401520:	2001      	movne	r0, #1
  401522:	4b08      	ldr	r3, [pc, #32]	; (401544 <pwm_enable+0x30>)
  401524:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  401526:	4620      	mov	r0, r4
  401528:	4b07      	ldr	r3, [pc, #28]	; (401548 <pwm_enable+0x34>)
  40152a:	4798      	blx	r3
  40152c:	b920      	cbnz	r0, 401538 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  40152e:	4620      	mov	r0, r4
  401530:	4b06      	ldr	r3, [pc, #24]	; (40154c <pwm_enable+0x38>)
  401532:	4798      	blx	r3
	return ERR_NONE;
  401534:	2000      	movs	r0, #0
  401536:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401538:	f06f 0010 	mvn.w	r0, #16
}
  40153c:	bd10      	pop	{r4, pc}
  40153e:	bf00      	nop
  401540:	00405f90 	.word	0x00405f90
  401544:	0040183d 	.word	0x0040183d
  401548:	00402311 	.word	0x00402311
  40154c:	0040226d 	.word	0x0040226d

00401550 <pwm_register_callback>:
{
  401550:	b570      	push	{r4, r5, r6, lr}
	switch (type) {
  401552:	460d      	mov	r5, r1
  401554:	b121      	cbz	r1, 401560 <pwm_register_callback+0x10>
  401556:	2901      	cmp	r1, #1
  401558:	d015      	beq.n	401586 <pwm_register_callback+0x36>
		return ERR_INVALID_ARG;
  40155a:	f06f 000c 	mvn.w	r0, #12
}
  40155e:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.period = cb;
  401560:	6142      	str	r2, [r0, #20]
  401562:	4616      	mov	r6, r2
  401564:	4604      	mov	r4, r0
	ASSERT(descr);
  401566:	2272      	movs	r2, #114	; 0x72
  401568:	4908      	ldr	r1, [pc, #32]	; (40158c <pwm_register_callback+0x3c>)
  40156a:	3000      	adds	r0, #0
  40156c:	bf18      	it	ne
  40156e:	2001      	movne	r0, #1
  401570:	4b07      	ldr	r3, [pc, #28]	; (401590 <pwm_register_callback+0x40>)
  401572:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
  401574:	1c32      	adds	r2, r6, #0
  401576:	bf18      	it	ne
  401578:	2201      	movne	r2, #1
  40157a:	4629      	mov	r1, r5
  40157c:	4620      	mov	r0, r4
  40157e:	4b05      	ldr	r3, [pc, #20]	; (401594 <pwm_register_callback+0x44>)
  401580:	4798      	blx	r3
	return ERR_NONE;
  401582:	2000      	movs	r0, #0
  401584:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
  401586:	6182      	str	r2, [r0, #24]
		break;
  401588:	e7eb      	b.n	401562 <pwm_register_callback+0x12>
  40158a:	bf00      	nop
  40158c:	00405f90 	.word	0x00405f90
  401590:	0040183d 	.word	0x0040183d
  401594:	00402341 	.word	0x00402341

00401598 <pwm_set_parameters>:
{
  401598:	b570      	push	{r4, r5, r6, lr}
  40159a:	460d      	mov	r5, r1
  40159c:	4616      	mov	r6, r2
	ASSERT(descr);
  40159e:	4604      	mov	r4, r0
  4015a0:	227c      	movs	r2, #124	; 0x7c
  4015a2:	4906      	ldr	r1, [pc, #24]	; (4015bc <pwm_set_parameters+0x24>)
  4015a4:	3000      	adds	r0, #0
  4015a6:	bf18      	it	ne
  4015a8:	2001      	movne	r0, #1
  4015aa:	4b05      	ldr	r3, [pc, #20]	; (4015c0 <pwm_set_parameters+0x28>)
  4015ac:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  4015ae:	4632      	mov	r2, r6
  4015b0:	4629      	mov	r1, r5
  4015b2:	4620      	mov	r0, r4
  4015b4:	4b03      	ldr	r3, [pc, #12]	; (4015c4 <pwm_set_parameters+0x2c>)
  4015b6:	4798      	blx	r3
}
  4015b8:	2000      	movs	r0, #0
  4015ba:	bd70      	pop	{r4, r5, r6, pc}
  4015bc:	00405f90 	.word	0x00405f90
  4015c0:	0040183d 	.word	0x0040183d
  4015c4:	004022b1 	.word	0x004022b1

004015c8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  4015c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  4015ca:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  4015cc:	b117      	cbz	r7, 4015d4 <timer_add_timer_task+0xc>
  4015ce:	463c      	mov	r4, r7
  4015d0:	2600      	movs	r6, #0
  4015d2:	e00b      	b.n	4015ec <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  4015d4:	4b0e      	ldr	r3, [pc, #56]	; (401610 <timer_add_timer_task+0x48>)
  4015d6:	4798      	blx	r3
		return;
  4015d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  4015da:	68a5      	ldr	r5, [r4, #8]
  4015dc:	442b      	add	r3, r5
  4015de:	1a9b      	subs	r3, r3, r2
  4015e0:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  4015e2:	688d      	ldr	r5, [r1, #8]
  4015e4:	42ab      	cmp	r3, r5
  4015e6:	d209      	bcs.n	4015fc <timer_add_timer_task+0x34>
			break;
		prev = it;
  4015e8:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  4015ea:	6824      	ldr	r4, [r4, #0]
  4015ec:	b134      	cbz	r4, 4015fc <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  4015ee:	6863      	ldr	r3, [r4, #4]
  4015f0:	4293      	cmp	r3, r2
  4015f2:	d8f2      	bhi.n	4015da <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  4015f4:	68a5      	ldr	r5, [r4, #8]
  4015f6:	1a9b      	subs	r3, r3, r2
  4015f8:	442b      	add	r3, r5
  4015fa:	e7f2      	b.n	4015e2 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  4015fc:	42bc      	cmp	r4, r7
  4015fe:	d003      	beq.n	401608 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  401600:	4630      	mov	r0, r6
  401602:	4b04      	ldr	r3, [pc, #16]	; (401614 <timer_add_timer_task+0x4c>)
  401604:	4798      	blx	r3
  401606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  401608:	4b01      	ldr	r3, [pc, #4]	; (401610 <timer_add_timer_task+0x48>)
  40160a:	4798      	blx	r3
  40160c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40160e:	bf00      	nop
  401610:	00401859 	.word	0x00401859
  401614:	00401885 	.word	0x00401885

00401618 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  401618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40161a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  40161c:	6906      	ldr	r6, [r0, #16]
  40161e:	3601      	adds	r6, #1
  401620:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  401622:	7e03      	ldrb	r3, [r0, #24]
  401624:	f013 0f01 	tst.w	r3, #1
  401628:	d105      	bne.n	401636 <timer_process_counted+0x1e>
  40162a:	7e03      	ldrb	r3, [r0, #24]
  40162c:	f013 0f02 	tst.w	r3, #2
  401630:	d101      	bne.n	401636 <timer_process_counted+0x1e>
  401632:	4605      	mov	r5, r0
  401634:	e009      	b.n	40164a <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  401636:	7e03      	ldrb	r3, [r0, #24]
  401638:	f043 0302 	orr.w	r3, r3, #2
  40163c:	7603      	strb	r3, [r0, #24]
		return;
  40163e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401640:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  401642:	68e3      	ldr	r3, [r4, #12]
  401644:	4620      	mov	r0, r4
  401646:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  401648:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  40164a:	b19c      	cbz	r4, 401674 <timer_process_counted+0x5c>
  40164c:	6863      	ldr	r3, [r4, #4]
  40164e:	1af3      	subs	r3, r6, r3
  401650:	68a2      	ldr	r2, [r4, #8]
  401652:	4293      	cmp	r3, r2
  401654:	d30e      	bcc.n	401674 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  401656:	f105 0714 	add.w	r7, r5, #20
  40165a:	4638      	mov	r0, r7
  40165c:	4b06      	ldr	r3, [pc, #24]	; (401678 <timer_process_counted+0x60>)
  40165e:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  401660:	7c23      	ldrb	r3, [r4, #16]
  401662:	2b01      	cmp	r3, #1
  401664:	d1ec      	bne.n	401640 <timer_process_counted+0x28>
			tmp->time_label = time;
  401666:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  401668:	4632      	mov	r2, r6
  40166a:	4621      	mov	r1, r4
  40166c:	4638      	mov	r0, r7
  40166e:	4b03      	ldr	r3, [pc, #12]	; (40167c <timer_process_counted+0x64>)
  401670:	4798      	blx	r3
  401672:	e7e5      	b.n	401640 <timer_process_counted+0x28>
  401674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401676:	bf00      	nop
  401678:	0040188d 	.word	0x0040188d
  40167c:	004015c9 	.word	0x004015c9

00401680 <timer_init>:
{
  401680:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401682:	4604      	mov	r4, r0
  401684:	460d      	mov	r5, r1
  401686:	2800      	cmp	r0, #0
  401688:	bf18      	it	ne
  40168a:	2900      	cmpne	r1, #0
  40168c:	bf14      	ite	ne
  40168e:	2001      	movne	r0, #1
  401690:	2000      	moveq	r0, #0
  401692:	223b      	movs	r2, #59	; 0x3b
  401694:	4905      	ldr	r1, [pc, #20]	; (4016ac <timer_init+0x2c>)
  401696:	4b06      	ldr	r3, [pc, #24]	; (4016b0 <timer_init+0x30>)
  401698:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  40169a:	4629      	mov	r1, r5
  40169c:	4620      	mov	r0, r4
  40169e:	4b05      	ldr	r3, [pc, #20]	; (4016b4 <timer_init+0x34>)
  4016a0:	4798      	blx	r3
	descr->time                           = 0;
  4016a2:	2000      	movs	r0, #0
  4016a4:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  4016a6:	4b04      	ldr	r3, [pc, #16]	; (4016b8 <timer_init+0x38>)
  4016a8:	6023      	str	r3, [r4, #0]
}
  4016aa:	bd38      	pop	{r3, r4, r5, pc}
  4016ac:	00405fa8 	.word	0x00405fa8
  4016b0:	0040183d 	.word	0x0040183d
  4016b4:	0040247d 	.word	0x0040247d
  4016b8:	00401619 	.word	0x00401619

004016bc <timer_start>:
{
  4016bc:	b510      	push	{r4, lr}
	ASSERT(descr);
  4016be:	4604      	mov	r4, r0
  4016c0:	2253      	movs	r2, #83	; 0x53
  4016c2:	4909      	ldr	r1, [pc, #36]	; (4016e8 <timer_start+0x2c>)
  4016c4:	3000      	adds	r0, #0
  4016c6:	bf18      	it	ne
  4016c8:	2001      	movne	r0, #1
  4016ca:	4b08      	ldr	r3, [pc, #32]	; (4016ec <timer_start+0x30>)
  4016cc:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  4016ce:	4620      	mov	r0, r4
  4016d0:	4b07      	ldr	r3, [pc, #28]	; (4016f0 <timer_start+0x34>)
  4016d2:	4798      	blx	r3
  4016d4:	b920      	cbnz	r0, 4016e0 <timer_start+0x24>
	_timer_start(&descr->device);
  4016d6:	4620      	mov	r0, r4
  4016d8:	4b06      	ldr	r3, [pc, #24]	; (4016f4 <timer_start+0x38>)
  4016da:	4798      	blx	r3
	return ERR_NONE;
  4016dc:	2000      	movs	r0, #0
  4016de:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4016e0:	f06f 0010 	mvn.w	r0, #16
}
  4016e4:	bd10      	pop	{r4, pc}
  4016e6:	bf00      	nop
  4016e8:	00405fa8 	.word	0x00405fa8
  4016ec:	0040183d 	.word	0x0040183d
  4016f0:	00402565 	.word	0x00402565
  4016f4:	00402559 	.word	0x00402559

004016f8 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4016f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4016fa:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4016fc:	4605      	mov	r5, r0
  4016fe:	460f      	mov	r7, r1
  401700:	2800      	cmp	r0, #0
  401702:	bf18      	it	ne
  401704:	2900      	cmpne	r1, #0
  401706:	d002      	beq.n	40170e <usart_sync_write+0x16>
  401708:	bb0a      	cbnz	r2, 40174e <usart_sync_write+0x56>
  40170a:	2000      	movs	r0, #0
  40170c:	e000      	b.n	401710 <usart_sync_write+0x18>
  40170e:	2000      	movs	r0, #0
  401710:	22f1      	movs	r2, #241	; 0xf1
  401712:	4910      	ldr	r1, [pc, #64]	; (401754 <usart_sync_write+0x5c>)
  401714:	4b10      	ldr	r3, [pc, #64]	; (401758 <usart_sync_write+0x60>)
  401716:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  401718:	f105 0408 	add.w	r4, r5, #8
  40171c:	4620      	mov	r0, r4
  40171e:	4b0f      	ldr	r3, [pc, #60]	; (40175c <usart_sync_write+0x64>)
  401720:	4798      	blx	r3
  401722:	2800      	cmp	r0, #0
  401724:	d0f8      	beq.n	401718 <usart_sync_write+0x20>
  401726:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  401728:	5d79      	ldrb	r1, [r7, r5]
  40172a:	4620      	mov	r0, r4
  40172c:	4b0c      	ldr	r3, [pc, #48]	; (401760 <usart_sync_write+0x68>)
  40172e:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  401730:	4620      	mov	r0, r4
  401732:	4b0a      	ldr	r3, [pc, #40]	; (40175c <usart_sync_write+0x64>)
  401734:	4798      	blx	r3
  401736:	2800      	cmp	r0, #0
  401738:	d0fa      	beq.n	401730 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  40173a:	3501      	adds	r5, #1
  40173c:	42b5      	cmp	r5, r6
  40173e:	d3f3      	bcc.n	401728 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  401740:	4620      	mov	r0, r4
  401742:	4b08      	ldr	r3, [pc, #32]	; (401764 <usart_sync_write+0x6c>)
  401744:	4798      	blx	r3
  401746:	2800      	cmp	r0, #0
  401748:	d0fa      	beq.n	401740 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  40174a:	4628      	mov	r0, r5
  40174c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  40174e:	2001      	movs	r0, #1
  401750:	e7de      	b.n	401710 <usart_sync_write+0x18>
  401752:	bf00      	nop
  401754:	00405fc0 	.word	0x00405fc0
  401758:	0040183d 	.word	0x0040183d
  40175c:	00402741 	.word	0x00402741
  401760:	004026f9 	.word	0x004026f9
  401764:	00402769 	.word	0x00402769

00401768 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40176c:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  40176e:	4605      	mov	r5, r0
  401770:	4688      	mov	r8, r1
  401772:	2800      	cmp	r0, #0
  401774:	bf18      	it	ne
  401776:	2900      	cmpne	r1, #0
  401778:	d002      	beq.n	401780 <usart_sync_read+0x18>
  40177a:	b9d2      	cbnz	r2, 4017b2 <usart_sync_read+0x4a>
  40177c:	2000      	movs	r0, #0
  40177e:	e000      	b.n	401782 <usart_sync_read+0x1a>
  401780:	2000      	movs	r0, #0
  401782:	f44f 7286 	mov.w	r2, #268	; 0x10c
  401786:	490c      	ldr	r1, [pc, #48]	; (4017b8 <usart_sync_read+0x50>)
  401788:	4b0c      	ldr	r3, [pc, #48]	; (4017bc <usart_sync_read+0x54>)
  40178a:	4798      	blx	r3
	uint32_t                      offset = 0;
  40178c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  40178e:	f105 0408 	add.w	r4, r5, #8
  401792:	4620      	mov	r0, r4
  401794:	4b0a      	ldr	r3, [pc, #40]	; (4017c0 <usart_sync_read+0x58>)
  401796:	4798      	blx	r3
  401798:	2800      	cmp	r0, #0
  40179a:	d0f8      	beq.n	40178e <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  40179c:	4620      	mov	r0, r4
  40179e:	4b09      	ldr	r3, [pc, #36]	; (4017c4 <usart_sync_read+0x5c>)
  4017a0:	4798      	blx	r3
  4017a2:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  4017a6:	3601      	adds	r6, #1
  4017a8:	42be      	cmp	r6, r7
  4017aa:	d3f0      	bcc.n	40178e <usart_sync_read+0x26>

	return (int32_t)offset;
}
  4017ac:	4630      	mov	r0, r6
  4017ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  4017b2:	2001      	movs	r0, #1
  4017b4:	e7e5      	b.n	401782 <usart_sync_read+0x1a>
  4017b6:	bf00      	nop
  4017b8:	00405fc0 	.word	0x00405fc0
  4017bc:	0040183d 	.word	0x0040183d
  4017c0:	00402791 	.word	0x00402791
  4017c4:	0040271d 	.word	0x0040271d

004017c8 <usart_sync_init>:
{
  4017c8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4017ca:	4604      	mov	r4, r0
  4017cc:	460d      	mov	r5, r1
  4017ce:	2800      	cmp	r0, #0
  4017d0:	bf18      	it	ne
  4017d2:	2900      	cmpne	r1, #0
  4017d4:	bf14      	ite	ne
  4017d6:	2001      	movne	r0, #1
  4017d8:	2000      	moveq	r0, #0
  4017da:	2234      	movs	r2, #52	; 0x34
  4017dc:	4907      	ldr	r1, [pc, #28]	; (4017fc <usart_sync_init+0x34>)
  4017de:	4b08      	ldr	r3, [pc, #32]	; (401800 <usart_sync_init+0x38>)
  4017e0:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  4017e2:	4629      	mov	r1, r5
  4017e4:	f104 0008 	add.w	r0, r4, #8
  4017e8:	4b06      	ldr	r3, [pc, #24]	; (401804 <usart_sync_init+0x3c>)
  4017ea:	4798      	blx	r3
	if (init_status) {
  4017ec:	4603      	mov	r3, r0
  4017ee:	b918      	cbnz	r0, 4017f8 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  4017f0:	4a05      	ldr	r2, [pc, #20]	; (401808 <usart_sync_init+0x40>)
  4017f2:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  4017f4:	4a05      	ldr	r2, [pc, #20]	; (40180c <usart_sync_init+0x44>)
  4017f6:	6022      	str	r2, [r4, #0]
}
  4017f8:	4618      	mov	r0, r3
  4017fa:	bd38      	pop	{r3, r4, r5, pc}
  4017fc:	00405fc0 	.word	0x00405fc0
  401800:	0040183d 	.word	0x0040183d
  401804:	0040268d 	.word	0x0040268d
  401808:	00401769 	.word	0x00401769
  40180c:	004016f9 	.word	0x004016f9

00401810 <usart_sync_enable>:
{
  401810:	b510      	push	{r4, lr}
	ASSERT(descr);
  401812:	4604      	mov	r4, r0
  401814:	2253      	movs	r2, #83	; 0x53
  401816:	4906      	ldr	r1, [pc, #24]	; (401830 <usart_sync_enable+0x20>)
  401818:	3000      	adds	r0, #0
  40181a:	bf18      	it	ne
  40181c:	2001      	movne	r0, #1
  40181e:	4b05      	ldr	r3, [pc, #20]	; (401834 <usart_sync_enable+0x24>)
  401820:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  401822:	f104 0008 	add.w	r0, r4, #8
  401826:	4b04      	ldr	r3, [pc, #16]	; (401838 <usart_sync_enable+0x28>)
  401828:	4798      	blx	r3
}
  40182a:	2000      	movs	r0, #0
  40182c:	bd10      	pop	{r4, pc}
  40182e:	bf00      	nop
  401830:	00405fc0 	.word	0x00405fc0
  401834:	0040183d 	.word	0x0040183d
  401838:	004026c5 	.word	0x004026c5

0040183c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  40183c:	b900      	cbnz	r0, 401840 <assert+0x4>
		__asm("BKPT #0");
  40183e:	be00      	bkpt	0x0000
  401840:	4770      	bx	lr

00401842 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  401842:	6803      	ldr	r3, [r0, #0]
  401844:	b11b      	cbz	r3, 40184e <is_list_element+0xc>
		if (it == element) {
  401846:	428b      	cmp	r3, r1
  401848:	d003      	beq.n	401852 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  40184a:	681b      	ldr	r3, [r3, #0]
  40184c:	e7fa      	b.n	401844 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  40184e:	2000      	movs	r0, #0
  401850:	4770      	bx	lr
			return true;
  401852:	2001      	movs	r0, #1
}
  401854:	4770      	bx	lr
	...

00401858 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  401858:	b538      	push	{r3, r4, r5, lr}
  40185a:	4604      	mov	r4, r0
  40185c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  40185e:	4b06      	ldr	r3, [pc, #24]	; (401878 <list_insert_as_head+0x20>)
  401860:	4798      	blx	r3
  401862:	f080 0001 	eor.w	r0, r0, #1
  401866:	2239      	movs	r2, #57	; 0x39
  401868:	4904      	ldr	r1, [pc, #16]	; (40187c <list_insert_as_head+0x24>)
  40186a:	b2c0      	uxtb	r0, r0
  40186c:	4b04      	ldr	r3, [pc, #16]	; (401880 <list_insert_as_head+0x28>)
  40186e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  401870:	6823      	ldr	r3, [r4, #0]
  401872:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  401874:	6025      	str	r5, [r4, #0]
  401876:	bd38      	pop	{r3, r4, r5, pc}
  401878:	00401843 	.word	0x00401843
  40187c:	00405fdc 	.word	0x00405fdc
  401880:	0040183d 	.word	0x0040183d

00401884 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  401884:	6803      	ldr	r3, [r0, #0]
  401886:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  401888:	6001      	str	r1, [r0, #0]
  40188a:	4770      	bx	lr

0040188c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  40188c:	6803      	ldr	r3, [r0, #0]
  40188e:	b11b      	cbz	r3, 401898 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  401890:	681a      	ldr	r2, [r3, #0]
  401892:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  401894:	4618      	mov	r0, r3
  401896:	4770      	bx	lr
	}

	return NULL;
  401898:	2000      	movs	r0, #0
}
  40189a:	4770      	bx	lr

0040189c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  40189c:	b570      	push	{r4, r5, r6, lr}
  40189e:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  4018a0:	4604      	mov	r4, r0
  4018a2:	460e      	mov	r6, r1
  4018a4:	2800      	cmp	r0, #0
  4018a6:	bf18      	it	ne
  4018a8:	2900      	cmpne	r1, #0
  4018aa:	d002      	beq.n	4018b2 <ringbuffer_init+0x16>
  4018ac:	b97a      	cbnz	r2, 4018ce <ringbuffer_init+0x32>
  4018ae:	2000      	movs	r0, #0
  4018b0:	e000      	b.n	4018b4 <ringbuffer_init+0x18>
  4018b2:	2000      	movs	r0, #0
  4018b4:	2228      	movs	r2, #40	; 0x28
  4018b6:	4908      	ldr	r1, [pc, #32]	; (4018d8 <ringbuffer_init+0x3c>)
  4018b8:	4b08      	ldr	r3, [pc, #32]	; (4018dc <ringbuffer_init+0x40>)
  4018ba:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  4018bc:	1e6b      	subs	r3, r5, #1
  4018be:	421d      	tst	r5, r3
  4018c0:	d107      	bne.n	4018d2 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  4018c2:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  4018c4:	2000      	movs	r0, #0
  4018c6:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  4018c8:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  4018ca:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  4018cc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  4018ce:	2001      	movs	r0, #1
  4018d0:	e7f0      	b.n	4018b4 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  4018d2:	f06f 000c 	mvn.w	r0, #12
}
  4018d6:	bd70      	pop	{r4, r5, r6, pc}
  4018d8:	00405ffc 	.word	0x00405ffc
  4018dc:	0040183d 	.word	0x0040183d

004018e0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  4018e0:	b538      	push	{r3, r4, r5, lr}
  4018e2:	460d      	mov	r5, r1
	ASSERT(rb);
  4018e4:	4604      	mov	r4, r0
  4018e6:	2251      	movs	r2, #81	; 0x51
  4018e8:	490b      	ldr	r1, [pc, #44]	; (401918 <ringbuffer_put+0x38>)
  4018ea:	3000      	adds	r0, #0
  4018ec:	bf18      	it	ne
  4018ee:	2001      	movne	r0, #1
  4018f0:	4b0a      	ldr	r3, [pc, #40]	; (40191c <ringbuffer_put+0x3c>)
  4018f2:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  4018f4:	6822      	ldr	r2, [r4, #0]
  4018f6:	68e3      	ldr	r3, [r4, #12]
  4018f8:	6861      	ldr	r1, [r4, #4]
  4018fa:	400b      	ands	r3, r1
  4018fc:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  4018fe:	68e3      	ldr	r3, [r4, #12]
  401900:	68a2      	ldr	r2, [r4, #8]
  401902:	1a9a      	subs	r2, r3, r2
  401904:	6861      	ldr	r1, [r4, #4]
  401906:	428a      	cmp	r2, r1
  401908:	d901      	bls.n	40190e <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  40190a:	1a59      	subs	r1, r3, r1
  40190c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  40190e:	3301      	adds	r3, #1
  401910:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  401912:	2000      	movs	r0, #0
  401914:	bd38      	pop	{r3, r4, r5, pc}
  401916:	bf00      	nop
  401918:	00405ffc 	.word	0x00405ffc
  40191c:	0040183d 	.word	0x0040183d

00401920 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  401920:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  401922:	4a06      	ldr	r2, [pc, #24]	; (40193c <_sbrk+0x1c>)
  401924:	6812      	ldr	r2, [r2, #0]
  401926:	b122      	cbz	r2, 401932 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401928:	4a04      	ldr	r2, [pc, #16]	; (40193c <_sbrk+0x1c>)
  40192a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  40192c:	4403      	add	r3, r0
  40192e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  401930:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401932:	4903      	ldr	r1, [pc, #12]	; (401940 <_sbrk+0x20>)
  401934:	4a01      	ldr	r2, [pc, #4]	; (40193c <_sbrk+0x1c>)
  401936:	6011      	str	r1, [r2, #0]
  401938:	e7f6      	b.n	401928 <_sbrk+0x8>
  40193a:	bf00      	nop
  40193c:	2040033c 	.word	0x2040033c
  401940:	20400d38 	.word	0x20400d38

00401944 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  401944:	f04f 30ff 	mov.w	r0, #4294967295
  401948:	4770      	bx	lr

0040194a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  40194a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40194e:	604b      	str	r3, [r1, #4]

	return 0;
}
  401950:	2000      	movs	r0, #0
  401952:	4770      	bx	lr

00401954 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  401954:	2001      	movs	r0, #1
  401956:	4770      	bx	lr

00401958 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  401958:	2000      	movs	r0, #0
  40195a:	4770      	bx	lr

0040195c <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  40195c:	6943      	ldr	r3, [r0, #20]
  40195e:	4a07      	ldr	r2, [pc, #28]	; (40197c <_afec_get_irq_num+0x20>)
  401960:	4293      	cmp	r3, r2
  401962:	d005      	beq.n	401970 <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  401964:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  401968:	4293      	cmp	r3, r2
  40196a:	d103      	bne.n	401974 <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  40196c:	2028      	movs	r0, #40	; 0x28
  40196e:	4770      	bx	lr
		return AFEC0_IRQn;
  401970:	201d      	movs	r0, #29
  401972:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  401974:	f04f 30ff 	mov.w	r0, #4294967295
}
  401978:	4770      	bx	lr
  40197a:	bf00      	nop
  40197c:	4003c000 	.word	0x4003c000

00401980 <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  401980:	4b06      	ldr	r3, [pc, #24]	; (40199c <_afec_init_irq_param+0x1c>)
  401982:	4298      	cmp	r0, r3
  401984:	d003      	beq.n	40198e <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  401986:	4b06      	ldr	r3, [pc, #24]	; (4019a0 <_afec_init_irq_param+0x20>)
  401988:	4298      	cmp	r0, r3
  40198a:	d003      	beq.n	401994 <_afec_init_irq_param+0x14>
  40198c:	4770      	bx	lr
		_afec0_dev = dev;
  40198e:	4b05      	ldr	r3, [pc, #20]	; (4019a4 <_afec_init_irq_param+0x24>)
  401990:	6019      	str	r1, [r3, #0]
  401992:	e7f8      	b.n	401986 <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  401994:	4b03      	ldr	r3, [pc, #12]	; (4019a4 <_afec_init_irq_param+0x24>)
  401996:	6059      	str	r1, [r3, #4]
	}
}
  401998:	e7f8      	b.n	40198c <_afec_init_irq_param+0xc>
  40199a:	bf00      	nop
  40199c:	4003c000 	.word	0x4003c000
  4019a0:	40064000 	.word	0x40064000
  4019a4:	20400340 	.word	0x20400340

004019a8 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  4019a8:	2364      	movs	r3, #100	; 0x64
  4019aa:	4a1d      	ldr	r2, [pc, #116]	; (401a20 <_afec_init+0x78>)
  4019ac:	fb03 2301 	mla	r3, r3, r1, r2
  4019b0:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  4019b2:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  4019b4:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  4019b6:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  4019b8:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  4019ba:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  4019bc:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  4019be:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  4019c0:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  4019c2:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  4019c4:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  4019c6:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  4019c8:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  4019ca:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  4019cc:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  4019ce:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  4019d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  4019d4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  4019d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  4019da:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  4019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  4019e0:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  4019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  4019e6:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  4019ea:	2200      	movs	r2, #0
  4019ec:	2a0b      	cmp	r2, #11
  4019ee:	d814      	bhi.n	401a1a <_afec_init+0x72>
{
  4019f0:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  4019f2:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  4019f4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4019f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4019fc:	4413      	add	r3, r2
  4019fe:	330c      	adds	r3, #12
  401a00:	4c07      	ldr	r4, [pc, #28]	; (401a20 <_afec_init+0x78>)
  401a02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  401a06:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  401a08:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401a0a:	3201      	adds	r2, #1
  401a0c:	b2d2      	uxtb	r2, r2
  401a0e:	2a0b      	cmp	r2, #11
  401a10:	d9ef      	bls.n	4019f2 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  401a12:	2000      	movs	r0, #0
  401a14:	f85d 4b04 	ldr.w	r4, [sp], #4
  401a18:	4770      	bx	lr
  401a1a:	2000      	movs	r0, #0
  401a1c:	4770      	bx	lr
  401a1e:	bf00      	nop
  401a20:	00406020 	.word	0x00406020

00401a24 <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  401a24:	b530      	push	{r4, r5, lr}
  401a26:	b083      	sub	sp, #12
  401a28:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  401a2a:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  401a2c:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  401a2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  401a30:	400b      	ands	r3, r1
  401a32:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  401a34:	9b01      	ldr	r3, [sp, #4]
  401a36:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401a3a:	d10e      	bne.n	401a5a <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  401a3c:	9b01      	ldr	r3, [sp, #4]
  401a3e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  401a42:	d10e      	bne.n	401a62 <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  401a44:	9b01      	ldr	r3, [sp, #4]
  401a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401a4a:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  401a4c:	9c01      	ldr	r4, [sp, #4]
  401a4e:	fab4 f484 	clz	r4, r4
  401a52:	f1c4 0420 	rsb	r4, r4, #32
  401a56:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401a58:	e01f      	b.n	401a9a <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  401a5a:	6803      	ldr	r3, [r0, #0]
  401a5c:	2100      	movs	r1, #0
  401a5e:	4798      	blx	r3
  401a60:	e7ec      	b.n	401a3c <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  401a62:	686b      	ldr	r3, [r5, #4]
  401a64:	2100      	movs	r1, #0
  401a66:	4628      	mov	r0, r5
  401a68:	4798      	blx	r3
  401a6a:	e7eb      	b.n	401a44 <_afec_interrupt_handler+0x20>
		cnt--;
  401a6c:	3c01      	subs	r4, #1
  401a6e:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  401a70:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  401a72:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  401a74:	68ab      	ldr	r3, [r5, #8]
  401a76:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  401a78:	6e92      	ldr	r2, [r2, #104]	; 0x68
  401a7a:	b292      	uxth	r2, r2
  401a7c:	4621      	mov	r1, r4
  401a7e:	4628      	mov	r0, r5
  401a80:	4798      	blx	r3
		status &= ~(1 << cnt);
  401a82:	2301      	movs	r3, #1
  401a84:	40a3      	lsls	r3, r4
  401a86:	9c01      	ldr	r4, [sp, #4]
  401a88:	ea24 0403 	bic.w	r4, r4, r3
  401a8c:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  401a8e:	9c01      	ldr	r4, [sp, #4]
  401a90:	fab4 f484 	clz	r4, r4
  401a94:	f1c4 0420 	rsb	r4, r4, #32
  401a98:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401a9a:	2c00      	cmp	r4, #0
  401a9c:	d1e6      	bne.n	401a6c <_afec_interrupt_handler+0x48>
	}
}
  401a9e:	b003      	add	sp, #12
  401aa0:	bd30      	pop	{r4, r5, pc}
	...

00401aa4 <_afec_get_hardware_index>:
{
  401aa4:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  401aa6:	4b09      	ldr	r3, [pc, #36]	; (401acc <_afec_get_hardware_index+0x28>)
  401aa8:	4298      	cmp	r0, r3
  401aaa:	d00a      	beq.n	401ac2 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  401aac:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  401ab0:	4298      	cmp	r0, r3
  401ab2:	d008      	beq.n	401ac6 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  401ab4:	22a7      	movs	r2, #167	; 0xa7
  401ab6:	4906      	ldr	r1, [pc, #24]	; (401ad0 <_afec_get_hardware_index+0x2c>)
  401ab8:	2000      	movs	r0, #0
  401aba:	4b06      	ldr	r3, [pc, #24]	; (401ad4 <_afec_get_hardware_index+0x30>)
  401abc:	4798      	blx	r3
	return 0;
  401abe:	2000      	movs	r0, #0
  401ac0:	bd08      	pop	{r3, pc}
		return 0;
  401ac2:	2000      	movs	r0, #0
  401ac4:	bd08      	pop	{r3, pc}
		return 1;
  401ac6:	2001      	movs	r0, #1
}
  401ac8:	bd08      	pop	{r3, pc}
  401aca:	bf00      	nop
  401acc:	4003c000 	.word	0x4003c000
  401ad0:	004060e8 	.word	0x004060e8
  401ad4:	0040183d 	.word	0x0040183d

00401ad8 <_afec_get_regs>:
{
  401ad8:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  401ada:	4b09      	ldr	r3, [pc, #36]	; (401b00 <_afec_get_regs+0x28>)
  401adc:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401ade:	2300      	movs	r3, #0
  401ae0:	2b01      	cmp	r3, #1
  401ae2:	d809      	bhi.n	401af8 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  401ae4:	2264      	movs	r2, #100	; 0x64
  401ae6:	fb02 f203 	mul.w	r2, r2, r3
  401aea:	4906      	ldr	r1, [pc, #24]	; (401b04 <_afec_get_regs+0x2c>)
  401aec:	5c8a      	ldrb	r2, [r1, r2]
  401aee:	4290      	cmp	r0, r2
  401af0:	d003      	beq.n	401afa <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401af2:	3301      	adds	r3, #1
  401af4:	b2db      	uxtb	r3, r3
  401af6:	e7f3      	b.n	401ae0 <_afec_get_regs+0x8>
	return 0;
  401af8:	2300      	movs	r3, #0
}
  401afa:	4618      	mov	r0, r3
  401afc:	bd08      	pop	{r3, pc}
  401afe:	bf00      	nop
  401b00:	00401aa5 	.word	0x00401aa5
  401b04:	00406020 	.word	0x00406020

00401b08 <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  401b08:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  401b0a:	4b02      	ldr	r3, [pc, #8]	; (401b14 <AFEC0_Handler+0xc>)
  401b0c:	6818      	ldr	r0, [r3, #0]
  401b0e:	4b02      	ldr	r3, [pc, #8]	; (401b18 <AFEC0_Handler+0x10>)
  401b10:	4798      	blx	r3
  401b12:	bd08      	pop	{r3, pc}
  401b14:	20400340 	.word	0x20400340
  401b18:	00401a25 	.word	0x00401a25

00401b1c <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  401b1c:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  401b1e:	4b02      	ldr	r3, [pc, #8]	; (401b28 <AFEC1_Handler+0xc>)
  401b20:	6858      	ldr	r0, [r3, #4]
  401b22:	4b02      	ldr	r3, [pc, #8]	; (401b2c <AFEC1_Handler+0x10>)
  401b24:	4798      	blx	r3
  401b26:	bd08      	pop	{r3, pc}
  401b28:	20400340 	.word	0x20400340
  401b2c:	00401a25 	.word	0x00401a25

00401b30 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  401b30:	b570      	push	{r4, r5, r6, lr}
  401b32:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  401b34:	4605      	mov	r5, r0
  401b36:	f44f 72a1 	mov.w	r2, #322	; 0x142
  401b3a:	4923      	ldr	r1, [pc, #140]	; (401bc8 <_adc_async_init+0x98>)
  401b3c:	3000      	adds	r0, #0
  401b3e:	bf18      	it	ne
  401b40:	2001      	movne	r0, #1
  401b42:	4b22      	ldr	r3, [pc, #136]	; (401bcc <_adc_async_init+0x9c>)
  401b44:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  401b46:	4620      	mov	r0, r4
  401b48:	4b21      	ldr	r3, [pc, #132]	; (401bd0 <_adc_async_init+0xa0>)
  401b4a:	4798      	blx	r3
  401b4c:	4601      	mov	r1, r0
  401b4e:	4620      	mov	r0, r4
  401b50:	4b20      	ldr	r3, [pc, #128]	; (401bd4 <_adc_async_init+0xa4>)
  401b52:	4798      	blx	r3
	if (init_status) {
  401b54:	4606      	mov	r6, r0
  401b56:	b108      	cbz	r0, 401b5c <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  401b58:	4630      	mov	r0, r6
  401b5a:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  401b5c:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  401b5e:	4629      	mov	r1, r5
  401b60:	4620      	mov	r0, r4
  401b62:	4b1d      	ldr	r3, [pc, #116]	; (401bd8 <_adc_async_init+0xa8>)
  401b64:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  401b66:	4628      	mov	r0, r5
  401b68:	4b1c      	ldr	r3, [pc, #112]	; (401bdc <_adc_async_init+0xac>)
  401b6a:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401b6c:	2800      	cmp	r0, #0
  401b6e:	db0d      	blt.n	401b8c <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b70:	0943      	lsrs	r3, r0, #5
  401b72:	f000 001f 	and.w	r0, r0, #31
  401b76:	2201      	movs	r2, #1
  401b78:	fa02 f000 	lsl.w	r0, r2, r0
  401b7c:	3320      	adds	r3, #32
  401b7e:	4a18      	ldr	r2, [pc, #96]	; (401be0 <_adc_async_init+0xb0>)
  401b80:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401b84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401b88:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  401b8c:	4628      	mov	r0, r5
  401b8e:	4b13      	ldr	r3, [pc, #76]	; (401bdc <_adc_async_init+0xac>)
  401b90:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401b92:	2800      	cmp	r0, #0
  401b94:	db09      	blt.n	401baa <_adc_async_init+0x7a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b96:	0943      	lsrs	r3, r0, #5
  401b98:	f000 001f 	and.w	r0, r0, #31
  401b9c:	2201      	movs	r2, #1
  401b9e:	fa02 f000 	lsl.w	r0, r2, r0
  401ba2:	3360      	adds	r3, #96	; 0x60
  401ba4:	4a0e      	ldr	r2, [pc, #56]	; (401be0 <_adc_async_init+0xb0>)
  401ba6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  401baa:	4628      	mov	r0, r5
  401bac:	4b0b      	ldr	r3, [pc, #44]	; (401bdc <_adc_async_init+0xac>)
  401bae:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401bb0:	2800      	cmp	r0, #0
  401bb2:	dbd1      	blt.n	401b58 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401bb4:	0942      	lsrs	r2, r0, #5
  401bb6:	f000 001f 	and.w	r0, r0, #31
  401bba:	2301      	movs	r3, #1
  401bbc:	fa03 f000 	lsl.w	r0, r3, r0
  401bc0:	4b07      	ldr	r3, [pc, #28]	; (401be0 <_adc_async_init+0xb0>)
  401bc2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  401bc6:	e7c7      	b.n	401b58 <_adc_async_init+0x28>
  401bc8:	004060e8 	.word	0x004060e8
  401bcc:	0040183d 	.word	0x0040183d
  401bd0:	00401ad9 	.word	0x00401ad9
  401bd4:	004019a9 	.word	0x004019a9
  401bd8:	00401981 	.word	0x00401981
  401bdc:	0040195d 	.word	0x0040195d
  401be0:	e000e100 	.word	0xe000e100

00401be4 <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  401be4:	6942      	ldr	r2, [r0, #20]
  401be6:	2301      	movs	r3, #1
  401be8:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  401bec:	6151      	str	r1, [r2, #20]
  401bee:	4770      	bx	lr

00401bf0 <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  401bf0:	2002      	movs	r0, #2
  401bf2:	4770      	bx	lr

00401bf4 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  401bf4:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401bf8:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  401bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401c00:	fb03 f000 	mul.w	r0, r3, r0
  401c04:	4770      	bx	lr
	...

00401c08 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  401c08:	b500      	push	{lr}
  401c0a:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  401c0c:	a801      	add	r0, sp, #4
  401c0e:	4b14      	ldr	r3, [pc, #80]	; (401c60 <_init_chip+0x58>)
  401c10:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  401c12:	4a14      	ldr	r2, [pc, #80]	; (401c64 <_init_chip+0x5c>)
  401c14:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  401c20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401c24:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  401c28:	a801      	add	r0, sp, #4
  401c2a:	4b0f      	ldr	r3, [pc, #60]	; (401c68 <_init_chip+0x60>)
  401c2c:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  401c2e:	4a0f      	ldr	r2, [pc, #60]	; (401c6c <_init_chip+0x64>)
  401c30:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  401c32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  401c36:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  401c3a:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401c3c:	4b0c      	ldr	r3, [pc, #48]	; (401c70 <_init_chip+0x68>)
  401c3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  401c42:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401c46:	d104      	bne.n	401c52 <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401c48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401c4c:	4b08      	ldr	r3, [pc, #32]	; (401c70 <_init_chip+0x68>)
  401c4e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  401c52:	4b08      	ldr	r3, [pc, #32]	; (401c74 <_init_chip+0x6c>)
  401c54:	4798      	blx	r3

#endif
	_pmc_init();
  401c56:	4b08      	ldr	r3, [pc, #32]	; (401c78 <_init_chip+0x70>)
  401c58:	4798      	blx	r3
}
  401c5a:	b003      	add	sp, #12
  401c5c:	f85d fb04 	ldr.w	pc, [sp], #4
  401c60:	004012c5 	.word	0x004012c5
  401c64:	e000ed00 	.word	0xe000ed00
  401c68:	004012d3 	.word	0x004012d3
  401c6c:	400e0c00 	.word	0x400e0c00
  401c70:	400e0600 	.word	0x400e0600
  401c74:	004027bd 	.word	0x004027bd
  401c78:	00402091 	.word	0x00402091

00401c7c <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  401c7c:	b538      	push	{r3, r4, r5, lr}
  401c7e:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  401c80:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  401c82:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  401c84:	f014 0f01 	tst.w	r4, #1
  401c88:	d11a      	bne.n	401cc0 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  401c8a:	f414 7f00 	tst.w	r4, #512	; 0x200
  401c8e:	d11a      	bne.n	401cc6 <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  401c90:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  401c94:	d11b      	bne.n	401cce <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  401c96:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  401c9a:	d11d      	bne.n	401cd8 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  401c9c:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  401ca0:	d008      	beq.n	401cb4 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401ca2:	68eb      	ldr	r3, [r5, #12]
  401ca4:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  401ca6:	6c52      	ldr	r2, [r2, #68]	; 0x44
  401ca8:	f012 0f20 	tst.w	r2, #32
  401cac:	d019      	beq.n	401ce2 <_can_irq_handler+0x66>
  401cae:	2102      	movs	r1, #2
  401cb0:	4628      	mov	r0, r5
  401cb2:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  401cb4:	f014 0f08 	tst.w	r4, #8
  401cb8:	d115      	bne.n	401ce6 <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  401cba:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  401cbc:	651c      	str	r4, [r3, #80]	; 0x50
  401cbe:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  401cc0:	6883      	ldr	r3, [r0, #8]
  401cc2:	4798      	blx	r3
  401cc4:	e7e1      	b.n	401c8a <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  401cc6:	686b      	ldr	r3, [r5, #4]
  401cc8:	4628      	mov	r0, r5
  401cca:	4798      	blx	r3
  401ccc:	e7e0      	b.n	401c90 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  401cce:	68eb      	ldr	r3, [r5, #12]
  401cd0:	2103      	movs	r1, #3
  401cd2:	4628      	mov	r0, r5
  401cd4:	4798      	blx	r3
  401cd6:	e7de      	b.n	401c96 <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  401cd8:	68eb      	ldr	r3, [r5, #12]
  401cda:	2100      	movs	r1, #0
  401cdc:	4628      	mov	r0, r5
  401cde:	4798      	blx	r3
  401ce0:	e7dc      	b.n	401c9c <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401ce2:	2101      	movs	r1, #1
  401ce4:	e7e4      	b.n	401cb0 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  401ce6:	68eb      	ldr	r3, [r5, #12]
  401ce8:	2104      	movs	r1, #4
  401cea:	4628      	mov	r0, r5
  401cec:	4798      	blx	r3
  401cee:	e7e4      	b.n	401cba <_can_irq_handler+0x3e>

00401cf0 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  401cf0:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  401cf2:	4b02      	ldr	r3, [pc, #8]	; (401cfc <MCAN1_INT0_Handler+0xc>)
  401cf4:	6a98      	ldr	r0, [r3, #40]	; 0x28
  401cf6:	4b02      	ldr	r3, [pc, #8]	; (401d00 <MCAN1_INT0_Handler+0x10>)
  401cf8:	4798      	blx	r3
  401cfa:	bd08      	pop	{r3, pc}
  401cfc:	20400348 	.word	0x20400348
  401d00:	00401c7d 	.word	0x00401c7d

00401d04 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401d04:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  401d06:	2500      	movs	r5, #0
  401d08:	428d      	cmp	r5, r1
  401d0a:	d210      	bcs.n	401d2e <_ffs+0x2a>
  401d0c:	2201      	movs	r2, #1
  401d0e:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401d10:	2b1f      	cmp	r3, #31
  401d12:	d80a      	bhi.n	401d2a <_ffs+0x26>
			if (v[i] & bit) {
  401d14:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401d18:	4222      	tst	r2, r4
  401d1a:	d102      	bne.n	401d22 <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401d1c:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401d1e:	3301      	adds	r3, #1
  401d20:	e7f6      	b.n	401d10 <_ffs+0xc>
				return i * 32 + j;
  401d22:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401d26:	bc30      	pop	{r4, r5}
  401d28:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  401d2a:	3501      	adds	r5, #1
  401d2c:	e7ec      	b.n	401d08 <_ffs+0x4>
	return -1;
  401d2e:	f04f 30ff 	mov.w	r0, #4294967295
  401d32:	e7f8      	b.n	401d26 <_ffs+0x22>

00401d34 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401d34:	b510      	push	{r4, lr}
  401d36:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401d38:	2300      	movs	r3, #0
  401d3a:	9301      	str	r3, [sp, #4]
  401d3c:	9302      	str	r3, [sp, #8]
  401d3e:	9303      	str	r3, [sp, #12]
  401d40:	9304      	str	r3, [sp, #16]
  401d42:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401d44:	4b28      	ldr	r3, [pc, #160]	; (401de8 <_ext_irq_handler+0xb4>)
  401d46:	6818      	ldr	r0, [r3, #0]
  401d48:	22f8      	movs	r2, #248	; 0xf8
  401d4a:	4928      	ldr	r1, [pc, #160]	; (401dec <_ext_irq_handler+0xb8>)
  401d4c:	3000      	adds	r0, #0
  401d4e:	bf18      	it	ne
  401d50:	2001      	movne	r0, #1
  401d52:	4b27      	ldr	r3, [pc, #156]	; (401df0 <_ext_irq_handler+0xbc>)
  401d54:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401d56:	4b27      	ldr	r3, [pc, #156]	; (401df4 <_ext_irq_handler+0xc0>)
  401d58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401d5c:	4013      	ands	r3, r2
  401d5e:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401d60:	4a25      	ldr	r2, [pc, #148]	; (401df8 <_ext_irq_handler+0xc4>)
  401d62:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401d64:	6c92      	ldr	r2, [r2, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401d66:	400a      	ands	r2, r1
  401d68:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  401d6a:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  401d6c:	4923      	ldr	r1, [pc, #140]	; (401dfc <_ext_irq_handler+0xc8>)
  401d6e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401d70:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401d72:	400a      	ands	r2, r1
  401d74:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  401d76:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  401d78:	e02c      	b.n	401dd4 <_ext_irq_handler+0xa0>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  401d7a:	4b1b      	ldr	r3, [pc, #108]	; (401de8 <_ext_irq_handler+0xb4>)
  401d7c:	681b      	ldr	r3, [r3, #0]
  401d7e:	4620      	mov	r0, r4
  401d80:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  401d82:	1163      	asrs	r3, r4, #5
  401d84:	f004 041f 	and.w	r4, r4, #31
  401d88:	2201      	movs	r2, #1
  401d8a:	fa02 f404 	lsl.w	r4, r2, r4
  401d8e:	aa06      	add	r2, sp, #24
  401d90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401d94:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401d98:	ea22 0204 	bic.w	r2, r2, r4
  401d9c:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  401da0:	2105      	movs	r1, #5
  401da2:	a801      	add	r0, sp, #4
  401da4:	4b16      	ldr	r3, [pc, #88]	; (401e00 <_ext_irq_handler+0xcc>)
  401da6:	4798      	blx	r3
  401da8:	4604      	mov	r4, r0
		while (-1 != pos) {
  401daa:	f1b4 3fff 	cmp.w	r4, #4294967295
  401dae:	d1e4      	bne.n	401d7a <_ext_irq_handler+0x46>
	return ((Pio *)hw)->PIO_ISR;
  401db0:	4a10      	ldr	r2, [pc, #64]	; (401df4 <_ext_irq_handler+0xc0>)
  401db2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401db4:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401db6:	400b      	ands	r3, r1
  401db8:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401dba:	490f      	ldr	r1, [pc, #60]	; (401df8 <_ext_irq_handler+0xc4>)
  401dbc:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401dbe:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401dc0:	4002      	ands	r2, r0
  401dc2:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  401dc4:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  401dc6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  401dca:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401dcc:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401dce:	4002      	ands	r2, r0
  401dd0:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  401dd2:	4313      	orrs	r3, r2
	while (flag_total) {
  401dd4:	b12b      	cbz	r3, 401de2 <_ext_irq_handler+0xae>
		pos = _ffs(flags, 5);
  401dd6:	2105      	movs	r1, #5
  401dd8:	a801      	add	r0, sp, #4
  401dda:	4b09      	ldr	r3, [pc, #36]	; (401e00 <_ext_irq_handler+0xcc>)
  401ddc:	4798      	blx	r3
  401dde:	4604      	mov	r4, r0
		while (-1 != pos) {
  401de0:	e7e3      	b.n	401daa <_ext_irq_handler+0x76>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  401de2:	b006      	add	sp, #24
  401de4:	bd10      	pop	{r4, pc}
  401de6:	bf00      	nop
  401de8:	20400374 	.word	0x20400374
  401dec:	0040615c 	.word	0x0040615c
  401df0:	0040183d 	.word	0x0040183d
  401df4:	400e0e00 	.word	0x400e0e00
  401df8:	400e1000 	.word	0x400e1000
  401dfc:	400e1400 	.word	0x400e1400
  401e00:	00401d05 	.word	0x00401d05

00401e04 <_pio_get_hardware_index>:
{
  401e04:	b510      	push	{r4, lr}
	ASSERT(hw);
  401e06:	4604      	mov	r4, r0
  401e08:	22d2      	movs	r2, #210	; 0xd2
  401e0a:	4905      	ldr	r1, [pc, #20]	; (401e20 <_pio_get_hardware_index+0x1c>)
  401e0c:	3000      	adds	r0, #0
  401e0e:	bf18      	it	ne
  401e10:	2001      	movne	r0, #1
  401e12:	4b04      	ldr	r3, [pc, #16]	; (401e24 <_pio_get_hardware_index+0x20>)
  401e14:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  401e16:	4804      	ldr	r0, [pc, #16]	; (401e28 <_pio_get_hardware_index+0x24>)
  401e18:	4420      	add	r0, r4
}
  401e1a:	f3c0 2047 	ubfx	r0, r0, #9, #8
  401e1e:	bd10      	pop	{r4, pc}
  401e20:	0040615c 	.word	0x0040615c
  401e24:	0040183d 	.word	0x0040183d
  401e28:	bff1f200 	.word	0xbff1f200

00401e2c <_pio_get_index>:
{
  401e2c:	b510      	push	{r4, lr}
	ASSERT(hw);
  401e2e:	4604      	mov	r4, r0
  401e30:	22e0      	movs	r2, #224	; 0xe0
  401e32:	490d      	ldr	r1, [pc, #52]	; (401e68 <_pio_get_index+0x3c>)
  401e34:	3000      	adds	r0, #0
  401e36:	bf18      	it	ne
  401e38:	2001      	movne	r0, #1
  401e3a:	4b0c      	ldr	r3, [pc, #48]	; (401e6c <_pio_get_index+0x40>)
  401e3c:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  401e3e:	4620      	mov	r0, r4
  401e40:	4b0b      	ldr	r3, [pc, #44]	; (401e70 <_pio_get_index+0x44>)
  401e42:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401e44:	2300      	movs	r3, #0
  401e46:	2b02      	cmp	r3, #2
  401e48:	d80b      	bhi.n	401e62 <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  401e4a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  401e4e:	008a      	lsls	r2, r1, #2
  401e50:	4908      	ldr	r1, [pc, #32]	; (401e74 <_pio_get_index+0x48>)
  401e52:	5c8a      	ldrb	r2, [r1, r2]
  401e54:	4290      	cmp	r0, r2
  401e56:	d002      	beq.n	401e5e <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401e58:	3301      	adds	r3, #1
  401e5a:	b2db      	uxtb	r3, r3
  401e5c:	e7f3      	b.n	401e46 <_pio_get_index+0x1a>
			return i;
  401e5e:	b258      	sxtb	r0, r3
  401e60:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  401e62:	f04f 30ff 	mov.w	r0, #4294967295
}
  401e66:	bd10      	pop	{r4, pc}
  401e68:	0040615c 	.word	0x0040615c
  401e6c:	0040183d 	.word	0x0040183d
  401e70:	00401e05 	.word	0x00401e05
  401e74:	00406100 	.word	0x00406100

00401e78 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401e78:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  401e7a:	4604      	mov	r4, r0
  401e7c:	f44f 72af 	mov.w	r2, #350	; 0x15e
  401e80:	4929      	ldr	r1, [pc, #164]	; (401f28 <_pio_init+0xb0>)
  401e82:	3000      	adds	r0, #0
  401e84:	bf18      	it	ne
  401e86:	2001      	movne	r0, #1
  401e88:	4b28      	ldr	r3, [pc, #160]	; (401f2c <_pio_init+0xb4>)
  401e8a:	4798      	blx	r3

	i = _pio_get_index(hw);
  401e8c:	4620      	mov	r0, r4
  401e8e:	4b28      	ldr	r3, [pc, #160]	; (401f30 <_pio_init+0xb8>)
  401e90:	4798      	blx	r3
	if (i < 0) {
  401e92:	2800      	cmp	r0, #0
  401e94:	db43      	blt.n	401f1e <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  401e96:	4d27      	ldr	r5, [pc, #156]	; (401f34 <_pio_init+0xbc>)
  401e98:	00c2      	lsls	r2, r0, #3
  401e9a:	1a11      	subs	r1, r2, r0
  401e9c:	008b      	lsls	r3, r1, #2
  401e9e:	442b      	add	r3, r5
  401ea0:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  401ea2:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  401ea6:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  401ea8:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  401eac:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  401eae:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  401eb2:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  401eb4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  401eb8:	1a10      	subs	r0, r2, r0
  401eba:	0083      	lsls	r3, r0, #2
  401ebc:	442b      	add	r3, r5
  401ebe:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  401ec0:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401ec4:	4620      	mov	r0, r4
  401ec6:	4b1c      	ldr	r3, [pc, #112]	; (401f38 <_pio_init+0xc0>)
  401ec8:	4798      	blx	r3
  401eca:	4428      	add	r0, r5
  401ecc:	f990 3054 	ldrsb.w	r3, [r0, #84]	; 0x54
  if ((int32_t)(IRQn) >= 0)
  401ed0:	2b00      	cmp	r3, #0
  401ed2:	db0c      	blt.n	401eee <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ed4:	095a      	lsrs	r2, r3, #5
  401ed6:	f003 001f 	and.w	r0, r3, #31
  401eda:	2101      	movs	r1, #1
  401edc:	4081      	lsls	r1, r0
  401ede:	3220      	adds	r2, #32
  401ee0:	4816      	ldr	r0, [pc, #88]	; (401f3c <_pio_init+0xc4>)
  401ee2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401ee6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401eea:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  401eee:	2b00      	cmp	r3, #0
  401ef0:	db08      	blt.n	401f04 <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ef2:	095a      	lsrs	r2, r3, #5
  401ef4:	f003 001f 	and.w	r0, r3, #31
  401ef8:	2101      	movs	r1, #1
  401efa:	4081      	lsls	r1, r0
  401efc:	3260      	adds	r2, #96	; 0x60
  401efe:	480f      	ldr	r0, [pc, #60]	; (401f3c <_pio_init+0xc4>)
  401f00:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401f04:	2b00      	cmp	r3, #0
  401f06:	db0d      	blt.n	401f24 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401f08:	0959      	lsrs	r1, r3, #5
  401f0a:	f003 031f 	and.w	r3, r3, #31
  401f0e:	2201      	movs	r2, #1
  401f10:	fa02 f303 	lsl.w	r3, r2, r3
  401f14:	4a09      	ldr	r2, [pc, #36]	; (401f3c <_pio_init+0xc4>)
  401f16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  401f1a:	2000      	movs	r0, #0
  401f1c:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  401f1e:	f06f 0010 	mvn.w	r0, #16
  401f22:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401f24:	2000      	movs	r0, #0
}
  401f26:	bd38      	pop	{r3, r4, r5, pc}
  401f28:	0040615c 	.word	0x0040615c
  401f2c:	0040183d 	.word	0x0040183d
  401f30:	00401e2d 	.word	0x00401e2d
  401f34:	00406100 	.word	0x00406100
  401f38:	00401e05 	.word	0x00401e05
  401f3c:	e000e100 	.word	0xe000e100

00401f40 <PIOD_Handler>:
{
  401f40:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401f42:	4b01      	ldr	r3, [pc, #4]	; (401f48 <PIOD_Handler+0x8>)
  401f44:	4798      	blx	r3
  401f46:	bd08      	pop	{r3, pc}
  401f48:	00401d35 	.word	0x00401d35

00401f4c <PIOA_Handler>:
{
  401f4c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401f4e:	4b01      	ldr	r3, [pc, #4]	; (401f54 <PIOA_Handler+0x8>)
  401f50:	4798      	blx	r3
  401f52:	bd08      	pop	{r3, pc}
  401f54:	00401d35 	.word	0x00401d35

00401f58 <PIOB_Handler>:
{
  401f58:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401f5a:	4b01      	ldr	r3, [pc, #4]	; (401f60 <PIOB_Handler+0x8>)
  401f5c:	4798      	blx	r3
  401f5e:	bd08      	pop	{r3, pc}
  401f60:	00401d35 	.word	0x00401d35

00401f64 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401f64:	b538      	push	{r3, r4, r5, lr}
  401f66:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401f68:	4805      	ldr	r0, [pc, #20]	; (401f80 <_ext_irq_init+0x1c>)
  401f6a:	4c06      	ldr	r4, [pc, #24]	; (401f84 <_ext_irq_init+0x20>)
  401f6c:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  401f6e:	4806      	ldr	r0, [pc, #24]	; (401f88 <_ext_irq_init+0x24>)
  401f70:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  401f72:	4806      	ldr	r0, [pc, #24]	; (401f8c <_ext_irq_init+0x28>)
  401f74:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401f76:	4b06      	ldr	r3, [pc, #24]	; (401f90 <_ext_irq_init+0x2c>)
  401f78:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401f7a:	2000      	movs	r0, #0
  401f7c:	bd38      	pop	{r3, r4, r5, pc}
  401f7e:	bf00      	nop
  401f80:	400e0e00 	.word	0x400e0e00
  401f84:	00401e79 	.word	0x00401e79
  401f88:	400e1000 	.word	0x400e1000
  401f8c:	400e1400 	.word	0x400e1400
  401f90:	20400374 	.word	0x20400374

00401f94 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  401f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f98:	4604      	mov	r4, r0
  401f9a:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  401f9c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 401ff0 <_ext_irq_enable+0x5c>
  401fa0:	f240 12ab 	movw	r2, #427	; 0x1ab
  401fa4:	4641      	mov	r1, r8
  401fa6:	289f      	cmp	r0, #159	; 0x9f
  401fa8:	bf8c      	ite	hi
  401faa:	2000      	movhi	r0, #0
  401fac:	2001      	movls	r0, #1
  401fae:	4e0e      	ldr	r6, [pc, #56]	; (401fe8 <_ext_irq_enable+0x54>)
  401fb0:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  401fb2:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  401fb4:	22c3      	movs	r2, #195	; 0xc3
  401fb6:	4641      	mov	r1, r8
  401fb8:	2d9f      	cmp	r5, #159	; 0x9f
  401fba:	bf8c      	ite	hi
  401fbc:	2000      	movhi	r0, #0
  401fbe:	2001      	movls	r0, #1
  401fc0:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  401fc2:	096d      	lsrs	r5, r5, #5
  401fc4:	4b09      	ldr	r3, [pc, #36]	; (401fec <_ext_irq_enable+0x58>)
  401fc6:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  401fca:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  401fce:	b937      	cbnz	r7, 401fde <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  401fd0:	2301      	movs	r3, #1
  401fd2:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  401fd6:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  401fd8:	2000      	movs	r0, #0
  401fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  401fde:	2301      	movs	r3, #1
  401fe0:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  401fe4:	642c      	str	r4, [r5, #64]	; 0x40
  401fe6:	e7f7      	b.n	401fd8 <_ext_irq_enable+0x44>
  401fe8:	0040183d 	.word	0x0040183d
  401fec:	400e0e00 	.word	0x400e0e00
  401ff0:	0040615c 	.word	0x0040615c

00401ff4 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  401ff4:	490e      	ldr	r1, [pc, #56]	; (402030 <_pmc_init_sources+0x3c>)
  401ff6:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401ff8:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  401ffc:	4b0d      	ldr	r3, [pc, #52]	; (402034 <_pmc_init_sources+0x40>)
  401ffe:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  402000:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  402002:	4b0b      	ldr	r3, [pc, #44]	; (402030 <_pmc_init_sources+0x3c>)
  402004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  402006:	f013 0f01 	tst.w	r3, #1
  40200a:	d0fa      	beq.n	402002 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  40200c:	4b08      	ldr	r3, [pc, #32]	; (402030 <_pmc_init_sources+0x3c>)
  40200e:	6a19      	ldr	r1, [r3, #32]
  402010:	4a09      	ldr	r2, [pc, #36]	; (402038 <_pmc_init_sources+0x44>)
  402012:	430a      	orrs	r2, r1
  402014:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  402016:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  402018:	4a08      	ldr	r2, [pc, #32]	; (40203c <_pmc_init_sources+0x48>)
  40201a:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  40201c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  40201e:	4a08      	ldr	r2, [pc, #32]	; (402040 <_pmc_init_sources+0x4c>)
  402020:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  402022:	4b03      	ldr	r3, [pc, #12]	; (402030 <_pmc_init_sources+0x3c>)
  402024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  402026:	f013 0f02 	tst.w	r3, #2
  40202a:	d0fa      	beq.n	402022 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  40202c:	4770      	bx	lr
  40202e:	bf00      	nop
  402030:	400e0600 	.word	0x400e0600
  402034:	00373e01 	.word	0x00373e01
  402038:	01370000 	.word	0x01370000
  40203c:	f800ffff 	.word	0xf800ffff
  402040:	20183f01 	.word	0x20183f01

00402044 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402044:	4a11      	ldr	r2, [pc, #68]	; (40208c <_pmc_init_master_clock+0x48>)
  402046:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  402048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  40204c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40204e:	4b0f      	ldr	r3, [pc, #60]	; (40208c <_pmc_init_master_clock+0x48>)
  402050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  402052:	f013 0f08 	tst.w	r3, #8
  402056:	d0fa      	beq.n	40204e <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402058:	4a0c      	ldr	r2, [pc, #48]	; (40208c <_pmc_init_master_clock+0x48>)
  40205a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  40205c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  402060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  402064:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  402066:	4b09      	ldr	r3, [pc, #36]	; (40208c <_pmc_init_master_clock+0x48>)
  402068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40206a:	f013 0f08 	tst.w	r3, #8
  40206e:	d0fa      	beq.n	402066 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402070:	4a06      	ldr	r2, [pc, #24]	; (40208c <_pmc_init_master_clock+0x48>)
  402072:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  402074:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  402078:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  40207c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40207e:	4b03      	ldr	r3, [pc, #12]	; (40208c <_pmc_init_master_clock+0x48>)
  402080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  402082:	f013 0f08 	tst.w	r3, #8
  402086:	d0fa      	beq.n	40207e <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  402088:	4770      	bx	lr
  40208a:	bf00      	nop
  40208c:	400e0600 	.word	0x400e0600

00402090 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  402090:	b508      	push	{r3, lr}
	_pmc_init_sources();
  402092:	4b02      	ldr	r3, [pc, #8]	; (40209c <_pmc_init+0xc>)
  402094:	4798      	blx	r3
	_pmc_init_master_clock();
  402096:	4b02      	ldr	r3, [pc, #8]	; (4020a0 <_pmc_init+0x10>)
  402098:	4798      	blx	r3
  40209a:	bd08      	pop	{r3, pc}
  40209c:	00401ff5 	.word	0x00401ff5
  4020a0:	00402045 	.word	0x00402045

004020a4 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4020a4:	2300      	movs	r3, #0
  4020a6:	2b01      	cmp	r3, #1
  4020a8:	d80f      	bhi.n	4020ca <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  4020aa:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  4020ae:	008a      	lsls	r2, r1, #2
  4020b0:	4907      	ldr	r1, [pc, #28]	; (4020d0 <_pwm_get_cfg+0x2c>)
  4020b2:	588a      	ldr	r2, [r1, r2]
  4020b4:	4282      	cmp	r2, r0
  4020b6:	d002      	beq.n	4020be <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4020b8:	3301      	adds	r3, #1
  4020ba:	b2db      	uxtb	r3, r3
  4020bc:	e7f3      	b.n	4020a6 <_pwm_get_cfg+0x2>
			return (_pwms + i);
  4020be:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4020c2:	009a      	lsls	r2, r3, #2
  4020c4:	4608      	mov	r0, r1
  4020c6:	4410      	add	r0, r2
  4020c8:	4770      	bx	lr
		}
	}

	return NULL;
  4020ca:	2000      	movs	r0, #0
}
  4020cc:	4770      	bx	lr
  4020ce:	bf00      	nop
  4020d0:	00406178 	.word	0x00406178

004020d4 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  4020d4:	4b06      	ldr	r3, [pc, #24]	; (4020f0 <_pwm_init_irq_param+0x1c>)
  4020d6:	4298      	cmp	r0, r3
  4020d8:	d003      	beq.n	4020e2 <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  4020da:	4b06      	ldr	r3, [pc, #24]	; (4020f4 <_pwm_init_irq_param+0x20>)
  4020dc:	4298      	cmp	r0, r3
  4020de:	d003      	beq.n	4020e8 <_pwm_init_irq_param+0x14>
  4020e0:	4770      	bx	lr
		_pwm0_dev = dev;
  4020e2:	4b05      	ldr	r3, [pc, #20]	; (4020f8 <_pwm_init_irq_param+0x24>)
  4020e4:	6019      	str	r1, [r3, #0]
  4020e6:	e7f8      	b.n	4020da <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  4020e8:	4b03      	ldr	r3, [pc, #12]	; (4020f8 <_pwm_init_irq_param+0x24>)
  4020ea:	6059      	str	r1, [r3, #4]
	}
}
  4020ec:	e7f8      	b.n	4020e0 <_pwm_init_irq_param+0xc>
  4020ee:	bf00      	nop
  4020f0:	40020000 	.word	0x40020000
  4020f4:	4005c000 	.word	0x4005c000
  4020f8:	20400378 	.word	0x20400378

004020fc <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  4020fc:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  4020fe:	6903      	ldr	r3, [r0, #16]
	return ((Pwm *)hw)->PWM_ISR1;
  402100:	69db      	ldr	r3, [r3, #28]
  402102:	b113      	cbz	r3, 40210a <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  402104:	6803      	ldr	r3, [r0, #0]
  402106:	b103      	cbz	r3, 40210a <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  402108:	4798      	blx	r3
  40210a:	bd08      	pop	{r3, pc}

0040210c <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  40210c:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  40210e:	4b02      	ldr	r3, [pc, #8]	; (402118 <PWM0_Handler+0xc>)
  402110:	6818      	ldr	r0, [r3, #0]
  402112:	4b02      	ldr	r3, [pc, #8]	; (40211c <PWM0_Handler+0x10>)
  402114:	4798      	blx	r3
  402116:	bd08      	pop	{r3, pc}
  402118:	20400378 	.word	0x20400378
  40211c:	004020fd 	.word	0x004020fd

00402120 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  402120:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  402122:	4b02      	ldr	r3, [pc, #8]	; (40212c <PWM1_Handler+0xc>)
  402124:	6858      	ldr	r0, [r3, #4]
  402126:	4b02      	ldr	r3, [pc, #8]	; (402130 <PWM1_Handler+0x10>)
  402128:	4798      	blx	r3
  40212a:	bd08      	pop	{r3, pc}
  40212c:	20400378 	.word	0x20400378
  402130:	004020fd 	.word	0x004020fd

00402134 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  402134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402136:	4606      	mov	r6, r0
	ASSERT(hw);
  402138:	460c      	mov	r4, r1
  40213a:	1c08      	adds	r0, r1, #0
  40213c:	bf18      	it	ne
  40213e:	2001      	movne	r0, #1
  402140:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  402144:	4944      	ldr	r1, [pc, #272]	; (402258 <_pwm_init+0x124>)
  402146:	4b45      	ldr	r3, [pc, #276]	; (40225c <_pwm_init+0x128>)
  402148:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  40214a:	4620      	mov	r0, r4
  40214c:	4b44      	ldr	r3, [pc, #272]	; (402260 <_pwm_init+0x12c>)
  40214e:	4798      	blx	r3
  402150:	4605      	mov	r5, r0

	device->hw = hw;
  402152:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  402154:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  402156:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  402158:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  40215a:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  40215c:	6903      	ldr	r3, [r0, #16]
  40215e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  402162:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  402164:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  402166:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  402168:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  40216a:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  40216c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  402170:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  402172:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  402174:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  402176:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  40217a:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  40217c:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  402180:	2300      	movs	r3, #0
  402182:	e019      	b.n	4021b8 <_pwm_init+0x84>
		ch = cfg->ch + i;
  402184:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  402186:	0118      	lsls	r0, r3, #4
  402188:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  40218c:	5c3a      	ldrb	r2, [r7, r0]
  40218e:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  402192:	3210      	adds	r2, #16
  402194:	0152      	lsls	r2, r2, #5
  402196:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  402198:	5c3a      	ldrb	r2, [r7, r0]
  40219a:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  40219e:	3210      	adds	r2, #16
  4021a0:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4021a4:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  4021a6:	5c3a      	ldrb	r2, [r7, r0]
  4021a8:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  4021ac:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4021b0:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  4021b4:	3301      	adds	r3, #1
  4021b6:	b25b      	sxtb	r3, r3
  4021b8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4021ba:	4293      	cmp	r3, r2
  4021bc:	d3e2      	bcc.n	402184 <_pwm_init+0x50>
  4021be:	2300      	movs	r3, #0
  4021c0:	e014      	b.n	4021ec <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  4021c2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4021c4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4021c8:	0082      	lsls	r2, r0, #2
  4021ca:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  4021ce:	5c88      	ldrb	r0, [r1, r2]
  4021d0:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  4021d4:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  4021d8:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4021dc:	5c8a      	ldrb	r2, [r1, r2]
  4021de:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4021e2:	3213      	adds	r2, #19
  4021e4:	0112      	lsls	r2, r2, #4
  4021e6:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  4021e8:	3301      	adds	r3, #1
  4021ea:	b25b      	sxtb	r3, r3
  4021ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4021ee:	4293      	cmp	r3, r2
  4021f0:	d3e7      	bcc.n	4021c2 <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  4021f2:	4631      	mov	r1, r6
  4021f4:	4620      	mov	r0, r4
  4021f6:	4b1b      	ldr	r3, [pc, #108]	; (402264 <_pwm_init+0x130>)
  4021f8:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  4021fa:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4021fe:	2b00      	cmp	r3, #0
  402200:	db0d      	blt.n	40221e <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402202:	095a      	lsrs	r2, r3, #5
  402204:	f003 031f 	and.w	r3, r3, #31
  402208:	2101      	movs	r1, #1
  40220a:	fa01 f303 	lsl.w	r3, r1, r3
  40220e:	3220      	adds	r2, #32
  402210:	4915      	ldr	r1, [pc, #84]	; (402268 <_pwm_init+0x134>)
  402212:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402216:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40221a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40221e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402222:	2b00      	cmp	r3, #0
  402224:	db09      	blt.n	40223a <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402226:	095a      	lsrs	r2, r3, #5
  402228:	f003 031f 	and.w	r3, r3, #31
  40222c:	2101      	movs	r1, #1
  40222e:	fa01 f303 	lsl.w	r3, r1, r3
  402232:	3260      	adds	r2, #96	; 0x60
  402234:	490c      	ldr	r1, [pc, #48]	; (402268 <_pwm_init+0x134>)
  402236:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  40223a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40223e:	2b00      	cmp	r3, #0
  402240:	db08      	blt.n	402254 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402242:	0959      	lsrs	r1, r3, #5
  402244:	f003 031f 	and.w	r3, r3, #31
  402248:	2201      	movs	r2, #1
  40224a:	fa02 f303 	lsl.w	r3, r2, r3
  40224e:	4a06      	ldr	r2, [pc, #24]	; (402268 <_pwm_init+0x134>)
  402250:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  402254:	2000      	movs	r0, #0
  402256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402258:	00406220 	.word	0x00406220
  40225c:	0040183d 	.word	0x0040183d
  402260:	004020a5 	.word	0x004020a5
  402264:	004020d5 	.word	0x004020d5
  402268:	e000e100 	.word	0xe000e100

0040226c <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  40226c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  40226e:	4604      	mov	r4, r0
  402270:	f240 12b5 	movw	r2, #437	; 0x1b5
  402274:	490b      	ldr	r1, [pc, #44]	; (4022a4 <_pwm_enable+0x38>)
  402276:	3000      	adds	r0, #0
  402278:	bf18      	it	ne
  40227a:	2001      	movne	r0, #1
  40227c:	4b0a      	ldr	r3, [pc, #40]	; (4022a8 <_pwm_enable+0x3c>)
  40227e:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  402280:	6920      	ldr	r0, [r4, #16]
  402282:	4b0a      	ldr	r3, [pc, #40]	; (4022ac <_pwm_enable+0x40>)
  402284:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  402286:	2300      	movs	r3, #0
  402288:	e008      	b.n	40229c <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  40228a:	6921      	ldr	r1, [r4, #16]
  40228c:	6b05      	ldr	r5, [r0, #48]	; 0x30
  40228e:	011a      	lsls	r2, r3, #4
  402290:	5cad      	ldrb	r5, [r5, r2]
  402292:	2201      	movs	r2, #1
  402294:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  402296:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  402298:	3301      	adds	r3, #1
  40229a:	b25b      	sxtb	r3, r3
  40229c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40229e:	4293      	cmp	r3, r2
  4022a0:	d3f3      	bcc.n	40228a <_pwm_enable+0x1e>
	}
}
  4022a2:	bd38      	pop	{r3, r4, r5, pc}
  4022a4:	00406220 	.word	0x00406220
  4022a8:	0040183d 	.word	0x0040183d
  4022ac:	004020a5 	.word	0x004020a5

004022b0 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  4022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4022b2:	460d      	mov	r5, r1
  4022b4:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  4022b6:	4604      	mov	r4, r0
  4022b8:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  4022bc:	4911      	ldr	r1, [pc, #68]	; (402304 <_pwm_set_param+0x54>)
  4022be:	2800      	cmp	r0, #0
  4022c0:	bf18      	it	ne
  4022c2:	42ae      	cmpne	r6, r5
  4022c4:	bf34      	ite	cc
  4022c6:	2001      	movcc	r0, #1
  4022c8:	2000      	movcs	r0, #0
  4022ca:	4b0f      	ldr	r3, [pc, #60]	; (402308 <_pwm_set_param+0x58>)
  4022cc:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  4022ce:	6920      	ldr	r0, [r4, #16]
  4022d0:	4b0e      	ldr	r3, [pc, #56]	; (40230c <_pwm_set_param+0x5c>)
  4022d2:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4022d4:	2300      	movs	r3, #0
  4022d6:	e010      	b.n	4022fa <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  4022d8:	6922      	ldr	r2, [r4, #16]
  4022da:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4022dc:	0119      	lsls	r1, r3, #4
  4022de:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  4022e0:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  4022e4:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  4022e8:	6922      	ldr	r2, [r4, #16]
  4022ea:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4022ec:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  4022ee:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  4022f2:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  4022f6:	3301      	adds	r3, #1
  4022f8:	b2db      	uxtb	r3, r3
  4022fa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4022fc:	4293      	cmp	r3, r2
  4022fe:	d3eb      	bcc.n	4022d8 <_pwm_set_param+0x28>
	}
}
  402300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402302:	bf00      	nop
  402304:	00406220 	.word	0x00406220
  402308:	0040183d 	.word	0x0040183d
  40230c:	004020a5 	.word	0x004020a5

00402310 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  402310:	b510      	push	{r4, lr}
	ASSERT(device);
  402312:	4604      	mov	r4, r0
  402314:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402318:	4907      	ldr	r1, [pc, #28]	; (402338 <_pwm_is_enabled+0x28>)
  40231a:	3000      	adds	r0, #0
  40231c:	bf18      	it	ne
  40231e:	2001      	movne	r0, #1
  402320:	4b06      	ldr	r3, [pc, #24]	; (40233c <_pwm_is_enabled+0x2c>)
  402322:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  402324:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  402326:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  402328:	f013 0f0f 	tst.w	r3, #15
  40232c:	d001      	beq.n	402332 <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  40232e:	2001      	movs	r0, #1
	}
}
  402330:	bd10      	pop	{r4, pc}
		return false;
  402332:	2000      	movs	r0, #0
  402334:	bd10      	pop	{r4, pc}
  402336:	bf00      	nop
  402338:	00406220 	.word	0x00406220
  40233c:	0040183d 	.word	0x0040183d

00402340 <_pwm_set_irq_state>:

	return hri_pwm_read_CDTY_reg(device->hw, cfg->ch[0].index);
}

void _pwm_set_irq_state(struct _pwm_device *const device, const enum _pwm_callback_type type, const bool disable)
{
  402340:	b538      	push	{r3, r4, r5, lr}
  402342:	460d      	mov	r5, r1
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device);
  402344:	4604      	mov	r4, r0
  402346:	f44f 7200 	mov.w	r2, #512	; 0x200
  40234a:	4912      	ldr	r1, [pc, #72]	; (402394 <_pwm_set_irq_state+0x54>)
  40234c:	3000      	adds	r0, #0
  40234e:	bf18      	it	ne
  402350:	2001      	movne	r0, #1
  402352:	4b11      	ldr	r3, [pc, #68]	; (402398 <_pwm_set_irq_state+0x58>)
  402354:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  402356:	6920      	ldr	r0, [r4, #16]
  402358:	4b10      	ldr	r3, [pc, #64]	; (40239c <_pwm_set_irq_state+0x5c>)
  40235a:	4798      	blx	r3

	if (PWM_DEVICE_PERIOD_CB == type) {
  40235c:	b18d      	cbz	r5, 402382 <_pwm_set_irq_state+0x42>
		for (i = 0; i < cfg->ch_num; i++) {
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
		}
	} else if (PWM_DEVICE_ERROR_CB == type) {
  40235e:	2d01      	cmp	r5, #1
  402360:	d011      	beq.n	402386 <_pwm_set_irq_state+0x46>
  402362:	bd38      	pop	{r3, r4, r5, pc}
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
  402364:	6921      	ldr	r1, [r4, #16]
  402366:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402368:	0113      	lsls	r3, r2, #4
  40236a:	5ced      	ldrb	r5, [r5, r3]
  40236c:	2301      	movs	r3, #1
  40236e:	40ab      	lsls	r3, r5
	((Pwm *)hw)->PWM_IER1 = data;
  402370:	610b      	str	r3, [r1, #16]
	((Pwm *)hw)->PWM_IDR1 = ~data;
  402372:	43db      	mvns	r3, r3
  402374:	614b      	str	r3, [r1, #20]
		for (i = 0; i < cfg->ch_num; i++) {
  402376:	3201      	adds	r2, #1
  402378:	b2d2      	uxtb	r2, r2
  40237a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40237c:	429a      	cmp	r2, r3
  40237e:	d3f1      	bcc.n	402364 <_pwm_set_irq_state+0x24>
  402380:	bd38      	pop	{r3, r4, r5, pc}
  402382:	2200      	movs	r2, #0
  402384:	e7f9      	b.n	40237a <_pwm_set_irq_state+0x3a>
		ASSERT(false);
  402386:	f240 2209 	movw	r2, #521	; 0x209
  40238a:	4902      	ldr	r1, [pc, #8]	; (402394 <_pwm_set_irq_state+0x54>)
  40238c:	2000      	movs	r0, #0
  40238e:	4b02      	ldr	r3, [pc, #8]	; (402398 <_pwm_set_irq_state+0x58>)
  402390:	4798      	blx	r3
	}
}
  402392:	e7e6      	b.n	402362 <_pwm_set_irq_state+0x22>
  402394:	00406220 	.word	0x00406220
  402398:	0040183d 	.word	0x0040183d
  40239c:	004020a5 	.word	0x004020a5

004023a0 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  4023a0:	2000      	movs	r0, #0
  4023a2:	4770      	bx	lr

004023a4 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  4023a4:	4b03      	ldr	r3, [pc, #12]	; (4023b4 <_system_time_init+0x10>)
  4023a6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4023aa:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  4023ac:	2205      	movs	r2, #5
  4023ae:	601a      	str	r2, [r3, #0]
  4023b0:	4770      	bx	lr
  4023b2:	bf00      	nop
  4023b4:	e000e010 	.word	0xe000e010

004023b8 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  4023b8:	b508      	push	{r3, lr}
	_system_time_init(hw);
  4023ba:	4b01      	ldr	r3, [pc, #4]	; (4023c0 <_delay_init+0x8>)
  4023bc:	4798      	blx	r3
  4023be:	bd08      	pop	{r3, pc}
  4023c0:	004023a5 	.word	0x004023a5

004023c4 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  4023c4:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  4023c6:	e00d      	b.n	4023e4 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  4023c8:	4b0d      	ldr	r3, [pc, #52]	; (402400 <_delay_cycles+0x3c>)
  4023ca:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  4023ce:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  4023d0:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4023d2:	4b0b      	ldr	r3, [pc, #44]	; (402400 <_delay_cycles+0x3c>)
  4023d4:	681b      	ldr	r3, [r3, #0]
  4023d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4023da:	d0fa      	beq.n	4023d2 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  4023dc:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4023e0:	3101      	adds	r1, #1
	while (n--) {
  4023e2:	4610      	mov	r0, r2
  4023e4:	1e43      	subs	r3, r0, #1
  4023e6:	b2da      	uxtb	r2, r3
  4023e8:	2800      	cmp	r0, #0
  4023ea:	d1ed      	bne.n	4023c8 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  4023ec:	4b04      	ldr	r3, [pc, #16]	; (402400 <_delay_cycles+0x3c>)
  4023ee:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4023f0:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4023f2:	4b03      	ldr	r3, [pc, #12]	; (402400 <_delay_cycles+0x3c>)
  4023f4:	681b      	ldr	r3, [r3, #0]
  4023f6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4023fa:	d0fa      	beq.n	4023f2 <_delay_cycles+0x2e>
		;
}
  4023fc:	4770      	bx	lr
  4023fe:	bf00      	nop
  402400:	e000e010 	.word	0xe000e010

00402404 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  402404:	2300      	movs	r3, #0
  402406:	2b01      	cmp	r3, #1
  402408:	d815      	bhi.n	402436 <get_cfg+0x32>
{
  40240a:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  40240c:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  402410:	008a      	lsls	r2, r1, #2
  402412:	490a      	ldr	r1, [pc, #40]	; (40243c <get_cfg+0x38>)
  402414:	588a      	ldr	r2, [r1, r2]
  402416:	4282      	cmp	r2, r0
  402418:	d007      	beq.n	40242a <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  40241a:	3301      	adds	r3, #1
  40241c:	b2db      	uxtb	r3, r3
  40241e:	2b01      	cmp	r3, #1
  402420:	d9f4      	bls.n	40240c <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  402422:	2000      	movs	r0, #0
}
  402424:	f85d 4b04 	ldr.w	r4, [sp], #4
  402428:	4770      	bx	lr
			return &(_tcs[i]);
  40242a:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  40242e:	00a3      	lsls	r3, r4, #2
  402430:	4608      	mov	r0, r1
  402432:	4418      	add	r0, r3
  402434:	e7f6      	b.n	402424 <get_cfg+0x20>
	return NULL;
  402436:	2000      	movs	r0, #0
  402438:	4770      	bx	lr
  40243a:	bf00      	nop
  40243c:	20400000 	.word	0x20400000

00402440 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  402440:	4b06      	ldr	r3, [pc, #24]	; (40245c <_tc_init_irq_param+0x1c>)
  402442:	4298      	cmp	r0, r3
  402444:	d003      	beq.n	40244e <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  402446:	4b06      	ldr	r3, [pc, #24]	; (402460 <_tc_init_irq_param+0x20>)
  402448:	4298      	cmp	r0, r3
  40244a:	d003      	beq.n	402454 <_tc_init_irq_param+0x14>
  40244c:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  40244e:	4b05      	ldr	r3, [pc, #20]	; (402464 <_tc_init_irq_param+0x24>)
  402450:	6019      	str	r1, [r3, #0]
  402452:	e7f8      	b.n	402446 <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  402454:	4b03      	ldr	r3, [pc, #12]	; (402464 <_tc_init_irq_param+0x24>)
  402456:	6059      	str	r1, [r3, #4]
	}
}
  402458:	e7f8      	b.n	40244c <_tc_init_irq_param+0xc>
  40245a:	bf00      	nop
  40245c:	4000c000 	.word	0x4000c000
  402460:	40054000 	.word	0x40054000
  402464:	20400398 	.word	0x20400398

00402468 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  402468:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  40246a:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  40246c:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  40246e:	f013 0f10 	tst.w	r3, #16
  402472:	d100      	bne.n	402476 <tc_interrupt_handler+0xe>
  402474:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  402476:	6803      	ldr	r3, [r0, #0]
  402478:	4798      	blx	r3
	}
}
  40247a:	e7fb      	b.n	402474 <tc_interrupt_handler+0xc>

0040247c <_timer_init>:
{
  40247c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402480:	4606      	mov	r6, r0
  402482:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  402484:	4608      	mov	r0, r1
  402486:	4b2f      	ldr	r3, [pc, #188]	; (402544 <_timer_init+0xc8>)
  402488:	4798      	blx	r3
  40248a:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  40248c:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  402490:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  402494:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  402496:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  40249a:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  40249c:	22c3      	movs	r2, #195	; 0xc3
  40249e:	492a      	ldr	r1, [pc, #168]	; (402548 <_timer_init+0xcc>)
  4024a0:	2001      	movs	r0, #1
  4024a2:	4b2a      	ldr	r3, [pc, #168]	; (40254c <_timer_init+0xd0>)
  4024a4:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  4024a6:	f248 0307 	movw	r3, #32775	; 0x8007
  4024aa:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4024ac:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4024b0:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4024b4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4024b8:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4024ba:	2300      	movs	r3, #0
  4024bc:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  4024be:	f248 020f 	movw	r2, #32783	; 0x800f
  4024c2:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4024c4:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4024c8:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4024cc:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4024d0:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4024d2:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  4024d4:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  4024d6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  4024da:	4631      	mov	r1, r6
  4024dc:	4620      	mov	r0, r4
  4024de:	4b1c      	ldr	r3, [pc, #112]	; (402550 <_timer_init+0xd4>)
  4024e0:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  4024e2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4024e6:	2b00      	cmp	r3, #0
  4024e8:	db0d      	blt.n	402506 <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4024ea:	095a      	lsrs	r2, r3, #5
  4024ec:	f003 031f 	and.w	r3, r3, #31
  4024f0:	2101      	movs	r1, #1
  4024f2:	fa01 f303 	lsl.w	r3, r1, r3
  4024f6:	3220      	adds	r2, #32
  4024f8:	4916      	ldr	r1, [pc, #88]	; (402554 <_timer_init+0xd8>)
  4024fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4024fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402502:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  402506:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40250a:	2b00      	cmp	r3, #0
  40250c:	db09      	blt.n	402522 <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40250e:	095a      	lsrs	r2, r3, #5
  402510:	f003 031f 	and.w	r3, r3, #31
  402514:	2101      	movs	r1, #1
  402516:	fa01 f303 	lsl.w	r3, r1, r3
  40251a:	3260      	adds	r2, #96	; 0x60
  40251c:	490d      	ldr	r1, [pc, #52]	; (402554 <_timer_init+0xd8>)
  40251e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  402522:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402526:	2b00      	cmp	r3, #0
  402528:	db08      	blt.n	40253c <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40252a:	0959      	lsrs	r1, r3, #5
  40252c:	f003 031f 	and.w	r3, r3, #31
  402530:	2201      	movs	r2, #1
  402532:	fa02 f303 	lsl.w	r3, r2, r3
  402536:	4a07      	ldr	r2, [pc, #28]	; (402554 <_timer_init+0xd8>)
  402538:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  40253c:	2000      	movs	r0, #0
  40253e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402542:	bf00      	nop
  402544:	00402405 	.word	0x00402405
  402548:	00406238 	.word	0x00406238
  40254c:	0040183d 	.word	0x0040183d
  402550:	00402441 	.word	0x00402441
  402554:	e000e100 	.word	0xe000e100

00402558 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402558:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  40255a:	2305      	movs	r3, #5
  40255c:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  40255e:	68c2      	ldr	r2, [r0, #12]
  402560:	6413      	str	r3, [r2, #64]	; 0x40
  402562:	4770      	bx	lr

00402564 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  402564:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  402566:	6a13      	ldr	r3, [r2, #32]
  402568:	f3c3 4300 	ubfx	r3, r3, #16, #1
  40256c:	6e10      	ldr	r0, [r2, #96]	; 0x60
  40256e:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  402572:	4318      	orrs	r0, r3
  402574:	4770      	bx	lr

00402576 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  402576:	2000      	movs	r0, #0
  402578:	4770      	bx	lr
	...

0040257c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  40257c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  40257e:	4b02      	ldr	r3, [pc, #8]	; (402588 <TC0_Handler+0xc>)
  402580:	6818      	ldr	r0, [r3, #0]
  402582:	4b02      	ldr	r3, [pc, #8]	; (40258c <TC0_Handler+0x10>)
  402584:	4798      	blx	r3
  402586:	bd08      	pop	{r3, pc}
  402588:	20400398 	.word	0x20400398
  40258c:	00402469 	.word	0x00402469

00402590 <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  402590:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  402592:	4b02      	ldr	r3, [pc, #8]	; (40259c <TC9_Handler+0xc>)
  402594:	6858      	ldr	r0, [r3, #4]
  402596:	4b02      	ldr	r3, [pc, #8]	; (4025a0 <TC9_Handler+0x10>)
  402598:	4798      	blx	r3
  40259a:	bd08      	pop	{r3, pc}
  40259c:	20400398 	.word	0x20400398
  4025a0:	00402469 	.word	0x00402469

004025a4 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  4025a4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4025a6:	4604      	mov	r4, r0
  4025a8:	f240 222b 	movw	r2, #555	; 0x22b
  4025ac:	4905      	ldr	r1, [pc, #20]	; (4025c4 <_usart_get_hardware_index+0x20>)
  4025ae:	3000      	adds	r0, #0
  4025b0:	bf18      	it	ne
  4025b2:	2001      	movne	r0, #1
  4025b4:	4b04      	ldr	r3, [pc, #16]	; (4025c8 <_usart_get_hardware_index+0x24>)
  4025b6:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  4025b8:	4804      	ldr	r0, [pc, #16]	; (4025cc <_usart_get_hardware_index+0x28>)
  4025ba:	4420      	add	r0, r4
}
  4025bc:	f3c0 3087 	ubfx	r0, r0, #14, #8
  4025c0:	bd10      	pop	{r4, pc}
  4025c2:	bf00      	nop
  4025c4:	00406258 	.word	0x00406258
  4025c8:	0040183d 	.word	0x0040183d
  4025cc:	bffdc000 	.word	0xbffdc000

004025d0 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  4025d0:	b510      	push	{r4, lr}
	ASSERT(hw);
  4025d2:	4604      	mov	r4, r0
  4025d4:	f240 2287 	movw	r2, #647	; 0x287
  4025d8:	490e      	ldr	r1, [pc, #56]	; (402614 <_get_usart_index+0x44>)
  4025da:	3000      	adds	r0, #0
  4025dc:	bf18      	it	ne
  4025de:	2001      	movne	r0, #1
  4025e0:	4b0d      	ldr	r3, [pc, #52]	; (402618 <_get_usart_index+0x48>)
  4025e2:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  4025e4:	4620      	mov	r0, r4
  4025e6:	4b0d      	ldr	r3, [pc, #52]	; (40261c <_get_usart_index+0x4c>)
  4025e8:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4025ea:	2300      	movs	r3, #0
  4025ec:	b143      	cbz	r3, 402600 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  4025ee:	f240 2291 	movw	r2, #657	; 0x291
  4025f2:	4908      	ldr	r1, [pc, #32]	; (402614 <_get_usart_index+0x44>)
  4025f4:	2000      	movs	r0, #0
  4025f6:	4b08      	ldr	r3, [pc, #32]	; (402618 <_get_usart_index+0x48>)
  4025f8:	4798      	blx	r3
	return 0;
  4025fa:	2300      	movs	r3, #0
}
  4025fc:	4618      	mov	r0, r3
  4025fe:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  402600:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402604:	008a      	lsls	r2, r1, #2
  402606:	4906      	ldr	r1, [pc, #24]	; (402620 <_get_usart_index+0x50>)
  402608:	5c8a      	ldrb	r2, [r1, r2]
  40260a:	4290      	cmp	r0, r2
  40260c:	d0f6      	beq.n	4025fc <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40260e:	3301      	adds	r3, #1
  402610:	b2db      	uxtb	r3, r3
  402612:	e7eb      	b.n	4025ec <_get_usart_index+0x1c>
  402614:	00406258 	.word	0x00406258
  402618:	0040183d 	.word	0x0040183d
  40261c:	004025a5 	.word	0x004025a5
  402620:	0040624c 	.word	0x0040624c

00402624 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  402624:	b510      	push	{r4, lr}
	ASSERT(hw);
  402626:	4604      	mov	r4, r0
  402628:	f240 229e 	movw	r2, #670	; 0x29e
  40262c:	4911      	ldr	r1, [pc, #68]	; (402674 <_usart_init+0x50>)
  40262e:	3000      	adds	r0, #0
  402630:	bf18      	it	ne
  402632:	2001      	movne	r0, #1
  402634:	4b10      	ldr	r3, [pc, #64]	; (402678 <_usart_init+0x54>)
  402636:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  402638:	4620      	mov	r0, r4
  40263a:	4b10      	ldr	r3, [pc, #64]	; (40267c <_usart_init+0x58>)
  40263c:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  40263e:	4b10      	ldr	r3, [pc, #64]	; (402680 <_usart_init+0x5c>)
  402640:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  402644:	2300      	movs	r3, #0
  402646:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  402648:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  40264a:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  40264c:	22ac      	movs	r2, #172	; 0xac
  40264e:	6022      	str	r2, [r4, #0]
  402650:	f44f 7280 	mov.w	r2, #256	; 0x100
  402654:	6022      	str	r2, [r4, #0]
  402656:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40265a:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  40265c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  402660:	0081      	lsls	r1, r0, #2
  402662:	4a08      	ldr	r2, [pc, #32]	; (402684 <_usart_init+0x60>)
  402664:	440a      	add	r2, r1
  402666:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  402668:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  40266a:	4a07      	ldr	r2, [pc, #28]	; (402688 <_usart_init+0x64>)
  40266c:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  40266e:	4618      	mov	r0, r3
  402670:	bd10      	pop	{r4, pc}
  402672:	bf00      	nop
  402674:	00406258 	.word	0x00406258
  402678:	0040183d 	.word	0x0040183d
  40267c:	004025d1 	.word	0x004025d1
  402680:	55534100 	.word	0x55534100
  402684:	0040624c 	.word	0x0040624c
  402688:	000100f4 	.word	0x000100f4

0040268c <_usart_sync_init>:
{
  40268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40268e:	460c      	mov	r4, r1
	ASSERT(device);
  402690:	4e09      	ldr	r6, [pc, #36]	; (4026b8 <_usart_sync_init+0x2c>)
  402692:	4607      	mov	r7, r0
  402694:	22bd      	movs	r2, #189	; 0xbd
  402696:	4631      	mov	r1, r6
  402698:	3000      	adds	r0, #0
  40269a:	bf18      	it	ne
  40269c:	2001      	movne	r0, #1
  40269e:	4d07      	ldr	r5, [pc, #28]	; (4026bc <_usart_sync_init+0x30>)
  4026a0:	47a8      	blx	r5
	ASSERT(hw);
  4026a2:	22be      	movs	r2, #190	; 0xbe
  4026a4:	4631      	mov	r1, r6
  4026a6:	1c20      	adds	r0, r4, #0
  4026a8:	bf18      	it	ne
  4026aa:	2001      	movne	r0, #1
  4026ac:	47a8      	blx	r5
	device->hw = hw;
  4026ae:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  4026b0:	4620      	mov	r0, r4
  4026b2:	4b03      	ldr	r3, [pc, #12]	; (4026c0 <_usart_sync_init+0x34>)
  4026b4:	4798      	blx	r3
}
  4026b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4026b8:	00406258 	.word	0x00406258
  4026bc:	0040183d 	.word	0x0040183d
  4026c0:	00402625 	.word	0x00402625

004026c4 <_usart_sync_enable>:
{
  4026c4:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4026c6:	4e0a      	ldr	r6, [pc, #40]	; (4026f0 <_usart_sync_enable+0x2c>)
  4026c8:	4604      	mov	r4, r0
  4026ca:	f240 1205 	movw	r2, #261	; 0x105
  4026ce:	4631      	mov	r1, r6
  4026d0:	3000      	adds	r0, #0
  4026d2:	bf18      	it	ne
  4026d4:	2001      	movne	r0, #1
  4026d6:	4d07      	ldr	r5, [pc, #28]	; (4026f4 <_usart_sync_enable+0x30>)
  4026d8:	47a8      	blx	r5
	_usart_enable(device->hw);
  4026da:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4026dc:	f240 22c7 	movw	r2, #711	; 0x2c7
  4026e0:	4631      	mov	r1, r6
  4026e2:	1c20      	adds	r0, r4, #0
  4026e4:	bf18      	it	ne
  4026e6:	2001      	movne	r0, #1
  4026e8:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  4026ea:	2350      	movs	r3, #80	; 0x50
  4026ec:	6023      	str	r3, [r4, #0]
  4026ee:	bd70      	pop	{r4, r5, r6, pc}
  4026f0:	00406258 	.word	0x00406258
  4026f4:	0040183d 	.word	0x0040183d

004026f8 <_usart_sync_write_byte>:
{
  4026f8:	b538      	push	{r3, r4, r5, lr}
  4026fa:	460c      	mov	r4, r1
	ASSERT(device);
  4026fc:	4605      	mov	r5, r0
  4026fe:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  402702:	4904      	ldr	r1, [pc, #16]	; (402714 <_usart_sync_write_byte+0x1c>)
  402704:	3000      	adds	r0, #0
  402706:	bf18      	it	ne
  402708:	2001      	movne	r0, #1
  40270a:	4b03      	ldr	r3, [pc, #12]	; (402718 <_usart_sync_write_byte+0x20>)
  40270c:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  40270e:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  402710:	61dc      	str	r4, [r3, #28]
  402712:	bd38      	pop	{r3, r4, r5, pc}
  402714:	00406258 	.word	0x00406258
  402718:	0040183d 	.word	0x0040183d

0040271c <_usart_sync_read_byte>:
{
  40271c:	b510      	push	{r4, lr}
	ASSERT(device);
  40271e:	4604      	mov	r4, r0
  402720:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  402724:	4904      	ldr	r1, [pc, #16]	; (402738 <_usart_sync_read_byte+0x1c>)
  402726:	3000      	adds	r0, #0
  402728:	bf18      	it	ne
  40272a:	2001      	movne	r0, #1
  40272c:	4b03      	ldr	r3, [pc, #12]	; (40273c <_usart_sync_read_byte+0x20>)
  40272e:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  402730:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  402732:	6998      	ldr	r0, [r3, #24]
}
  402734:	b2c0      	uxtb	r0, r0
  402736:	bd10      	pop	{r4, pc}
  402738:	00406258 	.word	0x00406258
  40273c:	0040183d 	.word	0x0040183d

00402740 <_usart_sync_is_ready_to_send>:
{
  402740:	b510      	push	{r4, lr}
	ASSERT(device);
  402742:	4604      	mov	r4, r0
  402744:	f240 12c3 	movw	r2, #451	; 0x1c3
  402748:	4905      	ldr	r1, [pc, #20]	; (402760 <_usart_sync_is_ready_to_send+0x20>)
  40274a:	3000      	adds	r0, #0
  40274c:	bf18      	it	ne
  40274e:	2001      	movne	r0, #1
  402750:	4b04      	ldr	r3, [pc, #16]	; (402764 <_usart_sync_is_ready_to_send+0x24>)
  402752:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  402754:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  402756:	6958      	ldr	r0, [r3, #20]
}
  402758:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40275c:	bd10      	pop	{r4, pc}
  40275e:	bf00      	nop
  402760:	00406258 	.word	0x00406258
  402764:	0040183d 	.word	0x0040183d

00402768 <_usart_sync_is_transmit_done>:
{
  402768:	b510      	push	{r4, lr}
	ASSERT(device);
  40276a:	4604      	mov	r4, r0
  40276c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  402770:	4905      	ldr	r1, [pc, #20]	; (402788 <_usart_sync_is_transmit_done+0x20>)
  402772:	3000      	adds	r0, #0
  402774:	bf18      	it	ne
  402776:	2001      	movne	r0, #1
  402778:	4b04      	ldr	r3, [pc, #16]	; (40278c <_usart_sync_is_transmit_done+0x24>)
  40277a:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  40277c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  40277e:	6958      	ldr	r0, [r3, #20]
}
  402780:	f3c0 2040 	ubfx	r0, r0, #9, #1
  402784:	bd10      	pop	{r4, pc}
  402786:	bf00      	nop
  402788:	00406258 	.word	0x00406258
  40278c:	0040183d 	.word	0x0040183d

00402790 <_usart_sync_is_byte_received>:
{
  402790:	b510      	push	{r4, lr}
	ASSERT(device);
  402792:	4604      	mov	r4, r0
  402794:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402798:	4905      	ldr	r1, [pc, #20]	; (4027b0 <_usart_sync_is_byte_received+0x20>)
  40279a:	3000      	adds	r0, #0
  40279c:	bf18      	it	ne
  40279e:	2001      	movne	r0, #1
  4027a0:	4b04      	ldr	r3, [pc, #16]	; (4027b4 <_usart_sync_is_byte_received+0x24>)
  4027a2:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  4027a4:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  4027a6:	6958      	ldr	r0, [r3, #20]
  4027a8:	f000 0001 	and.w	r0, r0, #1
}
  4027ac:	bd10      	pop	{r4, pc}
  4027ae:	bf00      	nop
  4027b0:	00406258 	.word	0x00406258
  4027b4:	0040183d 	.word	0x0040183d

004027b8 <_usart_get_usart_sync>:
}
  4027b8:	2000      	movs	r0, #0
  4027ba:	4770      	bx	lr

004027bc <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  4027bc:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4027be:	2300      	movs	r3, #0
  4027c0:	e004      	b.n	4027cc <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  4027c2:	0199      	lsls	r1, r3, #6
  4027c4:	4a16      	ldr	r2, [pc, #88]	; (402820 <_dma_init+0x64>)
  4027c6:	5852      	ldr	r2, [r2, r1]
  4027c8:	3301      	adds	r3, #1
  4027ca:	b2db      	uxtb	r3, r3
  4027cc:	2b17      	cmp	r3, #23
  4027ce:	d9f8      	bls.n	4027c2 <_dma_init+0x6>
  4027d0:	2300      	movs	r3, #0
  4027d2:	e014      	b.n	4027fe <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  4027d4:	4c13      	ldr	r4, [pc, #76]	; (402824 <_dma_init+0x68>)
  4027d6:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  4027da:	2100      	movs	r1, #0
  4027dc:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  4027de:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  4027e0:	1c98      	adds	r0, r3, #2
  4027e2:	0180      	lsls	r0, r0, #6
  4027e4:	1825      	adds	r5, r4, r0
  4027e6:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  4027e8:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  4027ea:	490f      	ldr	r1, [pc, #60]	; (402828 <_dma_init+0x6c>)
  4027ec:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  4027f0:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  4027f2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4027f6:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  4027f8:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4027fa:	3301      	adds	r3, #1
  4027fc:	b2db      	uxtb	r3, r3
  4027fe:	2b17      	cmp	r3, #23
  402800:	d9e8      	bls.n	4027d4 <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402802:	4b0a      	ldr	r3, [pc, #40]	; (40282c <_dma_init+0x70>)
  402804:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40280c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402810:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402814:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402818:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  40281a:	2000      	movs	r0, #0
  40281c:	bc30      	pop	{r4, r5}
  40281e:	4770      	bx	lr
  402820:	4007805c 	.word	0x4007805c
  402824:	40078000 	.word	0x40078000
  402828:	00406274 	.word	0x00406274
  40282c:	e000e100 	.word	0xe000e100

00402830 <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  402830:	0180      	lsls	r0, r0, #6
  402832:	4b02      	ldr	r3, [pc, #8]	; (40283c <_dma_set_destination_address+0xc>)
  402834:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  402836:	2000      	movs	r0, #0
  402838:	4770      	bx	lr
  40283a:	bf00      	nop
  40283c:	40078064 	.word	0x40078064

00402840 <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  402840:	0180      	lsls	r0, r0, #6
  402842:	4b02      	ldr	r3, [pc, #8]	; (40284c <_dma_set_source_address+0xc>)
  402844:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  402846:	2000      	movs	r0, #0
  402848:	4770      	bx	lr
  40284a:	bf00      	nop
  40284c:	40078060 	.word	0x40078060

00402850 <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  402850:	0180      	lsls	r0, r0, #6
  402852:	4a04      	ldr	r2, [pc, #16]	; (402864 <_dma_set_data_amount+0x14>)
  402854:	4402      	add	r2, r0
  402856:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  402858:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  40285c:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  40285e:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  402860:	2000      	movs	r0, #0
  402862:	4770      	bx	lr
  402864:	40078000 	.word	0x40078000

00402868 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  402868:	2301      	movs	r3, #1
  40286a:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  40286e:	4b03      	ldr	r3, [pc, #12]	; (40287c <_dma_enable_transaction+0x14>)
  402870:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  402872:	b101      	cbz	r1, 402876 <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  402874:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  402876:	2000      	movs	r0, #0
  402878:	4770      	bx	lr
  40287a:	bf00      	nop
  40287c:	40078000 	.word	0x40078000

00402880 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  402880:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  402884:	008a      	lsls	r2, r1, #2
  402886:	4b02      	ldr	r3, [pc, #8]	; (402890 <_dma_get_channel_resource+0x10>)
  402888:	4413      	add	r3, r2
  40288a:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  40288c:	2000      	movs	r0, #0
  40288e:	4770      	bx	lr
  402890:	204003a0 	.word	0x204003a0

00402894 <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  402894:	b19a      	cbz	r2, 4028be <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  402896:	b951      	cbnz	r1, 4028ae <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  402898:	0182      	lsls	r2, r0, #6
  40289a:	4b13      	ldr	r3, [pc, #76]	; (4028e8 <_dma_set_irq_state+0x54>)
  40289c:	4413      	add	r3, r2
  40289e:	2201      	movs	r2, #1
  4028a0:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  4028a2:	2301      	movs	r3, #1
  4028a4:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  4028a8:	4b0f      	ldr	r3, [pc, #60]	; (4028e8 <_dma_set_irq_state+0x54>)
  4028aa:	60d8      	str	r0, [r3, #12]
  4028ac:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4028ae:	2901      	cmp	r1, #1
  4028b0:	d1f7      	bne.n	4028a2 <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  4028b2:	0182      	lsls	r2, r0, #6
  4028b4:	4b0c      	ldr	r3, [pc, #48]	; (4028e8 <_dma_set_irq_state+0x54>)
  4028b6:	4413      	add	r3, r2
  4028b8:	2270      	movs	r2, #112	; 0x70
  4028ba:	651a      	str	r2, [r3, #80]	; 0x50
  4028bc:	e7f1      	b.n	4028a2 <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  4028be:	b951      	cbnz	r1, 4028d6 <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4028c0:	0182      	lsls	r2, r0, #6
  4028c2:	4b09      	ldr	r3, [pc, #36]	; (4028e8 <_dma_set_irq_state+0x54>)
  4028c4:	4413      	add	r3, r2
  4028c6:	2201      	movs	r2, #1
  4028c8:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  4028ca:	2301      	movs	r3, #1
  4028cc:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  4028d0:	4b05      	ldr	r3, [pc, #20]	; (4028e8 <_dma_set_irq_state+0x54>)
  4028d2:	6118      	str	r0, [r3, #16]
  4028d4:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4028d6:	2901      	cmp	r1, #1
  4028d8:	d1f7      	bne.n	4028ca <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4028da:	0182      	lsls	r2, r0, #6
  4028dc:	4b02      	ldr	r3, [pc, #8]	; (4028e8 <_dma_set_irq_state+0x54>)
  4028de:	4413      	add	r3, r2
  4028e0:	2270      	movs	r2, #112	; 0x70
  4028e2:	655a      	str	r2, [r3, #84]	; 0x54
  4028e4:	e7f1      	b.n	4028ca <_dma_set_irq_state+0x36>
  4028e6:	bf00      	nop
  4028e8:	40078000 	.word	0x40078000

004028ec <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  4028ec:	4b17      	ldr	r3, [pc, #92]	; (40294c <XDMAC_Handler+0x60>)
  4028ee:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4028f0:	2300      	movs	r3, #0
  4028f2:	2b17      	cmp	r3, #23
  4028f4:	d81b      	bhi.n	40292e <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  4028f6:	fa21 f203 	lsr.w	r2, r1, r3
  4028fa:	f012 0f01 	tst.w	r2, #1
  4028fe:	d102      	bne.n	402906 <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  402900:	3301      	adds	r3, #1
  402902:	b2db      	uxtb	r3, r3
  402904:	e7f5      	b.n	4028f2 <XDMAC_Handler+0x6>
			channel = i;
  402906:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  402908:	2b00      	cmp	r3, #0
  40290a:	db1d      	blt.n	402948 <XDMAC_Handler+0x5c>
{
  40290c:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  40290e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  402912:	0090      	lsls	r0, r2, #2
  402914:	4a0e      	ldr	r2, [pc, #56]	; (402950 <XDMAC_Handler+0x64>)
  402916:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  402918:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  40291a:	0189      	lsls	r1, r1, #6
  40291c:	4a0d      	ldr	r2, [pc, #52]	; (402954 <XDMAC_Handler+0x68>)
  40291e:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  402920:	f012 0f70 	tst.w	r2, #112	; 0x70
  402924:	d106      	bne.n	402934 <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  402926:	f012 0f01 	tst.w	r2, #1
  40292a:	d106      	bne.n	40293a <XDMAC_Handler+0x4e>
  40292c:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  40292e:	f04f 33ff 	mov.w	r3, #4294967295
  402932:	e7e9      	b.n	402908 <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  402934:	6843      	ldr	r3, [r0, #4]
  402936:	4798      	blx	r3
  402938:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  40293a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  40293e:	00a3      	lsls	r3, r4, #2
  402940:	4a03      	ldr	r2, [pc, #12]	; (402950 <XDMAC_Handler+0x64>)
  402942:	58d3      	ldr	r3, [r2, r3]
  402944:	4798      	blx	r3
  402946:	e7f1      	b.n	40292c <XDMAC_Handler+0x40>
  402948:	4770      	bx	lr
  40294a:	bf00      	nop
  40294c:	40078000 	.word	0x40078000
  402950:	204003a0 	.word	0x204003a0
  402954:	4007805c 	.word	0x4007805c

00402958 <main>:




int main(void)
{
  402958:	b580      	push	{r7, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  40295a:	4b18      	ldr	r3, [pc, #96]	; (4029bc <main+0x64>)
  40295c:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	/* Additional User initialisation */
	dma_adc_init();
  40295e:	4b18      	ldr	r3, [pc, #96]	; (4029c0 <main+0x68>)
  402960:	4798      	blx	r3
	pwm_init_user();
  402962:	4b18      	ldr	r3, [pc, #96]	; (4029c4 <main+0x6c>)
  402964:	4798      	blx	r3
	encoder_init();
  402966:	4b18      	ldr	r3, [pc, #96]	; (4029c8 <main+0x70>)
  402968:	4798      	blx	r3
	pos_sens_init();
  40296a:	4b18      	ldr	r3, [pc, #96]	; (4029cc <main+0x74>)
  40296c:	4798      	blx	r3
	
	/* Enable all devices */
	pwm_enable_all();
  40296e:	4b18      	ldr	r3, [pc, #96]	; (4029d0 <main+0x78>)
  402970:	4798      	blx	r3
	adc_enable_all();
  402972:	4b18      	ldr	r3, [pc, #96]	; (4029d4 <main+0x7c>)
  402974:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  402976:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40297a:	4b17      	ldr	r3, [pc, #92]	; (4029d8 <main+0x80>)
  40297c:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);		//enables the DC-DC converter for the HV side
	
	timer_start(&ENCODER_A);
  40297e:	4817      	ldr	r0, [pc, #92]	; (4029dc <main+0x84>)
  402980:	4c17      	ldr	r4, [pc, #92]	; (4029e0 <main+0x88>)
  402982:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  402984:	4817      	ldr	r0, [pc, #92]	; (4029e4 <main+0x8c>)
  402986:	47a0      	blx	r4
	
	//test timers for encoder
	//Timer_Counter_Initial_Test();
	
	//test position sensor
	POS_Sensor_Initial_Test();
  402988:	4b17      	ldr	r3, [pc, #92]	; (4029e8 <main+0x90>)
  40298a:	4798      	blx	r3
  40298c:	4f17      	ldr	r7, [pc, #92]	; (4029ec <main+0x94>)
  40298e:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
  402992:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
  402996:	4d16      	ldr	r5, [pc, #88]	; (4029f0 <main+0x98>)
  402998:	f44f 7680 	mov.w	r6, #256	; 0x100
  40299c:	632e      	str	r6, [r5, #48]	; 0x30
	/* Replace with your application code */
	while (1) {
		
		gpio_set_pin_level(PIN_GPIO_6,true);
		gpio_set_pin_level(PIN_USER_LED,true);
		delay_ms(500);
  40299e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4029a2:	4c14      	ldr	r4, [pc, #80]	; (4029f4 <main+0x9c>)
  4029a4:	47a0      	blx	r4
		
		dma_adc_0_enable_for_one_transaction();
  4029a6:	4b14      	ldr	r3, [pc, #80]	; (4029f8 <main+0xa0>)
  4029a8:	4798      	blx	r3
		dma_adc_1_enable_for_one_transaction();
  4029aa:	4b14      	ldr	r3, [pc, #80]	; (4029fc <main+0xa4>)
  4029ac:	4798      	blx	r3
	((Pio *)hw)->PIO_CODR = mask;
  4029ae:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4029b2:	636e      	str	r6, [r5, #52]	; 0x34
		//printf("main - %i %i %i %i %i %i %i %i %i %i %i %i  \n", (int)afec_buf[0],(int)afec_buf[1],(int)afec_buf[2],(int)afec_buf[3],(int)afec_buf[4],(int)afec_buf[5],(int)afec_buf[6],(int)afec_buf[7],(int)afec_buf[8],(int)afec_buf[9],(int)afec_buf[10],(int)afec_buf[11]);
		//AFEC0_Handler
		
		gpio_set_pin_level(PIN_GPIO_6,false);
		gpio_set_pin_level(PIN_USER_LED,false);
		delay_ms(500);
  4029b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4029b8:	47a0      	blx	r4
  4029ba:	e7e7      	b.n	40298c <main+0x34>
  4029bc:	004001d5 	.word	0x004001d5
  4029c0:	004007bd 	.word	0x004007bd
  4029c4:	00400919 	.word	0x00400919
  4029c8:	00400231 	.word	0x00400231
  4029cc:	00400499 	.word	0x00400499
  4029d0:	004009ed 	.word	0x004009ed
  4029d4:	004008a9 	.word	0x004008a9
  4029d8:	400e0e00 	.word	0x400e0e00
  4029dc:	20400614 	.word	0x20400614
  4029e0:	004016bd 	.word	0x004016bd
  4029e4:	20400564 	.word	0x20400564
  4029e8:	00400a4d 	.word	0x00400a4d
  4029ec:	400e1400 	.word	0x400e1400
  4029f0:	400e1200 	.word	0x400e1200
  4029f4:	004012f5 	.word	0x004012f5
  4029f8:	004005bd 	.word	0x004005bd
  4029fc:	004006b5 	.word	0x004006b5

00402a00 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  402a00:	b958      	cbnz	r0, 402a1a <_read+0x1a>
{
  402a02:	b508      	push	{r3, lr}
  402a04:	460b      	mov	r3, r1
  402a06:	4611      	mov	r1, r2
  402a08:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  402a0a:	4b05      	ldr	r3, [pc, #20]	; (402a20 <_read+0x20>)
  402a0c:	4798      	blx	r3
	if (n < 0) {
  402a0e:	2800      	cmp	r0, #0
  402a10:	db00      	blt.n	402a14 <_read+0x14>
		return -1;
	}

	return n;
}
  402a12:	bd08      	pop	{r3, pc}
		return -1;
  402a14:	f04f 30ff 	mov.w	r0, #4294967295
  402a18:	bd08      	pop	{r3, pc}
		return -1;
  402a1a:	f04f 30ff 	mov.w	r0, #4294967295
  402a1e:	4770      	bx	lr
  402a20:	00402a79 	.word	0x00402a79

00402a24 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  402a24:	3801      	subs	r0, #1
  402a26:	2802      	cmp	r0, #2
  402a28:	d80b      	bhi.n	402a42 <_write+0x1e>
{
  402a2a:	b508      	push	{r3, lr}
  402a2c:	460b      	mov	r3, r1
  402a2e:	4611      	mov	r1, r2
  402a30:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  402a32:	4b05      	ldr	r3, [pc, #20]	; (402a48 <_write+0x24>)
  402a34:	4798      	blx	r3
	if (n < 0) {
  402a36:	2800      	cmp	r0, #0
  402a38:	db00      	blt.n	402a3c <_write+0x18>
		return -1;
	}

	return n;
}
  402a3a:	bd08      	pop	{r3, pc}
		return -1;
  402a3c:	f04f 30ff 	mov.w	r0, #4294967295
  402a40:	bd08      	pop	{r3, pc}
		return -1;
  402a42:	f04f 30ff 	mov.w	r0, #4294967295
  402a46:	4770      	bx	lr
  402a48:	00402a9d 	.word	0x00402a9d

00402a4c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  402a4c:	b570      	push	{r4, r5, r6, lr}
  402a4e:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  402a50:	4d06      	ldr	r5, [pc, #24]	; (402a6c <stdio_io_init+0x20>)
  402a52:	682b      	ldr	r3, [r5, #0]
  402a54:	2100      	movs	r1, #0
  402a56:	6898      	ldr	r0, [r3, #8]
  402a58:	4c05      	ldr	r4, [pc, #20]	; (402a70 <stdio_io_init+0x24>)
  402a5a:	47a0      	blx	r4
	setbuf(stdin, NULL);
  402a5c:	682b      	ldr	r3, [r5, #0]
  402a5e:	2100      	movs	r1, #0
  402a60:	6858      	ldr	r0, [r3, #4]
  402a62:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  402a64:	4b03      	ldr	r3, [pc, #12]	; (402a74 <stdio_io_init+0x28>)
  402a66:	601e      	str	r6, [r3, #0]
  402a68:	bd70      	pop	{r4, r5, r6, pc}
  402a6a:	bf00      	nop
  402a6c:	20400048 	.word	0x20400048
  402a70:	00403d31 	.word	0x00403d31
  402a74:	204004c0 	.word	0x204004c0

00402a78 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  402a78:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  402a7a:	4b06      	ldr	r3, [pc, #24]	; (402a94 <stdio_io_read+0x1c>)
  402a7c:	681b      	ldr	r3, [r3, #0]
  402a7e:	b133      	cbz	r3, 402a8e <stdio_io_read+0x16>
  402a80:	460a      	mov	r2, r1
  402a82:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  402a84:	b292      	uxth	r2, r2
  402a86:	4618      	mov	r0, r3
  402a88:	4b03      	ldr	r3, [pc, #12]	; (402a98 <stdio_io_read+0x20>)
  402a8a:	4798      	blx	r3
  402a8c:	bd08      	pop	{r3, pc}
		return 0;
  402a8e:	2000      	movs	r0, #0
}
  402a90:	bd08      	pop	{r3, pc}
  402a92:	bf00      	nop
  402a94:	204004c0 	.word	0x204004c0
  402a98:	0040148d 	.word	0x0040148d

00402a9c <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  402a9c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  402a9e:	4b06      	ldr	r3, [pc, #24]	; (402ab8 <stdio_io_write+0x1c>)
  402aa0:	681b      	ldr	r3, [r3, #0]
  402aa2:	b133      	cbz	r3, 402ab2 <stdio_io_write+0x16>
  402aa4:	460a      	mov	r2, r1
  402aa6:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  402aa8:	b292      	uxth	r2, r2
  402aaa:	4618      	mov	r0, r3
  402aac:	4b03      	ldr	r3, [pc, #12]	; (402abc <stdio_io_write+0x20>)
  402aae:	4798      	blx	r3
  402ab0:	bd08      	pop	{r3, pc}
		return 0;
  402ab2:	2000      	movs	r0, #0
}
  402ab4:	bd08      	pop	{r3, pc}
  402ab6:	bf00      	nop
  402ab8:	204004c0 	.word	0x204004c0
  402abc:	0040145d 	.word	0x0040145d

00402ac0 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  402ac0:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  402ac2:	4c04      	ldr	r4, [pc, #16]	; (402ad4 <stdio_redirect_init+0x14>)
  402ac4:	4620      	mov	r0, r4
  402ac6:	4b04      	ldr	r3, [pc, #16]	; (402ad8 <stdio_redirect_init+0x18>)
  402ac8:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  402aca:	4620      	mov	r0, r4
  402acc:	4b03      	ldr	r3, [pc, #12]	; (402adc <stdio_redirect_init+0x1c>)
  402ace:	4798      	blx	r3
  402ad0:	bd10      	pop	{r4, pc}
  402ad2:	bf00      	nop
  402ad4:	20400608 	.word	0x20400608
  402ad8:	00401811 	.word	0x00401811
  402adc:	00402a4d 	.word	0x00402a4d

00402ae0 <__aeabi_drsub>:
  402ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402ae4:	e002      	b.n	402aec <__adddf3>
  402ae6:	bf00      	nop

00402ae8 <__aeabi_dsub>:
  402ae8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402aec <__adddf3>:
  402aec:	b530      	push	{r4, r5, lr}
  402aee:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402af2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402af6:	ea94 0f05 	teq	r4, r5
  402afa:	bf08      	it	eq
  402afc:	ea90 0f02 	teqeq	r0, r2
  402b00:	bf1f      	itttt	ne
  402b02:	ea54 0c00 	orrsne.w	ip, r4, r0
  402b06:	ea55 0c02 	orrsne.w	ip, r5, r2
  402b0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402b0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402b12:	f000 80e2 	beq.w	402cda <__adddf3+0x1ee>
  402b16:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402b1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402b1e:	bfb8      	it	lt
  402b20:	426d      	neglt	r5, r5
  402b22:	dd0c      	ble.n	402b3e <__adddf3+0x52>
  402b24:	442c      	add	r4, r5
  402b26:	ea80 0202 	eor.w	r2, r0, r2
  402b2a:	ea81 0303 	eor.w	r3, r1, r3
  402b2e:	ea82 0000 	eor.w	r0, r2, r0
  402b32:	ea83 0101 	eor.w	r1, r3, r1
  402b36:	ea80 0202 	eor.w	r2, r0, r2
  402b3a:	ea81 0303 	eor.w	r3, r1, r3
  402b3e:	2d36      	cmp	r5, #54	; 0x36
  402b40:	bf88      	it	hi
  402b42:	bd30      	pophi	{r4, r5, pc}
  402b44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402b48:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402b4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402b50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402b54:	d002      	beq.n	402b5c <__adddf3+0x70>
  402b56:	4240      	negs	r0, r0
  402b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402b5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402b60:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402b64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402b68:	d002      	beq.n	402b70 <__adddf3+0x84>
  402b6a:	4252      	negs	r2, r2
  402b6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402b70:	ea94 0f05 	teq	r4, r5
  402b74:	f000 80a7 	beq.w	402cc6 <__adddf3+0x1da>
  402b78:	f1a4 0401 	sub.w	r4, r4, #1
  402b7c:	f1d5 0e20 	rsbs	lr, r5, #32
  402b80:	db0d      	blt.n	402b9e <__adddf3+0xb2>
  402b82:	fa02 fc0e 	lsl.w	ip, r2, lr
  402b86:	fa22 f205 	lsr.w	r2, r2, r5
  402b8a:	1880      	adds	r0, r0, r2
  402b8c:	f141 0100 	adc.w	r1, r1, #0
  402b90:	fa03 f20e 	lsl.w	r2, r3, lr
  402b94:	1880      	adds	r0, r0, r2
  402b96:	fa43 f305 	asr.w	r3, r3, r5
  402b9a:	4159      	adcs	r1, r3
  402b9c:	e00e      	b.n	402bbc <__adddf3+0xd0>
  402b9e:	f1a5 0520 	sub.w	r5, r5, #32
  402ba2:	f10e 0e20 	add.w	lr, lr, #32
  402ba6:	2a01      	cmp	r2, #1
  402ba8:	fa03 fc0e 	lsl.w	ip, r3, lr
  402bac:	bf28      	it	cs
  402bae:	f04c 0c02 	orrcs.w	ip, ip, #2
  402bb2:	fa43 f305 	asr.w	r3, r3, r5
  402bb6:	18c0      	adds	r0, r0, r3
  402bb8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402bbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402bc0:	d507      	bpl.n	402bd2 <__adddf3+0xe6>
  402bc2:	f04f 0e00 	mov.w	lr, #0
  402bc6:	f1dc 0c00 	rsbs	ip, ip, #0
  402bca:	eb7e 0000 	sbcs.w	r0, lr, r0
  402bce:	eb6e 0101 	sbc.w	r1, lr, r1
  402bd2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402bd6:	d31b      	bcc.n	402c10 <__adddf3+0x124>
  402bd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402bdc:	d30c      	bcc.n	402bf8 <__adddf3+0x10c>
  402bde:	0849      	lsrs	r1, r1, #1
  402be0:	ea5f 0030 	movs.w	r0, r0, rrx
  402be4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402be8:	f104 0401 	add.w	r4, r4, #1
  402bec:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402bf0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402bf4:	f080 809a 	bcs.w	402d2c <__adddf3+0x240>
  402bf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402bfc:	bf08      	it	eq
  402bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402c02:	f150 0000 	adcs.w	r0, r0, #0
  402c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402c0a:	ea41 0105 	orr.w	r1, r1, r5
  402c0e:	bd30      	pop	{r4, r5, pc}
  402c10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402c14:	4140      	adcs	r0, r0
  402c16:	eb41 0101 	adc.w	r1, r1, r1
  402c1a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402c1e:	f1a4 0401 	sub.w	r4, r4, #1
  402c22:	d1e9      	bne.n	402bf8 <__adddf3+0x10c>
  402c24:	f091 0f00 	teq	r1, #0
  402c28:	bf04      	itt	eq
  402c2a:	4601      	moveq	r1, r0
  402c2c:	2000      	moveq	r0, #0
  402c2e:	fab1 f381 	clz	r3, r1
  402c32:	bf08      	it	eq
  402c34:	3320      	addeq	r3, #32
  402c36:	f1a3 030b 	sub.w	r3, r3, #11
  402c3a:	f1b3 0220 	subs.w	r2, r3, #32
  402c3e:	da0c      	bge.n	402c5a <__adddf3+0x16e>
  402c40:	320c      	adds	r2, #12
  402c42:	dd08      	ble.n	402c56 <__adddf3+0x16a>
  402c44:	f102 0c14 	add.w	ip, r2, #20
  402c48:	f1c2 020c 	rsb	r2, r2, #12
  402c4c:	fa01 f00c 	lsl.w	r0, r1, ip
  402c50:	fa21 f102 	lsr.w	r1, r1, r2
  402c54:	e00c      	b.n	402c70 <__adddf3+0x184>
  402c56:	f102 0214 	add.w	r2, r2, #20
  402c5a:	bfd8      	it	le
  402c5c:	f1c2 0c20 	rsble	ip, r2, #32
  402c60:	fa01 f102 	lsl.w	r1, r1, r2
  402c64:	fa20 fc0c 	lsr.w	ip, r0, ip
  402c68:	bfdc      	itt	le
  402c6a:	ea41 010c 	orrle.w	r1, r1, ip
  402c6e:	4090      	lslle	r0, r2
  402c70:	1ae4      	subs	r4, r4, r3
  402c72:	bfa2      	ittt	ge
  402c74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402c78:	4329      	orrge	r1, r5
  402c7a:	bd30      	popge	{r4, r5, pc}
  402c7c:	ea6f 0404 	mvn.w	r4, r4
  402c80:	3c1f      	subs	r4, #31
  402c82:	da1c      	bge.n	402cbe <__adddf3+0x1d2>
  402c84:	340c      	adds	r4, #12
  402c86:	dc0e      	bgt.n	402ca6 <__adddf3+0x1ba>
  402c88:	f104 0414 	add.w	r4, r4, #20
  402c8c:	f1c4 0220 	rsb	r2, r4, #32
  402c90:	fa20 f004 	lsr.w	r0, r0, r4
  402c94:	fa01 f302 	lsl.w	r3, r1, r2
  402c98:	ea40 0003 	orr.w	r0, r0, r3
  402c9c:	fa21 f304 	lsr.w	r3, r1, r4
  402ca0:	ea45 0103 	orr.w	r1, r5, r3
  402ca4:	bd30      	pop	{r4, r5, pc}
  402ca6:	f1c4 040c 	rsb	r4, r4, #12
  402caa:	f1c4 0220 	rsb	r2, r4, #32
  402cae:	fa20 f002 	lsr.w	r0, r0, r2
  402cb2:	fa01 f304 	lsl.w	r3, r1, r4
  402cb6:	ea40 0003 	orr.w	r0, r0, r3
  402cba:	4629      	mov	r1, r5
  402cbc:	bd30      	pop	{r4, r5, pc}
  402cbe:	fa21 f004 	lsr.w	r0, r1, r4
  402cc2:	4629      	mov	r1, r5
  402cc4:	bd30      	pop	{r4, r5, pc}
  402cc6:	f094 0f00 	teq	r4, #0
  402cca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402cce:	bf06      	itte	eq
  402cd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402cd4:	3401      	addeq	r4, #1
  402cd6:	3d01      	subne	r5, #1
  402cd8:	e74e      	b.n	402b78 <__adddf3+0x8c>
  402cda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402cde:	bf18      	it	ne
  402ce0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402ce4:	d029      	beq.n	402d3a <__adddf3+0x24e>
  402ce6:	ea94 0f05 	teq	r4, r5
  402cea:	bf08      	it	eq
  402cec:	ea90 0f02 	teqeq	r0, r2
  402cf0:	d005      	beq.n	402cfe <__adddf3+0x212>
  402cf2:	ea54 0c00 	orrs.w	ip, r4, r0
  402cf6:	bf04      	itt	eq
  402cf8:	4619      	moveq	r1, r3
  402cfa:	4610      	moveq	r0, r2
  402cfc:	bd30      	pop	{r4, r5, pc}
  402cfe:	ea91 0f03 	teq	r1, r3
  402d02:	bf1e      	ittt	ne
  402d04:	2100      	movne	r1, #0
  402d06:	2000      	movne	r0, #0
  402d08:	bd30      	popne	{r4, r5, pc}
  402d0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402d0e:	d105      	bne.n	402d1c <__adddf3+0x230>
  402d10:	0040      	lsls	r0, r0, #1
  402d12:	4149      	adcs	r1, r1
  402d14:	bf28      	it	cs
  402d16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402d1a:	bd30      	pop	{r4, r5, pc}
  402d1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402d20:	bf3c      	itt	cc
  402d22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402d26:	bd30      	popcc	{r4, r5, pc}
  402d28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402d2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402d30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402d34:	f04f 0000 	mov.w	r0, #0
  402d38:	bd30      	pop	{r4, r5, pc}
  402d3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402d3e:	bf1a      	itte	ne
  402d40:	4619      	movne	r1, r3
  402d42:	4610      	movne	r0, r2
  402d44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402d48:	bf1c      	itt	ne
  402d4a:	460b      	movne	r3, r1
  402d4c:	4602      	movne	r2, r0
  402d4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402d52:	bf06      	itte	eq
  402d54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402d58:	ea91 0f03 	teqeq	r1, r3
  402d5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402d60:	bd30      	pop	{r4, r5, pc}
  402d62:	bf00      	nop

00402d64 <__aeabi_ui2d>:
  402d64:	f090 0f00 	teq	r0, #0
  402d68:	bf04      	itt	eq
  402d6a:	2100      	moveq	r1, #0
  402d6c:	4770      	bxeq	lr
  402d6e:	b530      	push	{r4, r5, lr}
  402d70:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402d74:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402d78:	f04f 0500 	mov.w	r5, #0
  402d7c:	f04f 0100 	mov.w	r1, #0
  402d80:	e750      	b.n	402c24 <__adddf3+0x138>
  402d82:	bf00      	nop

00402d84 <__aeabi_i2d>:
  402d84:	f090 0f00 	teq	r0, #0
  402d88:	bf04      	itt	eq
  402d8a:	2100      	moveq	r1, #0
  402d8c:	4770      	bxeq	lr
  402d8e:	b530      	push	{r4, r5, lr}
  402d90:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402d94:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402d98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402d9c:	bf48      	it	mi
  402d9e:	4240      	negmi	r0, r0
  402da0:	f04f 0100 	mov.w	r1, #0
  402da4:	e73e      	b.n	402c24 <__adddf3+0x138>
  402da6:	bf00      	nop

00402da8 <__aeabi_f2d>:
  402da8:	0042      	lsls	r2, r0, #1
  402daa:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402dae:	ea4f 0131 	mov.w	r1, r1, rrx
  402db2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402db6:	bf1f      	itttt	ne
  402db8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402dbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402dc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402dc4:	4770      	bxne	lr
  402dc6:	f092 0f00 	teq	r2, #0
  402dca:	bf14      	ite	ne
  402dcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402dd0:	4770      	bxeq	lr
  402dd2:	b530      	push	{r4, r5, lr}
  402dd4:	f44f 7460 	mov.w	r4, #896	; 0x380
  402dd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402ddc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402de0:	e720      	b.n	402c24 <__adddf3+0x138>
  402de2:	bf00      	nop

00402de4 <__aeabi_ul2d>:
  402de4:	ea50 0201 	orrs.w	r2, r0, r1
  402de8:	bf08      	it	eq
  402dea:	4770      	bxeq	lr
  402dec:	b530      	push	{r4, r5, lr}
  402dee:	f04f 0500 	mov.w	r5, #0
  402df2:	e00a      	b.n	402e0a <__aeabi_l2d+0x16>

00402df4 <__aeabi_l2d>:
  402df4:	ea50 0201 	orrs.w	r2, r0, r1
  402df8:	bf08      	it	eq
  402dfa:	4770      	bxeq	lr
  402dfc:	b530      	push	{r4, r5, lr}
  402dfe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402e02:	d502      	bpl.n	402e0a <__aeabi_l2d+0x16>
  402e04:	4240      	negs	r0, r0
  402e06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402e0a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402e0e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402e12:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402e16:	f43f aedc 	beq.w	402bd2 <__adddf3+0xe6>
  402e1a:	f04f 0203 	mov.w	r2, #3
  402e1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402e22:	bf18      	it	ne
  402e24:	3203      	addne	r2, #3
  402e26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402e2a:	bf18      	it	ne
  402e2c:	3203      	addne	r2, #3
  402e2e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402e32:	f1c2 0320 	rsb	r3, r2, #32
  402e36:	fa00 fc03 	lsl.w	ip, r0, r3
  402e3a:	fa20 f002 	lsr.w	r0, r0, r2
  402e3e:	fa01 fe03 	lsl.w	lr, r1, r3
  402e42:	ea40 000e 	orr.w	r0, r0, lr
  402e46:	fa21 f102 	lsr.w	r1, r1, r2
  402e4a:	4414      	add	r4, r2
  402e4c:	e6c1      	b.n	402bd2 <__adddf3+0xe6>
  402e4e:	bf00      	nop

00402e50 <__aeabi_dmul>:
  402e50:	b570      	push	{r4, r5, r6, lr}
  402e52:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402e56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402e5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402e5e:	bf1d      	ittte	ne
  402e60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402e64:	ea94 0f0c 	teqne	r4, ip
  402e68:	ea95 0f0c 	teqne	r5, ip
  402e6c:	f000 f8de 	bleq	40302c <__aeabi_dmul+0x1dc>
  402e70:	442c      	add	r4, r5
  402e72:	ea81 0603 	eor.w	r6, r1, r3
  402e76:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402e7a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402e7e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402e82:	bf18      	it	ne
  402e84:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402e88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402e90:	d038      	beq.n	402f04 <__aeabi_dmul+0xb4>
  402e92:	fba0 ce02 	umull	ip, lr, r0, r2
  402e96:	f04f 0500 	mov.w	r5, #0
  402e9a:	fbe1 e502 	umlal	lr, r5, r1, r2
  402e9e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402ea2:	fbe0 e503 	umlal	lr, r5, r0, r3
  402ea6:	f04f 0600 	mov.w	r6, #0
  402eaa:	fbe1 5603 	umlal	r5, r6, r1, r3
  402eae:	f09c 0f00 	teq	ip, #0
  402eb2:	bf18      	it	ne
  402eb4:	f04e 0e01 	orrne.w	lr, lr, #1
  402eb8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402ebc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402ec0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402ec4:	d204      	bcs.n	402ed0 <__aeabi_dmul+0x80>
  402ec6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402eca:	416d      	adcs	r5, r5
  402ecc:	eb46 0606 	adc.w	r6, r6, r6
  402ed0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402ed4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402ed8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402edc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402ee0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402ee4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402ee8:	bf88      	it	hi
  402eea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402eee:	d81e      	bhi.n	402f2e <__aeabi_dmul+0xde>
  402ef0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402ef4:	bf08      	it	eq
  402ef6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402efa:	f150 0000 	adcs.w	r0, r0, #0
  402efe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402f02:	bd70      	pop	{r4, r5, r6, pc}
  402f04:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402f08:	ea46 0101 	orr.w	r1, r6, r1
  402f0c:	ea40 0002 	orr.w	r0, r0, r2
  402f10:	ea81 0103 	eor.w	r1, r1, r3
  402f14:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402f18:	bfc2      	ittt	gt
  402f1a:	ebd4 050c 	rsbsgt	r5, r4, ip
  402f1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402f22:	bd70      	popgt	{r4, r5, r6, pc}
  402f24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402f28:	f04f 0e00 	mov.w	lr, #0
  402f2c:	3c01      	subs	r4, #1
  402f2e:	f300 80ab 	bgt.w	403088 <__aeabi_dmul+0x238>
  402f32:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402f36:	bfde      	ittt	le
  402f38:	2000      	movle	r0, #0
  402f3a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402f3e:	bd70      	pople	{r4, r5, r6, pc}
  402f40:	f1c4 0400 	rsb	r4, r4, #0
  402f44:	3c20      	subs	r4, #32
  402f46:	da35      	bge.n	402fb4 <__aeabi_dmul+0x164>
  402f48:	340c      	adds	r4, #12
  402f4a:	dc1b      	bgt.n	402f84 <__aeabi_dmul+0x134>
  402f4c:	f104 0414 	add.w	r4, r4, #20
  402f50:	f1c4 0520 	rsb	r5, r4, #32
  402f54:	fa00 f305 	lsl.w	r3, r0, r5
  402f58:	fa20 f004 	lsr.w	r0, r0, r4
  402f5c:	fa01 f205 	lsl.w	r2, r1, r5
  402f60:	ea40 0002 	orr.w	r0, r0, r2
  402f64:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402f68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402f6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402f70:	fa21 f604 	lsr.w	r6, r1, r4
  402f74:	eb42 0106 	adc.w	r1, r2, r6
  402f78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402f7c:	bf08      	it	eq
  402f7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402f82:	bd70      	pop	{r4, r5, r6, pc}
  402f84:	f1c4 040c 	rsb	r4, r4, #12
  402f88:	f1c4 0520 	rsb	r5, r4, #32
  402f8c:	fa00 f304 	lsl.w	r3, r0, r4
  402f90:	fa20 f005 	lsr.w	r0, r0, r5
  402f94:	fa01 f204 	lsl.w	r2, r1, r4
  402f98:	ea40 0002 	orr.w	r0, r0, r2
  402f9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402fa0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402fa4:	f141 0100 	adc.w	r1, r1, #0
  402fa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402fac:	bf08      	it	eq
  402fae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402fb2:	bd70      	pop	{r4, r5, r6, pc}
  402fb4:	f1c4 0520 	rsb	r5, r4, #32
  402fb8:	fa00 f205 	lsl.w	r2, r0, r5
  402fbc:	ea4e 0e02 	orr.w	lr, lr, r2
  402fc0:	fa20 f304 	lsr.w	r3, r0, r4
  402fc4:	fa01 f205 	lsl.w	r2, r1, r5
  402fc8:	ea43 0302 	orr.w	r3, r3, r2
  402fcc:	fa21 f004 	lsr.w	r0, r1, r4
  402fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402fd4:	fa21 f204 	lsr.w	r2, r1, r4
  402fd8:	ea20 0002 	bic.w	r0, r0, r2
  402fdc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402fe0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402fe4:	bf08      	it	eq
  402fe6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402fea:	bd70      	pop	{r4, r5, r6, pc}
  402fec:	f094 0f00 	teq	r4, #0
  402ff0:	d10f      	bne.n	403012 <__aeabi_dmul+0x1c2>
  402ff2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402ff6:	0040      	lsls	r0, r0, #1
  402ff8:	eb41 0101 	adc.w	r1, r1, r1
  402ffc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403000:	bf08      	it	eq
  403002:	3c01      	subeq	r4, #1
  403004:	d0f7      	beq.n	402ff6 <__aeabi_dmul+0x1a6>
  403006:	ea41 0106 	orr.w	r1, r1, r6
  40300a:	f095 0f00 	teq	r5, #0
  40300e:	bf18      	it	ne
  403010:	4770      	bxne	lr
  403012:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403016:	0052      	lsls	r2, r2, #1
  403018:	eb43 0303 	adc.w	r3, r3, r3
  40301c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403020:	bf08      	it	eq
  403022:	3d01      	subeq	r5, #1
  403024:	d0f7      	beq.n	403016 <__aeabi_dmul+0x1c6>
  403026:	ea43 0306 	orr.w	r3, r3, r6
  40302a:	4770      	bx	lr
  40302c:	ea94 0f0c 	teq	r4, ip
  403030:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403034:	bf18      	it	ne
  403036:	ea95 0f0c 	teqne	r5, ip
  40303a:	d00c      	beq.n	403056 <__aeabi_dmul+0x206>
  40303c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403040:	bf18      	it	ne
  403042:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403046:	d1d1      	bne.n	402fec <__aeabi_dmul+0x19c>
  403048:	ea81 0103 	eor.w	r1, r1, r3
  40304c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403050:	f04f 0000 	mov.w	r0, #0
  403054:	bd70      	pop	{r4, r5, r6, pc}
  403056:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40305a:	bf06      	itte	eq
  40305c:	4610      	moveq	r0, r2
  40305e:	4619      	moveq	r1, r3
  403060:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403064:	d019      	beq.n	40309a <__aeabi_dmul+0x24a>
  403066:	ea94 0f0c 	teq	r4, ip
  40306a:	d102      	bne.n	403072 <__aeabi_dmul+0x222>
  40306c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403070:	d113      	bne.n	40309a <__aeabi_dmul+0x24a>
  403072:	ea95 0f0c 	teq	r5, ip
  403076:	d105      	bne.n	403084 <__aeabi_dmul+0x234>
  403078:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40307c:	bf1c      	itt	ne
  40307e:	4610      	movne	r0, r2
  403080:	4619      	movne	r1, r3
  403082:	d10a      	bne.n	40309a <__aeabi_dmul+0x24a>
  403084:	ea81 0103 	eor.w	r1, r1, r3
  403088:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40308c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403090:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403094:	f04f 0000 	mov.w	r0, #0
  403098:	bd70      	pop	{r4, r5, r6, pc}
  40309a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40309e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4030a2:	bd70      	pop	{r4, r5, r6, pc}

004030a4 <__aeabi_ddiv>:
  4030a4:	b570      	push	{r4, r5, r6, lr}
  4030a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4030aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4030ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4030b2:	bf1d      	ittte	ne
  4030b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4030b8:	ea94 0f0c 	teqne	r4, ip
  4030bc:	ea95 0f0c 	teqne	r5, ip
  4030c0:	f000 f8a7 	bleq	403212 <__aeabi_ddiv+0x16e>
  4030c4:	eba4 0405 	sub.w	r4, r4, r5
  4030c8:	ea81 0e03 	eor.w	lr, r1, r3
  4030cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4030d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4030d4:	f000 8088 	beq.w	4031e8 <__aeabi_ddiv+0x144>
  4030d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4030dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4030e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4030e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4030e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4030ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4030f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4030f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4030f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4030fc:	429d      	cmp	r5, r3
  4030fe:	bf08      	it	eq
  403100:	4296      	cmpeq	r6, r2
  403102:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403106:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40310a:	d202      	bcs.n	403112 <__aeabi_ddiv+0x6e>
  40310c:	085b      	lsrs	r3, r3, #1
  40310e:	ea4f 0232 	mov.w	r2, r2, rrx
  403112:	1ab6      	subs	r6, r6, r2
  403114:	eb65 0503 	sbc.w	r5, r5, r3
  403118:	085b      	lsrs	r3, r3, #1
  40311a:	ea4f 0232 	mov.w	r2, r2, rrx
  40311e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403122:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403126:	ebb6 0e02 	subs.w	lr, r6, r2
  40312a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40312e:	bf22      	ittt	cs
  403130:	1ab6      	subcs	r6, r6, r2
  403132:	4675      	movcs	r5, lr
  403134:	ea40 000c 	orrcs.w	r0, r0, ip
  403138:	085b      	lsrs	r3, r3, #1
  40313a:	ea4f 0232 	mov.w	r2, r2, rrx
  40313e:	ebb6 0e02 	subs.w	lr, r6, r2
  403142:	eb75 0e03 	sbcs.w	lr, r5, r3
  403146:	bf22      	ittt	cs
  403148:	1ab6      	subcs	r6, r6, r2
  40314a:	4675      	movcs	r5, lr
  40314c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403150:	085b      	lsrs	r3, r3, #1
  403152:	ea4f 0232 	mov.w	r2, r2, rrx
  403156:	ebb6 0e02 	subs.w	lr, r6, r2
  40315a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40315e:	bf22      	ittt	cs
  403160:	1ab6      	subcs	r6, r6, r2
  403162:	4675      	movcs	r5, lr
  403164:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403168:	085b      	lsrs	r3, r3, #1
  40316a:	ea4f 0232 	mov.w	r2, r2, rrx
  40316e:	ebb6 0e02 	subs.w	lr, r6, r2
  403172:	eb75 0e03 	sbcs.w	lr, r5, r3
  403176:	bf22      	ittt	cs
  403178:	1ab6      	subcs	r6, r6, r2
  40317a:	4675      	movcs	r5, lr
  40317c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403180:	ea55 0e06 	orrs.w	lr, r5, r6
  403184:	d018      	beq.n	4031b8 <__aeabi_ddiv+0x114>
  403186:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40318a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40318e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403192:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403196:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40319a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40319e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4031a2:	d1c0      	bne.n	403126 <__aeabi_ddiv+0x82>
  4031a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4031a8:	d10b      	bne.n	4031c2 <__aeabi_ddiv+0x11e>
  4031aa:	ea41 0100 	orr.w	r1, r1, r0
  4031ae:	f04f 0000 	mov.w	r0, #0
  4031b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4031b6:	e7b6      	b.n	403126 <__aeabi_ddiv+0x82>
  4031b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4031bc:	bf04      	itt	eq
  4031be:	4301      	orreq	r1, r0
  4031c0:	2000      	moveq	r0, #0
  4031c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4031c6:	bf88      	it	hi
  4031c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4031cc:	f63f aeaf 	bhi.w	402f2e <__aeabi_dmul+0xde>
  4031d0:	ebb5 0c03 	subs.w	ip, r5, r3
  4031d4:	bf04      	itt	eq
  4031d6:	ebb6 0c02 	subseq.w	ip, r6, r2
  4031da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4031de:	f150 0000 	adcs.w	r0, r0, #0
  4031e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4031e6:	bd70      	pop	{r4, r5, r6, pc}
  4031e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4031ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4031f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4031f4:	bfc2      	ittt	gt
  4031f6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4031fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4031fe:	bd70      	popgt	{r4, r5, r6, pc}
  403200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403204:	f04f 0e00 	mov.w	lr, #0
  403208:	3c01      	subs	r4, #1
  40320a:	e690      	b.n	402f2e <__aeabi_dmul+0xde>
  40320c:	ea45 0e06 	orr.w	lr, r5, r6
  403210:	e68d      	b.n	402f2e <__aeabi_dmul+0xde>
  403212:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403216:	ea94 0f0c 	teq	r4, ip
  40321a:	bf08      	it	eq
  40321c:	ea95 0f0c 	teqeq	r5, ip
  403220:	f43f af3b 	beq.w	40309a <__aeabi_dmul+0x24a>
  403224:	ea94 0f0c 	teq	r4, ip
  403228:	d10a      	bne.n	403240 <__aeabi_ddiv+0x19c>
  40322a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40322e:	f47f af34 	bne.w	40309a <__aeabi_dmul+0x24a>
  403232:	ea95 0f0c 	teq	r5, ip
  403236:	f47f af25 	bne.w	403084 <__aeabi_dmul+0x234>
  40323a:	4610      	mov	r0, r2
  40323c:	4619      	mov	r1, r3
  40323e:	e72c      	b.n	40309a <__aeabi_dmul+0x24a>
  403240:	ea95 0f0c 	teq	r5, ip
  403244:	d106      	bne.n	403254 <__aeabi_ddiv+0x1b0>
  403246:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40324a:	f43f aefd 	beq.w	403048 <__aeabi_dmul+0x1f8>
  40324e:	4610      	mov	r0, r2
  403250:	4619      	mov	r1, r3
  403252:	e722      	b.n	40309a <__aeabi_dmul+0x24a>
  403254:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403258:	bf18      	it	ne
  40325a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40325e:	f47f aec5 	bne.w	402fec <__aeabi_dmul+0x19c>
  403262:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403266:	f47f af0d 	bne.w	403084 <__aeabi_dmul+0x234>
  40326a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40326e:	f47f aeeb 	bne.w	403048 <__aeabi_dmul+0x1f8>
  403272:	e712      	b.n	40309a <__aeabi_dmul+0x24a>

00403274 <__gedf2>:
  403274:	f04f 3cff 	mov.w	ip, #4294967295
  403278:	e006      	b.n	403288 <__cmpdf2+0x4>
  40327a:	bf00      	nop

0040327c <__ledf2>:
  40327c:	f04f 0c01 	mov.w	ip, #1
  403280:	e002      	b.n	403288 <__cmpdf2+0x4>
  403282:	bf00      	nop

00403284 <__cmpdf2>:
  403284:	f04f 0c01 	mov.w	ip, #1
  403288:	f84d cd04 	str.w	ip, [sp, #-4]!
  40328c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403290:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403294:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403298:	bf18      	it	ne
  40329a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40329e:	d01b      	beq.n	4032d8 <__cmpdf2+0x54>
  4032a0:	b001      	add	sp, #4
  4032a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4032a6:	bf0c      	ite	eq
  4032a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4032ac:	ea91 0f03 	teqne	r1, r3
  4032b0:	bf02      	ittt	eq
  4032b2:	ea90 0f02 	teqeq	r0, r2
  4032b6:	2000      	moveq	r0, #0
  4032b8:	4770      	bxeq	lr
  4032ba:	f110 0f00 	cmn.w	r0, #0
  4032be:	ea91 0f03 	teq	r1, r3
  4032c2:	bf58      	it	pl
  4032c4:	4299      	cmppl	r1, r3
  4032c6:	bf08      	it	eq
  4032c8:	4290      	cmpeq	r0, r2
  4032ca:	bf2c      	ite	cs
  4032cc:	17d8      	asrcs	r0, r3, #31
  4032ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4032d2:	f040 0001 	orr.w	r0, r0, #1
  4032d6:	4770      	bx	lr
  4032d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4032dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4032e0:	d102      	bne.n	4032e8 <__cmpdf2+0x64>
  4032e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4032e6:	d107      	bne.n	4032f8 <__cmpdf2+0x74>
  4032e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4032ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4032f0:	d1d6      	bne.n	4032a0 <__cmpdf2+0x1c>
  4032f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4032f6:	d0d3      	beq.n	4032a0 <__cmpdf2+0x1c>
  4032f8:	f85d 0b04 	ldr.w	r0, [sp], #4
  4032fc:	4770      	bx	lr
  4032fe:	bf00      	nop

00403300 <__aeabi_cdrcmple>:
  403300:	4684      	mov	ip, r0
  403302:	4610      	mov	r0, r2
  403304:	4662      	mov	r2, ip
  403306:	468c      	mov	ip, r1
  403308:	4619      	mov	r1, r3
  40330a:	4663      	mov	r3, ip
  40330c:	e000      	b.n	403310 <__aeabi_cdcmpeq>
  40330e:	bf00      	nop

00403310 <__aeabi_cdcmpeq>:
  403310:	b501      	push	{r0, lr}
  403312:	f7ff ffb7 	bl	403284 <__cmpdf2>
  403316:	2800      	cmp	r0, #0
  403318:	bf48      	it	mi
  40331a:	f110 0f00 	cmnmi.w	r0, #0
  40331e:	bd01      	pop	{r0, pc}

00403320 <__aeabi_dcmpeq>:
  403320:	f84d ed08 	str.w	lr, [sp, #-8]!
  403324:	f7ff fff4 	bl	403310 <__aeabi_cdcmpeq>
  403328:	bf0c      	ite	eq
  40332a:	2001      	moveq	r0, #1
  40332c:	2000      	movne	r0, #0
  40332e:	f85d fb08 	ldr.w	pc, [sp], #8
  403332:	bf00      	nop

00403334 <__aeabi_dcmplt>:
  403334:	f84d ed08 	str.w	lr, [sp, #-8]!
  403338:	f7ff ffea 	bl	403310 <__aeabi_cdcmpeq>
  40333c:	bf34      	ite	cc
  40333e:	2001      	movcc	r0, #1
  403340:	2000      	movcs	r0, #0
  403342:	f85d fb08 	ldr.w	pc, [sp], #8
  403346:	bf00      	nop

00403348 <__aeabi_dcmple>:
  403348:	f84d ed08 	str.w	lr, [sp, #-8]!
  40334c:	f7ff ffe0 	bl	403310 <__aeabi_cdcmpeq>
  403350:	bf94      	ite	ls
  403352:	2001      	movls	r0, #1
  403354:	2000      	movhi	r0, #0
  403356:	f85d fb08 	ldr.w	pc, [sp], #8
  40335a:	bf00      	nop

0040335c <__aeabi_dcmpge>:
  40335c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403360:	f7ff ffce 	bl	403300 <__aeabi_cdrcmple>
  403364:	bf94      	ite	ls
  403366:	2001      	movls	r0, #1
  403368:	2000      	movhi	r0, #0
  40336a:	f85d fb08 	ldr.w	pc, [sp], #8
  40336e:	bf00      	nop

00403370 <__aeabi_dcmpgt>:
  403370:	f84d ed08 	str.w	lr, [sp, #-8]!
  403374:	f7ff ffc4 	bl	403300 <__aeabi_cdrcmple>
  403378:	bf34      	ite	cc
  40337a:	2001      	movcc	r0, #1
  40337c:	2000      	movcs	r0, #0
  40337e:	f85d fb08 	ldr.w	pc, [sp], #8
  403382:	bf00      	nop

00403384 <__aeabi_d2iz>:
  403384:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403388:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40338c:	d215      	bcs.n	4033ba <__aeabi_d2iz+0x36>
  40338e:	d511      	bpl.n	4033b4 <__aeabi_d2iz+0x30>
  403390:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403394:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403398:	d912      	bls.n	4033c0 <__aeabi_d2iz+0x3c>
  40339a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40339e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4033a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4033a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4033aa:	fa23 f002 	lsr.w	r0, r3, r2
  4033ae:	bf18      	it	ne
  4033b0:	4240      	negne	r0, r0
  4033b2:	4770      	bx	lr
  4033b4:	f04f 0000 	mov.w	r0, #0
  4033b8:	4770      	bx	lr
  4033ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4033be:	d105      	bne.n	4033cc <__aeabi_d2iz+0x48>
  4033c0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4033c4:	bf08      	it	eq
  4033c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4033ca:	4770      	bx	lr
  4033cc:	f04f 0000 	mov.w	r0, #0
  4033d0:	4770      	bx	lr
  4033d2:	bf00      	nop

004033d4 <__libc_init_array>:
  4033d4:	b570      	push	{r4, r5, r6, lr}
  4033d6:	4e0d      	ldr	r6, [pc, #52]	; (40340c <__libc_init_array+0x38>)
  4033d8:	4c0d      	ldr	r4, [pc, #52]	; (403410 <__libc_init_array+0x3c>)
  4033da:	1ba4      	subs	r4, r4, r6
  4033dc:	10a4      	asrs	r4, r4, #2
  4033de:	2500      	movs	r5, #0
  4033e0:	42a5      	cmp	r5, r4
  4033e2:	d109      	bne.n	4033f8 <__libc_init_array+0x24>
  4033e4:	4e0b      	ldr	r6, [pc, #44]	; (403414 <__libc_init_array+0x40>)
  4033e6:	4c0c      	ldr	r4, [pc, #48]	; (403418 <__libc_init_array+0x44>)
  4033e8:	f003 f906 	bl	4065f8 <_init>
  4033ec:	1ba4      	subs	r4, r4, r6
  4033ee:	10a4      	asrs	r4, r4, #2
  4033f0:	2500      	movs	r5, #0
  4033f2:	42a5      	cmp	r5, r4
  4033f4:	d105      	bne.n	403402 <__libc_init_array+0x2e>
  4033f6:	bd70      	pop	{r4, r5, r6, pc}
  4033f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4033fc:	4798      	blx	r3
  4033fe:	3501      	adds	r5, #1
  403400:	e7ee      	b.n	4033e0 <__libc_init_array+0xc>
  403402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  403406:	4798      	blx	r3
  403408:	3501      	adds	r5, #1
  40340a:	e7f2      	b.n	4033f2 <__libc_init_array+0x1e>
  40340c:	00406604 	.word	0x00406604
  403410:	00406604 	.word	0x00406604
  403414:	00406604 	.word	0x00406604
  403418:	00406608 	.word	0x00406608

0040341c <memcpy>:
  40341c:	b510      	push	{r4, lr}
  40341e:	1e43      	subs	r3, r0, #1
  403420:	440a      	add	r2, r1
  403422:	4291      	cmp	r1, r2
  403424:	d100      	bne.n	403428 <memcpy+0xc>
  403426:	bd10      	pop	{r4, pc}
  403428:	f811 4b01 	ldrb.w	r4, [r1], #1
  40342c:	f803 4f01 	strb.w	r4, [r3, #1]!
  403430:	e7f7      	b.n	403422 <memcpy+0x6>

00403432 <memset>:
  403432:	4402      	add	r2, r0
  403434:	4603      	mov	r3, r0
  403436:	4293      	cmp	r3, r2
  403438:	d100      	bne.n	40343c <memset+0xa>
  40343a:	4770      	bx	lr
  40343c:	f803 1b01 	strb.w	r1, [r3], #1
  403440:	e7f9      	b.n	403436 <memset+0x4>

00403442 <__cvt>:
  403442:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403446:	b088      	sub	sp, #32
  403448:	2b00      	cmp	r3, #0
  40344a:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40344c:	9912      	ldr	r1, [sp, #72]	; 0x48
  40344e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403450:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  403454:	461e      	mov	r6, r3
  403456:	f027 0720 	bic.w	r7, r7, #32
  40345a:	bfbb      	ittet	lt
  40345c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  403460:	461e      	movlt	r6, r3
  403462:	2300      	movge	r3, #0
  403464:	232d      	movlt	r3, #45	; 0x2d
  403466:	2f46      	cmp	r7, #70	; 0x46
  403468:	4614      	mov	r4, r2
  40346a:	700b      	strb	r3, [r1, #0]
  40346c:	d004      	beq.n	403478 <__cvt+0x36>
  40346e:	2f45      	cmp	r7, #69	; 0x45
  403470:	d100      	bne.n	403474 <__cvt+0x32>
  403472:	3501      	adds	r5, #1
  403474:	2302      	movs	r3, #2
  403476:	e000      	b.n	40347a <__cvt+0x38>
  403478:	2303      	movs	r3, #3
  40347a:	aa07      	add	r2, sp, #28
  40347c:	9204      	str	r2, [sp, #16]
  40347e:	aa06      	add	r2, sp, #24
  403480:	9203      	str	r2, [sp, #12]
  403482:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  403486:	4622      	mov	r2, r4
  403488:	4633      	mov	r3, r6
  40348a:	f000 fd9d 	bl	403fc8 <_dtoa_r>
  40348e:	2f47      	cmp	r7, #71	; 0x47
  403490:	4680      	mov	r8, r0
  403492:	d102      	bne.n	40349a <__cvt+0x58>
  403494:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403496:	07db      	lsls	r3, r3, #31
  403498:	d526      	bpl.n	4034e8 <__cvt+0xa6>
  40349a:	2f46      	cmp	r7, #70	; 0x46
  40349c:	eb08 0905 	add.w	r9, r8, r5
  4034a0:	d111      	bne.n	4034c6 <__cvt+0x84>
  4034a2:	f898 3000 	ldrb.w	r3, [r8]
  4034a6:	2b30      	cmp	r3, #48	; 0x30
  4034a8:	d10a      	bne.n	4034c0 <__cvt+0x7e>
  4034aa:	2200      	movs	r2, #0
  4034ac:	2300      	movs	r3, #0
  4034ae:	4620      	mov	r0, r4
  4034b0:	4631      	mov	r1, r6
  4034b2:	f7ff ff35 	bl	403320 <__aeabi_dcmpeq>
  4034b6:	b918      	cbnz	r0, 4034c0 <__cvt+0x7e>
  4034b8:	f1c5 0501 	rsb	r5, r5, #1
  4034bc:	f8ca 5000 	str.w	r5, [sl]
  4034c0:	f8da 3000 	ldr.w	r3, [sl]
  4034c4:	4499      	add	r9, r3
  4034c6:	2200      	movs	r2, #0
  4034c8:	2300      	movs	r3, #0
  4034ca:	4620      	mov	r0, r4
  4034cc:	4631      	mov	r1, r6
  4034ce:	f7ff ff27 	bl	403320 <__aeabi_dcmpeq>
  4034d2:	b938      	cbnz	r0, 4034e4 <__cvt+0xa2>
  4034d4:	2230      	movs	r2, #48	; 0x30
  4034d6:	9b07      	ldr	r3, [sp, #28]
  4034d8:	4599      	cmp	r9, r3
  4034da:	d905      	bls.n	4034e8 <__cvt+0xa6>
  4034dc:	1c59      	adds	r1, r3, #1
  4034de:	9107      	str	r1, [sp, #28]
  4034e0:	701a      	strb	r2, [r3, #0]
  4034e2:	e7f8      	b.n	4034d6 <__cvt+0x94>
  4034e4:	f8cd 901c 	str.w	r9, [sp, #28]
  4034e8:	9b07      	ldr	r3, [sp, #28]
  4034ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4034ec:	eba3 0308 	sub.w	r3, r3, r8
  4034f0:	4640      	mov	r0, r8
  4034f2:	6013      	str	r3, [r2, #0]
  4034f4:	b008      	add	sp, #32
  4034f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004034fa <__exponent>:
  4034fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  4034fc:	4603      	mov	r3, r0
  4034fe:	2900      	cmp	r1, #0
  403500:	bfb8      	it	lt
  403502:	4249      	neglt	r1, r1
  403504:	f803 2b02 	strb.w	r2, [r3], #2
  403508:	bfb4      	ite	lt
  40350a:	222d      	movlt	r2, #45	; 0x2d
  40350c:	222b      	movge	r2, #43	; 0x2b
  40350e:	2909      	cmp	r1, #9
  403510:	7042      	strb	r2, [r0, #1]
  403512:	dd20      	ble.n	403556 <__exponent+0x5c>
  403514:	f10d 0207 	add.w	r2, sp, #7
  403518:	4617      	mov	r7, r2
  40351a:	260a      	movs	r6, #10
  40351c:	fb91 f5f6 	sdiv	r5, r1, r6
  403520:	fb06 1115 	mls	r1, r6, r5, r1
  403524:	3130      	adds	r1, #48	; 0x30
  403526:	2d09      	cmp	r5, #9
  403528:	f802 1c01 	strb.w	r1, [r2, #-1]
  40352c:	f102 34ff 	add.w	r4, r2, #4294967295
  403530:	4629      	mov	r1, r5
  403532:	dc09      	bgt.n	403548 <__exponent+0x4e>
  403534:	3130      	adds	r1, #48	; 0x30
  403536:	3a02      	subs	r2, #2
  403538:	f804 1c01 	strb.w	r1, [r4, #-1]
  40353c:	42ba      	cmp	r2, r7
  40353e:	461c      	mov	r4, r3
  403540:	d304      	bcc.n	40354c <__exponent+0x52>
  403542:	1a20      	subs	r0, r4, r0
  403544:	b003      	add	sp, #12
  403546:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403548:	4622      	mov	r2, r4
  40354a:	e7e7      	b.n	40351c <__exponent+0x22>
  40354c:	f812 1b01 	ldrb.w	r1, [r2], #1
  403550:	f803 1b01 	strb.w	r1, [r3], #1
  403554:	e7f2      	b.n	40353c <__exponent+0x42>
  403556:	2230      	movs	r2, #48	; 0x30
  403558:	461c      	mov	r4, r3
  40355a:	4411      	add	r1, r2
  40355c:	f804 2b02 	strb.w	r2, [r4], #2
  403560:	7059      	strb	r1, [r3, #1]
  403562:	e7ee      	b.n	403542 <__exponent+0x48>

00403564 <_printf_float>:
  403564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403568:	b091      	sub	sp, #68	; 0x44
  40356a:	460c      	mov	r4, r1
  40356c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  40356e:	4693      	mov	fp, r2
  403570:	461e      	mov	r6, r3
  403572:	4605      	mov	r5, r0
  403574:	f001 fc76 	bl	404e64 <_localeconv_r>
  403578:	6803      	ldr	r3, [r0, #0]
  40357a:	9309      	str	r3, [sp, #36]	; 0x24
  40357c:	4618      	mov	r0, r3
  40357e:	f000 fc8d 	bl	403e9c <strlen>
  403582:	2300      	movs	r3, #0
  403584:	930e      	str	r3, [sp, #56]	; 0x38
  403586:	683b      	ldr	r3, [r7, #0]
  403588:	900a      	str	r0, [sp, #40]	; 0x28
  40358a:	3307      	adds	r3, #7
  40358c:	f023 0307 	bic.w	r3, r3, #7
  403590:	f103 0208 	add.w	r2, r3, #8
  403594:	f894 8018 	ldrb.w	r8, [r4, #24]
  403598:	f8d4 a000 	ldr.w	sl, [r4]
  40359c:	603a      	str	r2, [r7, #0]
  40359e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4035a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  4035a6:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  4035aa:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  4035ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4035b0:	930b      	str	r3, [sp, #44]	; 0x2c
  4035b2:	f04f 32ff 	mov.w	r2, #4294967295
  4035b6:	4ba6      	ldr	r3, [pc, #664]	; (403850 <_printf_float+0x2ec>)
  4035b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4035ba:	4638      	mov	r0, r7
  4035bc:	f002 fb86 	bl	405ccc <__aeabi_dcmpun>
  4035c0:	2800      	cmp	r0, #0
  4035c2:	f040 81f7 	bne.w	4039b4 <_printf_float+0x450>
  4035c6:	f04f 32ff 	mov.w	r2, #4294967295
  4035ca:	4ba1      	ldr	r3, [pc, #644]	; (403850 <_printf_float+0x2ec>)
  4035cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4035ce:	4638      	mov	r0, r7
  4035d0:	f7ff feba 	bl	403348 <__aeabi_dcmple>
  4035d4:	2800      	cmp	r0, #0
  4035d6:	f040 81ed 	bne.w	4039b4 <_printf_float+0x450>
  4035da:	2200      	movs	r2, #0
  4035dc:	2300      	movs	r3, #0
  4035de:	4638      	mov	r0, r7
  4035e0:	4649      	mov	r1, r9
  4035e2:	f7ff fea7 	bl	403334 <__aeabi_dcmplt>
  4035e6:	b110      	cbz	r0, 4035ee <_printf_float+0x8a>
  4035e8:	232d      	movs	r3, #45	; 0x2d
  4035ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4035ee:	4b99      	ldr	r3, [pc, #612]	; (403854 <_printf_float+0x2f0>)
  4035f0:	4f99      	ldr	r7, [pc, #612]	; (403858 <_printf_float+0x2f4>)
  4035f2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4035f6:	bf98      	it	ls
  4035f8:	461f      	movls	r7, r3
  4035fa:	2303      	movs	r3, #3
  4035fc:	6123      	str	r3, [r4, #16]
  4035fe:	f02a 0304 	bic.w	r3, sl, #4
  403602:	6023      	str	r3, [r4, #0]
  403604:	f04f 0900 	mov.w	r9, #0
  403608:	9600      	str	r6, [sp, #0]
  40360a:	465b      	mov	r3, fp
  40360c:	aa0f      	add	r2, sp, #60	; 0x3c
  40360e:	4621      	mov	r1, r4
  403610:	4628      	mov	r0, r5
  403612:	f000 f9df 	bl	4039d4 <_printf_common>
  403616:	3001      	adds	r0, #1
  403618:	f040 809a 	bne.w	403750 <_printf_float+0x1ec>
  40361c:	f04f 30ff 	mov.w	r0, #4294967295
  403620:	b011      	add	sp, #68	; 0x44
  403622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403626:	6862      	ldr	r2, [r4, #4]
  403628:	1c53      	adds	r3, r2, #1
  40362a:	a80e      	add	r0, sp, #56	; 0x38
  40362c:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  403630:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  403634:	d141      	bne.n	4036ba <_printf_float+0x156>
  403636:	2206      	movs	r2, #6
  403638:	6062      	str	r2, [r4, #4]
  40363a:	6023      	str	r3, [r4, #0]
  40363c:	2100      	movs	r1, #0
  40363e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  403642:	9301      	str	r3, [sp, #4]
  403644:	6863      	ldr	r3, [r4, #4]
  403646:	9005      	str	r0, [sp, #20]
  403648:	9202      	str	r2, [sp, #8]
  40364a:	9300      	str	r3, [sp, #0]
  40364c:	463a      	mov	r2, r7
  40364e:	464b      	mov	r3, r9
  403650:	9106      	str	r1, [sp, #24]
  403652:	f8cd 8010 	str.w	r8, [sp, #16]
  403656:	f8cd e00c 	str.w	lr, [sp, #12]
  40365a:	4628      	mov	r0, r5
  40365c:	f7ff fef1 	bl	403442 <__cvt>
  403660:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  403664:	2b47      	cmp	r3, #71	; 0x47
  403666:	4607      	mov	r7, r0
  403668:	d109      	bne.n	40367e <_printf_float+0x11a>
  40366a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40366c:	1cd8      	adds	r0, r3, #3
  40366e:	db02      	blt.n	403676 <_printf_float+0x112>
  403670:	6862      	ldr	r2, [r4, #4]
  403672:	4293      	cmp	r3, r2
  403674:	dd59      	ble.n	40372a <_printf_float+0x1c6>
  403676:	f1a8 0802 	sub.w	r8, r8, #2
  40367a:	fa5f f888 	uxtb.w	r8, r8
  40367e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  403682:	990d      	ldr	r1, [sp, #52]	; 0x34
  403684:	d836      	bhi.n	4036f4 <_printf_float+0x190>
  403686:	3901      	subs	r1, #1
  403688:	4642      	mov	r2, r8
  40368a:	f104 0050 	add.w	r0, r4, #80	; 0x50
  40368e:	910d      	str	r1, [sp, #52]	; 0x34
  403690:	f7ff ff33 	bl	4034fa <__exponent>
  403694:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403696:	1883      	adds	r3, r0, r2
  403698:	2a01      	cmp	r2, #1
  40369a:	4681      	mov	r9, r0
  40369c:	6123      	str	r3, [r4, #16]
  40369e:	dc02      	bgt.n	4036a6 <_printf_float+0x142>
  4036a0:	6822      	ldr	r2, [r4, #0]
  4036a2:	07d1      	lsls	r1, r2, #31
  4036a4:	d501      	bpl.n	4036aa <_printf_float+0x146>
  4036a6:	3301      	adds	r3, #1
  4036a8:	6123      	str	r3, [r4, #16]
  4036aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  4036ae:	2b00      	cmp	r3, #0
  4036b0:	d0aa      	beq.n	403608 <_printf_float+0xa4>
  4036b2:	232d      	movs	r3, #45	; 0x2d
  4036b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4036b8:	e7a6      	b.n	403608 <_printf_float+0xa4>
  4036ba:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  4036be:	d002      	beq.n	4036c6 <_printf_float+0x162>
  4036c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4036c4:	d1b9      	bne.n	40363a <_printf_float+0xd6>
  4036c6:	b19a      	cbz	r2, 4036f0 <_printf_float+0x18c>
  4036c8:	2100      	movs	r1, #0
  4036ca:	9106      	str	r1, [sp, #24]
  4036cc:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  4036d0:	e88d 000c 	stmia.w	sp, {r2, r3}
  4036d4:	6023      	str	r3, [r4, #0]
  4036d6:	9005      	str	r0, [sp, #20]
  4036d8:	463a      	mov	r2, r7
  4036da:	f8cd 8010 	str.w	r8, [sp, #16]
  4036de:	f8cd e00c 	str.w	lr, [sp, #12]
  4036e2:	9102      	str	r1, [sp, #8]
  4036e4:	464b      	mov	r3, r9
  4036e6:	4628      	mov	r0, r5
  4036e8:	f7ff feab 	bl	403442 <__cvt>
  4036ec:	4607      	mov	r7, r0
  4036ee:	e7bc      	b.n	40366a <_printf_float+0x106>
  4036f0:	2201      	movs	r2, #1
  4036f2:	e7a1      	b.n	403638 <_printf_float+0xd4>
  4036f4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  4036f8:	d119      	bne.n	40372e <_printf_float+0x1ca>
  4036fa:	2900      	cmp	r1, #0
  4036fc:	6863      	ldr	r3, [r4, #4]
  4036fe:	dd0c      	ble.n	40371a <_printf_float+0x1b6>
  403700:	6121      	str	r1, [r4, #16]
  403702:	b913      	cbnz	r3, 40370a <_printf_float+0x1a6>
  403704:	6822      	ldr	r2, [r4, #0]
  403706:	07d2      	lsls	r2, r2, #31
  403708:	d502      	bpl.n	403710 <_printf_float+0x1ac>
  40370a:	3301      	adds	r3, #1
  40370c:	440b      	add	r3, r1
  40370e:	6123      	str	r3, [r4, #16]
  403710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403712:	65a3      	str	r3, [r4, #88]	; 0x58
  403714:	f04f 0900 	mov.w	r9, #0
  403718:	e7c7      	b.n	4036aa <_printf_float+0x146>
  40371a:	b913      	cbnz	r3, 403722 <_printf_float+0x1be>
  40371c:	6822      	ldr	r2, [r4, #0]
  40371e:	07d0      	lsls	r0, r2, #31
  403720:	d501      	bpl.n	403726 <_printf_float+0x1c2>
  403722:	3302      	adds	r3, #2
  403724:	e7f3      	b.n	40370e <_printf_float+0x1aa>
  403726:	2301      	movs	r3, #1
  403728:	e7f1      	b.n	40370e <_printf_float+0x1aa>
  40372a:	f04f 0867 	mov.w	r8, #103	; 0x67
  40372e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403732:	4293      	cmp	r3, r2
  403734:	db05      	blt.n	403742 <_printf_float+0x1de>
  403736:	6822      	ldr	r2, [r4, #0]
  403738:	6123      	str	r3, [r4, #16]
  40373a:	07d1      	lsls	r1, r2, #31
  40373c:	d5e8      	bpl.n	403710 <_printf_float+0x1ac>
  40373e:	3301      	adds	r3, #1
  403740:	e7e5      	b.n	40370e <_printf_float+0x1aa>
  403742:	2b00      	cmp	r3, #0
  403744:	bfd4      	ite	le
  403746:	f1c3 0302 	rsble	r3, r3, #2
  40374a:	2301      	movgt	r3, #1
  40374c:	4413      	add	r3, r2
  40374e:	e7de      	b.n	40370e <_printf_float+0x1aa>
  403750:	6823      	ldr	r3, [r4, #0]
  403752:	055a      	lsls	r2, r3, #21
  403754:	d407      	bmi.n	403766 <_printf_float+0x202>
  403756:	6923      	ldr	r3, [r4, #16]
  403758:	463a      	mov	r2, r7
  40375a:	4659      	mov	r1, fp
  40375c:	4628      	mov	r0, r5
  40375e:	47b0      	blx	r6
  403760:	3001      	adds	r0, #1
  403762:	d12a      	bne.n	4037ba <_printf_float+0x256>
  403764:	e75a      	b.n	40361c <_printf_float+0xb8>
  403766:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40376a:	f240 80dc 	bls.w	403926 <_printf_float+0x3c2>
  40376e:	2200      	movs	r2, #0
  403770:	2300      	movs	r3, #0
  403772:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403776:	f7ff fdd3 	bl	403320 <__aeabi_dcmpeq>
  40377a:	2800      	cmp	r0, #0
  40377c:	d039      	beq.n	4037f2 <_printf_float+0x28e>
  40377e:	2301      	movs	r3, #1
  403780:	4a36      	ldr	r2, [pc, #216]	; (40385c <_printf_float+0x2f8>)
  403782:	4659      	mov	r1, fp
  403784:	4628      	mov	r0, r5
  403786:	47b0      	blx	r6
  403788:	3001      	adds	r0, #1
  40378a:	f43f af47 	beq.w	40361c <_printf_float+0xb8>
  40378e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403790:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403792:	429a      	cmp	r2, r3
  403794:	db02      	blt.n	40379c <_printf_float+0x238>
  403796:	6823      	ldr	r3, [r4, #0]
  403798:	07d8      	lsls	r0, r3, #31
  40379a:	d50e      	bpl.n	4037ba <_printf_float+0x256>
  40379c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40379e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4037a0:	4659      	mov	r1, fp
  4037a2:	4628      	mov	r0, r5
  4037a4:	47b0      	blx	r6
  4037a6:	3001      	adds	r0, #1
  4037a8:	f43f af38 	beq.w	40361c <_printf_float+0xb8>
  4037ac:	2700      	movs	r7, #0
  4037ae:	f104 081a 	add.w	r8, r4, #26
  4037b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4037b4:	3b01      	subs	r3, #1
  4037b6:	429f      	cmp	r7, r3
  4037b8:	db11      	blt.n	4037de <_printf_float+0x27a>
  4037ba:	6823      	ldr	r3, [r4, #0]
  4037bc:	079f      	lsls	r7, r3, #30
  4037be:	d508      	bpl.n	4037d2 <_printf_float+0x26e>
  4037c0:	2700      	movs	r7, #0
  4037c2:	f104 0819 	add.w	r8, r4, #25
  4037c6:	68e3      	ldr	r3, [r4, #12]
  4037c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4037ca:	1a9b      	subs	r3, r3, r2
  4037cc:	429f      	cmp	r7, r3
  4037ce:	f2c0 80e7 	blt.w	4039a0 <_printf_float+0x43c>
  4037d2:	68e0      	ldr	r0, [r4, #12]
  4037d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4037d6:	4298      	cmp	r0, r3
  4037d8:	bfb8      	it	lt
  4037da:	4618      	movlt	r0, r3
  4037dc:	e720      	b.n	403620 <_printf_float+0xbc>
  4037de:	2301      	movs	r3, #1
  4037e0:	4642      	mov	r2, r8
  4037e2:	4659      	mov	r1, fp
  4037e4:	4628      	mov	r0, r5
  4037e6:	47b0      	blx	r6
  4037e8:	3001      	adds	r0, #1
  4037ea:	f43f af17 	beq.w	40361c <_printf_float+0xb8>
  4037ee:	3701      	adds	r7, #1
  4037f0:	e7df      	b.n	4037b2 <_printf_float+0x24e>
  4037f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4037f4:	2b00      	cmp	r3, #0
  4037f6:	dc33      	bgt.n	403860 <_printf_float+0x2fc>
  4037f8:	2301      	movs	r3, #1
  4037fa:	4a18      	ldr	r2, [pc, #96]	; (40385c <_printf_float+0x2f8>)
  4037fc:	4659      	mov	r1, fp
  4037fe:	4628      	mov	r0, r5
  403800:	47b0      	blx	r6
  403802:	3001      	adds	r0, #1
  403804:	f43f af0a 	beq.w	40361c <_printf_float+0xb8>
  403808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40380a:	b923      	cbnz	r3, 403816 <_printf_float+0x2b2>
  40380c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40380e:	b913      	cbnz	r3, 403816 <_printf_float+0x2b2>
  403810:	6823      	ldr	r3, [r4, #0]
  403812:	07d9      	lsls	r1, r3, #31
  403814:	d5d1      	bpl.n	4037ba <_printf_float+0x256>
  403816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403818:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40381a:	4659      	mov	r1, fp
  40381c:	4628      	mov	r0, r5
  40381e:	47b0      	blx	r6
  403820:	3001      	adds	r0, #1
  403822:	f43f aefb 	beq.w	40361c <_printf_float+0xb8>
  403826:	f04f 0800 	mov.w	r8, #0
  40382a:	f104 091a 	add.w	r9, r4, #26
  40382e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403830:	425b      	negs	r3, r3
  403832:	4598      	cmp	r8, r3
  403834:	db01      	blt.n	40383a <_printf_float+0x2d6>
  403836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403838:	e78e      	b.n	403758 <_printf_float+0x1f4>
  40383a:	2301      	movs	r3, #1
  40383c:	464a      	mov	r2, r9
  40383e:	4659      	mov	r1, fp
  403840:	4628      	mov	r0, r5
  403842:	47b0      	blx	r6
  403844:	3001      	adds	r0, #1
  403846:	f43f aee9 	beq.w	40361c <_printf_float+0xb8>
  40384a:	f108 0801 	add.w	r8, r8, #1
  40384e:	e7ee      	b.n	40382e <_printf_float+0x2ca>
  403850:	7fefffff 	.word	0x7fefffff
  403854:	00406338 	.word	0x00406338
  403858:	0040633c 	.word	0x0040633c
  40385c:	00406348 	.word	0x00406348
  403860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403862:	6da3      	ldr	r3, [r4, #88]	; 0x58
  403864:	429a      	cmp	r2, r3
  403866:	bfa8      	it	ge
  403868:	461a      	movge	r2, r3
  40386a:	2a00      	cmp	r2, #0
  40386c:	4690      	mov	r8, r2
  40386e:	dc36      	bgt.n	4038de <_printf_float+0x37a>
  403870:	f104 031a 	add.w	r3, r4, #26
  403874:	f04f 0a00 	mov.w	sl, #0
  403878:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  40387c:	930b      	str	r3, [sp, #44]	; 0x2c
  40387e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  403882:	eba9 0308 	sub.w	r3, r9, r8
  403886:	459a      	cmp	sl, r3
  403888:	db31      	blt.n	4038ee <_printf_float+0x38a>
  40388a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40388c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40388e:	429a      	cmp	r2, r3
  403890:	db38      	blt.n	403904 <_printf_float+0x3a0>
  403892:	6823      	ldr	r3, [r4, #0]
  403894:	07da      	lsls	r2, r3, #31
  403896:	d435      	bmi.n	403904 <_printf_float+0x3a0>
  403898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40389a:	990d      	ldr	r1, [sp, #52]	; 0x34
  40389c:	eba3 0209 	sub.w	r2, r3, r9
  4038a0:	eba3 0801 	sub.w	r8, r3, r1
  4038a4:	4590      	cmp	r8, r2
  4038a6:	bfa8      	it	ge
  4038a8:	4690      	movge	r8, r2
  4038aa:	f1b8 0f00 	cmp.w	r8, #0
  4038ae:	dc31      	bgt.n	403914 <_printf_float+0x3b0>
  4038b0:	2700      	movs	r7, #0
  4038b2:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4038b6:	f104 091a 	add.w	r9, r4, #26
  4038ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4038bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4038be:	1a9b      	subs	r3, r3, r2
  4038c0:	eba3 0308 	sub.w	r3, r3, r8
  4038c4:	429f      	cmp	r7, r3
  4038c6:	f6bf af78 	bge.w	4037ba <_printf_float+0x256>
  4038ca:	2301      	movs	r3, #1
  4038cc:	464a      	mov	r2, r9
  4038ce:	4659      	mov	r1, fp
  4038d0:	4628      	mov	r0, r5
  4038d2:	47b0      	blx	r6
  4038d4:	3001      	adds	r0, #1
  4038d6:	f43f aea1 	beq.w	40361c <_printf_float+0xb8>
  4038da:	3701      	adds	r7, #1
  4038dc:	e7ed      	b.n	4038ba <_printf_float+0x356>
  4038de:	4613      	mov	r3, r2
  4038e0:	4659      	mov	r1, fp
  4038e2:	463a      	mov	r2, r7
  4038e4:	4628      	mov	r0, r5
  4038e6:	47b0      	blx	r6
  4038e8:	3001      	adds	r0, #1
  4038ea:	d1c1      	bne.n	403870 <_printf_float+0x30c>
  4038ec:	e696      	b.n	40361c <_printf_float+0xb8>
  4038ee:	2301      	movs	r3, #1
  4038f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4038f2:	4659      	mov	r1, fp
  4038f4:	4628      	mov	r0, r5
  4038f6:	47b0      	blx	r6
  4038f8:	3001      	adds	r0, #1
  4038fa:	f43f ae8f 	beq.w	40361c <_printf_float+0xb8>
  4038fe:	f10a 0a01 	add.w	sl, sl, #1
  403902:	e7bc      	b.n	40387e <_printf_float+0x31a>
  403904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403906:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403908:	4659      	mov	r1, fp
  40390a:	4628      	mov	r0, r5
  40390c:	47b0      	blx	r6
  40390e:	3001      	adds	r0, #1
  403910:	d1c2      	bne.n	403898 <_printf_float+0x334>
  403912:	e683      	b.n	40361c <_printf_float+0xb8>
  403914:	4643      	mov	r3, r8
  403916:	eb07 0209 	add.w	r2, r7, r9
  40391a:	4659      	mov	r1, fp
  40391c:	4628      	mov	r0, r5
  40391e:	47b0      	blx	r6
  403920:	3001      	adds	r0, #1
  403922:	d1c5      	bne.n	4038b0 <_printf_float+0x34c>
  403924:	e67a      	b.n	40361c <_printf_float+0xb8>
  403926:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403928:	2a01      	cmp	r2, #1
  40392a:	dc01      	bgt.n	403930 <_printf_float+0x3cc>
  40392c:	07db      	lsls	r3, r3, #31
  40392e:	d534      	bpl.n	40399a <_printf_float+0x436>
  403930:	2301      	movs	r3, #1
  403932:	463a      	mov	r2, r7
  403934:	4659      	mov	r1, fp
  403936:	4628      	mov	r0, r5
  403938:	47b0      	blx	r6
  40393a:	3001      	adds	r0, #1
  40393c:	f43f ae6e 	beq.w	40361c <_printf_float+0xb8>
  403940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403942:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403944:	4659      	mov	r1, fp
  403946:	4628      	mov	r0, r5
  403948:	47b0      	blx	r6
  40394a:	3001      	adds	r0, #1
  40394c:	f43f ae66 	beq.w	40361c <_printf_float+0xb8>
  403950:	2200      	movs	r2, #0
  403952:	2300      	movs	r3, #0
  403954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403958:	f7ff fce2 	bl	403320 <__aeabi_dcmpeq>
  40395c:	b150      	cbz	r0, 403974 <_printf_float+0x410>
  40395e:	2700      	movs	r7, #0
  403960:	f104 081a 	add.w	r8, r4, #26
  403964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403966:	3b01      	subs	r3, #1
  403968:	429f      	cmp	r7, r3
  40396a:	db0c      	blt.n	403986 <_printf_float+0x422>
  40396c:	464b      	mov	r3, r9
  40396e:	f104 0250 	add.w	r2, r4, #80	; 0x50
  403972:	e6f2      	b.n	40375a <_printf_float+0x1f6>
  403974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403976:	1c7a      	adds	r2, r7, #1
  403978:	3b01      	subs	r3, #1
  40397a:	4659      	mov	r1, fp
  40397c:	4628      	mov	r0, r5
  40397e:	47b0      	blx	r6
  403980:	3001      	adds	r0, #1
  403982:	d1f3      	bne.n	40396c <_printf_float+0x408>
  403984:	e64a      	b.n	40361c <_printf_float+0xb8>
  403986:	2301      	movs	r3, #1
  403988:	4642      	mov	r2, r8
  40398a:	4659      	mov	r1, fp
  40398c:	4628      	mov	r0, r5
  40398e:	47b0      	blx	r6
  403990:	3001      	adds	r0, #1
  403992:	f43f ae43 	beq.w	40361c <_printf_float+0xb8>
  403996:	3701      	adds	r7, #1
  403998:	e7e4      	b.n	403964 <_printf_float+0x400>
  40399a:	2301      	movs	r3, #1
  40399c:	463a      	mov	r2, r7
  40399e:	e7ec      	b.n	40397a <_printf_float+0x416>
  4039a0:	2301      	movs	r3, #1
  4039a2:	4642      	mov	r2, r8
  4039a4:	4659      	mov	r1, fp
  4039a6:	4628      	mov	r0, r5
  4039a8:	47b0      	blx	r6
  4039aa:	3001      	adds	r0, #1
  4039ac:	f43f ae36 	beq.w	40361c <_printf_float+0xb8>
  4039b0:	3701      	adds	r7, #1
  4039b2:	e708      	b.n	4037c6 <_printf_float+0x262>
  4039b4:	463a      	mov	r2, r7
  4039b6:	464b      	mov	r3, r9
  4039b8:	4638      	mov	r0, r7
  4039ba:	4649      	mov	r1, r9
  4039bc:	f002 f986 	bl	405ccc <__aeabi_dcmpun>
  4039c0:	2800      	cmp	r0, #0
  4039c2:	f43f ae30 	beq.w	403626 <_printf_float+0xc2>
  4039c6:	4b01      	ldr	r3, [pc, #4]	; (4039cc <_printf_float+0x468>)
  4039c8:	4f01      	ldr	r7, [pc, #4]	; (4039d0 <_printf_float+0x46c>)
  4039ca:	e612      	b.n	4035f2 <_printf_float+0x8e>
  4039cc:	00406340 	.word	0x00406340
  4039d0:	00406344 	.word	0x00406344

004039d4 <_printf_common>:
  4039d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4039d8:	4691      	mov	r9, r2
  4039da:	461f      	mov	r7, r3
  4039dc:	688a      	ldr	r2, [r1, #8]
  4039de:	690b      	ldr	r3, [r1, #16]
  4039e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4039e4:	4293      	cmp	r3, r2
  4039e6:	bfb8      	it	lt
  4039e8:	4613      	movlt	r3, r2
  4039ea:	f8c9 3000 	str.w	r3, [r9]
  4039ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4039f2:	4606      	mov	r6, r0
  4039f4:	460c      	mov	r4, r1
  4039f6:	b112      	cbz	r2, 4039fe <_printf_common+0x2a>
  4039f8:	3301      	adds	r3, #1
  4039fa:	f8c9 3000 	str.w	r3, [r9]
  4039fe:	6823      	ldr	r3, [r4, #0]
  403a00:	0699      	lsls	r1, r3, #26
  403a02:	bf42      	ittt	mi
  403a04:	f8d9 3000 	ldrmi.w	r3, [r9]
  403a08:	3302      	addmi	r3, #2
  403a0a:	f8c9 3000 	strmi.w	r3, [r9]
  403a0e:	6825      	ldr	r5, [r4, #0]
  403a10:	f015 0506 	ands.w	r5, r5, #6
  403a14:	d107      	bne.n	403a26 <_printf_common+0x52>
  403a16:	f104 0a19 	add.w	sl, r4, #25
  403a1a:	68e3      	ldr	r3, [r4, #12]
  403a1c:	f8d9 2000 	ldr.w	r2, [r9]
  403a20:	1a9b      	subs	r3, r3, r2
  403a22:	429d      	cmp	r5, r3
  403a24:	db29      	blt.n	403a7a <_printf_common+0xa6>
  403a26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  403a2a:	6822      	ldr	r2, [r4, #0]
  403a2c:	3300      	adds	r3, #0
  403a2e:	bf18      	it	ne
  403a30:	2301      	movne	r3, #1
  403a32:	0692      	lsls	r2, r2, #26
  403a34:	d42e      	bmi.n	403a94 <_printf_common+0xc0>
  403a36:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403a3a:	4639      	mov	r1, r7
  403a3c:	4630      	mov	r0, r6
  403a3e:	47c0      	blx	r8
  403a40:	3001      	adds	r0, #1
  403a42:	d021      	beq.n	403a88 <_printf_common+0xb4>
  403a44:	6823      	ldr	r3, [r4, #0]
  403a46:	68e5      	ldr	r5, [r4, #12]
  403a48:	f8d9 2000 	ldr.w	r2, [r9]
  403a4c:	f003 0306 	and.w	r3, r3, #6
  403a50:	2b04      	cmp	r3, #4
  403a52:	bf08      	it	eq
  403a54:	1aad      	subeq	r5, r5, r2
  403a56:	68a3      	ldr	r3, [r4, #8]
  403a58:	6922      	ldr	r2, [r4, #16]
  403a5a:	bf0c      	ite	eq
  403a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  403a60:	2500      	movne	r5, #0
  403a62:	4293      	cmp	r3, r2
  403a64:	bfc4      	itt	gt
  403a66:	1a9b      	subgt	r3, r3, r2
  403a68:	18ed      	addgt	r5, r5, r3
  403a6a:	f04f 0900 	mov.w	r9, #0
  403a6e:	341a      	adds	r4, #26
  403a70:	454d      	cmp	r5, r9
  403a72:	d11b      	bne.n	403aac <_printf_common+0xd8>
  403a74:	2000      	movs	r0, #0
  403a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a7a:	2301      	movs	r3, #1
  403a7c:	4652      	mov	r2, sl
  403a7e:	4639      	mov	r1, r7
  403a80:	4630      	mov	r0, r6
  403a82:	47c0      	blx	r8
  403a84:	3001      	adds	r0, #1
  403a86:	d103      	bne.n	403a90 <_printf_common+0xbc>
  403a88:	f04f 30ff 	mov.w	r0, #4294967295
  403a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a90:	3501      	adds	r5, #1
  403a92:	e7c2      	b.n	403a1a <_printf_common+0x46>
  403a94:	18e1      	adds	r1, r4, r3
  403a96:	1c5a      	adds	r2, r3, #1
  403a98:	2030      	movs	r0, #48	; 0x30
  403a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  403a9e:	4422      	add	r2, r4
  403aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  403aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  403aa8:	3302      	adds	r3, #2
  403aaa:	e7c4      	b.n	403a36 <_printf_common+0x62>
  403aac:	2301      	movs	r3, #1
  403aae:	4622      	mov	r2, r4
  403ab0:	4639      	mov	r1, r7
  403ab2:	4630      	mov	r0, r6
  403ab4:	47c0      	blx	r8
  403ab6:	3001      	adds	r0, #1
  403ab8:	d0e6      	beq.n	403a88 <_printf_common+0xb4>
  403aba:	f109 0901 	add.w	r9, r9, #1
  403abe:	e7d7      	b.n	403a70 <_printf_common+0x9c>

00403ac0 <_printf_i>:
  403ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403ac4:	4617      	mov	r7, r2
  403ac6:	7e0a      	ldrb	r2, [r1, #24]
  403ac8:	b085      	sub	sp, #20
  403aca:	2a6e      	cmp	r2, #110	; 0x6e
  403acc:	4698      	mov	r8, r3
  403ace:	4606      	mov	r6, r0
  403ad0:	460c      	mov	r4, r1
  403ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403ad4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  403ad8:	f000 80bc 	beq.w	403c54 <_printf_i+0x194>
  403adc:	d81a      	bhi.n	403b14 <_printf_i+0x54>
  403ade:	2a63      	cmp	r2, #99	; 0x63
  403ae0:	d02e      	beq.n	403b40 <_printf_i+0x80>
  403ae2:	d80a      	bhi.n	403afa <_printf_i+0x3a>
  403ae4:	2a00      	cmp	r2, #0
  403ae6:	f000 80c8 	beq.w	403c7a <_printf_i+0x1ba>
  403aea:	2a58      	cmp	r2, #88	; 0x58
  403aec:	f000 808a 	beq.w	403c04 <_printf_i+0x144>
  403af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403af4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  403af8:	e02a      	b.n	403b50 <_printf_i+0x90>
  403afa:	2a64      	cmp	r2, #100	; 0x64
  403afc:	d001      	beq.n	403b02 <_printf_i+0x42>
  403afe:	2a69      	cmp	r2, #105	; 0x69
  403b00:	d1f6      	bne.n	403af0 <_printf_i+0x30>
  403b02:	6821      	ldr	r1, [r4, #0]
  403b04:	681a      	ldr	r2, [r3, #0]
  403b06:	f011 0f80 	tst.w	r1, #128	; 0x80
  403b0a:	d023      	beq.n	403b54 <_printf_i+0x94>
  403b0c:	1d11      	adds	r1, r2, #4
  403b0e:	6019      	str	r1, [r3, #0]
  403b10:	6813      	ldr	r3, [r2, #0]
  403b12:	e027      	b.n	403b64 <_printf_i+0xa4>
  403b14:	2a73      	cmp	r2, #115	; 0x73
  403b16:	f000 80b4 	beq.w	403c82 <_printf_i+0x1c2>
  403b1a:	d808      	bhi.n	403b2e <_printf_i+0x6e>
  403b1c:	2a6f      	cmp	r2, #111	; 0x6f
  403b1e:	d02a      	beq.n	403b76 <_printf_i+0xb6>
  403b20:	2a70      	cmp	r2, #112	; 0x70
  403b22:	d1e5      	bne.n	403af0 <_printf_i+0x30>
  403b24:	680a      	ldr	r2, [r1, #0]
  403b26:	f042 0220 	orr.w	r2, r2, #32
  403b2a:	600a      	str	r2, [r1, #0]
  403b2c:	e003      	b.n	403b36 <_printf_i+0x76>
  403b2e:	2a75      	cmp	r2, #117	; 0x75
  403b30:	d021      	beq.n	403b76 <_printf_i+0xb6>
  403b32:	2a78      	cmp	r2, #120	; 0x78
  403b34:	d1dc      	bne.n	403af0 <_printf_i+0x30>
  403b36:	2278      	movs	r2, #120	; 0x78
  403b38:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  403b3c:	496e      	ldr	r1, [pc, #440]	; (403cf8 <_printf_i+0x238>)
  403b3e:	e064      	b.n	403c0a <_printf_i+0x14a>
  403b40:	681a      	ldr	r2, [r3, #0]
  403b42:	f101 0542 	add.w	r5, r1, #66	; 0x42
  403b46:	1d11      	adds	r1, r2, #4
  403b48:	6019      	str	r1, [r3, #0]
  403b4a:	6813      	ldr	r3, [r2, #0]
  403b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403b50:	2301      	movs	r3, #1
  403b52:	e0a3      	b.n	403c9c <_printf_i+0x1dc>
  403b54:	f011 0f40 	tst.w	r1, #64	; 0x40
  403b58:	f102 0104 	add.w	r1, r2, #4
  403b5c:	6019      	str	r1, [r3, #0]
  403b5e:	d0d7      	beq.n	403b10 <_printf_i+0x50>
  403b60:	f9b2 3000 	ldrsh.w	r3, [r2]
  403b64:	2b00      	cmp	r3, #0
  403b66:	da03      	bge.n	403b70 <_printf_i+0xb0>
  403b68:	222d      	movs	r2, #45	; 0x2d
  403b6a:	425b      	negs	r3, r3
  403b6c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  403b70:	4962      	ldr	r1, [pc, #392]	; (403cfc <_printf_i+0x23c>)
  403b72:	220a      	movs	r2, #10
  403b74:	e017      	b.n	403ba6 <_printf_i+0xe6>
  403b76:	6820      	ldr	r0, [r4, #0]
  403b78:	6819      	ldr	r1, [r3, #0]
  403b7a:	f010 0f80 	tst.w	r0, #128	; 0x80
  403b7e:	d003      	beq.n	403b88 <_printf_i+0xc8>
  403b80:	1d08      	adds	r0, r1, #4
  403b82:	6018      	str	r0, [r3, #0]
  403b84:	680b      	ldr	r3, [r1, #0]
  403b86:	e006      	b.n	403b96 <_printf_i+0xd6>
  403b88:	f010 0f40 	tst.w	r0, #64	; 0x40
  403b8c:	f101 0004 	add.w	r0, r1, #4
  403b90:	6018      	str	r0, [r3, #0]
  403b92:	d0f7      	beq.n	403b84 <_printf_i+0xc4>
  403b94:	880b      	ldrh	r3, [r1, #0]
  403b96:	4959      	ldr	r1, [pc, #356]	; (403cfc <_printf_i+0x23c>)
  403b98:	2a6f      	cmp	r2, #111	; 0x6f
  403b9a:	bf14      	ite	ne
  403b9c:	220a      	movne	r2, #10
  403b9e:	2208      	moveq	r2, #8
  403ba0:	2000      	movs	r0, #0
  403ba2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  403ba6:	6865      	ldr	r5, [r4, #4]
  403ba8:	60a5      	str	r5, [r4, #8]
  403baa:	2d00      	cmp	r5, #0
  403bac:	f2c0 809c 	blt.w	403ce8 <_printf_i+0x228>
  403bb0:	6820      	ldr	r0, [r4, #0]
  403bb2:	f020 0004 	bic.w	r0, r0, #4
  403bb6:	6020      	str	r0, [r4, #0]
  403bb8:	2b00      	cmp	r3, #0
  403bba:	d13f      	bne.n	403c3c <_printf_i+0x17c>
  403bbc:	2d00      	cmp	r5, #0
  403bbe:	f040 8095 	bne.w	403cec <_printf_i+0x22c>
  403bc2:	4675      	mov	r5, lr
  403bc4:	2a08      	cmp	r2, #8
  403bc6:	d10b      	bne.n	403be0 <_printf_i+0x120>
  403bc8:	6823      	ldr	r3, [r4, #0]
  403bca:	07da      	lsls	r2, r3, #31
  403bcc:	d508      	bpl.n	403be0 <_printf_i+0x120>
  403bce:	6923      	ldr	r3, [r4, #16]
  403bd0:	6862      	ldr	r2, [r4, #4]
  403bd2:	429a      	cmp	r2, r3
  403bd4:	bfde      	ittt	le
  403bd6:	2330      	movle	r3, #48	; 0x30
  403bd8:	f805 3c01 	strble.w	r3, [r5, #-1]
  403bdc:	f105 35ff 	addle.w	r5, r5, #4294967295
  403be0:	ebae 0305 	sub.w	r3, lr, r5
  403be4:	6123      	str	r3, [r4, #16]
  403be6:	f8cd 8000 	str.w	r8, [sp]
  403bea:	463b      	mov	r3, r7
  403bec:	aa03      	add	r2, sp, #12
  403bee:	4621      	mov	r1, r4
  403bf0:	4630      	mov	r0, r6
  403bf2:	f7ff feef 	bl	4039d4 <_printf_common>
  403bf6:	3001      	adds	r0, #1
  403bf8:	d155      	bne.n	403ca6 <_printf_i+0x1e6>
  403bfa:	f04f 30ff 	mov.w	r0, #4294967295
  403bfe:	b005      	add	sp, #20
  403c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403c04:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  403c08:	493c      	ldr	r1, [pc, #240]	; (403cfc <_printf_i+0x23c>)
  403c0a:	6822      	ldr	r2, [r4, #0]
  403c0c:	6818      	ldr	r0, [r3, #0]
  403c0e:	f012 0f80 	tst.w	r2, #128	; 0x80
  403c12:	f100 0504 	add.w	r5, r0, #4
  403c16:	601d      	str	r5, [r3, #0]
  403c18:	d001      	beq.n	403c1e <_printf_i+0x15e>
  403c1a:	6803      	ldr	r3, [r0, #0]
  403c1c:	e002      	b.n	403c24 <_printf_i+0x164>
  403c1e:	0655      	lsls	r5, r2, #25
  403c20:	d5fb      	bpl.n	403c1a <_printf_i+0x15a>
  403c22:	8803      	ldrh	r3, [r0, #0]
  403c24:	07d0      	lsls	r0, r2, #31
  403c26:	bf44      	itt	mi
  403c28:	f042 0220 	orrmi.w	r2, r2, #32
  403c2c:	6022      	strmi	r2, [r4, #0]
  403c2e:	b91b      	cbnz	r3, 403c38 <_printf_i+0x178>
  403c30:	6822      	ldr	r2, [r4, #0]
  403c32:	f022 0220 	bic.w	r2, r2, #32
  403c36:	6022      	str	r2, [r4, #0]
  403c38:	2210      	movs	r2, #16
  403c3a:	e7b1      	b.n	403ba0 <_printf_i+0xe0>
  403c3c:	4675      	mov	r5, lr
  403c3e:	fbb3 f0f2 	udiv	r0, r3, r2
  403c42:	fb02 3310 	mls	r3, r2, r0, r3
  403c46:	5ccb      	ldrb	r3, [r1, r3]
  403c48:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403c4c:	4603      	mov	r3, r0
  403c4e:	2800      	cmp	r0, #0
  403c50:	d1f5      	bne.n	403c3e <_printf_i+0x17e>
  403c52:	e7b7      	b.n	403bc4 <_printf_i+0x104>
  403c54:	6808      	ldr	r0, [r1, #0]
  403c56:	681a      	ldr	r2, [r3, #0]
  403c58:	6949      	ldr	r1, [r1, #20]
  403c5a:	f010 0f80 	tst.w	r0, #128	; 0x80
  403c5e:	d004      	beq.n	403c6a <_printf_i+0x1aa>
  403c60:	1d10      	adds	r0, r2, #4
  403c62:	6018      	str	r0, [r3, #0]
  403c64:	6813      	ldr	r3, [r2, #0]
  403c66:	6019      	str	r1, [r3, #0]
  403c68:	e007      	b.n	403c7a <_printf_i+0x1ba>
  403c6a:	f010 0f40 	tst.w	r0, #64	; 0x40
  403c6e:	f102 0004 	add.w	r0, r2, #4
  403c72:	6018      	str	r0, [r3, #0]
  403c74:	6813      	ldr	r3, [r2, #0]
  403c76:	d0f6      	beq.n	403c66 <_printf_i+0x1a6>
  403c78:	8019      	strh	r1, [r3, #0]
  403c7a:	2300      	movs	r3, #0
  403c7c:	6123      	str	r3, [r4, #16]
  403c7e:	4675      	mov	r5, lr
  403c80:	e7b1      	b.n	403be6 <_printf_i+0x126>
  403c82:	681a      	ldr	r2, [r3, #0]
  403c84:	1d11      	adds	r1, r2, #4
  403c86:	6019      	str	r1, [r3, #0]
  403c88:	6815      	ldr	r5, [r2, #0]
  403c8a:	6862      	ldr	r2, [r4, #4]
  403c8c:	2100      	movs	r1, #0
  403c8e:	4628      	mov	r0, r5
  403c90:	f001 f966 	bl	404f60 <memchr>
  403c94:	b108      	cbz	r0, 403c9a <_printf_i+0x1da>
  403c96:	1b40      	subs	r0, r0, r5
  403c98:	6060      	str	r0, [r4, #4]
  403c9a:	6863      	ldr	r3, [r4, #4]
  403c9c:	6123      	str	r3, [r4, #16]
  403c9e:	2300      	movs	r3, #0
  403ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403ca4:	e79f      	b.n	403be6 <_printf_i+0x126>
  403ca6:	6923      	ldr	r3, [r4, #16]
  403ca8:	462a      	mov	r2, r5
  403caa:	4639      	mov	r1, r7
  403cac:	4630      	mov	r0, r6
  403cae:	47c0      	blx	r8
  403cb0:	3001      	adds	r0, #1
  403cb2:	d0a2      	beq.n	403bfa <_printf_i+0x13a>
  403cb4:	6823      	ldr	r3, [r4, #0]
  403cb6:	079b      	lsls	r3, r3, #30
  403cb8:	d507      	bpl.n	403cca <_printf_i+0x20a>
  403cba:	2500      	movs	r5, #0
  403cbc:	f104 0919 	add.w	r9, r4, #25
  403cc0:	68e3      	ldr	r3, [r4, #12]
  403cc2:	9a03      	ldr	r2, [sp, #12]
  403cc4:	1a9b      	subs	r3, r3, r2
  403cc6:	429d      	cmp	r5, r3
  403cc8:	db05      	blt.n	403cd6 <_printf_i+0x216>
  403cca:	68e0      	ldr	r0, [r4, #12]
  403ccc:	9b03      	ldr	r3, [sp, #12]
  403cce:	4298      	cmp	r0, r3
  403cd0:	bfb8      	it	lt
  403cd2:	4618      	movlt	r0, r3
  403cd4:	e793      	b.n	403bfe <_printf_i+0x13e>
  403cd6:	2301      	movs	r3, #1
  403cd8:	464a      	mov	r2, r9
  403cda:	4639      	mov	r1, r7
  403cdc:	4630      	mov	r0, r6
  403cde:	47c0      	blx	r8
  403ce0:	3001      	adds	r0, #1
  403ce2:	d08a      	beq.n	403bfa <_printf_i+0x13a>
  403ce4:	3501      	adds	r5, #1
  403ce6:	e7eb      	b.n	403cc0 <_printf_i+0x200>
  403ce8:	2b00      	cmp	r3, #0
  403cea:	d1a7      	bne.n	403c3c <_printf_i+0x17c>
  403cec:	780b      	ldrb	r3, [r1, #0]
  403cee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403cf2:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403cf6:	e765      	b.n	403bc4 <_printf_i+0x104>
  403cf8:	0040635b 	.word	0x0040635b
  403cfc:	0040634a 	.word	0x0040634a

00403d00 <iprintf>:
  403d00:	b40f      	push	{r0, r1, r2, r3}
  403d02:	4b0a      	ldr	r3, [pc, #40]	; (403d2c <iprintf+0x2c>)
  403d04:	b513      	push	{r0, r1, r4, lr}
  403d06:	681c      	ldr	r4, [r3, #0]
  403d08:	b124      	cbz	r4, 403d14 <iprintf+0x14>
  403d0a:	69a3      	ldr	r3, [r4, #24]
  403d0c:	b913      	cbnz	r3, 403d14 <iprintf+0x14>
  403d0e:	4620      	mov	r0, r4
  403d10:	f001 f81e 	bl	404d50 <__sinit>
  403d14:	ab05      	add	r3, sp, #20
  403d16:	9a04      	ldr	r2, [sp, #16]
  403d18:	68a1      	ldr	r1, [r4, #8]
  403d1a:	9301      	str	r3, [sp, #4]
  403d1c:	4620      	mov	r0, r4
  403d1e:	f001 fd21 	bl	405764 <_vfiprintf_r>
  403d22:	b002      	add	sp, #8
  403d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403d28:	b004      	add	sp, #16
  403d2a:	4770      	bx	lr
  403d2c:	20400048 	.word	0x20400048

00403d30 <setbuf>:
  403d30:	2900      	cmp	r1, #0
  403d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403d36:	bf0c      	ite	eq
  403d38:	2202      	moveq	r2, #2
  403d3a:	2200      	movne	r2, #0
  403d3c:	f000 b800 	b.w	403d40 <setvbuf>

00403d40 <setvbuf>:
  403d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403d44:	461d      	mov	r5, r3
  403d46:	4b51      	ldr	r3, [pc, #324]	; (403e8c <setvbuf+0x14c>)
  403d48:	681e      	ldr	r6, [r3, #0]
  403d4a:	4604      	mov	r4, r0
  403d4c:	460f      	mov	r7, r1
  403d4e:	4690      	mov	r8, r2
  403d50:	b126      	cbz	r6, 403d5c <setvbuf+0x1c>
  403d52:	69b3      	ldr	r3, [r6, #24]
  403d54:	b913      	cbnz	r3, 403d5c <setvbuf+0x1c>
  403d56:	4630      	mov	r0, r6
  403d58:	f000 fffa 	bl	404d50 <__sinit>
  403d5c:	4b4c      	ldr	r3, [pc, #304]	; (403e90 <setvbuf+0x150>)
  403d5e:	429c      	cmp	r4, r3
  403d60:	d152      	bne.n	403e08 <setvbuf+0xc8>
  403d62:	6874      	ldr	r4, [r6, #4]
  403d64:	f1b8 0f02 	cmp.w	r8, #2
  403d68:	d006      	beq.n	403d78 <setvbuf+0x38>
  403d6a:	f1b8 0f01 	cmp.w	r8, #1
  403d6e:	f200 8089 	bhi.w	403e84 <setvbuf+0x144>
  403d72:	2d00      	cmp	r5, #0
  403d74:	f2c0 8086 	blt.w	403e84 <setvbuf+0x144>
  403d78:	4621      	mov	r1, r4
  403d7a:	4630      	mov	r0, r6
  403d7c:	f000 ff7e 	bl	404c7c <_fflush_r>
  403d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403d82:	b141      	cbz	r1, 403d96 <setvbuf+0x56>
  403d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403d88:	4299      	cmp	r1, r3
  403d8a:	d002      	beq.n	403d92 <setvbuf+0x52>
  403d8c:	4630      	mov	r0, r6
  403d8e:	f001 fc15 	bl	4055bc <_free_r>
  403d92:	2300      	movs	r3, #0
  403d94:	6363      	str	r3, [r4, #52]	; 0x34
  403d96:	2300      	movs	r3, #0
  403d98:	61a3      	str	r3, [r4, #24]
  403d9a:	6063      	str	r3, [r4, #4]
  403d9c:	89a3      	ldrh	r3, [r4, #12]
  403d9e:	061b      	lsls	r3, r3, #24
  403da0:	d503      	bpl.n	403daa <setvbuf+0x6a>
  403da2:	6921      	ldr	r1, [r4, #16]
  403da4:	4630      	mov	r0, r6
  403da6:	f001 fc09 	bl	4055bc <_free_r>
  403daa:	89a3      	ldrh	r3, [r4, #12]
  403dac:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403db0:	f023 0303 	bic.w	r3, r3, #3
  403db4:	f1b8 0f02 	cmp.w	r8, #2
  403db8:	81a3      	strh	r3, [r4, #12]
  403dba:	d05d      	beq.n	403e78 <setvbuf+0x138>
  403dbc:	ab01      	add	r3, sp, #4
  403dbe:	466a      	mov	r2, sp
  403dc0:	4621      	mov	r1, r4
  403dc2:	4630      	mov	r0, r6
  403dc4:	f001 f85c 	bl	404e80 <__swhatbuf_r>
  403dc8:	89a3      	ldrh	r3, [r4, #12]
  403dca:	4318      	orrs	r0, r3
  403dcc:	81a0      	strh	r0, [r4, #12]
  403dce:	bb2d      	cbnz	r5, 403e1c <setvbuf+0xdc>
  403dd0:	9d00      	ldr	r5, [sp, #0]
  403dd2:	4628      	mov	r0, r5
  403dd4:	f001 f8b8 	bl	404f48 <malloc>
  403dd8:	4607      	mov	r7, r0
  403dda:	2800      	cmp	r0, #0
  403ddc:	d14e      	bne.n	403e7c <setvbuf+0x13c>
  403dde:	f8dd 9000 	ldr.w	r9, [sp]
  403de2:	45a9      	cmp	r9, r5
  403de4:	d13c      	bne.n	403e60 <setvbuf+0x120>
  403de6:	f04f 30ff 	mov.w	r0, #4294967295
  403dea:	89a3      	ldrh	r3, [r4, #12]
  403dec:	f043 0302 	orr.w	r3, r3, #2
  403df0:	81a3      	strh	r3, [r4, #12]
  403df2:	2300      	movs	r3, #0
  403df4:	60a3      	str	r3, [r4, #8]
  403df6:	f104 0347 	add.w	r3, r4, #71	; 0x47
  403dfa:	6023      	str	r3, [r4, #0]
  403dfc:	6123      	str	r3, [r4, #16]
  403dfe:	2301      	movs	r3, #1
  403e00:	6163      	str	r3, [r4, #20]
  403e02:	b003      	add	sp, #12
  403e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403e08:	4b22      	ldr	r3, [pc, #136]	; (403e94 <setvbuf+0x154>)
  403e0a:	429c      	cmp	r4, r3
  403e0c:	d101      	bne.n	403e12 <setvbuf+0xd2>
  403e0e:	68b4      	ldr	r4, [r6, #8]
  403e10:	e7a8      	b.n	403d64 <setvbuf+0x24>
  403e12:	4b21      	ldr	r3, [pc, #132]	; (403e98 <setvbuf+0x158>)
  403e14:	429c      	cmp	r4, r3
  403e16:	bf08      	it	eq
  403e18:	68f4      	ldreq	r4, [r6, #12]
  403e1a:	e7a3      	b.n	403d64 <setvbuf+0x24>
  403e1c:	2f00      	cmp	r7, #0
  403e1e:	d0d8      	beq.n	403dd2 <setvbuf+0x92>
  403e20:	69b3      	ldr	r3, [r6, #24]
  403e22:	b913      	cbnz	r3, 403e2a <setvbuf+0xea>
  403e24:	4630      	mov	r0, r6
  403e26:	f000 ff93 	bl	404d50 <__sinit>
  403e2a:	f1b8 0f01 	cmp.w	r8, #1
  403e2e:	bf08      	it	eq
  403e30:	89a3      	ldrheq	r3, [r4, #12]
  403e32:	6027      	str	r7, [r4, #0]
  403e34:	bf04      	itt	eq
  403e36:	f043 0301 	orreq.w	r3, r3, #1
  403e3a:	81a3      	strheq	r3, [r4, #12]
  403e3c:	89a3      	ldrh	r3, [r4, #12]
  403e3e:	6127      	str	r7, [r4, #16]
  403e40:	f013 0008 	ands.w	r0, r3, #8
  403e44:	6165      	str	r5, [r4, #20]
  403e46:	d01b      	beq.n	403e80 <setvbuf+0x140>
  403e48:	f013 0001 	ands.w	r0, r3, #1
  403e4c:	bf18      	it	ne
  403e4e:	426d      	negne	r5, r5
  403e50:	f04f 0300 	mov.w	r3, #0
  403e54:	bf1d      	ittte	ne
  403e56:	60a3      	strne	r3, [r4, #8]
  403e58:	61a5      	strne	r5, [r4, #24]
  403e5a:	4618      	movne	r0, r3
  403e5c:	60a5      	streq	r5, [r4, #8]
  403e5e:	e7d0      	b.n	403e02 <setvbuf+0xc2>
  403e60:	4648      	mov	r0, r9
  403e62:	f001 f871 	bl	404f48 <malloc>
  403e66:	4607      	mov	r7, r0
  403e68:	2800      	cmp	r0, #0
  403e6a:	d0bc      	beq.n	403de6 <setvbuf+0xa6>
  403e6c:	89a3      	ldrh	r3, [r4, #12]
  403e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403e72:	81a3      	strh	r3, [r4, #12]
  403e74:	464d      	mov	r5, r9
  403e76:	e7d3      	b.n	403e20 <setvbuf+0xe0>
  403e78:	2000      	movs	r0, #0
  403e7a:	e7b6      	b.n	403dea <setvbuf+0xaa>
  403e7c:	46a9      	mov	r9, r5
  403e7e:	e7f5      	b.n	403e6c <setvbuf+0x12c>
  403e80:	60a0      	str	r0, [r4, #8]
  403e82:	e7be      	b.n	403e02 <setvbuf+0xc2>
  403e84:	f04f 30ff 	mov.w	r0, #4294967295
  403e88:	e7bb      	b.n	403e02 <setvbuf+0xc2>
  403e8a:	bf00      	nop
  403e8c:	20400048 	.word	0x20400048
  403e90:	0040639c 	.word	0x0040639c
  403e94:	004063bc 	.word	0x004063bc
  403e98:	0040637c 	.word	0x0040637c

00403e9c <strlen>:
  403e9c:	4603      	mov	r3, r0
  403e9e:	f813 2b01 	ldrb.w	r2, [r3], #1
  403ea2:	2a00      	cmp	r2, #0
  403ea4:	d1fb      	bne.n	403e9e <strlen+0x2>
  403ea6:	1a18      	subs	r0, r3, r0
  403ea8:	3801      	subs	r0, #1
  403eaa:	4770      	bx	lr

00403eac <quorem>:
  403eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403eb0:	6903      	ldr	r3, [r0, #16]
  403eb2:	690c      	ldr	r4, [r1, #16]
  403eb4:	429c      	cmp	r4, r3
  403eb6:	4680      	mov	r8, r0
  403eb8:	f300 8082 	bgt.w	403fc0 <quorem+0x114>
  403ebc:	3c01      	subs	r4, #1
  403ebe:	f101 0714 	add.w	r7, r1, #20
  403ec2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  403ec6:	f100 0614 	add.w	r6, r0, #20
  403eca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  403ece:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  403ed2:	eb06 030e 	add.w	r3, r6, lr
  403ed6:	3501      	adds	r5, #1
  403ed8:	eb07 090e 	add.w	r9, r7, lr
  403edc:	9301      	str	r3, [sp, #4]
  403ede:	fbb0 f5f5 	udiv	r5, r0, r5
  403ee2:	b395      	cbz	r5, 403f4a <quorem+0x9e>
  403ee4:	f04f 0a00 	mov.w	sl, #0
  403ee8:	4638      	mov	r0, r7
  403eea:	46b4      	mov	ip, r6
  403eec:	46d3      	mov	fp, sl
  403eee:	f850 2b04 	ldr.w	r2, [r0], #4
  403ef2:	b293      	uxth	r3, r2
  403ef4:	fb05 a303 	mla	r3, r5, r3, sl
  403ef8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  403efc:	b29b      	uxth	r3, r3
  403efe:	ebab 0303 	sub.w	r3, fp, r3
  403f02:	0c12      	lsrs	r2, r2, #16
  403f04:	f8bc b000 	ldrh.w	fp, [ip]
  403f08:	fb05 a202 	mla	r2, r5, r2, sl
  403f0c:	fa13 f38b 	uxtah	r3, r3, fp
  403f10:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  403f14:	fa1f fb82 	uxth.w	fp, r2
  403f18:	f8dc 2000 	ldr.w	r2, [ip]
  403f1c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  403f20:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403f24:	b29b      	uxth	r3, r3
  403f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403f2a:	4581      	cmp	r9, r0
  403f2c:	ea4f 4b22 	mov.w	fp, r2, asr #16
  403f30:	f84c 3b04 	str.w	r3, [ip], #4
  403f34:	d2db      	bcs.n	403eee <quorem+0x42>
  403f36:	f856 300e 	ldr.w	r3, [r6, lr]
  403f3a:	b933      	cbnz	r3, 403f4a <quorem+0x9e>
  403f3c:	9b01      	ldr	r3, [sp, #4]
  403f3e:	3b04      	subs	r3, #4
  403f40:	429e      	cmp	r6, r3
  403f42:	461a      	mov	r2, r3
  403f44:	d330      	bcc.n	403fa8 <quorem+0xfc>
  403f46:	f8c8 4010 	str.w	r4, [r8, #16]
  403f4a:	4640      	mov	r0, r8
  403f4c:	f001 fa61 	bl	405412 <__mcmp>
  403f50:	2800      	cmp	r0, #0
  403f52:	db25      	blt.n	403fa0 <quorem+0xf4>
  403f54:	3501      	adds	r5, #1
  403f56:	4630      	mov	r0, r6
  403f58:	f04f 0e00 	mov.w	lr, #0
  403f5c:	f857 2b04 	ldr.w	r2, [r7], #4
  403f60:	f8d0 c000 	ldr.w	ip, [r0]
  403f64:	b293      	uxth	r3, r2
  403f66:	ebae 0303 	sub.w	r3, lr, r3
  403f6a:	0c12      	lsrs	r2, r2, #16
  403f6c:	fa13 f38c 	uxtah	r3, r3, ip
  403f70:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  403f74:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403f78:	b29b      	uxth	r3, r3
  403f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403f7e:	45b9      	cmp	r9, r7
  403f80:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403f84:	f840 3b04 	str.w	r3, [r0], #4
  403f88:	d2e8      	bcs.n	403f5c <quorem+0xb0>
  403f8a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403f8e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  403f92:	b92a      	cbnz	r2, 403fa0 <quorem+0xf4>
  403f94:	3b04      	subs	r3, #4
  403f96:	429e      	cmp	r6, r3
  403f98:	461a      	mov	r2, r3
  403f9a:	d30b      	bcc.n	403fb4 <quorem+0x108>
  403f9c:	f8c8 4010 	str.w	r4, [r8, #16]
  403fa0:	4628      	mov	r0, r5
  403fa2:	b003      	add	sp, #12
  403fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fa8:	6812      	ldr	r2, [r2, #0]
  403faa:	3b04      	subs	r3, #4
  403fac:	2a00      	cmp	r2, #0
  403fae:	d1ca      	bne.n	403f46 <quorem+0x9a>
  403fb0:	3c01      	subs	r4, #1
  403fb2:	e7c5      	b.n	403f40 <quorem+0x94>
  403fb4:	6812      	ldr	r2, [r2, #0]
  403fb6:	3b04      	subs	r3, #4
  403fb8:	2a00      	cmp	r2, #0
  403fba:	d1ef      	bne.n	403f9c <quorem+0xf0>
  403fbc:	3c01      	subs	r4, #1
  403fbe:	e7ea      	b.n	403f96 <quorem+0xea>
  403fc0:	2000      	movs	r0, #0
  403fc2:	e7ee      	b.n	403fa2 <quorem+0xf6>
  403fc4:	0000      	movs	r0, r0
	...

00403fc8 <_dtoa_r>:
  403fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403fcc:	6a46      	ldr	r6, [r0, #36]	; 0x24
  403fce:	b095      	sub	sp, #84	; 0x54
  403fd0:	4604      	mov	r4, r0
  403fd2:	9d21      	ldr	r5, [sp, #132]	; 0x84
  403fd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403fd8:	b93e      	cbnz	r6, 403fea <_dtoa_r+0x22>
  403fda:	2010      	movs	r0, #16
  403fdc:	f000 ffb4 	bl	404f48 <malloc>
  403fe0:	6260      	str	r0, [r4, #36]	; 0x24
  403fe2:	6046      	str	r6, [r0, #4]
  403fe4:	6086      	str	r6, [r0, #8]
  403fe6:	6006      	str	r6, [r0, #0]
  403fe8:	60c6      	str	r6, [r0, #12]
  403fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403fec:	6819      	ldr	r1, [r3, #0]
  403fee:	b151      	cbz	r1, 404006 <_dtoa_r+0x3e>
  403ff0:	685a      	ldr	r2, [r3, #4]
  403ff2:	604a      	str	r2, [r1, #4]
  403ff4:	2301      	movs	r3, #1
  403ff6:	4093      	lsls	r3, r2
  403ff8:	608b      	str	r3, [r1, #8]
  403ffa:	4620      	mov	r0, r4
  403ffc:	f001 f834 	bl	405068 <_Bfree>
  404000:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404002:	2200      	movs	r2, #0
  404004:	601a      	str	r2, [r3, #0]
  404006:	9b03      	ldr	r3, [sp, #12]
  404008:	2b00      	cmp	r3, #0
  40400a:	bfbf      	itttt	lt
  40400c:	2301      	movlt	r3, #1
  40400e:	602b      	strlt	r3, [r5, #0]
  404010:	9b03      	ldrlt	r3, [sp, #12]
  404012:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  404016:	bfb2      	itee	lt
  404018:	9303      	strlt	r3, [sp, #12]
  40401a:	2300      	movge	r3, #0
  40401c:	602b      	strge	r3, [r5, #0]
  40401e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  404022:	4ba9      	ldr	r3, [pc, #676]	; (4042c8 <_dtoa_r+0x300>)
  404024:	ea33 0309 	bics.w	r3, r3, r9
  404028:	d11b      	bne.n	404062 <_dtoa_r+0x9a>
  40402a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40402c:	f242 730f 	movw	r3, #9999	; 0x270f
  404030:	6013      	str	r3, [r2, #0]
  404032:	9b02      	ldr	r3, [sp, #8]
  404034:	b923      	cbnz	r3, 404040 <_dtoa_r+0x78>
  404036:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40403a:	2800      	cmp	r0, #0
  40403c:	f000 8581 	beq.w	404b42 <_dtoa_r+0xb7a>
  404040:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404042:	b953      	cbnz	r3, 40405a <_dtoa_r+0x92>
  404044:	4ba1      	ldr	r3, [pc, #644]	; (4042cc <_dtoa_r+0x304>)
  404046:	e021      	b.n	40408c <_dtoa_r+0xc4>
  404048:	4ba1      	ldr	r3, [pc, #644]	; (4042d0 <_dtoa_r+0x308>)
  40404a:	9306      	str	r3, [sp, #24]
  40404c:	3308      	adds	r3, #8
  40404e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404050:	6013      	str	r3, [r2, #0]
  404052:	9806      	ldr	r0, [sp, #24]
  404054:	b015      	add	sp, #84	; 0x54
  404056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40405a:	4b9c      	ldr	r3, [pc, #624]	; (4042cc <_dtoa_r+0x304>)
  40405c:	9306      	str	r3, [sp, #24]
  40405e:	3303      	adds	r3, #3
  404060:	e7f5      	b.n	40404e <_dtoa_r+0x86>
  404062:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  404066:	2200      	movs	r2, #0
  404068:	2300      	movs	r3, #0
  40406a:	4630      	mov	r0, r6
  40406c:	4639      	mov	r1, r7
  40406e:	f7ff f957 	bl	403320 <__aeabi_dcmpeq>
  404072:	4680      	mov	r8, r0
  404074:	b160      	cbz	r0, 404090 <_dtoa_r+0xc8>
  404076:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404078:	2301      	movs	r3, #1
  40407a:	6013      	str	r3, [r2, #0]
  40407c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40407e:	2b00      	cmp	r3, #0
  404080:	f000 855c 	beq.w	404b3c <_dtoa_r+0xb74>
  404084:	4b93      	ldr	r3, [pc, #588]	; (4042d4 <_dtoa_r+0x30c>)
  404086:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404088:	6013      	str	r3, [r2, #0]
  40408a:	3b01      	subs	r3, #1
  40408c:	9306      	str	r3, [sp, #24]
  40408e:	e7e0      	b.n	404052 <_dtoa_r+0x8a>
  404090:	ab12      	add	r3, sp, #72	; 0x48
  404092:	9301      	str	r3, [sp, #4]
  404094:	ab13      	add	r3, sp, #76	; 0x4c
  404096:	9300      	str	r3, [sp, #0]
  404098:	4632      	mov	r2, r6
  40409a:	463b      	mov	r3, r7
  40409c:	4620      	mov	r0, r4
  40409e:	f001 fa30 	bl	405502 <__d2b>
  4040a2:	f3c9 550a 	ubfx	r5, r9, #20, #11
  4040a6:	4682      	mov	sl, r0
  4040a8:	2d00      	cmp	r5, #0
  4040aa:	d07c      	beq.n	4041a6 <_dtoa_r+0x1de>
  4040ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
  4040b0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4040b4:	4630      	mov	r0, r6
  4040b6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4040ba:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  4040be:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  4040c2:	2200      	movs	r2, #0
  4040c4:	4b84      	ldr	r3, [pc, #528]	; (4042d8 <_dtoa_r+0x310>)
  4040c6:	f7fe fd0f 	bl	402ae8 <__aeabi_dsub>
  4040ca:	a379      	add	r3, pc, #484	; (adr r3, 4042b0 <_dtoa_r+0x2e8>)
  4040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4040d0:	f7fe febe 	bl	402e50 <__aeabi_dmul>
  4040d4:	a378      	add	r3, pc, #480	; (adr r3, 4042b8 <_dtoa_r+0x2f0>)
  4040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4040da:	f7fe fd07 	bl	402aec <__adddf3>
  4040de:	4606      	mov	r6, r0
  4040e0:	4628      	mov	r0, r5
  4040e2:	460f      	mov	r7, r1
  4040e4:	f7fe fe4e 	bl	402d84 <__aeabi_i2d>
  4040e8:	a375      	add	r3, pc, #468	; (adr r3, 4042c0 <_dtoa_r+0x2f8>)
  4040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4040ee:	f7fe feaf 	bl	402e50 <__aeabi_dmul>
  4040f2:	4602      	mov	r2, r0
  4040f4:	460b      	mov	r3, r1
  4040f6:	4630      	mov	r0, r6
  4040f8:	4639      	mov	r1, r7
  4040fa:	f7fe fcf7 	bl	402aec <__adddf3>
  4040fe:	4606      	mov	r6, r0
  404100:	460f      	mov	r7, r1
  404102:	f7ff f93f 	bl	403384 <__aeabi_d2iz>
  404106:	2200      	movs	r2, #0
  404108:	4683      	mov	fp, r0
  40410a:	2300      	movs	r3, #0
  40410c:	4630      	mov	r0, r6
  40410e:	4639      	mov	r1, r7
  404110:	f7ff f910 	bl	403334 <__aeabi_dcmplt>
  404114:	b158      	cbz	r0, 40412e <_dtoa_r+0x166>
  404116:	4658      	mov	r0, fp
  404118:	f7fe fe34 	bl	402d84 <__aeabi_i2d>
  40411c:	4602      	mov	r2, r0
  40411e:	460b      	mov	r3, r1
  404120:	4630      	mov	r0, r6
  404122:	4639      	mov	r1, r7
  404124:	f7ff f8fc 	bl	403320 <__aeabi_dcmpeq>
  404128:	b908      	cbnz	r0, 40412e <_dtoa_r+0x166>
  40412a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40412e:	f1bb 0f16 	cmp.w	fp, #22
  404132:	d857      	bhi.n	4041e4 <_dtoa_r+0x21c>
  404134:	4969      	ldr	r1, [pc, #420]	; (4042dc <_dtoa_r+0x314>)
  404136:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40413a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40413e:	e9d1 0100 	ldrd	r0, r1, [r1]
  404142:	f7ff f915 	bl	403370 <__aeabi_dcmpgt>
  404146:	2800      	cmp	r0, #0
  404148:	d04e      	beq.n	4041e8 <_dtoa_r+0x220>
  40414a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40414e:	2300      	movs	r3, #0
  404150:	930d      	str	r3, [sp, #52]	; 0x34
  404152:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404154:	1b5d      	subs	r5, r3, r5
  404156:	1e6b      	subs	r3, r5, #1
  404158:	9307      	str	r3, [sp, #28]
  40415a:	bf43      	ittte	mi
  40415c:	2300      	movmi	r3, #0
  40415e:	f1c5 0801 	rsbmi	r8, r5, #1
  404162:	9307      	strmi	r3, [sp, #28]
  404164:	f04f 0800 	movpl.w	r8, #0
  404168:	f1bb 0f00 	cmp.w	fp, #0
  40416c:	db3e      	blt.n	4041ec <_dtoa_r+0x224>
  40416e:	9b07      	ldr	r3, [sp, #28]
  404170:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  404174:	445b      	add	r3, fp
  404176:	9307      	str	r3, [sp, #28]
  404178:	2300      	movs	r3, #0
  40417a:	9308      	str	r3, [sp, #32]
  40417c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40417e:	2b09      	cmp	r3, #9
  404180:	f200 80b0 	bhi.w	4042e4 <_dtoa_r+0x31c>
  404184:	2b05      	cmp	r3, #5
  404186:	bfc4      	itt	gt
  404188:	3b04      	subgt	r3, #4
  40418a:	931e      	strgt	r3, [sp, #120]	; 0x78
  40418c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40418e:	f1a3 0302 	sub.w	r3, r3, #2
  404192:	bfcc      	ite	gt
  404194:	2600      	movgt	r6, #0
  404196:	2601      	movle	r6, #1
  404198:	2b03      	cmp	r3, #3
  40419a:	f200 80af 	bhi.w	4042fc <_dtoa_r+0x334>
  40419e:	e8df f003 	tbb	[pc, r3]
  4041a2:	8583      	.short	0x8583
  4041a4:	772d      	.short	0x772d
  4041a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4041a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
  4041aa:	441d      	add	r5, r3
  4041ac:	f205 4332 	addw	r3, r5, #1074	; 0x432
  4041b0:	2b20      	cmp	r3, #32
  4041b2:	dd11      	ble.n	4041d8 <_dtoa_r+0x210>
  4041b4:	9a02      	ldr	r2, [sp, #8]
  4041b6:	f205 4012 	addw	r0, r5, #1042	; 0x412
  4041ba:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4041be:	fa22 f000 	lsr.w	r0, r2, r0
  4041c2:	fa09 f303 	lsl.w	r3, r9, r3
  4041c6:	4318      	orrs	r0, r3
  4041c8:	f7fe fdcc 	bl	402d64 <__aeabi_ui2d>
  4041cc:	2301      	movs	r3, #1
  4041ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4041d2:	3d01      	subs	r5, #1
  4041d4:	9310      	str	r3, [sp, #64]	; 0x40
  4041d6:	e774      	b.n	4040c2 <_dtoa_r+0xfa>
  4041d8:	f1c3 0020 	rsb	r0, r3, #32
  4041dc:	9b02      	ldr	r3, [sp, #8]
  4041de:	fa03 f000 	lsl.w	r0, r3, r0
  4041e2:	e7f1      	b.n	4041c8 <_dtoa_r+0x200>
  4041e4:	2301      	movs	r3, #1
  4041e6:	e7b3      	b.n	404150 <_dtoa_r+0x188>
  4041e8:	900d      	str	r0, [sp, #52]	; 0x34
  4041ea:	e7b2      	b.n	404152 <_dtoa_r+0x18a>
  4041ec:	f1cb 0300 	rsb	r3, fp, #0
  4041f0:	9308      	str	r3, [sp, #32]
  4041f2:	2300      	movs	r3, #0
  4041f4:	eba8 080b 	sub.w	r8, r8, fp
  4041f8:	930c      	str	r3, [sp, #48]	; 0x30
  4041fa:	e7bf      	b.n	40417c <_dtoa_r+0x1b4>
  4041fc:	2301      	movs	r3, #1
  4041fe:	9309      	str	r3, [sp, #36]	; 0x24
  404200:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404202:	2b00      	cmp	r3, #0
  404204:	dd7d      	ble.n	404302 <_dtoa_r+0x33a>
  404206:	9304      	str	r3, [sp, #16]
  404208:	4699      	mov	r9, r3
  40420a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40420c:	2200      	movs	r2, #0
  40420e:	606a      	str	r2, [r5, #4]
  404210:	2104      	movs	r1, #4
  404212:	f101 0214 	add.w	r2, r1, #20
  404216:	429a      	cmp	r2, r3
  404218:	d978      	bls.n	40430c <_dtoa_r+0x344>
  40421a:	6869      	ldr	r1, [r5, #4]
  40421c:	4620      	mov	r0, r4
  40421e:	f000 feef 	bl	405000 <_Balloc>
  404222:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404224:	6028      	str	r0, [r5, #0]
  404226:	681b      	ldr	r3, [r3, #0]
  404228:	9306      	str	r3, [sp, #24]
  40422a:	f1b9 0f0e 	cmp.w	r9, #14
  40422e:	f200 80ee 	bhi.w	40440e <_dtoa_r+0x446>
  404232:	2e00      	cmp	r6, #0
  404234:	f000 80eb 	beq.w	40440e <_dtoa_r+0x446>
  404238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40423c:	f1bb 0f00 	cmp.w	fp, #0
  404240:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  404244:	dd77      	ble.n	404336 <_dtoa_r+0x36e>
  404246:	4a25      	ldr	r2, [pc, #148]	; (4042dc <_dtoa_r+0x314>)
  404248:	f00b 030f 	and.w	r3, fp, #15
  40424c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404250:	e9d3 2300 	ldrd	r2, r3, [r3]
  404254:	ea4f 162b 	mov.w	r6, fp, asr #4
  404258:	06f0      	lsls	r0, r6, #27
  40425a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40425e:	d55a      	bpl.n	404316 <_dtoa_r+0x34e>
  404260:	4b1f      	ldr	r3, [pc, #124]	; (4042e0 <_dtoa_r+0x318>)
  404262:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404266:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40426a:	f7fe ff1b 	bl	4030a4 <__aeabi_ddiv>
  40426e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404272:	f006 060f 	and.w	r6, r6, #15
  404276:	2503      	movs	r5, #3
  404278:	4f19      	ldr	r7, [pc, #100]	; (4042e0 <_dtoa_r+0x318>)
  40427a:	2e00      	cmp	r6, #0
  40427c:	d14d      	bne.n	40431a <_dtoa_r+0x352>
  40427e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404286:	f7fe ff0d 	bl	4030a4 <__aeabi_ddiv>
  40428a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40428e:	e06c      	b.n	40436a <_dtoa_r+0x3a2>
  404290:	2301      	movs	r3, #1
  404292:	9309      	str	r3, [sp, #36]	; 0x24
  404294:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404296:	445b      	add	r3, fp
  404298:	f103 0901 	add.w	r9, r3, #1
  40429c:	9304      	str	r3, [sp, #16]
  40429e:	464b      	mov	r3, r9
  4042a0:	2b01      	cmp	r3, #1
  4042a2:	bfb8      	it	lt
  4042a4:	2301      	movlt	r3, #1
  4042a6:	e7b0      	b.n	40420a <_dtoa_r+0x242>
  4042a8:	2300      	movs	r3, #0
  4042aa:	e7a8      	b.n	4041fe <_dtoa_r+0x236>
  4042ac:	2300      	movs	r3, #0
  4042ae:	e7f0      	b.n	404292 <_dtoa_r+0x2ca>
  4042b0:	636f4361 	.word	0x636f4361
  4042b4:	3fd287a7 	.word	0x3fd287a7
  4042b8:	8b60c8b3 	.word	0x8b60c8b3
  4042bc:	3fc68a28 	.word	0x3fc68a28
  4042c0:	509f79fb 	.word	0x509f79fb
  4042c4:	3fd34413 	.word	0x3fd34413
  4042c8:	7ff00000 	.word	0x7ff00000
  4042cc:	00406375 	.word	0x00406375
  4042d0:	0040636c 	.word	0x0040636c
  4042d4:	00406349 	.word	0x00406349
  4042d8:	3ff80000 	.word	0x3ff80000
  4042dc:	00406408 	.word	0x00406408
  4042e0:	004063e0 	.word	0x004063e0
  4042e4:	2601      	movs	r6, #1
  4042e6:	2300      	movs	r3, #0
  4042e8:	931e      	str	r3, [sp, #120]	; 0x78
  4042ea:	9609      	str	r6, [sp, #36]	; 0x24
  4042ec:	f04f 33ff 	mov.w	r3, #4294967295
  4042f0:	9304      	str	r3, [sp, #16]
  4042f2:	4699      	mov	r9, r3
  4042f4:	2200      	movs	r2, #0
  4042f6:	2312      	movs	r3, #18
  4042f8:	921f      	str	r2, [sp, #124]	; 0x7c
  4042fa:	e786      	b.n	40420a <_dtoa_r+0x242>
  4042fc:	2301      	movs	r3, #1
  4042fe:	9309      	str	r3, [sp, #36]	; 0x24
  404300:	e7f4      	b.n	4042ec <_dtoa_r+0x324>
  404302:	2301      	movs	r3, #1
  404304:	9304      	str	r3, [sp, #16]
  404306:	4699      	mov	r9, r3
  404308:	461a      	mov	r2, r3
  40430a:	e7f5      	b.n	4042f8 <_dtoa_r+0x330>
  40430c:	686a      	ldr	r2, [r5, #4]
  40430e:	3201      	adds	r2, #1
  404310:	606a      	str	r2, [r5, #4]
  404312:	0049      	lsls	r1, r1, #1
  404314:	e77d      	b.n	404212 <_dtoa_r+0x24a>
  404316:	2502      	movs	r5, #2
  404318:	e7ae      	b.n	404278 <_dtoa_r+0x2b0>
  40431a:	07f1      	lsls	r1, r6, #31
  40431c:	d508      	bpl.n	404330 <_dtoa_r+0x368>
  40431e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404322:	e9d7 2300 	ldrd	r2, r3, [r7]
  404326:	f7fe fd93 	bl	402e50 <__aeabi_dmul>
  40432a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40432e:	3501      	adds	r5, #1
  404330:	1076      	asrs	r6, r6, #1
  404332:	3708      	adds	r7, #8
  404334:	e7a1      	b.n	40427a <_dtoa_r+0x2b2>
  404336:	f000 80a5 	beq.w	404484 <_dtoa_r+0x4bc>
  40433a:	f1cb 0600 	rsb	r6, fp, #0
  40433e:	4ba3      	ldr	r3, [pc, #652]	; (4045cc <_dtoa_r+0x604>)
  404340:	4fa3      	ldr	r7, [pc, #652]	; (4045d0 <_dtoa_r+0x608>)
  404342:	f006 020f 	and.w	r2, r6, #15
  404346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40434a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40434e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404352:	f7fe fd7d 	bl	402e50 <__aeabi_dmul>
  404356:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40435a:	1136      	asrs	r6, r6, #4
  40435c:	2300      	movs	r3, #0
  40435e:	2502      	movs	r5, #2
  404360:	2e00      	cmp	r6, #0
  404362:	f040 8084 	bne.w	40446e <_dtoa_r+0x4a6>
  404366:	2b00      	cmp	r3, #0
  404368:	d18f      	bne.n	40428a <_dtoa_r+0x2c2>
  40436a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40436c:	2b00      	cmp	r3, #0
  40436e:	f000 808b 	beq.w	404488 <_dtoa_r+0x4c0>
  404372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404376:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40437a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40437e:	2200      	movs	r2, #0
  404380:	4b94      	ldr	r3, [pc, #592]	; (4045d4 <_dtoa_r+0x60c>)
  404382:	f7fe ffd7 	bl	403334 <__aeabi_dcmplt>
  404386:	2800      	cmp	r0, #0
  404388:	d07e      	beq.n	404488 <_dtoa_r+0x4c0>
  40438a:	f1b9 0f00 	cmp.w	r9, #0
  40438e:	d07b      	beq.n	404488 <_dtoa_r+0x4c0>
  404390:	9b04      	ldr	r3, [sp, #16]
  404392:	2b00      	cmp	r3, #0
  404394:	dd37      	ble.n	404406 <_dtoa_r+0x43e>
  404396:	2200      	movs	r2, #0
  404398:	4b8f      	ldr	r3, [pc, #572]	; (4045d8 <_dtoa_r+0x610>)
  40439a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40439e:	f7fe fd57 	bl	402e50 <__aeabi_dmul>
  4043a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4043a6:	9e04      	ldr	r6, [sp, #16]
  4043a8:	f10b 37ff 	add.w	r7, fp, #4294967295
  4043ac:	3501      	adds	r5, #1
  4043ae:	4628      	mov	r0, r5
  4043b0:	f7fe fce8 	bl	402d84 <__aeabi_i2d>
  4043b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4043b8:	f7fe fd4a 	bl	402e50 <__aeabi_dmul>
  4043bc:	4b87      	ldr	r3, [pc, #540]	; (4045dc <_dtoa_r+0x614>)
  4043be:	2200      	movs	r2, #0
  4043c0:	f7fe fb94 	bl	402aec <__adddf3>
  4043c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4043c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4043ca:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  4043ce:	950b      	str	r5, [sp, #44]	; 0x2c
  4043d0:	2e00      	cmp	r6, #0
  4043d2:	d15c      	bne.n	40448e <_dtoa_r+0x4c6>
  4043d4:	2200      	movs	r2, #0
  4043d6:	4b82      	ldr	r3, [pc, #520]	; (4045e0 <_dtoa_r+0x618>)
  4043d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4043dc:	f7fe fb84 	bl	402ae8 <__aeabi_dsub>
  4043e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4043e2:	462b      	mov	r3, r5
  4043e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4043e8:	f7fe ffc2 	bl	403370 <__aeabi_dcmpgt>
  4043ec:	2800      	cmp	r0, #0
  4043ee:	f040 82f7 	bne.w	4049e0 <_dtoa_r+0xa18>
  4043f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4043f4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4043f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4043fc:	f7fe ff9a 	bl	403334 <__aeabi_dcmplt>
  404400:	2800      	cmp	r0, #0
  404402:	f040 82eb 	bne.w	4049dc <_dtoa_r+0xa14>
  404406:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40440a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40440e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404410:	2b00      	cmp	r3, #0
  404412:	f2c0 8151 	blt.w	4046b8 <_dtoa_r+0x6f0>
  404416:	f1bb 0f0e 	cmp.w	fp, #14
  40441a:	f300 814d 	bgt.w	4046b8 <_dtoa_r+0x6f0>
  40441e:	4b6b      	ldr	r3, [pc, #428]	; (4045cc <_dtoa_r+0x604>)
  404420:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  404424:	e9d3 2300 	ldrd	r2, r3, [r3]
  404428:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40442c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40442e:	2b00      	cmp	r3, #0
  404430:	f280 80da 	bge.w	4045e8 <_dtoa_r+0x620>
  404434:	f1b9 0f00 	cmp.w	r9, #0
  404438:	f300 80d6 	bgt.w	4045e8 <_dtoa_r+0x620>
  40443c:	f040 82cd 	bne.w	4049da <_dtoa_r+0xa12>
  404440:	2200      	movs	r2, #0
  404442:	4b67      	ldr	r3, [pc, #412]	; (4045e0 <_dtoa_r+0x618>)
  404444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404448:	f7fe fd02 	bl	402e50 <__aeabi_dmul>
  40444c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404450:	f7fe ff84 	bl	40335c <__aeabi_dcmpge>
  404454:	464e      	mov	r6, r9
  404456:	464f      	mov	r7, r9
  404458:	2800      	cmp	r0, #0
  40445a:	f040 82a4 	bne.w	4049a6 <_dtoa_r+0x9de>
  40445e:	9b06      	ldr	r3, [sp, #24]
  404460:	9a06      	ldr	r2, [sp, #24]
  404462:	1c5d      	adds	r5, r3, #1
  404464:	2331      	movs	r3, #49	; 0x31
  404466:	7013      	strb	r3, [r2, #0]
  404468:	f10b 0b01 	add.w	fp, fp, #1
  40446c:	e29f      	b.n	4049ae <_dtoa_r+0x9e6>
  40446e:	07f2      	lsls	r2, r6, #31
  404470:	d505      	bpl.n	40447e <_dtoa_r+0x4b6>
  404472:	e9d7 2300 	ldrd	r2, r3, [r7]
  404476:	f7fe fceb 	bl	402e50 <__aeabi_dmul>
  40447a:	3501      	adds	r5, #1
  40447c:	2301      	movs	r3, #1
  40447e:	1076      	asrs	r6, r6, #1
  404480:	3708      	adds	r7, #8
  404482:	e76d      	b.n	404360 <_dtoa_r+0x398>
  404484:	2502      	movs	r5, #2
  404486:	e770      	b.n	40436a <_dtoa_r+0x3a2>
  404488:	465f      	mov	r7, fp
  40448a:	464e      	mov	r6, r9
  40448c:	e78f      	b.n	4043ae <_dtoa_r+0x3e6>
  40448e:	9a06      	ldr	r2, [sp, #24]
  404490:	4b4e      	ldr	r3, [pc, #312]	; (4045cc <_dtoa_r+0x604>)
  404492:	4432      	add	r2, r6
  404494:	9211      	str	r2, [sp, #68]	; 0x44
  404496:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404498:	1e71      	subs	r1, r6, #1
  40449a:	2a00      	cmp	r2, #0
  40449c:	d048      	beq.n	404530 <_dtoa_r+0x568>
  40449e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  4044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4044a6:	2000      	movs	r0, #0
  4044a8:	494e      	ldr	r1, [pc, #312]	; (4045e4 <_dtoa_r+0x61c>)
  4044aa:	f7fe fdfb 	bl	4030a4 <__aeabi_ddiv>
  4044ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4044b2:	f7fe fb19 	bl	402ae8 <__aeabi_dsub>
  4044b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4044ba:	9d06      	ldr	r5, [sp, #24]
  4044bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4044c0:	f7fe ff60 	bl	403384 <__aeabi_d2iz>
  4044c4:	4606      	mov	r6, r0
  4044c6:	f7fe fc5d 	bl	402d84 <__aeabi_i2d>
  4044ca:	4602      	mov	r2, r0
  4044cc:	460b      	mov	r3, r1
  4044ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4044d2:	f7fe fb09 	bl	402ae8 <__aeabi_dsub>
  4044d6:	3630      	adds	r6, #48	; 0x30
  4044d8:	f805 6b01 	strb.w	r6, [r5], #1
  4044dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4044e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4044e4:	f7fe ff26 	bl	403334 <__aeabi_dcmplt>
  4044e8:	2800      	cmp	r0, #0
  4044ea:	d165      	bne.n	4045b8 <_dtoa_r+0x5f0>
  4044ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4044f0:	2000      	movs	r0, #0
  4044f2:	4938      	ldr	r1, [pc, #224]	; (4045d4 <_dtoa_r+0x60c>)
  4044f4:	f7fe faf8 	bl	402ae8 <__aeabi_dsub>
  4044f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4044fc:	f7fe ff1a 	bl	403334 <__aeabi_dcmplt>
  404500:	2800      	cmp	r0, #0
  404502:	f040 80b9 	bne.w	404678 <_dtoa_r+0x6b0>
  404506:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404508:	429d      	cmp	r5, r3
  40450a:	f43f af7c 	beq.w	404406 <_dtoa_r+0x43e>
  40450e:	2200      	movs	r2, #0
  404510:	4b31      	ldr	r3, [pc, #196]	; (4045d8 <_dtoa_r+0x610>)
  404512:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404516:	f7fe fc9b 	bl	402e50 <__aeabi_dmul>
  40451a:	2200      	movs	r2, #0
  40451c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404520:	4b2d      	ldr	r3, [pc, #180]	; (4045d8 <_dtoa_r+0x610>)
  404522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404526:	f7fe fc93 	bl	402e50 <__aeabi_dmul>
  40452a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40452e:	e7c5      	b.n	4044bc <_dtoa_r+0x4f4>
  404530:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404534:	e9d1 0100 	ldrd	r0, r1, [r1]
  404538:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40453c:	f7fe fc88 	bl	402e50 <__aeabi_dmul>
  404540:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404544:	9d06      	ldr	r5, [sp, #24]
  404546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40454a:	f7fe ff1b 	bl	403384 <__aeabi_d2iz>
  40454e:	4606      	mov	r6, r0
  404550:	f7fe fc18 	bl	402d84 <__aeabi_i2d>
  404554:	3630      	adds	r6, #48	; 0x30
  404556:	4602      	mov	r2, r0
  404558:	460b      	mov	r3, r1
  40455a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40455e:	f7fe fac3 	bl	402ae8 <__aeabi_dsub>
  404562:	f805 6b01 	strb.w	r6, [r5], #1
  404566:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404568:	42ab      	cmp	r3, r5
  40456a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40456e:	f04f 0200 	mov.w	r2, #0
  404572:	d125      	bne.n	4045c0 <_dtoa_r+0x5f8>
  404574:	4b1b      	ldr	r3, [pc, #108]	; (4045e4 <_dtoa_r+0x61c>)
  404576:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40457a:	f7fe fab7 	bl	402aec <__adddf3>
  40457e:	4602      	mov	r2, r0
  404580:	460b      	mov	r3, r1
  404582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404586:	f7fe fef3 	bl	403370 <__aeabi_dcmpgt>
  40458a:	2800      	cmp	r0, #0
  40458c:	d174      	bne.n	404678 <_dtoa_r+0x6b0>
  40458e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404592:	2000      	movs	r0, #0
  404594:	4913      	ldr	r1, [pc, #76]	; (4045e4 <_dtoa_r+0x61c>)
  404596:	f7fe faa7 	bl	402ae8 <__aeabi_dsub>
  40459a:	4602      	mov	r2, r0
  40459c:	460b      	mov	r3, r1
  40459e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4045a2:	f7fe fec7 	bl	403334 <__aeabi_dcmplt>
  4045a6:	2800      	cmp	r0, #0
  4045a8:	f43f af2d 	beq.w	404406 <_dtoa_r+0x43e>
  4045ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4045b0:	2b30      	cmp	r3, #48	; 0x30
  4045b2:	f105 32ff 	add.w	r2, r5, #4294967295
  4045b6:	d001      	beq.n	4045bc <_dtoa_r+0x5f4>
  4045b8:	46bb      	mov	fp, r7
  4045ba:	e04c      	b.n	404656 <_dtoa_r+0x68e>
  4045bc:	4615      	mov	r5, r2
  4045be:	e7f5      	b.n	4045ac <_dtoa_r+0x5e4>
  4045c0:	4b05      	ldr	r3, [pc, #20]	; (4045d8 <_dtoa_r+0x610>)
  4045c2:	f7fe fc45 	bl	402e50 <__aeabi_dmul>
  4045c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4045ca:	e7bc      	b.n	404546 <_dtoa_r+0x57e>
  4045cc:	00406408 	.word	0x00406408
  4045d0:	004063e0 	.word	0x004063e0
  4045d4:	3ff00000 	.word	0x3ff00000
  4045d8:	40240000 	.word	0x40240000
  4045dc:	401c0000 	.word	0x401c0000
  4045e0:	40140000 	.word	0x40140000
  4045e4:	3fe00000 	.word	0x3fe00000
  4045e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4045ec:	9d06      	ldr	r5, [sp, #24]
  4045ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4045f2:	4630      	mov	r0, r6
  4045f4:	4639      	mov	r1, r7
  4045f6:	f7fe fd55 	bl	4030a4 <__aeabi_ddiv>
  4045fa:	f7fe fec3 	bl	403384 <__aeabi_d2iz>
  4045fe:	4680      	mov	r8, r0
  404600:	f7fe fbc0 	bl	402d84 <__aeabi_i2d>
  404604:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404608:	f7fe fc22 	bl	402e50 <__aeabi_dmul>
  40460c:	4602      	mov	r2, r0
  40460e:	460b      	mov	r3, r1
  404610:	4630      	mov	r0, r6
  404612:	4639      	mov	r1, r7
  404614:	f108 0630 	add.w	r6, r8, #48	; 0x30
  404618:	f7fe fa66 	bl	402ae8 <__aeabi_dsub>
  40461c:	f805 6b01 	strb.w	r6, [r5], #1
  404620:	9e06      	ldr	r6, [sp, #24]
  404622:	1bae      	subs	r6, r5, r6
  404624:	45b1      	cmp	r9, r6
  404626:	4602      	mov	r2, r0
  404628:	460b      	mov	r3, r1
  40462a:	d138      	bne.n	40469e <_dtoa_r+0x6d6>
  40462c:	f7fe fa5e 	bl	402aec <__adddf3>
  404630:	4606      	mov	r6, r0
  404632:	460f      	mov	r7, r1
  404634:	4602      	mov	r2, r0
  404636:	460b      	mov	r3, r1
  404638:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40463c:	f7fe fe7a 	bl	403334 <__aeabi_dcmplt>
  404640:	b9c8      	cbnz	r0, 404676 <_dtoa_r+0x6ae>
  404642:	4632      	mov	r2, r6
  404644:	463b      	mov	r3, r7
  404646:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40464a:	f7fe fe69 	bl	403320 <__aeabi_dcmpeq>
  40464e:	b110      	cbz	r0, 404656 <_dtoa_r+0x68e>
  404650:	f018 0f01 	tst.w	r8, #1
  404654:	d10f      	bne.n	404676 <_dtoa_r+0x6ae>
  404656:	4651      	mov	r1, sl
  404658:	4620      	mov	r0, r4
  40465a:	f000 fd05 	bl	405068 <_Bfree>
  40465e:	2300      	movs	r3, #0
  404660:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404662:	702b      	strb	r3, [r5, #0]
  404664:	f10b 0301 	add.w	r3, fp, #1
  404668:	6013      	str	r3, [r2, #0]
  40466a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40466c:	2b00      	cmp	r3, #0
  40466e:	f43f acf0 	beq.w	404052 <_dtoa_r+0x8a>
  404672:	601d      	str	r5, [r3, #0]
  404674:	e4ed      	b.n	404052 <_dtoa_r+0x8a>
  404676:	465f      	mov	r7, fp
  404678:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40467c:	2a39      	cmp	r2, #57	; 0x39
  40467e:	f105 33ff 	add.w	r3, r5, #4294967295
  404682:	d106      	bne.n	404692 <_dtoa_r+0x6ca>
  404684:	9a06      	ldr	r2, [sp, #24]
  404686:	429a      	cmp	r2, r3
  404688:	d107      	bne.n	40469a <_dtoa_r+0x6d2>
  40468a:	2330      	movs	r3, #48	; 0x30
  40468c:	7013      	strb	r3, [r2, #0]
  40468e:	3701      	adds	r7, #1
  404690:	4613      	mov	r3, r2
  404692:	781a      	ldrb	r2, [r3, #0]
  404694:	3201      	adds	r2, #1
  404696:	701a      	strb	r2, [r3, #0]
  404698:	e78e      	b.n	4045b8 <_dtoa_r+0x5f0>
  40469a:	461d      	mov	r5, r3
  40469c:	e7ec      	b.n	404678 <_dtoa_r+0x6b0>
  40469e:	2200      	movs	r2, #0
  4046a0:	4bb4      	ldr	r3, [pc, #720]	; (404974 <_dtoa_r+0x9ac>)
  4046a2:	f7fe fbd5 	bl	402e50 <__aeabi_dmul>
  4046a6:	2200      	movs	r2, #0
  4046a8:	2300      	movs	r3, #0
  4046aa:	4606      	mov	r6, r0
  4046ac:	460f      	mov	r7, r1
  4046ae:	f7fe fe37 	bl	403320 <__aeabi_dcmpeq>
  4046b2:	2800      	cmp	r0, #0
  4046b4:	d09b      	beq.n	4045ee <_dtoa_r+0x626>
  4046b6:	e7ce      	b.n	404656 <_dtoa_r+0x68e>
  4046b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4046ba:	2a00      	cmp	r2, #0
  4046bc:	f000 8129 	beq.w	404912 <_dtoa_r+0x94a>
  4046c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4046c2:	2a01      	cmp	r2, #1
  4046c4:	f300 810e 	bgt.w	4048e4 <_dtoa_r+0x91c>
  4046c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4046ca:	2a00      	cmp	r2, #0
  4046cc:	f000 8106 	beq.w	4048dc <_dtoa_r+0x914>
  4046d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4046d4:	9e08      	ldr	r6, [sp, #32]
  4046d6:	4645      	mov	r5, r8
  4046d8:	9a07      	ldr	r2, [sp, #28]
  4046da:	2101      	movs	r1, #1
  4046dc:	441a      	add	r2, r3
  4046de:	4620      	mov	r0, r4
  4046e0:	4498      	add	r8, r3
  4046e2:	9207      	str	r2, [sp, #28]
  4046e4:	f000 fd60 	bl	4051a8 <__i2b>
  4046e8:	4607      	mov	r7, r0
  4046ea:	2d00      	cmp	r5, #0
  4046ec:	dd0b      	ble.n	404706 <_dtoa_r+0x73e>
  4046ee:	9b07      	ldr	r3, [sp, #28]
  4046f0:	2b00      	cmp	r3, #0
  4046f2:	dd08      	ble.n	404706 <_dtoa_r+0x73e>
  4046f4:	42ab      	cmp	r3, r5
  4046f6:	9a07      	ldr	r2, [sp, #28]
  4046f8:	bfa8      	it	ge
  4046fa:	462b      	movge	r3, r5
  4046fc:	eba8 0803 	sub.w	r8, r8, r3
  404700:	1aed      	subs	r5, r5, r3
  404702:	1ad3      	subs	r3, r2, r3
  404704:	9307      	str	r3, [sp, #28]
  404706:	9b08      	ldr	r3, [sp, #32]
  404708:	b1fb      	cbz	r3, 40474a <_dtoa_r+0x782>
  40470a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40470c:	2b00      	cmp	r3, #0
  40470e:	f000 8104 	beq.w	40491a <_dtoa_r+0x952>
  404712:	2e00      	cmp	r6, #0
  404714:	dd11      	ble.n	40473a <_dtoa_r+0x772>
  404716:	4639      	mov	r1, r7
  404718:	4632      	mov	r2, r6
  40471a:	4620      	mov	r0, r4
  40471c:	f000 fdda 	bl	4052d4 <__pow5mult>
  404720:	4652      	mov	r2, sl
  404722:	4601      	mov	r1, r0
  404724:	4607      	mov	r7, r0
  404726:	4620      	mov	r0, r4
  404728:	f000 fd47 	bl	4051ba <__multiply>
  40472c:	4651      	mov	r1, sl
  40472e:	900a      	str	r0, [sp, #40]	; 0x28
  404730:	4620      	mov	r0, r4
  404732:	f000 fc99 	bl	405068 <_Bfree>
  404736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404738:	469a      	mov	sl, r3
  40473a:	9b08      	ldr	r3, [sp, #32]
  40473c:	1b9a      	subs	r2, r3, r6
  40473e:	d004      	beq.n	40474a <_dtoa_r+0x782>
  404740:	4651      	mov	r1, sl
  404742:	4620      	mov	r0, r4
  404744:	f000 fdc6 	bl	4052d4 <__pow5mult>
  404748:	4682      	mov	sl, r0
  40474a:	2101      	movs	r1, #1
  40474c:	4620      	mov	r0, r4
  40474e:	f000 fd2b 	bl	4051a8 <__i2b>
  404752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404754:	2b00      	cmp	r3, #0
  404756:	4606      	mov	r6, r0
  404758:	f340 80e1 	ble.w	40491e <_dtoa_r+0x956>
  40475c:	461a      	mov	r2, r3
  40475e:	4601      	mov	r1, r0
  404760:	4620      	mov	r0, r4
  404762:	f000 fdb7 	bl	4052d4 <__pow5mult>
  404766:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404768:	2b01      	cmp	r3, #1
  40476a:	4606      	mov	r6, r0
  40476c:	f340 80da 	ble.w	404924 <_dtoa_r+0x95c>
  404770:	2300      	movs	r3, #0
  404772:	9308      	str	r3, [sp, #32]
  404774:	6933      	ldr	r3, [r6, #16]
  404776:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  40477a:	6918      	ldr	r0, [r3, #16]
  40477c:	f000 fcc6 	bl	40510c <__hi0bits>
  404780:	f1c0 0020 	rsb	r0, r0, #32
  404784:	9b07      	ldr	r3, [sp, #28]
  404786:	4418      	add	r0, r3
  404788:	f010 001f 	ands.w	r0, r0, #31
  40478c:	f000 80f0 	beq.w	404970 <_dtoa_r+0x9a8>
  404790:	f1c0 0320 	rsb	r3, r0, #32
  404794:	2b04      	cmp	r3, #4
  404796:	f340 80e2 	ble.w	40495e <_dtoa_r+0x996>
  40479a:	9b07      	ldr	r3, [sp, #28]
  40479c:	f1c0 001c 	rsb	r0, r0, #28
  4047a0:	4480      	add	r8, r0
  4047a2:	4405      	add	r5, r0
  4047a4:	4403      	add	r3, r0
  4047a6:	9307      	str	r3, [sp, #28]
  4047a8:	f1b8 0f00 	cmp.w	r8, #0
  4047ac:	dd05      	ble.n	4047ba <_dtoa_r+0x7f2>
  4047ae:	4651      	mov	r1, sl
  4047b0:	4642      	mov	r2, r8
  4047b2:	4620      	mov	r0, r4
  4047b4:	f000 fddc 	bl	405370 <__lshift>
  4047b8:	4682      	mov	sl, r0
  4047ba:	9b07      	ldr	r3, [sp, #28]
  4047bc:	2b00      	cmp	r3, #0
  4047be:	dd05      	ble.n	4047cc <_dtoa_r+0x804>
  4047c0:	4631      	mov	r1, r6
  4047c2:	461a      	mov	r2, r3
  4047c4:	4620      	mov	r0, r4
  4047c6:	f000 fdd3 	bl	405370 <__lshift>
  4047ca:	4606      	mov	r6, r0
  4047cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4047ce:	2b00      	cmp	r3, #0
  4047d0:	f000 80d2 	beq.w	404978 <_dtoa_r+0x9b0>
  4047d4:	4631      	mov	r1, r6
  4047d6:	4650      	mov	r0, sl
  4047d8:	f000 fe1b 	bl	405412 <__mcmp>
  4047dc:	2800      	cmp	r0, #0
  4047de:	f280 80cb 	bge.w	404978 <_dtoa_r+0x9b0>
  4047e2:	2300      	movs	r3, #0
  4047e4:	4651      	mov	r1, sl
  4047e6:	220a      	movs	r2, #10
  4047e8:	4620      	mov	r0, r4
  4047ea:	f000 fc54 	bl	405096 <__multadd>
  4047ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4047f0:	f10b 3bff 	add.w	fp, fp, #4294967295
  4047f4:	4682      	mov	sl, r0
  4047f6:	2b00      	cmp	r3, #0
  4047f8:	f000 81aa 	beq.w	404b50 <_dtoa_r+0xb88>
  4047fc:	2300      	movs	r3, #0
  4047fe:	4639      	mov	r1, r7
  404800:	220a      	movs	r2, #10
  404802:	4620      	mov	r0, r4
  404804:	f000 fc47 	bl	405096 <__multadd>
  404808:	9b04      	ldr	r3, [sp, #16]
  40480a:	2b00      	cmp	r3, #0
  40480c:	4607      	mov	r7, r0
  40480e:	dc03      	bgt.n	404818 <_dtoa_r+0x850>
  404810:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404812:	2b02      	cmp	r3, #2
  404814:	f300 80b8 	bgt.w	404988 <_dtoa_r+0x9c0>
  404818:	2d00      	cmp	r5, #0
  40481a:	dd05      	ble.n	404828 <_dtoa_r+0x860>
  40481c:	4639      	mov	r1, r7
  40481e:	462a      	mov	r2, r5
  404820:	4620      	mov	r0, r4
  404822:	f000 fda5 	bl	405370 <__lshift>
  404826:	4607      	mov	r7, r0
  404828:	9b08      	ldr	r3, [sp, #32]
  40482a:	2b00      	cmp	r3, #0
  40482c:	f000 8110 	beq.w	404a50 <_dtoa_r+0xa88>
  404830:	6879      	ldr	r1, [r7, #4]
  404832:	4620      	mov	r0, r4
  404834:	f000 fbe4 	bl	405000 <_Balloc>
  404838:	693a      	ldr	r2, [r7, #16]
  40483a:	3202      	adds	r2, #2
  40483c:	4605      	mov	r5, r0
  40483e:	0092      	lsls	r2, r2, #2
  404840:	f107 010c 	add.w	r1, r7, #12
  404844:	300c      	adds	r0, #12
  404846:	f7fe fde9 	bl	40341c <memcpy>
  40484a:	2201      	movs	r2, #1
  40484c:	4629      	mov	r1, r5
  40484e:	4620      	mov	r0, r4
  404850:	f000 fd8e 	bl	405370 <__lshift>
  404854:	9b02      	ldr	r3, [sp, #8]
  404856:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40485a:	9707      	str	r7, [sp, #28]
  40485c:	f003 0301 	and.w	r3, r3, #1
  404860:	4607      	mov	r7, r0
  404862:	9308      	str	r3, [sp, #32]
  404864:	4631      	mov	r1, r6
  404866:	4650      	mov	r0, sl
  404868:	f7ff fb20 	bl	403eac <quorem>
  40486c:	9907      	ldr	r1, [sp, #28]
  40486e:	4605      	mov	r5, r0
  404870:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404874:	4650      	mov	r0, sl
  404876:	f000 fdcc 	bl	405412 <__mcmp>
  40487a:	463a      	mov	r2, r7
  40487c:	9002      	str	r0, [sp, #8]
  40487e:	4631      	mov	r1, r6
  404880:	4620      	mov	r0, r4
  404882:	f000 fde0 	bl	405446 <__mdiff>
  404886:	68c3      	ldr	r3, [r0, #12]
  404888:	4602      	mov	r2, r0
  40488a:	2b00      	cmp	r3, #0
  40488c:	f040 80e2 	bne.w	404a54 <_dtoa_r+0xa8c>
  404890:	4601      	mov	r1, r0
  404892:	9009      	str	r0, [sp, #36]	; 0x24
  404894:	4650      	mov	r0, sl
  404896:	f000 fdbc 	bl	405412 <__mcmp>
  40489a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40489c:	4603      	mov	r3, r0
  40489e:	4611      	mov	r1, r2
  4048a0:	4620      	mov	r0, r4
  4048a2:	9309      	str	r3, [sp, #36]	; 0x24
  4048a4:	f000 fbe0 	bl	405068 <_Bfree>
  4048a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4048aa:	2b00      	cmp	r3, #0
  4048ac:	f040 80d4 	bne.w	404a58 <_dtoa_r+0xa90>
  4048b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4048b2:	2a00      	cmp	r2, #0
  4048b4:	f040 80d0 	bne.w	404a58 <_dtoa_r+0xa90>
  4048b8:	9a08      	ldr	r2, [sp, #32]
  4048ba:	2a00      	cmp	r2, #0
  4048bc:	f040 80cc 	bne.w	404a58 <_dtoa_r+0xa90>
  4048c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4048c4:	f000 80e8 	beq.w	404a98 <_dtoa_r+0xad0>
  4048c8:	9b02      	ldr	r3, [sp, #8]
  4048ca:	2b00      	cmp	r3, #0
  4048cc:	dd01      	ble.n	4048d2 <_dtoa_r+0x90a>
  4048ce:	f105 0931 	add.w	r9, r5, #49	; 0x31
  4048d2:	f108 0501 	add.w	r5, r8, #1
  4048d6:	f888 9000 	strb.w	r9, [r8]
  4048da:	e06a      	b.n	4049b2 <_dtoa_r+0x9ea>
  4048dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4048de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4048e2:	e6f7      	b.n	4046d4 <_dtoa_r+0x70c>
  4048e4:	9b08      	ldr	r3, [sp, #32]
  4048e6:	f109 36ff 	add.w	r6, r9, #4294967295
  4048ea:	42b3      	cmp	r3, r6
  4048ec:	bfbf      	itttt	lt
  4048ee:	9b08      	ldrlt	r3, [sp, #32]
  4048f0:	9608      	strlt	r6, [sp, #32]
  4048f2:	1af2      	sublt	r2, r6, r3
  4048f4:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  4048f6:	bfb7      	itett	lt
  4048f8:	189b      	addlt	r3, r3, r2
  4048fa:	1b9e      	subge	r6, r3, r6
  4048fc:	930c      	strlt	r3, [sp, #48]	; 0x30
  4048fe:	2600      	movlt	r6, #0
  404900:	f1b9 0f00 	cmp.w	r9, #0
  404904:	bfb9      	ittee	lt
  404906:	eba8 0509 	sublt.w	r5, r8, r9
  40490a:	2300      	movlt	r3, #0
  40490c:	4645      	movge	r5, r8
  40490e:	464b      	movge	r3, r9
  404910:	e6e2      	b.n	4046d8 <_dtoa_r+0x710>
  404912:	9e08      	ldr	r6, [sp, #32]
  404914:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404916:	4645      	mov	r5, r8
  404918:	e6e7      	b.n	4046ea <_dtoa_r+0x722>
  40491a:	9a08      	ldr	r2, [sp, #32]
  40491c:	e710      	b.n	404740 <_dtoa_r+0x778>
  40491e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404920:	2b01      	cmp	r3, #1
  404922:	dc18      	bgt.n	404956 <_dtoa_r+0x98e>
  404924:	9b02      	ldr	r3, [sp, #8]
  404926:	b9b3      	cbnz	r3, 404956 <_dtoa_r+0x98e>
  404928:	9b03      	ldr	r3, [sp, #12]
  40492a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40492e:	b9a3      	cbnz	r3, 40495a <_dtoa_r+0x992>
  404930:	9b03      	ldr	r3, [sp, #12]
  404932:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  404936:	0d1b      	lsrs	r3, r3, #20
  404938:	051b      	lsls	r3, r3, #20
  40493a:	b12b      	cbz	r3, 404948 <_dtoa_r+0x980>
  40493c:	9b07      	ldr	r3, [sp, #28]
  40493e:	3301      	adds	r3, #1
  404940:	9307      	str	r3, [sp, #28]
  404942:	f108 0801 	add.w	r8, r8, #1
  404946:	2301      	movs	r3, #1
  404948:	9308      	str	r3, [sp, #32]
  40494a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40494c:	2b00      	cmp	r3, #0
  40494e:	f47f af11 	bne.w	404774 <_dtoa_r+0x7ac>
  404952:	2001      	movs	r0, #1
  404954:	e716      	b.n	404784 <_dtoa_r+0x7bc>
  404956:	2300      	movs	r3, #0
  404958:	e7f6      	b.n	404948 <_dtoa_r+0x980>
  40495a:	9b02      	ldr	r3, [sp, #8]
  40495c:	e7f4      	b.n	404948 <_dtoa_r+0x980>
  40495e:	f43f af23 	beq.w	4047a8 <_dtoa_r+0x7e0>
  404962:	9a07      	ldr	r2, [sp, #28]
  404964:	331c      	adds	r3, #28
  404966:	441a      	add	r2, r3
  404968:	4498      	add	r8, r3
  40496a:	441d      	add	r5, r3
  40496c:	4613      	mov	r3, r2
  40496e:	e71a      	b.n	4047a6 <_dtoa_r+0x7de>
  404970:	4603      	mov	r3, r0
  404972:	e7f6      	b.n	404962 <_dtoa_r+0x99a>
  404974:	40240000 	.word	0x40240000
  404978:	f1b9 0f00 	cmp.w	r9, #0
  40497c:	dc33      	bgt.n	4049e6 <_dtoa_r+0xa1e>
  40497e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404980:	2b02      	cmp	r3, #2
  404982:	dd30      	ble.n	4049e6 <_dtoa_r+0xa1e>
  404984:	f8cd 9010 	str.w	r9, [sp, #16]
  404988:	9b04      	ldr	r3, [sp, #16]
  40498a:	b963      	cbnz	r3, 4049a6 <_dtoa_r+0x9de>
  40498c:	4631      	mov	r1, r6
  40498e:	2205      	movs	r2, #5
  404990:	4620      	mov	r0, r4
  404992:	f000 fb80 	bl	405096 <__multadd>
  404996:	4601      	mov	r1, r0
  404998:	4606      	mov	r6, r0
  40499a:	4650      	mov	r0, sl
  40499c:	f000 fd39 	bl	405412 <__mcmp>
  4049a0:	2800      	cmp	r0, #0
  4049a2:	f73f ad5c 	bgt.w	40445e <_dtoa_r+0x496>
  4049a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4049a8:	9d06      	ldr	r5, [sp, #24]
  4049aa:	ea6f 0b03 	mvn.w	fp, r3
  4049ae:	2300      	movs	r3, #0
  4049b0:	9307      	str	r3, [sp, #28]
  4049b2:	4631      	mov	r1, r6
  4049b4:	4620      	mov	r0, r4
  4049b6:	f000 fb57 	bl	405068 <_Bfree>
  4049ba:	2f00      	cmp	r7, #0
  4049bc:	f43f ae4b 	beq.w	404656 <_dtoa_r+0x68e>
  4049c0:	9b07      	ldr	r3, [sp, #28]
  4049c2:	b12b      	cbz	r3, 4049d0 <_dtoa_r+0xa08>
  4049c4:	42bb      	cmp	r3, r7
  4049c6:	d003      	beq.n	4049d0 <_dtoa_r+0xa08>
  4049c8:	4619      	mov	r1, r3
  4049ca:	4620      	mov	r0, r4
  4049cc:	f000 fb4c 	bl	405068 <_Bfree>
  4049d0:	4639      	mov	r1, r7
  4049d2:	4620      	mov	r0, r4
  4049d4:	f000 fb48 	bl	405068 <_Bfree>
  4049d8:	e63d      	b.n	404656 <_dtoa_r+0x68e>
  4049da:	2600      	movs	r6, #0
  4049dc:	4637      	mov	r7, r6
  4049de:	e7e2      	b.n	4049a6 <_dtoa_r+0x9de>
  4049e0:	46bb      	mov	fp, r7
  4049e2:	4637      	mov	r7, r6
  4049e4:	e53b      	b.n	40445e <_dtoa_r+0x496>
  4049e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4049e8:	f8cd 9010 	str.w	r9, [sp, #16]
  4049ec:	2b00      	cmp	r3, #0
  4049ee:	f47f af13 	bne.w	404818 <_dtoa_r+0x850>
  4049f2:	9d06      	ldr	r5, [sp, #24]
  4049f4:	4631      	mov	r1, r6
  4049f6:	4650      	mov	r0, sl
  4049f8:	f7ff fa58 	bl	403eac <quorem>
  4049fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404a00:	f805 9b01 	strb.w	r9, [r5], #1
  404a04:	9b06      	ldr	r3, [sp, #24]
  404a06:	9a04      	ldr	r2, [sp, #16]
  404a08:	1aeb      	subs	r3, r5, r3
  404a0a:	429a      	cmp	r2, r3
  404a0c:	f300 8083 	bgt.w	404b16 <_dtoa_r+0xb4e>
  404a10:	9b06      	ldr	r3, [sp, #24]
  404a12:	2a01      	cmp	r2, #1
  404a14:	bfac      	ite	ge
  404a16:	189b      	addge	r3, r3, r2
  404a18:	3301      	addlt	r3, #1
  404a1a:	4698      	mov	r8, r3
  404a1c:	2300      	movs	r3, #0
  404a1e:	9307      	str	r3, [sp, #28]
  404a20:	4651      	mov	r1, sl
  404a22:	2201      	movs	r2, #1
  404a24:	4620      	mov	r0, r4
  404a26:	f000 fca3 	bl	405370 <__lshift>
  404a2a:	4631      	mov	r1, r6
  404a2c:	4682      	mov	sl, r0
  404a2e:	f000 fcf0 	bl	405412 <__mcmp>
  404a32:	2800      	cmp	r0, #0
  404a34:	dc35      	bgt.n	404aa2 <_dtoa_r+0xada>
  404a36:	d102      	bne.n	404a3e <_dtoa_r+0xa76>
  404a38:	f019 0f01 	tst.w	r9, #1
  404a3c:	d131      	bne.n	404aa2 <_dtoa_r+0xada>
  404a3e:	4645      	mov	r5, r8
  404a40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404a44:	2b30      	cmp	r3, #48	; 0x30
  404a46:	f105 32ff 	add.w	r2, r5, #4294967295
  404a4a:	d1b2      	bne.n	4049b2 <_dtoa_r+0x9ea>
  404a4c:	4615      	mov	r5, r2
  404a4e:	e7f7      	b.n	404a40 <_dtoa_r+0xa78>
  404a50:	4638      	mov	r0, r7
  404a52:	e6ff      	b.n	404854 <_dtoa_r+0x88c>
  404a54:	2301      	movs	r3, #1
  404a56:	e722      	b.n	40489e <_dtoa_r+0x8d6>
  404a58:	9a02      	ldr	r2, [sp, #8]
  404a5a:	2a00      	cmp	r2, #0
  404a5c:	db04      	blt.n	404a68 <_dtoa_r+0xaa0>
  404a5e:	d129      	bne.n	404ab4 <_dtoa_r+0xaec>
  404a60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404a62:	bb3a      	cbnz	r2, 404ab4 <_dtoa_r+0xaec>
  404a64:	9a08      	ldr	r2, [sp, #32]
  404a66:	bb2a      	cbnz	r2, 404ab4 <_dtoa_r+0xaec>
  404a68:	2b00      	cmp	r3, #0
  404a6a:	f77f af32 	ble.w	4048d2 <_dtoa_r+0x90a>
  404a6e:	4651      	mov	r1, sl
  404a70:	2201      	movs	r2, #1
  404a72:	4620      	mov	r0, r4
  404a74:	f000 fc7c 	bl	405370 <__lshift>
  404a78:	4631      	mov	r1, r6
  404a7a:	4682      	mov	sl, r0
  404a7c:	f000 fcc9 	bl	405412 <__mcmp>
  404a80:	2800      	cmp	r0, #0
  404a82:	dc05      	bgt.n	404a90 <_dtoa_r+0xac8>
  404a84:	f47f af25 	bne.w	4048d2 <_dtoa_r+0x90a>
  404a88:	f019 0f01 	tst.w	r9, #1
  404a8c:	f43f af21 	beq.w	4048d2 <_dtoa_r+0x90a>
  404a90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404a94:	f47f af1b 	bne.w	4048ce <_dtoa_r+0x906>
  404a98:	2339      	movs	r3, #57	; 0x39
  404a9a:	f888 3000 	strb.w	r3, [r8]
  404a9e:	f108 0801 	add.w	r8, r8, #1
  404aa2:	4645      	mov	r5, r8
  404aa4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404aa8:	2b39      	cmp	r3, #57	; 0x39
  404aaa:	f105 32ff 	add.w	r2, r5, #4294967295
  404aae:	d03a      	beq.n	404b26 <_dtoa_r+0xb5e>
  404ab0:	3301      	adds	r3, #1
  404ab2:	e03f      	b.n	404b34 <_dtoa_r+0xb6c>
  404ab4:	2b00      	cmp	r3, #0
  404ab6:	f108 0501 	add.w	r5, r8, #1
  404aba:	dd05      	ble.n	404ac8 <_dtoa_r+0xb00>
  404abc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404ac0:	d0ea      	beq.n	404a98 <_dtoa_r+0xad0>
  404ac2:	f109 0901 	add.w	r9, r9, #1
  404ac6:	e706      	b.n	4048d6 <_dtoa_r+0x90e>
  404ac8:	9b06      	ldr	r3, [sp, #24]
  404aca:	9a04      	ldr	r2, [sp, #16]
  404acc:	f805 9c01 	strb.w	r9, [r5, #-1]
  404ad0:	1aeb      	subs	r3, r5, r3
  404ad2:	4293      	cmp	r3, r2
  404ad4:	46a8      	mov	r8, r5
  404ad6:	d0a3      	beq.n	404a20 <_dtoa_r+0xa58>
  404ad8:	4651      	mov	r1, sl
  404ada:	2300      	movs	r3, #0
  404adc:	220a      	movs	r2, #10
  404ade:	4620      	mov	r0, r4
  404ae0:	f000 fad9 	bl	405096 <__multadd>
  404ae4:	9b07      	ldr	r3, [sp, #28]
  404ae6:	9907      	ldr	r1, [sp, #28]
  404ae8:	42bb      	cmp	r3, r7
  404aea:	4682      	mov	sl, r0
  404aec:	f04f 0300 	mov.w	r3, #0
  404af0:	f04f 020a 	mov.w	r2, #10
  404af4:	4620      	mov	r0, r4
  404af6:	d104      	bne.n	404b02 <_dtoa_r+0xb3a>
  404af8:	f000 facd 	bl	405096 <__multadd>
  404afc:	9007      	str	r0, [sp, #28]
  404afe:	4607      	mov	r7, r0
  404b00:	e6b0      	b.n	404864 <_dtoa_r+0x89c>
  404b02:	f000 fac8 	bl	405096 <__multadd>
  404b06:	2300      	movs	r3, #0
  404b08:	9007      	str	r0, [sp, #28]
  404b0a:	220a      	movs	r2, #10
  404b0c:	4639      	mov	r1, r7
  404b0e:	4620      	mov	r0, r4
  404b10:	f000 fac1 	bl	405096 <__multadd>
  404b14:	e7f3      	b.n	404afe <_dtoa_r+0xb36>
  404b16:	4651      	mov	r1, sl
  404b18:	2300      	movs	r3, #0
  404b1a:	220a      	movs	r2, #10
  404b1c:	4620      	mov	r0, r4
  404b1e:	f000 faba 	bl	405096 <__multadd>
  404b22:	4682      	mov	sl, r0
  404b24:	e766      	b.n	4049f4 <_dtoa_r+0xa2c>
  404b26:	9b06      	ldr	r3, [sp, #24]
  404b28:	4293      	cmp	r3, r2
  404b2a:	d105      	bne.n	404b38 <_dtoa_r+0xb70>
  404b2c:	9a06      	ldr	r2, [sp, #24]
  404b2e:	f10b 0b01 	add.w	fp, fp, #1
  404b32:	2331      	movs	r3, #49	; 0x31
  404b34:	7013      	strb	r3, [r2, #0]
  404b36:	e73c      	b.n	4049b2 <_dtoa_r+0x9ea>
  404b38:	4615      	mov	r5, r2
  404b3a:	e7b3      	b.n	404aa4 <_dtoa_r+0xadc>
  404b3c:	4b09      	ldr	r3, [pc, #36]	; (404b64 <_dtoa_r+0xb9c>)
  404b3e:	f7ff baa5 	b.w	40408c <_dtoa_r+0xc4>
  404b42:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404b44:	2b00      	cmp	r3, #0
  404b46:	f47f aa7f 	bne.w	404048 <_dtoa_r+0x80>
  404b4a:	4b07      	ldr	r3, [pc, #28]	; (404b68 <_dtoa_r+0xba0>)
  404b4c:	f7ff ba9e 	b.w	40408c <_dtoa_r+0xc4>
  404b50:	9b04      	ldr	r3, [sp, #16]
  404b52:	2b00      	cmp	r3, #0
  404b54:	f73f af4d 	bgt.w	4049f2 <_dtoa_r+0xa2a>
  404b58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404b5a:	2b02      	cmp	r3, #2
  404b5c:	f77f af49 	ble.w	4049f2 <_dtoa_r+0xa2a>
  404b60:	e712      	b.n	404988 <_dtoa_r+0x9c0>
  404b62:	bf00      	nop
  404b64:	00406348 	.word	0x00406348
  404b68:	0040636c 	.word	0x0040636c

00404b6c <__sflush_r>:
  404b6c:	898a      	ldrh	r2, [r1, #12]
  404b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404b72:	4605      	mov	r5, r0
  404b74:	0710      	lsls	r0, r2, #28
  404b76:	460c      	mov	r4, r1
  404b78:	d45a      	bmi.n	404c30 <__sflush_r+0xc4>
  404b7a:	684b      	ldr	r3, [r1, #4]
  404b7c:	2b00      	cmp	r3, #0
  404b7e:	dc05      	bgt.n	404b8c <__sflush_r+0x20>
  404b80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  404b82:	2b00      	cmp	r3, #0
  404b84:	dc02      	bgt.n	404b8c <__sflush_r+0x20>
  404b86:	2000      	movs	r0, #0
  404b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404b8e:	2e00      	cmp	r6, #0
  404b90:	d0f9      	beq.n	404b86 <__sflush_r+0x1a>
  404b92:	2300      	movs	r3, #0
  404b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  404b98:	682f      	ldr	r7, [r5, #0]
  404b9a:	602b      	str	r3, [r5, #0]
  404b9c:	d033      	beq.n	404c06 <__sflush_r+0x9a>
  404b9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  404ba0:	89a3      	ldrh	r3, [r4, #12]
  404ba2:	075a      	lsls	r2, r3, #29
  404ba4:	d505      	bpl.n	404bb2 <__sflush_r+0x46>
  404ba6:	6863      	ldr	r3, [r4, #4]
  404ba8:	1ac0      	subs	r0, r0, r3
  404baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
  404bac:	b10b      	cbz	r3, 404bb2 <__sflush_r+0x46>
  404bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
  404bb0:	1ac0      	subs	r0, r0, r3
  404bb2:	2300      	movs	r3, #0
  404bb4:	4602      	mov	r2, r0
  404bb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404bb8:	6a21      	ldr	r1, [r4, #32]
  404bba:	4628      	mov	r0, r5
  404bbc:	47b0      	blx	r6
  404bbe:	1c43      	adds	r3, r0, #1
  404bc0:	89a3      	ldrh	r3, [r4, #12]
  404bc2:	d106      	bne.n	404bd2 <__sflush_r+0x66>
  404bc4:	6829      	ldr	r1, [r5, #0]
  404bc6:	291d      	cmp	r1, #29
  404bc8:	d84b      	bhi.n	404c62 <__sflush_r+0xf6>
  404bca:	4a2b      	ldr	r2, [pc, #172]	; (404c78 <__sflush_r+0x10c>)
  404bcc:	40ca      	lsrs	r2, r1
  404bce:	07d6      	lsls	r6, r2, #31
  404bd0:	d547      	bpl.n	404c62 <__sflush_r+0xf6>
  404bd2:	2200      	movs	r2, #0
  404bd4:	6062      	str	r2, [r4, #4]
  404bd6:	04d9      	lsls	r1, r3, #19
  404bd8:	6922      	ldr	r2, [r4, #16]
  404bda:	6022      	str	r2, [r4, #0]
  404bdc:	d504      	bpl.n	404be8 <__sflush_r+0x7c>
  404bde:	1c42      	adds	r2, r0, #1
  404be0:	d101      	bne.n	404be6 <__sflush_r+0x7a>
  404be2:	682b      	ldr	r3, [r5, #0]
  404be4:	b903      	cbnz	r3, 404be8 <__sflush_r+0x7c>
  404be6:	6560      	str	r0, [r4, #84]	; 0x54
  404be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  404bea:	602f      	str	r7, [r5, #0]
  404bec:	2900      	cmp	r1, #0
  404bee:	d0ca      	beq.n	404b86 <__sflush_r+0x1a>
  404bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404bf4:	4299      	cmp	r1, r3
  404bf6:	d002      	beq.n	404bfe <__sflush_r+0x92>
  404bf8:	4628      	mov	r0, r5
  404bfa:	f000 fcdf 	bl	4055bc <_free_r>
  404bfe:	2000      	movs	r0, #0
  404c00:	6360      	str	r0, [r4, #52]	; 0x34
  404c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c06:	6a21      	ldr	r1, [r4, #32]
  404c08:	2301      	movs	r3, #1
  404c0a:	4628      	mov	r0, r5
  404c0c:	47b0      	blx	r6
  404c0e:	1c41      	adds	r1, r0, #1
  404c10:	d1c6      	bne.n	404ba0 <__sflush_r+0x34>
  404c12:	682b      	ldr	r3, [r5, #0]
  404c14:	2b00      	cmp	r3, #0
  404c16:	d0c3      	beq.n	404ba0 <__sflush_r+0x34>
  404c18:	2b1d      	cmp	r3, #29
  404c1a:	d001      	beq.n	404c20 <__sflush_r+0xb4>
  404c1c:	2b16      	cmp	r3, #22
  404c1e:	d101      	bne.n	404c24 <__sflush_r+0xb8>
  404c20:	602f      	str	r7, [r5, #0]
  404c22:	e7b0      	b.n	404b86 <__sflush_r+0x1a>
  404c24:	89a3      	ldrh	r3, [r4, #12]
  404c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404c2a:	81a3      	strh	r3, [r4, #12]
  404c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c30:	690f      	ldr	r7, [r1, #16]
  404c32:	2f00      	cmp	r7, #0
  404c34:	d0a7      	beq.n	404b86 <__sflush_r+0x1a>
  404c36:	0793      	lsls	r3, r2, #30
  404c38:	680e      	ldr	r6, [r1, #0]
  404c3a:	bf08      	it	eq
  404c3c:	694b      	ldreq	r3, [r1, #20]
  404c3e:	600f      	str	r7, [r1, #0]
  404c40:	bf18      	it	ne
  404c42:	2300      	movne	r3, #0
  404c44:	eba6 0807 	sub.w	r8, r6, r7
  404c48:	608b      	str	r3, [r1, #8]
  404c4a:	f1b8 0f00 	cmp.w	r8, #0
  404c4e:	dd9a      	ble.n	404b86 <__sflush_r+0x1a>
  404c50:	4643      	mov	r3, r8
  404c52:	463a      	mov	r2, r7
  404c54:	6a21      	ldr	r1, [r4, #32]
  404c56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  404c58:	4628      	mov	r0, r5
  404c5a:	47b0      	blx	r6
  404c5c:	2800      	cmp	r0, #0
  404c5e:	dc07      	bgt.n	404c70 <__sflush_r+0x104>
  404c60:	89a3      	ldrh	r3, [r4, #12]
  404c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404c66:	81a3      	strh	r3, [r4, #12]
  404c68:	f04f 30ff 	mov.w	r0, #4294967295
  404c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c70:	4407      	add	r7, r0
  404c72:	eba8 0800 	sub.w	r8, r8, r0
  404c76:	e7e8      	b.n	404c4a <__sflush_r+0xde>
  404c78:	20400001 	.word	0x20400001

00404c7c <_fflush_r>:
  404c7c:	b538      	push	{r3, r4, r5, lr}
  404c7e:	690b      	ldr	r3, [r1, #16]
  404c80:	4605      	mov	r5, r0
  404c82:	460c      	mov	r4, r1
  404c84:	b1db      	cbz	r3, 404cbe <_fflush_r+0x42>
  404c86:	b118      	cbz	r0, 404c90 <_fflush_r+0x14>
  404c88:	6983      	ldr	r3, [r0, #24]
  404c8a:	b90b      	cbnz	r3, 404c90 <_fflush_r+0x14>
  404c8c:	f000 f860 	bl	404d50 <__sinit>
  404c90:	4b0c      	ldr	r3, [pc, #48]	; (404cc4 <_fflush_r+0x48>)
  404c92:	429c      	cmp	r4, r3
  404c94:	d109      	bne.n	404caa <_fflush_r+0x2e>
  404c96:	686c      	ldr	r4, [r5, #4]
  404c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c9c:	b17b      	cbz	r3, 404cbe <_fflush_r+0x42>
  404c9e:	4621      	mov	r1, r4
  404ca0:	4628      	mov	r0, r5
  404ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404ca6:	f7ff bf61 	b.w	404b6c <__sflush_r>
  404caa:	4b07      	ldr	r3, [pc, #28]	; (404cc8 <_fflush_r+0x4c>)
  404cac:	429c      	cmp	r4, r3
  404cae:	d101      	bne.n	404cb4 <_fflush_r+0x38>
  404cb0:	68ac      	ldr	r4, [r5, #8]
  404cb2:	e7f1      	b.n	404c98 <_fflush_r+0x1c>
  404cb4:	4b05      	ldr	r3, [pc, #20]	; (404ccc <_fflush_r+0x50>)
  404cb6:	429c      	cmp	r4, r3
  404cb8:	bf08      	it	eq
  404cba:	68ec      	ldreq	r4, [r5, #12]
  404cbc:	e7ec      	b.n	404c98 <_fflush_r+0x1c>
  404cbe:	2000      	movs	r0, #0
  404cc0:	bd38      	pop	{r3, r4, r5, pc}
  404cc2:	bf00      	nop
  404cc4:	0040639c 	.word	0x0040639c
  404cc8:	004063bc 	.word	0x004063bc
  404ccc:	0040637c 	.word	0x0040637c

00404cd0 <_cleanup_r>:
  404cd0:	4901      	ldr	r1, [pc, #4]	; (404cd8 <_cleanup_r+0x8>)
  404cd2:	f000 b8a9 	b.w	404e28 <_fwalk_reent>
  404cd6:	bf00      	nop
  404cd8:	00404c7d 	.word	0x00404c7d

00404cdc <std.isra.0>:
  404cdc:	2300      	movs	r3, #0
  404cde:	b510      	push	{r4, lr}
  404ce0:	4604      	mov	r4, r0
  404ce2:	6003      	str	r3, [r0, #0]
  404ce4:	6043      	str	r3, [r0, #4]
  404ce6:	6083      	str	r3, [r0, #8]
  404ce8:	8181      	strh	r1, [r0, #12]
  404cea:	6643      	str	r3, [r0, #100]	; 0x64
  404cec:	81c2      	strh	r2, [r0, #14]
  404cee:	6103      	str	r3, [r0, #16]
  404cf0:	6143      	str	r3, [r0, #20]
  404cf2:	6183      	str	r3, [r0, #24]
  404cf4:	4619      	mov	r1, r3
  404cf6:	2208      	movs	r2, #8
  404cf8:	305c      	adds	r0, #92	; 0x5c
  404cfa:	f7fe fb9a 	bl	403432 <memset>
  404cfe:	4b05      	ldr	r3, [pc, #20]	; (404d14 <std.isra.0+0x38>)
  404d00:	6263      	str	r3, [r4, #36]	; 0x24
  404d02:	4b05      	ldr	r3, [pc, #20]	; (404d18 <std.isra.0+0x3c>)
  404d04:	62a3      	str	r3, [r4, #40]	; 0x28
  404d06:	4b05      	ldr	r3, [pc, #20]	; (404d1c <std.isra.0+0x40>)
  404d08:	62e3      	str	r3, [r4, #44]	; 0x2c
  404d0a:	4b05      	ldr	r3, [pc, #20]	; (404d20 <std.isra.0+0x44>)
  404d0c:	6224      	str	r4, [r4, #32]
  404d0e:	6323      	str	r3, [r4, #48]	; 0x30
  404d10:	bd10      	pop	{r4, pc}
  404d12:	bf00      	nop
  404d14:	004059b1 	.word	0x004059b1
  404d18:	004059d3 	.word	0x004059d3
  404d1c:	00405a0b 	.word	0x00405a0b
  404d20:	00405a2f 	.word	0x00405a2f

00404d24 <__sfmoreglue>:
  404d24:	b570      	push	{r4, r5, r6, lr}
  404d26:	1e4a      	subs	r2, r1, #1
  404d28:	2568      	movs	r5, #104	; 0x68
  404d2a:	4355      	muls	r5, r2
  404d2c:	460e      	mov	r6, r1
  404d2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  404d32:	f000 fc91 	bl	405658 <_malloc_r>
  404d36:	4604      	mov	r4, r0
  404d38:	b140      	cbz	r0, 404d4c <__sfmoreglue+0x28>
  404d3a:	2100      	movs	r1, #0
  404d3c:	e880 0042 	stmia.w	r0, {r1, r6}
  404d40:	300c      	adds	r0, #12
  404d42:	60a0      	str	r0, [r4, #8]
  404d44:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404d48:	f7fe fb73 	bl	403432 <memset>
  404d4c:	4620      	mov	r0, r4
  404d4e:	bd70      	pop	{r4, r5, r6, pc}

00404d50 <__sinit>:
  404d50:	6983      	ldr	r3, [r0, #24]
  404d52:	b510      	push	{r4, lr}
  404d54:	4604      	mov	r4, r0
  404d56:	bb33      	cbnz	r3, 404da6 <__sinit+0x56>
  404d58:	6483      	str	r3, [r0, #72]	; 0x48
  404d5a:	64c3      	str	r3, [r0, #76]	; 0x4c
  404d5c:	6503      	str	r3, [r0, #80]	; 0x50
  404d5e:	4b12      	ldr	r3, [pc, #72]	; (404da8 <__sinit+0x58>)
  404d60:	4a12      	ldr	r2, [pc, #72]	; (404dac <__sinit+0x5c>)
  404d62:	681b      	ldr	r3, [r3, #0]
  404d64:	6282      	str	r2, [r0, #40]	; 0x28
  404d66:	4298      	cmp	r0, r3
  404d68:	bf04      	itt	eq
  404d6a:	2301      	moveq	r3, #1
  404d6c:	6183      	streq	r3, [r0, #24]
  404d6e:	f000 f81f 	bl	404db0 <__sfp>
  404d72:	6060      	str	r0, [r4, #4]
  404d74:	4620      	mov	r0, r4
  404d76:	f000 f81b 	bl	404db0 <__sfp>
  404d7a:	60a0      	str	r0, [r4, #8]
  404d7c:	4620      	mov	r0, r4
  404d7e:	f000 f817 	bl	404db0 <__sfp>
  404d82:	2200      	movs	r2, #0
  404d84:	60e0      	str	r0, [r4, #12]
  404d86:	2104      	movs	r1, #4
  404d88:	6860      	ldr	r0, [r4, #4]
  404d8a:	f7ff ffa7 	bl	404cdc <std.isra.0>
  404d8e:	2201      	movs	r2, #1
  404d90:	2109      	movs	r1, #9
  404d92:	68a0      	ldr	r0, [r4, #8]
  404d94:	f7ff ffa2 	bl	404cdc <std.isra.0>
  404d98:	2202      	movs	r2, #2
  404d9a:	2112      	movs	r1, #18
  404d9c:	68e0      	ldr	r0, [r4, #12]
  404d9e:	f7ff ff9d 	bl	404cdc <std.isra.0>
  404da2:	2301      	movs	r3, #1
  404da4:	61a3      	str	r3, [r4, #24]
  404da6:	bd10      	pop	{r4, pc}
  404da8:	00406334 	.word	0x00406334
  404dac:	00404cd1 	.word	0x00404cd1

00404db0 <__sfp>:
  404db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404db2:	4b1c      	ldr	r3, [pc, #112]	; (404e24 <__sfp+0x74>)
  404db4:	681e      	ldr	r6, [r3, #0]
  404db6:	69b3      	ldr	r3, [r6, #24]
  404db8:	4607      	mov	r7, r0
  404dba:	b913      	cbnz	r3, 404dc2 <__sfp+0x12>
  404dbc:	4630      	mov	r0, r6
  404dbe:	f7ff ffc7 	bl	404d50 <__sinit>
  404dc2:	3648      	adds	r6, #72	; 0x48
  404dc4:	68b4      	ldr	r4, [r6, #8]
  404dc6:	6873      	ldr	r3, [r6, #4]
  404dc8:	3b01      	subs	r3, #1
  404dca:	d503      	bpl.n	404dd4 <__sfp+0x24>
  404dcc:	6833      	ldr	r3, [r6, #0]
  404dce:	b133      	cbz	r3, 404dde <__sfp+0x2e>
  404dd0:	6836      	ldr	r6, [r6, #0]
  404dd2:	e7f7      	b.n	404dc4 <__sfp+0x14>
  404dd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  404dd8:	b16d      	cbz	r5, 404df6 <__sfp+0x46>
  404dda:	3468      	adds	r4, #104	; 0x68
  404ddc:	e7f4      	b.n	404dc8 <__sfp+0x18>
  404dde:	2104      	movs	r1, #4
  404de0:	4638      	mov	r0, r7
  404de2:	f7ff ff9f 	bl	404d24 <__sfmoreglue>
  404de6:	6030      	str	r0, [r6, #0]
  404de8:	2800      	cmp	r0, #0
  404dea:	d1f1      	bne.n	404dd0 <__sfp+0x20>
  404dec:	230c      	movs	r3, #12
  404dee:	603b      	str	r3, [r7, #0]
  404df0:	4604      	mov	r4, r0
  404df2:	4620      	mov	r0, r4
  404df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404dfa:	81e3      	strh	r3, [r4, #14]
  404dfc:	2301      	movs	r3, #1
  404dfe:	81a3      	strh	r3, [r4, #12]
  404e00:	6665      	str	r5, [r4, #100]	; 0x64
  404e02:	6025      	str	r5, [r4, #0]
  404e04:	60a5      	str	r5, [r4, #8]
  404e06:	6065      	str	r5, [r4, #4]
  404e08:	6125      	str	r5, [r4, #16]
  404e0a:	6165      	str	r5, [r4, #20]
  404e0c:	61a5      	str	r5, [r4, #24]
  404e0e:	2208      	movs	r2, #8
  404e10:	4629      	mov	r1, r5
  404e12:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  404e16:	f7fe fb0c 	bl	403432 <memset>
  404e1a:	6365      	str	r5, [r4, #52]	; 0x34
  404e1c:	63a5      	str	r5, [r4, #56]	; 0x38
  404e1e:	64a5      	str	r5, [r4, #72]	; 0x48
  404e20:	64e5      	str	r5, [r4, #76]	; 0x4c
  404e22:	e7e6      	b.n	404df2 <__sfp+0x42>
  404e24:	00406334 	.word	0x00406334

00404e28 <_fwalk_reent>:
  404e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404e2c:	4680      	mov	r8, r0
  404e2e:	4689      	mov	r9, r1
  404e30:	f100 0448 	add.w	r4, r0, #72	; 0x48
  404e34:	2600      	movs	r6, #0
  404e36:	b914      	cbnz	r4, 404e3e <_fwalk_reent+0x16>
  404e38:	4630      	mov	r0, r6
  404e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404e3e:	68a5      	ldr	r5, [r4, #8]
  404e40:	6867      	ldr	r7, [r4, #4]
  404e42:	3f01      	subs	r7, #1
  404e44:	d501      	bpl.n	404e4a <_fwalk_reent+0x22>
  404e46:	6824      	ldr	r4, [r4, #0]
  404e48:	e7f5      	b.n	404e36 <_fwalk_reent+0xe>
  404e4a:	89ab      	ldrh	r3, [r5, #12]
  404e4c:	2b01      	cmp	r3, #1
  404e4e:	d907      	bls.n	404e60 <_fwalk_reent+0x38>
  404e50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  404e54:	3301      	adds	r3, #1
  404e56:	d003      	beq.n	404e60 <_fwalk_reent+0x38>
  404e58:	4629      	mov	r1, r5
  404e5a:	4640      	mov	r0, r8
  404e5c:	47c8      	blx	r9
  404e5e:	4306      	orrs	r6, r0
  404e60:	3568      	adds	r5, #104	; 0x68
  404e62:	e7ee      	b.n	404e42 <_fwalk_reent+0x1a>

00404e64 <_localeconv_r>:
  404e64:	4b04      	ldr	r3, [pc, #16]	; (404e78 <_localeconv_r+0x14>)
  404e66:	681b      	ldr	r3, [r3, #0]
  404e68:	6a18      	ldr	r0, [r3, #32]
  404e6a:	4b04      	ldr	r3, [pc, #16]	; (404e7c <_localeconv_r+0x18>)
  404e6c:	2800      	cmp	r0, #0
  404e6e:	bf08      	it	eq
  404e70:	4618      	moveq	r0, r3
  404e72:	30f0      	adds	r0, #240	; 0xf0
  404e74:	4770      	bx	lr
  404e76:	bf00      	nop
  404e78:	20400048 	.word	0x20400048
  404e7c:	204000ac 	.word	0x204000ac

00404e80 <__swhatbuf_r>:
  404e80:	b570      	push	{r4, r5, r6, lr}
  404e82:	460e      	mov	r6, r1
  404e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404e88:	2900      	cmp	r1, #0
  404e8a:	b090      	sub	sp, #64	; 0x40
  404e8c:	4614      	mov	r4, r2
  404e8e:	461d      	mov	r5, r3
  404e90:	da07      	bge.n	404ea2 <__swhatbuf_r+0x22>
  404e92:	2300      	movs	r3, #0
  404e94:	602b      	str	r3, [r5, #0]
  404e96:	89b3      	ldrh	r3, [r6, #12]
  404e98:	061a      	lsls	r2, r3, #24
  404e9a:	d410      	bmi.n	404ebe <__swhatbuf_r+0x3e>
  404e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404ea0:	e00e      	b.n	404ec0 <__swhatbuf_r+0x40>
  404ea2:	aa01      	add	r2, sp, #4
  404ea4:	f000 feaa 	bl	405bfc <_fstat_r>
  404ea8:	2800      	cmp	r0, #0
  404eaa:	dbf2      	blt.n	404e92 <__swhatbuf_r+0x12>
  404eac:	9a02      	ldr	r2, [sp, #8]
  404eae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404eb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  404eb6:	425a      	negs	r2, r3
  404eb8:	415a      	adcs	r2, r3
  404eba:	602a      	str	r2, [r5, #0]
  404ebc:	e7ee      	b.n	404e9c <__swhatbuf_r+0x1c>
  404ebe:	2340      	movs	r3, #64	; 0x40
  404ec0:	2000      	movs	r0, #0
  404ec2:	6023      	str	r3, [r4, #0]
  404ec4:	b010      	add	sp, #64	; 0x40
  404ec6:	bd70      	pop	{r4, r5, r6, pc}

00404ec8 <__smakebuf_r>:
  404ec8:	898b      	ldrh	r3, [r1, #12]
  404eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  404ecc:	079d      	lsls	r5, r3, #30
  404ece:	4606      	mov	r6, r0
  404ed0:	460c      	mov	r4, r1
  404ed2:	d507      	bpl.n	404ee4 <__smakebuf_r+0x1c>
  404ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
  404ed8:	6023      	str	r3, [r4, #0]
  404eda:	6123      	str	r3, [r4, #16]
  404edc:	2301      	movs	r3, #1
  404ede:	6163      	str	r3, [r4, #20]
  404ee0:	b002      	add	sp, #8
  404ee2:	bd70      	pop	{r4, r5, r6, pc}
  404ee4:	ab01      	add	r3, sp, #4
  404ee6:	466a      	mov	r2, sp
  404ee8:	f7ff ffca 	bl	404e80 <__swhatbuf_r>
  404eec:	9900      	ldr	r1, [sp, #0]
  404eee:	4605      	mov	r5, r0
  404ef0:	4630      	mov	r0, r6
  404ef2:	f000 fbb1 	bl	405658 <_malloc_r>
  404ef6:	b948      	cbnz	r0, 404f0c <__smakebuf_r+0x44>
  404ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404efc:	059a      	lsls	r2, r3, #22
  404efe:	d4ef      	bmi.n	404ee0 <__smakebuf_r+0x18>
  404f00:	f023 0303 	bic.w	r3, r3, #3
  404f04:	f043 0302 	orr.w	r3, r3, #2
  404f08:	81a3      	strh	r3, [r4, #12]
  404f0a:	e7e3      	b.n	404ed4 <__smakebuf_r+0xc>
  404f0c:	4b0d      	ldr	r3, [pc, #52]	; (404f44 <__smakebuf_r+0x7c>)
  404f0e:	62b3      	str	r3, [r6, #40]	; 0x28
  404f10:	89a3      	ldrh	r3, [r4, #12]
  404f12:	6020      	str	r0, [r4, #0]
  404f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404f18:	81a3      	strh	r3, [r4, #12]
  404f1a:	9b00      	ldr	r3, [sp, #0]
  404f1c:	6163      	str	r3, [r4, #20]
  404f1e:	9b01      	ldr	r3, [sp, #4]
  404f20:	6120      	str	r0, [r4, #16]
  404f22:	b15b      	cbz	r3, 404f3c <__smakebuf_r+0x74>
  404f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404f28:	4630      	mov	r0, r6
  404f2a:	f000 fe79 	bl	405c20 <_isatty_r>
  404f2e:	b128      	cbz	r0, 404f3c <__smakebuf_r+0x74>
  404f30:	89a3      	ldrh	r3, [r4, #12]
  404f32:	f023 0303 	bic.w	r3, r3, #3
  404f36:	f043 0301 	orr.w	r3, r3, #1
  404f3a:	81a3      	strh	r3, [r4, #12]
  404f3c:	89a3      	ldrh	r3, [r4, #12]
  404f3e:	431d      	orrs	r5, r3
  404f40:	81a5      	strh	r5, [r4, #12]
  404f42:	e7cd      	b.n	404ee0 <__smakebuf_r+0x18>
  404f44:	00404cd1 	.word	0x00404cd1

00404f48 <malloc>:
  404f48:	4b02      	ldr	r3, [pc, #8]	; (404f54 <malloc+0xc>)
  404f4a:	4601      	mov	r1, r0
  404f4c:	6818      	ldr	r0, [r3, #0]
  404f4e:	f000 bb83 	b.w	405658 <_malloc_r>
  404f52:	bf00      	nop
  404f54:	20400048 	.word	0x20400048
	...

00404f60 <memchr>:
  404f60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404f64:	2a10      	cmp	r2, #16
  404f66:	db2b      	blt.n	404fc0 <memchr+0x60>
  404f68:	f010 0f07 	tst.w	r0, #7
  404f6c:	d008      	beq.n	404f80 <memchr+0x20>
  404f6e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404f72:	3a01      	subs	r2, #1
  404f74:	428b      	cmp	r3, r1
  404f76:	d02d      	beq.n	404fd4 <memchr+0x74>
  404f78:	f010 0f07 	tst.w	r0, #7
  404f7c:	b342      	cbz	r2, 404fd0 <memchr+0x70>
  404f7e:	d1f6      	bne.n	404f6e <memchr+0xe>
  404f80:	b4f0      	push	{r4, r5, r6, r7}
  404f82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404f86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404f8a:	f022 0407 	bic.w	r4, r2, #7
  404f8e:	f07f 0700 	mvns.w	r7, #0
  404f92:	2300      	movs	r3, #0
  404f94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404f98:	3c08      	subs	r4, #8
  404f9a:	ea85 0501 	eor.w	r5, r5, r1
  404f9e:	ea86 0601 	eor.w	r6, r6, r1
  404fa2:	fa85 f547 	uadd8	r5, r5, r7
  404fa6:	faa3 f587 	sel	r5, r3, r7
  404faa:	fa86 f647 	uadd8	r6, r6, r7
  404fae:	faa5 f687 	sel	r6, r5, r7
  404fb2:	b98e      	cbnz	r6, 404fd8 <memchr+0x78>
  404fb4:	d1ee      	bne.n	404f94 <memchr+0x34>
  404fb6:	bcf0      	pop	{r4, r5, r6, r7}
  404fb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404fbc:	f002 0207 	and.w	r2, r2, #7
  404fc0:	b132      	cbz	r2, 404fd0 <memchr+0x70>
  404fc2:	f810 3b01 	ldrb.w	r3, [r0], #1
  404fc6:	3a01      	subs	r2, #1
  404fc8:	ea83 0301 	eor.w	r3, r3, r1
  404fcc:	b113      	cbz	r3, 404fd4 <memchr+0x74>
  404fce:	d1f8      	bne.n	404fc2 <memchr+0x62>
  404fd0:	2000      	movs	r0, #0
  404fd2:	4770      	bx	lr
  404fd4:	3801      	subs	r0, #1
  404fd6:	4770      	bx	lr
  404fd8:	2d00      	cmp	r5, #0
  404fda:	bf06      	itte	eq
  404fdc:	4635      	moveq	r5, r6
  404fde:	3803      	subeq	r0, #3
  404fe0:	3807      	subne	r0, #7
  404fe2:	f015 0f01 	tst.w	r5, #1
  404fe6:	d107      	bne.n	404ff8 <memchr+0x98>
  404fe8:	3001      	adds	r0, #1
  404fea:	f415 7f80 	tst.w	r5, #256	; 0x100
  404fee:	bf02      	ittt	eq
  404ff0:	3001      	addeq	r0, #1
  404ff2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404ff6:	3001      	addeq	r0, #1
  404ff8:	bcf0      	pop	{r4, r5, r6, r7}
  404ffa:	3801      	subs	r0, #1
  404ffc:	4770      	bx	lr
  404ffe:	bf00      	nop

00405000 <_Balloc>:
  405000:	b570      	push	{r4, r5, r6, lr}
  405002:	6a45      	ldr	r5, [r0, #36]	; 0x24
  405004:	4604      	mov	r4, r0
  405006:	460e      	mov	r6, r1
  405008:	b93d      	cbnz	r5, 40501a <_Balloc+0x1a>
  40500a:	2010      	movs	r0, #16
  40500c:	f7ff ff9c 	bl	404f48 <malloc>
  405010:	6260      	str	r0, [r4, #36]	; 0x24
  405012:	6045      	str	r5, [r0, #4]
  405014:	6085      	str	r5, [r0, #8]
  405016:	6005      	str	r5, [r0, #0]
  405018:	60c5      	str	r5, [r0, #12]
  40501a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40501c:	68eb      	ldr	r3, [r5, #12]
  40501e:	b183      	cbz	r3, 405042 <_Balloc+0x42>
  405020:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405022:	68db      	ldr	r3, [r3, #12]
  405024:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  405028:	b9b8      	cbnz	r0, 40505a <_Balloc+0x5a>
  40502a:	2101      	movs	r1, #1
  40502c:	fa01 f506 	lsl.w	r5, r1, r6
  405030:	1d6a      	adds	r2, r5, #5
  405032:	0092      	lsls	r2, r2, #2
  405034:	4620      	mov	r0, r4
  405036:	f000 fab3 	bl	4055a0 <_calloc_r>
  40503a:	b160      	cbz	r0, 405056 <_Balloc+0x56>
  40503c:	6046      	str	r6, [r0, #4]
  40503e:	6085      	str	r5, [r0, #8]
  405040:	e00e      	b.n	405060 <_Balloc+0x60>
  405042:	2221      	movs	r2, #33	; 0x21
  405044:	2104      	movs	r1, #4
  405046:	4620      	mov	r0, r4
  405048:	f000 faaa 	bl	4055a0 <_calloc_r>
  40504c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40504e:	60e8      	str	r0, [r5, #12]
  405050:	68db      	ldr	r3, [r3, #12]
  405052:	2b00      	cmp	r3, #0
  405054:	d1e4      	bne.n	405020 <_Balloc+0x20>
  405056:	2000      	movs	r0, #0
  405058:	bd70      	pop	{r4, r5, r6, pc}
  40505a:	6802      	ldr	r2, [r0, #0]
  40505c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  405060:	2300      	movs	r3, #0
  405062:	6103      	str	r3, [r0, #16]
  405064:	60c3      	str	r3, [r0, #12]
  405066:	bd70      	pop	{r4, r5, r6, pc}

00405068 <_Bfree>:
  405068:	b570      	push	{r4, r5, r6, lr}
  40506a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40506c:	4606      	mov	r6, r0
  40506e:	460d      	mov	r5, r1
  405070:	b93c      	cbnz	r4, 405082 <_Bfree+0x1a>
  405072:	2010      	movs	r0, #16
  405074:	f7ff ff68 	bl	404f48 <malloc>
  405078:	6270      	str	r0, [r6, #36]	; 0x24
  40507a:	6044      	str	r4, [r0, #4]
  40507c:	6084      	str	r4, [r0, #8]
  40507e:	6004      	str	r4, [r0, #0]
  405080:	60c4      	str	r4, [r0, #12]
  405082:	b13d      	cbz	r5, 405094 <_Bfree+0x2c>
  405084:	6a73      	ldr	r3, [r6, #36]	; 0x24
  405086:	686a      	ldr	r2, [r5, #4]
  405088:	68db      	ldr	r3, [r3, #12]
  40508a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40508e:	6029      	str	r1, [r5, #0]
  405090:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  405094:	bd70      	pop	{r4, r5, r6, pc}

00405096 <__multadd>:
  405096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40509a:	690d      	ldr	r5, [r1, #16]
  40509c:	461f      	mov	r7, r3
  40509e:	4606      	mov	r6, r0
  4050a0:	460c      	mov	r4, r1
  4050a2:	f101 0e14 	add.w	lr, r1, #20
  4050a6:	2300      	movs	r3, #0
  4050a8:	f8de 0000 	ldr.w	r0, [lr]
  4050ac:	b281      	uxth	r1, r0
  4050ae:	fb02 7101 	mla	r1, r2, r1, r7
  4050b2:	0c0f      	lsrs	r7, r1, #16
  4050b4:	0c00      	lsrs	r0, r0, #16
  4050b6:	fb02 7000 	mla	r0, r2, r0, r7
  4050ba:	b289      	uxth	r1, r1
  4050bc:	3301      	adds	r3, #1
  4050be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  4050c2:	429d      	cmp	r5, r3
  4050c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
  4050c8:	f84e 1b04 	str.w	r1, [lr], #4
  4050cc:	dcec      	bgt.n	4050a8 <__multadd+0x12>
  4050ce:	b1d7      	cbz	r7, 405106 <__multadd+0x70>
  4050d0:	68a3      	ldr	r3, [r4, #8]
  4050d2:	429d      	cmp	r5, r3
  4050d4:	db12      	blt.n	4050fc <__multadd+0x66>
  4050d6:	6861      	ldr	r1, [r4, #4]
  4050d8:	4630      	mov	r0, r6
  4050da:	3101      	adds	r1, #1
  4050dc:	f7ff ff90 	bl	405000 <_Balloc>
  4050e0:	6922      	ldr	r2, [r4, #16]
  4050e2:	3202      	adds	r2, #2
  4050e4:	f104 010c 	add.w	r1, r4, #12
  4050e8:	4680      	mov	r8, r0
  4050ea:	0092      	lsls	r2, r2, #2
  4050ec:	300c      	adds	r0, #12
  4050ee:	f7fe f995 	bl	40341c <memcpy>
  4050f2:	4621      	mov	r1, r4
  4050f4:	4630      	mov	r0, r6
  4050f6:	f7ff ffb7 	bl	405068 <_Bfree>
  4050fa:	4644      	mov	r4, r8
  4050fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  405100:	3501      	adds	r5, #1
  405102:	615f      	str	r7, [r3, #20]
  405104:	6125      	str	r5, [r4, #16]
  405106:	4620      	mov	r0, r4
  405108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040510c <__hi0bits>:
  40510c:	0c02      	lsrs	r2, r0, #16
  40510e:	0412      	lsls	r2, r2, #16
  405110:	4603      	mov	r3, r0
  405112:	b9b2      	cbnz	r2, 405142 <__hi0bits+0x36>
  405114:	0403      	lsls	r3, r0, #16
  405116:	2010      	movs	r0, #16
  405118:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40511c:	bf04      	itt	eq
  40511e:	021b      	lsleq	r3, r3, #8
  405120:	3008      	addeq	r0, #8
  405122:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405126:	bf04      	itt	eq
  405128:	011b      	lsleq	r3, r3, #4
  40512a:	3004      	addeq	r0, #4
  40512c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  405130:	bf04      	itt	eq
  405132:	009b      	lsleq	r3, r3, #2
  405134:	3002      	addeq	r0, #2
  405136:	2b00      	cmp	r3, #0
  405138:	db06      	blt.n	405148 <__hi0bits+0x3c>
  40513a:	005b      	lsls	r3, r3, #1
  40513c:	d503      	bpl.n	405146 <__hi0bits+0x3a>
  40513e:	3001      	adds	r0, #1
  405140:	4770      	bx	lr
  405142:	2000      	movs	r0, #0
  405144:	e7e8      	b.n	405118 <__hi0bits+0xc>
  405146:	2020      	movs	r0, #32
  405148:	4770      	bx	lr

0040514a <__lo0bits>:
  40514a:	6803      	ldr	r3, [r0, #0]
  40514c:	f013 0207 	ands.w	r2, r3, #7
  405150:	4601      	mov	r1, r0
  405152:	d00b      	beq.n	40516c <__lo0bits+0x22>
  405154:	07da      	lsls	r2, r3, #31
  405156:	d423      	bmi.n	4051a0 <__lo0bits+0x56>
  405158:	0798      	lsls	r0, r3, #30
  40515a:	bf49      	itett	mi
  40515c:	085b      	lsrmi	r3, r3, #1
  40515e:	089b      	lsrpl	r3, r3, #2
  405160:	2001      	movmi	r0, #1
  405162:	600b      	strmi	r3, [r1, #0]
  405164:	bf5c      	itt	pl
  405166:	600b      	strpl	r3, [r1, #0]
  405168:	2002      	movpl	r0, #2
  40516a:	4770      	bx	lr
  40516c:	b298      	uxth	r0, r3
  40516e:	b9a8      	cbnz	r0, 40519c <__lo0bits+0x52>
  405170:	0c1b      	lsrs	r3, r3, #16
  405172:	2010      	movs	r0, #16
  405174:	f013 0fff 	tst.w	r3, #255	; 0xff
  405178:	bf04      	itt	eq
  40517a:	0a1b      	lsreq	r3, r3, #8
  40517c:	3008      	addeq	r0, #8
  40517e:	071a      	lsls	r2, r3, #28
  405180:	bf04      	itt	eq
  405182:	091b      	lsreq	r3, r3, #4
  405184:	3004      	addeq	r0, #4
  405186:	079a      	lsls	r2, r3, #30
  405188:	bf04      	itt	eq
  40518a:	089b      	lsreq	r3, r3, #2
  40518c:	3002      	addeq	r0, #2
  40518e:	07da      	lsls	r2, r3, #31
  405190:	d402      	bmi.n	405198 <__lo0bits+0x4e>
  405192:	085b      	lsrs	r3, r3, #1
  405194:	d006      	beq.n	4051a4 <__lo0bits+0x5a>
  405196:	3001      	adds	r0, #1
  405198:	600b      	str	r3, [r1, #0]
  40519a:	4770      	bx	lr
  40519c:	4610      	mov	r0, r2
  40519e:	e7e9      	b.n	405174 <__lo0bits+0x2a>
  4051a0:	2000      	movs	r0, #0
  4051a2:	4770      	bx	lr
  4051a4:	2020      	movs	r0, #32
  4051a6:	4770      	bx	lr

004051a8 <__i2b>:
  4051a8:	b510      	push	{r4, lr}
  4051aa:	460c      	mov	r4, r1
  4051ac:	2101      	movs	r1, #1
  4051ae:	f7ff ff27 	bl	405000 <_Balloc>
  4051b2:	2201      	movs	r2, #1
  4051b4:	6144      	str	r4, [r0, #20]
  4051b6:	6102      	str	r2, [r0, #16]
  4051b8:	bd10      	pop	{r4, pc}

004051ba <__multiply>:
  4051ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4051be:	4614      	mov	r4, r2
  4051c0:	690a      	ldr	r2, [r1, #16]
  4051c2:	6923      	ldr	r3, [r4, #16]
  4051c4:	429a      	cmp	r2, r3
  4051c6:	bfb8      	it	lt
  4051c8:	460b      	movlt	r3, r1
  4051ca:	4689      	mov	r9, r1
  4051cc:	bfbc      	itt	lt
  4051ce:	46a1      	movlt	r9, r4
  4051d0:	461c      	movlt	r4, r3
  4051d2:	f8d9 7010 	ldr.w	r7, [r9, #16]
  4051d6:	f8d4 a010 	ldr.w	sl, [r4, #16]
  4051da:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4051de:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4051e2:	eb07 060a 	add.w	r6, r7, sl
  4051e6:	429e      	cmp	r6, r3
  4051e8:	bfc8      	it	gt
  4051ea:	3101      	addgt	r1, #1
  4051ec:	f7ff ff08 	bl	405000 <_Balloc>
  4051f0:	f100 0514 	add.w	r5, r0, #20
  4051f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  4051f8:	462b      	mov	r3, r5
  4051fa:	2200      	movs	r2, #0
  4051fc:	4543      	cmp	r3, r8
  4051fe:	d316      	bcc.n	40522e <__multiply+0x74>
  405200:	f104 0214 	add.w	r2, r4, #20
  405204:	f109 0114 	add.w	r1, r9, #20
  405208:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  40520c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  405210:	9301      	str	r3, [sp, #4]
  405212:	9c01      	ldr	r4, [sp, #4]
  405214:	4294      	cmp	r4, r2
  405216:	4613      	mov	r3, r2
  405218:	d80c      	bhi.n	405234 <__multiply+0x7a>
  40521a:	2e00      	cmp	r6, #0
  40521c:	dd03      	ble.n	405226 <__multiply+0x6c>
  40521e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  405222:	2b00      	cmp	r3, #0
  405224:	d054      	beq.n	4052d0 <__multiply+0x116>
  405226:	6106      	str	r6, [r0, #16]
  405228:	b003      	add	sp, #12
  40522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40522e:	f843 2b04 	str.w	r2, [r3], #4
  405232:	e7e3      	b.n	4051fc <__multiply+0x42>
  405234:	f8b3 a000 	ldrh.w	sl, [r3]
  405238:	3204      	adds	r2, #4
  40523a:	f1ba 0f00 	cmp.w	sl, #0
  40523e:	d020      	beq.n	405282 <__multiply+0xc8>
  405240:	46ae      	mov	lr, r5
  405242:	4689      	mov	r9, r1
  405244:	f04f 0c00 	mov.w	ip, #0
  405248:	f859 4b04 	ldr.w	r4, [r9], #4
  40524c:	f8be b000 	ldrh.w	fp, [lr]
  405250:	b2a3      	uxth	r3, r4
  405252:	fb0a b303 	mla	r3, sl, r3, fp
  405256:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  40525a:	f8de 4000 	ldr.w	r4, [lr]
  40525e:	4463      	add	r3, ip
  405260:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  405264:	fb0a c40b 	mla	r4, sl, fp, ip
  405268:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40526c:	b29b      	uxth	r3, r3
  40526e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  405272:	454f      	cmp	r7, r9
  405274:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  405278:	f84e 3b04 	str.w	r3, [lr], #4
  40527c:	d8e4      	bhi.n	405248 <__multiply+0x8e>
  40527e:	f8ce c000 	str.w	ip, [lr]
  405282:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  405286:	f1b9 0f00 	cmp.w	r9, #0
  40528a:	d01f      	beq.n	4052cc <__multiply+0x112>
  40528c:	682b      	ldr	r3, [r5, #0]
  40528e:	46ae      	mov	lr, r5
  405290:	468c      	mov	ip, r1
  405292:	f04f 0a00 	mov.w	sl, #0
  405296:	f8bc 4000 	ldrh.w	r4, [ip]
  40529a:	f8be b002 	ldrh.w	fp, [lr, #2]
  40529e:	fb09 b404 	mla	r4, r9, r4, fp
  4052a2:	44a2      	add	sl, r4
  4052a4:	b29b      	uxth	r3, r3
  4052a6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  4052aa:	f84e 3b04 	str.w	r3, [lr], #4
  4052ae:	f85c 3b04 	ldr.w	r3, [ip], #4
  4052b2:	f8be 4000 	ldrh.w	r4, [lr]
  4052b6:	0c1b      	lsrs	r3, r3, #16
  4052b8:	fb09 4303 	mla	r3, r9, r3, r4
  4052bc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  4052c0:	4567      	cmp	r7, ip
  4052c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4052c6:	d8e6      	bhi.n	405296 <__multiply+0xdc>
  4052c8:	f8ce 3000 	str.w	r3, [lr]
  4052cc:	3504      	adds	r5, #4
  4052ce:	e7a0      	b.n	405212 <__multiply+0x58>
  4052d0:	3e01      	subs	r6, #1
  4052d2:	e7a2      	b.n	40521a <__multiply+0x60>

004052d4 <__pow5mult>:
  4052d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4052d8:	4615      	mov	r5, r2
  4052da:	f012 0203 	ands.w	r2, r2, #3
  4052de:	4606      	mov	r6, r0
  4052e0:	460f      	mov	r7, r1
  4052e2:	d007      	beq.n	4052f4 <__pow5mult+0x20>
  4052e4:	3a01      	subs	r2, #1
  4052e6:	4c21      	ldr	r4, [pc, #132]	; (40536c <__pow5mult+0x98>)
  4052e8:	2300      	movs	r3, #0
  4052ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  4052ee:	f7ff fed2 	bl	405096 <__multadd>
  4052f2:	4607      	mov	r7, r0
  4052f4:	10ad      	asrs	r5, r5, #2
  4052f6:	d035      	beq.n	405364 <__pow5mult+0x90>
  4052f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
  4052fa:	b93c      	cbnz	r4, 40530c <__pow5mult+0x38>
  4052fc:	2010      	movs	r0, #16
  4052fe:	f7ff fe23 	bl	404f48 <malloc>
  405302:	6270      	str	r0, [r6, #36]	; 0x24
  405304:	6044      	str	r4, [r0, #4]
  405306:	6084      	str	r4, [r0, #8]
  405308:	6004      	str	r4, [r0, #0]
  40530a:	60c4      	str	r4, [r0, #12]
  40530c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  405310:	f8d8 4008 	ldr.w	r4, [r8, #8]
  405314:	b94c      	cbnz	r4, 40532a <__pow5mult+0x56>
  405316:	f240 2171 	movw	r1, #625	; 0x271
  40531a:	4630      	mov	r0, r6
  40531c:	f7ff ff44 	bl	4051a8 <__i2b>
  405320:	2300      	movs	r3, #0
  405322:	f8c8 0008 	str.w	r0, [r8, #8]
  405326:	4604      	mov	r4, r0
  405328:	6003      	str	r3, [r0, #0]
  40532a:	f04f 0800 	mov.w	r8, #0
  40532e:	07eb      	lsls	r3, r5, #31
  405330:	d50a      	bpl.n	405348 <__pow5mult+0x74>
  405332:	4639      	mov	r1, r7
  405334:	4622      	mov	r2, r4
  405336:	4630      	mov	r0, r6
  405338:	f7ff ff3f 	bl	4051ba <__multiply>
  40533c:	4639      	mov	r1, r7
  40533e:	4681      	mov	r9, r0
  405340:	4630      	mov	r0, r6
  405342:	f7ff fe91 	bl	405068 <_Bfree>
  405346:	464f      	mov	r7, r9
  405348:	106d      	asrs	r5, r5, #1
  40534a:	d00b      	beq.n	405364 <__pow5mult+0x90>
  40534c:	6820      	ldr	r0, [r4, #0]
  40534e:	b938      	cbnz	r0, 405360 <__pow5mult+0x8c>
  405350:	4622      	mov	r2, r4
  405352:	4621      	mov	r1, r4
  405354:	4630      	mov	r0, r6
  405356:	f7ff ff30 	bl	4051ba <__multiply>
  40535a:	6020      	str	r0, [r4, #0]
  40535c:	f8c0 8000 	str.w	r8, [r0]
  405360:	4604      	mov	r4, r0
  405362:	e7e4      	b.n	40532e <__pow5mult+0x5a>
  405364:	4638      	mov	r0, r7
  405366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40536a:	bf00      	nop
  40536c:	004064d0 	.word	0x004064d0

00405370 <__lshift>:
  405370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405374:	460c      	mov	r4, r1
  405376:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40537a:	6923      	ldr	r3, [r4, #16]
  40537c:	6849      	ldr	r1, [r1, #4]
  40537e:	eb0a 0903 	add.w	r9, sl, r3
  405382:	68a3      	ldr	r3, [r4, #8]
  405384:	4607      	mov	r7, r0
  405386:	4616      	mov	r6, r2
  405388:	f109 0501 	add.w	r5, r9, #1
  40538c:	42ab      	cmp	r3, r5
  40538e:	db31      	blt.n	4053f4 <__lshift+0x84>
  405390:	4638      	mov	r0, r7
  405392:	f7ff fe35 	bl	405000 <_Balloc>
  405396:	2200      	movs	r2, #0
  405398:	4680      	mov	r8, r0
  40539a:	f100 0314 	add.w	r3, r0, #20
  40539e:	4611      	mov	r1, r2
  4053a0:	4552      	cmp	r2, sl
  4053a2:	db2a      	blt.n	4053fa <__lshift+0x8a>
  4053a4:	6920      	ldr	r0, [r4, #16]
  4053a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  4053aa:	f104 0114 	add.w	r1, r4, #20
  4053ae:	f016 021f 	ands.w	r2, r6, #31
  4053b2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  4053b6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  4053ba:	d022      	beq.n	405402 <__lshift+0x92>
  4053bc:	f1c2 0c20 	rsb	ip, r2, #32
  4053c0:	2000      	movs	r0, #0
  4053c2:	680e      	ldr	r6, [r1, #0]
  4053c4:	4096      	lsls	r6, r2
  4053c6:	4330      	orrs	r0, r6
  4053c8:	f843 0b04 	str.w	r0, [r3], #4
  4053cc:	f851 0b04 	ldr.w	r0, [r1], #4
  4053d0:	458e      	cmp	lr, r1
  4053d2:	fa20 f00c 	lsr.w	r0, r0, ip
  4053d6:	d8f4      	bhi.n	4053c2 <__lshift+0x52>
  4053d8:	6018      	str	r0, [r3, #0]
  4053da:	b108      	cbz	r0, 4053e0 <__lshift+0x70>
  4053dc:	f109 0502 	add.w	r5, r9, #2
  4053e0:	3d01      	subs	r5, #1
  4053e2:	4638      	mov	r0, r7
  4053e4:	f8c8 5010 	str.w	r5, [r8, #16]
  4053e8:	4621      	mov	r1, r4
  4053ea:	f7ff fe3d 	bl	405068 <_Bfree>
  4053ee:	4640      	mov	r0, r8
  4053f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053f4:	3101      	adds	r1, #1
  4053f6:	005b      	lsls	r3, r3, #1
  4053f8:	e7c8      	b.n	40538c <__lshift+0x1c>
  4053fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4053fe:	3201      	adds	r2, #1
  405400:	e7ce      	b.n	4053a0 <__lshift+0x30>
  405402:	3b04      	subs	r3, #4
  405404:	f851 2b04 	ldr.w	r2, [r1], #4
  405408:	f843 2f04 	str.w	r2, [r3, #4]!
  40540c:	458e      	cmp	lr, r1
  40540e:	d8f9      	bhi.n	405404 <__lshift+0x94>
  405410:	e7e6      	b.n	4053e0 <__lshift+0x70>

00405412 <__mcmp>:
  405412:	6903      	ldr	r3, [r0, #16]
  405414:	690a      	ldr	r2, [r1, #16]
  405416:	1a9b      	subs	r3, r3, r2
  405418:	b530      	push	{r4, r5, lr}
  40541a:	d10c      	bne.n	405436 <__mcmp+0x24>
  40541c:	0092      	lsls	r2, r2, #2
  40541e:	3014      	adds	r0, #20
  405420:	3114      	adds	r1, #20
  405422:	1884      	adds	r4, r0, r2
  405424:	4411      	add	r1, r2
  405426:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40542a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40542e:	4295      	cmp	r5, r2
  405430:	d003      	beq.n	40543a <__mcmp+0x28>
  405432:	d305      	bcc.n	405440 <__mcmp+0x2e>
  405434:	2301      	movs	r3, #1
  405436:	4618      	mov	r0, r3
  405438:	bd30      	pop	{r4, r5, pc}
  40543a:	42a0      	cmp	r0, r4
  40543c:	d3f3      	bcc.n	405426 <__mcmp+0x14>
  40543e:	e7fa      	b.n	405436 <__mcmp+0x24>
  405440:	f04f 33ff 	mov.w	r3, #4294967295
  405444:	e7f7      	b.n	405436 <__mcmp+0x24>

00405446 <__mdiff>:
  405446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40544a:	460d      	mov	r5, r1
  40544c:	4607      	mov	r7, r0
  40544e:	4611      	mov	r1, r2
  405450:	4628      	mov	r0, r5
  405452:	4614      	mov	r4, r2
  405454:	f7ff ffdd 	bl	405412 <__mcmp>
  405458:	1e06      	subs	r6, r0, #0
  40545a:	d108      	bne.n	40546e <__mdiff+0x28>
  40545c:	4631      	mov	r1, r6
  40545e:	4638      	mov	r0, r7
  405460:	f7ff fdce 	bl	405000 <_Balloc>
  405464:	2301      	movs	r3, #1
  405466:	6103      	str	r3, [r0, #16]
  405468:	6146      	str	r6, [r0, #20]
  40546a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40546e:	bfa4      	itt	ge
  405470:	4623      	movge	r3, r4
  405472:	462c      	movge	r4, r5
  405474:	4638      	mov	r0, r7
  405476:	6861      	ldr	r1, [r4, #4]
  405478:	bfa6      	itte	ge
  40547a:	461d      	movge	r5, r3
  40547c:	2600      	movge	r6, #0
  40547e:	2601      	movlt	r6, #1
  405480:	f7ff fdbe 	bl	405000 <_Balloc>
  405484:	692b      	ldr	r3, [r5, #16]
  405486:	60c6      	str	r6, [r0, #12]
  405488:	6926      	ldr	r6, [r4, #16]
  40548a:	f105 0914 	add.w	r9, r5, #20
  40548e:	f104 0214 	add.w	r2, r4, #20
  405492:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  405496:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40549a:	f100 0514 	add.w	r5, r0, #20
  40549e:	f04f 0c00 	mov.w	ip, #0
  4054a2:	f852 ab04 	ldr.w	sl, [r2], #4
  4054a6:	f859 4b04 	ldr.w	r4, [r9], #4
  4054aa:	fa1c f18a 	uxtah	r1, ip, sl
  4054ae:	b2a3      	uxth	r3, r4
  4054b0:	1ac9      	subs	r1, r1, r3
  4054b2:	0c23      	lsrs	r3, r4, #16
  4054b4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  4054b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
  4054bc:	b289      	uxth	r1, r1
  4054be:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4054c2:	45c8      	cmp	r8, r9
  4054c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  4054c8:	4696      	mov	lr, r2
  4054ca:	f845 3b04 	str.w	r3, [r5], #4
  4054ce:	d8e8      	bhi.n	4054a2 <__mdiff+0x5c>
  4054d0:	45be      	cmp	lr, r7
  4054d2:	d305      	bcc.n	4054e0 <__mdiff+0x9a>
  4054d4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4054d8:	b18b      	cbz	r3, 4054fe <__mdiff+0xb8>
  4054da:	6106      	str	r6, [r0, #16]
  4054dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4054e0:	f85e 1b04 	ldr.w	r1, [lr], #4
  4054e4:	fa1c f381 	uxtah	r3, ip, r1
  4054e8:	141a      	asrs	r2, r3, #16
  4054ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  4054ee:	b29b      	uxth	r3, r3
  4054f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4054f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
  4054f8:	f845 3b04 	str.w	r3, [r5], #4
  4054fc:	e7e8      	b.n	4054d0 <__mdiff+0x8a>
  4054fe:	3e01      	subs	r6, #1
  405500:	e7e8      	b.n	4054d4 <__mdiff+0x8e>

00405502 <__d2b>:
  405502:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  405506:	2101      	movs	r1, #1
  405508:	461c      	mov	r4, r3
  40550a:	4690      	mov	r8, r2
  40550c:	9e08      	ldr	r6, [sp, #32]
  40550e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405510:	f7ff fd76 	bl	405000 <_Balloc>
  405514:	f3c4 0213 	ubfx	r2, r4, #0, #20
  405518:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40551c:	4607      	mov	r7, r0
  40551e:	bb34      	cbnz	r4, 40556e <__d2b+0x6c>
  405520:	9201      	str	r2, [sp, #4]
  405522:	f1b8 0f00 	cmp.w	r8, #0
  405526:	d027      	beq.n	405578 <__d2b+0x76>
  405528:	a802      	add	r0, sp, #8
  40552a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40552e:	f7ff fe0c 	bl	40514a <__lo0bits>
  405532:	9900      	ldr	r1, [sp, #0]
  405534:	b1f0      	cbz	r0, 405574 <__d2b+0x72>
  405536:	9a01      	ldr	r2, [sp, #4]
  405538:	f1c0 0320 	rsb	r3, r0, #32
  40553c:	fa02 f303 	lsl.w	r3, r2, r3
  405540:	430b      	orrs	r3, r1
  405542:	40c2      	lsrs	r2, r0
  405544:	617b      	str	r3, [r7, #20]
  405546:	9201      	str	r2, [sp, #4]
  405548:	9b01      	ldr	r3, [sp, #4]
  40554a:	61bb      	str	r3, [r7, #24]
  40554c:	2b00      	cmp	r3, #0
  40554e:	bf14      	ite	ne
  405550:	2102      	movne	r1, #2
  405552:	2101      	moveq	r1, #1
  405554:	6139      	str	r1, [r7, #16]
  405556:	b1c4      	cbz	r4, 40558a <__d2b+0x88>
  405558:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40555c:	4404      	add	r4, r0
  40555e:	6034      	str	r4, [r6, #0]
  405560:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405564:	6028      	str	r0, [r5, #0]
  405566:	4638      	mov	r0, r7
  405568:	b002      	add	sp, #8
  40556a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40556e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  405572:	e7d5      	b.n	405520 <__d2b+0x1e>
  405574:	6179      	str	r1, [r7, #20]
  405576:	e7e7      	b.n	405548 <__d2b+0x46>
  405578:	a801      	add	r0, sp, #4
  40557a:	f7ff fde6 	bl	40514a <__lo0bits>
  40557e:	9b01      	ldr	r3, [sp, #4]
  405580:	617b      	str	r3, [r7, #20]
  405582:	2101      	movs	r1, #1
  405584:	6139      	str	r1, [r7, #16]
  405586:	3020      	adds	r0, #32
  405588:	e7e5      	b.n	405556 <__d2b+0x54>
  40558a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40558e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405592:	6030      	str	r0, [r6, #0]
  405594:	6918      	ldr	r0, [r3, #16]
  405596:	f7ff fdb9 	bl	40510c <__hi0bits>
  40559a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40559e:	e7e1      	b.n	405564 <__d2b+0x62>

004055a0 <_calloc_r>:
  4055a0:	b538      	push	{r3, r4, r5, lr}
  4055a2:	fb02 f401 	mul.w	r4, r2, r1
  4055a6:	4621      	mov	r1, r4
  4055a8:	f000 f856 	bl	405658 <_malloc_r>
  4055ac:	4605      	mov	r5, r0
  4055ae:	b118      	cbz	r0, 4055b8 <_calloc_r+0x18>
  4055b0:	4622      	mov	r2, r4
  4055b2:	2100      	movs	r1, #0
  4055b4:	f7fd ff3d 	bl	403432 <memset>
  4055b8:	4628      	mov	r0, r5
  4055ba:	bd38      	pop	{r3, r4, r5, pc}

004055bc <_free_r>:
  4055bc:	b538      	push	{r3, r4, r5, lr}
  4055be:	4605      	mov	r5, r0
  4055c0:	2900      	cmp	r1, #0
  4055c2:	d045      	beq.n	405650 <_free_r+0x94>
  4055c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4055c8:	1f0c      	subs	r4, r1, #4
  4055ca:	2b00      	cmp	r3, #0
  4055cc:	bfb8      	it	lt
  4055ce:	18e4      	addlt	r4, r4, r3
  4055d0:	f000 fb5a 	bl	405c88 <__malloc_lock>
  4055d4:	4a1f      	ldr	r2, [pc, #124]	; (405654 <_free_r+0x98>)
  4055d6:	6813      	ldr	r3, [r2, #0]
  4055d8:	4610      	mov	r0, r2
  4055da:	b933      	cbnz	r3, 4055ea <_free_r+0x2e>
  4055dc:	6063      	str	r3, [r4, #4]
  4055de:	6014      	str	r4, [r2, #0]
  4055e0:	4628      	mov	r0, r5
  4055e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4055e6:	f000 bb50 	b.w	405c8a <__malloc_unlock>
  4055ea:	42a3      	cmp	r3, r4
  4055ec:	d90c      	bls.n	405608 <_free_r+0x4c>
  4055ee:	6821      	ldr	r1, [r4, #0]
  4055f0:	1862      	adds	r2, r4, r1
  4055f2:	4293      	cmp	r3, r2
  4055f4:	bf04      	itt	eq
  4055f6:	681a      	ldreq	r2, [r3, #0]
  4055f8:	685b      	ldreq	r3, [r3, #4]
  4055fa:	6063      	str	r3, [r4, #4]
  4055fc:	bf04      	itt	eq
  4055fe:	1852      	addeq	r2, r2, r1
  405600:	6022      	streq	r2, [r4, #0]
  405602:	6004      	str	r4, [r0, #0]
  405604:	e7ec      	b.n	4055e0 <_free_r+0x24>
  405606:	4613      	mov	r3, r2
  405608:	685a      	ldr	r2, [r3, #4]
  40560a:	b10a      	cbz	r2, 405610 <_free_r+0x54>
  40560c:	42a2      	cmp	r2, r4
  40560e:	d9fa      	bls.n	405606 <_free_r+0x4a>
  405610:	6819      	ldr	r1, [r3, #0]
  405612:	1858      	adds	r0, r3, r1
  405614:	42a0      	cmp	r0, r4
  405616:	d10b      	bne.n	405630 <_free_r+0x74>
  405618:	6820      	ldr	r0, [r4, #0]
  40561a:	4401      	add	r1, r0
  40561c:	1858      	adds	r0, r3, r1
  40561e:	4282      	cmp	r2, r0
  405620:	6019      	str	r1, [r3, #0]
  405622:	d1dd      	bne.n	4055e0 <_free_r+0x24>
  405624:	6810      	ldr	r0, [r2, #0]
  405626:	6852      	ldr	r2, [r2, #4]
  405628:	605a      	str	r2, [r3, #4]
  40562a:	4401      	add	r1, r0
  40562c:	6019      	str	r1, [r3, #0]
  40562e:	e7d7      	b.n	4055e0 <_free_r+0x24>
  405630:	d902      	bls.n	405638 <_free_r+0x7c>
  405632:	230c      	movs	r3, #12
  405634:	602b      	str	r3, [r5, #0]
  405636:	e7d3      	b.n	4055e0 <_free_r+0x24>
  405638:	6820      	ldr	r0, [r4, #0]
  40563a:	1821      	adds	r1, r4, r0
  40563c:	428a      	cmp	r2, r1
  40563e:	bf04      	itt	eq
  405640:	6811      	ldreq	r1, [r2, #0]
  405642:	6852      	ldreq	r2, [r2, #4]
  405644:	6062      	str	r2, [r4, #4]
  405646:	bf04      	itt	eq
  405648:	1809      	addeq	r1, r1, r0
  40564a:	6021      	streq	r1, [r4, #0]
  40564c:	605c      	str	r4, [r3, #4]
  40564e:	e7c7      	b.n	4055e0 <_free_r+0x24>
  405650:	bd38      	pop	{r3, r4, r5, pc}
  405652:	bf00      	nop
  405654:	204004c4 	.word	0x204004c4

00405658 <_malloc_r>:
  405658:	b570      	push	{r4, r5, r6, lr}
  40565a:	1ccd      	adds	r5, r1, #3
  40565c:	f025 0503 	bic.w	r5, r5, #3
  405660:	3508      	adds	r5, #8
  405662:	2d0c      	cmp	r5, #12
  405664:	bf38      	it	cc
  405666:	250c      	movcc	r5, #12
  405668:	2d00      	cmp	r5, #0
  40566a:	4606      	mov	r6, r0
  40566c:	db01      	blt.n	405672 <_malloc_r+0x1a>
  40566e:	42a9      	cmp	r1, r5
  405670:	d903      	bls.n	40567a <_malloc_r+0x22>
  405672:	230c      	movs	r3, #12
  405674:	6033      	str	r3, [r6, #0]
  405676:	2000      	movs	r0, #0
  405678:	bd70      	pop	{r4, r5, r6, pc}
  40567a:	f000 fb05 	bl	405c88 <__malloc_lock>
  40567e:	4a23      	ldr	r2, [pc, #140]	; (40570c <_malloc_r+0xb4>)
  405680:	6814      	ldr	r4, [r2, #0]
  405682:	4621      	mov	r1, r4
  405684:	b991      	cbnz	r1, 4056ac <_malloc_r+0x54>
  405686:	4c22      	ldr	r4, [pc, #136]	; (405710 <_malloc_r+0xb8>)
  405688:	6823      	ldr	r3, [r4, #0]
  40568a:	b91b      	cbnz	r3, 405694 <_malloc_r+0x3c>
  40568c:	4630      	mov	r0, r6
  40568e:	f000 f97f 	bl	405990 <_sbrk_r>
  405692:	6020      	str	r0, [r4, #0]
  405694:	4629      	mov	r1, r5
  405696:	4630      	mov	r0, r6
  405698:	f000 f97a 	bl	405990 <_sbrk_r>
  40569c:	1c43      	adds	r3, r0, #1
  40569e:	d126      	bne.n	4056ee <_malloc_r+0x96>
  4056a0:	230c      	movs	r3, #12
  4056a2:	6033      	str	r3, [r6, #0]
  4056a4:	4630      	mov	r0, r6
  4056a6:	f000 faf0 	bl	405c8a <__malloc_unlock>
  4056aa:	e7e4      	b.n	405676 <_malloc_r+0x1e>
  4056ac:	680b      	ldr	r3, [r1, #0]
  4056ae:	1b5b      	subs	r3, r3, r5
  4056b0:	d41a      	bmi.n	4056e8 <_malloc_r+0x90>
  4056b2:	2b0b      	cmp	r3, #11
  4056b4:	d90f      	bls.n	4056d6 <_malloc_r+0x7e>
  4056b6:	600b      	str	r3, [r1, #0]
  4056b8:	50cd      	str	r5, [r1, r3]
  4056ba:	18cc      	adds	r4, r1, r3
  4056bc:	4630      	mov	r0, r6
  4056be:	f000 fae4 	bl	405c8a <__malloc_unlock>
  4056c2:	f104 000b 	add.w	r0, r4, #11
  4056c6:	1d23      	adds	r3, r4, #4
  4056c8:	f020 0007 	bic.w	r0, r0, #7
  4056cc:	1ac3      	subs	r3, r0, r3
  4056ce:	d01b      	beq.n	405708 <_malloc_r+0xb0>
  4056d0:	425a      	negs	r2, r3
  4056d2:	50e2      	str	r2, [r4, r3]
  4056d4:	bd70      	pop	{r4, r5, r6, pc}
  4056d6:	428c      	cmp	r4, r1
  4056d8:	bf0d      	iteet	eq
  4056da:	6863      	ldreq	r3, [r4, #4]
  4056dc:	684b      	ldrne	r3, [r1, #4]
  4056de:	6063      	strne	r3, [r4, #4]
  4056e0:	6013      	streq	r3, [r2, #0]
  4056e2:	bf18      	it	ne
  4056e4:	460c      	movne	r4, r1
  4056e6:	e7e9      	b.n	4056bc <_malloc_r+0x64>
  4056e8:	460c      	mov	r4, r1
  4056ea:	6849      	ldr	r1, [r1, #4]
  4056ec:	e7ca      	b.n	405684 <_malloc_r+0x2c>
  4056ee:	1cc4      	adds	r4, r0, #3
  4056f0:	f024 0403 	bic.w	r4, r4, #3
  4056f4:	42a0      	cmp	r0, r4
  4056f6:	d005      	beq.n	405704 <_malloc_r+0xac>
  4056f8:	1a21      	subs	r1, r4, r0
  4056fa:	4630      	mov	r0, r6
  4056fc:	f000 f948 	bl	405990 <_sbrk_r>
  405700:	3001      	adds	r0, #1
  405702:	d0cd      	beq.n	4056a0 <_malloc_r+0x48>
  405704:	6025      	str	r5, [r4, #0]
  405706:	e7d9      	b.n	4056bc <_malloc_r+0x64>
  405708:	bd70      	pop	{r4, r5, r6, pc}
  40570a:	bf00      	nop
  40570c:	204004c4 	.word	0x204004c4
  405710:	204004c8 	.word	0x204004c8

00405714 <__sfputc_r>:
  405714:	6893      	ldr	r3, [r2, #8]
  405716:	3b01      	subs	r3, #1
  405718:	2b00      	cmp	r3, #0
  40571a:	b410      	push	{r4}
  40571c:	6093      	str	r3, [r2, #8]
  40571e:	da08      	bge.n	405732 <__sfputc_r+0x1e>
  405720:	6994      	ldr	r4, [r2, #24]
  405722:	42a3      	cmp	r3, r4
  405724:	db02      	blt.n	40572c <__sfputc_r+0x18>
  405726:	b2cb      	uxtb	r3, r1
  405728:	2b0a      	cmp	r3, #10
  40572a:	d102      	bne.n	405732 <__sfputc_r+0x1e>
  40572c:	bc10      	pop	{r4}
  40572e:	f000 b983 	b.w	405a38 <__swbuf_r>
  405732:	6813      	ldr	r3, [r2, #0]
  405734:	1c58      	adds	r0, r3, #1
  405736:	6010      	str	r0, [r2, #0]
  405738:	7019      	strb	r1, [r3, #0]
  40573a:	b2c8      	uxtb	r0, r1
  40573c:	bc10      	pop	{r4}
  40573e:	4770      	bx	lr

00405740 <__sfputs_r>:
  405740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405742:	4606      	mov	r6, r0
  405744:	460f      	mov	r7, r1
  405746:	4614      	mov	r4, r2
  405748:	18d5      	adds	r5, r2, r3
  40574a:	42ac      	cmp	r4, r5
  40574c:	d101      	bne.n	405752 <__sfputs_r+0x12>
  40574e:	2000      	movs	r0, #0
  405750:	e007      	b.n	405762 <__sfputs_r+0x22>
  405752:	463a      	mov	r2, r7
  405754:	f814 1b01 	ldrb.w	r1, [r4], #1
  405758:	4630      	mov	r0, r6
  40575a:	f7ff ffdb 	bl	405714 <__sfputc_r>
  40575e:	1c43      	adds	r3, r0, #1
  405760:	d1f3      	bne.n	40574a <__sfputs_r+0xa>
  405762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00405764 <_vfiprintf_r>:
  405764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405768:	b09d      	sub	sp, #116	; 0x74
  40576a:	460c      	mov	r4, r1
  40576c:	4617      	mov	r7, r2
  40576e:	9303      	str	r3, [sp, #12]
  405770:	4606      	mov	r6, r0
  405772:	b118      	cbz	r0, 40577c <_vfiprintf_r+0x18>
  405774:	6983      	ldr	r3, [r0, #24]
  405776:	b90b      	cbnz	r3, 40577c <_vfiprintf_r+0x18>
  405778:	f7ff faea 	bl	404d50 <__sinit>
  40577c:	4b7c      	ldr	r3, [pc, #496]	; (405970 <_vfiprintf_r+0x20c>)
  40577e:	429c      	cmp	r4, r3
  405780:	d157      	bne.n	405832 <_vfiprintf_r+0xce>
  405782:	6874      	ldr	r4, [r6, #4]
  405784:	89a3      	ldrh	r3, [r4, #12]
  405786:	0718      	lsls	r0, r3, #28
  405788:	d55d      	bpl.n	405846 <_vfiprintf_r+0xe2>
  40578a:	6923      	ldr	r3, [r4, #16]
  40578c:	2b00      	cmp	r3, #0
  40578e:	d05a      	beq.n	405846 <_vfiprintf_r+0xe2>
  405790:	2300      	movs	r3, #0
  405792:	9309      	str	r3, [sp, #36]	; 0x24
  405794:	2320      	movs	r3, #32
  405796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40579a:	2330      	movs	r3, #48	; 0x30
  40579c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4057a0:	f04f 0b01 	mov.w	fp, #1
  4057a4:	46b8      	mov	r8, r7
  4057a6:	4645      	mov	r5, r8
  4057a8:	f815 3b01 	ldrb.w	r3, [r5], #1
  4057ac:	2b00      	cmp	r3, #0
  4057ae:	d155      	bne.n	40585c <_vfiprintf_r+0xf8>
  4057b0:	ebb8 0a07 	subs.w	sl, r8, r7
  4057b4:	d00b      	beq.n	4057ce <_vfiprintf_r+0x6a>
  4057b6:	4653      	mov	r3, sl
  4057b8:	463a      	mov	r2, r7
  4057ba:	4621      	mov	r1, r4
  4057bc:	4630      	mov	r0, r6
  4057be:	f7ff ffbf 	bl	405740 <__sfputs_r>
  4057c2:	3001      	adds	r0, #1
  4057c4:	f000 80c4 	beq.w	405950 <_vfiprintf_r+0x1ec>
  4057c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4057ca:	4453      	add	r3, sl
  4057cc:	9309      	str	r3, [sp, #36]	; 0x24
  4057ce:	f898 3000 	ldrb.w	r3, [r8]
  4057d2:	2b00      	cmp	r3, #0
  4057d4:	f000 80bc 	beq.w	405950 <_vfiprintf_r+0x1ec>
  4057d8:	2300      	movs	r3, #0
  4057da:	f04f 32ff 	mov.w	r2, #4294967295
  4057de:	9304      	str	r3, [sp, #16]
  4057e0:	9307      	str	r3, [sp, #28]
  4057e2:	9205      	str	r2, [sp, #20]
  4057e4:	9306      	str	r3, [sp, #24]
  4057e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  4057ea:	931a      	str	r3, [sp, #104]	; 0x68
  4057ec:	2205      	movs	r2, #5
  4057ee:	7829      	ldrb	r1, [r5, #0]
  4057f0:	4860      	ldr	r0, [pc, #384]	; (405974 <_vfiprintf_r+0x210>)
  4057f2:	f7ff fbb5 	bl	404f60 <memchr>
  4057f6:	f105 0801 	add.w	r8, r5, #1
  4057fa:	9b04      	ldr	r3, [sp, #16]
  4057fc:	2800      	cmp	r0, #0
  4057fe:	d131      	bne.n	405864 <_vfiprintf_r+0x100>
  405800:	06d9      	lsls	r1, r3, #27
  405802:	bf44      	itt	mi
  405804:	2220      	movmi	r2, #32
  405806:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40580a:	071a      	lsls	r2, r3, #28
  40580c:	bf44      	itt	mi
  40580e:	222b      	movmi	r2, #43	; 0x2b
  405810:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  405814:	782a      	ldrb	r2, [r5, #0]
  405816:	2a2a      	cmp	r2, #42	; 0x2a
  405818:	d02c      	beq.n	405874 <_vfiprintf_r+0x110>
  40581a:	9a07      	ldr	r2, [sp, #28]
  40581c:	2100      	movs	r1, #0
  40581e:	200a      	movs	r0, #10
  405820:	46a8      	mov	r8, r5
  405822:	3501      	adds	r5, #1
  405824:	f898 3000 	ldrb.w	r3, [r8]
  405828:	3b30      	subs	r3, #48	; 0x30
  40582a:	2b09      	cmp	r3, #9
  40582c:	d96d      	bls.n	40590a <_vfiprintf_r+0x1a6>
  40582e:	b371      	cbz	r1, 40588e <_vfiprintf_r+0x12a>
  405830:	e026      	b.n	405880 <_vfiprintf_r+0x11c>
  405832:	4b51      	ldr	r3, [pc, #324]	; (405978 <_vfiprintf_r+0x214>)
  405834:	429c      	cmp	r4, r3
  405836:	d101      	bne.n	40583c <_vfiprintf_r+0xd8>
  405838:	68b4      	ldr	r4, [r6, #8]
  40583a:	e7a3      	b.n	405784 <_vfiprintf_r+0x20>
  40583c:	4b4f      	ldr	r3, [pc, #316]	; (40597c <_vfiprintf_r+0x218>)
  40583e:	429c      	cmp	r4, r3
  405840:	bf08      	it	eq
  405842:	68f4      	ldreq	r4, [r6, #12]
  405844:	e79e      	b.n	405784 <_vfiprintf_r+0x20>
  405846:	4621      	mov	r1, r4
  405848:	4630      	mov	r0, r6
  40584a:	f000 f959 	bl	405b00 <__swsetup_r>
  40584e:	2800      	cmp	r0, #0
  405850:	d09e      	beq.n	405790 <_vfiprintf_r+0x2c>
  405852:	f04f 30ff 	mov.w	r0, #4294967295
  405856:	b01d      	add	sp, #116	; 0x74
  405858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40585c:	2b25      	cmp	r3, #37	; 0x25
  40585e:	d0a7      	beq.n	4057b0 <_vfiprintf_r+0x4c>
  405860:	46a8      	mov	r8, r5
  405862:	e7a0      	b.n	4057a6 <_vfiprintf_r+0x42>
  405864:	4a43      	ldr	r2, [pc, #268]	; (405974 <_vfiprintf_r+0x210>)
  405866:	1a80      	subs	r0, r0, r2
  405868:	fa0b f000 	lsl.w	r0, fp, r0
  40586c:	4318      	orrs	r0, r3
  40586e:	9004      	str	r0, [sp, #16]
  405870:	4645      	mov	r5, r8
  405872:	e7bb      	b.n	4057ec <_vfiprintf_r+0x88>
  405874:	9a03      	ldr	r2, [sp, #12]
  405876:	1d11      	adds	r1, r2, #4
  405878:	6812      	ldr	r2, [r2, #0]
  40587a:	9103      	str	r1, [sp, #12]
  40587c:	2a00      	cmp	r2, #0
  40587e:	db01      	blt.n	405884 <_vfiprintf_r+0x120>
  405880:	9207      	str	r2, [sp, #28]
  405882:	e004      	b.n	40588e <_vfiprintf_r+0x12a>
  405884:	4252      	negs	r2, r2
  405886:	f043 0302 	orr.w	r3, r3, #2
  40588a:	9207      	str	r2, [sp, #28]
  40588c:	9304      	str	r3, [sp, #16]
  40588e:	f898 3000 	ldrb.w	r3, [r8]
  405892:	2b2e      	cmp	r3, #46	; 0x2e
  405894:	d110      	bne.n	4058b8 <_vfiprintf_r+0x154>
  405896:	f898 3001 	ldrb.w	r3, [r8, #1]
  40589a:	2b2a      	cmp	r3, #42	; 0x2a
  40589c:	f108 0101 	add.w	r1, r8, #1
  4058a0:	d137      	bne.n	405912 <_vfiprintf_r+0x1ae>
  4058a2:	9b03      	ldr	r3, [sp, #12]
  4058a4:	1d1a      	adds	r2, r3, #4
  4058a6:	681b      	ldr	r3, [r3, #0]
  4058a8:	9203      	str	r2, [sp, #12]
  4058aa:	2b00      	cmp	r3, #0
  4058ac:	bfb8      	it	lt
  4058ae:	f04f 33ff 	movlt.w	r3, #4294967295
  4058b2:	f108 0802 	add.w	r8, r8, #2
  4058b6:	9305      	str	r3, [sp, #20]
  4058b8:	4d31      	ldr	r5, [pc, #196]	; (405980 <_vfiprintf_r+0x21c>)
  4058ba:	f898 1000 	ldrb.w	r1, [r8]
  4058be:	2203      	movs	r2, #3
  4058c0:	4628      	mov	r0, r5
  4058c2:	f7ff fb4d 	bl	404f60 <memchr>
  4058c6:	b140      	cbz	r0, 4058da <_vfiprintf_r+0x176>
  4058c8:	2340      	movs	r3, #64	; 0x40
  4058ca:	1b40      	subs	r0, r0, r5
  4058cc:	fa03 f000 	lsl.w	r0, r3, r0
  4058d0:	9b04      	ldr	r3, [sp, #16]
  4058d2:	4303      	orrs	r3, r0
  4058d4:	9304      	str	r3, [sp, #16]
  4058d6:	f108 0801 	add.w	r8, r8, #1
  4058da:	f898 1000 	ldrb.w	r1, [r8]
  4058de:	4829      	ldr	r0, [pc, #164]	; (405984 <_vfiprintf_r+0x220>)
  4058e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  4058e4:	2206      	movs	r2, #6
  4058e6:	f108 0701 	add.w	r7, r8, #1
  4058ea:	f7ff fb39 	bl	404f60 <memchr>
  4058ee:	2800      	cmp	r0, #0
  4058f0:	d034      	beq.n	40595c <_vfiprintf_r+0x1f8>
  4058f2:	4b25      	ldr	r3, [pc, #148]	; (405988 <_vfiprintf_r+0x224>)
  4058f4:	bb03      	cbnz	r3, 405938 <_vfiprintf_r+0x1d4>
  4058f6:	9b03      	ldr	r3, [sp, #12]
  4058f8:	3307      	adds	r3, #7
  4058fa:	f023 0307 	bic.w	r3, r3, #7
  4058fe:	3308      	adds	r3, #8
  405900:	9303      	str	r3, [sp, #12]
  405902:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405904:	444b      	add	r3, r9
  405906:	9309      	str	r3, [sp, #36]	; 0x24
  405908:	e74c      	b.n	4057a4 <_vfiprintf_r+0x40>
  40590a:	fb00 3202 	mla	r2, r0, r2, r3
  40590e:	2101      	movs	r1, #1
  405910:	e786      	b.n	405820 <_vfiprintf_r+0xbc>
  405912:	2300      	movs	r3, #0
  405914:	9305      	str	r3, [sp, #20]
  405916:	4618      	mov	r0, r3
  405918:	250a      	movs	r5, #10
  40591a:	4688      	mov	r8, r1
  40591c:	3101      	adds	r1, #1
  40591e:	f898 2000 	ldrb.w	r2, [r8]
  405922:	3a30      	subs	r2, #48	; 0x30
  405924:	2a09      	cmp	r2, #9
  405926:	d903      	bls.n	405930 <_vfiprintf_r+0x1cc>
  405928:	2b00      	cmp	r3, #0
  40592a:	d0c5      	beq.n	4058b8 <_vfiprintf_r+0x154>
  40592c:	9005      	str	r0, [sp, #20]
  40592e:	e7c3      	b.n	4058b8 <_vfiprintf_r+0x154>
  405930:	fb05 2000 	mla	r0, r5, r0, r2
  405934:	2301      	movs	r3, #1
  405936:	e7f0      	b.n	40591a <_vfiprintf_r+0x1b6>
  405938:	ab03      	add	r3, sp, #12
  40593a:	9300      	str	r3, [sp, #0]
  40593c:	4622      	mov	r2, r4
  40593e:	4b13      	ldr	r3, [pc, #76]	; (40598c <_vfiprintf_r+0x228>)
  405940:	a904      	add	r1, sp, #16
  405942:	4630      	mov	r0, r6
  405944:	f7fd fe0e 	bl	403564 <_printf_float>
  405948:	f1b0 3fff 	cmp.w	r0, #4294967295
  40594c:	4681      	mov	r9, r0
  40594e:	d1d8      	bne.n	405902 <_vfiprintf_r+0x19e>
  405950:	89a3      	ldrh	r3, [r4, #12]
  405952:	065b      	lsls	r3, r3, #25
  405954:	f53f af7d 	bmi.w	405852 <_vfiprintf_r+0xee>
  405958:	9809      	ldr	r0, [sp, #36]	; 0x24
  40595a:	e77c      	b.n	405856 <_vfiprintf_r+0xf2>
  40595c:	ab03      	add	r3, sp, #12
  40595e:	9300      	str	r3, [sp, #0]
  405960:	4622      	mov	r2, r4
  405962:	4b0a      	ldr	r3, [pc, #40]	; (40598c <_vfiprintf_r+0x228>)
  405964:	a904      	add	r1, sp, #16
  405966:	4630      	mov	r0, r6
  405968:	f7fe f8aa 	bl	403ac0 <_printf_i>
  40596c:	e7ec      	b.n	405948 <_vfiprintf_r+0x1e4>
  40596e:	bf00      	nop
  405970:	0040639c 	.word	0x0040639c
  405974:	004064dc 	.word	0x004064dc
  405978:	004063bc 	.word	0x004063bc
  40597c:	0040637c 	.word	0x0040637c
  405980:	004064e2 	.word	0x004064e2
  405984:	004064e6 	.word	0x004064e6
  405988:	00403565 	.word	0x00403565
  40598c:	00405741 	.word	0x00405741

00405990 <_sbrk_r>:
  405990:	b538      	push	{r3, r4, r5, lr}
  405992:	4c06      	ldr	r4, [pc, #24]	; (4059ac <_sbrk_r+0x1c>)
  405994:	2300      	movs	r3, #0
  405996:	4605      	mov	r5, r0
  405998:	4608      	mov	r0, r1
  40599a:	6023      	str	r3, [r4, #0]
  40599c:	f7fb ffc0 	bl	401920 <_sbrk>
  4059a0:	1c43      	adds	r3, r0, #1
  4059a2:	d102      	bne.n	4059aa <_sbrk_r+0x1a>
  4059a4:	6823      	ldr	r3, [r4, #0]
  4059a6:	b103      	cbz	r3, 4059aa <_sbrk_r+0x1a>
  4059a8:	602b      	str	r3, [r5, #0]
  4059aa:	bd38      	pop	{r3, r4, r5, pc}
  4059ac:	20400734 	.word	0x20400734

004059b0 <__sread>:
  4059b0:	b510      	push	{r4, lr}
  4059b2:	460c      	mov	r4, r1
  4059b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4059b8:	f000 f968 	bl	405c8c <_read_r>
  4059bc:	2800      	cmp	r0, #0
  4059be:	bfab      	itete	ge
  4059c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  4059c2:	89a3      	ldrhlt	r3, [r4, #12]
  4059c4:	181b      	addge	r3, r3, r0
  4059c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  4059ca:	bfac      	ite	ge
  4059cc:	6563      	strge	r3, [r4, #84]	; 0x54
  4059ce:	81a3      	strhlt	r3, [r4, #12]
  4059d0:	bd10      	pop	{r4, pc}

004059d2 <__swrite>:
  4059d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4059d6:	461f      	mov	r7, r3
  4059d8:	898b      	ldrh	r3, [r1, #12]
  4059da:	05db      	lsls	r3, r3, #23
  4059dc:	4605      	mov	r5, r0
  4059de:	460c      	mov	r4, r1
  4059e0:	4616      	mov	r6, r2
  4059e2:	d505      	bpl.n	4059f0 <__swrite+0x1e>
  4059e4:	2302      	movs	r3, #2
  4059e6:	2200      	movs	r2, #0
  4059e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4059ec:	f000 f928 	bl	405c40 <_lseek_r>
  4059f0:	89a3      	ldrh	r3, [r4, #12]
  4059f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4059f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4059fa:	81a3      	strh	r3, [r4, #12]
  4059fc:	4632      	mov	r2, r6
  4059fe:	463b      	mov	r3, r7
  405a00:	4628      	mov	r0, r5
  405a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405a06:	f000 b869 	b.w	405adc <_write_r>

00405a0a <__sseek>:
  405a0a:	b510      	push	{r4, lr}
  405a0c:	460c      	mov	r4, r1
  405a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405a12:	f000 f915 	bl	405c40 <_lseek_r>
  405a16:	1c43      	adds	r3, r0, #1
  405a18:	89a3      	ldrh	r3, [r4, #12]
  405a1a:	bf15      	itete	ne
  405a1c:	6560      	strne	r0, [r4, #84]	; 0x54
  405a1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405a22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405a26:	81a3      	strheq	r3, [r4, #12]
  405a28:	bf18      	it	ne
  405a2a:	81a3      	strhne	r3, [r4, #12]
  405a2c:	bd10      	pop	{r4, pc}

00405a2e <__sclose>:
  405a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405a32:	f000 b8d3 	b.w	405bdc <_close_r>
	...

00405a38 <__swbuf_r>:
  405a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405a3a:	460e      	mov	r6, r1
  405a3c:	4614      	mov	r4, r2
  405a3e:	4605      	mov	r5, r0
  405a40:	b118      	cbz	r0, 405a4a <__swbuf_r+0x12>
  405a42:	6983      	ldr	r3, [r0, #24]
  405a44:	b90b      	cbnz	r3, 405a4a <__swbuf_r+0x12>
  405a46:	f7ff f983 	bl	404d50 <__sinit>
  405a4a:	4b21      	ldr	r3, [pc, #132]	; (405ad0 <__swbuf_r+0x98>)
  405a4c:	429c      	cmp	r4, r3
  405a4e:	d12a      	bne.n	405aa6 <__swbuf_r+0x6e>
  405a50:	686c      	ldr	r4, [r5, #4]
  405a52:	69a3      	ldr	r3, [r4, #24]
  405a54:	60a3      	str	r3, [r4, #8]
  405a56:	89a3      	ldrh	r3, [r4, #12]
  405a58:	071a      	lsls	r2, r3, #28
  405a5a:	d52e      	bpl.n	405aba <__swbuf_r+0x82>
  405a5c:	6923      	ldr	r3, [r4, #16]
  405a5e:	b363      	cbz	r3, 405aba <__swbuf_r+0x82>
  405a60:	6923      	ldr	r3, [r4, #16]
  405a62:	6820      	ldr	r0, [r4, #0]
  405a64:	1ac0      	subs	r0, r0, r3
  405a66:	6963      	ldr	r3, [r4, #20]
  405a68:	b2f6      	uxtb	r6, r6
  405a6a:	4298      	cmp	r0, r3
  405a6c:	4637      	mov	r7, r6
  405a6e:	db04      	blt.n	405a7a <__swbuf_r+0x42>
  405a70:	4621      	mov	r1, r4
  405a72:	4628      	mov	r0, r5
  405a74:	f7ff f902 	bl	404c7c <_fflush_r>
  405a78:	bb28      	cbnz	r0, 405ac6 <__swbuf_r+0x8e>
  405a7a:	68a3      	ldr	r3, [r4, #8]
  405a7c:	3b01      	subs	r3, #1
  405a7e:	60a3      	str	r3, [r4, #8]
  405a80:	6823      	ldr	r3, [r4, #0]
  405a82:	1c5a      	adds	r2, r3, #1
  405a84:	6022      	str	r2, [r4, #0]
  405a86:	701e      	strb	r6, [r3, #0]
  405a88:	6963      	ldr	r3, [r4, #20]
  405a8a:	3001      	adds	r0, #1
  405a8c:	4298      	cmp	r0, r3
  405a8e:	d004      	beq.n	405a9a <__swbuf_r+0x62>
  405a90:	89a3      	ldrh	r3, [r4, #12]
  405a92:	07db      	lsls	r3, r3, #31
  405a94:	d519      	bpl.n	405aca <__swbuf_r+0x92>
  405a96:	2e0a      	cmp	r6, #10
  405a98:	d117      	bne.n	405aca <__swbuf_r+0x92>
  405a9a:	4621      	mov	r1, r4
  405a9c:	4628      	mov	r0, r5
  405a9e:	f7ff f8ed 	bl	404c7c <_fflush_r>
  405aa2:	b190      	cbz	r0, 405aca <__swbuf_r+0x92>
  405aa4:	e00f      	b.n	405ac6 <__swbuf_r+0x8e>
  405aa6:	4b0b      	ldr	r3, [pc, #44]	; (405ad4 <__swbuf_r+0x9c>)
  405aa8:	429c      	cmp	r4, r3
  405aaa:	d101      	bne.n	405ab0 <__swbuf_r+0x78>
  405aac:	68ac      	ldr	r4, [r5, #8]
  405aae:	e7d0      	b.n	405a52 <__swbuf_r+0x1a>
  405ab0:	4b09      	ldr	r3, [pc, #36]	; (405ad8 <__swbuf_r+0xa0>)
  405ab2:	429c      	cmp	r4, r3
  405ab4:	bf08      	it	eq
  405ab6:	68ec      	ldreq	r4, [r5, #12]
  405ab8:	e7cb      	b.n	405a52 <__swbuf_r+0x1a>
  405aba:	4621      	mov	r1, r4
  405abc:	4628      	mov	r0, r5
  405abe:	f000 f81f 	bl	405b00 <__swsetup_r>
  405ac2:	2800      	cmp	r0, #0
  405ac4:	d0cc      	beq.n	405a60 <__swbuf_r+0x28>
  405ac6:	f04f 37ff 	mov.w	r7, #4294967295
  405aca:	4638      	mov	r0, r7
  405acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405ace:	bf00      	nop
  405ad0:	0040639c 	.word	0x0040639c
  405ad4:	004063bc 	.word	0x004063bc
  405ad8:	0040637c 	.word	0x0040637c

00405adc <_write_r>:
  405adc:	b538      	push	{r3, r4, r5, lr}
  405ade:	4c07      	ldr	r4, [pc, #28]	; (405afc <_write_r+0x20>)
  405ae0:	4605      	mov	r5, r0
  405ae2:	4608      	mov	r0, r1
  405ae4:	4611      	mov	r1, r2
  405ae6:	2200      	movs	r2, #0
  405ae8:	6022      	str	r2, [r4, #0]
  405aea:	461a      	mov	r2, r3
  405aec:	f7fc ff9a 	bl	402a24 <_write>
  405af0:	1c43      	adds	r3, r0, #1
  405af2:	d102      	bne.n	405afa <_write_r+0x1e>
  405af4:	6823      	ldr	r3, [r4, #0]
  405af6:	b103      	cbz	r3, 405afa <_write_r+0x1e>
  405af8:	602b      	str	r3, [r5, #0]
  405afa:	bd38      	pop	{r3, r4, r5, pc}
  405afc:	20400734 	.word	0x20400734

00405b00 <__swsetup_r>:
  405b00:	4b32      	ldr	r3, [pc, #200]	; (405bcc <__swsetup_r+0xcc>)
  405b02:	b570      	push	{r4, r5, r6, lr}
  405b04:	681d      	ldr	r5, [r3, #0]
  405b06:	4606      	mov	r6, r0
  405b08:	460c      	mov	r4, r1
  405b0a:	b125      	cbz	r5, 405b16 <__swsetup_r+0x16>
  405b0c:	69ab      	ldr	r3, [r5, #24]
  405b0e:	b913      	cbnz	r3, 405b16 <__swsetup_r+0x16>
  405b10:	4628      	mov	r0, r5
  405b12:	f7ff f91d 	bl	404d50 <__sinit>
  405b16:	4b2e      	ldr	r3, [pc, #184]	; (405bd0 <__swsetup_r+0xd0>)
  405b18:	429c      	cmp	r4, r3
  405b1a:	d10f      	bne.n	405b3c <__swsetup_r+0x3c>
  405b1c:	686c      	ldr	r4, [r5, #4]
  405b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b22:	b29a      	uxth	r2, r3
  405b24:	0715      	lsls	r5, r2, #28
  405b26:	d42c      	bmi.n	405b82 <__swsetup_r+0x82>
  405b28:	06d0      	lsls	r0, r2, #27
  405b2a:	d411      	bmi.n	405b50 <__swsetup_r+0x50>
  405b2c:	2209      	movs	r2, #9
  405b2e:	6032      	str	r2, [r6, #0]
  405b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405b34:	81a3      	strh	r3, [r4, #12]
  405b36:	f04f 30ff 	mov.w	r0, #4294967295
  405b3a:	bd70      	pop	{r4, r5, r6, pc}
  405b3c:	4b25      	ldr	r3, [pc, #148]	; (405bd4 <__swsetup_r+0xd4>)
  405b3e:	429c      	cmp	r4, r3
  405b40:	d101      	bne.n	405b46 <__swsetup_r+0x46>
  405b42:	68ac      	ldr	r4, [r5, #8]
  405b44:	e7eb      	b.n	405b1e <__swsetup_r+0x1e>
  405b46:	4b24      	ldr	r3, [pc, #144]	; (405bd8 <__swsetup_r+0xd8>)
  405b48:	429c      	cmp	r4, r3
  405b4a:	bf08      	it	eq
  405b4c:	68ec      	ldreq	r4, [r5, #12]
  405b4e:	e7e6      	b.n	405b1e <__swsetup_r+0x1e>
  405b50:	0751      	lsls	r1, r2, #29
  405b52:	d512      	bpl.n	405b7a <__swsetup_r+0x7a>
  405b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405b56:	b141      	cbz	r1, 405b6a <__swsetup_r+0x6a>
  405b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405b5c:	4299      	cmp	r1, r3
  405b5e:	d002      	beq.n	405b66 <__swsetup_r+0x66>
  405b60:	4630      	mov	r0, r6
  405b62:	f7ff fd2b 	bl	4055bc <_free_r>
  405b66:	2300      	movs	r3, #0
  405b68:	6363      	str	r3, [r4, #52]	; 0x34
  405b6a:	89a3      	ldrh	r3, [r4, #12]
  405b6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  405b70:	81a3      	strh	r3, [r4, #12]
  405b72:	2300      	movs	r3, #0
  405b74:	6063      	str	r3, [r4, #4]
  405b76:	6923      	ldr	r3, [r4, #16]
  405b78:	6023      	str	r3, [r4, #0]
  405b7a:	89a3      	ldrh	r3, [r4, #12]
  405b7c:	f043 0308 	orr.w	r3, r3, #8
  405b80:	81a3      	strh	r3, [r4, #12]
  405b82:	6923      	ldr	r3, [r4, #16]
  405b84:	b94b      	cbnz	r3, 405b9a <__swsetup_r+0x9a>
  405b86:	89a3      	ldrh	r3, [r4, #12]
  405b88:	f403 7320 	and.w	r3, r3, #640	; 0x280
  405b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405b90:	d003      	beq.n	405b9a <__swsetup_r+0x9a>
  405b92:	4621      	mov	r1, r4
  405b94:	4630      	mov	r0, r6
  405b96:	f7ff f997 	bl	404ec8 <__smakebuf_r>
  405b9a:	89a2      	ldrh	r2, [r4, #12]
  405b9c:	f012 0301 	ands.w	r3, r2, #1
  405ba0:	d00c      	beq.n	405bbc <__swsetup_r+0xbc>
  405ba2:	2300      	movs	r3, #0
  405ba4:	60a3      	str	r3, [r4, #8]
  405ba6:	6963      	ldr	r3, [r4, #20]
  405ba8:	425b      	negs	r3, r3
  405baa:	61a3      	str	r3, [r4, #24]
  405bac:	6923      	ldr	r3, [r4, #16]
  405bae:	b953      	cbnz	r3, 405bc6 <__swsetup_r+0xc6>
  405bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405bb4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  405bb8:	d1ba      	bne.n	405b30 <__swsetup_r+0x30>
  405bba:	bd70      	pop	{r4, r5, r6, pc}
  405bbc:	0792      	lsls	r2, r2, #30
  405bbe:	bf58      	it	pl
  405bc0:	6963      	ldrpl	r3, [r4, #20]
  405bc2:	60a3      	str	r3, [r4, #8]
  405bc4:	e7f2      	b.n	405bac <__swsetup_r+0xac>
  405bc6:	2000      	movs	r0, #0
  405bc8:	e7f7      	b.n	405bba <__swsetup_r+0xba>
  405bca:	bf00      	nop
  405bcc:	20400048 	.word	0x20400048
  405bd0:	0040639c 	.word	0x0040639c
  405bd4:	004063bc 	.word	0x004063bc
  405bd8:	0040637c 	.word	0x0040637c

00405bdc <_close_r>:
  405bdc:	b538      	push	{r3, r4, r5, lr}
  405bde:	4c06      	ldr	r4, [pc, #24]	; (405bf8 <_close_r+0x1c>)
  405be0:	2300      	movs	r3, #0
  405be2:	4605      	mov	r5, r0
  405be4:	4608      	mov	r0, r1
  405be6:	6023      	str	r3, [r4, #0]
  405be8:	f7fb feac 	bl	401944 <_close>
  405bec:	1c43      	adds	r3, r0, #1
  405bee:	d102      	bne.n	405bf6 <_close_r+0x1a>
  405bf0:	6823      	ldr	r3, [r4, #0]
  405bf2:	b103      	cbz	r3, 405bf6 <_close_r+0x1a>
  405bf4:	602b      	str	r3, [r5, #0]
  405bf6:	bd38      	pop	{r3, r4, r5, pc}
  405bf8:	20400734 	.word	0x20400734

00405bfc <_fstat_r>:
  405bfc:	b538      	push	{r3, r4, r5, lr}
  405bfe:	4c07      	ldr	r4, [pc, #28]	; (405c1c <_fstat_r+0x20>)
  405c00:	2300      	movs	r3, #0
  405c02:	4605      	mov	r5, r0
  405c04:	4608      	mov	r0, r1
  405c06:	4611      	mov	r1, r2
  405c08:	6023      	str	r3, [r4, #0]
  405c0a:	f7fb fe9e 	bl	40194a <_fstat>
  405c0e:	1c43      	adds	r3, r0, #1
  405c10:	d102      	bne.n	405c18 <_fstat_r+0x1c>
  405c12:	6823      	ldr	r3, [r4, #0]
  405c14:	b103      	cbz	r3, 405c18 <_fstat_r+0x1c>
  405c16:	602b      	str	r3, [r5, #0]
  405c18:	bd38      	pop	{r3, r4, r5, pc}
  405c1a:	bf00      	nop
  405c1c:	20400734 	.word	0x20400734

00405c20 <_isatty_r>:
  405c20:	b538      	push	{r3, r4, r5, lr}
  405c22:	4c06      	ldr	r4, [pc, #24]	; (405c3c <_isatty_r+0x1c>)
  405c24:	2300      	movs	r3, #0
  405c26:	4605      	mov	r5, r0
  405c28:	4608      	mov	r0, r1
  405c2a:	6023      	str	r3, [r4, #0]
  405c2c:	f7fb fe92 	bl	401954 <_isatty>
  405c30:	1c43      	adds	r3, r0, #1
  405c32:	d102      	bne.n	405c3a <_isatty_r+0x1a>
  405c34:	6823      	ldr	r3, [r4, #0]
  405c36:	b103      	cbz	r3, 405c3a <_isatty_r+0x1a>
  405c38:	602b      	str	r3, [r5, #0]
  405c3a:	bd38      	pop	{r3, r4, r5, pc}
  405c3c:	20400734 	.word	0x20400734

00405c40 <_lseek_r>:
  405c40:	b538      	push	{r3, r4, r5, lr}
  405c42:	4c07      	ldr	r4, [pc, #28]	; (405c60 <_lseek_r+0x20>)
  405c44:	4605      	mov	r5, r0
  405c46:	4608      	mov	r0, r1
  405c48:	4611      	mov	r1, r2
  405c4a:	2200      	movs	r2, #0
  405c4c:	6022      	str	r2, [r4, #0]
  405c4e:	461a      	mov	r2, r3
  405c50:	f7fb fe82 	bl	401958 <_lseek>
  405c54:	1c43      	adds	r3, r0, #1
  405c56:	d102      	bne.n	405c5e <_lseek_r+0x1e>
  405c58:	6823      	ldr	r3, [r4, #0]
  405c5a:	b103      	cbz	r3, 405c5e <_lseek_r+0x1e>
  405c5c:	602b      	str	r3, [r5, #0]
  405c5e:	bd38      	pop	{r3, r4, r5, pc}
  405c60:	20400734 	.word	0x20400734

00405c64 <__ascii_mbtowc>:
  405c64:	b082      	sub	sp, #8
  405c66:	b901      	cbnz	r1, 405c6a <__ascii_mbtowc+0x6>
  405c68:	a901      	add	r1, sp, #4
  405c6a:	b142      	cbz	r2, 405c7e <__ascii_mbtowc+0x1a>
  405c6c:	b14b      	cbz	r3, 405c82 <__ascii_mbtowc+0x1e>
  405c6e:	7813      	ldrb	r3, [r2, #0]
  405c70:	600b      	str	r3, [r1, #0]
  405c72:	7812      	ldrb	r2, [r2, #0]
  405c74:	1c10      	adds	r0, r2, #0
  405c76:	bf18      	it	ne
  405c78:	2001      	movne	r0, #1
  405c7a:	b002      	add	sp, #8
  405c7c:	4770      	bx	lr
  405c7e:	4610      	mov	r0, r2
  405c80:	e7fb      	b.n	405c7a <__ascii_mbtowc+0x16>
  405c82:	f06f 0001 	mvn.w	r0, #1
  405c86:	e7f8      	b.n	405c7a <__ascii_mbtowc+0x16>

00405c88 <__malloc_lock>:
  405c88:	4770      	bx	lr

00405c8a <__malloc_unlock>:
  405c8a:	4770      	bx	lr

00405c8c <_read_r>:
  405c8c:	b538      	push	{r3, r4, r5, lr}
  405c8e:	4c07      	ldr	r4, [pc, #28]	; (405cac <_read_r+0x20>)
  405c90:	4605      	mov	r5, r0
  405c92:	4608      	mov	r0, r1
  405c94:	4611      	mov	r1, r2
  405c96:	2200      	movs	r2, #0
  405c98:	6022      	str	r2, [r4, #0]
  405c9a:	461a      	mov	r2, r3
  405c9c:	f7fc feb0 	bl	402a00 <_read>
  405ca0:	1c43      	adds	r3, r0, #1
  405ca2:	d102      	bne.n	405caa <_read_r+0x1e>
  405ca4:	6823      	ldr	r3, [r4, #0]
  405ca6:	b103      	cbz	r3, 405caa <_read_r+0x1e>
  405ca8:	602b      	str	r3, [r5, #0]
  405caa:	bd38      	pop	{r3, r4, r5, pc}
  405cac:	20400734 	.word	0x20400734

00405cb0 <__ascii_wctomb>:
  405cb0:	b149      	cbz	r1, 405cc6 <__ascii_wctomb+0x16>
  405cb2:	2aff      	cmp	r2, #255	; 0xff
  405cb4:	bf85      	ittet	hi
  405cb6:	238a      	movhi	r3, #138	; 0x8a
  405cb8:	6003      	strhi	r3, [r0, #0]
  405cba:	700a      	strbls	r2, [r1, #0]
  405cbc:	f04f 30ff 	movhi.w	r0, #4294967295
  405cc0:	bf98      	it	ls
  405cc2:	2001      	movls	r0, #1
  405cc4:	4770      	bx	lr
  405cc6:	4608      	mov	r0, r1
  405cc8:	4770      	bx	lr
	...

00405ccc <__aeabi_dcmpun>:
  405ccc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405cd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405cd4:	d102      	bne.n	405cdc <__aeabi_dcmpun+0x10>
  405cd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405cda:	d10a      	bne.n	405cf2 <__aeabi_dcmpun+0x26>
  405cdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405ce0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405ce4:	d102      	bne.n	405cec <__aeabi_dcmpun+0x20>
  405ce6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405cea:	d102      	bne.n	405cf2 <__aeabi_dcmpun+0x26>
  405cec:	f04f 0000 	mov.w	r0, #0
  405cf0:	4770      	bx	lr
  405cf2:	f04f 0001 	mov.w	r0, #1
  405cf6:	4770      	bx	lr
  405cf8:	20534f50 	.word	0x20534f50
  405cfc:	00000a31 	.word	0x00000a31
  405d00:	20534f50 	.word	0x20534f50
  405d04:	00000a33 	.word	0x00000a33
  405d08:	65746e69 	.word	0x65746e69
  405d0c:	70757272 	.word	0x70757272
  405d10:	202d2074 	.word	0x202d2074
  405d14:	20434441 	.word	0x20434441
  405d18:	202d2030 	.word	0x202d2030
  405d1c:	25206925 	.word	0x25206925
  405d20:	69252069 	.word	0x69252069
  405d24:	20692520 	.word	0x20692520
  405d28:	25206925 	.word	0x25206925
  405d2c:	0a202069 	.word	0x0a202069
  405d30:	00000000 	.word	0x00000000
  405d34:	61746144 	.word	0x61746144
  405d38:	6c6f6320 	.word	0x6c6f6320
  405d3c:	7463656c 	.word	0x7463656c
  405d40:	202c6465 	.word	0x202c6465
  405d44:	6e75616c 	.word	0x6e75616c
  405d48:	6e696863 	.word	0x6e696863
  405d4c:	6f632067 	.word	0x6f632067
  405d50:	6f72746e 	.word	0x6f72746e
  405d54:	6f6c206c 	.word	0x6f6c206c
  405d58:	6620706f 	.word	0x6620706f
  405d5c:	206d6f72 	.word	0x206d6f72
  405d60:	20636461 	.word	0x20636461
  405d64:	00000a30 	.word	0x00000a30
  405d68:	65746e69 	.word	0x65746e69
  405d6c:	70757272 	.word	0x70757272
  405d70:	202d2074 	.word	0x202d2074
  405d74:	20434441 	.word	0x20434441
  405d78:	202d2031 	.word	0x202d2031
  405d7c:	25206925 	.word	0x25206925
  405d80:	69252069 	.word	0x69252069
  405d84:	20692520 	.word	0x20692520
  405d88:	00000a20 	.word	0x00000a20
  405d8c:	61746144 	.word	0x61746144
  405d90:	6c6f6320 	.word	0x6c6f6320
  405d94:	7463656c 	.word	0x7463656c
  405d98:	202c6465 	.word	0x202c6465
  405d9c:	6e75616c 	.word	0x6e75616c
  405da0:	6e696863 	.word	0x6e696863
  405da4:	6f632067 	.word	0x6f632067
  405da8:	6f72746e 	.word	0x6f72746e
  405dac:	6f6c206c 	.word	0x6f6c206c
  405db0:	6620706f 	.word	0x6620706f
  405db4:	206d6f72 	.word	0x206d6f72
  405db8:	20636461 	.word	0x20636461
  405dbc:	000a2031 	.word	0x000a2031
  405dc0:	4441200a 	.word	0x4441200a
  405dc4:	65542043 	.word	0x65542043
  405dc8:	7265706d 	.word	0x7265706d
  405dcc:	72757461 	.word	0x72757461
  405dd0:	65542065 	.word	0x65542065
  405dd4:	6e697473 	.word	0x6e697473
  405dd8:	2d2d2067 	.word	0x2d2d2067
  405ddc:	2d2d2d2d 	.word	0x2d2d2d2d
  405de0:	2d2d2d2d 	.word	0x2d2d2d2d
  405de4:	2d2d2d2d 	.word	0x2d2d2d2d
  405de8:	0a2d2d2d 	.word	0x0a2d2d2d
  405dec:	00000000 	.word	0x00000000
  405df0:	20776152 	.word	0x20776152
  405df4:	61746144 	.word	0x61746144
  405df8:	00000a20 	.word	0x00000a20
  405dfc:	706d6554 	.word	0x706d6554
  405e00:	203d2031 	.word	0x203d2031
  405e04:	09206925 	.word	0x09206925
  405e08:	65542009 	.word	0x65542009
  405e0c:	2032706d 	.word	0x2032706d
  405e10:	6925203d 	.word	0x6925203d
  405e14:	20090920 	.word	0x20090920
  405e18:	706d6554 	.word	0x706d6554
  405e1c:	203d2033 	.word	0x203d2033
  405e20:	0a206925 	.word	0x0a206925
  405e24:	00000000 	.word	0x00000000
  405e28:	706d6554 	.word	0x706d6554
  405e2c:	203d2034 	.word	0x203d2034
  405e30:	09206925 	.word	0x09206925
  405e34:	65542009 	.word	0x65542009
  405e38:	2035706d 	.word	0x2035706d
  405e3c:	6925203d 	.word	0x6925203d
  405e40:	20090920 	.word	0x20090920
  405e44:	706d6554 	.word	0x706d6554
  405e48:	203d2036 	.word	0x203d2036
  405e4c:	0a206925 	.word	0x0a206925
  405e50:	00000000 	.word	0x00000000
  405e54:	706d6554 	.word	0x706d6554
  405e58:	746f4d20 	.word	0x746f4d20
  405e5c:	3d20726f 	.word	0x3d20726f
  405e60:	20692520 	.word	0x20692520
  405e64:	00000a20 	.word	0x00000a20
  405e68:	7543200a 	.word	0x7543200a
  405e6c:	6e657272 	.word	0x6e657272
  405e70:	6e612074 	.word	0x6e612074
  405e74:	6f562064 	.word	0x6f562064
  405e78:	6761746c 	.word	0x6761746c
  405e7c:	65542065 	.word	0x65542065
  405e80:	6e697473 	.word	0x6e697473
  405e84:	2d2d2067 	.word	0x2d2d2067
  405e88:	2d2d2d2d 	.word	0x2d2d2d2d
  405e8c:	2d2d2d2d 	.word	0x2d2d2d2d
  405e90:	2d2d2d2d 	.word	0x2d2d2d2d
  405e94:	0a2d2d2d 	.word	0x0a2d2d2d
  405e98:	00000000 	.word	0x00000000
  405e9c:	72727543 	.word	0x72727543
  405ea0:	203d2041 	.word	0x203d2041
  405ea4:	09206925 	.word	0x09206925
  405ea8:	75432009 	.word	0x75432009
  405eac:	20427272 	.word	0x20427272
  405eb0:	6925203d 	.word	0x6925203d
  405eb4:	20090920 	.word	0x20090920
  405eb8:	72727543 	.word	0x72727543
  405ebc:	203d2043 	.word	0x203d2043
  405ec0:	0a206925 	.word	0x0a206925
  405ec4:	00000000 	.word	0x00000000
  405ec8:	70707553 	.word	0x70707553
  405ecc:	5620796c 	.word	0x5620796c
  405ed0:	61746c6f 	.word	0x61746c6f
  405ed4:	3d206567 	.word	0x3d206567
  405ed8:	20692520 	.word	0x20692520
  405edc:	00000a20 	.word	0x00000a20
  405ee0:	746c6544 	.word	0x746c6544
  405ee4:	3d207361 	.word	0x3d207361
  405ee8:	20662520 	.word	0x20662520
  405eec:	66252009 	.word	0x66252009
  405ef0:	0000000a 	.word	0x0000000a
  405ef4:	72727543 	.word	0x72727543
  405ef8:	6d697420 	.word	0x6d697420
  405efc:	203d2065 	.word	0x203d2065
  405f00:	000a6625 	.word	0x000a6625
  405f04:	203d206b 	.word	0x203d206b
  405f08:	0a206925 	.word	0x0a206925
  405f0c:	00000000 	.word	0x00000000
  405f10:	74736554 	.word	0x74736554
  405f14:	20676e69 	.word	0x20676e69
  405f18:	656d6954 	.word	0x656d6954
  405f1c:	6f432072 	.word	0x6f432072
  405f20:	65746e75 	.word	0x65746e75
  405f24:	00007372 	.word	0x00007372
  405f28:	6f636e45 	.word	0x6f636e45
  405f2c:	20726564 	.word	0x20726564
  405f30:	203d2041 	.word	0x203d2041
  405f34:	75252009 	.word	0x75252009
  405f38:	09203b20 	.word	0x09203b20
  405f3c:	20752520 	.word	0x20752520
  405f40:	0000000a 	.word	0x0000000a
  405f44:	6f636e45 	.word	0x6f636e45
  405f48:	20726564 	.word	0x20726564
  405f4c:	203d2042 	.word	0x203d2042
  405f50:	75252009 	.word	0x75252009
  405f54:	09203b20 	.word	0x09203b20
  405f58:	20752520 	.word	0x20752520
  405f5c:	00000a0a 	.word	0x00000a0a
  405f60:	682f2e2e 	.word	0x682f2e2e
  405f64:	732f6c61 	.word	0x732f6c61
  405f68:	682f6372 	.word	0x682f6372
  405f6c:	615f6c61 	.word	0x615f6c61
  405f70:	615f6364 	.word	0x615f6364
  405f74:	636e7973 	.word	0x636e7973
  405f78:	0000632e 	.word	0x0000632e
  405f7c:	682f2e2e 	.word	0x682f2e2e
  405f80:	732f6c61 	.word	0x732f6c61
  405f84:	682f6372 	.word	0x682f6372
  405f88:	695f6c61 	.word	0x695f6c61
  405f8c:	00632e6f 	.word	0x00632e6f
  405f90:	682f2e2e 	.word	0x682f2e2e
  405f94:	732f6c61 	.word	0x732f6c61
  405f98:	682f6372 	.word	0x682f6372
  405f9c:	705f6c61 	.word	0x705f6c61
  405fa0:	632e6d77 	.word	0x632e6d77
  405fa4:	00000000 	.word	0x00000000
  405fa8:	682f2e2e 	.word	0x682f2e2e
  405fac:	732f6c61 	.word	0x732f6c61
  405fb0:	682f6372 	.word	0x682f6372
  405fb4:	745f6c61 	.word	0x745f6c61
  405fb8:	72656d69 	.word	0x72656d69
  405fbc:	0000632e 	.word	0x0000632e
  405fc0:	682f2e2e 	.word	0x682f2e2e
  405fc4:	732f6c61 	.word	0x732f6c61
  405fc8:	682f6372 	.word	0x682f6372
  405fcc:	755f6c61 	.word	0x755f6c61
  405fd0:	74726173 	.word	0x74726173
  405fd4:	6e79735f 	.word	0x6e79735f
  405fd8:	00632e63 	.word	0x00632e63
  405fdc:	682f2e2e 	.word	0x682f2e2e
  405fe0:	752f6c61 	.word	0x752f6c61
  405fe4:	736c6974 	.word	0x736c6974
  405fe8:	6372732f 	.word	0x6372732f
  405fec:	6974752f 	.word	0x6974752f
  405ff0:	6c5f736c 	.word	0x6c5f736c
  405ff4:	2e747369 	.word	0x2e747369
  405ff8:	00000063 	.word	0x00000063
  405ffc:	682f2e2e 	.word	0x682f2e2e
  406000:	752f6c61 	.word	0x752f6c61
  406004:	736c6974 	.word	0x736c6974
  406008:	6372732f 	.word	0x6372732f
  40600c:	6974752f 	.word	0x6974752f
  406010:	725f736c 	.word	0x725f736c
  406014:	62676e69 	.word	0x62676e69
  406018:	65666675 	.word	0x65666675
  40601c:	00632e72 	.word	0x00632e72

00406020 <_afecs>:
  406020:	00000000 2f84310b 23000000 ffffffff     .....1./...#....
  406030:	0000ffff 00000000 00000000 00000000     ................
  406040:	0000010c 00000000 00000000 00000000     ................
  406050:	00000000 00000200 00000200 00000200     ................
  406060:	00000200 00000200 00000200 00000200     ................
  406070:	00000200 00000200 00000200 00000200     ................
  406080:	00000200 00000001 2f84310b 23000000     .........1./...#
  406090:	ffffffff 0000ffff 00000000 00000000     ................
  4060a0:	00000000 0000010c 00000000 00000000     ................
	...
  4060b8:	00000200 00000200 00000200 00000200     ................
  4060c8:	00000200 00000200 00000200 00000200     ................
  4060d8:	00000200 00000200 00000200 00000200     ................
  4060e8:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  4060f8:	63656661 0000632e                       afec.c..

00406100 <_ext_irq>:
  406100:	00000000 00000024 00000000 00000000     ....$...........
	...
  40611c:	00000001 00002000 00002000 00002000     ..... ... ... ..
  40612c:	00000000 00002000 00000000 00000003     ..... ..........
  40613c:	00080000 00000000 00000000 00000000     ................
	...

00406154 <_pio_irq_n>:
  406154:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  406164:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  406174:	00000000                                ....

00406178 <_pwms>:
  406178:	40020000 0000001f 00010019 00000001     ...@............
  406188:	00000001 000000ff 00000000 00000004     ................
	...
  4061a4:	00000002 00406200 00000001 2040038c     .....b@.......@ 
  4061b4:	4005c000 0000003c 00010019 00000001     ...@<...........
  4061c4:	00000001 000000ff 00000000 00000004     ................
	...
  4061e0:	00000001 004061f0 00000001 20400380     .....a@.......@ 

004061f0 <_ch_cfg1>:
  4061f0:	00000000 0000010b 000003e8 00000200     ................

00406200 <_ch_cfg0>:
  406200:	00000000 0000010b 000003e8 00000200     ................
  406210:	00000002 0000010b 000003e8 00000200     ................
  406220:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  406230:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  406240:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

0040624c <_usarts>:
  40624c:	00000001 001008c0 000100f4 682f2e2e     ............../h
  40625c:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  40626c:	632e7472 00000000                       rt.c....

00406274 <_cfgs>:
  406274:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  406284:	00000040 00000000 00000040 00000000     @.......@.......
  406294:	00000040 00000000 00000040 00000000     @.......@.......
  4062a4:	00000040 00000000 00000040 00000000     @.......@.......
  4062b4:	00000040 00000000 00000040 00000000     @.......@.......
  4062c4:	00000040 00000000 00000040 00000000     @.......@.......
  4062d4:	00000040 00000000 00000040 00000000     @.......@.......
  4062e4:	00000040 00000000 00000040 00000000     @.......@.......
  4062f4:	00000040 00000000 00000040 00000000     @.......@.......
  406304:	00000040 00000000 00000040 00000000     @.......@.......
  406314:	00000040 00000000 00000040 00000000     @.......@.......
  406324:	00000040 00000000 00000040 00000000     @.......@.......

00406334 <_global_impure_ptr>:
  406334:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  406344:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  406354:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  406364:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  406374:	4e614e00 00000000                       .NaN....

0040637c <__sf_fake_stderr>:
	...

0040639c <__sf_fake_stdin>:
	...

004063bc <__sf_fake_stdout>:
	...

004063e0 <__mprec_bigtens>:
  4063e0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4063f0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  406400:	7f73bf3c 75154fdd                       <.s..O.u

00406408 <__mprec_tens>:
  406408:	00000000 3ff00000 00000000 40240000     .......?......$@
  406418:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  406428:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  406438:	00000000 412e8480 00000000 416312d0     .......A......cA
  406448:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  406458:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406468:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406478:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  406488:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406498:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4064a8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4064b8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4064c8:	79d99db4 44ea7843                       ...yCx.D

004064d0 <p05.6047>:
  4064d0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  4064e0:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  4064f0:	5849534f 00002e00                                OSIX...

004064f7 <_ctype_>:
  4064f7:	20202000 20202020 28282020 20282828     .         ((((( 
  406507:	20202020 20202020 20202020 20202020                     
  406517:	10108820 10101010 10101010 10101010      ...............
  406527:	04040410 04040404 10040404 10101010     ................
  406537:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406547:	01010101 01010101 01010101 10101010     ................
  406557:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406567:	02020202 02020202 02020202 10101010     ................
  406577:	00000020 00000000 00000000 00000000      ...............
	...

004065f8 <_init>:
  4065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4065fa:	bf00      	nop
  4065fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4065fe:	bc08      	pop	{r3}
  406600:	469e      	mov	lr, r3
  406602:	4770      	bx	lr

00406604 <__init_array_start>:
  406604:	0040018d 	.word	0x0040018d

00406608 <_fini>:
  406608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40660a:	bf00      	nop
  40660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40660e:	bc08      	pop	{r3}
  406610:	469e      	mov	lr, r3
  406612:	4770      	bx	lr

00406614 <__fini_array_start>:
  406614:	00400169 	.word	0x00400169
