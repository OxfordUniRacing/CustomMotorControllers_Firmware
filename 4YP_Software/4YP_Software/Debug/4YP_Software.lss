
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008378  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  00408378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005d0  20400218  00408590  00020218  2**2
                  ALLOC
  3 .heap         00000200  204007e8  00408b60  00020218  2**0
                  ALLOC
  4 .stack        00000400  204009e8  00408d60  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   00030b6c  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005fef  00000000  00000000  00050e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000dbd6  00000000  00000000  00056dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f68  00000000  00000000  000649d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e40  00000000  00000000  00065938  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0004a4ad  00000000  00000000  00066778  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000232f5  00000000  00000000  000b0c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001594a7  00000000  00000000  000d3f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000367c  00000000  00000000  0022d3c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 0d 40 20 b1 10 40 00 ad 10 40 00 ad 10 40 00     ..@ ..@...@...@.
  400010:	ad 10 40 00 ad 10 40 00 ad 10 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ad 10 40 00 ad 10 40 00 00 00 00 00 ad 10 40 00     ..@...@.......@.
  40003c:	ad 10 40 00 ad 10 40 00 ad 10 40 00 ad 10 40 00     ..@...@...@...@.
  40004c:	ad 10 40 00 ad 10 40 00 ad 10 40 00 ad 10 40 00     ..@...@...@...@.
  40005c:	ad 10 40 00 ad 10 40 00 00 00 00 00 75 25 40 00     ..@...@.....u%@.
  40006c:	69 25 40 00 ad 10 40 00 ad 10 40 00 ad 10 40 00     i%@...@...@...@.
  40007c:	ad 10 40 00 5d 25 40 00 ad 10 40 00 ad 10 40 00     ..@.]%@...@...@.
  40008c:	ad 10 40 00 ad 10 40 00 ad 10 40 00 ad 10 40 00     ..@...@...@...@.
  40009c:	99 2b 40 00 ad 10 40 00 ad 10 40 00 ad 10 40 00     .+@...@...@...@.
  4000ac:	ad 10 40 00 ad 10 40 00 1d 21 40 00 ad 10 40 00     ..@...@..!@...@.
  4000bc:	29 27 40 00 ad 10 40 00 ad 10 40 00 ad 10 40 00     )'@...@...@...@.
  4000cc:	ad 10 40 00 ad 10 40 00 0d 23 40 00 ad 10 40 00     ..@...@..#@...@.
  4000dc:	ad 10 40 00 31 21 40 00 ad 10 40 00 ad 10 40 00     ..@.1!@...@...@.
  4000ec:	ad 10 40 00 ad 10 40 00 ad 10 40 00 ad 10 40 00     ..@...@...@...@.
  4000fc:	ad 10 40 00 ad 10 40 00 ad 10 40 00 ad 2b 40 00     ..@...@...@..+@.
  40010c:	ad 10 40 00 ad 10 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 ad 10 40 00 ad 10 40 00 09 2f 40 00     ......@...@../@.
  40012c:	ad 10 40 00 3d 27 40 00 ad 10 40 00 ad 10 40 00     ..@.='@...@...@.
  40013c:	ad 10 40 00 ad 10 40 00 ad 10 40 00 ad 10 40 00     ..@...@...@...@.
  40014c:	ad 10 40 00 ad 10 40 00 ad 10 40 00 ad 10 40 00     ..@...@...@...@.
  40015c:	ad 10 40 00 ad 10 40 00 ad 10 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	00408378 	.word	0x00408378

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00408378 	.word	0x00408378
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	00408378 	.word	0x00408378
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00401589 	.word	0x00401589
  4001e4:	0040319d 	.word	0x0040319d

004001e8 <SVPWM>:
	if (I_m > I_MAX){I_m = I_MAX;}
	*Id_r = C1 - sqrt(C1_SQR - 0.5*(I_m*I_m));
	*Iq_r = sqrt(I_m*I_m - (*Id_r)*(*Id_r));
}	
int cntrrar;
void SVPWM(float Va_aim, float Vb_aim, float* PWM, float V_dc) {							//Space Vector Modulation Function
  4001e8:	ee07 0a10 	vmov	s14, r0
  4001ec:	ee07 1a90 	vmov	s15, r1
  4001f0:	ee06 3a90 	vmov	s13, r3
	float Vc_aim;
	Vc_aim = -Vb_aim - Va_aim;										//Calculates third voltage aim
  4001f4:	eeb1 6a67 	vneg.f32	s12, s15
  4001f8:	ee36 6a47 	vsub.f32	s12, s12, s14
	
	float Va_comp, Vb_comp, Vc_comp;
	Va_comp = (V_dc-Va_aim)/V_dc;									//normalise 
  4001fc:	ee76 5ac7 	vsub.f32	s11, s13, s14
  400200:	ee85 7aa6 	vdiv.f32	s14, s11, s13
	Vb_comp = (V_dc-Vb_aim)/V_dc;	
  400204:	ee76 5ae7 	vsub.f32	s11, s13, s15
  400208:	eec5 7aa6 	vdiv.f32	s15, s11, s13
	Vc_comp = (V_dc-Vc_aim)/V_dc;
  40020c:	ee36 6ac6 	vsub.f32	s12, s13, s12
  400210:	eec6 5a26 	vdiv.f32	s11, s12, s13
	
	float V_min;
	
	if((Va_comp<Vb_comp)&&(Va_comp<Vc_comp)) {					//Finds minimum 
  400214:	eeb4 7ae7 	vcmpe.f32	s14, s15
  400218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40021c:	d504      	bpl.n	400228 <SVPWM+0x40>
  40021e:	eeb4 7ae5 	vcmpe.f32	s14, s11
  400222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400226:	d423      	bmi.n	400270 <SVPWM+0x88>
		V_min = Va_comp;
	}else{
		if(Vb_comp<Vc_comp){
  400228:	eef4 7ae5 	vcmpe.f32	s15, s11
  40022c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400230:	d521      	bpl.n	400276 <SVPWM+0x8e>
			V_min = Vb_comp;
  400232:	eeb0 6a67 	vmov.f32	s12, s15
			V_min = Vc_comp;
		}
	}
	
	float Va_dc, Vb_dc, Vc_dc;					//does down clamping and sets minimum to zero, subtracting minimum from all three
	PWM[0] = 1 - (Va_comp - V_min);
  400236:	ee37 7a46 	vsub.f32	s14, s14, s12
  40023a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  40023e:	ee36 7ac7 	vsub.f32	s14, s13, s14
  400242:	ed82 7a00 	vstr	s14, [r2]
	PWM[1] = 1 - (Vb_comp - V_min);
  400246:	ee77 7ac6 	vsub.f32	s15, s15, s12
  40024a:	ee76 7ae7 	vsub.f32	s15, s13, s15
  40024e:	edc2 7a01 	vstr	s15, [r2, #4]
	PWM[2] = 1 - (Vc_comp - V_min);
  400252:	ee75 5ac6 	vsub.f32	s11, s11, s12
  400256:	ee76 6ae5 	vsub.f32	s13, s13, s11
  40025a:	edc2 6a02 	vstr	s13, [r2, #8]
	cntrrar++;
  40025e:	4a09      	ldr	r2, [pc, #36]	; (400284 <SVPWM+0x9c>)
  400260:	6813      	ldr	r3, [r2, #0]
  400262:	3301      	adds	r3, #1
  400264:	6013      	str	r3, [r2, #0]
	if(cntrrar == 15000){
  400266:	f643 2298 	movw	r2, #15000	; 0x3a98
  40026a:	4293      	cmp	r3, r2
  40026c:	d006      	beq.n	40027c <SVPWM+0x94>
  40026e:	4770      	bx	lr
		V_min = Va_comp;
  400270:	eeb0 6a47 	vmov.f32	s12, s14
  400274:	e7df      	b.n	400236 <SVPWM+0x4e>
			V_min = Vc_comp;
  400276:	eeb0 6a65 	vmov.f32	s12, s11
  40027a:	e7dc      	b.n	400236 <SVPWM+0x4e>
		cntrrar = 0;
  40027c:	2200      	movs	r2, #0
  40027e:	4b01      	ldr	r3, [pc, #4]	; (400284 <SVPWM+0x9c>)
  400280:	601a      	str	r2, [r3, #0]
		
		//printf("\n PWM A = %f \t PWM B = %f \t PWM C - %f ", PWM[0], PWM[1], PWM[2]);
	}

}
  400282:	e7f4      	b.n	40026e <SVPWM+0x86>
  400284:	2040055c 	.word	0x2040055c

00400288 <update_PWM>:
	}
}



void update_PWM(float* PWM){
  400288:	b570      	push	{r4, r5, r6, lr}
  40028a:	ed2d 8b02 	vpush	{d8}
  40028e:	4605      	mov	r5, r0
	pwm_set_duty(PWM_PHASE_A, (int) ((PWM_PERIOD-1) * PWM[2]));
  400290:	edd0 7a02 	vldr	s15, [r0, #8]
  400294:	ed9f 8a12 	vldr	s16, [pc, #72]	; 4002e0 <update_PWM+0x58>
  400298:	ee67 7a88 	vmul.f32	s15, s15, s16
  40029c:	4e11      	ldr	r6, [pc, #68]	; (4002e4 <update_PWM+0x5c>)
  40029e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4002a2:	ee17 2a90 	vmov	r2, s15
  4002a6:	2100      	movs	r1, #0
  4002a8:	4630      	mov	r0, r6
  4002aa:	4c0f      	ldr	r4, [pc, #60]	; (4002e8 <update_PWM+0x60>)
  4002ac:	47a0      	blx	r4
	pwm_set_duty(PWM_PHASE_B, (int) ((PWM_PERIOD-1) * PWM[1]));
  4002ae:	edd5 7a01 	vldr	s15, [r5, #4]
  4002b2:	ee67 7a88 	vmul.f32	s15, s15, s16
  4002b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4002ba:	ee17 2a90 	vmov	r2, s15
  4002be:	2102      	movs	r1, #2
  4002c0:	4630      	mov	r0, r6
  4002c2:	47a0      	blx	r4
	pwm_set_duty(PWM_PHASE_C, (int) ((PWM_PERIOD-1) * PWM[0]));
  4002c4:	edd5 7a00 	vldr	s15, [r5]
  4002c8:	ee67 7a88 	vmul.f32	s15, s15, s16
  4002cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4002d0:	ee17 2a90 	vmov	r2, s15
  4002d4:	2100      	movs	r1, #0
  4002d6:	4805      	ldr	r0, [pc, #20]	; (4002ec <update_PWM+0x64>)
  4002d8:	47a0      	blx	r4
	
  4002da:	ecbd 8b02 	vpop	{d8}
  4002de:	bd70      	pop	{r4, r5, r6, pc}
  4002e0:	4479c000 	.word	0x4479c000
  4002e4:	204005f8 	.word	0x204005f8
  4002e8:	00400fd5 	.word	0x00400fd5
  4002ec:	2040079c 	.word	0x2040079c

004002f0 <controlV>:
void controlV(float torquerequest, float V_dc, int pos_HS_state, float pos_HS_t1, float *pos_HS_dts, float pos_ENC_angle) {
  4002f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4002f2:	ed2d 8b02 	vpush	{d8}
  4002f6:	4610      	mov	r0, r2
  4002f8:	4619      	mov	r1, r3
	theta_e = EstimateTheta(pos_HS_state, pos_HS_t1, &pos_HS_dts, pos_ENC_angle);
  4002fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4002fc:	aa08      	add	r2, sp, #32
  4002fe:	4c26      	ldr	r4, [pc, #152]	; (400398 <controlV+0xa8>)
  400300:	47a0      	blx	r4
  400302:	4b26      	ldr	r3, [pc, #152]	; (40039c <controlV+0xac>)
  400304:	6018      	str	r0, [r3, #0]
	float sintheta_e = sin(theta_e);
  400306:	4b26      	ldr	r3, [pc, #152]	; (4003a0 <controlV+0xb0>)
  400308:	4798      	blx	r3
  40030a:	4606      	mov	r6, r0
  40030c:	460f      	mov	r7, r1
  40030e:	4b25      	ldr	r3, [pc, #148]	; (4003a4 <controlV+0xb4>)
  400310:	4798      	blx	r3
  400312:	4c25      	ldr	r4, [pc, #148]	; (4003a8 <controlV+0xb8>)
  400314:	47a0      	blx	r4
  400316:	ee08 0a10 	vmov	s16, r0
	float costheta_e = cos(theta_e);	//(Currently uses fast sin and cosine)
  40031a:	4630      	mov	r0, r6
  40031c:	4639      	mov	r1, r7
  40031e:	4b23      	ldr	r3, [pc, #140]	; (4003ac <controlV+0xbc>)
  400320:	4798      	blx	r3
  400322:	47a0      	blx	r4
  400324:	ee07 0a10 	vmov	s14, r0
	arm_inv_park_f32(Vd_aim,Vq_aim,&Valpha_aim,&Vbeta_aim,sintheta_e,costheta_e);	//Inverse Park transform
  400328:	4b21      	ldr	r3, [pc, #132]	; (4003b0 <controlV+0xc0>)
  40032a:	ed93 6a00 	vldr	s12, [r3]
  40032e:	4b21      	ldr	r3, [pc, #132]	; (4003b4 <controlV+0xc4>)
  400330:	edd3 6a00 	vldr	s13, [r3]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
  400334:	ee67 7a06 	vmul.f32	s15, s14, s12
  400338:	ee68 5a26 	vmul.f32	s11, s16, s13
  40033c:	ee77 7ae5 	vsub.f32	s15, s15, s11

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
  400340:	ee28 8a06 	vmul.f32	s16, s16, s12
  400344:	ee27 7a26 	vmul.f32	s14, s14, s13
  400348:	ee38 8a07 	vadd.f32	s16, s16, s14
    *pIb = -0.5f * Ialpha + 0.8660254039f * Ibeta;
  40034c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
  400350:	ee27 7a87 	vmul.f32	s14, s15, s14
  400354:	eddf 6a18 	vldr	s13, [pc, #96]	; 4003b8 <controlV+0xc8>
  400358:	ee28 8a26 	vmul.f32	s16, s16, s13
	SVPWM(Va_aim, Vb_aim, (float32_t *)PWM_data, V_dc);										//Updates PWM values using space vector PWM
  40035c:	4c17      	ldr	r4, [pc, #92]	; (4003bc <controlV+0xcc>)
  40035e:	4b18      	ldr	r3, [pc, #96]	; (4003c0 <controlV+0xd0>)
  400360:	4622      	mov	r2, r4
  400362:	ee37 7a08 	vadd.f32	s14, s14, s16
  400366:	ee17 1a10 	vmov	r1, s14
  40036a:	ee17 0a90 	vmov	r0, s15
  40036e:	4d15      	ldr	r5, [pc, #84]	; (4003c4 <controlV+0xd4>)
  400370:	47a8      	blx	r5
	update_PWM((float32_t *)PWM_data);
  400372:	4620      	mov	r0, r4
  400374:	4b14      	ldr	r3, [pc, #80]	; (4003c8 <controlV+0xd8>)
  400376:	4798      	blx	r3
	cntrrr++;
  400378:	4a14      	ldr	r2, [pc, #80]	; (4003cc <controlV+0xdc>)
  40037a:	6813      	ldr	r3, [r2, #0]
  40037c:	3301      	adds	r3, #1
  40037e:	6013      	str	r3, [r2, #0]
	if(cntrrr == 15000){
  400380:	f643 2298 	movw	r2, #15000	; 0x3a98
  400384:	4293      	cmp	r3, r2
  400386:	d002      	beq.n	40038e <controlV+0x9e>
}
  400388:	ecbd 8b02 	vpop	{d8}
  40038c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cntrrr = 0;
  40038e:	2200      	movs	r2, #0
  400390:	4b0e      	ldr	r3, [pc, #56]	; (4003cc <controlV+0xdc>)
  400392:	601a      	str	r2, [r3, #0]
}
  400394:	e7f8      	b.n	400388 <controlV+0x98>
  400396:	bf00      	nop
  400398:	00400489 	.word	0x00400489
  40039c:	20400518 	.word	0x20400518
  4003a0:	0040485d 	.word	0x0040485d
  4003a4:	00403251 	.word	0x00403251
  4003a8:	00404eb5 	.word	0x00404eb5
  4003ac:	004031bd 	.word	0x004031bd
  4003b0:	20400570 	.word	0x20400570
  4003b4:	20400574 	.word	0x20400574
  4003b8:	3f5db3d7 	.word	0x3f5db3d7
  4003bc:	20400560 	.word	0x20400560
  4003c0:	40e00000 	.word	0x40e00000
  4003c4:	004001e9 	.word	0x004001e9
  4003c8:	00400289 	.word	0x00400289
  4003cc:	20400234 	.word	0x20400234

004003d0 <gather_control_data>:




//get position data, timing and torque request
void gather_control_data(void){
  4003d0:	b508      	push	{r3, lr}
	//get torque request
	control_torque_request = 0;
  4003d2:	2200      	movs	r2, #0
  4003d4:	4b05      	ldr	r3, [pc, #20]	; (4003ec <gather_control_data+0x1c>)
  4003d6:	601a      	str	r2, [r3, #0]
	
	get_Data_Pos(&(control_pos_sens_deltas[0]), &control_pos_sens_sector, &control_pos_sens_time_in_current_sector);
  4003d8:	4a05      	ldr	r2, [pc, #20]	; (4003f0 <gather_control_data+0x20>)
  4003da:	4906      	ldr	r1, [pc, #24]	; (4003f4 <gather_control_data+0x24>)
  4003dc:	4806      	ldr	r0, [pc, #24]	; (4003f8 <gather_control_data+0x28>)
  4003de:	4b07      	ldr	r3, [pc, #28]	; (4003fc <gather_control_data+0x2c>)
  4003e0:	4798      	blx	r3
	
	
	//do last as this is the most frequently updated data
	encoder_get_angle(& control_encoder_angle);
  4003e2:	4807      	ldr	r0, [pc, #28]	; (400400 <gather_control_data+0x30>)
  4003e4:	4b07      	ldr	r3, [pc, #28]	; (400404 <gather_control_data+0x34>)
  4003e6:	4798      	blx	r3
  4003e8:	bd08      	pop	{r3, pc}
  4003ea:	bf00      	nop
  4003ec:	20400578 	.word	0x20400578
  4003f0:	204004d4 	.word	0x204004d4
  4003f4:	20400520 	.word	0x20400520
  4003f8:	2040054c 	.word	0x2040054c
  4003fc:	00400a61 	.word	0x00400a61
  400400:	204004d0 	.word	0x204004d0
  400404:	00400849 	.word	0x00400849

00400408 <start_control_loop_dummy>:
}


//process ADC data and start the control loop
//this is being called from the ADC DMA, so we know that the analog sensor values passed are not going to change, hence use pointers instead of copyin data
void start_control_loop_dummy(int * raw_currents, int raw_voltage){
  400408:	b570      	push	{r4, r5, r6, lr}
  40040a:	b082      	sub	sp, #8
  40040c:	4605      	mov	r5, r0
  40040e:	460e      	mov	r6, r1
	control_currents[0] = reconstruct_curr_A(raw_currents[0]);
  400410:	6800      	ldr	r0, [r0, #0]
  400412:	4b10      	ldr	r3, [pc, #64]	; (400454 <start_control_loop_dummy+0x4c>)
  400414:	4798      	blx	r3
  400416:	4c10      	ldr	r4, [pc, #64]	; (400458 <start_control_loop_dummy+0x50>)
  400418:	6020      	str	r0, [r4, #0]
	control_currents[1] = reconstruct_curr_B(raw_currents[1]);
  40041a:	6868      	ldr	r0, [r5, #4]
  40041c:	4b0f      	ldr	r3, [pc, #60]	; (40045c <start_control_loop_dummy+0x54>)
  40041e:	4798      	blx	r3
  400420:	6060      	str	r0, [r4, #4]
	control_currents[2] = reconstruct_curr_C(raw_currents[2]);
  400422:	68a8      	ldr	r0, [r5, #8]
  400424:	4b0e      	ldr	r3, [pc, #56]	; (400460 <start_control_loop_dummy+0x58>)
  400426:	4798      	blx	r3
  400428:	60a0      	str	r0, [r4, #8]
	
	control_supply_voltage = reconstruct_bus_voltage(raw_voltage);
  40042a:	4630      	mov	r0, r6
  40042c:	4b0d      	ldr	r3, [pc, #52]	; (400464 <start_control_loop_dummy+0x5c>)
  40042e:	4798      	blx	r3
  400430:	4601      	mov	r1, r0
  400432:	4b0d      	ldr	r3, [pc, #52]	; (400468 <start_control_loop_dummy+0x60>)
  400434:	6018      	str	r0, [r3, #0]
	

	
	//start control loop below
//Control(control_torque_request, control_supply_voltage, control_pos_sens_sector, control_pos_sens_time_in_current_sector, &control_pos_sens_deltas, control_encoder_angle)
	controlV(control_torque_request, control_supply_voltage, control_pos_sens_sector, control_pos_sens_time_in_current_sector, &control_pos_sens_deltas, control_encoder_angle);
  400436:	4b0d      	ldr	r3, [pc, #52]	; (40046c <start_control_loop_dummy+0x64>)
  400438:	681b      	ldr	r3, [r3, #0]
  40043a:	4a0d      	ldr	r2, [pc, #52]	; (400470 <start_control_loop_dummy+0x68>)
  40043c:	6812      	ldr	r2, [r2, #0]
  40043e:	480d      	ldr	r0, [pc, #52]	; (400474 <start_control_loop_dummy+0x6c>)
  400440:	6800      	ldr	r0, [r0, #0]
  400442:	4c0d      	ldr	r4, [pc, #52]	; (400478 <start_control_loop_dummy+0x70>)
  400444:	6824      	ldr	r4, [r4, #0]
  400446:	9401      	str	r4, [sp, #4]
  400448:	4c0c      	ldr	r4, [pc, #48]	; (40047c <start_control_loop_dummy+0x74>)
  40044a:	9400      	str	r4, [sp, #0]
  40044c:	4c0c      	ldr	r4, [pc, #48]	; (400480 <start_control_loop_dummy+0x78>)
  40044e:	47a0      	blx	r4
  400450:	b002      	add	sp, #8
  400452:	bd70      	pop	{r4, r5, r6, pc}
  400454:	00400571 	.word	0x00400571
  400458:	2040057c 	.word	0x2040057c
  40045c:	004005c1 	.word	0x004005c1
  400460:	00400611 	.word	0x00400611
  400464:	004004c5 	.word	0x004004c5
  400468:	204004f8 	.word	0x204004f8
  40046c:	204004d4 	.word	0x204004d4
  400470:	20400520 	.word	0x20400520
  400474:	20400578 	.word	0x20400578
  400478:	204004d0 	.word	0x204004d0
  40047c:	2040054c 	.word	0x2040054c
  400480:	004002f1 	.word	0x004002f1

00400484 <EstimateThetaHS>:
}

float EstimateThetaHS(int pos_HS_state, float pos_HS_t1, float *pos_HS_dts){
//Estimate angle from hall sensors
return 0;
}
  400484:	2000      	movs	r0, #0
  400486:	4770      	bx	lr

00400488 <EstimateTheta>:
float EstimateTheta(int pos_HS_state, float pos_HS_t1, float *pos_HS_dts, float pos_ENC_angle){
  400488:	b508      	push	{r3, lr}
  40048a:	ed2d 8b02 	vpush	{d8}
  40048e:	ee08 3a10 	vmov	s16, r3
	theta_e_HS = EstimateThetaHS(pos_HS_state, pos_HS_t1, pos_HS_dts);
  400492:	4b08      	ldr	r3, [pc, #32]	; (4004b4 <EstimateTheta+0x2c>)
  400494:	4798      	blx	r3
  400496:	4b08      	ldr	r3, [pc, #32]	; (4004b8 <EstimateTheta+0x30>)
  400498:	6018      	str	r0, [r3, #0]
	theta_e_ENC =  pos_ENC_angle*(PP*GR);
  40049a:	eddf 7a08 	vldr	s15, [pc, #32]	; 4004bc <EstimateTheta+0x34>
  40049e:	ee68 7a27 	vmul.f32	s15, s16, s15
  4004a2:	4b07      	ldr	r3, [pc, #28]	; (4004c0 <EstimateTheta+0x38>)
  4004a4:	edc3 7a00 	vstr	s15, [r3]
}
  4004a8:	ee17 0a90 	vmov	r0, s15
  4004ac:	ecbd 8b02 	vpop	{d8}
  4004b0:	bd08      	pop	{r3, pc}
  4004b2:	bf00      	nop
  4004b4:	00400485 	.word	0x00400485
  4004b8:	2040056c 	.word	0x2040056c
  4004bc:	42960000 	.word	0x42960000
  4004c0:	2040051c 	.word	0x2040051c

004004c4 <reconstruct_bus_voltage>:


float reconstruct_bus_voltage(uint32_t raw_voltage_data){
	
	return 0;
}
  4004c4:	2000      	movs	r0, #0
  4004c6:	4770      	bx	lr

004004c8 <raw_data_to_voltage>:
	
	return 0;
}


float raw_data_to_voltage(uint32_t analog_data){
  4004c8:	b510      	push	{r4, lr}
	//12 bit ADCs
	//Vref = 3.3V
	float voltage = (((float) analog_data) / (4096)) * 3.3;
  4004ca:	ee07 0a90 	vmov	s15, r0
  4004ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  4004d2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 400500 <raw_data_to_voltage+0x38>
  4004d6:	ee67 7a27 	vmul.f32	s15, s14, s15
  4004da:	ee17 0a90 	vmov	r0, s15
  4004de:	4b09      	ldr	r3, [pc, #36]	; (400504 <raw_data_to_voltage+0x3c>)
  4004e0:	4798      	blx	r3
  4004e2:	a305      	add	r3, pc, #20	; (adr r3, 4004f8 <raw_data_to_voltage+0x30>)
  4004e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4004e8:	4c07      	ldr	r4, [pc, #28]	; (400508 <raw_data_to_voltage+0x40>)
  4004ea:	47a0      	blx	r4
  4004ec:	4b07      	ldr	r3, [pc, #28]	; (40050c <raw_data_to_voltage+0x44>)
  4004ee:	4798      	blx	r3
	//printf("raw data - %i \t voltage - %f \n",(int) analog_data, voltage);
	return voltage;
  4004f0:	bd10      	pop	{r4, pc}
  4004f2:	bf00      	nop
  4004f4:	f3af 8000 	nop.w
  4004f8:	66666666 	.word	0x66666666
  4004fc:	400a6666 	.word	0x400a6666
  400500:	39800000 	.word	0x39800000
  400504:	0040485d 	.word	0x0040485d
  400508:	00404905 	.word	0x00404905
  40050c:	00404eb5 	.word	0x00404eb5

00400510 <calibrate_curr_sensors>:
void calibrate_curr_sensors(void){
  400510:	b570      	push	{r4, r5, r6, lr}
	dma_adc_0_enable_for_one_transaction();
  400512:	4b0e      	ldr	r3, [pc, #56]	; (40054c <calibrate_curr_sensors+0x3c>)
  400514:	4798      	blx	r3
	dma_adc_1_enable_for_one_transaction();
  400516:	4b0e      	ldr	r3, [pc, #56]	; (400550 <calibrate_curr_sensors+0x40>)
  400518:	4798      	blx	r3
	delay_ms(1);
  40051a:	2001      	movs	r0, #1
  40051c:	4b0d      	ldr	r3, [pc, #52]	; (400554 <calibrate_curr_sensors+0x44>)
  40051e:	4798      	blx	r3
	curr_A_offset = raw_data_to_voltage(adc_read(ADC_CURRENT_A));
  400520:	4e0d      	ldr	r6, [pc, #52]	; (400558 <calibrate_curr_sensors+0x48>)
  400522:	2108      	movs	r1, #8
  400524:	4630      	mov	r0, r6
  400526:	4d0d      	ldr	r5, [pc, #52]	; (40055c <calibrate_curr_sensors+0x4c>)
  400528:	47a8      	blx	r5
  40052a:	4c0d      	ldr	r4, [pc, #52]	; (400560 <calibrate_curr_sensors+0x50>)
  40052c:	47a0      	blx	r4
  40052e:	4b0d      	ldr	r3, [pc, #52]	; (400564 <calibrate_curr_sensors+0x54>)
  400530:	6018      	str	r0, [r3, #0]
	curr_B_offset = raw_data_to_voltage(adc_read(ADC_CURRENT_A));
  400532:	2108      	movs	r1, #8
  400534:	4630      	mov	r0, r6
  400536:	47a8      	blx	r5
  400538:	47a0      	blx	r4
  40053a:	4b0b      	ldr	r3, [pc, #44]	; (400568 <calibrate_curr_sensors+0x58>)
  40053c:	6018      	str	r0, [r3, #0]
	curr_C_offset = raw_data_to_voltage(adc_read(ADC_CURRENT_A));
  40053e:	2108      	movs	r1, #8
  400540:	4630      	mov	r0, r6
  400542:	47a8      	blx	r5
  400544:	47a0      	blx	r4
  400546:	4b09      	ldr	r3, [pc, #36]	; (40056c <calibrate_curr_sensors+0x5c>)
  400548:	6018      	str	r0, [r3, #0]
  40054a:	bd70      	pop	{r4, r5, r6, pc}
  40054c:	00400b05 	.word	0x00400b05
  400550:	00400bcd 	.word	0x00400bcd
  400554:	00401909 	.word	0x00401909
  400558:	204006e0 	.word	0x204006e0
  40055c:	00400e1d 	.word	0x00400e1d
  400560:	004004c9 	.word	0x004004c9
  400564:	204005d0 	.word	0x204005d0
  400568:	204005d8 	.word	0x204005d8
  40056c:	204005b0 	.word	0x204005b0

00400570 <reconstruct_curr_A>:
float reconstruct_curr_A(uint32_t raw_current_data){
  400570:	b510      	push	{r4, lr}
	float I = (raw_data_to_voltage(raw_current_data)   -   curr_A_offset)/CURR_A_SLOPE;
  400572:	4b0d      	ldr	r3, [pc, #52]	; (4005a8 <reconstruct_curr_A+0x38>)
  400574:	4798      	blx	r3
  400576:	4b0d      	ldr	r3, [pc, #52]	; (4005ac <reconstruct_curr_A+0x3c>)
  400578:	edd3 7a00 	vldr	s15, [r3]
  40057c:	ee07 0a10 	vmov	s14, r0
  400580:	ee77 7a67 	vsub.f32	s15, s14, s15
  400584:	ee17 0a90 	vmov	r0, s15
  400588:	4b09      	ldr	r3, [pc, #36]	; (4005b0 <reconstruct_curr_A+0x40>)
  40058a:	4798      	blx	r3
  40058c:	a304      	add	r3, pc, #16	; (adr r3, 4005a0 <reconstruct_curr_A+0x30>)
  40058e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400592:	4c08      	ldr	r4, [pc, #32]	; (4005b4 <reconstruct_curr_A+0x44>)
  400594:	47a0      	blx	r4
  400596:	4b08      	ldr	r3, [pc, #32]	; (4005b8 <reconstruct_curr_A+0x48>)
  400598:	4798      	blx	r3
}
  40059a:	bd10      	pop	{r4, pc}
  40059c:	f3af 8000 	nop.w
  4005a0:	47ae147b 	.word	0x47ae147b
  4005a4:	3f747ae1 	.word	0x3f747ae1
  4005a8:	004004c9 	.word	0x004004c9
  4005ac:	204005d0 	.word	0x204005d0
  4005b0:	0040485d 	.word	0x0040485d
  4005b4:	00404b59 	.word	0x00404b59
  4005b8:	00404eb5 	.word	0x00404eb5
  4005bc:	00000000 	.word	0x00000000

004005c0 <reconstruct_curr_B>:
float reconstruct_curr_B(uint32_t raw_current_data){
  4005c0:	b510      	push	{r4, lr}
	float I = (raw_data_to_voltage(raw_current_data)   -   curr_B_offset)/CURR_B_SLOPE;
  4005c2:	4b0d      	ldr	r3, [pc, #52]	; (4005f8 <reconstruct_curr_B+0x38>)
  4005c4:	4798      	blx	r3
  4005c6:	4b0d      	ldr	r3, [pc, #52]	; (4005fc <reconstruct_curr_B+0x3c>)
  4005c8:	edd3 7a00 	vldr	s15, [r3]
  4005cc:	ee07 0a10 	vmov	s14, r0
  4005d0:	ee77 7a67 	vsub.f32	s15, s14, s15
  4005d4:	ee17 0a90 	vmov	r0, s15
  4005d8:	4b09      	ldr	r3, [pc, #36]	; (400600 <reconstruct_curr_B+0x40>)
  4005da:	4798      	blx	r3
  4005dc:	a304      	add	r3, pc, #16	; (adr r3, 4005f0 <reconstruct_curr_B+0x30>)
  4005de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4005e2:	4c08      	ldr	r4, [pc, #32]	; (400604 <reconstruct_curr_B+0x44>)
  4005e4:	47a0      	blx	r4
  4005e6:	4b08      	ldr	r3, [pc, #32]	; (400608 <reconstruct_curr_B+0x48>)
  4005e8:	4798      	blx	r3
}
  4005ea:	bd10      	pop	{r4, pc}
  4005ec:	f3af 8000 	nop.w
  4005f0:	47ae147b 	.word	0x47ae147b
  4005f4:	3f747ae1 	.word	0x3f747ae1
  4005f8:	004004c9 	.word	0x004004c9
  4005fc:	204005d8 	.word	0x204005d8
  400600:	0040485d 	.word	0x0040485d
  400604:	00404b59 	.word	0x00404b59
  400608:	00404eb5 	.word	0x00404eb5
  40060c:	00000000 	.word	0x00000000

00400610 <reconstruct_curr_C>:
float reconstruct_curr_C(uint32_t raw_current_data){		
  400610:	b510      	push	{r4, lr}
	float I = (raw_data_to_voltage(raw_current_data)   -   curr_C_offset)/CURR_C_SLOPE;
  400612:	4b0d      	ldr	r3, [pc, #52]	; (400648 <reconstruct_curr_C+0x38>)
  400614:	4798      	blx	r3
  400616:	4b0d      	ldr	r3, [pc, #52]	; (40064c <reconstruct_curr_C+0x3c>)
  400618:	edd3 7a00 	vldr	s15, [r3]
  40061c:	ee07 0a10 	vmov	s14, r0
  400620:	ee77 7a67 	vsub.f32	s15, s14, s15
  400624:	ee17 0a90 	vmov	r0, s15
  400628:	4b09      	ldr	r3, [pc, #36]	; (400650 <reconstruct_curr_C+0x40>)
  40062a:	4798      	blx	r3
  40062c:	a304      	add	r3, pc, #16	; (adr r3, 400640 <reconstruct_curr_C+0x30>)
  40062e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400632:	4c08      	ldr	r4, [pc, #32]	; (400654 <reconstruct_curr_C+0x44>)
  400634:	47a0      	blx	r4
  400636:	4b08      	ldr	r3, [pc, #32]	; (400658 <reconstruct_curr_C+0x48>)
  400638:	4798      	blx	r3
}
  40063a:	bd10      	pop	{r4, pc}
  40063c:	f3af 8000 	nop.w
  400640:	47ae147b 	.word	0x47ae147b
  400644:	3f747ae1 	.word	0x3f747ae1
  400648:	004004c9 	.word	0x004004c9
  40064c:	204005b0 	.word	0x204005b0
  400650:	0040485d 	.word	0x0040485d
  400654:	00404b59 	.word	0x00404b59
  400658:	00404eb5 	.word	0x00404eb5

0040065c <encoder_init>:
		encoder_num_Z_interrupts ++;
	}
	encoder_last_count = encoder_counter_no_offset;
}

void encoder_init(void){
  40065c:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40065e:	4b56      	ldr	r3, [pc, #344]	; (4007b8 <encoder_init+0x15c>)
  400660:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400662:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400666:	d103      	bne.n	400670 <encoder_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400668:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40066c:	4b52      	ldr	r3, [pc, #328]	; (4007b8 <encoder_init+0x15c>)
  40066e:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400670:	4b51      	ldr	r3, [pc, #324]	; (4007b8 <encoder_init+0x15c>)
  400672:	699b      	ldr	r3, [r3, #24]
  400674:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400678:	d103      	bne.n	400682 <encoder_init+0x26>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40067a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40067e:	4b4e      	ldr	r3, [pc, #312]	; (4007b8 <encoder_init+0x15c>)
  400680:	611a      	str	r2, [r3, #16]
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400682:	4b4d      	ldr	r3, [pc, #308]	; (4007b8 <encoder_init+0x15c>)
  400684:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400688:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  40068c:	d104      	bne.n	400698 <encoder_init+0x3c>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40068e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400692:	4b49      	ldr	r3, [pc, #292]	; (4007b8 <encoder_init+0x15c>)
  400694:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400698:	4b47      	ldr	r3, [pc, #284]	; (4007b8 <encoder_init+0x15c>)
  40069a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  40069e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  4006a2:	d104      	bne.n	4006ae <encoder_init+0x52>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4006a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4006a8:	4b43      	ldr	r3, [pc, #268]	; (4007b8 <encoder_init+0x15c>)
  4006aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	_pmc_enable_periph_clock(ID_TC3_CHANNEL1);
	
	
	//enable external interrupt on the Z line 
	ext_irq_register(PIO_PB13_IDX,Encoder_Z_Interrupt);
  4006ae:	4943      	ldr	r1, [pc, #268]	; (4007bc <encoder_init+0x160>)
  4006b0:	202d      	movs	r0, #45	; 0x2d
  4006b2:	4b43      	ldr	r3, [pc, #268]	; (4007c0 <encoder_init+0x164>)
  4006b4:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006b6:	4b43      	ldr	r3, [pc, #268]	; (4007c4 <encoder_init+0x168>)
  4006b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4006bc:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4006be:	2240      	movs	r2, #64	; 0x40
  4006c0:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4006c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4006cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4006d0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4006dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4006e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4006e4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4006f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4006f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4006f8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400700:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400708:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40070c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400710:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400714:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  40071c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400720:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400724:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40072c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400730:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400734:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400738:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40073c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400744:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400748:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40074c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400750:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400758:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40075c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400760:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400764:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40076c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400770:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400774:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400778:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40077c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400780:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400784:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400788:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40078c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400794:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400798:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40079c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4007a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4007a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007ac:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007b0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  4007b4:	bd08      	pop	{r3, pc}
  4007b6:	bf00      	nop
  4007b8:	400e0600 	.word	0x400e0600
  4007bc:	004007e5 	.word	0x004007e5
  4007c0:	004019a1 	.word	0x004019a1
  4007c4:	e000e100 	.word	0xe000e100

004007c8 <encoder_get_counter>:
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV(mask)) >> TC_CV_CV_Pos;
}

static inline hri_tc_cv_reg_t hri_tc_read_CV_CV_bf(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV_Msk) >> TC_CV_CV_Pos;
  4007c8:	4a05      	ldr	r2, [pc, #20]	; (4007e0 <encoder_get_counter+0x18>)
  4007ca:	6913      	ldr	r3, [r2, #16]
  4007cc:	6d10      	ldr	r0, [r2, #80]	; 0x50
	//if starting offset is 0 (which is the case before it was recorded) then it returns the actual counter
	
	
	//get A (first line) and B (second line) counters
	//note that rising and falling edges could be the other way round. It doesn't matter for the current implementation
	int encoder_counter_no_offset =	  ( int) hri_tc_read_CV_CV_bf(TC0,0) + ( int) hri_tc_read_CV_CV_bf(TC0,1) \
  4007ce:	4403      	add	r3, r0
  4007d0:	f502 2290 	add.w	r2, r2, #294912	; 0x48000
  4007d4:	6910      	ldr	r0, [r2, #16]
									+ ( int) hri_tc_read_CV_CV_bf(TC3,0) + ( int) hri_tc_read_CV_CV_bf(TC3,1);						
  4007d6:	4403      	add	r3, r0
  4007d8:	6d10      	ldr	r0, [r2, #80]	; 0x50
	
	return encoder_counter_no_offset;
}
  4007da:	4418      	add	r0, r3
  4007dc:	4770      	bx	lr
  4007de:	bf00      	nop
  4007e0:	4000c000 	.word	0x4000c000

004007e4 <Encoder_Z_Interrupt>:
static void Encoder_Z_Interrupt (void){
  4007e4:	b538      	push	{r3, r4, r5, lr}
	int encoder_counter_no_offset = encoder_get_counter();
  4007e6:	4b13      	ldr	r3, [pc, #76]	; (400834 <Encoder_Z_Interrupt+0x50>)
  4007e8:	4798      	blx	r3
	if(encoder_counter_no_offset - encoder_last_count > ENCODER_MIN_Z_DELTA || encoder_counter_no_offset - encoder_last_count < -ENCODER_MIN_Z_DELTA){
  4007ea:	4b13      	ldr	r3, [pc, #76]	; (400838 <Encoder_Z_Interrupt+0x54>)
  4007ec:	681b      	ldr	r3, [r3, #0]
  4007ee:	1ac3      	subs	r3, r0, r3
  4007f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4007f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  4007f8:	d907      	bls.n	40080a <Encoder_Z_Interrupt+0x26>
		if(encoder_num_Z_interrupts == 0){
  4007fa:	4b10      	ldr	r3, [pc, #64]	; (40083c <Encoder_Z_Interrupt+0x58>)
  4007fc:	681b      	ldr	r3, [r3, #0]
  4007fe:	b93b      	cbnz	r3, 400810 <Encoder_Z_Interrupt+0x2c>
			encoder_Z_offset = encoder_counter_no_offset;
  400800:	4a0f      	ldr	r2, [pc, #60]	; (400840 <Encoder_Z_Interrupt+0x5c>)
  400802:	6010      	str	r0, [r2, #0]
		encoder_num_Z_interrupts ++;
  400804:	3301      	adds	r3, #1
  400806:	4a0d      	ldr	r2, [pc, #52]	; (40083c <Encoder_Z_Interrupt+0x58>)
  400808:	6013      	str	r3, [r2, #0]
	encoder_last_count = encoder_counter_no_offset;
  40080a:	4b0b      	ldr	r3, [pc, #44]	; (400838 <Encoder_Z_Interrupt+0x54>)
  40080c:	6018      	str	r0, [r3, #0]
  40080e:	bd38      	pop	{r3, r4, r5, pc}
			unsigned int delta = (encoder_counter_no_offset - encoder_Z_offset) & (ENCODER_STEPS - 1);
  400810:	4a0b      	ldr	r2, [pc, #44]	; (400840 <Encoder_Z_Interrupt+0x5c>)
  400812:	6811      	ldr	r1, [r2, #0]
  400814:	1a42      	subs	r2, r0, r1
  400816:	f3c2 020d 	ubfx	r2, r2, #0, #14
			if( (delta <= ENCODER_MAX_DELTA) || (delta >= ENCODER_STEPS-1 - ENCODER_MAX_DELTA) ){
  40081a:	1f95      	subs	r5, r2, #6
  40081c:	f643 74f3 	movw	r4, #16371	; 0x3ff3
  400820:	42a5      	cmp	r5, r4
  400822:	d8ef      	bhi.n	400804 <Encoder_Z_Interrupt+0x20>
				encoder_Z_offset += delta;
  400824:	4411      	add	r1, r2
  400826:	4c06      	ldr	r4, [pc, #24]	; (400840 <Encoder_Z_Interrupt+0x5c>)
  400828:	6021      	str	r1, [r4, #0]
				encoder_Daxis_offset += delta;
  40082a:	4c06      	ldr	r4, [pc, #24]	; (400844 <Encoder_Z_Interrupt+0x60>)
  40082c:	6821      	ldr	r1, [r4, #0]
  40082e:	440a      	add	r2, r1
  400830:	6022      	str	r2, [r4, #0]
  400832:	e7e7      	b.n	400804 <Encoder_Z_Interrupt+0x20>
  400834:	004007c9 	.word	0x004007c9
  400838:	204005dc 	.word	0x204005dc
  40083c:	204005b8 	.word	0x204005b8
  400840:	204005c0 	.word	0x204005c0
  400844:	204005e0 	.word	0x204005e0

00400848 <encoder_get_angle>:
void encoder_get_angle(float * angl){
  400848:	b510      	push	{r4, lr}
  40084a:	4604      	mov	r4, r0
	int encoder_counter_no_offset = encoder_get_counter();
  40084c:	4b0a      	ldr	r3, [pc, #40]	; (400878 <encoder_get_angle+0x30>)
  40084e:	4798      	blx	r3
	int current_counter = (encoder_counter_no_offset - encoder_Daxis_offset) & (ENCODER_STEPS - 1);
  400850:	4b0a      	ldr	r3, [pc, #40]	; (40087c <encoder_get_angle+0x34>)
  400852:	681b      	ldr	r3, [r3, #0]
  400854:	1ac0      	subs	r0, r0, r3
  400856:	f3c0 030d 	ubfx	r3, r0, #0, #14
  40085a:	ee07 3a90 	vmov	s15, r3
	float current_counter_float = (float) current_counter;
  40085e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	*angl  = (2 * PI * current_counter_float / (ENCODER_STEPS));
  400862:	ed9f 7a07 	vldr	s14, [pc, #28]	; 400880 <encoder_get_angle+0x38>
  400866:	ee67 7a87 	vmul.f32	s15, s15, s14
  40086a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 400884 <encoder_get_angle+0x3c>
  40086e:	ee67 7a87 	vmul.f32	s15, s15, s14
  400872:	edc4 7a00 	vstr	s15, [r4]
  400876:	bd10      	pop	{r4, pc}
  400878:	004007c9 	.word	0x004007c9
  40087c:	204005e0 	.word	0x204005e0
  400880:	40c90fdb 	.word	0x40c90fdb
  400884:	38800000 	.word	0x38800000

00400888 <encoder_record_Daxis_offset>:
	
}



void encoder_record_Daxis_offset(void){
  400888:	b508      	push	{r3, lr}
	//records the value at which we have a D axis
	encoder_Daxis_offset = encoder_get_counter();
  40088a:	4b02      	ldr	r3, [pc, #8]	; (400894 <encoder_record_Daxis_offset+0xc>)
  40088c:	4798      	blx	r3
  40088e:	4b02      	ldr	r3, [pc, #8]	; (400898 <encoder_record_Daxis_offset+0x10>)
  400890:	6018      	str	r0, [r3, #0]
  400892:	bd08      	pop	{r3, pc}
  400894:	004007c9 	.word	0x004007c9
  400898:	204005e0 	.word	0x204005e0

0040089c <Position_2_Interrupt>:
static void Position_1_Interrupt (void){
	Position_General_Interrupt();
	//printf("POS 1\n");
}

static void Position_2_Interrupt (void){
  40089c:	b430      	push	{r4, r5}
	has_triggered = true;
  40089e:	2201      	movs	r2, #1
  4008a0:	4b13      	ldr	r3, [pc, #76]	; (4008f0 <Position_2_Interrupt+0x54>)
  4008a2:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  4008a4:	4b13      	ldr	r3, [pc, #76]	; (4008f4 <Position_2_Interrupt+0x58>)
  4008a6:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  4008a8:	4b13      	ldr	r3, [pc, #76]	; (4008f8 <Position_2_Interrupt+0x5c>)
  4008aa:	681b      	ldr	r3, [r3, #0]
  4008ac:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4008ae:	2b00      	cmp	r3, #0
  4008b0:	dd11      	ble.n	4008d6 <Position_2_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4008b2:	2201      	movs	r2, #1
  4008b4:	2a00      	cmp	r2, #0
  4008b6:	dc11      	bgt.n	4008dc <Position_2_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  4008b8:	ee07 3a90 	vmov	s15, r3
  4008bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4008c0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 4008fc <Position_2_Interrupt+0x60>
  4008c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4008c8:	4b0d      	ldr	r3, [pc, #52]	; (400900 <Position_2_Interrupt+0x64>)
  4008ca:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  4008ce:	4b0a      	ldr	r3, [pc, #40]	; (4008f8 <Position_2_Interrupt+0x5c>)
  4008d0:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	//printf("POS 2\n");
}
  4008d2:	bc30      	pop	{r4, r5}
  4008d4:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4008d6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  4008da:	e7ea      	b.n	4008b2 <Position_2_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  4008dc:	1e54      	subs	r4, r2, #1
  4008de:	4908      	ldr	r1, [pc, #32]	; (400900 <Position_2_Interrupt+0x64>)
  4008e0:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  4008e4:	682d      	ldr	r5, [r5, #0]
  4008e6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4008ea:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4008ec:	4622      	mov	r2, r4
  4008ee:	e7e1      	b.n	4008b4 <Position_2_Interrupt+0x18>
  4008f0:	204005b4 	.word	0x204005b4
  4008f4:	e000e010 	.word	0xe000e010
  4008f8:	204005cc 	.word	0x204005cc
  4008fc:	43960000 	.word	0x43960000
  400900:	204005c4 	.word	0x204005c4

00400904 <Position_3_Interrupt>:
int cntr = 0;
static void Position_3_Interrupt (void){
  400904:	b430      	push	{r4, r5}
	has_triggered = true;
  400906:	2201      	movs	r2, #1
  400908:	4b13      	ldr	r3, [pc, #76]	; (400958 <Position_3_Interrupt+0x54>)
  40090a:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  40090c:	4b13      	ldr	r3, [pc, #76]	; (40095c <Position_3_Interrupt+0x58>)
  40090e:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400910:	4b13      	ldr	r3, [pc, #76]	; (400960 <Position_3_Interrupt+0x5c>)
  400912:	681b      	ldr	r3, [r3, #0]
  400914:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400916:	2b00      	cmp	r3, #0
  400918:	dd11      	ble.n	40093e <Position_3_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40091a:	2201      	movs	r2, #1
  40091c:	2a00      	cmp	r2, #0
  40091e:	dc11      	bgt.n	400944 <Position_3_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  400920:	ee07 3a90 	vmov	s15, r3
  400924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400928:	eddf 6a0e 	vldr	s13, [pc, #56]	; 400964 <Position_3_Interrupt+0x60>
  40092c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400930:	4b0d      	ldr	r3, [pc, #52]	; (400968 <Position_3_Interrupt+0x64>)
  400932:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  400936:	4b0a      	ldr	r3, [pc, #40]	; (400960 <Position_3_Interrupt+0x5c>)
  400938:	6018      	str	r0, [r3, #0]
		
			printf("%f\n",angleee);
		}
	}
	*/
}
  40093a:	bc30      	pop	{r4, r5}
  40093c:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40093e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  400942:	e7ea      	b.n	40091a <Position_3_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400944:	1e54      	subs	r4, r2, #1
  400946:	4908      	ldr	r1, [pc, #32]	; (400968 <Position_3_Interrupt+0x64>)
  400948:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  40094c:	682d      	ldr	r5, [r5, #0]
  40094e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400952:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400954:	4622      	mov	r2, r4
  400956:	e7e1      	b.n	40091c <Position_3_Interrupt+0x18>
  400958:	204005b4 	.word	0x204005b4
  40095c:	e000e010 	.word	0xe000e010
  400960:	204005cc 	.word	0x204005cc
  400964:	43960000 	.word	0x43960000
  400968:	204005c4 	.word	0x204005c4

0040096c <Position_1_Interrupt>:
static void Position_1_Interrupt (void){
  40096c:	b430      	push	{r4, r5}
	has_triggered = true;
  40096e:	2201      	movs	r2, #1
  400970:	4b13      	ldr	r3, [pc, #76]	; (4009c0 <Position_1_Interrupt+0x54>)
  400972:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400974:	4b13      	ldr	r3, [pc, #76]	; (4009c4 <Position_1_Interrupt+0x58>)
  400976:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400978:	4b13      	ldr	r3, [pc, #76]	; (4009c8 <Position_1_Interrupt+0x5c>)
  40097a:	681b      	ldr	r3, [r3, #0]
  40097c:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40097e:	2b00      	cmp	r3, #0
  400980:	dd11      	ble.n	4009a6 <Position_1_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400982:	2201      	movs	r2, #1
  400984:	2a00      	cmp	r2, #0
  400986:	dc11      	bgt.n	4009ac <Position_1_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  400988:	ee07 3a90 	vmov	s15, r3
  40098c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400990:	eddf 6a0e 	vldr	s13, [pc, #56]	; 4009cc <Position_1_Interrupt+0x60>
  400994:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400998:	4b0d      	ldr	r3, [pc, #52]	; (4009d0 <Position_1_Interrupt+0x64>)
  40099a:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  40099e:	4b0a      	ldr	r3, [pc, #40]	; (4009c8 <Position_1_Interrupt+0x5c>)
  4009a0:	6018      	str	r0, [r3, #0]
}
  4009a2:	bc30      	pop	{r4, r5}
  4009a4:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4009a6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  4009aa:	e7ea      	b.n	400982 <Position_1_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  4009ac:	1e54      	subs	r4, r2, #1
  4009ae:	4908      	ldr	r1, [pc, #32]	; (4009d0 <Position_1_Interrupt+0x64>)
  4009b0:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  4009b4:	682d      	ldr	r5, [r5, #0]
  4009b6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4009ba:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4009bc:	4622      	mov	r2, r4
  4009be:	e7e1      	b.n	400984 <Position_1_Interrupt+0x18>
  4009c0:	204005b4 	.word	0x204005b4
  4009c4:	e000e010 	.word	0xe000e010
  4009c8:	204005cc 	.word	0x204005cc
  4009cc:	43960000 	.word	0x43960000
  4009d0:	204005c4 	.word	0x204005c4

004009d4 <pos_sens_init>:

void pos_sens_init (void){
  4009d4:	b510      	push	{r4, lr}
	//set interrupt handlers
	ext_irq_register(PIO_PD19_IDX, Position_3_Interrupt);		//POS 3
  4009d6:	4919      	ldr	r1, [pc, #100]	; (400a3c <pos_sens_init+0x68>)
  4009d8:	2073      	movs	r0, #115	; 0x73
  4009da:	4c19      	ldr	r4, [pc, #100]	; (400a40 <pos_sens_init+0x6c>)
  4009dc:	47a0      	blx	r4
	ext_irq_register(PIO_PA2_IDX, Position_2_Interrupt);		//POS 2
  4009de:	4919      	ldr	r1, [pc, #100]	; (400a44 <pos_sens_init+0x70>)
  4009e0:	2002      	movs	r0, #2
  4009e2:	47a0      	blx	r4
	ext_irq_register(PIO_PA5_IDX, Position_1_Interrupt);		//POS 1
  4009e4:	4918      	ldr	r1, [pc, #96]	; (400a48 <pos_sens_init+0x74>)
  4009e6:	2005      	movs	r0, #5
  4009e8:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4009ea:	4b18      	ldr	r3, [pc, #96]	; (400a4c <pos_sens_init+0x78>)
  4009ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4009f0:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4009f2:	2220      	movs	r2, #32
  4009f4:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4009f8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4009fc:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4009fe:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ	(PIOD_IRQn);
	NVIC_SetPriority(PIOD_IRQn, IRQ_PRIORITY_POSITION_SENS);

	
	//SysTick starting from 0
	pos_sens_last_SysTick_count = 0;
  400a02:	2200      	movs	r2, #0
  400a04:	4b12      	ldr	r3, [pc, #72]	; (400a50 <pos_sens_init+0x7c>)
  400a06:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
  400a08:	4b12      	ldr	r3, [pc, #72]	; (400a54 <pos_sens_init+0x80>)
  400a0a:	609a      	str	r2, [r3, #8]
	//make the load value max, so that the overflows are as rare as possible
	SysTick->LOAD = (0xFFFFFF);
  400a0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  400a10:	6059      	str	r1, [r3, #4]

	this means that the moment we transition to state (POS1=1, POS2=0 POS3=0) we are at 0 electrical degrees
	*/

	// sector_lookup_table[POS3][POS2][POS1];
	sector_lookup_table[0][0][1] = 1;
  400a12:	4b11      	ldr	r3, [pc, #68]	; (400a58 <pos_sens_init+0x84>)
  400a14:	2101      	movs	r1, #1
  400a16:	6059      	str	r1, [r3, #4]
	sector_lookup_table[0][1][1] = 2;
  400a18:	2102      	movs	r1, #2
  400a1a:	60d9      	str	r1, [r3, #12]
	sector_lookup_table[0][1][0] = 3;
  400a1c:	2103      	movs	r1, #3
  400a1e:	6099      	str	r1, [r3, #8]
	sector_lookup_table[1][1][0] = 4;
  400a20:	2104      	movs	r1, #4
  400a22:	6199      	str	r1, [r3, #24]
	sector_lookup_table[1][0][0] = 5;
  400a24:	2105      	movs	r1, #5
  400a26:	6119      	str	r1, [r3, #16]
	sector_lookup_table[1][0][1] = 6;
  400a28:	2106      	movs	r1, #6
  400a2a:	6159      	str	r1, [r3, #20]
	//Error states
	sector_lookup_table[0][0][0] = -1;
  400a2c:	f04f 31ff 	mov.w	r1, #4294967295
  400a30:	6019      	str	r1, [r3, #0]
	sector_lookup_table[1][1][1] = -1;
  400a32:	61d9      	str	r1, [r3, #28]
	
	has_triggered = false;
  400a34:	4b09      	ldr	r3, [pc, #36]	; (400a5c <pos_sens_init+0x88>)
  400a36:	701a      	strb	r2, [r3, #0]
  400a38:	bd10      	pop	{r4, pc}
  400a3a:	bf00      	nop
  400a3c:	00400905 	.word	0x00400905
  400a40:	004019a1 	.word	0x004019a1
  400a44:	0040089d 	.word	0x0040089d
  400a48:	0040096d 	.word	0x0040096d
  400a4c:	e000e100 	.word	0xe000e100
  400a50:	204005cc 	.word	0x204005cc
  400a54:	e000e010 	.word	0xe000e010
  400a58:	2040058c 	.word	0x2040058c
  400a5c:	204005b4 	.word	0x204005b4

00400a60 <get_Data_Pos>:
}

//returns time spent in previous sectors
// which sector we are at currently (see above for position convention)
// how much time has elapsed since we entered this sector
void get_Data_Pos (float * previous_deltas, int * current_sector, float * time_in_current_sector){
  400a60:	b570      	push	{r4, r5, r6, lr}
	//null checking variable to see if a write has occurred
	has_triggered = false;
  400a62:	2400      	movs	r4, #0
  400a64:	4b1d      	ldr	r3, [pc, #116]	; (400adc <get_Data_Pos+0x7c>)
  400a66:	701c      	strb	r4, [r3, #0]
	
	
	//get systick value immediately for most accurate result
	int current_systick = SysTick->VAL;
  400a68:	4b1d      	ldr	r3, [pc, #116]	; (400ae0 <get_Data_Pos+0x80>)
  400a6a:	689c      	ldr	r4, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400a6c:	4b1d      	ldr	r3, [pc, #116]	; (400ae4 <get_Data_Pos+0x84>)
  400a6e:	681b      	ldr	r3, [r3, #0]
  400a70:	1b1b      	subs	r3, r3, r4
	
	//if there was an overflow, account for it
	//NB this can only handle one overflow at max <=> if systick frequency < interrupt frequency timing will be very inaccurate
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400a72:	2b00      	cmp	r3, #0
  400a74:	dd0b      	ble.n	400a8e <get_Data_Pos+0x2e>
	
	//systick clock frequency equals MCU clock at 300MHz
	(*time_in_current_sector) = (float) delta / 300;
  400a76:	ee07 3a90 	vmov	s15, r3
  400a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400a7e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 400ae8 <get_Data_Pos+0x88>
  400a82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400a86:	ed82 7a00 	vstr	s14, [r2]
	
	
	//copy data over
	for (int i = 0 ; i < POS_SENS_DELTAS_SIZE; i++){
  400a8a:	2300      	movs	r3, #0
  400a8c:	e009      	b.n	400aa2 <get_Data_Pos+0x42>
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400a8e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  400a92:	e7f0      	b.n	400a76 <get_Data_Pos+0x16>
		previous_deltas[i] = pos_sens_deltas[i];
  400a94:	009d      	lsls	r5, r3, #2
  400a96:	1946      	adds	r6, r0, r5
  400a98:	4c14      	ldr	r4, [pc, #80]	; (400aec <get_Data_Pos+0x8c>)
  400a9a:	442c      	add	r4, r5
  400a9c:	6824      	ldr	r4, [r4, #0]
  400a9e:	6034      	str	r4, [r6, #0]
	for (int i = 0 ; i < POS_SENS_DELTAS_SIZE; i++){
  400aa0:	3301      	adds	r3, #1
  400aa2:	2b01      	cmp	r3, #1
  400aa4:	ddf6      	ble.n	400a94 <get_Data_Pos+0x34>
	return tmp;
}

static inline hri_pio_pdsr_reg_t hri_pio_read_PDSR_reg(const void *const hw)
{
	return ((Pio *)hw)->PIO_PDSR;
  400aa6:	4b12      	ldr	r3, [pc, #72]	; (400af0 <get_Data_Pos+0x90>)
  400aa8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
  400aaa:	f3c5 45c0 	ubfx	r5, r5, #19, #1
  400aae:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400ab2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  400ab4:	f3c4 0480 	ubfx	r4, r4, #2, #1
  400ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400aba:	f3c3 1340 	ubfx	r3, r3, #5, #1
	}
	
	//get which sector we are in
	(*current_sector) = sector_lookup_table	[gpio_get_pin_level(PIN_GPIO_POS_3)]\
											[gpio_get_pin_level(PIN_GPIO_POS_2)]\
											[gpio_get_pin_level(PIN_GPIO_POS_1)];
  400abe:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  400ac2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  400ac6:	4c0b      	ldr	r4, [pc, #44]	; (400af4 <get_Data_Pos+0x94>)
  400ac8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	(*current_sector) = sector_lookup_table	[gpio_get_pin_level(PIN_GPIO_POS_3)]\
  400acc:	600b      	str	r3, [r1, #0]
											
											
	if(has_triggered){
  400ace:	4b03      	ldr	r3, [pc, #12]	; (400adc <get_Data_Pos+0x7c>)
  400ad0:	781b      	ldrb	r3, [r3, #0]
  400ad2:	b903      	cbnz	r3, 400ad6 <get_Data_Pos+0x76>
  400ad4:	bd70      	pop	{r4, r5, r6, pc}
		// this means the value of has_triggered was modified while we were reading the data <=> retake reading
		// since data writes are rare there is no chance of a long wait on the recursive function
		get_Data_Pos (previous_deltas, current_sector, time_in_current_sector);
  400ad6:	f7ff ffc3 	bl	400a60 <get_Data_Pos>
	}

  400ada:	e7fb      	b.n	400ad4 <get_Data_Pos+0x74>
  400adc:	204005b4 	.word	0x204005b4
  400ae0:	e000e010 	.word	0xe000e010
  400ae4:	204005cc 	.word	0x204005cc
  400ae8:	43960000 	.word	0x43960000
  400aec:	204005c4 	.word	0x204005c4
  400af0:	400e1400 	.word	0x400e1400
  400af4:	2040058c 	.word	0x2040058c

00400af8 <enable_control>:



//enables calling the control loop from the DMA
void enable_control(void){
	is_control_enabled = true;
  400af8:	2201      	movs	r2, #1
  400afa:	4b01      	ldr	r3, [pc, #4]	; (400b00 <enable_control+0x8>)
  400afc:	701a      	strb	r2, [r3, #0]
  400afe:	4770      	bx	lr
  400b00:	204005ac 	.word	0x204005ac

00400b04 <dma_adc_0_enable_for_one_transaction>:
	
	has_0_triggered = false;
	has_1_triggered = false;
}

void dma_adc_0_enable_for_one_transaction(void){
  400b04:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  400b06:	4906      	ldr	r1, [pc, #24]	; (400b20 <dma_adc_0_enable_for_one_transaction+0x1c>)
  400b08:	2000      	movs	r0, #0
  400b0a:	4b06      	ldr	r3, [pc, #24]	; (400b24 <dma_adc_0_enable_for_one_transaction+0x20>)
  400b0c:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  400b0e:	2118      	movs	r1, #24
  400b10:	2000      	movs	r0, #0
  400b12:	4b05      	ldr	r3, [pc, #20]	; (400b28 <dma_adc_0_enable_for_one_transaction+0x24>)
  400b14:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  400b16:	2101      	movs	r1, #1
  400b18:	2000      	movs	r0, #0
  400b1a:	4b04      	ldr	r3, [pc, #16]	; (400b2c <dma_adc_0_enable_for_one_transaction+0x28>)
  400b1c:	4798      	blx	r3
  400b1e:	bd08      	pop	{r3, pc}
  400b20:	20400238 	.word	0x20400238
  400b24:	00402e4d 	.word	0x00402e4d
  400b28:	00402e6d 	.word	0x00402e6d
  400b2c:	00402e85 	.word	0x00402e85

00400b30 <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  400b30:	b508      	push	{r3, lr}
	has_0_triggered = true;
  400b32:	2201      	movs	r2, #1
  400b34:	4b1d      	ldr	r3, [pc, #116]	; (400bac <dma_adc_0_callback+0x7c>)
  400b36:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400b38:	2300      	movs	r3, #0
  400b3a:	e008      	b.n	400b4e <dma_adc_0_callback+0x1e>
				raw_currents[1] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400b3c:	b292      	uxth	r2, r2
  400b3e:	491c      	ldr	r1, [pc, #112]	; (400bb0 <dma_adc_0_callback+0x80>)
  400b40:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  400b42:	491c      	ldr	r1, [pc, #112]	; (400bb4 <dma_adc_0_callback+0x84>)
  400b44:	7e0a      	ldrb	r2, [r1, #24]
  400b46:	f042 0202 	orr.w	r2, r2, #2
  400b4a:	760a      	strb	r2, [r1, #24]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400b4c:	3301      	adds	r3, #1
  400b4e:	2b05      	cmp	r3, #5
  400b50:	dc13      	bgt.n	400b7a <dma_adc_0_callback+0x4a>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400b52:	4a18      	ldr	r2, [pc, #96]	; (400bb4 <dma_adc_0_callback+0x84>)
  400b54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  400b58:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400b5c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  400b60:	d0ec      	beq.n	400b3c <dma_adc_0_callback+0xc>
  400b62:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400b66:	d1f1      	bne.n	400b4c <dma_adc_0_callback+0x1c>
				raw_currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400b68:	b292      	uxth	r2, r2
  400b6a:	4911      	ldr	r1, [pc, #68]	; (400bb0 <dma_adc_0_callback+0x80>)
  400b6c:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  400b6e:	4911      	ldr	r1, [pc, #68]	; (400bb4 <dma_adc_0_callback+0x84>)
  400b70:	7e0a      	ldrb	r2, [r1, #24]
  400b72:	f042 0201 	orr.w	r2, r2, #1
  400b76:	760a      	strb	r2, [r1, #24]
				break;
  400b78:	e7e8      	b.n	400b4c <dma_adc_0_callback+0x1c>
	if(is_dma_adc_0_continuous){
  400b7a:	4b0f      	ldr	r3, [pc, #60]	; (400bb8 <dma_adc_0_callback+0x88>)
  400b7c:	781b      	ldrb	r3, [r3, #0]
  400b7e:	b923      	cbnz	r3, 400b8a <dma_adc_0_callback+0x5a>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  400b80:	4b0c      	ldr	r3, [pc, #48]	; (400bb4 <dma_adc_0_callback+0x84>)
  400b82:	7e1b      	ldrb	r3, [r3, #24]
  400b84:	2b0f      	cmp	r3, #15
  400b86:	d003      	beq.n	400b90 <dma_adc_0_callback+0x60>
  400b88:	bd08      	pop	{r3, pc}
		dma_adc_0_enable_for_one_transaction();
  400b8a:	4b0c      	ldr	r3, [pc, #48]	; (400bbc <dma_adc_0_callback+0x8c>)
  400b8c:	4798      	blx	r3
  400b8e:	e7f7      	b.n	400b80 <dma_adc_0_callback+0x50>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  400b90:	4b0b      	ldr	r3, [pc, #44]	; (400bc0 <dma_adc_0_callback+0x90>)
  400b92:	781b      	ldrb	r3, [r3, #0]
  400b94:	2b00      	cmp	r3, #0
  400b96:	d0f7      	beq.n	400b88 <dma_adc_0_callback+0x58>
		ready_values = 0;
  400b98:	2200      	movs	r2, #0
  400b9a:	4b06      	ldr	r3, [pc, #24]	; (400bb4 <dma_adc_0_callback+0x84>)
  400b9c:	761a      	strb	r2, [r3, #24]
		start_control_loop_dummy((int *) &raw_currents, raw_voltage);
  400b9e:	4b09      	ldr	r3, [pc, #36]	; (400bc4 <dma_adc_0_callback+0x94>)
  400ba0:	6819      	ldr	r1, [r3, #0]
  400ba2:	4803      	ldr	r0, [pc, #12]	; (400bb0 <dma_adc_0_callback+0x80>)
  400ba4:	4b08      	ldr	r3, [pc, #32]	; (400bc8 <dma_adc_0_callback+0x98>)
  400ba6:	4798      	blx	r3
}
  400ba8:	e7ee      	b.n	400b88 <dma_adc_0_callback+0x58>
  400baa:	bf00      	nop
  400bac:	204005d4 	.word	0x204005d4
  400bb0:	204005e8 	.word	0x204005e8
  400bb4:	20400238 	.word	0x20400238
  400bb8:	204005e5 	.word	0x204005e5
  400bbc:	00400b05 	.word	0x00400b05
  400bc0:	204005ac 	.word	0x204005ac
  400bc4:	204005f4 	.word	0x204005f4
  400bc8:	00400409 	.word	0x00400409

00400bcc <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  400bcc:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400bce:	4906      	ldr	r1, [pc, #24]	; (400be8 <dma_adc_1_enable_for_one_transaction+0x1c>)
  400bd0:	2001      	movs	r0, #1
  400bd2:	4b06      	ldr	r3, [pc, #24]	; (400bec <dma_adc_1_enable_for_one_transaction+0x20>)
  400bd4:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  400bd6:	2110      	movs	r1, #16
  400bd8:	2001      	movs	r0, #1
  400bda:	4b05      	ldr	r3, [pc, #20]	; (400bf0 <dma_adc_1_enable_for_one_transaction+0x24>)
  400bdc:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  400bde:	2101      	movs	r1, #1
  400be0:	4608      	mov	r0, r1
  400be2:	4b04      	ldr	r3, [pc, #16]	; (400bf4 <dma_adc_1_enable_for_one_transaction+0x28>)
  400be4:	4798      	blx	r3
  400be6:	bd08      	pop	{r3, pc}
  400be8:	20400254 	.word	0x20400254
  400bec:	00402e4d 	.word	0x00402e4d
  400bf0:	00402e6d 	.word	0x00402e6d
  400bf4:	00402e85 	.word	0x00402e85

00400bf8 <dma_adc_1_callback>:
static void dma_adc_1_callback(struct _dma_resource *resource){
  400bf8:	b508      	push	{r3, lr}
	has_1_triggered = true;
  400bfa:	2201      	movs	r2, #1
  400bfc:	4b1d      	ldr	r3, [pc, #116]	; (400c74 <dma_adc_1_callback+0x7c>)
  400bfe:	701a      	strb	r2, [r3, #0]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400c00:	2300      	movs	r3, #0
  400c02:	e008      	b.n	400c16 <dma_adc_1_callback+0x1e>
				raw_currents[2] = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400c04:	b292      	uxth	r2, r2
  400c06:	491c      	ldr	r1, [pc, #112]	; (400c78 <dma_adc_1_callback+0x80>)
  400c08:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  400c0a:	491c      	ldr	r1, [pc, #112]	; (400c7c <dma_adc_1_callback+0x84>)
  400c0c:	7e0a      	ldrb	r2, [r1, #24]
  400c0e:	f042 0204 	orr.w	r2, r2, #4
  400c12:	760a      	strb	r2, [r1, #24]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400c14:	3301      	adds	r3, #1
  400c16:	2b03      	cmp	r3, #3
  400c18:	dc14      	bgt.n	400c44 <dma_adc_1_callback+0x4c>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400c1a:	4a18      	ldr	r2, [pc, #96]	; (400c7c <dma_adc_1_callback+0x84>)
  400c1c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  400c20:	69d2      	ldr	r2, [r2, #28]
  400c22:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400c26:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  400c2a:	d0eb      	beq.n	400c04 <dma_adc_1_callback+0xc>
  400c2c:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  400c30:	d1f0      	bne.n	400c14 <dma_adc_1_callback+0x1c>
				raw_voltage = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400c32:	b292      	uxth	r2, r2
  400c34:	4912      	ldr	r1, [pc, #72]	; (400c80 <dma_adc_1_callback+0x88>)
  400c36:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<3);
  400c38:	4910      	ldr	r1, [pc, #64]	; (400c7c <dma_adc_1_callback+0x84>)
  400c3a:	7e0a      	ldrb	r2, [r1, #24]
  400c3c:	f042 0208 	orr.w	r2, r2, #8
  400c40:	760a      	strb	r2, [r1, #24]
				break;
  400c42:	e7e7      	b.n	400c14 <dma_adc_1_callback+0x1c>
	if(is_dma_adc_1_continuous){
  400c44:	4b0f      	ldr	r3, [pc, #60]	; (400c84 <dma_adc_1_callback+0x8c>)
  400c46:	781b      	ldrb	r3, [r3, #0]
  400c48:	b923      	cbnz	r3, 400c54 <dma_adc_1_callback+0x5c>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  400c4a:	4b0c      	ldr	r3, [pc, #48]	; (400c7c <dma_adc_1_callback+0x84>)
  400c4c:	7e1b      	ldrb	r3, [r3, #24]
  400c4e:	2b0f      	cmp	r3, #15
  400c50:	d003      	beq.n	400c5a <dma_adc_1_callback+0x62>
  400c52:	bd08      	pop	{r3, pc}
		dma_adc_1_enable_for_one_transaction();
  400c54:	4b0c      	ldr	r3, [pc, #48]	; (400c88 <dma_adc_1_callback+0x90>)
  400c56:	4798      	blx	r3
  400c58:	e7f7      	b.n	400c4a <dma_adc_1_callback+0x52>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  400c5a:	4b0c      	ldr	r3, [pc, #48]	; (400c8c <dma_adc_1_callback+0x94>)
  400c5c:	781b      	ldrb	r3, [r3, #0]
  400c5e:	2b00      	cmp	r3, #0
  400c60:	d0f7      	beq.n	400c52 <dma_adc_1_callback+0x5a>
		ready_values = 0;
  400c62:	2200      	movs	r2, #0
  400c64:	4b05      	ldr	r3, [pc, #20]	; (400c7c <dma_adc_1_callback+0x84>)
  400c66:	761a      	strb	r2, [r3, #24]
		start_control_loop_dummy((int *) &raw_currents, raw_voltage);
  400c68:	4b05      	ldr	r3, [pc, #20]	; (400c80 <dma_adc_1_callback+0x88>)
  400c6a:	6819      	ldr	r1, [r3, #0]
  400c6c:	4802      	ldr	r0, [pc, #8]	; (400c78 <dma_adc_1_callback+0x80>)
  400c6e:	4b08      	ldr	r3, [pc, #32]	; (400c90 <dma_adc_1_callback+0x98>)
  400c70:	4798      	blx	r3
}
  400c72:	e7ee      	b.n	400c52 <dma_adc_1_callback+0x5a>
  400c74:	204005ad 	.word	0x204005ad
  400c78:	204005e8 	.word	0x204005e8
  400c7c:	20400238 	.word	0x20400238
  400c80:	204005f4 	.word	0x204005f4
  400c84:	204005e4 	.word	0x204005e4
  400c88:	00400bcd 	.word	0x00400bcd
  400c8c:	204005ac 	.word	0x204005ac
  400c90:	00400409 	.word	0x00400409

00400c94 <dma_adc_0_enable_continuously>:
}

void dma_adc_0_enable_continuously(void){
  400c94:	b508      	push	{r3, lr}
	is_dma_adc_0_continuous = true;
  400c96:	2201      	movs	r2, #1
  400c98:	4b02      	ldr	r3, [pc, #8]	; (400ca4 <dma_adc_0_enable_continuously+0x10>)
  400c9a:	701a      	strb	r2, [r3, #0]
	dma_adc_0_enable_for_one_transaction();
  400c9c:	4b02      	ldr	r3, [pc, #8]	; (400ca8 <dma_adc_0_enable_continuously+0x14>)
  400c9e:	4798      	blx	r3
  400ca0:	bd08      	pop	{r3, pc}
  400ca2:	bf00      	nop
  400ca4:	204005e5 	.word	0x204005e5
  400ca8:	00400b05 	.word	0x00400b05

00400cac <dma_adc_1_enable_continuously>:
}
void dma_adc_1_enable_continuously(void){
  400cac:	b508      	push	{r3, lr}
	is_dma_adc_1_continuous = true;
  400cae:	2201      	movs	r2, #1
  400cb0:	4b02      	ldr	r3, [pc, #8]	; (400cbc <dma_adc_1_enable_continuously+0x10>)
  400cb2:	701a      	strb	r2, [r3, #0]
	dma_adc_1_enable_for_one_transaction();
  400cb4:	4b02      	ldr	r3, [pc, #8]	; (400cc0 <dma_adc_1_enable_continuously+0x14>)
  400cb6:	4798      	blx	r3
  400cb8:	bd08      	pop	{r3, pc}
  400cba:	bf00      	nop
  400cbc:	204005e4 	.word	0x204005e4
  400cc0:	00400bcd 	.word	0x00400bcd

00400cc4 <dma_adc_0_disable_continuously>:
}

void dma_adc_0_disable_continuously(void){
	is_dma_adc_0_continuous = false;
  400cc4:	2200      	movs	r2, #0
  400cc6:	4b01      	ldr	r3, [pc, #4]	; (400ccc <dma_adc_0_disable_continuously+0x8>)
  400cc8:	701a      	strb	r2, [r3, #0]
  400cca:	4770      	bx	lr
  400ccc:	204005e5 	.word	0x204005e5

00400cd0 <dma_adc_1_disable_continuously>:
}
void dma_adc_1_disable_continuously(void){
	is_dma_adc_1_continuous = false;
  400cd0:	2200      	movs	r2, #0
  400cd2:	4b01      	ldr	r3, [pc, #4]	; (400cd8 <dma_adc_1_disable_continuously+0x8>)
  400cd4:	701a      	strb	r2, [r3, #0]
  400cd6:	4770      	bx	lr
  400cd8:	204005e4 	.word	0x204005e4

00400cdc <dma_adc_init>:
void dma_adc_init(void){
  400cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  400ce0:	492a      	ldr	r1, [pc, #168]	; (400d8c <dma_adc_init+0xb0>)
  400ce2:	2000      	movs	r0, #0
  400ce4:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 400dc0 <dma_adc_init+0xe4>
  400ce8:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  400cea:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 400dc4 <dma_adc_init+0xe8>
  400cee:	4641      	mov	r1, r8
  400cf0:	2000      	movs	r0, #0
  400cf2:	4f27      	ldr	r7, [pc, #156]	; (400d90 <dma_adc_init+0xb4>)
  400cf4:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  400cf6:	2118      	movs	r1, #24
  400cf8:	2000      	movs	r0, #0
  400cfa:	4d26      	ldr	r5, [pc, #152]	; (400d94 <dma_adc_init+0xb8>)
  400cfc:	47a8      	blx	r5
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  400cfe:	2100      	movs	r1, #0
  400d00:	460c      	mov	r4, r1
  400d02:	4608      	mov	r0, r1
  400d04:	4e24      	ldr	r6, [pc, #144]	; (400d98 <dma_adc_init+0xbc>)
  400d06:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  400d08:	6823      	ldr	r3, [r4, #0]
  400d0a:	4a24      	ldr	r2, [pc, #144]	; (400d9c <dma_adc_init+0xc0>)
  400d0c:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400d0e:	2201      	movs	r2, #1
  400d10:	4621      	mov	r1, r4
  400d12:	4620      	mov	r0, r4
  400d14:	4c22      	ldr	r4, [pc, #136]	; (400da0 <dma_adc_init+0xc4>)
  400d16:	47a0      	blx	r4
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  400d18:	4922      	ldr	r1, [pc, #136]	; (400da4 <dma_adc_init+0xc8>)
  400d1a:	2001      	movs	r0, #1
  400d1c:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400d1e:	f108 011c 	add.w	r1, r8, #28
  400d22:	2001      	movs	r0, #1
  400d24:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  400d26:	2110      	movs	r1, #16
  400d28:	2001      	movs	r0, #1
  400d2a:	47a8      	blx	r5
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  400d2c:	2101      	movs	r1, #1
  400d2e:	2500      	movs	r5, #0
  400d30:	4628      	mov	r0, r5
  400d32:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  400d34:	682b      	ldr	r3, [r5, #0]
  400d36:	4a1c      	ldr	r2, [pc, #112]	; (400da8 <dma_adc_init+0xcc>)
  400d38:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400d3a:	2201      	movs	r2, #1
  400d3c:	4629      	mov	r1, r5
  400d3e:	4610      	mov	r0, r2
  400d40:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d42:	4b1a      	ldr	r3, [pc, #104]	; (400dac <dma_adc_init+0xd0>)
  400d44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400d48:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400d4a:	2280      	movs	r2, #128	; 0x80
  400d4c:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d50:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400d58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d5c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d60:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d64:	f44f 7280 	mov.w	r2, #256	; 0x100
  400d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400d6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d70:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d74:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	dma_adc_0_disable_continuously();
  400d78:	4b0d      	ldr	r3, [pc, #52]	; (400db0 <dma_adc_init+0xd4>)
  400d7a:	4798      	blx	r3
	dma_adc_1_disable_continuously();
  400d7c:	4b0d      	ldr	r3, [pc, #52]	; (400db4 <dma_adc_init+0xd8>)
  400d7e:	4798      	blx	r3
	has_0_triggered = false;
  400d80:	4a0d      	ldr	r2, [pc, #52]	; (400db8 <dma_adc_init+0xdc>)
  400d82:	7015      	strb	r5, [r2, #0]
	has_1_triggered = false;
  400d84:	4a0d      	ldr	r2, [pc, #52]	; (400dbc <dma_adc_init+0xe0>)
  400d86:	7015      	strb	r5, [r2, #0]
  400d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400d8c:	4003c020 	.word	0x4003c020
  400d90:	00402e4d 	.word	0x00402e4d
  400d94:	00402e6d 	.word	0x00402e6d
  400d98:	00402e9d 	.word	0x00402e9d
  400d9c:	00400b31 	.word	0x00400b31
  400da0:	00402eb1 	.word	0x00402eb1
  400da4:	40064020 	.word	0x40064020
  400da8:	00400bf9 	.word	0x00400bf9
  400dac:	e000e100 	.word	0xe000e100
  400db0:	00400cc5 	.word	0x00400cc5
  400db4:	00400cd1 	.word	0x00400cd1
  400db8:	204005d4 	.word	0x204005d4
  400dbc:	204005ad 	.word	0x204005ad
  400dc0:	00402e5d 	.word	0x00402e5d
  400dc4:	20400238 	.word	0x20400238

00400dc8 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  400dc8:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  400dca:	4d11      	ldr	r5, [pc, #68]	; (400e10 <adc_enable_all+0x48>)
  400dcc:	2108      	movs	r1, #8
  400dce:	4628      	mov	r0, r5
  400dd0:	4c10      	ldr	r4, [pc, #64]	; (400e14 <adc_enable_all+0x4c>)
  400dd2:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  400dd4:	2102      	movs	r1, #2
  400dd6:	4628      	mov	r0, r5
  400dd8:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  400dda:	4e0f      	ldr	r6, [pc, #60]	; (400e18 <adc_enable_all+0x50>)
  400ddc:	2101      	movs	r1, #1
  400dde:	4630      	mov	r0, r6
  400de0:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  400de2:	2106      	movs	r1, #6
  400de4:	4630      	mov	r0, r6
  400de6:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  400de8:	2105      	movs	r1, #5
  400dea:	4630      	mov	r0, r6
  400dec:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  400dee:	2106      	movs	r1, #6
  400df0:	4628      	mov	r0, r5
  400df2:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  400df4:	210a      	movs	r1, #10
  400df6:	4628      	mov	r0, r5
  400df8:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  400dfa:	2100      	movs	r1, #0
  400dfc:	4630      	mov	r0, r6
  400dfe:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  400e00:	2105      	movs	r1, #5
  400e02:	4628      	mov	r0, r5
  400e04:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  400e06:	2100      	movs	r1, #0
  400e08:	4628      	mov	r0, r5
  400e0a:	47a0      	blx	r4
  400e0c:	bd70      	pop	{r4, r5, r6, pc}
  400e0e:	bf00      	nop
  400e10:	204006e0 	.word	0x204006e0
  400e14:	00401879 	.word	0x00401879
  400e18:	204007b8 	.word	0x204007b8

00400e1c <adc_read>:
	adc_async_disable_channel(ADC_TEMP_MOTOR);
}


//reads data from the DMA buffers
int adc_read(struct adc_async_descriptor *const descr, const uint8_t channel){
  400e1c:	b410      	push	{r4}
	//null checking variable to see if a write has occured
	has_0_triggered = false;
  400e1e:	2300      	movs	r3, #0
  400e20:	4a17      	ldr	r2, [pc, #92]	; (400e80 <adc_read+0x64>)
  400e22:	7013      	strb	r3, [r2, #0]
	has_1_triggered = false;
  400e24:	4a17      	ldr	r2, [pc, #92]	; (400e84 <adc_read+0x68>)
  400e26:	7013      	strb	r3, [r2, #0]
	
		
	if (descr == (&ADC_0)){
  400e28:	4b17      	ldr	r3, [pc, #92]	; (400e88 <adc_read+0x6c>)
  400e2a:	4298      	cmp	r0, r3
  400e2c:	d008      	beq.n	400e40 <adc_read+0x24>
				return temp;
			}
		}
	}
	
	if (descr == (&ADC_1)){
  400e2e:	4b17      	ldr	r3, [pc, #92]	; (400e8c <adc_read+0x70>)
  400e30:	4298      	cmp	r0, r3
  400e32:	d014      	beq.n	400e5e <adc_read+0x42>
			}
		}
	}
	
	
	return 0;
  400e34:	2000      	movs	r0, #0
  400e36:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e3a:	4770      	bx	lr
				int temp = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400e3c:	b298      	uxth	r0, r3
  400e3e:	e7fa      	b.n	400e36 <adc_read+0x1a>
  400e40:	2200      	movs	r2, #0
		for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400e42:	2a05      	cmp	r2, #5
  400e44:	dcf3      	bgt.n	400e2e <adc_read+0x12>
			if((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk) == AFEC_LCDR_CHNB(channel)){
  400e46:	4b12      	ldr	r3, [pc, #72]	; (400e90 <adc_read+0x74>)
  400e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400e4c:	ea83 6401 	eor.w	r4, r3, r1, lsl #24
  400e50:	f014 6f70 	tst.w	r4, #251658240	; 0xf000000
  400e54:	d0f2      	beq.n	400e3c <adc_read+0x20>
		for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400e56:	3201      	adds	r2, #1
  400e58:	e7f3      	b.n	400e42 <adc_read+0x26>
				int temp = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400e5a:	b280      	uxth	r0, r0
  400e5c:	e7eb      	b.n	400e36 <adc_read+0x1a>
  400e5e:	2300      	movs	r3, #0
		for (int i =0; i<ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400e60:	2b03      	cmp	r3, #3
  400e62:	dc0a      	bgt.n	400e7a <adc_read+0x5e>
			if((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk) == AFEC_LCDR_CHNB(channel)){
  400e64:	4a0a      	ldr	r2, [pc, #40]	; (400e90 <adc_read+0x74>)
  400e66:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  400e6a:	69d0      	ldr	r0, [r2, #28]
  400e6c:	ea80 6201 	eor.w	r2, r0, r1, lsl #24
  400e70:	f012 6f70 	tst.w	r2, #251658240	; 0xf000000
  400e74:	d0f1      	beq.n	400e5a <adc_read+0x3e>
		for (int i =0; i<ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400e76:	3301      	adds	r3, #1
  400e78:	e7f2      	b.n	400e60 <adc_read+0x44>
	return 0;
  400e7a:	2000      	movs	r0, #0
  400e7c:	e7db      	b.n	400e36 <adc_read+0x1a>
  400e7e:	bf00      	nop
  400e80:	204005d4 	.word	0x204005d4
  400e84:	204005ad 	.word	0x204005ad
  400e88:	204006e0 	.word	0x204006e0
  400e8c:	204007b8 	.word	0x204007b8
  400e90:	20400238 	.word	0x20400238

00400e94 <pwm_0_callback>:
#include <hpl_pwm.h>
#include <hpl_pwm_config.h>

int counter = 0;

void pwm_0_callback(const struct pwm_descriptor *const descr){
  400e94:	b508      	push	{r3, lr}
	
	gather_control_data();
  400e96:	4b01      	ldr	r3, [pc, #4]	; (400e9c <pwm_0_callback+0x8>)
  400e98:	4798      	blx	r3
  400e9a:	bd08      	pop	{r3, pc}
  400e9c:	004003d1 	.word	0x004003d1

00400ea0 <pwm_init_user>:
	}
	*/
}


void pwm_init_user(void){
  400ea0:	b508      	push	{r3, lr}
}

static inline void hri_pwm_set_CMR_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmr_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400ea2:	4b2e      	ldr	r3, [pc, #184]	; (400f5c <pwm_init_user+0xbc>)
  400ea4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  400ea8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400eac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}

static inline void hri_pwm_set_DT_DTH_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400eb0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400eb4:	f042 020a 	orr.w	r2, r2, #10
  400eb8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
}

static inline void hri_pwm_set_DT_DTL_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400ebc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400ec0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  400ec4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400ec8:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
  400ecc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400ed0:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400ed4:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400ed8:	f042 020a 	orr.w	r2, r2, #10
  400edc:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400ee0:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400ee4:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  400ee8:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400eec:	4a1c      	ldr	r2, [pc, #112]	; (400f60 <pwm_init_user+0xc0>)
  400eee:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  400ef2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  400ef6:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400efa:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400efe:	f041 010a 	orr.w	r1, r1, #10
  400f02:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400f06:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400f0a:	f441 2120 	orr.w	r1, r1, #655360	; 0xa0000
  400f0e:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
}

static inline void hri_pwm_set_CMPV_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmpv_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV |= mask;
  400f12:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
  400f16:	f041 0101 	orr.w	r1, r1, #1
  400f1a:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  400f1e:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
  400f22:	f041 0101 	orr.w	r1, r1, #1
  400f26:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  400f2a:	2201      	movs	r2, #1
  400f2c:	611a      	str	r2, [r3, #16]
	
	
	//we want interrupt from one of the PWMs so that we can start the control loop
	//interrupt on PWM 0, channel 0 is enabled ; on PWM 1 is disabled
	hri_pwm_set_IMR1_CHID0_bit(PWM0);									//enable the interrupt from ADC 0, channel 0
	pwm_register_callback(&PWM_0, PWM_PERIOD_CB, pwm_0_callback);
  400f2e:	4a0d      	ldr	r2, [pc, #52]	; (400f64 <pwm_init_user+0xc4>)
  400f30:	2100      	movs	r1, #0
  400f32:	480d      	ldr	r0, [pc, #52]	; (400f68 <pwm_init_user+0xc8>)
  400f34:	4b0d      	ldr	r3, [pc, #52]	; (400f6c <pwm_init_user+0xcc>)
  400f36:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400f38:	4b0d      	ldr	r3, [pc, #52]	; (400f70 <pwm_init_user+0xd0>)
  400f3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400f3e:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400f40:	2260      	movs	r2, #96	; 0x60
  400f42:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400f52:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400f56:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400f5a:	bd08      	pop	{r3, pc}
  400f5c:	40020000 	.word	0x40020000
  400f60:	4005c000 	.word	0x4005c000
  400f64:	00400e95 	.word	0x00400e95
  400f68:	204005f8 	.word	0x204005f8
  400f6c:	00401b65 	.word	0x00401b65
  400f70:	e000e100 	.word	0xe000e100

00400f74 <pwm_enable_all>:
}


//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400f74:	b570      	push	{r4, r5, r6, lr}
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM |= mask;
  400f76:	4a12      	ldr	r2, [pc, #72]	; (400fc0 <pwm_enable_all+0x4c>)
  400f78:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400f7c:	f043 0301 	orr.w	r3, r3, #1
  400f80:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
  400f84:	f502 3270 	add.w	r2, r2, #245760	; 0x3c000
  400f88:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400f8c:	f043 0301 	orr.w	r3, r3, #1
  400f90:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	hri_pwm_set_CMPM_reg(PWM0, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	hri_pwm_set_CMPM_reg(PWM1, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  400f94:	4c0b      	ldr	r4, [pc, #44]	; (400fc4 <pwm_enable_all+0x50>)
  400f96:	4620      	mov	r0, r4
  400f98:	4e0b      	ldr	r6, [pc, #44]	; (400fc8 <pwm_enable_all+0x54>)
  400f9a:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  400f9c:	4d0b      	ldr	r5, [pc, #44]	; (400fcc <pwm_enable_all+0x58>)
  400f9e:	4628      	mov	r0, r5
  400fa0:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD-1);
  400fa2:	f240 32e7 	movw	r2, #999	; 0x3e7
  400fa6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400faa:	4620      	mov	r0, r4
  400fac:	4c08      	ldr	r4, [pc, #32]	; (400fd0 <pwm_enable_all+0x5c>)
  400fae:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD-1);
  400fb0:	f240 32e7 	movw	r2, #999	; 0x3e7
  400fb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400fb8:	4628      	mov	r0, r5
  400fba:	47a0      	blx	r4
  400fbc:	bd70      	pop	{r4, r5, r6, pc}
  400fbe:	bf00      	nop
  400fc0:	40020000 	.word	0x40020000
  400fc4:	204005f8 	.word	0x204005f8
  400fc8:	00401b29 	.word	0x00401b29
  400fcc:	2040079c 	.word	0x2040079c
  400fd0:	00401bad 	.word	0x00401bad

00400fd4 <pwm_set_duty>:
//sets individual channel pwm duty cycle
void pwm_set_duty(struct  pwm_descriptor * const descr, const uint8_t channel, const pwm_period_t duty_cycle){
	// based on available code from <hpl_pwm.h>
	// the default function doesn't allow to set the PWM cycle on individual channels
	
	hri_pwm_write_CDTYUPD_reg(descr->device.hw, channel, duty_cycle);
  400fd4:	6903      	ldr	r3, [r0, #16]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  400fd6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  400fda:	f8c1 2208 	str.w	r2, [r1, #520]	; 0x208
  400fde:	4770      	bx	lr

00400fe0 <Current_Offset_Test>:
	printf("\n Current and Voltage Testing -----------------\n");
	printf("Raw Data \n");
	printf("CurrA = %i \t\t CurrB = %i \t\t CurrC = %i \n",current_test_data[0], current_test_data[1], current_test_data[2]);
	printf("Supply Voltage = %i  \n",voltage_test_data);
}
void Current_Offset_Test(void){
  400fe0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  400fe4:	b085      	sub	sp, #20
	while(1){
		dma_adc_0_enable_for_one_transaction();
  400fe6:	4b23      	ldr	r3, [pc, #140]	; (401074 <Current_Offset_Test+0x94>)
  400fe8:	4798      	blx	r3
		dma_adc_1_enable_for_one_transaction();
  400fea:	4b23      	ldr	r3, [pc, #140]	; (401078 <Current_Offset_Test+0x98>)
  400fec:	4798      	blx	r3
		delay_ms(2);
  400fee:	2002      	movs	r0, #2
  400ff0:	4f22      	ldr	r7, [pc, #136]	; (40107c <Current_Offset_Test+0x9c>)
  400ff2:	47b8      	blx	r7
		printf("Curr A offset (V) - %f \t voltage -  %f  \t current - %f\n",curr_A_offset, raw_data_to_voltage(adc_read(ADC_CURRENT_A)), reconstruct_curr_A(adc_read(ADC_CURRENT_A)));
  400ff4:	4c22      	ldr	r4, [pc, #136]	; (401080 <Current_Offset_Test+0xa0>)
  400ff6:	4b23      	ldr	r3, [pc, #140]	; (401084 <Current_Offset_Test+0xa4>)
  400ff8:	6818      	ldr	r0, [r3, #0]
  400ffa:	47a0      	blx	r4
  400ffc:	4680      	mov	r8, r0
  400ffe:	4689      	mov	r9, r1
  401000:	4e21      	ldr	r6, [pc, #132]	; (401088 <Current_Offset_Test+0xa8>)
  401002:	2108      	movs	r1, #8
  401004:	4630      	mov	r0, r6
  401006:	4d21      	ldr	r5, [pc, #132]	; (40108c <Current_Offset_Test+0xac>)
  401008:	47a8      	blx	r5
  40100a:	f8df a098 	ldr.w	sl, [pc, #152]	; 4010a4 <Current_Offset_Test+0xc4>
  40100e:	47d0      	blx	sl
  401010:	4683      	mov	fp, r0
  401012:	2108      	movs	r1, #8
  401014:	4630      	mov	r0, r6
  401016:	47a8      	blx	r5
  401018:	4b1d      	ldr	r3, [pc, #116]	; (401090 <Current_Offset_Test+0xb0>)
  40101a:	4798      	blx	r3
  40101c:	47a0      	blx	r4
  40101e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401022:	4658      	mov	r0, fp
  401024:	47a0      	blx	r4
  401026:	e9cd 0100 	strd	r0, r1, [sp]
  40102a:	4642      	mov	r2, r8
  40102c:	464b      	mov	r3, r9
  40102e:	4819      	ldr	r0, [pc, #100]	; (401094 <Current_Offset_Test+0xb4>)
  401030:	f8df b074 	ldr.w	fp, [pc, #116]	; 4010a8 <Current_Offset_Test+0xc8>
  401034:	47d8      	blx	fp
		printf("Curr B offset (V) - %f \t voltage -  %f  \t current - %f\n",curr_B_offset, raw_data_to_voltage(adc_read(ADC_CURRENT_B)), reconstruct_curr_B(adc_read(ADC_CURRENT_B)));
  401036:	4b18      	ldr	r3, [pc, #96]	; (401098 <Current_Offset_Test+0xb8>)
  401038:	6818      	ldr	r0, [r3, #0]
  40103a:	47a0      	blx	r4
  40103c:	4680      	mov	r8, r0
  40103e:	4689      	mov	r9, r1
  401040:	2102      	movs	r1, #2
  401042:	4630      	mov	r0, r6
  401044:	47a8      	blx	r5
  401046:	47d0      	blx	sl
  401048:	4682      	mov	sl, r0
  40104a:	2102      	movs	r1, #2
  40104c:	4630      	mov	r0, r6
  40104e:	47a8      	blx	r5
  401050:	4b12      	ldr	r3, [pc, #72]	; (40109c <Current_Offset_Test+0xbc>)
  401052:	4798      	blx	r3
  401054:	47a0      	blx	r4
  401056:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40105a:	4650      	mov	r0, sl
  40105c:	47a0      	blx	r4
  40105e:	e9cd 0100 	strd	r0, r1, [sp]
  401062:	4642      	mov	r2, r8
  401064:	464b      	mov	r3, r9
  401066:	480e      	ldr	r0, [pc, #56]	; (4010a0 <Current_Offset_Test+0xc0>)
  401068:	47d8      	blx	fp
		delay_ms(1000);
  40106a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40106e:	47b8      	blx	r7
  401070:	e7b9      	b.n	400fe6 <Current_Offset_Test+0x6>
  401072:	bf00      	nop
  401074:	00400b05 	.word	0x00400b05
  401078:	00400bcd 	.word	0x00400bcd
  40107c:	00401909 	.word	0x00401909
  401080:	0040485d 	.word	0x0040485d
  401084:	204005d0 	.word	0x204005d0
  401088:	204006e0 	.word	0x204006e0
  40108c:	00400e1d 	.word	0x00400e1d
  401090:	00400571 	.word	0x00400571
  401094:	0040796c 	.word	0x0040796c
  401098:	204005d8 	.word	0x204005d8
  40109c:	004005c1 	.word	0x004005c1
  4010a0:	004079a4 	.word	0x004079a4
  4010a4:	004004c9 	.word	0x004004c9
  4010a8:	00405881 	.word	0x00405881

004010ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4010ac:	e7fe      	b.n	4010ac <Dummy_Handler>
	...

004010b0 <Reset_Handler>:
{
  4010b0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4010b2:	4b10      	ldr	r3, [pc, #64]	; (4010f4 <Reset_Handler+0x44>)
  4010b4:	4a10      	ldr	r2, [pc, #64]	; (4010f8 <Reset_Handler+0x48>)
  4010b6:	429a      	cmp	r2, r3
  4010b8:	d009      	beq.n	4010ce <Reset_Handler+0x1e>
  4010ba:	4b0e      	ldr	r3, [pc, #56]	; (4010f4 <Reset_Handler+0x44>)
  4010bc:	4a0e      	ldr	r2, [pc, #56]	; (4010f8 <Reset_Handler+0x48>)
  4010be:	e003      	b.n	4010c8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4010c0:	6811      	ldr	r1, [r2, #0]
  4010c2:	6019      	str	r1, [r3, #0]
  4010c4:	3304      	adds	r3, #4
  4010c6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4010c8:	490c      	ldr	r1, [pc, #48]	; (4010fc <Reset_Handler+0x4c>)
  4010ca:	428b      	cmp	r3, r1
  4010cc:	d3f8      	bcc.n	4010c0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4010ce:	4b0c      	ldr	r3, [pc, #48]	; (401100 <Reset_Handler+0x50>)
  4010d0:	e002      	b.n	4010d8 <Reset_Handler+0x28>
                *pDest++ = 0;
  4010d2:	2200      	movs	r2, #0
  4010d4:	601a      	str	r2, [r3, #0]
  4010d6:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4010d8:	4a0a      	ldr	r2, [pc, #40]	; (401104 <Reset_Handler+0x54>)
  4010da:	4293      	cmp	r3, r2
  4010dc:	d3f9      	bcc.n	4010d2 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4010de:	4a0a      	ldr	r2, [pc, #40]	; (401108 <Reset_Handler+0x58>)
  4010e0:	4b0a      	ldr	r3, [pc, #40]	; (40110c <Reset_Handler+0x5c>)
  4010e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4010e6:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4010e8:	4b09      	ldr	r3, [pc, #36]	; (401110 <Reset_Handler+0x60>)
  4010ea:	4798      	blx	r3
        main();
  4010ec:	4b09      	ldr	r3, [pc, #36]	; (401114 <Reset_Handler+0x64>)
  4010ee:	4798      	blx	r3
  4010f0:	e7fe      	b.n	4010f0 <Reset_Handler+0x40>
  4010f2:	bf00      	nop
  4010f4:	20400000 	.word	0x20400000
  4010f8:	00408378 	.word	0x00408378
  4010fc:	20400218 	.word	0x20400218
  401100:	20400218 	.word	0x20400218
  401104:	204007e8 	.word	0x204007e8
  401108:	e000ed00 	.word	0xe000ed00
  40110c:	00400000 	.word	0x00400000
  401110:	00404f55 	.word	0x00404f55
  401114:	00402f79 	.word	0x00402f79

00401118 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  401118:	b5f0      	push	{r4, r5, r6, r7, lr}
  40111a:	b085      	sub	sp, #20
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40111c:	4b20      	ldr	r3, [pc, #128]	; (4011a0 <ADC_1_init+0x88>)
  40111e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  401122:	f413 7f80 	tst.w	r3, #256	; 0x100
  401126:	d104      	bne.n	401132 <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401128:	f44f 7280 	mov.w	r2, #256	; 0x100
  40112c:	4b1c      	ldr	r3, [pc, #112]	; (4011a0 <ADC_1_init+0x88>)
  40112e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  401132:	4d1c      	ldr	r5, [pc, #112]	; (4011a4 <ADC_1_init+0x8c>)
  401134:	4c1c      	ldr	r4, [pc, #112]	; (4011a8 <ADC_1_init+0x90>)
  401136:	2600      	movs	r6, #0
  401138:	9602      	str	r6, [sp, #8]
  40113a:	4b1c      	ldr	r3, [pc, #112]	; (4011ac <ADC_1_init+0x94>)
  40113c:	9301      	str	r3, [sp, #4]
  40113e:	2304      	movs	r3, #4
  401140:	9300      	str	r3, [sp, #0]
  401142:	2306      	movs	r3, #6
  401144:	462a      	mov	r2, r5
  401146:	491a      	ldr	r1, [pc, #104]	; (4011b0 <ADC_1_init+0x98>)
  401148:	4620      	mov	r0, r4
  40114a:	4f1a      	ldr	r7, [pc, #104]	; (4011b4 <ADC_1_init+0x9c>)
  40114c:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  40114e:	2310      	movs	r3, #16
  401150:	f105 0208 	add.w	r2, r5, #8
  401154:	4631      	mov	r1, r6
  401156:	4620      	mov	r0, r4
  401158:	4e17      	ldr	r6, [pc, #92]	; (4011b8 <ADC_1_init+0xa0>)
  40115a:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  40115c:	2310      	movs	r3, #16
  40115e:	f105 0218 	add.w	r2, r5, #24
  401162:	2101      	movs	r1, #1
  401164:	4620      	mov	r0, r4
  401166:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  401168:	2310      	movs	r3, #16
  40116a:	f105 0228 	add.w	r2, r5, #40	; 0x28
  40116e:	2105      	movs	r1, #5
  401170:	4620      	mov	r0, r4
  401172:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  401174:	2310      	movs	r3, #16
  401176:	f105 0238 	add.w	r2, r5, #56	; 0x38
  40117a:	2106      	movs	r1, #6
  40117c:	4620      	mov	r0, r4
  40117e:	47b0      	blx	r6
	((Pio *)hw)->PIO_PER = mask;
  401180:	2202      	movs	r2, #2
  401182:	4b0e      	ldr	r3, [pc, #56]	; (4011bc <ADC_1_init+0xa4>)
  401184:	601a      	str	r2, [r3, #0]
  401186:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40118a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40118e:	601a      	str	r2, [r3, #0]
  401190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401194:	601a      	str	r2, [r3, #0]
  401196:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40119a:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  40119c:	b005      	add	sp, #20
  40119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4011a0:	400e0600 	.word	0x400e0600
  4011a4:	20400264 	.word	0x20400264
  4011a8:	204007b8 	.word	0x204007b8
  4011ac:	20400658 	.word	0x20400658
  4011b0:	40064000 	.word	0x40064000
  4011b4:	00401719 	.word	0x00401719
  4011b8:	004017c1 	.word	0x004017c1
  4011bc:	400e1000 	.word	0x400e1000

004011c0 <ADC_0_init>:
{
  4011c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011c4:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4011c6:	4b2a      	ldr	r3, [pc, #168]	; (401270 <ADC_0_init+0xb0>)
  4011c8:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4011ca:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  4011ce:	d103      	bne.n	4011d8 <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4011d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4011d4:	4b26      	ldr	r3, [pc, #152]	; (401270 <ADC_0_init+0xb0>)
  4011d6:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  4011d8:	4d26      	ldr	r5, [pc, #152]	; (401274 <ADC_0_init+0xb4>)
  4011da:	4c27      	ldr	r4, [pc, #156]	; (401278 <ADC_0_init+0xb8>)
  4011dc:	2600      	movs	r6, #0
  4011de:	9602      	str	r6, [sp, #8]
  4011e0:	4b26      	ldr	r3, [pc, #152]	; (40127c <ADC_0_init+0xbc>)
  4011e2:	9301      	str	r3, [sp, #4]
  4011e4:	2706      	movs	r7, #6
  4011e6:	9700      	str	r7, [sp, #0]
  4011e8:	230a      	movs	r3, #10
  4011ea:	f105 0248 	add.w	r2, r5, #72	; 0x48
  4011ee:	4924      	ldr	r1, [pc, #144]	; (401280 <ADC_0_init+0xc0>)
  4011f0:	4620      	mov	r0, r4
  4011f2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 401290 <ADC_0_init+0xd0>
  4011f6:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  4011f8:	2310      	movs	r3, #16
  4011fa:	f105 0254 	add.w	r2, r5, #84	; 0x54
  4011fe:	4631      	mov	r1, r6
  401200:	4620      	mov	r0, r4
  401202:	4e20      	ldr	r6, [pc, #128]	; (401284 <ADC_0_init+0xc4>)
  401204:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  401206:	2310      	movs	r3, #16
  401208:	f105 0264 	add.w	r2, r5, #100	; 0x64
  40120c:	2102      	movs	r1, #2
  40120e:	4620      	mov	r0, r4
  401210:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  401212:	2310      	movs	r3, #16
  401214:	f105 0274 	add.w	r2, r5, #116	; 0x74
  401218:	2105      	movs	r1, #5
  40121a:	4620      	mov	r0, r4
  40121c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  40121e:	2310      	movs	r3, #16
  401220:	f105 0284 	add.w	r2, r5, #132	; 0x84
  401224:	4639      	mov	r1, r7
  401226:	4620      	mov	r0, r4
  401228:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  40122a:	2310      	movs	r3, #16
  40122c:	f105 0294 	add.w	r2, r5, #148	; 0x94
  401230:	2108      	movs	r1, #8
  401232:	4620      	mov	r0, r4
  401234:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  401236:	2310      	movs	r3, #16
  401238:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  40123c:	210a      	movs	r1, #10
  40123e:	4620      	mov	r0, r4
  401240:	47b0      	blx	r6
  401242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401246:	4b10      	ldr	r3, [pc, #64]	; (401288 <ADC_0_init+0xc8>)
  401248:	601a      	str	r2, [r3, #0]
  40124a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40124e:	2208      	movs	r2, #8
  401250:	601a      	str	r2, [r3, #0]
  401252:	2204      	movs	r2, #4
  401254:	601a      	str	r2, [r3, #0]
  401256:	4a0d      	ldr	r2, [pc, #52]	; (40128c <ADC_0_init+0xcc>)
  401258:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40125c:	6011      	str	r1, [r2, #0]
  40125e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401262:	6011      	str	r1, [r2, #0]
  401264:	2201      	movs	r2, #1
  401266:	601a      	str	r2, [r3, #0]
}
  401268:	b004      	add	sp, #16
  40126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40126e:	bf00      	nop
  401270:	400e0600 	.word	0x400e0600
  401274:	20400264 	.word	0x20400264
  401278:	204006e0 	.word	0x204006e0
  40127c:	2040070c 	.word	0x2040070c
  401280:	4003c000 	.word	0x4003c000
  401284:	004017c1 	.word	0x004017c1
  401288:	400e1400 	.word	0x400e1400
  40128c:	400e0e00 	.word	0x400e0e00
  401290:	00401719 	.word	0x00401719

00401294 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = mask;
  401294:	4b04      	ldr	r3, [pc, #16]	; (4012a8 <EXTERNAL_IRQ_D_init+0x14>)
  401296:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40129a:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40129c:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40129e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4012a2:	601a      	str	r2, [r3, #0]
  4012a4:	4770      	bx	lr
  4012a6:	bf00      	nop
  4012a8:	400e1400 	.word	0x400e1400

004012ac <EXTERNAL_IRQ_B_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4012ac:	4b04      	ldr	r3, [pc, #16]	; (4012c0 <EXTERNAL_IRQ_B_init+0x14>)
  4012ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4012b2:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4012b4:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4012b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4012ba:	601a      	str	r2, [r3, #0]
  4012bc:	4770      	bx	lr
  4012be:	bf00      	nop
  4012c0:	400e1000 	.word	0x400e1000

004012c4 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4012c4:	4b06      	ldr	r3, [pc, #24]	; (4012e0 <EXTERNAL_IRQ_A_init+0x1c>)
  4012c6:	2204      	movs	r2, #4
  4012c8:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4012ca:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4012cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4012d0:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4012d2:	2220      	movs	r2, #32
  4012d4:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4012d6:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4012d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4012dc:	601a      	str	r2, [r3, #0]
  4012de:	4770      	bx	lr
  4012e0:	400e0e00 	.word	0x400e0e00

004012e4 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4012e4:	4b16      	ldr	r3, [pc, #88]	; (401340 <PWM_0_PORT_init+0x5c>)
  4012e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4012e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  4012ec:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4012ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4012f0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  4012f4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4012f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4012fa:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4012fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4012fe:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  401302:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401304:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401306:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  40130a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40130c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401310:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401312:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401314:	f022 0202 	bic.w	r2, r2, #2
  401318:	671a      	str	r2, [r3, #112]	; 0x70
  40131a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40131c:	f022 0202 	bic.w	r2, r2, #2
  401320:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401322:	2202      	movs	r2, #2
  401324:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401326:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401328:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  40132c:	671a      	str	r2, [r3, #112]	; 0x70
  40132e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401330:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  401334:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40133a:	605a      	str	r2, [r3, #4]
  40133c:	4770      	bx	lr
  40133e:	bf00      	nop
  401340:	400e0e00 	.word	0x400e0e00

00401344 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401344:	4b04      	ldr	r3, [pc, #16]	; (401358 <PWM_0_CLOCK_init+0x14>)
  401346:	699b      	ldr	r3, [r3, #24]
  401348:	2b00      	cmp	r3, #0
  40134a:	db03      	blt.n	401354 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40134c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401350:	4b01      	ldr	r3, [pc, #4]	; (401358 <PWM_0_CLOCK_init+0x14>)
  401352:	611a      	str	r2, [r3, #16]
  401354:	4770      	bx	lr
  401356:	bf00      	nop
  401358:	400e0600 	.word	0x400e0600

0040135c <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  40135c:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  40135e:	4b06      	ldr	r3, [pc, #24]	; (401378 <PWM_0_init+0x1c>)
  401360:	4798      	blx	r3
	PWM_0_PORT_init();
  401362:	4b06      	ldr	r3, [pc, #24]	; (40137c <PWM_0_init+0x20>)
  401364:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  401366:	4b06      	ldr	r3, [pc, #24]	; (401380 <PWM_0_init+0x24>)
  401368:	4798      	blx	r3
  40136a:	4602      	mov	r2, r0
  40136c:	4905      	ldr	r1, [pc, #20]	; (401384 <PWM_0_init+0x28>)
  40136e:	4806      	ldr	r0, [pc, #24]	; (401388 <PWM_0_init+0x2c>)
  401370:	4b06      	ldr	r3, [pc, #24]	; (40138c <PWM_0_init+0x30>)
  401372:	4798      	blx	r3
  401374:	bd08      	pop	{r3, pc}
  401376:	bf00      	nop
  401378:	00401345 	.word	0x00401345
  40137c:	004012e5 	.word	0x004012e5
  401380:	004029bd 	.word	0x004029bd
  401384:	40020000 	.word	0x40020000
  401388:	204005f8 	.word	0x204005f8
  40138c:	00401ae5 	.word	0x00401ae5

00401390 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401390:	4b0c      	ldr	r3, [pc, #48]	; (4013c4 <PWM_1_PORT_init+0x34>)
  401392:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401394:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  401398:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40139a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40139c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4013a0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4013a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4013a6:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4013a8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4013ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4013ae:	f042 0201 	orr.w	r2, r2, #1
  4013b2:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4013b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4013b6:	f022 0201 	bic.w	r2, r2, #1
  4013ba:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4013bc:	2201      	movs	r2, #1
  4013be:	605a      	str	r2, [r3, #4]
  4013c0:	4770      	bx	lr
  4013c2:	bf00      	nop
  4013c4:	400e0e00 	.word	0x400e0e00

004013c8 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4013c8:	4b05      	ldr	r3, [pc, #20]	; (4013e0 <PWM_1_CLOCK_init+0x18>)
  4013ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4013ce:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  4013d2:	d104      	bne.n	4013de <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4013d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4013d8:	4b01      	ldr	r3, [pc, #4]	; (4013e0 <PWM_1_CLOCK_init+0x18>)
  4013da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4013de:	4770      	bx	lr
  4013e0:	400e0600 	.word	0x400e0600

004013e4 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  4013e4:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  4013e6:	4b06      	ldr	r3, [pc, #24]	; (401400 <PWM_1_init+0x1c>)
  4013e8:	4798      	blx	r3
	PWM_1_PORT_init();
  4013ea:	4b06      	ldr	r3, [pc, #24]	; (401404 <PWM_1_init+0x20>)
  4013ec:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  4013ee:	4b06      	ldr	r3, [pc, #24]	; (401408 <PWM_1_init+0x24>)
  4013f0:	4798      	blx	r3
  4013f2:	4602      	mov	r2, r0
  4013f4:	4905      	ldr	r1, [pc, #20]	; (40140c <PWM_1_init+0x28>)
  4013f6:	4806      	ldr	r0, [pc, #24]	; (401410 <PWM_1_init+0x2c>)
  4013f8:	4b06      	ldr	r3, [pc, #24]	; (401414 <PWM_1_init+0x30>)
  4013fa:	4798      	blx	r3
  4013fc:	bd08      	pop	{r3, pc}
  4013fe:	bf00      	nop
  401400:	004013c9 	.word	0x004013c9
  401404:	00401391 	.word	0x00401391
  401408:	004029bd 	.word	0x004029bd
  40140c:	4005c000 	.word	0x4005c000
  401410:	2040079c 	.word	0x2040079c
  401414:	00401ae5 	.word	0x00401ae5

00401418 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401418:	4b06      	ldr	r3, [pc, #24]	; (401434 <ENCODER_A_PORT_init+0x1c>)
  40141a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40141c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  401420:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401422:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401424:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  401428:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40142a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40142e:	605a      	str	r2, [r3, #4]
  401430:	4770      	bx	lr
  401432:	bf00      	nop
  401434:	400e0e00 	.word	0x400e0e00

00401438 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  401438:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40143a:	4b09      	ldr	r3, [pc, #36]	; (401460 <ENCODER_A_init+0x28>)
  40143c:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40143e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  401442:	d103      	bne.n	40144c <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401444:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401448:	4b05      	ldr	r3, [pc, #20]	; (401460 <ENCODER_A_init+0x28>)
  40144a:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  40144c:	4b05      	ldr	r3, [pc, #20]	; (401464 <ENCODER_A_init+0x2c>)
  40144e:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  401450:	4b05      	ldr	r3, [pc, #20]	; (401468 <ENCODER_A_init+0x30>)
  401452:	4798      	blx	r3
  401454:	4602      	mov	r2, r0
  401456:	4905      	ldr	r1, [pc, #20]	; (40146c <ENCODER_A_init+0x34>)
  401458:	4805      	ldr	r0, [pc, #20]	; (401470 <ENCODER_A_init+0x38>)
  40145a:	4b06      	ldr	r3, [pc, #24]	; (401474 <ENCODER_A_init+0x3c>)
  40145c:	4798      	blx	r3
  40145e:	bd08      	pop	{r3, pc}
  401460:	400e0600 	.word	0x400e0600
  401464:	00401419 	.word	0x00401419
  401468:	00402b93 	.word	0x00402b93
  40146c:	4000c000 	.word	0x4000c000
  401470:	204006c4 	.word	0x204006c4
  401474:	00401c95 	.word	0x00401c95

00401478 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401478:	4b06      	ldr	r3, [pc, #24]	; (401494 <ENCODER_B_PORT_init+0x1c>)
  40147a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40147c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  401480:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401482:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401484:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  401488:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40148a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40148e:	605a      	str	r2, [r3, #4]
  401490:	4770      	bx	lr
  401492:	bf00      	nop
  401494:	400e1400 	.word	0x400e1400

00401498 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  401498:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40149a:	4b0a      	ldr	r3, [pc, #40]	; (4014c4 <ENCODER_B_init+0x2c>)
  40149c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4014a0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  4014a4:	d104      	bne.n	4014b0 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4014a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4014aa:	4b06      	ldr	r3, [pc, #24]	; (4014c4 <ENCODER_B_init+0x2c>)
  4014ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  4014b0:	4b05      	ldr	r3, [pc, #20]	; (4014c8 <ENCODER_B_init+0x30>)
  4014b2:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  4014b4:	4b05      	ldr	r3, [pc, #20]	; (4014cc <ENCODER_B_init+0x34>)
  4014b6:	4798      	blx	r3
  4014b8:	4602      	mov	r2, r0
  4014ba:	4905      	ldr	r1, [pc, #20]	; (4014d0 <ENCODER_B_init+0x38>)
  4014bc:	4805      	ldr	r0, [pc, #20]	; (4014d4 <ENCODER_B_init+0x3c>)
  4014be:	4b06      	ldr	r3, [pc, #24]	; (4014d8 <ENCODER_B_init+0x40>)
  4014c0:	4798      	blx	r3
  4014c2:	bd08      	pop	{r3, pc}
  4014c4:	400e0600 	.word	0x400e0600
  4014c8:	00401479 	.word	0x00401479
  4014cc:	00402b93 	.word	0x00402b93
  4014d0:	40054000 	.word	0x40054000
  4014d4:	20400614 	.word	0x20400614
  4014d8:	00401c95 	.word	0x00401c95

004014dc <delay_driver_init>:
}

void delay_driver_init(void)
{
  4014dc:	b508      	push	{r3, lr}
	delay_init(SysTick);
  4014de:	4802      	ldr	r0, [pc, #8]	; (4014e8 <delay_driver_init+0xc>)
  4014e0:	4b02      	ldr	r3, [pc, #8]	; (4014ec <delay_driver_init+0x10>)
  4014e2:	4798      	blx	r3
  4014e4:	bd08      	pop	{r3, pc}
  4014e6:	bf00      	nop
  4014e8:	e000e010 	.word	0xe000e010
  4014ec:	004018d5 	.word	0x004018d5

004014f0 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4014f0:	4b0f      	ldr	r3, [pc, #60]	; (401530 <EDBG_COM_PORT_init+0x40>)
  4014f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4014f4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4014f8:	671a      	str	r2, [r3, #112]	; 0x70
  4014fa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4014fc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401500:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401502:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401506:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  401508:	4a0a      	ldr	r2, [pc, #40]	; (401534 <EDBG_COM_PORT_init+0x44>)
  40150a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40150e:	f043 0310 	orr.w	r3, r3, #16
  401512:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401516:	4b08      	ldr	r3, [pc, #32]	; (401538 <EDBG_COM_PORT_init+0x48>)
  401518:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40151a:	f042 0210 	orr.w	r2, r2, #16
  40151e:	671a      	str	r2, [r3, #112]	; 0x70
  401520:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401522:	f042 0210 	orr.w	r2, r2, #16
  401526:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401528:	2210      	movs	r2, #16
  40152a:	605a      	str	r2, [r3, #4]
  40152c:	4770      	bx	lr
  40152e:	bf00      	nop
  401530:	400e0e00 	.word	0x400e0e00
  401534:	40088000 	.word	0x40088000
  401538:	400e1000 	.word	0x400e1000

0040153c <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40153c:	4b04      	ldr	r3, [pc, #16]	; (401550 <EDBG_COM_CLOCK_init+0x14>)
  40153e:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  401540:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  401544:	d103      	bne.n	40154e <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40154a:	4b01      	ldr	r3, [pc, #4]	; (401550 <EDBG_COM_CLOCK_init+0x14>)
  40154c:	611a      	str	r2, [r3, #16]
  40154e:	4770      	bx	lr
  401550:	400e0600 	.word	0x400e0600

00401554 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  401554:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  401556:	4b06      	ldr	r3, [pc, #24]	; (401570 <EDBG_COM_init+0x1c>)
  401558:	4798      	blx	r3
	EDBG_COM_PORT_init();
  40155a:	4b06      	ldr	r3, [pc, #24]	; (401574 <EDBG_COM_init+0x20>)
  40155c:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  40155e:	4b06      	ldr	r3, [pc, #24]	; (401578 <EDBG_COM_init+0x24>)
  401560:	4798      	blx	r3
  401562:	4602      	mov	r2, r0
  401564:	4905      	ldr	r1, [pc, #20]	; (40157c <EDBG_COM_init+0x28>)
  401566:	4806      	ldr	r0, [pc, #24]	; (401580 <EDBG_COM_init+0x2c>)
  401568:	4b06      	ldr	r3, [pc, #24]	; (401584 <EDBG_COM_init+0x30>)
  40156a:	4798      	blx	r3
  40156c:	bd08      	pop	{r3, pc}
  40156e:	bf00      	nop
  401570:	0040153d 	.word	0x0040153d
  401574:	004014f1 	.word	0x004014f1
  401578:	00402dd5 	.word	0x00402dd5
  40157c:	40028000 	.word	0x40028000
  401580:	204006b8 	.word	0x204006b8
  401584:	00401ddd 	.word	0x00401ddd

00401588 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  401588:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  40158a:	4b37      	ldr	r3, [pc, #220]	; (401668 <system_init+0xe0>)
  40158c:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40158e:	4b37      	ldr	r3, [pc, #220]	; (40166c <system_init+0xe4>)
  401590:	699b      	ldr	r3, [r3, #24]
  401592:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401596:	d103      	bne.n	4015a0 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401598:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40159c:	4b33      	ldr	r3, [pc, #204]	; (40166c <system_init+0xe4>)
  40159e:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4015a0:	4b32      	ldr	r3, [pc, #200]	; (40166c <system_init+0xe4>)
  4015a2:	699b      	ldr	r3, [r3, #24]
  4015a4:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4015a8:	d103      	bne.n	4015b2 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4015aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4015ae:	4b2f      	ldr	r3, [pc, #188]	; (40166c <system_init+0xe4>)
  4015b0:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4015b2:	4b2e      	ldr	r3, [pc, #184]	; (40166c <system_init+0xe4>)
  4015b4:	699b      	ldr	r3, [r3, #24]
  4015b6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  4015ba:	d103      	bne.n	4015c4 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4015bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4015c0:	4b2a      	ldr	r3, [pc, #168]	; (40166c <system_init+0xe4>)
  4015c2:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4015c4:	4b29      	ldr	r3, [pc, #164]	; (40166c <system_init+0xe4>)
  4015c6:	699b      	ldr	r3, [r3, #24]
  4015c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4015cc:	d103      	bne.n	4015d6 <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4015ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4015d2:	4b26      	ldr	r3, [pc, #152]	; (40166c <system_init+0xe4>)
  4015d4:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  4015d6:	4a26      	ldr	r2, [pc, #152]	; (401670 <system_init+0xe8>)
  4015d8:	6853      	ldr	r3, [r2, #4]
  4015da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4015de:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  4015e0:	4b24      	ldr	r3, [pc, #144]	; (401674 <system_init+0xec>)
  4015e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4015e6:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  4015e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  4015ec:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  4015ee:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4015f0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  4015f4:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4015f6:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4015f8:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4015fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015fe:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401600:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401602:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  401608:	f44f 7080 	mov.w	r0, #256	; 0x100
  40160c:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40160e:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401610:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401612:	f44f 7000 	mov.w	r0, #512	; 0x200
  401616:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401618:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40161a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40161c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401620:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401622:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401624:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401626:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40162a:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40162c:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40162e:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401630:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401632:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401634:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  401636:	4b10      	ldr	r3, [pc, #64]	; (401678 <system_init+0xf0>)
  401638:	4798      	blx	r3
	ADC_1_init();
  40163a:	4b10      	ldr	r3, [pc, #64]	; (40167c <system_init+0xf4>)
  40163c:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  40163e:	4b10      	ldr	r3, [pc, #64]	; (401680 <system_init+0xf8>)
  401640:	4798      	blx	r3
	EXTERNAL_IRQ_B_init();
  401642:	4b10      	ldr	r3, [pc, #64]	; (401684 <system_init+0xfc>)
  401644:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  401646:	4b10      	ldr	r3, [pc, #64]	; (401688 <system_init+0x100>)
  401648:	4798      	blx	r3

	PWM_0_init();
  40164a:	4b10      	ldr	r3, [pc, #64]	; (40168c <system_init+0x104>)
  40164c:	4798      	blx	r3

	PWM_1_init();
  40164e:	4b10      	ldr	r3, [pc, #64]	; (401690 <system_init+0x108>)
  401650:	4798      	blx	r3
	ENCODER_A_init();
  401652:	4b10      	ldr	r3, [pc, #64]	; (401694 <system_init+0x10c>)
  401654:	4798      	blx	r3
	ENCODER_B_init();
  401656:	4b10      	ldr	r3, [pc, #64]	; (401698 <system_init+0x110>)
  401658:	4798      	blx	r3

	delay_driver_init();
  40165a:	4b10      	ldr	r3, [pc, #64]	; (40169c <system_init+0x114>)
  40165c:	4798      	blx	r3

	EDBG_COM_init();
  40165e:	4b10      	ldr	r3, [pc, #64]	; (4016a0 <system_init+0x118>)
  401660:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  401662:	4b10      	ldr	r3, [pc, #64]	; (4016a4 <system_init+0x11c>)
  401664:	4798      	blx	r3
  401666:	bd08      	pop	{r3, pc}
  401668:	00402225 	.word	0x00402225
  40166c:	400e0600 	.word	0x400e0600
  401670:	400e1850 	.word	0x400e1850
  401674:	400e0e00 	.word	0x400e0e00
  401678:	004011c1 	.word	0x004011c1
  40167c:	00401119 	.word	0x00401119
  401680:	00401295 	.word	0x00401295
  401684:	004012ad 	.word	0x004012ad
  401688:	004012c5 	.word	0x004012c5
  40168c:	0040135d 	.word	0x0040135d
  401690:	004013e5 	.word	0x004013e5
  401694:	00401439 	.word	0x00401439
  401698:	00401499 	.word	0x00401499
  40169c:	004014dd 	.word	0x004014dd
  4016a0:	00401555 	.word	0x00401555
  4016a4:	0040196d 	.word	0x0040196d

004016a8 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  4016a8:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  4016aa:	6983      	ldr	r3, [r0, #24]
  4016ac:	b103      	cbz	r3, 4016b0 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  4016ae:	4798      	blx	r3
  4016b0:	bd08      	pop	{r3, pc}

004016b2 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  4016b2:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  4016b4:	69c3      	ldr	r3, [r0, #28]
  4016b6:	b103      	cbz	r3, 4016ba <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  4016b8:	4798      	blx	r3
  4016ba:	bd08      	pop	{r3, pc}

004016bc <adc_async_channel_conversion_done>:
{
  4016bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4016c0:	4605      	mov	r5, r0
  4016c2:	4688      	mov	r8, r1
  4016c4:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  4016c6:	6a03      	ldr	r3, [r0, #32]
  4016c8:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  4016ca:	6a87      	ldr	r7, [r0, #40]	; 0x28
  4016cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4016d0:	00de      	lsls	r6, r3, #3
  4016d2:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  4016d4:	f104 0a04 	add.w	sl, r4, #4
  4016d8:	b2d1      	uxtb	r1, r2
  4016da:	4650      	mov	r0, sl
  4016dc:	4b0c      	ldr	r3, [pc, #48]	; (401710 <adc_async_channel_conversion_done+0x54>)
  4016de:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  4016e0:	4628      	mov	r0, r5
  4016e2:	4b0c      	ldr	r3, [pc, #48]	; (401714 <adc_async_channel_conversion_done+0x58>)
  4016e4:	4798      	blx	r3
  4016e6:	2801      	cmp	r0, #1
  4016e8:	d907      	bls.n	4016fa <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  4016ea:	ea4f 2119 	mov.w	r1, r9, lsr #8
  4016ee:	4650      	mov	r0, sl
  4016f0:	4b07      	ldr	r3, [pc, #28]	; (401710 <adc_async_channel_conversion_done+0x54>)
  4016f2:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  4016f4:	8aa3      	ldrh	r3, [r4, #20]
  4016f6:	3301      	adds	r3, #1
  4016f8:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  4016fa:	8aa3      	ldrh	r3, [r4, #20]
  4016fc:	3301      	adds	r3, #1
  4016fe:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  401700:	59bb      	ldr	r3, [r7, r6]
  401702:	b113      	cbz	r3, 40170a <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  401704:	4641      	mov	r1, r8
  401706:	4628      	mov	r0, r5
  401708:	4798      	blx	r3
  40170a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40170e:	bf00      	nop
  401710:	00401ef5 	.word	0x00401ef5
  401714:	00402205 	.word	0x00402205

00401718 <adc_async_init>:
{
  401718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40171c:	4616      	mov	r6, r2
  40171e:	461c      	mov	r4, r3
  401720:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  401724:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  401726:	4607      	mov	r7, r0
  401728:	4689      	mov	r9, r1
  40172a:	2800      	cmp	r0, #0
  40172c:	bf18      	it	ne
  40172e:	2900      	cmpne	r1, #0
  401730:	d00b      	beq.n	40174a <adc_async_init+0x32>
  401732:	1c13      	adds	r3, r2, #0
  401734:	bf18      	it	ne
  401736:	2301      	movne	r3, #1
  401738:	f1b8 0f00 	cmp.w	r8, #0
  40173c:	d017      	beq.n	40176e <adc_async_init+0x56>
  40173e:	b1b3      	cbz	r3, 40176e <adc_async_init+0x56>
  401740:	b10d      	cbz	r5, 401746 <adc_async_init+0x2e>
  401742:	2001      	movs	r0, #1
  401744:	e002      	b.n	40174c <adc_async_init+0x34>
  401746:	2000      	movs	r0, #0
  401748:	e000      	b.n	40174c <adc_async_init+0x34>
  40174a:	2000      	movs	r0, #0
  40174c:	f8df b068 	ldr.w	fp, [pc, #104]	; 4017b8 <adc_async_init+0xa0>
  401750:	223f      	movs	r2, #63	; 0x3f
  401752:	4659      	mov	r1, fp
  401754:	f8df a064 	ldr.w	sl, [pc, #100]	; 4017bc <adc_async_init+0xa4>
  401758:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  40175a:	1c60      	adds	r0, r4, #1
  40175c:	2240      	movs	r2, #64	; 0x40
  40175e:	4659      	mov	r1, fp
  401760:	4580      	cmp	r8, r0
  401762:	bfcc      	ite	gt
  401764:	2000      	movgt	r0, #0
  401766:	2001      	movle	r0, #1
  401768:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  40176a:	2300      	movs	r3, #0
  40176c:	e005      	b.n	40177a <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  40176e:	2000      	movs	r0, #0
  401770:	e7ec      	b.n	40174c <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  401772:	22ff      	movs	r2, #255	; 0xff
  401774:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  401776:	3301      	adds	r3, #1
  401778:	b2db      	uxtb	r3, r3
  40177a:	42a3      	cmp	r3, r4
  40177c:	d9f9      	bls.n	401772 <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  40177e:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  401780:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  401784:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  401788:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  40178a:	4649      	mov	r1, r9
  40178c:	4638      	mov	r0, r7
  40178e:	4b06      	ldr	r3, [pc, #24]	; (4017a8 <adc_async_init+0x90>)
  401790:	4798      	blx	r3
	if (init_status) {
  401792:	4603      	mov	r3, r0
  401794:	b928      	cbnz	r0, 4017a2 <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  401796:	4a05      	ldr	r2, [pc, #20]	; (4017ac <adc_async_init+0x94>)
  401798:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  40179a:	4a05      	ldr	r2, [pc, #20]	; (4017b0 <adc_async_init+0x98>)
  40179c:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  40179e:	4a05      	ldr	r2, [pc, #20]	; (4017b4 <adc_async_init+0x9c>)
  4017a0:	607a      	str	r2, [r7, #4]
}
  4017a2:	4618      	mov	r0, r3
  4017a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4017a8:	00402145 	.word	0x00402145
  4017ac:	004016bd 	.word	0x004016bd
  4017b0:	004016a9 	.word	0x004016a9
  4017b4:	004016b3 	.word	0x004016b3
  4017b8:	00407a84 	.word	0x00407a84
  4017bc:	00401e51 	.word	0x00401e51

004017c0 <adc_async_register_channel_buffer>:
{
  4017c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4017c4:	460e      	mov	r6, r1
  4017c6:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  4017c8:	4605      	mov	r5, r0
  4017ca:	4690      	mov	r8, r2
  4017cc:	2800      	cmp	r0, #0
  4017ce:	bf18      	it	ne
  4017d0:	2a00      	cmpne	r2, #0
  4017d2:	d002      	beq.n	4017da <adc_async_register_channel_buffer+0x1a>
  4017d4:	b9c3      	cbnz	r3, 401808 <adc_async_register_channel_buffer+0x48>
  4017d6:	2000      	movs	r0, #0
  4017d8:	e000      	b.n	4017dc <adc_async_register_channel_buffer+0x1c>
  4017da:	2000      	movs	r0, #0
  4017dc:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401874 <adc_async_register_channel_buffer+0xb4>
  4017e0:	2266      	movs	r2, #102	; 0x66
  4017e2:	4649      	mov	r1, r9
  4017e4:	4c21      	ldr	r4, [pc, #132]	; (40186c <adc_async_register_channel_buffer+0xac>)
  4017e6:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  4017e8:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  4017ec:	2267      	movs	r2, #103	; 0x67
  4017ee:	4649      	mov	r1, r9
  4017f0:	42b0      	cmp	r0, r6
  4017f2:	bf34      	ite	cc
  4017f4:	2000      	movcc	r0, #0
  4017f6:	2001      	movcs	r0, #1
  4017f8:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  4017fa:	6a29      	ldr	r1, [r5, #32]
  4017fc:	5d8b      	ldrb	r3, [r1, r6]
  4017fe:	2bff      	cmp	r3, #255	; 0xff
  401800:	d12b      	bne.n	40185a <adc_async_register_channel_buffer+0x9a>
  401802:	2400      	movs	r4, #0
  401804:	4623      	mov	r3, r4
  401806:	e003      	b.n	401810 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  401808:	2001      	movs	r0, #1
  40180a:	e7e7      	b.n	4017dc <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  40180c:	3301      	adds	r3, #1
  40180e:	b2db      	uxtb	r3, r3
  401810:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  401814:	4293      	cmp	r3, r2
  401816:	d805      	bhi.n	401824 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  401818:	5cca      	ldrb	r2, [r1, r3]
  40181a:	2aff      	cmp	r2, #255	; 0xff
  40181c:	d0f6      	beq.n	40180c <adc_async_register_channel_buffer+0x4c>
			index++;
  40181e:	3401      	adds	r4, #1
  401820:	b2e4      	uxtb	r4, r4
  401822:	e7f3      	b.n	40180c <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  401824:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  401828:	429c      	cmp	r4, r3
  40182a:	d819      	bhi.n	401860 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  40182c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  40182e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  401832:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  401836:	4448      	add	r0, r9
  401838:	463a      	mov	r2, r7
  40183a:	4641      	mov	r1, r8
  40183c:	3004      	adds	r0, #4
  40183e:	4b0c      	ldr	r3, [pc, #48]	; (401870 <adc_async_register_channel_buffer+0xb0>)
  401840:	4798      	blx	r3
  401842:	4602      	mov	r2, r0
  401844:	b978      	cbnz	r0, 401866 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  401846:	6a2b      	ldr	r3, [r5, #32]
  401848:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  40184a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40184c:	4499      	add	r9, r3
  40184e:	2300      	movs	r3, #0
  401850:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  401854:	4610      	mov	r0, r2
  401856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  40185a:	f06f 020c 	mvn.w	r2, #12
  40185e:	e7f9      	b.n	401854 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  401860:	f06f 021b 	mvn.w	r2, #27
  401864:	e7f6      	b.n	401854 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  401866:	f06f 020c 	mvn.w	r2, #12
  40186a:	e7f3      	b.n	401854 <adc_async_register_channel_buffer+0x94>
  40186c:	00401e51 	.word	0x00401e51
  401870:	00401eb1 	.word	0x00401eb1
  401874:	00407a84 	.word	0x00407a84

00401878 <adc_async_enable_channel>:
{
  401878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40187a:	460d      	mov	r5, r1
	ASSERT(descr);
  40187c:	4f0b      	ldr	r7, [pc, #44]	; (4018ac <adc_async_enable_channel+0x34>)
  40187e:	4604      	mov	r4, r0
  401880:	2283      	movs	r2, #131	; 0x83
  401882:	4639      	mov	r1, r7
  401884:	3000      	adds	r0, #0
  401886:	bf18      	it	ne
  401888:	2001      	movne	r0, #1
  40188a:	4e09      	ldr	r6, [pc, #36]	; (4018b0 <adc_async_enable_channel+0x38>)
  40188c:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  40188e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  401892:	2284      	movs	r2, #132	; 0x84
  401894:	4639      	mov	r1, r7
  401896:	42a8      	cmp	r0, r5
  401898:	bf34      	ite	cc
  40189a:	2000      	movcc	r0, #0
  40189c:	2001      	movcs	r0, #1
  40189e:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  4018a0:	4629      	mov	r1, r5
  4018a2:	4620      	mov	r0, r4
  4018a4:	4b03      	ldr	r3, [pc, #12]	; (4018b4 <adc_async_enable_channel+0x3c>)
  4018a6:	4798      	blx	r3
}
  4018a8:	2000      	movs	r0, #0
  4018aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4018ac:	00407a84 	.word	0x00407a84
  4018b0:	00401e51 	.word	0x00401e51
  4018b4:	004021f9 	.word	0x004021f9

004018b8 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4018b8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4018bc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4018be:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4018c0:	f3bf 8f5f 	dmb	sy
  4018c4:	4770      	bx	lr

004018c6 <atomic_leave_critical>:
  4018c6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4018ca:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4018cc:	f383 8810 	msr	PRIMASK, r3
  4018d0:	4770      	bx	lr
	...

004018d4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4018d4:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4018d6:	4b02      	ldr	r3, [pc, #8]	; (4018e0 <delay_init+0xc>)
  4018d8:	6018      	str	r0, [r3, #0]
  4018da:	4b02      	ldr	r3, [pc, #8]	; (4018e4 <delay_init+0x10>)
  4018dc:	4798      	blx	r3
  4018de:	bd08      	pop	{r3, pc}
  4018e0:	20400318 	.word	0x20400318
  4018e4:	004029d5 	.word	0x004029d5

004018e8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  4018e8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  4018ea:	4b04      	ldr	r3, [pc, #16]	; (4018fc <delay_us+0x14>)
  4018ec:	681c      	ldr	r4, [r3, #0]
  4018ee:	4b04      	ldr	r3, [pc, #16]	; (401900 <delay_us+0x18>)
  4018f0:	4798      	blx	r3
  4018f2:	4601      	mov	r1, r0
  4018f4:	4620      	mov	r0, r4
  4018f6:	4b03      	ldr	r3, [pc, #12]	; (401904 <delay_us+0x1c>)
  4018f8:	4798      	blx	r3
  4018fa:	bd10      	pop	{r4, pc}
  4018fc:	20400318 	.word	0x20400318
  401900:	00402209 	.word	0x00402209
  401904:	004029e1 	.word	0x004029e1

00401908 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  401908:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  40190a:	4b04      	ldr	r3, [pc, #16]	; (40191c <delay_ms+0x14>)
  40190c:	681c      	ldr	r4, [r3, #0]
  40190e:	4b04      	ldr	r3, [pc, #16]	; (401920 <delay_ms+0x18>)
  401910:	4798      	blx	r3
  401912:	4601      	mov	r1, r0
  401914:	4620      	mov	r0, r4
  401916:	4b03      	ldr	r3, [pc, #12]	; (401924 <delay_ms+0x1c>)
  401918:	4798      	blx	r3
  40191a:	bd10      	pop	{r4, pc}
  40191c:	20400318 	.word	0x20400318
  401920:	00402213 	.word	0x00402213
  401924:	004029e1 	.word	0x004029e1

00401928 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  401928:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  40192a:	2504      	movs	r5, #4
  40192c:	2400      	movs	r4, #0

	while (upper >= lower) {
  40192e:	e007      	b.n	401940 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  401930:	4a0d      	ldr	r2, [pc, #52]	; (401968 <process_ext_irq+0x40>)
  401932:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  401936:	b1b3      	cbz	r3, 401966 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  401938:	4798      	blx	r3
  40193a:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  40193c:	3a01      	subs	r2, #1
  40193e:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  401940:	42ac      	cmp	r4, r5
  401942:	d810      	bhi.n	401966 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  401944:	192b      	adds	r3, r5, r4
  401946:	105b      	asrs	r3, r3, #1
  401948:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  40194a:	2a03      	cmp	r2, #3
  40194c:	d80b      	bhi.n	401966 <process_ext_irq+0x3e>
  40194e:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  401950:	4905      	ldr	r1, [pc, #20]	; (401968 <process_ext_irq+0x40>)
  401952:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  401956:	6849      	ldr	r1, [r1, #4]
  401958:	4281      	cmp	r1, r0
  40195a:	d0e9      	beq.n	401930 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  40195c:	4281      	cmp	r1, r0
  40195e:	d2ed      	bcs.n	40193c <process_ext_irq+0x14>
			lower = middle + 1;
  401960:	3201      	adds	r2, #1
  401962:	b2d4      	uxtb	r4, r2
  401964:	e7ec      	b.n	401940 <process_ext_irq+0x18>
  401966:	bd38      	pop	{r3, r4, r5, pc}
  401968:	2040031c 	.word	0x2040031c

0040196c <ext_irq_init>:
{
  40196c:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40196e:	2300      	movs	r3, #0
  401970:	e00a      	b.n	401988 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  401972:	4a08      	ldr	r2, [pc, #32]	; (401994 <ext_irq_init+0x28>)
  401974:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  401978:	f04f 30ff 	mov.w	r0, #4294967295
  40197c:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  40197e:	2100      	movs	r1, #0
  401980:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401984:	3301      	adds	r3, #1
  401986:	b29b      	uxth	r3, r3
  401988:	2b03      	cmp	r3, #3
  40198a:	d9f2      	bls.n	401972 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  40198c:	4802      	ldr	r0, [pc, #8]	; (401998 <ext_irq_init+0x2c>)
  40198e:	4b03      	ldr	r3, [pc, #12]	; (40199c <ext_irq_init+0x30>)
  401990:	4798      	blx	r3
}
  401992:	bd08      	pop	{r3, pc}
  401994:	2040031c 	.word	0x2040031c
  401998:	00401929 	.word	0x00401929
  40199c:	00402581 	.word	0x00402581

004019a0 <ext_irq_register>:
{
  4019a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4019a2:	b083      	sub	sp, #12
  4019a4:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  4019a6:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  4019a8:	2b03      	cmp	r3, #3
  4019aa:	d80e      	bhi.n	4019ca <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  4019ac:	4618      	mov	r0, r3
  4019ae:	4a2e      	ldr	r2, [pc, #184]	; (401a68 <ext_irq_register+0xc8>)
  4019b0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4019b4:	6852      	ldr	r2, [r2, #4]
  4019b6:	42aa      	cmp	r2, r5
  4019b8:	d002      	beq.n	4019c0 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  4019ba:	3301      	adds	r3, #1
  4019bc:	b2db      	uxtb	r3, r3
  4019be:	e7f3      	b.n	4019a8 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  4019c0:	4b29      	ldr	r3, [pc, #164]	; (401a68 <ext_irq_register+0xc8>)
  4019c2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  4019c6:	2701      	movs	r7, #1
			break;
  4019c8:	e000      	b.n	4019cc <ext_irq_register+0x2c>
	bool    found = false;
  4019ca:	2700      	movs	r7, #0
	if (NULL == cb) {
  4019cc:	b159      	cbz	r1, 4019e6 <ext_irq_register+0x46>
	if (!found) {
  4019ce:	2f00      	cmp	r7, #0
  4019d0:	d13d      	bne.n	401a4e <ext_irq_register+0xae>
  4019d2:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4019d4:	2e03      	cmp	r6, #3
  4019d6:	d813      	bhi.n	401a00 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  4019d8:	4b23      	ldr	r3, [pc, #140]	; (401a68 <ext_irq_register+0xc8>)
  4019da:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  4019de:	b143      	cbz	r3, 4019f2 <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4019e0:	3601      	adds	r6, #1
  4019e2:	b2f6      	uxtb	r6, r6
  4019e4:	e7f6      	b.n	4019d4 <ext_irq_register+0x34>
		if (!found) {
  4019e6:	2f00      	cmp	r7, #0
  4019e8:	d038      	beq.n	401a5c <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  4019ea:	4628      	mov	r0, r5
  4019ec:	4b1f      	ldr	r3, [pc, #124]	; (401a6c <ext_irq_register+0xcc>)
  4019ee:	4798      	blx	r3
  4019f0:	e032      	b.n	401a58 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  4019f2:	4b1d      	ldr	r3, [pc, #116]	; (401a68 <ext_irq_register+0xc8>)
  4019f4:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  4019f8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4019fc:	605d      	str	r5, [r3, #4]
				found           = true;
  4019fe:	2701      	movs	r7, #1
  401a00:	2300      	movs	r3, #0
  401a02:	e001      	b.n	401a08 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  401a04:	3301      	adds	r3, #1
  401a06:	b2db      	uxtb	r3, r3
  401a08:	2b03      	cmp	r3, #3
  401a0a:	bf98      	it	ls
  401a0c:	2e03      	cmpls	r6, #3
  401a0e:	d81e      	bhi.n	401a4e <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  401a10:	46b6      	mov	lr, r6
  401a12:	4a15      	ldr	r2, [pc, #84]	; (401a68 <ext_irq_register+0xc8>)
  401a14:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  401a18:	6848      	ldr	r0, [r1, #4]
  401a1a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  401a1e:	6852      	ldr	r2, [r2, #4]
  401a20:	4290      	cmp	r0, r2
  401a22:	d2ef      	bcs.n	401a04 <ext_irq_register+0x64>
  401a24:	f1b2 3fff 	cmp.w	r2, #4294967295
  401a28:	d0ec      	beq.n	401a04 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  401a2a:	4c0f      	ldr	r4, [pc, #60]	; (401a68 <ext_irq_register+0xc8>)
  401a2c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  401a30:	e892 0003 	ldmia.w	r2, {r0, r1}
  401a34:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  401a38:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  401a3c:	e894 0003 	ldmia.w	r4, {r0, r1}
  401a40:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  401a44:	e89d 0003 	ldmia.w	sp, {r0, r1}
  401a48:	e884 0003 	stmia.w	r4, {r0, r1}
  401a4c:	e7da      	b.n	401a04 <ext_irq_register+0x64>
	if (!found) {
  401a4e:	b147      	cbz	r7, 401a62 <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  401a50:	2101      	movs	r1, #1
  401a52:	4628      	mov	r0, r5
  401a54:	4b05      	ldr	r3, [pc, #20]	; (401a6c <ext_irq_register+0xcc>)
  401a56:	4798      	blx	r3
}
  401a58:	b003      	add	sp, #12
  401a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  401a5c:	f06f 000c 	mvn.w	r0, #12
  401a60:	e7fa      	b.n	401a58 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  401a62:	f06f 000c 	mvn.w	r0, #12
  401a66:	e7f7      	b.n	401a58 <ext_irq_register+0xb8>
  401a68:	2040031c 	.word	0x2040031c
  401a6c:	004025b1 	.word	0x004025b1

00401a70 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401a70:	b570      	push	{r4, r5, r6, lr}
  401a72:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  401a74:	4604      	mov	r4, r0
  401a76:	460d      	mov	r5, r1
  401a78:	2800      	cmp	r0, #0
  401a7a:	bf18      	it	ne
  401a7c:	2900      	cmpne	r1, #0
  401a7e:	bf14      	ite	ne
  401a80:	2001      	movne	r0, #1
  401a82:	2000      	moveq	r0, #0
  401a84:	2234      	movs	r2, #52	; 0x34
  401a86:	4904      	ldr	r1, [pc, #16]	; (401a98 <io_write+0x28>)
  401a88:	4b04      	ldr	r3, [pc, #16]	; (401a9c <io_write+0x2c>)
  401a8a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  401a8c:	6823      	ldr	r3, [r4, #0]
  401a8e:	4632      	mov	r2, r6
  401a90:	4629      	mov	r1, r5
  401a92:	4620      	mov	r0, r4
  401a94:	4798      	blx	r3
}
  401a96:	bd70      	pop	{r4, r5, r6, pc}
  401a98:	00407aa0 	.word	0x00407aa0
  401a9c:	00401e51 	.word	0x00401e51

00401aa0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401aa0:	b570      	push	{r4, r5, r6, lr}
  401aa2:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  401aa4:	4604      	mov	r4, r0
  401aa6:	460d      	mov	r5, r1
  401aa8:	2800      	cmp	r0, #0
  401aaa:	bf18      	it	ne
  401aac:	2900      	cmpne	r1, #0
  401aae:	bf14      	ite	ne
  401ab0:	2001      	movne	r0, #1
  401ab2:	2000      	moveq	r0, #0
  401ab4:	223d      	movs	r2, #61	; 0x3d
  401ab6:	4904      	ldr	r1, [pc, #16]	; (401ac8 <io_read+0x28>)
  401ab8:	4b04      	ldr	r3, [pc, #16]	; (401acc <io_read+0x2c>)
  401aba:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  401abc:	6863      	ldr	r3, [r4, #4]
  401abe:	4632      	mov	r2, r6
  401ac0:	4629      	mov	r1, r5
  401ac2:	4620      	mov	r0, r4
  401ac4:	4798      	blx	r3
}
  401ac6:	bd70      	pop	{r4, r5, r6, pc}
  401ac8:	00407aa0 	.word	0x00407aa0
  401acc:	00401e51 	.word	0x00401e51

00401ad0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  401ad0:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  401ad2:	6943      	ldr	r3, [r0, #20]
  401ad4:	b103      	cbz	r3, 401ad8 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  401ad6:	4798      	blx	r3
  401ad8:	bd08      	pop	{r3, pc}

00401ada <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  401ada:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  401adc:	6983      	ldr	r3, [r0, #24]
  401ade:	b103      	cbz	r3, 401ae2 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  401ae0:	4798      	blx	r3
  401ae2:	bd08      	pop	{r3, pc}

00401ae4 <pwm_init>:
{
  401ae4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401ae6:	4604      	mov	r4, r0
  401ae8:	460d      	mov	r5, r1
  401aea:	2800      	cmp	r0, #0
  401aec:	bf18      	it	ne
  401aee:	2900      	cmpne	r1, #0
  401af0:	bf14      	ite	ne
  401af2:	2001      	movne	r0, #1
  401af4:	2000      	moveq	r0, #0
  401af6:	2233      	movs	r2, #51	; 0x33
  401af8:	4906      	ldr	r1, [pc, #24]	; (401b14 <pwm_init+0x30>)
  401afa:	4b07      	ldr	r3, [pc, #28]	; (401b18 <pwm_init+0x34>)
  401afc:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  401afe:	4629      	mov	r1, r5
  401b00:	4620      	mov	r0, r4
  401b02:	4b06      	ldr	r3, [pc, #24]	; (401b1c <pwm_init+0x38>)
  401b04:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  401b06:	4b06      	ldr	r3, [pc, #24]	; (401b20 <pwm_init+0x3c>)
  401b08:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  401b0a:	4b06      	ldr	r3, [pc, #24]	; (401b24 <pwm_init+0x40>)
  401b0c:	6063      	str	r3, [r4, #4]
}
  401b0e:	2000      	movs	r0, #0
  401b10:	bd38      	pop	{r3, r4, r5, pc}
  401b12:	bf00      	nop
  401b14:	00407ab4 	.word	0x00407ab4
  401b18:	00401e51 	.word	0x00401e51
  401b1c:	00402751 	.word	0x00402751
  401b20:	00401ad1 	.word	0x00401ad1
  401b24:	00401adb 	.word	0x00401adb

00401b28 <pwm_enable>:
{
  401b28:	b510      	push	{r4, lr}
	ASSERT(descr);
  401b2a:	4604      	mov	r4, r0
  401b2c:	224a      	movs	r2, #74	; 0x4a
  401b2e:	4909      	ldr	r1, [pc, #36]	; (401b54 <pwm_enable+0x2c>)
  401b30:	3000      	adds	r0, #0
  401b32:	bf18      	it	ne
  401b34:	2001      	movne	r0, #1
  401b36:	4b08      	ldr	r3, [pc, #32]	; (401b58 <pwm_enable+0x30>)
  401b38:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  401b3a:	4620      	mov	r0, r4
  401b3c:	4b07      	ldr	r3, [pc, #28]	; (401b5c <pwm_enable+0x34>)
  401b3e:	4798      	blx	r3
  401b40:	b920      	cbnz	r0, 401b4c <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  401b42:	4620      	mov	r0, r4
  401b44:	4b06      	ldr	r3, [pc, #24]	; (401b60 <pwm_enable+0x38>)
  401b46:	4798      	blx	r3
	return ERR_NONE;
  401b48:	2000      	movs	r0, #0
  401b4a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401b4c:	f06f 0010 	mvn.w	r0, #16
}
  401b50:	bd10      	pop	{r4, pc}
  401b52:	bf00      	nop
  401b54:	00407ab4 	.word	0x00407ab4
  401b58:	00401e51 	.word	0x00401e51
  401b5c:	0040292d 	.word	0x0040292d
  401b60:	00402889 	.word	0x00402889

00401b64 <pwm_register_callback>:
{
  401b64:	b570      	push	{r4, r5, r6, lr}
	switch (type) {
  401b66:	460d      	mov	r5, r1
  401b68:	b121      	cbz	r1, 401b74 <pwm_register_callback+0x10>
  401b6a:	2901      	cmp	r1, #1
  401b6c:	d015      	beq.n	401b9a <pwm_register_callback+0x36>
		return ERR_INVALID_ARG;
  401b6e:	f06f 000c 	mvn.w	r0, #12
}
  401b72:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.period = cb;
  401b74:	6142      	str	r2, [r0, #20]
  401b76:	4616      	mov	r6, r2
  401b78:	4604      	mov	r4, r0
	ASSERT(descr);
  401b7a:	2272      	movs	r2, #114	; 0x72
  401b7c:	4908      	ldr	r1, [pc, #32]	; (401ba0 <pwm_register_callback+0x3c>)
  401b7e:	3000      	adds	r0, #0
  401b80:	bf18      	it	ne
  401b82:	2001      	movne	r0, #1
  401b84:	4b07      	ldr	r3, [pc, #28]	; (401ba4 <pwm_register_callback+0x40>)
  401b86:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
  401b88:	1c32      	adds	r2, r6, #0
  401b8a:	bf18      	it	ne
  401b8c:	2201      	movne	r2, #1
  401b8e:	4629      	mov	r1, r5
  401b90:	4620      	mov	r0, r4
  401b92:	4b05      	ldr	r3, [pc, #20]	; (401ba8 <pwm_register_callback+0x44>)
  401b94:	4798      	blx	r3
	return ERR_NONE;
  401b96:	2000      	movs	r0, #0
  401b98:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
  401b9a:	6182      	str	r2, [r0, #24]
		break;
  401b9c:	e7eb      	b.n	401b76 <pwm_register_callback+0x12>
  401b9e:	bf00      	nop
  401ba0:	00407ab4 	.word	0x00407ab4
  401ba4:	00401e51 	.word	0x00401e51
  401ba8:	0040295d 	.word	0x0040295d

00401bac <pwm_set_parameters>:
{
  401bac:	b570      	push	{r4, r5, r6, lr}
  401bae:	460d      	mov	r5, r1
  401bb0:	4616      	mov	r6, r2
	ASSERT(descr);
  401bb2:	4604      	mov	r4, r0
  401bb4:	227c      	movs	r2, #124	; 0x7c
  401bb6:	4906      	ldr	r1, [pc, #24]	; (401bd0 <pwm_set_parameters+0x24>)
  401bb8:	3000      	adds	r0, #0
  401bba:	bf18      	it	ne
  401bbc:	2001      	movne	r0, #1
  401bbe:	4b05      	ldr	r3, [pc, #20]	; (401bd4 <pwm_set_parameters+0x28>)
  401bc0:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  401bc2:	4632      	mov	r2, r6
  401bc4:	4629      	mov	r1, r5
  401bc6:	4620      	mov	r0, r4
  401bc8:	4b03      	ldr	r3, [pc, #12]	; (401bd8 <pwm_set_parameters+0x2c>)
  401bca:	4798      	blx	r3
}
  401bcc:	2000      	movs	r0, #0
  401bce:	bd70      	pop	{r4, r5, r6, pc}
  401bd0:	00407ab4 	.word	0x00407ab4
  401bd4:	00401e51 	.word	0x00401e51
  401bd8:	004028cd 	.word	0x004028cd

00401bdc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  401bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  401bde:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  401be0:	b117      	cbz	r7, 401be8 <timer_add_timer_task+0xc>
  401be2:	463c      	mov	r4, r7
  401be4:	2600      	movs	r6, #0
  401be6:	e00b      	b.n	401c00 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  401be8:	4b0e      	ldr	r3, [pc, #56]	; (401c24 <timer_add_timer_task+0x48>)
  401bea:	4798      	blx	r3
		return;
  401bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  401bee:	68a5      	ldr	r5, [r4, #8]
  401bf0:	442b      	add	r3, r5
  401bf2:	1a9b      	subs	r3, r3, r2
  401bf4:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  401bf6:	688d      	ldr	r5, [r1, #8]
  401bf8:	42ab      	cmp	r3, r5
  401bfa:	d209      	bcs.n	401c10 <timer_add_timer_task+0x34>
			break;
		prev = it;
  401bfc:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  401bfe:	6824      	ldr	r4, [r4, #0]
  401c00:	b134      	cbz	r4, 401c10 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  401c02:	6863      	ldr	r3, [r4, #4]
  401c04:	4293      	cmp	r3, r2
  401c06:	d8f2      	bhi.n	401bee <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  401c08:	68a5      	ldr	r5, [r4, #8]
  401c0a:	1a9b      	subs	r3, r3, r2
  401c0c:	442b      	add	r3, r5
  401c0e:	e7f2      	b.n	401bf6 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  401c10:	42bc      	cmp	r4, r7
  401c12:	d003      	beq.n	401c1c <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  401c14:	4630      	mov	r0, r6
  401c16:	4b04      	ldr	r3, [pc, #16]	; (401c28 <timer_add_timer_task+0x4c>)
  401c18:	4798      	blx	r3
  401c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  401c1c:	4b01      	ldr	r3, [pc, #4]	; (401c24 <timer_add_timer_task+0x48>)
  401c1e:	4798      	blx	r3
  401c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c22:	bf00      	nop
  401c24:	00401e6d 	.word	0x00401e6d
  401c28:	00401e99 	.word	0x00401e99

00401c2c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  401c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401c2e:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  401c30:	6906      	ldr	r6, [r0, #16]
  401c32:	3601      	adds	r6, #1
  401c34:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  401c36:	7e03      	ldrb	r3, [r0, #24]
  401c38:	f013 0f01 	tst.w	r3, #1
  401c3c:	d105      	bne.n	401c4a <timer_process_counted+0x1e>
  401c3e:	7e03      	ldrb	r3, [r0, #24]
  401c40:	f013 0f02 	tst.w	r3, #2
  401c44:	d101      	bne.n	401c4a <timer_process_counted+0x1e>
  401c46:	4605      	mov	r5, r0
  401c48:	e009      	b.n	401c5e <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  401c4a:	7e03      	ldrb	r3, [r0, #24]
  401c4c:	f043 0302 	orr.w	r3, r3, #2
  401c50:	7603      	strb	r3, [r0, #24]
		return;
  401c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c54:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  401c56:	68e3      	ldr	r3, [r4, #12]
  401c58:	4620      	mov	r0, r4
  401c5a:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  401c5c:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  401c5e:	b19c      	cbz	r4, 401c88 <timer_process_counted+0x5c>
  401c60:	6863      	ldr	r3, [r4, #4]
  401c62:	1af3      	subs	r3, r6, r3
  401c64:	68a2      	ldr	r2, [r4, #8]
  401c66:	4293      	cmp	r3, r2
  401c68:	d30e      	bcc.n	401c88 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  401c6a:	f105 0714 	add.w	r7, r5, #20
  401c6e:	4638      	mov	r0, r7
  401c70:	4b06      	ldr	r3, [pc, #24]	; (401c8c <timer_process_counted+0x60>)
  401c72:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  401c74:	7c23      	ldrb	r3, [r4, #16]
  401c76:	2b01      	cmp	r3, #1
  401c78:	d1ec      	bne.n	401c54 <timer_process_counted+0x28>
			tmp->time_label = time;
  401c7a:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  401c7c:	4632      	mov	r2, r6
  401c7e:	4621      	mov	r1, r4
  401c80:	4638      	mov	r0, r7
  401c82:	4b03      	ldr	r3, [pc, #12]	; (401c90 <timer_process_counted+0x64>)
  401c84:	4798      	blx	r3
  401c86:	e7e5      	b.n	401c54 <timer_process_counted+0x28>
  401c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c8a:	bf00      	nop
  401c8c:	00401ea1 	.word	0x00401ea1
  401c90:	00401bdd 	.word	0x00401bdd

00401c94 <timer_init>:
{
  401c94:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401c96:	4604      	mov	r4, r0
  401c98:	460d      	mov	r5, r1
  401c9a:	2800      	cmp	r0, #0
  401c9c:	bf18      	it	ne
  401c9e:	2900      	cmpne	r1, #0
  401ca0:	bf14      	ite	ne
  401ca2:	2001      	movne	r0, #1
  401ca4:	2000      	moveq	r0, #0
  401ca6:	223b      	movs	r2, #59	; 0x3b
  401ca8:	4905      	ldr	r1, [pc, #20]	; (401cc0 <timer_init+0x2c>)
  401caa:	4b06      	ldr	r3, [pc, #24]	; (401cc4 <timer_init+0x30>)
  401cac:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  401cae:	4629      	mov	r1, r5
  401cb0:	4620      	mov	r0, r4
  401cb2:	4b05      	ldr	r3, [pc, #20]	; (401cc8 <timer_init+0x34>)
  401cb4:	4798      	blx	r3
	descr->time                           = 0;
  401cb6:	2000      	movs	r0, #0
  401cb8:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  401cba:	4b04      	ldr	r3, [pc, #16]	; (401ccc <timer_init+0x38>)
  401cbc:	6023      	str	r3, [r4, #0]
}
  401cbe:	bd38      	pop	{r3, r4, r5, pc}
  401cc0:	00407acc 	.word	0x00407acc
  401cc4:	00401e51 	.word	0x00401e51
  401cc8:	00402a99 	.word	0x00402a99
  401ccc:	00401c2d 	.word	0x00401c2d

00401cd0 <timer_start>:
{
  401cd0:	b510      	push	{r4, lr}
	ASSERT(descr);
  401cd2:	4604      	mov	r4, r0
  401cd4:	2253      	movs	r2, #83	; 0x53
  401cd6:	4909      	ldr	r1, [pc, #36]	; (401cfc <timer_start+0x2c>)
  401cd8:	3000      	adds	r0, #0
  401cda:	bf18      	it	ne
  401cdc:	2001      	movne	r0, #1
  401cde:	4b08      	ldr	r3, [pc, #32]	; (401d00 <timer_start+0x30>)
  401ce0:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  401ce2:	4620      	mov	r0, r4
  401ce4:	4b07      	ldr	r3, [pc, #28]	; (401d04 <timer_start+0x34>)
  401ce6:	4798      	blx	r3
  401ce8:	b920      	cbnz	r0, 401cf4 <timer_start+0x24>
	_timer_start(&descr->device);
  401cea:	4620      	mov	r0, r4
  401cec:	4b06      	ldr	r3, [pc, #24]	; (401d08 <timer_start+0x38>)
  401cee:	4798      	blx	r3
	return ERR_NONE;
  401cf0:	2000      	movs	r0, #0
  401cf2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401cf4:	f06f 0010 	mvn.w	r0, #16
}
  401cf8:	bd10      	pop	{r4, pc}
  401cfa:	bf00      	nop
  401cfc:	00407acc 	.word	0x00407acc
  401d00:	00401e51 	.word	0x00401e51
  401d04:	00402b81 	.word	0x00402b81
  401d08:	00402b75 	.word	0x00402b75

00401d0c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d0e:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401d10:	4605      	mov	r5, r0
  401d12:	460f      	mov	r7, r1
  401d14:	2800      	cmp	r0, #0
  401d16:	bf18      	it	ne
  401d18:	2900      	cmpne	r1, #0
  401d1a:	d002      	beq.n	401d22 <usart_sync_write+0x16>
  401d1c:	bb0a      	cbnz	r2, 401d62 <usart_sync_write+0x56>
  401d1e:	2000      	movs	r0, #0
  401d20:	e000      	b.n	401d24 <usart_sync_write+0x18>
  401d22:	2000      	movs	r0, #0
  401d24:	22f1      	movs	r2, #241	; 0xf1
  401d26:	4910      	ldr	r1, [pc, #64]	; (401d68 <usart_sync_write+0x5c>)
  401d28:	4b10      	ldr	r3, [pc, #64]	; (401d6c <usart_sync_write+0x60>)
  401d2a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  401d2c:	f105 0408 	add.w	r4, r5, #8
  401d30:	4620      	mov	r0, r4
  401d32:	4b0f      	ldr	r3, [pc, #60]	; (401d70 <usart_sync_write+0x64>)
  401d34:	4798      	blx	r3
  401d36:	2800      	cmp	r0, #0
  401d38:	d0f8      	beq.n	401d2c <usart_sync_write+0x20>
  401d3a:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  401d3c:	5d79      	ldrb	r1, [r7, r5]
  401d3e:	4620      	mov	r0, r4
  401d40:	4b0c      	ldr	r3, [pc, #48]	; (401d74 <usart_sync_write+0x68>)
  401d42:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  401d44:	4620      	mov	r0, r4
  401d46:	4b0a      	ldr	r3, [pc, #40]	; (401d70 <usart_sync_write+0x64>)
  401d48:	4798      	blx	r3
  401d4a:	2800      	cmp	r0, #0
  401d4c:	d0fa      	beq.n	401d44 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  401d4e:	3501      	adds	r5, #1
  401d50:	42b5      	cmp	r5, r6
  401d52:	d3f3      	bcc.n	401d3c <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  401d54:	4620      	mov	r0, r4
  401d56:	4b08      	ldr	r3, [pc, #32]	; (401d78 <usart_sync_write+0x6c>)
  401d58:	4798      	blx	r3
  401d5a:	2800      	cmp	r0, #0
  401d5c:	d0fa      	beq.n	401d54 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  401d5e:	4628      	mov	r0, r5
  401d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  401d62:	2001      	movs	r0, #1
  401d64:	e7de      	b.n	401d24 <usart_sync_write+0x18>
  401d66:	bf00      	nop
  401d68:	00407ae4 	.word	0x00407ae4
  401d6c:	00401e51 	.word	0x00401e51
  401d70:	00402d5d 	.word	0x00402d5d
  401d74:	00402d15 	.word	0x00402d15
  401d78:	00402d85 	.word	0x00402d85

00401d7c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d80:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401d82:	4605      	mov	r5, r0
  401d84:	4688      	mov	r8, r1
  401d86:	2800      	cmp	r0, #0
  401d88:	bf18      	it	ne
  401d8a:	2900      	cmpne	r1, #0
  401d8c:	d002      	beq.n	401d94 <usart_sync_read+0x18>
  401d8e:	b9d2      	cbnz	r2, 401dc6 <usart_sync_read+0x4a>
  401d90:	2000      	movs	r0, #0
  401d92:	e000      	b.n	401d96 <usart_sync_read+0x1a>
  401d94:	2000      	movs	r0, #0
  401d96:	f44f 7286 	mov.w	r2, #268	; 0x10c
  401d9a:	490c      	ldr	r1, [pc, #48]	; (401dcc <usart_sync_read+0x50>)
  401d9c:	4b0c      	ldr	r3, [pc, #48]	; (401dd0 <usart_sync_read+0x54>)
  401d9e:	4798      	blx	r3
	uint32_t                      offset = 0;
  401da0:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  401da2:	f105 0408 	add.w	r4, r5, #8
  401da6:	4620      	mov	r0, r4
  401da8:	4b0a      	ldr	r3, [pc, #40]	; (401dd4 <usart_sync_read+0x58>)
  401daa:	4798      	blx	r3
  401dac:	2800      	cmp	r0, #0
  401dae:	d0f8      	beq.n	401da2 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  401db0:	4620      	mov	r0, r4
  401db2:	4b09      	ldr	r3, [pc, #36]	; (401dd8 <usart_sync_read+0x5c>)
  401db4:	4798      	blx	r3
  401db6:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  401dba:	3601      	adds	r6, #1
  401dbc:	42be      	cmp	r6, r7
  401dbe:	d3f0      	bcc.n	401da2 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  401dc0:	4630      	mov	r0, r6
  401dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  401dc6:	2001      	movs	r0, #1
  401dc8:	e7e5      	b.n	401d96 <usart_sync_read+0x1a>
  401dca:	bf00      	nop
  401dcc:	00407ae4 	.word	0x00407ae4
  401dd0:	00401e51 	.word	0x00401e51
  401dd4:	00402dad 	.word	0x00402dad
  401dd8:	00402d39 	.word	0x00402d39

00401ddc <usart_sync_init>:
{
  401ddc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401dde:	4604      	mov	r4, r0
  401de0:	460d      	mov	r5, r1
  401de2:	2800      	cmp	r0, #0
  401de4:	bf18      	it	ne
  401de6:	2900      	cmpne	r1, #0
  401de8:	bf14      	ite	ne
  401dea:	2001      	movne	r0, #1
  401dec:	2000      	moveq	r0, #0
  401dee:	2234      	movs	r2, #52	; 0x34
  401df0:	4907      	ldr	r1, [pc, #28]	; (401e10 <usart_sync_init+0x34>)
  401df2:	4b08      	ldr	r3, [pc, #32]	; (401e14 <usart_sync_init+0x38>)
  401df4:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  401df6:	4629      	mov	r1, r5
  401df8:	f104 0008 	add.w	r0, r4, #8
  401dfc:	4b06      	ldr	r3, [pc, #24]	; (401e18 <usart_sync_init+0x3c>)
  401dfe:	4798      	blx	r3
	if (init_status) {
  401e00:	4603      	mov	r3, r0
  401e02:	b918      	cbnz	r0, 401e0c <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  401e04:	4a05      	ldr	r2, [pc, #20]	; (401e1c <usart_sync_init+0x40>)
  401e06:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  401e08:	4a05      	ldr	r2, [pc, #20]	; (401e20 <usart_sync_init+0x44>)
  401e0a:	6022      	str	r2, [r4, #0]
}
  401e0c:	4618      	mov	r0, r3
  401e0e:	bd38      	pop	{r3, r4, r5, pc}
  401e10:	00407ae4 	.word	0x00407ae4
  401e14:	00401e51 	.word	0x00401e51
  401e18:	00402ca9 	.word	0x00402ca9
  401e1c:	00401d7d 	.word	0x00401d7d
  401e20:	00401d0d 	.word	0x00401d0d

00401e24 <usart_sync_enable>:
{
  401e24:	b510      	push	{r4, lr}
	ASSERT(descr);
  401e26:	4604      	mov	r4, r0
  401e28:	2253      	movs	r2, #83	; 0x53
  401e2a:	4906      	ldr	r1, [pc, #24]	; (401e44 <usart_sync_enable+0x20>)
  401e2c:	3000      	adds	r0, #0
  401e2e:	bf18      	it	ne
  401e30:	2001      	movne	r0, #1
  401e32:	4b05      	ldr	r3, [pc, #20]	; (401e48 <usart_sync_enable+0x24>)
  401e34:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  401e36:	f104 0008 	add.w	r0, r4, #8
  401e3a:	4b04      	ldr	r3, [pc, #16]	; (401e4c <usart_sync_enable+0x28>)
  401e3c:	4798      	blx	r3
}
  401e3e:	2000      	movs	r0, #0
  401e40:	bd10      	pop	{r4, pc}
  401e42:	bf00      	nop
  401e44:	00407ae4 	.word	0x00407ae4
  401e48:	00401e51 	.word	0x00401e51
  401e4c:	00402ce1 	.word	0x00402ce1

00401e50 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401e50:	b900      	cbnz	r0, 401e54 <assert+0x4>
		__asm("BKPT #0");
  401e52:	be00      	bkpt	0x0000
  401e54:	4770      	bx	lr

00401e56 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  401e56:	6803      	ldr	r3, [r0, #0]
  401e58:	b11b      	cbz	r3, 401e62 <is_list_element+0xc>
		if (it == element) {
  401e5a:	428b      	cmp	r3, r1
  401e5c:	d003      	beq.n	401e66 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  401e5e:	681b      	ldr	r3, [r3, #0]
  401e60:	e7fa      	b.n	401e58 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  401e62:	2000      	movs	r0, #0
  401e64:	4770      	bx	lr
			return true;
  401e66:	2001      	movs	r0, #1
}
  401e68:	4770      	bx	lr
	...

00401e6c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  401e6c:	b538      	push	{r3, r4, r5, lr}
  401e6e:	4604      	mov	r4, r0
  401e70:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  401e72:	4b06      	ldr	r3, [pc, #24]	; (401e8c <list_insert_as_head+0x20>)
  401e74:	4798      	blx	r3
  401e76:	f080 0001 	eor.w	r0, r0, #1
  401e7a:	2239      	movs	r2, #57	; 0x39
  401e7c:	4904      	ldr	r1, [pc, #16]	; (401e90 <list_insert_as_head+0x24>)
  401e7e:	b2c0      	uxtb	r0, r0
  401e80:	4b04      	ldr	r3, [pc, #16]	; (401e94 <list_insert_as_head+0x28>)
  401e82:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  401e84:	6823      	ldr	r3, [r4, #0]
  401e86:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  401e88:	6025      	str	r5, [r4, #0]
  401e8a:	bd38      	pop	{r3, r4, r5, pc}
  401e8c:	00401e57 	.word	0x00401e57
  401e90:	00407b00 	.word	0x00407b00
  401e94:	00401e51 	.word	0x00401e51

00401e98 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  401e98:	6803      	ldr	r3, [r0, #0]
  401e9a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  401e9c:	6001      	str	r1, [r0, #0]
  401e9e:	4770      	bx	lr

00401ea0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  401ea0:	6803      	ldr	r3, [r0, #0]
  401ea2:	b11b      	cbz	r3, 401eac <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  401ea4:	681a      	ldr	r2, [r3, #0]
  401ea6:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  401ea8:	4618      	mov	r0, r3
  401eaa:	4770      	bx	lr
	}

	return NULL;
  401eac:	2000      	movs	r0, #0
}
  401eae:	4770      	bx	lr

00401eb0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  401eb0:	b570      	push	{r4, r5, r6, lr}
  401eb2:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  401eb4:	4604      	mov	r4, r0
  401eb6:	460e      	mov	r6, r1
  401eb8:	2800      	cmp	r0, #0
  401eba:	bf18      	it	ne
  401ebc:	2900      	cmpne	r1, #0
  401ebe:	d002      	beq.n	401ec6 <ringbuffer_init+0x16>
  401ec0:	b97a      	cbnz	r2, 401ee2 <ringbuffer_init+0x32>
  401ec2:	2000      	movs	r0, #0
  401ec4:	e000      	b.n	401ec8 <ringbuffer_init+0x18>
  401ec6:	2000      	movs	r0, #0
  401ec8:	2228      	movs	r2, #40	; 0x28
  401eca:	4908      	ldr	r1, [pc, #32]	; (401eec <ringbuffer_init+0x3c>)
  401ecc:	4b08      	ldr	r3, [pc, #32]	; (401ef0 <ringbuffer_init+0x40>)
  401ece:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  401ed0:	1e6b      	subs	r3, r5, #1
  401ed2:	421d      	tst	r5, r3
  401ed4:	d107      	bne.n	401ee6 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  401ed6:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  401ed8:	2000      	movs	r0, #0
  401eda:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  401edc:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  401ede:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  401ee0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  401ee2:	2001      	movs	r0, #1
  401ee4:	e7f0      	b.n	401ec8 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  401ee6:	f06f 000c 	mvn.w	r0, #12
}
  401eea:	bd70      	pop	{r4, r5, r6, pc}
  401eec:	00407b20 	.word	0x00407b20
  401ef0:	00401e51 	.word	0x00401e51

00401ef4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  401ef4:	b538      	push	{r3, r4, r5, lr}
  401ef6:	460d      	mov	r5, r1
	ASSERT(rb);
  401ef8:	4604      	mov	r4, r0
  401efa:	2251      	movs	r2, #81	; 0x51
  401efc:	490b      	ldr	r1, [pc, #44]	; (401f2c <ringbuffer_put+0x38>)
  401efe:	3000      	adds	r0, #0
  401f00:	bf18      	it	ne
  401f02:	2001      	movne	r0, #1
  401f04:	4b0a      	ldr	r3, [pc, #40]	; (401f30 <ringbuffer_put+0x3c>)
  401f06:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  401f08:	6822      	ldr	r2, [r4, #0]
  401f0a:	68e3      	ldr	r3, [r4, #12]
  401f0c:	6861      	ldr	r1, [r4, #4]
  401f0e:	400b      	ands	r3, r1
  401f10:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  401f12:	68e3      	ldr	r3, [r4, #12]
  401f14:	68a2      	ldr	r2, [r4, #8]
  401f16:	1a9a      	subs	r2, r3, r2
  401f18:	6861      	ldr	r1, [r4, #4]
  401f1a:	428a      	cmp	r2, r1
  401f1c:	d901      	bls.n	401f22 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  401f1e:	1a59      	subs	r1, r3, r1
  401f20:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  401f22:	3301      	adds	r3, #1
  401f24:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  401f26:	2000      	movs	r0, #0
  401f28:	bd38      	pop	{r3, r4, r5, pc}
  401f2a:	bf00      	nop
  401f2c:	00407b20 	.word	0x00407b20
  401f30:	00401e51 	.word	0x00401e51

00401f34 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  401f34:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  401f36:	4a06      	ldr	r2, [pc, #24]	; (401f50 <_sbrk+0x1c>)
  401f38:	6812      	ldr	r2, [r2, #0]
  401f3a:	b122      	cbz	r2, 401f46 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401f3c:	4a04      	ldr	r2, [pc, #16]	; (401f50 <_sbrk+0x1c>)
  401f3e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  401f40:	4403      	add	r3, r0
  401f42:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  401f44:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401f46:	4903      	ldr	r1, [pc, #12]	; (401f54 <_sbrk+0x20>)
  401f48:	4a01      	ldr	r2, [pc, #4]	; (401f50 <_sbrk+0x1c>)
  401f4a:	6011      	str	r1, [r2, #0]
  401f4c:	e7f6      	b.n	401f3c <_sbrk+0x8>
  401f4e:	bf00      	nop
  401f50:	2040033c 	.word	0x2040033c
  401f54:	20400de8 	.word	0x20400de8

00401f58 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  401f58:	f04f 30ff 	mov.w	r0, #4294967295
  401f5c:	4770      	bx	lr

00401f5e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  401f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401f62:	604b      	str	r3, [r1, #4]

	return 0;
}
  401f64:	2000      	movs	r0, #0
  401f66:	4770      	bx	lr

00401f68 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  401f68:	2001      	movs	r0, #1
  401f6a:	4770      	bx	lr

00401f6c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  401f6c:	2000      	movs	r0, #0
  401f6e:	4770      	bx	lr

00401f70 <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  401f70:	6943      	ldr	r3, [r0, #20]
  401f72:	4a07      	ldr	r2, [pc, #28]	; (401f90 <_afec_get_irq_num+0x20>)
  401f74:	4293      	cmp	r3, r2
  401f76:	d005      	beq.n	401f84 <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  401f78:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  401f7c:	4293      	cmp	r3, r2
  401f7e:	d103      	bne.n	401f88 <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  401f80:	2028      	movs	r0, #40	; 0x28
  401f82:	4770      	bx	lr
		return AFEC0_IRQn;
  401f84:	201d      	movs	r0, #29
  401f86:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  401f88:	f04f 30ff 	mov.w	r0, #4294967295
}
  401f8c:	4770      	bx	lr
  401f8e:	bf00      	nop
  401f90:	4003c000 	.word	0x4003c000

00401f94 <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  401f94:	4b06      	ldr	r3, [pc, #24]	; (401fb0 <_afec_init_irq_param+0x1c>)
  401f96:	4298      	cmp	r0, r3
  401f98:	d003      	beq.n	401fa2 <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  401f9a:	4b06      	ldr	r3, [pc, #24]	; (401fb4 <_afec_init_irq_param+0x20>)
  401f9c:	4298      	cmp	r0, r3
  401f9e:	d003      	beq.n	401fa8 <_afec_init_irq_param+0x14>
  401fa0:	4770      	bx	lr
		_afec0_dev = dev;
  401fa2:	4b05      	ldr	r3, [pc, #20]	; (401fb8 <_afec_init_irq_param+0x24>)
  401fa4:	6019      	str	r1, [r3, #0]
  401fa6:	e7f8      	b.n	401f9a <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  401fa8:	4b03      	ldr	r3, [pc, #12]	; (401fb8 <_afec_init_irq_param+0x24>)
  401faa:	6059      	str	r1, [r3, #4]
	}
}
  401fac:	e7f8      	b.n	401fa0 <_afec_init_irq_param+0xc>
  401fae:	bf00      	nop
  401fb0:	4003c000 	.word	0x4003c000
  401fb4:	40064000 	.word	0x40064000
  401fb8:	20400340 	.word	0x20400340

00401fbc <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  401fbc:	2364      	movs	r3, #100	; 0x64
  401fbe:	4a1d      	ldr	r2, [pc, #116]	; (402034 <_afec_init+0x78>)
  401fc0:	fb03 2301 	mla	r3, r3, r1, r2
  401fc4:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  401fc6:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  401fc8:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  401fca:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  401fcc:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  401fce:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  401fd0:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  401fd2:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  401fd4:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  401fd6:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  401fd8:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  401fda:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  401fdc:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  401fde:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  401fe0:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  401fe2:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  401fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  401fe8:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  401fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  401fee:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  401ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  401ff4:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  401ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  401ffa:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401ffe:	2200      	movs	r2, #0
  402000:	2a0b      	cmp	r2, #11
  402002:	d814      	bhi.n	40202e <_afec_init+0x72>
{
  402004:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  402006:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  402008:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  40200c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402010:	4413      	add	r3, r2
  402012:	330c      	adds	r3, #12
  402014:	4c07      	ldr	r4, [pc, #28]	; (402034 <_afec_init+0x78>)
  402016:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40201a:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  40201c:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  40201e:	3201      	adds	r2, #1
  402020:	b2d2      	uxtb	r2, r2
  402022:	2a0b      	cmp	r2, #11
  402024:	d9ef      	bls.n	402006 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  402026:	2000      	movs	r0, #0
  402028:	f85d 4b04 	ldr.w	r4, [sp], #4
  40202c:	4770      	bx	lr
  40202e:	2000      	movs	r0, #0
  402030:	4770      	bx	lr
  402032:	bf00      	nop
  402034:	00407b44 	.word	0x00407b44

00402038 <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  402038:	b530      	push	{r4, r5, lr}
  40203a:	b083      	sub	sp, #12
  40203c:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  40203e:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  402040:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  402042:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  402044:	400b      	ands	r3, r1
  402046:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  402048:	9b01      	ldr	r3, [sp, #4]
  40204a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  40204e:	d10e      	bne.n	40206e <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  402050:	9b01      	ldr	r3, [sp, #4]
  402052:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  402056:	d10e      	bne.n	402076 <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  402058:	9b01      	ldr	r3, [sp, #4]
  40205a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40205e:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  402060:	9c01      	ldr	r4, [sp, #4]
  402062:	fab4 f484 	clz	r4, r4
  402066:	f1c4 0420 	rsb	r4, r4, #32
  40206a:	b2e4      	uxtb	r4, r4
	while (cnt) {
  40206c:	e01f      	b.n	4020ae <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  40206e:	6803      	ldr	r3, [r0, #0]
  402070:	2100      	movs	r1, #0
  402072:	4798      	blx	r3
  402074:	e7ec      	b.n	402050 <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  402076:	686b      	ldr	r3, [r5, #4]
  402078:	2100      	movs	r1, #0
  40207a:	4628      	mov	r0, r5
  40207c:	4798      	blx	r3
  40207e:	e7eb      	b.n	402058 <_afec_interrupt_handler+0x20>
		cnt--;
  402080:	3c01      	subs	r4, #1
  402082:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  402084:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  402086:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  402088:	68ab      	ldr	r3, [r5, #8]
  40208a:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  40208c:	6e92      	ldr	r2, [r2, #104]	; 0x68
  40208e:	b292      	uxth	r2, r2
  402090:	4621      	mov	r1, r4
  402092:	4628      	mov	r0, r5
  402094:	4798      	blx	r3
		status &= ~(1 << cnt);
  402096:	2301      	movs	r3, #1
  402098:	40a3      	lsls	r3, r4
  40209a:	9c01      	ldr	r4, [sp, #4]
  40209c:	ea24 0403 	bic.w	r4, r4, r3
  4020a0:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  4020a2:	9c01      	ldr	r4, [sp, #4]
  4020a4:	fab4 f484 	clz	r4, r4
  4020a8:	f1c4 0420 	rsb	r4, r4, #32
  4020ac:	b2e4      	uxtb	r4, r4
	while (cnt) {
  4020ae:	2c00      	cmp	r4, #0
  4020b0:	d1e6      	bne.n	402080 <_afec_interrupt_handler+0x48>
	}
}
  4020b2:	b003      	add	sp, #12
  4020b4:	bd30      	pop	{r4, r5, pc}
	...

004020b8 <_afec_get_hardware_index>:
{
  4020b8:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  4020ba:	4b09      	ldr	r3, [pc, #36]	; (4020e0 <_afec_get_hardware_index+0x28>)
  4020bc:	4298      	cmp	r0, r3
  4020be:	d00a      	beq.n	4020d6 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  4020c0:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4020c4:	4298      	cmp	r0, r3
  4020c6:	d008      	beq.n	4020da <_afec_get_hardware_index+0x22>
	ASSERT(false);
  4020c8:	22a7      	movs	r2, #167	; 0xa7
  4020ca:	4906      	ldr	r1, [pc, #24]	; (4020e4 <_afec_get_hardware_index+0x2c>)
  4020cc:	2000      	movs	r0, #0
  4020ce:	4b06      	ldr	r3, [pc, #24]	; (4020e8 <_afec_get_hardware_index+0x30>)
  4020d0:	4798      	blx	r3
	return 0;
  4020d2:	2000      	movs	r0, #0
  4020d4:	bd08      	pop	{r3, pc}
		return 0;
  4020d6:	2000      	movs	r0, #0
  4020d8:	bd08      	pop	{r3, pc}
		return 1;
  4020da:	2001      	movs	r0, #1
}
  4020dc:	bd08      	pop	{r3, pc}
  4020de:	bf00      	nop
  4020e0:	4003c000 	.word	0x4003c000
  4020e4:	00407c0c 	.word	0x00407c0c
  4020e8:	00401e51 	.word	0x00401e51

004020ec <_afec_get_regs>:
{
  4020ec:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  4020ee:	4b09      	ldr	r3, [pc, #36]	; (402114 <_afec_get_regs+0x28>)
  4020f0:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  4020f2:	2300      	movs	r3, #0
  4020f4:	2b01      	cmp	r3, #1
  4020f6:	d809      	bhi.n	40210c <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  4020f8:	2264      	movs	r2, #100	; 0x64
  4020fa:	fb02 f203 	mul.w	r2, r2, r3
  4020fe:	4906      	ldr	r1, [pc, #24]	; (402118 <_afec_get_regs+0x2c>)
  402100:	5c8a      	ldrb	r2, [r1, r2]
  402102:	4290      	cmp	r0, r2
  402104:	d003      	beq.n	40210e <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  402106:	3301      	adds	r3, #1
  402108:	b2db      	uxtb	r3, r3
  40210a:	e7f3      	b.n	4020f4 <_afec_get_regs+0x8>
	return 0;
  40210c:	2300      	movs	r3, #0
}
  40210e:	4618      	mov	r0, r3
  402110:	bd08      	pop	{r3, pc}
  402112:	bf00      	nop
  402114:	004020b9 	.word	0x004020b9
  402118:	00407b44 	.word	0x00407b44

0040211c <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  40211c:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  40211e:	4b02      	ldr	r3, [pc, #8]	; (402128 <AFEC0_Handler+0xc>)
  402120:	6818      	ldr	r0, [r3, #0]
  402122:	4b02      	ldr	r3, [pc, #8]	; (40212c <AFEC0_Handler+0x10>)
  402124:	4798      	blx	r3
  402126:	bd08      	pop	{r3, pc}
  402128:	20400340 	.word	0x20400340
  40212c:	00402039 	.word	0x00402039

00402130 <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  402130:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  402132:	4b02      	ldr	r3, [pc, #8]	; (40213c <AFEC1_Handler+0xc>)
  402134:	6858      	ldr	r0, [r3, #4]
  402136:	4b02      	ldr	r3, [pc, #8]	; (402140 <AFEC1_Handler+0x10>)
  402138:	4798      	blx	r3
  40213a:	bd08      	pop	{r3, pc}
  40213c:	20400340 	.word	0x20400340
  402140:	00402039 	.word	0x00402039

00402144 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  402144:	b570      	push	{r4, r5, r6, lr}
  402146:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  402148:	4605      	mov	r5, r0
  40214a:	f44f 72a1 	mov.w	r2, #322	; 0x142
  40214e:	4923      	ldr	r1, [pc, #140]	; (4021dc <_adc_async_init+0x98>)
  402150:	3000      	adds	r0, #0
  402152:	bf18      	it	ne
  402154:	2001      	movne	r0, #1
  402156:	4b22      	ldr	r3, [pc, #136]	; (4021e0 <_adc_async_init+0x9c>)
  402158:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  40215a:	4620      	mov	r0, r4
  40215c:	4b21      	ldr	r3, [pc, #132]	; (4021e4 <_adc_async_init+0xa0>)
  40215e:	4798      	blx	r3
  402160:	4601      	mov	r1, r0
  402162:	4620      	mov	r0, r4
  402164:	4b20      	ldr	r3, [pc, #128]	; (4021e8 <_adc_async_init+0xa4>)
  402166:	4798      	blx	r3
	if (init_status) {
  402168:	4606      	mov	r6, r0
  40216a:	b108      	cbz	r0, 402170 <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  40216c:	4630      	mov	r0, r6
  40216e:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  402170:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  402172:	4629      	mov	r1, r5
  402174:	4620      	mov	r0, r4
  402176:	4b1d      	ldr	r3, [pc, #116]	; (4021ec <_adc_async_init+0xa8>)
  402178:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  40217a:	4628      	mov	r0, r5
  40217c:	4b1c      	ldr	r3, [pc, #112]	; (4021f0 <_adc_async_init+0xac>)
  40217e:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  402180:	2800      	cmp	r0, #0
  402182:	db0d      	blt.n	4021a0 <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402184:	0943      	lsrs	r3, r0, #5
  402186:	f000 001f 	and.w	r0, r0, #31
  40218a:	2201      	movs	r2, #1
  40218c:	fa02 f000 	lsl.w	r0, r2, r0
  402190:	3320      	adds	r3, #32
  402192:	4a18      	ldr	r2, [pc, #96]	; (4021f4 <_adc_async_init+0xb0>)
  402194:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402198:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40219c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  4021a0:	4628      	mov	r0, r5
  4021a2:	4b13      	ldr	r3, [pc, #76]	; (4021f0 <_adc_async_init+0xac>)
  4021a4:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  4021a6:	2800      	cmp	r0, #0
  4021a8:	db09      	blt.n	4021be <_adc_async_init+0x7a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4021aa:	0943      	lsrs	r3, r0, #5
  4021ac:	f000 001f 	and.w	r0, r0, #31
  4021b0:	2201      	movs	r2, #1
  4021b2:	fa02 f000 	lsl.w	r0, r2, r0
  4021b6:	3360      	adds	r3, #96	; 0x60
  4021b8:	4a0e      	ldr	r2, [pc, #56]	; (4021f4 <_adc_async_init+0xb0>)
  4021ba:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  4021be:	4628      	mov	r0, r5
  4021c0:	4b0b      	ldr	r3, [pc, #44]	; (4021f0 <_adc_async_init+0xac>)
  4021c2:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  4021c4:	2800      	cmp	r0, #0
  4021c6:	dbd1      	blt.n	40216c <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4021c8:	0942      	lsrs	r2, r0, #5
  4021ca:	f000 001f 	and.w	r0, r0, #31
  4021ce:	2301      	movs	r3, #1
  4021d0:	fa03 f000 	lsl.w	r0, r3, r0
  4021d4:	4b07      	ldr	r3, [pc, #28]	; (4021f4 <_adc_async_init+0xb0>)
  4021d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  4021da:	e7c7      	b.n	40216c <_adc_async_init+0x28>
  4021dc:	00407c0c 	.word	0x00407c0c
  4021e0:	00401e51 	.word	0x00401e51
  4021e4:	004020ed 	.word	0x004020ed
  4021e8:	00401fbd 	.word	0x00401fbd
  4021ec:	00401f95 	.word	0x00401f95
  4021f0:	00401f71 	.word	0x00401f71
  4021f4:	e000e100 	.word	0xe000e100

004021f8 <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  4021f8:	6942      	ldr	r2, [r0, #20]
  4021fa:	2301      	movs	r3, #1
  4021fc:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  402200:	6151      	str	r1, [r2, #20]
  402202:	4770      	bx	lr

00402204 <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  402204:	2002      	movs	r0, #2
  402206:	4770      	bx	lr

00402208 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  402208:	f44f 7396 	mov.w	r3, #300	; 0x12c
  40220c:	fb03 f000 	mul.w	r0, r3, r0
  402210:	4770      	bx	lr

00402212 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  402212:	f44f 7396 	mov.w	r3, #300	; 0x12c
  402216:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  40221a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40221e:	fb03 f000 	mul.w	r0, r3, r0
  402222:	4770      	bx	lr

00402224 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  402224:	b500      	push	{lr}
  402226:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  402228:	a801      	add	r0, sp, #4
  40222a:	4b14      	ldr	r3, [pc, #80]	; (40227c <_init_chip+0x58>)
  40222c:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  40222e:	4a14      	ldr	r2, [pc, #80]	; (402280 <_init_chip+0x5c>)
  402230:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  402234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  40223c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402240:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  402244:	a801      	add	r0, sp, #4
  402246:	4b0f      	ldr	r3, [pc, #60]	; (402284 <_init_chip+0x60>)
  402248:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  40224a:	4a0f      	ldr	r2, [pc, #60]	; (402288 <_init_chip+0x64>)
  40224c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  40224e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  402252:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  402256:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  402258:	4b0c      	ldr	r3, [pc, #48]	; (40228c <_init_chip+0x68>)
  40225a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40225e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  402262:	d104      	bne.n	40226e <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  402264:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402268:	4b08      	ldr	r3, [pc, #32]	; (40228c <_init_chip+0x68>)
  40226a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  40226e:	4b08      	ldr	r3, [pc, #32]	; (402290 <_init_chip+0x6c>)
  402270:	4798      	blx	r3

#endif
	_pmc_init();
  402272:	4b08      	ldr	r3, [pc, #32]	; (402294 <_init_chip+0x70>)
  402274:	4798      	blx	r3
}
  402276:	b003      	add	sp, #12
  402278:	f85d fb04 	ldr.w	pc, [sp], #4
  40227c:	004018b9 	.word	0x004018b9
  402280:	e000ed00 	.word	0xe000ed00
  402284:	004018c7 	.word	0x004018c7
  402288:	400e0c00 	.word	0x400e0c00
  40228c:	400e0600 	.word	0x400e0600
  402290:	00402dd9 	.word	0x00402dd9
  402294:	004026ad 	.word	0x004026ad

00402298 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  402298:	b538      	push	{r3, r4, r5, lr}
  40229a:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  40229c:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  40229e:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  4022a0:	f014 0f01 	tst.w	r4, #1
  4022a4:	d11a      	bne.n	4022dc <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  4022a6:	f414 7f00 	tst.w	r4, #512	; 0x200
  4022aa:	d11a      	bne.n	4022e2 <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  4022ac:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  4022b0:	d11b      	bne.n	4022ea <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  4022b2:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  4022b6:	d11d      	bne.n	4022f4 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  4022b8:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  4022bc:	d008      	beq.n	4022d0 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4022be:	68eb      	ldr	r3, [r5, #12]
  4022c0:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  4022c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
  4022c4:	f012 0f20 	tst.w	r2, #32
  4022c8:	d019      	beq.n	4022fe <_can_irq_handler+0x66>
  4022ca:	2102      	movs	r1, #2
  4022cc:	4628      	mov	r0, r5
  4022ce:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  4022d0:	f014 0f08 	tst.w	r4, #8
  4022d4:	d115      	bne.n	402302 <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  4022d6:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  4022d8:	651c      	str	r4, [r3, #80]	; 0x50
  4022da:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  4022dc:	6883      	ldr	r3, [r0, #8]
  4022de:	4798      	blx	r3
  4022e0:	e7e1      	b.n	4022a6 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  4022e2:	686b      	ldr	r3, [r5, #4]
  4022e4:	4628      	mov	r0, r5
  4022e6:	4798      	blx	r3
  4022e8:	e7e0      	b.n	4022ac <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  4022ea:	68eb      	ldr	r3, [r5, #12]
  4022ec:	2103      	movs	r1, #3
  4022ee:	4628      	mov	r0, r5
  4022f0:	4798      	blx	r3
  4022f2:	e7de      	b.n	4022b2 <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  4022f4:	68eb      	ldr	r3, [r5, #12]
  4022f6:	2100      	movs	r1, #0
  4022f8:	4628      	mov	r0, r5
  4022fa:	4798      	blx	r3
  4022fc:	e7dc      	b.n	4022b8 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4022fe:	2101      	movs	r1, #1
  402300:	e7e4      	b.n	4022cc <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  402302:	68eb      	ldr	r3, [r5, #12]
  402304:	2104      	movs	r1, #4
  402306:	4628      	mov	r0, r5
  402308:	4798      	blx	r3
  40230a:	e7e4      	b.n	4022d6 <_can_irq_handler+0x3e>

0040230c <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  40230c:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  40230e:	4b02      	ldr	r3, [pc, #8]	; (402318 <MCAN1_INT0_Handler+0xc>)
  402310:	6a98      	ldr	r0, [r3, #40]	; 0x28
  402312:	4b02      	ldr	r3, [pc, #8]	; (40231c <MCAN1_INT0_Handler+0x10>)
  402314:	4798      	blx	r3
  402316:	bd08      	pop	{r3, pc}
  402318:	20400348 	.word	0x20400348
  40231c:	00402299 	.word	0x00402299

00402320 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  402320:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  402322:	2500      	movs	r5, #0
  402324:	428d      	cmp	r5, r1
  402326:	d210      	bcs.n	40234a <_ffs+0x2a>
  402328:	2201      	movs	r2, #1
  40232a:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40232c:	2b1f      	cmp	r3, #31
  40232e:	d80a      	bhi.n	402346 <_ffs+0x26>
			if (v[i] & bit) {
  402330:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  402334:	4222      	tst	r2, r4
  402336:	d102      	bne.n	40233e <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  402338:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40233a:	3301      	adds	r3, #1
  40233c:	e7f6      	b.n	40232c <_ffs+0xc>
				return i * 32 + j;
  40233e:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  402342:	bc30      	pop	{r4, r5}
  402344:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  402346:	3501      	adds	r5, #1
  402348:	e7ec      	b.n	402324 <_ffs+0x4>
	return -1;
  40234a:	f04f 30ff 	mov.w	r0, #4294967295
  40234e:	e7f8      	b.n	402342 <_ffs+0x22>

00402350 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  402350:	b510      	push	{r4, lr}
  402352:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  402354:	2300      	movs	r3, #0
  402356:	9301      	str	r3, [sp, #4]
  402358:	9302      	str	r3, [sp, #8]
  40235a:	9303      	str	r3, [sp, #12]
  40235c:	9304      	str	r3, [sp, #16]
  40235e:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  402360:	4b28      	ldr	r3, [pc, #160]	; (402404 <_ext_irq_handler+0xb4>)
  402362:	6818      	ldr	r0, [r3, #0]
  402364:	22f8      	movs	r2, #248	; 0xf8
  402366:	4928      	ldr	r1, [pc, #160]	; (402408 <_ext_irq_handler+0xb8>)
  402368:	3000      	adds	r0, #0
  40236a:	bf18      	it	ne
  40236c:	2001      	movne	r0, #1
  40236e:	4b27      	ldr	r3, [pc, #156]	; (40240c <_ext_irq_handler+0xbc>)
  402370:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  402372:	4b27      	ldr	r3, [pc, #156]	; (402410 <_ext_irq_handler+0xc0>)
  402374:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  402376:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  402378:	4013      	ands	r3, r2
  40237a:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  40237c:	4a25      	ldr	r2, [pc, #148]	; (402414 <_ext_irq_handler+0xc4>)
  40237e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  402380:	6c92      	ldr	r2, [r2, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  402382:	400a      	ands	r2, r1
  402384:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  402386:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  402388:	4923      	ldr	r1, [pc, #140]	; (402418 <_ext_irq_handler+0xc8>)
  40238a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40238c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  40238e:	400a      	ands	r2, r1
  402390:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  402392:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  402394:	e02c      	b.n	4023f0 <_ext_irq_handler+0xa0>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  402396:	4b1b      	ldr	r3, [pc, #108]	; (402404 <_ext_irq_handler+0xb4>)
  402398:	681b      	ldr	r3, [r3, #0]
  40239a:	4620      	mov	r0, r4
  40239c:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  40239e:	1163      	asrs	r3, r4, #5
  4023a0:	f004 041f 	and.w	r4, r4, #31
  4023a4:	2201      	movs	r2, #1
  4023a6:	fa02 f404 	lsl.w	r4, r2, r4
  4023aa:	aa06      	add	r2, sp, #24
  4023ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4023b0:	f853 2c14 	ldr.w	r2, [r3, #-20]
  4023b4:	ea22 0204 	bic.w	r2, r2, r4
  4023b8:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  4023bc:	2105      	movs	r1, #5
  4023be:	a801      	add	r0, sp, #4
  4023c0:	4b16      	ldr	r3, [pc, #88]	; (40241c <_ext_irq_handler+0xcc>)
  4023c2:	4798      	blx	r3
  4023c4:	4604      	mov	r4, r0
		while (-1 != pos) {
  4023c6:	f1b4 3fff 	cmp.w	r4, #4294967295
  4023ca:	d1e4      	bne.n	402396 <_ext_irq_handler+0x46>
	return ((Pio *)hw)->PIO_ISR;
  4023cc:	4a10      	ldr	r2, [pc, #64]	; (402410 <_ext_irq_handler+0xc0>)
  4023ce:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4023d0:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  4023d2:	400b      	ands	r3, r1
  4023d4:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  4023d6:	490f      	ldr	r1, [pc, #60]	; (402414 <_ext_irq_handler+0xc4>)
  4023d8:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4023da:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  4023dc:	4002      	ands	r2, r0
  4023de:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  4023e0:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  4023e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  4023e6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4023e8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4023ea:	4002      	ands	r2, r0
  4023ec:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  4023ee:	4313      	orrs	r3, r2
	while (flag_total) {
  4023f0:	b12b      	cbz	r3, 4023fe <_ext_irq_handler+0xae>
		pos = _ffs(flags, 5);
  4023f2:	2105      	movs	r1, #5
  4023f4:	a801      	add	r0, sp, #4
  4023f6:	4b09      	ldr	r3, [pc, #36]	; (40241c <_ext_irq_handler+0xcc>)
  4023f8:	4798      	blx	r3
  4023fa:	4604      	mov	r4, r0
		while (-1 != pos) {
  4023fc:	e7e3      	b.n	4023c6 <_ext_irq_handler+0x76>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  4023fe:	b006      	add	sp, #24
  402400:	bd10      	pop	{r4, pc}
  402402:	bf00      	nop
  402404:	20400374 	.word	0x20400374
  402408:	00407c80 	.word	0x00407c80
  40240c:	00401e51 	.word	0x00401e51
  402410:	400e0e00 	.word	0x400e0e00
  402414:	400e1000 	.word	0x400e1000
  402418:	400e1400 	.word	0x400e1400
  40241c:	00402321 	.word	0x00402321

00402420 <_pio_get_hardware_index>:
{
  402420:	b510      	push	{r4, lr}
	ASSERT(hw);
  402422:	4604      	mov	r4, r0
  402424:	22d2      	movs	r2, #210	; 0xd2
  402426:	4905      	ldr	r1, [pc, #20]	; (40243c <_pio_get_hardware_index+0x1c>)
  402428:	3000      	adds	r0, #0
  40242a:	bf18      	it	ne
  40242c:	2001      	movne	r0, #1
  40242e:	4b04      	ldr	r3, [pc, #16]	; (402440 <_pio_get_hardware_index+0x20>)
  402430:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  402432:	4804      	ldr	r0, [pc, #16]	; (402444 <_pio_get_hardware_index+0x24>)
  402434:	4420      	add	r0, r4
}
  402436:	f3c0 2047 	ubfx	r0, r0, #9, #8
  40243a:	bd10      	pop	{r4, pc}
  40243c:	00407c80 	.word	0x00407c80
  402440:	00401e51 	.word	0x00401e51
  402444:	bff1f200 	.word	0xbff1f200

00402448 <_pio_get_index>:
{
  402448:	b510      	push	{r4, lr}
	ASSERT(hw);
  40244a:	4604      	mov	r4, r0
  40244c:	22e0      	movs	r2, #224	; 0xe0
  40244e:	490d      	ldr	r1, [pc, #52]	; (402484 <_pio_get_index+0x3c>)
  402450:	3000      	adds	r0, #0
  402452:	bf18      	it	ne
  402454:	2001      	movne	r0, #1
  402456:	4b0c      	ldr	r3, [pc, #48]	; (402488 <_pio_get_index+0x40>)
  402458:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  40245a:	4620      	mov	r0, r4
  40245c:	4b0b      	ldr	r3, [pc, #44]	; (40248c <_pio_get_index+0x44>)
  40245e:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  402460:	2300      	movs	r3, #0
  402462:	2b02      	cmp	r3, #2
  402464:	d80b      	bhi.n	40247e <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  402466:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  40246a:	008a      	lsls	r2, r1, #2
  40246c:	4908      	ldr	r1, [pc, #32]	; (402490 <_pio_get_index+0x48>)
  40246e:	5c8a      	ldrb	r2, [r1, r2]
  402470:	4290      	cmp	r0, r2
  402472:	d002      	beq.n	40247a <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  402474:	3301      	adds	r3, #1
  402476:	b2db      	uxtb	r3, r3
  402478:	e7f3      	b.n	402462 <_pio_get_index+0x1a>
			return i;
  40247a:	b258      	sxtb	r0, r3
  40247c:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  40247e:	f04f 30ff 	mov.w	r0, #4294967295
}
  402482:	bd10      	pop	{r4, pc}
  402484:	00407c80 	.word	0x00407c80
  402488:	00401e51 	.word	0x00401e51
  40248c:	00402421 	.word	0x00402421
  402490:	00407c24 	.word	0x00407c24

00402494 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  402494:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  402496:	4604      	mov	r4, r0
  402498:	f44f 72af 	mov.w	r2, #350	; 0x15e
  40249c:	4929      	ldr	r1, [pc, #164]	; (402544 <_pio_init+0xb0>)
  40249e:	3000      	adds	r0, #0
  4024a0:	bf18      	it	ne
  4024a2:	2001      	movne	r0, #1
  4024a4:	4b28      	ldr	r3, [pc, #160]	; (402548 <_pio_init+0xb4>)
  4024a6:	4798      	blx	r3

	i = _pio_get_index(hw);
  4024a8:	4620      	mov	r0, r4
  4024aa:	4b28      	ldr	r3, [pc, #160]	; (40254c <_pio_init+0xb8>)
  4024ac:	4798      	blx	r3
	if (i < 0) {
  4024ae:	2800      	cmp	r0, #0
  4024b0:	db43      	blt.n	40253a <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  4024b2:	4d27      	ldr	r5, [pc, #156]	; (402550 <_pio_init+0xbc>)
  4024b4:	00c2      	lsls	r2, r0, #3
  4024b6:	1a11      	subs	r1, r2, r0
  4024b8:	008b      	lsls	r3, r1, #2
  4024ba:	442b      	add	r3, r5
  4024bc:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  4024be:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  4024c2:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  4024c4:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  4024c8:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  4024ca:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  4024ce:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  4024d0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  4024d4:	1a10      	subs	r0, r2, r0
  4024d6:	0083      	lsls	r3, r0, #2
  4024d8:	442b      	add	r3, r5
  4024da:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  4024dc:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  4024e0:	4620      	mov	r0, r4
  4024e2:	4b1c      	ldr	r3, [pc, #112]	; (402554 <_pio_init+0xc0>)
  4024e4:	4798      	blx	r3
  4024e6:	4428      	add	r0, r5
  4024e8:	f990 3054 	ldrsb.w	r3, [r0, #84]	; 0x54
  if ((int32_t)(IRQn) >= 0)
  4024ec:	2b00      	cmp	r3, #0
  4024ee:	db0c      	blt.n	40250a <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4024f0:	095a      	lsrs	r2, r3, #5
  4024f2:	f003 001f 	and.w	r0, r3, #31
  4024f6:	2101      	movs	r1, #1
  4024f8:	4081      	lsls	r1, r0
  4024fa:	3220      	adds	r2, #32
  4024fc:	4816      	ldr	r0, [pc, #88]	; (402558 <_pio_init+0xc4>)
  4024fe:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402502:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402506:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  40250a:	2b00      	cmp	r3, #0
  40250c:	db08      	blt.n	402520 <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40250e:	095a      	lsrs	r2, r3, #5
  402510:	f003 001f 	and.w	r0, r3, #31
  402514:	2101      	movs	r1, #1
  402516:	4081      	lsls	r1, r0
  402518:	3260      	adds	r2, #96	; 0x60
  40251a:	480f      	ldr	r0, [pc, #60]	; (402558 <_pio_init+0xc4>)
  40251c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  402520:	2b00      	cmp	r3, #0
  402522:	db0d      	blt.n	402540 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402524:	0959      	lsrs	r1, r3, #5
  402526:	f003 031f 	and.w	r3, r3, #31
  40252a:	2201      	movs	r2, #1
  40252c:	fa02 f303 	lsl.w	r3, r2, r3
  402530:	4a09      	ldr	r2, [pc, #36]	; (402558 <_pio_init+0xc4>)
  402532:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  402536:	2000      	movs	r0, #0
  402538:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  40253a:	f06f 0010 	mvn.w	r0, #16
  40253e:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  402540:	2000      	movs	r0, #0
}
  402542:	bd38      	pop	{r3, r4, r5, pc}
  402544:	00407c80 	.word	0x00407c80
  402548:	00401e51 	.word	0x00401e51
  40254c:	00402449 	.word	0x00402449
  402550:	00407c24 	.word	0x00407c24
  402554:	00402421 	.word	0x00402421
  402558:	e000e100 	.word	0xe000e100

0040255c <PIOD_Handler>:
{
  40255c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40255e:	4b01      	ldr	r3, [pc, #4]	; (402564 <PIOD_Handler+0x8>)
  402560:	4798      	blx	r3
  402562:	bd08      	pop	{r3, pc}
  402564:	00402351 	.word	0x00402351

00402568 <PIOB_Handler>:
{
  402568:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40256a:	4b01      	ldr	r3, [pc, #4]	; (402570 <PIOB_Handler+0x8>)
  40256c:	4798      	blx	r3
  40256e:	bd08      	pop	{r3, pc}
  402570:	00402351 	.word	0x00402351

00402574 <PIOA_Handler>:
{
  402574:	b508      	push	{r3, lr}
	_ext_irq_handler();
  402576:	4b01      	ldr	r3, [pc, #4]	; (40257c <PIOA_Handler+0x8>)
  402578:	4798      	blx	r3
  40257a:	bd08      	pop	{r3, pc}
  40257c:	00402351 	.word	0x00402351

00402580 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  402580:	b538      	push	{r3, r4, r5, lr}
  402582:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  402584:	4805      	ldr	r0, [pc, #20]	; (40259c <_ext_irq_init+0x1c>)
  402586:	4c06      	ldr	r4, [pc, #24]	; (4025a0 <_ext_irq_init+0x20>)
  402588:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  40258a:	4806      	ldr	r0, [pc, #24]	; (4025a4 <_ext_irq_init+0x24>)
  40258c:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  40258e:	4806      	ldr	r0, [pc, #24]	; (4025a8 <_ext_irq_init+0x28>)
  402590:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  402592:	4b06      	ldr	r3, [pc, #24]	; (4025ac <_ext_irq_init+0x2c>)
  402594:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  402596:	2000      	movs	r0, #0
  402598:	bd38      	pop	{r3, r4, r5, pc}
  40259a:	bf00      	nop
  40259c:	400e0e00 	.word	0x400e0e00
  4025a0:	00402495 	.word	0x00402495
  4025a4:	400e1000 	.word	0x400e1000
  4025a8:	400e1400 	.word	0x400e1400
  4025ac:	20400374 	.word	0x20400374

004025b0 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  4025b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4025b4:	4604      	mov	r4, r0
  4025b6:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  4025b8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 40260c <_ext_irq_enable+0x5c>
  4025bc:	f240 12ab 	movw	r2, #427	; 0x1ab
  4025c0:	4641      	mov	r1, r8
  4025c2:	289f      	cmp	r0, #159	; 0x9f
  4025c4:	bf8c      	ite	hi
  4025c6:	2000      	movhi	r0, #0
  4025c8:	2001      	movls	r0, #1
  4025ca:	4e0e      	ldr	r6, [pc, #56]	; (402604 <_ext_irq_enable+0x54>)
  4025cc:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  4025ce:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  4025d0:	22c3      	movs	r2, #195	; 0xc3
  4025d2:	4641      	mov	r1, r8
  4025d4:	2d9f      	cmp	r5, #159	; 0x9f
  4025d6:	bf8c      	ite	hi
  4025d8:	2000      	movhi	r0, #0
  4025da:	2001      	movls	r0, #1
  4025dc:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  4025de:	096d      	lsrs	r5, r5, #5
  4025e0:	4b09      	ldr	r3, [pc, #36]	; (402608 <_ext_irq_enable+0x58>)
  4025e2:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  4025e6:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  4025ea:	b937      	cbnz	r7, 4025fa <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  4025ec:	2301      	movs	r3, #1
  4025ee:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  4025f2:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  4025f4:	2000      	movs	r0, #0
  4025f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  4025fa:	2301      	movs	r3, #1
  4025fc:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  402600:	642c      	str	r4, [r5, #64]	; 0x40
  402602:	e7f7      	b.n	4025f4 <_ext_irq_enable+0x44>
  402604:	00401e51 	.word	0x00401e51
  402608:	400e0e00 	.word	0x400e0e00
  40260c:	00407c80 	.word	0x00407c80

00402610 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  402610:	490e      	ldr	r1, [pc, #56]	; (40264c <_pmc_init_sources+0x3c>)
  402612:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  402614:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  402618:	4b0d      	ldr	r3, [pc, #52]	; (402650 <_pmc_init_sources+0x40>)
  40261a:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  40261c:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40261e:	4b0b      	ldr	r3, [pc, #44]	; (40264c <_pmc_init_sources+0x3c>)
  402620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  402622:	f013 0f01 	tst.w	r3, #1
  402626:	d0fa      	beq.n	40261e <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  402628:	4b08      	ldr	r3, [pc, #32]	; (40264c <_pmc_init_sources+0x3c>)
  40262a:	6a19      	ldr	r1, [r3, #32]
  40262c:	4a09      	ldr	r2, [pc, #36]	; (402654 <_pmc_init_sources+0x44>)
  40262e:	430a      	orrs	r2, r1
  402630:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  402632:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  402634:	4a08      	ldr	r2, [pc, #32]	; (402658 <_pmc_init_sources+0x48>)
  402636:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  402638:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  40263a:	4a08      	ldr	r2, [pc, #32]	; (40265c <_pmc_init_sources+0x4c>)
  40263c:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  40263e:	4b03      	ldr	r3, [pc, #12]	; (40264c <_pmc_init_sources+0x3c>)
  402640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  402642:	f013 0f02 	tst.w	r3, #2
  402646:	d0fa      	beq.n	40263e <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  402648:	4770      	bx	lr
  40264a:	bf00      	nop
  40264c:	400e0600 	.word	0x400e0600
  402650:	00373e01 	.word	0x00373e01
  402654:	01370000 	.word	0x01370000
  402658:	f800ffff 	.word	0xf800ffff
  40265c:	20183f01 	.word	0x20183f01

00402660 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402660:	4a11      	ldr	r2, [pc, #68]	; (4026a8 <_pmc_init_master_clock+0x48>)
  402662:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  402664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  402668:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40266a:	4b0f      	ldr	r3, [pc, #60]	; (4026a8 <_pmc_init_master_clock+0x48>)
  40266c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40266e:	f013 0f08 	tst.w	r3, #8
  402672:	d0fa      	beq.n	40266a <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402674:	4a0c      	ldr	r2, [pc, #48]	; (4026a8 <_pmc_init_master_clock+0x48>)
  402676:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  402678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  40267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  402680:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  402682:	4b09      	ldr	r3, [pc, #36]	; (4026a8 <_pmc_init_master_clock+0x48>)
  402684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  402686:	f013 0f08 	tst.w	r3, #8
  40268a:	d0fa      	beq.n	402682 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40268c:	4a06      	ldr	r2, [pc, #24]	; (4026a8 <_pmc_init_master_clock+0x48>)
  40268e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  402690:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  402694:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  402698:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40269a:	4b03      	ldr	r3, [pc, #12]	; (4026a8 <_pmc_init_master_clock+0x48>)
  40269c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40269e:	f013 0f08 	tst.w	r3, #8
  4026a2:	d0fa      	beq.n	40269a <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  4026a4:	4770      	bx	lr
  4026a6:	bf00      	nop
  4026a8:	400e0600 	.word	0x400e0600

004026ac <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  4026ac:	b508      	push	{r3, lr}
	_pmc_init_sources();
  4026ae:	4b02      	ldr	r3, [pc, #8]	; (4026b8 <_pmc_init+0xc>)
  4026b0:	4798      	blx	r3
	_pmc_init_master_clock();
  4026b2:	4b02      	ldr	r3, [pc, #8]	; (4026bc <_pmc_init+0x10>)
  4026b4:	4798      	blx	r3
  4026b6:	bd08      	pop	{r3, pc}
  4026b8:	00402611 	.word	0x00402611
  4026bc:	00402661 	.word	0x00402661

004026c0 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4026c0:	2300      	movs	r3, #0
  4026c2:	2b01      	cmp	r3, #1
  4026c4:	d80f      	bhi.n	4026e6 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  4026c6:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  4026ca:	008a      	lsls	r2, r1, #2
  4026cc:	4907      	ldr	r1, [pc, #28]	; (4026ec <_pwm_get_cfg+0x2c>)
  4026ce:	588a      	ldr	r2, [r1, r2]
  4026d0:	4282      	cmp	r2, r0
  4026d2:	d002      	beq.n	4026da <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4026d4:	3301      	adds	r3, #1
  4026d6:	b2db      	uxtb	r3, r3
  4026d8:	e7f3      	b.n	4026c2 <_pwm_get_cfg+0x2>
			return (_pwms + i);
  4026da:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4026de:	009a      	lsls	r2, r3, #2
  4026e0:	4608      	mov	r0, r1
  4026e2:	4410      	add	r0, r2
  4026e4:	4770      	bx	lr
		}
	}

	return NULL;
  4026e6:	2000      	movs	r0, #0
}
  4026e8:	4770      	bx	lr
  4026ea:	bf00      	nop
  4026ec:	00407c9c 	.word	0x00407c9c

004026f0 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  4026f0:	4b06      	ldr	r3, [pc, #24]	; (40270c <_pwm_init_irq_param+0x1c>)
  4026f2:	4298      	cmp	r0, r3
  4026f4:	d003      	beq.n	4026fe <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  4026f6:	4b06      	ldr	r3, [pc, #24]	; (402710 <_pwm_init_irq_param+0x20>)
  4026f8:	4298      	cmp	r0, r3
  4026fa:	d003      	beq.n	402704 <_pwm_init_irq_param+0x14>
  4026fc:	4770      	bx	lr
		_pwm0_dev = dev;
  4026fe:	4b05      	ldr	r3, [pc, #20]	; (402714 <_pwm_init_irq_param+0x24>)
  402700:	6019      	str	r1, [r3, #0]
  402702:	e7f8      	b.n	4026f6 <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  402704:	4b03      	ldr	r3, [pc, #12]	; (402714 <_pwm_init_irq_param+0x24>)
  402706:	6059      	str	r1, [r3, #4]
	}
}
  402708:	e7f8      	b.n	4026fc <_pwm_init_irq_param+0xc>
  40270a:	bf00      	nop
  40270c:	40020000 	.word	0x40020000
  402710:	4005c000 	.word	0x4005c000
  402714:	20400378 	.word	0x20400378

00402718 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  402718:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  40271a:	6903      	ldr	r3, [r0, #16]
	return ((Pwm *)hw)->PWM_ISR1;
  40271c:	69db      	ldr	r3, [r3, #28]
  40271e:	b113      	cbz	r3, 402726 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  402720:	6803      	ldr	r3, [r0, #0]
  402722:	b103      	cbz	r3, 402726 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  402724:	4798      	blx	r3
  402726:	bd08      	pop	{r3, pc}

00402728 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  402728:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  40272a:	4b02      	ldr	r3, [pc, #8]	; (402734 <PWM0_Handler+0xc>)
  40272c:	6818      	ldr	r0, [r3, #0]
  40272e:	4b02      	ldr	r3, [pc, #8]	; (402738 <PWM0_Handler+0x10>)
  402730:	4798      	blx	r3
  402732:	bd08      	pop	{r3, pc}
  402734:	20400378 	.word	0x20400378
  402738:	00402719 	.word	0x00402719

0040273c <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  40273c:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  40273e:	4b02      	ldr	r3, [pc, #8]	; (402748 <PWM1_Handler+0xc>)
  402740:	6858      	ldr	r0, [r3, #4]
  402742:	4b02      	ldr	r3, [pc, #8]	; (40274c <PWM1_Handler+0x10>)
  402744:	4798      	blx	r3
  402746:	bd08      	pop	{r3, pc}
  402748:	20400378 	.word	0x20400378
  40274c:	00402719 	.word	0x00402719

00402750 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  402750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402752:	4606      	mov	r6, r0
	ASSERT(hw);
  402754:	460c      	mov	r4, r1
  402756:	1c08      	adds	r0, r1, #0
  402758:	bf18      	it	ne
  40275a:	2001      	movne	r0, #1
  40275c:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  402760:	4944      	ldr	r1, [pc, #272]	; (402874 <_pwm_init+0x124>)
  402762:	4b45      	ldr	r3, [pc, #276]	; (402878 <_pwm_init+0x128>)
  402764:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  402766:	4620      	mov	r0, r4
  402768:	4b44      	ldr	r3, [pc, #272]	; (40287c <_pwm_init+0x12c>)
  40276a:	4798      	blx	r3
  40276c:	4605      	mov	r5, r0

	device->hw = hw;
  40276e:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  402770:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  402772:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  402774:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  402776:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  402778:	6903      	ldr	r3, [r0, #16]
  40277a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  40277e:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  402780:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  402782:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  402784:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  402786:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  402788:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  40278c:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  40278e:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  402790:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  402792:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  402796:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  402798:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  40279c:	2300      	movs	r3, #0
  40279e:	e019      	b.n	4027d4 <_pwm_init+0x84>
		ch = cfg->ch + i;
  4027a0:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  4027a2:	0118      	lsls	r0, r3, #4
  4027a4:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  4027a8:	5c3a      	ldrb	r2, [r7, r0]
  4027aa:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  4027ae:	3210      	adds	r2, #16
  4027b0:	0152      	lsls	r2, r2, #5
  4027b2:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  4027b4:	5c3a      	ldrb	r2, [r7, r0]
  4027b6:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  4027ba:	3210      	adds	r2, #16
  4027bc:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4027c0:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  4027c2:	5c3a      	ldrb	r2, [r7, r0]
  4027c4:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  4027c8:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4027cc:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  4027d0:	3301      	adds	r3, #1
  4027d2:	b25b      	sxtb	r3, r3
  4027d4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4027d6:	4293      	cmp	r3, r2
  4027d8:	d3e2      	bcc.n	4027a0 <_pwm_init+0x50>
  4027da:	2300      	movs	r3, #0
  4027dc:	e014      	b.n	402808 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  4027de:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4027e0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4027e4:	0082      	lsls	r2, r0, #2
  4027e6:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  4027ea:	5c88      	ldrb	r0, [r1, r2]
  4027ec:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  4027f0:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  4027f4:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4027f8:	5c8a      	ldrb	r2, [r1, r2]
  4027fa:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4027fe:	3213      	adds	r2, #19
  402800:	0112      	lsls	r2, r2, #4
  402802:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  402804:	3301      	adds	r3, #1
  402806:	b25b      	sxtb	r3, r3
  402808:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  40280a:	4293      	cmp	r3, r2
  40280c:	d3e7      	bcc.n	4027de <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  40280e:	4631      	mov	r1, r6
  402810:	4620      	mov	r0, r4
  402812:	4b1b      	ldr	r3, [pc, #108]	; (402880 <_pwm_init+0x130>)
  402814:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  402816:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40281a:	2b00      	cmp	r3, #0
  40281c:	db0d      	blt.n	40283a <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40281e:	095a      	lsrs	r2, r3, #5
  402820:	f003 031f 	and.w	r3, r3, #31
  402824:	2101      	movs	r1, #1
  402826:	fa01 f303 	lsl.w	r3, r1, r3
  40282a:	3220      	adds	r2, #32
  40282c:	4915      	ldr	r1, [pc, #84]	; (402884 <_pwm_init+0x134>)
  40282e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402832:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402836:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40283a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40283e:	2b00      	cmp	r3, #0
  402840:	db09      	blt.n	402856 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402842:	095a      	lsrs	r2, r3, #5
  402844:	f003 031f 	and.w	r3, r3, #31
  402848:	2101      	movs	r1, #1
  40284a:	fa01 f303 	lsl.w	r3, r1, r3
  40284e:	3260      	adds	r2, #96	; 0x60
  402850:	490c      	ldr	r1, [pc, #48]	; (402884 <_pwm_init+0x134>)
  402852:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  402856:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40285a:	2b00      	cmp	r3, #0
  40285c:	db08      	blt.n	402870 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40285e:	0959      	lsrs	r1, r3, #5
  402860:	f003 031f 	and.w	r3, r3, #31
  402864:	2201      	movs	r2, #1
  402866:	fa02 f303 	lsl.w	r3, r2, r3
  40286a:	4a06      	ldr	r2, [pc, #24]	; (402884 <_pwm_init+0x134>)
  40286c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  402870:	2000      	movs	r0, #0
  402872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402874:	00407d44 	.word	0x00407d44
  402878:	00401e51 	.word	0x00401e51
  40287c:	004026c1 	.word	0x004026c1
  402880:	004026f1 	.word	0x004026f1
  402884:	e000e100 	.word	0xe000e100

00402888 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  402888:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  40288a:	4604      	mov	r4, r0
  40288c:	f240 12b5 	movw	r2, #437	; 0x1b5
  402890:	490b      	ldr	r1, [pc, #44]	; (4028c0 <_pwm_enable+0x38>)
  402892:	3000      	adds	r0, #0
  402894:	bf18      	it	ne
  402896:	2001      	movne	r0, #1
  402898:	4b0a      	ldr	r3, [pc, #40]	; (4028c4 <_pwm_enable+0x3c>)
  40289a:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  40289c:	6920      	ldr	r0, [r4, #16]
  40289e:	4b0a      	ldr	r3, [pc, #40]	; (4028c8 <_pwm_enable+0x40>)
  4028a0:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4028a2:	2300      	movs	r3, #0
  4028a4:	e008      	b.n	4028b8 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  4028a6:	6921      	ldr	r1, [r4, #16]
  4028a8:	6b05      	ldr	r5, [r0, #48]	; 0x30
  4028aa:	011a      	lsls	r2, r3, #4
  4028ac:	5cad      	ldrb	r5, [r5, r2]
  4028ae:	2201      	movs	r2, #1
  4028b0:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  4028b2:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  4028b4:	3301      	adds	r3, #1
  4028b6:	b25b      	sxtb	r3, r3
  4028b8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4028ba:	4293      	cmp	r3, r2
  4028bc:	d3f3      	bcc.n	4028a6 <_pwm_enable+0x1e>
	}
}
  4028be:	bd38      	pop	{r3, r4, r5, pc}
  4028c0:	00407d44 	.word	0x00407d44
  4028c4:	00401e51 	.word	0x00401e51
  4028c8:	004026c1 	.word	0x004026c1

004028cc <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  4028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4028ce:	460d      	mov	r5, r1
  4028d0:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  4028d2:	4604      	mov	r4, r0
  4028d4:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  4028d8:	4911      	ldr	r1, [pc, #68]	; (402920 <_pwm_set_param+0x54>)
  4028da:	2800      	cmp	r0, #0
  4028dc:	bf18      	it	ne
  4028de:	42ae      	cmpne	r6, r5
  4028e0:	bf34      	ite	cc
  4028e2:	2001      	movcc	r0, #1
  4028e4:	2000      	movcs	r0, #0
  4028e6:	4b0f      	ldr	r3, [pc, #60]	; (402924 <_pwm_set_param+0x58>)
  4028e8:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  4028ea:	6920      	ldr	r0, [r4, #16]
  4028ec:	4b0e      	ldr	r3, [pc, #56]	; (402928 <_pwm_set_param+0x5c>)
  4028ee:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4028f0:	2300      	movs	r3, #0
  4028f2:	e010      	b.n	402916 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  4028f4:	6922      	ldr	r2, [r4, #16]
  4028f6:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4028f8:	0119      	lsls	r1, r3, #4
  4028fa:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  4028fc:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  402900:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  402904:	6922      	ldr	r2, [r4, #16]
  402906:	6b07      	ldr	r7, [r0, #48]	; 0x30
  402908:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  40290a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  40290e:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  402912:	3301      	adds	r3, #1
  402914:	b2db      	uxtb	r3, r3
  402916:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402918:	4293      	cmp	r3, r2
  40291a:	d3eb      	bcc.n	4028f4 <_pwm_set_param+0x28>
	}
}
  40291c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40291e:	bf00      	nop
  402920:	00407d44 	.word	0x00407d44
  402924:	00401e51 	.word	0x00401e51
  402928:	004026c1 	.word	0x004026c1

0040292c <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  40292c:	b510      	push	{r4, lr}
	ASSERT(device);
  40292e:	4604      	mov	r4, r0
  402930:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402934:	4907      	ldr	r1, [pc, #28]	; (402954 <_pwm_is_enabled+0x28>)
  402936:	3000      	adds	r0, #0
  402938:	bf18      	it	ne
  40293a:	2001      	movne	r0, #1
  40293c:	4b06      	ldr	r3, [pc, #24]	; (402958 <_pwm_is_enabled+0x2c>)
  40293e:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  402940:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  402942:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  402944:	f013 0f0f 	tst.w	r3, #15
  402948:	d001      	beq.n	40294e <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  40294a:	2001      	movs	r0, #1
	}
}
  40294c:	bd10      	pop	{r4, pc}
		return false;
  40294e:	2000      	movs	r0, #0
  402950:	bd10      	pop	{r4, pc}
  402952:	bf00      	nop
  402954:	00407d44 	.word	0x00407d44
  402958:	00401e51 	.word	0x00401e51

0040295c <_pwm_set_irq_state>:

	return hri_pwm_read_CDTY_reg(device->hw, cfg->ch[0].index);
}

void _pwm_set_irq_state(struct _pwm_device *const device, const enum _pwm_callback_type type, const bool disable)
{
  40295c:	b538      	push	{r3, r4, r5, lr}
  40295e:	460d      	mov	r5, r1
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device);
  402960:	4604      	mov	r4, r0
  402962:	f44f 7200 	mov.w	r2, #512	; 0x200
  402966:	4912      	ldr	r1, [pc, #72]	; (4029b0 <_pwm_set_irq_state+0x54>)
  402968:	3000      	adds	r0, #0
  40296a:	bf18      	it	ne
  40296c:	2001      	movne	r0, #1
  40296e:	4b11      	ldr	r3, [pc, #68]	; (4029b4 <_pwm_set_irq_state+0x58>)
  402970:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  402972:	6920      	ldr	r0, [r4, #16]
  402974:	4b10      	ldr	r3, [pc, #64]	; (4029b8 <_pwm_set_irq_state+0x5c>)
  402976:	4798      	blx	r3

	if (PWM_DEVICE_PERIOD_CB == type) {
  402978:	b18d      	cbz	r5, 40299e <_pwm_set_irq_state+0x42>
		for (i = 0; i < cfg->ch_num; i++) {
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
		}
	} else if (PWM_DEVICE_ERROR_CB == type) {
  40297a:	2d01      	cmp	r5, #1
  40297c:	d011      	beq.n	4029a2 <_pwm_set_irq_state+0x46>
  40297e:	bd38      	pop	{r3, r4, r5, pc}
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
  402980:	6921      	ldr	r1, [r4, #16]
  402982:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402984:	0113      	lsls	r3, r2, #4
  402986:	5ced      	ldrb	r5, [r5, r3]
  402988:	2301      	movs	r3, #1
  40298a:	40ab      	lsls	r3, r5
	((Pwm *)hw)->PWM_IER1 = data;
  40298c:	610b      	str	r3, [r1, #16]
	((Pwm *)hw)->PWM_IDR1 = ~data;
  40298e:	43db      	mvns	r3, r3
  402990:	614b      	str	r3, [r1, #20]
		for (i = 0; i < cfg->ch_num; i++) {
  402992:	3201      	adds	r2, #1
  402994:	b2d2      	uxtb	r2, r2
  402996:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402998:	429a      	cmp	r2, r3
  40299a:	d3f1      	bcc.n	402980 <_pwm_set_irq_state+0x24>
  40299c:	bd38      	pop	{r3, r4, r5, pc}
  40299e:	2200      	movs	r2, #0
  4029a0:	e7f9      	b.n	402996 <_pwm_set_irq_state+0x3a>
		ASSERT(false);
  4029a2:	f240 2209 	movw	r2, #521	; 0x209
  4029a6:	4902      	ldr	r1, [pc, #8]	; (4029b0 <_pwm_set_irq_state+0x54>)
  4029a8:	2000      	movs	r0, #0
  4029aa:	4b02      	ldr	r3, [pc, #8]	; (4029b4 <_pwm_set_irq_state+0x58>)
  4029ac:	4798      	blx	r3
	}
}
  4029ae:	e7e6      	b.n	40297e <_pwm_set_irq_state+0x22>
  4029b0:	00407d44 	.word	0x00407d44
  4029b4:	00401e51 	.word	0x00401e51
  4029b8:	004026c1 	.word	0x004026c1

004029bc <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  4029bc:	2000      	movs	r0, #0
  4029be:	4770      	bx	lr

004029c0 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  4029c0:	4b03      	ldr	r3, [pc, #12]	; (4029d0 <_system_time_init+0x10>)
  4029c2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4029c6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  4029c8:	2205      	movs	r2, #5
  4029ca:	601a      	str	r2, [r3, #0]
  4029cc:	4770      	bx	lr
  4029ce:	bf00      	nop
  4029d0:	e000e010 	.word	0xe000e010

004029d4 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  4029d4:	b508      	push	{r3, lr}
	_system_time_init(hw);
  4029d6:	4b01      	ldr	r3, [pc, #4]	; (4029dc <_delay_init+0x8>)
  4029d8:	4798      	blx	r3
  4029da:	bd08      	pop	{r3, pc}
  4029dc:	004029c1 	.word	0x004029c1

004029e0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  4029e0:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  4029e2:	e00d      	b.n	402a00 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  4029e4:	4b0d      	ldr	r3, [pc, #52]	; (402a1c <_delay_cycles+0x3c>)
  4029e6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  4029ea:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  4029ec:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4029ee:	4b0b      	ldr	r3, [pc, #44]	; (402a1c <_delay_cycles+0x3c>)
  4029f0:	681b      	ldr	r3, [r3, #0]
  4029f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4029f6:	d0fa      	beq.n	4029ee <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  4029f8:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4029fc:	3101      	adds	r1, #1
	while (n--) {
  4029fe:	4610      	mov	r0, r2
  402a00:	1e43      	subs	r3, r0, #1
  402a02:	b2da      	uxtb	r2, r3
  402a04:	2800      	cmp	r0, #0
  402a06:	d1ed      	bne.n	4029e4 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  402a08:	4b04      	ldr	r3, [pc, #16]	; (402a1c <_delay_cycles+0x3c>)
  402a0a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  402a0c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  402a0e:	4b03      	ldr	r3, [pc, #12]	; (402a1c <_delay_cycles+0x3c>)
  402a10:	681b      	ldr	r3, [r3, #0]
  402a12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402a16:	d0fa      	beq.n	402a0e <_delay_cycles+0x2e>
		;
}
  402a18:	4770      	bx	lr
  402a1a:	bf00      	nop
  402a1c:	e000e010 	.word	0xe000e010

00402a20 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  402a20:	2300      	movs	r3, #0
  402a22:	2b01      	cmp	r3, #1
  402a24:	d815      	bhi.n	402a52 <get_cfg+0x32>
{
  402a26:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  402a28:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  402a2c:	008a      	lsls	r2, r1, #2
  402a2e:	490a      	ldr	r1, [pc, #40]	; (402a58 <get_cfg+0x38>)
  402a30:	588a      	ldr	r2, [r1, r2]
  402a32:	4282      	cmp	r2, r0
  402a34:	d007      	beq.n	402a46 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  402a36:	3301      	adds	r3, #1
  402a38:	b2db      	uxtb	r3, r3
  402a3a:	2b01      	cmp	r3, #1
  402a3c:	d9f4      	bls.n	402a28 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  402a3e:	2000      	movs	r0, #0
}
  402a40:	f85d 4b04 	ldr.w	r4, [sp], #4
  402a44:	4770      	bx	lr
			return &(_tcs[i]);
  402a46:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  402a4a:	00a3      	lsls	r3, r4, #2
  402a4c:	4608      	mov	r0, r1
  402a4e:	4418      	add	r0, r3
  402a50:	e7f6      	b.n	402a40 <get_cfg+0x20>
	return NULL;
  402a52:	2000      	movs	r0, #0
  402a54:	4770      	bx	lr
  402a56:	bf00      	nop
  402a58:	20400000 	.word	0x20400000

00402a5c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  402a5c:	4b06      	ldr	r3, [pc, #24]	; (402a78 <_tc_init_irq_param+0x1c>)
  402a5e:	4298      	cmp	r0, r3
  402a60:	d003      	beq.n	402a6a <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  402a62:	4b06      	ldr	r3, [pc, #24]	; (402a7c <_tc_init_irq_param+0x20>)
  402a64:	4298      	cmp	r0, r3
  402a66:	d003      	beq.n	402a70 <_tc_init_irq_param+0x14>
  402a68:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  402a6a:	4b05      	ldr	r3, [pc, #20]	; (402a80 <_tc_init_irq_param+0x24>)
  402a6c:	6019      	str	r1, [r3, #0]
  402a6e:	e7f8      	b.n	402a62 <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  402a70:	4b03      	ldr	r3, [pc, #12]	; (402a80 <_tc_init_irq_param+0x24>)
  402a72:	6059      	str	r1, [r3, #4]
	}
}
  402a74:	e7f8      	b.n	402a68 <_tc_init_irq_param+0xc>
  402a76:	bf00      	nop
  402a78:	4000c000 	.word	0x4000c000
  402a7c:	40054000 	.word	0x40054000
  402a80:	20400398 	.word	0x20400398

00402a84 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  402a84:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  402a86:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  402a88:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  402a8a:	f013 0f10 	tst.w	r3, #16
  402a8e:	d100      	bne.n	402a92 <tc_interrupt_handler+0xe>
  402a90:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  402a92:	6803      	ldr	r3, [r0, #0]
  402a94:	4798      	blx	r3
	}
}
  402a96:	e7fb      	b.n	402a90 <tc_interrupt_handler+0xc>

00402a98 <_timer_init>:
{
  402a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402a9c:	4606      	mov	r6, r0
  402a9e:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  402aa0:	4608      	mov	r0, r1
  402aa2:	4b2f      	ldr	r3, [pc, #188]	; (402b60 <_timer_init+0xc8>)
  402aa4:	4798      	blx	r3
  402aa6:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  402aa8:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  402aac:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  402ab0:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  402ab2:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  402ab6:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  402ab8:	22c3      	movs	r2, #195	; 0xc3
  402aba:	492a      	ldr	r1, [pc, #168]	; (402b64 <_timer_init+0xcc>)
  402abc:	2001      	movs	r0, #1
  402abe:	4b2a      	ldr	r3, [pc, #168]	; (402b68 <_timer_init+0xd0>)
  402ac0:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  402ac2:	f248 0307 	movw	r3, #32775	; 0x8007
  402ac6:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  402ac8:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  402acc:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  402ad0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  402ad4:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  402ad6:	2300      	movs	r3, #0
  402ad8:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  402ada:	f248 020f 	movw	r2, #32783	; 0x800f
  402ade:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  402ae0:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  402ae4:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  402ae8:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  402aec:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  402aee:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  402af0:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  402af2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  402af6:	4631      	mov	r1, r6
  402af8:	4620      	mov	r0, r4
  402afa:	4b1c      	ldr	r3, [pc, #112]	; (402b6c <_timer_init+0xd4>)
  402afc:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  402afe:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402b02:	2b00      	cmp	r3, #0
  402b04:	db0d      	blt.n	402b22 <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402b06:	095a      	lsrs	r2, r3, #5
  402b08:	f003 031f 	and.w	r3, r3, #31
  402b0c:	2101      	movs	r1, #1
  402b0e:	fa01 f303 	lsl.w	r3, r1, r3
  402b12:	3220      	adds	r2, #32
  402b14:	4916      	ldr	r1, [pc, #88]	; (402b70 <_timer_init+0xd8>)
  402b16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402b1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402b1e:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  402b22:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402b26:	2b00      	cmp	r3, #0
  402b28:	db09      	blt.n	402b3e <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402b2a:	095a      	lsrs	r2, r3, #5
  402b2c:	f003 031f 	and.w	r3, r3, #31
  402b30:	2101      	movs	r1, #1
  402b32:	fa01 f303 	lsl.w	r3, r1, r3
  402b36:	3260      	adds	r2, #96	; 0x60
  402b38:	490d      	ldr	r1, [pc, #52]	; (402b70 <_timer_init+0xd8>)
  402b3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  402b3e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402b42:	2b00      	cmp	r3, #0
  402b44:	db08      	blt.n	402b58 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402b46:	0959      	lsrs	r1, r3, #5
  402b48:	f003 031f 	and.w	r3, r3, #31
  402b4c:	2201      	movs	r2, #1
  402b4e:	fa02 f303 	lsl.w	r3, r2, r3
  402b52:	4a07      	ldr	r2, [pc, #28]	; (402b70 <_timer_init+0xd8>)
  402b54:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  402b58:	2000      	movs	r0, #0
  402b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b5e:	bf00      	nop
  402b60:	00402a21 	.word	0x00402a21
  402b64:	00407d5c 	.word	0x00407d5c
  402b68:	00401e51 	.word	0x00401e51
  402b6c:	00402a5d 	.word	0x00402a5d
  402b70:	e000e100 	.word	0xe000e100

00402b74 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402b74:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  402b76:	2305      	movs	r3, #5
  402b78:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402b7a:	68c2      	ldr	r2, [r0, #12]
  402b7c:	6413      	str	r3, [r2, #64]	; 0x40
  402b7e:	4770      	bx	lr

00402b80 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  402b80:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  402b82:	6a13      	ldr	r3, [r2, #32]
  402b84:	f3c3 4300 	ubfx	r3, r3, #16, #1
  402b88:	6e10      	ldr	r0, [r2, #96]	; 0x60
  402b8a:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  402b8e:	4318      	orrs	r0, r3
  402b90:	4770      	bx	lr

00402b92 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  402b92:	2000      	movs	r0, #0
  402b94:	4770      	bx	lr
	...

00402b98 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  402b98:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  402b9a:	4b02      	ldr	r3, [pc, #8]	; (402ba4 <TC0_Handler+0xc>)
  402b9c:	6818      	ldr	r0, [r3, #0]
  402b9e:	4b02      	ldr	r3, [pc, #8]	; (402ba8 <TC0_Handler+0x10>)
  402ba0:	4798      	blx	r3
  402ba2:	bd08      	pop	{r3, pc}
  402ba4:	20400398 	.word	0x20400398
  402ba8:	00402a85 	.word	0x00402a85

00402bac <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  402bac:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  402bae:	4b02      	ldr	r3, [pc, #8]	; (402bb8 <TC9_Handler+0xc>)
  402bb0:	6858      	ldr	r0, [r3, #4]
  402bb2:	4b02      	ldr	r3, [pc, #8]	; (402bbc <TC9_Handler+0x10>)
  402bb4:	4798      	blx	r3
  402bb6:	bd08      	pop	{r3, pc}
  402bb8:	20400398 	.word	0x20400398
  402bbc:	00402a85 	.word	0x00402a85

00402bc0 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  402bc0:	b510      	push	{r4, lr}
	ASSERT(hw);
  402bc2:	4604      	mov	r4, r0
  402bc4:	f240 222b 	movw	r2, #555	; 0x22b
  402bc8:	4905      	ldr	r1, [pc, #20]	; (402be0 <_usart_get_hardware_index+0x20>)
  402bca:	3000      	adds	r0, #0
  402bcc:	bf18      	it	ne
  402bce:	2001      	movne	r0, #1
  402bd0:	4b04      	ldr	r3, [pc, #16]	; (402be4 <_usart_get_hardware_index+0x24>)
  402bd2:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  402bd4:	4804      	ldr	r0, [pc, #16]	; (402be8 <_usart_get_hardware_index+0x28>)
  402bd6:	4420      	add	r0, r4
}
  402bd8:	f3c0 3087 	ubfx	r0, r0, #14, #8
  402bdc:	bd10      	pop	{r4, pc}
  402bde:	bf00      	nop
  402be0:	00407d7c 	.word	0x00407d7c
  402be4:	00401e51 	.word	0x00401e51
  402be8:	bffdc000 	.word	0xbffdc000

00402bec <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  402bec:	b510      	push	{r4, lr}
	ASSERT(hw);
  402bee:	4604      	mov	r4, r0
  402bf0:	f240 2287 	movw	r2, #647	; 0x287
  402bf4:	490e      	ldr	r1, [pc, #56]	; (402c30 <_get_usart_index+0x44>)
  402bf6:	3000      	adds	r0, #0
  402bf8:	bf18      	it	ne
  402bfa:	2001      	movne	r0, #1
  402bfc:	4b0d      	ldr	r3, [pc, #52]	; (402c34 <_get_usart_index+0x48>)
  402bfe:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  402c00:	4620      	mov	r0, r4
  402c02:	4b0d      	ldr	r3, [pc, #52]	; (402c38 <_get_usart_index+0x4c>)
  402c04:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  402c06:	2300      	movs	r3, #0
  402c08:	b143      	cbz	r3, 402c1c <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  402c0a:	f240 2291 	movw	r2, #657	; 0x291
  402c0e:	4908      	ldr	r1, [pc, #32]	; (402c30 <_get_usart_index+0x44>)
  402c10:	2000      	movs	r0, #0
  402c12:	4b08      	ldr	r3, [pc, #32]	; (402c34 <_get_usart_index+0x48>)
  402c14:	4798      	blx	r3
	return 0;
  402c16:	2300      	movs	r3, #0
}
  402c18:	4618      	mov	r0, r3
  402c1a:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  402c1c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402c20:	008a      	lsls	r2, r1, #2
  402c22:	4906      	ldr	r1, [pc, #24]	; (402c3c <_get_usart_index+0x50>)
  402c24:	5c8a      	ldrb	r2, [r1, r2]
  402c26:	4290      	cmp	r0, r2
  402c28:	d0f6      	beq.n	402c18 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  402c2a:	3301      	adds	r3, #1
  402c2c:	b2db      	uxtb	r3, r3
  402c2e:	e7eb      	b.n	402c08 <_get_usart_index+0x1c>
  402c30:	00407d7c 	.word	0x00407d7c
  402c34:	00401e51 	.word	0x00401e51
  402c38:	00402bc1 	.word	0x00402bc1
  402c3c:	00407d70 	.word	0x00407d70

00402c40 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  402c40:	b510      	push	{r4, lr}
	ASSERT(hw);
  402c42:	4604      	mov	r4, r0
  402c44:	f240 229e 	movw	r2, #670	; 0x29e
  402c48:	4911      	ldr	r1, [pc, #68]	; (402c90 <_usart_init+0x50>)
  402c4a:	3000      	adds	r0, #0
  402c4c:	bf18      	it	ne
  402c4e:	2001      	movne	r0, #1
  402c50:	4b10      	ldr	r3, [pc, #64]	; (402c94 <_usart_init+0x54>)
  402c52:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  402c54:	4620      	mov	r0, r4
  402c56:	4b10      	ldr	r3, [pc, #64]	; (402c98 <_usart_init+0x58>)
  402c58:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  402c5a:	4b10      	ldr	r3, [pc, #64]	; (402c9c <_usart_init+0x5c>)
  402c5c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  402c60:	2300      	movs	r3, #0
  402c62:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  402c64:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  402c66:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  402c68:	22ac      	movs	r2, #172	; 0xac
  402c6a:	6022      	str	r2, [r4, #0]
  402c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
  402c70:	6022      	str	r2, [r4, #0]
  402c72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402c76:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  402c78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  402c7c:	0081      	lsls	r1, r0, #2
  402c7e:	4a08      	ldr	r2, [pc, #32]	; (402ca0 <_usart_init+0x60>)
  402c80:	440a      	add	r2, r1
  402c82:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  402c84:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  402c86:	4a07      	ldr	r2, [pc, #28]	; (402ca4 <_usart_init+0x64>)
  402c88:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  402c8a:	4618      	mov	r0, r3
  402c8c:	bd10      	pop	{r4, pc}
  402c8e:	bf00      	nop
  402c90:	00407d7c 	.word	0x00407d7c
  402c94:	00401e51 	.word	0x00401e51
  402c98:	00402bed 	.word	0x00402bed
  402c9c:	55534100 	.word	0x55534100
  402ca0:	00407d70 	.word	0x00407d70
  402ca4:	000100f4 	.word	0x000100f4

00402ca8 <_usart_sync_init>:
{
  402ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402caa:	460c      	mov	r4, r1
	ASSERT(device);
  402cac:	4e09      	ldr	r6, [pc, #36]	; (402cd4 <_usart_sync_init+0x2c>)
  402cae:	4607      	mov	r7, r0
  402cb0:	22bd      	movs	r2, #189	; 0xbd
  402cb2:	4631      	mov	r1, r6
  402cb4:	3000      	adds	r0, #0
  402cb6:	bf18      	it	ne
  402cb8:	2001      	movne	r0, #1
  402cba:	4d07      	ldr	r5, [pc, #28]	; (402cd8 <_usart_sync_init+0x30>)
  402cbc:	47a8      	blx	r5
	ASSERT(hw);
  402cbe:	22be      	movs	r2, #190	; 0xbe
  402cc0:	4631      	mov	r1, r6
  402cc2:	1c20      	adds	r0, r4, #0
  402cc4:	bf18      	it	ne
  402cc6:	2001      	movne	r0, #1
  402cc8:	47a8      	blx	r5
	device->hw = hw;
  402cca:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  402ccc:	4620      	mov	r0, r4
  402cce:	4b03      	ldr	r3, [pc, #12]	; (402cdc <_usart_sync_init+0x34>)
  402cd0:	4798      	blx	r3
}
  402cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cd4:	00407d7c 	.word	0x00407d7c
  402cd8:	00401e51 	.word	0x00401e51
  402cdc:	00402c41 	.word	0x00402c41

00402ce0 <_usart_sync_enable>:
{
  402ce0:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  402ce2:	4e0a      	ldr	r6, [pc, #40]	; (402d0c <_usart_sync_enable+0x2c>)
  402ce4:	4604      	mov	r4, r0
  402ce6:	f240 1205 	movw	r2, #261	; 0x105
  402cea:	4631      	mov	r1, r6
  402cec:	3000      	adds	r0, #0
  402cee:	bf18      	it	ne
  402cf0:	2001      	movne	r0, #1
  402cf2:	4d07      	ldr	r5, [pc, #28]	; (402d10 <_usart_sync_enable+0x30>)
  402cf4:	47a8      	blx	r5
	_usart_enable(device->hw);
  402cf6:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  402cf8:	f240 22c7 	movw	r2, #711	; 0x2c7
  402cfc:	4631      	mov	r1, r6
  402cfe:	1c20      	adds	r0, r4, #0
  402d00:	bf18      	it	ne
  402d02:	2001      	movne	r0, #1
  402d04:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  402d06:	2350      	movs	r3, #80	; 0x50
  402d08:	6023      	str	r3, [r4, #0]
  402d0a:	bd70      	pop	{r4, r5, r6, pc}
  402d0c:	00407d7c 	.word	0x00407d7c
  402d10:	00401e51 	.word	0x00401e51

00402d14 <_usart_sync_write_byte>:
{
  402d14:	b538      	push	{r3, r4, r5, lr}
  402d16:	460c      	mov	r4, r1
	ASSERT(device);
  402d18:	4605      	mov	r5, r0
  402d1a:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  402d1e:	4904      	ldr	r1, [pc, #16]	; (402d30 <_usart_sync_write_byte+0x1c>)
  402d20:	3000      	adds	r0, #0
  402d22:	bf18      	it	ne
  402d24:	2001      	movne	r0, #1
  402d26:	4b03      	ldr	r3, [pc, #12]	; (402d34 <_usart_sync_write_byte+0x20>)
  402d28:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  402d2a:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  402d2c:	61dc      	str	r4, [r3, #28]
  402d2e:	bd38      	pop	{r3, r4, r5, pc}
  402d30:	00407d7c 	.word	0x00407d7c
  402d34:	00401e51 	.word	0x00401e51

00402d38 <_usart_sync_read_byte>:
{
  402d38:	b510      	push	{r4, lr}
	ASSERT(device);
  402d3a:	4604      	mov	r4, r0
  402d3c:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  402d40:	4904      	ldr	r1, [pc, #16]	; (402d54 <_usart_sync_read_byte+0x1c>)
  402d42:	3000      	adds	r0, #0
  402d44:	bf18      	it	ne
  402d46:	2001      	movne	r0, #1
  402d48:	4b03      	ldr	r3, [pc, #12]	; (402d58 <_usart_sync_read_byte+0x20>)
  402d4a:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  402d4c:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  402d4e:	6998      	ldr	r0, [r3, #24]
}
  402d50:	b2c0      	uxtb	r0, r0
  402d52:	bd10      	pop	{r4, pc}
  402d54:	00407d7c 	.word	0x00407d7c
  402d58:	00401e51 	.word	0x00401e51

00402d5c <_usart_sync_is_ready_to_send>:
{
  402d5c:	b510      	push	{r4, lr}
	ASSERT(device);
  402d5e:	4604      	mov	r4, r0
  402d60:	f240 12c3 	movw	r2, #451	; 0x1c3
  402d64:	4905      	ldr	r1, [pc, #20]	; (402d7c <_usart_sync_is_ready_to_send+0x20>)
  402d66:	3000      	adds	r0, #0
  402d68:	bf18      	it	ne
  402d6a:	2001      	movne	r0, #1
  402d6c:	4b04      	ldr	r3, [pc, #16]	; (402d80 <_usart_sync_is_ready_to_send+0x24>)
  402d6e:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  402d70:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  402d72:	6958      	ldr	r0, [r3, #20]
}
  402d74:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402d78:	bd10      	pop	{r4, pc}
  402d7a:	bf00      	nop
  402d7c:	00407d7c 	.word	0x00407d7c
  402d80:	00401e51 	.word	0x00401e51

00402d84 <_usart_sync_is_transmit_done>:
{
  402d84:	b510      	push	{r4, lr}
	ASSERT(device);
  402d86:	4604      	mov	r4, r0
  402d88:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  402d8c:	4905      	ldr	r1, [pc, #20]	; (402da4 <_usart_sync_is_transmit_done+0x20>)
  402d8e:	3000      	adds	r0, #0
  402d90:	bf18      	it	ne
  402d92:	2001      	movne	r0, #1
  402d94:	4b04      	ldr	r3, [pc, #16]	; (402da8 <_usart_sync_is_transmit_done+0x24>)
  402d96:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  402d98:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  402d9a:	6958      	ldr	r0, [r3, #20]
}
  402d9c:	f3c0 2040 	ubfx	r0, r0, #9, #1
  402da0:	bd10      	pop	{r4, pc}
  402da2:	bf00      	nop
  402da4:	00407d7c 	.word	0x00407d7c
  402da8:	00401e51 	.word	0x00401e51

00402dac <_usart_sync_is_byte_received>:
{
  402dac:	b510      	push	{r4, lr}
	ASSERT(device);
  402dae:	4604      	mov	r4, r0
  402db0:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402db4:	4905      	ldr	r1, [pc, #20]	; (402dcc <_usart_sync_is_byte_received+0x20>)
  402db6:	3000      	adds	r0, #0
  402db8:	bf18      	it	ne
  402dba:	2001      	movne	r0, #1
  402dbc:	4b04      	ldr	r3, [pc, #16]	; (402dd0 <_usart_sync_is_byte_received+0x24>)
  402dbe:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  402dc0:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  402dc2:	6958      	ldr	r0, [r3, #20]
  402dc4:	f000 0001 	and.w	r0, r0, #1
}
  402dc8:	bd10      	pop	{r4, pc}
  402dca:	bf00      	nop
  402dcc:	00407d7c 	.word	0x00407d7c
  402dd0:	00401e51 	.word	0x00401e51

00402dd4 <_usart_get_usart_sync>:
}
  402dd4:	2000      	movs	r0, #0
  402dd6:	4770      	bx	lr

00402dd8 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  402dd8:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  402dda:	2300      	movs	r3, #0
  402ddc:	e004      	b.n	402de8 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  402dde:	0199      	lsls	r1, r3, #6
  402de0:	4a16      	ldr	r2, [pc, #88]	; (402e3c <_dma_init+0x64>)
  402de2:	5852      	ldr	r2, [r2, r1]
  402de4:	3301      	adds	r3, #1
  402de6:	b2db      	uxtb	r3, r3
  402de8:	2b17      	cmp	r3, #23
  402dea:	d9f8      	bls.n	402dde <_dma_init+0x6>
  402dec:	2300      	movs	r3, #0
  402dee:	e014      	b.n	402e1a <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  402df0:	4c13      	ldr	r4, [pc, #76]	; (402e40 <_dma_init+0x68>)
  402df2:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  402df6:	2100      	movs	r1, #0
  402df8:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  402dfa:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  402dfc:	1c98      	adds	r0, r3, #2
  402dfe:	0180      	lsls	r0, r0, #6
  402e00:	1825      	adds	r5, r4, r0
  402e02:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  402e04:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  402e06:	490f      	ldr	r1, [pc, #60]	; (402e44 <_dma_init+0x6c>)
  402e08:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  402e0c:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  402e0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  402e12:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  402e14:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  402e16:	3301      	adds	r3, #1
  402e18:	b2db      	uxtb	r3, r3
  402e1a:	2b17      	cmp	r3, #23
  402e1c:	d9e8      	bls.n	402df0 <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402e1e:	4b0a      	ldr	r3, [pc, #40]	; (402e48 <_dma_init+0x70>)
  402e20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  402e28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402e2c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402e30:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402e34:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  402e36:	2000      	movs	r0, #0
  402e38:	bc30      	pop	{r4, r5}
  402e3a:	4770      	bx	lr
  402e3c:	4007805c 	.word	0x4007805c
  402e40:	40078000 	.word	0x40078000
  402e44:	00407d98 	.word	0x00407d98
  402e48:	e000e100 	.word	0xe000e100

00402e4c <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  402e4c:	0180      	lsls	r0, r0, #6
  402e4e:	4b02      	ldr	r3, [pc, #8]	; (402e58 <_dma_set_destination_address+0xc>)
  402e50:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  402e52:	2000      	movs	r0, #0
  402e54:	4770      	bx	lr
  402e56:	bf00      	nop
  402e58:	40078064 	.word	0x40078064

00402e5c <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  402e5c:	0180      	lsls	r0, r0, #6
  402e5e:	4b02      	ldr	r3, [pc, #8]	; (402e68 <_dma_set_source_address+0xc>)
  402e60:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  402e62:	2000      	movs	r0, #0
  402e64:	4770      	bx	lr
  402e66:	bf00      	nop
  402e68:	40078060 	.word	0x40078060

00402e6c <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  402e6c:	0180      	lsls	r0, r0, #6
  402e6e:	4a04      	ldr	r2, [pc, #16]	; (402e80 <_dma_set_data_amount+0x14>)
  402e70:	4402      	add	r2, r0
  402e72:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  402e74:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  402e78:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  402e7a:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  402e7c:	2000      	movs	r0, #0
  402e7e:	4770      	bx	lr
  402e80:	40078000 	.word	0x40078000

00402e84 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  402e84:	2301      	movs	r3, #1
  402e86:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  402e8a:	4b03      	ldr	r3, [pc, #12]	; (402e98 <_dma_enable_transaction+0x14>)
  402e8c:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  402e8e:	b101      	cbz	r1, 402e92 <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  402e90:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  402e92:	2000      	movs	r0, #0
  402e94:	4770      	bx	lr
  402e96:	bf00      	nop
  402e98:	40078000 	.word	0x40078000

00402e9c <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  402e9c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  402ea0:	008a      	lsls	r2, r1, #2
  402ea2:	4b02      	ldr	r3, [pc, #8]	; (402eac <_dma_get_channel_resource+0x10>)
  402ea4:	4413      	add	r3, r2
  402ea6:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  402ea8:	2000      	movs	r0, #0
  402eaa:	4770      	bx	lr
  402eac:	204003a0 	.word	0x204003a0

00402eb0 <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  402eb0:	b19a      	cbz	r2, 402eda <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  402eb2:	b951      	cbnz	r1, 402eca <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  402eb4:	0182      	lsls	r2, r0, #6
  402eb6:	4b13      	ldr	r3, [pc, #76]	; (402f04 <_dma_set_irq_state+0x54>)
  402eb8:	4413      	add	r3, r2
  402eba:	2201      	movs	r2, #1
  402ebc:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  402ebe:	2301      	movs	r3, #1
  402ec0:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  402ec4:	4b0f      	ldr	r3, [pc, #60]	; (402f04 <_dma_set_irq_state+0x54>)
  402ec6:	60d8      	str	r0, [r3, #12]
  402ec8:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  402eca:	2901      	cmp	r1, #1
  402ecc:	d1f7      	bne.n	402ebe <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  402ece:	0182      	lsls	r2, r0, #6
  402ed0:	4b0c      	ldr	r3, [pc, #48]	; (402f04 <_dma_set_irq_state+0x54>)
  402ed2:	4413      	add	r3, r2
  402ed4:	2270      	movs	r2, #112	; 0x70
  402ed6:	651a      	str	r2, [r3, #80]	; 0x50
  402ed8:	e7f1      	b.n	402ebe <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  402eda:	b951      	cbnz	r1, 402ef2 <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  402edc:	0182      	lsls	r2, r0, #6
  402ede:	4b09      	ldr	r3, [pc, #36]	; (402f04 <_dma_set_irq_state+0x54>)
  402ee0:	4413      	add	r3, r2
  402ee2:	2201      	movs	r2, #1
  402ee4:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  402ee6:	2301      	movs	r3, #1
  402ee8:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  402eec:	4b05      	ldr	r3, [pc, #20]	; (402f04 <_dma_set_irq_state+0x54>)
  402eee:	6118      	str	r0, [r3, #16]
  402ef0:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  402ef2:	2901      	cmp	r1, #1
  402ef4:	d1f7      	bne.n	402ee6 <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  402ef6:	0182      	lsls	r2, r0, #6
  402ef8:	4b02      	ldr	r3, [pc, #8]	; (402f04 <_dma_set_irq_state+0x54>)
  402efa:	4413      	add	r3, r2
  402efc:	2270      	movs	r2, #112	; 0x70
  402efe:	655a      	str	r2, [r3, #84]	; 0x54
  402f00:	e7f1      	b.n	402ee6 <_dma_set_irq_state+0x36>
  402f02:	bf00      	nop
  402f04:	40078000 	.word	0x40078000

00402f08 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  402f08:	4b17      	ldr	r3, [pc, #92]	; (402f68 <XDMAC_Handler+0x60>)
  402f0a:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  402f0c:	2300      	movs	r3, #0
  402f0e:	2b17      	cmp	r3, #23
  402f10:	d81b      	bhi.n	402f4a <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  402f12:	fa21 f203 	lsr.w	r2, r1, r3
  402f16:	f012 0f01 	tst.w	r2, #1
  402f1a:	d102      	bne.n	402f22 <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  402f1c:	3301      	adds	r3, #1
  402f1e:	b2db      	uxtb	r3, r3
  402f20:	e7f5      	b.n	402f0e <XDMAC_Handler+0x6>
			channel = i;
  402f22:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  402f24:	2b00      	cmp	r3, #0
  402f26:	db1d      	blt.n	402f64 <XDMAC_Handler+0x5c>
{
  402f28:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  402f2a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  402f2e:	0090      	lsls	r0, r2, #2
  402f30:	4a0e      	ldr	r2, [pc, #56]	; (402f6c <XDMAC_Handler+0x64>)
  402f32:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  402f34:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  402f36:	0189      	lsls	r1, r1, #6
  402f38:	4a0d      	ldr	r2, [pc, #52]	; (402f70 <XDMAC_Handler+0x68>)
  402f3a:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  402f3c:	f012 0f70 	tst.w	r2, #112	; 0x70
  402f40:	d106      	bne.n	402f50 <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  402f42:	f012 0f01 	tst.w	r2, #1
  402f46:	d106      	bne.n	402f56 <XDMAC_Handler+0x4e>
  402f48:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  402f4a:	f04f 33ff 	mov.w	r3, #4294967295
  402f4e:	e7e9      	b.n	402f24 <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  402f50:	6843      	ldr	r3, [r0, #4]
  402f52:	4798      	blx	r3
  402f54:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  402f56:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  402f5a:	00a3      	lsls	r3, r4, #2
  402f5c:	4a03      	ldr	r2, [pc, #12]	; (402f6c <XDMAC_Handler+0x64>)
  402f5e:	58d3      	ldr	r3, [r2, r3]
  402f60:	4798      	blx	r3
  402f62:	e7f1      	b.n	402f48 <XDMAC_Handler+0x40>
  402f64:	4770      	bx	lr
  402f66:	bf00      	nop
  402f68:	40078000 	.word	0x40078000
  402f6c:	204003a0 	.word	0x204003a0
  402f70:	4007805c 	.word	0x4007805c
  402f74:	00000000 	.word	0x00000000

00402f78 <main>:




int main(void)
{
  402f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  402f7a:	4b37      	ldr	r3, [pc, #220]	; (403058 <main+0xe0>)
  402f7c:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	/* Additional User initialisation */
	dma_adc_init();
  402f7e:	4b37      	ldr	r3, [pc, #220]	; (40305c <main+0xe4>)
  402f80:	4798      	blx	r3
	pwm_init_user();
  402f82:	4b37      	ldr	r3, [pc, #220]	; (403060 <main+0xe8>)
  402f84:	4798      	blx	r3
	encoder_init();
  402f86:	4b37      	ldr	r3, [pc, #220]	; (403064 <main+0xec>)
  402f88:	4798      	blx	r3
	pos_sens_init();
  402f8a:	4b37      	ldr	r3, [pc, #220]	; (403068 <main+0xf0>)
  402f8c:	4798      	blx	r3
	
	/* Enable all devices */
	pwm_enable_all();
  402f8e:	4b37      	ldr	r3, [pc, #220]	; (40306c <main+0xf4>)
  402f90:	4798      	blx	r3
	adc_enable_all();
  402f92:	4b37      	ldr	r3, [pc, #220]	; (403070 <main+0xf8>)
  402f94:	4798      	blx	r3
	calibrate_curr_sensors();	//both PWM and ADC need to be enabled to calibrate the current sensors
  402f96:	4b37      	ldr	r3, [pc, #220]	; (403074 <main+0xfc>)
  402f98:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  402f9a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  402f9e:	4b36      	ldr	r3, [pc, #216]	; (403078 <main+0x100>)
  402fa0:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);		//enables the DC-DC converter for the HV side
	
	timer_start(&ENCODER_A);
  402fa2:	4836      	ldr	r0, [pc, #216]	; (40307c <main+0x104>)
  402fa4:	4c36      	ldr	r4, [pc, #216]	; (403080 <main+0x108>)
  402fa6:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  402fa8:	4836      	ldr	r0, [pc, #216]	; (403084 <main+0x10c>)
  402faa:	47a0      	blx	r4
	
	dma_adc_0_enable_continuously();
  402fac:	4b36      	ldr	r3, [pc, #216]	; (403088 <main+0x110>)
  402fae:	4798      	blx	r3
	dma_adc_1_enable_continuously();
  402fb0:	4b36      	ldr	r3, [pc, #216]	; (40308c <main+0x114>)
  402fb2:	4798      	blx	r3
	//enable_control();
	//----------------------------------------End of Startup Code--------------------------------------------------
	
	Current_Offset_Test();
  402fb4:	4b36      	ldr	r3, [pc, #216]	; (403090 <main+0x118>)
  402fb6:	4798      	blx	r3
	delay_ms(500);
  402fb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402fbc:	4d35      	ldr	r5, [pc, #212]	; (403094 <main+0x11c>)
  402fbe:	47a8      	blx	r5
	printf("Initiated \n");
  402fc0:	4835      	ldr	r0, [pc, #212]	; (403098 <main+0x120>)
  402fc2:	4c36      	ldr	r4, [pc, #216]	; (40309c <main+0x124>)
  402fc4:	47a0      	blx	r4
	//first_slow_spin();
	
	printf("Starting D axis alignment \n");
  402fc6:	4836      	ldr	r0, [pc, #216]	; (4030a0 <main+0x128>)
  402fc8:	47a0      	blx	r4
	pwm_set_duty(PWM_PHASE_A, 0);
  402fca:	4f36      	ldr	r7, [pc, #216]	; (4030a4 <main+0x12c>)
  402fcc:	2200      	movs	r2, #0
  402fce:	4611      	mov	r1, r2
  402fd0:	4638      	mov	r0, r7
  402fd2:	4e35      	ldr	r6, [pc, #212]	; (4030a8 <main+0x130>)
  402fd4:	47b0      	blx	r6
	pwm_set_duty(PWM_PHASE_B, (PWM_PERIOD-1));
  402fd6:	f240 32e7 	movw	r2, #999	; 0x3e7
  402fda:	2102      	movs	r1, #2
  402fdc:	4638      	mov	r0, r7
  402fde:	47b0      	blx	r6
	pwm_set_duty(PWM_PHASE_C, (PWM_PERIOD-1));
  402fe0:	f240 32e7 	movw	r2, #999	; 0x3e7
  402fe4:	2100      	movs	r1, #0
  402fe6:	4831      	ldr	r0, [pc, #196]	; (4030ac <main+0x134>)
  402fe8:	47b0      	blx	r6
	
	

	delay_ms(5000);
  402fea:	f241 3088 	movw	r0, #5000	; 0x1388
  402fee:	47a8      	blx	r5
	encoder_record_Daxis_offset();
  402ff0:	4b2f      	ldr	r3, [pc, #188]	; (4030b0 <main+0x138>)
  402ff2:	4798      	blx	r3
	printf("Finished D axis alignment \n");
  402ff4:	482f      	ldr	r0, [pc, #188]	; (4030b4 <main+0x13c>)
  402ff6:	47a0      	blx	r4

	Vd_aim = 0;
  402ff8:	2200      	movs	r2, #0
  402ffa:	4b2f      	ldr	r3, [pc, #188]	; (4030b8 <main+0x140>)
  402ffc:	601a      	str	r2, [r3, #0]
	Vq_aim = 1;
  402ffe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  403002:	4b2e      	ldr	r3, [pc, #184]	; (4030bc <main+0x144>)
  403004:	601a      	str	r2, [r3, #0]
	enable_control();
  403006:	4b2e      	ldr	r3, [pc, #184]	; (4030c0 <main+0x148>)
  403008:	4798      	blx	r3
	
	
	delay_ms(3000);
  40300a:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40300e:	47a8      	blx	r5
	printf("Increasing PWM \n");
  403010:	482c      	ldr	r0, [pc, #176]	; (4030c4 <main+0x14c>)
  403012:	47a0      	blx	r4
	for(int i =0;i< 10;i++){
  403014:	2400      	movs	r4, #0
  403016:	e00f      	b.n	403038 <main+0xc0>
		Vq_aim +=0.1;
  403018:	4d28      	ldr	r5, [pc, #160]	; (4030bc <main+0x144>)
  40301a:	6828      	ldr	r0, [r5, #0]
  40301c:	4b2a      	ldr	r3, [pc, #168]	; (4030c8 <main+0x150>)
  40301e:	4798      	blx	r3
  403020:	a30b      	add	r3, pc, #44	; (adr r3, 403050 <main+0xd8>)
  403022:	e9d3 2300 	ldrd	r2, r3, [r3]
  403026:	4e29      	ldr	r6, [pc, #164]	; (4030cc <main+0x154>)
  403028:	47b0      	blx	r6
  40302a:	4b29      	ldr	r3, [pc, #164]	; (4030d0 <main+0x158>)
  40302c:	4798      	blx	r3
  40302e:	6028      	str	r0, [r5, #0]
		delay_us(100);
  403030:	2064      	movs	r0, #100	; 0x64
  403032:	4b28      	ldr	r3, [pc, #160]	; (4030d4 <main+0x15c>)
  403034:	4798      	blx	r3
	for(int i =0;i< 10;i++){
  403036:	3401      	adds	r4, #1
  403038:	2c09      	cmp	r4, #9
  40303a:	dded      	ble.n	403018 <main+0xa0>
	}
	printf("Vq aim - %f \n",Vq_aim);
  40303c:	4b1f      	ldr	r3, [pc, #124]	; (4030bc <main+0x144>)
  40303e:	6818      	ldr	r0, [r3, #0]
  403040:	4b21      	ldr	r3, [pc, #132]	; (4030c8 <main+0x150>)
  403042:	4798      	blx	r3
  403044:	4602      	mov	r2, r0
  403046:	460b      	mov	r3, r1
  403048:	4823      	ldr	r0, [pc, #140]	; (4030d8 <main+0x160>)
  40304a:	4914      	ldr	r1, [pc, #80]	; (40309c <main+0x124>)
  40304c:	4788      	blx	r1
  40304e:	e7fe      	b.n	40304e <main+0xd6>
  403050:	9999999a 	.word	0x9999999a
  403054:	3fb99999 	.word	0x3fb99999
  403058:	004001d5 	.word	0x004001d5
  40305c:	00400cdd 	.word	0x00400cdd
  403060:	00400ea1 	.word	0x00400ea1
  403064:	0040065d 	.word	0x0040065d
  403068:	004009d5 	.word	0x004009d5
  40306c:	00400f75 	.word	0x00400f75
  403070:	00400dc9 	.word	0x00400dc9
  403074:	00400511 	.word	0x00400511
  403078:	400e0e00 	.word	0x400e0e00
  40307c:	204006c4 	.word	0x204006c4
  403080:	00401cd1 	.word	0x00401cd1
  403084:	20400614 	.word	0x20400614
  403088:	00400c95 	.word	0x00400c95
  40308c:	00400cad 	.word	0x00400cad
  403090:	00400fe1 	.word	0x00400fe1
  403094:	00401909 	.word	0x00401909
  403098:	00407e58 	.word	0x00407e58
  40309c:	00405881 	.word	0x00405881
  4030a0:	00407e64 	.word	0x00407e64
  4030a4:	204005f8 	.word	0x204005f8
  4030a8:	00400fd5 	.word	0x00400fd5
  4030ac:	2040079c 	.word	0x2040079c
  4030b0:	00400889 	.word	0x00400889
  4030b4:	00407e80 	.word	0x00407e80
  4030b8:	20400570 	.word	0x20400570
  4030bc:	20400574 	.word	0x20400574
  4030c0:	00400af9 	.word	0x00400af9
  4030c4:	00407e9c 	.word	0x00407e9c
  4030c8:	0040485d 	.word	0x0040485d
  4030cc:	004045a1 	.word	0x004045a1
  4030d0:	00404eb5 	.word	0x00404eb5
  4030d4:	004018e9 	.word	0x004018e9
  4030d8:	00407eb0 	.word	0x00407eb0

004030dc <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  4030dc:	b958      	cbnz	r0, 4030f6 <_read+0x1a>
{
  4030de:	b508      	push	{r3, lr}
  4030e0:	460b      	mov	r3, r1
  4030e2:	4611      	mov	r1, r2
  4030e4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  4030e6:	4b05      	ldr	r3, [pc, #20]	; (4030fc <_read+0x20>)
  4030e8:	4798      	blx	r3
	if (n < 0) {
  4030ea:	2800      	cmp	r0, #0
  4030ec:	db00      	blt.n	4030f0 <_read+0x14>
		return -1;
	}

	return n;
}
  4030ee:	bd08      	pop	{r3, pc}
		return -1;
  4030f0:	f04f 30ff 	mov.w	r0, #4294967295
  4030f4:	bd08      	pop	{r3, pc}
		return -1;
  4030f6:	f04f 30ff 	mov.w	r0, #4294967295
  4030fa:	4770      	bx	lr
  4030fc:	00403155 	.word	0x00403155

00403100 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  403100:	3801      	subs	r0, #1
  403102:	2802      	cmp	r0, #2
  403104:	d80b      	bhi.n	40311e <_write+0x1e>
{
  403106:	b508      	push	{r3, lr}
  403108:	460b      	mov	r3, r1
  40310a:	4611      	mov	r1, r2
  40310c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  40310e:	4b05      	ldr	r3, [pc, #20]	; (403124 <_write+0x24>)
  403110:	4798      	blx	r3
	if (n < 0) {
  403112:	2800      	cmp	r0, #0
  403114:	db00      	blt.n	403118 <_write+0x18>
		return -1;
	}

	return n;
}
  403116:	bd08      	pop	{r3, pc}
		return -1;
  403118:	f04f 30ff 	mov.w	r0, #4294967295
  40311c:	bd08      	pop	{r3, pc}
		return -1;
  40311e:	f04f 30ff 	mov.w	r0, #4294967295
  403122:	4770      	bx	lr
  403124:	00403179 	.word	0x00403179

00403128 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  403128:	b570      	push	{r4, r5, r6, lr}
  40312a:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  40312c:	4d06      	ldr	r5, [pc, #24]	; (403148 <stdio_io_init+0x20>)
  40312e:	682b      	ldr	r3, [r5, #0]
  403130:	2100      	movs	r1, #0
  403132:	6898      	ldr	r0, [r3, #8]
  403134:	4c05      	ldr	r4, [pc, #20]	; (40314c <stdio_io_init+0x24>)
  403136:	47a0      	blx	r4
	setbuf(stdin, NULL);
  403138:	682b      	ldr	r3, [r5, #0]
  40313a:	2100      	movs	r1, #0
  40313c:	6858      	ldr	r0, [r3, #4]
  40313e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  403140:	4b03      	ldr	r3, [pc, #12]	; (403150 <stdio_io_init+0x28>)
  403142:	601e      	str	r6, [r3, #0]
  403144:	bd70      	pop	{r4, r5, r6, pc}
  403146:	bf00      	nop
  403148:	20400048 	.word	0x20400048
  40314c:	004058b1 	.word	0x004058b1
  403150:	204004c0 	.word	0x204004c0

00403154 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  403154:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  403156:	4b06      	ldr	r3, [pc, #24]	; (403170 <stdio_io_read+0x1c>)
  403158:	681b      	ldr	r3, [r3, #0]
  40315a:	b133      	cbz	r3, 40316a <stdio_io_read+0x16>
  40315c:	460a      	mov	r2, r1
  40315e:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  403160:	b292      	uxth	r2, r2
  403162:	4618      	mov	r0, r3
  403164:	4b03      	ldr	r3, [pc, #12]	; (403174 <stdio_io_read+0x20>)
  403166:	4798      	blx	r3
  403168:	bd08      	pop	{r3, pc}
		return 0;
  40316a:	2000      	movs	r0, #0
}
  40316c:	bd08      	pop	{r3, pc}
  40316e:	bf00      	nop
  403170:	204004c0 	.word	0x204004c0
  403174:	00401aa1 	.word	0x00401aa1

00403178 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  403178:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40317a:	4b06      	ldr	r3, [pc, #24]	; (403194 <stdio_io_write+0x1c>)
  40317c:	681b      	ldr	r3, [r3, #0]
  40317e:	b133      	cbz	r3, 40318e <stdio_io_write+0x16>
  403180:	460a      	mov	r2, r1
  403182:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  403184:	b292      	uxth	r2, r2
  403186:	4618      	mov	r0, r3
  403188:	4b03      	ldr	r3, [pc, #12]	; (403198 <stdio_io_write+0x20>)
  40318a:	4798      	blx	r3
  40318c:	bd08      	pop	{r3, pc}
		return 0;
  40318e:	2000      	movs	r0, #0
}
  403190:	bd08      	pop	{r3, pc}
  403192:	bf00      	nop
  403194:	204004c0 	.word	0x204004c0
  403198:	00401a71 	.word	0x00401a71

0040319c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  40319c:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  40319e:	4c04      	ldr	r4, [pc, #16]	; (4031b0 <stdio_redirect_init+0x14>)
  4031a0:	4620      	mov	r0, r4
  4031a2:	4b04      	ldr	r3, [pc, #16]	; (4031b4 <stdio_redirect_init+0x18>)
  4031a4:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  4031a6:	4620      	mov	r0, r4
  4031a8:	4b03      	ldr	r3, [pc, #12]	; (4031b8 <stdio_redirect_init+0x1c>)
  4031aa:	4798      	blx	r3
  4031ac:	bd10      	pop	{r4, pc}
  4031ae:	bf00      	nop
  4031b0:	204006b8 	.word	0x204006b8
  4031b4:	00401e25 	.word	0x00401e25
  4031b8:	00403129 	.word	0x00403129

004031bc <cos>:
  4031bc:	b530      	push	{r4, r5, lr}
  4031be:	4a22      	ldr	r2, [pc, #136]	; (403248 <cos+0x8c>)
  4031c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4031c4:	4293      	cmp	r3, r2
  4031c6:	b087      	sub	sp, #28
  4031c8:	dd1b      	ble.n	403202 <cos+0x46>
  4031ca:	4a20      	ldr	r2, [pc, #128]	; (40324c <cos+0x90>)
  4031cc:	4293      	cmp	r3, r2
  4031ce:	dd05      	ble.n	4031dc <cos+0x20>
  4031d0:	4602      	mov	r2, r0
  4031d2:	460b      	mov	r3, r1
  4031d4:	f001 f9e2 	bl	40459c <__aeabi_dsub>
  4031d8:	b007      	add	sp, #28
  4031da:	bd30      	pop	{r4, r5, pc}
  4031dc:	aa02      	add	r2, sp, #8
  4031de:	f000 f87b 	bl	4032d8 <__ieee754_rem_pio2>
  4031e2:	f000 0303 	and.w	r3, r0, #3
  4031e6:	2b01      	cmp	r3, #1
  4031e8:	d01a      	beq.n	403220 <cos+0x64>
  4031ea:	2b02      	cmp	r3, #2
  4031ec:	d00f      	beq.n	40320e <cos+0x52>
  4031ee:	b31b      	cbz	r3, 403238 <cos+0x7c>
  4031f0:	2401      	movs	r4, #1
  4031f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4031f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4031fa:	9400      	str	r4, [sp, #0]
  4031fc:	f000 fffc 	bl	4041f8 <__kernel_sin>
  403200:	e7ea      	b.n	4031d8 <cos+0x1c>
  403202:	2200      	movs	r2, #0
  403204:	2300      	movs	r3, #0
  403206:	f000 fa8b 	bl	403720 <__kernel_cos>
  40320a:	b007      	add	sp, #28
  40320c:	bd30      	pop	{r4, r5, pc}
  40320e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403216:	f000 fa83 	bl	403720 <__kernel_cos>
  40321a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40321e:	e7db      	b.n	4031d8 <cos+0x1c>
  403220:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  403224:	9300      	str	r3, [sp, #0]
  403226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40322a:	4622      	mov	r2, r4
  40322c:	462b      	mov	r3, r5
  40322e:	f000 ffe3 	bl	4041f8 <__kernel_sin>
  403232:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403236:	e7cf      	b.n	4031d8 <cos+0x1c>
  403238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40323c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403240:	f000 fa6e 	bl	403720 <__kernel_cos>
  403244:	e7c8      	b.n	4031d8 <cos+0x1c>
  403246:	bf00      	nop
  403248:	3fe921fb 	.word	0x3fe921fb
  40324c:	7fefffff 	.word	0x7fefffff

00403250 <sin>:
  403250:	b530      	push	{r4, r5, lr}
  403252:	4a1f      	ldr	r2, [pc, #124]	; (4032d0 <sin+0x80>)
  403254:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  403258:	4293      	cmp	r3, r2
  40325a:	b087      	sub	sp, #28
  40325c:	dd1b      	ble.n	403296 <sin+0x46>
  40325e:	4a1d      	ldr	r2, [pc, #116]	; (4032d4 <sin+0x84>)
  403260:	4293      	cmp	r3, r2
  403262:	dd05      	ble.n	403270 <sin+0x20>
  403264:	4602      	mov	r2, r0
  403266:	460b      	mov	r3, r1
  403268:	f001 f998 	bl	40459c <__aeabi_dsub>
  40326c:	b007      	add	sp, #28
  40326e:	bd30      	pop	{r4, r5, pc}
  403270:	aa02      	add	r2, sp, #8
  403272:	f000 f831 	bl	4032d8 <__ieee754_rem_pio2>
  403276:	f000 0003 	and.w	r0, r0, #3
  40327a:	2801      	cmp	r0, #1
  40327c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403280:	d01a      	beq.n	4032b8 <sin+0x68>
  403282:	2802      	cmp	r0, #2
  403284:	d00f      	beq.n	4032a6 <sin+0x56>
  403286:	b1e0      	cbz	r0, 4032c2 <sin+0x72>
  403288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40328c:	f000 fa48 	bl	403720 <__kernel_cos>
  403290:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403294:	e7ea      	b.n	40326c <sin+0x1c>
  403296:	2300      	movs	r3, #0
  403298:	9300      	str	r3, [sp, #0]
  40329a:	2200      	movs	r2, #0
  40329c:	2300      	movs	r3, #0
  40329e:	f000 ffab 	bl	4041f8 <__kernel_sin>
  4032a2:	b007      	add	sp, #28
  4032a4:	bd30      	pop	{r4, r5, pc}
  4032a6:	2401      	movs	r4, #1
  4032a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4032ac:	9400      	str	r4, [sp, #0]
  4032ae:	f000 ffa3 	bl	4041f8 <__kernel_sin>
  4032b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4032b6:	e7d9      	b.n	40326c <sin+0x1c>
  4032b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4032bc:	f000 fa30 	bl	403720 <__kernel_cos>
  4032c0:	e7d4      	b.n	40326c <sin+0x1c>
  4032c2:	2401      	movs	r4, #1
  4032c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4032c8:	9400      	str	r4, [sp, #0]
  4032ca:	f000 ff95 	bl	4041f8 <__kernel_sin>
  4032ce:	e7cd      	b.n	40326c <sin+0x1c>
  4032d0:	3fe921fb 	.word	0x3fe921fb
  4032d4:	7fefffff 	.word	0x7fefffff

004032d8 <__ieee754_rem_pio2>:
  4032d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032dc:	4e9a      	ldr	r6, [pc, #616]	; (403548 <__ieee754_rem_pio2+0x270>)
  4032de:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  4032e2:	42b7      	cmp	r7, r6
  4032e4:	b091      	sub	sp, #68	; 0x44
  4032e6:	f340 808e 	ble.w	403406 <__ieee754_rem_pio2+0x12e>
  4032ea:	4692      	mov	sl, r2
  4032ec:	4a97      	ldr	r2, [pc, #604]	; (40354c <__ieee754_rem_pio2+0x274>)
  4032ee:	4297      	cmp	r7, r2
  4032f0:	460c      	mov	r4, r1
  4032f2:	dc26      	bgt.n	403342 <__ieee754_rem_pio2+0x6a>
  4032f4:	2900      	cmp	r1, #0
  4032f6:	a38a      	add	r3, pc, #552	; (adr r3, 403520 <__ieee754_rem_pio2+0x248>)
  4032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4032fc:	f340 81b4 	ble.w	403668 <__ieee754_rem_pio2+0x390>
  403300:	f001 f94c 	bl	40459c <__aeabi_dsub>
  403304:	4b92      	ldr	r3, [pc, #584]	; (403550 <__ieee754_rem_pio2+0x278>)
  403306:	429f      	cmp	r7, r3
  403308:	4604      	mov	r4, r0
  40330a:	460d      	mov	r5, r1
  40330c:	f000 8090 	beq.w	403430 <__ieee754_rem_pio2+0x158>
  403310:	a385      	add	r3, pc, #532	; (adr r3, 403528 <__ieee754_rem_pio2+0x250>)
  403312:	e9d3 2300 	ldrd	r2, r3, [r3]
  403316:	f001 f941 	bl	40459c <__aeabi_dsub>
  40331a:	4602      	mov	r2, r0
  40331c:	460b      	mov	r3, r1
  40331e:	e9ca 2300 	strd	r2, r3, [sl]
  403322:	4620      	mov	r0, r4
  403324:	4629      	mov	r1, r5
  403326:	f001 f939 	bl	40459c <__aeabi_dsub>
  40332a:	a37f      	add	r3, pc, #508	; (adr r3, 403528 <__ieee754_rem_pio2+0x250>)
  40332c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403330:	f001 f934 	bl	40459c <__aeabi_dsub>
  403334:	2501      	movs	r5, #1
  403336:	e9ca 0102 	strd	r0, r1, [sl, #8]
  40333a:	4628      	mov	r0, r5
  40333c:	b011      	add	sp, #68	; 0x44
  40333e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403342:	4a84      	ldr	r2, [pc, #528]	; (403554 <__ieee754_rem_pio2+0x27c>)
  403344:	4297      	cmp	r7, r2
  403346:	f340 8090 	ble.w	40346a <__ieee754_rem_pio2+0x192>
  40334a:	4a83      	ldr	r2, [pc, #524]	; (403558 <__ieee754_rem_pio2+0x280>)
  40334c:	4297      	cmp	r7, r2
  40334e:	dc65      	bgt.n	40341c <__ieee754_rem_pio2+0x144>
  403350:	153d      	asrs	r5, r7, #20
  403352:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  403356:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  40335a:	4619      	mov	r1, r3
  40335c:	461f      	mov	r7, r3
  40335e:	4606      	mov	r6, r0
  403360:	f001 fd80 	bl	404e64 <__aeabi_d2iz>
  403364:	f001 fa68 	bl	404838 <__aeabi_i2d>
  403368:	4680      	mov	r8, r0
  40336a:	4689      	mov	r9, r1
  40336c:	4602      	mov	r2, r0
  40336e:	460b      	mov	r3, r1
  403370:	4630      	mov	r0, r6
  403372:	4639      	mov	r1, r7
  403374:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  403378:	f001 f910 	bl	40459c <__aeabi_dsub>
  40337c:	2200      	movs	r2, #0
  40337e:	4b77      	ldr	r3, [pc, #476]	; (40355c <__ieee754_rem_pio2+0x284>)
  403380:	f001 fac0 	bl	404904 <__aeabi_dmul>
  403384:	4689      	mov	r9, r1
  403386:	4680      	mov	r8, r0
  403388:	f001 fd6c 	bl	404e64 <__aeabi_d2iz>
  40338c:	f001 fa54 	bl	404838 <__aeabi_i2d>
  403390:	4602      	mov	r2, r0
  403392:	460b      	mov	r3, r1
  403394:	4606      	mov	r6, r0
  403396:	460f      	mov	r7, r1
  403398:	4640      	mov	r0, r8
  40339a:	4649      	mov	r1, r9
  40339c:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  4033a0:	f001 f8fc 	bl	40459c <__aeabi_dsub>
  4033a4:	2200      	movs	r2, #0
  4033a6:	4b6d      	ldr	r3, [pc, #436]	; (40355c <__ieee754_rem_pio2+0x284>)
  4033a8:	f001 faac 	bl	404904 <__aeabi_dmul>
  4033ac:	2200      	movs	r2, #0
  4033ae:	2300      	movs	r3, #0
  4033b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  4033b4:	f001 fd0e 	bl	404dd4 <__aeabi_dcmpeq>
  4033b8:	2800      	cmp	r0, #0
  4033ba:	f000 8173 	beq.w	4036a4 <__ieee754_rem_pio2+0x3cc>
  4033be:	2300      	movs	r3, #0
  4033c0:	4630      	mov	r0, r6
  4033c2:	4639      	mov	r1, r7
  4033c4:	2200      	movs	r2, #0
  4033c6:	f001 fd05 	bl	404dd4 <__aeabi_dcmpeq>
  4033ca:	2800      	cmp	r0, #0
  4033cc:	bf14      	ite	ne
  4033ce:	2301      	movne	r3, #1
  4033d0:	2302      	moveq	r3, #2
  4033d2:	4a63      	ldr	r2, [pc, #396]	; (403560 <__ieee754_rem_pio2+0x288>)
  4033d4:	9201      	str	r2, [sp, #4]
  4033d6:	2102      	movs	r1, #2
  4033d8:	462a      	mov	r2, r5
  4033da:	9100      	str	r1, [sp, #0]
  4033dc:	a80a      	add	r0, sp, #40	; 0x28
  4033de:	4651      	mov	r1, sl
  4033e0:	f000 fac2 	bl	403968 <__kernel_rem_pio2>
  4033e4:	2c00      	cmp	r4, #0
  4033e6:	4605      	mov	r5, r0
  4033e8:	da14      	bge.n	403414 <__ieee754_rem_pio2+0x13c>
  4033ea:	f8da 2004 	ldr.w	r2, [sl, #4]
  4033ee:	f8da 300c 	ldr.w	r3, [sl, #12]
  4033f2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  4033f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4033fa:	4245      	negs	r5, r0
  4033fc:	f8ca 2004 	str.w	r2, [sl, #4]
  403400:	f8ca 300c 	str.w	r3, [sl, #12]
  403404:	e006      	b.n	403414 <__ieee754_rem_pio2+0x13c>
  403406:	e9c2 0100 	strd	r0, r1, [r2]
  40340a:	2500      	movs	r5, #0
  40340c:	2400      	movs	r4, #0
  40340e:	e9c2 4502 	strd	r4, r5, [r2, #8]
  403412:	2500      	movs	r5, #0
  403414:	4628      	mov	r0, r5
  403416:	b011      	add	sp, #68	; 0x44
  403418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40341c:	4602      	mov	r2, r0
  40341e:	460b      	mov	r3, r1
  403420:	f001 f8bc 	bl	40459c <__aeabi_dsub>
  403424:	2500      	movs	r5, #0
  403426:	e9ca 0102 	strd	r0, r1, [sl, #8]
  40342a:	e9ca 0100 	strd	r0, r1, [sl]
  40342e:	e7f1      	b.n	403414 <__ieee754_rem_pio2+0x13c>
  403430:	a33f      	add	r3, pc, #252	; (adr r3, 403530 <__ieee754_rem_pio2+0x258>)
  403432:	e9d3 2300 	ldrd	r2, r3, [r3]
  403436:	f001 f8b1 	bl	40459c <__aeabi_dsub>
  40343a:	a33f      	add	r3, pc, #252	; (adr r3, 403538 <__ieee754_rem_pio2+0x260>)
  40343c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403440:	460d      	mov	r5, r1
  403442:	4604      	mov	r4, r0
  403444:	f001 f8aa 	bl	40459c <__aeabi_dsub>
  403448:	4602      	mov	r2, r0
  40344a:	460b      	mov	r3, r1
  40344c:	e9ca 2300 	strd	r2, r3, [sl]
  403450:	4629      	mov	r1, r5
  403452:	4620      	mov	r0, r4
  403454:	f001 f8a2 	bl	40459c <__aeabi_dsub>
  403458:	a337      	add	r3, pc, #220	; (adr r3, 403538 <__ieee754_rem_pio2+0x260>)
  40345a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40345e:	f001 f89d 	bl	40459c <__aeabi_dsub>
  403462:	2501      	movs	r5, #1
  403464:	e9ca 0102 	strd	r0, r1, [sl, #8]
  403468:	e7d4      	b.n	403414 <__ieee754_rem_pio2+0x13c>
  40346a:	f000 ff7b 	bl	404364 <fabs>
  40346e:	a334      	add	r3, pc, #208	; (adr r3, 403540 <__ieee754_rem_pio2+0x268>)
  403470:	e9d3 2300 	ldrd	r2, r3, [r3]
  403474:	4680      	mov	r8, r0
  403476:	4689      	mov	r9, r1
  403478:	f001 fa44 	bl	404904 <__aeabi_dmul>
  40347c:	2200      	movs	r2, #0
  40347e:	4b39      	ldr	r3, [pc, #228]	; (403564 <__ieee754_rem_pio2+0x28c>)
  403480:	f001 f88e 	bl	4045a0 <__adddf3>
  403484:	f001 fcee 	bl	404e64 <__aeabi_d2iz>
  403488:	4605      	mov	r5, r0
  40348a:	f001 f9d5 	bl	404838 <__aeabi_i2d>
  40348e:	a324      	add	r3, pc, #144	; (adr r3, 403520 <__ieee754_rem_pio2+0x248>)
  403490:	e9d3 2300 	ldrd	r2, r3, [r3]
  403494:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403498:	f001 fa34 	bl	404904 <__aeabi_dmul>
  40349c:	4602      	mov	r2, r0
  40349e:	460b      	mov	r3, r1
  4034a0:	4640      	mov	r0, r8
  4034a2:	4649      	mov	r1, r9
  4034a4:	f001 f87a 	bl	40459c <__aeabi_dsub>
  4034a8:	a31f      	add	r3, pc, #124	; (adr r3, 403528 <__ieee754_rem_pio2+0x250>)
  4034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4034ae:	4680      	mov	r8, r0
  4034b0:	4689      	mov	r9, r1
  4034b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4034b6:	f001 fa25 	bl	404904 <__aeabi_dmul>
  4034ba:	2d1f      	cmp	r5, #31
  4034bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4034c0:	dc54      	bgt.n	40356c <__ieee754_rem_pio2+0x294>
  4034c2:	4b29      	ldr	r3, [pc, #164]	; (403568 <__ieee754_rem_pio2+0x290>)
  4034c4:	1e6a      	subs	r2, r5, #1
  4034c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4034ca:	429f      	cmp	r7, r3
  4034cc:	d04e      	beq.n	40356c <__ieee754_rem_pio2+0x294>
  4034ce:	4602      	mov	r2, r0
  4034d0:	460b      	mov	r3, r1
  4034d2:	4640      	mov	r0, r8
  4034d4:	4649      	mov	r1, r9
  4034d6:	f001 f861 	bl	40459c <__aeabi_dsub>
  4034da:	4602      	mov	r2, r0
  4034dc:	460b      	mov	r3, r1
  4034de:	e9ca 2300 	strd	r2, r3, [sl]
  4034e2:	4683      	mov	fp, r0
  4034e4:	460e      	mov	r6, r1
  4034e6:	465a      	mov	r2, fp
  4034e8:	4633      	mov	r3, r6
  4034ea:	4640      	mov	r0, r8
  4034ec:	4649      	mov	r1, r9
  4034ee:	f001 f855 	bl	40459c <__aeabi_dsub>
  4034f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4034f6:	f001 f851 	bl	40459c <__aeabi_dsub>
  4034fa:	2c00      	cmp	r4, #0
  4034fc:	4602      	mov	r2, r0
  4034fe:	460b      	mov	r3, r1
  403500:	e9ca 2302 	strd	r2, r3, [sl, #8]
  403504:	da86      	bge.n	403414 <__ieee754_rem_pio2+0x13c>
  403506:	465b      	mov	r3, fp
  403508:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  40350c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403510:	e88a 0048 	stmia.w	sl, {r3, r6}
  403514:	f8ca 100c 	str.w	r1, [sl, #12]
  403518:	f8ca 0008 	str.w	r0, [sl, #8]
  40351c:	426d      	negs	r5, r5
  40351e:	e779      	b.n	403414 <__ieee754_rem_pio2+0x13c>
  403520:	54400000 	.word	0x54400000
  403524:	3ff921fb 	.word	0x3ff921fb
  403528:	1a626331 	.word	0x1a626331
  40352c:	3dd0b461 	.word	0x3dd0b461
  403530:	1a600000 	.word	0x1a600000
  403534:	3dd0b461 	.word	0x3dd0b461
  403538:	2e037073 	.word	0x2e037073
  40353c:	3ba3198a 	.word	0x3ba3198a
  403540:	6dc9c883 	.word	0x6dc9c883
  403544:	3fe45f30 	.word	0x3fe45f30
  403548:	3fe921fb 	.word	0x3fe921fb
  40354c:	4002d97b 	.word	0x4002d97b
  403550:	3ff921fb 	.word	0x3ff921fb
  403554:	413921fb 	.word	0x413921fb
  403558:	7fefffff 	.word	0x7fefffff
  40355c:	41700000 	.word	0x41700000
  403560:	00407f40 	.word	0x00407f40
  403564:	3fe00000 	.word	0x3fe00000
  403568:	00407ec0 	.word	0x00407ec0
  40356c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403570:	4640      	mov	r0, r8
  403572:	4649      	mov	r1, r9
  403574:	f001 f812 	bl	40459c <__aeabi_dsub>
  403578:	153a      	asrs	r2, r7, #20
  40357a:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40357e:	1ad3      	subs	r3, r2, r3
  403580:	2b10      	cmp	r3, #16
  403582:	4683      	mov	fp, r0
  403584:	460e      	mov	r6, r1
  403586:	9209      	str	r2, [sp, #36]	; 0x24
  403588:	e9ca 0100 	strd	r0, r1, [sl]
  40358c:	ddab      	ble.n	4034e6 <__ieee754_rem_pio2+0x20e>
  40358e:	a358      	add	r3, pc, #352	; (adr r3, 4036f0 <__ieee754_rem_pio2+0x418>)
  403590:	e9d3 2300 	ldrd	r2, r3, [r3]
  403594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403598:	f001 f9b4 	bl	404904 <__aeabi_dmul>
  40359c:	4606      	mov	r6, r0
  40359e:	460f      	mov	r7, r1
  4035a0:	4602      	mov	r2, r0
  4035a2:	460b      	mov	r3, r1
  4035a4:	4640      	mov	r0, r8
  4035a6:	4649      	mov	r1, r9
  4035a8:	f000 fff8 	bl	40459c <__aeabi_dsub>
  4035ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4035b0:	4602      	mov	r2, r0
  4035b2:	460b      	mov	r3, r1
  4035b4:	4640      	mov	r0, r8
  4035b6:	4649      	mov	r1, r9
  4035b8:	f000 fff0 	bl	40459c <__aeabi_dsub>
  4035bc:	4632      	mov	r2, r6
  4035be:	463b      	mov	r3, r7
  4035c0:	f000 ffec 	bl	40459c <__aeabi_dsub>
  4035c4:	a34c      	add	r3, pc, #304	; (adr r3, 4036f8 <__ieee754_rem_pio2+0x420>)
  4035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4035ca:	4606      	mov	r6, r0
  4035cc:	460f      	mov	r7, r1
  4035ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4035d2:	f001 f997 	bl	404904 <__aeabi_dmul>
  4035d6:	4632      	mov	r2, r6
  4035d8:	463b      	mov	r3, r7
  4035da:	f000 ffdf 	bl	40459c <__aeabi_dsub>
  4035de:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4035e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4035e6:	4602      	mov	r2, r0
  4035e8:	460b      	mov	r3, r1
  4035ea:	4640      	mov	r0, r8
  4035ec:	4649      	mov	r1, r9
  4035ee:	f000 ffd5 	bl	40459c <__aeabi_dsub>
  4035f2:	460b      	mov	r3, r1
  4035f4:	f3c1 570a 	ubfx	r7, r1, #20, #11
  4035f8:	460e      	mov	r6, r1
  4035fa:	9909      	ldr	r1, [sp, #36]	; 0x24
  4035fc:	1bcf      	subs	r7, r1, r7
  4035fe:	4602      	mov	r2, r0
  403600:	2f31      	cmp	r7, #49	; 0x31
  403602:	4683      	mov	fp, r0
  403604:	e9ca 2300 	strd	r2, r3, [sl]
  403608:	dd6c      	ble.n	4036e4 <__ieee754_rem_pio2+0x40c>
  40360a:	a33d      	add	r3, pc, #244	; (adr r3, 403700 <__ieee754_rem_pio2+0x428>)
  40360c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403614:	f001 f976 	bl	404904 <__aeabi_dmul>
  403618:	4606      	mov	r6, r0
  40361a:	460f      	mov	r7, r1
  40361c:	4602      	mov	r2, r0
  40361e:	460b      	mov	r3, r1
  403620:	4640      	mov	r0, r8
  403622:	4649      	mov	r1, r9
  403624:	e9cd 8906 	strd	r8, r9, [sp, #24]
  403628:	f000 ffb8 	bl	40459c <__aeabi_dsub>
  40362c:	4602      	mov	r2, r0
  40362e:	460b      	mov	r3, r1
  403630:	4680      	mov	r8, r0
  403632:	4689      	mov	r9, r1
  403634:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  403638:	f000 ffb0 	bl	40459c <__aeabi_dsub>
  40363c:	4632      	mov	r2, r6
  40363e:	463b      	mov	r3, r7
  403640:	f000 ffac 	bl	40459c <__aeabi_dsub>
  403644:	a330      	add	r3, pc, #192	; (adr r3, 403708 <__ieee754_rem_pio2+0x430>)
  403646:	e9d3 2300 	ldrd	r2, r3, [r3]
  40364a:	4606      	mov	r6, r0
  40364c:	460f      	mov	r7, r1
  40364e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403652:	f001 f957 	bl	404904 <__aeabi_dmul>
  403656:	4632      	mov	r2, r6
  403658:	463b      	mov	r3, r7
  40365a:	f000 ff9f 	bl	40459c <__aeabi_dsub>
  40365e:	4602      	mov	r2, r0
  403660:	460b      	mov	r3, r1
  403662:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403666:	e734      	b.n	4034d2 <__ieee754_rem_pio2+0x1fa>
  403668:	f000 ff9a 	bl	4045a0 <__adddf3>
  40366c:	4b2a      	ldr	r3, [pc, #168]	; (403718 <__ieee754_rem_pio2+0x440>)
  40366e:	429f      	cmp	r7, r3
  403670:	4604      	mov	r4, r0
  403672:	460d      	mov	r5, r1
  403674:	d018      	beq.n	4036a8 <__ieee754_rem_pio2+0x3d0>
  403676:	a326      	add	r3, pc, #152	; (adr r3, 403710 <__ieee754_rem_pio2+0x438>)
  403678:	e9d3 2300 	ldrd	r2, r3, [r3]
  40367c:	f000 ff90 	bl	4045a0 <__adddf3>
  403680:	4602      	mov	r2, r0
  403682:	460b      	mov	r3, r1
  403684:	e9ca 2300 	strd	r2, r3, [sl]
  403688:	4629      	mov	r1, r5
  40368a:	4620      	mov	r0, r4
  40368c:	f000 ff86 	bl	40459c <__aeabi_dsub>
  403690:	a31f      	add	r3, pc, #124	; (adr r3, 403710 <__ieee754_rem_pio2+0x438>)
  403692:	e9d3 2300 	ldrd	r2, r3, [r3]
  403696:	f000 ff83 	bl	4045a0 <__adddf3>
  40369a:	f04f 35ff 	mov.w	r5, #4294967295
  40369e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4036a2:	e6b7      	b.n	403414 <__ieee754_rem_pio2+0x13c>
  4036a4:	2303      	movs	r3, #3
  4036a6:	e694      	b.n	4033d2 <__ieee754_rem_pio2+0xfa>
  4036a8:	a311      	add	r3, pc, #68	; (adr r3, 4036f0 <__ieee754_rem_pio2+0x418>)
  4036aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4036ae:	f000 ff77 	bl	4045a0 <__adddf3>
  4036b2:	a311      	add	r3, pc, #68	; (adr r3, 4036f8 <__ieee754_rem_pio2+0x420>)
  4036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4036b8:	460d      	mov	r5, r1
  4036ba:	4604      	mov	r4, r0
  4036bc:	f000 ff70 	bl	4045a0 <__adddf3>
  4036c0:	4602      	mov	r2, r0
  4036c2:	460b      	mov	r3, r1
  4036c4:	e9ca 2300 	strd	r2, r3, [sl]
  4036c8:	4629      	mov	r1, r5
  4036ca:	4620      	mov	r0, r4
  4036cc:	f000 ff66 	bl	40459c <__aeabi_dsub>
  4036d0:	a309      	add	r3, pc, #36	; (adr r3, 4036f8 <__ieee754_rem_pio2+0x420>)
  4036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4036d6:	f000 ff63 	bl	4045a0 <__adddf3>
  4036da:	f04f 35ff 	mov.w	r5, #4294967295
  4036de:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4036e2:	e697      	b.n	403414 <__ieee754_rem_pio2+0x13c>
  4036e4:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4036e8:	e6fd      	b.n	4034e6 <__ieee754_rem_pio2+0x20e>
  4036ea:	bf00      	nop
  4036ec:	f3af 8000 	nop.w
  4036f0:	1a600000 	.word	0x1a600000
  4036f4:	3dd0b461 	.word	0x3dd0b461
  4036f8:	2e037073 	.word	0x2e037073
  4036fc:	3ba3198a 	.word	0x3ba3198a
  403700:	2e000000 	.word	0x2e000000
  403704:	3ba3198a 	.word	0x3ba3198a
  403708:	252049c1 	.word	0x252049c1
  40370c:	397b839a 	.word	0x397b839a
  403710:	1a626331 	.word	0x1a626331
  403714:	3dd0b461 	.word	0x3dd0b461
  403718:	3ff921fb 	.word	0x3ff921fb
  40371c:	00000000 	.word	0x00000000

00403720 <__kernel_cos>:
  403720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403724:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  403728:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  40372c:	b085      	sub	sp, #20
  40372e:	460c      	mov	r4, r1
  403730:	4692      	mov	sl, r2
  403732:	469b      	mov	fp, r3
  403734:	4605      	mov	r5, r0
  403736:	da6b      	bge.n	403810 <__kernel_cos+0xf0>
  403738:	f001 fb94 	bl	404e64 <__aeabi_d2iz>
  40373c:	2800      	cmp	r0, #0
  40373e:	f000 80e8 	beq.w	403912 <__kernel_cos+0x1f2>
  403742:	462a      	mov	r2, r5
  403744:	4623      	mov	r3, r4
  403746:	4628      	mov	r0, r5
  403748:	4621      	mov	r1, r4
  40374a:	f001 f8db 	bl	404904 <__aeabi_dmul>
  40374e:	a374      	add	r3, pc, #464	; (adr r3, 403920 <__kernel_cos+0x200>)
  403750:	e9d3 2300 	ldrd	r2, r3, [r3]
  403754:	4680      	mov	r8, r0
  403756:	4689      	mov	r9, r1
  403758:	f001 f8d4 	bl	404904 <__aeabi_dmul>
  40375c:	a372      	add	r3, pc, #456	; (adr r3, 403928 <__kernel_cos+0x208>)
  40375e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403762:	f000 ff1d 	bl	4045a0 <__adddf3>
  403766:	4642      	mov	r2, r8
  403768:	464b      	mov	r3, r9
  40376a:	f001 f8cb 	bl	404904 <__aeabi_dmul>
  40376e:	a370      	add	r3, pc, #448	; (adr r3, 403930 <__kernel_cos+0x210>)
  403770:	e9d3 2300 	ldrd	r2, r3, [r3]
  403774:	f000 ff12 	bl	40459c <__aeabi_dsub>
  403778:	4642      	mov	r2, r8
  40377a:	464b      	mov	r3, r9
  40377c:	f001 f8c2 	bl	404904 <__aeabi_dmul>
  403780:	a36d      	add	r3, pc, #436	; (adr r3, 403938 <__kernel_cos+0x218>)
  403782:	e9d3 2300 	ldrd	r2, r3, [r3]
  403786:	f000 ff0b 	bl	4045a0 <__adddf3>
  40378a:	4642      	mov	r2, r8
  40378c:	464b      	mov	r3, r9
  40378e:	f001 f8b9 	bl	404904 <__aeabi_dmul>
  403792:	a36b      	add	r3, pc, #428	; (adr r3, 403940 <__kernel_cos+0x220>)
  403794:	e9d3 2300 	ldrd	r2, r3, [r3]
  403798:	f000 ff00 	bl	40459c <__aeabi_dsub>
  40379c:	4642      	mov	r2, r8
  40379e:	464b      	mov	r3, r9
  4037a0:	f001 f8b0 	bl	404904 <__aeabi_dmul>
  4037a4:	a368      	add	r3, pc, #416	; (adr r3, 403948 <__kernel_cos+0x228>)
  4037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4037aa:	f000 fef9 	bl	4045a0 <__adddf3>
  4037ae:	4642      	mov	r2, r8
  4037b0:	464b      	mov	r3, r9
  4037b2:	f001 f8a7 	bl	404904 <__aeabi_dmul>
  4037b6:	e9cd 0100 	strd	r0, r1, [sp]
  4037ba:	2200      	movs	r2, #0
  4037bc:	4b64      	ldr	r3, [pc, #400]	; (403950 <__kernel_cos+0x230>)
  4037be:	4640      	mov	r0, r8
  4037c0:	4649      	mov	r1, r9
  4037c2:	f001 f89f 	bl	404904 <__aeabi_dmul>
  4037c6:	e9dd 2300 	ldrd	r2, r3, [sp]
  4037ca:	4606      	mov	r6, r0
  4037cc:	460f      	mov	r7, r1
  4037ce:	4640      	mov	r0, r8
  4037d0:	4649      	mov	r1, r9
  4037d2:	f001 f897 	bl	404904 <__aeabi_dmul>
  4037d6:	4652      	mov	r2, sl
  4037d8:	4680      	mov	r8, r0
  4037da:	4689      	mov	r9, r1
  4037dc:	465b      	mov	r3, fp
  4037de:	4628      	mov	r0, r5
  4037e0:	4621      	mov	r1, r4
  4037e2:	f001 f88f 	bl	404904 <__aeabi_dmul>
  4037e6:	4602      	mov	r2, r0
  4037e8:	460b      	mov	r3, r1
  4037ea:	4640      	mov	r0, r8
  4037ec:	4649      	mov	r1, r9
  4037ee:	f000 fed5 	bl	40459c <__aeabi_dsub>
  4037f2:	4602      	mov	r2, r0
  4037f4:	460b      	mov	r3, r1
  4037f6:	4630      	mov	r0, r6
  4037f8:	4639      	mov	r1, r7
  4037fa:	f000 fecf 	bl	40459c <__aeabi_dsub>
  4037fe:	4602      	mov	r2, r0
  403800:	460b      	mov	r3, r1
  403802:	2000      	movs	r0, #0
  403804:	4953      	ldr	r1, [pc, #332]	; (403954 <__kernel_cos+0x234>)
  403806:	f000 fec9 	bl	40459c <__aeabi_dsub>
  40380a:	b005      	add	sp, #20
  40380c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403810:	4602      	mov	r2, r0
  403812:	460b      	mov	r3, r1
  403814:	f001 f876 	bl	404904 <__aeabi_dmul>
  403818:	a341      	add	r3, pc, #260	; (adr r3, 403920 <__kernel_cos+0x200>)
  40381a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40381e:	4680      	mov	r8, r0
  403820:	4689      	mov	r9, r1
  403822:	f001 f86f 	bl	404904 <__aeabi_dmul>
  403826:	a340      	add	r3, pc, #256	; (adr r3, 403928 <__kernel_cos+0x208>)
  403828:	e9d3 2300 	ldrd	r2, r3, [r3]
  40382c:	f000 feb8 	bl	4045a0 <__adddf3>
  403830:	4642      	mov	r2, r8
  403832:	464b      	mov	r3, r9
  403834:	f001 f866 	bl	404904 <__aeabi_dmul>
  403838:	a33d      	add	r3, pc, #244	; (adr r3, 403930 <__kernel_cos+0x210>)
  40383a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40383e:	f000 fead 	bl	40459c <__aeabi_dsub>
  403842:	4642      	mov	r2, r8
  403844:	464b      	mov	r3, r9
  403846:	f001 f85d 	bl	404904 <__aeabi_dmul>
  40384a:	a33b      	add	r3, pc, #236	; (adr r3, 403938 <__kernel_cos+0x218>)
  40384c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403850:	f000 fea6 	bl	4045a0 <__adddf3>
  403854:	4642      	mov	r2, r8
  403856:	464b      	mov	r3, r9
  403858:	f001 f854 	bl	404904 <__aeabi_dmul>
  40385c:	a338      	add	r3, pc, #224	; (adr r3, 403940 <__kernel_cos+0x220>)
  40385e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403862:	f000 fe9b 	bl	40459c <__aeabi_dsub>
  403866:	4642      	mov	r2, r8
  403868:	464b      	mov	r3, r9
  40386a:	f001 f84b 	bl	404904 <__aeabi_dmul>
  40386e:	a336      	add	r3, pc, #216	; (adr r3, 403948 <__kernel_cos+0x228>)
  403870:	e9d3 2300 	ldrd	r2, r3, [r3]
  403874:	f000 fe94 	bl	4045a0 <__adddf3>
  403878:	464b      	mov	r3, r9
  40387a:	4642      	mov	r2, r8
  40387c:	f001 f842 	bl	404904 <__aeabi_dmul>
  403880:	4b35      	ldr	r3, [pc, #212]	; (403958 <__kernel_cos+0x238>)
  403882:	429e      	cmp	r6, r3
  403884:	e9cd 0100 	strd	r0, r1, [sp]
  403888:	dd97      	ble.n	4037ba <__kernel_cos+0x9a>
  40388a:	4b34      	ldr	r3, [pc, #208]	; (40395c <__kernel_cos+0x23c>)
  40388c:	429e      	cmp	r6, r3
  40388e:	f04f 0200 	mov.w	r2, #0
  403892:	dc38      	bgt.n	403906 <__kernel_cos+0x1e6>
  403894:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  403898:	2000      	movs	r0, #0
  40389a:	492e      	ldr	r1, [pc, #184]	; (403954 <__kernel_cos+0x234>)
  40389c:	4616      	mov	r6, r2
  40389e:	461f      	mov	r7, r3
  4038a0:	f000 fe7c 	bl	40459c <__aeabi_dsub>
  4038a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4038a8:	2200      	movs	r2, #0
  4038aa:	4b29      	ldr	r3, [pc, #164]	; (403950 <__kernel_cos+0x230>)
  4038ac:	4640      	mov	r0, r8
  4038ae:	4649      	mov	r1, r9
  4038b0:	f001 f828 	bl	404904 <__aeabi_dmul>
  4038b4:	4632      	mov	r2, r6
  4038b6:	463b      	mov	r3, r7
  4038b8:	f000 fe70 	bl	40459c <__aeabi_dsub>
  4038bc:	e9dd 2300 	ldrd	r2, r3, [sp]
  4038c0:	4606      	mov	r6, r0
  4038c2:	460f      	mov	r7, r1
  4038c4:	4640      	mov	r0, r8
  4038c6:	4649      	mov	r1, r9
  4038c8:	f001 f81c 	bl	404904 <__aeabi_dmul>
  4038cc:	4652      	mov	r2, sl
  4038ce:	4680      	mov	r8, r0
  4038d0:	4689      	mov	r9, r1
  4038d2:	465b      	mov	r3, fp
  4038d4:	4628      	mov	r0, r5
  4038d6:	4621      	mov	r1, r4
  4038d8:	f001 f814 	bl	404904 <__aeabi_dmul>
  4038dc:	4602      	mov	r2, r0
  4038de:	460b      	mov	r3, r1
  4038e0:	4640      	mov	r0, r8
  4038e2:	4649      	mov	r1, r9
  4038e4:	f000 fe5a 	bl	40459c <__aeabi_dsub>
  4038e8:	4602      	mov	r2, r0
  4038ea:	460b      	mov	r3, r1
  4038ec:	4630      	mov	r0, r6
  4038ee:	4639      	mov	r1, r7
  4038f0:	f000 fe54 	bl	40459c <__aeabi_dsub>
  4038f4:	4602      	mov	r2, r0
  4038f6:	460b      	mov	r3, r1
  4038f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4038fc:	f000 fe4e 	bl	40459c <__aeabi_dsub>
  403900:	b005      	add	sp, #20
  403902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403906:	4b16      	ldr	r3, [pc, #88]	; (403960 <__kernel_cos+0x240>)
  403908:	4f16      	ldr	r7, [pc, #88]	; (403964 <__kernel_cos+0x244>)
  40390a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40390e:	2600      	movs	r6, #0
  403910:	e7ca      	b.n	4038a8 <__kernel_cos+0x188>
  403912:	4910      	ldr	r1, [pc, #64]	; (403954 <__kernel_cos+0x234>)
  403914:	2000      	movs	r0, #0
  403916:	b005      	add	sp, #20
  403918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40391c:	f3af 8000 	nop.w
  403920:	be8838d4 	.word	0xbe8838d4
  403924:	bda8fae9 	.word	0xbda8fae9
  403928:	bdb4b1c4 	.word	0xbdb4b1c4
  40392c:	3e21ee9e 	.word	0x3e21ee9e
  403930:	809c52ad 	.word	0x809c52ad
  403934:	3e927e4f 	.word	0x3e927e4f
  403938:	19cb1590 	.word	0x19cb1590
  40393c:	3efa01a0 	.word	0x3efa01a0
  403940:	16c15177 	.word	0x16c15177
  403944:	3f56c16c 	.word	0x3f56c16c
  403948:	5555554c 	.word	0x5555554c
  40394c:	3fa55555 	.word	0x3fa55555
  403950:	3fe00000 	.word	0x3fe00000
  403954:	3ff00000 	.word	0x3ff00000
  403958:	3fd33332 	.word	0x3fd33332
  40395c:	3fe90000 	.word	0x3fe90000
  403960:	3fe70000 	.word	0x3fe70000
  403964:	3fd20000 	.word	0x3fd20000

00403968 <__kernel_rem_pio2>:
  403968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40396c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
  403970:	4c9c      	ldr	r4, [pc, #624]	; (403be4 <__kernel_rem_pio2+0x27c>)
  403972:	9ea2      	ldr	r6, [sp, #648]	; 0x288
  403974:	4d9c      	ldr	r5, [pc, #624]	; (403be8 <__kernel_rem_pio2+0x280>)
  403976:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  40397a:	9405      	str	r4, [sp, #20]
  40397c:	4626      	mov	r6, r4
  40397e:	1ed4      	subs	r4, r2, #3
  403980:	fb85 7504 	smull	r7, r5, r5, r4
  403984:	17e4      	asrs	r4, r4, #31
  403986:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  40398a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  40398e:	461d      	mov	r5, r3
  403990:	9308      	str	r3, [sp, #32]
  403992:	1c63      	adds	r3, r4, #1
  403994:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  403998:	3d01      	subs	r5, #1
  40399a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40399e:	9304      	str	r3, [sp, #16]
  4039a0:	462b      	mov	r3, r5
  4039a2:	9409      	str	r4, [sp, #36]	; 0x24
  4039a4:	9502      	str	r5, [sp, #8]
  4039a6:	1b65      	subs	r5, r4, r5
  4039a8:	18f4      	adds	r4, r6, r3
  4039aa:	9003      	str	r0, [sp, #12]
  4039ac:	9106      	str	r1, [sp, #24]
  4039ae:	d41a      	bmi.n	4039e6 <__kernel_rem_pio2+0x7e>
  4039b0:	442c      	add	r4, r5
  4039b2:	3401      	adds	r4, #1
  4039b4:	f10d 0878 	add.w	r8, sp, #120	; 0x78
  4039b8:	2600      	movs	r6, #0
  4039ba:	2700      	movs	r7, #0
  4039bc:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
  4039c0:	e008      	b.n	4039d4 <__kernel_rem_pio2+0x6c>
  4039c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
  4039c6:	f000 ff37 	bl	404838 <__aeabi_i2d>
  4039ca:	3501      	adds	r5, #1
  4039cc:	42a5      	cmp	r5, r4
  4039ce:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  4039d2:	d008      	beq.n	4039e6 <__kernel_rem_pio2+0x7e>
  4039d4:	2d00      	cmp	r5, #0
  4039d6:	daf4      	bge.n	4039c2 <__kernel_rem_pio2+0x5a>
  4039d8:	3501      	adds	r5, #1
  4039da:	4630      	mov	r0, r6
  4039dc:	4639      	mov	r1, r7
  4039de:	42a5      	cmp	r5, r4
  4039e0:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  4039e4:	d1f6      	bne.n	4039d4 <__kernel_rem_pio2+0x6c>
  4039e6:	9b05      	ldr	r3, [sp, #20]
  4039e8:	2b00      	cmp	r3, #0
  4039ea:	db2e      	blt.n	403a4a <__kernel_rem_pio2+0xe2>
  4039ec:	9b08      	ldr	r3, [sp, #32]
  4039ee:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  4039f2:	9b03      	ldr	r3, [sp, #12]
  4039f4:	f1a9 0808 	sub.w	r8, r9, #8
  4039f8:	4498      	add	r8, r3
  4039fa:	ab20      	add	r3, sp, #128	; 0x80
  4039fc:	4499      	add	r9, r3
  4039fe:	9b05      	ldr	r3, [sp, #20]
  403a00:	aa70      	add	r2, sp, #448	; 0x1c0
  403a02:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
  403a06:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  403a0a:	9b02      	ldr	r3, [sp, #8]
  403a0c:	2b00      	cmp	r3, #0
  403a0e:	f2c0 830f 	blt.w	404030 <__kernel_rem_pio2+0x6c8>
  403a12:	9b03      	ldr	r3, [sp, #12]
  403a14:	464d      	mov	r5, r9
  403a16:	f1a3 0408 	sub.w	r4, r3, #8
  403a1a:	2600      	movs	r6, #0
  403a1c:	2700      	movs	r7, #0
  403a1e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  403a22:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  403a26:	f000 ff6d 	bl	404904 <__aeabi_dmul>
  403a2a:	4602      	mov	r2, r0
  403a2c:	460b      	mov	r3, r1
  403a2e:	4630      	mov	r0, r6
  403a30:	4639      	mov	r1, r7
  403a32:	f000 fdb5 	bl	4045a0 <__adddf3>
  403a36:	4544      	cmp	r4, r8
  403a38:	4606      	mov	r6, r0
  403a3a:	460f      	mov	r7, r1
  403a3c:	d1ef      	bne.n	403a1e <__kernel_rem_pio2+0xb6>
  403a3e:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  403a42:	45da      	cmp	sl, fp
  403a44:	f109 0908 	add.w	r9, r9, #8
  403a48:	d1df      	bne.n	403a0a <__kernel_rem_pio2+0xa2>
  403a4a:	9805      	ldr	r0, [sp, #20]
  403a4c:	9a08      	ldr	r2, [sp, #32]
  403a4e:	9000      	str	r0, [sp, #0]
  403a50:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  403a54:	3b01      	subs	r3, #1
  403a56:	009b      	lsls	r3, r3, #2
  403a58:	ac0c      	add	r4, sp, #48	; 0x30
  403a5a:	1f19      	subs	r1, r3, #4
  403a5c:	4423      	add	r3, r4
  403a5e:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
  403a62:	930b      	str	r3, [sp, #44]	; 0x2c
  403a64:	9b03      	ldr	r3, [sp, #12]
  403a66:	3a01      	subs	r2, #1
  403a68:	4421      	add	r1, r4
  403a6a:	910a      	str	r1, [sp, #40]	; 0x28
  403a6c:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
  403a70:	9a00      	ldr	r2, [sp, #0]
  403a72:	a998      	add	r1, sp, #608	; 0x260
  403a74:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  403a78:	2a00      	cmp	r2, #0
  403a7a:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
  403a7e:	4613      	mov	r3, r2
  403a80:	dd2b      	ble.n	403ada <__kernel_rem_pio2+0x172>
  403a82:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  403a86:	f1a8 08a8 	sub.w	r8, r8, #168	; 0xa8
  403a8a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  403a8e:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  403a92:	2200      	movs	r2, #0
  403a94:	4b55      	ldr	r3, [pc, #340]	; (403bec <__kernel_rem_pio2+0x284>)
  403a96:	4620      	mov	r0, r4
  403a98:	4629      	mov	r1, r5
  403a9a:	f000 ff33 	bl	404904 <__aeabi_dmul>
  403a9e:	f001 f9e1 	bl	404e64 <__aeabi_d2iz>
  403aa2:	f000 fec9 	bl	404838 <__aeabi_i2d>
  403aa6:	2200      	movs	r2, #0
  403aa8:	4b51      	ldr	r3, [pc, #324]	; (403bf0 <__kernel_rem_pio2+0x288>)
  403aaa:	4606      	mov	r6, r0
  403aac:	460f      	mov	r7, r1
  403aae:	f000 ff29 	bl	404904 <__aeabi_dmul>
  403ab2:	4602      	mov	r2, r0
  403ab4:	460b      	mov	r3, r1
  403ab6:	4620      	mov	r0, r4
  403ab8:	4629      	mov	r1, r5
  403aba:	f000 fd6f 	bl	40459c <__aeabi_dsub>
  403abe:	f001 f9d1 	bl	404e64 <__aeabi_d2iz>
  403ac2:	e878 2302 	ldrd	r2, r3, [r8], #-8
  403ac6:	f849 0f04 	str.w	r0, [r9, #4]!
  403aca:	4639      	mov	r1, r7
  403acc:	4630      	mov	r0, r6
  403ace:	f000 fd67 	bl	4045a0 <__adddf3>
  403ad2:	45d0      	cmp	r8, sl
  403ad4:	4604      	mov	r4, r0
  403ad6:	460d      	mov	r5, r1
  403ad8:	d1db      	bne.n	403a92 <__kernel_rem_pio2+0x12a>
  403ada:	f8dd 9010 	ldr.w	r9, [sp, #16]
  403ade:	4620      	mov	r0, r4
  403ae0:	4629      	mov	r1, r5
  403ae2:	464a      	mov	r2, r9
  403ae4:	f000 fcd0 	bl	404488 <scalbn>
  403ae8:	2200      	movs	r2, #0
  403aea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  403aee:	4604      	mov	r4, r0
  403af0:	460d      	mov	r5, r1
  403af2:	f000 ff07 	bl	404904 <__aeabi_dmul>
  403af6:	f000 fc3b 	bl	404370 <floor>
  403afa:	2200      	movs	r2, #0
  403afc:	4b3d      	ldr	r3, [pc, #244]	; (403bf4 <__kernel_rem_pio2+0x28c>)
  403afe:	f000 ff01 	bl	404904 <__aeabi_dmul>
  403b02:	4602      	mov	r2, r0
  403b04:	460b      	mov	r3, r1
  403b06:	4620      	mov	r0, r4
  403b08:	4629      	mov	r1, r5
  403b0a:	f000 fd47 	bl	40459c <__aeabi_dsub>
  403b0e:	460d      	mov	r5, r1
  403b10:	4604      	mov	r4, r0
  403b12:	f001 f9a7 	bl	404e64 <__aeabi_d2iz>
  403b16:	4680      	mov	r8, r0
  403b18:	f000 fe8e 	bl	404838 <__aeabi_i2d>
  403b1c:	460b      	mov	r3, r1
  403b1e:	4602      	mov	r2, r0
  403b20:	4629      	mov	r1, r5
  403b22:	4620      	mov	r0, r4
  403b24:	f000 fd3a 	bl	40459c <__aeabi_dsub>
  403b28:	464b      	mov	r3, r9
  403b2a:	2b00      	cmp	r3, #0
  403b2c:	4606      	mov	r6, r0
  403b2e:	460f      	mov	r7, r1
  403b30:	f340 80f7 	ble.w	403d22 <__kernel_rem_pio2+0x3ba>
  403b34:	9a00      	ldr	r2, [sp, #0]
  403b36:	a90c      	add	r1, sp, #48	; 0x30
  403b38:	3a01      	subs	r2, #1
  403b3a:	f1c9 0318 	rsb	r3, r9, #24
  403b3e:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
  403b42:	fa45 f103 	asr.w	r1, r5, r3
  403b46:	fa01 f303 	lsl.w	r3, r1, r3
  403b4a:	a80c      	add	r0, sp, #48	; 0x30
  403b4c:	1aeb      	subs	r3, r5, r3
  403b4e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  403b52:	f1c9 0517 	rsb	r5, r9, #23
  403b56:	4488      	add	r8, r1
  403b58:	fa43 f505 	asr.w	r5, r3, r5
  403b5c:	2d00      	cmp	r5, #0
  403b5e:	dd63      	ble.n	403c28 <__kernel_rem_pio2+0x2c0>
  403b60:	9b00      	ldr	r3, [sp, #0]
  403b62:	2b00      	cmp	r3, #0
  403b64:	f108 0801 	add.w	r8, r8, #1
  403b68:	f340 8281 	ble.w	40406e <__kernel_rem_pio2+0x706>
  403b6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403b6e:	2c00      	cmp	r4, #0
  403b70:	f000 8318 	beq.w	4041a4 <__kernel_rem_pio2+0x83c>
  403b74:	2001      	movs	r0, #1
  403b76:	2300      	movs	r3, #0
  403b78:	aa0c      	add	r2, sp, #48	; 0x30
  403b7a:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
  403b7e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  403b82:	9a00      	ldr	r2, [sp, #0]
  403b84:	4282      	cmp	r2, r0
  403b86:	dd19      	ble.n	403bbc <__kernel_rem_pio2+0x254>
  403b88:	aa0c      	add	r2, sp, #48	; 0x30
  403b8a:	ac0c      	add	r4, sp, #48	; 0x30
  403b8c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
  403b90:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  403b94:	1a51      	subs	r1, r2, r1
  403b96:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
  403b9a:	9900      	ldr	r1, [sp, #0]
  403b9c:	3302      	adds	r3, #2
  403b9e:	4299      	cmp	r1, r3
  403ba0:	dd0c      	ble.n	403bbc <__kernel_rem_pio2+0x254>
  403ba2:	4610      	mov	r0, r2
  403ba4:	9a00      	ldr	r2, [sp, #0]
  403ba6:	a90c      	add	r1, sp, #48	; 0x30
  403ba8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  403bac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  403bb0:	681a      	ldr	r2, [r3, #0]
  403bb2:	1a82      	subs	r2, r0, r2
  403bb4:	f843 2b04 	str.w	r2, [r3], #4
  403bb8:	428b      	cmp	r3, r1
  403bba:	d1f9      	bne.n	403bb0 <__kernel_rem_pio2+0x248>
  403bbc:	9b04      	ldr	r3, [sp, #16]
  403bbe:	2b00      	cmp	r3, #0
  403bc0:	dd1a      	ble.n	403bf8 <__kernel_rem_pio2+0x290>
  403bc2:	9b04      	ldr	r3, [sp, #16]
  403bc4:	2b01      	cmp	r3, #1
  403bc6:	f04f 0401 	mov.w	r4, #1
  403bca:	f040 8258 	bne.w	40407e <__kernel_rem_pio2+0x716>
  403bce:	9b00      	ldr	r3, [sp, #0]
  403bd0:	1e5a      	subs	r2, r3, #1
  403bd2:	ab0c      	add	r3, sp, #48	; 0x30
  403bd4:	a90c      	add	r1, sp, #48	; 0x30
  403bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403bda:	f3c3 0316 	ubfx	r3, r3, #0, #23
  403bde:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  403be2:	e258      	b.n	404096 <__kernel_rem_pio2+0x72e>
  403be4:	00408088 	.word	0x00408088
  403be8:	2aaaaaab 	.word	0x2aaaaaab
  403bec:	3e700000 	.word	0x3e700000
  403bf0:	41700000 	.word	0x41700000
  403bf4:	40200000 	.word	0x40200000
  403bf8:	2d02      	cmp	r5, #2
  403bfa:	d115      	bne.n	403c28 <__kernel_rem_pio2+0x2c0>
  403bfc:	4632      	mov	r2, r6
  403bfe:	463b      	mov	r3, r7
  403c00:	2000      	movs	r0, #0
  403c02:	4997      	ldr	r1, [pc, #604]	; (403e60 <__kernel_rem_pio2+0x4f8>)
  403c04:	f000 fcca 	bl	40459c <__aeabi_dsub>
  403c08:	4606      	mov	r6, r0
  403c0a:	460f      	mov	r7, r1
  403c0c:	9a04      	ldr	r2, [sp, #16]
  403c0e:	4994      	ldr	r1, [pc, #592]	; (403e60 <__kernel_rem_pio2+0x4f8>)
  403c10:	2000      	movs	r0, #0
  403c12:	f000 fc39 	bl	404488 <scalbn>
  403c16:	4602      	mov	r2, r0
  403c18:	460b      	mov	r3, r1
  403c1a:	4630      	mov	r0, r6
  403c1c:	4639      	mov	r1, r7
  403c1e:	f000 fcbd 	bl	40459c <__aeabi_dsub>
  403c22:	2502      	movs	r5, #2
  403c24:	4606      	mov	r6, r0
  403c26:	460f      	mov	r7, r1
  403c28:	2200      	movs	r2, #0
  403c2a:	2300      	movs	r3, #0
  403c2c:	4630      	mov	r0, r6
  403c2e:	4639      	mov	r1, r7
  403c30:	f001 f8d0 	bl	404dd4 <__aeabi_dcmpeq>
  403c34:	2800      	cmp	r0, #0
  403c36:	f000 8252 	beq.w	4040de <__kernel_rem_pio2+0x776>
  403c3a:	9a00      	ldr	r2, [sp, #0]
  403c3c:	9b05      	ldr	r3, [sp, #20]
  403c3e:	1e50      	subs	r0, r2, #1
  403c40:	4283      	cmp	r3, r0
  403c42:	dc0f      	bgt.n	403c64 <__kernel_rem_pio2+0x2fc>
  403c44:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
  403c48:	3b01      	subs	r3, #1
  403c4a:	aa0c      	add	r2, sp, #48	; 0x30
  403c4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403c4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403c52:	2200      	movs	r2, #0
  403c54:	f853 1904 	ldr.w	r1, [r3], #-4
  403c58:	42a3      	cmp	r3, r4
  403c5a:	ea42 0201 	orr.w	r2, r2, r1
  403c5e:	d1f9      	bne.n	403c54 <__kernel_rem_pio2+0x2ec>
  403c60:	2a00      	cmp	r2, #0
  403c62:	d16f      	bne.n	403d44 <__kernel_rem_pio2+0x3dc>
  403c64:	9b05      	ldr	r3, [sp, #20]
  403c66:	aa0c      	add	r2, sp, #48	; 0x30
  403c68:	3b01      	subs	r3, #1
  403c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403c6e:	2b00      	cmp	r3, #0
  403c70:	f040 8233 	bne.w	4040da <__kernel_rem_pio2+0x772>
  403c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403c76:	2301      	movs	r3, #1
  403c78:	f852 1904 	ldr.w	r1, [r2], #-4
  403c7c:	3301      	adds	r3, #1
  403c7e:	2900      	cmp	r1, #0
  403c80:	d0fa      	beq.n	403c78 <__kernel_rem_pio2+0x310>
  403c82:	9a00      	ldr	r2, [sp, #0]
  403c84:	18d3      	adds	r3, r2, r3
  403c86:	f102 0a01 	add.w	sl, r2, #1
  403c8a:	459a      	cmp	sl, r3
  403c8c:	9307      	str	r3, [sp, #28]
  403c8e:	dc3d      	bgt.n	403d0c <__kernel_rem_pio2+0x3a4>
  403c90:	9b00      	ldr	r3, [sp, #0]
  403c92:	9908      	ldr	r1, [sp, #32]
  403c94:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403c96:	440b      	add	r3, r1
  403c98:	9907      	ldr	r1, [sp, #28]
  403c9a:	eb0a 0802 	add.w	r8, sl, r2
  403c9e:	4699      	mov	r9, r3
  403ca0:	ab20      	add	r3, sp, #128	; 0x80
  403ca2:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
  403ca6:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
  403caa:	188b      	adds	r3, r1, r2
  403cac:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  403cae:	f108 38ff 	add.w	r8, r8, #4294967295
  403cb2:	eb02 0888 	add.w	r8, r2, r8, lsl #2
  403cb6:	aa70      	add	r2, sp, #448	; 0x1c0
  403cb8:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
  403cbc:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  403cbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403cc2:	9300      	str	r3, [sp, #0]
  403cc4:	f858 0f04 	ldr.w	r0, [r8, #4]!
  403cc8:	f000 fdb6 	bl	404838 <__aeabi_i2d>
  403ccc:	9b02      	ldr	r3, [sp, #8]
  403cce:	2b00      	cmp	r3, #0
  403cd0:	e8e9 0102 	strd	r0, r1, [r9], #8
  403cd4:	db1d      	blt.n	403d12 <__kernel_rem_pio2+0x3aa>
  403cd6:	9b03      	ldr	r3, [sp, #12]
  403cd8:	464d      	mov	r5, r9
  403cda:	f1a3 0408 	sub.w	r4, r3, #8
  403cde:	2600      	movs	r6, #0
  403ce0:	2700      	movs	r7, #0
  403ce2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  403ce6:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  403cea:	f000 fe0b 	bl	404904 <__aeabi_dmul>
  403cee:	4602      	mov	r2, r0
  403cf0:	460b      	mov	r3, r1
  403cf2:	4630      	mov	r0, r6
  403cf4:	4639      	mov	r1, r7
  403cf6:	f000 fc53 	bl	4045a0 <__adddf3>
  403cfa:	455c      	cmp	r4, fp
  403cfc:	4606      	mov	r6, r0
  403cfe:	460f      	mov	r7, r1
  403d00:	d1ef      	bne.n	403ce2 <__kernel_rem_pio2+0x37a>
  403d02:	9b00      	ldr	r3, [sp, #0]
  403d04:	4598      	cmp	r8, r3
  403d06:	e8ea 6702 	strd	r6, r7, [sl], #8
  403d0a:	d1db      	bne.n	403cc4 <__kernel_rem_pio2+0x35c>
  403d0c:	9b07      	ldr	r3, [sp, #28]
  403d0e:	9300      	str	r3, [sp, #0]
  403d10:	e6ae      	b.n	403a70 <__kernel_rem_pio2+0x108>
  403d12:	9b00      	ldr	r3, [sp, #0]
  403d14:	2600      	movs	r6, #0
  403d16:	2700      	movs	r7, #0
  403d18:	4598      	cmp	r8, r3
  403d1a:	e8ea 6702 	strd	r6, r7, [sl], #8
  403d1e:	d1d1      	bne.n	403cc4 <__kernel_rem_pio2+0x35c>
  403d20:	e7f4      	b.n	403d0c <__kernel_rem_pio2+0x3a4>
  403d22:	d106      	bne.n	403d32 <__kernel_rem_pio2+0x3ca>
  403d24:	9b00      	ldr	r3, [sp, #0]
  403d26:	aa0c      	add	r2, sp, #48	; 0x30
  403d28:	3b01      	subs	r3, #1
  403d2a:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  403d2e:	15ed      	asrs	r5, r5, #23
  403d30:	e714      	b.n	403b5c <__kernel_rem_pio2+0x1f4>
  403d32:	2200      	movs	r2, #0
  403d34:	4b4b      	ldr	r3, [pc, #300]	; (403e64 <__kernel_rem_pio2+0x4fc>)
  403d36:	f001 f86b 	bl	404e10 <__aeabi_dcmpge>
  403d3a:	2800      	cmp	r0, #0
  403d3c:	f040 8182 	bne.w	404044 <__kernel_rem_pio2+0x6dc>
  403d40:	4605      	mov	r5, r0
  403d42:	e771      	b.n	403c28 <__kernel_rem_pio2+0x2c0>
  403d44:	a90c      	add	r1, sp, #48	; 0x30
  403d46:	9502      	str	r5, [sp, #8]
  403d48:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
  403d4c:	9904      	ldr	r1, [sp, #16]
  403d4e:	f8cd 801c 	str.w	r8, [sp, #28]
  403d52:	3918      	subs	r1, #24
  403d54:	4602      	mov	r2, r0
  403d56:	9000      	str	r0, [sp, #0]
  403d58:	9104      	str	r1, [sp, #16]
  403d5a:	b96b      	cbnz	r3, 403d78 <__kernel_rem_pio2+0x410>
  403d5c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  403d60:	3b01      	subs	r3, #1
  403d62:	a80c      	add	r0, sp, #48	; 0x30
  403d64:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  403d68:	f853 0904 	ldr.w	r0, [r3], #-4
  403d6c:	3a01      	subs	r2, #1
  403d6e:	3918      	subs	r1, #24
  403d70:	2800      	cmp	r0, #0
  403d72:	d0f9      	beq.n	403d68 <__kernel_rem_pio2+0x400>
  403d74:	9200      	str	r2, [sp, #0]
  403d76:	9104      	str	r1, [sp, #16]
  403d78:	9a04      	ldr	r2, [sp, #16]
  403d7a:	4939      	ldr	r1, [pc, #228]	; (403e60 <__kernel_rem_pio2+0x4f8>)
  403d7c:	2000      	movs	r0, #0
  403d7e:	f000 fb83 	bl	404488 <scalbn>
  403d82:	9b00      	ldr	r3, [sp, #0]
  403d84:	2b00      	cmp	r3, #0
  403d86:	4604      	mov	r4, r0
  403d88:	460d      	mov	r5, r1
  403d8a:	f2c0 8203 	blt.w	404194 <__kernel_rem_pio2+0x82c>
  403d8e:	00da      	lsls	r2, r3, #3
  403d90:	a970      	add	r1, sp, #448	; 0x1c0
  403d92:	eb01 0b02 	add.w	fp, r1, r2
  403d96:	9204      	str	r2, [sp, #16]
  403d98:	aa0c      	add	r2, sp, #48	; 0x30
  403d9a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
  403d9e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 403e68 <__kernel_rem_pio2+0x500>
  403da2:	f10b 0708 	add.w	r7, fp, #8
  403da6:	3604      	adds	r6, #4
  403da8:	f04f 0800 	mov.w	r8, #0
  403dac:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  403db0:	f000 fd42 	bl	404838 <__aeabi_i2d>
  403db4:	4622      	mov	r2, r4
  403db6:	462b      	mov	r3, r5
  403db8:	f000 fda4 	bl	404904 <__aeabi_dmul>
  403dbc:	464b      	mov	r3, r9
  403dbe:	e967 0102 	strd	r0, r1, [r7, #-8]!
  403dc2:	4642      	mov	r2, r8
  403dc4:	4620      	mov	r0, r4
  403dc6:	4629      	mov	r1, r5
  403dc8:	f000 fd9c 	bl	404904 <__aeabi_dmul>
  403dcc:	ab0c      	add	r3, sp, #48	; 0x30
  403dce:	429e      	cmp	r6, r3
  403dd0:	4604      	mov	r4, r0
  403dd2:	460d      	mov	r5, r1
  403dd4:	d1ea      	bne.n	403dac <__kernel_rem_pio2+0x444>
  403dd6:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  403dda:	f8cd a00c 	str.w	sl, [sp, #12]
  403dde:	f8dd a014 	ldr.w	sl, [sp, #20]
  403de2:	f04f 0900 	mov.w	r9, #0
  403de6:	f1ba 0f00 	cmp.w	sl, #0
  403dea:	f2c0 813d 	blt.w	404068 <__kernel_rem_pio2+0x700>
  403dee:	f8df 807c 	ldr.w	r8, [pc, #124]	; 403e6c <__kernel_rem_pio2+0x504>
  403df2:	465d      	mov	r5, fp
  403df4:	a118      	add	r1, pc, #96	; (adr r1, 403e58 <__kernel_rem_pio2+0x4f0>)
  403df6:	e9d1 0100 	ldrd	r0, r1, [r1]
  403dfa:	2600      	movs	r6, #0
  403dfc:	2700      	movs	r7, #0
  403dfe:	2400      	movs	r4, #0
  403e00:	e003      	b.n	403e0a <__kernel_rem_pio2+0x4a2>
  403e02:	454c      	cmp	r4, r9
  403e04:	dc10      	bgt.n	403e28 <__kernel_rem_pio2+0x4c0>
  403e06:	e8f8 0102 	ldrd	r0, r1, [r8], #8
  403e0a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
  403e0e:	f000 fd79 	bl	404904 <__aeabi_dmul>
  403e12:	4602      	mov	r2, r0
  403e14:	460b      	mov	r3, r1
  403e16:	4630      	mov	r0, r6
  403e18:	4639      	mov	r1, r7
  403e1a:	f000 fbc1 	bl	4045a0 <__adddf3>
  403e1e:	3401      	adds	r4, #1
  403e20:	45a2      	cmp	sl, r4
  403e22:	4606      	mov	r6, r0
  403e24:	460f      	mov	r7, r1
  403e26:	daec      	bge.n	403e02 <__kernel_rem_pio2+0x49a>
  403e28:	9b03      	ldr	r3, [sp, #12]
  403e2a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  403e2e:	f1ab 0b08 	sub.w	fp, fp, #8
  403e32:	e9c3 6700 	strd	r6, r7, [r3]
  403e36:	ab6e      	add	r3, sp, #440	; 0x1b8
  403e38:	455b      	cmp	r3, fp
  403e3a:	f109 0901 	add.w	r9, r9, #1
  403e3e:	d1d2      	bne.n	403de6 <__kernel_rem_pio2+0x47e>
  403e40:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  403e42:	f8dd a00c 	ldr.w	sl, [sp, #12]
  403e46:	2b03      	cmp	r3, #3
  403e48:	f200 808b 	bhi.w	403f62 <__kernel_rem_pio2+0x5fa>
  403e4c:	e8df f013 	tbh	[pc, r3, lsl #1]
  403e50:	009000d1 	.word	0x009000d1
  403e54:	00100090 	.word	0x00100090
  403e58:	40000000 	.word	0x40000000
  403e5c:	3ff921fb 	.word	0x3ff921fb
  403e60:	3ff00000 	.word	0x3ff00000
  403e64:	3fe00000 	.word	0x3fe00000
  403e68:	3e700000 	.word	0x3e700000
  403e6c:	00408050 	.word	0x00408050
  403e70:	9b00      	ldr	r3, [sp, #0]
  403e72:	2b00      	cmp	r3, #0
  403e74:	f340 81a4 	ble.w	4041c0 <__kernel_rem_pio2+0x858>
  403e78:	9b04      	ldr	r3, [sp, #16]
  403e7a:	eb0a 0803 	add.w	r8, sl, r3
  403e7e:	e9d8 6700 	ldrd	r6, r7, [r8]
  403e82:	46d3      	mov	fp, sl
  403e84:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  403e88:	4632      	mov	r2, r6
  403e8a:	463b      	mov	r3, r7
  403e8c:	4648      	mov	r0, r9
  403e8e:	4651      	mov	r1, sl
  403e90:	f000 fb86 	bl	4045a0 <__adddf3>
  403e94:	4604      	mov	r4, r0
  403e96:	460d      	mov	r5, r1
  403e98:	4602      	mov	r2, r0
  403e9a:	460b      	mov	r3, r1
  403e9c:	4648      	mov	r0, r9
  403e9e:	4651      	mov	r1, sl
  403ea0:	f000 fb7c 	bl	40459c <__aeabi_dsub>
  403ea4:	4632      	mov	r2, r6
  403ea6:	463b      	mov	r3, r7
  403ea8:	f000 fb7a 	bl	4045a0 <__adddf3>
  403eac:	e9c8 0100 	strd	r0, r1, [r8]
  403eb0:	e968 4502 	strd	r4, r5, [r8, #-8]!
  403eb4:	45c3      	cmp	fp, r8
  403eb6:	4626      	mov	r6, r4
  403eb8:	462f      	mov	r7, r5
  403eba:	d1e3      	bne.n	403e84 <__kernel_rem_pio2+0x51c>
  403ebc:	9b00      	ldr	r3, [sp, #0]
  403ebe:	2b01      	cmp	r3, #1
  403ec0:	46da      	mov	sl, fp
  403ec2:	f340 817d 	ble.w	4041c0 <__kernel_rem_pio2+0x858>
  403ec6:	9b04      	ldr	r3, [sp, #16]
  403ec8:	445b      	add	r3, fp
  403eca:	e9d3 6700 	ldrd	r6, r7, [r3]
  403ece:	4698      	mov	r8, r3
  403ed0:	4699      	mov	r9, r3
  403ed2:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
  403ed6:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  403eda:	4632      	mov	r2, r6
  403edc:	4618      	mov	r0, r3
  403ede:	4621      	mov	r1, r4
  403ee0:	463b      	mov	r3, r7
  403ee2:	e9cd 0100 	strd	r0, r1, [sp]
  403ee6:	f000 fb5b 	bl	4045a0 <__adddf3>
  403eea:	4604      	mov	r4, r0
  403eec:	460d      	mov	r5, r1
  403eee:	4602      	mov	r2, r0
  403ef0:	460b      	mov	r3, r1
  403ef2:	e9dd 0100 	ldrd	r0, r1, [sp]
  403ef6:	f000 fb51 	bl	40459c <__aeabi_dsub>
  403efa:	4632      	mov	r2, r6
  403efc:	463b      	mov	r3, r7
  403efe:	f000 fb4f 	bl	4045a0 <__adddf3>
  403f02:	e9c9 0100 	strd	r0, r1, [r9]
  403f06:	e969 4502 	strd	r4, r5, [r9, #-8]!
  403f0a:	45cb      	cmp	fp, r9
  403f0c:	4626      	mov	r6, r4
  403f0e:	462f      	mov	r7, r5
  403f10:	d1e1      	bne.n	403ed6 <__kernel_rem_pio2+0x56e>
  403f12:	2300      	movs	r3, #0
  403f14:	f108 0808 	add.w	r8, r8, #8
  403f18:	461d      	mov	r5, r3
  403f1a:	ac4c      	add	r4, sp, #304	; 0x130
  403f1c:	4618      	mov	r0, r3
  403f1e:	4629      	mov	r1, r5
  403f20:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  403f24:	f000 fb3c 	bl	4045a0 <__adddf3>
  403f28:	4544      	cmp	r4, r8
  403f2a:	4603      	mov	r3, r0
  403f2c:	460d      	mov	r5, r1
  403f2e:	d1f5      	bne.n	403f1c <__kernel_rem_pio2+0x5b4>
  403f30:	9a02      	ldr	r2, [sp, #8]
  403f32:	2a00      	cmp	r2, #0
  403f34:	f000 8120 	beq.w	404178 <__kernel_rem_pio2+0x810>
  403f38:	f8da 4004 	ldr.w	r4, [sl, #4]
  403f3c:	f8da 200c 	ldr.w	r2, [sl, #12]
  403f40:	9f06      	ldr	r7, [sp, #24]
  403f42:	f8da 1000 	ldr.w	r1, [sl]
  403f46:	f8da 0008 	ldr.w	r0, [sl, #8]
  403f4a:	613b      	str	r3, [r7, #16]
  403f4c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  403f50:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  403f54:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  403f58:	617d      	str	r5, [r7, #20]
  403f5a:	607c      	str	r4, [r7, #4]
  403f5c:	60fa      	str	r2, [r7, #12]
  403f5e:	6039      	str	r1, [r7, #0]
  403f60:	60b8      	str	r0, [r7, #8]
  403f62:	9b07      	ldr	r3, [sp, #28]
  403f64:	f003 0007 	and.w	r0, r3, #7
  403f68:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  403f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f70:	9c04      	ldr	r4, [sp, #16]
  403f72:	2600      	movs	r6, #0
  403f74:	3408      	adds	r4, #8
  403f76:	4454      	add	r4, sl
  403f78:	4633      	mov	r3, r6
  403f7a:	4630      	mov	r0, r6
  403f7c:	4619      	mov	r1, r3
  403f7e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  403f82:	f000 fb0d 	bl	4045a0 <__adddf3>
  403f86:	4554      	cmp	r4, sl
  403f88:	4606      	mov	r6, r0
  403f8a:	460b      	mov	r3, r1
  403f8c:	d1f5      	bne.n	403f7a <__kernel_rem_pio2+0x612>
  403f8e:	9a02      	ldr	r2, [sp, #8]
  403f90:	4630      	mov	r0, r6
  403f92:	4619      	mov	r1, r3
  403f94:	2a00      	cmp	r2, #0
  403f96:	f000 80da 	beq.w	40414e <__kernel_rem_pio2+0x7e6>
  403f9a:	9806      	ldr	r0, [sp, #24]
  403f9c:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  403fa0:	4632      	mov	r2, r6
  403fa2:	6044      	str	r4, [r0, #4]
  403fa4:	6006      	str	r6, [r0, #0]
  403fa6:	e9da 0100 	ldrd	r0, r1, [sl]
  403faa:	f000 faf7 	bl	40459c <__aeabi_dsub>
  403fae:	460b      	mov	r3, r1
  403fb0:	9900      	ldr	r1, [sp, #0]
  403fb2:	2900      	cmp	r1, #0
  403fb4:	4602      	mov	r2, r0
  403fb6:	dd0e      	ble.n	403fd6 <__kernel_rem_pio2+0x66e>
  403fb8:	2401      	movs	r4, #1
  403fba:	4610      	mov	r0, r2
  403fbc:	4619      	mov	r1, r3
  403fbe:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  403fc2:	f000 faed 	bl	4045a0 <__adddf3>
  403fc6:	460b      	mov	r3, r1
  403fc8:	9900      	ldr	r1, [sp, #0]
  403fca:	3401      	adds	r4, #1
  403fcc:	42a1      	cmp	r1, r4
  403fce:	4602      	mov	r2, r0
  403fd0:	daf3      	bge.n	403fba <__kernel_rem_pio2+0x652>
  403fd2:	9902      	ldr	r1, [sp, #8]
  403fd4:	b109      	cbz	r1, 403fda <__kernel_rem_pio2+0x672>
  403fd6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  403fda:	4619      	mov	r1, r3
  403fdc:	9b06      	ldr	r3, [sp, #24]
  403fde:	4610      	mov	r0, r2
  403fe0:	e9c3 0102 	strd	r0, r1, [r3, #8]
  403fe4:	9b07      	ldr	r3, [sp, #28]
  403fe6:	f003 0007 	and.w	r0, r3, #7
  403fea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  403fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ff2:	9c04      	ldr	r4, [sp, #16]
  403ff4:	2200      	movs	r2, #0
  403ff6:	3408      	adds	r4, #8
  403ff8:	4454      	add	r4, sl
  403ffa:	4613      	mov	r3, r2
  403ffc:	4610      	mov	r0, r2
  403ffe:	4619      	mov	r1, r3
  404000:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  404004:	f000 facc 	bl	4045a0 <__adddf3>
  404008:	45a2      	cmp	sl, r4
  40400a:	4602      	mov	r2, r0
  40400c:	460b      	mov	r3, r1
  40400e:	d1f5      	bne.n	403ffc <__kernel_rem_pio2+0x694>
  404010:	9902      	ldr	r1, [sp, #8]
  404012:	b109      	cbz	r1, 404018 <__kernel_rem_pio2+0x6b0>
  404014:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404018:	4619      	mov	r1, r3
  40401a:	9b06      	ldr	r3, [sp, #24]
  40401c:	4610      	mov	r0, r2
  40401e:	e9c3 0100 	strd	r0, r1, [r3]
  404022:	9b07      	ldr	r3, [sp, #28]
  404024:	f003 0007 	and.w	r0, r3, #7
  404028:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  40402c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404030:	2600      	movs	r6, #0
  404032:	2700      	movs	r7, #0
  404034:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  404038:	45da      	cmp	sl, fp
  40403a:	f109 0908 	add.w	r9, r9, #8
  40403e:	f47f ace4 	bne.w	403a0a <__kernel_rem_pio2+0xa2>
  404042:	e502      	b.n	403a4a <__kernel_rem_pio2+0xe2>
  404044:	9b00      	ldr	r3, [sp, #0]
  404046:	2b00      	cmp	r3, #0
  404048:	f108 0801 	add.w	r8, r8, #1
  40404c:	bfc8      	it	gt
  40404e:	2502      	movgt	r5, #2
  404050:	f73f ad8c 	bgt.w	403b6c <__kernel_rem_pio2+0x204>
  404054:	4632      	mov	r2, r6
  404056:	463b      	mov	r3, r7
  404058:	2000      	movs	r0, #0
  40405a:	4963      	ldr	r1, [pc, #396]	; (4041e8 <__kernel_rem_pio2+0x880>)
  40405c:	f000 fa9e 	bl	40459c <__aeabi_dsub>
  404060:	2502      	movs	r5, #2
  404062:	4606      	mov	r6, r0
  404064:	460f      	mov	r7, r1
  404066:	e5df      	b.n	403c28 <__kernel_rem_pio2+0x2c0>
  404068:	2600      	movs	r6, #0
  40406a:	2700      	movs	r7, #0
  40406c:	e6dc      	b.n	403e28 <__kernel_rem_pio2+0x4c0>
  40406e:	9b04      	ldr	r3, [sp, #16]
  404070:	2b00      	cmp	r3, #0
  404072:	dd26      	ble.n	4040c2 <__kernel_rem_pio2+0x75a>
  404074:	2400      	movs	r4, #0
  404076:	9b04      	ldr	r3, [sp, #16]
  404078:	2b01      	cmp	r3, #1
  40407a:	f43f ada8 	beq.w	403bce <__kernel_rem_pio2+0x266>
  40407e:	2b02      	cmp	r3, #2
  404080:	d109      	bne.n	404096 <__kernel_rem_pio2+0x72e>
  404082:	9b00      	ldr	r3, [sp, #0]
  404084:	1e5a      	subs	r2, r3, #1
  404086:	ab0c      	add	r3, sp, #48	; 0x30
  404088:	a90c      	add	r1, sp, #48	; 0x30
  40408a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40408e:	f3c3 0315 	ubfx	r3, r3, #0, #22
  404092:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  404096:	2d02      	cmp	r5, #2
  404098:	f47f adc6 	bne.w	403c28 <__kernel_rem_pio2+0x2c0>
  40409c:	4632      	mov	r2, r6
  40409e:	463b      	mov	r3, r7
  4040a0:	2000      	movs	r0, #0
  4040a2:	4951      	ldr	r1, [pc, #324]	; (4041e8 <__kernel_rem_pio2+0x880>)
  4040a4:	f000 fa7a 	bl	40459c <__aeabi_dsub>
  4040a8:	4606      	mov	r6, r0
  4040aa:	460f      	mov	r7, r1
  4040ac:	2c00      	cmp	r4, #0
  4040ae:	f43f adbb 	beq.w	403c28 <__kernel_rem_pio2+0x2c0>
  4040b2:	e5ab      	b.n	403c0c <__kernel_rem_pio2+0x2a4>
  4040b4:	9900      	ldr	r1, [sp, #0]
  4040b6:	3301      	adds	r3, #1
  4040b8:	4299      	cmp	r1, r3
  4040ba:	d178      	bne.n	4041ae <__kernel_rem_pio2+0x846>
  4040bc:	9b04      	ldr	r3, [sp, #16]
  4040be:	2b00      	cmp	r3, #0
  4040c0:	dcd9      	bgt.n	404076 <__kernel_rem_pio2+0x70e>
  4040c2:	2d02      	cmp	r5, #2
  4040c4:	f47f adb0 	bne.w	403c28 <__kernel_rem_pio2+0x2c0>
  4040c8:	4632      	mov	r2, r6
  4040ca:	463b      	mov	r3, r7
  4040cc:	2000      	movs	r0, #0
  4040ce:	4946      	ldr	r1, [pc, #280]	; (4041e8 <__kernel_rem_pio2+0x880>)
  4040d0:	f000 fa64 	bl	40459c <__aeabi_dsub>
  4040d4:	4606      	mov	r6, r0
  4040d6:	460f      	mov	r7, r1
  4040d8:	e5a6      	b.n	403c28 <__kernel_rem_pio2+0x2c0>
  4040da:	2301      	movs	r3, #1
  4040dc:	e5d1      	b.n	403c82 <__kernel_rem_pio2+0x31a>
  4040de:	4639      	mov	r1, r7
  4040e0:	9f04      	ldr	r7, [sp, #16]
  4040e2:	9502      	str	r5, [sp, #8]
  4040e4:	427a      	negs	r2, r7
  4040e6:	4630      	mov	r0, r6
  4040e8:	f8cd 801c 	str.w	r8, [sp, #28]
  4040ec:	f000 f9cc 	bl	404488 <scalbn>
  4040f0:	2200      	movs	r2, #0
  4040f2:	4b3e      	ldr	r3, [pc, #248]	; (4041ec <__kernel_rem_pio2+0x884>)
  4040f4:	4604      	mov	r4, r0
  4040f6:	460d      	mov	r5, r1
  4040f8:	f000 fe8a 	bl	404e10 <__aeabi_dcmpge>
  4040fc:	2800      	cmp	r0, #0
  4040fe:	d062      	beq.n	4041c6 <__kernel_rem_pio2+0x85e>
  404100:	2200      	movs	r2, #0
  404102:	4b3b      	ldr	r3, [pc, #236]	; (4041f0 <__kernel_rem_pio2+0x888>)
  404104:	4620      	mov	r0, r4
  404106:	4629      	mov	r1, r5
  404108:	f000 fbfc 	bl	404904 <__aeabi_dmul>
  40410c:	f000 feaa 	bl	404e64 <__aeabi_d2iz>
  404110:	4606      	mov	r6, r0
  404112:	f000 fb91 	bl	404838 <__aeabi_i2d>
  404116:	2200      	movs	r2, #0
  404118:	4b34      	ldr	r3, [pc, #208]	; (4041ec <__kernel_rem_pio2+0x884>)
  40411a:	f000 fbf3 	bl	404904 <__aeabi_dmul>
  40411e:	4602      	mov	r2, r0
  404120:	460b      	mov	r3, r1
  404122:	4620      	mov	r0, r4
  404124:	4629      	mov	r1, r5
  404126:	f000 fa39 	bl	40459c <__aeabi_dsub>
  40412a:	f000 fe9b 	bl	404e64 <__aeabi_d2iz>
  40412e:	9900      	ldr	r1, [sp, #0]
  404130:	460b      	mov	r3, r1
  404132:	3301      	adds	r3, #1
  404134:	461a      	mov	r2, r3
  404136:	9300      	str	r3, [sp, #0]
  404138:	463b      	mov	r3, r7
  40413a:	3318      	adds	r3, #24
  40413c:	9304      	str	r3, [sp, #16]
  40413e:	460b      	mov	r3, r1
  404140:	a90c      	add	r1, sp, #48	; 0x30
  404142:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  404146:	4613      	mov	r3, r2
  404148:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
  40414c:	e614      	b.n	403d78 <__kernel_rem_pio2+0x410>
  40414e:	9b06      	ldr	r3, [sp, #24]
  404150:	4632      	mov	r2, r6
  404152:	e9c3 0100 	strd	r0, r1, [r3]
  404156:	460b      	mov	r3, r1
  404158:	e9da 0100 	ldrd	r0, r1, [sl]
  40415c:	f000 fa1e 	bl	40459c <__aeabi_dsub>
  404160:	460b      	mov	r3, r1
  404162:	9900      	ldr	r1, [sp, #0]
  404164:	2900      	cmp	r1, #0
  404166:	4602      	mov	r2, r0
  404168:	f73f af26 	bgt.w	403fb8 <__kernel_rem_pio2+0x650>
  40416c:	4619      	mov	r1, r3
  40416e:	9b06      	ldr	r3, [sp, #24]
  404170:	4610      	mov	r0, r2
  404172:	e9c3 0102 	strd	r0, r1, [r3, #8]
  404176:	e735      	b.n	403fe4 <__kernel_rem_pio2+0x67c>
  404178:	4618      	mov	r0, r3
  40417a:	4629      	mov	r1, r5
  40417c:	e9da 2300 	ldrd	r2, r3, [sl]
  404180:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  404184:	9f06      	ldr	r7, [sp, #24]
  404186:	e9c7 0104 	strd	r0, r1, [r7, #16]
  40418a:	e9c7 2300 	strd	r2, r3, [r7]
  40418e:	e9c7 4502 	strd	r4, r5, [r7, #8]
  404192:	e6e6      	b.n	403f62 <__kernel_rem_pio2+0x5fa>
  404194:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  404196:	2b03      	cmp	r3, #3
  404198:	f63f aee3 	bhi.w	403f62 <__kernel_rem_pio2+0x5fa>
  40419c:	e8df f003 	tbb	[pc, r3]
  4041a0:	0e1c1c21 	.word	0x0e1c1c21
  4041a4:	9b00      	ldr	r3, [sp, #0]
  4041a6:	2b01      	cmp	r3, #1
  4041a8:	dd88      	ble.n	4040bc <__kernel_rem_pio2+0x754>
  4041aa:	aa0c      	add	r2, sp, #48	; 0x30
  4041ac:	2301      	movs	r3, #1
  4041ae:	f852 4f04 	ldr.w	r4, [r2, #4]!
  4041b2:	2c00      	cmp	r4, #0
  4041b4:	f43f af7e 	beq.w	4040b4 <__kernel_rem_pio2+0x74c>
  4041b8:	1c58      	adds	r0, r3, #1
  4041ba:	e4dd      	b.n	403b78 <__kernel_rem_pio2+0x210>
  4041bc:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  4041c0:	2300      	movs	r3, #0
  4041c2:	461d      	mov	r5, r3
  4041c4:	e6b4      	b.n	403f30 <__kernel_rem_pio2+0x5c8>
  4041c6:	4629      	mov	r1, r5
  4041c8:	4620      	mov	r0, r4
  4041ca:	f000 fe4b 	bl	404e64 <__aeabi_d2iz>
  4041ce:	9a00      	ldr	r2, [sp, #0]
  4041d0:	a90c      	add	r1, sp, #48	; 0x30
  4041d2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
  4041d6:	e5cf      	b.n	403d78 <__kernel_rem_pio2+0x410>
  4041d8:	2600      	movs	r6, #0
  4041da:	4633      	mov	r3, r6
  4041dc:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  4041e0:	e6d5      	b.n	403f8e <__kernel_rem_pio2+0x626>
  4041e2:	2200      	movs	r2, #0
  4041e4:	4613      	mov	r3, r2
  4041e6:	e713      	b.n	404010 <__kernel_rem_pio2+0x6a8>
  4041e8:	3ff00000 	.word	0x3ff00000
  4041ec:	41700000 	.word	0x41700000
  4041f0:	3e700000 	.word	0x3e700000
  4041f4:	00000000 	.word	0x00000000

004041f8 <__kernel_sin>:
  4041f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  404200:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  404204:	b085      	sub	sp, #20
  404206:	460c      	mov	r4, r1
  404208:	4690      	mov	r8, r2
  40420a:	4699      	mov	r9, r3
  40420c:	4605      	mov	r5, r0
  40420e:	da04      	bge.n	40421a <__kernel_sin+0x22>
  404210:	f000 fe28 	bl	404e64 <__aeabi_d2iz>
  404214:	2800      	cmp	r0, #0
  404216:	f000 8085 	beq.w	404324 <__kernel_sin+0x12c>
  40421a:	462a      	mov	r2, r5
  40421c:	4623      	mov	r3, r4
  40421e:	4628      	mov	r0, r5
  404220:	4621      	mov	r1, r4
  404222:	f000 fb6f 	bl	404904 <__aeabi_dmul>
  404226:	4606      	mov	r6, r0
  404228:	460f      	mov	r7, r1
  40422a:	4602      	mov	r2, r0
  40422c:	460b      	mov	r3, r1
  40422e:	4628      	mov	r0, r5
  404230:	4621      	mov	r1, r4
  404232:	f000 fb67 	bl	404904 <__aeabi_dmul>
  404236:	a33e      	add	r3, pc, #248	; (adr r3, 404330 <__kernel_sin+0x138>)
  404238:	e9d3 2300 	ldrd	r2, r3, [r3]
  40423c:	4682      	mov	sl, r0
  40423e:	468b      	mov	fp, r1
  404240:	4630      	mov	r0, r6
  404242:	4639      	mov	r1, r7
  404244:	f000 fb5e 	bl	404904 <__aeabi_dmul>
  404248:	a33b      	add	r3, pc, #236	; (adr r3, 404338 <__kernel_sin+0x140>)
  40424a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40424e:	f000 f9a5 	bl	40459c <__aeabi_dsub>
  404252:	4632      	mov	r2, r6
  404254:	463b      	mov	r3, r7
  404256:	f000 fb55 	bl	404904 <__aeabi_dmul>
  40425a:	a339      	add	r3, pc, #228	; (adr r3, 404340 <__kernel_sin+0x148>)
  40425c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404260:	f000 f99e 	bl	4045a0 <__adddf3>
  404264:	4632      	mov	r2, r6
  404266:	463b      	mov	r3, r7
  404268:	f000 fb4c 	bl	404904 <__aeabi_dmul>
  40426c:	a336      	add	r3, pc, #216	; (adr r3, 404348 <__kernel_sin+0x150>)
  40426e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404272:	f000 f993 	bl	40459c <__aeabi_dsub>
  404276:	4632      	mov	r2, r6
  404278:	463b      	mov	r3, r7
  40427a:	f000 fb43 	bl	404904 <__aeabi_dmul>
  40427e:	a334      	add	r3, pc, #208	; (adr r3, 404350 <__kernel_sin+0x158>)
  404280:	e9d3 2300 	ldrd	r2, r3, [r3]
  404284:	f000 f98c 	bl	4045a0 <__adddf3>
  404288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40428a:	e9cd 0100 	strd	r0, r1, [sp]
  40428e:	b39b      	cbz	r3, 4042f8 <__kernel_sin+0x100>
  404290:	2200      	movs	r2, #0
  404292:	4b33      	ldr	r3, [pc, #204]	; (404360 <__kernel_sin+0x168>)
  404294:	4640      	mov	r0, r8
  404296:	4649      	mov	r1, r9
  404298:	f000 fb34 	bl	404904 <__aeabi_dmul>
  40429c:	e9dd 2300 	ldrd	r2, r3, [sp]
  4042a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4042a4:	4650      	mov	r0, sl
  4042a6:	4659      	mov	r1, fp
  4042a8:	f000 fb2c 	bl	404904 <__aeabi_dmul>
  4042ac:	4602      	mov	r2, r0
  4042ae:	460b      	mov	r3, r1
  4042b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4042b4:	f000 f972 	bl	40459c <__aeabi_dsub>
  4042b8:	4632      	mov	r2, r6
  4042ba:	463b      	mov	r3, r7
  4042bc:	f000 fb22 	bl	404904 <__aeabi_dmul>
  4042c0:	4642      	mov	r2, r8
  4042c2:	464b      	mov	r3, r9
  4042c4:	f000 f96a 	bl	40459c <__aeabi_dsub>
  4042c8:	a323      	add	r3, pc, #140	; (adr r3, 404358 <__kernel_sin+0x160>)
  4042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042ce:	4606      	mov	r6, r0
  4042d0:	460f      	mov	r7, r1
  4042d2:	4650      	mov	r0, sl
  4042d4:	4659      	mov	r1, fp
  4042d6:	f000 fb15 	bl	404904 <__aeabi_dmul>
  4042da:	4602      	mov	r2, r0
  4042dc:	460b      	mov	r3, r1
  4042de:	4630      	mov	r0, r6
  4042e0:	4639      	mov	r1, r7
  4042e2:	f000 f95d 	bl	4045a0 <__adddf3>
  4042e6:	4602      	mov	r2, r0
  4042e8:	460b      	mov	r3, r1
  4042ea:	4628      	mov	r0, r5
  4042ec:	4621      	mov	r1, r4
  4042ee:	f000 f955 	bl	40459c <__aeabi_dsub>
  4042f2:	b005      	add	sp, #20
  4042f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042f8:	4602      	mov	r2, r0
  4042fa:	460b      	mov	r3, r1
  4042fc:	4630      	mov	r0, r6
  4042fe:	4639      	mov	r1, r7
  404300:	f000 fb00 	bl	404904 <__aeabi_dmul>
  404304:	a314      	add	r3, pc, #80	; (adr r3, 404358 <__kernel_sin+0x160>)
  404306:	e9d3 2300 	ldrd	r2, r3, [r3]
  40430a:	f000 f947 	bl	40459c <__aeabi_dsub>
  40430e:	4652      	mov	r2, sl
  404310:	465b      	mov	r3, fp
  404312:	f000 faf7 	bl	404904 <__aeabi_dmul>
  404316:	462a      	mov	r2, r5
  404318:	4623      	mov	r3, r4
  40431a:	f000 f941 	bl	4045a0 <__adddf3>
  40431e:	b005      	add	sp, #20
  404320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404324:	4628      	mov	r0, r5
  404326:	4621      	mov	r1, r4
  404328:	b005      	add	sp, #20
  40432a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40432e:	bf00      	nop
  404330:	5acfd57c 	.word	0x5acfd57c
  404334:	3de5d93a 	.word	0x3de5d93a
  404338:	8a2b9ceb 	.word	0x8a2b9ceb
  40433c:	3e5ae5e6 	.word	0x3e5ae5e6
  404340:	57b1fe7d 	.word	0x57b1fe7d
  404344:	3ec71de3 	.word	0x3ec71de3
  404348:	19c161d5 	.word	0x19c161d5
  40434c:	3f2a01a0 	.word	0x3f2a01a0
  404350:	1110f8a6 	.word	0x1110f8a6
  404354:	3f811111 	.word	0x3f811111
  404358:	55555549 	.word	0x55555549
  40435c:	3fc55555 	.word	0x3fc55555
  404360:	3fe00000 	.word	0x3fe00000

00404364 <fabs>:
  404364:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404368:	4770      	bx	lr
  40436a:	bf00      	nop
  40436c:	0000      	movs	r0, r0
	...

00404370 <floor>:
  404370:	f3c1 520a 	ubfx	r2, r1, #20, #11
  404374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404378:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  40437c:	2e13      	cmp	r6, #19
  40437e:	460b      	mov	r3, r1
  404380:	460d      	mov	r5, r1
  404382:	4604      	mov	r4, r0
  404384:	4688      	mov	r8, r1
  404386:	4607      	mov	r7, r0
  404388:	dc1d      	bgt.n	4043c6 <floor+0x56>
  40438a:	2e00      	cmp	r6, #0
  40438c:	db40      	blt.n	404410 <floor+0xa0>
  40438e:	4a3c      	ldr	r2, [pc, #240]	; (404480 <floor+0x110>)
  404390:	fa42 f906 	asr.w	r9, r2, r6
  404394:	ea01 0209 	and.w	r2, r1, r9
  404398:	4302      	orrs	r2, r0
  40439a:	4686      	mov	lr, r0
  40439c:	d018      	beq.n	4043d0 <floor+0x60>
  40439e:	a336      	add	r3, pc, #216	; (adr r3, 404478 <floor+0x108>)
  4043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4043a4:	f000 f8fc 	bl	4045a0 <__adddf3>
  4043a8:	2200      	movs	r2, #0
  4043aa:	2300      	movs	r3, #0
  4043ac:	f000 fd3a 	bl	404e24 <__aeabi_dcmpgt>
  4043b0:	b120      	cbz	r0, 4043bc <floor+0x4c>
  4043b2:	2d00      	cmp	r5, #0
  4043b4:	db42      	blt.n	40443c <floor+0xcc>
  4043b6:	ea28 0509 	bic.w	r5, r8, r9
  4043ba:	2700      	movs	r7, #0
  4043bc:	463c      	mov	r4, r7
  4043be:	4629      	mov	r1, r5
  4043c0:	4620      	mov	r0, r4
  4043c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043c6:	2e33      	cmp	r6, #51	; 0x33
  4043c8:	dd06      	ble.n	4043d8 <floor+0x68>
  4043ca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  4043ce:	d02f      	beq.n	404430 <floor+0xc0>
  4043d0:	4619      	mov	r1, r3
  4043d2:	4620      	mov	r0, r4
  4043d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043d8:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  4043dc:	f04f 39ff 	mov.w	r9, #4294967295
  4043e0:	fa29 f902 	lsr.w	r9, r9, r2
  4043e4:	ea10 0f09 	tst.w	r0, r9
  4043e8:	d0f2      	beq.n	4043d0 <floor+0x60>
  4043ea:	a323      	add	r3, pc, #140	; (adr r3, 404478 <floor+0x108>)
  4043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4043f0:	f000 f8d6 	bl	4045a0 <__adddf3>
  4043f4:	2200      	movs	r2, #0
  4043f6:	2300      	movs	r3, #0
  4043f8:	f000 fd14 	bl	404e24 <__aeabi_dcmpgt>
  4043fc:	2800      	cmp	r0, #0
  4043fe:	d0dd      	beq.n	4043bc <floor+0x4c>
  404400:	2d00      	cmp	r5, #0
  404402:	db21      	blt.n	404448 <floor+0xd8>
  404404:	4645      	mov	r5, r8
  404406:	ea27 0709 	bic.w	r7, r7, r9
  40440a:	463c      	mov	r4, r7
  40440c:	4629      	mov	r1, r5
  40440e:	e7d7      	b.n	4043c0 <floor+0x50>
  404410:	a319      	add	r3, pc, #100	; (adr r3, 404478 <floor+0x108>)
  404412:	e9d3 2300 	ldrd	r2, r3, [r3]
  404416:	f000 f8c3 	bl	4045a0 <__adddf3>
  40441a:	2200      	movs	r2, #0
  40441c:	2300      	movs	r3, #0
  40441e:	f000 fd01 	bl	404e24 <__aeabi_dcmpgt>
  404422:	2800      	cmp	r0, #0
  404424:	d0ca      	beq.n	4043bc <floor+0x4c>
  404426:	2d00      	cmp	r5, #0
  404428:	db19      	blt.n	40445e <floor+0xee>
  40442a:	2700      	movs	r7, #0
  40442c:	463d      	mov	r5, r7
  40442e:	e7c5      	b.n	4043bc <floor+0x4c>
  404430:	4602      	mov	r2, r0
  404432:	460b      	mov	r3, r1
  404434:	f000 f8b4 	bl	4045a0 <__adddf3>
  404438:	4604      	mov	r4, r0
  40443a:	e7ca      	b.n	4043d2 <floor+0x62>
  40443c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  404440:	fa43 f606 	asr.w	r6, r3, r6
  404444:	44b0      	add	r8, r6
  404446:	e7b6      	b.n	4043b6 <floor+0x46>
  404448:	2e14      	cmp	r6, #20
  40444a:	d010      	beq.n	40446e <floor+0xfe>
  40444c:	2301      	movs	r3, #1
  40444e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  404452:	fa03 f606 	lsl.w	r6, r3, r6
  404456:	1937      	adds	r7, r6, r4
  404458:	bf28      	it	cs
  40445a:	4498      	addcs	r8, r3
  40445c:	e7d2      	b.n	404404 <floor+0x94>
  40445e:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  404462:	4b08      	ldr	r3, [pc, #32]	; (404484 <floor+0x114>)
  404464:	4322      	orrs	r2, r4
  404466:	bf18      	it	ne
  404468:	461d      	movne	r5, r3
  40446a:	2700      	movs	r7, #0
  40446c:	e7a6      	b.n	4043bc <floor+0x4c>
  40446e:	f105 0801 	add.w	r8, r5, #1
  404472:	e7c7      	b.n	404404 <floor+0x94>
  404474:	f3af 8000 	nop.w
  404478:	8800759c 	.word	0x8800759c
  40447c:	7e37e43c 	.word	0x7e37e43c
  404480:	000fffff 	.word	0x000fffff
  404484:	bff00000 	.word	0xbff00000

00404488 <scalbn>:
  404488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40448a:	f3c1 560a 	ubfx	r6, r1, #20, #11
  40448e:	4604      	mov	r4, r0
  404490:	460d      	mov	r5, r1
  404492:	460b      	mov	r3, r1
  404494:	4617      	mov	r7, r2
  404496:	bb0e      	cbnz	r6, 4044dc <scalbn+0x54>
  404498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40449c:	4303      	orrs	r3, r0
  40449e:	4686      	mov	lr, r0
  4044a0:	d025      	beq.n	4044ee <scalbn+0x66>
  4044a2:	2200      	movs	r2, #0
  4044a4:	4b34      	ldr	r3, [pc, #208]	; (404578 <scalbn+0xf0>)
  4044a6:	f000 fa2d 	bl	404904 <__aeabi_dmul>
  4044aa:	4a34      	ldr	r2, [pc, #208]	; (40457c <scalbn+0xf4>)
  4044ac:	4297      	cmp	r7, r2
  4044ae:	4604      	mov	r4, r0
  4044b0:	460d      	mov	r5, r1
  4044b2:	460b      	mov	r3, r1
  4044b4:	db2a      	blt.n	40450c <scalbn+0x84>
  4044b6:	f3c1 560a 	ubfx	r6, r1, #20, #11
  4044ba:	3e36      	subs	r6, #54	; 0x36
  4044bc:	443e      	add	r6, r7
  4044be:	f240 72fe 	movw	r2, #2046	; 0x7fe
  4044c2:	4296      	cmp	r6, r2
  4044c4:	dc28      	bgt.n	404518 <scalbn+0x90>
  4044c6:	2e00      	cmp	r6, #0
  4044c8:	dd12      	ble.n	4044f0 <scalbn+0x68>
  4044ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  4044ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  4044d2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  4044d6:	4620      	mov	r0, r4
  4044d8:	4629      	mov	r1, r5
  4044da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044dc:	f240 72ff 	movw	r2, #2047	; 0x7ff
  4044e0:	4296      	cmp	r6, r2
  4044e2:	d1eb      	bne.n	4044bc <scalbn+0x34>
  4044e4:	4602      	mov	r2, r0
  4044e6:	460b      	mov	r3, r1
  4044e8:	f000 f85a 	bl	4045a0 <__adddf3>
  4044ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044f0:	f116 0f35 	cmn.w	r6, #53	; 0x35
  4044f4:	da1d      	bge.n	404532 <scalbn+0xaa>
  4044f6:	f24c 3350 	movw	r3, #50000	; 0xc350
  4044fa:	429f      	cmp	r7, r3
  4044fc:	4622      	mov	r2, r4
  4044fe:	462b      	mov	r3, r5
  404500:	dc25      	bgt.n	40454e <scalbn+0xc6>
  404502:	a119      	add	r1, pc, #100	; (adr r1, 404568 <scalbn+0xe0>)
  404504:	e9d1 0100 	ldrd	r0, r1, [r1]
  404508:	f000 f83c 	bl	404584 <copysign>
  40450c:	a316      	add	r3, pc, #88	; (adr r3, 404568 <scalbn+0xe0>)
  40450e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404512:	f000 f9f7 	bl	404904 <__aeabi_dmul>
  404516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404518:	4622      	mov	r2, r4
  40451a:	462b      	mov	r3, r5
  40451c:	a114      	add	r1, pc, #80	; (adr r1, 404570 <scalbn+0xe8>)
  40451e:	e9d1 0100 	ldrd	r0, r1, [r1]
  404522:	f000 f82f 	bl	404584 <copysign>
  404526:	a312      	add	r3, pc, #72	; (adr r3, 404570 <scalbn+0xe8>)
  404528:	e9d3 2300 	ldrd	r2, r3, [r3]
  40452c:	f000 f9ea 	bl	404904 <__aeabi_dmul>
  404530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404532:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  404536:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  40453a:	3636      	adds	r6, #54	; 0x36
  40453c:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  404540:	4620      	mov	r0, r4
  404542:	4629      	mov	r1, r5
  404544:	2200      	movs	r2, #0
  404546:	4b0e      	ldr	r3, [pc, #56]	; (404580 <scalbn+0xf8>)
  404548:	f000 f9dc 	bl	404904 <__aeabi_dmul>
  40454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40454e:	a108      	add	r1, pc, #32	; (adr r1, 404570 <scalbn+0xe8>)
  404550:	e9d1 0100 	ldrd	r0, r1, [r1]
  404554:	f000 f816 	bl	404584 <copysign>
  404558:	a305      	add	r3, pc, #20	; (adr r3, 404570 <scalbn+0xe8>)
  40455a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40455e:	f000 f9d1 	bl	404904 <__aeabi_dmul>
  404562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404564:	f3af 8000 	nop.w
  404568:	c2f8f359 	.word	0xc2f8f359
  40456c:	01a56e1f 	.word	0x01a56e1f
  404570:	8800759c 	.word	0x8800759c
  404574:	7e37e43c 	.word	0x7e37e43c
  404578:	43500000 	.word	0x43500000
  40457c:	ffff3cb0 	.word	0xffff3cb0
  404580:	3c900000 	.word	0x3c900000

00404584 <copysign>:
  404584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  404588:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  40458c:	ea42 0103 	orr.w	r1, r2, r3
  404590:	4770      	bx	lr
  404592:	bf00      	nop

00404594 <__aeabi_drsub>:
  404594:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  404598:	e002      	b.n	4045a0 <__adddf3>
  40459a:	bf00      	nop

0040459c <__aeabi_dsub>:
  40459c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004045a0 <__adddf3>:
  4045a0:	b530      	push	{r4, r5, lr}
  4045a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4045a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4045aa:	ea94 0f05 	teq	r4, r5
  4045ae:	bf08      	it	eq
  4045b0:	ea90 0f02 	teqeq	r0, r2
  4045b4:	bf1f      	itttt	ne
  4045b6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4045ba:	ea55 0c02 	orrsne.w	ip, r5, r2
  4045be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4045c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4045c6:	f000 80e2 	beq.w	40478e <__adddf3+0x1ee>
  4045ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4045ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4045d2:	bfb8      	it	lt
  4045d4:	426d      	neglt	r5, r5
  4045d6:	dd0c      	ble.n	4045f2 <__adddf3+0x52>
  4045d8:	442c      	add	r4, r5
  4045da:	ea80 0202 	eor.w	r2, r0, r2
  4045de:	ea81 0303 	eor.w	r3, r1, r3
  4045e2:	ea82 0000 	eor.w	r0, r2, r0
  4045e6:	ea83 0101 	eor.w	r1, r3, r1
  4045ea:	ea80 0202 	eor.w	r2, r0, r2
  4045ee:	ea81 0303 	eor.w	r3, r1, r3
  4045f2:	2d36      	cmp	r5, #54	; 0x36
  4045f4:	bf88      	it	hi
  4045f6:	bd30      	pophi	{r4, r5, pc}
  4045f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4045fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404600:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404604:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404608:	d002      	beq.n	404610 <__adddf3+0x70>
  40460a:	4240      	negs	r0, r0
  40460c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404610:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404614:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404618:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40461c:	d002      	beq.n	404624 <__adddf3+0x84>
  40461e:	4252      	negs	r2, r2
  404620:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404624:	ea94 0f05 	teq	r4, r5
  404628:	f000 80a7 	beq.w	40477a <__adddf3+0x1da>
  40462c:	f1a4 0401 	sub.w	r4, r4, #1
  404630:	f1d5 0e20 	rsbs	lr, r5, #32
  404634:	db0d      	blt.n	404652 <__adddf3+0xb2>
  404636:	fa02 fc0e 	lsl.w	ip, r2, lr
  40463a:	fa22 f205 	lsr.w	r2, r2, r5
  40463e:	1880      	adds	r0, r0, r2
  404640:	f141 0100 	adc.w	r1, r1, #0
  404644:	fa03 f20e 	lsl.w	r2, r3, lr
  404648:	1880      	adds	r0, r0, r2
  40464a:	fa43 f305 	asr.w	r3, r3, r5
  40464e:	4159      	adcs	r1, r3
  404650:	e00e      	b.n	404670 <__adddf3+0xd0>
  404652:	f1a5 0520 	sub.w	r5, r5, #32
  404656:	f10e 0e20 	add.w	lr, lr, #32
  40465a:	2a01      	cmp	r2, #1
  40465c:	fa03 fc0e 	lsl.w	ip, r3, lr
  404660:	bf28      	it	cs
  404662:	f04c 0c02 	orrcs.w	ip, ip, #2
  404666:	fa43 f305 	asr.w	r3, r3, r5
  40466a:	18c0      	adds	r0, r0, r3
  40466c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  404670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404674:	d507      	bpl.n	404686 <__adddf3+0xe6>
  404676:	f04f 0e00 	mov.w	lr, #0
  40467a:	f1dc 0c00 	rsbs	ip, ip, #0
  40467e:	eb7e 0000 	sbcs.w	r0, lr, r0
  404682:	eb6e 0101 	sbc.w	r1, lr, r1
  404686:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40468a:	d31b      	bcc.n	4046c4 <__adddf3+0x124>
  40468c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  404690:	d30c      	bcc.n	4046ac <__adddf3+0x10c>
  404692:	0849      	lsrs	r1, r1, #1
  404694:	ea5f 0030 	movs.w	r0, r0, rrx
  404698:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40469c:	f104 0401 	add.w	r4, r4, #1
  4046a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4046a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4046a8:	f080 809a 	bcs.w	4047e0 <__adddf3+0x240>
  4046ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4046b0:	bf08      	it	eq
  4046b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4046b6:	f150 0000 	adcs.w	r0, r0, #0
  4046ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4046be:	ea41 0105 	orr.w	r1, r1, r5
  4046c2:	bd30      	pop	{r4, r5, pc}
  4046c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4046c8:	4140      	adcs	r0, r0
  4046ca:	eb41 0101 	adc.w	r1, r1, r1
  4046ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4046d2:	f1a4 0401 	sub.w	r4, r4, #1
  4046d6:	d1e9      	bne.n	4046ac <__adddf3+0x10c>
  4046d8:	f091 0f00 	teq	r1, #0
  4046dc:	bf04      	itt	eq
  4046de:	4601      	moveq	r1, r0
  4046e0:	2000      	moveq	r0, #0
  4046e2:	fab1 f381 	clz	r3, r1
  4046e6:	bf08      	it	eq
  4046e8:	3320      	addeq	r3, #32
  4046ea:	f1a3 030b 	sub.w	r3, r3, #11
  4046ee:	f1b3 0220 	subs.w	r2, r3, #32
  4046f2:	da0c      	bge.n	40470e <__adddf3+0x16e>
  4046f4:	320c      	adds	r2, #12
  4046f6:	dd08      	ble.n	40470a <__adddf3+0x16a>
  4046f8:	f102 0c14 	add.w	ip, r2, #20
  4046fc:	f1c2 020c 	rsb	r2, r2, #12
  404700:	fa01 f00c 	lsl.w	r0, r1, ip
  404704:	fa21 f102 	lsr.w	r1, r1, r2
  404708:	e00c      	b.n	404724 <__adddf3+0x184>
  40470a:	f102 0214 	add.w	r2, r2, #20
  40470e:	bfd8      	it	le
  404710:	f1c2 0c20 	rsble	ip, r2, #32
  404714:	fa01 f102 	lsl.w	r1, r1, r2
  404718:	fa20 fc0c 	lsr.w	ip, r0, ip
  40471c:	bfdc      	itt	le
  40471e:	ea41 010c 	orrle.w	r1, r1, ip
  404722:	4090      	lslle	r0, r2
  404724:	1ae4      	subs	r4, r4, r3
  404726:	bfa2      	ittt	ge
  404728:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40472c:	4329      	orrge	r1, r5
  40472e:	bd30      	popge	{r4, r5, pc}
  404730:	ea6f 0404 	mvn.w	r4, r4
  404734:	3c1f      	subs	r4, #31
  404736:	da1c      	bge.n	404772 <__adddf3+0x1d2>
  404738:	340c      	adds	r4, #12
  40473a:	dc0e      	bgt.n	40475a <__adddf3+0x1ba>
  40473c:	f104 0414 	add.w	r4, r4, #20
  404740:	f1c4 0220 	rsb	r2, r4, #32
  404744:	fa20 f004 	lsr.w	r0, r0, r4
  404748:	fa01 f302 	lsl.w	r3, r1, r2
  40474c:	ea40 0003 	orr.w	r0, r0, r3
  404750:	fa21 f304 	lsr.w	r3, r1, r4
  404754:	ea45 0103 	orr.w	r1, r5, r3
  404758:	bd30      	pop	{r4, r5, pc}
  40475a:	f1c4 040c 	rsb	r4, r4, #12
  40475e:	f1c4 0220 	rsb	r2, r4, #32
  404762:	fa20 f002 	lsr.w	r0, r0, r2
  404766:	fa01 f304 	lsl.w	r3, r1, r4
  40476a:	ea40 0003 	orr.w	r0, r0, r3
  40476e:	4629      	mov	r1, r5
  404770:	bd30      	pop	{r4, r5, pc}
  404772:	fa21 f004 	lsr.w	r0, r1, r4
  404776:	4629      	mov	r1, r5
  404778:	bd30      	pop	{r4, r5, pc}
  40477a:	f094 0f00 	teq	r4, #0
  40477e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  404782:	bf06      	itte	eq
  404784:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  404788:	3401      	addeq	r4, #1
  40478a:	3d01      	subne	r5, #1
  40478c:	e74e      	b.n	40462c <__adddf3+0x8c>
  40478e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404792:	bf18      	it	ne
  404794:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404798:	d029      	beq.n	4047ee <__adddf3+0x24e>
  40479a:	ea94 0f05 	teq	r4, r5
  40479e:	bf08      	it	eq
  4047a0:	ea90 0f02 	teqeq	r0, r2
  4047a4:	d005      	beq.n	4047b2 <__adddf3+0x212>
  4047a6:	ea54 0c00 	orrs.w	ip, r4, r0
  4047aa:	bf04      	itt	eq
  4047ac:	4619      	moveq	r1, r3
  4047ae:	4610      	moveq	r0, r2
  4047b0:	bd30      	pop	{r4, r5, pc}
  4047b2:	ea91 0f03 	teq	r1, r3
  4047b6:	bf1e      	ittt	ne
  4047b8:	2100      	movne	r1, #0
  4047ba:	2000      	movne	r0, #0
  4047bc:	bd30      	popne	{r4, r5, pc}
  4047be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4047c2:	d105      	bne.n	4047d0 <__adddf3+0x230>
  4047c4:	0040      	lsls	r0, r0, #1
  4047c6:	4149      	adcs	r1, r1
  4047c8:	bf28      	it	cs
  4047ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4047ce:	bd30      	pop	{r4, r5, pc}
  4047d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4047d4:	bf3c      	itt	cc
  4047d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4047da:	bd30      	popcc	{r4, r5, pc}
  4047dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4047e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4047e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4047e8:	f04f 0000 	mov.w	r0, #0
  4047ec:	bd30      	pop	{r4, r5, pc}
  4047ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4047f2:	bf1a      	itte	ne
  4047f4:	4619      	movne	r1, r3
  4047f6:	4610      	movne	r0, r2
  4047f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4047fc:	bf1c      	itt	ne
  4047fe:	460b      	movne	r3, r1
  404800:	4602      	movne	r2, r0
  404802:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404806:	bf06      	itte	eq
  404808:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40480c:	ea91 0f03 	teqeq	r1, r3
  404810:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404814:	bd30      	pop	{r4, r5, pc}
  404816:	bf00      	nop

00404818 <__aeabi_ui2d>:
  404818:	f090 0f00 	teq	r0, #0
  40481c:	bf04      	itt	eq
  40481e:	2100      	moveq	r1, #0
  404820:	4770      	bxeq	lr
  404822:	b530      	push	{r4, r5, lr}
  404824:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404828:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40482c:	f04f 0500 	mov.w	r5, #0
  404830:	f04f 0100 	mov.w	r1, #0
  404834:	e750      	b.n	4046d8 <__adddf3+0x138>
  404836:	bf00      	nop

00404838 <__aeabi_i2d>:
  404838:	f090 0f00 	teq	r0, #0
  40483c:	bf04      	itt	eq
  40483e:	2100      	moveq	r1, #0
  404840:	4770      	bxeq	lr
  404842:	b530      	push	{r4, r5, lr}
  404844:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404848:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40484c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  404850:	bf48      	it	mi
  404852:	4240      	negmi	r0, r0
  404854:	f04f 0100 	mov.w	r1, #0
  404858:	e73e      	b.n	4046d8 <__adddf3+0x138>
  40485a:	bf00      	nop

0040485c <__aeabi_f2d>:
  40485c:	0042      	lsls	r2, r0, #1
  40485e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  404862:	ea4f 0131 	mov.w	r1, r1, rrx
  404866:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40486a:	bf1f      	itttt	ne
  40486c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  404870:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404874:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  404878:	4770      	bxne	lr
  40487a:	f092 0f00 	teq	r2, #0
  40487e:	bf14      	ite	ne
  404880:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404884:	4770      	bxeq	lr
  404886:	b530      	push	{r4, r5, lr}
  404888:	f44f 7460 	mov.w	r4, #896	; 0x380
  40488c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404890:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404894:	e720      	b.n	4046d8 <__adddf3+0x138>
  404896:	bf00      	nop

00404898 <__aeabi_ul2d>:
  404898:	ea50 0201 	orrs.w	r2, r0, r1
  40489c:	bf08      	it	eq
  40489e:	4770      	bxeq	lr
  4048a0:	b530      	push	{r4, r5, lr}
  4048a2:	f04f 0500 	mov.w	r5, #0
  4048a6:	e00a      	b.n	4048be <__aeabi_l2d+0x16>

004048a8 <__aeabi_l2d>:
  4048a8:	ea50 0201 	orrs.w	r2, r0, r1
  4048ac:	bf08      	it	eq
  4048ae:	4770      	bxeq	lr
  4048b0:	b530      	push	{r4, r5, lr}
  4048b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4048b6:	d502      	bpl.n	4048be <__aeabi_l2d+0x16>
  4048b8:	4240      	negs	r0, r0
  4048ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4048be:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4048c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4048c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4048ca:	f43f aedc 	beq.w	404686 <__adddf3+0xe6>
  4048ce:	f04f 0203 	mov.w	r2, #3
  4048d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4048d6:	bf18      	it	ne
  4048d8:	3203      	addne	r2, #3
  4048da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4048de:	bf18      	it	ne
  4048e0:	3203      	addne	r2, #3
  4048e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4048e6:	f1c2 0320 	rsb	r3, r2, #32
  4048ea:	fa00 fc03 	lsl.w	ip, r0, r3
  4048ee:	fa20 f002 	lsr.w	r0, r0, r2
  4048f2:	fa01 fe03 	lsl.w	lr, r1, r3
  4048f6:	ea40 000e 	orr.w	r0, r0, lr
  4048fa:	fa21 f102 	lsr.w	r1, r1, r2
  4048fe:	4414      	add	r4, r2
  404900:	e6c1      	b.n	404686 <__adddf3+0xe6>
  404902:	bf00      	nop

00404904 <__aeabi_dmul>:
  404904:	b570      	push	{r4, r5, r6, lr}
  404906:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40490a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40490e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404912:	bf1d      	ittte	ne
  404914:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404918:	ea94 0f0c 	teqne	r4, ip
  40491c:	ea95 0f0c 	teqne	r5, ip
  404920:	f000 f8de 	bleq	404ae0 <__aeabi_dmul+0x1dc>
  404924:	442c      	add	r4, r5
  404926:	ea81 0603 	eor.w	r6, r1, r3
  40492a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40492e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  404932:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  404936:	bf18      	it	ne
  404938:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40493c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404944:	d038      	beq.n	4049b8 <__aeabi_dmul+0xb4>
  404946:	fba0 ce02 	umull	ip, lr, r0, r2
  40494a:	f04f 0500 	mov.w	r5, #0
  40494e:	fbe1 e502 	umlal	lr, r5, r1, r2
  404952:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  404956:	fbe0 e503 	umlal	lr, r5, r0, r3
  40495a:	f04f 0600 	mov.w	r6, #0
  40495e:	fbe1 5603 	umlal	r5, r6, r1, r3
  404962:	f09c 0f00 	teq	ip, #0
  404966:	bf18      	it	ne
  404968:	f04e 0e01 	orrne.w	lr, lr, #1
  40496c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  404970:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  404974:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  404978:	d204      	bcs.n	404984 <__aeabi_dmul+0x80>
  40497a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40497e:	416d      	adcs	r5, r5
  404980:	eb46 0606 	adc.w	r6, r6, r6
  404984:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  404988:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40498c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  404990:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  404994:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  404998:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40499c:	bf88      	it	hi
  40499e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4049a2:	d81e      	bhi.n	4049e2 <__aeabi_dmul+0xde>
  4049a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4049a8:	bf08      	it	eq
  4049aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4049ae:	f150 0000 	adcs.w	r0, r0, #0
  4049b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4049b6:	bd70      	pop	{r4, r5, r6, pc}
  4049b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4049bc:	ea46 0101 	orr.w	r1, r6, r1
  4049c0:	ea40 0002 	orr.w	r0, r0, r2
  4049c4:	ea81 0103 	eor.w	r1, r1, r3
  4049c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4049cc:	bfc2      	ittt	gt
  4049ce:	ebd4 050c 	rsbsgt	r5, r4, ip
  4049d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4049d6:	bd70      	popgt	{r4, r5, r6, pc}
  4049d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4049dc:	f04f 0e00 	mov.w	lr, #0
  4049e0:	3c01      	subs	r4, #1
  4049e2:	f300 80ab 	bgt.w	404b3c <__aeabi_dmul+0x238>
  4049e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4049ea:	bfde      	ittt	le
  4049ec:	2000      	movle	r0, #0
  4049ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4049f2:	bd70      	pople	{r4, r5, r6, pc}
  4049f4:	f1c4 0400 	rsb	r4, r4, #0
  4049f8:	3c20      	subs	r4, #32
  4049fa:	da35      	bge.n	404a68 <__aeabi_dmul+0x164>
  4049fc:	340c      	adds	r4, #12
  4049fe:	dc1b      	bgt.n	404a38 <__aeabi_dmul+0x134>
  404a00:	f104 0414 	add.w	r4, r4, #20
  404a04:	f1c4 0520 	rsb	r5, r4, #32
  404a08:	fa00 f305 	lsl.w	r3, r0, r5
  404a0c:	fa20 f004 	lsr.w	r0, r0, r4
  404a10:	fa01 f205 	lsl.w	r2, r1, r5
  404a14:	ea40 0002 	orr.w	r0, r0, r2
  404a18:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404a1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404a20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404a24:	fa21 f604 	lsr.w	r6, r1, r4
  404a28:	eb42 0106 	adc.w	r1, r2, r6
  404a2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404a30:	bf08      	it	eq
  404a32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404a36:	bd70      	pop	{r4, r5, r6, pc}
  404a38:	f1c4 040c 	rsb	r4, r4, #12
  404a3c:	f1c4 0520 	rsb	r5, r4, #32
  404a40:	fa00 f304 	lsl.w	r3, r0, r4
  404a44:	fa20 f005 	lsr.w	r0, r0, r5
  404a48:	fa01 f204 	lsl.w	r2, r1, r4
  404a4c:	ea40 0002 	orr.w	r0, r0, r2
  404a50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404a54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404a58:	f141 0100 	adc.w	r1, r1, #0
  404a5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404a60:	bf08      	it	eq
  404a62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404a66:	bd70      	pop	{r4, r5, r6, pc}
  404a68:	f1c4 0520 	rsb	r5, r4, #32
  404a6c:	fa00 f205 	lsl.w	r2, r0, r5
  404a70:	ea4e 0e02 	orr.w	lr, lr, r2
  404a74:	fa20 f304 	lsr.w	r3, r0, r4
  404a78:	fa01 f205 	lsl.w	r2, r1, r5
  404a7c:	ea43 0302 	orr.w	r3, r3, r2
  404a80:	fa21 f004 	lsr.w	r0, r1, r4
  404a84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404a88:	fa21 f204 	lsr.w	r2, r1, r4
  404a8c:	ea20 0002 	bic.w	r0, r0, r2
  404a90:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  404a94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404a98:	bf08      	it	eq
  404a9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404a9e:	bd70      	pop	{r4, r5, r6, pc}
  404aa0:	f094 0f00 	teq	r4, #0
  404aa4:	d10f      	bne.n	404ac6 <__aeabi_dmul+0x1c2>
  404aa6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  404aaa:	0040      	lsls	r0, r0, #1
  404aac:	eb41 0101 	adc.w	r1, r1, r1
  404ab0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404ab4:	bf08      	it	eq
  404ab6:	3c01      	subeq	r4, #1
  404ab8:	d0f7      	beq.n	404aaa <__aeabi_dmul+0x1a6>
  404aba:	ea41 0106 	orr.w	r1, r1, r6
  404abe:	f095 0f00 	teq	r5, #0
  404ac2:	bf18      	it	ne
  404ac4:	4770      	bxne	lr
  404ac6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  404aca:	0052      	lsls	r2, r2, #1
  404acc:	eb43 0303 	adc.w	r3, r3, r3
  404ad0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  404ad4:	bf08      	it	eq
  404ad6:	3d01      	subeq	r5, #1
  404ad8:	d0f7      	beq.n	404aca <__aeabi_dmul+0x1c6>
  404ada:	ea43 0306 	orr.w	r3, r3, r6
  404ade:	4770      	bx	lr
  404ae0:	ea94 0f0c 	teq	r4, ip
  404ae4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404ae8:	bf18      	it	ne
  404aea:	ea95 0f0c 	teqne	r5, ip
  404aee:	d00c      	beq.n	404b0a <__aeabi_dmul+0x206>
  404af0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404af4:	bf18      	it	ne
  404af6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404afa:	d1d1      	bne.n	404aa0 <__aeabi_dmul+0x19c>
  404afc:	ea81 0103 	eor.w	r1, r1, r3
  404b00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404b04:	f04f 0000 	mov.w	r0, #0
  404b08:	bd70      	pop	{r4, r5, r6, pc}
  404b0a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404b0e:	bf06      	itte	eq
  404b10:	4610      	moveq	r0, r2
  404b12:	4619      	moveq	r1, r3
  404b14:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404b18:	d019      	beq.n	404b4e <__aeabi_dmul+0x24a>
  404b1a:	ea94 0f0c 	teq	r4, ip
  404b1e:	d102      	bne.n	404b26 <__aeabi_dmul+0x222>
  404b20:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404b24:	d113      	bne.n	404b4e <__aeabi_dmul+0x24a>
  404b26:	ea95 0f0c 	teq	r5, ip
  404b2a:	d105      	bne.n	404b38 <__aeabi_dmul+0x234>
  404b2c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404b30:	bf1c      	itt	ne
  404b32:	4610      	movne	r0, r2
  404b34:	4619      	movne	r1, r3
  404b36:	d10a      	bne.n	404b4e <__aeabi_dmul+0x24a>
  404b38:	ea81 0103 	eor.w	r1, r1, r3
  404b3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404b40:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404b44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404b48:	f04f 0000 	mov.w	r0, #0
  404b4c:	bd70      	pop	{r4, r5, r6, pc}
  404b4e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404b52:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  404b56:	bd70      	pop	{r4, r5, r6, pc}

00404b58 <__aeabi_ddiv>:
  404b58:	b570      	push	{r4, r5, r6, lr}
  404b5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404b5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404b62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404b66:	bf1d      	ittte	ne
  404b68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404b6c:	ea94 0f0c 	teqne	r4, ip
  404b70:	ea95 0f0c 	teqne	r5, ip
  404b74:	f000 f8a7 	bleq	404cc6 <__aeabi_ddiv+0x16e>
  404b78:	eba4 0405 	sub.w	r4, r4, r5
  404b7c:	ea81 0e03 	eor.w	lr, r1, r3
  404b80:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404b84:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404b88:	f000 8088 	beq.w	404c9c <__aeabi_ddiv+0x144>
  404b8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404b90:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  404b94:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  404b98:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  404b9c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  404ba0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  404ba4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  404ba8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  404bac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  404bb0:	429d      	cmp	r5, r3
  404bb2:	bf08      	it	eq
  404bb4:	4296      	cmpeq	r6, r2
  404bb6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  404bba:	f504 7440 	add.w	r4, r4, #768	; 0x300
  404bbe:	d202      	bcs.n	404bc6 <__aeabi_ddiv+0x6e>
  404bc0:	085b      	lsrs	r3, r3, #1
  404bc2:	ea4f 0232 	mov.w	r2, r2, rrx
  404bc6:	1ab6      	subs	r6, r6, r2
  404bc8:	eb65 0503 	sbc.w	r5, r5, r3
  404bcc:	085b      	lsrs	r3, r3, #1
  404bce:	ea4f 0232 	mov.w	r2, r2, rrx
  404bd2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  404bd6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404bda:	ebb6 0e02 	subs.w	lr, r6, r2
  404bde:	eb75 0e03 	sbcs.w	lr, r5, r3
  404be2:	bf22      	ittt	cs
  404be4:	1ab6      	subcs	r6, r6, r2
  404be6:	4675      	movcs	r5, lr
  404be8:	ea40 000c 	orrcs.w	r0, r0, ip
  404bec:	085b      	lsrs	r3, r3, #1
  404bee:	ea4f 0232 	mov.w	r2, r2, rrx
  404bf2:	ebb6 0e02 	subs.w	lr, r6, r2
  404bf6:	eb75 0e03 	sbcs.w	lr, r5, r3
  404bfa:	bf22      	ittt	cs
  404bfc:	1ab6      	subcs	r6, r6, r2
  404bfe:	4675      	movcs	r5, lr
  404c00:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404c04:	085b      	lsrs	r3, r3, #1
  404c06:	ea4f 0232 	mov.w	r2, r2, rrx
  404c0a:	ebb6 0e02 	subs.w	lr, r6, r2
  404c0e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404c12:	bf22      	ittt	cs
  404c14:	1ab6      	subcs	r6, r6, r2
  404c16:	4675      	movcs	r5, lr
  404c18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404c1c:	085b      	lsrs	r3, r3, #1
  404c1e:	ea4f 0232 	mov.w	r2, r2, rrx
  404c22:	ebb6 0e02 	subs.w	lr, r6, r2
  404c26:	eb75 0e03 	sbcs.w	lr, r5, r3
  404c2a:	bf22      	ittt	cs
  404c2c:	1ab6      	subcs	r6, r6, r2
  404c2e:	4675      	movcs	r5, lr
  404c30:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404c34:	ea55 0e06 	orrs.w	lr, r5, r6
  404c38:	d018      	beq.n	404c6c <__aeabi_ddiv+0x114>
  404c3a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404c3e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  404c42:	ea4f 1606 	mov.w	r6, r6, lsl #4
  404c46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404c4a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  404c4e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  404c52:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  404c56:	d1c0      	bne.n	404bda <__aeabi_ddiv+0x82>
  404c58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404c5c:	d10b      	bne.n	404c76 <__aeabi_ddiv+0x11e>
  404c5e:	ea41 0100 	orr.w	r1, r1, r0
  404c62:	f04f 0000 	mov.w	r0, #0
  404c66:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  404c6a:	e7b6      	b.n	404bda <__aeabi_ddiv+0x82>
  404c6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404c70:	bf04      	itt	eq
  404c72:	4301      	orreq	r1, r0
  404c74:	2000      	moveq	r0, #0
  404c76:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404c7a:	bf88      	it	hi
  404c7c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404c80:	f63f aeaf 	bhi.w	4049e2 <__aeabi_dmul+0xde>
  404c84:	ebb5 0c03 	subs.w	ip, r5, r3
  404c88:	bf04      	itt	eq
  404c8a:	ebb6 0c02 	subseq.w	ip, r6, r2
  404c8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404c92:	f150 0000 	adcs.w	r0, r0, #0
  404c96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404c9a:	bd70      	pop	{r4, r5, r6, pc}
  404c9c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  404ca0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  404ca4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  404ca8:	bfc2      	ittt	gt
  404caa:	ebd4 050c 	rsbsgt	r5, r4, ip
  404cae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404cb2:	bd70      	popgt	{r4, r5, r6, pc}
  404cb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404cb8:	f04f 0e00 	mov.w	lr, #0
  404cbc:	3c01      	subs	r4, #1
  404cbe:	e690      	b.n	4049e2 <__aeabi_dmul+0xde>
  404cc0:	ea45 0e06 	orr.w	lr, r5, r6
  404cc4:	e68d      	b.n	4049e2 <__aeabi_dmul+0xde>
  404cc6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404cca:	ea94 0f0c 	teq	r4, ip
  404cce:	bf08      	it	eq
  404cd0:	ea95 0f0c 	teqeq	r5, ip
  404cd4:	f43f af3b 	beq.w	404b4e <__aeabi_dmul+0x24a>
  404cd8:	ea94 0f0c 	teq	r4, ip
  404cdc:	d10a      	bne.n	404cf4 <__aeabi_ddiv+0x19c>
  404cde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404ce2:	f47f af34 	bne.w	404b4e <__aeabi_dmul+0x24a>
  404ce6:	ea95 0f0c 	teq	r5, ip
  404cea:	f47f af25 	bne.w	404b38 <__aeabi_dmul+0x234>
  404cee:	4610      	mov	r0, r2
  404cf0:	4619      	mov	r1, r3
  404cf2:	e72c      	b.n	404b4e <__aeabi_dmul+0x24a>
  404cf4:	ea95 0f0c 	teq	r5, ip
  404cf8:	d106      	bne.n	404d08 <__aeabi_ddiv+0x1b0>
  404cfa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404cfe:	f43f aefd 	beq.w	404afc <__aeabi_dmul+0x1f8>
  404d02:	4610      	mov	r0, r2
  404d04:	4619      	mov	r1, r3
  404d06:	e722      	b.n	404b4e <__aeabi_dmul+0x24a>
  404d08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404d0c:	bf18      	it	ne
  404d0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404d12:	f47f aec5 	bne.w	404aa0 <__aeabi_dmul+0x19c>
  404d16:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  404d1a:	f47f af0d 	bne.w	404b38 <__aeabi_dmul+0x234>
  404d1e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  404d22:	f47f aeeb 	bne.w	404afc <__aeabi_dmul+0x1f8>
  404d26:	e712      	b.n	404b4e <__aeabi_dmul+0x24a>

00404d28 <__gedf2>:
  404d28:	f04f 3cff 	mov.w	ip, #4294967295
  404d2c:	e006      	b.n	404d3c <__cmpdf2+0x4>
  404d2e:	bf00      	nop

00404d30 <__ledf2>:
  404d30:	f04f 0c01 	mov.w	ip, #1
  404d34:	e002      	b.n	404d3c <__cmpdf2+0x4>
  404d36:	bf00      	nop

00404d38 <__cmpdf2>:
  404d38:	f04f 0c01 	mov.w	ip, #1
  404d3c:	f84d cd04 	str.w	ip, [sp, #-4]!
  404d40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404d44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404d48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404d4c:	bf18      	it	ne
  404d4e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  404d52:	d01b      	beq.n	404d8c <__cmpdf2+0x54>
  404d54:	b001      	add	sp, #4
  404d56:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  404d5a:	bf0c      	ite	eq
  404d5c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  404d60:	ea91 0f03 	teqne	r1, r3
  404d64:	bf02      	ittt	eq
  404d66:	ea90 0f02 	teqeq	r0, r2
  404d6a:	2000      	moveq	r0, #0
  404d6c:	4770      	bxeq	lr
  404d6e:	f110 0f00 	cmn.w	r0, #0
  404d72:	ea91 0f03 	teq	r1, r3
  404d76:	bf58      	it	pl
  404d78:	4299      	cmppl	r1, r3
  404d7a:	bf08      	it	eq
  404d7c:	4290      	cmpeq	r0, r2
  404d7e:	bf2c      	ite	cs
  404d80:	17d8      	asrcs	r0, r3, #31
  404d82:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  404d86:	f040 0001 	orr.w	r0, r0, #1
  404d8a:	4770      	bx	lr
  404d8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404d90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404d94:	d102      	bne.n	404d9c <__cmpdf2+0x64>
  404d96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404d9a:	d107      	bne.n	404dac <__cmpdf2+0x74>
  404d9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404da0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404da4:	d1d6      	bne.n	404d54 <__cmpdf2+0x1c>
  404da6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404daa:	d0d3      	beq.n	404d54 <__cmpdf2+0x1c>
  404dac:	f85d 0b04 	ldr.w	r0, [sp], #4
  404db0:	4770      	bx	lr
  404db2:	bf00      	nop

00404db4 <__aeabi_cdrcmple>:
  404db4:	4684      	mov	ip, r0
  404db6:	4610      	mov	r0, r2
  404db8:	4662      	mov	r2, ip
  404dba:	468c      	mov	ip, r1
  404dbc:	4619      	mov	r1, r3
  404dbe:	4663      	mov	r3, ip
  404dc0:	e000      	b.n	404dc4 <__aeabi_cdcmpeq>
  404dc2:	bf00      	nop

00404dc4 <__aeabi_cdcmpeq>:
  404dc4:	b501      	push	{r0, lr}
  404dc6:	f7ff ffb7 	bl	404d38 <__cmpdf2>
  404dca:	2800      	cmp	r0, #0
  404dcc:	bf48      	it	mi
  404dce:	f110 0f00 	cmnmi.w	r0, #0
  404dd2:	bd01      	pop	{r0, pc}

00404dd4 <__aeabi_dcmpeq>:
  404dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
  404dd8:	f7ff fff4 	bl	404dc4 <__aeabi_cdcmpeq>
  404ddc:	bf0c      	ite	eq
  404dde:	2001      	moveq	r0, #1
  404de0:	2000      	movne	r0, #0
  404de2:	f85d fb08 	ldr.w	pc, [sp], #8
  404de6:	bf00      	nop

00404de8 <__aeabi_dcmplt>:
  404de8:	f84d ed08 	str.w	lr, [sp, #-8]!
  404dec:	f7ff ffea 	bl	404dc4 <__aeabi_cdcmpeq>
  404df0:	bf34      	ite	cc
  404df2:	2001      	movcc	r0, #1
  404df4:	2000      	movcs	r0, #0
  404df6:	f85d fb08 	ldr.w	pc, [sp], #8
  404dfa:	bf00      	nop

00404dfc <__aeabi_dcmple>:
  404dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
  404e00:	f7ff ffe0 	bl	404dc4 <__aeabi_cdcmpeq>
  404e04:	bf94      	ite	ls
  404e06:	2001      	movls	r0, #1
  404e08:	2000      	movhi	r0, #0
  404e0a:	f85d fb08 	ldr.w	pc, [sp], #8
  404e0e:	bf00      	nop

00404e10 <__aeabi_dcmpge>:
  404e10:	f84d ed08 	str.w	lr, [sp, #-8]!
  404e14:	f7ff ffce 	bl	404db4 <__aeabi_cdrcmple>
  404e18:	bf94      	ite	ls
  404e1a:	2001      	movls	r0, #1
  404e1c:	2000      	movhi	r0, #0
  404e1e:	f85d fb08 	ldr.w	pc, [sp], #8
  404e22:	bf00      	nop

00404e24 <__aeabi_dcmpgt>:
  404e24:	f84d ed08 	str.w	lr, [sp, #-8]!
  404e28:	f7ff ffc4 	bl	404db4 <__aeabi_cdrcmple>
  404e2c:	bf34      	ite	cc
  404e2e:	2001      	movcc	r0, #1
  404e30:	2000      	movcs	r0, #0
  404e32:	f85d fb08 	ldr.w	pc, [sp], #8
  404e36:	bf00      	nop

00404e38 <__aeabi_dcmpun>:
  404e38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404e3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404e40:	d102      	bne.n	404e48 <__aeabi_dcmpun+0x10>
  404e42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404e46:	d10a      	bne.n	404e5e <__aeabi_dcmpun+0x26>
  404e48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404e4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404e50:	d102      	bne.n	404e58 <__aeabi_dcmpun+0x20>
  404e52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404e56:	d102      	bne.n	404e5e <__aeabi_dcmpun+0x26>
  404e58:	f04f 0000 	mov.w	r0, #0
  404e5c:	4770      	bx	lr
  404e5e:	f04f 0001 	mov.w	r0, #1
  404e62:	4770      	bx	lr

00404e64 <__aeabi_d2iz>:
  404e64:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404e68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  404e6c:	d215      	bcs.n	404e9a <__aeabi_d2iz+0x36>
  404e6e:	d511      	bpl.n	404e94 <__aeabi_d2iz+0x30>
  404e70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  404e74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  404e78:	d912      	bls.n	404ea0 <__aeabi_d2iz+0x3c>
  404e7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  404e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  404e82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  404e86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404e8a:	fa23 f002 	lsr.w	r0, r3, r2
  404e8e:	bf18      	it	ne
  404e90:	4240      	negne	r0, r0
  404e92:	4770      	bx	lr
  404e94:	f04f 0000 	mov.w	r0, #0
  404e98:	4770      	bx	lr
  404e9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  404e9e:	d105      	bne.n	404eac <__aeabi_d2iz+0x48>
  404ea0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  404ea4:	bf08      	it	eq
  404ea6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  404eaa:	4770      	bx	lr
  404eac:	f04f 0000 	mov.w	r0, #0
  404eb0:	4770      	bx	lr
  404eb2:	bf00      	nop

00404eb4 <__aeabi_d2f>:
  404eb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404eb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  404ebc:	bf24      	itt	cs
  404ebe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  404ec2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  404ec6:	d90d      	bls.n	404ee4 <__aeabi_d2f+0x30>
  404ec8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404ecc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  404ed0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  404ed4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  404ed8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  404edc:	bf08      	it	eq
  404ede:	f020 0001 	biceq.w	r0, r0, #1
  404ee2:	4770      	bx	lr
  404ee4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  404ee8:	d121      	bne.n	404f2e <__aeabi_d2f+0x7a>
  404eea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  404eee:	bfbc      	itt	lt
  404ef0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  404ef4:	4770      	bxlt	lr
  404ef6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404efa:	ea4f 5252 	mov.w	r2, r2, lsr #21
  404efe:	f1c2 0218 	rsb	r2, r2, #24
  404f02:	f1c2 0c20 	rsb	ip, r2, #32
  404f06:	fa10 f30c 	lsls.w	r3, r0, ip
  404f0a:	fa20 f002 	lsr.w	r0, r0, r2
  404f0e:	bf18      	it	ne
  404f10:	f040 0001 	orrne.w	r0, r0, #1
  404f14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  404f18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  404f1c:	fa03 fc0c 	lsl.w	ip, r3, ip
  404f20:	ea40 000c 	orr.w	r0, r0, ip
  404f24:	fa23 f302 	lsr.w	r3, r3, r2
  404f28:	ea4f 0343 	mov.w	r3, r3, lsl #1
  404f2c:	e7cc      	b.n	404ec8 <__aeabi_d2f+0x14>
  404f2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
  404f32:	d107      	bne.n	404f44 <__aeabi_d2f+0x90>
  404f34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  404f38:	bf1e      	ittt	ne
  404f3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  404f3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  404f42:	4770      	bxne	lr
  404f44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  404f48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  404f4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404f50:	4770      	bx	lr
  404f52:	bf00      	nop

00404f54 <__libc_init_array>:
  404f54:	b570      	push	{r4, r5, r6, lr}
  404f56:	4e0d      	ldr	r6, [pc, #52]	; (404f8c <__libc_init_array+0x38>)
  404f58:	4c0d      	ldr	r4, [pc, #52]	; (404f90 <__libc_init_array+0x3c>)
  404f5a:	1ba4      	subs	r4, r4, r6
  404f5c:	10a4      	asrs	r4, r4, #2
  404f5e:	2500      	movs	r5, #0
  404f60:	42a5      	cmp	r5, r4
  404f62:	d109      	bne.n	404f78 <__libc_init_array+0x24>
  404f64:	4e0b      	ldr	r6, [pc, #44]	; (404f94 <__libc_init_array+0x40>)
  404f66:	4c0c      	ldr	r4, [pc, #48]	; (404f98 <__libc_init_array+0x44>)
  404f68:	f003 f9f6 	bl	408358 <_init>
  404f6c:	1ba4      	subs	r4, r4, r6
  404f6e:	10a4      	asrs	r4, r4, #2
  404f70:	2500      	movs	r5, #0
  404f72:	42a5      	cmp	r5, r4
  404f74:	d105      	bne.n	404f82 <__libc_init_array+0x2e>
  404f76:	bd70      	pop	{r4, r5, r6, pc}
  404f78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  404f7c:	4798      	blx	r3
  404f7e:	3501      	adds	r5, #1
  404f80:	e7ee      	b.n	404f60 <__libc_init_array+0xc>
  404f82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  404f86:	4798      	blx	r3
  404f88:	3501      	adds	r5, #1
  404f8a:	e7f2      	b.n	404f72 <__libc_init_array+0x1e>
  404f8c:	00408364 	.word	0x00408364
  404f90:	00408364 	.word	0x00408364
  404f94:	00408364 	.word	0x00408364
  404f98:	00408368 	.word	0x00408368

00404f9c <memcpy>:
  404f9c:	b510      	push	{r4, lr}
  404f9e:	1e43      	subs	r3, r0, #1
  404fa0:	440a      	add	r2, r1
  404fa2:	4291      	cmp	r1, r2
  404fa4:	d100      	bne.n	404fa8 <memcpy+0xc>
  404fa6:	bd10      	pop	{r4, pc}
  404fa8:	f811 4b01 	ldrb.w	r4, [r1], #1
  404fac:	f803 4f01 	strb.w	r4, [r3, #1]!
  404fb0:	e7f7      	b.n	404fa2 <memcpy+0x6>

00404fb2 <memset>:
  404fb2:	4402      	add	r2, r0
  404fb4:	4603      	mov	r3, r0
  404fb6:	4293      	cmp	r3, r2
  404fb8:	d100      	bne.n	404fbc <memset+0xa>
  404fba:	4770      	bx	lr
  404fbc:	f803 1b01 	strb.w	r1, [r3], #1
  404fc0:	e7f9      	b.n	404fb6 <memset+0x4>

00404fc2 <__cvt>:
  404fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404fc6:	b088      	sub	sp, #32
  404fc8:	2b00      	cmp	r3, #0
  404fca:	9f14      	ldr	r7, [sp, #80]	; 0x50
  404fcc:	9912      	ldr	r1, [sp, #72]	; 0x48
  404fce:	9d10      	ldr	r5, [sp, #64]	; 0x40
  404fd0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  404fd4:	461e      	mov	r6, r3
  404fd6:	f027 0720 	bic.w	r7, r7, #32
  404fda:	bfbb      	ittet	lt
  404fdc:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  404fe0:	461e      	movlt	r6, r3
  404fe2:	2300      	movge	r3, #0
  404fe4:	232d      	movlt	r3, #45	; 0x2d
  404fe6:	2f46      	cmp	r7, #70	; 0x46
  404fe8:	4614      	mov	r4, r2
  404fea:	700b      	strb	r3, [r1, #0]
  404fec:	d004      	beq.n	404ff8 <__cvt+0x36>
  404fee:	2f45      	cmp	r7, #69	; 0x45
  404ff0:	d100      	bne.n	404ff4 <__cvt+0x32>
  404ff2:	3501      	adds	r5, #1
  404ff4:	2302      	movs	r3, #2
  404ff6:	e000      	b.n	404ffa <__cvt+0x38>
  404ff8:	2303      	movs	r3, #3
  404ffa:	aa07      	add	r2, sp, #28
  404ffc:	9204      	str	r2, [sp, #16]
  404ffe:	aa06      	add	r2, sp, #24
  405000:	9203      	str	r2, [sp, #12]
  405002:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  405006:	4622      	mov	r2, r4
  405008:	4633      	mov	r3, r6
  40500a:	f000 fd9d 	bl	405b48 <_dtoa_r>
  40500e:	2f47      	cmp	r7, #71	; 0x47
  405010:	4680      	mov	r8, r0
  405012:	d102      	bne.n	40501a <__cvt+0x58>
  405014:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405016:	07db      	lsls	r3, r3, #31
  405018:	d526      	bpl.n	405068 <__cvt+0xa6>
  40501a:	2f46      	cmp	r7, #70	; 0x46
  40501c:	eb08 0905 	add.w	r9, r8, r5
  405020:	d111      	bne.n	405046 <__cvt+0x84>
  405022:	f898 3000 	ldrb.w	r3, [r8]
  405026:	2b30      	cmp	r3, #48	; 0x30
  405028:	d10a      	bne.n	405040 <__cvt+0x7e>
  40502a:	2200      	movs	r2, #0
  40502c:	2300      	movs	r3, #0
  40502e:	4620      	mov	r0, r4
  405030:	4631      	mov	r1, r6
  405032:	f7ff fecf 	bl	404dd4 <__aeabi_dcmpeq>
  405036:	b918      	cbnz	r0, 405040 <__cvt+0x7e>
  405038:	f1c5 0501 	rsb	r5, r5, #1
  40503c:	f8ca 5000 	str.w	r5, [sl]
  405040:	f8da 3000 	ldr.w	r3, [sl]
  405044:	4499      	add	r9, r3
  405046:	2200      	movs	r2, #0
  405048:	2300      	movs	r3, #0
  40504a:	4620      	mov	r0, r4
  40504c:	4631      	mov	r1, r6
  40504e:	f7ff fec1 	bl	404dd4 <__aeabi_dcmpeq>
  405052:	b938      	cbnz	r0, 405064 <__cvt+0xa2>
  405054:	2230      	movs	r2, #48	; 0x30
  405056:	9b07      	ldr	r3, [sp, #28]
  405058:	4599      	cmp	r9, r3
  40505a:	d905      	bls.n	405068 <__cvt+0xa6>
  40505c:	1c59      	adds	r1, r3, #1
  40505e:	9107      	str	r1, [sp, #28]
  405060:	701a      	strb	r2, [r3, #0]
  405062:	e7f8      	b.n	405056 <__cvt+0x94>
  405064:	f8cd 901c 	str.w	r9, [sp, #28]
  405068:	9b07      	ldr	r3, [sp, #28]
  40506a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40506c:	eba3 0308 	sub.w	r3, r3, r8
  405070:	4640      	mov	r0, r8
  405072:	6013      	str	r3, [r2, #0]
  405074:	b008      	add	sp, #32
  405076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040507a <__exponent>:
  40507a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  40507c:	4603      	mov	r3, r0
  40507e:	2900      	cmp	r1, #0
  405080:	bfb8      	it	lt
  405082:	4249      	neglt	r1, r1
  405084:	f803 2b02 	strb.w	r2, [r3], #2
  405088:	bfb4      	ite	lt
  40508a:	222d      	movlt	r2, #45	; 0x2d
  40508c:	222b      	movge	r2, #43	; 0x2b
  40508e:	2909      	cmp	r1, #9
  405090:	7042      	strb	r2, [r0, #1]
  405092:	dd20      	ble.n	4050d6 <__exponent+0x5c>
  405094:	f10d 0207 	add.w	r2, sp, #7
  405098:	4617      	mov	r7, r2
  40509a:	260a      	movs	r6, #10
  40509c:	fb91 f5f6 	sdiv	r5, r1, r6
  4050a0:	fb06 1115 	mls	r1, r6, r5, r1
  4050a4:	3130      	adds	r1, #48	; 0x30
  4050a6:	2d09      	cmp	r5, #9
  4050a8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4050ac:	f102 34ff 	add.w	r4, r2, #4294967295
  4050b0:	4629      	mov	r1, r5
  4050b2:	dc09      	bgt.n	4050c8 <__exponent+0x4e>
  4050b4:	3130      	adds	r1, #48	; 0x30
  4050b6:	3a02      	subs	r2, #2
  4050b8:	f804 1c01 	strb.w	r1, [r4, #-1]
  4050bc:	42ba      	cmp	r2, r7
  4050be:	461c      	mov	r4, r3
  4050c0:	d304      	bcc.n	4050cc <__exponent+0x52>
  4050c2:	1a20      	subs	r0, r4, r0
  4050c4:	b003      	add	sp, #12
  4050c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050c8:	4622      	mov	r2, r4
  4050ca:	e7e7      	b.n	40509c <__exponent+0x22>
  4050cc:	f812 1b01 	ldrb.w	r1, [r2], #1
  4050d0:	f803 1b01 	strb.w	r1, [r3], #1
  4050d4:	e7f2      	b.n	4050bc <__exponent+0x42>
  4050d6:	2230      	movs	r2, #48	; 0x30
  4050d8:	461c      	mov	r4, r3
  4050da:	4411      	add	r1, r2
  4050dc:	f804 2b02 	strb.w	r2, [r4], #2
  4050e0:	7059      	strb	r1, [r3, #1]
  4050e2:	e7ee      	b.n	4050c2 <__exponent+0x48>

004050e4 <_printf_float>:
  4050e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050e8:	b091      	sub	sp, #68	; 0x44
  4050ea:	460c      	mov	r4, r1
  4050ec:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  4050ee:	4693      	mov	fp, r2
  4050f0:	461e      	mov	r6, r3
  4050f2:	4605      	mov	r5, r0
  4050f4:	f001 fc76 	bl	4069e4 <_localeconv_r>
  4050f8:	6803      	ldr	r3, [r0, #0]
  4050fa:	9309      	str	r3, [sp, #36]	; 0x24
  4050fc:	4618      	mov	r0, r3
  4050fe:	f000 fc8d 	bl	405a1c <strlen>
  405102:	2300      	movs	r3, #0
  405104:	930e      	str	r3, [sp, #56]	; 0x38
  405106:	683b      	ldr	r3, [r7, #0]
  405108:	900a      	str	r0, [sp, #40]	; 0x28
  40510a:	3307      	adds	r3, #7
  40510c:	f023 0307 	bic.w	r3, r3, #7
  405110:	f103 0208 	add.w	r2, r3, #8
  405114:	f894 8018 	ldrb.w	r8, [r4, #24]
  405118:	f8d4 a000 	ldr.w	sl, [r4]
  40511c:	603a      	str	r2, [r7, #0]
  40511e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405122:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  405126:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  40512a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  40512c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  405130:	930b      	str	r3, [sp, #44]	; 0x2c
  405132:	f04f 32ff 	mov.w	r2, #4294967295
  405136:	4ba6      	ldr	r3, [pc, #664]	; (4053d0 <_printf_float+0x2ec>)
  405138:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40513a:	4638      	mov	r0, r7
  40513c:	f7ff fe7c 	bl	404e38 <__aeabi_dcmpun>
  405140:	2800      	cmp	r0, #0
  405142:	f040 81f7 	bne.w	405534 <_printf_float+0x450>
  405146:	f04f 32ff 	mov.w	r2, #4294967295
  40514a:	4ba1      	ldr	r3, [pc, #644]	; (4053d0 <_printf_float+0x2ec>)
  40514c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40514e:	4638      	mov	r0, r7
  405150:	f7ff fe54 	bl	404dfc <__aeabi_dcmple>
  405154:	2800      	cmp	r0, #0
  405156:	f040 81ed 	bne.w	405534 <_printf_float+0x450>
  40515a:	2200      	movs	r2, #0
  40515c:	2300      	movs	r3, #0
  40515e:	4638      	mov	r0, r7
  405160:	4649      	mov	r1, r9
  405162:	f7ff fe41 	bl	404de8 <__aeabi_dcmplt>
  405166:	b110      	cbz	r0, 40516e <_printf_float+0x8a>
  405168:	232d      	movs	r3, #45	; 0x2d
  40516a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40516e:	4b99      	ldr	r3, [pc, #612]	; (4053d4 <_printf_float+0x2f0>)
  405170:	4f99      	ldr	r7, [pc, #612]	; (4053d8 <_printf_float+0x2f4>)
  405172:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  405176:	bf98      	it	ls
  405178:	461f      	movls	r7, r3
  40517a:	2303      	movs	r3, #3
  40517c:	6123      	str	r3, [r4, #16]
  40517e:	f02a 0304 	bic.w	r3, sl, #4
  405182:	6023      	str	r3, [r4, #0]
  405184:	f04f 0900 	mov.w	r9, #0
  405188:	9600      	str	r6, [sp, #0]
  40518a:	465b      	mov	r3, fp
  40518c:	aa0f      	add	r2, sp, #60	; 0x3c
  40518e:	4621      	mov	r1, r4
  405190:	4628      	mov	r0, r5
  405192:	f000 f9df 	bl	405554 <_printf_common>
  405196:	3001      	adds	r0, #1
  405198:	f040 809a 	bne.w	4052d0 <_printf_float+0x1ec>
  40519c:	f04f 30ff 	mov.w	r0, #4294967295
  4051a0:	b011      	add	sp, #68	; 0x44
  4051a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051a6:	6862      	ldr	r2, [r4, #4]
  4051a8:	1c53      	adds	r3, r2, #1
  4051aa:	a80e      	add	r0, sp, #56	; 0x38
  4051ac:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  4051b0:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  4051b4:	d141      	bne.n	40523a <_printf_float+0x156>
  4051b6:	2206      	movs	r2, #6
  4051b8:	6062      	str	r2, [r4, #4]
  4051ba:	6023      	str	r3, [r4, #0]
  4051bc:	2100      	movs	r1, #0
  4051be:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  4051c2:	9301      	str	r3, [sp, #4]
  4051c4:	6863      	ldr	r3, [r4, #4]
  4051c6:	9005      	str	r0, [sp, #20]
  4051c8:	9202      	str	r2, [sp, #8]
  4051ca:	9300      	str	r3, [sp, #0]
  4051cc:	463a      	mov	r2, r7
  4051ce:	464b      	mov	r3, r9
  4051d0:	9106      	str	r1, [sp, #24]
  4051d2:	f8cd 8010 	str.w	r8, [sp, #16]
  4051d6:	f8cd e00c 	str.w	lr, [sp, #12]
  4051da:	4628      	mov	r0, r5
  4051dc:	f7ff fef1 	bl	404fc2 <__cvt>
  4051e0:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  4051e4:	2b47      	cmp	r3, #71	; 0x47
  4051e6:	4607      	mov	r7, r0
  4051e8:	d109      	bne.n	4051fe <_printf_float+0x11a>
  4051ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4051ec:	1cd8      	adds	r0, r3, #3
  4051ee:	db02      	blt.n	4051f6 <_printf_float+0x112>
  4051f0:	6862      	ldr	r2, [r4, #4]
  4051f2:	4293      	cmp	r3, r2
  4051f4:	dd59      	ble.n	4052aa <_printf_float+0x1c6>
  4051f6:	f1a8 0802 	sub.w	r8, r8, #2
  4051fa:	fa5f f888 	uxtb.w	r8, r8
  4051fe:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  405202:	990d      	ldr	r1, [sp, #52]	; 0x34
  405204:	d836      	bhi.n	405274 <_printf_float+0x190>
  405206:	3901      	subs	r1, #1
  405208:	4642      	mov	r2, r8
  40520a:	f104 0050 	add.w	r0, r4, #80	; 0x50
  40520e:	910d      	str	r1, [sp, #52]	; 0x34
  405210:	f7ff ff33 	bl	40507a <__exponent>
  405214:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405216:	1883      	adds	r3, r0, r2
  405218:	2a01      	cmp	r2, #1
  40521a:	4681      	mov	r9, r0
  40521c:	6123      	str	r3, [r4, #16]
  40521e:	dc02      	bgt.n	405226 <_printf_float+0x142>
  405220:	6822      	ldr	r2, [r4, #0]
  405222:	07d1      	lsls	r1, r2, #31
  405224:	d501      	bpl.n	40522a <_printf_float+0x146>
  405226:	3301      	adds	r3, #1
  405228:	6123      	str	r3, [r4, #16]
  40522a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  40522e:	2b00      	cmp	r3, #0
  405230:	d0aa      	beq.n	405188 <_printf_float+0xa4>
  405232:	232d      	movs	r3, #45	; 0x2d
  405234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  405238:	e7a6      	b.n	405188 <_printf_float+0xa4>
  40523a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  40523e:	d002      	beq.n	405246 <_printf_float+0x162>
  405240:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  405244:	d1b9      	bne.n	4051ba <_printf_float+0xd6>
  405246:	b19a      	cbz	r2, 405270 <_printf_float+0x18c>
  405248:	2100      	movs	r1, #0
  40524a:	9106      	str	r1, [sp, #24]
  40524c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  405250:	e88d 000c 	stmia.w	sp, {r2, r3}
  405254:	6023      	str	r3, [r4, #0]
  405256:	9005      	str	r0, [sp, #20]
  405258:	463a      	mov	r2, r7
  40525a:	f8cd 8010 	str.w	r8, [sp, #16]
  40525e:	f8cd e00c 	str.w	lr, [sp, #12]
  405262:	9102      	str	r1, [sp, #8]
  405264:	464b      	mov	r3, r9
  405266:	4628      	mov	r0, r5
  405268:	f7ff feab 	bl	404fc2 <__cvt>
  40526c:	4607      	mov	r7, r0
  40526e:	e7bc      	b.n	4051ea <_printf_float+0x106>
  405270:	2201      	movs	r2, #1
  405272:	e7a1      	b.n	4051b8 <_printf_float+0xd4>
  405274:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  405278:	d119      	bne.n	4052ae <_printf_float+0x1ca>
  40527a:	2900      	cmp	r1, #0
  40527c:	6863      	ldr	r3, [r4, #4]
  40527e:	dd0c      	ble.n	40529a <_printf_float+0x1b6>
  405280:	6121      	str	r1, [r4, #16]
  405282:	b913      	cbnz	r3, 40528a <_printf_float+0x1a6>
  405284:	6822      	ldr	r2, [r4, #0]
  405286:	07d2      	lsls	r2, r2, #31
  405288:	d502      	bpl.n	405290 <_printf_float+0x1ac>
  40528a:	3301      	adds	r3, #1
  40528c:	440b      	add	r3, r1
  40528e:	6123      	str	r3, [r4, #16]
  405290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405292:	65a3      	str	r3, [r4, #88]	; 0x58
  405294:	f04f 0900 	mov.w	r9, #0
  405298:	e7c7      	b.n	40522a <_printf_float+0x146>
  40529a:	b913      	cbnz	r3, 4052a2 <_printf_float+0x1be>
  40529c:	6822      	ldr	r2, [r4, #0]
  40529e:	07d0      	lsls	r0, r2, #31
  4052a0:	d501      	bpl.n	4052a6 <_printf_float+0x1c2>
  4052a2:	3302      	adds	r3, #2
  4052a4:	e7f3      	b.n	40528e <_printf_float+0x1aa>
  4052a6:	2301      	movs	r3, #1
  4052a8:	e7f1      	b.n	40528e <_printf_float+0x1aa>
  4052aa:	f04f 0867 	mov.w	r8, #103	; 0x67
  4052ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4052b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4052b2:	4293      	cmp	r3, r2
  4052b4:	db05      	blt.n	4052c2 <_printf_float+0x1de>
  4052b6:	6822      	ldr	r2, [r4, #0]
  4052b8:	6123      	str	r3, [r4, #16]
  4052ba:	07d1      	lsls	r1, r2, #31
  4052bc:	d5e8      	bpl.n	405290 <_printf_float+0x1ac>
  4052be:	3301      	adds	r3, #1
  4052c0:	e7e5      	b.n	40528e <_printf_float+0x1aa>
  4052c2:	2b00      	cmp	r3, #0
  4052c4:	bfd4      	ite	le
  4052c6:	f1c3 0302 	rsble	r3, r3, #2
  4052ca:	2301      	movgt	r3, #1
  4052cc:	4413      	add	r3, r2
  4052ce:	e7de      	b.n	40528e <_printf_float+0x1aa>
  4052d0:	6823      	ldr	r3, [r4, #0]
  4052d2:	055a      	lsls	r2, r3, #21
  4052d4:	d407      	bmi.n	4052e6 <_printf_float+0x202>
  4052d6:	6923      	ldr	r3, [r4, #16]
  4052d8:	463a      	mov	r2, r7
  4052da:	4659      	mov	r1, fp
  4052dc:	4628      	mov	r0, r5
  4052de:	47b0      	blx	r6
  4052e0:	3001      	adds	r0, #1
  4052e2:	d12a      	bne.n	40533a <_printf_float+0x256>
  4052e4:	e75a      	b.n	40519c <_printf_float+0xb8>
  4052e6:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4052ea:	f240 80dc 	bls.w	4054a6 <_printf_float+0x3c2>
  4052ee:	2200      	movs	r2, #0
  4052f0:	2300      	movs	r3, #0
  4052f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4052f6:	f7ff fd6d 	bl	404dd4 <__aeabi_dcmpeq>
  4052fa:	2800      	cmp	r0, #0
  4052fc:	d039      	beq.n	405372 <_printf_float+0x28e>
  4052fe:	2301      	movs	r3, #1
  405300:	4a36      	ldr	r2, [pc, #216]	; (4053dc <_printf_float+0x2f8>)
  405302:	4659      	mov	r1, fp
  405304:	4628      	mov	r0, r5
  405306:	47b0      	blx	r6
  405308:	3001      	adds	r0, #1
  40530a:	f43f af47 	beq.w	40519c <_printf_float+0xb8>
  40530e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405310:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405312:	429a      	cmp	r2, r3
  405314:	db02      	blt.n	40531c <_printf_float+0x238>
  405316:	6823      	ldr	r3, [r4, #0]
  405318:	07d8      	lsls	r0, r3, #31
  40531a:	d50e      	bpl.n	40533a <_printf_float+0x256>
  40531c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40531e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405320:	4659      	mov	r1, fp
  405322:	4628      	mov	r0, r5
  405324:	47b0      	blx	r6
  405326:	3001      	adds	r0, #1
  405328:	f43f af38 	beq.w	40519c <_printf_float+0xb8>
  40532c:	2700      	movs	r7, #0
  40532e:	f104 081a 	add.w	r8, r4, #26
  405332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405334:	3b01      	subs	r3, #1
  405336:	429f      	cmp	r7, r3
  405338:	db11      	blt.n	40535e <_printf_float+0x27a>
  40533a:	6823      	ldr	r3, [r4, #0]
  40533c:	079f      	lsls	r7, r3, #30
  40533e:	d508      	bpl.n	405352 <_printf_float+0x26e>
  405340:	2700      	movs	r7, #0
  405342:	f104 0819 	add.w	r8, r4, #25
  405346:	68e3      	ldr	r3, [r4, #12]
  405348:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40534a:	1a9b      	subs	r3, r3, r2
  40534c:	429f      	cmp	r7, r3
  40534e:	f2c0 80e7 	blt.w	405520 <_printf_float+0x43c>
  405352:	68e0      	ldr	r0, [r4, #12]
  405354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405356:	4298      	cmp	r0, r3
  405358:	bfb8      	it	lt
  40535a:	4618      	movlt	r0, r3
  40535c:	e720      	b.n	4051a0 <_printf_float+0xbc>
  40535e:	2301      	movs	r3, #1
  405360:	4642      	mov	r2, r8
  405362:	4659      	mov	r1, fp
  405364:	4628      	mov	r0, r5
  405366:	47b0      	blx	r6
  405368:	3001      	adds	r0, #1
  40536a:	f43f af17 	beq.w	40519c <_printf_float+0xb8>
  40536e:	3701      	adds	r7, #1
  405370:	e7df      	b.n	405332 <_printf_float+0x24e>
  405372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405374:	2b00      	cmp	r3, #0
  405376:	dc33      	bgt.n	4053e0 <_printf_float+0x2fc>
  405378:	2301      	movs	r3, #1
  40537a:	4a18      	ldr	r2, [pc, #96]	; (4053dc <_printf_float+0x2f8>)
  40537c:	4659      	mov	r1, fp
  40537e:	4628      	mov	r0, r5
  405380:	47b0      	blx	r6
  405382:	3001      	adds	r0, #1
  405384:	f43f af0a 	beq.w	40519c <_printf_float+0xb8>
  405388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40538a:	b923      	cbnz	r3, 405396 <_printf_float+0x2b2>
  40538c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40538e:	b913      	cbnz	r3, 405396 <_printf_float+0x2b2>
  405390:	6823      	ldr	r3, [r4, #0]
  405392:	07d9      	lsls	r1, r3, #31
  405394:	d5d1      	bpl.n	40533a <_printf_float+0x256>
  405396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405398:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40539a:	4659      	mov	r1, fp
  40539c:	4628      	mov	r0, r5
  40539e:	47b0      	blx	r6
  4053a0:	3001      	adds	r0, #1
  4053a2:	f43f aefb 	beq.w	40519c <_printf_float+0xb8>
  4053a6:	f04f 0800 	mov.w	r8, #0
  4053aa:	f104 091a 	add.w	r9, r4, #26
  4053ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4053b0:	425b      	negs	r3, r3
  4053b2:	4598      	cmp	r8, r3
  4053b4:	db01      	blt.n	4053ba <_printf_float+0x2d6>
  4053b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4053b8:	e78e      	b.n	4052d8 <_printf_float+0x1f4>
  4053ba:	2301      	movs	r3, #1
  4053bc:	464a      	mov	r2, r9
  4053be:	4659      	mov	r1, fp
  4053c0:	4628      	mov	r0, r5
  4053c2:	47b0      	blx	r6
  4053c4:	3001      	adds	r0, #1
  4053c6:	f43f aee9 	beq.w	40519c <_printf_float+0xb8>
  4053ca:	f108 0801 	add.w	r8, r8, #1
  4053ce:	e7ee      	b.n	4053ae <_printf_float+0x2ca>
  4053d0:	7fefffff 	.word	0x7fefffff
  4053d4:	0040809c 	.word	0x0040809c
  4053d8:	004080a0 	.word	0x004080a0
  4053dc:	004080ac 	.word	0x004080ac
  4053e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4053e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4053e4:	429a      	cmp	r2, r3
  4053e6:	bfa8      	it	ge
  4053e8:	461a      	movge	r2, r3
  4053ea:	2a00      	cmp	r2, #0
  4053ec:	4690      	mov	r8, r2
  4053ee:	dc36      	bgt.n	40545e <_printf_float+0x37a>
  4053f0:	f104 031a 	add.w	r3, r4, #26
  4053f4:	f04f 0a00 	mov.w	sl, #0
  4053f8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4053fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4053fe:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  405402:	eba9 0308 	sub.w	r3, r9, r8
  405406:	459a      	cmp	sl, r3
  405408:	db31      	blt.n	40546e <_printf_float+0x38a>
  40540a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40540c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40540e:	429a      	cmp	r2, r3
  405410:	db38      	blt.n	405484 <_printf_float+0x3a0>
  405412:	6823      	ldr	r3, [r4, #0]
  405414:	07da      	lsls	r2, r3, #31
  405416:	d435      	bmi.n	405484 <_printf_float+0x3a0>
  405418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40541a:	990d      	ldr	r1, [sp, #52]	; 0x34
  40541c:	eba3 0209 	sub.w	r2, r3, r9
  405420:	eba3 0801 	sub.w	r8, r3, r1
  405424:	4590      	cmp	r8, r2
  405426:	bfa8      	it	ge
  405428:	4690      	movge	r8, r2
  40542a:	f1b8 0f00 	cmp.w	r8, #0
  40542e:	dc31      	bgt.n	405494 <_printf_float+0x3b0>
  405430:	2700      	movs	r7, #0
  405432:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  405436:	f104 091a 	add.w	r9, r4, #26
  40543a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40543c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40543e:	1a9b      	subs	r3, r3, r2
  405440:	eba3 0308 	sub.w	r3, r3, r8
  405444:	429f      	cmp	r7, r3
  405446:	f6bf af78 	bge.w	40533a <_printf_float+0x256>
  40544a:	2301      	movs	r3, #1
  40544c:	464a      	mov	r2, r9
  40544e:	4659      	mov	r1, fp
  405450:	4628      	mov	r0, r5
  405452:	47b0      	blx	r6
  405454:	3001      	adds	r0, #1
  405456:	f43f aea1 	beq.w	40519c <_printf_float+0xb8>
  40545a:	3701      	adds	r7, #1
  40545c:	e7ed      	b.n	40543a <_printf_float+0x356>
  40545e:	4613      	mov	r3, r2
  405460:	4659      	mov	r1, fp
  405462:	463a      	mov	r2, r7
  405464:	4628      	mov	r0, r5
  405466:	47b0      	blx	r6
  405468:	3001      	adds	r0, #1
  40546a:	d1c1      	bne.n	4053f0 <_printf_float+0x30c>
  40546c:	e696      	b.n	40519c <_printf_float+0xb8>
  40546e:	2301      	movs	r3, #1
  405470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405472:	4659      	mov	r1, fp
  405474:	4628      	mov	r0, r5
  405476:	47b0      	blx	r6
  405478:	3001      	adds	r0, #1
  40547a:	f43f ae8f 	beq.w	40519c <_printf_float+0xb8>
  40547e:	f10a 0a01 	add.w	sl, sl, #1
  405482:	e7bc      	b.n	4053fe <_printf_float+0x31a>
  405484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405486:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405488:	4659      	mov	r1, fp
  40548a:	4628      	mov	r0, r5
  40548c:	47b0      	blx	r6
  40548e:	3001      	adds	r0, #1
  405490:	d1c2      	bne.n	405418 <_printf_float+0x334>
  405492:	e683      	b.n	40519c <_printf_float+0xb8>
  405494:	4643      	mov	r3, r8
  405496:	eb07 0209 	add.w	r2, r7, r9
  40549a:	4659      	mov	r1, fp
  40549c:	4628      	mov	r0, r5
  40549e:	47b0      	blx	r6
  4054a0:	3001      	adds	r0, #1
  4054a2:	d1c5      	bne.n	405430 <_printf_float+0x34c>
  4054a4:	e67a      	b.n	40519c <_printf_float+0xb8>
  4054a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4054a8:	2a01      	cmp	r2, #1
  4054aa:	dc01      	bgt.n	4054b0 <_printf_float+0x3cc>
  4054ac:	07db      	lsls	r3, r3, #31
  4054ae:	d534      	bpl.n	40551a <_printf_float+0x436>
  4054b0:	2301      	movs	r3, #1
  4054b2:	463a      	mov	r2, r7
  4054b4:	4659      	mov	r1, fp
  4054b6:	4628      	mov	r0, r5
  4054b8:	47b0      	blx	r6
  4054ba:	3001      	adds	r0, #1
  4054bc:	f43f ae6e 	beq.w	40519c <_printf_float+0xb8>
  4054c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4054c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4054c4:	4659      	mov	r1, fp
  4054c6:	4628      	mov	r0, r5
  4054c8:	47b0      	blx	r6
  4054ca:	3001      	adds	r0, #1
  4054cc:	f43f ae66 	beq.w	40519c <_printf_float+0xb8>
  4054d0:	2200      	movs	r2, #0
  4054d2:	2300      	movs	r3, #0
  4054d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4054d8:	f7ff fc7c 	bl	404dd4 <__aeabi_dcmpeq>
  4054dc:	b150      	cbz	r0, 4054f4 <_printf_float+0x410>
  4054de:	2700      	movs	r7, #0
  4054e0:	f104 081a 	add.w	r8, r4, #26
  4054e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4054e6:	3b01      	subs	r3, #1
  4054e8:	429f      	cmp	r7, r3
  4054ea:	db0c      	blt.n	405506 <_printf_float+0x422>
  4054ec:	464b      	mov	r3, r9
  4054ee:	f104 0250 	add.w	r2, r4, #80	; 0x50
  4054f2:	e6f2      	b.n	4052da <_printf_float+0x1f6>
  4054f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4054f6:	1c7a      	adds	r2, r7, #1
  4054f8:	3b01      	subs	r3, #1
  4054fa:	4659      	mov	r1, fp
  4054fc:	4628      	mov	r0, r5
  4054fe:	47b0      	blx	r6
  405500:	3001      	adds	r0, #1
  405502:	d1f3      	bne.n	4054ec <_printf_float+0x408>
  405504:	e64a      	b.n	40519c <_printf_float+0xb8>
  405506:	2301      	movs	r3, #1
  405508:	4642      	mov	r2, r8
  40550a:	4659      	mov	r1, fp
  40550c:	4628      	mov	r0, r5
  40550e:	47b0      	blx	r6
  405510:	3001      	adds	r0, #1
  405512:	f43f ae43 	beq.w	40519c <_printf_float+0xb8>
  405516:	3701      	adds	r7, #1
  405518:	e7e4      	b.n	4054e4 <_printf_float+0x400>
  40551a:	2301      	movs	r3, #1
  40551c:	463a      	mov	r2, r7
  40551e:	e7ec      	b.n	4054fa <_printf_float+0x416>
  405520:	2301      	movs	r3, #1
  405522:	4642      	mov	r2, r8
  405524:	4659      	mov	r1, fp
  405526:	4628      	mov	r0, r5
  405528:	47b0      	blx	r6
  40552a:	3001      	adds	r0, #1
  40552c:	f43f ae36 	beq.w	40519c <_printf_float+0xb8>
  405530:	3701      	adds	r7, #1
  405532:	e708      	b.n	405346 <_printf_float+0x262>
  405534:	463a      	mov	r2, r7
  405536:	464b      	mov	r3, r9
  405538:	4638      	mov	r0, r7
  40553a:	4649      	mov	r1, r9
  40553c:	f7ff fc7c 	bl	404e38 <__aeabi_dcmpun>
  405540:	2800      	cmp	r0, #0
  405542:	f43f ae30 	beq.w	4051a6 <_printf_float+0xc2>
  405546:	4b01      	ldr	r3, [pc, #4]	; (40554c <_printf_float+0x468>)
  405548:	4f01      	ldr	r7, [pc, #4]	; (405550 <_printf_float+0x46c>)
  40554a:	e612      	b.n	405172 <_printf_float+0x8e>
  40554c:	004080a4 	.word	0x004080a4
  405550:	004080a8 	.word	0x004080a8

00405554 <_printf_common>:
  405554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405558:	4691      	mov	r9, r2
  40555a:	461f      	mov	r7, r3
  40555c:	688a      	ldr	r2, [r1, #8]
  40555e:	690b      	ldr	r3, [r1, #16]
  405560:	f8dd 8020 	ldr.w	r8, [sp, #32]
  405564:	4293      	cmp	r3, r2
  405566:	bfb8      	it	lt
  405568:	4613      	movlt	r3, r2
  40556a:	f8c9 3000 	str.w	r3, [r9]
  40556e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  405572:	4606      	mov	r6, r0
  405574:	460c      	mov	r4, r1
  405576:	b112      	cbz	r2, 40557e <_printf_common+0x2a>
  405578:	3301      	adds	r3, #1
  40557a:	f8c9 3000 	str.w	r3, [r9]
  40557e:	6823      	ldr	r3, [r4, #0]
  405580:	0699      	lsls	r1, r3, #26
  405582:	bf42      	ittt	mi
  405584:	f8d9 3000 	ldrmi.w	r3, [r9]
  405588:	3302      	addmi	r3, #2
  40558a:	f8c9 3000 	strmi.w	r3, [r9]
  40558e:	6825      	ldr	r5, [r4, #0]
  405590:	f015 0506 	ands.w	r5, r5, #6
  405594:	d107      	bne.n	4055a6 <_printf_common+0x52>
  405596:	f104 0a19 	add.w	sl, r4, #25
  40559a:	68e3      	ldr	r3, [r4, #12]
  40559c:	f8d9 2000 	ldr.w	r2, [r9]
  4055a0:	1a9b      	subs	r3, r3, r2
  4055a2:	429d      	cmp	r5, r3
  4055a4:	db29      	blt.n	4055fa <_printf_common+0xa6>
  4055a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4055aa:	6822      	ldr	r2, [r4, #0]
  4055ac:	3300      	adds	r3, #0
  4055ae:	bf18      	it	ne
  4055b0:	2301      	movne	r3, #1
  4055b2:	0692      	lsls	r2, r2, #26
  4055b4:	d42e      	bmi.n	405614 <_printf_common+0xc0>
  4055b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4055ba:	4639      	mov	r1, r7
  4055bc:	4630      	mov	r0, r6
  4055be:	47c0      	blx	r8
  4055c0:	3001      	adds	r0, #1
  4055c2:	d021      	beq.n	405608 <_printf_common+0xb4>
  4055c4:	6823      	ldr	r3, [r4, #0]
  4055c6:	68e5      	ldr	r5, [r4, #12]
  4055c8:	f8d9 2000 	ldr.w	r2, [r9]
  4055cc:	f003 0306 	and.w	r3, r3, #6
  4055d0:	2b04      	cmp	r3, #4
  4055d2:	bf08      	it	eq
  4055d4:	1aad      	subeq	r5, r5, r2
  4055d6:	68a3      	ldr	r3, [r4, #8]
  4055d8:	6922      	ldr	r2, [r4, #16]
  4055da:	bf0c      	ite	eq
  4055dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  4055e0:	2500      	movne	r5, #0
  4055e2:	4293      	cmp	r3, r2
  4055e4:	bfc4      	itt	gt
  4055e6:	1a9b      	subgt	r3, r3, r2
  4055e8:	18ed      	addgt	r5, r5, r3
  4055ea:	f04f 0900 	mov.w	r9, #0
  4055ee:	341a      	adds	r4, #26
  4055f0:	454d      	cmp	r5, r9
  4055f2:	d11b      	bne.n	40562c <_printf_common+0xd8>
  4055f4:	2000      	movs	r0, #0
  4055f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055fa:	2301      	movs	r3, #1
  4055fc:	4652      	mov	r2, sl
  4055fe:	4639      	mov	r1, r7
  405600:	4630      	mov	r0, r6
  405602:	47c0      	blx	r8
  405604:	3001      	adds	r0, #1
  405606:	d103      	bne.n	405610 <_printf_common+0xbc>
  405608:	f04f 30ff 	mov.w	r0, #4294967295
  40560c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405610:	3501      	adds	r5, #1
  405612:	e7c2      	b.n	40559a <_printf_common+0x46>
  405614:	18e1      	adds	r1, r4, r3
  405616:	1c5a      	adds	r2, r3, #1
  405618:	2030      	movs	r0, #48	; 0x30
  40561a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  40561e:	4422      	add	r2, r4
  405620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  405624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  405628:	3302      	adds	r3, #2
  40562a:	e7c4      	b.n	4055b6 <_printf_common+0x62>
  40562c:	2301      	movs	r3, #1
  40562e:	4622      	mov	r2, r4
  405630:	4639      	mov	r1, r7
  405632:	4630      	mov	r0, r6
  405634:	47c0      	blx	r8
  405636:	3001      	adds	r0, #1
  405638:	d0e6      	beq.n	405608 <_printf_common+0xb4>
  40563a:	f109 0901 	add.w	r9, r9, #1
  40563e:	e7d7      	b.n	4055f0 <_printf_common+0x9c>

00405640 <_printf_i>:
  405640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405644:	4617      	mov	r7, r2
  405646:	7e0a      	ldrb	r2, [r1, #24]
  405648:	b085      	sub	sp, #20
  40564a:	2a6e      	cmp	r2, #110	; 0x6e
  40564c:	4698      	mov	r8, r3
  40564e:	4606      	mov	r6, r0
  405650:	460c      	mov	r4, r1
  405652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405654:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  405658:	f000 80bc 	beq.w	4057d4 <_printf_i+0x194>
  40565c:	d81a      	bhi.n	405694 <_printf_i+0x54>
  40565e:	2a63      	cmp	r2, #99	; 0x63
  405660:	d02e      	beq.n	4056c0 <_printf_i+0x80>
  405662:	d80a      	bhi.n	40567a <_printf_i+0x3a>
  405664:	2a00      	cmp	r2, #0
  405666:	f000 80c8 	beq.w	4057fa <_printf_i+0x1ba>
  40566a:	2a58      	cmp	r2, #88	; 0x58
  40566c:	f000 808a 	beq.w	405784 <_printf_i+0x144>
  405670:	f104 0542 	add.w	r5, r4, #66	; 0x42
  405674:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  405678:	e02a      	b.n	4056d0 <_printf_i+0x90>
  40567a:	2a64      	cmp	r2, #100	; 0x64
  40567c:	d001      	beq.n	405682 <_printf_i+0x42>
  40567e:	2a69      	cmp	r2, #105	; 0x69
  405680:	d1f6      	bne.n	405670 <_printf_i+0x30>
  405682:	6821      	ldr	r1, [r4, #0]
  405684:	681a      	ldr	r2, [r3, #0]
  405686:	f011 0f80 	tst.w	r1, #128	; 0x80
  40568a:	d023      	beq.n	4056d4 <_printf_i+0x94>
  40568c:	1d11      	adds	r1, r2, #4
  40568e:	6019      	str	r1, [r3, #0]
  405690:	6813      	ldr	r3, [r2, #0]
  405692:	e027      	b.n	4056e4 <_printf_i+0xa4>
  405694:	2a73      	cmp	r2, #115	; 0x73
  405696:	f000 80b4 	beq.w	405802 <_printf_i+0x1c2>
  40569a:	d808      	bhi.n	4056ae <_printf_i+0x6e>
  40569c:	2a6f      	cmp	r2, #111	; 0x6f
  40569e:	d02a      	beq.n	4056f6 <_printf_i+0xb6>
  4056a0:	2a70      	cmp	r2, #112	; 0x70
  4056a2:	d1e5      	bne.n	405670 <_printf_i+0x30>
  4056a4:	680a      	ldr	r2, [r1, #0]
  4056a6:	f042 0220 	orr.w	r2, r2, #32
  4056aa:	600a      	str	r2, [r1, #0]
  4056ac:	e003      	b.n	4056b6 <_printf_i+0x76>
  4056ae:	2a75      	cmp	r2, #117	; 0x75
  4056b0:	d021      	beq.n	4056f6 <_printf_i+0xb6>
  4056b2:	2a78      	cmp	r2, #120	; 0x78
  4056b4:	d1dc      	bne.n	405670 <_printf_i+0x30>
  4056b6:	2278      	movs	r2, #120	; 0x78
  4056b8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  4056bc:	496e      	ldr	r1, [pc, #440]	; (405878 <_printf_i+0x238>)
  4056be:	e064      	b.n	40578a <_printf_i+0x14a>
  4056c0:	681a      	ldr	r2, [r3, #0]
  4056c2:	f101 0542 	add.w	r5, r1, #66	; 0x42
  4056c6:	1d11      	adds	r1, r2, #4
  4056c8:	6019      	str	r1, [r3, #0]
  4056ca:	6813      	ldr	r3, [r2, #0]
  4056cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4056d0:	2301      	movs	r3, #1
  4056d2:	e0a3      	b.n	40581c <_printf_i+0x1dc>
  4056d4:	f011 0f40 	tst.w	r1, #64	; 0x40
  4056d8:	f102 0104 	add.w	r1, r2, #4
  4056dc:	6019      	str	r1, [r3, #0]
  4056de:	d0d7      	beq.n	405690 <_printf_i+0x50>
  4056e0:	f9b2 3000 	ldrsh.w	r3, [r2]
  4056e4:	2b00      	cmp	r3, #0
  4056e6:	da03      	bge.n	4056f0 <_printf_i+0xb0>
  4056e8:	222d      	movs	r2, #45	; 0x2d
  4056ea:	425b      	negs	r3, r3
  4056ec:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  4056f0:	4962      	ldr	r1, [pc, #392]	; (40587c <_printf_i+0x23c>)
  4056f2:	220a      	movs	r2, #10
  4056f4:	e017      	b.n	405726 <_printf_i+0xe6>
  4056f6:	6820      	ldr	r0, [r4, #0]
  4056f8:	6819      	ldr	r1, [r3, #0]
  4056fa:	f010 0f80 	tst.w	r0, #128	; 0x80
  4056fe:	d003      	beq.n	405708 <_printf_i+0xc8>
  405700:	1d08      	adds	r0, r1, #4
  405702:	6018      	str	r0, [r3, #0]
  405704:	680b      	ldr	r3, [r1, #0]
  405706:	e006      	b.n	405716 <_printf_i+0xd6>
  405708:	f010 0f40 	tst.w	r0, #64	; 0x40
  40570c:	f101 0004 	add.w	r0, r1, #4
  405710:	6018      	str	r0, [r3, #0]
  405712:	d0f7      	beq.n	405704 <_printf_i+0xc4>
  405714:	880b      	ldrh	r3, [r1, #0]
  405716:	4959      	ldr	r1, [pc, #356]	; (40587c <_printf_i+0x23c>)
  405718:	2a6f      	cmp	r2, #111	; 0x6f
  40571a:	bf14      	ite	ne
  40571c:	220a      	movne	r2, #10
  40571e:	2208      	moveq	r2, #8
  405720:	2000      	movs	r0, #0
  405722:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  405726:	6865      	ldr	r5, [r4, #4]
  405728:	60a5      	str	r5, [r4, #8]
  40572a:	2d00      	cmp	r5, #0
  40572c:	f2c0 809c 	blt.w	405868 <_printf_i+0x228>
  405730:	6820      	ldr	r0, [r4, #0]
  405732:	f020 0004 	bic.w	r0, r0, #4
  405736:	6020      	str	r0, [r4, #0]
  405738:	2b00      	cmp	r3, #0
  40573a:	d13f      	bne.n	4057bc <_printf_i+0x17c>
  40573c:	2d00      	cmp	r5, #0
  40573e:	f040 8095 	bne.w	40586c <_printf_i+0x22c>
  405742:	4675      	mov	r5, lr
  405744:	2a08      	cmp	r2, #8
  405746:	d10b      	bne.n	405760 <_printf_i+0x120>
  405748:	6823      	ldr	r3, [r4, #0]
  40574a:	07da      	lsls	r2, r3, #31
  40574c:	d508      	bpl.n	405760 <_printf_i+0x120>
  40574e:	6923      	ldr	r3, [r4, #16]
  405750:	6862      	ldr	r2, [r4, #4]
  405752:	429a      	cmp	r2, r3
  405754:	bfde      	ittt	le
  405756:	2330      	movle	r3, #48	; 0x30
  405758:	f805 3c01 	strble.w	r3, [r5, #-1]
  40575c:	f105 35ff 	addle.w	r5, r5, #4294967295
  405760:	ebae 0305 	sub.w	r3, lr, r5
  405764:	6123      	str	r3, [r4, #16]
  405766:	f8cd 8000 	str.w	r8, [sp]
  40576a:	463b      	mov	r3, r7
  40576c:	aa03      	add	r2, sp, #12
  40576e:	4621      	mov	r1, r4
  405770:	4630      	mov	r0, r6
  405772:	f7ff feef 	bl	405554 <_printf_common>
  405776:	3001      	adds	r0, #1
  405778:	d155      	bne.n	405826 <_printf_i+0x1e6>
  40577a:	f04f 30ff 	mov.w	r0, #4294967295
  40577e:	b005      	add	sp, #20
  405780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405784:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  405788:	493c      	ldr	r1, [pc, #240]	; (40587c <_printf_i+0x23c>)
  40578a:	6822      	ldr	r2, [r4, #0]
  40578c:	6818      	ldr	r0, [r3, #0]
  40578e:	f012 0f80 	tst.w	r2, #128	; 0x80
  405792:	f100 0504 	add.w	r5, r0, #4
  405796:	601d      	str	r5, [r3, #0]
  405798:	d001      	beq.n	40579e <_printf_i+0x15e>
  40579a:	6803      	ldr	r3, [r0, #0]
  40579c:	e002      	b.n	4057a4 <_printf_i+0x164>
  40579e:	0655      	lsls	r5, r2, #25
  4057a0:	d5fb      	bpl.n	40579a <_printf_i+0x15a>
  4057a2:	8803      	ldrh	r3, [r0, #0]
  4057a4:	07d0      	lsls	r0, r2, #31
  4057a6:	bf44      	itt	mi
  4057a8:	f042 0220 	orrmi.w	r2, r2, #32
  4057ac:	6022      	strmi	r2, [r4, #0]
  4057ae:	b91b      	cbnz	r3, 4057b8 <_printf_i+0x178>
  4057b0:	6822      	ldr	r2, [r4, #0]
  4057b2:	f022 0220 	bic.w	r2, r2, #32
  4057b6:	6022      	str	r2, [r4, #0]
  4057b8:	2210      	movs	r2, #16
  4057ba:	e7b1      	b.n	405720 <_printf_i+0xe0>
  4057bc:	4675      	mov	r5, lr
  4057be:	fbb3 f0f2 	udiv	r0, r3, r2
  4057c2:	fb02 3310 	mls	r3, r2, r0, r3
  4057c6:	5ccb      	ldrb	r3, [r1, r3]
  4057c8:	f805 3d01 	strb.w	r3, [r5, #-1]!
  4057cc:	4603      	mov	r3, r0
  4057ce:	2800      	cmp	r0, #0
  4057d0:	d1f5      	bne.n	4057be <_printf_i+0x17e>
  4057d2:	e7b7      	b.n	405744 <_printf_i+0x104>
  4057d4:	6808      	ldr	r0, [r1, #0]
  4057d6:	681a      	ldr	r2, [r3, #0]
  4057d8:	6949      	ldr	r1, [r1, #20]
  4057da:	f010 0f80 	tst.w	r0, #128	; 0x80
  4057de:	d004      	beq.n	4057ea <_printf_i+0x1aa>
  4057e0:	1d10      	adds	r0, r2, #4
  4057e2:	6018      	str	r0, [r3, #0]
  4057e4:	6813      	ldr	r3, [r2, #0]
  4057e6:	6019      	str	r1, [r3, #0]
  4057e8:	e007      	b.n	4057fa <_printf_i+0x1ba>
  4057ea:	f010 0f40 	tst.w	r0, #64	; 0x40
  4057ee:	f102 0004 	add.w	r0, r2, #4
  4057f2:	6018      	str	r0, [r3, #0]
  4057f4:	6813      	ldr	r3, [r2, #0]
  4057f6:	d0f6      	beq.n	4057e6 <_printf_i+0x1a6>
  4057f8:	8019      	strh	r1, [r3, #0]
  4057fa:	2300      	movs	r3, #0
  4057fc:	6123      	str	r3, [r4, #16]
  4057fe:	4675      	mov	r5, lr
  405800:	e7b1      	b.n	405766 <_printf_i+0x126>
  405802:	681a      	ldr	r2, [r3, #0]
  405804:	1d11      	adds	r1, r2, #4
  405806:	6019      	str	r1, [r3, #0]
  405808:	6815      	ldr	r5, [r2, #0]
  40580a:	6862      	ldr	r2, [r4, #4]
  40580c:	2100      	movs	r1, #0
  40580e:	4628      	mov	r0, r5
  405810:	f001 f966 	bl	406ae0 <memchr>
  405814:	b108      	cbz	r0, 40581a <_printf_i+0x1da>
  405816:	1b40      	subs	r0, r0, r5
  405818:	6060      	str	r0, [r4, #4]
  40581a:	6863      	ldr	r3, [r4, #4]
  40581c:	6123      	str	r3, [r4, #16]
  40581e:	2300      	movs	r3, #0
  405820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  405824:	e79f      	b.n	405766 <_printf_i+0x126>
  405826:	6923      	ldr	r3, [r4, #16]
  405828:	462a      	mov	r2, r5
  40582a:	4639      	mov	r1, r7
  40582c:	4630      	mov	r0, r6
  40582e:	47c0      	blx	r8
  405830:	3001      	adds	r0, #1
  405832:	d0a2      	beq.n	40577a <_printf_i+0x13a>
  405834:	6823      	ldr	r3, [r4, #0]
  405836:	079b      	lsls	r3, r3, #30
  405838:	d507      	bpl.n	40584a <_printf_i+0x20a>
  40583a:	2500      	movs	r5, #0
  40583c:	f104 0919 	add.w	r9, r4, #25
  405840:	68e3      	ldr	r3, [r4, #12]
  405842:	9a03      	ldr	r2, [sp, #12]
  405844:	1a9b      	subs	r3, r3, r2
  405846:	429d      	cmp	r5, r3
  405848:	db05      	blt.n	405856 <_printf_i+0x216>
  40584a:	68e0      	ldr	r0, [r4, #12]
  40584c:	9b03      	ldr	r3, [sp, #12]
  40584e:	4298      	cmp	r0, r3
  405850:	bfb8      	it	lt
  405852:	4618      	movlt	r0, r3
  405854:	e793      	b.n	40577e <_printf_i+0x13e>
  405856:	2301      	movs	r3, #1
  405858:	464a      	mov	r2, r9
  40585a:	4639      	mov	r1, r7
  40585c:	4630      	mov	r0, r6
  40585e:	47c0      	blx	r8
  405860:	3001      	adds	r0, #1
  405862:	d08a      	beq.n	40577a <_printf_i+0x13a>
  405864:	3501      	adds	r5, #1
  405866:	e7eb      	b.n	405840 <_printf_i+0x200>
  405868:	2b00      	cmp	r3, #0
  40586a:	d1a7      	bne.n	4057bc <_printf_i+0x17c>
  40586c:	780b      	ldrb	r3, [r1, #0]
  40586e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  405872:	f104 0542 	add.w	r5, r4, #66	; 0x42
  405876:	e765      	b.n	405744 <_printf_i+0x104>
  405878:	004080bf 	.word	0x004080bf
  40587c:	004080ae 	.word	0x004080ae

00405880 <iprintf>:
  405880:	b40f      	push	{r0, r1, r2, r3}
  405882:	4b0a      	ldr	r3, [pc, #40]	; (4058ac <iprintf+0x2c>)
  405884:	b513      	push	{r0, r1, r4, lr}
  405886:	681c      	ldr	r4, [r3, #0]
  405888:	b124      	cbz	r4, 405894 <iprintf+0x14>
  40588a:	69a3      	ldr	r3, [r4, #24]
  40588c:	b913      	cbnz	r3, 405894 <iprintf+0x14>
  40588e:	4620      	mov	r0, r4
  405890:	f001 f81e 	bl	4068d0 <__sinit>
  405894:	ab05      	add	r3, sp, #20
  405896:	9a04      	ldr	r2, [sp, #16]
  405898:	68a1      	ldr	r1, [r4, #8]
  40589a:	9301      	str	r3, [sp, #4]
  40589c:	4620      	mov	r0, r4
  40589e:	f001 fd21 	bl	4072e4 <_vfiprintf_r>
  4058a2:	b002      	add	sp, #8
  4058a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4058a8:	b004      	add	sp, #16
  4058aa:	4770      	bx	lr
  4058ac:	20400048 	.word	0x20400048

004058b0 <setbuf>:
  4058b0:	2900      	cmp	r1, #0
  4058b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4058b6:	bf0c      	ite	eq
  4058b8:	2202      	moveq	r2, #2
  4058ba:	2200      	movne	r2, #0
  4058bc:	f000 b800 	b.w	4058c0 <setvbuf>

004058c0 <setvbuf>:
  4058c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4058c4:	461d      	mov	r5, r3
  4058c6:	4b51      	ldr	r3, [pc, #324]	; (405a0c <setvbuf+0x14c>)
  4058c8:	681e      	ldr	r6, [r3, #0]
  4058ca:	4604      	mov	r4, r0
  4058cc:	460f      	mov	r7, r1
  4058ce:	4690      	mov	r8, r2
  4058d0:	b126      	cbz	r6, 4058dc <setvbuf+0x1c>
  4058d2:	69b3      	ldr	r3, [r6, #24]
  4058d4:	b913      	cbnz	r3, 4058dc <setvbuf+0x1c>
  4058d6:	4630      	mov	r0, r6
  4058d8:	f000 fffa 	bl	4068d0 <__sinit>
  4058dc:	4b4c      	ldr	r3, [pc, #304]	; (405a10 <setvbuf+0x150>)
  4058de:	429c      	cmp	r4, r3
  4058e0:	d152      	bne.n	405988 <setvbuf+0xc8>
  4058e2:	6874      	ldr	r4, [r6, #4]
  4058e4:	f1b8 0f02 	cmp.w	r8, #2
  4058e8:	d006      	beq.n	4058f8 <setvbuf+0x38>
  4058ea:	f1b8 0f01 	cmp.w	r8, #1
  4058ee:	f200 8089 	bhi.w	405a04 <setvbuf+0x144>
  4058f2:	2d00      	cmp	r5, #0
  4058f4:	f2c0 8086 	blt.w	405a04 <setvbuf+0x144>
  4058f8:	4621      	mov	r1, r4
  4058fa:	4630      	mov	r0, r6
  4058fc:	f000 ff7e 	bl	4067fc <_fflush_r>
  405900:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405902:	b141      	cbz	r1, 405916 <setvbuf+0x56>
  405904:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405908:	4299      	cmp	r1, r3
  40590a:	d002      	beq.n	405912 <setvbuf+0x52>
  40590c:	4630      	mov	r0, r6
  40590e:	f001 fc15 	bl	40713c <_free_r>
  405912:	2300      	movs	r3, #0
  405914:	6363      	str	r3, [r4, #52]	; 0x34
  405916:	2300      	movs	r3, #0
  405918:	61a3      	str	r3, [r4, #24]
  40591a:	6063      	str	r3, [r4, #4]
  40591c:	89a3      	ldrh	r3, [r4, #12]
  40591e:	061b      	lsls	r3, r3, #24
  405920:	d503      	bpl.n	40592a <setvbuf+0x6a>
  405922:	6921      	ldr	r1, [r4, #16]
  405924:	4630      	mov	r0, r6
  405926:	f001 fc09 	bl	40713c <_free_r>
  40592a:	89a3      	ldrh	r3, [r4, #12]
  40592c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  405930:	f023 0303 	bic.w	r3, r3, #3
  405934:	f1b8 0f02 	cmp.w	r8, #2
  405938:	81a3      	strh	r3, [r4, #12]
  40593a:	d05d      	beq.n	4059f8 <setvbuf+0x138>
  40593c:	ab01      	add	r3, sp, #4
  40593e:	466a      	mov	r2, sp
  405940:	4621      	mov	r1, r4
  405942:	4630      	mov	r0, r6
  405944:	f001 f85c 	bl	406a00 <__swhatbuf_r>
  405948:	89a3      	ldrh	r3, [r4, #12]
  40594a:	4318      	orrs	r0, r3
  40594c:	81a0      	strh	r0, [r4, #12]
  40594e:	bb2d      	cbnz	r5, 40599c <setvbuf+0xdc>
  405950:	9d00      	ldr	r5, [sp, #0]
  405952:	4628      	mov	r0, r5
  405954:	f001 f8b8 	bl	406ac8 <malloc>
  405958:	4607      	mov	r7, r0
  40595a:	2800      	cmp	r0, #0
  40595c:	d14e      	bne.n	4059fc <setvbuf+0x13c>
  40595e:	f8dd 9000 	ldr.w	r9, [sp]
  405962:	45a9      	cmp	r9, r5
  405964:	d13c      	bne.n	4059e0 <setvbuf+0x120>
  405966:	f04f 30ff 	mov.w	r0, #4294967295
  40596a:	89a3      	ldrh	r3, [r4, #12]
  40596c:	f043 0302 	orr.w	r3, r3, #2
  405970:	81a3      	strh	r3, [r4, #12]
  405972:	2300      	movs	r3, #0
  405974:	60a3      	str	r3, [r4, #8]
  405976:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40597a:	6023      	str	r3, [r4, #0]
  40597c:	6123      	str	r3, [r4, #16]
  40597e:	2301      	movs	r3, #1
  405980:	6163      	str	r3, [r4, #20]
  405982:	b003      	add	sp, #12
  405984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405988:	4b22      	ldr	r3, [pc, #136]	; (405a14 <setvbuf+0x154>)
  40598a:	429c      	cmp	r4, r3
  40598c:	d101      	bne.n	405992 <setvbuf+0xd2>
  40598e:	68b4      	ldr	r4, [r6, #8]
  405990:	e7a8      	b.n	4058e4 <setvbuf+0x24>
  405992:	4b21      	ldr	r3, [pc, #132]	; (405a18 <setvbuf+0x158>)
  405994:	429c      	cmp	r4, r3
  405996:	bf08      	it	eq
  405998:	68f4      	ldreq	r4, [r6, #12]
  40599a:	e7a3      	b.n	4058e4 <setvbuf+0x24>
  40599c:	2f00      	cmp	r7, #0
  40599e:	d0d8      	beq.n	405952 <setvbuf+0x92>
  4059a0:	69b3      	ldr	r3, [r6, #24]
  4059a2:	b913      	cbnz	r3, 4059aa <setvbuf+0xea>
  4059a4:	4630      	mov	r0, r6
  4059a6:	f000 ff93 	bl	4068d0 <__sinit>
  4059aa:	f1b8 0f01 	cmp.w	r8, #1
  4059ae:	bf08      	it	eq
  4059b0:	89a3      	ldrheq	r3, [r4, #12]
  4059b2:	6027      	str	r7, [r4, #0]
  4059b4:	bf04      	itt	eq
  4059b6:	f043 0301 	orreq.w	r3, r3, #1
  4059ba:	81a3      	strheq	r3, [r4, #12]
  4059bc:	89a3      	ldrh	r3, [r4, #12]
  4059be:	6127      	str	r7, [r4, #16]
  4059c0:	f013 0008 	ands.w	r0, r3, #8
  4059c4:	6165      	str	r5, [r4, #20]
  4059c6:	d01b      	beq.n	405a00 <setvbuf+0x140>
  4059c8:	f013 0001 	ands.w	r0, r3, #1
  4059cc:	bf18      	it	ne
  4059ce:	426d      	negne	r5, r5
  4059d0:	f04f 0300 	mov.w	r3, #0
  4059d4:	bf1d      	ittte	ne
  4059d6:	60a3      	strne	r3, [r4, #8]
  4059d8:	61a5      	strne	r5, [r4, #24]
  4059da:	4618      	movne	r0, r3
  4059dc:	60a5      	streq	r5, [r4, #8]
  4059de:	e7d0      	b.n	405982 <setvbuf+0xc2>
  4059e0:	4648      	mov	r0, r9
  4059e2:	f001 f871 	bl	406ac8 <malloc>
  4059e6:	4607      	mov	r7, r0
  4059e8:	2800      	cmp	r0, #0
  4059ea:	d0bc      	beq.n	405966 <setvbuf+0xa6>
  4059ec:	89a3      	ldrh	r3, [r4, #12]
  4059ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4059f2:	81a3      	strh	r3, [r4, #12]
  4059f4:	464d      	mov	r5, r9
  4059f6:	e7d3      	b.n	4059a0 <setvbuf+0xe0>
  4059f8:	2000      	movs	r0, #0
  4059fa:	e7b6      	b.n	40596a <setvbuf+0xaa>
  4059fc:	46a9      	mov	r9, r5
  4059fe:	e7f5      	b.n	4059ec <setvbuf+0x12c>
  405a00:	60a0      	str	r0, [r4, #8]
  405a02:	e7be      	b.n	405982 <setvbuf+0xc2>
  405a04:	f04f 30ff 	mov.w	r0, #4294967295
  405a08:	e7bb      	b.n	405982 <setvbuf+0xc2>
  405a0a:	bf00      	nop
  405a0c:	20400048 	.word	0x20400048
  405a10:	00408100 	.word	0x00408100
  405a14:	00408120 	.word	0x00408120
  405a18:	004080e0 	.word	0x004080e0

00405a1c <strlen>:
  405a1c:	4603      	mov	r3, r0
  405a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
  405a22:	2a00      	cmp	r2, #0
  405a24:	d1fb      	bne.n	405a1e <strlen+0x2>
  405a26:	1a18      	subs	r0, r3, r0
  405a28:	3801      	subs	r0, #1
  405a2a:	4770      	bx	lr

00405a2c <quorem>:
  405a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a30:	6903      	ldr	r3, [r0, #16]
  405a32:	690c      	ldr	r4, [r1, #16]
  405a34:	429c      	cmp	r4, r3
  405a36:	4680      	mov	r8, r0
  405a38:	f300 8082 	bgt.w	405b40 <quorem+0x114>
  405a3c:	3c01      	subs	r4, #1
  405a3e:	f101 0714 	add.w	r7, r1, #20
  405a42:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  405a46:	f100 0614 	add.w	r6, r0, #20
  405a4a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  405a4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  405a52:	eb06 030e 	add.w	r3, r6, lr
  405a56:	3501      	adds	r5, #1
  405a58:	eb07 090e 	add.w	r9, r7, lr
  405a5c:	9301      	str	r3, [sp, #4]
  405a5e:	fbb0 f5f5 	udiv	r5, r0, r5
  405a62:	b395      	cbz	r5, 405aca <quorem+0x9e>
  405a64:	f04f 0a00 	mov.w	sl, #0
  405a68:	4638      	mov	r0, r7
  405a6a:	46b4      	mov	ip, r6
  405a6c:	46d3      	mov	fp, sl
  405a6e:	f850 2b04 	ldr.w	r2, [r0], #4
  405a72:	b293      	uxth	r3, r2
  405a74:	fb05 a303 	mla	r3, r5, r3, sl
  405a78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  405a7c:	b29b      	uxth	r3, r3
  405a7e:	ebab 0303 	sub.w	r3, fp, r3
  405a82:	0c12      	lsrs	r2, r2, #16
  405a84:	f8bc b000 	ldrh.w	fp, [ip]
  405a88:	fb05 a202 	mla	r2, r5, r2, sl
  405a8c:	fa13 f38b 	uxtah	r3, r3, fp
  405a90:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  405a94:	fa1f fb82 	uxth.w	fp, r2
  405a98:	f8dc 2000 	ldr.w	r2, [ip]
  405a9c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  405aa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
  405aa4:	b29b      	uxth	r3, r3
  405aa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405aaa:	4581      	cmp	r9, r0
  405aac:	ea4f 4b22 	mov.w	fp, r2, asr #16
  405ab0:	f84c 3b04 	str.w	r3, [ip], #4
  405ab4:	d2db      	bcs.n	405a6e <quorem+0x42>
  405ab6:	f856 300e 	ldr.w	r3, [r6, lr]
  405aba:	b933      	cbnz	r3, 405aca <quorem+0x9e>
  405abc:	9b01      	ldr	r3, [sp, #4]
  405abe:	3b04      	subs	r3, #4
  405ac0:	429e      	cmp	r6, r3
  405ac2:	461a      	mov	r2, r3
  405ac4:	d330      	bcc.n	405b28 <quorem+0xfc>
  405ac6:	f8c8 4010 	str.w	r4, [r8, #16]
  405aca:	4640      	mov	r0, r8
  405acc:	f001 fa61 	bl	406f92 <__mcmp>
  405ad0:	2800      	cmp	r0, #0
  405ad2:	db25      	blt.n	405b20 <quorem+0xf4>
  405ad4:	3501      	adds	r5, #1
  405ad6:	4630      	mov	r0, r6
  405ad8:	f04f 0e00 	mov.w	lr, #0
  405adc:	f857 2b04 	ldr.w	r2, [r7], #4
  405ae0:	f8d0 c000 	ldr.w	ip, [r0]
  405ae4:	b293      	uxth	r3, r2
  405ae6:	ebae 0303 	sub.w	r3, lr, r3
  405aea:	0c12      	lsrs	r2, r2, #16
  405aec:	fa13 f38c 	uxtah	r3, r3, ip
  405af0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  405af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
  405af8:	b29b      	uxth	r3, r3
  405afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405afe:	45b9      	cmp	r9, r7
  405b00:	ea4f 4e22 	mov.w	lr, r2, asr #16
  405b04:	f840 3b04 	str.w	r3, [r0], #4
  405b08:	d2e8      	bcs.n	405adc <quorem+0xb0>
  405b0a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  405b0e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  405b12:	b92a      	cbnz	r2, 405b20 <quorem+0xf4>
  405b14:	3b04      	subs	r3, #4
  405b16:	429e      	cmp	r6, r3
  405b18:	461a      	mov	r2, r3
  405b1a:	d30b      	bcc.n	405b34 <quorem+0x108>
  405b1c:	f8c8 4010 	str.w	r4, [r8, #16]
  405b20:	4628      	mov	r0, r5
  405b22:	b003      	add	sp, #12
  405b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b28:	6812      	ldr	r2, [r2, #0]
  405b2a:	3b04      	subs	r3, #4
  405b2c:	2a00      	cmp	r2, #0
  405b2e:	d1ca      	bne.n	405ac6 <quorem+0x9a>
  405b30:	3c01      	subs	r4, #1
  405b32:	e7c5      	b.n	405ac0 <quorem+0x94>
  405b34:	6812      	ldr	r2, [r2, #0]
  405b36:	3b04      	subs	r3, #4
  405b38:	2a00      	cmp	r2, #0
  405b3a:	d1ef      	bne.n	405b1c <quorem+0xf0>
  405b3c:	3c01      	subs	r4, #1
  405b3e:	e7ea      	b.n	405b16 <quorem+0xea>
  405b40:	2000      	movs	r0, #0
  405b42:	e7ee      	b.n	405b22 <quorem+0xf6>
  405b44:	0000      	movs	r0, r0
	...

00405b48 <_dtoa_r>:
  405b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b4c:	6a46      	ldr	r6, [r0, #36]	; 0x24
  405b4e:	b095      	sub	sp, #84	; 0x54
  405b50:	4604      	mov	r4, r0
  405b52:	9d21      	ldr	r5, [sp, #132]	; 0x84
  405b54:	e9cd 2302 	strd	r2, r3, [sp, #8]
  405b58:	b93e      	cbnz	r6, 405b6a <_dtoa_r+0x22>
  405b5a:	2010      	movs	r0, #16
  405b5c:	f000 ffb4 	bl	406ac8 <malloc>
  405b60:	6260      	str	r0, [r4, #36]	; 0x24
  405b62:	6046      	str	r6, [r0, #4]
  405b64:	6086      	str	r6, [r0, #8]
  405b66:	6006      	str	r6, [r0, #0]
  405b68:	60c6      	str	r6, [r0, #12]
  405b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405b6c:	6819      	ldr	r1, [r3, #0]
  405b6e:	b151      	cbz	r1, 405b86 <_dtoa_r+0x3e>
  405b70:	685a      	ldr	r2, [r3, #4]
  405b72:	604a      	str	r2, [r1, #4]
  405b74:	2301      	movs	r3, #1
  405b76:	4093      	lsls	r3, r2
  405b78:	608b      	str	r3, [r1, #8]
  405b7a:	4620      	mov	r0, r4
  405b7c:	f001 f834 	bl	406be8 <_Bfree>
  405b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405b82:	2200      	movs	r2, #0
  405b84:	601a      	str	r2, [r3, #0]
  405b86:	9b03      	ldr	r3, [sp, #12]
  405b88:	2b00      	cmp	r3, #0
  405b8a:	bfbf      	itttt	lt
  405b8c:	2301      	movlt	r3, #1
  405b8e:	602b      	strlt	r3, [r5, #0]
  405b90:	9b03      	ldrlt	r3, [sp, #12]
  405b92:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  405b96:	bfb2      	itee	lt
  405b98:	9303      	strlt	r3, [sp, #12]
  405b9a:	2300      	movge	r3, #0
  405b9c:	602b      	strge	r3, [r5, #0]
  405b9e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  405ba2:	4ba9      	ldr	r3, [pc, #676]	; (405e48 <_dtoa_r+0x300>)
  405ba4:	ea33 0309 	bics.w	r3, r3, r9
  405ba8:	d11b      	bne.n	405be2 <_dtoa_r+0x9a>
  405baa:	9a20      	ldr	r2, [sp, #128]	; 0x80
  405bac:	f242 730f 	movw	r3, #9999	; 0x270f
  405bb0:	6013      	str	r3, [r2, #0]
  405bb2:	9b02      	ldr	r3, [sp, #8]
  405bb4:	b923      	cbnz	r3, 405bc0 <_dtoa_r+0x78>
  405bb6:	f3c9 0013 	ubfx	r0, r9, #0, #20
  405bba:	2800      	cmp	r0, #0
  405bbc:	f000 8581 	beq.w	4066c2 <_dtoa_r+0xb7a>
  405bc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405bc2:	b953      	cbnz	r3, 405bda <_dtoa_r+0x92>
  405bc4:	4ba1      	ldr	r3, [pc, #644]	; (405e4c <_dtoa_r+0x304>)
  405bc6:	e021      	b.n	405c0c <_dtoa_r+0xc4>
  405bc8:	4ba1      	ldr	r3, [pc, #644]	; (405e50 <_dtoa_r+0x308>)
  405bca:	9306      	str	r3, [sp, #24]
  405bcc:	3308      	adds	r3, #8
  405bce:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405bd0:	6013      	str	r3, [r2, #0]
  405bd2:	9806      	ldr	r0, [sp, #24]
  405bd4:	b015      	add	sp, #84	; 0x54
  405bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bda:	4b9c      	ldr	r3, [pc, #624]	; (405e4c <_dtoa_r+0x304>)
  405bdc:	9306      	str	r3, [sp, #24]
  405bde:	3303      	adds	r3, #3
  405be0:	e7f5      	b.n	405bce <_dtoa_r+0x86>
  405be2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  405be6:	2200      	movs	r2, #0
  405be8:	2300      	movs	r3, #0
  405bea:	4630      	mov	r0, r6
  405bec:	4639      	mov	r1, r7
  405bee:	f7ff f8f1 	bl	404dd4 <__aeabi_dcmpeq>
  405bf2:	4680      	mov	r8, r0
  405bf4:	b160      	cbz	r0, 405c10 <_dtoa_r+0xc8>
  405bf6:	9a20      	ldr	r2, [sp, #128]	; 0x80
  405bf8:	2301      	movs	r3, #1
  405bfa:	6013      	str	r3, [r2, #0]
  405bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405bfe:	2b00      	cmp	r3, #0
  405c00:	f000 855c 	beq.w	4066bc <_dtoa_r+0xb74>
  405c04:	4b93      	ldr	r3, [pc, #588]	; (405e54 <_dtoa_r+0x30c>)
  405c06:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405c08:	6013      	str	r3, [r2, #0]
  405c0a:	3b01      	subs	r3, #1
  405c0c:	9306      	str	r3, [sp, #24]
  405c0e:	e7e0      	b.n	405bd2 <_dtoa_r+0x8a>
  405c10:	ab12      	add	r3, sp, #72	; 0x48
  405c12:	9301      	str	r3, [sp, #4]
  405c14:	ab13      	add	r3, sp, #76	; 0x4c
  405c16:	9300      	str	r3, [sp, #0]
  405c18:	4632      	mov	r2, r6
  405c1a:	463b      	mov	r3, r7
  405c1c:	4620      	mov	r0, r4
  405c1e:	f001 fa30 	bl	407082 <__d2b>
  405c22:	f3c9 550a 	ubfx	r5, r9, #20, #11
  405c26:	4682      	mov	sl, r0
  405c28:	2d00      	cmp	r5, #0
  405c2a:	d07c      	beq.n	405d26 <_dtoa_r+0x1de>
  405c2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
  405c30:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  405c34:	4630      	mov	r0, r6
  405c36:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405c3a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  405c3e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  405c42:	2200      	movs	r2, #0
  405c44:	4b84      	ldr	r3, [pc, #528]	; (405e58 <_dtoa_r+0x310>)
  405c46:	f7fe fca9 	bl	40459c <__aeabi_dsub>
  405c4a:	a379      	add	r3, pc, #484	; (adr r3, 405e30 <_dtoa_r+0x2e8>)
  405c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c50:	f7fe fe58 	bl	404904 <__aeabi_dmul>
  405c54:	a378      	add	r3, pc, #480	; (adr r3, 405e38 <_dtoa_r+0x2f0>)
  405c56:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c5a:	f7fe fca1 	bl	4045a0 <__adddf3>
  405c5e:	4606      	mov	r6, r0
  405c60:	4628      	mov	r0, r5
  405c62:	460f      	mov	r7, r1
  405c64:	f7fe fde8 	bl	404838 <__aeabi_i2d>
  405c68:	a375      	add	r3, pc, #468	; (adr r3, 405e40 <_dtoa_r+0x2f8>)
  405c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c6e:	f7fe fe49 	bl	404904 <__aeabi_dmul>
  405c72:	4602      	mov	r2, r0
  405c74:	460b      	mov	r3, r1
  405c76:	4630      	mov	r0, r6
  405c78:	4639      	mov	r1, r7
  405c7a:	f7fe fc91 	bl	4045a0 <__adddf3>
  405c7e:	4606      	mov	r6, r0
  405c80:	460f      	mov	r7, r1
  405c82:	f7ff f8ef 	bl	404e64 <__aeabi_d2iz>
  405c86:	2200      	movs	r2, #0
  405c88:	4683      	mov	fp, r0
  405c8a:	2300      	movs	r3, #0
  405c8c:	4630      	mov	r0, r6
  405c8e:	4639      	mov	r1, r7
  405c90:	f7ff f8aa 	bl	404de8 <__aeabi_dcmplt>
  405c94:	b158      	cbz	r0, 405cae <_dtoa_r+0x166>
  405c96:	4658      	mov	r0, fp
  405c98:	f7fe fdce 	bl	404838 <__aeabi_i2d>
  405c9c:	4602      	mov	r2, r0
  405c9e:	460b      	mov	r3, r1
  405ca0:	4630      	mov	r0, r6
  405ca2:	4639      	mov	r1, r7
  405ca4:	f7ff f896 	bl	404dd4 <__aeabi_dcmpeq>
  405ca8:	b908      	cbnz	r0, 405cae <_dtoa_r+0x166>
  405caa:	f10b 3bff 	add.w	fp, fp, #4294967295
  405cae:	f1bb 0f16 	cmp.w	fp, #22
  405cb2:	d857      	bhi.n	405d64 <_dtoa_r+0x21c>
  405cb4:	4969      	ldr	r1, [pc, #420]	; (405e5c <_dtoa_r+0x314>)
  405cb6:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  405cba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
  405cc2:	f7ff f8af 	bl	404e24 <__aeabi_dcmpgt>
  405cc6:	2800      	cmp	r0, #0
  405cc8:	d04e      	beq.n	405d68 <_dtoa_r+0x220>
  405cca:	f10b 3bff 	add.w	fp, fp, #4294967295
  405cce:	2300      	movs	r3, #0
  405cd0:	930d      	str	r3, [sp, #52]	; 0x34
  405cd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405cd4:	1b5d      	subs	r5, r3, r5
  405cd6:	1e6b      	subs	r3, r5, #1
  405cd8:	9307      	str	r3, [sp, #28]
  405cda:	bf43      	ittte	mi
  405cdc:	2300      	movmi	r3, #0
  405cde:	f1c5 0801 	rsbmi	r8, r5, #1
  405ce2:	9307      	strmi	r3, [sp, #28]
  405ce4:	f04f 0800 	movpl.w	r8, #0
  405ce8:	f1bb 0f00 	cmp.w	fp, #0
  405cec:	db3e      	blt.n	405d6c <_dtoa_r+0x224>
  405cee:	9b07      	ldr	r3, [sp, #28]
  405cf0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  405cf4:	445b      	add	r3, fp
  405cf6:	9307      	str	r3, [sp, #28]
  405cf8:	2300      	movs	r3, #0
  405cfa:	9308      	str	r3, [sp, #32]
  405cfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405cfe:	2b09      	cmp	r3, #9
  405d00:	f200 80b0 	bhi.w	405e64 <_dtoa_r+0x31c>
  405d04:	2b05      	cmp	r3, #5
  405d06:	bfc4      	itt	gt
  405d08:	3b04      	subgt	r3, #4
  405d0a:	931e      	strgt	r3, [sp, #120]	; 0x78
  405d0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405d0e:	f1a3 0302 	sub.w	r3, r3, #2
  405d12:	bfcc      	ite	gt
  405d14:	2600      	movgt	r6, #0
  405d16:	2601      	movle	r6, #1
  405d18:	2b03      	cmp	r3, #3
  405d1a:	f200 80af 	bhi.w	405e7c <_dtoa_r+0x334>
  405d1e:	e8df f003 	tbb	[pc, r3]
  405d22:	8583      	.short	0x8583
  405d24:	772d      	.short	0x772d
  405d26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405d28:	9d12      	ldr	r5, [sp, #72]	; 0x48
  405d2a:	441d      	add	r5, r3
  405d2c:	f205 4332 	addw	r3, r5, #1074	; 0x432
  405d30:	2b20      	cmp	r3, #32
  405d32:	dd11      	ble.n	405d58 <_dtoa_r+0x210>
  405d34:	9a02      	ldr	r2, [sp, #8]
  405d36:	f205 4012 	addw	r0, r5, #1042	; 0x412
  405d3a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405d3e:	fa22 f000 	lsr.w	r0, r2, r0
  405d42:	fa09 f303 	lsl.w	r3, r9, r3
  405d46:	4318      	orrs	r0, r3
  405d48:	f7fe fd66 	bl	404818 <__aeabi_ui2d>
  405d4c:	2301      	movs	r3, #1
  405d4e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405d52:	3d01      	subs	r5, #1
  405d54:	9310      	str	r3, [sp, #64]	; 0x40
  405d56:	e774      	b.n	405c42 <_dtoa_r+0xfa>
  405d58:	f1c3 0020 	rsb	r0, r3, #32
  405d5c:	9b02      	ldr	r3, [sp, #8]
  405d5e:	fa03 f000 	lsl.w	r0, r3, r0
  405d62:	e7f1      	b.n	405d48 <_dtoa_r+0x200>
  405d64:	2301      	movs	r3, #1
  405d66:	e7b3      	b.n	405cd0 <_dtoa_r+0x188>
  405d68:	900d      	str	r0, [sp, #52]	; 0x34
  405d6a:	e7b2      	b.n	405cd2 <_dtoa_r+0x18a>
  405d6c:	f1cb 0300 	rsb	r3, fp, #0
  405d70:	9308      	str	r3, [sp, #32]
  405d72:	2300      	movs	r3, #0
  405d74:	eba8 080b 	sub.w	r8, r8, fp
  405d78:	930c      	str	r3, [sp, #48]	; 0x30
  405d7a:	e7bf      	b.n	405cfc <_dtoa_r+0x1b4>
  405d7c:	2301      	movs	r3, #1
  405d7e:	9309      	str	r3, [sp, #36]	; 0x24
  405d80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405d82:	2b00      	cmp	r3, #0
  405d84:	dd7d      	ble.n	405e82 <_dtoa_r+0x33a>
  405d86:	9304      	str	r3, [sp, #16]
  405d88:	4699      	mov	r9, r3
  405d8a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  405d8c:	2200      	movs	r2, #0
  405d8e:	606a      	str	r2, [r5, #4]
  405d90:	2104      	movs	r1, #4
  405d92:	f101 0214 	add.w	r2, r1, #20
  405d96:	429a      	cmp	r2, r3
  405d98:	d978      	bls.n	405e8c <_dtoa_r+0x344>
  405d9a:	6869      	ldr	r1, [r5, #4]
  405d9c:	4620      	mov	r0, r4
  405d9e:	f000 feef 	bl	406b80 <_Balloc>
  405da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405da4:	6028      	str	r0, [r5, #0]
  405da6:	681b      	ldr	r3, [r3, #0]
  405da8:	9306      	str	r3, [sp, #24]
  405daa:	f1b9 0f0e 	cmp.w	r9, #14
  405dae:	f200 80ee 	bhi.w	405f8e <_dtoa_r+0x446>
  405db2:	2e00      	cmp	r6, #0
  405db4:	f000 80eb 	beq.w	405f8e <_dtoa_r+0x446>
  405db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405dbc:	f1bb 0f00 	cmp.w	fp, #0
  405dc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  405dc4:	dd77      	ble.n	405eb6 <_dtoa_r+0x36e>
  405dc6:	4a25      	ldr	r2, [pc, #148]	; (405e5c <_dtoa_r+0x314>)
  405dc8:	f00b 030f 	and.w	r3, fp, #15
  405dcc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  405dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
  405dd4:	ea4f 162b 	mov.w	r6, fp, asr #4
  405dd8:	06f0      	lsls	r0, r6, #27
  405dda:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  405dde:	d55a      	bpl.n	405e96 <_dtoa_r+0x34e>
  405de0:	4b1f      	ldr	r3, [pc, #124]	; (405e60 <_dtoa_r+0x318>)
  405de2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  405de6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405dea:	f7fe feb5 	bl	404b58 <__aeabi_ddiv>
  405dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405df2:	f006 060f 	and.w	r6, r6, #15
  405df6:	2503      	movs	r5, #3
  405df8:	4f19      	ldr	r7, [pc, #100]	; (405e60 <_dtoa_r+0x318>)
  405dfa:	2e00      	cmp	r6, #0
  405dfc:	d14d      	bne.n	405e9a <_dtoa_r+0x352>
  405dfe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  405e02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405e06:	f7fe fea7 	bl	404b58 <__aeabi_ddiv>
  405e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405e0e:	e06c      	b.n	405eea <_dtoa_r+0x3a2>
  405e10:	2301      	movs	r3, #1
  405e12:	9309      	str	r3, [sp, #36]	; 0x24
  405e14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405e16:	445b      	add	r3, fp
  405e18:	f103 0901 	add.w	r9, r3, #1
  405e1c:	9304      	str	r3, [sp, #16]
  405e1e:	464b      	mov	r3, r9
  405e20:	2b01      	cmp	r3, #1
  405e22:	bfb8      	it	lt
  405e24:	2301      	movlt	r3, #1
  405e26:	e7b0      	b.n	405d8a <_dtoa_r+0x242>
  405e28:	2300      	movs	r3, #0
  405e2a:	e7a8      	b.n	405d7e <_dtoa_r+0x236>
  405e2c:	2300      	movs	r3, #0
  405e2e:	e7f0      	b.n	405e12 <_dtoa_r+0x2ca>
  405e30:	636f4361 	.word	0x636f4361
  405e34:	3fd287a7 	.word	0x3fd287a7
  405e38:	8b60c8b3 	.word	0x8b60c8b3
  405e3c:	3fc68a28 	.word	0x3fc68a28
  405e40:	509f79fb 	.word	0x509f79fb
  405e44:	3fd34413 	.word	0x3fd34413
  405e48:	7ff00000 	.word	0x7ff00000
  405e4c:	004080d9 	.word	0x004080d9
  405e50:	004080d0 	.word	0x004080d0
  405e54:	004080ad 	.word	0x004080ad
  405e58:	3ff80000 	.word	0x3ff80000
  405e5c:	00408168 	.word	0x00408168
  405e60:	00408140 	.word	0x00408140
  405e64:	2601      	movs	r6, #1
  405e66:	2300      	movs	r3, #0
  405e68:	931e      	str	r3, [sp, #120]	; 0x78
  405e6a:	9609      	str	r6, [sp, #36]	; 0x24
  405e6c:	f04f 33ff 	mov.w	r3, #4294967295
  405e70:	9304      	str	r3, [sp, #16]
  405e72:	4699      	mov	r9, r3
  405e74:	2200      	movs	r2, #0
  405e76:	2312      	movs	r3, #18
  405e78:	921f      	str	r2, [sp, #124]	; 0x7c
  405e7a:	e786      	b.n	405d8a <_dtoa_r+0x242>
  405e7c:	2301      	movs	r3, #1
  405e7e:	9309      	str	r3, [sp, #36]	; 0x24
  405e80:	e7f4      	b.n	405e6c <_dtoa_r+0x324>
  405e82:	2301      	movs	r3, #1
  405e84:	9304      	str	r3, [sp, #16]
  405e86:	4699      	mov	r9, r3
  405e88:	461a      	mov	r2, r3
  405e8a:	e7f5      	b.n	405e78 <_dtoa_r+0x330>
  405e8c:	686a      	ldr	r2, [r5, #4]
  405e8e:	3201      	adds	r2, #1
  405e90:	606a      	str	r2, [r5, #4]
  405e92:	0049      	lsls	r1, r1, #1
  405e94:	e77d      	b.n	405d92 <_dtoa_r+0x24a>
  405e96:	2502      	movs	r5, #2
  405e98:	e7ae      	b.n	405df8 <_dtoa_r+0x2b0>
  405e9a:	07f1      	lsls	r1, r6, #31
  405e9c:	d508      	bpl.n	405eb0 <_dtoa_r+0x368>
  405e9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  405ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
  405ea6:	f7fe fd2d 	bl	404904 <__aeabi_dmul>
  405eaa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  405eae:	3501      	adds	r5, #1
  405eb0:	1076      	asrs	r6, r6, #1
  405eb2:	3708      	adds	r7, #8
  405eb4:	e7a1      	b.n	405dfa <_dtoa_r+0x2b2>
  405eb6:	f000 80a5 	beq.w	406004 <_dtoa_r+0x4bc>
  405eba:	f1cb 0600 	rsb	r6, fp, #0
  405ebe:	4ba3      	ldr	r3, [pc, #652]	; (40614c <_dtoa_r+0x604>)
  405ec0:	4fa3      	ldr	r7, [pc, #652]	; (406150 <_dtoa_r+0x608>)
  405ec2:	f006 020f 	and.w	r2, r6, #15
  405ec6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405eca:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ece:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  405ed2:	f7fe fd17 	bl	404904 <__aeabi_dmul>
  405ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405eda:	1136      	asrs	r6, r6, #4
  405edc:	2300      	movs	r3, #0
  405ede:	2502      	movs	r5, #2
  405ee0:	2e00      	cmp	r6, #0
  405ee2:	f040 8084 	bne.w	405fee <_dtoa_r+0x4a6>
  405ee6:	2b00      	cmp	r3, #0
  405ee8:	d18f      	bne.n	405e0a <_dtoa_r+0x2c2>
  405eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405eec:	2b00      	cmp	r3, #0
  405eee:	f000 808b 	beq.w	406008 <_dtoa_r+0x4c0>
  405ef2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405ef6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  405efa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  405efe:	2200      	movs	r2, #0
  405f00:	4b94      	ldr	r3, [pc, #592]	; (406154 <_dtoa_r+0x60c>)
  405f02:	f7fe ff71 	bl	404de8 <__aeabi_dcmplt>
  405f06:	2800      	cmp	r0, #0
  405f08:	d07e      	beq.n	406008 <_dtoa_r+0x4c0>
  405f0a:	f1b9 0f00 	cmp.w	r9, #0
  405f0e:	d07b      	beq.n	406008 <_dtoa_r+0x4c0>
  405f10:	9b04      	ldr	r3, [sp, #16]
  405f12:	2b00      	cmp	r3, #0
  405f14:	dd37      	ble.n	405f86 <_dtoa_r+0x43e>
  405f16:	2200      	movs	r2, #0
  405f18:	4b8f      	ldr	r3, [pc, #572]	; (406158 <_dtoa_r+0x610>)
  405f1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  405f1e:	f7fe fcf1 	bl	404904 <__aeabi_dmul>
  405f22:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405f26:	9e04      	ldr	r6, [sp, #16]
  405f28:	f10b 37ff 	add.w	r7, fp, #4294967295
  405f2c:	3501      	adds	r5, #1
  405f2e:	4628      	mov	r0, r5
  405f30:	f7fe fc82 	bl	404838 <__aeabi_i2d>
  405f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405f38:	f7fe fce4 	bl	404904 <__aeabi_dmul>
  405f3c:	4b87      	ldr	r3, [pc, #540]	; (40615c <_dtoa_r+0x614>)
  405f3e:	2200      	movs	r2, #0
  405f40:	f7fe fb2e 	bl	4045a0 <__adddf3>
  405f44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  405f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405f4a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  405f4e:	950b      	str	r5, [sp, #44]	; 0x2c
  405f50:	2e00      	cmp	r6, #0
  405f52:	d15c      	bne.n	40600e <_dtoa_r+0x4c6>
  405f54:	2200      	movs	r2, #0
  405f56:	4b82      	ldr	r3, [pc, #520]	; (406160 <_dtoa_r+0x618>)
  405f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405f5c:	f7fe fb1e 	bl	40459c <__aeabi_dsub>
  405f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405f62:	462b      	mov	r3, r5
  405f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405f68:	f7fe ff5c 	bl	404e24 <__aeabi_dcmpgt>
  405f6c:	2800      	cmp	r0, #0
  405f6e:	f040 82f7 	bne.w	406560 <_dtoa_r+0xa18>
  405f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405f74:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  405f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405f7c:	f7fe ff34 	bl	404de8 <__aeabi_dcmplt>
  405f80:	2800      	cmp	r0, #0
  405f82:	f040 82eb 	bne.w	40655c <_dtoa_r+0xa14>
  405f86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  405f8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  405f8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405f90:	2b00      	cmp	r3, #0
  405f92:	f2c0 8151 	blt.w	406238 <_dtoa_r+0x6f0>
  405f96:	f1bb 0f0e 	cmp.w	fp, #14
  405f9a:	f300 814d 	bgt.w	406238 <_dtoa_r+0x6f0>
  405f9e:	4b6b      	ldr	r3, [pc, #428]	; (40614c <_dtoa_r+0x604>)
  405fa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  405fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
  405fa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  405fac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405fae:	2b00      	cmp	r3, #0
  405fb0:	f280 80da 	bge.w	406168 <_dtoa_r+0x620>
  405fb4:	f1b9 0f00 	cmp.w	r9, #0
  405fb8:	f300 80d6 	bgt.w	406168 <_dtoa_r+0x620>
  405fbc:	f040 82cd 	bne.w	40655a <_dtoa_r+0xa12>
  405fc0:	2200      	movs	r2, #0
  405fc2:	4b67      	ldr	r3, [pc, #412]	; (406160 <_dtoa_r+0x618>)
  405fc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405fc8:	f7fe fc9c 	bl	404904 <__aeabi_dmul>
  405fcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405fd0:	f7fe ff1e 	bl	404e10 <__aeabi_dcmpge>
  405fd4:	464e      	mov	r6, r9
  405fd6:	464f      	mov	r7, r9
  405fd8:	2800      	cmp	r0, #0
  405fda:	f040 82a4 	bne.w	406526 <_dtoa_r+0x9de>
  405fde:	9b06      	ldr	r3, [sp, #24]
  405fe0:	9a06      	ldr	r2, [sp, #24]
  405fe2:	1c5d      	adds	r5, r3, #1
  405fe4:	2331      	movs	r3, #49	; 0x31
  405fe6:	7013      	strb	r3, [r2, #0]
  405fe8:	f10b 0b01 	add.w	fp, fp, #1
  405fec:	e29f      	b.n	40652e <_dtoa_r+0x9e6>
  405fee:	07f2      	lsls	r2, r6, #31
  405ff0:	d505      	bpl.n	405ffe <_dtoa_r+0x4b6>
  405ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
  405ff6:	f7fe fc85 	bl	404904 <__aeabi_dmul>
  405ffa:	3501      	adds	r5, #1
  405ffc:	2301      	movs	r3, #1
  405ffe:	1076      	asrs	r6, r6, #1
  406000:	3708      	adds	r7, #8
  406002:	e76d      	b.n	405ee0 <_dtoa_r+0x398>
  406004:	2502      	movs	r5, #2
  406006:	e770      	b.n	405eea <_dtoa_r+0x3a2>
  406008:	465f      	mov	r7, fp
  40600a:	464e      	mov	r6, r9
  40600c:	e78f      	b.n	405f2e <_dtoa_r+0x3e6>
  40600e:	9a06      	ldr	r2, [sp, #24]
  406010:	4b4e      	ldr	r3, [pc, #312]	; (40614c <_dtoa_r+0x604>)
  406012:	4432      	add	r2, r6
  406014:	9211      	str	r2, [sp, #68]	; 0x44
  406016:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406018:	1e71      	subs	r1, r6, #1
  40601a:	2a00      	cmp	r2, #0
  40601c:	d048      	beq.n	4060b0 <_dtoa_r+0x568>
  40601e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  406022:	e9d3 2300 	ldrd	r2, r3, [r3]
  406026:	2000      	movs	r0, #0
  406028:	494e      	ldr	r1, [pc, #312]	; (406164 <_dtoa_r+0x61c>)
  40602a:	f7fe fd95 	bl	404b58 <__aeabi_ddiv>
  40602e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  406032:	f7fe fab3 	bl	40459c <__aeabi_dsub>
  406036:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40603a:	9d06      	ldr	r5, [sp, #24]
  40603c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406040:	f7fe ff10 	bl	404e64 <__aeabi_d2iz>
  406044:	4606      	mov	r6, r0
  406046:	f7fe fbf7 	bl	404838 <__aeabi_i2d>
  40604a:	4602      	mov	r2, r0
  40604c:	460b      	mov	r3, r1
  40604e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406052:	f7fe faa3 	bl	40459c <__aeabi_dsub>
  406056:	3630      	adds	r6, #48	; 0x30
  406058:	f805 6b01 	strb.w	r6, [r5], #1
  40605c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  406060:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406064:	f7fe fec0 	bl	404de8 <__aeabi_dcmplt>
  406068:	2800      	cmp	r0, #0
  40606a:	d165      	bne.n	406138 <_dtoa_r+0x5f0>
  40606c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406070:	2000      	movs	r0, #0
  406072:	4938      	ldr	r1, [pc, #224]	; (406154 <_dtoa_r+0x60c>)
  406074:	f7fe fa92 	bl	40459c <__aeabi_dsub>
  406078:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40607c:	f7fe feb4 	bl	404de8 <__aeabi_dcmplt>
  406080:	2800      	cmp	r0, #0
  406082:	f040 80b9 	bne.w	4061f8 <_dtoa_r+0x6b0>
  406086:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406088:	429d      	cmp	r5, r3
  40608a:	f43f af7c 	beq.w	405f86 <_dtoa_r+0x43e>
  40608e:	2200      	movs	r2, #0
  406090:	4b31      	ldr	r3, [pc, #196]	; (406158 <_dtoa_r+0x610>)
  406092:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  406096:	f7fe fc35 	bl	404904 <__aeabi_dmul>
  40609a:	2200      	movs	r2, #0
  40609c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4060a0:	4b2d      	ldr	r3, [pc, #180]	; (406158 <_dtoa_r+0x610>)
  4060a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4060a6:	f7fe fc2d 	bl	404904 <__aeabi_dmul>
  4060aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4060ae:	e7c5      	b.n	40603c <_dtoa_r+0x4f4>
  4060b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4060b4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4060b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4060bc:	f7fe fc22 	bl	404904 <__aeabi_dmul>
  4060c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4060c4:	9d06      	ldr	r5, [sp, #24]
  4060c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4060ca:	f7fe fecb 	bl	404e64 <__aeabi_d2iz>
  4060ce:	4606      	mov	r6, r0
  4060d0:	f7fe fbb2 	bl	404838 <__aeabi_i2d>
  4060d4:	3630      	adds	r6, #48	; 0x30
  4060d6:	4602      	mov	r2, r0
  4060d8:	460b      	mov	r3, r1
  4060da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4060de:	f7fe fa5d 	bl	40459c <__aeabi_dsub>
  4060e2:	f805 6b01 	strb.w	r6, [r5], #1
  4060e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4060e8:	42ab      	cmp	r3, r5
  4060ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4060ee:	f04f 0200 	mov.w	r2, #0
  4060f2:	d125      	bne.n	406140 <_dtoa_r+0x5f8>
  4060f4:	4b1b      	ldr	r3, [pc, #108]	; (406164 <_dtoa_r+0x61c>)
  4060f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4060fa:	f7fe fa51 	bl	4045a0 <__adddf3>
  4060fe:	4602      	mov	r2, r0
  406100:	460b      	mov	r3, r1
  406102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406106:	f7fe fe8d 	bl	404e24 <__aeabi_dcmpgt>
  40610a:	2800      	cmp	r0, #0
  40610c:	d174      	bne.n	4061f8 <_dtoa_r+0x6b0>
  40610e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  406112:	2000      	movs	r0, #0
  406114:	4913      	ldr	r1, [pc, #76]	; (406164 <_dtoa_r+0x61c>)
  406116:	f7fe fa41 	bl	40459c <__aeabi_dsub>
  40611a:	4602      	mov	r2, r0
  40611c:	460b      	mov	r3, r1
  40611e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406122:	f7fe fe61 	bl	404de8 <__aeabi_dcmplt>
  406126:	2800      	cmp	r0, #0
  406128:	f43f af2d 	beq.w	405f86 <_dtoa_r+0x43e>
  40612c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406130:	2b30      	cmp	r3, #48	; 0x30
  406132:	f105 32ff 	add.w	r2, r5, #4294967295
  406136:	d001      	beq.n	40613c <_dtoa_r+0x5f4>
  406138:	46bb      	mov	fp, r7
  40613a:	e04c      	b.n	4061d6 <_dtoa_r+0x68e>
  40613c:	4615      	mov	r5, r2
  40613e:	e7f5      	b.n	40612c <_dtoa_r+0x5e4>
  406140:	4b05      	ldr	r3, [pc, #20]	; (406158 <_dtoa_r+0x610>)
  406142:	f7fe fbdf 	bl	404904 <__aeabi_dmul>
  406146:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40614a:	e7bc      	b.n	4060c6 <_dtoa_r+0x57e>
  40614c:	00408168 	.word	0x00408168
  406150:	00408140 	.word	0x00408140
  406154:	3ff00000 	.word	0x3ff00000
  406158:	40240000 	.word	0x40240000
  40615c:	401c0000 	.word	0x401c0000
  406160:	40140000 	.word	0x40140000
  406164:	3fe00000 	.word	0x3fe00000
  406168:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40616c:	9d06      	ldr	r5, [sp, #24]
  40616e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  406172:	4630      	mov	r0, r6
  406174:	4639      	mov	r1, r7
  406176:	f7fe fcef 	bl	404b58 <__aeabi_ddiv>
  40617a:	f7fe fe73 	bl	404e64 <__aeabi_d2iz>
  40617e:	4680      	mov	r8, r0
  406180:	f7fe fb5a 	bl	404838 <__aeabi_i2d>
  406184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  406188:	f7fe fbbc 	bl	404904 <__aeabi_dmul>
  40618c:	4602      	mov	r2, r0
  40618e:	460b      	mov	r3, r1
  406190:	4630      	mov	r0, r6
  406192:	4639      	mov	r1, r7
  406194:	f108 0630 	add.w	r6, r8, #48	; 0x30
  406198:	f7fe fa00 	bl	40459c <__aeabi_dsub>
  40619c:	f805 6b01 	strb.w	r6, [r5], #1
  4061a0:	9e06      	ldr	r6, [sp, #24]
  4061a2:	1bae      	subs	r6, r5, r6
  4061a4:	45b1      	cmp	r9, r6
  4061a6:	4602      	mov	r2, r0
  4061a8:	460b      	mov	r3, r1
  4061aa:	d138      	bne.n	40621e <_dtoa_r+0x6d6>
  4061ac:	f7fe f9f8 	bl	4045a0 <__adddf3>
  4061b0:	4606      	mov	r6, r0
  4061b2:	460f      	mov	r7, r1
  4061b4:	4602      	mov	r2, r0
  4061b6:	460b      	mov	r3, r1
  4061b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4061bc:	f7fe fe14 	bl	404de8 <__aeabi_dcmplt>
  4061c0:	b9c8      	cbnz	r0, 4061f6 <_dtoa_r+0x6ae>
  4061c2:	4632      	mov	r2, r6
  4061c4:	463b      	mov	r3, r7
  4061c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4061ca:	f7fe fe03 	bl	404dd4 <__aeabi_dcmpeq>
  4061ce:	b110      	cbz	r0, 4061d6 <_dtoa_r+0x68e>
  4061d0:	f018 0f01 	tst.w	r8, #1
  4061d4:	d10f      	bne.n	4061f6 <_dtoa_r+0x6ae>
  4061d6:	4651      	mov	r1, sl
  4061d8:	4620      	mov	r0, r4
  4061da:	f000 fd05 	bl	406be8 <_Bfree>
  4061de:	2300      	movs	r3, #0
  4061e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4061e2:	702b      	strb	r3, [r5, #0]
  4061e4:	f10b 0301 	add.w	r3, fp, #1
  4061e8:	6013      	str	r3, [r2, #0]
  4061ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4061ec:	2b00      	cmp	r3, #0
  4061ee:	f43f acf0 	beq.w	405bd2 <_dtoa_r+0x8a>
  4061f2:	601d      	str	r5, [r3, #0]
  4061f4:	e4ed      	b.n	405bd2 <_dtoa_r+0x8a>
  4061f6:	465f      	mov	r7, fp
  4061f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4061fc:	2a39      	cmp	r2, #57	; 0x39
  4061fe:	f105 33ff 	add.w	r3, r5, #4294967295
  406202:	d106      	bne.n	406212 <_dtoa_r+0x6ca>
  406204:	9a06      	ldr	r2, [sp, #24]
  406206:	429a      	cmp	r2, r3
  406208:	d107      	bne.n	40621a <_dtoa_r+0x6d2>
  40620a:	2330      	movs	r3, #48	; 0x30
  40620c:	7013      	strb	r3, [r2, #0]
  40620e:	3701      	adds	r7, #1
  406210:	4613      	mov	r3, r2
  406212:	781a      	ldrb	r2, [r3, #0]
  406214:	3201      	adds	r2, #1
  406216:	701a      	strb	r2, [r3, #0]
  406218:	e78e      	b.n	406138 <_dtoa_r+0x5f0>
  40621a:	461d      	mov	r5, r3
  40621c:	e7ec      	b.n	4061f8 <_dtoa_r+0x6b0>
  40621e:	2200      	movs	r2, #0
  406220:	4bb4      	ldr	r3, [pc, #720]	; (4064f4 <_dtoa_r+0x9ac>)
  406222:	f7fe fb6f 	bl	404904 <__aeabi_dmul>
  406226:	2200      	movs	r2, #0
  406228:	2300      	movs	r3, #0
  40622a:	4606      	mov	r6, r0
  40622c:	460f      	mov	r7, r1
  40622e:	f7fe fdd1 	bl	404dd4 <__aeabi_dcmpeq>
  406232:	2800      	cmp	r0, #0
  406234:	d09b      	beq.n	40616e <_dtoa_r+0x626>
  406236:	e7ce      	b.n	4061d6 <_dtoa_r+0x68e>
  406238:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40623a:	2a00      	cmp	r2, #0
  40623c:	f000 8129 	beq.w	406492 <_dtoa_r+0x94a>
  406240:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  406242:	2a01      	cmp	r2, #1
  406244:	f300 810e 	bgt.w	406464 <_dtoa_r+0x91c>
  406248:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40624a:	2a00      	cmp	r2, #0
  40624c:	f000 8106 	beq.w	40645c <_dtoa_r+0x914>
  406250:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406254:	9e08      	ldr	r6, [sp, #32]
  406256:	4645      	mov	r5, r8
  406258:	9a07      	ldr	r2, [sp, #28]
  40625a:	2101      	movs	r1, #1
  40625c:	441a      	add	r2, r3
  40625e:	4620      	mov	r0, r4
  406260:	4498      	add	r8, r3
  406262:	9207      	str	r2, [sp, #28]
  406264:	f000 fd60 	bl	406d28 <__i2b>
  406268:	4607      	mov	r7, r0
  40626a:	2d00      	cmp	r5, #0
  40626c:	dd0b      	ble.n	406286 <_dtoa_r+0x73e>
  40626e:	9b07      	ldr	r3, [sp, #28]
  406270:	2b00      	cmp	r3, #0
  406272:	dd08      	ble.n	406286 <_dtoa_r+0x73e>
  406274:	42ab      	cmp	r3, r5
  406276:	9a07      	ldr	r2, [sp, #28]
  406278:	bfa8      	it	ge
  40627a:	462b      	movge	r3, r5
  40627c:	eba8 0803 	sub.w	r8, r8, r3
  406280:	1aed      	subs	r5, r5, r3
  406282:	1ad3      	subs	r3, r2, r3
  406284:	9307      	str	r3, [sp, #28]
  406286:	9b08      	ldr	r3, [sp, #32]
  406288:	b1fb      	cbz	r3, 4062ca <_dtoa_r+0x782>
  40628a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40628c:	2b00      	cmp	r3, #0
  40628e:	f000 8104 	beq.w	40649a <_dtoa_r+0x952>
  406292:	2e00      	cmp	r6, #0
  406294:	dd11      	ble.n	4062ba <_dtoa_r+0x772>
  406296:	4639      	mov	r1, r7
  406298:	4632      	mov	r2, r6
  40629a:	4620      	mov	r0, r4
  40629c:	f000 fdda 	bl	406e54 <__pow5mult>
  4062a0:	4652      	mov	r2, sl
  4062a2:	4601      	mov	r1, r0
  4062a4:	4607      	mov	r7, r0
  4062a6:	4620      	mov	r0, r4
  4062a8:	f000 fd47 	bl	406d3a <__multiply>
  4062ac:	4651      	mov	r1, sl
  4062ae:	900a      	str	r0, [sp, #40]	; 0x28
  4062b0:	4620      	mov	r0, r4
  4062b2:	f000 fc99 	bl	406be8 <_Bfree>
  4062b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4062b8:	469a      	mov	sl, r3
  4062ba:	9b08      	ldr	r3, [sp, #32]
  4062bc:	1b9a      	subs	r2, r3, r6
  4062be:	d004      	beq.n	4062ca <_dtoa_r+0x782>
  4062c0:	4651      	mov	r1, sl
  4062c2:	4620      	mov	r0, r4
  4062c4:	f000 fdc6 	bl	406e54 <__pow5mult>
  4062c8:	4682      	mov	sl, r0
  4062ca:	2101      	movs	r1, #1
  4062cc:	4620      	mov	r0, r4
  4062ce:	f000 fd2b 	bl	406d28 <__i2b>
  4062d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4062d4:	2b00      	cmp	r3, #0
  4062d6:	4606      	mov	r6, r0
  4062d8:	f340 80e1 	ble.w	40649e <_dtoa_r+0x956>
  4062dc:	461a      	mov	r2, r3
  4062de:	4601      	mov	r1, r0
  4062e0:	4620      	mov	r0, r4
  4062e2:	f000 fdb7 	bl	406e54 <__pow5mult>
  4062e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4062e8:	2b01      	cmp	r3, #1
  4062ea:	4606      	mov	r6, r0
  4062ec:	f340 80da 	ble.w	4064a4 <_dtoa_r+0x95c>
  4062f0:	2300      	movs	r3, #0
  4062f2:	9308      	str	r3, [sp, #32]
  4062f4:	6933      	ldr	r3, [r6, #16]
  4062f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4062fa:	6918      	ldr	r0, [r3, #16]
  4062fc:	f000 fcc6 	bl	406c8c <__hi0bits>
  406300:	f1c0 0020 	rsb	r0, r0, #32
  406304:	9b07      	ldr	r3, [sp, #28]
  406306:	4418      	add	r0, r3
  406308:	f010 001f 	ands.w	r0, r0, #31
  40630c:	f000 80f0 	beq.w	4064f0 <_dtoa_r+0x9a8>
  406310:	f1c0 0320 	rsb	r3, r0, #32
  406314:	2b04      	cmp	r3, #4
  406316:	f340 80e2 	ble.w	4064de <_dtoa_r+0x996>
  40631a:	9b07      	ldr	r3, [sp, #28]
  40631c:	f1c0 001c 	rsb	r0, r0, #28
  406320:	4480      	add	r8, r0
  406322:	4405      	add	r5, r0
  406324:	4403      	add	r3, r0
  406326:	9307      	str	r3, [sp, #28]
  406328:	f1b8 0f00 	cmp.w	r8, #0
  40632c:	dd05      	ble.n	40633a <_dtoa_r+0x7f2>
  40632e:	4651      	mov	r1, sl
  406330:	4642      	mov	r2, r8
  406332:	4620      	mov	r0, r4
  406334:	f000 fddc 	bl	406ef0 <__lshift>
  406338:	4682      	mov	sl, r0
  40633a:	9b07      	ldr	r3, [sp, #28]
  40633c:	2b00      	cmp	r3, #0
  40633e:	dd05      	ble.n	40634c <_dtoa_r+0x804>
  406340:	4631      	mov	r1, r6
  406342:	461a      	mov	r2, r3
  406344:	4620      	mov	r0, r4
  406346:	f000 fdd3 	bl	406ef0 <__lshift>
  40634a:	4606      	mov	r6, r0
  40634c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40634e:	2b00      	cmp	r3, #0
  406350:	f000 80d2 	beq.w	4064f8 <_dtoa_r+0x9b0>
  406354:	4631      	mov	r1, r6
  406356:	4650      	mov	r0, sl
  406358:	f000 fe1b 	bl	406f92 <__mcmp>
  40635c:	2800      	cmp	r0, #0
  40635e:	f280 80cb 	bge.w	4064f8 <_dtoa_r+0x9b0>
  406362:	2300      	movs	r3, #0
  406364:	4651      	mov	r1, sl
  406366:	220a      	movs	r2, #10
  406368:	4620      	mov	r0, r4
  40636a:	f000 fc54 	bl	406c16 <__multadd>
  40636e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406370:	f10b 3bff 	add.w	fp, fp, #4294967295
  406374:	4682      	mov	sl, r0
  406376:	2b00      	cmp	r3, #0
  406378:	f000 81aa 	beq.w	4066d0 <_dtoa_r+0xb88>
  40637c:	2300      	movs	r3, #0
  40637e:	4639      	mov	r1, r7
  406380:	220a      	movs	r2, #10
  406382:	4620      	mov	r0, r4
  406384:	f000 fc47 	bl	406c16 <__multadd>
  406388:	9b04      	ldr	r3, [sp, #16]
  40638a:	2b00      	cmp	r3, #0
  40638c:	4607      	mov	r7, r0
  40638e:	dc03      	bgt.n	406398 <_dtoa_r+0x850>
  406390:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  406392:	2b02      	cmp	r3, #2
  406394:	f300 80b8 	bgt.w	406508 <_dtoa_r+0x9c0>
  406398:	2d00      	cmp	r5, #0
  40639a:	dd05      	ble.n	4063a8 <_dtoa_r+0x860>
  40639c:	4639      	mov	r1, r7
  40639e:	462a      	mov	r2, r5
  4063a0:	4620      	mov	r0, r4
  4063a2:	f000 fda5 	bl	406ef0 <__lshift>
  4063a6:	4607      	mov	r7, r0
  4063a8:	9b08      	ldr	r3, [sp, #32]
  4063aa:	2b00      	cmp	r3, #0
  4063ac:	f000 8110 	beq.w	4065d0 <_dtoa_r+0xa88>
  4063b0:	6879      	ldr	r1, [r7, #4]
  4063b2:	4620      	mov	r0, r4
  4063b4:	f000 fbe4 	bl	406b80 <_Balloc>
  4063b8:	693a      	ldr	r2, [r7, #16]
  4063ba:	3202      	adds	r2, #2
  4063bc:	4605      	mov	r5, r0
  4063be:	0092      	lsls	r2, r2, #2
  4063c0:	f107 010c 	add.w	r1, r7, #12
  4063c4:	300c      	adds	r0, #12
  4063c6:	f7fe fde9 	bl	404f9c <memcpy>
  4063ca:	2201      	movs	r2, #1
  4063cc:	4629      	mov	r1, r5
  4063ce:	4620      	mov	r0, r4
  4063d0:	f000 fd8e 	bl	406ef0 <__lshift>
  4063d4:	9b02      	ldr	r3, [sp, #8]
  4063d6:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4063da:	9707      	str	r7, [sp, #28]
  4063dc:	f003 0301 	and.w	r3, r3, #1
  4063e0:	4607      	mov	r7, r0
  4063e2:	9308      	str	r3, [sp, #32]
  4063e4:	4631      	mov	r1, r6
  4063e6:	4650      	mov	r0, sl
  4063e8:	f7ff fb20 	bl	405a2c <quorem>
  4063ec:	9907      	ldr	r1, [sp, #28]
  4063ee:	4605      	mov	r5, r0
  4063f0:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4063f4:	4650      	mov	r0, sl
  4063f6:	f000 fdcc 	bl	406f92 <__mcmp>
  4063fa:	463a      	mov	r2, r7
  4063fc:	9002      	str	r0, [sp, #8]
  4063fe:	4631      	mov	r1, r6
  406400:	4620      	mov	r0, r4
  406402:	f000 fde0 	bl	406fc6 <__mdiff>
  406406:	68c3      	ldr	r3, [r0, #12]
  406408:	4602      	mov	r2, r0
  40640a:	2b00      	cmp	r3, #0
  40640c:	f040 80e2 	bne.w	4065d4 <_dtoa_r+0xa8c>
  406410:	4601      	mov	r1, r0
  406412:	9009      	str	r0, [sp, #36]	; 0x24
  406414:	4650      	mov	r0, sl
  406416:	f000 fdbc 	bl	406f92 <__mcmp>
  40641a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40641c:	4603      	mov	r3, r0
  40641e:	4611      	mov	r1, r2
  406420:	4620      	mov	r0, r4
  406422:	9309      	str	r3, [sp, #36]	; 0x24
  406424:	f000 fbe0 	bl	406be8 <_Bfree>
  406428:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40642a:	2b00      	cmp	r3, #0
  40642c:	f040 80d4 	bne.w	4065d8 <_dtoa_r+0xa90>
  406430:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  406432:	2a00      	cmp	r2, #0
  406434:	f040 80d0 	bne.w	4065d8 <_dtoa_r+0xa90>
  406438:	9a08      	ldr	r2, [sp, #32]
  40643a:	2a00      	cmp	r2, #0
  40643c:	f040 80cc 	bne.w	4065d8 <_dtoa_r+0xa90>
  406440:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  406444:	f000 80e8 	beq.w	406618 <_dtoa_r+0xad0>
  406448:	9b02      	ldr	r3, [sp, #8]
  40644a:	2b00      	cmp	r3, #0
  40644c:	dd01      	ble.n	406452 <_dtoa_r+0x90a>
  40644e:	f105 0931 	add.w	r9, r5, #49	; 0x31
  406452:	f108 0501 	add.w	r5, r8, #1
  406456:	f888 9000 	strb.w	r9, [r8]
  40645a:	e06a      	b.n	406532 <_dtoa_r+0x9ea>
  40645c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40645e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406462:	e6f7      	b.n	406254 <_dtoa_r+0x70c>
  406464:	9b08      	ldr	r3, [sp, #32]
  406466:	f109 36ff 	add.w	r6, r9, #4294967295
  40646a:	42b3      	cmp	r3, r6
  40646c:	bfbf      	itttt	lt
  40646e:	9b08      	ldrlt	r3, [sp, #32]
  406470:	9608      	strlt	r6, [sp, #32]
  406472:	1af2      	sublt	r2, r6, r3
  406474:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  406476:	bfb7      	itett	lt
  406478:	189b      	addlt	r3, r3, r2
  40647a:	1b9e      	subge	r6, r3, r6
  40647c:	930c      	strlt	r3, [sp, #48]	; 0x30
  40647e:	2600      	movlt	r6, #0
  406480:	f1b9 0f00 	cmp.w	r9, #0
  406484:	bfb9      	ittee	lt
  406486:	eba8 0509 	sublt.w	r5, r8, r9
  40648a:	2300      	movlt	r3, #0
  40648c:	4645      	movge	r5, r8
  40648e:	464b      	movge	r3, r9
  406490:	e6e2      	b.n	406258 <_dtoa_r+0x710>
  406492:	9e08      	ldr	r6, [sp, #32]
  406494:	9f09      	ldr	r7, [sp, #36]	; 0x24
  406496:	4645      	mov	r5, r8
  406498:	e6e7      	b.n	40626a <_dtoa_r+0x722>
  40649a:	9a08      	ldr	r2, [sp, #32]
  40649c:	e710      	b.n	4062c0 <_dtoa_r+0x778>
  40649e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4064a0:	2b01      	cmp	r3, #1
  4064a2:	dc18      	bgt.n	4064d6 <_dtoa_r+0x98e>
  4064a4:	9b02      	ldr	r3, [sp, #8]
  4064a6:	b9b3      	cbnz	r3, 4064d6 <_dtoa_r+0x98e>
  4064a8:	9b03      	ldr	r3, [sp, #12]
  4064aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4064ae:	b9a3      	cbnz	r3, 4064da <_dtoa_r+0x992>
  4064b0:	9b03      	ldr	r3, [sp, #12]
  4064b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  4064b6:	0d1b      	lsrs	r3, r3, #20
  4064b8:	051b      	lsls	r3, r3, #20
  4064ba:	b12b      	cbz	r3, 4064c8 <_dtoa_r+0x980>
  4064bc:	9b07      	ldr	r3, [sp, #28]
  4064be:	3301      	adds	r3, #1
  4064c0:	9307      	str	r3, [sp, #28]
  4064c2:	f108 0801 	add.w	r8, r8, #1
  4064c6:	2301      	movs	r3, #1
  4064c8:	9308      	str	r3, [sp, #32]
  4064ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4064cc:	2b00      	cmp	r3, #0
  4064ce:	f47f af11 	bne.w	4062f4 <_dtoa_r+0x7ac>
  4064d2:	2001      	movs	r0, #1
  4064d4:	e716      	b.n	406304 <_dtoa_r+0x7bc>
  4064d6:	2300      	movs	r3, #0
  4064d8:	e7f6      	b.n	4064c8 <_dtoa_r+0x980>
  4064da:	9b02      	ldr	r3, [sp, #8]
  4064dc:	e7f4      	b.n	4064c8 <_dtoa_r+0x980>
  4064de:	f43f af23 	beq.w	406328 <_dtoa_r+0x7e0>
  4064e2:	9a07      	ldr	r2, [sp, #28]
  4064e4:	331c      	adds	r3, #28
  4064e6:	441a      	add	r2, r3
  4064e8:	4498      	add	r8, r3
  4064ea:	441d      	add	r5, r3
  4064ec:	4613      	mov	r3, r2
  4064ee:	e71a      	b.n	406326 <_dtoa_r+0x7de>
  4064f0:	4603      	mov	r3, r0
  4064f2:	e7f6      	b.n	4064e2 <_dtoa_r+0x99a>
  4064f4:	40240000 	.word	0x40240000
  4064f8:	f1b9 0f00 	cmp.w	r9, #0
  4064fc:	dc33      	bgt.n	406566 <_dtoa_r+0xa1e>
  4064fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  406500:	2b02      	cmp	r3, #2
  406502:	dd30      	ble.n	406566 <_dtoa_r+0xa1e>
  406504:	f8cd 9010 	str.w	r9, [sp, #16]
  406508:	9b04      	ldr	r3, [sp, #16]
  40650a:	b963      	cbnz	r3, 406526 <_dtoa_r+0x9de>
  40650c:	4631      	mov	r1, r6
  40650e:	2205      	movs	r2, #5
  406510:	4620      	mov	r0, r4
  406512:	f000 fb80 	bl	406c16 <__multadd>
  406516:	4601      	mov	r1, r0
  406518:	4606      	mov	r6, r0
  40651a:	4650      	mov	r0, sl
  40651c:	f000 fd39 	bl	406f92 <__mcmp>
  406520:	2800      	cmp	r0, #0
  406522:	f73f ad5c 	bgt.w	405fde <_dtoa_r+0x496>
  406526:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406528:	9d06      	ldr	r5, [sp, #24]
  40652a:	ea6f 0b03 	mvn.w	fp, r3
  40652e:	2300      	movs	r3, #0
  406530:	9307      	str	r3, [sp, #28]
  406532:	4631      	mov	r1, r6
  406534:	4620      	mov	r0, r4
  406536:	f000 fb57 	bl	406be8 <_Bfree>
  40653a:	2f00      	cmp	r7, #0
  40653c:	f43f ae4b 	beq.w	4061d6 <_dtoa_r+0x68e>
  406540:	9b07      	ldr	r3, [sp, #28]
  406542:	b12b      	cbz	r3, 406550 <_dtoa_r+0xa08>
  406544:	42bb      	cmp	r3, r7
  406546:	d003      	beq.n	406550 <_dtoa_r+0xa08>
  406548:	4619      	mov	r1, r3
  40654a:	4620      	mov	r0, r4
  40654c:	f000 fb4c 	bl	406be8 <_Bfree>
  406550:	4639      	mov	r1, r7
  406552:	4620      	mov	r0, r4
  406554:	f000 fb48 	bl	406be8 <_Bfree>
  406558:	e63d      	b.n	4061d6 <_dtoa_r+0x68e>
  40655a:	2600      	movs	r6, #0
  40655c:	4637      	mov	r7, r6
  40655e:	e7e2      	b.n	406526 <_dtoa_r+0x9de>
  406560:	46bb      	mov	fp, r7
  406562:	4637      	mov	r7, r6
  406564:	e53b      	b.n	405fde <_dtoa_r+0x496>
  406566:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406568:	f8cd 9010 	str.w	r9, [sp, #16]
  40656c:	2b00      	cmp	r3, #0
  40656e:	f47f af13 	bne.w	406398 <_dtoa_r+0x850>
  406572:	9d06      	ldr	r5, [sp, #24]
  406574:	4631      	mov	r1, r6
  406576:	4650      	mov	r0, sl
  406578:	f7ff fa58 	bl	405a2c <quorem>
  40657c:	f100 0930 	add.w	r9, r0, #48	; 0x30
  406580:	f805 9b01 	strb.w	r9, [r5], #1
  406584:	9b06      	ldr	r3, [sp, #24]
  406586:	9a04      	ldr	r2, [sp, #16]
  406588:	1aeb      	subs	r3, r5, r3
  40658a:	429a      	cmp	r2, r3
  40658c:	f300 8083 	bgt.w	406696 <_dtoa_r+0xb4e>
  406590:	9b06      	ldr	r3, [sp, #24]
  406592:	2a01      	cmp	r2, #1
  406594:	bfac      	ite	ge
  406596:	189b      	addge	r3, r3, r2
  406598:	3301      	addlt	r3, #1
  40659a:	4698      	mov	r8, r3
  40659c:	2300      	movs	r3, #0
  40659e:	9307      	str	r3, [sp, #28]
  4065a0:	4651      	mov	r1, sl
  4065a2:	2201      	movs	r2, #1
  4065a4:	4620      	mov	r0, r4
  4065a6:	f000 fca3 	bl	406ef0 <__lshift>
  4065aa:	4631      	mov	r1, r6
  4065ac:	4682      	mov	sl, r0
  4065ae:	f000 fcf0 	bl	406f92 <__mcmp>
  4065b2:	2800      	cmp	r0, #0
  4065b4:	dc35      	bgt.n	406622 <_dtoa_r+0xada>
  4065b6:	d102      	bne.n	4065be <_dtoa_r+0xa76>
  4065b8:	f019 0f01 	tst.w	r9, #1
  4065bc:	d131      	bne.n	406622 <_dtoa_r+0xada>
  4065be:	4645      	mov	r5, r8
  4065c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4065c4:	2b30      	cmp	r3, #48	; 0x30
  4065c6:	f105 32ff 	add.w	r2, r5, #4294967295
  4065ca:	d1b2      	bne.n	406532 <_dtoa_r+0x9ea>
  4065cc:	4615      	mov	r5, r2
  4065ce:	e7f7      	b.n	4065c0 <_dtoa_r+0xa78>
  4065d0:	4638      	mov	r0, r7
  4065d2:	e6ff      	b.n	4063d4 <_dtoa_r+0x88c>
  4065d4:	2301      	movs	r3, #1
  4065d6:	e722      	b.n	40641e <_dtoa_r+0x8d6>
  4065d8:	9a02      	ldr	r2, [sp, #8]
  4065da:	2a00      	cmp	r2, #0
  4065dc:	db04      	blt.n	4065e8 <_dtoa_r+0xaa0>
  4065de:	d129      	bne.n	406634 <_dtoa_r+0xaec>
  4065e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4065e2:	bb3a      	cbnz	r2, 406634 <_dtoa_r+0xaec>
  4065e4:	9a08      	ldr	r2, [sp, #32]
  4065e6:	bb2a      	cbnz	r2, 406634 <_dtoa_r+0xaec>
  4065e8:	2b00      	cmp	r3, #0
  4065ea:	f77f af32 	ble.w	406452 <_dtoa_r+0x90a>
  4065ee:	4651      	mov	r1, sl
  4065f0:	2201      	movs	r2, #1
  4065f2:	4620      	mov	r0, r4
  4065f4:	f000 fc7c 	bl	406ef0 <__lshift>
  4065f8:	4631      	mov	r1, r6
  4065fa:	4682      	mov	sl, r0
  4065fc:	f000 fcc9 	bl	406f92 <__mcmp>
  406600:	2800      	cmp	r0, #0
  406602:	dc05      	bgt.n	406610 <_dtoa_r+0xac8>
  406604:	f47f af25 	bne.w	406452 <_dtoa_r+0x90a>
  406608:	f019 0f01 	tst.w	r9, #1
  40660c:	f43f af21 	beq.w	406452 <_dtoa_r+0x90a>
  406610:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  406614:	f47f af1b 	bne.w	40644e <_dtoa_r+0x906>
  406618:	2339      	movs	r3, #57	; 0x39
  40661a:	f888 3000 	strb.w	r3, [r8]
  40661e:	f108 0801 	add.w	r8, r8, #1
  406622:	4645      	mov	r5, r8
  406624:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406628:	2b39      	cmp	r3, #57	; 0x39
  40662a:	f105 32ff 	add.w	r2, r5, #4294967295
  40662e:	d03a      	beq.n	4066a6 <_dtoa_r+0xb5e>
  406630:	3301      	adds	r3, #1
  406632:	e03f      	b.n	4066b4 <_dtoa_r+0xb6c>
  406634:	2b00      	cmp	r3, #0
  406636:	f108 0501 	add.w	r5, r8, #1
  40663a:	dd05      	ble.n	406648 <_dtoa_r+0xb00>
  40663c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  406640:	d0ea      	beq.n	406618 <_dtoa_r+0xad0>
  406642:	f109 0901 	add.w	r9, r9, #1
  406646:	e706      	b.n	406456 <_dtoa_r+0x90e>
  406648:	9b06      	ldr	r3, [sp, #24]
  40664a:	9a04      	ldr	r2, [sp, #16]
  40664c:	f805 9c01 	strb.w	r9, [r5, #-1]
  406650:	1aeb      	subs	r3, r5, r3
  406652:	4293      	cmp	r3, r2
  406654:	46a8      	mov	r8, r5
  406656:	d0a3      	beq.n	4065a0 <_dtoa_r+0xa58>
  406658:	4651      	mov	r1, sl
  40665a:	2300      	movs	r3, #0
  40665c:	220a      	movs	r2, #10
  40665e:	4620      	mov	r0, r4
  406660:	f000 fad9 	bl	406c16 <__multadd>
  406664:	9b07      	ldr	r3, [sp, #28]
  406666:	9907      	ldr	r1, [sp, #28]
  406668:	42bb      	cmp	r3, r7
  40666a:	4682      	mov	sl, r0
  40666c:	f04f 0300 	mov.w	r3, #0
  406670:	f04f 020a 	mov.w	r2, #10
  406674:	4620      	mov	r0, r4
  406676:	d104      	bne.n	406682 <_dtoa_r+0xb3a>
  406678:	f000 facd 	bl	406c16 <__multadd>
  40667c:	9007      	str	r0, [sp, #28]
  40667e:	4607      	mov	r7, r0
  406680:	e6b0      	b.n	4063e4 <_dtoa_r+0x89c>
  406682:	f000 fac8 	bl	406c16 <__multadd>
  406686:	2300      	movs	r3, #0
  406688:	9007      	str	r0, [sp, #28]
  40668a:	220a      	movs	r2, #10
  40668c:	4639      	mov	r1, r7
  40668e:	4620      	mov	r0, r4
  406690:	f000 fac1 	bl	406c16 <__multadd>
  406694:	e7f3      	b.n	40667e <_dtoa_r+0xb36>
  406696:	4651      	mov	r1, sl
  406698:	2300      	movs	r3, #0
  40669a:	220a      	movs	r2, #10
  40669c:	4620      	mov	r0, r4
  40669e:	f000 faba 	bl	406c16 <__multadd>
  4066a2:	4682      	mov	sl, r0
  4066a4:	e766      	b.n	406574 <_dtoa_r+0xa2c>
  4066a6:	9b06      	ldr	r3, [sp, #24]
  4066a8:	4293      	cmp	r3, r2
  4066aa:	d105      	bne.n	4066b8 <_dtoa_r+0xb70>
  4066ac:	9a06      	ldr	r2, [sp, #24]
  4066ae:	f10b 0b01 	add.w	fp, fp, #1
  4066b2:	2331      	movs	r3, #49	; 0x31
  4066b4:	7013      	strb	r3, [r2, #0]
  4066b6:	e73c      	b.n	406532 <_dtoa_r+0x9ea>
  4066b8:	4615      	mov	r5, r2
  4066ba:	e7b3      	b.n	406624 <_dtoa_r+0xadc>
  4066bc:	4b09      	ldr	r3, [pc, #36]	; (4066e4 <_dtoa_r+0xb9c>)
  4066be:	f7ff baa5 	b.w	405c0c <_dtoa_r+0xc4>
  4066c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4066c4:	2b00      	cmp	r3, #0
  4066c6:	f47f aa7f 	bne.w	405bc8 <_dtoa_r+0x80>
  4066ca:	4b07      	ldr	r3, [pc, #28]	; (4066e8 <_dtoa_r+0xba0>)
  4066cc:	f7ff ba9e 	b.w	405c0c <_dtoa_r+0xc4>
  4066d0:	9b04      	ldr	r3, [sp, #16]
  4066d2:	2b00      	cmp	r3, #0
  4066d4:	f73f af4d 	bgt.w	406572 <_dtoa_r+0xa2a>
  4066d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4066da:	2b02      	cmp	r3, #2
  4066dc:	f77f af49 	ble.w	406572 <_dtoa_r+0xa2a>
  4066e0:	e712      	b.n	406508 <_dtoa_r+0x9c0>
  4066e2:	bf00      	nop
  4066e4:	004080ac 	.word	0x004080ac
  4066e8:	004080d0 	.word	0x004080d0

004066ec <__sflush_r>:
  4066ec:	898a      	ldrh	r2, [r1, #12]
  4066ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4066f2:	4605      	mov	r5, r0
  4066f4:	0710      	lsls	r0, r2, #28
  4066f6:	460c      	mov	r4, r1
  4066f8:	d45a      	bmi.n	4067b0 <__sflush_r+0xc4>
  4066fa:	684b      	ldr	r3, [r1, #4]
  4066fc:	2b00      	cmp	r3, #0
  4066fe:	dc05      	bgt.n	40670c <__sflush_r+0x20>
  406700:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  406702:	2b00      	cmp	r3, #0
  406704:	dc02      	bgt.n	40670c <__sflush_r+0x20>
  406706:	2000      	movs	r0, #0
  406708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40670c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40670e:	2e00      	cmp	r6, #0
  406710:	d0f9      	beq.n	406706 <__sflush_r+0x1a>
  406712:	2300      	movs	r3, #0
  406714:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  406718:	682f      	ldr	r7, [r5, #0]
  40671a:	602b      	str	r3, [r5, #0]
  40671c:	d033      	beq.n	406786 <__sflush_r+0x9a>
  40671e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  406720:	89a3      	ldrh	r3, [r4, #12]
  406722:	075a      	lsls	r2, r3, #29
  406724:	d505      	bpl.n	406732 <__sflush_r+0x46>
  406726:	6863      	ldr	r3, [r4, #4]
  406728:	1ac0      	subs	r0, r0, r3
  40672a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40672c:	b10b      	cbz	r3, 406732 <__sflush_r+0x46>
  40672e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  406730:	1ac0      	subs	r0, r0, r3
  406732:	2300      	movs	r3, #0
  406734:	4602      	mov	r2, r0
  406736:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  406738:	6a21      	ldr	r1, [r4, #32]
  40673a:	4628      	mov	r0, r5
  40673c:	47b0      	blx	r6
  40673e:	1c43      	adds	r3, r0, #1
  406740:	89a3      	ldrh	r3, [r4, #12]
  406742:	d106      	bne.n	406752 <__sflush_r+0x66>
  406744:	6829      	ldr	r1, [r5, #0]
  406746:	291d      	cmp	r1, #29
  406748:	d84b      	bhi.n	4067e2 <__sflush_r+0xf6>
  40674a:	4a2b      	ldr	r2, [pc, #172]	; (4067f8 <__sflush_r+0x10c>)
  40674c:	40ca      	lsrs	r2, r1
  40674e:	07d6      	lsls	r6, r2, #31
  406750:	d547      	bpl.n	4067e2 <__sflush_r+0xf6>
  406752:	2200      	movs	r2, #0
  406754:	6062      	str	r2, [r4, #4]
  406756:	04d9      	lsls	r1, r3, #19
  406758:	6922      	ldr	r2, [r4, #16]
  40675a:	6022      	str	r2, [r4, #0]
  40675c:	d504      	bpl.n	406768 <__sflush_r+0x7c>
  40675e:	1c42      	adds	r2, r0, #1
  406760:	d101      	bne.n	406766 <__sflush_r+0x7a>
  406762:	682b      	ldr	r3, [r5, #0]
  406764:	b903      	cbnz	r3, 406768 <__sflush_r+0x7c>
  406766:	6560      	str	r0, [r4, #84]	; 0x54
  406768:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40676a:	602f      	str	r7, [r5, #0]
  40676c:	2900      	cmp	r1, #0
  40676e:	d0ca      	beq.n	406706 <__sflush_r+0x1a>
  406770:	f104 0344 	add.w	r3, r4, #68	; 0x44
  406774:	4299      	cmp	r1, r3
  406776:	d002      	beq.n	40677e <__sflush_r+0x92>
  406778:	4628      	mov	r0, r5
  40677a:	f000 fcdf 	bl	40713c <_free_r>
  40677e:	2000      	movs	r0, #0
  406780:	6360      	str	r0, [r4, #52]	; 0x34
  406782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406786:	6a21      	ldr	r1, [r4, #32]
  406788:	2301      	movs	r3, #1
  40678a:	4628      	mov	r0, r5
  40678c:	47b0      	blx	r6
  40678e:	1c41      	adds	r1, r0, #1
  406790:	d1c6      	bne.n	406720 <__sflush_r+0x34>
  406792:	682b      	ldr	r3, [r5, #0]
  406794:	2b00      	cmp	r3, #0
  406796:	d0c3      	beq.n	406720 <__sflush_r+0x34>
  406798:	2b1d      	cmp	r3, #29
  40679a:	d001      	beq.n	4067a0 <__sflush_r+0xb4>
  40679c:	2b16      	cmp	r3, #22
  40679e:	d101      	bne.n	4067a4 <__sflush_r+0xb8>
  4067a0:	602f      	str	r7, [r5, #0]
  4067a2:	e7b0      	b.n	406706 <__sflush_r+0x1a>
  4067a4:	89a3      	ldrh	r3, [r4, #12]
  4067a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4067aa:	81a3      	strh	r3, [r4, #12]
  4067ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4067b0:	690f      	ldr	r7, [r1, #16]
  4067b2:	2f00      	cmp	r7, #0
  4067b4:	d0a7      	beq.n	406706 <__sflush_r+0x1a>
  4067b6:	0793      	lsls	r3, r2, #30
  4067b8:	680e      	ldr	r6, [r1, #0]
  4067ba:	bf08      	it	eq
  4067bc:	694b      	ldreq	r3, [r1, #20]
  4067be:	600f      	str	r7, [r1, #0]
  4067c0:	bf18      	it	ne
  4067c2:	2300      	movne	r3, #0
  4067c4:	eba6 0807 	sub.w	r8, r6, r7
  4067c8:	608b      	str	r3, [r1, #8]
  4067ca:	f1b8 0f00 	cmp.w	r8, #0
  4067ce:	dd9a      	ble.n	406706 <__sflush_r+0x1a>
  4067d0:	4643      	mov	r3, r8
  4067d2:	463a      	mov	r2, r7
  4067d4:	6a21      	ldr	r1, [r4, #32]
  4067d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4067d8:	4628      	mov	r0, r5
  4067da:	47b0      	blx	r6
  4067dc:	2800      	cmp	r0, #0
  4067de:	dc07      	bgt.n	4067f0 <__sflush_r+0x104>
  4067e0:	89a3      	ldrh	r3, [r4, #12]
  4067e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4067e6:	81a3      	strh	r3, [r4, #12]
  4067e8:	f04f 30ff 	mov.w	r0, #4294967295
  4067ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4067f0:	4407      	add	r7, r0
  4067f2:	eba8 0800 	sub.w	r8, r8, r0
  4067f6:	e7e8      	b.n	4067ca <__sflush_r+0xde>
  4067f8:	20400001 	.word	0x20400001

004067fc <_fflush_r>:
  4067fc:	b538      	push	{r3, r4, r5, lr}
  4067fe:	690b      	ldr	r3, [r1, #16]
  406800:	4605      	mov	r5, r0
  406802:	460c      	mov	r4, r1
  406804:	b1db      	cbz	r3, 40683e <_fflush_r+0x42>
  406806:	b118      	cbz	r0, 406810 <_fflush_r+0x14>
  406808:	6983      	ldr	r3, [r0, #24]
  40680a:	b90b      	cbnz	r3, 406810 <_fflush_r+0x14>
  40680c:	f000 f860 	bl	4068d0 <__sinit>
  406810:	4b0c      	ldr	r3, [pc, #48]	; (406844 <_fflush_r+0x48>)
  406812:	429c      	cmp	r4, r3
  406814:	d109      	bne.n	40682a <_fflush_r+0x2e>
  406816:	686c      	ldr	r4, [r5, #4]
  406818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40681c:	b17b      	cbz	r3, 40683e <_fflush_r+0x42>
  40681e:	4621      	mov	r1, r4
  406820:	4628      	mov	r0, r5
  406822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406826:	f7ff bf61 	b.w	4066ec <__sflush_r>
  40682a:	4b07      	ldr	r3, [pc, #28]	; (406848 <_fflush_r+0x4c>)
  40682c:	429c      	cmp	r4, r3
  40682e:	d101      	bne.n	406834 <_fflush_r+0x38>
  406830:	68ac      	ldr	r4, [r5, #8]
  406832:	e7f1      	b.n	406818 <_fflush_r+0x1c>
  406834:	4b05      	ldr	r3, [pc, #20]	; (40684c <_fflush_r+0x50>)
  406836:	429c      	cmp	r4, r3
  406838:	bf08      	it	eq
  40683a:	68ec      	ldreq	r4, [r5, #12]
  40683c:	e7ec      	b.n	406818 <_fflush_r+0x1c>
  40683e:	2000      	movs	r0, #0
  406840:	bd38      	pop	{r3, r4, r5, pc}
  406842:	bf00      	nop
  406844:	00408100 	.word	0x00408100
  406848:	00408120 	.word	0x00408120
  40684c:	004080e0 	.word	0x004080e0

00406850 <_cleanup_r>:
  406850:	4901      	ldr	r1, [pc, #4]	; (406858 <_cleanup_r+0x8>)
  406852:	f000 b8a9 	b.w	4069a8 <_fwalk_reent>
  406856:	bf00      	nop
  406858:	004067fd 	.word	0x004067fd

0040685c <std.isra.0>:
  40685c:	2300      	movs	r3, #0
  40685e:	b510      	push	{r4, lr}
  406860:	4604      	mov	r4, r0
  406862:	6003      	str	r3, [r0, #0]
  406864:	6043      	str	r3, [r0, #4]
  406866:	6083      	str	r3, [r0, #8]
  406868:	8181      	strh	r1, [r0, #12]
  40686a:	6643      	str	r3, [r0, #100]	; 0x64
  40686c:	81c2      	strh	r2, [r0, #14]
  40686e:	6103      	str	r3, [r0, #16]
  406870:	6143      	str	r3, [r0, #20]
  406872:	6183      	str	r3, [r0, #24]
  406874:	4619      	mov	r1, r3
  406876:	2208      	movs	r2, #8
  406878:	305c      	adds	r0, #92	; 0x5c
  40687a:	f7fe fb9a 	bl	404fb2 <memset>
  40687e:	4b05      	ldr	r3, [pc, #20]	; (406894 <std.isra.0+0x38>)
  406880:	6263      	str	r3, [r4, #36]	; 0x24
  406882:	4b05      	ldr	r3, [pc, #20]	; (406898 <std.isra.0+0x3c>)
  406884:	62a3      	str	r3, [r4, #40]	; 0x28
  406886:	4b05      	ldr	r3, [pc, #20]	; (40689c <std.isra.0+0x40>)
  406888:	62e3      	str	r3, [r4, #44]	; 0x2c
  40688a:	4b05      	ldr	r3, [pc, #20]	; (4068a0 <std.isra.0+0x44>)
  40688c:	6224      	str	r4, [r4, #32]
  40688e:	6323      	str	r3, [r4, #48]	; 0x30
  406890:	bd10      	pop	{r4, pc}
  406892:	bf00      	nop
  406894:	00407531 	.word	0x00407531
  406898:	00407553 	.word	0x00407553
  40689c:	0040758b 	.word	0x0040758b
  4068a0:	004075af 	.word	0x004075af

004068a4 <__sfmoreglue>:
  4068a4:	b570      	push	{r4, r5, r6, lr}
  4068a6:	1e4a      	subs	r2, r1, #1
  4068a8:	2568      	movs	r5, #104	; 0x68
  4068aa:	4355      	muls	r5, r2
  4068ac:	460e      	mov	r6, r1
  4068ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4068b2:	f000 fc91 	bl	4071d8 <_malloc_r>
  4068b6:	4604      	mov	r4, r0
  4068b8:	b140      	cbz	r0, 4068cc <__sfmoreglue+0x28>
  4068ba:	2100      	movs	r1, #0
  4068bc:	e880 0042 	stmia.w	r0, {r1, r6}
  4068c0:	300c      	adds	r0, #12
  4068c2:	60a0      	str	r0, [r4, #8]
  4068c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4068c8:	f7fe fb73 	bl	404fb2 <memset>
  4068cc:	4620      	mov	r0, r4
  4068ce:	bd70      	pop	{r4, r5, r6, pc}

004068d0 <__sinit>:
  4068d0:	6983      	ldr	r3, [r0, #24]
  4068d2:	b510      	push	{r4, lr}
  4068d4:	4604      	mov	r4, r0
  4068d6:	bb33      	cbnz	r3, 406926 <__sinit+0x56>
  4068d8:	6483      	str	r3, [r0, #72]	; 0x48
  4068da:	64c3      	str	r3, [r0, #76]	; 0x4c
  4068dc:	6503      	str	r3, [r0, #80]	; 0x50
  4068de:	4b12      	ldr	r3, [pc, #72]	; (406928 <__sinit+0x58>)
  4068e0:	4a12      	ldr	r2, [pc, #72]	; (40692c <__sinit+0x5c>)
  4068e2:	681b      	ldr	r3, [r3, #0]
  4068e4:	6282      	str	r2, [r0, #40]	; 0x28
  4068e6:	4298      	cmp	r0, r3
  4068e8:	bf04      	itt	eq
  4068ea:	2301      	moveq	r3, #1
  4068ec:	6183      	streq	r3, [r0, #24]
  4068ee:	f000 f81f 	bl	406930 <__sfp>
  4068f2:	6060      	str	r0, [r4, #4]
  4068f4:	4620      	mov	r0, r4
  4068f6:	f000 f81b 	bl	406930 <__sfp>
  4068fa:	60a0      	str	r0, [r4, #8]
  4068fc:	4620      	mov	r0, r4
  4068fe:	f000 f817 	bl	406930 <__sfp>
  406902:	2200      	movs	r2, #0
  406904:	60e0      	str	r0, [r4, #12]
  406906:	2104      	movs	r1, #4
  406908:	6860      	ldr	r0, [r4, #4]
  40690a:	f7ff ffa7 	bl	40685c <std.isra.0>
  40690e:	2201      	movs	r2, #1
  406910:	2109      	movs	r1, #9
  406912:	68a0      	ldr	r0, [r4, #8]
  406914:	f7ff ffa2 	bl	40685c <std.isra.0>
  406918:	2202      	movs	r2, #2
  40691a:	2112      	movs	r1, #18
  40691c:	68e0      	ldr	r0, [r4, #12]
  40691e:	f7ff ff9d 	bl	40685c <std.isra.0>
  406922:	2301      	movs	r3, #1
  406924:	61a3      	str	r3, [r4, #24]
  406926:	bd10      	pop	{r4, pc}
  406928:	00408098 	.word	0x00408098
  40692c:	00406851 	.word	0x00406851

00406930 <__sfp>:
  406930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406932:	4b1c      	ldr	r3, [pc, #112]	; (4069a4 <__sfp+0x74>)
  406934:	681e      	ldr	r6, [r3, #0]
  406936:	69b3      	ldr	r3, [r6, #24]
  406938:	4607      	mov	r7, r0
  40693a:	b913      	cbnz	r3, 406942 <__sfp+0x12>
  40693c:	4630      	mov	r0, r6
  40693e:	f7ff ffc7 	bl	4068d0 <__sinit>
  406942:	3648      	adds	r6, #72	; 0x48
  406944:	68b4      	ldr	r4, [r6, #8]
  406946:	6873      	ldr	r3, [r6, #4]
  406948:	3b01      	subs	r3, #1
  40694a:	d503      	bpl.n	406954 <__sfp+0x24>
  40694c:	6833      	ldr	r3, [r6, #0]
  40694e:	b133      	cbz	r3, 40695e <__sfp+0x2e>
  406950:	6836      	ldr	r6, [r6, #0]
  406952:	e7f7      	b.n	406944 <__sfp+0x14>
  406954:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  406958:	b16d      	cbz	r5, 406976 <__sfp+0x46>
  40695a:	3468      	adds	r4, #104	; 0x68
  40695c:	e7f4      	b.n	406948 <__sfp+0x18>
  40695e:	2104      	movs	r1, #4
  406960:	4638      	mov	r0, r7
  406962:	f7ff ff9f 	bl	4068a4 <__sfmoreglue>
  406966:	6030      	str	r0, [r6, #0]
  406968:	2800      	cmp	r0, #0
  40696a:	d1f1      	bne.n	406950 <__sfp+0x20>
  40696c:	230c      	movs	r3, #12
  40696e:	603b      	str	r3, [r7, #0]
  406970:	4604      	mov	r4, r0
  406972:	4620      	mov	r0, r4
  406974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406976:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40697a:	81e3      	strh	r3, [r4, #14]
  40697c:	2301      	movs	r3, #1
  40697e:	81a3      	strh	r3, [r4, #12]
  406980:	6665      	str	r5, [r4, #100]	; 0x64
  406982:	6025      	str	r5, [r4, #0]
  406984:	60a5      	str	r5, [r4, #8]
  406986:	6065      	str	r5, [r4, #4]
  406988:	6125      	str	r5, [r4, #16]
  40698a:	6165      	str	r5, [r4, #20]
  40698c:	61a5      	str	r5, [r4, #24]
  40698e:	2208      	movs	r2, #8
  406990:	4629      	mov	r1, r5
  406992:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  406996:	f7fe fb0c 	bl	404fb2 <memset>
  40699a:	6365      	str	r5, [r4, #52]	; 0x34
  40699c:	63a5      	str	r5, [r4, #56]	; 0x38
  40699e:	64a5      	str	r5, [r4, #72]	; 0x48
  4069a0:	64e5      	str	r5, [r4, #76]	; 0x4c
  4069a2:	e7e6      	b.n	406972 <__sfp+0x42>
  4069a4:	00408098 	.word	0x00408098

004069a8 <_fwalk_reent>:
  4069a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4069ac:	4680      	mov	r8, r0
  4069ae:	4689      	mov	r9, r1
  4069b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
  4069b4:	2600      	movs	r6, #0
  4069b6:	b914      	cbnz	r4, 4069be <_fwalk_reent+0x16>
  4069b8:	4630      	mov	r0, r6
  4069ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4069be:	68a5      	ldr	r5, [r4, #8]
  4069c0:	6867      	ldr	r7, [r4, #4]
  4069c2:	3f01      	subs	r7, #1
  4069c4:	d501      	bpl.n	4069ca <_fwalk_reent+0x22>
  4069c6:	6824      	ldr	r4, [r4, #0]
  4069c8:	e7f5      	b.n	4069b6 <_fwalk_reent+0xe>
  4069ca:	89ab      	ldrh	r3, [r5, #12]
  4069cc:	2b01      	cmp	r3, #1
  4069ce:	d907      	bls.n	4069e0 <_fwalk_reent+0x38>
  4069d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4069d4:	3301      	adds	r3, #1
  4069d6:	d003      	beq.n	4069e0 <_fwalk_reent+0x38>
  4069d8:	4629      	mov	r1, r5
  4069da:	4640      	mov	r0, r8
  4069dc:	47c8      	blx	r9
  4069de:	4306      	orrs	r6, r0
  4069e0:	3568      	adds	r5, #104	; 0x68
  4069e2:	e7ee      	b.n	4069c2 <_fwalk_reent+0x1a>

004069e4 <_localeconv_r>:
  4069e4:	4b04      	ldr	r3, [pc, #16]	; (4069f8 <_localeconv_r+0x14>)
  4069e6:	681b      	ldr	r3, [r3, #0]
  4069e8:	6a18      	ldr	r0, [r3, #32]
  4069ea:	4b04      	ldr	r3, [pc, #16]	; (4069fc <_localeconv_r+0x18>)
  4069ec:	2800      	cmp	r0, #0
  4069ee:	bf08      	it	eq
  4069f0:	4618      	moveq	r0, r3
  4069f2:	30f0      	adds	r0, #240	; 0xf0
  4069f4:	4770      	bx	lr
  4069f6:	bf00      	nop
  4069f8:	20400048 	.word	0x20400048
  4069fc:	204000ac 	.word	0x204000ac

00406a00 <__swhatbuf_r>:
  406a00:	b570      	push	{r4, r5, r6, lr}
  406a02:	460e      	mov	r6, r1
  406a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406a08:	2900      	cmp	r1, #0
  406a0a:	b090      	sub	sp, #64	; 0x40
  406a0c:	4614      	mov	r4, r2
  406a0e:	461d      	mov	r5, r3
  406a10:	da07      	bge.n	406a22 <__swhatbuf_r+0x22>
  406a12:	2300      	movs	r3, #0
  406a14:	602b      	str	r3, [r5, #0]
  406a16:	89b3      	ldrh	r3, [r6, #12]
  406a18:	061a      	lsls	r2, r3, #24
  406a1a:	d410      	bmi.n	406a3e <__swhatbuf_r+0x3e>
  406a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406a20:	e00e      	b.n	406a40 <__swhatbuf_r+0x40>
  406a22:	aa01      	add	r2, sp, #4
  406a24:	f000 feaa 	bl	40777c <_fstat_r>
  406a28:	2800      	cmp	r0, #0
  406a2a:	dbf2      	blt.n	406a12 <__swhatbuf_r+0x12>
  406a2c:	9a02      	ldr	r2, [sp, #8]
  406a2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  406a32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  406a36:	425a      	negs	r2, r3
  406a38:	415a      	adcs	r2, r3
  406a3a:	602a      	str	r2, [r5, #0]
  406a3c:	e7ee      	b.n	406a1c <__swhatbuf_r+0x1c>
  406a3e:	2340      	movs	r3, #64	; 0x40
  406a40:	2000      	movs	r0, #0
  406a42:	6023      	str	r3, [r4, #0]
  406a44:	b010      	add	sp, #64	; 0x40
  406a46:	bd70      	pop	{r4, r5, r6, pc}

00406a48 <__smakebuf_r>:
  406a48:	898b      	ldrh	r3, [r1, #12]
  406a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  406a4c:	079d      	lsls	r5, r3, #30
  406a4e:	4606      	mov	r6, r0
  406a50:	460c      	mov	r4, r1
  406a52:	d507      	bpl.n	406a64 <__smakebuf_r+0x1c>
  406a54:	f104 0347 	add.w	r3, r4, #71	; 0x47
  406a58:	6023      	str	r3, [r4, #0]
  406a5a:	6123      	str	r3, [r4, #16]
  406a5c:	2301      	movs	r3, #1
  406a5e:	6163      	str	r3, [r4, #20]
  406a60:	b002      	add	sp, #8
  406a62:	bd70      	pop	{r4, r5, r6, pc}
  406a64:	ab01      	add	r3, sp, #4
  406a66:	466a      	mov	r2, sp
  406a68:	f7ff ffca 	bl	406a00 <__swhatbuf_r>
  406a6c:	9900      	ldr	r1, [sp, #0]
  406a6e:	4605      	mov	r5, r0
  406a70:	4630      	mov	r0, r6
  406a72:	f000 fbb1 	bl	4071d8 <_malloc_r>
  406a76:	b948      	cbnz	r0, 406a8c <__smakebuf_r+0x44>
  406a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406a7c:	059a      	lsls	r2, r3, #22
  406a7e:	d4ef      	bmi.n	406a60 <__smakebuf_r+0x18>
  406a80:	f023 0303 	bic.w	r3, r3, #3
  406a84:	f043 0302 	orr.w	r3, r3, #2
  406a88:	81a3      	strh	r3, [r4, #12]
  406a8a:	e7e3      	b.n	406a54 <__smakebuf_r+0xc>
  406a8c:	4b0d      	ldr	r3, [pc, #52]	; (406ac4 <__smakebuf_r+0x7c>)
  406a8e:	62b3      	str	r3, [r6, #40]	; 0x28
  406a90:	89a3      	ldrh	r3, [r4, #12]
  406a92:	6020      	str	r0, [r4, #0]
  406a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406a98:	81a3      	strh	r3, [r4, #12]
  406a9a:	9b00      	ldr	r3, [sp, #0]
  406a9c:	6163      	str	r3, [r4, #20]
  406a9e:	9b01      	ldr	r3, [sp, #4]
  406aa0:	6120      	str	r0, [r4, #16]
  406aa2:	b15b      	cbz	r3, 406abc <__smakebuf_r+0x74>
  406aa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406aa8:	4630      	mov	r0, r6
  406aaa:	f000 fe79 	bl	4077a0 <_isatty_r>
  406aae:	b128      	cbz	r0, 406abc <__smakebuf_r+0x74>
  406ab0:	89a3      	ldrh	r3, [r4, #12]
  406ab2:	f023 0303 	bic.w	r3, r3, #3
  406ab6:	f043 0301 	orr.w	r3, r3, #1
  406aba:	81a3      	strh	r3, [r4, #12]
  406abc:	89a3      	ldrh	r3, [r4, #12]
  406abe:	431d      	orrs	r5, r3
  406ac0:	81a5      	strh	r5, [r4, #12]
  406ac2:	e7cd      	b.n	406a60 <__smakebuf_r+0x18>
  406ac4:	00406851 	.word	0x00406851

00406ac8 <malloc>:
  406ac8:	4b02      	ldr	r3, [pc, #8]	; (406ad4 <malloc+0xc>)
  406aca:	4601      	mov	r1, r0
  406acc:	6818      	ldr	r0, [r3, #0]
  406ace:	f000 bb83 	b.w	4071d8 <_malloc_r>
  406ad2:	bf00      	nop
  406ad4:	20400048 	.word	0x20400048
	...

00406ae0 <memchr>:
  406ae0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406ae4:	2a10      	cmp	r2, #16
  406ae6:	db2b      	blt.n	406b40 <memchr+0x60>
  406ae8:	f010 0f07 	tst.w	r0, #7
  406aec:	d008      	beq.n	406b00 <memchr+0x20>
  406aee:	f810 3b01 	ldrb.w	r3, [r0], #1
  406af2:	3a01      	subs	r2, #1
  406af4:	428b      	cmp	r3, r1
  406af6:	d02d      	beq.n	406b54 <memchr+0x74>
  406af8:	f010 0f07 	tst.w	r0, #7
  406afc:	b342      	cbz	r2, 406b50 <memchr+0x70>
  406afe:	d1f6      	bne.n	406aee <memchr+0xe>
  406b00:	b4f0      	push	{r4, r5, r6, r7}
  406b02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406b06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406b0a:	f022 0407 	bic.w	r4, r2, #7
  406b0e:	f07f 0700 	mvns.w	r7, #0
  406b12:	2300      	movs	r3, #0
  406b14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406b18:	3c08      	subs	r4, #8
  406b1a:	ea85 0501 	eor.w	r5, r5, r1
  406b1e:	ea86 0601 	eor.w	r6, r6, r1
  406b22:	fa85 f547 	uadd8	r5, r5, r7
  406b26:	faa3 f587 	sel	r5, r3, r7
  406b2a:	fa86 f647 	uadd8	r6, r6, r7
  406b2e:	faa5 f687 	sel	r6, r5, r7
  406b32:	b98e      	cbnz	r6, 406b58 <memchr+0x78>
  406b34:	d1ee      	bne.n	406b14 <memchr+0x34>
  406b36:	bcf0      	pop	{r4, r5, r6, r7}
  406b38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406b3c:	f002 0207 	and.w	r2, r2, #7
  406b40:	b132      	cbz	r2, 406b50 <memchr+0x70>
  406b42:	f810 3b01 	ldrb.w	r3, [r0], #1
  406b46:	3a01      	subs	r2, #1
  406b48:	ea83 0301 	eor.w	r3, r3, r1
  406b4c:	b113      	cbz	r3, 406b54 <memchr+0x74>
  406b4e:	d1f8      	bne.n	406b42 <memchr+0x62>
  406b50:	2000      	movs	r0, #0
  406b52:	4770      	bx	lr
  406b54:	3801      	subs	r0, #1
  406b56:	4770      	bx	lr
  406b58:	2d00      	cmp	r5, #0
  406b5a:	bf06      	itte	eq
  406b5c:	4635      	moveq	r5, r6
  406b5e:	3803      	subeq	r0, #3
  406b60:	3807      	subne	r0, #7
  406b62:	f015 0f01 	tst.w	r5, #1
  406b66:	d107      	bne.n	406b78 <memchr+0x98>
  406b68:	3001      	adds	r0, #1
  406b6a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406b6e:	bf02      	ittt	eq
  406b70:	3001      	addeq	r0, #1
  406b72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406b76:	3001      	addeq	r0, #1
  406b78:	bcf0      	pop	{r4, r5, r6, r7}
  406b7a:	3801      	subs	r0, #1
  406b7c:	4770      	bx	lr
  406b7e:	bf00      	nop

00406b80 <_Balloc>:
  406b80:	b570      	push	{r4, r5, r6, lr}
  406b82:	6a45      	ldr	r5, [r0, #36]	; 0x24
  406b84:	4604      	mov	r4, r0
  406b86:	460e      	mov	r6, r1
  406b88:	b93d      	cbnz	r5, 406b9a <_Balloc+0x1a>
  406b8a:	2010      	movs	r0, #16
  406b8c:	f7ff ff9c 	bl	406ac8 <malloc>
  406b90:	6260      	str	r0, [r4, #36]	; 0x24
  406b92:	6045      	str	r5, [r0, #4]
  406b94:	6085      	str	r5, [r0, #8]
  406b96:	6005      	str	r5, [r0, #0]
  406b98:	60c5      	str	r5, [r0, #12]
  406b9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  406b9c:	68eb      	ldr	r3, [r5, #12]
  406b9e:	b183      	cbz	r3, 406bc2 <_Balloc+0x42>
  406ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  406ba2:	68db      	ldr	r3, [r3, #12]
  406ba4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  406ba8:	b9b8      	cbnz	r0, 406bda <_Balloc+0x5a>
  406baa:	2101      	movs	r1, #1
  406bac:	fa01 f506 	lsl.w	r5, r1, r6
  406bb0:	1d6a      	adds	r2, r5, #5
  406bb2:	0092      	lsls	r2, r2, #2
  406bb4:	4620      	mov	r0, r4
  406bb6:	f000 fab3 	bl	407120 <_calloc_r>
  406bba:	b160      	cbz	r0, 406bd6 <_Balloc+0x56>
  406bbc:	6046      	str	r6, [r0, #4]
  406bbe:	6085      	str	r5, [r0, #8]
  406bc0:	e00e      	b.n	406be0 <_Balloc+0x60>
  406bc2:	2221      	movs	r2, #33	; 0x21
  406bc4:	2104      	movs	r1, #4
  406bc6:	4620      	mov	r0, r4
  406bc8:	f000 faaa 	bl	407120 <_calloc_r>
  406bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  406bce:	60e8      	str	r0, [r5, #12]
  406bd0:	68db      	ldr	r3, [r3, #12]
  406bd2:	2b00      	cmp	r3, #0
  406bd4:	d1e4      	bne.n	406ba0 <_Balloc+0x20>
  406bd6:	2000      	movs	r0, #0
  406bd8:	bd70      	pop	{r4, r5, r6, pc}
  406bda:	6802      	ldr	r2, [r0, #0]
  406bdc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  406be0:	2300      	movs	r3, #0
  406be2:	6103      	str	r3, [r0, #16]
  406be4:	60c3      	str	r3, [r0, #12]
  406be6:	bd70      	pop	{r4, r5, r6, pc}

00406be8 <_Bfree>:
  406be8:	b570      	push	{r4, r5, r6, lr}
  406bea:	6a44      	ldr	r4, [r0, #36]	; 0x24
  406bec:	4606      	mov	r6, r0
  406bee:	460d      	mov	r5, r1
  406bf0:	b93c      	cbnz	r4, 406c02 <_Bfree+0x1a>
  406bf2:	2010      	movs	r0, #16
  406bf4:	f7ff ff68 	bl	406ac8 <malloc>
  406bf8:	6270      	str	r0, [r6, #36]	; 0x24
  406bfa:	6044      	str	r4, [r0, #4]
  406bfc:	6084      	str	r4, [r0, #8]
  406bfe:	6004      	str	r4, [r0, #0]
  406c00:	60c4      	str	r4, [r0, #12]
  406c02:	b13d      	cbz	r5, 406c14 <_Bfree+0x2c>
  406c04:	6a73      	ldr	r3, [r6, #36]	; 0x24
  406c06:	686a      	ldr	r2, [r5, #4]
  406c08:	68db      	ldr	r3, [r3, #12]
  406c0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406c0e:	6029      	str	r1, [r5, #0]
  406c10:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406c14:	bd70      	pop	{r4, r5, r6, pc}

00406c16 <__multadd>:
  406c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c1a:	690d      	ldr	r5, [r1, #16]
  406c1c:	461f      	mov	r7, r3
  406c1e:	4606      	mov	r6, r0
  406c20:	460c      	mov	r4, r1
  406c22:	f101 0e14 	add.w	lr, r1, #20
  406c26:	2300      	movs	r3, #0
  406c28:	f8de 0000 	ldr.w	r0, [lr]
  406c2c:	b281      	uxth	r1, r0
  406c2e:	fb02 7101 	mla	r1, r2, r1, r7
  406c32:	0c0f      	lsrs	r7, r1, #16
  406c34:	0c00      	lsrs	r0, r0, #16
  406c36:	fb02 7000 	mla	r0, r2, r0, r7
  406c3a:	b289      	uxth	r1, r1
  406c3c:	3301      	adds	r3, #1
  406c3e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  406c42:	429d      	cmp	r5, r3
  406c44:	ea4f 4710 	mov.w	r7, r0, lsr #16
  406c48:	f84e 1b04 	str.w	r1, [lr], #4
  406c4c:	dcec      	bgt.n	406c28 <__multadd+0x12>
  406c4e:	b1d7      	cbz	r7, 406c86 <__multadd+0x70>
  406c50:	68a3      	ldr	r3, [r4, #8]
  406c52:	429d      	cmp	r5, r3
  406c54:	db12      	blt.n	406c7c <__multadd+0x66>
  406c56:	6861      	ldr	r1, [r4, #4]
  406c58:	4630      	mov	r0, r6
  406c5a:	3101      	adds	r1, #1
  406c5c:	f7ff ff90 	bl	406b80 <_Balloc>
  406c60:	6922      	ldr	r2, [r4, #16]
  406c62:	3202      	adds	r2, #2
  406c64:	f104 010c 	add.w	r1, r4, #12
  406c68:	4680      	mov	r8, r0
  406c6a:	0092      	lsls	r2, r2, #2
  406c6c:	300c      	adds	r0, #12
  406c6e:	f7fe f995 	bl	404f9c <memcpy>
  406c72:	4621      	mov	r1, r4
  406c74:	4630      	mov	r0, r6
  406c76:	f7ff ffb7 	bl	406be8 <_Bfree>
  406c7a:	4644      	mov	r4, r8
  406c7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  406c80:	3501      	adds	r5, #1
  406c82:	615f      	str	r7, [r3, #20]
  406c84:	6125      	str	r5, [r4, #16]
  406c86:	4620      	mov	r0, r4
  406c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406c8c <__hi0bits>:
  406c8c:	0c02      	lsrs	r2, r0, #16
  406c8e:	0412      	lsls	r2, r2, #16
  406c90:	4603      	mov	r3, r0
  406c92:	b9b2      	cbnz	r2, 406cc2 <__hi0bits+0x36>
  406c94:	0403      	lsls	r3, r0, #16
  406c96:	2010      	movs	r0, #16
  406c98:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  406c9c:	bf04      	itt	eq
  406c9e:	021b      	lsleq	r3, r3, #8
  406ca0:	3008      	addeq	r0, #8
  406ca2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406ca6:	bf04      	itt	eq
  406ca8:	011b      	lsleq	r3, r3, #4
  406caa:	3004      	addeq	r0, #4
  406cac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406cb0:	bf04      	itt	eq
  406cb2:	009b      	lsleq	r3, r3, #2
  406cb4:	3002      	addeq	r0, #2
  406cb6:	2b00      	cmp	r3, #0
  406cb8:	db06      	blt.n	406cc8 <__hi0bits+0x3c>
  406cba:	005b      	lsls	r3, r3, #1
  406cbc:	d503      	bpl.n	406cc6 <__hi0bits+0x3a>
  406cbe:	3001      	adds	r0, #1
  406cc0:	4770      	bx	lr
  406cc2:	2000      	movs	r0, #0
  406cc4:	e7e8      	b.n	406c98 <__hi0bits+0xc>
  406cc6:	2020      	movs	r0, #32
  406cc8:	4770      	bx	lr

00406cca <__lo0bits>:
  406cca:	6803      	ldr	r3, [r0, #0]
  406ccc:	f013 0207 	ands.w	r2, r3, #7
  406cd0:	4601      	mov	r1, r0
  406cd2:	d00b      	beq.n	406cec <__lo0bits+0x22>
  406cd4:	07da      	lsls	r2, r3, #31
  406cd6:	d423      	bmi.n	406d20 <__lo0bits+0x56>
  406cd8:	0798      	lsls	r0, r3, #30
  406cda:	bf49      	itett	mi
  406cdc:	085b      	lsrmi	r3, r3, #1
  406cde:	089b      	lsrpl	r3, r3, #2
  406ce0:	2001      	movmi	r0, #1
  406ce2:	600b      	strmi	r3, [r1, #0]
  406ce4:	bf5c      	itt	pl
  406ce6:	600b      	strpl	r3, [r1, #0]
  406ce8:	2002      	movpl	r0, #2
  406cea:	4770      	bx	lr
  406cec:	b298      	uxth	r0, r3
  406cee:	b9a8      	cbnz	r0, 406d1c <__lo0bits+0x52>
  406cf0:	0c1b      	lsrs	r3, r3, #16
  406cf2:	2010      	movs	r0, #16
  406cf4:	f013 0fff 	tst.w	r3, #255	; 0xff
  406cf8:	bf04      	itt	eq
  406cfa:	0a1b      	lsreq	r3, r3, #8
  406cfc:	3008      	addeq	r0, #8
  406cfe:	071a      	lsls	r2, r3, #28
  406d00:	bf04      	itt	eq
  406d02:	091b      	lsreq	r3, r3, #4
  406d04:	3004      	addeq	r0, #4
  406d06:	079a      	lsls	r2, r3, #30
  406d08:	bf04      	itt	eq
  406d0a:	089b      	lsreq	r3, r3, #2
  406d0c:	3002      	addeq	r0, #2
  406d0e:	07da      	lsls	r2, r3, #31
  406d10:	d402      	bmi.n	406d18 <__lo0bits+0x4e>
  406d12:	085b      	lsrs	r3, r3, #1
  406d14:	d006      	beq.n	406d24 <__lo0bits+0x5a>
  406d16:	3001      	adds	r0, #1
  406d18:	600b      	str	r3, [r1, #0]
  406d1a:	4770      	bx	lr
  406d1c:	4610      	mov	r0, r2
  406d1e:	e7e9      	b.n	406cf4 <__lo0bits+0x2a>
  406d20:	2000      	movs	r0, #0
  406d22:	4770      	bx	lr
  406d24:	2020      	movs	r0, #32
  406d26:	4770      	bx	lr

00406d28 <__i2b>:
  406d28:	b510      	push	{r4, lr}
  406d2a:	460c      	mov	r4, r1
  406d2c:	2101      	movs	r1, #1
  406d2e:	f7ff ff27 	bl	406b80 <_Balloc>
  406d32:	2201      	movs	r2, #1
  406d34:	6144      	str	r4, [r0, #20]
  406d36:	6102      	str	r2, [r0, #16]
  406d38:	bd10      	pop	{r4, pc}

00406d3a <__multiply>:
  406d3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d3e:	4614      	mov	r4, r2
  406d40:	690a      	ldr	r2, [r1, #16]
  406d42:	6923      	ldr	r3, [r4, #16]
  406d44:	429a      	cmp	r2, r3
  406d46:	bfb8      	it	lt
  406d48:	460b      	movlt	r3, r1
  406d4a:	4689      	mov	r9, r1
  406d4c:	bfbc      	itt	lt
  406d4e:	46a1      	movlt	r9, r4
  406d50:	461c      	movlt	r4, r3
  406d52:	f8d9 7010 	ldr.w	r7, [r9, #16]
  406d56:	f8d4 a010 	ldr.w	sl, [r4, #16]
  406d5a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  406d5e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  406d62:	eb07 060a 	add.w	r6, r7, sl
  406d66:	429e      	cmp	r6, r3
  406d68:	bfc8      	it	gt
  406d6a:	3101      	addgt	r1, #1
  406d6c:	f7ff ff08 	bl	406b80 <_Balloc>
  406d70:	f100 0514 	add.w	r5, r0, #20
  406d74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  406d78:	462b      	mov	r3, r5
  406d7a:	2200      	movs	r2, #0
  406d7c:	4543      	cmp	r3, r8
  406d7e:	d316      	bcc.n	406dae <__multiply+0x74>
  406d80:	f104 0214 	add.w	r2, r4, #20
  406d84:	f109 0114 	add.w	r1, r9, #20
  406d88:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  406d8c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  406d90:	9301      	str	r3, [sp, #4]
  406d92:	9c01      	ldr	r4, [sp, #4]
  406d94:	4294      	cmp	r4, r2
  406d96:	4613      	mov	r3, r2
  406d98:	d80c      	bhi.n	406db4 <__multiply+0x7a>
  406d9a:	2e00      	cmp	r6, #0
  406d9c:	dd03      	ble.n	406da6 <__multiply+0x6c>
  406d9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  406da2:	2b00      	cmp	r3, #0
  406da4:	d054      	beq.n	406e50 <__multiply+0x116>
  406da6:	6106      	str	r6, [r0, #16]
  406da8:	b003      	add	sp, #12
  406daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dae:	f843 2b04 	str.w	r2, [r3], #4
  406db2:	e7e3      	b.n	406d7c <__multiply+0x42>
  406db4:	f8b3 a000 	ldrh.w	sl, [r3]
  406db8:	3204      	adds	r2, #4
  406dba:	f1ba 0f00 	cmp.w	sl, #0
  406dbe:	d020      	beq.n	406e02 <__multiply+0xc8>
  406dc0:	46ae      	mov	lr, r5
  406dc2:	4689      	mov	r9, r1
  406dc4:	f04f 0c00 	mov.w	ip, #0
  406dc8:	f859 4b04 	ldr.w	r4, [r9], #4
  406dcc:	f8be b000 	ldrh.w	fp, [lr]
  406dd0:	b2a3      	uxth	r3, r4
  406dd2:	fb0a b303 	mla	r3, sl, r3, fp
  406dd6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  406dda:	f8de 4000 	ldr.w	r4, [lr]
  406dde:	4463      	add	r3, ip
  406de0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  406de4:	fb0a c40b 	mla	r4, sl, fp, ip
  406de8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  406dec:	b29b      	uxth	r3, r3
  406dee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  406df2:	454f      	cmp	r7, r9
  406df4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  406df8:	f84e 3b04 	str.w	r3, [lr], #4
  406dfc:	d8e4      	bhi.n	406dc8 <__multiply+0x8e>
  406dfe:	f8ce c000 	str.w	ip, [lr]
  406e02:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  406e06:	f1b9 0f00 	cmp.w	r9, #0
  406e0a:	d01f      	beq.n	406e4c <__multiply+0x112>
  406e0c:	682b      	ldr	r3, [r5, #0]
  406e0e:	46ae      	mov	lr, r5
  406e10:	468c      	mov	ip, r1
  406e12:	f04f 0a00 	mov.w	sl, #0
  406e16:	f8bc 4000 	ldrh.w	r4, [ip]
  406e1a:	f8be b002 	ldrh.w	fp, [lr, #2]
  406e1e:	fb09 b404 	mla	r4, r9, r4, fp
  406e22:	44a2      	add	sl, r4
  406e24:	b29b      	uxth	r3, r3
  406e26:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  406e2a:	f84e 3b04 	str.w	r3, [lr], #4
  406e2e:	f85c 3b04 	ldr.w	r3, [ip], #4
  406e32:	f8be 4000 	ldrh.w	r4, [lr]
  406e36:	0c1b      	lsrs	r3, r3, #16
  406e38:	fb09 4303 	mla	r3, r9, r3, r4
  406e3c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  406e40:	4567      	cmp	r7, ip
  406e42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  406e46:	d8e6      	bhi.n	406e16 <__multiply+0xdc>
  406e48:	f8ce 3000 	str.w	r3, [lr]
  406e4c:	3504      	adds	r5, #4
  406e4e:	e7a0      	b.n	406d92 <__multiply+0x58>
  406e50:	3e01      	subs	r6, #1
  406e52:	e7a2      	b.n	406d9a <__multiply+0x60>

00406e54 <__pow5mult>:
  406e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406e58:	4615      	mov	r5, r2
  406e5a:	f012 0203 	ands.w	r2, r2, #3
  406e5e:	4606      	mov	r6, r0
  406e60:	460f      	mov	r7, r1
  406e62:	d007      	beq.n	406e74 <__pow5mult+0x20>
  406e64:	3a01      	subs	r2, #1
  406e66:	4c21      	ldr	r4, [pc, #132]	; (406eec <__pow5mult+0x98>)
  406e68:	2300      	movs	r3, #0
  406e6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  406e6e:	f7ff fed2 	bl	406c16 <__multadd>
  406e72:	4607      	mov	r7, r0
  406e74:	10ad      	asrs	r5, r5, #2
  406e76:	d035      	beq.n	406ee4 <__pow5mult+0x90>
  406e78:	6a74      	ldr	r4, [r6, #36]	; 0x24
  406e7a:	b93c      	cbnz	r4, 406e8c <__pow5mult+0x38>
  406e7c:	2010      	movs	r0, #16
  406e7e:	f7ff fe23 	bl	406ac8 <malloc>
  406e82:	6270      	str	r0, [r6, #36]	; 0x24
  406e84:	6044      	str	r4, [r0, #4]
  406e86:	6084      	str	r4, [r0, #8]
  406e88:	6004      	str	r4, [r0, #0]
  406e8a:	60c4      	str	r4, [r0, #12]
  406e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  406e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
  406e94:	b94c      	cbnz	r4, 406eaa <__pow5mult+0x56>
  406e96:	f240 2171 	movw	r1, #625	; 0x271
  406e9a:	4630      	mov	r0, r6
  406e9c:	f7ff ff44 	bl	406d28 <__i2b>
  406ea0:	2300      	movs	r3, #0
  406ea2:	f8c8 0008 	str.w	r0, [r8, #8]
  406ea6:	4604      	mov	r4, r0
  406ea8:	6003      	str	r3, [r0, #0]
  406eaa:	f04f 0800 	mov.w	r8, #0
  406eae:	07eb      	lsls	r3, r5, #31
  406eb0:	d50a      	bpl.n	406ec8 <__pow5mult+0x74>
  406eb2:	4639      	mov	r1, r7
  406eb4:	4622      	mov	r2, r4
  406eb6:	4630      	mov	r0, r6
  406eb8:	f7ff ff3f 	bl	406d3a <__multiply>
  406ebc:	4639      	mov	r1, r7
  406ebe:	4681      	mov	r9, r0
  406ec0:	4630      	mov	r0, r6
  406ec2:	f7ff fe91 	bl	406be8 <_Bfree>
  406ec6:	464f      	mov	r7, r9
  406ec8:	106d      	asrs	r5, r5, #1
  406eca:	d00b      	beq.n	406ee4 <__pow5mult+0x90>
  406ecc:	6820      	ldr	r0, [r4, #0]
  406ece:	b938      	cbnz	r0, 406ee0 <__pow5mult+0x8c>
  406ed0:	4622      	mov	r2, r4
  406ed2:	4621      	mov	r1, r4
  406ed4:	4630      	mov	r0, r6
  406ed6:	f7ff ff30 	bl	406d3a <__multiply>
  406eda:	6020      	str	r0, [r4, #0]
  406edc:	f8c0 8000 	str.w	r8, [r0]
  406ee0:	4604      	mov	r4, r0
  406ee2:	e7e4      	b.n	406eae <__pow5mult+0x5a>
  406ee4:	4638      	mov	r0, r7
  406ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406eea:	bf00      	nop
  406eec:	00408230 	.word	0x00408230

00406ef0 <__lshift>:
  406ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406ef4:	460c      	mov	r4, r1
  406ef6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  406efa:	6923      	ldr	r3, [r4, #16]
  406efc:	6849      	ldr	r1, [r1, #4]
  406efe:	eb0a 0903 	add.w	r9, sl, r3
  406f02:	68a3      	ldr	r3, [r4, #8]
  406f04:	4607      	mov	r7, r0
  406f06:	4616      	mov	r6, r2
  406f08:	f109 0501 	add.w	r5, r9, #1
  406f0c:	42ab      	cmp	r3, r5
  406f0e:	db31      	blt.n	406f74 <__lshift+0x84>
  406f10:	4638      	mov	r0, r7
  406f12:	f7ff fe35 	bl	406b80 <_Balloc>
  406f16:	2200      	movs	r2, #0
  406f18:	4680      	mov	r8, r0
  406f1a:	f100 0314 	add.w	r3, r0, #20
  406f1e:	4611      	mov	r1, r2
  406f20:	4552      	cmp	r2, sl
  406f22:	db2a      	blt.n	406f7a <__lshift+0x8a>
  406f24:	6920      	ldr	r0, [r4, #16]
  406f26:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  406f2a:	f104 0114 	add.w	r1, r4, #20
  406f2e:	f016 021f 	ands.w	r2, r6, #31
  406f32:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  406f36:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  406f3a:	d022      	beq.n	406f82 <__lshift+0x92>
  406f3c:	f1c2 0c20 	rsb	ip, r2, #32
  406f40:	2000      	movs	r0, #0
  406f42:	680e      	ldr	r6, [r1, #0]
  406f44:	4096      	lsls	r6, r2
  406f46:	4330      	orrs	r0, r6
  406f48:	f843 0b04 	str.w	r0, [r3], #4
  406f4c:	f851 0b04 	ldr.w	r0, [r1], #4
  406f50:	458e      	cmp	lr, r1
  406f52:	fa20 f00c 	lsr.w	r0, r0, ip
  406f56:	d8f4      	bhi.n	406f42 <__lshift+0x52>
  406f58:	6018      	str	r0, [r3, #0]
  406f5a:	b108      	cbz	r0, 406f60 <__lshift+0x70>
  406f5c:	f109 0502 	add.w	r5, r9, #2
  406f60:	3d01      	subs	r5, #1
  406f62:	4638      	mov	r0, r7
  406f64:	f8c8 5010 	str.w	r5, [r8, #16]
  406f68:	4621      	mov	r1, r4
  406f6a:	f7ff fe3d 	bl	406be8 <_Bfree>
  406f6e:	4640      	mov	r0, r8
  406f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f74:	3101      	adds	r1, #1
  406f76:	005b      	lsls	r3, r3, #1
  406f78:	e7c8      	b.n	406f0c <__lshift+0x1c>
  406f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406f7e:	3201      	adds	r2, #1
  406f80:	e7ce      	b.n	406f20 <__lshift+0x30>
  406f82:	3b04      	subs	r3, #4
  406f84:	f851 2b04 	ldr.w	r2, [r1], #4
  406f88:	f843 2f04 	str.w	r2, [r3, #4]!
  406f8c:	458e      	cmp	lr, r1
  406f8e:	d8f9      	bhi.n	406f84 <__lshift+0x94>
  406f90:	e7e6      	b.n	406f60 <__lshift+0x70>

00406f92 <__mcmp>:
  406f92:	6903      	ldr	r3, [r0, #16]
  406f94:	690a      	ldr	r2, [r1, #16]
  406f96:	1a9b      	subs	r3, r3, r2
  406f98:	b530      	push	{r4, r5, lr}
  406f9a:	d10c      	bne.n	406fb6 <__mcmp+0x24>
  406f9c:	0092      	lsls	r2, r2, #2
  406f9e:	3014      	adds	r0, #20
  406fa0:	3114      	adds	r1, #20
  406fa2:	1884      	adds	r4, r0, r2
  406fa4:	4411      	add	r1, r2
  406fa6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  406faa:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406fae:	4295      	cmp	r5, r2
  406fb0:	d003      	beq.n	406fba <__mcmp+0x28>
  406fb2:	d305      	bcc.n	406fc0 <__mcmp+0x2e>
  406fb4:	2301      	movs	r3, #1
  406fb6:	4618      	mov	r0, r3
  406fb8:	bd30      	pop	{r4, r5, pc}
  406fba:	42a0      	cmp	r0, r4
  406fbc:	d3f3      	bcc.n	406fa6 <__mcmp+0x14>
  406fbe:	e7fa      	b.n	406fb6 <__mcmp+0x24>
  406fc0:	f04f 33ff 	mov.w	r3, #4294967295
  406fc4:	e7f7      	b.n	406fb6 <__mcmp+0x24>

00406fc6 <__mdiff>:
  406fc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406fca:	460d      	mov	r5, r1
  406fcc:	4607      	mov	r7, r0
  406fce:	4611      	mov	r1, r2
  406fd0:	4628      	mov	r0, r5
  406fd2:	4614      	mov	r4, r2
  406fd4:	f7ff ffdd 	bl	406f92 <__mcmp>
  406fd8:	1e06      	subs	r6, r0, #0
  406fda:	d108      	bne.n	406fee <__mdiff+0x28>
  406fdc:	4631      	mov	r1, r6
  406fde:	4638      	mov	r0, r7
  406fe0:	f7ff fdce 	bl	406b80 <_Balloc>
  406fe4:	2301      	movs	r3, #1
  406fe6:	6103      	str	r3, [r0, #16]
  406fe8:	6146      	str	r6, [r0, #20]
  406fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406fee:	bfa4      	itt	ge
  406ff0:	4623      	movge	r3, r4
  406ff2:	462c      	movge	r4, r5
  406ff4:	4638      	mov	r0, r7
  406ff6:	6861      	ldr	r1, [r4, #4]
  406ff8:	bfa6      	itte	ge
  406ffa:	461d      	movge	r5, r3
  406ffc:	2600      	movge	r6, #0
  406ffe:	2601      	movlt	r6, #1
  407000:	f7ff fdbe 	bl	406b80 <_Balloc>
  407004:	692b      	ldr	r3, [r5, #16]
  407006:	60c6      	str	r6, [r0, #12]
  407008:	6926      	ldr	r6, [r4, #16]
  40700a:	f105 0914 	add.w	r9, r5, #20
  40700e:	f104 0214 	add.w	r2, r4, #20
  407012:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  407016:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40701a:	f100 0514 	add.w	r5, r0, #20
  40701e:	f04f 0c00 	mov.w	ip, #0
  407022:	f852 ab04 	ldr.w	sl, [r2], #4
  407026:	f859 4b04 	ldr.w	r4, [r9], #4
  40702a:	fa1c f18a 	uxtah	r1, ip, sl
  40702e:	b2a3      	uxth	r3, r4
  407030:	1ac9      	subs	r1, r1, r3
  407032:	0c23      	lsrs	r3, r4, #16
  407034:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  407038:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40703c:	b289      	uxth	r1, r1
  40703e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  407042:	45c8      	cmp	r8, r9
  407044:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  407048:	4696      	mov	lr, r2
  40704a:	f845 3b04 	str.w	r3, [r5], #4
  40704e:	d8e8      	bhi.n	407022 <__mdiff+0x5c>
  407050:	45be      	cmp	lr, r7
  407052:	d305      	bcc.n	407060 <__mdiff+0x9a>
  407054:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  407058:	b18b      	cbz	r3, 40707e <__mdiff+0xb8>
  40705a:	6106      	str	r6, [r0, #16]
  40705c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407060:	f85e 1b04 	ldr.w	r1, [lr], #4
  407064:	fa1c f381 	uxtah	r3, ip, r1
  407068:	141a      	asrs	r2, r3, #16
  40706a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  40706e:	b29b      	uxth	r3, r3
  407070:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407074:	ea4f 4c22 	mov.w	ip, r2, asr #16
  407078:	f845 3b04 	str.w	r3, [r5], #4
  40707c:	e7e8      	b.n	407050 <__mdiff+0x8a>
  40707e:	3e01      	subs	r6, #1
  407080:	e7e8      	b.n	407054 <__mdiff+0x8e>

00407082 <__d2b>:
  407082:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  407086:	2101      	movs	r1, #1
  407088:	461c      	mov	r4, r3
  40708a:	4690      	mov	r8, r2
  40708c:	9e08      	ldr	r6, [sp, #32]
  40708e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  407090:	f7ff fd76 	bl	406b80 <_Balloc>
  407094:	f3c4 0213 	ubfx	r2, r4, #0, #20
  407098:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40709c:	4607      	mov	r7, r0
  40709e:	bb34      	cbnz	r4, 4070ee <__d2b+0x6c>
  4070a0:	9201      	str	r2, [sp, #4]
  4070a2:	f1b8 0f00 	cmp.w	r8, #0
  4070a6:	d027      	beq.n	4070f8 <__d2b+0x76>
  4070a8:	a802      	add	r0, sp, #8
  4070aa:	f840 8d08 	str.w	r8, [r0, #-8]!
  4070ae:	f7ff fe0c 	bl	406cca <__lo0bits>
  4070b2:	9900      	ldr	r1, [sp, #0]
  4070b4:	b1f0      	cbz	r0, 4070f4 <__d2b+0x72>
  4070b6:	9a01      	ldr	r2, [sp, #4]
  4070b8:	f1c0 0320 	rsb	r3, r0, #32
  4070bc:	fa02 f303 	lsl.w	r3, r2, r3
  4070c0:	430b      	orrs	r3, r1
  4070c2:	40c2      	lsrs	r2, r0
  4070c4:	617b      	str	r3, [r7, #20]
  4070c6:	9201      	str	r2, [sp, #4]
  4070c8:	9b01      	ldr	r3, [sp, #4]
  4070ca:	61bb      	str	r3, [r7, #24]
  4070cc:	2b00      	cmp	r3, #0
  4070ce:	bf14      	ite	ne
  4070d0:	2102      	movne	r1, #2
  4070d2:	2101      	moveq	r1, #1
  4070d4:	6139      	str	r1, [r7, #16]
  4070d6:	b1c4      	cbz	r4, 40710a <__d2b+0x88>
  4070d8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  4070dc:	4404      	add	r4, r0
  4070de:	6034      	str	r4, [r6, #0]
  4070e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4070e4:	6028      	str	r0, [r5, #0]
  4070e6:	4638      	mov	r0, r7
  4070e8:	b002      	add	sp, #8
  4070ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4070ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4070f2:	e7d5      	b.n	4070a0 <__d2b+0x1e>
  4070f4:	6179      	str	r1, [r7, #20]
  4070f6:	e7e7      	b.n	4070c8 <__d2b+0x46>
  4070f8:	a801      	add	r0, sp, #4
  4070fa:	f7ff fde6 	bl	406cca <__lo0bits>
  4070fe:	9b01      	ldr	r3, [sp, #4]
  407100:	617b      	str	r3, [r7, #20]
  407102:	2101      	movs	r1, #1
  407104:	6139      	str	r1, [r7, #16]
  407106:	3020      	adds	r0, #32
  407108:	e7e5      	b.n	4070d6 <__d2b+0x54>
  40710a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40710e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407112:	6030      	str	r0, [r6, #0]
  407114:	6918      	ldr	r0, [r3, #16]
  407116:	f7ff fdb9 	bl	406c8c <__hi0bits>
  40711a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40711e:	e7e1      	b.n	4070e4 <__d2b+0x62>

00407120 <_calloc_r>:
  407120:	b538      	push	{r3, r4, r5, lr}
  407122:	fb02 f401 	mul.w	r4, r2, r1
  407126:	4621      	mov	r1, r4
  407128:	f000 f856 	bl	4071d8 <_malloc_r>
  40712c:	4605      	mov	r5, r0
  40712e:	b118      	cbz	r0, 407138 <_calloc_r+0x18>
  407130:	4622      	mov	r2, r4
  407132:	2100      	movs	r1, #0
  407134:	f7fd ff3d 	bl	404fb2 <memset>
  407138:	4628      	mov	r0, r5
  40713a:	bd38      	pop	{r3, r4, r5, pc}

0040713c <_free_r>:
  40713c:	b538      	push	{r3, r4, r5, lr}
  40713e:	4605      	mov	r5, r0
  407140:	2900      	cmp	r1, #0
  407142:	d045      	beq.n	4071d0 <_free_r+0x94>
  407144:	f851 3c04 	ldr.w	r3, [r1, #-4]
  407148:	1f0c      	subs	r4, r1, #4
  40714a:	2b00      	cmp	r3, #0
  40714c:	bfb8      	it	lt
  40714e:	18e4      	addlt	r4, r4, r3
  407150:	f000 fb5a 	bl	407808 <__malloc_lock>
  407154:	4a1f      	ldr	r2, [pc, #124]	; (4071d4 <_free_r+0x98>)
  407156:	6813      	ldr	r3, [r2, #0]
  407158:	4610      	mov	r0, r2
  40715a:	b933      	cbnz	r3, 40716a <_free_r+0x2e>
  40715c:	6063      	str	r3, [r4, #4]
  40715e:	6014      	str	r4, [r2, #0]
  407160:	4628      	mov	r0, r5
  407162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407166:	f000 bb50 	b.w	40780a <__malloc_unlock>
  40716a:	42a3      	cmp	r3, r4
  40716c:	d90c      	bls.n	407188 <_free_r+0x4c>
  40716e:	6821      	ldr	r1, [r4, #0]
  407170:	1862      	adds	r2, r4, r1
  407172:	4293      	cmp	r3, r2
  407174:	bf04      	itt	eq
  407176:	681a      	ldreq	r2, [r3, #0]
  407178:	685b      	ldreq	r3, [r3, #4]
  40717a:	6063      	str	r3, [r4, #4]
  40717c:	bf04      	itt	eq
  40717e:	1852      	addeq	r2, r2, r1
  407180:	6022      	streq	r2, [r4, #0]
  407182:	6004      	str	r4, [r0, #0]
  407184:	e7ec      	b.n	407160 <_free_r+0x24>
  407186:	4613      	mov	r3, r2
  407188:	685a      	ldr	r2, [r3, #4]
  40718a:	b10a      	cbz	r2, 407190 <_free_r+0x54>
  40718c:	42a2      	cmp	r2, r4
  40718e:	d9fa      	bls.n	407186 <_free_r+0x4a>
  407190:	6819      	ldr	r1, [r3, #0]
  407192:	1858      	adds	r0, r3, r1
  407194:	42a0      	cmp	r0, r4
  407196:	d10b      	bne.n	4071b0 <_free_r+0x74>
  407198:	6820      	ldr	r0, [r4, #0]
  40719a:	4401      	add	r1, r0
  40719c:	1858      	adds	r0, r3, r1
  40719e:	4282      	cmp	r2, r0
  4071a0:	6019      	str	r1, [r3, #0]
  4071a2:	d1dd      	bne.n	407160 <_free_r+0x24>
  4071a4:	6810      	ldr	r0, [r2, #0]
  4071a6:	6852      	ldr	r2, [r2, #4]
  4071a8:	605a      	str	r2, [r3, #4]
  4071aa:	4401      	add	r1, r0
  4071ac:	6019      	str	r1, [r3, #0]
  4071ae:	e7d7      	b.n	407160 <_free_r+0x24>
  4071b0:	d902      	bls.n	4071b8 <_free_r+0x7c>
  4071b2:	230c      	movs	r3, #12
  4071b4:	602b      	str	r3, [r5, #0]
  4071b6:	e7d3      	b.n	407160 <_free_r+0x24>
  4071b8:	6820      	ldr	r0, [r4, #0]
  4071ba:	1821      	adds	r1, r4, r0
  4071bc:	428a      	cmp	r2, r1
  4071be:	bf04      	itt	eq
  4071c0:	6811      	ldreq	r1, [r2, #0]
  4071c2:	6852      	ldreq	r2, [r2, #4]
  4071c4:	6062      	str	r2, [r4, #4]
  4071c6:	bf04      	itt	eq
  4071c8:	1809      	addeq	r1, r1, r0
  4071ca:	6021      	streq	r1, [r4, #0]
  4071cc:	605c      	str	r4, [r3, #4]
  4071ce:	e7c7      	b.n	407160 <_free_r+0x24>
  4071d0:	bd38      	pop	{r3, r4, r5, pc}
  4071d2:	bf00      	nop
  4071d4:	204004c4 	.word	0x204004c4

004071d8 <_malloc_r>:
  4071d8:	b570      	push	{r4, r5, r6, lr}
  4071da:	1ccd      	adds	r5, r1, #3
  4071dc:	f025 0503 	bic.w	r5, r5, #3
  4071e0:	3508      	adds	r5, #8
  4071e2:	2d0c      	cmp	r5, #12
  4071e4:	bf38      	it	cc
  4071e6:	250c      	movcc	r5, #12
  4071e8:	2d00      	cmp	r5, #0
  4071ea:	4606      	mov	r6, r0
  4071ec:	db01      	blt.n	4071f2 <_malloc_r+0x1a>
  4071ee:	42a9      	cmp	r1, r5
  4071f0:	d903      	bls.n	4071fa <_malloc_r+0x22>
  4071f2:	230c      	movs	r3, #12
  4071f4:	6033      	str	r3, [r6, #0]
  4071f6:	2000      	movs	r0, #0
  4071f8:	bd70      	pop	{r4, r5, r6, pc}
  4071fa:	f000 fb05 	bl	407808 <__malloc_lock>
  4071fe:	4a23      	ldr	r2, [pc, #140]	; (40728c <_malloc_r+0xb4>)
  407200:	6814      	ldr	r4, [r2, #0]
  407202:	4621      	mov	r1, r4
  407204:	b991      	cbnz	r1, 40722c <_malloc_r+0x54>
  407206:	4c22      	ldr	r4, [pc, #136]	; (407290 <_malloc_r+0xb8>)
  407208:	6823      	ldr	r3, [r4, #0]
  40720a:	b91b      	cbnz	r3, 407214 <_malloc_r+0x3c>
  40720c:	4630      	mov	r0, r6
  40720e:	f000 f97f 	bl	407510 <_sbrk_r>
  407212:	6020      	str	r0, [r4, #0]
  407214:	4629      	mov	r1, r5
  407216:	4630      	mov	r0, r6
  407218:	f000 f97a 	bl	407510 <_sbrk_r>
  40721c:	1c43      	adds	r3, r0, #1
  40721e:	d126      	bne.n	40726e <_malloc_r+0x96>
  407220:	230c      	movs	r3, #12
  407222:	6033      	str	r3, [r6, #0]
  407224:	4630      	mov	r0, r6
  407226:	f000 faf0 	bl	40780a <__malloc_unlock>
  40722a:	e7e4      	b.n	4071f6 <_malloc_r+0x1e>
  40722c:	680b      	ldr	r3, [r1, #0]
  40722e:	1b5b      	subs	r3, r3, r5
  407230:	d41a      	bmi.n	407268 <_malloc_r+0x90>
  407232:	2b0b      	cmp	r3, #11
  407234:	d90f      	bls.n	407256 <_malloc_r+0x7e>
  407236:	600b      	str	r3, [r1, #0]
  407238:	50cd      	str	r5, [r1, r3]
  40723a:	18cc      	adds	r4, r1, r3
  40723c:	4630      	mov	r0, r6
  40723e:	f000 fae4 	bl	40780a <__malloc_unlock>
  407242:	f104 000b 	add.w	r0, r4, #11
  407246:	1d23      	adds	r3, r4, #4
  407248:	f020 0007 	bic.w	r0, r0, #7
  40724c:	1ac3      	subs	r3, r0, r3
  40724e:	d01b      	beq.n	407288 <_malloc_r+0xb0>
  407250:	425a      	negs	r2, r3
  407252:	50e2      	str	r2, [r4, r3]
  407254:	bd70      	pop	{r4, r5, r6, pc}
  407256:	428c      	cmp	r4, r1
  407258:	bf0d      	iteet	eq
  40725a:	6863      	ldreq	r3, [r4, #4]
  40725c:	684b      	ldrne	r3, [r1, #4]
  40725e:	6063      	strne	r3, [r4, #4]
  407260:	6013      	streq	r3, [r2, #0]
  407262:	bf18      	it	ne
  407264:	460c      	movne	r4, r1
  407266:	e7e9      	b.n	40723c <_malloc_r+0x64>
  407268:	460c      	mov	r4, r1
  40726a:	6849      	ldr	r1, [r1, #4]
  40726c:	e7ca      	b.n	407204 <_malloc_r+0x2c>
  40726e:	1cc4      	adds	r4, r0, #3
  407270:	f024 0403 	bic.w	r4, r4, #3
  407274:	42a0      	cmp	r0, r4
  407276:	d005      	beq.n	407284 <_malloc_r+0xac>
  407278:	1a21      	subs	r1, r4, r0
  40727a:	4630      	mov	r0, r6
  40727c:	f000 f948 	bl	407510 <_sbrk_r>
  407280:	3001      	adds	r0, #1
  407282:	d0cd      	beq.n	407220 <_malloc_r+0x48>
  407284:	6025      	str	r5, [r4, #0]
  407286:	e7d9      	b.n	40723c <_malloc_r+0x64>
  407288:	bd70      	pop	{r4, r5, r6, pc}
  40728a:	bf00      	nop
  40728c:	204004c4 	.word	0x204004c4
  407290:	204004c8 	.word	0x204004c8

00407294 <__sfputc_r>:
  407294:	6893      	ldr	r3, [r2, #8]
  407296:	3b01      	subs	r3, #1
  407298:	2b00      	cmp	r3, #0
  40729a:	b410      	push	{r4}
  40729c:	6093      	str	r3, [r2, #8]
  40729e:	da08      	bge.n	4072b2 <__sfputc_r+0x1e>
  4072a0:	6994      	ldr	r4, [r2, #24]
  4072a2:	42a3      	cmp	r3, r4
  4072a4:	db02      	blt.n	4072ac <__sfputc_r+0x18>
  4072a6:	b2cb      	uxtb	r3, r1
  4072a8:	2b0a      	cmp	r3, #10
  4072aa:	d102      	bne.n	4072b2 <__sfputc_r+0x1e>
  4072ac:	bc10      	pop	{r4}
  4072ae:	f000 b983 	b.w	4075b8 <__swbuf_r>
  4072b2:	6813      	ldr	r3, [r2, #0]
  4072b4:	1c58      	adds	r0, r3, #1
  4072b6:	6010      	str	r0, [r2, #0]
  4072b8:	7019      	strb	r1, [r3, #0]
  4072ba:	b2c8      	uxtb	r0, r1
  4072bc:	bc10      	pop	{r4}
  4072be:	4770      	bx	lr

004072c0 <__sfputs_r>:
  4072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4072c2:	4606      	mov	r6, r0
  4072c4:	460f      	mov	r7, r1
  4072c6:	4614      	mov	r4, r2
  4072c8:	18d5      	adds	r5, r2, r3
  4072ca:	42ac      	cmp	r4, r5
  4072cc:	d101      	bne.n	4072d2 <__sfputs_r+0x12>
  4072ce:	2000      	movs	r0, #0
  4072d0:	e007      	b.n	4072e2 <__sfputs_r+0x22>
  4072d2:	463a      	mov	r2, r7
  4072d4:	f814 1b01 	ldrb.w	r1, [r4], #1
  4072d8:	4630      	mov	r0, r6
  4072da:	f7ff ffdb 	bl	407294 <__sfputc_r>
  4072de:	1c43      	adds	r3, r0, #1
  4072e0:	d1f3      	bne.n	4072ca <__sfputs_r+0xa>
  4072e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004072e4 <_vfiprintf_r>:
  4072e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4072e8:	b09d      	sub	sp, #116	; 0x74
  4072ea:	460c      	mov	r4, r1
  4072ec:	4617      	mov	r7, r2
  4072ee:	9303      	str	r3, [sp, #12]
  4072f0:	4606      	mov	r6, r0
  4072f2:	b118      	cbz	r0, 4072fc <_vfiprintf_r+0x18>
  4072f4:	6983      	ldr	r3, [r0, #24]
  4072f6:	b90b      	cbnz	r3, 4072fc <_vfiprintf_r+0x18>
  4072f8:	f7ff faea 	bl	4068d0 <__sinit>
  4072fc:	4b7c      	ldr	r3, [pc, #496]	; (4074f0 <_vfiprintf_r+0x20c>)
  4072fe:	429c      	cmp	r4, r3
  407300:	d157      	bne.n	4073b2 <_vfiprintf_r+0xce>
  407302:	6874      	ldr	r4, [r6, #4]
  407304:	89a3      	ldrh	r3, [r4, #12]
  407306:	0718      	lsls	r0, r3, #28
  407308:	d55d      	bpl.n	4073c6 <_vfiprintf_r+0xe2>
  40730a:	6923      	ldr	r3, [r4, #16]
  40730c:	2b00      	cmp	r3, #0
  40730e:	d05a      	beq.n	4073c6 <_vfiprintf_r+0xe2>
  407310:	2300      	movs	r3, #0
  407312:	9309      	str	r3, [sp, #36]	; 0x24
  407314:	2320      	movs	r3, #32
  407316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40731a:	2330      	movs	r3, #48	; 0x30
  40731c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  407320:	f04f 0b01 	mov.w	fp, #1
  407324:	46b8      	mov	r8, r7
  407326:	4645      	mov	r5, r8
  407328:	f815 3b01 	ldrb.w	r3, [r5], #1
  40732c:	2b00      	cmp	r3, #0
  40732e:	d155      	bne.n	4073dc <_vfiprintf_r+0xf8>
  407330:	ebb8 0a07 	subs.w	sl, r8, r7
  407334:	d00b      	beq.n	40734e <_vfiprintf_r+0x6a>
  407336:	4653      	mov	r3, sl
  407338:	463a      	mov	r2, r7
  40733a:	4621      	mov	r1, r4
  40733c:	4630      	mov	r0, r6
  40733e:	f7ff ffbf 	bl	4072c0 <__sfputs_r>
  407342:	3001      	adds	r0, #1
  407344:	f000 80c4 	beq.w	4074d0 <_vfiprintf_r+0x1ec>
  407348:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40734a:	4453      	add	r3, sl
  40734c:	9309      	str	r3, [sp, #36]	; 0x24
  40734e:	f898 3000 	ldrb.w	r3, [r8]
  407352:	2b00      	cmp	r3, #0
  407354:	f000 80bc 	beq.w	4074d0 <_vfiprintf_r+0x1ec>
  407358:	2300      	movs	r3, #0
  40735a:	f04f 32ff 	mov.w	r2, #4294967295
  40735e:	9304      	str	r3, [sp, #16]
  407360:	9307      	str	r3, [sp, #28]
  407362:	9205      	str	r2, [sp, #20]
  407364:	9306      	str	r3, [sp, #24]
  407366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40736a:	931a      	str	r3, [sp, #104]	; 0x68
  40736c:	2205      	movs	r2, #5
  40736e:	7829      	ldrb	r1, [r5, #0]
  407370:	4860      	ldr	r0, [pc, #384]	; (4074f4 <_vfiprintf_r+0x210>)
  407372:	f7ff fbb5 	bl	406ae0 <memchr>
  407376:	f105 0801 	add.w	r8, r5, #1
  40737a:	9b04      	ldr	r3, [sp, #16]
  40737c:	2800      	cmp	r0, #0
  40737e:	d131      	bne.n	4073e4 <_vfiprintf_r+0x100>
  407380:	06d9      	lsls	r1, r3, #27
  407382:	bf44      	itt	mi
  407384:	2220      	movmi	r2, #32
  407386:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40738a:	071a      	lsls	r2, r3, #28
  40738c:	bf44      	itt	mi
  40738e:	222b      	movmi	r2, #43	; 0x2b
  407390:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  407394:	782a      	ldrb	r2, [r5, #0]
  407396:	2a2a      	cmp	r2, #42	; 0x2a
  407398:	d02c      	beq.n	4073f4 <_vfiprintf_r+0x110>
  40739a:	9a07      	ldr	r2, [sp, #28]
  40739c:	2100      	movs	r1, #0
  40739e:	200a      	movs	r0, #10
  4073a0:	46a8      	mov	r8, r5
  4073a2:	3501      	adds	r5, #1
  4073a4:	f898 3000 	ldrb.w	r3, [r8]
  4073a8:	3b30      	subs	r3, #48	; 0x30
  4073aa:	2b09      	cmp	r3, #9
  4073ac:	d96d      	bls.n	40748a <_vfiprintf_r+0x1a6>
  4073ae:	b371      	cbz	r1, 40740e <_vfiprintf_r+0x12a>
  4073b0:	e026      	b.n	407400 <_vfiprintf_r+0x11c>
  4073b2:	4b51      	ldr	r3, [pc, #324]	; (4074f8 <_vfiprintf_r+0x214>)
  4073b4:	429c      	cmp	r4, r3
  4073b6:	d101      	bne.n	4073bc <_vfiprintf_r+0xd8>
  4073b8:	68b4      	ldr	r4, [r6, #8]
  4073ba:	e7a3      	b.n	407304 <_vfiprintf_r+0x20>
  4073bc:	4b4f      	ldr	r3, [pc, #316]	; (4074fc <_vfiprintf_r+0x218>)
  4073be:	429c      	cmp	r4, r3
  4073c0:	bf08      	it	eq
  4073c2:	68f4      	ldreq	r4, [r6, #12]
  4073c4:	e79e      	b.n	407304 <_vfiprintf_r+0x20>
  4073c6:	4621      	mov	r1, r4
  4073c8:	4630      	mov	r0, r6
  4073ca:	f000 f959 	bl	407680 <__swsetup_r>
  4073ce:	2800      	cmp	r0, #0
  4073d0:	d09e      	beq.n	407310 <_vfiprintf_r+0x2c>
  4073d2:	f04f 30ff 	mov.w	r0, #4294967295
  4073d6:	b01d      	add	sp, #116	; 0x74
  4073d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4073dc:	2b25      	cmp	r3, #37	; 0x25
  4073de:	d0a7      	beq.n	407330 <_vfiprintf_r+0x4c>
  4073e0:	46a8      	mov	r8, r5
  4073e2:	e7a0      	b.n	407326 <_vfiprintf_r+0x42>
  4073e4:	4a43      	ldr	r2, [pc, #268]	; (4074f4 <_vfiprintf_r+0x210>)
  4073e6:	1a80      	subs	r0, r0, r2
  4073e8:	fa0b f000 	lsl.w	r0, fp, r0
  4073ec:	4318      	orrs	r0, r3
  4073ee:	9004      	str	r0, [sp, #16]
  4073f0:	4645      	mov	r5, r8
  4073f2:	e7bb      	b.n	40736c <_vfiprintf_r+0x88>
  4073f4:	9a03      	ldr	r2, [sp, #12]
  4073f6:	1d11      	adds	r1, r2, #4
  4073f8:	6812      	ldr	r2, [r2, #0]
  4073fa:	9103      	str	r1, [sp, #12]
  4073fc:	2a00      	cmp	r2, #0
  4073fe:	db01      	blt.n	407404 <_vfiprintf_r+0x120>
  407400:	9207      	str	r2, [sp, #28]
  407402:	e004      	b.n	40740e <_vfiprintf_r+0x12a>
  407404:	4252      	negs	r2, r2
  407406:	f043 0302 	orr.w	r3, r3, #2
  40740a:	9207      	str	r2, [sp, #28]
  40740c:	9304      	str	r3, [sp, #16]
  40740e:	f898 3000 	ldrb.w	r3, [r8]
  407412:	2b2e      	cmp	r3, #46	; 0x2e
  407414:	d110      	bne.n	407438 <_vfiprintf_r+0x154>
  407416:	f898 3001 	ldrb.w	r3, [r8, #1]
  40741a:	2b2a      	cmp	r3, #42	; 0x2a
  40741c:	f108 0101 	add.w	r1, r8, #1
  407420:	d137      	bne.n	407492 <_vfiprintf_r+0x1ae>
  407422:	9b03      	ldr	r3, [sp, #12]
  407424:	1d1a      	adds	r2, r3, #4
  407426:	681b      	ldr	r3, [r3, #0]
  407428:	9203      	str	r2, [sp, #12]
  40742a:	2b00      	cmp	r3, #0
  40742c:	bfb8      	it	lt
  40742e:	f04f 33ff 	movlt.w	r3, #4294967295
  407432:	f108 0802 	add.w	r8, r8, #2
  407436:	9305      	str	r3, [sp, #20]
  407438:	4d31      	ldr	r5, [pc, #196]	; (407500 <_vfiprintf_r+0x21c>)
  40743a:	f898 1000 	ldrb.w	r1, [r8]
  40743e:	2203      	movs	r2, #3
  407440:	4628      	mov	r0, r5
  407442:	f7ff fb4d 	bl	406ae0 <memchr>
  407446:	b140      	cbz	r0, 40745a <_vfiprintf_r+0x176>
  407448:	2340      	movs	r3, #64	; 0x40
  40744a:	1b40      	subs	r0, r0, r5
  40744c:	fa03 f000 	lsl.w	r0, r3, r0
  407450:	9b04      	ldr	r3, [sp, #16]
  407452:	4303      	orrs	r3, r0
  407454:	9304      	str	r3, [sp, #16]
  407456:	f108 0801 	add.w	r8, r8, #1
  40745a:	f898 1000 	ldrb.w	r1, [r8]
  40745e:	4829      	ldr	r0, [pc, #164]	; (407504 <_vfiprintf_r+0x220>)
  407460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  407464:	2206      	movs	r2, #6
  407466:	f108 0701 	add.w	r7, r8, #1
  40746a:	f7ff fb39 	bl	406ae0 <memchr>
  40746e:	2800      	cmp	r0, #0
  407470:	d034      	beq.n	4074dc <_vfiprintf_r+0x1f8>
  407472:	4b25      	ldr	r3, [pc, #148]	; (407508 <_vfiprintf_r+0x224>)
  407474:	bb03      	cbnz	r3, 4074b8 <_vfiprintf_r+0x1d4>
  407476:	9b03      	ldr	r3, [sp, #12]
  407478:	3307      	adds	r3, #7
  40747a:	f023 0307 	bic.w	r3, r3, #7
  40747e:	3308      	adds	r3, #8
  407480:	9303      	str	r3, [sp, #12]
  407482:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407484:	444b      	add	r3, r9
  407486:	9309      	str	r3, [sp, #36]	; 0x24
  407488:	e74c      	b.n	407324 <_vfiprintf_r+0x40>
  40748a:	fb00 3202 	mla	r2, r0, r2, r3
  40748e:	2101      	movs	r1, #1
  407490:	e786      	b.n	4073a0 <_vfiprintf_r+0xbc>
  407492:	2300      	movs	r3, #0
  407494:	9305      	str	r3, [sp, #20]
  407496:	4618      	mov	r0, r3
  407498:	250a      	movs	r5, #10
  40749a:	4688      	mov	r8, r1
  40749c:	3101      	adds	r1, #1
  40749e:	f898 2000 	ldrb.w	r2, [r8]
  4074a2:	3a30      	subs	r2, #48	; 0x30
  4074a4:	2a09      	cmp	r2, #9
  4074a6:	d903      	bls.n	4074b0 <_vfiprintf_r+0x1cc>
  4074a8:	2b00      	cmp	r3, #0
  4074aa:	d0c5      	beq.n	407438 <_vfiprintf_r+0x154>
  4074ac:	9005      	str	r0, [sp, #20]
  4074ae:	e7c3      	b.n	407438 <_vfiprintf_r+0x154>
  4074b0:	fb05 2000 	mla	r0, r5, r0, r2
  4074b4:	2301      	movs	r3, #1
  4074b6:	e7f0      	b.n	40749a <_vfiprintf_r+0x1b6>
  4074b8:	ab03      	add	r3, sp, #12
  4074ba:	9300      	str	r3, [sp, #0]
  4074bc:	4622      	mov	r2, r4
  4074be:	4b13      	ldr	r3, [pc, #76]	; (40750c <_vfiprintf_r+0x228>)
  4074c0:	a904      	add	r1, sp, #16
  4074c2:	4630      	mov	r0, r6
  4074c4:	f7fd fe0e 	bl	4050e4 <_printf_float>
  4074c8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4074cc:	4681      	mov	r9, r0
  4074ce:	d1d8      	bne.n	407482 <_vfiprintf_r+0x19e>
  4074d0:	89a3      	ldrh	r3, [r4, #12]
  4074d2:	065b      	lsls	r3, r3, #25
  4074d4:	f53f af7d 	bmi.w	4073d2 <_vfiprintf_r+0xee>
  4074d8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4074da:	e77c      	b.n	4073d6 <_vfiprintf_r+0xf2>
  4074dc:	ab03      	add	r3, sp, #12
  4074de:	9300      	str	r3, [sp, #0]
  4074e0:	4622      	mov	r2, r4
  4074e2:	4b0a      	ldr	r3, [pc, #40]	; (40750c <_vfiprintf_r+0x228>)
  4074e4:	a904      	add	r1, sp, #16
  4074e6:	4630      	mov	r0, r6
  4074e8:	f7fe f8aa 	bl	405640 <_printf_i>
  4074ec:	e7ec      	b.n	4074c8 <_vfiprintf_r+0x1e4>
  4074ee:	bf00      	nop
  4074f0:	00408100 	.word	0x00408100
  4074f4:	0040823c 	.word	0x0040823c
  4074f8:	00408120 	.word	0x00408120
  4074fc:	004080e0 	.word	0x004080e0
  407500:	00408242 	.word	0x00408242
  407504:	00408246 	.word	0x00408246
  407508:	004050e5 	.word	0x004050e5
  40750c:	004072c1 	.word	0x004072c1

00407510 <_sbrk_r>:
  407510:	b538      	push	{r3, r4, r5, lr}
  407512:	4c06      	ldr	r4, [pc, #24]	; (40752c <_sbrk_r+0x1c>)
  407514:	2300      	movs	r3, #0
  407516:	4605      	mov	r5, r0
  407518:	4608      	mov	r0, r1
  40751a:	6023      	str	r3, [r4, #0]
  40751c:	f7fa fd0a 	bl	401f34 <_sbrk>
  407520:	1c43      	adds	r3, r0, #1
  407522:	d102      	bne.n	40752a <_sbrk_r+0x1a>
  407524:	6823      	ldr	r3, [r4, #0]
  407526:	b103      	cbz	r3, 40752a <_sbrk_r+0x1a>
  407528:	602b      	str	r3, [r5, #0]
  40752a:	bd38      	pop	{r3, r4, r5, pc}
  40752c:	204007e4 	.word	0x204007e4

00407530 <__sread>:
  407530:	b510      	push	{r4, lr}
  407532:	460c      	mov	r4, r1
  407534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407538:	f000 f968 	bl	40780c <_read_r>
  40753c:	2800      	cmp	r0, #0
  40753e:	bfab      	itete	ge
  407540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  407542:	89a3      	ldrhlt	r3, [r4, #12]
  407544:	181b      	addge	r3, r3, r0
  407546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  40754a:	bfac      	ite	ge
  40754c:	6563      	strge	r3, [r4, #84]	; 0x54
  40754e:	81a3      	strhlt	r3, [r4, #12]
  407550:	bd10      	pop	{r4, pc}

00407552 <__swrite>:
  407552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407556:	461f      	mov	r7, r3
  407558:	898b      	ldrh	r3, [r1, #12]
  40755a:	05db      	lsls	r3, r3, #23
  40755c:	4605      	mov	r5, r0
  40755e:	460c      	mov	r4, r1
  407560:	4616      	mov	r6, r2
  407562:	d505      	bpl.n	407570 <__swrite+0x1e>
  407564:	2302      	movs	r3, #2
  407566:	2200      	movs	r2, #0
  407568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40756c:	f000 f928 	bl	4077c0 <_lseek_r>
  407570:	89a3      	ldrh	r3, [r4, #12]
  407572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40757a:	81a3      	strh	r3, [r4, #12]
  40757c:	4632      	mov	r2, r6
  40757e:	463b      	mov	r3, r7
  407580:	4628      	mov	r0, r5
  407582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407586:	f000 b869 	b.w	40765c <_write_r>

0040758a <__sseek>:
  40758a:	b510      	push	{r4, lr}
  40758c:	460c      	mov	r4, r1
  40758e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407592:	f000 f915 	bl	4077c0 <_lseek_r>
  407596:	1c43      	adds	r3, r0, #1
  407598:	89a3      	ldrh	r3, [r4, #12]
  40759a:	bf15      	itete	ne
  40759c:	6560      	strne	r0, [r4, #84]	; 0x54
  40759e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4075a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4075a6:	81a3      	strheq	r3, [r4, #12]
  4075a8:	bf18      	it	ne
  4075aa:	81a3      	strhne	r3, [r4, #12]
  4075ac:	bd10      	pop	{r4, pc}

004075ae <__sclose>:
  4075ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4075b2:	f000 b8d3 	b.w	40775c <_close_r>
	...

004075b8 <__swbuf_r>:
  4075b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4075ba:	460e      	mov	r6, r1
  4075bc:	4614      	mov	r4, r2
  4075be:	4605      	mov	r5, r0
  4075c0:	b118      	cbz	r0, 4075ca <__swbuf_r+0x12>
  4075c2:	6983      	ldr	r3, [r0, #24]
  4075c4:	b90b      	cbnz	r3, 4075ca <__swbuf_r+0x12>
  4075c6:	f7ff f983 	bl	4068d0 <__sinit>
  4075ca:	4b21      	ldr	r3, [pc, #132]	; (407650 <__swbuf_r+0x98>)
  4075cc:	429c      	cmp	r4, r3
  4075ce:	d12a      	bne.n	407626 <__swbuf_r+0x6e>
  4075d0:	686c      	ldr	r4, [r5, #4]
  4075d2:	69a3      	ldr	r3, [r4, #24]
  4075d4:	60a3      	str	r3, [r4, #8]
  4075d6:	89a3      	ldrh	r3, [r4, #12]
  4075d8:	071a      	lsls	r2, r3, #28
  4075da:	d52e      	bpl.n	40763a <__swbuf_r+0x82>
  4075dc:	6923      	ldr	r3, [r4, #16]
  4075de:	b363      	cbz	r3, 40763a <__swbuf_r+0x82>
  4075e0:	6923      	ldr	r3, [r4, #16]
  4075e2:	6820      	ldr	r0, [r4, #0]
  4075e4:	1ac0      	subs	r0, r0, r3
  4075e6:	6963      	ldr	r3, [r4, #20]
  4075e8:	b2f6      	uxtb	r6, r6
  4075ea:	4298      	cmp	r0, r3
  4075ec:	4637      	mov	r7, r6
  4075ee:	db04      	blt.n	4075fa <__swbuf_r+0x42>
  4075f0:	4621      	mov	r1, r4
  4075f2:	4628      	mov	r0, r5
  4075f4:	f7ff f902 	bl	4067fc <_fflush_r>
  4075f8:	bb28      	cbnz	r0, 407646 <__swbuf_r+0x8e>
  4075fa:	68a3      	ldr	r3, [r4, #8]
  4075fc:	3b01      	subs	r3, #1
  4075fe:	60a3      	str	r3, [r4, #8]
  407600:	6823      	ldr	r3, [r4, #0]
  407602:	1c5a      	adds	r2, r3, #1
  407604:	6022      	str	r2, [r4, #0]
  407606:	701e      	strb	r6, [r3, #0]
  407608:	6963      	ldr	r3, [r4, #20]
  40760a:	3001      	adds	r0, #1
  40760c:	4298      	cmp	r0, r3
  40760e:	d004      	beq.n	40761a <__swbuf_r+0x62>
  407610:	89a3      	ldrh	r3, [r4, #12]
  407612:	07db      	lsls	r3, r3, #31
  407614:	d519      	bpl.n	40764a <__swbuf_r+0x92>
  407616:	2e0a      	cmp	r6, #10
  407618:	d117      	bne.n	40764a <__swbuf_r+0x92>
  40761a:	4621      	mov	r1, r4
  40761c:	4628      	mov	r0, r5
  40761e:	f7ff f8ed 	bl	4067fc <_fflush_r>
  407622:	b190      	cbz	r0, 40764a <__swbuf_r+0x92>
  407624:	e00f      	b.n	407646 <__swbuf_r+0x8e>
  407626:	4b0b      	ldr	r3, [pc, #44]	; (407654 <__swbuf_r+0x9c>)
  407628:	429c      	cmp	r4, r3
  40762a:	d101      	bne.n	407630 <__swbuf_r+0x78>
  40762c:	68ac      	ldr	r4, [r5, #8]
  40762e:	e7d0      	b.n	4075d2 <__swbuf_r+0x1a>
  407630:	4b09      	ldr	r3, [pc, #36]	; (407658 <__swbuf_r+0xa0>)
  407632:	429c      	cmp	r4, r3
  407634:	bf08      	it	eq
  407636:	68ec      	ldreq	r4, [r5, #12]
  407638:	e7cb      	b.n	4075d2 <__swbuf_r+0x1a>
  40763a:	4621      	mov	r1, r4
  40763c:	4628      	mov	r0, r5
  40763e:	f000 f81f 	bl	407680 <__swsetup_r>
  407642:	2800      	cmp	r0, #0
  407644:	d0cc      	beq.n	4075e0 <__swbuf_r+0x28>
  407646:	f04f 37ff 	mov.w	r7, #4294967295
  40764a:	4638      	mov	r0, r7
  40764c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40764e:	bf00      	nop
  407650:	00408100 	.word	0x00408100
  407654:	00408120 	.word	0x00408120
  407658:	004080e0 	.word	0x004080e0

0040765c <_write_r>:
  40765c:	b538      	push	{r3, r4, r5, lr}
  40765e:	4c07      	ldr	r4, [pc, #28]	; (40767c <_write_r+0x20>)
  407660:	4605      	mov	r5, r0
  407662:	4608      	mov	r0, r1
  407664:	4611      	mov	r1, r2
  407666:	2200      	movs	r2, #0
  407668:	6022      	str	r2, [r4, #0]
  40766a:	461a      	mov	r2, r3
  40766c:	f7fb fd48 	bl	403100 <_write>
  407670:	1c43      	adds	r3, r0, #1
  407672:	d102      	bne.n	40767a <_write_r+0x1e>
  407674:	6823      	ldr	r3, [r4, #0]
  407676:	b103      	cbz	r3, 40767a <_write_r+0x1e>
  407678:	602b      	str	r3, [r5, #0]
  40767a:	bd38      	pop	{r3, r4, r5, pc}
  40767c:	204007e4 	.word	0x204007e4

00407680 <__swsetup_r>:
  407680:	4b32      	ldr	r3, [pc, #200]	; (40774c <__swsetup_r+0xcc>)
  407682:	b570      	push	{r4, r5, r6, lr}
  407684:	681d      	ldr	r5, [r3, #0]
  407686:	4606      	mov	r6, r0
  407688:	460c      	mov	r4, r1
  40768a:	b125      	cbz	r5, 407696 <__swsetup_r+0x16>
  40768c:	69ab      	ldr	r3, [r5, #24]
  40768e:	b913      	cbnz	r3, 407696 <__swsetup_r+0x16>
  407690:	4628      	mov	r0, r5
  407692:	f7ff f91d 	bl	4068d0 <__sinit>
  407696:	4b2e      	ldr	r3, [pc, #184]	; (407750 <__swsetup_r+0xd0>)
  407698:	429c      	cmp	r4, r3
  40769a:	d10f      	bne.n	4076bc <__swsetup_r+0x3c>
  40769c:	686c      	ldr	r4, [r5, #4]
  40769e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4076a2:	b29a      	uxth	r2, r3
  4076a4:	0715      	lsls	r5, r2, #28
  4076a6:	d42c      	bmi.n	407702 <__swsetup_r+0x82>
  4076a8:	06d0      	lsls	r0, r2, #27
  4076aa:	d411      	bmi.n	4076d0 <__swsetup_r+0x50>
  4076ac:	2209      	movs	r2, #9
  4076ae:	6032      	str	r2, [r6, #0]
  4076b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4076b4:	81a3      	strh	r3, [r4, #12]
  4076b6:	f04f 30ff 	mov.w	r0, #4294967295
  4076ba:	bd70      	pop	{r4, r5, r6, pc}
  4076bc:	4b25      	ldr	r3, [pc, #148]	; (407754 <__swsetup_r+0xd4>)
  4076be:	429c      	cmp	r4, r3
  4076c0:	d101      	bne.n	4076c6 <__swsetup_r+0x46>
  4076c2:	68ac      	ldr	r4, [r5, #8]
  4076c4:	e7eb      	b.n	40769e <__swsetup_r+0x1e>
  4076c6:	4b24      	ldr	r3, [pc, #144]	; (407758 <__swsetup_r+0xd8>)
  4076c8:	429c      	cmp	r4, r3
  4076ca:	bf08      	it	eq
  4076cc:	68ec      	ldreq	r4, [r5, #12]
  4076ce:	e7e6      	b.n	40769e <__swsetup_r+0x1e>
  4076d0:	0751      	lsls	r1, r2, #29
  4076d2:	d512      	bpl.n	4076fa <__swsetup_r+0x7a>
  4076d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4076d6:	b141      	cbz	r1, 4076ea <__swsetup_r+0x6a>
  4076d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4076dc:	4299      	cmp	r1, r3
  4076de:	d002      	beq.n	4076e6 <__swsetup_r+0x66>
  4076e0:	4630      	mov	r0, r6
  4076e2:	f7ff fd2b 	bl	40713c <_free_r>
  4076e6:	2300      	movs	r3, #0
  4076e8:	6363      	str	r3, [r4, #52]	; 0x34
  4076ea:	89a3      	ldrh	r3, [r4, #12]
  4076ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4076f0:	81a3      	strh	r3, [r4, #12]
  4076f2:	2300      	movs	r3, #0
  4076f4:	6063      	str	r3, [r4, #4]
  4076f6:	6923      	ldr	r3, [r4, #16]
  4076f8:	6023      	str	r3, [r4, #0]
  4076fa:	89a3      	ldrh	r3, [r4, #12]
  4076fc:	f043 0308 	orr.w	r3, r3, #8
  407700:	81a3      	strh	r3, [r4, #12]
  407702:	6923      	ldr	r3, [r4, #16]
  407704:	b94b      	cbnz	r3, 40771a <__swsetup_r+0x9a>
  407706:	89a3      	ldrh	r3, [r4, #12]
  407708:	f403 7320 	and.w	r3, r3, #640	; 0x280
  40770c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407710:	d003      	beq.n	40771a <__swsetup_r+0x9a>
  407712:	4621      	mov	r1, r4
  407714:	4630      	mov	r0, r6
  407716:	f7ff f997 	bl	406a48 <__smakebuf_r>
  40771a:	89a2      	ldrh	r2, [r4, #12]
  40771c:	f012 0301 	ands.w	r3, r2, #1
  407720:	d00c      	beq.n	40773c <__swsetup_r+0xbc>
  407722:	2300      	movs	r3, #0
  407724:	60a3      	str	r3, [r4, #8]
  407726:	6963      	ldr	r3, [r4, #20]
  407728:	425b      	negs	r3, r3
  40772a:	61a3      	str	r3, [r4, #24]
  40772c:	6923      	ldr	r3, [r4, #16]
  40772e:	b953      	cbnz	r3, 407746 <__swsetup_r+0xc6>
  407730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407734:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  407738:	d1ba      	bne.n	4076b0 <__swsetup_r+0x30>
  40773a:	bd70      	pop	{r4, r5, r6, pc}
  40773c:	0792      	lsls	r2, r2, #30
  40773e:	bf58      	it	pl
  407740:	6963      	ldrpl	r3, [r4, #20]
  407742:	60a3      	str	r3, [r4, #8]
  407744:	e7f2      	b.n	40772c <__swsetup_r+0xac>
  407746:	2000      	movs	r0, #0
  407748:	e7f7      	b.n	40773a <__swsetup_r+0xba>
  40774a:	bf00      	nop
  40774c:	20400048 	.word	0x20400048
  407750:	00408100 	.word	0x00408100
  407754:	00408120 	.word	0x00408120
  407758:	004080e0 	.word	0x004080e0

0040775c <_close_r>:
  40775c:	b538      	push	{r3, r4, r5, lr}
  40775e:	4c06      	ldr	r4, [pc, #24]	; (407778 <_close_r+0x1c>)
  407760:	2300      	movs	r3, #0
  407762:	4605      	mov	r5, r0
  407764:	4608      	mov	r0, r1
  407766:	6023      	str	r3, [r4, #0]
  407768:	f7fa fbf6 	bl	401f58 <_close>
  40776c:	1c43      	adds	r3, r0, #1
  40776e:	d102      	bne.n	407776 <_close_r+0x1a>
  407770:	6823      	ldr	r3, [r4, #0]
  407772:	b103      	cbz	r3, 407776 <_close_r+0x1a>
  407774:	602b      	str	r3, [r5, #0]
  407776:	bd38      	pop	{r3, r4, r5, pc}
  407778:	204007e4 	.word	0x204007e4

0040777c <_fstat_r>:
  40777c:	b538      	push	{r3, r4, r5, lr}
  40777e:	4c07      	ldr	r4, [pc, #28]	; (40779c <_fstat_r+0x20>)
  407780:	2300      	movs	r3, #0
  407782:	4605      	mov	r5, r0
  407784:	4608      	mov	r0, r1
  407786:	4611      	mov	r1, r2
  407788:	6023      	str	r3, [r4, #0]
  40778a:	f7fa fbe8 	bl	401f5e <_fstat>
  40778e:	1c43      	adds	r3, r0, #1
  407790:	d102      	bne.n	407798 <_fstat_r+0x1c>
  407792:	6823      	ldr	r3, [r4, #0]
  407794:	b103      	cbz	r3, 407798 <_fstat_r+0x1c>
  407796:	602b      	str	r3, [r5, #0]
  407798:	bd38      	pop	{r3, r4, r5, pc}
  40779a:	bf00      	nop
  40779c:	204007e4 	.word	0x204007e4

004077a0 <_isatty_r>:
  4077a0:	b538      	push	{r3, r4, r5, lr}
  4077a2:	4c06      	ldr	r4, [pc, #24]	; (4077bc <_isatty_r+0x1c>)
  4077a4:	2300      	movs	r3, #0
  4077a6:	4605      	mov	r5, r0
  4077a8:	4608      	mov	r0, r1
  4077aa:	6023      	str	r3, [r4, #0]
  4077ac:	f7fa fbdc 	bl	401f68 <_isatty>
  4077b0:	1c43      	adds	r3, r0, #1
  4077b2:	d102      	bne.n	4077ba <_isatty_r+0x1a>
  4077b4:	6823      	ldr	r3, [r4, #0]
  4077b6:	b103      	cbz	r3, 4077ba <_isatty_r+0x1a>
  4077b8:	602b      	str	r3, [r5, #0]
  4077ba:	bd38      	pop	{r3, r4, r5, pc}
  4077bc:	204007e4 	.word	0x204007e4

004077c0 <_lseek_r>:
  4077c0:	b538      	push	{r3, r4, r5, lr}
  4077c2:	4c07      	ldr	r4, [pc, #28]	; (4077e0 <_lseek_r+0x20>)
  4077c4:	4605      	mov	r5, r0
  4077c6:	4608      	mov	r0, r1
  4077c8:	4611      	mov	r1, r2
  4077ca:	2200      	movs	r2, #0
  4077cc:	6022      	str	r2, [r4, #0]
  4077ce:	461a      	mov	r2, r3
  4077d0:	f7fa fbcc 	bl	401f6c <_lseek>
  4077d4:	1c43      	adds	r3, r0, #1
  4077d6:	d102      	bne.n	4077de <_lseek_r+0x1e>
  4077d8:	6823      	ldr	r3, [r4, #0]
  4077da:	b103      	cbz	r3, 4077de <_lseek_r+0x1e>
  4077dc:	602b      	str	r3, [r5, #0]
  4077de:	bd38      	pop	{r3, r4, r5, pc}
  4077e0:	204007e4 	.word	0x204007e4

004077e4 <__ascii_mbtowc>:
  4077e4:	b082      	sub	sp, #8
  4077e6:	b901      	cbnz	r1, 4077ea <__ascii_mbtowc+0x6>
  4077e8:	a901      	add	r1, sp, #4
  4077ea:	b142      	cbz	r2, 4077fe <__ascii_mbtowc+0x1a>
  4077ec:	b14b      	cbz	r3, 407802 <__ascii_mbtowc+0x1e>
  4077ee:	7813      	ldrb	r3, [r2, #0]
  4077f0:	600b      	str	r3, [r1, #0]
  4077f2:	7812      	ldrb	r2, [r2, #0]
  4077f4:	1c10      	adds	r0, r2, #0
  4077f6:	bf18      	it	ne
  4077f8:	2001      	movne	r0, #1
  4077fa:	b002      	add	sp, #8
  4077fc:	4770      	bx	lr
  4077fe:	4610      	mov	r0, r2
  407800:	e7fb      	b.n	4077fa <__ascii_mbtowc+0x16>
  407802:	f06f 0001 	mvn.w	r0, #1
  407806:	e7f8      	b.n	4077fa <__ascii_mbtowc+0x16>

00407808 <__malloc_lock>:
  407808:	4770      	bx	lr

0040780a <__malloc_unlock>:
  40780a:	4770      	bx	lr

0040780c <_read_r>:
  40780c:	b538      	push	{r3, r4, r5, lr}
  40780e:	4c07      	ldr	r4, [pc, #28]	; (40782c <_read_r+0x20>)
  407810:	4605      	mov	r5, r0
  407812:	4608      	mov	r0, r1
  407814:	4611      	mov	r1, r2
  407816:	2200      	movs	r2, #0
  407818:	6022      	str	r2, [r4, #0]
  40781a:	461a      	mov	r2, r3
  40781c:	f7fb fc5e 	bl	4030dc <_read>
  407820:	1c43      	adds	r3, r0, #1
  407822:	d102      	bne.n	40782a <_read_r+0x1e>
  407824:	6823      	ldr	r3, [r4, #0]
  407826:	b103      	cbz	r3, 40782a <_read_r+0x1e>
  407828:	602b      	str	r3, [r5, #0]
  40782a:	bd38      	pop	{r3, r4, r5, pc}
  40782c:	204007e4 	.word	0x204007e4

00407830 <__ascii_wctomb>:
  407830:	b149      	cbz	r1, 407846 <__ascii_wctomb+0x16>
  407832:	2aff      	cmp	r2, #255	; 0xff
  407834:	bf85      	ittet	hi
  407836:	238a      	movhi	r3, #138	; 0x8a
  407838:	6003      	strhi	r3, [r0, #0]
  40783a:	700a      	strbls	r2, [r1, #0]
  40783c:	f04f 30ff 	movhi.w	r0, #4294967295
  407840:	bf98      	it	ls
  407842:	2001      	movls	r0, #1
  407844:	4770      	bx	lr
  407846:	4608      	mov	r0, r1
  407848:	4770      	bx	lr
  40784a:	0000      	movs	r0, r0
  40784c:	4441200a 	.word	0x4441200a
  407850:	65542043 	.word	0x65542043
  407854:	7265706d 	.word	0x7265706d
  407858:	72757461 	.word	0x72757461
  40785c:	65542065 	.word	0x65542065
  407860:	6e697473 	.word	0x6e697473
  407864:	2d2d2067 	.word	0x2d2d2067
  407868:	2d2d2d2d 	.word	0x2d2d2d2d
  40786c:	2d2d2d2d 	.word	0x2d2d2d2d
  407870:	2d2d2d2d 	.word	0x2d2d2d2d
  407874:	0a2d2d2d 	.word	0x0a2d2d2d
  407878:	00000000 	.word	0x00000000
  40787c:	20776152 	.word	0x20776152
  407880:	61746144 	.word	0x61746144
  407884:	00000a20 	.word	0x00000a20
  407888:	706d6554 	.word	0x706d6554
  40788c:	203d2031 	.word	0x203d2031
  407890:	09206925 	.word	0x09206925
  407894:	65542009 	.word	0x65542009
  407898:	2032706d 	.word	0x2032706d
  40789c:	6925203d 	.word	0x6925203d
  4078a0:	20090920 	.word	0x20090920
  4078a4:	706d6554 	.word	0x706d6554
  4078a8:	203d2033 	.word	0x203d2033
  4078ac:	0a206925 	.word	0x0a206925
  4078b0:	00000000 	.word	0x00000000
  4078b4:	706d6554 	.word	0x706d6554
  4078b8:	203d2034 	.word	0x203d2034
  4078bc:	09206925 	.word	0x09206925
  4078c0:	65542009 	.word	0x65542009
  4078c4:	2035706d 	.word	0x2035706d
  4078c8:	6925203d 	.word	0x6925203d
  4078cc:	20090920 	.word	0x20090920
  4078d0:	706d6554 	.word	0x706d6554
  4078d4:	203d2036 	.word	0x203d2036
  4078d8:	0a206925 	.word	0x0a206925
  4078dc:	00000000 	.word	0x00000000
  4078e0:	706d6554 	.word	0x706d6554
  4078e4:	746f4d20 	.word	0x746f4d20
  4078e8:	3d20726f 	.word	0x3d20726f
  4078ec:	20692520 	.word	0x20692520
  4078f0:	00000a20 	.word	0x00000a20
  4078f4:	7543200a 	.word	0x7543200a
  4078f8:	6e657272 	.word	0x6e657272
  4078fc:	6e612074 	.word	0x6e612074
  407900:	6f562064 	.word	0x6f562064
  407904:	6761746c 	.word	0x6761746c
  407908:	65542065 	.word	0x65542065
  40790c:	6e697473 	.word	0x6e697473
  407910:	2d2d2067 	.word	0x2d2d2067
  407914:	2d2d2d2d 	.word	0x2d2d2d2d
  407918:	2d2d2d2d 	.word	0x2d2d2d2d
  40791c:	2d2d2d2d 	.word	0x2d2d2d2d
  407920:	0a2d2d2d 	.word	0x0a2d2d2d
  407924:	00000000 	.word	0x00000000
  407928:	72727543 	.word	0x72727543
  40792c:	203d2041 	.word	0x203d2041
  407930:	09206925 	.word	0x09206925
  407934:	75432009 	.word	0x75432009
  407938:	20427272 	.word	0x20427272
  40793c:	6925203d 	.word	0x6925203d
  407940:	20090920 	.word	0x20090920
  407944:	72727543 	.word	0x72727543
  407948:	203d2043 	.word	0x203d2043
  40794c:	0a206925 	.word	0x0a206925
  407950:	00000000 	.word	0x00000000
  407954:	70707553 	.word	0x70707553
  407958:	5620796c 	.word	0x5620796c
  40795c:	61746c6f 	.word	0x61746c6f
  407960:	3d206567 	.word	0x3d206567
  407964:	20692520 	.word	0x20692520
  407968:	00000a20 	.word	0x00000a20
  40796c:	72727543 	.word	0x72727543
  407970:	6f204120 	.word	0x6f204120
  407974:	65736666 	.word	0x65736666
  407978:	56282074 	.word	0x56282074
  40797c:	202d2029 	.word	0x202d2029
  407980:	09206625 	.word	0x09206625
  407984:	6c6f7620 	.word	0x6c6f7620
  407988:	65676174 	.word	0x65676174
  40798c:	20202d20 	.word	0x20202d20
  407990:	20206625 	.word	0x20206625
  407994:	75632009 	.word	0x75632009
  407998:	6e657272 	.word	0x6e657272
  40799c:	202d2074 	.word	0x202d2074
  4079a0:	000a6625 	.word	0x000a6625
  4079a4:	72727543 	.word	0x72727543
  4079a8:	6f204220 	.word	0x6f204220
  4079ac:	65736666 	.word	0x65736666
  4079b0:	56282074 	.word	0x56282074
  4079b4:	202d2029 	.word	0x202d2029
  4079b8:	09206625 	.word	0x09206625
  4079bc:	6c6f7620 	.word	0x6c6f7620
  4079c0:	65676174 	.word	0x65676174
  4079c4:	20202d20 	.word	0x20202d20
  4079c8:	20206625 	.word	0x20206625
  4079cc:	75632009 	.word	0x75632009
  4079d0:	6e657272 	.word	0x6e657272
  4079d4:	202d2074 	.word	0x202d2074
  4079d8:	000a6625 	.word	0x000a6625
  4079dc:	746c6544 	.word	0x746c6544
  4079e0:	3d207361 	.word	0x3d207361
  4079e4:	20662520 	.word	0x20662520
  4079e8:	66252009 	.word	0x66252009
  4079ec:	0000000a 	.word	0x0000000a
  4079f0:	72727543 	.word	0x72727543
  4079f4:	6d697420 	.word	0x6d697420
  4079f8:	203d2065 	.word	0x203d2065
  4079fc:	000a6625 	.word	0x000a6625
  407a00:	203d206b 	.word	0x203d206b
  407a04:	0a206925 	.word	0x0a206925
  407a08:	00000000 	.word	0x00000000
  407a0c:	74736554 	.word	0x74736554
  407a10:	20676e69 	.word	0x20676e69
  407a14:	656d6954 	.word	0x656d6954
  407a18:	6f432072 	.word	0x6f432072
  407a1c:	65746e75 	.word	0x65746e75
  407a20:	00007372 	.word	0x00007372
  407a24:	6f636e45 	.word	0x6f636e45
  407a28:	20726564 	.word	0x20726564
  407a2c:	203d2041 	.word	0x203d2041
  407a30:	75252009 	.word	0x75252009
  407a34:	09203b20 	.word	0x09203b20
  407a38:	20752520 	.word	0x20752520
  407a3c:	0000000a 	.word	0x0000000a
  407a40:	6f636e45 	.word	0x6f636e45
  407a44:	20726564 	.word	0x20726564
  407a48:	203d2042 	.word	0x203d2042
  407a4c:	75252009 	.word	0x75252009
  407a50:	09203b20 	.word	0x09203b20
  407a54:	20752520 	.word	0x20752520
  407a58:	00000a0a 	.word	0x00000a0a
  407a5c:	6f636e45 	.word	0x6f636e45
  407a60:	20726564 	.word	0x20726564
  407a64:	6e756f63 	.word	0x6e756f63
  407a68:	20726574 	.word	0x20726574
  407a6c:	6925203d 	.word	0x6925203d
  407a70:	203b0920 	.word	0x203b0920
  407a74:	6c676e61 	.word	0x6c676e61
  407a78:	203d2065 	.word	0x203d2065
  407a7c:	0a206625 	.word	0x0a206625
  407a80:	00000000 	.word	0x00000000
  407a84:	682f2e2e 	.word	0x682f2e2e
  407a88:	732f6c61 	.word	0x732f6c61
  407a8c:	682f6372 	.word	0x682f6372
  407a90:	615f6c61 	.word	0x615f6c61
  407a94:	615f6364 	.word	0x615f6364
  407a98:	636e7973 	.word	0x636e7973
  407a9c:	0000632e 	.word	0x0000632e
  407aa0:	682f2e2e 	.word	0x682f2e2e
  407aa4:	732f6c61 	.word	0x732f6c61
  407aa8:	682f6372 	.word	0x682f6372
  407aac:	695f6c61 	.word	0x695f6c61
  407ab0:	00632e6f 	.word	0x00632e6f
  407ab4:	682f2e2e 	.word	0x682f2e2e
  407ab8:	732f6c61 	.word	0x732f6c61
  407abc:	682f6372 	.word	0x682f6372
  407ac0:	705f6c61 	.word	0x705f6c61
  407ac4:	632e6d77 	.word	0x632e6d77
  407ac8:	00000000 	.word	0x00000000
  407acc:	682f2e2e 	.word	0x682f2e2e
  407ad0:	732f6c61 	.word	0x732f6c61
  407ad4:	682f6372 	.word	0x682f6372
  407ad8:	745f6c61 	.word	0x745f6c61
  407adc:	72656d69 	.word	0x72656d69
  407ae0:	0000632e 	.word	0x0000632e
  407ae4:	682f2e2e 	.word	0x682f2e2e
  407ae8:	732f6c61 	.word	0x732f6c61
  407aec:	682f6372 	.word	0x682f6372
  407af0:	755f6c61 	.word	0x755f6c61
  407af4:	74726173 	.word	0x74726173
  407af8:	6e79735f 	.word	0x6e79735f
  407afc:	00632e63 	.word	0x00632e63
  407b00:	682f2e2e 	.word	0x682f2e2e
  407b04:	752f6c61 	.word	0x752f6c61
  407b08:	736c6974 	.word	0x736c6974
  407b0c:	6372732f 	.word	0x6372732f
  407b10:	6974752f 	.word	0x6974752f
  407b14:	6c5f736c 	.word	0x6c5f736c
  407b18:	2e747369 	.word	0x2e747369
  407b1c:	00000063 	.word	0x00000063
  407b20:	682f2e2e 	.word	0x682f2e2e
  407b24:	752f6c61 	.word	0x752f6c61
  407b28:	736c6974 	.word	0x736c6974
  407b2c:	6372732f 	.word	0x6372732f
  407b30:	6974752f 	.word	0x6974752f
  407b34:	725f736c 	.word	0x725f736c
  407b38:	62676e69 	.word	0x62676e69
  407b3c:	65666675 	.word	0x65666675
  407b40:	00632e72 	.word	0x00632e72

00407b44 <_afecs>:
  407b44:	00000000 2f84310b 23000000 ffffffff     .....1./...#....
  407b54:	0000ffff 00000000 00000000 00000000     ................
  407b64:	0000010c 00000000 00000000 00000000     ................
  407b74:	00000000 00000200 00000200 00000200     ................
  407b84:	00000200 00000200 00000200 00000200     ................
  407b94:	00000200 00000200 00000200 00000200     ................
  407ba4:	00000200 00000001 2f84310b 23000000     .........1./...#
  407bb4:	ffffffff 0000ffff 00000000 00000000     ................
  407bc4:	00000000 0000010c 00000000 00000000     ................
	...
  407bdc:	00000200 00000200 00000200 00000200     ................
  407bec:	00000200 00000200 00000200 00000200     ................
  407bfc:	00000200 00000200 00000200 00000200     ................
  407c0c:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  407c1c:	63656661 0000632e                       afec.c..

00407c24 <_ext_irq>:
  407c24:	00000000 00000024 00000000 00000000     ....$...........
	...
  407c40:	00000001 00002000 00002000 00002000     ..... ... ... ..
  407c50:	00000000 00002000 00000000 00000003     ..... ..........
  407c60:	00080000 00000000 00000000 00000000     ................
	...

00407c78 <_pio_irq_n>:
  407c78:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  407c88:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  407c98:	00000000                                ....

00407c9c <_pwms>:
  407c9c:	40020000 0000001f 00010005 00000001     ...@............
  407cac:	00000001 000000ff 00000000 00000004     ................
	...
  407cc8:	00000002 00407d24 00000001 2040038c     ....$}@.......@ 
  407cd8:	4005c000 0000003c 00010005 00000001     ...@<...........
  407ce8:	00000001 000000ff 00000000 00000004     ................
	...
  407d04:	00000001 00407d14 00000001 20400380     .....}@.......@ 

00407d14 <_ch_cfg1>:
  407d14:	00000000 0000010b 000003e8 00000200     ................

00407d24 <_ch_cfg0>:
  407d24:	00000000 0000010b 000003e8 00000200     ................
  407d34:	00000002 0000010b 000003e8 00000200     ................
  407d44:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  407d54:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  407d64:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00407d70 <_usarts>:
  407d70:	00000001 001008c0 000100f4 682f2e2e     ............../h
  407d80:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  407d90:	632e7472 00000000                       rt.c....

00407d98 <_cfgs>:
  407d98:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  407da8:	00000040 00000000 00000040 00000000     @.......@.......
  407db8:	00000040 00000000 00000040 00000000     @.......@.......
  407dc8:	00000040 00000000 00000040 00000000     @.......@.......
  407dd8:	00000040 00000000 00000040 00000000     @.......@.......
  407de8:	00000040 00000000 00000040 00000000     @.......@.......
  407df8:	00000040 00000000 00000040 00000000     @.......@.......
  407e08:	00000040 00000000 00000040 00000000     @.......@.......
  407e18:	00000040 00000000 00000040 00000000     @.......@.......
  407e28:	00000040 00000000 00000040 00000000     @.......@.......
  407e38:	00000040 00000000 00000040 00000000     @.......@.......
  407e48:	00000040 00000000 00000040 00000000     @.......@.......
  407e58:	74696e49 65746169 000a2064 72617453     Initiated ..Star
  407e68:	676e6974 61204420 20736978 67696c61     ting D axis alig
  407e78:	6e656d6e 000a2074 696e6946 64656873     nment ..Finished
  407e88:	61204420 20736978 67696c61 6e656d6e      D axis alignmen
  407e98:	000a2074 72636e49 69736165 5020676e     t ..Increasing P
  407ea8:	0a204d57 00000000 61207156 2d206d69     WM .....Vq aim -
  407eb8:	20662520 0000000a                        %f ....

00407ec0 <npio2_hw>:
  407ec0:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  407ed0:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  407ee0:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  407ef0:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  407f00:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  407f10:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  407f20:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  407f30:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00407f40 <two_over_pi>:
  407f40:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  407f50:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  407f60:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  407f70:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  407f80:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  407f90:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  407fa0:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  407fb0:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  407fc0:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  407fd0:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  407fe0:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  407ff0:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  408000:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  408010:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  408020:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  408030:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  408040:	0060e27b 00c08c6b                       {.`.k...

00408048 <PIo2>:
  408048:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  408058:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  408068:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  408078:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00408088 <init_jk>:
  408088:	00000002 00000003 00000004 00000006     ................

00408098 <_global_impure_ptr>:
  408098:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  4080a8:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  4080b8:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  4080c8:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  4080d8:	4e614e00 00000000                       .NaN....

004080e0 <__sf_fake_stderr>:
	...

00408100 <__sf_fake_stdin>:
	...

00408120 <__sf_fake_stdout>:
	...

00408140 <__mprec_bigtens>:
  408140:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  408150:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408160:	7f73bf3c 75154fdd                       <.s..O.u

00408168 <__mprec_tens>:
  408168:	00000000 3ff00000 00000000 40240000     .......?......$@
  408178:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408188:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408198:	00000000 412e8480 00000000 416312d0     .......A......cA
  4081a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4081b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4081c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4081d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4081e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4081f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408208:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408218:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408228:	79d99db4 44ea7843                       ...yCx.D

00408230 <p05.6047>:
  408230:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  408240:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  408250:	5849534f 00002e00                                OSIX...

00408257 <_ctype_>:
  408257:	20202000 20202020 28282020 20282828     .         ((((( 
  408267:	20202020 20202020 20202020 20202020                     
  408277:	10108820 10101010 10101010 10101010      ...............
  408287:	04040410 04040404 10040404 10101010     ................
  408297:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4082a7:	01010101 01010101 01010101 10101010     ................
  4082b7:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4082c7:	02020202 02020202 02020202 10101010     ................
  4082d7:	00000020 00000000 00000000 00000000      ...............
	...

00408358 <_init>:
  408358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40835a:	bf00      	nop
  40835c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40835e:	bc08      	pop	{r3}
  408360:	469e      	mov	lr, r3
  408362:	4770      	bx	lr

00408364 <__init_array_start>:
  408364:	0040018d 	.word	0x0040018d

00408368 <_fini>:
  408368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40836a:	bf00      	nop
  40836c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40836e:	bc08      	pop	{r3}
  408370:	469e      	mov	lr, r3
  408372:	4770      	bx	lr

00408374 <__fini_array_start>:
  408374:	00400169 	.word	0x00400169
