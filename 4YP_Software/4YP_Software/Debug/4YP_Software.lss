
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ab0  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  00405ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000494  20400218  00405cc8  00020218  2**2
                  ALLOC
  3 .heap         00000204  204006ac  0040615c  00020218  2**0
                  ALLOC
  4 .stack        00000400  204008b0  00406360  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   00023f26  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004ab9  00000000  00000000  000441c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000b791  00000000  00000000  00048c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d28  00000000  00000000  0005440f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b60  00000000  00000000  00055137  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00046368  00000000  00000000  00055c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001cac4  00000000  00000000  0009bfff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001558ee  00000000  00000000  000b8ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002e0c  00000000  00000000  0020e3b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b0 0c 40 20 f5 03 40 00 f1 03 40 00 f1 03 40 00     ..@ ..@...@...@.
  400010:	f1 03 40 00 f1 03 40 00 f1 03 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	f1 03 40 00 f1 03 40 00 00 00 00 00 f1 03 40 00     ..@...@.......@.
  40003c:	f1 03 40 00 f1 03 40 00 f1 03 40 00 f1 03 40 00     ..@...@...@...@.
  40004c:	f1 03 40 00 f1 03 40 00 f1 03 40 00 f1 03 40 00     ..@...@...@...@.
  40005c:	f1 03 40 00 f1 03 40 00 00 00 00 00 5d 17 40 00     ..@...@.....].@.
  40006c:	f1 03 40 00 f1 03 40 00 f1 03 40 00 f1 03 40 00     ..@...@...@...@.
  40007c:	f1 03 40 00 51 17 40 00 f1 03 40 00 f1 03 40 00     ..@.Q.@...@...@.
  40008c:	f1 03 40 00 f1 03 40 00 f1 03 40 00 f1 03 40 00     ..@...@...@...@.
  40009c:	65 1c 40 00 f1 03 40 00 f1 03 40 00 f1 03 40 00     e.@...@...@...@.
  4000ac:	f1 03 40 00 f1 03 40 00 31 13 40 00 f1 03 40 00     ..@...@.1.@...@.
  4000bc:	81 03 40 00 f1 03 40 00 f1 03 40 00 f1 03 40 00     ..@...@...@...@.
  4000cc:	f1 03 40 00 f1 03 40 00 21 15 40 00 f1 03 40 00     ..@...@.!.@...@.
  4000dc:	f1 03 40 00 45 13 40 00 f1 03 40 00 f1 03 40 00     ..@.E.@...@...@.
  4000ec:	f1 03 40 00 f1 03 40 00 f1 03 40 00 f1 03 40 00     ..@...@...@...@.
  4000fc:	f1 03 40 00 f1 03 40 00 f1 03 40 00 79 1c 40 00     ..@...@...@.y.@.
  40010c:	f1 03 40 00 f1 03 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 f1 03 40 00 f1 03 40 00 d5 1f 40 00     ......@...@...@.
  40012c:	f1 03 40 00 f1 03 40 00 f1 03 40 00 f1 03 40 00     ..@...@...@...@.
  40013c:	f1 03 40 00 f1 03 40 00 f1 03 40 00 f1 03 40 00     ..@...@...@...@.
  40014c:	f1 03 40 00 f1 03 40 00 f1 03 40 00 f1 03 40 00     ..@...@...@...@.
  40015c:	f1 03 40 00 f1 03 40 00 f1 03 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	00405ab0 	.word	0x00405ab0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00405ab0 	.word	0x00405ab0
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	00405ab0 	.word	0x00405ab0
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	004008c5 	.word	0x004008c5
  4001e4:	00402195 	.word	0x00402195

004001e8 <dma_adc_1_callback>:
	//just for testing
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3],\
		(int)dma_adc_0_buff[4],(int)dma_adc_0_buff[5]);
}

static void dma_adc_1_callback(struct _dma_resource *resource){
  4001e8:	b510      	push	{r4, lr}
  4001ea:	b082      	sub	sp, #8
	//just for testing
	printf("interrupt - ADC 1 - %i %i %i %i  \n", (int)dma_adc_1_buff[0],(int)dma_adc_1_buff[1],(int)dma_adc_1_buff[2],(int)dma_adc_1_buff[3]);
  4001ec:	4805      	ldr	r0, [pc, #20]	; (400204 <dma_adc_1_callback+0x1c>)
  4001ee:	6801      	ldr	r1, [r0, #0]
  4001f0:	6842      	ldr	r2, [r0, #4]
  4001f2:	6883      	ldr	r3, [r0, #8]
  4001f4:	68c0      	ldr	r0, [r0, #12]
  4001f6:	9000      	str	r0, [sp, #0]
  4001f8:	4803      	ldr	r0, [pc, #12]	; (400208 <dma_adc_1_callback+0x20>)
  4001fa:	4c04      	ldr	r4, [pc, #16]	; (40020c <dma_adc_1_callback+0x24>)
  4001fc:	47a0      	blx	r4
}
  4001fe:	b002      	add	sp, #8
  400200:	bd10      	pop	{r4, pc}
  400202:	bf00      	nop
  400204:	20400234 	.word	0x20400234
  400208:	004053c8 	.word	0x004053c8
  40020c:	004033d5 	.word	0x004033d5

00400210 <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  400210:	b530      	push	{r4, r5, lr}
  400212:	b085      	sub	sp, #20
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3],\
  400214:	4807      	ldr	r0, [pc, #28]	; (400234 <dma_adc_0_callback+0x24>)
  400216:	6901      	ldr	r1, [r0, #16]
  400218:	6942      	ldr	r2, [r0, #20]
  40021a:	6983      	ldr	r3, [r0, #24]
  40021c:	69c4      	ldr	r4, [r0, #28]
		(int)dma_adc_0_buff[4],(int)dma_adc_0_buff[5]);
  40021e:	6a05      	ldr	r5, [r0, #32]
  400220:	6a40      	ldr	r0, [r0, #36]	; 0x24
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3],\
  400222:	9002      	str	r0, [sp, #8]
  400224:	9501      	str	r5, [sp, #4]
  400226:	9400      	str	r4, [sp, #0]
  400228:	4803      	ldr	r0, [pc, #12]	; (400238 <dma_adc_0_callback+0x28>)
  40022a:	4c04      	ldr	r4, [pc, #16]	; (40023c <dma_adc_0_callback+0x2c>)
  40022c:	47a0      	blx	r4
}
  40022e:	b005      	add	sp, #20
  400230:	bd30      	pop	{r4, r5, pc}
  400232:	bf00      	nop
  400234:	20400234 	.word	0x20400234
  400238:	004053ec 	.word	0x004053ec
  40023c:	004033d5 	.word	0x004033d5

00400240 <dma_adc_init>:

void dma_adc_init(void){
  400240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	//channel 0 for ADC 0
	
	//source address = AFEC 0->LCDR
	//_dma_set_source_address(0,(void *) ((Afec *)((&ADC_0)->device.hw) + AFEC_LCDR_OFFSET));
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  400244:	4919      	ldr	r1, [pc, #100]	; (4002ac <dma_adc_init+0x6c>)
  400246:	2000      	movs	r0, #0
  400248:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4002cc <dma_adc_init+0x8c>
  40024c:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  40024e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4002d0 <dma_adc_init+0x90>
  400252:	f108 0110 	add.w	r1, r8, #16
  400256:	2000      	movs	r0, #0
  400258:	4f15      	ldr	r7, [pc, #84]	; (4002b0 <dma_adc_init+0x70>)
  40025a:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  40025c:	2118      	movs	r1, #24
  40025e:	2000      	movs	r0, #0
  400260:	4d14      	ldr	r5, [pc, #80]	; (4002b4 <dma_adc_init+0x74>)
  400262:	47a8      	blx	r5
	
	//set callback function
	struct _dma_resource **res0;
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  400264:	2100      	movs	r1, #0
  400266:	460c      	mov	r4, r1
  400268:	4608      	mov	r0, r1
  40026a:	4e13      	ldr	r6, [pc, #76]	; (4002b8 <dma_adc_init+0x78>)
  40026c:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  40026e:	6823      	ldr	r3, [r4, #0]
  400270:	4a12      	ldr	r2, [pc, #72]	; (4002bc <dma_adc_init+0x7c>)
  400272:	601a      	str	r2, [r3, #0]
	
	//enable interrupt on successful transfer
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400274:	2201      	movs	r2, #1
  400276:	4621      	mov	r1, r4
  400278:	4620      	mov	r0, r4
  40027a:	4c11      	ldr	r4, [pc, #68]	; (4002c0 <dma_adc_init+0x80>)
  40027c:	47a0      	blx	r4
	
	//channel 0 for ADC 0
	
	//source address = AFEC 1->LCDR
	//_dma_set_source_address(0,(void *) ((Afec *)((&ADC_0)->device.hw) + AFEC_LCDR_OFFSET));
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  40027e:	4911      	ldr	r1, [pc, #68]	; (4002c4 <dma_adc_init+0x84>)
  400280:	2001      	movs	r0, #1
  400282:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400284:	4641      	mov	r1, r8
  400286:	2001      	movs	r0, #1
  400288:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  40028a:	2110      	movs	r1, #16
  40028c:	2001      	movs	r0, #1
  40028e:	47a8      	blx	r5
	
	//set callback function
	struct _dma_resource **res1;
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  400290:	2101      	movs	r1, #1
  400292:	2500      	movs	r5, #0
  400294:	4628      	mov	r0, r5
  400296:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  400298:	682b      	ldr	r3, [r5, #0]
  40029a:	4a0b      	ldr	r2, [pc, #44]	; (4002c8 <dma_adc_init+0x88>)
  40029c:	601a      	str	r2, [r3, #0]
	
	//enable interrupt on successful transfer
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  40029e:	2201      	movs	r2, #1
  4002a0:	4629      	mov	r1, r5
  4002a2:	4610      	mov	r0, r2
  4002a4:	47a0      	blx	r4
  4002a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4002aa:	bf00      	nop
  4002ac:	4003c020 	.word	0x4003c020
  4002b0:	00401f19 	.word	0x00401f19
  4002b4:	00401f39 	.word	0x00401f39
  4002b8:	00401f69 	.word	0x00401f69
  4002bc:	00400211 	.word	0x00400211
  4002c0:	00401f7d 	.word	0x00401f7d
  4002c4:	40064020 	.word	0x40064020
  4002c8:	004001e9 	.word	0x004001e9
  4002cc:	00401f29 	.word	0x00401f29
  4002d0:	20400234 	.word	0x20400234

004002d4 <dma_adc_0_enable_for_one_transaction>:
	//_dma_set_irq_state(DMA_ADC_1_CHANNEL,DMA_TRANSFER_ERROR_CB,true);
		
	
}

void dma_adc_0_enable_for_one_transaction(void){
  4002d4:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  4002d6:	4906      	ldr	r1, [pc, #24]	; (4002f0 <dma_adc_0_enable_for_one_transaction+0x1c>)
  4002d8:	2000      	movs	r0, #0
  4002da:	4b06      	ldr	r3, [pc, #24]	; (4002f4 <dma_adc_0_enable_for_one_transaction+0x20>)
  4002dc:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  4002de:	2118      	movs	r1, #24
  4002e0:	2000      	movs	r0, #0
  4002e2:	4b05      	ldr	r3, [pc, #20]	; (4002f8 <dma_adc_0_enable_for_one_transaction+0x24>)
  4002e4:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  4002e6:	2101      	movs	r1, #1
  4002e8:	2000      	movs	r0, #0
  4002ea:	4b04      	ldr	r3, [pc, #16]	; (4002fc <dma_adc_0_enable_for_one_transaction+0x28>)
  4002ec:	4798      	blx	r3
  4002ee:	bd08      	pop	{r3, pc}
  4002f0:	20400244 	.word	0x20400244
  4002f4:	00401f19 	.word	0x00401f19
  4002f8:	00401f39 	.word	0x00401f39
  4002fc:	00401f51 	.word	0x00401f51

00400300 <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  400300:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400302:	4906      	ldr	r1, [pc, #24]	; (40031c <dma_adc_1_enable_for_one_transaction+0x1c>)
  400304:	2001      	movs	r0, #1
  400306:	4b06      	ldr	r3, [pc, #24]	; (400320 <dma_adc_1_enable_for_one_transaction+0x20>)
  400308:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  40030a:	2110      	movs	r1, #16
  40030c:	2001      	movs	r0, #1
  40030e:	4b05      	ldr	r3, [pc, #20]	; (400324 <dma_adc_1_enable_for_one_transaction+0x24>)
  400310:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  400312:	2101      	movs	r1, #1
  400314:	4608      	mov	r0, r1
  400316:	4b04      	ldr	r3, [pc, #16]	; (400328 <dma_adc_1_enable_for_one_transaction+0x28>)
  400318:	4798      	blx	r3
  40031a:	bd08      	pop	{r3, pc}
  40031c:	20400234 	.word	0x20400234
  400320:	00401f19 	.word	0x00401f19
  400324:	00401f39 	.word	0x00401f39
  400328:	00401f51 	.word	0x00401f51

0040032c <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  40032c:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  40032e:	4d11      	ldr	r5, [pc, #68]	; (400374 <adc_enable_all+0x48>)
  400330:	2108      	movs	r1, #8
  400332:	4628      	mov	r0, r5
  400334:	4c10      	ldr	r4, [pc, #64]	; (400378 <adc_enable_all+0x4c>)
  400336:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  400338:	2102      	movs	r1, #2
  40033a:	4628      	mov	r0, r5
  40033c:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  40033e:	4e0f      	ldr	r6, [pc, #60]	; (40037c <adc_enable_all+0x50>)
  400340:	2101      	movs	r1, #1
  400342:	4630      	mov	r0, r6
  400344:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  400346:	2106      	movs	r1, #6
  400348:	4630      	mov	r0, r6
  40034a:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  40034c:	2105      	movs	r1, #5
  40034e:	4630      	mov	r0, r6
  400350:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  400352:	2106      	movs	r1, #6
  400354:	4628      	mov	r0, r5
  400356:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  400358:	210a      	movs	r1, #10
  40035a:	4628      	mov	r0, r5
  40035c:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  40035e:	2100      	movs	r1, #0
  400360:	4630      	mov	r0, r6
  400362:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  400364:	2105      	movs	r1, #5
  400366:	4628      	mov	r0, r5
  400368:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  40036a:	2100      	movs	r1, #0
  40036c:	4628      	mov	r0, r5
  40036e:	47a0      	blx	r4
  400370:	bd70      	pop	{r4, r5, r6, pc}
  400372:	bf00      	nop
  400374:	204005a4 	.word	0x204005a4
  400378:	00400b9d 	.word	0x00400b9d
  40037c:	2040067c 	.word	0x2040067c

00400380 <PWM0_Handler>:
#include <hpl_pwm.h>
#include <hpl_pwm_config.h>



void PWM0_Handler(void){
  400380:	4770      	bx	lr
	...

00400384 <pwm_enable_all>:



//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400384:	b570      	push	{r4, r5, r6, lr}
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  400386:	2201      	movs	r2, #1
  400388:	4b13      	ldr	r3, [pc, #76]	; (4003d8 <pwm_enable_all+0x54>)
  40038a:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40038c:	4b13      	ldr	r3, [pc, #76]	; (4003dc <pwm_enable_all+0x58>)
  40038e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400396:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40039a:	f3bf 8f6f 	isb	sy
  40039e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4003a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4003a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003aa:	f3bf 8f6f 	isb	sy
	NVIC_DisableIRQ(PWM1_IRQn);
	
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  4003ae:	4c0c      	ldr	r4, [pc, #48]	; (4003e0 <pwm_enable_all+0x5c>)
  4003b0:	4620      	mov	r0, r4
  4003b2:	4e0c      	ldr	r6, [pc, #48]	; (4003e4 <pwm_enable_all+0x60>)
  4003b4:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  4003b6:	4d0c      	ldr	r5, [pc, #48]	; (4003e8 <pwm_enable_all+0x64>)
  4003b8:	4628      	mov	r0, r5
  4003ba:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  4003bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4003c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4003c4:	4620      	mov	r0, r4
  4003c6:	4c09      	ldr	r4, [pc, #36]	; (4003ec <pwm_enable_all+0x68>)
  4003c8:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD>>1);
  4003ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4003ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4003d2:	4628      	mov	r0, r5
  4003d4:	47a0      	blx	r4
  4003d6:	bd70      	pop	{r4, r5, r6, pc}
  4003d8:	40020000 	.word	0x40020000
  4003dc:	e000e100 	.word	0xe000e100
  4003e0:	204004bc 	.word	0x204004bc
  4003e4:	00400d85 	.word	0x00400d85
  4003e8:	20400660 	.word	0x20400660
  4003ec:	00400dc1 	.word	0x00400dc1

004003f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4003f0:	e7fe      	b.n	4003f0 <Dummy_Handler>
	...

004003f4 <Reset_Handler>:
{
  4003f4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4003f6:	4b10      	ldr	r3, [pc, #64]	; (400438 <Reset_Handler+0x44>)
  4003f8:	4a10      	ldr	r2, [pc, #64]	; (40043c <Reset_Handler+0x48>)
  4003fa:	429a      	cmp	r2, r3
  4003fc:	d009      	beq.n	400412 <Reset_Handler+0x1e>
  4003fe:	4b0e      	ldr	r3, [pc, #56]	; (400438 <Reset_Handler+0x44>)
  400400:	4a0e      	ldr	r2, [pc, #56]	; (40043c <Reset_Handler+0x48>)
  400402:	e003      	b.n	40040c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400404:	6811      	ldr	r1, [r2, #0]
  400406:	6019      	str	r1, [r3, #0]
  400408:	3304      	adds	r3, #4
  40040a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  40040c:	490c      	ldr	r1, [pc, #48]	; (400440 <Reset_Handler+0x4c>)
  40040e:	428b      	cmp	r3, r1
  400410:	d3f8      	bcc.n	400404 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400412:	4b0c      	ldr	r3, [pc, #48]	; (400444 <Reset_Handler+0x50>)
  400414:	e002      	b.n	40041c <Reset_Handler+0x28>
                *pDest++ = 0;
  400416:	2200      	movs	r2, #0
  400418:	601a      	str	r2, [r3, #0]
  40041a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40041c:	4a0a      	ldr	r2, [pc, #40]	; (400448 <Reset_Handler+0x54>)
  40041e:	4293      	cmp	r3, r2
  400420:	d3f9      	bcc.n	400416 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400422:	4a0a      	ldr	r2, [pc, #40]	; (40044c <Reset_Handler+0x58>)
  400424:	4b0a      	ldr	r3, [pc, #40]	; (400450 <Reset_Handler+0x5c>)
  400426:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40042a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40042c:	4b09      	ldr	r3, [pc, #36]	; (400454 <Reset_Handler+0x60>)
  40042e:	4798      	blx	r3
        main();
  400430:	4b09      	ldr	r3, [pc, #36]	; (400458 <Reset_Handler+0x64>)
  400432:	4798      	blx	r3
  400434:	e7fe      	b.n	400434 <Reset_Handler+0x40>
  400436:	bf00      	nop
  400438:	20400000 	.word	0x20400000
  40043c:	00405ab0 	.word	0x00405ab0
  400440:	20400218 	.word	0x20400218
  400444:	20400218 	.word	0x20400218
  400448:	204006ac 	.word	0x204006ac
  40044c:	e000ed00 	.word	0xe000ed00
  400450:	00400000 	.word	0x00400000
  400454:	00402aa9 	.word	0x00402aa9
  400458:	00402041 	.word	0x00402041

0040045c <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  40045c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40045e:	b085      	sub	sp, #20
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400460:	4b20      	ldr	r3, [pc, #128]	; (4004e4 <ADC_1_init+0x88>)
  400462:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400466:	f413 7f80 	tst.w	r3, #256	; 0x100
  40046a:	d104      	bne.n	400476 <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40046c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400470:	4b1c      	ldr	r3, [pc, #112]	; (4004e4 <ADC_1_init+0x88>)
  400472:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  400476:	4d1c      	ldr	r5, [pc, #112]	; (4004e8 <ADC_1_init+0x8c>)
  400478:	4c1c      	ldr	r4, [pc, #112]	; (4004ec <ADC_1_init+0x90>)
  40047a:	2600      	movs	r6, #0
  40047c:	9602      	str	r6, [sp, #8]
  40047e:	4b1c      	ldr	r3, [pc, #112]	; (4004f0 <ADC_1_init+0x94>)
  400480:	9301      	str	r3, [sp, #4]
  400482:	2304      	movs	r3, #4
  400484:	9300      	str	r3, [sp, #0]
  400486:	2306      	movs	r3, #6
  400488:	462a      	mov	r2, r5
  40048a:	491a      	ldr	r1, [pc, #104]	; (4004f4 <ADC_1_init+0x98>)
  40048c:	4620      	mov	r0, r4
  40048e:	4f1a      	ldr	r7, [pc, #104]	; (4004f8 <ADC_1_init+0x9c>)
  400490:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  400492:	2310      	movs	r3, #16
  400494:	f105 0208 	add.w	r2, r5, #8
  400498:	4631      	mov	r1, r6
  40049a:	4620      	mov	r0, r4
  40049c:	4e17      	ldr	r6, [pc, #92]	; (4004fc <ADC_1_init+0xa0>)
  40049e:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  4004a0:	2310      	movs	r3, #16
  4004a2:	f105 0218 	add.w	r2, r5, #24
  4004a6:	2101      	movs	r1, #1
  4004a8:	4620      	mov	r0, r4
  4004aa:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  4004ac:	2310      	movs	r3, #16
  4004ae:	f105 0228 	add.w	r2, r5, #40	; 0x28
  4004b2:	2105      	movs	r1, #5
  4004b4:	4620      	mov	r0, r4
  4004b6:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  4004b8:	2310      	movs	r3, #16
  4004ba:	f105 0238 	add.w	r2, r5, #56	; 0x38
  4004be:	2106      	movs	r1, #6
  4004c0:	4620      	mov	r0, r4
  4004c2:	47b0      	blx	r6
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  4004c4:	2202      	movs	r2, #2
  4004c6:	4b0e      	ldr	r3, [pc, #56]	; (400500 <ADC_1_init+0xa4>)
  4004c8:	601a      	str	r2, [r3, #0]
  4004ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4004ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4004d2:	601a      	str	r2, [r3, #0]
  4004d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4004d8:	601a      	str	r2, [r3, #0]
  4004da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4004de:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  4004e0:	b005      	add	sp, #20
  4004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4004e4:	400e0600 	.word	0x400e0600
  4004e8:	2040025c 	.word	0x2040025c
  4004ec:	2040067c 	.word	0x2040067c
  4004f0:	2040051c 	.word	0x2040051c
  4004f4:	40064000 	.word	0x40064000
  4004f8:	00400a3d 	.word	0x00400a3d
  4004fc:	00400ae5 	.word	0x00400ae5
  400500:	400e1000 	.word	0x400e1000

00400504 <ADC_0_init>:
{
  400504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400508:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40050a:	4b2a      	ldr	r3, [pc, #168]	; (4005b4 <ADC_0_init+0xb0>)
  40050c:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40050e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400512:	d103      	bne.n	40051c <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400514:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400518:	4b26      	ldr	r3, [pc, #152]	; (4005b4 <ADC_0_init+0xb0>)
  40051a:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  40051c:	4d26      	ldr	r5, [pc, #152]	; (4005b8 <ADC_0_init+0xb4>)
  40051e:	4c27      	ldr	r4, [pc, #156]	; (4005bc <ADC_0_init+0xb8>)
  400520:	2600      	movs	r6, #0
  400522:	9602      	str	r6, [sp, #8]
  400524:	4b26      	ldr	r3, [pc, #152]	; (4005c0 <ADC_0_init+0xbc>)
  400526:	9301      	str	r3, [sp, #4]
  400528:	2706      	movs	r7, #6
  40052a:	9700      	str	r7, [sp, #0]
  40052c:	230a      	movs	r3, #10
  40052e:	f105 0248 	add.w	r2, r5, #72	; 0x48
  400532:	4924      	ldr	r1, [pc, #144]	; (4005c4 <ADC_0_init+0xc0>)
  400534:	4620      	mov	r0, r4
  400536:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4005d4 <ADC_0_init+0xd0>
  40053a:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  40053c:	2310      	movs	r3, #16
  40053e:	f105 0254 	add.w	r2, r5, #84	; 0x54
  400542:	4631      	mov	r1, r6
  400544:	4620      	mov	r0, r4
  400546:	4e20      	ldr	r6, [pc, #128]	; (4005c8 <ADC_0_init+0xc4>)
  400548:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  40054a:	2310      	movs	r3, #16
  40054c:	f105 0264 	add.w	r2, r5, #100	; 0x64
  400550:	2102      	movs	r1, #2
  400552:	4620      	mov	r0, r4
  400554:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  400556:	2310      	movs	r3, #16
  400558:	f105 0274 	add.w	r2, r5, #116	; 0x74
  40055c:	2105      	movs	r1, #5
  40055e:	4620      	mov	r0, r4
  400560:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  400562:	2310      	movs	r3, #16
  400564:	f105 0284 	add.w	r2, r5, #132	; 0x84
  400568:	4639      	mov	r1, r7
  40056a:	4620      	mov	r0, r4
  40056c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  40056e:	2310      	movs	r3, #16
  400570:	f105 0294 	add.w	r2, r5, #148	; 0x94
  400574:	2108      	movs	r1, #8
  400576:	4620      	mov	r0, r4
  400578:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  40057a:	2310      	movs	r3, #16
  40057c:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  400580:	210a      	movs	r1, #10
  400582:	4620      	mov	r0, r4
  400584:	47b0      	blx	r6
  400586:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40058a:	4b10      	ldr	r3, [pc, #64]	; (4005cc <ADC_0_init+0xc8>)
  40058c:	601a      	str	r2, [r3, #0]
  40058e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400592:	2208      	movs	r2, #8
  400594:	601a      	str	r2, [r3, #0]
  400596:	2204      	movs	r2, #4
  400598:	601a      	str	r2, [r3, #0]
  40059a:	4a0d      	ldr	r2, [pc, #52]	; (4005d0 <ADC_0_init+0xcc>)
  40059c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4005a0:	6011      	str	r1, [r2, #0]
  4005a2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4005a6:	6011      	str	r1, [r2, #0]
  4005a8:	2201      	movs	r2, #1
  4005aa:	601a      	str	r2, [r3, #0]
}
  4005ac:	b004      	add	sp, #16
  4005ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005b2:	bf00      	nop
  4005b4:	400e0600 	.word	0x400e0600
  4005b8:	2040025c 	.word	0x2040025c
  4005bc:	204005a4 	.word	0x204005a4
  4005c0:	204005d0 	.word	0x204005d0
  4005c4:	4003c000 	.word	0x4003c000
  4005c8:	00400ae5 	.word	0x00400ae5
  4005cc:	400e1400 	.word	0x400e1400
  4005d0:	400e0e00 	.word	0x400e0e00
  4005d4:	00400a3d 	.word	0x00400a3d

004005d8 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  4005d8:	4b04      	ldr	r3, [pc, #16]	; (4005ec <EXTERNAL_IRQ_D_init+0x14>)
  4005da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4005de:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  4005e0:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  4005e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4005e6:	601a      	str	r2, [r3, #0]
  4005e8:	4770      	bx	lr
  4005ea:	bf00      	nop
  4005ec:	400e1400 	.word	0x400e1400

004005f0 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4005f0:	4b0a      	ldr	r3, [pc, #40]	; (40061c <EXTERNAL_IRQ_A_init+0x2c>)
  4005f2:	2204      	movs	r2, #4
  4005f4:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4005f6:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4005f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4005fc:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4005fe:	2220      	movs	r2, #32
  400600:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400602:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400604:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400608:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40060a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40060e:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400610:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400612:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400616:	601a      	str	r2, [r3, #0]
  400618:	4770      	bx	lr
  40061a:	bf00      	nop
  40061c:	400e0e00 	.word	0x400e0e00

00400620 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400620:	4b16      	ldr	r3, [pc, #88]	; (40067c <PWM_0_PORT_init+0x5c>)
  400622:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400624:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400628:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40062a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40062c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  400630:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400632:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400636:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400638:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40063a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  40063e:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400640:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400642:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400646:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40064c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40064e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400650:	f022 0202 	bic.w	r2, r2, #2
  400654:	671a      	str	r2, [r3, #112]	; 0x70
  400656:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400658:	f022 0202 	bic.w	r2, r2, #2
  40065c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40065e:	2202      	movs	r2, #2
  400660:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400664:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400668:	671a      	str	r2, [r3, #112]	; 0x70
  40066a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40066c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400670:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400676:	605a      	str	r2, [r3, #4]
  400678:	4770      	bx	lr
  40067a:	bf00      	nop
  40067c:	400e0e00 	.word	0x400e0e00

00400680 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400680:	4b04      	ldr	r3, [pc, #16]	; (400694 <PWM_0_CLOCK_init+0x14>)
  400682:	699b      	ldr	r3, [r3, #24]
  400684:	2b00      	cmp	r3, #0
  400686:	db03      	blt.n	400690 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400688:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40068c:	4b01      	ldr	r3, [pc, #4]	; (400694 <PWM_0_CLOCK_init+0x14>)
  40068e:	611a      	str	r2, [r3, #16]
  400690:	4770      	bx	lr
  400692:	bf00      	nop
  400694:	400e0600 	.word	0x400e0600

00400698 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400698:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  40069a:	4b06      	ldr	r3, [pc, #24]	; (4006b4 <PWM_0_init+0x1c>)
  40069c:	4798      	blx	r3
	PWM_0_PORT_init();
  40069e:	4b06      	ldr	r3, [pc, #24]	; (4006b8 <PWM_0_init+0x20>)
  4006a0:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  4006a2:	4b06      	ldr	r3, [pc, #24]	; (4006bc <PWM_0_init+0x24>)
  4006a4:	4798      	blx	r3
  4006a6:	4602      	mov	r2, r0
  4006a8:	4905      	ldr	r1, [pc, #20]	; (4006c0 <PWM_0_init+0x28>)
  4006aa:	4806      	ldr	r0, [pc, #24]	; (4006c4 <PWM_0_init+0x2c>)
  4006ac:	4b06      	ldr	r3, [pc, #24]	; (4006c8 <PWM_0_init+0x30>)
  4006ae:	4798      	blx	r3
  4006b0:	bd08      	pop	{r3, pc}
  4006b2:	bf00      	nop
  4006b4:	00400681 	.word	0x00400681
  4006b8:	00400621 	.word	0x00400621
  4006bc:	00401a89 	.word	0x00401a89
  4006c0:	40020000 	.word	0x40020000
  4006c4:	204004bc 	.word	0x204004bc
  4006c8:	00400d41 	.word	0x00400d41

004006cc <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4006cc:	4b0c      	ldr	r3, [pc, #48]	; (400700 <PWM_1_PORT_init+0x34>)
  4006ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4006d4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4006d6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4006dc:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4006de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4006e2:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4006e4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4006e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006ea:	f042 0201 	orr.w	r2, r2, #1
  4006ee:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4006f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006f2:	f022 0201 	bic.w	r2, r2, #1
  4006f6:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4006f8:	2201      	movs	r2, #1
  4006fa:	605a      	str	r2, [r3, #4]
  4006fc:	4770      	bx	lr
  4006fe:	bf00      	nop
  400700:	400e0e00 	.word	0x400e0e00

00400704 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400704:	4b05      	ldr	r3, [pc, #20]	; (40071c <PWM_1_CLOCK_init+0x18>)
  400706:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40070a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  40070e:	d104      	bne.n	40071a <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400714:	4b01      	ldr	r3, [pc, #4]	; (40071c <PWM_1_CLOCK_init+0x18>)
  400716:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40071a:	4770      	bx	lr
  40071c:	400e0600 	.word	0x400e0600

00400720 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  400720:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  400722:	4b06      	ldr	r3, [pc, #24]	; (40073c <PWM_1_init+0x1c>)
  400724:	4798      	blx	r3
	PWM_1_PORT_init();
  400726:	4b06      	ldr	r3, [pc, #24]	; (400740 <PWM_1_init+0x20>)
  400728:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  40072a:	4b06      	ldr	r3, [pc, #24]	; (400744 <PWM_1_init+0x24>)
  40072c:	4798      	blx	r3
  40072e:	4602      	mov	r2, r0
  400730:	4905      	ldr	r1, [pc, #20]	; (400748 <PWM_1_init+0x28>)
  400732:	4806      	ldr	r0, [pc, #24]	; (40074c <PWM_1_init+0x2c>)
  400734:	4b06      	ldr	r3, [pc, #24]	; (400750 <PWM_1_init+0x30>)
  400736:	4798      	blx	r3
  400738:	bd08      	pop	{r3, pc}
  40073a:	bf00      	nop
  40073c:	00400705 	.word	0x00400705
  400740:	004006cd 	.word	0x004006cd
  400744:	00401a89 	.word	0x00401a89
  400748:	4005c000 	.word	0x4005c000
  40074c:	20400660 	.word	0x20400660
  400750:	00400d41 	.word	0x00400d41

00400754 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400754:	4b06      	ldr	r3, [pc, #24]	; (400770 <ENCODER_A_PORT_init+0x1c>)
  400756:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400758:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40075c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40075e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400760:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  400764:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400766:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40076a:	605a      	str	r2, [r3, #4]
  40076c:	4770      	bx	lr
  40076e:	bf00      	nop
  400770:	400e0e00 	.word	0x400e0e00

00400774 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  400774:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400776:	4b09      	ldr	r3, [pc, #36]	; (40079c <ENCODER_A_init+0x28>)
  400778:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40077a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40077e:	d103      	bne.n	400788 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400780:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400784:	4b05      	ldr	r3, [pc, #20]	; (40079c <ENCODER_A_init+0x28>)
  400786:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  400788:	4b05      	ldr	r3, [pc, #20]	; (4007a0 <ENCODER_A_init+0x2c>)
  40078a:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  40078c:	4b05      	ldr	r3, [pc, #20]	; (4007a4 <ENCODER_A_init+0x30>)
  40078e:	4798      	blx	r3
  400790:	4602      	mov	r2, r0
  400792:	4905      	ldr	r1, [pc, #20]	; (4007a8 <ENCODER_A_init+0x34>)
  400794:	4805      	ldr	r0, [pc, #20]	; (4007ac <ENCODER_A_init+0x38>)
  400796:	4b06      	ldr	r3, [pc, #24]	; (4007b0 <ENCODER_A_init+0x3c>)
  400798:	4798      	blx	r3
  40079a:	bd08      	pop	{r3, pc}
  40079c:	400e0600 	.word	0x400e0600
  4007a0:	00400755 	.word	0x00400755
  4007a4:	00401c5f 	.word	0x00401c5f
  4007a8:	4000c000 	.word	0x4000c000
  4007ac:	20400588 	.word	0x20400588
  4007b0:	00400ea9 	.word	0x00400ea9

004007b4 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4007b4:	4b06      	ldr	r3, [pc, #24]	; (4007d0 <ENCODER_B_PORT_init+0x1c>)
  4007b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4007b8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4007bc:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4007be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007c0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  4007c4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4007c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4007ca:	605a      	str	r2, [r3, #4]
  4007cc:	4770      	bx	lr
  4007ce:	bf00      	nop
  4007d0:	400e1400 	.word	0x400e1400

004007d4 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  4007d4:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4007d6:	4b0a      	ldr	r3, [pc, #40]	; (400800 <ENCODER_B_init+0x2c>)
  4007d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4007dc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  4007e0:	d104      	bne.n	4007ec <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4007e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4007e6:	4b06      	ldr	r3, [pc, #24]	; (400800 <ENCODER_B_init+0x2c>)
  4007e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  4007ec:	4b05      	ldr	r3, [pc, #20]	; (400804 <ENCODER_B_init+0x30>)
  4007ee:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  4007f0:	4b05      	ldr	r3, [pc, #20]	; (400808 <ENCODER_B_init+0x34>)
  4007f2:	4798      	blx	r3
  4007f4:	4602      	mov	r2, r0
  4007f6:	4905      	ldr	r1, [pc, #20]	; (40080c <ENCODER_B_init+0x38>)
  4007f8:	4805      	ldr	r0, [pc, #20]	; (400810 <ENCODER_B_init+0x3c>)
  4007fa:	4b06      	ldr	r3, [pc, #24]	; (400814 <ENCODER_B_init+0x40>)
  4007fc:	4798      	blx	r3
  4007fe:	bd08      	pop	{r3, pc}
  400800:	400e0600 	.word	0x400e0600
  400804:	004007b5 	.word	0x004007b5
  400808:	00401c5f 	.word	0x00401c5f
  40080c:	40054000 	.word	0x40054000
  400810:	204004d8 	.word	0x204004d8
  400814:	00400ea9 	.word	0x00400ea9

00400818 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400818:	b508      	push	{r3, lr}
	delay_init(SysTick);
  40081a:	4802      	ldr	r0, [pc, #8]	; (400824 <delay_driver_init+0xc>)
  40081c:	4b02      	ldr	r3, [pc, #8]	; (400828 <delay_driver_init+0x10>)
  40081e:	4798      	blx	r3
  400820:	bd08      	pop	{r3, pc}
  400822:	bf00      	nop
  400824:	e000e010 	.word	0xe000e010
  400828:	00400c21 	.word	0x00400c21

0040082c <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40082c:	4b0f      	ldr	r3, [pc, #60]	; (40086c <EDBG_COM_PORT_init+0x40>)
  40082e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400830:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400834:	671a      	str	r2, [r3, #112]	; 0x70
  400836:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400838:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40083c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40083e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400842:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400844:	4a0a      	ldr	r2, [pc, #40]	; (400870 <EDBG_COM_PORT_init+0x44>)
  400846:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40084a:	f043 0310 	orr.w	r3, r3, #16
  40084e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400852:	4b08      	ldr	r3, [pc, #32]	; (400874 <EDBG_COM_PORT_init+0x48>)
  400854:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400856:	f042 0210 	orr.w	r2, r2, #16
  40085a:	671a      	str	r2, [r3, #112]	; 0x70
  40085c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40085e:	f042 0210 	orr.w	r2, r2, #16
  400862:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400864:	2210      	movs	r2, #16
  400866:	605a      	str	r2, [r3, #4]
  400868:	4770      	bx	lr
  40086a:	bf00      	nop
  40086c:	400e0e00 	.word	0x400e0e00
  400870:	40088000 	.word	0x40088000
  400874:	400e1000 	.word	0x400e1000

00400878 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400878:	4b04      	ldr	r3, [pc, #16]	; (40088c <EDBG_COM_CLOCK_init+0x14>)
  40087a:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40087c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400880:	d103      	bne.n	40088a <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400886:	4b01      	ldr	r3, [pc, #4]	; (40088c <EDBG_COM_CLOCK_init+0x14>)
  400888:	611a      	str	r2, [r3, #16]
  40088a:	4770      	bx	lr
  40088c:	400e0600 	.word	0x400e0600

00400890 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  400890:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  400892:	4b06      	ldr	r3, [pc, #24]	; (4008ac <EDBG_COM_init+0x1c>)
  400894:	4798      	blx	r3
	EDBG_COM_PORT_init();
  400896:	4b06      	ldr	r3, [pc, #24]	; (4008b0 <EDBG_COM_init+0x20>)
  400898:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  40089a:	4b06      	ldr	r3, [pc, #24]	; (4008b4 <EDBG_COM_init+0x24>)
  40089c:	4798      	blx	r3
  40089e:	4602      	mov	r2, r0
  4008a0:	4905      	ldr	r1, [pc, #20]	; (4008b8 <EDBG_COM_init+0x28>)
  4008a2:	4806      	ldr	r0, [pc, #24]	; (4008bc <EDBG_COM_init+0x2c>)
  4008a4:	4b06      	ldr	r3, [pc, #24]	; (4008c0 <EDBG_COM_init+0x30>)
  4008a6:	4798      	blx	r3
  4008a8:	bd08      	pop	{r3, pc}
  4008aa:	bf00      	nop
  4008ac:	00400879 	.word	0x00400879
  4008b0:	0040082d 	.word	0x0040082d
  4008b4:	00401ea1 	.word	0x00401ea1
  4008b8:	40028000 	.word	0x40028000
  4008bc:	2040057c 	.word	0x2040057c
  4008c0:	00400ff1 	.word	0x00400ff1

004008c4 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  4008c4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4008c6:	4b32      	ldr	r3, [pc, #200]	; (400990 <system_init+0xcc>)
  4008c8:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4008ca:	4b32      	ldr	r3, [pc, #200]	; (400994 <system_init+0xd0>)
  4008cc:	699b      	ldr	r3, [r3, #24]
  4008ce:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4008d2:	d103      	bne.n	4008dc <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4008d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4008d8:	4b2e      	ldr	r3, [pc, #184]	; (400994 <system_init+0xd0>)
  4008da:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4008dc:	4b2d      	ldr	r3, [pc, #180]	; (400994 <system_init+0xd0>)
  4008de:	699b      	ldr	r3, [r3, #24]
  4008e0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  4008e4:	d103      	bne.n	4008ee <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4008e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4008ea:	4b2a      	ldr	r3, [pc, #168]	; (400994 <system_init+0xd0>)
  4008ec:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4008ee:	4b29      	ldr	r3, [pc, #164]	; (400994 <system_init+0xd0>)
  4008f0:	699b      	ldr	r3, [r3, #24]
  4008f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4008f6:	d103      	bne.n	400900 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4008f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4008fc:	4b25      	ldr	r3, [pc, #148]	; (400994 <system_init+0xd0>)
  4008fe:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400900:	4a25      	ldr	r2, [pc, #148]	; (400998 <system_init+0xd4>)
  400902:	6853      	ldr	r3, [r2, #4]
  400904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400908:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  40090a:	4b24      	ldr	r3, [pc, #144]	; (40099c <system_init+0xd8>)
  40090c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400910:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  400912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  400916:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  400918:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40091a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40091e:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400920:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400922:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400928:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40092a:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40092c:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40092e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400932:	f44f 7080 	mov.w	r0, #256	; 0x100
  400936:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400938:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40093a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40093c:	f44f 7000 	mov.w	r0, #512	; 0x200
  400940:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400942:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400944:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400946:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40094a:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40094c:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40094e:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400950:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400954:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400956:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400958:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40095a:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40095c:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40095e:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  400960:	4b0f      	ldr	r3, [pc, #60]	; (4009a0 <system_init+0xdc>)
  400962:	4798      	blx	r3
	ADC_1_init();
  400964:	4b0f      	ldr	r3, [pc, #60]	; (4009a4 <system_init+0xe0>)
  400966:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  400968:	4b0f      	ldr	r3, [pc, #60]	; (4009a8 <system_init+0xe4>)
  40096a:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  40096c:	4b0f      	ldr	r3, [pc, #60]	; (4009ac <system_init+0xe8>)
  40096e:	4798      	blx	r3

	PWM_0_init();
  400970:	4b0f      	ldr	r3, [pc, #60]	; (4009b0 <system_init+0xec>)
  400972:	4798      	blx	r3

	PWM_1_init();
  400974:	4b0f      	ldr	r3, [pc, #60]	; (4009b4 <system_init+0xf0>)
  400976:	4798      	blx	r3
	ENCODER_A_init();
  400978:	4b0f      	ldr	r3, [pc, #60]	; (4009b8 <system_init+0xf4>)
  40097a:	4798      	blx	r3
	ENCODER_B_init();
  40097c:	4b0f      	ldr	r3, [pc, #60]	; (4009bc <system_init+0xf8>)
  40097e:	4798      	blx	r3

	delay_driver_init();
  400980:	4b0f      	ldr	r3, [pc, #60]	; (4009c0 <system_init+0xfc>)
  400982:	4798      	blx	r3

	EDBG_COM_init();
  400984:	4b0f      	ldr	r3, [pc, #60]	; (4009c4 <system_init+0x100>)
  400986:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  400988:	4b0f      	ldr	r3, [pc, #60]	; (4009c8 <system_init+0x104>)
  40098a:	4798      	blx	r3
  40098c:	bd08      	pop	{r3, pc}
  40098e:	bf00      	nop
  400990:	00401439 	.word	0x00401439
  400994:	400e0600 	.word	0x400e0600
  400998:	400e1850 	.word	0x400e1850
  40099c:	400e0e00 	.word	0x400e0e00
  4009a0:	00400505 	.word	0x00400505
  4009a4:	0040045d 	.word	0x0040045d
  4009a8:	004005d9 	.word	0x004005d9
  4009ac:	004005f1 	.word	0x004005f1
  4009b0:	00400699 	.word	0x00400699
  4009b4:	00400721 	.word	0x00400721
  4009b8:	00400775 	.word	0x00400775
  4009bc:	004007d5 	.word	0x004007d5
  4009c0:	00400819 	.word	0x00400819
  4009c4:	00400891 	.word	0x00400891
  4009c8:	00400c99 	.word	0x00400c99

004009cc <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  4009cc:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  4009ce:	6983      	ldr	r3, [r0, #24]
  4009d0:	b103      	cbz	r3, 4009d4 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  4009d2:	4798      	blx	r3
  4009d4:	bd08      	pop	{r3, pc}

004009d6 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  4009d6:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  4009d8:	69c3      	ldr	r3, [r0, #28]
  4009da:	b103      	cbz	r3, 4009de <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  4009dc:	4798      	blx	r3
  4009de:	bd08      	pop	{r3, pc}

004009e0 <adc_async_channel_conversion_done>:
{
  4009e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4009e4:	4605      	mov	r5, r0
  4009e6:	4688      	mov	r8, r1
  4009e8:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  4009ea:	6a03      	ldr	r3, [r0, #32]
  4009ec:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  4009ee:	6a87      	ldr	r7, [r0, #40]	; 0x28
  4009f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4009f4:	00de      	lsls	r6, r3, #3
  4009f6:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  4009f8:	f104 0a04 	add.w	sl, r4, #4
  4009fc:	b2d1      	uxtb	r1, r2
  4009fe:	4650      	mov	r0, sl
  400a00:	4b0c      	ldr	r3, [pc, #48]	; (400a34 <adc_async_channel_conversion_done+0x54>)
  400a02:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  400a04:	4628      	mov	r0, r5
  400a06:	4b0c      	ldr	r3, [pc, #48]	; (400a38 <adc_async_channel_conversion_done+0x58>)
  400a08:	4798      	blx	r3
  400a0a:	2801      	cmp	r0, #1
  400a0c:	d907      	bls.n	400a1e <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  400a0e:	ea4f 2119 	mov.w	r1, r9, lsr #8
  400a12:	4650      	mov	r0, sl
  400a14:	4b07      	ldr	r3, [pc, #28]	; (400a34 <adc_async_channel_conversion_done+0x54>)
  400a16:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  400a18:	8aa3      	ldrh	r3, [r4, #20]
  400a1a:	3301      	adds	r3, #1
  400a1c:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  400a1e:	8aa3      	ldrh	r3, [r4, #20]
  400a20:	3301      	adds	r3, #1
  400a22:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  400a24:	59bb      	ldr	r3, [r7, r6]
  400a26:	b113      	cbz	r3, 400a2e <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  400a28:	4641      	mov	r1, r8
  400a2a:	4628      	mov	r0, r5
  400a2c:	4798      	blx	r3
  400a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400a32:	bf00      	nop
  400a34:	00401109 	.word	0x00401109
  400a38:	00401419 	.word	0x00401419

00400a3c <adc_async_init>:
{
  400a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a40:	4616      	mov	r6, r2
  400a42:	461c      	mov	r4, r3
  400a44:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  400a48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  400a4a:	4607      	mov	r7, r0
  400a4c:	4689      	mov	r9, r1
  400a4e:	2800      	cmp	r0, #0
  400a50:	bf18      	it	ne
  400a52:	2900      	cmpne	r1, #0
  400a54:	d00b      	beq.n	400a6e <adc_async_init+0x32>
  400a56:	1c13      	adds	r3, r2, #0
  400a58:	bf18      	it	ne
  400a5a:	2301      	movne	r3, #1
  400a5c:	f1b8 0f00 	cmp.w	r8, #0
  400a60:	d017      	beq.n	400a92 <adc_async_init+0x56>
  400a62:	b1b3      	cbz	r3, 400a92 <adc_async_init+0x56>
  400a64:	b10d      	cbz	r5, 400a6a <adc_async_init+0x2e>
  400a66:	2001      	movs	r0, #1
  400a68:	e002      	b.n	400a70 <adc_async_init+0x34>
  400a6a:	2000      	movs	r0, #0
  400a6c:	e000      	b.n	400a70 <adc_async_init+0x34>
  400a6e:	2000      	movs	r0, #0
  400a70:	f8df b068 	ldr.w	fp, [pc, #104]	; 400adc <adc_async_init+0xa0>
  400a74:	223f      	movs	r2, #63	; 0x3f
  400a76:	4659      	mov	r1, fp
  400a78:	f8df a064 	ldr.w	sl, [pc, #100]	; 400ae0 <adc_async_init+0xa4>
  400a7c:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  400a7e:	1c60      	adds	r0, r4, #1
  400a80:	2240      	movs	r2, #64	; 0x40
  400a82:	4659      	mov	r1, fp
  400a84:	4580      	cmp	r8, r0
  400a86:	bfcc      	ite	gt
  400a88:	2000      	movgt	r0, #0
  400a8a:	2001      	movle	r0, #1
  400a8c:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  400a8e:	2300      	movs	r3, #0
  400a90:	e005      	b.n	400a9e <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  400a92:	2000      	movs	r0, #0
  400a94:	e7ec      	b.n	400a70 <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  400a96:	22ff      	movs	r2, #255	; 0xff
  400a98:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  400a9a:	3301      	adds	r3, #1
  400a9c:	b2db      	uxtb	r3, r3
  400a9e:	42a3      	cmp	r3, r4
  400aa0:	d9f9      	bls.n	400a96 <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  400aa2:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  400aa4:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  400aa8:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  400aac:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  400aae:	4649      	mov	r1, r9
  400ab0:	4638      	mov	r0, r7
  400ab2:	4b06      	ldr	r3, [pc, #24]	; (400acc <adc_async_init+0x90>)
  400ab4:	4798      	blx	r3
	if (init_status) {
  400ab6:	4603      	mov	r3, r0
  400ab8:	b928      	cbnz	r0, 400ac6 <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  400aba:	4a05      	ldr	r2, [pc, #20]	; (400ad0 <adc_async_init+0x94>)
  400abc:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  400abe:	4a05      	ldr	r2, [pc, #20]	; (400ad4 <adc_async_init+0x98>)
  400ac0:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  400ac2:	4a05      	ldr	r2, [pc, #20]	; (400ad8 <adc_async_init+0x9c>)
  400ac4:	607a      	str	r2, [r7, #4]
}
  400ac6:	4618      	mov	r0, r3
  400ac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400acc:	00401359 	.word	0x00401359
  400ad0:	004009e1 	.word	0x004009e1
  400ad4:	004009cd 	.word	0x004009cd
  400ad8:	004009d7 	.word	0x004009d7
  400adc:	00405418 	.word	0x00405418
  400ae0:	00401065 	.word	0x00401065

00400ae4 <adc_async_register_channel_buffer>:
{
  400ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400ae8:	460e      	mov	r6, r1
  400aea:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  400aec:	4605      	mov	r5, r0
  400aee:	4690      	mov	r8, r2
  400af0:	2800      	cmp	r0, #0
  400af2:	bf18      	it	ne
  400af4:	2a00      	cmpne	r2, #0
  400af6:	d002      	beq.n	400afe <adc_async_register_channel_buffer+0x1a>
  400af8:	b9c3      	cbnz	r3, 400b2c <adc_async_register_channel_buffer+0x48>
  400afa:	2000      	movs	r0, #0
  400afc:	e000      	b.n	400b00 <adc_async_register_channel_buffer+0x1c>
  400afe:	2000      	movs	r0, #0
  400b00:	f8df 9094 	ldr.w	r9, [pc, #148]	; 400b98 <adc_async_register_channel_buffer+0xb4>
  400b04:	2266      	movs	r2, #102	; 0x66
  400b06:	4649      	mov	r1, r9
  400b08:	4c21      	ldr	r4, [pc, #132]	; (400b90 <adc_async_register_channel_buffer+0xac>)
  400b0a:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  400b0c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  400b10:	2267      	movs	r2, #103	; 0x67
  400b12:	4649      	mov	r1, r9
  400b14:	42b0      	cmp	r0, r6
  400b16:	bf34      	ite	cc
  400b18:	2000      	movcc	r0, #0
  400b1a:	2001      	movcs	r0, #1
  400b1c:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  400b1e:	6a29      	ldr	r1, [r5, #32]
  400b20:	5d8b      	ldrb	r3, [r1, r6]
  400b22:	2bff      	cmp	r3, #255	; 0xff
  400b24:	d12b      	bne.n	400b7e <adc_async_register_channel_buffer+0x9a>
  400b26:	2400      	movs	r4, #0
  400b28:	4623      	mov	r3, r4
  400b2a:	e003      	b.n	400b34 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  400b2c:	2001      	movs	r0, #1
  400b2e:	e7e7      	b.n	400b00 <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  400b30:	3301      	adds	r3, #1
  400b32:	b2db      	uxtb	r3, r3
  400b34:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  400b38:	4293      	cmp	r3, r2
  400b3a:	d805      	bhi.n	400b48 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  400b3c:	5cca      	ldrb	r2, [r1, r3]
  400b3e:	2aff      	cmp	r2, #255	; 0xff
  400b40:	d0f6      	beq.n	400b30 <adc_async_register_channel_buffer+0x4c>
			index++;
  400b42:	3401      	adds	r4, #1
  400b44:	b2e4      	uxtb	r4, r4
  400b46:	e7f3      	b.n	400b30 <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  400b48:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  400b4c:	429c      	cmp	r4, r3
  400b4e:	d819      	bhi.n	400b84 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  400b50:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  400b52:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  400b56:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  400b5a:	4448      	add	r0, r9
  400b5c:	463a      	mov	r2, r7
  400b5e:	4641      	mov	r1, r8
  400b60:	3004      	adds	r0, #4
  400b62:	4b0c      	ldr	r3, [pc, #48]	; (400b94 <adc_async_register_channel_buffer+0xb0>)
  400b64:	4798      	blx	r3
  400b66:	4602      	mov	r2, r0
  400b68:	b978      	cbnz	r0, 400b8a <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  400b6a:	6a2b      	ldr	r3, [r5, #32]
  400b6c:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  400b6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  400b70:	4499      	add	r9, r3
  400b72:	2300      	movs	r3, #0
  400b74:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  400b78:	4610      	mov	r0, r2
  400b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  400b7e:	f06f 020c 	mvn.w	r2, #12
  400b82:	e7f9      	b.n	400b78 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  400b84:	f06f 021b 	mvn.w	r2, #27
  400b88:	e7f6      	b.n	400b78 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  400b8a:	f06f 020c 	mvn.w	r2, #12
  400b8e:	e7f3      	b.n	400b78 <adc_async_register_channel_buffer+0x94>
  400b90:	00401065 	.word	0x00401065
  400b94:	004010c5 	.word	0x004010c5
  400b98:	00405418 	.word	0x00405418

00400b9c <adc_async_enable_channel>:
{
  400b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b9e:	460d      	mov	r5, r1
	ASSERT(descr);
  400ba0:	4f0b      	ldr	r7, [pc, #44]	; (400bd0 <adc_async_enable_channel+0x34>)
  400ba2:	4604      	mov	r4, r0
  400ba4:	2283      	movs	r2, #131	; 0x83
  400ba6:	4639      	mov	r1, r7
  400ba8:	3000      	adds	r0, #0
  400baa:	bf18      	it	ne
  400bac:	2001      	movne	r0, #1
  400bae:	4e09      	ldr	r6, [pc, #36]	; (400bd4 <adc_async_enable_channel+0x38>)
  400bb0:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  400bb2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  400bb6:	2284      	movs	r2, #132	; 0x84
  400bb8:	4639      	mov	r1, r7
  400bba:	42a8      	cmp	r0, r5
  400bbc:	bf34      	ite	cc
  400bbe:	2000      	movcc	r0, #0
  400bc0:	2001      	movcs	r0, #1
  400bc2:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  400bc4:	4629      	mov	r1, r5
  400bc6:	4620      	mov	r0, r4
  400bc8:	4b03      	ldr	r3, [pc, #12]	; (400bd8 <adc_async_enable_channel+0x3c>)
  400bca:	4798      	blx	r3
}
  400bcc:	2000      	movs	r0, #0
  400bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400bd0:	00405418 	.word	0x00405418
  400bd4:	00401065 	.word	0x00401065
  400bd8:	0040140d 	.word	0x0040140d

00400bdc <adc_async_start_conversion>:
{
  400bdc:	b510      	push	{r4, lr}
	ASSERT(descr);
  400bde:	4604      	mov	r4, r0
  400be0:	22d6      	movs	r2, #214	; 0xd6
  400be2:	4905      	ldr	r1, [pc, #20]	; (400bf8 <adc_async_start_conversion+0x1c>)
  400be4:	3000      	adds	r0, #0
  400be6:	bf18      	it	ne
  400be8:	2001      	movne	r0, #1
  400bea:	4b04      	ldr	r3, [pc, #16]	; (400bfc <adc_async_start_conversion+0x20>)
  400bec:	4798      	blx	r3
	_adc_async_convert(&descr->device);
  400bee:	4620      	mov	r0, r4
  400bf0:	4b03      	ldr	r3, [pc, #12]	; (400c00 <adc_async_start_conversion+0x24>)
  400bf2:	4798      	blx	r3
}
  400bf4:	2000      	movs	r0, #0
  400bf6:	bd10      	pop	{r4, pc}
  400bf8:	00405418 	.word	0x00405418
  400bfc:	00401065 	.word	0x00401065
  400c00:	0040141d 	.word	0x0040141d

00400c04 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400c04:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400c08:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400c0a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400c0c:	f3bf 8f5f 	dmb	sy
  400c10:	4770      	bx	lr

00400c12 <atomic_leave_critical>:
  400c12:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400c16:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400c18:	f383 8810 	msr	PRIMASK, r3
  400c1c:	4770      	bx	lr
	...

00400c20 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400c20:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400c22:	4b02      	ldr	r3, [pc, #8]	; (400c2c <delay_init+0xc>)
  400c24:	6018      	str	r0, [r3, #0]
  400c26:	4b02      	ldr	r3, [pc, #8]	; (400c30 <delay_init+0x10>)
  400c28:	4798      	blx	r3
  400c2a:	bd08      	pop	{r3, pc}
  400c2c:	20400310 	.word	0x20400310
  400c30:	00401aa1 	.word	0x00401aa1

00400c34 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400c34:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  400c36:	4b04      	ldr	r3, [pc, #16]	; (400c48 <delay_ms+0x14>)
  400c38:	681c      	ldr	r4, [r3, #0]
  400c3a:	4b04      	ldr	r3, [pc, #16]	; (400c4c <delay_ms+0x18>)
  400c3c:	4798      	blx	r3
  400c3e:	4601      	mov	r1, r0
  400c40:	4620      	mov	r0, r4
  400c42:	4b03      	ldr	r3, [pc, #12]	; (400c50 <delay_ms+0x1c>)
  400c44:	4798      	blx	r3
  400c46:	bd10      	pop	{r4, pc}
  400c48:	20400310 	.word	0x20400310
  400c4c:	00401425 	.word	0x00401425
  400c50:	00401aad 	.word	0x00401aad

00400c54 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400c54:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400c56:	2504      	movs	r5, #4
  400c58:	2400      	movs	r4, #0

	while (upper >= lower) {
  400c5a:	e007      	b.n	400c6c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  400c5c:	4a0d      	ldr	r2, [pc, #52]	; (400c94 <process_ext_irq+0x40>)
  400c5e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400c62:	b1b3      	cbz	r3, 400c92 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400c64:	4798      	blx	r3
  400c66:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  400c68:	3a01      	subs	r2, #1
  400c6a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  400c6c:	42ac      	cmp	r4, r5
  400c6e:	d810      	bhi.n	400c92 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400c70:	192b      	adds	r3, r5, r4
  400c72:	105b      	asrs	r3, r3, #1
  400c74:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400c76:	2a03      	cmp	r2, #3
  400c78:	d80b      	bhi.n	400c92 <process_ext_irq+0x3e>
  400c7a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  400c7c:	4905      	ldr	r1, [pc, #20]	; (400c94 <process_ext_irq+0x40>)
  400c7e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400c82:	6849      	ldr	r1, [r1, #4]
  400c84:	4281      	cmp	r1, r0
  400c86:	d0e9      	beq.n	400c5c <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400c88:	4281      	cmp	r1, r0
  400c8a:	d2ed      	bcs.n	400c68 <process_ext_irq+0x14>
			lower = middle + 1;
  400c8c:	3201      	adds	r2, #1
  400c8e:	b2d4      	uxtb	r4, r2
  400c90:	e7ec      	b.n	400c6c <process_ext_irq+0x18>
  400c92:	bd38      	pop	{r3, r4, r5, pc}
  400c94:	20400314 	.word	0x20400314

00400c98 <ext_irq_init>:
{
  400c98:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400c9a:	2300      	movs	r3, #0
  400c9c:	e00a      	b.n	400cb4 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400c9e:	4a08      	ldr	r2, [pc, #32]	; (400cc0 <ext_irq_init+0x28>)
  400ca0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400ca4:	f04f 30ff 	mov.w	r0, #4294967295
  400ca8:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400caa:	2100      	movs	r1, #0
  400cac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400cb0:	3301      	adds	r3, #1
  400cb2:	b29b      	uxth	r3, r3
  400cb4:	2b03      	cmp	r3, #3
  400cb6:	d9f2      	bls.n	400c9e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400cb8:	4802      	ldr	r0, [pc, #8]	; (400cc4 <ext_irq_init+0x2c>)
  400cba:	4b03      	ldr	r3, [pc, #12]	; (400cc8 <ext_irq_init+0x30>)
  400cbc:	4798      	blx	r3
}
  400cbe:	bd08      	pop	{r3, pc}
  400cc0:	20400314 	.word	0x20400314
  400cc4:	00400c55 	.word	0x00400c55
  400cc8:	00401769 	.word	0x00401769

00400ccc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400ccc:	b570      	push	{r4, r5, r6, lr}
  400cce:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400cd0:	4604      	mov	r4, r0
  400cd2:	460d      	mov	r5, r1
  400cd4:	2800      	cmp	r0, #0
  400cd6:	bf18      	it	ne
  400cd8:	2900      	cmpne	r1, #0
  400cda:	bf14      	ite	ne
  400cdc:	2001      	movne	r0, #1
  400cde:	2000      	moveq	r0, #0
  400ce0:	2234      	movs	r2, #52	; 0x34
  400ce2:	4904      	ldr	r1, [pc, #16]	; (400cf4 <io_write+0x28>)
  400ce4:	4b04      	ldr	r3, [pc, #16]	; (400cf8 <io_write+0x2c>)
  400ce6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400ce8:	6823      	ldr	r3, [r4, #0]
  400cea:	4632      	mov	r2, r6
  400cec:	4629      	mov	r1, r5
  400cee:	4620      	mov	r0, r4
  400cf0:	4798      	blx	r3
}
  400cf2:	bd70      	pop	{r4, r5, r6, pc}
  400cf4:	00405434 	.word	0x00405434
  400cf8:	00401065 	.word	0x00401065

00400cfc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400cfc:	b570      	push	{r4, r5, r6, lr}
  400cfe:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400d00:	4604      	mov	r4, r0
  400d02:	460d      	mov	r5, r1
  400d04:	2800      	cmp	r0, #0
  400d06:	bf18      	it	ne
  400d08:	2900      	cmpne	r1, #0
  400d0a:	bf14      	ite	ne
  400d0c:	2001      	movne	r0, #1
  400d0e:	2000      	moveq	r0, #0
  400d10:	223d      	movs	r2, #61	; 0x3d
  400d12:	4904      	ldr	r1, [pc, #16]	; (400d24 <io_read+0x28>)
  400d14:	4b04      	ldr	r3, [pc, #16]	; (400d28 <io_read+0x2c>)
  400d16:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400d18:	6863      	ldr	r3, [r4, #4]
  400d1a:	4632      	mov	r2, r6
  400d1c:	4629      	mov	r1, r5
  400d1e:	4620      	mov	r0, r4
  400d20:	4798      	blx	r3
}
  400d22:	bd70      	pop	{r4, r5, r6, pc}
  400d24:	00405434 	.word	0x00405434
  400d28:	00401065 	.word	0x00401065

00400d2c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400d2c:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400d2e:	6943      	ldr	r3, [r0, #20]
  400d30:	b103      	cbz	r3, 400d34 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400d32:	4798      	blx	r3
  400d34:	bd08      	pop	{r3, pc}

00400d36 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400d36:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400d38:	6983      	ldr	r3, [r0, #24]
  400d3a:	b103      	cbz	r3, 400d3e <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400d3c:	4798      	blx	r3
  400d3e:	bd08      	pop	{r3, pc}

00400d40 <pwm_init>:
{
  400d40:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400d42:	4604      	mov	r4, r0
  400d44:	460d      	mov	r5, r1
  400d46:	2800      	cmp	r0, #0
  400d48:	bf18      	it	ne
  400d4a:	2900      	cmpne	r1, #0
  400d4c:	bf14      	ite	ne
  400d4e:	2001      	movne	r0, #1
  400d50:	2000      	moveq	r0, #0
  400d52:	2233      	movs	r2, #51	; 0x33
  400d54:	4906      	ldr	r1, [pc, #24]	; (400d70 <pwm_init+0x30>)
  400d56:	4b07      	ldr	r3, [pc, #28]	; (400d74 <pwm_init+0x34>)
  400d58:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  400d5a:	4629      	mov	r1, r5
  400d5c:	4620      	mov	r0, r4
  400d5e:	4b06      	ldr	r3, [pc, #24]	; (400d78 <pwm_init+0x38>)
  400d60:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400d62:	4b06      	ldr	r3, [pc, #24]	; (400d7c <pwm_init+0x3c>)
  400d64:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400d66:	4b06      	ldr	r3, [pc, #24]	; (400d80 <pwm_init+0x40>)
  400d68:	6063      	str	r3, [r4, #4]
}
  400d6a:	2000      	movs	r0, #0
  400d6c:	bd38      	pop	{r3, r4, r5, pc}
  400d6e:	bf00      	nop
  400d70:	00405448 	.word	0x00405448
  400d74:	00401065 	.word	0x00401065
  400d78:	00401871 	.word	0x00401871
  400d7c:	00400d2d 	.word	0x00400d2d
  400d80:	00400d37 	.word	0x00400d37

00400d84 <pwm_enable>:
{
  400d84:	b510      	push	{r4, lr}
	ASSERT(descr);
  400d86:	4604      	mov	r4, r0
  400d88:	224a      	movs	r2, #74	; 0x4a
  400d8a:	4909      	ldr	r1, [pc, #36]	; (400db0 <pwm_enable+0x2c>)
  400d8c:	3000      	adds	r0, #0
  400d8e:	bf18      	it	ne
  400d90:	2001      	movne	r0, #1
  400d92:	4b08      	ldr	r3, [pc, #32]	; (400db4 <pwm_enable+0x30>)
  400d94:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  400d96:	4620      	mov	r0, r4
  400d98:	4b07      	ldr	r3, [pc, #28]	; (400db8 <pwm_enable+0x34>)
  400d9a:	4798      	blx	r3
  400d9c:	b920      	cbnz	r0, 400da8 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  400d9e:	4620      	mov	r0, r4
  400da0:	4b06      	ldr	r3, [pc, #24]	; (400dbc <pwm_enable+0x38>)
  400da2:	4798      	blx	r3
	return ERR_NONE;
  400da4:	2000      	movs	r0, #0
  400da6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400da8:	f06f 0010 	mvn.w	r0, #16
}
  400dac:	bd10      	pop	{r4, pc}
  400dae:	bf00      	nop
  400db0:	00405448 	.word	0x00405448
  400db4:	00401065 	.word	0x00401065
  400db8:	00401a59 	.word	0x00401a59
  400dbc:	004019b5 	.word	0x004019b5

00400dc0 <pwm_set_parameters>:
{
  400dc0:	b570      	push	{r4, r5, r6, lr}
  400dc2:	460d      	mov	r5, r1
  400dc4:	4616      	mov	r6, r2
	ASSERT(descr);
  400dc6:	4604      	mov	r4, r0
  400dc8:	227c      	movs	r2, #124	; 0x7c
  400dca:	4906      	ldr	r1, [pc, #24]	; (400de4 <pwm_set_parameters+0x24>)
  400dcc:	3000      	adds	r0, #0
  400dce:	bf18      	it	ne
  400dd0:	2001      	movne	r0, #1
  400dd2:	4b05      	ldr	r3, [pc, #20]	; (400de8 <pwm_set_parameters+0x28>)
  400dd4:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  400dd6:	4632      	mov	r2, r6
  400dd8:	4629      	mov	r1, r5
  400dda:	4620      	mov	r0, r4
  400ddc:	4b03      	ldr	r3, [pc, #12]	; (400dec <pwm_set_parameters+0x2c>)
  400dde:	4798      	blx	r3
}
  400de0:	2000      	movs	r0, #0
  400de2:	bd70      	pop	{r4, r5, r6, pc}
  400de4:	00405448 	.word	0x00405448
  400de8:	00401065 	.word	0x00401065
  400dec:	004019f9 	.word	0x004019f9

00400df0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400df2:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400df4:	b117      	cbz	r7, 400dfc <timer_add_timer_task+0xc>
  400df6:	463c      	mov	r4, r7
  400df8:	2600      	movs	r6, #0
  400dfa:	e00b      	b.n	400e14 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400dfc:	4b0e      	ldr	r3, [pc, #56]	; (400e38 <timer_add_timer_task+0x48>)
  400dfe:	4798      	blx	r3
		return;
  400e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400e02:	68a5      	ldr	r5, [r4, #8]
  400e04:	442b      	add	r3, r5
  400e06:	1a9b      	subs	r3, r3, r2
  400e08:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400e0a:	688d      	ldr	r5, [r1, #8]
  400e0c:	42ab      	cmp	r3, r5
  400e0e:	d209      	bcs.n	400e24 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400e10:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400e12:	6824      	ldr	r4, [r4, #0]
  400e14:	b134      	cbz	r4, 400e24 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400e16:	6863      	ldr	r3, [r4, #4]
  400e18:	4293      	cmp	r3, r2
  400e1a:	d8f2      	bhi.n	400e02 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400e1c:	68a5      	ldr	r5, [r4, #8]
  400e1e:	1a9b      	subs	r3, r3, r2
  400e20:	442b      	add	r3, r5
  400e22:	e7f2      	b.n	400e0a <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400e24:	42bc      	cmp	r4, r7
  400e26:	d003      	beq.n	400e30 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400e28:	4630      	mov	r0, r6
  400e2a:	4b04      	ldr	r3, [pc, #16]	; (400e3c <timer_add_timer_task+0x4c>)
  400e2c:	4798      	blx	r3
  400e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400e30:	4b01      	ldr	r3, [pc, #4]	; (400e38 <timer_add_timer_task+0x48>)
  400e32:	4798      	blx	r3
  400e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e36:	bf00      	nop
  400e38:	00401081 	.word	0x00401081
  400e3c:	004010ad 	.word	0x004010ad

00400e40 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e42:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400e44:	6906      	ldr	r6, [r0, #16]
  400e46:	3601      	adds	r6, #1
  400e48:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400e4a:	7e03      	ldrb	r3, [r0, #24]
  400e4c:	f013 0f01 	tst.w	r3, #1
  400e50:	d105      	bne.n	400e5e <timer_process_counted+0x1e>
  400e52:	7e03      	ldrb	r3, [r0, #24]
  400e54:	f013 0f02 	tst.w	r3, #2
  400e58:	d101      	bne.n	400e5e <timer_process_counted+0x1e>
  400e5a:	4605      	mov	r5, r0
  400e5c:	e009      	b.n	400e72 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  400e5e:	7e03      	ldrb	r3, [r0, #24]
  400e60:	f043 0302 	orr.w	r3, r3, #2
  400e64:	7603      	strb	r3, [r0, #24]
		return;
  400e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e68:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  400e6a:	68e3      	ldr	r3, [r4, #12]
  400e6c:	4620      	mov	r0, r4
  400e6e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  400e70:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  400e72:	b19c      	cbz	r4, 400e9c <timer_process_counted+0x5c>
  400e74:	6863      	ldr	r3, [r4, #4]
  400e76:	1af3      	subs	r3, r6, r3
  400e78:	68a2      	ldr	r2, [r4, #8]
  400e7a:	4293      	cmp	r3, r2
  400e7c:	d30e      	bcc.n	400e9c <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  400e7e:	f105 0714 	add.w	r7, r5, #20
  400e82:	4638      	mov	r0, r7
  400e84:	4b06      	ldr	r3, [pc, #24]	; (400ea0 <timer_process_counted+0x60>)
  400e86:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400e88:	7c23      	ldrb	r3, [r4, #16]
  400e8a:	2b01      	cmp	r3, #1
  400e8c:	d1ec      	bne.n	400e68 <timer_process_counted+0x28>
			tmp->time_label = time;
  400e8e:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400e90:	4632      	mov	r2, r6
  400e92:	4621      	mov	r1, r4
  400e94:	4638      	mov	r0, r7
  400e96:	4b03      	ldr	r3, [pc, #12]	; (400ea4 <timer_process_counted+0x64>)
  400e98:	4798      	blx	r3
  400e9a:	e7e5      	b.n	400e68 <timer_process_counted+0x28>
  400e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e9e:	bf00      	nop
  400ea0:	004010b5 	.word	0x004010b5
  400ea4:	00400df1 	.word	0x00400df1

00400ea8 <timer_init>:
{
  400ea8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400eaa:	4604      	mov	r4, r0
  400eac:	460d      	mov	r5, r1
  400eae:	2800      	cmp	r0, #0
  400eb0:	bf18      	it	ne
  400eb2:	2900      	cmpne	r1, #0
  400eb4:	bf14      	ite	ne
  400eb6:	2001      	movne	r0, #1
  400eb8:	2000      	moveq	r0, #0
  400eba:	223b      	movs	r2, #59	; 0x3b
  400ebc:	4905      	ldr	r1, [pc, #20]	; (400ed4 <timer_init+0x2c>)
  400ebe:	4b06      	ldr	r3, [pc, #24]	; (400ed8 <timer_init+0x30>)
  400ec0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400ec2:	4629      	mov	r1, r5
  400ec4:	4620      	mov	r0, r4
  400ec6:	4b05      	ldr	r3, [pc, #20]	; (400edc <timer_init+0x34>)
  400ec8:	4798      	blx	r3
	descr->time                           = 0;
  400eca:	2000      	movs	r0, #0
  400ecc:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400ece:	4b04      	ldr	r3, [pc, #16]	; (400ee0 <timer_init+0x38>)
  400ed0:	6023      	str	r3, [r4, #0]
}
  400ed2:	bd38      	pop	{r3, r4, r5, pc}
  400ed4:	00405460 	.word	0x00405460
  400ed8:	00401065 	.word	0x00401065
  400edc:	00401b65 	.word	0x00401b65
  400ee0:	00400e41 	.word	0x00400e41

00400ee4 <timer_start>:
{
  400ee4:	b510      	push	{r4, lr}
	ASSERT(descr);
  400ee6:	4604      	mov	r4, r0
  400ee8:	2253      	movs	r2, #83	; 0x53
  400eea:	4909      	ldr	r1, [pc, #36]	; (400f10 <timer_start+0x2c>)
  400eec:	3000      	adds	r0, #0
  400eee:	bf18      	it	ne
  400ef0:	2001      	movne	r0, #1
  400ef2:	4b08      	ldr	r3, [pc, #32]	; (400f14 <timer_start+0x30>)
  400ef4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  400ef6:	4620      	mov	r0, r4
  400ef8:	4b07      	ldr	r3, [pc, #28]	; (400f18 <timer_start+0x34>)
  400efa:	4798      	blx	r3
  400efc:	b920      	cbnz	r0, 400f08 <timer_start+0x24>
	_timer_start(&descr->device);
  400efe:	4620      	mov	r0, r4
  400f00:	4b06      	ldr	r3, [pc, #24]	; (400f1c <timer_start+0x38>)
  400f02:	4798      	blx	r3
	return ERR_NONE;
  400f04:	2000      	movs	r0, #0
  400f06:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400f08:	f06f 0010 	mvn.w	r0, #16
}
  400f0c:	bd10      	pop	{r4, pc}
  400f0e:	bf00      	nop
  400f10:	00405460 	.word	0x00405460
  400f14:	00401065 	.word	0x00401065
  400f18:	00401c4d 	.word	0x00401c4d
  400f1c:	00401c41 	.word	0x00401c41

00400f20 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f22:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400f24:	4605      	mov	r5, r0
  400f26:	460f      	mov	r7, r1
  400f28:	2800      	cmp	r0, #0
  400f2a:	bf18      	it	ne
  400f2c:	2900      	cmpne	r1, #0
  400f2e:	d002      	beq.n	400f36 <usart_sync_write+0x16>
  400f30:	bb0a      	cbnz	r2, 400f76 <usart_sync_write+0x56>
  400f32:	2000      	movs	r0, #0
  400f34:	e000      	b.n	400f38 <usart_sync_write+0x18>
  400f36:	2000      	movs	r0, #0
  400f38:	22f1      	movs	r2, #241	; 0xf1
  400f3a:	4910      	ldr	r1, [pc, #64]	; (400f7c <usart_sync_write+0x5c>)
  400f3c:	4b10      	ldr	r3, [pc, #64]	; (400f80 <usart_sync_write+0x60>)
  400f3e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400f40:	f105 0408 	add.w	r4, r5, #8
  400f44:	4620      	mov	r0, r4
  400f46:	4b0f      	ldr	r3, [pc, #60]	; (400f84 <usart_sync_write+0x64>)
  400f48:	4798      	blx	r3
  400f4a:	2800      	cmp	r0, #0
  400f4c:	d0f8      	beq.n	400f40 <usart_sync_write+0x20>
  400f4e:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400f50:	5d79      	ldrb	r1, [r7, r5]
  400f52:	4620      	mov	r0, r4
  400f54:	4b0c      	ldr	r3, [pc, #48]	; (400f88 <usart_sync_write+0x68>)
  400f56:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400f58:	4620      	mov	r0, r4
  400f5a:	4b0a      	ldr	r3, [pc, #40]	; (400f84 <usart_sync_write+0x64>)
  400f5c:	4798      	blx	r3
  400f5e:	2800      	cmp	r0, #0
  400f60:	d0fa      	beq.n	400f58 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  400f62:	3501      	adds	r5, #1
  400f64:	42b5      	cmp	r5, r6
  400f66:	d3f3      	bcc.n	400f50 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400f68:	4620      	mov	r0, r4
  400f6a:	4b08      	ldr	r3, [pc, #32]	; (400f8c <usart_sync_write+0x6c>)
  400f6c:	4798      	blx	r3
  400f6e:	2800      	cmp	r0, #0
  400f70:	d0fa      	beq.n	400f68 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  400f72:	4628      	mov	r0, r5
  400f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400f76:	2001      	movs	r0, #1
  400f78:	e7de      	b.n	400f38 <usart_sync_write+0x18>
  400f7a:	bf00      	nop
  400f7c:	00405478 	.word	0x00405478
  400f80:	00401065 	.word	0x00401065
  400f84:	00401e29 	.word	0x00401e29
  400f88:	00401de1 	.word	0x00401de1
  400f8c:	00401e51 	.word	0x00401e51

00400f90 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f94:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400f96:	4605      	mov	r5, r0
  400f98:	4688      	mov	r8, r1
  400f9a:	2800      	cmp	r0, #0
  400f9c:	bf18      	it	ne
  400f9e:	2900      	cmpne	r1, #0
  400fa0:	d002      	beq.n	400fa8 <usart_sync_read+0x18>
  400fa2:	b9d2      	cbnz	r2, 400fda <usart_sync_read+0x4a>
  400fa4:	2000      	movs	r0, #0
  400fa6:	e000      	b.n	400faa <usart_sync_read+0x1a>
  400fa8:	2000      	movs	r0, #0
  400faa:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400fae:	490c      	ldr	r1, [pc, #48]	; (400fe0 <usart_sync_read+0x50>)
  400fb0:	4b0c      	ldr	r3, [pc, #48]	; (400fe4 <usart_sync_read+0x54>)
  400fb2:	4798      	blx	r3
	uint32_t                      offset = 0;
  400fb4:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400fb6:	f105 0408 	add.w	r4, r5, #8
  400fba:	4620      	mov	r0, r4
  400fbc:	4b0a      	ldr	r3, [pc, #40]	; (400fe8 <usart_sync_read+0x58>)
  400fbe:	4798      	blx	r3
  400fc0:	2800      	cmp	r0, #0
  400fc2:	d0f8      	beq.n	400fb6 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400fc4:	4620      	mov	r0, r4
  400fc6:	4b09      	ldr	r3, [pc, #36]	; (400fec <usart_sync_read+0x5c>)
  400fc8:	4798      	blx	r3
  400fca:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400fce:	3601      	adds	r6, #1
  400fd0:	42be      	cmp	r6, r7
  400fd2:	d3f0      	bcc.n	400fb6 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400fd4:	4630      	mov	r0, r6
  400fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400fda:	2001      	movs	r0, #1
  400fdc:	e7e5      	b.n	400faa <usart_sync_read+0x1a>
  400fde:	bf00      	nop
  400fe0:	00405478 	.word	0x00405478
  400fe4:	00401065 	.word	0x00401065
  400fe8:	00401e79 	.word	0x00401e79
  400fec:	00401e05 	.word	0x00401e05

00400ff0 <usart_sync_init>:
{
  400ff0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400ff2:	4604      	mov	r4, r0
  400ff4:	460d      	mov	r5, r1
  400ff6:	2800      	cmp	r0, #0
  400ff8:	bf18      	it	ne
  400ffa:	2900      	cmpne	r1, #0
  400ffc:	bf14      	ite	ne
  400ffe:	2001      	movne	r0, #1
  401000:	2000      	moveq	r0, #0
  401002:	2234      	movs	r2, #52	; 0x34
  401004:	4907      	ldr	r1, [pc, #28]	; (401024 <usart_sync_init+0x34>)
  401006:	4b08      	ldr	r3, [pc, #32]	; (401028 <usart_sync_init+0x38>)
  401008:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  40100a:	4629      	mov	r1, r5
  40100c:	f104 0008 	add.w	r0, r4, #8
  401010:	4b06      	ldr	r3, [pc, #24]	; (40102c <usart_sync_init+0x3c>)
  401012:	4798      	blx	r3
	if (init_status) {
  401014:	4603      	mov	r3, r0
  401016:	b918      	cbnz	r0, 401020 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  401018:	4a05      	ldr	r2, [pc, #20]	; (401030 <usart_sync_init+0x40>)
  40101a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  40101c:	4a05      	ldr	r2, [pc, #20]	; (401034 <usart_sync_init+0x44>)
  40101e:	6022      	str	r2, [r4, #0]
}
  401020:	4618      	mov	r0, r3
  401022:	bd38      	pop	{r3, r4, r5, pc}
  401024:	00405478 	.word	0x00405478
  401028:	00401065 	.word	0x00401065
  40102c:	00401d75 	.word	0x00401d75
  401030:	00400f91 	.word	0x00400f91
  401034:	00400f21 	.word	0x00400f21

00401038 <usart_sync_enable>:
{
  401038:	b510      	push	{r4, lr}
	ASSERT(descr);
  40103a:	4604      	mov	r4, r0
  40103c:	2253      	movs	r2, #83	; 0x53
  40103e:	4906      	ldr	r1, [pc, #24]	; (401058 <usart_sync_enable+0x20>)
  401040:	3000      	adds	r0, #0
  401042:	bf18      	it	ne
  401044:	2001      	movne	r0, #1
  401046:	4b05      	ldr	r3, [pc, #20]	; (40105c <usart_sync_enable+0x24>)
  401048:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  40104a:	f104 0008 	add.w	r0, r4, #8
  40104e:	4b04      	ldr	r3, [pc, #16]	; (401060 <usart_sync_enable+0x28>)
  401050:	4798      	blx	r3
}
  401052:	2000      	movs	r0, #0
  401054:	bd10      	pop	{r4, pc}
  401056:	bf00      	nop
  401058:	00405478 	.word	0x00405478
  40105c:	00401065 	.word	0x00401065
  401060:	00401dad 	.word	0x00401dad

00401064 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401064:	b900      	cbnz	r0, 401068 <assert+0x4>
		__asm("BKPT #0");
  401066:	be00      	bkpt	0x0000
  401068:	4770      	bx	lr

0040106a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  40106a:	6803      	ldr	r3, [r0, #0]
  40106c:	b11b      	cbz	r3, 401076 <is_list_element+0xc>
		if (it == element) {
  40106e:	428b      	cmp	r3, r1
  401070:	d003      	beq.n	40107a <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  401072:	681b      	ldr	r3, [r3, #0]
  401074:	e7fa      	b.n	40106c <is_list_element+0x2>
			return true;
		}
	}

	return false;
  401076:	2000      	movs	r0, #0
  401078:	4770      	bx	lr
			return true;
  40107a:	2001      	movs	r0, #1
}
  40107c:	4770      	bx	lr
	...

00401080 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  401080:	b538      	push	{r3, r4, r5, lr}
  401082:	4604      	mov	r4, r0
  401084:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  401086:	4b06      	ldr	r3, [pc, #24]	; (4010a0 <list_insert_as_head+0x20>)
  401088:	4798      	blx	r3
  40108a:	f080 0001 	eor.w	r0, r0, #1
  40108e:	2239      	movs	r2, #57	; 0x39
  401090:	4904      	ldr	r1, [pc, #16]	; (4010a4 <list_insert_as_head+0x24>)
  401092:	b2c0      	uxtb	r0, r0
  401094:	4b04      	ldr	r3, [pc, #16]	; (4010a8 <list_insert_as_head+0x28>)
  401096:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  401098:	6823      	ldr	r3, [r4, #0]
  40109a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  40109c:	6025      	str	r5, [r4, #0]
  40109e:	bd38      	pop	{r3, r4, r5, pc}
  4010a0:	0040106b 	.word	0x0040106b
  4010a4:	00405494 	.word	0x00405494
  4010a8:	00401065 	.word	0x00401065

004010ac <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  4010ac:	6803      	ldr	r3, [r0, #0]
  4010ae:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  4010b0:	6001      	str	r1, [r0, #0]
  4010b2:	4770      	bx	lr

004010b4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  4010b4:	6803      	ldr	r3, [r0, #0]
  4010b6:	b11b      	cbz	r3, 4010c0 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  4010b8:	681a      	ldr	r2, [r3, #0]
  4010ba:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  4010bc:	4618      	mov	r0, r3
  4010be:	4770      	bx	lr
	}

	return NULL;
  4010c0:	2000      	movs	r0, #0
}
  4010c2:	4770      	bx	lr

004010c4 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  4010c4:	b570      	push	{r4, r5, r6, lr}
  4010c6:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  4010c8:	4604      	mov	r4, r0
  4010ca:	460e      	mov	r6, r1
  4010cc:	2800      	cmp	r0, #0
  4010ce:	bf18      	it	ne
  4010d0:	2900      	cmpne	r1, #0
  4010d2:	d002      	beq.n	4010da <ringbuffer_init+0x16>
  4010d4:	b97a      	cbnz	r2, 4010f6 <ringbuffer_init+0x32>
  4010d6:	2000      	movs	r0, #0
  4010d8:	e000      	b.n	4010dc <ringbuffer_init+0x18>
  4010da:	2000      	movs	r0, #0
  4010dc:	2228      	movs	r2, #40	; 0x28
  4010de:	4908      	ldr	r1, [pc, #32]	; (401100 <ringbuffer_init+0x3c>)
  4010e0:	4b08      	ldr	r3, [pc, #32]	; (401104 <ringbuffer_init+0x40>)
  4010e2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  4010e4:	1e6b      	subs	r3, r5, #1
  4010e6:	421d      	tst	r5, r3
  4010e8:	d107      	bne.n	4010fa <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  4010ea:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  4010ec:	2000      	movs	r0, #0
  4010ee:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  4010f0:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  4010f2:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  4010f4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  4010f6:	2001      	movs	r0, #1
  4010f8:	e7f0      	b.n	4010dc <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  4010fa:	f06f 000c 	mvn.w	r0, #12
}
  4010fe:	bd70      	pop	{r4, r5, r6, pc}
  401100:	004054b4 	.word	0x004054b4
  401104:	00401065 	.word	0x00401065

00401108 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  401108:	b538      	push	{r3, r4, r5, lr}
  40110a:	460d      	mov	r5, r1
	ASSERT(rb);
  40110c:	4604      	mov	r4, r0
  40110e:	2251      	movs	r2, #81	; 0x51
  401110:	490b      	ldr	r1, [pc, #44]	; (401140 <ringbuffer_put+0x38>)
  401112:	3000      	adds	r0, #0
  401114:	bf18      	it	ne
  401116:	2001      	movne	r0, #1
  401118:	4b0a      	ldr	r3, [pc, #40]	; (401144 <ringbuffer_put+0x3c>)
  40111a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  40111c:	6822      	ldr	r2, [r4, #0]
  40111e:	68e3      	ldr	r3, [r4, #12]
  401120:	6861      	ldr	r1, [r4, #4]
  401122:	400b      	ands	r3, r1
  401124:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  401126:	68e3      	ldr	r3, [r4, #12]
  401128:	68a2      	ldr	r2, [r4, #8]
  40112a:	1a9a      	subs	r2, r3, r2
  40112c:	6861      	ldr	r1, [r4, #4]
  40112e:	428a      	cmp	r2, r1
  401130:	d901      	bls.n	401136 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  401132:	1a59      	subs	r1, r3, r1
  401134:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  401136:	3301      	adds	r3, #1
  401138:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  40113a:	2000      	movs	r0, #0
  40113c:	bd38      	pop	{r3, r4, r5, pc}
  40113e:	bf00      	nop
  401140:	004054b4 	.word	0x004054b4
  401144:	00401065 	.word	0x00401065

00401148 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  401148:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  40114a:	4a06      	ldr	r2, [pc, #24]	; (401164 <_sbrk+0x1c>)
  40114c:	6812      	ldr	r2, [r2, #0]
  40114e:	b122      	cbz	r2, 40115a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401150:	4a04      	ldr	r2, [pc, #16]	; (401164 <_sbrk+0x1c>)
  401152:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  401154:	4403      	add	r3, r0
  401156:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  401158:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40115a:	4903      	ldr	r1, [pc, #12]	; (401168 <_sbrk+0x20>)
  40115c:	4a01      	ldr	r2, [pc, #4]	; (401164 <_sbrk+0x1c>)
  40115e:	6011      	str	r1, [r2, #0]
  401160:	e7f6      	b.n	401150 <_sbrk+0x8>
  401162:	bf00      	nop
  401164:	20400334 	.word	0x20400334
  401168:	20400cb0 	.word	0x20400cb0

0040116c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  40116c:	f04f 30ff 	mov.w	r0, #4294967295
  401170:	4770      	bx	lr

00401172 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  401172:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401176:	604b      	str	r3, [r1, #4]

	return 0;
}
  401178:	2000      	movs	r0, #0
  40117a:	4770      	bx	lr

0040117c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  40117c:	2001      	movs	r0, #1
  40117e:	4770      	bx	lr

00401180 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  401180:	2000      	movs	r0, #0
  401182:	4770      	bx	lr

00401184 <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  401184:	6943      	ldr	r3, [r0, #20]
  401186:	4a07      	ldr	r2, [pc, #28]	; (4011a4 <_afec_get_irq_num+0x20>)
  401188:	4293      	cmp	r3, r2
  40118a:	d005      	beq.n	401198 <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  40118c:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  401190:	4293      	cmp	r3, r2
  401192:	d103      	bne.n	40119c <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  401194:	2028      	movs	r0, #40	; 0x28
  401196:	4770      	bx	lr
		return AFEC0_IRQn;
  401198:	201d      	movs	r0, #29
  40119a:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  40119c:	f04f 30ff 	mov.w	r0, #4294967295
}
  4011a0:	4770      	bx	lr
  4011a2:	bf00      	nop
  4011a4:	4003c000 	.word	0x4003c000

004011a8 <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  4011a8:	4b06      	ldr	r3, [pc, #24]	; (4011c4 <_afec_init_irq_param+0x1c>)
  4011aa:	4298      	cmp	r0, r3
  4011ac:	d003      	beq.n	4011b6 <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  4011ae:	4b06      	ldr	r3, [pc, #24]	; (4011c8 <_afec_init_irq_param+0x20>)
  4011b0:	4298      	cmp	r0, r3
  4011b2:	d003      	beq.n	4011bc <_afec_init_irq_param+0x14>
  4011b4:	4770      	bx	lr
		_afec0_dev = dev;
  4011b6:	4b05      	ldr	r3, [pc, #20]	; (4011cc <_afec_init_irq_param+0x24>)
  4011b8:	6019      	str	r1, [r3, #0]
  4011ba:	e7f8      	b.n	4011ae <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  4011bc:	4b03      	ldr	r3, [pc, #12]	; (4011cc <_afec_init_irq_param+0x24>)
  4011be:	6059      	str	r1, [r3, #4]
	}
}
  4011c0:	e7f8      	b.n	4011b4 <_afec_init_irq_param+0xc>
  4011c2:	bf00      	nop
  4011c4:	4003c000 	.word	0x4003c000
  4011c8:	40064000 	.word	0x40064000
  4011cc:	20400338 	.word	0x20400338

004011d0 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  4011d0:	2364      	movs	r3, #100	; 0x64
  4011d2:	4a1d      	ldr	r2, [pc, #116]	; (401248 <_afec_init+0x78>)
  4011d4:	fb03 2301 	mla	r3, r3, r1, r2
  4011d8:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  4011da:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  4011dc:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  4011de:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  4011e0:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  4011e2:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  4011e4:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  4011e6:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  4011e8:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  4011ea:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  4011ec:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  4011ee:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  4011f0:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  4011f2:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  4011f4:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  4011f6:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  4011fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  4011fc:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  401200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  401202:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  401206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  401208:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  40120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  40120e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401212:	2200      	movs	r2, #0
  401214:	2a0b      	cmp	r2, #11
  401216:	d814      	bhi.n	401242 <_afec_init+0x72>
{
  401218:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  40121a:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  40121c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401220:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401224:	4413      	add	r3, r2
  401226:	330c      	adds	r3, #12
  401228:	4c07      	ldr	r4, [pc, #28]	; (401248 <_afec_init+0x78>)
  40122a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40122e:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  401230:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401232:	3201      	adds	r2, #1
  401234:	b2d2      	uxtb	r2, r2
  401236:	2a0b      	cmp	r2, #11
  401238:	d9ef      	bls.n	40121a <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  40123a:	2000      	movs	r0, #0
  40123c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401240:	4770      	bx	lr
  401242:	2000      	movs	r0, #0
  401244:	4770      	bx	lr
  401246:	bf00      	nop
  401248:	004054d8 	.word	0x004054d8

0040124c <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  40124c:	b530      	push	{r4, r5, lr}
  40124e:	b083      	sub	sp, #12
  401250:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  401252:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  401254:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  401256:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  401258:	400b      	ands	r3, r1
  40125a:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  40125c:	9b01      	ldr	r3, [sp, #4]
  40125e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401262:	d10e      	bne.n	401282 <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  401264:	9b01      	ldr	r3, [sp, #4]
  401266:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  40126a:	d10e      	bne.n	40128a <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  40126c:	9b01      	ldr	r3, [sp, #4]
  40126e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401272:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  401274:	9c01      	ldr	r4, [sp, #4]
  401276:	fab4 f484 	clz	r4, r4
  40127a:	f1c4 0420 	rsb	r4, r4, #32
  40127e:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401280:	e01f      	b.n	4012c2 <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  401282:	6803      	ldr	r3, [r0, #0]
  401284:	2100      	movs	r1, #0
  401286:	4798      	blx	r3
  401288:	e7ec      	b.n	401264 <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  40128a:	686b      	ldr	r3, [r5, #4]
  40128c:	2100      	movs	r1, #0
  40128e:	4628      	mov	r0, r5
  401290:	4798      	blx	r3
  401292:	e7eb      	b.n	40126c <_afec_interrupt_handler+0x20>
		cnt--;
  401294:	3c01      	subs	r4, #1
  401296:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  401298:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  40129a:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  40129c:	68ab      	ldr	r3, [r5, #8]
  40129e:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  4012a0:	6e92      	ldr	r2, [r2, #104]	; 0x68
  4012a2:	b292      	uxth	r2, r2
  4012a4:	4621      	mov	r1, r4
  4012a6:	4628      	mov	r0, r5
  4012a8:	4798      	blx	r3
		status &= ~(1 << cnt);
  4012aa:	2301      	movs	r3, #1
  4012ac:	40a3      	lsls	r3, r4
  4012ae:	9c01      	ldr	r4, [sp, #4]
  4012b0:	ea24 0403 	bic.w	r4, r4, r3
  4012b4:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  4012b6:	9c01      	ldr	r4, [sp, #4]
  4012b8:	fab4 f484 	clz	r4, r4
  4012bc:	f1c4 0420 	rsb	r4, r4, #32
  4012c0:	b2e4      	uxtb	r4, r4
	while (cnt) {
  4012c2:	2c00      	cmp	r4, #0
  4012c4:	d1e6      	bne.n	401294 <_afec_interrupt_handler+0x48>
	}
}
  4012c6:	b003      	add	sp, #12
  4012c8:	bd30      	pop	{r4, r5, pc}
	...

004012cc <_afec_get_hardware_index>:
{
  4012cc:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  4012ce:	4b09      	ldr	r3, [pc, #36]	; (4012f4 <_afec_get_hardware_index+0x28>)
  4012d0:	4298      	cmp	r0, r3
  4012d2:	d00a      	beq.n	4012ea <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  4012d4:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4012d8:	4298      	cmp	r0, r3
  4012da:	d008      	beq.n	4012ee <_afec_get_hardware_index+0x22>
	ASSERT(false);
  4012dc:	22a7      	movs	r2, #167	; 0xa7
  4012de:	4906      	ldr	r1, [pc, #24]	; (4012f8 <_afec_get_hardware_index+0x2c>)
  4012e0:	2000      	movs	r0, #0
  4012e2:	4b06      	ldr	r3, [pc, #24]	; (4012fc <_afec_get_hardware_index+0x30>)
  4012e4:	4798      	blx	r3
	return 0;
  4012e6:	2000      	movs	r0, #0
  4012e8:	bd08      	pop	{r3, pc}
		return 0;
  4012ea:	2000      	movs	r0, #0
  4012ec:	bd08      	pop	{r3, pc}
		return 1;
  4012ee:	2001      	movs	r0, #1
}
  4012f0:	bd08      	pop	{r3, pc}
  4012f2:	bf00      	nop
  4012f4:	4003c000 	.word	0x4003c000
  4012f8:	004055a0 	.word	0x004055a0
  4012fc:	00401065 	.word	0x00401065

00401300 <_afec_get_regs>:
{
  401300:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  401302:	4b09      	ldr	r3, [pc, #36]	; (401328 <_afec_get_regs+0x28>)
  401304:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401306:	2300      	movs	r3, #0
  401308:	2b01      	cmp	r3, #1
  40130a:	d809      	bhi.n	401320 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  40130c:	2264      	movs	r2, #100	; 0x64
  40130e:	fb02 f203 	mul.w	r2, r2, r3
  401312:	4906      	ldr	r1, [pc, #24]	; (40132c <_afec_get_regs+0x2c>)
  401314:	5c8a      	ldrb	r2, [r1, r2]
  401316:	4290      	cmp	r0, r2
  401318:	d003      	beq.n	401322 <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  40131a:	3301      	adds	r3, #1
  40131c:	b2db      	uxtb	r3, r3
  40131e:	e7f3      	b.n	401308 <_afec_get_regs+0x8>
	return 0;
  401320:	2300      	movs	r3, #0
}
  401322:	4618      	mov	r0, r3
  401324:	bd08      	pop	{r3, pc}
  401326:	bf00      	nop
  401328:	004012cd 	.word	0x004012cd
  40132c:	004054d8 	.word	0x004054d8

00401330 <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  401330:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  401332:	4b02      	ldr	r3, [pc, #8]	; (40133c <AFEC0_Handler+0xc>)
  401334:	6818      	ldr	r0, [r3, #0]
  401336:	4b02      	ldr	r3, [pc, #8]	; (401340 <AFEC0_Handler+0x10>)
  401338:	4798      	blx	r3
  40133a:	bd08      	pop	{r3, pc}
  40133c:	20400338 	.word	0x20400338
  401340:	0040124d 	.word	0x0040124d

00401344 <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  401344:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  401346:	4b02      	ldr	r3, [pc, #8]	; (401350 <AFEC1_Handler+0xc>)
  401348:	6858      	ldr	r0, [r3, #4]
  40134a:	4b02      	ldr	r3, [pc, #8]	; (401354 <AFEC1_Handler+0x10>)
  40134c:	4798      	blx	r3
  40134e:	bd08      	pop	{r3, pc}
  401350:	20400338 	.word	0x20400338
  401354:	0040124d 	.word	0x0040124d

00401358 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  401358:	b570      	push	{r4, r5, r6, lr}
  40135a:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  40135c:	4605      	mov	r5, r0
  40135e:	f44f 72a1 	mov.w	r2, #322	; 0x142
  401362:	4923      	ldr	r1, [pc, #140]	; (4013f0 <_adc_async_init+0x98>)
  401364:	3000      	adds	r0, #0
  401366:	bf18      	it	ne
  401368:	2001      	movne	r0, #1
  40136a:	4b22      	ldr	r3, [pc, #136]	; (4013f4 <_adc_async_init+0x9c>)
  40136c:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  40136e:	4620      	mov	r0, r4
  401370:	4b21      	ldr	r3, [pc, #132]	; (4013f8 <_adc_async_init+0xa0>)
  401372:	4798      	blx	r3
  401374:	4601      	mov	r1, r0
  401376:	4620      	mov	r0, r4
  401378:	4b20      	ldr	r3, [pc, #128]	; (4013fc <_adc_async_init+0xa4>)
  40137a:	4798      	blx	r3
	if (init_status) {
  40137c:	4606      	mov	r6, r0
  40137e:	b108      	cbz	r0, 401384 <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  401380:	4630      	mov	r0, r6
  401382:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  401384:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  401386:	4629      	mov	r1, r5
  401388:	4620      	mov	r0, r4
  40138a:	4b1d      	ldr	r3, [pc, #116]	; (401400 <_adc_async_init+0xa8>)
  40138c:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  40138e:	4628      	mov	r0, r5
  401390:	4b1c      	ldr	r3, [pc, #112]	; (401404 <_adc_async_init+0xac>)
  401392:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401394:	2800      	cmp	r0, #0
  401396:	db0d      	blt.n	4013b4 <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401398:	0943      	lsrs	r3, r0, #5
  40139a:	f000 001f 	and.w	r0, r0, #31
  40139e:	2201      	movs	r2, #1
  4013a0:	fa02 f000 	lsl.w	r0, r2, r0
  4013a4:	3320      	adds	r3, #32
  4013a6:	4a18      	ldr	r2, [pc, #96]	; (401408 <_adc_async_init+0xb0>)
  4013a8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4013ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4013b0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  4013b4:	4628      	mov	r0, r5
  4013b6:	4b13      	ldr	r3, [pc, #76]	; (401404 <_adc_async_init+0xac>)
  4013b8:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4013ba:	2800      	cmp	r0, #0
  4013bc:	db09      	blt.n	4013d2 <_adc_async_init+0x7a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013be:	0943      	lsrs	r3, r0, #5
  4013c0:	f000 001f 	and.w	r0, r0, #31
  4013c4:	2201      	movs	r2, #1
  4013c6:	fa02 f000 	lsl.w	r0, r2, r0
  4013ca:	3360      	adds	r3, #96	; 0x60
  4013cc:	4a0e      	ldr	r2, [pc, #56]	; (401408 <_adc_async_init+0xb0>)
  4013ce:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  4013d2:	4628      	mov	r0, r5
  4013d4:	4b0b      	ldr	r3, [pc, #44]	; (401404 <_adc_async_init+0xac>)
  4013d6:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  4013d8:	2800      	cmp	r0, #0
  4013da:	dbd1      	blt.n	401380 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013dc:	0942      	lsrs	r2, r0, #5
  4013de:	f000 001f 	and.w	r0, r0, #31
  4013e2:	2301      	movs	r3, #1
  4013e4:	fa03 f000 	lsl.w	r0, r3, r0
  4013e8:	4b07      	ldr	r3, [pc, #28]	; (401408 <_adc_async_init+0xb0>)
  4013ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  4013ee:	e7c7      	b.n	401380 <_adc_async_init+0x28>
  4013f0:	004055a0 	.word	0x004055a0
  4013f4:	00401065 	.word	0x00401065
  4013f8:	00401301 	.word	0x00401301
  4013fc:	004011d1 	.word	0x004011d1
  401400:	004011a9 	.word	0x004011a9
  401404:	00401185 	.word	0x00401185
  401408:	e000e100 	.word	0xe000e100

0040140c <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  40140c:	6942      	ldr	r2, [r0, #20]
  40140e:	2301      	movs	r3, #1
  401410:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  401414:	6151      	str	r1, [r2, #20]
  401416:	4770      	bx	lr

00401418 <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  401418:	2002      	movs	r0, #2
  40141a:	4770      	bx	lr

0040141c <_adc_async_convert>:
/**
 * \brief Make conversion
 */
void _adc_async_convert(struct _adc_async_device *const device)
{
	hri_afec_write_CR_reg(device->hw, AFEC_CR_START);
  40141c:	6943      	ldr	r3, [r0, #20]
}

static inline void hri_afec_write_CR_reg(const void *const hw, hri_afec_cr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CR = data;
  40141e:	2202      	movs	r2, #2
  401420:	601a      	str	r2, [r3, #0]
  401422:	4770      	bx	lr

00401424 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  401424:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401428:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  40142c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401430:	fb03 f000 	mul.w	r0, r3, r0
  401434:	4770      	bx	lr
	...

00401438 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  401438:	b500      	push	{lr}
  40143a:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  40143c:	a801      	add	r0, sp, #4
  40143e:	4b14      	ldr	r3, [pc, #80]	; (401490 <_init_chip+0x58>)
  401440:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  401442:	4a14      	ldr	r2, [pc, #80]	; (401494 <_init_chip+0x5c>)
  401444:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40144c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  401450:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401454:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  401458:	a801      	add	r0, sp, #4
  40145a:	4b0f      	ldr	r3, [pc, #60]	; (401498 <_init_chip+0x60>)
  40145c:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  40145e:	4a0f      	ldr	r2, [pc, #60]	; (40149c <_init_chip+0x64>)
  401460:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  401462:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  401466:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  40146a:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40146c:	4b0c      	ldr	r3, [pc, #48]	; (4014a0 <_init_chip+0x68>)
  40146e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  401472:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401476:	d104      	bne.n	401482 <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401478:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40147c:	4b08      	ldr	r3, [pc, #32]	; (4014a0 <_init_chip+0x68>)
  40147e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  401482:	4b08      	ldr	r3, [pc, #32]	; (4014a4 <_init_chip+0x6c>)
  401484:	4798      	blx	r3

#endif
	_pmc_init();
  401486:	4b08      	ldr	r3, [pc, #32]	; (4014a8 <_init_chip+0x70>)
  401488:	4798      	blx	r3
}
  40148a:	b003      	add	sp, #12
  40148c:	f85d fb04 	ldr.w	pc, [sp], #4
  401490:	00400c05 	.word	0x00400c05
  401494:	e000ed00 	.word	0xe000ed00
  401498:	00400c13 	.word	0x00400c13
  40149c:	400e0c00 	.word	0x400e0c00
  4014a0:	400e0600 	.word	0x400e0600
  4014a4:	00401ea5 	.word	0x00401ea5
  4014a8:	0040182d 	.word	0x0040182d

004014ac <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  4014ac:	b538      	push	{r3, r4, r5, lr}
  4014ae:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  4014b0:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  4014b2:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  4014b4:	f014 0f01 	tst.w	r4, #1
  4014b8:	d11a      	bne.n	4014f0 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  4014ba:	f414 7f00 	tst.w	r4, #512	; 0x200
  4014be:	d11a      	bne.n	4014f6 <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  4014c0:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  4014c4:	d11b      	bne.n	4014fe <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  4014c6:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  4014ca:	d11d      	bne.n	401508 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  4014cc:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  4014d0:	d008      	beq.n	4014e4 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4014d2:	68eb      	ldr	r3, [r5, #12]
  4014d4:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  4014d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
  4014d8:	f012 0f20 	tst.w	r2, #32
  4014dc:	d019      	beq.n	401512 <_can_irq_handler+0x66>
  4014de:	2102      	movs	r1, #2
  4014e0:	4628      	mov	r0, r5
  4014e2:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  4014e4:	f014 0f08 	tst.w	r4, #8
  4014e8:	d115      	bne.n	401516 <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  4014ea:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  4014ec:	651c      	str	r4, [r3, #80]	; 0x50
  4014ee:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  4014f0:	6883      	ldr	r3, [r0, #8]
  4014f2:	4798      	blx	r3
  4014f4:	e7e1      	b.n	4014ba <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  4014f6:	686b      	ldr	r3, [r5, #4]
  4014f8:	4628      	mov	r0, r5
  4014fa:	4798      	blx	r3
  4014fc:	e7e0      	b.n	4014c0 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  4014fe:	68eb      	ldr	r3, [r5, #12]
  401500:	2103      	movs	r1, #3
  401502:	4628      	mov	r0, r5
  401504:	4798      	blx	r3
  401506:	e7de      	b.n	4014c6 <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  401508:	68eb      	ldr	r3, [r5, #12]
  40150a:	2100      	movs	r1, #0
  40150c:	4628      	mov	r0, r5
  40150e:	4798      	blx	r3
  401510:	e7dc      	b.n	4014cc <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401512:	2101      	movs	r1, #1
  401514:	e7e4      	b.n	4014e0 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  401516:	68eb      	ldr	r3, [r5, #12]
  401518:	2104      	movs	r1, #4
  40151a:	4628      	mov	r0, r5
  40151c:	4798      	blx	r3
  40151e:	e7e4      	b.n	4014ea <_can_irq_handler+0x3e>

00401520 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  401520:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  401522:	4b02      	ldr	r3, [pc, #8]	; (40152c <MCAN1_INT0_Handler+0xc>)
  401524:	6a98      	ldr	r0, [r3, #40]	; 0x28
  401526:	4b02      	ldr	r3, [pc, #8]	; (401530 <MCAN1_INT0_Handler+0x10>)
  401528:	4798      	blx	r3
  40152a:	bd08      	pop	{r3, pc}
  40152c:	20400340 	.word	0x20400340
  401530:	004014ad 	.word	0x004014ad

00401534 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401534:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  401536:	2500      	movs	r5, #0
  401538:	428d      	cmp	r5, r1
  40153a:	d210      	bcs.n	40155e <_ffs+0x2a>
  40153c:	2201      	movs	r2, #1
  40153e:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401540:	2b1f      	cmp	r3, #31
  401542:	d80a      	bhi.n	40155a <_ffs+0x26>
			if (v[i] & bit) {
  401544:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401548:	4222      	tst	r2, r4
  40154a:	d102      	bne.n	401552 <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  40154c:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40154e:	3301      	adds	r3, #1
  401550:	e7f6      	b.n	401540 <_ffs+0xc>
				return i * 32 + j;
  401552:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401556:	bc30      	pop	{r4, r5}
  401558:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  40155a:	3501      	adds	r5, #1
  40155c:	e7ec      	b.n	401538 <_ffs+0x4>
	return -1;
  40155e:	f04f 30ff 	mov.w	r0, #4294967295
  401562:	e7f8      	b.n	401556 <_ffs+0x22>

00401564 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401564:	b510      	push	{r4, lr}
  401566:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401568:	2300      	movs	r3, #0
  40156a:	9301      	str	r3, [sp, #4]
  40156c:	9302      	str	r3, [sp, #8]
  40156e:	9303      	str	r3, [sp, #12]
  401570:	9304      	str	r3, [sp, #16]
  401572:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401574:	4b21      	ldr	r3, [pc, #132]	; (4015fc <_ext_irq_handler+0x98>)
  401576:	6818      	ldr	r0, [r3, #0]
  401578:	22f8      	movs	r2, #248	; 0xf8
  40157a:	4921      	ldr	r1, [pc, #132]	; (401600 <_ext_irq_handler+0x9c>)
  40157c:	3000      	adds	r0, #0
  40157e:	bf18      	it	ne
  401580:	2001      	movne	r0, #1
  401582:	4b20      	ldr	r3, [pc, #128]	; (401604 <_ext_irq_handler+0xa0>)
  401584:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401586:	4b20      	ldr	r3, [pc, #128]	; (401608 <_ext_irq_handler+0xa4>)
  401588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40158a:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  40158c:	4013      	ands	r3, r2
  40158e:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401590:	491e      	ldr	r1, [pc, #120]	; (40160c <_ext_irq_handler+0xa8>)
  401592:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401594:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401596:	400a      	ands	r2, r1
  401598:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  40159a:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  40159c:	e025      	b.n	4015ea <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  40159e:	4b17      	ldr	r3, [pc, #92]	; (4015fc <_ext_irq_handler+0x98>)
  4015a0:	681b      	ldr	r3, [r3, #0]
  4015a2:	4620      	mov	r0, r4
  4015a4:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  4015a6:	1163      	asrs	r3, r4, #5
  4015a8:	f004 041f 	and.w	r4, r4, #31
  4015ac:	2201      	movs	r2, #1
  4015ae:	fa02 f404 	lsl.w	r4, r2, r4
  4015b2:	aa06      	add	r2, sp, #24
  4015b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4015b8:	f853 2c14 	ldr.w	r2, [r3, #-20]
  4015bc:	ea22 0204 	bic.w	r2, r2, r4
  4015c0:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  4015c4:	2105      	movs	r1, #5
  4015c6:	a801      	add	r0, sp, #4
  4015c8:	4b11      	ldr	r3, [pc, #68]	; (401610 <_ext_irq_handler+0xac>)
  4015ca:	4798      	blx	r3
  4015cc:	4604      	mov	r4, r0
		while (-1 != pos) {
  4015ce:	f1b4 3fff 	cmp.w	r4, #4294967295
  4015d2:	d1e4      	bne.n	40159e <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  4015d4:	4a0c      	ldr	r2, [pc, #48]	; (401608 <_ext_irq_handler+0xa4>)
  4015d6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4015d8:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  4015da:	400b      	ands	r3, r1
  4015dc:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  4015de:	490b      	ldr	r1, [pc, #44]	; (40160c <_ext_irq_handler+0xa8>)
  4015e0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4015e2:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4015e4:	4002      	ands	r2, r0
  4015e6:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  4015e8:	4313      	orrs	r3, r2
	while (flag_total) {
  4015ea:	b12b      	cbz	r3, 4015f8 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  4015ec:	2105      	movs	r1, #5
  4015ee:	a801      	add	r0, sp, #4
  4015f0:	4b07      	ldr	r3, [pc, #28]	; (401610 <_ext_irq_handler+0xac>)
  4015f2:	4798      	blx	r3
  4015f4:	4604      	mov	r4, r0
		while (-1 != pos) {
  4015f6:	e7ea      	b.n	4015ce <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  4015f8:	b006      	add	sp, #24
  4015fa:	bd10      	pop	{r4, pc}
  4015fc:	2040036c 	.word	0x2040036c
  401600:	004055f8 	.word	0x004055f8
  401604:	00401065 	.word	0x00401065
  401608:	400e0e00 	.word	0x400e0e00
  40160c:	400e1400 	.word	0x400e1400
  401610:	00401535 	.word	0x00401535

00401614 <_pio_get_hardware_index>:
{
  401614:	b510      	push	{r4, lr}
	ASSERT(hw);
  401616:	4604      	mov	r4, r0
  401618:	22d2      	movs	r2, #210	; 0xd2
  40161a:	4905      	ldr	r1, [pc, #20]	; (401630 <_pio_get_hardware_index+0x1c>)
  40161c:	3000      	adds	r0, #0
  40161e:	bf18      	it	ne
  401620:	2001      	movne	r0, #1
  401622:	4b04      	ldr	r3, [pc, #16]	; (401634 <_pio_get_hardware_index+0x20>)
  401624:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  401626:	4804      	ldr	r0, [pc, #16]	; (401638 <_pio_get_hardware_index+0x24>)
  401628:	4420      	add	r0, r4
}
  40162a:	f3c0 2047 	ubfx	r0, r0, #9, #8
  40162e:	bd10      	pop	{r4, pc}
  401630:	004055f8 	.word	0x004055f8
  401634:	00401065 	.word	0x00401065
  401638:	bff1f200 	.word	0xbff1f200

0040163c <_pio_get_index>:
{
  40163c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40163e:	4604      	mov	r4, r0
  401640:	22e0      	movs	r2, #224	; 0xe0
  401642:	490d      	ldr	r1, [pc, #52]	; (401678 <_pio_get_index+0x3c>)
  401644:	3000      	adds	r0, #0
  401646:	bf18      	it	ne
  401648:	2001      	movne	r0, #1
  40164a:	4b0c      	ldr	r3, [pc, #48]	; (40167c <_pio_get_index+0x40>)
  40164c:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  40164e:	4620      	mov	r0, r4
  401650:	4b0b      	ldr	r3, [pc, #44]	; (401680 <_pio_get_index+0x44>)
  401652:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401654:	2300      	movs	r3, #0
  401656:	2b01      	cmp	r3, #1
  401658:	d80b      	bhi.n	401672 <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  40165a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  40165e:	008a      	lsls	r2, r1, #2
  401660:	4908      	ldr	r1, [pc, #32]	; (401684 <_pio_get_index+0x48>)
  401662:	5c8a      	ldrb	r2, [r1, r2]
  401664:	4290      	cmp	r0, r2
  401666:	d002      	beq.n	40166e <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401668:	3301      	adds	r3, #1
  40166a:	b2db      	uxtb	r3, r3
  40166c:	e7f3      	b.n	401656 <_pio_get_index+0x1a>
			return i;
  40166e:	b258      	sxtb	r0, r3
  401670:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  401672:	f04f 30ff 	mov.w	r0, #4294967295
}
  401676:	bd10      	pop	{r4, pc}
  401678:	004055f8 	.word	0x004055f8
  40167c:	00401065 	.word	0x00401065
  401680:	00401615 	.word	0x00401615
  401684:	004055b8 	.word	0x004055b8

00401688 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401688:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  40168a:	4604      	mov	r4, r0
  40168c:	f240 1259 	movw	r2, #345	; 0x159
  401690:	4929      	ldr	r1, [pc, #164]	; (401738 <_pio_init+0xb0>)
  401692:	3000      	adds	r0, #0
  401694:	bf18      	it	ne
  401696:	2001      	movne	r0, #1
  401698:	4b28      	ldr	r3, [pc, #160]	; (40173c <_pio_init+0xb4>)
  40169a:	4798      	blx	r3

	i = _pio_get_index(hw);
  40169c:	4620      	mov	r0, r4
  40169e:	4b28      	ldr	r3, [pc, #160]	; (401740 <_pio_init+0xb8>)
  4016a0:	4798      	blx	r3
	if (i < 0) {
  4016a2:	2800      	cmp	r0, #0
  4016a4:	db43      	blt.n	40172e <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  4016a6:	4d27      	ldr	r5, [pc, #156]	; (401744 <_pio_init+0xbc>)
  4016a8:	00c2      	lsls	r2, r0, #3
  4016aa:	1a11      	subs	r1, r2, r0
  4016ac:	008b      	lsls	r3, r1, #2
  4016ae:	442b      	add	r3, r5
  4016b0:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  4016b2:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  4016b6:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  4016b8:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  4016bc:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  4016be:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  4016c2:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  4016c4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  4016c8:	1a10      	subs	r0, r2, r0
  4016ca:	0083      	lsls	r3, r0, #2
  4016cc:	442b      	add	r3, r5
  4016ce:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  4016d0:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  4016d4:	4620      	mov	r0, r4
  4016d6:	4b1c      	ldr	r3, [pc, #112]	; (401748 <_pio_init+0xc0>)
  4016d8:	4798      	blx	r3
  4016da:	4428      	add	r0, r5
  4016dc:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  if ((int32_t)(IRQn) >= 0)
  4016e0:	2b00      	cmp	r3, #0
  4016e2:	db0c      	blt.n	4016fe <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4016e4:	095a      	lsrs	r2, r3, #5
  4016e6:	f003 001f 	and.w	r0, r3, #31
  4016ea:	2101      	movs	r1, #1
  4016ec:	4081      	lsls	r1, r0
  4016ee:	3220      	adds	r2, #32
  4016f0:	4816      	ldr	r0, [pc, #88]	; (40174c <_pio_init+0xc4>)
  4016f2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4016f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4016fa:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  4016fe:	2b00      	cmp	r3, #0
  401700:	db08      	blt.n	401714 <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401702:	095a      	lsrs	r2, r3, #5
  401704:	f003 001f 	and.w	r0, r3, #31
  401708:	2101      	movs	r1, #1
  40170a:	4081      	lsls	r1, r0
  40170c:	3260      	adds	r2, #96	; 0x60
  40170e:	480f      	ldr	r0, [pc, #60]	; (40174c <_pio_init+0xc4>)
  401710:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401714:	2b00      	cmp	r3, #0
  401716:	db0d      	blt.n	401734 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401718:	0959      	lsrs	r1, r3, #5
  40171a:	f003 031f 	and.w	r3, r3, #31
  40171e:	2201      	movs	r2, #1
  401720:	fa02 f303 	lsl.w	r3, r2, r3
  401724:	4a09      	ldr	r2, [pc, #36]	; (40174c <_pio_init+0xc4>)
  401726:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  40172a:	2000      	movs	r0, #0
  40172c:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  40172e:	f06f 0010 	mvn.w	r0, #16
  401732:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401734:	2000      	movs	r0, #0
}
  401736:	bd38      	pop	{r3, r4, r5, pc}
  401738:	004055f8 	.word	0x004055f8
  40173c:	00401065 	.word	0x00401065
  401740:	0040163d 	.word	0x0040163d
  401744:	004055b8 	.word	0x004055b8
  401748:	00401615 	.word	0x00401615
  40174c:	e000e100 	.word	0xe000e100

00401750 <PIOD_Handler>:
{
  401750:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401752:	4b01      	ldr	r3, [pc, #4]	; (401758 <PIOD_Handler+0x8>)
  401754:	4798      	blx	r3
  401756:	bd08      	pop	{r3, pc}
  401758:	00401565 	.word	0x00401565

0040175c <PIOA_Handler>:
{
  40175c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40175e:	4b01      	ldr	r3, [pc, #4]	; (401764 <PIOA_Handler+0x8>)
  401760:	4798      	blx	r3
  401762:	bd08      	pop	{r3, pc}
  401764:	00401565 	.word	0x00401565

00401768 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401768:	b538      	push	{r3, r4, r5, lr}
  40176a:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  40176c:	4804      	ldr	r0, [pc, #16]	; (401780 <_ext_irq_init+0x18>)
  40176e:	4c05      	ldr	r4, [pc, #20]	; (401784 <_ext_irq_init+0x1c>)
  401770:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  401772:	4805      	ldr	r0, [pc, #20]	; (401788 <_ext_irq_init+0x20>)
  401774:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401776:	4b05      	ldr	r3, [pc, #20]	; (40178c <_ext_irq_init+0x24>)
  401778:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  40177a:	2000      	movs	r0, #0
  40177c:	bd38      	pop	{r3, r4, r5, pc}
  40177e:	bf00      	nop
  401780:	400e0e00 	.word	0x400e0e00
  401784:	00401689 	.word	0x00401689
  401788:	400e1400 	.word	0x400e1400
  40178c:	2040036c 	.word	0x2040036c

00401790 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  401790:	490e      	ldr	r1, [pc, #56]	; (4017cc <_pmc_init_sources+0x3c>)
  401792:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401794:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  401798:	4b0d      	ldr	r3, [pc, #52]	; (4017d0 <_pmc_init_sources+0x40>)
  40179a:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  40179c:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40179e:	4b0b      	ldr	r3, [pc, #44]	; (4017cc <_pmc_init_sources+0x3c>)
  4017a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  4017a2:	f013 0f01 	tst.w	r3, #1
  4017a6:	d0fa      	beq.n	40179e <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  4017a8:	4b08      	ldr	r3, [pc, #32]	; (4017cc <_pmc_init_sources+0x3c>)
  4017aa:	6a19      	ldr	r1, [r3, #32]
  4017ac:	4a09      	ldr	r2, [pc, #36]	; (4017d4 <_pmc_init_sources+0x44>)
  4017ae:	430a      	orrs	r2, r1
  4017b0:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4017b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4017b4:	4a08      	ldr	r2, [pc, #32]	; (4017d8 <_pmc_init_sources+0x48>)
  4017b6:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4017b8:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  4017ba:	4a08      	ldr	r2, [pc, #32]	; (4017dc <_pmc_init_sources+0x4c>)
  4017bc:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4017be:	4b03      	ldr	r3, [pc, #12]	; (4017cc <_pmc_init_sources+0x3c>)
  4017c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4017c2:	f013 0f02 	tst.w	r3, #2
  4017c6:	d0fa      	beq.n	4017be <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4017c8:	4770      	bx	lr
  4017ca:	bf00      	nop
  4017cc:	400e0600 	.word	0x400e0600
  4017d0:	00373e01 	.word	0x00373e01
  4017d4:	01370000 	.word	0x01370000
  4017d8:	f800ffff 	.word	0xf800ffff
  4017dc:	20183f01 	.word	0x20183f01

004017e0 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4017e0:	4a11      	ldr	r2, [pc, #68]	; (401828 <_pmc_init_master_clock+0x48>)
  4017e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  4017e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4017e8:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4017ea:	4b0f      	ldr	r3, [pc, #60]	; (401828 <_pmc_init_master_clock+0x48>)
  4017ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4017ee:	f013 0f08 	tst.w	r3, #8
  4017f2:	d0fa      	beq.n	4017ea <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4017f4:	4a0c      	ldr	r2, [pc, #48]	; (401828 <_pmc_init_master_clock+0x48>)
  4017f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  4017f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  4017fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401800:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401802:	4b09      	ldr	r3, [pc, #36]	; (401828 <_pmc_init_master_clock+0x48>)
  401804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401806:	f013 0f08 	tst.w	r3, #8
  40180a:	d0fa      	beq.n	401802 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40180c:	4a06      	ldr	r2, [pc, #24]	; (401828 <_pmc_init_master_clock+0x48>)
  40180e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401810:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401814:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401818:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40181a:	4b03      	ldr	r3, [pc, #12]	; (401828 <_pmc_init_master_clock+0x48>)
  40181c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40181e:	f013 0f08 	tst.w	r3, #8
  401822:	d0fa      	beq.n	40181a <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401824:	4770      	bx	lr
  401826:	bf00      	nop
  401828:	400e0600 	.word	0x400e0600

0040182c <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  40182c:	b508      	push	{r3, lr}
	_pmc_init_sources();
  40182e:	4b02      	ldr	r3, [pc, #8]	; (401838 <_pmc_init+0xc>)
  401830:	4798      	blx	r3
	_pmc_init_master_clock();
  401832:	4b02      	ldr	r3, [pc, #8]	; (40183c <_pmc_init+0x10>)
  401834:	4798      	blx	r3
  401836:	bd08      	pop	{r3, pc}
  401838:	00401791 	.word	0x00401791
  40183c:	004017e1 	.word	0x004017e1

00401840 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401840:	2300      	movs	r3, #0
  401842:	2b01      	cmp	r3, #1
  401844:	d80f      	bhi.n	401866 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  401846:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  40184a:	008a      	lsls	r2, r1, #2
  40184c:	4907      	ldr	r1, [pc, #28]	; (40186c <_pwm_get_cfg+0x2c>)
  40184e:	588a      	ldr	r2, [r1, r2]
  401850:	4282      	cmp	r2, r0
  401852:	d002      	beq.n	40185a <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401854:	3301      	adds	r3, #1
  401856:	b2db      	uxtb	r3, r3
  401858:	e7f3      	b.n	401842 <_pwm_get_cfg+0x2>
			return (_pwms + i);
  40185a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40185e:	009a      	lsls	r2, r3, #2
  401860:	4608      	mov	r0, r1
  401862:	4410      	add	r0, r2
  401864:	4770      	bx	lr
		}
	}

	return NULL;
  401866:	2000      	movs	r0, #0
}
  401868:	4770      	bx	lr
  40186a:	bf00      	nop
  40186c:	00405614 	.word	0x00405614

00401870 <_pwm_init>:
		_pwm1_dev = dev;
	}
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  401870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401872:	4605      	mov	r5, r0
	
	ASSERT(hw);
  401874:	460c      	mov	r4, r1
  401876:	1c08      	adds	r0, r1, #0
  401878:	bf18      	it	ne
  40187a:	2001      	movne	r0, #1
  40187c:	f240 1261 	movw	r2, #353	; 0x161
  401880:	4948      	ldr	r1, [pc, #288]	; (4019a4 <_pwm_init+0x134>)
  401882:	4b49      	ldr	r3, [pc, #292]	; (4019a8 <_pwm_init+0x138>)
  401884:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  401886:	4620      	mov	r0, r4
  401888:	4b48      	ldr	r3, [pc, #288]	; (4019ac <_pwm_init+0x13c>)
  40188a:	4798      	blx	r3

	device->hw = hw;
  40188c:	612c      	str	r4, [r5, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  40188e:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  401890:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  401892:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  401894:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  401896:	6903      	ldr	r3, [r0, #16]
  401898:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  40189c:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  40189e:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  4018a0:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  4018a2:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  4018a4:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  4018a6:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  4018aa:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  4018ac:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  4018ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  4018b0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  4018b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  4018b6:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
	

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  4018ba:	2100      	movs	r1, #0
  4018bc:	e029      	b.n	401912 <_pwm_init+0xa2>
		ch = cfg->ch + i;
  4018be:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4018c0:	010b      	lsls	r3, r1, #4
  4018c2:	18d7      	adds	r7, r2, r3
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode | PWM_CMR_DTE);					//enable dead time
  4018c4:	5cd5      	ldrb	r5, [r2, r3]
  4018c6:	687e      	ldr	r6, [r7, #4]
  4018c8:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  4018cc:	3510      	adds	r5, #16
  4018ce:	016d      	lsls	r5, r5, #5
  4018d0:	5166      	str	r6, [r4, r5]
		//hri_pwmchnum_set_CMR_DTE_bit((void *) &((Pwm *)hw)->PwmChNum[ch->index]);		//another less elegant way of enabling dead time
		hri_pwm_set_DT_DTH_bf(hw, ch->index, 10);										//set high side deadtime in PWM clock counts
  4018d2:	5cd5      	ldrb	r5, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  4018d4:	eb04 1545 	add.w	r5, r4, r5, lsl #5
  4018d8:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  4018dc:	f046 060a 	orr.w	r6, r6, #10
  4018e0:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
		hri_pwm_set_DT_DTL_bf(hw, ch->index, 10);										//set high side deadtime in PWM clock counts
  4018e4:	5cd5      	ldrb	r5, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  4018e6:	eb04 1545 	add.w	r5, r4, r5, lsl #5
  4018ea:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  4018ee:	f446 2620 	orr.w	r6, r6, #655360	; 0xa0000
  4018f2:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  4018f6:	5cd5      	ldrb	r5, [r2, r3]
  4018f8:	68fe      	ldr	r6, [r7, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  4018fa:	3510      	adds	r5, #16
  4018fc:	eb04 1545 	add.w	r5, r4, r5, lsl #5
  401900:	606e      	str	r6, [r5, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  401902:	5cd3      	ldrb	r3, [r2, r3]
  401904:	68ba      	ldr	r2, [r7, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  401906:	eb04 1343 	add.w	r3, r4, r3, lsl #5
  40190a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  40190e:	3101      	adds	r1, #1
  401910:	b249      	sxtb	r1, r1
  401912:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  401914:	4299      	cmp	r1, r3
  401916:	d3d2      	bcc.n	4018be <_pwm_init+0x4e>
  401918:	2300      	movs	r3, #0
  40191a:	e011      	b.n	401940 <_pwm_init+0xd0>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  40191c:	6b81      	ldr	r1, [r0, #56]	; 0x38
  40191e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
  401922:	00aa      	lsls	r2, r5, #2
  401924:	188f      	adds	r7, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  401926:	5c8d      	ldrb	r5, [r1, r2]
  401928:	687e      	ldr	r6, [r7, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  40192a:	eb04 1505 	add.w	r5, r4, r5, lsl #4
  40192e:	f8c5 6138 	str.w	r6, [r5, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  401932:	5c8a      	ldrb	r2, [r1, r2]
  401934:	68b9      	ldr	r1, [r7, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  401936:	3213      	adds	r2, #19
  401938:	0112      	lsls	r2, r2, #4
  40193a:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  40193c:	3301      	adds	r3, #1
  40193e:	b25b      	sxtb	r3, r3
  401940:	6b42      	ldr	r2, [r0, #52]	; 0x34
  401942:	4293      	cmp	r3, r2
  401944:	d3ea      	bcc.n	40191c <_pwm_init+0xac>
	}
	//hri_pwm_set_IMR1_CHID1_bit

	_pwm_init_irq_param(hw, device);
	NVIC_DisableIRQ(cfg->irq);
  401946:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  40194a:	2b00      	cmp	r3, #0
  40194c:	db0d      	blt.n	40196a <_pwm_init+0xfa>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40194e:	095a      	lsrs	r2, r3, #5
  401950:	f003 031f 	and.w	r3, r3, #31
  401954:	2101      	movs	r1, #1
  401956:	fa01 f303 	lsl.w	r3, r1, r3
  40195a:	3220      	adds	r2, #32
  40195c:	4914      	ldr	r1, [pc, #80]	; (4019b0 <_pwm_init+0x140>)
  40195e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401962:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401966:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40196a:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  40196e:	2b00      	cmp	r3, #0
  401970:	db09      	blt.n	401986 <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401972:	095a      	lsrs	r2, r3, #5
  401974:	f003 031f 	and.w	r3, r3, #31
  401978:	2101      	movs	r1, #1
  40197a:	fa01 f303 	lsl.w	r3, r1, r3
  40197e:	3260      	adds	r2, #96	; 0x60
  401980:	490b      	ldr	r1, [pc, #44]	; (4019b0 <_pwm_init+0x140>)
  401982:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  401986:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  40198a:	2b00      	cmp	r3, #0
  40198c:	db08      	blt.n	4019a0 <_pwm_init+0x130>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40198e:	0959      	lsrs	r1, r3, #5
  401990:	f003 031f 	and.w	r3, r3, #31
  401994:	2201      	movs	r2, #1
  401996:	fa02 f303 	lsl.w	r3, r2, r3
  40199a:	4a05      	ldr	r2, [pc, #20]	; (4019b0 <_pwm_init+0x140>)
  40199c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  4019a0:	2000      	movs	r0, #0
  4019a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4019a4:	004056bc 	.word	0x004056bc
  4019a8:	00401065 	.word	0x00401065
  4019ac:	00401841 	.word	0x00401841
  4019b0:	e000e100 	.word	0xe000e100

004019b4 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  4019b4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  4019b6:	4604      	mov	r4, r0
  4019b8:	f240 129d 	movw	r2, #413	; 0x19d
  4019bc:	490b      	ldr	r1, [pc, #44]	; (4019ec <_pwm_enable+0x38>)
  4019be:	3000      	adds	r0, #0
  4019c0:	bf18      	it	ne
  4019c2:	2001      	movne	r0, #1
  4019c4:	4b0a      	ldr	r3, [pc, #40]	; (4019f0 <_pwm_enable+0x3c>)
  4019c6:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  4019c8:	6920      	ldr	r0, [r4, #16]
  4019ca:	4b0a      	ldr	r3, [pc, #40]	; (4019f4 <_pwm_enable+0x40>)
  4019cc:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4019ce:	2300      	movs	r3, #0
  4019d0:	e008      	b.n	4019e4 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  4019d2:	6921      	ldr	r1, [r4, #16]
  4019d4:	6b05      	ldr	r5, [r0, #48]	; 0x30
  4019d6:	011a      	lsls	r2, r3, #4
  4019d8:	5cad      	ldrb	r5, [r5, r2]
  4019da:	2201      	movs	r2, #1
  4019dc:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  4019de:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  4019e0:	3301      	adds	r3, #1
  4019e2:	b25b      	sxtb	r3, r3
  4019e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4019e6:	4293      	cmp	r3, r2
  4019e8:	d3f3      	bcc.n	4019d2 <_pwm_enable+0x1e>
	}
}
  4019ea:	bd38      	pop	{r3, r4, r5, pc}
  4019ec:	004056bc 	.word	0x004056bc
  4019f0:	00401065 	.word	0x00401065
  4019f4:	00401841 	.word	0x00401841

004019f8 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  4019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4019fa:	460d      	mov	r5, r1
  4019fc:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  4019fe:	4604      	mov	r4, r0
  401a00:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  401a04:	4911      	ldr	r1, [pc, #68]	; (401a4c <_pwm_set_param+0x54>)
  401a06:	2800      	cmp	r0, #0
  401a08:	bf18      	it	ne
  401a0a:	42ae      	cmpne	r6, r5
  401a0c:	bf34      	ite	cc
  401a0e:	2001      	movcc	r0, #1
  401a10:	2000      	movcs	r0, #0
  401a12:	4b0f      	ldr	r3, [pc, #60]	; (401a50 <_pwm_set_param+0x58>)
  401a14:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  401a16:	6920      	ldr	r0, [r4, #16]
  401a18:	4b0e      	ldr	r3, [pc, #56]	; (401a54 <_pwm_set_param+0x5c>)
  401a1a:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401a1c:	2300      	movs	r3, #0
  401a1e:	e010      	b.n	401a42 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  401a20:	6922      	ldr	r2, [r4, #16]
  401a22:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401a24:	0119      	lsls	r1, r3, #4
  401a26:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  401a28:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  401a2c:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  401a30:	6922      	ldr	r2, [r4, #16]
  401a32:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401a34:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  401a36:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  401a3a:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  401a3e:	3301      	adds	r3, #1
  401a40:	b2db      	uxtb	r3, r3
  401a42:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401a44:	4293      	cmp	r3, r2
  401a46:	d3eb      	bcc.n	401a20 <_pwm_set_param+0x28>
	}
}
  401a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a4a:	bf00      	nop
  401a4c:	004056bc 	.word	0x004056bc
  401a50:	00401065 	.word	0x00401065
  401a54:	00401841 	.word	0x00401841

00401a58 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  401a58:	b510      	push	{r4, lr}
	ASSERT(device);
  401a5a:	4604      	mov	r4, r0
  401a5c:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
  401a60:	4907      	ldr	r1, [pc, #28]	; (401a80 <_pwm_is_enabled+0x28>)
  401a62:	3000      	adds	r0, #0
  401a64:	bf18      	it	ne
  401a66:	2001      	movne	r0, #1
  401a68:	4b06      	ldr	r3, [pc, #24]	; (401a84 <_pwm_is_enabled+0x2c>)
  401a6a:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  401a6c:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  401a6e:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  401a70:	f013 0f0f 	tst.w	r3, #15
  401a74:	d001      	beq.n	401a7a <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  401a76:	2001      	movs	r0, #1
	}
}
  401a78:	bd10      	pop	{r4, pc}
		return false;
  401a7a:	2000      	movs	r0, #0
  401a7c:	bd10      	pop	{r4, pc}
  401a7e:	bf00      	nop
  401a80:	004056bc 	.word	0x004056bc
  401a84:	00401065 	.word	0x00401065

00401a88 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  401a88:	2000      	movs	r0, #0
  401a8a:	4770      	bx	lr

00401a8c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  401a8c:	4b03      	ldr	r3, [pc, #12]	; (401a9c <_system_time_init+0x10>)
  401a8e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  401a92:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  401a94:	2205      	movs	r2, #5
  401a96:	601a      	str	r2, [r3, #0]
  401a98:	4770      	bx	lr
  401a9a:	bf00      	nop
  401a9c:	e000e010 	.word	0xe000e010

00401aa0 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  401aa0:	b508      	push	{r3, lr}
	_system_time_init(hw);
  401aa2:	4b01      	ldr	r3, [pc, #4]	; (401aa8 <_delay_init+0x8>)
  401aa4:	4798      	blx	r3
  401aa6:	bd08      	pop	{r3, pc}
  401aa8:	00401a8d 	.word	0x00401a8d

00401aac <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  401aac:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  401aae:	e00d      	b.n	401acc <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  401ab0:	4b0d      	ldr	r3, [pc, #52]	; (401ae8 <_delay_cycles+0x3c>)
  401ab2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401ab6:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401ab8:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401aba:	4b0b      	ldr	r3, [pc, #44]	; (401ae8 <_delay_cycles+0x3c>)
  401abc:	681b      	ldr	r3, [r3, #0]
  401abe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401ac2:	d0fa      	beq.n	401aba <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  401ac4:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  401ac8:	3101      	adds	r1, #1
	while (n--) {
  401aca:	4610      	mov	r0, r2
  401acc:	1e43      	subs	r3, r0, #1
  401ace:	b2da      	uxtb	r2, r3
  401ad0:	2800      	cmp	r0, #0
  401ad2:	d1ed      	bne.n	401ab0 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  401ad4:	4b04      	ldr	r3, [pc, #16]	; (401ae8 <_delay_cycles+0x3c>)
  401ad6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  401ad8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401ada:	4b03      	ldr	r3, [pc, #12]	; (401ae8 <_delay_cycles+0x3c>)
  401adc:	681b      	ldr	r3, [r3, #0]
  401ade:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401ae2:	d0fa      	beq.n	401ada <_delay_cycles+0x2e>
		;
}
  401ae4:	4770      	bx	lr
  401ae6:	bf00      	nop
  401ae8:	e000e010 	.word	0xe000e010

00401aec <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401aec:	2300      	movs	r3, #0
  401aee:	2b01      	cmp	r3, #1
  401af0:	d815      	bhi.n	401b1e <get_cfg+0x32>
{
  401af2:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401af4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401af8:	008a      	lsls	r2, r1, #2
  401afa:	490a      	ldr	r1, [pc, #40]	; (401b24 <get_cfg+0x38>)
  401afc:	588a      	ldr	r2, [r1, r2]
  401afe:	4282      	cmp	r2, r0
  401b00:	d007      	beq.n	401b12 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401b02:	3301      	adds	r3, #1
  401b04:	b2db      	uxtb	r3, r3
  401b06:	2b01      	cmp	r3, #1
  401b08:	d9f4      	bls.n	401af4 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  401b0a:	2000      	movs	r0, #0
}
  401b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b10:	4770      	bx	lr
			return &(_tcs[i]);
  401b12:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401b16:	00a3      	lsls	r3, r4, #2
  401b18:	4608      	mov	r0, r1
  401b1a:	4418      	add	r0, r3
  401b1c:	e7f6      	b.n	401b0c <get_cfg+0x20>
	return NULL;
  401b1e:	2000      	movs	r0, #0
  401b20:	4770      	bx	lr
  401b22:	bf00      	nop
  401b24:	20400000 	.word	0x20400000

00401b28 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  401b28:	4b06      	ldr	r3, [pc, #24]	; (401b44 <_tc_init_irq_param+0x1c>)
  401b2a:	4298      	cmp	r0, r3
  401b2c:	d003      	beq.n	401b36 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  401b2e:	4b06      	ldr	r3, [pc, #24]	; (401b48 <_tc_init_irq_param+0x20>)
  401b30:	4298      	cmp	r0, r3
  401b32:	d003      	beq.n	401b3c <_tc_init_irq_param+0x14>
  401b34:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  401b36:	4b05      	ldr	r3, [pc, #20]	; (401b4c <_tc_init_irq_param+0x24>)
  401b38:	6019      	str	r1, [r3, #0]
  401b3a:	e7f8      	b.n	401b2e <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  401b3c:	4b03      	ldr	r3, [pc, #12]	; (401b4c <_tc_init_irq_param+0x24>)
  401b3e:	6059      	str	r1, [r3, #4]
	}
}
  401b40:	e7f8      	b.n	401b34 <_tc_init_irq_param+0xc>
  401b42:	bf00      	nop
  401b44:	4000c000 	.word	0x4000c000
  401b48:	40054000 	.word	0x40054000
  401b4c:	20400388 	.word	0x20400388

00401b50 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  401b50:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  401b52:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  401b54:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  401b56:	f013 0f10 	tst.w	r3, #16
  401b5a:	d100      	bne.n	401b5e <tc_interrupt_handler+0xe>
  401b5c:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  401b5e:	6803      	ldr	r3, [r0, #0]
  401b60:	4798      	blx	r3
	}
}
  401b62:	e7fb      	b.n	401b5c <tc_interrupt_handler+0xc>

00401b64 <_timer_init>:
{
  401b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b68:	4606      	mov	r6, r0
  401b6a:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  401b6c:	4608      	mov	r0, r1
  401b6e:	4b2f      	ldr	r3, [pc, #188]	; (401c2c <_timer_init+0xc8>)
  401b70:	4798      	blx	r3
  401b72:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  401b74:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  401b78:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  401b7c:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  401b7e:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  401b82:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  401b84:	22c3      	movs	r2, #195	; 0xc3
  401b86:	492a      	ldr	r1, [pc, #168]	; (401c30 <_timer_init+0xcc>)
  401b88:	2001      	movs	r0, #1
  401b8a:	4b2a      	ldr	r3, [pc, #168]	; (401c34 <_timer_init+0xd0>)
  401b8c:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401b8e:	f248 0307 	movw	r3, #32775	; 0x8007
  401b92:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  401b94:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  401b98:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401b9c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401ba0:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401ba2:	2300      	movs	r3, #0
  401ba4:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401ba6:	f248 020f 	movw	r2, #32783	; 0x800f
  401baa:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  401bac:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  401bb0:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401bb4:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401bb8:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401bba:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  401bbc:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  401bbe:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  401bc2:	4631      	mov	r1, r6
  401bc4:	4620      	mov	r0, r4
  401bc6:	4b1c      	ldr	r3, [pc, #112]	; (401c38 <_timer_init+0xd4>)
  401bc8:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  401bca:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401bce:	2b00      	cmp	r3, #0
  401bd0:	db0d      	blt.n	401bee <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401bd2:	095a      	lsrs	r2, r3, #5
  401bd4:	f003 031f 	and.w	r3, r3, #31
  401bd8:	2101      	movs	r1, #1
  401bda:	fa01 f303 	lsl.w	r3, r1, r3
  401bde:	3220      	adds	r2, #32
  401be0:	4916      	ldr	r1, [pc, #88]	; (401c3c <_timer_init+0xd8>)
  401be2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401be6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401bea:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  401bee:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401bf2:	2b00      	cmp	r3, #0
  401bf4:	db09      	blt.n	401c0a <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401bf6:	095a      	lsrs	r2, r3, #5
  401bf8:	f003 031f 	and.w	r3, r3, #31
  401bfc:	2101      	movs	r1, #1
  401bfe:	fa01 f303 	lsl.w	r3, r1, r3
  401c02:	3260      	adds	r2, #96	; 0x60
  401c04:	490d      	ldr	r1, [pc, #52]	; (401c3c <_timer_init+0xd8>)
  401c06:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  401c0a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401c0e:	2b00      	cmp	r3, #0
  401c10:	db08      	blt.n	401c24 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c12:	0959      	lsrs	r1, r3, #5
  401c14:	f003 031f 	and.w	r3, r3, #31
  401c18:	2201      	movs	r2, #1
  401c1a:	fa02 f303 	lsl.w	r3, r2, r3
  401c1e:	4a07      	ldr	r2, [pc, #28]	; (401c3c <_timer_init+0xd8>)
  401c20:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  401c24:	2000      	movs	r0, #0
  401c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c2a:	bf00      	nop
  401c2c:	00401aed 	.word	0x00401aed
  401c30:	004056d4 	.word	0x004056d4
  401c34:	00401065 	.word	0x00401065
  401c38:	00401b29 	.word	0x00401b29
  401c3c:	e000e100 	.word	0xe000e100

00401c40 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  401c40:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  401c42:	2305      	movs	r3, #5
  401c44:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  401c46:	68c2      	ldr	r2, [r0, #12]
  401c48:	6413      	str	r3, [r2, #64]	; 0x40
  401c4a:	4770      	bx	lr

00401c4c <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  401c4c:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  401c4e:	6a13      	ldr	r3, [r2, #32]
  401c50:	f3c3 4300 	ubfx	r3, r3, #16, #1
  401c54:	6e10      	ldr	r0, [r2, #96]	; 0x60
  401c56:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  401c5a:	4318      	orrs	r0, r3
  401c5c:	4770      	bx	lr

00401c5e <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  401c5e:	2000      	movs	r0, #0
  401c60:	4770      	bx	lr
	...

00401c64 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  401c64:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  401c66:	4b02      	ldr	r3, [pc, #8]	; (401c70 <TC0_Handler+0xc>)
  401c68:	6818      	ldr	r0, [r3, #0]
  401c6a:	4b02      	ldr	r3, [pc, #8]	; (401c74 <TC0_Handler+0x10>)
  401c6c:	4798      	blx	r3
  401c6e:	bd08      	pop	{r3, pc}
  401c70:	20400388 	.word	0x20400388
  401c74:	00401b51 	.word	0x00401b51

00401c78 <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  401c78:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  401c7a:	4b02      	ldr	r3, [pc, #8]	; (401c84 <TC9_Handler+0xc>)
  401c7c:	6858      	ldr	r0, [r3, #4]
  401c7e:	4b02      	ldr	r3, [pc, #8]	; (401c88 <TC9_Handler+0x10>)
  401c80:	4798      	blx	r3
  401c82:	bd08      	pop	{r3, pc}
  401c84:	20400388 	.word	0x20400388
  401c88:	00401b51 	.word	0x00401b51

00401c8c <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  401c8c:	b510      	push	{r4, lr}
	ASSERT(hw);
  401c8e:	4604      	mov	r4, r0
  401c90:	f240 222b 	movw	r2, #555	; 0x22b
  401c94:	4905      	ldr	r1, [pc, #20]	; (401cac <_usart_get_hardware_index+0x20>)
  401c96:	3000      	adds	r0, #0
  401c98:	bf18      	it	ne
  401c9a:	2001      	movne	r0, #1
  401c9c:	4b04      	ldr	r3, [pc, #16]	; (401cb0 <_usart_get_hardware_index+0x24>)
  401c9e:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  401ca0:	4804      	ldr	r0, [pc, #16]	; (401cb4 <_usart_get_hardware_index+0x28>)
  401ca2:	4420      	add	r0, r4
}
  401ca4:	f3c0 3087 	ubfx	r0, r0, #14, #8
  401ca8:	bd10      	pop	{r4, pc}
  401caa:	bf00      	nop
  401cac:	004056f4 	.word	0x004056f4
  401cb0:	00401065 	.word	0x00401065
  401cb4:	bffdc000 	.word	0xbffdc000

00401cb8 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  401cb8:	b510      	push	{r4, lr}
	ASSERT(hw);
  401cba:	4604      	mov	r4, r0
  401cbc:	f240 2287 	movw	r2, #647	; 0x287
  401cc0:	490e      	ldr	r1, [pc, #56]	; (401cfc <_get_usart_index+0x44>)
  401cc2:	3000      	adds	r0, #0
  401cc4:	bf18      	it	ne
  401cc6:	2001      	movne	r0, #1
  401cc8:	4b0d      	ldr	r3, [pc, #52]	; (401d00 <_get_usart_index+0x48>)
  401cca:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  401ccc:	4620      	mov	r0, r4
  401cce:	4b0d      	ldr	r3, [pc, #52]	; (401d04 <_get_usart_index+0x4c>)
  401cd0:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401cd2:	2300      	movs	r3, #0
  401cd4:	b143      	cbz	r3, 401ce8 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  401cd6:	f240 2291 	movw	r2, #657	; 0x291
  401cda:	4908      	ldr	r1, [pc, #32]	; (401cfc <_get_usart_index+0x44>)
  401cdc:	2000      	movs	r0, #0
  401cde:	4b08      	ldr	r3, [pc, #32]	; (401d00 <_get_usart_index+0x48>)
  401ce0:	4798      	blx	r3
	return 0;
  401ce2:	2300      	movs	r3, #0
}
  401ce4:	4618      	mov	r0, r3
  401ce6:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  401ce8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401cec:	008a      	lsls	r2, r1, #2
  401cee:	4906      	ldr	r1, [pc, #24]	; (401d08 <_get_usart_index+0x50>)
  401cf0:	5c8a      	ldrb	r2, [r1, r2]
  401cf2:	4290      	cmp	r0, r2
  401cf4:	d0f6      	beq.n	401ce4 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401cf6:	3301      	adds	r3, #1
  401cf8:	b2db      	uxtb	r3, r3
  401cfa:	e7eb      	b.n	401cd4 <_get_usart_index+0x1c>
  401cfc:	004056f4 	.word	0x004056f4
  401d00:	00401065 	.word	0x00401065
  401d04:	00401c8d 	.word	0x00401c8d
  401d08:	004056e8 	.word	0x004056e8

00401d0c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  401d0c:	b510      	push	{r4, lr}
	ASSERT(hw);
  401d0e:	4604      	mov	r4, r0
  401d10:	f240 229e 	movw	r2, #670	; 0x29e
  401d14:	4911      	ldr	r1, [pc, #68]	; (401d5c <_usart_init+0x50>)
  401d16:	3000      	adds	r0, #0
  401d18:	bf18      	it	ne
  401d1a:	2001      	movne	r0, #1
  401d1c:	4b10      	ldr	r3, [pc, #64]	; (401d60 <_usart_init+0x54>)
  401d1e:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  401d20:	4620      	mov	r0, r4
  401d22:	4b10      	ldr	r3, [pc, #64]	; (401d64 <_usart_init+0x58>)
  401d24:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  401d26:	4b10      	ldr	r3, [pc, #64]	; (401d68 <_usart_init+0x5c>)
  401d28:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  401d2c:	2300      	movs	r3, #0
  401d2e:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  401d30:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  401d32:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  401d34:	22ac      	movs	r2, #172	; 0xac
  401d36:	6022      	str	r2, [r4, #0]
  401d38:	f44f 7280 	mov.w	r2, #256	; 0x100
  401d3c:	6022      	str	r2, [r4, #0]
  401d3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401d42:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  401d44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401d48:	0081      	lsls	r1, r0, #2
  401d4a:	4a08      	ldr	r2, [pc, #32]	; (401d6c <_usart_init+0x60>)
  401d4c:	440a      	add	r2, r1
  401d4e:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  401d50:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  401d52:	4a07      	ldr	r2, [pc, #28]	; (401d70 <_usart_init+0x64>)
  401d54:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  401d56:	4618      	mov	r0, r3
  401d58:	bd10      	pop	{r4, pc}
  401d5a:	bf00      	nop
  401d5c:	004056f4 	.word	0x004056f4
  401d60:	00401065 	.word	0x00401065
  401d64:	00401cb9 	.word	0x00401cb9
  401d68:	55534100 	.word	0x55534100
  401d6c:	004056e8 	.word	0x004056e8
  401d70:	000100f4 	.word	0x000100f4

00401d74 <_usart_sync_init>:
{
  401d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d76:	460c      	mov	r4, r1
	ASSERT(device);
  401d78:	4e09      	ldr	r6, [pc, #36]	; (401da0 <_usart_sync_init+0x2c>)
  401d7a:	4607      	mov	r7, r0
  401d7c:	22bd      	movs	r2, #189	; 0xbd
  401d7e:	4631      	mov	r1, r6
  401d80:	3000      	adds	r0, #0
  401d82:	bf18      	it	ne
  401d84:	2001      	movne	r0, #1
  401d86:	4d07      	ldr	r5, [pc, #28]	; (401da4 <_usart_sync_init+0x30>)
  401d88:	47a8      	blx	r5
	ASSERT(hw);
  401d8a:	22be      	movs	r2, #190	; 0xbe
  401d8c:	4631      	mov	r1, r6
  401d8e:	1c20      	adds	r0, r4, #0
  401d90:	bf18      	it	ne
  401d92:	2001      	movne	r0, #1
  401d94:	47a8      	blx	r5
	device->hw = hw;
  401d96:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  401d98:	4620      	mov	r0, r4
  401d9a:	4b03      	ldr	r3, [pc, #12]	; (401da8 <_usart_sync_init+0x34>)
  401d9c:	4798      	blx	r3
}
  401d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401da0:	004056f4 	.word	0x004056f4
  401da4:	00401065 	.word	0x00401065
  401da8:	00401d0d 	.word	0x00401d0d

00401dac <_usart_sync_enable>:
{
  401dac:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  401dae:	4e0a      	ldr	r6, [pc, #40]	; (401dd8 <_usart_sync_enable+0x2c>)
  401db0:	4604      	mov	r4, r0
  401db2:	f240 1205 	movw	r2, #261	; 0x105
  401db6:	4631      	mov	r1, r6
  401db8:	3000      	adds	r0, #0
  401dba:	bf18      	it	ne
  401dbc:	2001      	movne	r0, #1
  401dbe:	4d07      	ldr	r5, [pc, #28]	; (401ddc <_usart_sync_enable+0x30>)
  401dc0:	47a8      	blx	r5
	_usart_enable(device->hw);
  401dc2:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  401dc4:	f240 22c7 	movw	r2, #711	; 0x2c7
  401dc8:	4631      	mov	r1, r6
  401dca:	1c20      	adds	r0, r4, #0
  401dcc:	bf18      	it	ne
  401dce:	2001      	movne	r0, #1
  401dd0:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  401dd2:	2350      	movs	r3, #80	; 0x50
  401dd4:	6023      	str	r3, [r4, #0]
  401dd6:	bd70      	pop	{r4, r5, r6, pc}
  401dd8:	004056f4 	.word	0x004056f4
  401ddc:	00401065 	.word	0x00401065

00401de0 <_usart_sync_write_byte>:
{
  401de0:	b538      	push	{r3, r4, r5, lr}
  401de2:	460c      	mov	r4, r1
	ASSERT(device);
  401de4:	4605      	mov	r5, r0
  401de6:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  401dea:	4904      	ldr	r1, [pc, #16]	; (401dfc <_usart_sync_write_byte+0x1c>)
  401dec:	3000      	adds	r0, #0
  401dee:	bf18      	it	ne
  401df0:	2001      	movne	r0, #1
  401df2:	4b03      	ldr	r3, [pc, #12]	; (401e00 <_usart_sync_write_byte+0x20>)
  401df4:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  401df6:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  401df8:	61dc      	str	r4, [r3, #28]
  401dfa:	bd38      	pop	{r3, r4, r5, pc}
  401dfc:	004056f4 	.word	0x004056f4
  401e00:	00401065 	.word	0x00401065

00401e04 <_usart_sync_read_byte>:
{
  401e04:	b510      	push	{r4, lr}
	ASSERT(device);
  401e06:	4604      	mov	r4, r0
  401e08:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  401e0c:	4904      	ldr	r1, [pc, #16]	; (401e20 <_usart_sync_read_byte+0x1c>)
  401e0e:	3000      	adds	r0, #0
  401e10:	bf18      	it	ne
  401e12:	2001      	movne	r0, #1
  401e14:	4b03      	ldr	r3, [pc, #12]	; (401e24 <_usart_sync_read_byte+0x20>)
  401e16:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  401e18:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  401e1a:	6998      	ldr	r0, [r3, #24]
}
  401e1c:	b2c0      	uxtb	r0, r0
  401e1e:	bd10      	pop	{r4, pc}
  401e20:	004056f4 	.word	0x004056f4
  401e24:	00401065 	.word	0x00401065

00401e28 <_usart_sync_is_ready_to_send>:
{
  401e28:	b510      	push	{r4, lr}
	ASSERT(device);
  401e2a:	4604      	mov	r4, r0
  401e2c:	f240 12c3 	movw	r2, #451	; 0x1c3
  401e30:	4905      	ldr	r1, [pc, #20]	; (401e48 <_usart_sync_is_ready_to_send+0x20>)
  401e32:	3000      	adds	r0, #0
  401e34:	bf18      	it	ne
  401e36:	2001      	movne	r0, #1
  401e38:	4b04      	ldr	r3, [pc, #16]	; (401e4c <_usart_sync_is_ready_to_send+0x24>)
  401e3a:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  401e3c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  401e3e:	6958      	ldr	r0, [r3, #20]
}
  401e40:	f3c0 0040 	ubfx	r0, r0, #1, #1
  401e44:	bd10      	pop	{r4, pc}
  401e46:	bf00      	nop
  401e48:	004056f4 	.word	0x004056f4
  401e4c:	00401065 	.word	0x00401065

00401e50 <_usart_sync_is_transmit_done>:
{
  401e50:	b510      	push	{r4, lr}
	ASSERT(device);
  401e52:	4604      	mov	r4, r0
  401e54:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  401e58:	4905      	ldr	r1, [pc, #20]	; (401e70 <_usart_sync_is_transmit_done+0x20>)
  401e5a:	3000      	adds	r0, #0
  401e5c:	bf18      	it	ne
  401e5e:	2001      	movne	r0, #1
  401e60:	4b04      	ldr	r3, [pc, #16]	; (401e74 <_usart_sync_is_transmit_done+0x24>)
  401e62:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  401e64:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  401e66:	6958      	ldr	r0, [r3, #20]
}
  401e68:	f3c0 2040 	ubfx	r0, r0, #9, #1
  401e6c:	bd10      	pop	{r4, pc}
  401e6e:	bf00      	nop
  401e70:	004056f4 	.word	0x004056f4
  401e74:	00401065 	.word	0x00401065

00401e78 <_usart_sync_is_byte_received>:
{
  401e78:	b510      	push	{r4, lr}
	ASSERT(device);
  401e7a:	4604      	mov	r4, r0
  401e7c:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401e80:	4905      	ldr	r1, [pc, #20]	; (401e98 <_usart_sync_is_byte_received+0x20>)
  401e82:	3000      	adds	r0, #0
  401e84:	bf18      	it	ne
  401e86:	2001      	movne	r0, #1
  401e88:	4b04      	ldr	r3, [pc, #16]	; (401e9c <_usart_sync_is_byte_received+0x24>)
  401e8a:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  401e8c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  401e8e:	6958      	ldr	r0, [r3, #20]
  401e90:	f000 0001 	and.w	r0, r0, #1
}
  401e94:	bd10      	pop	{r4, pc}
  401e96:	bf00      	nop
  401e98:	004056f4 	.word	0x004056f4
  401e9c:	00401065 	.word	0x00401065

00401ea0 <_usart_get_usart_sync>:
}
  401ea0:	2000      	movs	r0, #0
  401ea2:	4770      	bx	lr

00401ea4 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  401ea4:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  401ea6:	2300      	movs	r3, #0
  401ea8:	e004      	b.n	401eb4 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  401eaa:	0199      	lsls	r1, r3, #6
  401eac:	4a16      	ldr	r2, [pc, #88]	; (401f08 <_dma_init+0x64>)
  401eae:	5852      	ldr	r2, [r2, r1]
  401eb0:	3301      	adds	r3, #1
  401eb2:	b2db      	uxtb	r3, r3
  401eb4:	2b17      	cmp	r3, #23
  401eb6:	d9f8      	bls.n	401eaa <_dma_init+0x6>
  401eb8:	2300      	movs	r3, #0
  401eba:	e014      	b.n	401ee6 <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  401ebc:	4c13      	ldr	r4, [pc, #76]	; (401f0c <_dma_init+0x68>)
  401ebe:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  401ec2:	2100      	movs	r1, #0
  401ec4:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  401ec6:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  401ec8:	1c98      	adds	r0, r3, #2
  401eca:	0180      	lsls	r0, r0, #6
  401ecc:	1825      	adds	r5, r4, r0
  401ece:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  401ed0:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  401ed2:	490f      	ldr	r1, [pc, #60]	; (401f10 <_dma_init+0x6c>)
  401ed4:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  401ed8:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  401eda:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  401ede:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  401ee0:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  401ee2:	3301      	adds	r3, #1
  401ee4:	b2db      	uxtb	r3, r3
  401ee6:	2b17      	cmp	r3, #23
  401ee8:	d9e8      	bls.n	401ebc <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401eea:	4b0a      	ldr	r3, [pc, #40]	; (401f14 <_dma_init+0x70>)
  401eec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  401ef4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401ef8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401efc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401f00:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  401f02:	2000      	movs	r0, #0
  401f04:	bc30      	pop	{r4, r5}
  401f06:	4770      	bx	lr
  401f08:	4007805c 	.word	0x4007805c
  401f0c:	40078000 	.word	0x40078000
  401f10:	00405710 	.word	0x00405710
  401f14:	e000e100 	.word	0xe000e100

00401f18 <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  401f18:	0180      	lsls	r0, r0, #6
  401f1a:	4b02      	ldr	r3, [pc, #8]	; (401f24 <_dma_set_destination_address+0xc>)
  401f1c:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  401f1e:	2000      	movs	r0, #0
  401f20:	4770      	bx	lr
  401f22:	bf00      	nop
  401f24:	40078064 	.word	0x40078064

00401f28 <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  401f28:	0180      	lsls	r0, r0, #6
  401f2a:	4b02      	ldr	r3, [pc, #8]	; (401f34 <_dma_set_source_address+0xc>)
  401f2c:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  401f2e:	2000      	movs	r0, #0
  401f30:	4770      	bx	lr
  401f32:	bf00      	nop
  401f34:	40078060 	.word	0x40078060

00401f38 <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  401f38:	0180      	lsls	r0, r0, #6
  401f3a:	4a04      	ldr	r2, [pc, #16]	; (401f4c <_dma_set_data_amount+0x14>)
  401f3c:	4402      	add	r2, r0
  401f3e:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  401f40:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  401f44:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  401f46:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  401f48:	2000      	movs	r0, #0
  401f4a:	4770      	bx	lr
  401f4c:	40078000 	.word	0x40078000

00401f50 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  401f50:	2301      	movs	r3, #1
  401f52:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  401f56:	4b03      	ldr	r3, [pc, #12]	; (401f64 <_dma_enable_transaction+0x14>)
  401f58:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  401f5a:	b101      	cbz	r1, 401f5e <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  401f5c:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  401f5e:	2000      	movs	r0, #0
  401f60:	4770      	bx	lr
  401f62:	bf00      	nop
  401f64:	40078000 	.word	0x40078000

00401f68 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  401f68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  401f6c:	008a      	lsls	r2, r1, #2
  401f6e:	4b02      	ldr	r3, [pc, #8]	; (401f78 <_dma_get_channel_resource+0x10>)
  401f70:	4413      	add	r3, r2
  401f72:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  401f74:	2000      	movs	r0, #0
  401f76:	4770      	bx	lr
  401f78:	20400390 	.word	0x20400390

00401f7c <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  401f7c:	b19a      	cbz	r2, 401fa6 <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  401f7e:	b951      	cbnz	r1, 401f96 <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  401f80:	0182      	lsls	r2, r0, #6
  401f82:	4b13      	ldr	r3, [pc, #76]	; (401fd0 <_dma_set_irq_state+0x54>)
  401f84:	4413      	add	r3, r2
  401f86:	2201      	movs	r2, #1
  401f88:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  401f8a:	2301      	movs	r3, #1
  401f8c:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  401f90:	4b0f      	ldr	r3, [pc, #60]	; (401fd0 <_dma_set_irq_state+0x54>)
  401f92:	60d8      	str	r0, [r3, #12]
  401f94:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  401f96:	2901      	cmp	r1, #1
  401f98:	d1f7      	bne.n	401f8a <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  401f9a:	0182      	lsls	r2, r0, #6
  401f9c:	4b0c      	ldr	r3, [pc, #48]	; (401fd0 <_dma_set_irq_state+0x54>)
  401f9e:	4413      	add	r3, r2
  401fa0:	2270      	movs	r2, #112	; 0x70
  401fa2:	651a      	str	r2, [r3, #80]	; 0x50
  401fa4:	e7f1      	b.n	401f8a <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  401fa6:	b951      	cbnz	r1, 401fbe <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  401fa8:	0182      	lsls	r2, r0, #6
  401faa:	4b09      	ldr	r3, [pc, #36]	; (401fd0 <_dma_set_irq_state+0x54>)
  401fac:	4413      	add	r3, r2
  401fae:	2201      	movs	r2, #1
  401fb0:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  401fb2:	2301      	movs	r3, #1
  401fb4:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  401fb8:	4b05      	ldr	r3, [pc, #20]	; (401fd0 <_dma_set_irq_state+0x54>)
  401fba:	6118      	str	r0, [r3, #16]
  401fbc:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  401fbe:	2901      	cmp	r1, #1
  401fc0:	d1f7      	bne.n	401fb2 <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  401fc2:	0182      	lsls	r2, r0, #6
  401fc4:	4b02      	ldr	r3, [pc, #8]	; (401fd0 <_dma_set_irq_state+0x54>)
  401fc6:	4413      	add	r3, r2
  401fc8:	2270      	movs	r2, #112	; 0x70
  401fca:	655a      	str	r2, [r3, #84]	; 0x54
  401fcc:	e7f1      	b.n	401fb2 <_dma_set_irq_state+0x36>
  401fce:	bf00      	nop
  401fd0:	40078000 	.word	0x40078000

00401fd4 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  401fd4:	4b17      	ldr	r3, [pc, #92]	; (402034 <XDMAC_Handler+0x60>)
  401fd6:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  401fd8:	2300      	movs	r3, #0
  401fda:	2b17      	cmp	r3, #23
  401fdc:	d81b      	bhi.n	402016 <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  401fde:	fa21 f203 	lsr.w	r2, r1, r3
  401fe2:	f012 0f01 	tst.w	r2, #1
  401fe6:	d102      	bne.n	401fee <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  401fe8:	3301      	adds	r3, #1
  401fea:	b2db      	uxtb	r3, r3
  401fec:	e7f5      	b.n	401fda <XDMAC_Handler+0x6>
			channel = i;
  401fee:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  401ff0:	2b00      	cmp	r3, #0
  401ff2:	db1d      	blt.n	402030 <XDMAC_Handler+0x5c>
{
  401ff4:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  401ff6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  401ffa:	0090      	lsls	r0, r2, #2
  401ffc:	4a0e      	ldr	r2, [pc, #56]	; (402038 <XDMAC_Handler+0x64>)
  401ffe:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  402000:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  402002:	0189      	lsls	r1, r1, #6
  402004:	4a0d      	ldr	r2, [pc, #52]	; (40203c <XDMAC_Handler+0x68>)
  402006:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  402008:	f012 0f70 	tst.w	r2, #112	; 0x70
  40200c:	d106      	bne.n	40201c <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  40200e:	f012 0f01 	tst.w	r2, #1
  402012:	d106      	bne.n	402022 <XDMAC_Handler+0x4e>
  402014:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  402016:	f04f 33ff 	mov.w	r3, #4294967295
  40201a:	e7e9      	b.n	401ff0 <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  40201c:	6843      	ldr	r3, [r0, #4]
  40201e:	4798      	blx	r3
  402020:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  402022:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  402026:	00a3      	lsls	r3, r4, #2
  402028:	4a03      	ldr	r2, [pc, #12]	; (402038 <XDMAC_Handler+0x64>)
  40202a:	58d3      	ldr	r3, [r2, r3]
  40202c:	4798      	blx	r3
  40202e:	e7f1      	b.n	402014 <XDMAC_Handler+0x40>
  402030:	4770      	bx	lr
  402032:	bf00      	nop
  402034:	40078000 	.word	0x40078000
  402038:	20400390 	.word	0x20400390
  40203c:	4007805c 	.word	0x4007805c

00402040 <main>:




int main(void)
{
  402040:	b580      	push	{r7, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  402042:	4b15      	ldr	r3, [pc, #84]	; (402098 <main+0x58>)
  402044:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  402046:	f44f 7280 	mov.w	r2, #256	; 0x100
  40204a:	4b14      	ldr	r3, [pc, #80]	; (40209c <main+0x5c>)
  40204c:	631a      	str	r2, [r3, #48]	; 0x30
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
		
	gpio_set_pin_level(PIN_USER_LED, true);
	dma_adc_init();
  40204e:	4b14      	ldr	r3, [pc, #80]	; (4020a0 <main+0x60>)
  402050:	4798      	blx	r3
	
	pwm_enable_all();
  402052:	4b14      	ldr	r3, [pc, #80]	; (4020a4 <main+0x64>)
  402054:	4798      	blx	r3
	adc_enable_all();
  402056:	4b14      	ldr	r3, [pc, #80]	; (4020a8 <main+0x68>)
  402058:	4798      	blx	r3
  40205a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40205e:	4b13      	ldr	r3, [pc, #76]	; (4020ac <main+0x6c>)
  402060:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);
	
	timer_start(&ENCODER_A);
  402062:	4813      	ldr	r0, [pc, #76]	; (4020b0 <main+0x70>)
  402064:	4c13      	ldr	r4, [pc, #76]	; (4020b4 <main+0x74>)
  402066:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  402068:	4813      	ldr	r0, [pc, #76]	; (4020b8 <main+0x78>)
  40206a:	47a0      	blx	r4
  40206c:	4d0b      	ldr	r5, [pc, #44]	; (40209c <main+0x5c>)
  40206e:	f44f 7680 	mov.w	r6, #256	; 0x100
  402072:	632e      	str	r6, [r5, #48]	; 0x30

	/* Replace with your application code */
	while (1) {
		
		gpio_set_pin_level(PIN_USER_LED,true);
		delay_ms(500);
  402074:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402078:	4c10      	ldr	r4, [pc, #64]	; (4020bc <main+0x7c>)
  40207a:	47a0      	blx	r4
		
		dma_adc_0_enable_for_one_transaction();
  40207c:	4b10      	ldr	r3, [pc, #64]	; (4020c0 <main+0x80>)
  40207e:	4798      	blx	r3
		dma_adc_1_enable_for_one_transaction();
  402080:	4b10      	ldr	r3, [pc, #64]	; (4020c4 <main+0x84>)
  402082:	4798      	blx	r3
		adc_async_start_conversion(&ADC_0);
  402084:	4810      	ldr	r0, [pc, #64]	; (4020c8 <main+0x88>)
  402086:	4f11      	ldr	r7, [pc, #68]	; (4020cc <main+0x8c>)
  402088:	47b8      	blx	r7
		adc_async_start_conversion(&ADC_1);
  40208a:	4811      	ldr	r0, [pc, #68]	; (4020d0 <main+0x90>)
  40208c:	47b8      	blx	r7
	((Pio *)hw)->PIO_CODR = mask;
  40208e:	636e      	str	r6, [r5, #52]	; 0x34
		//printf("main - %i %i %i %i %i %i %i %i %i %i %i %i  \n", (int)afec_buf[0],(int)afec_buf[1],(int)afec_buf[2],(int)afec_buf[3],(int)afec_buf[4],(int)afec_buf[5],(int)afec_buf[6],(int)afec_buf[7],(int)afec_buf[8],(int)afec_buf[9],(int)afec_buf[10],(int)afec_buf[11]);
		//AFEC0_Handler

		gpio_set_pin_level(PIN_USER_LED,false);
		delay_ms(500);
  402090:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402094:	47a0      	blx	r4
  402096:	e7e9      	b.n	40206c <main+0x2c>
  402098:	004001d5 	.word	0x004001d5
  40209c:	400e1200 	.word	0x400e1200
  4020a0:	00400241 	.word	0x00400241
  4020a4:	00400385 	.word	0x00400385
  4020a8:	0040032d 	.word	0x0040032d
  4020ac:	400e0e00 	.word	0x400e0e00
  4020b0:	20400588 	.word	0x20400588
  4020b4:	00400ee5 	.word	0x00400ee5
  4020b8:	204004d8 	.word	0x204004d8
  4020bc:	00400c35 	.word	0x00400c35
  4020c0:	004002d5 	.word	0x004002d5
  4020c4:	00400301 	.word	0x00400301
  4020c8:	204005a4 	.word	0x204005a4
  4020cc:	00400bdd 	.word	0x00400bdd
  4020d0:	2040067c 	.word	0x2040067c

004020d4 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  4020d4:	b958      	cbnz	r0, 4020ee <_read+0x1a>
{
  4020d6:	b508      	push	{r3, lr}
  4020d8:	460b      	mov	r3, r1
  4020da:	4611      	mov	r1, r2
  4020dc:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  4020de:	4b05      	ldr	r3, [pc, #20]	; (4020f4 <_read+0x20>)
  4020e0:	4798      	blx	r3
	if (n < 0) {
  4020e2:	2800      	cmp	r0, #0
  4020e4:	db00      	blt.n	4020e8 <_read+0x14>
		return -1;
	}

	return n;
}
  4020e6:	bd08      	pop	{r3, pc}
		return -1;
  4020e8:	f04f 30ff 	mov.w	r0, #4294967295
  4020ec:	bd08      	pop	{r3, pc}
		return -1;
  4020ee:	f04f 30ff 	mov.w	r0, #4294967295
  4020f2:	4770      	bx	lr
  4020f4:	0040214d 	.word	0x0040214d

004020f8 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  4020f8:	3801      	subs	r0, #1
  4020fa:	2802      	cmp	r0, #2
  4020fc:	d80b      	bhi.n	402116 <_write+0x1e>
{
  4020fe:	b508      	push	{r3, lr}
  402100:	460b      	mov	r3, r1
  402102:	4611      	mov	r1, r2
  402104:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  402106:	4b05      	ldr	r3, [pc, #20]	; (40211c <_write+0x24>)
  402108:	4798      	blx	r3
	if (n < 0) {
  40210a:	2800      	cmp	r0, #0
  40210c:	db00      	blt.n	402110 <_write+0x18>
		return -1;
	}

	return n;
}
  40210e:	bd08      	pop	{r3, pc}
		return -1;
  402110:	f04f 30ff 	mov.w	r0, #4294967295
  402114:	bd08      	pop	{r3, pc}
		return -1;
  402116:	f04f 30ff 	mov.w	r0, #4294967295
  40211a:	4770      	bx	lr
  40211c:	00402171 	.word	0x00402171

00402120 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  402120:	b570      	push	{r4, r5, r6, lr}
  402122:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  402124:	4d06      	ldr	r5, [pc, #24]	; (402140 <stdio_io_init+0x20>)
  402126:	682b      	ldr	r3, [r5, #0]
  402128:	2100      	movs	r1, #0
  40212a:	6898      	ldr	r0, [r3, #8]
  40212c:	4c05      	ldr	r4, [pc, #20]	; (402144 <stdio_io_init+0x24>)
  40212e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  402130:	682b      	ldr	r3, [r5, #0]
  402132:	2100      	movs	r1, #0
  402134:	6858      	ldr	r0, [r3, #4]
  402136:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  402138:	4b03      	ldr	r3, [pc, #12]	; (402148 <stdio_io_init+0x28>)
  40213a:	601e      	str	r6, [r3, #0]
  40213c:	bd70      	pop	{r4, r5, r6, pc}
  40213e:	bf00      	nop
  402140:	20400048 	.word	0x20400048
  402144:	00403405 	.word	0x00403405
  402148:	204004b0 	.word	0x204004b0

0040214c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  40214c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40214e:	4b06      	ldr	r3, [pc, #24]	; (402168 <stdio_io_read+0x1c>)
  402150:	681b      	ldr	r3, [r3, #0]
  402152:	b133      	cbz	r3, 402162 <stdio_io_read+0x16>
  402154:	460a      	mov	r2, r1
  402156:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  402158:	b292      	uxth	r2, r2
  40215a:	4618      	mov	r0, r3
  40215c:	4b03      	ldr	r3, [pc, #12]	; (40216c <stdio_io_read+0x20>)
  40215e:	4798      	blx	r3
  402160:	bd08      	pop	{r3, pc}
		return 0;
  402162:	2000      	movs	r0, #0
}
  402164:	bd08      	pop	{r3, pc}
  402166:	bf00      	nop
  402168:	204004b0 	.word	0x204004b0
  40216c:	00400cfd 	.word	0x00400cfd

00402170 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  402170:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  402172:	4b06      	ldr	r3, [pc, #24]	; (40218c <stdio_io_write+0x1c>)
  402174:	681b      	ldr	r3, [r3, #0]
  402176:	b133      	cbz	r3, 402186 <stdio_io_write+0x16>
  402178:	460a      	mov	r2, r1
  40217a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  40217c:	b292      	uxth	r2, r2
  40217e:	4618      	mov	r0, r3
  402180:	4b03      	ldr	r3, [pc, #12]	; (402190 <stdio_io_write+0x20>)
  402182:	4798      	blx	r3
  402184:	bd08      	pop	{r3, pc}
		return 0;
  402186:	2000      	movs	r0, #0
}
  402188:	bd08      	pop	{r3, pc}
  40218a:	bf00      	nop
  40218c:	204004b0 	.word	0x204004b0
  402190:	00400ccd 	.word	0x00400ccd

00402194 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  402194:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  402196:	4c04      	ldr	r4, [pc, #16]	; (4021a8 <stdio_redirect_init+0x14>)
  402198:	4620      	mov	r0, r4
  40219a:	4b04      	ldr	r3, [pc, #16]	; (4021ac <stdio_redirect_init+0x18>)
  40219c:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  40219e:	4620      	mov	r0, r4
  4021a0:	4b03      	ldr	r3, [pc, #12]	; (4021b0 <stdio_redirect_init+0x1c>)
  4021a2:	4798      	blx	r3
  4021a4:	bd10      	pop	{r4, pc}
  4021a6:	bf00      	nop
  4021a8:	2040057c 	.word	0x2040057c
  4021ac:	00401039 	.word	0x00401039
  4021b0:	00402121 	.word	0x00402121

004021b4 <__aeabi_drsub>:
  4021b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4021b8:	e002      	b.n	4021c0 <__adddf3>
  4021ba:	bf00      	nop

004021bc <__aeabi_dsub>:
  4021bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004021c0 <__adddf3>:
  4021c0:	b530      	push	{r4, r5, lr}
  4021c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4021c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4021ca:	ea94 0f05 	teq	r4, r5
  4021ce:	bf08      	it	eq
  4021d0:	ea90 0f02 	teqeq	r0, r2
  4021d4:	bf1f      	itttt	ne
  4021d6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4021da:	ea55 0c02 	orrsne.w	ip, r5, r2
  4021de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4021e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4021e6:	f000 80e2 	beq.w	4023ae <__adddf3+0x1ee>
  4021ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4021ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4021f2:	bfb8      	it	lt
  4021f4:	426d      	neglt	r5, r5
  4021f6:	dd0c      	ble.n	402212 <__adddf3+0x52>
  4021f8:	442c      	add	r4, r5
  4021fa:	ea80 0202 	eor.w	r2, r0, r2
  4021fe:	ea81 0303 	eor.w	r3, r1, r3
  402202:	ea82 0000 	eor.w	r0, r2, r0
  402206:	ea83 0101 	eor.w	r1, r3, r1
  40220a:	ea80 0202 	eor.w	r2, r0, r2
  40220e:	ea81 0303 	eor.w	r3, r1, r3
  402212:	2d36      	cmp	r5, #54	; 0x36
  402214:	bf88      	it	hi
  402216:	bd30      	pophi	{r4, r5, pc}
  402218:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40221c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402220:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402224:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402228:	d002      	beq.n	402230 <__adddf3+0x70>
  40222a:	4240      	negs	r0, r0
  40222c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402230:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402234:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402238:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40223c:	d002      	beq.n	402244 <__adddf3+0x84>
  40223e:	4252      	negs	r2, r2
  402240:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402244:	ea94 0f05 	teq	r4, r5
  402248:	f000 80a7 	beq.w	40239a <__adddf3+0x1da>
  40224c:	f1a4 0401 	sub.w	r4, r4, #1
  402250:	f1d5 0e20 	rsbs	lr, r5, #32
  402254:	db0d      	blt.n	402272 <__adddf3+0xb2>
  402256:	fa02 fc0e 	lsl.w	ip, r2, lr
  40225a:	fa22 f205 	lsr.w	r2, r2, r5
  40225e:	1880      	adds	r0, r0, r2
  402260:	f141 0100 	adc.w	r1, r1, #0
  402264:	fa03 f20e 	lsl.w	r2, r3, lr
  402268:	1880      	adds	r0, r0, r2
  40226a:	fa43 f305 	asr.w	r3, r3, r5
  40226e:	4159      	adcs	r1, r3
  402270:	e00e      	b.n	402290 <__adddf3+0xd0>
  402272:	f1a5 0520 	sub.w	r5, r5, #32
  402276:	f10e 0e20 	add.w	lr, lr, #32
  40227a:	2a01      	cmp	r2, #1
  40227c:	fa03 fc0e 	lsl.w	ip, r3, lr
  402280:	bf28      	it	cs
  402282:	f04c 0c02 	orrcs.w	ip, ip, #2
  402286:	fa43 f305 	asr.w	r3, r3, r5
  40228a:	18c0      	adds	r0, r0, r3
  40228c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402290:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402294:	d507      	bpl.n	4022a6 <__adddf3+0xe6>
  402296:	f04f 0e00 	mov.w	lr, #0
  40229a:	f1dc 0c00 	rsbs	ip, ip, #0
  40229e:	eb7e 0000 	sbcs.w	r0, lr, r0
  4022a2:	eb6e 0101 	sbc.w	r1, lr, r1
  4022a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4022aa:	d31b      	bcc.n	4022e4 <__adddf3+0x124>
  4022ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4022b0:	d30c      	bcc.n	4022cc <__adddf3+0x10c>
  4022b2:	0849      	lsrs	r1, r1, #1
  4022b4:	ea5f 0030 	movs.w	r0, r0, rrx
  4022b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4022bc:	f104 0401 	add.w	r4, r4, #1
  4022c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4022c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4022c8:	f080 809a 	bcs.w	402400 <__adddf3+0x240>
  4022cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4022d0:	bf08      	it	eq
  4022d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4022d6:	f150 0000 	adcs.w	r0, r0, #0
  4022da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4022de:	ea41 0105 	orr.w	r1, r1, r5
  4022e2:	bd30      	pop	{r4, r5, pc}
  4022e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4022e8:	4140      	adcs	r0, r0
  4022ea:	eb41 0101 	adc.w	r1, r1, r1
  4022ee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4022f2:	f1a4 0401 	sub.w	r4, r4, #1
  4022f6:	d1e9      	bne.n	4022cc <__adddf3+0x10c>
  4022f8:	f091 0f00 	teq	r1, #0
  4022fc:	bf04      	itt	eq
  4022fe:	4601      	moveq	r1, r0
  402300:	2000      	moveq	r0, #0
  402302:	fab1 f381 	clz	r3, r1
  402306:	bf08      	it	eq
  402308:	3320      	addeq	r3, #32
  40230a:	f1a3 030b 	sub.w	r3, r3, #11
  40230e:	f1b3 0220 	subs.w	r2, r3, #32
  402312:	da0c      	bge.n	40232e <__adddf3+0x16e>
  402314:	320c      	adds	r2, #12
  402316:	dd08      	ble.n	40232a <__adddf3+0x16a>
  402318:	f102 0c14 	add.w	ip, r2, #20
  40231c:	f1c2 020c 	rsb	r2, r2, #12
  402320:	fa01 f00c 	lsl.w	r0, r1, ip
  402324:	fa21 f102 	lsr.w	r1, r1, r2
  402328:	e00c      	b.n	402344 <__adddf3+0x184>
  40232a:	f102 0214 	add.w	r2, r2, #20
  40232e:	bfd8      	it	le
  402330:	f1c2 0c20 	rsble	ip, r2, #32
  402334:	fa01 f102 	lsl.w	r1, r1, r2
  402338:	fa20 fc0c 	lsr.w	ip, r0, ip
  40233c:	bfdc      	itt	le
  40233e:	ea41 010c 	orrle.w	r1, r1, ip
  402342:	4090      	lslle	r0, r2
  402344:	1ae4      	subs	r4, r4, r3
  402346:	bfa2      	ittt	ge
  402348:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40234c:	4329      	orrge	r1, r5
  40234e:	bd30      	popge	{r4, r5, pc}
  402350:	ea6f 0404 	mvn.w	r4, r4
  402354:	3c1f      	subs	r4, #31
  402356:	da1c      	bge.n	402392 <__adddf3+0x1d2>
  402358:	340c      	adds	r4, #12
  40235a:	dc0e      	bgt.n	40237a <__adddf3+0x1ba>
  40235c:	f104 0414 	add.w	r4, r4, #20
  402360:	f1c4 0220 	rsb	r2, r4, #32
  402364:	fa20 f004 	lsr.w	r0, r0, r4
  402368:	fa01 f302 	lsl.w	r3, r1, r2
  40236c:	ea40 0003 	orr.w	r0, r0, r3
  402370:	fa21 f304 	lsr.w	r3, r1, r4
  402374:	ea45 0103 	orr.w	r1, r5, r3
  402378:	bd30      	pop	{r4, r5, pc}
  40237a:	f1c4 040c 	rsb	r4, r4, #12
  40237e:	f1c4 0220 	rsb	r2, r4, #32
  402382:	fa20 f002 	lsr.w	r0, r0, r2
  402386:	fa01 f304 	lsl.w	r3, r1, r4
  40238a:	ea40 0003 	orr.w	r0, r0, r3
  40238e:	4629      	mov	r1, r5
  402390:	bd30      	pop	{r4, r5, pc}
  402392:	fa21 f004 	lsr.w	r0, r1, r4
  402396:	4629      	mov	r1, r5
  402398:	bd30      	pop	{r4, r5, pc}
  40239a:	f094 0f00 	teq	r4, #0
  40239e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4023a2:	bf06      	itte	eq
  4023a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4023a8:	3401      	addeq	r4, #1
  4023aa:	3d01      	subne	r5, #1
  4023ac:	e74e      	b.n	40224c <__adddf3+0x8c>
  4023ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4023b2:	bf18      	it	ne
  4023b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4023b8:	d029      	beq.n	40240e <__adddf3+0x24e>
  4023ba:	ea94 0f05 	teq	r4, r5
  4023be:	bf08      	it	eq
  4023c0:	ea90 0f02 	teqeq	r0, r2
  4023c4:	d005      	beq.n	4023d2 <__adddf3+0x212>
  4023c6:	ea54 0c00 	orrs.w	ip, r4, r0
  4023ca:	bf04      	itt	eq
  4023cc:	4619      	moveq	r1, r3
  4023ce:	4610      	moveq	r0, r2
  4023d0:	bd30      	pop	{r4, r5, pc}
  4023d2:	ea91 0f03 	teq	r1, r3
  4023d6:	bf1e      	ittt	ne
  4023d8:	2100      	movne	r1, #0
  4023da:	2000      	movne	r0, #0
  4023dc:	bd30      	popne	{r4, r5, pc}
  4023de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4023e2:	d105      	bne.n	4023f0 <__adddf3+0x230>
  4023e4:	0040      	lsls	r0, r0, #1
  4023e6:	4149      	adcs	r1, r1
  4023e8:	bf28      	it	cs
  4023ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4023ee:	bd30      	pop	{r4, r5, pc}
  4023f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4023f4:	bf3c      	itt	cc
  4023f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4023fa:	bd30      	popcc	{r4, r5, pc}
  4023fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402400:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402404:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402408:	f04f 0000 	mov.w	r0, #0
  40240c:	bd30      	pop	{r4, r5, pc}
  40240e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402412:	bf1a      	itte	ne
  402414:	4619      	movne	r1, r3
  402416:	4610      	movne	r0, r2
  402418:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40241c:	bf1c      	itt	ne
  40241e:	460b      	movne	r3, r1
  402420:	4602      	movne	r2, r0
  402422:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402426:	bf06      	itte	eq
  402428:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40242c:	ea91 0f03 	teqeq	r1, r3
  402430:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402434:	bd30      	pop	{r4, r5, pc}
  402436:	bf00      	nop

00402438 <__aeabi_ui2d>:
  402438:	f090 0f00 	teq	r0, #0
  40243c:	bf04      	itt	eq
  40243e:	2100      	moveq	r1, #0
  402440:	4770      	bxeq	lr
  402442:	b530      	push	{r4, r5, lr}
  402444:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402448:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40244c:	f04f 0500 	mov.w	r5, #0
  402450:	f04f 0100 	mov.w	r1, #0
  402454:	e750      	b.n	4022f8 <__adddf3+0x138>
  402456:	bf00      	nop

00402458 <__aeabi_i2d>:
  402458:	f090 0f00 	teq	r0, #0
  40245c:	bf04      	itt	eq
  40245e:	2100      	moveq	r1, #0
  402460:	4770      	bxeq	lr
  402462:	b530      	push	{r4, r5, lr}
  402464:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402468:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40246c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402470:	bf48      	it	mi
  402472:	4240      	negmi	r0, r0
  402474:	f04f 0100 	mov.w	r1, #0
  402478:	e73e      	b.n	4022f8 <__adddf3+0x138>
  40247a:	bf00      	nop

0040247c <__aeabi_f2d>:
  40247c:	0042      	lsls	r2, r0, #1
  40247e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402482:	ea4f 0131 	mov.w	r1, r1, rrx
  402486:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40248a:	bf1f      	itttt	ne
  40248c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402490:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402494:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402498:	4770      	bxne	lr
  40249a:	f092 0f00 	teq	r2, #0
  40249e:	bf14      	ite	ne
  4024a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4024a4:	4770      	bxeq	lr
  4024a6:	b530      	push	{r4, r5, lr}
  4024a8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4024ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4024b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4024b4:	e720      	b.n	4022f8 <__adddf3+0x138>
  4024b6:	bf00      	nop

004024b8 <__aeabi_ul2d>:
  4024b8:	ea50 0201 	orrs.w	r2, r0, r1
  4024bc:	bf08      	it	eq
  4024be:	4770      	bxeq	lr
  4024c0:	b530      	push	{r4, r5, lr}
  4024c2:	f04f 0500 	mov.w	r5, #0
  4024c6:	e00a      	b.n	4024de <__aeabi_l2d+0x16>

004024c8 <__aeabi_l2d>:
  4024c8:	ea50 0201 	orrs.w	r2, r0, r1
  4024cc:	bf08      	it	eq
  4024ce:	4770      	bxeq	lr
  4024d0:	b530      	push	{r4, r5, lr}
  4024d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4024d6:	d502      	bpl.n	4024de <__aeabi_l2d+0x16>
  4024d8:	4240      	negs	r0, r0
  4024da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4024de:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4024e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4024e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4024ea:	f43f aedc 	beq.w	4022a6 <__adddf3+0xe6>
  4024ee:	f04f 0203 	mov.w	r2, #3
  4024f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4024f6:	bf18      	it	ne
  4024f8:	3203      	addne	r2, #3
  4024fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4024fe:	bf18      	it	ne
  402500:	3203      	addne	r2, #3
  402502:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402506:	f1c2 0320 	rsb	r3, r2, #32
  40250a:	fa00 fc03 	lsl.w	ip, r0, r3
  40250e:	fa20 f002 	lsr.w	r0, r0, r2
  402512:	fa01 fe03 	lsl.w	lr, r1, r3
  402516:	ea40 000e 	orr.w	r0, r0, lr
  40251a:	fa21 f102 	lsr.w	r1, r1, r2
  40251e:	4414      	add	r4, r2
  402520:	e6c1      	b.n	4022a6 <__adddf3+0xe6>
  402522:	bf00      	nop

00402524 <__aeabi_dmul>:
  402524:	b570      	push	{r4, r5, r6, lr}
  402526:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40252a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40252e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402532:	bf1d      	ittte	ne
  402534:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402538:	ea94 0f0c 	teqne	r4, ip
  40253c:	ea95 0f0c 	teqne	r5, ip
  402540:	f000 f8de 	bleq	402700 <__aeabi_dmul+0x1dc>
  402544:	442c      	add	r4, r5
  402546:	ea81 0603 	eor.w	r6, r1, r3
  40254a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40254e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402552:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402556:	bf18      	it	ne
  402558:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40255c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402564:	d038      	beq.n	4025d8 <__aeabi_dmul+0xb4>
  402566:	fba0 ce02 	umull	ip, lr, r0, r2
  40256a:	f04f 0500 	mov.w	r5, #0
  40256e:	fbe1 e502 	umlal	lr, r5, r1, r2
  402572:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402576:	fbe0 e503 	umlal	lr, r5, r0, r3
  40257a:	f04f 0600 	mov.w	r6, #0
  40257e:	fbe1 5603 	umlal	r5, r6, r1, r3
  402582:	f09c 0f00 	teq	ip, #0
  402586:	bf18      	it	ne
  402588:	f04e 0e01 	orrne.w	lr, lr, #1
  40258c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402590:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402594:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402598:	d204      	bcs.n	4025a4 <__aeabi_dmul+0x80>
  40259a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40259e:	416d      	adcs	r5, r5
  4025a0:	eb46 0606 	adc.w	r6, r6, r6
  4025a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4025a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4025ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4025b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4025b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4025b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4025bc:	bf88      	it	hi
  4025be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4025c2:	d81e      	bhi.n	402602 <__aeabi_dmul+0xde>
  4025c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4025c8:	bf08      	it	eq
  4025ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4025ce:	f150 0000 	adcs.w	r0, r0, #0
  4025d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4025d6:	bd70      	pop	{r4, r5, r6, pc}
  4025d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4025dc:	ea46 0101 	orr.w	r1, r6, r1
  4025e0:	ea40 0002 	orr.w	r0, r0, r2
  4025e4:	ea81 0103 	eor.w	r1, r1, r3
  4025e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4025ec:	bfc2      	ittt	gt
  4025ee:	ebd4 050c 	rsbsgt	r5, r4, ip
  4025f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4025f6:	bd70      	popgt	{r4, r5, r6, pc}
  4025f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4025fc:	f04f 0e00 	mov.w	lr, #0
  402600:	3c01      	subs	r4, #1
  402602:	f300 80ab 	bgt.w	40275c <__aeabi_dmul+0x238>
  402606:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40260a:	bfde      	ittt	le
  40260c:	2000      	movle	r0, #0
  40260e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402612:	bd70      	pople	{r4, r5, r6, pc}
  402614:	f1c4 0400 	rsb	r4, r4, #0
  402618:	3c20      	subs	r4, #32
  40261a:	da35      	bge.n	402688 <__aeabi_dmul+0x164>
  40261c:	340c      	adds	r4, #12
  40261e:	dc1b      	bgt.n	402658 <__aeabi_dmul+0x134>
  402620:	f104 0414 	add.w	r4, r4, #20
  402624:	f1c4 0520 	rsb	r5, r4, #32
  402628:	fa00 f305 	lsl.w	r3, r0, r5
  40262c:	fa20 f004 	lsr.w	r0, r0, r4
  402630:	fa01 f205 	lsl.w	r2, r1, r5
  402634:	ea40 0002 	orr.w	r0, r0, r2
  402638:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40263c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402644:	fa21 f604 	lsr.w	r6, r1, r4
  402648:	eb42 0106 	adc.w	r1, r2, r6
  40264c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402650:	bf08      	it	eq
  402652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402656:	bd70      	pop	{r4, r5, r6, pc}
  402658:	f1c4 040c 	rsb	r4, r4, #12
  40265c:	f1c4 0520 	rsb	r5, r4, #32
  402660:	fa00 f304 	lsl.w	r3, r0, r4
  402664:	fa20 f005 	lsr.w	r0, r0, r5
  402668:	fa01 f204 	lsl.w	r2, r1, r4
  40266c:	ea40 0002 	orr.w	r0, r0, r2
  402670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402678:	f141 0100 	adc.w	r1, r1, #0
  40267c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402680:	bf08      	it	eq
  402682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402686:	bd70      	pop	{r4, r5, r6, pc}
  402688:	f1c4 0520 	rsb	r5, r4, #32
  40268c:	fa00 f205 	lsl.w	r2, r0, r5
  402690:	ea4e 0e02 	orr.w	lr, lr, r2
  402694:	fa20 f304 	lsr.w	r3, r0, r4
  402698:	fa01 f205 	lsl.w	r2, r1, r5
  40269c:	ea43 0302 	orr.w	r3, r3, r2
  4026a0:	fa21 f004 	lsr.w	r0, r1, r4
  4026a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4026a8:	fa21 f204 	lsr.w	r2, r1, r4
  4026ac:	ea20 0002 	bic.w	r0, r0, r2
  4026b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4026b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4026b8:	bf08      	it	eq
  4026ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4026be:	bd70      	pop	{r4, r5, r6, pc}
  4026c0:	f094 0f00 	teq	r4, #0
  4026c4:	d10f      	bne.n	4026e6 <__aeabi_dmul+0x1c2>
  4026c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4026ca:	0040      	lsls	r0, r0, #1
  4026cc:	eb41 0101 	adc.w	r1, r1, r1
  4026d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4026d4:	bf08      	it	eq
  4026d6:	3c01      	subeq	r4, #1
  4026d8:	d0f7      	beq.n	4026ca <__aeabi_dmul+0x1a6>
  4026da:	ea41 0106 	orr.w	r1, r1, r6
  4026de:	f095 0f00 	teq	r5, #0
  4026e2:	bf18      	it	ne
  4026e4:	4770      	bxne	lr
  4026e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4026ea:	0052      	lsls	r2, r2, #1
  4026ec:	eb43 0303 	adc.w	r3, r3, r3
  4026f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4026f4:	bf08      	it	eq
  4026f6:	3d01      	subeq	r5, #1
  4026f8:	d0f7      	beq.n	4026ea <__aeabi_dmul+0x1c6>
  4026fa:	ea43 0306 	orr.w	r3, r3, r6
  4026fe:	4770      	bx	lr
  402700:	ea94 0f0c 	teq	r4, ip
  402704:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402708:	bf18      	it	ne
  40270a:	ea95 0f0c 	teqne	r5, ip
  40270e:	d00c      	beq.n	40272a <__aeabi_dmul+0x206>
  402710:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402714:	bf18      	it	ne
  402716:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40271a:	d1d1      	bne.n	4026c0 <__aeabi_dmul+0x19c>
  40271c:	ea81 0103 	eor.w	r1, r1, r3
  402720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402724:	f04f 0000 	mov.w	r0, #0
  402728:	bd70      	pop	{r4, r5, r6, pc}
  40272a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40272e:	bf06      	itte	eq
  402730:	4610      	moveq	r0, r2
  402732:	4619      	moveq	r1, r3
  402734:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402738:	d019      	beq.n	40276e <__aeabi_dmul+0x24a>
  40273a:	ea94 0f0c 	teq	r4, ip
  40273e:	d102      	bne.n	402746 <__aeabi_dmul+0x222>
  402740:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402744:	d113      	bne.n	40276e <__aeabi_dmul+0x24a>
  402746:	ea95 0f0c 	teq	r5, ip
  40274a:	d105      	bne.n	402758 <__aeabi_dmul+0x234>
  40274c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402750:	bf1c      	itt	ne
  402752:	4610      	movne	r0, r2
  402754:	4619      	movne	r1, r3
  402756:	d10a      	bne.n	40276e <__aeabi_dmul+0x24a>
  402758:	ea81 0103 	eor.w	r1, r1, r3
  40275c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402760:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402768:	f04f 0000 	mov.w	r0, #0
  40276c:	bd70      	pop	{r4, r5, r6, pc}
  40276e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402772:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402776:	bd70      	pop	{r4, r5, r6, pc}

00402778 <__aeabi_ddiv>:
  402778:	b570      	push	{r4, r5, r6, lr}
  40277a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40277e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402782:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402786:	bf1d      	ittte	ne
  402788:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40278c:	ea94 0f0c 	teqne	r4, ip
  402790:	ea95 0f0c 	teqne	r5, ip
  402794:	f000 f8a7 	bleq	4028e6 <__aeabi_ddiv+0x16e>
  402798:	eba4 0405 	sub.w	r4, r4, r5
  40279c:	ea81 0e03 	eor.w	lr, r1, r3
  4027a0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4027a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4027a8:	f000 8088 	beq.w	4028bc <__aeabi_ddiv+0x144>
  4027ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4027b0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4027b4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4027b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4027bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4027c0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4027c4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4027c8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4027cc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4027d0:	429d      	cmp	r5, r3
  4027d2:	bf08      	it	eq
  4027d4:	4296      	cmpeq	r6, r2
  4027d6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4027da:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4027de:	d202      	bcs.n	4027e6 <__aeabi_ddiv+0x6e>
  4027e0:	085b      	lsrs	r3, r3, #1
  4027e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4027e6:	1ab6      	subs	r6, r6, r2
  4027e8:	eb65 0503 	sbc.w	r5, r5, r3
  4027ec:	085b      	lsrs	r3, r3, #1
  4027ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4027f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4027f6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4027fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4027fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  402802:	bf22      	ittt	cs
  402804:	1ab6      	subcs	r6, r6, r2
  402806:	4675      	movcs	r5, lr
  402808:	ea40 000c 	orrcs.w	r0, r0, ip
  40280c:	085b      	lsrs	r3, r3, #1
  40280e:	ea4f 0232 	mov.w	r2, r2, rrx
  402812:	ebb6 0e02 	subs.w	lr, r6, r2
  402816:	eb75 0e03 	sbcs.w	lr, r5, r3
  40281a:	bf22      	ittt	cs
  40281c:	1ab6      	subcs	r6, r6, r2
  40281e:	4675      	movcs	r5, lr
  402820:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402824:	085b      	lsrs	r3, r3, #1
  402826:	ea4f 0232 	mov.w	r2, r2, rrx
  40282a:	ebb6 0e02 	subs.w	lr, r6, r2
  40282e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402832:	bf22      	ittt	cs
  402834:	1ab6      	subcs	r6, r6, r2
  402836:	4675      	movcs	r5, lr
  402838:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40283c:	085b      	lsrs	r3, r3, #1
  40283e:	ea4f 0232 	mov.w	r2, r2, rrx
  402842:	ebb6 0e02 	subs.w	lr, r6, r2
  402846:	eb75 0e03 	sbcs.w	lr, r5, r3
  40284a:	bf22      	ittt	cs
  40284c:	1ab6      	subcs	r6, r6, r2
  40284e:	4675      	movcs	r5, lr
  402850:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402854:	ea55 0e06 	orrs.w	lr, r5, r6
  402858:	d018      	beq.n	40288c <__aeabi_ddiv+0x114>
  40285a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40285e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402862:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402866:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40286a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40286e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402872:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402876:	d1c0      	bne.n	4027fa <__aeabi_ddiv+0x82>
  402878:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40287c:	d10b      	bne.n	402896 <__aeabi_ddiv+0x11e>
  40287e:	ea41 0100 	orr.w	r1, r1, r0
  402882:	f04f 0000 	mov.w	r0, #0
  402886:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40288a:	e7b6      	b.n	4027fa <__aeabi_ddiv+0x82>
  40288c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402890:	bf04      	itt	eq
  402892:	4301      	orreq	r1, r0
  402894:	2000      	moveq	r0, #0
  402896:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40289a:	bf88      	it	hi
  40289c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4028a0:	f63f aeaf 	bhi.w	402602 <__aeabi_dmul+0xde>
  4028a4:	ebb5 0c03 	subs.w	ip, r5, r3
  4028a8:	bf04      	itt	eq
  4028aa:	ebb6 0c02 	subseq.w	ip, r6, r2
  4028ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4028b2:	f150 0000 	adcs.w	r0, r0, #0
  4028b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4028ba:	bd70      	pop	{r4, r5, r6, pc}
  4028bc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4028c0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4028c4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4028c8:	bfc2      	ittt	gt
  4028ca:	ebd4 050c 	rsbsgt	r5, r4, ip
  4028ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4028d2:	bd70      	popgt	{r4, r5, r6, pc}
  4028d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4028d8:	f04f 0e00 	mov.w	lr, #0
  4028dc:	3c01      	subs	r4, #1
  4028de:	e690      	b.n	402602 <__aeabi_dmul+0xde>
  4028e0:	ea45 0e06 	orr.w	lr, r5, r6
  4028e4:	e68d      	b.n	402602 <__aeabi_dmul+0xde>
  4028e6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4028ea:	ea94 0f0c 	teq	r4, ip
  4028ee:	bf08      	it	eq
  4028f0:	ea95 0f0c 	teqeq	r5, ip
  4028f4:	f43f af3b 	beq.w	40276e <__aeabi_dmul+0x24a>
  4028f8:	ea94 0f0c 	teq	r4, ip
  4028fc:	d10a      	bne.n	402914 <__aeabi_ddiv+0x19c>
  4028fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402902:	f47f af34 	bne.w	40276e <__aeabi_dmul+0x24a>
  402906:	ea95 0f0c 	teq	r5, ip
  40290a:	f47f af25 	bne.w	402758 <__aeabi_dmul+0x234>
  40290e:	4610      	mov	r0, r2
  402910:	4619      	mov	r1, r3
  402912:	e72c      	b.n	40276e <__aeabi_dmul+0x24a>
  402914:	ea95 0f0c 	teq	r5, ip
  402918:	d106      	bne.n	402928 <__aeabi_ddiv+0x1b0>
  40291a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40291e:	f43f aefd 	beq.w	40271c <__aeabi_dmul+0x1f8>
  402922:	4610      	mov	r0, r2
  402924:	4619      	mov	r1, r3
  402926:	e722      	b.n	40276e <__aeabi_dmul+0x24a>
  402928:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40292c:	bf18      	it	ne
  40292e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402932:	f47f aec5 	bne.w	4026c0 <__aeabi_dmul+0x19c>
  402936:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40293a:	f47f af0d 	bne.w	402758 <__aeabi_dmul+0x234>
  40293e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402942:	f47f aeeb 	bne.w	40271c <__aeabi_dmul+0x1f8>
  402946:	e712      	b.n	40276e <__aeabi_dmul+0x24a>

00402948 <__gedf2>:
  402948:	f04f 3cff 	mov.w	ip, #4294967295
  40294c:	e006      	b.n	40295c <__cmpdf2+0x4>
  40294e:	bf00      	nop

00402950 <__ledf2>:
  402950:	f04f 0c01 	mov.w	ip, #1
  402954:	e002      	b.n	40295c <__cmpdf2+0x4>
  402956:	bf00      	nop

00402958 <__cmpdf2>:
  402958:	f04f 0c01 	mov.w	ip, #1
  40295c:	f84d cd04 	str.w	ip, [sp, #-4]!
  402960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40296c:	bf18      	it	ne
  40296e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  402972:	d01b      	beq.n	4029ac <__cmpdf2+0x54>
  402974:	b001      	add	sp, #4
  402976:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40297a:	bf0c      	ite	eq
  40297c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  402980:	ea91 0f03 	teqne	r1, r3
  402984:	bf02      	ittt	eq
  402986:	ea90 0f02 	teqeq	r0, r2
  40298a:	2000      	moveq	r0, #0
  40298c:	4770      	bxeq	lr
  40298e:	f110 0f00 	cmn.w	r0, #0
  402992:	ea91 0f03 	teq	r1, r3
  402996:	bf58      	it	pl
  402998:	4299      	cmppl	r1, r3
  40299a:	bf08      	it	eq
  40299c:	4290      	cmpeq	r0, r2
  40299e:	bf2c      	ite	cs
  4029a0:	17d8      	asrcs	r0, r3, #31
  4029a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4029a6:	f040 0001 	orr.w	r0, r0, #1
  4029aa:	4770      	bx	lr
  4029ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4029b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4029b4:	d102      	bne.n	4029bc <__cmpdf2+0x64>
  4029b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4029ba:	d107      	bne.n	4029cc <__cmpdf2+0x74>
  4029bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4029c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4029c4:	d1d6      	bne.n	402974 <__cmpdf2+0x1c>
  4029c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4029ca:	d0d3      	beq.n	402974 <__cmpdf2+0x1c>
  4029cc:	f85d 0b04 	ldr.w	r0, [sp], #4
  4029d0:	4770      	bx	lr
  4029d2:	bf00      	nop

004029d4 <__aeabi_cdrcmple>:
  4029d4:	4684      	mov	ip, r0
  4029d6:	4610      	mov	r0, r2
  4029d8:	4662      	mov	r2, ip
  4029da:	468c      	mov	ip, r1
  4029dc:	4619      	mov	r1, r3
  4029de:	4663      	mov	r3, ip
  4029e0:	e000      	b.n	4029e4 <__aeabi_cdcmpeq>
  4029e2:	bf00      	nop

004029e4 <__aeabi_cdcmpeq>:
  4029e4:	b501      	push	{r0, lr}
  4029e6:	f7ff ffb7 	bl	402958 <__cmpdf2>
  4029ea:	2800      	cmp	r0, #0
  4029ec:	bf48      	it	mi
  4029ee:	f110 0f00 	cmnmi.w	r0, #0
  4029f2:	bd01      	pop	{r0, pc}

004029f4 <__aeabi_dcmpeq>:
  4029f4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4029f8:	f7ff fff4 	bl	4029e4 <__aeabi_cdcmpeq>
  4029fc:	bf0c      	ite	eq
  4029fe:	2001      	moveq	r0, #1
  402a00:	2000      	movne	r0, #0
  402a02:	f85d fb08 	ldr.w	pc, [sp], #8
  402a06:	bf00      	nop

00402a08 <__aeabi_dcmplt>:
  402a08:	f84d ed08 	str.w	lr, [sp, #-8]!
  402a0c:	f7ff ffea 	bl	4029e4 <__aeabi_cdcmpeq>
  402a10:	bf34      	ite	cc
  402a12:	2001      	movcc	r0, #1
  402a14:	2000      	movcs	r0, #0
  402a16:	f85d fb08 	ldr.w	pc, [sp], #8
  402a1a:	bf00      	nop

00402a1c <__aeabi_dcmple>:
  402a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
  402a20:	f7ff ffe0 	bl	4029e4 <__aeabi_cdcmpeq>
  402a24:	bf94      	ite	ls
  402a26:	2001      	movls	r0, #1
  402a28:	2000      	movhi	r0, #0
  402a2a:	f85d fb08 	ldr.w	pc, [sp], #8
  402a2e:	bf00      	nop

00402a30 <__aeabi_dcmpge>:
  402a30:	f84d ed08 	str.w	lr, [sp, #-8]!
  402a34:	f7ff ffce 	bl	4029d4 <__aeabi_cdrcmple>
  402a38:	bf94      	ite	ls
  402a3a:	2001      	movls	r0, #1
  402a3c:	2000      	movhi	r0, #0
  402a3e:	f85d fb08 	ldr.w	pc, [sp], #8
  402a42:	bf00      	nop

00402a44 <__aeabi_dcmpgt>:
  402a44:	f84d ed08 	str.w	lr, [sp, #-8]!
  402a48:	f7ff ffc4 	bl	4029d4 <__aeabi_cdrcmple>
  402a4c:	bf34      	ite	cc
  402a4e:	2001      	movcc	r0, #1
  402a50:	2000      	movcs	r0, #0
  402a52:	f85d fb08 	ldr.w	pc, [sp], #8
  402a56:	bf00      	nop

00402a58 <__aeabi_d2iz>:
  402a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  402a60:	d215      	bcs.n	402a8e <__aeabi_d2iz+0x36>
  402a62:	d511      	bpl.n	402a88 <__aeabi_d2iz+0x30>
  402a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  402a6c:	d912      	bls.n	402a94 <__aeabi_d2iz+0x3c>
  402a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  402a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402a7e:	fa23 f002 	lsr.w	r0, r3, r2
  402a82:	bf18      	it	ne
  402a84:	4240      	negne	r0, r0
  402a86:	4770      	bx	lr
  402a88:	f04f 0000 	mov.w	r0, #0
  402a8c:	4770      	bx	lr
  402a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  402a92:	d105      	bne.n	402aa0 <__aeabi_d2iz+0x48>
  402a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  402a98:	bf08      	it	eq
  402a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  402a9e:	4770      	bx	lr
  402aa0:	f04f 0000 	mov.w	r0, #0
  402aa4:	4770      	bx	lr
  402aa6:	bf00      	nop

00402aa8 <__libc_init_array>:
  402aa8:	b570      	push	{r4, r5, r6, lr}
  402aaa:	4e0d      	ldr	r6, [pc, #52]	; (402ae0 <__libc_init_array+0x38>)
  402aac:	4c0d      	ldr	r4, [pc, #52]	; (402ae4 <__libc_init_array+0x3c>)
  402aae:	1ba4      	subs	r4, r4, r6
  402ab0:	10a4      	asrs	r4, r4, #2
  402ab2:	2500      	movs	r5, #0
  402ab4:	42a5      	cmp	r5, r4
  402ab6:	d109      	bne.n	402acc <__libc_init_array+0x24>
  402ab8:	4e0b      	ldr	r6, [pc, #44]	; (402ae8 <__libc_init_array+0x40>)
  402aba:	4c0c      	ldr	r4, [pc, #48]	; (402aec <__libc_init_array+0x44>)
  402abc:	f002 ffe8 	bl	405a90 <_init>
  402ac0:	1ba4      	subs	r4, r4, r6
  402ac2:	10a4      	asrs	r4, r4, #2
  402ac4:	2500      	movs	r5, #0
  402ac6:	42a5      	cmp	r5, r4
  402ac8:	d105      	bne.n	402ad6 <__libc_init_array+0x2e>
  402aca:	bd70      	pop	{r4, r5, r6, pc}
  402acc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402ad0:	4798      	blx	r3
  402ad2:	3501      	adds	r5, #1
  402ad4:	e7ee      	b.n	402ab4 <__libc_init_array+0xc>
  402ad6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402ada:	4798      	blx	r3
  402adc:	3501      	adds	r5, #1
  402ade:	e7f2      	b.n	402ac6 <__libc_init_array+0x1e>
  402ae0:	00405a9c 	.word	0x00405a9c
  402ae4:	00405a9c 	.word	0x00405a9c
  402ae8:	00405a9c 	.word	0x00405a9c
  402aec:	00405aa0 	.word	0x00405aa0

00402af0 <memcpy>:
  402af0:	b510      	push	{r4, lr}
  402af2:	1e43      	subs	r3, r0, #1
  402af4:	440a      	add	r2, r1
  402af6:	4291      	cmp	r1, r2
  402af8:	d100      	bne.n	402afc <memcpy+0xc>
  402afa:	bd10      	pop	{r4, pc}
  402afc:	f811 4b01 	ldrb.w	r4, [r1], #1
  402b00:	f803 4f01 	strb.w	r4, [r3, #1]!
  402b04:	e7f7      	b.n	402af6 <memcpy+0x6>

00402b06 <memset>:
  402b06:	4402      	add	r2, r0
  402b08:	4603      	mov	r3, r0
  402b0a:	4293      	cmp	r3, r2
  402b0c:	d100      	bne.n	402b10 <memset+0xa>
  402b0e:	4770      	bx	lr
  402b10:	f803 1b01 	strb.w	r1, [r3], #1
  402b14:	e7f9      	b.n	402b0a <memset+0x4>

00402b16 <__cvt>:
  402b16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b1a:	b088      	sub	sp, #32
  402b1c:	2b00      	cmp	r3, #0
  402b1e:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402b20:	9912      	ldr	r1, [sp, #72]	; 0x48
  402b22:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402b24:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402b28:	461e      	mov	r6, r3
  402b2a:	f027 0720 	bic.w	r7, r7, #32
  402b2e:	bfbb      	ittet	lt
  402b30:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  402b34:	461e      	movlt	r6, r3
  402b36:	2300      	movge	r3, #0
  402b38:	232d      	movlt	r3, #45	; 0x2d
  402b3a:	2f46      	cmp	r7, #70	; 0x46
  402b3c:	4614      	mov	r4, r2
  402b3e:	700b      	strb	r3, [r1, #0]
  402b40:	d004      	beq.n	402b4c <__cvt+0x36>
  402b42:	2f45      	cmp	r7, #69	; 0x45
  402b44:	d100      	bne.n	402b48 <__cvt+0x32>
  402b46:	3501      	adds	r5, #1
  402b48:	2302      	movs	r3, #2
  402b4a:	e000      	b.n	402b4e <__cvt+0x38>
  402b4c:	2303      	movs	r3, #3
  402b4e:	aa07      	add	r2, sp, #28
  402b50:	9204      	str	r2, [sp, #16]
  402b52:	aa06      	add	r2, sp, #24
  402b54:	9203      	str	r2, [sp, #12]
  402b56:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  402b5a:	4622      	mov	r2, r4
  402b5c:	4633      	mov	r3, r6
  402b5e:	f000 fd9b 	bl	403698 <_dtoa_r>
  402b62:	2f47      	cmp	r7, #71	; 0x47
  402b64:	4680      	mov	r8, r0
  402b66:	d102      	bne.n	402b6e <__cvt+0x58>
  402b68:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402b6a:	07db      	lsls	r3, r3, #31
  402b6c:	d526      	bpl.n	402bbc <__cvt+0xa6>
  402b6e:	2f46      	cmp	r7, #70	; 0x46
  402b70:	eb08 0905 	add.w	r9, r8, r5
  402b74:	d111      	bne.n	402b9a <__cvt+0x84>
  402b76:	f898 3000 	ldrb.w	r3, [r8]
  402b7a:	2b30      	cmp	r3, #48	; 0x30
  402b7c:	d10a      	bne.n	402b94 <__cvt+0x7e>
  402b7e:	2200      	movs	r2, #0
  402b80:	2300      	movs	r3, #0
  402b82:	4620      	mov	r0, r4
  402b84:	4631      	mov	r1, r6
  402b86:	f7ff ff35 	bl	4029f4 <__aeabi_dcmpeq>
  402b8a:	b918      	cbnz	r0, 402b94 <__cvt+0x7e>
  402b8c:	f1c5 0501 	rsb	r5, r5, #1
  402b90:	f8ca 5000 	str.w	r5, [sl]
  402b94:	f8da 3000 	ldr.w	r3, [sl]
  402b98:	4499      	add	r9, r3
  402b9a:	2200      	movs	r2, #0
  402b9c:	2300      	movs	r3, #0
  402b9e:	4620      	mov	r0, r4
  402ba0:	4631      	mov	r1, r6
  402ba2:	f7ff ff27 	bl	4029f4 <__aeabi_dcmpeq>
  402ba6:	b938      	cbnz	r0, 402bb8 <__cvt+0xa2>
  402ba8:	2230      	movs	r2, #48	; 0x30
  402baa:	9b07      	ldr	r3, [sp, #28]
  402bac:	4599      	cmp	r9, r3
  402bae:	d905      	bls.n	402bbc <__cvt+0xa6>
  402bb0:	1c59      	adds	r1, r3, #1
  402bb2:	9107      	str	r1, [sp, #28]
  402bb4:	701a      	strb	r2, [r3, #0]
  402bb6:	e7f8      	b.n	402baa <__cvt+0x94>
  402bb8:	f8cd 901c 	str.w	r9, [sp, #28]
  402bbc:	9b07      	ldr	r3, [sp, #28]
  402bbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402bc0:	eba3 0308 	sub.w	r3, r3, r8
  402bc4:	4640      	mov	r0, r8
  402bc6:	6013      	str	r3, [r2, #0]
  402bc8:	b008      	add	sp, #32
  402bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402bce <__exponent>:
  402bce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  402bd0:	4603      	mov	r3, r0
  402bd2:	2900      	cmp	r1, #0
  402bd4:	bfb8      	it	lt
  402bd6:	4249      	neglt	r1, r1
  402bd8:	f803 2b02 	strb.w	r2, [r3], #2
  402bdc:	bfb4      	ite	lt
  402bde:	222d      	movlt	r2, #45	; 0x2d
  402be0:	222b      	movge	r2, #43	; 0x2b
  402be2:	2909      	cmp	r1, #9
  402be4:	7042      	strb	r2, [r0, #1]
  402be6:	dd20      	ble.n	402c2a <__exponent+0x5c>
  402be8:	f10d 0207 	add.w	r2, sp, #7
  402bec:	4617      	mov	r7, r2
  402bee:	260a      	movs	r6, #10
  402bf0:	fb91 f5f6 	sdiv	r5, r1, r6
  402bf4:	fb06 1115 	mls	r1, r6, r5, r1
  402bf8:	3130      	adds	r1, #48	; 0x30
  402bfa:	2d09      	cmp	r5, #9
  402bfc:	f802 1c01 	strb.w	r1, [r2, #-1]
  402c00:	f102 34ff 	add.w	r4, r2, #4294967295
  402c04:	4629      	mov	r1, r5
  402c06:	dc09      	bgt.n	402c1c <__exponent+0x4e>
  402c08:	3130      	adds	r1, #48	; 0x30
  402c0a:	3a02      	subs	r2, #2
  402c0c:	f804 1c01 	strb.w	r1, [r4, #-1]
  402c10:	42ba      	cmp	r2, r7
  402c12:	461c      	mov	r4, r3
  402c14:	d304      	bcc.n	402c20 <__exponent+0x52>
  402c16:	1a20      	subs	r0, r4, r0
  402c18:	b003      	add	sp, #12
  402c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402c1c:	4622      	mov	r2, r4
  402c1e:	e7e7      	b.n	402bf0 <__exponent+0x22>
  402c20:	f812 1b01 	ldrb.w	r1, [r2], #1
  402c24:	f803 1b01 	strb.w	r1, [r3], #1
  402c28:	e7f2      	b.n	402c10 <__exponent+0x42>
  402c2a:	2230      	movs	r2, #48	; 0x30
  402c2c:	461c      	mov	r4, r3
  402c2e:	4411      	add	r1, r2
  402c30:	f804 2b02 	strb.w	r2, [r4], #2
  402c34:	7059      	strb	r1, [r3, #1]
  402c36:	e7ee      	b.n	402c16 <__exponent+0x48>

00402c38 <_printf_float>:
  402c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c3c:	b091      	sub	sp, #68	; 0x44
  402c3e:	460c      	mov	r4, r1
  402c40:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  402c42:	4693      	mov	fp, r2
  402c44:	461e      	mov	r6, r3
  402c46:	4605      	mov	r5, r0
  402c48:	f001 fc74 	bl	404534 <_localeconv_r>
  402c4c:	6803      	ldr	r3, [r0, #0]
  402c4e:	9309      	str	r3, [sp, #36]	; 0x24
  402c50:	4618      	mov	r0, r3
  402c52:	f000 fc8d 	bl	403570 <strlen>
  402c56:	2300      	movs	r3, #0
  402c58:	930e      	str	r3, [sp, #56]	; 0x38
  402c5a:	683b      	ldr	r3, [r7, #0]
  402c5c:	900a      	str	r0, [sp, #40]	; 0x28
  402c5e:	3307      	adds	r3, #7
  402c60:	f023 0307 	bic.w	r3, r3, #7
  402c64:	f103 0208 	add.w	r2, r3, #8
  402c68:	f894 8018 	ldrb.w	r8, [r4, #24]
  402c6c:	f8d4 a000 	ldr.w	sl, [r4]
  402c70:	603a      	str	r2, [r7, #0]
  402c72:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402c7a:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  402c7e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  402c80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  402c84:	930b      	str	r3, [sp, #44]	; 0x2c
  402c86:	f04f 32ff 	mov.w	r2, #4294967295
  402c8a:	4ba6      	ldr	r3, [pc, #664]	; (402f24 <_printf_float+0x2ec>)
  402c8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402c8e:	4638      	mov	r0, r7
  402c90:	f002 fb84 	bl	40539c <__aeabi_dcmpun>
  402c94:	2800      	cmp	r0, #0
  402c96:	f040 81f7 	bne.w	403088 <_printf_float+0x450>
  402c9a:	f04f 32ff 	mov.w	r2, #4294967295
  402c9e:	4ba1      	ldr	r3, [pc, #644]	; (402f24 <_printf_float+0x2ec>)
  402ca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402ca2:	4638      	mov	r0, r7
  402ca4:	f7ff feba 	bl	402a1c <__aeabi_dcmple>
  402ca8:	2800      	cmp	r0, #0
  402caa:	f040 81ed 	bne.w	403088 <_printf_float+0x450>
  402cae:	2200      	movs	r2, #0
  402cb0:	2300      	movs	r3, #0
  402cb2:	4638      	mov	r0, r7
  402cb4:	4649      	mov	r1, r9
  402cb6:	f7ff fea7 	bl	402a08 <__aeabi_dcmplt>
  402cba:	b110      	cbz	r0, 402cc2 <_printf_float+0x8a>
  402cbc:	232d      	movs	r3, #45	; 0x2d
  402cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402cc2:	4b99      	ldr	r3, [pc, #612]	; (402f28 <_printf_float+0x2f0>)
  402cc4:	4f99      	ldr	r7, [pc, #612]	; (402f2c <_printf_float+0x2f4>)
  402cc6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  402cca:	bf98      	it	ls
  402ccc:	461f      	movls	r7, r3
  402cce:	2303      	movs	r3, #3
  402cd0:	6123      	str	r3, [r4, #16]
  402cd2:	f02a 0304 	bic.w	r3, sl, #4
  402cd6:	6023      	str	r3, [r4, #0]
  402cd8:	f04f 0900 	mov.w	r9, #0
  402cdc:	9600      	str	r6, [sp, #0]
  402cde:	465b      	mov	r3, fp
  402ce0:	aa0f      	add	r2, sp, #60	; 0x3c
  402ce2:	4621      	mov	r1, r4
  402ce4:	4628      	mov	r0, r5
  402ce6:	f000 f9df 	bl	4030a8 <_printf_common>
  402cea:	3001      	adds	r0, #1
  402cec:	f040 809a 	bne.w	402e24 <_printf_float+0x1ec>
  402cf0:	f04f 30ff 	mov.w	r0, #4294967295
  402cf4:	b011      	add	sp, #68	; 0x44
  402cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cfa:	6862      	ldr	r2, [r4, #4]
  402cfc:	1c53      	adds	r3, r2, #1
  402cfe:	a80e      	add	r0, sp, #56	; 0x38
  402d00:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  402d04:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  402d08:	d141      	bne.n	402d8e <_printf_float+0x156>
  402d0a:	2206      	movs	r2, #6
  402d0c:	6062      	str	r2, [r4, #4]
  402d0e:	6023      	str	r3, [r4, #0]
  402d10:	2100      	movs	r1, #0
  402d12:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  402d16:	9301      	str	r3, [sp, #4]
  402d18:	6863      	ldr	r3, [r4, #4]
  402d1a:	9005      	str	r0, [sp, #20]
  402d1c:	9202      	str	r2, [sp, #8]
  402d1e:	9300      	str	r3, [sp, #0]
  402d20:	463a      	mov	r2, r7
  402d22:	464b      	mov	r3, r9
  402d24:	9106      	str	r1, [sp, #24]
  402d26:	f8cd 8010 	str.w	r8, [sp, #16]
  402d2a:	f8cd e00c 	str.w	lr, [sp, #12]
  402d2e:	4628      	mov	r0, r5
  402d30:	f7ff fef1 	bl	402b16 <__cvt>
  402d34:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  402d38:	2b47      	cmp	r3, #71	; 0x47
  402d3a:	4607      	mov	r7, r0
  402d3c:	d109      	bne.n	402d52 <_printf_float+0x11a>
  402d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402d40:	1cd8      	adds	r0, r3, #3
  402d42:	db02      	blt.n	402d4a <_printf_float+0x112>
  402d44:	6862      	ldr	r2, [r4, #4]
  402d46:	4293      	cmp	r3, r2
  402d48:	dd59      	ble.n	402dfe <_printf_float+0x1c6>
  402d4a:	f1a8 0802 	sub.w	r8, r8, #2
  402d4e:	fa5f f888 	uxtb.w	r8, r8
  402d52:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  402d56:	990d      	ldr	r1, [sp, #52]	; 0x34
  402d58:	d836      	bhi.n	402dc8 <_printf_float+0x190>
  402d5a:	3901      	subs	r1, #1
  402d5c:	4642      	mov	r2, r8
  402d5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
  402d62:	910d      	str	r1, [sp, #52]	; 0x34
  402d64:	f7ff ff33 	bl	402bce <__exponent>
  402d68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402d6a:	1883      	adds	r3, r0, r2
  402d6c:	2a01      	cmp	r2, #1
  402d6e:	4681      	mov	r9, r0
  402d70:	6123      	str	r3, [r4, #16]
  402d72:	dc02      	bgt.n	402d7a <_printf_float+0x142>
  402d74:	6822      	ldr	r2, [r4, #0]
  402d76:	07d1      	lsls	r1, r2, #31
  402d78:	d501      	bpl.n	402d7e <_printf_float+0x146>
  402d7a:	3301      	adds	r3, #1
  402d7c:	6123      	str	r3, [r4, #16]
  402d7e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  402d82:	2b00      	cmp	r3, #0
  402d84:	d0aa      	beq.n	402cdc <_printf_float+0xa4>
  402d86:	232d      	movs	r3, #45	; 0x2d
  402d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402d8c:	e7a6      	b.n	402cdc <_printf_float+0xa4>
  402d8e:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  402d92:	d002      	beq.n	402d9a <_printf_float+0x162>
  402d94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  402d98:	d1b9      	bne.n	402d0e <_printf_float+0xd6>
  402d9a:	b19a      	cbz	r2, 402dc4 <_printf_float+0x18c>
  402d9c:	2100      	movs	r1, #0
  402d9e:	9106      	str	r1, [sp, #24]
  402da0:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  402da4:	e88d 000c 	stmia.w	sp, {r2, r3}
  402da8:	6023      	str	r3, [r4, #0]
  402daa:	9005      	str	r0, [sp, #20]
  402dac:	463a      	mov	r2, r7
  402dae:	f8cd 8010 	str.w	r8, [sp, #16]
  402db2:	f8cd e00c 	str.w	lr, [sp, #12]
  402db6:	9102      	str	r1, [sp, #8]
  402db8:	464b      	mov	r3, r9
  402dba:	4628      	mov	r0, r5
  402dbc:	f7ff feab 	bl	402b16 <__cvt>
  402dc0:	4607      	mov	r7, r0
  402dc2:	e7bc      	b.n	402d3e <_printf_float+0x106>
  402dc4:	2201      	movs	r2, #1
  402dc6:	e7a1      	b.n	402d0c <_printf_float+0xd4>
  402dc8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  402dcc:	d119      	bne.n	402e02 <_printf_float+0x1ca>
  402dce:	2900      	cmp	r1, #0
  402dd0:	6863      	ldr	r3, [r4, #4]
  402dd2:	dd0c      	ble.n	402dee <_printf_float+0x1b6>
  402dd4:	6121      	str	r1, [r4, #16]
  402dd6:	b913      	cbnz	r3, 402dde <_printf_float+0x1a6>
  402dd8:	6822      	ldr	r2, [r4, #0]
  402dda:	07d2      	lsls	r2, r2, #31
  402ddc:	d502      	bpl.n	402de4 <_printf_float+0x1ac>
  402dde:	3301      	adds	r3, #1
  402de0:	440b      	add	r3, r1
  402de2:	6123      	str	r3, [r4, #16]
  402de4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402de6:	65a3      	str	r3, [r4, #88]	; 0x58
  402de8:	f04f 0900 	mov.w	r9, #0
  402dec:	e7c7      	b.n	402d7e <_printf_float+0x146>
  402dee:	b913      	cbnz	r3, 402df6 <_printf_float+0x1be>
  402df0:	6822      	ldr	r2, [r4, #0]
  402df2:	07d0      	lsls	r0, r2, #31
  402df4:	d501      	bpl.n	402dfa <_printf_float+0x1c2>
  402df6:	3302      	adds	r3, #2
  402df8:	e7f3      	b.n	402de2 <_printf_float+0x1aa>
  402dfa:	2301      	movs	r3, #1
  402dfc:	e7f1      	b.n	402de2 <_printf_float+0x1aa>
  402dfe:	f04f 0867 	mov.w	r8, #103	; 0x67
  402e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402e04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402e06:	4293      	cmp	r3, r2
  402e08:	db05      	blt.n	402e16 <_printf_float+0x1de>
  402e0a:	6822      	ldr	r2, [r4, #0]
  402e0c:	6123      	str	r3, [r4, #16]
  402e0e:	07d1      	lsls	r1, r2, #31
  402e10:	d5e8      	bpl.n	402de4 <_printf_float+0x1ac>
  402e12:	3301      	adds	r3, #1
  402e14:	e7e5      	b.n	402de2 <_printf_float+0x1aa>
  402e16:	2b00      	cmp	r3, #0
  402e18:	bfd4      	ite	le
  402e1a:	f1c3 0302 	rsble	r3, r3, #2
  402e1e:	2301      	movgt	r3, #1
  402e20:	4413      	add	r3, r2
  402e22:	e7de      	b.n	402de2 <_printf_float+0x1aa>
  402e24:	6823      	ldr	r3, [r4, #0]
  402e26:	055a      	lsls	r2, r3, #21
  402e28:	d407      	bmi.n	402e3a <_printf_float+0x202>
  402e2a:	6923      	ldr	r3, [r4, #16]
  402e2c:	463a      	mov	r2, r7
  402e2e:	4659      	mov	r1, fp
  402e30:	4628      	mov	r0, r5
  402e32:	47b0      	blx	r6
  402e34:	3001      	adds	r0, #1
  402e36:	d12a      	bne.n	402e8e <_printf_float+0x256>
  402e38:	e75a      	b.n	402cf0 <_printf_float+0xb8>
  402e3a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  402e3e:	f240 80dc 	bls.w	402ffa <_printf_float+0x3c2>
  402e42:	2200      	movs	r2, #0
  402e44:	2300      	movs	r3, #0
  402e46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402e4a:	f7ff fdd3 	bl	4029f4 <__aeabi_dcmpeq>
  402e4e:	2800      	cmp	r0, #0
  402e50:	d039      	beq.n	402ec6 <_printf_float+0x28e>
  402e52:	2301      	movs	r3, #1
  402e54:	4a36      	ldr	r2, [pc, #216]	; (402f30 <_printf_float+0x2f8>)
  402e56:	4659      	mov	r1, fp
  402e58:	4628      	mov	r0, r5
  402e5a:	47b0      	blx	r6
  402e5c:	3001      	adds	r0, #1
  402e5e:	f43f af47 	beq.w	402cf0 <_printf_float+0xb8>
  402e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402e64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402e66:	429a      	cmp	r2, r3
  402e68:	db02      	blt.n	402e70 <_printf_float+0x238>
  402e6a:	6823      	ldr	r3, [r4, #0]
  402e6c:	07d8      	lsls	r0, r3, #31
  402e6e:	d50e      	bpl.n	402e8e <_printf_float+0x256>
  402e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402e74:	4659      	mov	r1, fp
  402e76:	4628      	mov	r0, r5
  402e78:	47b0      	blx	r6
  402e7a:	3001      	adds	r0, #1
  402e7c:	f43f af38 	beq.w	402cf0 <_printf_float+0xb8>
  402e80:	2700      	movs	r7, #0
  402e82:	f104 081a 	add.w	r8, r4, #26
  402e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402e88:	3b01      	subs	r3, #1
  402e8a:	429f      	cmp	r7, r3
  402e8c:	db11      	blt.n	402eb2 <_printf_float+0x27a>
  402e8e:	6823      	ldr	r3, [r4, #0]
  402e90:	079f      	lsls	r7, r3, #30
  402e92:	d508      	bpl.n	402ea6 <_printf_float+0x26e>
  402e94:	2700      	movs	r7, #0
  402e96:	f104 0819 	add.w	r8, r4, #25
  402e9a:	68e3      	ldr	r3, [r4, #12]
  402e9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402e9e:	1a9b      	subs	r3, r3, r2
  402ea0:	429f      	cmp	r7, r3
  402ea2:	f2c0 80e7 	blt.w	403074 <_printf_float+0x43c>
  402ea6:	68e0      	ldr	r0, [r4, #12]
  402ea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402eaa:	4298      	cmp	r0, r3
  402eac:	bfb8      	it	lt
  402eae:	4618      	movlt	r0, r3
  402eb0:	e720      	b.n	402cf4 <_printf_float+0xbc>
  402eb2:	2301      	movs	r3, #1
  402eb4:	4642      	mov	r2, r8
  402eb6:	4659      	mov	r1, fp
  402eb8:	4628      	mov	r0, r5
  402eba:	47b0      	blx	r6
  402ebc:	3001      	adds	r0, #1
  402ebe:	f43f af17 	beq.w	402cf0 <_printf_float+0xb8>
  402ec2:	3701      	adds	r7, #1
  402ec4:	e7df      	b.n	402e86 <_printf_float+0x24e>
  402ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402ec8:	2b00      	cmp	r3, #0
  402eca:	dc33      	bgt.n	402f34 <_printf_float+0x2fc>
  402ecc:	2301      	movs	r3, #1
  402ece:	4a18      	ldr	r2, [pc, #96]	; (402f30 <_printf_float+0x2f8>)
  402ed0:	4659      	mov	r1, fp
  402ed2:	4628      	mov	r0, r5
  402ed4:	47b0      	blx	r6
  402ed6:	3001      	adds	r0, #1
  402ed8:	f43f af0a 	beq.w	402cf0 <_printf_float+0xb8>
  402edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402ede:	b923      	cbnz	r3, 402eea <_printf_float+0x2b2>
  402ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402ee2:	b913      	cbnz	r3, 402eea <_printf_float+0x2b2>
  402ee4:	6823      	ldr	r3, [r4, #0]
  402ee6:	07d9      	lsls	r1, r3, #31
  402ee8:	d5d1      	bpl.n	402e8e <_printf_float+0x256>
  402eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402eee:	4659      	mov	r1, fp
  402ef0:	4628      	mov	r0, r5
  402ef2:	47b0      	blx	r6
  402ef4:	3001      	adds	r0, #1
  402ef6:	f43f aefb 	beq.w	402cf0 <_printf_float+0xb8>
  402efa:	f04f 0800 	mov.w	r8, #0
  402efe:	f104 091a 	add.w	r9, r4, #26
  402f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402f04:	425b      	negs	r3, r3
  402f06:	4598      	cmp	r8, r3
  402f08:	db01      	blt.n	402f0e <_printf_float+0x2d6>
  402f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402f0c:	e78e      	b.n	402e2c <_printf_float+0x1f4>
  402f0e:	2301      	movs	r3, #1
  402f10:	464a      	mov	r2, r9
  402f12:	4659      	mov	r1, fp
  402f14:	4628      	mov	r0, r5
  402f16:	47b0      	blx	r6
  402f18:	3001      	adds	r0, #1
  402f1a:	f43f aee9 	beq.w	402cf0 <_printf_float+0xb8>
  402f1e:	f108 0801 	add.w	r8, r8, #1
  402f22:	e7ee      	b.n	402f02 <_printf_float+0x2ca>
  402f24:	7fefffff 	.word	0x7fefffff
  402f28:	004057d4 	.word	0x004057d4
  402f2c:	004057d8 	.word	0x004057d8
  402f30:	004057e4 	.word	0x004057e4
  402f34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
  402f38:	429a      	cmp	r2, r3
  402f3a:	bfa8      	it	ge
  402f3c:	461a      	movge	r2, r3
  402f3e:	2a00      	cmp	r2, #0
  402f40:	4690      	mov	r8, r2
  402f42:	dc36      	bgt.n	402fb2 <_printf_float+0x37a>
  402f44:	f104 031a 	add.w	r3, r4, #26
  402f48:	f04f 0a00 	mov.w	sl, #0
  402f4c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  402f50:	930b      	str	r3, [sp, #44]	; 0x2c
  402f52:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  402f56:	eba9 0308 	sub.w	r3, r9, r8
  402f5a:	459a      	cmp	sl, r3
  402f5c:	db31      	blt.n	402fc2 <_printf_float+0x38a>
  402f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402f60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402f62:	429a      	cmp	r2, r3
  402f64:	db38      	blt.n	402fd8 <_printf_float+0x3a0>
  402f66:	6823      	ldr	r3, [r4, #0]
  402f68:	07da      	lsls	r2, r3, #31
  402f6a:	d435      	bmi.n	402fd8 <_printf_float+0x3a0>
  402f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402f6e:	990d      	ldr	r1, [sp, #52]	; 0x34
  402f70:	eba3 0209 	sub.w	r2, r3, r9
  402f74:	eba3 0801 	sub.w	r8, r3, r1
  402f78:	4590      	cmp	r8, r2
  402f7a:	bfa8      	it	ge
  402f7c:	4690      	movge	r8, r2
  402f7e:	f1b8 0f00 	cmp.w	r8, #0
  402f82:	dc31      	bgt.n	402fe8 <_printf_float+0x3b0>
  402f84:	2700      	movs	r7, #0
  402f86:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  402f8a:	f104 091a 	add.w	r9, r4, #26
  402f8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402f92:	1a9b      	subs	r3, r3, r2
  402f94:	eba3 0308 	sub.w	r3, r3, r8
  402f98:	429f      	cmp	r7, r3
  402f9a:	f6bf af78 	bge.w	402e8e <_printf_float+0x256>
  402f9e:	2301      	movs	r3, #1
  402fa0:	464a      	mov	r2, r9
  402fa2:	4659      	mov	r1, fp
  402fa4:	4628      	mov	r0, r5
  402fa6:	47b0      	blx	r6
  402fa8:	3001      	adds	r0, #1
  402faa:	f43f aea1 	beq.w	402cf0 <_printf_float+0xb8>
  402fae:	3701      	adds	r7, #1
  402fb0:	e7ed      	b.n	402f8e <_printf_float+0x356>
  402fb2:	4613      	mov	r3, r2
  402fb4:	4659      	mov	r1, fp
  402fb6:	463a      	mov	r2, r7
  402fb8:	4628      	mov	r0, r5
  402fba:	47b0      	blx	r6
  402fbc:	3001      	adds	r0, #1
  402fbe:	d1c1      	bne.n	402f44 <_printf_float+0x30c>
  402fc0:	e696      	b.n	402cf0 <_printf_float+0xb8>
  402fc2:	2301      	movs	r3, #1
  402fc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402fc6:	4659      	mov	r1, fp
  402fc8:	4628      	mov	r0, r5
  402fca:	47b0      	blx	r6
  402fcc:	3001      	adds	r0, #1
  402fce:	f43f ae8f 	beq.w	402cf0 <_printf_float+0xb8>
  402fd2:	f10a 0a01 	add.w	sl, sl, #1
  402fd6:	e7bc      	b.n	402f52 <_printf_float+0x31a>
  402fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402fdc:	4659      	mov	r1, fp
  402fde:	4628      	mov	r0, r5
  402fe0:	47b0      	blx	r6
  402fe2:	3001      	adds	r0, #1
  402fe4:	d1c2      	bne.n	402f6c <_printf_float+0x334>
  402fe6:	e683      	b.n	402cf0 <_printf_float+0xb8>
  402fe8:	4643      	mov	r3, r8
  402fea:	eb07 0209 	add.w	r2, r7, r9
  402fee:	4659      	mov	r1, fp
  402ff0:	4628      	mov	r0, r5
  402ff2:	47b0      	blx	r6
  402ff4:	3001      	adds	r0, #1
  402ff6:	d1c5      	bne.n	402f84 <_printf_float+0x34c>
  402ff8:	e67a      	b.n	402cf0 <_printf_float+0xb8>
  402ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402ffc:	2a01      	cmp	r2, #1
  402ffe:	dc01      	bgt.n	403004 <_printf_float+0x3cc>
  403000:	07db      	lsls	r3, r3, #31
  403002:	d534      	bpl.n	40306e <_printf_float+0x436>
  403004:	2301      	movs	r3, #1
  403006:	463a      	mov	r2, r7
  403008:	4659      	mov	r1, fp
  40300a:	4628      	mov	r0, r5
  40300c:	47b0      	blx	r6
  40300e:	3001      	adds	r0, #1
  403010:	f43f ae6e 	beq.w	402cf0 <_printf_float+0xb8>
  403014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403016:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403018:	4659      	mov	r1, fp
  40301a:	4628      	mov	r0, r5
  40301c:	47b0      	blx	r6
  40301e:	3001      	adds	r0, #1
  403020:	f43f ae66 	beq.w	402cf0 <_printf_float+0xb8>
  403024:	2200      	movs	r2, #0
  403026:	2300      	movs	r3, #0
  403028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40302c:	f7ff fce2 	bl	4029f4 <__aeabi_dcmpeq>
  403030:	b150      	cbz	r0, 403048 <_printf_float+0x410>
  403032:	2700      	movs	r7, #0
  403034:	f104 081a 	add.w	r8, r4, #26
  403038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40303a:	3b01      	subs	r3, #1
  40303c:	429f      	cmp	r7, r3
  40303e:	db0c      	blt.n	40305a <_printf_float+0x422>
  403040:	464b      	mov	r3, r9
  403042:	f104 0250 	add.w	r2, r4, #80	; 0x50
  403046:	e6f2      	b.n	402e2e <_printf_float+0x1f6>
  403048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40304a:	1c7a      	adds	r2, r7, #1
  40304c:	3b01      	subs	r3, #1
  40304e:	4659      	mov	r1, fp
  403050:	4628      	mov	r0, r5
  403052:	47b0      	blx	r6
  403054:	3001      	adds	r0, #1
  403056:	d1f3      	bne.n	403040 <_printf_float+0x408>
  403058:	e64a      	b.n	402cf0 <_printf_float+0xb8>
  40305a:	2301      	movs	r3, #1
  40305c:	4642      	mov	r2, r8
  40305e:	4659      	mov	r1, fp
  403060:	4628      	mov	r0, r5
  403062:	47b0      	blx	r6
  403064:	3001      	adds	r0, #1
  403066:	f43f ae43 	beq.w	402cf0 <_printf_float+0xb8>
  40306a:	3701      	adds	r7, #1
  40306c:	e7e4      	b.n	403038 <_printf_float+0x400>
  40306e:	2301      	movs	r3, #1
  403070:	463a      	mov	r2, r7
  403072:	e7ec      	b.n	40304e <_printf_float+0x416>
  403074:	2301      	movs	r3, #1
  403076:	4642      	mov	r2, r8
  403078:	4659      	mov	r1, fp
  40307a:	4628      	mov	r0, r5
  40307c:	47b0      	blx	r6
  40307e:	3001      	adds	r0, #1
  403080:	f43f ae36 	beq.w	402cf0 <_printf_float+0xb8>
  403084:	3701      	adds	r7, #1
  403086:	e708      	b.n	402e9a <_printf_float+0x262>
  403088:	463a      	mov	r2, r7
  40308a:	464b      	mov	r3, r9
  40308c:	4638      	mov	r0, r7
  40308e:	4649      	mov	r1, r9
  403090:	f002 f984 	bl	40539c <__aeabi_dcmpun>
  403094:	2800      	cmp	r0, #0
  403096:	f43f ae30 	beq.w	402cfa <_printf_float+0xc2>
  40309a:	4b01      	ldr	r3, [pc, #4]	; (4030a0 <_printf_float+0x468>)
  40309c:	4f01      	ldr	r7, [pc, #4]	; (4030a4 <_printf_float+0x46c>)
  40309e:	e612      	b.n	402cc6 <_printf_float+0x8e>
  4030a0:	004057dc 	.word	0x004057dc
  4030a4:	004057e0 	.word	0x004057e0

004030a8 <_printf_common>:
  4030a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4030ac:	4691      	mov	r9, r2
  4030ae:	461f      	mov	r7, r3
  4030b0:	688a      	ldr	r2, [r1, #8]
  4030b2:	690b      	ldr	r3, [r1, #16]
  4030b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4030b8:	4293      	cmp	r3, r2
  4030ba:	bfb8      	it	lt
  4030bc:	4613      	movlt	r3, r2
  4030be:	f8c9 3000 	str.w	r3, [r9]
  4030c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4030c6:	4606      	mov	r6, r0
  4030c8:	460c      	mov	r4, r1
  4030ca:	b112      	cbz	r2, 4030d2 <_printf_common+0x2a>
  4030cc:	3301      	adds	r3, #1
  4030ce:	f8c9 3000 	str.w	r3, [r9]
  4030d2:	6823      	ldr	r3, [r4, #0]
  4030d4:	0699      	lsls	r1, r3, #26
  4030d6:	bf42      	ittt	mi
  4030d8:	f8d9 3000 	ldrmi.w	r3, [r9]
  4030dc:	3302      	addmi	r3, #2
  4030de:	f8c9 3000 	strmi.w	r3, [r9]
  4030e2:	6825      	ldr	r5, [r4, #0]
  4030e4:	f015 0506 	ands.w	r5, r5, #6
  4030e8:	d107      	bne.n	4030fa <_printf_common+0x52>
  4030ea:	f104 0a19 	add.w	sl, r4, #25
  4030ee:	68e3      	ldr	r3, [r4, #12]
  4030f0:	f8d9 2000 	ldr.w	r2, [r9]
  4030f4:	1a9b      	subs	r3, r3, r2
  4030f6:	429d      	cmp	r5, r3
  4030f8:	db29      	blt.n	40314e <_printf_common+0xa6>
  4030fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4030fe:	6822      	ldr	r2, [r4, #0]
  403100:	3300      	adds	r3, #0
  403102:	bf18      	it	ne
  403104:	2301      	movne	r3, #1
  403106:	0692      	lsls	r2, r2, #26
  403108:	d42e      	bmi.n	403168 <_printf_common+0xc0>
  40310a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40310e:	4639      	mov	r1, r7
  403110:	4630      	mov	r0, r6
  403112:	47c0      	blx	r8
  403114:	3001      	adds	r0, #1
  403116:	d021      	beq.n	40315c <_printf_common+0xb4>
  403118:	6823      	ldr	r3, [r4, #0]
  40311a:	68e5      	ldr	r5, [r4, #12]
  40311c:	f8d9 2000 	ldr.w	r2, [r9]
  403120:	f003 0306 	and.w	r3, r3, #6
  403124:	2b04      	cmp	r3, #4
  403126:	bf08      	it	eq
  403128:	1aad      	subeq	r5, r5, r2
  40312a:	68a3      	ldr	r3, [r4, #8]
  40312c:	6922      	ldr	r2, [r4, #16]
  40312e:	bf0c      	ite	eq
  403130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  403134:	2500      	movne	r5, #0
  403136:	4293      	cmp	r3, r2
  403138:	bfc4      	itt	gt
  40313a:	1a9b      	subgt	r3, r3, r2
  40313c:	18ed      	addgt	r5, r5, r3
  40313e:	f04f 0900 	mov.w	r9, #0
  403142:	341a      	adds	r4, #26
  403144:	454d      	cmp	r5, r9
  403146:	d11b      	bne.n	403180 <_printf_common+0xd8>
  403148:	2000      	movs	r0, #0
  40314a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40314e:	2301      	movs	r3, #1
  403150:	4652      	mov	r2, sl
  403152:	4639      	mov	r1, r7
  403154:	4630      	mov	r0, r6
  403156:	47c0      	blx	r8
  403158:	3001      	adds	r0, #1
  40315a:	d103      	bne.n	403164 <_printf_common+0xbc>
  40315c:	f04f 30ff 	mov.w	r0, #4294967295
  403160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403164:	3501      	adds	r5, #1
  403166:	e7c2      	b.n	4030ee <_printf_common+0x46>
  403168:	18e1      	adds	r1, r4, r3
  40316a:	1c5a      	adds	r2, r3, #1
  40316c:	2030      	movs	r0, #48	; 0x30
  40316e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  403172:	4422      	add	r2, r4
  403174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  403178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  40317c:	3302      	adds	r3, #2
  40317e:	e7c4      	b.n	40310a <_printf_common+0x62>
  403180:	2301      	movs	r3, #1
  403182:	4622      	mov	r2, r4
  403184:	4639      	mov	r1, r7
  403186:	4630      	mov	r0, r6
  403188:	47c0      	blx	r8
  40318a:	3001      	adds	r0, #1
  40318c:	d0e6      	beq.n	40315c <_printf_common+0xb4>
  40318e:	f109 0901 	add.w	r9, r9, #1
  403192:	e7d7      	b.n	403144 <_printf_common+0x9c>

00403194 <_printf_i>:
  403194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403198:	4617      	mov	r7, r2
  40319a:	7e0a      	ldrb	r2, [r1, #24]
  40319c:	b085      	sub	sp, #20
  40319e:	2a6e      	cmp	r2, #110	; 0x6e
  4031a0:	4698      	mov	r8, r3
  4031a2:	4606      	mov	r6, r0
  4031a4:	460c      	mov	r4, r1
  4031a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4031a8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  4031ac:	f000 80bc 	beq.w	403328 <_printf_i+0x194>
  4031b0:	d81a      	bhi.n	4031e8 <_printf_i+0x54>
  4031b2:	2a63      	cmp	r2, #99	; 0x63
  4031b4:	d02e      	beq.n	403214 <_printf_i+0x80>
  4031b6:	d80a      	bhi.n	4031ce <_printf_i+0x3a>
  4031b8:	2a00      	cmp	r2, #0
  4031ba:	f000 80c8 	beq.w	40334e <_printf_i+0x1ba>
  4031be:	2a58      	cmp	r2, #88	; 0x58
  4031c0:	f000 808a 	beq.w	4032d8 <_printf_i+0x144>
  4031c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4031c8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  4031cc:	e02a      	b.n	403224 <_printf_i+0x90>
  4031ce:	2a64      	cmp	r2, #100	; 0x64
  4031d0:	d001      	beq.n	4031d6 <_printf_i+0x42>
  4031d2:	2a69      	cmp	r2, #105	; 0x69
  4031d4:	d1f6      	bne.n	4031c4 <_printf_i+0x30>
  4031d6:	6821      	ldr	r1, [r4, #0]
  4031d8:	681a      	ldr	r2, [r3, #0]
  4031da:	f011 0f80 	tst.w	r1, #128	; 0x80
  4031de:	d023      	beq.n	403228 <_printf_i+0x94>
  4031e0:	1d11      	adds	r1, r2, #4
  4031e2:	6019      	str	r1, [r3, #0]
  4031e4:	6813      	ldr	r3, [r2, #0]
  4031e6:	e027      	b.n	403238 <_printf_i+0xa4>
  4031e8:	2a73      	cmp	r2, #115	; 0x73
  4031ea:	f000 80b4 	beq.w	403356 <_printf_i+0x1c2>
  4031ee:	d808      	bhi.n	403202 <_printf_i+0x6e>
  4031f0:	2a6f      	cmp	r2, #111	; 0x6f
  4031f2:	d02a      	beq.n	40324a <_printf_i+0xb6>
  4031f4:	2a70      	cmp	r2, #112	; 0x70
  4031f6:	d1e5      	bne.n	4031c4 <_printf_i+0x30>
  4031f8:	680a      	ldr	r2, [r1, #0]
  4031fa:	f042 0220 	orr.w	r2, r2, #32
  4031fe:	600a      	str	r2, [r1, #0]
  403200:	e003      	b.n	40320a <_printf_i+0x76>
  403202:	2a75      	cmp	r2, #117	; 0x75
  403204:	d021      	beq.n	40324a <_printf_i+0xb6>
  403206:	2a78      	cmp	r2, #120	; 0x78
  403208:	d1dc      	bne.n	4031c4 <_printf_i+0x30>
  40320a:	2278      	movs	r2, #120	; 0x78
  40320c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  403210:	496e      	ldr	r1, [pc, #440]	; (4033cc <_printf_i+0x238>)
  403212:	e064      	b.n	4032de <_printf_i+0x14a>
  403214:	681a      	ldr	r2, [r3, #0]
  403216:	f101 0542 	add.w	r5, r1, #66	; 0x42
  40321a:	1d11      	adds	r1, r2, #4
  40321c:	6019      	str	r1, [r3, #0]
  40321e:	6813      	ldr	r3, [r2, #0]
  403220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403224:	2301      	movs	r3, #1
  403226:	e0a3      	b.n	403370 <_printf_i+0x1dc>
  403228:	f011 0f40 	tst.w	r1, #64	; 0x40
  40322c:	f102 0104 	add.w	r1, r2, #4
  403230:	6019      	str	r1, [r3, #0]
  403232:	d0d7      	beq.n	4031e4 <_printf_i+0x50>
  403234:	f9b2 3000 	ldrsh.w	r3, [r2]
  403238:	2b00      	cmp	r3, #0
  40323a:	da03      	bge.n	403244 <_printf_i+0xb0>
  40323c:	222d      	movs	r2, #45	; 0x2d
  40323e:	425b      	negs	r3, r3
  403240:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  403244:	4962      	ldr	r1, [pc, #392]	; (4033d0 <_printf_i+0x23c>)
  403246:	220a      	movs	r2, #10
  403248:	e017      	b.n	40327a <_printf_i+0xe6>
  40324a:	6820      	ldr	r0, [r4, #0]
  40324c:	6819      	ldr	r1, [r3, #0]
  40324e:	f010 0f80 	tst.w	r0, #128	; 0x80
  403252:	d003      	beq.n	40325c <_printf_i+0xc8>
  403254:	1d08      	adds	r0, r1, #4
  403256:	6018      	str	r0, [r3, #0]
  403258:	680b      	ldr	r3, [r1, #0]
  40325a:	e006      	b.n	40326a <_printf_i+0xd6>
  40325c:	f010 0f40 	tst.w	r0, #64	; 0x40
  403260:	f101 0004 	add.w	r0, r1, #4
  403264:	6018      	str	r0, [r3, #0]
  403266:	d0f7      	beq.n	403258 <_printf_i+0xc4>
  403268:	880b      	ldrh	r3, [r1, #0]
  40326a:	4959      	ldr	r1, [pc, #356]	; (4033d0 <_printf_i+0x23c>)
  40326c:	2a6f      	cmp	r2, #111	; 0x6f
  40326e:	bf14      	ite	ne
  403270:	220a      	movne	r2, #10
  403272:	2208      	moveq	r2, #8
  403274:	2000      	movs	r0, #0
  403276:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  40327a:	6865      	ldr	r5, [r4, #4]
  40327c:	60a5      	str	r5, [r4, #8]
  40327e:	2d00      	cmp	r5, #0
  403280:	f2c0 809c 	blt.w	4033bc <_printf_i+0x228>
  403284:	6820      	ldr	r0, [r4, #0]
  403286:	f020 0004 	bic.w	r0, r0, #4
  40328a:	6020      	str	r0, [r4, #0]
  40328c:	2b00      	cmp	r3, #0
  40328e:	d13f      	bne.n	403310 <_printf_i+0x17c>
  403290:	2d00      	cmp	r5, #0
  403292:	f040 8095 	bne.w	4033c0 <_printf_i+0x22c>
  403296:	4675      	mov	r5, lr
  403298:	2a08      	cmp	r2, #8
  40329a:	d10b      	bne.n	4032b4 <_printf_i+0x120>
  40329c:	6823      	ldr	r3, [r4, #0]
  40329e:	07da      	lsls	r2, r3, #31
  4032a0:	d508      	bpl.n	4032b4 <_printf_i+0x120>
  4032a2:	6923      	ldr	r3, [r4, #16]
  4032a4:	6862      	ldr	r2, [r4, #4]
  4032a6:	429a      	cmp	r2, r3
  4032a8:	bfde      	ittt	le
  4032aa:	2330      	movle	r3, #48	; 0x30
  4032ac:	f805 3c01 	strble.w	r3, [r5, #-1]
  4032b0:	f105 35ff 	addle.w	r5, r5, #4294967295
  4032b4:	ebae 0305 	sub.w	r3, lr, r5
  4032b8:	6123      	str	r3, [r4, #16]
  4032ba:	f8cd 8000 	str.w	r8, [sp]
  4032be:	463b      	mov	r3, r7
  4032c0:	aa03      	add	r2, sp, #12
  4032c2:	4621      	mov	r1, r4
  4032c4:	4630      	mov	r0, r6
  4032c6:	f7ff feef 	bl	4030a8 <_printf_common>
  4032ca:	3001      	adds	r0, #1
  4032cc:	d155      	bne.n	40337a <_printf_i+0x1e6>
  4032ce:	f04f 30ff 	mov.w	r0, #4294967295
  4032d2:	b005      	add	sp, #20
  4032d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4032d8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  4032dc:	493c      	ldr	r1, [pc, #240]	; (4033d0 <_printf_i+0x23c>)
  4032de:	6822      	ldr	r2, [r4, #0]
  4032e0:	6818      	ldr	r0, [r3, #0]
  4032e2:	f012 0f80 	tst.w	r2, #128	; 0x80
  4032e6:	f100 0504 	add.w	r5, r0, #4
  4032ea:	601d      	str	r5, [r3, #0]
  4032ec:	d001      	beq.n	4032f2 <_printf_i+0x15e>
  4032ee:	6803      	ldr	r3, [r0, #0]
  4032f0:	e002      	b.n	4032f8 <_printf_i+0x164>
  4032f2:	0655      	lsls	r5, r2, #25
  4032f4:	d5fb      	bpl.n	4032ee <_printf_i+0x15a>
  4032f6:	8803      	ldrh	r3, [r0, #0]
  4032f8:	07d0      	lsls	r0, r2, #31
  4032fa:	bf44      	itt	mi
  4032fc:	f042 0220 	orrmi.w	r2, r2, #32
  403300:	6022      	strmi	r2, [r4, #0]
  403302:	b91b      	cbnz	r3, 40330c <_printf_i+0x178>
  403304:	6822      	ldr	r2, [r4, #0]
  403306:	f022 0220 	bic.w	r2, r2, #32
  40330a:	6022      	str	r2, [r4, #0]
  40330c:	2210      	movs	r2, #16
  40330e:	e7b1      	b.n	403274 <_printf_i+0xe0>
  403310:	4675      	mov	r5, lr
  403312:	fbb3 f0f2 	udiv	r0, r3, r2
  403316:	fb02 3310 	mls	r3, r2, r0, r3
  40331a:	5ccb      	ldrb	r3, [r1, r3]
  40331c:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403320:	4603      	mov	r3, r0
  403322:	2800      	cmp	r0, #0
  403324:	d1f5      	bne.n	403312 <_printf_i+0x17e>
  403326:	e7b7      	b.n	403298 <_printf_i+0x104>
  403328:	6808      	ldr	r0, [r1, #0]
  40332a:	681a      	ldr	r2, [r3, #0]
  40332c:	6949      	ldr	r1, [r1, #20]
  40332e:	f010 0f80 	tst.w	r0, #128	; 0x80
  403332:	d004      	beq.n	40333e <_printf_i+0x1aa>
  403334:	1d10      	adds	r0, r2, #4
  403336:	6018      	str	r0, [r3, #0]
  403338:	6813      	ldr	r3, [r2, #0]
  40333a:	6019      	str	r1, [r3, #0]
  40333c:	e007      	b.n	40334e <_printf_i+0x1ba>
  40333e:	f010 0f40 	tst.w	r0, #64	; 0x40
  403342:	f102 0004 	add.w	r0, r2, #4
  403346:	6018      	str	r0, [r3, #0]
  403348:	6813      	ldr	r3, [r2, #0]
  40334a:	d0f6      	beq.n	40333a <_printf_i+0x1a6>
  40334c:	8019      	strh	r1, [r3, #0]
  40334e:	2300      	movs	r3, #0
  403350:	6123      	str	r3, [r4, #16]
  403352:	4675      	mov	r5, lr
  403354:	e7b1      	b.n	4032ba <_printf_i+0x126>
  403356:	681a      	ldr	r2, [r3, #0]
  403358:	1d11      	adds	r1, r2, #4
  40335a:	6019      	str	r1, [r3, #0]
  40335c:	6815      	ldr	r5, [r2, #0]
  40335e:	6862      	ldr	r2, [r4, #4]
  403360:	2100      	movs	r1, #0
  403362:	4628      	mov	r0, r5
  403364:	f001 f964 	bl	404630 <memchr>
  403368:	b108      	cbz	r0, 40336e <_printf_i+0x1da>
  40336a:	1b40      	subs	r0, r0, r5
  40336c:	6060      	str	r0, [r4, #4]
  40336e:	6863      	ldr	r3, [r4, #4]
  403370:	6123      	str	r3, [r4, #16]
  403372:	2300      	movs	r3, #0
  403374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403378:	e79f      	b.n	4032ba <_printf_i+0x126>
  40337a:	6923      	ldr	r3, [r4, #16]
  40337c:	462a      	mov	r2, r5
  40337e:	4639      	mov	r1, r7
  403380:	4630      	mov	r0, r6
  403382:	47c0      	blx	r8
  403384:	3001      	adds	r0, #1
  403386:	d0a2      	beq.n	4032ce <_printf_i+0x13a>
  403388:	6823      	ldr	r3, [r4, #0]
  40338a:	079b      	lsls	r3, r3, #30
  40338c:	d507      	bpl.n	40339e <_printf_i+0x20a>
  40338e:	2500      	movs	r5, #0
  403390:	f104 0919 	add.w	r9, r4, #25
  403394:	68e3      	ldr	r3, [r4, #12]
  403396:	9a03      	ldr	r2, [sp, #12]
  403398:	1a9b      	subs	r3, r3, r2
  40339a:	429d      	cmp	r5, r3
  40339c:	db05      	blt.n	4033aa <_printf_i+0x216>
  40339e:	68e0      	ldr	r0, [r4, #12]
  4033a0:	9b03      	ldr	r3, [sp, #12]
  4033a2:	4298      	cmp	r0, r3
  4033a4:	bfb8      	it	lt
  4033a6:	4618      	movlt	r0, r3
  4033a8:	e793      	b.n	4032d2 <_printf_i+0x13e>
  4033aa:	2301      	movs	r3, #1
  4033ac:	464a      	mov	r2, r9
  4033ae:	4639      	mov	r1, r7
  4033b0:	4630      	mov	r0, r6
  4033b2:	47c0      	blx	r8
  4033b4:	3001      	adds	r0, #1
  4033b6:	d08a      	beq.n	4032ce <_printf_i+0x13a>
  4033b8:	3501      	adds	r5, #1
  4033ba:	e7eb      	b.n	403394 <_printf_i+0x200>
  4033bc:	2b00      	cmp	r3, #0
  4033be:	d1a7      	bne.n	403310 <_printf_i+0x17c>
  4033c0:	780b      	ldrb	r3, [r1, #0]
  4033c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4033c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4033ca:	e765      	b.n	403298 <_printf_i+0x104>
  4033cc:	004057f7 	.word	0x004057f7
  4033d0:	004057e6 	.word	0x004057e6

004033d4 <iprintf>:
  4033d4:	b40f      	push	{r0, r1, r2, r3}
  4033d6:	4b0a      	ldr	r3, [pc, #40]	; (403400 <iprintf+0x2c>)
  4033d8:	b513      	push	{r0, r1, r4, lr}
  4033da:	681c      	ldr	r4, [r3, #0]
  4033dc:	b124      	cbz	r4, 4033e8 <iprintf+0x14>
  4033de:	69a3      	ldr	r3, [r4, #24]
  4033e0:	b913      	cbnz	r3, 4033e8 <iprintf+0x14>
  4033e2:	4620      	mov	r0, r4
  4033e4:	f001 f81c 	bl	404420 <__sinit>
  4033e8:	ab05      	add	r3, sp, #20
  4033ea:	9a04      	ldr	r2, [sp, #16]
  4033ec:	68a1      	ldr	r1, [r4, #8]
  4033ee:	9301      	str	r3, [sp, #4]
  4033f0:	4620      	mov	r0, r4
  4033f2:	f001 fd1f 	bl	404e34 <_vfiprintf_r>
  4033f6:	b002      	add	sp, #8
  4033f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4033fc:	b004      	add	sp, #16
  4033fe:	4770      	bx	lr
  403400:	20400048 	.word	0x20400048

00403404 <setbuf>:
  403404:	2900      	cmp	r1, #0
  403406:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40340a:	bf0c      	ite	eq
  40340c:	2202      	moveq	r2, #2
  40340e:	2200      	movne	r2, #0
  403410:	f000 b800 	b.w	403414 <setvbuf>

00403414 <setvbuf>:
  403414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403418:	461d      	mov	r5, r3
  40341a:	4b51      	ldr	r3, [pc, #324]	; (403560 <setvbuf+0x14c>)
  40341c:	681e      	ldr	r6, [r3, #0]
  40341e:	4604      	mov	r4, r0
  403420:	460f      	mov	r7, r1
  403422:	4690      	mov	r8, r2
  403424:	b126      	cbz	r6, 403430 <setvbuf+0x1c>
  403426:	69b3      	ldr	r3, [r6, #24]
  403428:	b913      	cbnz	r3, 403430 <setvbuf+0x1c>
  40342a:	4630      	mov	r0, r6
  40342c:	f000 fff8 	bl	404420 <__sinit>
  403430:	4b4c      	ldr	r3, [pc, #304]	; (403564 <setvbuf+0x150>)
  403432:	429c      	cmp	r4, r3
  403434:	d152      	bne.n	4034dc <setvbuf+0xc8>
  403436:	6874      	ldr	r4, [r6, #4]
  403438:	f1b8 0f02 	cmp.w	r8, #2
  40343c:	d006      	beq.n	40344c <setvbuf+0x38>
  40343e:	f1b8 0f01 	cmp.w	r8, #1
  403442:	f200 8089 	bhi.w	403558 <setvbuf+0x144>
  403446:	2d00      	cmp	r5, #0
  403448:	f2c0 8086 	blt.w	403558 <setvbuf+0x144>
  40344c:	4621      	mov	r1, r4
  40344e:	4630      	mov	r0, r6
  403450:	f000 ff7c 	bl	40434c <_fflush_r>
  403454:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403456:	b141      	cbz	r1, 40346a <setvbuf+0x56>
  403458:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40345c:	4299      	cmp	r1, r3
  40345e:	d002      	beq.n	403466 <setvbuf+0x52>
  403460:	4630      	mov	r0, r6
  403462:	f001 fc13 	bl	404c8c <_free_r>
  403466:	2300      	movs	r3, #0
  403468:	6363      	str	r3, [r4, #52]	; 0x34
  40346a:	2300      	movs	r3, #0
  40346c:	61a3      	str	r3, [r4, #24]
  40346e:	6063      	str	r3, [r4, #4]
  403470:	89a3      	ldrh	r3, [r4, #12]
  403472:	061b      	lsls	r3, r3, #24
  403474:	d503      	bpl.n	40347e <setvbuf+0x6a>
  403476:	6921      	ldr	r1, [r4, #16]
  403478:	4630      	mov	r0, r6
  40347a:	f001 fc07 	bl	404c8c <_free_r>
  40347e:	89a3      	ldrh	r3, [r4, #12]
  403480:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403484:	f023 0303 	bic.w	r3, r3, #3
  403488:	f1b8 0f02 	cmp.w	r8, #2
  40348c:	81a3      	strh	r3, [r4, #12]
  40348e:	d05d      	beq.n	40354c <setvbuf+0x138>
  403490:	ab01      	add	r3, sp, #4
  403492:	466a      	mov	r2, sp
  403494:	4621      	mov	r1, r4
  403496:	4630      	mov	r0, r6
  403498:	f001 f85a 	bl	404550 <__swhatbuf_r>
  40349c:	89a3      	ldrh	r3, [r4, #12]
  40349e:	4318      	orrs	r0, r3
  4034a0:	81a0      	strh	r0, [r4, #12]
  4034a2:	bb2d      	cbnz	r5, 4034f0 <setvbuf+0xdc>
  4034a4:	9d00      	ldr	r5, [sp, #0]
  4034a6:	4628      	mov	r0, r5
  4034a8:	f001 f8b6 	bl	404618 <malloc>
  4034ac:	4607      	mov	r7, r0
  4034ae:	2800      	cmp	r0, #0
  4034b0:	d14e      	bne.n	403550 <setvbuf+0x13c>
  4034b2:	f8dd 9000 	ldr.w	r9, [sp]
  4034b6:	45a9      	cmp	r9, r5
  4034b8:	d13c      	bne.n	403534 <setvbuf+0x120>
  4034ba:	f04f 30ff 	mov.w	r0, #4294967295
  4034be:	89a3      	ldrh	r3, [r4, #12]
  4034c0:	f043 0302 	orr.w	r3, r3, #2
  4034c4:	81a3      	strh	r3, [r4, #12]
  4034c6:	2300      	movs	r3, #0
  4034c8:	60a3      	str	r3, [r4, #8]
  4034ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4034ce:	6023      	str	r3, [r4, #0]
  4034d0:	6123      	str	r3, [r4, #16]
  4034d2:	2301      	movs	r3, #1
  4034d4:	6163      	str	r3, [r4, #20]
  4034d6:	b003      	add	sp, #12
  4034d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4034dc:	4b22      	ldr	r3, [pc, #136]	; (403568 <setvbuf+0x154>)
  4034de:	429c      	cmp	r4, r3
  4034e0:	d101      	bne.n	4034e6 <setvbuf+0xd2>
  4034e2:	68b4      	ldr	r4, [r6, #8]
  4034e4:	e7a8      	b.n	403438 <setvbuf+0x24>
  4034e6:	4b21      	ldr	r3, [pc, #132]	; (40356c <setvbuf+0x158>)
  4034e8:	429c      	cmp	r4, r3
  4034ea:	bf08      	it	eq
  4034ec:	68f4      	ldreq	r4, [r6, #12]
  4034ee:	e7a3      	b.n	403438 <setvbuf+0x24>
  4034f0:	2f00      	cmp	r7, #0
  4034f2:	d0d8      	beq.n	4034a6 <setvbuf+0x92>
  4034f4:	69b3      	ldr	r3, [r6, #24]
  4034f6:	b913      	cbnz	r3, 4034fe <setvbuf+0xea>
  4034f8:	4630      	mov	r0, r6
  4034fa:	f000 ff91 	bl	404420 <__sinit>
  4034fe:	f1b8 0f01 	cmp.w	r8, #1
  403502:	bf08      	it	eq
  403504:	89a3      	ldrheq	r3, [r4, #12]
  403506:	6027      	str	r7, [r4, #0]
  403508:	bf04      	itt	eq
  40350a:	f043 0301 	orreq.w	r3, r3, #1
  40350e:	81a3      	strheq	r3, [r4, #12]
  403510:	89a3      	ldrh	r3, [r4, #12]
  403512:	6127      	str	r7, [r4, #16]
  403514:	f013 0008 	ands.w	r0, r3, #8
  403518:	6165      	str	r5, [r4, #20]
  40351a:	d01b      	beq.n	403554 <setvbuf+0x140>
  40351c:	f013 0001 	ands.w	r0, r3, #1
  403520:	bf18      	it	ne
  403522:	426d      	negne	r5, r5
  403524:	f04f 0300 	mov.w	r3, #0
  403528:	bf1d      	ittte	ne
  40352a:	60a3      	strne	r3, [r4, #8]
  40352c:	61a5      	strne	r5, [r4, #24]
  40352e:	4618      	movne	r0, r3
  403530:	60a5      	streq	r5, [r4, #8]
  403532:	e7d0      	b.n	4034d6 <setvbuf+0xc2>
  403534:	4648      	mov	r0, r9
  403536:	f001 f86f 	bl	404618 <malloc>
  40353a:	4607      	mov	r7, r0
  40353c:	2800      	cmp	r0, #0
  40353e:	d0bc      	beq.n	4034ba <setvbuf+0xa6>
  403540:	89a3      	ldrh	r3, [r4, #12]
  403542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403546:	81a3      	strh	r3, [r4, #12]
  403548:	464d      	mov	r5, r9
  40354a:	e7d3      	b.n	4034f4 <setvbuf+0xe0>
  40354c:	2000      	movs	r0, #0
  40354e:	e7b6      	b.n	4034be <setvbuf+0xaa>
  403550:	46a9      	mov	r9, r5
  403552:	e7f5      	b.n	403540 <setvbuf+0x12c>
  403554:	60a0      	str	r0, [r4, #8]
  403556:	e7be      	b.n	4034d6 <setvbuf+0xc2>
  403558:	f04f 30ff 	mov.w	r0, #4294967295
  40355c:	e7bb      	b.n	4034d6 <setvbuf+0xc2>
  40355e:	bf00      	nop
  403560:	20400048 	.word	0x20400048
  403564:	00405838 	.word	0x00405838
  403568:	00405858 	.word	0x00405858
  40356c:	00405818 	.word	0x00405818

00403570 <strlen>:
  403570:	4603      	mov	r3, r0
  403572:	f813 2b01 	ldrb.w	r2, [r3], #1
  403576:	2a00      	cmp	r2, #0
  403578:	d1fb      	bne.n	403572 <strlen+0x2>
  40357a:	1a18      	subs	r0, r3, r0
  40357c:	3801      	subs	r0, #1
  40357e:	4770      	bx	lr

00403580 <quorem>:
  403580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403584:	6903      	ldr	r3, [r0, #16]
  403586:	690c      	ldr	r4, [r1, #16]
  403588:	429c      	cmp	r4, r3
  40358a:	4680      	mov	r8, r0
  40358c:	f300 8082 	bgt.w	403694 <quorem+0x114>
  403590:	3c01      	subs	r4, #1
  403592:	f101 0714 	add.w	r7, r1, #20
  403596:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  40359a:	f100 0614 	add.w	r6, r0, #20
  40359e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  4035a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  4035a6:	eb06 030e 	add.w	r3, r6, lr
  4035aa:	3501      	adds	r5, #1
  4035ac:	eb07 090e 	add.w	r9, r7, lr
  4035b0:	9301      	str	r3, [sp, #4]
  4035b2:	fbb0 f5f5 	udiv	r5, r0, r5
  4035b6:	b395      	cbz	r5, 40361e <quorem+0x9e>
  4035b8:	f04f 0a00 	mov.w	sl, #0
  4035bc:	4638      	mov	r0, r7
  4035be:	46b4      	mov	ip, r6
  4035c0:	46d3      	mov	fp, sl
  4035c2:	f850 2b04 	ldr.w	r2, [r0], #4
  4035c6:	b293      	uxth	r3, r2
  4035c8:	fb05 a303 	mla	r3, r5, r3, sl
  4035cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4035d0:	b29b      	uxth	r3, r3
  4035d2:	ebab 0303 	sub.w	r3, fp, r3
  4035d6:	0c12      	lsrs	r2, r2, #16
  4035d8:	f8bc b000 	ldrh.w	fp, [ip]
  4035dc:	fb05 a202 	mla	r2, r5, r2, sl
  4035e0:	fa13 f38b 	uxtah	r3, r3, fp
  4035e4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  4035e8:	fa1f fb82 	uxth.w	fp, r2
  4035ec:	f8dc 2000 	ldr.w	r2, [ip]
  4035f0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  4035f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4035f8:	b29b      	uxth	r3, r3
  4035fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4035fe:	4581      	cmp	r9, r0
  403600:	ea4f 4b22 	mov.w	fp, r2, asr #16
  403604:	f84c 3b04 	str.w	r3, [ip], #4
  403608:	d2db      	bcs.n	4035c2 <quorem+0x42>
  40360a:	f856 300e 	ldr.w	r3, [r6, lr]
  40360e:	b933      	cbnz	r3, 40361e <quorem+0x9e>
  403610:	9b01      	ldr	r3, [sp, #4]
  403612:	3b04      	subs	r3, #4
  403614:	429e      	cmp	r6, r3
  403616:	461a      	mov	r2, r3
  403618:	d330      	bcc.n	40367c <quorem+0xfc>
  40361a:	f8c8 4010 	str.w	r4, [r8, #16]
  40361e:	4640      	mov	r0, r8
  403620:	f001 fa5f 	bl	404ae2 <__mcmp>
  403624:	2800      	cmp	r0, #0
  403626:	db25      	blt.n	403674 <quorem+0xf4>
  403628:	3501      	adds	r5, #1
  40362a:	4630      	mov	r0, r6
  40362c:	f04f 0e00 	mov.w	lr, #0
  403630:	f857 2b04 	ldr.w	r2, [r7], #4
  403634:	f8d0 c000 	ldr.w	ip, [r0]
  403638:	b293      	uxth	r3, r2
  40363a:	ebae 0303 	sub.w	r3, lr, r3
  40363e:	0c12      	lsrs	r2, r2, #16
  403640:	fa13 f38c 	uxtah	r3, r3, ip
  403644:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  403648:	eb02 4223 	add.w	r2, r2, r3, asr #16
  40364c:	b29b      	uxth	r3, r3
  40364e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403652:	45b9      	cmp	r9, r7
  403654:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403658:	f840 3b04 	str.w	r3, [r0], #4
  40365c:	d2e8      	bcs.n	403630 <quorem+0xb0>
  40365e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403662:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  403666:	b92a      	cbnz	r2, 403674 <quorem+0xf4>
  403668:	3b04      	subs	r3, #4
  40366a:	429e      	cmp	r6, r3
  40366c:	461a      	mov	r2, r3
  40366e:	d30b      	bcc.n	403688 <quorem+0x108>
  403670:	f8c8 4010 	str.w	r4, [r8, #16]
  403674:	4628      	mov	r0, r5
  403676:	b003      	add	sp, #12
  403678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40367c:	6812      	ldr	r2, [r2, #0]
  40367e:	3b04      	subs	r3, #4
  403680:	2a00      	cmp	r2, #0
  403682:	d1ca      	bne.n	40361a <quorem+0x9a>
  403684:	3c01      	subs	r4, #1
  403686:	e7c5      	b.n	403614 <quorem+0x94>
  403688:	6812      	ldr	r2, [r2, #0]
  40368a:	3b04      	subs	r3, #4
  40368c:	2a00      	cmp	r2, #0
  40368e:	d1ef      	bne.n	403670 <quorem+0xf0>
  403690:	3c01      	subs	r4, #1
  403692:	e7ea      	b.n	40366a <quorem+0xea>
  403694:	2000      	movs	r0, #0
  403696:	e7ee      	b.n	403676 <quorem+0xf6>

00403698 <_dtoa_r>:
  403698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40369c:	6a46      	ldr	r6, [r0, #36]	; 0x24
  40369e:	b095      	sub	sp, #84	; 0x54
  4036a0:	4604      	mov	r4, r0
  4036a2:	9d21      	ldr	r5, [sp, #132]	; 0x84
  4036a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4036a8:	b93e      	cbnz	r6, 4036ba <_dtoa_r+0x22>
  4036aa:	2010      	movs	r0, #16
  4036ac:	f000 ffb4 	bl	404618 <malloc>
  4036b0:	6260      	str	r0, [r4, #36]	; 0x24
  4036b2:	6046      	str	r6, [r0, #4]
  4036b4:	6086      	str	r6, [r0, #8]
  4036b6:	6006      	str	r6, [r0, #0]
  4036b8:	60c6      	str	r6, [r0, #12]
  4036ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4036bc:	6819      	ldr	r1, [r3, #0]
  4036be:	b151      	cbz	r1, 4036d6 <_dtoa_r+0x3e>
  4036c0:	685a      	ldr	r2, [r3, #4]
  4036c2:	604a      	str	r2, [r1, #4]
  4036c4:	2301      	movs	r3, #1
  4036c6:	4093      	lsls	r3, r2
  4036c8:	608b      	str	r3, [r1, #8]
  4036ca:	4620      	mov	r0, r4
  4036cc:	f001 f834 	bl	404738 <_Bfree>
  4036d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4036d2:	2200      	movs	r2, #0
  4036d4:	601a      	str	r2, [r3, #0]
  4036d6:	9b03      	ldr	r3, [sp, #12]
  4036d8:	2b00      	cmp	r3, #0
  4036da:	bfbf      	itttt	lt
  4036dc:	2301      	movlt	r3, #1
  4036de:	602b      	strlt	r3, [r5, #0]
  4036e0:	9b03      	ldrlt	r3, [sp, #12]
  4036e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4036e6:	bfb2      	itee	lt
  4036e8:	9303      	strlt	r3, [sp, #12]
  4036ea:	2300      	movge	r3, #0
  4036ec:	602b      	strge	r3, [r5, #0]
  4036ee:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4036f2:	4ba9      	ldr	r3, [pc, #676]	; (403998 <_dtoa_r+0x300>)
  4036f4:	ea33 0309 	bics.w	r3, r3, r9
  4036f8:	d11b      	bne.n	403732 <_dtoa_r+0x9a>
  4036fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4036fc:	f242 730f 	movw	r3, #9999	; 0x270f
  403700:	6013      	str	r3, [r2, #0]
  403702:	9b02      	ldr	r3, [sp, #8]
  403704:	b923      	cbnz	r3, 403710 <_dtoa_r+0x78>
  403706:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40370a:	2800      	cmp	r0, #0
  40370c:	f000 8581 	beq.w	404212 <_dtoa_r+0xb7a>
  403710:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403712:	b953      	cbnz	r3, 40372a <_dtoa_r+0x92>
  403714:	4ba1      	ldr	r3, [pc, #644]	; (40399c <_dtoa_r+0x304>)
  403716:	e021      	b.n	40375c <_dtoa_r+0xc4>
  403718:	4ba1      	ldr	r3, [pc, #644]	; (4039a0 <_dtoa_r+0x308>)
  40371a:	9306      	str	r3, [sp, #24]
  40371c:	3308      	adds	r3, #8
  40371e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403720:	6013      	str	r3, [r2, #0]
  403722:	9806      	ldr	r0, [sp, #24]
  403724:	b015      	add	sp, #84	; 0x54
  403726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40372a:	4b9c      	ldr	r3, [pc, #624]	; (40399c <_dtoa_r+0x304>)
  40372c:	9306      	str	r3, [sp, #24]
  40372e:	3303      	adds	r3, #3
  403730:	e7f5      	b.n	40371e <_dtoa_r+0x86>
  403732:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  403736:	2200      	movs	r2, #0
  403738:	2300      	movs	r3, #0
  40373a:	4630      	mov	r0, r6
  40373c:	4639      	mov	r1, r7
  40373e:	f7ff f959 	bl	4029f4 <__aeabi_dcmpeq>
  403742:	4680      	mov	r8, r0
  403744:	b160      	cbz	r0, 403760 <_dtoa_r+0xc8>
  403746:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403748:	2301      	movs	r3, #1
  40374a:	6013      	str	r3, [r2, #0]
  40374c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40374e:	2b00      	cmp	r3, #0
  403750:	f000 855c 	beq.w	40420c <_dtoa_r+0xb74>
  403754:	4b93      	ldr	r3, [pc, #588]	; (4039a4 <_dtoa_r+0x30c>)
  403756:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403758:	6013      	str	r3, [r2, #0]
  40375a:	3b01      	subs	r3, #1
  40375c:	9306      	str	r3, [sp, #24]
  40375e:	e7e0      	b.n	403722 <_dtoa_r+0x8a>
  403760:	ab12      	add	r3, sp, #72	; 0x48
  403762:	9301      	str	r3, [sp, #4]
  403764:	ab13      	add	r3, sp, #76	; 0x4c
  403766:	9300      	str	r3, [sp, #0]
  403768:	4632      	mov	r2, r6
  40376a:	463b      	mov	r3, r7
  40376c:	4620      	mov	r0, r4
  40376e:	f001 fa30 	bl	404bd2 <__d2b>
  403772:	f3c9 550a 	ubfx	r5, r9, #20, #11
  403776:	4682      	mov	sl, r0
  403778:	2d00      	cmp	r5, #0
  40377a:	d07c      	beq.n	403876 <_dtoa_r+0x1de>
  40377c:	f3c7 0313 	ubfx	r3, r7, #0, #20
  403780:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  403784:	4630      	mov	r0, r6
  403786:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40378a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40378e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  403792:	2200      	movs	r2, #0
  403794:	4b84      	ldr	r3, [pc, #528]	; (4039a8 <_dtoa_r+0x310>)
  403796:	f7fe fd11 	bl	4021bc <__aeabi_dsub>
  40379a:	a379      	add	r3, pc, #484	; (adr r3, 403980 <_dtoa_r+0x2e8>)
  40379c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4037a0:	f7fe fec0 	bl	402524 <__aeabi_dmul>
  4037a4:	a378      	add	r3, pc, #480	; (adr r3, 403988 <_dtoa_r+0x2f0>)
  4037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4037aa:	f7fe fd09 	bl	4021c0 <__adddf3>
  4037ae:	4606      	mov	r6, r0
  4037b0:	4628      	mov	r0, r5
  4037b2:	460f      	mov	r7, r1
  4037b4:	f7fe fe50 	bl	402458 <__aeabi_i2d>
  4037b8:	a375      	add	r3, pc, #468	; (adr r3, 403990 <_dtoa_r+0x2f8>)
  4037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4037be:	f7fe feb1 	bl	402524 <__aeabi_dmul>
  4037c2:	4602      	mov	r2, r0
  4037c4:	460b      	mov	r3, r1
  4037c6:	4630      	mov	r0, r6
  4037c8:	4639      	mov	r1, r7
  4037ca:	f7fe fcf9 	bl	4021c0 <__adddf3>
  4037ce:	4606      	mov	r6, r0
  4037d0:	460f      	mov	r7, r1
  4037d2:	f7ff f941 	bl	402a58 <__aeabi_d2iz>
  4037d6:	2200      	movs	r2, #0
  4037d8:	4683      	mov	fp, r0
  4037da:	2300      	movs	r3, #0
  4037dc:	4630      	mov	r0, r6
  4037de:	4639      	mov	r1, r7
  4037e0:	f7ff f912 	bl	402a08 <__aeabi_dcmplt>
  4037e4:	b158      	cbz	r0, 4037fe <_dtoa_r+0x166>
  4037e6:	4658      	mov	r0, fp
  4037e8:	f7fe fe36 	bl	402458 <__aeabi_i2d>
  4037ec:	4602      	mov	r2, r0
  4037ee:	460b      	mov	r3, r1
  4037f0:	4630      	mov	r0, r6
  4037f2:	4639      	mov	r1, r7
  4037f4:	f7ff f8fe 	bl	4029f4 <__aeabi_dcmpeq>
  4037f8:	b908      	cbnz	r0, 4037fe <_dtoa_r+0x166>
  4037fa:	f10b 3bff 	add.w	fp, fp, #4294967295
  4037fe:	f1bb 0f16 	cmp.w	fp, #22
  403802:	d857      	bhi.n	4038b4 <_dtoa_r+0x21c>
  403804:	4969      	ldr	r1, [pc, #420]	; (4039ac <_dtoa_r+0x314>)
  403806:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40380a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40380e:	e9d1 0100 	ldrd	r0, r1, [r1]
  403812:	f7ff f917 	bl	402a44 <__aeabi_dcmpgt>
  403816:	2800      	cmp	r0, #0
  403818:	d04e      	beq.n	4038b8 <_dtoa_r+0x220>
  40381a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40381e:	2300      	movs	r3, #0
  403820:	930d      	str	r3, [sp, #52]	; 0x34
  403822:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403824:	1b5d      	subs	r5, r3, r5
  403826:	1e6b      	subs	r3, r5, #1
  403828:	9307      	str	r3, [sp, #28]
  40382a:	bf43      	ittte	mi
  40382c:	2300      	movmi	r3, #0
  40382e:	f1c5 0801 	rsbmi	r8, r5, #1
  403832:	9307      	strmi	r3, [sp, #28]
  403834:	f04f 0800 	movpl.w	r8, #0
  403838:	f1bb 0f00 	cmp.w	fp, #0
  40383c:	db3e      	blt.n	4038bc <_dtoa_r+0x224>
  40383e:	9b07      	ldr	r3, [sp, #28]
  403840:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  403844:	445b      	add	r3, fp
  403846:	9307      	str	r3, [sp, #28]
  403848:	2300      	movs	r3, #0
  40384a:	9308      	str	r3, [sp, #32]
  40384c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40384e:	2b09      	cmp	r3, #9
  403850:	f200 80b0 	bhi.w	4039b4 <_dtoa_r+0x31c>
  403854:	2b05      	cmp	r3, #5
  403856:	bfc4      	itt	gt
  403858:	3b04      	subgt	r3, #4
  40385a:	931e      	strgt	r3, [sp, #120]	; 0x78
  40385c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40385e:	f1a3 0302 	sub.w	r3, r3, #2
  403862:	bfcc      	ite	gt
  403864:	2600      	movgt	r6, #0
  403866:	2601      	movle	r6, #1
  403868:	2b03      	cmp	r3, #3
  40386a:	f200 80af 	bhi.w	4039cc <_dtoa_r+0x334>
  40386e:	e8df f003 	tbb	[pc, r3]
  403872:	8583      	.short	0x8583
  403874:	772d      	.short	0x772d
  403876:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403878:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40387a:	441d      	add	r5, r3
  40387c:	f205 4332 	addw	r3, r5, #1074	; 0x432
  403880:	2b20      	cmp	r3, #32
  403882:	dd11      	ble.n	4038a8 <_dtoa_r+0x210>
  403884:	9a02      	ldr	r2, [sp, #8]
  403886:	f205 4012 	addw	r0, r5, #1042	; 0x412
  40388a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40388e:	fa22 f000 	lsr.w	r0, r2, r0
  403892:	fa09 f303 	lsl.w	r3, r9, r3
  403896:	4318      	orrs	r0, r3
  403898:	f7fe fdce 	bl	402438 <__aeabi_ui2d>
  40389c:	2301      	movs	r3, #1
  40389e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4038a2:	3d01      	subs	r5, #1
  4038a4:	9310      	str	r3, [sp, #64]	; 0x40
  4038a6:	e774      	b.n	403792 <_dtoa_r+0xfa>
  4038a8:	f1c3 0020 	rsb	r0, r3, #32
  4038ac:	9b02      	ldr	r3, [sp, #8]
  4038ae:	fa03 f000 	lsl.w	r0, r3, r0
  4038b2:	e7f1      	b.n	403898 <_dtoa_r+0x200>
  4038b4:	2301      	movs	r3, #1
  4038b6:	e7b3      	b.n	403820 <_dtoa_r+0x188>
  4038b8:	900d      	str	r0, [sp, #52]	; 0x34
  4038ba:	e7b2      	b.n	403822 <_dtoa_r+0x18a>
  4038bc:	f1cb 0300 	rsb	r3, fp, #0
  4038c0:	9308      	str	r3, [sp, #32]
  4038c2:	2300      	movs	r3, #0
  4038c4:	eba8 080b 	sub.w	r8, r8, fp
  4038c8:	930c      	str	r3, [sp, #48]	; 0x30
  4038ca:	e7bf      	b.n	40384c <_dtoa_r+0x1b4>
  4038cc:	2301      	movs	r3, #1
  4038ce:	9309      	str	r3, [sp, #36]	; 0x24
  4038d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4038d2:	2b00      	cmp	r3, #0
  4038d4:	dd7d      	ble.n	4039d2 <_dtoa_r+0x33a>
  4038d6:	9304      	str	r3, [sp, #16]
  4038d8:	4699      	mov	r9, r3
  4038da:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4038dc:	2200      	movs	r2, #0
  4038de:	606a      	str	r2, [r5, #4]
  4038e0:	2104      	movs	r1, #4
  4038e2:	f101 0214 	add.w	r2, r1, #20
  4038e6:	429a      	cmp	r2, r3
  4038e8:	d978      	bls.n	4039dc <_dtoa_r+0x344>
  4038ea:	6869      	ldr	r1, [r5, #4]
  4038ec:	4620      	mov	r0, r4
  4038ee:	f000 feef 	bl	4046d0 <_Balloc>
  4038f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4038f4:	6028      	str	r0, [r5, #0]
  4038f6:	681b      	ldr	r3, [r3, #0]
  4038f8:	9306      	str	r3, [sp, #24]
  4038fa:	f1b9 0f0e 	cmp.w	r9, #14
  4038fe:	f200 80ee 	bhi.w	403ade <_dtoa_r+0x446>
  403902:	2e00      	cmp	r6, #0
  403904:	f000 80eb 	beq.w	403ade <_dtoa_r+0x446>
  403908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40390c:	f1bb 0f00 	cmp.w	fp, #0
  403910:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  403914:	dd77      	ble.n	403a06 <_dtoa_r+0x36e>
  403916:	4a25      	ldr	r2, [pc, #148]	; (4039ac <_dtoa_r+0x314>)
  403918:	f00b 030f 	and.w	r3, fp, #15
  40391c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403920:	e9d3 2300 	ldrd	r2, r3, [r3]
  403924:	ea4f 162b 	mov.w	r6, fp, asr #4
  403928:	06f0      	lsls	r0, r6, #27
  40392a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40392e:	d55a      	bpl.n	4039e6 <_dtoa_r+0x34e>
  403930:	4b1f      	ldr	r3, [pc, #124]	; (4039b0 <_dtoa_r+0x318>)
  403932:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403936:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40393a:	f7fe ff1d 	bl	402778 <__aeabi_ddiv>
  40393e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403942:	f006 060f 	and.w	r6, r6, #15
  403946:	2503      	movs	r5, #3
  403948:	4f19      	ldr	r7, [pc, #100]	; (4039b0 <_dtoa_r+0x318>)
  40394a:	2e00      	cmp	r6, #0
  40394c:	d14d      	bne.n	4039ea <_dtoa_r+0x352>
  40394e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403956:	f7fe ff0f 	bl	402778 <__aeabi_ddiv>
  40395a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40395e:	e06c      	b.n	403a3a <_dtoa_r+0x3a2>
  403960:	2301      	movs	r3, #1
  403962:	9309      	str	r3, [sp, #36]	; 0x24
  403964:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403966:	445b      	add	r3, fp
  403968:	f103 0901 	add.w	r9, r3, #1
  40396c:	9304      	str	r3, [sp, #16]
  40396e:	464b      	mov	r3, r9
  403970:	2b01      	cmp	r3, #1
  403972:	bfb8      	it	lt
  403974:	2301      	movlt	r3, #1
  403976:	e7b0      	b.n	4038da <_dtoa_r+0x242>
  403978:	2300      	movs	r3, #0
  40397a:	e7a8      	b.n	4038ce <_dtoa_r+0x236>
  40397c:	2300      	movs	r3, #0
  40397e:	e7f0      	b.n	403962 <_dtoa_r+0x2ca>
  403980:	636f4361 	.word	0x636f4361
  403984:	3fd287a7 	.word	0x3fd287a7
  403988:	8b60c8b3 	.word	0x8b60c8b3
  40398c:	3fc68a28 	.word	0x3fc68a28
  403990:	509f79fb 	.word	0x509f79fb
  403994:	3fd34413 	.word	0x3fd34413
  403998:	7ff00000 	.word	0x7ff00000
  40399c:	00405811 	.word	0x00405811
  4039a0:	00405808 	.word	0x00405808
  4039a4:	004057e5 	.word	0x004057e5
  4039a8:	3ff80000 	.word	0x3ff80000
  4039ac:	004058a0 	.word	0x004058a0
  4039b0:	00405878 	.word	0x00405878
  4039b4:	2601      	movs	r6, #1
  4039b6:	2300      	movs	r3, #0
  4039b8:	931e      	str	r3, [sp, #120]	; 0x78
  4039ba:	9609      	str	r6, [sp, #36]	; 0x24
  4039bc:	f04f 33ff 	mov.w	r3, #4294967295
  4039c0:	9304      	str	r3, [sp, #16]
  4039c2:	4699      	mov	r9, r3
  4039c4:	2200      	movs	r2, #0
  4039c6:	2312      	movs	r3, #18
  4039c8:	921f      	str	r2, [sp, #124]	; 0x7c
  4039ca:	e786      	b.n	4038da <_dtoa_r+0x242>
  4039cc:	2301      	movs	r3, #1
  4039ce:	9309      	str	r3, [sp, #36]	; 0x24
  4039d0:	e7f4      	b.n	4039bc <_dtoa_r+0x324>
  4039d2:	2301      	movs	r3, #1
  4039d4:	9304      	str	r3, [sp, #16]
  4039d6:	4699      	mov	r9, r3
  4039d8:	461a      	mov	r2, r3
  4039da:	e7f5      	b.n	4039c8 <_dtoa_r+0x330>
  4039dc:	686a      	ldr	r2, [r5, #4]
  4039de:	3201      	adds	r2, #1
  4039e0:	606a      	str	r2, [r5, #4]
  4039e2:	0049      	lsls	r1, r1, #1
  4039e4:	e77d      	b.n	4038e2 <_dtoa_r+0x24a>
  4039e6:	2502      	movs	r5, #2
  4039e8:	e7ae      	b.n	403948 <_dtoa_r+0x2b0>
  4039ea:	07f1      	lsls	r1, r6, #31
  4039ec:	d508      	bpl.n	403a00 <_dtoa_r+0x368>
  4039ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4039f2:	e9d7 2300 	ldrd	r2, r3, [r7]
  4039f6:	f7fe fd95 	bl	402524 <__aeabi_dmul>
  4039fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4039fe:	3501      	adds	r5, #1
  403a00:	1076      	asrs	r6, r6, #1
  403a02:	3708      	adds	r7, #8
  403a04:	e7a1      	b.n	40394a <_dtoa_r+0x2b2>
  403a06:	f000 80a5 	beq.w	403b54 <_dtoa_r+0x4bc>
  403a0a:	f1cb 0600 	rsb	r6, fp, #0
  403a0e:	4ba3      	ldr	r3, [pc, #652]	; (403c9c <_dtoa_r+0x604>)
  403a10:	4fa3      	ldr	r7, [pc, #652]	; (403ca0 <_dtoa_r+0x608>)
  403a12:	f006 020f 	and.w	r2, r6, #15
  403a16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403a22:	f7fe fd7f 	bl	402524 <__aeabi_dmul>
  403a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403a2a:	1136      	asrs	r6, r6, #4
  403a2c:	2300      	movs	r3, #0
  403a2e:	2502      	movs	r5, #2
  403a30:	2e00      	cmp	r6, #0
  403a32:	f040 8084 	bne.w	403b3e <_dtoa_r+0x4a6>
  403a36:	2b00      	cmp	r3, #0
  403a38:	d18f      	bne.n	40395a <_dtoa_r+0x2c2>
  403a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403a3c:	2b00      	cmp	r3, #0
  403a3e:	f000 808b 	beq.w	403b58 <_dtoa_r+0x4c0>
  403a42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403a46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  403a4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403a4e:	2200      	movs	r2, #0
  403a50:	4b94      	ldr	r3, [pc, #592]	; (403ca4 <_dtoa_r+0x60c>)
  403a52:	f7fe ffd9 	bl	402a08 <__aeabi_dcmplt>
  403a56:	2800      	cmp	r0, #0
  403a58:	d07e      	beq.n	403b58 <_dtoa_r+0x4c0>
  403a5a:	f1b9 0f00 	cmp.w	r9, #0
  403a5e:	d07b      	beq.n	403b58 <_dtoa_r+0x4c0>
  403a60:	9b04      	ldr	r3, [sp, #16]
  403a62:	2b00      	cmp	r3, #0
  403a64:	dd37      	ble.n	403ad6 <_dtoa_r+0x43e>
  403a66:	2200      	movs	r2, #0
  403a68:	4b8f      	ldr	r3, [pc, #572]	; (403ca8 <_dtoa_r+0x610>)
  403a6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403a6e:	f7fe fd59 	bl	402524 <__aeabi_dmul>
  403a72:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403a76:	9e04      	ldr	r6, [sp, #16]
  403a78:	f10b 37ff 	add.w	r7, fp, #4294967295
  403a7c:	3501      	adds	r5, #1
  403a7e:	4628      	mov	r0, r5
  403a80:	f7fe fcea 	bl	402458 <__aeabi_i2d>
  403a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403a88:	f7fe fd4c 	bl	402524 <__aeabi_dmul>
  403a8c:	4b87      	ldr	r3, [pc, #540]	; (403cac <_dtoa_r+0x614>)
  403a8e:	2200      	movs	r2, #0
  403a90:	f7fe fb96 	bl	4021c0 <__adddf3>
  403a94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403a9a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  403a9e:	950b      	str	r5, [sp, #44]	; 0x2c
  403aa0:	2e00      	cmp	r6, #0
  403aa2:	d15c      	bne.n	403b5e <_dtoa_r+0x4c6>
  403aa4:	2200      	movs	r2, #0
  403aa6:	4b82      	ldr	r3, [pc, #520]	; (403cb0 <_dtoa_r+0x618>)
  403aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403aac:	f7fe fb86 	bl	4021bc <__aeabi_dsub>
  403ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403ab2:	462b      	mov	r3, r5
  403ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403ab8:	f7fe ffc4 	bl	402a44 <__aeabi_dcmpgt>
  403abc:	2800      	cmp	r0, #0
  403abe:	f040 82f7 	bne.w	4040b0 <_dtoa_r+0xa18>
  403ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403ac4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  403ac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403acc:	f7fe ff9c 	bl	402a08 <__aeabi_dcmplt>
  403ad0:	2800      	cmp	r0, #0
  403ad2:	f040 82eb 	bne.w	4040ac <_dtoa_r+0xa14>
  403ad6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  403ada:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403ade:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403ae0:	2b00      	cmp	r3, #0
  403ae2:	f2c0 8151 	blt.w	403d88 <_dtoa_r+0x6f0>
  403ae6:	f1bb 0f0e 	cmp.w	fp, #14
  403aea:	f300 814d 	bgt.w	403d88 <_dtoa_r+0x6f0>
  403aee:	4b6b      	ldr	r3, [pc, #428]	; (403c9c <_dtoa_r+0x604>)
  403af0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  403af4:	e9d3 2300 	ldrd	r2, r3, [r3]
  403af8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  403afc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403afe:	2b00      	cmp	r3, #0
  403b00:	f280 80da 	bge.w	403cb8 <_dtoa_r+0x620>
  403b04:	f1b9 0f00 	cmp.w	r9, #0
  403b08:	f300 80d6 	bgt.w	403cb8 <_dtoa_r+0x620>
  403b0c:	f040 82cd 	bne.w	4040aa <_dtoa_r+0xa12>
  403b10:	2200      	movs	r2, #0
  403b12:	4b67      	ldr	r3, [pc, #412]	; (403cb0 <_dtoa_r+0x618>)
  403b14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403b18:	f7fe fd04 	bl	402524 <__aeabi_dmul>
  403b1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403b20:	f7fe ff86 	bl	402a30 <__aeabi_dcmpge>
  403b24:	464e      	mov	r6, r9
  403b26:	464f      	mov	r7, r9
  403b28:	2800      	cmp	r0, #0
  403b2a:	f040 82a4 	bne.w	404076 <_dtoa_r+0x9de>
  403b2e:	9b06      	ldr	r3, [sp, #24]
  403b30:	9a06      	ldr	r2, [sp, #24]
  403b32:	1c5d      	adds	r5, r3, #1
  403b34:	2331      	movs	r3, #49	; 0x31
  403b36:	7013      	strb	r3, [r2, #0]
  403b38:	f10b 0b01 	add.w	fp, fp, #1
  403b3c:	e29f      	b.n	40407e <_dtoa_r+0x9e6>
  403b3e:	07f2      	lsls	r2, r6, #31
  403b40:	d505      	bpl.n	403b4e <_dtoa_r+0x4b6>
  403b42:	e9d7 2300 	ldrd	r2, r3, [r7]
  403b46:	f7fe fced 	bl	402524 <__aeabi_dmul>
  403b4a:	3501      	adds	r5, #1
  403b4c:	2301      	movs	r3, #1
  403b4e:	1076      	asrs	r6, r6, #1
  403b50:	3708      	adds	r7, #8
  403b52:	e76d      	b.n	403a30 <_dtoa_r+0x398>
  403b54:	2502      	movs	r5, #2
  403b56:	e770      	b.n	403a3a <_dtoa_r+0x3a2>
  403b58:	465f      	mov	r7, fp
  403b5a:	464e      	mov	r6, r9
  403b5c:	e78f      	b.n	403a7e <_dtoa_r+0x3e6>
  403b5e:	9a06      	ldr	r2, [sp, #24]
  403b60:	4b4e      	ldr	r3, [pc, #312]	; (403c9c <_dtoa_r+0x604>)
  403b62:	4432      	add	r2, r6
  403b64:	9211      	str	r2, [sp, #68]	; 0x44
  403b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403b68:	1e71      	subs	r1, r6, #1
  403b6a:	2a00      	cmp	r2, #0
  403b6c:	d048      	beq.n	403c00 <_dtoa_r+0x568>
  403b6e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  403b72:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b76:	2000      	movs	r0, #0
  403b78:	494e      	ldr	r1, [pc, #312]	; (403cb4 <_dtoa_r+0x61c>)
  403b7a:	f7fe fdfd 	bl	402778 <__aeabi_ddiv>
  403b7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403b82:	f7fe fb1b 	bl	4021bc <__aeabi_dsub>
  403b86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403b8a:	9d06      	ldr	r5, [sp, #24]
  403b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403b90:	f7fe ff62 	bl	402a58 <__aeabi_d2iz>
  403b94:	4606      	mov	r6, r0
  403b96:	f7fe fc5f 	bl	402458 <__aeabi_i2d>
  403b9a:	4602      	mov	r2, r0
  403b9c:	460b      	mov	r3, r1
  403b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403ba2:	f7fe fb0b 	bl	4021bc <__aeabi_dsub>
  403ba6:	3630      	adds	r6, #48	; 0x30
  403ba8:	f805 6b01 	strb.w	r6, [r5], #1
  403bac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403bb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403bb4:	f7fe ff28 	bl	402a08 <__aeabi_dcmplt>
  403bb8:	2800      	cmp	r0, #0
  403bba:	d165      	bne.n	403c88 <_dtoa_r+0x5f0>
  403bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403bc0:	2000      	movs	r0, #0
  403bc2:	4938      	ldr	r1, [pc, #224]	; (403ca4 <_dtoa_r+0x60c>)
  403bc4:	f7fe fafa 	bl	4021bc <__aeabi_dsub>
  403bc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403bcc:	f7fe ff1c 	bl	402a08 <__aeabi_dcmplt>
  403bd0:	2800      	cmp	r0, #0
  403bd2:	f040 80b9 	bne.w	403d48 <_dtoa_r+0x6b0>
  403bd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403bd8:	429d      	cmp	r5, r3
  403bda:	f43f af7c 	beq.w	403ad6 <_dtoa_r+0x43e>
  403bde:	2200      	movs	r2, #0
  403be0:	4b31      	ldr	r3, [pc, #196]	; (403ca8 <_dtoa_r+0x610>)
  403be2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403be6:	f7fe fc9d 	bl	402524 <__aeabi_dmul>
  403bea:	2200      	movs	r2, #0
  403bec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403bf0:	4b2d      	ldr	r3, [pc, #180]	; (403ca8 <_dtoa_r+0x610>)
  403bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403bf6:	f7fe fc95 	bl	402524 <__aeabi_dmul>
  403bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403bfe:	e7c5      	b.n	403b8c <_dtoa_r+0x4f4>
  403c00:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  403c04:	e9d1 0100 	ldrd	r0, r1, [r1]
  403c08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403c0c:	f7fe fc8a 	bl	402524 <__aeabi_dmul>
  403c10:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403c14:	9d06      	ldr	r5, [sp, #24]
  403c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403c1a:	f7fe ff1d 	bl	402a58 <__aeabi_d2iz>
  403c1e:	4606      	mov	r6, r0
  403c20:	f7fe fc1a 	bl	402458 <__aeabi_i2d>
  403c24:	3630      	adds	r6, #48	; 0x30
  403c26:	4602      	mov	r2, r0
  403c28:	460b      	mov	r3, r1
  403c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403c2e:	f7fe fac5 	bl	4021bc <__aeabi_dsub>
  403c32:	f805 6b01 	strb.w	r6, [r5], #1
  403c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403c38:	42ab      	cmp	r3, r5
  403c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403c3e:	f04f 0200 	mov.w	r2, #0
  403c42:	d125      	bne.n	403c90 <_dtoa_r+0x5f8>
  403c44:	4b1b      	ldr	r3, [pc, #108]	; (403cb4 <_dtoa_r+0x61c>)
  403c46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403c4a:	f7fe fab9 	bl	4021c0 <__adddf3>
  403c4e:	4602      	mov	r2, r0
  403c50:	460b      	mov	r3, r1
  403c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403c56:	f7fe fef5 	bl	402a44 <__aeabi_dcmpgt>
  403c5a:	2800      	cmp	r0, #0
  403c5c:	d174      	bne.n	403d48 <_dtoa_r+0x6b0>
  403c5e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403c62:	2000      	movs	r0, #0
  403c64:	4913      	ldr	r1, [pc, #76]	; (403cb4 <_dtoa_r+0x61c>)
  403c66:	f7fe faa9 	bl	4021bc <__aeabi_dsub>
  403c6a:	4602      	mov	r2, r0
  403c6c:	460b      	mov	r3, r1
  403c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403c72:	f7fe fec9 	bl	402a08 <__aeabi_dcmplt>
  403c76:	2800      	cmp	r0, #0
  403c78:	f43f af2d 	beq.w	403ad6 <_dtoa_r+0x43e>
  403c7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  403c80:	2b30      	cmp	r3, #48	; 0x30
  403c82:	f105 32ff 	add.w	r2, r5, #4294967295
  403c86:	d001      	beq.n	403c8c <_dtoa_r+0x5f4>
  403c88:	46bb      	mov	fp, r7
  403c8a:	e04c      	b.n	403d26 <_dtoa_r+0x68e>
  403c8c:	4615      	mov	r5, r2
  403c8e:	e7f5      	b.n	403c7c <_dtoa_r+0x5e4>
  403c90:	4b05      	ldr	r3, [pc, #20]	; (403ca8 <_dtoa_r+0x610>)
  403c92:	f7fe fc47 	bl	402524 <__aeabi_dmul>
  403c96:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403c9a:	e7bc      	b.n	403c16 <_dtoa_r+0x57e>
  403c9c:	004058a0 	.word	0x004058a0
  403ca0:	00405878 	.word	0x00405878
  403ca4:	3ff00000 	.word	0x3ff00000
  403ca8:	40240000 	.word	0x40240000
  403cac:	401c0000 	.word	0x401c0000
  403cb0:	40140000 	.word	0x40140000
  403cb4:	3fe00000 	.word	0x3fe00000
  403cb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  403cbc:	9d06      	ldr	r5, [sp, #24]
  403cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403cc2:	4630      	mov	r0, r6
  403cc4:	4639      	mov	r1, r7
  403cc6:	f7fe fd57 	bl	402778 <__aeabi_ddiv>
  403cca:	f7fe fec5 	bl	402a58 <__aeabi_d2iz>
  403cce:	4680      	mov	r8, r0
  403cd0:	f7fe fbc2 	bl	402458 <__aeabi_i2d>
  403cd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403cd8:	f7fe fc24 	bl	402524 <__aeabi_dmul>
  403cdc:	4602      	mov	r2, r0
  403cde:	460b      	mov	r3, r1
  403ce0:	4630      	mov	r0, r6
  403ce2:	4639      	mov	r1, r7
  403ce4:	f108 0630 	add.w	r6, r8, #48	; 0x30
  403ce8:	f7fe fa68 	bl	4021bc <__aeabi_dsub>
  403cec:	f805 6b01 	strb.w	r6, [r5], #1
  403cf0:	9e06      	ldr	r6, [sp, #24]
  403cf2:	1bae      	subs	r6, r5, r6
  403cf4:	45b1      	cmp	r9, r6
  403cf6:	4602      	mov	r2, r0
  403cf8:	460b      	mov	r3, r1
  403cfa:	d138      	bne.n	403d6e <_dtoa_r+0x6d6>
  403cfc:	f7fe fa60 	bl	4021c0 <__adddf3>
  403d00:	4606      	mov	r6, r0
  403d02:	460f      	mov	r7, r1
  403d04:	4602      	mov	r2, r0
  403d06:	460b      	mov	r3, r1
  403d08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403d0c:	f7fe fe7c 	bl	402a08 <__aeabi_dcmplt>
  403d10:	b9c8      	cbnz	r0, 403d46 <_dtoa_r+0x6ae>
  403d12:	4632      	mov	r2, r6
  403d14:	463b      	mov	r3, r7
  403d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403d1a:	f7fe fe6b 	bl	4029f4 <__aeabi_dcmpeq>
  403d1e:	b110      	cbz	r0, 403d26 <_dtoa_r+0x68e>
  403d20:	f018 0f01 	tst.w	r8, #1
  403d24:	d10f      	bne.n	403d46 <_dtoa_r+0x6ae>
  403d26:	4651      	mov	r1, sl
  403d28:	4620      	mov	r0, r4
  403d2a:	f000 fd05 	bl	404738 <_Bfree>
  403d2e:	2300      	movs	r3, #0
  403d30:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403d32:	702b      	strb	r3, [r5, #0]
  403d34:	f10b 0301 	add.w	r3, fp, #1
  403d38:	6013      	str	r3, [r2, #0]
  403d3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403d3c:	2b00      	cmp	r3, #0
  403d3e:	f43f acf0 	beq.w	403722 <_dtoa_r+0x8a>
  403d42:	601d      	str	r5, [r3, #0]
  403d44:	e4ed      	b.n	403722 <_dtoa_r+0x8a>
  403d46:	465f      	mov	r7, fp
  403d48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  403d4c:	2a39      	cmp	r2, #57	; 0x39
  403d4e:	f105 33ff 	add.w	r3, r5, #4294967295
  403d52:	d106      	bne.n	403d62 <_dtoa_r+0x6ca>
  403d54:	9a06      	ldr	r2, [sp, #24]
  403d56:	429a      	cmp	r2, r3
  403d58:	d107      	bne.n	403d6a <_dtoa_r+0x6d2>
  403d5a:	2330      	movs	r3, #48	; 0x30
  403d5c:	7013      	strb	r3, [r2, #0]
  403d5e:	3701      	adds	r7, #1
  403d60:	4613      	mov	r3, r2
  403d62:	781a      	ldrb	r2, [r3, #0]
  403d64:	3201      	adds	r2, #1
  403d66:	701a      	strb	r2, [r3, #0]
  403d68:	e78e      	b.n	403c88 <_dtoa_r+0x5f0>
  403d6a:	461d      	mov	r5, r3
  403d6c:	e7ec      	b.n	403d48 <_dtoa_r+0x6b0>
  403d6e:	2200      	movs	r2, #0
  403d70:	4bb4      	ldr	r3, [pc, #720]	; (404044 <_dtoa_r+0x9ac>)
  403d72:	f7fe fbd7 	bl	402524 <__aeabi_dmul>
  403d76:	2200      	movs	r2, #0
  403d78:	2300      	movs	r3, #0
  403d7a:	4606      	mov	r6, r0
  403d7c:	460f      	mov	r7, r1
  403d7e:	f7fe fe39 	bl	4029f4 <__aeabi_dcmpeq>
  403d82:	2800      	cmp	r0, #0
  403d84:	d09b      	beq.n	403cbe <_dtoa_r+0x626>
  403d86:	e7ce      	b.n	403d26 <_dtoa_r+0x68e>
  403d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403d8a:	2a00      	cmp	r2, #0
  403d8c:	f000 8129 	beq.w	403fe2 <_dtoa_r+0x94a>
  403d90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403d92:	2a01      	cmp	r2, #1
  403d94:	f300 810e 	bgt.w	403fb4 <_dtoa_r+0x91c>
  403d98:	9a10      	ldr	r2, [sp, #64]	; 0x40
  403d9a:	2a00      	cmp	r2, #0
  403d9c:	f000 8106 	beq.w	403fac <_dtoa_r+0x914>
  403da0:	f203 4333 	addw	r3, r3, #1075	; 0x433
  403da4:	9e08      	ldr	r6, [sp, #32]
  403da6:	4645      	mov	r5, r8
  403da8:	9a07      	ldr	r2, [sp, #28]
  403daa:	2101      	movs	r1, #1
  403dac:	441a      	add	r2, r3
  403dae:	4620      	mov	r0, r4
  403db0:	4498      	add	r8, r3
  403db2:	9207      	str	r2, [sp, #28]
  403db4:	f000 fd60 	bl	404878 <__i2b>
  403db8:	4607      	mov	r7, r0
  403dba:	2d00      	cmp	r5, #0
  403dbc:	dd0b      	ble.n	403dd6 <_dtoa_r+0x73e>
  403dbe:	9b07      	ldr	r3, [sp, #28]
  403dc0:	2b00      	cmp	r3, #0
  403dc2:	dd08      	ble.n	403dd6 <_dtoa_r+0x73e>
  403dc4:	42ab      	cmp	r3, r5
  403dc6:	9a07      	ldr	r2, [sp, #28]
  403dc8:	bfa8      	it	ge
  403dca:	462b      	movge	r3, r5
  403dcc:	eba8 0803 	sub.w	r8, r8, r3
  403dd0:	1aed      	subs	r5, r5, r3
  403dd2:	1ad3      	subs	r3, r2, r3
  403dd4:	9307      	str	r3, [sp, #28]
  403dd6:	9b08      	ldr	r3, [sp, #32]
  403dd8:	b1fb      	cbz	r3, 403e1a <_dtoa_r+0x782>
  403dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ddc:	2b00      	cmp	r3, #0
  403dde:	f000 8104 	beq.w	403fea <_dtoa_r+0x952>
  403de2:	2e00      	cmp	r6, #0
  403de4:	dd11      	ble.n	403e0a <_dtoa_r+0x772>
  403de6:	4639      	mov	r1, r7
  403de8:	4632      	mov	r2, r6
  403dea:	4620      	mov	r0, r4
  403dec:	f000 fdda 	bl	4049a4 <__pow5mult>
  403df0:	4652      	mov	r2, sl
  403df2:	4601      	mov	r1, r0
  403df4:	4607      	mov	r7, r0
  403df6:	4620      	mov	r0, r4
  403df8:	f000 fd47 	bl	40488a <__multiply>
  403dfc:	4651      	mov	r1, sl
  403dfe:	900a      	str	r0, [sp, #40]	; 0x28
  403e00:	4620      	mov	r0, r4
  403e02:	f000 fc99 	bl	404738 <_Bfree>
  403e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e08:	469a      	mov	sl, r3
  403e0a:	9b08      	ldr	r3, [sp, #32]
  403e0c:	1b9a      	subs	r2, r3, r6
  403e0e:	d004      	beq.n	403e1a <_dtoa_r+0x782>
  403e10:	4651      	mov	r1, sl
  403e12:	4620      	mov	r0, r4
  403e14:	f000 fdc6 	bl	4049a4 <__pow5mult>
  403e18:	4682      	mov	sl, r0
  403e1a:	2101      	movs	r1, #1
  403e1c:	4620      	mov	r0, r4
  403e1e:	f000 fd2b 	bl	404878 <__i2b>
  403e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403e24:	2b00      	cmp	r3, #0
  403e26:	4606      	mov	r6, r0
  403e28:	f340 80e1 	ble.w	403fee <_dtoa_r+0x956>
  403e2c:	461a      	mov	r2, r3
  403e2e:	4601      	mov	r1, r0
  403e30:	4620      	mov	r0, r4
  403e32:	f000 fdb7 	bl	4049a4 <__pow5mult>
  403e36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403e38:	2b01      	cmp	r3, #1
  403e3a:	4606      	mov	r6, r0
  403e3c:	f340 80da 	ble.w	403ff4 <_dtoa_r+0x95c>
  403e40:	2300      	movs	r3, #0
  403e42:	9308      	str	r3, [sp, #32]
  403e44:	6933      	ldr	r3, [r6, #16]
  403e46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  403e4a:	6918      	ldr	r0, [r3, #16]
  403e4c:	f000 fcc6 	bl	4047dc <__hi0bits>
  403e50:	f1c0 0020 	rsb	r0, r0, #32
  403e54:	9b07      	ldr	r3, [sp, #28]
  403e56:	4418      	add	r0, r3
  403e58:	f010 001f 	ands.w	r0, r0, #31
  403e5c:	f000 80f0 	beq.w	404040 <_dtoa_r+0x9a8>
  403e60:	f1c0 0320 	rsb	r3, r0, #32
  403e64:	2b04      	cmp	r3, #4
  403e66:	f340 80e2 	ble.w	40402e <_dtoa_r+0x996>
  403e6a:	9b07      	ldr	r3, [sp, #28]
  403e6c:	f1c0 001c 	rsb	r0, r0, #28
  403e70:	4480      	add	r8, r0
  403e72:	4405      	add	r5, r0
  403e74:	4403      	add	r3, r0
  403e76:	9307      	str	r3, [sp, #28]
  403e78:	f1b8 0f00 	cmp.w	r8, #0
  403e7c:	dd05      	ble.n	403e8a <_dtoa_r+0x7f2>
  403e7e:	4651      	mov	r1, sl
  403e80:	4642      	mov	r2, r8
  403e82:	4620      	mov	r0, r4
  403e84:	f000 fddc 	bl	404a40 <__lshift>
  403e88:	4682      	mov	sl, r0
  403e8a:	9b07      	ldr	r3, [sp, #28]
  403e8c:	2b00      	cmp	r3, #0
  403e8e:	dd05      	ble.n	403e9c <_dtoa_r+0x804>
  403e90:	4631      	mov	r1, r6
  403e92:	461a      	mov	r2, r3
  403e94:	4620      	mov	r0, r4
  403e96:	f000 fdd3 	bl	404a40 <__lshift>
  403e9a:	4606      	mov	r6, r0
  403e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403e9e:	2b00      	cmp	r3, #0
  403ea0:	f000 80d2 	beq.w	404048 <_dtoa_r+0x9b0>
  403ea4:	4631      	mov	r1, r6
  403ea6:	4650      	mov	r0, sl
  403ea8:	f000 fe1b 	bl	404ae2 <__mcmp>
  403eac:	2800      	cmp	r0, #0
  403eae:	f280 80cb 	bge.w	404048 <_dtoa_r+0x9b0>
  403eb2:	2300      	movs	r3, #0
  403eb4:	4651      	mov	r1, sl
  403eb6:	220a      	movs	r2, #10
  403eb8:	4620      	mov	r0, r4
  403eba:	f000 fc54 	bl	404766 <__multadd>
  403ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ec0:	f10b 3bff 	add.w	fp, fp, #4294967295
  403ec4:	4682      	mov	sl, r0
  403ec6:	2b00      	cmp	r3, #0
  403ec8:	f000 81aa 	beq.w	404220 <_dtoa_r+0xb88>
  403ecc:	2300      	movs	r3, #0
  403ece:	4639      	mov	r1, r7
  403ed0:	220a      	movs	r2, #10
  403ed2:	4620      	mov	r0, r4
  403ed4:	f000 fc47 	bl	404766 <__multadd>
  403ed8:	9b04      	ldr	r3, [sp, #16]
  403eda:	2b00      	cmp	r3, #0
  403edc:	4607      	mov	r7, r0
  403ede:	dc03      	bgt.n	403ee8 <_dtoa_r+0x850>
  403ee0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403ee2:	2b02      	cmp	r3, #2
  403ee4:	f300 80b8 	bgt.w	404058 <_dtoa_r+0x9c0>
  403ee8:	2d00      	cmp	r5, #0
  403eea:	dd05      	ble.n	403ef8 <_dtoa_r+0x860>
  403eec:	4639      	mov	r1, r7
  403eee:	462a      	mov	r2, r5
  403ef0:	4620      	mov	r0, r4
  403ef2:	f000 fda5 	bl	404a40 <__lshift>
  403ef6:	4607      	mov	r7, r0
  403ef8:	9b08      	ldr	r3, [sp, #32]
  403efa:	2b00      	cmp	r3, #0
  403efc:	f000 8110 	beq.w	404120 <_dtoa_r+0xa88>
  403f00:	6879      	ldr	r1, [r7, #4]
  403f02:	4620      	mov	r0, r4
  403f04:	f000 fbe4 	bl	4046d0 <_Balloc>
  403f08:	693a      	ldr	r2, [r7, #16]
  403f0a:	3202      	adds	r2, #2
  403f0c:	4605      	mov	r5, r0
  403f0e:	0092      	lsls	r2, r2, #2
  403f10:	f107 010c 	add.w	r1, r7, #12
  403f14:	300c      	adds	r0, #12
  403f16:	f7fe fdeb 	bl	402af0 <memcpy>
  403f1a:	2201      	movs	r2, #1
  403f1c:	4629      	mov	r1, r5
  403f1e:	4620      	mov	r0, r4
  403f20:	f000 fd8e 	bl	404a40 <__lshift>
  403f24:	9b02      	ldr	r3, [sp, #8]
  403f26:	f8dd 8018 	ldr.w	r8, [sp, #24]
  403f2a:	9707      	str	r7, [sp, #28]
  403f2c:	f003 0301 	and.w	r3, r3, #1
  403f30:	4607      	mov	r7, r0
  403f32:	9308      	str	r3, [sp, #32]
  403f34:	4631      	mov	r1, r6
  403f36:	4650      	mov	r0, sl
  403f38:	f7ff fb22 	bl	403580 <quorem>
  403f3c:	9907      	ldr	r1, [sp, #28]
  403f3e:	4605      	mov	r5, r0
  403f40:	f100 0930 	add.w	r9, r0, #48	; 0x30
  403f44:	4650      	mov	r0, sl
  403f46:	f000 fdcc 	bl	404ae2 <__mcmp>
  403f4a:	463a      	mov	r2, r7
  403f4c:	9002      	str	r0, [sp, #8]
  403f4e:	4631      	mov	r1, r6
  403f50:	4620      	mov	r0, r4
  403f52:	f000 fde0 	bl	404b16 <__mdiff>
  403f56:	68c3      	ldr	r3, [r0, #12]
  403f58:	4602      	mov	r2, r0
  403f5a:	2b00      	cmp	r3, #0
  403f5c:	f040 80e2 	bne.w	404124 <_dtoa_r+0xa8c>
  403f60:	4601      	mov	r1, r0
  403f62:	9009      	str	r0, [sp, #36]	; 0x24
  403f64:	4650      	mov	r0, sl
  403f66:	f000 fdbc 	bl	404ae2 <__mcmp>
  403f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403f6c:	4603      	mov	r3, r0
  403f6e:	4611      	mov	r1, r2
  403f70:	4620      	mov	r0, r4
  403f72:	9309      	str	r3, [sp, #36]	; 0x24
  403f74:	f000 fbe0 	bl	404738 <_Bfree>
  403f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403f7a:	2b00      	cmp	r3, #0
  403f7c:	f040 80d4 	bne.w	404128 <_dtoa_r+0xa90>
  403f80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403f82:	2a00      	cmp	r2, #0
  403f84:	f040 80d0 	bne.w	404128 <_dtoa_r+0xa90>
  403f88:	9a08      	ldr	r2, [sp, #32]
  403f8a:	2a00      	cmp	r2, #0
  403f8c:	f040 80cc 	bne.w	404128 <_dtoa_r+0xa90>
  403f90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  403f94:	f000 80e8 	beq.w	404168 <_dtoa_r+0xad0>
  403f98:	9b02      	ldr	r3, [sp, #8]
  403f9a:	2b00      	cmp	r3, #0
  403f9c:	dd01      	ble.n	403fa2 <_dtoa_r+0x90a>
  403f9e:	f105 0931 	add.w	r9, r5, #49	; 0x31
  403fa2:	f108 0501 	add.w	r5, r8, #1
  403fa6:	f888 9000 	strb.w	r9, [r8]
  403faa:	e06a      	b.n	404082 <_dtoa_r+0x9ea>
  403fac:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403fae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  403fb2:	e6f7      	b.n	403da4 <_dtoa_r+0x70c>
  403fb4:	9b08      	ldr	r3, [sp, #32]
  403fb6:	f109 36ff 	add.w	r6, r9, #4294967295
  403fba:	42b3      	cmp	r3, r6
  403fbc:	bfbf      	itttt	lt
  403fbe:	9b08      	ldrlt	r3, [sp, #32]
  403fc0:	9608      	strlt	r6, [sp, #32]
  403fc2:	1af2      	sublt	r2, r6, r3
  403fc4:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  403fc6:	bfb7      	itett	lt
  403fc8:	189b      	addlt	r3, r3, r2
  403fca:	1b9e      	subge	r6, r3, r6
  403fcc:	930c      	strlt	r3, [sp, #48]	; 0x30
  403fce:	2600      	movlt	r6, #0
  403fd0:	f1b9 0f00 	cmp.w	r9, #0
  403fd4:	bfb9      	ittee	lt
  403fd6:	eba8 0509 	sublt.w	r5, r8, r9
  403fda:	2300      	movlt	r3, #0
  403fdc:	4645      	movge	r5, r8
  403fde:	464b      	movge	r3, r9
  403fe0:	e6e2      	b.n	403da8 <_dtoa_r+0x710>
  403fe2:	9e08      	ldr	r6, [sp, #32]
  403fe4:	9f09      	ldr	r7, [sp, #36]	; 0x24
  403fe6:	4645      	mov	r5, r8
  403fe8:	e6e7      	b.n	403dba <_dtoa_r+0x722>
  403fea:	9a08      	ldr	r2, [sp, #32]
  403fec:	e710      	b.n	403e10 <_dtoa_r+0x778>
  403fee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403ff0:	2b01      	cmp	r3, #1
  403ff2:	dc18      	bgt.n	404026 <_dtoa_r+0x98e>
  403ff4:	9b02      	ldr	r3, [sp, #8]
  403ff6:	b9b3      	cbnz	r3, 404026 <_dtoa_r+0x98e>
  403ff8:	9b03      	ldr	r3, [sp, #12]
  403ffa:	f3c3 0313 	ubfx	r3, r3, #0, #20
  403ffe:	b9a3      	cbnz	r3, 40402a <_dtoa_r+0x992>
  404000:	9b03      	ldr	r3, [sp, #12]
  404002:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  404006:	0d1b      	lsrs	r3, r3, #20
  404008:	051b      	lsls	r3, r3, #20
  40400a:	b12b      	cbz	r3, 404018 <_dtoa_r+0x980>
  40400c:	9b07      	ldr	r3, [sp, #28]
  40400e:	3301      	adds	r3, #1
  404010:	9307      	str	r3, [sp, #28]
  404012:	f108 0801 	add.w	r8, r8, #1
  404016:	2301      	movs	r3, #1
  404018:	9308      	str	r3, [sp, #32]
  40401a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40401c:	2b00      	cmp	r3, #0
  40401e:	f47f af11 	bne.w	403e44 <_dtoa_r+0x7ac>
  404022:	2001      	movs	r0, #1
  404024:	e716      	b.n	403e54 <_dtoa_r+0x7bc>
  404026:	2300      	movs	r3, #0
  404028:	e7f6      	b.n	404018 <_dtoa_r+0x980>
  40402a:	9b02      	ldr	r3, [sp, #8]
  40402c:	e7f4      	b.n	404018 <_dtoa_r+0x980>
  40402e:	f43f af23 	beq.w	403e78 <_dtoa_r+0x7e0>
  404032:	9a07      	ldr	r2, [sp, #28]
  404034:	331c      	adds	r3, #28
  404036:	441a      	add	r2, r3
  404038:	4498      	add	r8, r3
  40403a:	441d      	add	r5, r3
  40403c:	4613      	mov	r3, r2
  40403e:	e71a      	b.n	403e76 <_dtoa_r+0x7de>
  404040:	4603      	mov	r3, r0
  404042:	e7f6      	b.n	404032 <_dtoa_r+0x99a>
  404044:	40240000 	.word	0x40240000
  404048:	f1b9 0f00 	cmp.w	r9, #0
  40404c:	dc33      	bgt.n	4040b6 <_dtoa_r+0xa1e>
  40404e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404050:	2b02      	cmp	r3, #2
  404052:	dd30      	ble.n	4040b6 <_dtoa_r+0xa1e>
  404054:	f8cd 9010 	str.w	r9, [sp, #16]
  404058:	9b04      	ldr	r3, [sp, #16]
  40405a:	b963      	cbnz	r3, 404076 <_dtoa_r+0x9de>
  40405c:	4631      	mov	r1, r6
  40405e:	2205      	movs	r2, #5
  404060:	4620      	mov	r0, r4
  404062:	f000 fb80 	bl	404766 <__multadd>
  404066:	4601      	mov	r1, r0
  404068:	4606      	mov	r6, r0
  40406a:	4650      	mov	r0, sl
  40406c:	f000 fd39 	bl	404ae2 <__mcmp>
  404070:	2800      	cmp	r0, #0
  404072:	f73f ad5c 	bgt.w	403b2e <_dtoa_r+0x496>
  404076:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404078:	9d06      	ldr	r5, [sp, #24]
  40407a:	ea6f 0b03 	mvn.w	fp, r3
  40407e:	2300      	movs	r3, #0
  404080:	9307      	str	r3, [sp, #28]
  404082:	4631      	mov	r1, r6
  404084:	4620      	mov	r0, r4
  404086:	f000 fb57 	bl	404738 <_Bfree>
  40408a:	2f00      	cmp	r7, #0
  40408c:	f43f ae4b 	beq.w	403d26 <_dtoa_r+0x68e>
  404090:	9b07      	ldr	r3, [sp, #28]
  404092:	b12b      	cbz	r3, 4040a0 <_dtoa_r+0xa08>
  404094:	42bb      	cmp	r3, r7
  404096:	d003      	beq.n	4040a0 <_dtoa_r+0xa08>
  404098:	4619      	mov	r1, r3
  40409a:	4620      	mov	r0, r4
  40409c:	f000 fb4c 	bl	404738 <_Bfree>
  4040a0:	4639      	mov	r1, r7
  4040a2:	4620      	mov	r0, r4
  4040a4:	f000 fb48 	bl	404738 <_Bfree>
  4040a8:	e63d      	b.n	403d26 <_dtoa_r+0x68e>
  4040aa:	2600      	movs	r6, #0
  4040ac:	4637      	mov	r7, r6
  4040ae:	e7e2      	b.n	404076 <_dtoa_r+0x9de>
  4040b0:	46bb      	mov	fp, r7
  4040b2:	4637      	mov	r7, r6
  4040b4:	e53b      	b.n	403b2e <_dtoa_r+0x496>
  4040b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4040b8:	f8cd 9010 	str.w	r9, [sp, #16]
  4040bc:	2b00      	cmp	r3, #0
  4040be:	f47f af13 	bne.w	403ee8 <_dtoa_r+0x850>
  4040c2:	9d06      	ldr	r5, [sp, #24]
  4040c4:	4631      	mov	r1, r6
  4040c6:	4650      	mov	r0, sl
  4040c8:	f7ff fa5a 	bl	403580 <quorem>
  4040cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4040d0:	f805 9b01 	strb.w	r9, [r5], #1
  4040d4:	9b06      	ldr	r3, [sp, #24]
  4040d6:	9a04      	ldr	r2, [sp, #16]
  4040d8:	1aeb      	subs	r3, r5, r3
  4040da:	429a      	cmp	r2, r3
  4040dc:	f300 8083 	bgt.w	4041e6 <_dtoa_r+0xb4e>
  4040e0:	9b06      	ldr	r3, [sp, #24]
  4040e2:	2a01      	cmp	r2, #1
  4040e4:	bfac      	ite	ge
  4040e6:	189b      	addge	r3, r3, r2
  4040e8:	3301      	addlt	r3, #1
  4040ea:	4698      	mov	r8, r3
  4040ec:	2300      	movs	r3, #0
  4040ee:	9307      	str	r3, [sp, #28]
  4040f0:	4651      	mov	r1, sl
  4040f2:	2201      	movs	r2, #1
  4040f4:	4620      	mov	r0, r4
  4040f6:	f000 fca3 	bl	404a40 <__lshift>
  4040fa:	4631      	mov	r1, r6
  4040fc:	4682      	mov	sl, r0
  4040fe:	f000 fcf0 	bl	404ae2 <__mcmp>
  404102:	2800      	cmp	r0, #0
  404104:	dc35      	bgt.n	404172 <_dtoa_r+0xada>
  404106:	d102      	bne.n	40410e <_dtoa_r+0xa76>
  404108:	f019 0f01 	tst.w	r9, #1
  40410c:	d131      	bne.n	404172 <_dtoa_r+0xada>
  40410e:	4645      	mov	r5, r8
  404110:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404114:	2b30      	cmp	r3, #48	; 0x30
  404116:	f105 32ff 	add.w	r2, r5, #4294967295
  40411a:	d1b2      	bne.n	404082 <_dtoa_r+0x9ea>
  40411c:	4615      	mov	r5, r2
  40411e:	e7f7      	b.n	404110 <_dtoa_r+0xa78>
  404120:	4638      	mov	r0, r7
  404122:	e6ff      	b.n	403f24 <_dtoa_r+0x88c>
  404124:	2301      	movs	r3, #1
  404126:	e722      	b.n	403f6e <_dtoa_r+0x8d6>
  404128:	9a02      	ldr	r2, [sp, #8]
  40412a:	2a00      	cmp	r2, #0
  40412c:	db04      	blt.n	404138 <_dtoa_r+0xaa0>
  40412e:	d129      	bne.n	404184 <_dtoa_r+0xaec>
  404130:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404132:	bb3a      	cbnz	r2, 404184 <_dtoa_r+0xaec>
  404134:	9a08      	ldr	r2, [sp, #32]
  404136:	bb2a      	cbnz	r2, 404184 <_dtoa_r+0xaec>
  404138:	2b00      	cmp	r3, #0
  40413a:	f77f af32 	ble.w	403fa2 <_dtoa_r+0x90a>
  40413e:	4651      	mov	r1, sl
  404140:	2201      	movs	r2, #1
  404142:	4620      	mov	r0, r4
  404144:	f000 fc7c 	bl	404a40 <__lshift>
  404148:	4631      	mov	r1, r6
  40414a:	4682      	mov	sl, r0
  40414c:	f000 fcc9 	bl	404ae2 <__mcmp>
  404150:	2800      	cmp	r0, #0
  404152:	dc05      	bgt.n	404160 <_dtoa_r+0xac8>
  404154:	f47f af25 	bne.w	403fa2 <_dtoa_r+0x90a>
  404158:	f019 0f01 	tst.w	r9, #1
  40415c:	f43f af21 	beq.w	403fa2 <_dtoa_r+0x90a>
  404160:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404164:	f47f af1b 	bne.w	403f9e <_dtoa_r+0x906>
  404168:	2339      	movs	r3, #57	; 0x39
  40416a:	f888 3000 	strb.w	r3, [r8]
  40416e:	f108 0801 	add.w	r8, r8, #1
  404172:	4645      	mov	r5, r8
  404174:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404178:	2b39      	cmp	r3, #57	; 0x39
  40417a:	f105 32ff 	add.w	r2, r5, #4294967295
  40417e:	d03a      	beq.n	4041f6 <_dtoa_r+0xb5e>
  404180:	3301      	adds	r3, #1
  404182:	e03f      	b.n	404204 <_dtoa_r+0xb6c>
  404184:	2b00      	cmp	r3, #0
  404186:	f108 0501 	add.w	r5, r8, #1
  40418a:	dd05      	ble.n	404198 <_dtoa_r+0xb00>
  40418c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404190:	d0ea      	beq.n	404168 <_dtoa_r+0xad0>
  404192:	f109 0901 	add.w	r9, r9, #1
  404196:	e706      	b.n	403fa6 <_dtoa_r+0x90e>
  404198:	9b06      	ldr	r3, [sp, #24]
  40419a:	9a04      	ldr	r2, [sp, #16]
  40419c:	f805 9c01 	strb.w	r9, [r5, #-1]
  4041a0:	1aeb      	subs	r3, r5, r3
  4041a2:	4293      	cmp	r3, r2
  4041a4:	46a8      	mov	r8, r5
  4041a6:	d0a3      	beq.n	4040f0 <_dtoa_r+0xa58>
  4041a8:	4651      	mov	r1, sl
  4041aa:	2300      	movs	r3, #0
  4041ac:	220a      	movs	r2, #10
  4041ae:	4620      	mov	r0, r4
  4041b0:	f000 fad9 	bl	404766 <__multadd>
  4041b4:	9b07      	ldr	r3, [sp, #28]
  4041b6:	9907      	ldr	r1, [sp, #28]
  4041b8:	42bb      	cmp	r3, r7
  4041ba:	4682      	mov	sl, r0
  4041bc:	f04f 0300 	mov.w	r3, #0
  4041c0:	f04f 020a 	mov.w	r2, #10
  4041c4:	4620      	mov	r0, r4
  4041c6:	d104      	bne.n	4041d2 <_dtoa_r+0xb3a>
  4041c8:	f000 facd 	bl	404766 <__multadd>
  4041cc:	9007      	str	r0, [sp, #28]
  4041ce:	4607      	mov	r7, r0
  4041d0:	e6b0      	b.n	403f34 <_dtoa_r+0x89c>
  4041d2:	f000 fac8 	bl	404766 <__multadd>
  4041d6:	2300      	movs	r3, #0
  4041d8:	9007      	str	r0, [sp, #28]
  4041da:	220a      	movs	r2, #10
  4041dc:	4639      	mov	r1, r7
  4041de:	4620      	mov	r0, r4
  4041e0:	f000 fac1 	bl	404766 <__multadd>
  4041e4:	e7f3      	b.n	4041ce <_dtoa_r+0xb36>
  4041e6:	4651      	mov	r1, sl
  4041e8:	2300      	movs	r3, #0
  4041ea:	220a      	movs	r2, #10
  4041ec:	4620      	mov	r0, r4
  4041ee:	f000 faba 	bl	404766 <__multadd>
  4041f2:	4682      	mov	sl, r0
  4041f4:	e766      	b.n	4040c4 <_dtoa_r+0xa2c>
  4041f6:	9b06      	ldr	r3, [sp, #24]
  4041f8:	4293      	cmp	r3, r2
  4041fa:	d105      	bne.n	404208 <_dtoa_r+0xb70>
  4041fc:	9a06      	ldr	r2, [sp, #24]
  4041fe:	f10b 0b01 	add.w	fp, fp, #1
  404202:	2331      	movs	r3, #49	; 0x31
  404204:	7013      	strb	r3, [r2, #0]
  404206:	e73c      	b.n	404082 <_dtoa_r+0x9ea>
  404208:	4615      	mov	r5, r2
  40420a:	e7b3      	b.n	404174 <_dtoa_r+0xadc>
  40420c:	4b09      	ldr	r3, [pc, #36]	; (404234 <_dtoa_r+0xb9c>)
  40420e:	f7ff baa5 	b.w	40375c <_dtoa_r+0xc4>
  404212:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404214:	2b00      	cmp	r3, #0
  404216:	f47f aa7f 	bne.w	403718 <_dtoa_r+0x80>
  40421a:	4b07      	ldr	r3, [pc, #28]	; (404238 <_dtoa_r+0xba0>)
  40421c:	f7ff ba9e 	b.w	40375c <_dtoa_r+0xc4>
  404220:	9b04      	ldr	r3, [sp, #16]
  404222:	2b00      	cmp	r3, #0
  404224:	f73f af4d 	bgt.w	4040c2 <_dtoa_r+0xa2a>
  404228:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40422a:	2b02      	cmp	r3, #2
  40422c:	f77f af49 	ble.w	4040c2 <_dtoa_r+0xa2a>
  404230:	e712      	b.n	404058 <_dtoa_r+0x9c0>
  404232:	bf00      	nop
  404234:	004057e4 	.word	0x004057e4
  404238:	00405808 	.word	0x00405808

0040423c <__sflush_r>:
  40423c:	898a      	ldrh	r2, [r1, #12]
  40423e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404242:	4605      	mov	r5, r0
  404244:	0710      	lsls	r0, r2, #28
  404246:	460c      	mov	r4, r1
  404248:	d45a      	bmi.n	404300 <__sflush_r+0xc4>
  40424a:	684b      	ldr	r3, [r1, #4]
  40424c:	2b00      	cmp	r3, #0
  40424e:	dc05      	bgt.n	40425c <__sflush_r+0x20>
  404250:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  404252:	2b00      	cmp	r3, #0
  404254:	dc02      	bgt.n	40425c <__sflush_r+0x20>
  404256:	2000      	movs	r0, #0
  404258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40425c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40425e:	2e00      	cmp	r6, #0
  404260:	d0f9      	beq.n	404256 <__sflush_r+0x1a>
  404262:	2300      	movs	r3, #0
  404264:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  404268:	682f      	ldr	r7, [r5, #0]
  40426a:	602b      	str	r3, [r5, #0]
  40426c:	d033      	beq.n	4042d6 <__sflush_r+0x9a>
  40426e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  404270:	89a3      	ldrh	r3, [r4, #12]
  404272:	075a      	lsls	r2, r3, #29
  404274:	d505      	bpl.n	404282 <__sflush_r+0x46>
  404276:	6863      	ldr	r3, [r4, #4]
  404278:	1ac0      	subs	r0, r0, r3
  40427a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40427c:	b10b      	cbz	r3, 404282 <__sflush_r+0x46>
  40427e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  404280:	1ac0      	subs	r0, r0, r3
  404282:	2300      	movs	r3, #0
  404284:	4602      	mov	r2, r0
  404286:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404288:	6a21      	ldr	r1, [r4, #32]
  40428a:	4628      	mov	r0, r5
  40428c:	47b0      	blx	r6
  40428e:	1c43      	adds	r3, r0, #1
  404290:	89a3      	ldrh	r3, [r4, #12]
  404292:	d106      	bne.n	4042a2 <__sflush_r+0x66>
  404294:	6829      	ldr	r1, [r5, #0]
  404296:	291d      	cmp	r1, #29
  404298:	d84b      	bhi.n	404332 <__sflush_r+0xf6>
  40429a:	4a2b      	ldr	r2, [pc, #172]	; (404348 <__sflush_r+0x10c>)
  40429c:	40ca      	lsrs	r2, r1
  40429e:	07d6      	lsls	r6, r2, #31
  4042a0:	d547      	bpl.n	404332 <__sflush_r+0xf6>
  4042a2:	2200      	movs	r2, #0
  4042a4:	6062      	str	r2, [r4, #4]
  4042a6:	04d9      	lsls	r1, r3, #19
  4042a8:	6922      	ldr	r2, [r4, #16]
  4042aa:	6022      	str	r2, [r4, #0]
  4042ac:	d504      	bpl.n	4042b8 <__sflush_r+0x7c>
  4042ae:	1c42      	adds	r2, r0, #1
  4042b0:	d101      	bne.n	4042b6 <__sflush_r+0x7a>
  4042b2:	682b      	ldr	r3, [r5, #0]
  4042b4:	b903      	cbnz	r3, 4042b8 <__sflush_r+0x7c>
  4042b6:	6560      	str	r0, [r4, #84]	; 0x54
  4042b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4042ba:	602f      	str	r7, [r5, #0]
  4042bc:	2900      	cmp	r1, #0
  4042be:	d0ca      	beq.n	404256 <__sflush_r+0x1a>
  4042c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4042c4:	4299      	cmp	r1, r3
  4042c6:	d002      	beq.n	4042ce <__sflush_r+0x92>
  4042c8:	4628      	mov	r0, r5
  4042ca:	f000 fcdf 	bl	404c8c <_free_r>
  4042ce:	2000      	movs	r0, #0
  4042d0:	6360      	str	r0, [r4, #52]	; 0x34
  4042d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4042d6:	6a21      	ldr	r1, [r4, #32]
  4042d8:	2301      	movs	r3, #1
  4042da:	4628      	mov	r0, r5
  4042dc:	47b0      	blx	r6
  4042de:	1c41      	adds	r1, r0, #1
  4042e0:	d1c6      	bne.n	404270 <__sflush_r+0x34>
  4042e2:	682b      	ldr	r3, [r5, #0]
  4042e4:	2b00      	cmp	r3, #0
  4042e6:	d0c3      	beq.n	404270 <__sflush_r+0x34>
  4042e8:	2b1d      	cmp	r3, #29
  4042ea:	d001      	beq.n	4042f0 <__sflush_r+0xb4>
  4042ec:	2b16      	cmp	r3, #22
  4042ee:	d101      	bne.n	4042f4 <__sflush_r+0xb8>
  4042f0:	602f      	str	r7, [r5, #0]
  4042f2:	e7b0      	b.n	404256 <__sflush_r+0x1a>
  4042f4:	89a3      	ldrh	r3, [r4, #12]
  4042f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4042fa:	81a3      	strh	r3, [r4, #12]
  4042fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404300:	690f      	ldr	r7, [r1, #16]
  404302:	2f00      	cmp	r7, #0
  404304:	d0a7      	beq.n	404256 <__sflush_r+0x1a>
  404306:	0793      	lsls	r3, r2, #30
  404308:	680e      	ldr	r6, [r1, #0]
  40430a:	bf08      	it	eq
  40430c:	694b      	ldreq	r3, [r1, #20]
  40430e:	600f      	str	r7, [r1, #0]
  404310:	bf18      	it	ne
  404312:	2300      	movne	r3, #0
  404314:	eba6 0807 	sub.w	r8, r6, r7
  404318:	608b      	str	r3, [r1, #8]
  40431a:	f1b8 0f00 	cmp.w	r8, #0
  40431e:	dd9a      	ble.n	404256 <__sflush_r+0x1a>
  404320:	4643      	mov	r3, r8
  404322:	463a      	mov	r2, r7
  404324:	6a21      	ldr	r1, [r4, #32]
  404326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  404328:	4628      	mov	r0, r5
  40432a:	47b0      	blx	r6
  40432c:	2800      	cmp	r0, #0
  40432e:	dc07      	bgt.n	404340 <__sflush_r+0x104>
  404330:	89a3      	ldrh	r3, [r4, #12]
  404332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404336:	81a3      	strh	r3, [r4, #12]
  404338:	f04f 30ff 	mov.w	r0, #4294967295
  40433c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404340:	4407      	add	r7, r0
  404342:	eba8 0800 	sub.w	r8, r8, r0
  404346:	e7e8      	b.n	40431a <__sflush_r+0xde>
  404348:	20400001 	.word	0x20400001

0040434c <_fflush_r>:
  40434c:	b538      	push	{r3, r4, r5, lr}
  40434e:	690b      	ldr	r3, [r1, #16]
  404350:	4605      	mov	r5, r0
  404352:	460c      	mov	r4, r1
  404354:	b1db      	cbz	r3, 40438e <_fflush_r+0x42>
  404356:	b118      	cbz	r0, 404360 <_fflush_r+0x14>
  404358:	6983      	ldr	r3, [r0, #24]
  40435a:	b90b      	cbnz	r3, 404360 <_fflush_r+0x14>
  40435c:	f000 f860 	bl	404420 <__sinit>
  404360:	4b0c      	ldr	r3, [pc, #48]	; (404394 <_fflush_r+0x48>)
  404362:	429c      	cmp	r4, r3
  404364:	d109      	bne.n	40437a <_fflush_r+0x2e>
  404366:	686c      	ldr	r4, [r5, #4]
  404368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40436c:	b17b      	cbz	r3, 40438e <_fflush_r+0x42>
  40436e:	4621      	mov	r1, r4
  404370:	4628      	mov	r0, r5
  404372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404376:	f7ff bf61 	b.w	40423c <__sflush_r>
  40437a:	4b07      	ldr	r3, [pc, #28]	; (404398 <_fflush_r+0x4c>)
  40437c:	429c      	cmp	r4, r3
  40437e:	d101      	bne.n	404384 <_fflush_r+0x38>
  404380:	68ac      	ldr	r4, [r5, #8]
  404382:	e7f1      	b.n	404368 <_fflush_r+0x1c>
  404384:	4b05      	ldr	r3, [pc, #20]	; (40439c <_fflush_r+0x50>)
  404386:	429c      	cmp	r4, r3
  404388:	bf08      	it	eq
  40438a:	68ec      	ldreq	r4, [r5, #12]
  40438c:	e7ec      	b.n	404368 <_fflush_r+0x1c>
  40438e:	2000      	movs	r0, #0
  404390:	bd38      	pop	{r3, r4, r5, pc}
  404392:	bf00      	nop
  404394:	00405838 	.word	0x00405838
  404398:	00405858 	.word	0x00405858
  40439c:	00405818 	.word	0x00405818

004043a0 <_cleanup_r>:
  4043a0:	4901      	ldr	r1, [pc, #4]	; (4043a8 <_cleanup_r+0x8>)
  4043a2:	f000 b8a9 	b.w	4044f8 <_fwalk_reent>
  4043a6:	bf00      	nop
  4043a8:	0040434d 	.word	0x0040434d

004043ac <std.isra.0>:
  4043ac:	2300      	movs	r3, #0
  4043ae:	b510      	push	{r4, lr}
  4043b0:	4604      	mov	r4, r0
  4043b2:	6003      	str	r3, [r0, #0]
  4043b4:	6043      	str	r3, [r0, #4]
  4043b6:	6083      	str	r3, [r0, #8]
  4043b8:	8181      	strh	r1, [r0, #12]
  4043ba:	6643      	str	r3, [r0, #100]	; 0x64
  4043bc:	81c2      	strh	r2, [r0, #14]
  4043be:	6103      	str	r3, [r0, #16]
  4043c0:	6143      	str	r3, [r0, #20]
  4043c2:	6183      	str	r3, [r0, #24]
  4043c4:	4619      	mov	r1, r3
  4043c6:	2208      	movs	r2, #8
  4043c8:	305c      	adds	r0, #92	; 0x5c
  4043ca:	f7fe fb9c 	bl	402b06 <memset>
  4043ce:	4b05      	ldr	r3, [pc, #20]	; (4043e4 <std.isra.0+0x38>)
  4043d0:	6263      	str	r3, [r4, #36]	; 0x24
  4043d2:	4b05      	ldr	r3, [pc, #20]	; (4043e8 <std.isra.0+0x3c>)
  4043d4:	62a3      	str	r3, [r4, #40]	; 0x28
  4043d6:	4b05      	ldr	r3, [pc, #20]	; (4043ec <std.isra.0+0x40>)
  4043d8:	62e3      	str	r3, [r4, #44]	; 0x2c
  4043da:	4b05      	ldr	r3, [pc, #20]	; (4043f0 <std.isra.0+0x44>)
  4043dc:	6224      	str	r4, [r4, #32]
  4043de:	6323      	str	r3, [r4, #48]	; 0x30
  4043e0:	bd10      	pop	{r4, pc}
  4043e2:	bf00      	nop
  4043e4:	00405081 	.word	0x00405081
  4043e8:	004050a3 	.word	0x004050a3
  4043ec:	004050db 	.word	0x004050db
  4043f0:	004050ff 	.word	0x004050ff

004043f4 <__sfmoreglue>:
  4043f4:	b570      	push	{r4, r5, r6, lr}
  4043f6:	1e4a      	subs	r2, r1, #1
  4043f8:	2568      	movs	r5, #104	; 0x68
  4043fa:	4355      	muls	r5, r2
  4043fc:	460e      	mov	r6, r1
  4043fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
  404402:	f000 fc91 	bl	404d28 <_malloc_r>
  404406:	4604      	mov	r4, r0
  404408:	b140      	cbz	r0, 40441c <__sfmoreglue+0x28>
  40440a:	2100      	movs	r1, #0
  40440c:	e880 0042 	stmia.w	r0, {r1, r6}
  404410:	300c      	adds	r0, #12
  404412:	60a0      	str	r0, [r4, #8]
  404414:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404418:	f7fe fb75 	bl	402b06 <memset>
  40441c:	4620      	mov	r0, r4
  40441e:	bd70      	pop	{r4, r5, r6, pc}

00404420 <__sinit>:
  404420:	6983      	ldr	r3, [r0, #24]
  404422:	b510      	push	{r4, lr}
  404424:	4604      	mov	r4, r0
  404426:	bb33      	cbnz	r3, 404476 <__sinit+0x56>
  404428:	6483      	str	r3, [r0, #72]	; 0x48
  40442a:	64c3      	str	r3, [r0, #76]	; 0x4c
  40442c:	6503      	str	r3, [r0, #80]	; 0x50
  40442e:	4b12      	ldr	r3, [pc, #72]	; (404478 <__sinit+0x58>)
  404430:	4a12      	ldr	r2, [pc, #72]	; (40447c <__sinit+0x5c>)
  404432:	681b      	ldr	r3, [r3, #0]
  404434:	6282      	str	r2, [r0, #40]	; 0x28
  404436:	4298      	cmp	r0, r3
  404438:	bf04      	itt	eq
  40443a:	2301      	moveq	r3, #1
  40443c:	6183      	streq	r3, [r0, #24]
  40443e:	f000 f81f 	bl	404480 <__sfp>
  404442:	6060      	str	r0, [r4, #4]
  404444:	4620      	mov	r0, r4
  404446:	f000 f81b 	bl	404480 <__sfp>
  40444a:	60a0      	str	r0, [r4, #8]
  40444c:	4620      	mov	r0, r4
  40444e:	f000 f817 	bl	404480 <__sfp>
  404452:	2200      	movs	r2, #0
  404454:	60e0      	str	r0, [r4, #12]
  404456:	2104      	movs	r1, #4
  404458:	6860      	ldr	r0, [r4, #4]
  40445a:	f7ff ffa7 	bl	4043ac <std.isra.0>
  40445e:	2201      	movs	r2, #1
  404460:	2109      	movs	r1, #9
  404462:	68a0      	ldr	r0, [r4, #8]
  404464:	f7ff ffa2 	bl	4043ac <std.isra.0>
  404468:	2202      	movs	r2, #2
  40446a:	2112      	movs	r1, #18
  40446c:	68e0      	ldr	r0, [r4, #12]
  40446e:	f7ff ff9d 	bl	4043ac <std.isra.0>
  404472:	2301      	movs	r3, #1
  404474:	61a3      	str	r3, [r4, #24]
  404476:	bd10      	pop	{r4, pc}
  404478:	004057d0 	.word	0x004057d0
  40447c:	004043a1 	.word	0x004043a1

00404480 <__sfp>:
  404480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404482:	4b1c      	ldr	r3, [pc, #112]	; (4044f4 <__sfp+0x74>)
  404484:	681e      	ldr	r6, [r3, #0]
  404486:	69b3      	ldr	r3, [r6, #24]
  404488:	4607      	mov	r7, r0
  40448a:	b913      	cbnz	r3, 404492 <__sfp+0x12>
  40448c:	4630      	mov	r0, r6
  40448e:	f7ff ffc7 	bl	404420 <__sinit>
  404492:	3648      	adds	r6, #72	; 0x48
  404494:	68b4      	ldr	r4, [r6, #8]
  404496:	6873      	ldr	r3, [r6, #4]
  404498:	3b01      	subs	r3, #1
  40449a:	d503      	bpl.n	4044a4 <__sfp+0x24>
  40449c:	6833      	ldr	r3, [r6, #0]
  40449e:	b133      	cbz	r3, 4044ae <__sfp+0x2e>
  4044a0:	6836      	ldr	r6, [r6, #0]
  4044a2:	e7f7      	b.n	404494 <__sfp+0x14>
  4044a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  4044a8:	b16d      	cbz	r5, 4044c6 <__sfp+0x46>
  4044aa:	3468      	adds	r4, #104	; 0x68
  4044ac:	e7f4      	b.n	404498 <__sfp+0x18>
  4044ae:	2104      	movs	r1, #4
  4044b0:	4638      	mov	r0, r7
  4044b2:	f7ff ff9f 	bl	4043f4 <__sfmoreglue>
  4044b6:	6030      	str	r0, [r6, #0]
  4044b8:	2800      	cmp	r0, #0
  4044ba:	d1f1      	bne.n	4044a0 <__sfp+0x20>
  4044bc:	230c      	movs	r3, #12
  4044be:	603b      	str	r3, [r7, #0]
  4044c0:	4604      	mov	r4, r0
  4044c2:	4620      	mov	r0, r4
  4044c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4044ca:	81e3      	strh	r3, [r4, #14]
  4044cc:	2301      	movs	r3, #1
  4044ce:	81a3      	strh	r3, [r4, #12]
  4044d0:	6665      	str	r5, [r4, #100]	; 0x64
  4044d2:	6025      	str	r5, [r4, #0]
  4044d4:	60a5      	str	r5, [r4, #8]
  4044d6:	6065      	str	r5, [r4, #4]
  4044d8:	6125      	str	r5, [r4, #16]
  4044da:	6165      	str	r5, [r4, #20]
  4044dc:	61a5      	str	r5, [r4, #24]
  4044de:	2208      	movs	r2, #8
  4044e0:	4629      	mov	r1, r5
  4044e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  4044e6:	f7fe fb0e 	bl	402b06 <memset>
  4044ea:	6365      	str	r5, [r4, #52]	; 0x34
  4044ec:	63a5      	str	r5, [r4, #56]	; 0x38
  4044ee:	64a5      	str	r5, [r4, #72]	; 0x48
  4044f0:	64e5      	str	r5, [r4, #76]	; 0x4c
  4044f2:	e7e6      	b.n	4044c2 <__sfp+0x42>
  4044f4:	004057d0 	.word	0x004057d0

004044f8 <_fwalk_reent>:
  4044f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4044fc:	4680      	mov	r8, r0
  4044fe:	4689      	mov	r9, r1
  404500:	f100 0448 	add.w	r4, r0, #72	; 0x48
  404504:	2600      	movs	r6, #0
  404506:	b914      	cbnz	r4, 40450e <_fwalk_reent+0x16>
  404508:	4630      	mov	r0, r6
  40450a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40450e:	68a5      	ldr	r5, [r4, #8]
  404510:	6867      	ldr	r7, [r4, #4]
  404512:	3f01      	subs	r7, #1
  404514:	d501      	bpl.n	40451a <_fwalk_reent+0x22>
  404516:	6824      	ldr	r4, [r4, #0]
  404518:	e7f5      	b.n	404506 <_fwalk_reent+0xe>
  40451a:	89ab      	ldrh	r3, [r5, #12]
  40451c:	2b01      	cmp	r3, #1
  40451e:	d907      	bls.n	404530 <_fwalk_reent+0x38>
  404520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  404524:	3301      	adds	r3, #1
  404526:	d003      	beq.n	404530 <_fwalk_reent+0x38>
  404528:	4629      	mov	r1, r5
  40452a:	4640      	mov	r0, r8
  40452c:	47c8      	blx	r9
  40452e:	4306      	orrs	r6, r0
  404530:	3568      	adds	r5, #104	; 0x68
  404532:	e7ee      	b.n	404512 <_fwalk_reent+0x1a>

00404534 <_localeconv_r>:
  404534:	4b04      	ldr	r3, [pc, #16]	; (404548 <_localeconv_r+0x14>)
  404536:	681b      	ldr	r3, [r3, #0]
  404538:	6a18      	ldr	r0, [r3, #32]
  40453a:	4b04      	ldr	r3, [pc, #16]	; (40454c <_localeconv_r+0x18>)
  40453c:	2800      	cmp	r0, #0
  40453e:	bf08      	it	eq
  404540:	4618      	moveq	r0, r3
  404542:	30f0      	adds	r0, #240	; 0xf0
  404544:	4770      	bx	lr
  404546:	bf00      	nop
  404548:	20400048 	.word	0x20400048
  40454c:	204000ac 	.word	0x204000ac

00404550 <__swhatbuf_r>:
  404550:	b570      	push	{r4, r5, r6, lr}
  404552:	460e      	mov	r6, r1
  404554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404558:	2900      	cmp	r1, #0
  40455a:	b090      	sub	sp, #64	; 0x40
  40455c:	4614      	mov	r4, r2
  40455e:	461d      	mov	r5, r3
  404560:	da07      	bge.n	404572 <__swhatbuf_r+0x22>
  404562:	2300      	movs	r3, #0
  404564:	602b      	str	r3, [r5, #0]
  404566:	89b3      	ldrh	r3, [r6, #12]
  404568:	061a      	lsls	r2, r3, #24
  40456a:	d410      	bmi.n	40458e <__swhatbuf_r+0x3e>
  40456c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404570:	e00e      	b.n	404590 <__swhatbuf_r+0x40>
  404572:	aa01      	add	r2, sp, #4
  404574:	f000 feaa 	bl	4052cc <_fstat_r>
  404578:	2800      	cmp	r0, #0
  40457a:	dbf2      	blt.n	404562 <__swhatbuf_r+0x12>
  40457c:	9a02      	ldr	r2, [sp, #8]
  40457e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404582:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  404586:	425a      	negs	r2, r3
  404588:	415a      	adcs	r2, r3
  40458a:	602a      	str	r2, [r5, #0]
  40458c:	e7ee      	b.n	40456c <__swhatbuf_r+0x1c>
  40458e:	2340      	movs	r3, #64	; 0x40
  404590:	2000      	movs	r0, #0
  404592:	6023      	str	r3, [r4, #0]
  404594:	b010      	add	sp, #64	; 0x40
  404596:	bd70      	pop	{r4, r5, r6, pc}

00404598 <__smakebuf_r>:
  404598:	898b      	ldrh	r3, [r1, #12]
  40459a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  40459c:	079d      	lsls	r5, r3, #30
  40459e:	4606      	mov	r6, r0
  4045a0:	460c      	mov	r4, r1
  4045a2:	d507      	bpl.n	4045b4 <__smakebuf_r+0x1c>
  4045a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4045a8:	6023      	str	r3, [r4, #0]
  4045aa:	6123      	str	r3, [r4, #16]
  4045ac:	2301      	movs	r3, #1
  4045ae:	6163      	str	r3, [r4, #20]
  4045b0:	b002      	add	sp, #8
  4045b2:	bd70      	pop	{r4, r5, r6, pc}
  4045b4:	ab01      	add	r3, sp, #4
  4045b6:	466a      	mov	r2, sp
  4045b8:	f7ff ffca 	bl	404550 <__swhatbuf_r>
  4045bc:	9900      	ldr	r1, [sp, #0]
  4045be:	4605      	mov	r5, r0
  4045c0:	4630      	mov	r0, r6
  4045c2:	f000 fbb1 	bl	404d28 <_malloc_r>
  4045c6:	b948      	cbnz	r0, 4045dc <__smakebuf_r+0x44>
  4045c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045cc:	059a      	lsls	r2, r3, #22
  4045ce:	d4ef      	bmi.n	4045b0 <__smakebuf_r+0x18>
  4045d0:	f023 0303 	bic.w	r3, r3, #3
  4045d4:	f043 0302 	orr.w	r3, r3, #2
  4045d8:	81a3      	strh	r3, [r4, #12]
  4045da:	e7e3      	b.n	4045a4 <__smakebuf_r+0xc>
  4045dc:	4b0d      	ldr	r3, [pc, #52]	; (404614 <__smakebuf_r+0x7c>)
  4045de:	62b3      	str	r3, [r6, #40]	; 0x28
  4045e0:	89a3      	ldrh	r3, [r4, #12]
  4045e2:	6020      	str	r0, [r4, #0]
  4045e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4045e8:	81a3      	strh	r3, [r4, #12]
  4045ea:	9b00      	ldr	r3, [sp, #0]
  4045ec:	6163      	str	r3, [r4, #20]
  4045ee:	9b01      	ldr	r3, [sp, #4]
  4045f0:	6120      	str	r0, [r4, #16]
  4045f2:	b15b      	cbz	r3, 40460c <__smakebuf_r+0x74>
  4045f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4045f8:	4630      	mov	r0, r6
  4045fa:	f000 fe79 	bl	4052f0 <_isatty_r>
  4045fe:	b128      	cbz	r0, 40460c <__smakebuf_r+0x74>
  404600:	89a3      	ldrh	r3, [r4, #12]
  404602:	f023 0303 	bic.w	r3, r3, #3
  404606:	f043 0301 	orr.w	r3, r3, #1
  40460a:	81a3      	strh	r3, [r4, #12]
  40460c:	89a3      	ldrh	r3, [r4, #12]
  40460e:	431d      	orrs	r5, r3
  404610:	81a5      	strh	r5, [r4, #12]
  404612:	e7cd      	b.n	4045b0 <__smakebuf_r+0x18>
  404614:	004043a1 	.word	0x004043a1

00404618 <malloc>:
  404618:	4b02      	ldr	r3, [pc, #8]	; (404624 <malloc+0xc>)
  40461a:	4601      	mov	r1, r0
  40461c:	6818      	ldr	r0, [r3, #0]
  40461e:	f000 bb83 	b.w	404d28 <_malloc_r>
  404622:	bf00      	nop
  404624:	20400048 	.word	0x20400048
	...

00404630 <memchr>:
  404630:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404634:	2a10      	cmp	r2, #16
  404636:	db2b      	blt.n	404690 <memchr+0x60>
  404638:	f010 0f07 	tst.w	r0, #7
  40463c:	d008      	beq.n	404650 <memchr+0x20>
  40463e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404642:	3a01      	subs	r2, #1
  404644:	428b      	cmp	r3, r1
  404646:	d02d      	beq.n	4046a4 <memchr+0x74>
  404648:	f010 0f07 	tst.w	r0, #7
  40464c:	b342      	cbz	r2, 4046a0 <memchr+0x70>
  40464e:	d1f6      	bne.n	40463e <memchr+0xe>
  404650:	b4f0      	push	{r4, r5, r6, r7}
  404652:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404656:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40465a:	f022 0407 	bic.w	r4, r2, #7
  40465e:	f07f 0700 	mvns.w	r7, #0
  404662:	2300      	movs	r3, #0
  404664:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404668:	3c08      	subs	r4, #8
  40466a:	ea85 0501 	eor.w	r5, r5, r1
  40466e:	ea86 0601 	eor.w	r6, r6, r1
  404672:	fa85 f547 	uadd8	r5, r5, r7
  404676:	faa3 f587 	sel	r5, r3, r7
  40467a:	fa86 f647 	uadd8	r6, r6, r7
  40467e:	faa5 f687 	sel	r6, r5, r7
  404682:	b98e      	cbnz	r6, 4046a8 <memchr+0x78>
  404684:	d1ee      	bne.n	404664 <memchr+0x34>
  404686:	bcf0      	pop	{r4, r5, r6, r7}
  404688:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40468c:	f002 0207 	and.w	r2, r2, #7
  404690:	b132      	cbz	r2, 4046a0 <memchr+0x70>
  404692:	f810 3b01 	ldrb.w	r3, [r0], #1
  404696:	3a01      	subs	r2, #1
  404698:	ea83 0301 	eor.w	r3, r3, r1
  40469c:	b113      	cbz	r3, 4046a4 <memchr+0x74>
  40469e:	d1f8      	bne.n	404692 <memchr+0x62>
  4046a0:	2000      	movs	r0, #0
  4046a2:	4770      	bx	lr
  4046a4:	3801      	subs	r0, #1
  4046a6:	4770      	bx	lr
  4046a8:	2d00      	cmp	r5, #0
  4046aa:	bf06      	itte	eq
  4046ac:	4635      	moveq	r5, r6
  4046ae:	3803      	subeq	r0, #3
  4046b0:	3807      	subne	r0, #7
  4046b2:	f015 0f01 	tst.w	r5, #1
  4046b6:	d107      	bne.n	4046c8 <memchr+0x98>
  4046b8:	3001      	adds	r0, #1
  4046ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4046be:	bf02      	ittt	eq
  4046c0:	3001      	addeq	r0, #1
  4046c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4046c6:	3001      	addeq	r0, #1
  4046c8:	bcf0      	pop	{r4, r5, r6, r7}
  4046ca:	3801      	subs	r0, #1
  4046cc:	4770      	bx	lr
  4046ce:	bf00      	nop

004046d0 <_Balloc>:
  4046d0:	b570      	push	{r4, r5, r6, lr}
  4046d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4046d4:	4604      	mov	r4, r0
  4046d6:	460e      	mov	r6, r1
  4046d8:	b93d      	cbnz	r5, 4046ea <_Balloc+0x1a>
  4046da:	2010      	movs	r0, #16
  4046dc:	f7ff ff9c 	bl	404618 <malloc>
  4046e0:	6260      	str	r0, [r4, #36]	; 0x24
  4046e2:	6045      	str	r5, [r0, #4]
  4046e4:	6085      	str	r5, [r0, #8]
  4046e6:	6005      	str	r5, [r0, #0]
  4046e8:	60c5      	str	r5, [r0, #12]
  4046ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4046ec:	68eb      	ldr	r3, [r5, #12]
  4046ee:	b183      	cbz	r3, 404712 <_Balloc+0x42>
  4046f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4046f2:	68db      	ldr	r3, [r3, #12]
  4046f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  4046f8:	b9b8      	cbnz	r0, 40472a <_Balloc+0x5a>
  4046fa:	2101      	movs	r1, #1
  4046fc:	fa01 f506 	lsl.w	r5, r1, r6
  404700:	1d6a      	adds	r2, r5, #5
  404702:	0092      	lsls	r2, r2, #2
  404704:	4620      	mov	r0, r4
  404706:	f000 fab3 	bl	404c70 <_calloc_r>
  40470a:	b160      	cbz	r0, 404726 <_Balloc+0x56>
  40470c:	6046      	str	r6, [r0, #4]
  40470e:	6085      	str	r5, [r0, #8]
  404710:	e00e      	b.n	404730 <_Balloc+0x60>
  404712:	2221      	movs	r2, #33	; 0x21
  404714:	2104      	movs	r1, #4
  404716:	4620      	mov	r0, r4
  404718:	f000 faaa 	bl	404c70 <_calloc_r>
  40471c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40471e:	60e8      	str	r0, [r5, #12]
  404720:	68db      	ldr	r3, [r3, #12]
  404722:	2b00      	cmp	r3, #0
  404724:	d1e4      	bne.n	4046f0 <_Balloc+0x20>
  404726:	2000      	movs	r0, #0
  404728:	bd70      	pop	{r4, r5, r6, pc}
  40472a:	6802      	ldr	r2, [r0, #0]
  40472c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  404730:	2300      	movs	r3, #0
  404732:	6103      	str	r3, [r0, #16]
  404734:	60c3      	str	r3, [r0, #12]
  404736:	bd70      	pop	{r4, r5, r6, pc}

00404738 <_Bfree>:
  404738:	b570      	push	{r4, r5, r6, lr}
  40473a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40473c:	4606      	mov	r6, r0
  40473e:	460d      	mov	r5, r1
  404740:	b93c      	cbnz	r4, 404752 <_Bfree+0x1a>
  404742:	2010      	movs	r0, #16
  404744:	f7ff ff68 	bl	404618 <malloc>
  404748:	6270      	str	r0, [r6, #36]	; 0x24
  40474a:	6044      	str	r4, [r0, #4]
  40474c:	6084      	str	r4, [r0, #8]
  40474e:	6004      	str	r4, [r0, #0]
  404750:	60c4      	str	r4, [r0, #12]
  404752:	b13d      	cbz	r5, 404764 <_Bfree+0x2c>
  404754:	6a73      	ldr	r3, [r6, #36]	; 0x24
  404756:	686a      	ldr	r2, [r5, #4]
  404758:	68db      	ldr	r3, [r3, #12]
  40475a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40475e:	6029      	str	r1, [r5, #0]
  404760:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  404764:	bd70      	pop	{r4, r5, r6, pc}

00404766 <__multadd>:
  404766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40476a:	690d      	ldr	r5, [r1, #16]
  40476c:	461f      	mov	r7, r3
  40476e:	4606      	mov	r6, r0
  404770:	460c      	mov	r4, r1
  404772:	f101 0e14 	add.w	lr, r1, #20
  404776:	2300      	movs	r3, #0
  404778:	f8de 0000 	ldr.w	r0, [lr]
  40477c:	b281      	uxth	r1, r0
  40477e:	fb02 7101 	mla	r1, r2, r1, r7
  404782:	0c0f      	lsrs	r7, r1, #16
  404784:	0c00      	lsrs	r0, r0, #16
  404786:	fb02 7000 	mla	r0, r2, r0, r7
  40478a:	b289      	uxth	r1, r1
  40478c:	3301      	adds	r3, #1
  40478e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  404792:	429d      	cmp	r5, r3
  404794:	ea4f 4710 	mov.w	r7, r0, lsr #16
  404798:	f84e 1b04 	str.w	r1, [lr], #4
  40479c:	dcec      	bgt.n	404778 <__multadd+0x12>
  40479e:	b1d7      	cbz	r7, 4047d6 <__multadd+0x70>
  4047a0:	68a3      	ldr	r3, [r4, #8]
  4047a2:	429d      	cmp	r5, r3
  4047a4:	db12      	blt.n	4047cc <__multadd+0x66>
  4047a6:	6861      	ldr	r1, [r4, #4]
  4047a8:	4630      	mov	r0, r6
  4047aa:	3101      	adds	r1, #1
  4047ac:	f7ff ff90 	bl	4046d0 <_Balloc>
  4047b0:	6922      	ldr	r2, [r4, #16]
  4047b2:	3202      	adds	r2, #2
  4047b4:	f104 010c 	add.w	r1, r4, #12
  4047b8:	4680      	mov	r8, r0
  4047ba:	0092      	lsls	r2, r2, #2
  4047bc:	300c      	adds	r0, #12
  4047be:	f7fe f997 	bl	402af0 <memcpy>
  4047c2:	4621      	mov	r1, r4
  4047c4:	4630      	mov	r0, r6
  4047c6:	f7ff ffb7 	bl	404738 <_Bfree>
  4047ca:	4644      	mov	r4, r8
  4047cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4047d0:	3501      	adds	r5, #1
  4047d2:	615f      	str	r7, [r3, #20]
  4047d4:	6125      	str	r5, [r4, #16]
  4047d6:	4620      	mov	r0, r4
  4047d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004047dc <__hi0bits>:
  4047dc:	0c02      	lsrs	r2, r0, #16
  4047de:	0412      	lsls	r2, r2, #16
  4047e0:	4603      	mov	r3, r0
  4047e2:	b9b2      	cbnz	r2, 404812 <__hi0bits+0x36>
  4047e4:	0403      	lsls	r3, r0, #16
  4047e6:	2010      	movs	r0, #16
  4047e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4047ec:	bf04      	itt	eq
  4047ee:	021b      	lsleq	r3, r3, #8
  4047f0:	3008      	addeq	r0, #8
  4047f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4047f6:	bf04      	itt	eq
  4047f8:	011b      	lsleq	r3, r3, #4
  4047fa:	3004      	addeq	r0, #4
  4047fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  404800:	bf04      	itt	eq
  404802:	009b      	lsleq	r3, r3, #2
  404804:	3002      	addeq	r0, #2
  404806:	2b00      	cmp	r3, #0
  404808:	db06      	blt.n	404818 <__hi0bits+0x3c>
  40480a:	005b      	lsls	r3, r3, #1
  40480c:	d503      	bpl.n	404816 <__hi0bits+0x3a>
  40480e:	3001      	adds	r0, #1
  404810:	4770      	bx	lr
  404812:	2000      	movs	r0, #0
  404814:	e7e8      	b.n	4047e8 <__hi0bits+0xc>
  404816:	2020      	movs	r0, #32
  404818:	4770      	bx	lr

0040481a <__lo0bits>:
  40481a:	6803      	ldr	r3, [r0, #0]
  40481c:	f013 0207 	ands.w	r2, r3, #7
  404820:	4601      	mov	r1, r0
  404822:	d00b      	beq.n	40483c <__lo0bits+0x22>
  404824:	07da      	lsls	r2, r3, #31
  404826:	d423      	bmi.n	404870 <__lo0bits+0x56>
  404828:	0798      	lsls	r0, r3, #30
  40482a:	bf49      	itett	mi
  40482c:	085b      	lsrmi	r3, r3, #1
  40482e:	089b      	lsrpl	r3, r3, #2
  404830:	2001      	movmi	r0, #1
  404832:	600b      	strmi	r3, [r1, #0]
  404834:	bf5c      	itt	pl
  404836:	600b      	strpl	r3, [r1, #0]
  404838:	2002      	movpl	r0, #2
  40483a:	4770      	bx	lr
  40483c:	b298      	uxth	r0, r3
  40483e:	b9a8      	cbnz	r0, 40486c <__lo0bits+0x52>
  404840:	0c1b      	lsrs	r3, r3, #16
  404842:	2010      	movs	r0, #16
  404844:	f013 0fff 	tst.w	r3, #255	; 0xff
  404848:	bf04      	itt	eq
  40484a:	0a1b      	lsreq	r3, r3, #8
  40484c:	3008      	addeq	r0, #8
  40484e:	071a      	lsls	r2, r3, #28
  404850:	bf04      	itt	eq
  404852:	091b      	lsreq	r3, r3, #4
  404854:	3004      	addeq	r0, #4
  404856:	079a      	lsls	r2, r3, #30
  404858:	bf04      	itt	eq
  40485a:	089b      	lsreq	r3, r3, #2
  40485c:	3002      	addeq	r0, #2
  40485e:	07da      	lsls	r2, r3, #31
  404860:	d402      	bmi.n	404868 <__lo0bits+0x4e>
  404862:	085b      	lsrs	r3, r3, #1
  404864:	d006      	beq.n	404874 <__lo0bits+0x5a>
  404866:	3001      	adds	r0, #1
  404868:	600b      	str	r3, [r1, #0]
  40486a:	4770      	bx	lr
  40486c:	4610      	mov	r0, r2
  40486e:	e7e9      	b.n	404844 <__lo0bits+0x2a>
  404870:	2000      	movs	r0, #0
  404872:	4770      	bx	lr
  404874:	2020      	movs	r0, #32
  404876:	4770      	bx	lr

00404878 <__i2b>:
  404878:	b510      	push	{r4, lr}
  40487a:	460c      	mov	r4, r1
  40487c:	2101      	movs	r1, #1
  40487e:	f7ff ff27 	bl	4046d0 <_Balloc>
  404882:	2201      	movs	r2, #1
  404884:	6144      	str	r4, [r0, #20]
  404886:	6102      	str	r2, [r0, #16]
  404888:	bd10      	pop	{r4, pc}

0040488a <__multiply>:
  40488a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40488e:	4614      	mov	r4, r2
  404890:	690a      	ldr	r2, [r1, #16]
  404892:	6923      	ldr	r3, [r4, #16]
  404894:	429a      	cmp	r2, r3
  404896:	bfb8      	it	lt
  404898:	460b      	movlt	r3, r1
  40489a:	4689      	mov	r9, r1
  40489c:	bfbc      	itt	lt
  40489e:	46a1      	movlt	r9, r4
  4048a0:	461c      	movlt	r4, r3
  4048a2:	f8d9 7010 	ldr.w	r7, [r9, #16]
  4048a6:	f8d4 a010 	ldr.w	sl, [r4, #16]
  4048aa:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4048ae:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4048b2:	eb07 060a 	add.w	r6, r7, sl
  4048b6:	429e      	cmp	r6, r3
  4048b8:	bfc8      	it	gt
  4048ba:	3101      	addgt	r1, #1
  4048bc:	f7ff ff08 	bl	4046d0 <_Balloc>
  4048c0:	f100 0514 	add.w	r5, r0, #20
  4048c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  4048c8:	462b      	mov	r3, r5
  4048ca:	2200      	movs	r2, #0
  4048cc:	4543      	cmp	r3, r8
  4048ce:	d316      	bcc.n	4048fe <__multiply+0x74>
  4048d0:	f104 0214 	add.w	r2, r4, #20
  4048d4:	f109 0114 	add.w	r1, r9, #20
  4048d8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  4048dc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  4048e0:	9301      	str	r3, [sp, #4]
  4048e2:	9c01      	ldr	r4, [sp, #4]
  4048e4:	4294      	cmp	r4, r2
  4048e6:	4613      	mov	r3, r2
  4048e8:	d80c      	bhi.n	404904 <__multiply+0x7a>
  4048ea:	2e00      	cmp	r6, #0
  4048ec:	dd03      	ble.n	4048f6 <__multiply+0x6c>
  4048ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  4048f2:	2b00      	cmp	r3, #0
  4048f4:	d054      	beq.n	4049a0 <__multiply+0x116>
  4048f6:	6106      	str	r6, [r0, #16]
  4048f8:	b003      	add	sp, #12
  4048fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048fe:	f843 2b04 	str.w	r2, [r3], #4
  404902:	e7e3      	b.n	4048cc <__multiply+0x42>
  404904:	f8b3 a000 	ldrh.w	sl, [r3]
  404908:	3204      	adds	r2, #4
  40490a:	f1ba 0f00 	cmp.w	sl, #0
  40490e:	d020      	beq.n	404952 <__multiply+0xc8>
  404910:	46ae      	mov	lr, r5
  404912:	4689      	mov	r9, r1
  404914:	f04f 0c00 	mov.w	ip, #0
  404918:	f859 4b04 	ldr.w	r4, [r9], #4
  40491c:	f8be b000 	ldrh.w	fp, [lr]
  404920:	b2a3      	uxth	r3, r4
  404922:	fb0a b303 	mla	r3, sl, r3, fp
  404926:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  40492a:	f8de 4000 	ldr.w	r4, [lr]
  40492e:	4463      	add	r3, ip
  404930:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  404934:	fb0a c40b 	mla	r4, sl, fp, ip
  404938:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40493c:	b29b      	uxth	r3, r3
  40493e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  404942:	454f      	cmp	r7, r9
  404944:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  404948:	f84e 3b04 	str.w	r3, [lr], #4
  40494c:	d8e4      	bhi.n	404918 <__multiply+0x8e>
  40494e:	f8ce c000 	str.w	ip, [lr]
  404952:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  404956:	f1b9 0f00 	cmp.w	r9, #0
  40495a:	d01f      	beq.n	40499c <__multiply+0x112>
  40495c:	682b      	ldr	r3, [r5, #0]
  40495e:	46ae      	mov	lr, r5
  404960:	468c      	mov	ip, r1
  404962:	f04f 0a00 	mov.w	sl, #0
  404966:	f8bc 4000 	ldrh.w	r4, [ip]
  40496a:	f8be b002 	ldrh.w	fp, [lr, #2]
  40496e:	fb09 b404 	mla	r4, r9, r4, fp
  404972:	44a2      	add	sl, r4
  404974:	b29b      	uxth	r3, r3
  404976:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  40497a:	f84e 3b04 	str.w	r3, [lr], #4
  40497e:	f85c 3b04 	ldr.w	r3, [ip], #4
  404982:	f8be 4000 	ldrh.w	r4, [lr]
  404986:	0c1b      	lsrs	r3, r3, #16
  404988:	fb09 4303 	mla	r3, r9, r3, r4
  40498c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  404990:	4567      	cmp	r7, ip
  404992:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  404996:	d8e6      	bhi.n	404966 <__multiply+0xdc>
  404998:	f8ce 3000 	str.w	r3, [lr]
  40499c:	3504      	adds	r5, #4
  40499e:	e7a0      	b.n	4048e2 <__multiply+0x58>
  4049a0:	3e01      	subs	r6, #1
  4049a2:	e7a2      	b.n	4048ea <__multiply+0x60>

004049a4 <__pow5mult>:
  4049a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4049a8:	4615      	mov	r5, r2
  4049aa:	f012 0203 	ands.w	r2, r2, #3
  4049ae:	4606      	mov	r6, r0
  4049b0:	460f      	mov	r7, r1
  4049b2:	d007      	beq.n	4049c4 <__pow5mult+0x20>
  4049b4:	3a01      	subs	r2, #1
  4049b6:	4c21      	ldr	r4, [pc, #132]	; (404a3c <__pow5mult+0x98>)
  4049b8:	2300      	movs	r3, #0
  4049ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  4049be:	f7ff fed2 	bl	404766 <__multadd>
  4049c2:	4607      	mov	r7, r0
  4049c4:	10ad      	asrs	r5, r5, #2
  4049c6:	d035      	beq.n	404a34 <__pow5mult+0x90>
  4049c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
  4049ca:	b93c      	cbnz	r4, 4049dc <__pow5mult+0x38>
  4049cc:	2010      	movs	r0, #16
  4049ce:	f7ff fe23 	bl	404618 <malloc>
  4049d2:	6270      	str	r0, [r6, #36]	; 0x24
  4049d4:	6044      	str	r4, [r0, #4]
  4049d6:	6084      	str	r4, [r0, #8]
  4049d8:	6004      	str	r4, [r0, #0]
  4049da:	60c4      	str	r4, [r0, #12]
  4049dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  4049e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
  4049e4:	b94c      	cbnz	r4, 4049fa <__pow5mult+0x56>
  4049e6:	f240 2171 	movw	r1, #625	; 0x271
  4049ea:	4630      	mov	r0, r6
  4049ec:	f7ff ff44 	bl	404878 <__i2b>
  4049f0:	2300      	movs	r3, #0
  4049f2:	f8c8 0008 	str.w	r0, [r8, #8]
  4049f6:	4604      	mov	r4, r0
  4049f8:	6003      	str	r3, [r0, #0]
  4049fa:	f04f 0800 	mov.w	r8, #0
  4049fe:	07eb      	lsls	r3, r5, #31
  404a00:	d50a      	bpl.n	404a18 <__pow5mult+0x74>
  404a02:	4639      	mov	r1, r7
  404a04:	4622      	mov	r2, r4
  404a06:	4630      	mov	r0, r6
  404a08:	f7ff ff3f 	bl	40488a <__multiply>
  404a0c:	4639      	mov	r1, r7
  404a0e:	4681      	mov	r9, r0
  404a10:	4630      	mov	r0, r6
  404a12:	f7ff fe91 	bl	404738 <_Bfree>
  404a16:	464f      	mov	r7, r9
  404a18:	106d      	asrs	r5, r5, #1
  404a1a:	d00b      	beq.n	404a34 <__pow5mult+0x90>
  404a1c:	6820      	ldr	r0, [r4, #0]
  404a1e:	b938      	cbnz	r0, 404a30 <__pow5mult+0x8c>
  404a20:	4622      	mov	r2, r4
  404a22:	4621      	mov	r1, r4
  404a24:	4630      	mov	r0, r6
  404a26:	f7ff ff30 	bl	40488a <__multiply>
  404a2a:	6020      	str	r0, [r4, #0]
  404a2c:	f8c0 8000 	str.w	r8, [r0]
  404a30:	4604      	mov	r4, r0
  404a32:	e7e4      	b.n	4049fe <__pow5mult+0x5a>
  404a34:	4638      	mov	r0, r7
  404a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404a3a:	bf00      	nop
  404a3c:	00405968 	.word	0x00405968

00404a40 <__lshift>:
  404a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404a44:	460c      	mov	r4, r1
  404a46:	ea4f 1a62 	mov.w	sl, r2, asr #5
  404a4a:	6923      	ldr	r3, [r4, #16]
  404a4c:	6849      	ldr	r1, [r1, #4]
  404a4e:	eb0a 0903 	add.w	r9, sl, r3
  404a52:	68a3      	ldr	r3, [r4, #8]
  404a54:	4607      	mov	r7, r0
  404a56:	4616      	mov	r6, r2
  404a58:	f109 0501 	add.w	r5, r9, #1
  404a5c:	42ab      	cmp	r3, r5
  404a5e:	db31      	blt.n	404ac4 <__lshift+0x84>
  404a60:	4638      	mov	r0, r7
  404a62:	f7ff fe35 	bl	4046d0 <_Balloc>
  404a66:	2200      	movs	r2, #0
  404a68:	4680      	mov	r8, r0
  404a6a:	f100 0314 	add.w	r3, r0, #20
  404a6e:	4611      	mov	r1, r2
  404a70:	4552      	cmp	r2, sl
  404a72:	db2a      	blt.n	404aca <__lshift+0x8a>
  404a74:	6920      	ldr	r0, [r4, #16]
  404a76:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  404a7a:	f104 0114 	add.w	r1, r4, #20
  404a7e:	f016 021f 	ands.w	r2, r6, #31
  404a82:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  404a86:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  404a8a:	d022      	beq.n	404ad2 <__lshift+0x92>
  404a8c:	f1c2 0c20 	rsb	ip, r2, #32
  404a90:	2000      	movs	r0, #0
  404a92:	680e      	ldr	r6, [r1, #0]
  404a94:	4096      	lsls	r6, r2
  404a96:	4330      	orrs	r0, r6
  404a98:	f843 0b04 	str.w	r0, [r3], #4
  404a9c:	f851 0b04 	ldr.w	r0, [r1], #4
  404aa0:	458e      	cmp	lr, r1
  404aa2:	fa20 f00c 	lsr.w	r0, r0, ip
  404aa6:	d8f4      	bhi.n	404a92 <__lshift+0x52>
  404aa8:	6018      	str	r0, [r3, #0]
  404aaa:	b108      	cbz	r0, 404ab0 <__lshift+0x70>
  404aac:	f109 0502 	add.w	r5, r9, #2
  404ab0:	3d01      	subs	r5, #1
  404ab2:	4638      	mov	r0, r7
  404ab4:	f8c8 5010 	str.w	r5, [r8, #16]
  404ab8:	4621      	mov	r1, r4
  404aba:	f7ff fe3d 	bl	404738 <_Bfree>
  404abe:	4640      	mov	r0, r8
  404ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404ac4:	3101      	adds	r1, #1
  404ac6:	005b      	lsls	r3, r3, #1
  404ac8:	e7c8      	b.n	404a5c <__lshift+0x1c>
  404aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  404ace:	3201      	adds	r2, #1
  404ad0:	e7ce      	b.n	404a70 <__lshift+0x30>
  404ad2:	3b04      	subs	r3, #4
  404ad4:	f851 2b04 	ldr.w	r2, [r1], #4
  404ad8:	f843 2f04 	str.w	r2, [r3, #4]!
  404adc:	458e      	cmp	lr, r1
  404ade:	d8f9      	bhi.n	404ad4 <__lshift+0x94>
  404ae0:	e7e6      	b.n	404ab0 <__lshift+0x70>

00404ae2 <__mcmp>:
  404ae2:	6903      	ldr	r3, [r0, #16]
  404ae4:	690a      	ldr	r2, [r1, #16]
  404ae6:	1a9b      	subs	r3, r3, r2
  404ae8:	b530      	push	{r4, r5, lr}
  404aea:	d10c      	bne.n	404b06 <__mcmp+0x24>
  404aec:	0092      	lsls	r2, r2, #2
  404aee:	3014      	adds	r0, #20
  404af0:	3114      	adds	r1, #20
  404af2:	1884      	adds	r4, r0, r2
  404af4:	4411      	add	r1, r2
  404af6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  404afa:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  404afe:	4295      	cmp	r5, r2
  404b00:	d003      	beq.n	404b0a <__mcmp+0x28>
  404b02:	d305      	bcc.n	404b10 <__mcmp+0x2e>
  404b04:	2301      	movs	r3, #1
  404b06:	4618      	mov	r0, r3
  404b08:	bd30      	pop	{r4, r5, pc}
  404b0a:	42a0      	cmp	r0, r4
  404b0c:	d3f3      	bcc.n	404af6 <__mcmp+0x14>
  404b0e:	e7fa      	b.n	404b06 <__mcmp+0x24>
  404b10:	f04f 33ff 	mov.w	r3, #4294967295
  404b14:	e7f7      	b.n	404b06 <__mcmp+0x24>

00404b16 <__mdiff>:
  404b16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404b1a:	460d      	mov	r5, r1
  404b1c:	4607      	mov	r7, r0
  404b1e:	4611      	mov	r1, r2
  404b20:	4628      	mov	r0, r5
  404b22:	4614      	mov	r4, r2
  404b24:	f7ff ffdd 	bl	404ae2 <__mcmp>
  404b28:	1e06      	subs	r6, r0, #0
  404b2a:	d108      	bne.n	404b3e <__mdiff+0x28>
  404b2c:	4631      	mov	r1, r6
  404b2e:	4638      	mov	r0, r7
  404b30:	f7ff fdce 	bl	4046d0 <_Balloc>
  404b34:	2301      	movs	r3, #1
  404b36:	6103      	str	r3, [r0, #16]
  404b38:	6146      	str	r6, [r0, #20]
  404b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404b3e:	bfa4      	itt	ge
  404b40:	4623      	movge	r3, r4
  404b42:	462c      	movge	r4, r5
  404b44:	4638      	mov	r0, r7
  404b46:	6861      	ldr	r1, [r4, #4]
  404b48:	bfa6      	itte	ge
  404b4a:	461d      	movge	r5, r3
  404b4c:	2600      	movge	r6, #0
  404b4e:	2601      	movlt	r6, #1
  404b50:	f7ff fdbe 	bl	4046d0 <_Balloc>
  404b54:	692b      	ldr	r3, [r5, #16]
  404b56:	60c6      	str	r6, [r0, #12]
  404b58:	6926      	ldr	r6, [r4, #16]
  404b5a:	f105 0914 	add.w	r9, r5, #20
  404b5e:	f104 0214 	add.w	r2, r4, #20
  404b62:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  404b66:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  404b6a:	f100 0514 	add.w	r5, r0, #20
  404b6e:	f04f 0c00 	mov.w	ip, #0
  404b72:	f852 ab04 	ldr.w	sl, [r2], #4
  404b76:	f859 4b04 	ldr.w	r4, [r9], #4
  404b7a:	fa1c f18a 	uxtah	r1, ip, sl
  404b7e:	b2a3      	uxth	r3, r4
  404b80:	1ac9      	subs	r1, r1, r3
  404b82:	0c23      	lsrs	r3, r4, #16
  404b84:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  404b88:	eb03 4321 	add.w	r3, r3, r1, asr #16
  404b8c:	b289      	uxth	r1, r1
  404b8e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  404b92:	45c8      	cmp	r8, r9
  404b94:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  404b98:	4696      	mov	lr, r2
  404b9a:	f845 3b04 	str.w	r3, [r5], #4
  404b9e:	d8e8      	bhi.n	404b72 <__mdiff+0x5c>
  404ba0:	45be      	cmp	lr, r7
  404ba2:	d305      	bcc.n	404bb0 <__mdiff+0x9a>
  404ba4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404ba8:	b18b      	cbz	r3, 404bce <__mdiff+0xb8>
  404baa:	6106      	str	r6, [r0, #16]
  404bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404bb0:	f85e 1b04 	ldr.w	r1, [lr], #4
  404bb4:	fa1c f381 	uxtah	r3, ip, r1
  404bb8:	141a      	asrs	r2, r3, #16
  404bba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  404bbe:	b29b      	uxth	r3, r3
  404bc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404bc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
  404bc8:	f845 3b04 	str.w	r3, [r5], #4
  404bcc:	e7e8      	b.n	404ba0 <__mdiff+0x8a>
  404bce:	3e01      	subs	r6, #1
  404bd0:	e7e8      	b.n	404ba4 <__mdiff+0x8e>

00404bd2 <__d2b>:
  404bd2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  404bd6:	2101      	movs	r1, #1
  404bd8:	461c      	mov	r4, r3
  404bda:	4690      	mov	r8, r2
  404bdc:	9e08      	ldr	r6, [sp, #32]
  404bde:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404be0:	f7ff fd76 	bl	4046d0 <_Balloc>
  404be4:	f3c4 0213 	ubfx	r2, r4, #0, #20
  404be8:	f3c4 540a 	ubfx	r4, r4, #20, #11
  404bec:	4607      	mov	r7, r0
  404bee:	bb34      	cbnz	r4, 404c3e <__d2b+0x6c>
  404bf0:	9201      	str	r2, [sp, #4]
  404bf2:	f1b8 0f00 	cmp.w	r8, #0
  404bf6:	d027      	beq.n	404c48 <__d2b+0x76>
  404bf8:	a802      	add	r0, sp, #8
  404bfa:	f840 8d08 	str.w	r8, [r0, #-8]!
  404bfe:	f7ff fe0c 	bl	40481a <__lo0bits>
  404c02:	9900      	ldr	r1, [sp, #0]
  404c04:	b1f0      	cbz	r0, 404c44 <__d2b+0x72>
  404c06:	9a01      	ldr	r2, [sp, #4]
  404c08:	f1c0 0320 	rsb	r3, r0, #32
  404c0c:	fa02 f303 	lsl.w	r3, r2, r3
  404c10:	430b      	orrs	r3, r1
  404c12:	40c2      	lsrs	r2, r0
  404c14:	617b      	str	r3, [r7, #20]
  404c16:	9201      	str	r2, [sp, #4]
  404c18:	9b01      	ldr	r3, [sp, #4]
  404c1a:	61bb      	str	r3, [r7, #24]
  404c1c:	2b00      	cmp	r3, #0
  404c1e:	bf14      	ite	ne
  404c20:	2102      	movne	r1, #2
  404c22:	2101      	moveq	r1, #1
  404c24:	6139      	str	r1, [r7, #16]
  404c26:	b1c4      	cbz	r4, 404c5a <__d2b+0x88>
  404c28:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  404c2c:	4404      	add	r4, r0
  404c2e:	6034      	str	r4, [r6, #0]
  404c30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  404c34:	6028      	str	r0, [r5, #0]
  404c36:	4638      	mov	r0, r7
  404c38:	b002      	add	sp, #8
  404c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  404c42:	e7d5      	b.n	404bf0 <__d2b+0x1e>
  404c44:	6179      	str	r1, [r7, #20]
  404c46:	e7e7      	b.n	404c18 <__d2b+0x46>
  404c48:	a801      	add	r0, sp, #4
  404c4a:	f7ff fde6 	bl	40481a <__lo0bits>
  404c4e:	9b01      	ldr	r3, [sp, #4]
  404c50:	617b      	str	r3, [r7, #20]
  404c52:	2101      	movs	r1, #1
  404c54:	6139      	str	r1, [r7, #16]
  404c56:	3020      	adds	r0, #32
  404c58:	e7e5      	b.n	404c26 <__d2b+0x54>
  404c5a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  404c5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  404c62:	6030      	str	r0, [r6, #0]
  404c64:	6918      	ldr	r0, [r3, #16]
  404c66:	f7ff fdb9 	bl	4047dc <__hi0bits>
  404c6a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  404c6e:	e7e1      	b.n	404c34 <__d2b+0x62>

00404c70 <_calloc_r>:
  404c70:	b538      	push	{r3, r4, r5, lr}
  404c72:	fb02 f401 	mul.w	r4, r2, r1
  404c76:	4621      	mov	r1, r4
  404c78:	f000 f856 	bl	404d28 <_malloc_r>
  404c7c:	4605      	mov	r5, r0
  404c7e:	b118      	cbz	r0, 404c88 <_calloc_r+0x18>
  404c80:	4622      	mov	r2, r4
  404c82:	2100      	movs	r1, #0
  404c84:	f7fd ff3f 	bl	402b06 <memset>
  404c88:	4628      	mov	r0, r5
  404c8a:	bd38      	pop	{r3, r4, r5, pc}

00404c8c <_free_r>:
  404c8c:	b538      	push	{r3, r4, r5, lr}
  404c8e:	4605      	mov	r5, r0
  404c90:	2900      	cmp	r1, #0
  404c92:	d045      	beq.n	404d20 <_free_r+0x94>
  404c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
  404c98:	1f0c      	subs	r4, r1, #4
  404c9a:	2b00      	cmp	r3, #0
  404c9c:	bfb8      	it	lt
  404c9e:	18e4      	addlt	r4, r4, r3
  404ca0:	f000 fb5a 	bl	405358 <__malloc_lock>
  404ca4:	4a1f      	ldr	r2, [pc, #124]	; (404d24 <_free_r+0x98>)
  404ca6:	6813      	ldr	r3, [r2, #0]
  404ca8:	4610      	mov	r0, r2
  404caa:	b933      	cbnz	r3, 404cba <_free_r+0x2e>
  404cac:	6063      	str	r3, [r4, #4]
  404cae:	6014      	str	r4, [r2, #0]
  404cb0:	4628      	mov	r0, r5
  404cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404cb6:	f000 bb50 	b.w	40535a <__malloc_unlock>
  404cba:	42a3      	cmp	r3, r4
  404cbc:	d90c      	bls.n	404cd8 <_free_r+0x4c>
  404cbe:	6821      	ldr	r1, [r4, #0]
  404cc0:	1862      	adds	r2, r4, r1
  404cc2:	4293      	cmp	r3, r2
  404cc4:	bf04      	itt	eq
  404cc6:	681a      	ldreq	r2, [r3, #0]
  404cc8:	685b      	ldreq	r3, [r3, #4]
  404cca:	6063      	str	r3, [r4, #4]
  404ccc:	bf04      	itt	eq
  404cce:	1852      	addeq	r2, r2, r1
  404cd0:	6022      	streq	r2, [r4, #0]
  404cd2:	6004      	str	r4, [r0, #0]
  404cd4:	e7ec      	b.n	404cb0 <_free_r+0x24>
  404cd6:	4613      	mov	r3, r2
  404cd8:	685a      	ldr	r2, [r3, #4]
  404cda:	b10a      	cbz	r2, 404ce0 <_free_r+0x54>
  404cdc:	42a2      	cmp	r2, r4
  404cde:	d9fa      	bls.n	404cd6 <_free_r+0x4a>
  404ce0:	6819      	ldr	r1, [r3, #0]
  404ce2:	1858      	adds	r0, r3, r1
  404ce4:	42a0      	cmp	r0, r4
  404ce6:	d10b      	bne.n	404d00 <_free_r+0x74>
  404ce8:	6820      	ldr	r0, [r4, #0]
  404cea:	4401      	add	r1, r0
  404cec:	1858      	adds	r0, r3, r1
  404cee:	4282      	cmp	r2, r0
  404cf0:	6019      	str	r1, [r3, #0]
  404cf2:	d1dd      	bne.n	404cb0 <_free_r+0x24>
  404cf4:	6810      	ldr	r0, [r2, #0]
  404cf6:	6852      	ldr	r2, [r2, #4]
  404cf8:	605a      	str	r2, [r3, #4]
  404cfa:	4401      	add	r1, r0
  404cfc:	6019      	str	r1, [r3, #0]
  404cfe:	e7d7      	b.n	404cb0 <_free_r+0x24>
  404d00:	d902      	bls.n	404d08 <_free_r+0x7c>
  404d02:	230c      	movs	r3, #12
  404d04:	602b      	str	r3, [r5, #0]
  404d06:	e7d3      	b.n	404cb0 <_free_r+0x24>
  404d08:	6820      	ldr	r0, [r4, #0]
  404d0a:	1821      	adds	r1, r4, r0
  404d0c:	428a      	cmp	r2, r1
  404d0e:	bf04      	itt	eq
  404d10:	6811      	ldreq	r1, [r2, #0]
  404d12:	6852      	ldreq	r2, [r2, #4]
  404d14:	6062      	str	r2, [r4, #4]
  404d16:	bf04      	itt	eq
  404d18:	1809      	addeq	r1, r1, r0
  404d1a:	6021      	streq	r1, [r4, #0]
  404d1c:	605c      	str	r4, [r3, #4]
  404d1e:	e7c7      	b.n	404cb0 <_free_r+0x24>
  404d20:	bd38      	pop	{r3, r4, r5, pc}
  404d22:	bf00      	nop
  404d24:	204004b4 	.word	0x204004b4

00404d28 <_malloc_r>:
  404d28:	b570      	push	{r4, r5, r6, lr}
  404d2a:	1ccd      	adds	r5, r1, #3
  404d2c:	f025 0503 	bic.w	r5, r5, #3
  404d30:	3508      	adds	r5, #8
  404d32:	2d0c      	cmp	r5, #12
  404d34:	bf38      	it	cc
  404d36:	250c      	movcc	r5, #12
  404d38:	2d00      	cmp	r5, #0
  404d3a:	4606      	mov	r6, r0
  404d3c:	db01      	blt.n	404d42 <_malloc_r+0x1a>
  404d3e:	42a9      	cmp	r1, r5
  404d40:	d903      	bls.n	404d4a <_malloc_r+0x22>
  404d42:	230c      	movs	r3, #12
  404d44:	6033      	str	r3, [r6, #0]
  404d46:	2000      	movs	r0, #0
  404d48:	bd70      	pop	{r4, r5, r6, pc}
  404d4a:	f000 fb05 	bl	405358 <__malloc_lock>
  404d4e:	4a23      	ldr	r2, [pc, #140]	; (404ddc <_malloc_r+0xb4>)
  404d50:	6814      	ldr	r4, [r2, #0]
  404d52:	4621      	mov	r1, r4
  404d54:	b991      	cbnz	r1, 404d7c <_malloc_r+0x54>
  404d56:	4c22      	ldr	r4, [pc, #136]	; (404de0 <_malloc_r+0xb8>)
  404d58:	6823      	ldr	r3, [r4, #0]
  404d5a:	b91b      	cbnz	r3, 404d64 <_malloc_r+0x3c>
  404d5c:	4630      	mov	r0, r6
  404d5e:	f000 f97f 	bl	405060 <_sbrk_r>
  404d62:	6020      	str	r0, [r4, #0]
  404d64:	4629      	mov	r1, r5
  404d66:	4630      	mov	r0, r6
  404d68:	f000 f97a 	bl	405060 <_sbrk_r>
  404d6c:	1c43      	adds	r3, r0, #1
  404d6e:	d126      	bne.n	404dbe <_malloc_r+0x96>
  404d70:	230c      	movs	r3, #12
  404d72:	6033      	str	r3, [r6, #0]
  404d74:	4630      	mov	r0, r6
  404d76:	f000 faf0 	bl	40535a <__malloc_unlock>
  404d7a:	e7e4      	b.n	404d46 <_malloc_r+0x1e>
  404d7c:	680b      	ldr	r3, [r1, #0]
  404d7e:	1b5b      	subs	r3, r3, r5
  404d80:	d41a      	bmi.n	404db8 <_malloc_r+0x90>
  404d82:	2b0b      	cmp	r3, #11
  404d84:	d90f      	bls.n	404da6 <_malloc_r+0x7e>
  404d86:	600b      	str	r3, [r1, #0]
  404d88:	50cd      	str	r5, [r1, r3]
  404d8a:	18cc      	adds	r4, r1, r3
  404d8c:	4630      	mov	r0, r6
  404d8e:	f000 fae4 	bl	40535a <__malloc_unlock>
  404d92:	f104 000b 	add.w	r0, r4, #11
  404d96:	1d23      	adds	r3, r4, #4
  404d98:	f020 0007 	bic.w	r0, r0, #7
  404d9c:	1ac3      	subs	r3, r0, r3
  404d9e:	d01b      	beq.n	404dd8 <_malloc_r+0xb0>
  404da0:	425a      	negs	r2, r3
  404da2:	50e2      	str	r2, [r4, r3]
  404da4:	bd70      	pop	{r4, r5, r6, pc}
  404da6:	428c      	cmp	r4, r1
  404da8:	bf0d      	iteet	eq
  404daa:	6863      	ldreq	r3, [r4, #4]
  404dac:	684b      	ldrne	r3, [r1, #4]
  404dae:	6063      	strne	r3, [r4, #4]
  404db0:	6013      	streq	r3, [r2, #0]
  404db2:	bf18      	it	ne
  404db4:	460c      	movne	r4, r1
  404db6:	e7e9      	b.n	404d8c <_malloc_r+0x64>
  404db8:	460c      	mov	r4, r1
  404dba:	6849      	ldr	r1, [r1, #4]
  404dbc:	e7ca      	b.n	404d54 <_malloc_r+0x2c>
  404dbe:	1cc4      	adds	r4, r0, #3
  404dc0:	f024 0403 	bic.w	r4, r4, #3
  404dc4:	42a0      	cmp	r0, r4
  404dc6:	d005      	beq.n	404dd4 <_malloc_r+0xac>
  404dc8:	1a21      	subs	r1, r4, r0
  404dca:	4630      	mov	r0, r6
  404dcc:	f000 f948 	bl	405060 <_sbrk_r>
  404dd0:	3001      	adds	r0, #1
  404dd2:	d0cd      	beq.n	404d70 <_malloc_r+0x48>
  404dd4:	6025      	str	r5, [r4, #0]
  404dd6:	e7d9      	b.n	404d8c <_malloc_r+0x64>
  404dd8:	bd70      	pop	{r4, r5, r6, pc}
  404dda:	bf00      	nop
  404ddc:	204004b4 	.word	0x204004b4
  404de0:	204004b8 	.word	0x204004b8

00404de4 <__sfputc_r>:
  404de4:	6893      	ldr	r3, [r2, #8]
  404de6:	3b01      	subs	r3, #1
  404de8:	2b00      	cmp	r3, #0
  404dea:	b410      	push	{r4}
  404dec:	6093      	str	r3, [r2, #8]
  404dee:	da08      	bge.n	404e02 <__sfputc_r+0x1e>
  404df0:	6994      	ldr	r4, [r2, #24]
  404df2:	42a3      	cmp	r3, r4
  404df4:	db02      	blt.n	404dfc <__sfputc_r+0x18>
  404df6:	b2cb      	uxtb	r3, r1
  404df8:	2b0a      	cmp	r3, #10
  404dfa:	d102      	bne.n	404e02 <__sfputc_r+0x1e>
  404dfc:	bc10      	pop	{r4}
  404dfe:	f000 b983 	b.w	405108 <__swbuf_r>
  404e02:	6813      	ldr	r3, [r2, #0]
  404e04:	1c58      	adds	r0, r3, #1
  404e06:	6010      	str	r0, [r2, #0]
  404e08:	7019      	strb	r1, [r3, #0]
  404e0a:	b2c8      	uxtb	r0, r1
  404e0c:	bc10      	pop	{r4}
  404e0e:	4770      	bx	lr

00404e10 <__sfputs_r>:
  404e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404e12:	4606      	mov	r6, r0
  404e14:	460f      	mov	r7, r1
  404e16:	4614      	mov	r4, r2
  404e18:	18d5      	adds	r5, r2, r3
  404e1a:	42ac      	cmp	r4, r5
  404e1c:	d101      	bne.n	404e22 <__sfputs_r+0x12>
  404e1e:	2000      	movs	r0, #0
  404e20:	e007      	b.n	404e32 <__sfputs_r+0x22>
  404e22:	463a      	mov	r2, r7
  404e24:	f814 1b01 	ldrb.w	r1, [r4], #1
  404e28:	4630      	mov	r0, r6
  404e2a:	f7ff ffdb 	bl	404de4 <__sfputc_r>
  404e2e:	1c43      	adds	r3, r0, #1
  404e30:	d1f3      	bne.n	404e1a <__sfputs_r+0xa>
  404e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00404e34 <_vfiprintf_r>:
  404e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e38:	b09d      	sub	sp, #116	; 0x74
  404e3a:	460c      	mov	r4, r1
  404e3c:	4617      	mov	r7, r2
  404e3e:	9303      	str	r3, [sp, #12]
  404e40:	4606      	mov	r6, r0
  404e42:	b118      	cbz	r0, 404e4c <_vfiprintf_r+0x18>
  404e44:	6983      	ldr	r3, [r0, #24]
  404e46:	b90b      	cbnz	r3, 404e4c <_vfiprintf_r+0x18>
  404e48:	f7ff faea 	bl	404420 <__sinit>
  404e4c:	4b7c      	ldr	r3, [pc, #496]	; (405040 <_vfiprintf_r+0x20c>)
  404e4e:	429c      	cmp	r4, r3
  404e50:	d157      	bne.n	404f02 <_vfiprintf_r+0xce>
  404e52:	6874      	ldr	r4, [r6, #4]
  404e54:	89a3      	ldrh	r3, [r4, #12]
  404e56:	0718      	lsls	r0, r3, #28
  404e58:	d55d      	bpl.n	404f16 <_vfiprintf_r+0xe2>
  404e5a:	6923      	ldr	r3, [r4, #16]
  404e5c:	2b00      	cmp	r3, #0
  404e5e:	d05a      	beq.n	404f16 <_vfiprintf_r+0xe2>
  404e60:	2300      	movs	r3, #0
  404e62:	9309      	str	r3, [sp, #36]	; 0x24
  404e64:	2320      	movs	r3, #32
  404e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  404e6a:	2330      	movs	r3, #48	; 0x30
  404e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  404e70:	f04f 0b01 	mov.w	fp, #1
  404e74:	46b8      	mov	r8, r7
  404e76:	4645      	mov	r5, r8
  404e78:	f815 3b01 	ldrb.w	r3, [r5], #1
  404e7c:	2b00      	cmp	r3, #0
  404e7e:	d155      	bne.n	404f2c <_vfiprintf_r+0xf8>
  404e80:	ebb8 0a07 	subs.w	sl, r8, r7
  404e84:	d00b      	beq.n	404e9e <_vfiprintf_r+0x6a>
  404e86:	4653      	mov	r3, sl
  404e88:	463a      	mov	r2, r7
  404e8a:	4621      	mov	r1, r4
  404e8c:	4630      	mov	r0, r6
  404e8e:	f7ff ffbf 	bl	404e10 <__sfputs_r>
  404e92:	3001      	adds	r0, #1
  404e94:	f000 80c4 	beq.w	405020 <_vfiprintf_r+0x1ec>
  404e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404e9a:	4453      	add	r3, sl
  404e9c:	9309      	str	r3, [sp, #36]	; 0x24
  404e9e:	f898 3000 	ldrb.w	r3, [r8]
  404ea2:	2b00      	cmp	r3, #0
  404ea4:	f000 80bc 	beq.w	405020 <_vfiprintf_r+0x1ec>
  404ea8:	2300      	movs	r3, #0
  404eaa:	f04f 32ff 	mov.w	r2, #4294967295
  404eae:	9304      	str	r3, [sp, #16]
  404eb0:	9307      	str	r3, [sp, #28]
  404eb2:	9205      	str	r2, [sp, #20]
  404eb4:	9306      	str	r3, [sp, #24]
  404eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  404eba:	931a      	str	r3, [sp, #104]	; 0x68
  404ebc:	2205      	movs	r2, #5
  404ebe:	7829      	ldrb	r1, [r5, #0]
  404ec0:	4860      	ldr	r0, [pc, #384]	; (405044 <_vfiprintf_r+0x210>)
  404ec2:	f7ff fbb5 	bl	404630 <memchr>
  404ec6:	f105 0801 	add.w	r8, r5, #1
  404eca:	9b04      	ldr	r3, [sp, #16]
  404ecc:	2800      	cmp	r0, #0
  404ece:	d131      	bne.n	404f34 <_vfiprintf_r+0x100>
  404ed0:	06d9      	lsls	r1, r3, #27
  404ed2:	bf44      	itt	mi
  404ed4:	2220      	movmi	r2, #32
  404ed6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404eda:	071a      	lsls	r2, r3, #28
  404edc:	bf44      	itt	mi
  404ede:	222b      	movmi	r2, #43	; 0x2b
  404ee0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404ee4:	782a      	ldrb	r2, [r5, #0]
  404ee6:	2a2a      	cmp	r2, #42	; 0x2a
  404ee8:	d02c      	beq.n	404f44 <_vfiprintf_r+0x110>
  404eea:	9a07      	ldr	r2, [sp, #28]
  404eec:	2100      	movs	r1, #0
  404eee:	200a      	movs	r0, #10
  404ef0:	46a8      	mov	r8, r5
  404ef2:	3501      	adds	r5, #1
  404ef4:	f898 3000 	ldrb.w	r3, [r8]
  404ef8:	3b30      	subs	r3, #48	; 0x30
  404efa:	2b09      	cmp	r3, #9
  404efc:	d96d      	bls.n	404fda <_vfiprintf_r+0x1a6>
  404efe:	b371      	cbz	r1, 404f5e <_vfiprintf_r+0x12a>
  404f00:	e026      	b.n	404f50 <_vfiprintf_r+0x11c>
  404f02:	4b51      	ldr	r3, [pc, #324]	; (405048 <_vfiprintf_r+0x214>)
  404f04:	429c      	cmp	r4, r3
  404f06:	d101      	bne.n	404f0c <_vfiprintf_r+0xd8>
  404f08:	68b4      	ldr	r4, [r6, #8]
  404f0a:	e7a3      	b.n	404e54 <_vfiprintf_r+0x20>
  404f0c:	4b4f      	ldr	r3, [pc, #316]	; (40504c <_vfiprintf_r+0x218>)
  404f0e:	429c      	cmp	r4, r3
  404f10:	bf08      	it	eq
  404f12:	68f4      	ldreq	r4, [r6, #12]
  404f14:	e79e      	b.n	404e54 <_vfiprintf_r+0x20>
  404f16:	4621      	mov	r1, r4
  404f18:	4630      	mov	r0, r6
  404f1a:	f000 f959 	bl	4051d0 <__swsetup_r>
  404f1e:	2800      	cmp	r0, #0
  404f20:	d09e      	beq.n	404e60 <_vfiprintf_r+0x2c>
  404f22:	f04f 30ff 	mov.w	r0, #4294967295
  404f26:	b01d      	add	sp, #116	; 0x74
  404f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f2c:	2b25      	cmp	r3, #37	; 0x25
  404f2e:	d0a7      	beq.n	404e80 <_vfiprintf_r+0x4c>
  404f30:	46a8      	mov	r8, r5
  404f32:	e7a0      	b.n	404e76 <_vfiprintf_r+0x42>
  404f34:	4a43      	ldr	r2, [pc, #268]	; (405044 <_vfiprintf_r+0x210>)
  404f36:	1a80      	subs	r0, r0, r2
  404f38:	fa0b f000 	lsl.w	r0, fp, r0
  404f3c:	4318      	orrs	r0, r3
  404f3e:	9004      	str	r0, [sp, #16]
  404f40:	4645      	mov	r5, r8
  404f42:	e7bb      	b.n	404ebc <_vfiprintf_r+0x88>
  404f44:	9a03      	ldr	r2, [sp, #12]
  404f46:	1d11      	adds	r1, r2, #4
  404f48:	6812      	ldr	r2, [r2, #0]
  404f4a:	9103      	str	r1, [sp, #12]
  404f4c:	2a00      	cmp	r2, #0
  404f4e:	db01      	blt.n	404f54 <_vfiprintf_r+0x120>
  404f50:	9207      	str	r2, [sp, #28]
  404f52:	e004      	b.n	404f5e <_vfiprintf_r+0x12a>
  404f54:	4252      	negs	r2, r2
  404f56:	f043 0302 	orr.w	r3, r3, #2
  404f5a:	9207      	str	r2, [sp, #28]
  404f5c:	9304      	str	r3, [sp, #16]
  404f5e:	f898 3000 	ldrb.w	r3, [r8]
  404f62:	2b2e      	cmp	r3, #46	; 0x2e
  404f64:	d110      	bne.n	404f88 <_vfiprintf_r+0x154>
  404f66:	f898 3001 	ldrb.w	r3, [r8, #1]
  404f6a:	2b2a      	cmp	r3, #42	; 0x2a
  404f6c:	f108 0101 	add.w	r1, r8, #1
  404f70:	d137      	bne.n	404fe2 <_vfiprintf_r+0x1ae>
  404f72:	9b03      	ldr	r3, [sp, #12]
  404f74:	1d1a      	adds	r2, r3, #4
  404f76:	681b      	ldr	r3, [r3, #0]
  404f78:	9203      	str	r2, [sp, #12]
  404f7a:	2b00      	cmp	r3, #0
  404f7c:	bfb8      	it	lt
  404f7e:	f04f 33ff 	movlt.w	r3, #4294967295
  404f82:	f108 0802 	add.w	r8, r8, #2
  404f86:	9305      	str	r3, [sp, #20]
  404f88:	4d31      	ldr	r5, [pc, #196]	; (405050 <_vfiprintf_r+0x21c>)
  404f8a:	f898 1000 	ldrb.w	r1, [r8]
  404f8e:	2203      	movs	r2, #3
  404f90:	4628      	mov	r0, r5
  404f92:	f7ff fb4d 	bl	404630 <memchr>
  404f96:	b140      	cbz	r0, 404faa <_vfiprintf_r+0x176>
  404f98:	2340      	movs	r3, #64	; 0x40
  404f9a:	1b40      	subs	r0, r0, r5
  404f9c:	fa03 f000 	lsl.w	r0, r3, r0
  404fa0:	9b04      	ldr	r3, [sp, #16]
  404fa2:	4303      	orrs	r3, r0
  404fa4:	9304      	str	r3, [sp, #16]
  404fa6:	f108 0801 	add.w	r8, r8, #1
  404faa:	f898 1000 	ldrb.w	r1, [r8]
  404fae:	4829      	ldr	r0, [pc, #164]	; (405054 <_vfiprintf_r+0x220>)
  404fb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  404fb4:	2206      	movs	r2, #6
  404fb6:	f108 0701 	add.w	r7, r8, #1
  404fba:	f7ff fb39 	bl	404630 <memchr>
  404fbe:	2800      	cmp	r0, #0
  404fc0:	d034      	beq.n	40502c <_vfiprintf_r+0x1f8>
  404fc2:	4b25      	ldr	r3, [pc, #148]	; (405058 <_vfiprintf_r+0x224>)
  404fc4:	bb03      	cbnz	r3, 405008 <_vfiprintf_r+0x1d4>
  404fc6:	9b03      	ldr	r3, [sp, #12]
  404fc8:	3307      	adds	r3, #7
  404fca:	f023 0307 	bic.w	r3, r3, #7
  404fce:	3308      	adds	r3, #8
  404fd0:	9303      	str	r3, [sp, #12]
  404fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404fd4:	444b      	add	r3, r9
  404fd6:	9309      	str	r3, [sp, #36]	; 0x24
  404fd8:	e74c      	b.n	404e74 <_vfiprintf_r+0x40>
  404fda:	fb00 3202 	mla	r2, r0, r2, r3
  404fde:	2101      	movs	r1, #1
  404fe0:	e786      	b.n	404ef0 <_vfiprintf_r+0xbc>
  404fe2:	2300      	movs	r3, #0
  404fe4:	9305      	str	r3, [sp, #20]
  404fe6:	4618      	mov	r0, r3
  404fe8:	250a      	movs	r5, #10
  404fea:	4688      	mov	r8, r1
  404fec:	3101      	adds	r1, #1
  404fee:	f898 2000 	ldrb.w	r2, [r8]
  404ff2:	3a30      	subs	r2, #48	; 0x30
  404ff4:	2a09      	cmp	r2, #9
  404ff6:	d903      	bls.n	405000 <_vfiprintf_r+0x1cc>
  404ff8:	2b00      	cmp	r3, #0
  404ffa:	d0c5      	beq.n	404f88 <_vfiprintf_r+0x154>
  404ffc:	9005      	str	r0, [sp, #20]
  404ffe:	e7c3      	b.n	404f88 <_vfiprintf_r+0x154>
  405000:	fb05 2000 	mla	r0, r5, r0, r2
  405004:	2301      	movs	r3, #1
  405006:	e7f0      	b.n	404fea <_vfiprintf_r+0x1b6>
  405008:	ab03      	add	r3, sp, #12
  40500a:	9300      	str	r3, [sp, #0]
  40500c:	4622      	mov	r2, r4
  40500e:	4b13      	ldr	r3, [pc, #76]	; (40505c <_vfiprintf_r+0x228>)
  405010:	a904      	add	r1, sp, #16
  405012:	4630      	mov	r0, r6
  405014:	f7fd fe10 	bl	402c38 <_printf_float>
  405018:	f1b0 3fff 	cmp.w	r0, #4294967295
  40501c:	4681      	mov	r9, r0
  40501e:	d1d8      	bne.n	404fd2 <_vfiprintf_r+0x19e>
  405020:	89a3      	ldrh	r3, [r4, #12]
  405022:	065b      	lsls	r3, r3, #25
  405024:	f53f af7d 	bmi.w	404f22 <_vfiprintf_r+0xee>
  405028:	9809      	ldr	r0, [sp, #36]	; 0x24
  40502a:	e77c      	b.n	404f26 <_vfiprintf_r+0xf2>
  40502c:	ab03      	add	r3, sp, #12
  40502e:	9300      	str	r3, [sp, #0]
  405030:	4622      	mov	r2, r4
  405032:	4b0a      	ldr	r3, [pc, #40]	; (40505c <_vfiprintf_r+0x228>)
  405034:	a904      	add	r1, sp, #16
  405036:	4630      	mov	r0, r6
  405038:	f7fe f8ac 	bl	403194 <_printf_i>
  40503c:	e7ec      	b.n	405018 <_vfiprintf_r+0x1e4>
  40503e:	bf00      	nop
  405040:	00405838 	.word	0x00405838
  405044:	00405974 	.word	0x00405974
  405048:	00405858 	.word	0x00405858
  40504c:	00405818 	.word	0x00405818
  405050:	0040597a 	.word	0x0040597a
  405054:	0040597e 	.word	0x0040597e
  405058:	00402c39 	.word	0x00402c39
  40505c:	00404e11 	.word	0x00404e11

00405060 <_sbrk_r>:
  405060:	b538      	push	{r3, r4, r5, lr}
  405062:	4c06      	ldr	r4, [pc, #24]	; (40507c <_sbrk_r+0x1c>)
  405064:	2300      	movs	r3, #0
  405066:	4605      	mov	r5, r0
  405068:	4608      	mov	r0, r1
  40506a:	6023      	str	r3, [r4, #0]
  40506c:	f7fc f86c 	bl	401148 <_sbrk>
  405070:	1c43      	adds	r3, r0, #1
  405072:	d102      	bne.n	40507a <_sbrk_r+0x1a>
  405074:	6823      	ldr	r3, [r4, #0]
  405076:	b103      	cbz	r3, 40507a <_sbrk_r+0x1a>
  405078:	602b      	str	r3, [r5, #0]
  40507a:	bd38      	pop	{r3, r4, r5, pc}
  40507c:	204006a8 	.word	0x204006a8

00405080 <__sread>:
  405080:	b510      	push	{r4, lr}
  405082:	460c      	mov	r4, r1
  405084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405088:	f000 f968 	bl	40535c <_read_r>
  40508c:	2800      	cmp	r0, #0
  40508e:	bfab      	itete	ge
  405090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  405092:	89a3      	ldrhlt	r3, [r4, #12]
  405094:	181b      	addge	r3, r3, r0
  405096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  40509a:	bfac      	ite	ge
  40509c:	6563      	strge	r3, [r4, #84]	; 0x54
  40509e:	81a3      	strhlt	r3, [r4, #12]
  4050a0:	bd10      	pop	{r4, pc}

004050a2 <__swrite>:
  4050a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4050a6:	461f      	mov	r7, r3
  4050a8:	898b      	ldrh	r3, [r1, #12]
  4050aa:	05db      	lsls	r3, r3, #23
  4050ac:	4605      	mov	r5, r0
  4050ae:	460c      	mov	r4, r1
  4050b0:	4616      	mov	r6, r2
  4050b2:	d505      	bpl.n	4050c0 <__swrite+0x1e>
  4050b4:	2302      	movs	r3, #2
  4050b6:	2200      	movs	r2, #0
  4050b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4050bc:	f000 f928 	bl	405310 <_lseek_r>
  4050c0:	89a3      	ldrh	r3, [r4, #12]
  4050c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4050c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4050ca:	81a3      	strh	r3, [r4, #12]
  4050cc:	4632      	mov	r2, r6
  4050ce:	463b      	mov	r3, r7
  4050d0:	4628      	mov	r0, r5
  4050d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4050d6:	f000 b869 	b.w	4051ac <_write_r>

004050da <__sseek>:
  4050da:	b510      	push	{r4, lr}
  4050dc:	460c      	mov	r4, r1
  4050de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4050e2:	f000 f915 	bl	405310 <_lseek_r>
  4050e6:	1c43      	adds	r3, r0, #1
  4050e8:	89a3      	ldrh	r3, [r4, #12]
  4050ea:	bf15      	itete	ne
  4050ec:	6560      	strne	r0, [r4, #84]	; 0x54
  4050ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4050f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4050f6:	81a3      	strheq	r3, [r4, #12]
  4050f8:	bf18      	it	ne
  4050fa:	81a3      	strhne	r3, [r4, #12]
  4050fc:	bd10      	pop	{r4, pc}

004050fe <__sclose>:
  4050fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405102:	f000 b8d3 	b.w	4052ac <_close_r>
	...

00405108 <__swbuf_r>:
  405108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40510a:	460e      	mov	r6, r1
  40510c:	4614      	mov	r4, r2
  40510e:	4605      	mov	r5, r0
  405110:	b118      	cbz	r0, 40511a <__swbuf_r+0x12>
  405112:	6983      	ldr	r3, [r0, #24]
  405114:	b90b      	cbnz	r3, 40511a <__swbuf_r+0x12>
  405116:	f7ff f983 	bl	404420 <__sinit>
  40511a:	4b21      	ldr	r3, [pc, #132]	; (4051a0 <__swbuf_r+0x98>)
  40511c:	429c      	cmp	r4, r3
  40511e:	d12a      	bne.n	405176 <__swbuf_r+0x6e>
  405120:	686c      	ldr	r4, [r5, #4]
  405122:	69a3      	ldr	r3, [r4, #24]
  405124:	60a3      	str	r3, [r4, #8]
  405126:	89a3      	ldrh	r3, [r4, #12]
  405128:	071a      	lsls	r2, r3, #28
  40512a:	d52e      	bpl.n	40518a <__swbuf_r+0x82>
  40512c:	6923      	ldr	r3, [r4, #16]
  40512e:	b363      	cbz	r3, 40518a <__swbuf_r+0x82>
  405130:	6923      	ldr	r3, [r4, #16]
  405132:	6820      	ldr	r0, [r4, #0]
  405134:	1ac0      	subs	r0, r0, r3
  405136:	6963      	ldr	r3, [r4, #20]
  405138:	b2f6      	uxtb	r6, r6
  40513a:	4298      	cmp	r0, r3
  40513c:	4637      	mov	r7, r6
  40513e:	db04      	blt.n	40514a <__swbuf_r+0x42>
  405140:	4621      	mov	r1, r4
  405142:	4628      	mov	r0, r5
  405144:	f7ff f902 	bl	40434c <_fflush_r>
  405148:	bb28      	cbnz	r0, 405196 <__swbuf_r+0x8e>
  40514a:	68a3      	ldr	r3, [r4, #8]
  40514c:	3b01      	subs	r3, #1
  40514e:	60a3      	str	r3, [r4, #8]
  405150:	6823      	ldr	r3, [r4, #0]
  405152:	1c5a      	adds	r2, r3, #1
  405154:	6022      	str	r2, [r4, #0]
  405156:	701e      	strb	r6, [r3, #0]
  405158:	6963      	ldr	r3, [r4, #20]
  40515a:	3001      	adds	r0, #1
  40515c:	4298      	cmp	r0, r3
  40515e:	d004      	beq.n	40516a <__swbuf_r+0x62>
  405160:	89a3      	ldrh	r3, [r4, #12]
  405162:	07db      	lsls	r3, r3, #31
  405164:	d519      	bpl.n	40519a <__swbuf_r+0x92>
  405166:	2e0a      	cmp	r6, #10
  405168:	d117      	bne.n	40519a <__swbuf_r+0x92>
  40516a:	4621      	mov	r1, r4
  40516c:	4628      	mov	r0, r5
  40516e:	f7ff f8ed 	bl	40434c <_fflush_r>
  405172:	b190      	cbz	r0, 40519a <__swbuf_r+0x92>
  405174:	e00f      	b.n	405196 <__swbuf_r+0x8e>
  405176:	4b0b      	ldr	r3, [pc, #44]	; (4051a4 <__swbuf_r+0x9c>)
  405178:	429c      	cmp	r4, r3
  40517a:	d101      	bne.n	405180 <__swbuf_r+0x78>
  40517c:	68ac      	ldr	r4, [r5, #8]
  40517e:	e7d0      	b.n	405122 <__swbuf_r+0x1a>
  405180:	4b09      	ldr	r3, [pc, #36]	; (4051a8 <__swbuf_r+0xa0>)
  405182:	429c      	cmp	r4, r3
  405184:	bf08      	it	eq
  405186:	68ec      	ldreq	r4, [r5, #12]
  405188:	e7cb      	b.n	405122 <__swbuf_r+0x1a>
  40518a:	4621      	mov	r1, r4
  40518c:	4628      	mov	r0, r5
  40518e:	f000 f81f 	bl	4051d0 <__swsetup_r>
  405192:	2800      	cmp	r0, #0
  405194:	d0cc      	beq.n	405130 <__swbuf_r+0x28>
  405196:	f04f 37ff 	mov.w	r7, #4294967295
  40519a:	4638      	mov	r0, r7
  40519c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40519e:	bf00      	nop
  4051a0:	00405838 	.word	0x00405838
  4051a4:	00405858 	.word	0x00405858
  4051a8:	00405818 	.word	0x00405818

004051ac <_write_r>:
  4051ac:	b538      	push	{r3, r4, r5, lr}
  4051ae:	4c07      	ldr	r4, [pc, #28]	; (4051cc <_write_r+0x20>)
  4051b0:	4605      	mov	r5, r0
  4051b2:	4608      	mov	r0, r1
  4051b4:	4611      	mov	r1, r2
  4051b6:	2200      	movs	r2, #0
  4051b8:	6022      	str	r2, [r4, #0]
  4051ba:	461a      	mov	r2, r3
  4051bc:	f7fc ff9c 	bl	4020f8 <_write>
  4051c0:	1c43      	adds	r3, r0, #1
  4051c2:	d102      	bne.n	4051ca <_write_r+0x1e>
  4051c4:	6823      	ldr	r3, [r4, #0]
  4051c6:	b103      	cbz	r3, 4051ca <_write_r+0x1e>
  4051c8:	602b      	str	r3, [r5, #0]
  4051ca:	bd38      	pop	{r3, r4, r5, pc}
  4051cc:	204006a8 	.word	0x204006a8

004051d0 <__swsetup_r>:
  4051d0:	4b32      	ldr	r3, [pc, #200]	; (40529c <__swsetup_r+0xcc>)
  4051d2:	b570      	push	{r4, r5, r6, lr}
  4051d4:	681d      	ldr	r5, [r3, #0]
  4051d6:	4606      	mov	r6, r0
  4051d8:	460c      	mov	r4, r1
  4051da:	b125      	cbz	r5, 4051e6 <__swsetup_r+0x16>
  4051dc:	69ab      	ldr	r3, [r5, #24]
  4051de:	b913      	cbnz	r3, 4051e6 <__swsetup_r+0x16>
  4051e0:	4628      	mov	r0, r5
  4051e2:	f7ff f91d 	bl	404420 <__sinit>
  4051e6:	4b2e      	ldr	r3, [pc, #184]	; (4052a0 <__swsetup_r+0xd0>)
  4051e8:	429c      	cmp	r4, r3
  4051ea:	d10f      	bne.n	40520c <__swsetup_r+0x3c>
  4051ec:	686c      	ldr	r4, [r5, #4]
  4051ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4051f2:	b29a      	uxth	r2, r3
  4051f4:	0715      	lsls	r5, r2, #28
  4051f6:	d42c      	bmi.n	405252 <__swsetup_r+0x82>
  4051f8:	06d0      	lsls	r0, r2, #27
  4051fa:	d411      	bmi.n	405220 <__swsetup_r+0x50>
  4051fc:	2209      	movs	r2, #9
  4051fe:	6032      	str	r2, [r6, #0]
  405200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405204:	81a3      	strh	r3, [r4, #12]
  405206:	f04f 30ff 	mov.w	r0, #4294967295
  40520a:	bd70      	pop	{r4, r5, r6, pc}
  40520c:	4b25      	ldr	r3, [pc, #148]	; (4052a4 <__swsetup_r+0xd4>)
  40520e:	429c      	cmp	r4, r3
  405210:	d101      	bne.n	405216 <__swsetup_r+0x46>
  405212:	68ac      	ldr	r4, [r5, #8]
  405214:	e7eb      	b.n	4051ee <__swsetup_r+0x1e>
  405216:	4b24      	ldr	r3, [pc, #144]	; (4052a8 <__swsetup_r+0xd8>)
  405218:	429c      	cmp	r4, r3
  40521a:	bf08      	it	eq
  40521c:	68ec      	ldreq	r4, [r5, #12]
  40521e:	e7e6      	b.n	4051ee <__swsetup_r+0x1e>
  405220:	0751      	lsls	r1, r2, #29
  405222:	d512      	bpl.n	40524a <__swsetup_r+0x7a>
  405224:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405226:	b141      	cbz	r1, 40523a <__swsetup_r+0x6a>
  405228:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40522c:	4299      	cmp	r1, r3
  40522e:	d002      	beq.n	405236 <__swsetup_r+0x66>
  405230:	4630      	mov	r0, r6
  405232:	f7ff fd2b 	bl	404c8c <_free_r>
  405236:	2300      	movs	r3, #0
  405238:	6363      	str	r3, [r4, #52]	; 0x34
  40523a:	89a3      	ldrh	r3, [r4, #12]
  40523c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  405240:	81a3      	strh	r3, [r4, #12]
  405242:	2300      	movs	r3, #0
  405244:	6063      	str	r3, [r4, #4]
  405246:	6923      	ldr	r3, [r4, #16]
  405248:	6023      	str	r3, [r4, #0]
  40524a:	89a3      	ldrh	r3, [r4, #12]
  40524c:	f043 0308 	orr.w	r3, r3, #8
  405250:	81a3      	strh	r3, [r4, #12]
  405252:	6923      	ldr	r3, [r4, #16]
  405254:	b94b      	cbnz	r3, 40526a <__swsetup_r+0x9a>
  405256:	89a3      	ldrh	r3, [r4, #12]
  405258:	f403 7320 	and.w	r3, r3, #640	; 0x280
  40525c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405260:	d003      	beq.n	40526a <__swsetup_r+0x9a>
  405262:	4621      	mov	r1, r4
  405264:	4630      	mov	r0, r6
  405266:	f7ff f997 	bl	404598 <__smakebuf_r>
  40526a:	89a2      	ldrh	r2, [r4, #12]
  40526c:	f012 0301 	ands.w	r3, r2, #1
  405270:	d00c      	beq.n	40528c <__swsetup_r+0xbc>
  405272:	2300      	movs	r3, #0
  405274:	60a3      	str	r3, [r4, #8]
  405276:	6963      	ldr	r3, [r4, #20]
  405278:	425b      	negs	r3, r3
  40527a:	61a3      	str	r3, [r4, #24]
  40527c:	6923      	ldr	r3, [r4, #16]
  40527e:	b953      	cbnz	r3, 405296 <__swsetup_r+0xc6>
  405280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405284:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  405288:	d1ba      	bne.n	405200 <__swsetup_r+0x30>
  40528a:	bd70      	pop	{r4, r5, r6, pc}
  40528c:	0792      	lsls	r2, r2, #30
  40528e:	bf58      	it	pl
  405290:	6963      	ldrpl	r3, [r4, #20]
  405292:	60a3      	str	r3, [r4, #8]
  405294:	e7f2      	b.n	40527c <__swsetup_r+0xac>
  405296:	2000      	movs	r0, #0
  405298:	e7f7      	b.n	40528a <__swsetup_r+0xba>
  40529a:	bf00      	nop
  40529c:	20400048 	.word	0x20400048
  4052a0:	00405838 	.word	0x00405838
  4052a4:	00405858 	.word	0x00405858
  4052a8:	00405818 	.word	0x00405818

004052ac <_close_r>:
  4052ac:	b538      	push	{r3, r4, r5, lr}
  4052ae:	4c06      	ldr	r4, [pc, #24]	; (4052c8 <_close_r+0x1c>)
  4052b0:	2300      	movs	r3, #0
  4052b2:	4605      	mov	r5, r0
  4052b4:	4608      	mov	r0, r1
  4052b6:	6023      	str	r3, [r4, #0]
  4052b8:	f7fb ff58 	bl	40116c <_close>
  4052bc:	1c43      	adds	r3, r0, #1
  4052be:	d102      	bne.n	4052c6 <_close_r+0x1a>
  4052c0:	6823      	ldr	r3, [r4, #0]
  4052c2:	b103      	cbz	r3, 4052c6 <_close_r+0x1a>
  4052c4:	602b      	str	r3, [r5, #0]
  4052c6:	bd38      	pop	{r3, r4, r5, pc}
  4052c8:	204006a8 	.word	0x204006a8

004052cc <_fstat_r>:
  4052cc:	b538      	push	{r3, r4, r5, lr}
  4052ce:	4c07      	ldr	r4, [pc, #28]	; (4052ec <_fstat_r+0x20>)
  4052d0:	2300      	movs	r3, #0
  4052d2:	4605      	mov	r5, r0
  4052d4:	4608      	mov	r0, r1
  4052d6:	4611      	mov	r1, r2
  4052d8:	6023      	str	r3, [r4, #0]
  4052da:	f7fb ff4a 	bl	401172 <_fstat>
  4052de:	1c43      	adds	r3, r0, #1
  4052e0:	d102      	bne.n	4052e8 <_fstat_r+0x1c>
  4052e2:	6823      	ldr	r3, [r4, #0]
  4052e4:	b103      	cbz	r3, 4052e8 <_fstat_r+0x1c>
  4052e6:	602b      	str	r3, [r5, #0]
  4052e8:	bd38      	pop	{r3, r4, r5, pc}
  4052ea:	bf00      	nop
  4052ec:	204006a8 	.word	0x204006a8

004052f0 <_isatty_r>:
  4052f0:	b538      	push	{r3, r4, r5, lr}
  4052f2:	4c06      	ldr	r4, [pc, #24]	; (40530c <_isatty_r+0x1c>)
  4052f4:	2300      	movs	r3, #0
  4052f6:	4605      	mov	r5, r0
  4052f8:	4608      	mov	r0, r1
  4052fa:	6023      	str	r3, [r4, #0]
  4052fc:	f7fb ff3e 	bl	40117c <_isatty>
  405300:	1c43      	adds	r3, r0, #1
  405302:	d102      	bne.n	40530a <_isatty_r+0x1a>
  405304:	6823      	ldr	r3, [r4, #0]
  405306:	b103      	cbz	r3, 40530a <_isatty_r+0x1a>
  405308:	602b      	str	r3, [r5, #0]
  40530a:	bd38      	pop	{r3, r4, r5, pc}
  40530c:	204006a8 	.word	0x204006a8

00405310 <_lseek_r>:
  405310:	b538      	push	{r3, r4, r5, lr}
  405312:	4c07      	ldr	r4, [pc, #28]	; (405330 <_lseek_r+0x20>)
  405314:	4605      	mov	r5, r0
  405316:	4608      	mov	r0, r1
  405318:	4611      	mov	r1, r2
  40531a:	2200      	movs	r2, #0
  40531c:	6022      	str	r2, [r4, #0]
  40531e:	461a      	mov	r2, r3
  405320:	f7fb ff2e 	bl	401180 <_lseek>
  405324:	1c43      	adds	r3, r0, #1
  405326:	d102      	bne.n	40532e <_lseek_r+0x1e>
  405328:	6823      	ldr	r3, [r4, #0]
  40532a:	b103      	cbz	r3, 40532e <_lseek_r+0x1e>
  40532c:	602b      	str	r3, [r5, #0]
  40532e:	bd38      	pop	{r3, r4, r5, pc}
  405330:	204006a8 	.word	0x204006a8

00405334 <__ascii_mbtowc>:
  405334:	b082      	sub	sp, #8
  405336:	b901      	cbnz	r1, 40533a <__ascii_mbtowc+0x6>
  405338:	a901      	add	r1, sp, #4
  40533a:	b142      	cbz	r2, 40534e <__ascii_mbtowc+0x1a>
  40533c:	b14b      	cbz	r3, 405352 <__ascii_mbtowc+0x1e>
  40533e:	7813      	ldrb	r3, [r2, #0]
  405340:	600b      	str	r3, [r1, #0]
  405342:	7812      	ldrb	r2, [r2, #0]
  405344:	1c10      	adds	r0, r2, #0
  405346:	bf18      	it	ne
  405348:	2001      	movne	r0, #1
  40534a:	b002      	add	sp, #8
  40534c:	4770      	bx	lr
  40534e:	4610      	mov	r0, r2
  405350:	e7fb      	b.n	40534a <__ascii_mbtowc+0x16>
  405352:	f06f 0001 	mvn.w	r0, #1
  405356:	e7f8      	b.n	40534a <__ascii_mbtowc+0x16>

00405358 <__malloc_lock>:
  405358:	4770      	bx	lr

0040535a <__malloc_unlock>:
  40535a:	4770      	bx	lr

0040535c <_read_r>:
  40535c:	b538      	push	{r3, r4, r5, lr}
  40535e:	4c07      	ldr	r4, [pc, #28]	; (40537c <_read_r+0x20>)
  405360:	4605      	mov	r5, r0
  405362:	4608      	mov	r0, r1
  405364:	4611      	mov	r1, r2
  405366:	2200      	movs	r2, #0
  405368:	6022      	str	r2, [r4, #0]
  40536a:	461a      	mov	r2, r3
  40536c:	f7fc feb2 	bl	4020d4 <_read>
  405370:	1c43      	adds	r3, r0, #1
  405372:	d102      	bne.n	40537a <_read_r+0x1e>
  405374:	6823      	ldr	r3, [r4, #0]
  405376:	b103      	cbz	r3, 40537a <_read_r+0x1e>
  405378:	602b      	str	r3, [r5, #0]
  40537a:	bd38      	pop	{r3, r4, r5, pc}
  40537c:	204006a8 	.word	0x204006a8

00405380 <__ascii_wctomb>:
  405380:	b149      	cbz	r1, 405396 <__ascii_wctomb+0x16>
  405382:	2aff      	cmp	r2, #255	; 0xff
  405384:	bf85      	ittet	hi
  405386:	238a      	movhi	r3, #138	; 0x8a
  405388:	6003      	strhi	r3, [r0, #0]
  40538a:	700a      	strbls	r2, [r1, #0]
  40538c:	f04f 30ff 	movhi.w	r0, #4294967295
  405390:	bf98      	it	ls
  405392:	2001      	movls	r0, #1
  405394:	4770      	bx	lr
  405396:	4608      	mov	r0, r1
  405398:	4770      	bx	lr
	...

0040539c <__aeabi_dcmpun>:
  40539c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4053a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4053a4:	d102      	bne.n	4053ac <__aeabi_dcmpun+0x10>
  4053a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4053aa:	d10a      	bne.n	4053c2 <__aeabi_dcmpun+0x26>
  4053ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4053b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4053b4:	d102      	bne.n	4053bc <__aeabi_dcmpun+0x20>
  4053b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4053ba:	d102      	bne.n	4053c2 <__aeabi_dcmpun+0x26>
  4053bc:	f04f 0000 	mov.w	r0, #0
  4053c0:	4770      	bx	lr
  4053c2:	f04f 0001 	mov.w	r0, #1
  4053c6:	4770      	bx	lr
  4053c8:	65746e69 	.word	0x65746e69
  4053cc:	70757272 	.word	0x70757272
  4053d0:	202d2074 	.word	0x202d2074
  4053d4:	20434441 	.word	0x20434441
  4053d8:	202d2031 	.word	0x202d2031
  4053dc:	25206925 	.word	0x25206925
  4053e0:	69252069 	.word	0x69252069
  4053e4:	20692520 	.word	0x20692520
  4053e8:	00000a20 	.word	0x00000a20
  4053ec:	65746e69 	.word	0x65746e69
  4053f0:	70757272 	.word	0x70757272
  4053f4:	202d2074 	.word	0x202d2074
  4053f8:	20434441 	.word	0x20434441
  4053fc:	202d2030 	.word	0x202d2030
  405400:	25206925 	.word	0x25206925
  405404:	69252069 	.word	0x69252069
  405408:	20692520 	.word	0x20692520
  40540c:	25206925 	.word	0x25206925
  405410:	0a202069 	.word	0x0a202069
  405414:	00000000 	.word	0x00000000
  405418:	682f2e2e 	.word	0x682f2e2e
  40541c:	732f6c61 	.word	0x732f6c61
  405420:	682f6372 	.word	0x682f6372
  405424:	615f6c61 	.word	0x615f6c61
  405428:	615f6364 	.word	0x615f6364
  40542c:	636e7973 	.word	0x636e7973
  405430:	0000632e 	.word	0x0000632e
  405434:	682f2e2e 	.word	0x682f2e2e
  405438:	732f6c61 	.word	0x732f6c61
  40543c:	682f6372 	.word	0x682f6372
  405440:	695f6c61 	.word	0x695f6c61
  405444:	00632e6f 	.word	0x00632e6f
  405448:	682f2e2e 	.word	0x682f2e2e
  40544c:	732f6c61 	.word	0x732f6c61
  405450:	682f6372 	.word	0x682f6372
  405454:	705f6c61 	.word	0x705f6c61
  405458:	632e6d77 	.word	0x632e6d77
  40545c:	00000000 	.word	0x00000000
  405460:	682f2e2e 	.word	0x682f2e2e
  405464:	732f6c61 	.word	0x732f6c61
  405468:	682f6372 	.word	0x682f6372
  40546c:	745f6c61 	.word	0x745f6c61
  405470:	72656d69 	.word	0x72656d69
  405474:	0000632e 	.word	0x0000632e
  405478:	682f2e2e 	.word	0x682f2e2e
  40547c:	732f6c61 	.word	0x732f6c61
  405480:	682f6372 	.word	0x682f6372
  405484:	755f6c61 	.word	0x755f6c61
  405488:	74726173 	.word	0x74726173
  40548c:	6e79735f 	.word	0x6e79735f
  405490:	00632e63 	.word	0x00632e63
  405494:	682f2e2e 	.word	0x682f2e2e
  405498:	752f6c61 	.word	0x752f6c61
  40549c:	736c6974 	.word	0x736c6974
  4054a0:	6372732f 	.word	0x6372732f
  4054a4:	6974752f 	.word	0x6974752f
  4054a8:	6c5f736c 	.word	0x6c5f736c
  4054ac:	2e747369 	.word	0x2e747369
  4054b0:	00000063 	.word	0x00000063
  4054b4:	682f2e2e 	.word	0x682f2e2e
  4054b8:	752f6c61 	.word	0x752f6c61
  4054bc:	736c6974 	.word	0x736c6974
  4054c0:	6372732f 	.word	0x6372732f
  4054c4:	6974752f 	.word	0x6974752f
  4054c8:	725f736c 	.word	0x725f736c
  4054cc:	62676e69 	.word	0x62676e69
  4054d0:	65666675 	.word	0x65666675
  4054d4:	00632e72 	.word	0x00632e72

004054d8 <_afecs>:
  4054d8:	00000000 2f843100 23000000 ffffffff     .....1./...#....
  4054e8:	0000ffff 00000000 00000000 00000000     ................
  4054f8:	0000010c 00000000 00000000 00000000     ................
  405508:	00000000 00000200 00000200 00000200     ................
  405518:	00000200 00000200 00000200 00000200     ................
  405528:	00000200 00000200 00000200 00000200     ................
  405538:	00000200 00000001 2f843100 23000000     .........1./...#
  405548:	ffffffff 0000ffff 00000000 00000000     ................
  405558:	00000000 0000010c 00000000 00000000     ................
	...
  405570:	00000200 00000200 00000200 00000200     ................
  405580:	00000200 00000200 00000200 00000200     ................
  405590:	00000200 00000200 00000200 00000200     ................
  4055a0:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  4055b0:	63656661 0000632e                       afec.c..

004055b8 <_ext_irq>:
  4055b8:	00000000 00000024 00000000 00000000     ....$...........
	...
  4055d4:	00000003 00080000 00000000 00000000     ................
	...

004055f0 <_pio_irq_n>:
  4055f0:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  405600:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  405610:	00000000                                ....

00405614 <_pwms>:
  405614:	40020000 0000001f 00010019 00000001     ...@............
  405624:	00000001 000000ff 00000000 00000004     ................
	...
  405640:	00000002 0040569c 00000000 2040037c     .....V@.....|.@ 
  405650:	4005c000 0000003c 00010019 00000001     ...@<...........
  405660:	00000001 000000ff 00000000 00000004     ................
	...
  40567c:	00000001 0040568c 00000000 20400370     .....V@.....p.@ 

0040568c <_ch_cfg1>:
  40568c:	00000000 0000010b 000003e8 00000200     ................

0040569c <_ch_cfg0>:
  40569c:	00000000 0000010b 000003e8 00000200     ................
  4056ac:	00000002 0000010b 000003e8 00000200     ................
  4056bc:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  4056cc:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  4056dc:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

004056e8 <_usarts>:
  4056e8:	00000001 001008c0 000100f4 682f2e2e     ............../h
  4056f8:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  405708:	632e7472 00000000                       rt.c....

00405710 <_cfgs>:
  405710:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  405720:	00000040 00000000 00000040 00000000     @.......@.......
  405730:	00000040 00000000 00000040 00000000     @.......@.......
  405740:	00000040 00000000 00000040 00000000     @.......@.......
  405750:	00000040 00000000 00000040 00000000     @.......@.......
  405760:	00000040 00000000 00000040 00000000     @.......@.......
  405770:	00000040 00000000 00000040 00000000     @.......@.......
  405780:	00000040 00000000 00000040 00000000     @.......@.......
  405790:	00000040 00000000 00000040 00000000     @.......@.......
  4057a0:	00000040 00000000 00000040 00000000     @.......@.......
  4057b0:	00000040 00000000 00000040 00000000     @.......@.......
  4057c0:	00000040 00000000 00000040 00000000     @.......@.......

004057d0 <_global_impure_ptr>:
  4057d0:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  4057e0:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  4057f0:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  405800:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  405810:	4e614e00 00000000                       .NaN....

00405818 <__sf_fake_stderr>:
	...

00405838 <__sf_fake_stdin>:
	...

00405858 <__sf_fake_stdout>:
	...

00405878 <__mprec_bigtens>:
  405878:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  405888:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  405898:	7f73bf3c 75154fdd                       <.s..O.u

004058a0 <__mprec_tens>:
  4058a0:	00000000 3ff00000 00000000 40240000     .......?......$@
  4058b0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4058c0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4058d0:	00000000 412e8480 00000000 416312d0     .......A......cA
  4058e0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4058f0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  405900:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  405910:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  405920:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  405930:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  405940:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  405950:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  405960:	79d99db4 44ea7843                       ...yCx.D

00405968 <p05.6047>:
  405968:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  405978:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  405988:	5849534f 00002e00                                OSIX...

0040598f <_ctype_>:
  40598f:	20202000 20202020 28282020 20282828     .         ((((( 
  40599f:	20202020 20202020 20202020 20202020                     
  4059af:	10108820 10101010 10101010 10101010      ...............
  4059bf:	04040410 04040404 10040404 10101010     ................
  4059cf:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4059df:	01010101 01010101 01010101 10101010     ................
  4059ef:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4059ff:	02020202 02020202 02020202 10101010     ................
  405a0f:	00000020 00000000 00000000 00000000      ...............
	...

00405a90 <_init>:
  405a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405a92:	bf00      	nop
  405a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405a96:	bc08      	pop	{r3}
  405a98:	469e      	mov	lr, r3
  405a9a:	4770      	bx	lr

00405a9c <__init_array_start>:
  405a9c:	0040018d 	.word	0x0040018d

00405aa0 <_fini>:
  405aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405aa2:	bf00      	nop
  405aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405aa6:	bc08      	pop	{r3}
  405aa8:	469e      	mov	lr, r3
  405aaa:	4770      	bx	lr

00405aac <__fini_array_start>:
  405aac:	00400169 	.word	0x00400169
