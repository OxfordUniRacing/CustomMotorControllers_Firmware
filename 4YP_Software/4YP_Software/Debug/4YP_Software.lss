
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006568  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  00406568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000500  20400218  00406780  00020218  2**2
                  ALLOC
  3 .heap         00000200  20400718  00406c80  00020218  2**0
                  ALLOC
  4 .stack        00000400  20400918  00406e80  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002b57a  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000056d3  00000000  00000000  0004b819  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ca4e  00000000  00000000  00050eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e98  00000000  00000000  0005d93a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d68  00000000  00000000  0005e7d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00048902  00000000  00000000  0005f53a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00020cf7  00000000  00000000  000a7e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00158eba  00000000  00000000  000c8b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000318c  00000000  00000000  002219f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 0d 40 20 05 0b 40 00 01 0b 40 00 01 0b 40 00     ..@ ..@...@...@.
  400010:	01 0b 40 00 01 0b 40 00 01 0b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	01 0b 40 00 01 0b 40 00 00 00 00 00 01 0b 40 00     ..@...@.......@.
  40003c:	01 0b 40 00 01 0b 40 00 01 0b 40 00 01 0b 40 00     ..@...@...@...@.
  40004c:	01 0b 40 00 01 0b 40 00 01 0b 40 00 01 0b 40 00     ..@...@...@...@.
  40005c:	01 0b 40 00 01 0b 40 00 00 00 00 00 dd 1f 40 00     ..@...@.......@.
  40006c:	d1 1f 40 00 01 0b 40 00 01 0b 40 00 01 0b 40 00     ..@...@...@...@.
  40007c:	01 0b 40 00 c5 1f 40 00 01 0b 40 00 01 0b 40 00     ..@...@...@...@.
  40008c:	01 0b 40 00 01 0b 40 00 01 0b 40 00 01 0b 40 00     ..@...@...@...@.
  40009c:	45 26 40 00 01 0b 40 00 01 0b 40 00 01 0b 40 00     E&@...@...@...@.
  4000ac:	01 0b 40 00 01 0b 40 00 8d 1b 40 00 01 0b 40 00     ..@...@...@...@.
  4000bc:	91 21 40 00 01 0b 40 00 01 0b 40 00 01 0b 40 00     .!@...@...@...@.
  4000cc:	01 0b 40 00 01 0b 40 00 75 1d 40 00 01 0b 40 00     ..@...@.u.@...@.
  4000dc:	01 0b 40 00 a1 1b 40 00 01 0b 40 00 01 0b 40 00     ..@...@...@...@.
  4000ec:	01 0b 40 00 01 0b 40 00 01 0b 40 00 01 0b 40 00     ..@...@...@...@.
  4000fc:	01 0b 40 00 01 0b 40 00 01 0b 40 00 59 26 40 00     ..@...@...@.Y&@.
  40010c:	01 0b 40 00 01 0b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 01 0b 40 00 01 0b 40 00 b5 29 40 00     ......@...@..)@.
  40012c:	01 0b 40 00 a5 21 40 00 01 0b 40 00 01 0b 40 00     ..@..!@...@...@.
  40013c:	01 0b 40 00 01 0b 40 00 01 0b 40 00 01 0b 40 00     ..@...@...@...@.
  40014c:	01 0b 40 00 01 0b 40 00 01 0b 40 00 01 0b 40 00     ..@...@...@...@.
  40015c:	01 0b 40 00 01 0b 40 00 01 0b 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	00406568 	.word	0x00406568

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406568 	.word	0x00406568
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	00406568 	.word	0x00406568
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400fdd 	.word	0x00400fdd
  4001e4:	00402b69 	.word	0x00402b69

004001e8 <raw_data_to_voltage>:
	
	return 0;
}


float raw_data_to_voltage(uint32_t analog_data){
  4001e8:	b510      	push	{r4, lr}
	//12 bit ADCs
	//Vref = 3.3V
	float voltage = (((float) analog_data) / (4096)) * 3.3;
  4001ea:	ee07 0a90 	vmov	s15, r0
  4001ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  4001f2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 400220 <raw_data_to_voltage+0x38>
  4001f6:	ee67 7a27 	vmul.f32	s15, s14, s15
  4001fa:	ee17 0a90 	vmov	r0, s15
  4001fe:	4b09      	ldr	r3, [pc, #36]	; (400224 <raw_data_to_voltage+0x3c>)
  400200:	4798      	blx	r3
  400202:	a305      	add	r3, pc, #20	; (adr r3, 400218 <raw_data_to_voltage+0x30>)
  400204:	e9d3 2300 	ldrd	r2, r3, [r3]
  400208:	4c07      	ldr	r4, [pc, #28]	; (400228 <raw_data_to_voltage+0x40>)
  40020a:	47a0      	blx	r4
  40020c:	4b07      	ldr	r3, [pc, #28]	; (40022c <raw_data_to_voltage+0x44>)
  40020e:	4798      	blx	r3
	//printf("raw data - %i \t voltage - %f \n",(int) analog_data, voltage);
	return voltage;
  400210:	bd10      	pop	{r4, pc}
  400212:	bf00      	nop
  400214:	f3af 8000 	nop.w
  400218:	66666666 	.word	0x66666666
  40021c:	400a6666 	.word	0x400a6666
  400220:	39800000 	.word	0x39800000
  400224:	00402e51 	.word	0x00402e51
  400228:	00402ef9 	.word	0x00402ef9
  40022c:	004034a9 	.word	0x004034a9

00400230 <calibrate_curr_sensors>:
void calibrate_curr_sensors(void){
  400230:	b570      	push	{r4, r5, r6, lr}
	dma_adc_0_enable_for_one_transaction();
  400232:	4b0e      	ldr	r3, [pc, #56]	; (40026c <calibrate_curr_sensors+0x3c>)
  400234:	4798      	blx	r3
	dma_adc_1_enable_for_one_transaction();
  400236:	4b0e      	ldr	r3, [pc, #56]	; (400270 <calibrate_curr_sensors+0x40>)
  400238:	4798      	blx	r3
	delay_ms(1);
  40023a:	2001      	movs	r0, #1
  40023c:	4b0d      	ldr	r3, [pc, #52]	; (400274 <calibrate_curr_sensors+0x44>)
  40023e:	4798      	blx	r3
	curr_A_offset = raw_data_to_voltage(adc_read(ADC_CURRENT_A));
  400240:	4e0d      	ldr	r6, [pc, #52]	; (400278 <calibrate_curr_sensors+0x48>)
  400242:	2108      	movs	r1, #8
  400244:	4630      	mov	r0, r6
  400246:	4d0d      	ldr	r5, [pc, #52]	; (40027c <calibrate_curr_sensors+0x4c>)
  400248:	47a8      	blx	r5
  40024a:	4c0d      	ldr	r4, [pc, #52]	; (400280 <calibrate_curr_sensors+0x50>)
  40024c:	47a0      	blx	r4
  40024e:	4b0d      	ldr	r3, [pc, #52]	; (400284 <calibrate_curr_sensors+0x54>)
  400250:	6018      	str	r0, [r3, #0]
	curr_B_offset = raw_data_to_voltage(adc_read(ADC_CURRENT_A));
  400252:	2108      	movs	r1, #8
  400254:	4630      	mov	r0, r6
  400256:	47a8      	blx	r5
  400258:	47a0      	blx	r4
  40025a:	4b0b      	ldr	r3, [pc, #44]	; (400288 <calibrate_curr_sensors+0x58>)
  40025c:	6018      	str	r0, [r3, #0]
	curr_C_offset = raw_data_to_voltage(adc_read(ADC_CURRENT_A));
  40025e:	2108      	movs	r1, #8
  400260:	4630      	mov	r0, r6
  400262:	47a8      	blx	r5
  400264:	47a0      	blx	r4
  400266:	4b09      	ldr	r3, [pc, #36]	; (40028c <calibrate_curr_sensors+0x5c>)
  400268:	6018      	str	r0, [r3, #0]
  40026a:	bd70      	pop	{r4, r5, r6, pc}
  40026c:	00400621 	.word	0x00400621
  400270:	00400705 	.word	0x00400705
  400274:	0040133d 	.word	0x0040133d
  400278:	20400610 	.word	0x20400610
  40027c:	00400945 	.word	0x00400945
  400280:	004001e9 	.word	0x004001e9
  400284:	20400508 	.word	0x20400508
  400288:	20400510 	.word	0x20400510
  40028c:	204004ec 	.word	0x204004ec

00400290 <encoder_init>:
	
	//increment rotation counter
	encoder_num_Z_interrupts ++;
}

void encoder_init(void){
  400290:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400292:	4b56      	ldr	r3, [pc, #344]	; (4003ec <encoder_init+0x15c>)
  400294:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400296:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40029a:	d103      	bne.n	4002a4 <encoder_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40029c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4002a0:	4b52      	ldr	r3, [pc, #328]	; (4003ec <encoder_init+0x15c>)
  4002a2:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002a4:	4b51      	ldr	r3, [pc, #324]	; (4003ec <encoder_init+0x15c>)
  4002a6:	699b      	ldr	r3, [r3, #24]
  4002a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4002ac:	d103      	bne.n	4002b6 <encoder_init+0x26>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4002b2:	4b4e      	ldr	r3, [pc, #312]	; (4003ec <encoder_init+0x15c>)
  4002b4:	611a      	str	r2, [r3, #16]
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4002b6:	4b4d      	ldr	r3, [pc, #308]	; (4003ec <encoder_init+0x15c>)
  4002b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4002bc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  4002c0:	d104      	bne.n	4002cc <encoder_init+0x3c>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4002c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4002c6:	4b49      	ldr	r3, [pc, #292]	; (4003ec <encoder_init+0x15c>)
  4002c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4002cc:	4b47      	ldr	r3, [pc, #284]	; (4003ec <encoder_init+0x15c>)
  4002ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  4002d2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  4002d6:	d104      	bne.n	4002e2 <encoder_init+0x52>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4002d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4002dc:	4b43      	ldr	r3, [pc, #268]	; (4003ec <encoder_init+0x15c>)
  4002de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	_pmc_enable_periph_clock(ID_TC3_CHANNEL1);
	
	
	//enable external interrupt on the Z line 
	ext_irq_register(PIO_PB13_IDX,Encoder_Z_Interrupt);
  4002e2:	4943      	ldr	r1, [pc, #268]	; (4003f0 <encoder_init+0x160>)
  4002e4:	202d      	movs	r0, #45	; 0x2d
  4002e6:	4b43      	ldr	r3, [pc, #268]	; (4003f4 <encoder_init+0x164>)
  4002e8:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002ea:	4b43      	ldr	r3, [pc, #268]	; (4003f8 <encoder_init+0x168>)
  4002ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4002f0:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4002f2:	2240      	movs	r2, #64	; 0x40
  4002f4:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4002fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400300:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400304:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400308:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40030c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400314:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400318:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40031c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400328:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40032c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400330:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400334:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  40033c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400340:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400344:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400348:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40034c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400354:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400358:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40035c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400364:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400368:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40036c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400370:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400378:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40037c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400380:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400384:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40038c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400390:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400394:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400398:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40039c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4003a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003a4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003a8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4003b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4003b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003b8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003bc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4003c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4003c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003cc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4003d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4003dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003e0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003e4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  4003e8:	bd08      	pop	{r3, pc}
  4003ea:	bf00      	nop
  4003ec:	400e0600 	.word	0x400e0600
  4003f0:	00400421 	.word	0x00400421
  4003f4:	004013d5 	.word	0x004013d5
  4003f8:	e000e100 	.word	0xe000e100

004003fc <encoder_get_counter>:
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV(mask)) >> TC_CV_CV_Pos;
}

static inline hri_tc_cv_reg_t hri_tc_read_CV_CV_bf(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV_Msk) >> TC_CV_CV_Pos;
  4003fc:	4a06      	ldr	r2, [pc, #24]	; (400418 <encoder_get_counter+0x1c>)
  4003fe:	6913      	ldr	r3, [r2, #16]
  400400:	6d10      	ldr	r0, [r2, #80]	; 0x50
	//if starting offset is 0 (which is the case before it was recorded) then it returns the actual counter
	
	
	//get A (first line) and B (second line) counters
	//note that rising and falling edges could be the other way round. It doesn't matter for the current implementation
	int encoder_counter_no_offset =	  ( int) hri_tc_read_CV_CV_bf(TC0,0) + ( int) hri_tc_read_CV_CV_bf(TC0,1) \
  400402:	4403      	add	r3, r0
  400404:	f502 2290 	add.w	r2, r2, #294912	; 0x48000
  400408:	6910      	ldr	r0, [r2, #16]
									+ ( int) hri_tc_read_CV_CV_bf(TC3,0) + ( int) hri_tc_read_CV_CV_bf(TC3,1) \
  40040a:	4403      	add	r3, r0
  40040c:	6d10      	ldr	r0, [r2, #80]	; 0x50
  40040e:	4403      	add	r3, r0
									- encoder_inital_offset;														//get the number of steps normalised to the starting offset
  400410:	4a02      	ldr	r2, [pc, #8]	; (40041c <encoder_get_counter+0x20>)
  400412:	6810      	ldr	r0, [r2, #0]
								
	
	return encoder_counter_no_offset;
}
  400414:	1a18      	subs	r0, r3, r0
  400416:	4770      	bx	lr
  400418:	4000c000 	.word	0x4000c000
  40041c:	204004f8 	.word	0x204004f8

00400420 <Encoder_Z_Interrupt>:
static void Encoder_Z_Interrupt (void){
  400420:	b508      	push	{r3, lr}
	int encoder_counter_no_offset = encoder_get_counter();
  400422:	4b0b      	ldr	r3, [pc, #44]	; (400450 <Encoder_Z_Interrupt+0x30>)
  400424:	4798      	blx	r3
	if(encoder_num_Z_interrupts == 0){
  400426:	4b0b      	ldr	r3, [pc, #44]	; (400454 <Encoder_Z_Interrupt+0x34>)
  400428:	681b      	ldr	r3, [r3, #0]
  40042a:	b15b      	cbz	r3, 400444 <Encoder_Z_Interrupt+0x24>
		unsigned int delta = encoder_counter_no_offset & (ENCODER_STEPS - 1);
  40042c:	f3c0 000d 	ubfx	r0, r0, #0, #14
		if( (delta <= ENCODER_MAX_DELTA) || (delta >= ENCODER_STEPS-1 - ENCODER_MAX_DELTA) ){
  400430:	1f81      	subs	r1, r0, #6
  400432:	f643 72f3 	movw	r2, #16371	; 0x3ff3
  400436:	4291      	cmp	r1, r2
  400438:	d806      	bhi.n	400448 <Encoder_Z_Interrupt+0x28>
			encoder_inital_offset += delta;
  40043a:	4907      	ldr	r1, [pc, #28]	; (400458 <Encoder_Z_Interrupt+0x38>)
  40043c:	680a      	ldr	r2, [r1, #0]
  40043e:	4410      	add	r0, r2
  400440:	6008      	str	r0, [r1, #0]
  400442:	e001      	b.n	400448 <Encoder_Z_Interrupt+0x28>
		encoder_inital_offset = encoder_counter_no_offset;
  400444:	4a04      	ldr	r2, [pc, #16]	; (400458 <Encoder_Z_Interrupt+0x38>)
  400446:	6010      	str	r0, [r2, #0]
	encoder_num_Z_interrupts ++;
  400448:	3301      	adds	r3, #1
  40044a:	4a02      	ldr	r2, [pc, #8]	; (400454 <Encoder_Z_Interrupt+0x34>)
  40044c:	6013      	str	r3, [r2, #0]
  40044e:	bd08      	pop	{r3, pc}
  400450:	004003fd 	.word	0x004003fd
  400454:	204004f4 	.word	0x204004f4
  400458:	204004f8 	.word	0x204004f8

0040045c <Position_2_Interrupt>:
static void Position_1_Interrupt (void){
	Position_General_Interrupt();
	//printf("POS 1\n");
}

static void Position_2_Interrupt (void){
  40045c:	b430      	push	{r4, r5}
	has_triggered = true;
  40045e:	2201      	movs	r2, #1
  400460:	4b13      	ldr	r3, [pc, #76]	; (4004b0 <Position_2_Interrupt+0x54>)
  400462:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400464:	4b13      	ldr	r3, [pc, #76]	; (4004b4 <Position_2_Interrupt+0x58>)
  400466:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400468:	4b13      	ldr	r3, [pc, #76]	; (4004b8 <Position_2_Interrupt+0x5c>)
  40046a:	681b      	ldr	r3, [r3, #0]
  40046c:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40046e:	2b00      	cmp	r3, #0
  400470:	dd11      	ble.n	400496 <Position_2_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400472:	2201      	movs	r2, #1
  400474:	2a00      	cmp	r2, #0
  400476:	dc11      	bgt.n	40049c <Position_2_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  400478:	ee07 3a90 	vmov	s15, r3
  40047c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400480:	eddf 6a0e 	vldr	s13, [pc, #56]	; 4004bc <Position_2_Interrupt+0x60>
  400484:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400488:	4b0d      	ldr	r3, [pc, #52]	; (4004c0 <Position_2_Interrupt+0x64>)
  40048a:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  40048e:	4b0a      	ldr	r3, [pc, #40]	; (4004b8 <Position_2_Interrupt+0x5c>)
  400490:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	//printf("POS 2\n");
}
  400492:	bc30      	pop	{r4, r5}
  400494:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400496:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  40049a:	e7ea      	b.n	400472 <Position_2_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  40049c:	1e54      	subs	r4, r2, #1
  40049e:	4908      	ldr	r1, [pc, #32]	; (4004c0 <Position_2_Interrupt+0x64>)
  4004a0:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  4004a4:	682d      	ldr	r5, [r5, #0]
  4004a6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4004aa:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4004ac:	4622      	mov	r2, r4
  4004ae:	e7e1      	b.n	400474 <Position_2_Interrupt+0x18>
  4004b0:	204004f0 	.word	0x204004f0
  4004b4:	e000e010 	.word	0xe000e010
  4004b8:	20400504 	.word	0x20400504
  4004bc:	43960000 	.word	0x43960000
  4004c0:	204004fc 	.word	0x204004fc

004004c4 <Position_3_Interrupt>:
int cntr = 0;
static void Position_3_Interrupt (void){
  4004c4:	b430      	push	{r4, r5}
	has_triggered = true;
  4004c6:	2201      	movs	r2, #1
  4004c8:	4b13      	ldr	r3, [pc, #76]	; (400518 <Position_3_Interrupt+0x54>)
  4004ca:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  4004cc:	4b13      	ldr	r3, [pc, #76]	; (40051c <Position_3_Interrupt+0x58>)
  4004ce:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  4004d0:	4b13      	ldr	r3, [pc, #76]	; (400520 <Position_3_Interrupt+0x5c>)
  4004d2:	681b      	ldr	r3, [r3, #0]
  4004d4:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4004d6:	2b00      	cmp	r3, #0
  4004d8:	dd11      	ble.n	4004fe <Position_3_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4004da:	2201      	movs	r2, #1
  4004dc:	2a00      	cmp	r2, #0
  4004de:	dc11      	bgt.n	400504 <Position_3_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  4004e0:	ee07 3a90 	vmov	s15, r3
  4004e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4004e8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 400524 <Position_3_Interrupt+0x60>
  4004ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4004f0:	4b0d      	ldr	r3, [pc, #52]	; (400528 <Position_3_Interrupt+0x64>)
  4004f2:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  4004f6:	4b0a      	ldr	r3, [pc, #40]	; (400520 <Position_3_Interrupt+0x5c>)
  4004f8:	6018      	str	r0, [r3, #0]
		
			printf("%f\n",angleee);
		}
	}
	*/
}
  4004fa:	bc30      	pop	{r4, r5}
  4004fc:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4004fe:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  400502:	e7ea      	b.n	4004da <Position_3_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400504:	1e54      	subs	r4, r2, #1
  400506:	4908      	ldr	r1, [pc, #32]	; (400528 <Position_3_Interrupt+0x64>)
  400508:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  40050c:	682d      	ldr	r5, [r5, #0]
  40050e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400512:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400514:	4622      	mov	r2, r4
  400516:	e7e1      	b.n	4004dc <Position_3_Interrupt+0x18>
  400518:	204004f0 	.word	0x204004f0
  40051c:	e000e010 	.word	0xe000e010
  400520:	20400504 	.word	0x20400504
  400524:	43960000 	.word	0x43960000
  400528:	204004fc 	.word	0x204004fc

0040052c <Position_1_Interrupt>:
static void Position_1_Interrupt (void){
  40052c:	b430      	push	{r4, r5}
	has_triggered = true;
  40052e:	2201      	movs	r2, #1
  400530:	4b13      	ldr	r3, [pc, #76]	; (400580 <Position_1_Interrupt+0x54>)
  400532:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400534:	4b13      	ldr	r3, [pc, #76]	; (400584 <Position_1_Interrupt+0x58>)
  400536:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400538:	4b13      	ldr	r3, [pc, #76]	; (400588 <Position_1_Interrupt+0x5c>)
  40053a:	681b      	ldr	r3, [r3, #0]
  40053c:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40053e:	2b00      	cmp	r3, #0
  400540:	dd11      	ble.n	400566 <Position_1_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400542:	2201      	movs	r2, #1
  400544:	2a00      	cmp	r2, #0
  400546:	dc11      	bgt.n	40056c <Position_1_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  400548:	ee07 3a90 	vmov	s15, r3
  40054c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400550:	eddf 6a0e 	vldr	s13, [pc, #56]	; 40058c <Position_1_Interrupt+0x60>
  400554:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400558:	4b0d      	ldr	r3, [pc, #52]	; (400590 <Position_1_Interrupt+0x64>)
  40055a:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  40055e:	4b0a      	ldr	r3, [pc, #40]	; (400588 <Position_1_Interrupt+0x5c>)
  400560:	6018      	str	r0, [r3, #0]
}
  400562:	bc30      	pop	{r4, r5}
  400564:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400566:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  40056a:	e7ea      	b.n	400542 <Position_1_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  40056c:	1e54      	subs	r4, r2, #1
  40056e:	4908      	ldr	r1, [pc, #32]	; (400590 <Position_1_Interrupt+0x64>)
  400570:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400574:	682d      	ldr	r5, [r5, #0]
  400576:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40057a:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40057c:	4622      	mov	r2, r4
  40057e:	e7e1      	b.n	400544 <Position_1_Interrupt+0x18>
  400580:	204004f0 	.word	0x204004f0
  400584:	e000e010 	.word	0xe000e010
  400588:	20400504 	.word	0x20400504
  40058c:	43960000 	.word	0x43960000
  400590:	204004fc 	.word	0x204004fc

00400594 <pos_sens_init>:

void pos_sens_init (void){
  400594:	b510      	push	{r4, lr}
	//set interrupt handlers
	ext_irq_register(PIO_PD19_IDX, Position_3_Interrupt);		//POS 3
  400596:	4919      	ldr	r1, [pc, #100]	; (4005fc <pos_sens_init+0x68>)
  400598:	2073      	movs	r0, #115	; 0x73
  40059a:	4c19      	ldr	r4, [pc, #100]	; (400600 <pos_sens_init+0x6c>)
  40059c:	47a0      	blx	r4
	ext_irq_register(PIO_PA2_IDX, Position_2_Interrupt);		//POS 2
  40059e:	4919      	ldr	r1, [pc, #100]	; (400604 <pos_sens_init+0x70>)
  4005a0:	2002      	movs	r0, #2
  4005a2:	47a0      	blx	r4
	ext_irq_register(PIO_PA5_IDX, Position_1_Interrupt);		//POS 1
  4005a4:	4918      	ldr	r1, [pc, #96]	; (400608 <pos_sens_init+0x74>)
  4005a6:	2005      	movs	r0, #5
  4005a8:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4005aa:	4b18      	ldr	r3, [pc, #96]	; (40060c <pos_sens_init+0x78>)
  4005ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4005b0:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4005b2:	2220      	movs	r2, #32
  4005b4:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4005b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4005bc:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4005be:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ	(PIOD_IRQn);
	NVIC_SetPriority(PIOD_IRQn, IRQ_PRIORITY_POSITION_SENS);

	
	//SysTick starting from 0
	pos_sens_last_SysTick_count = 0;
  4005c2:	2200      	movs	r2, #0
  4005c4:	4b12      	ldr	r3, [pc, #72]	; (400610 <pos_sens_init+0x7c>)
  4005c6:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
  4005c8:	4b12      	ldr	r3, [pc, #72]	; (400614 <pos_sens_init+0x80>)
  4005ca:	609a      	str	r2, [r3, #8]
	//make the load value max, so that the overflows are as rare as possible
	SysTick->LOAD = (0xFFFFFF);
  4005cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  4005d0:	6059      	str	r1, [r3, #4]

	this means that the moment we transition to state (POS1=1, POS2=0 POS3=0) we are at 0 electrical degrees
	*/

	// sector_lookup_table[POS3][POS2][POS1];
	sector_lookup_table[0][0][1] = 1;
  4005d2:	4b11      	ldr	r3, [pc, #68]	; (400618 <pos_sens_init+0x84>)
  4005d4:	2101      	movs	r1, #1
  4005d6:	6059      	str	r1, [r3, #4]
	sector_lookup_table[0][1][1] = 2;
  4005d8:	2102      	movs	r1, #2
  4005da:	60d9      	str	r1, [r3, #12]
	sector_lookup_table[0][1][0] = 3;
  4005dc:	2103      	movs	r1, #3
  4005de:	6099      	str	r1, [r3, #8]
	sector_lookup_table[1][1][0] = 4;
  4005e0:	2104      	movs	r1, #4
  4005e2:	6199      	str	r1, [r3, #24]
	sector_lookup_table[1][0][0] = 5;
  4005e4:	2105      	movs	r1, #5
  4005e6:	6119      	str	r1, [r3, #16]
	sector_lookup_table[1][0][1] = 6;
  4005e8:	2106      	movs	r1, #6
  4005ea:	6159      	str	r1, [r3, #20]
	//Error states
	sector_lookup_table[0][0][0] = -1;
  4005ec:	f04f 31ff 	mov.w	r1, #4294967295
  4005f0:	6019      	str	r1, [r3, #0]
	sector_lookup_table[1][1][1] = -1;
  4005f2:	61d9      	str	r1, [r3, #28]
	
	has_triggered = false;
  4005f4:	4b09      	ldr	r3, [pc, #36]	; (40061c <pos_sens_init+0x88>)
  4005f6:	701a      	strb	r2, [r3, #0]
  4005f8:	bd10      	pop	{r4, pc}
  4005fa:	bf00      	nop
  4005fc:	004004c5 	.word	0x004004c5
  400600:	004013d5 	.word	0x004013d5
  400604:	0040045d 	.word	0x0040045d
  400608:	0040052d 	.word	0x0040052d
  40060c:	e000e100 	.word	0xe000e100
  400610:	20400504 	.word	0x20400504
  400614:	e000e010 	.word	0xe000e010
  400618:	204004c8 	.word	0x204004c8
  40061c:	204004f0 	.word	0x204004f0

00400620 <dma_adc_0_enable_for_one_transaction>:
	
	has_0_triggered = false;
	has_1_triggered = false;
}

void dma_adc_0_enable_for_one_transaction(void){
  400620:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  400622:	4906      	ldr	r1, [pc, #24]	; (40063c <dma_adc_0_enable_for_one_transaction+0x1c>)
  400624:	2000      	movs	r0, #0
  400626:	4b06      	ldr	r3, [pc, #24]	; (400640 <dma_adc_0_enable_for_one_transaction+0x20>)
  400628:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  40062a:	2118      	movs	r1, #24
  40062c:	2000      	movs	r0, #0
  40062e:	4b05      	ldr	r3, [pc, #20]	; (400644 <dma_adc_0_enable_for_one_transaction+0x24>)
  400630:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  400632:	2101      	movs	r1, #1
  400634:	2000      	movs	r0, #0
  400636:	4b04      	ldr	r3, [pc, #16]	; (400648 <dma_adc_0_enable_for_one_transaction+0x28>)
  400638:	4798      	blx	r3
  40063a:	bd08      	pop	{r3, pc}
  40063c:	20400234 	.word	0x20400234
  400640:	004028f9 	.word	0x004028f9
  400644:	00402919 	.word	0x00402919
  400648:	00402931 	.word	0x00402931

0040064c <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  40064c:	b530      	push	{r4, r5, lr}
  40064e:	b083      	sub	sp, #12
	has_0_triggered = true;
  400650:	2201      	movs	r2, #1
  400652:	4b22      	ldr	r3, [pc, #136]	; (4006dc <dma_adc_0_callback+0x90>)
  400654:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400656:	2300      	movs	r3, #0
  400658:	e008      	b.n	40066c <dma_adc_0_callback+0x20>
				raw_currents[1] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  40065a:	b292      	uxth	r2, r2
  40065c:	4920      	ldr	r1, [pc, #128]	; (4006e0 <dma_adc_0_callback+0x94>)
  40065e:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  400660:	4920      	ldr	r1, [pc, #128]	; (4006e4 <dma_adc_0_callback+0x98>)
  400662:	7e0a      	ldrb	r2, [r1, #24]
  400664:	f042 0202 	orr.w	r2, r2, #2
  400668:	760a      	strb	r2, [r1, #24]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  40066a:	3301      	adds	r3, #1
  40066c:	2b05      	cmp	r3, #5
  40066e:	dc13      	bgt.n	400698 <dma_adc_0_callback+0x4c>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400670:	4a1c      	ldr	r2, [pc, #112]	; (4006e4 <dma_adc_0_callback+0x98>)
  400672:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  400676:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  40067a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  40067e:	d0ec      	beq.n	40065a <dma_adc_0_callback+0xe>
  400680:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400684:	d1f1      	bne.n	40066a <dma_adc_0_callback+0x1e>
				raw_currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400686:	b292      	uxth	r2, r2
  400688:	4915      	ldr	r1, [pc, #84]	; (4006e0 <dma_adc_0_callback+0x94>)
  40068a:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  40068c:	4915      	ldr	r1, [pc, #84]	; (4006e4 <dma_adc_0_callback+0x98>)
  40068e:	7e0a      	ldrb	r2, [r1, #24]
  400690:	f042 0201 	orr.w	r2, r2, #1
  400694:	760a      	strb	r2, [r1, #24]
				break;
  400696:	e7e8      	b.n	40066a <dma_adc_0_callback+0x1e>
	if(is_dma_adc_0_continuous){
  400698:	4b13      	ldr	r3, [pc, #76]	; (4006e8 <dma_adc_0_callback+0x9c>)
  40069a:	781b      	ldrb	r3, [r3, #0]
  40069c:	b92b      	cbnz	r3, 4006aa <dma_adc_0_callback+0x5e>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  40069e:	4b11      	ldr	r3, [pc, #68]	; (4006e4 <dma_adc_0_callback+0x98>)
  4006a0:	7e1b      	ldrb	r3, [r3, #24]
  4006a2:	2b0f      	cmp	r3, #15
  4006a4:	d004      	beq.n	4006b0 <dma_adc_0_callback+0x64>
}
  4006a6:	b003      	add	sp, #12
  4006a8:	bd30      	pop	{r4, r5, pc}
		dma_adc_0_enable_for_one_transaction();
  4006aa:	4b10      	ldr	r3, [pc, #64]	; (4006ec <dma_adc_0_callback+0xa0>)
  4006ac:	4798      	blx	r3
  4006ae:	e7f6      	b.n	40069e <dma_adc_0_callback+0x52>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  4006b0:	4b0f      	ldr	r3, [pc, #60]	; (4006f0 <dma_adc_0_callback+0xa4>)
  4006b2:	781b      	ldrb	r3, [r3, #0]
  4006b4:	2b00      	cmp	r3, #0
  4006b6:	d0f6      	beq.n	4006a6 <dma_adc_0_callback+0x5a>
		ready_values = 0;
  4006b8:	2200      	movs	r2, #0
  4006ba:	4b0a      	ldr	r3, [pc, #40]	; (4006e4 <dma_adc_0_callback+0x98>)
  4006bc:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 0\n");
  4006be:	480d      	ldr	r0, [pc, #52]	; (4006f4 <dma_adc_0_callback+0xa8>)
  4006c0:	4c0d      	ldr	r4, [pc, #52]	; (4006f8 <dma_adc_0_callback+0xac>)
  4006c2:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  4006c4:	4806      	ldr	r0, [pc, #24]	; (4006e0 <dma_adc_0_callback+0x94>)
  4006c6:	6843      	ldr	r3, [r0, #4]
  4006c8:	6802      	ldr	r2, [r0, #0]
  4006ca:	490c      	ldr	r1, [pc, #48]	; (4006fc <dma_adc_0_callback+0xb0>)
  4006cc:	6809      	ldr	r1, [r1, #0]
  4006ce:	68c5      	ldr	r5, [r0, #12]
  4006d0:	9501      	str	r5, [sp, #4]
  4006d2:	6880      	ldr	r0, [r0, #8]
  4006d4:	9000      	str	r0, [sp, #0]
  4006d6:	480a      	ldr	r0, [pc, #40]	; (400700 <dma_adc_0_callback+0xb4>)
  4006d8:	47a0      	blx	r4
}
  4006da:	e7e4      	b.n	4006a6 <dma_adc_0_callback+0x5a>
  4006dc:	2040050c 	.word	0x2040050c
  4006e0:	20400518 	.word	0x20400518
  4006e4:	20400234 	.word	0x20400234
  4006e8:	20400515 	.word	0x20400515
  4006ec:	00400621 	.word	0x00400621
  4006f0:	204004e8 	.word	0x204004e8
  4006f4:	00405e3c 	.word	0x00405e3c
  4006f8:	00403e75 	.word	0x00403e75
  4006fc:	20400524 	.word	0x20400524
  400700:	00405e70 	.word	0x00405e70

00400704 <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  400704:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400706:	4906      	ldr	r1, [pc, #24]	; (400720 <dma_adc_1_enable_for_one_transaction+0x1c>)
  400708:	2001      	movs	r0, #1
  40070a:	4b06      	ldr	r3, [pc, #24]	; (400724 <dma_adc_1_enable_for_one_transaction+0x20>)
  40070c:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  40070e:	2110      	movs	r1, #16
  400710:	2001      	movs	r0, #1
  400712:	4b05      	ldr	r3, [pc, #20]	; (400728 <dma_adc_1_enable_for_one_transaction+0x24>)
  400714:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  400716:	2101      	movs	r1, #1
  400718:	4608      	mov	r0, r1
  40071a:	4b04      	ldr	r3, [pc, #16]	; (40072c <dma_adc_1_enable_for_one_transaction+0x28>)
  40071c:	4798      	blx	r3
  40071e:	bd08      	pop	{r3, pc}
  400720:	20400250 	.word	0x20400250
  400724:	004028f9 	.word	0x004028f9
  400728:	00402919 	.word	0x00402919
  40072c:	00402931 	.word	0x00402931

00400730 <dma_adc_1_callback>:
static void dma_adc_1_callback(struct _dma_resource *resource){
  400730:	b530      	push	{r4, r5, lr}
  400732:	b083      	sub	sp, #12
	has_1_triggered = true;
  400734:	2201      	movs	r2, #1
  400736:	4b23      	ldr	r3, [pc, #140]	; (4007c4 <dma_adc_1_callback+0x94>)
  400738:	701a      	strb	r2, [r3, #0]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  40073a:	2300      	movs	r3, #0
  40073c:	e008      	b.n	400750 <dma_adc_1_callback+0x20>
				raw_currents[2] = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  40073e:	b292      	uxth	r2, r2
  400740:	4921      	ldr	r1, [pc, #132]	; (4007c8 <dma_adc_1_callback+0x98>)
  400742:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  400744:	4921      	ldr	r1, [pc, #132]	; (4007cc <dma_adc_1_callback+0x9c>)
  400746:	7e0a      	ldrb	r2, [r1, #24]
  400748:	f042 0204 	orr.w	r2, r2, #4
  40074c:	760a      	strb	r2, [r1, #24]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  40074e:	3301      	adds	r3, #1
  400750:	2b03      	cmp	r3, #3
  400752:	dc14      	bgt.n	40077e <dma_adc_1_callback+0x4e>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400754:	4a1d      	ldr	r2, [pc, #116]	; (4007cc <dma_adc_1_callback+0x9c>)
  400756:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  40075a:	69d2      	ldr	r2, [r2, #28]
  40075c:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400760:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  400764:	d0eb      	beq.n	40073e <dma_adc_1_callback+0xe>
  400766:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  40076a:	d1f0      	bne.n	40074e <dma_adc_1_callback+0x1e>
				raw_voltage = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  40076c:	b292      	uxth	r2, r2
  40076e:	4918      	ldr	r1, [pc, #96]	; (4007d0 <dma_adc_1_callback+0xa0>)
  400770:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<3);
  400772:	4916      	ldr	r1, [pc, #88]	; (4007cc <dma_adc_1_callback+0x9c>)
  400774:	7e0a      	ldrb	r2, [r1, #24]
  400776:	f042 0208 	orr.w	r2, r2, #8
  40077a:	760a      	strb	r2, [r1, #24]
				break;
  40077c:	e7e7      	b.n	40074e <dma_adc_1_callback+0x1e>
	if(is_dma_adc_1_continuous){
  40077e:	4b15      	ldr	r3, [pc, #84]	; (4007d4 <dma_adc_1_callback+0xa4>)
  400780:	781b      	ldrb	r3, [r3, #0]
  400782:	b92b      	cbnz	r3, 400790 <dma_adc_1_callback+0x60>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  400784:	4b11      	ldr	r3, [pc, #68]	; (4007cc <dma_adc_1_callback+0x9c>)
  400786:	7e1b      	ldrb	r3, [r3, #24]
  400788:	2b0f      	cmp	r3, #15
  40078a:	d004      	beq.n	400796 <dma_adc_1_callback+0x66>
}
  40078c:	b003      	add	sp, #12
  40078e:	bd30      	pop	{r4, r5, pc}
		dma_adc_1_enable_for_one_transaction();
  400790:	4b11      	ldr	r3, [pc, #68]	; (4007d8 <dma_adc_1_callback+0xa8>)
  400792:	4798      	blx	r3
  400794:	e7f6      	b.n	400784 <dma_adc_1_callback+0x54>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  400796:	4b11      	ldr	r3, [pc, #68]	; (4007dc <dma_adc_1_callback+0xac>)
  400798:	781b      	ldrb	r3, [r3, #0]
  40079a:	2b00      	cmp	r3, #0
  40079c:	d0f6      	beq.n	40078c <dma_adc_1_callback+0x5c>
		ready_values = 0;
  40079e:	2200      	movs	r2, #0
  4007a0:	4b0a      	ldr	r3, [pc, #40]	; (4007cc <dma_adc_1_callback+0x9c>)
  4007a2:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 1 \n");
  4007a4:	480e      	ldr	r0, [pc, #56]	; (4007e0 <dma_adc_1_callback+0xb0>)
  4007a6:	4c0f      	ldr	r4, [pc, #60]	; (4007e4 <dma_adc_1_callback+0xb4>)
  4007a8:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  4007aa:	4807      	ldr	r0, [pc, #28]	; (4007c8 <dma_adc_1_callback+0x98>)
  4007ac:	6843      	ldr	r3, [r0, #4]
  4007ae:	6802      	ldr	r2, [r0, #0]
  4007b0:	4907      	ldr	r1, [pc, #28]	; (4007d0 <dma_adc_1_callback+0xa0>)
  4007b2:	6809      	ldr	r1, [r1, #0]
  4007b4:	68c5      	ldr	r5, [r0, #12]
  4007b6:	9501      	str	r5, [sp, #4]
  4007b8:	6880      	ldr	r0, [r0, #8]
  4007ba:	9000      	str	r0, [sp, #0]
  4007bc:	480a      	ldr	r0, [pc, #40]	; (4007e8 <dma_adc_1_callback+0xb8>)
  4007be:	47a0      	blx	r4
}
  4007c0:	e7e4      	b.n	40078c <dma_adc_1_callback+0x5c>
  4007c2:	bf00      	nop
  4007c4:	204004e9 	.word	0x204004e9
  4007c8:	20400518 	.word	0x20400518
  4007cc:	20400234 	.word	0x20400234
  4007d0:	20400524 	.word	0x20400524
  4007d4:	20400514 	.word	0x20400514
  4007d8:	00400705 	.word	0x00400705
  4007dc:	204004e8 	.word	0x204004e8
  4007e0:	00405e80 	.word	0x00405e80
  4007e4:	00403e75 	.word	0x00403e75
  4007e8:	00405e70 	.word	0x00405e70

004007ec <dma_adc_0_disable_continuously>:
	is_dma_adc_1_continuous = true;
	dma_adc_1_enable_for_one_transaction();
}

void dma_adc_0_disable_continuously(void){
	is_dma_adc_0_continuous = false;
  4007ec:	2200      	movs	r2, #0
  4007ee:	4b01      	ldr	r3, [pc, #4]	; (4007f4 <dma_adc_0_disable_continuously+0x8>)
  4007f0:	701a      	strb	r2, [r3, #0]
  4007f2:	4770      	bx	lr
  4007f4:	20400515 	.word	0x20400515

004007f8 <dma_adc_1_disable_continuously>:
}
void dma_adc_1_disable_continuously(void){
	is_dma_adc_1_continuous = false;
  4007f8:	2200      	movs	r2, #0
  4007fa:	4b01      	ldr	r3, [pc, #4]	; (400800 <dma_adc_1_disable_continuously+0x8>)
  4007fc:	701a      	strb	r2, [r3, #0]
  4007fe:	4770      	bx	lr
  400800:	20400514 	.word	0x20400514

00400804 <dma_adc_init>:
void dma_adc_init(void){
  400804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  400808:	492a      	ldr	r1, [pc, #168]	; (4008b4 <dma_adc_init+0xb0>)
  40080a:	2000      	movs	r0, #0
  40080c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 4008e8 <dma_adc_init+0xe4>
  400810:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  400812:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4008ec <dma_adc_init+0xe8>
  400816:	4641      	mov	r1, r8
  400818:	2000      	movs	r0, #0
  40081a:	4f27      	ldr	r7, [pc, #156]	; (4008b8 <dma_adc_init+0xb4>)
  40081c:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  40081e:	2118      	movs	r1, #24
  400820:	2000      	movs	r0, #0
  400822:	4d26      	ldr	r5, [pc, #152]	; (4008bc <dma_adc_init+0xb8>)
  400824:	47a8      	blx	r5
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  400826:	2100      	movs	r1, #0
  400828:	460c      	mov	r4, r1
  40082a:	4608      	mov	r0, r1
  40082c:	4e24      	ldr	r6, [pc, #144]	; (4008c0 <dma_adc_init+0xbc>)
  40082e:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  400830:	6823      	ldr	r3, [r4, #0]
  400832:	4a24      	ldr	r2, [pc, #144]	; (4008c4 <dma_adc_init+0xc0>)
  400834:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400836:	2201      	movs	r2, #1
  400838:	4621      	mov	r1, r4
  40083a:	4620      	mov	r0, r4
  40083c:	4c22      	ldr	r4, [pc, #136]	; (4008c8 <dma_adc_init+0xc4>)
  40083e:	47a0      	blx	r4
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  400840:	4922      	ldr	r1, [pc, #136]	; (4008cc <dma_adc_init+0xc8>)
  400842:	2001      	movs	r0, #1
  400844:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400846:	f108 011c 	add.w	r1, r8, #28
  40084a:	2001      	movs	r0, #1
  40084c:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  40084e:	2110      	movs	r1, #16
  400850:	2001      	movs	r0, #1
  400852:	47a8      	blx	r5
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  400854:	2101      	movs	r1, #1
  400856:	2500      	movs	r5, #0
  400858:	4628      	mov	r0, r5
  40085a:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  40085c:	682b      	ldr	r3, [r5, #0]
  40085e:	4a1c      	ldr	r2, [pc, #112]	; (4008d0 <dma_adc_init+0xcc>)
  400860:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400862:	2201      	movs	r2, #1
  400864:	4629      	mov	r1, r5
  400866:	4610      	mov	r0, r2
  400868:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40086a:	4b1a      	ldr	r3, [pc, #104]	; (4008d4 <dma_adc_init+0xd0>)
  40086c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400870:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400872:	2280      	movs	r2, #128	; 0x80
  400874:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400878:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40087c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400884:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400888:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40088c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400894:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400898:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40089c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	dma_adc_0_disable_continuously();
  4008a0:	4b0d      	ldr	r3, [pc, #52]	; (4008d8 <dma_adc_init+0xd4>)
  4008a2:	4798      	blx	r3
	dma_adc_1_disable_continuously();
  4008a4:	4b0d      	ldr	r3, [pc, #52]	; (4008dc <dma_adc_init+0xd8>)
  4008a6:	4798      	blx	r3
	has_0_triggered = false;
  4008a8:	4a0d      	ldr	r2, [pc, #52]	; (4008e0 <dma_adc_init+0xdc>)
  4008aa:	7015      	strb	r5, [r2, #0]
	has_1_triggered = false;
  4008ac:	4a0d      	ldr	r2, [pc, #52]	; (4008e4 <dma_adc_init+0xe0>)
  4008ae:	7015      	strb	r5, [r2, #0]
  4008b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008b4:	4003c020 	.word	0x4003c020
  4008b8:	004028f9 	.word	0x004028f9
  4008bc:	00402919 	.word	0x00402919
  4008c0:	00402949 	.word	0x00402949
  4008c4:	0040064d 	.word	0x0040064d
  4008c8:	0040295d 	.word	0x0040295d
  4008cc:	40064020 	.word	0x40064020
  4008d0:	00400731 	.word	0x00400731
  4008d4:	e000e100 	.word	0xe000e100
  4008d8:	004007ed 	.word	0x004007ed
  4008dc:	004007f9 	.word	0x004007f9
  4008e0:	2040050c 	.word	0x2040050c
  4008e4:	204004e9 	.word	0x204004e9
  4008e8:	00402909 	.word	0x00402909
  4008ec:	20400234 	.word	0x20400234

004008f0 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  4008f0:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  4008f2:	4d11      	ldr	r5, [pc, #68]	; (400938 <adc_enable_all+0x48>)
  4008f4:	2108      	movs	r1, #8
  4008f6:	4628      	mov	r0, r5
  4008f8:	4c10      	ldr	r4, [pc, #64]	; (40093c <adc_enable_all+0x4c>)
  4008fa:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  4008fc:	2102      	movs	r1, #2
  4008fe:	4628      	mov	r0, r5
  400900:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  400902:	4e0f      	ldr	r6, [pc, #60]	; (400940 <adc_enable_all+0x50>)
  400904:	2101      	movs	r1, #1
  400906:	4630      	mov	r0, r6
  400908:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  40090a:	2106      	movs	r1, #6
  40090c:	4630      	mov	r0, r6
  40090e:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  400910:	2105      	movs	r1, #5
  400912:	4630      	mov	r0, r6
  400914:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  400916:	2106      	movs	r1, #6
  400918:	4628      	mov	r0, r5
  40091a:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  40091c:	210a      	movs	r1, #10
  40091e:	4628      	mov	r0, r5
  400920:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  400922:	2100      	movs	r1, #0
  400924:	4630      	mov	r0, r6
  400926:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  400928:	2105      	movs	r1, #5
  40092a:	4628      	mov	r0, r5
  40092c:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  40092e:	2100      	movs	r1, #0
  400930:	4628      	mov	r0, r5
  400932:	47a0      	blx	r4
  400934:	bd70      	pop	{r4, r5, r6, pc}
  400936:	bf00      	nop
  400938:	20400610 	.word	0x20400610
  40093c:	004012cd 	.word	0x004012cd
  400940:	204006e8 	.word	0x204006e8

00400944 <adc_read>:
	adc_async_disable_channel(ADC_TEMP_MOTOR);
}


//reads data from the DMA buffers
int adc_read(struct adc_async_descriptor *const descr, const uint8_t channel){
  400944:	b410      	push	{r4}
	//null checking variable to see if a write has occured
	has_0_triggered = false;
  400946:	2300      	movs	r3, #0
  400948:	4a17      	ldr	r2, [pc, #92]	; (4009a8 <adc_read+0x64>)
  40094a:	7013      	strb	r3, [r2, #0]
	has_1_triggered = false;
  40094c:	4a17      	ldr	r2, [pc, #92]	; (4009ac <adc_read+0x68>)
  40094e:	7013      	strb	r3, [r2, #0]
	
		
	if (descr == (&ADC_0)){
  400950:	4b17      	ldr	r3, [pc, #92]	; (4009b0 <adc_read+0x6c>)
  400952:	4298      	cmp	r0, r3
  400954:	d008      	beq.n	400968 <adc_read+0x24>
				return temp;
			}
		}
	}
	
	if (descr == (&ADC_1)){
  400956:	4b17      	ldr	r3, [pc, #92]	; (4009b4 <adc_read+0x70>)
  400958:	4298      	cmp	r0, r3
  40095a:	d014      	beq.n	400986 <adc_read+0x42>
			}
		}
	}
	
	
	return 0;
  40095c:	2000      	movs	r0, #0
  40095e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400962:	4770      	bx	lr
				int temp = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400964:	b298      	uxth	r0, r3
  400966:	e7fa      	b.n	40095e <adc_read+0x1a>
  400968:	2200      	movs	r2, #0
		for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  40096a:	2a05      	cmp	r2, #5
  40096c:	dcf3      	bgt.n	400956 <adc_read+0x12>
			if((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk) == AFEC_LCDR_CHNB(channel)){
  40096e:	4b12      	ldr	r3, [pc, #72]	; (4009b8 <adc_read+0x74>)
  400970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400974:	ea83 6401 	eor.w	r4, r3, r1, lsl #24
  400978:	f014 6f70 	tst.w	r4, #251658240	; 0xf000000
  40097c:	d0f2      	beq.n	400964 <adc_read+0x20>
		for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  40097e:	3201      	adds	r2, #1
  400980:	e7f3      	b.n	40096a <adc_read+0x26>
				int temp = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400982:	b280      	uxth	r0, r0
  400984:	e7eb      	b.n	40095e <adc_read+0x1a>
  400986:	2300      	movs	r3, #0
		for (int i =0; i<ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400988:	2b03      	cmp	r3, #3
  40098a:	dc0a      	bgt.n	4009a2 <adc_read+0x5e>
			if((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk) == AFEC_LCDR_CHNB(channel)){
  40098c:	4a0a      	ldr	r2, [pc, #40]	; (4009b8 <adc_read+0x74>)
  40098e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  400992:	69d0      	ldr	r0, [r2, #28]
  400994:	ea80 6201 	eor.w	r2, r0, r1, lsl #24
  400998:	f012 6f70 	tst.w	r2, #251658240	; 0xf000000
  40099c:	d0f1      	beq.n	400982 <adc_read+0x3e>
		for (int i =0; i<ADC_1_NUM_ACTIVE_CHANNELS; i++){
  40099e:	3301      	adds	r3, #1
  4009a0:	e7f2      	b.n	400988 <adc_read+0x44>
	return 0;
  4009a2:	2000      	movs	r0, #0
  4009a4:	e7db      	b.n	40095e <adc_read+0x1a>
  4009a6:	bf00      	nop
  4009a8:	2040050c 	.word	0x2040050c
  4009ac:	204004e9 	.word	0x204004e9
  4009b0:	20400610 	.word	0x20400610
  4009b4:	204006e8 	.word	0x204006e8
  4009b8:	20400234 	.word	0x20400234

004009bc <pwm_0_callback>:
#include <hpl_pwm.h>
#include <hpl_pwm_config.h>

int counter = 0;

void pwm_0_callback(const struct pwm_descriptor *const descr){
  4009bc:	4770      	bx	lr
	...

004009c0 <pwm_init_user>:
	}
	*/
}


void pwm_init_user(void){
  4009c0:	b508      	push	{r3, lr}
}

static inline void hri_pwm_set_CMR_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmr_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  4009c2:	4b2e      	ldr	r3, [pc, #184]	; (400a7c <pwm_init_user+0xbc>)
  4009c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  4009c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4009cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}

static inline void hri_pwm_set_DT_DTH_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  4009d0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  4009d4:	f042 020a 	orr.w	r2, r2, #10
  4009d8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
}

static inline void hri_pwm_set_DT_DTL_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  4009dc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  4009e0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  4009e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  4009e8:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
  4009ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4009f0:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  4009f4:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  4009f8:	f042 020a 	orr.w	r2, r2, #10
  4009fc:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400a00:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400a04:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  400a08:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400a0c:	4a1c      	ldr	r2, [pc, #112]	; (400a80 <pwm_init_user+0xc0>)
  400a0e:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  400a12:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  400a16:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400a1a:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400a1e:	f041 010a 	orr.w	r1, r1, #10
  400a22:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400a26:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400a2a:	f441 2120 	orr.w	r1, r1, #655360	; 0xa0000
  400a2e:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
}

static inline void hri_pwm_set_CMPV_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmpv_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV |= mask;
  400a32:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
  400a36:	f041 0101 	orr.w	r1, r1, #1
  400a3a:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  400a3e:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
  400a42:	f041 0101 	orr.w	r1, r1, #1
  400a46:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  400a4a:	2201      	movs	r2, #1
  400a4c:	611a      	str	r2, [r3, #16]
	
	
	//we want interrupt from one of the PWMs so that we can start the control loop
	//interrupt on PWM 0, channel 0 is enabled ; on PWM 1 is disabled
	hri_pwm_set_IMR1_CHID0_bit(PWM0);									//enable the interrupt from ADC 0, channel 0
	pwm_register_callback(&PWM_0, PWM_PERIOD_CB, pwm_0_callback);
  400a4e:	4a0d      	ldr	r2, [pc, #52]	; (400a84 <pwm_init_user+0xc4>)
  400a50:	2100      	movs	r1, #0
  400a52:	480d      	ldr	r0, [pc, #52]	; (400a88 <pwm_init_user+0xc8>)
  400a54:	4b0d      	ldr	r3, [pc, #52]	; (400a8c <pwm_init_user+0xcc>)
  400a56:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a58:	4b0d      	ldr	r3, [pc, #52]	; (400a90 <pwm_init_user+0xd0>)
  400a5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400a5e:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400a60:	2260      	movs	r2, #96	; 0x60
  400a62:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400a6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a72:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a76:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400a7a:	bd08      	pop	{r3, pc}
  400a7c:	40020000 	.word	0x40020000
  400a80:	4005c000 	.word	0x4005c000
  400a84:	004009bd 	.word	0x004009bd
  400a88:	20400528 	.word	0x20400528
  400a8c:	004015d5 	.word	0x004015d5
  400a90:	e000e100 	.word	0xe000e100

00400a94 <pwm_enable_all>:
}


//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400a94:	b570      	push	{r4, r5, r6, lr}
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM |= mask;
  400a96:	4a12      	ldr	r2, [pc, #72]	; (400ae0 <pwm_enable_all+0x4c>)
  400a98:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400a9c:	f043 0301 	orr.w	r3, r3, #1
  400aa0:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
  400aa4:	f502 3270 	add.w	r2, r2, #245760	; 0x3c000
  400aa8:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400aac:	f043 0301 	orr.w	r3, r3, #1
  400ab0:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	hri_pwm_set_CMPM_reg(PWM0, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	hri_pwm_set_CMPM_reg(PWM1, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  400ab4:	4c0b      	ldr	r4, [pc, #44]	; (400ae4 <pwm_enable_all+0x50>)
  400ab6:	4620      	mov	r0, r4
  400ab8:	4e0b      	ldr	r6, [pc, #44]	; (400ae8 <pwm_enable_all+0x54>)
  400aba:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  400abc:	4d0b      	ldr	r5, [pc, #44]	; (400aec <pwm_enable_all+0x58>)
  400abe:	4628      	mov	r0, r5
  400ac0:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  400ac2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400ac6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400aca:	4620      	mov	r0, r4
  400acc:	4c08      	ldr	r4, [pc, #32]	; (400af0 <pwm_enable_all+0x5c>)
  400ace:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD>>1);
  400ad0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400ad4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400ad8:	4628      	mov	r0, r5
  400ada:	47a0      	blx	r4
  400adc:	bd70      	pop	{r4, r5, r6, pc}
  400ade:	bf00      	nop
  400ae0:	40020000 	.word	0x40020000
  400ae4:	20400528 	.word	0x20400528
  400ae8:	0040155d 	.word	0x0040155d
  400aec:	204006cc 	.word	0x204006cc
  400af0:	0040161d 	.word	0x0040161d

00400af4 <pwm_set_duty>:
//sets individual channel pwm duty cycle
void pwm_set_duty(struct  pwm_descriptor * const descr, const uint8_t channel, const pwm_period_t duty_cycle){
	// based on available code from <hpl_pwm.h>
	// the default function doesn't allow to set the PWM cycle on individual channels
	
	hri_pwm_write_CDTYUPD_reg(descr->device.hw, channel, duty_cycle);
  400af4:	6903      	ldr	r3, [r0, #16]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  400af6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  400afa:	f8c1 2208 	str.w	r2, [r1, #520]	; 0x208
  400afe:	4770      	bx	lr

00400b00 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400b00:	e7fe      	b.n	400b00 <Dummy_Handler>
	...

00400b04 <Reset_Handler>:
{
  400b04:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400b06:	4b10      	ldr	r3, [pc, #64]	; (400b48 <Reset_Handler+0x44>)
  400b08:	4a10      	ldr	r2, [pc, #64]	; (400b4c <Reset_Handler+0x48>)
  400b0a:	429a      	cmp	r2, r3
  400b0c:	d009      	beq.n	400b22 <Reset_Handler+0x1e>
  400b0e:	4b0e      	ldr	r3, [pc, #56]	; (400b48 <Reset_Handler+0x44>)
  400b10:	4a0e      	ldr	r2, [pc, #56]	; (400b4c <Reset_Handler+0x48>)
  400b12:	e003      	b.n	400b1c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400b14:	6811      	ldr	r1, [r2, #0]
  400b16:	6019      	str	r1, [r3, #0]
  400b18:	3304      	adds	r3, #4
  400b1a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400b1c:	490c      	ldr	r1, [pc, #48]	; (400b50 <Reset_Handler+0x4c>)
  400b1e:	428b      	cmp	r3, r1
  400b20:	d3f8      	bcc.n	400b14 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400b22:	4b0c      	ldr	r3, [pc, #48]	; (400b54 <Reset_Handler+0x50>)
  400b24:	e002      	b.n	400b2c <Reset_Handler+0x28>
                *pDest++ = 0;
  400b26:	2200      	movs	r2, #0
  400b28:	601a      	str	r2, [r3, #0]
  400b2a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400b2c:	4a0a      	ldr	r2, [pc, #40]	; (400b58 <Reset_Handler+0x54>)
  400b2e:	4293      	cmp	r3, r2
  400b30:	d3f9      	bcc.n	400b26 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400b32:	4a0a      	ldr	r2, [pc, #40]	; (400b5c <Reset_Handler+0x58>)
  400b34:	4b0a      	ldr	r3, [pc, #40]	; (400b60 <Reset_Handler+0x5c>)
  400b36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400b3a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400b3c:	4b09      	ldr	r3, [pc, #36]	; (400b64 <Reset_Handler+0x60>)
  400b3e:	4798      	blx	r3
        main();
  400b40:	4b09      	ldr	r3, [pc, #36]	; (400b68 <Reset_Handler+0x64>)
  400b42:	4798      	blx	r3
  400b44:	e7fe      	b.n	400b44 <Reset_Handler+0x40>
  400b46:	bf00      	nop
  400b48:	20400000 	.word	0x20400000
  400b4c:	00406568 	.word	0x00406568
  400b50:	20400218 	.word	0x20400218
  400b54:	20400218 	.word	0x20400218
  400b58:	20400718 	.word	0x20400718
  400b5c:	e000ed00 	.word	0xe000ed00
  400b60:	00400000 	.word	0x00400000
  400b64:	00403549 	.word	0x00403549
  400b68:	00402a21 	.word	0x00402a21

00400b6c <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  400b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b6e:	b085      	sub	sp, #20
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400b70:	4b20      	ldr	r3, [pc, #128]	; (400bf4 <ADC_1_init+0x88>)
  400b72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  400b76:	f413 7f80 	tst.w	r3, #256	; 0x100
  400b7a:	d104      	bne.n	400b86 <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400b80:	4b1c      	ldr	r3, [pc, #112]	; (400bf4 <ADC_1_init+0x88>)
  400b82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  400b86:	4d1c      	ldr	r5, [pc, #112]	; (400bf8 <ADC_1_init+0x8c>)
  400b88:	4c1c      	ldr	r4, [pc, #112]	; (400bfc <ADC_1_init+0x90>)
  400b8a:	2600      	movs	r6, #0
  400b8c:	9602      	str	r6, [sp, #8]
  400b8e:	4b1c      	ldr	r3, [pc, #112]	; (400c00 <ADC_1_init+0x94>)
  400b90:	9301      	str	r3, [sp, #4]
  400b92:	2304      	movs	r3, #4
  400b94:	9300      	str	r3, [sp, #0]
  400b96:	2306      	movs	r3, #6
  400b98:	462a      	mov	r2, r5
  400b9a:	491a      	ldr	r1, [pc, #104]	; (400c04 <ADC_1_init+0x98>)
  400b9c:	4620      	mov	r0, r4
  400b9e:	4f1a      	ldr	r7, [pc, #104]	; (400c08 <ADC_1_init+0x9c>)
  400ba0:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  400ba2:	2310      	movs	r3, #16
  400ba4:	f105 0208 	add.w	r2, r5, #8
  400ba8:	4631      	mov	r1, r6
  400baa:	4620      	mov	r0, r4
  400bac:	4e17      	ldr	r6, [pc, #92]	; (400c0c <ADC_1_init+0xa0>)
  400bae:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  400bb0:	2310      	movs	r3, #16
  400bb2:	f105 0218 	add.w	r2, r5, #24
  400bb6:	2101      	movs	r1, #1
  400bb8:	4620      	mov	r0, r4
  400bba:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  400bbc:	2310      	movs	r3, #16
  400bbe:	f105 0228 	add.w	r2, r5, #40	; 0x28
  400bc2:	2105      	movs	r1, #5
  400bc4:	4620      	mov	r0, r4
  400bc6:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  400bc8:	2310      	movs	r3, #16
  400bca:	f105 0238 	add.w	r2, r5, #56	; 0x38
  400bce:	2106      	movs	r1, #6
  400bd0:	4620      	mov	r0, r4
  400bd2:	47b0      	blx	r6
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400bd4:	2202      	movs	r2, #2
  400bd6:	4b0e      	ldr	r3, [pc, #56]	; (400c10 <ADC_1_init+0xa4>)
  400bd8:	601a      	str	r2, [r3, #0]
  400bda:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400be2:	601a      	str	r2, [r3, #0]
  400be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400be8:	601a      	str	r2, [r3, #0]
  400bea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400bee:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  400bf0:	b005      	add	sp, #20
  400bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400bf4:	400e0600 	.word	0x400e0600
  400bf8:	20400260 	.word	0x20400260
  400bfc:	204006e8 	.word	0x204006e8
  400c00:	20400588 	.word	0x20400588
  400c04:	40064000 	.word	0x40064000
  400c08:	0040116d 	.word	0x0040116d
  400c0c:	00401215 	.word	0x00401215
  400c10:	400e1000 	.word	0x400e1000

00400c14 <ADC_0_init>:
{
  400c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c18:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400c1a:	4b2a      	ldr	r3, [pc, #168]	; (400cc4 <ADC_0_init+0xb0>)
  400c1c:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400c1e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400c22:	d103      	bne.n	400c2c <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400c24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400c28:	4b26      	ldr	r3, [pc, #152]	; (400cc4 <ADC_0_init+0xb0>)
  400c2a:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  400c2c:	4d26      	ldr	r5, [pc, #152]	; (400cc8 <ADC_0_init+0xb4>)
  400c2e:	4c27      	ldr	r4, [pc, #156]	; (400ccc <ADC_0_init+0xb8>)
  400c30:	2600      	movs	r6, #0
  400c32:	9602      	str	r6, [sp, #8]
  400c34:	4b26      	ldr	r3, [pc, #152]	; (400cd0 <ADC_0_init+0xbc>)
  400c36:	9301      	str	r3, [sp, #4]
  400c38:	2706      	movs	r7, #6
  400c3a:	9700      	str	r7, [sp, #0]
  400c3c:	230a      	movs	r3, #10
  400c3e:	f105 0248 	add.w	r2, r5, #72	; 0x48
  400c42:	4924      	ldr	r1, [pc, #144]	; (400cd4 <ADC_0_init+0xc0>)
  400c44:	4620      	mov	r0, r4
  400c46:	f8df 809c 	ldr.w	r8, [pc, #156]	; 400ce4 <ADC_0_init+0xd0>
  400c4a:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  400c4c:	2310      	movs	r3, #16
  400c4e:	f105 0254 	add.w	r2, r5, #84	; 0x54
  400c52:	4631      	mov	r1, r6
  400c54:	4620      	mov	r0, r4
  400c56:	4e20      	ldr	r6, [pc, #128]	; (400cd8 <ADC_0_init+0xc4>)
  400c58:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  400c5a:	2310      	movs	r3, #16
  400c5c:	f105 0264 	add.w	r2, r5, #100	; 0x64
  400c60:	2102      	movs	r1, #2
  400c62:	4620      	mov	r0, r4
  400c64:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  400c66:	2310      	movs	r3, #16
  400c68:	f105 0274 	add.w	r2, r5, #116	; 0x74
  400c6c:	2105      	movs	r1, #5
  400c6e:	4620      	mov	r0, r4
  400c70:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  400c72:	2310      	movs	r3, #16
  400c74:	f105 0284 	add.w	r2, r5, #132	; 0x84
  400c78:	4639      	mov	r1, r7
  400c7a:	4620      	mov	r0, r4
  400c7c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  400c7e:	2310      	movs	r3, #16
  400c80:	f105 0294 	add.w	r2, r5, #148	; 0x94
  400c84:	2108      	movs	r1, #8
  400c86:	4620      	mov	r0, r4
  400c88:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  400c8a:	2310      	movs	r3, #16
  400c8c:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  400c90:	210a      	movs	r1, #10
  400c92:	4620      	mov	r0, r4
  400c94:	47b0      	blx	r6
  400c96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400c9a:	4b10      	ldr	r3, [pc, #64]	; (400cdc <ADC_0_init+0xc8>)
  400c9c:	601a      	str	r2, [r3, #0]
  400c9e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400ca2:	2208      	movs	r2, #8
  400ca4:	601a      	str	r2, [r3, #0]
  400ca6:	2204      	movs	r2, #4
  400ca8:	601a      	str	r2, [r3, #0]
  400caa:	4a0d      	ldr	r2, [pc, #52]	; (400ce0 <ADC_0_init+0xcc>)
  400cac:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400cb0:	6011      	str	r1, [r2, #0]
  400cb2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400cb6:	6011      	str	r1, [r2, #0]
  400cb8:	2201      	movs	r2, #1
  400cba:	601a      	str	r2, [r3, #0]
}
  400cbc:	b004      	add	sp, #16
  400cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400cc2:	bf00      	nop
  400cc4:	400e0600 	.word	0x400e0600
  400cc8:	20400260 	.word	0x20400260
  400ccc:	20400610 	.word	0x20400610
  400cd0:	2040063c 	.word	0x2040063c
  400cd4:	4003c000 	.word	0x4003c000
  400cd8:	00401215 	.word	0x00401215
  400cdc:	400e1400 	.word	0x400e1400
  400ce0:	400e0e00 	.word	0x400e0e00
  400ce4:	0040116d 	.word	0x0040116d

00400ce8 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400ce8:	4b04      	ldr	r3, [pc, #16]	; (400cfc <EXTERNAL_IRQ_D_init+0x14>)
  400cea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400cee:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  400cf0:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  400cf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400cf6:	601a      	str	r2, [r3, #0]
  400cf8:	4770      	bx	lr
  400cfa:	bf00      	nop
  400cfc:	400e1400 	.word	0x400e1400

00400d00 <EXTERNAL_IRQ_B_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400d00:	4b04      	ldr	r3, [pc, #16]	; (400d14 <EXTERNAL_IRQ_B_init+0x14>)
  400d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400d06:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400d08:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400d0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400d0e:	601a      	str	r2, [r3, #0]
  400d10:	4770      	bx	lr
  400d12:	bf00      	nop
  400d14:	400e1000 	.word	0x400e1000

00400d18 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400d18:	4b06      	ldr	r3, [pc, #24]	; (400d34 <EXTERNAL_IRQ_A_init+0x1c>)
  400d1a:	2204      	movs	r2, #4
  400d1c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400d1e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400d20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400d24:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400d26:	2220      	movs	r2, #32
  400d28:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400d2a:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400d2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400d30:	601a      	str	r2, [r3, #0]
  400d32:	4770      	bx	lr
  400d34:	400e0e00 	.word	0x400e0e00

00400d38 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400d38:	4b16      	ldr	r3, [pc, #88]	; (400d94 <PWM_0_PORT_init+0x5c>)
  400d3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400d40:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d42:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d44:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  400d48:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400d4e:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400d50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d52:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  400d56:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d58:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d5a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400d5e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400d64:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d68:	f022 0202 	bic.w	r2, r2, #2
  400d6c:	671a      	str	r2, [r3, #112]	; 0x70
  400d6e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d70:	f022 0202 	bic.w	r2, r2, #2
  400d74:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d76:	2202      	movs	r2, #2
  400d78:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d7c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400d80:	671a      	str	r2, [r3, #112]	; 0x70
  400d82:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d84:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400d88:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400d8e:	605a      	str	r2, [r3, #4]
  400d90:	4770      	bx	lr
  400d92:	bf00      	nop
  400d94:	400e0e00 	.word	0x400e0e00

00400d98 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400d98:	4b04      	ldr	r3, [pc, #16]	; (400dac <PWM_0_CLOCK_init+0x14>)
  400d9a:	699b      	ldr	r3, [r3, #24]
  400d9c:	2b00      	cmp	r3, #0
  400d9e:	db03      	blt.n	400da8 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400da0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400da4:	4b01      	ldr	r3, [pc, #4]	; (400dac <PWM_0_CLOCK_init+0x14>)
  400da6:	611a      	str	r2, [r3, #16]
  400da8:	4770      	bx	lr
  400daa:	bf00      	nop
  400dac:	400e0600 	.word	0x400e0600

00400db0 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400db0:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  400db2:	4b06      	ldr	r3, [pc, #24]	; (400dcc <PWM_0_init+0x1c>)
  400db4:	4798      	blx	r3
	PWM_0_PORT_init();
  400db6:	4b06      	ldr	r3, [pc, #24]	; (400dd0 <PWM_0_init+0x20>)
  400db8:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400dba:	4b06      	ldr	r3, [pc, #24]	; (400dd4 <PWM_0_init+0x24>)
  400dbc:	4798      	blx	r3
  400dbe:	4602      	mov	r2, r0
  400dc0:	4905      	ldr	r1, [pc, #20]	; (400dd8 <PWM_0_init+0x28>)
  400dc2:	4806      	ldr	r0, [pc, #24]	; (400ddc <PWM_0_init+0x2c>)
  400dc4:	4b06      	ldr	r3, [pc, #24]	; (400de0 <PWM_0_init+0x30>)
  400dc6:	4798      	blx	r3
  400dc8:	bd08      	pop	{r3, pc}
  400dca:	bf00      	nop
  400dcc:	00400d99 	.word	0x00400d99
  400dd0:	00400d39 	.word	0x00400d39
  400dd4:	00402469 	.word	0x00402469
  400dd8:	40020000 	.word	0x40020000
  400ddc:	20400528 	.word	0x20400528
  400de0:	00401519 	.word	0x00401519

00400de4 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400de4:	4b0c      	ldr	r3, [pc, #48]	; (400e18 <PWM_1_PORT_init+0x34>)
  400de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400de8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400dec:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400dee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400df0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400df4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400df6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400dfa:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400dfc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400e00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e02:	f042 0201 	orr.w	r2, r2, #1
  400e06:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400e08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e0a:	f022 0201 	bic.w	r2, r2, #1
  400e0e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e10:	2201      	movs	r2, #1
  400e12:	605a      	str	r2, [r3, #4]
  400e14:	4770      	bx	lr
  400e16:	bf00      	nop
  400e18:	400e0e00 	.word	0x400e0e00

00400e1c <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400e1c:	4b05      	ldr	r3, [pc, #20]	; (400e34 <PWM_1_CLOCK_init+0x18>)
  400e1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400e22:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  400e26:	d104      	bne.n	400e32 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400e2c:	4b01      	ldr	r3, [pc, #4]	; (400e34 <PWM_1_CLOCK_init+0x18>)
  400e2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400e32:	4770      	bx	lr
  400e34:	400e0600 	.word	0x400e0600

00400e38 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  400e38:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  400e3a:	4b06      	ldr	r3, [pc, #24]	; (400e54 <PWM_1_init+0x1c>)
  400e3c:	4798      	blx	r3
	PWM_1_PORT_init();
  400e3e:	4b06      	ldr	r3, [pc, #24]	; (400e58 <PWM_1_init+0x20>)
  400e40:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400e42:	4b06      	ldr	r3, [pc, #24]	; (400e5c <PWM_1_init+0x24>)
  400e44:	4798      	blx	r3
  400e46:	4602      	mov	r2, r0
  400e48:	4905      	ldr	r1, [pc, #20]	; (400e60 <PWM_1_init+0x28>)
  400e4a:	4806      	ldr	r0, [pc, #24]	; (400e64 <PWM_1_init+0x2c>)
  400e4c:	4b06      	ldr	r3, [pc, #24]	; (400e68 <PWM_1_init+0x30>)
  400e4e:	4798      	blx	r3
  400e50:	bd08      	pop	{r3, pc}
  400e52:	bf00      	nop
  400e54:	00400e1d 	.word	0x00400e1d
  400e58:	00400de5 	.word	0x00400de5
  400e5c:	00402469 	.word	0x00402469
  400e60:	4005c000 	.word	0x4005c000
  400e64:	204006cc 	.word	0x204006cc
  400e68:	00401519 	.word	0x00401519

00400e6c <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400e6c:	4b06      	ldr	r3, [pc, #24]	; (400e88 <ENCODER_A_PORT_init+0x1c>)
  400e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e70:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400e74:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400e76:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e78:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  400e7c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e7e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e82:	605a      	str	r2, [r3, #4]
  400e84:	4770      	bx	lr
  400e86:	bf00      	nop
  400e88:	400e0e00 	.word	0x400e0e00

00400e8c <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  400e8c:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400e8e:	4b09      	ldr	r3, [pc, #36]	; (400eb4 <ENCODER_A_init+0x28>)
  400e90:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400e92:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400e96:	d103      	bne.n	400ea0 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400e98:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400e9c:	4b05      	ldr	r3, [pc, #20]	; (400eb4 <ENCODER_A_init+0x28>)
  400e9e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  400ea0:	4b05      	ldr	r3, [pc, #20]	; (400eb8 <ENCODER_A_init+0x2c>)
  400ea2:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  400ea4:	4b05      	ldr	r3, [pc, #20]	; (400ebc <ENCODER_A_init+0x30>)
  400ea6:	4798      	blx	r3
  400ea8:	4602      	mov	r2, r0
  400eaa:	4905      	ldr	r1, [pc, #20]	; (400ec0 <ENCODER_A_init+0x34>)
  400eac:	4805      	ldr	r0, [pc, #20]	; (400ec4 <ENCODER_A_init+0x38>)
  400eae:	4b06      	ldr	r3, [pc, #24]	; (400ec8 <ENCODER_A_init+0x3c>)
  400eb0:	4798      	blx	r3
  400eb2:	bd08      	pop	{r3, pc}
  400eb4:	400e0600 	.word	0x400e0600
  400eb8:	00400e6d 	.word	0x00400e6d
  400ebc:	0040263f 	.word	0x0040263f
  400ec0:	4000c000 	.word	0x4000c000
  400ec4:	204005f4 	.word	0x204005f4
  400ec8:	00401705 	.word	0x00401705

00400ecc <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400ecc:	4b06      	ldr	r3, [pc, #24]	; (400ee8 <ENCODER_B_PORT_init+0x1c>)
  400ece:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400ed0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  400ed4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400ed6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400ed8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  400edc:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400ede:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400ee2:	605a      	str	r2, [r3, #4]
  400ee4:	4770      	bx	lr
  400ee6:	bf00      	nop
  400ee8:	400e1400 	.word	0x400e1400

00400eec <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  400eec:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400eee:	4b0a      	ldr	r3, [pc, #40]	; (400f18 <ENCODER_B_init+0x2c>)
  400ef0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400ef4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  400ef8:	d104      	bne.n	400f04 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400efa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400efe:	4b06      	ldr	r3, [pc, #24]	; (400f18 <ENCODER_B_init+0x2c>)
  400f00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  400f04:	4b05      	ldr	r3, [pc, #20]	; (400f1c <ENCODER_B_init+0x30>)
  400f06:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  400f08:	4b05      	ldr	r3, [pc, #20]	; (400f20 <ENCODER_B_init+0x34>)
  400f0a:	4798      	blx	r3
  400f0c:	4602      	mov	r2, r0
  400f0e:	4905      	ldr	r1, [pc, #20]	; (400f24 <ENCODER_B_init+0x38>)
  400f10:	4805      	ldr	r0, [pc, #20]	; (400f28 <ENCODER_B_init+0x3c>)
  400f12:	4b06      	ldr	r3, [pc, #24]	; (400f2c <ENCODER_B_init+0x40>)
  400f14:	4798      	blx	r3
  400f16:	bd08      	pop	{r3, pc}
  400f18:	400e0600 	.word	0x400e0600
  400f1c:	00400ecd 	.word	0x00400ecd
  400f20:	0040263f 	.word	0x0040263f
  400f24:	40054000 	.word	0x40054000
  400f28:	20400544 	.word	0x20400544
  400f2c:	00401705 	.word	0x00401705

00400f30 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400f30:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400f32:	4802      	ldr	r0, [pc, #8]	; (400f3c <delay_driver_init+0xc>)
  400f34:	4b02      	ldr	r3, [pc, #8]	; (400f40 <delay_driver_init+0x10>)
  400f36:	4798      	blx	r3
  400f38:	bd08      	pop	{r3, pc}
  400f3a:	bf00      	nop
  400f3c:	e000e010 	.word	0xe000e010
  400f40:	00401329 	.word	0x00401329

00400f44 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400f44:	4b0f      	ldr	r3, [pc, #60]	; (400f84 <EDBG_COM_PORT_init+0x40>)
  400f46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f48:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400f4c:	671a      	str	r2, [r3, #112]	; 0x70
  400f4e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f50:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400f54:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400f56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400f5a:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400f5c:	4a0a      	ldr	r2, [pc, #40]	; (400f88 <EDBG_COM_PORT_init+0x44>)
  400f5e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400f62:	f043 0310 	orr.w	r3, r3, #16
  400f66:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400f6a:	4b08      	ldr	r3, [pc, #32]	; (400f8c <EDBG_COM_PORT_init+0x48>)
  400f6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f6e:	f042 0210 	orr.w	r2, r2, #16
  400f72:	671a      	str	r2, [r3, #112]	; 0x70
  400f74:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f76:	f042 0210 	orr.w	r2, r2, #16
  400f7a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400f7c:	2210      	movs	r2, #16
  400f7e:	605a      	str	r2, [r3, #4]
  400f80:	4770      	bx	lr
  400f82:	bf00      	nop
  400f84:	400e0e00 	.word	0x400e0e00
  400f88:	40088000 	.word	0x40088000
  400f8c:	400e1000 	.word	0x400e1000

00400f90 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400f90:	4b04      	ldr	r3, [pc, #16]	; (400fa4 <EDBG_COM_CLOCK_init+0x14>)
  400f92:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400f94:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400f98:	d103      	bne.n	400fa2 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400f9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400f9e:	4b01      	ldr	r3, [pc, #4]	; (400fa4 <EDBG_COM_CLOCK_init+0x14>)
  400fa0:	611a      	str	r2, [r3, #16]
  400fa2:	4770      	bx	lr
  400fa4:	400e0600 	.word	0x400e0600

00400fa8 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  400fa8:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  400faa:	4b06      	ldr	r3, [pc, #24]	; (400fc4 <EDBG_COM_init+0x1c>)
  400fac:	4798      	blx	r3
	EDBG_COM_PORT_init();
  400fae:	4b06      	ldr	r3, [pc, #24]	; (400fc8 <EDBG_COM_init+0x20>)
  400fb0:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  400fb2:	4b06      	ldr	r3, [pc, #24]	; (400fcc <EDBG_COM_init+0x24>)
  400fb4:	4798      	blx	r3
  400fb6:	4602      	mov	r2, r0
  400fb8:	4905      	ldr	r1, [pc, #20]	; (400fd0 <EDBG_COM_init+0x28>)
  400fba:	4806      	ldr	r0, [pc, #24]	; (400fd4 <EDBG_COM_init+0x2c>)
  400fbc:	4b06      	ldr	r3, [pc, #24]	; (400fd8 <EDBG_COM_init+0x30>)
  400fbe:	4798      	blx	r3
  400fc0:	bd08      	pop	{r3, pc}
  400fc2:	bf00      	nop
  400fc4:	00400f91 	.word	0x00400f91
  400fc8:	00400f45 	.word	0x00400f45
  400fcc:	00402881 	.word	0x00402881
  400fd0:	40028000 	.word	0x40028000
  400fd4:	204005e8 	.word	0x204005e8
  400fd8:	0040184d 	.word	0x0040184d

00400fdc <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  400fdc:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400fde:	4b37      	ldr	r3, [pc, #220]	; (4010bc <system_init+0xe0>)
  400fe0:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400fe2:	4b37      	ldr	r3, [pc, #220]	; (4010c0 <system_init+0xe4>)
  400fe4:	699b      	ldr	r3, [r3, #24]
  400fe6:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400fea:	d103      	bne.n	400ff4 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400ff0:	4b33      	ldr	r3, [pc, #204]	; (4010c0 <system_init+0xe4>)
  400ff2:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400ff4:	4b32      	ldr	r3, [pc, #200]	; (4010c0 <system_init+0xe4>)
  400ff6:	699b      	ldr	r3, [r3, #24]
  400ff8:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400ffc:	d103      	bne.n	401006 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400ffe:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401002:	4b2f      	ldr	r3, [pc, #188]	; (4010c0 <system_init+0xe4>)
  401004:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401006:	4b2e      	ldr	r3, [pc, #184]	; (4010c0 <system_init+0xe4>)
  401008:	699b      	ldr	r3, [r3, #24]
  40100a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  40100e:	d103      	bne.n	401018 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401010:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401014:	4b2a      	ldr	r3, [pc, #168]	; (4010c0 <system_init+0xe4>)
  401016:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401018:	4b29      	ldr	r3, [pc, #164]	; (4010c0 <system_init+0xe4>)
  40101a:	699b      	ldr	r3, [r3, #24]
  40101c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401020:	d103      	bne.n	40102a <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401022:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401026:	4b26      	ldr	r3, [pc, #152]	; (4010c0 <system_init+0xe4>)
  401028:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40102a:	4a26      	ldr	r2, [pc, #152]	; (4010c4 <system_init+0xe8>)
  40102c:	6853      	ldr	r3, [r2, #4]
  40102e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401032:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  401034:	4b24      	ldr	r3, [pc, #144]	; (4010c8 <system_init+0xec>)
  401036:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40103a:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  40103c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  401040:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  401042:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401044:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  401048:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40104a:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40104c:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40104e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401052:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401054:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401056:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40105c:	f44f 7080 	mov.w	r0, #256	; 0x100
  401060:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401062:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401064:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401066:	f44f 7000 	mov.w	r0, #512	; 0x200
  40106a:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40106c:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40106e:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401070:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401074:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401076:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401078:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40107a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40107e:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401080:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401082:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401084:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401086:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401088:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  40108a:	4b10      	ldr	r3, [pc, #64]	; (4010cc <system_init+0xf0>)
  40108c:	4798      	blx	r3
	ADC_1_init();
  40108e:	4b10      	ldr	r3, [pc, #64]	; (4010d0 <system_init+0xf4>)
  401090:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  401092:	4b10      	ldr	r3, [pc, #64]	; (4010d4 <system_init+0xf8>)
  401094:	4798      	blx	r3
	EXTERNAL_IRQ_B_init();
  401096:	4b10      	ldr	r3, [pc, #64]	; (4010d8 <system_init+0xfc>)
  401098:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  40109a:	4b10      	ldr	r3, [pc, #64]	; (4010dc <system_init+0x100>)
  40109c:	4798      	blx	r3

	PWM_0_init();
  40109e:	4b10      	ldr	r3, [pc, #64]	; (4010e0 <system_init+0x104>)
  4010a0:	4798      	blx	r3

	PWM_1_init();
  4010a2:	4b10      	ldr	r3, [pc, #64]	; (4010e4 <system_init+0x108>)
  4010a4:	4798      	blx	r3
	ENCODER_A_init();
  4010a6:	4b10      	ldr	r3, [pc, #64]	; (4010e8 <system_init+0x10c>)
  4010a8:	4798      	blx	r3
	ENCODER_B_init();
  4010aa:	4b10      	ldr	r3, [pc, #64]	; (4010ec <system_init+0x110>)
  4010ac:	4798      	blx	r3

	delay_driver_init();
  4010ae:	4b10      	ldr	r3, [pc, #64]	; (4010f0 <system_init+0x114>)
  4010b0:	4798      	blx	r3

	EDBG_COM_init();
  4010b2:	4b10      	ldr	r3, [pc, #64]	; (4010f4 <system_init+0x118>)
  4010b4:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  4010b6:	4b10      	ldr	r3, [pc, #64]	; (4010f8 <system_init+0x11c>)
  4010b8:	4798      	blx	r3
  4010ba:	bd08      	pop	{r3, pc}
  4010bc:	00401c8d 	.word	0x00401c8d
  4010c0:	400e0600 	.word	0x400e0600
  4010c4:	400e1850 	.word	0x400e1850
  4010c8:	400e0e00 	.word	0x400e0e00
  4010cc:	00400c15 	.word	0x00400c15
  4010d0:	00400b6d 	.word	0x00400b6d
  4010d4:	00400ce9 	.word	0x00400ce9
  4010d8:	00400d01 	.word	0x00400d01
  4010dc:	00400d19 	.word	0x00400d19
  4010e0:	00400db1 	.word	0x00400db1
  4010e4:	00400e39 	.word	0x00400e39
  4010e8:	00400e8d 	.word	0x00400e8d
  4010ec:	00400eed 	.word	0x00400eed
  4010f0:	00400f31 	.word	0x00400f31
  4010f4:	00400fa9 	.word	0x00400fa9
  4010f8:	004013a1 	.word	0x004013a1

004010fc <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  4010fc:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  4010fe:	6983      	ldr	r3, [r0, #24]
  401100:	b103      	cbz	r3, 401104 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  401102:	4798      	blx	r3
  401104:	bd08      	pop	{r3, pc}

00401106 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  401106:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  401108:	69c3      	ldr	r3, [r0, #28]
  40110a:	b103      	cbz	r3, 40110e <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  40110c:	4798      	blx	r3
  40110e:	bd08      	pop	{r3, pc}

00401110 <adc_async_channel_conversion_done>:
{
  401110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401114:	4605      	mov	r5, r0
  401116:	4688      	mov	r8, r1
  401118:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  40111a:	6a03      	ldr	r3, [r0, #32]
  40111c:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  40111e:	6a87      	ldr	r7, [r0, #40]	; 0x28
  401120:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401124:	00de      	lsls	r6, r3, #3
  401126:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  401128:	f104 0a04 	add.w	sl, r4, #4
  40112c:	b2d1      	uxtb	r1, r2
  40112e:	4650      	mov	r0, sl
  401130:	4b0c      	ldr	r3, [pc, #48]	; (401164 <adc_async_channel_conversion_done+0x54>)
  401132:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  401134:	4628      	mov	r0, r5
  401136:	4b0c      	ldr	r3, [pc, #48]	; (401168 <adc_async_channel_conversion_done+0x58>)
  401138:	4798      	blx	r3
  40113a:	2801      	cmp	r0, #1
  40113c:	d907      	bls.n	40114e <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  40113e:	ea4f 2119 	mov.w	r1, r9, lsr #8
  401142:	4650      	mov	r0, sl
  401144:	4b07      	ldr	r3, [pc, #28]	; (401164 <adc_async_channel_conversion_done+0x54>)
  401146:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  401148:	8aa3      	ldrh	r3, [r4, #20]
  40114a:	3301      	adds	r3, #1
  40114c:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  40114e:	8aa3      	ldrh	r3, [r4, #20]
  401150:	3301      	adds	r3, #1
  401152:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  401154:	59bb      	ldr	r3, [r7, r6]
  401156:	b113      	cbz	r3, 40115e <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  401158:	4641      	mov	r1, r8
  40115a:	4628      	mov	r0, r5
  40115c:	4798      	blx	r3
  40115e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401162:	bf00      	nop
  401164:	00401965 	.word	0x00401965
  401168:	00401c75 	.word	0x00401c75

0040116c <adc_async_init>:
{
  40116c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401170:	4616      	mov	r6, r2
  401172:	461c      	mov	r4, r3
  401174:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  401178:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  40117a:	4607      	mov	r7, r0
  40117c:	4689      	mov	r9, r1
  40117e:	2800      	cmp	r0, #0
  401180:	bf18      	it	ne
  401182:	2900      	cmpne	r1, #0
  401184:	d00b      	beq.n	40119e <adc_async_init+0x32>
  401186:	1c13      	adds	r3, r2, #0
  401188:	bf18      	it	ne
  40118a:	2301      	movne	r3, #1
  40118c:	f1b8 0f00 	cmp.w	r8, #0
  401190:	d017      	beq.n	4011c2 <adc_async_init+0x56>
  401192:	b1b3      	cbz	r3, 4011c2 <adc_async_init+0x56>
  401194:	b10d      	cbz	r5, 40119a <adc_async_init+0x2e>
  401196:	2001      	movs	r0, #1
  401198:	e002      	b.n	4011a0 <adc_async_init+0x34>
  40119a:	2000      	movs	r0, #0
  40119c:	e000      	b.n	4011a0 <adc_async_init+0x34>
  40119e:	2000      	movs	r0, #0
  4011a0:	f8df b068 	ldr.w	fp, [pc, #104]	; 40120c <adc_async_init+0xa0>
  4011a4:	223f      	movs	r2, #63	; 0x3f
  4011a6:	4659      	mov	r1, fp
  4011a8:	f8df a064 	ldr.w	sl, [pc, #100]	; 401210 <adc_async_init+0xa4>
  4011ac:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  4011ae:	1c60      	adds	r0, r4, #1
  4011b0:	2240      	movs	r2, #64	; 0x40
  4011b2:	4659      	mov	r1, fp
  4011b4:	4580      	cmp	r8, r0
  4011b6:	bfcc      	ite	gt
  4011b8:	2000      	movgt	r0, #0
  4011ba:	2001      	movle	r0, #1
  4011bc:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  4011be:	2300      	movs	r3, #0
  4011c0:	e005      	b.n	4011ce <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  4011c2:	2000      	movs	r0, #0
  4011c4:	e7ec      	b.n	4011a0 <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  4011c6:	22ff      	movs	r2, #255	; 0xff
  4011c8:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  4011ca:	3301      	adds	r3, #1
  4011cc:	b2db      	uxtb	r3, r3
  4011ce:	42a3      	cmp	r3, r4
  4011d0:	d9f9      	bls.n	4011c6 <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  4011d2:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  4011d4:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  4011d8:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  4011dc:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  4011de:	4649      	mov	r1, r9
  4011e0:	4638      	mov	r0, r7
  4011e2:	4b06      	ldr	r3, [pc, #24]	; (4011fc <adc_async_init+0x90>)
  4011e4:	4798      	blx	r3
	if (init_status) {
  4011e6:	4603      	mov	r3, r0
  4011e8:	b928      	cbnz	r0, 4011f6 <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  4011ea:	4a05      	ldr	r2, [pc, #20]	; (401200 <adc_async_init+0x94>)
  4011ec:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  4011ee:	4a05      	ldr	r2, [pc, #20]	; (401204 <adc_async_init+0x98>)
  4011f0:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  4011f2:	4a05      	ldr	r2, [pc, #20]	; (401208 <adc_async_init+0x9c>)
  4011f4:	607a      	str	r2, [r7, #4]
}
  4011f6:	4618      	mov	r0, r3
  4011f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4011fc:	00401bb5 	.word	0x00401bb5
  401200:	00401111 	.word	0x00401111
  401204:	004010fd 	.word	0x004010fd
  401208:	00401107 	.word	0x00401107
  40120c:	00405eb4 	.word	0x00405eb4
  401210:	004018c1 	.word	0x004018c1

00401214 <adc_async_register_channel_buffer>:
{
  401214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401218:	460e      	mov	r6, r1
  40121a:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  40121c:	4605      	mov	r5, r0
  40121e:	4690      	mov	r8, r2
  401220:	2800      	cmp	r0, #0
  401222:	bf18      	it	ne
  401224:	2a00      	cmpne	r2, #0
  401226:	d002      	beq.n	40122e <adc_async_register_channel_buffer+0x1a>
  401228:	b9c3      	cbnz	r3, 40125c <adc_async_register_channel_buffer+0x48>
  40122a:	2000      	movs	r0, #0
  40122c:	e000      	b.n	401230 <adc_async_register_channel_buffer+0x1c>
  40122e:	2000      	movs	r0, #0
  401230:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4012c8 <adc_async_register_channel_buffer+0xb4>
  401234:	2266      	movs	r2, #102	; 0x66
  401236:	4649      	mov	r1, r9
  401238:	4c21      	ldr	r4, [pc, #132]	; (4012c0 <adc_async_register_channel_buffer+0xac>)
  40123a:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  40123c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  401240:	2267      	movs	r2, #103	; 0x67
  401242:	4649      	mov	r1, r9
  401244:	42b0      	cmp	r0, r6
  401246:	bf34      	ite	cc
  401248:	2000      	movcc	r0, #0
  40124a:	2001      	movcs	r0, #1
  40124c:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  40124e:	6a29      	ldr	r1, [r5, #32]
  401250:	5d8b      	ldrb	r3, [r1, r6]
  401252:	2bff      	cmp	r3, #255	; 0xff
  401254:	d12b      	bne.n	4012ae <adc_async_register_channel_buffer+0x9a>
  401256:	2400      	movs	r4, #0
  401258:	4623      	mov	r3, r4
  40125a:	e003      	b.n	401264 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  40125c:	2001      	movs	r0, #1
  40125e:	e7e7      	b.n	401230 <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  401260:	3301      	adds	r3, #1
  401262:	b2db      	uxtb	r3, r3
  401264:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  401268:	4293      	cmp	r3, r2
  40126a:	d805      	bhi.n	401278 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  40126c:	5cca      	ldrb	r2, [r1, r3]
  40126e:	2aff      	cmp	r2, #255	; 0xff
  401270:	d0f6      	beq.n	401260 <adc_async_register_channel_buffer+0x4c>
			index++;
  401272:	3401      	adds	r4, #1
  401274:	b2e4      	uxtb	r4, r4
  401276:	e7f3      	b.n	401260 <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  401278:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  40127c:	429c      	cmp	r4, r3
  40127e:	d819      	bhi.n	4012b4 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  401280:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  401282:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  401286:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  40128a:	4448      	add	r0, r9
  40128c:	463a      	mov	r2, r7
  40128e:	4641      	mov	r1, r8
  401290:	3004      	adds	r0, #4
  401292:	4b0c      	ldr	r3, [pc, #48]	; (4012c4 <adc_async_register_channel_buffer+0xb0>)
  401294:	4798      	blx	r3
  401296:	4602      	mov	r2, r0
  401298:	b978      	cbnz	r0, 4012ba <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  40129a:	6a2b      	ldr	r3, [r5, #32]
  40129c:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  40129e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4012a0:	4499      	add	r9, r3
  4012a2:	2300      	movs	r3, #0
  4012a4:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  4012a8:	4610      	mov	r0, r2
  4012aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  4012ae:	f06f 020c 	mvn.w	r2, #12
  4012b2:	e7f9      	b.n	4012a8 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  4012b4:	f06f 021b 	mvn.w	r2, #27
  4012b8:	e7f6      	b.n	4012a8 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  4012ba:	f06f 020c 	mvn.w	r2, #12
  4012be:	e7f3      	b.n	4012a8 <adc_async_register_channel_buffer+0x94>
  4012c0:	004018c1 	.word	0x004018c1
  4012c4:	00401921 	.word	0x00401921
  4012c8:	00405eb4 	.word	0x00405eb4

004012cc <adc_async_enable_channel>:
{
  4012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4012ce:	460d      	mov	r5, r1
	ASSERT(descr);
  4012d0:	4f0b      	ldr	r7, [pc, #44]	; (401300 <adc_async_enable_channel+0x34>)
  4012d2:	4604      	mov	r4, r0
  4012d4:	2283      	movs	r2, #131	; 0x83
  4012d6:	4639      	mov	r1, r7
  4012d8:	3000      	adds	r0, #0
  4012da:	bf18      	it	ne
  4012dc:	2001      	movne	r0, #1
  4012de:	4e09      	ldr	r6, [pc, #36]	; (401304 <adc_async_enable_channel+0x38>)
  4012e0:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  4012e2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  4012e6:	2284      	movs	r2, #132	; 0x84
  4012e8:	4639      	mov	r1, r7
  4012ea:	42a8      	cmp	r0, r5
  4012ec:	bf34      	ite	cc
  4012ee:	2000      	movcc	r0, #0
  4012f0:	2001      	movcs	r0, #1
  4012f2:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  4012f4:	4629      	mov	r1, r5
  4012f6:	4620      	mov	r0, r4
  4012f8:	4b03      	ldr	r3, [pc, #12]	; (401308 <adc_async_enable_channel+0x3c>)
  4012fa:	4798      	blx	r3
}
  4012fc:	2000      	movs	r0, #0
  4012fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401300:	00405eb4 	.word	0x00405eb4
  401304:	004018c1 	.word	0x004018c1
  401308:	00401c69 	.word	0x00401c69

0040130c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40130c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  401310:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401312:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401314:	f3bf 8f5f 	dmb	sy
  401318:	4770      	bx	lr

0040131a <atomic_leave_critical>:
  40131a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40131e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  401320:	f383 8810 	msr	PRIMASK, r3
  401324:	4770      	bx	lr
	...

00401328 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  401328:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  40132a:	4b02      	ldr	r3, [pc, #8]	; (401334 <delay_init+0xc>)
  40132c:	6018      	str	r0, [r3, #0]
  40132e:	4b02      	ldr	r3, [pc, #8]	; (401338 <delay_init+0x10>)
  401330:	4798      	blx	r3
  401332:	bd08      	pop	{r3, pc}
  401334:	20400314 	.word	0x20400314
  401338:	00402481 	.word	0x00402481

0040133c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  40133c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  40133e:	4b04      	ldr	r3, [pc, #16]	; (401350 <delay_ms+0x14>)
  401340:	681c      	ldr	r4, [r3, #0]
  401342:	4b04      	ldr	r3, [pc, #16]	; (401354 <delay_ms+0x18>)
  401344:	4798      	blx	r3
  401346:	4601      	mov	r1, r0
  401348:	4620      	mov	r0, r4
  40134a:	4b03      	ldr	r3, [pc, #12]	; (401358 <delay_ms+0x1c>)
  40134c:	4798      	blx	r3
  40134e:	bd10      	pop	{r4, pc}
  401350:	20400314 	.word	0x20400314
  401354:	00401c79 	.word	0x00401c79
  401358:	0040248d 	.word	0x0040248d

0040135c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  40135c:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  40135e:	2504      	movs	r5, #4
  401360:	2400      	movs	r4, #0

	while (upper >= lower) {
  401362:	e007      	b.n	401374 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  401364:	4a0d      	ldr	r2, [pc, #52]	; (40139c <process_ext_irq+0x40>)
  401366:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40136a:	b1b3      	cbz	r3, 40139a <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  40136c:	4798      	blx	r3
  40136e:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  401370:	3a01      	subs	r2, #1
  401372:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  401374:	42ac      	cmp	r4, r5
  401376:	d810      	bhi.n	40139a <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  401378:	192b      	adds	r3, r5, r4
  40137a:	105b      	asrs	r3, r3, #1
  40137c:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  40137e:	2a03      	cmp	r2, #3
  401380:	d80b      	bhi.n	40139a <process_ext_irq+0x3e>
  401382:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  401384:	4905      	ldr	r1, [pc, #20]	; (40139c <process_ext_irq+0x40>)
  401386:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  40138a:	6849      	ldr	r1, [r1, #4]
  40138c:	4281      	cmp	r1, r0
  40138e:	d0e9      	beq.n	401364 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  401390:	4281      	cmp	r1, r0
  401392:	d2ed      	bcs.n	401370 <process_ext_irq+0x14>
			lower = middle + 1;
  401394:	3201      	adds	r2, #1
  401396:	b2d4      	uxtb	r4, r2
  401398:	e7ec      	b.n	401374 <process_ext_irq+0x18>
  40139a:	bd38      	pop	{r3, r4, r5, pc}
  40139c:	20400318 	.word	0x20400318

004013a0 <ext_irq_init>:
{
  4013a0:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4013a2:	2300      	movs	r3, #0
  4013a4:	e00a      	b.n	4013bc <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  4013a6:	4a08      	ldr	r2, [pc, #32]	; (4013c8 <ext_irq_init+0x28>)
  4013a8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  4013ac:	f04f 30ff 	mov.w	r0, #4294967295
  4013b0:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  4013b2:	2100      	movs	r1, #0
  4013b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4013b8:	3301      	adds	r3, #1
  4013ba:	b29b      	uxth	r3, r3
  4013bc:	2b03      	cmp	r3, #3
  4013be:	d9f2      	bls.n	4013a6 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  4013c0:	4802      	ldr	r0, [pc, #8]	; (4013cc <ext_irq_init+0x2c>)
  4013c2:	4b03      	ldr	r3, [pc, #12]	; (4013d0 <ext_irq_init+0x30>)
  4013c4:	4798      	blx	r3
}
  4013c6:	bd08      	pop	{r3, pc}
  4013c8:	20400318 	.word	0x20400318
  4013cc:	0040135d 	.word	0x0040135d
  4013d0:	00401fe9 	.word	0x00401fe9

004013d4 <ext_irq_register>:
{
  4013d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4013d6:	b083      	sub	sp, #12
  4013d8:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  4013da:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  4013dc:	2b03      	cmp	r3, #3
  4013de:	d80e      	bhi.n	4013fe <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  4013e0:	4618      	mov	r0, r3
  4013e2:	4a2e      	ldr	r2, [pc, #184]	; (40149c <ext_irq_register+0xc8>)
  4013e4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4013e8:	6852      	ldr	r2, [r2, #4]
  4013ea:	42aa      	cmp	r2, r5
  4013ec:	d002      	beq.n	4013f4 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  4013ee:	3301      	adds	r3, #1
  4013f0:	b2db      	uxtb	r3, r3
  4013f2:	e7f3      	b.n	4013dc <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  4013f4:	4b29      	ldr	r3, [pc, #164]	; (40149c <ext_irq_register+0xc8>)
  4013f6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  4013fa:	2701      	movs	r7, #1
			break;
  4013fc:	e000      	b.n	401400 <ext_irq_register+0x2c>
	bool    found = false;
  4013fe:	2700      	movs	r7, #0
	if (NULL == cb) {
  401400:	b159      	cbz	r1, 40141a <ext_irq_register+0x46>
	if (!found) {
  401402:	2f00      	cmp	r7, #0
  401404:	d13d      	bne.n	401482 <ext_irq_register+0xae>
  401406:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401408:	2e03      	cmp	r6, #3
  40140a:	d813      	bhi.n	401434 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  40140c:	4b23      	ldr	r3, [pc, #140]	; (40149c <ext_irq_register+0xc8>)
  40140e:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  401412:	b143      	cbz	r3, 401426 <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401414:	3601      	adds	r6, #1
  401416:	b2f6      	uxtb	r6, r6
  401418:	e7f6      	b.n	401408 <ext_irq_register+0x34>
		if (!found) {
  40141a:	2f00      	cmp	r7, #0
  40141c:	d038      	beq.n	401490 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  40141e:	4628      	mov	r0, r5
  401420:	4b1f      	ldr	r3, [pc, #124]	; (4014a0 <ext_irq_register+0xcc>)
  401422:	4798      	blx	r3
  401424:	e032      	b.n	40148c <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  401426:	4b1d      	ldr	r3, [pc, #116]	; (40149c <ext_irq_register+0xc8>)
  401428:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  40142c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  401430:	605d      	str	r5, [r3, #4]
				found           = true;
  401432:	2701      	movs	r7, #1
  401434:	2300      	movs	r3, #0
  401436:	e001      	b.n	40143c <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  401438:	3301      	adds	r3, #1
  40143a:	b2db      	uxtb	r3, r3
  40143c:	2b03      	cmp	r3, #3
  40143e:	bf98      	it	ls
  401440:	2e03      	cmpls	r6, #3
  401442:	d81e      	bhi.n	401482 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  401444:	46b6      	mov	lr, r6
  401446:	4a15      	ldr	r2, [pc, #84]	; (40149c <ext_irq_register+0xc8>)
  401448:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  40144c:	6848      	ldr	r0, [r1, #4]
  40144e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  401452:	6852      	ldr	r2, [r2, #4]
  401454:	4290      	cmp	r0, r2
  401456:	d2ef      	bcs.n	401438 <ext_irq_register+0x64>
  401458:	f1b2 3fff 	cmp.w	r2, #4294967295
  40145c:	d0ec      	beq.n	401438 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  40145e:	4c0f      	ldr	r4, [pc, #60]	; (40149c <ext_irq_register+0xc8>)
  401460:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  401464:	e892 0003 	ldmia.w	r2, {r0, r1}
  401468:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  40146c:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  401470:	e894 0003 	ldmia.w	r4, {r0, r1}
  401474:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  401478:	e89d 0003 	ldmia.w	sp, {r0, r1}
  40147c:	e884 0003 	stmia.w	r4, {r0, r1}
  401480:	e7da      	b.n	401438 <ext_irq_register+0x64>
	if (!found) {
  401482:	b147      	cbz	r7, 401496 <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  401484:	2101      	movs	r1, #1
  401486:	4628      	mov	r0, r5
  401488:	4b05      	ldr	r3, [pc, #20]	; (4014a0 <ext_irq_register+0xcc>)
  40148a:	4798      	blx	r3
}
  40148c:	b003      	add	sp, #12
  40148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  401490:	f06f 000c 	mvn.w	r0, #12
  401494:	e7fa      	b.n	40148c <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  401496:	f06f 000c 	mvn.w	r0, #12
  40149a:	e7f7      	b.n	40148c <ext_irq_register+0xb8>
  40149c:	20400318 	.word	0x20400318
  4014a0:	00402019 	.word	0x00402019

004014a4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4014a4:	b570      	push	{r4, r5, r6, lr}
  4014a6:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4014a8:	4604      	mov	r4, r0
  4014aa:	460d      	mov	r5, r1
  4014ac:	2800      	cmp	r0, #0
  4014ae:	bf18      	it	ne
  4014b0:	2900      	cmpne	r1, #0
  4014b2:	bf14      	ite	ne
  4014b4:	2001      	movne	r0, #1
  4014b6:	2000      	moveq	r0, #0
  4014b8:	2234      	movs	r2, #52	; 0x34
  4014ba:	4904      	ldr	r1, [pc, #16]	; (4014cc <io_write+0x28>)
  4014bc:	4b04      	ldr	r3, [pc, #16]	; (4014d0 <io_write+0x2c>)
  4014be:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  4014c0:	6823      	ldr	r3, [r4, #0]
  4014c2:	4632      	mov	r2, r6
  4014c4:	4629      	mov	r1, r5
  4014c6:	4620      	mov	r0, r4
  4014c8:	4798      	blx	r3
}
  4014ca:	bd70      	pop	{r4, r5, r6, pc}
  4014cc:	00405ed0 	.word	0x00405ed0
  4014d0:	004018c1 	.word	0x004018c1

004014d4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4014d4:	b570      	push	{r4, r5, r6, lr}
  4014d6:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4014d8:	4604      	mov	r4, r0
  4014da:	460d      	mov	r5, r1
  4014dc:	2800      	cmp	r0, #0
  4014de:	bf18      	it	ne
  4014e0:	2900      	cmpne	r1, #0
  4014e2:	bf14      	ite	ne
  4014e4:	2001      	movne	r0, #1
  4014e6:	2000      	moveq	r0, #0
  4014e8:	223d      	movs	r2, #61	; 0x3d
  4014ea:	4904      	ldr	r1, [pc, #16]	; (4014fc <io_read+0x28>)
  4014ec:	4b04      	ldr	r3, [pc, #16]	; (401500 <io_read+0x2c>)
  4014ee:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  4014f0:	6863      	ldr	r3, [r4, #4]
  4014f2:	4632      	mov	r2, r6
  4014f4:	4629      	mov	r1, r5
  4014f6:	4620      	mov	r0, r4
  4014f8:	4798      	blx	r3
}
  4014fa:	bd70      	pop	{r4, r5, r6, pc}
  4014fc:	00405ed0 	.word	0x00405ed0
  401500:	004018c1 	.word	0x004018c1

00401504 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  401504:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  401506:	6943      	ldr	r3, [r0, #20]
  401508:	b103      	cbz	r3, 40150c <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  40150a:	4798      	blx	r3
  40150c:	bd08      	pop	{r3, pc}

0040150e <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  40150e:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  401510:	6983      	ldr	r3, [r0, #24]
  401512:	b103      	cbz	r3, 401516 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  401514:	4798      	blx	r3
  401516:	bd08      	pop	{r3, pc}

00401518 <pwm_init>:
{
  401518:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40151a:	4604      	mov	r4, r0
  40151c:	460d      	mov	r5, r1
  40151e:	2800      	cmp	r0, #0
  401520:	bf18      	it	ne
  401522:	2900      	cmpne	r1, #0
  401524:	bf14      	ite	ne
  401526:	2001      	movne	r0, #1
  401528:	2000      	moveq	r0, #0
  40152a:	2233      	movs	r2, #51	; 0x33
  40152c:	4906      	ldr	r1, [pc, #24]	; (401548 <pwm_init+0x30>)
  40152e:	4b07      	ldr	r3, [pc, #28]	; (40154c <pwm_init+0x34>)
  401530:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  401532:	4629      	mov	r1, r5
  401534:	4620      	mov	r0, r4
  401536:	4b06      	ldr	r3, [pc, #24]	; (401550 <pwm_init+0x38>)
  401538:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  40153a:	4b06      	ldr	r3, [pc, #24]	; (401554 <pwm_init+0x3c>)
  40153c:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  40153e:	4b06      	ldr	r3, [pc, #24]	; (401558 <pwm_init+0x40>)
  401540:	6063      	str	r3, [r4, #4]
}
  401542:	2000      	movs	r0, #0
  401544:	bd38      	pop	{r3, r4, r5, pc}
  401546:	bf00      	nop
  401548:	00405ee4 	.word	0x00405ee4
  40154c:	004018c1 	.word	0x004018c1
  401550:	004021b9 	.word	0x004021b9
  401554:	00401505 	.word	0x00401505
  401558:	0040150f 	.word	0x0040150f

0040155c <pwm_enable>:
{
  40155c:	b510      	push	{r4, lr}
	ASSERT(descr);
  40155e:	4604      	mov	r4, r0
  401560:	224a      	movs	r2, #74	; 0x4a
  401562:	4909      	ldr	r1, [pc, #36]	; (401588 <pwm_enable+0x2c>)
  401564:	3000      	adds	r0, #0
  401566:	bf18      	it	ne
  401568:	2001      	movne	r0, #1
  40156a:	4b08      	ldr	r3, [pc, #32]	; (40158c <pwm_enable+0x30>)
  40156c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  40156e:	4620      	mov	r0, r4
  401570:	4b07      	ldr	r3, [pc, #28]	; (401590 <pwm_enable+0x34>)
  401572:	4798      	blx	r3
  401574:	b920      	cbnz	r0, 401580 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  401576:	4620      	mov	r0, r4
  401578:	4b06      	ldr	r3, [pc, #24]	; (401594 <pwm_enable+0x38>)
  40157a:	4798      	blx	r3
	return ERR_NONE;
  40157c:	2000      	movs	r0, #0
  40157e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401580:	f06f 0010 	mvn.w	r0, #16
}
  401584:	bd10      	pop	{r4, pc}
  401586:	bf00      	nop
  401588:	00405ee4 	.word	0x00405ee4
  40158c:	004018c1 	.word	0x004018c1
  401590:	004023d9 	.word	0x004023d9
  401594:	004022f1 	.word	0x004022f1

00401598 <pwm_disable>:
{
  401598:	b510      	push	{r4, lr}
	ASSERT(descr);
  40159a:	4604      	mov	r4, r0
  40159c:	2258      	movs	r2, #88	; 0x58
  40159e:	4909      	ldr	r1, [pc, #36]	; (4015c4 <pwm_disable+0x2c>)
  4015a0:	3000      	adds	r0, #0
  4015a2:	bf18      	it	ne
  4015a4:	2001      	movne	r0, #1
  4015a6:	4b08      	ldr	r3, [pc, #32]	; (4015c8 <pwm_disable+0x30>)
  4015a8:	4798      	blx	r3
	if (!_pwm_is_enabled(&descr->device)) {
  4015aa:	4620      	mov	r0, r4
  4015ac:	4b07      	ldr	r3, [pc, #28]	; (4015cc <pwm_disable+0x34>)
  4015ae:	4798      	blx	r3
  4015b0:	b120      	cbz	r0, 4015bc <pwm_disable+0x24>
	_pwm_disable(&descr->device);
  4015b2:	4620      	mov	r0, r4
  4015b4:	4b06      	ldr	r3, [pc, #24]	; (4015d0 <pwm_disable+0x38>)
  4015b6:	4798      	blx	r3
	return ERR_NONE;
  4015b8:	2000      	movs	r0, #0
  4015ba:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4015bc:	f06f 0010 	mvn.w	r0, #16
}
  4015c0:	bd10      	pop	{r4, pc}
  4015c2:	bf00      	nop
  4015c4:	00405ee4 	.word	0x00405ee4
  4015c8:	004018c1 	.word	0x004018c1
  4015cc:	004023d9 	.word	0x004023d9
  4015d0:	00402335 	.word	0x00402335

004015d4 <pwm_register_callback>:
{
  4015d4:	b570      	push	{r4, r5, r6, lr}
	switch (type) {
  4015d6:	460d      	mov	r5, r1
  4015d8:	b121      	cbz	r1, 4015e4 <pwm_register_callback+0x10>
  4015da:	2901      	cmp	r1, #1
  4015dc:	d015      	beq.n	40160a <pwm_register_callback+0x36>
		return ERR_INVALID_ARG;
  4015de:	f06f 000c 	mvn.w	r0, #12
}
  4015e2:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.period = cb;
  4015e4:	6142      	str	r2, [r0, #20]
  4015e6:	4616      	mov	r6, r2
  4015e8:	4604      	mov	r4, r0
	ASSERT(descr);
  4015ea:	2272      	movs	r2, #114	; 0x72
  4015ec:	4908      	ldr	r1, [pc, #32]	; (401610 <pwm_register_callback+0x3c>)
  4015ee:	3000      	adds	r0, #0
  4015f0:	bf18      	it	ne
  4015f2:	2001      	movne	r0, #1
  4015f4:	4b07      	ldr	r3, [pc, #28]	; (401614 <pwm_register_callback+0x40>)
  4015f6:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
  4015f8:	1c32      	adds	r2, r6, #0
  4015fa:	bf18      	it	ne
  4015fc:	2201      	movne	r2, #1
  4015fe:	4629      	mov	r1, r5
  401600:	4620      	mov	r0, r4
  401602:	4b05      	ldr	r3, [pc, #20]	; (401618 <pwm_register_callback+0x44>)
  401604:	4798      	blx	r3
	return ERR_NONE;
  401606:	2000      	movs	r0, #0
  401608:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
  40160a:	6182      	str	r2, [r0, #24]
		break;
  40160c:	e7eb      	b.n	4015e6 <pwm_register_callback+0x12>
  40160e:	bf00      	nop
  401610:	00405ee4 	.word	0x00405ee4
  401614:	004018c1 	.word	0x004018c1
  401618:	00402409 	.word	0x00402409

0040161c <pwm_set_parameters>:
{
  40161c:	b570      	push	{r4, r5, r6, lr}
  40161e:	460d      	mov	r5, r1
  401620:	4616      	mov	r6, r2
	ASSERT(descr);
  401622:	4604      	mov	r4, r0
  401624:	227c      	movs	r2, #124	; 0x7c
  401626:	4906      	ldr	r1, [pc, #24]	; (401640 <pwm_set_parameters+0x24>)
  401628:	3000      	adds	r0, #0
  40162a:	bf18      	it	ne
  40162c:	2001      	movne	r0, #1
  40162e:	4b05      	ldr	r3, [pc, #20]	; (401644 <pwm_set_parameters+0x28>)
  401630:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  401632:	4632      	mov	r2, r6
  401634:	4629      	mov	r1, r5
  401636:	4620      	mov	r0, r4
  401638:	4b03      	ldr	r3, [pc, #12]	; (401648 <pwm_set_parameters+0x2c>)
  40163a:	4798      	blx	r3
}
  40163c:	2000      	movs	r0, #0
  40163e:	bd70      	pop	{r4, r5, r6, pc}
  401640:	00405ee4 	.word	0x00405ee4
  401644:	004018c1 	.word	0x004018c1
  401648:	00402379 	.word	0x00402379

0040164c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  40164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  40164e:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  401650:	b117      	cbz	r7, 401658 <timer_add_timer_task+0xc>
  401652:	463c      	mov	r4, r7
  401654:	2600      	movs	r6, #0
  401656:	e00b      	b.n	401670 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  401658:	4b0e      	ldr	r3, [pc, #56]	; (401694 <timer_add_timer_task+0x48>)
  40165a:	4798      	blx	r3
		return;
  40165c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  40165e:	68a5      	ldr	r5, [r4, #8]
  401660:	442b      	add	r3, r5
  401662:	1a9b      	subs	r3, r3, r2
  401664:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  401666:	688d      	ldr	r5, [r1, #8]
  401668:	42ab      	cmp	r3, r5
  40166a:	d209      	bcs.n	401680 <timer_add_timer_task+0x34>
			break;
		prev = it;
  40166c:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  40166e:	6824      	ldr	r4, [r4, #0]
  401670:	b134      	cbz	r4, 401680 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  401672:	6863      	ldr	r3, [r4, #4]
  401674:	4293      	cmp	r3, r2
  401676:	d8f2      	bhi.n	40165e <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  401678:	68a5      	ldr	r5, [r4, #8]
  40167a:	1a9b      	subs	r3, r3, r2
  40167c:	442b      	add	r3, r5
  40167e:	e7f2      	b.n	401666 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  401680:	42bc      	cmp	r4, r7
  401682:	d003      	beq.n	40168c <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  401684:	4630      	mov	r0, r6
  401686:	4b04      	ldr	r3, [pc, #16]	; (401698 <timer_add_timer_task+0x4c>)
  401688:	4798      	blx	r3
  40168a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  40168c:	4b01      	ldr	r3, [pc, #4]	; (401694 <timer_add_timer_task+0x48>)
  40168e:	4798      	blx	r3
  401690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401692:	bf00      	nop
  401694:	004018dd 	.word	0x004018dd
  401698:	00401909 	.word	0x00401909

0040169c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  40169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40169e:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  4016a0:	6906      	ldr	r6, [r0, #16]
  4016a2:	3601      	adds	r6, #1
  4016a4:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  4016a6:	7e03      	ldrb	r3, [r0, #24]
  4016a8:	f013 0f01 	tst.w	r3, #1
  4016ac:	d105      	bne.n	4016ba <timer_process_counted+0x1e>
  4016ae:	7e03      	ldrb	r3, [r0, #24]
  4016b0:	f013 0f02 	tst.w	r3, #2
  4016b4:	d101      	bne.n	4016ba <timer_process_counted+0x1e>
  4016b6:	4605      	mov	r5, r0
  4016b8:	e009      	b.n	4016ce <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  4016ba:	7e03      	ldrb	r3, [r0, #24]
  4016bc:	f043 0302 	orr.w	r3, r3, #2
  4016c0:	7603      	strb	r3, [r0, #24]
		return;
  4016c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4016c4:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  4016c6:	68e3      	ldr	r3, [r4, #12]
  4016c8:	4620      	mov	r0, r4
  4016ca:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  4016cc:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  4016ce:	b19c      	cbz	r4, 4016f8 <timer_process_counted+0x5c>
  4016d0:	6863      	ldr	r3, [r4, #4]
  4016d2:	1af3      	subs	r3, r6, r3
  4016d4:	68a2      	ldr	r2, [r4, #8]
  4016d6:	4293      	cmp	r3, r2
  4016d8:	d30e      	bcc.n	4016f8 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  4016da:	f105 0714 	add.w	r7, r5, #20
  4016de:	4638      	mov	r0, r7
  4016e0:	4b06      	ldr	r3, [pc, #24]	; (4016fc <timer_process_counted+0x60>)
  4016e2:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  4016e4:	7c23      	ldrb	r3, [r4, #16]
  4016e6:	2b01      	cmp	r3, #1
  4016e8:	d1ec      	bne.n	4016c4 <timer_process_counted+0x28>
			tmp->time_label = time;
  4016ea:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  4016ec:	4632      	mov	r2, r6
  4016ee:	4621      	mov	r1, r4
  4016f0:	4638      	mov	r0, r7
  4016f2:	4b03      	ldr	r3, [pc, #12]	; (401700 <timer_process_counted+0x64>)
  4016f4:	4798      	blx	r3
  4016f6:	e7e5      	b.n	4016c4 <timer_process_counted+0x28>
  4016f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4016fa:	bf00      	nop
  4016fc:	00401911 	.word	0x00401911
  401700:	0040164d 	.word	0x0040164d

00401704 <timer_init>:
{
  401704:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401706:	4604      	mov	r4, r0
  401708:	460d      	mov	r5, r1
  40170a:	2800      	cmp	r0, #0
  40170c:	bf18      	it	ne
  40170e:	2900      	cmpne	r1, #0
  401710:	bf14      	ite	ne
  401712:	2001      	movne	r0, #1
  401714:	2000      	moveq	r0, #0
  401716:	223b      	movs	r2, #59	; 0x3b
  401718:	4905      	ldr	r1, [pc, #20]	; (401730 <timer_init+0x2c>)
  40171a:	4b06      	ldr	r3, [pc, #24]	; (401734 <timer_init+0x30>)
  40171c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  40171e:	4629      	mov	r1, r5
  401720:	4620      	mov	r0, r4
  401722:	4b05      	ldr	r3, [pc, #20]	; (401738 <timer_init+0x34>)
  401724:	4798      	blx	r3
	descr->time                           = 0;
  401726:	2000      	movs	r0, #0
  401728:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  40172a:	4b04      	ldr	r3, [pc, #16]	; (40173c <timer_init+0x38>)
  40172c:	6023      	str	r3, [r4, #0]
}
  40172e:	bd38      	pop	{r3, r4, r5, pc}
  401730:	00405efc 	.word	0x00405efc
  401734:	004018c1 	.word	0x004018c1
  401738:	00402545 	.word	0x00402545
  40173c:	0040169d 	.word	0x0040169d

00401740 <timer_start>:
{
  401740:	b510      	push	{r4, lr}
	ASSERT(descr);
  401742:	4604      	mov	r4, r0
  401744:	2253      	movs	r2, #83	; 0x53
  401746:	4909      	ldr	r1, [pc, #36]	; (40176c <timer_start+0x2c>)
  401748:	3000      	adds	r0, #0
  40174a:	bf18      	it	ne
  40174c:	2001      	movne	r0, #1
  40174e:	4b08      	ldr	r3, [pc, #32]	; (401770 <timer_start+0x30>)
  401750:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  401752:	4620      	mov	r0, r4
  401754:	4b07      	ldr	r3, [pc, #28]	; (401774 <timer_start+0x34>)
  401756:	4798      	blx	r3
  401758:	b920      	cbnz	r0, 401764 <timer_start+0x24>
	_timer_start(&descr->device);
  40175a:	4620      	mov	r0, r4
  40175c:	4b06      	ldr	r3, [pc, #24]	; (401778 <timer_start+0x38>)
  40175e:	4798      	blx	r3
	return ERR_NONE;
  401760:	2000      	movs	r0, #0
  401762:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401764:	f06f 0010 	mvn.w	r0, #16
}
  401768:	bd10      	pop	{r4, pc}
  40176a:	bf00      	nop
  40176c:	00405efc 	.word	0x00405efc
  401770:	004018c1 	.word	0x004018c1
  401774:	0040262d 	.word	0x0040262d
  401778:	00402621 	.word	0x00402621

0040177c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  40177c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40177e:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401780:	4605      	mov	r5, r0
  401782:	460f      	mov	r7, r1
  401784:	2800      	cmp	r0, #0
  401786:	bf18      	it	ne
  401788:	2900      	cmpne	r1, #0
  40178a:	d002      	beq.n	401792 <usart_sync_write+0x16>
  40178c:	bb0a      	cbnz	r2, 4017d2 <usart_sync_write+0x56>
  40178e:	2000      	movs	r0, #0
  401790:	e000      	b.n	401794 <usart_sync_write+0x18>
  401792:	2000      	movs	r0, #0
  401794:	22f1      	movs	r2, #241	; 0xf1
  401796:	4910      	ldr	r1, [pc, #64]	; (4017d8 <usart_sync_write+0x5c>)
  401798:	4b10      	ldr	r3, [pc, #64]	; (4017dc <usart_sync_write+0x60>)
  40179a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  40179c:	f105 0408 	add.w	r4, r5, #8
  4017a0:	4620      	mov	r0, r4
  4017a2:	4b0f      	ldr	r3, [pc, #60]	; (4017e0 <usart_sync_write+0x64>)
  4017a4:	4798      	blx	r3
  4017a6:	2800      	cmp	r0, #0
  4017a8:	d0f8      	beq.n	40179c <usart_sync_write+0x20>
  4017aa:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  4017ac:	5d79      	ldrb	r1, [r7, r5]
  4017ae:	4620      	mov	r0, r4
  4017b0:	4b0c      	ldr	r3, [pc, #48]	; (4017e4 <usart_sync_write+0x68>)
  4017b2:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  4017b4:	4620      	mov	r0, r4
  4017b6:	4b0a      	ldr	r3, [pc, #40]	; (4017e0 <usart_sync_write+0x64>)
  4017b8:	4798      	blx	r3
  4017ba:	2800      	cmp	r0, #0
  4017bc:	d0fa      	beq.n	4017b4 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  4017be:	3501      	adds	r5, #1
  4017c0:	42b5      	cmp	r5, r6
  4017c2:	d3f3      	bcc.n	4017ac <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  4017c4:	4620      	mov	r0, r4
  4017c6:	4b08      	ldr	r3, [pc, #32]	; (4017e8 <usart_sync_write+0x6c>)
  4017c8:	4798      	blx	r3
  4017ca:	2800      	cmp	r0, #0
  4017cc:	d0fa      	beq.n	4017c4 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  4017ce:	4628      	mov	r0, r5
  4017d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  4017d2:	2001      	movs	r0, #1
  4017d4:	e7de      	b.n	401794 <usart_sync_write+0x18>
  4017d6:	bf00      	nop
  4017d8:	00405f14 	.word	0x00405f14
  4017dc:	004018c1 	.word	0x004018c1
  4017e0:	00402809 	.word	0x00402809
  4017e4:	004027c1 	.word	0x004027c1
  4017e8:	00402831 	.word	0x00402831

004017ec <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4017ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4017f0:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4017f2:	4605      	mov	r5, r0
  4017f4:	4688      	mov	r8, r1
  4017f6:	2800      	cmp	r0, #0
  4017f8:	bf18      	it	ne
  4017fa:	2900      	cmpne	r1, #0
  4017fc:	d002      	beq.n	401804 <usart_sync_read+0x18>
  4017fe:	b9d2      	cbnz	r2, 401836 <usart_sync_read+0x4a>
  401800:	2000      	movs	r0, #0
  401802:	e000      	b.n	401806 <usart_sync_read+0x1a>
  401804:	2000      	movs	r0, #0
  401806:	f44f 7286 	mov.w	r2, #268	; 0x10c
  40180a:	490c      	ldr	r1, [pc, #48]	; (40183c <usart_sync_read+0x50>)
  40180c:	4b0c      	ldr	r3, [pc, #48]	; (401840 <usart_sync_read+0x54>)
  40180e:	4798      	blx	r3
	uint32_t                      offset = 0;
  401810:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  401812:	f105 0408 	add.w	r4, r5, #8
  401816:	4620      	mov	r0, r4
  401818:	4b0a      	ldr	r3, [pc, #40]	; (401844 <usart_sync_read+0x58>)
  40181a:	4798      	blx	r3
  40181c:	2800      	cmp	r0, #0
  40181e:	d0f8      	beq.n	401812 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  401820:	4620      	mov	r0, r4
  401822:	4b09      	ldr	r3, [pc, #36]	; (401848 <usart_sync_read+0x5c>)
  401824:	4798      	blx	r3
  401826:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  40182a:	3601      	adds	r6, #1
  40182c:	42be      	cmp	r6, r7
  40182e:	d3f0      	bcc.n	401812 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  401830:	4630      	mov	r0, r6
  401832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  401836:	2001      	movs	r0, #1
  401838:	e7e5      	b.n	401806 <usart_sync_read+0x1a>
  40183a:	bf00      	nop
  40183c:	00405f14 	.word	0x00405f14
  401840:	004018c1 	.word	0x004018c1
  401844:	00402859 	.word	0x00402859
  401848:	004027e5 	.word	0x004027e5

0040184c <usart_sync_init>:
{
  40184c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40184e:	4604      	mov	r4, r0
  401850:	460d      	mov	r5, r1
  401852:	2800      	cmp	r0, #0
  401854:	bf18      	it	ne
  401856:	2900      	cmpne	r1, #0
  401858:	bf14      	ite	ne
  40185a:	2001      	movne	r0, #1
  40185c:	2000      	moveq	r0, #0
  40185e:	2234      	movs	r2, #52	; 0x34
  401860:	4907      	ldr	r1, [pc, #28]	; (401880 <usart_sync_init+0x34>)
  401862:	4b08      	ldr	r3, [pc, #32]	; (401884 <usart_sync_init+0x38>)
  401864:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  401866:	4629      	mov	r1, r5
  401868:	f104 0008 	add.w	r0, r4, #8
  40186c:	4b06      	ldr	r3, [pc, #24]	; (401888 <usart_sync_init+0x3c>)
  40186e:	4798      	blx	r3
	if (init_status) {
  401870:	4603      	mov	r3, r0
  401872:	b918      	cbnz	r0, 40187c <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  401874:	4a05      	ldr	r2, [pc, #20]	; (40188c <usart_sync_init+0x40>)
  401876:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  401878:	4a05      	ldr	r2, [pc, #20]	; (401890 <usart_sync_init+0x44>)
  40187a:	6022      	str	r2, [r4, #0]
}
  40187c:	4618      	mov	r0, r3
  40187e:	bd38      	pop	{r3, r4, r5, pc}
  401880:	00405f14 	.word	0x00405f14
  401884:	004018c1 	.word	0x004018c1
  401888:	00402755 	.word	0x00402755
  40188c:	004017ed 	.word	0x004017ed
  401890:	0040177d 	.word	0x0040177d

00401894 <usart_sync_enable>:
{
  401894:	b510      	push	{r4, lr}
	ASSERT(descr);
  401896:	4604      	mov	r4, r0
  401898:	2253      	movs	r2, #83	; 0x53
  40189a:	4906      	ldr	r1, [pc, #24]	; (4018b4 <usart_sync_enable+0x20>)
  40189c:	3000      	adds	r0, #0
  40189e:	bf18      	it	ne
  4018a0:	2001      	movne	r0, #1
  4018a2:	4b05      	ldr	r3, [pc, #20]	; (4018b8 <usart_sync_enable+0x24>)
  4018a4:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  4018a6:	f104 0008 	add.w	r0, r4, #8
  4018aa:	4b04      	ldr	r3, [pc, #16]	; (4018bc <usart_sync_enable+0x28>)
  4018ac:	4798      	blx	r3
}
  4018ae:	2000      	movs	r0, #0
  4018b0:	bd10      	pop	{r4, pc}
  4018b2:	bf00      	nop
  4018b4:	00405f14 	.word	0x00405f14
  4018b8:	004018c1 	.word	0x004018c1
  4018bc:	0040278d 	.word	0x0040278d

004018c0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  4018c0:	b900      	cbnz	r0, 4018c4 <assert+0x4>
		__asm("BKPT #0");
  4018c2:	be00      	bkpt	0x0000
  4018c4:	4770      	bx	lr

004018c6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  4018c6:	6803      	ldr	r3, [r0, #0]
  4018c8:	b11b      	cbz	r3, 4018d2 <is_list_element+0xc>
		if (it == element) {
  4018ca:	428b      	cmp	r3, r1
  4018cc:	d003      	beq.n	4018d6 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  4018ce:	681b      	ldr	r3, [r3, #0]
  4018d0:	e7fa      	b.n	4018c8 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  4018d2:	2000      	movs	r0, #0
  4018d4:	4770      	bx	lr
			return true;
  4018d6:	2001      	movs	r0, #1
}
  4018d8:	4770      	bx	lr
	...

004018dc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  4018dc:	b538      	push	{r3, r4, r5, lr}
  4018de:	4604      	mov	r4, r0
  4018e0:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  4018e2:	4b06      	ldr	r3, [pc, #24]	; (4018fc <list_insert_as_head+0x20>)
  4018e4:	4798      	blx	r3
  4018e6:	f080 0001 	eor.w	r0, r0, #1
  4018ea:	2239      	movs	r2, #57	; 0x39
  4018ec:	4904      	ldr	r1, [pc, #16]	; (401900 <list_insert_as_head+0x24>)
  4018ee:	b2c0      	uxtb	r0, r0
  4018f0:	4b04      	ldr	r3, [pc, #16]	; (401904 <list_insert_as_head+0x28>)
  4018f2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  4018f4:	6823      	ldr	r3, [r4, #0]
  4018f6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  4018f8:	6025      	str	r5, [r4, #0]
  4018fa:	bd38      	pop	{r3, r4, r5, pc}
  4018fc:	004018c7 	.word	0x004018c7
  401900:	00405f30 	.word	0x00405f30
  401904:	004018c1 	.word	0x004018c1

00401908 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  401908:	6803      	ldr	r3, [r0, #0]
  40190a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  40190c:	6001      	str	r1, [r0, #0]
  40190e:	4770      	bx	lr

00401910 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  401910:	6803      	ldr	r3, [r0, #0]
  401912:	b11b      	cbz	r3, 40191c <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  401914:	681a      	ldr	r2, [r3, #0]
  401916:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  401918:	4618      	mov	r0, r3
  40191a:	4770      	bx	lr
	}

	return NULL;
  40191c:	2000      	movs	r0, #0
}
  40191e:	4770      	bx	lr

00401920 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  401920:	b570      	push	{r4, r5, r6, lr}
  401922:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  401924:	4604      	mov	r4, r0
  401926:	460e      	mov	r6, r1
  401928:	2800      	cmp	r0, #0
  40192a:	bf18      	it	ne
  40192c:	2900      	cmpne	r1, #0
  40192e:	d002      	beq.n	401936 <ringbuffer_init+0x16>
  401930:	b97a      	cbnz	r2, 401952 <ringbuffer_init+0x32>
  401932:	2000      	movs	r0, #0
  401934:	e000      	b.n	401938 <ringbuffer_init+0x18>
  401936:	2000      	movs	r0, #0
  401938:	2228      	movs	r2, #40	; 0x28
  40193a:	4908      	ldr	r1, [pc, #32]	; (40195c <ringbuffer_init+0x3c>)
  40193c:	4b08      	ldr	r3, [pc, #32]	; (401960 <ringbuffer_init+0x40>)
  40193e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  401940:	1e6b      	subs	r3, r5, #1
  401942:	421d      	tst	r5, r3
  401944:	d107      	bne.n	401956 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  401946:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  401948:	2000      	movs	r0, #0
  40194a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  40194c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  40194e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  401950:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  401952:	2001      	movs	r0, #1
  401954:	e7f0      	b.n	401938 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  401956:	f06f 000c 	mvn.w	r0, #12
}
  40195a:	bd70      	pop	{r4, r5, r6, pc}
  40195c:	00405f50 	.word	0x00405f50
  401960:	004018c1 	.word	0x004018c1

00401964 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  401964:	b538      	push	{r3, r4, r5, lr}
  401966:	460d      	mov	r5, r1
	ASSERT(rb);
  401968:	4604      	mov	r4, r0
  40196a:	2251      	movs	r2, #81	; 0x51
  40196c:	490b      	ldr	r1, [pc, #44]	; (40199c <ringbuffer_put+0x38>)
  40196e:	3000      	adds	r0, #0
  401970:	bf18      	it	ne
  401972:	2001      	movne	r0, #1
  401974:	4b0a      	ldr	r3, [pc, #40]	; (4019a0 <ringbuffer_put+0x3c>)
  401976:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  401978:	6822      	ldr	r2, [r4, #0]
  40197a:	68e3      	ldr	r3, [r4, #12]
  40197c:	6861      	ldr	r1, [r4, #4]
  40197e:	400b      	ands	r3, r1
  401980:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  401982:	68e3      	ldr	r3, [r4, #12]
  401984:	68a2      	ldr	r2, [r4, #8]
  401986:	1a9a      	subs	r2, r3, r2
  401988:	6861      	ldr	r1, [r4, #4]
  40198a:	428a      	cmp	r2, r1
  40198c:	d901      	bls.n	401992 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  40198e:	1a59      	subs	r1, r3, r1
  401990:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  401992:	3301      	adds	r3, #1
  401994:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  401996:	2000      	movs	r0, #0
  401998:	bd38      	pop	{r3, r4, r5, pc}
  40199a:	bf00      	nop
  40199c:	00405f50 	.word	0x00405f50
  4019a0:	004018c1 	.word	0x004018c1

004019a4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  4019a4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  4019a6:	4a06      	ldr	r2, [pc, #24]	; (4019c0 <_sbrk+0x1c>)
  4019a8:	6812      	ldr	r2, [r2, #0]
  4019aa:	b122      	cbz	r2, 4019b6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4019ac:	4a04      	ldr	r2, [pc, #16]	; (4019c0 <_sbrk+0x1c>)
  4019ae:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  4019b0:	4403      	add	r3, r0
  4019b2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  4019b4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4019b6:	4903      	ldr	r1, [pc, #12]	; (4019c4 <_sbrk+0x20>)
  4019b8:	4a01      	ldr	r2, [pc, #4]	; (4019c0 <_sbrk+0x1c>)
  4019ba:	6011      	str	r1, [r2, #0]
  4019bc:	e7f6      	b.n	4019ac <_sbrk+0x8>
  4019be:	bf00      	nop
  4019c0:	20400338 	.word	0x20400338
  4019c4:	20400d18 	.word	0x20400d18

004019c8 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  4019c8:	f04f 30ff 	mov.w	r0, #4294967295
  4019cc:	4770      	bx	lr

004019ce <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  4019ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4019d2:	604b      	str	r3, [r1, #4]

	return 0;
}
  4019d4:	2000      	movs	r0, #0
  4019d6:	4770      	bx	lr

004019d8 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  4019d8:	2001      	movs	r0, #1
  4019da:	4770      	bx	lr

004019dc <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  4019dc:	2000      	movs	r0, #0
  4019de:	4770      	bx	lr

004019e0 <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  4019e0:	6943      	ldr	r3, [r0, #20]
  4019e2:	4a07      	ldr	r2, [pc, #28]	; (401a00 <_afec_get_irq_num+0x20>)
  4019e4:	4293      	cmp	r3, r2
  4019e6:	d005      	beq.n	4019f4 <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  4019e8:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  4019ec:	4293      	cmp	r3, r2
  4019ee:	d103      	bne.n	4019f8 <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  4019f0:	2028      	movs	r0, #40	; 0x28
  4019f2:	4770      	bx	lr
		return AFEC0_IRQn;
  4019f4:	201d      	movs	r0, #29
  4019f6:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  4019f8:	f04f 30ff 	mov.w	r0, #4294967295
}
  4019fc:	4770      	bx	lr
  4019fe:	bf00      	nop
  401a00:	4003c000 	.word	0x4003c000

00401a04 <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  401a04:	4b06      	ldr	r3, [pc, #24]	; (401a20 <_afec_init_irq_param+0x1c>)
  401a06:	4298      	cmp	r0, r3
  401a08:	d003      	beq.n	401a12 <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  401a0a:	4b06      	ldr	r3, [pc, #24]	; (401a24 <_afec_init_irq_param+0x20>)
  401a0c:	4298      	cmp	r0, r3
  401a0e:	d003      	beq.n	401a18 <_afec_init_irq_param+0x14>
  401a10:	4770      	bx	lr
		_afec0_dev = dev;
  401a12:	4b05      	ldr	r3, [pc, #20]	; (401a28 <_afec_init_irq_param+0x24>)
  401a14:	6019      	str	r1, [r3, #0]
  401a16:	e7f8      	b.n	401a0a <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  401a18:	4b03      	ldr	r3, [pc, #12]	; (401a28 <_afec_init_irq_param+0x24>)
  401a1a:	6059      	str	r1, [r3, #4]
	}
}
  401a1c:	e7f8      	b.n	401a10 <_afec_init_irq_param+0xc>
  401a1e:	bf00      	nop
  401a20:	4003c000 	.word	0x4003c000
  401a24:	40064000 	.word	0x40064000
  401a28:	2040033c 	.word	0x2040033c

00401a2c <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  401a2c:	2364      	movs	r3, #100	; 0x64
  401a2e:	4a1d      	ldr	r2, [pc, #116]	; (401aa4 <_afec_init+0x78>)
  401a30:	fb03 2301 	mla	r3, r3, r1, r2
  401a34:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  401a36:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  401a38:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  401a3a:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  401a3c:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  401a3e:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  401a40:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  401a42:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  401a44:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  401a46:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  401a48:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  401a4a:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  401a4c:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  401a4e:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  401a50:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  401a52:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  401a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  401a58:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  401a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  401a5e:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  401a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  401a64:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  401a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  401a6a:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401a6e:	2200      	movs	r2, #0
  401a70:	2a0b      	cmp	r2, #11
  401a72:	d814      	bhi.n	401a9e <_afec_init+0x72>
{
  401a74:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  401a76:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  401a78:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401a7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401a80:	4413      	add	r3, r2
  401a82:	330c      	adds	r3, #12
  401a84:	4c07      	ldr	r4, [pc, #28]	; (401aa4 <_afec_init+0x78>)
  401a86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  401a8a:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  401a8c:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401a8e:	3201      	adds	r2, #1
  401a90:	b2d2      	uxtb	r2, r2
  401a92:	2a0b      	cmp	r2, #11
  401a94:	d9ef      	bls.n	401a76 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  401a96:	2000      	movs	r0, #0
  401a98:	f85d 4b04 	ldr.w	r4, [sp], #4
  401a9c:	4770      	bx	lr
  401a9e:	2000      	movs	r0, #0
  401aa0:	4770      	bx	lr
  401aa2:	bf00      	nop
  401aa4:	00405f74 	.word	0x00405f74

00401aa8 <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  401aa8:	b530      	push	{r4, r5, lr}
  401aaa:	b083      	sub	sp, #12
  401aac:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  401aae:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  401ab0:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  401ab2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  401ab4:	400b      	ands	r3, r1
  401ab6:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  401ab8:	9b01      	ldr	r3, [sp, #4]
  401aba:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401abe:	d10e      	bne.n	401ade <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  401ac0:	9b01      	ldr	r3, [sp, #4]
  401ac2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  401ac6:	d10e      	bne.n	401ae6 <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  401ac8:	9b01      	ldr	r3, [sp, #4]
  401aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401ace:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  401ad0:	9c01      	ldr	r4, [sp, #4]
  401ad2:	fab4 f484 	clz	r4, r4
  401ad6:	f1c4 0420 	rsb	r4, r4, #32
  401ada:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401adc:	e01f      	b.n	401b1e <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  401ade:	6803      	ldr	r3, [r0, #0]
  401ae0:	2100      	movs	r1, #0
  401ae2:	4798      	blx	r3
  401ae4:	e7ec      	b.n	401ac0 <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  401ae6:	686b      	ldr	r3, [r5, #4]
  401ae8:	2100      	movs	r1, #0
  401aea:	4628      	mov	r0, r5
  401aec:	4798      	blx	r3
  401aee:	e7eb      	b.n	401ac8 <_afec_interrupt_handler+0x20>
		cnt--;
  401af0:	3c01      	subs	r4, #1
  401af2:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  401af4:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  401af6:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  401af8:	68ab      	ldr	r3, [r5, #8]
  401afa:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  401afc:	6e92      	ldr	r2, [r2, #104]	; 0x68
  401afe:	b292      	uxth	r2, r2
  401b00:	4621      	mov	r1, r4
  401b02:	4628      	mov	r0, r5
  401b04:	4798      	blx	r3
		status &= ~(1 << cnt);
  401b06:	2301      	movs	r3, #1
  401b08:	40a3      	lsls	r3, r4
  401b0a:	9c01      	ldr	r4, [sp, #4]
  401b0c:	ea24 0403 	bic.w	r4, r4, r3
  401b10:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  401b12:	9c01      	ldr	r4, [sp, #4]
  401b14:	fab4 f484 	clz	r4, r4
  401b18:	f1c4 0420 	rsb	r4, r4, #32
  401b1c:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401b1e:	2c00      	cmp	r4, #0
  401b20:	d1e6      	bne.n	401af0 <_afec_interrupt_handler+0x48>
	}
}
  401b22:	b003      	add	sp, #12
  401b24:	bd30      	pop	{r4, r5, pc}
	...

00401b28 <_afec_get_hardware_index>:
{
  401b28:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  401b2a:	4b09      	ldr	r3, [pc, #36]	; (401b50 <_afec_get_hardware_index+0x28>)
  401b2c:	4298      	cmp	r0, r3
  401b2e:	d00a      	beq.n	401b46 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  401b30:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  401b34:	4298      	cmp	r0, r3
  401b36:	d008      	beq.n	401b4a <_afec_get_hardware_index+0x22>
	ASSERT(false);
  401b38:	22a7      	movs	r2, #167	; 0xa7
  401b3a:	4906      	ldr	r1, [pc, #24]	; (401b54 <_afec_get_hardware_index+0x2c>)
  401b3c:	2000      	movs	r0, #0
  401b3e:	4b06      	ldr	r3, [pc, #24]	; (401b58 <_afec_get_hardware_index+0x30>)
  401b40:	4798      	blx	r3
	return 0;
  401b42:	2000      	movs	r0, #0
  401b44:	bd08      	pop	{r3, pc}
		return 0;
  401b46:	2000      	movs	r0, #0
  401b48:	bd08      	pop	{r3, pc}
		return 1;
  401b4a:	2001      	movs	r0, #1
}
  401b4c:	bd08      	pop	{r3, pc}
  401b4e:	bf00      	nop
  401b50:	4003c000 	.word	0x4003c000
  401b54:	0040603c 	.word	0x0040603c
  401b58:	004018c1 	.word	0x004018c1

00401b5c <_afec_get_regs>:
{
  401b5c:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  401b5e:	4b09      	ldr	r3, [pc, #36]	; (401b84 <_afec_get_regs+0x28>)
  401b60:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401b62:	2300      	movs	r3, #0
  401b64:	2b01      	cmp	r3, #1
  401b66:	d809      	bhi.n	401b7c <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  401b68:	2264      	movs	r2, #100	; 0x64
  401b6a:	fb02 f203 	mul.w	r2, r2, r3
  401b6e:	4906      	ldr	r1, [pc, #24]	; (401b88 <_afec_get_regs+0x2c>)
  401b70:	5c8a      	ldrb	r2, [r1, r2]
  401b72:	4290      	cmp	r0, r2
  401b74:	d003      	beq.n	401b7e <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401b76:	3301      	adds	r3, #1
  401b78:	b2db      	uxtb	r3, r3
  401b7a:	e7f3      	b.n	401b64 <_afec_get_regs+0x8>
	return 0;
  401b7c:	2300      	movs	r3, #0
}
  401b7e:	4618      	mov	r0, r3
  401b80:	bd08      	pop	{r3, pc}
  401b82:	bf00      	nop
  401b84:	00401b29 	.word	0x00401b29
  401b88:	00405f74 	.word	0x00405f74

00401b8c <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  401b8c:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  401b8e:	4b02      	ldr	r3, [pc, #8]	; (401b98 <AFEC0_Handler+0xc>)
  401b90:	6818      	ldr	r0, [r3, #0]
  401b92:	4b02      	ldr	r3, [pc, #8]	; (401b9c <AFEC0_Handler+0x10>)
  401b94:	4798      	blx	r3
  401b96:	bd08      	pop	{r3, pc}
  401b98:	2040033c 	.word	0x2040033c
  401b9c:	00401aa9 	.word	0x00401aa9

00401ba0 <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  401ba0:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  401ba2:	4b02      	ldr	r3, [pc, #8]	; (401bac <AFEC1_Handler+0xc>)
  401ba4:	6858      	ldr	r0, [r3, #4]
  401ba6:	4b02      	ldr	r3, [pc, #8]	; (401bb0 <AFEC1_Handler+0x10>)
  401ba8:	4798      	blx	r3
  401baa:	bd08      	pop	{r3, pc}
  401bac:	2040033c 	.word	0x2040033c
  401bb0:	00401aa9 	.word	0x00401aa9

00401bb4 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  401bb4:	b570      	push	{r4, r5, r6, lr}
  401bb6:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  401bb8:	4605      	mov	r5, r0
  401bba:	f44f 72a1 	mov.w	r2, #322	; 0x142
  401bbe:	4923      	ldr	r1, [pc, #140]	; (401c4c <_adc_async_init+0x98>)
  401bc0:	3000      	adds	r0, #0
  401bc2:	bf18      	it	ne
  401bc4:	2001      	movne	r0, #1
  401bc6:	4b22      	ldr	r3, [pc, #136]	; (401c50 <_adc_async_init+0x9c>)
  401bc8:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  401bca:	4620      	mov	r0, r4
  401bcc:	4b21      	ldr	r3, [pc, #132]	; (401c54 <_adc_async_init+0xa0>)
  401bce:	4798      	blx	r3
  401bd0:	4601      	mov	r1, r0
  401bd2:	4620      	mov	r0, r4
  401bd4:	4b20      	ldr	r3, [pc, #128]	; (401c58 <_adc_async_init+0xa4>)
  401bd6:	4798      	blx	r3
	if (init_status) {
  401bd8:	4606      	mov	r6, r0
  401bda:	b108      	cbz	r0, 401be0 <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  401bdc:	4630      	mov	r0, r6
  401bde:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  401be0:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  401be2:	4629      	mov	r1, r5
  401be4:	4620      	mov	r0, r4
  401be6:	4b1d      	ldr	r3, [pc, #116]	; (401c5c <_adc_async_init+0xa8>)
  401be8:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  401bea:	4628      	mov	r0, r5
  401bec:	4b1c      	ldr	r3, [pc, #112]	; (401c60 <_adc_async_init+0xac>)
  401bee:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401bf0:	2800      	cmp	r0, #0
  401bf2:	db0d      	blt.n	401c10 <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401bf4:	0943      	lsrs	r3, r0, #5
  401bf6:	f000 001f 	and.w	r0, r0, #31
  401bfa:	2201      	movs	r2, #1
  401bfc:	fa02 f000 	lsl.w	r0, r2, r0
  401c00:	3320      	adds	r3, #32
  401c02:	4a18      	ldr	r2, [pc, #96]	; (401c64 <_adc_async_init+0xb0>)
  401c04:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401c08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401c0c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  401c10:	4628      	mov	r0, r5
  401c12:	4b13      	ldr	r3, [pc, #76]	; (401c60 <_adc_async_init+0xac>)
  401c14:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401c16:	2800      	cmp	r0, #0
  401c18:	db09      	blt.n	401c2e <_adc_async_init+0x7a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c1a:	0943      	lsrs	r3, r0, #5
  401c1c:	f000 001f 	and.w	r0, r0, #31
  401c20:	2201      	movs	r2, #1
  401c22:	fa02 f000 	lsl.w	r0, r2, r0
  401c26:	3360      	adds	r3, #96	; 0x60
  401c28:	4a0e      	ldr	r2, [pc, #56]	; (401c64 <_adc_async_init+0xb0>)
  401c2a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  401c2e:	4628      	mov	r0, r5
  401c30:	4b0b      	ldr	r3, [pc, #44]	; (401c60 <_adc_async_init+0xac>)
  401c32:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401c34:	2800      	cmp	r0, #0
  401c36:	dbd1      	blt.n	401bdc <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c38:	0942      	lsrs	r2, r0, #5
  401c3a:	f000 001f 	and.w	r0, r0, #31
  401c3e:	2301      	movs	r3, #1
  401c40:	fa03 f000 	lsl.w	r0, r3, r0
  401c44:	4b07      	ldr	r3, [pc, #28]	; (401c64 <_adc_async_init+0xb0>)
  401c46:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  401c4a:	e7c7      	b.n	401bdc <_adc_async_init+0x28>
  401c4c:	0040603c 	.word	0x0040603c
  401c50:	004018c1 	.word	0x004018c1
  401c54:	00401b5d 	.word	0x00401b5d
  401c58:	00401a2d 	.word	0x00401a2d
  401c5c:	00401a05 	.word	0x00401a05
  401c60:	004019e1 	.word	0x004019e1
  401c64:	e000e100 	.word	0xe000e100

00401c68 <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  401c68:	6942      	ldr	r2, [r0, #20]
  401c6a:	2301      	movs	r3, #1
  401c6c:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  401c70:	6151      	str	r1, [r2, #20]
  401c72:	4770      	bx	lr

00401c74 <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  401c74:	2002      	movs	r0, #2
  401c76:	4770      	bx	lr

00401c78 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  401c78:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401c7c:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  401c80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401c84:	fb03 f000 	mul.w	r0, r3, r0
  401c88:	4770      	bx	lr
	...

00401c8c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  401c8c:	b500      	push	{lr}
  401c8e:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  401c90:	a801      	add	r0, sp, #4
  401c92:	4b14      	ldr	r3, [pc, #80]	; (401ce4 <_init_chip+0x58>)
  401c94:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  401c96:	4a14      	ldr	r2, [pc, #80]	; (401ce8 <_init_chip+0x5c>)
  401c98:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  401ca4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401ca8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  401cac:	a801      	add	r0, sp, #4
  401cae:	4b0f      	ldr	r3, [pc, #60]	; (401cec <_init_chip+0x60>)
  401cb0:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  401cb2:	4a0f      	ldr	r2, [pc, #60]	; (401cf0 <_init_chip+0x64>)
  401cb4:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  401cb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  401cba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  401cbe:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401cc0:	4b0c      	ldr	r3, [pc, #48]	; (401cf4 <_init_chip+0x68>)
  401cc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  401cc6:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401cca:	d104      	bne.n	401cd6 <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401ccc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401cd0:	4b08      	ldr	r3, [pc, #32]	; (401cf4 <_init_chip+0x68>)
  401cd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  401cd6:	4b08      	ldr	r3, [pc, #32]	; (401cf8 <_init_chip+0x6c>)
  401cd8:	4798      	blx	r3

#endif
	_pmc_init();
  401cda:	4b08      	ldr	r3, [pc, #32]	; (401cfc <_init_chip+0x70>)
  401cdc:	4798      	blx	r3
}
  401cde:	b003      	add	sp, #12
  401ce0:	f85d fb04 	ldr.w	pc, [sp], #4
  401ce4:	0040130d 	.word	0x0040130d
  401ce8:	e000ed00 	.word	0xe000ed00
  401cec:	0040131b 	.word	0x0040131b
  401cf0:	400e0c00 	.word	0x400e0c00
  401cf4:	400e0600 	.word	0x400e0600
  401cf8:	00402885 	.word	0x00402885
  401cfc:	00402115 	.word	0x00402115

00401d00 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  401d00:	b538      	push	{r3, r4, r5, lr}
  401d02:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  401d04:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  401d06:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  401d08:	f014 0f01 	tst.w	r4, #1
  401d0c:	d11a      	bne.n	401d44 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  401d0e:	f414 7f00 	tst.w	r4, #512	; 0x200
  401d12:	d11a      	bne.n	401d4a <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  401d14:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  401d18:	d11b      	bne.n	401d52 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  401d1a:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  401d1e:	d11d      	bne.n	401d5c <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  401d20:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  401d24:	d008      	beq.n	401d38 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401d26:	68eb      	ldr	r3, [r5, #12]
  401d28:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  401d2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
  401d2c:	f012 0f20 	tst.w	r2, #32
  401d30:	d019      	beq.n	401d66 <_can_irq_handler+0x66>
  401d32:	2102      	movs	r1, #2
  401d34:	4628      	mov	r0, r5
  401d36:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  401d38:	f014 0f08 	tst.w	r4, #8
  401d3c:	d115      	bne.n	401d6a <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  401d3e:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  401d40:	651c      	str	r4, [r3, #80]	; 0x50
  401d42:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  401d44:	6883      	ldr	r3, [r0, #8]
  401d46:	4798      	blx	r3
  401d48:	e7e1      	b.n	401d0e <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  401d4a:	686b      	ldr	r3, [r5, #4]
  401d4c:	4628      	mov	r0, r5
  401d4e:	4798      	blx	r3
  401d50:	e7e0      	b.n	401d14 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  401d52:	68eb      	ldr	r3, [r5, #12]
  401d54:	2103      	movs	r1, #3
  401d56:	4628      	mov	r0, r5
  401d58:	4798      	blx	r3
  401d5a:	e7de      	b.n	401d1a <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  401d5c:	68eb      	ldr	r3, [r5, #12]
  401d5e:	2100      	movs	r1, #0
  401d60:	4628      	mov	r0, r5
  401d62:	4798      	blx	r3
  401d64:	e7dc      	b.n	401d20 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401d66:	2101      	movs	r1, #1
  401d68:	e7e4      	b.n	401d34 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  401d6a:	68eb      	ldr	r3, [r5, #12]
  401d6c:	2104      	movs	r1, #4
  401d6e:	4628      	mov	r0, r5
  401d70:	4798      	blx	r3
  401d72:	e7e4      	b.n	401d3e <_can_irq_handler+0x3e>

00401d74 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  401d74:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  401d76:	4b02      	ldr	r3, [pc, #8]	; (401d80 <MCAN1_INT0_Handler+0xc>)
  401d78:	6a98      	ldr	r0, [r3, #40]	; 0x28
  401d7a:	4b02      	ldr	r3, [pc, #8]	; (401d84 <MCAN1_INT0_Handler+0x10>)
  401d7c:	4798      	blx	r3
  401d7e:	bd08      	pop	{r3, pc}
  401d80:	20400344 	.word	0x20400344
  401d84:	00401d01 	.word	0x00401d01

00401d88 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401d88:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  401d8a:	2500      	movs	r5, #0
  401d8c:	428d      	cmp	r5, r1
  401d8e:	d210      	bcs.n	401db2 <_ffs+0x2a>
  401d90:	2201      	movs	r2, #1
  401d92:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401d94:	2b1f      	cmp	r3, #31
  401d96:	d80a      	bhi.n	401dae <_ffs+0x26>
			if (v[i] & bit) {
  401d98:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401d9c:	4222      	tst	r2, r4
  401d9e:	d102      	bne.n	401da6 <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401da0:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401da2:	3301      	adds	r3, #1
  401da4:	e7f6      	b.n	401d94 <_ffs+0xc>
				return i * 32 + j;
  401da6:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401daa:	bc30      	pop	{r4, r5}
  401dac:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  401dae:	3501      	adds	r5, #1
  401db0:	e7ec      	b.n	401d8c <_ffs+0x4>
	return -1;
  401db2:	f04f 30ff 	mov.w	r0, #4294967295
  401db6:	e7f8      	b.n	401daa <_ffs+0x22>

00401db8 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401db8:	b510      	push	{r4, lr}
  401dba:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401dbc:	2300      	movs	r3, #0
  401dbe:	9301      	str	r3, [sp, #4]
  401dc0:	9302      	str	r3, [sp, #8]
  401dc2:	9303      	str	r3, [sp, #12]
  401dc4:	9304      	str	r3, [sp, #16]
  401dc6:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401dc8:	4b28      	ldr	r3, [pc, #160]	; (401e6c <_ext_irq_handler+0xb4>)
  401dca:	6818      	ldr	r0, [r3, #0]
  401dcc:	22f8      	movs	r2, #248	; 0xf8
  401dce:	4928      	ldr	r1, [pc, #160]	; (401e70 <_ext_irq_handler+0xb8>)
  401dd0:	3000      	adds	r0, #0
  401dd2:	bf18      	it	ne
  401dd4:	2001      	movne	r0, #1
  401dd6:	4b27      	ldr	r3, [pc, #156]	; (401e74 <_ext_irq_handler+0xbc>)
  401dd8:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401dda:	4b27      	ldr	r3, [pc, #156]	; (401e78 <_ext_irq_handler+0xc0>)
  401ddc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401de0:	4013      	ands	r3, r2
  401de2:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401de4:	4a25      	ldr	r2, [pc, #148]	; (401e7c <_ext_irq_handler+0xc4>)
  401de6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401de8:	6c92      	ldr	r2, [r2, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401dea:	400a      	ands	r2, r1
  401dec:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  401dee:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  401df0:	4923      	ldr	r1, [pc, #140]	; (401e80 <_ext_irq_handler+0xc8>)
  401df2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401df4:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401df6:	400a      	ands	r2, r1
  401df8:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  401dfa:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  401dfc:	e02c      	b.n	401e58 <_ext_irq_handler+0xa0>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  401dfe:	4b1b      	ldr	r3, [pc, #108]	; (401e6c <_ext_irq_handler+0xb4>)
  401e00:	681b      	ldr	r3, [r3, #0]
  401e02:	4620      	mov	r0, r4
  401e04:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  401e06:	1163      	asrs	r3, r4, #5
  401e08:	f004 041f 	and.w	r4, r4, #31
  401e0c:	2201      	movs	r2, #1
  401e0e:	fa02 f404 	lsl.w	r4, r2, r4
  401e12:	aa06      	add	r2, sp, #24
  401e14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401e18:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401e1c:	ea22 0204 	bic.w	r2, r2, r4
  401e20:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  401e24:	2105      	movs	r1, #5
  401e26:	a801      	add	r0, sp, #4
  401e28:	4b16      	ldr	r3, [pc, #88]	; (401e84 <_ext_irq_handler+0xcc>)
  401e2a:	4798      	blx	r3
  401e2c:	4604      	mov	r4, r0
		while (-1 != pos) {
  401e2e:	f1b4 3fff 	cmp.w	r4, #4294967295
  401e32:	d1e4      	bne.n	401dfe <_ext_irq_handler+0x46>
	return ((Pio *)hw)->PIO_ISR;
  401e34:	4a10      	ldr	r2, [pc, #64]	; (401e78 <_ext_irq_handler+0xc0>)
  401e36:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401e38:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401e3a:	400b      	ands	r3, r1
  401e3c:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401e3e:	490f      	ldr	r1, [pc, #60]	; (401e7c <_ext_irq_handler+0xc4>)
  401e40:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401e42:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401e44:	4002      	ands	r2, r0
  401e46:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  401e48:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  401e4a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  401e4e:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401e50:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401e52:	4002      	ands	r2, r0
  401e54:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  401e56:	4313      	orrs	r3, r2
	while (flag_total) {
  401e58:	b12b      	cbz	r3, 401e66 <_ext_irq_handler+0xae>
		pos = _ffs(flags, 5);
  401e5a:	2105      	movs	r1, #5
  401e5c:	a801      	add	r0, sp, #4
  401e5e:	4b09      	ldr	r3, [pc, #36]	; (401e84 <_ext_irq_handler+0xcc>)
  401e60:	4798      	blx	r3
  401e62:	4604      	mov	r4, r0
		while (-1 != pos) {
  401e64:	e7e3      	b.n	401e2e <_ext_irq_handler+0x76>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  401e66:	b006      	add	sp, #24
  401e68:	bd10      	pop	{r4, pc}
  401e6a:	bf00      	nop
  401e6c:	20400370 	.word	0x20400370
  401e70:	004060b0 	.word	0x004060b0
  401e74:	004018c1 	.word	0x004018c1
  401e78:	400e0e00 	.word	0x400e0e00
  401e7c:	400e1000 	.word	0x400e1000
  401e80:	400e1400 	.word	0x400e1400
  401e84:	00401d89 	.word	0x00401d89

00401e88 <_pio_get_hardware_index>:
{
  401e88:	b510      	push	{r4, lr}
	ASSERT(hw);
  401e8a:	4604      	mov	r4, r0
  401e8c:	22d2      	movs	r2, #210	; 0xd2
  401e8e:	4905      	ldr	r1, [pc, #20]	; (401ea4 <_pio_get_hardware_index+0x1c>)
  401e90:	3000      	adds	r0, #0
  401e92:	bf18      	it	ne
  401e94:	2001      	movne	r0, #1
  401e96:	4b04      	ldr	r3, [pc, #16]	; (401ea8 <_pio_get_hardware_index+0x20>)
  401e98:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  401e9a:	4804      	ldr	r0, [pc, #16]	; (401eac <_pio_get_hardware_index+0x24>)
  401e9c:	4420      	add	r0, r4
}
  401e9e:	f3c0 2047 	ubfx	r0, r0, #9, #8
  401ea2:	bd10      	pop	{r4, pc}
  401ea4:	004060b0 	.word	0x004060b0
  401ea8:	004018c1 	.word	0x004018c1
  401eac:	bff1f200 	.word	0xbff1f200

00401eb0 <_pio_get_index>:
{
  401eb0:	b510      	push	{r4, lr}
	ASSERT(hw);
  401eb2:	4604      	mov	r4, r0
  401eb4:	22e0      	movs	r2, #224	; 0xe0
  401eb6:	490d      	ldr	r1, [pc, #52]	; (401eec <_pio_get_index+0x3c>)
  401eb8:	3000      	adds	r0, #0
  401eba:	bf18      	it	ne
  401ebc:	2001      	movne	r0, #1
  401ebe:	4b0c      	ldr	r3, [pc, #48]	; (401ef0 <_pio_get_index+0x40>)
  401ec0:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  401ec2:	4620      	mov	r0, r4
  401ec4:	4b0b      	ldr	r3, [pc, #44]	; (401ef4 <_pio_get_index+0x44>)
  401ec6:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401ec8:	2300      	movs	r3, #0
  401eca:	2b02      	cmp	r3, #2
  401ecc:	d80b      	bhi.n	401ee6 <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  401ece:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  401ed2:	008a      	lsls	r2, r1, #2
  401ed4:	4908      	ldr	r1, [pc, #32]	; (401ef8 <_pio_get_index+0x48>)
  401ed6:	5c8a      	ldrb	r2, [r1, r2]
  401ed8:	4290      	cmp	r0, r2
  401eda:	d002      	beq.n	401ee2 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401edc:	3301      	adds	r3, #1
  401ede:	b2db      	uxtb	r3, r3
  401ee0:	e7f3      	b.n	401eca <_pio_get_index+0x1a>
			return i;
  401ee2:	b258      	sxtb	r0, r3
  401ee4:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  401ee6:	f04f 30ff 	mov.w	r0, #4294967295
}
  401eea:	bd10      	pop	{r4, pc}
  401eec:	004060b0 	.word	0x004060b0
  401ef0:	004018c1 	.word	0x004018c1
  401ef4:	00401e89 	.word	0x00401e89
  401ef8:	00406054 	.word	0x00406054

00401efc <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401efc:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  401efe:	4604      	mov	r4, r0
  401f00:	f44f 72af 	mov.w	r2, #350	; 0x15e
  401f04:	4929      	ldr	r1, [pc, #164]	; (401fac <_pio_init+0xb0>)
  401f06:	3000      	adds	r0, #0
  401f08:	bf18      	it	ne
  401f0a:	2001      	movne	r0, #1
  401f0c:	4b28      	ldr	r3, [pc, #160]	; (401fb0 <_pio_init+0xb4>)
  401f0e:	4798      	blx	r3

	i = _pio_get_index(hw);
  401f10:	4620      	mov	r0, r4
  401f12:	4b28      	ldr	r3, [pc, #160]	; (401fb4 <_pio_init+0xb8>)
  401f14:	4798      	blx	r3
	if (i < 0) {
  401f16:	2800      	cmp	r0, #0
  401f18:	db43      	blt.n	401fa2 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  401f1a:	4d27      	ldr	r5, [pc, #156]	; (401fb8 <_pio_init+0xbc>)
  401f1c:	00c2      	lsls	r2, r0, #3
  401f1e:	1a11      	subs	r1, r2, r0
  401f20:	008b      	lsls	r3, r1, #2
  401f22:	442b      	add	r3, r5
  401f24:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  401f26:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  401f2a:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  401f2c:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  401f30:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  401f32:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  401f36:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  401f38:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  401f3c:	1a10      	subs	r0, r2, r0
  401f3e:	0083      	lsls	r3, r0, #2
  401f40:	442b      	add	r3, r5
  401f42:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  401f44:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401f48:	4620      	mov	r0, r4
  401f4a:	4b1c      	ldr	r3, [pc, #112]	; (401fbc <_pio_init+0xc0>)
  401f4c:	4798      	blx	r3
  401f4e:	4428      	add	r0, r5
  401f50:	f990 3054 	ldrsb.w	r3, [r0, #84]	; 0x54
  if ((int32_t)(IRQn) >= 0)
  401f54:	2b00      	cmp	r3, #0
  401f56:	db0c      	blt.n	401f72 <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401f58:	095a      	lsrs	r2, r3, #5
  401f5a:	f003 001f 	and.w	r0, r3, #31
  401f5e:	2101      	movs	r1, #1
  401f60:	4081      	lsls	r1, r0
  401f62:	3220      	adds	r2, #32
  401f64:	4816      	ldr	r0, [pc, #88]	; (401fc0 <_pio_init+0xc4>)
  401f66:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401f6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401f6e:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  401f72:	2b00      	cmp	r3, #0
  401f74:	db08      	blt.n	401f88 <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401f76:	095a      	lsrs	r2, r3, #5
  401f78:	f003 001f 	and.w	r0, r3, #31
  401f7c:	2101      	movs	r1, #1
  401f7e:	4081      	lsls	r1, r0
  401f80:	3260      	adds	r2, #96	; 0x60
  401f82:	480f      	ldr	r0, [pc, #60]	; (401fc0 <_pio_init+0xc4>)
  401f84:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401f88:	2b00      	cmp	r3, #0
  401f8a:	db0d      	blt.n	401fa8 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401f8c:	0959      	lsrs	r1, r3, #5
  401f8e:	f003 031f 	and.w	r3, r3, #31
  401f92:	2201      	movs	r2, #1
  401f94:	fa02 f303 	lsl.w	r3, r2, r3
  401f98:	4a09      	ldr	r2, [pc, #36]	; (401fc0 <_pio_init+0xc4>)
  401f9a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  401f9e:	2000      	movs	r0, #0
  401fa0:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  401fa2:	f06f 0010 	mvn.w	r0, #16
  401fa6:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401fa8:	2000      	movs	r0, #0
}
  401faa:	bd38      	pop	{r3, r4, r5, pc}
  401fac:	004060b0 	.word	0x004060b0
  401fb0:	004018c1 	.word	0x004018c1
  401fb4:	00401eb1 	.word	0x00401eb1
  401fb8:	00406054 	.word	0x00406054
  401fbc:	00401e89 	.word	0x00401e89
  401fc0:	e000e100 	.word	0xe000e100

00401fc4 <PIOD_Handler>:
{
  401fc4:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401fc6:	4b01      	ldr	r3, [pc, #4]	; (401fcc <PIOD_Handler+0x8>)
  401fc8:	4798      	blx	r3
  401fca:	bd08      	pop	{r3, pc}
  401fcc:	00401db9 	.word	0x00401db9

00401fd0 <PIOB_Handler>:
{
  401fd0:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401fd2:	4b01      	ldr	r3, [pc, #4]	; (401fd8 <PIOB_Handler+0x8>)
  401fd4:	4798      	blx	r3
  401fd6:	bd08      	pop	{r3, pc}
  401fd8:	00401db9 	.word	0x00401db9

00401fdc <PIOA_Handler>:
{
  401fdc:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401fde:	4b01      	ldr	r3, [pc, #4]	; (401fe4 <PIOA_Handler+0x8>)
  401fe0:	4798      	blx	r3
  401fe2:	bd08      	pop	{r3, pc}
  401fe4:	00401db9 	.word	0x00401db9

00401fe8 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401fe8:	b538      	push	{r3, r4, r5, lr}
  401fea:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401fec:	4805      	ldr	r0, [pc, #20]	; (402004 <_ext_irq_init+0x1c>)
  401fee:	4c06      	ldr	r4, [pc, #24]	; (402008 <_ext_irq_init+0x20>)
  401ff0:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  401ff2:	4806      	ldr	r0, [pc, #24]	; (40200c <_ext_irq_init+0x24>)
  401ff4:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  401ff6:	4806      	ldr	r0, [pc, #24]	; (402010 <_ext_irq_init+0x28>)
  401ff8:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401ffa:	4b06      	ldr	r3, [pc, #24]	; (402014 <_ext_irq_init+0x2c>)
  401ffc:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401ffe:	2000      	movs	r0, #0
  402000:	bd38      	pop	{r3, r4, r5, pc}
  402002:	bf00      	nop
  402004:	400e0e00 	.word	0x400e0e00
  402008:	00401efd 	.word	0x00401efd
  40200c:	400e1000 	.word	0x400e1000
  402010:	400e1400 	.word	0x400e1400
  402014:	20400370 	.word	0x20400370

00402018 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  402018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40201c:	4604      	mov	r4, r0
  40201e:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  402020:	f8df 8050 	ldr.w	r8, [pc, #80]	; 402074 <_ext_irq_enable+0x5c>
  402024:	f240 12ab 	movw	r2, #427	; 0x1ab
  402028:	4641      	mov	r1, r8
  40202a:	289f      	cmp	r0, #159	; 0x9f
  40202c:	bf8c      	ite	hi
  40202e:	2000      	movhi	r0, #0
  402030:	2001      	movls	r0, #1
  402032:	4e0e      	ldr	r6, [pc, #56]	; (40206c <_ext_irq_enable+0x54>)
  402034:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  402036:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  402038:	22c3      	movs	r2, #195	; 0xc3
  40203a:	4641      	mov	r1, r8
  40203c:	2d9f      	cmp	r5, #159	; 0x9f
  40203e:	bf8c      	ite	hi
  402040:	2000      	movhi	r0, #0
  402042:	2001      	movls	r0, #1
  402044:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  402046:	096d      	lsrs	r5, r5, #5
  402048:	4b09      	ldr	r3, [pc, #36]	; (402070 <_ext_irq_enable+0x58>)
  40204a:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  40204e:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  402052:	b937      	cbnz	r7, 402062 <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  402054:	2301      	movs	r3, #1
  402056:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  40205a:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  40205c:	2000      	movs	r0, #0
  40205e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  402062:	2301      	movs	r3, #1
  402064:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  402068:	642c      	str	r4, [r5, #64]	; 0x40
  40206a:	e7f7      	b.n	40205c <_ext_irq_enable+0x44>
  40206c:	004018c1 	.word	0x004018c1
  402070:	400e0e00 	.word	0x400e0e00
  402074:	004060b0 	.word	0x004060b0

00402078 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  402078:	490e      	ldr	r1, [pc, #56]	; (4020b4 <_pmc_init_sources+0x3c>)
  40207a:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  40207c:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  402080:	4b0d      	ldr	r3, [pc, #52]	; (4020b8 <_pmc_init_sources+0x40>)
  402082:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  402084:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  402086:	4b0b      	ldr	r3, [pc, #44]	; (4020b4 <_pmc_init_sources+0x3c>)
  402088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  40208a:	f013 0f01 	tst.w	r3, #1
  40208e:	d0fa      	beq.n	402086 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  402090:	4b08      	ldr	r3, [pc, #32]	; (4020b4 <_pmc_init_sources+0x3c>)
  402092:	6a19      	ldr	r1, [r3, #32]
  402094:	4a09      	ldr	r2, [pc, #36]	; (4020bc <_pmc_init_sources+0x44>)
  402096:	430a      	orrs	r2, r1
  402098:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  40209a:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  40209c:	4a08      	ldr	r2, [pc, #32]	; (4020c0 <_pmc_init_sources+0x48>)
  40209e:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4020a0:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  4020a2:	4a08      	ldr	r2, [pc, #32]	; (4020c4 <_pmc_init_sources+0x4c>)
  4020a4:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4020a6:	4b03      	ldr	r3, [pc, #12]	; (4020b4 <_pmc_init_sources+0x3c>)
  4020a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4020aa:	f013 0f02 	tst.w	r3, #2
  4020ae:	d0fa      	beq.n	4020a6 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4020b0:	4770      	bx	lr
  4020b2:	bf00      	nop
  4020b4:	400e0600 	.word	0x400e0600
  4020b8:	00373e01 	.word	0x00373e01
  4020bc:	01370000 	.word	0x01370000
  4020c0:	f800ffff 	.word	0xf800ffff
  4020c4:	20183f01 	.word	0x20183f01

004020c8 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4020c8:	4a11      	ldr	r2, [pc, #68]	; (402110 <_pmc_init_master_clock+0x48>)
  4020ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  4020cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4020d0:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4020d2:	4b0f      	ldr	r3, [pc, #60]	; (402110 <_pmc_init_master_clock+0x48>)
  4020d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4020d6:	f013 0f08 	tst.w	r3, #8
  4020da:	d0fa      	beq.n	4020d2 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4020dc:	4a0c      	ldr	r2, [pc, #48]	; (402110 <_pmc_init_master_clock+0x48>)
  4020de:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  4020e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  4020e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  4020e8:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4020ea:	4b09      	ldr	r3, [pc, #36]	; (402110 <_pmc_init_master_clock+0x48>)
  4020ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4020ee:	f013 0f08 	tst.w	r3, #8
  4020f2:	d0fa      	beq.n	4020ea <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4020f4:	4a06      	ldr	r2, [pc, #24]	; (402110 <_pmc_init_master_clock+0x48>)
  4020f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  4020f8:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  4020fc:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  402100:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  402102:	4b03      	ldr	r3, [pc, #12]	; (402110 <_pmc_init_master_clock+0x48>)
  402104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  402106:	f013 0f08 	tst.w	r3, #8
  40210a:	d0fa      	beq.n	402102 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  40210c:	4770      	bx	lr
  40210e:	bf00      	nop
  402110:	400e0600 	.word	0x400e0600

00402114 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  402114:	b508      	push	{r3, lr}
	_pmc_init_sources();
  402116:	4b02      	ldr	r3, [pc, #8]	; (402120 <_pmc_init+0xc>)
  402118:	4798      	blx	r3
	_pmc_init_master_clock();
  40211a:	4b02      	ldr	r3, [pc, #8]	; (402124 <_pmc_init+0x10>)
  40211c:	4798      	blx	r3
  40211e:	bd08      	pop	{r3, pc}
  402120:	00402079 	.word	0x00402079
  402124:	004020c9 	.word	0x004020c9

00402128 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  402128:	2300      	movs	r3, #0
  40212a:	2b01      	cmp	r3, #1
  40212c:	d80f      	bhi.n	40214e <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  40212e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  402132:	008a      	lsls	r2, r1, #2
  402134:	4907      	ldr	r1, [pc, #28]	; (402154 <_pwm_get_cfg+0x2c>)
  402136:	588a      	ldr	r2, [r1, r2]
  402138:	4282      	cmp	r2, r0
  40213a:	d002      	beq.n	402142 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  40213c:	3301      	adds	r3, #1
  40213e:	b2db      	uxtb	r3, r3
  402140:	e7f3      	b.n	40212a <_pwm_get_cfg+0x2>
			return (_pwms + i);
  402142:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  402146:	009a      	lsls	r2, r3, #2
  402148:	4608      	mov	r0, r1
  40214a:	4410      	add	r0, r2
  40214c:	4770      	bx	lr
		}
	}

	return NULL;
  40214e:	2000      	movs	r0, #0
}
  402150:	4770      	bx	lr
  402152:	bf00      	nop
  402154:	004060cc 	.word	0x004060cc

00402158 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  402158:	4b06      	ldr	r3, [pc, #24]	; (402174 <_pwm_init_irq_param+0x1c>)
  40215a:	4298      	cmp	r0, r3
  40215c:	d003      	beq.n	402166 <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  40215e:	4b06      	ldr	r3, [pc, #24]	; (402178 <_pwm_init_irq_param+0x20>)
  402160:	4298      	cmp	r0, r3
  402162:	d003      	beq.n	40216c <_pwm_init_irq_param+0x14>
  402164:	4770      	bx	lr
		_pwm0_dev = dev;
  402166:	4b05      	ldr	r3, [pc, #20]	; (40217c <_pwm_init_irq_param+0x24>)
  402168:	6019      	str	r1, [r3, #0]
  40216a:	e7f8      	b.n	40215e <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  40216c:	4b03      	ldr	r3, [pc, #12]	; (40217c <_pwm_init_irq_param+0x24>)
  40216e:	6059      	str	r1, [r3, #4]
	}
}
  402170:	e7f8      	b.n	402164 <_pwm_init_irq_param+0xc>
  402172:	bf00      	nop
  402174:	40020000 	.word	0x40020000
  402178:	4005c000 	.word	0x4005c000
  40217c:	20400374 	.word	0x20400374

00402180 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  402180:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  402182:	6903      	ldr	r3, [r0, #16]
	return ((Pwm *)hw)->PWM_ISR1;
  402184:	69db      	ldr	r3, [r3, #28]
  402186:	b113      	cbz	r3, 40218e <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  402188:	6803      	ldr	r3, [r0, #0]
  40218a:	b103      	cbz	r3, 40218e <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  40218c:	4798      	blx	r3
  40218e:	bd08      	pop	{r3, pc}

00402190 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  402190:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  402192:	4b02      	ldr	r3, [pc, #8]	; (40219c <PWM0_Handler+0xc>)
  402194:	6818      	ldr	r0, [r3, #0]
  402196:	4b02      	ldr	r3, [pc, #8]	; (4021a0 <PWM0_Handler+0x10>)
  402198:	4798      	blx	r3
  40219a:	bd08      	pop	{r3, pc}
  40219c:	20400374 	.word	0x20400374
  4021a0:	00402181 	.word	0x00402181

004021a4 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  4021a4:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  4021a6:	4b02      	ldr	r3, [pc, #8]	; (4021b0 <PWM1_Handler+0xc>)
  4021a8:	6858      	ldr	r0, [r3, #4]
  4021aa:	4b02      	ldr	r3, [pc, #8]	; (4021b4 <PWM1_Handler+0x10>)
  4021ac:	4798      	blx	r3
  4021ae:	bd08      	pop	{r3, pc}
  4021b0:	20400374 	.word	0x20400374
  4021b4:	00402181 	.word	0x00402181

004021b8 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  4021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4021ba:	4606      	mov	r6, r0
	ASSERT(hw);
  4021bc:	460c      	mov	r4, r1
  4021be:	1c08      	adds	r0, r1, #0
  4021c0:	bf18      	it	ne
  4021c2:	2001      	movne	r0, #1
  4021c4:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  4021c8:	4944      	ldr	r1, [pc, #272]	; (4022dc <_pwm_init+0x124>)
  4021ca:	4b45      	ldr	r3, [pc, #276]	; (4022e0 <_pwm_init+0x128>)
  4021cc:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  4021ce:	4620      	mov	r0, r4
  4021d0:	4b44      	ldr	r3, [pc, #272]	; (4022e4 <_pwm_init+0x12c>)
  4021d2:	4798      	blx	r3
  4021d4:	4605      	mov	r5, r0

	device->hw = hw;
  4021d6:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  4021d8:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  4021da:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  4021dc:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  4021de:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  4021e0:	6903      	ldr	r3, [r0, #16]
  4021e2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  4021e6:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  4021e8:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  4021ea:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  4021ec:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  4021ee:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  4021f0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  4021f4:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  4021f6:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  4021f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  4021fa:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  4021fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  402200:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  402204:	2300      	movs	r3, #0
  402206:	e019      	b.n	40223c <_pwm_init+0x84>
		ch = cfg->ch + i;
  402208:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  40220a:	0118      	lsls	r0, r3, #4
  40220c:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  402210:	5c3a      	ldrb	r2, [r7, r0]
  402212:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  402216:	3210      	adds	r2, #16
  402218:	0152      	lsls	r2, r2, #5
  40221a:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  40221c:	5c3a      	ldrb	r2, [r7, r0]
  40221e:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  402222:	3210      	adds	r2, #16
  402224:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  402228:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  40222a:	5c3a      	ldrb	r2, [r7, r0]
  40222c:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  402230:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  402234:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  402238:	3301      	adds	r3, #1
  40223a:	b25b      	sxtb	r3, r3
  40223c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40223e:	4293      	cmp	r3, r2
  402240:	d3e2      	bcc.n	402208 <_pwm_init+0x50>
  402242:	2300      	movs	r3, #0
  402244:	e014      	b.n	402270 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  402246:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  402248:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  40224c:	0082      	lsls	r2, r0, #2
  40224e:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  402252:	5c88      	ldrb	r0, [r1, r2]
  402254:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  402258:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  40225c:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  402260:	5c8a      	ldrb	r2, [r1, r2]
  402262:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  402266:	3213      	adds	r2, #19
  402268:	0112      	lsls	r2, r2, #4
  40226a:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  40226c:	3301      	adds	r3, #1
  40226e:	b25b      	sxtb	r3, r3
  402270:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  402272:	4293      	cmp	r3, r2
  402274:	d3e7      	bcc.n	402246 <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  402276:	4631      	mov	r1, r6
  402278:	4620      	mov	r0, r4
  40227a:	4b1b      	ldr	r3, [pc, #108]	; (4022e8 <_pwm_init+0x130>)
  40227c:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  40227e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402282:	2b00      	cmp	r3, #0
  402284:	db0d      	blt.n	4022a2 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402286:	095a      	lsrs	r2, r3, #5
  402288:	f003 031f 	and.w	r3, r3, #31
  40228c:	2101      	movs	r1, #1
  40228e:	fa01 f303 	lsl.w	r3, r1, r3
  402292:	3220      	adds	r2, #32
  402294:	4915      	ldr	r1, [pc, #84]	; (4022ec <_pwm_init+0x134>)
  402296:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40229a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40229e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  4022a2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4022a6:	2b00      	cmp	r3, #0
  4022a8:	db09      	blt.n	4022be <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4022aa:	095a      	lsrs	r2, r3, #5
  4022ac:	f003 031f 	and.w	r3, r3, #31
  4022b0:	2101      	movs	r1, #1
  4022b2:	fa01 f303 	lsl.w	r3, r1, r3
  4022b6:	3260      	adds	r2, #96	; 0x60
  4022b8:	490c      	ldr	r1, [pc, #48]	; (4022ec <_pwm_init+0x134>)
  4022ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  4022be:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4022c2:	2b00      	cmp	r3, #0
  4022c4:	db08      	blt.n	4022d8 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4022c6:	0959      	lsrs	r1, r3, #5
  4022c8:	f003 031f 	and.w	r3, r3, #31
  4022cc:	2201      	movs	r2, #1
  4022ce:	fa02 f303 	lsl.w	r3, r2, r3
  4022d2:	4a06      	ldr	r2, [pc, #24]	; (4022ec <_pwm_init+0x134>)
  4022d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  4022d8:	2000      	movs	r0, #0
  4022da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4022dc:	00406174 	.word	0x00406174
  4022e0:	004018c1 	.word	0x004018c1
  4022e4:	00402129 	.word	0x00402129
  4022e8:	00402159 	.word	0x00402159
  4022ec:	e000e100 	.word	0xe000e100

004022f0 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  4022f0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  4022f2:	4604      	mov	r4, r0
  4022f4:	f240 12b5 	movw	r2, #437	; 0x1b5
  4022f8:	490b      	ldr	r1, [pc, #44]	; (402328 <_pwm_enable+0x38>)
  4022fa:	3000      	adds	r0, #0
  4022fc:	bf18      	it	ne
  4022fe:	2001      	movne	r0, #1
  402300:	4b0a      	ldr	r3, [pc, #40]	; (40232c <_pwm_enable+0x3c>)
  402302:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  402304:	6920      	ldr	r0, [r4, #16]
  402306:	4b0a      	ldr	r3, [pc, #40]	; (402330 <_pwm_enable+0x40>)
  402308:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  40230a:	2300      	movs	r3, #0
  40230c:	e008      	b.n	402320 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  40230e:	6921      	ldr	r1, [r4, #16]
  402310:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402312:	011a      	lsls	r2, r3, #4
  402314:	5cad      	ldrb	r5, [r5, r2]
  402316:	2201      	movs	r2, #1
  402318:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  40231a:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  40231c:	3301      	adds	r3, #1
  40231e:	b25b      	sxtb	r3, r3
  402320:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402322:	4293      	cmp	r3, r2
  402324:	d3f3      	bcc.n	40230e <_pwm_enable+0x1e>
	}
}
  402326:	bd38      	pop	{r3, r4, r5, pc}
  402328:	00406174 	.word	0x00406174
  40232c:	004018c1 	.word	0x004018c1
  402330:	00402129 	.word	0x00402129

00402334 <_pwm_disable>:

void _pwm_disable(struct _pwm_device *const device)
{
  402334:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  402336:	4604      	mov	r4, r0
  402338:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
  40233c:	490b      	ldr	r1, [pc, #44]	; (40236c <_pwm_disable+0x38>)
  40233e:	3000      	adds	r0, #0
  402340:	bf18      	it	ne
  402342:	2001      	movne	r0, #1
  402344:	4b0a      	ldr	r3, [pc, #40]	; (402370 <_pwm_disable+0x3c>)
  402346:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  402348:	6920      	ldr	r0, [r4, #16]
  40234a:	4b0a      	ldr	r3, [pc, #40]	; (402374 <_pwm_disable+0x40>)
  40234c:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  40234e:	2300      	movs	r3, #0
  402350:	e008      	b.n	402364 <_pwm_disable+0x30>
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
  402352:	6921      	ldr	r1, [r4, #16]
  402354:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402356:	011a      	lsls	r2, r3, #4
  402358:	5cad      	ldrb	r5, [r5, r2]
  40235a:	2201      	movs	r2, #1
  40235c:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_DIS_reg(const void *const hw, hri_pwm_dis_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_DIS = data;
  40235e:	608a      	str	r2, [r1, #8]
	for (i = 0; i < cfg->ch_num; i++) {
  402360:	3301      	adds	r3, #1
  402362:	b25b      	sxtb	r3, r3
  402364:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402366:	4293      	cmp	r3, r2
  402368:	d3f3      	bcc.n	402352 <_pwm_disable+0x1e>
	}
}
  40236a:	bd38      	pop	{r3, r4, r5, pc}
  40236c:	00406174 	.word	0x00406174
  402370:	004018c1 	.word	0x004018c1
  402374:	00402129 	.word	0x00402129

00402378 <_pwm_set_param>:

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  402378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40237a:	460d      	mov	r5, r1
  40237c:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  40237e:	4604      	mov	r4, r0
  402380:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  402384:	4911      	ldr	r1, [pc, #68]	; (4023cc <_pwm_set_param+0x54>)
  402386:	2800      	cmp	r0, #0
  402388:	bf18      	it	ne
  40238a:	42ae      	cmpne	r6, r5
  40238c:	bf34      	ite	cc
  40238e:	2001      	movcc	r0, #1
  402390:	2000      	movcs	r0, #0
  402392:	4b0f      	ldr	r3, [pc, #60]	; (4023d0 <_pwm_set_param+0x58>)
  402394:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  402396:	6920      	ldr	r0, [r4, #16]
  402398:	4b0e      	ldr	r3, [pc, #56]	; (4023d4 <_pwm_set_param+0x5c>)
  40239a:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  40239c:	2300      	movs	r3, #0
  40239e:	e010      	b.n	4023c2 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  4023a0:	6922      	ldr	r2, [r4, #16]
  4023a2:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4023a4:	0119      	lsls	r1, r3, #4
  4023a6:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  4023a8:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  4023ac:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  4023b0:	6922      	ldr	r2, [r4, #16]
  4023b2:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4023b4:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  4023b6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  4023ba:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  4023be:	3301      	adds	r3, #1
  4023c0:	b2db      	uxtb	r3, r3
  4023c2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4023c4:	4293      	cmp	r3, r2
  4023c6:	d3eb      	bcc.n	4023a0 <_pwm_set_param+0x28>
	}
}
  4023c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4023ca:	bf00      	nop
  4023cc:	00406174 	.word	0x00406174
  4023d0:	004018c1 	.word	0x004018c1
  4023d4:	00402129 	.word	0x00402129

004023d8 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  4023d8:	b510      	push	{r4, lr}
	ASSERT(device);
  4023da:	4604      	mov	r4, r0
  4023dc:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4023e0:	4907      	ldr	r1, [pc, #28]	; (402400 <_pwm_is_enabled+0x28>)
  4023e2:	3000      	adds	r0, #0
  4023e4:	bf18      	it	ne
  4023e6:	2001      	movne	r0, #1
  4023e8:	4b06      	ldr	r3, [pc, #24]	; (402404 <_pwm_is_enabled+0x2c>)
  4023ea:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  4023ec:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  4023ee:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  4023f0:	f013 0f0f 	tst.w	r3, #15
  4023f4:	d001      	beq.n	4023fa <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  4023f6:	2001      	movs	r0, #1
	}
}
  4023f8:	bd10      	pop	{r4, pc}
		return false;
  4023fa:	2000      	movs	r0, #0
  4023fc:	bd10      	pop	{r4, pc}
  4023fe:	bf00      	nop
  402400:	00406174 	.word	0x00406174
  402404:	004018c1 	.word	0x004018c1

00402408 <_pwm_set_irq_state>:

	return hri_pwm_read_CDTY_reg(device->hw, cfg->ch[0].index);
}

void _pwm_set_irq_state(struct _pwm_device *const device, const enum _pwm_callback_type type, const bool disable)
{
  402408:	b538      	push	{r3, r4, r5, lr}
  40240a:	460d      	mov	r5, r1
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device);
  40240c:	4604      	mov	r4, r0
  40240e:	f44f 7200 	mov.w	r2, #512	; 0x200
  402412:	4912      	ldr	r1, [pc, #72]	; (40245c <_pwm_set_irq_state+0x54>)
  402414:	3000      	adds	r0, #0
  402416:	bf18      	it	ne
  402418:	2001      	movne	r0, #1
  40241a:	4b11      	ldr	r3, [pc, #68]	; (402460 <_pwm_set_irq_state+0x58>)
  40241c:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  40241e:	6920      	ldr	r0, [r4, #16]
  402420:	4b10      	ldr	r3, [pc, #64]	; (402464 <_pwm_set_irq_state+0x5c>)
  402422:	4798      	blx	r3

	if (PWM_DEVICE_PERIOD_CB == type) {
  402424:	b18d      	cbz	r5, 40244a <_pwm_set_irq_state+0x42>
		for (i = 0; i < cfg->ch_num; i++) {
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
		}
	} else if (PWM_DEVICE_ERROR_CB == type) {
  402426:	2d01      	cmp	r5, #1
  402428:	d011      	beq.n	40244e <_pwm_set_irq_state+0x46>
  40242a:	bd38      	pop	{r3, r4, r5, pc}
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
  40242c:	6921      	ldr	r1, [r4, #16]
  40242e:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402430:	0113      	lsls	r3, r2, #4
  402432:	5ced      	ldrb	r5, [r5, r3]
  402434:	2301      	movs	r3, #1
  402436:	40ab      	lsls	r3, r5
	((Pwm *)hw)->PWM_IER1 = data;
  402438:	610b      	str	r3, [r1, #16]
	((Pwm *)hw)->PWM_IDR1 = ~data;
  40243a:	43db      	mvns	r3, r3
  40243c:	614b      	str	r3, [r1, #20]
		for (i = 0; i < cfg->ch_num; i++) {
  40243e:	3201      	adds	r2, #1
  402440:	b2d2      	uxtb	r2, r2
  402442:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402444:	429a      	cmp	r2, r3
  402446:	d3f1      	bcc.n	40242c <_pwm_set_irq_state+0x24>
  402448:	bd38      	pop	{r3, r4, r5, pc}
  40244a:	2200      	movs	r2, #0
  40244c:	e7f9      	b.n	402442 <_pwm_set_irq_state+0x3a>
		ASSERT(false);
  40244e:	f240 2209 	movw	r2, #521	; 0x209
  402452:	4902      	ldr	r1, [pc, #8]	; (40245c <_pwm_set_irq_state+0x54>)
  402454:	2000      	movs	r0, #0
  402456:	4b02      	ldr	r3, [pc, #8]	; (402460 <_pwm_set_irq_state+0x58>)
  402458:	4798      	blx	r3
	}
}
  40245a:	e7e6      	b.n	40242a <_pwm_set_irq_state+0x22>
  40245c:	00406174 	.word	0x00406174
  402460:	004018c1 	.word	0x004018c1
  402464:	00402129 	.word	0x00402129

00402468 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  402468:	2000      	movs	r0, #0
  40246a:	4770      	bx	lr

0040246c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  40246c:	4b03      	ldr	r3, [pc, #12]	; (40247c <_system_time_init+0x10>)
  40246e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  402472:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  402474:	2205      	movs	r2, #5
  402476:	601a      	str	r2, [r3, #0]
  402478:	4770      	bx	lr
  40247a:	bf00      	nop
  40247c:	e000e010 	.word	0xe000e010

00402480 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  402480:	b508      	push	{r3, lr}
	_system_time_init(hw);
  402482:	4b01      	ldr	r3, [pc, #4]	; (402488 <_delay_init+0x8>)
  402484:	4798      	blx	r3
  402486:	bd08      	pop	{r3, pc}
  402488:	0040246d 	.word	0x0040246d

0040248c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  40248c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  40248e:	e00d      	b.n	4024ac <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  402490:	4b0d      	ldr	r3, [pc, #52]	; (4024c8 <_delay_cycles+0x3c>)
  402492:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  402496:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  402498:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  40249a:	4b0b      	ldr	r3, [pc, #44]	; (4024c8 <_delay_cycles+0x3c>)
  40249c:	681b      	ldr	r3, [r3, #0]
  40249e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4024a2:	d0fa      	beq.n	40249a <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  4024a4:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4024a8:	3101      	adds	r1, #1
	while (n--) {
  4024aa:	4610      	mov	r0, r2
  4024ac:	1e43      	subs	r3, r0, #1
  4024ae:	b2da      	uxtb	r2, r3
  4024b0:	2800      	cmp	r0, #0
  4024b2:	d1ed      	bne.n	402490 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  4024b4:	4b04      	ldr	r3, [pc, #16]	; (4024c8 <_delay_cycles+0x3c>)
  4024b6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4024b8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4024ba:	4b03      	ldr	r3, [pc, #12]	; (4024c8 <_delay_cycles+0x3c>)
  4024bc:	681b      	ldr	r3, [r3, #0]
  4024be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4024c2:	d0fa      	beq.n	4024ba <_delay_cycles+0x2e>
		;
}
  4024c4:	4770      	bx	lr
  4024c6:	bf00      	nop
  4024c8:	e000e010 	.word	0xe000e010

004024cc <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4024cc:	2300      	movs	r3, #0
  4024ce:	2b01      	cmp	r3, #1
  4024d0:	d815      	bhi.n	4024fe <get_cfg+0x32>
{
  4024d2:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  4024d4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  4024d8:	008a      	lsls	r2, r1, #2
  4024da:	490a      	ldr	r1, [pc, #40]	; (402504 <get_cfg+0x38>)
  4024dc:	588a      	ldr	r2, [r1, r2]
  4024de:	4282      	cmp	r2, r0
  4024e0:	d007      	beq.n	4024f2 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4024e2:	3301      	adds	r3, #1
  4024e4:	b2db      	uxtb	r3, r3
  4024e6:	2b01      	cmp	r3, #1
  4024e8:	d9f4      	bls.n	4024d4 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  4024ea:	2000      	movs	r0, #0
}
  4024ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4024f0:	4770      	bx	lr
			return &(_tcs[i]);
  4024f2:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  4024f6:	00a3      	lsls	r3, r4, #2
  4024f8:	4608      	mov	r0, r1
  4024fa:	4418      	add	r0, r3
  4024fc:	e7f6      	b.n	4024ec <get_cfg+0x20>
	return NULL;
  4024fe:	2000      	movs	r0, #0
  402500:	4770      	bx	lr
  402502:	bf00      	nop
  402504:	20400000 	.word	0x20400000

00402508 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  402508:	4b06      	ldr	r3, [pc, #24]	; (402524 <_tc_init_irq_param+0x1c>)
  40250a:	4298      	cmp	r0, r3
  40250c:	d003      	beq.n	402516 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  40250e:	4b06      	ldr	r3, [pc, #24]	; (402528 <_tc_init_irq_param+0x20>)
  402510:	4298      	cmp	r0, r3
  402512:	d003      	beq.n	40251c <_tc_init_irq_param+0x14>
  402514:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  402516:	4b05      	ldr	r3, [pc, #20]	; (40252c <_tc_init_irq_param+0x24>)
  402518:	6019      	str	r1, [r3, #0]
  40251a:	e7f8      	b.n	40250e <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  40251c:	4b03      	ldr	r3, [pc, #12]	; (40252c <_tc_init_irq_param+0x24>)
  40251e:	6059      	str	r1, [r3, #4]
	}
}
  402520:	e7f8      	b.n	402514 <_tc_init_irq_param+0xc>
  402522:	bf00      	nop
  402524:	4000c000 	.word	0x4000c000
  402528:	40054000 	.word	0x40054000
  40252c:	20400394 	.word	0x20400394

00402530 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  402530:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  402532:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  402534:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  402536:	f013 0f10 	tst.w	r3, #16
  40253a:	d100      	bne.n	40253e <tc_interrupt_handler+0xe>
  40253c:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  40253e:	6803      	ldr	r3, [r0, #0]
  402540:	4798      	blx	r3
	}
}
  402542:	e7fb      	b.n	40253c <tc_interrupt_handler+0xc>

00402544 <_timer_init>:
{
  402544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402548:	4606      	mov	r6, r0
  40254a:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  40254c:	4608      	mov	r0, r1
  40254e:	4b2f      	ldr	r3, [pc, #188]	; (40260c <_timer_init+0xc8>)
  402550:	4798      	blx	r3
  402552:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  402554:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  402558:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  40255c:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  40255e:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  402562:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  402564:	22c3      	movs	r2, #195	; 0xc3
  402566:	492a      	ldr	r1, [pc, #168]	; (402610 <_timer_init+0xcc>)
  402568:	2001      	movs	r0, #1
  40256a:	4b2a      	ldr	r3, [pc, #168]	; (402614 <_timer_init+0xd0>)
  40256c:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  40256e:	f248 0307 	movw	r3, #32775	; 0x8007
  402572:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  402574:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  402578:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  40257c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  402580:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  402582:	2300      	movs	r3, #0
  402584:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  402586:	f248 020f 	movw	r2, #32783	; 0x800f
  40258a:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  40258c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  402590:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  402594:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  402598:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  40259a:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  40259c:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  40259e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  4025a2:	4631      	mov	r1, r6
  4025a4:	4620      	mov	r0, r4
  4025a6:	4b1c      	ldr	r3, [pc, #112]	; (402618 <_timer_init+0xd4>)
  4025a8:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  4025aa:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4025ae:	2b00      	cmp	r3, #0
  4025b0:	db0d      	blt.n	4025ce <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4025b2:	095a      	lsrs	r2, r3, #5
  4025b4:	f003 031f 	and.w	r3, r3, #31
  4025b8:	2101      	movs	r1, #1
  4025ba:	fa01 f303 	lsl.w	r3, r1, r3
  4025be:	3220      	adds	r2, #32
  4025c0:	4916      	ldr	r1, [pc, #88]	; (40261c <_timer_init+0xd8>)
  4025c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4025c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4025ca:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  4025ce:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4025d2:	2b00      	cmp	r3, #0
  4025d4:	db09      	blt.n	4025ea <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4025d6:	095a      	lsrs	r2, r3, #5
  4025d8:	f003 031f 	and.w	r3, r3, #31
  4025dc:	2101      	movs	r1, #1
  4025de:	fa01 f303 	lsl.w	r3, r1, r3
  4025e2:	3260      	adds	r2, #96	; 0x60
  4025e4:	490d      	ldr	r1, [pc, #52]	; (40261c <_timer_init+0xd8>)
  4025e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  4025ea:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4025ee:	2b00      	cmp	r3, #0
  4025f0:	db08      	blt.n	402604 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4025f2:	0959      	lsrs	r1, r3, #5
  4025f4:	f003 031f 	and.w	r3, r3, #31
  4025f8:	2201      	movs	r2, #1
  4025fa:	fa02 f303 	lsl.w	r3, r2, r3
  4025fe:	4a07      	ldr	r2, [pc, #28]	; (40261c <_timer_init+0xd8>)
  402600:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  402604:	2000      	movs	r0, #0
  402606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40260a:	bf00      	nop
  40260c:	004024cd 	.word	0x004024cd
  402610:	0040618c 	.word	0x0040618c
  402614:	004018c1 	.word	0x004018c1
  402618:	00402509 	.word	0x00402509
  40261c:	e000e100 	.word	0xe000e100

00402620 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402620:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  402622:	2305      	movs	r3, #5
  402624:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402626:	68c2      	ldr	r2, [r0, #12]
  402628:	6413      	str	r3, [r2, #64]	; 0x40
  40262a:	4770      	bx	lr

0040262c <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  40262c:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  40262e:	6a13      	ldr	r3, [r2, #32]
  402630:	f3c3 4300 	ubfx	r3, r3, #16, #1
  402634:	6e10      	ldr	r0, [r2, #96]	; 0x60
  402636:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  40263a:	4318      	orrs	r0, r3
  40263c:	4770      	bx	lr

0040263e <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  40263e:	2000      	movs	r0, #0
  402640:	4770      	bx	lr
	...

00402644 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  402644:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  402646:	4b02      	ldr	r3, [pc, #8]	; (402650 <TC0_Handler+0xc>)
  402648:	6818      	ldr	r0, [r3, #0]
  40264a:	4b02      	ldr	r3, [pc, #8]	; (402654 <TC0_Handler+0x10>)
  40264c:	4798      	blx	r3
  40264e:	bd08      	pop	{r3, pc}
  402650:	20400394 	.word	0x20400394
  402654:	00402531 	.word	0x00402531

00402658 <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  402658:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  40265a:	4b02      	ldr	r3, [pc, #8]	; (402664 <TC9_Handler+0xc>)
  40265c:	6858      	ldr	r0, [r3, #4]
  40265e:	4b02      	ldr	r3, [pc, #8]	; (402668 <TC9_Handler+0x10>)
  402660:	4798      	blx	r3
  402662:	bd08      	pop	{r3, pc}
  402664:	20400394 	.word	0x20400394
  402668:	00402531 	.word	0x00402531

0040266c <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  40266c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40266e:	4604      	mov	r4, r0
  402670:	f240 222b 	movw	r2, #555	; 0x22b
  402674:	4905      	ldr	r1, [pc, #20]	; (40268c <_usart_get_hardware_index+0x20>)
  402676:	3000      	adds	r0, #0
  402678:	bf18      	it	ne
  40267a:	2001      	movne	r0, #1
  40267c:	4b04      	ldr	r3, [pc, #16]	; (402690 <_usart_get_hardware_index+0x24>)
  40267e:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  402680:	4804      	ldr	r0, [pc, #16]	; (402694 <_usart_get_hardware_index+0x28>)
  402682:	4420      	add	r0, r4
}
  402684:	f3c0 3087 	ubfx	r0, r0, #14, #8
  402688:	bd10      	pop	{r4, pc}
  40268a:	bf00      	nop
  40268c:	004061ac 	.word	0x004061ac
  402690:	004018c1 	.word	0x004018c1
  402694:	bffdc000 	.word	0xbffdc000

00402698 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  402698:	b510      	push	{r4, lr}
	ASSERT(hw);
  40269a:	4604      	mov	r4, r0
  40269c:	f240 2287 	movw	r2, #647	; 0x287
  4026a0:	490e      	ldr	r1, [pc, #56]	; (4026dc <_get_usart_index+0x44>)
  4026a2:	3000      	adds	r0, #0
  4026a4:	bf18      	it	ne
  4026a6:	2001      	movne	r0, #1
  4026a8:	4b0d      	ldr	r3, [pc, #52]	; (4026e0 <_get_usart_index+0x48>)
  4026aa:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  4026ac:	4620      	mov	r0, r4
  4026ae:	4b0d      	ldr	r3, [pc, #52]	; (4026e4 <_get_usart_index+0x4c>)
  4026b0:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4026b2:	2300      	movs	r3, #0
  4026b4:	b143      	cbz	r3, 4026c8 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  4026b6:	f240 2291 	movw	r2, #657	; 0x291
  4026ba:	4908      	ldr	r1, [pc, #32]	; (4026dc <_get_usart_index+0x44>)
  4026bc:	2000      	movs	r0, #0
  4026be:	4b08      	ldr	r3, [pc, #32]	; (4026e0 <_get_usart_index+0x48>)
  4026c0:	4798      	blx	r3
	return 0;
  4026c2:	2300      	movs	r3, #0
}
  4026c4:	4618      	mov	r0, r3
  4026c6:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  4026c8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4026cc:	008a      	lsls	r2, r1, #2
  4026ce:	4906      	ldr	r1, [pc, #24]	; (4026e8 <_get_usart_index+0x50>)
  4026d0:	5c8a      	ldrb	r2, [r1, r2]
  4026d2:	4290      	cmp	r0, r2
  4026d4:	d0f6      	beq.n	4026c4 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4026d6:	3301      	adds	r3, #1
  4026d8:	b2db      	uxtb	r3, r3
  4026da:	e7eb      	b.n	4026b4 <_get_usart_index+0x1c>
  4026dc:	004061ac 	.word	0x004061ac
  4026e0:	004018c1 	.word	0x004018c1
  4026e4:	0040266d 	.word	0x0040266d
  4026e8:	004061a0 	.word	0x004061a0

004026ec <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  4026ec:	b510      	push	{r4, lr}
	ASSERT(hw);
  4026ee:	4604      	mov	r4, r0
  4026f0:	f240 229e 	movw	r2, #670	; 0x29e
  4026f4:	4911      	ldr	r1, [pc, #68]	; (40273c <_usart_init+0x50>)
  4026f6:	3000      	adds	r0, #0
  4026f8:	bf18      	it	ne
  4026fa:	2001      	movne	r0, #1
  4026fc:	4b10      	ldr	r3, [pc, #64]	; (402740 <_usart_init+0x54>)
  4026fe:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  402700:	4620      	mov	r0, r4
  402702:	4b10      	ldr	r3, [pc, #64]	; (402744 <_usart_init+0x58>)
  402704:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  402706:	4b10      	ldr	r3, [pc, #64]	; (402748 <_usart_init+0x5c>)
  402708:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  40270c:	2300      	movs	r3, #0
  40270e:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  402710:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  402712:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  402714:	22ac      	movs	r2, #172	; 0xac
  402716:	6022      	str	r2, [r4, #0]
  402718:	f44f 7280 	mov.w	r2, #256	; 0x100
  40271c:	6022      	str	r2, [r4, #0]
  40271e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402722:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  402724:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  402728:	0081      	lsls	r1, r0, #2
  40272a:	4a08      	ldr	r2, [pc, #32]	; (40274c <_usart_init+0x60>)
  40272c:	440a      	add	r2, r1
  40272e:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  402730:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  402732:	4a07      	ldr	r2, [pc, #28]	; (402750 <_usart_init+0x64>)
  402734:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  402736:	4618      	mov	r0, r3
  402738:	bd10      	pop	{r4, pc}
  40273a:	bf00      	nop
  40273c:	004061ac 	.word	0x004061ac
  402740:	004018c1 	.word	0x004018c1
  402744:	00402699 	.word	0x00402699
  402748:	55534100 	.word	0x55534100
  40274c:	004061a0 	.word	0x004061a0
  402750:	000100f4 	.word	0x000100f4

00402754 <_usart_sync_init>:
{
  402754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402756:	460c      	mov	r4, r1
	ASSERT(device);
  402758:	4e09      	ldr	r6, [pc, #36]	; (402780 <_usart_sync_init+0x2c>)
  40275a:	4607      	mov	r7, r0
  40275c:	22bd      	movs	r2, #189	; 0xbd
  40275e:	4631      	mov	r1, r6
  402760:	3000      	adds	r0, #0
  402762:	bf18      	it	ne
  402764:	2001      	movne	r0, #1
  402766:	4d07      	ldr	r5, [pc, #28]	; (402784 <_usart_sync_init+0x30>)
  402768:	47a8      	blx	r5
	ASSERT(hw);
  40276a:	22be      	movs	r2, #190	; 0xbe
  40276c:	4631      	mov	r1, r6
  40276e:	1c20      	adds	r0, r4, #0
  402770:	bf18      	it	ne
  402772:	2001      	movne	r0, #1
  402774:	47a8      	blx	r5
	device->hw = hw;
  402776:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  402778:	4620      	mov	r0, r4
  40277a:	4b03      	ldr	r3, [pc, #12]	; (402788 <_usart_sync_init+0x34>)
  40277c:	4798      	blx	r3
}
  40277e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402780:	004061ac 	.word	0x004061ac
  402784:	004018c1 	.word	0x004018c1
  402788:	004026ed 	.word	0x004026ed

0040278c <_usart_sync_enable>:
{
  40278c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  40278e:	4e0a      	ldr	r6, [pc, #40]	; (4027b8 <_usart_sync_enable+0x2c>)
  402790:	4604      	mov	r4, r0
  402792:	f240 1205 	movw	r2, #261	; 0x105
  402796:	4631      	mov	r1, r6
  402798:	3000      	adds	r0, #0
  40279a:	bf18      	it	ne
  40279c:	2001      	movne	r0, #1
  40279e:	4d07      	ldr	r5, [pc, #28]	; (4027bc <_usart_sync_enable+0x30>)
  4027a0:	47a8      	blx	r5
	_usart_enable(device->hw);
  4027a2:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4027a4:	f240 22c7 	movw	r2, #711	; 0x2c7
  4027a8:	4631      	mov	r1, r6
  4027aa:	1c20      	adds	r0, r4, #0
  4027ac:	bf18      	it	ne
  4027ae:	2001      	movne	r0, #1
  4027b0:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  4027b2:	2350      	movs	r3, #80	; 0x50
  4027b4:	6023      	str	r3, [r4, #0]
  4027b6:	bd70      	pop	{r4, r5, r6, pc}
  4027b8:	004061ac 	.word	0x004061ac
  4027bc:	004018c1 	.word	0x004018c1

004027c0 <_usart_sync_write_byte>:
{
  4027c0:	b538      	push	{r3, r4, r5, lr}
  4027c2:	460c      	mov	r4, r1
	ASSERT(device);
  4027c4:	4605      	mov	r5, r0
  4027c6:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4027ca:	4904      	ldr	r1, [pc, #16]	; (4027dc <_usart_sync_write_byte+0x1c>)
  4027cc:	3000      	adds	r0, #0
  4027ce:	bf18      	it	ne
  4027d0:	2001      	movne	r0, #1
  4027d2:	4b03      	ldr	r3, [pc, #12]	; (4027e0 <_usart_sync_write_byte+0x20>)
  4027d4:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  4027d6:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  4027d8:	61dc      	str	r4, [r3, #28]
  4027da:	bd38      	pop	{r3, r4, r5, pc}
  4027dc:	004061ac 	.word	0x004061ac
  4027e0:	004018c1 	.word	0x004018c1

004027e4 <_usart_sync_read_byte>:
{
  4027e4:	b510      	push	{r4, lr}
	ASSERT(device);
  4027e6:	4604      	mov	r4, r0
  4027e8:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  4027ec:	4904      	ldr	r1, [pc, #16]	; (402800 <_usart_sync_read_byte+0x1c>)
  4027ee:	3000      	adds	r0, #0
  4027f0:	bf18      	it	ne
  4027f2:	2001      	movne	r0, #1
  4027f4:	4b03      	ldr	r3, [pc, #12]	; (402804 <_usart_sync_read_byte+0x20>)
  4027f6:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  4027f8:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  4027fa:	6998      	ldr	r0, [r3, #24]
}
  4027fc:	b2c0      	uxtb	r0, r0
  4027fe:	bd10      	pop	{r4, pc}
  402800:	004061ac 	.word	0x004061ac
  402804:	004018c1 	.word	0x004018c1

00402808 <_usart_sync_is_ready_to_send>:
{
  402808:	b510      	push	{r4, lr}
	ASSERT(device);
  40280a:	4604      	mov	r4, r0
  40280c:	f240 12c3 	movw	r2, #451	; 0x1c3
  402810:	4905      	ldr	r1, [pc, #20]	; (402828 <_usart_sync_is_ready_to_send+0x20>)
  402812:	3000      	adds	r0, #0
  402814:	bf18      	it	ne
  402816:	2001      	movne	r0, #1
  402818:	4b04      	ldr	r3, [pc, #16]	; (40282c <_usart_sync_is_ready_to_send+0x24>)
  40281a:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  40281c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  40281e:	6958      	ldr	r0, [r3, #20]
}
  402820:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402824:	bd10      	pop	{r4, pc}
  402826:	bf00      	nop
  402828:	004061ac 	.word	0x004061ac
  40282c:	004018c1 	.word	0x004018c1

00402830 <_usart_sync_is_transmit_done>:
{
  402830:	b510      	push	{r4, lr}
	ASSERT(device);
  402832:	4604      	mov	r4, r0
  402834:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  402838:	4905      	ldr	r1, [pc, #20]	; (402850 <_usart_sync_is_transmit_done+0x20>)
  40283a:	3000      	adds	r0, #0
  40283c:	bf18      	it	ne
  40283e:	2001      	movne	r0, #1
  402840:	4b04      	ldr	r3, [pc, #16]	; (402854 <_usart_sync_is_transmit_done+0x24>)
  402842:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  402844:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  402846:	6958      	ldr	r0, [r3, #20]
}
  402848:	f3c0 2040 	ubfx	r0, r0, #9, #1
  40284c:	bd10      	pop	{r4, pc}
  40284e:	bf00      	nop
  402850:	004061ac 	.word	0x004061ac
  402854:	004018c1 	.word	0x004018c1

00402858 <_usart_sync_is_byte_received>:
{
  402858:	b510      	push	{r4, lr}
	ASSERT(device);
  40285a:	4604      	mov	r4, r0
  40285c:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402860:	4905      	ldr	r1, [pc, #20]	; (402878 <_usart_sync_is_byte_received+0x20>)
  402862:	3000      	adds	r0, #0
  402864:	bf18      	it	ne
  402866:	2001      	movne	r0, #1
  402868:	4b04      	ldr	r3, [pc, #16]	; (40287c <_usart_sync_is_byte_received+0x24>)
  40286a:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  40286c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  40286e:	6958      	ldr	r0, [r3, #20]
  402870:	f000 0001 	and.w	r0, r0, #1
}
  402874:	bd10      	pop	{r4, pc}
  402876:	bf00      	nop
  402878:	004061ac 	.word	0x004061ac
  40287c:	004018c1 	.word	0x004018c1

00402880 <_usart_get_usart_sync>:
}
  402880:	2000      	movs	r0, #0
  402882:	4770      	bx	lr

00402884 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  402884:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  402886:	2300      	movs	r3, #0
  402888:	e004      	b.n	402894 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  40288a:	0199      	lsls	r1, r3, #6
  40288c:	4a16      	ldr	r2, [pc, #88]	; (4028e8 <_dma_init+0x64>)
  40288e:	5852      	ldr	r2, [r2, r1]
  402890:	3301      	adds	r3, #1
  402892:	b2db      	uxtb	r3, r3
  402894:	2b17      	cmp	r3, #23
  402896:	d9f8      	bls.n	40288a <_dma_init+0x6>
  402898:	2300      	movs	r3, #0
  40289a:	e014      	b.n	4028c6 <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  40289c:	4c13      	ldr	r4, [pc, #76]	; (4028ec <_dma_init+0x68>)
  40289e:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  4028a2:	2100      	movs	r1, #0
  4028a4:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  4028a6:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  4028a8:	1c98      	adds	r0, r3, #2
  4028aa:	0180      	lsls	r0, r0, #6
  4028ac:	1825      	adds	r5, r4, r0
  4028ae:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  4028b0:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  4028b2:	490f      	ldr	r1, [pc, #60]	; (4028f0 <_dma_init+0x6c>)
  4028b4:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  4028b8:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  4028ba:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4028be:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  4028c0:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4028c2:	3301      	adds	r3, #1
  4028c4:	b2db      	uxtb	r3, r3
  4028c6:	2b17      	cmp	r3, #23
  4028c8:	d9e8      	bls.n	40289c <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4028ca:	4b0a      	ldr	r3, [pc, #40]	; (4028f4 <_dma_init+0x70>)
  4028cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4028d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4028d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4028d8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4028dc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4028e0:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  4028e2:	2000      	movs	r0, #0
  4028e4:	bc30      	pop	{r4, r5}
  4028e6:	4770      	bx	lr
  4028e8:	4007805c 	.word	0x4007805c
  4028ec:	40078000 	.word	0x40078000
  4028f0:	004061c8 	.word	0x004061c8
  4028f4:	e000e100 	.word	0xe000e100

004028f8 <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  4028f8:	0180      	lsls	r0, r0, #6
  4028fa:	4b02      	ldr	r3, [pc, #8]	; (402904 <_dma_set_destination_address+0xc>)
  4028fc:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  4028fe:	2000      	movs	r0, #0
  402900:	4770      	bx	lr
  402902:	bf00      	nop
  402904:	40078064 	.word	0x40078064

00402908 <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  402908:	0180      	lsls	r0, r0, #6
  40290a:	4b02      	ldr	r3, [pc, #8]	; (402914 <_dma_set_source_address+0xc>)
  40290c:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  40290e:	2000      	movs	r0, #0
  402910:	4770      	bx	lr
  402912:	bf00      	nop
  402914:	40078060 	.word	0x40078060

00402918 <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  402918:	0180      	lsls	r0, r0, #6
  40291a:	4a04      	ldr	r2, [pc, #16]	; (40292c <_dma_set_data_amount+0x14>)
  40291c:	4402      	add	r2, r0
  40291e:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  402920:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  402924:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  402926:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  402928:	2000      	movs	r0, #0
  40292a:	4770      	bx	lr
  40292c:	40078000 	.word	0x40078000

00402930 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  402930:	2301      	movs	r3, #1
  402932:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  402936:	4b03      	ldr	r3, [pc, #12]	; (402944 <_dma_enable_transaction+0x14>)
  402938:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  40293a:	b101      	cbz	r1, 40293e <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  40293c:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  40293e:	2000      	movs	r0, #0
  402940:	4770      	bx	lr
  402942:	bf00      	nop
  402944:	40078000 	.word	0x40078000

00402948 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  402948:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  40294c:	008a      	lsls	r2, r1, #2
  40294e:	4b02      	ldr	r3, [pc, #8]	; (402958 <_dma_get_channel_resource+0x10>)
  402950:	4413      	add	r3, r2
  402952:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  402954:	2000      	movs	r0, #0
  402956:	4770      	bx	lr
  402958:	2040039c 	.word	0x2040039c

0040295c <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  40295c:	b19a      	cbz	r2, 402986 <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  40295e:	b951      	cbnz	r1, 402976 <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  402960:	0182      	lsls	r2, r0, #6
  402962:	4b13      	ldr	r3, [pc, #76]	; (4029b0 <_dma_set_irq_state+0x54>)
  402964:	4413      	add	r3, r2
  402966:	2201      	movs	r2, #1
  402968:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  40296a:	2301      	movs	r3, #1
  40296c:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  402970:	4b0f      	ldr	r3, [pc, #60]	; (4029b0 <_dma_set_irq_state+0x54>)
  402972:	60d8      	str	r0, [r3, #12]
  402974:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  402976:	2901      	cmp	r1, #1
  402978:	d1f7      	bne.n	40296a <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  40297a:	0182      	lsls	r2, r0, #6
  40297c:	4b0c      	ldr	r3, [pc, #48]	; (4029b0 <_dma_set_irq_state+0x54>)
  40297e:	4413      	add	r3, r2
  402980:	2270      	movs	r2, #112	; 0x70
  402982:	651a      	str	r2, [r3, #80]	; 0x50
  402984:	e7f1      	b.n	40296a <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  402986:	b951      	cbnz	r1, 40299e <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  402988:	0182      	lsls	r2, r0, #6
  40298a:	4b09      	ldr	r3, [pc, #36]	; (4029b0 <_dma_set_irq_state+0x54>)
  40298c:	4413      	add	r3, r2
  40298e:	2201      	movs	r2, #1
  402990:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  402992:	2301      	movs	r3, #1
  402994:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  402998:	4b05      	ldr	r3, [pc, #20]	; (4029b0 <_dma_set_irq_state+0x54>)
  40299a:	6118      	str	r0, [r3, #16]
  40299c:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  40299e:	2901      	cmp	r1, #1
  4029a0:	d1f7      	bne.n	402992 <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4029a2:	0182      	lsls	r2, r0, #6
  4029a4:	4b02      	ldr	r3, [pc, #8]	; (4029b0 <_dma_set_irq_state+0x54>)
  4029a6:	4413      	add	r3, r2
  4029a8:	2270      	movs	r2, #112	; 0x70
  4029aa:	655a      	str	r2, [r3, #84]	; 0x54
  4029ac:	e7f1      	b.n	402992 <_dma_set_irq_state+0x36>
  4029ae:	bf00      	nop
  4029b0:	40078000 	.word	0x40078000

004029b4 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  4029b4:	4b17      	ldr	r3, [pc, #92]	; (402a14 <XDMAC_Handler+0x60>)
  4029b6:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4029b8:	2300      	movs	r3, #0
  4029ba:	2b17      	cmp	r3, #23
  4029bc:	d81b      	bhi.n	4029f6 <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  4029be:	fa21 f203 	lsr.w	r2, r1, r3
  4029c2:	f012 0f01 	tst.w	r2, #1
  4029c6:	d102      	bne.n	4029ce <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4029c8:	3301      	adds	r3, #1
  4029ca:	b2db      	uxtb	r3, r3
  4029cc:	e7f5      	b.n	4029ba <XDMAC_Handler+0x6>
			channel = i;
  4029ce:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  4029d0:	2b00      	cmp	r3, #0
  4029d2:	db1d      	blt.n	402a10 <XDMAC_Handler+0x5c>
{
  4029d4:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  4029d6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  4029da:	0090      	lsls	r0, r2, #2
  4029dc:	4a0e      	ldr	r2, [pc, #56]	; (402a18 <XDMAC_Handler+0x64>)
  4029de:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  4029e0:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  4029e2:	0189      	lsls	r1, r1, #6
  4029e4:	4a0d      	ldr	r2, [pc, #52]	; (402a1c <XDMAC_Handler+0x68>)
  4029e6:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  4029e8:	f012 0f70 	tst.w	r2, #112	; 0x70
  4029ec:	d106      	bne.n	4029fc <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  4029ee:	f012 0f01 	tst.w	r2, #1
  4029f2:	d106      	bne.n	402a02 <XDMAC_Handler+0x4e>
  4029f4:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  4029f6:	f04f 33ff 	mov.w	r3, #4294967295
  4029fa:	e7e9      	b.n	4029d0 <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  4029fc:	6843      	ldr	r3, [r0, #4]
  4029fe:	4798      	blx	r3
  402a00:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  402a02:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  402a06:	00a3      	lsls	r3, r4, #2
  402a08:	4a03      	ldr	r2, [pc, #12]	; (402a18 <XDMAC_Handler+0x64>)
  402a0a:	58d3      	ldr	r3, [r2, r3]
  402a0c:	4798      	blx	r3
  402a0e:	e7f1      	b.n	4029f4 <XDMAC_Handler+0x40>
  402a10:	4770      	bx	lr
  402a12:	bf00      	nop
  402a14:	40078000 	.word	0x40078000
  402a18:	2040039c 	.word	0x2040039c
  402a1c:	4007805c 	.word	0x4007805c

00402a20 <main>:




int main(void)
{
  402a20:	b508      	push	{r3, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  402a22:	4b11      	ldr	r3, [pc, #68]	; (402a68 <main+0x48>)
  402a24:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	/* Additional User initialisation */
	dma_adc_init();
  402a26:	4b11      	ldr	r3, [pc, #68]	; (402a6c <main+0x4c>)
  402a28:	4798      	blx	r3
	pwm_init_user();
  402a2a:	4b11      	ldr	r3, [pc, #68]	; (402a70 <main+0x50>)
  402a2c:	4798      	blx	r3
	encoder_init();
  402a2e:	4b11      	ldr	r3, [pc, #68]	; (402a74 <main+0x54>)
  402a30:	4798      	blx	r3
	pos_sens_init();
  402a32:	4b11      	ldr	r3, [pc, #68]	; (402a78 <main+0x58>)
  402a34:	4798      	blx	r3
	
	/* Enable all devices */
	pwm_enable_all();
  402a36:	4b11      	ldr	r3, [pc, #68]	; (402a7c <main+0x5c>)
  402a38:	4798      	blx	r3
	adc_enable_all();
  402a3a:	4b11      	ldr	r3, [pc, #68]	; (402a80 <main+0x60>)
  402a3c:	4798      	blx	r3
	calibrate_curr_sensors();	//both PWM and ADC need to be enabled to calibrate the current sensors
  402a3e:	4b11      	ldr	r3, [pc, #68]	; (402a84 <main+0x64>)
  402a40:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  402a42:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  402a46:	4b10      	ldr	r3, [pc, #64]	; (402a88 <main+0x68>)
  402a48:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);		//enables the DC-DC converter for the HV side
	
	timer_start(&ENCODER_A);
  402a4a:	4810      	ldr	r0, [pc, #64]	; (402a8c <main+0x6c>)
  402a4c:	4c10      	ldr	r4, [pc, #64]	; (402a90 <main+0x70>)
  402a4e:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  402a50:	4810      	ldr	r0, [pc, #64]	; (402a94 <main+0x74>)
  402a52:	47a0      	blx	r4
	
	//test position sensor
	//POS_Sensor_Initial_Test();
	
	//for seeing the suqre waves on just one channel
	pwm_disable(&PWM_0);
  402a54:	4810      	ldr	r0, [pc, #64]	; (402a98 <main+0x78>)
  402a56:	4b11      	ldr	r3, [pc, #68]	; (402a9c <main+0x7c>)
  402a58:	4798      	blx	r3
	pwm_set_duty(PWM_PHASE_C, 950);
  402a5a:	f240 32b6 	movw	r2, #950	; 0x3b6
  402a5e:	2100      	movs	r1, #0
  402a60:	480f      	ldr	r0, [pc, #60]	; (402aa0 <main+0x80>)
  402a62:	4b10      	ldr	r3, [pc, #64]	; (402aa4 <main+0x84>)
  402a64:	4798      	blx	r3
  402a66:	e7fe      	b.n	402a66 <main+0x46>
  402a68:	004001d5 	.word	0x004001d5
  402a6c:	00400805 	.word	0x00400805
  402a70:	004009c1 	.word	0x004009c1
  402a74:	00400291 	.word	0x00400291
  402a78:	00400595 	.word	0x00400595
  402a7c:	00400a95 	.word	0x00400a95
  402a80:	004008f1 	.word	0x004008f1
  402a84:	00400231 	.word	0x00400231
  402a88:	400e0e00 	.word	0x400e0e00
  402a8c:	204005f4 	.word	0x204005f4
  402a90:	00401741 	.word	0x00401741
  402a94:	20400544 	.word	0x20400544
  402a98:	20400528 	.word	0x20400528
  402a9c:	00401599 	.word	0x00401599
  402aa0:	204006cc 	.word	0x204006cc
  402aa4:	00400af5 	.word	0x00400af5

00402aa8 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  402aa8:	b958      	cbnz	r0, 402ac2 <_read+0x1a>
{
  402aaa:	b508      	push	{r3, lr}
  402aac:	460b      	mov	r3, r1
  402aae:	4611      	mov	r1, r2
  402ab0:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  402ab2:	4b05      	ldr	r3, [pc, #20]	; (402ac8 <_read+0x20>)
  402ab4:	4798      	blx	r3
	if (n < 0) {
  402ab6:	2800      	cmp	r0, #0
  402ab8:	db00      	blt.n	402abc <_read+0x14>
		return -1;
	}

	return n;
}
  402aba:	bd08      	pop	{r3, pc}
		return -1;
  402abc:	f04f 30ff 	mov.w	r0, #4294967295
  402ac0:	bd08      	pop	{r3, pc}
		return -1;
  402ac2:	f04f 30ff 	mov.w	r0, #4294967295
  402ac6:	4770      	bx	lr
  402ac8:	00402b21 	.word	0x00402b21

00402acc <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  402acc:	3801      	subs	r0, #1
  402ace:	2802      	cmp	r0, #2
  402ad0:	d80b      	bhi.n	402aea <_write+0x1e>
{
  402ad2:	b508      	push	{r3, lr}
  402ad4:	460b      	mov	r3, r1
  402ad6:	4611      	mov	r1, r2
  402ad8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  402ada:	4b05      	ldr	r3, [pc, #20]	; (402af0 <_write+0x24>)
  402adc:	4798      	blx	r3
	if (n < 0) {
  402ade:	2800      	cmp	r0, #0
  402ae0:	db00      	blt.n	402ae4 <_write+0x18>
		return -1;
	}

	return n;
}
  402ae2:	bd08      	pop	{r3, pc}
		return -1;
  402ae4:	f04f 30ff 	mov.w	r0, #4294967295
  402ae8:	bd08      	pop	{r3, pc}
		return -1;
  402aea:	f04f 30ff 	mov.w	r0, #4294967295
  402aee:	4770      	bx	lr
  402af0:	00402b45 	.word	0x00402b45

00402af4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  402af4:	b570      	push	{r4, r5, r6, lr}
  402af6:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  402af8:	4d06      	ldr	r5, [pc, #24]	; (402b14 <stdio_io_init+0x20>)
  402afa:	682b      	ldr	r3, [r5, #0]
  402afc:	2100      	movs	r1, #0
  402afe:	6898      	ldr	r0, [r3, #8]
  402b00:	4c05      	ldr	r4, [pc, #20]	; (402b18 <stdio_io_init+0x24>)
  402b02:	47a0      	blx	r4
	setbuf(stdin, NULL);
  402b04:	682b      	ldr	r3, [r5, #0]
  402b06:	2100      	movs	r1, #0
  402b08:	6858      	ldr	r0, [r3, #4]
  402b0a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  402b0c:	4b03      	ldr	r3, [pc, #12]	; (402b1c <stdio_io_init+0x28>)
  402b0e:	601e      	str	r6, [r3, #0]
  402b10:	bd70      	pop	{r4, r5, r6, pc}
  402b12:	bf00      	nop
  402b14:	20400048 	.word	0x20400048
  402b18:	00403ea5 	.word	0x00403ea5
  402b1c:	204004bc 	.word	0x204004bc

00402b20 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  402b20:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  402b22:	4b06      	ldr	r3, [pc, #24]	; (402b3c <stdio_io_read+0x1c>)
  402b24:	681b      	ldr	r3, [r3, #0]
  402b26:	b133      	cbz	r3, 402b36 <stdio_io_read+0x16>
  402b28:	460a      	mov	r2, r1
  402b2a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  402b2c:	b292      	uxth	r2, r2
  402b2e:	4618      	mov	r0, r3
  402b30:	4b03      	ldr	r3, [pc, #12]	; (402b40 <stdio_io_read+0x20>)
  402b32:	4798      	blx	r3
  402b34:	bd08      	pop	{r3, pc}
		return 0;
  402b36:	2000      	movs	r0, #0
}
  402b38:	bd08      	pop	{r3, pc}
  402b3a:	bf00      	nop
  402b3c:	204004bc 	.word	0x204004bc
  402b40:	004014d5 	.word	0x004014d5

00402b44 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  402b44:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  402b46:	4b06      	ldr	r3, [pc, #24]	; (402b60 <stdio_io_write+0x1c>)
  402b48:	681b      	ldr	r3, [r3, #0]
  402b4a:	b133      	cbz	r3, 402b5a <stdio_io_write+0x16>
  402b4c:	460a      	mov	r2, r1
  402b4e:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  402b50:	b292      	uxth	r2, r2
  402b52:	4618      	mov	r0, r3
  402b54:	4b03      	ldr	r3, [pc, #12]	; (402b64 <stdio_io_write+0x20>)
  402b56:	4798      	blx	r3
  402b58:	bd08      	pop	{r3, pc}
		return 0;
  402b5a:	2000      	movs	r0, #0
}
  402b5c:	bd08      	pop	{r3, pc}
  402b5e:	bf00      	nop
  402b60:	204004bc 	.word	0x204004bc
  402b64:	004014a5 	.word	0x004014a5

00402b68 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  402b68:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  402b6a:	4c04      	ldr	r4, [pc, #16]	; (402b7c <stdio_redirect_init+0x14>)
  402b6c:	4620      	mov	r0, r4
  402b6e:	4b04      	ldr	r3, [pc, #16]	; (402b80 <stdio_redirect_init+0x18>)
  402b70:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  402b72:	4620      	mov	r0, r4
  402b74:	4b03      	ldr	r3, [pc, #12]	; (402b84 <stdio_redirect_init+0x1c>)
  402b76:	4798      	blx	r3
  402b78:	bd10      	pop	{r4, pc}
  402b7a:	bf00      	nop
  402b7c:	204005e8 	.word	0x204005e8
  402b80:	00401895 	.word	0x00401895
  402b84:	00402af5 	.word	0x00402af5

00402b88 <__aeabi_drsub>:
  402b88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402b8c:	e002      	b.n	402b94 <__adddf3>
  402b8e:	bf00      	nop

00402b90 <__aeabi_dsub>:
  402b90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402b94 <__adddf3>:
  402b94:	b530      	push	{r4, r5, lr}
  402b96:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402b9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402b9e:	ea94 0f05 	teq	r4, r5
  402ba2:	bf08      	it	eq
  402ba4:	ea90 0f02 	teqeq	r0, r2
  402ba8:	bf1f      	itttt	ne
  402baa:	ea54 0c00 	orrsne.w	ip, r4, r0
  402bae:	ea55 0c02 	orrsne.w	ip, r5, r2
  402bb2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402bb6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402bba:	f000 80e2 	beq.w	402d82 <__adddf3+0x1ee>
  402bbe:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402bc2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402bc6:	bfb8      	it	lt
  402bc8:	426d      	neglt	r5, r5
  402bca:	dd0c      	ble.n	402be6 <__adddf3+0x52>
  402bcc:	442c      	add	r4, r5
  402bce:	ea80 0202 	eor.w	r2, r0, r2
  402bd2:	ea81 0303 	eor.w	r3, r1, r3
  402bd6:	ea82 0000 	eor.w	r0, r2, r0
  402bda:	ea83 0101 	eor.w	r1, r3, r1
  402bde:	ea80 0202 	eor.w	r2, r0, r2
  402be2:	ea81 0303 	eor.w	r3, r1, r3
  402be6:	2d36      	cmp	r5, #54	; 0x36
  402be8:	bf88      	it	hi
  402bea:	bd30      	pophi	{r4, r5, pc}
  402bec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402bf0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402bf4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402bf8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402bfc:	d002      	beq.n	402c04 <__adddf3+0x70>
  402bfe:	4240      	negs	r0, r0
  402c00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402c04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402c08:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402c0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402c10:	d002      	beq.n	402c18 <__adddf3+0x84>
  402c12:	4252      	negs	r2, r2
  402c14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402c18:	ea94 0f05 	teq	r4, r5
  402c1c:	f000 80a7 	beq.w	402d6e <__adddf3+0x1da>
  402c20:	f1a4 0401 	sub.w	r4, r4, #1
  402c24:	f1d5 0e20 	rsbs	lr, r5, #32
  402c28:	db0d      	blt.n	402c46 <__adddf3+0xb2>
  402c2a:	fa02 fc0e 	lsl.w	ip, r2, lr
  402c2e:	fa22 f205 	lsr.w	r2, r2, r5
  402c32:	1880      	adds	r0, r0, r2
  402c34:	f141 0100 	adc.w	r1, r1, #0
  402c38:	fa03 f20e 	lsl.w	r2, r3, lr
  402c3c:	1880      	adds	r0, r0, r2
  402c3e:	fa43 f305 	asr.w	r3, r3, r5
  402c42:	4159      	adcs	r1, r3
  402c44:	e00e      	b.n	402c64 <__adddf3+0xd0>
  402c46:	f1a5 0520 	sub.w	r5, r5, #32
  402c4a:	f10e 0e20 	add.w	lr, lr, #32
  402c4e:	2a01      	cmp	r2, #1
  402c50:	fa03 fc0e 	lsl.w	ip, r3, lr
  402c54:	bf28      	it	cs
  402c56:	f04c 0c02 	orrcs.w	ip, ip, #2
  402c5a:	fa43 f305 	asr.w	r3, r3, r5
  402c5e:	18c0      	adds	r0, r0, r3
  402c60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402c64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402c68:	d507      	bpl.n	402c7a <__adddf3+0xe6>
  402c6a:	f04f 0e00 	mov.w	lr, #0
  402c6e:	f1dc 0c00 	rsbs	ip, ip, #0
  402c72:	eb7e 0000 	sbcs.w	r0, lr, r0
  402c76:	eb6e 0101 	sbc.w	r1, lr, r1
  402c7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402c7e:	d31b      	bcc.n	402cb8 <__adddf3+0x124>
  402c80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402c84:	d30c      	bcc.n	402ca0 <__adddf3+0x10c>
  402c86:	0849      	lsrs	r1, r1, #1
  402c88:	ea5f 0030 	movs.w	r0, r0, rrx
  402c8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402c90:	f104 0401 	add.w	r4, r4, #1
  402c94:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402c98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402c9c:	f080 809a 	bcs.w	402dd4 <__adddf3+0x240>
  402ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402ca4:	bf08      	it	eq
  402ca6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402caa:	f150 0000 	adcs.w	r0, r0, #0
  402cae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402cb2:	ea41 0105 	orr.w	r1, r1, r5
  402cb6:	bd30      	pop	{r4, r5, pc}
  402cb8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402cbc:	4140      	adcs	r0, r0
  402cbe:	eb41 0101 	adc.w	r1, r1, r1
  402cc2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402cc6:	f1a4 0401 	sub.w	r4, r4, #1
  402cca:	d1e9      	bne.n	402ca0 <__adddf3+0x10c>
  402ccc:	f091 0f00 	teq	r1, #0
  402cd0:	bf04      	itt	eq
  402cd2:	4601      	moveq	r1, r0
  402cd4:	2000      	moveq	r0, #0
  402cd6:	fab1 f381 	clz	r3, r1
  402cda:	bf08      	it	eq
  402cdc:	3320      	addeq	r3, #32
  402cde:	f1a3 030b 	sub.w	r3, r3, #11
  402ce2:	f1b3 0220 	subs.w	r2, r3, #32
  402ce6:	da0c      	bge.n	402d02 <__adddf3+0x16e>
  402ce8:	320c      	adds	r2, #12
  402cea:	dd08      	ble.n	402cfe <__adddf3+0x16a>
  402cec:	f102 0c14 	add.w	ip, r2, #20
  402cf0:	f1c2 020c 	rsb	r2, r2, #12
  402cf4:	fa01 f00c 	lsl.w	r0, r1, ip
  402cf8:	fa21 f102 	lsr.w	r1, r1, r2
  402cfc:	e00c      	b.n	402d18 <__adddf3+0x184>
  402cfe:	f102 0214 	add.w	r2, r2, #20
  402d02:	bfd8      	it	le
  402d04:	f1c2 0c20 	rsble	ip, r2, #32
  402d08:	fa01 f102 	lsl.w	r1, r1, r2
  402d0c:	fa20 fc0c 	lsr.w	ip, r0, ip
  402d10:	bfdc      	itt	le
  402d12:	ea41 010c 	orrle.w	r1, r1, ip
  402d16:	4090      	lslle	r0, r2
  402d18:	1ae4      	subs	r4, r4, r3
  402d1a:	bfa2      	ittt	ge
  402d1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402d20:	4329      	orrge	r1, r5
  402d22:	bd30      	popge	{r4, r5, pc}
  402d24:	ea6f 0404 	mvn.w	r4, r4
  402d28:	3c1f      	subs	r4, #31
  402d2a:	da1c      	bge.n	402d66 <__adddf3+0x1d2>
  402d2c:	340c      	adds	r4, #12
  402d2e:	dc0e      	bgt.n	402d4e <__adddf3+0x1ba>
  402d30:	f104 0414 	add.w	r4, r4, #20
  402d34:	f1c4 0220 	rsb	r2, r4, #32
  402d38:	fa20 f004 	lsr.w	r0, r0, r4
  402d3c:	fa01 f302 	lsl.w	r3, r1, r2
  402d40:	ea40 0003 	orr.w	r0, r0, r3
  402d44:	fa21 f304 	lsr.w	r3, r1, r4
  402d48:	ea45 0103 	orr.w	r1, r5, r3
  402d4c:	bd30      	pop	{r4, r5, pc}
  402d4e:	f1c4 040c 	rsb	r4, r4, #12
  402d52:	f1c4 0220 	rsb	r2, r4, #32
  402d56:	fa20 f002 	lsr.w	r0, r0, r2
  402d5a:	fa01 f304 	lsl.w	r3, r1, r4
  402d5e:	ea40 0003 	orr.w	r0, r0, r3
  402d62:	4629      	mov	r1, r5
  402d64:	bd30      	pop	{r4, r5, pc}
  402d66:	fa21 f004 	lsr.w	r0, r1, r4
  402d6a:	4629      	mov	r1, r5
  402d6c:	bd30      	pop	{r4, r5, pc}
  402d6e:	f094 0f00 	teq	r4, #0
  402d72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402d76:	bf06      	itte	eq
  402d78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402d7c:	3401      	addeq	r4, #1
  402d7e:	3d01      	subne	r5, #1
  402d80:	e74e      	b.n	402c20 <__adddf3+0x8c>
  402d82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402d86:	bf18      	it	ne
  402d88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402d8c:	d029      	beq.n	402de2 <__adddf3+0x24e>
  402d8e:	ea94 0f05 	teq	r4, r5
  402d92:	bf08      	it	eq
  402d94:	ea90 0f02 	teqeq	r0, r2
  402d98:	d005      	beq.n	402da6 <__adddf3+0x212>
  402d9a:	ea54 0c00 	orrs.w	ip, r4, r0
  402d9e:	bf04      	itt	eq
  402da0:	4619      	moveq	r1, r3
  402da2:	4610      	moveq	r0, r2
  402da4:	bd30      	pop	{r4, r5, pc}
  402da6:	ea91 0f03 	teq	r1, r3
  402daa:	bf1e      	ittt	ne
  402dac:	2100      	movne	r1, #0
  402dae:	2000      	movne	r0, #0
  402db0:	bd30      	popne	{r4, r5, pc}
  402db2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402db6:	d105      	bne.n	402dc4 <__adddf3+0x230>
  402db8:	0040      	lsls	r0, r0, #1
  402dba:	4149      	adcs	r1, r1
  402dbc:	bf28      	it	cs
  402dbe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402dc2:	bd30      	pop	{r4, r5, pc}
  402dc4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402dc8:	bf3c      	itt	cc
  402dca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402dce:	bd30      	popcc	{r4, r5, pc}
  402dd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402dd4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402dd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402ddc:	f04f 0000 	mov.w	r0, #0
  402de0:	bd30      	pop	{r4, r5, pc}
  402de2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402de6:	bf1a      	itte	ne
  402de8:	4619      	movne	r1, r3
  402dea:	4610      	movne	r0, r2
  402dec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402df0:	bf1c      	itt	ne
  402df2:	460b      	movne	r3, r1
  402df4:	4602      	movne	r2, r0
  402df6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402dfa:	bf06      	itte	eq
  402dfc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402e00:	ea91 0f03 	teqeq	r1, r3
  402e04:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402e08:	bd30      	pop	{r4, r5, pc}
  402e0a:	bf00      	nop

00402e0c <__aeabi_ui2d>:
  402e0c:	f090 0f00 	teq	r0, #0
  402e10:	bf04      	itt	eq
  402e12:	2100      	moveq	r1, #0
  402e14:	4770      	bxeq	lr
  402e16:	b530      	push	{r4, r5, lr}
  402e18:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402e1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402e20:	f04f 0500 	mov.w	r5, #0
  402e24:	f04f 0100 	mov.w	r1, #0
  402e28:	e750      	b.n	402ccc <__adddf3+0x138>
  402e2a:	bf00      	nop

00402e2c <__aeabi_i2d>:
  402e2c:	f090 0f00 	teq	r0, #0
  402e30:	bf04      	itt	eq
  402e32:	2100      	moveq	r1, #0
  402e34:	4770      	bxeq	lr
  402e36:	b530      	push	{r4, r5, lr}
  402e38:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402e3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402e40:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402e44:	bf48      	it	mi
  402e46:	4240      	negmi	r0, r0
  402e48:	f04f 0100 	mov.w	r1, #0
  402e4c:	e73e      	b.n	402ccc <__adddf3+0x138>
  402e4e:	bf00      	nop

00402e50 <__aeabi_f2d>:
  402e50:	0042      	lsls	r2, r0, #1
  402e52:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402e56:	ea4f 0131 	mov.w	r1, r1, rrx
  402e5a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402e5e:	bf1f      	itttt	ne
  402e60:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402e64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402e68:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402e6c:	4770      	bxne	lr
  402e6e:	f092 0f00 	teq	r2, #0
  402e72:	bf14      	ite	ne
  402e74:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402e78:	4770      	bxeq	lr
  402e7a:	b530      	push	{r4, r5, lr}
  402e7c:	f44f 7460 	mov.w	r4, #896	; 0x380
  402e80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402e84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402e88:	e720      	b.n	402ccc <__adddf3+0x138>
  402e8a:	bf00      	nop

00402e8c <__aeabi_ul2d>:
  402e8c:	ea50 0201 	orrs.w	r2, r0, r1
  402e90:	bf08      	it	eq
  402e92:	4770      	bxeq	lr
  402e94:	b530      	push	{r4, r5, lr}
  402e96:	f04f 0500 	mov.w	r5, #0
  402e9a:	e00a      	b.n	402eb2 <__aeabi_l2d+0x16>

00402e9c <__aeabi_l2d>:
  402e9c:	ea50 0201 	orrs.w	r2, r0, r1
  402ea0:	bf08      	it	eq
  402ea2:	4770      	bxeq	lr
  402ea4:	b530      	push	{r4, r5, lr}
  402ea6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402eaa:	d502      	bpl.n	402eb2 <__aeabi_l2d+0x16>
  402eac:	4240      	negs	r0, r0
  402eae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402eb2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402eb6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402eba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402ebe:	f43f aedc 	beq.w	402c7a <__adddf3+0xe6>
  402ec2:	f04f 0203 	mov.w	r2, #3
  402ec6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402eca:	bf18      	it	ne
  402ecc:	3203      	addne	r2, #3
  402ece:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402ed2:	bf18      	it	ne
  402ed4:	3203      	addne	r2, #3
  402ed6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402eda:	f1c2 0320 	rsb	r3, r2, #32
  402ede:	fa00 fc03 	lsl.w	ip, r0, r3
  402ee2:	fa20 f002 	lsr.w	r0, r0, r2
  402ee6:	fa01 fe03 	lsl.w	lr, r1, r3
  402eea:	ea40 000e 	orr.w	r0, r0, lr
  402eee:	fa21 f102 	lsr.w	r1, r1, r2
  402ef2:	4414      	add	r4, r2
  402ef4:	e6c1      	b.n	402c7a <__adddf3+0xe6>
  402ef6:	bf00      	nop

00402ef8 <__aeabi_dmul>:
  402ef8:	b570      	push	{r4, r5, r6, lr}
  402efa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402efe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402f02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402f06:	bf1d      	ittte	ne
  402f08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402f0c:	ea94 0f0c 	teqne	r4, ip
  402f10:	ea95 0f0c 	teqne	r5, ip
  402f14:	f000 f8de 	bleq	4030d4 <__aeabi_dmul+0x1dc>
  402f18:	442c      	add	r4, r5
  402f1a:	ea81 0603 	eor.w	r6, r1, r3
  402f1e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402f22:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402f26:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402f2a:	bf18      	it	ne
  402f2c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402f30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402f38:	d038      	beq.n	402fac <__aeabi_dmul+0xb4>
  402f3a:	fba0 ce02 	umull	ip, lr, r0, r2
  402f3e:	f04f 0500 	mov.w	r5, #0
  402f42:	fbe1 e502 	umlal	lr, r5, r1, r2
  402f46:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402f4a:	fbe0 e503 	umlal	lr, r5, r0, r3
  402f4e:	f04f 0600 	mov.w	r6, #0
  402f52:	fbe1 5603 	umlal	r5, r6, r1, r3
  402f56:	f09c 0f00 	teq	ip, #0
  402f5a:	bf18      	it	ne
  402f5c:	f04e 0e01 	orrne.w	lr, lr, #1
  402f60:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402f64:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402f68:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402f6c:	d204      	bcs.n	402f78 <__aeabi_dmul+0x80>
  402f6e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402f72:	416d      	adcs	r5, r5
  402f74:	eb46 0606 	adc.w	r6, r6, r6
  402f78:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402f7c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402f80:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402f84:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402f88:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402f8c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402f90:	bf88      	it	hi
  402f92:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402f96:	d81e      	bhi.n	402fd6 <__aeabi_dmul+0xde>
  402f98:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402f9c:	bf08      	it	eq
  402f9e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402fa2:	f150 0000 	adcs.w	r0, r0, #0
  402fa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402faa:	bd70      	pop	{r4, r5, r6, pc}
  402fac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402fb0:	ea46 0101 	orr.w	r1, r6, r1
  402fb4:	ea40 0002 	orr.w	r0, r0, r2
  402fb8:	ea81 0103 	eor.w	r1, r1, r3
  402fbc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402fc0:	bfc2      	ittt	gt
  402fc2:	ebd4 050c 	rsbsgt	r5, r4, ip
  402fc6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402fca:	bd70      	popgt	{r4, r5, r6, pc}
  402fcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402fd0:	f04f 0e00 	mov.w	lr, #0
  402fd4:	3c01      	subs	r4, #1
  402fd6:	f300 80ab 	bgt.w	403130 <__aeabi_dmul+0x238>
  402fda:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402fde:	bfde      	ittt	le
  402fe0:	2000      	movle	r0, #0
  402fe2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402fe6:	bd70      	pople	{r4, r5, r6, pc}
  402fe8:	f1c4 0400 	rsb	r4, r4, #0
  402fec:	3c20      	subs	r4, #32
  402fee:	da35      	bge.n	40305c <__aeabi_dmul+0x164>
  402ff0:	340c      	adds	r4, #12
  402ff2:	dc1b      	bgt.n	40302c <__aeabi_dmul+0x134>
  402ff4:	f104 0414 	add.w	r4, r4, #20
  402ff8:	f1c4 0520 	rsb	r5, r4, #32
  402ffc:	fa00 f305 	lsl.w	r3, r0, r5
  403000:	fa20 f004 	lsr.w	r0, r0, r4
  403004:	fa01 f205 	lsl.w	r2, r1, r5
  403008:	ea40 0002 	orr.w	r0, r0, r2
  40300c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403010:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403014:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403018:	fa21 f604 	lsr.w	r6, r1, r4
  40301c:	eb42 0106 	adc.w	r1, r2, r6
  403020:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403024:	bf08      	it	eq
  403026:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40302a:	bd70      	pop	{r4, r5, r6, pc}
  40302c:	f1c4 040c 	rsb	r4, r4, #12
  403030:	f1c4 0520 	rsb	r5, r4, #32
  403034:	fa00 f304 	lsl.w	r3, r0, r4
  403038:	fa20 f005 	lsr.w	r0, r0, r5
  40303c:	fa01 f204 	lsl.w	r2, r1, r4
  403040:	ea40 0002 	orr.w	r0, r0, r2
  403044:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403048:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40304c:	f141 0100 	adc.w	r1, r1, #0
  403050:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403054:	bf08      	it	eq
  403056:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40305a:	bd70      	pop	{r4, r5, r6, pc}
  40305c:	f1c4 0520 	rsb	r5, r4, #32
  403060:	fa00 f205 	lsl.w	r2, r0, r5
  403064:	ea4e 0e02 	orr.w	lr, lr, r2
  403068:	fa20 f304 	lsr.w	r3, r0, r4
  40306c:	fa01 f205 	lsl.w	r2, r1, r5
  403070:	ea43 0302 	orr.w	r3, r3, r2
  403074:	fa21 f004 	lsr.w	r0, r1, r4
  403078:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40307c:	fa21 f204 	lsr.w	r2, r1, r4
  403080:	ea20 0002 	bic.w	r0, r0, r2
  403084:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403088:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40308c:	bf08      	it	eq
  40308e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403092:	bd70      	pop	{r4, r5, r6, pc}
  403094:	f094 0f00 	teq	r4, #0
  403098:	d10f      	bne.n	4030ba <__aeabi_dmul+0x1c2>
  40309a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40309e:	0040      	lsls	r0, r0, #1
  4030a0:	eb41 0101 	adc.w	r1, r1, r1
  4030a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4030a8:	bf08      	it	eq
  4030aa:	3c01      	subeq	r4, #1
  4030ac:	d0f7      	beq.n	40309e <__aeabi_dmul+0x1a6>
  4030ae:	ea41 0106 	orr.w	r1, r1, r6
  4030b2:	f095 0f00 	teq	r5, #0
  4030b6:	bf18      	it	ne
  4030b8:	4770      	bxne	lr
  4030ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4030be:	0052      	lsls	r2, r2, #1
  4030c0:	eb43 0303 	adc.w	r3, r3, r3
  4030c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4030c8:	bf08      	it	eq
  4030ca:	3d01      	subeq	r5, #1
  4030cc:	d0f7      	beq.n	4030be <__aeabi_dmul+0x1c6>
  4030ce:	ea43 0306 	orr.w	r3, r3, r6
  4030d2:	4770      	bx	lr
  4030d4:	ea94 0f0c 	teq	r4, ip
  4030d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4030dc:	bf18      	it	ne
  4030de:	ea95 0f0c 	teqne	r5, ip
  4030e2:	d00c      	beq.n	4030fe <__aeabi_dmul+0x206>
  4030e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4030e8:	bf18      	it	ne
  4030ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4030ee:	d1d1      	bne.n	403094 <__aeabi_dmul+0x19c>
  4030f0:	ea81 0103 	eor.w	r1, r1, r3
  4030f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4030f8:	f04f 0000 	mov.w	r0, #0
  4030fc:	bd70      	pop	{r4, r5, r6, pc}
  4030fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403102:	bf06      	itte	eq
  403104:	4610      	moveq	r0, r2
  403106:	4619      	moveq	r1, r3
  403108:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40310c:	d019      	beq.n	403142 <__aeabi_dmul+0x24a>
  40310e:	ea94 0f0c 	teq	r4, ip
  403112:	d102      	bne.n	40311a <__aeabi_dmul+0x222>
  403114:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403118:	d113      	bne.n	403142 <__aeabi_dmul+0x24a>
  40311a:	ea95 0f0c 	teq	r5, ip
  40311e:	d105      	bne.n	40312c <__aeabi_dmul+0x234>
  403120:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403124:	bf1c      	itt	ne
  403126:	4610      	movne	r0, r2
  403128:	4619      	movne	r1, r3
  40312a:	d10a      	bne.n	403142 <__aeabi_dmul+0x24a>
  40312c:	ea81 0103 	eor.w	r1, r1, r3
  403130:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403134:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403138:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40313c:	f04f 0000 	mov.w	r0, #0
  403140:	bd70      	pop	{r4, r5, r6, pc}
  403142:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403146:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40314a:	bd70      	pop	{r4, r5, r6, pc}

0040314c <__aeabi_ddiv>:
  40314c:	b570      	push	{r4, r5, r6, lr}
  40314e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403152:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40315a:	bf1d      	ittte	ne
  40315c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403160:	ea94 0f0c 	teqne	r4, ip
  403164:	ea95 0f0c 	teqne	r5, ip
  403168:	f000 f8a7 	bleq	4032ba <__aeabi_ddiv+0x16e>
  40316c:	eba4 0405 	sub.w	r4, r4, r5
  403170:	ea81 0e03 	eor.w	lr, r1, r3
  403174:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403178:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40317c:	f000 8088 	beq.w	403290 <__aeabi_ddiv+0x144>
  403180:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403184:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403188:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40318c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403190:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403194:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403198:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40319c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4031a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4031a4:	429d      	cmp	r5, r3
  4031a6:	bf08      	it	eq
  4031a8:	4296      	cmpeq	r6, r2
  4031aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4031ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4031b2:	d202      	bcs.n	4031ba <__aeabi_ddiv+0x6e>
  4031b4:	085b      	lsrs	r3, r3, #1
  4031b6:	ea4f 0232 	mov.w	r2, r2, rrx
  4031ba:	1ab6      	subs	r6, r6, r2
  4031bc:	eb65 0503 	sbc.w	r5, r5, r3
  4031c0:	085b      	lsrs	r3, r3, #1
  4031c2:	ea4f 0232 	mov.w	r2, r2, rrx
  4031c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4031ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4031ce:	ebb6 0e02 	subs.w	lr, r6, r2
  4031d2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4031d6:	bf22      	ittt	cs
  4031d8:	1ab6      	subcs	r6, r6, r2
  4031da:	4675      	movcs	r5, lr
  4031dc:	ea40 000c 	orrcs.w	r0, r0, ip
  4031e0:	085b      	lsrs	r3, r3, #1
  4031e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4031e6:	ebb6 0e02 	subs.w	lr, r6, r2
  4031ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  4031ee:	bf22      	ittt	cs
  4031f0:	1ab6      	subcs	r6, r6, r2
  4031f2:	4675      	movcs	r5, lr
  4031f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4031f8:	085b      	lsrs	r3, r3, #1
  4031fa:	ea4f 0232 	mov.w	r2, r2, rrx
  4031fe:	ebb6 0e02 	subs.w	lr, r6, r2
  403202:	eb75 0e03 	sbcs.w	lr, r5, r3
  403206:	bf22      	ittt	cs
  403208:	1ab6      	subcs	r6, r6, r2
  40320a:	4675      	movcs	r5, lr
  40320c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403210:	085b      	lsrs	r3, r3, #1
  403212:	ea4f 0232 	mov.w	r2, r2, rrx
  403216:	ebb6 0e02 	subs.w	lr, r6, r2
  40321a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40321e:	bf22      	ittt	cs
  403220:	1ab6      	subcs	r6, r6, r2
  403222:	4675      	movcs	r5, lr
  403224:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403228:	ea55 0e06 	orrs.w	lr, r5, r6
  40322c:	d018      	beq.n	403260 <__aeabi_ddiv+0x114>
  40322e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403232:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403236:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40323a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40323e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403242:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403246:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40324a:	d1c0      	bne.n	4031ce <__aeabi_ddiv+0x82>
  40324c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403250:	d10b      	bne.n	40326a <__aeabi_ddiv+0x11e>
  403252:	ea41 0100 	orr.w	r1, r1, r0
  403256:	f04f 0000 	mov.w	r0, #0
  40325a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40325e:	e7b6      	b.n	4031ce <__aeabi_ddiv+0x82>
  403260:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403264:	bf04      	itt	eq
  403266:	4301      	orreq	r1, r0
  403268:	2000      	moveq	r0, #0
  40326a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40326e:	bf88      	it	hi
  403270:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403274:	f63f aeaf 	bhi.w	402fd6 <__aeabi_dmul+0xde>
  403278:	ebb5 0c03 	subs.w	ip, r5, r3
  40327c:	bf04      	itt	eq
  40327e:	ebb6 0c02 	subseq.w	ip, r6, r2
  403282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403286:	f150 0000 	adcs.w	r0, r0, #0
  40328a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40328e:	bd70      	pop	{r4, r5, r6, pc}
  403290:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403294:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403298:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40329c:	bfc2      	ittt	gt
  40329e:	ebd4 050c 	rsbsgt	r5, r4, ip
  4032a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4032a6:	bd70      	popgt	{r4, r5, r6, pc}
  4032a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4032ac:	f04f 0e00 	mov.w	lr, #0
  4032b0:	3c01      	subs	r4, #1
  4032b2:	e690      	b.n	402fd6 <__aeabi_dmul+0xde>
  4032b4:	ea45 0e06 	orr.w	lr, r5, r6
  4032b8:	e68d      	b.n	402fd6 <__aeabi_dmul+0xde>
  4032ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4032be:	ea94 0f0c 	teq	r4, ip
  4032c2:	bf08      	it	eq
  4032c4:	ea95 0f0c 	teqeq	r5, ip
  4032c8:	f43f af3b 	beq.w	403142 <__aeabi_dmul+0x24a>
  4032cc:	ea94 0f0c 	teq	r4, ip
  4032d0:	d10a      	bne.n	4032e8 <__aeabi_ddiv+0x19c>
  4032d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4032d6:	f47f af34 	bne.w	403142 <__aeabi_dmul+0x24a>
  4032da:	ea95 0f0c 	teq	r5, ip
  4032de:	f47f af25 	bne.w	40312c <__aeabi_dmul+0x234>
  4032e2:	4610      	mov	r0, r2
  4032e4:	4619      	mov	r1, r3
  4032e6:	e72c      	b.n	403142 <__aeabi_dmul+0x24a>
  4032e8:	ea95 0f0c 	teq	r5, ip
  4032ec:	d106      	bne.n	4032fc <__aeabi_ddiv+0x1b0>
  4032ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4032f2:	f43f aefd 	beq.w	4030f0 <__aeabi_dmul+0x1f8>
  4032f6:	4610      	mov	r0, r2
  4032f8:	4619      	mov	r1, r3
  4032fa:	e722      	b.n	403142 <__aeabi_dmul+0x24a>
  4032fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403300:	bf18      	it	ne
  403302:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403306:	f47f aec5 	bne.w	403094 <__aeabi_dmul+0x19c>
  40330a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40330e:	f47f af0d 	bne.w	40312c <__aeabi_dmul+0x234>
  403312:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403316:	f47f aeeb 	bne.w	4030f0 <__aeabi_dmul+0x1f8>
  40331a:	e712      	b.n	403142 <__aeabi_dmul+0x24a>

0040331c <__gedf2>:
  40331c:	f04f 3cff 	mov.w	ip, #4294967295
  403320:	e006      	b.n	403330 <__cmpdf2+0x4>
  403322:	bf00      	nop

00403324 <__ledf2>:
  403324:	f04f 0c01 	mov.w	ip, #1
  403328:	e002      	b.n	403330 <__cmpdf2+0x4>
  40332a:	bf00      	nop

0040332c <__cmpdf2>:
  40332c:	f04f 0c01 	mov.w	ip, #1
  403330:	f84d cd04 	str.w	ip, [sp, #-4]!
  403334:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403338:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40333c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403340:	bf18      	it	ne
  403342:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  403346:	d01b      	beq.n	403380 <__cmpdf2+0x54>
  403348:	b001      	add	sp, #4
  40334a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40334e:	bf0c      	ite	eq
  403350:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403354:	ea91 0f03 	teqne	r1, r3
  403358:	bf02      	ittt	eq
  40335a:	ea90 0f02 	teqeq	r0, r2
  40335e:	2000      	moveq	r0, #0
  403360:	4770      	bxeq	lr
  403362:	f110 0f00 	cmn.w	r0, #0
  403366:	ea91 0f03 	teq	r1, r3
  40336a:	bf58      	it	pl
  40336c:	4299      	cmppl	r1, r3
  40336e:	bf08      	it	eq
  403370:	4290      	cmpeq	r0, r2
  403372:	bf2c      	ite	cs
  403374:	17d8      	asrcs	r0, r3, #31
  403376:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40337a:	f040 0001 	orr.w	r0, r0, #1
  40337e:	4770      	bx	lr
  403380:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403384:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403388:	d102      	bne.n	403390 <__cmpdf2+0x64>
  40338a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40338e:	d107      	bne.n	4033a0 <__cmpdf2+0x74>
  403390:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403394:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403398:	d1d6      	bne.n	403348 <__cmpdf2+0x1c>
  40339a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40339e:	d0d3      	beq.n	403348 <__cmpdf2+0x1c>
  4033a0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4033a4:	4770      	bx	lr
  4033a6:	bf00      	nop

004033a8 <__aeabi_cdrcmple>:
  4033a8:	4684      	mov	ip, r0
  4033aa:	4610      	mov	r0, r2
  4033ac:	4662      	mov	r2, ip
  4033ae:	468c      	mov	ip, r1
  4033b0:	4619      	mov	r1, r3
  4033b2:	4663      	mov	r3, ip
  4033b4:	e000      	b.n	4033b8 <__aeabi_cdcmpeq>
  4033b6:	bf00      	nop

004033b8 <__aeabi_cdcmpeq>:
  4033b8:	b501      	push	{r0, lr}
  4033ba:	f7ff ffb7 	bl	40332c <__cmpdf2>
  4033be:	2800      	cmp	r0, #0
  4033c0:	bf48      	it	mi
  4033c2:	f110 0f00 	cmnmi.w	r0, #0
  4033c6:	bd01      	pop	{r0, pc}

004033c8 <__aeabi_dcmpeq>:
  4033c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4033cc:	f7ff fff4 	bl	4033b8 <__aeabi_cdcmpeq>
  4033d0:	bf0c      	ite	eq
  4033d2:	2001      	moveq	r0, #1
  4033d4:	2000      	movne	r0, #0
  4033d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4033da:	bf00      	nop

004033dc <__aeabi_dcmplt>:
  4033dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4033e0:	f7ff ffea 	bl	4033b8 <__aeabi_cdcmpeq>
  4033e4:	bf34      	ite	cc
  4033e6:	2001      	movcc	r0, #1
  4033e8:	2000      	movcs	r0, #0
  4033ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4033ee:	bf00      	nop

004033f0 <__aeabi_dcmple>:
  4033f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4033f4:	f7ff ffe0 	bl	4033b8 <__aeabi_cdcmpeq>
  4033f8:	bf94      	ite	ls
  4033fa:	2001      	movls	r0, #1
  4033fc:	2000      	movhi	r0, #0
  4033fe:	f85d fb08 	ldr.w	pc, [sp], #8
  403402:	bf00      	nop

00403404 <__aeabi_dcmpge>:
  403404:	f84d ed08 	str.w	lr, [sp, #-8]!
  403408:	f7ff ffce 	bl	4033a8 <__aeabi_cdrcmple>
  40340c:	bf94      	ite	ls
  40340e:	2001      	movls	r0, #1
  403410:	2000      	movhi	r0, #0
  403412:	f85d fb08 	ldr.w	pc, [sp], #8
  403416:	bf00      	nop

00403418 <__aeabi_dcmpgt>:
  403418:	f84d ed08 	str.w	lr, [sp, #-8]!
  40341c:	f7ff ffc4 	bl	4033a8 <__aeabi_cdrcmple>
  403420:	bf34      	ite	cc
  403422:	2001      	movcc	r0, #1
  403424:	2000      	movcs	r0, #0
  403426:	f85d fb08 	ldr.w	pc, [sp], #8
  40342a:	bf00      	nop

0040342c <__aeabi_dcmpun>:
  40342c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403430:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403434:	d102      	bne.n	40343c <__aeabi_dcmpun+0x10>
  403436:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40343a:	d10a      	bne.n	403452 <__aeabi_dcmpun+0x26>
  40343c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403440:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403444:	d102      	bne.n	40344c <__aeabi_dcmpun+0x20>
  403446:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40344a:	d102      	bne.n	403452 <__aeabi_dcmpun+0x26>
  40344c:	f04f 0000 	mov.w	r0, #0
  403450:	4770      	bx	lr
  403452:	f04f 0001 	mov.w	r0, #1
  403456:	4770      	bx	lr

00403458 <__aeabi_d2iz>:
  403458:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40345c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403460:	d215      	bcs.n	40348e <__aeabi_d2iz+0x36>
  403462:	d511      	bpl.n	403488 <__aeabi_d2iz+0x30>
  403464:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403468:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40346c:	d912      	bls.n	403494 <__aeabi_d2iz+0x3c>
  40346e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403472:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403476:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40347a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40347e:	fa23 f002 	lsr.w	r0, r3, r2
  403482:	bf18      	it	ne
  403484:	4240      	negne	r0, r0
  403486:	4770      	bx	lr
  403488:	f04f 0000 	mov.w	r0, #0
  40348c:	4770      	bx	lr
  40348e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403492:	d105      	bne.n	4034a0 <__aeabi_d2iz+0x48>
  403494:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  403498:	bf08      	it	eq
  40349a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40349e:	4770      	bx	lr
  4034a0:	f04f 0000 	mov.w	r0, #0
  4034a4:	4770      	bx	lr
  4034a6:	bf00      	nop

004034a8 <__aeabi_d2f>:
  4034a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4034ac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4034b0:	bf24      	itt	cs
  4034b2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4034b6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4034ba:	d90d      	bls.n	4034d8 <__aeabi_d2f+0x30>
  4034bc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4034c0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4034c4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4034c8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4034cc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4034d0:	bf08      	it	eq
  4034d2:	f020 0001 	biceq.w	r0, r0, #1
  4034d6:	4770      	bx	lr
  4034d8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4034dc:	d121      	bne.n	403522 <__aeabi_d2f+0x7a>
  4034de:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4034e2:	bfbc      	itt	lt
  4034e4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4034e8:	4770      	bxlt	lr
  4034ea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4034ee:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4034f2:	f1c2 0218 	rsb	r2, r2, #24
  4034f6:	f1c2 0c20 	rsb	ip, r2, #32
  4034fa:	fa10 f30c 	lsls.w	r3, r0, ip
  4034fe:	fa20 f002 	lsr.w	r0, r0, r2
  403502:	bf18      	it	ne
  403504:	f040 0001 	orrne.w	r0, r0, #1
  403508:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40350c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  403510:	fa03 fc0c 	lsl.w	ip, r3, ip
  403514:	ea40 000c 	orr.w	r0, r0, ip
  403518:	fa23 f302 	lsr.w	r3, r3, r2
  40351c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  403520:	e7cc      	b.n	4034bc <__aeabi_d2f+0x14>
  403522:	ea7f 5362 	mvns.w	r3, r2, asr #21
  403526:	d107      	bne.n	403538 <__aeabi_d2f+0x90>
  403528:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40352c:	bf1e      	ittt	ne
  40352e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  403532:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  403536:	4770      	bxne	lr
  403538:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40353c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403540:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403544:	4770      	bx	lr
  403546:	bf00      	nop

00403548 <__libc_init_array>:
  403548:	b570      	push	{r4, r5, r6, lr}
  40354a:	4e0d      	ldr	r6, [pc, #52]	; (403580 <__libc_init_array+0x38>)
  40354c:	4c0d      	ldr	r4, [pc, #52]	; (403584 <__libc_init_array+0x3c>)
  40354e:	1ba4      	subs	r4, r4, r6
  403550:	10a4      	asrs	r4, r4, #2
  403552:	2500      	movs	r5, #0
  403554:	42a5      	cmp	r5, r4
  403556:	d109      	bne.n	40356c <__libc_init_array+0x24>
  403558:	4e0b      	ldr	r6, [pc, #44]	; (403588 <__libc_init_array+0x40>)
  40355a:	4c0c      	ldr	r4, [pc, #48]	; (40358c <__libc_init_array+0x44>)
  40355c:	f002 fff4 	bl	406548 <_init>
  403560:	1ba4      	subs	r4, r4, r6
  403562:	10a4      	asrs	r4, r4, #2
  403564:	2500      	movs	r5, #0
  403566:	42a5      	cmp	r5, r4
  403568:	d105      	bne.n	403576 <__libc_init_array+0x2e>
  40356a:	bd70      	pop	{r4, r5, r6, pc}
  40356c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  403570:	4798      	blx	r3
  403572:	3501      	adds	r5, #1
  403574:	e7ee      	b.n	403554 <__libc_init_array+0xc>
  403576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40357a:	4798      	blx	r3
  40357c:	3501      	adds	r5, #1
  40357e:	e7f2      	b.n	403566 <__libc_init_array+0x1e>
  403580:	00406554 	.word	0x00406554
  403584:	00406554 	.word	0x00406554
  403588:	00406554 	.word	0x00406554
  40358c:	00406558 	.word	0x00406558

00403590 <memcpy>:
  403590:	b510      	push	{r4, lr}
  403592:	1e43      	subs	r3, r0, #1
  403594:	440a      	add	r2, r1
  403596:	4291      	cmp	r1, r2
  403598:	d100      	bne.n	40359c <memcpy+0xc>
  40359a:	bd10      	pop	{r4, pc}
  40359c:	f811 4b01 	ldrb.w	r4, [r1], #1
  4035a0:	f803 4f01 	strb.w	r4, [r3, #1]!
  4035a4:	e7f7      	b.n	403596 <memcpy+0x6>

004035a6 <memset>:
  4035a6:	4402      	add	r2, r0
  4035a8:	4603      	mov	r3, r0
  4035aa:	4293      	cmp	r3, r2
  4035ac:	d100      	bne.n	4035b0 <memset+0xa>
  4035ae:	4770      	bx	lr
  4035b0:	f803 1b01 	strb.w	r1, [r3], #1
  4035b4:	e7f9      	b.n	4035aa <memset+0x4>

004035b6 <__cvt>:
  4035b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4035ba:	b088      	sub	sp, #32
  4035bc:	2b00      	cmp	r3, #0
  4035be:	9f14      	ldr	r7, [sp, #80]	; 0x50
  4035c0:	9912      	ldr	r1, [sp, #72]	; 0x48
  4035c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4035c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  4035c8:	461e      	mov	r6, r3
  4035ca:	f027 0720 	bic.w	r7, r7, #32
  4035ce:	bfbb      	ittet	lt
  4035d0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  4035d4:	461e      	movlt	r6, r3
  4035d6:	2300      	movge	r3, #0
  4035d8:	232d      	movlt	r3, #45	; 0x2d
  4035da:	2f46      	cmp	r7, #70	; 0x46
  4035dc:	4614      	mov	r4, r2
  4035de:	700b      	strb	r3, [r1, #0]
  4035e0:	d004      	beq.n	4035ec <__cvt+0x36>
  4035e2:	2f45      	cmp	r7, #69	; 0x45
  4035e4:	d100      	bne.n	4035e8 <__cvt+0x32>
  4035e6:	3501      	adds	r5, #1
  4035e8:	2302      	movs	r3, #2
  4035ea:	e000      	b.n	4035ee <__cvt+0x38>
  4035ec:	2303      	movs	r3, #3
  4035ee:	aa07      	add	r2, sp, #28
  4035f0:	9204      	str	r2, [sp, #16]
  4035f2:	aa06      	add	r2, sp, #24
  4035f4:	9203      	str	r2, [sp, #12]
  4035f6:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  4035fa:	4622      	mov	r2, r4
  4035fc:	4633      	mov	r3, r6
  4035fe:	f000 fd9b 	bl	404138 <_dtoa_r>
  403602:	2f47      	cmp	r7, #71	; 0x47
  403604:	4680      	mov	r8, r0
  403606:	d102      	bne.n	40360e <__cvt+0x58>
  403608:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40360a:	07db      	lsls	r3, r3, #31
  40360c:	d526      	bpl.n	40365c <__cvt+0xa6>
  40360e:	2f46      	cmp	r7, #70	; 0x46
  403610:	eb08 0905 	add.w	r9, r8, r5
  403614:	d111      	bne.n	40363a <__cvt+0x84>
  403616:	f898 3000 	ldrb.w	r3, [r8]
  40361a:	2b30      	cmp	r3, #48	; 0x30
  40361c:	d10a      	bne.n	403634 <__cvt+0x7e>
  40361e:	2200      	movs	r2, #0
  403620:	2300      	movs	r3, #0
  403622:	4620      	mov	r0, r4
  403624:	4631      	mov	r1, r6
  403626:	f7ff fecf 	bl	4033c8 <__aeabi_dcmpeq>
  40362a:	b918      	cbnz	r0, 403634 <__cvt+0x7e>
  40362c:	f1c5 0501 	rsb	r5, r5, #1
  403630:	f8ca 5000 	str.w	r5, [sl]
  403634:	f8da 3000 	ldr.w	r3, [sl]
  403638:	4499      	add	r9, r3
  40363a:	2200      	movs	r2, #0
  40363c:	2300      	movs	r3, #0
  40363e:	4620      	mov	r0, r4
  403640:	4631      	mov	r1, r6
  403642:	f7ff fec1 	bl	4033c8 <__aeabi_dcmpeq>
  403646:	b938      	cbnz	r0, 403658 <__cvt+0xa2>
  403648:	2230      	movs	r2, #48	; 0x30
  40364a:	9b07      	ldr	r3, [sp, #28]
  40364c:	4599      	cmp	r9, r3
  40364e:	d905      	bls.n	40365c <__cvt+0xa6>
  403650:	1c59      	adds	r1, r3, #1
  403652:	9107      	str	r1, [sp, #28]
  403654:	701a      	strb	r2, [r3, #0]
  403656:	e7f8      	b.n	40364a <__cvt+0x94>
  403658:	f8cd 901c 	str.w	r9, [sp, #28]
  40365c:	9b07      	ldr	r3, [sp, #28]
  40365e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403660:	eba3 0308 	sub.w	r3, r3, r8
  403664:	4640      	mov	r0, r8
  403666:	6013      	str	r3, [r2, #0]
  403668:	b008      	add	sp, #32
  40366a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040366e <__exponent>:
  40366e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  403670:	4603      	mov	r3, r0
  403672:	2900      	cmp	r1, #0
  403674:	bfb8      	it	lt
  403676:	4249      	neglt	r1, r1
  403678:	f803 2b02 	strb.w	r2, [r3], #2
  40367c:	bfb4      	ite	lt
  40367e:	222d      	movlt	r2, #45	; 0x2d
  403680:	222b      	movge	r2, #43	; 0x2b
  403682:	2909      	cmp	r1, #9
  403684:	7042      	strb	r2, [r0, #1]
  403686:	dd20      	ble.n	4036ca <__exponent+0x5c>
  403688:	f10d 0207 	add.w	r2, sp, #7
  40368c:	4617      	mov	r7, r2
  40368e:	260a      	movs	r6, #10
  403690:	fb91 f5f6 	sdiv	r5, r1, r6
  403694:	fb06 1115 	mls	r1, r6, r5, r1
  403698:	3130      	adds	r1, #48	; 0x30
  40369a:	2d09      	cmp	r5, #9
  40369c:	f802 1c01 	strb.w	r1, [r2, #-1]
  4036a0:	f102 34ff 	add.w	r4, r2, #4294967295
  4036a4:	4629      	mov	r1, r5
  4036a6:	dc09      	bgt.n	4036bc <__exponent+0x4e>
  4036a8:	3130      	adds	r1, #48	; 0x30
  4036aa:	3a02      	subs	r2, #2
  4036ac:	f804 1c01 	strb.w	r1, [r4, #-1]
  4036b0:	42ba      	cmp	r2, r7
  4036b2:	461c      	mov	r4, r3
  4036b4:	d304      	bcc.n	4036c0 <__exponent+0x52>
  4036b6:	1a20      	subs	r0, r4, r0
  4036b8:	b003      	add	sp, #12
  4036ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036bc:	4622      	mov	r2, r4
  4036be:	e7e7      	b.n	403690 <__exponent+0x22>
  4036c0:	f812 1b01 	ldrb.w	r1, [r2], #1
  4036c4:	f803 1b01 	strb.w	r1, [r3], #1
  4036c8:	e7f2      	b.n	4036b0 <__exponent+0x42>
  4036ca:	2230      	movs	r2, #48	; 0x30
  4036cc:	461c      	mov	r4, r3
  4036ce:	4411      	add	r1, r2
  4036d0:	f804 2b02 	strb.w	r2, [r4], #2
  4036d4:	7059      	strb	r1, [r3, #1]
  4036d6:	e7ee      	b.n	4036b6 <__exponent+0x48>

004036d8 <_printf_float>:
  4036d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036dc:	b091      	sub	sp, #68	; 0x44
  4036de:	460c      	mov	r4, r1
  4036e0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  4036e2:	4693      	mov	fp, r2
  4036e4:	461e      	mov	r6, r3
  4036e6:	4605      	mov	r5, r0
  4036e8:	f001 fc74 	bl	404fd4 <_localeconv_r>
  4036ec:	6803      	ldr	r3, [r0, #0]
  4036ee:	9309      	str	r3, [sp, #36]	; 0x24
  4036f0:	4618      	mov	r0, r3
  4036f2:	f000 fc8d 	bl	404010 <strlen>
  4036f6:	2300      	movs	r3, #0
  4036f8:	930e      	str	r3, [sp, #56]	; 0x38
  4036fa:	683b      	ldr	r3, [r7, #0]
  4036fc:	900a      	str	r0, [sp, #40]	; 0x28
  4036fe:	3307      	adds	r3, #7
  403700:	f023 0307 	bic.w	r3, r3, #7
  403704:	f103 0208 	add.w	r2, r3, #8
  403708:	f894 8018 	ldrb.w	r8, [r4, #24]
  40370c:	f8d4 a000 	ldr.w	sl, [r4]
  403710:	603a      	str	r2, [r7, #0]
  403712:	e9d3 2300 	ldrd	r2, r3, [r3]
  403716:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  40371a:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  40371e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  403720:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  403724:	930b      	str	r3, [sp, #44]	; 0x2c
  403726:	f04f 32ff 	mov.w	r2, #4294967295
  40372a:	4ba6      	ldr	r3, [pc, #664]	; (4039c4 <_printf_float+0x2ec>)
  40372c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40372e:	4638      	mov	r0, r7
  403730:	f7ff fe7c 	bl	40342c <__aeabi_dcmpun>
  403734:	2800      	cmp	r0, #0
  403736:	f040 81f7 	bne.w	403b28 <_printf_float+0x450>
  40373a:	f04f 32ff 	mov.w	r2, #4294967295
  40373e:	4ba1      	ldr	r3, [pc, #644]	; (4039c4 <_printf_float+0x2ec>)
  403740:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403742:	4638      	mov	r0, r7
  403744:	f7ff fe54 	bl	4033f0 <__aeabi_dcmple>
  403748:	2800      	cmp	r0, #0
  40374a:	f040 81ed 	bne.w	403b28 <_printf_float+0x450>
  40374e:	2200      	movs	r2, #0
  403750:	2300      	movs	r3, #0
  403752:	4638      	mov	r0, r7
  403754:	4649      	mov	r1, r9
  403756:	f7ff fe41 	bl	4033dc <__aeabi_dcmplt>
  40375a:	b110      	cbz	r0, 403762 <_printf_float+0x8a>
  40375c:	232d      	movs	r3, #45	; 0x2d
  40375e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403762:	4b99      	ldr	r3, [pc, #612]	; (4039c8 <_printf_float+0x2f0>)
  403764:	4f99      	ldr	r7, [pc, #612]	; (4039cc <_printf_float+0x2f4>)
  403766:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40376a:	bf98      	it	ls
  40376c:	461f      	movls	r7, r3
  40376e:	2303      	movs	r3, #3
  403770:	6123      	str	r3, [r4, #16]
  403772:	f02a 0304 	bic.w	r3, sl, #4
  403776:	6023      	str	r3, [r4, #0]
  403778:	f04f 0900 	mov.w	r9, #0
  40377c:	9600      	str	r6, [sp, #0]
  40377e:	465b      	mov	r3, fp
  403780:	aa0f      	add	r2, sp, #60	; 0x3c
  403782:	4621      	mov	r1, r4
  403784:	4628      	mov	r0, r5
  403786:	f000 f9df 	bl	403b48 <_printf_common>
  40378a:	3001      	adds	r0, #1
  40378c:	f040 809a 	bne.w	4038c4 <_printf_float+0x1ec>
  403790:	f04f 30ff 	mov.w	r0, #4294967295
  403794:	b011      	add	sp, #68	; 0x44
  403796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40379a:	6862      	ldr	r2, [r4, #4]
  40379c:	1c53      	adds	r3, r2, #1
  40379e:	a80e      	add	r0, sp, #56	; 0x38
  4037a0:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  4037a4:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  4037a8:	d141      	bne.n	40382e <_printf_float+0x156>
  4037aa:	2206      	movs	r2, #6
  4037ac:	6062      	str	r2, [r4, #4]
  4037ae:	6023      	str	r3, [r4, #0]
  4037b0:	2100      	movs	r1, #0
  4037b2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  4037b6:	9301      	str	r3, [sp, #4]
  4037b8:	6863      	ldr	r3, [r4, #4]
  4037ba:	9005      	str	r0, [sp, #20]
  4037bc:	9202      	str	r2, [sp, #8]
  4037be:	9300      	str	r3, [sp, #0]
  4037c0:	463a      	mov	r2, r7
  4037c2:	464b      	mov	r3, r9
  4037c4:	9106      	str	r1, [sp, #24]
  4037c6:	f8cd 8010 	str.w	r8, [sp, #16]
  4037ca:	f8cd e00c 	str.w	lr, [sp, #12]
  4037ce:	4628      	mov	r0, r5
  4037d0:	f7ff fef1 	bl	4035b6 <__cvt>
  4037d4:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  4037d8:	2b47      	cmp	r3, #71	; 0x47
  4037da:	4607      	mov	r7, r0
  4037dc:	d109      	bne.n	4037f2 <_printf_float+0x11a>
  4037de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4037e0:	1cd8      	adds	r0, r3, #3
  4037e2:	db02      	blt.n	4037ea <_printf_float+0x112>
  4037e4:	6862      	ldr	r2, [r4, #4]
  4037e6:	4293      	cmp	r3, r2
  4037e8:	dd59      	ble.n	40389e <_printf_float+0x1c6>
  4037ea:	f1a8 0802 	sub.w	r8, r8, #2
  4037ee:	fa5f f888 	uxtb.w	r8, r8
  4037f2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4037f6:	990d      	ldr	r1, [sp, #52]	; 0x34
  4037f8:	d836      	bhi.n	403868 <_printf_float+0x190>
  4037fa:	3901      	subs	r1, #1
  4037fc:	4642      	mov	r2, r8
  4037fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
  403802:	910d      	str	r1, [sp, #52]	; 0x34
  403804:	f7ff ff33 	bl	40366e <__exponent>
  403808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40380a:	1883      	adds	r3, r0, r2
  40380c:	2a01      	cmp	r2, #1
  40380e:	4681      	mov	r9, r0
  403810:	6123      	str	r3, [r4, #16]
  403812:	dc02      	bgt.n	40381a <_printf_float+0x142>
  403814:	6822      	ldr	r2, [r4, #0]
  403816:	07d1      	lsls	r1, r2, #31
  403818:	d501      	bpl.n	40381e <_printf_float+0x146>
  40381a:	3301      	adds	r3, #1
  40381c:	6123      	str	r3, [r4, #16]
  40381e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  403822:	2b00      	cmp	r3, #0
  403824:	d0aa      	beq.n	40377c <_printf_float+0xa4>
  403826:	232d      	movs	r3, #45	; 0x2d
  403828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40382c:	e7a6      	b.n	40377c <_printf_float+0xa4>
  40382e:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  403832:	d002      	beq.n	40383a <_printf_float+0x162>
  403834:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403838:	d1b9      	bne.n	4037ae <_printf_float+0xd6>
  40383a:	b19a      	cbz	r2, 403864 <_printf_float+0x18c>
  40383c:	2100      	movs	r1, #0
  40383e:	9106      	str	r1, [sp, #24]
  403840:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  403844:	e88d 000c 	stmia.w	sp, {r2, r3}
  403848:	6023      	str	r3, [r4, #0]
  40384a:	9005      	str	r0, [sp, #20]
  40384c:	463a      	mov	r2, r7
  40384e:	f8cd 8010 	str.w	r8, [sp, #16]
  403852:	f8cd e00c 	str.w	lr, [sp, #12]
  403856:	9102      	str	r1, [sp, #8]
  403858:	464b      	mov	r3, r9
  40385a:	4628      	mov	r0, r5
  40385c:	f7ff feab 	bl	4035b6 <__cvt>
  403860:	4607      	mov	r7, r0
  403862:	e7bc      	b.n	4037de <_printf_float+0x106>
  403864:	2201      	movs	r2, #1
  403866:	e7a1      	b.n	4037ac <_printf_float+0xd4>
  403868:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40386c:	d119      	bne.n	4038a2 <_printf_float+0x1ca>
  40386e:	2900      	cmp	r1, #0
  403870:	6863      	ldr	r3, [r4, #4]
  403872:	dd0c      	ble.n	40388e <_printf_float+0x1b6>
  403874:	6121      	str	r1, [r4, #16]
  403876:	b913      	cbnz	r3, 40387e <_printf_float+0x1a6>
  403878:	6822      	ldr	r2, [r4, #0]
  40387a:	07d2      	lsls	r2, r2, #31
  40387c:	d502      	bpl.n	403884 <_printf_float+0x1ac>
  40387e:	3301      	adds	r3, #1
  403880:	440b      	add	r3, r1
  403882:	6123      	str	r3, [r4, #16]
  403884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403886:	65a3      	str	r3, [r4, #88]	; 0x58
  403888:	f04f 0900 	mov.w	r9, #0
  40388c:	e7c7      	b.n	40381e <_printf_float+0x146>
  40388e:	b913      	cbnz	r3, 403896 <_printf_float+0x1be>
  403890:	6822      	ldr	r2, [r4, #0]
  403892:	07d0      	lsls	r0, r2, #31
  403894:	d501      	bpl.n	40389a <_printf_float+0x1c2>
  403896:	3302      	adds	r3, #2
  403898:	e7f3      	b.n	403882 <_printf_float+0x1aa>
  40389a:	2301      	movs	r3, #1
  40389c:	e7f1      	b.n	403882 <_printf_float+0x1aa>
  40389e:	f04f 0867 	mov.w	r8, #103	; 0x67
  4038a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4038a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4038a6:	4293      	cmp	r3, r2
  4038a8:	db05      	blt.n	4038b6 <_printf_float+0x1de>
  4038aa:	6822      	ldr	r2, [r4, #0]
  4038ac:	6123      	str	r3, [r4, #16]
  4038ae:	07d1      	lsls	r1, r2, #31
  4038b0:	d5e8      	bpl.n	403884 <_printf_float+0x1ac>
  4038b2:	3301      	adds	r3, #1
  4038b4:	e7e5      	b.n	403882 <_printf_float+0x1aa>
  4038b6:	2b00      	cmp	r3, #0
  4038b8:	bfd4      	ite	le
  4038ba:	f1c3 0302 	rsble	r3, r3, #2
  4038be:	2301      	movgt	r3, #1
  4038c0:	4413      	add	r3, r2
  4038c2:	e7de      	b.n	403882 <_printf_float+0x1aa>
  4038c4:	6823      	ldr	r3, [r4, #0]
  4038c6:	055a      	lsls	r2, r3, #21
  4038c8:	d407      	bmi.n	4038da <_printf_float+0x202>
  4038ca:	6923      	ldr	r3, [r4, #16]
  4038cc:	463a      	mov	r2, r7
  4038ce:	4659      	mov	r1, fp
  4038d0:	4628      	mov	r0, r5
  4038d2:	47b0      	blx	r6
  4038d4:	3001      	adds	r0, #1
  4038d6:	d12a      	bne.n	40392e <_printf_float+0x256>
  4038d8:	e75a      	b.n	403790 <_printf_float+0xb8>
  4038da:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4038de:	f240 80dc 	bls.w	403a9a <_printf_float+0x3c2>
  4038e2:	2200      	movs	r2, #0
  4038e4:	2300      	movs	r3, #0
  4038e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4038ea:	f7ff fd6d 	bl	4033c8 <__aeabi_dcmpeq>
  4038ee:	2800      	cmp	r0, #0
  4038f0:	d039      	beq.n	403966 <_printf_float+0x28e>
  4038f2:	2301      	movs	r3, #1
  4038f4:	4a36      	ldr	r2, [pc, #216]	; (4039d0 <_printf_float+0x2f8>)
  4038f6:	4659      	mov	r1, fp
  4038f8:	4628      	mov	r0, r5
  4038fa:	47b0      	blx	r6
  4038fc:	3001      	adds	r0, #1
  4038fe:	f43f af47 	beq.w	403790 <_printf_float+0xb8>
  403902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403904:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403906:	429a      	cmp	r2, r3
  403908:	db02      	blt.n	403910 <_printf_float+0x238>
  40390a:	6823      	ldr	r3, [r4, #0]
  40390c:	07d8      	lsls	r0, r3, #31
  40390e:	d50e      	bpl.n	40392e <_printf_float+0x256>
  403910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403912:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403914:	4659      	mov	r1, fp
  403916:	4628      	mov	r0, r5
  403918:	47b0      	blx	r6
  40391a:	3001      	adds	r0, #1
  40391c:	f43f af38 	beq.w	403790 <_printf_float+0xb8>
  403920:	2700      	movs	r7, #0
  403922:	f104 081a 	add.w	r8, r4, #26
  403926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403928:	3b01      	subs	r3, #1
  40392a:	429f      	cmp	r7, r3
  40392c:	db11      	blt.n	403952 <_printf_float+0x27a>
  40392e:	6823      	ldr	r3, [r4, #0]
  403930:	079f      	lsls	r7, r3, #30
  403932:	d508      	bpl.n	403946 <_printf_float+0x26e>
  403934:	2700      	movs	r7, #0
  403936:	f104 0819 	add.w	r8, r4, #25
  40393a:	68e3      	ldr	r3, [r4, #12]
  40393c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40393e:	1a9b      	subs	r3, r3, r2
  403940:	429f      	cmp	r7, r3
  403942:	f2c0 80e7 	blt.w	403b14 <_printf_float+0x43c>
  403946:	68e0      	ldr	r0, [r4, #12]
  403948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40394a:	4298      	cmp	r0, r3
  40394c:	bfb8      	it	lt
  40394e:	4618      	movlt	r0, r3
  403950:	e720      	b.n	403794 <_printf_float+0xbc>
  403952:	2301      	movs	r3, #1
  403954:	4642      	mov	r2, r8
  403956:	4659      	mov	r1, fp
  403958:	4628      	mov	r0, r5
  40395a:	47b0      	blx	r6
  40395c:	3001      	adds	r0, #1
  40395e:	f43f af17 	beq.w	403790 <_printf_float+0xb8>
  403962:	3701      	adds	r7, #1
  403964:	e7df      	b.n	403926 <_printf_float+0x24e>
  403966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403968:	2b00      	cmp	r3, #0
  40396a:	dc33      	bgt.n	4039d4 <_printf_float+0x2fc>
  40396c:	2301      	movs	r3, #1
  40396e:	4a18      	ldr	r2, [pc, #96]	; (4039d0 <_printf_float+0x2f8>)
  403970:	4659      	mov	r1, fp
  403972:	4628      	mov	r0, r5
  403974:	47b0      	blx	r6
  403976:	3001      	adds	r0, #1
  403978:	f43f af0a 	beq.w	403790 <_printf_float+0xb8>
  40397c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40397e:	b923      	cbnz	r3, 40398a <_printf_float+0x2b2>
  403980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403982:	b913      	cbnz	r3, 40398a <_printf_float+0x2b2>
  403984:	6823      	ldr	r3, [r4, #0]
  403986:	07d9      	lsls	r1, r3, #31
  403988:	d5d1      	bpl.n	40392e <_printf_float+0x256>
  40398a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40398c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40398e:	4659      	mov	r1, fp
  403990:	4628      	mov	r0, r5
  403992:	47b0      	blx	r6
  403994:	3001      	adds	r0, #1
  403996:	f43f aefb 	beq.w	403790 <_printf_float+0xb8>
  40399a:	f04f 0800 	mov.w	r8, #0
  40399e:	f104 091a 	add.w	r9, r4, #26
  4039a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4039a4:	425b      	negs	r3, r3
  4039a6:	4598      	cmp	r8, r3
  4039a8:	db01      	blt.n	4039ae <_printf_float+0x2d6>
  4039aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4039ac:	e78e      	b.n	4038cc <_printf_float+0x1f4>
  4039ae:	2301      	movs	r3, #1
  4039b0:	464a      	mov	r2, r9
  4039b2:	4659      	mov	r1, fp
  4039b4:	4628      	mov	r0, r5
  4039b6:	47b0      	blx	r6
  4039b8:	3001      	adds	r0, #1
  4039ba:	f43f aee9 	beq.w	403790 <_printf_float+0xb8>
  4039be:	f108 0801 	add.w	r8, r8, #1
  4039c2:	e7ee      	b.n	4039a2 <_printf_float+0x2ca>
  4039c4:	7fefffff 	.word	0x7fefffff
  4039c8:	0040628c 	.word	0x0040628c
  4039cc:	00406290 	.word	0x00406290
  4039d0:	0040629c 	.word	0x0040629c
  4039d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4039d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4039d8:	429a      	cmp	r2, r3
  4039da:	bfa8      	it	ge
  4039dc:	461a      	movge	r2, r3
  4039de:	2a00      	cmp	r2, #0
  4039e0:	4690      	mov	r8, r2
  4039e2:	dc36      	bgt.n	403a52 <_printf_float+0x37a>
  4039e4:	f104 031a 	add.w	r3, r4, #26
  4039e8:	f04f 0a00 	mov.w	sl, #0
  4039ec:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4039f0:	930b      	str	r3, [sp, #44]	; 0x2c
  4039f2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  4039f6:	eba9 0308 	sub.w	r3, r9, r8
  4039fa:	459a      	cmp	sl, r3
  4039fc:	db31      	blt.n	403a62 <_printf_float+0x38a>
  4039fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403a02:	429a      	cmp	r2, r3
  403a04:	db38      	blt.n	403a78 <_printf_float+0x3a0>
  403a06:	6823      	ldr	r3, [r4, #0]
  403a08:	07da      	lsls	r2, r3, #31
  403a0a:	d435      	bmi.n	403a78 <_printf_float+0x3a0>
  403a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a0e:	990d      	ldr	r1, [sp, #52]	; 0x34
  403a10:	eba3 0209 	sub.w	r2, r3, r9
  403a14:	eba3 0801 	sub.w	r8, r3, r1
  403a18:	4590      	cmp	r8, r2
  403a1a:	bfa8      	it	ge
  403a1c:	4690      	movge	r8, r2
  403a1e:	f1b8 0f00 	cmp.w	r8, #0
  403a22:	dc31      	bgt.n	403a88 <_printf_float+0x3b0>
  403a24:	2700      	movs	r7, #0
  403a26:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  403a2a:	f104 091a 	add.w	r9, r4, #26
  403a2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a32:	1a9b      	subs	r3, r3, r2
  403a34:	eba3 0308 	sub.w	r3, r3, r8
  403a38:	429f      	cmp	r7, r3
  403a3a:	f6bf af78 	bge.w	40392e <_printf_float+0x256>
  403a3e:	2301      	movs	r3, #1
  403a40:	464a      	mov	r2, r9
  403a42:	4659      	mov	r1, fp
  403a44:	4628      	mov	r0, r5
  403a46:	47b0      	blx	r6
  403a48:	3001      	adds	r0, #1
  403a4a:	f43f aea1 	beq.w	403790 <_printf_float+0xb8>
  403a4e:	3701      	adds	r7, #1
  403a50:	e7ed      	b.n	403a2e <_printf_float+0x356>
  403a52:	4613      	mov	r3, r2
  403a54:	4659      	mov	r1, fp
  403a56:	463a      	mov	r2, r7
  403a58:	4628      	mov	r0, r5
  403a5a:	47b0      	blx	r6
  403a5c:	3001      	adds	r0, #1
  403a5e:	d1c1      	bne.n	4039e4 <_printf_float+0x30c>
  403a60:	e696      	b.n	403790 <_printf_float+0xb8>
  403a62:	2301      	movs	r3, #1
  403a64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403a66:	4659      	mov	r1, fp
  403a68:	4628      	mov	r0, r5
  403a6a:	47b0      	blx	r6
  403a6c:	3001      	adds	r0, #1
  403a6e:	f43f ae8f 	beq.w	403790 <_printf_float+0xb8>
  403a72:	f10a 0a01 	add.w	sl, sl, #1
  403a76:	e7bc      	b.n	4039f2 <_printf_float+0x31a>
  403a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403a7c:	4659      	mov	r1, fp
  403a7e:	4628      	mov	r0, r5
  403a80:	47b0      	blx	r6
  403a82:	3001      	adds	r0, #1
  403a84:	d1c2      	bne.n	403a0c <_printf_float+0x334>
  403a86:	e683      	b.n	403790 <_printf_float+0xb8>
  403a88:	4643      	mov	r3, r8
  403a8a:	eb07 0209 	add.w	r2, r7, r9
  403a8e:	4659      	mov	r1, fp
  403a90:	4628      	mov	r0, r5
  403a92:	47b0      	blx	r6
  403a94:	3001      	adds	r0, #1
  403a96:	d1c5      	bne.n	403a24 <_printf_float+0x34c>
  403a98:	e67a      	b.n	403790 <_printf_float+0xb8>
  403a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403a9c:	2a01      	cmp	r2, #1
  403a9e:	dc01      	bgt.n	403aa4 <_printf_float+0x3cc>
  403aa0:	07db      	lsls	r3, r3, #31
  403aa2:	d534      	bpl.n	403b0e <_printf_float+0x436>
  403aa4:	2301      	movs	r3, #1
  403aa6:	463a      	mov	r2, r7
  403aa8:	4659      	mov	r1, fp
  403aaa:	4628      	mov	r0, r5
  403aac:	47b0      	blx	r6
  403aae:	3001      	adds	r0, #1
  403ab0:	f43f ae6e 	beq.w	403790 <_printf_float+0xb8>
  403ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403ab8:	4659      	mov	r1, fp
  403aba:	4628      	mov	r0, r5
  403abc:	47b0      	blx	r6
  403abe:	3001      	adds	r0, #1
  403ac0:	f43f ae66 	beq.w	403790 <_printf_float+0xb8>
  403ac4:	2200      	movs	r2, #0
  403ac6:	2300      	movs	r3, #0
  403ac8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403acc:	f7ff fc7c 	bl	4033c8 <__aeabi_dcmpeq>
  403ad0:	b150      	cbz	r0, 403ae8 <_printf_float+0x410>
  403ad2:	2700      	movs	r7, #0
  403ad4:	f104 081a 	add.w	r8, r4, #26
  403ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403ada:	3b01      	subs	r3, #1
  403adc:	429f      	cmp	r7, r3
  403ade:	db0c      	blt.n	403afa <_printf_float+0x422>
  403ae0:	464b      	mov	r3, r9
  403ae2:	f104 0250 	add.w	r2, r4, #80	; 0x50
  403ae6:	e6f2      	b.n	4038ce <_printf_float+0x1f6>
  403ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403aea:	1c7a      	adds	r2, r7, #1
  403aec:	3b01      	subs	r3, #1
  403aee:	4659      	mov	r1, fp
  403af0:	4628      	mov	r0, r5
  403af2:	47b0      	blx	r6
  403af4:	3001      	adds	r0, #1
  403af6:	d1f3      	bne.n	403ae0 <_printf_float+0x408>
  403af8:	e64a      	b.n	403790 <_printf_float+0xb8>
  403afa:	2301      	movs	r3, #1
  403afc:	4642      	mov	r2, r8
  403afe:	4659      	mov	r1, fp
  403b00:	4628      	mov	r0, r5
  403b02:	47b0      	blx	r6
  403b04:	3001      	adds	r0, #1
  403b06:	f43f ae43 	beq.w	403790 <_printf_float+0xb8>
  403b0a:	3701      	adds	r7, #1
  403b0c:	e7e4      	b.n	403ad8 <_printf_float+0x400>
  403b0e:	2301      	movs	r3, #1
  403b10:	463a      	mov	r2, r7
  403b12:	e7ec      	b.n	403aee <_printf_float+0x416>
  403b14:	2301      	movs	r3, #1
  403b16:	4642      	mov	r2, r8
  403b18:	4659      	mov	r1, fp
  403b1a:	4628      	mov	r0, r5
  403b1c:	47b0      	blx	r6
  403b1e:	3001      	adds	r0, #1
  403b20:	f43f ae36 	beq.w	403790 <_printf_float+0xb8>
  403b24:	3701      	adds	r7, #1
  403b26:	e708      	b.n	40393a <_printf_float+0x262>
  403b28:	463a      	mov	r2, r7
  403b2a:	464b      	mov	r3, r9
  403b2c:	4638      	mov	r0, r7
  403b2e:	4649      	mov	r1, r9
  403b30:	f7ff fc7c 	bl	40342c <__aeabi_dcmpun>
  403b34:	2800      	cmp	r0, #0
  403b36:	f43f ae30 	beq.w	40379a <_printf_float+0xc2>
  403b3a:	4b01      	ldr	r3, [pc, #4]	; (403b40 <_printf_float+0x468>)
  403b3c:	4f01      	ldr	r7, [pc, #4]	; (403b44 <_printf_float+0x46c>)
  403b3e:	e612      	b.n	403766 <_printf_float+0x8e>
  403b40:	00406294 	.word	0x00406294
  403b44:	00406298 	.word	0x00406298

00403b48 <_printf_common>:
  403b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403b4c:	4691      	mov	r9, r2
  403b4e:	461f      	mov	r7, r3
  403b50:	688a      	ldr	r2, [r1, #8]
  403b52:	690b      	ldr	r3, [r1, #16]
  403b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
  403b58:	4293      	cmp	r3, r2
  403b5a:	bfb8      	it	lt
  403b5c:	4613      	movlt	r3, r2
  403b5e:	f8c9 3000 	str.w	r3, [r9]
  403b62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  403b66:	4606      	mov	r6, r0
  403b68:	460c      	mov	r4, r1
  403b6a:	b112      	cbz	r2, 403b72 <_printf_common+0x2a>
  403b6c:	3301      	adds	r3, #1
  403b6e:	f8c9 3000 	str.w	r3, [r9]
  403b72:	6823      	ldr	r3, [r4, #0]
  403b74:	0699      	lsls	r1, r3, #26
  403b76:	bf42      	ittt	mi
  403b78:	f8d9 3000 	ldrmi.w	r3, [r9]
  403b7c:	3302      	addmi	r3, #2
  403b7e:	f8c9 3000 	strmi.w	r3, [r9]
  403b82:	6825      	ldr	r5, [r4, #0]
  403b84:	f015 0506 	ands.w	r5, r5, #6
  403b88:	d107      	bne.n	403b9a <_printf_common+0x52>
  403b8a:	f104 0a19 	add.w	sl, r4, #25
  403b8e:	68e3      	ldr	r3, [r4, #12]
  403b90:	f8d9 2000 	ldr.w	r2, [r9]
  403b94:	1a9b      	subs	r3, r3, r2
  403b96:	429d      	cmp	r5, r3
  403b98:	db29      	blt.n	403bee <_printf_common+0xa6>
  403b9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  403b9e:	6822      	ldr	r2, [r4, #0]
  403ba0:	3300      	adds	r3, #0
  403ba2:	bf18      	it	ne
  403ba4:	2301      	movne	r3, #1
  403ba6:	0692      	lsls	r2, r2, #26
  403ba8:	d42e      	bmi.n	403c08 <_printf_common+0xc0>
  403baa:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403bae:	4639      	mov	r1, r7
  403bb0:	4630      	mov	r0, r6
  403bb2:	47c0      	blx	r8
  403bb4:	3001      	adds	r0, #1
  403bb6:	d021      	beq.n	403bfc <_printf_common+0xb4>
  403bb8:	6823      	ldr	r3, [r4, #0]
  403bba:	68e5      	ldr	r5, [r4, #12]
  403bbc:	f8d9 2000 	ldr.w	r2, [r9]
  403bc0:	f003 0306 	and.w	r3, r3, #6
  403bc4:	2b04      	cmp	r3, #4
  403bc6:	bf08      	it	eq
  403bc8:	1aad      	subeq	r5, r5, r2
  403bca:	68a3      	ldr	r3, [r4, #8]
  403bcc:	6922      	ldr	r2, [r4, #16]
  403bce:	bf0c      	ite	eq
  403bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  403bd4:	2500      	movne	r5, #0
  403bd6:	4293      	cmp	r3, r2
  403bd8:	bfc4      	itt	gt
  403bda:	1a9b      	subgt	r3, r3, r2
  403bdc:	18ed      	addgt	r5, r5, r3
  403bde:	f04f 0900 	mov.w	r9, #0
  403be2:	341a      	adds	r4, #26
  403be4:	454d      	cmp	r5, r9
  403be6:	d11b      	bne.n	403c20 <_printf_common+0xd8>
  403be8:	2000      	movs	r0, #0
  403bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403bee:	2301      	movs	r3, #1
  403bf0:	4652      	mov	r2, sl
  403bf2:	4639      	mov	r1, r7
  403bf4:	4630      	mov	r0, r6
  403bf6:	47c0      	blx	r8
  403bf8:	3001      	adds	r0, #1
  403bfa:	d103      	bne.n	403c04 <_printf_common+0xbc>
  403bfc:	f04f 30ff 	mov.w	r0, #4294967295
  403c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c04:	3501      	adds	r5, #1
  403c06:	e7c2      	b.n	403b8e <_printf_common+0x46>
  403c08:	18e1      	adds	r1, r4, r3
  403c0a:	1c5a      	adds	r2, r3, #1
  403c0c:	2030      	movs	r0, #48	; 0x30
  403c0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  403c12:	4422      	add	r2, r4
  403c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  403c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  403c1c:	3302      	adds	r3, #2
  403c1e:	e7c4      	b.n	403baa <_printf_common+0x62>
  403c20:	2301      	movs	r3, #1
  403c22:	4622      	mov	r2, r4
  403c24:	4639      	mov	r1, r7
  403c26:	4630      	mov	r0, r6
  403c28:	47c0      	blx	r8
  403c2a:	3001      	adds	r0, #1
  403c2c:	d0e6      	beq.n	403bfc <_printf_common+0xb4>
  403c2e:	f109 0901 	add.w	r9, r9, #1
  403c32:	e7d7      	b.n	403be4 <_printf_common+0x9c>

00403c34 <_printf_i>:
  403c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403c38:	4617      	mov	r7, r2
  403c3a:	7e0a      	ldrb	r2, [r1, #24]
  403c3c:	b085      	sub	sp, #20
  403c3e:	2a6e      	cmp	r2, #110	; 0x6e
  403c40:	4698      	mov	r8, r3
  403c42:	4606      	mov	r6, r0
  403c44:	460c      	mov	r4, r1
  403c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403c48:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  403c4c:	f000 80bc 	beq.w	403dc8 <_printf_i+0x194>
  403c50:	d81a      	bhi.n	403c88 <_printf_i+0x54>
  403c52:	2a63      	cmp	r2, #99	; 0x63
  403c54:	d02e      	beq.n	403cb4 <_printf_i+0x80>
  403c56:	d80a      	bhi.n	403c6e <_printf_i+0x3a>
  403c58:	2a00      	cmp	r2, #0
  403c5a:	f000 80c8 	beq.w	403dee <_printf_i+0x1ba>
  403c5e:	2a58      	cmp	r2, #88	; 0x58
  403c60:	f000 808a 	beq.w	403d78 <_printf_i+0x144>
  403c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403c68:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  403c6c:	e02a      	b.n	403cc4 <_printf_i+0x90>
  403c6e:	2a64      	cmp	r2, #100	; 0x64
  403c70:	d001      	beq.n	403c76 <_printf_i+0x42>
  403c72:	2a69      	cmp	r2, #105	; 0x69
  403c74:	d1f6      	bne.n	403c64 <_printf_i+0x30>
  403c76:	6821      	ldr	r1, [r4, #0]
  403c78:	681a      	ldr	r2, [r3, #0]
  403c7a:	f011 0f80 	tst.w	r1, #128	; 0x80
  403c7e:	d023      	beq.n	403cc8 <_printf_i+0x94>
  403c80:	1d11      	adds	r1, r2, #4
  403c82:	6019      	str	r1, [r3, #0]
  403c84:	6813      	ldr	r3, [r2, #0]
  403c86:	e027      	b.n	403cd8 <_printf_i+0xa4>
  403c88:	2a73      	cmp	r2, #115	; 0x73
  403c8a:	f000 80b4 	beq.w	403df6 <_printf_i+0x1c2>
  403c8e:	d808      	bhi.n	403ca2 <_printf_i+0x6e>
  403c90:	2a6f      	cmp	r2, #111	; 0x6f
  403c92:	d02a      	beq.n	403cea <_printf_i+0xb6>
  403c94:	2a70      	cmp	r2, #112	; 0x70
  403c96:	d1e5      	bne.n	403c64 <_printf_i+0x30>
  403c98:	680a      	ldr	r2, [r1, #0]
  403c9a:	f042 0220 	orr.w	r2, r2, #32
  403c9e:	600a      	str	r2, [r1, #0]
  403ca0:	e003      	b.n	403caa <_printf_i+0x76>
  403ca2:	2a75      	cmp	r2, #117	; 0x75
  403ca4:	d021      	beq.n	403cea <_printf_i+0xb6>
  403ca6:	2a78      	cmp	r2, #120	; 0x78
  403ca8:	d1dc      	bne.n	403c64 <_printf_i+0x30>
  403caa:	2278      	movs	r2, #120	; 0x78
  403cac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  403cb0:	496e      	ldr	r1, [pc, #440]	; (403e6c <_printf_i+0x238>)
  403cb2:	e064      	b.n	403d7e <_printf_i+0x14a>
  403cb4:	681a      	ldr	r2, [r3, #0]
  403cb6:	f101 0542 	add.w	r5, r1, #66	; 0x42
  403cba:	1d11      	adds	r1, r2, #4
  403cbc:	6019      	str	r1, [r3, #0]
  403cbe:	6813      	ldr	r3, [r2, #0]
  403cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403cc4:	2301      	movs	r3, #1
  403cc6:	e0a3      	b.n	403e10 <_printf_i+0x1dc>
  403cc8:	f011 0f40 	tst.w	r1, #64	; 0x40
  403ccc:	f102 0104 	add.w	r1, r2, #4
  403cd0:	6019      	str	r1, [r3, #0]
  403cd2:	d0d7      	beq.n	403c84 <_printf_i+0x50>
  403cd4:	f9b2 3000 	ldrsh.w	r3, [r2]
  403cd8:	2b00      	cmp	r3, #0
  403cda:	da03      	bge.n	403ce4 <_printf_i+0xb0>
  403cdc:	222d      	movs	r2, #45	; 0x2d
  403cde:	425b      	negs	r3, r3
  403ce0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  403ce4:	4962      	ldr	r1, [pc, #392]	; (403e70 <_printf_i+0x23c>)
  403ce6:	220a      	movs	r2, #10
  403ce8:	e017      	b.n	403d1a <_printf_i+0xe6>
  403cea:	6820      	ldr	r0, [r4, #0]
  403cec:	6819      	ldr	r1, [r3, #0]
  403cee:	f010 0f80 	tst.w	r0, #128	; 0x80
  403cf2:	d003      	beq.n	403cfc <_printf_i+0xc8>
  403cf4:	1d08      	adds	r0, r1, #4
  403cf6:	6018      	str	r0, [r3, #0]
  403cf8:	680b      	ldr	r3, [r1, #0]
  403cfa:	e006      	b.n	403d0a <_printf_i+0xd6>
  403cfc:	f010 0f40 	tst.w	r0, #64	; 0x40
  403d00:	f101 0004 	add.w	r0, r1, #4
  403d04:	6018      	str	r0, [r3, #0]
  403d06:	d0f7      	beq.n	403cf8 <_printf_i+0xc4>
  403d08:	880b      	ldrh	r3, [r1, #0]
  403d0a:	4959      	ldr	r1, [pc, #356]	; (403e70 <_printf_i+0x23c>)
  403d0c:	2a6f      	cmp	r2, #111	; 0x6f
  403d0e:	bf14      	ite	ne
  403d10:	220a      	movne	r2, #10
  403d12:	2208      	moveq	r2, #8
  403d14:	2000      	movs	r0, #0
  403d16:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  403d1a:	6865      	ldr	r5, [r4, #4]
  403d1c:	60a5      	str	r5, [r4, #8]
  403d1e:	2d00      	cmp	r5, #0
  403d20:	f2c0 809c 	blt.w	403e5c <_printf_i+0x228>
  403d24:	6820      	ldr	r0, [r4, #0]
  403d26:	f020 0004 	bic.w	r0, r0, #4
  403d2a:	6020      	str	r0, [r4, #0]
  403d2c:	2b00      	cmp	r3, #0
  403d2e:	d13f      	bne.n	403db0 <_printf_i+0x17c>
  403d30:	2d00      	cmp	r5, #0
  403d32:	f040 8095 	bne.w	403e60 <_printf_i+0x22c>
  403d36:	4675      	mov	r5, lr
  403d38:	2a08      	cmp	r2, #8
  403d3a:	d10b      	bne.n	403d54 <_printf_i+0x120>
  403d3c:	6823      	ldr	r3, [r4, #0]
  403d3e:	07da      	lsls	r2, r3, #31
  403d40:	d508      	bpl.n	403d54 <_printf_i+0x120>
  403d42:	6923      	ldr	r3, [r4, #16]
  403d44:	6862      	ldr	r2, [r4, #4]
  403d46:	429a      	cmp	r2, r3
  403d48:	bfde      	ittt	le
  403d4a:	2330      	movle	r3, #48	; 0x30
  403d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
  403d50:	f105 35ff 	addle.w	r5, r5, #4294967295
  403d54:	ebae 0305 	sub.w	r3, lr, r5
  403d58:	6123      	str	r3, [r4, #16]
  403d5a:	f8cd 8000 	str.w	r8, [sp]
  403d5e:	463b      	mov	r3, r7
  403d60:	aa03      	add	r2, sp, #12
  403d62:	4621      	mov	r1, r4
  403d64:	4630      	mov	r0, r6
  403d66:	f7ff feef 	bl	403b48 <_printf_common>
  403d6a:	3001      	adds	r0, #1
  403d6c:	d155      	bne.n	403e1a <_printf_i+0x1e6>
  403d6e:	f04f 30ff 	mov.w	r0, #4294967295
  403d72:	b005      	add	sp, #20
  403d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403d78:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  403d7c:	493c      	ldr	r1, [pc, #240]	; (403e70 <_printf_i+0x23c>)
  403d7e:	6822      	ldr	r2, [r4, #0]
  403d80:	6818      	ldr	r0, [r3, #0]
  403d82:	f012 0f80 	tst.w	r2, #128	; 0x80
  403d86:	f100 0504 	add.w	r5, r0, #4
  403d8a:	601d      	str	r5, [r3, #0]
  403d8c:	d001      	beq.n	403d92 <_printf_i+0x15e>
  403d8e:	6803      	ldr	r3, [r0, #0]
  403d90:	e002      	b.n	403d98 <_printf_i+0x164>
  403d92:	0655      	lsls	r5, r2, #25
  403d94:	d5fb      	bpl.n	403d8e <_printf_i+0x15a>
  403d96:	8803      	ldrh	r3, [r0, #0]
  403d98:	07d0      	lsls	r0, r2, #31
  403d9a:	bf44      	itt	mi
  403d9c:	f042 0220 	orrmi.w	r2, r2, #32
  403da0:	6022      	strmi	r2, [r4, #0]
  403da2:	b91b      	cbnz	r3, 403dac <_printf_i+0x178>
  403da4:	6822      	ldr	r2, [r4, #0]
  403da6:	f022 0220 	bic.w	r2, r2, #32
  403daa:	6022      	str	r2, [r4, #0]
  403dac:	2210      	movs	r2, #16
  403dae:	e7b1      	b.n	403d14 <_printf_i+0xe0>
  403db0:	4675      	mov	r5, lr
  403db2:	fbb3 f0f2 	udiv	r0, r3, r2
  403db6:	fb02 3310 	mls	r3, r2, r0, r3
  403dba:	5ccb      	ldrb	r3, [r1, r3]
  403dbc:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403dc0:	4603      	mov	r3, r0
  403dc2:	2800      	cmp	r0, #0
  403dc4:	d1f5      	bne.n	403db2 <_printf_i+0x17e>
  403dc6:	e7b7      	b.n	403d38 <_printf_i+0x104>
  403dc8:	6808      	ldr	r0, [r1, #0]
  403dca:	681a      	ldr	r2, [r3, #0]
  403dcc:	6949      	ldr	r1, [r1, #20]
  403dce:	f010 0f80 	tst.w	r0, #128	; 0x80
  403dd2:	d004      	beq.n	403dde <_printf_i+0x1aa>
  403dd4:	1d10      	adds	r0, r2, #4
  403dd6:	6018      	str	r0, [r3, #0]
  403dd8:	6813      	ldr	r3, [r2, #0]
  403dda:	6019      	str	r1, [r3, #0]
  403ddc:	e007      	b.n	403dee <_printf_i+0x1ba>
  403dde:	f010 0f40 	tst.w	r0, #64	; 0x40
  403de2:	f102 0004 	add.w	r0, r2, #4
  403de6:	6018      	str	r0, [r3, #0]
  403de8:	6813      	ldr	r3, [r2, #0]
  403dea:	d0f6      	beq.n	403dda <_printf_i+0x1a6>
  403dec:	8019      	strh	r1, [r3, #0]
  403dee:	2300      	movs	r3, #0
  403df0:	6123      	str	r3, [r4, #16]
  403df2:	4675      	mov	r5, lr
  403df4:	e7b1      	b.n	403d5a <_printf_i+0x126>
  403df6:	681a      	ldr	r2, [r3, #0]
  403df8:	1d11      	adds	r1, r2, #4
  403dfa:	6019      	str	r1, [r3, #0]
  403dfc:	6815      	ldr	r5, [r2, #0]
  403dfe:	6862      	ldr	r2, [r4, #4]
  403e00:	2100      	movs	r1, #0
  403e02:	4628      	mov	r0, r5
  403e04:	f001 f964 	bl	4050d0 <memchr>
  403e08:	b108      	cbz	r0, 403e0e <_printf_i+0x1da>
  403e0a:	1b40      	subs	r0, r0, r5
  403e0c:	6060      	str	r0, [r4, #4]
  403e0e:	6863      	ldr	r3, [r4, #4]
  403e10:	6123      	str	r3, [r4, #16]
  403e12:	2300      	movs	r3, #0
  403e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403e18:	e79f      	b.n	403d5a <_printf_i+0x126>
  403e1a:	6923      	ldr	r3, [r4, #16]
  403e1c:	462a      	mov	r2, r5
  403e1e:	4639      	mov	r1, r7
  403e20:	4630      	mov	r0, r6
  403e22:	47c0      	blx	r8
  403e24:	3001      	adds	r0, #1
  403e26:	d0a2      	beq.n	403d6e <_printf_i+0x13a>
  403e28:	6823      	ldr	r3, [r4, #0]
  403e2a:	079b      	lsls	r3, r3, #30
  403e2c:	d507      	bpl.n	403e3e <_printf_i+0x20a>
  403e2e:	2500      	movs	r5, #0
  403e30:	f104 0919 	add.w	r9, r4, #25
  403e34:	68e3      	ldr	r3, [r4, #12]
  403e36:	9a03      	ldr	r2, [sp, #12]
  403e38:	1a9b      	subs	r3, r3, r2
  403e3a:	429d      	cmp	r5, r3
  403e3c:	db05      	blt.n	403e4a <_printf_i+0x216>
  403e3e:	68e0      	ldr	r0, [r4, #12]
  403e40:	9b03      	ldr	r3, [sp, #12]
  403e42:	4298      	cmp	r0, r3
  403e44:	bfb8      	it	lt
  403e46:	4618      	movlt	r0, r3
  403e48:	e793      	b.n	403d72 <_printf_i+0x13e>
  403e4a:	2301      	movs	r3, #1
  403e4c:	464a      	mov	r2, r9
  403e4e:	4639      	mov	r1, r7
  403e50:	4630      	mov	r0, r6
  403e52:	47c0      	blx	r8
  403e54:	3001      	adds	r0, #1
  403e56:	d08a      	beq.n	403d6e <_printf_i+0x13a>
  403e58:	3501      	adds	r5, #1
  403e5a:	e7eb      	b.n	403e34 <_printf_i+0x200>
  403e5c:	2b00      	cmp	r3, #0
  403e5e:	d1a7      	bne.n	403db0 <_printf_i+0x17c>
  403e60:	780b      	ldrb	r3, [r1, #0]
  403e62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403e66:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403e6a:	e765      	b.n	403d38 <_printf_i+0x104>
  403e6c:	004062af 	.word	0x004062af
  403e70:	0040629e 	.word	0x0040629e

00403e74 <iprintf>:
  403e74:	b40f      	push	{r0, r1, r2, r3}
  403e76:	4b0a      	ldr	r3, [pc, #40]	; (403ea0 <iprintf+0x2c>)
  403e78:	b513      	push	{r0, r1, r4, lr}
  403e7a:	681c      	ldr	r4, [r3, #0]
  403e7c:	b124      	cbz	r4, 403e88 <iprintf+0x14>
  403e7e:	69a3      	ldr	r3, [r4, #24]
  403e80:	b913      	cbnz	r3, 403e88 <iprintf+0x14>
  403e82:	4620      	mov	r0, r4
  403e84:	f001 f81c 	bl	404ec0 <__sinit>
  403e88:	ab05      	add	r3, sp, #20
  403e8a:	9a04      	ldr	r2, [sp, #16]
  403e8c:	68a1      	ldr	r1, [r4, #8]
  403e8e:	9301      	str	r3, [sp, #4]
  403e90:	4620      	mov	r0, r4
  403e92:	f001 fd1f 	bl	4058d4 <_vfiprintf_r>
  403e96:	b002      	add	sp, #8
  403e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403e9c:	b004      	add	sp, #16
  403e9e:	4770      	bx	lr
  403ea0:	20400048 	.word	0x20400048

00403ea4 <setbuf>:
  403ea4:	2900      	cmp	r1, #0
  403ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403eaa:	bf0c      	ite	eq
  403eac:	2202      	moveq	r2, #2
  403eae:	2200      	movne	r2, #0
  403eb0:	f000 b800 	b.w	403eb4 <setvbuf>

00403eb4 <setvbuf>:
  403eb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403eb8:	461d      	mov	r5, r3
  403eba:	4b51      	ldr	r3, [pc, #324]	; (404000 <setvbuf+0x14c>)
  403ebc:	681e      	ldr	r6, [r3, #0]
  403ebe:	4604      	mov	r4, r0
  403ec0:	460f      	mov	r7, r1
  403ec2:	4690      	mov	r8, r2
  403ec4:	b126      	cbz	r6, 403ed0 <setvbuf+0x1c>
  403ec6:	69b3      	ldr	r3, [r6, #24]
  403ec8:	b913      	cbnz	r3, 403ed0 <setvbuf+0x1c>
  403eca:	4630      	mov	r0, r6
  403ecc:	f000 fff8 	bl	404ec0 <__sinit>
  403ed0:	4b4c      	ldr	r3, [pc, #304]	; (404004 <setvbuf+0x150>)
  403ed2:	429c      	cmp	r4, r3
  403ed4:	d152      	bne.n	403f7c <setvbuf+0xc8>
  403ed6:	6874      	ldr	r4, [r6, #4]
  403ed8:	f1b8 0f02 	cmp.w	r8, #2
  403edc:	d006      	beq.n	403eec <setvbuf+0x38>
  403ede:	f1b8 0f01 	cmp.w	r8, #1
  403ee2:	f200 8089 	bhi.w	403ff8 <setvbuf+0x144>
  403ee6:	2d00      	cmp	r5, #0
  403ee8:	f2c0 8086 	blt.w	403ff8 <setvbuf+0x144>
  403eec:	4621      	mov	r1, r4
  403eee:	4630      	mov	r0, r6
  403ef0:	f000 ff7c 	bl	404dec <_fflush_r>
  403ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403ef6:	b141      	cbz	r1, 403f0a <setvbuf+0x56>
  403ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403efc:	4299      	cmp	r1, r3
  403efe:	d002      	beq.n	403f06 <setvbuf+0x52>
  403f00:	4630      	mov	r0, r6
  403f02:	f001 fc13 	bl	40572c <_free_r>
  403f06:	2300      	movs	r3, #0
  403f08:	6363      	str	r3, [r4, #52]	; 0x34
  403f0a:	2300      	movs	r3, #0
  403f0c:	61a3      	str	r3, [r4, #24]
  403f0e:	6063      	str	r3, [r4, #4]
  403f10:	89a3      	ldrh	r3, [r4, #12]
  403f12:	061b      	lsls	r3, r3, #24
  403f14:	d503      	bpl.n	403f1e <setvbuf+0x6a>
  403f16:	6921      	ldr	r1, [r4, #16]
  403f18:	4630      	mov	r0, r6
  403f1a:	f001 fc07 	bl	40572c <_free_r>
  403f1e:	89a3      	ldrh	r3, [r4, #12]
  403f20:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403f24:	f023 0303 	bic.w	r3, r3, #3
  403f28:	f1b8 0f02 	cmp.w	r8, #2
  403f2c:	81a3      	strh	r3, [r4, #12]
  403f2e:	d05d      	beq.n	403fec <setvbuf+0x138>
  403f30:	ab01      	add	r3, sp, #4
  403f32:	466a      	mov	r2, sp
  403f34:	4621      	mov	r1, r4
  403f36:	4630      	mov	r0, r6
  403f38:	f001 f85a 	bl	404ff0 <__swhatbuf_r>
  403f3c:	89a3      	ldrh	r3, [r4, #12]
  403f3e:	4318      	orrs	r0, r3
  403f40:	81a0      	strh	r0, [r4, #12]
  403f42:	bb2d      	cbnz	r5, 403f90 <setvbuf+0xdc>
  403f44:	9d00      	ldr	r5, [sp, #0]
  403f46:	4628      	mov	r0, r5
  403f48:	f001 f8b6 	bl	4050b8 <malloc>
  403f4c:	4607      	mov	r7, r0
  403f4e:	2800      	cmp	r0, #0
  403f50:	d14e      	bne.n	403ff0 <setvbuf+0x13c>
  403f52:	f8dd 9000 	ldr.w	r9, [sp]
  403f56:	45a9      	cmp	r9, r5
  403f58:	d13c      	bne.n	403fd4 <setvbuf+0x120>
  403f5a:	f04f 30ff 	mov.w	r0, #4294967295
  403f5e:	89a3      	ldrh	r3, [r4, #12]
  403f60:	f043 0302 	orr.w	r3, r3, #2
  403f64:	81a3      	strh	r3, [r4, #12]
  403f66:	2300      	movs	r3, #0
  403f68:	60a3      	str	r3, [r4, #8]
  403f6a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  403f6e:	6023      	str	r3, [r4, #0]
  403f70:	6123      	str	r3, [r4, #16]
  403f72:	2301      	movs	r3, #1
  403f74:	6163      	str	r3, [r4, #20]
  403f76:	b003      	add	sp, #12
  403f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403f7c:	4b22      	ldr	r3, [pc, #136]	; (404008 <setvbuf+0x154>)
  403f7e:	429c      	cmp	r4, r3
  403f80:	d101      	bne.n	403f86 <setvbuf+0xd2>
  403f82:	68b4      	ldr	r4, [r6, #8]
  403f84:	e7a8      	b.n	403ed8 <setvbuf+0x24>
  403f86:	4b21      	ldr	r3, [pc, #132]	; (40400c <setvbuf+0x158>)
  403f88:	429c      	cmp	r4, r3
  403f8a:	bf08      	it	eq
  403f8c:	68f4      	ldreq	r4, [r6, #12]
  403f8e:	e7a3      	b.n	403ed8 <setvbuf+0x24>
  403f90:	2f00      	cmp	r7, #0
  403f92:	d0d8      	beq.n	403f46 <setvbuf+0x92>
  403f94:	69b3      	ldr	r3, [r6, #24]
  403f96:	b913      	cbnz	r3, 403f9e <setvbuf+0xea>
  403f98:	4630      	mov	r0, r6
  403f9a:	f000 ff91 	bl	404ec0 <__sinit>
  403f9e:	f1b8 0f01 	cmp.w	r8, #1
  403fa2:	bf08      	it	eq
  403fa4:	89a3      	ldrheq	r3, [r4, #12]
  403fa6:	6027      	str	r7, [r4, #0]
  403fa8:	bf04      	itt	eq
  403faa:	f043 0301 	orreq.w	r3, r3, #1
  403fae:	81a3      	strheq	r3, [r4, #12]
  403fb0:	89a3      	ldrh	r3, [r4, #12]
  403fb2:	6127      	str	r7, [r4, #16]
  403fb4:	f013 0008 	ands.w	r0, r3, #8
  403fb8:	6165      	str	r5, [r4, #20]
  403fba:	d01b      	beq.n	403ff4 <setvbuf+0x140>
  403fbc:	f013 0001 	ands.w	r0, r3, #1
  403fc0:	bf18      	it	ne
  403fc2:	426d      	negne	r5, r5
  403fc4:	f04f 0300 	mov.w	r3, #0
  403fc8:	bf1d      	ittte	ne
  403fca:	60a3      	strne	r3, [r4, #8]
  403fcc:	61a5      	strne	r5, [r4, #24]
  403fce:	4618      	movne	r0, r3
  403fd0:	60a5      	streq	r5, [r4, #8]
  403fd2:	e7d0      	b.n	403f76 <setvbuf+0xc2>
  403fd4:	4648      	mov	r0, r9
  403fd6:	f001 f86f 	bl	4050b8 <malloc>
  403fda:	4607      	mov	r7, r0
  403fdc:	2800      	cmp	r0, #0
  403fde:	d0bc      	beq.n	403f5a <setvbuf+0xa6>
  403fe0:	89a3      	ldrh	r3, [r4, #12]
  403fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403fe6:	81a3      	strh	r3, [r4, #12]
  403fe8:	464d      	mov	r5, r9
  403fea:	e7d3      	b.n	403f94 <setvbuf+0xe0>
  403fec:	2000      	movs	r0, #0
  403fee:	e7b6      	b.n	403f5e <setvbuf+0xaa>
  403ff0:	46a9      	mov	r9, r5
  403ff2:	e7f5      	b.n	403fe0 <setvbuf+0x12c>
  403ff4:	60a0      	str	r0, [r4, #8]
  403ff6:	e7be      	b.n	403f76 <setvbuf+0xc2>
  403ff8:	f04f 30ff 	mov.w	r0, #4294967295
  403ffc:	e7bb      	b.n	403f76 <setvbuf+0xc2>
  403ffe:	bf00      	nop
  404000:	20400048 	.word	0x20400048
  404004:	004062f0 	.word	0x004062f0
  404008:	00406310 	.word	0x00406310
  40400c:	004062d0 	.word	0x004062d0

00404010 <strlen>:
  404010:	4603      	mov	r3, r0
  404012:	f813 2b01 	ldrb.w	r2, [r3], #1
  404016:	2a00      	cmp	r2, #0
  404018:	d1fb      	bne.n	404012 <strlen+0x2>
  40401a:	1a18      	subs	r0, r3, r0
  40401c:	3801      	subs	r0, #1
  40401e:	4770      	bx	lr

00404020 <quorem>:
  404020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404024:	6903      	ldr	r3, [r0, #16]
  404026:	690c      	ldr	r4, [r1, #16]
  404028:	429c      	cmp	r4, r3
  40402a:	4680      	mov	r8, r0
  40402c:	f300 8082 	bgt.w	404134 <quorem+0x114>
  404030:	3c01      	subs	r4, #1
  404032:	f101 0714 	add.w	r7, r1, #20
  404036:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  40403a:	f100 0614 	add.w	r6, r0, #20
  40403e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  404042:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  404046:	eb06 030e 	add.w	r3, r6, lr
  40404a:	3501      	adds	r5, #1
  40404c:	eb07 090e 	add.w	r9, r7, lr
  404050:	9301      	str	r3, [sp, #4]
  404052:	fbb0 f5f5 	udiv	r5, r0, r5
  404056:	b395      	cbz	r5, 4040be <quorem+0x9e>
  404058:	f04f 0a00 	mov.w	sl, #0
  40405c:	4638      	mov	r0, r7
  40405e:	46b4      	mov	ip, r6
  404060:	46d3      	mov	fp, sl
  404062:	f850 2b04 	ldr.w	r2, [r0], #4
  404066:	b293      	uxth	r3, r2
  404068:	fb05 a303 	mla	r3, r5, r3, sl
  40406c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  404070:	b29b      	uxth	r3, r3
  404072:	ebab 0303 	sub.w	r3, fp, r3
  404076:	0c12      	lsrs	r2, r2, #16
  404078:	f8bc b000 	ldrh.w	fp, [ip]
  40407c:	fb05 a202 	mla	r2, r5, r2, sl
  404080:	fa13 f38b 	uxtah	r3, r3, fp
  404084:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  404088:	fa1f fb82 	uxth.w	fp, r2
  40408c:	f8dc 2000 	ldr.w	r2, [ip]
  404090:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  404094:	eb02 4223 	add.w	r2, r2, r3, asr #16
  404098:	b29b      	uxth	r3, r3
  40409a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40409e:	4581      	cmp	r9, r0
  4040a0:	ea4f 4b22 	mov.w	fp, r2, asr #16
  4040a4:	f84c 3b04 	str.w	r3, [ip], #4
  4040a8:	d2db      	bcs.n	404062 <quorem+0x42>
  4040aa:	f856 300e 	ldr.w	r3, [r6, lr]
  4040ae:	b933      	cbnz	r3, 4040be <quorem+0x9e>
  4040b0:	9b01      	ldr	r3, [sp, #4]
  4040b2:	3b04      	subs	r3, #4
  4040b4:	429e      	cmp	r6, r3
  4040b6:	461a      	mov	r2, r3
  4040b8:	d330      	bcc.n	40411c <quorem+0xfc>
  4040ba:	f8c8 4010 	str.w	r4, [r8, #16]
  4040be:	4640      	mov	r0, r8
  4040c0:	f001 fa5f 	bl	405582 <__mcmp>
  4040c4:	2800      	cmp	r0, #0
  4040c6:	db25      	blt.n	404114 <quorem+0xf4>
  4040c8:	3501      	adds	r5, #1
  4040ca:	4630      	mov	r0, r6
  4040cc:	f04f 0e00 	mov.w	lr, #0
  4040d0:	f857 2b04 	ldr.w	r2, [r7], #4
  4040d4:	f8d0 c000 	ldr.w	ip, [r0]
  4040d8:	b293      	uxth	r3, r2
  4040da:	ebae 0303 	sub.w	r3, lr, r3
  4040de:	0c12      	lsrs	r2, r2, #16
  4040e0:	fa13 f38c 	uxtah	r3, r3, ip
  4040e4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  4040e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4040ec:	b29b      	uxth	r3, r3
  4040ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4040f2:	45b9      	cmp	r9, r7
  4040f4:	ea4f 4e22 	mov.w	lr, r2, asr #16
  4040f8:	f840 3b04 	str.w	r3, [r0], #4
  4040fc:	d2e8      	bcs.n	4040d0 <quorem+0xb0>
  4040fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  404102:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  404106:	b92a      	cbnz	r2, 404114 <quorem+0xf4>
  404108:	3b04      	subs	r3, #4
  40410a:	429e      	cmp	r6, r3
  40410c:	461a      	mov	r2, r3
  40410e:	d30b      	bcc.n	404128 <quorem+0x108>
  404110:	f8c8 4010 	str.w	r4, [r8, #16]
  404114:	4628      	mov	r0, r5
  404116:	b003      	add	sp, #12
  404118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40411c:	6812      	ldr	r2, [r2, #0]
  40411e:	3b04      	subs	r3, #4
  404120:	2a00      	cmp	r2, #0
  404122:	d1ca      	bne.n	4040ba <quorem+0x9a>
  404124:	3c01      	subs	r4, #1
  404126:	e7c5      	b.n	4040b4 <quorem+0x94>
  404128:	6812      	ldr	r2, [r2, #0]
  40412a:	3b04      	subs	r3, #4
  40412c:	2a00      	cmp	r2, #0
  40412e:	d1ef      	bne.n	404110 <quorem+0xf0>
  404130:	3c01      	subs	r4, #1
  404132:	e7ea      	b.n	40410a <quorem+0xea>
  404134:	2000      	movs	r0, #0
  404136:	e7ee      	b.n	404116 <quorem+0xf6>

00404138 <_dtoa_r>:
  404138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40413c:	6a46      	ldr	r6, [r0, #36]	; 0x24
  40413e:	b095      	sub	sp, #84	; 0x54
  404140:	4604      	mov	r4, r0
  404142:	9d21      	ldr	r5, [sp, #132]	; 0x84
  404144:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404148:	b93e      	cbnz	r6, 40415a <_dtoa_r+0x22>
  40414a:	2010      	movs	r0, #16
  40414c:	f000 ffb4 	bl	4050b8 <malloc>
  404150:	6260      	str	r0, [r4, #36]	; 0x24
  404152:	6046      	str	r6, [r0, #4]
  404154:	6086      	str	r6, [r0, #8]
  404156:	6006      	str	r6, [r0, #0]
  404158:	60c6      	str	r6, [r0, #12]
  40415a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40415c:	6819      	ldr	r1, [r3, #0]
  40415e:	b151      	cbz	r1, 404176 <_dtoa_r+0x3e>
  404160:	685a      	ldr	r2, [r3, #4]
  404162:	604a      	str	r2, [r1, #4]
  404164:	2301      	movs	r3, #1
  404166:	4093      	lsls	r3, r2
  404168:	608b      	str	r3, [r1, #8]
  40416a:	4620      	mov	r0, r4
  40416c:	f001 f834 	bl	4051d8 <_Bfree>
  404170:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404172:	2200      	movs	r2, #0
  404174:	601a      	str	r2, [r3, #0]
  404176:	9b03      	ldr	r3, [sp, #12]
  404178:	2b00      	cmp	r3, #0
  40417a:	bfbf      	itttt	lt
  40417c:	2301      	movlt	r3, #1
  40417e:	602b      	strlt	r3, [r5, #0]
  404180:	9b03      	ldrlt	r3, [sp, #12]
  404182:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  404186:	bfb2      	itee	lt
  404188:	9303      	strlt	r3, [sp, #12]
  40418a:	2300      	movge	r3, #0
  40418c:	602b      	strge	r3, [r5, #0]
  40418e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  404192:	4ba9      	ldr	r3, [pc, #676]	; (404438 <_dtoa_r+0x300>)
  404194:	ea33 0309 	bics.w	r3, r3, r9
  404198:	d11b      	bne.n	4041d2 <_dtoa_r+0x9a>
  40419a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40419c:	f242 730f 	movw	r3, #9999	; 0x270f
  4041a0:	6013      	str	r3, [r2, #0]
  4041a2:	9b02      	ldr	r3, [sp, #8]
  4041a4:	b923      	cbnz	r3, 4041b0 <_dtoa_r+0x78>
  4041a6:	f3c9 0013 	ubfx	r0, r9, #0, #20
  4041aa:	2800      	cmp	r0, #0
  4041ac:	f000 8581 	beq.w	404cb2 <_dtoa_r+0xb7a>
  4041b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4041b2:	b953      	cbnz	r3, 4041ca <_dtoa_r+0x92>
  4041b4:	4ba1      	ldr	r3, [pc, #644]	; (40443c <_dtoa_r+0x304>)
  4041b6:	e021      	b.n	4041fc <_dtoa_r+0xc4>
  4041b8:	4ba1      	ldr	r3, [pc, #644]	; (404440 <_dtoa_r+0x308>)
  4041ba:	9306      	str	r3, [sp, #24]
  4041bc:	3308      	adds	r3, #8
  4041be:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4041c0:	6013      	str	r3, [r2, #0]
  4041c2:	9806      	ldr	r0, [sp, #24]
  4041c4:	b015      	add	sp, #84	; 0x54
  4041c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041ca:	4b9c      	ldr	r3, [pc, #624]	; (40443c <_dtoa_r+0x304>)
  4041cc:	9306      	str	r3, [sp, #24]
  4041ce:	3303      	adds	r3, #3
  4041d0:	e7f5      	b.n	4041be <_dtoa_r+0x86>
  4041d2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4041d6:	2200      	movs	r2, #0
  4041d8:	2300      	movs	r3, #0
  4041da:	4630      	mov	r0, r6
  4041dc:	4639      	mov	r1, r7
  4041de:	f7ff f8f3 	bl	4033c8 <__aeabi_dcmpeq>
  4041e2:	4680      	mov	r8, r0
  4041e4:	b160      	cbz	r0, 404200 <_dtoa_r+0xc8>
  4041e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4041e8:	2301      	movs	r3, #1
  4041ea:	6013      	str	r3, [r2, #0]
  4041ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4041ee:	2b00      	cmp	r3, #0
  4041f0:	f000 855c 	beq.w	404cac <_dtoa_r+0xb74>
  4041f4:	4b93      	ldr	r3, [pc, #588]	; (404444 <_dtoa_r+0x30c>)
  4041f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4041f8:	6013      	str	r3, [r2, #0]
  4041fa:	3b01      	subs	r3, #1
  4041fc:	9306      	str	r3, [sp, #24]
  4041fe:	e7e0      	b.n	4041c2 <_dtoa_r+0x8a>
  404200:	ab12      	add	r3, sp, #72	; 0x48
  404202:	9301      	str	r3, [sp, #4]
  404204:	ab13      	add	r3, sp, #76	; 0x4c
  404206:	9300      	str	r3, [sp, #0]
  404208:	4632      	mov	r2, r6
  40420a:	463b      	mov	r3, r7
  40420c:	4620      	mov	r0, r4
  40420e:	f001 fa30 	bl	405672 <__d2b>
  404212:	f3c9 550a 	ubfx	r5, r9, #20, #11
  404216:	4682      	mov	sl, r0
  404218:	2d00      	cmp	r5, #0
  40421a:	d07c      	beq.n	404316 <_dtoa_r+0x1de>
  40421c:	f3c7 0313 	ubfx	r3, r7, #0, #20
  404220:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  404224:	4630      	mov	r0, r6
  404226:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40422a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40422e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  404232:	2200      	movs	r2, #0
  404234:	4b84      	ldr	r3, [pc, #528]	; (404448 <_dtoa_r+0x310>)
  404236:	f7fe fcab 	bl	402b90 <__aeabi_dsub>
  40423a:	a379      	add	r3, pc, #484	; (adr r3, 404420 <_dtoa_r+0x2e8>)
  40423c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404240:	f7fe fe5a 	bl	402ef8 <__aeabi_dmul>
  404244:	a378      	add	r3, pc, #480	; (adr r3, 404428 <_dtoa_r+0x2f0>)
  404246:	e9d3 2300 	ldrd	r2, r3, [r3]
  40424a:	f7fe fca3 	bl	402b94 <__adddf3>
  40424e:	4606      	mov	r6, r0
  404250:	4628      	mov	r0, r5
  404252:	460f      	mov	r7, r1
  404254:	f7fe fdea 	bl	402e2c <__aeabi_i2d>
  404258:	a375      	add	r3, pc, #468	; (adr r3, 404430 <_dtoa_r+0x2f8>)
  40425a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40425e:	f7fe fe4b 	bl	402ef8 <__aeabi_dmul>
  404262:	4602      	mov	r2, r0
  404264:	460b      	mov	r3, r1
  404266:	4630      	mov	r0, r6
  404268:	4639      	mov	r1, r7
  40426a:	f7fe fc93 	bl	402b94 <__adddf3>
  40426e:	4606      	mov	r6, r0
  404270:	460f      	mov	r7, r1
  404272:	f7ff f8f1 	bl	403458 <__aeabi_d2iz>
  404276:	2200      	movs	r2, #0
  404278:	4683      	mov	fp, r0
  40427a:	2300      	movs	r3, #0
  40427c:	4630      	mov	r0, r6
  40427e:	4639      	mov	r1, r7
  404280:	f7ff f8ac 	bl	4033dc <__aeabi_dcmplt>
  404284:	b158      	cbz	r0, 40429e <_dtoa_r+0x166>
  404286:	4658      	mov	r0, fp
  404288:	f7fe fdd0 	bl	402e2c <__aeabi_i2d>
  40428c:	4602      	mov	r2, r0
  40428e:	460b      	mov	r3, r1
  404290:	4630      	mov	r0, r6
  404292:	4639      	mov	r1, r7
  404294:	f7ff f898 	bl	4033c8 <__aeabi_dcmpeq>
  404298:	b908      	cbnz	r0, 40429e <_dtoa_r+0x166>
  40429a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40429e:	f1bb 0f16 	cmp.w	fp, #22
  4042a2:	d857      	bhi.n	404354 <_dtoa_r+0x21c>
  4042a4:	4969      	ldr	r1, [pc, #420]	; (40444c <_dtoa_r+0x314>)
  4042a6:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  4042aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4042ae:	e9d1 0100 	ldrd	r0, r1, [r1]
  4042b2:	f7ff f8b1 	bl	403418 <__aeabi_dcmpgt>
  4042b6:	2800      	cmp	r0, #0
  4042b8:	d04e      	beq.n	404358 <_dtoa_r+0x220>
  4042ba:	f10b 3bff 	add.w	fp, fp, #4294967295
  4042be:	2300      	movs	r3, #0
  4042c0:	930d      	str	r3, [sp, #52]	; 0x34
  4042c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4042c4:	1b5d      	subs	r5, r3, r5
  4042c6:	1e6b      	subs	r3, r5, #1
  4042c8:	9307      	str	r3, [sp, #28]
  4042ca:	bf43      	ittte	mi
  4042cc:	2300      	movmi	r3, #0
  4042ce:	f1c5 0801 	rsbmi	r8, r5, #1
  4042d2:	9307      	strmi	r3, [sp, #28]
  4042d4:	f04f 0800 	movpl.w	r8, #0
  4042d8:	f1bb 0f00 	cmp.w	fp, #0
  4042dc:	db3e      	blt.n	40435c <_dtoa_r+0x224>
  4042de:	9b07      	ldr	r3, [sp, #28]
  4042e0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  4042e4:	445b      	add	r3, fp
  4042e6:	9307      	str	r3, [sp, #28]
  4042e8:	2300      	movs	r3, #0
  4042ea:	9308      	str	r3, [sp, #32]
  4042ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4042ee:	2b09      	cmp	r3, #9
  4042f0:	f200 80b0 	bhi.w	404454 <_dtoa_r+0x31c>
  4042f4:	2b05      	cmp	r3, #5
  4042f6:	bfc4      	itt	gt
  4042f8:	3b04      	subgt	r3, #4
  4042fa:	931e      	strgt	r3, [sp, #120]	; 0x78
  4042fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4042fe:	f1a3 0302 	sub.w	r3, r3, #2
  404302:	bfcc      	ite	gt
  404304:	2600      	movgt	r6, #0
  404306:	2601      	movle	r6, #1
  404308:	2b03      	cmp	r3, #3
  40430a:	f200 80af 	bhi.w	40446c <_dtoa_r+0x334>
  40430e:	e8df f003 	tbb	[pc, r3]
  404312:	8583      	.short	0x8583
  404314:	772d      	.short	0x772d
  404316:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404318:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40431a:	441d      	add	r5, r3
  40431c:	f205 4332 	addw	r3, r5, #1074	; 0x432
  404320:	2b20      	cmp	r3, #32
  404322:	dd11      	ble.n	404348 <_dtoa_r+0x210>
  404324:	9a02      	ldr	r2, [sp, #8]
  404326:	f205 4012 	addw	r0, r5, #1042	; 0x412
  40432a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40432e:	fa22 f000 	lsr.w	r0, r2, r0
  404332:	fa09 f303 	lsl.w	r3, r9, r3
  404336:	4318      	orrs	r0, r3
  404338:	f7fe fd68 	bl	402e0c <__aeabi_ui2d>
  40433c:	2301      	movs	r3, #1
  40433e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404342:	3d01      	subs	r5, #1
  404344:	9310      	str	r3, [sp, #64]	; 0x40
  404346:	e774      	b.n	404232 <_dtoa_r+0xfa>
  404348:	f1c3 0020 	rsb	r0, r3, #32
  40434c:	9b02      	ldr	r3, [sp, #8]
  40434e:	fa03 f000 	lsl.w	r0, r3, r0
  404352:	e7f1      	b.n	404338 <_dtoa_r+0x200>
  404354:	2301      	movs	r3, #1
  404356:	e7b3      	b.n	4042c0 <_dtoa_r+0x188>
  404358:	900d      	str	r0, [sp, #52]	; 0x34
  40435a:	e7b2      	b.n	4042c2 <_dtoa_r+0x18a>
  40435c:	f1cb 0300 	rsb	r3, fp, #0
  404360:	9308      	str	r3, [sp, #32]
  404362:	2300      	movs	r3, #0
  404364:	eba8 080b 	sub.w	r8, r8, fp
  404368:	930c      	str	r3, [sp, #48]	; 0x30
  40436a:	e7bf      	b.n	4042ec <_dtoa_r+0x1b4>
  40436c:	2301      	movs	r3, #1
  40436e:	9309      	str	r3, [sp, #36]	; 0x24
  404370:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404372:	2b00      	cmp	r3, #0
  404374:	dd7d      	ble.n	404472 <_dtoa_r+0x33a>
  404376:	9304      	str	r3, [sp, #16]
  404378:	4699      	mov	r9, r3
  40437a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40437c:	2200      	movs	r2, #0
  40437e:	606a      	str	r2, [r5, #4]
  404380:	2104      	movs	r1, #4
  404382:	f101 0214 	add.w	r2, r1, #20
  404386:	429a      	cmp	r2, r3
  404388:	d978      	bls.n	40447c <_dtoa_r+0x344>
  40438a:	6869      	ldr	r1, [r5, #4]
  40438c:	4620      	mov	r0, r4
  40438e:	f000 feef 	bl	405170 <_Balloc>
  404392:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404394:	6028      	str	r0, [r5, #0]
  404396:	681b      	ldr	r3, [r3, #0]
  404398:	9306      	str	r3, [sp, #24]
  40439a:	f1b9 0f0e 	cmp.w	r9, #14
  40439e:	f200 80ee 	bhi.w	40457e <_dtoa_r+0x446>
  4043a2:	2e00      	cmp	r6, #0
  4043a4:	f000 80eb 	beq.w	40457e <_dtoa_r+0x446>
  4043a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4043ac:	f1bb 0f00 	cmp.w	fp, #0
  4043b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  4043b4:	dd77      	ble.n	4044a6 <_dtoa_r+0x36e>
  4043b6:	4a25      	ldr	r2, [pc, #148]	; (40444c <_dtoa_r+0x314>)
  4043b8:	f00b 030f 	and.w	r3, fp, #15
  4043bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4043c4:	ea4f 162b 	mov.w	r6, fp, asr #4
  4043c8:	06f0      	lsls	r0, r6, #27
  4043ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  4043ce:	d55a      	bpl.n	404486 <_dtoa_r+0x34e>
  4043d0:	4b1f      	ldr	r3, [pc, #124]	; (404450 <_dtoa_r+0x318>)
  4043d2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4043d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4043da:	f7fe feb7 	bl	40314c <__aeabi_ddiv>
  4043de:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4043e2:	f006 060f 	and.w	r6, r6, #15
  4043e6:	2503      	movs	r5, #3
  4043e8:	4f19      	ldr	r7, [pc, #100]	; (404450 <_dtoa_r+0x318>)
  4043ea:	2e00      	cmp	r6, #0
  4043ec:	d14d      	bne.n	40448a <_dtoa_r+0x352>
  4043ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4043f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4043f6:	f7fe fea9 	bl	40314c <__aeabi_ddiv>
  4043fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4043fe:	e06c      	b.n	4044da <_dtoa_r+0x3a2>
  404400:	2301      	movs	r3, #1
  404402:	9309      	str	r3, [sp, #36]	; 0x24
  404404:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404406:	445b      	add	r3, fp
  404408:	f103 0901 	add.w	r9, r3, #1
  40440c:	9304      	str	r3, [sp, #16]
  40440e:	464b      	mov	r3, r9
  404410:	2b01      	cmp	r3, #1
  404412:	bfb8      	it	lt
  404414:	2301      	movlt	r3, #1
  404416:	e7b0      	b.n	40437a <_dtoa_r+0x242>
  404418:	2300      	movs	r3, #0
  40441a:	e7a8      	b.n	40436e <_dtoa_r+0x236>
  40441c:	2300      	movs	r3, #0
  40441e:	e7f0      	b.n	404402 <_dtoa_r+0x2ca>
  404420:	636f4361 	.word	0x636f4361
  404424:	3fd287a7 	.word	0x3fd287a7
  404428:	8b60c8b3 	.word	0x8b60c8b3
  40442c:	3fc68a28 	.word	0x3fc68a28
  404430:	509f79fb 	.word	0x509f79fb
  404434:	3fd34413 	.word	0x3fd34413
  404438:	7ff00000 	.word	0x7ff00000
  40443c:	004062c9 	.word	0x004062c9
  404440:	004062c0 	.word	0x004062c0
  404444:	0040629d 	.word	0x0040629d
  404448:	3ff80000 	.word	0x3ff80000
  40444c:	00406358 	.word	0x00406358
  404450:	00406330 	.word	0x00406330
  404454:	2601      	movs	r6, #1
  404456:	2300      	movs	r3, #0
  404458:	931e      	str	r3, [sp, #120]	; 0x78
  40445a:	9609      	str	r6, [sp, #36]	; 0x24
  40445c:	f04f 33ff 	mov.w	r3, #4294967295
  404460:	9304      	str	r3, [sp, #16]
  404462:	4699      	mov	r9, r3
  404464:	2200      	movs	r2, #0
  404466:	2312      	movs	r3, #18
  404468:	921f      	str	r2, [sp, #124]	; 0x7c
  40446a:	e786      	b.n	40437a <_dtoa_r+0x242>
  40446c:	2301      	movs	r3, #1
  40446e:	9309      	str	r3, [sp, #36]	; 0x24
  404470:	e7f4      	b.n	40445c <_dtoa_r+0x324>
  404472:	2301      	movs	r3, #1
  404474:	9304      	str	r3, [sp, #16]
  404476:	4699      	mov	r9, r3
  404478:	461a      	mov	r2, r3
  40447a:	e7f5      	b.n	404468 <_dtoa_r+0x330>
  40447c:	686a      	ldr	r2, [r5, #4]
  40447e:	3201      	adds	r2, #1
  404480:	606a      	str	r2, [r5, #4]
  404482:	0049      	lsls	r1, r1, #1
  404484:	e77d      	b.n	404382 <_dtoa_r+0x24a>
  404486:	2502      	movs	r5, #2
  404488:	e7ae      	b.n	4043e8 <_dtoa_r+0x2b0>
  40448a:	07f1      	lsls	r1, r6, #31
  40448c:	d508      	bpl.n	4044a0 <_dtoa_r+0x368>
  40448e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404492:	e9d7 2300 	ldrd	r2, r3, [r7]
  404496:	f7fe fd2f 	bl	402ef8 <__aeabi_dmul>
  40449a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40449e:	3501      	adds	r5, #1
  4044a0:	1076      	asrs	r6, r6, #1
  4044a2:	3708      	adds	r7, #8
  4044a4:	e7a1      	b.n	4043ea <_dtoa_r+0x2b2>
  4044a6:	f000 80a5 	beq.w	4045f4 <_dtoa_r+0x4bc>
  4044aa:	f1cb 0600 	rsb	r6, fp, #0
  4044ae:	4ba3      	ldr	r3, [pc, #652]	; (40473c <_dtoa_r+0x604>)
  4044b0:	4fa3      	ldr	r7, [pc, #652]	; (404740 <_dtoa_r+0x608>)
  4044b2:	f006 020f 	and.w	r2, r6, #15
  4044b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4044be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4044c2:	f7fe fd19 	bl	402ef8 <__aeabi_dmul>
  4044c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4044ca:	1136      	asrs	r6, r6, #4
  4044cc:	2300      	movs	r3, #0
  4044ce:	2502      	movs	r5, #2
  4044d0:	2e00      	cmp	r6, #0
  4044d2:	f040 8084 	bne.w	4045de <_dtoa_r+0x4a6>
  4044d6:	2b00      	cmp	r3, #0
  4044d8:	d18f      	bne.n	4043fa <_dtoa_r+0x2c2>
  4044da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4044dc:	2b00      	cmp	r3, #0
  4044de:	f000 808b 	beq.w	4045f8 <_dtoa_r+0x4c0>
  4044e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4044e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  4044ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4044ee:	2200      	movs	r2, #0
  4044f0:	4b94      	ldr	r3, [pc, #592]	; (404744 <_dtoa_r+0x60c>)
  4044f2:	f7fe ff73 	bl	4033dc <__aeabi_dcmplt>
  4044f6:	2800      	cmp	r0, #0
  4044f8:	d07e      	beq.n	4045f8 <_dtoa_r+0x4c0>
  4044fa:	f1b9 0f00 	cmp.w	r9, #0
  4044fe:	d07b      	beq.n	4045f8 <_dtoa_r+0x4c0>
  404500:	9b04      	ldr	r3, [sp, #16]
  404502:	2b00      	cmp	r3, #0
  404504:	dd37      	ble.n	404576 <_dtoa_r+0x43e>
  404506:	2200      	movs	r2, #0
  404508:	4b8f      	ldr	r3, [pc, #572]	; (404748 <_dtoa_r+0x610>)
  40450a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40450e:	f7fe fcf3 	bl	402ef8 <__aeabi_dmul>
  404512:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404516:	9e04      	ldr	r6, [sp, #16]
  404518:	f10b 37ff 	add.w	r7, fp, #4294967295
  40451c:	3501      	adds	r5, #1
  40451e:	4628      	mov	r0, r5
  404520:	f7fe fc84 	bl	402e2c <__aeabi_i2d>
  404524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404528:	f7fe fce6 	bl	402ef8 <__aeabi_dmul>
  40452c:	4b87      	ldr	r3, [pc, #540]	; (40474c <_dtoa_r+0x614>)
  40452e:	2200      	movs	r2, #0
  404530:	f7fe fb30 	bl	402b94 <__adddf3>
  404534:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40453a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  40453e:	950b      	str	r5, [sp, #44]	; 0x2c
  404540:	2e00      	cmp	r6, #0
  404542:	d15c      	bne.n	4045fe <_dtoa_r+0x4c6>
  404544:	2200      	movs	r2, #0
  404546:	4b82      	ldr	r3, [pc, #520]	; (404750 <_dtoa_r+0x618>)
  404548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40454c:	f7fe fb20 	bl	402b90 <__aeabi_dsub>
  404550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404552:	462b      	mov	r3, r5
  404554:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404558:	f7fe ff5e 	bl	403418 <__aeabi_dcmpgt>
  40455c:	2800      	cmp	r0, #0
  40455e:	f040 82f7 	bne.w	404b50 <_dtoa_r+0xa18>
  404562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404564:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  404568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40456c:	f7fe ff36 	bl	4033dc <__aeabi_dcmplt>
  404570:	2800      	cmp	r0, #0
  404572:	f040 82eb 	bne.w	404b4c <_dtoa_r+0xa14>
  404576:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40457a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40457e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404580:	2b00      	cmp	r3, #0
  404582:	f2c0 8151 	blt.w	404828 <_dtoa_r+0x6f0>
  404586:	f1bb 0f0e 	cmp.w	fp, #14
  40458a:	f300 814d 	bgt.w	404828 <_dtoa_r+0x6f0>
  40458e:	4b6b      	ldr	r3, [pc, #428]	; (40473c <_dtoa_r+0x604>)
  404590:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  404594:	e9d3 2300 	ldrd	r2, r3, [r3]
  404598:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40459c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40459e:	2b00      	cmp	r3, #0
  4045a0:	f280 80da 	bge.w	404758 <_dtoa_r+0x620>
  4045a4:	f1b9 0f00 	cmp.w	r9, #0
  4045a8:	f300 80d6 	bgt.w	404758 <_dtoa_r+0x620>
  4045ac:	f040 82cd 	bne.w	404b4a <_dtoa_r+0xa12>
  4045b0:	2200      	movs	r2, #0
  4045b2:	4b67      	ldr	r3, [pc, #412]	; (404750 <_dtoa_r+0x618>)
  4045b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4045b8:	f7fe fc9e 	bl	402ef8 <__aeabi_dmul>
  4045bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4045c0:	f7fe ff20 	bl	403404 <__aeabi_dcmpge>
  4045c4:	464e      	mov	r6, r9
  4045c6:	464f      	mov	r7, r9
  4045c8:	2800      	cmp	r0, #0
  4045ca:	f040 82a4 	bne.w	404b16 <_dtoa_r+0x9de>
  4045ce:	9b06      	ldr	r3, [sp, #24]
  4045d0:	9a06      	ldr	r2, [sp, #24]
  4045d2:	1c5d      	adds	r5, r3, #1
  4045d4:	2331      	movs	r3, #49	; 0x31
  4045d6:	7013      	strb	r3, [r2, #0]
  4045d8:	f10b 0b01 	add.w	fp, fp, #1
  4045dc:	e29f      	b.n	404b1e <_dtoa_r+0x9e6>
  4045de:	07f2      	lsls	r2, r6, #31
  4045e0:	d505      	bpl.n	4045ee <_dtoa_r+0x4b6>
  4045e2:	e9d7 2300 	ldrd	r2, r3, [r7]
  4045e6:	f7fe fc87 	bl	402ef8 <__aeabi_dmul>
  4045ea:	3501      	adds	r5, #1
  4045ec:	2301      	movs	r3, #1
  4045ee:	1076      	asrs	r6, r6, #1
  4045f0:	3708      	adds	r7, #8
  4045f2:	e76d      	b.n	4044d0 <_dtoa_r+0x398>
  4045f4:	2502      	movs	r5, #2
  4045f6:	e770      	b.n	4044da <_dtoa_r+0x3a2>
  4045f8:	465f      	mov	r7, fp
  4045fa:	464e      	mov	r6, r9
  4045fc:	e78f      	b.n	40451e <_dtoa_r+0x3e6>
  4045fe:	9a06      	ldr	r2, [sp, #24]
  404600:	4b4e      	ldr	r3, [pc, #312]	; (40473c <_dtoa_r+0x604>)
  404602:	4432      	add	r2, r6
  404604:	9211      	str	r2, [sp, #68]	; 0x44
  404606:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404608:	1e71      	subs	r1, r6, #1
  40460a:	2a00      	cmp	r2, #0
  40460c:	d048      	beq.n	4046a0 <_dtoa_r+0x568>
  40460e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  404612:	e9d3 2300 	ldrd	r2, r3, [r3]
  404616:	2000      	movs	r0, #0
  404618:	494e      	ldr	r1, [pc, #312]	; (404754 <_dtoa_r+0x61c>)
  40461a:	f7fe fd97 	bl	40314c <__aeabi_ddiv>
  40461e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404622:	f7fe fab5 	bl	402b90 <__aeabi_dsub>
  404626:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40462a:	9d06      	ldr	r5, [sp, #24]
  40462c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404630:	f7fe ff12 	bl	403458 <__aeabi_d2iz>
  404634:	4606      	mov	r6, r0
  404636:	f7fe fbf9 	bl	402e2c <__aeabi_i2d>
  40463a:	4602      	mov	r2, r0
  40463c:	460b      	mov	r3, r1
  40463e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404642:	f7fe faa5 	bl	402b90 <__aeabi_dsub>
  404646:	3630      	adds	r6, #48	; 0x30
  404648:	f805 6b01 	strb.w	r6, [r5], #1
  40464c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404650:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404654:	f7fe fec2 	bl	4033dc <__aeabi_dcmplt>
  404658:	2800      	cmp	r0, #0
  40465a:	d165      	bne.n	404728 <_dtoa_r+0x5f0>
  40465c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404660:	2000      	movs	r0, #0
  404662:	4938      	ldr	r1, [pc, #224]	; (404744 <_dtoa_r+0x60c>)
  404664:	f7fe fa94 	bl	402b90 <__aeabi_dsub>
  404668:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40466c:	f7fe feb6 	bl	4033dc <__aeabi_dcmplt>
  404670:	2800      	cmp	r0, #0
  404672:	f040 80b9 	bne.w	4047e8 <_dtoa_r+0x6b0>
  404676:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404678:	429d      	cmp	r5, r3
  40467a:	f43f af7c 	beq.w	404576 <_dtoa_r+0x43e>
  40467e:	2200      	movs	r2, #0
  404680:	4b31      	ldr	r3, [pc, #196]	; (404748 <_dtoa_r+0x610>)
  404682:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404686:	f7fe fc37 	bl	402ef8 <__aeabi_dmul>
  40468a:	2200      	movs	r2, #0
  40468c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404690:	4b2d      	ldr	r3, [pc, #180]	; (404748 <_dtoa_r+0x610>)
  404692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404696:	f7fe fc2f 	bl	402ef8 <__aeabi_dmul>
  40469a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40469e:	e7c5      	b.n	40462c <_dtoa_r+0x4f4>
  4046a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4046a4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4046a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4046ac:	f7fe fc24 	bl	402ef8 <__aeabi_dmul>
  4046b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4046b4:	9d06      	ldr	r5, [sp, #24]
  4046b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4046ba:	f7fe fecd 	bl	403458 <__aeabi_d2iz>
  4046be:	4606      	mov	r6, r0
  4046c0:	f7fe fbb4 	bl	402e2c <__aeabi_i2d>
  4046c4:	3630      	adds	r6, #48	; 0x30
  4046c6:	4602      	mov	r2, r0
  4046c8:	460b      	mov	r3, r1
  4046ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4046ce:	f7fe fa5f 	bl	402b90 <__aeabi_dsub>
  4046d2:	f805 6b01 	strb.w	r6, [r5], #1
  4046d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4046d8:	42ab      	cmp	r3, r5
  4046da:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4046de:	f04f 0200 	mov.w	r2, #0
  4046e2:	d125      	bne.n	404730 <_dtoa_r+0x5f8>
  4046e4:	4b1b      	ldr	r3, [pc, #108]	; (404754 <_dtoa_r+0x61c>)
  4046e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4046ea:	f7fe fa53 	bl	402b94 <__adddf3>
  4046ee:	4602      	mov	r2, r0
  4046f0:	460b      	mov	r3, r1
  4046f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4046f6:	f7fe fe8f 	bl	403418 <__aeabi_dcmpgt>
  4046fa:	2800      	cmp	r0, #0
  4046fc:	d174      	bne.n	4047e8 <_dtoa_r+0x6b0>
  4046fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404702:	2000      	movs	r0, #0
  404704:	4913      	ldr	r1, [pc, #76]	; (404754 <_dtoa_r+0x61c>)
  404706:	f7fe fa43 	bl	402b90 <__aeabi_dsub>
  40470a:	4602      	mov	r2, r0
  40470c:	460b      	mov	r3, r1
  40470e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404712:	f7fe fe63 	bl	4033dc <__aeabi_dcmplt>
  404716:	2800      	cmp	r0, #0
  404718:	f43f af2d 	beq.w	404576 <_dtoa_r+0x43e>
  40471c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404720:	2b30      	cmp	r3, #48	; 0x30
  404722:	f105 32ff 	add.w	r2, r5, #4294967295
  404726:	d001      	beq.n	40472c <_dtoa_r+0x5f4>
  404728:	46bb      	mov	fp, r7
  40472a:	e04c      	b.n	4047c6 <_dtoa_r+0x68e>
  40472c:	4615      	mov	r5, r2
  40472e:	e7f5      	b.n	40471c <_dtoa_r+0x5e4>
  404730:	4b05      	ldr	r3, [pc, #20]	; (404748 <_dtoa_r+0x610>)
  404732:	f7fe fbe1 	bl	402ef8 <__aeabi_dmul>
  404736:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40473a:	e7bc      	b.n	4046b6 <_dtoa_r+0x57e>
  40473c:	00406358 	.word	0x00406358
  404740:	00406330 	.word	0x00406330
  404744:	3ff00000 	.word	0x3ff00000
  404748:	40240000 	.word	0x40240000
  40474c:	401c0000 	.word	0x401c0000
  404750:	40140000 	.word	0x40140000
  404754:	3fe00000 	.word	0x3fe00000
  404758:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40475c:	9d06      	ldr	r5, [sp, #24]
  40475e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404762:	4630      	mov	r0, r6
  404764:	4639      	mov	r1, r7
  404766:	f7fe fcf1 	bl	40314c <__aeabi_ddiv>
  40476a:	f7fe fe75 	bl	403458 <__aeabi_d2iz>
  40476e:	4680      	mov	r8, r0
  404770:	f7fe fb5c 	bl	402e2c <__aeabi_i2d>
  404774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404778:	f7fe fbbe 	bl	402ef8 <__aeabi_dmul>
  40477c:	4602      	mov	r2, r0
  40477e:	460b      	mov	r3, r1
  404780:	4630      	mov	r0, r6
  404782:	4639      	mov	r1, r7
  404784:	f108 0630 	add.w	r6, r8, #48	; 0x30
  404788:	f7fe fa02 	bl	402b90 <__aeabi_dsub>
  40478c:	f805 6b01 	strb.w	r6, [r5], #1
  404790:	9e06      	ldr	r6, [sp, #24]
  404792:	1bae      	subs	r6, r5, r6
  404794:	45b1      	cmp	r9, r6
  404796:	4602      	mov	r2, r0
  404798:	460b      	mov	r3, r1
  40479a:	d138      	bne.n	40480e <_dtoa_r+0x6d6>
  40479c:	f7fe f9fa 	bl	402b94 <__adddf3>
  4047a0:	4606      	mov	r6, r0
  4047a2:	460f      	mov	r7, r1
  4047a4:	4602      	mov	r2, r0
  4047a6:	460b      	mov	r3, r1
  4047a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4047ac:	f7fe fe16 	bl	4033dc <__aeabi_dcmplt>
  4047b0:	b9c8      	cbnz	r0, 4047e6 <_dtoa_r+0x6ae>
  4047b2:	4632      	mov	r2, r6
  4047b4:	463b      	mov	r3, r7
  4047b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4047ba:	f7fe fe05 	bl	4033c8 <__aeabi_dcmpeq>
  4047be:	b110      	cbz	r0, 4047c6 <_dtoa_r+0x68e>
  4047c0:	f018 0f01 	tst.w	r8, #1
  4047c4:	d10f      	bne.n	4047e6 <_dtoa_r+0x6ae>
  4047c6:	4651      	mov	r1, sl
  4047c8:	4620      	mov	r0, r4
  4047ca:	f000 fd05 	bl	4051d8 <_Bfree>
  4047ce:	2300      	movs	r3, #0
  4047d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4047d2:	702b      	strb	r3, [r5, #0]
  4047d4:	f10b 0301 	add.w	r3, fp, #1
  4047d8:	6013      	str	r3, [r2, #0]
  4047da:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4047dc:	2b00      	cmp	r3, #0
  4047de:	f43f acf0 	beq.w	4041c2 <_dtoa_r+0x8a>
  4047e2:	601d      	str	r5, [r3, #0]
  4047e4:	e4ed      	b.n	4041c2 <_dtoa_r+0x8a>
  4047e6:	465f      	mov	r7, fp
  4047e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4047ec:	2a39      	cmp	r2, #57	; 0x39
  4047ee:	f105 33ff 	add.w	r3, r5, #4294967295
  4047f2:	d106      	bne.n	404802 <_dtoa_r+0x6ca>
  4047f4:	9a06      	ldr	r2, [sp, #24]
  4047f6:	429a      	cmp	r2, r3
  4047f8:	d107      	bne.n	40480a <_dtoa_r+0x6d2>
  4047fa:	2330      	movs	r3, #48	; 0x30
  4047fc:	7013      	strb	r3, [r2, #0]
  4047fe:	3701      	adds	r7, #1
  404800:	4613      	mov	r3, r2
  404802:	781a      	ldrb	r2, [r3, #0]
  404804:	3201      	adds	r2, #1
  404806:	701a      	strb	r2, [r3, #0]
  404808:	e78e      	b.n	404728 <_dtoa_r+0x5f0>
  40480a:	461d      	mov	r5, r3
  40480c:	e7ec      	b.n	4047e8 <_dtoa_r+0x6b0>
  40480e:	2200      	movs	r2, #0
  404810:	4bb4      	ldr	r3, [pc, #720]	; (404ae4 <_dtoa_r+0x9ac>)
  404812:	f7fe fb71 	bl	402ef8 <__aeabi_dmul>
  404816:	2200      	movs	r2, #0
  404818:	2300      	movs	r3, #0
  40481a:	4606      	mov	r6, r0
  40481c:	460f      	mov	r7, r1
  40481e:	f7fe fdd3 	bl	4033c8 <__aeabi_dcmpeq>
  404822:	2800      	cmp	r0, #0
  404824:	d09b      	beq.n	40475e <_dtoa_r+0x626>
  404826:	e7ce      	b.n	4047c6 <_dtoa_r+0x68e>
  404828:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40482a:	2a00      	cmp	r2, #0
  40482c:	f000 8129 	beq.w	404a82 <_dtoa_r+0x94a>
  404830:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404832:	2a01      	cmp	r2, #1
  404834:	f300 810e 	bgt.w	404a54 <_dtoa_r+0x91c>
  404838:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40483a:	2a00      	cmp	r2, #0
  40483c:	f000 8106 	beq.w	404a4c <_dtoa_r+0x914>
  404840:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404844:	9e08      	ldr	r6, [sp, #32]
  404846:	4645      	mov	r5, r8
  404848:	9a07      	ldr	r2, [sp, #28]
  40484a:	2101      	movs	r1, #1
  40484c:	441a      	add	r2, r3
  40484e:	4620      	mov	r0, r4
  404850:	4498      	add	r8, r3
  404852:	9207      	str	r2, [sp, #28]
  404854:	f000 fd60 	bl	405318 <__i2b>
  404858:	4607      	mov	r7, r0
  40485a:	2d00      	cmp	r5, #0
  40485c:	dd0b      	ble.n	404876 <_dtoa_r+0x73e>
  40485e:	9b07      	ldr	r3, [sp, #28]
  404860:	2b00      	cmp	r3, #0
  404862:	dd08      	ble.n	404876 <_dtoa_r+0x73e>
  404864:	42ab      	cmp	r3, r5
  404866:	9a07      	ldr	r2, [sp, #28]
  404868:	bfa8      	it	ge
  40486a:	462b      	movge	r3, r5
  40486c:	eba8 0803 	sub.w	r8, r8, r3
  404870:	1aed      	subs	r5, r5, r3
  404872:	1ad3      	subs	r3, r2, r3
  404874:	9307      	str	r3, [sp, #28]
  404876:	9b08      	ldr	r3, [sp, #32]
  404878:	b1fb      	cbz	r3, 4048ba <_dtoa_r+0x782>
  40487a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40487c:	2b00      	cmp	r3, #0
  40487e:	f000 8104 	beq.w	404a8a <_dtoa_r+0x952>
  404882:	2e00      	cmp	r6, #0
  404884:	dd11      	ble.n	4048aa <_dtoa_r+0x772>
  404886:	4639      	mov	r1, r7
  404888:	4632      	mov	r2, r6
  40488a:	4620      	mov	r0, r4
  40488c:	f000 fdda 	bl	405444 <__pow5mult>
  404890:	4652      	mov	r2, sl
  404892:	4601      	mov	r1, r0
  404894:	4607      	mov	r7, r0
  404896:	4620      	mov	r0, r4
  404898:	f000 fd47 	bl	40532a <__multiply>
  40489c:	4651      	mov	r1, sl
  40489e:	900a      	str	r0, [sp, #40]	; 0x28
  4048a0:	4620      	mov	r0, r4
  4048a2:	f000 fc99 	bl	4051d8 <_Bfree>
  4048a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4048a8:	469a      	mov	sl, r3
  4048aa:	9b08      	ldr	r3, [sp, #32]
  4048ac:	1b9a      	subs	r2, r3, r6
  4048ae:	d004      	beq.n	4048ba <_dtoa_r+0x782>
  4048b0:	4651      	mov	r1, sl
  4048b2:	4620      	mov	r0, r4
  4048b4:	f000 fdc6 	bl	405444 <__pow5mult>
  4048b8:	4682      	mov	sl, r0
  4048ba:	2101      	movs	r1, #1
  4048bc:	4620      	mov	r0, r4
  4048be:	f000 fd2b 	bl	405318 <__i2b>
  4048c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4048c4:	2b00      	cmp	r3, #0
  4048c6:	4606      	mov	r6, r0
  4048c8:	f340 80e1 	ble.w	404a8e <_dtoa_r+0x956>
  4048cc:	461a      	mov	r2, r3
  4048ce:	4601      	mov	r1, r0
  4048d0:	4620      	mov	r0, r4
  4048d2:	f000 fdb7 	bl	405444 <__pow5mult>
  4048d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4048d8:	2b01      	cmp	r3, #1
  4048da:	4606      	mov	r6, r0
  4048dc:	f340 80da 	ble.w	404a94 <_dtoa_r+0x95c>
  4048e0:	2300      	movs	r3, #0
  4048e2:	9308      	str	r3, [sp, #32]
  4048e4:	6933      	ldr	r3, [r6, #16]
  4048e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4048ea:	6918      	ldr	r0, [r3, #16]
  4048ec:	f000 fcc6 	bl	40527c <__hi0bits>
  4048f0:	f1c0 0020 	rsb	r0, r0, #32
  4048f4:	9b07      	ldr	r3, [sp, #28]
  4048f6:	4418      	add	r0, r3
  4048f8:	f010 001f 	ands.w	r0, r0, #31
  4048fc:	f000 80f0 	beq.w	404ae0 <_dtoa_r+0x9a8>
  404900:	f1c0 0320 	rsb	r3, r0, #32
  404904:	2b04      	cmp	r3, #4
  404906:	f340 80e2 	ble.w	404ace <_dtoa_r+0x996>
  40490a:	9b07      	ldr	r3, [sp, #28]
  40490c:	f1c0 001c 	rsb	r0, r0, #28
  404910:	4480      	add	r8, r0
  404912:	4405      	add	r5, r0
  404914:	4403      	add	r3, r0
  404916:	9307      	str	r3, [sp, #28]
  404918:	f1b8 0f00 	cmp.w	r8, #0
  40491c:	dd05      	ble.n	40492a <_dtoa_r+0x7f2>
  40491e:	4651      	mov	r1, sl
  404920:	4642      	mov	r2, r8
  404922:	4620      	mov	r0, r4
  404924:	f000 fddc 	bl	4054e0 <__lshift>
  404928:	4682      	mov	sl, r0
  40492a:	9b07      	ldr	r3, [sp, #28]
  40492c:	2b00      	cmp	r3, #0
  40492e:	dd05      	ble.n	40493c <_dtoa_r+0x804>
  404930:	4631      	mov	r1, r6
  404932:	461a      	mov	r2, r3
  404934:	4620      	mov	r0, r4
  404936:	f000 fdd3 	bl	4054e0 <__lshift>
  40493a:	4606      	mov	r6, r0
  40493c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40493e:	2b00      	cmp	r3, #0
  404940:	f000 80d2 	beq.w	404ae8 <_dtoa_r+0x9b0>
  404944:	4631      	mov	r1, r6
  404946:	4650      	mov	r0, sl
  404948:	f000 fe1b 	bl	405582 <__mcmp>
  40494c:	2800      	cmp	r0, #0
  40494e:	f280 80cb 	bge.w	404ae8 <_dtoa_r+0x9b0>
  404952:	2300      	movs	r3, #0
  404954:	4651      	mov	r1, sl
  404956:	220a      	movs	r2, #10
  404958:	4620      	mov	r0, r4
  40495a:	f000 fc54 	bl	405206 <__multadd>
  40495e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404960:	f10b 3bff 	add.w	fp, fp, #4294967295
  404964:	4682      	mov	sl, r0
  404966:	2b00      	cmp	r3, #0
  404968:	f000 81aa 	beq.w	404cc0 <_dtoa_r+0xb88>
  40496c:	2300      	movs	r3, #0
  40496e:	4639      	mov	r1, r7
  404970:	220a      	movs	r2, #10
  404972:	4620      	mov	r0, r4
  404974:	f000 fc47 	bl	405206 <__multadd>
  404978:	9b04      	ldr	r3, [sp, #16]
  40497a:	2b00      	cmp	r3, #0
  40497c:	4607      	mov	r7, r0
  40497e:	dc03      	bgt.n	404988 <_dtoa_r+0x850>
  404980:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404982:	2b02      	cmp	r3, #2
  404984:	f300 80b8 	bgt.w	404af8 <_dtoa_r+0x9c0>
  404988:	2d00      	cmp	r5, #0
  40498a:	dd05      	ble.n	404998 <_dtoa_r+0x860>
  40498c:	4639      	mov	r1, r7
  40498e:	462a      	mov	r2, r5
  404990:	4620      	mov	r0, r4
  404992:	f000 fda5 	bl	4054e0 <__lshift>
  404996:	4607      	mov	r7, r0
  404998:	9b08      	ldr	r3, [sp, #32]
  40499a:	2b00      	cmp	r3, #0
  40499c:	f000 8110 	beq.w	404bc0 <_dtoa_r+0xa88>
  4049a0:	6879      	ldr	r1, [r7, #4]
  4049a2:	4620      	mov	r0, r4
  4049a4:	f000 fbe4 	bl	405170 <_Balloc>
  4049a8:	693a      	ldr	r2, [r7, #16]
  4049aa:	3202      	adds	r2, #2
  4049ac:	4605      	mov	r5, r0
  4049ae:	0092      	lsls	r2, r2, #2
  4049b0:	f107 010c 	add.w	r1, r7, #12
  4049b4:	300c      	adds	r0, #12
  4049b6:	f7fe fdeb 	bl	403590 <memcpy>
  4049ba:	2201      	movs	r2, #1
  4049bc:	4629      	mov	r1, r5
  4049be:	4620      	mov	r0, r4
  4049c0:	f000 fd8e 	bl	4054e0 <__lshift>
  4049c4:	9b02      	ldr	r3, [sp, #8]
  4049c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4049ca:	9707      	str	r7, [sp, #28]
  4049cc:	f003 0301 	and.w	r3, r3, #1
  4049d0:	4607      	mov	r7, r0
  4049d2:	9308      	str	r3, [sp, #32]
  4049d4:	4631      	mov	r1, r6
  4049d6:	4650      	mov	r0, sl
  4049d8:	f7ff fb22 	bl	404020 <quorem>
  4049dc:	9907      	ldr	r1, [sp, #28]
  4049de:	4605      	mov	r5, r0
  4049e0:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4049e4:	4650      	mov	r0, sl
  4049e6:	f000 fdcc 	bl	405582 <__mcmp>
  4049ea:	463a      	mov	r2, r7
  4049ec:	9002      	str	r0, [sp, #8]
  4049ee:	4631      	mov	r1, r6
  4049f0:	4620      	mov	r0, r4
  4049f2:	f000 fde0 	bl	4055b6 <__mdiff>
  4049f6:	68c3      	ldr	r3, [r0, #12]
  4049f8:	4602      	mov	r2, r0
  4049fa:	2b00      	cmp	r3, #0
  4049fc:	f040 80e2 	bne.w	404bc4 <_dtoa_r+0xa8c>
  404a00:	4601      	mov	r1, r0
  404a02:	9009      	str	r0, [sp, #36]	; 0x24
  404a04:	4650      	mov	r0, sl
  404a06:	f000 fdbc 	bl	405582 <__mcmp>
  404a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404a0c:	4603      	mov	r3, r0
  404a0e:	4611      	mov	r1, r2
  404a10:	4620      	mov	r0, r4
  404a12:	9309      	str	r3, [sp, #36]	; 0x24
  404a14:	f000 fbe0 	bl	4051d8 <_Bfree>
  404a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404a1a:	2b00      	cmp	r3, #0
  404a1c:	f040 80d4 	bne.w	404bc8 <_dtoa_r+0xa90>
  404a20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404a22:	2a00      	cmp	r2, #0
  404a24:	f040 80d0 	bne.w	404bc8 <_dtoa_r+0xa90>
  404a28:	9a08      	ldr	r2, [sp, #32]
  404a2a:	2a00      	cmp	r2, #0
  404a2c:	f040 80cc 	bne.w	404bc8 <_dtoa_r+0xa90>
  404a30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404a34:	f000 80e8 	beq.w	404c08 <_dtoa_r+0xad0>
  404a38:	9b02      	ldr	r3, [sp, #8]
  404a3a:	2b00      	cmp	r3, #0
  404a3c:	dd01      	ble.n	404a42 <_dtoa_r+0x90a>
  404a3e:	f105 0931 	add.w	r9, r5, #49	; 0x31
  404a42:	f108 0501 	add.w	r5, r8, #1
  404a46:	f888 9000 	strb.w	r9, [r8]
  404a4a:	e06a      	b.n	404b22 <_dtoa_r+0x9ea>
  404a4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404a52:	e6f7      	b.n	404844 <_dtoa_r+0x70c>
  404a54:	9b08      	ldr	r3, [sp, #32]
  404a56:	f109 36ff 	add.w	r6, r9, #4294967295
  404a5a:	42b3      	cmp	r3, r6
  404a5c:	bfbf      	itttt	lt
  404a5e:	9b08      	ldrlt	r3, [sp, #32]
  404a60:	9608      	strlt	r6, [sp, #32]
  404a62:	1af2      	sublt	r2, r6, r3
  404a64:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  404a66:	bfb7      	itett	lt
  404a68:	189b      	addlt	r3, r3, r2
  404a6a:	1b9e      	subge	r6, r3, r6
  404a6c:	930c      	strlt	r3, [sp, #48]	; 0x30
  404a6e:	2600      	movlt	r6, #0
  404a70:	f1b9 0f00 	cmp.w	r9, #0
  404a74:	bfb9      	ittee	lt
  404a76:	eba8 0509 	sublt.w	r5, r8, r9
  404a7a:	2300      	movlt	r3, #0
  404a7c:	4645      	movge	r5, r8
  404a7e:	464b      	movge	r3, r9
  404a80:	e6e2      	b.n	404848 <_dtoa_r+0x710>
  404a82:	9e08      	ldr	r6, [sp, #32]
  404a84:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404a86:	4645      	mov	r5, r8
  404a88:	e6e7      	b.n	40485a <_dtoa_r+0x722>
  404a8a:	9a08      	ldr	r2, [sp, #32]
  404a8c:	e710      	b.n	4048b0 <_dtoa_r+0x778>
  404a8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404a90:	2b01      	cmp	r3, #1
  404a92:	dc18      	bgt.n	404ac6 <_dtoa_r+0x98e>
  404a94:	9b02      	ldr	r3, [sp, #8]
  404a96:	b9b3      	cbnz	r3, 404ac6 <_dtoa_r+0x98e>
  404a98:	9b03      	ldr	r3, [sp, #12]
  404a9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  404a9e:	b9a3      	cbnz	r3, 404aca <_dtoa_r+0x992>
  404aa0:	9b03      	ldr	r3, [sp, #12]
  404aa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  404aa6:	0d1b      	lsrs	r3, r3, #20
  404aa8:	051b      	lsls	r3, r3, #20
  404aaa:	b12b      	cbz	r3, 404ab8 <_dtoa_r+0x980>
  404aac:	9b07      	ldr	r3, [sp, #28]
  404aae:	3301      	adds	r3, #1
  404ab0:	9307      	str	r3, [sp, #28]
  404ab2:	f108 0801 	add.w	r8, r8, #1
  404ab6:	2301      	movs	r3, #1
  404ab8:	9308      	str	r3, [sp, #32]
  404aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404abc:	2b00      	cmp	r3, #0
  404abe:	f47f af11 	bne.w	4048e4 <_dtoa_r+0x7ac>
  404ac2:	2001      	movs	r0, #1
  404ac4:	e716      	b.n	4048f4 <_dtoa_r+0x7bc>
  404ac6:	2300      	movs	r3, #0
  404ac8:	e7f6      	b.n	404ab8 <_dtoa_r+0x980>
  404aca:	9b02      	ldr	r3, [sp, #8]
  404acc:	e7f4      	b.n	404ab8 <_dtoa_r+0x980>
  404ace:	f43f af23 	beq.w	404918 <_dtoa_r+0x7e0>
  404ad2:	9a07      	ldr	r2, [sp, #28]
  404ad4:	331c      	adds	r3, #28
  404ad6:	441a      	add	r2, r3
  404ad8:	4498      	add	r8, r3
  404ada:	441d      	add	r5, r3
  404adc:	4613      	mov	r3, r2
  404ade:	e71a      	b.n	404916 <_dtoa_r+0x7de>
  404ae0:	4603      	mov	r3, r0
  404ae2:	e7f6      	b.n	404ad2 <_dtoa_r+0x99a>
  404ae4:	40240000 	.word	0x40240000
  404ae8:	f1b9 0f00 	cmp.w	r9, #0
  404aec:	dc33      	bgt.n	404b56 <_dtoa_r+0xa1e>
  404aee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404af0:	2b02      	cmp	r3, #2
  404af2:	dd30      	ble.n	404b56 <_dtoa_r+0xa1e>
  404af4:	f8cd 9010 	str.w	r9, [sp, #16]
  404af8:	9b04      	ldr	r3, [sp, #16]
  404afa:	b963      	cbnz	r3, 404b16 <_dtoa_r+0x9de>
  404afc:	4631      	mov	r1, r6
  404afe:	2205      	movs	r2, #5
  404b00:	4620      	mov	r0, r4
  404b02:	f000 fb80 	bl	405206 <__multadd>
  404b06:	4601      	mov	r1, r0
  404b08:	4606      	mov	r6, r0
  404b0a:	4650      	mov	r0, sl
  404b0c:	f000 fd39 	bl	405582 <__mcmp>
  404b10:	2800      	cmp	r0, #0
  404b12:	f73f ad5c 	bgt.w	4045ce <_dtoa_r+0x496>
  404b16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404b18:	9d06      	ldr	r5, [sp, #24]
  404b1a:	ea6f 0b03 	mvn.w	fp, r3
  404b1e:	2300      	movs	r3, #0
  404b20:	9307      	str	r3, [sp, #28]
  404b22:	4631      	mov	r1, r6
  404b24:	4620      	mov	r0, r4
  404b26:	f000 fb57 	bl	4051d8 <_Bfree>
  404b2a:	2f00      	cmp	r7, #0
  404b2c:	f43f ae4b 	beq.w	4047c6 <_dtoa_r+0x68e>
  404b30:	9b07      	ldr	r3, [sp, #28]
  404b32:	b12b      	cbz	r3, 404b40 <_dtoa_r+0xa08>
  404b34:	42bb      	cmp	r3, r7
  404b36:	d003      	beq.n	404b40 <_dtoa_r+0xa08>
  404b38:	4619      	mov	r1, r3
  404b3a:	4620      	mov	r0, r4
  404b3c:	f000 fb4c 	bl	4051d8 <_Bfree>
  404b40:	4639      	mov	r1, r7
  404b42:	4620      	mov	r0, r4
  404b44:	f000 fb48 	bl	4051d8 <_Bfree>
  404b48:	e63d      	b.n	4047c6 <_dtoa_r+0x68e>
  404b4a:	2600      	movs	r6, #0
  404b4c:	4637      	mov	r7, r6
  404b4e:	e7e2      	b.n	404b16 <_dtoa_r+0x9de>
  404b50:	46bb      	mov	fp, r7
  404b52:	4637      	mov	r7, r6
  404b54:	e53b      	b.n	4045ce <_dtoa_r+0x496>
  404b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404b58:	f8cd 9010 	str.w	r9, [sp, #16]
  404b5c:	2b00      	cmp	r3, #0
  404b5e:	f47f af13 	bne.w	404988 <_dtoa_r+0x850>
  404b62:	9d06      	ldr	r5, [sp, #24]
  404b64:	4631      	mov	r1, r6
  404b66:	4650      	mov	r0, sl
  404b68:	f7ff fa5a 	bl	404020 <quorem>
  404b6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404b70:	f805 9b01 	strb.w	r9, [r5], #1
  404b74:	9b06      	ldr	r3, [sp, #24]
  404b76:	9a04      	ldr	r2, [sp, #16]
  404b78:	1aeb      	subs	r3, r5, r3
  404b7a:	429a      	cmp	r2, r3
  404b7c:	f300 8083 	bgt.w	404c86 <_dtoa_r+0xb4e>
  404b80:	9b06      	ldr	r3, [sp, #24]
  404b82:	2a01      	cmp	r2, #1
  404b84:	bfac      	ite	ge
  404b86:	189b      	addge	r3, r3, r2
  404b88:	3301      	addlt	r3, #1
  404b8a:	4698      	mov	r8, r3
  404b8c:	2300      	movs	r3, #0
  404b8e:	9307      	str	r3, [sp, #28]
  404b90:	4651      	mov	r1, sl
  404b92:	2201      	movs	r2, #1
  404b94:	4620      	mov	r0, r4
  404b96:	f000 fca3 	bl	4054e0 <__lshift>
  404b9a:	4631      	mov	r1, r6
  404b9c:	4682      	mov	sl, r0
  404b9e:	f000 fcf0 	bl	405582 <__mcmp>
  404ba2:	2800      	cmp	r0, #0
  404ba4:	dc35      	bgt.n	404c12 <_dtoa_r+0xada>
  404ba6:	d102      	bne.n	404bae <_dtoa_r+0xa76>
  404ba8:	f019 0f01 	tst.w	r9, #1
  404bac:	d131      	bne.n	404c12 <_dtoa_r+0xada>
  404bae:	4645      	mov	r5, r8
  404bb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404bb4:	2b30      	cmp	r3, #48	; 0x30
  404bb6:	f105 32ff 	add.w	r2, r5, #4294967295
  404bba:	d1b2      	bne.n	404b22 <_dtoa_r+0x9ea>
  404bbc:	4615      	mov	r5, r2
  404bbe:	e7f7      	b.n	404bb0 <_dtoa_r+0xa78>
  404bc0:	4638      	mov	r0, r7
  404bc2:	e6ff      	b.n	4049c4 <_dtoa_r+0x88c>
  404bc4:	2301      	movs	r3, #1
  404bc6:	e722      	b.n	404a0e <_dtoa_r+0x8d6>
  404bc8:	9a02      	ldr	r2, [sp, #8]
  404bca:	2a00      	cmp	r2, #0
  404bcc:	db04      	blt.n	404bd8 <_dtoa_r+0xaa0>
  404bce:	d129      	bne.n	404c24 <_dtoa_r+0xaec>
  404bd0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404bd2:	bb3a      	cbnz	r2, 404c24 <_dtoa_r+0xaec>
  404bd4:	9a08      	ldr	r2, [sp, #32]
  404bd6:	bb2a      	cbnz	r2, 404c24 <_dtoa_r+0xaec>
  404bd8:	2b00      	cmp	r3, #0
  404bda:	f77f af32 	ble.w	404a42 <_dtoa_r+0x90a>
  404bde:	4651      	mov	r1, sl
  404be0:	2201      	movs	r2, #1
  404be2:	4620      	mov	r0, r4
  404be4:	f000 fc7c 	bl	4054e0 <__lshift>
  404be8:	4631      	mov	r1, r6
  404bea:	4682      	mov	sl, r0
  404bec:	f000 fcc9 	bl	405582 <__mcmp>
  404bf0:	2800      	cmp	r0, #0
  404bf2:	dc05      	bgt.n	404c00 <_dtoa_r+0xac8>
  404bf4:	f47f af25 	bne.w	404a42 <_dtoa_r+0x90a>
  404bf8:	f019 0f01 	tst.w	r9, #1
  404bfc:	f43f af21 	beq.w	404a42 <_dtoa_r+0x90a>
  404c00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404c04:	f47f af1b 	bne.w	404a3e <_dtoa_r+0x906>
  404c08:	2339      	movs	r3, #57	; 0x39
  404c0a:	f888 3000 	strb.w	r3, [r8]
  404c0e:	f108 0801 	add.w	r8, r8, #1
  404c12:	4645      	mov	r5, r8
  404c14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404c18:	2b39      	cmp	r3, #57	; 0x39
  404c1a:	f105 32ff 	add.w	r2, r5, #4294967295
  404c1e:	d03a      	beq.n	404c96 <_dtoa_r+0xb5e>
  404c20:	3301      	adds	r3, #1
  404c22:	e03f      	b.n	404ca4 <_dtoa_r+0xb6c>
  404c24:	2b00      	cmp	r3, #0
  404c26:	f108 0501 	add.w	r5, r8, #1
  404c2a:	dd05      	ble.n	404c38 <_dtoa_r+0xb00>
  404c2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404c30:	d0ea      	beq.n	404c08 <_dtoa_r+0xad0>
  404c32:	f109 0901 	add.w	r9, r9, #1
  404c36:	e706      	b.n	404a46 <_dtoa_r+0x90e>
  404c38:	9b06      	ldr	r3, [sp, #24]
  404c3a:	9a04      	ldr	r2, [sp, #16]
  404c3c:	f805 9c01 	strb.w	r9, [r5, #-1]
  404c40:	1aeb      	subs	r3, r5, r3
  404c42:	4293      	cmp	r3, r2
  404c44:	46a8      	mov	r8, r5
  404c46:	d0a3      	beq.n	404b90 <_dtoa_r+0xa58>
  404c48:	4651      	mov	r1, sl
  404c4a:	2300      	movs	r3, #0
  404c4c:	220a      	movs	r2, #10
  404c4e:	4620      	mov	r0, r4
  404c50:	f000 fad9 	bl	405206 <__multadd>
  404c54:	9b07      	ldr	r3, [sp, #28]
  404c56:	9907      	ldr	r1, [sp, #28]
  404c58:	42bb      	cmp	r3, r7
  404c5a:	4682      	mov	sl, r0
  404c5c:	f04f 0300 	mov.w	r3, #0
  404c60:	f04f 020a 	mov.w	r2, #10
  404c64:	4620      	mov	r0, r4
  404c66:	d104      	bne.n	404c72 <_dtoa_r+0xb3a>
  404c68:	f000 facd 	bl	405206 <__multadd>
  404c6c:	9007      	str	r0, [sp, #28]
  404c6e:	4607      	mov	r7, r0
  404c70:	e6b0      	b.n	4049d4 <_dtoa_r+0x89c>
  404c72:	f000 fac8 	bl	405206 <__multadd>
  404c76:	2300      	movs	r3, #0
  404c78:	9007      	str	r0, [sp, #28]
  404c7a:	220a      	movs	r2, #10
  404c7c:	4639      	mov	r1, r7
  404c7e:	4620      	mov	r0, r4
  404c80:	f000 fac1 	bl	405206 <__multadd>
  404c84:	e7f3      	b.n	404c6e <_dtoa_r+0xb36>
  404c86:	4651      	mov	r1, sl
  404c88:	2300      	movs	r3, #0
  404c8a:	220a      	movs	r2, #10
  404c8c:	4620      	mov	r0, r4
  404c8e:	f000 faba 	bl	405206 <__multadd>
  404c92:	4682      	mov	sl, r0
  404c94:	e766      	b.n	404b64 <_dtoa_r+0xa2c>
  404c96:	9b06      	ldr	r3, [sp, #24]
  404c98:	4293      	cmp	r3, r2
  404c9a:	d105      	bne.n	404ca8 <_dtoa_r+0xb70>
  404c9c:	9a06      	ldr	r2, [sp, #24]
  404c9e:	f10b 0b01 	add.w	fp, fp, #1
  404ca2:	2331      	movs	r3, #49	; 0x31
  404ca4:	7013      	strb	r3, [r2, #0]
  404ca6:	e73c      	b.n	404b22 <_dtoa_r+0x9ea>
  404ca8:	4615      	mov	r5, r2
  404caa:	e7b3      	b.n	404c14 <_dtoa_r+0xadc>
  404cac:	4b09      	ldr	r3, [pc, #36]	; (404cd4 <_dtoa_r+0xb9c>)
  404cae:	f7ff baa5 	b.w	4041fc <_dtoa_r+0xc4>
  404cb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404cb4:	2b00      	cmp	r3, #0
  404cb6:	f47f aa7f 	bne.w	4041b8 <_dtoa_r+0x80>
  404cba:	4b07      	ldr	r3, [pc, #28]	; (404cd8 <_dtoa_r+0xba0>)
  404cbc:	f7ff ba9e 	b.w	4041fc <_dtoa_r+0xc4>
  404cc0:	9b04      	ldr	r3, [sp, #16]
  404cc2:	2b00      	cmp	r3, #0
  404cc4:	f73f af4d 	bgt.w	404b62 <_dtoa_r+0xa2a>
  404cc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404cca:	2b02      	cmp	r3, #2
  404ccc:	f77f af49 	ble.w	404b62 <_dtoa_r+0xa2a>
  404cd0:	e712      	b.n	404af8 <_dtoa_r+0x9c0>
  404cd2:	bf00      	nop
  404cd4:	0040629c 	.word	0x0040629c
  404cd8:	004062c0 	.word	0x004062c0

00404cdc <__sflush_r>:
  404cdc:	898a      	ldrh	r2, [r1, #12]
  404cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ce2:	4605      	mov	r5, r0
  404ce4:	0710      	lsls	r0, r2, #28
  404ce6:	460c      	mov	r4, r1
  404ce8:	d45a      	bmi.n	404da0 <__sflush_r+0xc4>
  404cea:	684b      	ldr	r3, [r1, #4]
  404cec:	2b00      	cmp	r3, #0
  404cee:	dc05      	bgt.n	404cfc <__sflush_r+0x20>
  404cf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  404cf2:	2b00      	cmp	r3, #0
  404cf4:	dc02      	bgt.n	404cfc <__sflush_r+0x20>
  404cf6:	2000      	movs	r0, #0
  404cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404cfe:	2e00      	cmp	r6, #0
  404d00:	d0f9      	beq.n	404cf6 <__sflush_r+0x1a>
  404d02:	2300      	movs	r3, #0
  404d04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  404d08:	682f      	ldr	r7, [r5, #0]
  404d0a:	602b      	str	r3, [r5, #0]
  404d0c:	d033      	beq.n	404d76 <__sflush_r+0x9a>
  404d0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  404d10:	89a3      	ldrh	r3, [r4, #12]
  404d12:	075a      	lsls	r2, r3, #29
  404d14:	d505      	bpl.n	404d22 <__sflush_r+0x46>
  404d16:	6863      	ldr	r3, [r4, #4]
  404d18:	1ac0      	subs	r0, r0, r3
  404d1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  404d1c:	b10b      	cbz	r3, 404d22 <__sflush_r+0x46>
  404d1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  404d20:	1ac0      	subs	r0, r0, r3
  404d22:	2300      	movs	r3, #0
  404d24:	4602      	mov	r2, r0
  404d26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404d28:	6a21      	ldr	r1, [r4, #32]
  404d2a:	4628      	mov	r0, r5
  404d2c:	47b0      	blx	r6
  404d2e:	1c43      	adds	r3, r0, #1
  404d30:	89a3      	ldrh	r3, [r4, #12]
  404d32:	d106      	bne.n	404d42 <__sflush_r+0x66>
  404d34:	6829      	ldr	r1, [r5, #0]
  404d36:	291d      	cmp	r1, #29
  404d38:	d84b      	bhi.n	404dd2 <__sflush_r+0xf6>
  404d3a:	4a2b      	ldr	r2, [pc, #172]	; (404de8 <__sflush_r+0x10c>)
  404d3c:	40ca      	lsrs	r2, r1
  404d3e:	07d6      	lsls	r6, r2, #31
  404d40:	d547      	bpl.n	404dd2 <__sflush_r+0xf6>
  404d42:	2200      	movs	r2, #0
  404d44:	6062      	str	r2, [r4, #4]
  404d46:	04d9      	lsls	r1, r3, #19
  404d48:	6922      	ldr	r2, [r4, #16]
  404d4a:	6022      	str	r2, [r4, #0]
  404d4c:	d504      	bpl.n	404d58 <__sflush_r+0x7c>
  404d4e:	1c42      	adds	r2, r0, #1
  404d50:	d101      	bne.n	404d56 <__sflush_r+0x7a>
  404d52:	682b      	ldr	r3, [r5, #0]
  404d54:	b903      	cbnz	r3, 404d58 <__sflush_r+0x7c>
  404d56:	6560      	str	r0, [r4, #84]	; 0x54
  404d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
  404d5a:	602f      	str	r7, [r5, #0]
  404d5c:	2900      	cmp	r1, #0
  404d5e:	d0ca      	beq.n	404cf6 <__sflush_r+0x1a>
  404d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404d64:	4299      	cmp	r1, r3
  404d66:	d002      	beq.n	404d6e <__sflush_r+0x92>
  404d68:	4628      	mov	r0, r5
  404d6a:	f000 fcdf 	bl	40572c <_free_r>
  404d6e:	2000      	movs	r0, #0
  404d70:	6360      	str	r0, [r4, #52]	; 0x34
  404d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d76:	6a21      	ldr	r1, [r4, #32]
  404d78:	2301      	movs	r3, #1
  404d7a:	4628      	mov	r0, r5
  404d7c:	47b0      	blx	r6
  404d7e:	1c41      	adds	r1, r0, #1
  404d80:	d1c6      	bne.n	404d10 <__sflush_r+0x34>
  404d82:	682b      	ldr	r3, [r5, #0]
  404d84:	2b00      	cmp	r3, #0
  404d86:	d0c3      	beq.n	404d10 <__sflush_r+0x34>
  404d88:	2b1d      	cmp	r3, #29
  404d8a:	d001      	beq.n	404d90 <__sflush_r+0xb4>
  404d8c:	2b16      	cmp	r3, #22
  404d8e:	d101      	bne.n	404d94 <__sflush_r+0xb8>
  404d90:	602f      	str	r7, [r5, #0]
  404d92:	e7b0      	b.n	404cf6 <__sflush_r+0x1a>
  404d94:	89a3      	ldrh	r3, [r4, #12]
  404d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404d9a:	81a3      	strh	r3, [r4, #12]
  404d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404da0:	690f      	ldr	r7, [r1, #16]
  404da2:	2f00      	cmp	r7, #0
  404da4:	d0a7      	beq.n	404cf6 <__sflush_r+0x1a>
  404da6:	0793      	lsls	r3, r2, #30
  404da8:	680e      	ldr	r6, [r1, #0]
  404daa:	bf08      	it	eq
  404dac:	694b      	ldreq	r3, [r1, #20]
  404dae:	600f      	str	r7, [r1, #0]
  404db0:	bf18      	it	ne
  404db2:	2300      	movne	r3, #0
  404db4:	eba6 0807 	sub.w	r8, r6, r7
  404db8:	608b      	str	r3, [r1, #8]
  404dba:	f1b8 0f00 	cmp.w	r8, #0
  404dbe:	dd9a      	ble.n	404cf6 <__sflush_r+0x1a>
  404dc0:	4643      	mov	r3, r8
  404dc2:	463a      	mov	r2, r7
  404dc4:	6a21      	ldr	r1, [r4, #32]
  404dc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  404dc8:	4628      	mov	r0, r5
  404dca:	47b0      	blx	r6
  404dcc:	2800      	cmp	r0, #0
  404dce:	dc07      	bgt.n	404de0 <__sflush_r+0x104>
  404dd0:	89a3      	ldrh	r3, [r4, #12]
  404dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404dd6:	81a3      	strh	r3, [r4, #12]
  404dd8:	f04f 30ff 	mov.w	r0, #4294967295
  404ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404de0:	4407      	add	r7, r0
  404de2:	eba8 0800 	sub.w	r8, r8, r0
  404de6:	e7e8      	b.n	404dba <__sflush_r+0xde>
  404de8:	20400001 	.word	0x20400001

00404dec <_fflush_r>:
  404dec:	b538      	push	{r3, r4, r5, lr}
  404dee:	690b      	ldr	r3, [r1, #16]
  404df0:	4605      	mov	r5, r0
  404df2:	460c      	mov	r4, r1
  404df4:	b1db      	cbz	r3, 404e2e <_fflush_r+0x42>
  404df6:	b118      	cbz	r0, 404e00 <_fflush_r+0x14>
  404df8:	6983      	ldr	r3, [r0, #24]
  404dfa:	b90b      	cbnz	r3, 404e00 <_fflush_r+0x14>
  404dfc:	f000 f860 	bl	404ec0 <__sinit>
  404e00:	4b0c      	ldr	r3, [pc, #48]	; (404e34 <_fflush_r+0x48>)
  404e02:	429c      	cmp	r4, r3
  404e04:	d109      	bne.n	404e1a <_fflush_r+0x2e>
  404e06:	686c      	ldr	r4, [r5, #4]
  404e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e0c:	b17b      	cbz	r3, 404e2e <_fflush_r+0x42>
  404e0e:	4621      	mov	r1, r4
  404e10:	4628      	mov	r0, r5
  404e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404e16:	f7ff bf61 	b.w	404cdc <__sflush_r>
  404e1a:	4b07      	ldr	r3, [pc, #28]	; (404e38 <_fflush_r+0x4c>)
  404e1c:	429c      	cmp	r4, r3
  404e1e:	d101      	bne.n	404e24 <_fflush_r+0x38>
  404e20:	68ac      	ldr	r4, [r5, #8]
  404e22:	e7f1      	b.n	404e08 <_fflush_r+0x1c>
  404e24:	4b05      	ldr	r3, [pc, #20]	; (404e3c <_fflush_r+0x50>)
  404e26:	429c      	cmp	r4, r3
  404e28:	bf08      	it	eq
  404e2a:	68ec      	ldreq	r4, [r5, #12]
  404e2c:	e7ec      	b.n	404e08 <_fflush_r+0x1c>
  404e2e:	2000      	movs	r0, #0
  404e30:	bd38      	pop	{r3, r4, r5, pc}
  404e32:	bf00      	nop
  404e34:	004062f0 	.word	0x004062f0
  404e38:	00406310 	.word	0x00406310
  404e3c:	004062d0 	.word	0x004062d0

00404e40 <_cleanup_r>:
  404e40:	4901      	ldr	r1, [pc, #4]	; (404e48 <_cleanup_r+0x8>)
  404e42:	f000 b8a9 	b.w	404f98 <_fwalk_reent>
  404e46:	bf00      	nop
  404e48:	00404ded 	.word	0x00404ded

00404e4c <std.isra.0>:
  404e4c:	2300      	movs	r3, #0
  404e4e:	b510      	push	{r4, lr}
  404e50:	4604      	mov	r4, r0
  404e52:	6003      	str	r3, [r0, #0]
  404e54:	6043      	str	r3, [r0, #4]
  404e56:	6083      	str	r3, [r0, #8]
  404e58:	8181      	strh	r1, [r0, #12]
  404e5a:	6643      	str	r3, [r0, #100]	; 0x64
  404e5c:	81c2      	strh	r2, [r0, #14]
  404e5e:	6103      	str	r3, [r0, #16]
  404e60:	6143      	str	r3, [r0, #20]
  404e62:	6183      	str	r3, [r0, #24]
  404e64:	4619      	mov	r1, r3
  404e66:	2208      	movs	r2, #8
  404e68:	305c      	adds	r0, #92	; 0x5c
  404e6a:	f7fe fb9c 	bl	4035a6 <memset>
  404e6e:	4b05      	ldr	r3, [pc, #20]	; (404e84 <std.isra.0+0x38>)
  404e70:	6263      	str	r3, [r4, #36]	; 0x24
  404e72:	4b05      	ldr	r3, [pc, #20]	; (404e88 <std.isra.0+0x3c>)
  404e74:	62a3      	str	r3, [r4, #40]	; 0x28
  404e76:	4b05      	ldr	r3, [pc, #20]	; (404e8c <std.isra.0+0x40>)
  404e78:	62e3      	str	r3, [r4, #44]	; 0x2c
  404e7a:	4b05      	ldr	r3, [pc, #20]	; (404e90 <std.isra.0+0x44>)
  404e7c:	6224      	str	r4, [r4, #32]
  404e7e:	6323      	str	r3, [r4, #48]	; 0x30
  404e80:	bd10      	pop	{r4, pc}
  404e82:	bf00      	nop
  404e84:	00405b21 	.word	0x00405b21
  404e88:	00405b43 	.word	0x00405b43
  404e8c:	00405b7b 	.word	0x00405b7b
  404e90:	00405b9f 	.word	0x00405b9f

00404e94 <__sfmoreglue>:
  404e94:	b570      	push	{r4, r5, r6, lr}
  404e96:	1e4a      	subs	r2, r1, #1
  404e98:	2568      	movs	r5, #104	; 0x68
  404e9a:	4355      	muls	r5, r2
  404e9c:	460e      	mov	r6, r1
  404e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  404ea2:	f000 fc91 	bl	4057c8 <_malloc_r>
  404ea6:	4604      	mov	r4, r0
  404ea8:	b140      	cbz	r0, 404ebc <__sfmoreglue+0x28>
  404eaa:	2100      	movs	r1, #0
  404eac:	e880 0042 	stmia.w	r0, {r1, r6}
  404eb0:	300c      	adds	r0, #12
  404eb2:	60a0      	str	r0, [r4, #8]
  404eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404eb8:	f7fe fb75 	bl	4035a6 <memset>
  404ebc:	4620      	mov	r0, r4
  404ebe:	bd70      	pop	{r4, r5, r6, pc}

00404ec0 <__sinit>:
  404ec0:	6983      	ldr	r3, [r0, #24]
  404ec2:	b510      	push	{r4, lr}
  404ec4:	4604      	mov	r4, r0
  404ec6:	bb33      	cbnz	r3, 404f16 <__sinit+0x56>
  404ec8:	6483      	str	r3, [r0, #72]	; 0x48
  404eca:	64c3      	str	r3, [r0, #76]	; 0x4c
  404ecc:	6503      	str	r3, [r0, #80]	; 0x50
  404ece:	4b12      	ldr	r3, [pc, #72]	; (404f18 <__sinit+0x58>)
  404ed0:	4a12      	ldr	r2, [pc, #72]	; (404f1c <__sinit+0x5c>)
  404ed2:	681b      	ldr	r3, [r3, #0]
  404ed4:	6282      	str	r2, [r0, #40]	; 0x28
  404ed6:	4298      	cmp	r0, r3
  404ed8:	bf04      	itt	eq
  404eda:	2301      	moveq	r3, #1
  404edc:	6183      	streq	r3, [r0, #24]
  404ede:	f000 f81f 	bl	404f20 <__sfp>
  404ee2:	6060      	str	r0, [r4, #4]
  404ee4:	4620      	mov	r0, r4
  404ee6:	f000 f81b 	bl	404f20 <__sfp>
  404eea:	60a0      	str	r0, [r4, #8]
  404eec:	4620      	mov	r0, r4
  404eee:	f000 f817 	bl	404f20 <__sfp>
  404ef2:	2200      	movs	r2, #0
  404ef4:	60e0      	str	r0, [r4, #12]
  404ef6:	2104      	movs	r1, #4
  404ef8:	6860      	ldr	r0, [r4, #4]
  404efa:	f7ff ffa7 	bl	404e4c <std.isra.0>
  404efe:	2201      	movs	r2, #1
  404f00:	2109      	movs	r1, #9
  404f02:	68a0      	ldr	r0, [r4, #8]
  404f04:	f7ff ffa2 	bl	404e4c <std.isra.0>
  404f08:	2202      	movs	r2, #2
  404f0a:	2112      	movs	r1, #18
  404f0c:	68e0      	ldr	r0, [r4, #12]
  404f0e:	f7ff ff9d 	bl	404e4c <std.isra.0>
  404f12:	2301      	movs	r3, #1
  404f14:	61a3      	str	r3, [r4, #24]
  404f16:	bd10      	pop	{r4, pc}
  404f18:	00406288 	.word	0x00406288
  404f1c:	00404e41 	.word	0x00404e41

00404f20 <__sfp>:
  404f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404f22:	4b1c      	ldr	r3, [pc, #112]	; (404f94 <__sfp+0x74>)
  404f24:	681e      	ldr	r6, [r3, #0]
  404f26:	69b3      	ldr	r3, [r6, #24]
  404f28:	4607      	mov	r7, r0
  404f2a:	b913      	cbnz	r3, 404f32 <__sfp+0x12>
  404f2c:	4630      	mov	r0, r6
  404f2e:	f7ff ffc7 	bl	404ec0 <__sinit>
  404f32:	3648      	adds	r6, #72	; 0x48
  404f34:	68b4      	ldr	r4, [r6, #8]
  404f36:	6873      	ldr	r3, [r6, #4]
  404f38:	3b01      	subs	r3, #1
  404f3a:	d503      	bpl.n	404f44 <__sfp+0x24>
  404f3c:	6833      	ldr	r3, [r6, #0]
  404f3e:	b133      	cbz	r3, 404f4e <__sfp+0x2e>
  404f40:	6836      	ldr	r6, [r6, #0]
  404f42:	e7f7      	b.n	404f34 <__sfp+0x14>
  404f44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  404f48:	b16d      	cbz	r5, 404f66 <__sfp+0x46>
  404f4a:	3468      	adds	r4, #104	; 0x68
  404f4c:	e7f4      	b.n	404f38 <__sfp+0x18>
  404f4e:	2104      	movs	r1, #4
  404f50:	4638      	mov	r0, r7
  404f52:	f7ff ff9f 	bl	404e94 <__sfmoreglue>
  404f56:	6030      	str	r0, [r6, #0]
  404f58:	2800      	cmp	r0, #0
  404f5a:	d1f1      	bne.n	404f40 <__sfp+0x20>
  404f5c:	230c      	movs	r3, #12
  404f5e:	603b      	str	r3, [r7, #0]
  404f60:	4604      	mov	r4, r0
  404f62:	4620      	mov	r0, r4
  404f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f66:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404f6a:	81e3      	strh	r3, [r4, #14]
  404f6c:	2301      	movs	r3, #1
  404f6e:	81a3      	strh	r3, [r4, #12]
  404f70:	6665      	str	r5, [r4, #100]	; 0x64
  404f72:	6025      	str	r5, [r4, #0]
  404f74:	60a5      	str	r5, [r4, #8]
  404f76:	6065      	str	r5, [r4, #4]
  404f78:	6125      	str	r5, [r4, #16]
  404f7a:	6165      	str	r5, [r4, #20]
  404f7c:	61a5      	str	r5, [r4, #24]
  404f7e:	2208      	movs	r2, #8
  404f80:	4629      	mov	r1, r5
  404f82:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  404f86:	f7fe fb0e 	bl	4035a6 <memset>
  404f8a:	6365      	str	r5, [r4, #52]	; 0x34
  404f8c:	63a5      	str	r5, [r4, #56]	; 0x38
  404f8e:	64a5      	str	r5, [r4, #72]	; 0x48
  404f90:	64e5      	str	r5, [r4, #76]	; 0x4c
  404f92:	e7e6      	b.n	404f62 <__sfp+0x42>
  404f94:	00406288 	.word	0x00406288

00404f98 <_fwalk_reent>:
  404f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404f9c:	4680      	mov	r8, r0
  404f9e:	4689      	mov	r9, r1
  404fa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
  404fa4:	2600      	movs	r6, #0
  404fa6:	b914      	cbnz	r4, 404fae <_fwalk_reent+0x16>
  404fa8:	4630      	mov	r0, r6
  404faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404fae:	68a5      	ldr	r5, [r4, #8]
  404fb0:	6867      	ldr	r7, [r4, #4]
  404fb2:	3f01      	subs	r7, #1
  404fb4:	d501      	bpl.n	404fba <_fwalk_reent+0x22>
  404fb6:	6824      	ldr	r4, [r4, #0]
  404fb8:	e7f5      	b.n	404fa6 <_fwalk_reent+0xe>
  404fba:	89ab      	ldrh	r3, [r5, #12]
  404fbc:	2b01      	cmp	r3, #1
  404fbe:	d907      	bls.n	404fd0 <_fwalk_reent+0x38>
  404fc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  404fc4:	3301      	adds	r3, #1
  404fc6:	d003      	beq.n	404fd0 <_fwalk_reent+0x38>
  404fc8:	4629      	mov	r1, r5
  404fca:	4640      	mov	r0, r8
  404fcc:	47c8      	blx	r9
  404fce:	4306      	orrs	r6, r0
  404fd0:	3568      	adds	r5, #104	; 0x68
  404fd2:	e7ee      	b.n	404fb2 <_fwalk_reent+0x1a>

00404fd4 <_localeconv_r>:
  404fd4:	4b04      	ldr	r3, [pc, #16]	; (404fe8 <_localeconv_r+0x14>)
  404fd6:	681b      	ldr	r3, [r3, #0]
  404fd8:	6a18      	ldr	r0, [r3, #32]
  404fda:	4b04      	ldr	r3, [pc, #16]	; (404fec <_localeconv_r+0x18>)
  404fdc:	2800      	cmp	r0, #0
  404fde:	bf08      	it	eq
  404fe0:	4618      	moveq	r0, r3
  404fe2:	30f0      	adds	r0, #240	; 0xf0
  404fe4:	4770      	bx	lr
  404fe6:	bf00      	nop
  404fe8:	20400048 	.word	0x20400048
  404fec:	204000ac 	.word	0x204000ac

00404ff0 <__swhatbuf_r>:
  404ff0:	b570      	push	{r4, r5, r6, lr}
  404ff2:	460e      	mov	r6, r1
  404ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404ff8:	2900      	cmp	r1, #0
  404ffa:	b090      	sub	sp, #64	; 0x40
  404ffc:	4614      	mov	r4, r2
  404ffe:	461d      	mov	r5, r3
  405000:	da07      	bge.n	405012 <__swhatbuf_r+0x22>
  405002:	2300      	movs	r3, #0
  405004:	602b      	str	r3, [r5, #0]
  405006:	89b3      	ldrh	r3, [r6, #12]
  405008:	061a      	lsls	r2, r3, #24
  40500a:	d410      	bmi.n	40502e <__swhatbuf_r+0x3e>
  40500c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405010:	e00e      	b.n	405030 <__swhatbuf_r+0x40>
  405012:	aa01      	add	r2, sp, #4
  405014:	f000 feaa 	bl	405d6c <_fstat_r>
  405018:	2800      	cmp	r0, #0
  40501a:	dbf2      	blt.n	405002 <__swhatbuf_r+0x12>
  40501c:	9a02      	ldr	r2, [sp, #8]
  40501e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405022:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  405026:	425a      	negs	r2, r3
  405028:	415a      	adcs	r2, r3
  40502a:	602a      	str	r2, [r5, #0]
  40502c:	e7ee      	b.n	40500c <__swhatbuf_r+0x1c>
  40502e:	2340      	movs	r3, #64	; 0x40
  405030:	2000      	movs	r0, #0
  405032:	6023      	str	r3, [r4, #0]
  405034:	b010      	add	sp, #64	; 0x40
  405036:	bd70      	pop	{r4, r5, r6, pc}

00405038 <__smakebuf_r>:
  405038:	898b      	ldrh	r3, [r1, #12]
  40503a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  40503c:	079d      	lsls	r5, r3, #30
  40503e:	4606      	mov	r6, r0
  405040:	460c      	mov	r4, r1
  405042:	d507      	bpl.n	405054 <__smakebuf_r+0x1c>
  405044:	f104 0347 	add.w	r3, r4, #71	; 0x47
  405048:	6023      	str	r3, [r4, #0]
  40504a:	6123      	str	r3, [r4, #16]
  40504c:	2301      	movs	r3, #1
  40504e:	6163      	str	r3, [r4, #20]
  405050:	b002      	add	sp, #8
  405052:	bd70      	pop	{r4, r5, r6, pc}
  405054:	ab01      	add	r3, sp, #4
  405056:	466a      	mov	r2, sp
  405058:	f7ff ffca 	bl	404ff0 <__swhatbuf_r>
  40505c:	9900      	ldr	r1, [sp, #0]
  40505e:	4605      	mov	r5, r0
  405060:	4630      	mov	r0, r6
  405062:	f000 fbb1 	bl	4057c8 <_malloc_r>
  405066:	b948      	cbnz	r0, 40507c <__smakebuf_r+0x44>
  405068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40506c:	059a      	lsls	r2, r3, #22
  40506e:	d4ef      	bmi.n	405050 <__smakebuf_r+0x18>
  405070:	f023 0303 	bic.w	r3, r3, #3
  405074:	f043 0302 	orr.w	r3, r3, #2
  405078:	81a3      	strh	r3, [r4, #12]
  40507a:	e7e3      	b.n	405044 <__smakebuf_r+0xc>
  40507c:	4b0d      	ldr	r3, [pc, #52]	; (4050b4 <__smakebuf_r+0x7c>)
  40507e:	62b3      	str	r3, [r6, #40]	; 0x28
  405080:	89a3      	ldrh	r3, [r4, #12]
  405082:	6020      	str	r0, [r4, #0]
  405084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405088:	81a3      	strh	r3, [r4, #12]
  40508a:	9b00      	ldr	r3, [sp, #0]
  40508c:	6163      	str	r3, [r4, #20]
  40508e:	9b01      	ldr	r3, [sp, #4]
  405090:	6120      	str	r0, [r4, #16]
  405092:	b15b      	cbz	r3, 4050ac <__smakebuf_r+0x74>
  405094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405098:	4630      	mov	r0, r6
  40509a:	f000 fe79 	bl	405d90 <_isatty_r>
  40509e:	b128      	cbz	r0, 4050ac <__smakebuf_r+0x74>
  4050a0:	89a3      	ldrh	r3, [r4, #12]
  4050a2:	f023 0303 	bic.w	r3, r3, #3
  4050a6:	f043 0301 	orr.w	r3, r3, #1
  4050aa:	81a3      	strh	r3, [r4, #12]
  4050ac:	89a3      	ldrh	r3, [r4, #12]
  4050ae:	431d      	orrs	r5, r3
  4050b0:	81a5      	strh	r5, [r4, #12]
  4050b2:	e7cd      	b.n	405050 <__smakebuf_r+0x18>
  4050b4:	00404e41 	.word	0x00404e41

004050b8 <malloc>:
  4050b8:	4b02      	ldr	r3, [pc, #8]	; (4050c4 <malloc+0xc>)
  4050ba:	4601      	mov	r1, r0
  4050bc:	6818      	ldr	r0, [r3, #0]
  4050be:	f000 bb83 	b.w	4057c8 <_malloc_r>
  4050c2:	bf00      	nop
  4050c4:	20400048 	.word	0x20400048
	...

004050d0 <memchr>:
  4050d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4050d4:	2a10      	cmp	r2, #16
  4050d6:	db2b      	blt.n	405130 <memchr+0x60>
  4050d8:	f010 0f07 	tst.w	r0, #7
  4050dc:	d008      	beq.n	4050f0 <memchr+0x20>
  4050de:	f810 3b01 	ldrb.w	r3, [r0], #1
  4050e2:	3a01      	subs	r2, #1
  4050e4:	428b      	cmp	r3, r1
  4050e6:	d02d      	beq.n	405144 <memchr+0x74>
  4050e8:	f010 0f07 	tst.w	r0, #7
  4050ec:	b342      	cbz	r2, 405140 <memchr+0x70>
  4050ee:	d1f6      	bne.n	4050de <memchr+0xe>
  4050f0:	b4f0      	push	{r4, r5, r6, r7}
  4050f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4050f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4050fa:	f022 0407 	bic.w	r4, r2, #7
  4050fe:	f07f 0700 	mvns.w	r7, #0
  405102:	2300      	movs	r3, #0
  405104:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405108:	3c08      	subs	r4, #8
  40510a:	ea85 0501 	eor.w	r5, r5, r1
  40510e:	ea86 0601 	eor.w	r6, r6, r1
  405112:	fa85 f547 	uadd8	r5, r5, r7
  405116:	faa3 f587 	sel	r5, r3, r7
  40511a:	fa86 f647 	uadd8	r6, r6, r7
  40511e:	faa5 f687 	sel	r6, r5, r7
  405122:	b98e      	cbnz	r6, 405148 <memchr+0x78>
  405124:	d1ee      	bne.n	405104 <memchr+0x34>
  405126:	bcf0      	pop	{r4, r5, r6, r7}
  405128:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40512c:	f002 0207 	and.w	r2, r2, #7
  405130:	b132      	cbz	r2, 405140 <memchr+0x70>
  405132:	f810 3b01 	ldrb.w	r3, [r0], #1
  405136:	3a01      	subs	r2, #1
  405138:	ea83 0301 	eor.w	r3, r3, r1
  40513c:	b113      	cbz	r3, 405144 <memchr+0x74>
  40513e:	d1f8      	bne.n	405132 <memchr+0x62>
  405140:	2000      	movs	r0, #0
  405142:	4770      	bx	lr
  405144:	3801      	subs	r0, #1
  405146:	4770      	bx	lr
  405148:	2d00      	cmp	r5, #0
  40514a:	bf06      	itte	eq
  40514c:	4635      	moveq	r5, r6
  40514e:	3803      	subeq	r0, #3
  405150:	3807      	subne	r0, #7
  405152:	f015 0f01 	tst.w	r5, #1
  405156:	d107      	bne.n	405168 <memchr+0x98>
  405158:	3001      	adds	r0, #1
  40515a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40515e:	bf02      	ittt	eq
  405160:	3001      	addeq	r0, #1
  405162:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405166:	3001      	addeq	r0, #1
  405168:	bcf0      	pop	{r4, r5, r6, r7}
  40516a:	3801      	subs	r0, #1
  40516c:	4770      	bx	lr
  40516e:	bf00      	nop

00405170 <_Balloc>:
  405170:	b570      	push	{r4, r5, r6, lr}
  405172:	6a45      	ldr	r5, [r0, #36]	; 0x24
  405174:	4604      	mov	r4, r0
  405176:	460e      	mov	r6, r1
  405178:	b93d      	cbnz	r5, 40518a <_Balloc+0x1a>
  40517a:	2010      	movs	r0, #16
  40517c:	f7ff ff9c 	bl	4050b8 <malloc>
  405180:	6260      	str	r0, [r4, #36]	; 0x24
  405182:	6045      	str	r5, [r0, #4]
  405184:	6085      	str	r5, [r0, #8]
  405186:	6005      	str	r5, [r0, #0]
  405188:	60c5      	str	r5, [r0, #12]
  40518a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40518c:	68eb      	ldr	r3, [r5, #12]
  40518e:	b183      	cbz	r3, 4051b2 <_Balloc+0x42>
  405190:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405192:	68db      	ldr	r3, [r3, #12]
  405194:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  405198:	b9b8      	cbnz	r0, 4051ca <_Balloc+0x5a>
  40519a:	2101      	movs	r1, #1
  40519c:	fa01 f506 	lsl.w	r5, r1, r6
  4051a0:	1d6a      	adds	r2, r5, #5
  4051a2:	0092      	lsls	r2, r2, #2
  4051a4:	4620      	mov	r0, r4
  4051a6:	f000 fab3 	bl	405710 <_calloc_r>
  4051aa:	b160      	cbz	r0, 4051c6 <_Balloc+0x56>
  4051ac:	6046      	str	r6, [r0, #4]
  4051ae:	6085      	str	r5, [r0, #8]
  4051b0:	e00e      	b.n	4051d0 <_Balloc+0x60>
  4051b2:	2221      	movs	r2, #33	; 0x21
  4051b4:	2104      	movs	r1, #4
  4051b6:	4620      	mov	r0, r4
  4051b8:	f000 faaa 	bl	405710 <_calloc_r>
  4051bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4051be:	60e8      	str	r0, [r5, #12]
  4051c0:	68db      	ldr	r3, [r3, #12]
  4051c2:	2b00      	cmp	r3, #0
  4051c4:	d1e4      	bne.n	405190 <_Balloc+0x20>
  4051c6:	2000      	movs	r0, #0
  4051c8:	bd70      	pop	{r4, r5, r6, pc}
  4051ca:	6802      	ldr	r2, [r0, #0]
  4051cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  4051d0:	2300      	movs	r3, #0
  4051d2:	6103      	str	r3, [r0, #16]
  4051d4:	60c3      	str	r3, [r0, #12]
  4051d6:	bd70      	pop	{r4, r5, r6, pc}

004051d8 <_Bfree>:
  4051d8:	b570      	push	{r4, r5, r6, lr}
  4051da:	6a44      	ldr	r4, [r0, #36]	; 0x24
  4051dc:	4606      	mov	r6, r0
  4051de:	460d      	mov	r5, r1
  4051e0:	b93c      	cbnz	r4, 4051f2 <_Bfree+0x1a>
  4051e2:	2010      	movs	r0, #16
  4051e4:	f7ff ff68 	bl	4050b8 <malloc>
  4051e8:	6270      	str	r0, [r6, #36]	; 0x24
  4051ea:	6044      	str	r4, [r0, #4]
  4051ec:	6084      	str	r4, [r0, #8]
  4051ee:	6004      	str	r4, [r0, #0]
  4051f0:	60c4      	str	r4, [r0, #12]
  4051f2:	b13d      	cbz	r5, 405204 <_Bfree+0x2c>
  4051f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4051f6:	686a      	ldr	r2, [r5, #4]
  4051f8:	68db      	ldr	r3, [r3, #12]
  4051fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4051fe:	6029      	str	r1, [r5, #0]
  405200:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  405204:	bd70      	pop	{r4, r5, r6, pc}

00405206 <__multadd>:
  405206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40520a:	690d      	ldr	r5, [r1, #16]
  40520c:	461f      	mov	r7, r3
  40520e:	4606      	mov	r6, r0
  405210:	460c      	mov	r4, r1
  405212:	f101 0e14 	add.w	lr, r1, #20
  405216:	2300      	movs	r3, #0
  405218:	f8de 0000 	ldr.w	r0, [lr]
  40521c:	b281      	uxth	r1, r0
  40521e:	fb02 7101 	mla	r1, r2, r1, r7
  405222:	0c0f      	lsrs	r7, r1, #16
  405224:	0c00      	lsrs	r0, r0, #16
  405226:	fb02 7000 	mla	r0, r2, r0, r7
  40522a:	b289      	uxth	r1, r1
  40522c:	3301      	adds	r3, #1
  40522e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  405232:	429d      	cmp	r5, r3
  405234:	ea4f 4710 	mov.w	r7, r0, lsr #16
  405238:	f84e 1b04 	str.w	r1, [lr], #4
  40523c:	dcec      	bgt.n	405218 <__multadd+0x12>
  40523e:	b1d7      	cbz	r7, 405276 <__multadd+0x70>
  405240:	68a3      	ldr	r3, [r4, #8]
  405242:	429d      	cmp	r5, r3
  405244:	db12      	blt.n	40526c <__multadd+0x66>
  405246:	6861      	ldr	r1, [r4, #4]
  405248:	4630      	mov	r0, r6
  40524a:	3101      	adds	r1, #1
  40524c:	f7ff ff90 	bl	405170 <_Balloc>
  405250:	6922      	ldr	r2, [r4, #16]
  405252:	3202      	adds	r2, #2
  405254:	f104 010c 	add.w	r1, r4, #12
  405258:	4680      	mov	r8, r0
  40525a:	0092      	lsls	r2, r2, #2
  40525c:	300c      	adds	r0, #12
  40525e:	f7fe f997 	bl	403590 <memcpy>
  405262:	4621      	mov	r1, r4
  405264:	4630      	mov	r0, r6
  405266:	f7ff ffb7 	bl	4051d8 <_Bfree>
  40526a:	4644      	mov	r4, r8
  40526c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  405270:	3501      	adds	r5, #1
  405272:	615f      	str	r7, [r3, #20]
  405274:	6125      	str	r5, [r4, #16]
  405276:	4620      	mov	r0, r4
  405278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040527c <__hi0bits>:
  40527c:	0c02      	lsrs	r2, r0, #16
  40527e:	0412      	lsls	r2, r2, #16
  405280:	4603      	mov	r3, r0
  405282:	b9b2      	cbnz	r2, 4052b2 <__hi0bits+0x36>
  405284:	0403      	lsls	r3, r0, #16
  405286:	2010      	movs	r0, #16
  405288:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40528c:	bf04      	itt	eq
  40528e:	021b      	lsleq	r3, r3, #8
  405290:	3008      	addeq	r0, #8
  405292:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405296:	bf04      	itt	eq
  405298:	011b      	lsleq	r3, r3, #4
  40529a:	3004      	addeq	r0, #4
  40529c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4052a0:	bf04      	itt	eq
  4052a2:	009b      	lsleq	r3, r3, #2
  4052a4:	3002      	addeq	r0, #2
  4052a6:	2b00      	cmp	r3, #0
  4052a8:	db06      	blt.n	4052b8 <__hi0bits+0x3c>
  4052aa:	005b      	lsls	r3, r3, #1
  4052ac:	d503      	bpl.n	4052b6 <__hi0bits+0x3a>
  4052ae:	3001      	adds	r0, #1
  4052b0:	4770      	bx	lr
  4052b2:	2000      	movs	r0, #0
  4052b4:	e7e8      	b.n	405288 <__hi0bits+0xc>
  4052b6:	2020      	movs	r0, #32
  4052b8:	4770      	bx	lr

004052ba <__lo0bits>:
  4052ba:	6803      	ldr	r3, [r0, #0]
  4052bc:	f013 0207 	ands.w	r2, r3, #7
  4052c0:	4601      	mov	r1, r0
  4052c2:	d00b      	beq.n	4052dc <__lo0bits+0x22>
  4052c4:	07da      	lsls	r2, r3, #31
  4052c6:	d423      	bmi.n	405310 <__lo0bits+0x56>
  4052c8:	0798      	lsls	r0, r3, #30
  4052ca:	bf49      	itett	mi
  4052cc:	085b      	lsrmi	r3, r3, #1
  4052ce:	089b      	lsrpl	r3, r3, #2
  4052d0:	2001      	movmi	r0, #1
  4052d2:	600b      	strmi	r3, [r1, #0]
  4052d4:	bf5c      	itt	pl
  4052d6:	600b      	strpl	r3, [r1, #0]
  4052d8:	2002      	movpl	r0, #2
  4052da:	4770      	bx	lr
  4052dc:	b298      	uxth	r0, r3
  4052de:	b9a8      	cbnz	r0, 40530c <__lo0bits+0x52>
  4052e0:	0c1b      	lsrs	r3, r3, #16
  4052e2:	2010      	movs	r0, #16
  4052e4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4052e8:	bf04      	itt	eq
  4052ea:	0a1b      	lsreq	r3, r3, #8
  4052ec:	3008      	addeq	r0, #8
  4052ee:	071a      	lsls	r2, r3, #28
  4052f0:	bf04      	itt	eq
  4052f2:	091b      	lsreq	r3, r3, #4
  4052f4:	3004      	addeq	r0, #4
  4052f6:	079a      	lsls	r2, r3, #30
  4052f8:	bf04      	itt	eq
  4052fa:	089b      	lsreq	r3, r3, #2
  4052fc:	3002      	addeq	r0, #2
  4052fe:	07da      	lsls	r2, r3, #31
  405300:	d402      	bmi.n	405308 <__lo0bits+0x4e>
  405302:	085b      	lsrs	r3, r3, #1
  405304:	d006      	beq.n	405314 <__lo0bits+0x5a>
  405306:	3001      	adds	r0, #1
  405308:	600b      	str	r3, [r1, #0]
  40530a:	4770      	bx	lr
  40530c:	4610      	mov	r0, r2
  40530e:	e7e9      	b.n	4052e4 <__lo0bits+0x2a>
  405310:	2000      	movs	r0, #0
  405312:	4770      	bx	lr
  405314:	2020      	movs	r0, #32
  405316:	4770      	bx	lr

00405318 <__i2b>:
  405318:	b510      	push	{r4, lr}
  40531a:	460c      	mov	r4, r1
  40531c:	2101      	movs	r1, #1
  40531e:	f7ff ff27 	bl	405170 <_Balloc>
  405322:	2201      	movs	r2, #1
  405324:	6144      	str	r4, [r0, #20]
  405326:	6102      	str	r2, [r0, #16]
  405328:	bd10      	pop	{r4, pc}

0040532a <__multiply>:
  40532a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40532e:	4614      	mov	r4, r2
  405330:	690a      	ldr	r2, [r1, #16]
  405332:	6923      	ldr	r3, [r4, #16]
  405334:	429a      	cmp	r2, r3
  405336:	bfb8      	it	lt
  405338:	460b      	movlt	r3, r1
  40533a:	4689      	mov	r9, r1
  40533c:	bfbc      	itt	lt
  40533e:	46a1      	movlt	r9, r4
  405340:	461c      	movlt	r4, r3
  405342:	f8d9 7010 	ldr.w	r7, [r9, #16]
  405346:	f8d4 a010 	ldr.w	sl, [r4, #16]
  40534a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40534e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  405352:	eb07 060a 	add.w	r6, r7, sl
  405356:	429e      	cmp	r6, r3
  405358:	bfc8      	it	gt
  40535a:	3101      	addgt	r1, #1
  40535c:	f7ff ff08 	bl	405170 <_Balloc>
  405360:	f100 0514 	add.w	r5, r0, #20
  405364:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  405368:	462b      	mov	r3, r5
  40536a:	2200      	movs	r2, #0
  40536c:	4543      	cmp	r3, r8
  40536e:	d316      	bcc.n	40539e <__multiply+0x74>
  405370:	f104 0214 	add.w	r2, r4, #20
  405374:	f109 0114 	add.w	r1, r9, #20
  405378:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  40537c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  405380:	9301      	str	r3, [sp, #4]
  405382:	9c01      	ldr	r4, [sp, #4]
  405384:	4294      	cmp	r4, r2
  405386:	4613      	mov	r3, r2
  405388:	d80c      	bhi.n	4053a4 <__multiply+0x7a>
  40538a:	2e00      	cmp	r6, #0
  40538c:	dd03      	ble.n	405396 <__multiply+0x6c>
  40538e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  405392:	2b00      	cmp	r3, #0
  405394:	d054      	beq.n	405440 <__multiply+0x116>
  405396:	6106      	str	r6, [r0, #16]
  405398:	b003      	add	sp, #12
  40539a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40539e:	f843 2b04 	str.w	r2, [r3], #4
  4053a2:	e7e3      	b.n	40536c <__multiply+0x42>
  4053a4:	f8b3 a000 	ldrh.w	sl, [r3]
  4053a8:	3204      	adds	r2, #4
  4053aa:	f1ba 0f00 	cmp.w	sl, #0
  4053ae:	d020      	beq.n	4053f2 <__multiply+0xc8>
  4053b0:	46ae      	mov	lr, r5
  4053b2:	4689      	mov	r9, r1
  4053b4:	f04f 0c00 	mov.w	ip, #0
  4053b8:	f859 4b04 	ldr.w	r4, [r9], #4
  4053bc:	f8be b000 	ldrh.w	fp, [lr]
  4053c0:	b2a3      	uxth	r3, r4
  4053c2:	fb0a b303 	mla	r3, sl, r3, fp
  4053c6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  4053ca:	f8de 4000 	ldr.w	r4, [lr]
  4053ce:	4463      	add	r3, ip
  4053d0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  4053d4:	fb0a c40b 	mla	r4, sl, fp, ip
  4053d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  4053dc:	b29b      	uxth	r3, r3
  4053de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  4053e2:	454f      	cmp	r7, r9
  4053e4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  4053e8:	f84e 3b04 	str.w	r3, [lr], #4
  4053ec:	d8e4      	bhi.n	4053b8 <__multiply+0x8e>
  4053ee:	f8ce c000 	str.w	ip, [lr]
  4053f2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  4053f6:	f1b9 0f00 	cmp.w	r9, #0
  4053fa:	d01f      	beq.n	40543c <__multiply+0x112>
  4053fc:	682b      	ldr	r3, [r5, #0]
  4053fe:	46ae      	mov	lr, r5
  405400:	468c      	mov	ip, r1
  405402:	f04f 0a00 	mov.w	sl, #0
  405406:	f8bc 4000 	ldrh.w	r4, [ip]
  40540a:	f8be b002 	ldrh.w	fp, [lr, #2]
  40540e:	fb09 b404 	mla	r4, r9, r4, fp
  405412:	44a2      	add	sl, r4
  405414:	b29b      	uxth	r3, r3
  405416:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  40541a:	f84e 3b04 	str.w	r3, [lr], #4
  40541e:	f85c 3b04 	ldr.w	r3, [ip], #4
  405422:	f8be 4000 	ldrh.w	r4, [lr]
  405426:	0c1b      	lsrs	r3, r3, #16
  405428:	fb09 4303 	mla	r3, r9, r3, r4
  40542c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  405430:	4567      	cmp	r7, ip
  405432:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  405436:	d8e6      	bhi.n	405406 <__multiply+0xdc>
  405438:	f8ce 3000 	str.w	r3, [lr]
  40543c:	3504      	adds	r5, #4
  40543e:	e7a0      	b.n	405382 <__multiply+0x58>
  405440:	3e01      	subs	r6, #1
  405442:	e7a2      	b.n	40538a <__multiply+0x60>

00405444 <__pow5mult>:
  405444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405448:	4615      	mov	r5, r2
  40544a:	f012 0203 	ands.w	r2, r2, #3
  40544e:	4606      	mov	r6, r0
  405450:	460f      	mov	r7, r1
  405452:	d007      	beq.n	405464 <__pow5mult+0x20>
  405454:	3a01      	subs	r2, #1
  405456:	4c21      	ldr	r4, [pc, #132]	; (4054dc <__pow5mult+0x98>)
  405458:	2300      	movs	r3, #0
  40545a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40545e:	f7ff fed2 	bl	405206 <__multadd>
  405462:	4607      	mov	r7, r0
  405464:	10ad      	asrs	r5, r5, #2
  405466:	d035      	beq.n	4054d4 <__pow5mult+0x90>
  405468:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40546a:	b93c      	cbnz	r4, 40547c <__pow5mult+0x38>
  40546c:	2010      	movs	r0, #16
  40546e:	f7ff fe23 	bl	4050b8 <malloc>
  405472:	6270      	str	r0, [r6, #36]	; 0x24
  405474:	6044      	str	r4, [r0, #4]
  405476:	6084      	str	r4, [r0, #8]
  405478:	6004      	str	r4, [r0, #0]
  40547a:	60c4      	str	r4, [r0, #12]
  40547c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  405480:	f8d8 4008 	ldr.w	r4, [r8, #8]
  405484:	b94c      	cbnz	r4, 40549a <__pow5mult+0x56>
  405486:	f240 2171 	movw	r1, #625	; 0x271
  40548a:	4630      	mov	r0, r6
  40548c:	f7ff ff44 	bl	405318 <__i2b>
  405490:	2300      	movs	r3, #0
  405492:	f8c8 0008 	str.w	r0, [r8, #8]
  405496:	4604      	mov	r4, r0
  405498:	6003      	str	r3, [r0, #0]
  40549a:	f04f 0800 	mov.w	r8, #0
  40549e:	07eb      	lsls	r3, r5, #31
  4054a0:	d50a      	bpl.n	4054b8 <__pow5mult+0x74>
  4054a2:	4639      	mov	r1, r7
  4054a4:	4622      	mov	r2, r4
  4054a6:	4630      	mov	r0, r6
  4054a8:	f7ff ff3f 	bl	40532a <__multiply>
  4054ac:	4639      	mov	r1, r7
  4054ae:	4681      	mov	r9, r0
  4054b0:	4630      	mov	r0, r6
  4054b2:	f7ff fe91 	bl	4051d8 <_Bfree>
  4054b6:	464f      	mov	r7, r9
  4054b8:	106d      	asrs	r5, r5, #1
  4054ba:	d00b      	beq.n	4054d4 <__pow5mult+0x90>
  4054bc:	6820      	ldr	r0, [r4, #0]
  4054be:	b938      	cbnz	r0, 4054d0 <__pow5mult+0x8c>
  4054c0:	4622      	mov	r2, r4
  4054c2:	4621      	mov	r1, r4
  4054c4:	4630      	mov	r0, r6
  4054c6:	f7ff ff30 	bl	40532a <__multiply>
  4054ca:	6020      	str	r0, [r4, #0]
  4054cc:	f8c0 8000 	str.w	r8, [r0]
  4054d0:	4604      	mov	r4, r0
  4054d2:	e7e4      	b.n	40549e <__pow5mult+0x5a>
  4054d4:	4638      	mov	r0, r7
  4054d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4054da:	bf00      	nop
  4054dc:	00406420 	.word	0x00406420

004054e0 <__lshift>:
  4054e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4054e4:	460c      	mov	r4, r1
  4054e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4054ea:	6923      	ldr	r3, [r4, #16]
  4054ec:	6849      	ldr	r1, [r1, #4]
  4054ee:	eb0a 0903 	add.w	r9, sl, r3
  4054f2:	68a3      	ldr	r3, [r4, #8]
  4054f4:	4607      	mov	r7, r0
  4054f6:	4616      	mov	r6, r2
  4054f8:	f109 0501 	add.w	r5, r9, #1
  4054fc:	42ab      	cmp	r3, r5
  4054fe:	db31      	blt.n	405564 <__lshift+0x84>
  405500:	4638      	mov	r0, r7
  405502:	f7ff fe35 	bl	405170 <_Balloc>
  405506:	2200      	movs	r2, #0
  405508:	4680      	mov	r8, r0
  40550a:	f100 0314 	add.w	r3, r0, #20
  40550e:	4611      	mov	r1, r2
  405510:	4552      	cmp	r2, sl
  405512:	db2a      	blt.n	40556a <__lshift+0x8a>
  405514:	6920      	ldr	r0, [r4, #16]
  405516:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  40551a:	f104 0114 	add.w	r1, r4, #20
  40551e:	f016 021f 	ands.w	r2, r6, #31
  405522:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  405526:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  40552a:	d022      	beq.n	405572 <__lshift+0x92>
  40552c:	f1c2 0c20 	rsb	ip, r2, #32
  405530:	2000      	movs	r0, #0
  405532:	680e      	ldr	r6, [r1, #0]
  405534:	4096      	lsls	r6, r2
  405536:	4330      	orrs	r0, r6
  405538:	f843 0b04 	str.w	r0, [r3], #4
  40553c:	f851 0b04 	ldr.w	r0, [r1], #4
  405540:	458e      	cmp	lr, r1
  405542:	fa20 f00c 	lsr.w	r0, r0, ip
  405546:	d8f4      	bhi.n	405532 <__lshift+0x52>
  405548:	6018      	str	r0, [r3, #0]
  40554a:	b108      	cbz	r0, 405550 <__lshift+0x70>
  40554c:	f109 0502 	add.w	r5, r9, #2
  405550:	3d01      	subs	r5, #1
  405552:	4638      	mov	r0, r7
  405554:	f8c8 5010 	str.w	r5, [r8, #16]
  405558:	4621      	mov	r1, r4
  40555a:	f7ff fe3d 	bl	4051d8 <_Bfree>
  40555e:	4640      	mov	r0, r8
  405560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405564:	3101      	adds	r1, #1
  405566:	005b      	lsls	r3, r3, #1
  405568:	e7c8      	b.n	4054fc <__lshift+0x1c>
  40556a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40556e:	3201      	adds	r2, #1
  405570:	e7ce      	b.n	405510 <__lshift+0x30>
  405572:	3b04      	subs	r3, #4
  405574:	f851 2b04 	ldr.w	r2, [r1], #4
  405578:	f843 2f04 	str.w	r2, [r3, #4]!
  40557c:	458e      	cmp	lr, r1
  40557e:	d8f9      	bhi.n	405574 <__lshift+0x94>
  405580:	e7e6      	b.n	405550 <__lshift+0x70>

00405582 <__mcmp>:
  405582:	6903      	ldr	r3, [r0, #16]
  405584:	690a      	ldr	r2, [r1, #16]
  405586:	1a9b      	subs	r3, r3, r2
  405588:	b530      	push	{r4, r5, lr}
  40558a:	d10c      	bne.n	4055a6 <__mcmp+0x24>
  40558c:	0092      	lsls	r2, r2, #2
  40558e:	3014      	adds	r0, #20
  405590:	3114      	adds	r1, #20
  405592:	1884      	adds	r4, r0, r2
  405594:	4411      	add	r1, r2
  405596:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40559a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40559e:	4295      	cmp	r5, r2
  4055a0:	d003      	beq.n	4055aa <__mcmp+0x28>
  4055a2:	d305      	bcc.n	4055b0 <__mcmp+0x2e>
  4055a4:	2301      	movs	r3, #1
  4055a6:	4618      	mov	r0, r3
  4055a8:	bd30      	pop	{r4, r5, pc}
  4055aa:	42a0      	cmp	r0, r4
  4055ac:	d3f3      	bcc.n	405596 <__mcmp+0x14>
  4055ae:	e7fa      	b.n	4055a6 <__mcmp+0x24>
  4055b0:	f04f 33ff 	mov.w	r3, #4294967295
  4055b4:	e7f7      	b.n	4055a6 <__mcmp+0x24>

004055b6 <__mdiff>:
  4055b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4055ba:	460d      	mov	r5, r1
  4055bc:	4607      	mov	r7, r0
  4055be:	4611      	mov	r1, r2
  4055c0:	4628      	mov	r0, r5
  4055c2:	4614      	mov	r4, r2
  4055c4:	f7ff ffdd 	bl	405582 <__mcmp>
  4055c8:	1e06      	subs	r6, r0, #0
  4055ca:	d108      	bne.n	4055de <__mdiff+0x28>
  4055cc:	4631      	mov	r1, r6
  4055ce:	4638      	mov	r0, r7
  4055d0:	f7ff fdce 	bl	405170 <_Balloc>
  4055d4:	2301      	movs	r3, #1
  4055d6:	6103      	str	r3, [r0, #16]
  4055d8:	6146      	str	r6, [r0, #20]
  4055da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055de:	bfa4      	itt	ge
  4055e0:	4623      	movge	r3, r4
  4055e2:	462c      	movge	r4, r5
  4055e4:	4638      	mov	r0, r7
  4055e6:	6861      	ldr	r1, [r4, #4]
  4055e8:	bfa6      	itte	ge
  4055ea:	461d      	movge	r5, r3
  4055ec:	2600      	movge	r6, #0
  4055ee:	2601      	movlt	r6, #1
  4055f0:	f7ff fdbe 	bl	405170 <_Balloc>
  4055f4:	692b      	ldr	r3, [r5, #16]
  4055f6:	60c6      	str	r6, [r0, #12]
  4055f8:	6926      	ldr	r6, [r4, #16]
  4055fa:	f105 0914 	add.w	r9, r5, #20
  4055fe:	f104 0214 	add.w	r2, r4, #20
  405602:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  405606:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40560a:	f100 0514 	add.w	r5, r0, #20
  40560e:	f04f 0c00 	mov.w	ip, #0
  405612:	f852 ab04 	ldr.w	sl, [r2], #4
  405616:	f859 4b04 	ldr.w	r4, [r9], #4
  40561a:	fa1c f18a 	uxtah	r1, ip, sl
  40561e:	b2a3      	uxth	r3, r4
  405620:	1ac9      	subs	r1, r1, r3
  405622:	0c23      	lsrs	r3, r4, #16
  405624:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  405628:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40562c:	b289      	uxth	r1, r1
  40562e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  405632:	45c8      	cmp	r8, r9
  405634:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  405638:	4696      	mov	lr, r2
  40563a:	f845 3b04 	str.w	r3, [r5], #4
  40563e:	d8e8      	bhi.n	405612 <__mdiff+0x5c>
  405640:	45be      	cmp	lr, r7
  405642:	d305      	bcc.n	405650 <__mdiff+0x9a>
  405644:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405648:	b18b      	cbz	r3, 40566e <__mdiff+0xb8>
  40564a:	6106      	str	r6, [r0, #16]
  40564c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405650:	f85e 1b04 	ldr.w	r1, [lr], #4
  405654:	fa1c f381 	uxtah	r3, ip, r1
  405658:	141a      	asrs	r2, r3, #16
  40565a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  40565e:	b29b      	uxth	r3, r3
  405660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405664:	ea4f 4c22 	mov.w	ip, r2, asr #16
  405668:	f845 3b04 	str.w	r3, [r5], #4
  40566c:	e7e8      	b.n	405640 <__mdiff+0x8a>
  40566e:	3e01      	subs	r6, #1
  405670:	e7e8      	b.n	405644 <__mdiff+0x8e>

00405672 <__d2b>:
  405672:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  405676:	2101      	movs	r1, #1
  405678:	461c      	mov	r4, r3
  40567a:	4690      	mov	r8, r2
  40567c:	9e08      	ldr	r6, [sp, #32]
  40567e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405680:	f7ff fd76 	bl	405170 <_Balloc>
  405684:	f3c4 0213 	ubfx	r2, r4, #0, #20
  405688:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40568c:	4607      	mov	r7, r0
  40568e:	bb34      	cbnz	r4, 4056de <__d2b+0x6c>
  405690:	9201      	str	r2, [sp, #4]
  405692:	f1b8 0f00 	cmp.w	r8, #0
  405696:	d027      	beq.n	4056e8 <__d2b+0x76>
  405698:	a802      	add	r0, sp, #8
  40569a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40569e:	f7ff fe0c 	bl	4052ba <__lo0bits>
  4056a2:	9900      	ldr	r1, [sp, #0]
  4056a4:	b1f0      	cbz	r0, 4056e4 <__d2b+0x72>
  4056a6:	9a01      	ldr	r2, [sp, #4]
  4056a8:	f1c0 0320 	rsb	r3, r0, #32
  4056ac:	fa02 f303 	lsl.w	r3, r2, r3
  4056b0:	430b      	orrs	r3, r1
  4056b2:	40c2      	lsrs	r2, r0
  4056b4:	617b      	str	r3, [r7, #20]
  4056b6:	9201      	str	r2, [sp, #4]
  4056b8:	9b01      	ldr	r3, [sp, #4]
  4056ba:	61bb      	str	r3, [r7, #24]
  4056bc:	2b00      	cmp	r3, #0
  4056be:	bf14      	ite	ne
  4056c0:	2102      	movne	r1, #2
  4056c2:	2101      	moveq	r1, #1
  4056c4:	6139      	str	r1, [r7, #16]
  4056c6:	b1c4      	cbz	r4, 4056fa <__d2b+0x88>
  4056c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  4056cc:	4404      	add	r4, r0
  4056ce:	6034      	str	r4, [r6, #0]
  4056d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4056d4:	6028      	str	r0, [r5, #0]
  4056d6:	4638      	mov	r0, r7
  4056d8:	b002      	add	sp, #8
  4056da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4056de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4056e2:	e7d5      	b.n	405690 <__d2b+0x1e>
  4056e4:	6179      	str	r1, [r7, #20]
  4056e6:	e7e7      	b.n	4056b8 <__d2b+0x46>
  4056e8:	a801      	add	r0, sp, #4
  4056ea:	f7ff fde6 	bl	4052ba <__lo0bits>
  4056ee:	9b01      	ldr	r3, [sp, #4]
  4056f0:	617b      	str	r3, [r7, #20]
  4056f2:	2101      	movs	r1, #1
  4056f4:	6139      	str	r1, [r7, #16]
  4056f6:	3020      	adds	r0, #32
  4056f8:	e7e5      	b.n	4056c6 <__d2b+0x54>
  4056fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  4056fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405702:	6030      	str	r0, [r6, #0]
  405704:	6918      	ldr	r0, [r3, #16]
  405706:	f7ff fdb9 	bl	40527c <__hi0bits>
  40570a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40570e:	e7e1      	b.n	4056d4 <__d2b+0x62>

00405710 <_calloc_r>:
  405710:	b538      	push	{r3, r4, r5, lr}
  405712:	fb02 f401 	mul.w	r4, r2, r1
  405716:	4621      	mov	r1, r4
  405718:	f000 f856 	bl	4057c8 <_malloc_r>
  40571c:	4605      	mov	r5, r0
  40571e:	b118      	cbz	r0, 405728 <_calloc_r+0x18>
  405720:	4622      	mov	r2, r4
  405722:	2100      	movs	r1, #0
  405724:	f7fd ff3f 	bl	4035a6 <memset>
  405728:	4628      	mov	r0, r5
  40572a:	bd38      	pop	{r3, r4, r5, pc}

0040572c <_free_r>:
  40572c:	b538      	push	{r3, r4, r5, lr}
  40572e:	4605      	mov	r5, r0
  405730:	2900      	cmp	r1, #0
  405732:	d045      	beq.n	4057c0 <_free_r+0x94>
  405734:	f851 3c04 	ldr.w	r3, [r1, #-4]
  405738:	1f0c      	subs	r4, r1, #4
  40573a:	2b00      	cmp	r3, #0
  40573c:	bfb8      	it	lt
  40573e:	18e4      	addlt	r4, r4, r3
  405740:	f000 fb5a 	bl	405df8 <__malloc_lock>
  405744:	4a1f      	ldr	r2, [pc, #124]	; (4057c4 <_free_r+0x98>)
  405746:	6813      	ldr	r3, [r2, #0]
  405748:	4610      	mov	r0, r2
  40574a:	b933      	cbnz	r3, 40575a <_free_r+0x2e>
  40574c:	6063      	str	r3, [r4, #4]
  40574e:	6014      	str	r4, [r2, #0]
  405750:	4628      	mov	r0, r5
  405752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405756:	f000 bb50 	b.w	405dfa <__malloc_unlock>
  40575a:	42a3      	cmp	r3, r4
  40575c:	d90c      	bls.n	405778 <_free_r+0x4c>
  40575e:	6821      	ldr	r1, [r4, #0]
  405760:	1862      	adds	r2, r4, r1
  405762:	4293      	cmp	r3, r2
  405764:	bf04      	itt	eq
  405766:	681a      	ldreq	r2, [r3, #0]
  405768:	685b      	ldreq	r3, [r3, #4]
  40576a:	6063      	str	r3, [r4, #4]
  40576c:	bf04      	itt	eq
  40576e:	1852      	addeq	r2, r2, r1
  405770:	6022      	streq	r2, [r4, #0]
  405772:	6004      	str	r4, [r0, #0]
  405774:	e7ec      	b.n	405750 <_free_r+0x24>
  405776:	4613      	mov	r3, r2
  405778:	685a      	ldr	r2, [r3, #4]
  40577a:	b10a      	cbz	r2, 405780 <_free_r+0x54>
  40577c:	42a2      	cmp	r2, r4
  40577e:	d9fa      	bls.n	405776 <_free_r+0x4a>
  405780:	6819      	ldr	r1, [r3, #0]
  405782:	1858      	adds	r0, r3, r1
  405784:	42a0      	cmp	r0, r4
  405786:	d10b      	bne.n	4057a0 <_free_r+0x74>
  405788:	6820      	ldr	r0, [r4, #0]
  40578a:	4401      	add	r1, r0
  40578c:	1858      	adds	r0, r3, r1
  40578e:	4282      	cmp	r2, r0
  405790:	6019      	str	r1, [r3, #0]
  405792:	d1dd      	bne.n	405750 <_free_r+0x24>
  405794:	6810      	ldr	r0, [r2, #0]
  405796:	6852      	ldr	r2, [r2, #4]
  405798:	605a      	str	r2, [r3, #4]
  40579a:	4401      	add	r1, r0
  40579c:	6019      	str	r1, [r3, #0]
  40579e:	e7d7      	b.n	405750 <_free_r+0x24>
  4057a0:	d902      	bls.n	4057a8 <_free_r+0x7c>
  4057a2:	230c      	movs	r3, #12
  4057a4:	602b      	str	r3, [r5, #0]
  4057a6:	e7d3      	b.n	405750 <_free_r+0x24>
  4057a8:	6820      	ldr	r0, [r4, #0]
  4057aa:	1821      	adds	r1, r4, r0
  4057ac:	428a      	cmp	r2, r1
  4057ae:	bf04      	itt	eq
  4057b0:	6811      	ldreq	r1, [r2, #0]
  4057b2:	6852      	ldreq	r2, [r2, #4]
  4057b4:	6062      	str	r2, [r4, #4]
  4057b6:	bf04      	itt	eq
  4057b8:	1809      	addeq	r1, r1, r0
  4057ba:	6021      	streq	r1, [r4, #0]
  4057bc:	605c      	str	r4, [r3, #4]
  4057be:	e7c7      	b.n	405750 <_free_r+0x24>
  4057c0:	bd38      	pop	{r3, r4, r5, pc}
  4057c2:	bf00      	nop
  4057c4:	204004c0 	.word	0x204004c0

004057c8 <_malloc_r>:
  4057c8:	b570      	push	{r4, r5, r6, lr}
  4057ca:	1ccd      	adds	r5, r1, #3
  4057cc:	f025 0503 	bic.w	r5, r5, #3
  4057d0:	3508      	adds	r5, #8
  4057d2:	2d0c      	cmp	r5, #12
  4057d4:	bf38      	it	cc
  4057d6:	250c      	movcc	r5, #12
  4057d8:	2d00      	cmp	r5, #0
  4057da:	4606      	mov	r6, r0
  4057dc:	db01      	blt.n	4057e2 <_malloc_r+0x1a>
  4057de:	42a9      	cmp	r1, r5
  4057e0:	d903      	bls.n	4057ea <_malloc_r+0x22>
  4057e2:	230c      	movs	r3, #12
  4057e4:	6033      	str	r3, [r6, #0]
  4057e6:	2000      	movs	r0, #0
  4057e8:	bd70      	pop	{r4, r5, r6, pc}
  4057ea:	f000 fb05 	bl	405df8 <__malloc_lock>
  4057ee:	4a23      	ldr	r2, [pc, #140]	; (40587c <_malloc_r+0xb4>)
  4057f0:	6814      	ldr	r4, [r2, #0]
  4057f2:	4621      	mov	r1, r4
  4057f4:	b991      	cbnz	r1, 40581c <_malloc_r+0x54>
  4057f6:	4c22      	ldr	r4, [pc, #136]	; (405880 <_malloc_r+0xb8>)
  4057f8:	6823      	ldr	r3, [r4, #0]
  4057fa:	b91b      	cbnz	r3, 405804 <_malloc_r+0x3c>
  4057fc:	4630      	mov	r0, r6
  4057fe:	f000 f97f 	bl	405b00 <_sbrk_r>
  405802:	6020      	str	r0, [r4, #0]
  405804:	4629      	mov	r1, r5
  405806:	4630      	mov	r0, r6
  405808:	f000 f97a 	bl	405b00 <_sbrk_r>
  40580c:	1c43      	adds	r3, r0, #1
  40580e:	d126      	bne.n	40585e <_malloc_r+0x96>
  405810:	230c      	movs	r3, #12
  405812:	6033      	str	r3, [r6, #0]
  405814:	4630      	mov	r0, r6
  405816:	f000 faf0 	bl	405dfa <__malloc_unlock>
  40581a:	e7e4      	b.n	4057e6 <_malloc_r+0x1e>
  40581c:	680b      	ldr	r3, [r1, #0]
  40581e:	1b5b      	subs	r3, r3, r5
  405820:	d41a      	bmi.n	405858 <_malloc_r+0x90>
  405822:	2b0b      	cmp	r3, #11
  405824:	d90f      	bls.n	405846 <_malloc_r+0x7e>
  405826:	600b      	str	r3, [r1, #0]
  405828:	50cd      	str	r5, [r1, r3]
  40582a:	18cc      	adds	r4, r1, r3
  40582c:	4630      	mov	r0, r6
  40582e:	f000 fae4 	bl	405dfa <__malloc_unlock>
  405832:	f104 000b 	add.w	r0, r4, #11
  405836:	1d23      	adds	r3, r4, #4
  405838:	f020 0007 	bic.w	r0, r0, #7
  40583c:	1ac3      	subs	r3, r0, r3
  40583e:	d01b      	beq.n	405878 <_malloc_r+0xb0>
  405840:	425a      	negs	r2, r3
  405842:	50e2      	str	r2, [r4, r3]
  405844:	bd70      	pop	{r4, r5, r6, pc}
  405846:	428c      	cmp	r4, r1
  405848:	bf0d      	iteet	eq
  40584a:	6863      	ldreq	r3, [r4, #4]
  40584c:	684b      	ldrne	r3, [r1, #4]
  40584e:	6063      	strne	r3, [r4, #4]
  405850:	6013      	streq	r3, [r2, #0]
  405852:	bf18      	it	ne
  405854:	460c      	movne	r4, r1
  405856:	e7e9      	b.n	40582c <_malloc_r+0x64>
  405858:	460c      	mov	r4, r1
  40585a:	6849      	ldr	r1, [r1, #4]
  40585c:	e7ca      	b.n	4057f4 <_malloc_r+0x2c>
  40585e:	1cc4      	adds	r4, r0, #3
  405860:	f024 0403 	bic.w	r4, r4, #3
  405864:	42a0      	cmp	r0, r4
  405866:	d005      	beq.n	405874 <_malloc_r+0xac>
  405868:	1a21      	subs	r1, r4, r0
  40586a:	4630      	mov	r0, r6
  40586c:	f000 f948 	bl	405b00 <_sbrk_r>
  405870:	3001      	adds	r0, #1
  405872:	d0cd      	beq.n	405810 <_malloc_r+0x48>
  405874:	6025      	str	r5, [r4, #0]
  405876:	e7d9      	b.n	40582c <_malloc_r+0x64>
  405878:	bd70      	pop	{r4, r5, r6, pc}
  40587a:	bf00      	nop
  40587c:	204004c0 	.word	0x204004c0
  405880:	204004c4 	.word	0x204004c4

00405884 <__sfputc_r>:
  405884:	6893      	ldr	r3, [r2, #8]
  405886:	3b01      	subs	r3, #1
  405888:	2b00      	cmp	r3, #0
  40588a:	b410      	push	{r4}
  40588c:	6093      	str	r3, [r2, #8]
  40588e:	da08      	bge.n	4058a2 <__sfputc_r+0x1e>
  405890:	6994      	ldr	r4, [r2, #24]
  405892:	42a3      	cmp	r3, r4
  405894:	db02      	blt.n	40589c <__sfputc_r+0x18>
  405896:	b2cb      	uxtb	r3, r1
  405898:	2b0a      	cmp	r3, #10
  40589a:	d102      	bne.n	4058a2 <__sfputc_r+0x1e>
  40589c:	bc10      	pop	{r4}
  40589e:	f000 b983 	b.w	405ba8 <__swbuf_r>
  4058a2:	6813      	ldr	r3, [r2, #0]
  4058a4:	1c58      	adds	r0, r3, #1
  4058a6:	6010      	str	r0, [r2, #0]
  4058a8:	7019      	strb	r1, [r3, #0]
  4058aa:	b2c8      	uxtb	r0, r1
  4058ac:	bc10      	pop	{r4}
  4058ae:	4770      	bx	lr

004058b0 <__sfputs_r>:
  4058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4058b2:	4606      	mov	r6, r0
  4058b4:	460f      	mov	r7, r1
  4058b6:	4614      	mov	r4, r2
  4058b8:	18d5      	adds	r5, r2, r3
  4058ba:	42ac      	cmp	r4, r5
  4058bc:	d101      	bne.n	4058c2 <__sfputs_r+0x12>
  4058be:	2000      	movs	r0, #0
  4058c0:	e007      	b.n	4058d2 <__sfputs_r+0x22>
  4058c2:	463a      	mov	r2, r7
  4058c4:	f814 1b01 	ldrb.w	r1, [r4], #1
  4058c8:	4630      	mov	r0, r6
  4058ca:	f7ff ffdb 	bl	405884 <__sfputc_r>
  4058ce:	1c43      	adds	r3, r0, #1
  4058d0:	d1f3      	bne.n	4058ba <__sfputs_r+0xa>
  4058d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004058d4 <_vfiprintf_r>:
  4058d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058d8:	b09d      	sub	sp, #116	; 0x74
  4058da:	460c      	mov	r4, r1
  4058dc:	4617      	mov	r7, r2
  4058de:	9303      	str	r3, [sp, #12]
  4058e0:	4606      	mov	r6, r0
  4058e2:	b118      	cbz	r0, 4058ec <_vfiprintf_r+0x18>
  4058e4:	6983      	ldr	r3, [r0, #24]
  4058e6:	b90b      	cbnz	r3, 4058ec <_vfiprintf_r+0x18>
  4058e8:	f7ff faea 	bl	404ec0 <__sinit>
  4058ec:	4b7c      	ldr	r3, [pc, #496]	; (405ae0 <_vfiprintf_r+0x20c>)
  4058ee:	429c      	cmp	r4, r3
  4058f0:	d157      	bne.n	4059a2 <_vfiprintf_r+0xce>
  4058f2:	6874      	ldr	r4, [r6, #4]
  4058f4:	89a3      	ldrh	r3, [r4, #12]
  4058f6:	0718      	lsls	r0, r3, #28
  4058f8:	d55d      	bpl.n	4059b6 <_vfiprintf_r+0xe2>
  4058fa:	6923      	ldr	r3, [r4, #16]
  4058fc:	2b00      	cmp	r3, #0
  4058fe:	d05a      	beq.n	4059b6 <_vfiprintf_r+0xe2>
  405900:	2300      	movs	r3, #0
  405902:	9309      	str	r3, [sp, #36]	; 0x24
  405904:	2320      	movs	r3, #32
  405906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40590a:	2330      	movs	r3, #48	; 0x30
  40590c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  405910:	f04f 0b01 	mov.w	fp, #1
  405914:	46b8      	mov	r8, r7
  405916:	4645      	mov	r5, r8
  405918:	f815 3b01 	ldrb.w	r3, [r5], #1
  40591c:	2b00      	cmp	r3, #0
  40591e:	d155      	bne.n	4059cc <_vfiprintf_r+0xf8>
  405920:	ebb8 0a07 	subs.w	sl, r8, r7
  405924:	d00b      	beq.n	40593e <_vfiprintf_r+0x6a>
  405926:	4653      	mov	r3, sl
  405928:	463a      	mov	r2, r7
  40592a:	4621      	mov	r1, r4
  40592c:	4630      	mov	r0, r6
  40592e:	f7ff ffbf 	bl	4058b0 <__sfputs_r>
  405932:	3001      	adds	r0, #1
  405934:	f000 80c4 	beq.w	405ac0 <_vfiprintf_r+0x1ec>
  405938:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40593a:	4453      	add	r3, sl
  40593c:	9309      	str	r3, [sp, #36]	; 0x24
  40593e:	f898 3000 	ldrb.w	r3, [r8]
  405942:	2b00      	cmp	r3, #0
  405944:	f000 80bc 	beq.w	405ac0 <_vfiprintf_r+0x1ec>
  405948:	2300      	movs	r3, #0
  40594a:	f04f 32ff 	mov.w	r2, #4294967295
  40594e:	9304      	str	r3, [sp, #16]
  405950:	9307      	str	r3, [sp, #28]
  405952:	9205      	str	r2, [sp, #20]
  405954:	9306      	str	r3, [sp, #24]
  405956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40595a:	931a      	str	r3, [sp, #104]	; 0x68
  40595c:	2205      	movs	r2, #5
  40595e:	7829      	ldrb	r1, [r5, #0]
  405960:	4860      	ldr	r0, [pc, #384]	; (405ae4 <_vfiprintf_r+0x210>)
  405962:	f7ff fbb5 	bl	4050d0 <memchr>
  405966:	f105 0801 	add.w	r8, r5, #1
  40596a:	9b04      	ldr	r3, [sp, #16]
  40596c:	2800      	cmp	r0, #0
  40596e:	d131      	bne.n	4059d4 <_vfiprintf_r+0x100>
  405970:	06d9      	lsls	r1, r3, #27
  405972:	bf44      	itt	mi
  405974:	2220      	movmi	r2, #32
  405976:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40597a:	071a      	lsls	r2, r3, #28
  40597c:	bf44      	itt	mi
  40597e:	222b      	movmi	r2, #43	; 0x2b
  405980:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  405984:	782a      	ldrb	r2, [r5, #0]
  405986:	2a2a      	cmp	r2, #42	; 0x2a
  405988:	d02c      	beq.n	4059e4 <_vfiprintf_r+0x110>
  40598a:	9a07      	ldr	r2, [sp, #28]
  40598c:	2100      	movs	r1, #0
  40598e:	200a      	movs	r0, #10
  405990:	46a8      	mov	r8, r5
  405992:	3501      	adds	r5, #1
  405994:	f898 3000 	ldrb.w	r3, [r8]
  405998:	3b30      	subs	r3, #48	; 0x30
  40599a:	2b09      	cmp	r3, #9
  40599c:	d96d      	bls.n	405a7a <_vfiprintf_r+0x1a6>
  40599e:	b371      	cbz	r1, 4059fe <_vfiprintf_r+0x12a>
  4059a0:	e026      	b.n	4059f0 <_vfiprintf_r+0x11c>
  4059a2:	4b51      	ldr	r3, [pc, #324]	; (405ae8 <_vfiprintf_r+0x214>)
  4059a4:	429c      	cmp	r4, r3
  4059a6:	d101      	bne.n	4059ac <_vfiprintf_r+0xd8>
  4059a8:	68b4      	ldr	r4, [r6, #8]
  4059aa:	e7a3      	b.n	4058f4 <_vfiprintf_r+0x20>
  4059ac:	4b4f      	ldr	r3, [pc, #316]	; (405aec <_vfiprintf_r+0x218>)
  4059ae:	429c      	cmp	r4, r3
  4059b0:	bf08      	it	eq
  4059b2:	68f4      	ldreq	r4, [r6, #12]
  4059b4:	e79e      	b.n	4058f4 <_vfiprintf_r+0x20>
  4059b6:	4621      	mov	r1, r4
  4059b8:	4630      	mov	r0, r6
  4059ba:	f000 f959 	bl	405c70 <__swsetup_r>
  4059be:	2800      	cmp	r0, #0
  4059c0:	d09e      	beq.n	405900 <_vfiprintf_r+0x2c>
  4059c2:	f04f 30ff 	mov.w	r0, #4294967295
  4059c6:	b01d      	add	sp, #116	; 0x74
  4059c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059cc:	2b25      	cmp	r3, #37	; 0x25
  4059ce:	d0a7      	beq.n	405920 <_vfiprintf_r+0x4c>
  4059d0:	46a8      	mov	r8, r5
  4059d2:	e7a0      	b.n	405916 <_vfiprintf_r+0x42>
  4059d4:	4a43      	ldr	r2, [pc, #268]	; (405ae4 <_vfiprintf_r+0x210>)
  4059d6:	1a80      	subs	r0, r0, r2
  4059d8:	fa0b f000 	lsl.w	r0, fp, r0
  4059dc:	4318      	orrs	r0, r3
  4059de:	9004      	str	r0, [sp, #16]
  4059e0:	4645      	mov	r5, r8
  4059e2:	e7bb      	b.n	40595c <_vfiprintf_r+0x88>
  4059e4:	9a03      	ldr	r2, [sp, #12]
  4059e6:	1d11      	adds	r1, r2, #4
  4059e8:	6812      	ldr	r2, [r2, #0]
  4059ea:	9103      	str	r1, [sp, #12]
  4059ec:	2a00      	cmp	r2, #0
  4059ee:	db01      	blt.n	4059f4 <_vfiprintf_r+0x120>
  4059f0:	9207      	str	r2, [sp, #28]
  4059f2:	e004      	b.n	4059fe <_vfiprintf_r+0x12a>
  4059f4:	4252      	negs	r2, r2
  4059f6:	f043 0302 	orr.w	r3, r3, #2
  4059fa:	9207      	str	r2, [sp, #28]
  4059fc:	9304      	str	r3, [sp, #16]
  4059fe:	f898 3000 	ldrb.w	r3, [r8]
  405a02:	2b2e      	cmp	r3, #46	; 0x2e
  405a04:	d110      	bne.n	405a28 <_vfiprintf_r+0x154>
  405a06:	f898 3001 	ldrb.w	r3, [r8, #1]
  405a0a:	2b2a      	cmp	r3, #42	; 0x2a
  405a0c:	f108 0101 	add.w	r1, r8, #1
  405a10:	d137      	bne.n	405a82 <_vfiprintf_r+0x1ae>
  405a12:	9b03      	ldr	r3, [sp, #12]
  405a14:	1d1a      	adds	r2, r3, #4
  405a16:	681b      	ldr	r3, [r3, #0]
  405a18:	9203      	str	r2, [sp, #12]
  405a1a:	2b00      	cmp	r3, #0
  405a1c:	bfb8      	it	lt
  405a1e:	f04f 33ff 	movlt.w	r3, #4294967295
  405a22:	f108 0802 	add.w	r8, r8, #2
  405a26:	9305      	str	r3, [sp, #20]
  405a28:	4d31      	ldr	r5, [pc, #196]	; (405af0 <_vfiprintf_r+0x21c>)
  405a2a:	f898 1000 	ldrb.w	r1, [r8]
  405a2e:	2203      	movs	r2, #3
  405a30:	4628      	mov	r0, r5
  405a32:	f7ff fb4d 	bl	4050d0 <memchr>
  405a36:	b140      	cbz	r0, 405a4a <_vfiprintf_r+0x176>
  405a38:	2340      	movs	r3, #64	; 0x40
  405a3a:	1b40      	subs	r0, r0, r5
  405a3c:	fa03 f000 	lsl.w	r0, r3, r0
  405a40:	9b04      	ldr	r3, [sp, #16]
  405a42:	4303      	orrs	r3, r0
  405a44:	9304      	str	r3, [sp, #16]
  405a46:	f108 0801 	add.w	r8, r8, #1
  405a4a:	f898 1000 	ldrb.w	r1, [r8]
  405a4e:	4829      	ldr	r0, [pc, #164]	; (405af4 <_vfiprintf_r+0x220>)
  405a50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  405a54:	2206      	movs	r2, #6
  405a56:	f108 0701 	add.w	r7, r8, #1
  405a5a:	f7ff fb39 	bl	4050d0 <memchr>
  405a5e:	2800      	cmp	r0, #0
  405a60:	d034      	beq.n	405acc <_vfiprintf_r+0x1f8>
  405a62:	4b25      	ldr	r3, [pc, #148]	; (405af8 <_vfiprintf_r+0x224>)
  405a64:	bb03      	cbnz	r3, 405aa8 <_vfiprintf_r+0x1d4>
  405a66:	9b03      	ldr	r3, [sp, #12]
  405a68:	3307      	adds	r3, #7
  405a6a:	f023 0307 	bic.w	r3, r3, #7
  405a6e:	3308      	adds	r3, #8
  405a70:	9303      	str	r3, [sp, #12]
  405a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405a74:	444b      	add	r3, r9
  405a76:	9309      	str	r3, [sp, #36]	; 0x24
  405a78:	e74c      	b.n	405914 <_vfiprintf_r+0x40>
  405a7a:	fb00 3202 	mla	r2, r0, r2, r3
  405a7e:	2101      	movs	r1, #1
  405a80:	e786      	b.n	405990 <_vfiprintf_r+0xbc>
  405a82:	2300      	movs	r3, #0
  405a84:	9305      	str	r3, [sp, #20]
  405a86:	4618      	mov	r0, r3
  405a88:	250a      	movs	r5, #10
  405a8a:	4688      	mov	r8, r1
  405a8c:	3101      	adds	r1, #1
  405a8e:	f898 2000 	ldrb.w	r2, [r8]
  405a92:	3a30      	subs	r2, #48	; 0x30
  405a94:	2a09      	cmp	r2, #9
  405a96:	d903      	bls.n	405aa0 <_vfiprintf_r+0x1cc>
  405a98:	2b00      	cmp	r3, #0
  405a9a:	d0c5      	beq.n	405a28 <_vfiprintf_r+0x154>
  405a9c:	9005      	str	r0, [sp, #20]
  405a9e:	e7c3      	b.n	405a28 <_vfiprintf_r+0x154>
  405aa0:	fb05 2000 	mla	r0, r5, r0, r2
  405aa4:	2301      	movs	r3, #1
  405aa6:	e7f0      	b.n	405a8a <_vfiprintf_r+0x1b6>
  405aa8:	ab03      	add	r3, sp, #12
  405aaa:	9300      	str	r3, [sp, #0]
  405aac:	4622      	mov	r2, r4
  405aae:	4b13      	ldr	r3, [pc, #76]	; (405afc <_vfiprintf_r+0x228>)
  405ab0:	a904      	add	r1, sp, #16
  405ab2:	4630      	mov	r0, r6
  405ab4:	f7fd fe10 	bl	4036d8 <_printf_float>
  405ab8:	f1b0 3fff 	cmp.w	r0, #4294967295
  405abc:	4681      	mov	r9, r0
  405abe:	d1d8      	bne.n	405a72 <_vfiprintf_r+0x19e>
  405ac0:	89a3      	ldrh	r3, [r4, #12]
  405ac2:	065b      	lsls	r3, r3, #25
  405ac4:	f53f af7d 	bmi.w	4059c2 <_vfiprintf_r+0xee>
  405ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
  405aca:	e77c      	b.n	4059c6 <_vfiprintf_r+0xf2>
  405acc:	ab03      	add	r3, sp, #12
  405ace:	9300      	str	r3, [sp, #0]
  405ad0:	4622      	mov	r2, r4
  405ad2:	4b0a      	ldr	r3, [pc, #40]	; (405afc <_vfiprintf_r+0x228>)
  405ad4:	a904      	add	r1, sp, #16
  405ad6:	4630      	mov	r0, r6
  405ad8:	f7fe f8ac 	bl	403c34 <_printf_i>
  405adc:	e7ec      	b.n	405ab8 <_vfiprintf_r+0x1e4>
  405ade:	bf00      	nop
  405ae0:	004062f0 	.word	0x004062f0
  405ae4:	0040642c 	.word	0x0040642c
  405ae8:	00406310 	.word	0x00406310
  405aec:	004062d0 	.word	0x004062d0
  405af0:	00406432 	.word	0x00406432
  405af4:	00406436 	.word	0x00406436
  405af8:	004036d9 	.word	0x004036d9
  405afc:	004058b1 	.word	0x004058b1

00405b00 <_sbrk_r>:
  405b00:	b538      	push	{r3, r4, r5, lr}
  405b02:	4c06      	ldr	r4, [pc, #24]	; (405b1c <_sbrk_r+0x1c>)
  405b04:	2300      	movs	r3, #0
  405b06:	4605      	mov	r5, r0
  405b08:	4608      	mov	r0, r1
  405b0a:	6023      	str	r3, [r4, #0]
  405b0c:	f7fb ff4a 	bl	4019a4 <_sbrk>
  405b10:	1c43      	adds	r3, r0, #1
  405b12:	d102      	bne.n	405b1a <_sbrk_r+0x1a>
  405b14:	6823      	ldr	r3, [r4, #0]
  405b16:	b103      	cbz	r3, 405b1a <_sbrk_r+0x1a>
  405b18:	602b      	str	r3, [r5, #0]
  405b1a:	bd38      	pop	{r3, r4, r5, pc}
  405b1c:	20400714 	.word	0x20400714

00405b20 <__sread>:
  405b20:	b510      	push	{r4, lr}
  405b22:	460c      	mov	r4, r1
  405b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405b28:	f000 f968 	bl	405dfc <_read_r>
  405b2c:	2800      	cmp	r0, #0
  405b2e:	bfab      	itete	ge
  405b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  405b32:	89a3      	ldrhlt	r3, [r4, #12]
  405b34:	181b      	addge	r3, r3, r0
  405b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  405b3a:	bfac      	ite	ge
  405b3c:	6563      	strge	r3, [r4, #84]	; 0x54
  405b3e:	81a3      	strhlt	r3, [r4, #12]
  405b40:	bd10      	pop	{r4, pc}

00405b42 <__swrite>:
  405b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405b46:	461f      	mov	r7, r3
  405b48:	898b      	ldrh	r3, [r1, #12]
  405b4a:	05db      	lsls	r3, r3, #23
  405b4c:	4605      	mov	r5, r0
  405b4e:	460c      	mov	r4, r1
  405b50:	4616      	mov	r6, r2
  405b52:	d505      	bpl.n	405b60 <__swrite+0x1e>
  405b54:	2302      	movs	r3, #2
  405b56:	2200      	movs	r2, #0
  405b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405b5c:	f000 f928 	bl	405db0 <_lseek_r>
  405b60:	89a3      	ldrh	r3, [r4, #12]
  405b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405b6a:	81a3      	strh	r3, [r4, #12]
  405b6c:	4632      	mov	r2, r6
  405b6e:	463b      	mov	r3, r7
  405b70:	4628      	mov	r0, r5
  405b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405b76:	f000 b869 	b.w	405c4c <_write_r>

00405b7a <__sseek>:
  405b7a:	b510      	push	{r4, lr}
  405b7c:	460c      	mov	r4, r1
  405b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405b82:	f000 f915 	bl	405db0 <_lseek_r>
  405b86:	1c43      	adds	r3, r0, #1
  405b88:	89a3      	ldrh	r3, [r4, #12]
  405b8a:	bf15      	itete	ne
  405b8c:	6560      	strne	r0, [r4, #84]	; 0x54
  405b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405b96:	81a3      	strheq	r3, [r4, #12]
  405b98:	bf18      	it	ne
  405b9a:	81a3      	strhne	r3, [r4, #12]
  405b9c:	bd10      	pop	{r4, pc}

00405b9e <__sclose>:
  405b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405ba2:	f000 b8d3 	b.w	405d4c <_close_r>
	...

00405ba8 <__swbuf_r>:
  405ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405baa:	460e      	mov	r6, r1
  405bac:	4614      	mov	r4, r2
  405bae:	4605      	mov	r5, r0
  405bb0:	b118      	cbz	r0, 405bba <__swbuf_r+0x12>
  405bb2:	6983      	ldr	r3, [r0, #24]
  405bb4:	b90b      	cbnz	r3, 405bba <__swbuf_r+0x12>
  405bb6:	f7ff f983 	bl	404ec0 <__sinit>
  405bba:	4b21      	ldr	r3, [pc, #132]	; (405c40 <__swbuf_r+0x98>)
  405bbc:	429c      	cmp	r4, r3
  405bbe:	d12a      	bne.n	405c16 <__swbuf_r+0x6e>
  405bc0:	686c      	ldr	r4, [r5, #4]
  405bc2:	69a3      	ldr	r3, [r4, #24]
  405bc4:	60a3      	str	r3, [r4, #8]
  405bc6:	89a3      	ldrh	r3, [r4, #12]
  405bc8:	071a      	lsls	r2, r3, #28
  405bca:	d52e      	bpl.n	405c2a <__swbuf_r+0x82>
  405bcc:	6923      	ldr	r3, [r4, #16]
  405bce:	b363      	cbz	r3, 405c2a <__swbuf_r+0x82>
  405bd0:	6923      	ldr	r3, [r4, #16]
  405bd2:	6820      	ldr	r0, [r4, #0]
  405bd4:	1ac0      	subs	r0, r0, r3
  405bd6:	6963      	ldr	r3, [r4, #20]
  405bd8:	b2f6      	uxtb	r6, r6
  405bda:	4298      	cmp	r0, r3
  405bdc:	4637      	mov	r7, r6
  405bde:	db04      	blt.n	405bea <__swbuf_r+0x42>
  405be0:	4621      	mov	r1, r4
  405be2:	4628      	mov	r0, r5
  405be4:	f7ff f902 	bl	404dec <_fflush_r>
  405be8:	bb28      	cbnz	r0, 405c36 <__swbuf_r+0x8e>
  405bea:	68a3      	ldr	r3, [r4, #8]
  405bec:	3b01      	subs	r3, #1
  405bee:	60a3      	str	r3, [r4, #8]
  405bf0:	6823      	ldr	r3, [r4, #0]
  405bf2:	1c5a      	adds	r2, r3, #1
  405bf4:	6022      	str	r2, [r4, #0]
  405bf6:	701e      	strb	r6, [r3, #0]
  405bf8:	6963      	ldr	r3, [r4, #20]
  405bfa:	3001      	adds	r0, #1
  405bfc:	4298      	cmp	r0, r3
  405bfe:	d004      	beq.n	405c0a <__swbuf_r+0x62>
  405c00:	89a3      	ldrh	r3, [r4, #12]
  405c02:	07db      	lsls	r3, r3, #31
  405c04:	d519      	bpl.n	405c3a <__swbuf_r+0x92>
  405c06:	2e0a      	cmp	r6, #10
  405c08:	d117      	bne.n	405c3a <__swbuf_r+0x92>
  405c0a:	4621      	mov	r1, r4
  405c0c:	4628      	mov	r0, r5
  405c0e:	f7ff f8ed 	bl	404dec <_fflush_r>
  405c12:	b190      	cbz	r0, 405c3a <__swbuf_r+0x92>
  405c14:	e00f      	b.n	405c36 <__swbuf_r+0x8e>
  405c16:	4b0b      	ldr	r3, [pc, #44]	; (405c44 <__swbuf_r+0x9c>)
  405c18:	429c      	cmp	r4, r3
  405c1a:	d101      	bne.n	405c20 <__swbuf_r+0x78>
  405c1c:	68ac      	ldr	r4, [r5, #8]
  405c1e:	e7d0      	b.n	405bc2 <__swbuf_r+0x1a>
  405c20:	4b09      	ldr	r3, [pc, #36]	; (405c48 <__swbuf_r+0xa0>)
  405c22:	429c      	cmp	r4, r3
  405c24:	bf08      	it	eq
  405c26:	68ec      	ldreq	r4, [r5, #12]
  405c28:	e7cb      	b.n	405bc2 <__swbuf_r+0x1a>
  405c2a:	4621      	mov	r1, r4
  405c2c:	4628      	mov	r0, r5
  405c2e:	f000 f81f 	bl	405c70 <__swsetup_r>
  405c32:	2800      	cmp	r0, #0
  405c34:	d0cc      	beq.n	405bd0 <__swbuf_r+0x28>
  405c36:	f04f 37ff 	mov.w	r7, #4294967295
  405c3a:	4638      	mov	r0, r7
  405c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405c3e:	bf00      	nop
  405c40:	004062f0 	.word	0x004062f0
  405c44:	00406310 	.word	0x00406310
  405c48:	004062d0 	.word	0x004062d0

00405c4c <_write_r>:
  405c4c:	b538      	push	{r3, r4, r5, lr}
  405c4e:	4c07      	ldr	r4, [pc, #28]	; (405c6c <_write_r+0x20>)
  405c50:	4605      	mov	r5, r0
  405c52:	4608      	mov	r0, r1
  405c54:	4611      	mov	r1, r2
  405c56:	2200      	movs	r2, #0
  405c58:	6022      	str	r2, [r4, #0]
  405c5a:	461a      	mov	r2, r3
  405c5c:	f7fc ff36 	bl	402acc <_write>
  405c60:	1c43      	adds	r3, r0, #1
  405c62:	d102      	bne.n	405c6a <_write_r+0x1e>
  405c64:	6823      	ldr	r3, [r4, #0]
  405c66:	b103      	cbz	r3, 405c6a <_write_r+0x1e>
  405c68:	602b      	str	r3, [r5, #0]
  405c6a:	bd38      	pop	{r3, r4, r5, pc}
  405c6c:	20400714 	.word	0x20400714

00405c70 <__swsetup_r>:
  405c70:	4b32      	ldr	r3, [pc, #200]	; (405d3c <__swsetup_r+0xcc>)
  405c72:	b570      	push	{r4, r5, r6, lr}
  405c74:	681d      	ldr	r5, [r3, #0]
  405c76:	4606      	mov	r6, r0
  405c78:	460c      	mov	r4, r1
  405c7a:	b125      	cbz	r5, 405c86 <__swsetup_r+0x16>
  405c7c:	69ab      	ldr	r3, [r5, #24]
  405c7e:	b913      	cbnz	r3, 405c86 <__swsetup_r+0x16>
  405c80:	4628      	mov	r0, r5
  405c82:	f7ff f91d 	bl	404ec0 <__sinit>
  405c86:	4b2e      	ldr	r3, [pc, #184]	; (405d40 <__swsetup_r+0xd0>)
  405c88:	429c      	cmp	r4, r3
  405c8a:	d10f      	bne.n	405cac <__swsetup_r+0x3c>
  405c8c:	686c      	ldr	r4, [r5, #4]
  405c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405c92:	b29a      	uxth	r2, r3
  405c94:	0715      	lsls	r5, r2, #28
  405c96:	d42c      	bmi.n	405cf2 <__swsetup_r+0x82>
  405c98:	06d0      	lsls	r0, r2, #27
  405c9a:	d411      	bmi.n	405cc0 <__swsetup_r+0x50>
  405c9c:	2209      	movs	r2, #9
  405c9e:	6032      	str	r2, [r6, #0]
  405ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ca4:	81a3      	strh	r3, [r4, #12]
  405ca6:	f04f 30ff 	mov.w	r0, #4294967295
  405caa:	bd70      	pop	{r4, r5, r6, pc}
  405cac:	4b25      	ldr	r3, [pc, #148]	; (405d44 <__swsetup_r+0xd4>)
  405cae:	429c      	cmp	r4, r3
  405cb0:	d101      	bne.n	405cb6 <__swsetup_r+0x46>
  405cb2:	68ac      	ldr	r4, [r5, #8]
  405cb4:	e7eb      	b.n	405c8e <__swsetup_r+0x1e>
  405cb6:	4b24      	ldr	r3, [pc, #144]	; (405d48 <__swsetup_r+0xd8>)
  405cb8:	429c      	cmp	r4, r3
  405cba:	bf08      	it	eq
  405cbc:	68ec      	ldreq	r4, [r5, #12]
  405cbe:	e7e6      	b.n	405c8e <__swsetup_r+0x1e>
  405cc0:	0751      	lsls	r1, r2, #29
  405cc2:	d512      	bpl.n	405cea <__swsetup_r+0x7a>
  405cc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405cc6:	b141      	cbz	r1, 405cda <__swsetup_r+0x6a>
  405cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405ccc:	4299      	cmp	r1, r3
  405cce:	d002      	beq.n	405cd6 <__swsetup_r+0x66>
  405cd0:	4630      	mov	r0, r6
  405cd2:	f7ff fd2b 	bl	40572c <_free_r>
  405cd6:	2300      	movs	r3, #0
  405cd8:	6363      	str	r3, [r4, #52]	; 0x34
  405cda:	89a3      	ldrh	r3, [r4, #12]
  405cdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  405ce0:	81a3      	strh	r3, [r4, #12]
  405ce2:	2300      	movs	r3, #0
  405ce4:	6063      	str	r3, [r4, #4]
  405ce6:	6923      	ldr	r3, [r4, #16]
  405ce8:	6023      	str	r3, [r4, #0]
  405cea:	89a3      	ldrh	r3, [r4, #12]
  405cec:	f043 0308 	orr.w	r3, r3, #8
  405cf0:	81a3      	strh	r3, [r4, #12]
  405cf2:	6923      	ldr	r3, [r4, #16]
  405cf4:	b94b      	cbnz	r3, 405d0a <__swsetup_r+0x9a>
  405cf6:	89a3      	ldrh	r3, [r4, #12]
  405cf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
  405cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405d00:	d003      	beq.n	405d0a <__swsetup_r+0x9a>
  405d02:	4621      	mov	r1, r4
  405d04:	4630      	mov	r0, r6
  405d06:	f7ff f997 	bl	405038 <__smakebuf_r>
  405d0a:	89a2      	ldrh	r2, [r4, #12]
  405d0c:	f012 0301 	ands.w	r3, r2, #1
  405d10:	d00c      	beq.n	405d2c <__swsetup_r+0xbc>
  405d12:	2300      	movs	r3, #0
  405d14:	60a3      	str	r3, [r4, #8]
  405d16:	6963      	ldr	r3, [r4, #20]
  405d18:	425b      	negs	r3, r3
  405d1a:	61a3      	str	r3, [r4, #24]
  405d1c:	6923      	ldr	r3, [r4, #16]
  405d1e:	b953      	cbnz	r3, 405d36 <__swsetup_r+0xc6>
  405d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405d24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  405d28:	d1ba      	bne.n	405ca0 <__swsetup_r+0x30>
  405d2a:	bd70      	pop	{r4, r5, r6, pc}
  405d2c:	0792      	lsls	r2, r2, #30
  405d2e:	bf58      	it	pl
  405d30:	6963      	ldrpl	r3, [r4, #20]
  405d32:	60a3      	str	r3, [r4, #8]
  405d34:	e7f2      	b.n	405d1c <__swsetup_r+0xac>
  405d36:	2000      	movs	r0, #0
  405d38:	e7f7      	b.n	405d2a <__swsetup_r+0xba>
  405d3a:	bf00      	nop
  405d3c:	20400048 	.word	0x20400048
  405d40:	004062f0 	.word	0x004062f0
  405d44:	00406310 	.word	0x00406310
  405d48:	004062d0 	.word	0x004062d0

00405d4c <_close_r>:
  405d4c:	b538      	push	{r3, r4, r5, lr}
  405d4e:	4c06      	ldr	r4, [pc, #24]	; (405d68 <_close_r+0x1c>)
  405d50:	2300      	movs	r3, #0
  405d52:	4605      	mov	r5, r0
  405d54:	4608      	mov	r0, r1
  405d56:	6023      	str	r3, [r4, #0]
  405d58:	f7fb fe36 	bl	4019c8 <_close>
  405d5c:	1c43      	adds	r3, r0, #1
  405d5e:	d102      	bne.n	405d66 <_close_r+0x1a>
  405d60:	6823      	ldr	r3, [r4, #0]
  405d62:	b103      	cbz	r3, 405d66 <_close_r+0x1a>
  405d64:	602b      	str	r3, [r5, #0]
  405d66:	bd38      	pop	{r3, r4, r5, pc}
  405d68:	20400714 	.word	0x20400714

00405d6c <_fstat_r>:
  405d6c:	b538      	push	{r3, r4, r5, lr}
  405d6e:	4c07      	ldr	r4, [pc, #28]	; (405d8c <_fstat_r+0x20>)
  405d70:	2300      	movs	r3, #0
  405d72:	4605      	mov	r5, r0
  405d74:	4608      	mov	r0, r1
  405d76:	4611      	mov	r1, r2
  405d78:	6023      	str	r3, [r4, #0]
  405d7a:	f7fb fe28 	bl	4019ce <_fstat>
  405d7e:	1c43      	adds	r3, r0, #1
  405d80:	d102      	bne.n	405d88 <_fstat_r+0x1c>
  405d82:	6823      	ldr	r3, [r4, #0]
  405d84:	b103      	cbz	r3, 405d88 <_fstat_r+0x1c>
  405d86:	602b      	str	r3, [r5, #0]
  405d88:	bd38      	pop	{r3, r4, r5, pc}
  405d8a:	bf00      	nop
  405d8c:	20400714 	.word	0x20400714

00405d90 <_isatty_r>:
  405d90:	b538      	push	{r3, r4, r5, lr}
  405d92:	4c06      	ldr	r4, [pc, #24]	; (405dac <_isatty_r+0x1c>)
  405d94:	2300      	movs	r3, #0
  405d96:	4605      	mov	r5, r0
  405d98:	4608      	mov	r0, r1
  405d9a:	6023      	str	r3, [r4, #0]
  405d9c:	f7fb fe1c 	bl	4019d8 <_isatty>
  405da0:	1c43      	adds	r3, r0, #1
  405da2:	d102      	bne.n	405daa <_isatty_r+0x1a>
  405da4:	6823      	ldr	r3, [r4, #0]
  405da6:	b103      	cbz	r3, 405daa <_isatty_r+0x1a>
  405da8:	602b      	str	r3, [r5, #0]
  405daa:	bd38      	pop	{r3, r4, r5, pc}
  405dac:	20400714 	.word	0x20400714

00405db0 <_lseek_r>:
  405db0:	b538      	push	{r3, r4, r5, lr}
  405db2:	4c07      	ldr	r4, [pc, #28]	; (405dd0 <_lseek_r+0x20>)
  405db4:	4605      	mov	r5, r0
  405db6:	4608      	mov	r0, r1
  405db8:	4611      	mov	r1, r2
  405dba:	2200      	movs	r2, #0
  405dbc:	6022      	str	r2, [r4, #0]
  405dbe:	461a      	mov	r2, r3
  405dc0:	f7fb fe0c 	bl	4019dc <_lseek>
  405dc4:	1c43      	adds	r3, r0, #1
  405dc6:	d102      	bne.n	405dce <_lseek_r+0x1e>
  405dc8:	6823      	ldr	r3, [r4, #0]
  405dca:	b103      	cbz	r3, 405dce <_lseek_r+0x1e>
  405dcc:	602b      	str	r3, [r5, #0]
  405dce:	bd38      	pop	{r3, r4, r5, pc}
  405dd0:	20400714 	.word	0x20400714

00405dd4 <__ascii_mbtowc>:
  405dd4:	b082      	sub	sp, #8
  405dd6:	b901      	cbnz	r1, 405dda <__ascii_mbtowc+0x6>
  405dd8:	a901      	add	r1, sp, #4
  405dda:	b142      	cbz	r2, 405dee <__ascii_mbtowc+0x1a>
  405ddc:	b14b      	cbz	r3, 405df2 <__ascii_mbtowc+0x1e>
  405dde:	7813      	ldrb	r3, [r2, #0]
  405de0:	600b      	str	r3, [r1, #0]
  405de2:	7812      	ldrb	r2, [r2, #0]
  405de4:	1c10      	adds	r0, r2, #0
  405de6:	bf18      	it	ne
  405de8:	2001      	movne	r0, #1
  405dea:	b002      	add	sp, #8
  405dec:	4770      	bx	lr
  405dee:	4610      	mov	r0, r2
  405df0:	e7fb      	b.n	405dea <__ascii_mbtowc+0x16>
  405df2:	f06f 0001 	mvn.w	r0, #1
  405df6:	e7f8      	b.n	405dea <__ascii_mbtowc+0x16>

00405df8 <__malloc_lock>:
  405df8:	4770      	bx	lr

00405dfa <__malloc_unlock>:
  405dfa:	4770      	bx	lr

00405dfc <_read_r>:
  405dfc:	b538      	push	{r3, r4, r5, lr}
  405dfe:	4c07      	ldr	r4, [pc, #28]	; (405e1c <_read_r+0x20>)
  405e00:	4605      	mov	r5, r0
  405e02:	4608      	mov	r0, r1
  405e04:	4611      	mov	r1, r2
  405e06:	2200      	movs	r2, #0
  405e08:	6022      	str	r2, [r4, #0]
  405e0a:	461a      	mov	r2, r3
  405e0c:	f7fc fe4c 	bl	402aa8 <_read>
  405e10:	1c43      	adds	r3, r0, #1
  405e12:	d102      	bne.n	405e1a <_read_r+0x1e>
  405e14:	6823      	ldr	r3, [r4, #0]
  405e16:	b103      	cbz	r3, 405e1a <_read_r+0x1e>
  405e18:	602b      	str	r3, [r5, #0]
  405e1a:	bd38      	pop	{r3, r4, r5, pc}
  405e1c:	20400714 	.word	0x20400714

00405e20 <__ascii_wctomb>:
  405e20:	b149      	cbz	r1, 405e36 <__ascii_wctomb+0x16>
  405e22:	2aff      	cmp	r2, #255	; 0xff
  405e24:	bf85      	ittet	hi
  405e26:	238a      	movhi	r3, #138	; 0x8a
  405e28:	6003      	strhi	r3, [r0, #0]
  405e2a:	700a      	strbls	r2, [r1, #0]
  405e2c:	f04f 30ff 	movhi.w	r0, #4294967295
  405e30:	bf98      	it	ls
  405e32:	2001      	movls	r0, #1
  405e34:	4770      	bx	lr
  405e36:	4608      	mov	r0, r1
  405e38:	4770      	bx	lr
  405e3a:	0000      	movs	r0, r0
  405e3c:	61746144 	.word	0x61746144
  405e40:	6c6f6320 	.word	0x6c6f6320
  405e44:	7463656c 	.word	0x7463656c
  405e48:	202c6465 	.word	0x202c6465
  405e4c:	6e75616c 	.word	0x6e75616c
  405e50:	6e696863 	.word	0x6e696863
  405e54:	6f632067 	.word	0x6f632067
  405e58:	6f72746e 	.word	0x6f72746e
  405e5c:	6f6c206c 	.word	0x6f6c206c
  405e60:	6620706f 	.word	0x6620706f
  405e64:	206d6f72 	.word	0x206d6f72
  405e68:	20636461 	.word	0x20636461
  405e6c:	00000a30 	.word	0x00000a30
  405e70:	25206925 	.word	0x25206925
  405e74:	69252069 	.word	0x69252069
  405e78:	20692520 	.word	0x20692520
  405e7c:	00000a20 	.word	0x00000a20
  405e80:	61746144 	.word	0x61746144
  405e84:	6c6f6320 	.word	0x6c6f6320
  405e88:	7463656c 	.word	0x7463656c
  405e8c:	202c6465 	.word	0x202c6465
  405e90:	6e75616c 	.word	0x6e75616c
  405e94:	6e696863 	.word	0x6e696863
  405e98:	6f632067 	.word	0x6f632067
  405e9c:	6f72746e 	.word	0x6f72746e
  405ea0:	6f6c206c 	.word	0x6f6c206c
  405ea4:	6620706f 	.word	0x6620706f
  405ea8:	206d6f72 	.word	0x206d6f72
  405eac:	20636461 	.word	0x20636461
  405eb0:	000a2031 	.word	0x000a2031
  405eb4:	682f2e2e 	.word	0x682f2e2e
  405eb8:	732f6c61 	.word	0x732f6c61
  405ebc:	682f6372 	.word	0x682f6372
  405ec0:	615f6c61 	.word	0x615f6c61
  405ec4:	615f6364 	.word	0x615f6364
  405ec8:	636e7973 	.word	0x636e7973
  405ecc:	0000632e 	.word	0x0000632e
  405ed0:	682f2e2e 	.word	0x682f2e2e
  405ed4:	732f6c61 	.word	0x732f6c61
  405ed8:	682f6372 	.word	0x682f6372
  405edc:	695f6c61 	.word	0x695f6c61
  405ee0:	00632e6f 	.word	0x00632e6f
  405ee4:	682f2e2e 	.word	0x682f2e2e
  405ee8:	732f6c61 	.word	0x732f6c61
  405eec:	682f6372 	.word	0x682f6372
  405ef0:	705f6c61 	.word	0x705f6c61
  405ef4:	632e6d77 	.word	0x632e6d77
  405ef8:	00000000 	.word	0x00000000
  405efc:	682f2e2e 	.word	0x682f2e2e
  405f00:	732f6c61 	.word	0x732f6c61
  405f04:	682f6372 	.word	0x682f6372
  405f08:	745f6c61 	.word	0x745f6c61
  405f0c:	72656d69 	.word	0x72656d69
  405f10:	0000632e 	.word	0x0000632e
  405f14:	682f2e2e 	.word	0x682f2e2e
  405f18:	732f6c61 	.word	0x732f6c61
  405f1c:	682f6372 	.word	0x682f6372
  405f20:	755f6c61 	.word	0x755f6c61
  405f24:	74726173 	.word	0x74726173
  405f28:	6e79735f 	.word	0x6e79735f
  405f2c:	00632e63 	.word	0x00632e63
  405f30:	682f2e2e 	.word	0x682f2e2e
  405f34:	752f6c61 	.word	0x752f6c61
  405f38:	736c6974 	.word	0x736c6974
  405f3c:	6372732f 	.word	0x6372732f
  405f40:	6974752f 	.word	0x6974752f
  405f44:	6c5f736c 	.word	0x6c5f736c
  405f48:	2e747369 	.word	0x2e747369
  405f4c:	00000063 	.word	0x00000063
  405f50:	682f2e2e 	.word	0x682f2e2e
  405f54:	752f6c61 	.word	0x752f6c61
  405f58:	736c6974 	.word	0x736c6974
  405f5c:	6372732f 	.word	0x6372732f
  405f60:	6974752f 	.word	0x6974752f
  405f64:	725f736c 	.word	0x725f736c
  405f68:	62676e69 	.word	0x62676e69
  405f6c:	65666675 	.word	0x65666675
  405f70:	00632e72 	.word	0x00632e72

00405f74 <_afecs>:
  405f74:	00000000 2f84310b 23000000 ffffffff     .....1./...#....
  405f84:	0000ffff 00000000 00000000 00000000     ................
  405f94:	0000010c 00000000 00000000 00000000     ................
  405fa4:	00000000 00000200 00000200 00000200     ................
  405fb4:	00000200 00000200 00000200 00000200     ................
  405fc4:	00000200 00000200 00000200 00000200     ................
  405fd4:	00000200 00000001 2f84310b 23000000     .........1./...#
  405fe4:	ffffffff 0000ffff 00000000 00000000     ................
  405ff4:	00000000 0000010c 00000000 00000000     ................
	...
  40600c:	00000200 00000200 00000200 00000200     ................
  40601c:	00000200 00000200 00000200 00000200     ................
  40602c:	00000200 00000200 00000200 00000200     ................
  40603c:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  40604c:	63656661 0000632e                       afec.c..

00406054 <_ext_irq>:
  406054:	00000000 00000024 00000000 00000000     ....$...........
	...
  406070:	00000001 00002000 00002000 00002000     ..... ... ... ..
  406080:	00000000 00002000 00000000 00000003     ..... ..........
  406090:	00080000 00000000 00000000 00000000     ................
	...

004060a8 <_pio_irq_n>:
  4060a8:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  4060b8:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  4060c8:	00000000                                ....

004060cc <_pwms>:
  4060cc:	40020000 0000001f 00010005 00000001     ...@............
  4060dc:	00000001 000000ff 00000000 00000004     ................
	...
  4060f8:	00000002 00406154 00000001 20400388     ....Ta@.......@ 
  406108:	4005c000 0000003c 00010005 00000001     ...@<...........
  406118:	00000001 000000ff 00000000 00000004     ................
	...
  406134:	00000001 00406144 00000001 2040037c     ....Da@.....|.@ 

00406144 <_ch_cfg1>:
  406144:	00000000 0000010b 000003e8 00000200     ................

00406154 <_ch_cfg0>:
  406154:	00000000 0000010b 000003e8 00000200     ................
  406164:	00000002 0000010b 000003e8 00000200     ................
  406174:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  406184:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  406194:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

004061a0 <_usarts>:
  4061a0:	00000001 001008c0 000100f4 682f2e2e     ............../h
  4061b0:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  4061c0:	632e7472 00000000                       rt.c....

004061c8 <_cfgs>:
  4061c8:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  4061d8:	00000040 00000000 00000040 00000000     @.......@.......
  4061e8:	00000040 00000000 00000040 00000000     @.......@.......
  4061f8:	00000040 00000000 00000040 00000000     @.......@.......
  406208:	00000040 00000000 00000040 00000000     @.......@.......
  406218:	00000040 00000000 00000040 00000000     @.......@.......
  406228:	00000040 00000000 00000040 00000000     @.......@.......
  406238:	00000040 00000000 00000040 00000000     @.......@.......
  406248:	00000040 00000000 00000040 00000000     @.......@.......
  406258:	00000040 00000000 00000040 00000000     @.......@.......
  406268:	00000040 00000000 00000040 00000000     @.......@.......
  406278:	00000040 00000000 00000040 00000000     @.......@.......

00406288 <_global_impure_ptr>:
  406288:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  406298:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  4062a8:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  4062b8:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  4062c8:	4e614e00 00000000                       .NaN....

004062d0 <__sf_fake_stderr>:
	...

004062f0 <__sf_fake_stdin>:
	...

00406310 <__sf_fake_stdout>:
	...

00406330 <__mprec_bigtens>:
  406330:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  406340:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  406350:	7f73bf3c 75154fdd                       <.s..O.u

00406358 <__mprec_tens>:
  406358:	00000000 3ff00000 00000000 40240000     .......?......$@
  406368:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  406378:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  406388:	00000000 412e8480 00000000 416312d0     .......A......cA
  406398:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4063a8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4063b8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4063c8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4063d8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4063e8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4063f8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406408:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406418:	79d99db4 44ea7843                       ...yCx.D

00406420 <p05.6047>:
  406420:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  406430:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  406440:	5849534f 00002e00                                OSIX...

00406447 <_ctype_>:
  406447:	20202000 20202020 28282020 20282828     .         ((((( 
  406457:	20202020 20202020 20202020 20202020                     
  406467:	10108820 10101010 10101010 10101010      ...............
  406477:	04040410 04040404 10040404 10101010     ................
  406487:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406497:	01010101 01010101 01010101 10101010     ................
  4064a7:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4064b7:	02020202 02020202 02020202 10101010     ................
  4064c7:	00000020 00000000 00000000 00000000      ...............
	...

00406548 <_init>:
  406548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40654a:	bf00      	nop
  40654c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40654e:	bc08      	pop	{r3}
  406550:	469e      	mov	lr, r3
  406552:	4770      	bx	lr

00406554 <__init_array_start>:
  406554:	0040018d 	.word	0x0040018d

00406558 <_fini>:
  406558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40655a:	bf00      	nop
  40655c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40655e:	bc08      	pop	{r3}
  406560:	469e      	mov	lr, r3
  406562:	4770      	bx	lr

00406564 <__fini_array_start>:
  406564:	00400169 	.word	0x00400169
