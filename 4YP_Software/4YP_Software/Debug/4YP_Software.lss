
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000055a0  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  004055a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000158  20400218  004057b8  00020218  2**2
                  ALLOC
  3 .heap         00000200  20400370  00405910  00020218  2**0
                  ALLOC
  4 .stack        00000400  20400570  00405b10  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   000221e7  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004870  00000000  00000000  00042486  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a4a6  00000000  00000000  00046cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c78  00000000  00000000  0005119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ac0  00000000  00000000  00051e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00045ef7  00000000  00000000  000528d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001bd1c  00000000  00000000  000987cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00154613  00000000  00000000  000b44e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002bf0  00000000  00000000  00208afc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 09 40 20 89 03 40 00 85 03 40 00 85 03 40 00     p.@ ..@...@...@.
  400010:	85 03 40 00 85 03 40 00 85 03 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	85 03 40 00 85 03 40 00 00 00 00 00 85 03 40 00     ..@...@.......@.
  40003c:	85 03 40 00 85 03 40 00 85 03 40 00 85 03 40 00     ..@...@...@...@.
  40004c:	85 03 40 00 85 03 40 00 85 03 40 00 85 03 40 00     ..@...@...@...@.
  40005c:	85 03 40 00 85 03 40 00 00 00 00 00 51 13 40 00     ..@...@.....Q.@.
  40006c:	85 03 40 00 85 03 40 00 85 03 40 00 85 03 40 00     ..@...@...@...@.
  40007c:	85 03 40 00 45 13 40 00 85 03 40 00 85 03 40 00     ..@.E.@...@...@.
  40008c:	85 03 40 00 85 03 40 00 85 03 40 00 85 03 40 00     ..@...@...@...@.
  40009c:	e1 18 40 00 85 03 40 00 85 03 40 00 85 03 40 00     ..@...@...@...@.
  4000ac:	85 03 40 00 85 03 40 00 85 03 40 00 85 03 40 00     ..@...@...@...@.
  4000bc:	9d 14 40 00 85 03 40 00 85 03 40 00 85 03 40 00     ..@...@...@...@.
  4000cc:	85 03 40 00 85 03 40 00 15 11 40 00 85 03 40 00     ..@...@...@...@.
  4000dc:	85 03 40 00 85 03 40 00 85 03 40 00 85 03 40 00     ..@...@...@...@.
  4000ec:	85 03 40 00 85 03 40 00 85 03 40 00 85 03 40 00     ..@...@...@...@.
  4000fc:	85 03 40 00 85 03 40 00 85 03 40 00 f5 18 40 00     ..@...@...@...@.
  40010c:	85 03 40 00 85 03 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 85 03 40 00 85 03 40 00 85 03 40 00     ......@...@...@.
  40012c:	85 03 40 00 b1 14 40 00 85 03 40 00 85 03 40 00     ..@...@...@...@.
  40013c:	85 03 40 00 85 03 40 00 85 03 40 00 85 03 40 00     ..@...@...@...@.
  40014c:	85 03 40 00 85 03 40 00 85 03 40 00 85 03 40 00     ..@...@...@...@.
  40015c:	85 03 40 00 85 03 40 00 85 03 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	004055a0 	.word	0x004055a0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004055a0 	.word	0x004055a0
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	004055a0 	.word	0x004055a0
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	004007e9 	.word	0x004007e9
  4001e4:	00401c45 	.word	0x00401c45

004001e8 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  4001e8:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_sync_enable_channel(ADC_CURRENT_A);
  4001ea:	4d11      	ldr	r5, [pc, #68]	; (400230 <adc_enable_all+0x48>)
  4001ec:	2108      	movs	r1, #8
  4001ee:	4628      	mov	r0, r5
  4001f0:	4c10      	ldr	r4, [pc, #64]	; (400234 <adc_enable_all+0x4c>)
  4001f2:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_CURRENT_B);
  4001f4:	2102      	movs	r1, #2
  4001f6:	4628      	mov	r0, r5
  4001f8:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_CURRENT_C);
  4001fa:	4e0f      	ldr	r6, [pc, #60]	; (400238 <adc_enable_all+0x50>)
  4001fc:	2101      	movs	r1, #1
  4001fe:	4630      	mov	r0, r6
  400200:	47a0      	blx	r4
	
	adc_sync_enable_channel(ADC_SUPPL_VOLTAGE);
  400202:	2106      	movs	r1, #6
  400204:	4630      	mov	r0, r6
  400206:	47a0      	blx	r4
	
	adc_sync_enable_channel(ADC_TEMP_1);
  400208:	2105      	movs	r1, #5
  40020a:	4630      	mov	r0, r6
  40020c:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_2);
  40020e:	2106      	movs	r1, #6
  400210:	4628      	mov	r0, r5
  400212:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_sync_enable_channel(ADC_TEMP_4);
  400214:	210a      	movs	r1, #10
  400216:	4628      	mov	r0, r5
  400218:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_5);
  40021a:	2100      	movs	r1, #0
  40021c:	4630      	mov	r0, r6
  40021e:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_6);
  400220:	2105      	movs	r1, #5
  400222:	4628      	mov	r0, r5
  400224:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_MOTOR);
  400226:	2100      	movs	r1, #0
  400228:	4628      	mov	r0, r5
  40022a:	47a0      	blx	r4
  40022c:	bd70      	pop	{r4, r5, r6, pc}
  40022e:	bf00      	nop
  400230:	20400348 	.word	0x20400348
  400234:	00400921 	.word	0x00400921
  400238:	20400368 	.word	0x20400368

0040023c <adc_read>:
	adc_sync_disable_channel(ADC_TEMP_6);
	adc_sync_disable_channel(ADC_TEMP_MOTOR);
}

//reads ADC value
uint16_t adc_read(struct adc_sync_descriptor *const descr, const uint8_t channel){
  40023c:	b510      	push	{r4, lr}
  40023e:	b082      	sub	sp, #8
	
	uint16_t temp;
	
	adc_sync_read_channel(descr, channel, (uint8_t *)&temp, 2);
  400240:	2302      	movs	r3, #2
  400242:	f10d 0206 	add.w	r2, sp, #6
  400246:	4c03      	ldr	r4, [pc, #12]	; (400254 <adc_read+0x18>)
  400248:	47a0      	blx	r4
	
	return temp;
}
  40024a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40024e:	b002      	add	sp, #8
  400250:	bd10      	pop	{r4, pc}
  400252:	bf00      	nop
  400254:	0040094d 	.word	0x0040094d

00400258 <pwm_enable_all>:



//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400258:	b570      	push	{r4, r5, r6, lr}
	//note it's possible to individual channels, but not through these functions
	//functions from hal_pwm.h
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  40025a:	4c0a      	ldr	r4, [pc, #40]	; (400284 <pwm_enable_all+0x2c>)
  40025c:	4620      	mov	r0, r4
  40025e:	4e0a      	ldr	r6, [pc, #40]	; (400288 <pwm_enable_all+0x30>)
  400260:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  400262:	4d0a      	ldr	r5, [pc, #40]	; (40028c <pwm_enable_all+0x34>)
  400264:	4628      	mov	r0, r5
  400266:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  400268:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40026c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400270:	4620      	mov	r0, r4
  400272:	4c07      	ldr	r4, [pc, #28]	; (400290 <pwm_enable_all+0x38>)
  400274:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1  , PWM_PERIOD, PWM_PERIOD>>1);
  400276:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40027a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40027e:	4628      	mov	r0, r5
  400280:	47a0      	blx	r4
  400282:	bd70      	pop	{r4, r5, r6, pc}
  400284:	204002c0 	.word	0x204002c0
  400288:	00400b6d 	.word	0x00400b6d
  40028c:	2040034c 	.word	0x2040034c
  400290:	00400ba9 	.word	0x00400ba9

00400294 <pwm_deadtime_init>:
	hri_pwm_write_CDTYUPD_reg(descr->device.hw, channel, duty_cycle);
	//hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);			//period is constant; only altering duty cycle
	//}
}

void pwm_deadtime_init(void){													//Check section 51.6.2.5 Dead-Time Generator in datasheet
  400294:	4770      	bx	lr
	...

00400298 <Current_Voltage_Inital_Test>:
	printf("Temp Motor = %i  \n",temp_test_data[6]);
	
	
}

void Current_Voltage_Inital_Test (void){
  400298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//Get Current Sensor and High Voltage reading and display values
	
	int current_test_data [3];
	
	current_test_data [0] = adc_read(ADC_CURRENT_A);
  40029c:	4d10      	ldr	r5, [pc, #64]	; (4002e0 <Current_Voltage_Inital_Test+0x48>)
  40029e:	2108      	movs	r1, #8
  4002a0:	4628      	mov	r0, r5
  4002a2:	4c10      	ldr	r4, [pc, #64]	; (4002e4 <Current_Voltage_Inital_Test+0x4c>)
  4002a4:	47a0      	blx	r4
  4002a6:	4606      	mov	r6, r0
	current_test_data [1] = adc_read(ADC_CURRENT_B);
  4002a8:	2102      	movs	r1, #2
  4002aa:	4628      	mov	r0, r5
  4002ac:	47a0      	blx	r4
  4002ae:	4607      	mov	r7, r0
	current_test_data [2] = adc_read(ADC_CURRENT_C);
  4002b0:	4d0d      	ldr	r5, [pc, #52]	; (4002e8 <Current_Voltage_Inital_Test+0x50>)
  4002b2:	2101      	movs	r1, #1
  4002b4:	4628      	mov	r0, r5
  4002b6:	47a0      	blx	r4
  4002b8:	4680      	mov	r8, r0
	
	int voltage_test_data;
	
	voltage_test_data = adc_read(ADC_SUPPL_VOLTAGE);
  4002ba:	2106      	movs	r1, #6
  4002bc:	4628      	mov	r0, r5
  4002be:	47a0      	blx	r4
  4002c0:	4605      	mov	r5, r0
	
	printf("\n Current and Voltage Testing -----------------\n");
  4002c2:	480a      	ldr	r0, [pc, #40]	; (4002ec <Current_Voltage_Inital_Test+0x54>)
  4002c4:	4c0a      	ldr	r4, [pc, #40]	; (4002f0 <Current_Voltage_Inital_Test+0x58>)
  4002c6:	47a0      	blx	r4
	printf("Raw Data \n");
  4002c8:	480a      	ldr	r0, [pc, #40]	; (4002f4 <Current_Voltage_Inital_Test+0x5c>)
  4002ca:	47a0      	blx	r4
	printf("CurrA = %i \t\t CurrB = %i \t\t CurrC = %i \n",current_test_data[0], current_test_data[1], current_test_data[2]);
  4002cc:	4643      	mov	r3, r8
  4002ce:	463a      	mov	r2, r7
  4002d0:	4631      	mov	r1, r6
  4002d2:	4809      	ldr	r0, [pc, #36]	; (4002f8 <Current_Voltage_Inital_Test+0x60>)
  4002d4:	47a0      	blx	r4
	printf("Supply Voltage = %i  \n",voltage_test_data);
  4002d6:	4629      	mov	r1, r5
  4002d8:	4808      	ldr	r0, [pc, #32]	; (4002fc <Current_Voltage_Inital_Test+0x64>)
  4002da:	47a0      	blx	r4
  4002dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002e0:	20400348 	.word	0x20400348
  4002e4:	0040023d 	.word	0x0040023d
  4002e8:	20400368 	.word	0x20400368
  4002ec:	00404f20 	.word	0x00404f20
  4002f0:	00402e85 	.word	0x00402e85
  4002f4:	00404ea8 	.word	0x00404ea8
  4002f8:	00404f54 	.word	0x00404f54
  4002fc:	00404f80 	.word	0x00404f80

00400300 <Timer_Counter_Initial_Test>:

void PWM_Initial_Test (void);
void POS_Sensor_Initial_Test (void);


void Timer_Counter_Initial_Test (void){
  400300:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	/*
		Finction to observe the functionality of the counters
		Generates a square wave on GPIO_6 that can be used to drive the counters
		Displays the coutners syncronously with the generated wave
	*/
	printf("Testing Timer Counters");
  400304:	4816      	ldr	r0, [pc, #88]	; (400360 <Timer_Counter_Initial_Test+0x60>)
  400306:	4b17      	ldr	r3, [pc, #92]	; (400364 <Timer_Counter_Initial_Test+0x64>)
  400308:	4798      	blx	r3
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV(mask)) >> TC_CV_CV_Pos;
}

static inline hri_tc_cv_reg_t hri_tc_read_CV_CV_bf(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV_Msk) >> TC_CV_CV_Pos;
  40030a:	4e17      	ldr	r6, [pc, #92]	; (400368 <Timer_Counter_Initial_Test+0x68>)
  40030c:	6931      	ldr	r1, [r6, #16]
  40030e:	6d32      	ldr	r2, [r6, #80]	; 0x50
	
	while(1){
		
		printf("Encoder A = \t %u ; \t %u \n"  , (unsigned int) hri_tc_read_CV_CV_bf(TC0,0) , (unsigned int) hri_tc_read_CV_CV_bf(TC0,1));
  400310:	4816      	ldr	r0, [pc, #88]	; (40036c <Timer_Counter_Initial_Test+0x6c>)
  400312:	4c14      	ldr	r4, [pc, #80]	; (400364 <Timer_Counter_Initial_Test+0x64>)
  400314:	47a0      	blx	r4
  400316:	4d16      	ldr	r5, [pc, #88]	; (400370 <Timer_Counter_Initial_Test+0x70>)
  400318:	6929      	ldr	r1, [r5, #16]
  40031a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		printf("Encoder B = \t %u ; \t %u \n\n", (unsigned int) hri_tc_read_CV_CV_bf(TC3,0) , (unsigned int) hri_tc_read_CV_CV_bf(TC3,1));
  40031c:	4815      	ldr	r0, [pc, #84]	; (400374 <Timer_Counter_Initial_Test+0x74>)
  40031e:	47a0      	blx	r4
	((Pio *)hw)->PIO_CODR = PIO_ODSR_P31;
}

static inline void hri_pio_set_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
	((Pio *)hw)->PIO_SODR = mask;
  400320:	f8df a058 	ldr.w	sl, [pc, #88]	; 40037c <Timer_Counter_Initial_Test+0x7c>
  400324:	f44f 7b80 	mov.w	fp, #256	; 0x100
  400328:	f8ca b030 	str.w	fp, [sl, #48]	; 0x30
  40032c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 400380 <Timer_Counter_Initial_Test+0x80>
  400330:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
  400334:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
		
		gpio_set_pin_level(PIN_USER_LED, true);
		gpio_set_pin_level(PIN_GPIO_6, true);
		delay_ms(500);
  400338:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  40033c:	4f0e      	ldr	r7, [pc, #56]	; (400378 <Timer_Counter_Initial_Test+0x78>)
  40033e:	47b8      	blx	r7
  400340:	6931      	ldr	r1, [r6, #16]
  400342:	6d32      	ldr	r2, [r6, #80]	; 0x50
		
		printf("Encoder A = \t %u ; \t %u \n"  , (unsigned int) hri_tc_read_CV_CV_bf(TC0,0) , (unsigned int) hri_tc_read_CV_CV_bf(TC0,1));
  400344:	4809      	ldr	r0, [pc, #36]	; (40036c <Timer_Counter_Initial_Test+0x6c>)
  400346:	47a0      	blx	r4
  400348:	6929      	ldr	r1, [r5, #16]
  40034a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		printf("Encoder B = \t %u ; \t %u \n\n", (unsigned int) hri_tc_read_CV_CV_bf(TC3,0) , (unsigned int) hri_tc_read_CV_CV_bf(TC3,1));
  40034c:	4809      	ldr	r0, [pc, #36]	; (400374 <Timer_Counter_Initial_Test+0x74>)
  40034e:	47a0      	blx	r4
	((Pio *)hw)->PIO_CODR = ~data;
}

static inline void hri_pio_clear_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
	((Pio *)hw)->PIO_CODR = mask;
  400350:	f8ca b034 	str.w	fp, [sl, #52]	; 0x34
  400354:	f8c8 9034 	str.w	r9, [r8, #52]	; 0x34
		
		gpio_set_pin_level(PIN_USER_LED, false);
		gpio_set_pin_level(PIN_GPIO_6, false);
		delay_ms(500);
  400358:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  40035c:	47b8      	blx	r7
  40035e:	e7d4      	b.n	40030a <Timer_Counter_Initial_Test+0xa>
  400360:	00404f98 	.word	0x00404f98
  400364:	00402e85 	.word	0x00402e85
  400368:	4000c000 	.word	0x4000c000
  40036c:	00404fb0 	.word	0x00404fb0
  400370:	40054000 	.word	0x40054000
  400374:	00404fcc 	.word	0x00404fcc
  400378:	00400a1d 	.word	0x00400a1d
  40037c:	400e1200 	.word	0x400e1200
  400380:	400e1400 	.word	0x400e1400

00400384 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400384:	e7fe      	b.n	400384 <Dummy_Handler>
	...

00400388 <Reset_Handler>:
{
  400388:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40038a:	4b10      	ldr	r3, [pc, #64]	; (4003cc <Reset_Handler+0x44>)
  40038c:	4a10      	ldr	r2, [pc, #64]	; (4003d0 <Reset_Handler+0x48>)
  40038e:	429a      	cmp	r2, r3
  400390:	d009      	beq.n	4003a6 <Reset_Handler+0x1e>
  400392:	4b0e      	ldr	r3, [pc, #56]	; (4003cc <Reset_Handler+0x44>)
  400394:	4a0e      	ldr	r2, [pc, #56]	; (4003d0 <Reset_Handler+0x48>)
  400396:	e003      	b.n	4003a0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400398:	6811      	ldr	r1, [r2, #0]
  40039a:	6019      	str	r1, [r3, #0]
  40039c:	3304      	adds	r3, #4
  40039e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4003a0:	490c      	ldr	r1, [pc, #48]	; (4003d4 <Reset_Handler+0x4c>)
  4003a2:	428b      	cmp	r3, r1
  4003a4:	d3f8      	bcc.n	400398 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4003a6:	4b0c      	ldr	r3, [pc, #48]	; (4003d8 <Reset_Handler+0x50>)
  4003a8:	e002      	b.n	4003b0 <Reset_Handler+0x28>
                *pDest++ = 0;
  4003aa:	2200      	movs	r2, #0
  4003ac:	601a      	str	r2, [r3, #0]
  4003ae:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4003b0:	4a0a      	ldr	r2, [pc, #40]	; (4003dc <Reset_Handler+0x54>)
  4003b2:	4293      	cmp	r3, r2
  4003b4:	d3f9      	bcc.n	4003aa <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4003b6:	4a0a      	ldr	r2, [pc, #40]	; (4003e0 <Reset_Handler+0x58>)
  4003b8:	4b0a      	ldr	r3, [pc, #40]	; (4003e4 <Reset_Handler+0x5c>)
  4003ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4003be:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <Reset_Handler+0x60>)
  4003c2:	4798      	blx	r3
        main();
  4003c4:	4b09      	ldr	r3, [pc, #36]	; (4003ec <Reset_Handler+0x64>)
  4003c6:	4798      	blx	r3
  4003c8:	e7fe      	b.n	4003c8 <Reset_Handler+0x40>
  4003ca:	bf00      	nop
  4003cc:	20400000 	.word	0x20400000
  4003d0:	004055a0 	.word	0x004055a0
  4003d4:	20400218 	.word	0x20400218
  4003d8:	20400218 	.word	0x20400218
  4003dc:	20400370 	.word	0x20400370
  4003e0:	e000ed00 	.word	0xe000ed00
  4003e4:	00400000 	.word	0x00400000
  4003e8:	00402559 	.word	0x00402559
  4003ec:	00401b21 	.word	0x00401b21

004003f0 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PER = mask;
  4003f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4003f4:	4b08      	ldr	r3, [pc, #32]	; (400418 <ADC_0_PORT_init+0x28>)
  4003f6:	601a      	str	r2, [r3, #0]
  4003f8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4003fc:	2208      	movs	r2, #8
  4003fe:	601a      	str	r2, [r3, #0]
  400400:	2204      	movs	r2, #4
  400402:	601a      	str	r2, [r3, #0]
  400404:	4a05      	ldr	r2, [pc, #20]	; (40041c <ADC_0_PORT_init+0x2c>)
  400406:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40040a:	6011      	str	r1, [r2, #0]
  40040c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400410:	6011      	str	r1, [r2, #0]
  400412:	2201      	movs	r2, #1
  400414:	601a      	str	r2, [r3, #0]
  400416:	4770      	bx	lr
  400418:	400e1400 	.word	0x400e1400
  40041c:	400e0e00 	.word	0x400e0e00

00400420 <ADC_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400420:	4b04      	ldr	r3, [pc, #16]	; (400434 <ADC_0_CLOCK_init+0x14>)
  400422:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400424:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400428:	d103      	bne.n	400432 <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40042a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40042e:	4b01      	ldr	r3, [pc, #4]	; (400434 <ADC_0_CLOCK_init+0x14>)
  400430:	611a      	str	r2, [r3, #16]
  400432:	4770      	bx	lr
  400434:	400e0600 	.word	0x400e0600

00400438 <ADC_0_init>:

	_pmc_enable_periph_clock(ID_AFEC0);
}

void ADC_0_init(void)
{
  400438:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  40043a:	4b05      	ldr	r3, [pc, #20]	; (400450 <ADC_0_init+0x18>)
  40043c:	4798      	blx	r3
	ADC_0_PORT_init();
  40043e:	4b05      	ldr	r3, [pc, #20]	; (400454 <ADC_0_init+0x1c>)
  400440:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  400442:	2200      	movs	r2, #0
  400444:	4904      	ldr	r1, [pc, #16]	; (400458 <ADC_0_init+0x20>)
  400446:	4805      	ldr	r0, [pc, #20]	; (40045c <ADC_0_init+0x24>)
  400448:	4b05      	ldr	r3, [pc, #20]	; (400460 <ADC_0_init+0x28>)
  40044a:	4798      	blx	r3
  40044c:	bd08      	pop	{r3, pc}
  40044e:	bf00      	nop
  400450:	00400421 	.word	0x00400421
  400454:	004003f1 	.word	0x004003f1
  400458:	4003c000 	.word	0x4003c000
  40045c:	20400348 	.word	0x20400348
  400460:	004008f1 	.word	0x004008f1

00400464 <ADC_1_PORT_init>:
  400464:	2202      	movs	r2, #2
  400466:	4b07      	ldr	r3, [pc, #28]	; (400484 <ADC_1_PORT_init+0x20>)
  400468:	601a      	str	r2, [r3, #0]
  40046a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40046e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400472:	601a      	str	r2, [r3, #0]
  400474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400478:	601a      	str	r2, [r3, #0]
  40047a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40047e:	601a      	str	r2, [r3, #0]
  400480:	4770      	bx	lr
  400482:	bf00      	nop
  400484:	400e1000 	.word	0x400e1000

00400488 <ADC_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400488:	4b05      	ldr	r3, [pc, #20]	; (4004a0 <ADC_1_CLOCK_init+0x18>)
  40048a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40048e:	f413 7f80 	tst.w	r3, #256	; 0x100
  400492:	d104      	bne.n	40049e <ADC_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400494:	f44f 7280 	mov.w	r2, #256	; 0x100
  400498:	4b01      	ldr	r3, [pc, #4]	; (4004a0 <ADC_1_CLOCK_init+0x18>)
  40049a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40049e:	4770      	bx	lr
  4004a0:	400e0600 	.word	0x400e0600

004004a4 <ADC_1_init>:

	_pmc_enable_periph_clock(ID_AFEC1);
}

void ADC_1_init(void)
{
  4004a4:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
  4004a6:	4b05      	ldr	r3, [pc, #20]	; (4004bc <ADC_1_init+0x18>)
  4004a8:	4798      	blx	r3
	ADC_1_PORT_init();
  4004aa:	4b05      	ldr	r3, [pc, #20]	; (4004c0 <ADC_1_init+0x1c>)
  4004ac:	4798      	blx	r3
	adc_sync_init(&ADC_1, AFEC1, (void *)NULL);
  4004ae:	2200      	movs	r2, #0
  4004b0:	4904      	ldr	r1, [pc, #16]	; (4004c4 <ADC_1_init+0x20>)
  4004b2:	4805      	ldr	r0, [pc, #20]	; (4004c8 <ADC_1_init+0x24>)
  4004b4:	4b05      	ldr	r3, [pc, #20]	; (4004cc <ADC_1_init+0x28>)
  4004b6:	4798      	blx	r3
  4004b8:	bd08      	pop	{r3, pc}
  4004ba:	bf00      	nop
  4004bc:	00400489 	.word	0x00400489
  4004c0:	00400465 	.word	0x00400465
  4004c4:	40064000 	.word	0x40064000
  4004c8:	20400368 	.word	0x20400368
  4004cc:	004008f1 	.word	0x004008f1

004004d0 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4004d0:	4b04      	ldr	r3, [pc, #16]	; (4004e4 <EXTERNAL_IRQ_D_init+0x14>)
  4004d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4004d6:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  4004d8:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  4004da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4004de:	601a      	str	r2, [r3, #0]
  4004e0:	4770      	bx	lr
  4004e2:	bf00      	nop
  4004e4:	400e1400 	.word	0x400e1400

004004e8 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4004e8:	4b0a      	ldr	r3, [pc, #40]	; (400514 <EXTERNAL_IRQ_A_init+0x2c>)
  4004ea:	2204      	movs	r2, #4
  4004ec:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4004ee:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4004f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4004f4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4004f6:	2220      	movs	r2, #32
  4004f8:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4004fa:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4004fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400500:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400502:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400506:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400508:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40050a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40050e:	601a      	str	r2, [r3, #0]
  400510:	4770      	bx	lr
  400512:	bf00      	nop
  400514:	400e0e00 	.word	0x400e0e00

00400518 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400518:	4b16      	ldr	r3, [pc, #88]	; (400574 <PWM_0_PORT_init+0x5c>)
  40051a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40051c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400520:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400522:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400524:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  400528:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40052a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40052e:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400530:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400532:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  400536:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400538:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40053a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  40053e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400544:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400546:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400548:	f022 0202 	bic.w	r2, r2, #2
  40054c:	671a      	str	r2, [r3, #112]	; 0x70
  40054e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400550:	f022 0202 	bic.w	r2, r2, #2
  400554:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400556:	2202      	movs	r2, #2
  400558:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40055a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40055c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400560:	671a      	str	r2, [r3, #112]	; 0x70
  400562:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400564:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400568:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40056a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40056e:	605a      	str	r2, [r3, #4]
  400570:	4770      	bx	lr
  400572:	bf00      	nop
  400574:	400e0e00 	.word	0x400e0e00

00400578 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400578:	4b04      	ldr	r3, [pc, #16]	; (40058c <PWM_0_CLOCK_init+0x14>)
  40057a:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40057c:	2b00      	cmp	r3, #0
  40057e:	db03      	blt.n	400588 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400580:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400584:	4b01      	ldr	r3, [pc, #4]	; (40058c <PWM_0_CLOCK_init+0x14>)
  400586:	611a      	str	r2, [r3, #16]
  400588:	4770      	bx	lr
  40058a:	bf00      	nop
  40058c:	400e0600 	.word	0x400e0600

00400590 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400590:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  400592:	4b06      	ldr	r3, [pc, #24]	; (4005ac <PWM_0_init+0x1c>)
  400594:	4798      	blx	r3
	PWM_0_PORT_init();
  400596:	4b06      	ldr	r3, [pc, #24]	; (4005b0 <PWM_0_init+0x20>)
  400598:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  40059a:	4b06      	ldr	r3, [pc, #24]	; (4005b4 <PWM_0_init+0x24>)
  40059c:	4798      	blx	r3
  40059e:	4602      	mov	r2, r0
  4005a0:	4905      	ldr	r1, [pc, #20]	; (4005b8 <PWM_0_init+0x28>)
  4005a2:	4806      	ldr	r0, [pc, #24]	; (4005bc <PWM_0_init+0x2c>)
  4005a4:	4b06      	ldr	r3, [pc, #24]	; (4005c0 <PWM_0_init+0x30>)
  4005a6:	4798      	blx	r3
  4005a8:	bd08      	pop	{r3, pc}
  4005aa:	bf00      	nop
  4005ac:	00400579 	.word	0x00400579
  4005b0:	00400519 	.word	0x00400519
  4005b4:	00401705 	.word	0x00401705
  4005b8:	40020000 	.word	0x40020000
  4005bc:	204002c0 	.word	0x204002c0
  4005c0:	00400b29 	.word	0x00400b29

004005c4 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4005c4:	4b0c      	ldr	r3, [pc, #48]	; (4005f8 <PWM_1_PORT_init+0x34>)
  4005c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4005cc:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4005ce:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4005d4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4005d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4005da:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4005dc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4005e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005e2:	f042 0201 	orr.w	r2, r2, #1
  4005e6:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4005e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4005ea:	f022 0201 	bic.w	r2, r2, #1
  4005ee:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4005f0:	2201      	movs	r2, #1
  4005f2:	605a      	str	r2, [r3, #4]
  4005f4:	4770      	bx	lr
  4005f6:	bf00      	nop
  4005f8:	400e0e00 	.word	0x400e0e00

004005fc <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4005fc:	4b05      	ldr	r3, [pc, #20]	; (400614 <PWM_1_CLOCK_init+0x18>)
  4005fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400602:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  400606:	d104      	bne.n	400612 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40060c:	4b01      	ldr	r3, [pc, #4]	; (400614 <PWM_1_CLOCK_init+0x18>)
  40060e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400612:	4770      	bx	lr
  400614:	400e0600 	.word	0x400e0600

00400618 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  400618:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  40061a:	4b06      	ldr	r3, [pc, #24]	; (400634 <PWM_1_init+0x1c>)
  40061c:	4798      	blx	r3
	PWM_1_PORT_init();
  40061e:	4b06      	ldr	r3, [pc, #24]	; (400638 <PWM_1_init+0x20>)
  400620:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400622:	4b06      	ldr	r3, [pc, #24]	; (40063c <PWM_1_init+0x24>)
  400624:	4798      	blx	r3
  400626:	4602      	mov	r2, r0
  400628:	4905      	ldr	r1, [pc, #20]	; (400640 <PWM_1_init+0x28>)
  40062a:	4806      	ldr	r0, [pc, #24]	; (400644 <PWM_1_init+0x2c>)
  40062c:	4b06      	ldr	r3, [pc, #24]	; (400648 <PWM_1_init+0x30>)
  40062e:	4798      	blx	r3
  400630:	bd08      	pop	{r3, pc}
  400632:	bf00      	nop
  400634:	004005fd 	.word	0x004005fd
  400638:	004005c5 	.word	0x004005c5
  40063c:	00401705 	.word	0x00401705
  400640:	4005c000 	.word	0x4005c000
  400644:	2040034c 	.word	0x2040034c
  400648:	00400b29 	.word	0x00400b29

0040064c <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40064c:	4b06      	ldr	r3, [pc, #24]	; (400668 <ENCODER_A_PORT_init+0x1c>)
  40064e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400650:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400654:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400656:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400658:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  40065c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40065e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400662:	605a      	str	r2, [r3, #4]
  400664:	4770      	bx	lr
  400666:	bf00      	nop
  400668:	400e0e00 	.word	0x400e0e00

0040066c <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  40066c:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40066e:	4b0e      	ldr	r3, [pc, #56]	; (4006a8 <ENCODER_A_init+0x3c>)
  400670:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400672:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400676:	d103      	bne.n	400680 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400678:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40067c:	4b0a      	ldr	r3, [pc, #40]	; (4006a8 <ENCODER_A_init+0x3c>)
  40067e:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400680:	4b09      	ldr	r3, [pc, #36]	; (4006a8 <ENCODER_A_init+0x3c>)
  400682:	699b      	ldr	r3, [r3, #24]
  400684:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400688:	d103      	bne.n	400692 <ENCODER_A_init+0x26>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40068a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40068e:	4b06      	ldr	r3, [pc, #24]	; (4006a8 <ENCODER_A_init+0x3c>)
  400690:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	_pmc_enable_periph_clock(ID_TC0_CHANNEL1);
	ENCODER_A_PORT_init();
  400692:	4b06      	ldr	r3, [pc, #24]	; (4006ac <ENCODER_A_init+0x40>)
  400694:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  400696:	4b06      	ldr	r3, [pc, #24]	; (4006b0 <ENCODER_A_init+0x44>)
  400698:	4798      	blx	r3
  40069a:	4602      	mov	r2, r0
  40069c:	4905      	ldr	r1, [pc, #20]	; (4006b4 <ENCODER_A_init+0x48>)
  40069e:	4806      	ldr	r0, [pc, #24]	; (4006b8 <ENCODER_A_init+0x4c>)
  4006a0:	4b06      	ldr	r3, [pc, #24]	; (4006bc <ENCODER_A_init+0x50>)
  4006a2:	4798      	blx	r3
  4006a4:	bd08      	pop	{r3, pc}
  4006a6:	bf00      	nop
  4006a8:	400e0600 	.word	0x400e0600
  4006ac:	0040064d 	.word	0x0040064d
  4006b0:	004018db 	.word	0x004018db
  4006b4:	4000c000 	.word	0x4000c000
  4006b8:	2040032c 	.word	0x2040032c
  4006bc:	00400c91 	.word	0x00400c91

004006c0 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4006c0:	4b06      	ldr	r3, [pc, #24]	; (4006dc <ENCODER_B_PORT_init+0x1c>)
  4006c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006c4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4006c8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4006ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006cc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  4006d0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4006d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4006d6:	605a      	str	r2, [r3, #4]
  4006d8:	4770      	bx	lr
  4006da:	bf00      	nop
  4006dc:	400e1400 	.word	0x400e1400

004006e0 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  4006e0:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4006e2:	4b10      	ldr	r3, [pc, #64]	; (400724 <ENCODER_B_init+0x44>)
  4006e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4006e8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  4006ec:	d104      	bne.n	4006f8 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4006ee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4006f2:	4b0c      	ldr	r3, [pc, #48]	; (400724 <ENCODER_B_init+0x44>)
  4006f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4006f8:	4b0a      	ldr	r3, [pc, #40]	; (400724 <ENCODER_B_init+0x44>)
  4006fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  4006fe:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  400702:	d104      	bne.n	40070e <ENCODER_B_init+0x2e>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400704:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400708:	4b06      	ldr	r3, [pc, #24]	; (400724 <ENCODER_B_init+0x44>)
  40070a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	_pmc_enable_periph_clock(ID_TC3_CHANNEL1);
	ENCODER_B_PORT_init();
  40070e:	4b06      	ldr	r3, [pc, #24]	; (400728 <ENCODER_B_init+0x48>)
  400710:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  400712:	4b06      	ldr	r3, [pc, #24]	; (40072c <ENCODER_B_init+0x4c>)
  400714:	4798      	blx	r3
  400716:	4602      	mov	r2, r0
  400718:	4905      	ldr	r1, [pc, #20]	; (400730 <ENCODER_B_init+0x50>)
  40071a:	4806      	ldr	r0, [pc, #24]	; (400734 <ENCODER_B_init+0x54>)
  40071c:	4b06      	ldr	r3, [pc, #24]	; (400738 <ENCODER_B_init+0x58>)
  40071e:	4798      	blx	r3
  400720:	bd08      	pop	{r3, pc}
  400722:	bf00      	nop
  400724:	400e0600 	.word	0x400e0600
  400728:	004006c1 	.word	0x004006c1
  40072c:	004018db 	.word	0x004018db
  400730:	40054000 	.word	0x40054000
  400734:	204002dc 	.word	0x204002dc
  400738:	00400c91 	.word	0x00400c91

0040073c <delay_driver_init>:
}

void delay_driver_init(void)
{
  40073c:	b508      	push	{r3, lr}
	delay_init(SysTick);
  40073e:	4802      	ldr	r0, [pc, #8]	; (400748 <delay_driver_init+0xc>)
  400740:	4b02      	ldr	r3, [pc, #8]	; (40074c <delay_driver_init+0x10>)
  400742:	4798      	blx	r3
  400744:	bd08      	pop	{r3, pc}
  400746:	bf00      	nop
  400748:	e000e010 	.word	0xe000e010
  40074c:	00400a09 	.word	0x00400a09

00400750 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400750:	4b0f      	ldr	r3, [pc, #60]	; (400790 <EDBG_COM_PORT_init+0x40>)
  400752:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400754:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400758:	671a      	str	r2, [r3, #112]	; 0x70
  40075a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40075c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400760:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400762:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400766:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400768:	4a0a      	ldr	r2, [pc, #40]	; (400794 <EDBG_COM_PORT_init+0x44>)
  40076a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40076e:	f043 0310 	orr.w	r3, r3, #16
  400772:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400776:	4b08      	ldr	r3, [pc, #32]	; (400798 <EDBG_COM_PORT_init+0x48>)
  400778:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40077a:	f042 0210 	orr.w	r2, r2, #16
  40077e:	671a      	str	r2, [r3, #112]	; 0x70
  400780:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400782:	f042 0210 	orr.w	r2, r2, #16
  400786:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400788:	2210      	movs	r2, #16
  40078a:	605a      	str	r2, [r3, #4]
  40078c:	4770      	bx	lr
  40078e:	bf00      	nop
  400790:	400e0e00 	.word	0x400e0e00
  400794:	40088000 	.word	0x40088000
  400798:	400e1000 	.word	0x400e1000

0040079c <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40079c:	4b04      	ldr	r3, [pc, #16]	; (4007b0 <EDBG_COM_CLOCK_init+0x14>)
  40079e:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4007a0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4007a4:	d103      	bne.n	4007ae <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4007a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4007aa:	4b01      	ldr	r3, [pc, #4]	; (4007b0 <EDBG_COM_CLOCK_init+0x14>)
  4007ac:	611a      	str	r2, [r3, #16]
  4007ae:	4770      	bx	lr
  4007b0:	400e0600 	.word	0x400e0600

004007b4 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  4007b4:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  4007b6:	4b06      	ldr	r3, [pc, #24]	; (4007d0 <EDBG_COM_init+0x1c>)
  4007b8:	4798      	blx	r3
	EDBG_COM_PORT_init();
  4007ba:	4b06      	ldr	r3, [pc, #24]	; (4007d4 <EDBG_COM_init+0x20>)
  4007bc:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  4007be:	4b06      	ldr	r3, [pc, #24]	; (4007d8 <EDBG_COM_init+0x24>)
  4007c0:	4798      	blx	r3
  4007c2:	4602      	mov	r2, r0
  4007c4:	4905      	ldr	r1, [pc, #20]	; (4007dc <EDBG_COM_init+0x28>)
  4007c6:	4806      	ldr	r0, [pc, #24]	; (4007e0 <EDBG_COM_init+0x2c>)
  4007c8:	4b06      	ldr	r3, [pc, #24]	; (4007e4 <EDBG_COM_init+0x30>)
  4007ca:	4798      	blx	r3
  4007cc:	bd08      	pop	{r3, pc}
  4007ce:	bf00      	nop
  4007d0:	0040079d 	.word	0x0040079d
  4007d4:	00400751 	.word	0x00400751
  4007d8:	00401b1d 	.word	0x00401b1d
  4007dc:	40028000 	.word	0x40028000
  4007e0:	20400320 	.word	0x20400320
  4007e4:	00400dd9 	.word	0x00400dd9

004007e8 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  4007e8:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4007ea:	4b32      	ldr	r3, [pc, #200]	; (4008b4 <system_init+0xcc>)
  4007ec:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4007ee:	4b32      	ldr	r3, [pc, #200]	; (4008b8 <system_init+0xd0>)
  4007f0:	699b      	ldr	r3, [r3, #24]
  4007f2:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4007f6:	d103      	bne.n	400800 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4007f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4007fc:	4b2e      	ldr	r3, [pc, #184]	; (4008b8 <system_init+0xd0>)
  4007fe:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400800:	4b2d      	ldr	r3, [pc, #180]	; (4008b8 <system_init+0xd0>)
  400802:	699b      	ldr	r3, [r3, #24]
  400804:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400808:	d103      	bne.n	400812 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40080a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40080e:	4b2a      	ldr	r3, [pc, #168]	; (4008b8 <system_init+0xd0>)
  400810:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400812:	4b29      	ldr	r3, [pc, #164]	; (4008b8 <system_init+0xd0>)
  400814:	699b      	ldr	r3, [r3, #24]
  400816:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40081a:	d103      	bne.n	400824 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40081c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400820:	4b25      	ldr	r3, [pc, #148]	; (4008b8 <system_init+0xd0>)
  400822:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400824:	4a25      	ldr	r2, [pc, #148]	; (4008bc <system_init+0xd4>)
  400826:	6853      	ldr	r3, [r2, #4]
  400828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40082c:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  40082e:	4b24      	ldr	r3, [pc, #144]	; (4008c0 <system_init+0xd8>)
  400830:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400834:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  400836:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  40083a:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  40083c:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40083e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  400842:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400844:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400846:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40084c:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40084e:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400850:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400856:	f44f 7080 	mov.w	r0, #256	; 0x100
  40085a:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40085c:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40085e:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400860:	f44f 7000 	mov.w	r0, #512	; 0x200
  400864:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400866:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400868:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40086a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40086e:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400870:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400872:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400874:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400878:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40087a:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40087c:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40087e:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400880:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400882:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  400884:	4b0f      	ldr	r3, [pc, #60]	; (4008c4 <system_init+0xdc>)
  400886:	4798      	blx	r3

	ADC_1_init();
  400888:	4b0f      	ldr	r3, [pc, #60]	; (4008c8 <system_init+0xe0>)
  40088a:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  40088c:	4b0f      	ldr	r3, [pc, #60]	; (4008cc <system_init+0xe4>)
  40088e:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  400890:	4b0f      	ldr	r3, [pc, #60]	; (4008d0 <system_init+0xe8>)
  400892:	4798      	blx	r3

	PWM_0_init();
  400894:	4b0f      	ldr	r3, [pc, #60]	; (4008d4 <system_init+0xec>)
  400896:	4798      	blx	r3

	PWM_1_init();
  400898:	4b0f      	ldr	r3, [pc, #60]	; (4008d8 <system_init+0xf0>)
  40089a:	4798      	blx	r3
	ENCODER_A_init();
  40089c:	4b0f      	ldr	r3, [pc, #60]	; (4008dc <system_init+0xf4>)
  40089e:	4798      	blx	r3
	ENCODER_B_init();
  4008a0:	4b0f      	ldr	r3, [pc, #60]	; (4008e0 <system_init+0xf8>)
  4008a2:	4798      	blx	r3

	delay_driver_init();
  4008a4:	4b0f      	ldr	r3, [pc, #60]	; (4008e4 <system_init+0xfc>)
  4008a6:	4798      	blx	r3

	EDBG_COM_init();
  4008a8:	4b0f      	ldr	r3, [pc, #60]	; (4008e8 <system_init+0x100>)
  4008aa:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  4008ac:	4b0f      	ldr	r3, [pc, #60]	; (4008ec <system_init+0x104>)
  4008ae:	4798      	blx	r3
  4008b0:	bd08      	pop	{r3, pc}
  4008b2:	bf00      	nop
  4008b4:	0040104d 	.word	0x0040104d
  4008b8:	400e0600 	.word	0x400e0600
  4008bc:	400e1850 	.word	0x400e1850
  4008c0:	400e0e00 	.word	0x400e0e00
  4008c4:	00400439 	.word	0x00400439
  4008c8:	004004a5 	.word	0x004004a5
  4008cc:	004004d1 	.word	0x004004d1
  4008d0:	004004e9 	.word	0x004004e9
  4008d4:	00400591 	.word	0x00400591
  4008d8:	00400619 	.word	0x00400619
  4008dc:	0040066d 	.word	0x0040066d
  4008e0:	004006e1 	.word	0x004006e1
  4008e4:	0040073d 	.word	0x0040073d
  4008e8:	004007b5 	.word	0x004007b5
  4008ec:	00400a81 	.word	0x00400a81

004008f0 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  4008f0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4008f2:	4604      	mov	r4, r0
  4008f4:	460d      	mov	r5, r1
  4008f6:	2800      	cmp	r0, #0
  4008f8:	bf18      	it	ne
  4008fa:	2900      	cmpne	r1, #0
  4008fc:	bf14      	ite	ne
  4008fe:	2001      	movne	r0, #1
  400900:	2000      	moveq	r0, #0
  400902:	2239      	movs	r2, #57	; 0x39
  400904:	4903      	ldr	r1, [pc, #12]	; (400914 <adc_sync_init+0x24>)
  400906:	4b04      	ldr	r3, [pc, #16]	; (400918 <adc_sync_init+0x28>)
  400908:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  40090a:	4629      	mov	r1, r5
  40090c:	4620      	mov	r0, r4
  40090e:	4b03      	ldr	r3, [pc, #12]	; (40091c <adc_sync_init+0x2c>)
  400910:	4798      	blx	r3
}
  400912:	bd38      	pop	{r3, r4, r5, pc}
  400914:	00404fe8 	.word	0x00404fe8
  400918:	00400e4d 	.word	0x00400e4d
  40091c:	00400fc9 	.word	0x00400fc9

00400920 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
  400920:	b538      	push	{r3, r4, r5, lr}
  400922:	460d      	mov	r5, r1
	ASSERT(descr);
  400924:	4604      	mov	r4, r0
  400926:	224e      	movs	r2, #78	; 0x4e
  400928:	4905      	ldr	r1, [pc, #20]	; (400940 <adc_sync_enable_channel+0x20>)
  40092a:	3000      	adds	r0, #0
  40092c:	bf18      	it	ne
  40092e:	2001      	movne	r0, #1
  400930:	4b04      	ldr	r3, [pc, #16]	; (400944 <adc_sync_enable_channel+0x24>)
  400932:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
  400934:	4629      	mov	r1, r5
  400936:	4620      	mov	r0, r4
  400938:	4b03      	ldr	r3, [pc, #12]	; (400948 <adc_sync_enable_channel+0x28>)
  40093a:	4798      	blx	r3

	return ERR_NONE;
}
  40093c:	2000      	movs	r0, #0
  40093e:	bd38      	pop	{r3, r4, r5, pc}
  400940:	00404fe8 	.word	0x00404fe8
  400944:	00400e4d 	.word	0x00400e4d
  400948:	00401001 	.word	0x00401001

0040094c <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
  40094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400950:	460d      	mov	r5, r1
  400952:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
  400954:	4607      	mov	r7, r0
  400956:	4690      	mov	r8, r2
  400958:	2800      	cmp	r0, #0
  40095a:	bf18      	it	ne
  40095c:	2a00      	cmpne	r2, #0
  40095e:	d002      	beq.n	400966 <adc_sync_read_channel+0x1a>
  400960:	b9cb      	cbnz	r3, 400996 <adc_sync_read_channel+0x4a>
  400962:	2000      	movs	r0, #0
  400964:	e000      	b.n	400968 <adc_sync_read_channel+0x1c>
  400966:	2000      	movs	r0, #0
  400968:	f8df a07c 	ldr.w	sl, [pc, #124]	; 4009e8 <adc_sync_read_channel+0x9c>
  40096c:	2267      	movs	r2, #103	; 0x67
  40096e:	4651      	mov	r1, sl
  400970:	4e18      	ldr	r6, [pc, #96]	; (4009d4 <adc_sync_read_channel+0x88>)
  400972:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
  400974:	463c      	mov	r4, r7
  400976:	4638      	mov	r0, r7
  400978:	4b17      	ldr	r3, [pc, #92]	; (4009d8 <adc_sync_read_channel+0x8c>)
  40097a:	4798      	blx	r3
  40097c:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
  40097e:	fb99 f0f0 	sdiv	r0, r9, r0
  400982:	fb07 9010 	mls	r0, r7, r0, r9
  400986:	2269      	movs	r2, #105	; 0x69
  400988:	4651      	mov	r1, sl
  40098a:	fab0 f080 	clz	r0, r0
  40098e:	0940      	lsrs	r0, r0, #5
  400990:	47b0      	blx	r6
	uint16_t offset = 0;
  400992:	2600      	movs	r6, #0
  400994:	e005      	b.n	4009a2 <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
  400996:	2001      	movs	r0, #1
  400998:	e7e6      	b.n	400968 <adc_sync_read_channel+0x1c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
  40099a:	443e      	add	r6, r7
  40099c:	b2b6      	uxth	r6, r6
	} while (offset < length);
  40099e:	45b1      	cmp	r9, r6
  4009a0:	d915      	bls.n	4009ce <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
  4009a2:	4620      	mov	r0, r4
  4009a4:	4b0d      	ldr	r3, [pc, #52]	; (4009dc <adc_sync_read_channel+0x90>)
  4009a6:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
  4009a8:	4629      	mov	r1, r5
  4009aa:	4620      	mov	r0, r4
  4009ac:	4b0c      	ldr	r3, [pc, #48]	; (4009e0 <adc_sync_read_channel+0x94>)
  4009ae:	4798      	blx	r3
  4009b0:	2800      	cmp	r0, #0
  4009b2:	d0f9      	beq.n	4009a8 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
  4009b4:	4629      	mov	r1, r5
  4009b6:	4620      	mov	r0, r4
  4009b8:	4b0a      	ldr	r3, [pc, #40]	; (4009e4 <adc_sync_read_channel+0x98>)
  4009ba:	4798      	blx	r3
		buffer[offset] = result;
  4009bc:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
  4009c0:	2f01      	cmp	r7, #1
  4009c2:	d9ea      	bls.n	40099a <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
  4009c4:	1c73      	adds	r3, r6, #1
  4009c6:	0a00      	lsrs	r0, r0, #8
  4009c8:	f808 0003 	strb.w	r0, [r8, r3]
  4009cc:	e7e5      	b.n	40099a <adc_sync_read_channel+0x4e>

	return offset;
}
  4009ce:	4630      	mov	r0, r6
  4009d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4009d4:	00400e4d 	.word	0x00400e4d
  4009d8:	0040100d 	.word	0x0040100d
  4009dc:	00401025 	.word	0x00401025
  4009e0:	00401011 	.word	0x00401011
  4009e4:	0040102d 	.word	0x0040102d
  4009e8:	00404fe8 	.word	0x00404fe8

004009ec <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4009ec:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4009f0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4009f2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4009f4:	f3bf 8f5f 	dmb	sy
  4009f8:	4770      	bx	lr

004009fa <atomic_leave_critical>:
  4009fa:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4009fe:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400a00:	f383 8810 	msr	PRIMASK, r3
  400a04:	4770      	bx	lr
	...

00400a08 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400a08:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400a0a:	4b02      	ldr	r3, [pc, #8]	; (400a14 <delay_init+0xc>)
  400a0c:	6018      	str	r0, [r3, #0]
  400a0e:	4b02      	ldr	r3, [pc, #8]	; (400a18 <delay_init+0x10>)
  400a10:	4798      	blx	r3
  400a12:	bd08      	pop	{r3, pc}
  400a14:	20400234 	.word	0x20400234
  400a18:	0040171d 	.word	0x0040171d

00400a1c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400a1c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  400a1e:	4b04      	ldr	r3, [pc, #16]	; (400a30 <delay_ms+0x14>)
  400a20:	681c      	ldr	r4, [r3, #0]
  400a22:	4b04      	ldr	r3, [pc, #16]	; (400a34 <delay_ms+0x18>)
  400a24:	4798      	blx	r3
  400a26:	4601      	mov	r1, r0
  400a28:	4620      	mov	r0, r4
  400a2a:	4b03      	ldr	r3, [pc, #12]	; (400a38 <delay_ms+0x1c>)
  400a2c:	4798      	blx	r3
  400a2e:	bd10      	pop	{r4, pc}
  400a30:	20400234 	.word	0x20400234
  400a34:	00401039 	.word	0x00401039
  400a38:	00401729 	.word	0x00401729

00400a3c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400a3c:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400a3e:	2504      	movs	r5, #4
  400a40:	2400      	movs	r4, #0

	while (upper >= lower) {
  400a42:	e007      	b.n	400a54 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  400a44:	4a0d      	ldr	r2, [pc, #52]	; (400a7c <process_ext_irq+0x40>)
  400a46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400a4a:	b1b3      	cbz	r3, 400a7a <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400a4c:	4798      	blx	r3
  400a4e:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  400a50:	3a01      	subs	r2, #1
  400a52:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  400a54:	42ac      	cmp	r4, r5
  400a56:	d810      	bhi.n	400a7a <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400a58:	192b      	adds	r3, r5, r4
  400a5a:	105b      	asrs	r3, r3, #1
  400a5c:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400a5e:	2a03      	cmp	r2, #3
  400a60:	d80b      	bhi.n	400a7a <process_ext_irq+0x3e>
  400a62:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  400a64:	4905      	ldr	r1, [pc, #20]	; (400a7c <process_ext_irq+0x40>)
  400a66:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400a6a:	6849      	ldr	r1, [r1, #4]
  400a6c:	4281      	cmp	r1, r0
  400a6e:	d0e9      	beq.n	400a44 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400a70:	4281      	cmp	r1, r0
  400a72:	d2ed      	bcs.n	400a50 <process_ext_irq+0x14>
			lower = middle + 1;
  400a74:	3201      	adds	r2, #1
  400a76:	b2d4      	uxtb	r4, r2
  400a78:	e7ec      	b.n	400a54 <process_ext_irq+0x18>
  400a7a:	bd38      	pop	{r3, r4, r5, pc}
  400a7c:	20400238 	.word	0x20400238

00400a80 <ext_irq_init>:
{
  400a80:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400a82:	2300      	movs	r3, #0
  400a84:	e00a      	b.n	400a9c <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400a86:	4a08      	ldr	r2, [pc, #32]	; (400aa8 <ext_irq_init+0x28>)
  400a88:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400a8c:	f04f 30ff 	mov.w	r0, #4294967295
  400a90:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400a92:	2100      	movs	r1, #0
  400a94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400a98:	3301      	adds	r3, #1
  400a9a:	b29b      	uxth	r3, r3
  400a9c:	2b03      	cmp	r3, #3
  400a9e:	d9f2      	bls.n	400a86 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400aa0:	4802      	ldr	r0, [pc, #8]	; (400aac <ext_irq_init+0x2c>)
  400aa2:	4b03      	ldr	r3, [pc, #12]	; (400ab0 <ext_irq_init+0x30>)
  400aa4:	4798      	blx	r3
}
  400aa6:	bd08      	pop	{r3, pc}
  400aa8:	20400238 	.word	0x20400238
  400aac:	00400a3d 	.word	0x00400a3d
  400ab0:	0040135d 	.word	0x0040135d

00400ab4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400ab4:	b570      	push	{r4, r5, r6, lr}
  400ab6:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400ab8:	4604      	mov	r4, r0
  400aba:	460d      	mov	r5, r1
  400abc:	2800      	cmp	r0, #0
  400abe:	bf18      	it	ne
  400ac0:	2900      	cmpne	r1, #0
  400ac2:	bf14      	ite	ne
  400ac4:	2001      	movne	r0, #1
  400ac6:	2000      	moveq	r0, #0
  400ac8:	2234      	movs	r2, #52	; 0x34
  400aca:	4904      	ldr	r1, [pc, #16]	; (400adc <io_write+0x28>)
  400acc:	4b04      	ldr	r3, [pc, #16]	; (400ae0 <io_write+0x2c>)
  400ace:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400ad0:	6823      	ldr	r3, [r4, #0]
  400ad2:	4632      	mov	r2, r6
  400ad4:	4629      	mov	r1, r5
  400ad6:	4620      	mov	r0, r4
  400ad8:	4798      	blx	r3
}
  400ada:	bd70      	pop	{r4, r5, r6, pc}
  400adc:	00405004 	.word	0x00405004
  400ae0:	00400e4d 	.word	0x00400e4d

00400ae4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400ae4:	b570      	push	{r4, r5, r6, lr}
  400ae6:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400ae8:	4604      	mov	r4, r0
  400aea:	460d      	mov	r5, r1
  400aec:	2800      	cmp	r0, #0
  400aee:	bf18      	it	ne
  400af0:	2900      	cmpne	r1, #0
  400af2:	bf14      	ite	ne
  400af4:	2001      	movne	r0, #1
  400af6:	2000      	moveq	r0, #0
  400af8:	223d      	movs	r2, #61	; 0x3d
  400afa:	4904      	ldr	r1, [pc, #16]	; (400b0c <io_read+0x28>)
  400afc:	4b04      	ldr	r3, [pc, #16]	; (400b10 <io_read+0x2c>)
  400afe:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400b00:	6863      	ldr	r3, [r4, #4]
  400b02:	4632      	mov	r2, r6
  400b04:	4629      	mov	r1, r5
  400b06:	4620      	mov	r0, r4
  400b08:	4798      	blx	r3
}
  400b0a:	bd70      	pop	{r4, r5, r6, pc}
  400b0c:	00405004 	.word	0x00405004
  400b10:	00400e4d 	.word	0x00400e4d

00400b14 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400b14:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400b16:	6943      	ldr	r3, [r0, #20]
  400b18:	b103      	cbz	r3, 400b1c <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400b1a:	4798      	blx	r3
  400b1c:	bd08      	pop	{r3, pc}

00400b1e <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400b1e:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400b20:	6983      	ldr	r3, [r0, #24]
  400b22:	b103      	cbz	r3, 400b26 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400b24:	4798      	blx	r3
  400b26:	bd08      	pop	{r3, pc}

00400b28 <pwm_init>:
{
  400b28:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400b2a:	4604      	mov	r4, r0
  400b2c:	460d      	mov	r5, r1
  400b2e:	2800      	cmp	r0, #0
  400b30:	bf18      	it	ne
  400b32:	2900      	cmpne	r1, #0
  400b34:	bf14      	ite	ne
  400b36:	2001      	movne	r0, #1
  400b38:	2000      	moveq	r0, #0
  400b3a:	2233      	movs	r2, #51	; 0x33
  400b3c:	4906      	ldr	r1, [pc, #24]	; (400b58 <pwm_init+0x30>)
  400b3e:	4b07      	ldr	r3, [pc, #28]	; (400b5c <pwm_init+0x34>)
  400b40:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  400b42:	4629      	mov	r1, r5
  400b44:	4620      	mov	r0, r4
  400b46:	4b06      	ldr	r3, [pc, #24]	; (400b60 <pwm_init+0x38>)
  400b48:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400b4a:	4b06      	ldr	r3, [pc, #24]	; (400b64 <pwm_init+0x3c>)
  400b4c:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400b4e:	4b06      	ldr	r3, [pc, #24]	; (400b68 <pwm_init+0x40>)
  400b50:	6063      	str	r3, [r4, #4]
}
  400b52:	2000      	movs	r0, #0
  400b54:	bd38      	pop	{r3, r4, r5, pc}
  400b56:	bf00      	nop
  400b58:	00405018 	.word	0x00405018
  400b5c:	00400e4d 	.word	0x00400e4d
  400b60:	004014c5 	.word	0x004014c5
  400b64:	00400b15 	.word	0x00400b15
  400b68:	00400b1f 	.word	0x00400b1f

00400b6c <pwm_enable>:
{
  400b6c:	b510      	push	{r4, lr}
	ASSERT(descr);
  400b6e:	4604      	mov	r4, r0
  400b70:	224a      	movs	r2, #74	; 0x4a
  400b72:	4909      	ldr	r1, [pc, #36]	; (400b98 <pwm_enable+0x2c>)
  400b74:	3000      	adds	r0, #0
  400b76:	bf18      	it	ne
  400b78:	2001      	movne	r0, #1
  400b7a:	4b08      	ldr	r3, [pc, #32]	; (400b9c <pwm_enable+0x30>)
  400b7c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  400b7e:	4620      	mov	r0, r4
  400b80:	4b07      	ldr	r3, [pc, #28]	; (400ba0 <pwm_enable+0x34>)
  400b82:	4798      	blx	r3
  400b84:	b920      	cbnz	r0, 400b90 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  400b86:	4620      	mov	r0, r4
  400b88:	4b06      	ldr	r3, [pc, #24]	; (400ba4 <pwm_enable+0x38>)
  400b8a:	4798      	blx	r3
	return ERR_NONE;
  400b8c:	2000      	movs	r0, #0
  400b8e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400b90:	f06f 0010 	mvn.w	r0, #16
}
  400b94:	bd10      	pop	{r4, pc}
  400b96:	bf00      	nop
  400b98:	00405018 	.word	0x00405018
  400b9c:	00400e4d 	.word	0x00400e4d
  400ba0:	004016d5 	.word	0x004016d5
  400ba4:	00401631 	.word	0x00401631

00400ba8 <pwm_set_parameters>:
{
  400ba8:	b570      	push	{r4, r5, r6, lr}
  400baa:	460d      	mov	r5, r1
  400bac:	4616      	mov	r6, r2
	ASSERT(descr);
  400bae:	4604      	mov	r4, r0
  400bb0:	227c      	movs	r2, #124	; 0x7c
  400bb2:	4906      	ldr	r1, [pc, #24]	; (400bcc <pwm_set_parameters+0x24>)
  400bb4:	3000      	adds	r0, #0
  400bb6:	bf18      	it	ne
  400bb8:	2001      	movne	r0, #1
  400bba:	4b05      	ldr	r3, [pc, #20]	; (400bd0 <pwm_set_parameters+0x28>)
  400bbc:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  400bbe:	4632      	mov	r2, r6
  400bc0:	4629      	mov	r1, r5
  400bc2:	4620      	mov	r0, r4
  400bc4:	4b03      	ldr	r3, [pc, #12]	; (400bd4 <pwm_set_parameters+0x2c>)
  400bc6:	4798      	blx	r3
}
  400bc8:	2000      	movs	r0, #0
  400bca:	bd70      	pop	{r4, r5, r6, pc}
  400bcc:	00405018 	.word	0x00405018
  400bd0:	00400e4d 	.word	0x00400e4d
  400bd4:	00401675 	.word	0x00401675

00400bd8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400bda:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400bdc:	b117      	cbz	r7, 400be4 <timer_add_timer_task+0xc>
  400bde:	463c      	mov	r4, r7
  400be0:	2600      	movs	r6, #0
  400be2:	e00b      	b.n	400bfc <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400be4:	4b0e      	ldr	r3, [pc, #56]	; (400c20 <timer_add_timer_task+0x48>)
  400be6:	4798      	blx	r3
		return;
  400be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400bea:	68a5      	ldr	r5, [r4, #8]
  400bec:	442b      	add	r3, r5
  400bee:	1a9b      	subs	r3, r3, r2
  400bf0:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400bf2:	688d      	ldr	r5, [r1, #8]
  400bf4:	42ab      	cmp	r3, r5
  400bf6:	d209      	bcs.n	400c0c <timer_add_timer_task+0x34>
			break;
		prev = it;
  400bf8:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400bfa:	6824      	ldr	r4, [r4, #0]
  400bfc:	b134      	cbz	r4, 400c0c <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400bfe:	6863      	ldr	r3, [r4, #4]
  400c00:	4293      	cmp	r3, r2
  400c02:	d8f2      	bhi.n	400bea <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400c04:	68a5      	ldr	r5, [r4, #8]
  400c06:	1a9b      	subs	r3, r3, r2
  400c08:	442b      	add	r3, r5
  400c0a:	e7f2      	b.n	400bf2 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400c0c:	42bc      	cmp	r4, r7
  400c0e:	d003      	beq.n	400c18 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400c10:	4630      	mov	r0, r6
  400c12:	4b04      	ldr	r3, [pc, #16]	; (400c24 <timer_add_timer_task+0x4c>)
  400c14:	4798      	blx	r3
  400c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400c18:	4b01      	ldr	r3, [pc, #4]	; (400c20 <timer_add_timer_task+0x48>)
  400c1a:	4798      	blx	r3
  400c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c1e:	bf00      	nop
  400c20:	00400e69 	.word	0x00400e69
  400c24:	00400e95 	.word	0x00400e95

00400c28 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400c2a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400c2c:	6906      	ldr	r6, [r0, #16]
  400c2e:	3601      	adds	r6, #1
  400c30:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400c32:	7e03      	ldrb	r3, [r0, #24]
  400c34:	f013 0f01 	tst.w	r3, #1
  400c38:	d105      	bne.n	400c46 <timer_process_counted+0x1e>
  400c3a:	7e03      	ldrb	r3, [r0, #24]
  400c3c:	f013 0f02 	tst.w	r3, #2
  400c40:	d101      	bne.n	400c46 <timer_process_counted+0x1e>
  400c42:	4605      	mov	r5, r0
  400c44:	e009      	b.n	400c5a <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  400c46:	7e03      	ldrb	r3, [r0, #24]
  400c48:	f043 0302 	orr.w	r3, r3, #2
  400c4c:	7603      	strb	r3, [r0, #24]
		return;
  400c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c50:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  400c52:	68e3      	ldr	r3, [r4, #12]
  400c54:	4620      	mov	r0, r4
  400c56:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  400c58:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  400c5a:	b19c      	cbz	r4, 400c84 <timer_process_counted+0x5c>
  400c5c:	6863      	ldr	r3, [r4, #4]
  400c5e:	1af3      	subs	r3, r6, r3
  400c60:	68a2      	ldr	r2, [r4, #8]
  400c62:	4293      	cmp	r3, r2
  400c64:	d30e      	bcc.n	400c84 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  400c66:	f105 0714 	add.w	r7, r5, #20
  400c6a:	4638      	mov	r0, r7
  400c6c:	4b06      	ldr	r3, [pc, #24]	; (400c88 <timer_process_counted+0x60>)
  400c6e:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400c70:	7c23      	ldrb	r3, [r4, #16]
  400c72:	2b01      	cmp	r3, #1
  400c74:	d1ec      	bne.n	400c50 <timer_process_counted+0x28>
			tmp->time_label = time;
  400c76:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400c78:	4632      	mov	r2, r6
  400c7a:	4621      	mov	r1, r4
  400c7c:	4638      	mov	r0, r7
  400c7e:	4b03      	ldr	r3, [pc, #12]	; (400c8c <timer_process_counted+0x64>)
  400c80:	4798      	blx	r3
  400c82:	e7e5      	b.n	400c50 <timer_process_counted+0x28>
  400c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c86:	bf00      	nop
  400c88:	00400e9d 	.word	0x00400e9d
  400c8c:	00400bd9 	.word	0x00400bd9

00400c90 <timer_init>:
{
  400c90:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400c92:	4604      	mov	r4, r0
  400c94:	460d      	mov	r5, r1
  400c96:	2800      	cmp	r0, #0
  400c98:	bf18      	it	ne
  400c9a:	2900      	cmpne	r1, #0
  400c9c:	bf14      	ite	ne
  400c9e:	2001      	movne	r0, #1
  400ca0:	2000      	moveq	r0, #0
  400ca2:	223b      	movs	r2, #59	; 0x3b
  400ca4:	4905      	ldr	r1, [pc, #20]	; (400cbc <timer_init+0x2c>)
  400ca6:	4b06      	ldr	r3, [pc, #24]	; (400cc0 <timer_init+0x30>)
  400ca8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400caa:	4629      	mov	r1, r5
  400cac:	4620      	mov	r0, r4
  400cae:	4b05      	ldr	r3, [pc, #20]	; (400cc4 <timer_init+0x34>)
  400cb0:	4798      	blx	r3
	descr->time                           = 0;
  400cb2:	2000      	movs	r0, #0
  400cb4:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400cb6:	4b04      	ldr	r3, [pc, #16]	; (400cc8 <timer_init+0x38>)
  400cb8:	6023      	str	r3, [r4, #0]
}
  400cba:	bd38      	pop	{r3, r4, r5, pc}
  400cbc:	00405030 	.word	0x00405030
  400cc0:	00400e4d 	.word	0x00400e4d
  400cc4:	004017e1 	.word	0x004017e1
  400cc8:	00400c29 	.word	0x00400c29

00400ccc <timer_start>:
{
  400ccc:	b510      	push	{r4, lr}
	ASSERT(descr);
  400cce:	4604      	mov	r4, r0
  400cd0:	2253      	movs	r2, #83	; 0x53
  400cd2:	4909      	ldr	r1, [pc, #36]	; (400cf8 <timer_start+0x2c>)
  400cd4:	3000      	adds	r0, #0
  400cd6:	bf18      	it	ne
  400cd8:	2001      	movne	r0, #1
  400cda:	4b08      	ldr	r3, [pc, #32]	; (400cfc <timer_start+0x30>)
  400cdc:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  400cde:	4620      	mov	r0, r4
  400ce0:	4b07      	ldr	r3, [pc, #28]	; (400d00 <timer_start+0x34>)
  400ce2:	4798      	blx	r3
  400ce4:	b920      	cbnz	r0, 400cf0 <timer_start+0x24>
	_timer_start(&descr->device);
  400ce6:	4620      	mov	r0, r4
  400ce8:	4b06      	ldr	r3, [pc, #24]	; (400d04 <timer_start+0x38>)
  400cea:	4798      	blx	r3
	return ERR_NONE;
  400cec:	2000      	movs	r0, #0
  400cee:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400cf0:	f06f 0010 	mvn.w	r0, #16
}
  400cf4:	bd10      	pop	{r4, pc}
  400cf6:	bf00      	nop
  400cf8:	00405030 	.word	0x00405030
  400cfc:	00400e4d 	.word	0x00400e4d
  400d00:	004018c9 	.word	0x004018c9
  400d04:	004018bd 	.word	0x004018bd

00400d08 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400d0a:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400d0c:	4605      	mov	r5, r0
  400d0e:	460f      	mov	r7, r1
  400d10:	2800      	cmp	r0, #0
  400d12:	bf18      	it	ne
  400d14:	2900      	cmpne	r1, #0
  400d16:	d002      	beq.n	400d1e <usart_sync_write+0x16>
  400d18:	bb0a      	cbnz	r2, 400d5e <usart_sync_write+0x56>
  400d1a:	2000      	movs	r0, #0
  400d1c:	e000      	b.n	400d20 <usart_sync_write+0x18>
  400d1e:	2000      	movs	r0, #0
  400d20:	22f1      	movs	r2, #241	; 0xf1
  400d22:	4910      	ldr	r1, [pc, #64]	; (400d64 <usart_sync_write+0x5c>)
  400d24:	4b10      	ldr	r3, [pc, #64]	; (400d68 <usart_sync_write+0x60>)
  400d26:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400d28:	f105 0408 	add.w	r4, r5, #8
  400d2c:	4620      	mov	r0, r4
  400d2e:	4b0f      	ldr	r3, [pc, #60]	; (400d6c <usart_sync_write+0x64>)
  400d30:	4798      	blx	r3
  400d32:	2800      	cmp	r0, #0
  400d34:	d0f8      	beq.n	400d28 <usart_sync_write+0x20>
  400d36:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400d38:	5d79      	ldrb	r1, [r7, r5]
  400d3a:	4620      	mov	r0, r4
  400d3c:	4b0c      	ldr	r3, [pc, #48]	; (400d70 <usart_sync_write+0x68>)
  400d3e:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400d40:	4620      	mov	r0, r4
  400d42:	4b0a      	ldr	r3, [pc, #40]	; (400d6c <usart_sync_write+0x64>)
  400d44:	4798      	blx	r3
  400d46:	2800      	cmp	r0, #0
  400d48:	d0fa      	beq.n	400d40 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  400d4a:	3501      	adds	r5, #1
  400d4c:	42b5      	cmp	r5, r6
  400d4e:	d3f3      	bcc.n	400d38 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400d50:	4620      	mov	r0, r4
  400d52:	4b08      	ldr	r3, [pc, #32]	; (400d74 <usart_sync_write+0x6c>)
  400d54:	4798      	blx	r3
  400d56:	2800      	cmp	r0, #0
  400d58:	d0fa      	beq.n	400d50 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  400d5a:	4628      	mov	r0, r5
  400d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400d5e:	2001      	movs	r0, #1
  400d60:	e7de      	b.n	400d20 <usart_sync_write+0x18>
  400d62:	bf00      	nop
  400d64:	00405048 	.word	0x00405048
  400d68:	00400e4d 	.word	0x00400e4d
  400d6c:	00401aa5 	.word	0x00401aa5
  400d70:	00401a5d 	.word	0x00401a5d
  400d74:	00401acd 	.word	0x00401acd

00400d78 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d7c:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400d7e:	4605      	mov	r5, r0
  400d80:	4688      	mov	r8, r1
  400d82:	2800      	cmp	r0, #0
  400d84:	bf18      	it	ne
  400d86:	2900      	cmpne	r1, #0
  400d88:	d002      	beq.n	400d90 <usart_sync_read+0x18>
  400d8a:	b9d2      	cbnz	r2, 400dc2 <usart_sync_read+0x4a>
  400d8c:	2000      	movs	r0, #0
  400d8e:	e000      	b.n	400d92 <usart_sync_read+0x1a>
  400d90:	2000      	movs	r0, #0
  400d92:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400d96:	490c      	ldr	r1, [pc, #48]	; (400dc8 <usart_sync_read+0x50>)
  400d98:	4b0c      	ldr	r3, [pc, #48]	; (400dcc <usart_sync_read+0x54>)
  400d9a:	4798      	blx	r3
	uint32_t                      offset = 0;
  400d9c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400d9e:	f105 0408 	add.w	r4, r5, #8
  400da2:	4620      	mov	r0, r4
  400da4:	4b0a      	ldr	r3, [pc, #40]	; (400dd0 <usart_sync_read+0x58>)
  400da6:	4798      	blx	r3
  400da8:	2800      	cmp	r0, #0
  400daa:	d0f8      	beq.n	400d9e <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400dac:	4620      	mov	r0, r4
  400dae:	4b09      	ldr	r3, [pc, #36]	; (400dd4 <usart_sync_read+0x5c>)
  400db0:	4798      	blx	r3
  400db2:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400db6:	3601      	adds	r6, #1
  400db8:	42be      	cmp	r6, r7
  400dba:	d3f0      	bcc.n	400d9e <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400dbc:	4630      	mov	r0, r6
  400dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400dc2:	2001      	movs	r0, #1
  400dc4:	e7e5      	b.n	400d92 <usart_sync_read+0x1a>
  400dc6:	bf00      	nop
  400dc8:	00405048 	.word	0x00405048
  400dcc:	00400e4d 	.word	0x00400e4d
  400dd0:	00401af5 	.word	0x00401af5
  400dd4:	00401a81 	.word	0x00401a81

00400dd8 <usart_sync_init>:
{
  400dd8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400dda:	4604      	mov	r4, r0
  400ddc:	460d      	mov	r5, r1
  400dde:	2800      	cmp	r0, #0
  400de0:	bf18      	it	ne
  400de2:	2900      	cmpne	r1, #0
  400de4:	bf14      	ite	ne
  400de6:	2001      	movne	r0, #1
  400de8:	2000      	moveq	r0, #0
  400dea:	2234      	movs	r2, #52	; 0x34
  400dec:	4907      	ldr	r1, [pc, #28]	; (400e0c <usart_sync_init+0x34>)
  400dee:	4b08      	ldr	r3, [pc, #32]	; (400e10 <usart_sync_init+0x38>)
  400df0:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400df2:	4629      	mov	r1, r5
  400df4:	f104 0008 	add.w	r0, r4, #8
  400df8:	4b06      	ldr	r3, [pc, #24]	; (400e14 <usart_sync_init+0x3c>)
  400dfa:	4798      	blx	r3
	if (init_status) {
  400dfc:	4603      	mov	r3, r0
  400dfe:	b918      	cbnz	r0, 400e08 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400e00:	4a05      	ldr	r2, [pc, #20]	; (400e18 <usart_sync_init+0x40>)
  400e02:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400e04:	4a05      	ldr	r2, [pc, #20]	; (400e1c <usart_sync_init+0x44>)
  400e06:	6022      	str	r2, [r4, #0]
}
  400e08:	4618      	mov	r0, r3
  400e0a:	bd38      	pop	{r3, r4, r5, pc}
  400e0c:	00405048 	.word	0x00405048
  400e10:	00400e4d 	.word	0x00400e4d
  400e14:	004019f1 	.word	0x004019f1
  400e18:	00400d79 	.word	0x00400d79
  400e1c:	00400d09 	.word	0x00400d09

00400e20 <usart_sync_enable>:
{
  400e20:	b510      	push	{r4, lr}
	ASSERT(descr);
  400e22:	4604      	mov	r4, r0
  400e24:	2253      	movs	r2, #83	; 0x53
  400e26:	4906      	ldr	r1, [pc, #24]	; (400e40 <usart_sync_enable+0x20>)
  400e28:	3000      	adds	r0, #0
  400e2a:	bf18      	it	ne
  400e2c:	2001      	movne	r0, #1
  400e2e:	4b05      	ldr	r3, [pc, #20]	; (400e44 <usart_sync_enable+0x24>)
  400e30:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400e32:	f104 0008 	add.w	r0, r4, #8
  400e36:	4b04      	ldr	r3, [pc, #16]	; (400e48 <usart_sync_enable+0x28>)
  400e38:	4798      	blx	r3
}
  400e3a:	2000      	movs	r0, #0
  400e3c:	bd10      	pop	{r4, pc}
  400e3e:	bf00      	nop
  400e40:	00405048 	.word	0x00405048
  400e44:	00400e4d 	.word	0x00400e4d
  400e48:	00401a29 	.word	0x00401a29

00400e4c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400e4c:	b900      	cbnz	r0, 400e50 <assert+0x4>
		__asm("BKPT #0");
  400e4e:	be00      	bkpt	0x0000
  400e50:	4770      	bx	lr

00400e52 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  400e52:	6803      	ldr	r3, [r0, #0]
  400e54:	b11b      	cbz	r3, 400e5e <is_list_element+0xc>
		if (it == element) {
  400e56:	428b      	cmp	r3, r1
  400e58:	d003      	beq.n	400e62 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  400e5a:	681b      	ldr	r3, [r3, #0]
  400e5c:	e7fa      	b.n	400e54 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  400e5e:	2000      	movs	r0, #0
  400e60:	4770      	bx	lr
			return true;
  400e62:	2001      	movs	r0, #1
}
  400e64:	4770      	bx	lr
	...

00400e68 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400e68:	b538      	push	{r3, r4, r5, lr}
  400e6a:	4604      	mov	r4, r0
  400e6c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  400e6e:	4b06      	ldr	r3, [pc, #24]	; (400e88 <list_insert_as_head+0x20>)
  400e70:	4798      	blx	r3
  400e72:	f080 0001 	eor.w	r0, r0, #1
  400e76:	2239      	movs	r2, #57	; 0x39
  400e78:	4904      	ldr	r1, [pc, #16]	; (400e8c <list_insert_as_head+0x24>)
  400e7a:	b2c0      	uxtb	r0, r0
  400e7c:	4b04      	ldr	r3, [pc, #16]	; (400e90 <list_insert_as_head+0x28>)
  400e7e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  400e80:	6823      	ldr	r3, [r4, #0]
  400e82:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  400e84:	6025      	str	r5, [r4, #0]
  400e86:	bd38      	pop	{r3, r4, r5, pc}
  400e88:	00400e53 	.word	0x00400e53
  400e8c:	00405064 	.word	0x00405064
  400e90:	00400e4d 	.word	0x00400e4d

00400e94 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  400e94:	6803      	ldr	r3, [r0, #0]
  400e96:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400e98:	6001      	str	r1, [r0, #0]
  400e9a:	4770      	bx	lr

00400e9c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  400e9c:	6803      	ldr	r3, [r0, #0]
  400e9e:	b11b      	cbz	r3, 400ea8 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400ea0:	681a      	ldr	r2, [r3, #0]
  400ea2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400ea4:	4618      	mov	r0, r3
  400ea6:	4770      	bx	lr
	}

	return NULL;
  400ea8:	2000      	movs	r0, #0
}
  400eaa:	4770      	bx	lr

00400eac <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  400eac:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  400eae:	4a06      	ldr	r2, [pc, #24]	; (400ec8 <_sbrk+0x1c>)
  400eb0:	6812      	ldr	r2, [r2, #0]
  400eb2:	b122      	cbz	r2, 400ebe <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400eb4:	4a04      	ldr	r2, [pc, #16]	; (400ec8 <_sbrk+0x1c>)
  400eb6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400eb8:	4403      	add	r3, r0
  400eba:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  400ebc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400ebe:	4903      	ldr	r1, [pc, #12]	; (400ecc <_sbrk+0x20>)
  400ec0:	4a01      	ldr	r2, [pc, #4]	; (400ec8 <_sbrk+0x1c>)
  400ec2:	6011      	str	r1, [r2, #0]
  400ec4:	e7f6      	b.n	400eb4 <_sbrk+0x8>
  400ec6:	bf00      	nop
  400ec8:	20400258 	.word	0x20400258
  400ecc:	20400970 	.word	0x20400970

00400ed0 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  400ed0:	f04f 30ff 	mov.w	r0, #4294967295
  400ed4:	4770      	bx	lr

00400ed6 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400eda:	604b      	str	r3, [r1, #4]

	return 0;
}
  400edc:	2000      	movs	r0, #0
  400ede:	4770      	bx	lr

00400ee0 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  400ee0:	2001      	movs	r0, #1
  400ee2:	4770      	bx	lr

00400ee4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400ee4:	2000      	movs	r0, #0
  400ee6:	4770      	bx	lr

00400ee8 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  400ee8:	2364      	movs	r3, #100	; 0x64
  400eea:	4a1d      	ldr	r2, [pc, #116]	; (400f60 <_afec_init+0x78>)
  400eec:	fb03 2301 	mla	r3, r3, r1, r2
  400ef0:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  400ef2:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  400ef4:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  400ef6:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  400ef8:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  400efa:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  400efc:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  400efe:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  400f00:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  400f02:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  400f04:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  400f06:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  400f08:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  400f0a:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  400f0c:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  400f0e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  400f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  400f14:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  400f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  400f1a:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  400f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  400f20:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  400f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  400f26:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400f2a:	2200      	movs	r2, #0
  400f2c:	2a0b      	cmp	r2, #11
  400f2e:	d814      	bhi.n	400f5a <_afec_init+0x72>
{
  400f30:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  400f32:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  400f34:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400f38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400f3c:	4413      	add	r3, r2
  400f3e:	330c      	adds	r3, #12
  400f40:	4c07      	ldr	r4, [pc, #28]	; (400f60 <_afec_init+0x78>)
  400f42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  400f46:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  400f48:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400f4a:	3201      	adds	r2, #1
  400f4c:	b2d2      	uxtb	r2, r2
  400f4e:	2a0b      	cmp	r2, #11
  400f50:	d9ef      	bls.n	400f32 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  400f52:	2000      	movs	r0, #0
  400f54:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f58:	4770      	bx	lr
  400f5a:	2000      	movs	r0, #0
  400f5c:	4770      	bx	lr
  400f5e:	bf00      	nop
  400f60:	00405084 	.word	0x00405084

00400f64 <_afec_get_hardware_index>:
{
  400f64:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  400f66:	4b09      	ldr	r3, [pc, #36]	; (400f8c <_afec_get_hardware_index+0x28>)
  400f68:	4298      	cmp	r0, r3
  400f6a:	d00a      	beq.n	400f82 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  400f6c:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400f70:	4298      	cmp	r0, r3
  400f72:	d008      	beq.n	400f86 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  400f74:	22a3      	movs	r2, #163	; 0xa3
  400f76:	4906      	ldr	r1, [pc, #24]	; (400f90 <_afec_get_hardware_index+0x2c>)
  400f78:	2000      	movs	r0, #0
  400f7a:	4b06      	ldr	r3, [pc, #24]	; (400f94 <_afec_get_hardware_index+0x30>)
  400f7c:	4798      	blx	r3
	return 0;
  400f7e:	2000      	movs	r0, #0
  400f80:	bd08      	pop	{r3, pc}
		return 0;
  400f82:	2000      	movs	r0, #0
  400f84:	bd08      	pop	{r3, pc}
		return 1;
  400f86:	2001      	movs	r0, #1
}
  400f88:	bd08      	pop	{r3, pc}
  400f8a:	bf00      	nop
  400f8c:	4003c000 	.word	0x4003c000
  400f90:	0040514c 	.word	0x0040514c
  400f94:	00400e4d 	.word	0x00400e4d

00400f98 <_afec_get_regs>:
{
  400f98:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  400f9a:	4b09      	ldr	r3, [pc, #36]	; (400fc0 <_afec_get_regs+0x28>)
  400f9c:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400f9e:	2300      	movs	r3, #0
  400fa0:	2b01      	cmp	r3, #1
  400fa2:	d809      	bhi.n	400fb8 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  400fa4:	2264      	movs	r2, #100	; 0x64
  400fa6:	fb02 f203 	mul.w	r2, r2, r3
  400faa:	4906      	ldr	r1, [pc, #24]	; (400fc4 <_afec_get_regs+0x2c>)
  400fac:	5c8a      	ldrb	r2, [r1, r2]
  400fae:	4290      	cmp	r0, r2
  400fb0:	d003      	beq.n	400fba <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400fb2:	3301      	adds	r3, #1
  400fb4:	b2db      	uxtb	r3, r3
  400fb6:	e7f3      	b.n	400fa0 <_afec_get_regs+0x8>
	return 0;
  400fb8:	2300      	movs	r3, #0
}
  400fba:	4618      	mov	r0, r3
  400fbc:	bd08      	pop	{r3, pc}
  400fbe:	bf00      	nop
  400fc0:	00400f65 	.word	0x00400f65
  400fc4:	00405084 	.word	0x00405084

00400fc8 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
  400fc8:	b538      	push	{r3, r4, r5, lr}
  400fca:	460c      	mov	r4, r1
	ASSERT(device);
  400fcc:	4605      	mov	r5, r0
  400fce:	f44f 728d 	mov.w	r2, #282	; 0x11a
  400fd2:	4907      	ldr	r1, [pc, #28]	; (400ff0 <_adc_sync_init+0x28>)
  400fd4:	3000      	adds	r0, #0
  400fd6:	bf18      	it	ne
  400fd8:	2001      	movne	r0, #1
  400fda:	4b06      	ldr	r3, [pc, #24]	; (400ff4 <_adc_sync_init+0x2c>)
  400fdc:	4798      	blx	r3

	device->hw = hw;
  400fde:	602c      	str	r4, [r5, #0]

	return _afec_init(hw, _afec_get_regs((uint32_t)hw));
  400fe0:	4620      	mov	r0, r4
  400fe2:	4b05      	ldr	r3, [pc, #20]	; (400ff8 <_adc_sync_init+0x30>)
  400fe4:	4798      	blx	r3
  400fe6:	4601      	mov	r1, r0
  400fe8:	4620      	mov	r0, r4
  400fea:	4b04      	ldr	r3, [pc, #16]	; (400ffc <_adc_sync_init+0x34>)
  400fec:	4798      	blx	r3
}
  400fee:	bd38      	pop	{r3, r4, r5, pc}
  400ff0:	0040514c 	.word	0x0040514c
  400ff4:	00400e4d 	.word	0x00400e4d
  400ff8:	00400f99 	.word	0x00400f99
  400ffc:	00400ee9 	.word	0x00400ee9

00401000 <_adc_sync_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  401000:	6802      	ldr	r2, [r0, #0]
  401002:	2301      	movs	r3, #1
  401004:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  401008:	6151      	str	r1, [r2, #20]
  40100a:	4770      	bx	lr

0040100c <_adc_sync_get_data_size>:
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	(void)device;

	return 2;
}
  40100c:	2002      	movs	r0, #2
  40100e:	4770      	bx	lr

00401010 <_adc_sync_is_channel_conversion_done>:
/**
 * \brief Check if conversion is done
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	return hri_afec_get_ISR_reg(device->hw, (1 << channel));
  401010:	6802      	ldr	r2, [r0, #0]
  401012:	2301      	movs	r3, #1
  401014:	fa03 f101 	lsl.w	r1, r3, r1
	tmp = ((Afec *)hw)->AFEC_ISR;
  401018:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40101a:	4219      	tst	r1, r3
}
  40101c:	bf14      	ite	ne
  40101e:	2001      	movne	r0, #1
  401020:	2000      	moveq	r0, #0
  401022:	4770      	bx	lr

00401024 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_afec_write_CR_reg(device->hw, AFEC_CR_START);
  401024:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_afec_write_CR_reg(const void *const hw, hri_afec_cr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CR = data;
  401026:	2202      	movs	r2, #2
  401028:	601a      	str	r2, [r3, #0]
  40102a:	4770      	bx	lr

0040102c <_adc_sync_read_channel_data>:
/**
 * \brief Retrieve the conversion result
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_write_CSELR_reg(device->hw, channel);
  40102c:	6803      	ldr	r3, [r0, #0]
	((Afec *)hw)->AFEC_CSELR = data;
  40102e:	6659      	str	r1, [r3, #100]	; 0x64

	return hri_afec_read_CDR_reg(device->hw);
  401030:	6803      	ldr	r3, [r0, #0]
	return ((Afec *)hw)->AFEC_CDR;
  401032:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401034:	b280      	uxth	r0, r0
  401036:	4770      	bx	lr

00401038 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  401038:	f44f 7396 	mov.w	r3, #300	; 0x12c
  40103c:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  401040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401044:	fb03 f000 	mul.w	r0, r3, r0
  401048:	4770      	bx	lr
	...

0040104c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  40104c:	b500      	push	{lr}
  40104e:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  401050:	a801      	add	r0, sp, #4
  401052:	4b0e      	ldr	r3, [pc, #56]	; (40108c <_init_chip+0x40>)
  401054:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  401056:	4a0e      	ldr	r2, [pc, #56]	; (401090 <_init_chip+0x44>)
  401058:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  40105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  401064:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401068:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  40106c:	a801      	add	r0, sp, #4
  40106e:	4b09      	ldr	r3, [pc, #36]	; (401094 <_init_chip+0x48>)
  401070:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  401072:	4a09      	ldr	r2, [pc, #36]	; (401098 <_init_chip+0x4c>)
  401074:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  401076:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  40107a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  40107e:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  401080:	4b06      	ldr	r3, [pc, #24]	; (40109c <_init_chip+0x50>)
  401082:	4798      	blx	r3
}
  401084:	b003      	add	sp, #12
  401086:	f85d fb04 	ldr.w	pc, [sp], #4
  40108a:	bf00      	nop
  40108c:	004009ed 	.word	0x004009ed
  401090:	e000ed00 	.word	0xe000ed00
  401094:	004009fb 	.word	0x004009fb
  401098:	400e0c00 	.word	0x400e0c00
  40109c:	00401421 	.word	0x00401421

004010a0 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  4010a0:	b538      	push	{r3, r4, r5, lr}
  4010a2:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  4010a4:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  4010a6:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  4010a8:	f014 0f01 	tst.w	r4, #1
  4010ac:	d11a      	bne.n	4010e4 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  4010ae:	f414 7f00 	tst.w	r4, #512	; 0x200
  4010b2:	d11a      	bne.n	4010ea <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  4010b4:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  4010b8:	d11b      	bne.n	4010f2 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  4010ba:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  4010be:	d11d      	bne.n	4010fc <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  4010c0:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  4010c4:	d008      	beq.n	4010d8 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4010c6:	68eb      	ldr	r3, [r5, #12]
  4010c8:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  4010ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
  4010cc:	f012 0f20 	tst.w	r2, #32
  4010d0:	d019      	beq.n	401106 <_can_irq_handler+0x66>
  4010d2:	2102      	movs	r1, #2
  4010d4:	4628      	mov	r0, r5
  4010d6:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  4010d8:	f014 0f08 	tst.w	r4, #8
  4010dc:	d115      	bne.n	40110a <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  4010de:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  4010e0:	651c      	str	r4, [r3, #80]	; 0x50
  4010e2:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  4010e4:	6883      	ldr	r3, [r0, #8]
  4010e6:	4798      	blx	r3
  4010e8:	e7e1      	b.n	4010ae <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  4010ea:	686b      	ldr	r3, [r5, #4]
  4010ec:	4628      	mov	r0, r5
  4010ee:	4798      	blx	r3
  4010f0:	e7e0      	b.n	4010b4 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  4010f2:	68eb      	ldr	r3, [r5, #12]
  4010f4:	2103      	movs	r1, #3
  4010f6:	4628      	mov	r0, r5
  4010f8:	4798      	blx	r3
  4010fa:	e7de      	b.n	4010ba <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  4010fc:	68eb      	ldr	r3, [r5, #12]
  4010fe:	2100      	movs	r1, #0
  401100:	4628      	mov	r0, r5
  401102:	4798      	blx	r3
  401104:	e7dc      	b.n	4010c0 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401106:	2101      	movs	r1, #1
  401108:	e7e4      	b.n	4010d4 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  40110a:	68eb      	ldr	r3, [r5, #12]
  40110c:	2104      	movs	r1, #4
  40110e:	4628      	mov	r0, r5
  401110:	4798      	blx	r3
  401112:	e7e4      	b.n	4010de <_can_irq_handler+0x3e>

00401114 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  401114:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  401116:	4b02      	ldr	r3, [pc, #8]	; (401120 <MCAN1_INT0_Handler+0xc>)
  401118:	6a98      	ldr	r0, [r3, #40]	; 0x28
  40111a:	4b02      	ldr	r3, [pc, #8]	; (401124 <MCAN1_INT0_Handler+0x10>)
  40111c:	4798      	blx	r3
  40111e:	bd08      	pop	{r3, pc}
  401120:	2040025c 	.word	0x2040025c
  401124:	004010a1 	.word	0x004010a1

00401128 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401128:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  40112a:	2500      	movs	r5, #0
  40112c:	428d      	cmp	r5, r1
  40112e:	d210      	bcs.n	401152 <_ffs+0x2a>
  401130:	2201      	movs	r2, #1
  401132:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401134:	2b1f      	cmp	r3, #31
  401136:	d80a      	bhi.n	40114e <_ffs+0x26>
			if (v[i] & bit) {
  401138:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  40113c:	4222      	tst	r2, r4
  40113e:	d102      	bne.n	401146 <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401140:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401142:	3301      	adds	r3, #1
  401144:	e7f6      	b.n	401134 <_ffs+0xc>
				return i * 32 + j;
  401146:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  40114a:	bc30      	pop	{r4, r5}
  40114c:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  40114e:	3501      	adds	r5, #1
  401150:	e7ec      	b.n	40112c <_ffs+0x4>
	return -1;
  401152:	f04f 30ff 	mov.w	r0, #4294967295
  401156:	e7f8      	b.n	40114a <_ffs+0x22>

00401158 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401158:	b510      	push	{r4, lr}
  40115a:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  40115c:	2300      	movs	r3, #0
  40115e:	9301      	str	r3, [sp, #4]
  401160:	9302      	str	r3, [sp, #8]
  401162:	9303      	str	r3, [sp, #12]
  401164:	9304      	str	r3, [sp, #16]
  401166:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401168:	4b21      	ldr	r3, [pc, #132]	; (4011f0 <_ext_irq_handler+0x98>)
  40116a:	6818      	ldr	r0, [r3, #0]
  40116c:	22f8      	movs	r2, #248	; 0xf8
  40116e:	4921      	ldr	r1, [pc, #132]	; (4011f4 <_ext_irq_handler+0x9c>)
  401170:	3000      	adds	r0, #0
  401172:	bf18      	it	ne
  401174:	2001      	movne	r0, #1
  401176:	4b20      	ldr	r3, [pc, #128]	; (4011f8 <_ext_irq_handler+0xa0>)
  401178:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  40117a:	4b20      	ldr	r3, [pc, #128]	; (4011fc <_ext_irq_handler+0xa4>)
  40117c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40117e:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401180:	4013      	ands	r3, r2
  401182:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401184:	491e      	ldr	r1, [pc, #120]	; (401200 <_ext_irq_handler+0xa8>)
  401186:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401188:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  40118a:	400a      	ands	r2, r1
  40118c:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  40118e:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  401190:	e025      	b.n	4011de <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  401192:	4b17      	ldr	r3, [pc, #92]	; (4011f0 <_ext_irq_handler+0x98>)
  401194:	681b      	ldr	r3, [r3, #0]
  401196:	4620      	mov	r0, r4
  401198:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  40119a:	1163      	asrs	r3, r4, #5
  40119c:	f004 041f 	and.w	r4, r4, #31
  4011a0:	2201      	movs	r2, #1
  4011a2:	fa02 f404 	lsl.w	r4, r2, r4
  4011a6:	aa06      	add	r2, sp, #24
  4011a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4011ac:	f853 2c14 	ldr.w	r2, [r3, #-20]
  4011b0:	ea22 0204 	bic.w	r2, r2, r4
  4011b4:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  4011b8:	2105      	movs	r1, #5
  4011ba:	a801      	add	r0, sp, #4
  4011bc:	4b11      	ldr	r3, [pc, #68]	; (401204 <_ext_irq_handler+0xac>)
  4011be:	4798      	blx	r3
  4011c0:	4604      	mov	r4, r0
		while (-1 != pos) {
  4011c2:	f1b4 3fff 	cmp.w	r4, #4294967295
  4011c6:	d1e4      	bne.n	401192 <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  4011c8:	4a0c      	ldr	r2, [pc, #48]	; (4011fc <_ext_irq_handler+0xa4>)
  4011ca:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4011cc:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  4011ce:	400b      	ands	r3, r1
  4011d0:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  4011d2:	490b      	ldr	r1, [pc, #44]	; (401200 <_ext_irq_handler+0xa8>)
  4011d4:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4011d6:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4011d8:	4002      	ands	r2, r0
  4011da:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  4011dc:	4313      	orrs	r3, r2
	while (flag_total) {
  4011de:	b12b      	cbz	r3, 4011ec <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  4011e0:	2105      	movs	r1, #5
  4011e2:	a801      	add	r0, sp, #4
  4011e4:	4b07      	ldr	r3, [pc, #28]	; (401204 <_ext_irq_handler+0xac>)
  4011e6:	4798      	blx	r3
  4011e8:	4604      	mov	r4, r0
		while (-1 != pos) {
  4011ea:	e7ea      	b.n	4011c2 <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  4011ec:	b006      	add	sp, #24
  4011ee:	bd10      	pop	{r4, pc}
  4011f0:	20400288 	.word	0x20400288
  4011f4:	004051a4 	.word	0x004051a4
  4011f8:	00400e4d 	.word	0x00400e4d
  4011fc:	400e0e00 	.word	0x400e0e00
  401200:	400e1400 	.word	0x400e1400
  401204:	00401129 	.word	0x00401129

00401208 <_pio_get_hardware_index>:
{
  401208:	b510      	push	{r4, lr}
	ASSERT(hw);
  40120a:	4604      	mov	r4, r0
  40120c:	22d2      	movs	r2, #210	; 0xd2
  40120e:	4905      	ldr	r1, [pc, #20]	; (401224 <_pio_get_hardware_index+0x1c>)
  401210:	3000      	adds	r0, #0
  401212:	bf18      	it	ne
  401214:	2001      	movne	r0, #1
  401216:	4b04      	ldr	r3, [pc, #16]	; (401228 <_pio_get_hardware_index+0x20>)
  401218:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  40121a:	4804      	ldr	r0, [pc, #16]	; (40122c <_pio_get_hardware_index+0x24>)
  40121c:	4420      	add	r0, r4
}
  40121e:	f3c0 2047 	ubfx	r0, r0, #9, #8
  401222:	bd10      	pop	{r4, pc}
  401224:	004051a4 	.word	0x004051a4
  401228:	00400e4d 	.word	0x00400e4d
  40122c:	bff1f200 	.word	0xbff1f200

00401230 <_pio_get_index>:
{
  401230:	b510      	push	{r4, lr}
	ASSERT(hw);
  401232:	4604      	mov	r4, r0
  401234:	22e0      	movs	r2, #224	; 0xe0
  401236:	490d      	ldr	r1, [pc, #52]	; (40126c <_pio_get_index+0x3c>)
  401238:	3000      	adds	r0, #0
  40123a:	bf18      	it	ne
  40123c:	2001      	movne	r0, #1
  40123e:	4b0c      	ldr	r3, [pc, #48]	; (401270 <_pio_get_index+0x40>)
  401240:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  401242:	4620      	mov	r0, r4
  401244:	4b0b      	ldr	r3, [pc, #44]	; (401274 <_pio_get_index+0x44>)
  401246:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401248:	2300      	movs	r3, #0
  40124a:	2b01      	cmp	r3, #1
  40124c:	d80b      	bhi.n	401266 <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  40124e:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  401252:	008a      	lsls	r2, r1, #2
  401254:	4908      	ldr	r1, [pc, #32]	; (401278 <_pio_get_index+0x48>)
  401256:	5c8a      	ldrb	r2, [r1, r2]
  401258:	4290      	cmp	r0, r2
  40125a:	d002      	beq.n	401262 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  40125c:	3301      	adds	r3, #1
  40125e:	b2db      	uxtb	r3, r3
  401260:	e7f3      	b.n	40124a <_pio_get_index+0x1a>
			return i;
  401262:	b258      	sxtb	r0, r3
  401264:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  401266:	f04f 30ff 	mov.w	r0, #4294967295
}
  40126a:	bd10      	pop	{r4, pc}
  40126c:	004051a4 	.word	0x004051a4
  401270:	00400e4d 	.word	0x00400e4d
  401274:	00401209 	.word	0x00401209
  401278:	00405164 	.word	0x00405164

0040127c <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  40127c:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  40127e:	4604      	mov	r4, r0
  401280:	f240 1259 	movw	r2, #345	; 0x159
  401284:	4929      	ldr	r1, [pc, #164]	; (40132c <_pio_init+0xb0>)
  401286:	3000      	adds	r0, #0
  401288:	bf18      	it	ne
  40128a:	2001      	movne	r0, #1
  40128c:	4b28      	ldr	r3, [pc, #160]	; (401330 <_pio_init+0xb4>)
  40128e:	4798      	blx	r3

	i = _pio_get_index(hw);
  401290:	4620      	mov	r0, r4
  401292:	4b28      	ldr	r3, [pc, #160]	; (401334 <_pio_init+0xb8>)
  401294:	4798      	blx	r3
	if (i < 0) {
  401296:	2800      	cmp	r0, #0
  401298:	db43      	blt.n	401322 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  40129a:	4d27      	ldr	r5, [pc, #156]	; (401338 <_pio_init+0xbc>)
  40129c:	00c2      	lsls	r2, r0, #3
  40129e:	1a11      	subs	r1, r2, r0
  4012a0:	008b      	lsls	r3, r1, #2
  4012a2:	442b      	add	r3, r5
  4012a4:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  4012a6:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  4012aa:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  4012ac:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  4012b0:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  4012b2:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  4012b6:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  4012b8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  4012bc:	1a10      	subs	r0, r2, r0
  4012be:	0083      	lsls	r3, r0, #2
  4012c0:	442b      	add	r3, r5
  4012c2:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  4012c4:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  4012c8:	4620      	mov	r0, r4
  4012ca:	4b1c      	ldr	r3, [pc, #112]	; (40133c <_pio_init+0xc0>)
  4012cc:	4798      	blx	r3
  4012ce:	4428      	add	r0, r5
  4012d0:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4012d4:	2b00      	cmp	r3, #0
  4012d6:	db0c      	blt.n	4012f2 <_pio_init+0x76>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012d8:	095a      	lsrs	r2, r3, #5
  4012da:	f003 001f 	and.w	r0, r3, #31
  4012de:	2101      	movs	r1, #1
  4012e0:	4081      	lsls	r1, r0
  4012e2:	3220      	adds	r2, #32
  4012e4:	4816      	ldr	r0, [pc, #88]	; (401340 <_pio_init+0xc4>)
  4012e6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4012ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4012ee:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4012f2:	2b00      	cmp	r3, #0
  4012f4:	db08      	blt.n	401308 <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4012f6:	095a      	lsrs	r2, r3, #5
  4012f8:	f003 001f 	and.w	r0, r3, #31
  4012fc:	2101      	movs	r1, #1
  4012fe:	4081      	lsls	r1, r0
  401300:	3260      	adds	r2, #96	; 0x60
  401302:	480f      	ldr	r0, [pc, #60]	; (401340 <_pio_init+0xc4>)
  401304:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401308:	2b00      	cmp	r3, #0
  40130a:	db0d      	blt.n	401328 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40130c:	0959      	lsrs	r1, r3, #5
  40130e:	f003 031f 	and.w	r3, r3, #31
  401312:	2201      	movs	r2, #1
  401314:	fa02 f303 	lsl.w	r3, r2, r3
  401318:	4a09      	ldr	r2, [pc, #36]	; (401340 <_pio_init+0xc4>)
  40131a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  40131e:	2000      	movs	r0, #0
  401320:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  401322:	f06f 0010 	mvn.w	r0, #16
  401326:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401328:	2000      	movs	r0, #0
}
  40132a:	bd38      	pop	{r3, r4, r5, pc}
  40132c:	004051a4 	.word	0x004051a4
  401330:	00400e4d 	.word	0x00400e4d
  401334:	00401231 	.word	0x00401231
  401338:	00405164 	.word	0x00405164
  40133c:	00401209 	.word	0x00401209
  401340:	e000e100 	.word	0xe000e100

00401344 <PIOD_Handler>:
{
  401344:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401346:	4b01      	ldr	r3, [pc, #4]	; (40134c <PIOD_Handler+0x8>)
  401348:	4798      	blx	r3
  40134a:	bd08      	pop	{r3, pc}
  40134c:	00401159 	.word	0x00401159

00401350 <PIOA_Handler>:
{
  401350:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401352:	4b01      	ldr	r3, [pc, #4]	; (401358 <PIOA_Handler+0x8>)
  401354:	4798      	blx	r3
  401356:	bd08      	pop	{r3, pc}
  401358:	00401159 	.word	0x00401159

0040135c <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  40135c:	b538      	push	{r3, r4, r5, lr}
  40135e:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401360:	4804      	ldr	r0, [pc, #16]	; (401374 <_ext_irq_init+0x18>)
  401362:	4c05      	ldr	r4, [pc, #20]	; (401378 <_ext_irq_init+0x1c>)
  401364:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  401366:	4805      	ldr	r0, [pc, #20]	; (40137c <_ext_irq_init+0x20>)
  401368:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  40136a:	4b05      	ldr	r3, [pc, #20]	; (401380 <_ext_irq_init+0x24>)
  40136c:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  40136e:	2000      	movs	r0, #0
  401370:	bd38      	pop	{r3, r4, r5, pc}
  401372:	bf00      	nop
  401374:	400e0e00 	.word	0x400e0e00
  401378:	0040127d 	.word	0x0040127d
  40137c:	400e1400 	.word	0x400e1400
  401380:	20400288 	.word	0x20400288

00401384 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  401384:	490e      	ldr	r1, [pc, #56]	; (4013c0 <_pmc_init_sources+0x3c>)
  401386:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401388:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  40138c:	4b0d      	ldr	r3, [pc, #52]	; (4013c4 <_pmc_init_sources+0x40>)
  40138e:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401390:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  401392:	4b0b      	ldr	r3, [pc, #44]	; (4013c0 <_pmc_init_sources+0x3c>)
  401394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  401396:	f013 0f01 	tst.w	r3, #1
  40139a:	d0fa      	beq.n	401392 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  40139c:	4b08      	ldr	r3, [pc, #32]	; (4013c0 <_pmc_init_sources+0x3c>)
  40139e:	6a19      	ldr	r1, [r3, #32]
  4013a0:	4a09      	ldr	r2, [pc, #36]	; (4013c8 <_pmc_init_sources+0x44>)
  4013a2:	430a      	orrs	r2, r1
  4013a4:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4013a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4013a8:	4a08      	ldr	r2, [pc, #32]	; (4013cc <_pmc_init_sources+0x48>)
  4013aa:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4013ac:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  4013ae:	4a08      	ldr	r2, [pc, #32]	; (4013d0 <_pmc_init_sources+0x4c>)
  4013b0:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4013b2:	4b03      	ldr	r3, [pc, #12]	; (4013c0 <_pmc_init_sources+0x3c>)
  4013b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4013b6:	f013 0f02 	tst.w	r3, #2
  4013ba:	d0fa      	beq.n	4013b2 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4013bc:	4770      	bx	lr
  4013be:	bf00      	nop
  4013c0:	400e0600 	.word	0x400e0600
  4013c4:	00373e01 	.word	0x00373e01
  4013c8:	01370000 	.word	0x01370000
  4013cc:	f800ffff 	.word	0xf800ffff
  4013d0:	20183f01 	.word	0x20183f01

004013d4 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4013d4:	4a11      	ldr	r2, [pc, #68]	; (40141c <_pmc_init_master_clock+0x48>)
  4013d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  4013d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4013dc:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4013de:	4b0f      	ldr	r3, [pc, #60]	; (40141c <_pmc_init_master_clock+0x48>)
  4013e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4013e2:	f013 0f08 	tst.w	r3, #8
  4013e6:	d0fa      	beq.n	4013de <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4013e8:	4a0c      	ldr	r2, [pc, #48]	; (40141c <_pmc_init_master_clock+0x48>)
  4013ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  4013ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  4013f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  4013f4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4013f6:	4b09      	ldr	r3, [pc, #36]	; (40141c <_pmc_init_master_clock+0x48>)
  4013f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4013fa:	f013 0f08 	tst.w	r3, #8
  4013fe:	d0fa      	beq.n	4013f6 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401400:	4a06      	ldr	r2, [pc, #24]	; (40141c <_pmc_init_master_clock+0x48>)
  401402:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401404:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401408:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  40140c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40140e:	4b03      	ldr	r3, [pc, #12]	; (40141c <_pmc_init_master_clock+0x48>)
  401410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401412:	f013 0f08 	tst.w	r3, #8
  401416:	d0fa      	beq.n	40140e <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401418:	4770      	bx	lr
  40141a:	bf00      	nop
  40141c:	400e0600 	.word	0x400e0600

00401420 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401420:	b508      	push	{r3, lr}
	_pmc_init_sources();
  401422:	4b02      	ldr	r3, [pc, #8]	; (40142c <_pmc_init+0xc>)
  401424:	4798      	blx	r3
	_pmc_init_master_clock();
  401426:	4b02      	ldr	r3, [pc, #8]	; (401430 <_pmc_init+0x10>)
  401428:	4798      	blx	r3
  40142a:	bd08      	pop	{r3, pc}
  40142c:	00401385 	.word	0x00401385
  401430:	004013d5 	.word	0x004013d5

00401434 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401434:	2300      	movs	r3, #0
  401436:	2b01      	cmp	r3, #1
  401438:	d80f      	bhi.n	40145a <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  40143a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  40143e:	008a      	lsls	r2, r1, #2
  401440:	4907      	ldr	r1, [pc, #28]	; (401460 <_pwm_get_cfg+0x2c>)
  401442:	588a      	ldr	r2, [r1, r2]
  401444:	4282      	cmp	r2, r0
  401446:	d002      	beq.n	40144e <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401448:	3301      	adds	r3, #1
  40144a:	b2db      	uxtb	r3, r3
  40144c:	e7f3      	b.n	401436 <_pwm_get_cfg+0x2>
			return (_pwms + i);
  40144e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  401452:	009a      	lsls	r2, r3, #2
  401454:	4608      	mov	r0, r1
  401456:	4410      	add	r0, r2
  401458:	4770      	bx	lr
		}
	}

	return NULL;
  40145a:	2000      	movs	r0, #0
}
  40145c:	4770      	bx	lr
  40145e:	bf00      	nop
  401460:	004051c0 	.word	0x004051c0

00401464 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  401464:	4b06      	ldr	r3, [pc, #24]	; (401480 <_pwm_init_irq_param+0x1c>)
  401466:	4298      	cmp	r0, r3
  401468:	d003      	beq.n	401472 <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  40146a:	4b06      	ldr	r3, [pc, #24]	; (401484 <_pwm_init_irq_param+0x20>)
  40146c:	4298      	cmp	r0, r3
  40146e:	d003      	beq.n	401478 <_pwm_init_irq_param+0x14>
  401470:	4770      	bx	lr
		_pwm0_dev = dev;
  401472:	4b05      	ldr	r3, [pc, #20]	; (401488 <_pwm_init_irq_param+0x24>)
  401474:	6019      	str	r1, [r3, #0]
  401476:	e7f8      	b.n	40146a <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  401478:	4b03      	ldr	r3, [pc, #12]	; (401488 <_pwm_init_irq_param+0x24>)
  40147a:	6059      	str	r1, [r3, #4]
	}
}
  40147c:	e7f8      	b.n	401470 <_pwm_init_irq_param+0xc>
  40147e:	bf00      	nop
  401480:	40020000 	.word	0x40020000
  401484:	4005c000 	.word	0x4005c000
  401488:	2040028c 	.word	0x2040028c

0040148c <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  40148c:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  40148e:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  401490:	69db      	ldr	r3, [r3, #28]
  401492:	b113      	cbz	r3, 40149a <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  401494:	6803      	ldr	r3, [r0, #0]
  401496:	b103      	cbz	r3, 40149a <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  401498:	4798      	blx	r3
  40149a:	bd08      	pop	{r3, pc}

0040149c <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  40149c:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  40149e:	4b02      	ldr	r3, [pc, #8]	; (4014a8 <PWM0_Handler+0xc>)
  4014a0:	6818      	ldr	r0, [r3, #0]
  4014a2:	4b02      	ldr	r3, [pc, #8]	; (4014ac <PWM0_Handler+0x10>)
  4014a4:	4798      	blx	r3
  4014a6:	bd08      	pop	{r3, pc}
  4014a8:	2040028c 	.word	0x2040028c
  4014ac:	0040148d 	.word	0x0040148d

004014b0 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  4014b0:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  4014b2:	4b02      	ldr	r3, [pc, #8]	; (4014bc <PWM1_Handler+0xc>)
  4014b4:	6858      	ldr	r0, [r3, #4]
  4014b6:	4b02      	ldr	r3, [pc, #8]	; (4014c0 <PWM1_Handler+0x10>)
  4014b8:	4798      	blx	r3
  4014ba:	bd08      	pop	{r3, pc}
  4014bc:	2040028c 	.word	0x2040028c
  4014c0:	0040148d 	.word	0x0040148d

004014c4 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  4014c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4014c6:	4606      	mov	r6, r0
	ASSERT(hw);
  4014c8:	460c      	mov	r4, r1
  4014ca:	1c08      	adds	r0, r1, #0
  4014cc:	bf18      	it	ne
  4014ce:	2001      	movne	r0, #1
  4014d0:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  4014d4:	4951      	ldr	r1, [pc, #324]	; (40161c <_pwm_init+0x158>)
  4014d6:	4b52      	ldr	r3, [pc, #328]	; (401620 <_pwm_init+0x15c>)
  4014d8:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  4014da:	4620      	mov	r0, r4
  4014dc:	4b51      	ldr	r3, [pc, #324]	; (401624 <_pwm_init+0x160>)
  4014de:	4798      	blx	r3
  4014e0:	4605      	mov	r5, r0

	device->hw = hw;
  4014e2:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  4014e4:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  4014e6:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  4014e8:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  4014ea:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  4014ec:	6903      	ldr	r3, [r0, #16]
  4014ee:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  4014f2:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  4014f4:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  4014f6:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  4014f8:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  4014fa:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  4014fc:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  401500:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  401502:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  401504:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  401506:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  40150a:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  40150c:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
	//int DT = 3;																	//Dead time of 3 (for 3kHz (6MHz) corresponds to 0.5us)
	
	//hri_pwmchnum_write_DT_DTH_bf(PWM0, DT);

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  401510:	2000      	movs	r0, #0
  401512:	e032      	b.n	40157a <_pwm_init+0xb6>
		ch = cfg->ch + i;
  401514:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  401516:	0103      	lsls	r3, r0, #4
  401518:	eb02 0e03 	add.w	lr, r2, r3
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  40151c:	5cd7      	ldrb	r7, [r2, r3]
  40151e:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  401522:	3710      	adds	r7, #16
  401524:	017f      	lsls	r7, r7, #5
  401526:	51e1      	str	r1, [r4, r7]
		hri_pwmchnum_set_CMR_DTE_bit((void *) &((Pwm *)hw)->PwmChNum[ch->index]);
  401528:	5cd1      	ldrb	r1, [r2, r3]
	((PwmChNum *)hw)->PWM_CMR |= PWM_CMR_DTE;
  40152a:	3110      	adds	r1, #16
  40152c:	0149      	lsls	r1, r1, #5
  40152e:	5867      	ldr	r7, [r4, r1]
  401530:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
  401534:	5067      	str	r7, [r4, r1]
		hri_pwm_set_DT_DTH_bf(hw, ch->index, 10);
  401536:	5cd1      	ldrb	r1, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  401538:	eb04 1141 	add.w	r1, r4, r1, lsl #5
  40153c:	f8d1 7218 	ldr.w	r7, [r1, #536]	; 0x218
  401540:	f047 070a 	orr.w	r7, r7, #10
  401544:	f8c1 7218 	str.w	r7, [r1, #536]	; 0x218
		hri_pwm_set_DT_DTL_bf(hw, ch->index, 10);
  401548:	5cd1      	ldrb	r1, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  40154a:	eb04 1141 	add.w	r1, r4, r1, lsl #5
  40154e:	f8d1 7218 	ldr.w	r7, [r1, #536]	; 0x218
  401552:	f447 2720 	orr.w	r7, r7, #655360	; 0xa0000
  401556:	f8c1 7218 	str.w	r7, [r1, #536]	; 0x218
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  40155a:	5cd1      	ldrb	r1, [r2, r3]
  40155c:	f8de 700c 	ldr.w	r7, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  401560:	3110      	adds	r1, #16
  401562:	eb04 1141 	add.w	r1, r4, r1, lsl #5
  401566:	604f      	str	r7, [r1, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  401568:	5cd3      	ldrb	r3, [r2, r3]
  40156a:	f8de 2008 	ldr.w	r2, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  40156e:	eb04 1343 	add.w	r3, r4, r3, lsl #5
  401572:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  401576:	3001      	adds	r0, #1
  401578:	b240      	sxtb	r0, r0
  40157a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  40157c:	4298      	cmp	r0, r3
  40157e:	d3c9      	bcc.n	401514 <_pwm_init+0x50>
  401580:	2300      	movs	r3, #0
  401582:	e014      	b.n	4015ae <_pwm_init+0xea>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  401584:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  401586:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  40158a:	0082      	lsls	r2, r0, #2
  40158c:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  401590:	5c88      	ldrb	r0, [r1, r2]
  401592:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  401596:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  40159a:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  40159e:	5c8a      	ldrb	r2, [r1, r2]
  4015a0:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4015a4:	3213      	adds	r2, #19
  4015a6:	0112      	lsls	r2, r2, #4
  4015a8:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  4015aa:	3301      	adds	r3, #1
  4015ac:	b25b      	sxtb	r3, r3
  4015ae:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4015b0:	4293      	cmp	r3, r2
  4015b2:	d3e7      	bcc.n	401584 <_pwm_init+0xc0>
	}

	_pwm_init_irq_param(hw, device);
  4015b4:	4631      	mov	r1, r6
  4015b6:	4620      	mov	r0, r4
  4015b8:	4b1b      	ldr	r3, [pc, #108]	; (401628 <_pwm_init+0x164>)
  4015ba:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  4015bc:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4015c0:	2b00      	cmp	r3, #0
  4015c2:	db0d      	blt.n	4015e0 <_pwm_init+0x11c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4015c4:	095a      	lsrs	r2, r3, #5
  4015c6:	f003 031f 	and.w	r3, r3, #31
  4015ca:	2101      	movs	r1, #1
  4015cc:	fa01 f303 	lsl.w	r3, r1, r3
  4015d0:	3220      	adds	r2, #32
  4015d2:	4916      	ldr	r1, [pc, #88]	; (40162c <_pwm_init+0x168>)
  4015d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4015d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4015dc:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  4015e0:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4015e4:	2b00      	cmp	r3, #0
  4015e6:	db09      	blt.n	4015fc <_pwm_init+0x138>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4015e8:	095a      	lsrs	r2, r3, #5
  4015ea:	f003 031f 	and.w	r3, r3, #31
  4015ee:	2101      	movs	r1, #1
  4015f0:	fa01 f303 	lsl.w	r3, r1, r3
  4015f4:	3260      	adds	r2, #96	; 0x60
  4015f6:	490d      	ldr	r1, [pc, #52]	; (40162c <_pwm_init+0x168>)
  4015f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  4015fc:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401600:	2b00      	cmp	r3, #0
  401602:	db08      	blt.n	401616 <_pwm_init+0x152>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401604:	0959      	lsrs	r1, r3, #5
  401606:	f003 031f 	and.w	r3, r3, #31
  40160a:	2201      	movs	r2, #1
  40160c:	fa02 f303 	lsl.w	r3, r2, r3
  401610:	4a06      	ldr	r2, [pc, #24]	; (40162c <_pwm_init+0x168>)
  401612:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  401616:	2000      	movs	r0, #0
  401618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40161a:	bf00      	nop
  40161c:	00405268 	.word	0x00405268
  401620:	00400e4d 	.word	0x00400e4d
  401624:	00401435 	.word	0x00401435
  401628:	00401465 	.word	0x00401465
  40162c:	e000e100 	.word	0xe000e100

00401630 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  401630:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  401632:	4604      	mov	r4, r0
  401634:	f44f 72df 	mov.w	r2, #446	; 0x1be
  401638:	490b      	ldr	r1, [pc, #44]	; (401668 <_pwm_enable+0x38>)
  40163a:	3000      	adds	r0, #0
  40163c:	bf18      	it	ne
  40163e:	2001      	movne	r0, #1
  401640:	4b0a      	ldr	r3, [pc, #40]	; (40166c <_pwm_enable+0x3c>)
  401642:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  401644:	6920      	ldr	r0, [r4, #16]
  401646:	4b0a      	ldr	r3, [pc, #40]	; (401670 <_pwm_enable+0x40>)
  401648:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  40164a:	2300      	movs	r3, #0
  40164c:	e008      	b.n	401660 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  40164e:	6921      	ldr	r1, [r4, #16]
  401650:	6b05      	ldr	r5, [r0, #48]	; 0x30
  401652:	011a      	lsls	r2, r3, #4
  401654:	5cad      	ldrb	r5, [r5, r2]
  401656:	2201      	movs	r2, #1
  401658:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  40165a:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  40165c:	3301      	adds	r3, #1
  40165e:	b25b      	sxtb	r3, r3
  401660:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401662:	4293      	cmp	r3, r2
  401664:	d3f3      	bcc.n	40164e <_pwm_enable+0x1e>
	}
}
  401666:	bd38      	pop	{r3, r4, r5, pc}
  401668:	00405268 	.word	0x00405268
  40166c:	00400e4d 	.word	0x00400e4d
  401670:	00401435 	.word	0x00401435

00401674 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  401674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401676:	460d      	mov	r5, r1
  401678:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  40167a:	4604      	mov	r4, r0
  40167c:	f240 12db 	movw	r2, #475	; 0x1db
  401680:	4911      	ldr	r1, [pc, #68]	; (4016c8 <_pwm_set_param+0x54>)
  401682:	2800      	cmp	r0, #0
  401684:	bf18      	it	ne
  401686:	42ae      	cmpne	r6, r5
  401688:	bf34      	ite	cc
  40168a:	2001      	movcc	r0, #1
  40168c:	2000      	movcs	r0, #0
  40168e:	4b0f      	ldr	r3, [pc, #60]	; (4016cc <_pwm_set_param+0x58>)
  401690:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  401692:	6920      	ldr	r0, [r4, #16]
  401694:	4b0e      	ldr	r3, [pc, #56]	; (4016d0 <_pwm_set_param+0x5c>)
  401696:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401698:	2300      	movs	r3, #0
  40169a:	e010      	b.n	4016be <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  40169c:	6922      	ldr	r2, [r4, #16]
  40169e:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4016a0:	0119      	lsls	r1, r3, #4
  4016a2:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  4016a4:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  4016a8:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  4016ac:	6922      	ldr	r2, [r4, #16]
  4016ae:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4016b0:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  4016b2:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  4016b6:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  4016ba:	3301      	adds	r3, #1
  4016bc:	b2db      	uxtb	r3, r3
  4016be:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4016c0:	4293      	cmp	r3, r2
  4016c2:	d3eb      	bcc.n	40169c <_pwm_set_param+0x28>
	}
}
  4016c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4016c6:	bf00      	nop
  4016c8:	00405268 	.word	0x00405268
  4016cc:	00400e4d 	.word	0x00400e4d
  4016d0:	00401435 	.word	0x00401435

004016d4 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  4016d4:	b510      	push	{r4, lr}
	ASSERT(device);
  4016d6:	4604      	mov	r4, r0
  4016d8:	f240 12e7 	movw	r2, #487	; 0x1e7
  4016dc:	4907      	ldr	r1, [pc, #28]	; (4016fc <_pwm_is_enabled+0x28>)
  4016de:	3000      	adds	r0, #0
  4016e0:	bf18      	it	ne
  4016e2:	2001      	movne	r0, #1
  4016e4:	4b06      	ldr	r3, [pc, #24]	; (401700 <_pwm_is_enabled+0x2c>)
  4016e6:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  4016e8:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  4016ea:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  4016ec:	f013 0f0f 	tst.w	r3, #15
  4016f0:	d001      	beq.n	4016f6 <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  4016f2:	2001      	movs	r0, #1
	}
}
  4016f4:	bd10      	pop	{r4, pc}
		return false;
  4016f6:	2000      	movs	r0, #0
  4016f8:	bd10      	pop	{r4, pc}
  4016fa:	bf00      	nop
  4016fc:	00405268 	.word	0x00405268
  401700:	00400e4d 	.word	0x00400e4d

00401704 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  401704:	2000      	movs	r0, #0
  401706:	4770      	bx	lr

00401708 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  401708:	4b03      	ldr	r3, [pc, #12]	; (401718 <_system_time_init+0x10>)
  40170a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  40170e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  401710:	2205      	movs	r2, #5
  401712:	601a      	str	r2, [r3, #0]
  401714:	4770      	bx	lr
  401716:	bf00      	nop
  401718:	e000e010 	.word	0xe000e010

0040171c <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  40171c:	b508      	push	{r3, lr}
	_system_time_init(hw);
  40171e:	4b01      	ldr	r3, [pc, #4]	; (401724 <_delay_init+0x8>)
  401720:	4798      	blx	r3
  401722:	bd08      	pop	{r3, pc}
  401724:	00401709 	.word	0x00401709

00401728 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  401728:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  40172a:	e00d      	b.n	401748 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  40172c:	4b0d      	ldr	r3, [pc, #52]	; (401764 <_delay_cycles+0x3c>)
  40172e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401732:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401734:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401736:	4b0b      	ldr	r3, [pc, #44]	; (401764 <_delay_cycles+0x3c>)
  401738:	681b      	ldr	r3, [r3, #0]
  40173a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40173e:	d0fa      	beq.n	401736 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  401740:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  401744:	3101      	adds	r1, #1
	while (n--) {
  401746:	4610      	mov	r0, r2
  401748:	1e43      	subs	r3, r0, #1
  40174a:	b2da      	uxtb	r2, r3
  40174c:	2800      	cmp	r0, #0
  40174e:	d1ed      	bne.n	40172c <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  401750:	4b04      	ldr	r3, [pc, #16]	; (401764 <_delay_cycles+0x3c>)
  401752:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  401754:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401756:	4b03      	ldr	r3, [pc, #12]	; (401764 <_delay_cycles+0x3c>)
  401758:	681b      	ldr	r3, [r3, #0]
  40175a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40175e:	d0fa      	beq.n	401756 <_delay_cycles+0x2e>
		;
}
  401760:	4770      	bx	lr
  401762:	bf00      	nop
  401764:	e000e010 	.word	0xe000e010

00401768 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401768:	2300      	movs	r3, #0
  40176a:	2b01      	cmp	r3, #1
  40176c:	d815      	bhi.n	40179a <get_cfg+0x32>
{
  40176e:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401770:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401774:	008a      	lsls	r2, r1, #2
  401776:	490a      	ldr	r1, [pc, #40]	; (4017a0 <get_cfg+0x38>)
  401778:	588a      	ldr	r2, [r1, r2]
  40177a:	4282      	cmp	r2, r0
  40177c:	d007      	beq.n	40178e <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  40177e:	3301      	adds	r3, #1
  401780:	b2db      	uxtb	r3, r3
  401782:	2b01      	cmp	r3, #1
  401784:	d9f4      	bls.n	401770 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  401786:	2000      	movs	r0, #0
}
  401788:	f85d 4b04 	ldr.w	r4, [sp], #4
  40178c:	4770      	bx	lr
			return &(_tcs[i]);
  40178e:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401792:	00a3      	lsls	r3, r4, #2
  401794:	4608      	mov	r0, r1
  401796:	4418      	add	r0, r3
  401798:	e7f6      	b.n	401788 <get_cfg+0x20>
	return NULL;
  40179a:	2000      	movs	r0, #0
  40179c:	4770      	bx	lr
  40179e:	bf00      	nop
  4017a0:	20400000 	.word	0x20400000

004017a4 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  4017a4:	4b06      	ldr	r3, [pc, #24]	; (4017c0 <_tc_init_irq_param+0x1c>)
  4017a6:	4298      	cmp	r0, r3
  4017a8:	d003      	beq.n	4017b2 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  4017aa:	4b06      	ldr	r3, [pc, #24]	; (4017c4 <_tc_init_irq_param+0x20>)
  4017ac:	4298      	cmp	r0, r3
  4017ae:	d003      	beq.n	4017b8 <_tc_init_irq_param+0x14>
  4017b0:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  4017b2:	4b05      	ldr	r3, [pc, #20]	; (4017c8 <_tc_init_irq_param+0x24>)
  4017b4:	6019      	str	r1, [r3, #0]
  4017b6:	e7f8      	b.n	4017aa <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  4017b8:	4b03      	ldr	r3, [pc, #12]	; (4017c8 <_tc_init_irq_param+0x24>)
  4017ba:	6059      	str	r1, [r3, #4]
	}
}
  4017bc:	e7f8      	b.n	4017b0 <_tc_init_irq_param+0xc>
  4017be:	bf00      	nop
  4017c0:	4000c000 	.word	0x4000c000
  4017c4:	40054000 	.word	0x40054000
  4017c8:	204002ac 	.word	0x204002ac

004017cc <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  4017cc:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  4017ce:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  4017d0:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  4017d2:	f013 0f10 	tst.w	r3, #16
  4017d6:	d100      	bne.n	4017da <tc_interrupt_handler+0xe>
  4017d8:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  4017da:	6803      	ldr	r3, [r0, #0]
  4017dc:	4798      	blx	r3
	}
}
  4017de:	e7fb      	b.n	4017d8 <tc_interrupt_handler+0xc>

004017e0 <_timer_init>:
{
  4017e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4017e4:	4606      	mov	r6, r0
  4017e6:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  4017e8:	4608      	mov	r0, r1
  4017ea:	4b2f      	ldr	r3, [pc, #188]	; (4018a8 <_timer_init+0xc8>)
  4017ec:	4798      	blx	r3
  4017ee:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  4017f0:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  4017f4:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  4017f8:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  4017fa:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  4017fe:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  401800:	22c3      	movs	r2, #195	; 0xc3
  401802:	492a      	ldr	r1, [pc, #168]	; (4018ac <_timer_init+0xcc>)
  401804:	2001      	movs	r0, #1
  401806:	4b2a      	ldr	r3, [pc, #168]	; (4018b0 <_timer_init+0xd0>)
  401808:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  40180a:	f248 0307 	movw	r3, #32775	; 0x8007
  40180e:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  401810:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  401814:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401818:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  40181c:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  40181e:	2300      	movs	r3, #0
  401820:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401822:	f248 020f 	movw	r2, #32783	; 0x800f
  401826:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  401828:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  40182c:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401830:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401834:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401836:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  401838:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  40183a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  40183e:	4631      	mov	r1, r6
  401840:	4620      	mov	r0, r4
  401842:	4b1c      	ldr	r3, [pc, #112]	; (4018b4 <_timer_init+0xd4>)
  401844:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  401846:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40184a:	2b00      	cmp	r3, #0
  40184c:	db0d      	blt.n	40186a <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40184e:	095a      	lsrs	r2, r3, #5
  401850:	f003 031f 	and.w	r3, r3, #31
  401854:	2101      	movs	r1, #1
  401856:	fa01 f303 	lsl.w	r3, r1, r3
  40185a:	3220      	adds	r2, #32
  40185c:	4916      	ldr	r1, [pc, #88]	; (4018b8 <_timer_init+0xd8>)
  40185e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401862:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401866:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  40186a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40186e:	2b00      	cmp	r3, #0
  401870:	db09      	blt.n	401886 <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401872:	095a      	lsrs	r2, r3, #5
  401874:	f003 031f 	and.w	r3, r3, #31
  401878:	2101      	movs	r1, #1
  40187a:	fa01 f303 	lsl.w	r3, r1, r3
  40187e:	3260      	adds	r2, #96	; 0x60
  401880:	490d      	ldr	r1, [pc, #52]	; (4018b8 <_timer_init+0xd8>)
  401882:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  401886:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40188a:	2b00      	cmp	r3, #0
  40188c:	db08      	blt.n	4018a0 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40188e:	0959      	lsrs	r1, r3, #5
  401890:	f003 031f 	and.w	r3, r3, #31
  401894:	2201      	movs	r2, #1
  401896:	fa02 f303 	lsl.w	r3, r2, r3
  40189a:	4a07      	ldr	r2, [pc, #28]	; (4018b8 <_timer_init+0xd8>)
  40189c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  4018a0:	2000      	movs	r0, #0
  4018a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4018a6:	bf00      	nop
  4018a8:	00401769 	.word	0x00401769
  4018ac:	00405280 	.word	0x00405280
  4018b0:	00400e4d 	.word	0x00400e4d
  4018b4:	004017a5 	.word	0x004017a5
  4018b8:	e000e100 	.word	0xe000e100

004018bc <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  4018bc:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  4018be:	2305      	movs	r3, #5
  4018c0:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  4018c2:	68c2      	ldr	r2, [r0, #12]
  4018c4:	6413      	str	r3, [r2, #64]	; 0x40
  4018c6:	4770      	bx	lr

004018c8 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  4018c8:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  4018ca:	6a13      	ldr	r3, [r2, #32]
  4018cc:	f3c3 4300 	ubfx	r3, r3, #16, #1
  4018d0:	6e10      	ldr	r0, [r2, #96]	; 0x60
  4018d2:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  4018d6:	4318      	orrs	r0, r3
  4018d8:	4770      	bx	lr

004018da <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  4018da:	2000      	movs	r0, #0
  4018dc:	4770      	bx	lr
	...

004018e0 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  4018e0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  4018e2:	4b02      	ldr	r3, [pc, #8]	; (4018ec <TC0_Handler+0xc>)
  4018e4:	6818      	ldr	r0, [r3, #0]
  4018e6:	4b02      	ldr	r3, [pc, #8]	; (4018f0 <TC0_Handler+0x10>)
  4018e8:	4798      	blx	r3
  4018ea:	bd08      	pop	{r3, pc}
  4018ec:	204002ac 	.word	0x204002ac
  4018f0:	004017cd 	.word	0x004017cd

004018f4 <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  4018f4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  4018f6:	4b02      	ldr	r3, [pc, #8]	; (401900 <TC9_Handler+0xc>)
  4018f8:	6858      	ldr	r0, [r3, #4]
  4018fa:	4b02      	ldr	r3, [pc, #8]	; (401904 <TC9_Handler+0x10>)
  4018fc:	4798      	blx	r3
  4018fe:	bd08      	pop	{r3, pc}
  401900:	204002ac 	.word	0x204002ac
  401904:	004017cd 	.word	0x004017cd

00401908 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  401908:	b510      	push	{r4, lr}
	ASSERT(hw);
  40190a:	4604      	mov	r4, r0
  40190c:	f240 222b 	movw	r2, #555	; 0x22b
  401910:	4905      	ldr	r1, [pc, #20]	; (401928 <_usart_get_hardware_index+0x20>)
  401912:	3000      	adds	r0, #0
  401914:	bf18      	it	ne
  401916:	2001      	movne	r0, #1
  401918:	4b04      	ldr	r3, [pc, #16]	; (40192c <_usart_get_hardware_index+0x24>)
  40191a:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  40191c:	4804      	ldr	r0, [pc, #16]	; (401930 <_usart_get_hardware_index+0x28>)
  40191e:	4420      	add	r0, r4
}
  401920:	f3c0 3087 	ubfx	r0, r0, #14, #8
  401924:	bd10      	pop	{r4, pc}
  401926:	bf00      	nop
  401928:	004052a0 	.word	0x004052a0
  40192c:	00400e4d 	.word	0x00400e4d
  401930:	bffdc000 	.word	0xbffdc000

00401934 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  401934:	b510      	push	{r4, lr}
	ASSERT(hw);
  401936:	4604      	mov	r4, r0
  401938:	f240 2287 	movw	r2, #647	; 0x287
  40193c:	490e      	ldr	r1, [pc, #56]	; (401978 <_get_usart_index+0x44>)
  40193e:	3000      	adds	r0, #0
  401940:	bf18      	it	ne
  401942:	2001      	movne	r0, #1
  401944:	4b0d      	ldr	r3, [pc, #52]	; (40197c <_get_usart_index+0x48>)
  401946:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  401948:	4620      	mov	r0, r4
  40194a:	4b0d      	ldr	r3, [pc, #52]	; (401980 <_get_usart_index+0x4c>)
  40194c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40194e:	2300      	movs	r3, #0
  401950:	b143      	cbz	r3, 401964 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  401952:	f240 2291 	movw	r2, #657	; 0x291
  401956:	4908      	ldr	r1, [pc, #32]	; (401978 <_get_usart_index+0x44>)
  401958:	2000      	movs	r0, #0
  40195a:	4b08      	ldr	r3, [pc, #32]	; (40197c <_get_usart_index+0x48>)
  40195c:	4798      	blx	r3
	return 0;
  40195e:	2300      	movs	r3, #0
}
  401960:	4618      	mov	r0, r3
  401962:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  401964:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401968:	008a      	lsls	r2, r1, #2
  40196a:	4906      	ldr	r1, [pc, #24]	; (401984 <_get_usart_index+0x50>)
  40196c:	5c8a      	ldrb	r2, [r1, r2]
  40196e:	4290      	cmp	r0, r2
  401970:	d0f6      	beq.n	401960 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401972:	3301      	adds	r3, #1
  401974:	b2db      	uxtb	r3, r3
  401976:	e7eb      	b.n	401950 <_get_usart_index+0x1c>
  401978:	004052a0 	.word	0x004052a0
  40197c:	00400e4d 	.word	0x00400e4d
  401980:	00401909 	.word	0x00401909
  401984:	00405294 	.word	0x00405294

00401988 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  401988:	b510      	push	{r4, lr}
	ASSERT(hw);
  40198a:	4604      	mov	r4, r0
  40198c:	f240 229e 	movw	r2, #670	; 0x29e
  401990:	4911      	ldr	r1, [pc, #68]	; (4019d8 <_usart_init+0x50>)
  401992:	3000      	adds	r0, #0
  401994:	bf18      	it	ne
  401996:	2001      	movne	r0, #1
  401998:	4b10      	ldr	r3, [pc, #64]	; (4019dc <_usart_init+0x54>)
  40199a:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  40199c:	4620      	mov	r0, r4
  40199e:	4b10      	ldr	r3, [pc, #64]	; (4019e0 <_usart_init+0x58>)
  4019a0:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  4019a2:	4b10      	ldr	r3, [pc, #64]	; (4019e4 <_usart_init+0x5c>)
  4019a4:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  4019a8:	2300      	movs	r3, #0
  4019aa:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  4019ac:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  4019ae:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  4019b0:	22ac      	movs	r2, #172	; 0xac
  4019b2:	6022      	str	r2, [r4, #0]
  4019b4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4019b8:	6022      	str	r2, [r4, #0]
  4019ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4019be:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  4019c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4019c4:	0081      	lsls	r1, r0, #2
  4019c6:	4a08      	ldr	r2, [pc, #32]	; (4019e8 <_usart_init+0x60>)
  4019c8:	440a      	add	r2, r1
  4019ca:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  4019cc:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  4019ce:	4a07      	ldr	r2, [pc, #28]	; (4019ec <_usart_init+0x64>)
  4019d0:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  4019d2:	4618      	mov	r0, r3
  4019d4:	bd10      	pop	{r4, pc}
  4019d6:	bf00      	nop
  4019d8:	004052a0 	.word	0x004052a0
  4019dc:	00400e4d 	.word	0x00400e4d
  4019e0:	00401935 	.word	0x00401935
  4019e4:	55534100 	.word	0x55534100
  4019e8:	00405294 	.word	0x00405294
  4019ec:	000100f4 	.word	0x000100f4

004019f0 <_usart_sync_init>:
{
  4019f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4019f2:	460c      	mov	r4, r1
	ASSERT(device);
  4019f4:	4e09      	ldr	r6, [pc, #36]	; (401a1c <_usart_sync_init+0x2c>)
  4019f6:	4607      	mov	r7, r0
  4019f8:	22bd      	movs	r2, #189	; 0xbd
  4019fa:	4631      	mov	r1, r6
  4019fc:	3000      	adds	r0, #0
  4019fe:	bf18      	it	ne
  401a00:	2001      	movne	r0, #1
  401a02:	4d07      	ldr	r5, [pc, #28]	; (401a20 <_usart_sync_init+0x30>)
  401a04:	47a8      	blx	r5
	ASSERT(hw);
  401a06:	22be      	movs	r2, #190	; 0xbe
  401a08:	4631      	mov	r1, r6
  401a0a:	1c20      	adds	r0, r4, #0
  401a0c:	bf18      	it	ne
  401a0e:	2001      	movne	r0, #1
  401a10:	47a8      	blx	r5
	device->hw = hw;
  401a12:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  401a14:	4620      	mov	r0, r4
  401a16:	4b03      	ldr	r3, [pc, #12]	; (401a24 <_usart_sync_init+0x34>)
  401a18:	4798      	blx	r3
}
  401a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a1c:	004052a0 	.word	0x004052a0
  401a20:	00400e4d 	.word	0x00400e4d
  401a24:	00401989 	.word	0x00401989

00401a28 <_usart_sync_enable>:
{
  401a28:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  401a2a:	4e0a      	ldr	r6, [pc, #40]	; (401a54 <_usart_sync_enable+0x2c>)
  401a2c:	4604      	mov	r4, r0
  401a2e:	f240 1205 	movw	r2, #261	; 0x105
  401a32:	4631      	mov	r1, r6
  401a34:	3000      	adds	r0, #0
  401a36:	bf18      	it	ne
  401a38:	2001      	movne	r0, #1
  401a3a:	4d07      	ldr	r5, [pc, #28]	; (401a58 <_usart_sync_enable+0x30>)
  401a3c:	47a8      	blx	r5
	_usart_enable(device->hw);
  401a3e:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  401a40:	f240 22c7 	movw	r2, #711	; 0x2c7
  401a44:	4631      	mov	r1, r6
  401a46:	1c20      	adds	r0, r4, #0
  401a48:	bf18      	it	ne
  401a4a:	2001      	movne	r0, #1
  401a4c:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  401a4e:	2350      	movs	r3, #80	; 0x50
  401a50:	6023      	str	r3, [r4, #0]
  401a52:	bd70      	pop	{r4, r5, r6, pc}
  401a54:	004052a0 	.word	0x004052a0
  401a58:	00400e4d 	.word	0x00400e4d

00401a5c <_usart_sync_write_byte>:
{
  401a5c:	b538      	push	{r3, r4, r5, lr}
  401a5e:	460c      	mov	r4, r1
	ASSERT(device);
  401a60:	4605      	mov	r5, r0
  401a62:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  401a66:	4904      	ldr	r1, [pc, #16]	; (401a78 <_usart_sync_write_byte+0x1c>)
  401a68:	3000      	adds	r0, #0
  401a6a:	bf18      	it	ne
  401a6c:	2001      	movne	r0, #1
  401a6e:	4b03      	ldr	r3, [pc, #12]	; (401a7c <_usart_sync_write_byte+0x20>)
  401a70:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  401a72:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  401a74:	61dc      	str	r4, [r3, #28]
  401a76:	bd38      	pop	{r3, r4, r5, pc}
  401a78:	004052a0 	.word	0x004052a0
  401a7c:	00400e4d 	.word	0x00400e4d

00401a80 <_usart_sync_read_byte>:
{
  401a80:	b510      	push	{r4, lr}
	ASSERT(device);
  401a82:	4604      	mov	r4, r0
  401a84:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  401a88:	4904      	ldr	r1, [pc, #16]	; (401a9c <_usart_sync_read_byte+0x1c>)
  401a8a:	3000      	adds	r0, #0
  401a8c:	bf18      	it	ne
  401a8e:	2001      	movne	r0, #1
  401a90:	4b03      	ldr	r3, [pc, #12]	; (401aa0 <_usart_sync_read_byte+0x20>)
  401a92:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  401a94:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  401a96:	6998      	ldr	r0, [r3, #24]
}
  401a98:	b2c0      	uxtb	r0, r0
  401a9a:	bd10      	pop	{r4, pc}
  401a9c:	004052a0 	.word	0x004052a0
  401aa0:	00400e4d 	.word	0x00400e4d

00401aa4 <_usart_sync_is_ready_to_send>:
{
  401aa4:	b510      	push	{r4, lr}
	ASSERT(device);
  401aa6:	4604      	mov	r4, r0
  401aa8:	f240 12c3 	movw	r2, #451	; 0x1c3
  401aac:	4905      	ldr	r1, [pc, #20]	; (401ac4 <_usart_sync_is_ready_to_send+0x20>)
  401aae:	3000      	adds	r0, #0
  401ab0:	bf18      	it	ne
  401ab2:	2001      	movne	r0, #1
  401ab4:	4b04      	ldr	r3, [pc, #16]	; (401ac8 <_usart_sync_is_ready_to_send+0x24>)
  401ab6:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  401ab8:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  401aba:	6958      	ldr	r0, [r3, #20]
}
  401abc:	f3c0 0040 	ubfx	r0, r0, #1, #1
  401ac0:	bd10      	pop	{r4, pc}
  401ac2:	bf00      	nop
  401ac4:	004052a0 	.word	0x004052a0
  401ac8:	00400e4d 	.word	0x00400e4d

00401acc <_usart_sync_is_transmit_done>:
{
  401acc:	b510      	push	{r4, lr}
	ASSERT(device);
  401ace:	4604      	mov	r4, r0
  401ad0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  401ad4:	4905      	ldr	r1, [pc, #20]	; (401aec <_usart_sync_is_transmit_done+0x20>)
  401ad6:	3000      	adds	r0, #0
  401ad8:	bf18      	it	ne
  401ada:	2001      	movne	r0, #1
  401adc:	4b04      	ldr	r3, [pc, #16]	; (401af0 <_usart_sync_is_transmit_done+0x24>)
  401ade:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  401ae0:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  401ae2:	6958      	ldr	r0, [r3, #20]
}
  401ae4:	f3c0 2040 	ubfx	r0, r0, #9, #1
  401ae8:	bd10      	pop	{r4, pc}
  401aea:	bf00      	nop
  401aec:	004052a0 	.word	0x004052a0
  401af0:	00400e4d 	.word	0x00400e4d

00401af4 <_usart_sync_is_byte_received>:
{
  401af4:	b510      	push	{r4, lr}
	ASSERT(device);
  401af6:	4604      	mov	r4, r0
  401af8:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401afc:	4905      	ldr	r1, [pc, #20]	; (401b14 <_usart_sync_is_byte_received+0x20>)
  401afe:	3000      	adds	r0, #0
  401b00:	bf18      	it	ne
  401b02:	2001      	movne	r0, #1
  401b04:	4b04      	ldr	r3, [pc, #16]	; (401b18 <_usart_sync_is_byte_received+0x24>)
  401b06:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  401b08:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  401b0a:	6958      	ldr	r0, [r3, #20]
  401b0c:	f000 0001 	and.w	r0, r0, #1
}
  401b10:	bd10      	pop	{r4, pc}
  401b12:	bf00      	nop
  401b14:	004052a0 	.word	0x004052a0
  401b18:	00400e4d 	.word	0x00400e4d

00401b1c <_usart_get_usart_sync>:
}
  401b1c:	2000      	movs	r0, #0
  401b1e:	4770      	bx	lr

00401b20 <main>:
#include "arm_math.h"



int main(void)
{
  401b20:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  401b22:	4b0d      	ldr	r3, [pc, #52]	; (401b58 <main+0x38>)
  401b24:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	
	//Initialise dead time on PWMs 
	pwm_deadtime_init();	
  401b26:	4b0d      	ldr	r3, [pc, #52]	; (401b5c <main+0x3c>)
  401b28:	4798      	blx	r3
	
	
	pwm_enable_all();
  401b2a:	4b0d      	ldr	r3, [pc, #52]	; (401b60 <main+0x40>)
  401b2c:	4798      	blx	r3
	adc_enable_all();
  401b2e:	4b0d      	ldr	r3, [pc, #52]	; (401b64 <main+0x44>)
  401b30:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  401b32:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  401b36:	4b0c      	ldr	r3, [pc, #48]	; (401b68 <main+0x48>)
  401b38:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);
	
	timer_start(&ENCODER_A);
  401b3a:	480c      	ldr	r0, [pc, #48]	; (401b6c <main+0x4c>)
  401b3c:	4c0c      	ldr	r4, [pc, #48]	; (401b70 <main+0x50>)
  401b3e:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  401b40:	480c      	ldr	r0, [pc, #48]	; (401b74 <main+0x54>)
  401b42:	47a0      	blx	r4
	
	
	//test timers for encoder
	Timer_Counter_Initial_Test();
  401b44:	4b0c      	ldr	r3, [pc, #48]	; (401b78 <main+0x58>)
  401b46:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
		
		
		Current_Voltage_Inital_Test();
  401b48:	4b0c      	ldr	r3, [pc, #48]	; (401b7c <main+0x5c>)
  401b4a:	4798      	blx	r3
		delay_ms(500);
  401b4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  401b50:	4b0b      	ldr	r3, [pc, #44]	; (401b80 <main+0x60>)
  401b52:	4798      	blx	r3
  401b54:	e7f8      	b.n	401b48 <main+0x28>
  401b56:	bf00      	nop
  401b58:	004001d5 	.word	0x004001d5
  401b5c:	00400295 	.word	0x00400295
  401b60:	00400259 	.word	0x00400259
  401b64:	004001e9 	.word	0x004001e9
  401b68:	400e0e00 	.word	0x400e0e00
  401b6c:	2040032c 	.word	0x2040032c
  401b70:	00400ccd 	.word	0x00400ccd
  401b74:	204002dc 	.word	0x204002dc
  401b78:	00400301 	.word	0x00400301
  401b7c:	00400299 	.word	0x00400299
  401b80:	00400a1d 	.word	0x00400a1d

00401b84 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  401b84:	b958      	cbnz	r0, 401b9e <_read+0x1a>
{
  401b86:	b508      	push	{r3, lr}
  401b88:	460b      	mov	r3, r1
  401b8a:	4611      	mov	r1, r2
  401b8c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  401b8e:	4b05      	ldr	r3, [pc, #20]	; (401ba4 <_read+0x20>)
  401b90:	4798      	blx	r3
	if (n < 0) {
  401b92:	2800      	cmp	r0, #0
  401b94:	db00      	blt.n	401b98 <_read+0x14>
		return -1;
	}

	return n;
}
  401b96:	bd08      	pop	{r3, pc}
		return -1;
  401b98:	f04f 30ff 	mov.w	r0, #4294967295
  401b9c:	bd08      	pop	{r3, pc}
		return -1;
  401b9e:	f04f 30ff 	mov.w	r0, #4294967295
  401ba2:	4770      	bx	lr
  401ba4:	00401bfd 	.word	0x00401bfd

00401ba8 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  401ba8:	3801      	subs	r0, #1
  401baa:	2802      	cmp	r0, #2
  401bac:	d80b      	bhi.n	401bc6 <_write+0x1e>
{
  401bae:	b508      	push	{r3, lr}
  401bb0:	460b      	mov	r3, r1
  401bb2:	4611      	mov	r1, r2
  401bb4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  401bb6:	4b05      	ldr	r3, [pc, #20]	; (401bcc <_write+0x24>)
  401bb8:	4798      	blx	r3
	if (n < 0) {
  401bba:	2800      	cmp	r0, #0
  401bbc:	db00      	blt.n	401bc0 <_write+0x18>
		return -1;
	}

	return n;
}
  401bbe:	bd08      	pop	{r3, pc}
		return -1;
  401bc0:	f04f 30ff 	mov.w	r0, #4294967295
  401bc4:	bd08      	pop	{r3, pc}
		return -1;
  401bc6:	f04f 30ff 	mov.w	r0, #4294967295
  401bca:	4770      	bx	lr
  401bcc:	00401c21 	.word	0x00401c21

00401bd0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  401bd0:	b570      	push	{r4, r5, r6, lr}
  401bd2:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  401bd4:	4d06      	ldr	r5, [pc, #24]	; (401bf0 <stdio_io_init+0x20>)
  401bd6:	682b      	ldr	r3, [r5, #0]
  401bd8:	2100      	movs	r1, #0
  401bda:	6898      	ldr	r0, [r3, #8]
  401bdc:	4c05      	ldr	r4, [pc, #20]	; (401bf4 <stdio_io_init+0x24>)
  401bde:	47a0      	blx	r4
	setbuf(stdin, NULL);
  401be0:	682b      	ldr	r3, [r5, #0]
  401be2:	2100      	movs	r1, #0
  401be4:	6858      	ldr	r0, [r3, #4]
  401be6:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  401be8:	4b03      	ldr	r3, [pc, #12]	; (401bf8 <stdio_io_init+0x28>)
  401bea:	601e      	str	r6, [r3, #0]
  401bec:	bd70      	pop	{r4, r5, r6, pc}
  401bee:	bf00      	nop
  401bf0:	20400048 	.word	0x20400048
  401bf4:	00402eb5 	.word	0x00402eb5
  401bf8:	204002b4 	.word	0x204002b4

00401bfc <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  401bfc:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401bfe:	4b06      	ldr	r3, [pc, #24]	; (401c18 <stdio_io_read+0x1c>)
  401c00:	681b      	ldr	r3, [r3, #0]
  401c02:	b133      	cbz	r3, 401c12 <stdio_io_read+0x16>
  401c04:	460a      	mov	r2, r1
  401c06:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  401c08:	b292      	uxth	r2, r2
  401c0a:	4618      	mov	r0, r3
  401c0c:	4b03      	ldr	r3, [pc, #12]	; (401c1c <stdio_io_read+0x20>)
  401c0e:	4798      	blx	r3
  401c10:	bd08      	pop	{r3, pc}
		return 0;
  401c12:	2000      	movs	r0, #0
}
  401c14:	bd08      	pop	{r3, pc}
  401c16:	bf00      	nop
  401c18:	204002b4 	.word	0x204002b4
  401c1c:	00400ae5 	.word	0x00400ae5

00401c20 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  401c20:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401c22:	4b06      	ldr	r3, [pc, #24]	; (401c3c <stdio_io_write+0x1c>)
  401c24:	681b      	ldr	r3, [r3, #0]
  401c26:	b133      	cbz	r3, 401c36 <stdio_io_write+0x16>
  401c28:	460a      	mov	r2, r1
  401c2a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  401c2c:	b292      	uxth	r2, r2
  401c2e:	4618      	mov	r0, r3
  401c30:	4b03      	ldr	r3, [pc, #12]	; (401c40 <stdio_io_write+0x20>)
  401c32:	4798      	blx	r3
  401c34:	bd08      	pop	{r3, pc}
		return 0;
  401c36:	2000      	movs	r0, #0
}
  401c38:	bd08      	pop	{r3, pc}
  401c3a:	bf00      	nop
  401c3c:	204002b4 	.word	0x204002b4
  401c40:	00400ab5 	.word	0x00400ab5

00401c44 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  401c44:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  401c46:	4c04      	ldr	r4, [pc, #16]	; (401c58 <stdio_redirect_init+0x14>)
  401c48:	4620      	mov	r0, r4
  401c4a:	4b04      	ldr	r3, [pc, #16]	; (401c5c <stdio_redirect_init+0x18>)
  401c4c:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  401c4e:	4620      	mov	r0, r4
  401c50:	4b03      	ldr	r3, [pc, #12]	; (401c60 <stdio_redirect_init+0x1c>)
  401c52:	4798      	blx	r3
  401c54:	bd10      	pop	{r4, pc}
  401c56:	bf00      	nop
  401c58:	20400320 	.word	0x20400320
  401c5c:	00400e21 	.word	0x00400e21
  401c60:	00401bd1 	.word	0x00401bd1

00401c64 <__aeabi_drsub>:
  401c64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401c68:	e002      	b.n	401c70 <__adddf3>
  401c6a:	bf00      	nop

00401c6c <__aeabi_dsub>:
  401c6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401c70 <__adddf3>:
  401c70:	b530      	push	{r4, r5, lr}
  401c72:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401c76:	ea4f 0543 	mov.w	r5, r3, lsl #1
  401c7a:	ea94 0f05 	teq	r4, r5
  401c7e:	bf08      	it	eq
  401c80:	ea90 0f02 	teqeq	r0, r2
  401c84:	bf1f      	itttt	ne
  401c86:	ea54 0c00 	orrsne.w	ip, r4, r0
  401c8a:	ea55 0c02 	orrsne.w	ip, r5, r2
  401c8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401c92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401c96:	f000 80e2 	beq.w	401e5e <__adddf3+0x1ee>
  401c9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401c9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401ca2:	bfb8      	it	lt
  401ca4:	426d      	neglt	r5, r5
  401ca6:	dd0c      	ble.n	401cc2 <__adddf3+0x52>
  401ca8:	442c      	add	r4, r5
  401caa:	ea80 0202 	eor.w	r2, r0, r2
  401cae:	ea81 0303 	eor.w	r3, r1, r3
  401cb2:	ea82 0000 	eor.w	r0, r2, r0
  401cb6:	ea83 0101 	eor.w	r1, r3, r1
  401cba:	ea80 0202 	eor.w	r2, r0, r2
  401cbe:	ea81 0303 	eor.w	r3, r1, r3
  401cc2:	2d36      	cmp	r5, #54	; 0x36
  401cc4:	bf88      	it	hi
  401cc6:	bd30      	pophi	{r4, r5, pc}
  401cc8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401ccc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401cd0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401cd4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401cd8:	d002      	beq.n	401ce0 <__adddf3+0x70>
  401cda:	4240      	negs	r0, r0
  401cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401ce0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401ce4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401ce8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401cec:	d002      	beq.n	401cf4 <__adddf3+0x84>
  401cee:	4252      	negs	r2, r2
  401cf0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401cf4:	ea94 0f05 	teq	r4, r5
  401cf8:	f000 80a7 	beq.w	401e4a <__adddf3+0x1da>
  401cfc:	f1a4 0401 	sub.w	r4, r4, #1
  401d00:	f1d5 0e20 	rsbs	lr, r5, #32
  401d04:	db0d      	blt.n	401d22 <__adddf3+0xb2>
  401d06:	fa02 fc0e 	lsl.w	ip, r2, lr
  401d0a:	fa22 f205 	lsr.w	r2, r2, r5
  401d0e:	1880      	adds	r0, r0, r2
  401d10:	f141 0100 	adc.w	r1, r1, #0
  401d14:	fa03 f20e 	lsl.w	r2, r3, lr
  401d18:	1880      	adds	r0, r0, r2
  401d1a:	fa43 f305 	asr.w	r3, r3, r5
  401d1e:	4159      	adcs	r1, r3
  401d20:	e00e      	b.n	401d40 <__adddf3+0xd0>
  401d22:	f1a5 0520 	sub.w	r5, r5, #32
  401d26:	f10e 0e20 	add.w	lr, lr, #32
  401d2a:	2a01      	cmp	r2, #1
  401d2c:	fa03 fc0e 	lsl.w	ip, r3, lr
  401d30:	bf28      	it	cs
  401d32:	f04c 0c02 	orrcs.w	ip, ip, #2
  401d36:	fa43 f305 	asr.w	r3, r3, r5
  401d3a:	18c0      	adds	r0, r0, r3
  401d3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401d40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401d44:	d507      	bpl.n	401d56 <__adddf3+0xe6>
  401d46:	f04f 0e00 	mov.w	lr, #0
  401d4a:	f1dc 0c00 	rsbs	ip, ip, #0
  401d4e:	eb7e 0000 	sbcs.w	r0, lr, r0
  401d52:	eb6e 0101 	sbc.w	r1, lr, r1
  401d56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401d5a:	d31b      	bcc.n	401d94 <__adddf3+0x124>
  401d5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401d60:	d30c      	bcc.n	401d7c <__adddf3+0x10c>
  401d62:	0849      	lsrs	r1, r1, #1
  401d64:	ea5f 0030 	movs.w	r0, r0, rrx
  401d68:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401d6c:	f104 0401 	add.w	r4, r4, #1
  401d70:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401d74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401d78:	f080 809a 	bcs.w	401eb0 <__adddf3+0x240>
  401d7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401d80:	bf08      	it	eq
  401d82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401d86:	f150 0000 	adcs.w	r0, r0, #0
  401d8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401d8e:	ea41 0105 	orr.w	r1, r1, r5
  401d92:	bd30      	pop	{r4, r5, pc}
  401d94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401d98:	4140      	adcs	r0, r0
  401d9a:	eb41 0101 	adc.w	r1, r1, r1
  401d9e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401da2:	f1a4 0401 	sub.w	r4, r4, #1
  401da6:	d1e9      	bne.n	401d7c <__adddf3+0x10c>
  401da8:	f091 0f00 	teq	r1, #0
  401dac:	bf04      	itt	eq
  401dae:	4601      	moveq	r1, r0
  401db0:	2000      	moveq	r0, #0
  401db2:	fab1 f381 	clz	r3, r1
  401db6:	bf08      	it	eq
  401db8:	3320      	addeq	r3, #32
  401dba:	f1a3 030b 	sub.w	r3, r3, #11
  401dbe:	f1b3 0220 	subs.w	r2, r3, #32
  401dc2:	da0c      	bge.n	401dde <__adddf3+0x16e>
  401dc4:	320c      	adds	r2, #12
  401dc6:	dd08      	ble.n	401dda <__adddf3+0x16a>
  401dc8:	f102 0c14 	add.w	ip, r2, #20
  401dcc:	f1c2 020c 	rsb	r2, r2, #12
  401dd0:	fa01 f00c 	lsl.w	r0, r1, ip
  401dd4:	fa21 f102 	lsr.w	r1, r1, r2
  401dd8:	e00c      	b.n	401df4 <__adddf3+0x184>
  401dda:	f102 0214 	add.w	r2, r2, #20
  401dde:	bfd8      	it	le
  401de0:	f1c2 0c20 	rsble	ip, r2, #32
  401de4:	fa01 f102 	lsl.w	r1, r1, r2
  401de8:	fa20 fc0c 	lsr.w	ip, r0, ip
  401dec:	bfdc      	itt	le
  401dee:	ea41 010c 	orrle.w	r1, r1, ip
  401df2:	4090      	lslle	r0, r2
  401df4:	1ae4      	subs	r4, r4, r3
  401df6:	bfa2      	ittt	ge
  401df8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401dfc:	4329      	orrge	r1, r5
  401dfe:	bd30      	popge	{r4, r5, pc}
  401e00:	ea6f 0404 	mvn.w	r4, r4
  401e04:	3c1f      	subs	r4, #31
  401e06:	da1c      	bge.n	401e42 <__adddf3+0x1d2>
  401e08:	340c      	adds	r4, #12
  401e0a:	dc0e      	bgt.n	401e2a <__adddf3+0x1ba>
  401e0c:	f104 0414 	add.w	r4, r4, #20
  401e10:	f1c4 0220 	rsb	r2, r4, #32
  401e14:	fa20 f004 	lsr.w	r0, r0, r4
  401e18:	fa01 f302 	lsl.w	r3, r1, r2
  401e1c:	ea40 0003 	orr.w	r0, r0, r3
  401e20:	fa21 f304 	lsr.w	r3, r1, r4
  401e24:	ea45 0103 	orr.w	r1, r5, r3
  401e28:	bd30      	pop	{r4, r5, pc}
  401e2a:	f1c4 040c 	rsb	r4, r4, #12
  401e2e:	f1c4 0220 	rsb	r2, r4, #32
  401e32:	fa20 f002 	lsr.w	r0, r0, r2
  401e36:	fa01 f304 	lsl.w	r3, r1, r4
  401e3a:	ea40 0003 	orr.w	r0, r0, r3
  401e3e:	4629      	mov	r1, r5
  401e40:	bd30      	pop	{r4, r5, pc}
  401e42:	fa21 f004 	lsr.w	r0, r1, r4
  401e46:	4629      	mov	r1, r5
  401e48:	bd30      	pop	{r4, r5, pc}
  401e4a:	f094 0f00 	teq	r4, #0
  401e4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401e52:	bf06      	itte	eq
  401e54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401e58:	3401      	addeq	r4, #1
  401e5a:	3d01      	subne	r5, #1
  401e5c:	e74e      	b.n	401cfc <__adddf3+0x8c>
  401e5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401e62:	bf18      	it	ne
  401e64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401e68:	d029      	beq.n	401ebe <__adddf3+0x24e>
  401e6a:	ea94 0f05 	teq	r4, r5
  401e6e:	bf08      	it	eq
  401e70:	ea90 0f02 	teqeq	r0, r2
  401e74:	d005      	beq.n	401e82 <__adddf3+0x212>
  401e76:	ea54 0c00 	orrs.w	ip, r4, r0
  401e7a:	bf04      	itt	eq
  401e7c:	4619      	moveq	r1, r3
  401e7e:	4610      	moveq	r0, r2
  401e80:	bd30      	pop	{r4, r5, pc}
  401e82:	ea91 0f03 	teq	r1, r3
  401e86:	bf1e      	ittt	ne
  401e88:	2100      	movne	r1, #0
  401e8a:	2000      	movne	r0, #0
  401e8c:	bd30      	popne	{r4, r5, pc}
  401e8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401e92:	d105      	bne.n	401ea0 <__adddf3+0x230>
  401e94:	0040      	lsls	r0, r0, #1
  401e96:	4149      	adcs	r1, r1
  401e98:	bf28      	it	cs
  401e9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401e9e:	bd30      	pop	{r4, r5, pc}
  401ea0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401ea4:	bf3c      	itt	cc
  401ea6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401eaa:	bd30      	popcc	{r4, r5, pc}
  401eac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401eb0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401eb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401eb8:	f04f 0000 	mov.w	r0, #0
  401ebc:	bd30      	pop	{r4, r5, pc}
  401ebe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401ec2:	bf1a      	itte	ne
  401ec4:	4619      	movne	r1, r3
  401ec6:	4610      	movne	r0, r2
  401ec8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401ecc:	bf1c      	itt	ne
  401ece:	460b      	movne	r3, r1
  401ed0:	4602      	movne	r2, r0
  401ed2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401ed6:	bf06      	itte	eq
  401ed8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401edc:	ea91 0f03 	teqeq	r1, r3
  401ee0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401ee4:	bd30      	pop	{r4, r5, pc}
  401ee6:	bf00      	nop

00401ee8 <__aeabi_ui2d>:
  401ee8:	f090 0f00 	teq	r0, #0
  401eec:	bf04      	itt	eq
  401eee:	2100      	moveq	r1, #0
  401ef0:	4770      	bxeq	lr
  401ef2:	b530      	push	{r4, r5, lr}
  401ef4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401ef8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401efc:	f04f 0500 	mov.w	r5, #0
  401f00:	f04f 0100 	mov.w	r1, #0
  401f04:	e750      	b.n	401da8 <__adddf3+0x138>
  401f06:	bf00      	nop

00401f08 <__aeabi_i2d>:
  401f08:	f090 0f00 	teq	r0, #0
  401f0c:	bf04      	itt	eq
  401f0e:	2100      	moveq	r1, #0
  401f10:	4770      	bxeq	lr
  401f12:	b530      	push	{r4, r5, lr}
  401f14:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401f18:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401f1c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401f20:	bf48      	it	mi
  401f22:	4240      	negmi	r0, r0
  401f24:	f04f 0100 	mov.w	r1, #0
  401f28:	e73e      	b.n	401da8 <__adddf3+0x138>
  401f2a:	bf00      	nop

00401f2c <__aeabi_f2d>:
  401f2c:	0042      	lsls	r2, r0, #1
  401f2e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401f32:	ea4f 0131 	mov.w	r1, r1, rrx
  401f36:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401f3a:	bf1f      	itttt	ne
  401f3c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401f40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401f44:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401f48:	4770      	bxne	lr
  401f4a:	f092 0f00 	teq	r2, #0
  401f4e:	bf14      	ite	ne
  401f50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401f54:	4770      	bxeq	lr
  401f56:	b530      	push	{r4, r5, lr}
  401f58:	f44f 7460 	mov.w	r4, #896	; 0x380
  401f5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401f60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401f64:	e720      	b.n	401da8 <__adddf3+0x138>
  401f66:	bf00      	nop

00401f68 <__aeabi_ul2d>:
  401f68:	ea50 0201 	orrs.w	r2, r0, r1
  401f6c:	bf08      	it	eq
  401f6e:	4770      	bxeq	lr
  401f70:	b530      	push	{r4, r5, lr}
  401f72:	f04f 0500 	mov.w	r5, #0
  401f76:	e00a      	b.n	401f8e <__aeabi_l2d+0x16>

00401f78 <__aeabi_l2d>:
  401f78:	ea50 0201 	orrs.w	r2, r0, r1
  401f7c:	bf08      	it	eq
  401f7e:	4770      	bxeq	lr
  401f80:	b530      	push	{r4, r5, lr}
  401f82:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  401f86:	d502      	bpl.n	401f8e <__aeabi_l2d+0x16>
  401f88:	4240      	negs	r0, r0
  401f8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401f8e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401f92:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401f96:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401f9a:	f43f aedc 	beq.w	401d56 <__adddf3+0xe6>
  401f9e:	f04f 0203 	mov.w	r2, #3
  401fa2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401fa6:	bf18      	it	ne
  401fa8:	3203      	addne	r2, #3
  401faa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401fae:	bf18      	it	ne
  401fb0:	3203      	addne	r2, #3
  401fb2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401fb6:	f1c2 0320 	rsb	r3, r2, #32
  401fba:	fa00 fc03 	lsl.w	ip, r0, r3
  401fbe:	fa20 f002 	lsr.w	r0, r0, r2
  401fc2:	fa01 fe03 	lsl.w	lr, r1, r3
  401fc6:	ea40 000e 	orr.w	r0, r0, lr
  401fca:	fa21 f102 	lsr.w	r1, r1, r2
  401fce:	4414      	add	r4, r2
  401fd0:	e6c1      	b.n	401d56 <__adddf3+0xe6>
  401fd2:	bf00      	nop

00401fd4 <__aeabi_dmul>:
  401fd4:	b570      	push	{r4, r5, r6, lr}
  401fd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401fda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401fde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401fe2:	bf1d      	ittte	ne
  401fe4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401fe8:	ea94 0f0c 	teqne	r4, ip
  401fec:	ea95 0f0c 	teqne	r5, ip
  401ff0:	f000 f8de 	bleq	4021b0 <__aeabi_dmul+0x1dc>
  401ff4:	442c      	add	r4, r5
  401ff6:	ea81 0603 	eor.w	r6, r1, r3
  401ffa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401ffe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402002:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402006:	bf18      	it	ne
  402008:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40200c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402014:	d038      	beq.n	402088 <__aeabi_dmul+0xb4>
  402016:	fba0 ce02 	umull	ip, lr, r0, r2
  40201a:	f04f 0500 	mov.w	r5, #0
  40201e:	fbe1 e502 	umlal	lr, r5, r1, r2
  402022:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402026:	fbe0 e503 	umlal	lr, r5, r0, r3
  40202a:	f04f 0600 	mov.w	r6, #0
  40202e:	fbe1 5603 	umlal	r5, r6, r1, r3
  402032:	f09c 0f00 	teq	ip, #0
  402036:	bf18      	it	ne
  402038:	f04e 0e01 	orrne.w	lr, lr, #1
  40203c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402040:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402044:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402048:	d204      	bcs.n	402054 <__aeabi_dmul+0x80>
  40204a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40204e:	416d      	adcs	r5, r5
  402050:	eb46 0606 	adc.w	r6, r6, r6
  402054:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402058:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40205c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402060:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402064:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402068:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40206c:	bf88      	it	hi
  40206e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402072:	d81e      	bhi.n	4020b2 <__aeabi_dmul+0xde>
  402074:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402078:	bf08      	it	eq
  40207a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40207e:	f150 0000 	adcs.w	r0, r0, #0
  402082:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402086:	bd70      	pop	{r4, r5, r6, pc}
  402088:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40208c:	ea46 0101 	orr.w	r1, r6, r1
  402090:	ea40 0002 	orr.w	r0, r0, r2
  402094:	ea81 0103 	eor.w	r1, r1, r3
  402098:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40209c:	bfc2      	ittt	gt
  40209e:	ebd4 050c 	rsbsgt	r5, r4, ip
  4020a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4020a6:	bd70      	popgt	{r4, r5, r6, pc}
  4020a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4020ac:	f04f 0e00 	mov.w	lr, #0
  4020b0:	3c01      	subs	r4, #1
  4020b2:	f300 80ab 	bgt.w	40220c <__aeabi_dmul+0x238>
  4020b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4020ba:	bfde      	ittt	le
  4020bc:	2000      	movle	r0, #0
  4020be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4020c2:	bd70      	pople	{r4, r5, r6, pc}
  4020c4:	f1c4 0400 	rsb	r4, r4, #0
  4020c8:	3c20      	subs	r4, #32
  4020ca:	da35      	bge.n	402138 <__aeabi_dmul+0x164>
  4020cc:	340c      	adds	r4, #12
  4020ce:	dc1b      	bgt.n	402108 <__aeabi_dmul+0x134>
  4020d0:	f104 0414 	add.w	r4, r4, #20
  4020d4:	f1c4 0520 	rsb	r5, r4, #32
  4020d8:	fa00 f305 	lsl.w	r3, r0, r5
  4020dc:	fa20 f004 	lsr.w	r0, r0, r4
  4020e0:	fa01 f205 	lsl.w	r2, r1, r5
  4020e4:	ea40 0002 	orr.w	r0, r0, r2
  4020e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4020ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4020f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4020f4:	fa21 f604 	lsr.w	r6, r1, r4
  4020f8:	eb42 0106 	adc.w	r1, r2, r6
  4020fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402100:	bf08      	it	eq
  402102:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402106:	bd70      	pop	{r4, r5, r6, pc}
  402108:	f1c4 040c 	rsb	r4, r4, #12
  40210c:	f1c4 0520 	rsb	r5, r4, #32
  402110:	fa00 f304 	lsl.w	r3, r0, r4
  402114:	fa20 f005 	lsr.w	r0, r0, r5
  402118:	fa01 f204 	lsl.w	r2, r1, r4
  40211c:	ea40 0002 	orr.w	r0, r0, r2
  402120:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402124:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402128:	f141 0100 	adc.w	r1, r1, #0
  40212c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402130:	bf08      	it	eq
  402132:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402136:	bd70      	pop	{r4, r5, r6, pc}
  402138:	f1c4 0520 	rsb	r5, r4, #32
  40213c:	fa00 f205 	lsl.w	r2, r0, r5
  402140:	ea4e 0e02 	orr.w	lr, lr, r2
  402144:	fa20 f304 	lsr.w	r3, r0, r4
  402148:	fa01 f205 	lsl.w	r2, r1, r5
  40214c:	ea43 0302 	orr.w	r3, r3, r2
  402150:	fa21 f004 	lsr.w	r0, r1, r4
  402154:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402158:	fa21 f204 	lsr.w	r2, r1, r4
  40215c:	ea20 0002 	bic.w	r0, r0, r2
  402160:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402164:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402168:	bf08      	it	eq
  40216a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40216e:	bd70      	pop	{r4, r5, r6, pc}
  402170:	f094 0f00 	teq	r4, #0
  402174:	d10f      	bne.n	402196 <__aeabi_dmul+0x1c2>
  402176:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40217a:	0040      	lsls	r0, r0, #1
  40217c:	eb41 0101 	adc.w	r1, r1, r1
  402180:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402184:	bf08      	it	eq
  402186:	3c01      	subeq	r4, #1
  402188:	d0f7      	beq.n	40217a <__aeabi_dmul+0x1a6>
  40218a:	ea41 0106 	orr.w	r1, r1, r6
  40218e:	f095 0f00 	teq	r5, #0
  402192:	bf18      	it	ne
  402194:	4770      	bxne	lr
  402196:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40219a:	0052      	lsls	r2, r2, #1
  40219c:	eb43 0303 	adc.w	r3, r3, r3
  4021a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4021a4:	bf08      	it	eq
  4021a6:	3d01      	subeq	r5, #1
  4021a8:	d0f7      	beq.n	40219a <__aeabi_dmul+0x1c6>
  4021aa:	ea43 0306 	orr.w	r3, r3, r6
  4021ae:	4770      	bx	lr
  4021b0:	ea94 0f0c 	teq	r4, ip
  4021b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4021b8:	bf18      	it	ne
  4021ba:	ea95 0f0c 	teqne	r5, ip
  4021be:	d00c      	beq.n	4021da <__aeabi_dmul+0x206>
  4021c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4021c4:	bf18      	it	ne
  4021c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4021ca:	d1d1      	bne.n	402170 <__aeabi_dmul+0x19c>
  4021cc:	ea81 0103 	eor.w	r1, r1, r3
  4021d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4021d4:	f04f 0000 	mov.w	r0, #0
  4021d8:	bd70      	pop	{r4, r5, r6, pc}
  4021da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4021de:	bf06      	itte	eq
  4021e0:	4610      	moveq	r0, r2
  4021e2:	4619      	moveq	r1, r3
  4021e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4021e8:	d019      	beq.n	40221e <__aeabi_dmul+0x24a>
  4021ea:	ea94 0f0c 	teq	r4, ip
  4021ee:	d102      	bne.n	4021f6 <__aeabi_dmul+0x222>
  4021f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4021f4:	d113      	bne.n	40221e <__aeabi_dmul+0x24a>
  4021f6:	ea95 0f0c 	teq	r5, ip
  4021fa:	d105      	bne.n	402208 <__aeabi_dmul+0x234>
  4021fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402200:	bf1c      	itt	ne
  402202:	4610      	movne	r0, r2
  402204:	4619      	movne	r1, r3
  402206:	d10a      	bne.n	40221e <__aeabi_dmul+0x24a>
  402208:	ea81 0103 	eor.w	r1, r1, r3
  40220c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402210:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402214:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402218:	f04f 0000 	mov.w	r0, #0
  40221c:	bd70      	pop	{r4, r5, r6, pc}
  40221e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402222:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402226:	bd70      	pop	{r4, r5, r6, pc}

00402228 <__aeabi_ddiv>:
  402228:	b570      	push	{r4, r5, r6, lr}
  40222a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40222e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402236:	bf1d      	ittte	ne
  402238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40223c:	ea94 0f0c 	teqne	r4, ip
  402240:	ea95 0f0c 	teqne	r5, ip
  402244:	f000 f8a7 	bleq	402396 <__aeabi_ddiv+0x16e>
  402248:	eba4 0405 	sub.w	r4, r4, r5
  40224c:	ea81 0e03 	eor.w	lr, r1, r3
  402250:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402254:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402258:	f000 8088 	beq.w	40236c <__aeabi_ddiv+0x144>
  40225c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402260:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402264:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402268:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40226c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402270:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402274:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402278:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40227c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402280:	429d      	cmp	r5, r3
  402282:	bf08      	it	eq
  402284:	4296      	cmpeq	r6, r2
  402286:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40228a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40228e:	d202      	bcs.n	402296 <__aeabi_ddiv+0x6e>
  402290:	085b      	lsrs	r3, r3, #1
  402292:	ea4f 0232 	mov.w	r2, r2, rrx
  402296:	1ab6      	subs	r6, r6, r2
  402298:	eb65 0503 	sbc.w	r5, r5, r3
  40229c:	085b      	lsrs	r3, r3, #1
  40229e:	ea4f 0232 	mov.w	r2, r2, rrx
  4022a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4022a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4022aa:	ebb6 0e02 	subs.w	lr, r6, r2
  4022ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  4022b2:	bf22      	ittt	cs
  4022b4:	1ab6      	subcs	r6, r6, r2
  4022b6:	4675      	movcs	r5, lr
  4022b8:	ea40 000c 	orrcs.w	r0, r0, ip
  4022bc:	085b      	lsrs	r3, r3, #1
  4022be:	ea4f 0232 	mov.w	r2, r2, rrx
  4022c2:	ebb6 0e02 	subs.w	lr, r6, r2
  4022c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4022ca:	bf22      	ittt	cs
  4022cc:	1ab6      	subcs	r6, r6, r2
  4022ce:	4675      	movcs	r5, lr
  4022d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4022d4:	085b      	lsrs	r3, r3, #1
  4022d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4022da:	ebb6 0e02 	subs.w	lr, r6, r2
  4022de:	eb75 0e03 	sbcs.w	lr, r5, r3
  4022e2:	bf22      	ittt	cs
  4022e4:	1ab6      	subcs	r6, r6, r2
  4022e6:	4675      	movcs	r5, lr
  4022e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4022ec:	085b      	lsrs	r3, r3, #1
  4022ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4022f2:	ebb6 0e02 	subs.w	lr, r6, r2
  4022f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4022fa:	bf22      	ittt	cs
  4022fc:	1ab6      	subcs	r6, r6, r2
  4022fe:	4675      	movcs	r5, lr
  402300:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402304:	ea55 0e06 	orrs.w	lr, r5, r6
  402308:	d018      	beq.n	40233c <__aeabi_ddiv+0x114>
  40230a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40230e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402312:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402316:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40231a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40231e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402322:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402326:	d1c0      	bne.n	4022aa <__aeabi_ddiv+0x82>
  402328:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40232c:	d10b      	bne.n	402346 <__aeabi_ddiv+0x11e>
  40232e:	ea41 0100 	orr.w	r1, r1, r0
  402332:	f04f 0000 	mov.w	r0, #0
  402336:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40233a:	e7b6      	b.n	4022aa <__aeabi_ddiv+0x82>
  40233c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402340:	bf04      	itt	eq
  402342:	4301      	orreq	r1, r0
  402344:	2000      	moveq	r0, #0
  402346:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40234a:	bf88      	it	hi
  40234c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402350:	f63f aeaf 	bhi.w	4020b2 <__aeabi_dmul+0xde>
  402354:	ebb5 0c03 	subs.w	ip, r5, r3
  402358:	bf04      	itt	eq
  40235a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40235e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402362:	f150 0000 	adcs.w	r0, r0, #0
  402366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40236a:	bd70      	pop	{r4, r5, r6, pc}
  40236c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402370:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402374:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402378:	bfc2      	ittt	gt
  40237a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40237e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402382:	bd70      	popgt	{r4, r5, r6, pc}
  402384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402388:	f04f 0e00 	mov.w	lr, #0
  40238c:	3c01      	subs	r4, #1
  40238e:	e690      	b.n	4020b2 <__aeabi_dmul+0xde>
  402390:	ea45 0e06 	orr.w	lr, r5, r6
  402394:	e68d      	b.n	4020b2 <__aeabi_dmul+0xde>
  402396:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40239a:	ea94 0f0c 	teq	r4, ip
  40239e:	bf08      	it	eq
  4023a0:	ea95 0f0c 	teqeq	r5, ip
  4023a4:	f43f af3b 	beq.w	40221e <__aeabi_dmul+0x24a>
  4023a8:	ea94 0f0c 	teq	r4, ip
  4023ac:	d10a      	bne.n	4023c4 <__aeabi_ddiv+0x19c>
  4023ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4023b2:	f47f af34 	bne.w	40221e <__aeabi_dmul+0x24a>
  4023b6:	ea95 0f0c 	teq	r5, ip
  4023ba:	f47f af25 	bne.w	402208 <__aeabi_dmul+0x234>
  4023be:	4610      	mov	r0, r2
  4023c0:	4619      	mov	r1, r3
  4023c2:	e72c      	b.n	40221e <__aeabi_dmul+0x24a>
  4023c4:	ea95 0f0c 	teq	r5, ip
  4023c8:	d106      	bne.n	4023d8 <__aeabi_ddiv+0x1b0>
  4023ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4023ce:	f43f aefd 	beq.w	4021cc <__aeabi_dmul+0x1f8>
  4023d2:	4610      	mov	r0, r2
  4023d4:	4619      	mov	r1, r3
  4023d6:	e722      	b.n	40221e <__aeabi_dmul+0x24a>
  4023d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4023dc:	bf18      	it	ne
  4023de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4023e2:	f47f aec5 	bne.w	402170 <__aeabi_dmul+0x19c>
  4023e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4023ea:	f47f af0d 	bne.w	402208 <__aeabi_dmul+0x234>
  4023ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4023f2:	f47f aeeb 	bne.w	4021cc <__aeabi_dmul+0x1f8>
  4023f6:	e712      	b.n	40221e <__aeabi_dmul+0x24a>

004023f8 <__gedf2>:
  4023f8:	f04f 3cff 	mov.w	ip, #4294967295
  4023fc:	e006      	b.n	40240c <__cmpdf2+0x4>
  4023fe:	bf00      	nop

00402400 <__ledf2>:
  402400:	f04f 0c01 	mov.w	ip, #1
  402404:	e002      	b.n	40240c <__cmpdf2+0x4>
  402406:	bf00      	nop

00402408 <__cmpdf2>:
  402408:	f04f 0c01 	mov.w	ip, #1
  40240c:	f84d cd04 	str.w	ip, [sp, #-4]!
  402410:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402414:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402418:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40241c:	bf18      	it	ne
  40241e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  402422:	d01b      	beq.n	40245c <__cmpdf2+0x54>
  402424:	b001      	add	sp, #4
  402426:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40242a:	bf0c      	ite	eq
  40242c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  402430:	ea91 0f03 	teqne	r1, r3
  402434:	bf02      	ittt	eq
  402436:	ea90 0f02 	teqeq	r0, r2
  40243a:	2000      	moveq	r0, #0
  40243c:	4770      	bxeq	lr
  40243e:	f110 0f00 	cmn.w	r0, #0
  402442:	ea91 0f03 	teq	r1, r3
  402446:	bf58      	it	pl
  402448:	4299      	cmppl	r1, r3
  40244a:	bf08      	it	eq
  40244c:	4290      	cmpeq	r0, r2
  40244e:	bf2c      	ite	cs
  402450:	17d8      	asrcs	r0, r3, #31
  402452:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  402456:	f040 0001 	orr.w	r0, r0, #1
  40245a:	4770      	bx	lr
  40245c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402460:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402464:	d102      	bne.n	40246c <__cmpdf2+0x64>
  402466:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40246a:	d107      	bne.n	40247c <__cmpdf2+0x74>
  40246c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402470:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402474:	d1d6      	bne.n	402424 <__cmpdf2+0x1c>
  402476:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40247a:	d0d3      	beq.n	402424 <__cmpdf2+0x1c>
  40247c:	f85d 0b04 	ldr.w	r0, [sp], #4
  402480:	4770      	bx	lr
  402482:	bf00      	nop

00402484 <__aeabi_cdrcmple>:
  402484:	4684      	mov	ip, r0
  402486:	4610      	mov	r0, r2
  402488:	4662      	mov	r2, ip
  40248a:	468c      	mov	ip, r1
  40248c:	4619      	mov	r1, r3
  40248e:	4663      	mov	r3, ip
  402490:	e000      	b.n	402494 <__aeabi_cdcmpeq>
  402492:	bf00      	nop

00402494 <__aeabi_cdcmpeq>:
  402494:	b501      	push	{r0, lr}
  402496:	f7ff ffb7 	bl	402408 <__cmpdf2>
  40249a:	2800      	cmp	r0, #0
  40249c:	bf48      	it	mi
  40249e:	f110 0f00 	cmnmi.w	r0, #0
  4024a2:	bd01      	pop	{r0, pc}

004024a4 <__aeabi_dcmpeq>:
  4024a4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4024a8:	f7ff fff4 	bl	402494 <__aeabi_cdcmpeq>
  4024ac:	bf0c      	ite	eq
  4024ae:	2001      	moveq	r0, #1
  4024b0:	2000      	movne	r0, #0
  4024b2:	f85d fb08 	ldr.w	pc, [sp], #8
  4024b6:	bf00      	nop

004024b8 <__aeabi_dcmplt>:
  4024b8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4024bc:	f7ff ffea 	bl	402494 <__aeabi_cdcmpeq>
  4024c0:	bf34      	ite	cc
  4024c2:	2001      	movcc	r0, #1
  4024c4:	2000      	movcs	r0, #0
  4024c6:	f85d fb08 	ldr.w	pc, [sp], #8
  4024ca:	bf00      	nop

004024cc <__aeabi_dcmple>:
  4024cc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4024d0:	f7ff ffe0 	bl	402494 <__aeabi_cdcmpeq>
  4024d4:	bf94      	ite	ls
  4024d6:	2001      	movls	r0, #1
  4024d8:	2000      	movhi	r0, #0
  4024da:	f85d fb08 	ldr.w	pc, [sp], #8
  4024de:	bf00      	nop

004024e0 <__aeabi_dcmpge>:
  4024e0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4024e4:	f7ff ffce 	bl	402484 <__aeabi_cdrcmple>
  4024e8:	bf94      	ite	ls
  4024ea:	2001      	movls	r0, #1
  4024ec:	2000      	movhi	r0, #0
  4024ee:	f85d fb08 	ldr.w	pc, [sp], #8
  4024f2:	bf00      	nop

004024f4 <__aeabi_dcmpgt>:
  4024f4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4024f8:	f7ff ffc4 	bl	402484 <__aeabi_cdrcmple>
  4024fc:	bf34      	ite	cc
  4024fe:	2001      	movcc	r0, #1
  402500:	2000      	movcs	r0, #0
  402502:	f85d fb08 	ldr.w	pc, [sp], #8
  402506:	bf00      	nop

00402508 <__aeabi_d2iz>:
  402508:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40250c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  402510:	d215      	bcs.n	40253e <__aeabi_d2iz+0x36>
  402512:	d511      	bpl.n	402538 <__aeabi_d2iz+0x30>
  402514:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402518:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40251c:	d912      	bls.n	402544 <__aeabi_d2iz+0x3c>
  40251e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402522:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402526:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40252a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40252e:	fa23 f002 	lsr.w	r0, r3, r2
  402532:	bf18      	it	ne
  402534:	4240      	negne	r0, r0
  402536:	4770      	bx	lr
  402538:	f04f 0000 	mov.w	r0, #0
  40253c:	4770      	bx	lr
  40253e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  402542:	d105      	bne.n	402550 <__aeabi_d2iz+0x48>
  402544:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  402548:	bf08      	it	eq
  40254a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40254e:	4770      	bx	lr
  402550:	f04f 0000 	mov.w	r0, #0
  402554:	4770      	bx	lr
  402556:	bf00      	nop

00402558 <__libc_init_array>:
  402558:	b570      	push	{r4, r5, r6, lr}
  40255a:	4e0d      	ldr	r6, [pc, #52]	; (402590 <__libc_init_array+0x38>)
  40255c:	4c0d      	ldr	r4, [pc, #52]	; (402594 <__libc_init_array+0x3c>)
  40255e:	1ba4      	subs	r4, r4, r6
  402560:	10a4      	asrs	r4, r4, #2
  402562:	2500      	movs	r5, #0
  402564:	42a5      	cmp	r5, r4
  402566:	d109      	bne.n	40257c <__libc_init_array+0x24>
  402568:	4e0b      	ldr	r6, [pc, #44]	; (402598 <__libc_init_array+0x40>)
  40256a:	4c0c      	ldr	r4, [pc, #48]	; (40259c <__libc_init_array+0x44>)
  40256c:	f003 f808 	bl	405580 <_init>
  402570:	1ba4      	subs	r4, r4, r6
  402572:	10a4      	asrs	r4, r4, #2
  402574:	2500      	movs	r5, #0
  402576:	42a5      	cmp	r5, r4
  402578:	d105      	bne.n	402586 <__libc_init_array+0x2e>
  40257a:	bd70      	pop	{r4, r5, r6, pc}
  40257c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402580:	4798      	blx	r3
  402582:	3501      	adds	r5, #1
  402584:	e7ee      	b.n	402564 <__libc_init_array+0xc>
  402586:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40258a:	4798      	blx	r3
  40258c:	3501      	adds	r5, #1
  40258e:	e7f2      	b.n	402576 <__libc_init_array+0x1e>
  402590:	0040558c 	.word	0x0040558c
  402594:	0040558c 	.word	0x0040558c
  402598:	0040558c 	.word	0x0040558c
  40259c:	00405590 	.word	0x00405590

004025a0 <memcpy>:
  4025a0:	b510      	push	{r4, lr}
  4025a2:	1e43      	subs	r3, r0, #1
  4025a4:	440a      	add	r2, r1
  4025a6:	4291      	cmp	r1, r2
  4025a8:	d100      	bne.n	4025ac <memcpy+0xc>
  4025aa:	bd10      	pop	{r4, pc}
  4025ac:	f811 4b01 	ldrb.w	r4, [r1], #1
  4025b0:	f803 4f01 	strb.w	r4, [r3, #1]!
  4025b4:	e7f7      	b.n	4025a6 <memcpy+0x6>

004025b6 <memset>:
  4025b6:	4402      	add	r2, r0
  4025b8:	4603      	mov	r3, r0
  4025ba:	4293      	cmp	r3, r2
  4025bc:	d100      	bne.n	4025c0 <memset+0xa>
  4025be:	4770      	bx	lr
  4025c0:	f803 1b01 	strb.w	r1, [r3], #1
  4025c4:	e7f9      	b.n	4025ba <memset+0x4>

004025c6 <__cvt>:
  4025c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4025ca:	b088      	sub	sp, #32
  4025cc:	2b00      	cmp	r3, #0
  4025ce:	9f14      	ldr	r7, [sp, #80]	; 0x50
  4025d0:	9912      	ldr	r1, [sp, #72]	; 0x48
  4025d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4025d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  4025d8:	461e      	mov	r6, r3
  4025da:	f027 0720 	bic.w	r7, r7, #32
  4025de:	bfbb      	ittet	lt
  4025e0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  4025e4:	461e      	movlt	r6, r3
  4025e6:	2300      	movge	r3, #0
  4025e8:	232d      	movlt	r3, #45	; 0x2d
  4025ea:	2f46      	cmp	r7, #70	; 0x46
  4025ec:	4614      	mov	r4, r2
  4025ee:	700b      	strb	r3, [r1, #0]
  4025f0:	d004      	beq.n	4025fc <__cvt+0x36>
  4025f2:	2f45      	cmp	r7, #69	; 0x45
  4025f4:	d100      	bne.n	4025f8 <__cvt+0x32>
  4025f6:	3501      	adds	r5, #1
  4025f8:	2302      	movs	r3, #2
  4025fa:	e000      	b.n	4025fe <__cvt+0x38>
  4025fc:	2303      	movs	r3, #3
  4025fe:	aa07      	add	r2, sp, #28
  402600:	9204      	str	r2, [sp, #16]
  402602:	aa06      	add	r2, sp, #24
  402604:	9203      	str	r2, [sp, #12]
  402606:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  40260a:	4622      	mov	r2, r4
  40260c:	4633      	mov	r3, r6
  40260e:	f000 fd9b 	bl	403148 <_dtoa_r>
  402612:	2f47      	cmp	r7, #71	; 0x47
  402614:	4680      	mov	r8, r0
  402616:	d102      	bne.n	40261e <__cvt+0x58>
  402618:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40261a:	07db      	lsls	r3, r3, #31
  40261c:	d526      	bpl.n	40266c <__cvt+0xa6>
  40261e:	2f46      	cmp	r7, #70	; 0x46
  402620:	eb08 0905 	add.w	r9, r8, r5
  402624:	d111      	bne.n	40264a <__cvt+0x84>
  402626:	f898 3000 	ldrb.w	r3, [r8]
  40262a:	2b30      	cmp	r3, #48	; 0x30
  40262c:	d10a      	bne.n	402644 <__cvt+0x7e>
  40262e:	2200      	movs	r2, #0
  402630:	2300      	movs	r3, #0
  402632:	4620      	mov	r0, r4
  402634:	4631      	mov	r1, r6
  402636:	f7ff ff35 	bl	4024a4 <__aeabi_dcmpeq>
  40263a:	b918      	cbnz	r0, 402644 <__cvt+0x7e>
  40263c:	f1c5 0501 	rsb	r5, r5, #1
  402640:	f8ca 5000 	str.w	r5, [sl]
  402644:	f8da 3000 	ldr.w	r3, [sl]
  402648:	4499      	add	r9, r3
  40264a:	2200      	movs	r2, #0
  40264c:	2300      	movs	r3, #0
  40264e:	4620      	mov	r0, r4
  402650:	4631      	mov	r1, r6
  402652:	f7ff ff27 	bl	4024a4 <__aeabi_dcmpeq>
  402656:	b938      	cbnz	r0, 402668 <__cvt+0xa2>
  402658:	2230      	movs	r2, #48	; 0x30
  40265a:	9b07      	ldr	r3, [sp, #28]
  40265c:	4599      	cmp	r9, r3
  40265e:	d905      	bls.n	40266c <__cvt+0xa6>
  402660:	1c59      	adds	r1, r3, #1
  402662:	9107      	str	r1, [sp, #28]
  402664:	701a      	strb	r2, [r3, #0]
  402666:	e7f8      	b.n	40265a <__cvt+0x94>
  402668:	f8cd 901c 	str.w	r9, [sp, #28]
  40266c:	9b07      	ldr	r3, [sp, #28]
  40266e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402670:	eba3 0308 	sub.w	r3, r3, r8
  402674:	4640      	mov	r0, r8
  402676:	6013      	str	r3, [r2, #0]
  402678:	b008      	add	sp, #32
  40267a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040267e <__exponent>:
  40267e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  402680:	4603      	mov	r3, r0
  402682:	2900      	cmp	r1, #0
  402684:	bfb8      	it	lt
  402686:	4249      	neglt	r1, r1
  402688:	f803 2b02 	strb.w	r2, [r3], #2
  40268c:	bfb4      	ite	lt
  40268e:	222d      	movlt	r2, #45	; 0x2d
  402690:	222b      	movge	r2, #43	; 0x2b
  402692:	2909      	cmp	r1, #9
  402694:	7042      	strb	r2, [r0, #1]
  402696:	dd20      	ble.n	4026da <__exponent+0x5c>
  402698:	f10d 0207 	add.w	r2, sp, #7
  40269c:	4617      	mov	r7, r2
  40269e:	260a      	movs	r6, #10
  4026a0:	fb91 f5f6 	sdiv	r5, r1, r6
  4026a4:	fb06 1115 	mls	r1, r6, r5, r1
  4026a8:	3130      	adds	r1, #48	; 0x30
  4026aa:	2d09      	cmp	r5, #9
  4026ac:	f802 1c01 	strb.w	r1, [r2, #-1]
  4026b0:	f102 34ff 	add.w	r4, r2, #4294967295
  4026b4:	4629      	mov	r1, r5
  4026b6:	dc09      	bgt.n	4026cc <__exponent+0x4e>
  4026b8:	3130      	adds	r1, #48	; 0x30
  4026ba:	3a02      	subs	r2, #2
  4026bc:	f804 1c01 	strb.w	r1, [r4, #-1]
  4026c0:	42ba      	cmp	r2, r7
  4026c2:	461c      	mov	r4, r3
  4026c4:	d304      	bcc.n	4026d0 <__exponent+0x52>
  4026c6:	1a20      	subs	r0, r4, r0
  4026c8:	b003      	add	sp, #12
  4026ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4026cc:	4622      	mov	r2, r4
  4026ce:	e7e7      	b.n	4026a0 <__exponent+0x22>
  4026d0:	f812 1b01 	ldrb.w	r1, [r2], #1
  4026d4:	f803 1b01 	strb.w	r1, [r3], #1
  4026d8:	e7f2      	b.n	4026c0 <__exponent+0x42>
  4026da:	2230      	movs	r2, #48	; 0x30
  4026dc:	461c      	mov	r4, r3
  4026de:	4411      	add	r1, r2
  4026e0:	f804 2b02 	strb.w	r2, [r4], #2
  4026e4:	7059      	strb	r1, [r3, #1]
  4026e6:	e7ee      	b.n	4026c6 <__exponent+0x48>

004026e8 <_printf_float>:
  4026e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026ec:	b091      	sub	sp, #68	; 0x44
  4026ee:	460c      	mov	r4, r1
  4026f0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  4026f2:	4693      	mov	fp, r2
  4026f4:	461e      	mov	r6, r3
  4026f6:	4605      	mov	r5, r0
  4026f8:	f001 fc74 	bl	403fe4 <_localeconv_r>
  4026fc:	6803      	ldr	r3, [r0, #0]
  4026fe:	9309      	str	r3, [sp, #36]	; 0x24
  402700:	4618      	mov	r0, r3
  402702:	f000 fc8d 	bl	403020 <strlen>
  402706:	2300      	movs	r3, #0
  402708:	930e      	str	r3, [sp, #56]	; 0x38
  40270a:	683b      	ldr	r3, [r7, #0]
  40270c:	900a      	str	r0, [sp, #40]	; 0x28
  40270e:	3307      	adds	r3, #7
  402710:	f023 0307 	bic.w	r3, r3, #7
  402714:	f103 0208 	add.w	r2, r3, #8
  402718:	f894 8018 	ldrb.w	r8, [r4, #24]
  40271c:	f8d4 a000 	ldr.w	sl, [r4]
  402720:	603a      	str	r2, [r7, #0]
  402722:	e9d3 2300 	ldrd	r2, r3, [r3]
  402726:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  40272a:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  40272e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  402730:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  402734:	930b      	str	r3, [sp, #44]	; 0x2c
  402736:	f04f 32ff 	mov.w	r2, #4294967295
  40273a:	4ba6      	ldr	r3, [pc, #664]	; (4029d4 <_printf_float+0x2ec>)
  40273c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40273e:	4638      	mov	r0, r7
  402740:	f002 fb84 	bl	404e4c <__aeabi_dcmpun>
  402744:	2800      	cmp	r0, #0
  402746:	f040 81f7 	bne.w	402b38 <_printf_float+0x450>
  40274a:	f04f 32ff 	mov.w	r2, #4294967295
  40274e:	4ba1      	ldr	r3, [pc, #644]	; (4029d4 <_printf_float+0x2ec>)
  402750:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402752:	4638      	mov	r0, r7
  402754:	f7ff feba 	bl	4024cc <__aeabi_dcmple>
  402758:	2800      	cmp	r0, #0
  40275a:	f040 81ed 	bne.w	402b38 <_printf_float+0x450>
  40275e:	2200      	movs	r2, #0
  402760:	2300      	movs	r3, #0
  402762:	4638      	mov	r0, r7
  402764:	4649      	mov	r1, r9
  402766:	f7ff fea7 	bl	4024b8 <__aeabi_dcmplt>
  40276a:	b110      	cbz	r0, 402772 <_printf_float+0x8a>
  40276c:	232d      	movs	r3, #45	; 0x2d
  40276e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402772:	4b99      	ldr	r3, [pc, #612]	; (4029d8 <_printf_float+0x2f0>)
  402774:	4f99      	ldr	r7, [pc, #612]	; (4029dc <_printf_float+0x2f4>)
  402776:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40277a:	bf98      	it	ls
  40277c:	461f      	movls	r7, r3
  40277e:	2303      	movs	r3, #3
  402780:	6123      	str	r3, [r4, #16]
  402782:	f02a 0304 	bic.w	r3, sl, #4
  402786:	6023      	str	r3, [r4, #0]
  402788:	f04f 0900 	mov.w	r9, #0
  40278c:	9600      	str	r6, [sp, #0]
  40278e:	465b      	mov	r3, fp
  402790:	aa0f      	add	r2, sp, #60	; 0x3c
  402792:	4621      	mov	r1, r4
  402794:	4628      	mov	r0, r5
  402796:	f000 f9df 	bl	402b58 <_printf_common>
  40279a:	3001      	adds	r0, #1
  40279c:	f040 809a 	bne.w	4028d4 <_printf_float+0x1ec>
  4027a0:	f04f 30ff 	mov.w	r0, #4294967295
  4027a4:	b011      	add	sp, #68	; 0x44
  4027a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027aa:	6862      	ldr	r2, [r4, #4]
  4027ac:	1c53      	adds	r3, r2, #1
  4027ae:	a80e      	add	r0, sp, #56	; 0x38
  4027b0:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  4027b4:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  4027b8:	d141      	bne.n	40283e <_printf_float+0x156>
  4027ba:	2206      	movs	r2, #6
  4027bc:	6062      	str	r2, [r4, #4]
  4027be:	6023      	str	r3, [r4, #0]
  4027c0:	2100      	movs	r1, #0
  4027c2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  4027c6:	9301      	str	r3, [sp, #4]
  4027c8:	6863      	ldr	r3, [r4, #4]
  4027ca:	9005      	str	r0, [sp, #20]
  4027cc:	9202      	str	r2, [sp, #8]
  4027ce:	9300      	str	r3, [sp, #0]
  4027d0:	463a      	mov	r2, r7
  4027d2:	464b      	mov	r3, r9
  4027d4:	9106      	str	r1, [sp, #24]
  4027d6:	f8cd 8010 	str.w	r8, [sp, #16]
  4027da:	f8cd e00c 	str.w	lr, [sp, #12]
  4027de:	4628      	mov	r0, r5
  4027e0:	f7ff fef1 	bl	4025c6 <__cvt>
  4027e4:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  4027e8:	2b47      	cmp	r3, #71	; 0x47
  4027ea:	4607      	mov	r7, r0
  4027ec:	d109      	bne.n	402802 <_printf_float+0x11a>
  4027ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4027f0:	1cd8      	adds	r0, r3, #3
  4027f2:	db02      	blt.n	4027fa <_printf_float+0x112>
  4027f4:	6862      	ldr	r2, [r4, #4]
  4027f6:	4293      	cmp	r3, r2
  4027f8:	dd59      	ble.n	4028ae <_printf_float+0x1c6>
  4027fa:	f1a8 0802 	sub.w	r8, r8, #2
  4027fe:	fa5f f888 	uxtb.w	r8, r8
  402802:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  402806:	990d      	ldr	r1, [sp, #52]	; 0x34
  402808:	d836      	bhi.n	402878 <_printf_float+0x190>
  40280a:	3901      	subs	r1, #1
  40280c:	4642      	mov	r2, r8
  40280e:	f104 0050 	add.w	r0, r4, #80	; 0x50
  402812:	910d      	str	r1, [sp, #52]	; 0x34
  402814:	f7ff ff33 	bl	40267e <__exponent>
  402818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40281a:	1883      	adds	r3, r0, r2
  40281c:	2a01      	cmp	r2, #1
  40281e:	4681      	mov	r9, r0
  402820:	6123      	str	r3, [r4, #16]
  402822:	dc02      	bgt.n	40282a <_printf_float+0x142>
  402824:	6822      	ldr	r2, [r4, #0]
  402826:	07d1      	lsls	r1, r2, #31
  402828:	d501      	bpl.n	40282e <_printf_float+0x146>
  40282a:	3301      	adds	r3, #1
  40282c:	6123      	str	r3, [r4, #16]
  40282e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  402832:	2b00      	cmp	r3, #0
  402834:	d0aa      	beq.n	40278c <_printf_float+0xa4>
  402836:	232d      	movs	r3, #45	; 0x2d
  402838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40283c:	e7a6      	b.n	40278c <_printf_float+0xa4>
  40283e:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  402842:	d002      	beq.n	40284a <_printf_float+0x162>
  402844:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  402848:	d1b9      	bne.n	4027be <_printf_float+0xd6>
  40284a:	b19a      	cbz	r2, 402874 <_printf_float+0x18c>
  40284c:	2100      	movs	r1, #0
  40284e:	9106      	str	r1, [sp, #24]
  402850:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  402854:	e88d 000c 	stmia.w	sp, {r2, r3}
  402858:	6023      	str	r3, [r4, #0]
  40285a:	9005      	str	r0, [sp, #20]
  40285c:	463a      	mov	r2, r7
  40285e:	f8cd 8010 	str.w	r8, [sp, #16]
  402862:	f8cd e00c 	str.w	lr, [sp, #12]
  402866:	9102      	str	r1, [sp, #8]
  402868:	464b      	mov	r3, r9
  40286a:	4628      	mov	r0, r5
  40286c:	f7ff feab 	bl	4025c6 <__cvt>
  402870:	4607      	mov	r7, r0
  402872:	e7bc      	b.n	4027ee <_printf_float+0x106>
  402874:	2201      	movs	r2, #1
  402876:	e7a1      	b.n	4027bc <_printf_float+0xd4>
  402878:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40287c:	d119      	bne.n	4028b2 <_printf_float+0x1ca>
  40287e:	2900      	cmp	r1, #0
  402880:	6863      	ldr	r3, [r4, #4]
  402882:	dd0c      	ble.n	40289e <_printf_float+0x1b6>
  402884:	6121      	str	r1, [r4, #16]
  402886:	b913      	cbnz	r3, 40288e <_printf_float+0x1a6>
  402888:	6822      	ldr	r2, [r4, #0]
  40288a:	07d2      	lsls	r2, r2, #31
  40288c:	d502      	bpl.n	402894 <_printf_float+0x1ac>
  40288e:	3301      	adds	r3, #1
  402890:	440b      	add	r3, r1
  402892:	6123      	str	r3, [r4, #16]
  402894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402896:	65a3      	str	r3, [r4, #88]	; 0x58
  402898:	f04f 0900 	mov.w	r9, #0
  40289c:	e7c7      	b.n	40282e <_printf_float+0x146>
  40289e:	b913      	cbnz	r3, 4028a6 <_printf_float+0x1be>
  4028a0:	6822      	ldr	r2, [r4, #0]
  4028a2:	07d0      	lsls	r0, r2, #31
  4028a4:	d501      	bpl.n	4028aa <_printf_float+0x1c2>
  4028a6:	3302      	adds	r3, #2
  4028a8:	e7f3      	b.n	402892 <_printf_float+0x1aa>
  4028aa:	2301      	movs	r3, #1
  4028ac:	e7f1      	b.n	402892 <_printf_float+0x1aa>
  4028ae:	f04f 0867 	mov.w	r8, #103	; 0x67
  4028b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4028b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4028b6:	4293      	cmp	r3, r2
  4028b8:	db05      	blt.n	4028c6 <_printf_float+0x1de>
  4028ba:	6822      	ldr	r2, [r4, #0]
  4028bc:	6123      	str	r3, [r4, #16]
  4028be:	07d1      	lsls	r1, r2, #31
  4028c0:	d5e8      	bpl.n	402894 <_printf_float+0x1ac>
  4028c2:	3301      	adds	r3, #1
  4028c4:	e7e5      	b.n	402892 <_printf_float+0x1aa>
  4028c6:	2b00      	cmp	r3, #0
  4028c8:	bfd4      	ite	le
  4028ca:	f1c3 0302 	rsble	r3, r3, #2
  4028ce:	2301      	movgt	r3, #1
  4028d0:	4413      	add	r3, r2
  4028d2:	e7de      	b.n	402892 <_printf_float+0x1aa>
  4028d4:	6823      	ldr	r3, [r4, #0]
  4028d6:	055a      	lsls	r2, r3, #21
  4028d8:	d407      	bmi.n	4028ea <_printf_float+0x202>
  4028da:	6923      	ldr	r3, [r4, #16]
  4028dc:	463a      	mov	r2, r7
  4028de:	4659      	mov	r1, fp
  4028e0:	4628      	mov	r0, r5
  4028e2:	47b0      	blx	r6
  4028e4:	3001      	adds	r0, #1
  4028e6:	d12a      	bne.n	40293e <_printf_float+0x256>
  4028e8:	e75a      	b.n	4027a0 <_printf_float+0xb8>
  4028ea:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4028ee:	f240 80dc 	bls.w	402aaa <_printf_float+0x3c2>
  4028f2:	2200      	movs	r2, #0
  4028f4:	2300      	movs	r3, #0
  4028f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4028fa:	f7ff fdd3 	bl	4024a4 <__aeabi_dcmpeq>
  4028fe:	2800      	cmp	r0, #0
  402900:	d039      	beq.n	402976 <_printf_float+0x28e>
  402902:	2301      	movs	r3, #1
  402904:	4a36      	ldr	r2, [pc, #216]	; (4029e0 <_printf_float+0x2f8>)
  402906:	4659      	mov	r1, fp
  402908:	4628      	mov	r0, r5
  40290a:	47b0      	blx	r6
  40290c:	3001      	adds	r0, #1
  40290e:	f43f af47 	beq.w	4027a0 <_printf_float+0xb8>
  402912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402914:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402916:	429a      	cmp	r2, r3
  402918:	db02      	blt.n	402920 <_printf_float+0x238>
  40291a:	6823      	ldr	r3, [r4, #0]
  40291c:	07d8      	lsls	r0, r3, #31
  40291e:	d50e      	bpl.n	40293e <_printf_float+0x256>
  402920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402922:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402924:	4659      	mov	r1, fp
  402926:	4628      	mov	r0, r5
  402928:	47b0      	blx	r6
  40292a:	3001      	adds	r0, #1
  40292c:	f43f af38 	beq.w	4027a0 <_printf_float+0xb8>
  402930:	2700      	movs	r7, #0
  402932:	f104 081a 	add.w	r8, r4, #26
  402936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402938:	3b01      	subs	r3, #1
  40293a:	429f      	cmp	r7, r3
  40293c:	db11      	blt.n	402962 <_printf_float+0x27a>
  40293e:	6823      	ldr	r3, [r4, #0]
  402940:	079f      	lsls	r7, r3, #30
  402942:	d508      	bpl.n	402956 <_printf_float+0x26e>
  402944:	2700      	movs	r7, #0
  402946:	f104 0819 	add.w	r8, r4, #25
  40294a:	68e3      	ldr	r3, [r4, #12]
  40294c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40294e:	1a9b      	subs	r3, r3, r2
  402950:	429f      	cmp	r7, r3
  402952:	f2c0 80e7 	blt.w	402b24 <_printf_float+0x43c>
  402956:	68e0      	ldr	r0, [r4, #12]
  402958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40295a:	4298      	cmp	r0, r3
  40295c:	bfb8      	it	lt
  40295e:	4618      	movlt	r0, r3
  402960:	e720      	b.n	4027a4 <_printf_float+0xbc>
  402962:	2301      	movs	r3, #1
  402964:	4642      	mov	r2, r8
  402966:	4659      	mov	r1, fp
  402968:	4628      	mov	r0, r5
  40296a:	47b0      	blx	r6
  40296c:	3001      	adds	r0, #1
  40296e:	f43f af17 	beq.w	4027a0 <_printf_float+0xb8>
  402972:	3701      	adds	r7, #1
  402974:	e7df      	b.n	402936 <_printf_float+0x24e>
  402976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402978:	2b00      	cmp	r3, #0
  40297a:	dc33      	bgt.n	4029e4 <_printf_float+0x2fc>
  40297c:	2301      	movs	r3, #1
  40297e:	4a18      	ldr	r2, [pc, #96]	; (4029e0 <_printf_float+0x2f8>)
  402980:	4659      	mov	r1, fp
  402982:	4628      	mov	r0, r5
  402984:	47b0      	blx	r6
  402986:	3001      	adds	r0, #1
  402988:	f43f af0a 	beq.w	4027a0 <_printf_float+0xb8>
  40298c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40298e:	b923      	cbnz	r3, 40299a <_printf_float+0x2b2>
  402990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402992:	b913      	cbnz	r3, 40299a <_printf_float+0x2b2>
  402994:	6823      	ldr	r3, [r4, #0]
  402996:	07d9      	lsls	r1, r3, #31
  402998:	d5d1      	bpl.n	40293e <_printf_float+0x256>
  40299a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40299c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40299e:	4659      	mov	r1, fp
  4029a0:	4628      	mov	r0, r5
  4029a2:	47b0      	blx	r6
  4029a4:	3001      	adds	r0, #1
  4029a6:	f43f aefb 	beq.w	4027a0 <_printf_float+0xb8>
  4029aa:	f04f 0800 	mov.w	r8, #0
  4029ae:	f104 091a 	add.w	r9, r4, #26
  4029b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4029b4:	425b      	negs	r3, r3
  4029b6:	4598      	cmp	r8, r3
  4029b8:	db01      	blt.n	4029be <_printf_float+0x2d6>
  4029ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4029bc:	e78e      	b.n	4028dc <_printf_float+0x1f4>
  4029be:	2301      	movs	r3, #1
  4029c0:	464a      	mov	r2, r9
  4029c2:	4659      	mov	r1, fp
  4029c4:	4628      	mov	r0, r5
  4029c6:	47b0      	blx	r6
  4029c8:	3001      	adds	r0, #1
  4029ca:	f43f aee9 	beq.w	4027a0 <_printf_float+0xb8>
  4029ce:	f108 0801 	add.w	r8, r8, #1
  4029d2:	e7ee      	b.n	4029b2 <_printf_float+0x2ca>
  4029d4:	7fefffff 	.word	0x7fefffff
  4029d8:	004052c0 	.word	0x004052c0
  4029dc:	004052c4 	.word	0x004052c4
  4029e0:	004052d0 	.word	0x004052d0
  4029e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4029e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4029e8:	429a      	cmp	r2, r3
  4029ea:	bfa8      	it	ge
  4029ec:	461a      	movge	r2, r3
  4029ee:	2a00      	cmp	r2, #0
  4029f0:	4690      	mov	r8, r2
  4029f2:	dc36      	bgt.n	402a62 <_printf_float+0x37a>
  4029f4:	f104 031a 	add.w	r3, r4, #26
  4029f8:	f04f 0a00 	mov.w	sl, #0
  4029fc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  402a00:	930b      	str	r3, [sp, #44]	; 0x2c
  402a02:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  402a06:	eba9 0308 	sub.w	r3, r9, r8
  402a0a:	459a      	cmp	sl, r3
  402a0c:	db31      	blt.n	402a72 <_printf_float+0x38a>
  402a0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402a10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402a12:	429a      	cmp	r2, r3
  402a14:	db38      	blt.n	402a88 <_printf_float+0x3a0>
  402a16:	6823      	ldr	r3, [r4, #0]
  402a18:	07da      	lsls	r2, r3, #31
  402a1a:	d435      	bmi.n	402a88 <_printf_float+0x3a0>
  402a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402a1e:	990d      	ldr	r1, [sp, #52]	; 0x34
  402a20:	eba3 0209 	sub.w	r2, r3, r9
  402a24:	eba3 0801 	sub.w	r8, r3, r1
  402a28:	4590      	cmp	r8, r2
  402a2a:	bfa8      	it	ge
  402a2c:	4690      	movge	r8, r2
  402a2e:	f1b8 0f00 	cmp.w	r8, #0
  402a32:	dc31      	bgt.n	402a98 <_printf_float+0x3b0>
  402a34:	2700      	movs	r7, #0
  402a36:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  402a3a:	f104 091a 	add.w	r9, r4, #26
  402a3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402a42:	1a9b      	subs	r3, r3, r2
  402a44:	eba3 0308 	sub.w	r3, r3, r8
  402a48:	429f      	cmp	r7, r3
  402a4a:	f6bf af78 	bge.w	40293e <_printf_float+0x256>
  402a4e:	2301      	movs	r3, #1
  402a50:	464a      	mov	r2, r9
  402a52:	4659      	mov	r1, fp
  402a54:	4628      	mov	r0, r5
  402a56:	47b0      	blx	r6
  402a58:	3001      	adds	r0, #1
  402a5a:	f43f aea1 	beq.w	4027a0 <_printf_float+0xb8>
  402a5e:	3701      	adds	r7, #1
  402a60:	e7ed      	b.n	402a3e <_printf_float+0x356>
  402a62:	4613      	mov	r3, r2
  402a64:	4659      	mov	r1, fp
  402a66:	463a      	mov	r2, r7
  402a68:	4628      	mov	r0, r5
  402a6a:	47b0      	blx	r6
  402a6c:	3001      	adds	r0, #1
  402a6e:	d1c1      	bne.n	4029f4 <_printf_float+0x30c>
  402a70:	e696      	b.n	4027a0 <_printf_float+0xb8>
  402a72:	2301      	movs	r3, #1
  402a74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402a76:	4659      	mov	r1, fp
  402a78:	4628      	mov	r0, r5
  402a7a:	47b0      	blx	r6
  402a7c:	3001      	adds	r0, #1
  402a7e:	f43f ae8f 	beq.w	4027a0 <_printf_float+0xb8>
  402a82:	f10a 0a01 	add.w	sl, sl, #1
  402a86:	e7bc      	b.n	402a02 <_printf_float+0x31a>
  402a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402a8c:	4659      	mov	r1, fp
  402a8e:	4628      	mov	r0, r5
  402a90:	47b0      	blx	r6
  402a92:	3001      	adds	r0, #1
  402a94:	d1c2      	bne.n	402a1c <_printf_float+0x334>
  402a96:	e683      	b.n	4027a0 <_printf_float+0xb8>
  402a98:	4643      	mov	r3, r8
  402a9a:	eb07 0209 	add.w	r2, r7, r9
  402a9e:	4659      	mov	r1, fp
  402aa0:	4628      	mov	r0, r5
  402aa2:	47b0      	blx	r6
  402aa4:	3001      	adds	r0, #1
  402aa6:	d1c5      	bne.n	402a34 <_printf_float+0x34c>
  402aa8:	e67a      	b.n	4027a0 <_printf_float+0xb8>
  402aaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402aac:	2a01      	cmp	r2, #1
  402aae:	dc01      	bgt.n	402ab4 <_printf_float+0x3cc>
  402ab0:	07db      	lsls	r3, r3, #31
  402ab2:	d534      	bpl.n	402b1e <_printf_float+0x436>
  402ab4:	2301      	movs	r3, #1
  402ab6:	463a      	mov	r2, r7
  402ab8:	4659      	mov	r1, fp
  402aba:	4628      	mov	r0, r5
  402abc:	47b0      	blx	r6
  402abe:	3001      	adds	r0, #1
  402ac0:	f43f ae6e 	beq.w	4027a0 <_printf_float+0xb8>
  402ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402ac8:	4659      	mov	r1, fp
  402aca:	4628      	mov	r0, r5
  402acc:	47b0      	blx	r6
  402ace:	3001      	adds	r0, #1
  402ad0:	f43f ae66 	beq.w	4027a0 <_printf_float+0xb8>
  402ad4:	2200      	movs	r2, #0
  402ad6:	2300      	movs	r3, #0
  402ad8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402adc:	f7ff fce2 	bl	4024a4 <__aeabi_dcmpeq>
  402ae0:	b150      	cbz	r0, 402af8 <_printf_float+0x410>
  402ae2:	2700      	movs	r7, #0
  402ae4:	f104 081a 	add.w	r8, r4, #26
  402ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402aea:	3b01      	subs	r3, #1
  402aec:	429f      	cmp	r7, r3
  402aee:	db0c      	blt.n	402b0a <_printf_float+0x422>
  402af0:	464b      	mov	r3, r9
  402af2:	f104 0250 	add.w	r2, r4, #80	; 0x50
  402af6:	e6f2      	b.n	4028de <_printf_float+0x1f6>
  402af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402afa:	1c7a      	adds	r2, r7, #1
  402afc:	3b01      	subs	r3, #1
  402afe:	4659      	mov	r1, fp
  402b00:	4628      	mov	r0, r5
  402b02:	47b0      	blx	r6
  402b04:	3001      	adds	r0, #1
  402b06:	d1f3      	bne.n	402af0 <_printf_float+0x408>
  402b08:	e64a      	b.n	4027a0 <_printf_float+0xb8>
  402b0a:	2301      	movs	r3, #1
  402b0c:	4642      	mov	r2, r8
  402b0e:	4659      	mov	r1, fp
  402b10:	4628      	mov	r0, r5
  402b12:	47b0      	blx	r6
  402b14:	3001      	adds	r0, #1
  402b16:	f43f ae43 	beq.w	4027a0 <_printf_float+0xb8>
  402b1a:	3701      	adds	r7, #1
  402b1c:	e7e4      	b.n	402ae8 <_printf_float+0x400>
  402b1e:	2301      	movs	r3, #1
  402b20:	463a      	mov	r2, r7
  402b22:	e7ec      	b.n	402afe <_printf_float+0x416>
  402b24:	2301      	movs	r3, #1
  402b26:	4642      	mov	r2, r8
  402b28:	4659      	mov	r1, fp
  402b2a:	4628      	mov	r0, r5
  402b2c:	47b0      	blx	r6
  402b2e:	3001      	adds	r0, #1
  402b30:	f43f ae36 	beq.w	4027a0 <_printf_float+0xb8>
  402b34:	3701      	adds	r7, #1
  402b36:	e708      	b.n	40294a <_printf_float+0x262>
  402b38:	463a      	mov	r2, r7
  402b3a:	464b      	mov	r3, r9
  402b3c:	4638      	mov	r0, r7
  402b3e:	4649      	mov	r1, r9
  402b40:	f002 f984 	bl	404e4c <__aeabi_dcmpun>
  402b44:	2800      	cmp	r0, #0
  402b46:	f43f ae30 	beq.w	4027aa <_printf_float+0xc2>
  402b4a:	4b01      	ldr	r3, [pc, #4]	; (402b50 <_printf_float+0x468>)
  402b4c:	4f01      	ldr	r7, [pc, #4]	; (402b54 <_printf_float+0x46c>)
  402b4e:	e612      	b.n	402776 <_printf_float+0x8e>
  402b50:	004052c8 	.word	0x004052c8
  402b54:	004052cc 	.word	0x004052cc

00402b58 <_printf_common>:
  402b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b5c:	4691      	mov	r9, r2
  402b5e:	461f      	mov	r7, r3
  402b60:	688a      	ldr	r2, [r1, #8]
  402b62:	690b      	ldr	r3, [r1, #16]
  402b64:	f8dd 8020 	ldr.w	r8, [sp, #32]
  402b68:	4293      	cmp	r3, r2
  402b6a:	bfb8      	it	lt
  402b6c:	4613      	movlt	r3, r2
  402b6e:	f8c9 3000 	str.w	r3, [r9]
  402b72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  402b76:	4606      	mov	r6, r0
  402b78:	460c      	mov	r4, r1
  402b7a:	b112      	cbz	r2, 402b82 <_printf_common+0x2a>
  402b7c:	3301      	adds	r3, #1
  402b7e:	f8c9 3000 	str.w	r3, [r9]
  402b82:	6823      	ldr	r3, [r4, #0]
  402b84:	0699      	lsls	r1, r3, #26
  402b86:	bf42      	ittt	mi
  402b88:	f8d9 3000 	ldrmi.w	r3, [r9]
  402b8c:	3302      	addmi	r3, #2
  402b8e:	f8c9 3000 	strmi.w	r3, [r9]
  402b92:	6825      	ldr	r5, [r4, #0]
  402b94:	f015 0506 	ands.w	r5, r5, #6
  402b98:	d107      	bne.n	402baa <_printf_common+0x52>
  402b9a:	f104 0a19 	add.w	sl, r4, #25
  402b9e:	68e3      	ldr	r3, [r4, #12]
  402ba0:	f8d9 2000 	ldr.w	r2, [r9]
  402ba4:	1a9b      	subs	r3, r3, r2
  402ba6:	429d      	cmp	r5, r3
  402ba8:	db29      	blt.n	402bfe <_printf_common+0xa6>
  402baa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  402bae:	6822      	ldr	r2, [r4, #0]
  402bb0:	3300      	adds	r3, #0
  402bb2:	bf18      	it	ne
  402bb4:	2301      	movne	r3, #1
  402bb6:	0692      	lsls	r2, r2, #26
  402bb8:	d42e      	bmi.n	402c18 <_printf_common+0xc0>
  402bba:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402bbe:	4639      	mov	r1, r7
  402bc0:	4630      	mov	r0, r6
  402bc2:	47c0      	blx	r8
  402bc4:	3001      	adds	r0, #1
  402bc6:	d021      	beq.n	402c0c <_printf_common+0xb4>
  402bc8:	6823      	ldr	r3, [r4, #0]
  402bca:	68e5      	ldr	r5, [r4, #12]
  402bcc:	f8d9 2000 	ldr.w	r2, [r9]
  402bd0:	f003 0306 	and.w	r3, r3, #6
  402bd4:	2b04      	cmp	r3, #4
  402bd6:	bf08      	it	eq
  402bd8:	1aad      	subeq	r5, r5, r2
  402bda:	68a3      	ldr	r3, [r4, #8]
  402bdc:	6922      	ldr	r2, [r4, #16]
  402bde:	bf0c      	ite	eq
  402be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  402be4:	2500      	movne	r5, #0
  402be6:	4293      	cmp	r3, r2
  402be8:	bfc4      	itt	gt
  402bea:	1a9b      	subgt	r3, r3, r2
  402bec:	18ed      	addgt	r5, r5, r3
  402bee:	f04f 0900 	mov.w	r9, #0
  402bf2:	341a      	adds	r4, #26
  402bf4:	454d      	cmp	r5, r9
  402bf6:	d11b      	bne.n	402c30 <_printf_common+0xd8>
  402bf8:	2000      	movs	r0, #0
  402bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402bfe:	2301      	movs	r3, #1
  402c00:	4652      	mov	r2, sl
  402c02:	4639      	mov	r1, r7
  402c04:	4630      	mov	r0, r6
  402c06:	47c0      	blx	r8
  402c08:	3001      	adds	r0, #1
  402c0a:	d103      	bne.n	402c14 <_printf_common+0xbc>
  402c0c:	f04f 30ff 	mov.w	r0, #4294967295
  402c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c14:	3501      	adds	r5, #1
  402c16:	e7c2      	b.n	402b9e <_printf_common+0x46>
  402c18:	18e1      	adds	r1, r4, r3
  402c1a:	1c5a      	adds	r2, r3, #1
  402c1c:	2030      	movs	r0, #48	; 0x30
  402c1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  402c22:	4422      	add	r2, r4
  402c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  402c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  402c2c:	3302      	adds	r3, #2
  402c2e:	e7c4      	b.n	402bba <_printf_common+0x62>
  402c30:	2301      	movs	r3, #1
  402c32:	4622      	mov	r2, r4
  402c34:	4639      	mov	r1, r7
  402c36:	4630      	mov	r0, r6
  402c38:	47c0      	blx	r8
  402c3a:	3001      	adds	r0, #1
  402c3c:	d0e6      	beq.n	402c0c <_printf_common+0xb4>
  402c3e:	f109 0901 	add.w	r9, r9, #1
  402c42:	e7d7      	b.n	402bf4 <_printf_common+0x9c>

00402c44 <_printf_i>:
  402c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402c48:	4617      	mov	r7, r2
  402c4a:	7e0a      	ldrb	r2, [r1, #24]
  402c4c:	b085      	sub	sp, #20
  402c4e:	2a6e      	cmp	r2, #110	; 0x6e
  402c50:	4698      	mov	r8, r3
  402c52:	4606      	mov	r6, r0
  402c54:	460c      	mov	r4, r1
  402c56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402c58:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  402c5c:	f000 80bc 	beq.w	402dd8 <_printf_i+0x194>
  402c60:	d81a      	bhi.n	402c98 <_printf_i+0x54>
  402c62:	2a63      	cmp	r2, #99	; 0x63
  402c64:	d02e      	beq.n	402cc4 <_printf_i+0x80>
  402c66:	d80a      	bhi.n	402c7e <_printf_i+0x3a>
  402c68:	2a00      	cmp	r2, #0
  402c6a:	f000 80c8 	beq.w	402dfe <_printf_i+0x1ba>
  402c6e:	2a58      	cmp	r2, #88	; 0x58
  402c70:	f000 808a 	beq.w	402d88 <_printf_i+0x144>
  402c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402c78:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  402c7c:	e02a      	b.n	402cd4 <_printf_i+0x90>
  402c7e:	2a64      	cmp	r2, #100	; 0x64
  402c80:	d001      	beq.n	402c86 <_printf_i+0x42>
  402c82:	2a69      	cmp	r2, #105	; 0x69
  402c84:	d1f6      	bne.n	402c74 <_printf_i+0x30>
  402c86:	6821      	ldr	r1, [r4, #0]
  402c88:	681a      	ldr	r2, [r3, #0]
  402c8a:	f011 0f80 	tst.w	r1, #128	; 0x80
  402c8e:	d023      	beq.n	402cd8 <_printf_i+0x94>
  402c90:	1d11      	adds	r1, r2, #4
  402c92:	6019      	str	r1, [r3, #0]
  402c94:	6813      	ldr	r3, [r2, #0]
  402c96:	e027      	b.n	402ce8 <_printf_i+0xa4>
  402c98:	2a73      	cmp	r2, #115	; 0x73
  402c9a:	f000 80b4 	beq.w	402e06 <_printf_i+0x1c2>
  402c9e:	d808      	bhi.n	402cb2 <_printf_i+0x6e>
  402ca0:	2a6f      	cmp	r2, #111	; 0x6f
  402ca2:	d02a      	beq.n	402cfa <_printf_i+0xb6>
  402ca4:	2a70      	cmp	r2, #112	; 0x70
  402ca6:	d1e5      	bne.n	402c74 <_printf_i+0x30>
  402ca8:	680a      	ldr	r2, [r1, #0]
  402caa:	f042 0220 	orr.w	r2, r2, #32
  402cae:	600a      	str	r2, [r1, #0]
  402cb0:	e003      	b.n	402cba <_printf_i+0x76>
  402cb2:	2a75      	cmp	r2, #117	; 0x75
  402cb4:	d021      	beq.n	402cfa <_printf_i+0xb6>
  402cb6:	2a78      	cmp	r2, #120	; 0x78
  402cb8:	d1dc      	bne.n	402c74 <_printf_i+0x30>
  402cba:	2278      	movs	r2, #120	; 0x78
  402cbc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  402cc0:	496e      	ldr	r1, [pc, #440]	; (402e7c <_printf_i+0x238>)
  402cc2:	e064      	b.n	402d8e <_printf_i+0x14a>
  402cc4:	681a      	ldr	r2, [r3, #0]
  402cc6:	f101 0542 	add.w	r5, r1, #66	; 0x42
  402cca:	1d11      	adds	r1, r2, #4
  402ccc:	6019      	str	r1, [r3, #0]
  402cce:	6813      	ldr	r3, [r2, #0]
  402cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402cd4:	2301      	movs	r3, #1
  402cd6:	e0a3      	b.n	402e20 <_printf_i+0x1dc>
  402cd8:	f011 0f40 	tst.w	r1, #64	; 0x40
  402cdc:	f102 0104 	add.w	r1, r2, #4
  402ce0:	6019      	str	r1, [r3, #0]
  402ce2:	d0d7      	beq.n	402c94 <_printf_i+0x50>
  402ce4:	f9b2 3000 	ldrsh.w	r3, [r2]
  402ce8:	2b00      	cmp	r3, #0
  402cea:	da03      	bge.n	402cf4 <_printf_i+0xb0>
  402cec:	222d      	movs	r2, #45	; 0x2d
  402cee:	425b      	negs	r3, r3
  402cf0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  402cf4:	4962      	ldr	r1, [pc, #392]	; (402e80 <_printf_i+0x23c>)
  402cf6:	220a      	movs	r2, #10
  402cf8:	e017      	b.n	402d2a <_printf_i+0xe6>
  402cfa:	6820      	ldr	r0, [r4, #0]
  402cfc:	6819      	ldr	r1, [r3, #0]
  402cfe:	f010 0f80 	tst.w	r0, #128	; 0x80
  402d02:	d003      	beq.n	402d0c <_printf_i+0xc8>
  402d04:	1d08      	adds	r0, r1, #4
  402d06:	6018      	str	r0, [r3, #0]
  402d08:	680b      	ldr	r3, [r1, #0]
  402d0a:	e006      	b.n	402d1a <_printf_i+0xd6>
  402d0c:	f010 0f40 	tst.w	r0, #64	; 0x40
  402d10:	f101 0004 	add.w	r0, r1, #4
  402d14:	6018      	str	r0, [r3, #0]
  402d16:	d0f7      	beq.n	402d08 <_printf_i+0xc4>
  402d18:	880b      	ldrh	r3, [r1, #0]
  402d1a:	4959      	ldr	r1, [pc, #356]	; (402e80 <_printf_i+0x23c>)
  402d1c:	2a6f      	cmp	r2, #111	; 0x6f
  402d1e:	bf14      	ite	ne
  402d20:	220a      	movne	r2, #10
  402d22:	2208      	moveq	r2, #8
  402d24:	2000      	movs	r0, #0
  402d26:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  402d2a:	6865      	ldr	r5, [r4, #4]
  402d2c:	60a5      	str	r5, [r4, #8]
  402d2e:	2d00      	cmp	r5, #0
  402d30:	f2c0 809c 	blt.w	402e6c <_printf_i+0x228>
  402d34:	6820      	ldr	r0, [r4, #0]
  402d36:	f020 0004 	bic.w	r0, r0, #4
  402d3a:	6020      	str	r0, [r4, #0]
  402d3c:	2b00      	cmp	r3, #0
  402d3e:	d13f      	bne.n	402dc0 <_printf_i+0x17c>
  402d40:	2d00      	cmp	r5, #0
  402d42:	f040 8095 	bne.w	402e70 <_printf_i+0x22c>
  402d46:	4675      	mov	r5, lr
  402d48:	2a08      	cmp	r2, #8
  402d4a:	d10b      	bne.n	402d64 <_printf_i+0x120>
  402d4c:	6823      	ldr	r3, [r4, #0]
  402d4e:	07da      	lsls	r2, r3, #31
  402d50:	d508      	bpl.n	402d64 <_printf_i+0x120>
  402d52:	6923      	ldr	r3, [r4, #16]
  402d54:	6862      	ldr	r2, [r4, #4]
  402d56:	429a      	cmp	r2, r3
  402d58:	bfde      	ittt	le
  402d5a:	2330      	movle	r3, #48	; 0x30
  402d5c:	f805 3c01 	strble.w	r3, [r5, #-1]
  402d60:	f105 35ff 	addle.w	r5, r5, #4294967295
  402d64:	ebae 0305 	sub.w	r3, lr, r5
  402d68:	6123      	str	r3, [r4, #16]
  402d6a:	f8cd 8000 	str.w	r8, [sp]
  402d6e:	463b      	mov	r3, r7
  402d70:	aa03      	add	r2, sp, #12
  402d72:	4621      	mov	r1, r4
  402d74:	4630      	mov	r0, r6
  402d76:	f7ff feef 	bl	402b58 <_printf_common>
  402d7a:	3001      	adds	r0, #1
  402d7c:	d155      	bne.n	402e2a <_printf_i+0x1e6>
  402d7e:	f04f 30ff 	mov.w	r0, #4294967295
  402d82:	b005      	add	sp, #20
  402d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402d88:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  402d8c:	493c      	ldr	r1, [pc, #240]	; (402e80 <_printf_i+0x23c>)
  402d8e:	6822      	ldr	r2, [r4, #0]
  402d90:	6818      	ldr	r0, [r3, #0]
  402d92:	f012 0f80 	tst.w	r2, #128	; 0x80
  402d96:	f100 0504 	add.w	r5, r0, #4
  402d9a:	601d      	str	r5, [r3, #0]
  402d9c:	d001      	beq.n	402da2 <_printf_i+0x15e>
  402d9e:	6803      	ldr	r3, [r0, #0]
  402da0:	e002      	b.n	402da8 <_printf_i+0x164>
  402da2:	0655      	lsls	r5, r2, #25
  402da4:	d5fb      	bpl.n	402d9e <_printf_i+0x15a>
  402da6:	8803      	ldrh	r3, [r0, #0]
  402da8:	07d0      	lsls	r0, r2, #31
  402daa:	bf44      	itt	mi
  402dac:	f042 0220 	orrmi.w	r2, r2, #32
  402db0:	6022      	strmi	r2, [r4, #0]
  402db2:	b91b      	cbnz	r3, 402dbc <_printf_i+0x178>
  402db4:	6822      	ldr	r2, [r4, #0]
  402db6:	f022 0220 	bic.w	r2, r2, #32
  402dba:	6022      	str	r2, [r4, #0]
  402dbc:	2210      	movs	r2, #16
  402dbe:	e7b1      	b.n	402d24 <_printf_i+0xe0>
  402dc0:	4675      	mov	r5, lr
  402dc2:	fbb3 f0f2 	udiv	r0, r3, r2
  402dc6:	fb02 3310 	mls	r3, r2, r0, r3
  402dca:	5ccb      	ldrb	r3, [r1, r3]
  402dcc:	f805 3d01 	strb.w	r3, [r5, #-1]!
  402dd0:	4603      	mov	r3, r0
  402dd2:	2800      	cmp	r0, #0
  402dd4:	d1f5      	bne.n	402dc2 <_printf_i+0x17e>
  402dd6:	e7b7      	b.n	402d48 <_printf_i+0x104>
  402dd8:	6808      	ldr	r0, [r1, #0]
  402dda:	681a      	ldr	r2, [r3, #0]
  402ddc:	6949      	ldr	r1, [r1, #20]
  402dde:	f010 0f80 	tst.w	r0, #128	; 0x80
  402de2:	d004      	beq.n	402dee <_printf_i+0x1aa>
  402de4:	1d10      	adds	r0, r2, #4
  402de6:	6018      	str	r0, [r3, #0]
  402de8:	6813      	ldr	r3, [r2, #0]
  402dea:	6019      	str	r1, [r3, #0]
  402dec:	e007      	b.n	402dfe <_printf_i+0x1ba>
  402dee:	f010 0f40 	tst.w	r0, #64	; 0x40
  402df2:	f102 0004 	add.w	r0, r2, #4
  402df6:	6018      	str	r0, [r3, #0]
  402df8:	6813      	ldr	r3, [r2, #0]
  402dfa:	d0f6      	beq.n	402dea <_printf_i+0x1a6>
  402dfc:	8019      	strh	r1, [r3, #0]
  402dfe:	2300      	movs	r3, #0
  402e00:	6123      	str	r3, [r4, #16]
  402e02:	4675      	mov	r5, lr
  402e04:	e7b1      	b.n	402d6a <_printf_i+0x126>
  402e06:	681a      	ldr	r2, [r3, #0]
  402e08:	1d11      	adds	r1, r2, #4
  402e0a:	6019      	str	r1, [r3, #0]
  402e0c:	6815      	ldr	r5, [r2, #0]
  402e0e:	6862      	ldr	r2, [r4, #4]
  402e10:	2100      	movs	r1, #0
  402e12:	4628      	mov	r0, r5
  402e14:	f001 f964 	bl	4040e0 <memchr>
  402e18:	b108      	cbz	r0, 402e1e <_printf_i+0x1da>
  402e1a:	1b40      	subs	r0, r0, r5
  402e1c:	6060      	str	r0, [r4, #4]
  402e1e:	6863      	ldr	r3, [r4, #4]
  402e20:	6123      	str	r3, [r4, #16]
  402e22:	2300      	movs	r3, #0
  402e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402e28:	e79f      	b.n	402d6a <_printf_i+0x126>
  402e2a:	6923      	ldr	r3, [r4, #16]
  402e2c:	462a      	mov	r2, r5
  402e2e:	4639      	mov	r1, r7
  402e30:	4630      	mov	r0, r6
  402e32:	47c0      	blx	r8
  402e34:	3001      	adds	r0, #1
  402e36:	d0a2      	beq.n	402d7e <_printf_i+0x13a>
  402e38:	6823      	ldr	r3, [r4, #0]
  402e3a:	079b      	lsls	r3, r3, #30
  402e3c:	d507      	bpl.n	402e4e <_printf_i+0x20a>
  402e3e:	2500      	movs	r5, #0
  402e40:	f104 0919 	add.w	r9, r4, #25
  402e44:	68e3      	ldr	r3, [r4, #12]
  402e46:	9a03      	ldr	r2, [sp, #12]
  402e48:	1a9b      	subs	r3, r3, r2
  402e4a:	429d      	cmp	r5, r3
  402e4c:	db05      	blt.n	402e5a <_printf_i+0x216>
  402e4e:	68e0      	ldr	r0, [r4, #12]
  402e50:	9b03      	ldr	r3, [sp, #12]
  402e52:	4298      	cmp	r0, r3
  402e54:	bfb8      	it	lt
  402e56:	4618      	movlt	r0, r3
  402e58:	e793      	b.n	402d82 <_printf_i+0x13e>
  402e5a:	2301      	movs	r3, #1
  402e5c:	464a      	mov	r2, r9
  402e5e:	4639      	mov	r1, r7
  402e60:	4630      	mov	r0, r6
  402e62:	47c0      	blx	r8
  402e64:	3001      	adds	r0, #1
  402e66:	d08a      	beq.n	402d7e <_printf_i+0x13a>
  402e68:	3501      	adds	r5, #1
  402e6a:	e7eb      	b.n	402e44 <_printf_i+0x200>
  402e6c:	2b00      	cmp	r3, #0
  402e6e:	d1a7      	bne.n	402dc0 <_printf_i+0x17c>
  402e70:	780b      	ldrb	r3, [r1, #0]
  402e72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402e76:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402e7a:	e765      	b.n	402d48 <_printf_i+0x104>
  402e7c:	004052e3 	.word	0x004052e3
  402e80:	004052d2 	.word	0x004052d2

00402e84 <iprintf>:
  402e84:	b40f      	push	{r0, r1, r2, r3}
  402e86:	4b0a      	ldr	r3, [pc, #40]	; (402eb0 <iprintf+0x2c>)
  402e88:	b513      	push	{r0, r1, r4, lr}
  402e8a:	681c      	ldr	r4, [r3, #0]
  402e8c:	b124      	cbz	r4, 402e98 <iprintf+0x14>
  402e8e:	69a3      	ldr	r3, [r4, #24]
  402e90:	b913      	cbnz	r3, 402e98 <iprintf+0x14>
  402e92:	4620      	mov	r0, r4
  402e94:	f001 f81c 	bl	403ed0 <__sinit>
  402e98:	ab05      	add	r3, sp, #20
  402e9a:	9a04      	ldr	r2, [sp, #16]
  402e9c:	68a1      	ldr	r1, [r4, #8]
  402e9e:	9301      	str	r3, [sp, #4]
  402ea0:	4620      	mov	r0, r4
  402ea2:	f001 fd1f 	bl	4048e4 <_vfiprintf_r>
  402ea6:	b002      	add	sp, #8
  402ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402eac:	b004      	add	sp, #16
  402eae:	4770      	bx	lr
  402eb0:	20400048 	.word	0x20400048

00402eb4 <setbuf>:
  402eb4:	2900      	cmp	r1, #0
  402eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402eba:	bf0c      	ite	eq
  402ebc:	2202      	moveq	r2, #2
  402ebe:	2200      	movne	r2, #0
  402ec0:	f000 b800 	b.w	402ec4 <setvbuf>

00402ec4 <setvbuf>:
  402ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  402ec8:	461d      	mov	r5, r3
  402eca:	4b51      	ldr	r3, [pc, #324]	; (403010 <setvbuf+0x14c>)
  402ecc:	681e      	ldr	r6, [r3, #0]
  402ece:	4604      	mov	r4, r0
  402ed0:	460f      	mov	r7, r1
  402ed2:	4690      	mov	r8, r2
  402ed4:	b126      	cbz	r6, 402ee0 <setvbuf+0x1c>
  402ed6:	69b3      	ldr	r3, [r6, #24]
  402ed8:	b913      	cbnz	r3, 402ee0 <setvbuf+0x1c>
  402eda:	4630      	mov	r0, r6
  402edc:	f000 fff8 	bl	403ed0 <__sinit>
  402ee0:	4b4c      	ldr	r3, [pc, #304]	; (403014 <setvbuf+0x150>)
  402ee2:	429c      	cmp	r4, r3
  402ee4:	d152      	bne.n	402f8c <setvbuf+0xc8>
  402ee6:	6874      	ldr	r4, [r6, #4]
  402ee8:	f1b8 0f02 	cmp.w	r8, #2
  402eec:	d006      	beq.n	402efc <setvbuf+0x38>
  402eee:	f1b8 0f01 	cmp.w	r8, #1
  402ef2:	f200 8089 	bhi.w	403008 <setvbuf+0x144>
  402ef6:	2d00      	cmp	r5, #0
  402ef8:	f2c0 8086 	blt.w	403008 <setvbuf+0x144>
  402efc:	4621      	mov	r1, r4
  402efe:	4630      	mov	r0, r6
  402f00:	f000 ff7c 	bl	403dfc <_fflush_r>
  402f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402f06:	b141      	cbz	r1, 402f1a <setvbuf+0x56>
  402f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
  402f0c:	4299      	cmp	r1, r3
  402f0e:	d002      	beq.n	402f16 <setvbuf+0x52>
  402f10:	4630      	mov	r0, r6
  402f12:	f001 fc13 	bl	40473c <_free_r>
  402f16:	2300      	movs	r3, #0
  402f18:	6363      	str	r3, [r4, #52]	; 0x34
  402f1a:	2300      	movs	r3, #0
  402f1c:	61a3      	str	r3, [r4, #24]
  402f1e:	6063      	str	r3, [r4, #4]
  402f20:	89a3      	ldrh	r3, [r4, #12]
  402f22:	061b      	lsls	r3, r3, #24
  402f24:	d503      	bpl.n	402f2e <setvbuf+0x6a>
  402f26:	6921      	ldr	r1, [r4, #16]
  402f28:	4630      	mov	r0, r6
  402f2a:	f001 fc07 	bl	40473c <_free_r>
  402f2e:	89a3      	ldrh	r3, [r4, #12]
  402f30:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402f34:	f023 0303 	bic.w	r3, r3, #3
  402f38:	f1b8 0f02 	cmp.w	r8, #2
  402f3c:	81a3      	strh	r3, [r4, #12]
  402f3e:	d05d      	beq.n	402ffc <setvbuf+0x138>
  402f40:	ab01      	add	r3, sp, #4
  402f42:	466a      	mov	r2, sp
  402f44:	4621      	mov	r1, r4
  402f46:	4630      	mov	r0, r6
  402f48:	f001 f85a 	bl	404000 <__swhatbuf_r>
  402f4c:	89a3      	ldrh	r3, [r4, #12]
  402f4e:	4318      	orrs	r0, r3
  402f50:	81a0      	strh	r0, [r4, #12]
  402f52:	bb2d      	cbnz	r5, 402fa0 <setvbuf+0xdc>
  402f54:	9d00      	ldr	r5, [sp, #0]
  402f56:	4628      	mov	r0, r5
  402f58:	f001 f8b6 	bl	4040c8 <malloc>
  402f5c:	4607      	mov	r7, r0
  402f5e:	2800      	cmp	r0, #0
  402f60:	d14e      	bne.n	403000 <setvbuf+0x13c>
  402f62:	f8dd 9000 	ldr.w	r9, [sp]
  402f66:	45a9      	cmp	r9, r5
  402f68:	d13c      	bne.n	402fe4 <setvbuf+0x120>
  402f6a:	f04f 30ff 	mov.w	r0, #4294967295
  402f6e:	89a3      	ldrh	r3, [r4, #12]
  402f70:	f043 0302 	orr.w	r3, r3, #2
  402f74:	81a3      	strh	r3, [r4, #12]
  402f76:	2300      	movs	r3, #0
  402f78:	60a3      	str	r3, [r4, #8]
  402f7a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  402f7e:	6023      	str	r3, [r4, #0]
  402f80:	6123      	str	r3, [r4, #16]
  402f82:	2301      	movs	r3, #1
  402f84:	6163      	str	r3, [r4, #20]
  402f86:	b003      	add	sp, #12
  402f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402f8c:	4b22      	ldr	r3, [pc, #136]	; (403018 <setvbuf+0x154>)
  402f8e:	429c      	cmp	r4, r3
  402f90:	d101      	bne.n	402f96 <setvbuf+0xd2>
  402f92:	68b4      	ldr	r4, [r6, #8]
  402f94:	e7a8      	b.n	402ee8 <setvbuf+0x24>
  402f96:	4b21      	ldr	r3, [pc, #132]	; (40301c <setvbuf+0x158>)
  402f98:	429c      	cmp	r4, r3
  402f9a:	bf08      	it	eq
  402f9c:	68f4      	ldreq	r4, [r6, #12]
  402f9e:	e7a3      	b.n	402ee8 <setvbuf+0x24>
  402fa0:	2f00      	cmp	r7, #0
  402fa2:	d0d8      	beq.n	402f56 <setvbuf+0x92>
  402fa4:	69b3      	ldr	r3, [r6, #24]
  402fa6:	b913      	cbnz	r3, 402fae <setvbuf+0xea>
  402fa8:	4630      	mov	r0, r6
  402faa:	f000 ff91 	bl	403ed0 <__sinit>
  402fae:	f1b8 0f01 	cmp.w	r8, #1
  402fb2:	bf08      	it	eq
  402fb4:	89a3      	ldrheq	r3, [r4, #12]
  402fb6:	6027      	str	r7, [r4, #0]
  402fb8:	bf04      	itt	eq
  402fba:	f043 0301 	orreq.w	r3, r3, #1
  402fbe:	81a3      	strheq	r3, [r4, #12]
  402fc0:	89a3      	ldrh	r3, [r4, #12]
  402fc2:	6127      	str	r7, [r4, #16]
  402fc4:	f013 0008 	ands.w	r0, r3, #8
  402fc8:	6165      	str	r5, [r4, #20]
  402fca:	d01b      	beq.n	403004 <setvbuf+0x140>
  402fcc:	f013 0001 	ands.w	r0, r3, #1
  402fd0:	bf18      	it	ne
  402fd2:	426d      	negne	r5, r5
  402fd4:	f04f 0300 	mov.w	r3, #0
  402fd8:	bf1d      	ittte	ne
  402fda:	60a3      	strne	r3, [r4, #8]
  402fdc:	61a5      	strne	r5, [r4, #24]
  402fde:	4618      	movne	r0, r3
  402fe0:	60a5      	streq	r5, [r4, #8]
  402fe2:	e7d0      	b.n	402f86 <setvbuf+0xc2>
  402fe4:	4648      	mov	r0, r9
  402fe6:	f001 f86f 	bl	4040c8 <malloc>
  402fea:	4607      	mov	r7, r0
  402fec:	2800      	cmp	r0, #0
  402fee:	d0bc      	beq.n	402f6a <setvbuf+0xa6>
  402ff0:	89a3      	ldrh	r3, [r4, #12]
  402ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402ff6:	81a3      	strh	r3, [r4, #12]
  402ff8:	464d      	mov	r5, r9
  402ffa:	e7d3      	b.n	402fa4 <setvbuf+0xe0>
  402ffc:	2000      	movs	r0, #0
  402ffe:	e7b6      	b.n	402f6e <setvbuf+0xaa>
  403000:	46a9      	mov	r9, r5
  403002:	e7f5      	b.n	402ff0 <setvbuf+0x12c>
  403004:	60a0      	str	r0, [r4, #8]
  403006:	e7be      	b.n	402f86 <setvbuf+0xc2>
  403008:	f04f 30ff 	mov.w	r0, #4294967295
  40300c:	e7bb      	b.n	402f86 <setvbuf+0xc2>
  40300e:	bf00      	nop
  403010:	20400048 	.word	0x20400048
  403014:	00405324 	.word	0x00405324
  403018:	00405344 	.word	0x00405344
  40301c:	00405304 	.word	0x00405304

00403020 <strlen>:
  403020:	4603      	mov	r3, r0
  403022:	f813 2b01 	ldrb.w	r2, [r3], #1
  403026:	2a00      	cmp	r2, #0
  403028:	d1fb      	bne.n	403022 <strlen+0x2>
  40302a:	1a18      	subs	r0, r3, r0
  40302c:	3801      	subs	r0, #1
  40302e:	4770      	bx	lr

00403030 <quorem>:
  403030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403034:	6903      	ldr	r3, [r0, #16]
  403036:	690c      	ldr	r4, [r1, #16]
  403038:	429c      	cmp	r4, r3
  40303a:	4680      	mov	r8, r0
  40303c:	f300 8082 	bgt.w	403144 <quorem+0x114>
  403040:	3c01      	subs	r4, #1
  403042:	f101 0714 	add.w	r7, r1, #20
  403046:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  40304a:	f100 0614 	add.w	r6, r0, #20
  40304e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  403052:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  403056:	eb06 030e 	add.w	r3, r6, lr
  40305a:	3501      	adds	r5, #1
  40305c:	eb07 090e 	add.w	r9, r7, lr
  403060:	9301      	str	r3, [sp, #4]
  403062:	fbb0 f5f5 	udiv	r5, r0, r5
  403066:	b395      	cbz	r5, 4030ce <quorem+0x9e>
  403068:	f04f 0a00 	mov.w	sl, #0
  40306c:	4638      	mov	r0, r7
  40306e:	46b4      	mov	ip, r6
  403070:	46d3      	mov	fp, sl
  403072:	f850 2b04 	ldr.w	r2, [r0], #4
  403076:	b293      	uxth	r3, r2
  403078:	fb05 a303 	mla	r3, r5, r3, sl
  40307c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  403080:	b29b      	uxth	r3, r3
  403082:	ebab 0303 	sub.w	r3, fp, r3
  403086:	0c12      	lsrs	r2, r2, #16
  403088:	f8bc b000 	ldrh.w	fp, [ip]
  40308c:	fb05 a202 	mla	r2, r5, r2, sl
  403090:	fa13 f38b 	uxtah	r3, r3, fp
  403094:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  403098:	fa1f fb82 	uxth.w	fp, r2
  40309c:	f8dc 2000 	ldr.w	r2, [ip]
  4030a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  4030a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4030a8:	b29b      	uxth	r3, r3
  4030aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4030ae:	4581      	cmp	r9, r0
  4030b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
  4030b4:	f84c 3b04 	str.w	r3, [ip], #4
  4030b8:	d2db      	bcs.n	403072 <quorem+0x42>
  4030ba:	f856 300e 	ldr.w	r3, [r6, lr]
  4030be:	b933      	cbnz	r3, 4030ce <quorem+0x9e>
  4030c0:	9b01      	ldr	r3, [sp, #4]
  4030c2:	3b04      	subs	r3, #4
  4030c4:	429e      	cmp	r6, r3
  4030c6:	461a      	mov	r2, r3
  4030c8:	d330      	bcc.n	40312c <quorem+0xfc>
  4030ca:	f8c8 4010 	str.w	r4, [r8, #16]
  4030ce:	4640      	mov	r0, r8
  4030d0:	f001 fa5f 	bl	404592 <__mcmp>
  4030d4:	2800      	cmp	r0, #0
  4030d6:	db25      	blt.n	403124 <quorem+0xf4>
  4030d8:	3501      	adds	r5, #1
  4030da:	4630      	mov	r0, r6
  4030dc:	f04f 0e00 	mov.w	lr, #0
  4030e0:	f857 2b04 	ldr.w	r2, [r7], #4
  4030e4:	f8d0 c000 	ldr.w	ip, [r0]
  4030e8:	b293      	uxth	r3, r2
  4030ea:	ebae 0303 	sub.w	r3, lr, r3
  4030ee:	0c12      	lsrs	r2, r2, #16
  4030f0:	fa13 f38c 	uxtah	r3, r3, ip
  4030f4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  4030f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4030fc:	b29b      	uxth	r3, r3
  4030fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403102:	45b9      	cmp	r9, r7
  403104:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403108:	f840 3b04 	str.w	r3, [r0], #4
  40310c:	d2e8      	bcs.n	4030e0 <quorem+0xb0>
  40310e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403112:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  403116:	b92a      	cbnz	r2, 403124 <quorem+0xf4>
  403118:	3b04      	subs	r3, #4
  40311a:	429e      	cmp	r6, r3
  40311c:	461a      	mov	r2, r3
  40311e:	d30b      	bcc.n	403138 <quorem+0x108>
  403120:	f8c8 4010 	str.w	r4, [r8, #16]
  403124:	4628      	mov	r0, r5
  403126:	b003      	add	sp, #12
  403128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40312c:	6812      	ldr	r2, [r2, #0]
  40312e:	3b04      	subs	r3, #4
  403130:	2a00      	cmp	r2, #0
  403132:	d1ca      	bne.n	4030ca <quorem+0x9a>
  403134:	3c01      	subs	r4, #1
  403136:	e7c5      	b.n	4030c4 <quorem+0x94>
  403138:	6812      	ldr	r2, [r2, #0]
  40313a:	3b04      	subs	r3, #4
  40313c:	2a00      	cmp	r2, #0
  40313e:	d1ef      	bne.n	403120 <quorem+0xf0>
  403140:	3c01      	subs	r4, #1
  403142:	e7ea      	b.n	40311a <quorem+0xea>
  403144:	2000      	movs	r0, #0
  403146:	e7ee      	b.n	403126 <quorem+0xf6>

00403148 <_dtoa_r>:
  403148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40314c:	6a46      	ldr	r6, [r0, #36]	; 0x24
  40314e:	b095      	sub	sp, #84	; 0x54
  403150:	4604      	mov	r4, r0
  403152:	9d21      	ldr	r5, [sp, #132]	; 0x84
  403154:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403158:	b93e      	cbnz	r6, 40316a <_dtoa_r+0x22>
  40315a:	2010      	movs	r0, #16
  40315c:	f000 ffb4 	bl	4040c8 <malloc>
  403160:	6260      	str	r0, [r4, #36]	; 0x24
  403162:	6046      	str	r6, [r0, #4]
  403164:	6086      	str	r6, [r0, #8]
  403166:	6006      	str	r6, [r0, #0]
  403168:	60c6      	str	r6, [r0, #12]
  40316a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40316c:	6819      	ldr	r1, [r3, #0]
  40316e:	b151      	cbz	r1, 403186 <_dtoa_r+0x3e>
  403170:	685a      	ldr	r2, [r3, #4]
  403172:	604a      	str	r2, [r1, #4]
  403174:	2301      	movs	r3, #1
  403176:	4093      	lsls	r3, r2
  403178:	608b      	str	r3, [r1, #8]
  40317a:	4620      	mov	r0, r4
  40317c:	f001 f834 	bl	4041e8 <_Bfree>
  403180:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403182:	2200      	movs	r2, #0
  403184:	601a      	str	r2, [r3, #0]
  403186:	9b03      	ldr	r3, [sp, #12]
  403188:	2b00      	cmp	r3, #0
  40318a:	bfbf      	itttt	lt
  40318c:	2301      	movlt	r3, #1
  40318e:	602b      	strlt	r3, [r5, #0]
  403190:	9b03      	ldrlt	r3, [sp, #12]
  403192:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  403196:	bfb2      	itee	lt
  403198:	9303      	strlt	r3, [sp, #12]
  40319a:	2300      	movge	r3, #0
  40319c:	602b      	strge	r3, [r5, #0]
  40319e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4031a2:	4ba9      	ldr	r3, [pc, #676]	; (403448 <_dtoa_r+0x300>)
  4031a4:	ea33 0309 	bics.w	r3, r3, r9
  4031a8:	d11b      	bne.n	4031e2 <_dtoa_r+0x9a>
  4031aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4031ac:	f242 730f 	movw	r3, #9999	; 0x270f
  4031b0:	6013      	str	r3, [r2, #0]
  4031b2:	9b02      	ldr	r3, [sp, #8]
  4031b4:	b923      	cbnz	r3, 4031c0 <_dtoa_r+0x78>
  4031b6:	f3c9 0013 	ubfx	r0, r9, #0, #20
  4031ba:	2800      	cmp	r0, #0
  4031bc:	f000 8581 	beq.w	403cc2 <_dtoa_r+0xb7a>
  4031c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4031c2:	b953      	cbnz	r3, 4031da <_dtoa_r+0x92>
  4031c4:	4ba1      	ldr	r3, [pc, #644]	; (40344c <_dtoa_r+0x304>)
  4031c6:	e021      	b.n	40320c <_dtoa_r+0xc4>
  4031c8:	4ba1      	ldr	r3, [pc, #644]	; (403450 <_dtoa_r+0x308>)
  4031ca:	9306      	str	r3, [sp, #24]
  4031cc:	3308      	adds	r3, #8
  4031ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4031d0:	6013      	str	r3, [r2, #0]
  4031d2:	9806      	ldr	r0, [sp, #24]
  4031d4:	b015      	add	sp, #84	; 0x54
  4031d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031da:	4b9c      	ldr	r3, [pc, #624]	; (40344c <_dtoa_r+0x304>)
  4031dc:	9306      	str	r3, [sp, #24]
  4031de:	3303      	adds	r3, #3
  4031e0:	e7f5      	b.n	4031ce <_dtoa_r+0x86>
  4031e2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4031e6:	2200      	movs	r2, #0
  4031e8:	2300      	movs	r3, #0
  4031ea:	4630      	mov	r0, r6
  4031ec:	4639      	mov	r1, r7
  4031ee:	f7ff f959 	bl	4024a4 <__aeabi_dcmpeq>
  4031f2:	4680      	mov	r8, r0
  4031f4:	b160      	cbz	r0, 403210 <_dtoa_r+0xc8>
  4031f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4031f8:	2301      	movs	r3, #1
  4031fa:	6013      	str	r3, [r2, #0]
  4031fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4031fe:	2b00      	cmp	r3, #0
  403200:	f000 855c 	beq.w	403cbc <_dtoa_r+0xb74>
  403204:	4b93      	ldr	r3, [pc, #588]	; (403454 <_dtoa_r+0x30c>)
  403206:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403208:	6013      	str	r3, [r2, #0]
  40320a:	3b01      	subs	r3, #1
  40320c:	9306      	str	r3, [sp, #24]
  40320e:	e7e0      	b.n	4031d2 <_dtoa_r+0x8a>
  403210:	ab12      	add	r3, sp, #72	; 0x48
  403212:	9301      	str	r3, [sp, #4]
  403214:	ab13      	add	r3, sp, #76	; 0x4c
  403216:	9300      	str	r3, [sp, #0]
  403218:	4632      	mov	r2, r6
  40321a:	463b      	mov	r3, r7
  40321c:	4620      	mov	r0, r4
  40321e:	f001 fa30 	bl	404682 <__d2b>
  403222:	f3c9 550a 	ubfx	r5, r9, #20, #11
  403226:	4682      	mov	sl, r0
  403228:	2d00      	cmp	r5, #0
  40322a:	d07c      	beq.n	403326 <_dtoa_r+0x1de>
  40322c:	f3c7 0313 	ubfx	r3, r7, #0, #20
  403230:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  403234:	4630      	mov	r0, r6
  403236:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40323a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40323e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  403242:	2200      	movs	r2, #0
  403244:	4b84      	ldr	r3, [pc, #528]	; (403458 <_dtoa_r+0x310>)
  403246:	f7fe fd11 	bl	401c6c <__aeabi_dsub>
  40324a:	a379      	add	r3, pc, #484	; (adr r3, 403430 <_dtoa_r+0x2e8>)
  40324c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403250:	f7fe fec0 	bl	401fd4 <__aeabi_dmul>
  403254:	a378      	add	r3, pc, #480	; (adr r3, 403438 <_dtoa_r+0x2f0>)
  403256:	e9d3 2300 	ldrd	r2, r3, [r3]
  40325a:	f7fe fd09 	bl	401c70 <__adddf3>
  40325e:	4606      	mov	r6, r0
  403260:	4628      	mov	r0, r5
  403262:	460f      	mov	r7, r1
  403264:	f7fe fe50 	bl	401f08 <__aeabi_i2d>
  403268:	a375      	add	r3, pc, #468	; (adr r3, 403440 <_dtoa_r+0x2f8>)
  40326a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40326e:	f7fe feb1 	bl	401fd4 <__aeabi_dmul>
  403272:	4602      	mov	r2, r0
  403274:	460b      	mov	r3, r1
  403276:	4630      	mov	r0, r6
  403278:	4639      	mov	r1, r7
  40327a:	f7fe fcf9 	bl	401c70 <__adddf3>
  40327e:	4606      	mov	r6, r0
  403280:	460f      	mov	r7, r1
  403282:	f7ff f941 	bl	402508 <__aeabi_d2iz>
  403286:	2200      	movs	r2, #0
  403288:	4683      	mov	fp, r0
  40328a:	2300      	movs	r3, #0
  40328c:	4630      	mov	r0, r6
  40328e:	4639      	mov	r1, r7
  403290:	f7ff f912 	bl	4024b8 <__aeabi_dcmplt>
  403294:	b158      	cbz	r0, 4032ae <_dtoa_r+0x166>
  403296:	4658      	mov	r0, fp
  403298:	f7fe fe36 	bl	401f08 <__aeabi_i2d>
  40329c:	4602      	mov	r2, r0
  40329e:	460b      	mov	r3, r1
  4032a0:	4630      	mov	r0, r6
  4032a2:	4639      	mov	r1, r7
  4032a4:	f7ff f8fe 	bl	4024a4 <__aeabi_dcmpeq>
  4032a8:	b908      	cbnz	r0, 4032ae <_dtoa_r+0x166>
  4032aa:	f10b 3bff 	add.w	fp, fp, #4294967295
  4032ae:	f1bb 0f16 	cmp.w	fp, #22
  4032b2:	d857      	bhi.n	403364 <_dtoa_r+0x21c>
  4032b4:	4969      	ldr	r1, [pc, #420]	; (40345c <_dtoa_r+0x314>)
  4032b6:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  4032ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4032be:	e9d1 0100 	ldrd	r0, r1, [r1]
  4032c2:	f7ff f917 	bl	4024f4 <__aeabi_dcmpgt>
  4032c6:	2800      	cmp	r0, #0
  4032c8:	d04e      	beq.n	403368 <_dtoa_r+0x220>
  4032ca:	f10b 3bff 	add.w	fp, fp, #4294967295
  4032ce:	2300      	movs	r3, #0
  4032d0:	930d      	str	r3, [sp, #52]	; 0x34
  4032d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4032d4:	1b5d      	subs	r5, r3, r5
  4032d6:	1e6b      	subs	r3, r5, #1
  4032d8:	9307      	str	r3, [sp, #28]
  4032da:	bf43      	ittte	mi
  4032dc:	2300      	movmi	r3, #0
  4032de:	f1c5 0801 	rsbmi	r8, r5, #1
  4032e2:	9307      	strmi	r3, [sp, #28]
  4032e4:	f04f 0800 	movpl.w	r8, #0
  4032e8:	f1bb 0f00 	cmp.w	fp, #0
  4032ec:	db3e      	blt.n	40336c <_dtoa_r+0x224>
  4032ee:	9b07      	ldr	r3, [sp, #28]
  4032f0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  4032f4:	445b      	add	r3, fp
  4032f6:	9307      	str	r3, [sp, #28]
  4032f8:	2300      	movs	r3, #0
  4032fa:	9308      	str	r3, [sp, #32]
  4032fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4032fe:	2b09      	cmp	r3, #9
  403300:	f200 80b0 	bhi.w	403464 <_dtoa_r+0x31c>
  403304:	2b05      	cmp	r3, #5
  403306:	bfc4      	itt	gt
  403308:	3b04      	subgt	r3, #4
  40330a:	931e      	strgt	r3, [sp, #120]	; 0x78
  40330c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40330e:	f1a3 0302 	sub.w	r3, r3, #2
  403312:	bfcc      	ite	gt
  403314:	2600      	movgt	r6, #0
  403316:	2601      	movle	r6, #1
  403318:	2b03      	cmp	r3, #3
  40331a:	f200 80af 	bhi.w	40347c <_dtoa_r+0x334>
  40331e:	e8df f003 	tbb	[pc, r3]
  403322:	8583      	.short	0x8583
  403324:	772d      	.short	0x772d
  403326:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403328:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40332a:	441d      	add	r5, r3
  40332c:	f205 4332 	addw	r3, r5, #1074	; 0x432
  403330:	2b20      	cmp	r3, #32
  403332:	dd11      	ble.n	403358 <_dtoa_r+0x210>
  403334:	9a02      	ldr	r2, [sp, #8]
  403336:	f205 4012 	addw	r0, r5, #1042	; 0x412
  40333a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40333e:	fa22 f000 	lsr.w	r0, r2, r0
  403342:	fa09 f303 	lsl.w	r3, r9, r3
  403346:	4318      	orrs	r0, r3
  403348:	f7fe fdce 	bl	401ee8 <__aeabi_ui2d>
  40334c:	2301      	movs	r3, #1
  40334e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403352:	3d01      	subs	r5, #1
  403354:	9310      	str	r3, [sp, #64]	; 0x40
  403356:	e774      	b.n	403242 <_dtoa_r+0xfa>
  403358:	f1c3 0020 	rsb	r0, r3, #32
  40335c:	9b02      	ldr	r3, [sp, #8]
  40335e:	fa03 f000 	lsl.w	r0, r3, r0
  403362:	e7f1      	b.n	403348 <_dtoa_r+0x200>
  403364:	2301      	movs	r3, #1
  403366:	e7b3      	b.n	4032d0 <_dtoa_r+0x188>
  403368:	900d      	str	r0, [sp, #52]	; 0x34
  40336a:	e7b2      	b.n	4032d2 <_dtoa_r+0x18a>
  40336c:	f1cb 0300 	rsb	r3, fp, #0
  403370:	9308      	str	r3, [sp, #32]
  403372:	2300      	movs	r3, #0
  403374:	eba8 080b 	sub.w	r8, r8, fp
  403378:	930c      	str	r3, [sp, #48]	; 0x30
  40337a:	e7bf      	b.n	4032fc <_dtoa_r+0x1b4>
  40337c:	2301      	movs	r3, #1
  40337e:	9309      	str	r3, [sp, #36]	; 0x24
  403380:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403382:	2b00      	cmp	r3, #0
  403384:	dd7d      	ble.n	403482 <_dtoa_r+0x33a>
  403386:	9304      	str	r3, [sp, #16]
  403388:	4699      	mov	r9, r3
  40338a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40338c:	2200      	movs	r2, #0
  40338e:	606a      	str	r2, [r5, #4]
  403390:	2104      	movs	r1, #4
  403392:	f101 0214 	add.w	r2, r1, #20
  403396:	429a      	cmp	r2, r3
  403398:	d978      	bls.n	40348c <_dtoa_r+0x344>
  40339a:	6869      	ldr	r1, [r5, #4]
  40339c:	4620      	mov	r0, r4
  40339e:	f000 feef 	bl	404180 <_Balloc>
  4033a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4033a4:	6028      	str	r0, [r5, #0]
  4033a6:	681b      	ldr	r3, [r3, #0]
  4033a8:	9306      	str	r3, [sp, #24]
  4033aa:	f1b9 0f0e 	cmp.w	r9, #14
  4033ae:	f200 80ee 	bhi.w	40358e <_dtoa_r+0x446>
  4033b2:	2e00      	cmp	r6, #0
  4033b4:	f000 80eb 	beq.w	40358e <_dtoa_r+0x446>
  4033b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4033bc:	f1bb 0f00 	cmp.w	fp, #0
  4033c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  4033c4:	dd77      	ble.n	4034b6 <_dtoa_r+0x36e>
  4033c6:	4a25      	ldr	r2, [pc, #148]	; (40345c <_dtoa_r+0x314>)
  4033c8:	f00b 030f 	and.w	r3, fp, #15
  4033cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4033d4:	ea4f 162b 	mov.w	r6, fp, asr #4
  4033d8:	06f0      	lsls	r0, r6, #27
  4033da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  4033de:	d55a      	bpl.n	403496 <_dtoa_r+0x34e>
  4033e0:	4b1f      	ldr	r3, [pc, #124]	; (403460 <_dtoa_r+0x318>)
  4033e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4033e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4033ea:	f7fe ff1d 	bl	402228 <__aeabi_ddiv>
  4033ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4033f2:	f006 060f 	and.w	r6, r6, #15
  4033f6:	2503      	movs	r5, #3
  4033f8:	4f19      	ldr	r7, [pc, #100]	; (403460 <_dtoa_r+0x318>)
  4033fa:	2e00      	cmp	r6, #0
  4033fc:	d14d      	bne.n	40349a <_dtoa_r+0x352>
  4033fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403406:	f7fe ff0f 	bl	402228 <__aeabi_ddiv>
  40340a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40340e:	e06c      	b.n	4034ea <_dtoa_r+0x3a2>
  403410:	2301      	movs	r3, #1
  403412:	9309      	str	r3, [sp, #36]	; 0x24
  403414:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403416:	445b      	add	r3, fp
  403418:	f103 0901 	add.w	r9, r3, #1
  40341c:	9304      	str	r3, [sp, #16]
  40341e:	464b      	mov	r3, r9
  403420:	2b01      	cmp	r3, #1
  403422:	bfb8      	it	lt
  403424:	2301      	movlt	r3, #1
  403426:	e7b0      	b.n	40338a <_dtoa_r+0x242>
  403428:	2300      	movs	r3, #0
  40342a:	e7a8      	b.n	40337e <_dtoa_r+0x236>
  40342c:	2300      	movs	r3, #0
  40342e:	e7f0      	b.n	403412 <_dtoa_r+0x2ca>
  403430:	636f4361 	.word	0x636f4361
  403434:	3fd287a7 	.word	0x3fd287a7
  403438:	8b60c8b3 	.word	0x8b60c8b3
  40343c:	3fc68a28 	.word	0x3fc68a28
  403440:	509f79fb 	.word	0x509f79fb
  403444:	3fd34413 	.word	0x3fd34413
  403448:	7ff00000 	.word	0x7ff00000
  40344c:	004052fd 	.word	0x004052fd
  403450:	004052f4 	.word	0x004052f4
  403454:	004052d1 	.word	0x004052d1
  403458:	3ff80000 	.word	0x3ff80000
  40345c:	00405390 	.word	0x00405390
  403460:	00405368 	.word	0x00405368
  403464:	2601      	movs	r6, #1
  403466:	2300      	movs	r3, #0
  403468:	931e      	str	r3, [sp, #120]	; 0x78
  40346a:	9609      	str	r6, [sp, #36]	; 0x24
  40346c:	f04f 33ff 	mov.w	r3, #4294967295
  403470:	9304      	str	r3, [sp, #16]
  403472:	4699      	mov	r9, r3
  403474:	2200      	movs	r2, #0
  403476:	2312      	movs	r3, #18
  403478:	921f      	str	r2, [sp, #124]	; 0x7c
  40347a:	e786      	b.n	40338a <_dtoa_r+0x242>
  40347c:	2301      	movs	r3, #1
  40347e:	9309      	str	r3, [sp, #36]	; 0x24
  403480:	e7f4      	b.n	40346c <_dtoa_r+0x324>
  403482:	2301      	movs	r3, #1
  403484:	9304      	str	r3, [sp, #16]
  403486:	4699      	mov	r9, r3
  403488:	461a      	mov	r2, r3
  40348a:	e7f5      	b.n	403478 <_dtoa_r+0x330>
  40348c:	686a      	ldr	r2, [r5, #4]
  40348e:	3201      	adds	r2, #1
  403490:	606a      	str	r2, [r5, #4]
  403492:	0049      	lsls	r1, r1, #1
  403494:	e77d      	b.n	403392 <_dtoa_r+0x24a>
  403496:	2502      	movs	r5, #2
  403498:	e7ae      	b.n	4033f8 <_dtoa_r+0x2b0>
  40349a:	07f1      	lsls	r1, r6, #31
  40349c:	d508      	bpl.n	4034b0 <_dtoa_r+0x368>
  40349e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4034a2:	e9d7 2300 	ldrd	r2, r3, [r7]
  4034a6:	f7fe fd95 	bl	401fd4 <__aeabi_dmul>
  4034aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4034ae:	3501      	adds	r5, #1
  4034b0:	1076      	asrs	r6, r6, #1
  4034b2:	3708      	adds	r7, #8
  4034b4:	e7a1      	b.n	4033fa <_dtoa_r+0x2b2>
  4034b6:	f000 80a5 	beq.w	403604 <_dtoa_r+0x4bc>
  4034ba:	f1cb 0600 	rsb	r6, fp, #0
  4034be:	4ba3      	ldr	r3, [pc, #652]	; (40374c <_dtoa_r+0x604>)
  4034c0:	4fa3      	ldr	r7, [pc, #652]	; (403750 <_dtoa_r+0x608>)
  4034c2:	f006 020f 	and.w	r2, r6, #15
  4034c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4034ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4034d2:	f7fe fd7f 	bl	401fd4 <__aeabi_dmul>
  4034d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4034da:	1136      	asrs	r6, r6, #4
  4034dc:	2300      	movs	r3, #0
  4034de:	2502      	movs	r5, #2
  4034e0:	2e00      	cmp	r6, #0
  4034e2:	f040 8084 	bne.w	4035ee <_dtoa_r+0x4a6>
  4034e6:	2b00      	cmp	r3, #0
  4034e8:	d18f      	bne.n	40340a <_dtoa_r+0x2c2>
  4034ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4034ec:	2b00      	cmp	r3, #0
  4034ee:	f000 808b 	beq.w	403608 <_dtoa_r+0x4c0>
  4034f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4034f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  4034fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4034fe:	2200      	movs	r2, #0
  403500:	4b94      	ldr	r3, [pc, #592]	; (403754 <_dtoa_r+0x60c>)
  403502:	f7fe ffd9 	bl	4024b8 <__aeabi_dcmplt>
  403506:	2800      	cmp	r0, #0
  403508:	d07e      	beq.n	403608 <_dtoa_r+0x4c0>
  40350a:	f1b9 0f00 	cmp.w	r9, #0
  40350e:	d07b      	beq.n	403608 <_dtoa_r+0x4c0>
  403510:	9b04      	ldr	r3, [sp, #16]
  403512:	2b00      	cmp	r3, #0
  403514:	dd37      	ble.n	403586 <_dtoa_r+0x43e>
  403516:	2200      	movs	r2, #0
  403518:	4b8f      	ldr	r3, [pc, #572]	; (403758 <_dtoa_r+0x610>)
  40351a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40351e:	f7fe fd59 	bl	401fd4 <__aeabi_dmul>
  403522:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403526:	9e04      	ldr	r6, [sp, #16]
  403528:	f10b 37ff 	add.w	r7, fp, #4294967295
  40352c:	3501      	adds	r5, #1
  40352e:	4628      	mov	r0, r5
  403530:	f7fe fcea 	bl	401f08 <__aeabi_i2d>
  403534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403538:	f7fe fd4c 	bl	401fd4 <__aeabi_dmul>
  40353c:	4b87      	ldr	r3, [pc, #540]	; (40375c <_dtoa_r+0x614>)
  40353e:	2200      	movs	r2, #0
  403540:	f7fe fb96 	bl	401c70 <__adddf3>
  403544:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40354a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  40354e:	950b      	str	r5, [sp, #44]	; 0x2c
  403550:	2e00      	cmp	r6, #0
  403552:	d15c      	bne.n	40360e <_dtoa_r+0x4c6>
  403554:	2200      	movs	r2, #0
  403556:	4b82      	ldr	r3, [pc, #520]	; (403760 <_dtoa_r+0x618>)
  403558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40355c:	f7fe fb86 	bl	401c6c <__aeabi_dsub>
  403560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403562:	462b      	mov	r3, r5
  403564:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403568:	f7fe ffc4 	bl	4024f4 <__aeabi_dcmpgt>
  40356c:	2800      	cmp	r0, #0
  40356e:	f040 82f7 	bne.w	403b60 <_dtoa_r+0xa18>
  403572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403574:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  403578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40357c:	f7fe ff9c 	bl	4024b8 <__aeabi_dcmplt>
  403580:	2800      	cmp	r0, #0
  403582:	f040 82eb 	bne.w	403b5c <_dtoa_r+0xa14>
  403586:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40358a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40358e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403590:	2b00      	cmp	r3, #0
  403592:	f2c0 8151 	blt.w	403838 <_dtoa_r+0x6f0>
  403596:	f1bb 0f0e 	cmp.w	fp, #14
  40359a:	f300 814d 	bgt.w	403838 <_dtoa_r+0x6f0>
  40359e:	4b6b      	ldr	r3, [pc, #428]	; (40374c <_dtoa_r+0x604>)
  4035a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  4035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4035a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  4035ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4035ae:	2b00      	cmp	r3, #0
  4035b0:	f280 80da 	bge.w	403768 <_dtoa_r+0x620>
  4035b4:	f1b9 0f00 	cmp.w	r9, #0
  4035b8:	f300 80d6 	bgt.w	403768 <_dtoa_r+0x620>
  4035bc:	f040 82cd 	bne.w	403b5a <_dtoa_r+0xa12>
  4035c0:	2200      	movs	r2, #0
  4035c2:	4b67      	ldr	r3, [pc, #412]	; (403760 <_dtoa_r+0x618>)
  4035c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4035c8:	f7fe fd04 	bl	401fd4 <__aeabi_dmul>
  4035cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4035d0:	f7fe ff86 	bl	4024e0 <__aeabi_dcmpge>
  4035d4:	464e      	mov	r6, r9
  4035d6:	464f      	mov	r7, r9
  4035d8:	2800      	cmp	r0, #0
  4035da:	f040 82a4 	bne.w	403b26 <_dtoa_r+0x9de>
  4035de:	9b06      	ldr	r3, [sp, #24]
  4035e0:	9a06      	ldr	r2, [sp, #24]
  4035e2:	1c5d      	adds	r5, r3, #1
  4035e4:	2331      	movs	r3, #49	; 0x31
  4035e6:	7013      	strb	r3, [r2, #0]
  4035e8:	f10b 0b01 	add.w	fp, fp, #1
  4035ec:	e29f      	b.n	403b2e <_dtoa_r+0x9e6>
  4035ee:	07f2      	lsls	r2, r6, #31
  4035f0:	d505      	bpl.n	4035fe <_dtoa_r+0x4b6>
  4035f2:	e9d7 2300 	ldrd	r2, r3, [r7]
  4035f6:	f7fe fced 	bl	401fd4 <__aeabi_dmul>
  4035fa:	3501      	adds	r5, #1
  4035fc:	2301      	movs	r3, #1
  4035fe:	1076      	asrs	r6, r6, #1
  403600:	3708      	adds	r7, #8
  403602:	e76d      	b.n	4034e0 <_dtoa_r+0x398>
  403604:	2502      	movs	r5, #2
  403606:	e770      	b.n	4034ea <_dtoa_r+0x3a2>
  403608:	465f      	mov	r7, fp
  40360a:	464e      	mov	r6, r9
  40360c:	e78f      	b.n	40352e <_dtoa_r+0x3e6>
  40360e:	9a06      	ldr	r2, [sp, #24]
  403610:	4b4e      	ldr	r3, [pc, #312]	; (40374c <_dtoa_r+0x604>)
  403612:	4432      	add	r2, r6
  403614:	9211      	str	r2, [sp, #68]	; 0x44
  403616:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403618:	1e71      	subs	r1, r6, #1
  40361a:	2a00      	cmp	r2, #0
  40361c:	d048      	beq.n	4036b0 <_dtoa_r+0x568>
  40361e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  403622:	e9d3 2300 	ldrd	r2, r3, [r3]
  403626:	2000      	movs	r0, #0
  403628:	494e      	ldr	r1, [pc, #312]	; (403764 <_dtoa_r+0x61c>)
  40362a:	f7fe fdfd 	bl	402228 <__aeabi_ddiv>
  40362e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403632:	f7fe fb1b 	bl	401c6c <__aeabi_dsub>
  403636:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40363a:	9d06      	ldr	r5, [sp, #24]
  40363c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403640:	f7fe ff62 	bl	402508 <__aeabi_d2iz>
  403644:	4606      	mov	r6, r0
  403646:	f7fe fc5f 	bl	401f08 <__aeabi_i2d>
  40364a:	4602      	mov	r2, r0
  40364c:	460b      	mov	r3, r1
  40364e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403652:	f7fe fb0b 	bl	401c6c <__aeabi_dsub>
  403656:	3630      	adds	r6, #48	; 0x30
  403658:	f805 6b01 	strb.w	r6, [r5], #1
  40365c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403660:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403664:	f7fe ff28 	bl	4024b8 <__aeabi_dcmplt>
  403668:	2800      	cmp	r0, #0
  40366a:	d165      	bne.n	403738 <_dtoa_r+0x5f0>
  40366c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403670:	2000      	movs	r0, #0
  403672:	4938      	ldr	r1, [pc, #224]	; (403754 <_dtoa_r+0x60c>)
  403674:	f7fe fafa 	bl	401c6c <__aeabi_dsub>
  403678:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40367c:	f7fe ff1c 	bl	4024b8 <__aeabi_dcmplt>
  403680:	2800      	cmp	r0, #0
  403682:	f040 80b9 	bne.w	4037f8 <_dtoa_r+0x6b0>
  403686:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403688:	429d      	cmp	r5, r3
  40368a:	f43f af7c 	beq.w	403586 <_dtoa_r+0x43e>
  40368e:	2200      	movs	r2, #0
  403690:	4b31      	ldr	r3, [pc, #196]	; (403758 <_dtoa_r+0x610>)
  403692:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403696:	f7fe fc9d 	bl	401fd4 <__aeabi_dmul>
  40369a:	2200      	movs	r2, #0
  40369c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4036a0:	4b2d      	ldr	r3, [pc, #180]	; (403758 <_dtoa_r+0x610>)
  4036a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4036a6:	f7fe fc95 	bl	401fd4 <__aeabi_dmul>
  4036aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4036ae:	e7c5      	b.n	40363c <_dtoa_r+0x4f4>
  4036b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4036b4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4036b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4036bc:	f7fe fc8a 	bl	401fd4 <__aeabi_dmul>
  4036c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4036c4:	9d06      	ldr	r5, [sp, #24]
  4036c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4036ca:	f7fe ff1d 	bl	402508 <__aeabi_d2iz>
  4036ce:	4606      	mov	r6, r0
  4036d0:	f7fe fc1a 	bl	401f08 <__aeabi_i2d>
  4036d4:	3630      	adds	r6, #48	; 0x30
  4036d6:	4602      	mov	r2, r0
  4036d8:	460b      	mov	r3, r1
  4036da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4036de:	f7fe fac5 	bl	401c6c <__aeabi_dsub>
  4036e2:	f805 6b01 	strb.w	r6, [r5], #1
  4036e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4036e8:	42ab      	cmp	r3, r5
  4036ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4036ee:	f04f 0200 	mov.w	r2, #0
  4036f2:	d125      	bne.n	403740 <_dtoa_r+0x5f8>
  4036f4:	4b1b      	ldr	r3, [pc, #108]	; (403764 <_dtoa_r+0x61c>)
  4036f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4036fa:	f7fe fab9 	bl	401c70 <__adddf3>
  4036fe:	4602      	mov	r2, r0
  403700:	460b      	mov	r3, r1
  403702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403706:	f7fe fef5 	bl	4024f4 <__aeabi_dcmpgt>
  40370a:	2800      	cmp	r0, #0
  40370c:	d174      	bne.n	4037f8 <_dtoa_r+0x6b0>
  40370e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403712:	2000      	movs	r0, #0
  403714:	4913      	ldr	r1, [pc, #76]	; (403764 <_dtoa_r+0x61c>)
  403716:	f7fe faa9 	bl	401c6c <__aeabi_dsub>
  40371a:	4602      	mov	r2, r0
  40371c:	460b      	mov	r3, r1
  40371e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403722:	f7fe fec9 	bl	4024b8 <__aeabi_dcmplt>
  403726:	2800      	cmp	r0, #0
  403728:	f43f af2d 	beq.w	403586 <_dtoa_r+0x43e>
  40372c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  403730:	2b30      	cmp	r3, #48	; 0x30
  403732:	f105 32ff 	add.w	r2, r5, #4294967295
  403736:	d001      	beq.n	40373c <_dtoa_r+0x5f4>
  403738:	46bb      	mov	fp, r7
  40373a:	e04c      	b.n	4037d6 <_dtoa_r+0x68e>
  40373c:	4615      	mov	r5, r2
  40373e:	e7f5      	b.n	40372c <_dtoa_r+0x5e4>
  403740:	4b05      	ldr	r3, [pc, #20]	; (403758 <_dtoa_r+0x610>)
  403742:	f7fe fc47 	bl	401fd4 <__aeabi_dmul>
  403746:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40374a:	e7bc      	b.n	4036c6 <_dtoa_r+0x57e>
  40374c:	00405390 	.word	0x00405390
  403750:	00405368 	.word	0x00405368
  403754:	3ff00000 	.word	0x3ff00000
  403758:	40240000 	.word	0x40240000
  40375c:	401c0000 	.word	0x401c0000
  403760:	40140000 	.word	0x40140000
  403764:	3fe00000 	.word	0x3fe00000
  403768:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40376c:	9d06      	ldr	r5, [sp, #24]
  40376e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403772:	4630      	mov	r0, r6
  403774:	4639      	mov	r1, r7
  403776:	f7fe fd57 	bl	402228 <__aeabi_ddiv>
  40377a:	f7fe fec5 	bl	402508 <__aeabi_d2iz>
  40377e:	4680      	mov	r8, r0
  403780:	f7fe fbc2 	bl	401f08 <__aeabi_i2d>
  403784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403788:	f7fe fc24 	bl	401fd4 <__aeabi_dmul>
  40378c:	4602      	mov	r2, r0
  40378e:	460b      	mov	r3, r1
  403790:	4630      	mov	r0, r6
  403792:	4639      	mov	r1, r7
  403794:	f108 0630 	add.w	r6, r8, #48	; 0x30
  403798:	f7fe fa68 	bl	401c6c <__aeabi_dsub>
  40379c:	f805 6b01 	strb.w	r6, [r5], #1
  4037a0:	9e06      	ldr	r6, [sp, #24]
  4037a2:	1bae      	subs	r6, r5, r6
  4037a4:	45b1      	cmp	r9, r6
  4037a6:	4602      	mov	r2, r0
  4037a8:	460b      	mov	r3, r1
  4037aa:	d138      	bne.n	40381e <_dtoa_r+0x6d6>
  4037ac:	f7fe fa60 	bl	401c70 <__adddf3>
  4037b0:	4606      	mov	r6, r0
  4037b2:	460f      	mov	r7, r1
  4037b4:	4602      	mov	r2, r0
  4037b6:	460b      	mov	r3, r1
  4037b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4037bc:	f7fe fe7c 	bl	4024b8 <__aeabi_dcmplt>
  4037c0:	b9c8      	cbnz	r0, 4037f6 <_dtoa_r+0x6ae>
  4037c2:	4632      	mov	r2, r6
  4037c4:	463b      	mov	r3, r7
  4037c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4037ca:	f7fe fe6b 	bl	4024a4 <__aeabi_dcmpeq>
  4037ce:	b110      	cbz	r0, 4037d6 <_dtoa_r+0x68e>
  4037d0:	f018 0f01 	tst.w	r8, #1
  4037d4:	d10f      	bne.n	4037f6 <_dtoa_r+0x6ae>
  4037d6:	4651      	mov	r1, sl
  4037d8:	4620      	mov	r0, r4
  4037da:	f000 fd05 	bl	4041e8 <_Bfree>
  4037de:	2300      	movs	r3, #0
  4037e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4037e2:	702b      	strb	r3, [r5, #0]
  4037e4:	f10b 0301 	add.w	r3, fp, #1
  4037e8:	6013      	str	r3, [r2, #0]
  4037ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4037ec:	2b00      	cmp	r3, #0
  4037ee:	f43f acf0 	beq.w	4031d2 <_dtoa_r+0x8a>
  4037f2:	601d      	str	r5, [r3, #0]
  4037f4:	e4ed      	b.n	4031d2 <_dtoa_r+0x8a>
  4037f6:	465f      	mov	r7, fp
  4037f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4037fc:	2a39      	cmp	r2, #57	; 0x39
  4037fe:	f105 33ff 	add.w	r3, r5, #4294967295
  403802:	d106      	bne.n	403812 <_dtoa_r+0x6ca>
  403804:	9a06      	ldr	r2, [sp, #24]
  403806:	429a      	cmp	r2, r3
  403808:	d107      	bne.n	40381a <_dtoa_r+0x6d2>
  40380a:	2330      	movs	r3, #48	; 0x30
  40380c:	7013      	strb	r3, [r2, #0]
  40380e:	3701      	adds	r7, #1
  403810:	4613      	mov	r3, r2
  403812:	781a      	ldrb	r2, [r3, #0]
  403814:	3201      	adds	r2, #1
  403816:	701a      	strb	r2, [r3, #0]
  403818:	e78e      	b.n	403738 <_dtoa_r+0x5f0>
  40381a:	461d      	mov	r5, r3
  40381c:	e7ec      	b.n	4037f8 <_dtoa_r+0x6b0>
  40381e:	2200      	movs	r2, #0
  403820:	4bb4      	ldr	r3, [pc, #720]	; (403af4 <_dtoa_r+0x9ac>)
  403822:	f7fe fbd7 	bl	401fd4 <__aeabi_dmul>
  403826:	2200      	movs	r2, #0
  403828:	2300      	movs	r3, #0
  40382a:	4606      	mov	r6, r0
  40382c:	460f      	mov	r7, r1
  40382e:	f7fe fe39 	bl	4024a4 <__aeabi_dcmpeq>
  403832:	2800      	cmp	r0, #0
  403834:	d09b      	beq.n	40376e <_dtoa_r+0x626>
  403836:	e7ce      	b.n	4037d6 <_dtoa_r+0x68e>
  403838:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40383a:	2a00      	cmp	r2, #0
  40383c:	f000 8129 	beq.w	403a92 <_dtoa_r+0x94a>
  403840:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403842:	2a01      	cmp	r2, #1
  403844:	f300 810e 	bgt.w	403a64 <_dtoa_r+0x91c>
  403848:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40384a:	2a00      	cmp	r2, #0
  40384c:	f000 8106 	beq.w	403a5c <_dtoa_r+0x914>
  403850:	f203 4333 	addw	r3, r3, #1075	; 0x433
  403854:	9e08      	ldr	r6, [sp, #32]
  403856:	4645      	mov	r5, r8
  403858:	9a07      	ldr	r2, [sp, #28]
  40385a:	2101      	movs	r1, #1
  40385c:	441a      	add	r2, r3
  40385e:	4620      	mov	r0, r4
  403860:	4498      	add	r8, r3
  403862:	9207      	str	r2, [sp, #28]
  403864:	f000 fd60 	bl	404328 <__i2b>
  403868:	4607      	mov	r7, r0
  40386a:	2d00      	cmp	r5, #0
  40386c:	dd0b      	ble.n	403886 <_dtoa_r+0x73e>
  40386e:	9b07      	ldr	r3, [sp, #28]
  403870:	2b00      	cmp	r3, #0
  403872:	dd08      	ble.n	403886 <_dtoa_r+0x73e>
  403874:	42ab      	cmp	r3, r5
  403876:	9a07      	ldr	r2, [sp, #28]
  403878:	bfa8      	it	ge
  40387a:	462b      	movge	r3, r5
  40387c:	eba8 0803 	sub.w	r8, r8, r3
  403880:	1aed      	subs	r5, r5, r3
  403882:	1ad3      	subs	r3, r2, r3
  403884:	9307      	str	r3, [sp, #28]
  403886:	9b08      	ldr	r3, [sp, #32]
  403888:	b1fb      	cbz	r3, 4038ca <_dtoa_r+0x782>
  40388a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40388c:	2b00      	cmp	r3, #0
  40388e:	f000 8104 	beq.w	403a9a <_dtoa_r+0x952>
  403892:	2e00      	cmp	r6, #0
  403894:	dd11      	ble.n	4038ba <_dtoa_r+0x772>
  403896:	4639      	mov	r1, r7
  403898:	4632      	mov	r2, r6
  40389a:	4620      	mov	r0, r4
  40389c:	f000 fdda 	bl	404454 <__pow5mult>
  4038a0:	4652      	mov	r2, sl
  4038a2:	4601      	mov	r1, r0
  4038a4:	4607      	mov	r7, r0
  4038a6:	4620      	mov	r0, r4
  4038a8:	f000 fd47 	bl	40433a <__multiply>
  4038ac:	4651      	mov	r1, sl
  4038ae:	900a      	str	r0, [sp, #40]	; 0x28
  4038b0:	4620      	mov	r0, r4
  4038b2:	f000 fc99 	bl	4041e8 <_Bfree>
  4038b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4038b8:	469a      	mov	sl, r3
  4038ba:	9b08      	ldr	r3, [sp, #32]
  4038bc:	1b9a      	subs	r2, r3, r6
  4038be:	d004      	beq.n	4038ca <_dtoa_r+0x782>
  4038c0:	4651      	mov	r1, sl
  4038c2:	4620      	mov	r0, r4
  4038c4:	f000 fdc6 	bl	404454 <__pow5mult>
  4038c8:	4682      	mov	sl, r0
  4038ca:	2101      	movs	r1, #1
  4038cc:	4620      	mov	r0, r4
  4038ce:	f000 fd2b 	bl	404328 <__i2b>
  4038d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4038d4:	2b00      	cmp	r3, #0
  4038d6:	4606      	mov	r6, r0
  4038d8:	f340 80e1 	ble.w	403a9e <_dtoa_r+0x956>
  4038dc:	461a      	mov	r2, r3
  4038de:	4601      	mov	r1, r0
  4038e0:	4620      	mov	r0, r4
  4038e2:	f000 fdb7 	bl	404454 <__pow5mult>
  4038e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4038e8:	2b01      	cmp	r3, #1
  4038ea:	4606      	mov	r6, r0
  4038ec:	f340 80da 	ble.w	403aa4 <_dtoa_r+0x95c>
  4038f0:	2300      	movs	r3, #0
  4038f2:	9308      	str	r3, [sp, #32]
  4038f4:	6933      	ldr	r3, [r6, #16]
  4038f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4038fa:	6918      	ldr	r0, [r3, #16]
  4038fc:	f000 fcc6 	bl	40428c <__hi0bits>
  403900:	f1c0 0020 	rsb	r0, r0, #32
  403904:	9b07      	ldr	r3, [sp, #28]
  403906:	4418      	add	r0, r3
  403908:	f010 001f 	ands.w	r0, r0, #31
  40390c:	f000 80f0 	beq.w	403af0 <_dtoa_r+0x9a8>
  403910:	f1c0 0320 	rsb	r3, r0, #32
  403914:	2b04      	cmp	r3, #4
  403916:	f340 80e2 	ble.w	403ade <_dtoa_r+0x996>
  40391a:	9b07      	ldr	r3, [sp, #28]
  40391c:	f1c0 001c 	rsb	r0, r0, #28
  403920:	4480      	add	r8, r0
  403922:	4405      	add	r5, r0
  403924:	4403      	add	r3, r0
  403926:	9307      	str	r3, [sp, #28]
  403928:	f1b8 0f00 	cmp.w	r8, #0
  40392c:	dd05      	ble.n	40393a <_dtoa_r+0x7f2>
  40392e:	4651      	mov	r1, sl
  403930:	4642      	mov	r2, r8
  403932:	4620      	mov	r0, r4
  403934:	f000 fddc 	bl	4044f0 <__lshift>
  403938:	4682      	mov	sl, r0
  40393a:	9b07      	ldr	r3, [sp, #28]
  40393c:	2b00      	cmp	r3, #0
  40393e:	dd05      	ble.n	40394c <_dtoa_r+0x804>
  403940:	4631      	mov	r1, r6
  403942:	461a      	mov	r2, r3
  403944:	4620      	mov	r0, r4
  403946:	f000 fdd3 	bl	4044f0 <__lshift>
  40394a:	4606      	mov	r6, r0
  40394c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40394e:	2b00      	cmp	r3, #0
  403950:	f000 80d2 	beq.w	403af8 <_dtoa_r+0x9b0>
  403954:	4631      	mov	r1, r6
  403956:	4650      	mov	r0, sl
  403958:	f000 fe1b 	bl	404592 <__mcmp>
  40395c:	2800      	cmp	r0, #0
  40395e:	f280 80cb 	bge.w	403af8 <_dtoa_r+0x9b0>
  403962:	2300      	movs	r3, #0
  403964:	4651      	mov	r1, sl
  403966:	220a      	movs	r2, #10
  403968:	4620      	mov	r0, r4
  40396a:	f000 fc54 	bl	404216 <__multadd>
  40396e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403970:	f10b 3bff 	add.w	fp, fp, #4294967295
  403974:	4682      	mov	sl, r0
  403976:	2b00      	cmp	r3, #0
  403978:	f000 81aa 	beq.w	403cd0 <_dtoa_r+0xb88>
  40397c:	2300      	movs	r3, #0
  40397e:	4639      	mov	r1, r7
  403980:	220a      	movs	r2, #10
  403982:	4620      	mov	r0, r4
  403984:	f000 fc47 	bl	404216 <__multadd>
  403988:	9b04      	ldr	r3, [sp, #16]
  40398a:	2b00      	cmp	r3, #0
  40398c:	4607      	mov	r7, r0
  40398e:	dc03      	bgt.n	403998 <_dtoa_r+0x850>
  403990:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403992:	2b02      	cmp	r3, #2
  403994:	f300 80b8 	bgt.w	403b08 <_dtoa_r+0x9c0>
  403998:	2d00      	cmp	r5, #0
  40399a:	dd05      	ble.n	4039a8 <_dtoa_r+0x860>
  40399c:	4639      	mov	r1, r7
  40399e:	462a      	mov	r2, r5
  4039a0:	4620      	mov	r0, r4
  4039a2:	f000 fda5 	bl	4044f0 <__lshift>
  4039a6:	4607      	mov	r7, r0
  4039a8:	9b08      	ldr	r3, [sp, #32]
  4039aa:	2b00      	cmp	r3, #0
  4039ac:	f000 8110 	beq.w	403bd0 <_dtoa_r+0xa88>
  4039b0:	6879      	ldr	r1, [r7, #4]
  4039b2:	4620      	mov	r0, r4
  4039b4:	f000 fbe4 	bl	404180 <_Balloc>
  4039b8:	693a      	ldr	r2, [r7, #16]
  4039ba:	3202      	adds	r2, #2
  4039bc:	4605      	mov	r5, r0
  4039be:	0092      	lsls	r2, r2, #2
  4039c0:	f107 010c 	add.w	r1, r7, #12
  4039c4:	300c      	adds	r0, #12
  4039c6:	f7fe fdeb 	bl	4025a0 <memcpy>
  4039ca:	2201      	movs	r2, #1
  4039cc:	4629      	mov	r1, r5
  4039ce:	4620      	mov	r0, r4
  4039d0:	f000 fd8e 	bl	4044f0 <__lshift>
  4039d4:	9b02      	ldr	r3, [sp, #8]
  4039d6:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4039da:	9707      	str	r7, [sp, #28]
  4039dc:	f003 0301 	and.w	r3, r3, #1
  4039e0:	4607      	mov	r7, r0
  4039e2:	9308      	str	r3, [sp, #32]
  4039e4:	4631      	mov	r1, r6
  4039e6:	4650      	mov	r0, sl
  4039e8:	f7ff fb22 	bl	403030 <quorem>
  4039ec:	9907      	ldr	r1, [sp, #28]
  4039ee:	4605      	mov	r5, r0
  4039f0:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4039f4:	4650      	mov	r0, sl
  4039f6:	f000 fdcc 	bl	404592 <__mcmp>
  4039fa:	463a      	mov	r2, r7
  4039fc:	9002      	str	r0, [sp, #8]
  4039fe:	4631      	mov	r1, r6
  403a00:	4620      	mov	r0, r4
  403a02:	f000 fde0 	bl	4045c6 <__mdiff>
  403a06:	68c3      	ldr	r3, [r0, #12]
  403a08:	4602      	mov	r2, r0
  403a0a:	2b00      	cmp	r3, #0
  403a0c:	f040 80e2 	bne.w	403bd4 <_dtoa_r+0xa8c>
  403a10:	4601      	mov	r1, r0
  403a12:	9009      	str	r0, [sp, #36]	; 0x24
  403a14:	4650      	mov	r0, sl
  403a16:	f000 fdbc 	bl	404592 <__mcmp>
  403a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403a1c:	4603      	mov	r3, r0
  403a1e:	4611      	mov	r1, r2
  403a20:	4620      	mov	r0, r4
  403a22:	9309      	str	r3, [sp, #36]	; 0x24
  403a24:	f000 fbe0 	bl	4041e8 <_Bfree>
  403a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403a2a:	2b00      	cmp	r3, #0
  403a2c:	f040 80d4 	bne.w	403bd8 <_dtoa_r+0xa90>
  403a30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403a32:	2a00      	cmp	r2, #0
  403a34:	f040 80d0 	bne.w	403bd8 <_dtoa_r+0xa90>
  403a38:	9a08      	ldr	r2, [sp, #32]
  403a3a:	2a00      	cmp	r2, #0
  403a3c:	f040 80cc 	bne.w	403bd8 <_dtoa_r+0xa90>
  403a40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  403a44:	f000 80e8 	beq.w	403c18 <_dtoa_r+0xad0>
  403a48:	9b02      	ldr	r3, [sp, #8]
  403a4a:	2b00      	cmp	r3, #0
  403a4c:	dd01      	ble.n	403a52 <_dtoa_r+0x90a>
  403a4e:	f105 0931 	add.w	r9, r5, #49	; 0x31
  403a52:	f108 0501 	add.w	r5, r8, #1
  403a56:	f888 9000 	strb.w	r9, [r8]
  403a5a:	e06a      	b.n	403b32 <_dtoa_r+0x9ea>
  403a5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403a5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  403a62:	e6f7      	b.n	403854 <_dtoa_r+0x70c>
  403a64:	9b08      	ldr	r3, [sp, #32]
  403a66:	f109 36ff 	add.w	r6, r9, #4294967295
  403a6a:	42b3      	cmp	r3, r6
  403a6c:	bfbf      	itttt	lt
  403a6e:	9b08      	ldrlt	r3, [sp, #32]
  403a70:	9608      	strlt	r6, [sp, #32]
  403a72:	1af2      	sublt	r2, r6, r3
  403a74:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  403a76:	bfb7      	itett	lt
  403a78:	189b      	addlt	r3, r3, r2
  403a7a:	1b9e      	subge	r6, r3, r6
  403a7c:	930c      	strlt	r3, [sp, #48]	; 0x30
  403a7e:	2600      	movlt	r6, #0
  403a80:	f1b9 0f00 	cmp.w	r9, #0
  403a84:	bfb9      	ittee	lt
  403a86:	eba8 0509 	sublt.w	r5, r8, r9
  403a8a:	2300      	movlt	r3, #0
  403a8c:	4645      	movge	r5, r8
  403a8e:	464b      	movge	r3, r9
  403a90:	e6e2      	b.n	403858 <_dtoa_r+0x710>
  403a92:	9e08      	ldr	r6, [sp, #32]
  403a94:	9f09      	ldr	r7, [sp, #36]	; 0x24
  403a96:	4645      	mov	r5, r8
  403a98:	e6e7      	b.n	40386a <_dtoa_r+0x722>
  403a9a:	9a08      	ldr	r2, [sp, #32]
  403a9c:	e710      	b.n	4038c0 <_dtoa_r+0x778>
  403a9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403aa0:	2b01      	cmp	r3, #1
  403aa2:	dc18      	bgt.n	403ad6 <_dtoa_r+0x98e>
  403aa4:	9b02      	ldr	r3, [sp, #8]
  403aa6:	b9b3      	cbnz	r3, 403ad6 <_dtoa_r+0x98e>
  403aa8:	9b03      	ldr	r3, [sp, #12]
  403aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
  403aae:	b9a3      	cbnz	r3, 403ada <_dtoa_r+0x992>
  403ab0:	9b03      	ldr	r3, [sp, #12]
  403ab2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  403ab6:	0d1b      	lsrs	r3, r3, #20
  403ab8:	051b      	lsls	r3, r3, #20
  403aba:	b12b      	cbz	r3, 403ac8 <_dtoa_r+0x980>
  403abc:	9b07      	ldr	r3, [sp, #28]
  403abe:	3301      	adds	r3, #1
  403ac0:	9307      	str	r3, [sp, #28]
  403ac2:	f108 0801 	add.w	r8, r8, #1
  403ac6:	2301      	movs	r3, #1
  403ac8:	9308      	str	r3, [sp, #32]
  403aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403acc:	2b00      	cmp	r3, #0
  403ace:	f47f af11 	bne.w	4038f4 <_dtoa_r+0x7ac>
  403ad2:	2001      	movs	r0, #1
  403ad4:	e716      	b.n	403904 <_dtoa_r+0x7bc>
  403ad6:	2300      	movs	r3, #0
  403ad8:	e7f6      	b.n	403ac8 <_dtoa_r+0x980>
  403ada:	9b02      	ldr	r3, [sp, #8]
  403adc:	e7f4      	b.n	403ac8 <_dtoa_r+0x980>
  403ade:	f43f af23 	beq.w	403928 <_dtoa_r+0x7e0>
  403ae2:	9a07      	ldr	r2, [sp, #28]
  403ae4:	331c      	adds	r3, #28
  403ae6:	441a      	add	r2, r3
  403ae8:	4498      	add	r8, r3
  403aea:	441d      	add	r5, r3
  403aec:	4613      	mov	r3, r2
  403aee:	e71a      	b.n	403926 <_dtoa_r+0x7de>
  403af0:	4603      	mov	r3, r0
  403af2:	e7f6      	b.n	403ae2 <_dtoa_r+0x99a>
  403af4:	40240000 	.word	0x40240000
  403af8:	f1b9 0f00 	cmp.w	r9, #0
  403afc:	dc33      	bgt.n	403b66 <_dtoa_r+0xa1e>
  403afe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403b00:	2b02      	cmp	r3, #2
  403b02:	dd30      	ble.n	403b66 <_dtoa_r+0xa1e>
  403b04:	f8cd 9010 	str.w	r9, [sp, #16]
  403b08:	9b04      	ldr	r3, [sp, #16]
  403b0a:	b963      	cbnz	r3, 403b26 <_dtoa_r+0x9de>
  403b0c:	4631      	mov	r1, r6
  403b0e:	2205      	movs	r2, #5
  403b10:	4620      	mov	r0, r4
  403b12:	f000 fb80 	bl	404216 <__multadd>
  403b16:	4601      	mov	r1, r0
  403b18:	4606      	mov	r6, r0
  403b1a:	4650      	mov	r0, sl
  403b1c:	f000 fd39 	bl	404592 <__mcmp>
  403b20:	2800      	cmp	r0, #0
  403b22:	f73f ad5c 	bgt.w	4035de <_dtoa_r+0x496>
  403b26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403b28:	9d06      	ldr	r5, [sp, #24]
  403b2a:	ea6f 0b03 	mvn.w	fp, r3
  403b2e:	2300      	movs	r3, #0
  403b30:	9307      	str	r3, [sp, #28]
  403b32:	4631      	mov	r1, r6
  403b34:	4620      	mov	r0, r4
  403b36:	f000 fb57 	bl	4041e8 <_Bfree>
  403b3a:	2f00      	cmp	r7, #0
  403b3c:	f43f ae4b 	beq.w	4037d6 <_dtoa_r+0x68e>
  403b40:	9b07      	ldr	r3, [sp, #28]
  403b42:	b12b      	cbz	r3, 403b50 <_dtoa_r+0xa08>
  403b44:	42bb      	cmp	r3, r7
  403b46:	d003      	beq.n	403b50 <_dtoa_r+0xa08>
  403b48:	4619      	mov	r1, r3
  403b4a:	4620      	mov	r0, r4
  403b4c:	f000 fb4c 	bl	4041e8 <_Bfree>
  403b50:	4639      	mov	r1, r7
  403b52:	4620      	mov	r0, r4
  403b54:	f000 fb48 	bl	4041e8 <_Bfree>
  403b58:	e63d      	b.n	4037d6 <_dtoa_r+0x68e>
  403b5a:	2600      	movs	r6, #0
  403b5c:	4637      	mov	r7, r6
  403b5e:	e7e2      	b.n	403b26 <_dtoa_r+0x9de>
  403b60:	46bb      	mov	fp, r7
  403b62:	4637      	mov	r7, r6
  403b64:	e53b      	b.n	4035de <_dtoa_r+0x496>
  403b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403b68:	f8cd 9010 	str.w	r9, [sp, #16]
  403b6c:	2b00      	cmp	r3, #0
  403b6e:	f47f af13 	bne.w	403998 <_dtoa_r+0x850>
  403b72:	9d06      	ldr	r5, [sp, #24]
  403b74:	4631      	mov	r1, r6
  403b76:	4650      	mov	r0, sl
  403b78:	f7ff fa5a 	bl	403030 <quorem>
  403b7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
  403b80:	f805 9b01 	strb.w	r9, [r5], #1
  403b84:	9b06      	ldr	r3, [sp, #24]
  403b86:	9a04      	ldr	r2, [sp, #16]
  403b88:	1aeb      	subs	r3, r5, r3
  403b8a:	429a      	cmp	r2, r3
  403b8c:	f300 8083 	bgt.w	403c96 <_dtoa_r+0xb4e>
  403b90:	9b06      	ldr	r3, [sp, #24]
  403b92:	2a01      	cmp	r2, #1
  403b94:	bfac      	ite	ge
  403b96:	189b      	addge	r3, r3, r2
  403b98:	3301      	addlt	r3, #1
  403b9a:	4698      	mov	r8, r3
  403b9c:	2300      	movs	r3, #0
  403b9e:	9307      	str	r3, [sp, #28]
  403ba0:	4651      	mov	r1, sl
  403ba2:	2201      	movs	r2, #1
  403ba4:	4620      	mov	r0, r4
  403ba6:	f000 fca3 	bl	4044f0 <__lshift>
  403baa:	4631      	mov	r1, r6
  403bac:	4682      	mov	sl, r0
  403bae:	f000 fcf0 	bl	404592 <__mcmp>
  403bb2:	2800      	cmp	r0, #0
  403bb4:	dc35      	bgt.n	403c22 <_dtoa_r+0xada>
  403bb6:	d102      	bne.n	403bbe <_dtoa_r+0xa76>
  403bb8:	f019 0f01 	tst.w	r9, #1
  403bbc:	d131      	bne.n	403c22 <_dtoa_r+0xada>
  403bbe:	4645      	mov	r5, r8
  403bc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  403bc4:	2b30      	cmp	r3, #48	; 0x30
  403bc6:	f105 32ff 	add.w	r2, r5, #4294967295
  403bca:	d1b2      	bne.n	403b32 <_dtoa_r+0x9ea>
  403bcc:	4615      	mov	r5, r2
  403bce:	e7f7      	b.n	403bc0 <_dtoa_r+0xa78>
  403bd0:	4638      	mov	r0, r7
  403bd2:	e6ff      	b.n	4039d4 <_dtoa_r+0x88c>
  403bd4:	2301      	movs	r3, #1
  403bd6:	e722      	b.n	403a1e <_dtoa_r+0x8d6>
  403bd8:	9a02      	ldr	r2, [sp, #8]
  403bda:	2a00      	cmp	r2, #0
  403bdc:	db04      	blt.n	403be8 <_dtoa_r+0xaa0>
  403bde:	d129      	bne.n	403c34 <_dtoa_r+0xaec>
  403be0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403be2:	bb3a      	cbnz	r2, 403c34 <_dtoa_r+0xaec>
  403be4:	9a08      	ldr	r2, [sp, #32]
  403be6:	bb2a      	cbnz	r2, 403c34 <_dtoa_r+0xaec>
  403be8:	2b00      	cmp	r3, #0
  403bea:	f77f af32 	ble.w	403a52 <_dtoa_r+0x90a>
  403bee:	4651      	mov	r1, sl
  403bf0:	2201      	movs	r2, #1
  403bf2:	4620      	mov	r0, r4
  403bf4:	f000 fc7c 	bl	4044f0 <__lshift>
  403bf8:	4631      	mov	r1, r6
  403bfa:	4682      	mov	sl, r0
  403bfc:	f000 fcc9 	bl	404592 <__mcmp>
  403c00:	2800      	cmp	r0, #0
  403c02:	dc05      	bgt.n	403c10 <_dtoa_r+0xac8>
  403c04:	f47f af25 	bne.w	403a52 <_dtoa_r+0x90a>
  403c08:	f019 0f01 	tst.w	r9, #1
  403c0c:	f43f af21 	beq.w	403a52 <_dtoa_r+0x90a>
  403c10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  403c14:	f47f af1b 	bne.w	403a4e <_dtoa_r+0x906>
  403c18:	2339      	movs	r3, #57	; 0x39
  403c1a:	f888 3000 	strb.w	r3, [r8]
  403c1e:	f108 0801 	add.w	r8, r8, #1
  403c22:	4645      	mov	r5, r8
  403c24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  403c28:	2b39      	cmp	r3, #57	; 0x39
  403c2a:	f105 32ff 	add.w	r2, r5, #4294967295
  403c2e:	d03a      	beq.n	403ca6 <_dtoa_r+0xb5e>
  403c30:	3301      	adds	r3, #1
  403c32:	e03f      	b.n	403cb4 <_dtoa_r+0xb6c>
  403c34:	2b00      	cmp	r3, #0
  403c36:	f108 0501 	add.w	r5, r8, #1
  403c3a:	dd05      	ble.n	403c48 <_dtoa_r+0xb00>
  403c3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  403c40:	d0ea      	beq.n	403c18 <_dtoa_r+0xad0>
  403c42:	f109 0901 	add.w	r9, r9, #1
  403c46:	e706      	b.n	403a56 <_dtoa_r+0x90e>
  403c48:	9b06      	ldr	r3, [sp, #24]
  403c4a:	9a04      	ldr	r2, [sp, #16]
  403c4c:	f805 9c01 	strb.w	r9, [r5, #-1]
  403c50:	1aeb      	subs	r3, r5, r3
  403c52:	4293      	cmp	r3, r2
  403c54:	46a8      	mov	r8, r5
  403c56:	d0a3      	beq.n	403ba0 <_dtoa_r+0xa58>
  403c58:	4651      	mov	r1, sl
  403c5a:	2300      	movs	r3, #0
  403c5c:	220a      	movs	r2, #10
  403c5e:	4620      	mov	r0, r4
  403c60:	f000 fad9 	bl	404216 <__multadd>
  403c64:	9b07      	ldr	r3, [sp, #28]
  403c66:	9907      	ldr	r1, [sp, #28]
  403c68:	42bb      	cmp	r3, r7
  403c6a:	4682      	mov	sl, r0
  403c6c:	f04f 0300 	mov.w	r3, #0
  403c70:	f04f 020a 	mov.w	r2, #10
  403c74:	4620      	mov	r0, r4
  403c76:	d104      	bne.n	403c82 <_dtoa_r+0xb3a>
  403c78:	f000 facd 	bl	404216 <__multadd>
  403c7c:	9007      	str	r0, [sp, #28]
  403c7e:	4607      	mov	r7, r0
  403c80:	e6b0      	b.n	4039e4 <_dtoa_r+0x89c>
  403c82:	f000 fac8 	bl	404216 <__multadd>
  403c86:	2300      	movs	r3, #0
  403c88:	9007      	str	r0, [sp, #28]
  403c8a:	220a      	movs	r2, #10
  403c8c:	4639      	mov	r1, r7
  403c8e:	4620      	mov	r0, r4
  403c90:	f000 fac1 	bl	404216 <__multadd>
  403c94:	e7f3      	b.n	403c7e <_dtoa_r+0xb36>
  403c96:	4651      	mov	r1, sl
  403c98:	2300      	movs	r3, #0
  403c9a:	220a      	movs	r2, #10
  403c9c:	4620      	mov	r0, r4
  403c9e:	f000 faba 	bl	404216 <__multadd>
  403ca2:	4682      	mov	sl, r0
  403ca4:	e766      	b.n	403b74 <_dtoa_r+0xa2c>
  403ca6:	9b06      	ldr	r3, [sp, #24]
  403ca8:	4293      	cmp	r3, r2
  403caa:	d105      	bne.n	403cb8 <_dtoa_r+0xb70>
  403cac:	9a06      	ldr	r2, [sp, #24]
  403cae:	f10b 0b01 	add.w	fp, fp, #1
  403cb2:	2331      	movs	r3, #49	; 0x31
  403cb4:	7013      	strb	r3, [r2, #0]
  403cb6:	e73c      	b.n	403b32 <_dtoa_r+0x9ea>
  403cb8:	4615      	mov	r5, r2
  403cba:	e7b3      	b.n	403c24 <_dtoa_r+0xadc>
  403cbc:	4b09      	ldr	r3, [pc, #36]	; (403ce4 <_dtoa_r+0xb9c>)
  403cbe:	f7ff baa5 	b.w	40320c <_dtoa_r+0xc4>
  403cc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403cc4:	2b00      	cmp	r3, #0
  403cc6:	f47f aa7f 	bne.w	4031c8 <_dtoa_r+0x80>
  403cca:	4b07      	ldr	r3, [pc, #28]	; (403ce8 <_dtoa_r+0xba0>)
  403ccc:	f7ff ba9e 	b.w	40320c <_dtoa_r+0xc4>
  403cd0:	9b04      	ldr	r3, [sp, #16]
  403cd2:	2b00      	cmp	r3, #0
  403cd4:	f73f af4d 	bgt.w	403b72 <_dtoa_r+0xa2a>
  403cd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403cda:	2b02      	cmp	r3, #2
  403cdc:	f77f af49 	ble.w	403b72 <_dtoa_r+0xa2a>
  403ce0:	e712      	b.n	403b08 <_dtoa_r+0x9c0>
  403ce2:	bf00      	nop
  403ce4:	004052d0 	.word	0x004052d0
  403ce8:	004052f4 	.word	0x004052f4

00403cec <__sflush_r>:
  403cec:	898a      	ldrh	r2, [r1, #12]
  403cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403cf2:	4605      	mov	r5, r0
  403cf4:	0710      	lsls	r0, r2, #28
  403cf6:	460c      	mov	r4, r1
  403cf8:	d45a      	bmi.n	403db0 <__sflush_r+0xc4>
  403cfa:	684b      	ldr	r3, [r1, #4]
  403cfc:	2b00      	cmp	r3, #0
  403cfe:	dc05      	bgt.n	403d0c <__sflush_r+0x20>
  403d00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  403d02:	2b00      	cmp	r3, #0
  403d04:	dc02      	bgt.n	403d0c <__sflush_r+0x20>
  403d06:	2000      	movs	r0, #0
  403d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403d0e:	2e00      	cmp	r6, #0
  403d10:	d0f9      	beq.n	403d06 <__sflush_r+0x1a>
  403d12:	2300      	movs	r3, #0
  403d14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  403d18:	682f      	ldr	r7, [r5, #0]
  403d1a:	602b      	str	r3, [r5, #0]
  403d1c:	d033      	beq.n	403d86 <__sflush_r+0x9a>
  403d1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  403d20:	89a3      	ldrh	r3, [r4, #12]
  403d22:	075a      	lsls	r2, r3, #29
  403d24:	d505      	bpl.n	403d32 <__sflush_r+0x46>
  403d26:	6863      	ldr	r3, [r4, #4]
  403d28:	1ac0      	subs	r0, r0, r3
  403d2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  403d2c:	b10b      	cbz	r3, 403d32 <__sflush_r+0x46>
  403d2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  403d30:	1ac0      	subs	r0, r0, r3
  403d32:	2300      	movs	r3, #0
  403d34:	4602      	mov	r2, r0
  403d36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403d38:	6a21      	ldr	r1, [r4, #32]
  403d3a:	4628      	mov	r0, r5
  403d3c:	47b0      	blx	r6
  403d3e:	1c43      	adds	r3, r0, #1
  403d40:	89a3      	ldrh	r3, [r4, #12]
  403d42:	d106      	bne.n	403d52 <__sflush_r+0x66>
  403d44:	6829      	ldr	r1, [r5, #0]
  403d46:	291d      	cmp	r1, #29
  403d48:	d84b      	bhi.n	403de2 <__sflush_r+0xf6>
  403d4a:	4a2b      	ldr	r2, [pc, #172]	; (403df8 <__sflush_r+0x10c>)
  403d4c:	40ca      	lsrs	r2, r1
  403d4e:	07d6      	lsls	r6, r2, #31
  403d50:	d547      	bpl.n	403de2 <__sflush_r+0xf6>
  403d52:	2200      	movs	r2, #0
  403d54:	6062      	str	r2, [r4, #4]
  403d56:	04d9      	lsls	r1, r3, #19
  403d58:	6922      	ldr	r2, [r4, #16]
  403d5a:	6022      	str	r2, [r4, #0]
  403d5c:	d504      	bpl.n	403d68 <__sflush_r+0x7c>
  403d5e:	1c42      	adds	r2, r0, #1
  403d60:	d101      	bne.n	403d66 <__sflush_r+0x7a>
  403d62:	682b      	ldr	r3, [r5, #0]
  403d64:	b903      	cbnz	r3, 403d68 <__sflush_r+0x7c>
  403d66:	6560      	str	r0, [r4, #84]	; 0x54
  403d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403d6a:	602f      	str	r7, [r5, #0]
  403d6c:	2900      	cmp	r1, #0
  403d6e:	d0ca      	beq.n	403d06 <__sflush_r+0x1a>
  403d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403d74:	4299      	cmp	r1, r3
  403d76:	d002      	beq.n	403d7e <__sflush_r+0x92>
  403d78:	4628      	mov	r0, r5
  403d7a:	f000 fcdf 	bl	40473c <_free_r>
  403d7e:	2000      	movs	r0, #0
  403d80:	6360      	str	r0, [r4, #52]	; 0x34
  403d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403d86:	6a21      	ldr	r1, [r4, #32]
  403d88:	2301      	movs	r3, #1
  403d8a:	4628      	mov	r0, r5
  403d8c:	47b0      	blx	r6
  403d8e:	1c41      	adds	r1, r0, #1
  403d90:	d1c6      	bne.n	403d20 <__sflush_r+0x34>
  403d92:	682b      	ldr	r3, [r5, #0]
  403d94:	2b00      	cmp	r3, #0
  403d96:	d0c3      	beq.n	403d20 <__sflush_r+0x34>
  403d98:	2b1d      	cmp	r3, #29
  403d9a:	d001      	beq.n	403da0 <__sflush_r+0xb4>
  403d9c:	2b16      	cmp	r3, #22
  403d9e:	d101      	bne.n	403da4 <__sflush_r+0xb8>
  403da0:	602f      	str	r7, [r5, #0]
  403da2:	e7b0      	b.n	403d06 <__sflush_r+0x1a>
  403da4:	89a3      	ldrh	r3, [r4, #12]
  403da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403daa:	81a3      	strh	r3, [r4, #12]
  403dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403db0:	690f      	ldr	r7, [r1, #16]
  403db2:	2f00      	cmp	r7, #0
  403db4:	d0a7      	beq.n	403d06 <__sflush_r+0x1a>
  403db6:	0793      	lsls	r3, r2, #30
  403db8:	680e      	ldr	r6, [r1, #0]
  403dba:	bf08      	it	eq
  403dbc:	694b      	ldreq	r3, [r1, #20]
  403dbe:	600f      	str	r7, [r1, #0]
  403dc0:	bf18      	it	ne
  403dc2:	2300      	movne	r3, #0
  403dc4:	eba6 0807 	sub.w	r8, r6, r7
  403dc8:	608b      	str	r3, [r1, #8]
  403dca:	f1b8 0f00 	cmp.w	r8, #0
  403dce:	dd9a      	ble.n	403d06 <__sflush_r+0x1a>
  403dd0:	4643      	mov	r3, r8
  403dd2:	463a      	mov	r2, r7
  403dd4:	6a21      	ldr	r1, [r4, #32]
  403dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  403dd8:	4628      	mov	r0, r5
  403dda:	47b0      	blx	r6
  403ddc:	2800      	cmp	r0, #0
  403dde:	dc07      	bgt.n	403df0 <__sflush_r+0x104>
  403de0:	89a3      	ldrh	r3, [r4, #12]
  403de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403de6:	81a3      	strh	r3, [r4, #12]
  403de8:	f04f 30ff 	mov.w	r0, #4294967295
  403dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403df0:	4407      	add	r7, r0
  403df2:	eba8 0800 	sub.w	r8, r8, r0
  403df6:	e7e8      	b.n	403dca <__sflush_r+0xde>
  403df8:	20400001 	.word	0x20400001

00403dfc <_fflush_r>:
  403dfc:	b538      	push	{r3, r4, r5, lr}
  403dfe:	690b      	ldr	r3, [r1, #16]
  403e00:	4605      	mov	r5, r0
  403e02:	460c      	mov	r4, r1
  403e04:	b1db      	cbz	r3, 403e3e <_fflush_r+0x42>
  403e06:	b118      	cbz	r0, 403e10 <_fflush_r+0x14>
  403e08:	6983      	ldr	r3, [r0, #24]
  403e0a:	b90b      	cbnz	r3, 403e10 <_fflush_r+0x14>
  403e0c:	f000 f860 	bl	403ed0 <__sinit>
  403e10:	4b0c      	ldr	r3, [pc, #48]	; (403e44 <_fflush_r+0x48>)
  403e12:	429c      	cmp	r4, r3
  403e14:	d109      	bne.n	403e2a <_fflush_r+0x2e>
  403e16:	686c      	ldr	r4, [r5, #4]
  403e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403e1c:	b17b      	cbz	r3, 403e3e <_fflush_r+0x42>
  403e1e:	4621      	mov	r1, r4
  403e20:	4628      	mov	r0, r5
  403e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403e26:	f7ff bf61 	b.w	403cec <__sflush_r>
  403e2a:	4b07      	ldr	r3, [pc, #28]	; (403e48 <_fflush_r+0x4c>)
  403e2c:	429c      	cmp	r4, r3
  403e2e:	d101      	bne.n	403e34 <_fflush_r+0x38>
  403e30:	68ac      	ldr	r4, [r5, #8]
  403e32:	e7f1      	b.n	403e18 <_fflush_r+0x1c>
  403e34:	4b05      	ldr	r3, [pc, #20]	; (403e4c <_fflush_r+0x50>)
  403e36:	429c      	cmp	r4, r3
  403e38:	bf08      	it	eq
  403e3a:	68ec      	ldreq	r4, [r5, #12]
  403e3c:	e7ec      	b.n	403e18 <_fflush_r+0x1c>
  403e3e:	2000      	movs	r0, #0
  403e40:	bd38      	pop	{r3, r4, r5, pc}
  403e42:	bf00      	nop
  403e44:	00405324 	.word	0x00405324
  403e48:	00405344 	.word	0x00405344
  403e4c:	00405304 	.word	0x00405304

00403e50 <_cleanup_r>:
  403e50:	4901      	ldr	r1, [pc, #4]	; (403e58 <_cleanup_r+0x8>)
  403e52:	f000 b8a9 	b.w	403fa8 <_fwalk_reent>
  403e56:	bf00      	nop
  403e58:	00403dfd 	.word	0x00403dfd

00403e5c <std.isra.0>:
  403e5c:	2300      	movs	r3, #0
  403e5e:	b510      	push	{r4, lr}
  403e60:	4604      	mov	r4, r0
  403e62:	6003      	str	r3, [r0, #0]
  403e64:	6043      	str	r3, [r0, #4]
  403e66:	6083      	str	r3, [r0, #8]
  403e68:	8181      	strh	r1, [r0, #12]
  403e6a:	6643      	str	r3, [r0, #100]	; 0x64
  403e6c:	81c2      	strh	r2, [r0, #14]
  403e6e:	6103      	str	r3, [r0, #16]
  403e70:	6143      	str	r3, [r0, #20]
  403e72:	6183      	str	r3, [r0, #24]
  403e74:	4619      	mov	r1, r3
  403e76:	2208      	movs	r2, #8
  403e78:	305c      	adds	r0, #92	; 0x5c
  403e7a:	f7fe fb9c 	bl	4025b6 <memset>
  403e7e:	4b05      	ldr	r3, [pc, #20]	; (403e94 <std.isra.0+0x38>)
  403e80:	6263      	str	r3, [r4, #36]	; 0x24
  403e82:	4b05      	ldr	r3, [pc, #20]	; (403e98 <std.isra.0+0x3c>)
  403e84:	62a3      	str	r3, [r4, #40]	; 0x28
  403e86:	4b05      	ldr	r3, [pc, #20]	; (403e9c <std.isra.0+0x40>)
  403e88:	62e3      	str	r3, [r4, #44]	; 0x2c
  403e8a:	4b05      	ldr	r3, [pc, #20]	; (403ea0 <std.isra.0+0x44>)
  403e8c:	6224      	str	r4, [r4, #32]
  403e8e:	6323      	str	r3, [r4, #48]	; 0x30
  403e90:	bd10      	pop	{r4, pc}
  403e92:	bf00      	nop
  403e94:	00404b31 	.word	0x00404b31
  403e98:	00404b53 	.word	0x00404b53
  403e9c:	00404b8b 	.word	0x00404b8b
  403ea0:	00404baf 	.word	0x00404baf

00403ea4 <__sfmoreglue>:
  403ea4:	b570      	push	{r4, r5, r6, lr}
  403ea6:	1e4a      	subs	r2, r1, #1
  403ea8:	2568      	movs	r5, #104	; 0x68
  403eaa:	4355      	muls	r5, r2
  403eac:	460e      	mov	r6, r1
  403eae:	f105 0174 	add.w	r1, r5, #116	; 0x74
  403eb2:	f000 fc91 	bl	4047d8 <_malloc_r>
  403eb6:	4604      	mov	r4, r0
  403eb8:	b140      	cbz	r0, 403ecc <__sfmoreglue+0x28>
  403eba:	2100      	movs	r1, #0
  403ebc:	e880 0042 	stmia.w	r0, {r1, r6}
  403ec0:	300c      	adds	r0, #12
  403ec2:	60a0      	str	r0, [r4, #8]
  403ec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
  403ec8:	f7fe fb75 	bl	4025b6 <memset>
  403ecc:	4620      	mov	r0, r4
  403ece:	bd70      	pop	{r4, r5, r6, pc}

00403ed0 <__sinit>:
  403ed0:	6983      	ldr	r3, [r0, #24]
  403ed2:	b510      	push	{r4, lr}
  403ed4:	4604      	mov	r4, r0
  403ed6:	bb33      	cbnz	r3, 403f26 <__sinit+0x56>
  403ed8:	6483      	str	r3, [r0, #72]	; 0x48
  403eda:	64c3      	str	r3, [r0, #76]	; 0x4c
  403edc:	6503      	str	r3, [r0, #80]	; 0x50
  403ede:	4b12      	ldr	r3, [pc, #72]	; (403f28 <__sinit+0x58>)
  403ee0:	4a12      	ldr	r2, [pc, #72]	; (403f2c <__sinit+0x5c>)
  403ee2:	681b      	ldr	r3, [r3, #0]
  403ee4:	6282      	str	r2, [r0, #40]	; 0x28
  403ee6:	4298      	cmp	r0, r3
  403ee8:	bf04      	itt	eq
  403eea:	2301      	moveq	r3, #1
  403eec:	6183      	streq	r3, [r0, #24]
  403eee:	f000 f81f 	bl	403f30 <__sfp>
  403ef2:	6060      	str	r0, [r4, #4]
  403ef4:	4620      	mov	r0, r4
  403ef6:	f000 f81b 	bl	403f30 <__sfp>
  403efa:	60a0      	str	r0, [r4, #8]
  403efc:	4620      	mov	r0, r4
  403efe:	f000 f817 	bl	403f30 <__sfp>
  403f02:	2200      	movs	r2, #0
  403f04:	60e0      	str	r0, [r4, #12]
  403f06:	2104      	movs	r1, #4
  403f08:	6860      	ldr	r0, [r4, #4]
  403f0a:	f7ff ffa7 	bl	403e5c <std.isra.0>
  403f0e:	2201      	movs	r2, #1
  403f10:	2109      	movs	r1, #9
  403f12:	68a0      	ldr	r0, [r4, #8]
  403f14:	f7ff ffa2 	bl	403e5c <std.isra.0>
  403f18:	2202      	movs	r2, #2
  403f1a:	2112      	movs	r1, #18
  403f1c:	68e0      	ldr	r0, [r4, #12]
  403f1e:	f7ff ff9d 	bl	403e5c <std.isra.0>
  403f22:	2301      	movs	r3, #1
  403f24:	61a3      	str	r3, [r4, #24]
  403f26:	bd10      	pop	{r4, pc}
  403f28:	004052bc 	.word	0x004052bc
  403f2c:	00403e51 	.word	0x00403e51

00403f30 <__sfp>:
  403f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403f32:	4b1c      	ldr	r3, [pc, #112]	; (403fa4 <__sfp+0x74>)
  403f34:	681e      	ldr	r6, [r3, #0]
  403f36:	69b3      	ldr	r3, [r6, #24]
  403f38:	4607      	mov	r7, r0
  403f3a:	b913      	cbnz	r3, 403f42 <__sfp+0x12>
  403f3c:	4630      	mov	r0, r6
  403f3e:	f7ff ffc7 	bl	403ed0 <__sinit>
  403f42:	3648      	adds	r6, #72	; 0x48
  403f44:	68b4      	ldr	r4, [r6, #8]
  403f46:	6873      	ldr	r3, [r6, #4]
  403f48:	3b01      	subs	r3, #1
  403f4a:	d503      	bpl.n	403f54 <__sfp+0x24>
  403f4c:	6833      	ldr	r3, [r6, #0]
  403f4e:	b133      	cbz	r3, 403f5e <__sfp+0x2e>
  403f50:	6836      	ldr	r6, [r6, #0]
  403f52:	e7f7      	b.n	403f44 <__sfp+0x14>
  403f54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  403f58:	b16d      	cbz	r5, 403f76 <__sfp+0x46>
  403f5a:	3468      	adds	r4, #104	; 0x68
  403f5c:	e7f4      	b.n	403f48 <__sfp+0x18>
  403f5e:	2104      	movs	r1, #4
  403f60:	4638      	mov	r0, r7
  403f62:	f7ff ff9f 	bl	403ea4 <__sfmoreglue>
  403f66:	6030      	str	r0, [r6, #0]
  403f68:	2800      	cmp	r0, #0
  403f6a:	d1f1      	bne.n	403f50 <__sfp+0x20>
  403f6c:	230c      	movs	r3, #12
  403f6e:	603b      	str	r3, [r7, #0]
  403f70:	4604      	mov	r4, r0
  403f72:	4620      	mov	r0, r4
  403f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403f7a:	81e3      	strh	r3, [r4, #14]
  403f7c:	2301      	movs	r3, #1
  403f7e:	81a3      	strh	r3, [r4, #12]
  403f80:	6665      	str	r5, [r4, #100]	; 0x64
  403f82:	6025      	str	r5, [r4, #0]
  403f84:	60a5      	str	r5, [r4, #8]
  403f86:	6065      	str	r5, [r4, #4]
  403f88:	6125      	str	r5, [r4, #16]
  403f8a:	6165      	str	r5, [r4, #20]
  403f8c:	61a5      	str	r5, [r4, #24]
  403f8e:	2208      	movs	r2, #8
  403f90:	4629      	mov	r1, r5
  403f92:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  403f96:	f7fe fb0e 	bl	4025b6 <memset>
  403f9a:	6365      	str	r5, [r4, #52]	; 0x34
  403f9c:	63a5      	str	r5, [r4, #56]	; 0x38
  403f9e:	64a5      	str	r5, [r4, #72]	; 0x48
  403fa0:	64e5      	str	r5, [r4, #76]	; 0x4c
  403fa2:	e7e6      	b.n	403f72 <__sfp+0x42>
  403fa4:	004052bc 	.word	0x004052bc

00403fa8 <_fwalk_reent>:
  403fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403fac:	4680      	mov	r8, r0
  403fae:	4689      	mov	r9, r1
  403fb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
  403fb4:	2600      	movs	r6, #0
  403fb6:	b914      	cbnz	r4, 403fbe <_fwalk_reent+0x16>
  403fb8:	4630      	mov	r0, r6
  403fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403fbe:	68a5      	ldr	r5, [r4, #8]
  403fc0:	6867      	ldr	r7, [r4, #4]
  403fc2:	3f01      	subs	r7, #1
  403fc4:	d501      	bpl.n	403fca <_fwalk_reent+0x22>
  403fc6:	6824      	ldr	r4, [r4, #0]
  403fc8:	e7f5      	b.n	403fb6 <_fwalk_reent+0xe>
  403fca:	89ab      	ldrh	r3, [r5, #12]
  403fcc:	2b01      	cmp	r3, #1
  403fce:	d907      	bls.n	403fe0 <_fwalk_reent+0x38>
  403fd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  403fd4:	3301      	adds	r3, #1
  403fd6:	d003      	beq.n	403fe0 <_fwalk_reent+0x38>
  403fd8:	4629      	mov	r1, r5
  403fda:	4640      	mov	r0, r8
  403fdc:	47c8      	blx	r9
  403fde:	4306      	orrs	r6, r0
  403fe0:	3568      	adds	r5, #104	; 0x68
  403fe2:	e7ee      	b.n	403fc2 <_fwalk_reent+0x1a>

00403fe4 <_localeconv_r>:
  403fe4:	4b04      	ldr	r3, [pc, #16]	; (403ff8 <_localeconv_r+0x14>)
  403fe6:	681b      	ldr	r3, [r3, #0]
  403fe8:	6a18      	ldr	r0, [r3, #32]
  403fea:	4b04      	ldr	r3, [pc, #16]	; (403ffc <_localeconv_r+0x18>)
  403fec:	2800      	cmp	r0, #0
  403fee:	bf08      	it	eq
  403ff0:	4618      	moveq	r0, r3
  403ff2:	30f0      	adds	r0, #240	; 0xf0
  403ff4:	4770      	bx	lr
  403ff6:	bf00      	nop
  403ff8:	20400048 	.word	0x20400048
  403ffc:	204000ac 	.word	0x204000ac

00404000 <__swhatbuf_r>:
  404000:	b570      	push	{r4, r5, r6, lr}
  404002:	460e      	mov	r6, r1
  404004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404008:	2900      	cmp	r1, #0
  40400a:	b090      	sub	sp, #64	; 0x40
  40400c:	4614      	mov	r4, r2
  40400e:	461d      	mov	r5, r3
  404010:	da07      	bge.n	404022 <__swhatbuf_r+0x22>
  404012:	2300      	movs	r3, #0
  404014:	602b      	str	r3, [r5, #0]
  404016:	89b3      	ldrh	r3, [r6, #12]
  404018:	061a      	lsls	r2, r3, #24
  40401a:	d410      	bmi.n	40403e <__swhatbuf_r+0x3e>
  40401c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404020:	e00e      	b.n	404040 <__swhatbuf_r+0x40>
  404022:	aa01      	add	r2, sp, #4
  404024:	f000 feaa 	bl	404d7c <_fstat_r>
  404028:	2800      	cmp	r0, #0
  40402a:	dbf2      	blt.n	404012 <__swhatbuf_r+0x12>
  40402c:	9a02      	ldr	r2, [sp, #8]
  40402e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404032:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  404036:	425a      	negs	r2, r3
  404038:	415a      	adcs	r2, r3
  40403a:	602a      	str	r2, [r5, #0]
  40403c:	e7ee      	b.n	40401c <__swhatbuf_r+0x1c>
  40403e:	2340      	movs	r3, #64	; 0x40
  404040:	2000      	movs	r0, #0
  404042:	6023      	str	r3, [r4, #0]
  404044:	b010      	add	sp, #64	; 0x40
  404046:	bd70      	pop	{r4, r5, r6, pc}

00404048 <__smakebuf_r>:
  404048:	898b      	ldrh	r3, [r1, #12]
  40404a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  40404c:	079d      	lsls	r5, r3, #30
  40404e:	4606      	mov	r6, r0
  404050:	460c      	mov	r4, r1
  404052:	d507      	bpl.n	404064 <__smakebuf_r+0x1c>
  404054:	f104 0347 	add.w	r3, r4, #71	; 0x47
  404058:	6023      	str	r3, [r4, #0]
  40405a:	6123      	str	r3, [r4, #16]
  40405c:	2301      	movs	r3, #1
  40405e:	6163      	str	r3, [r4, #20]
  404060:	b002      	add	sp, #8
  404062:	bd70      	pop	{r4, r5, r6, pc}
  404064:	ab01      	add	r3, sp, #4
  404066:	466a      	mov	r2, sp
  404068:	f7ff ffca 	bl	404000 <__swhatbuf_r>
  40406c:	9900      	ldr	r1, [sp, #0]
  40406e:	4605      	mov	r5, r0
  404070:	4630      	mov	r0, r6
  404072:	f000 fbb1 	bl	4047d8 <_malloc_r>
  404076:	b948      	cbnz	r0, 40408c <__smakebuf_r+0x44>
  404078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40407c:	059a      	lsls	r2, r3, #22
  40407e:	d4ef      	bmi.n	404060 <__smakebuf_r+0x18>
  404080:	f023 0303 	bic.w	r3, r3, #3
  404084:	f043 0302 	orr.w	r3, r3, #2
  404088:	81a3      	strh	r3, [r4, #12]
  40408a:	e7e3      	b.n	404054 <__smakebuf_r+0xc>
  40408c:	4b0d      	ldr	r3, [pc, #52]	; (4040c4 <__smakebuf_r+0x7c>)
  40408e:	62b3      	str	r3, [r6, #40]	; 0x28
  404090:	89a3      	ldrh	r3, [r4, #12]
  404092:	6020      	str	r0, [r4, #0]
  404094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404098:	81a3      	strh	r3, [r4, #12]
  40409a:	9b00      	ldr	r3, [sp, #0]
  40409c:	6163      	str	r3, [r4, #20]
  40409e:	9b01      	ldr	r3, [sp, #4]
  4040a0:	6120      	str	r0, [r4, #16]
  4040a2:	b15b      	cbz	r3, 4040bc <__smakebuf_r+0x74>
  4040a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4040a8:	4630      	mov	r0, r6
  4040aa:	f000 fe79 	bl	404da0 <_isatty_r>
  4040ae:	b128      	cbz	r0, 4040bc <__smakebuf_r+0x74>
  4040b0:	89a3      	ldrh	r3, [r4, #12]
  4040b2:	f023 0303 	bic.w	r3, r3, #3
  4040b6:	f043 0301 	orr.w	r3, r3, #1
  4040ba:	81a3      	strh	r3, [r4, #12]
  4040bc:	89a3      	ldrh	r3, [r4, #12]
  4040be:	431d      	orrs	r5, r3
  4040c0:	81a5      	strh	r5, [r4, #12]
  4040c2:	e7cd      	b.n	404060 <__smakebuf_r+0x18>
  4040c4:	00403e51 	.word	0x00403e51

004040c8 <malloc>:
  4040c8:	4b02      	ldr	r3, [pc, #8]	; (4040d4 <malloc+0xc>)
  4040ca:	4601      	mov	r1, r0
  4040cc:	6818      	ldr	r0, [r3, #0]
  4040ce:	f000 bb83 	b.w	4047d8 <_malloc_r>
  4040d2:	bf00      	nop
  4040d4:	20400048 	.word	0x20400048
	...

004040e0 <memchr>:
  4040e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4040e4:	2a10      	cmp	r2, #16
  4040e6:	db2b      	blt.n	404140 <memchr+0x60>
  4040e8:	f010 0f07 	tst.w	r0, #7
  4040ec:	d008      	beq.n	404100 <memchr+0x20>
  4040ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4040f2:	3a01      	subs	r2, #1
  4040f4:	428b      	cmp	r3, r1
  4040f6:	d02d      	beq.n	404154 <memchr+0x74>
  4040f8:	f010 0f07 	tst.w	r0, #7
  4040fc:	b342      	cbz	r2, 404150 <memchr+0x70>
  4040fe:	d1f6      	bne.n	4040ee <memchr+0xe>
  404100:	b4f0      	push	{r4, r5, r6, r7}
  404102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40410a:	f022 0407 	bic.w	r4, r2, #7
  40410e:	f07f 0700 	mvns.w	r7, #0
  404112:	2300      	movs	r3, #0
  404114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404118:	3c08      	subs	r4, #8
  40411a:	ea85 0501 	eor.w	r5, r5, r1
  40411e:	ea86 0601 	eor.w	r6, r6, r1
  404122:	fa85 f547 	uadd8	r5, r5, r7
  404126:	faa3 f587 	sel	r5, r3, r7
  40412a:	fa86 f647 	uadd8	r6, r6, r7
  40412e:	faa5 f687 	sel	r6, r5, r7
  404132:	b98e      	cbnz	r6, 404158 <memchr+0x78>
  404134:	d1ee      	bne.n	404114 <memchr+0x34>
  404136:	bcf0      	pop	{r4, r5, r6, r7}
  404138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40413c:	f002 0207 	and.w	r2, r2, #7
  404140:	b132      	cbz	r2, 404150 <memchr+0x70>
  404142:	f810 3b01 	ldrb.w	r3, [r0], #1
  404146:	3a01      	subs	r2, #1
  404148:	ea83 0301 	eor.w	r3, r3, r1
  40414c:	b113      	cbz	r3, 404154 <memchr+0x74>
  40414e:	d1f8      	bne.n	404142 <memchr+0x62>
  404150:	2000      	movs	r0, #0
  404152:	4770      	bx	lr
  404154:	3801      	subs	r0, #1
  404156:	4770      	bx	lr
  404158:	2d00      	cmp	r5, #0
  40415a:	bf06      	itte	eq
  40415c:	4635      	moveq	r5, r6
  40415e:	3803      	subeq	r0, #3
  404160:	3807      	subne	r0, #7
  404162:	f015 0f01 	tst.w	r5, #1
  404166:	d107      	bne.n	404178 <memchr+0x98>
  404168:	3001      	adds	r0, #1
  40416a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40416e:	bf02      	ittt	eq
  404170:	3001      	addeq	r0, #1
  404172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404176:	3001      	addeq	r0, #1
  404178:	bcf0      	pop	{r4, r5, r6, r7}
  40417a:	3801      	subs	r0, #1
  40417c:	4770      	bx	lr
  40417e:	bf00      	nop

00404180 <_Balloc>:
  404180:	b570      	push	{r4, r5, r6, lr}
  404182:	6a45      	ldr	r5, [r0, #36]	; 0x24
  404184:	4604      	mov	r4, r0
  404186:	460e      	mov	r6, r1
  404188:	b93d      	cbnz	r5, 40419a <_Balloc+0x1a>
  40418a:	2010      	movs	r0, #16
  40418c:	f7ff ff9c 	bl	4040c8 <malloc>
  404190:	6260      	str	r0, [r4, #36]	; 0x24
  404192:	6045      	str	r5, [r0, #4]
  404194:	6085      	str	r5, [r0, #8]
  404196:	6005      	str	r5, [r0, #0]
  404198:	60c5      	str	r5, [r0, #12]
  40419a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40419c:	68eb      	ldr	r3, [r5, #12]
  40419e:	b183      	cbz	r3, 4041c2 <_Balloc+0x42>
  4041a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4041a2:	68db      	ldr	r3, [r3, #12]
  4041a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  4041a8:	b9b8      	cbnz	r0, 4041da <_Balloc+0x5a>
  4041aa:	2101      	movs	r1, #1
  4041ac:	fa01 f506 	lsl.w	r5, r1, r6
  4041b0:	1d6a      	adds	r2, r5, #5
  4041b2:	0092      	lsls	r2, r2, #2
  4041b4:	4620      	mov	r0, r4
  4041b6:	f000 fab3 	bl	404720 <_calloc_r>
  4041ba:	b160      	cbz	r0, 4041d6 <_Balloc+0x56>
  4041bc:	6046      	str	r6, [r0, #4]
  4041be:	6085      	str	r5, [r0, #8]
  4041c0:	e00e      	b.n	4041e0 <_Balloc+0x60>
  4041c2:	2221      	movs	r2, #33	; 0x21
  4041c4:	2104      	movs	r1, #4
  4041c6:	4620      	mov	r0, r4
  4041c8:	f000 faaa 	bl	404720 <_calloc_r>
  4041cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4041ce:	60e8      	str	r0, [r5, #12]
  4041d0:	68db      	ldr	r3, [r3, #12]
  4041d2:	2b00      	cmp	r3, #0
  4041d4:	d1e4      	bne.n	4041a0 <_Balloc+0x20>
  4041d6:	2000      	movs	r0, #0
  4041d8:	bd70      	pop	{r4, r5, r6, pc}
  4041da:	6802      	ldr	r2, [r0, #0]
  4041dc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  4041e0:	2300      	movs	r3, #0
  4041e2:	6103      	str	r3, [r0, #16]
  4041e4:	60c3      	str	r3, [r0, #12]
  4041e6:	bd70      	pop	{r4, r5, r6, pc}

004041e8 <_Bfree>:
  4041e8:	b570      	push	{r4, r5, r6, lr}
  4041ea:	6a44      	ldr	r4, [r0, #36]	; 0x24
  4041ec:	4606      	mov	r6, r0
  4041ee:	460d      	mov	r5, r1
  4041f0:	b93c      	cbnz	r4, 404202 <_Bfree+0x1a>
  4041f2:	2010      	movs	r0, #16
  4041f4:	f7ff ff68 	bl	4040c8 <malloc>
  4041f8:	6270      	str	r0, [r6, #36]	; 0x24
  4041fa:	6044      	str	r4, [r0, #4]
  4041fc:	6084      	str	r4, [r0, #8]
  4041fe:	6004      	str	r4, [r0, #0]
  404200:	60c4      	str	r4, [r0, #12]
  404202:	b13d      	cbz	r5, 404214 <_Bfree+0x2c>
  404204:	6a73      	ldr	r3, [r6, #36]	; 0x24
  404206:	686a      	ldr	r2, [r5, #4]
  404208:	68db      	ldr	r3, [r3, #12]
  40420a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40420e:	6029      	str	r1, [r5, #0]
  404210:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  404214:	bd70      	pop	{r4, r5, r6, pc}

00404216 <__multadd>:
  404216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40421a:	690d      	ldr	r5, [r1, #16]
  40421c:	461f      	mov	r7, r3
  40421e:	4606      	mov	r6, r0
  404220:	460c      	mov	r4, r1
  404222:	f101 0e14 	add.w	lr, r1, #20
  404226:	2300      	movs	r3, #0
  404228:	f8de 0000 	ldr.w	r0, [lr]
  40422c:	b281      	uxth	r1, r0
  40422e:	fb02 7101 	mla	r1, r2, r1, r7
  404232:	0c0f      	lsrs	r7, r1, #16
  404234:	0c00      	lsrs	r0, r0, #16
  404236:	fb02 7000 	mla	r0, r2, r0, r7
  40423a:	b289      	uxth	r1, r1
  40423c:	3301      	adds	r3, #1
  40423e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  404242:	429d      	cmp	r5, r3
  404244:	ea4f 4710 	mov.w	r7, r0, lsr #16
  404248:	f84e 1b04 	str.w	r1, [lr], #4
  40424c:	dcec      	bgt.n	404228 <__multadd+0x12>
  40424e:	b1d7      	cbz	r7, 404286 <__multadd+0x70>
  404250:	68a3      	ldr	r3, [r4, #8]
  404252:	429d      	cmp	r5, r3
  404254:	db12      	blt.n	40427c <__multadd+0x66>
  404256:	6861      	ldr	r1, [r4, #4]
  404258:	4630      	mov	r0, r6
  40425a:	3101      	adds	r1, #1
  40425c:	f7ff ff90 	bl	404180 <_Balloc>
  404260:	6922      	ldr	r2, [r4, #16]
  404262:	3202      	adds	r2, #2
  404264:	f104 010c 	add.w	r1, r4, #12
  404268:	4680      	mov	r8, r0
  40426a:	0092      	lsls	r2, r2, #2
  40426c:	300c      	adds	r0, #12
  40426e:	f7fe f997 	bl	4025a0 <memcpy>
  404272:	4621      	mov	r1, r4
  404274:	4630      	mov	r0, r6
  404276:	f7ff ffb7 	bl	4041e8 <_Bfree>
  40427a:	4644      	mov	r4, r8
  40427c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  404280:	3501      	adds	r5, #1
  404282:	615f      	str	r7, [r3, #20]
  404284:	6125      	str	r5, [r4, #16]
  404286:	4620      	mov	r0, r4
  404288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040428c <__hi0bits>:
  40428c:	0c02      	lsrs	r2, r0, #16
  40428e:	0412      	lsls	r2, r2, #16
  404290:	4603      	mov	r3, r0
  404292:	b9b2      	cbnz	r2, 4042c2 <__hi0bits+0x36>
  404294:	0403      	lsls	r3, r0, #16
  404296:	2010      	movs	r0, #16
  404298:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40429c:	bf04      	itt	eq
  40429e:	021b      	lsleq	r3, r3, #8
  4042a0:	3008      	addeq	r0, #8
  4042a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4042a6:	bf04      	itt	eq
  4042a8:	011b      	lsleq	r3, r3, #4
  4042aa:	3004      	addeq	r0, #4
  4042ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4042b0:	bf04      	itt	eq
  4042b2:	009b      	lsleq	r3, r3, #2
  4042b4:	3002      	addeq	r0, #2
  4042b6:	2b00      	cmp	r3, #0
  4042b8:	db06      	blt.n	4042c8 <__hi0bits+0x3c>
  4042ba:	005b      	lsls	r3, r3, #1
  4042bc:	d503      	bpl.n	4042c6 <__hi0bits+0x3a>
  4042be:	3001      	adds	r0, #1
  4042c0:	4770      	bx	lr
  4042c2:	2000      	movs	r0, #0
  4042c4:	e7e8      	b.n	404298 <__hi0bits+0xc>
  4042c6:	2020      	movs	r0, #32
  4042c8:	4770      	bx	lr

004042ca <__lo0bits>:
  4042ca:	6803      	ldr	r3, [r0, #0]
  4042cc:	f013 0207 	ands.w	r2, r3, #7
  4042d0:	4601      	mov	r1, r0
  4042d2:	d00b      	beq.n	4042ec <__lo0bits+0x22>
  4042d4:	07da      	lsls	r2, r3, #31
  4042d6:	d423      	bmi.n	404320 <__lo0bits+0x56>
  4042d8:	0798      	lsls	r0, r3, #30
  4042da:	bf49      	itett	mi
  4042dc:	085b      	lsrmi	r3, r3, #1
  4042de:	089b      	lsrpl	r3, r3, #2
  4042e0:	2001      	movmi	r0, #1
  4042e2:	600b      	strmi	r3, [r1, #0]
  4042e4:	bf5c      	itt	pl
  4042e6:	600b      	strpl	r3, [r1, #0]
  4042e8:	2002      	movpl	r0, #2
  4042ea:	4770      	bx	lr
  4042ec:	b298      	uxth	r0, r3
  4042ee:	b9a8      	cbnz	r0, 40431c <__lo0bits+0x52>
  4042f0:	0c1b      	lsrs	r3, r3, #16
  4042f2:	2010      	movs	r0, #16
  4042f4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4042f8:	bf04      	itt	eq
  4042fa:	0a1b      	lsreq	r3, r3, #8
  4042fc:	3008      	addeq	r0, #8
  4042fe:	071a      	lsls	r2, r3, #28
  404300:	bf04      	itt	eq
  404302:	091b      	lsreq	r3, r3, #4
  404304:	3004      	addeq	r0, #4
  404306:	079a      	lsls	r2, r3, #30
  404308:	bf04      	itt	eq
  40430a:	089b      	lsreq	r3, r3, #2
  40430c:	3002      	addeq	r0, #2
  40430e:	07da      	lsls	r2, r3, #31
  404310:	d402      	bmi.n	404318 <__lo0bits+0x4e>
  404312:	085b      	lsrs	r3, r3, #1
  404314:	d006      	beq.n	404324 <__lo0bits+0x5a>
  404316:	3001      	adds	r0, #1
  404318:	600b      	str	r3, [r1, #0]
  40431a:	4770      	bx	lr
  40431c:	4610      	mov	r0, r2
  40431e:	e7e9      	b.n	4042f4 <__lo0bits+0x2a>
  404320:	2000      	movs	r0, #0
  404322:	4770      	bx	lr
  404324:	2020      	movs	r0, #32
  404326:	4770      	bx	lr

00404328 <__i2b>:
  404328:	b510      	push	{r4, lr}
  40432a:	460c      	mov	r4, r1
  40432c:	2101      	movs	r1, #1
  40432e:	f7ff ff27 	bl	404180 <_Balloc>
  404332:	2201      	movs	r2, #1
  404334:	6144      	str	r4, [r0, #20]
  404336:	6102      	str	r2, [r0, #16]
  404338:	bd10      	pop	{r4, pc}

0040433a <__multiply>:
  40433a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40433e:	4614      	mov	r4, r2
  404340:	690a      	ldr	r2, [r1, #16]
  404342:	6923      	ldr	r3, [r4, #16]
  404344:	429a      	cmp	r2, r3
  404346:	bfb8      	it	lt
  404348:	460b      	movlt	r3, r1
  40434a:	4689      	mov	r9, r1
  40434c:	bfbc      	itt	lt
  40434e:	46a1      	movlt	r9, r4
  404350:	461c      	movlt	r4, r3
  404352:	f8d9 7010 	ldr.w	r7, [r9, #16]
  404356:	f8d4 a010 	ldr.w	sl, [r4, #16]
  40435a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40435e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  404362:	eb07 060a 	add.w	r6, r7, sl
  404366:	429e      	cmp	r6, r3
  404368:	bfc8      	it	gt
  40436a:	3101      	addgt	r1, #1
  40436c:	f7ff ff08 	bl	404180 <_Balloc>
  404370:	f100 0514 	add.w	r5, r0, #20
  404374:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  404378:	462b      	mov	r3, r5
  40437a:	2200      	movs	r2, #0
  40437c:	4543      	cmp	r3, r8
  40437e:	d316      	bcc.n	4043ae <__multiply+0x74>
  404380:	f104 0214 	add.w	r2, r4, #20
  404384:	f109 0114 	add.w	r1, r9, #20
  404388:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  40438c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  404390:	9301      	str	r3, [sp, #4]
  404392:	9c01      	ldr	r4, [sp, #4]
  404394:	4294      	cmp	r4, r2
  404396:	4613      	mov	r3, r2
  404398:	d80c      	bhi.n	4043b4 <__multiply+0x7a>
  40439a:	2e00      	cmp	r6, #0
  40439c:	dd03      	ble.n	4043a6 <__multiply+0x6c>
  40439e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  4043a2:	2b00      	cmp	r3, #0
  4043a4:	d054      	beq.n	404450 <__multiply+0x116>
  4043a6:	6106      	str	r6, [r0, #16]
  4043a8:	b003      	add	sp, #12
  4043aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043ae:	f843 2b04 	str.w	r2, [r3], #4
  4043b2:	e7e3      	b.n	40437c <__multiply+0x42>
  4043b4:	f8b3 a000 	ldrh.w	sl, [r3]
  4043b8:	3204      	adds	r2, #4
  4043ba:	f1ba 0f00 	cmp.w	sl, #0
  4043be:	d020      	beq.n	404402 <__multiply+0xc8>
  4043c0:	46ae      	mov	lr, r5
  4043c2:	4689      	mov	r9, r1
  4043c4:	f04f 0c00 	mov.w	ip, #0
  4043c8:	f859 4b04 	ldr.w	r4, [r9], #4
  4043cc:	f8be b000 	ldrh.w	fp, [lr]
  4043d0:	b2a3      	uxth	r3, r4
  4043d2:	fb0a b303 	mla	r3, sl, r3, fp
  4043d6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  4043da:	f8de 4000 	ldr.w	r4, [lr]
  4043de:	4463      	add	r3, ip
  4043e0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  4043e4:	fb0a c40b 	mla	r4, sl, fp, ip
  4043e8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  4043ec:	b29b      	uxth	r3, r3
  4043ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  4043f2:	454f      	cmp	r7, r9
  4043f4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  4043f8:	f84e 3b04 	str.w	r3, [lr], #4
  4043fc:	d8e4      	bhi.n	4043c8 <__multiply+0x8e>
  4043fe:	f8ce c000 	str.w	ip, [lr]
  404402:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  404406:	f1b9 0f00 	cmp.w	r9, #0
  40440a:	d01f      	beq.n	40444c <__multiply+0x112>
  40440c:	682b      	ldr	r3, [r5, #0]
  40440e:	46ae      	mov	lr, r5
  404410:	468c      	mov	ip, r1
  404412:	f04f 0a00 	mov.w	sl, #0
  404416:	f8bc 4000 	ldrh.w	r4, [ip]
  40441a:	f8be b002 	ldrh.w	fp, [lr, #2]
  40441e:	fb09 b404 	mla	r4, r9, r4, fp
  404422:	44a2      	add	sl, r4
  404424:	b29b      	uxth	r3, r3
  404426:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  40442a:	f84e 3b04 	str.w	r3, [lr], #4
  40442e:	f85c 3b04 	ldr.w	r3, [ip], #4
  404432:	f8be 4000 	ldrh.w	r4, [lr]
  404436:	0c1b      	lsrs	r3, r3, #16
  404438:	fb09 4303 	mla	r3, r9, r3, r4
  40443c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  404440:	4567      	cmp	r7, ip
  404442:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  404446:	d8e6      	bhi.n	404416 <__multiply+0xdc>
  404448:	f8ce 3000 	str.w	r3, [lr]
  40444c:	3504      	adds	r5, #4
  40444e:	e7a0      	b.n	404392 <__multiply+0x58>
  404450:	3e01      	subs	r6, #1
  404452:	e7a2      	b.n	40439a <__multiply+0x60>

00404454 <__pow5mult>:
  404454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404458:	4615      	mov	r5, r2
  40445a:	f012 0203 	ands.w	r2, r2, #3
  40445e:	4606      	mov	r6, r0
  404460:	460f      	mov	r7, r1
  404462:	d007      	beq.n	404474 <__pow5mult+0x20>
  404464:	3a01      	subs	r2, #1
  404466:	4c21      	ldr	r4, [pc, #132]	; (4044ec <__pow5mult+0x98>)
  404468:	2300      	movs	r3, #0
  40446a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40446e:	f7ff fed2 	bl	404216 <__multadd>
  404472:	4607      	mov	r7, r0
  404474:	10ad      	asrs	r5, r5, #2
  404476:	d035      	beq.n	4044e4 <__pow5mult+0x90>
  404478:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40447a:	b93c      	cbnz	r4, 40448c <__pow5mult+0x38>
  40447c:	2010      	movs	r0, #16
  40447e:	f7ff fe23 	bl	4040c8 <malloc>
  404482:	6270      	str	r0, [r6, #36]	; 0x24
  404484:	6044      	str	r4, [r0, #4]
  404486:	6084      	str	r4, [r0, #8]
  404488:	6004      	str	r4, [r0, #0]
  40448a:	60c4      	str	r4, [r0, #12]
  40448c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  404490:	f8d8 4008 	ldr.w	r4, [r8, #8]
  404494:	b94c      	cbnz	r4, 4044aa <__pow5mult+0x56>
  404496:	f240 2171 	movw	r1, #625	; 0x271
  40449a:	4630      	mov	r0, r6
  40449c:	f7ff ff44 	bl	404328 <__i2b>
  4044a0:	2300      	movs	r3, #0
  4044a2:	f8c8 0008 	str.w	r0, [r8, #8]
  4044a6:	4604      	mov	r4, r0
  4044a8:	6003      	str	r3, [r0, #0]
  4044aa:	f04f 0800 	mov.w	r8, #0
  4044ae:	07eb      	lsls	r3, r5, #31
  4044b0:	d50a      	bpl.n	4044c8 <__pow5mult+0x74>
  4044b2:	4639      	mov	r1, r7
  4044b4:	4622      	mov	r2, r4
  4044b6:	4630      	mov	r0, r6
  4044b8:	f7ff ff3f 	bl	40433a <__multiply>
  4044bc:	4639      	mov	r1, r7
  4044be:	4681      	mov	r9, r0
  4044c0:	4630      	mov	r0, r6
  4044c2:	f7ff fe91 	bl	4041e8 <_Bfree>
  4044c6:	464f      	mov	r7, r9
  4044c8:	106d      	asrs	r5, r5, #1
  4044ca:	d00b      	beq.n	4044e4 <__pow5mult+0x90>
  4044cc:	6820      	ldr	r0, [r4, #0]
  4044ce:	b938      	cbnz	r0, 4044e0 <__pow5mult+0x8c>
  4044d0:	4622      	mov	r2, r4
  4044d2:	4621      	mov	r1, r4
  4044d4:	4630      	mov	r0, r6
  4044d6:	f7ff ff30 	bl	40433a <__multiply>
  4044da:	6020      	str	r0, [r4, #0]
  4044dc:	f8c0 8000 	str.w	r8, [r0]
  4044e0:	4604      	mov	r4, r0
  4044e2:	e7e4      	b.n	4044ae <__pow5mult+0x5a>
  4044e4:	4638      	mov	r0, r7
  4044e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4044ea:	bf00      	nop
  4044ec:	00405458 	.word	0x00405458

004044f0 <__lshift>:
  4044f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4044f4:	460c      	mov	r4, r1
  4044f6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4044fa:	6923      	ldr	r3, [r4, #16]
  4044fc:	6849      	ldr	r1, [r1, #4]
  4044fe:	eb0a 0903 	add.w	r9, sl, r3
  404502:	68a3      	ldr	r3, [r4, #8]
  404504:	4607      	mov	r7, r0
  404506:	4616      	mov	r6, r2
  404508:	f109 0501 	add.w	r5, r9, #1
  40450c:	42ab      	cmp	r3, r5
  40450e:	db31      	blt.n	404574 <__lshift+0x84>
  404510:	4638      	mov	r0, r7
  404512:	f7ff fe35 	bl	404180 <_Balloc>
  404516:	2200      	movs	r2, #0
  404518:	4680      	mov	r8, r0
  40451a:	f100 0314 	add.w	r3, r0, #20
  40451e:	4611      	mov	r1, r2
  404520:	4552      	cmp	r2, sl
  404522:	db2a      	blt.n	40457a <__lshift+0x8a>
  404524:	6920      	ldr	r0, [r4, #16]
  404526:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  40452a:	f104 0114 	add.w	r1, r4, #20
  40452e:	f016 021f 	ands.w	r2, r6, #31
  404532:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  404536:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  40453a:	d022      	beq.n	404582 <__lshift+0x92>
  40453c:	f1c2 0c20 	rsb	ip, r2, #32
  404540:	2000      	movs	r0, #0
  404542:	680e      	ldr	r6, [r1, #0]
  404544:	4096      	lsls	r6, r2
  404546:	4330      	orrs	r0, r6
  404548:	f843 0b04 	str.w	r0, [r3], #4
  40454c:	f851 0b04 	ldr.w	r0, [r1], #4
  404550:	458e      	cmp	lr, r1
  404552:	fa20 f00c 	lsr.w	r0, r0, ip
  404556:	d8f4      	bhi.n	404542 <__lshift+0x52>
  404558:	6018      	str	r0, [r3, #0]
  40455a:	b108      	cbz	r0, 404560 <__lshift+0x70>
  40455c:	f109 0502 	add.w	r5, r9, #2
  404560:	3d01      	subs	r5, #1
  404562:	4638      	mov	r0, r7
  404564:	f8c8 5010 	str.w	r5, [r8, #16]
  404568:	4621      	mov	r1, r4
  40456a:	f7ff fe3d 	bl	4041e8 <_Bfree>
  40456e:	4640      	mov	r0, r8
  404570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404574:	3101      	adds	r1, #1
  404576:	005b      	lsls	r3, r3, #1
  404578:	e7c8      	b.n	40450c <__lshift+0x1c>
  40457a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40457e:	3201      	adds	r2, #1
  404580:	e7ce      	b.n	404520 <__lshift+0x30>
  404582:	3b04      	subs	r3, #4
  404584:	f851 2b04 	ldr.w	r2, [r1], #4
  404588:	f843 2f04 	str.w	r2, [r3, #4]!
  40458c:	458e      	cmp	lr, r1
  40458e:	d8f9      	bhi.n	404584 <__lshift+0x94>
  404590:	e7e6      	b.n	404560 <__lshift+0x70>

00404592 <__mcmp>:
  404592:	6903      	ldr	r3, [r0, #16]
  404594:	690a      	ldr	r2, [r1, #16]
  404596:	1a9b      	subs	r3, r3, r2
  404598:	b530      	push	{r4, r5, lr}
  40459a:	d10c      	bne.n	4045b6 <__mcmp+0x24>
  40459c:	0092      	lsls	r2, r2, #2
  40459e:	3014      	adds	r0, #20
  4045a0:	3114      	adds	r1, #20
  4045a2:	1884      	adds	r4, r0, r2
  4045a4:	4411      	add	r1, r2
  4045a6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  4045aa:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4045ae:	4295      	cmp	r5, r2
  4045b0:	d003      	beq.n	4045ba <__mcmp+0x28>
  4045b2:	d305      	bcc.n	4045c0 <__mcmp+0x2e>
  4045b4:	2301      	movs	r3, #1
  4045b6:	4618      	mov	r0, r3
  4045b8:	bd30      	pop	{r4, r5, pc}
  4045ba:	42a0      	cmp	r0, r4
  4045bc:	d3f3      	bcc.n	4045a6 <__mcmp+0x14>
  4045be:	e7fa      	b.n	4045b6 <__mcmp+0x24>
  4045c0:	f04f 33ff 	mov.w	r3, #4294967295
  4045c4:	e7f7      	b.n	4045b6 <__mcmp+0x24>

004045c6 <__mdiff>:
  4045c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4045ca:	460d      	mov	r5, r1
  4045cc:	4607      	mov	r7, r0
  4045ce:	4611      	mov	r1, r2
  4045d0:	4628      	mov	r0, r5
  4045d2:	4614      	mov	r4, r2
  4045d4:	f7ff ffdd 	bl	404592 <__mcmp>
  4045d8:	1e06      	subs	r6, r0, #0
  4045da:	d108      	bne.n	4045ee <__mdiff+0x28>
  4045dc:	4631      	mov	r1, r6
  4045de:	4638      	mov	r0, r7
  4045e0:	f7ff fdce 	bl	404180 <_Balloc>
  4045e4:	2301      	movs	r3, #1
  4045e6:	6103      	str	r3, [r0, #16]
  4045e8:	6146      	str	r6, [r0, #20]
  4045ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045ee:	bfa4      	itt	ge
  4045f0:	4623      	movge	r3, r4
  4045f2:	462c      	movge	r4, r5
  4045f4:	4638      	mov	r0, r7
  4045f6:	6861      	ldr	r1, [r4, #4]
  4045f8:	bfa6      	itte	ge
  4045fa:	461d      	movge	r5, r3
  4045fc:	2600      	movge	r6, #0
  4045fe:	2601      	movlt	r6, #1
  404600:	f7ff fdbe 	bl	404180 <_Balloc>
  404604:	692b      	ldr	r3, [r5, #16]
  404606:	60c6      	str	r6, [r0, #12]
  404608:	6926      	ldr	r6, [r4, #16]
  40460a:	f105 0914 	add.w	r9, r5, #20
  40460e:	f104 0214 	add.w	r2, r4, #20
  404612:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  404616:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40461a:	f100 0514 	add.w	r5, r0, #20
  40461e:	f04f 0c00 	mov.w	ip, #0
  404622:	f852 ab04 	ldr.w	sl, [r2], #4
  404626:	f859 4b04 	ldr.w	r4, [r9], #4
  40462a:	fa1c f18a 	uxtah	r1, ip, sl
  40462e:	b2a3      	uxth	r3, r4
  404630:	1ac9      	subs	r1, r1, r3
  404632:	0c23      	lsrs	r3, r4, #16
  404634:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  404638:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40463c:	b289      	uxth	r1, r1
  40463e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  404642:	45c8      	cmp	r8, r9
  404644:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  404648:	4696      	mov	lr, r2
  40464a:	f845 3b04 	str.w	r3, [r5], #4
  40464e:	d8e8      	bhi.n	404622 <__mdiff+0x5c>
  404650:	45be      	cmp	lr, r7
  404652:	d305      	bcc.n	404660 <__mdiff+0x9a>
  404654:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404658:	b18b      	cbz	r3, 40467e <__mdiff+0xb8>
  40465a:	6106      	str	r6, [r0, #16]
  40465c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404660:	f85e 1b04 	ldr.w	r1, [lr], #4
  404664:	fa1c f381 	uxtah	r3, ip, r1
  404668:	141a      	asrs	r2, r3, #16
  40466a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  40466e:	b29b      	uxth	r3, r3
  404670:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404674:	ea4f 4c22 	mov.w	ip, r2, asr #16
  404678:	f845 3b04 	str.w	r3, [r5], #4
  40467c:	e7e8      	b.n	404650 <__mdiff+0x8a>
  40467e:	3e01      	subs	r6, #1
  404680:	e7e8      	b.n	404654 <__mdiff+0x8e>

00404682 <__d2b>:
  404682:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  404686:	2101      	movs	r1, #1
  404688:	461c      	mov	r4, r3
  40468a:	4690      	mov	r8, r2
  40468c:	9e08      	ldr	r6, [sp, #32]
  40468e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404690:	f7ff fd76 	bl	404180 <_Balloc>
  404694:	f3c4 0213 	ubfx	r2, r4, #0, #20
  404698:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40469c:	4607      	mov	r7, r0
  40469e:	bb34      	cbnz	r4, 4046ee <__d2b+0x6c>
  4046a0:	9201      	str	r2, [sp, #4]
  4046a2:	f1b8 0f00 	cmp.w	r8, #0
  4046a6:	d027      	beq.n	4046f8 <__d2b+0x76>
  4046a8:	a802      	add	r0, sp, #8
  4046aa:	f840 8d08 	str.w	r8, [r0, #-8]!
  4046ae:	f7ff fe0c 	bl	4042ca <__lo0bits>
  4046b2:	9900      	ldr	r1, [sp, #0]
  4046b4:	b1f0      	cbz	r0, 4046f4 <__d2b+0x72>
  4046b6:	9a01      	ldr	r2, [sp, #4]
  4046b8:	f1c0 0320 	rsb	r3, r0, #32
  4046bc:	fa02 f303 	lsl.w	r3, r2, r3
  4046c0:	430b      	orrs	r3, r1
  4046c2:	40c2      	lsrs	r2, r0
  4046c4:	617b      	str	r3, [r7, #20]
  4046c6:	9201      	str	r2, [sp, #4]
  4046c8:	9b01      	ldr	r3, [sp, #4]
  4046ca:	61bb      	str	r3, [r7, #24]
  4046cc:	2b00      	cmp	r3, #0
  4046ce:	bf14      	ite	ne
  4046d0:	2102      	movne	r1, #2
  4046d2:	2101      	moveq	r1, #1
  4046d4:	6139      	str	r1, [r7, #16]
  4046d6:	b1c4      	cbz	r4, 40470a <__d2b+0x88>
  4046d8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  4046dc:	4404      	add	r4, r0
  4046de:	6034      	str	r4, [r6, #0]
  4046e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4046e4:	6028      	str	r0, [r5, #0]
  4046e6:	4638      	mov	r0, r7
  4046e8:	b002      	add	sp, #8
  4046ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4046ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4046f2:	e7d5      	b.n	4046a0 <__d2b+0x1e>
  4046f4:	6179      	str	r1, [r7, #20]
  4046f6:	e7e7      	b.n	4046c8 <__d2b+0x46>
  4046f8:	a801      	add	r0, sp, #4
  4046fa:	f7ff fde6 	bl	4042ca <__lo0bits>
  4046fe:	9b01      	ldr	r3, [sp, #4]
  404700:	617b      	str	r3, [r7, #20]
  404702:	2101      	movs	r1, #1
  404704:	6139      	str	r1, [r7, #16]
  404706:	3020      	adds	r0, #32
  404708:	e7e5      	b.n	4046d6 <__d2b+0x54>
  40470a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40470e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  404712:	6030      	str	r0, [r6, #0]
  404714:	6918      	ldr	r0, [r3, #16]
  404716:	f7ff fdb9 	bl	40428c <__hi0bits>
  40471a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40471e:	e7e1      	b.n	4046e4 <__d2b+0x62>

00404720 <_calloc_r>:
  404720:	b538      	push	{r3, r4, r5, lr}
  404722:	fb02 f401 	mul.w	r4, r2, r1
  404726:	4621      	mov	r1, r4
  404728:	f000 f856 	bl	4047d8 <_malloc_r>
  40472c:	4605      	mov	r5, r0
  40472e:	b118      	cbz	r0, 404738 <_calloc_r+0x18>
  404730:	4622      	mov	r2, r4
  404732:	2100      	movs	r1, #0
  404734:	f7fd ff3f 	bl	4025b6 <memset>
  404738:	4628      	mov	r0, r5
  40473a:	bd38      	pop	{r3, r4, r5, pc}

0040473c <_free_r>:
  40473c:	b538      	push	{r3, r4, r5, lr}
  40473e:	4605      	mov	r5, r0
  404740:	2900      	cmp	r1, #0
  404742:	d045      	beq.n	4047d0 <_free_r+0x94>
  404744:	f851 3c04 	ldr.w	r3, [r1, #-4]
  404748:	1f0c      	subs	r4, r1, #4
  40474a:	2b00      	cmp	r3, #0
  40474c:	bfb8      	it	lt
  40474e:	18e4      	addlt	r4, r4, r3
  404750:	f000 fb5a 	bl	404e08 <__malloc_lock>
  404754:	4a1f      	ldr	r2, [pc, #124]	; (4047d4 <_free_r+0x98>)
  404756:	6813      	ldr	r3, [r2, #0]
  404758:	4610      	mov	r0, r2
  40475a:	b933      	cbnz	r3, 40476a <_free_r+0x2e>
  40475c:	6063      	str	r3, [r4, #4]
  40475e:	6014      	str	r4, [r2, #0]
  404760:	4628      	mov	r0, r5
  404762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404766:	f000 bb50 	b.w	404e0a <__malloc_unlock>
  40476a:	42a3      	cmp	r3, r4
  40476c:	d90c      	bls.n	404788 <_free_r+0x4c>
  40476e:	6821      	ldr	r1, [r4, #0]
  404770:	1862      	adds	r2, r4, r1
  404772:	4293      	cmp	r3, r2
  404774:	bf04      	itt	eq
  404776:	681a      	ldreq	r2, [r3, #0]
  404778:	685b      	ldreq	r3, [r3, #4]
  40477a:	6063      	str	r3, [r4, #4]
  40477c:	bf04      	itt	eq
  40477e:	1852      	addeq	r2, r2, r1
  404780:	6022      	streq	r2, [r4, #0]
  404782:	6004      	str	r4, [r0, #0]
  404784:	e7ec      	b.n	404760 <_free_r+0x24>
  404786:	4613      	mov	r3, r2
  404788:	685a      	ldr	r2, [r3, #4]
  40478a:	b10a      	cbz	r2, 404790 <_free_r+0x54>
  40478c:	42a2      	cmp	r2, r4
  40478e:	d9fa      	bls.n	404786 <_free_r+0x4a>
  404790:	6819      	ldr	r1, [r3, #0]
  404792:	1858      	adds	r0, r3, r1
  404794:	42a0      	cmp	r0, r4
  404796:	d10b      	bne.n	4047b0 <_free_r+0x74>
  404798:	6820      	ldr	r0, [r4, #0]
  40479a:	4401      	add	r1, r0
  40479c:	1858      	adds	r0, r3, r1
  40479e:	4282      	cmp	r2, r0
  4047a0:	6019      	str	r1, [r3, #0]
  4047a2:	d1dd      	bne.n	404760 <_free_r+0x24>
  4047a4:	6810      	ldr	r0, [r2, #0]
  4047a6:	6852      	ldr	r2, [r2, #4]
  4047a8:	605a      	str	r2, [r3, #4]
  4047aa:	4401      	add	r1, r0
  4047ac:	6019      	str	r1, [r3, #0]
  4047ae:	e7d7      	b.n	404760 <_free_r+0x24>
  4047b0:	d902      	bls.n	4047b8 <_free_r+0x7c>
  4047b2:	230c      	movs	r3, #12
  4047b4:	602b      	str	r3, [r5, #0]
  4047b6:	e7d3      	b.n	404760 <_free_r+0x24>
  4047b8:	6820      	ldr	r0, [r4, #0]
  4047ba:	1821      	adds	r1, r4, r0
  4047bc:	428a      	cmp	r2, r1
  4047be:	bf04      	itt	eq
  4047c0:	6811      	ldreq	r1, [r2, #0]
  4047c2:	6852      	ldreq	r2, [r2, #4]
  4047c4:	6062      	str	r2, [r4, #4]
  4047c6:	bf04      	itt	eq
  4047c8:	1809      	addeq	r1, r1, r0
  4047ca:	6021      	streq	r1, [r4, #0]
  4047cc:	605c      	str	r4, [r3, #4]
  4047ce:	e7c7      	b.n	404760 <_free_r+0x24>
  4047d0:	bd38      	pop	{r3, r4, r5, pc}
  4047d2:	bf00      	nop
  4047d4:	204002b8 	.word	0x204002b8

004047d8 <_malloc_r>:
  4047d8:	b570      	push	{r4, r5, r6, lr}
  4047da:	1ccd      	adds	r5, r1, #3
  4047dc:	f025 0503 	bic.w	r5, r5, #3
  4047e0:	3508      	adds	r5, #8
  4047e2:	2d0c      	cmp	r5, #12
  4047e4:	bf38      	it	cc
  4047e6:	250c      	movcc	r5, #12
  4047e8:	2d00      	cmp	r5, #0
  4047ea:	4606      	mov	r6, r0
  4047ec:	db01      	blt.n	4047f2 <_malloc_r+0x1a>
  4047ee:	42a9      	cmp	r1, r5
  4047f0:	d903      	bls.n	4047fa <_malloc_r+0x22>
  4047f2:	230c      	movs	r3, #12
  4047f4:	6033      	str	r3, [r6, #0]
  4047f6:	2000      	movs	r0, #0
  4047f8:	bd70      	pop	{r4, r5, r6, pc}
  4047fa:	f000 fb05 	bl	404e08 <__malloc_lock>
  4047fe:	4a23      	ldr	r2, [pc, #140]	; (40488c <_malloc_r+0xb4>)
  404800:	6814      	ldr	r4, [r2, #0]
  404802:	4621      	mov	r1, r4
  404804:	b991      	cbnz	r1, 40482c <_malloc_r+0x54>
  404806:	4c22      	ldr	r4, [pc, #136]	; (404890 <_malloc_r+0xb8>)
  404808:	6823      	ldr	r3, [r4, #0]
  40480a:	b91b      	cbnz	r3, 404814 <_malloc_r+0x3c>
  40480c:	4630      	mov	r0, r6
  40480e:	f000 f97f 	bl	404b10 <_sbrk_r>
  404812:	6020      	str	r0, [r4, #0]
  404814:	4629      	mov	r1, r5
  404816:	4630      	mov	r0, r6
  404818:	f000 f97a 	bl	404b10 <_sbrk_r>
  40481c:	1c43      	adds	r3, r0, #1
  40481e:	d126      	bne.n	40486e <_malloc_r+0x96>
  404820:	230c      	movs	r3, #12
  404822:	6033      	str	r3, [r6, #0]
  404824:	4630      	mov	r0, r6
  404826:	f000 faf0 	bl	404e0a <__malloc_unlock>
  40482a:	e7e4      	b.n	4047f6 <_malloc_r+0x1e>
  40482c:	680b      	ldr	r3, [r1, #0]
  40482e:	1b5b      	subs	r3, r3, r5
  404830:	d41a      	bmi.n	404868 <_malloc_r+0x90>
  404832:	2b0b      	cmp	r3, #11
  404834:	d90f      	bls.n	404856 <_malloc_r+0x7e>
  404836:	600b      	str	r3, [r1, #0]
  404838:	50cd      	str	r5, [r1, r3]
  40483a:	18cc      	adds	r4, r1, r3
  40483c:	4630      	mov	r0, r6
  40483e:	f000 fae4 	bl	404e0a <__malloc_unlock>
  404842:	f104 000b 	add.w	r0, r4, #11
  404846:	1d23      	adds	r3, r4, #4
  404848:	f020 0007 	bic.w	r0, r0, #7
  40484c:	1ac3      	subs	r3, r0, r3
  40484e:	d01b      	beq.n	404888 <_malloc_r+0xb0>
  404850:	425a      	negs	r2, r3
  404852:	50e2      	str	r2, [r4, r3]
  404854:	bd70      	pop	{r4, r5, r6, pc}
  404856:	428c      	cmp	r4, r1
  404858:	bf0d      	iteet	eq
  40485a:	6863      	ldreq	r3, [r4, #4]
  40485c:	684b      	ldrne	r3, [r1, #4]
  40485e:	6063      	strne	r3, [r4, #4]
  404860:	6013      	streq	r3, [r2, #0]
  404862:	bf18      	it	ne
  404864:	460c      	movne	r4, r1
  404866:	e7e9      	b.n	40483c <_malloc_r+0x64>
  404868:	460c      	mov	r4, r1
  40486a:	6849      	ldr	r1, [r1, #4]
  40486c:	e7ca      	b.n	404804 <_malloc_r+0x2c>
  40486e:	1cc4      	adds	r4, r0, #3
  404870:	f024 0403 	bic.w	r4, r4, #3
  404874:	42a0      	cmp	r0, r4
  404876:	d005      	beq.n	404884 <_malloc_r+0xac>
  404878:	1a21      	subs	r1, r4, r0
  40487a:	4630      	mov	r0, r6
  40487c:	f000 f948 	bl	404b10 <_sbrk_r>
  404880:	3001      	adds	r0, #1
  404882:	d0cd      	beq.n	404820 <_malloc_r+0x48>
  404884:	6025      	str	r5, [r4, #0]
  404886:	e7d9      	b.n	40483c <_malloc_r+0x64>
  404888:	bd70      	pop	{r4, r5, r6, pc}
  40488a:	bf00      	nop
  40488c:	204002b8 	.word	0x204002b8
  404890:	204002bc 	.word	0x204002bc

00404894 <__sfputc_r>:
  404894:	6893      	ldr	r3, [r2, #8]
  404896:	3b01      	subs	r3, #1
  404898:	2b00      	cmp	r3, #0
  40489a:	b410      	push	{r4}
  40489c:	6093      	str	r3, [r2, #8]
  40489e:	da08      	bge.n	4048b2 <__sfputc_r+0x1e>
  4048a0:	6994      	ldr	r4, [r2, #24]
  4048a2:	42a3      	cmp	r3, r4
  4048a4:	db02      	blt.n	4048ac <__sfputc_r+0x18>
  4048a6:	b2cb      	uxtb	r3, r1
  4048a8:	2b0a      	cmp	r3, #10
  4048aa:	d102      	bne.n	4048b2 <__sfputc_r+0x1e>
  4048ac:	bc10      	pop	{r4}
  4048ae:	f000 b983 	b.w	404bb8 <__swbuf_r>
  4048b2:	6813      	ldr	r3, [r2, #0]
  4048b4:	1c58      	adds	r0, r3, #1
  4048b6:	6010      	str	r0, [r2, #0]
  4048b8:	7019      	strb	r1, [r3, #0]
  4048ba:	b2c8      	uxtb	r0, r1
  4048bc:	bc10      	pop	{r4}
  4048be:	4770      	bx	lr

004048c0 <__sfputs_r>:
  4048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4048c2:	4606      	mov	r6, r0
  4048c4:	460f      	mov	r7, r1
  4048c6:	4614      	mov	r4, r2
  4048c8:	18d5      	adds	r5, r2, r3
  4048ca:	42ac      	cmp	r4, r5
  4048cc:	d101      	bne.n	4048d2 <__sfputs_r+0x12>
  4048ce:	2000      	movs	r0, #0
  4048d0:	e007      	b.n	4048e2 <__sfputs_r+0x22>
  4048d2:	463a      	mov	r2, r7
  4048d4:	f814 1b01 	ldrb.w	r1, [r4], #1
  4048d8:	4630      	mov	r0, r6
  4048da:	f7ff ffdb 	bl	404894 <__sfputc_r>
  4048de:	1c43      	adds	r3, r0, #1
  4048e0:	d1f3      	bne.n	4048ca <__sfputs_r+0xa>
  4048e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004048e4 <_vfiprintf_r>:
  4048e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4048e8:	b09d      	sub	sp, #116	; 0x74
  4048ea:	460c      	mov	r4, r1
  4048ec:	4617      	mov	r7, r2
  4048ee:	9303      	str	r3, [sp, #12]
  4048f0:	4606      	mov	r6, r0
  4048f2:	b118      	cbz	r0, 4048fc <_vfiprintf_r+0x18>
  4048f4:	6983      	ldr	r3, [r0, #24]
  4048f6:	b90b      	cbnz	r3, 4048fc <_vfiprintf_r+0x18>
  4048f8:	f7ff faea 	bl	403ed0 <__sinit>
  4048fc:	4b7c      	ldr	r3, [pc, #496]	; (404af0 <_vfiprintf_r+0x20c>)
  4048fe:	429c      	cmp	r4, r3
  404900:	d157      	bne.n	4049b2 <_vfiprintf_r+0xce>
  404902:	6874      	ldr	r4, [r6, #4]
  404904:	89a3      	ldrh	r3, [r4, #12]
  404906:	0718      	lsls	r0, r3, #28
  404908:	d55d      	bpl.n	4049c6 <_vfiprintf_r+0xe2>
  40490a:	6923      	ldr	r3, [r4, #16]
  40490c:	2b00      	cmp	r3, #0
  40490e:	d05a      	beq.n	4049c6 <_vfiprintf_r+0xe2>
  404910:	2300      	movs	r3, #0
  404912:	9309      	str	r3, [sp, #36]	; 0x24
  404914:	2320      	movs	r3, #32
  404916:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40491a:	2330      	movs	r3, #48	; 0x30
  40491c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  404920:	f04f 0b01 	mov.w	fp, #1
  404924:	46b8      	mov	r8, r7
  404926:	4645      	mov	r5, r8
  404928:	f815 3b01 	ldrb.w	r3, [r5], #1
  40492c:	2b00      	cmp	r3, #0
  40492e:	d155      	bne.n	4049dc <_vfiprintf_r+0xf8>
  404930:	ebb8 0a07 	subs.w	sl, r8, r7
  404934:	d00b      	beq.n	40494e <_vfiprintf_r+0x6a>
  404936:	4653      	mov	r3, sl
  404938:	463a      	mov	r2, r7
  40493a:	4621      	mov	r1, r4
  40493c:	4630      	mov	r0, r6
  40493e:	f7ff ffbf 	bl	4048c0 <__sfputs_r>
  404942:	3001      	adds	r0, #1
  404944:	f000 80c4 	beq.w	404ad0 <_vfiprintf_r+0x1ec>
  404948:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40494a:	4453      	add	r3, sl
  40494c:	9309      	str	r3, [sp, #36]	; 0x24
  40494e:	f898 3000 	ldrb.w	r3, [r8]
  404952:	2b00      	cmp	r3, #0
  404954:	f000 80bc 	beq.w	404ad0 <_vfiprintf_r+0x1ec>
  404958:	2300      	movs	r3, #0
  40495a:	f04f 32ff 	mov.w	r2, #4294967295
  40495e:	9304      	str	r3, [sp, #16]
  404960:	9307      	str	r3, [sp, #28]
  404962:	9205      	str	r2, [sp, #20]
  404964:	9306      	str	r3, [sp, #24]
  404966:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40496a:	931a      	str	r3, [sp, #104]	; 0x68
  40496c:	2205      	movs	r2, #5
  40496e:	7829      	ldrb	r1, [r5, #0]
  404970:	4860      	ldr	r0, [pc, #384]	; (404af4 <_vfiprintf_r+0x210>)
  404972:	f7ff fbb5 	bl	4040e0 <memchr>
  404976:	f105 0801 	add.w	r8, r5, #1
  40497a:	9b04      	ldr	r3, [sp, #16]
  40497c:	2800      	cmp	r0, #0
  40497e:	d131      	bne.n	4049e4 <_vfiprintf_r+0x100>
  404980:	06d9      	lsls	r1, r3, #27
  404982:	bf44      	itt	mi
  404984:	2220      	movmi	r2, #32
  404986:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40498a:	071a      	lsls	r2, r3, #28
  40498c:	bf44      	itt	mi
  40498e:	222b      	movmi	r2, #43	; 0x2b
  404990:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404994:	782a      	ldrb	r2, [r5, #0]
  404996:	2a2a      	cmp	r2, #42	; 0x2a
  404998:	d02c      	beq.n	4049f4 <_vfiprintf_r+0x110>
  40499a:	9a07      	ldr	r2, [sp, #28]
  40499c:	2100      	movs	r1, #0
  40499e:	200a      	movs	r0, #10
  4049a0:	46a8      	mov	r8, r5
  4049a2:	3501      	adds	r5, #1
  4049a4:	f898 3000 	ldrb.w	r3, [r8]
  4049a8:	3b30      	subs	r3, #48	; 0x30
  4049aa:	2b09      	cmp	r3, #9
  4049ac:	d96d      	bls.n	404a8a <_vfiprintf_r+0x1a6>
  4049ae:	b371      	cbz	r1, 404a0e <_vfiprintf_r+0x12a>
  4049b0:	e026      	b.n	404a00 <_vfiprintf_r+0x11c>
  4049b2:	4b51      	ldr	r3, [pc, #324]	; (404af8 <_vfiprintf_r+0x214>)
  4049b4:	429c      	cmp	r4, r3
  4049b6:	d101      	bne.n	4049bc <_vfiprintf_r+0xd8>
  4049b8:	68b4      	ldr	r4, [r6, #8]
  4049ba:	e7a3      	b.n	404904 <_vfiprintf_r+0x20>
  4049bc:	4b4f      	ldr	r3, [pc, #316]	; (404afc <_vfiprintf_r+0x218>)
  4049be:	429c      	cmp	r4, r3
  4049c0:	bf08      	it	eq
  4049c2:	68f4      	ldreq	r4, [r6, #12]
  4049c4:	e79e      	b.n	404904 <_vfiprintf_r+0x20>
  4049c6:	4621      	mov	r1, r4
  4049c8:	4630      	mov	r0, r6
  4049ca:	f000 f959 	bl	404c80 <__swsetup_r>
  4049ce:	2800      	cmp	r0, #0
  4049d0:	d09e      	beq.n	404910 <_vfiprintf_r+0x2c>
  4049d2:	f04f 30ff 	mov.w	r0, #4294967295
  4049d6:	b01d      	add	sp, #116	; 0x74
  4049d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049dc:	2b25      	cmp	r3, #37	; 0x25
  4049de:	d0a7      	beq.n	404930 <_vfiprintf_r+0x4c>
  4049e0:	46a8      	mov	r8, r5
  4049e2:	e7a0      	b.n	404926 <_vfiprintf_r+0x42>
  4049e4:	4a43      	ldr	r2, [pc, #268]	; (404af4 <_vfiprintf_r+0x210>)
  4049e6:	1a80      	subs	r0, r0, r2
  4049e8:	fa0b f000 	lsl.w	r0, fp, r0
  4049ec:	4318      	orrs	r0, r3
  4049ee:	9004      	str	r0, [sp, #16]
  4049f0:	4645      	mov	r5, r8
  4049f2:	e7bb      	b.n	40496c <_vfiprintf_r+0x88>
  4049f4:	9a03      	ldr	r2, [sp, #12]
  4049f6:	1d11      	adds	r1, r2, #4
  4049f8:	6812      	ldr	r2, [r2, #0]
  4049fa:	9103      	str	r1, [sp, #12]
  4049fc:	2a00      	cmp	r2, #0
  4049fe:	db01      	blt.n	404a04 <_vfiprintf_r+0x120>
  404a00:	9207      	str	r2, [sp, #28]
  404a02:	e004      	b.n	404a0e <_vfiprintf_r+0x12a>
  404a04:	4252      	negs	r2, r2
  404a06:	f043 0302 	orr.w	r3, r3, #2
  404a0a:	9207      	str	r2, [sp, #28]
  404a0c:	9304      	str	r3, [sp, #16]
  404a0e:	f898 3000 	ldrb.w	r3, [r8]
  404a12:	2b2e      	cmp	r3, #46	; 0x2e
  404a14:	d110      	bne.n	404a38 <_vfiprintf_r+0x154>
  404a16:	f898 3001 	ldrb.w	r3, [r8, #1]
  404a1a:	2b2a      	cmp	r3, #42	; 0x2a
  404a1c:	f108 0101 	add.w	r1, r8, #1
  404a20:	d137      	bne.n	404a92 <_vfiprintf_r+0x1ae>
  404a22:	9b03      	ldr	r3, [sp, #12]
  404a24:	1d1a      	adds	r2, r3, #4
  404a26:	681b      	ldr	r3, [r3, #0]
  404a28:	9203      	str	r2, [sp, #12]
  404a2a:	2b00      	cmp	r3, #0
  404a2c:	bfb8      	it	lt
  404a2e:	f04f 33ff 	movlt.w	r3, #4294967295
  404a32:	f108 0802 	add.w	r8, r8, #2
  404a36:	9305      	str	r3, [sp, #20]
  404a38:	4d31      	ldr	r5, [pc, #196]	; (404b00 <_vfiprintf_r+0x21c>)
  404a3a:	f898 1000 	ldrb.w	r1, [r8]
  404a3e:	2203      	movs	r2, #3
  404a40:	4628      	mov	r0, r5
  404a42:	f7ff fb4d 	bl	4040e0 <memchr>
  404a46:	b140      	cbz	r0, 404a5a <_vfiprintf_r+0x176>
  404a48:	2340      	movs	r3, #64	; 0x40
  404a4a:	1b40      	subs	r0, r0, r5
  404a4c:	fa03 f000 	lsl.w	r0, r3, r0
  404a50:	9b04      	ldr	r3, [sp, #16]
  404a52:	4303      	orrs	r3, r0
  404a54:	9304      	str	r3, [sp, #16]
  404a56:	f108 0801 	add.w	r8, r8, #1
  404a5a:	f898 1000 	ldrb.w	r1, [r8]
  404a5e:	4829      	ldr	r0, [pc, #164]	; (404b04 <_vfiprintf_r+0x220>)
  404a60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  404a64:	2206      	movs	r2, #6
  404a66:	f108 0701 	add.w	r7, r8, #1
  404a6a:	f7ff fb39 	bl	4040e0 <memchr>
  404a6e:	2800      	cmp	r0, #0
  404a70:	d034      	beq.n	404adc <_vfiprintf_r+0x1f8>
  404a72:	4b25      	ldr	r3, [pc, #148]	; (404b08 <_vfiprintf_r+0x224>)
  404a74:	bb03      	cbnz	r3, 404ab8 <_vfiprintf_r+0x1d4>
  404a76:	9b03      	ldr	r3, [sp, #12]
  404a78:	3307      	adds	r3, #7
  404a7a:	f023 0307 	bic.w	r3, r3, #7
  404a7e:	3308      	adds	r3, #8
  404a80:	9303      	str	r3, [sp, #12]
  404a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404a84:	444b      	add	r3, r9
  404a86:	9309      	str	r3, [sp, #36]	; 0x24
  404a88:	e74c      	b.n	404924 <_vfiprintf_r+0x40>
  404a8a:	fb00 3202 	mla	r2, r0, r2, r3
  404a8e:	2101      	movs	r1, #1
  404a90:	e786      	b.n	4049a0 <_vfiprintf_r+0xbc>
  404a92:	2300      	movs	r3, #0
  404a94:	9305      	str	r3, [sp, #20]
  404a96:	4618      	mov	r0, r3
  404a98:	250a      	movs	r5, #10
  404a9a:	4688      	mov	r8, r1
  404a9c:	3101      	adds	r1, #1
  404a9e:	f898 2000 	ldrb.w	r2, [r8]
  404aa2:	3a30      	subs	r2, #48	; 0x30
  404aa4:	2a09      	cmp	r2, #9
  404aa6:	d903      	bls.n	404ab0 <_vfiprintf_r+0x1cc>
  404aa8:	2b00      	cmp	r3, #0
  404aaa:	d0c5      	beq.n	404a38 <_vfiprintf_r+0x154>
  404aac:	9005      	str	r0, [sp, #20]
  404aae:	e7c3      	b.n	404a38 <_vfiprintf_r+0x154>
  404ab0:	fb05 2000 	mla	r0, r5, r0, r2
  404ab4:	2301      	movs	r3, #1
  404ab6:	e7f0      	b.n	404a9a <_vfiprintf_r+0x1b6>
  404ab8:	ab03      	add	r3, sp, #12
  404aba:	9300      	str	r3, [sp, #0]
  404abc:	4622      	mov	r2, r4
  404abe:	4b13      	ldr	r3, [pc, #76]	; (404b0c <_vfiprintf_r+0x228>)
  404ac0:	a904      	add	r1, sp, #16
  404ac2:	4630      	mov	r0, r6
  404ac4:	f7fd fe10 	bl	4026e8 <_printf_float>
  404ac8:	f1b0 3fff 	cmp.w	r0, #4294967295
  404acc:	4681      	mov	r9, r0
  404ace:	d1d8      	bne.n	404a82 <_vfiprintf_r+0x19e>
  404ad0:	89a3      	ldrh	r3, [r4, #12]
  404ad2:	065b      	lsls	r3, r3, #25
  404ad4:	f53f af7d 	bmi.w	4049d2 <_vfiprintf_r+0xee>
  404ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
  404ada:	e77c      	b.n	4049d6 <_vfiprintf_r+0xf2>
  404adc:	ab03      	add	r3, sp, #12
  404ade:	9300      	str	r3, [sp, #0]
  404ae0:	4622      	mov	r2, r4
  404ae2:	4b0a      	ldr	r3, [pc, #40]	; (404b0c <_vfiprintf_r+0x228>)
  404ae4:	a904      	add	r1, sp, #16
  404ae6:	4630      	mov	r0, r6
  404ae8:	f7fe f8ac 	bl	402c44 <_printf_i>
  404aec:	e7ec      	b.n	404ac8 <_vfiprintf_r+0x1e4>
  404aee:	bf00      	nop
  404af0:	00405324 	.word	0x00405324
  404af4:	00405464 	.word	0x00405464
  404af8:	00405344 	.word	0x00405344
  404afc:	00405304 	.word	0x00405304
  404b00:	0040546a 	.word	0x0040546a
  404b04:	0040546e 	.word	0x0040546e
  404b08:	004026e9 	.word	0x004026e9
  404b0c:	004048c1 	.word	0x004048c1

00404b10 <_sbrk_r>:
  404b10:	b538      	push	{r3, r4, r5, lr}
  404b12:	4c06      	ldr	r4, [pc, #24]	; (404b2c <_sbrk_r+0x1c>)
  404b14:	2300      	movs	r3, #0
  404b16:	4605      	mov	r5, r0
  404b18:	4608      	mov	r0, r1
  404b1a:	6023      	str	r3, [r4, #0]
  404b1c:	f7fc f9c6 	bl	400eac <_sbrk>
  404b20:	1c43      	adds	r3, r0, #1
  404b22:	d102      	bne.n	404b2a <_sbrk_r+0x1a>
  404b24:	6823      	ldr	r3, [r4, #0]
  404b26:	b103      	cbz	r3, 404b2a <_sbrk_r+0x1a>
  404b28:	602b      	str	r3, [r5, #0]
  404b2a:	bd38      	pop	{r3, r4, r5, pc}
  404b2c:	2040036c 	.word	0x2040036c

00404b30 <__sread>:
  404b30:	b510      	push	{r4, lr}
  404b32:	460c      	mov	r4, r1
  404b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404b38:	f000 f968 	bl	404e0c <_read_r>
  404b3c:	2800      	cmp	r0, #0
  404b3e:	bfab      	itete	ge
  404b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  404b42:	89a3      	ldrhlt	r3, [r4, #12]
  404b44:	181b      	addge	r3, r3, r0
  404b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  404b4a:	bfac      	ite	ge
  404b4c:	6563      	strge	r3, [r4, #84]	; 0x54
  404b4e:	81a3      	strhlt	r3, [r4, #12]
  404b50:	bd10      	pop	{r4, pc}

00404b52 <__swrite>:
  404b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404b56:	461f      	mov	r7, r3
  404b58:	898b      	ldrh	r3, [r1, #12]
  404b5a:	05db      	lsls	r3, r3, #23
  404b5c:	4605      	mov	r5, r0
  404b5e:	460c      	mov	r4, r1
  404b60:	4616      	mov	r6, r2
  404b62:	d505      	bpl.n	404b70 <__swrite+0x1e>
  404b64:	2302      	movs	r3, #2
  404b66:	2200      	movs	r2, #0
  404b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404b6c:	f000 f928 	bl	404dc0 <_lseek_r>
  404b70:	89a3      	ldrh	r3, [r4, #12]
  404b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404b7a:	81a3      	strh	r3, [r4, #12]
  404b7c:	4632      	mov	r2, r6
  404b7e:	463b      	mov	r3, r7
  404b80:	4628      	mov	r0, r5
  404b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404b86:	f000 b869 	b.w	404c5c <_write_r>

00404b8a <__sseek>:
  404b8a:	b510      	push	{r4, lr}
  404b8c:	460c      	mov	r4, r1
  404b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404b92:	f000 f915 	bl	404dc0 <_lseek_r>
  404b96:	1c43      	adds	r3, r0, #1
  404b98:	89a3      	ldrh	r3, [r4, #12]
  404b9a:	bf15      	itete	ne
  404b9c:	6560      	strne	r0, [r4, #84]	; 0x54
  404b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404ba6:	81a3      	strheq	r3, [r4, #12]
  404ba8:	bf18      	it	ne
  404baa:	81a3      	strhne	r3, [r4, #12]
  404bac:	bd10      	pop	{r4, pc}

00404bae <__sclose>:
  404bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404bb2:	f000 b8d3 	b.w	404d5c <_close_r>
	...

00404bb8 <__swbuf_r>:
  404bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404bba:	460e      	mov	r6, r1
  404bbc:	4614      	mov	r4, r2
  404bbe:	4605      	mov	r5, r0
  404bc0:	b118      	cbz	r0, 404bca <__swbuf_r+0x12>
  404bc2:	6983      	ldr	r3, [r0, #24]
  404bc4:	b90b      	cbnz	r3, 404bca <__swbuf_r+0x12>
  404bc6:	f7ff f983 	bl	403ed0 <__sinit>
  404bca:	4b21      	ldr	r3, [pc, #132]	; (404c50 <__swbuf_r+0x98>)
  404bcc:	429c      	cmp	r4, r3
  404bce:	d12a      	bne.n	404c26 <__swbuf_r+0x6e>
  404bd0:	686c      	ldr	r4, [r5, #4]
  404bd2:	69a3      	ldr	r3, [r4, #24]
  404bd4:	60a3      	str	r3, [r4, #8]
  404bd6:	89a3      	ldrh	r3, [r4, #12]
  404bd8:	071a      	lsls	r2, r3, #28
  404bda:	d52e      	bpl.n	404c3a <__swbuf_r+0x82>
  404bdc:	6923      	ldr	r3, [r4, #16]
  404bde:	b363      	cbz	r3, 404c3a <__swbuf_r+0x82>
  404be0:	6923      	ldr	r3, [r4, #16]
  404be2:	6820      	ldr	r0, [r4, #0]
  404be4:	1ac0      	subs	r0, r0, r3
  404be6:	6963      	ldr	r3, [r4, #20]
  404be8:	b2f6      	uxtb	r6, r6
  404bea:	4298      	cmp	r0, r3
  404bec:	4637      	mov	r7, r6
  404bee:	db04      	blt.n	404bfa <__swbuf_r+0x42>
  404bf0:	4621      	mov	r1, r4
  404bf2:	4628      	mov	r0, r5
  404bf4:	f7ff f902 	bl	403dfc <_fflush_r>
  404bf8:	bb28      	cbnz	r0, 404c46 <__swbuf_r+0x8e>
  404bfa:	68a3      	ldr	r3, [r4, #8]
  404bfc:	3b01      	subs	r3, #1
  404bfe:	60a3      	str	r3, [r4, #8]
  404c00:	6823      	ldr	r3, [r4, #0]
  404c02:	1c5a      	adds	r2, r3, #1
  404c04:	6022      	str	r2, [r4, #0]
  404c06:	701e      	strb	r6, [r3, #0]
  404c08:	6963      	ldr	r3, [r4, #20]
  404c0a:	3001      	adds	r0, #1
  404c0c:	4298      	cmp	r0, r3
  404c0e:	d004      	beq.n	404c1a <__swbuf_r+0x62>
  404c10:	89a3      	ldrh	r3, [r4, #12]
  404c12:	07db      	lsls	r3, r3, #31
  404c14:	d519      	bpl.n	404c4a <__swbuf_r+0x92>
  404c16:	2e0a      	cmp	r6, #10
  404c18:	d117      	bne.n	404c4a <__swbuf_r+0x92>
  404c1a:	4621      	mov	r1, r4
  404c1c:	4628      	mov	r0, r5
  404c1e:	f7ff f8ed 	bl	403dfc <_fflush_r>
  404c22:	b190      	cbz	r0, 404c4a <__swbuf_r+0x92>
  404c24:	e00f      	b.n	404c46 <__swbuf_r+0x8e>
  404c26:	4b0b      	ldr	r3, [pc, #44]	; (404c54 <__swbuf_r+0x9c>)
  404c28:	429c      	cmp	r4, r3
  404c2a:	d101      	bne.n	404c30 <__swbuf_r+0x78>
  404c2c:	68ac      	ldr	r4, [r5, #8]
  404c2e:	e7d0      	b.n	404bd2 <__swbuf_r+0x1a>
  404c30:	4b09      	ldr	r3, [pc, #36]	; (404c58 <__swbuf_r+0xa0>)
  404c32:	429c      	cmp	r4, r3
  404c34:	bf08      	it	eq
  404c36:	68ec      	ldreq	r4, [r5, #12]
  404c38:	e7cb      	b.n	404bd2 <__swbuf_r+0x1a>
  404c3a:	4621      	mov	r1, r4
  404c3c:	4628      	mov	r0, r5
  404c3e:	f000 f81f 	bl	404c80 <__swsetup_r>
  404c42:	2800      	cmp	r0, #0
  404c44:	d0cc      	beq.n	404be0 <__swbuf_r+0x28>
  404c46:	f04f 37ff 	mov.w	r7, #4294967295
  404c4a:	4638      	mov	r0, r7
  404c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c4e:	bf00      	nop
  404c50:	00405324 	.word	0x00405324
  404c54:	00405344 	.word	0x00405344
  404c58:	00405304 	.word	0x00405304

00404c5c <_write_r>:
  404c5c:	b538      	push	{r3, r4, r5, lr}
  404c5e:	4c07      	ldr	r4, [pc, #28]	; (404c7c <_write_r+0x20>)
  404c60:	4605      	mov	r5, r0
  404c62:	4608      	mov	r0, r1
  404c64:	4611      	mov	r1, r2
  404c66:	2200      	movs	r2, #0
  404c68:	6022      	str	r2, [r4, #0]
  404c6a:	461a      	mov	r2, r3
  404c6c:	f7fc ff9c 	bl	401ba8 <_write>
  404c70:	1c43      	adds	r3, r0, #1
  404c72:	d102      	bne.n	404c7a <_write_r+0x1e>
  404c74:	6823      	ldr	r3, [r4, #0]
  404c76:	b103      	cbz	r3, 404c7a <_write_r+0x1e>
  404c78:	602b      	str	r3, [r5, #0]
  404c7a:	bd38      	pop	{r3, r4, r5, pc}
  404c7c:	2040036c 	.word	0x2040036c

00404c80 <__swsetup_r>:
  404c80:	4b32      	ldr	r3, [pc, #200]	; (404d4c <__swsetup_r+0xcc>)
  404c82:	b570      	push	{r4, r5, r6, lr}
  404c84:	681d      	ldr	r5, [r3, #0]
  404c86:	4606      	mov	r6, r0
  404c88:	460c      	mov	r4, r1
  404c8a:	b125      	cbz	r5, 404c96 <__swsetup_r+0x16>
  404c8c:	69ab      	ldr	r3, [r5, #24]
  404c8e:	b913      	cbnz	r3, 404c96 <__swsetup_r+0x16>
  404c90:	4628      	mov	r0, r5
  404c92:	f7ff f91d 	bl	403ed0 <__sinit>
  404c96:	4b2e      	ldr	r3, [pc, #184]	; (404d50 <__swsetup_r+0xd0>)
  404c98:	429c      	cmp	r4, r3
  404c9a:	d10f      	bne.n	404cbc <__swsetup_r+0x3c>
  404c9c:	686c      	ldr	r4, [r5, #4]
  404c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404ca2:	b29a      	uxth	r2, r3
  404ca4:	0715      	lsls	r5, r2, #28
  404ca6:	d42c      	bmi.n	404d02 <__swsetup_r+0x82>
  404ca8:	06d0      	lsls	r0, r2, #27
  404caa:	d411      	bmi.n	404cd0 <__swsetup_r+0x50>
  404cac:	2209      	movs	r2, #9
  404cae:	6032      	str	r2, [r6, #0]
  404cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404cb4:	81a3      	strh	r3, [r4, #12]
  404cb6:	f04f 30ff 	mov.w	r0, #4294967295
  404cba:	bd70      	pop	{r4, r5, r6, pc}
  404cbc:	4b25      	ldr	r3, [pc, #148]	; (404d54 <__swsetup_r+0xd4>)
  404cbe:	429c      	cmp	r4, r3
  404cc0:	d101      	bne.n	404cc6 <__swsetup_r+0x46>
  404cc2:	68ac      	ldr	r4, [r5, #8]
  404cc4:	e7eb      	b.n	404c9e <__swsetup_r+0x1e>
  404cc6:	4b24      	ldr	r3, [pc, #144]	; (404d58 <__swsetup_r+0xd8>)
  404cc8:	429c      	cmp	r4, r3
  404cca:	bf08      	it	eq
  404ccc:	68ec      	ldreq	r4, [r5, #12]
  404cce:	e7e6      	b.n	404c9e <__swsetup_r+0x1e>
  404cd0:	0751      	lsls	r1, r2, #29
  404cd2:	d512      	bpl.n	404cfa <__swsetup_r+0x7a>
  404cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  404cd6:	b141      	cbz	r1, 404cea <__swsetup_r+0x6a>
  404cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404cdc:	4299      	cmp	r1, r3
  404cde:	d002      	beq.n	404ce6 <__swsetup_r+0x66>
  404ce0:	4630      	mov	r0, r6
  404ce2:	f7ff fd2b 	bl	40473c <_free_r>
  404ce6:	2300      	movs	r3, #0
  404ce8:	6363      	str	r3, [r4, #52]	; 0x34
  404cea:	89a3      	ldrh	r3, [r4, #12]
  404cec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  404cf0:	81a3      	strh	r3, [r4, #12]
  404cf2:	2300      	movs	r3, #0
  404cf4:	6063      	str	r3, [r4, #4]
  404cf6:	6923      	ldr	r3, [r4, #16]
  404cf8:	6023      	str	r3, [r4, #0]
  404cfa:	89a3      	ldrh	r3, [r4, #12]
  404cfc:	f043 0308 	orr.w	r3, r3, #8
  404d00:	81a3      	strh	r3, [r4, #12]
  404d02:	6923      	ldr	r3, [r4, #16]
  404d04:	b94b      	cbnz	r3, 404d1a <__swsetup_r+0x9a>
  404d06:	89a3      	ldrh	r3, [r4, #12]
  404d08:	f403 7320 	and.w	r3, r3, #640	; 0x280
  404d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404d10:	d003      	beq.n	404d1a <__swsetup_r+0x9a>
  404d12:	4621      	mov	r1, r4
  404d14:	4630      	mov	r0, r6
  404d16:	f7ff f997 	bl	404048 <__smakebuf_r>
  404d1a:	89a2      	ldrh	r2, [r4, #12]
  404d1c:	f012 0301 	ands.w	r3, r2, #1
  404d20:	d00c      	beq.n	404d3c <__swsetup_r+0xbc>
  404d22:	2300      	movs	r3, #0
  404d24:	60a3      	str	r3, [r4, #8]
  404d26:	6963      	ldr	r3, [r4, #20]
  404d28:	425b      	negs	r3, r3
  404d2a:	61a3      	str	r3, [r4, #24]
  404d2c:	6923      	ldr	r3, [r4, #16]
  404d2e:	b953      	cbnz	r3, 404d46 <__swsetup_r+0xc6>
  404d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404d34:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  404d38:	d1ba      	bne.n	404cb0 <__swsetup_r+0x30>
  404d3a:	bd70      	pop	{r4, r5, r6, pc}
  404d3c:	0792      	lsls	r2, r2, #30
  404d3e:	bf58      	it	pl
  404d40:	6963      	ldrpl	r3, [r4, #20]
  404d42:	60a3      	str	r3, [r4, #8]
  404d44:	e7f2      	b.n	404d2c <__swsetup_r+0xac>
  404d46:	2000      	movs	r0, #0
  404d48:	e7f7      	b.n	404d3a <__swsetup_r+0xba>
  404d4a:	bf00      	nop
  404d4c:	20400048 	.word	0x20400048
  404d50:	00405324 	.word	0x00405324
  404d54:	00405344 	.word	0x00405344
  404d58:	00405304 	.word	0x00405304

00404d5c <_close_r>:
  404d5c:	b538      	push	{r3, r4, r5, lr}
  404d5e:	4c06      	ldr	r4, [pc, #24]	; (404d78 <_close_r+0x1c>)
  404d60:	2300      	movs	r3, #0
  404d62:	4605      	mov	r5, r0
  404d64:	4608      	mov	r0, r1
  404d66:	6023      	str	r3, [r4, #0]
  404d68:	f7fc f8b2 	bl	400ed0 <_close>
  404d6c:	1c43      	adds	r3, r0, #1
  404d6e:	d102      	bne.n	404d76 <_close_r+0x1a>
  404d70:	6823      	ldr	r3, [r4, #0]
  404d72:	b103      	cbz	r3, 404d76 <_close_r+0x1a>
  404d74:	602b      	str	r3, [r5, #0]
  404d76:	bd38      	pop	{r3, r4, r5, pc}
  404d78:	2040036c 	.word	0x2040036c

00404d7c <_fstat_r>:
  404d7c:	b538      	push	{r3, r4, r5, lr}
  404d7e:	4c07      	ldr	r4, [pc, #28]	; (404d9c <_fstat_r+0x20>)
  404d80:	2300      	movs	r3, #0
  404d82:	4605      	mov	r5, r0
  404d84:	4608      	mov	r0, r1
  404d86:	4611      	mov	r1, r2
  404d88:	6023      	str	r3, [r4, #0]
  404d8a:	f7fc f8a4 	bl	400ed6 <_fstat>
  404d8e:	1c43      	adds	r3, r0, #1
  404d90:	d102      	bne.n	404d98 <_fstat_r+0x1c>
  404d92:	6823      	ldr	r3, [r4, #0]
  404d94:	b103      	cbz	r3, 404d98 <_fstat_r+0x1c>
  404d96:	602b      	str	r3, [r5, #0]
  404d98:	bd38      	pop	{r3, r4, r5, pc}
  404d9a:	bf00      	nop
  404d9c:	2040036c 	.word	0x2040036c

00404da0 <_isatty_r>:
  404da0:	b538      	push	{r3, r4, r5, lr}
  404da2:	4c06      	ldr	r4, [pc, #24]	; (404dbc <_isatty_r+0x1c>)
  404da4:	2300      	movs	r3, #0
  404da6:	4605      	mov	r5, r0
  404da8:	4608      	mov	r0, r1
  404daa:	6023      	str	r3, [r4, #0]
  404dac:	f7fc f898 	bl	400ee0 <_isatty>
  404db0:	1c43      	adds	r3, r0, #1
  404db2:	d102      	bne.n	404dba <_isatty_r+0x1a>
  404db4:	6823      	ldr	r3, [r4, #0]
  404db6:	b103      	cbz	r3, 404dba <_isatty_r+0x1a>
  404db8:	602b      	str	r3, [r5, #0]
  404dba:	bd38      	pop	{r3, r4, r5, pc}
  404dbc:	2040036c 	.word	0x2040036c

00404dc0 <_lseek_r>:
  404dc0:	b538      	push	{r3, r4, r5, lr}
  404dc2:	4c07      	ldr	r4, [pc, #28]	; (404de0 <_lseek_r+0x20>)
  404dc4:	4605      	mov	r5, r0
  404dc6:	4608      	mov	r0, r1
  404dc8:	4611      	mov	r1, r2
  404dca:	2200      	movs	r2, #0
  404dcc:	6022      	str	r2, [r4, #0]
  404dce:	461a      	mov	r2, r3
  404dd0:	f7fc f888 	bl	400ee4 <_lseek>
  404dd4:	1c43      	adds	r3, r0, #1
  404dd6:	d102      	bne.n	404dde <_lseek_r+0x1e>
  404dd8:	6823      	ldr	r3, [r4, #0]
  404dda:	b103      	cbz	r3, 404dde <_lseek_r+0x1e>
  404ddc:	602b      	str	r3, [r5, #0]
  404dde:	bd38      	pop	{r3, r4, r5, pc}
  404de0:	2040036c 	.word	0x2040036c

00404de4 <__ascii_mbtowc>:
  404de4:	b082      	sub	sp, #8
  404de6:	b901      	cbnz	r1, 404dea <__ascii_mbtowc+0x6>
  404de8:	a901      	add	r1, sp, #4
  404dea:	b142      	cbz	r2, 404dfe <__ascii_mbtowc+0x1a>
  404dec:	b14b      	cbz	r3, 404e02 <__ascii_mbtowc+0x1e>
  404dee:	7813      	ldrb	r3, [r2, #0]
  404df0:	600b      	str	r3, [r1, #0]
  404df2:	7812      	ldrb	r2, [r2, #0]
  404df4:	1c10      	adds	r0, r2, #0
  404df6:	bf18      	it	ne
  404df8:	2001      	movne	r0, #1
  404dfa:	b002      	add	sp, #8
  404dfc:	4770      	bx	lr
  404dfe:	4610      	mov	r0, r2
  404e00:	e7fb      	b.n	404dfa <__ascii_mbtowc+0x16>
  404e02:	f06f 0001 	mvn.w	r0, #1
  404e06:	e7f8      	b.n	404dfa <__ascii_mbtowc+0x16>

00404e08 <__malloc_lock>:
  404e08:	4770      	bx	lr

00404e0a <__malloc_unlock>:
  404e0a:	4770      	bx	lr

00404e0c <_read_r>:
  404e0c:	b538      	push	{r3, r4, r5, lr}
  404e0e:	4c07      	ldr	r4, [pc, #28]	; (404e2c <_read_r+0x20>)
  404e10:	4605      	mov	r5, r0
  404e12:	4608      	mov	r0, r1
  404e14:	4611      	mov	r1, r2
  404e16:	2200      	movs	r2, #0
  404e18:	6022      	str	r2, [r4, #0]
  404e1a:	461a      	mov	r2, r3
  404e1c:	f7fc feb2 	bl	401b84 <_read>
  404e20:	1c43      	adds	r3, r0, #1
  404e22:	d102      	bne.n	404e2a <_read_r+0x1e>
  404e24:	6823      	ldr	r3, [r4, #0]
  404e26:	b103      	cbz	r3, 404e2a <_read_r+0x1e>
  404e28:	602b      	str	r3, [r5, #0]
  404e2a:	bd38      	pop	{r3, r4, r5, pc}
  404e2c:	2040036c 	.word	0x2040036c

00404e30 <__ascii_wctomb>:
  404e30:	b149      	cbz	r1, 404e46 <__ascii_wctomb+0x16>
  404e32:	2aff      	cmp	r2, #255	; 0xff
  404e34:	bf85      	ittet	hi
  404e36:	238a      	movhi	r3, #138	; 0x8a
  404e38:	6003      	strhi	r3, [r0, #0]
  404e3a:	700a      	strbls	r2, [r1, #0]
  404e3c:	f04f 30ff 	movhi.w	r0, #4294967295
  404e40:	bf98      	it	ls
  404e42:	2001      	movls	r0, #1
  404e44:	4770      	bx	lr
  404e46:	4608      	mov	r0, r1
  404e48:	4770      	bx	lr
	...

00404e4c <__aeabi_dcmpun>:
  404e4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404e50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404e54:	d102      	bne.n	404e5c <__aeabi_dcmpun+0x10>
  404e56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404e5a:	d10a      	bne.n	404e72 <__aeabi_dcmpun+0x26>
  404e5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404e60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404e64:	d102      	bne.n	404e6c <__aeabi_dcmpun+0x20>
  404e66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404e6a:	d102      	bne.n	404e72 <__aeabi_dcmpun+0x26>
  404e6c:	f04f 0000 	mov.w	r0, #0
  404e70:	4770      	bx	lr
  404e72:	f04f 0001 	mov.w	r0, #1
  404e76:	4770      	bx	lr
  404e78:	4441200a 	.word	0x4441200a
  404e7c:	65542043 	.word	0x65542043
  404e80:	7265706d 	.word	0x7265706d
  404e84:	72757461 	.word	0x72757461
  404e88:	65542065 	.word	0x65542065
  404e8c:	6e697473 	.word	0x6e697473
  404e90:	2d2d2067 	.word	0x2d2d2067
  404e94:	2d2d2d2d 	.word	0x2d2d2d2d
  404e98:	2d2d2d2d 	.word	0x2d2d2d2d
  404e9c:	2d2d2d2d 	.word	0x2d2d2d2d
  404ea0:	0a2d2d2d 	.word	0x0a2d2d2d
  404ea4:	00000000 	.word	0x00000000
  404ea8:	20776152 	.word	0x20776152
  404eac:	61746144 	.word	0x61746144
  404eb0:	00000a20 	.word	0x00000a20
  404eb4:	706d6554 	.word	0x706d6554
  404eb8:	203d2031 	.word	0x203d2031
  404ebc:	09206925 	.word	0x09206925
  404ec0:	65542009 	.word	0x65542009
  404ec4:	2032706d 	.word	0x2032706d
  404ec8:	6925203d 	.word	0x6925203d
  404ecc:	20090920 	.word	0x20090920
  404ed0:	706d6554 	.word	0x706d6554
  404ed4:	203d2033 	.word	0x203d2033
  404ed8:	0a206925 	.word	0x0a206925
  404edc:	00000000 	.word	0x00000000
  404ee0:	706d6554 	.word	0x706d6554
  404ee4:	203d2034 	.word	0x203d2034
  404ee8:	09206925 	.word	0x09206925
  404eec:	65542009 	.word	0x65542009
  404ef0:	2035706d 	.word	0x2035706d
  404ef4:	6925203d 	.word	0x6925203d
  404ef8:	20090920 	.word	0x20090920
  404efc:	706d6554 	.word	0x706d6554
  404f00:	203d2036 	.word	0x203d2036
  404f04:	0a206925 	.word	0x0a206925
  404f08:	00000000 	.word	0x00000000
  404f0c:	706d6554 	.word	0x706d6554
  404f10:	746f4d20 	.word	0x746f4d20
  404f14:	3d20726f 	.word	0x3d20726f
  404f18:	20692520 	.word	0x20692520
  404f1c:	00000a20 	.word	0x00000a20
  404f20:	7543200a 	.word	0x7543200a
  404f24:	6e657272 	.word	0x6e657272
  404f28:	6e612074 	.word	0x6e612074
  404f2c:	6f562064 	.word	0x6f562064
  404f30:	6761746c 	.word	0x6761746c
  404f34:	65542065 	.word	0x65542065
  404f38:	6e697473 	.word	0x6e697473
  404f3c:	2d2d2067 	.word	0x2d2d2067
  404f40:	2d2d2d2d 	.word	0x2d2d2d2d
  404f44:	2d2d2d2d 	.word	0x2d2d2d2d
  404f48:	2d2d2d2d 	.word	0x2d2d2d2d
  404f4c:	0a2d2d2d 	.word	0x0a2d2d2d
  404f50:	00000000 	.word	0x00000000
  404f54:	72727543 	.word	0x72727543
  404f58:	203d2041 	.word	0x203d2041
  404f5c:	09206925 	.word	0x09206925
  404f60:	75432009 	.word	0x75432009
  404f64:	20427272 	.word	0x20427272
  404f68:	6925203d 	.word	0x6925203d
  404f6c:	20090920 	.word	0x20090920
  404f70:	72727543 	.word	0x72727543
  404f74:	203d2043 	.word	0x203d2043
  404f78:	0a206925 	.word	0x0a206925
  404f7c:	00000000 	.word	0x00000000
  404f80:	70707553 	.word	0x70707553
  404f84:	5620796c 	.word	0x5620796c
  404f88:	61746c6f 	.word	0x61746c6f
  404f8c:	3d206567 	.word	0x3d206567
  404f90:	20692520 	.word	0x20692520
  404f94:	00000a20 	.word	0x00000a20
  404f98:	74736554 	.word	0x74736554
  404f9c:	20676e69 	.word	0x20676e69
  404fa0:	656d6954 	.word	0x656d6954
  404fa4:	6f432072 	.word	0x6f432072
  404fa8:	65746e75 	.word	0x65746e75
  404fac:	00007372 	.word	0x00007372
  404fb0:	6f636e45 	.word	0x6f636e45
  404fb4:	20726564 	.word	0x20726564
  404fb8:	203d2041 	.word	0x203d2041
  404fbc:	75252009 	.word	0x75252009
  404fc0:	09203b20 	.word	0x09203b20
  404fc4:	20752520 	.word	0x20752520
  404fc8:	0000000a 	.word	0x0000000a
  404fcc:	6f636e45 	.word	0x6f636e45
  404fd0:	20726564 	.word	0x20726564
  404fd4:	203d2042 	.word	0x203d2042
  404fd8:	75252009 	.word	0x75252009
  404fdc:	09203b20 	.word	0x09203b20
  404fe0:	20752520 	.word	0x20752520
  404fe4:	00000a0a 	.word	0x00000a0a
  404fe8:	682f2e2e 	.word	0x682f2e2e
  404fec:	732f6c61 	.word	0x732f6c61
  404ff0:	682f6372 	.word	0x682f6372
  404ff4:	615f6c61 	.word	0x615f6c61
  404ff8:	735f6364 	.word	0x735f6364
  404ffc:	2e636e79 	.word	0x2e636e79
  405000:	00000063 	.word	0x00000063
  405004:	682f2e2e 	.word	0x682f2e2e
  405008:	732f6c61 	.word	0x732f6c61
  40500c:	682f6372 	.word	0x682f6372
  405010:	695f6c61 	.word	0x695f6c61
  405014:	00632e6f 	.word	0x00632e6f
  405018:	682f2e2e 	.word	0x682f2e2e
  40501c:	732f6c61 	.word	0x732f6c61
  405020:	682f6372 	.word	0x682f6372
  405024:	705f6c61 	.word	0x705f6c61
  405028:	632e6d77 	.word	0x632e6d77
  40502c:	00000000 	.word	0x00000000
  405030:	682f2e2e 	.word	0x682f2e2e
  405034:	732f6c61 	.word	0x732f6c61
  405038:	682f6372 	.word	0x682f6372
  40503c:	745f6c61 	.word	0x745f6c61
  405040:	72656d69 	.word	0x72656d69
  405044:	0000632e 	.word	0x0000632e
  405048:	682f2e2e 	.word	0x682f2e2e
  40504c:	732f6c61 	.word	0x732f6c61
  405050:	682f6372 	.word	0x682f6372
  405054:	755f6c61 	.word	0x755f6c61
  405058:	74726173 	.word	0x74726173
  40505c:	6e79735f 	.word	0x6e79735f
  405060:	00632e63 	.word	0x00632e63
  405064:	682f2e2e 	.word	0x682f2e2e
  405068:	752f6c61 	.word	0x752f6c61
  40506c:	736c6974 	.word	0x736c6974
  405070:	6372732f 	.word	0x6372732f
  405074:	6974752f 	.word	0x6974752f
  405078:	6c5f736c 	.word	0x6c5f736c
  40507c:	2e747369 	.word	0x2e747369
  405080:	00000063 	.word	0x00000063

00405084 <_afecs>:
  405084:	00000000 2f843100 03000000 ffffffff     .....1./........
  405094:	0000ffff 00000000 00000000 00000000     ................
  4050a4:	0000010c 00000000 00000000 00000000     ................
  4050b4:	00000000 00000200 00000200 00000200     ................
  4050c4:	00000200 00000200 00000200 00000200     ................
  4050d4:	00000200 00000200 00000200 00000200     ................
  4050e4:	00000200 00000001 2f843100 03000000     .........1./....
  4050f4:	ffffffff 0000ffff 00000000 00000000     ................
  405104:	00000000 0000010c 00000000 00000000     ................
	...
  40511c:	00000200 00000200 00000200 00000200     ................
  40512c:	00000200 00000200 00000200 00000200     ................
  40513c:	00000200 00000200 00000200 00000200     ................
  40514c:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  40515c:	63656661 0000632e                       afec.c..

00405164 <_ext_irq>:
  405164:	00000000 00000024 00000000 00000000     ....$...........
	...
  405180:	00000003 00080000 00000000 00000000     ................
	...

0040519c <_pio_irq_n>:
  40519c:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  4051ac:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  4051bc:	00000000                                ....

004051c0 <_pwms>:
  4051c0:	40020000 0000001f 00010019 00000001     ...@............
  4051d0:	00000001 000000ff 00000000 00000004     ................
	...
  4051ec:	00000002 00405248 00000000 204002a0     ....HR@.......@ 
  4051fc:	4005c000 0000003c 00010019 00000001     ...@<...........
  40520c:	00000001 000000ff 00000000 00000004     ................
	...
  405228:	00000001 00405238 00000000 20400294     ....8R@.......@ 

00405238 <_ch_cfg1>:
  405238:	00000000 0000010b 000003e8 00000200     ................

00405248 <_ch_cfg0>:
  405248:	00000000 0000010b 000003e8 00000200     ................
  405258:	00000002 0000010b 000003e8 00000200     ................
  405268:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  405278:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  405288:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00405294 <_usarts>:
  405294:	00000001 001008c0 000100f4 682f2e2e     ............../h
  4052a4:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  4052b4:	632e7472 00000000                       rt.c....

004052bc <_global_impure_ptr>:
  4052bc:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  4052cc:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  4052dc:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  4052ec:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  4052fc:	4e614e00 00000000                       .NaN....

00405304 <__sf_fake_stderr>:
	...

00405324 <__sf_fake_stdin>:
	...

00405344 <__sf_fake_stdout>:
	...

00405368 <__mprec_bigtens>:
  405368:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  405378:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  405388:	7f73bf3c 75154fdd                       <.s..O.u

00405390 <__mprec_tens>:
  405390:	00000000 3ff00000 00000000 40240000     .......?......$@
  4053a0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4053b0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4053c0:	00000000 412e8480 00000000 416312d0     .......A......cA
  4053d0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4053e0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4053f0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  405400:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  405410:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  405420:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  405430:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  405440:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  405450:	79d99db4 44ea7843                       ...yCx.D

00405458 <p05.6047>:
  405458:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  405468:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  405478:	5849534f 00002e00                                OSIX...

0040547f <_ctype_>:
  40547f:	20202000 20202020 28282020 20282828     .         ((((( 
  40548f:	20202020 20202020 20202020 20202020                     
  40549f:	10108820 10101010 10101010 10101010      ...............
  4054af:	04040410 04040404 10040404 10101010     ................
  4054bf:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4054cf:	01010101 01010101 01010101 10101010     ................
  4054df:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4054ef:	02020202 02020202 02020202 10101010     ................
  4054ff:	00000020 00000000 00000000 00000000      ...............
	...

00405580 <_init>:
  405580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405582:	bf00      	nop
  405584:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405586:	bc08      	pop	{r3}
  405588:	469e      	mov	lr, r3
  40558a:	4770      	bx	lr

0040558c <__init_array_start>:
  40558c:	0040018d 	.word	0x0040018d

00405590 <_fini>:
  405590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405592:	bf00      	nop
  405594:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405596:	bc08      	pop	{r3}
  405598:	469e      	mov	lr, r3
  40559a:	4770      	bx	lr

0040559c <__fini_array_start>:
  40559c:	00400169 	.word	0x00400169
