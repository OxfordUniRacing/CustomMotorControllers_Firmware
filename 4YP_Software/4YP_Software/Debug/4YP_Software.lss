
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006bb8  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  00406bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000158  20400218  00406dd0  00020218  2**2
                  ALLOC
  3 .heap         00000200  20400370  00406f28  00020218  2**0
                  ALLOC
  4 .stack        00000400  20400570  00407128  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   000215bc  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004786  00000000  00000000  0004185b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a1da  00000000  00000000  00045fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c70  00000000  00000000  000501bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ab8  00000000  00000000  00050e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00045ef7  00000000  00000000  000518e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001bc8f  00000000  00000000  000977da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001545d3  00000000  00000000  000b3469  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002e00  00000000  00000000  00207a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 09 40 20 81 04 40 00 7d 04 40 00 7d 04 40 00     p.@ ..@.}.@.}.@.
  400010:	7d 04 40 00 7d 04 40 00 7d 04 40 00 00 00 00 00     }.@.}.@.}.@.....
	...
  40002c:	7d 04 40 00 7d 04 40 00 00 00 00 00 7d 04 40 00     }.@.}.@.....}.@.
  40003c:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  40004c:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  40005c:	7d 04 40 00 7d 04 40 00 00 00 00 00 35 14 40 00     }.@.}.@.....5.@.
  40006c:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  40007c:	7d 04 40 00 29 14 40 00 7d 04 40 00 7d 04 40 00     }.@.).@.}.@.}.@.
  40008c:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  40009c:	a5 19 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     ..@.}.@.}.@.}.@.
  4000ac:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  4000bc:	81 15 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     ..@.}.@.}.@.}.@.
  4000cc:	7d 04 40 00 7d 04 40 00 f9 11 40 00 7d 04 40 00     }.@.}.@...@.}.@.
  4000dc:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  4000ec:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  4000fc:	7d 04 40 00 7d 04 40 00 7d 04 40 00 b9 19 40 00     }.@.}.@.}.@...@.
  40010c:	7d 04 40 00 7d 04 40 00 00 00 00 00 00 00 00 00     }.@.}.@.........
  40011c:	00 00 00 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     ....}.@.}.@.}.@.
  40012c:	7d 04 40 00 95 15 40 00 7d 04 40 00 7d 04 40 00     }.@...@.}.@.}.@.
  40013c:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  40014c:	7d 04 40 00 7d 04 40 00 7d 04 40 00 7d 04 40 00     }.@.}.@.}.@.}.@.
  40015c:	7d 04 40 00 7d 04 40 00 7d 04 40 00                 }.@.}.@.}.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	00406bb8 	.word	0x00406bb8

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406bb8 	.word	0x00406bb8
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	00406bb8 	.word	0x00406bb8
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	004008e1 	.word	0x004008e1
  4001e4:	00401cf1 	.word	0x00401cf1

004001e8 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  4001e8:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_sync_enable_channel(ADC_CURRENT_A);
  4001ea:	4d11      	ldr	r5, [pc, #68]	; (400230 <adc_enable_all+0x48>)
  4001ec:	2108      	movs	r1, #8
  4001ee:	4628      	mov	r0, r5
  4001f0:	4c10      	ldr	r4, [pc, #64]	; (400234 <adc_enable_all+0x4c>)
  4001f2:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_CURRENT_B);
  4001f4:	2102      	movs	r1, #2
  4001f6:	4628      	mov	r0, r5
  4001f8:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_CURRENT_C);
  4001fa:	4e0f      	ldr	r6, [pc, #60]	; (400238 <adc_enable_all+0x50>)
  4001fc:	2101      	movs	r1, #1
  4001fe:	4630      	mov	r0, r6
  400200:	47a0      	blx	r4
	
	adc_sync_enable_channel(ADC_SUPPL_VOLTAGE);
  400202:	2106      	movs	r1, #6
  400204:	4630      	mov	r0, r6
  400206:	47a0      	blx	r4
	
	adc_sync_enable_channel(ADC_TEMP_1);
  400208:	2105      	movs	r1, #5
  40020a:	4630      	mov	r0, r6
  40020c:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_2);
  40020e:	2106      	movs	r1, #6
  400210:	4628      	mov	r0, r5
  400212:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_sync_enable_channel(ADC_TEMP_4);
  400214:	210a      	movs	r1, #10
  400216:	4628      	mov	r0, r5
  400218:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_5);
  40021a:	2100      	movs	r1, #0
  40021c:	4630      	mov	r0, r6
  40021e:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_6);
  400220:	2105      	movs	r1, #5
  400222:	4628      	mov	r0, r5
  400224:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_MOTOR);
  400226:	2100      	movs	r1, #0
  400228:	4628      	mov	r0, r5
  40022a:	47a0      	blx	r4
  40022c:	bd70      	pop	{r4, r5, r6, pc}
  40022e:	bf00      	nop
  400230:	20400348 	.word	0x20400348
  400234:	00400a19 	.word	0x00400a19
  400238:	20400368 	.word	0x20400368

0040023c <adc_read>:
	adc_sync_disable_channel(ADC_TEMP_6);
	adc_sync_disable_channel(ADC_TEMP_MOTOR);
}

//reads ADC value
uint16_t adc_read(struct adc_sync_descriptor *const descr, const uint8_t channel){
  40023c:	b510      	push	{r4, lr}
  40023e:	b082      	sub	sp, #8
	
	uint16_t temp;
	
	adc_sync_read_channel(descr, channel, (uint8_t *)&temp, 2);
  400240:	2302      	movs	r3, #2
  400242:	f10d 0206 	add.w	r2, sp, #6
  400246:	4c03      	ldr	r4, [pc, #12]	; (400254 <adc_read+0x18>)
  400248:	47a0      	blx	r4
	
	return temp;
}
  40024a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40024e:	b002      	add	sp, #8
  400250:	bd10      	pop	{r4, pc}
  400252:	bf00      	nop
  400254:	00400a45 	.word	0x00400a45

00400258 <pwm_enable_all>:



//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400258:	b570      	push	{r4, r5, r6, lr}
	//note it's possible to individual channels, but not through these functions
	//functions from hal_pwm.h
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  40025a:	4c0a      	ldr	r4, [pc, #40]	; (400284 <pwm_enable_all+0x2c>)
  40025c:	4620      	mov	r0, r4
  40025e:	4e0a      	ldr	r6, [pc, #40]	; (400288 <pwm_enable_all+0x30>)
  400260:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  400262:	4d0a      	ldr	r5, [pc, #40]	; (40028c <pwm_enable_all+0x34>)
  400264:	4628      	mov	r0, r5
  400266:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  400268:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40026c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400270:	4620      	mov	r0, r4
  400272:	4c07      	ldr	r4, [pc, #28]	; (400290 <pwm_enable_all+0x38>)
  400274:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1  , PWM_PERIOD, PWM_PERIOD>>1);
  400276:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40027a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40027e:	4628      	mov	r0, r5
  400280:	47a0      	blx	r4
  400282:	bd70      	pop	{r4, r5, r6, pc}
  400284:	204002c0 	.word	0x204002c0
  400288:	00400c85 	.word	0x00400c85
  40028c:	2040034c 	.word	0x2040034c
  400290:	00400cc1 	.word	0x00400cc1

00400294 <pwm_set_duty>:
	//ASSERT(device && (duty_cycle < period));

	//cfg = _pwm_get_cfg(device->hw);

	//for (i = 0; i < cfg->ch_num; i++) {										//not needed; we are altering one channel at a time
	hri_pwm_write_CDTYUPD_reg(descr->device.hw, channel, duty_cycle);
  400294:	6903      	ldr	r3, [r0, #16]
}

static inline void hri_pwm_write_CDTYUPD_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cdtyupd_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  400296:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  40029a:	f8c1 2208 	str.w	r2, [r1, #520]	; 0x208
  40029e:	4770      	bx	lr

004002a0 <pwm_deadtime_init>:
	//hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);			//period is constant; only altering duty cycle
	//}
}

void pwm_deadtime_init(void){													//Check section 51.6.2.5 Dead-Time Generator in datasheet
  4002a0:	4770      	bx	lr
	...

004002a4 <Current_Voltage_Inital_Test>:
	printf("Temp Motor = %i  \n",temp_test_data[6]);
	
	
}

void Current_Voltage_Inital_Test (void){
  4002a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//Get Current Sensor and High Voltage reading and display values
	
	int current_test_data [3];
	
	current_test_data [0] = adc_read(ADC_CURRENT_A);
  4002a8:	4d10      	ldr	r5, [pc, #64]	; (4002ec <Current_Voltage_Inital_Test+0x48>)
  4002aa:	2108      	movs	r1, #8
  4002ac:	4628      	mov	r0, r5
  4002ae:	4c10      	ldr	r4, [pc, #64]	; (4002f0 <Current_Voltage_Inital_Test+0x4c>)
  4002b0:	47a0      	blx	r4
  4002b2:	4606      	mov	r6, r0
	current_test_data [1] = adc_read(ADC_CURRENT_B);
  4002b4:	2102      	movs	r1, #2
  4002b6:	4628      	mov	r0, r5
  4002b8:	47a0      	blx	r4
  4002ba:	4607      	mov	r7, r0
	current_test_data [2] = adc_read(ADC_CURRENT_C);
  4002bc:	4d0d      	ldr	r5, [pc, #52]	; (4002f4 <Current_Voltage_Inital_Test+0x50>)
  4002be:	2101      	movs	r1, #1
  4002c0:	4628      	mov	r0, r5
  4002c2:	47a0      	blx	r4
  4002c4:	4680      	mov	r8, r0
	
	int voltage_test_data;
	
	voltage_test_data = adc_read(ADC_SUPPL_VOLTAGE);
  4002c6:	2106      	movs	r1, #6
  4002c8:	4628      	mov	r0, r5
  4002ca:	47a0      	blx	r4
  4002cc:	4605      	mov	r5, r0
	
	printf("\n Current and Voltage Testing -----------------\n");
  4002ce:	480a      	ldr	r0, [pc, #40]	; (4002f8 <Current_Voltage_Inital_Test+0x54>)
  4002d0:	4c0a      	ldr	r4, [pc, #40]	; (4002fc <Current_Voltage_Inital_Test+0x58>)
  4002d2:	47a0      	blx	r4
	printf("Raw Data \n");
  4002d4:	480a      	ldr	r0, [pc, #40]	; (400300 <Current_Voltage_Inital_Test+0x5c>)
  4002d6:	47a0      	blx	r4
	printf("CurrA = %i \t\t CurrB = %i \t\t CurrC = %i \n",current_test_data[0], current_test_data[1], current_test_data[2]);
  4002d8:	4643      	mov	r3, r8
  4002da:	463a      	mov	r2, r7
  4002dc:	4631      	mov	r1, r6
  4002de:	4809      	ldr	r0, [pc, #36]	; (400304 <Current_Voltage_Inital_Test+0x60>)
  4002e0:	47a0      	blx	r4
	printf("Supply Voltage = %i  \n",voltage_test_data);
  4002e2:	4629      	mov	r1, r5
  4002e4:	4808      	ldr	r0, [pc, #32]	; (400308 <Current_Voltage_Inital_Test+0x64>)
  4002e6:	47a0      	blx	r4
  4002e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002ec:	20400348 	.word	0x20400348
  4002f0:	0040023d 	.word	0x0040023d
  4002f4:	20400368 	.word	0x20400368
  4002f8:	004063b0 	.word	0x004063b0
  4002fc:	00404315 	.word	0x00404315
  400300:	00406338 	.word	0x00406338
  400304:	004063e4 	.word	0x004063e4
  400308:	00406410 	.word	0x00406410
  40030c:	00000000 	.word	0x00000000

00400310 <first_slow_spin>:
}

void first_slow_spin (void){
  400310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400314:	ed2d 8b06 	vpush	{d8-d10}
	float omega = 94.25;    //Gives electrical frequency of 15Hz (one spin of the rotor every second)
	float T = 0;
  400318:	eddf 8a45 	vldr	s17, [pc, #276]	; 400430 <first_slow_spin+0x120>
	float V_supply = 20;
	float V_pp_test = 5;
	while (1)
	{
		float pwm_testing_a, pwm_testing_b, pwm_testing_c;
		pwm_testing_a = 1000 - (sin(omega*T)+1)*500*V_pp_test/V_supply;
  40031c:	ed9f 8a45 	vldr	s16, [pc, #276]	; 400434 <first_slow_spin+0x124>
  400320:	ee28 8a88 	vmul.f32	s16, s17, s16
  400324:	4f44      	ldr	r7, [pc, #272]	; (400438 <first_slow_spin+0x128>)
  400326:	ee18 0a10 	vmov	r0, s16
  40032a:	47b8      	blx	r7
  40032c:	f8df a13c 	ldr.w	sl, [pc, #316]	; 40046c <first_slow_spin+0x15c>
  400330:	47d0      	blx	sl
  400332:	4e42      	ldr	r6, [pc, #264]	; (40043c <first_slow_spin+0x12c>)
  400334:	2200      	movs	r2, #0
  400336:	4b42      	ldr	r3, [pc, #264]	; (400440 <first_slow_spin+0x130>)
  400338:	47b0      	blx	r6
  40033a:	4c42      	ldr	r4, [pc, #264]	; (400444 <first_slow_spin+0x134>)
  40033c:	2200      	movs	r2, #0
  40033e:	4b42      	ldr	r3, [pc, #264]	; (400448 <first_slow_spin+0x138>)
  400340:	47a0      	blx	r4
  400342:	2200      	movs	r2, #0
  400344:	4b41      	ldr	r3, [pc, #260]	; (40044c <first_slow_spin+0x13c>)
  400346:	47a0      	blx	r4
  400348:	f8df 9124 	ldr.w	r9, [pc, #292]	; 400470 <first_slow_spin+0x160>
  40034c:	2200      	movs	r2, #0
  40034e:	4b40      	ldr	r3, [pc, #256]	; (400450 <first_slow_spin+0x140>)
  400350:	47c8      	blx	r9
  400352:	f8df 8120 	ldr.w	r8, [pc, #288]	; 400474 <first_slow_spin+0x164>
  400356:	4602      	mov	r2, r0
  400358:	460b      	mov	r3, r1
  40035a:	2000      	movs	r0, #0
  40035c:	493d      	ldr	r1, [pc, #244]	; (400454 <first_slow_spin+0x144>)
  40035e:	47c0      	blx	r8
  400360:	4d3d      	ldr	r5, [pc, #244]	; (400458 <first_slow_spin+0x148>)
  400362:	47a8      	blx	r5
  400364:	ee0a 0a10 	vmov	s20, r0
		pwm_testing_b = 1000 - (sin(omega*T+PI/3)+1)*500*V_pp_test/V_supply;
  400368:	ed9f 9a3c 	vldr	s18, [pc, #240]	; 40045c <first_slow_spin+0x14c>
  40036c:	ee78 7a09 	vadd.f32	s15, s16, s18
  400370:	ee17 0a90 	vmov	r0, s15
  400374:	47b8      	blx	r7
  400376:	47d0      	blx	sl
  400378:	2200      	movs	r2, #0
  40037a:	4b31      	ldr	r3, [pc, #196]	; (400440 <first_slow_spin+0x130>)
  40037c:	47b0      	blx	r6
  40037e:	2200      	movs	r2, #0
  400380:	4b31      	ldr	r3, [pc, #196]	; (400448 <first_slow_spin+0x138>)
  400382:	47a0      	blx	r4
  400384:	2200      	movs	r2, #0
  400386:	4b31      	ldr	r3, [pc, #196]	; (40044c <first_slow_spin+0x13c>)
  400388:	47a0      	blx	r4
  40038a:	2200      	movs	r2, #0
  40038c:	4b30      	ldr	r3, [pc, #192]	; (400450 <first_slow_spin+0x140>)
  40038e:	47c8      	blx	r9
  400390:	4602      	mov	r2, r0
  400392:	460b      	mov	r3, r1
  400394:	2000      	movs	r0, #0
  400396:	492f      	ldr	r1, [pc, #188]	; (400454 <first_slow_spin+0x144>)
  400398:	47c0      	blx	r8
  40039a:	47a8      	blx	r5
  40039c:	ee09 0a90 	vmov	s19, r0
		pwm_testing_c = 1000 - (sin(omega*T-PI/3)+1)*500*V_pp_test/V_supply;
  4003a0:	ee78 7a49 	vsub.f32	s15, s16, s18
  4003a4:	ee17 0a90 	vmov	r0, s15
  4003a8:	47b8      	blx	r7
  4003aa:	47d0      	blx	sl
  4003ac:	2200      	movs	r2, #0
  4003ae:	4b24      	ldr	r3, [pc, #144]	; (400440 <first_slow_spin+0x130>)
  4003b0:	47b0      	blx	r6
  4003b2:	2200      	movs	r2, #0
  4003b4:	4b24      	ldr	r3, [pc, #144]	; (400448 <first_slow_spin+0x138>)
  4003b6:	47a0      	blx	r4
  4003b8:	2200      	movs	r2, #0
  4003ba:	4b24      	ldr	r3, [pc, #144]	; (40044c <first_slow_spin+0x13c>)
  4003bc:	47a0      	blx	r4
  4003be:	2200      	movs	r2, #0
  4003c0:	4b23      	ldr	r3, [pc, #140]	; (400450 <first_slow_spin+0x140>)
  4003c2:	47c8      	blx	r9
  4003c4:	4602      	mov	r2, r0
  4003c6:	460b      	mov	r3, r1
  4003c8:	2000      	movs	r0, #0
  4003ca:	4922      	ldr	r1, [pc, #136]	; (400454 <first_slow_spin+0x144>)
  4003cc:	47c0      	blx	r8
  4003ce:	47a8      	blx	r5
  4003d0:	ee08 0a10 	vmov	s16, r0
		
		pwm_set_duty(PWM_PHASE_A,pwm_testing_a);
  4003d4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 400478 <first_slow_spin+0x168>
  4003d8:	eefc 7aca 	vcvt.u32.f32	s15, s20
  4003dc:	ee17 2a90 	vmov	r2, s15
  4003e0:	2100      	movs	r1, #0
  4003e2:	4640      	mov	r0, r8
  4003e4:	4c1e      	ldr	r4, [pc, #120]	; (400460 <first_slow_spin+0x150>)
  4003e6:	47a0      	blx	r4
		pwm_set_duty(PWM_PHASE_B,pwm_testing_b);
  4003e8:	eefc 7ae9 	vcvt.u32.f32	s15, s19
  4003ec:	ee17 2a90 	vmov	r2, s15
  4003f0:	2102      	movs	r1, #2
  4003f2:	4640      	mov	r0, r8
  4003f4:	47a0      	blx	r4
		pwm_set_duty(PWM_PHASE_C,pwm_testing_c);
  4003f6:	eefc 7ac8 	vcvt.u32.f32	s15, s16
  4003fa:	ee17 2a90 	vmov	r2, s15
  4003fe:	2100      	movs	r1, #0
  400400:	4818      	ldr	r0, [pc, #96]	; (400464 <first_slow_spin+0x154>)
  400402:	47a0      	blx	r4
		
		delay_us(333);
  400404:	f240 104d 	movw	r0, #333	; 0x14d
  400408:	4b17      	ldr	r3, [pc, #92]	; (400468 <first_slow_spin+0x158>)
  40040a:	4798      	blx	r3
		T = T + 0.000333;			//Updates the duty cycle every switch at 3kHz switching frequency
  40040c:	ee18 0a90 	vmov	r0, s17
  400410:	47b8      	blx	r7
  400412:	a305      	add	r3, pc, #20	; (adr r3, 400428 <first_slow_spin+0x118>)
  400414:	e9d3 2300 	ldrd	r2, r3, [r3]
  400418:	47b0      	blx	r6
  40041a:	47a8      	blx	r5
  40041c:	ee08 0a90 	vmov	s17, r0
  400420:	e77c      	b.n	40031c <first_slow_spin+0xc>
  400422:	bf00      	nop
  400424:	f3af 8000 	nop.w
  400428:	1c0ca601 	.word	0x1c0ca601
  40042c:	3f35d2d0 	.word	0x3f35d2d0
  400430:	00000000 	.word	0x00000000
  400434:	42bc8000 	.word	0x42bc8000
  400438:	0040331d 	.word	0x0040331d
  40043c:	00403061 	.word	0x00403061
  400440:	3ff00000 	.word	0x3ff00000
  400444:	004033c5 	.word	0x004033c5
  400448:	407f4000 	.word	0x407f4000
  40044c:	40140000 	.word	0x40140000
  400450:	40340000 	.word	0x40340000
  400454:	408f4000 	.word	0x408f4000
  400458:	00403949 	.word	0x00403949
  40045c:	3f860a92 	.word	0x3f860a92
  400460:	00400295 	.word	0x00400295
  400464:	2040034c 	.word	0x2040034c
  400468:	00400b15 	.word	0x00400b15
  40046c:	00401d11 	.word	0x00401d11
  400470:	00403619 	.word	0x00403619
  400474:	0040305d 	.word	0x0040305d
  400478:	204002c0 	.word	0x204002c0

0040047c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40047c:	e7fe      	b.n	40047c <Dummy_Handler>
	...

00400480 <Reset_Handler>:
{
  400480:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400482:	4b10      	ldr	r3, [pc, #64]	; (4004c4 <Reset_Handler+0x44>)
  400484:	4a10      	ldr	r2, [pc, #64]	; (4004c8 <Reset_Handler+0x48>)
  400486:	429a      	cmp	r2, r3
  400488:	d009      	beq.n	40049e <Reset_Handler+0x1e>
  40048a:	4b0e      	ldr	r3, [pc, #56]	; (4004c4 <Reset_Handler+0x44>)
  40048c:	4a0e      	ldr	r2, [pc, #56]	; (4004c8 <Reset_Handler+0x48>)
  40048e:	e003      	b.n	400498 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400490:	6811      	ldr	r1, [r2, #0]
  400492:	6019      	str	r1, [r3, #0]
  400494:	3304      	adds	r3, #4
  400496:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400498:	490c      	ldr	r1, [pc, #48]	; (4004cc <Reset_Handler+0x4c>)
  40049a:	428b      	cmp	r3, r1
  40049c:	d3f8      	bcc.n	400490 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40049e:	4b0c      	ldr	r3, [pc, #48]	; (4004d0 <Reset_Handler+0x50>)
  4004a0:	e002      	b.n	4004a8 <Reset_Handler+0x28>
                *pDest++ = 0;
  4004a2:	2200      	movs	r2, #0
  4004a4:	601a      	str	r2, [r3, #0]
  4004a6:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4004a8:	4a0a      	ldr	r2, [pc, #40]	; (4004d4 <Reset_Handler+0x54>)
  4004aa:	4293      	cmp	r3, r2
  4004ac:	d3f9      	bcc.n	4004a2 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4004ae:	4a0a      	ldr	r2, [pc, #40]	; (4004d8 <Reset_Handler+0x58>)
  4004b0:	4b0a      	ldr	r3, [pc, #40]	; (4004dc <Reset_Handler+0x5c>)
  4004b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4004b6:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4004b8:	4b09      	ldr	r3, [pc, #36]	; (4004e0 <Reset_Handler+0x60>)
  4004ba:	4798      	blx	r3
        main();
  4004bc:	4b09      	ldr	r3, [pc, #36]	; (4004e4 <Reset_Handler+0x64>)
  4004be:	4798      	blx	r3
  4004c0:	e7fe      	b.n	4004c0 <Reset_Handler+0x40>
  4004c2:	bf00      	nop
  4004c4:	20400000 	.word	0x20400000
  4004c8:	00406bb8 	.word	0x00406bb8
  4004cc:	20400218 	.word	0x20400218
  4004d0:	20400218 	.word	0x20400218
  4004d4:	20400370 	.word	0x20400370
  4004d8:	e000ed00 	.word	0xe000ed00
  4004dc:	00400000 	.word	0x00400000
  4004e0:	004039e9 	.word	0x004039e9
  4004e4:	00401be5 	.word	0x00401be5

004004e8 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  4004e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4004ec:	4b08      	ldr	r3, [pc, #32]	; (400510 <ADC_0_PORT_init+0x28>)
  4004ee:	601a      	str	r2, [r3, #0]
  4004f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4004f4:	2208      	movs	r2, #8
  4004f6:	601a      	str	r2, [r3, #0]
  4004f8:	2204      	movs	r2, #4
  4004fa:	601a      	str	r2, [r3, #0]
  4004fc:	4a05      	ldr	r2, [pc, #20]	; (400514 <ADC_0_PORT_init+0x2c>)
  4004fe:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400502:	6011      	str	r1, [r2, #0]
  400504:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400508:	6011      	str	r1, [r2, #0]
  40050a:	2201      	movs	r2, #1
  40050c:	601a      	str	r2, [r3, #0]
  40050e:	4770      	bx	lr
  400510:	400e1400 	.word	0x400e1400
  400514:	400e0e00 	.word	0x400e0e00

00400518 <ADC_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400518:	4b04      	ldr	r3, [pc, #16]	; (40052c <ADC_0_CLOCK_init+0x14>)
  40051a:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40051c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400520:	d103      	bne.n	40052a <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400522:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400526:	4b01      	ldr	r3, [pc, #4]	; (40052c <ADC_0_CLOCK_init+0x14>)
  400528:	611a      	str	r2, [r3, #16]
  40052a:	4770      	bx	lr
  40052c:	400e0600 	.word	0x400e0600

00400530 <ADC_0_init>:

	_pmc_enable_periph_clock(ID_AFEC0);
}

void ADC_0_init(void)
{
  400530:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  400532:	4b05      	ldr	r3, [pc, #20]	; (400548 <ADC_0_init+0x18>)
  400534:	4798      	blx	r3
	ADC_0_PORT_init();
  400536:	4b05      	ldr	r3, [pc, #20]	; (40054c <ADC_0_init+0x1c>)
  400538:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  40053a:	2200      	movs	r2, #0
  40053c:	4904      	ldr	r1, [pc, #16]	; (400550 <ADC_0_init+0x20>)
  40053e:	4805      	ldr	r0, [pc, #20]	; (400554 <ADC_0_init+0x24>)
  400540:	4b05      	ldr	r3, [pc, #20]	; (400558 <ADC_0_init+0x28>)
  400542:	4798      	blx	r3
  400544:	bd08      	pop	{r3, pc}
  400546:	bf00      	nop
  400548:	00400519 	.word	0x00400519
  40054c:	004004e9 	.word	0x004004e9
  400550:	4003c000 	.word	0x4003c000
  400554:	20400348 	.word	0x20400348
  400558:	004009e9 	.word	0x004009e9

0040055c <ADC_1_PORT_init>:
  40055c:	2202      	movs	r2, #2
  40055e:	4b07      	ldr	r3, [pc, #28]	; (40057c <ADC_1_PORT_init+0x20>)
  400560:	601a      	str	r2, [r3, #0]
  400562:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40056a:	601a      	str	r2, [r3, #0]
  40056c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400570:	601a      	str	r2, [r3, #0]
  400572:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400576:	601a      	str	r2, [r3, #0]
  400578:	4770      	bx	lr
  40057a:	bf00      	nop
  40057c:	400e1000 	.word	0x400e1000

00400580 <ADC_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400580:	4b05      	ldr	r3, [pc, #20]	; (400598 <ADC_1_CLOCK_init+0x18>)
  400582:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400586:	f413 7f80 	tst.w	r3, #256	; 0x100
  40058a:	d104      	bne.n	400596 <ADC_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40058c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400590:	4b01      	ldr	r3, [pc, #4]	; (400598 <ADC_1_CLOCK_init+0x18>)
  400592:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400596:	4770      	bx	lr
  400598:	400e0600 	.word	0x400e0600

0040059c <ADC_1_init>:

	_pmc_enable_periph_clock(ID_AFEC1);
}

void ADC_1_init(void)
{
  40059c:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
  40059e:	4b05      	ldr	r3, [pc, #20]	; (4005b4 <ADC_1_init+0x18>)
  4005a0:	4798      	blx	r3
	ADC_1_PORT_init();
  4005a2:	4b05      	ldr	r3, [pc, #20]	; (4005b8 <ADC_1_init+0x1c>)
  4005a4:	4798      	blx	r3
	adc_sync_init(&ADC_1, AFEC1, (void *)NULL);
  4005a6:	2200      	movs	r2, #0
  4005a8:	4904      	ldr	r1, [pc, #16]	; (4005bc <ADC_1_init+0x20>)
  4005aa:	4805      	ldr	r0, [pc, #20]	; (4005c0 <ADC_1_init+0x24>)
  4005ac:	4b05      	ldr	r3, [pc, #20]	; (4005c4 <ADC_1_init+0x28>)
  4005ae:	4798      	blx	r3
  4005b0:	bd08      	pop	{r3, pc}
  4005b2:	bf00      	nop
  4005b4:	00400581 	.word	0x00400581
  4005b8:	0040055d 	.word	0x0040055d
  4005bc:	40064000 	.word	0x40064000
  4005c0:	20400368 	.word	0x20400368
  4005c4:	004009e9 	.word	0x004009e9

004005c8 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  4005c8:	4b04      	ldr	r3, [pc, #16]	; (4005dc <EXTERNAL_IRQ_D_init+0x14>)
  4005ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4005ce:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  4005d0:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  4005d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4005d6:	601a      	str	r2, [r3, #0]
  4005d8:	4770      	bx	lr
  4005da:	bf00      	nop
  4005dc:	400e1400 	.word	0x400e1400

004005e0 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4005e0:	4b0a      	ldr	r3, [pc, #40]	; (40060c <EXTERNAL_IRQ_A_init+0x2c>)
  4005e2:	2204      	movs	r2, #4
  4005e4:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4005e6:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4005e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4005ec:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4005ee:	2220      	movs	r2, #32
  4005f0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4005f2:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4005f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4005f8:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4005fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4005fe:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400600:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400602:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400606:	601a      	str	r2, [r3, #0]
  400608:	4770      	bx	lr
  40060a:	bf00      	nop
  40060c:	400e0e00 	.word	0x400e0e00

00400610 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400610:	4b16      	ldr	r3, [pc, #88]	; (40066c <PWM_0_PORT_init+0x5c>)
  400612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400614:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400618:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40061a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40061c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  400620:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400622:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400626:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400628:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40062a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  40062e:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400630:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400632:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400636:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40063c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40063e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400640:	f022 0202 	bic.w	r2, r2, #2
  400644:	671a      	str	r2, [r3, #112]	; 0x70
  400646:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400648:	f022 0202 	bic.w	r2, r2, #2
  40064c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40064e:	2202      	movs	r2, #2
  400650:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400652:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400654:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400658:	671a      	str	r2, [r3, #112]	; 0x70
  40065a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40065c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400660:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400662:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400666:	605a      	str	r2, [r3, #4]
  400668:	4770      	bx	lr
  40066a:	bf00      	nop
  40066c:	400e0e00 	.word	0x400e0e00

00400670 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400670:	4b04      	ldr	r3, [pc, #16]	; (400684 <PWM_0_CLOCK_init+0x14>)
  400672:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400674:	2b00      	cmp	r3, #0
  400676:	db03      	blt.n	400680 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400678:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40067c:	4b01      	ldr	r3, [pc, #4]	; (400684 <PWM_0_CLOCK_init+0x14>)
  40067e:	611a      	str	r2, [r3, #16]
  400680:	4770      	bx	lr
  400682:	bf00      	nop
  400684:	400e0600 	.word	0x400e0600

00400688 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400688:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  40068a:	4b06      	ldr	r3, [pc, #24]	; (4006a4 <PWM_0_init+0x1c>)
  40068c:	4798      	blx	r3
	PWM_0_PORT_init();
  40068e:	4b06      	ldr	r3, [pc, #24]	; (4006a8 <PWM_0_init+0x20>)
  400690:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400692:	4b06      	ldr	r3, [pc, #24]	; (4006ac <PWM_0_init+0x24>)
  400694:	4798      	blx	r3
  400696:	4602      	mov	r2, r0
  400698:	4905      	ldr	r1, [pc, #20]	; (4006b0 <PWM_0_init+0x28>)
  40069a:	4806      	ldr	r0, [pc, #24]	; (4006b4 <PWM_0_init+0x2c>)
  40069c:	4b06      	ldr	r3, [pc, #24]	; (4006b8 <PWM_0_init+0x30>)
  40069e:	4798      	blx	r3
  4006a0:	bd08      	pop	{r3, pc}
  4006a2:	bf00      	nop
  4006a4:	00400671 	.word	0x00400671
  4006a8:	00400611 	.word	0x00400611
  4006ac:	004017e9 	.word	0x004017e9
  4006b0:	40020000 	.word	0x40020000
  4006b4:	204002c0 	.word	0x204002c0
  4006b8:	00400c41 	.word	0x00400c41

004006bc <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4006bc:	4b0c      	ldr	r3, [pc, #48]	; (4006f0 <PWM_1_PORT_init+0x34>)
  4006be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4006c4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4006c6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4006cc:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4006ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4006d2:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4006d4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4006d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006da:	f042 0201 	orr.w	r2, r2, #1
  4006de:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4006e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006e2:	f022 0201 	bic.w	r2, r2, #1
  4006e6:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4006e8:	2201      	movs	r2, #1
  4006ea:	605a      	str	r2, [r3, #4]
  4006ec:	4770      	bx	lr
  4006ee:	bf00      	nop
  4006f0:	400e0e00 	.word	0x400e0e00

004006f4 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4006f4:	4b05      	ldr	r3, [pc, #20]	; (40070c <PWM_1_CLOCK_init+0x18>)
  4006f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4006fa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  4006fe:	d104      	bne.n	40070a <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400704:	4b01      	ldr	r3, [pc, #4]	; (40070c <PWM_1_CLOCK_init+0x18>)
  400706:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40070a:	4770      	bx	lr
  40070c:	400e0600 	.word	0x400e0600

00400710 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  400710:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  400712:	4b06      	ldr	r3, [pc, #24]	; (40072c <PWM_1_init+0x1c>)
  400714:	4798      	blx	r3
	PWM_1_PORT_init();
  400716:	4b06      	ldr	r3, [pc, #24]	; (400730 <PWM_1_init+0x20>)
  400718:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  40071a:	4b06      	ldr	r3, [pc, #24]	; (400734 <PWM_1_init+0x24>)
  40071c:	4798      	blx	r3
  40071e:	4602      	mov	r2, r0
  400720:	4905      	ldr	r1, [pc, #20]	; (400738 <PWM_1_init+0x28>)
  400722:	4806      	ldr	r0, [pc, #24]	; (40073c <PWM_1_init+0x2c>)
  400724:	4b06      	ldr	r3, [pc, #24]	; (400740 <PWM_1_init+0x30>)
  400726:	4798      	blx	r3
  400728:	bd08      	pop	{r3, pc}
  40072a:	bf00      	nop
  40072c:	004006f5 	.word	0x004006f5
  400730:	004006bd 	.word	0x004006bd
  400734:	004017e9 	.word	0x004017e9
  400738:	4005c000 	.word	0x4005c000
  40073c:	2040034c 	.word	0x2040034c
  400740:	00400c41 	.word	0x00400c41

00400744 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400744:	4b06      	ldr	r3, [pc, #24]	; (400760 <ENCODER_A_PORT_init+0x1c>)
  400746:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400748:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40074c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40074e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400750:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  400754:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400756:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40075a:	605a      	str	r2, [r3, #4]
  40075c:	4770      	bx	lr
  40075e:	bf00      	nop
  400760:	400e0e00 	.word	0x400e0e00

00400764 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  400764:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400766:	4b0e      	ldr	r3, [pc, #56]	; (4007a0 <ENCODER_A_init+0x3c>)
  400768:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40076a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40076e:	d103      	bne.n	400778 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400770:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400774:	4b0a      	ldr	r3, [pc, #40]	; (4007a0 <ENCODER_A_init+0x3c>)
  400776:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400778:	4b09      	ldr	r3, [pc, #36]	; (4007a0 <ENCODER_A_init+0x3c>)
  40077a:	699b      	ldr	r3, [r3, #24]
  40077c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400780:	d103      	bne.n	40078a <ENCODER_A_init+0x26>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400782:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400786:	4b06      	ldr	r3, [pc, #24]	; (4007a0 <ENCODER_A_init+0x3c>)
  400788:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	_pmc_enable_periph_clock(ID_TC0_CHANNEL1);
	ENCODER_A_PORT_init();
  40078a:	4b06      	ldr	r3, [pc, #24]	; (4007a4 <ENCODER_A_init+0x40>)
  40078c:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  40078e:	4b06      	ldr	r3, [pc, #24]	; (4007a8 <ENCODER_A_init+0x44>)
  400790:	4798      	blx	r3
  400792:	4602      	mov	r2, r0
  400794:	4905      	ldr	r1, [pc, #20]	; (4007ac <ENCODER_A_init+0x48>)
  400796:	4806      	ldr	r0, [pc, #24]	; (4007b0 <ENCODER_A_init+0x4c>)
  400798:	4b06      	ldr	r3, [pc, #24]	; (4007b4 <ENCODER_A_init+0x50>)
  40079a:	4798      	blx	r3
  40079c:	bd08      	pop	{r3, pc}
  40079e:	bf00      	nop
  4007a0:	400e0600 	.word	0x400e0600
  4007a4:	00400745 	.word	0x00400745
  4007a8:	004019a1 	.word	0x004019a1
  4007ac:	4000c000 	.word	0x4000c000
  4007b0:	2040032c 	.word	0x2040032c
  4007b4:	00400da9 	.word	0x00400da9

004007b8 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4007b8:	4b06      	ldr	r3, [pc, #24]	; (4007d4 <ENCODER_B_PORT_init+0x1c>)
  4007ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4007bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4007c0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4007c2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007c4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  4007c8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4007ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4007ce:	605a      	str	r2, [r3, #4]
  4007d0:	4770      	bx	lr
  4007d2:	bf00      	nop
  4007d4:	400e1400 	.word	0x400e1400

004007d8 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  4007d8:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4007da:	4b10      	ldr	r3, [pc, #64]	; (40081c <ENCODER_B_init+0x44>)
  4007dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4007e0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  4007e4:	d104      	bne.n	4007f0 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4007e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4007ea:	4b0c      	ldr	r3, [pc, #48]	; (40081c <ENCODER_B_init+0x44>)
  4007ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4007f0:	4b0a      	ldr	r3, [pc, #40]	; (40081c <ENCODER_B_init+0x44>)
  4007f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  4007f6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  4007fa:	d104      	bne.n	400806 <ENCODER_B_init+0x2e>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4007fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400800:	4b06      	ldr	r3, [pc, #24]	; (40081c <ENCODER_B_init+0x44>)
  400802:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	_pmc_enable_periph_clock(ID_TC3_CHANNEL1);
	ENCODER_B_PORT_init();
  400806:	4b06      	ldr	r3, [pc, #24]	; (400820 <ENCODER_B_init+0x48>)
  400808:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  40080a:	4b06      	ldr	r3, [pc, #24]	; (400824 <ENCODER_B_init+0x4c>)
  40080c:	4798      	blx	r3
  40080e:	4602      	mov	r2, r0
  400810:	4905      	ldr	r1, [pc, #20]	; (400828 <ENCODER_B_init+0x50>)
  400812:	4806      	ldr	r0, [pc, #24]	; (40082c <ENCODER_B_init+0x54>)
  400814:	4b06      	ldr	r3, [pc, #24]	; (400830 <ENCODER_B_init+0x58>)
  400816:	4798      	blx	r3
  400818:	bd08      	pop	{r3, pc}
  40081a:	bf00      	nop
  40081c:	400e0600 	.word	0x400e0600
  400820:	004007b9 	.word	0x004007b9
  400824:	004019a1 	.word	0x004019a1
  400828:	40054000 	.word	0x40054000
  40082c:	204002dc 	.word	0x204002dc
  400830:	00400da9 	.word	0x00400da9

00400834 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400834:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400836:	4802      	ldr	r0, [pc, #8]	; (400840 <delay_driver_init+0xc>)
  400838:	4b02      	ldr	r3, [pc, #8]	; (400844 <delay_driver_init+0x10>)
  40083a:	4798      	blx	r3
  40083c:	bd08      	pop	{r3, pc}
  40083e:	bf00      	nop
  400840:	e000e010 	.word	0xe000e010
  400844:	00400b01 	.word	0x00400b01

00400848 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400848:	4b0f      	ldr	r3, [pc, #60]	; (400888 <EDBG_COM_PORT_init+0x40>)
  40084a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40084c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400850:	671a      	str	r2, [r3, #112]	; 0x70
  400852:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400854:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400858:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40085a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40085e:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400860:	4a0a      	ldr	r2, [pc, #40]	; (40088c <EDBG_COM_PORT_init+0x44>)
  400862:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400866:	f043 0310 	orr.w	r3, r3, #16
  40086a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40086e:	4b08      	ldr	r3, [pc, #32]	; (400890 <EDBG_COM_PORT_init+0x48>)
  400870:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400872:	f042 0210 	orr.w	r2, r2, #16
  400876:	671a      	str	r2, [r3, #112]	; 0x70
  400878:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40087a:	f042 0210 	orr.w	r2, r2, #16
  40087e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400880:	2210      	movs	r2, #16
  400882:	605a      	str	r2, [r3, #4]
  400884:	4770      	bx	lr
  400886:	bf00      	nop
  400888:	400e0e00 	.word	0x400e0e00
  40088c:	40088000 	.word	0x40088000
  400890:	400e1000 	.word	0x400e1000

00400894 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400894:	4b04      	ldr	r3, [pc, #16]	; (4008a8 <EDBG_COM_CLOCK_init+0x14>)
  400896:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400898:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  40089c:	d103      	bne.n	4008a6 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40089e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4008a2:	4b01      	ldr	r3, [pc, #4]	; (4008a8 <EDBG_COM_CLOCK_init+0x14>)
  4008a4:	611a      	str	r2, [r3, #16]
  4008a6:	4770      	bx	lr
  4008a8:	400e0600 	.word	0x400e0600

004008ac <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  4008ac:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  4008ae:	4b06      	ldr	r3, [pc, #24]	; (4008c8 <EDBG_COM_init+0x1c>)
  4008b0:	4798      	blx	r3
	EDBG_COM_PORT_init();
  4008b2:	4b06      	ldr	r3, [pc, #24]	; (4008cc <EDBG_COM_init+0x20>)
  4008b4:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  4008b6:	4b06      	ldr	r3, [pc, #24]	; (4008d0 <EDBG_COM_init+0x24>)
  4008b8:	4798      	blx	r3
  4008ba:	4602      	mov	r2, r0
  4008bc:	4905      	ldr	r1, [pc, #20]	; (4008d4 <EDBG_COM_init+0x28>)
  4008be:	4806      	ldr	r0, [pc, #24]	; (4008d8 <EDBG_COM_init+0x2c>)
  4008c0:	4b06      	ldr	r3, [pc, #24]	; (4008dc <EDBG_COM_init+0x30>)
  4008c2:	4798      	blx	r3
  4008c4:	bd08      	pop	{r3, pc}
  4008c6:	bf00      	nop
  4008c8:	00400895 	.word	0x00400895
  4008cc:	00400849 	.word	0x00400849
  4008d0:	00401be1 	.word	0x00401be1
  4008d4:	40028000 	.word	0x40028000
  4008d8:	20400320 	.word	0x20400320
  4008dc:	00400eb5 	.word	0x00400eb5

004008e0 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  4008e0:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4008e2:	4b32      	ldr	r3, [pc, #200]	; (4009ac <system_init+0xcc>)
  4008e4:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4008e6:	4b32      	ldr	r3, [pc, #200]	; (4009b0 <system_init+0xd0>)
  4008e8:	699b      	ldr	r3, [r3, #24]
  4008ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4008ee:	d103      	bne.n	4008f8 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4008f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4008f4:	4b2e      	ldr	r3, [pc, #184]	; (4009b0 <system_init+0xd0>)
  4008f6:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4008f8:	4b2d      	ldr	r3, [pc, #180]	; (4009b0 <system_init+0xd0>)
  4008fa:	699b      	ldr	r3, [r3, #24]
  4008fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400900:	d103      	bne.n	40090a <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400902:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400906:	4b2a      	ldr	r3, [pc, #168]	; (4009b0 <system_init+0xd0>)
  400908:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40090a:	4b29      	ldr	r3, [pc, #164]	; (4009b0 <system_init+0xd0>)
  40090c:	699b      	ldr	r3, [r3, #24]
  40090e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400912:	d103      	bne.n	40091c <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400914:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400918:	4b25      	ldr	r3, [pc, #148]	; (4009b0 <system_init+0xd0>)
  40091a:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40091c:	4a25      	ldr	r2, [pc, #148]	; (4009b4 <system_init+0xd4>)
  40091e:	6853      	ldr	r3, [r2, #4]
  400920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400924:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  400926:	4b24      	ldr	r3, [pc, #144]	; (4009b8 <system_init+0xd8>)
  400928:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40092c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  40092e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  400932:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  400934:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400936:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40093a:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40093c:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40093e:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400944:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400946:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400948:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40094a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40094e:	f44f 7080 	mov.w	r0, #256	; 0x100
  400952:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400954:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400956:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400958:	f44f 7000 	mov.w	r0, #512	; 0x200
  40095c:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40095e:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400960:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400962:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400966:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400968:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40096a:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40096c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400970:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400972:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400974:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400976:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400978:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40097a:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  40097c:	4b0f      	ldr	r3, [pc, #60]	; (4009bc <system_init+0xdc>)
  40097e:	4798      	blx	r3

	ADC_1_init();
  400980:	4b0f      	ldr	r3, [pc, #60]	; (4009c0 <system_init+0xe0>)
  400982:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  400984:	4b0f      	ldr	r3, [pc, #60]	; (4009c4 <system_init+0xe4>)
  400986:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  400988:	4b0f      	ldr	r3, [pc, #60]	; (4009c8 <system_init+0xe8>)
  40098a:	4798      	blx	r3

	PWM_0_init();
  40098c:	4b0f      	ldr	r3, [pc, #60]	; (4009cc <system_init+0xec>)
  40098e:	4798      	blx	r3

	PWM_1_init();
  400990:	4b0f      	ldr	r3, [pc, #60]	; (4009d0 <system_init+0xf0>)
  400992:	4798      	blx	r3
	ENCODER_A_init();
  400994:	4b0f      	ldr	r3, [pc, #60]	; (4009d4 <system_init+0xf4>)
  400996:	4798      	blx	r3
	ENCODER_B_init();
  400998:	4b0f      	ldr	r3, [pc, #60]	; (4009d8 <system_init+0xf8>)
  40099a:	4798      	blx	r3

	delay_driver_init();
  40099c:	4b0f      	ldr	r3, [pc, #60]	; (4009dc <system_init+0xfc>)
  40099e:	4798      	blx	r3

	EDBG_COM_init();
  4009a0:	4b0f      	ldr	r3, [pc, #60]	; (4009e0 <system_init+0x100>)
  4009a2:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  4009a4:	4b0f      	ldr	r3, [pc, #60]	; (4009e4 <system_init+0x104>)
  4009a6:	4798      	blx	r3
  4009a8:	bd08      	pop	{r3, pc}
  4009aa:	bf00      	nop
  4009ac:	00401131 	.word	0x00401131
  4009b0:	400e0600 	.word	0x400e0600
  4009b4:	400e1850 	.word	0x400e1850
  4009b8:	400e0e00 	.word	0x400e0e00
  4009bc:	00400531 	.word	0x00400531
  4009c0:	0040059d 	.word	0x0040059d
  4009c4:	004005c9 	.word	0x004005c9
  4009c8:	004005e1 	.word	0x004005e1
  4009cc:	00400689 	.word	0x00400689
  4009d0:	00400711 	.word	0x00400711
  4009d4:	00400765 	.word	0x00400765
  4009d8:	004007d9 	.word	0x004007d9
  4009dc:	00400835 	.word	0x00400835
  4009e0:	004008ad 	.word	0x004008ad
  4009e4:	00400b99 	.word	0x00400b99

004009e8 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  4009e8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4009ea:	4604      	mov	r4, r0
  4009ec:	460d      	mov	r5, r1
  4009ee:	2800      	cmp	r0, #0
  4009f0:	bf18      	it	ne
  4009f2:	2900      	cmpne	r1, #0
  4009f4:	bf14      	ite	ne
  4009f6:	2001      	movne	r0, #1
  4009f8:	2000      	moveq	r0, #0
  4009fa:	2239      	movs	r2, #57	; 0x39
  4009fc:	4903      	ldr	r1, [pc, #12]	; (400a0c <adc_sync_init+0x24>)
  4009fe:	4b04      	ldr	r3, [pc, #16]	; (400a10 <adc_sync_init+0x28>)
  400a00:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  400a02:	4629      	mov	r1, r5
  400a04:	4620      	mov	r0, r4
  400a06:	4b03      	ldr	r3, [pc, #12]	; (400a14 <adc_sync_init+0x2c>)
  400a08:	4798      	blx	r3
}
  400a0a:	bd38      	pop	{r3, r4, r5, pc}
  400a0c:	00406428 	.word	0x00406428
  400a10:	00400f29 	.word	0x00400f29
  400a14:	004010a5 	.word	0x004010a5

00400a18 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
  400a18:	b538      	push	{r3, r4, r5, lr}
  400a1a:	460d      	mov	r5, r1
	ASSERT(descr);
  400a1c:	4604      	mov	r4, r0
  400a1e:	224e      	movs	r2, #78	; 0x4e
  400a20:	4905      	ldr	r1, [pc, #20]	; (400a38 <adc_sync_enable_channel+0x20>)
  400a22:	3000      	adds	r0, #0
  400a24:	bf18      	it	ne
  400a26:	2001      	movne	r0, #1
  400a28:	4b04      	ldr	r3, [pc, #16]	; (400a3c <adc_sync_enable_channel+0x24>)
  400a2a:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
  400a2c:	4629      	mov	r1, r5
  400a2e:	4620      	mov	r0, r4
  400a30:	4b03      	ldr	r3, [pc, #12]	; (400a40 <adc_sync_enable_channel+0x28>)
  400a32:	4798      	blx	r3

	return ERR_NONE;
}
  400a34:	2000      	movs	r0, #0
  400a36:	bd38      	pop	{r3, r4, r5, pc}
  400a38:	00406428 	.word	0x00406428
  400a3c:	00400f29 	.word	0x00400f29
  400a40:	004010dd 	.word	0x004010dd

00400a44 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
  400a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400a48:	460d      	mov	r5, r1
  400a4a:	4699      	mov	r9, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
  400a4c:	4607      	mov	r7, r0
  400a4e:	4690      	mov	r8, r2
  400a50:	2800      	cmp	r0, #0
  400a52:	bf18      	it	ne
  400a54:	2a00      	cmpne	r2, #0
  400a56:	d002      	beq.n	400a5e <adc_sync_read_channel+0x1a>
  400a58:	b9cb      	cbnz	r3, 400a8e <adc_sync_read_channel+0x4a>
  400a5a:	2000      	movs	r0, #0
  400a5c:	e000      	b.n	400a60 <adc_sync_read_channel+0x1c>
  400a5e:	2000      	movs	r0, #0
  400a60:	f8df a07c 	ldr.w	sl, [pc, #124]	; 400ae0 <adc_sync_read_channel+0x9c>
  400a64:	2267      	movs	r2, #103	; 0x67
  400a66:	4651      	mov	r1, sl
  400a68:	4e18      	ldr	r6, [pc, #96]	; (400acc <adc_sync_read_channel+0x88>)
  400a6a:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
  400a6c:	463c      	mov	r4, r7
  400a6e:	4638      	mov	r0, r7
  400a70:	4b17      	ldr	r3, [pc, #92]	; (400ad0 <adc_sync_read_channel+0x8c>)
  400a72:	4798      	blx	r3
  400a74:	4607      	mov	r7, r0
	ASSERT(!(length % data_size));
  400a76:	fb99 f0f0 	sdiv	r0, r9, r0
  400a7a:	fb07 9010 	mls	r0, r7, r0, r9
  400a7e:	2269      	movs	r2, #105	; 0x69
  400a80:	4651      	mov	r1, sl
  400a82:	fab0 f080 	clz	r0, r0
  400a86:	0940      	lsrs	r0, r0, #5
  400a88:	47b0      	blx	r6
	uint16_t offset = 0;
  400a8a:	2600      	movs	r6, #0
  400a8c:	e005      	b.n	400a9a <adc_sync_read_channel+0x56>
	ASSERT(descr && buffer && length);
  400a8e:	2001      	movs	r0, #1
  400a90:	e7e6      	b.n	400a60 <adc_sync_read_channel+0x1c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
  400a92:	443e      	add	r6, r7
  400a94:	b2b6      	uxth	r6, r6
	} while (offset < length);
  400a96:	45b1      	cmp	r9, r6
  400a98:	d915      	bls.n	400ac6 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
  400a9a:	4620      	mov	r0, r4
  400a9c:	4b0d      	ldr	r3, [pc, #52]	; (400ad4 <adc_sync_read_channel+0x90>)
  400a9e:	4798      	blx	r3
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
  400aa0:	4629      	mov	r1, r5
  400aa2:	4620      	mov	r0, r4
  400aa4:	4b0c      	ldr	r3, [pc, #48]	; (400ad8 <adc_sync_read_channel+0x94>)
  400aa6:	4798      	blx	r3
  400aa8:	2800      	cmp	r0, #0
  400aaa:	d0f9      	beq.n	400aa0 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
  400aac:	4629      	mov	r1, r5
  400aae:	4620      	mov	r0, r4
  400ab0:	4b0a      	ldr	r3, [pc, #40]	; (400adc <adc_sync_read_channel+0x98>)
  400ab2:	4798      	blx	r3
		buffer[offset] = result;
  400ab4:	f808 0006 	strb.w	r0, [r8, r6]
		if (1 < data_size) {
  400ab8:	2f01      	cmp	r7, #1
  400aba:	d9ea      	bls.n	400a92 <adc_sync_read_channel+0x4e>
			buffer[offset + 1] = result >> 8;
  400abc:	1c73      	adds	r3, r6, #1
  400abe:	0a00      	lsrs	r0, r0, #8
  400ac0:	f808 0003 	strb.w	r0, [r8, r3]
  400ac4:	e7e5      	b.n	400a92 <adc_sync_read_channel+0x4e>

	return offset;
}
  400ac6:	4630      	mov	r0, r6
  400ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400acc:	00400f29 	.word	0x00400f29
  400ad0:	004010e9 	.word	0x004010e9
  400ad4:	00401101 	.word	0x00401101
  400ad8:	004010ed 	.word	0x004010ed
  400adc:	00401109 	.word	0x00401109
  400ae0:	00406428 	.word	0x00406428

00400ae4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400ae4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400ae8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400aea:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400aec:	f3bf 8f5f 	dmb	sy
  400af0:	4770      	bx	lr

00400af2 <atomic_leave_critical>:
  400af2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400af6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400af8:	f383 8810 	msr	PRIMASK, r3
  400afc:	4770      	bx	lr
	...

00400b00 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400b00:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400b02:	4b02      	ldr	r3, [pc, #8]	; (400b0c <delay_init+0xc>)
  400b04:	6018      	str	r0, [r3, #0]
  400b06:	4b02      	ldr	r3, [pc, #8]	; (400b10 <delay_init+0x10>)
  400b08:	4798      	blx	r3
  400b0a:	bd08      	pop	{r3, pc}
  400b0c:	20400234 	.word	0x20400234
  400b10:	00401801 	.word	0x00401801

00400b14 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  400b14:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  400b16:	4b04      	ldr	r3, [pc, #16]	; (400b28 <delay_us+0x14>)
  400b18:	681c      	ldr	r4, [r3, #0]
  400b1a:	4b04      	ldr	r3, [pc, #16]	; (400b2c <delay_us+0x18>)
  400b1c:	4798      	blx	r3
  400b1e:	4601      	mov	r1, r0
  400b20:	4620      	mov	r0, r4
  400b22:	4b03      	ldr	r3, [pc, #12]	; (400b30 <delay_us+0x1c>)
  400b24:	4798      	blx	r3
  400b26:	bd10      	pop	{r4, pc}
  400b28:	20400234 	.word	0x20400234
  400b2c:	00401115 	.word	0x00401115
  400b30:	0040180d 	.word	0x0040180d

00400b34 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400b34:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  400b36:	4b04      	ldr	r3, [pc, #16]	; (400b48 <delay_ms+0x14>)
  400b38:	681c      	ldr	r4, [r3, #0]
  400b3a:	4b04      	ldr	r3, [pc, #16]	; (400b4c <delay_ms+0x18>)
  400b3c:	4798      	blx	r3
  400b3e:	4601      	mov	r1, r0
  400b40:	4620      	mov	r0, r4
  400b42:	4b03      	ldr	r3, [pc, #12]	; (400b50 <delay_ms+0x1c>)
  400b44:	4798      	blx	r3
  400b46:	bd10      	pop	{r4, pc}
  400b48:	20400234 	.word	0x20400234
  400b4c:	0040111f 	.word	0x0040111f
  400b50:	0040180d 	.word	0x0040180d

00400b54 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400b54:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400b56:	2504      	movs	r5, #4
  400b58:	2400      	movs	r4, #0

	while (upper >= lower) {
  400b5a:	e007      	b.n	400b6c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  400b5c:	4a0d      	ldr	r2, [pc, #52]	; (400b94 <process_ext_irq+0x40>)
  400b5e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400b62:	b1b3      	cbz	r3, 400b92 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400b64:	4798      	blx	r3
  400b66:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  400b68:	3a01      	subs	r2, #1
  400b6a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  400b6c:	42ac      	cmp	r4, r5
  400b6e:	d810      	bhi.n	400b92 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400b70:	192b      	adds	r3, r5, r4
  400b72:	105b      	asrs	r3, r3, #1
  400b74:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400b76:	2a03      	cmp	r2, #3
  400b78:	d80b      	bhi.n	400b92 <process_ext_irq+0x3e>
  400b7a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  400b7c:	4905      	ldr	r1, [pc, #20]	; (400b94 <process_ext_irq+0x40>)
  400b7e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400b82:	6849      	ldr	r1, [r1, #4]
  400b84:	4281      	cmp	r1, r0
  400b86:	d0e9      	beq.n	400b5c <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400b88:	4281      	cmp	r1, r0
  400b8a:	d2ed      	bcs.n	400b68 <process_ext_irq+0x14>
			lower = middle + 1;
  400b8c:	3201      	adds	r2, #1
  400b8e:	b2d4      	uxtb	r4, r2
  400b90:	e7ec      	b.n	400b6c <process_ext_irq+0x18>
  400b92:	bd38      	pop	{r3, r4, r5, pc}
  400b94:	20400238 	.word	0x20400238

00400b98 <ext_irq_init>:
{
  400b98:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400b9a:	2300      	movs	r3, #0
  400b9c:	e00a      	b.n	400bb4 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400b9e:	4a08      	ldr	r2, [pc, #32]	; (400bc0 <ext_irq_init+0x28>)
  400ba0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400ba4:	f04f 30ff 	mov.w	r0, #4294967295
  400ba8:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400baa:	2100      	movs	r1, #0
  400bac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400bb0:	3301      	adds	r3, #1
  400bb2:	b29b      	uxth	r3, r3
  400bb4:	2b03      	cmp	r3, #3
  400bb6:	d9f2      	bls.n	400b9e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400bb8:	4802      	ldr	r0, [pc, #8]	; (400bc4 <ext_irq_init+0x2c>)
  400bba:	4b03      	ldr	r3, [pc, #12]	; (400bc8 <ext_irq_init+0x30>)
  400bbc:	4798      	blx	r3
}
  400bbe:	bd08      	pop	{r3, pc}
  400bc0:	20400238 	.word	0x20400238
  400bc4:	00400b55 	.word	0x00400b55
  400bc8:	00401441 	.word	0x00401441

00400bcc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400bcc:	b570      	push	{r4, r5, r6, lr}
  400bce:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400bd0:	4604      	mov	r4, r0
  400bd2:	460d      	mov	r5, r1
  400bd4:	2800      	cmp	r0, #0
  400bd6:	bf18      	it	ne
  400bd8:	2900      	cmpne	r1, #0
  400bda:	bf14      	ite	ne
  400bdc:	2001      	movne	r0, #1
  400bde:	2000      	moveq	r0, #0
  400be0:	2234      	movs	r2, #52	; 0x34
  400be2:	4904      	ldr	r1, [pc, #16]	; (400bf4 <io_write+0x28>)
  400be4:	4b04      	ldr	r3, [pc, #16]	; (400bf8 <io_write+0x2c>)
  400be6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400be8:	6823      	ldr	r3, [r4, #0]
  400bea:	4632      	mov	r2, r6
  400bec:	4629      	mov	r1, r5
  400bee:	4620      	mov	r0, r4
  400bf0:	4798      	blx	r3
}
  400bf2:	bd70      	pop	{r4, r5, r6, pc}
  400bf4:	00406444 	.word	0x00406444
  400bf8:	00400f29 	.word	0x00400f29

00400bfc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400bfc:	b570      	push	{r4, r5, r6, lr}
  400bfe:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400c00:	4604      	mov	r4, r0
  400c02:	460d      	mov	r5, r1
  400c04:	2800      	cmp	r0, #0
  400c06:	bf18      	it	ne
  400c08:	2900      	cmpne	r1, #0
  400c0a:	bf14      	ite	ne
  400c0c:	2001      	movne	r0, #1
  400c0e:	2000      	moveq	r0, #0
  400c10:	223d      	movs	r2, #61	; 0x3d
  400c12:	4904      	ldr	r1, [pc, #16]	; (400c24 <io_read+0x28>)
  400c14:	4b04      	ldr	r3, [pc, #16]	; (400c28 <io_read+0x2c>)
  400c16:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400c18:	6863      	ldr	r3, [r4, #4]
  400c1a:	4632      	mov	r2, r6
  400c1c:	4629      	mov	r1, r5
  400c1e:	4620      	mov	r0, r4
  400c20:	4798      	blx	r3
}
  400c22:	bd70      	pop	{r4, r5, r6, pc}
  400c24:	00406444 	.word	0x00406444
  400c28:	00400f29 	.word	0x00400f29

00400c2c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400c2c:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400c2e:	6943      	ldr	r3, [r0, #20]
  400c30:	b103      	cbz	r3, 400c34 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400c32:	4798      	blx	r3
  400c34:	bd08      	pop	{r3, pc}

00400c36 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400c36:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400c38:	6983      	ldr	r3, [r0, #24]
  400c3a:	b103      	cbz	r3, 400c3e <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400c3c:	4798      	blx	r3
  400c3e:	bd08      	pop	{r3, pc}

00400c40 <pwm_init>:
{
  400c40:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400c42:	4604      	mov	r4, r0
  400c44:	460d      	mov	r5, r1
  400c46:	2800      	cmp	r0, #0
  400c48:	bf18      	it	ne
  400c4a:	2900      	cmpne	r1, #0
  400c4c:	bf14      	ite	ne
  400c4e:	2001      	movne	r0, #1
  400c50:	2000      	moveq	r0, #0
  400c52:	2233      	movs	r2, #51	; 0x33
  400c54:	4906      	ldr	r1, [pc, #24]	; (400c70 <pwm_init+0x30>)
  400c56:	4b07      	ldr	r3, [pc, #28]	; (400c74 <pwm_init+0x34>)
  400c58:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  400c5a:	4629      	mov	r1, r5
  400c5c:	4620      	mov	r0, r4
  400c5e:	4b06      	ldr	r3, [pc, #24]	; (400c78 <pwm_init+0x38>)
  400c60:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400c62:	4b06      	ldr	r3, [pc, #24]	; (400c7c <pwm_init+0x3c>)
  400c64:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400c66:	4b06      	ldr	r3, [pc, #24]	; (400c80 <pwm_init+0x40>)
  400c68:	6063      	str	r3, [r4, #4]
}
  400c6a:	2000      	movs	r0, #0
  400c6c:	bd38      	pop	{r3, r4, r5, pc}
  400c6e:	bf00      	nop
  400c70:	00406458 	.word	0x00406458
  400c74:	00400f29 	.word	0x00400f29
  400c78:	004015a9 	.word	0x004015a9
  400c7c:	00400c2d 	.word	0x00400c2d
  400c80:	00400c37 	.word	0x00400c37

00400c84 <pwm_enable>:
{
  400c84:	b510      	push	{r4, lr}
	ASSERT(descr);
  400c86:	4604      	mov	r4, r0
  400c88:	224a      	movs	r2, #74	; 0x4a
  400c8a:	4909      	ldr	r1, [pc, #36]	; (400cb0 <pwm_enable+0x2c>)
  400c8c:	3000      	adds	r0, #0
  400c8e:	bf18      	it	ne
  400c90:	2001      	movne	r0, #1
  400c92:	4b08      	ldr	r3, [pc, #32]	; (400cb4 <pwm_enable+0x30>)
  400c94:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  400c96:	4620      	mov	r0, r4
  400c98:	4b07      	ldr	r3, [pc, #28]	; (400cb8 <pwm_enable+0x34>)
  400c9a:	4798      	blx	r3
  400c9c:	b920      	cbnz	r0, 400ca8 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  400c9e:	4620      	mov	r0, r4
  400ca0:	4b06      	ldr	r3, [pc, #24]	; (400cbc <pwm_enable+0x38>)
  400ca2:	4798      	blx	r3
	return ERR_NONE;
  400ca4:	2000      	movs	r0, #0
  400ca6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400ca8:	f06f 0010 	mvn.w	r0, #16
}
  400cac:	bd10      	pop	{r4, pc}
  400cae:	bf00      	nop
  400cb0:	00406458 	.word	0x00406458
  400cb4:	00400f29 	.word	0x00400f29
  400cb8:	004017b9 	.word	0x004017b9
  400cbc:	00401715 	.word	0x00401715

00400cc0 <pwm_set_parameters>:
{
  400cc0:	b570      	push	{r4, r5, r6, lr}
  400cc2:	460d      	mov	r5, r1
  400cc4:	4616      	mov	r6, r2
	ASSERT(descr);
  400cc6:	4604      	mov	r4, r0
  400cc8:	227c      	movs	r2, #124	; 0x7c
  400cca:	4906      	ldr	r1, [pc, #24]	; (400ce4 <pwm_set_parameters+0x24>)
  400ccc:	3000      	adds	r0, #0
  400cce:	bf18      	it	ne
  400cd0:	2001      	movne	r0, #1
  400cd2:	4b05      	ldr	r3, [pc, #20]	; (400ce8 <pwm_set_parameters+0x28>)
  400cd4:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  400cd6:	4632      	mov	r2, r6
  400cd8:	4629      	mov	r1, r5
  400cda:	4620      	mov	r0, r4
  400cdc:	4b03      	ldr	r3, [pc, #12]	; (400cec <pwm_set_parameters+0x2c>)
  400cde:	4798      	blx	r3
}
  400ce0:	2000      	movs	r0, #0
  400ce2:	bd70      	pop	{r4, r5, r6, pc}
  400ce4:	00406458 	.word	0x00406458
  400ce8:	00400f29 	.word	0x00400f29
  400cec:	00401759 	.word	0x00401759

00400cf0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400cf2:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400cf4:	b117      	cbz	r7, 400cfc <timer_add_timer_task+0xc>
  400cf6:	463c      	mov	r4, r7
  400cf8:	2600      	movs	r6, #0
  400cfa:	e00b      	b.n	400d14 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400cfc:	4b0e      	ldr	r3, [pc, #56]	; (400d38 <timer_add_timer_task+0x48>)
  400cfe:	4798      	blx	r3
		return;
  400d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400d02:	68a5      	ldr	r5, [r4, #8]
  400d04:	442b      	add	r3, r5
  400d06:	1a9b      	subs	r3, r3, r2
  400d08:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400d0a:	688d      	ldr	r5, [r1, #8]
  400d0c:	42ab      	cmp	r3, r5
  400d0e:	d209      	bcs.n	400d24 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400d10:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400d12:	6824      	ldr	r4, [r4, #0]
  400d14:	b134      	cbz	r4, 400d24 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400d16:	6863      	ldr	r3, [r4, #4]
  400d18:	4293      	cmp	r3, r2
  400d1a:	d8f2      	bhi.n	400d02 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400d1c:	68a5      	ldr	r5, [r4, #8]
  400d1e:	1a9b      	subs	r3, r3, r2
  400d20:	442b      	add	r3, r5
  400d22:	e7f2      	b.n	400d0a <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400d24:	42bc      	cmp	r4, r7
  400d26:	d003      	beq.n	400d30 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400d28:	4630      	mov	r0, r6
  400d2a:	4b04      	ldr	r3, [pc, #16]	; (400d3c <timer_add_timer_task+0x4c>)
  400d2c:	4798      	blx	r3
  400d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400d30:	4b01      	ldr	r3, [pc, #4]	; (400d38 <timer_add_timer_task+0x48>)
  400d32:	4798      	blx	r3
  400d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d36:	bf00      	nop
  400d38:	00400f45 	.word	0x00400f45
  400d3c:	00400f71 	.word	0x00400f71

00400d40 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400d42:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400d44:	6906      	ldr	r6, [r0, #16]
  400d46:	3601      	adds	r6, #1
  400d48:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400d4a:	7e03      	ldrb	r3, [r0, #24]
  400d4c:	f013 0f01 	tst.w	r3, #1
  400d50:	d105      	bne.n	400d5e <timer_process_counted+0x1e>
  400d52:	7e03      	ldrb	r3, [r0, #24]
  400d54:	f013 0f02 	tst.w	r3, #2
  400d58:	d101      	bne.n	400d5e <timer_process_counted+0x1e>
  400d5a:	4605      	mov	r5, r0
  400d5c:	e009      	b.n	400d72 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  400d5e:	7e03      	ldrb	r3, [r0, #24]
  400d60:	f043 0302 	orr.w	r3, r3, #2
  400d64:	7603      	strb	r3, [r0, #24]
		return;
  400d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d68:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  400d6a:	68e3      	ldr	r3, [r4, #12]
  400d6c:	4620      	mov	r0, r4
  400d6e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  400d70:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  400d72:	b19c      	cbz	r4, 400d9c <timer_process_counted+0x5c>
  400d74:	6863      	ldr	r3, [r4, #4]
  400d76:	1af3      	subs	r3, r6, r3
  400d78:	68a2      	ldr	r2, [r4, #8]
  400d7a:	4293      	cmp	r3, r2
  400d7c:	d30e      	bcc.n	400d9c <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  400d7e:	f105 0714 	add.w	r7, r5, #20
  400d82:	4638      	mov	r0, r7
  400d84:	4b06      	ldr	r3, [pc, #24]	; (400da0 <timer_process_counted+0x60>)
  400d86:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400d88:	7c23      	ldrb	r3, [r4, #16]
  400d8a:	2b01      	cmp	r3, #1
  400d8c:	d1ec      	bne.n	400d68 <timer_process_counted+0x28>
			tmp->time_label = time;
  400d8e:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400d90:	4632      	mov	r2, r6
  400d92:	4621      	mov	r1, r4
  400d94:	4638      	mov	r0, r7
  400d96:	4b03      	ldr	r3, [pc, #12]	; (400da4 <timer_process_counted+0x64>)
  400d98:	4798      	blx	r3
  400d9a:	e7e5      	b.n	400d68 <timer_process_counted+0x28>
  400d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d9e:	bf00      	nop
  400da0:	00400f79 	.word	0x00400f79
  400da4:	00400cf1 	.word	0x00400cf1

00400da8 <timer_init>:
{
  400da8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400daa:	4604      	mov	r4, r0
  400dac:	460d      	mov	r5, r1
  400dae:	2800      	cmp	r0, #0
  400db0:	bf18      	it	ne
  400db2:	2900      	cmpne	r1, #0
  400db4:	bf14      	ite	ne
  400db6:	2001      	movne	r0, #1
  400db8:	2000      	moveq	r0, #0
  400dba:	223b      	movs	r2, #59	; 0x3b
  400dbc:	4905      	ldr	r1, [pc, #20]	; (400dd4 <timer_init+0x2c>)
  400dbe:	4b06      	ldr	r3, [pc, #24]	; (400dd8 <timer_init+0x30>)
  400dc0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400dc2:	4629      	mov	r1, r5
  400dc4:	4620      	mov	r0, r4
  400dc6:	4b05      	ldr	r3, [pc, #20]	; (400ddc <timer_init+0x34>)
  400dc8:	4798      	blx	r3
	descr->time                           = 0;
  400dca:	2000      	movs	r0, #0
  400dcc:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400dce:	4b04      	ldr	r3, [pc, #16]	; (400de0 <timer_init+0x38>)
  400dd0:	6023      	str	r3, [r4, #0]
}
  400dd2:	bd38      	pop	{r3, r4, r5, pc}
  400dd4:	00406470 	.word	0x00406470
  400dd8:	00400f29 	.word	0x00400f29
  400ddc:	004018c5 	.word	0x004018c5
  400de0:	00400d41 	.word	0x00400d41

00400de4 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400de6:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400de8:	4605      	mov	r5, r0
  400dea:	460f      	mov	r7, r1
  400dec:	2800      	cmp	r0, #0
  400dee:	bf18      	it	ne
  400df0:	2900      	cmpne	r1, #0
  400df2:	d002      	beq.n	400dfa <usart_sync_write+0x16>
  400df4:	bb0a      	cbnz	r2, 400e3a <usart_sync_write+0x56>
  400df6:	2000      	movs	r0, #0
  400df8:	e000      	b.n	400dfc <usart_sync_write+0x18>
  400dfa:	2000      	movs	r0, #0
  400dfc:	22f1      	movs	r2, #241	; 0xf1
  400dfe:	4910      	ldr	r1, [pc, #64]	; (400e40 <usart_sync_write+0x5c>)
  400e00:	4b10      	ldr	r3, [pc, #64]	; (400e44 <usart_sync_write+0x60>)
  400e02:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400e04:	f105 0408 	add.w	r4, r5, #8
  400e08:	4620      	mov	r0, r4
  400e0a:	4b0f      	ldr	r3, [pc, #60]	; (400e48 <usart_sync_write+0x64>)
  400e0c:	4798      	blx	r3
  400e0e:	2800      	cmp	r0, #0
  400e10:	d0f8      	beq.n	400e04 <usart_sync_write+0x20>
  400e12:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400e14:	5d79      	ldrb	r1, [r7, r5]
  400e16:	4620      	mov	r0, r4
  400e18:	4b0c      	ldr	r3, [pc, #48]	; (400e4c <usart_sync_write+0x68>)
  400e1a:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400e1c:	4620      	mov	r0, r4
  400e1e:	4b0a      	ldr	r3, [pc, #40]	; (400e48 <usart_sync_write+0x64>)
  400e20:	4798      	blx	r3
  400e22:	2800      	cmp	r0, #0
  400e24:	d0fa      	beq.n	400e1c <usart_sync_write+0x38>
			;
	} while (++offset < length);
  400e26:	3501      	adds	r5, #1
  400e28:	42b5      	cmp	r5, r6
  400e2a:	d3f3      	bcc.n	400e14 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400e2c:	4620      	mov	r0, r4
  400e2e:	4b08      	ldr	r3, [pc, #32]	; (400e50 <usart_sync_write+0x6c>)
  400e30:	4798      	blx	r3
  400e32:	2800      	cmp	r0, #0
  400e34:	d0fa      	beq.n	400e2c <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  400e36:	4628      	mov	r0, r5
  400e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400e3a:	2001      	movs	r0, #1
  400e3c:	e7de      	b.n	400dfc <usart_sync_write+0x18>
  400e3e:	bf00      	nop
  400e40:	00406488 	.word	0x00406488
  400e44:	00400f29 	.word	0x00400f29
  400e48:	00401b69 	.word	0x00401b69
  400e4c:	00401b21 	.word	0x00401b21
  400e50:	00401b91 	.word	0x00401b91

00400e54 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e58:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400e5a:	4605      	mov	r5, r0
  400e5c:	4688      	mov	r8, r1
  400e5e:	2800      	cmp	r0, #0
  400e60:	bf18      	it	ne
  400e62:	2900      	cmpne	r1, #0
  400e64:	d002      	beq.n	400e6c <usart_sync_read+0x18>
  400e66:	b9d2      	cbnz	r2, 400e9e <usart_sync_read+0x4a>
  400e68:	2000      	movs	r0, #0
  400e6a:	e000      	b.n	400e6e <usart_sync_read+0x1a>
  400e6c:	2000      	movs	r0, #0
  400e6e:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400e72:	490c      	ldr	r1, [pc, #48]	; (400ea4 <usart_sync_read+0x50>)
  400e74:	4b0c      	ldr	r3, [pc, #48]	; (400ea8 <usart_sync_read+0x54>)
  400e76:	4798      	blx	r3
	uint32_t                      offset = 0;
  400e78:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400e7a:	f105 0408 	add.w	r4, r5, #8
  400e7e:	4620      	mov	r0, r4
  400e80:	4b0a      	ldr	r3, [pc, #40]	; (400eac <usart_sync_read+0x58>)
  400e82:	4798      	blx	r3
  400e84:	2800      	cmp	r0, #0
  400e86:	d0f8      	beq.n	400e7a <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400e88:	4620      	mov	r0, r4
  400e8a:	4b09      	ldr	r3, [pc, #36]	; (400eb0 <usart_sync_read+0x5c>)
  400e8c:	4798      	blx	r3
  400e8e:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400e92:	3601      	adds	r6, #1
  400e94:	42be      	cmp	r6, r7
  400e96:	d3f0      	bcc.n	400e7a <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400e98:	4630      	mov	r0, r6
  400e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400e9e:	2001      	movs	r0, #1
  400ea0:	e7e5      	b.n	400e6e <usart_sync_read+0x1a>
  400ea2:	bf00      	nop
  400ea4:	00406488 	.word	0x00406488
  400ea8:	00400f29 	.word	0x00400f29
  400eac:	00401bb9 	.word	0x00401bb9
  400eb0:	00401b45 	.word	0x00401b45

00400eb4 <usart_sync_init>:
{
  400eb4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400eb6:	4604      	mov	r4, r0
  400eb8:	460d      	mov	r5, r1
  400eba:	2800      	cmp	r0, #0
  400ebc:	bf18      	it	ne
  400ebe:	2900      	cmpne	r1, #0
  400ec0:	bf14      	ite	ne
  400ec2:	2001      	movne	r0, #1
  400ec4:	2000      	moveq	r0, #0
  400ec6:	2234      	movs	r2, #52	; 0x34
  400ec8:	4907      	ldr	r1, [pc, #28]	; (400ee8 <usart_sync_init+0x34>)
  400eca:	4b08      	ldr	r3, [pc, #32]	; (400eec <usart_sync_init+0x38>)
  400ecc:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400ece:	4629      	mov	r1, r5
  400ed0:	f104 0008 	add.w	r0, r4, #8
  400ed4:	4b06      	ldr	r3, [pc, #24]	; (400ef0 <usart_sync_init+0x3c>)
  400ed6:	4798      	blx	r3
	if (init_status) {
  400ed8:	4603      	mov	r3, r0
  400eda:	b918      	cbnz	r0, 400ee4 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400edc:	4a05      	ldr	r2, [pc, #20]	; (400ef4 <usart_sync_init+0x40>)
  400ede:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400ee0:	4a05      	ldr	r2, [pc, #20]	; (400ef8 <usart_sync_init+0x44>)
  400ee2:	6022      	str	r2, [r4, #0]
}
  400ee4:	4618      	mov	r0, r3
  400ee6:	bd38      	pop	{r3, r4, r5, pc}
  400ee8:	00406488 	.word	0x00406488
  400eec:	00400f29 	.word	0x00400f29
  400ef0:	00401ab5 	.word	0x00401ab5
  400ef4:	00400e55 	.word	0x00400e55
  400ef8:	00400de5 	.word	0x00400de5

00400efc <usart_sync_enable>:
{
  400efc:	b510      	push	{r4, lr}
	ASSERT(descr);
  400efe:	4604      	mov	r4, r0
  400f00:	2253      	movs	r2, #83	; 0x53
  400f02:	4906      	ldr	r1, [pc, #24]	; (400f1c <usart_sync_enable+0x20>)
  400f04:	3000      	adds	r0, #0
  400f06:	bf18      	it	ne
  400f08:	2001      	movne	r0, #1
  400f0a:	4b05      	ldr	r3, [pc, #20]	; (400f20 <usart_sync_enable+0x24>)
  400f0c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400f0e:	f104 0008 	add.w	r0, r4, #8
  400f12:	4b04      	ldr	r3, [pc, #16]	; (400f24 <usart_sync_enable+0x28>)
  400f14:	4798      	blx	r3
}
  400f16:	2000      	movs	r0, #0
  400f18:	bd10      	pop	{r4, pc}
  400f1a:	bf00      	nop
  400f1c:	00406488 	.word	0x00406488
  400f20:	00400f29 	.word	0x00400f29
  400f24:	00401aed 	.word	0x00401aed

00400f28 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400f28:	b900      	cbnz	r0, 400f2c <assert+0x4>
		__asm("BKPT #0");
  400f2a:	be00      	bkpt	0x0000
  400f2c:	4770      	bx	lr

00400f2e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  400f2e:	6803      	ldr	r3, [r0, #0]
  400f30:	b11b      	cbz	r3, 400f3a <is_list_element+0xc>
		if (it == element) {
  400f32:	428b      	cmp	r3, r1
  400f34:	d003      	beq.n	400f3e <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  400f36:	681b      	ldr	r3, [r3, #0]
  400f38:	e7fa      	b.n	400f30 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  400f3a:	2000      	movs	r0, #0
  400f3c:	4770      	bx	lr
			return true;
  400f3e:	2001      	movs	r0, #1
}
  400f40:	4770      	bx	lr
	...

00400f44 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400f44:	b538      	push	{r3, r4, r5, lr}
  400f46:	4604      	mov	r4, r0
  400f48:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  400f4a:	4b06      	ldr	r3, [pc, #24]	; (400f64 <list_insert_as_head+0x20>)
  400f4c:	4798      	blx	r3
  400f4e:	f080 0001 	eor.w	r0, r0, #1
  400f52:	2239      	movs	r2, #57	; 0x39
  400f54:	4904      	ldr	r1, [pc, #16]	; (400f68 <list_insert_as_head+0x24>)
  400f56:	b2c0      	uxtb	r0, r0
  400f58:	4b04      	ldr	r3, [pc, #16]	; (400f6c <list_insert_as_head+0x28>)
  400f5a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  400f5c:	6823      	ldr	r3, [r4, #0]
  400f5e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  400f60:	6025      	str	r5, [r4, #0]
  400f62:	bd38      	pop	{r3, r4, r5, pc}
  400f64:	00400f2f 	.word	0x00400f2f
  400f68:	004064a4 	.word	0x004064a4
  400f6c:	00400f29 	.word	0x00400f29

00400f70 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  400f70:	6803      	ldr	r3, [r0, #0]
  400f72:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400f74:	6001      	str	r1, [r0, #0]
  400f76:	4770      	bx	lr

00400f78 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  400f78:	6803      	ldr	r3, [r0, #0]
  400f7a:	b11b      	cbz	r3, 400f84 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400f7c:	681a      	ldr	r2, [r3, #0]
  400f7e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400f80:	4618      	mov	r0, r3
  400f82:	4770      	bx	lr
	}

	return NULL;
  400f84:	2000      	movs	r0, #0
}
  400f86:	4770      	bx	lr

00400f88 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  400f88:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  400f8a:	4a06      	ldr	r2, [pc, #24]	; (400fa4 <_sbrk+0x1c>)
  400f8c:	6812      	ldr	r2, [r2, #0]
  400f8e:	b122      	cbz	r2, 400f9a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400f90:	4a04      	ldr	r2, [pc, #16]	; (400fa4 <_sbrk+0x1c>)
  400f92:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400f94:	4403      	add	r3, r0
  400f96:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  400f98:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400f9a:	4903      	ldr	r1, [pc, #12]	; (400fa8 <_sbrk+0x20>)
  400f9c:	4a01      	ldr	r2, [pc, #4]	; (400fa4 <_sbrk+0x1c>)
  400f9e:	6011      	str	r1, [r2, #0]
  400fa0:	e7f6      	b.n	400f90 <_sbrk+0x8>
  400fa2:	bf00      	nop
  400fa4:	20400258 	.word	0x20400258
  400fa8:	20400970 	.word	0x20400970

00400fac <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  400fac:	f04f 30ff 	mov.w	r0, #4294967295
  400fb0:	4770      	bx	lr

00400fb2 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400fb6:	604b      	str	r3, [r1, #4]

	return 0;
}
  400fb8:	2000      	movs	r0, #0
  400fba:	4770      	bx	lr

00400fbc <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  400fbc:	2001      	movs	r0, #1
  400fbe:	4770      	bx	lr

00400fc0 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400fc0:	2000      	movs	r0, #0
  400fc2:	4770      	bx	lr

00400fc4 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  400fc4:	2364      	movs	r3, #100	; 0x64
  400fc6:	4a1d      	ldr	r2, [pc, #116]	; (40103c <_afec_init+0x78>)
  400fc8:	fb03 2301 	mla	r3, r3, r1, r2
  400fcc:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  400fce:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  400fd0:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  400fd2:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  400fd4:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  400fd6:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  400fd8:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  400fda:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  400fdc:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  400fde:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  400fe0:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  400fe2:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  400fe4:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  400fe6:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  400fe8:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  400fea:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  400fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  400ff0:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  400ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  400ff6:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  400ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  400ffc:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  401000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  401002:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401006:	2200      	movs	r2, #0
  401008:	2a0b      	cmp	r2, #11
  40100a:	d814      	bhi.n	401036 <_afec_init+0x72>
{
  40100c:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  40100e:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  401010:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401014:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401018:	4413      	add	r3, r2
  40101a:	330c      	adds	r3, #12
  40101c:	4c07      	ldr	r4, [pc, #28]	; (40103c <_afec_init+0x78>)
  40101e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  401022:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  401024:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401026:	3201      	adds	r2, #1
  401028:	b2d2      	uxtb	r2, r2
  40102a:	2a0b      	cmp	r2, #11
  40102c:	d9ef      	bls.n	40100e <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  40102e:	2000      	movs	r0, #0
  401030:	f85d 4b04 	ldr.w	r4, [sp], #4
  401034:	4770      	bx	lr
  401036:	2000      	movs	r0, #0
  401038:	4770      	bx	lr
  40103a:	bf00      	nop
  40103c:	004064c4 	.word	0x004064c4

00401040 <_afec_get_hardware_index>:
{
  401040:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  401042:	4b09      	ldr	r3, [pc, #36]	; (401068 <_afec_get_hardware_index+0x28>)
  401044:	4298      	cmp	r0, r3
  401046:	d00a      	beq.n	40105e <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  401048:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  40104c:	4298      	cmp	r0, r3
  40104e:	d008      	beq.n	401062 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  401050:	22a3      	movs	r2, #163	; 0xa3
  401052:	4906      	ldr	r1, [pc, #24]	; (40106c <_afec_get_hardware_index+0x2c>)
  401054:	2000      	movs	r0, #0
  401056:	4b06      	ldr	r3, [pc, #24]	; (401070 <_afec_get_hardware_index+0x30>)
  401058:	4798      	blx	r3
	return 0;
  40105a:	2000      	movs	r0, #0
  40105c:	bd08      	pop	{r3, pc}
		return 0;
  40105e:	2000      	movs	r0, #0
  401060:	bd08      	pop	{r3, pc}
		return 1;
  401062:	2001      	movs	r0, #1
}
  401064:	bd08      	pop	{r3, pc}
  401066:	bf00      	nop
  401068:	4003c000 	.word	0x4003c000
  40106c:	0040658c 	.word	0x0040658c
  401070:	00400f29 	.word	0x00400f29

00401074 <_afec_get_regs>:
{
  401074:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  401076:	4b09      	ldr	r3, [pc, #36]	; (40109c <_afec_get_regs+0x28>)
  401078:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  40107a:	2300      	movs	r3, #0
  40107c:	2b01      	cmp	r3, #1
  40107e:	d809      	bhi.n	401094 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  401080:	2264      	movs	r2, #100	; 0x64
  401082:	fb02 f203 	mul.w	r2, r2, r3
  401086:	4906      	ldr	r1, [pc, #24]	; (4010a0 <_afec_get_regs+0x2c>)
  401088:	5c8a      	ldrb	r2, [r1, r2]
  40108a:	4290      	cmp	r0, r2
  40108c:	d003      	beq.n	401096 <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  40108e:	3301      	adds	r3, #1
  401090:	b2db      	uxtb	r3, r3
  401092:	e7f3      	b.n	40107c <_afec_get_regs+0x8>
	return 0;
  401094:	2300      	movs	r3, #0
}
  401096:	4618      	mov	r0, r3
  401098:	bd08      	pop	{r3, pc}
  40109a:	bf00      	nop
  40109c:	00401041 	.word	0x00401041
  4010a0:	004064c4 	.word	0x004064c4

004010a4 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
  4010a4:	b538      	push	{r3, r4, r5, lr}
  4010a6:	460c      	mov	r4, r1
	ASSERT(device);
  4010a8:	4605      	mov	r5, r0
  4010aa:	f44f 728d 	mov.w	r2, #282	; 0x11a
  4010ae:	4907      	ldr	r1, [pc, #28]	; (4010cc <_adc_sync_init+0x28>)
  4010b0:	3000      	adds	r0, #0
  4010b2:	bf18      	it	ne
  4010b4:	2001      	movne	r0, #1
  4010b6:	4b06      	ldr	r3, [pc, #24]	; (4010d0 <_adc_sync_init+0x2c>)
  4010b8:	4798      	blx	r3

	device->hw = hw;
  4010ba:	602c      	str	r4, [r5, #0]

	return _afec_init(hw, _afec_get_regs((uint32_t)hw));
  4010bc:	4620      	mov	r0, r4
  4010be:	4b05      	ldr	r3, [pc, #20]	; (4010d4 <_adc_sync_init+0x30>)
  4010c0:	4798      	blx	r3
  4010c2:	4601      	mov	r1, r0
  4010c4:	4620      	mov	r0, r4
  4010c6:	4b04      	ldr	r3, [pc, #16]	; (4010d8 <_adc_sync_init+0x34>)
  4010c8:	4798      	blx	r3
}
  4010ca:	bd38      	pop	{r3, r4, r5, pc}
  4010cc:	0040658c 	.word	0x0040658c
  4010d0:	00400f29 	.word	0x00400f29
  4010d4:	00401075 	.word	0x00401075
  4010d8:	00400fc5 	.word	0x00400fc5

004010dc <_adc_sync_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  4010dc:	6802      	ldr	r2, [r0, #0]
  4010de:	2301      	movs	r3, #1
  4010e0:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  4010e4:	6151      	str	r1, [r2, #20]
  4010e6:	4770      	bx	lr

004010e8 <_adc_sync_get_data_size>:
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	(void)device;

	return 2;
}
  4010e8:	2002      	movs	r0, #2
  4010ea:	4770      	bx	lr

004010ec <_adc_sync_is_channel_conversion_done>:
/**
 * \brief Check if conversion is done
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	return hri_afec_get_ISR_reg(device->hw, (1 << channel));
  4010ec:	6802      	ldr	r2, [r0, #0]
  4010ee:	2301      	movs	r3, #1
  4010f0:	fa03 f101 	lsl.w	r1, r3, r1
	tmp = ((Afec *)hw)->AFEC_ISR;
  4010f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010f6:	4219      	tst	r1, r3
}
  4010f8:	bf14      	ite	ne
  4010fa:	2001      	movne	r0, #1
  4010fc:	2000      	moveq	r0, #0
  4010fe:	4770      	bx	lr

00401100 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_afec_write_CR_reg(device->hw, AFEC_CR_START);
  401100:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_afec_write_CR_reg(const void *const hw, hri_afec_cr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CR = data;
  401102:	2202      	movs	r2, #2
  401104:	601a      	str	r2, [r3, #0]
  401106:	4770      	bx	lr

00401108 <_adc_sync_read_channel_data>:
/**
 * \brief Retrieve the conversion result
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_write_CSELR_reg(device->hw, channel);
  401108:	6803      	ldr	r3, [r0, #0]
	((Afec *)hw)->AFEC_CSELR = data;
  40110a:	6659      	str	r1, [r3, #100]	; 0x64

	return hri_afec_read_CDR_reg(device->hw);
  40110c:	6803      	ldr	r3, [r0, #0]
	return ((Afec *)hw)->AFEC_CDR;
  40110e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401110:	b280      	uxth	r0, r0
  401112:	4770      	bx	lr

00401114 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  401114:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401118:	fb03 f000 	mul.w	r0, r3, r0
  40111c:	4770      	bx	lr

0040111e <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  40111e:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401122:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  401126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40112a:	fb03 f000 	mul.w	r0, r3, r0
  40112e:	4770      	bx	lr

00401130 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  401130:	b500      	push	{lr}
  401132:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  401134:	a801      	add	r0, sp, #4
  401136:	4b0e      	ldr	r3, [pc, #56]	; (401170 <_init_chip+0x40>)
  401138:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  40113a:	4a0e      	ldr	r2, [pc, #56]	; (401174 <_init_chip+0x44>)
  40113c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  401148:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40114c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  401150:	a801      	add	r0, sp, #4
  401152:	4b09      	ldr	r3, [pc, #36]	; (401178 <_init_chip+0x48>)
  401154:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  401156:	4a09      	ldr	r2, [pc, #36]	; (40117c <_init_chip+0x4c>)
  401158:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  40115a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  40115e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  401162:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  401164:	4b06      	ldr	r3, [pc, #24]	; (401180 <_init_chip+0x50>)
  401166:	4798      	blx	r3
}
  401168:	b003      	add	sp, #12
  40116a:	f85d fb04 	ldr.w	pc, [sp], #4
  40116e:	bf00      	nop
  401170:	00400ae5 	.word	0x00400ae5
  401174:	e000ed00 	.word	0xe000ed00
  401178:	00400af3 	.word	0x00400af3
  40117c:	400e0c00 	.word	0x400e0c00
  401180:	00401505 	.word	0x00401505

00401184 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  401184:	b538      	push	{r3, r4, r5, lr}
  401186:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  401188:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  40118a:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  40118c:	f014 0f01 	tst.w	r4, #1
  401190:	d11a      	bne.n	4011c8 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  401192:	f414 7f00 	tst.w	r4, #512	; 0x200
  401196:	d11a      	bne.n	4011ce <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  401198:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  40119c:	d11b      	bne.n	4011d6 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  40119e:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  4011a2:	d11d      	bne.n	4011e0 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  4011a4:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  4011a8:	d008      	beq.n	4011bc <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4011aa:	68eb      	ldr	r3, [r5, #12]
  4011ac:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  4011ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
  4011b0:	f012 0f20 	tst.w	r2, #32
  4011b4:	d019      	beq.n	4011ea <_can_irq_handler+0x66>
  4011b6:	2102      	movs	r1, #2
  4011b8:	4628      	mov	r0, r5
  4011ba:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  4011bc:	f014 0f08 	tst.w	r4, #8
  4011c0:	d115      	bne.n	4011ee <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  4011c2:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  4011c4:	651c      	str	r4, [r3, #80]	; 0x50
  4011c6:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  4011c8:	6883      	ldr	r3, [r0, #8]
  4011ca:	4798      	blx	r3
  4011cc:	e7e1      	b.n	401192 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  4011ce:	686b      	ldr	r3, [r5, #4]
  4011d0:	4628      	mov	r0, r5
  4011d2:	4798      	blx	r3
  4011d4:	e7e0      	b.n	401198 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  4011d6:	68eb      	ldr	r3, [r5, #12]
  4011d8:	2103      	movs	r1, #3
  4011da:	4628      	mov	r0, r5
  4011dc:	4798      	blx	r3
  4011de:	e7de      	b.n	40119e <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  4011e0:	68eb      	ldr	r3, [r5, #12]
  4011e2:	2100      	movs	r1, #0
  4011e4:	4628      	mov	r0, r5
  4011e6:	4798      	blx	r3
  4011e8:	e7dc      	b.n	4011a4 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4011ea:	2101      	movs	r1, #1
  4011ec:	e7e4      	b.n	4011b8 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  4011ee:	68eb      	ldr	r3, [r5, #12]
  4011f0:	2104      	movs	r1, #4
  4011f2:	4628      	mov	r0, r5
  4011f4:	4798      	blx	r3
  4011f6:	e7e4      	b.n	4011c2 <_can_irq_handler+0x3e>

004011f8 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  4011f8:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  4011fa:	4b02      	ldr	r3, [pc, #8]	; (401204 <MCAN1_INT0_Handler+0xc>)
  4011fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
  4011fe:	4b02      	ldr	r3, [pc, #8]	; (401208 <MCAN1_INT0_Handler+0x10>)
  401200:	4798      	blx	r3
  401202:	bd08      	pop	{r3, pc}
  401204:	2040025c 	.word	0x2040025c
  401208:	00401185 	.word	0x00401185

0040120c <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  40120c:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  40120e:	2500      	movs	r5, #0
  401210:	428d      	cmp	r5, r1
  401212:	d210      	bcs.n	401236 <_ffs+0x2a>
  401214:	2201      	movs	r2, #1
  401216:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401218:	2b1f      	cmp	r3, #31
  40121a:	d80a      	bhi.n	401232 <_ffs+0x26>
			if (v[i] & bit) {
  40121c:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401220:	4222      	tst	r2, r4
  401222:	d102      	bne.n	40122a <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401224:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401226:	3301      	adds	r3, #1
  401228:	e7f6      	b.n	401218 <_ffs+0xc>
				return i * 32 + j;
  40122a:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  40122e:	bc30      	pop	{r4, r5}
  401230:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  401232:	3501      	adds	r5, #1
  401234:	e7ec      	b.n	401210 <_ffs+0x4>
	return -1;
  401236:	f04f 30ff 	mov.w	r0, #4294967295
  40123a:	e7f8      	b.n	40122e <_ffs+0x22>

0040123c <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  40123c:	b510      	push	{r4, lr}
  40123e:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401240:	2300      	movs	r3, #0
  401242:	9301      	str	r3, [sp, #4]
  401244:	9302      	str	r3, [sp, #8]
  401246:	9303      	str	r3, [sp, #12]
  401248:	9304      	str	r3, [sp, #16]
  40124a:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  40124c:	4b21      	ldr	r3, [pc, #132]	; (4012d4 <_ext_irq_handler+0x98>)
  40124e:	6818      	ldr	r0, [r3, #0]
  401250:	22f8      	movs	r2, #248	; 0xf8
  401252:	4921      	ldr	r1, [pc, #132]	; (4012d8 <_ext_irq_handler+0x9c>)
  401254:	3000      	adds	r0, #0
  401256:	bf18      	it	ne
  401258:	2001      	movne	r0, #1
  40125a:	4b20      	ldr	r3, [pc, #128]	; (4012dc <_ext_irq_handler+0xa0>)
  40125c:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  40125e:	4b20      	ldr	r3, [pc, #128]	; (4012e0 <_ext_irq_handler+0xa4>)
  401260:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401262:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401264:	4013      	ands	r3, r2
  401266:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401268:	491e      	ldr	r1, [pc, #120]	; (4012e4 <_ext_irq_handler+0xa8>)
  40126a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40126c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  40126e:	400a      	ands	r2, r1
  401270:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  401272:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  401274:	e025      	b.n	4012c2 <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  401276:	4b17      	ldr	r3, [pc, #92]	; (4012d4 <_ext_irq_handler+0x98>)
  401278:	681b      	ldr	r3, [r3, #0]
  40127a:	4620      	mov	r0, r4
  40127c:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  40127e:	1163      	asrs	r3, r4, #5
  401280:	f004 041f 	and.w	r4, r4, #31
  401284:	2201      	movs	r2, #1
  401286:	fa02 f404 	lsl.w	r4, r2, r4
  40128a:	aa06      	add	r2, sp, #24
  40128c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401290:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401294:	ea22 0204 	bic.w	r2, r2, r4
  401298:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  40129c:	2105      	movs	r1, #5
  40129e:	a801      	add	r0, sp, #4
  4012a0:	4b11      	ldr	r3, [pc, #68]	; (4012e8 <_ext_irq_handler+0xac>)
  4012a2:	4798      	blx	r3
  4012a4:	4604      	mov	r4, r0
		while (-1 != pos) {
  4012a6:	f1b4 3fff 	cmp.w	r4, #4294967295
  4012aa:	d1e4      	bne.n	401276 <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  4012ac:	4a0c      	ldr	r2, [pc, #48]	; (4012e0 <_ext_irq_handler+0xa4>)
  4012ae:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4012b0:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  4012b2:	400b      	ands	r3, r1
  4012b4:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  4012b6:	490b      	ldr	r1, [pc, #44]	; (4012e4 <_ext_irq_handler+0xa8>)
  4012b8:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4012ba:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4012bc:	4002      	ands	r2, r0
  4012be:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  4012c0:	4313      	orrs	r3, r2
	while (flag_total) {
  4012c2:	b12b      	cbz	r3, 4012d0 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  4012c4:	2105      	movs	r1, #5
  4012c6:	a801      	add	r0, sp, #4
  4012c8:	4b07      	ldr	r3, [pc, #28]	; (4012e8 <_ext_irq_handler+0xac>)
  4012ca:	4798      	blx	r3
  4012cc:	4604      	mov	r4, r0
		while (-1 != pos) {
  4012ce:	e7ea      	b.n	4012a6 <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  4012d0:	b006      	add	sp, #24
  4012d2:	bd10      	pop	{r4, pc}
  4012d4:	20400288 	.word	0x20400288
  4012d8:	004065e4 	.word	0x004065e4
  4012dc:	00400f29 	.word	0x00400f29
  4012e0:	400e0e00 	.word	0x400e0e00
  4012e4:	400e1400 	.word	0x400e1400
  4012e8:	0040120d 	.word	0x0040120d

004012ec <_pio_get_hardware_index>:
{
  4012ec:	b510      	push	{r4, lr}
	ASSERT(hw);
  4012ee:	4604      	mov	r4, r0
  4012f0:	22d2      	movs	r2, #210	; 0xd2
  4012f2:	4905      	ldr	r1, [pc, #20]	; (401308 <_pio_get_hardware_index+0x1c>)
  4012f4:	3000      	adds	r0, #0
  4012f6:	bf18      	it	ne
  4012f8:	2001      	movne	r0, #1
  4012fa:	4b04      	ldr	r3, [pc, #16]	; (40130c <_pio_get_hardware_index+0x20>)
  4012fc:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  4012fe:	4804      	ldr	r0, [pc, #16]	; (401310 <_pio_get_hardware_index+0x24>)
  401300:	4420      	add	r0, r4
}
  401302:	f3c0 2047 	ubfx	r0, r0, #9, #8
  401306:	bd10      	pop	{r4, pc}
  401308:	004065e4 	.word	0x004065e4
  40130c:	00400f29 	.word	0x00400f29
  401310:	bff1f200 	.word	0xbff1f200

00401314 <_pio_get_index>:
{
  401314:	b510      	push	{r4, lr}
	ASSERT(hw);
  401316:	4604      	mov	r4, r0
  401318:	22e0      	movs	r2, #224	; 0xe0
  40131a:	490d      	ldr	r1, [pc, #52]	; (401350 <_pio_get_index+0x3c>)
  40131c:	3000      	adds	r0, #0
  40131e:	bf18      	it	ne
  401320:	2001      	movne	r0, #1
  401322:	4b0c      	ldr	r3, [pc, #48]	; (401354 <_pio_get_index+0x40>)
  401324:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  401326:	4620      	mov	r0, r4
  401328:	4b0b      	ldr	r3, [pc, #44]	; (401358 <_pio_get_index+0x44>)
  40132a:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  40132c:	2300      	movs	r3, #0
  40132e:	2b01      	cmp	r3, #1
  401330:	d80b      	bhi.n	40134a <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  401332:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  401336:	008a      	lsls	r2, r1, #2
  401338:	4908      	ldr	r1, [pc, #32]	; (40135c <_pio_get_index+0x48>)
  40133a:	5c8a      	ldrb	r2, [r1, r2]
  40133c:	4290      	cmp	r0, r2
  40133e:	d002      	beq.n	401346 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401340:	3301      	adds	r3, #1
  401342:	b2db      	uxtb	r3, r3
  401344:	e7f3      	b.n	40132e <_pio_get_index+0x1a>
			return i;
  401346:	b258      	sxtb	r0, r3
  401348:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  40134a:	f04f 30ff 	mov.w	r0, #4294967295
}
  40134e:	bd10      	pop	{r4, pc}
  401350:	004065e4 	.word	0x004065e4
  401354:	00400f29 	.word	0x00400f29
  401358:	004012ed 	.word	0x004012ed
  40135c:	004065a4 	.word	0x004065a4

00401360 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401360:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  401362:	4604      	mov	r4, r0
  401364:	f240 1259 	movw	r2, #345	; 0x159
  401368:	4929      	ldr	r1, [pc, #164]	; (401410 <_pio_init+0xb0>)
  40136a:	3000      	adds	r0, #0
  40136c:	bf18      	it	ne
  40136e:	2001      	movne	r0, #1
  401370:	4b28      	ldr	r3, [pc, #160]	; (401414 <_pio_init+0xb4>)
  401372:	4798      	blx	r3

	i = _pio_get_index(hw);
  401374:	4620      	mov	r0, r4
  401376:	4b28      	ldr	r3, [pc, #160]	; (401418 <_pio_init+0xb8>)
  401378:	4798      	blx	r3
	if (i < 0) {
  40137a:	2800      	cmp	r0, #0
  40137c:	db43      	blt.n	401406 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  40137e:	4d27      	ldr	r5, [pc, #156]	; (40141c <_pio_init+0xbc>)
  401380:	00c2      	lsls	r2, r0, #3
  401382:	1a11      	subs	r1, r2, r0
  401384:	008b      	lsls	r3, r1, #2
  401386:	442b      	add	r3, r5
  401388:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  40138a:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  40138e:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  401390:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  401394:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  401396:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  40139a:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  40139c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  4013a0:	1a10      	subs	r0, r2, r0
  4013a2:	0083      	lsls	r3, r0, #2
  4013a4:	442b      	add	r3, r5
  4013a6:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  4013a8:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  4013ac:	4620      	mov	r0, r4
  4013ae:	4b1c      	ldr	r3, [pc, #112]	; (401420 <_pio_init+0xc0>)
  4013b0:	4798      	blx	r3
  4013b2:	4428      	add	r0, r5
  4013b4:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4013b8:	2b00      	cmp	r3, #0
  4013ba:	db0c      	blt.n	4013d6 <_pio_init+0x76>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013bc:	095a      	lsrs	r2, r3, #5
  4013be:	f003 001f 	and.w	r0, r3, #31
  4013c2:	2101      	movs	r1, #1
  4013c4:	4081      	lsls	r1, r0
  4013c6:	3220      	adds	r2, #32
  4013c8:	4816      	ldr	r0, [pc, #88]	; (401424 <_pio_init+0xc4>)
  4013ca:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4013ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4013d2:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4013d6:	2b00      	cmp	r3, #0
  4013d8:	db08      	blt.n	4013ec <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013da:	095a      	lsrs	r2, r3, #5
  4013dc:	f003 001f 	and.w	r0, r3, #31
  4013e0:	2101      	movs	r1, #1
  4013e2:	4081      	lsls	r1, r0
  4013e4:	3260      	adds	r2, #96	; 0x60
  4013e6:	480f      	ldr	r0, [pc, #60]	; (401424 <_pio_init+0xc4>)
  4013e8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  4013ec:	2b00      	cmp	r3, #0
  4013ee:	db0d      	blt.n	40140c <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013f0:	0959      	lsrs	r1, r3, #5
  4013f2:	f003 031f 	and.w	r3, r3, #31
  4013f6:	2201      	movs	r2, #1
  4013f8:	fa02 f303 	lsl.w	r3, r2, r3
  4013fc:	4a09      	ldr	r2, [pc, #36]	; (401424 <_pio_init+0xc4>)
  4013fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  401402:	2000      	movs	r0, #0
  401404:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  401406:	f06f 0010 	mvn.w	r0, #16
  40140a:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  40140c:	2000      	movs	r0, #0
}
  40140e:	bd38      	pop	{r3, r4, r5, pc}
  401410:	004065e4 	.word	0x004065e4
  401414:	00400f29 	.word	0x00400f29
  401418:	00401315 	.word	0x00401315
  40141c:	004065a4 	.word	0x004065a4
  401420:	004012ed 	.word	0x004012ed
  401424:	e000e100 	.word	0xe000e100

00401428 <PIOD_Handler>:
{
  401428:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40142a:	4b01      	ldr	r3, [pc, #4]	; (401430 <PIOD_Handler+0x8>)
  40142c:	4798      	blx	r3
  40142e:	bd08      	pop	{r3, pc}
  401430:	0040123d 	.word	0x0040123d

00401434 <PIOA_Handler>:
{
  401434:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401436:	4b01      	ldr	r3, [pc, #4]	; (40143c <PIOA_Handler+0x8>)
  401438:	4798      	blx	r3
  40143a:	bd08      	pop	{r3, pc}
  40143c:	0040123d 	.word	0x0040123d

00401440 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401440:	b538      	push	{r3, r4, r5, lr}
  401442:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401444:	4804      	ldr	r0, [pc, #16]	; (401458 <_ext_irq_init+0x18>)
  401446:	4c05      	ldr	r4, [pc, #20]	; (40145c <_ext_irq_init+0x1c>)
  401448:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  40144a:	4805      	ldr	r0, [pc, #20]	; (401460 <_ext_irq_init+0x20>)
  40144c:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  40144e:	4b05      	ldr	r3, [pc, #20]	; (401464 <_ext_irq_init+0x24>)
  401450:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401452:	2000      	movs	r0, #0
  401454:	bd38      	pop	{r3, r4, r5, pc}
  401456:	bf00      	nop
  401458:	400e0e00 	.word	0x400e0e00
  40145c:	00401361 	.word	0x00401361
  401460:	400e1400 	.word	0x400e1400
  401464:	20400288 	.word	0x20400288

00401468 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  401468:	490e      	ldr	r1, [pc, #56]	; (4014a4 <_pmc_init_sources+0x3c>)
  40146a:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  40146c:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  401470:	4b0d      	ldr	r3, [pc, #52]	; (4014a8 <_pmc_init_sources+0x40>)
  401472:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401474:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  401476:	4b0b      	ldr	r3, [pc, #44]	; (4014a4 <_pmc_init_sources+0x3c>)
  401478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  40147a:	f013 0f01 	tst.w	r3, #1
  40147e:	d0fa      	beq.n	401476 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  401480:	4b08      	ldr	r3, [pc, #32]	; (4014a4 <_pmc_init_sources+0x3c>)
  401482:	6a19      	ldr	r1, [r3, #32]
  401484:	4a09      	ldr	r2, [pc, #36]	; (4014ac <_pmc_init_sources+0x44>)
  401486:	430a      	orrs	r2, r1
  401488:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  40148a:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  40148c:	4a08      	ldr	r2, [pc, #32]	; (4014b0 <_pmc_init_sources+0x48>)
  40148e:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  401490:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  401492:	4a08      	ldr	r2, [pc, #32]	; (4014b4 <_pmc_init_sources+0x4c>)
  401494:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  401496:	4b03      	ldr	r3, [pc, #12]	; (4014a4 <_pmc_init_sources+0x3c>)
  401498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40149a:	f013 0f02 	tst.w	r3, #2
  40149e:	d0fa      	beq.n	401496 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4014a0:	4770      	bx	lr
  4014a2:	bf00      	nop
  4014a4:	400e0600 	.word	0x400e0600
  4014a8:	00373e01 	.word	0x00373e01
  4014ac:	01370000 	.word	0x01370000
  4014b0:	f800ffff 	.word	0xf800ffff
  4014b4:	20183f01 	.word	0x20183f01

004014b8 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4014b8:	4a11      	ldr	r2, [pc, #68]	; (401500 <_pmc_init_master_clock+0x48>)
  4014ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  4014bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4014c0:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4014c2:	4b0f      	ldr	r3, [pc, #60]	; (401500 <_pmc_init_master_clock+0x48>)
  4014c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4014c6:	f013 0f08 	tst.w	r3, #8
  4014ca:	d0fa      	beq.n	4014c2 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4014cc:	4a0c      	ldr	r2, [pc, #48]	; (401500 <_pmc_init_master_clock+0x48>)
  4014ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  4014d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  4014d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  4014d8:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4014da:	4b09      	ldr	r3, [pc, #36]	; (401500 <_pmc_init_master_clock+0x48>)
  4014dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4014de:	f013 0f08 	tst.w	r3, #8
  4014e2:	d0fa      	beq.n	4014da <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4014e4:	4a06      	ldr	r2, [pc, #24]	; (401500 <_pmc_init_master_clock+0x48>)
  4014e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  4014e8:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  4014ec:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  4014f0:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4014f2:	4b03      	ldr	r3, [pc, #12]	; (401500 <_pmc_init_master_clock+0x48>)
  4014f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4014f6:	f013 0f08 	tst.w	r3, #8
  4014fa:	d0fa      	beq.n	4014f2 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  4014fc:	4770      	bx	lr
  4014fe:	bf00      	nop
  401500:	400e0600 	.word	0x400e0600

00401504 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401504:	b508      	push	{r3, lr}
	_pmc_init_sources();
  401506:	4b02      	ldr	r3, [pc, #8]	; (401510 <_pmc_init+0xc>)
  401508:	4798      	blx	r3
	_pmc_init_master_clock();
  40150a:	4b02      	ldr	r3, [pc, #8]	; (401514 <_pmc_init+0x10>)
  40150c:	4798      	blx	r3
  40150e:	bd08      	pop	{r3, pc}
  401510:	00401469 	.word	0x00401469
  401514:	004014b9 	.word	0x004014b9

00401518 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401518:	2300      	movs	r3, #0
  40151a:	2b01      	cmp	r3, #1
  40151c:	d80f      	bhi.n	40153e <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  40151e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  401522:	008a      	lsls	r2, r1, #2
  401524:	4907      	ldr	r1, [pc, #28]	; (401544 <_pwm_get_cfg+0x2c>)
  401526:	588a      	ldr	r2, [r1, r2]
  401528:	4282      	cmp	r2, r0
  40152a:	d002      	beq.n	401532 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  40152c:	3301      	adds	r3, #1
  40152e:	b2db      	uxtb	r3, r3
  401530:	e7f3      	b.n	40151a <_pwm_get_cfg+0x2>
			return (_pwms + i);
  401532:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  401536:	009a      	lsls	r2, r3, #2
  401538:	4608      	mov	r0, r1
  40153a:	4410      	add	r0, r2
  40153c:	4770      	bx	lr
		}
	}

	return NULL;
  40153e:	2000      	movs	r0, #0
}
  401540:	4770      	bx	lr
  401542:	bf00      	nop
  401544:	00406600 	.word	0x00406600

00401548 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  401548:	4b06      	ldr	r3, [pc, #24]	; (401564 <_pwm_init_irq_param+0x1c>)
  40154a:	4298      	cmp	r0, r3
  40154c:	d003      	beq.n	401556 <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  40154e:	4b06      	ldr	r3, [pc, #24]	; (401568 <_pwm_init_irq_param+0x20>)
  401550:	4298      	cmp	r0, r3
  401552:	d003      	beq.n	40155c <_pwm_init_irq_param+0x14>
  401554:	4770      	bx	lr
		_pwm0_dev = dev;
  401556:	4b05      	ldr	r3, [pc, #20]	; (40156c <_pwm_init_irq_param+0x24>)
  401558:	6019      	str	r1, [r3, #0]
  40155a:	e7f8      	b.n	40154e <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  40155c:	4b03      	ldr	r3, [pc, #12]	; (40156c <_pwm_init_irq_param+0x24>)
  40155e:	6059      	str	r1, [r3, #4]
	}
}
  401560:	e7f8      	b.n	401554 <_pwm_init_irq_param+0xc>
  401562:	bf00      	nop
  401564:	40020000 	.word	0x40020000
  401568:	4005c000 	.word	0x4005c000
  40156c:	2040028c 	.word	0x2040028c

00401570 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  401570:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  401572:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  401574:	69db      	ldr	r3, [r3, #28]
  401576:	b113      	cbz	r3, 40157e <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  401578:	6803      	ldr	r3, [r0, #0]
  40157a:	b103      	cbz	r3, 40157e <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  40157c:	4798      	blx	r3
  40157e:	bd08      	pop	{r3, pc}

00401580 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  401580:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  401582:	4b02      	ldr	r3, [pc, #8]	; (40158c <PWM0_Handler+0xc>)
  401584:	6818      	ldr	r0, [r3, #0]
  401586:	4b02      	ldr	r3, [pc, #8]	; (401590 <PWM0_Handler+0x10>)
  401588:	4798      	blx	r3
  40158a:	bd08      	pop	{r3, pc}
  40158c:	2040028c 	.word	0x2040028c
  401590:	00401571 	.word	0x00401571

00401594 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  401594:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  401596:	4b02      	ldr	r3, [pc, #8]	; (4015a0 <PWM1_Handler+0xc>)
  401598:	6858      	ldr	r0, [r3, #4]
  40159a:	4b02      	ldr	r3, [pc, #8]	; (4015a4 <PWM1_Handler+0x10>)
  40159c:	4798      	blx	r3
  40159e:	bd08      	pop	{r3, pc}
  4015a0:	2040028c 	.word	0x2040028c
  4015a4:	00401571 	.word	0x00401571

004015a8 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  4015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4015aa:	4606      	mov	r6, r0
	ASSERT(hw);
  4015ac:	460c      	mov	r4, r1
  4015ae:	1c08      	adds	r0, r1, #0
  4015b0:	bf18      	it	ne
  4015b2:	2001      	movne	r0, #1
  4015b4:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  4015b8:	4951      	ldr	r1, [pc, #324]	; (401700 <_pwm_init+0x158>)
  4015ba:	4b52      	ldr	r3, [pc, #328]	; (401704 <_pwm_init+0x15c>)
  4015bc:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  4015be:	4620      	mov	r0, r4
  4015c0:	4b51      	ldr	r3, [pc, #324]	; (401708 <_pwm_init+0x160>)
  4015c2:	4798      	blx	r3
  4015c4:	4605      	mov	r5, r0

	device->hw = hw;
  4015c6:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  4015c8:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  4015ca:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  4015cc:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  4015ce:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  4015d0:	6903      	ldr	r3, [r0, #16]
  4015d2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  4015d6:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  4015d8:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  4015da:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  4015dc:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  4015de:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  4015e0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  4015e4:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  4015e6:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  4015e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  4015ea:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  4015ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  4015f0:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
	//int DT = 3;																	//Dead time of 3 (for 3kHz (6MHz) corresponds to 0.5us)
	
	//hri_pwmchnum_write_DT_DTH_bf(PWM0, DT);

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  4015f4:	2000      	movs	r0, #0
  4015f6:	e032      	b.n	40165e <_pwm_init+0xb6>
		ch = cfg->ch + i;
  4015f8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  4015fa:	0103      	lsls	r3, r0, #4
  4015fc:	eb02 0e03 	add.w	lr, r2, r3
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  401600:	5cd7      	ldrb	r7, [r2, r3]
  401602:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  401606:	3710      	adds	r7, #16
  401608:	017f      	lsls	r7, r7, #5
  40160a:	51e1      	str	r1, [r4, r7]
		hri_pwmchnum_set_CMR_DTE_bit((void *) &((Pwm *)hw)->PwmChNum[ch->index]);
  40160c:	5cd1      	ldrb	r1, [r2, r3]
	((PwmChNum *)hw)->PWM_CMR |= PWM_CMR_DTE;
  40160e:	3110      	adds	r1, #16
  401610:	0149      	lsls	r1, r1, #5
  401612:	5867      	ldr	r7, [r4, r1]
  401614:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
  401618:	5067      	str	r7, [r4, r1]
		hri_pwm_set_DT_DTH_bf(hw, ch->index, 10);
  40161a:	5cd1      	ldrb	r1, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  40161c:	eb04 1141 	add.w	r1, r4, r1, lsl #5
  401620:	f8d1 7218 	ldr.w	r7, [r1, #536]	; 0x218
  401624:	f047 070a 	orr.w	r7, r7, #10
  401628:	f8c1 7218 	str.w	r7, [r1, #536]	; 0x218
		hri_pwm_set_DT_DTL_bf(hw, ch->index, 10);
  40162c:	5cd1      	ldrb	r1, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  40162e:	eb04 1141 	add.w	r1, r4, r1, lsl #5
  401632:	f8d1 7218 	ldr.w	r7, [r1, #536]	; 0x218
  401636:	f447 2720 	orr.w	r7, r7, #655360	; 0xa0000
  40163a:	f8c1 7218 	str.w	r7, [r1, #536]	; 0x218
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  40163e:	5cd1      	ldrb	r1, [r2, r3]
  401640:	f8de 700c 	ldr.w	r7, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  401644:	3110      	adds	r1, #16
  401646:	eb04 1141 	add.w	r1, r4, r1, lsl #5
  40164a:	604f      	str	r7, [r1, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  40164c:	5cd3      	ldrb	r3, [r2, r3]
  40164e:	f8de 2008 	ldr.w	r2, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  401652:	eb04 1343 	add.w	r3, r4, r3, lsl #5
  401656:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  40165a:	3001      	adds	r0, #1
  40165c:	b240      	sxtb	r0, r0
  40165e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  401660:	4298      	cmp	r0, r3
  401662:	d3c9      	bcc.n	4015f8 <_pwm_init+0x50>
  401664:	2300      	movs	r3, #0
  401666:	e014      	b.n	401692 <_pwm_init+0xea>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  401668:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  40166a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  40166e:	0082      	lsls	r2, r0, #2
  401670:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  401674:	5c88      	ldrb	r0, [r1, r2]
  401676:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  40167a:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  40167e:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  401682:	5c8a      	ldrb	r2, [r1, r2]
  401684:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  401688:	3213      	adds	r2, #19
  40168a:	0112      	lsls	r2, r2, #4
  40168c:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  40168e:	3301      	adds	r3, #1
  401690:	b25b      	sxtb	r3, r3
  401692:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  401694:	4293      	cmp	r3, r2
  401696:	d3e7      	bcc.n	401668 <_pwm_init+0xc0>
	}

	_pwm_init_irq_param(hw, device);
  401698:	4631      	mov	r1, r6
  40169a:	4620      	mov	r0, r4
  40169c:	4b1b      	ldr	r3, [pc, #108]	; (40170c <_pwm_init+0x164>)
  40169e:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  4016a0:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4016a4:	2b00      	cmp	r3, #0
  4016a6:	db0d      	blt.n	4016c4 <_pwm_init+0x11c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4016a8:	095a      	lsrs	r2, r3, #5
  4016aa:	f003 031f 	and.w	r3, r3, #31
  4016ae:	2101      	movs	r1, #1
  4016b0:	fa01 f303 	lsl.w	r3, r1, r3
  4016b4:	3220      	adds	r2, #32
  4016b6:	4916      	ldr	r1, [pc, #88]	; (401710 <_pwm_init+0x168>)
  4016b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4016bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4016c0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  4016c4:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4016c8:	2b00      	cmp	r3, #0
  4016ca:	db09      	blt.n	4016e0 <_pwm_init+0x138>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4016cc:	095a      	lsrs	r2, r3, #5
  4016ce:	f003 031f 	and.w	r3, r3, #31
  4016d2:	2101      	movs	r1, #1
  4016d4:	fa01 f303 	lsl.w	r3, r1, r3
  4016d8:	3260      	adds	r2, #96	; 0x60
  4016da:	490d      	ldr	r1, [pc, #52]	; (401710 <_pwm_init+0x168>)
  4016dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  4016e0:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4016e4:	2b00      	cmp	r3, #0
  4016e6:	db08      	blt.n	4016fa <_pwm_init+0x152>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4016e8:	0959      	lsrs	r1, r3, #5
  4016ea:	f003 031f 	and.w	r3, r3, #31
  4016ee:	2201      	movs	r2, #1
  4016f0:	fa02 f303 	lsl.w	r3, r2, r3
  4016f4:	4a06      	ldr	r2, [pc, #24]	; (401710 <_pwm_init+0x168>)
  4016f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  4016fa:	2000      	movs	r0, #0
  4016fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4016fe:	bf00      	nop
  401700:	004066a8 	.word	0x004066a8
  401704:	00400f29 	.word	0x00400f29
  401708:	00401519 	.word	0x00401519
  40170c:	00401549 	.word	0x00401549
  401710:	e000e100 	.word	0xe000e100

00401714 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  401714:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  401716:	4604      	mov	r4, r0
  401718:	f44f 72df 	mov.w	r2, #446	; 0x1be
  40171c:	490b      	ldr	r1, [pc, #44]	; (40174c <_pwm_enable+0x38>)
  40171e:	3000      	adds	r0, #0
  401720:	bf18      	it	ne
  401722:	2001      	movne	r0, #1
  401724:	4b0a      	ldr	r3, [pc, #40]	; (401750 <_pwm_enable+0x3c>)
  401726:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  401728:	6920      	ldr	r0, [r4, #16]
  40172a:	4b0a      	ldr	r3, [pc, #40]	; (401754 <_pwm_enable+0x40>)
  40172c:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  40172e:	2300      	movs	r3, #0
  401730:	e008      	b.n	401744 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  401732:	6921      	ldr	r1, [r4, #16]
  401734:	6b05      	ldr	r5, [r0, #48]	; 0x30
  401736:	011a      	lsls	r2, r3, #4
  401738:	5cad      	ldrb	r5, [r5, r2]
  40173a:	2201      	movs	r2, #1
  40173c:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  40173e:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  401740:	3301      	adds	r3, #1
  401742:	b25b      	sxtb	r3, r3
  401744:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401746:	4293      	cmp	r3, r2
  401748:	d3f3      	bcc.n	401732 <_pwm_enable+0x1e>
	}
}
  40174a:	bd38      	pop	{r3, r4, r5, pc}
  40174c:	004066a8 	.word	0x004066a8
  401750:	00400f29 	.word	0x00400f29
  401754:	00401519 	.word	0x00401519

00401758 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  401758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40175a:	460d      	mov	r5, r1
  40175c:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  40175e:	4604      	mov	r4, r0
  401760:	f240 12db 	movw	r2, #475	; 0x1db
  401764:	4911      	ldr	r1, [pc, #68]	; (4017ac <_pwm_set_param+0x54>)
  401766:	2800      	cmp	r0, #0
  401768:	bf18      	it	ne
  40176a:	42ae      	cmpne	r6, r5
  40176c:	bf34      	ite	cc
  40176e:	2001      	movcc	r0, #1
  401770:	2000      	movcs	r0, #0
  401772:	4b0f      	ldr	r3, [pc, #60]	; (4017b0 <_pwm_set_param+0x58>)
  401774:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  401776:	6920      	ldr	r0, [r4, #16]
  401778:	4b0e      	ldr	r3, [pc, #56]	; (4017b4 <_pwm_set_param+0x5c>)
  40177a:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  40177c:	2300      	movs	r3, #0
  40177e:	e010      	b.n	4017a2 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  401780:	6922      	ldr	r2, [r4, #16]
  401782:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401784:	0119      	lsls	r1, r3, #4
  401786:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  401788:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  40178c:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  401790:	6922      	ldr	r2, [r4, #16]
  401792:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401794:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  401796:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  40179a:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  40179e:	3301      	adds	r3, #1
  4017a0:	b2db      	uxtb	r3, r3
  4017a2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4017a4:	4293      	cmp	r3, r2
  4017a6:	d3eb      	bcc.n	401780 <_pwm_set_param+0x28>
	}
}
  4017a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4017aa:	bf00      	nop
  4017ac:	004066a8 	.word	0x004066a8
  4017b0:	00400f29 	.word	0x00400f29
  4017b4:	00401519 	.word	0x00401519

004017b8 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  4017b8:	b510      	push	{r4, lr}
	ASSERT(device);
  4017ba:	4604      	mov	r4, r0
  4017bc:	f240 12e7 	movw	r2, #487	; 0x1e7
  4017c0:	4907      	ldr	r1, [pc, #28]	; (4017e0 <_pwm_is_enabled+0x28>)
  4017c2:	3000      	adds	r0, #0
  4017c4:	bf18      	it	ne
  4017c6:	2001      	movne	r0, #1
  4017c8:	4b06      	ldr	r3, [pc, #24]	; (4017e4 <_pwm_is_enabled+0x2c>)
  4017ca:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  4017cc:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  4017ce:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  4017d0:	f013 0f0f 	tst.w	r3, #15
  4017d4:	d001      	beq.n	4017da <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  4017d6:	2001      	movs	r0, #1
	}
}
  4017d8:	bd10      	pop	{r4, pc}
		return false;
  4017da:	2000      	movs	r0, #0
  4017dc:	bd10      	pop	{r4, pc}
  4017de:	bf00      	nop
  4017e0:	004066a8 	.word	0x004066a8
  4017e4:	00400f29 	.word	0x00400f29

004017e8 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  4017e8:	2000      	movs	r0, #0
  4017ea:	4770      	bx	lr

004017ec <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  4017ec:	4b03      	ldr	r3, [pc, #12]	; (4017fc <_system_time_init+0x10>)
  4017ee:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4017f2:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  4017f4:	2205      	movs	r2, #5
  4017f6:	601a      	str	r2, [r3, #0]
  4017f8:	4770      	bx	lr
  4017fa:	bf00      	nop
  4017fc:	e000e010 	.word	0xe000e010

00401800 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  401800:	b508      	push	{r3, lr}
	_system_time_init(hw);
  401802:	4b01      	ldr	r3, [pc, #4]	; (401808 <_delay_init+0x8>)
  401804:	4798      	blx	r3
  401806:	bd08      	pop	{r3, pc}
  401808:	004017ed 	.word	0x004017ed

0040180c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  40180c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  40180e:	e00d      	b.n	40182c <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  401810:	4b0d      	ldr	r3, [pc, #52]	; (401848 <_delay_cycles+0x3c>)
  401812:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401816:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401818:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  40181a:	4b0b      	ldr	r3, [pc, #44]	; (401848 <_delay_cycles+0x3c>)
  40181c:	681b      	ldr	r3, [r3, #0]
  40181e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401822:	d0fa      	beq.n	40181a <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  401824:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  401828:	3101      	adds	r1, #1
	while (n--) {
  40182a:	4610      	mov	r0, r2
  40182c:	1e43      	subs	r3, r0, #1
  40182e:	b2da      	uxtb	r2, r3
  401830:	2800      	cmp	r0, #0
  401832:	d1ed      	bne.n	401810 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  401834:	4b04      	ldr	r3, [pc, #16]	; (401848 <_delay_cycles+0x3c>)
  401836:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  401838:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  40183a:	4b03      	ldr	r3, [pc, #12]	; (401848 <_delay_cycles+0x3c>)
  40183c:	681b      	ldr	r3, [r3, #0]
  40183e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401842:	d0fa      	beq.n	40183a <_delay_cycles+0x2e>
		;
}
  401844:	4770      	bx	lr
  401846:	bf00      	nop
  401848:	e000e010 	.word	0xe000e010

0040184c <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  40184c:	2300      	movs	r3, #0
  40184e:	2b01      	cmp	r3, #1
  401850:	d815      	bhi.n	40187e <get_cfg+0x32>
{
  401852:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401854:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401858:	008a      	lsls	r2, r1, #2
  40185a:	490a      	ldr	r1, [pc, #40]	; (401884 <get_cfg+0x38>)
  40185c:	588a      	ldr	r2, [r1, r2]
  40185e:	4282      	cmp	r2, r0
  401860:	d007      	beq.n	401872 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401862:	3301      	adds	r3, #1
  401864:	b2db      	uxtb	r3, r3
  401866:	2b01      	cmp	r3, #1
  401868:	d9f4      	bls.n	401854 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  40186a:	2000      	movs	r0, #0
}
  40186c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401870:	4770      	bx	lr
			return &(_tcs[i]);
  401872:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401876:	00a3      	lsls	r3, r4, #2
  401878:	4608      	mov	r0, r1
  40187a:	4418      	add	r0, r3
  40187c:	e7f6      	b.n	40186c <get_cfg+0x20>
	return NULL;
  40187e:	2000      	movs	r0, #0
  401880:	4770      	bx	lr
  401882:	bf00      	nop
  401884:	20400000 	.word	0x20400000

00401888 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  401888:	4b06      	ldr	r3, [pc, #24]	; (4018a4 <_tc_init_irq_param+0x1c>)
  40188a:	4298      	cmp	r0, r3
  40188c:	d003      	beq.n	401896 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  40188e:	4b06      	ldr	r3, [pc, #24]	; (4018a8 <_tc_init_irq_param+0x20>)
  401890:	4298      	cmp	r0, r3
  401892:	d003      	beq.n	40189c <_tc_init_irq_param+0x14>
  401894:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  401896:	4b05      	ldr	r3, [pc, #20]	; (4018ac <_tc_init_irq_param+0x24>)
  401898:	6019      	str	r1, [r3, #0]
  40189a:	e7f8      	b.n	40188e <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  40189c:	4b03      	ldr	r3, [pc, #12]	; (4018ac <_tc_init_irq_param+0x24>)
  40189e:	6059      	str	r1, [r3, #4]
	}
}
  4018a0:	e7f8      	b.n	401894 <_tc_init_irq_param+0xc>
  4018a2:	bf00      	nop
  4018a4:	4000c000 	.word	0x4000c000
  4018a8:	40054000 	.word	0x40054000
  4018ac:	204002ac 	.word	0x204002ac

004018b0 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  4018b0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  4018b2:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  4018b4:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  4018b6:	f013 0f10 	tst.w	r3, #16
  4018ba:	d100      	bne.n	4018be <tc_interrupt_handler+0xe>
  4018bc:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  4018be:	6803      	ldr	r3, [r0, #0]
  4018c0:	4798      	blx	r3
	}
}
  4018c2:	e7fb      	b.n	4018bc <tc_interrupt_handler+0xc>

004018c4 <_timer_init>:
{
  4018c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4018c8:	4606      	mov	r6, r0
  4018ca:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  4018cc:	4608      	mov	r0, r1
  4018ce:	4b2f      	ldr	r3, [pc, #188]	; (40198c <_timer_init+0xc8>)
  4018d0:	4798      	blx	r3
  4018d2:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  4018d4:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  4018d8:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  4018dc:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  4018de:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  4018e2:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  4018e4:	22c3      	movs	r2, #195	; 0xc3
  4018e6:	492a      	ldr	r1, [pc, #168]	; (401990 <_timer_init+0xcc>)
  4018e8:	2001      	movs	r0, #1
  4018ea:	4b2a      	ldr	r3, [pc, #168]	; (401994 <_timer_init+0xd0>)
  4018ec:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  4018ee:	f248 0307 	movw	r3, #32775	; 0x8007
  4018f2:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4018f4:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4018f8:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4018fc:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401900:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401902:	2300      	movs	r3, #0
  401904:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401906:	f248 020f 	movw	r2, #32783	; 0x800f
  40190a:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  40190c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  401910:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401914:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401918:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  40191a:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  40191c:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  40191e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  401922:	4631      	mov	r1, r6
  401924:	4620      	mov	r0, r4
  401926:	4b1c      	ldr	r3, [pc, #112]	; (401998 <_timer_init+0xd4>)
  401928:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  40192a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40192e:	2b00      	cmp	r3, #0
  401930:	db0d      	blt.n	40194e <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401932:	095a      	lsrs	r2, r3, #5
  401934:	f003 031f 	and.w	r3, r3, #31
  401938:	2101      	movs	r1, #1
  40193a:	fa01 f303 	lsl.w	r3, r1, r3
  40193e:	3220      	adds	r2, #32
  401940:	4916      	ldr	r1, [pc, #88]	; (40199c <_timer_init+0xd8>)
  401942:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401946:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40194a:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  40194e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401952:	2b00      	cmp	r3, #0
  401954:	db09      	blt.n	40196a <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401956:	095a      	lsrs	r2, r3, #5
  401958:	f003 031f 	and.w	r3, r3, #31
  40195c:	2101      	movs	r1, #1
  40195e:	fa01 f303 	lsl.w	r3, r1, r3
  401962:	3260      	adds	r2, #96	; 0x60
  401964:	490d      	ldr	r1, [pc, #52]	; (40199c <_timer_init+0xd8>)
  401966:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  40196a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40196e:	2b00      	cmp	r3, #0
  401970:	db08      	blt.n	401984 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401972:	0959      	lsrs	r1, r3, #5
  401974:	f003 031f 	and.w	r3, r3, #31
  401978:	2201      	movs	r2, #1
  40197a:	fa02 f303 	lsl.w	r3, r2, r3
  40197e:	4a07      	ldr	r2, [pc, #28]	; (40199c <_timer_init+0xd8>)
  401980:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  401984:	2000      	movs	r0, #0
  401986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40198a:	bf00      	nop
  40198c:	0040184d 	.word	0x0040184d
  401990:	004066c0 	.word	0x004066c0
  401994:	00400f29 	.word	0x00400f29
  401998:	00401889 	.word	0x00401889
  40199c:	e000e100 	.word	0xe000e100

004019a0 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  4019a0:	2000      	movs	r0, #0
  4019a2:	4770      	bx	lr

004019a4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  4019a4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  4019a6:	4b02      	ldr	r3, [pc, #8]	; (4019b0 <TC0_Handler+0xc>)
  4019a8:	6818      	ldr	r0, [r3, #0]
  4019aa:	4b02      	ldr	r3, [pc, #8]	; (4019b4 <TC0_Handler+0x10>)
  4019ac:	4798      	blx	r3
  4019ae:	bd08      	pop	{r3, pc}
  4019b0:	204002ac 	.word	0x204002ac
  4019b4:	004018b1 	.word	0x004018b1

004019b8 <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  4019b8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  4019ba:	4b02      	ldr	r3, [pc, #8]	; (4019c4 <TC9_Handler+0xc>)
  4019bc:	6858      	ldr	r0, [r3, #4]
  4019be:	4b02      	ldr	r3, [pc, #8]	; (4019c8 <TC9_Handler+0x10>)
  4019c0:	4798      	blx	r3
  4019c2:	bd08      	pop	{r3, pc}
  4019c4:	204002ac 	.word	0x204002ac
  4019c8:	004018b1 	.word	0x004018b1

004019cc <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  4019cc:	b510      	push	{r4, lr}
	ASSERT(hw);
  4019ce:	4604      	mov	r4, r0
  4019d0:	f240 222b 	movw	r2, #555	; 0x22b
  4019d4:	4905      	ldr	r1, [pc, #20]	; (4019ec <_usart_get_hardware_index+0x20>)
  4019d6:	3000      	adds	r0, #0
  4019d8:	bf18      	it	ne
  4019da:	2001      	movne	r0, #1
  4019dc:	4b04      	ldr	r3, [pc, #16]	; (4019f0 <_usart_get_hardware_index+0x24>)
  4019de:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  4019e0:	4804      	ldr	r0, [pc, #16]	; (4019f4 <_usart_get_hardware_index+0x28>)
  4019e2:	4420      	add	r0, r4
}
  4019e4:	f3c0 3087 	ubfx	r0, r0, #14, #8
  4019e8:	bd10      	pop	{r4, pc}
  4019ea:	bf00      	nop
  4019ec:	004066e0 	.word	0x004066e0
  4019f0:	00400f29 	.word	0x00400f29
  4019f4:	bffdc000 	.word	0xbffdc000

004019f8 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  4019f8:	b510      	push	{r4, lr}
	ASSERT(hw);
  4019fa:	4604      	mov	r4, r0
  4019fc:	f240 2287 	movw	r2, #647	; 0x287
  401a00:	490e      	ldr	r1, [pc, #56]	; (401a3c <_get_usart_index+0x44>)
  401a02:	3000      	adds	r0, #0
  401a04:	bf18      	it	ne
  401a06:	2001      	movne	r0, #1
  401a08:	4b0d      	ldr	r3, [pc, #52]	; (401a40 <_get_usart_index+0x48>)
  401a0a:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  401a0c:	4620      	mov	r0, r4
  401a0e:	4b0d      	ldr	r3, [pc, #52]	; (401a44 <_get_usart_index+0x4c>)
  401a10:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401a12:	2300      	movs	r3, #0
  401a14:	b143      	cbz	r3, 401a28 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  401a16:	f240 2291 	movw	r2, #657	; 0x291
  401a1a:	4908      	ldr	r1, [pc, #32]	; (401a3c <_get_usart_index+0x44>)
  401a1c:	2000      	movs	r0, #0
  401a1e:	4b08      	ldr	r3, [pc, #32]	; (401a40 <_get_usart_index+0x48>)
  401a20:	4798      	blx	r3
	return 0;
  401a22:	2300      	movs	r3, #0
}
  401a24:	4618      	mov	r0, r3
  401a26:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  401a28:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401a2c:	008a      	lsls	r2, r1, #2
  401a2e:	4906      	ldr	r1, [pc, #24]	; (401a48 <_get_usart_index+0x50>)
  401a30:	5c8a      	ldrb	r2, [r1, r2]
  401a32:	4290      	cmp	r0, r2
  401a34:	d0f6      	beq.n	401a24 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401a36:	3301      	adds	r3, #1
  401a38:	b2db      	uxtb	r3, r3
  401a3a:	e7eb      	b.n	401a14 <_get_usart_index+0x1c>
  401a3c:	004066e0 	.word	0x004066e0
  401a40:	00400f29 	.word	0x00400f29
  401a44:	004019cd 	.word	0x004019cd
  401a48:	004066d4 	.word	0x004066d4

00401a4c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  401a4c:	b510      	push	{r4, lr}
	ASSERT(hw);
  401a4e:	4604      	mov	r4, r0
  401a50:	f240 229e 	movw	r2, #670	; 0x29e
  401a54:	4911      	ldr	r1, [pc, #68]	; (401a9c <_usart_init+0x50>)
  401a56:	3000      	adds	r0, #0
  401a58:	bf18      	it	ne
  401a5a:	2001      	movne	r0, #1
  401a5c:	4b10      	ldr	r3, [pc, #64]	; (401aa0 <_usart_init+0x54>)
  401a5e:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  401a60:	4620      	mov	r0, r4
  401a62:	4b10      	ldr	r3, [pc, #64]	; (401aa4 <_usart_init+0x58>)
  401a64:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  401a66:	4b10      	ldr	r3, [pc, #64]	; (401aa8 <_usart_init+0x5c>)
  401a68:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  401a6c:	2300      	movs	r3, #0
  401a6e:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  401a70:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  401a72:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  401a74:	22ac      	movs	r2, #172	; 0xac
  401a76:	6022      	str	r2, [r4, #0]
  401a78:	f44f 7280 	mov.w	r2, #256	; 0x100
  401a7c:	6022      	str	r2, [r4, #0]
  401a7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401a82:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  401a84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401a88:	0081      	lsls	r1, r0, #2
  401a8a:	4a08      	ldr	r2, [pc, #32]	; (401aac <_usart_init+0x60>)
  401a8c:	440a      	add	r2, r1
  401a8e:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  401a90:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  401a92:	4a07      	ldr	r2, [pc, #28]	; (401ab0 <_usart_init+0x64>)
  401a94:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  401a96:	4618      	mov	r0, r3
  401a98:	bd10      	pop	{r4, pc}
  401a9a:	bf00      	nop
  401a9c:	004066e0 	.word	0x004066e0
  401aa0:	00400f29 	.word	0x00400f29
  401aa4:	004019f9 	.word	0x004019f9
  401aa8:	55534100 	.word	0x55534100
  401aac:	004066d4 	.word	0x004066d4
  401ab0:	000100f4 	.word	0x000100f4

00401ab4 <_usart_sync_init>:
{
  401ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401ab6:	460c      	mov	r4, r1
	ASSERT(device);
  401ab8:	4e09      	ldr	r6, [pc, #36]	; (401ae0 <_usart_sync_init+0x2c>)
  401aba:	4607      	mov	r7, r0
  401abc:	22bd      	movs	r2, #189	; 0xbd
  401abe:	4631      	mov	r1, r6
  401ac0:	3000      	adds	r0, #0
  401ac2:	bf18      	it	ne
  401ac4:	2001      	movne	r0, #1
  401ac6:	4d07      	ldr	r5, [pc, #28]	; (401ae4 <_usart_sync_init+0x30>)
  401ac8:	47a8      	blx	r5
	ASSERT(hw);
  401aca:	22be      	movs	r2, #190	; 0xbe
  401acc:	4631      	mov	r1, r6
  401ace:	1c20      	adds	r0, r4, #0
  401ad0:	bf18      	it	ne
  401ad2:	2001      	movne	r0, #1
  401ad4:	47a8      	blx	r5
	device->hw = hw;
  401ad6:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  401ad8:	4620      	mov	r0, r4
  401ada:	4b03      	ldr	r3, [pc, #12]	; (401ae8 <_usart_sync_init+0x34>)
  401adc:	4798      	blx	r3
}
  401ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401ae0:	004066e0 	.word	0x004066e0
  401ae4:	00400f29 	.word	0x00400f29
  401ae8:	00401a4d 	.word	0x00401a4d

00401aec <_usart_sync_enable>:
{
  401aec:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  401aee:	4e0a      	ldr	r6, [pc, #40]	; (401b18 <_usart_sync_enable+0x2c>)
  401af0:	4604      	mov	r4, r0
  401af2:	f240 1205 	movw	r2, #261	; 0x105
  401af6:	4631      	mov	r1, r6
  401af8:	3000      	adds	r0, #0
  401afa:	bf18      	it	ne
  401afc:	2001      	movne	r0, #1
  401afe:	4d07      	ldr	r5, [pc, #28]	; (401b1c <_usart_sync_enable+0x30>)
  401b00:	47a8      	blx	r5
	_usart_enable(device->hw);
  401b02:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  401b04:	f240 22c7 	movw	r2, #711	; 0x2c7
  401b08:	4631      	mov	r1, r6
  401b0a:	1c20      	adds	r0, r4, #0
  401b0c:	bf18      	it	ne
  401b0e:	2001      	movne	r0, #1
  401b10:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  401b12:	2350      	movs	r3, #80	; 0x50
  401b14:	6023      	str	r3, [r4, #0]
  401b16:	bd70      	pop	{r4, r5, r6, pc}
  401b18:	004066e0 	.word	0x004066e0
  401b1c:	00400f29 	.word	0x00400f29

00401b20 <_usart_sync_write_byte>:
{
  401b20:	b538      	push	{r3, r4, r5, lr}
  401b22:	460c      	mov	r4, r1
	ASSERT(device);
  401b24:	4605      	mov	r5, r0
  401b26:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  401b2a:	4904      	ldr	r1, [pc, #16]	; (401b3c <_usart_sync_write_byte+0x1c>)
  401b2c:	3000      	adds	r0, #0
  401b2e:	bf18      	it	ne
  401b30:	2001      	movne	r0, #1
  401b32:	4b03      	ldr	r3, [pc, #12]	; (401b40 <_usart_sync_write_byte+0x20>)
  401b34:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  401b36:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  401b38:	61dc      	str	r4, [r3, #28]
  401b3a:	bd38      	pop	{r3, r4, r5, pc}
  401b3c:	004066e0 	.word	0x004066e0
  401b40:	00400f29 	.word	0x00400f29

00401b44 <_usart_sync_read_byte>:
{
  401b44:	b510      	push	{r4, lr}
	ASSERT(device);
  401b46:	4604      	mov	r4, r0
  401b48:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  401b4c:	4904      	ldr	r1, [pc, #16]	; (401b60 <_usart_sync_read_byte+0x1c>)
  401b4e:	3000      	adds	r0, #0
  401b50:	bf18      	it	ne
  401b52:	2001      	movne	r0, #1
  401b54:	4b03      	ldr	r3, [pc, #12]	; (401b64 <_usart_sync_read_byte+0x20>)
  401b56:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  401b58:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  401b5a:	6998      	ldr	r0, [r3, #24]
}
  401b5c:	b2c0      	uxtb	r0, r0
  401b5e:	bd10      	pop	{r4, pc}
  401b60:	004066e0 	.word	0x004066e0
  401b64:	00400f29 	.word	0x00400f29

00401b68 <_usart_sync_is_ready_to_send>:
{
  401b68:	b510      	push	{r4, lr}
	ASSERT(device);
  401b6a:	4604      	mov	r4, r0
  401b6c:	f240 12c3 	movw	r2, #451	; 0x1c3
  401b70:	4905      	ldr	r1, [pc, #20]	; (401b88 <_usart_sync_is_ready_to_send+0x20>)
  401b72:	3000      	adds	r0, #0
  401b74:	bf18      	it	ne
  401b76:	2001      	movne	r0, #1
  401b78:	4b04      	ldr	r3, [pc, #16]	; (401b8c <_usart_sync_is_ready_to_send+0x24>)
  401b7a:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  401b7c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  401b7e:	6958      	ldr	r0, [r3, #20]
}
  401b80:	f3c0 0040 	ubfx	r0, r0, #1, #1
  401b84:	bd10      	pop	{r4, pc}
  401b86:	bf00      	nop
  401b88:	004066e0 	.word	0x004066e0
  401b8c:	00400f29 	.word	0x00400f29

00401b90 <_usart_sync_is_transmit_done>:
{
  401b90:	b510      	push	{r4, lr}
	ASSERT(device);
  401b92:	4604      	mov	r4, r0
  401b94:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  401b98:	4905      	ldr	r1, [pc, #20]	; (401bb0 <_usart_sync_is_transmit_done+0x20>)
  401b9a:	3000      	adds	r0, #0
  401b9c:	bf18      	it	ne
  401b9e:	2001      	movne	r0, #1
  401ba0:	4b04      	ldr	r3, [pc, #16]	; (401bb4 <_usart_sync_is_transmit_done+0x24>)
  401ba2:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  401ba4:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  401ba6:	6958      	ldr	r0, [r3, #20]
}
  401ba8:	f3c0 2040 	ubfx	r0, r0, #9, #1
  401bac:	bd10      	pop	{r4, pc}
  401bae:	bf00      	nop
  401bb0:	004066e0 	.word	0x004066e0
  401bb4:	00400f29 	.word	0x00400f29

00401bb8 <_usart_sync_is_byte_received>:
{
  401bb8:	b510      	push	{r4, lr}
	ASSERT(device);
  401bba:	4604      	mov	r4, r0
  401bbc:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401bc0:	4905      	ldr	r1, [pc, #20]	; (401bd8 <_usart_sync_is_byte_received+0x20>)
  401bc2:	3000      	adds	r0, #0
  401bc4:	bf18      	it	ne
  401bc6:	2001      	movne	r0, #1
  401bc8:	4b04      	ldr	r3, [pc, #16]	; (401bdc <_usart_sync_is_byte_received+0x24>)
  401bca:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  401bcc:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  401bce:	6958      	ldr	r0, [r3, #20]
  401bd0:	f000 0001 	and.w	r0, r0, #1
}
  401bd4:	bd10      	pop	{r4, pc}
  401bd6:	bf00      	nop
  401bd8:	004066e0 	.word	0x004066e0
  401bdc:	00400f29 	.word	0x00400f29

00401be0 <_usart_get_usart_sync>:
}
  401be0:	2000      	movs	r0, #0
  401be2:	4770      	bx	lr

00401be4 <main>:
#include "arm_math.h"



int main(void)
{
  401be4:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  401be6:	4b0a      	ldr	r3, [pc, #40]	; (401c10 <main+0x2c>)
  401be8:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	
	//Initialise dead time on PWMs 
	pwm_deadtime_init();	
  401bea:	4b0a      	ldr	r3, [pc, #40]	; (401c14 <main+0x30>)
  401bec:	4798      	blx	r3
	
	
	pwm_enable_all();
  401bee:	4b0a      	ldr	r3, [pc, #40]	; (401c18 <main+0x34>)
  401bf0:	4798      	blx	r3
	adc_enable_all();
  401bf2:	4b0a      	ldr	r3, [pc, #40]	; (401c1c <main+0x38>)
  401bf4:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  401bf6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  401bfa:	4b09      	ldr	r3, [pc, #36]	; (401c20 <main+0x3c>)
  401bfc:	631a      	str	r2, [r3, #48]	; 0x30
	
	
	//Runs first slow spin test of motor slowly increasing the angle so the rotor can catch up
	
	
	first_slow_spin();
  401bfe:	4b09      	ldr	r3, [pc, #36]	; (401c24 <main+0x40>)
  401c00:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
		
		
		Current_Voltage_Inital_Test();
  401c02:	4b09      	ldr	r3, [pc, #36]	; (401c28 <main+0x44>)
  401c04:	4798      	blx	r3
		delay_ms(500);
  401c06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  401c0a:	4b08      	ldr	r3, [pc, #32]	; (401c2c <main+0x48>)
  401c0c:	4798      	blx	r3
  401c0e:	e7f8      	b.n	401c02 <main+0x1e>
  401c10:	004001d5 	.word	0x004001d5
  401c14:	004002a1 	.word	0x004002a1
  401c18:	00400259 	.word	0x00400259
  401c1c:	004001e9 	.word	0x004001e9
  401c20:	400e0e00 	.word	0x400e0e00
  401c24:	00400311 	.word	0x00400311
  401c28:	004002a5 	.word	0x004002a5
  401c2c:	00400b35 	.word	0x00400b35

00401c30 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  401c30:	b958      	cbnz	r0, 401c4a <_read+0x1a>
{
  401c32:	b508      	push	{r3, lr}
  401c34:	460b      	mov	r3, r1
  401c36:	4611      	mov	r1, r2
  401c38:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  401c3a:	4b05      	ldr	r3, [pc, #20]	; (401c50 <_read+0x20>)
  401c3c:	4798      	blx	r3
	if (n < 0) {
  401c3e:	2800      	cmp	r0, #0
  401c40:	db00      	blt.n	401c44 <_read+0x14>
		return -1;
	}

	return n;
}
  401c42:	bd08      	pop	{r3, pc}
		return -1;
  401c44:	f04f 30ff 	mov.w	r0, #4294967295
  401c48:	bd08      	pop	{r3, pc}
		return -1;
  401c4a:	f04f 30ff 	mov.w	r0, #4294967295
  401c4e:	4770      	bx	lr
  401c50:	00401ca9 	.word	0x00401ca9

00401c54 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  401c54:	3801      	subs	r0, #1
  401c56:	2802      	cmp	r0, #2
  401c58:	d80b      	bhi.n	401c72 <_write+0x1e>
{
  401c5a:	b508      	push	{r3, lr}
  401c5c:	460b      	mov	r3, r1
  401c5e:	4611      	mov	r1, r2
  401c60:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  401c62:	4b05      	ldr	r3, [pc, #20]	; (401c78 <_write+0x24>)
  401c64:	4798      	blx	r3
	if (n < 0) {
  401c66:	2800      	cmp	r0, #0
  401c68:	db00      	blt.n	401c6c <_write+0x18>
		return -1;
	}

	return n;
}
  401c6a:	bd08      	pop	{r3, pc}
		return -1;
  401c6c:	f04f 30ff 	mov.w	r0, #4294967295
  401c70:	bd08      	pop	{r3, pc}
		return -1;
  401c72:	f04f 30ff 	mov.w	r0, #4294967295
  401c76:	4770      	bx	lr
  401c78:	00401ccd 	.word	0x00401ccd

00401c7c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  401c7c:	b570      	push	{r4, r5, r6, lr}
  401c7e:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  401c80:	4d06      	ldr	r5, [pc, #24]	; (401c9c <stdio_io_init+0x20>)
  401c82:	682b      	ldr	r3, [r5, #0]
  401c84:	2100      	movs	r1, #0
  401c86:	6898      	ldr	r0, [r3, #8]
  401c88:	4c05      	ldr	r4, [pc, #20]	; (401ca0 <stdio_io_init+0x24>)
  401c8a:	47a0      	blx	r4
	setbuf(stdin, NULL);
  401c8c:	682b      	ldr	r3, [r5, #0]
  401c8e:	2100      	movs	r1, #0
  401c90:	6858      	ldr	r0, [r3, #4]
  401c92:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  401c94:	4b03      	ldr	r3, [pc, #12]	; (401ca4 <stdio_io_init+0x28>)
  401c96:	601e      	str	r6, [r3, #0]
  401c98:	bd70      	pop	{r4, r5, r6, pc}
  401c9a:	bf00      	nop
  401c9c:	20400048 	.word	0x20400048
  401ca0:	00404345 	.word	0x00404345
  401ca4:	204002b4 	.word	0x204002b4

00401ca8 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  401ca8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401caa:	4b06      	ldr	r3, [pc, #24]	; (401cc4 <stdio_io_read+0x1c>)
  401cac:	681b      	ldr	r3, [r3, #0]
  401cae:	b133      	cbz	r3, 401cbe <stdio_io_read+0x16>
  401cb0:	460a      	mov	r2, r1
  401cb2:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  401cb4:	b292      	uxth	r2, r2
  401cb6:	4618      	mov	r0, r3
  401cb8:	4b03      	ldr	r3, [pc, #12]	; (401cc8 <stdio_io_read+0x20>)
  401cba:	4798      	blx	r3
  401cbc:	bd08      	pop	{r3, pc}
		return 0;
  401cbe:	2000      	movs	r0, #0
}
  401cc0:	bd08      	pop	{r3, pc}
  401cc2:	bf00      	nop
  401cc4:	204002b4 	.word	0x204002b4
  401cc8:	00400bfd 	.word	0x00400bfd

00401ccc <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  401ccc:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401cce:	4b06      	ldr	r3, [pc, #24]	; (401ce8 <stdio_io_write+0x1c>)
  401cd0:	681b      	ldr	r3, [r3, #0]
  401cd2:	b133      	cbz	r3, 401ce2 <stdio_io_write+0x16>
  401cd4:	460a      	mov	r2, r1
  401cd6:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  401cd8:	b292      	uxth	r2, r2
  401cda:	4618      	mov	r0, r3
  401cdc:	4b03      	ldr	r3, [pc, #12]	; (401cec <stdio_io_write+0x20>)
  401cde:	4798      	blx	r3
  401ce0:	bd08      	pop	{r3, pc}
		return 0;
  401ce2:	2000      	movs	r0, #0
}
  401ce4:	bd08      	pop	{r3, pc}
  401ce6:	bf00      	nop
  401ce8:	204002b4 	.word	0x204002b4
  401cec:	00400bcd 	.word	0x00400bcd

00401cf0 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  401cf0:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  401cf2:	4c04      	ldr	r4, [pc, #16]	; (401d04 <stdio_redirect_init+0x14>)
  401cf4:	4620      	mov	r0, r4
  401cf6:	4b04      	ldr	r3, [pc, #16]	; (401d08 <stdio_redirect_init+0x18>)
  401cf8:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  401cfa:	4620      	mov	r0, r4
  401cfc:	4b03      	ldr	r3, [pc, #12]	; (401d0c <stdio_redirect_init+0x1c>)
  401cfe:	4798      	blx	r3
  401d00:	bd10      	pop	{r4, pc}
  401d02:	bf00      	nop
  401d04:	20400320 	.word	0x20400320
  401d08:	00400efd 	.word	0x00400efd
  401d0c:	00401c7d 	.word	0x00401c7d

00401d10 <sin>:
  401d10:	b530      	push	{r4, r5, lr}
  401d12:	4a1f      	ldr	r2, [pc, #124]	; (401d90 <sin+0x80>)
  401d14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  401d18:	4293      	cmp	r3, r2
  401d1a:	b087      	sub	sp, #28
  401d1c:	dd1b      	ble.n	401d56 <sin+0x46>
  401d1e:	4a1d      	ldr	r2, [pc, #116]	; (401d94 <sin+0x84>)
  401d20:	4293      	cmp	r3, r2
  401d22:	dd05      	ble.n	401d30 <sin+0x20>
  401d24:	4602      	mov	r2, r0
  401d26:	460b      	mov	r3, r1
  401d28:	f001 f998 	bl	40305c <__aeabi_dsub>
  401d2c:	b007      	add	sp, #28
  401d2e:	bd30      	pop	{r4, r5, pc}
  401d30:	aa02      	add	r2, sp, #8
  401d32:	f000 f831 	bl	401d98 <__ieee754_rem_pio2>
  401d36:	f000 0003 	and.w	r0, r0, #3
  401d3a:	2801      	cmp	r0, #1
  401d3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  401d40:	d01a      	beq.n	401d78 <sin+0x68>
  401d42:	2802      	cmp	r0, #2
  401d44:	d00f      	beq.n	401d66 <sin+0x56>
  401d46:	b1e0      	cbz	r0, 401d82 <sin+0x72>
  401d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401d4c:	f000 fa48 	bl	4021e0 <__kernel_cos>
  401d50:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  401d54:	e7ea      	b.n	401d2c <sin+0x1c>
  401d56:	2300      	movs	r3, #0
  401d58:	9300      	str	r3, [sp, #0]
  401d5a:	2200      	movs	r2, #0
  401d5c:	2300      	movs	r3, #0
  401d5e:	f000 ffab 	bl	402cb8 <__kernel_sin>
  401d62:	b007      	add	sp, #28
  401d64:	bd30      	pop	{r4, r5, pc}
  401d66:	2401      	movs	r4, #1
  401d68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401d6c:	9400      	str	r4, [sp, #0]
  401d6e:	f000 ffa3 	bl	402cb8 <__kernel_sin>
  401d72:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  401d76:	e7d9      	b.n	401d2c <sin+0x1c>
  401d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401d7c:	f000 fa30 	bl	4021e0 <__kernel_cos>
  401d80:	e7d4      	b.n	401d2c <sin+0x1c>
  401d82:	2401      	movs	r4, #1
  401d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401d88:	9400      	str	r4, [sp, #0]
  401d8a:	f000 ff95 	bl	402cb8 <__kernel_sin>
  401d8e:	e7cd      	b.n	401d2c <sin+0x1c>
  401d90:	3fe921fb 	.word	0x3fe921fb
  401d94:	7fefffff 	.word	0x7fefffff

00401d98 <__ieee754_rem_pio2>:
  401d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d9c:	4e9a      	ldr	r6, [pc, #616]	; (402008 <__ieee754_rem_pio2+0x270>)
  401d9e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  401da2:	42b7      	cmp	r7, r6
  401da4:	b091      	sub	sp, #68	; 0x44
  401da6:	f340 808e 	ble.w	401ec6 <__ieee754_rem_pio2+0x12e>
  401daa:	4692      	mov	sl, r2
  401dac:	4a97      	ldr	r2, [pc, #604]	; (40200c <__ieee754_rem_pio2+0x274>)
  401dae:	4297      	cmp	r7, r2
  401db0:	460c      	mov	r4, r1
  401db2:	dc26      	bgt.n	401e02 <__ieee754_rem_pio2+0x6a>
  401db4:	2900      	cmp	r1, #0
  401db6:	a38a      	add	r3, pc, #552	; (adr r3, 401fe0 <__ieee754_rem_pio2+0x248>)
  401db8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401dbc:	f340 81b4 	ble.w	402128 <__ieee754_rem_pio2+0x390>
  401dc0:	f001 f94c 	bl	40305c <__aeabi_dsub>
  401dc4:	4b92      	ldr	r3, [pc, #584]	; (402010 <__ieee754_rem_pio2+0x278>)
  401dc6:	429f      	cmp	r7, r3
  401dc8:	4604      	mov	r4, r0
  401dca:	460d      	mov	r5, r1
  401dcc:	f000 8090 	beq.w	401ef0 <__ieee754_rem_pio2+0x158>
  401dd0:	a385      	add	r3, pc, #532	; (adr r3, 401fe8 <__ieee754_rem_pio2+0x250>)
  401dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  401dd6:	f001 f941 	bl	40305c <__aeabi_dsub>
  401dda:	4602      	mov	r2, r0
  401ddc:	460b      	mov	r3, r1
  401dde:	e9ca 2300 	strd	r2, r3, [sl]
  401de2:	4620      	mov	r0, r4
  401de4:	4629      	mov	r1, r5
  401de6:	f001 f939 	bl	40305c <__aeabi_dsub>
  401dea:	a37f      	add	r3, pc, #508	; (adr r3, 401fe8 <__ieee754_rem_pio2+0x250>)
  401dec:	e9d3 2300 	ldrd	r2, r3, [r3]
  401df0:	f001 f934 	bl	40305c <__aeabi_dsub>
  401df4:	2501      	movs	r5, #1
  401df6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  401dfa:	4628      	mov	r0, r5
  401dfc:	b011      	add	sp, #68	; 0x44
  401dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e02:	4a84      	ldr	r2, [pc, #528]	; (402014 <__ieee754_rem_pio2+0x27c>)
  401e04:	4297      	cmp	r7, r2
  401e06:	f340 8090 	ble.w	401f2a <__ieee754_rem_pio2+0x192>
  401e0a:	4a83      	ldr	r2, [pc, #524]	; (402018 <__ieee754_rem_pio2+0x280>)
  401e0c:	4297      	cmp	r7, r2
  401e0e:	dc65      	bgt.n	401edc <__ieee754_rem_pio2+0x144>
  401e10:	153d      	asrs	r5, r7, #20
  401e12:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  401e16:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  401e1a:	4619      	mov	r1, r3
  401e1c:	461f      	mov	r7, r3
  401e1e:	4606      	mov	r6, r0
  401e20:	f001 fd6a 	bl	4038f8 <__aeabi_d2iz>
  401e24:	f001 fa68 	bl	4032f8 <__aeabi_i2d>
  401e28:	4680      	mov	r8, r0
  401e2a:	4689      	mov	r9, r1
  401e2c:	4602      	mov	r2, r0
  401e2e:	460b      	mov	r3, r1
  401e30:	4630      	mov	r0, r6
  401e32:	4639      	mov	r1, r7
  401e34:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  401e38:	f001 f910 	bl	40305c <__aeabi_dsub>
  401e3c:	2200      	movs	r2, #0
  401e3e:	4b77      	ldr	r3, [pc, #476]	; (40201c <__ieee754_rem_pio2+0x284>)
  401e40:	f001 fac0 	bl	4033c4 <__aeabi_dmul>
  401e44:	4689      	mov	r9, r1
  401e46:	4680      	mov	r8, r0
  401e48:	f001 fd56 	bl	4038f8 <__aeabi_d2iz>
  401e4c:	f001 fa54 	bl	4032f8 <__aeabi_i2d>
  401e50:	4602      	mov	r2, r0
  401e52:	460b      	mov	r3, r1
  401e54:	4606      	mov	r6, r0
  401e56:	460f      	mov	r7, r1
  401e58:	4640      	mov	r0, r8
  401e5a:	4649      	mov	r1, r9
  401e5c:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  401e60:	f001 f8fc 	bl	40305c <__aeabi_dsub>
  401e64:	2200      	movs	r2, #0
  401e66:	4b6d      	ldr	r3, [pc, #436]	; (40201c <__ieee754_rem_pio2+0x284>)
  401e68:	f001 faac 	bl	4033c4 <__aeabi_dmul>
  401e6c:	2200      	movs	r2, #0
  401e6e:	2300      	movs	r3, #0
  401e70:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  401e74:	f001 fd0e 	bl	403894 <__aeabi_dcmpeq>
  401e78:	2800      	cmp	r0, #0
  401e7a:	f000 8173 	beq.w	402164 <__ieee754_rem_pio2+0x3cc>
  401e7e:	2300      	movs	r3, #0
  401e80:	4630      	mov	r0, r6
  401e82:	4639      	mov	r1, r7
  401e84:	2200      	movs	r2, #0
  401e86:	f001 fd05 	bl	403894 <__aeabi_dcmpeq>
  401e8a:	2800      	cmp	r0, #0
  401e8c:	bf14      	ite	ne
  401e8e:	2301      	movne	r3, #1
  401e90:	2302      	moveq	r3, #2
  401e92:	4a63      	ldr	r2, [pc, #396]	; (402020 <__ieee754_rem_pio2+0x288>)
  401e94:	9201      	str	r2, [sp, #4]
  401e96:	2102      	movs	r1, #2
  401e98:	462a      	mov	r2, r5
  401e9a:	9100      	str	r1, [sp, #0]
  401e9c:	a80a      	add	r0, sp, #40	; 0x28
  401e9e:	4651      	mov	r1, sl
  401ea0:	f000 fac2 	bl	402428 <__kernel_rem_pio2>
  401ea4:	2c00      	cmp	r4, #0
  401ea6:	4605      	mov	r5, r0
  401ea8:	da14      	bge.n	401ed4 <__ieee754_rem_pio2+0x13c>
  401eaa:	f8da 2004 	ldr.w	r2, [sl, #4]
  401eae:	f8da 300c 	ldr.w	r3, [sl, #12]
  401eb2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  401eb6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  401eba:	4245      	negs	r5, r0
  401ebc:	f8ca 2004 	str.w	r2, [sl, #4]
  401ec0:	f8ca 300c 	str.w	r3, [sl, #12]
  401ec4:	e006      	b.n	401ed4 <__ieee754_rem_pio2+0x13c>
  401ec6:	e9c2 0100 	strd	r0, r1, [r2]
  401eca:	2500      	movs	r5, #0
  401ecc:	2400      	movs	r4, #0
  401ece:	e9c2 4502 	strd	r4, r5, [r2, #8]
  401ed2:	2500      	movs	r5, #0
  401ed4:	4628      	mov	r0, r5
  401ed6:	b011      	add	sp, #68	; 0x44
  401ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401edc:	4602      	mov	r2, r0
  401ede:	460b      	mov	r3, r1
  401ee0:	f001 f8bc 	bl	40305c <__aeabi_dsub>
  401ee4:	2500      	movs	r5, #0
  401ee6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  401eea:	e9ca 0100 	strd	r0, r1, [sl]
  401eee:	e7f1      	b.n	401ed4 <__ieee754_rem_pio2+0x13c>
  401ef0:	a33f      	add	r3, pc, #252	; (adr r3, 401ff0 <__ieee754_rem_pio2+0x258>)
  401ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ef6:	f001 f8b1 	bl	40305c <__aeabi_dsub>
  401efa:	a33f      	add	r3, pc, #252	; (adr r3, 401ff8 <__ieee754_rem_pio2+0x260>)
  401efc:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f00:	460d      	mov	r5, r1
  401f02:	4604      	mov	r4, r0
  401f04:	f001 f8aa 	bl	40305c <__aeabi_dsub>
  401f08:	4602      	mov	r2, r0
  401f0a:	460b      	mov	r3, r1
  401f0c:	e9ca 2300 	strd	r2, r3, [sl]
  401f10:	4629      	mov	r1, r5
  401f12:	4620      	mov	r0, r4
  401f14:	f001 f8a2 	bl	40305c <__aeabi_dsub>
  401f18:	a337      	add	r3, pc, #220	; (adr r3, 401ff8 <__ieee754_rem_pio2+0x260>)
  401f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f1e:	f001 f89d 	bl	40305c <__aeabi_dsub>
  401f22:	2501      	movs	r5, #1
  401f24:	e9ca 0102 	strd	r0, r1, [sl, #8]
  401f28:	e7d4      	b.n	401ed4 <__ieee754_rem_pio2+0x13c>
  401f2a:	f000 ff7b 	bl	402e24 <fabs>
  401f2e:	a334      	add	r3, pc, #208	; (adr r3, 402000 <__ieee754_rem_pio2+0x268>)
  401f30:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f34:	4680      	mov	r8, r0
  401f36:	4689      	mov	r9, r1
  401f38:	f001 fa44 	bl	4033c4 <__aeabi_dmul>
  401f3c:	2200      	movs	r2, #0
  401f3e:	4b39      	ldr	r3, [pc, #228]	; (402024 <__ieee754_rem_pio2+0x28c>)
  401f40:	f001 f88e 	bl	403060 <__adddf3>
  401f44:	f001 fcd8 	bl	4038f8 <__aeabi_d2iz>
  401f48:	4605      	mov	r5, r0
  401f4a:	f001 f9d5 	bl	4032f8 <__aeabi_i2d>
  401f4e:	a324      	add	r3, pc, #144	; (adr r3, 401fe0 <__ieee754_rem_pio2+0x248>)
  401f50:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f54:	e9cd 0104 	strd	r0, r1, [sp, #16]
  401f58:	f001 fa34 	bl	4033c4 <__aeabi_dmul>
  401f5c:	4602      	mov	r2, r0
  401f5e:	460b      	mov	r3, r1
  401f60:	4640      	mov	r0, r8
  401f62:	4649      	mov	r1, r9
  401f64:	f001 f87a 	bl	40305c <__aeabi_dsub>
  401f68:	a31f      	add	r3, pc, #124	; (adr r3, 401fe8 <__ieee754_rem_pio2+0x250>)
  401f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f6e:	4680      	mov	r8, r0
  401f70:	4689      	mov	r9, r1
  401f72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  401f76:	f001 fa25 	bl	4033c4 <__aeabi_dmul>
  401f7a:	2d1f      	cmp	r5, #31
  401f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401f80:	dc54      	bgt.n	40202c <__ieee754_rem_pio2+0x294>
  401f82:	4b29      	ldr	r3, [pc, #164]	; (402028 <__ieee754_rem_pio2+0x290>)
  401f84:	1e6a      	subs	r2, r5, #1
  401f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401f8a:	429f      	cmp	r7, r3
  401f8c:	d04e      	beq.n	40202c <__ieee754_rem_pio2+0x294>
  401f8e:	4602      	mov	r2, r0
  401f90:	460b      	mov	r3, r1
  401f92:	4640      	mov	r0, r8
  401f94:	4649      	mov	r1, r9
  401f96:	f001 f861 	bl	40305c <__aeabi_dsub>
  401f9a:	4602      	mov	r2, r0
  401f9c:	460b      	mov	r3, r1
  401f9e:	e9ca 2300 	strd	r2, r3, [sl]
  401fa2:	4683      	mov	fp, r0
  401fa4:	460e      	mov	r6, r1
  401fa6:	465a      	mov	r2, fp
  401fa8:	4633      	mov	r3, r6
  401faa:	4640      	mov	r0, r8
  401fac:	4649      	mov	r1, r9
  401fae:	f001 f855 	bl	40305c <__aeabi_dsub>
  401fb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401fb6:	f001 f851 	bl	40305c <__aeabi_dsub>
  401fba:	2c00      	cmp	r4, #0
  401fbc:	4602      	mov	r2, r0
  401fbe:	460b      	mov	r3, r1
  401fc0:	e9ca 2302 	strd	r2, r3, [sl, #8]
  401fc4:	da86      	bge.n	401ed4 <__ieee754_rem_pio2+0x13c>
  401fc6:	465b      	mov	r3, fp
  401fc8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  401fcc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  401fd0:	e88a 0048 	stmia.w	sl, {r3, r6}
  401fd4:	f8ca 100c 	str.w	r1, [sl, #12]
  401fd8:	f8ca 0008 	str.w	r0, [sl, #8]
  401fdc:	426d      	negs	r5, r5
  401fde:	e779      	b.n	401ed4 <__ieee754_rem_pio2+0x13c>
  401fe0:	54400000 	.word	0x54400000
  401fe4:	3ff921fb 	.word	0x3ff921fb
  401fe8:	1a626331 	.word	0x1a626331
  401fec:	3dd0b461 	.word	0x3dd0b461
  401ff0:	1a600000 	.word	0x1a600000
  401ff4:	3dd0b461 	.word	0x3dd0b461
  401ff8:	2e037073 	.word	0x2e037073
  401ffc:	3ba3198a 	.word	0x3ba3198a
  402000:	6dc9c883 	.word	0x6dc9c883
  402004:	3fe45f30 	.word	0x3fe45f30
  402008:	3fe921fb 	.word	0x3fe921fb
  40200c:	4002d97b 	.word	0x4002d97b
  402010:	3ff921fb 	.word	0x3ff921fb
  402014:	413921fb 	.word	0x413921fb
  402018:	7fefffff 	.word	0x7fefffff
  40201c:	41700000 	.word	0x41700000
  402020:	0040677c 	.word	0x0040677c
  402024:	3fe00000 	.word	0x3fe00000
  402028:	004066fc 	.word	0x004066fc
  40202c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402030:	4640      	mov	r0, r8
  402032:	4649      	mov	r1, r9
  402034:	f001 f812 	bl	40305c <__aeabi_dsub>
  402038:	153a      	asrs	r2, r7, #20
  40203a:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40203e:	1ad3      	subs	r3, r2, r3
  402040:	2b10      	cmp	r3, #16
  402042:	4683      	mov	fp, r0
  402044:	460e      	mov	r6, r1
  402046:	9209      	str	r2, [sp, #36]	; 0x24
  402048:	e9ca 0100 	strd	r0, r1, [sl]
  40204c:	ddab      	ble.n	401fa6 <__ieee754_rem_pio2+0x20e>
  40204e:	a358      	add	r3, pc, #352	; (adr r3, 4021b0 <__ieee754_rem_pio2+0x418>)
  402050:	e9d3 2300 	ldrd	r2, r3, [r3]
  402054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402058:	f001 f9b4 	bl	4033c4 <__aeabi_dmul>
  40205c:	4606      	mov	r6, r0
  40205e:	460f      	mov	r7, r1
  402060:	4602      	mov	r2, r0
  402062:	460b      	mov	r3, r1
  402064:	4640      	mov	r0, r8
  402066:	4649      	mov	r1, r9
  402068:	f000 fff8 	bl	40305c <__aeabi_dsub>
  40206c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  402070:	4602      	mov	r2, r0
  402072:	460b      	mov	r3, r1
  402074:	4640      	mov	r0, r8
  402076:	4649      	mov	r1, r9
  402078:	f000 fff0 	bl	40305c <__aeabi_dsub>
  40207c:	4632      	mov	r2, r6
  40207e:	463b      	mov	r3, r7
  402080:	f000 ffec 	bl	40305c <__aeabi_dsub>
  402084:	a34c      	add	r3, pc, #304	; (adr r3, 4021b8 <__ieee754_rem_pio2+0x420>)
  402086:	e9d3 2300 	ldrd	r2, r3, [r3]
  40208a:	4606      	mov	r6, r0
  40208c:	460f      	mov	r7, r1
  40208e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402092:	f001 f997 	bl	4033c4 <__aeabi_dmul>
  402096:	4632      	mov	r2, r6
  402098:	463b      	mov	r3, r7
  40209a:	f000 ffdf 	bl	40305c <__aeabi_dsub>
  40209e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4020a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4020a6:	4602      	mov	r2, r0
  4020a8:	460b      	mov	r3, r1
  4020aa:	4640      	mov	r0, r8
  4020ac:	4649      	mov	r1, r9
  4020ae:	f000 ffd5 	bl	40305c <__aeabi_dsub>
  4020b2:	460b      	mov	r3, r1
  4020b4:	f3c1 570a 	ubfx	r7, r1, #20, #11
  4020b8:	460e      	mov	r6, r1
  4020ba:	9909      	ldr	r1, [sp, #36]	; 0x24
  4020bc:	1bcf      	subs	r7, r1, r7
  4020be:	4602      	mov	r2, r0
  4020c0:	2f31      	cmp	r7, #49	; 0x31
  4020c2:	4683      	mov	fp, r0
  4020c4:	e9ca 2300 	strd	r2, r3, [sl]
  4020c8:	dd6c      	ble.n	4021a4 <__ieee754_rem_pio2+0x40c>
  4020ca:	a33d      	add	r3, pc, #244	; (adr r3, 4021c0 <__ieee754_rem_pio2+0x428>)
  4020cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4020d4:	f001 f976 	bl	4033c4 <__aeabi_dmul>
  4020d8:	4606      	mov	r6, r0
  4020da:	460f      	mov	r7, r1
  4020dc:	4602      	mov	r2, r0
  4020de:	460b      	mov	r3, r1
  4020e0:	4640      	mov	r0, r8
  4020e2:	4649      	mov	r1, r9
  4020e4:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4020e8:	f000 ffb8 	bl	40305c <__aeabi_dsub>
  4020ec:	4602      	mov	r2, r0
  4020ee:	460b      	mov	r3, r1
  4020f0:	4680      	mov	r8, r0
  4020f2:	4689      	mov	r9, r1
  4020f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4020f8:	f000 ffb0 	bl	40305c <__aeabi_dsub>
  4020fc:	4632      	mov	r2, r6
  4020fe:	463b      	mov	r3, r7
  402100:	f000 ffac 	bl	40305c <__aeabi_dsub>
  402104:	a330      	add	r3, pc, #192	; (adr r3, 4021c8 <__ieee754_rem_pio2+0x430>)
  402106:	e9d3 2300 	ldrd	r2, r3, [r3]
  40210a:	4606      	mov	r6, r0
  40210c:	460f      	mov	r7, r1
  40210e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402112:	f001 f957 	bl	4033c4 <__aeabi_dmul>
  402116:	4632      	mov	r2, r6
  402118:	463b      	mov	r3, r7
  40211a:	f000 ff9f 	bl	40305c <__aeabi_dsub>
  40211e:	4602      	mov	r2, r0
  402120:	460b      	mov	r3, r1
  402122:	e9cd 2302 	strd	r2, r3, [sp, #8]
  402126:	e734      	b.n	401f92 <__ieee754_rem_pio2+0x1fa>
  402128:	f000 ff9a 	bl	403060 <__adddf3>
  40212c:	4b2a      	ldr	r3, [pc, #168]	; (4021d8 <__ieee754_rem_pio2+0x440>)
  40212e:	429f      	cmp	r7, r3
  402130:	4604      	mov	r4, r0
  402132:	460d      	mov	r5, r1
  402134:	d018      	beq.n	402168 <__ieee754_rem_pio2+0x3d0>
  402136:	a326      	add	r3, pc, #152	; (adr r3, 4021d0 <__ieee754_rem_pio2+0x438>)
  402138:	e9d3 2300 	ldrd	r2, r3, [r3]
  40213c:	f000 ff90 	bl	403060 <__adddf3>
  402140:	4602      	mov	r2, r0
  402142:	460b      	mov	r3, r1
  402144:	e9ca 2300 	strd	r2, r3, [sl]
  402148:	4629      	mov	r1, r5
  40214a:	4620      	mov	r0, r4
  40214c:	f000 ff86 	bl	40305c <__aeabi_dsub>
  402150:	a31f      	add	r3, pc, #124	; (adr r3, 4021d0 <__ieee754_rem_pio2+0x438>)
  402152:	e9d3 2300 	ldrd	r2, r3, [r3]
  402156:	f000 ff83 	bl	403060 <__adddf3>
  40215a:	f04f 35ff 	mov.w	r5, #4294967295
  40215e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  402162:	e6b7      	b.n	401ed4 <__ieee754_rem_pio2+0x13c>
  402164:	2303      	movs	r3, #3
  402166:	e694      	b.n	401e92 <__ieee754_rem_pio2+0xfa>
  402168:	a311      	add	r3, pc, #68	; (adr r3, 4021b0 <__ieee754_rem_pio2+0x418>)
  40216a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40216e:	f000 ff77 	bl	403060 <__adddf3>
  402172:	a311      	add	r3, pc, #68	; (adr r3, 4021b8 <__ieee754_rem_pio2+0x420>)
  402174:	e9d3 2300 	ldrd	r2, r3, [r3]
  402178:	460d      	mov	r5, r1
  40217a:	4604      	mov	r4, r0
  40217c:	f000 ff70 	bl	403060 <__adddf3>
  402180:	4602      	mov	r2, r0
  402182:	460b      	mov	r3, r1
  402184:	e9ca 2300 	strd	r2, r3, [sl]
  402188:	4629      	mov	r1, r5
  40218a:	4620      	mov	r0, r4
  40218c:	f000 ff66 	bl	40305c <__aeabi_dsub>
  402190:	a309      	add	r3, pc, #36	; (adr r3, 4021b8 <__ieee754_rem_pio2+0x420>)
  402192:	e9d3 2300 	ldrd	r2, r3, [r3]
  402196:	f000 ff63 	bl	403060 <__adddf3>
  40219a:	f04f 35ff 	mov.w	r5, #4294967295
  40219e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4021a2:	e697      	b.n	401ed4 <__ieee754_rem_pio2+0x13c>
  4021a4:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4021a8:	e6fd      	b.n	401fa6 <__ieee754_rem_pio2+0x20e>
  4021aa:	bf00      	nop
  4021ac:	f3af 8000 	nop.w
  4021b0:	1a600000 	.word	0x1a600000
  4021b4:	3dd0b461 	.word	0x3dd0b461
  4021b8:	2e037073 	.word	0x2e037073
  4021bc:	3ba3198a 	.word	0x3ba3198a
  4021c0:	2e000000 	.word	0x2e000000
  4021c4:	3ba3198a 	.word	0x3ba3198a
  4021c8:	252049c1 	.word	0x252049c1
  4021cc:	397b839a 	.word	0x397b839a
  4021d0:	1a626331 	.word	0x1a626331
  4021d4:	3dd0b461 	.word	0x3dd0b461
  4021d8:	3ff921fb 	.word	0x3ff921fb
  4021dc:	00000000 	.word	0x00000000

004021e0 <__kernel_cos>:
  4021e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021e4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4021e8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  4021ec:	b085      	sub	sp, #20
  4021ee:	460c      	mov	r4, r1
  4021f0:	4692      	mov	sl, r2
  4021f2:	469b      	mov	fp, r3
  4021f4:	4605      	mov	r5, r0
  4021f6:	da6b      	bge.n	4022d0 <__kernel_cos+0xf0>
  4021f8:	f001 fb7e 	bl	4038f8 <__aeabi_d2iz>
  4021fc:	2800      	cmp	r0, #0
  4021fe:	f000 80e8 	beq.w	4023d2 <__kernel_cos+0x1f2>
  402202:	462a      	mov	r2, r5
  402204:	4623      	mov	r3, r4
  402206:	4628      	mov	r0, r5
  402208:	4621      	mov	r1, r4
  40220a:	f001 f8db 	bl	4033c4 <__aeabi_dmul>
  40220e:	a374      	add	r3, pc, #464	; (adr r3, 4023e0 <__kernel_cos+0x200>)
  402210:	e9d3 2300 	ldrd	r2, r3, [r3]
  402214:	4680      	mov	r8, r0
  402216:	4689      	mov	r9, r1
  402218:	f001 f8d4 	bl	4033c4 <__aeabi_dmul>
  40221c:	a372      	add	r3, pc, #456	; (adr r3, 4023e8 <__kernel_cos+0x208>)
  40221e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402222:	f000 ff1d 	bl	403060 <__adddf3>
  402226:	4642      	mov	r2, r8
  402228:	464b      	mov	r3, r9
  40222a:	f001 f8cb 	bl	4033c4 <__aeabi_dmul>
  40222e:	a370      	add	r3, pc, #448	; (adr r3, 4023f0 <__kernel_cos+0x210>)
  402230:	e9d3 2300 	ldrd	r2, r3, [r3]
  402234:	f000 ff12 	bl	40305c <__aeabi_dsub>
  402238:	4642      	mov	r2, r8
  40223a:	464b      	mov	r3, r9
  40223c:	f001 f8c2 	bl	4033c4 <__aeabi_dmul>
  402240:	a36d      	add	r3, pc, #436	; (adr r3, 4023f8 <__kernel_cos+0x218>)
  402242:	e9d3 2300 	ldrd	r2, r3, [r3]
  402246:	f000 ff0b 	bl	403060 <__adddf3>
  40224a:	4642      	mov	r2, r8
  40224c:	464b      	mov	r3, r9
  40224e:	f001 f8b9 	bl	4033c4 <__aeabi_dmul>
  402252:	a36b      	add	r3, pc, #428	; (adr r3, 402400 <__kernel_cos+0x220>)
  402254:	e9d3 2300 	ldrd	r2, r3, [r3]
  402258:	f000 ff00 	bl	40305c <__aeabi_dsub>
  40225c:	4642      	mov	r2, r8
  40225e:	464b      	mov	r3, r9
  402260:	f001 f8b0 	bl	4033c4 <__aeabi_dmul>
  402264:	a368      	add	r3, pc, #416	; (adr r3, 402408 <__kernel_cos+0x228>)
  402266:	e9d3 2300 	ldrd	r2, r3, [r3]
  40226a:	f000 fef9 	bl	403060 <__adddf3>
  40226e:	4642      	mov	r2, r8
  402270:	464b      	mov	r3, r9
  402272:	f001 f8a7 	bl	4033c4 <__aeabi_dmul>
  402276:	e9cd 0100 	strd	r0, r1, [sp]
  40227a:	2200      	movs	r2, #0
  40227c:	4b64      	ldr	r3, [pc, #400]	; (402410 <__kernel_cos+0x230>)
  40227e:	4640      	mov	r0, r8
  402280:	4649      	mov	r1, r9
  402282:	f001 f89f 	bl	4033c4 <__aeabi_dmul>
  402286:	e9dd 2300 	ldrd	r2, r3, [sp]
  40228a:	4606      	mov	r6, r0
  40228c:	460f      	mov	r7, r1
  40228e:	4640      	mov	r0, r8
  402290:	4649      	mov	r1, r9
  402292:	f001 f897 	bl	4033c4 <__aeabi_dmul>
  402296:	4652      	mov	r2, sl
  402298:	4680      	mov	r8, r0
  40229a:	4689      	mov	r9, r1
  40229c:	465b      	mov	r3, fp
  40229e:	4628      	mov	r0, r5
  4022a0:	4621      	mov	r1, r4
  4022a2:	f001 f88f 	bl	4033c4 <__aeabi_dmul>
  4022a6:	4602      	mov	r2, r0
  4022a8:	460b      	mov	r3, r1
  4022aa:	4640      	mov	r0, r8
  4022ac:	4649      	mov	r1, r9
  4022ae:	f000 fed5 	bl	40305c <__aeabi_dsub>
  4022b2:	4602      	mov	r2, r0
  4022b4:	460b      	mov	r3, r1
  4022b6:	4630      	mov	r0, r6
  4022b8:	4639      	mov	r1, r7
  4022ba:	f000 fecf 	bl	40305c <__aeabi_dsub>
  4022be:	4602      	mov	r2, r0
  4022c0:	460b      	mov	r3, r1
  4022c2:	2000      	movs	r0, #0
  4022c4:	4953      	ldr	r1, [pc, #332]	; (402414 <__kernel_cos+0x234>)
  4022c6:	f000 fec9 	bl	40305c <__aeabi_dsub>
  4022ca:	b005      	add	sp, #20
  4022cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022d0:	4602      	mov	r2, r0
  4022d2:	460b      	mov	r3, r1
  4022d4:	f001 f876 	bl	4033c4 <__aeabi_dmul>
  4022d8:	a341      	add	r3, pc, #260	; (adr r3, 4023e0 <__kernel_cos+0x200>)
  4022da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022de:	4680      	mov	r8, r0
  4022e0:	4689      	mov	r9, r1
  4022e2:	f001 f86f 	bl	4033c4 <__aeabi_dmul>
  4022e6:	a340      	add	r3, pc, #256	; (adr r3, 4023e8 <__kernel_cos+0x208>)
  4022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022ec:	f000 feb8 	bl	403060 <__adddf3>
  4022f0:	4642      	mov	r2, r8
  4022f2:	464b      	mov	r3, r9
  4022f4:	f001 f866 	bl	4033c4 <__aeabi_dmul>
  4022f8:	a33d      	add	r3, pc, #244	; (adr r3, 4023f0 <__kernel_cos+0x210>)
  4022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022fe:	f000 fead 	bl	40305c <__aeabi_dsub>
  402302:	4642      	mov	r2, r8
  402304:	464b      	mov	r3, r9
  402306:	f001 f85d 	bl	4033c4 <__aeabi_dmul>
  40230a:	a33b      	add	r3, pc, #236	; (adr r3, 4023f8 <__kernel_cos+0x218>)
  40230c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402310:	f000 fea6 	bl	403060 <__adddf3>
  402314:	4642      	mov	r2, r8
  402316:	464b      	mov	r3, r9
  402318:	f001 f854 	bl	4033c4 <__aeabi_dmul>
  40231c:	a338      	add	r3, pc, #224	; (adr r3, 402400 <__kernel_cos+0x220>)
  40231e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402322:	f000 fe9b 	bl	40305c <__aeabi_dsub>
  402326:	4642      	mov	r2, r8
  402328:	464b      	mov	r3, r9
  40232a:	f001 f84b 	bl	4033c4 <__aeabi_dmul>
  40232e:	a336      	add	r3, pc, #216	; (adr r3, 402408 <__kernel_cos+0x228>)
  402330:	e9d3 2300 	ldrd	r2, r3, [r3]
  402334:	f000 fe94 	bl	403060 <__adddf3>
  402338:	464b      	mov	r3, r9
  40233a:	4642      	mov	r2, r8
  40233c:	f001 f842 	bl	4033c4 <__aeabi_dmul>
  402340:	4b35      	ldr	r3, [pc, #212]	; (402418 <__kernel_cos+0x238>)
  402342:	429e      	cmp	r6, r3
  402344:	e9cd 0100 	strd	r0, r1, [sp]
  402348:	dd97      	ble.n	40227a <__kernel_cos+0x9a>
  40234a:	4b34      	ldr	r3, [pc, #208]	; (40241c <__kernel_cos+0x23c>)
  40234c:	429e      	cmp	r6, r3
  40234e:	f04f 0200 	mov.w	r2, #0
  402352:	dc38      	bgt.n	4023c6 <__kernel_cos+0x1e6>
  402354:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  402358:	2000      	movs	r0, #0
  40235a:	492e      	ldr	r1, [pc, #184]	; (402414 <__kernel_cos+0x234>)
  40235c:	4616      	mov	r6, r2
  40235e:	461f      	mov	r7, r3
  402360:	f000 fe7c 	bl	40305c <__aeabi_dsub>
  402364:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402368:	2200      	movs	r2, #0
  40236a:	4b29      	ldr	r3, [pc, #164]	; (402410 <__kernel_cos+0x230>)
  40236c:	4640      	mov	r0, r8
  40236e:	4649      	mov	r1, r9
  402370:	f001 f828 	bl	4033c4 <__aeabi_dmul>
  402374:	4632      	mov	r2, r6
  402376:	463b      	mov	r3, r7
  402378:	f000 fe70 	bl	40305c <__aeabi_dsub>
  40237c:	e9dd 2300 	ldrd	r2, r3, [sp]
  402380:	4606      	mov	r6, r0
  402382:	460f      	mov	r7, r1
  402384:	4640      	mov	r0, r8
  402386:	4649      	mov	r1, r9
  402388:	f001 f81c 	bl	4033c4 <__aeabi_dmul>
  40238c:	4652      	mov	r2, sl
  40238e:	4680      	mov	r8, r0
  402390:	4689      	mov	r9, r1
  402392:	465b      	mov	r3, fp
  402394:	4628      	mov	r0, r5
  402396:	4621      	mov	r1, r4
  402398:	f001 f814 	bl	4033c4 <__aeabi_dmul>
  40239c:	4602      	mov	r2, r0
  40239e:	460b      	mov	r3, r1
  4023a0:	4640      	mov	r0, r8
  4023a2:	4649      	mov	r1, r9
  4023a4:	f000 fe5a 	bl	40305c <__aeabi_dsub>
  4023a8:	4602      	mov	r2, r0
  4023aa:	460b      	mov	r3, r1
  4023ac:	4630      	mov	r0, r6
  4023ae:	4639      	mov	r1, r7
  4023b0:	f000 fe54 	bl	40305c <__aeabi_dsub>
  4023b4:	4602      	mov	r2, r0
  4023b6:	460b      	mov	r3, r1
  4023b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4023bc:	f000 fe4e 	bl	40305c <__aeabi_dsub>
  4023c0:	b005      	add	sp, #20
  4023c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023c6:	4b16      	ldr	r3, [pc, #88]	; (402420 <__kernel_cos+0x240>)
  4023c8:	4f16      	ldr	r7, [pc, #88]	; (402424 <__kernel_cos+0x244>)
  4023ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4023ce:	2600      	movs	r6, #0
  4023d0:	e7ca      	b.n	402368 <__kernel_cos+0x188>
  4023d2:	4910      	ldr	r1, [pc, #64]	; (402414 <__kernel_cos+0x234>)
  4023d4:	2000      	movs	r0, #0
  4023d6:	b005      	add	sp, #20
  4023d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023dc:	f3af 8000 	nop.w
  4023e0:	be8838d4 	.word	0xbe8838d4
  4023e4:	bda8fae9 	.word	0xbda8fae9
  4023e8:	bdb4b1c4 	.word	0xbdb4b1c4
  4023ec:	3e21ee9e 	.word	0x3e21ee9e
  4023f0:	809c52ad 	.word	0x809c52ad
  4023f4:	3e927e4f 	.word	0x3e927e4f
  4023f8:	19cb1590 	.word	0x19cb1590
  4023fc:	3efa01a0 	.word	0x3efa01a0
  402400:	16c15177 	.word	0x16c15177
  402404:	3f56c16c 	.word	0x3f56c16c
  402408:	5555554c 	.word	0x5555554c
  40240c:	3fa55555 	.word	0x3fa55555
  402410:	3fe00000 	.word	0x3fe00000
  402414:	3ff00000 	.word	0x3ff00000
  402418:	3fd33332 	.word	0x3fd33332
  40241c:	3fe90000 	.word	0x3fe90000
  402420:	3fe70000 	.word	0x3fe70000
  402424:	3fd20000 	.word	0x3fd20000

00402428 <__kernel_rem_pio2>:
  402428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40242c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
  402430:	4c9c      	ldr	r4, [pc, #624]	; (4026a4 <__kernel_rem_pio2+0x27c>)
  402432:	9ea2      	ldr	r6, [sp, #648]	; 0x288
  402434:	4d9c      	ldr	r5, [pc, #624]	; (4026a8 <__kernel_rem_pio2+0x280>)
  402436:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  40243a:	9405      	str	r4, [sp, #20]
  40243c:	4626      	mov	r6, r4
  40243e:	1ed4      	subs	r4, r2, #3
  402440:	fb85 7504 	smull	r7, r5, r5, r4
  402444:	17e4      	asrs	r4, r4, #31
  402446:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  40244a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  40244e:	461d      	mov	r5, r3
  402450:	9308      	str	r3, [sp, #32]
  402452:	1c63      	adds	r3, r4, #1
  402454:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  402458:	3d01      	subs	r5, #1
  40245a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40245e:	9304      	str	r3, [sp, #16]
  402460:	462b      	mov	r3, r5
  402462:	9409      	str	r4, [sp, #36]	; 0x24
  402464:	9502      	str	r5, [sp, #8]
  402466:	1b65      	subs	r5, r4, r5
  402468:	18f4      	adds	r4, r6, r3
  40246a:	9003      	str	r0, [sp, #12]
  40246c:	9106      	str	r1, [sp, #24]
  40246e:	d41a      	bmi.n	4024a6 <__kernel_rem_pio2+0x7e>
  402470:	442c      	add	r4, r5
  402472:	3401      	adds	r4, #1
  402474:	f10d 0878 	add.w	r8, sp, #120	; 0x78
  402478:	2600      	movs	r6, #0
  40247a:	2700      	movs	r7, #0
  40247c:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
  402480:	e008      	b.n	402494 <__kernel_rem_pio2+0x6c>
  402482:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
  402486:	f000 ff37 	bl	4032f8 <__aeabi_i2d>
  40248a:	3501      	adds	r5, #1
  40248c:	42a5      	cmp	r5, r4
  40248e:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  402492:	d008      	beq.n	4024a6 <__kernel_rem_pio2+0x7e>
  402494:	2d00      	cmp	r5, #0
  402496:	daf4      	bge.n	402482 <__kernel_rem_pio2+0x5a>
  402498:	3501      	adds	r5, #1
  40249a:	4630      	mov	r0, r6
  40249c:	4639      	mov	r1, r7
  40249e:	42a5      	cmp	r5, r4
  4024a0:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  4024a4:	d1f6      	bne.n	402494 <__kernel_rem_pio2+0x6c>
  4024a6:	9b05      	ldr	r3, [sp, #20]
  4024a8:	2b00      	cmp	r3, #0
  4024aa:	db2e      	blt.n	40250a <__kernel_rem_pio2+0xe2>
  4024ac:	9b08      	ldr	r3, [sp, #32]
  4024ae:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  4024b2:	9b03      	ldr	r3, [sp, #12]
  4024b4:	f1a9 0808 	sub.w	r8, r9, #8
  4024b8:	4498      	add	r8, r3
  4024ba:	ab20      	add	r3, sp, #128	; 0x80
  4024bc:	4499      	add	r9, r3
  4024be:	9b05      	ldr	r3, [sp, #20]
  4024c0:	aa70      	add	r2, sp, #448	; 0x1c0
  4024c2:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
  4024c6:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  4024ca:	9b02      	ldr	r3, [sp, #8]
  4024cc:	2b00      	cmp	r3, #0
  4024ce:	f2c0 830f 	blt.w	402af0 <__kernel_rem_pio2+0x6c8>
  4024d2:	9b03      	ldr	r3, [sp, #12]
  4024d4:	464d      	mov	r5, r9
  4024d6:	f1a3 0408 	sub.w	r4, r3, #8
  4024da:	2600      	movs	r6, #0
  4024dc:	2700      	movs	r7, #0
  4024de:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  4024e2:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  4024e6:	f000 ff6d 	bl	4033c4 <__aeabi_dmul>
  4024ea:	4602      	mov	r2, r0
  4024ec:	460b      	mov	r3, r1
  4024ee:	4630      	mov	r0, r6
  4024f0:	4639      	mov	r1, r7
  4024f2:	f000 fdb5 	bl	403060 <__adddf3>
  4024f6:	4544      	cmp	r4, r8
  4024f8:	4606      	mov	r6, r0
  4024fa:	460f      	mov	r7, r1
  4024fc:	d1ef      	bne.n	4024de <__kernel_rem_pio2+0xb6>
  4024fe:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  402502:	45da      	cmp	sl, fp
  402504:	f109 0908 	add.w	r9, r9, #8
  402508:	d1df      	bne.n	4024ca <__kernel_rem_pio2+0xa2>
  40250a:	9805      	ldr	r0, [sp, #20]
  40250c:	9a08      	ldr	r2, [sp, #32]
  40250e:	9000      	str	r0, [sp, #0]
  402510:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  402514:	3b01      	subs	r3, #1
  402516:	009b      	lsls	r3, r3, #2
  402518:	ac0c      	add	r4, sp, #48	; 0x30
  40251a:	1f19      	subs	r1, r3, #4
  40251c:	4423      	add	r3, r4
  40251e:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
  402522:	930b      	str	r3, [sp, #44]	; 0x2c
  402524:	9b03      	ldr	r3, [sp, #12]
  402526:	3a01      	subs	r2, #1
  402528:	4421      	add	r1, r4
  40252a:	910a      	str	r1, [sp, #40]	; 0x28
  40252c:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
  402530:	9a00      	ldr	r2, [sp, #0]
  402532:	a998      	add	r1, sp, #608	; 0x260
  402534:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  402538:	2a00      	cmp	r2, #0
  40253a:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
  40253e:	4613      	mov	r3, r2
  402540:	dd2b      	ble.n	40259a <__kernel_rem_pio2+0x172>
  402542:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  402546:	f1a8 08a8 	sub.w	r8, r8, #168	; 0xa8
  40254a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  40254e:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  402552:	2200      	movs	r2, #0
  402554:	4b55      	ldr	r3, [pc, #340]	; (4026ac <__kernel_rem_pio2+0x284>)
  402556:	4620      	mov	r0, r4
  402558:	4629      	mov	r1, r5
  40255a:	f000 ff33 	bl	4033c4 <__aeabi_dmul>
  40255e:	f001 f9cb 	bl	4038f8 <__aeabi_d2iz>
  402562:	f000 fec9 	bl	4032f8 <__aeabi_i2d>
  402566:	2200      	movs	r2, #0
  402568:	4b51      	ldr	r3, [pc, #324]	; (4026b0 <__kernel_rem_pio2+0x288>)
  40256a:	4606      	mov	r6, r0
  40256c:	460f      	mov	r7, r1
  40256e:	f000 ff29 	bl	4033c4 <__aeabi_dmul>
  402572:	4602      	mov	r2, r0
  402574:	460b      	mov	r3, r1
  402576:	4620      	mov	r0, r4
  402578:	4629      	mov	r1, r5
  40257a:	f000 fd6f 	bl	40305c <__aeabi_dsub>
  40257e:	f001 f9bb 	bl	4038f8 <__aeabi_d2iz>
  402582:	e878 2302 	ldrd	r2, r3, [r8], #-8
  402586:	f849 0f04 	str.w	r0, [r9, #4]!
  40258a:	4639      	mov	r1, r7
  40258c:	4630      	mov	r0, r6
  40258e:	f000 fd67 	bl	403060 <__adddf3>
  402592:	45d0      	cmp	r8, sl
  402594:	4604      	mov	r4, r0
  402596:	460d      	mov	r5, r1
  402598:	d1db      	bne.n	402552 <__kernel_rem_pio2+0x12a>
  40259a:	f8dd 9010 	ldr.w	r9, [sp, #16]
  40259e:	4620      	mov	r0, r4
  4025a0:	4629      	mov	r1, r5
  4025a2:	464a      	mov	r2, r9
  4025a4:	f000 fcd0 	bl	402f48 <scalbn>
  4025a8:	2200      	movs	r2, #0
  4025aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  4025ae:	4604      	mov	r4, r0
  4025b0:	460d      	mov	r5, r1
  4025b2:	f000 ff07 	bl	4033c4 <__aeabi_dmul>
  4025b6:	f000 fc3b 	bl	402e30 <floor>
  4025ba:	2200      	movs	r2, #0
  4025bc:	4b3d      	ldr	r3, [pc, #244]	; (4026b4 <__kernel_rem_pio2+0x28c>)
  4025be:	f000 ff01 	bl	4033c4 <__aeabi_dmul>
  4025c2:	4602      	mov	r2, r0
  4025c4:	460b      	mov	r3, r1
  4025c6:	4620      	mov	r0, r4
  4025c8:	4629      	mov	r1, r5
  4025ca:	f000 fd47 	bl	40305c <__aeabi_dsub>
  4025ce:	460d      	mov	r5, r1
  4025d0:	4604      	mov	r4, r0
  4025d2:	f001 f991 	bl	4038f8 <__aeabi_d2iz>
  4025d6:	4680      	mov	r8, r0
  4025d8:	f000 fe8e 	bl	4032f8 <__aeabi_i2d>
  4025dc:	460b      	mov	r3, r1
  4025de:	4602      	mov	r2, r0
  4025e0:	4629      	mov	r1, r5
  4025e2:	4620      	mov	r0, r4
  4025e4:	f000 fd3a 	bl	40305c <__aeabi_dsub>
  4025e8:	464b      	mov	r3, r9
  4025ea:	2b00      	cmp	r3, #0
  4025ec:	4606      	mov	r6, r0
  4025ee:	460f      	mov	r7, r1
  4025f0:	f340 80f7 	ble.w	4027e2 <__kernel_rem_pio2+0x3ba>
  4025f4:	9a00      	ldr	r2, [sp, #0]
  4025f6:	a90c      	add	r1, sp, #48	; 0x30
  4025f8:	3a01      	subs	r2, #1
  4025fa:	f1c9 0318 	rsb	r3, r9, #24
  4025fe:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
  402602:	fa45 f103 	asr.w	r1, r5, r3
  402606:	fa01 f303 	lsl.w	r3, r1, r3
  40260a:	a80c      	add	r0, sp, #48	; 0x30
  40260c:	1aeb      	subs	r3, r5, r3
  40260e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  402612:	f1c9 0517 	rsb	r5, r9, #23
  402616:	4488      	add	r8, r1
  402618:	fa43 f505 	asr.w	r5, r3, r5
  40261c:	2d00      	cmp	r5, #0
  40261e:	dd63      	ble.n	4026e8 <__kernel_rem_pio2+0x2c0>
  402620:	9b00      	ldr	r3, [sp, #0]
  402622:	2b00      	cmp	r3, #0
  402624:	f108 0801 	add.w	r8, r8, #1
  402628:	f340 8281 	ble.w	402b2e <__kernel_rem_pio2+0x706>
  40262c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40262e:	2c00      	cmp	r4, #0
  402630:	f000 8318 	beq.w	402c64 <__kernel_rem_pio2+0x83c>
  402634:	2001      	movs	r0, #1
  402636:	2300      	movs	r3, #0
  402638:	aa0c      	add	r2, sp, #48	; 0x30
  40263a:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
  40263e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  402642:	9a00      	ldr	r2, [sp, #0]
  402644:	4282      	cmp	r2, r0
  402646:	dd19      	ble.n	40267c <__kernel_rem_pio2+0x254>
  402648:	aa0c      	add	r2, sp, #48	; 0x30
  40264a:	ac0c      	add	r4, sp, #48	; 0x30
  40264c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
  402650:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  402654:	1a51      	subs	r1, r2, r1
  402656:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
  40265a:	9900      	ldr	r1, [sp, #0]
  40265c:	3302      	adds	r3, #2
  40265e:	4299      	cmp	r1, r3
  402660:	dd0c      	ble.n	40267c <__kernel_rem_pio2+0x254>
  402662:	4610      	mov	r0, r2
  402664:	9a00      	ldr	r2, [sp, #0]
  402666:	a90c      	add	r1, sp, #48	; 0x30
  402668:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40266c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  402670:	681a      	ldr	r2, [r3, #0]
  402672:	1a82      	subs	r2, r0, r2
  402674:	f843 2b04 	str.w	r2, [r3], #4
  402678:	428b      	cmp	r3, r1
  40267a:	d1f9      	bne.n	402670 <__kernel_rem_pio2+0x248>
  40267c:	9b04      	ldr	r3, [sp, #16]
  40267e:	2b00      	cmp	r3, #0
  402680:	dd1a      	ble.n	4026b8 <__kernel_rem_pio2+0x290>
  402682:	9b04      	ldr	r3, [sp, #16]
  402684:	2b01      	cmp	r3, #1
  402686:	f04f 0401 	mov.w	r4, #1
  40268a:	f040 8258 	bne.w	402b3e <__kernel_rem_pio2+0x716>
  40268e:	9b00      	ldr	r3, [sp, #0]
  402690:	1e5a      	subs	r2, r3, #1
  402692:	ab0c      	add	r3, sp, #48	; 0x30
  402694:	a90c      	add	r1, sp, #48	; 0x30
  402696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40269a:	f3c3 0316 	ubfx	r3, r3, #0, #23
  40269e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  4026a2:	e258      	b.n	402b56 <__kernel_rem_pio2+0x72e>
  4026a4:	004068c8 	.word	0x004068c8
  4026a8:	2aaaaaab 	.word	0x2aaaaaab
  4026ac:	3e700000 	.word	0x3e700000
  4026b0:	41700000 	.word	0x41700000
  4026b4:	40200000 	.word	0x40200000
  4026b8:	2d02      	cmp	r5, #2
  4026ba:	d115      	bne.n	4026e8 <__kernel_rem_pio2+0x2c0>
  4026bc:	4632      	mov	r2, r6
  4026be:	463b      	mov	r3, r7
  4026c0:	2000      	movs	r0, #0
  4026c2:	4997      	ldr	r1, [pc, #604]	; (402920 <__kernel_rem_pio2+0x4f8>)
  4026c4:	f000 fcca 	bl	40305c <__aeabi_dsub>
  4026c8:	4606      	mov	r6, r0
  4026ca:	460f      	mov	r7, r1
  4026cc:	9a04      	ldr	r2, [sp, #16]
  4026ce:	4994      	ldr	r1, [pc, #592]	; (402920 <__kernel_rem_pio2+0x4f8>)
  4026d0:	2000      	movs	r0, #0
  4026d2:	f000 fc39 	bl	402f48 <scalbn>
  4026d6:	4602      	mov	r2, r0
  4026d8:	460b      	mov	r3, r1
  4026da:	4630      	mov	r0, r6
  4026dc:	4639      	mov	r1, r7
  4026de:	f000 fcbd 	bl	40305c <__aeabi_dsub>
  4026e2:	2502      	movs	r5, #2
  4026e4:	4606      	mov	r6, r0
  4026e6:	460f      	mov	r7, r1
  4026e8:	2200      	movs	r2, #0
  4026ea:	2300      	movs	r3, #0
  4026ec:	4630      	mov	r0, r6
  4026ee:	4639      	mov	r1, r7
  4026f0:	f001 f8d0 	bl	403894 <__aeabi_dcmpeq>
  4026f4:	2800      	cmp	r0, #0
  4026f6:	f000 8252 	beq.w	402b9e <__kernel_rem_pio2+0x776>
  4026fa:	9a00      	ldr	r2, [sp, #0]
  4026fc:	9b05      	ldr	r3, [sp, #20]
  4026fe:	1e50      	subs	r0, r2, #1
  402700:	4283      	cmp	r3, r0
  402702:	dc0f      	bgt.n	402724 <__kernel_rem_pio2+0x2fc>
  402704:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
  402708:	3b01      	subs	r3, #1
  40270a:	aa0c      	add	r2, sp, #48	; 0x30
  40270c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40270e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402712:	2200      	movs	r2, #0
  402714:	f853 1904 	ldr.w	r1, [r3], #-4
  402718:	42a3      	cmp	r3, r4
  40271a:	ea42 0201 	orr.w	r2, r2, r1
  40271e:	d1f9      	bne.n	402714 <__kernel_rem_pio2+0x2ec>
  402720:	2a00      	cmp	r2, #0
  402722:	d16f      	bne.n	402804 <__kernel_rem_pio2+0x3dc>
  402724:	9b05      	ldr	r3, [sp, #20]
  402726:	aa0c      	add	r2, sp, #48	; 0x30
  402728:	3b01      	subs	r3, #1
  40272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40272e:	2b00      	cmp	r3, #0
  402730:	f040 8233 	bne.w	402b9a <__kernel_rem_pio2+0x772>
  402734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402736:	2301      	movs	r3, #1
  402738:	f852 1904 	ldr.w	r1, [r2], #-4
  40273c:	3301      	adds	r3, #1
  40273e:	2900      	cmp	r1, #0
  402740:	d0fa      	beq.n	402738 <__kernel_rem_pio2+0x310>
  402742:	9a00      	ldr	r2, [sp, #0]
  402744:	18d3      	adds	r3, r2, r3
  402746:	f102 0a01 	add.w	sl, r2, #1
  40274a:	459a      	cmp	sl, r3
  40274c:	9307      	str	r3, [sp, #28]
  40274e:	dc3d      	bgt.n	4027cc <__kernel_rem_pio2+0x3a4>
  402750:	9b00      	ldr	r3, [sp, #0]
  402752:	9908      	ldr	r1, [sp, #32]
  402754:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402756:	440b      	add	r3, r1
  402758:	9907      	ldr	r1, [sp, #28]
  40275a:	eb0a 0802 	add.w	r8, sl, r2
  40275e:	4699      	mov	r9, r3
  402760:	ab20      	add	r3, sp, #128	; 0x80
  402762:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
  402766:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
  40276a:	188b      	adds	r3, r1, r2
  40276c:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  40276e:	f108 38ff 	add.w	r8, r8, #4294967295
  402772:	eb02 0888 	add.w	r8, r2, r8, lsl #2
  402776:	aa70      	add	r2, sp, #448	; 0x1c0
  402778:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
  40277c:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  40277e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402782:	9300      	str	r3, [sp, #0]
  402784:	f858 0f04 	ldr.w	r0, [r8, #4]!
  402788:	f000 fdb6 	bl	4032f8 <__aeabi_i2d>
  40278c:	9b02      	ldr	r3, [sp, #8]
  40278e:	2b00      	cmp	r3, #0
  402790:	e8e9 0102 	strd	r0, r1, [r9], #8
  402794:	db1d      	blt.n	4027d2 <__kernel_rem_pio2+0x3aa>
  402796:	9b03      	ldr	r3, [sp, #12]
  402798:	464d      	mov	r5, r9
  40279a:	f1a3 0408 	sub.w	r4, r3, #8
  40279e:	2600      	movs	r6, #0
  4027a0:	2700      	movs	r7, #0
  4027a2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  4027a6:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  4027aa:	f000 fe0b 	bl	4033c4 <__aeabi_dmul>
  4027ae:	4602      	mov	r2, r0
  4027b0:	460b      	mov	r3, r1
  4027b2:	4630      	mov	r0, r6
  4027b4:	4639      	mov	r1, r7
  4027b6:	f000 fc53 	bl	403060 <__adddf3>
  4027ba:	455c      	cmp	r4, fp
  4027bc:	4606      	mov	r6, r0
  4027be:	460f      	mov	r7, r1
  4027c0:	d1ef      	bne.n	4027a2 <__kernel_rem_pio2+0x37a>
  4027c2:	9b00      	ldr	r3, [sp, #0]
  4027c4:	4598      	cmp	r8, r3
  4027c6:	e8ea 6702 	strd	r6, r7, [sl], #8
  4027ca:	d1db      	bne.n	402784 <__kernel_rem_pio2+0x35c>
  4027cc:	9b07      	ldr	r3, [sp, #28]
  4027ce:	9300      	str	r3, [sp, #0]
  4027d0:	e6ae      	b.n	402530 <__kernel_rem_pio2+0x108>
  4027d2:	9b00      	ldr	r3, [sp, #0]
  4027d4:	2600      	movs	r6, #0
  4027d6:	2700      	movs	r7, #0
  4027d8:	4598      	cmp	r8, r3
  4027da:	e8ea 6702 	strd	r6, r7, [sl], #8
  4027de:	d1d1      	bne.n	402784 <__kernel_rem_pio2+0x35c>
  4027e0:	e7f4      	b.n	4027cc <__kernel_rem_pio2+0x3a4>
  4027e2:	d106      	bne.n	4027f2 <__kernel_rem_pio2+0x3ca>
  4027e4:	9b00      	ldr	r3, [sp, #0]
  4027e6:	aa0c      	add	r2, sp, #48	; 0x30
  4027e8:	3b01      	subs	r3, #1
  4027ea:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  4027ee:	15ed      	asrs	r5, r5, #23
  4027f0:	e714      	b.n	40261c <__kernel_rem_pio2+0x1f4>
  4027f2:	2200      	movs	r2, #0
  4027f4:	4b4b      	ldr	r3, [pc, #300]	; (402924 <__kernel_rem_pio2+0x4fc>)
  4027f6:	f001 f86b 	bl	4038d0 <__aeabi_dcmpge>
  4027fa:	2800      	cmp	r0, #0
  4027fc:	f040 8182 	bne.w	402b04 <__kernel_rem_pio2+0x6dc>
  402800:	4605      	mov	r5, r0
  402802:	e771      	b.n	4026e8 <__kernel_rem_pio2+0x2c0>
  402804:	a90c      	add	r1, sp, #48	; 0x30
  402806:	9502      	str	r5, [sp, #8]
  402808:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
  40280c:	9904      	ldr	r1, [sp, #16]
  40280e:	f8cd 801c 	str.w	r8, [sp, #28]
  402812:	3918      	subs	r1, #24
  402814:	4602      	mov	r2, r0
  402816:	9000      	str	r0, [sp, #0]
  402818:	9104      	str	r1, [sp, #16]
  40281a:	b96b      	cbnz	r3, 402838 <__kernel_rem_pio2+0x410>
  40281c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  402820:	3b01      	subs	r3, #1
  402822:	a80c      	add	r0, sp, #48	; 0x30
  402824:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  402828:	f853 0904 	ldr.w	r0, [r3], #-4
  40282c:	3a01      	subs	r2, #1
  40282e:	3918      	subs	r1, #24
  402830:	2800      	cmp	r0, #0
  402832:	d0f9      	beq.n	402828 <__kernel_rem_pio2+0x400>
  402834:	9200      	str	r2, [sp, #0]
  402836:	9104      	str	r1, [sp, #16]
  402838:	9a04      	ldr	r2, [sp, #16]
  40283a:	4939      	ldr	r1, [pc, #228]	; (402920 <__kernel_rem_pio2+0x4f8>)
  40283c:	2000      	movs	r0, #0
  40283e:	f000 fb83 	bl	402f48 <scalbn>
  402842:	9b00      	ldr	r3, [sp, #0]
  402844:	2b00      	cmp	r3, #0
  402846:	4604      	mov	r4, r0
  402848:	460d      	mov	r5, r1
  40284a:	f2c0 8203 	blt.w	402c54 <__kernel_rem_pio2+0x82c>
  40284e:	00da      	lsls	r2, r3, #3
  402850:	a970      	add	r1, sp, #448	; 0x1c0
  402852:	eb01 0b02 	add.w	fp, r1, r2
  402856:	9204      	str	r2, [sp, #16]
  402858:	aa0c      	add	r2, sp, #48	; 0x30
  40285a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
  40285e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 402928 <__kernel_rem_pio2+0x500>
  402862:	f10b 0708 	add.w	r7, fp, #8
  402866:	3604      	adds	r6, #4
  402868:	f04f 0800 	mov.w	r8, #0
  40286c:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  402870:	f000 fd42 	bl	4032f8 <__aeabi_i2d>
  402874:	4622      	mov	r2, r4
  402876:	462b      	mov	r3, r5
  402878:	f000 fda4 	bl	4033c4 <__aeabi_dmul>
  40287c:	464b      	mov	r3, r9
  40287e:	e967 0102 	strd	r0, r1, [r7, #-8]!
  402882:	4642      	mov	r2, r8
  402884:	4620      	mov	r0, r4
  402886:	4629      	mov	r1, r5
  402888:	f000 fd9c 	bl	4033c4 <__aeabi_dmul>
  40288c:	ab0c      	add	r3, sp, #48	; 0x30
  40288e:	429e      	cmp	r6, r3
  402890:	4604      	mov	r4, r0
  402892:	460d      	mov	r5, r1
  402894:	d1ea      	bne.n	40286c <__kernel_rem_pio2+0x444>
  402896:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  40289a:	f8cd a00c 	str.w	sl, [sp, #12]
  40289e:	f8dd a014 	ldr.w	sl, [sp, #20]
  4028a2:	f04f 0900 	mov.w	r9, #0
  4028a6:	f1ba 0f00 	cmp.w	sl, #0
  4028aa:	f2c0 813d 	blt.w	402b28 <__kernel_rem_pio2+0x700>
  4028ae:	f8df 807c 	ldr.w	r8, [pc, #124]	; 40292c <__kernel_rem_pio2+0x504>
  4028b2:	465d      	mov	r5, fp
  4028b4:	a118      	add	r1, pc, #96	; (adr r1, 402918 <__kernel_rem_pio2+0x4f0>)
  4028b6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4028ba:	2600      	movs	r6, #0
  4028bc:	2700      	movs	r7, #0
  4028be:	2400      	movs	r4, #0
  4028c0:	e003      	b.n	4028ca <__kernel_rem_pio2+0x4a2>
  4028c2:	454c      	cmp	r4, r9
  4028c4:	dc10      	bgt.n	4028e8 <__kernel_rem_pio2+0x4c0>
  4028c6:	e8f8 0102 	ldrd	r0, r1, [r8], #8
  4028ca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
  4028ce:	f000 fd79 	bl	4033c4 <__aeabi_dmul>
  4028d2:	4602      	mov	r2, r0
  4028d4:	460b      	mov	r3, r1
  4028d6:	4630      	mov	r0, r6
  4028d8:	4639      	mov	r1, r7
  4028da:	f000 fbc1 	bl	403060 <__adddf3>
  4028de:	3401      	adds	r4, #1
  4028e0:	45a2      	cmp	sl, r4
  4028e2:	4606      	mov	r6, r0
  4028e4:	460f      	mov	r7, r1
  4028e6:	daec      	bge.n	4028c2 <__kernel_rem_pio2+0x49a>
  4028e8:	9b03      	ldr	r3, [sp, #12]
  4028ea:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  4028ee:	f1ab 0b08 	sub.w	fp, fp, #8
  4028f2:	e9c3 6700 	strd	r6, r7, [r3]
  4028f6:	ab6e      	add	r3, sp, #440	; 0x1b8
  4028f8:	455b      	cmp	r3, fp
  4028fa:	f109 0901 	add.w	r9, r9, #1
  4028fe:	d1d2      	bne.n	4028a6 <__kernel_rem_pio2+0x47e>
  402900:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  402902:	f8dd a00c 	ldr.w	sl, [sp, #12]
  402906:	2b03      	cmp	r3, #3
  402908:	f200 808b 	bhi.w	402a22 <__kernel_rem_pio2+0x5fa>
  40290c:	e8df f013 	tbh	[pc, r3, lsl #1]
  402910:	009000d1 	.word	0x009000d1
  402914:	00100090 	.word	0x00100090
  402918:	40000000 	.word	0x40000000
  40291c:	3ff921fb 	.word	0x3ff921fb
  402920:	3ff00000 	.word	0x3ff00000
  402924:	3fe00000 	.word	0x3fe00000
  402928:	3e700000 	.word	0x3e700000
  40292c:	00406890 	.word	0x00406890
  402930:	9b00      	ldr	r3, [sp, #0]
  402932:	2b00      	cmp	r3, #0
  402934:	f340 81a4 	ble.w	402c80 <__kernel_rem_pio2+0x858>
  402938:	9b04      	ldr	r3, [sp, #16]
  40293a:	eb0a 0803 	add.w	r8, sl, r3
  40293e:	e9d8 6700 	ldrd	r6, r7, [r8]
  402942:	46d3      	mov	fp, sl
  402944:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  402948:	4632      	mov	r2, r6
  40294a:	463b      	mov	r3, r7
  40294c:	4648      	mov	r0, r9
  40294e:	4651      	mov	r1, sl
  402950:	f000 fb86 	bl	403060 <__adddf3>
  402954:	4604      	mov	r4, r0
  402956:	460d      	mov	r5, r1
  402958:	4602      	mov	r2, r0
  40295a:	460b      	mov	r3, r1
  40295c:	4648      	mov	r0, r9
  40295e:	4651      	mov	r1, sl
  402960:	f000 fb7c 	bl	40305c <__aeabi_dsub>
  402964:	4632      	mov	r2, r6
  402966:	463b      	mov	r3, r7
  402968:	f000 fb7a 	bl	403060 <__adddf3>
  40296c:	e9c8 0100 	strd	r0, r1, [r8]
  402970:	e968 4502 	strd	r4, r5, [r8, #-8]!
  402974:	45c3      	cmp	fp, r8
  402976:	4626      	mov	r6, r4
  402978:	462f      	mov	r7, r5
  40297a:	d1e3      	bne.n	402944 <__kernel_rem_pio2+0x51c>
  40297c:	9b00      	ldr	r3, [sp, #0]
  40297e:	2b01      	cmp	r3, #1
  402980:	46da      	mov	sl, fp
  402982:	f340 817d 	ble.w	402c80 <__kernel_rem_pio2+0x858>
  402986:	9b04      	ldr	r3, [sp, #16]
  402988:	445b      	add	r3, fp
  40298a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40298e:	4698      	mov	r8, r3
  402990:	4699      	mov	r9, r3
  402992:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
  402996:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  40299a:	4632      	mov	r2, r6
  40299c:	4618      	mov	r0, r3
  40299e:	4621      	mov	r1, r4
  4029a0:	463b      	mov	r3, r7
  4029a2:	e9cd 0100 	strd	r0, r1, [sp]
  4029a6:	f000 fb5b 	bl	403060 <__adddf3>
  4029aa:	4604      	mov	r4, r0
  4029ac:	460d      	mov	r5, r1
  4029ae:	4602      	mov	r2, r0
  4029b0:	460b      	mov	r3, r1
  4029b2:	e9dd 0100 	ldrd	r0, r1, [sp]
  4029b6:	f000 fb51 	bl	40305c <__aeabi_dsub>
  4029ba:	4632      	mov	r2, r6
  4029bc:	463b      	mov	r3, r7
  4029be:	f000 fb4f 	bl	403060 <__adddf3>
  4029c2:	e9c9 0100 	strd	r0, r1, [r9]
  4029c6:	e969 4502 	strd	r4, r5, [r9, #-8]!
  4029ca:	45cb      	cmp	fp, r9
  4029cc:	4626      	mov	r6, r4
  4029ce:	462f      	mov	r7, r5
  4029d0:	d1e1      	bne.n	402996 <__kernel_rem_pio2+0x56e>
  4029d2:	2300      	movs	r3, #0
  4029d4:	f108 0808 	add.w	r8, r8, #8
  4029d8:	461d      	mov	r5, r3
  4029da:	ac4c      	add	r4, sp, #304	; 0x130
  4029dc:	4618      	mov	r0, r3
  4029de:	4629      	mov	r1, r5
  4029e0:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  4029e4:	f000 fb3c 	bl	403060 <__adddf3>
  4029e8:	4544      	cmp	r4, r8
  4029ea:	4603      	mov	r3, r0
  4029ec:	460d      	mov	r5, r1
  4029ee:	d1f5      	bne.n	4029dc <__kernel_rem_pio2+0x5b4>
  4029f0:	9a02      	ldr	r2, [sp, #8]
  4029f2:	2a00      	cmp	r2, #0
  4029f4:	f000 8120 	beq.w	402c38 <__kernel_rem_pio2+0x810>
  4029f8:	f8da 4004 	ldr.w	r4, [sl, #4]
  4029fc:	f8da 200c 	ldr.w	r2, [sl, #12]
  402a00:	9f06      	ldr	r7, [sp, #24]
  402a02:	f8da 1000 	ldr.w	r1, [sl]
  402a06:	f8da 0008 	ldr.w	r0, [sl, #8]
  402a0a:	613b      	str	r3, [r7, #16]
  402a0c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  402a10:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  402a14:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  402a18:	617d      	str	r5, [r7, #20]
  402a1a:	607c      	str	r4, [r7, #4]
  402a1c:	60fa      	str	r2, [r7, #12]
  402a1e:	6039      	str	r1, [r7, #0]
  402a20:	60b8      	str	r0, [r7, #8]
  402a22:	9b07      	ldr	r3, [sp, #28]
  402a24:	f003 0007 	and.w	r0, r3, #7
  402a28:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  402a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a30:	9c04      	ldr	r4, [sp, #16]
  402a32:	2600      	movs	r6, #0
  402a34:	3408      	adds	r4, #8
  402a36:	4454      	add	r4, sl
  402a38:	4633      	mov	r3, r6
  402a3a:	4630      	mov	r0, r6
  402a3c:	4619      	mov	r1, r3
  402a3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  402a42:	f000 fb0d 	bl	403060 <__adddf3>
  402a46:	4554      	cmp	r4, sl
  402a48:	4606      	mov	r6, r0
  402a4a:	460b      	mov	r3, r1
  402a4c:	d1f5      	bne.n	402a3a <__kernel_rem_pio2+0x612>
  402a4e:	9a02      	ldr	r2, [sp, #8]
  402a50:	4630      	mov	r0, r6
  402a52:	4619      	mov	r1, r3
  402a54:	2a00      	cmp	r2, #0
  402a56:	f000 80da 	beq.w	402c0e <__kernel_rem_pio2+0x7e6>
  402a5a:	9806      	ldr	r0, [sp, #24]
  402a5c:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  402a60:	4632      	mov	r2, r6
  402a62:	6044      	str	r4, [r0, #4]
  402a64:	6006      	str	r6, [r0, #0]
  402a66:	e9da 0100 	ldrd	r0, r1, [sl]
  402a6a:	f000 faf7 	bl	40305c <__aeabi_dsub>
  402a6e:	460b      	mov	r3, r1
  402a70:	9900      	ldr	r1, [sp, #0]
  402a72:	2900      	cmp	r1, #0
  402a74:	4602      	mov	r2, r0
  402a76:	dd0e      	ble.n	402a96 <__kernel_rem_pio2+0x66e>
  402a78:	2401      	movs	r4, #1
  402a7a:	4610      	mov	r0, r2
  402a7c:	4619      	mov	r1, r3
  402a7e:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  402a82:	f000 faed 	bl	403060 <__adddf3>
  402a86:	460b      	mov	r3, r1
  402a88:	9900      	ldr	r1, [sp, #0]
  402a8a:	3401      	adds	r4, #1
  402a8c:	42a1      	cmp	r1, r4
  402a8e:	4602      	mov	r2, r0
  402a90:	daf3      	bge.n	402a7a <__kernel_rem_pio2+0x652>
  402a92:	9902      	ldr	r1, [sp, #8]
  402a94:	b109      	cbz	r1, 402a9a <__kernel_rem_pio2+0x672>
  402a96:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  402a9a:	4619      	mov	r1, r3
  402a9c:	9b06      	ldr	r3, [sp, #24]
  402a9e:	4610      	mov	r0, r2
  402aa0:	e9c3 0102 	strd	r0, r1, [r3, #8]
  402aa4:	9b07      	ldr	r3, [sp, #28]
  402aa6:	f003 0007 	and.w	r0, r3, #7
  402aaa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  402aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ab2:	9c04      	ldr	r4, [sp, #16]
  402ab4:	2200      	movs	r2, #0
  402ab6:	3408      	adds	r4, #8
  402ab8:	4454      	add	r4, sl
  402aba:	4613      	mov	r3, r2
  402abc:	4610      	mov	r0, r2
  402abe:	4619      	mov	r1, r3
  402ac0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  402ac4:	f000 facc 	bl	403060 <__adddf3>
  402ac8:	45a2      	cmp	sl, r4
  402aca:	4602      	mov	r2, r0
  402acc:	460b      	mov	r3, r1
  402ace:	d1f5      	bne.n	402abc <__kernel_rem_pio2+0x694>
  402ad0:	9902      	ldr	r1, [sp, #8]
  402ad2:	b109      	cbz	r1, 402ad8 <__kernel_rem_pio2+0x6b0>
  402ad4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  402ad8:	4619      	mov	r1, r3
  402ada:	9b06      	ldr	r3, [sp, #24]
  402adc:	4610      	mov	r0, r2
  402ade:	e9c3 0100 	strd	r0, r1, [r3]
  402ae2:	9b07      	ldr	r3, [sp, #28]
  402ae4:	f003 0007 	and.w	r0, r3, #7
  402ae8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  402aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402af0:	2600      	movs	r6, #0
  402af2:	2700      	movs	r7, #0
  402af4:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  402af8:	45da      	cmp	sl, fp
  402afa:	f109 0908 	add.w	r9, r9, #8
  402afe:	f47f ace4 	bne.w	4024ca <__kernel_rem_pio2+0xa2>
  402b02:	e502      	b.n	40250a <__kernel_rem_pio2+0xe2>
  402b04:	9b00      	ldr	r3, [sp, #0]
  402b06:	2b00      	cmp	r3, #0
  402b08:	f108 0801 	add.w	r8, r8, #1
  402b0c:	bfc8      	it	gt
  402b0e:	2502      	movgt	r5, #2
  402b10:	f73f ad8c 	bgt.w	40262c <__kernel_rem_pio2+0x204>
  402b14:	4632      	mov	r2, r6
  402b16:	463b      	mov	r3, r7
  402b18:	2000      	movs	r0, #0
  402b1a:	4963      	ldr	r1, [pc, #396]	; (402ca8 <__kernel_rem_pio2+0x880>)
  402b1c:	f000 fa9e 	bl	40305c <__aeabi_dsub>
  402b20:	2502      	movs	r5, #2
  402b22:	4606      	mov	r6, r0
  402b24:	460f      	mov	r7, r1
  402b26:	e5df      	b.n	4026e8 <__kernel_rem_pio2+0x2c0>
  402b28:	2600      	movs	r6, #0
  402b2a:	2700      	movs	r7, #0
  402b2c:	e6dc      	b.n	4028e8 <__kernel_rem_pio2+0x4c0>
  402b2e:	9b04      	ldr	r3, [sp, #16]
  402b30:	2b00      	cmp	r3, #0
  402b32:	dd26      	ble.n	402b82 <__kernel_rem_pio2+0x75a>
  402b34:	2400      	movs	r4, #0
  402b36:	9b04      	ldr	r3, [sp, #16]
  402b38:	2b01      	cmp	r3, #1
  402b3a:	f43f ada8 	beq.w	40268e <__kernel_rem_pio2+0x266>
  402b3e:	2b02      	cmp	r3, #2
  402b40:	d109      	bne.n	402b56 <__kernel_rem_pio2+0x72e>
  402b42:	9b00      	ldr	r3, [sp, #0]
  402b44:	1e5a      	subs	r2, r3, #1
  402b46:	ab0c      	add	r3, sp, #48	; 0x30
  402b48:	a90c      	add	r1, sp, #48	; 0x30
  402b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402b4e:	f3c3 0315 	ubfx	r3, r3, #0, #22
  402b52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  402b56:	2d02      	cmp	r5, #2
  402b58:	f47f adc6 	bne.w	4026e8 <__kernel_rem_pio2+0x2c0>
  402b5c:	4632      	mov	r2, r6
  402b5e:	463b      	mov	r3, r7
  402b60:	2000      	movs	r0, #0
  402b62:	4951      	ldr	r1, [pc, #324]	; (402ca8 <__kernel_rem_pio2+0x880>)
  402b64:	f000 fa7a 	bl	40305c <__aeabi_dsub>
  402b68:	4606      	mov	r6, r0
  402b6a:	460f      	mov	r7, r1
  402b6c:	2c00      	cmp	r4, #0
  402b6e:	f43f adbb 	beq.w	4026e8 <__kernel_rem_pio2+0x2c0>
  402b72:	e5ab      	b.n	4026cc <__kernel_rem_pio2+0x2a4>
  402b74:	9900      	ldr	r1, [sp, #0]
  402b76:	3301      	adds	r3, #1
  402b78:	4299      	cmp	r1, r3
  402b7a:	d178      	bne.n	402c6e <__kernel_rem_pio2+0x846>
  402b7c:	9b04      	ldr	r3, [sp, #16]
  402b7e:	2b00      	cmp	r3, #0
  402b80:	dcd9      	bgt.n	402b36 <__kernel_rem_pio2+0x70e>
  402b82:	2d02      	cmp	r5, #2
  402b84:	f47f adb0 	bne.w	4026e8 <__kernel_rem_pio2+0x2c0>
  402b88:	4632      	mov	r2, r6
  402b8a:	463b      	mov	r3, r7
  402b8c:	2000      	movs	r0, #0
  402b8e:	4946      	ldr	r1, [pc, #280]	; (402ca8 <__kernel_rem_pio2+0x880>)
  402b90:	f000 fa64 	bl	40305c <__aeabi_dsub>
  402b94:	4606      	mov	r6, r0
  402b96:	460f      	mov	r7, r1
  402b98:	e5a6      	b.n	4026e8 <__kernel_rem_pio2+0x2c0>
  402b9a:	2301      	movs	r3, #1
  402b9c:	e5d1      	b.n	402742 <__kernel_rem_pio2+0x31a>
  402b9e:	4639      	mov	r1, r7
  402ba0:	9f04      	ldr	r7, [sp, #16]
  402ba2:	9502      	str	r5, [sp, #8]
  402ba4:	427a      	negs	r2, r7
  402ba6:	4630      	mov	r0, r6
  402ba8:	f8cd 801c 	str.w	r8, [sp, #28]
  402bac:	f000 f9cc 	bl	402f48 <scalbn>
  402bb0:	2200      	movs	r2, #0
  402bb2:	4b3e      	ldr	r3, [pc, #248]	; (402cac <__kernel_rem_pio2+0x884>)
  402bb4:	4604      	mov	r4, r0
  402bb6:	460d      	mov	r5, r1
  402bb8:	f000 fe8a 	bl	4038d0 <__aeabi_dcmpge>
  402bbc:	2800      	cmp	r0, #0
  402bbe:	d062      	beq.n	402c86 <__kernel_rem_pio2+0x85e>
  402bc0:	2200      	movs	r2, #0
  402bc2:	4b3b      	ldr	r3, [pc, #236]	; (402cb0 <__kernel_rem_pio2+0x888>)
  402bc4:	4620      	mov	r0, r4
  402bc6:	4629      	mov	r1, r5
  402bc8:	f000 fbfc 	bl	4033c4 <__aeabi_dmul>
  402bcc:	f000 fe94 	bl	4038f8 <__aeabi_d2iz>
  402bd0:	4606      	mov	r6, r0
  402bd2:	f000 fb91 	bl	4032f8 <__aeabi_i2d>
  402bd6:	2200      	movs	r2, #0
  402bd8:	4b34      	ldr	r3, [pc, #208]	; (402cac <__kernel_rem_pio2+0x884>)
  402bda:	f000 fbf3 	bl	4033c4 <__aeabi_dmul>
  402bde:	4602      	mov	r2, r0
  402be0:	460b      	mov	r3, r1
  402be2:	4620      	mov	r0, r4
  402be4:	4629      	mov	r1, r5
  402be6:	f000 fa39 	bl	40305c <__aeabi_dsub>
  402bea:	f000 fe85 	bl	4038f8 <__aeabi_d2iz>
  402bee:	9900      	ldr	r1, [sp, #0]
  402bf0:	460b      	mov	r3, r1
  402bf2:	3301      	adds	r3, #1
  402bf4:	461a      	mov	r2, r3
  402bf6:	9300      	str	r3, [sp, #0]
  402bf8:	463b      	mov	r3, r7
  402bfa:	3318      	adds	r3, #24
  402bfc:	9304      	str	r3, [sp, #16]
  402bfe:	460b      	mov	r3, r1
  402c00:	a90c      	add	r1, sp, #48	; 0x30
  402c02:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  402c06:	4613      	mov	r3, r2
  402c08:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
  402c0c:	e614      	b.n	402838 <__kernel_rem_pio2+0x410>
  402c0e:	9b06      	ldr	r3, [sp, #24]
  402c10:	4632      	mov	r2, r6
  402c12:	e9c3 0100 	strd	r0, r1, [r3]
  402c16:	460b      	mov	r3, r1
  402c18:	e9da 0100 	ldrd	r0, r1, [sl]
  402c1c:	f000 fa1e 	bl	40305c <__aeabi_dsub>
  402c20:	460b      	mov	r3, r1
  402c22:	9900      	ldr	r1, [sp, #0]
  402c24:	2900      	cmp	r1, #0
  402c26:	4602      	mov	r2, r0
  402c28:	f73f af26 	bgt.w	402a78 <__kernel_rem_pio2+0x650>
  402c2c:	4619      	mov	r1, r3
  402c2e:	9b06      	ldr	r3, [sp, #24]
  402c30:	4610      	mov	r0, r2
  402c32:	e9c3 0102 	strd	r0, r1, [r3, #8]
  402c36:	e735      	b.n	402aa4 <__kernel_rem_pio2+0x67c>
  402c38:	4618      	mov	r0, r3
  402c3a:	4629      	mov	r1, r5
  402c3c:	e9da 2300 	ldrd	r2, r3, [sl]
  402c40:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  402c44:	9f06      	ldr	r7, [sp, #24]
  402c46:	e9c7 0104 	strd	r0, r1, [r7, #16]
  402c4a:	e9c7 2300 	strd	r2, r3, [r7]
  402c4e:	e9c7 4502 	strd	r4, r5, [r7, #8]
  402c52:	e6e6      	b.n	402a22 <__kernel_rem_pio2+0x5fa>
  402c54:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  402c56:	2b03      	cmp	r3, #3
  402c58:	f63f aee3 	bhi.w	402a22 <__kernel_rem_pio2+0x5fa>
  402c5c:	e8df f003 	tbb	[pc, r3]
  402c60:	0e1c1c21 	.word	0x0e1c1c21
  402c64:	9b00      	ldr	r3, [sp, #0]
  402c66:	2b01      	cmp	r3, #1
  402c68:	dd88      	ble.n	402b7c <__kernel_rem_pio2+0x754>
  402c6a:	aa0c      	add	r2, sp, #48	; 0x30
  402c6c:	2301      	movs	r3, #1
  402c6e:	f852 4f04 	ldr.w	r4, [r2, #4]!
  402c72:	2c00      	cmp	r4, #0
  402c74:	f43f af7e 	beq.w	402b74 <__kernel_rem_pio2+0x74c>
  402c78:	1c58      	adds	r0, r3, #1
  402c7a:	e4dd      	b.n	402638 <__kernel_rem_pio2+0x210>
  402c7c:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  402c80:	2300      	movs	r3, #0
  402c82:	461d      	mov	r5, r3
  402c84:	e6b4      	b.n	4029f0 <__kernel_rem_pio2+0x5c8>
  402c86:	4629      	mov	r1, r5
  402c88:	4620      	mov	r0, r4
  402c8a:	f000 fe35 	bl	4038f8 <__aeabi_d2iz>
  402c8e:	9a00      	ldr	r2, [sp, #0]
  402c90:	a90c      	add	r1, sp, #48	; 0x30
  402c92:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
  402c96:	e5cf      	b.n	402838 <__kernel_rem_pio2+0x410>
  402c98:	2600      	movs	r6, #0
  402c9a:	4633      	mov	r3, r6
  402c9c:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  402ca0:	e6d5      	b.n	402a4e <__kernel_rem_pio2+0x626>
  402ca2:	2200      	movs	r2, #0
  402ca4:	4613      	mov	r3, r2
  402ca6:	e713      	b.n	402ad0 <__kernel_rem_pio2+0x6a8>
  402ca8:	3ff00000 	.word	0x3ff00000
  402cac:	41700000 	.word	0x41700000
  402cb0:	3e700000 	.word	0x3e700000
  402cb4:	00000000 	.word	0x00000000

00402cb8 <__kernel_sin>:
  402cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402cbc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  402cc0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  402cc4:	b085      	sub	sp, #20
  402cc6:	460c      	mov	r4, r1
  402cc8:	4690      	mov	r8, r2
  402cca:	4699      	mov	r9, r3
  402ccc:	4605      	mov	r5, r0
  402cce:	da04      	bge.n	402cda <__kernel_sin+0x22>
  402cd0:	f000 fe12 	bl	4038f8 <__aeabi_d2iz>
  402cd4:	2800      	cmp	r0, #0
  402cd6:	f000 8085 	beq.w	402de4 <__kernel_sin+0x12c>
  402cda:	462a      	mov	r2, r5
  402cdc:	4623      	mov	r3, r4
  402cde:	4628      	mov	r0, r5
  402ce0:	4621      	mov	r1, r4
  402ce2:	f000 fb6f 	bl	4033c4 <__aeabi_dmul>
  402ce6:	4606      	mov	r6, r0
  402ce8:	460f      	mov	r7, r1
  402cea:	4602      	mov	r2, r0
  402cec:	460b      	mov	r3, r1
  402cee:	4628      	mov	r0, r5
  402cf0:	4621      	mov	r1, r4
  402cf2:	f000 fb67 	bl	4033c4 <__aeabi_dmul>
  402cf6:	a33e      	add	r3, pc, #248	; (adr r3, 402df0 <__kernel_sin+0x138>)
  402cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
  402cfc:	4682      	mov	sl, r0
  402cfe:	468b      	mov	fp, r1
  402d00:	4630      	mov	r0, r6
  402d02:	4639      	mov	r1, r7
  402d04:	f000 fb5e 	bl	4033c4 <__aeabi_dmul>
  402d08:	a33b      	add	r3, pc, #236	; (adr r3, 402df8 <__kernel_sin+0x140>)
  402d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d0e:	f000 f9a5 	bl	40305c <__aeabi_dsub>
  402d12:	4632      	mov	r2, r6
  402d14:	463b      	mov	r3, r7
  402d16:	f000 fb55 	bl	4033c4 <__aeabi_dmul>
  402d1a:	a339      	add	r3, pc, #228	; (adr r3, 402e00 <__kernel_sin+0x148>)
  402d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d20:	f000 f99e 	bl	403060 <__adddf3>
  402d24:	4632      	mov	r2, r6
  402d26:	463b      	mov	r3, r7
  402d28:	f000 fb4c 	bl	4033c4 <__aeabi_dmul>
  402d2c:	a336      	add	r3, pc, #216	; (adr r3, 402e08 <__kernel_sin+0x150>)
  402d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d32:	f000 f993 	bl	40305c <__aeabi_dsub>
  402d36:	4632      	mov	r2, r6
  402d38:	463b      	mov	r3, r7
  402d3a:	f000 fb43 	bl	4033c4 <__aeabi_dmul>
  402d3e:	a334      	add	r3, pc, #208	; (adr r3, 402e10 <__kernel_sin+0x158>)
  402d40:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d44:	f000 f98c 	bl	403060 <__adddf3>
  402d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402d4a:	e9cd 0100 	strd	r0, r1, [sp]
  402d4e:	b39b      	cbz	r3, 402db8 <__kernel_sin+0x100>
  402d50:	2200      	movs	r2, #0
  402d52:	4b33      	ldr	r3, [pc, #204]	; (402e20 <__kernel_sin+0x168>)
  402d54:	4640      	mov	r0, r8
  402d56:	4649      	mov	r1, r9
  402d58:	f000 fb34 	bl	4033c4 <__aeabi_dmul>
  402d5c:	e9dd 2300 	ldrd	r2, r3, [sp]
  402d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402d64:	4650      	mov	r0, sl
  402d66:	4659      	mov	r1, fp
  402d68:	f000 fb2c 	bl	4033c4 <__aeabi_dmul>
  402d6c:	4602      	mov	r2, r0
  402d6e:	460b      	mov	r3, r1
  402d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402d74:	f000 f972 	bl	40305c <__aeabi_dsub>
  402d78:	4632      	mov	r2, r6
  402d7a:	463b      	mov	r3, r7
  402d7c:	f000 fb22 	bl	4033c4 <__aeabi_dmul>
  402d80:	4642      	mov	r2, r8
  402d82:	464b      	mov	r3, r9
  402d84:	f000 f96a 	bl	40305c <__aeabi_dsub>
  402d88:	a323      	add	r3, pc, #140	; (adr r3, 402e18 <__kernel_sin+0x160>)
  402d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d8e:	4606      	mov	r6, r0
  402d90:	460f      	mov	r7, r1
  402d92:	4650      	mov	r0, sl
  402d94:	4659      	mov	r1, fp
  402d96:	f000 fb15 	bl	4033c4 <__aeabi_dmul>
  402d9a:	4602      	mov	r2, r0
  402d9c:	460b      	mov	r3, r1
  402d9e:	4630      	mov	r0, r6
  402da0:	4639      	mov	r1, r7
  402da2:	f000 f95d 	bl	403060 <__adddf3>
  402da6:	4602      	mov	r2, r0
  402da8:	460b      	mov	r3, r1
  402daa:	4628      	mov	r0, r5
  402dac:	4621      	mov	r1, r4
  402dae:	f000 f955 	bl	40305c <__aeabi_dsub>
  402db2:	b005      	add	sp, #20
  402db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402db8:	4602      	mov	r2, r0
  402dba:	460b      	mov	r3, r1
  402dbc:	4630      	mov	r0, r6
  402dbe:	4639      	mov	r1, r7
  402dc0:	f000 fb00 	bl	4033c4 <__aeabi_dmul>
  402dc4:	a314      	add	r3, pc, #80	; (adr r3, 402e18 <__kernel_sin+0x160>)
  402dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
  402dca:	f000 f947 	bl	40305c <__aeabi_dsub>
  402dce:	4652      	mov	r2, sl
  402dd0:	465b      	mov	r3, fp
  402dd2:	f000 faf7 	bl	4033c4 <__aeabi_dmul>
  402dd6:	462a      	mov	r2, r5
  402dd8:	4623      	mov	r3, r4
  402dda:	f000 f941 	bl	403060 <__adddf3>
  402dde:	b005      	add	sp, #20
  402de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402de4:	4628      	mov	r0, r5
  402de6:	4621      	mov	r1, r4
  402de8:	b005      	add	sp, #20
  402dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402dee:	bf00      	nop
  402df0:	5acfd57c 	.word	0x5acfd57c
  402df4:	3de5d93a 	.word	0x3de5d93a
  402df8:	8a2b9ceb 	.word	0x8a2b9ceb
  402dfc:	3e5ae5e6 	.word	0x3e5ae5e6
  402e00:	57b1fe7d 	.word	0x57b1fe7d
  402e04:	3ec71de3 	.word	0x3ec71de3
  402e08:	19c161d5 	.word	0x19c161d5
  402e0c:	3f2a01a0 	.word	0x3f2a01a0
  402e10:	1110f8a6 	.word	0x1110f8a6
  402e14:	3f811111 	.word	0x3f811111
  402e18:	55555549 	.word	0x55555549
  402e1c:	3fc55555 	.word	0x3fc55555
  402e20:	3fe00000 	.word	0x3fe00000

00402e24 <fabs>:
  402e24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402e28:	4770      	bx	lr
  402e2a:	bf00      	nop
  402e2c:	0000      	movs	r0, r0
	...

00402e30 <floor>:
  402e30:	f3c1 520a 	ubfx	r2, r1, #20, #11
  402e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402e38:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  402e3c:	2e13      	cmp	r6, #19
  402e3e:	460b      	mov	r3, r1
  402e40:	460d      	mov	r5, r1
  402e42:	4604      	mov	r4, r0
  402e44:	4688      	mov	r8, r1
  402e46:	4607      	mov	r7, r0
  402e48:	dc1d      	bgt.n	402e86 <floor+0x56>
  402e4a:	2e00      	cmp	r6, #0
  402e4c:	db40      	blt.n	402ed0 <floor+0xa0>
  402e4e:	4a3c      	ldr	r2, [pc, #240]	; (402f40 <floor+0x110>)
  402e50:	fa42 f906 	asr.w	r9, r2, r6
  402e54:	ea01 0209 	and.w	r2, r1, r9
  402e58:	4302      	orrs	r2, r0
  402e5a:	4686      	mov	lr, r0
  402e5c:	d018      	beq.n	402e90 <floor+0x60>
  402e5e:	a336      	add	r3, pc, #216	; (adr r3, 402f38 <floor+0x108>)
  402e60:	e9d3 2300 	ldrd	r2, r3, [r3]
  402e64:	f000 f8fc 	bl	403060 <__adddf3>
  402e68:	2200      	movs	r2, #0
  402e6a:	2300      	movs	r3, #0
  402e6c:	f000 fd3a 	bl	4038e4 <__aeabi_dcmpgt>
  402e70:	b120      	cbz	r0, 402e7c <floor+0x4c>
  402e72:	2d00      	cmp	r5, #0
  402e74:	db42      	blt.n	402efc <floor+0xcc>
  402e76:	ea28 0509 	bic.w	r5, r8, r9
  402e7a:	2700      	movs	r7, #0
  402e7c:	463c      	mov	r4, r7
  402e7e:	4629      	mov	r1, r5
  402e80:	4620      	mov	r0, r4
  402e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402e86:	2e33      	cmp	r6, #51	; 0x33
  402e88:	dd06      	ble.n	402e98 <floor+0x68>
  402e8a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  402e8e:	d02f      	beq.n	402ef0 <floor+0xc0>
  402e90:	4619      	mov	r1, r3
  402e92:	4620      	mov	r0, r4
  402e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402e98:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  402e9c:	f04f 39ff 	mov.w	r9, #4294967295
  402ea0:	fa29 f902 	lsr.w	r9, r9, r2
  402ea4:	ea10 0f09 	tst.w	r0, r9
  402ea8:	d0f2      	beq.n	402e90 <floor+0x60>
  402eaa:	a323      	add	r3, pc, #140	; (adr r3, 402f38 <floor+0x108>)
  402eac:	e9d3 2300 	ldrd	r2, r3, [r3]
  402eb0:	f000 f8d6 	bl	403060 <__adddf3>
  402eb4:	2200      	movs	r2, #0
  402eb6:	2300      	movs	r3, #0
  402eb8:	f000 fd14 	bl	4038e4 <__aeabi_dcmpgt>
  402ebc:	2800      	cmp	r0, #0
  402ebe:	d0dd      	beq.n	402e7c <floor+0x4c>
  402ec0:	2d00      	cmp	r5, #0
  402ec2:	db21      	blt.n	402f08 <floor+0xd8>
  402ec4:	4645      	mov	r5, r8
  402ec6:	ea27 0709 	bic.w	r7, r7, r9
  402eca:	463c      	mov	r4, r7
  402ecc:	4629      	mov	r1, r5
  402ece:	e7d7      	b.n	402e80 <floor+0x50>
  402ed0:	a319      	add	r3, pc, #100	; (adr r3, 402f38 <floor+0x108>)
  402ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ed6:	f000 f8c3 	bl	403060 <__adddf3>
  402eda:	2200      	movs	r2, #0
  402edc:	2300      	movs	r3, #0
  402ede:	f000 fd01 	bl	4038e4 <__aeabi_dcmpgt>
  402ee2:	2800      	cmp	r0, #0
  402ee4:	d0ca      	beq.n	402e7c <floor+0x4c>
  402ee6:	2d00      	cmp	r5, #0
  402ee8:	db19      	blt.n	402f1e <floor+0xee>
  402eea:	2700      	movs	r7, #0
  402eec:	463d      	mov	r5, r7
  402eee:	e7c5      	b.n	402e7c <floor+0x4c>
  402ef0:	4602      	mov	r2, r0
  402ef2:	460b      	mov	r3, r1
  402ef4:	f000 f8b4 	bl	403060 <__adddf3>
  402ef8:	4604      	mov	r4, r0
  402efa:	e7ca      	b.n	402e92 <floor+0x62>
  402efc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  402f00:	fa43 f606 	asr.w	r6, r3, r6
  402f04:	44b0      	add	r8, r6
  402f06:	e7b6      	b.n	402e76 <floor+0x46>
  402f08:	2e14      	cmp	r6, #20
  402f0a:	d010      	beq.n	402f2e <floor+0xfe>
  402f0c:	2301      	movs	r3, #1
  402f0e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  402f12:	fa03 f606 	lsl.w	r6, r3, r6
  402f16:	1937      	adds	r7, r6, r4
  402f18:	bf28      	it	cs
  402f1a:	4498      	addcs	r8, r3
  402f1c:	e7d2      	b.n	402ec4 <floor+0x94>
  402f1e:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  402f22:	4b08      	ldr	r3, [pc, #32]	; (402f44 <floor+0x114>)
  402f24:	4322      	orrs	r2, r4
  402f26:	bf18      	it	ne
  402f28:	461d      	movne	r5, r3
  402f2a:	2700      	movs	r7, #0
  402f2c:	e7a6      	b.n	402e7c <floor+0x4c>
  402f2e:	f105 0801 	add.w	r8, r5, #1
  402f32:	e7c7      	b.n	402ec4 <floor+0x94>
  402f34:	f3af 8000 	nop.w
  402f38:	8800759c 	.word	0x8800759c
  402f3c:	7e37e43c 	.word	0x7e37e43c
  402f40:	000fffff 	.word	0x000fffff
  402f44:	bff00000 	.word	0xbff00000

00402f48 <scalbn>:
  402f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402f4a:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402f4e:	4604      	mov	r4, r0
  402f50:	460d      	mov	r5, r1
  402f52:	460b      	mov	r3, r1
  402f54:	4617      	mov	r7, r2
  402f56:	bb0e      	cbnz	r6, 402f9c <scalbn+0x54>
  402f58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  402f5c:	4303      	orrs	r3, r0
  402f5e:	4686      	mov	lr, r0
  402f60:	d025      	beq.n	402fae <scalbn+0x66>
  402f62:	2200      	movs	r2, #0
  402f64:	4b34      	ldr	r3, [pc, #208]	; (403038 <scalbn+0xf0>)
  402f66:	f000 fa2d 	bl	4033c4 <__aeabi_dmul>
  402f6a:	4a34      	ldr	r2, [pc, #208]	; (40303c <scalbn+0xf4>)
  402f6c:	4297      	cmp	r7, r2
  402f6e:	4604      	mov	r4, r0
  402f70:	460d      	mov	r5, r1
  402f72:	460b      	mov	r3, r1
  402f74:	db2a      	blt.n	402fcc <scalbn+0x84>
  402f76:	f3c1 560a 	ubfx	r6, r1, #20, #11
  402f7a:	3e36      	subs	r6, #54	; 0x36
  402f7c:	443e      	add	r6, r7
  402f7e:	f240 72fe 	movw	r2, #2046	; 0x7fe
  402f82:	4296      	cmp	r6, r2
  402f84:	dc28      	bgt.n	402fd8 <scalbn+0x90>
  402f86:	2e00      	cmp	r6, #0
  402f88:	dd12      	ble.n	402fb0 <scalbn+0x68>
  402f8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402f8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402f92:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  402f96:	4620      	mov	r0, r4
  402f98:	4629      	mov	r1, r5
  402f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402f9c:	f240 72ff 	movw	r2, #2047	; 0x7ff
  402fa0:	4296      	cmp	r6, r2
  402fa2:	d1eb      	bne.n	402f7c <scalbn+0x34>
  402fa4:	4602      	mov	r2, r0
  402fa6:	460b      	mov	r3, r1
  402fa8:	f000 f85a 	bl	403060 <__adddf3>
  402fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402fb0:	f116 0f35 	cmn.w	r6, #53	; 0x35
  402fb4:	da1d      	bge.n	402ff2 <scalbn+0xaa>
  402fb6:	f24c 3350 	movw	r3, #50000	; 0xc350
  402fba:	429f      	cmp	r7, r3
  402fbc:	4622      	mov	r2, r4
  402fbe:	462b      	mov	r3, r5
  402fc0:	dc25      	bgt.n	40300e <scalbn+0xc6>
  402fc2:	a119      	add	r1, pc, #100	; (adr r1, 403028 <scalbn+0xe0>)
  402fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
  402fc8:	f000 f83c 	bl	403044 <copysign>
  402fcc:	a316      	add	r3, pc, #88	; (adr r3, 403028 <scalbn+0xe0>)
  402fce:	e9d3 2300 	ldrd	r2, r3, [r3]
  402fd2:	f000 f9f7 	bl	4033c4 <__aeabi_dmul>
  402fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402fd8:	4622      	mov	r2, r4
  402fda:	462b      	mov	r3, r5
  402fdc:	a114      	add	r1, pc, #80	; (adr r1, 403030 <scalbn+0xe8>)
  402fde:	e9d1 0100 	ldrd	r0, r1, [r1]
  402fe2:	f000 f82f 	bl	403044 <copysign>
  402fe6:	a312      	add	r3, pc, #72	; (adr r3, 403030 <scalbn+0xe8>)
  402fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
  402fec:	f000 f9ea 	bl	4033c4 <__aeabi_dmul>
  402ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402ff2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  402ff6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  402ffa:	3636      	adds	r6, #54	; 0x36
  402ffc:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  403000:	4620      	mov	r0, r4
  403002:	4629      	mov	r1, r5
  403004:	2200      	movs	r2, #0
  403006:	4b0e      	ldr	r3, [pc, #56]	; (403040 <scalbn+0xf8>)
  403008:	f000 f9dc 	bl	4033c4 <__aeabi_dmul>
  40300c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40300e:	a108      	add	r1, pc, #32	; (adr r1, 403030 <scalbn+0xe8>)
  403010:	e9d1 0100 	ldrd	r0, r1, [r1]
  403014:	f000 f816 	bl	403044 <copysign>
  403018:	a305      	add	r3, pc, #20	; (adr r3, 403030 <scalbn+0xe8>)
  40301a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40301e:	f000 f9d1 	bl	4033c4 <__aeabi_dmul>
  403022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403024:	f3af 8000 	nop.w
  403028:	c2f8f359 	.word	0xc2f8f359
  40302c:	01a56e1f 	.word	0x01a56e1f
  403030:	8800759c 	.word	0x8800759c
  403034:	7e37e43c 	.word	0x7e37e43c
  403038:	43500000 	.word	0x43500000
  40303c:	ffff3cb0 	.word	0xffff3cb0
  403040:	3c900000 	.word	0x3c900000

00403044 <copysign>:
  403044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  403048:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  40304c:	ea42 0103 	orr.w	r1, r2, r3
  403050:	4770      	bx	lr
  403052:	bf00      	nop

00403054 <__aeabi_drsub>:
  403054:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403058:	e002      	b.n	403060 <__adddf3>
  40305a:	bf00      	nop

0040305c <__aeabi_dsub>:
  40305c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403060 <__adddf3>:
  403060:	b530      	push	{r4, r5, lr}
  403062:	ea4f 0441 	mov.w	r4, r1, lsl #1
  403066:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40306a:	ea94 0f05 	teq	r4, r5
  40306e:	bf08      	it	eq
  403070:	ea90 0f02 	teqeq	r0, r2
  403074:	bf1f      	itttt	ne
  403076:	ea54 0c00 	orrsne.w	ip, r4, r0
  40307a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40307e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403082:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403086:	f000 80e2 	beq.w	40324e <__adddf3+0x1ee>
  40308a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40308e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403092:	bfb8      	it	lt
  403094:	426d      	neglt	r5, r5
  403096:	dd0c      	ble.n	4030b2 <__adddf3+0x52>
  403098:	442c      	add	r4, r5
  40309a:	ea80 0202 	eor.w	r2, r0, r2
  40309e:	ea81 0303 	eor.w	r3, r1, r3
  4030a2:	ea82 0000 	eor.w	r0, r2, r0
  4030a6:	ea83 0101 	eor.w	r1, r3, r1
  4030aa:	ea80 0202 	eor.w	r2, r0, r2
  4030ae:	ea81 0303 	eor.w	r3, r1, r3
  4030b2:	2d36      	cmp	r5, #54	; 0x36
  4030b4:	bf88      	it	hi
  4030b6:	bd30      	pophi	{r4, r5, pc}
  4030b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4030bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4030c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4030c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4030c8:	d002      	beq.n	4030d0 <__adddf3+0x70>
  4030ca:	4240      	negs	r0, r0
  4030cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4030d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4030d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4030d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4030dc:	d002      	beq.n	4030e4 <__adddf3+0x84>
  4030de:	4252      	negs	r2, r2
  4030e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4030e4:	ea94 0f05 	teq	r4, r5
  4030e8:	f000 80a7 	beq.w	40323a <__adddf3+0x1da>
  4030ec:	f1a4 0401 	sub.w	r4, r4, #1
  4030f0:	f1d5 0e20 	rsbs	lr, r5, #32
  4030f4:	db0d      	blt.n	403112 <__adddf3+0xb2>
  4030f6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4030fa:	fa22 f205 	lsr.w	r2, r2, r5
  4030fe:	1880      	adds	r0, r0, r2
  403100:	f141 0100 	adc.w	r1, r1, #0
  403104:	fa03 f20e 	lsl.w	r2, r3, lr
  403108:	1880      	adds	r0, r0, r2
  40310a:	fa43 f305 	asr.w	r3, r3, r5
  40310e:	4159      	adcs	r1, r3
  403110:	e00e      	b.n	403130 <__adddf3+0xd0>
  403112:	f1a5 0520 	sub.w	r5, r5, #32
  403116:	f10e 0e20 	add.w	lr, lr, #32
  40311a:	2a01      	cmp	r2, #1
  40311c:	fa03 fc0e 	lsl.w	ip, r3, lr
  403120:	bf28      	it	cs
  403122:	f04c 0c02 	orrcs.w	ip, ip, #2
  403126:	fa43 f305 	asr.w	r3, r3, r5
  40312a:	18c0      	adds	r0, r0, r3
  40312c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403130:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403134:	d507      	bpl.n	403146 <__adddf3+0xe6>
  403136:	f04f 0e00 	mov.w	lr, #0
  40313a:	f1dc 0c00 	rsbs	ip, ip, #0
  40313e:	eb7e 0000 	sbcs.w	r0, lr, r0
  403142:	eb6e 0101 	sbc.w	r1, lr, r1
  403146:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40314a:	d31b      	bcc.n	403184 <__adddf3+0x124>
  40314c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403150:	d30c      	bcc.n	40316c <__adddf3+0x10c>
  403152:	0849      	lsrs	r1, r1, #1
  403154:	ea5f 0030 	movs.w	r0, r0, rrx
  403158:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40315c:	f104 0401 	add.w	r4, r4, #1
  403160:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403164:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403168:	f080 809a 	bcs.w	4032a0 <__adddf3+0x240>
  40316c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403170:	bf08      	it	eq
  403172:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403176:	f150 0000 	adcs.w	r0, r0, #0
  40317a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40317e:	ea41 0105 	orr.w	r1, r1, r5
  403182:	bd30      	pop	{r4, r5, pc}
  403184:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403188:	4140      	adcs	r0, r0
  40318a:	eb41 0101 	adc.w	r1, r1, r1
  40318e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403192:	f1a4 0401 	sub.w	r4, r4, #1
  403196:	d1e9      	bne.n	40316c <__adddf3+0x10c>
  403198:	f091 0f00 	teq	r1, #0
  40319c:	bf04      	itt	eq
  40319e:	4601      	moveq	r1, r0
  4031a0:	2000      	moveq	r0, #0
  4031a2:	fab1 f381 	clz	r3, r1
  4031a6:	bf08      	it	eq
  4031a8:	3320      	addeq	r3, #32
  4031aa:	f1a3 030b 	sub.w	r3, r3, #11
  4031ae:	f1b3 0220 	subs.w	r2, r3, #32
  4031b2:	da0c      	bge.n	4031ce <__adddf3+0x16e>
  4031b4:	320c      	adds	r2, #12
  4031b6:	dd08      	ble.n	4031ca <__adddf3+0x16a>
  4031b8:	f102 0c14 	add.w	ip, r2, #20
  4031bc:	f1c2 020c 	rsb	r2, r2, #12
  4031c0:	fa01 f00c 	lsl.w	r0, r1, ip
  4031c4:	fa21 f102 	lsr.w	r1, r1, r2
  4031c8:	e00c      	b.n	4031e4 <__adddf3+0x184>
  4031ca:	f102 0214 	add.w	r2, r2, #20
  4031ce:	bfd8      	it	le
  4031d0:	f1c2 0c20 	rsble	ip, r2, #32
  4031d4:	fa01 f102 	lsl.w	r1, r1, r2
  4031d8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4031dc:	bfdc      	itt	le
  4031de:	ea41 010c 	orrle.w	r1, r1, ip
  4031e2:	4090      	lslle	r0, r2
  4031e4:	1ae4      	subs	r4, r4, r3
  4031e6:	bfa2      	ittt	ge
  4031e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4031ec:	4329      	orrge	r1, r5
  4031ee:	bd30      	popge	{r4, r5, pc}
  4031f0:	ea6f 0404 	mvn.w	r4, r4
  4031f4:	3c1f      	subs	r4, #31
  4031f6:	da1c      	bge.n	403232 <__adddf3+0x1d2>
  4031f8:	340c      	adds	r4, #12
  4031fa:	dc0e      	bgt.n	40321a <__adddf3+0x1ba>
  4031fc:	f104 0414 	add.w	r4, r4, #20
  403200:	f1c4 0220 	rsb	r2, r4, #32
  403204:	fa20 f004 	lsr.w	r0, r0, r4
  403208:	fa01 f302 	lsl.w	r3, r1, r2
  40320c:	ea40 0003 	orr.w	r0, r0, r3
  403210:	fa21 f304 	lsr.w	r3, r1, r4
  403214:	ea45 0103 	orr.w	r1, r5, r3
  403218:	bd30      	pop	{r4, r5, pc}
  40321a:	f1c4 040c 	rsb	r4, r4, #12
  40321e:	f1c4 0220 	rsb	r2, r4, #32
  403222:	fa20 f002 	lsr.w	r0, r0, r2
  403226:	fa01 f304 	lsl.w	r3, r1, r4
  40322a:	ea40 0003 	orr.w	r0, r0, r3
  40322e:	4629      	mov	r1, r5
  403230:	bd30      	pop	{r4, r5, pc}
  403232:	fa21 f004 	lsr.w	r0, r1, r4
  403236:	4629      	mov	r1, r5
  403238:	bd30      	pop	{r4, r5, pc}
  40323a:	f094 0f00 	teq	r4, #0
  40323e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403242:	bf06      	itte	eq
  403244:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403248:	3401      	addeq	r4, #1
  40324a:	3d01      	subne	r5, #1
  40324c:	e74e      	b.n	4030ec <__adddf3+0x8c>
  40324e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403252:	bf18      	it	ne
  403254:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403258:	d029      	beq.n	4032ae <__adddf3+0x24e>
  40325a:	ea94 0f05 	teq	r4, r5
  40325e:	bf08      	it	eq
  403260:	ea90 0f02 	teqeq	r0, r2
  403264:	d005      	beq.n	403272 <__adddf3+0x212>
  403266:	ea54 0c00 	orrs.w	ip, r4, r0
  40326a:	bf04      	itt	eq
  40326c:	4619      	moveq	r1, r3
  40326e:	4610      	moveq	r0, r2
  403270:	bd30      	pop	{r4, r5, pc}
  403272:	ea91 0f03 	teq	r1, r3
  403276:	bf1e      	ittt	ne
  403278:	2100      	movne	r1, #0
  40327a:	2000      	movne	r0, #0
  40327c:	bd30      	popne	{r4, r5, pc}
  40327e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403282:	d105      	bne.n	403290 <__adddf3+0x230>
  403284:	0040      	lsls	r0, r0, #1
  403286:	4149      	adcs	r1, r1
  403288:	bf28      	it	cs
  40328a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40328e:	bd30      	pop	{r4, r5, pc}
  403290:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403294:	bf3c      	itt	cc
  403296:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40329a:	bd30      	popcc	{r4, r5, pc}
  40329c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4032a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4032a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4032a8:	f04f 0000 	mov.w	r0, #0
  4032ac:	bd30      	pop	{r4, r5, pc}
  4032ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4032b2:	bf1a      	itte	ne
  4032b4:	4619      	movne	r1, r3
  4032b6:	4610      	movne	r0, r2
  4032b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4032bc:	bf1c      	itt	ne
  4032be:	460b      	movne	r3, r1
  4032c0:	4602      	movne	r2, r0
  4032c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4032c6:	bf06      	itte	eq
  4032c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4032cc:	ea91 0f03 	teqeq	r1, r3
  4032d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4032d4:	bd30      	pop	{r4, r5, pc}
  4032d6:	bf00      	nop

004032d8 <__aeabi_ui2d>:
  4032d8:	f090 0f00 	teq	r0, #0
  4032dc:	bf04      	itt	eq
  4032de:	2100      	moveq	r1, #0
  4032e0:	4770      	bxeq	lr
  4032e2:	b530      	push	{r4, r5, lr}
  4032e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4032e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4032ec:	f04f 0500 	mov.w	r5, #0
  4032f0:	f04f 0100 	mov.w	r1, #0
  4032f4:	e750      	b.n	403198 <__adddf3+0x138>
  4032f6:	bf00      	nop

004032f8 <__aeabi_i2d>:
  4032f8:	f090 0f00 	teq	r0, #0
  4032fc:	bf04      	itt	eq
  4032fe:	2100      	moveq	r1, #0
  403300:	4770      	bxeq	lr
  403302:	b530      	push	{r4, r5, lr}
  403304:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403308:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40330c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403310:	bf48      	it	mi
  403312:	4240      	negmi	r0, r0
  403314:	f04f 0100 	mov.w	r1, #0
  403318:	e73e      	b.n	403198 <__adddf3+0x138>
  40331a:	bf00      	nop

0040331c <__aeabi_f2d>:
  40331c:	0042      	lsls	r2, r0, #1
  40331e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403322:	ea4f 0131 	mov.w	r1, r1, rrx
  403326:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40332a:	bf1f      	itttt	ne
  40332c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403330:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403334:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403338:	4770      	bxne	lr
  40333a:	f092 0f00 	teq	r2, #0
  40333e:	bf14      	ite	ne
  403340:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403344:	4770      	bxeq	lr
  403346:	b530      	push	{r4, r5, lr}
  403348:	f44f 7460 	mov.w	r4, #896	; 0x380
  40334c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403354:	e720      	b.n	403198 <__adddf3+0x138>
  403356:	bf00      	nop

00403358 <__aeabi_ul2d>:
  403358:	ea50 0201 	orrs.w	r2, r0, r1
  40335c:	bf08      	it	eq
  40335e:	4770      	bxeq	lr
  403360:	b530      	push	{r4, r5, lr}
  403362:	f04f 0500 	mov.w	r5, #0
  403366:	e00a      	b.n	40337e <__aeabi_l2d+0x16>

00403368 <__aeabi_l2d>:
  403368:	ea50 0201 	orrs.w	r2, r0, r1
  40336c:	bf08      	it	eq
  40336e:	4770      	bxeq	lr
  403370:	b530      	push	{r4, r5, lr}
  403372:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403376:	d502      	bpl.n	40337e <__aeabi_l2d+0x16>
  403378:	4240      	negs	r0, r0
  40337a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40337e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403382:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403386:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40338a:	f43f aedc 	beq.w	403146 <__adddf3+0xe6>
  40338e:	f04f 0203 	mov.w	r2, #3
  403392:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403396:	bf18      	it	ne
  403398:	3203      	addne	r2, #3
  40339a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40339e:	bf18      	it	ne
  4033a0:	3203      	addne	r2, #3
  4033a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4033a6:	f1c2 0320 	rsb	r3, r2, #32
  4033aa:	fa00 fc03 	lsl.w	ip, r0, r3
  4033ae:	fa20 f002 	lsr.w	r0, r0, r2
  4033b2:	fa01 fe03 	lsl.w	lr, r1, r3
  4033b6:	ea40 000e 	orr.w	r0, r0, lr
  4033ba:	fa21 f102 	lsr.w	r1, r1, r2
  4033be:	4414      	add	r4, r2
  4033c0:	e6c1      	b.n	403146 <__adddf3+0xe6>
  4033c2:	bf00      	nop

004033c4 <__aeabi_dmul>:
  4033c4:	b570      	push	{r4, r5, r6, lr}
  4033c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4033ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4033ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4033d2:	bf1d      	ittte	ne
  4033d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4033d8:	ea94 0f0c 	teqne	r4, ip
  4033dc:	ea95 0f0c 	teqne	r5, ip
  4033e0:	f000 f8de 	bleq	4035a0 <__aeabi_dmul+0x1dc>
  4033e4:	442c      	add	r4, r5
  4033e6:	ea81 0603 	eor.w	r6, r1, r3
  4033ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4033ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4033f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4033f6:	bf18      	it	ne
  4033f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4033fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403404:	d038      	beq.n	403478 <__aeabi_dmul+0xb4>
  403406:	fba0 ce02 	umull	ip, lr, r0, r2
  40340a:	f04f 0500 	mov.w	r5, #0
  40340e:	fbe1 e502 	umlal	lr, r5, r1, r2
  403412:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403416:	fbe0 e503 	umlal	lr, r5, r0, r3
  40341a:	f04f 0600 	mov.w	r6, #0
  40341e:	fbe1 5603 	umlal	r5, r6, r1, r3
  403422:	f09c 0f00 	teq	ip, #0
  403426:	bf18      	it	ne
  403428:	f04e 0e01 	orrne.w	lr, lr, #1
  40342c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403430:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403434:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403438:	d204      	bcs.n	403444 <__aeabi_dmul+0x80>
  40343a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40343e:	416d      	adcs	r5, r5
  403440:	eb46 0606 	adc.w	r6, r6, r6
  403444:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403448:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40344c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403450:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403454:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403458:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40345c:	bf88      	it	hi
  40345e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403462:	d81e      	bhi.n	4034a2 <__aeabi_dmul+0xde>
  403464:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403468:	bf08      	it	eq
  40346a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40346e:	f150 0000 	adcs.w	r0, r0, #0
  403472:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403476:	bd70      	pop	{r4, r5, r6, pc}
  403478:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40347c:	ea46 0101 	orr.w	r1, r6, r1
  403480:	ea40 0002 	orr.w	r0, r0, r2
  403484:	ea81 0103 	eor.w	r1, r1, r3
  403488:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40348c:	bfc2      	ittt	gt
  40348e:	ebd4 050c 	rsbsgt	r5, r4, ip
  403492:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403496:	bd70      	popgt	{r4, r5, r6, pc}
  403498:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40349c:	f04f 0e00 	mov.w	lr, #0
  4034a0:	3c01      	subs	r4, #1
  4034a2:	f300 80ab 	bgt.w	4035fc <__aeabi_dmul+0x238>
  4034a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4034aa:	bfde      	ittt	le
  4034ac:	2000      	movle	r0, #0
  4034ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4034b2:	bd70      	pople	{r4, r5, r6, pc}
  4034b4:	f1c4 0400 	rsb	r4, r4, #0
  4034b8:	3c20      	subs	r4, #32
  4034ba:	da35      	bge.n	403528 <__aeabi_dmul+0x164>
  4034bc:	340c      	adds	r4, #12
  4034be:	dc1b      	bgt.n	4034f8 <__aeabi_dmul+0x134>
  4034c0:	f104 0414 	add.w	r4, r4, #20
  4034c4:	f1c4 0520 	rsb	r5, r4, #32
  4034c8:	fa00 f305 	lsl.w	r3, r0, r5
  4034cc:	fa20 f004 	lsr.w	r0, r0, r4
  4034d0:	fa01 f205 	lsl.w	r2, r1, r5
  4034d4:	ea40 0002 	orr.w	r0, r0, r2
  4034d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4034dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4034e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4034e4:	fa21 f604 	lsr.w	r6, r1, r4
  4034e8:	eb42 0106 	adc.w	r1, r2, r6
  4034ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4034f0:	bf08      	it	eq
  4034f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4034f6:	bd70      	pop	{r4, r5, r6, pc}
  4034f8:	f1c4 040c 	rsb	r4, r4, #12
  4034fc:	f1c4 0520 	rsb	r5, r4, #32
  403500:	fa00 f304 	lsl.w	r3, r0, r4
  403504:	fa20 f005 	lsr.w	r0, r0, r5
  403508:	fa01 f204 	lsl.w	r2, r1, r4
  40350c:	ea40 0002 	orr.w	r0, r0, r2
  403510:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403514:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403518:	f141 0100 	adc.w	r1, r1, #0
  40351c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403520:	bf08      	it	eq
  403522:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403526:	bd70      	pop	{r4, r5, r6, pc}
  403528:	f1c4 0520 	rsb	r5, r4, #32
  40352c:	fa00 f205 	lsl.w	r2, r0, r5
  403530:	ea4e 0e02 	orr.w	lr, lr, r2
  403534:	fa20 f304 	lsr.w	r3, r0, r4
  403538:	fa01 f205 	lsl.w	r2, r1, r5
  40353c:	ea43 0302 	orr.w	r3, r3, r2
  403540:	fa21 f004 	lsr.w	r0, r1, r4
  403544:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403548:	fa21 f204 	lsr.w	r2, r1, r4
  40354c:	ea20 0002 	bic.w	r0, r0, r2
  403550:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403554:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403558:	bf08      	it	eq
  40355a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40355e:	bd70      	pop	{r4, r5, r6, pc}
  403560:	f094 0f00 	teq	r4, #0
  403564:	d10f      	bne.n	403586 <__aeabi_dmul+0x1c2>
  403566:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40356a:	0040      	lsls	r0, r0, #1
  40356c:	eb41 0101 	adc.w	r1, r1, r1
  403570:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403574:	bf08      	it	eq
  403576:	3c01      	subeq	r4, #1
  403578:	d0f7      	beq.n	40356a <__aeabi_dmul+0x1a6>
  40357a:	ea41 0106 	orr.w	r1, r1, r6
  40357e:	f095 0f00 	teq	r5, #0
  403582:	bf18      	it	ne
  403584:	4770      	bxne	lr
  403586:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40358a:	0052      	lsls	r2, r2, #1
  40358c:	eb43 0303 	adc.w	r3, r3, r3
  403590:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403594:	bf08      	it	eq
  403596:	3d01      	subeq	r5, #1
  403598:	d0f7      	beq.n	40358a <__aeabi_dmul+0x1c6>
  40359a:	ea43 0306 	orr.w	r3, r3, r6
  40359e:	4770      	bx	lr
  4035a0:	ea94 0f0c 	teq	r4, ip
  4035a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4035a8:	bf18      	it	ne
  4035aa:	ea95 0f0c 	teqne	r5, ip
  4035ae:	d00c      	beq.n	4035ca <__aeabi_dmul+0x206>
  4035b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4035b4:	bf18      	it	ne
  4035b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4035ba:	d1d1      	bne.n	403560 <__aeabi_dmul+0x19c>
  4035bc:	ea81 0103 	eor.w	r1, r1, r3
  4035c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4035c4:	f04f 0000 	mov.w	r0, #0
  4035c8:	bd70      	pop	{r4, r5, r6, pc}
  4035ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4035ce:	bf06      	itte	eq
  4035d0:	4610      	moveq	r0, r2
  4035d2:	4619      	moveq	r1, r3
  4035d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4035d8:	d019      	beq.n	40360e <__aeabi_dmul+0x24a>
  4035da:	ea94 0f0c 	teq	r4, ip
  4035de:	d102      	bne.n	4035e6 <__aeabi_dmul+0x222>
  4035e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4035e4:	d113      	bne.n	40360e <__aeabi_dmul+0x24a>
  4035e6:	ea95 0f0c 	teq	r5, ip
  4035ea:	d105      	bne.n	4035f8 <__aeabi_dmul+0x234>
  4035ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4035f0:	bf1c      	itt	ne
  4035f2:	4610      	movne	r0, r2
  4035f4:	4619      	movne	r1, r3
  4035f6:	d10a      	bne.n	40360e <__aeabi_dmul+0x24a>
  4035f8:	ea81 0103 	eor.w	r1, r1, r3
  4035fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403600:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403608:	f04f 0000 	mov.w	r0, #0
  40360c:	bd70      	pop	{r4, r5, r6, pc}
  40360e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403612:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403616:	bd70      	pop	{r4, r5, r6, pc}

00403618 <__aeabi_ddiv>:
  403618:	b570      	push	{r4, r5, r6, lr}
  40361a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40361e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403626:	bf1d      	ittte	ne
  403628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40362c:	ea94 0f0c 	teqne	r4, ip
  403630:	ea95 0f0c 	teqne	r5, ip
  403634:	f000 f8a7 	bleq	403786 <__aeabi_ddiv+0x16e>
  403638:	eba4 0405 	sub.w	r4, r4, r5
  40363c:	ea81 0e03 	eor.w	lr, r1, r3
  403640:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403644:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403648:	f000 8088 	beq.w	40375c <__aeabi_ddiv+0x144>
  40364c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403650:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403654:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403658:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40365c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403660:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403664:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403668:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40366c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403670:	429d      	cmp	r5, r3
  403672:	bf08      	it	eq
  403674:	4296      	cmpeq	r6, r2
  403676:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40367a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40367e:	d202      	bcs.n	403686 <__aeabi_ddiv+0x6e>
  403680:	085b      	lsrs	r3, r3, #1
  403682:	ea4f 0232 	mov.w	r2, r2, rrx
  403686:	1ab6      	subs	r6, r6, r2
  403688:	eb65 0503 	sbc.w	r5, r5, r3
  40368c:	085b      	lsrs	r3, r3, #1
  40368e:	ea4f 0232 	mov.w	r2, r2, rrx
  403692:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403696:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40369a:	ebb6 0e02 	subs.w	lr, r6, r2
  40369e:	eb75 0e03 	sbcs.w	lr, r5, r3
  4036a2:	bf22      	ittt	cs
  4036a4:	1ab6      	subcs	r6, r6, r2
  4036a6:	4675      	movcs	r5, lr
  4036a8:	ea40 000c 	orrcs.w	r0, r0, ip
  4036ac:	085b      	lsrs	r3, r3, #1
  4036ae:	ea4f 0232 	mov.w	r2, r2, rrx
  4036b2:	ebb6 0e02 	subs.w	lr, r6, r2
  4036b6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4036ba:	bf22      	ittt	cs
  4036bc:	1ab6      	subcs	r6, r6, r2
  4036be:	4675      	movcs	r5, lr
  4036c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4036c4:	085b      	lsrs	r3, r3, #1
  4036c6:	ea4f 0232 	mov.w	r2, r2, rrx
  4036ca:	ebb6 0e02 	subs.w	lr, r6, r2
  4036ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  4036d2:	bf22      	ittt	cs
  4036d4:	1ab6      	subcs	r6, r6, r2
  4036d6:	4675      	movcs	r5, lr
  4036d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4036dc:	085b      	lsrs	r3, r3, #1
  4036de:	ea4f 0232 	mov.w	r2, r2, rrx
  4036e2:	ebb6 0e02 	subs.w	lr, r6, r2
  4036e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4036ea:	bf22      	ittt	cs
  4036ec:	1ab6      	subcs	r6, r6, r2
  4036ee:	4675      	movcs	r5, lr
  4036f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4036f4:	ea55 0e06 	orrs.w	lr, r5, r6
  4036f8:	d018      	beq.n	40372c <__aeabi_ddiv+0x114>
  4036fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4036fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403702:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403706:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40370a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40370e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403712:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403716:	d1c0      	bne.n	40369a <__aeabi_ddiv+0x82>
  403718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40371c:	d10b      	bne.n	403736 <__aeabi_ddiv+0x11e>
  40371e:	ea41 0100 	orr.w	r1, r1, r0
  403722:	f04f 0000 	mov.w	r0, #0
  403726:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40372a:	e7b6      	b.n	40369a <__aeabi_ddiv+0x82>
  40372c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403730:	bf04      	itt	eq
  403732:	4301      	orreq	r1, r0
  403734:	2000      	moveq	r0, #0
  403736:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40373a:	bf88      	it	hi
  40373c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403740:	f63f aeaf 	bhi.w	4034a2 <__aeabi_dmul+0xde>
  403744:	ebb5 0c03 	subs.w	ip, r5, r3
  403748:	bf04      	itt	eq
  40374a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40374e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403752:	f150 0000 	adcs.w	r0, r0, #0
  403756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40375a:	bd70      	pop	{r4, r5, r6, pc}
  40375c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403760:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403764:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403768:	bfc2      	ittt	gt
  40376a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40376e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403772:	bd70      	popgt	{r4, r5, r6, pc}
  403774:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403778:	f04f 0e00 	mov.w	lr, #0
  40377c:	3c01      	subs	r4, #1
  40377e:	e690      	b.n	4034a2 <__aeabi_dmul+0xde>
  403780:	ea45 0e06 	orr.w	lr, r5, r6
  403784:	e68d      	b.n	4034a2 <__aeabi_dmul+0xde>
  403786:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40378a:	ea94 0f0c 	teq	r4, ip
  40378e:	bf08      	it	eq
  403790:	ea95 0f0c 	teqeq	r5, ip
  403794:	f43f af3b 	beq.w	40360e <__aeabi_dmul+0x24a>
  403798:	ea94 0f0c 	teq	r4, ip
  40379c:	d10a      	bne.n	4037b4 <__aeabi_ddiv+0x19c>
  40379e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4037a2:	f47f af34 	bne.w	40360e <__aeabi_dmul+0x24a>
  4037a6:	ea95 0f0c 	teq	r5, ip
  4037aa:	f47f af25 	bne.w	4035f8 <__aeabi_dmul+0x234>
  4037ae:	4610      	mov	r0, r2
  4037b0:	4619      	mov	r1, r3
  4037b2:	e72c      	b.n	40360e <__aeabi_dmul+0x24a>
  4037b4:	ea95 0f0c 	teq	r5, ip
  4037b8:	d106      	bne.n	4037c8 <__aeabi_ddiv+0x1b0>
  4037ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4037be:	f43f aefd 	beq.w	4035bc <__aeabi_dmul+0x1f8>
  4037c2:	4610      	mov	r0, r2
  4037c4:	4619      	mov	r1, r3
  4037c6:	e722      	b.n	40360e <__aeabi_dmul+0x24a>
  4037c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4037cc:	bf18      	it	ne
  4037ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4037d2:	f47f aec5 	bne.w	403560 <__aeabi_dmul+0x19c>
  4037d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4037da:	f47f af0d 	bne.w	4035f8 <__aeabi_dmul+0x234>
  4037de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4037e2:	f47f aeeb 	bne.w	4035bc <__aeabi_dmul+0x1f8>
  4037e6:	e712      	b.n	40360e <__aeabi_dmul+0x24a>

004037e8 <__gedf2>:
  4037e8:	f04f 3cff 	mov.w	ip, #4294967295
  4037ec:	e006      	b.n	4037fc <__cmpdf2+0x4>
  4037ee:	bf00      	nop

004037f0 <__ledf2>:
  4037f0:	f04f 0c01 	mov.w	ip, #1
  4037f4:	e002      	b.n	4037fc <__cmpdf2+0x4>
  4037f6:	bf00      	nop

004037f8 <__cmpdf2>:
  4037f8:	f04f 0c01 	mov.w	ip, #1
  4037fc:	f84d cd04 	str.w	ip, [sp, #-4]!
  403800:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403804:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40380c:	bf18      	it	ne
  40380e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  403812:	d01b      	beq.n	40384c <__cmpdf2+0x54>
  403814:	b001      	add	sp, #4
  403816:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40381a:	bf0c      	ite	eq
  40381c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403820:	ea91 0f03 	teqne	r1, r3
  403824:	bf02      	ittt	eq
  403826:	ea90 0f02 	teqeq	r0, r2
  40382a:	2000      	moveq	r0, #0
  40382c:	4770      	bxeq	lr
  40382e:	f110 0f00 	cmn.w	r0, #0
  403832:	ea91 0f03 	teq	r1, r3
  403836:	bf58      	it	pl
  403838:	4299      	cmppl	r1, r3
  40383a:	bf08      	it	eq
  40383c:	4290      	cmpeq	r0, r2
  40383e:	bf2c      	ite	cs
  403840:	17d8      	asrcs	r0, r3, #31
  403842:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  403846:	f040 0001 	orr.w	r0, r0, #1
  40384a:	4770      	bx	lr
  40384c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403850:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403854:	d102      	bne.n	40385c <__cmpdf2+0x64>
  403856:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40385a:	d107      	bne.n	40386c <__cmpdf2+0x74>
  40385c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403860:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403864:	d1d6      	bne.n	403814 <__cmpdf2+0x1c>
  403866:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40386a:	d0d3      	beq.n	403814 <__cmpdf2+0x1c>
  40386c:	f85d 0b04 	ldr.w	r0, [sp], #4
  403870:	4770      	bx	lr
  403872:	bf00      	nop

00403874 <__aeabi_cdrcmple>:
  403874:	4684      	mov	ip, r0
  403876:	4610      	mov	r0, r2
  403878:	4662      	mov	r2, ip
  40387a:	468c      	mov	ip, r1
  40387c:	4619      	mov	r1, r3
  40387e:	4663      	mov	r3, ip
  403880:	e000      	b.n	403884 <__aeabi_cdcmpeq>
  403882:	bf00      	nop

00403884 <__aeabi_cdcmpeq>:
  403884:	b501      	push	{r0, lr}
  403886:	f7ff ffb7 	bl	4037f8 <__cmpdf2>
  40388a:	2800      	cmp	r0, #0
  40388c:	bf48      	it	mi
  40388e:	f110 0f00 	cmnmi.w	r0, #0
  403892:	bd01      	pop	{r0, pc}

00403894 <__aeabi_dcmpeq>:
  403894:	f84d ed08 	str.w	lr, [sp, #-8]!
  403898:	f7ff fff4 	bl	403884 <__aeabi_cdcmpeq>
  40389c:	bf0c      	ite	eq
  40389e:	2001      	moveq	r0, #1
  4038a0:	2000      	movne	r0, #0
  4038a2:	f85d fb08 	ldr.w	pc, [sp], #8
  4038a6:	bf00      	nop

004038a8 <__aeabi_dcmplt>:
  4038a8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4038ac:	f7ff ffea 	bl	403884 <__aeabi_cdcmpeq>
  4038b0:	bf34      	ite	cc
  4038b2:	2001      	movcc	r0, #1
  4038b4:	2000      	movcs	r0, #0
  4038b6:	f85d fb08 	ldr.w	pc, [sp], #8
  4038ba:	bf00      	nop

004038bc <__aeabi_dcmple>:
  4038bc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4038c0:	f7ff ffe0 	bl	403884 <__aeabi_cdcmpeq>
  4038c4:	bf94      	ite	ls
  4038c6:	2001      	movls	r0, #1
  4038c8:	2000      	movhi	r0, #0
  4038ca:	f85d fb08 	ldr.w	pc, [sp], #8
  4038ce:	bf00      	nop

004038d0 <__aeabi_dcmpge>:
  4038d0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4038d4:	f7ff ffce 	bl	403874 <__aeabi_cdrcmple>
  4038d8:	bf94      	ite	ls
  4038da:	2001      	movls	r0, #1
  4038dc:	2000      	movhi	r0, #0
  4038de:	f85d fb08 	ldr.w	pc, [sp], #8
  4038e2:	bf00      	nop

004038e4 <__aeabi_dcmpgt>:
  4038e4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4038e8:	f7ff ffc4 	bl	403874 <__aeabi_cdrcmple>
  4038ec:	bf34      	ite	cc
  4038ee:	2001      	movcc	r0, #1
  4038f0:	2000      	movcs	r0, #0
  4038f2:	f85d fb08 	ldr.w	pc, [sp], #8
  4038f6:	bf00      	nop

004038f8 <__aeabi_d2iz>:
  4038f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4038fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403900:	d215      	bcs.n	40392e <__aeabi_d2iz+0x36>
  403902:	d511      	bpl.n	403928 <__aeabi_d2iz+0x30>
  403904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40390c:	d912      	bls.n	403934 <__aeabi_d2iz+0x3c>
  40390e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40391a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40391e:	fa23 f002 	lsr.w	r0, r3, r2
  403922:	bf18      	it	ne
  403924:	4240      	negne	r0, r0
  403926:	4770      	bx	lr
  403928:	f04f 0000 	mov.w	r0, #0
  40392c:	4770      	bx	lr
  40392e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403932:	d105      	bne.n	403940 <__aeabi_d2iz+0x48>
  403934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  403938:	bf08      	it	eq
  40393a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40393e:	4770      	bx	lr
  403940:	f04f 0000 	mov.w	r0, #0
  403944:	4770      	bx	lr
  403946:	bf00      	nop

00403948 <__aeabi_d2f>:
  403948:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40394c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  403950:	bf24      	itt	cs
  403952:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  403956:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40395a:	d90d      	bls.n	403978 <__aeabi_d2f+0x30>
  40395c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403960:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  403964:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  403968:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40396c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  403970:	bf08      	it	eq
  403972:	f020 0001 	biceq.w	r0, r0, #1
  403976:	4770      	bx	lr
  403978:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40397c:	d121      	bne.n	4039c2 <__aeabi_d2f+0x7a>
  40397e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  403982:	bfbc      	itt	lt
  403984:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  403988:	4770      	bxlt	lr
  40398a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40398e:	ea4f 5252 	mov.w	r2, r2, lsr #21
  403992:	f1c2 0218 	rsb	r2, r2, #24
  403996:	f1c2 0c20 	rsb	ip, r2, #32
  40399a:	fa10 f30c 	lsls.w	r3, r0, ip
  40399e:	fa20 f002 	lsr.w	r0, r0, r2
  4039a2:	bf18      	it	ne
  4039a4:	f040 0001 	orrne.w	r0, r0, #1
  4039a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4039ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4039b0:	fa03 fc0c 	lsl.w	ip, r3, ip
  4039b4:	ea40 000c 	orr.w	r0, r0, ip
  4039b8:	fa23 f302 	lsr.w	r3, r3, r2
  4039bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4039c0:	e7cc      	b.n	40395c <__aeabi_d2f+0x14>
  4039c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4039c6:	d107      	bne.n	4039d8 <__aeabi_d2f+0x90>
  4039c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4039cc:	bf1e      	ittt	ne
  4039ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4039d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4039d6:	4770      	bxne	lr
  4039d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4039dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4039e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4039e4:	4770      	bx	lr
  4039e6:	bf00      	nop

004039e8 <__libc_init_array>:
  4039e8:	b570      	push	{r4, r5, r6, lr}
  4039ea:	4e0d      	ldr	r6, [pc, #52]	; (403a20 <__libc_init_array+0x38>)
  4039ec:	4c0d      	ldr	r4, [pc, #52]	; (403a24 <__libc_init_array+0x3c>)
  4039ee:	1ba4      	subs	r4, r4, r6
  4039f0:	10a4      	asrs	r4, r4, #2
  4039f2:	2500      	movs	r5, #0
  4039f4:	42a5      	cmp	r5, r4
  4039f6:	d109      	bne.n	403a0c <__libc_init_array+0x24>
  4039f8:	4e0b      	ldr	r6, [pc, #44]	; (403a28 <__libc_init_array+0x40>)
  4039fa:	4c0c      	ldr	r4, [pc, #48]	; (403a2c <__libc_init_array+0x44>)
  4039fc:	f003 f8cc 	bl	406b98 <_init>
  403a00:	1ba4      	subs	r4, r4, r6
  403a02:	10a4      	asrs	r4, r4, #2
  403a04:	2500      	movs	r5, #0
  403a06:	42a5      	cmp	r5, r4
  403a08:	d105      	bne.n	403a16 <__libc_init_array+0x2e>
  403a0a:	bd70      	pop	{r4, r5, r6, pc}
  403a0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  403a10:	4798      	blx	r3
  403a12:	3501      	adds	r5, #1
  403a14:	e7ee      	b.n	4039f4 <__libc_init_array+0xc>
  403a16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  403a1a:	4798      	blx	r3
  403a1c:	3501      	adds	r5, #1
  403a1e:	e7f2      	b.n	403a06 <__libc_init_array+0x1e>
  403a20:	00406ba4 	.word	0x00406ba4
  403a24:	00406ba4 	.word	0x00406ba4
  403a28:	00406ba4 	.word	0x00406ba4
  403a2c:	00406ba8 	.word	0x00406ba8

00403a30 <memcpy>:
  403a30:	b510      	push	{r4, lr}
  403a32:	1e43      	subs	r3, r0, #1
  403a34:	440a      	add	r2, r1
  403a36:	4291      	cmp	r1, r2
  403a38:	d100      	bne.n	403a3c <memcpy+0xc>
  403a3a:	bd10      	pop	{r4, pc}
  403a3c:	f811 4b01 	ldrb.w	r4, [r1], #1
  403a40:	f803 4f01 	strb.w	r4, [r3, #1]!
  403a44:	e7f7      	b.n	403a36 <memcpy+0x6>

00403a46 <memset>:
  403a46:	4402      	add	r2, r0
  403a48:	4603      	mov	r3, r0
  403a4a:	4293      	cmp	r3, r2
  403a4c:	d100      	bne.n	403a50 <memset+0xa>
  403a4e:	4770      	bx	lr
  403a50:	f803 1b01 	strb.w	r1, [r3], #1
  403a54:	e7f9      	b.n	403a4a <memset+0x4>

00403a56 <__cvt>:
  403a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403a5a:	b088      	sub	sp, #32
  403a5c:	2b00      	cmp	r3, #0
  403a5e:	9f14      	ldr	r7, [sp, #80]	; 0x50
  403a60:	9912      	ldr	r1, [sp, #72]	; 0x48
  403a62:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403a64:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  403a68:	461e      	mov	r6, r3
  403a6a:	f027 0720 	bic.w	r7, r7, #32
  403a6e:	bfbb      	ittet	lt
  403a70:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  403a74:	461e      	movlt	r6, r3
  403a76:	2300      	movge	r3, #0
  403a78:	232d      	movlt	r3, #45	; 0x2d
  403a7a:	2f46      	cmp	r7, #70	; 0x46
  403a7c:	4614      	mov	r4, r2
  403a7e:	700b      	strb	r3, [r1, #0]
  403a80:	d004      	beq.n	403a8c <__cvt+0x36>
  403a82:	2f45      	cmp	r7, #69	; 0x45
  403a84:	d100      	bne.n	403a88 <__cvt+0x32>
  403a86:	3501      	adds	r5, #1
  403a88:	2302      	movs	r3, #2
  403a8a:	e000      	b.n	403a8e <__cvt+0x38>
  403a8c:	2303      	movs	r3, #3
  403a8e:	aa07      	add	r2, sp, #28
  403a90:	9204      	str	r2, [sp, #16]
  403a92:	aa06      	add	r2, sp, #24
  403a94:	9203      	str	r2, [sp, #12]
  403a96:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  403a9a:	4622      	mov	r2, r4
  403a9c:	4633      	mov	r3, r6
  403a9e:	f000 fd9b 	bl	4045d8 <_dtoa_r>
  403aa2:	2f47      	cmp	r7, #71	; 0x47
  403aa4:	4680      	mov	r8, r0
  403aa6:	d102      	bne.n	403aae <__cvt+0x58>
  403aa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403aaa:	07db      	lsls	r3, r3, #31
  403aac:	d526      	bpl.n	403afc <__cvt+0xa6>
  403aae:	2f46      	cmp	r7, #70	; 0x46
  403ab0:	eb08 0905 	add.w	r9, r8, r5
  403ab4:	d111      	bne.n	403ada <__cvt+0x84>
  403ab6:	f898 3000 	ldrb.w	r3, [r8]
  403aba:	2b30      	cmp	r3, #48	; 0x30
  403abc:	d10a      	bne.n	403ad4 <__cvt+0x7e>
  403abe:	2200      	movs	r2, #0
  403ac0:	2300      	movs	r3, #0
  403ac2:	4620      	mov	r0, r4
  403ac4:	4631      	mov	r1, r6
  403ac6:	f7ff fee5 	bl	403894 <__aeabi_dcmpeq>
  403aca:	b918      	cbnz	r0, 403ad4 <__cvt+0x7e>
  403acc:	f1c5 0501 	rsb	r5, r5, #1
  403ad0:	f8ca 5000 	str.w	r5, [sl]
  403ad4:	f8da 3000 	ldr.w	r3, [sl]
  403ad8:	4499      	add	r9, r3
  403ada:	2200      	movs	r2, #0
  403adc:	2300      	movs	r3, #0
  403ade:	4620      	mov	r0, r4
  403ae0:	4631      	mov	r1, r6
  403ae2:	f7ff fed7 	bl	403894 <__aeabi_dcmpeq>
  403ae6:	b938      	cbnz	r0, 403af8 <__cvt+0xa2>
  403ae8:	2230      	movs	r2, #48	; 0x30
  403aea:	9b07      	ldr	r3, [sp, #28]
  403aec:	4599      	cmp	r9, r3
  403aee:	d905      	bls.n	403afc <__cvt+0xa6>
  403af0:	1c59      	adds	r1, r3, #1
  403af2:	9107      	str	r1, [sp, #28]
  403af4:	701a      	strb	r2, [r3, #0]
  403af6:	e7f8      	b.n	403aea <__cvt+0x94>
  403af8:	f8cd 901c 	str.w	r9, [sp, #28]
  403afc:	9b07      	ldr	r3, [sp, #28]
  403afe:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403b00:	eba3 0308 	sub.w	r3, r3, r8
  403b04:	4640      	mov	r0, r8
  403b06:	6013      	str	r3, [r2, #0]
  403b08:	b008      	add	sp, #32
  403b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403b0e <__exponent>:
  403b0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  403b10:	4603      	mov	r3, r0
  403b12:	2900      	cmp	r1, #0
  403b14:	bfb8      	it	lt
  403b16:	4249      	neglt	r1, r1
  403b18:	f803 2b02 	strb.w	r2, [r3], #2
  403b1c:	bfb4      	ite	lt
  403b1e:	222d      	movlt	r2, #45	; 0x2d
  403b20:	222b      	movge	r2, #43	; 0x2b
  403b22:	2909      	cmp	r1, #9
  403b24:	7042      	strb	r2, [r0, #1]
  403b26:	dd20      	ble.n	403b6a <__exponent+0x5c>
  403b28:	f10d 0207 	add.w	r2, sp, #7
  403b2c:	4617      	mov	r7, r2
  403b2e:	260a      	movs	r6, #10
  403b30:	fb91 f5f6 	sdiv	r5, r1, r6
  403b34:	fb06 1115 	mls	r1, r6, r5, r1
  403b38:	3130      	adds	r1, #48	; 0x30
  403b3a:	2d09      	cmp	r5, #9
  403b3c:	f802 1c01 	strb.w	r1, [r2, #-1]
  403b40:	f102 34ff 	add.w	r4, r2, #4294967295
  403b44:	4629      	mov	r1, r5
  403b46:	dc09      	bgt.n	403b5c <__exponent+0x4e>
  403b48:	3130      	adds	r1, #48	; 0x30
  403b4a:	3a02      	subs	r2, #2
  403b4c:	f804 1c01 	strb.w	r1, [r4, #-1]
  403b50:	42ba      	cmp	r2, r7
  403b52:	461c      	mov	r4, r3
  403b54:	d304      	bcc.n	403b60 <__exponent+0x52>
  403b56:	1a20      	subs	r0, r4, r0
  403b58:	b003      	add	sp, #12
  403b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b5c:	4622      	mov	r2, r4
  403b5e:	e7e7      	b.n	403b30 <__exponent+0x22>
  403b60:	f812 1b01 	ldrb.w	r1, [r2], #1
  403b64:	f803 1b01 	strb.w	r1, [r3], #1
  403b68:	e7f2      	b.n	403b50 <__exponent+0x42>
  403b6a:	2230      	movs	r2, #48	; 0x30
  403b6c:	461c      	mov	r4, r3
  403b6e:	4411      	add	r1, r2
  403b70:	f804 2b02 	strb.w	r2, [r4], #2
  403b74:	7059      	strb	r1, [r3, #1]
  403b76:	e7ee      	b.n	403b56 <__exponent+0x48>

00403b78 <_printf_float>:
  403b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b7c:	b091      	sub	sp, #68	; 0x44
  403b7e:	460c      	mov	r4, r1
  403b80:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  403b82:	4693      	mov	fp, r2
  403b84:	461e      	mov	r6, r3
  403b86:	4605      	mov	r5, r0
  403b88:	f001 fc74 	bl	405474 <_localeconv_r>
  403b8c:	6803      	ldr	r3, [r0, #0]
  403b8e:	9309      	str	r3, [sp, #36]	; 0x24
  403b90:	4618      	mov	r0, r3
  403b92:	f000 fc8d 	bl	4044b0 <strlen>
  403b96:	2300      	movs	r3, #0
  403b98:	930e      	str	r3, [sp, #56]	; 0x38
  403b9a:	683b      	ldr	r3, [r7, #0]
  403b9c:	900a      	str	r0, [sp, #40]	; 0x28
  403b9e:	3307      	adds	r3, #7
  403ba0:	f023 0307 	bic.w	r3, r3, #7
  403ba4:	f103 0208 	add.w	r2, r3, #8
  403ba8:	f894 8018 	ldrb.w	r8, [r4, #24]
  403bac:	f8d4 a000 	ldr.w	sl, [r4]
  403bb0:	603a      	str	r2, [r7, #0]
  403bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
  403bb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  403bba:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  403bbe:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  403bc0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  403bc4:	930b      	str	r3, [sp, #44]	; 0x2c
  403bc6:	f04f 32ff 	mov.w	r2, #4294967295
  403bca:	4ba6      	ldr	r3, [pc, #664]	; (403e64 <_printf_float+0x2ec>)
  403bcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403bce:	4638      	mov	r0, r7
  403bd0:	f002 fb84 	bl	4062dc <__aeabi_dcmpun>
  403bd4:	2800      	cmp	r0, #0
  403bd6:	f040 81f7 	bne.w	403fc8 <_printf_float+0x450>
  403bda:	f04f 32ff 	mov.w	r2, #4294967295
  403bde:	4ba1      	ldr	r3, [pc, #644]	; (403e64 <_printf_float+0x2ec>)
  403be0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403be2:	4638      	mov	r0, r7
  403be4:	f7ff fe6a 	bl	4038bc <__aeabi_dcmple>
  403be8:	2800      	cmp	r0, #0
  403bea:	f040 81ed 	bne.w	403fc8 <_printf_float+0x450>
  403bee:	2200      	movs	r2, #0
  403bf0:	2300      	movs	r3, #0
  403bf2:	4638      	mov	r0, r7
  403bf4:	4649      	mov	r1, r9
  403bf6:	f7ff fe57 	bl	4038a8 <__aeabi_dcmplt>
  403bfa:	b110      	cbz	r0, 403c02 <_printf_float+0x8a>
  403bfc:	232d      	movs	r3, #45	; 0x2d
  403bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403c02:	4b99      	ldr	r3, [pc, #612]	; (403e68 <_printf_float+0x2f0>)
  403c04:	4f99      	ldr	r7, [pc, #612]	; (403e6c <_printf_float+0x2f4>)
  403c06:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403c0a:	bf98      	it	ls
  403c0c:	461f      	movls	r7, r3
  403c0e:	2303      	movs	r3, #3
  403c10:	6123      	str	r3, [r4, #16]
  403c12:	f02a 0304 	bic.w	r3, sl, #4
  403c16:	6023      	str	r3, [r4, #0]
  403c18:	f04f 0900 	mov.w	r9, #0
  403c1c:	9600      	str	r6, [sp, #0]
  403c1e:	465b      	mov	r3, fp
  403c20:	aa0f      	add	r2, sp, #60	; 0x3c
  403c22:	4621      	mov	r1, r4
  403c24:	4628      	mov	r0, r5
  403c26:	f000 f9df 	bl	403fe8 <_printf_common>
  403c2a:	3001      	adds	r0, #1
  403c2c:	f040 809a 	bne.w	403d64 <_printf_float+0x1ec>
  403c30:	f04f 30ff 	mov.w	r0, #4294967295
  403c34:	b011      	add	sp, #68	; 0x44
  403c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c3a:	6862      	ldr	r2, [r4, #4]
  403c3c:	1c53      	adds	r3, r2, #1
  403c3e:	a80e      	add	r0, sp, #56	; 0x38
  403c40:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  403c44:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  403c48:	d141      	bne.n	403cce <_printf_float+0x156>
  403c4a:	2206      	movs	r2, #6
  403c4c:	6062      	str	r2, [r4, #4]
  403c4e:	6023      	str	r3, [r4, #0]
  403c50:	2100      	movs	r1, #0
  403c52:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  403c56:	9301      	str	r3, [sp, #4]
  403c58:	6863      	ldr	r3, [r4, #4]
  403c5a:	9005      	str	r0, [sp, #20]
  403c5c:	9202      	str	r2, [sp, #8]
  403c5e:	9300      	str	r3, [sp, #0]
  403c60:	463a      	mov	r2, r7
  403c62:	464b      	mov	r3, r9
  403c64:	9106      	str	r1, [sp, #24]
  403c66:	f8cd 8010 	str.w	r8, [sp, #16]
  403c6a:	f8cd e00c 	str.w	lr, [sp, #12]
  403c6e:	4628      	mov	r0, r5
  403c70:	f7ff fef1 	bl	403a56 <__cvt>
  403c74:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  403c78:	2b47      	cmp	r3, #71	; 0x47
  403c7a:	4607      	mov	r7, r0
  403c7c:	d109      	bne.n	403c92 <_printf_float+0x11a>
  403c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403c80:	1cd8      	adds	r0, r3, #3
  403c82:	db02      	blt.n	403c8a <_printf_float+0x112>
  403c84:	6862      	ldr	r2, [r4, #4]
  403c86:	4293      	cmp	r3, r2
  403c88:	dd59      	ble.n	403d3e <_printf_float+0x1c6>
  403c8a:	f1a8 0802 	sub.w	r8, r8, #2
  403c8e:	fa5f f888 	uxtb.w	r8, r8
  403c92:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  403c96:	990d      	ldr	r1, [sp, #52]	; 0x34
  403c98:	d836      	bhi.n	403d08 <_printf_float+0x190>
  403c9a:	3901      	subs	r1, #1
  403c9c:	4642      	mov	r2, r8
  403c9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
  403ca2:	910d      	str	r1, [sp, #52]	; 0x34
  403ca4:	f7ff ff33 	bl	403b0e <__exponent>
  403ca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403caa:	1883      	adds	r3, r0, r2
  403cac:	2a01      	cmp	r2, #1
  403cae:	4681      	mov	r9, r0
  403cb0:	6123      	str	r3, [r4, #16]
  403cb2:	dc02      	bgt.n	403cba <_printf_float+0x142>
  403cb4:	6822      	ldr	r2, [r4, #0]
  403cb6:	07d1      	lsls	r1, r2, #31
  403cb8:	d501      	bpl.n	403cbe <_printf_float+0x146>
  403cba:	3301      	adds	r3, #1
  403cbc:	6123      	str	r3, [r4, #16]
  403cbe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  403cc2:	2b00      	cmp	r3, #0
  403cc4:	d0aa      	beq.n	403c1c <_printf_float+0xa4>
  403cc6:	232d      	movs	r3, #45	; 0x2d
  403cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403ccc:	e7a6      	b.n	403c1c <_printf_float+0xa4>
  403cce:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  403cd2:	d002      	beq.n	403cda <_printf_float+0x162>
  403cd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403cd8:	d1b9      	bne.n	403c4e <_printf_float+0xd6>
  403cda:	b19a      	cbz	r2, 403d04 <_printf_float+0x18c>
  403cdc:	2100      	movs	r1, #0
  403cde:	9106      	str	r1, [sp, #24]
  403ce0:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  403ce4:	e88d 000c 	stmia.w	sp, {r2, r3}
  403ce8:	6023      	str	r3, [r4, #0]
  403cea:	9005      	str	r0, [sp, #20]
  403cec:	463a      	mov	r2, r7
  403cee:	f8cd 8010 	str.w	r8, [sp, #16]
  403cf2:	f8cd e00c 	str.w	lr, [sp, #12]
  403cf6:	9102      	str	r1, [sp, #8]
  403cf8:	464b      	mov	r3, r9
  403cfa:	4628      	mov	r0, r5
  403cfc:	f7ff feab 	bl	403a56 <__cvt>
  403d00:	4607      	mov	r7, r0
  403d02:	e7bc      	b.n	403c7e <_printf_float+0x106>
  403d04:	2201      	movs	r2, #1
  403d06:	e7a1      	b.n	403c4c <_printf_float+0xd4>
  403d08:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  403d0c:	d119      	bne.n	403d42 <_printf_float+0x1ca>
  403d0e:	2900      	cmp	r1, #0
  403d10:	6863      	ldr	r3, [r4, #4]
  403d12:	dd0c      	ble.n	403d2e <_printf_float+0x1b6>
  403d14:	6121      	str	r1, [r4, #16]
  403d16:	b913      	cbnz	r3, 403d1e <_printf_float+0x1a6>
  403d18:	6822      	ldr	r2, [r4, #0]
  403d1a:	07d2      	lsls	r2, r2, #31
  403d1c:	d502      	bpl.n	403d24 <_printf_float+0x1ac>
  403d1e:	3301      	adds	r3, #1
  403d20:	440b      	add	r3, r1
  403d22:	6123      	str	r3, [r4, #16]
  403d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403d26:	65a3      	str	r3, [r4, #88]	; 0x58
  403d28:	f04f 0900 	mov.w	r9, #0
  403d2c:	e7c7      	b.n	403cbe <_printf_float+0x146>
  403d2e:	b913      	cbnz	r3, 403d36 <_printf_float+0x1be>
  403d30:	6822      	ldr	r2, [r4, #0]
  403d32:	07d0      	lsls	r0, r2, #31
  403d34:	d501      	bpl.n	403d3a <_printf_float+0x1c2>
  403d36:	3302      	adds	r3, #2
  403d38:	e7f3      	b.n	403d22 <_printf_float+0x1aa>
  403d3a:	2301      	movs	r3, #1
  403d3c:	e7f1      	b.n	403d22 <_printf_float+0x1aa>
  403d3e:	f04f 0867 	mov.w	r8, #103	; 0x67
  403d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403d44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403d46:	4293      	cmp	r3, r2
  403d48:	db05      	blt.n	403d56 <_printf_float+0x1de>
  403d4a:	6822      	ldr	r2, [r4, #0]
  403d4c:	6123      	str	r3, [r4, #16]
  403d4e:	07d1      	lsls	r1, r2, #31
  403d50:	d5e8      	bpl.n	403d24 <_printf_float+0x1ac>
  403d52:	3301      	adds	r3, #1
  403d54:	e7e5      	b.n	403d22 <_printf_float+0x1aa>
  403d56:	2b00      	cmp	r3, #0
  403d58:	bfd4      	ite	le
  403d5a:	f1c3 0302 	rsble	r3, r3, #2
  403d5e:	2301      	movgt	r3, #1
  403d60:	4413      	add	r3, r2
  403d62:	e7de      	b.n	403d22 <_printf_float+0x1aa>
  403d64:	6823      	ldr	r3, [r4, #0]
  403d66:	055a      	lsls	r2, r3, #21
  403d68:	d407      	bmi.n	403d7a <_printf_float+0x202>
  403d6a:	6923      	ldr	r3, [r4, #16]
  403d6c:	463a      	mov	r2, r7
  403d6e:	4659      	mov	r1, fp
  403d70:	4628      	mov	r0, r5
  403d72:	47b0      	blx	r6
  403d74:	3001      	adds	r0, #1
  403d76:	d12a      	bne.n	403dce <_printf_float+0x256>
  403d78:	e75a      	b.n	403c30 <_printf_float+0xb8>
  403d7a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  403d7e:	f240 80dc 	bls.w	403f3a <_printf_float+0x3c2>
  403d82:	2200      	movs	r2, #0
  403d84:	2300      	movs	r3, #0
  403d86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403d8a:	f7ff fd83 	bl	403894 <__aeabi_dcmpeq>
  403d8e:	2800      	cmp	r0, #0
  403d90:	d039      	beq.n	403e06 <_printf_float+0x28e>
  403d92:	2301      	movs	r3, #1
  403d94:	4a36      	ldr	r2, [pc, #216]	; (403e70 <_printf_float+0x2f8>)
  403d96:	4659      	mov	r1, fp
  403d98:	4628      	mov	r0, r5
  403d9a:	47b0      	blx	r6
  403d9c:	3001      	adds	r0, #1
  403d9e:	f43f af47 	beq.w	403c30 <_printf_float+0xb8>
  403da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403da4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403da6:	429a      	cmp	r2, r3
  403da8:	db02      	blt.n	403db0 <_printf_float+0x238>
  403daa:	6823      	ldr	r3, [r4, #0]
  403dac:	07d8      	lsls	r0, r3, #31
  403dae:	d50e      	bpl.n	403dce <_printf_float+0x256>
  403db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403db2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403db4:	4659      	mov	r1, fp
  403db6:	4628      	mov	r0, r5
  403db8:	47b0      	blx	r6
  403dba:	3001      	adds	r0, #1
  403dbc:	f43f af38 	beq.w	403c30 <_printf_float+0xb8>
  403dc0:	2700      	movs	r7, #0
  403dc2:	f104 081a 	add.w	r8, r4, #26
  403dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403dc8:	3b01      	subs	r3, #1
  403dca:	429f      	cmp	r7, r3
  403dcc:	db11      	blt.n	403df2 <_printf_float+0x27a>
  403dce:	6823      	ldr	r3, [r4, #0]
  403dd0:	079f      	lsls	r7, r3, #30
  403dd2:	d508      	bpl.n	403de6 <_printf_float+0x26e>
  403dd4:	2700      	movs	r7, #0
  403dd6:	f104 0819 	add.w	r8, r4, #25
  403dda:	68e3      	ldr	r3, [r4, #12]
  403ddc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403dde:	1a9b      	subs	r3, r3, r2
  403de0:	429f      	cmp	r7, r3
  403de2:	f2c0 80e7 	blt.w	403fb4 <_printf_float+0x43c>
  403de6:	68e0      	ldr	r0, [r4, #12]
  403de8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403dea:	4298      	cmp	r0, r3
  403dec:	bfb8      	it	lt
  403dee:	4618      	movlt	r0, r3
  403df0:	e720      	b.n	403c34 <_printf_float+0xbc>
  403df2:	2301      	movs	r3, #1
  403df4:	4642      	mov	r2, r8
  403df6:	4659      	mov	r1, fp
  403df8:	4628      	mov	r0, r5
  403dfa:	47b0      	blx	r6
  403dfc:	3001      	adds	r0, #1
  403dfe:	f43f af17 	beq.w	403c30 <_printf_float+0xb8>
  403e02:	3701      	adds	r7, #1
  403e04:	e7df      	b.n	403dc6 <_printf_float+0x24e>
  403e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403e08:	2b00      	cmp	r3, #0
  403e0a:	dc33      	bgt.n	403e74 <_printf_float+0x2fc>
  403e0c:	2301      	movs	r3, #1
  403e0e:	4a18      	ldr	r2, [pc, #96]	; (403e70 <_printf_float+0x2f8>)
  403e10:	4659      	mov	r1, fp
  403e12:	4628      	mov	r0, r5
  403e14:	47b0      	blx	r6
  403e16:	3001      	adds	r0, #1
  403e18:	f43f af0a 	beq.w	403c30 <_printf_float+0xb8>
  403e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403e1e:	b923      	cbnz	r3, 403e2a <_printf_float+0x2b2>
  403e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403e22:	b913      	cbnz	r3, 403e2a <_printf_float+0x2b2>
  403e24:	6823      	ldr	r3, [r4, #0]
  403e26:	07d9      	lsls	r1, r3, #31
  403e28:	d5d1      	bpl.n	403dce <_printf_float+0x256>
  403e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403e2e:	4659      	mov	r1, fp
  403e30:	4628      	mov	r0, r5
  403e32:	47b0      	blx	r6
  403e34:	3001      	adds	r0, #1
  403e36:	f43f aefb 	beq.w	403c30 <_printf_float+0xb8>
  403e3a:	f04f 0800 	mov.w	r8, #0
  403e3e:	f104 091a 	add.w	r9, r4, #26
  403e42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403e44:	425b      	negs	r3, r3
  403e46:	4598      	cmp	r8, r3
  403e48:	db01      	blt.n	403e4e <_printf_float+0x2d6>
  403e4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403e4c:	e78e      	b.n	403d6c <_printf_float+0x1f4>
  403e4e:	2301      	movs	r3, #1
  403e50:	464a      	mov	r2, r9
  403e52:	4659      	mov	r1, fp
  403e54:	4628      	mov	r0, r5
  403e56:	47b0      	blx	r6
  403e58:	3001      	adds	r0, #1
  403e5a:	f43f aee9 	beq.w	403c30 <_printf_float+0xb8>
  403e5e:	f108 0801 	add.w	r8, r8, #1
  403e62:	e7ee      	b.n	403e42 <_printf_float+0x2ca>
  403e64:	7fefffff 	.word	0x7fefffff
  403e68:	004068dc 	.word	0x004068dc
  403e6c:	004068e0 	.word	0x004068e0
  403e70:	004068ec 	.word	0x004068ec
  403e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
  403e78:	429a      	cmp	r2, r3
  403e7a:	bfa8      	it	ge
  403e7c:	461a      	movge	r2, r3
  403e7e:	2a00      	cmp	r2, #0
  403e80:	4690      	mov	r8, r2
  403e82:	dc36      	bgt.n	403ef2 <_printf_float+0x37a>
  403e84:	f104 031a 	add.w	r3, r4, #26
  403e88:	f04f 0a00 	mov.w	sl, #0
  403e8c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  403e90:	930b      	str	r3, [sp, #44]	; 0x2c
  403e92:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  403e96:	eba9 0308 	sub.w	r3, r9, r8
  403e9a:	459a      	cmp	sl, r3
  403e9c:	db31      	blt.n	403f02 <_printf_float+0x38a>
  403e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403ea0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403ea2:	429a      	cmp	r2, r3
  403ea4:	db38      	blt.n	403f18 <_printf_float+0x3a0>
  403ea6:	6823      	ldr	r3, [r4, #0]
  403ea8:	07da      	lsls	r2, r3, #31
  403eaa:	d435      	bmi.n	403f18 <_printf_float+0x3a0>
  403eac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403eae:	990d      	ldr	r1, [sp, #52]	; 0x34
  403eb0:	eba3 0209 	sub.w	r2, r3, r9
  403eb4:	eba3 0801 	sub.w	r8, r3, r1
  403eb8:	4590      	cmp	r8, r2
  403eba:	bfa8      	it	ge
  403ebc:	4690      	movge	r8, r2
  403ebe:	f1b8 0f00 	cmp.w	r8, #0
  403ec2:	dc31      	bgt.n	403f28 <_printf_float+0x3b0>
  403ec4:	2700      	movs	r7, #0
  403ec6:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  403eca:	f104 091a 	add.w	r9, r4, #26
  403ece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403ed2:	1a9b      	subs	r3, r3, r2
  403ed4:	eba3 0308 	sub.w	r3, r3, r8
  403ed8:	429f      	cmp	r7, r3
  403eda:	f6bf af78 	bge.w	403dce <_printf_float+0x256>
  403ede:	2301      	movs	r3, #1
  403ee0:	464a      	mov	r2, r9
  403ee2:	4659      	mov	r1, fp
  403ee4:	4628      	mov	r0, r5
  403ee6:	47b0      	blx	r6
  403ee8:	3001      	adds	r0, #1
  403eea:	f43f aea1 	beq.w	403c30 <_printf_float+0xb8>
  403eee:	3701      	adds	r7, #1
  403ef0:	e7ed      	b.n	403ece <_printf_float+0x356>
  403ef2:	4613      	mov	r3, r2
  403ef4:	4659      	mov	r1, fp
  403ef6:	463a      	mov	r2, r7
  403ef8:	4628      	mov	r0, r5
  403efa:	47b0      	blx	r6
  403efc:	3001      	adds	r0, #1
  403efe:	d1c1      	bne.n	403e84 <_printf_float+0x30c>
  403f00:	e696      	b.n	403c30 <_printf_float+0xb8>
  403f02:	2301      	movs	r3, #1
  403f04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403f06:	4659      	mov	r1, fp
  403f08:	4628      	mov	r0, r5
  403f0a:	47b0      	blx	r6
  403f0c:	3001      	adds	r0, #1
  403f0e:	f43f ae8f 	beq.w	403c30 <_printf_float+0xb8>
  403f12:	f10a 0a01 	add.w	sl, sl, #1
  403f16:	e7bc      	b.n	403e92 <_printf_float+0x31a>
  403f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403f1c:	4659      	mov	r1, fp
  403f1e:	4628      	mov	r0, r5
  403f20:	47b0      	blx	r6
  403f22:	3001      	adds	r0, #1
  403f24:	d1c2      	bne.n	403eac <_printf_float+0x334>
  403f26:	e683      	b.n	403c30 <_printf_float+0xb8>
  403f28:	4643      	mov	r3, r8
  403f2a:	eb07 0209 	add.w	r2, r7, r9
  403f2e:	4659      	mov	r1, fp
  403f30:	4628      	mov	r0, r5
  403f32:	47b0      	blx	r6
  403f34:	3001      	adds	r0, #1
  403f36:	d1c5      	bne.n	403ec4 <_printf_float+0x34c>
  403f38:	e67a      	b.n	403c30 <_printf_float+0xb8>
  403f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403f3c:	2a01      	cmp	r2, #1
  403f3e:	dc01      	bgt.n	403f44 <_printf_float+0x3cc>
  403f40:	07db      	lsls	r3, r3, #31
  403f42:	d534      	bpl.n	403fae <_printf_float+0x436>
  403f44:	2301      	movs	r3, #1
  403f46:	463a      	mov	r2, r7
  403f48:	4659      	mov	r1, fp
  403f4a:	4628      	mov	r0, r5
  403f4c:	47b0      	blx	r6
  403f4e:	3001      	adds	r0, #1
  403f50:	f43f ae6e 	beq.w	403c30 <_printf_float+0xb8>
  403f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403f58:	4659      	mov	r1, fp
  403f5a:	4628      	mov	r0, r5
  403f5c:	47b0      	blx	r6
  403f5e:	3001      	adds	r0, #1
  403f60:	f43f ae66 	beq.w	403c30 <_printf_float+0xb8>
  403f64:	2200      	movs	r2, #0
  403f66:	2300      	movs	r3, #0
  403f68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403f6c:	f7ff fc92 	bl	403894 <__aeabi_dcmpeq>
  403f70:	b150      	cbz	r0, 403f88 <_printf_float+0x410>
  403f72:	2700      	movs	r7, #0
  403f74:	f104 081a 	add.w	r8, r4, #26
  403f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403f7a:	3b01      	subs	r3, #1
  403f7c:	429f      	cmp	r7, r3
  403f7e:	db0c      	blt.n	403f9a <_printf_float+0x422>
  403f80:	464b      	mov	r3, r9
  403f82:	f104 0250 	add.w	r2, r4, #80	; 0x50
  403f86:	e6f2      	b.n	403d6e <_printf_float+0x1f6>
  403f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403f8a:	1c7a      	adds	r2, r7, #1
  403f8c:	3b01      	subs	r3, #1
  403f8e:	4659      	mov	r1, fp
  403f90:	4628      	mov	r0, r5
  403f92:	47b0      	blx	r6
  403f94:	3001      	adds	r0, #1
  403f96:	d1f3      	bne.n	403f80 <_printf_float+0x408>
  403f98:	e64a      	b.n	403c30 <_printf_float+0xb8>
  403f9a:	2301      	movs	r3, #1
  403f9c:	4642      	mov	r2, r8
  403f9e:	4659      	mov	r1, fp
  403fa0:	4628      	mov	r0, r5
  403fa2:	47b0      	blx	r6
  403fa4:	3001      	adds	r0, #1
  403fa6:	f43f ae43 	beq.w	403c30 <_printf_float+0xb8>
  403faa:	3701      	adds	r7, #1
  403fac:	e7e4      	b.n	403f78 <_printf_float+0x400>
  403fae:	2301      	movs	r3, #1
  403fb0:	463a      	mov	r2, r7
  403fb2:	e7ec      	b.n	403f8e <_printf_float+0x416>
  403fb4:	2301      	movs	r3, #1
  403fb6:	4642      	mov	r2, r8
  403fb8:	4659      	mov	r1, fp
  403fba:	4628      	mov	r0, r5
  403fbc:	47b0      	blx	r6
  403fbe:	3001      	adds	r0, #1
  403fc0:	f43f ae36 	beq.w	403c30 <_printf_float+0xb8>
  403fc4:	3701      	adds	r7, #1
  403fc6:	e708      	b.n	403dda <_printf_float+0x262>
  403fc8:	463a      	mov	r2, r7
  403fca:	464b      	mov	r3, r9
  403fcc:	4638      	mov	r0, r7
  403fce:	4649      	mov	r1, r9
  403fd0:	f002 f984 	bl	4062dc <__aeabi_dcmpun>
  403fd4:	2800      	cmp	r0, #0
  403fd6:	f43f ae30 	beq.w	403c3a <_printf_float+0xc2>
  403fda:	4b01      	ldr	r3, [pc, #4]	; (403fe0 <_printf_float+0x468>)
  403fdc:	4f01      	ldr	r7, [pc, #4]	; (403fe4 <_printf_float+0x46c>)
  403fde:	e612      	b.n	403c06 <_printf_float+0x8e>
  403fe0:	004068e4 	.word	0x004068e4
  403fe4:	004068e8 	.word	0x004068e8

00403fe8 <_printf_common>:
  403fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403fec:	4691      	mov	r9, r2
  403fee:	461f      	mov	r7, r3
  403ff0:	688a      	ldr	r2, [r1, #8]
  403ff2:	690b      	ldr	r3, [r1, #16]
  403ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  403ff8:	4293      	cmp	r3, r2
  403ffa:	bfb8      	it	lt
  403ffc:	4613      	movlt	r3, r2
  403ffe:	f8c9 3000 	str.w	r3, [r9]
  404002:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  404006:	4606      	mov	r6, r0
  404008:	460c      	mov	r4, r1
  40400a:	b112      	cbz	r2, 404012 <_printf_common+0x2a>
  40400c:	3301      	adds	r3, #1
  40400e:	f8c9 3000 	str.w	r3, [r9]
  404012:	6823      	ldr	r3, [r4, #0]
  404014:	0699      	lsls	r1, r3, #26
  404016:	bf42      	ittt	mi
  404018:	f8d9 3000 	ldrmi.w	r3, [r9]
  40401c:	3302      	addmi	r3, #2
  40401e:	f8c9 3000 	strmi.w	r3, [r9]
  404022:	6825      	ldr	r5, [r4, #0]
  404024:	f015 0506 	ands.w	r5, r5, #6
  404028:	d107      	bne.n	40403a <_printf_common+0x52>
  40402a:	f104 0a19 	add.w	sl, r4, #25
  40402e:	68e3      	ldr	r3, [r4, #12]
  404030:	f8d9 2000 	ldr.w	r2, [r9]
  404034:	1a9b      	subs	r3, r3, r2
  404036:	429d      	cmp	r5, r3
  404038:	db29      	blt.n	40408e <_printf_common+0xa6>
  40403a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  40403e:	6822      	ldr	r2, [r4, #0]
  404040:	3300      	adds	r3, #0
  404042:	bf18      	it	ne
  404044:	2301      	movne	r3, #1
  404046:	0692      	lsls	r2, r2, #26
  404048:	d42e      	bmi.n	4040a8 <_printf_common+0xc0>
  40404a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40404e:	4639      	mov	r1, r7
  404050:	4630      	mov	r0, r6
  404052:	47c0      	blx	r8
  404054:	3001      	adds	r0, #1
  404056:	d021      	beq.n	40409c <_printf_common+0xb4>
  404058:	6823      	ldr	r3, [r4, #0]
  40405a:	68e5      	ldr	r5, [r4, #12]
  40405c:	f8d9 2000 	ldr.w	r2, [r9]
  404060:	f003 0306 	and.w	r3, r3, #6
  404064:	2b04      	cmp	r3, #4
  404066:	bf08      	it	eq
  404068:	1aad      	subeq	r5, r5, r2
  40406a:	68a3      	ldr	r3, [r4, #8]
  40406c:	6922      	ldr	r2, [r4, #16]
  40406e:	bf0c      	ite	eq
  404070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  404074:	2500      	movne	r5, #0
  404076:	4293      	cmp	r3, r2
  404078:	bfc4      	itt	gt
  40407a:	1a9b      	subgt	r3, r3, r2
  40407c:	18ed      	addgt	r5, r5, r3
  40407e:	f04f 0900 	mov.w	r9, #0
  404082:	341a      	adds	r4, #26
  404084:	454d      	cmp	r5, r9
  404086:	d11b      	bne.n	4040c0 <_printf_common+0xd8>
  404088:	2000      	movs	r0, #0
  40408a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40408e:	2301      	movs	r3, #1
  404090:	4652      	mov	r2, sl
  404092:	4639      	mov	r1, r7
  404094:	4630      	mov	r0, r6
  404096:	47c0      	blx	r8
  404098:	3001      	adds	r0, #1
  40409a:	d103      	bne.n	4040a4 <_printf_common+0xbc>
  40409c:	f04f 30ff 	mov.w	r0, #4294967295
  4040a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4040a4:	3501      	adds	r5, #1
  4040a6:	e7c2      	b.n	40402e <_printf_common+0x46>
  4040a8:	18e1      	adds	r1, r4, r3
  4040aa:	1c5a      	adds	r2, r3, #1
  4040ac:	2030      	movs	r0, #48	; 0x30
  4040ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4040b2:	4422      	add	r2, r4
  4040b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4040b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4040bc:	3302      	adds	r3, #2
  4040be:	e7c4      	b.n	40404a <_printf_common+0x62>
  4040c0:	2301      	movs	r3, #1
  4040c2:	4622      	mov	r2, r4
  4040c4:	4639      	mov	r1, r7
  4040c6:	4630      	mov	r0, r6
  4040c8:	47c0      	blx	r8
  4040ca:	3001      	adds	r0, #1
  4040cc:	d0e6      	beq.n	40409c <_printf_common+0xb4>
  4040ce:	f109 0901 	add.w	r9, r9, #1
  4040d2:	e7d7      	b.n	404084 <_printf_common+0x9c>

004040d4 <_printf_i>:
  4040d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4040d8:	4617      	mov	r7, r2
  4040da:	7e0a      	ldrb	r2, [r1, #24]
  4040dc:	b085      	sub	sp, #20
  4040de:	2a6e      	cmp	r2, #110	; 0x6e
  4040e0:	4698      	mov	r8, r3
  4040e2:	4606      	mov	r6, r0
  4040e4:	460c      	mov	r4, r1
  4040e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4040e8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  4040ec:	f000 80bc 	beq.w	404268 <_printf_i+0x194>
  4040f0:	d81a      	bhi.n	404128 <_printf_i+0x54>
  4040f2:	2a63      	cmp	r2, #99	; 0x63
  4040f4:	d02e      	beq.n	404154 <_printf_i+0x80>
  4040f6:	d80a      	bhi.n	40410e <_printf_i+0x3a>
  4040f8:	2a00      	cmp	r2, #0
  4040fa:	f000 80c8 	beq.w	40428e <_printf_i+0x1ba>
  4040fe:	2a58      	cmp	r2, #88	; 0x58
  404100:	f000 808a 	beq.w	404218 <_printf_i+0x144>
  404104:	f104 0542 	add.w	r5, r4, #66	; 0x42
  404108:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  40410c:	e02a      	b.n	404164 <_printf_i+0x90>
  40410e:	2a64      	cmp	r2, #100	; 0x64
  404110:	d001      	beq.n	404116 <_printf_i+0x42>
  404112:	2a69      	cmp	r2, #105	; 0x69
  404114:	d1f6      	bne.n	404104 <_printf_i+0x30>
  404116:	6821      	ldr	r1, [r4, #0]
  404118:	681a      	ldr	r2, [r3, #0]
  40411a:	f011 0f80 	tst.w	r1, #128	; 0x80
  40411e:	d023      	beq.n	404168 <_printf_i+0x94>
  404120:	1d11      	adds	r1, r2, #4
  404122:	6019      	str	r1, [r3, #0]
  404124:	6813      	ldr	r3, [r2, #0]
  404126:	e027      	b.n	404178 <_printf_i+0xa4>
  404128:	2a73      	cmp	r2, #115	; 0x73
  40412a:	f000 80b4 	beq.w	404296 <_printf_i+0x1c2>
  40412e:	d808      	bhi.n	404142 <_printf_i+0x6e>
  404130:	2a6f      	cmp	r2, #111	; 0x6f
  404132:	d02a      	beq.n	40418a <_printf_i+0xb6>
  404134:	2a70      	cmp	r2, #112	; 0x70
  404136:	d1e5      	bne.n	404104 <_printf_i+0x30>
  404138:	680a      	ldr	r2, [r1, #0]
  40413a:	f042 0220 	orr.w	r2, r2, #32
  40413e:	600a      	str	r2, [r1, #0]
  404140:	e003      	b.n	40414a <_printf_i+0x76>
  404142:	2a75      	cmp	r2, #117	; 0x75
  404144:	d021      	beq.n	40418a <_printf_i+0xb6>
  404146:	2a78      	cmp	r2, #120	; 0x78
  404148:	d1dc      	bne.n	404104 <_printf_i+0x30>
  40414a:	2278      	movs	r2, #120	; 0x78
  40414c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  404150:	496e      	ldr	r1, [pc, #440]	; (40430c <_printf_i+0x238>)
  404152:	e064      	b.n	40421e <_printf_i+0x14a>
  404154:	681a      	ldr	r2, [r3, #0]
  404156:	f101 0542 	add.w	r5, r1, #66	; 0x42
  40415a:	1d11      	adds	r1, r2, #4
  40415c:	6019      	str	r1, [r3, #0]
  40415e:	6813      	ldr	r3, [r2, #0]
  404160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  404164:	2301      	movs	r3, #1
  404166:	e0a3      	b.n	4042b0 <_printf_i+0x1dc>
  404168:	f011 0f40 	tst.w	r1, #64	; 0x40
  40416c:	f102 0104 	add.w	r1, r2, #4
  404170:	6019      	str	r1, [r3, #0]
  404172:	d0d7      	beq.n	404124 <_printf_i+0x50>
  404174:	f9b2 3000 	ldrsh.w	r3, [r2]
  404178:	2b00      	cmp	r3, #0
  40417a:	da03      	bge.n	404184 <_printf_i+0xb0>
  40417c:	222d      	movs	r2, #45	; 0x2d
  40417e:	425b      	negs	r3, r3
  404180:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  404184:	4962      	ldr	r1, [pc, #392]	; (404310 <_printf_i+0x23c>)
  404186:	220a      	movs	r2, #10
  404188:	e017      	b.n	4041ba <_printf_i+0xe6>
  40418a:	6820      	ldr	r0, [r4, #0]
  40418c:	6819      	ldr	r1, [r3, #0]
  40418e:	f010 0f80 	tst.w	r0, #128	; 0x80
  404192:	d003      	beq.n	40419c <_printf_i+0xc8>
  404194:	1d08      	adds	r0, r1, #4
  404196:	6018      	str	r0, [r3, #0]
  404198:	680b      	ldr	r3, [r1, #0]
  40419a:	e006      	b.n	4041aa <_printf_i+0xd6>
  40419c:	f010 0f40 	tst.w	r0, #64	; 0x40
  4041a0:	f101 0004 	add.w	r0, r1, #4
  4041a4:	6018      	str	r0, [r3, #0]
  4041a6:	d0f7      	beq.n	404198 <_printf_i+0xc4>
  4041a8:	880b      	ldrh	r3, [r1, #0]
  4041aa:	4959      	ldr	r1, [pc, #356]	; (404310 <_printf_i+0x23c>)
  4041ac:	2a6f      	cmp	r2, #111	; 0x6f
  4041ae:	bf14      	ite	ne
  4041b0:	220a      	movne	r2, #10
  4041b2:	2208      	moveq	r2, #8
  4041b4:	2000      	movs	r0, #0
  4041b6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  4041ba:	6865      	ldr	r5, [r4, #4]
  4041bc:	60a5      	str	r5, [r4, #8]
  4041be:	2d00      	cmp	r5, #0
  4041c0:	f2c0 809c 	blt.w	4042fc <_printf_i+0x228>
  4041c4:	6820      	ldr	r0, [r4, #0]
  4041c6:	f020 0004 	bic.w	r0, r0, #4
  4041ca:	6020      	str	r0, [r4, #0]
  4041cc:	2b00      	cmp	r3, #0
  4041ce:	d13f      	bne.n	404250 <_printf_i+0x17c>
  4041d0:	2d00      	cmp	r5, #0
  4041d2:	f040 8095 	bne.w	404300 <_printf_i+0x22c>
  4041d6:	4675      	mov	r5, lr
  4041d8:	2a08      	cmp	r2, #8
  4041da:	d10b      	bne.n	4041f4 <_printf_i+0x120>
  4041dc:	6823      	ldr	r3, [r4, #0]
  4041de:	07da      	lsls	r2, r3, #31
  4041e0:	d508      	bpl.n	4041f4 <_printf_i+0x120>
  4041e2:	6923      	ldr	r3, [r4, #16]
  4041e4:	6862      	ldr	r2, [r4, #4]
  4041e6:	429a      	cmp	r2, r3
  4041e8:	bfde      	ittt	le
  4041ea:	2330      	movle	r3, #48	; 0x30
  4041ec:	f805 3c01 	strble.w	r3, [r5, #-1]
  4041f0:	f105 35ff 	addle.w	r5, r5, #4294967295
  4041f4:	ebae 0305 	sub.w	r3, lr, r5
  4041f8:	6123      	str	r3, [r4, #16]
  4041fa:	f8cd 8000 	str.w	r8, [sp]
  4041fe:	463b      	mov	r3, r7
  404200:	aa03      	add	r2, sp, #12
  404202:	4621      	mov	r1, r4
  404204:	4630      	mov	r0, r6
  404206:	f7ff feef 	bl	403fe8 <_printf_common>
  40420a:	3001      	adds	r0, #1
  40420c:	d155      	bne.n	4042ba <_printf_i+0x1e6>
  40420e:	f04f 30ff 	mov.w	r0, #4294967295
  404212:	b005      	add	sp, #20
  404214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404218:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  40421c:	493c      	ldr	r1, [pc, #240]	; (404310 <_printf_i+0x23c>)
  40421e:	6822      	ldr	r2, [r4, #0]
  404220:	6818      	ldr	r0, [r3, #0]
  404222:	f012 0f80 	tst.w	r2, #128	; 0x80
  404226:	f100 0504 	add.w	r5, r0, #4
  40422a:	601d      	str	r5, [r3, #0]
  40422c:	d001      	beq.n	404232 <_printf_i+0x15e>
  40422e:	6803      	ldr	r3, [r0, #0]
  404230:	e002      	b.n	404238 <_printf_i+0x164>
  404232:	0655      	lsls	r5, r2, #25
  404234:	d5fb      	bpl.n	40422e <_printf_i+0x15a>
  404236:	8803      	ldrh	r3, [r0, #0]
  404238:	07d0      	lsls	r0, r2, #31
  40423a:	bf44      	itt	mi
  40423c:	f042 0220 	orrmi.w	r2, r2, #32
  404240:	6022      	strmi	r2, [r4, #0]
  404242:	b91b      	cbnz	r3, 40424c <_printf_i+0x178>
  404244:	6822      	ldr	r2, [r4, #0]
  404246:	f022 0220 	bic.w	r2, r2, #32
  40424a:	6022      	str	r2, [r4, #0]
  40424c:	2210      	movs	r2, #16
  40424e:	e7b1      	b.n	4041b4 <_printf_i+0xe0>
  404250:	4675      	mov	r5, lr
  404252:	fbb3 f0f2 	udiv	r0, r3, r2
  404256:	fb02 3310 	mls	r3, r2, r0, r3
  40425a:	5ccb      	ldrb	r3, [r1, r3]
  40425c:	f805 3d01 	strb.w	r3, [r5, #-1]!
  404260:	4603      	mov	r3, r0
  404262:	2800      	cmp	r0, #0
  404264:	d1f5      	bne.n	404252 <_printf_i+0x17e>
  404266:	e7b7      	b.n	4041d8 <_printf_i+0x104>
  404268:	6808      	ldr	r0, [r1, #0]
  40426a:	681a      	ldr	r2, [r3, #0]
  40426c:	6949      	ldr	r1, [r1, #20]
  40426e:	f010 0f80 	tst.w	r0, #128	; 0x80
  404272:	d004      	beq.n	40427e <_printf_i+0x1aa>
  404274:	1d10      	adds	r0, r2, #4
  404276:	6018      	str	r0, [r3, #0]
  404278:	6813      	ldr	r3, [r2, #0]
  40427a:	6019      	str	r1, [r3, #0]
  40427c:	e007      	b.n	40428e <_printf_i+0x1ba>
  40427e:	f010 0f40 	tst.w	r0, #64	; 0x40
  404282:	f102 0004 	add.w	r0, r2, #4
  404286:	6018      	str	r0, [r3, #0]
  404288:	6813      	ldr	r3, [r2, #0]
  40428a:	d0f6      	beq.n	40427a <_printf_i+0x1a6>
  40428c:	8019      	strh	r1, [r3, #0]
  40428e:	2300      	movs	r3, #0
  404290:	6123      	str	r3, [r4, #16]
  404292:	4675      	mov	r5, lr
  404294:	e7b1      	b.n	4041fa <_printf_i+0x126>
  404296:	681a      	ldr	r2, [r3, #0]
  404298:	1d11      	adds	r1, r2, #4
  40429a:	6019      	str	r1, [r3, #0]
  40429c:	6815      	ldr	r5, [r2, #0]
  40429e:	6862      	ldr	r2, [r4, #4]
  4042a0:	2100      	movs	r1, #0
  4042a2:	4628      	mov	r0, r5
  4042a4:	f001 f964 	bl	405570 <memchr>
  4042a8:	b108      	cbz	r0, 4042ae <_printf_i+0x1da>
  4042aa:	1b40      	subs	r0, r0, r5
  4042ac:	6060      	str	r0, [r4, #4]
  4042ae:	6863      	ldr	r3, [r4, #4]
  4042b0:	6123      	str	r3, [r4, #16]
  4042b2:	2300      	movs	r3, #0
  4042b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4042b8:	e79f      	b.n	4041fa <_printf_i+0x126>
  4042ba:	6923      	ldr	r3, [r4, #16]
  4042bc:	462a      	mov	r2, r5
  4042be:	4639      	mov	r1, r7
  4042c0:	4630      	mov	r0, r6
  4042c2:	47c0      	blx	r8
  4042c4:	3001      	adds	r0, #1
  4042c6:	d0a2      	beq.n	40420e <_printf_i+0x13a>
  4042c8:	6823      	ldr	r3, [r4, #0]
  4042ca:	079b      	lsls	r3, r3, #30
  4042cc:	d507      	bpl.n	4042de <_printf_i+0x20a>
  4042ce:	2500      	movs	r5, #0
  4042d0:	f104 0919 	add.w	r9, r4, #25
  4042d4:	68e3      	ldr	r3, [r4, #12]
  4042d6:	9a03      	ldr	r2, [sp, #12]
  4042d8:	1a9b      	subs	r3, r3, r2
  4042da:	429d      	cmp	r5, r3
  4042dc:	db05      	blt.n	4042ea <_printf_i+0x216>
  4042de:	68e0      	ldr	r0, [r4, #12]
  4042e0:	9b03      	ldr	r3, [sp, #12]
  4042e2:	4298      	cmp	r0, r3
  4042e4:	bfb8      	it	lt
  4042e6:	4618      	movlt	r0, r3
  4042e8:	e793      	b.n	404212 <_printf_i+0x13e>
  4042ea:	2301      	movs	r3, #1
  4042ec:	464a      	mov	r2, r9
  4042ee:	4639      	mov	r1, r7
  4042f0:	4630      	mov	r0, r6
  4042f2:	47c0      	blx	r8
  4042f4:	3001      	adds	r0, #1
  4042f6:	d08a      	beq.n	40420e <_printf_i+0x13a>
  4042f8:	3501      	adds	r5, #1
  4042fa:	e7eb      	b.n	4042d4 <_printf_i+0x200>
  4042fc:	2b00      	cmp	r3, #0
  4042fe:	d1a7      	bne.n	404250 <_printf_i+0x17c>
  404300:	780b      	ldrb	r3, [r1, #0]
  404302:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  404306:	f104 0542 	add.w	r5, r4, #66	; 0x42
  40430a:	e765      	b.n	4041d8 <_printf_i+0x104>
  40430c:	004068ff 	.word	0x004068ff
  404310:	004068ee 	.word	0x004068ee

00404314 <iprintf>:
  404314:	b40f      	push	{r0, r1, r2, r3}
  404316:	4b0a      	ldr	r3, [pc, #40]	; (404340 <iprintf+0x2c>)
  404318:	b513      	push	{r0, r1, r4, lr}
  40431a:	681c      	ldr	r4, [r3, #0]
  40431c:	b124      	cbz	r4, 404328 <iprintf+0x14>
  40431e:	69a3      	ldr	r3, [r4, #24]
  404320:	b913      	cbnz	r3, 404328 <iprintf+0x14>
  404322:	4620      	mov	r0, r4
  404324:	f001 f81c 	bl	405360 <__sinit>
  404328:	ab05      	add	r3, sp, #20
  40432a:	9a04      	ldr	r2, [sp, #16]
  40432c:	68a1      	ldr	r1, [r4, #8]
  40432e:	9301      	str	r3, [sp, #4]
  404330:	4620      	mov	r0, r4
  404332:	f001 fd1f 	bl	405d74 <_vfiprintf_r>
  404336:	b002      	add	sp, #8
  404338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40433c:	b004      	add	sp, #16
  40433e:	4770      	bx	lr
  404340:	20400048 	.word	0x20400048

00404344 <setbuf>:
  404344:	2900      	cmp	r1, #0
  404346:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40434a:	bf0c      	ite	eq
  40434c:	2202      	moveq	r2, #2
  40434e:	2200      	movne	r2, #0
  404350:	f000 b800 	b.w	404354 <setvbuf>

00404354 <setvbuf>:
  404354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  404358:	461d      	mov	r5, r3
  40435a:	4b51      	ldr	r3, [pc, #324]	; (4044a0 <setvbuf+0x14c>)
  40435c:	681e      	ldr	r6, [r3, #0]
  40435e:	4604      	mov	r4, r0
  404360:	460f      	mov	r7, r1
  404362:	4690      	mov	r8, r2
  404364:	b126      	cbz	r6, 404370 <setvbuf+0x1c>
  404366:	69b3      	ldr	r3, [r6, #24]
  404368:	b913      	cbnz	r3, 404370 <setvbuf+0x1c>
  40436a:	4630      	mov	r0, r6
  40436c:	f000 fff8 	bl	405360 <__sinit>
  404370:	4b4c      	ldr	r3, [pc, #304]	; (4044a4 <setvbuf+0x150>)
  404372:	429c      	cmp	r4, r3
  404374:	d152      	bne.n	40441c <setvbuf+0xc8>
  404376:	6874      	ldr	r4, [r6, #4]
  404378:	f1b8 0f02 	cmp.w	r8, #2
  40437c:	d006      	beq.n	40438c <setvbuf+0x38>
  40437e:	f1b8 0f01 	cmp.w	r8, #1
  404382:	f200 8089 	bhi.w	404498 <setvbuf+0x144>
  404386:	2d00      	cmp	r5, #0
  404388:	f2c0 8086 	blt.w	404498 <setvbuf+0x144>
  40438c:	4621      	mov	r1, r4
  40438e:	4630      	mov	r0, r6
  404390:	f000 ff7c 	bl	40528c <_fflush_r>
  404394:	6b61      	ldr	r1, [r4, #52]	; 0x34
  404396:	b141      	cbz	r1, 4043aa <setvbuf+0x56>
  404398:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40439c:	4299      	cmp	r1, r3
  40439e:	d002      	beq.n	4043a6 <setvbuf+0x52>
  4043a0:	4630      	mov	r0, r6
  4043a2:	f001 fc13 	bl	405bcc <_free_r>
  4043a6:	2300      	movs	r3, #0
  4043a8:	6363      	str	r3, [r4, #52]	; 0x34
  4043aa:	2300      	movs	r3, #0
  4043ac:	61a3      	str	r3, [r4, #24]
  4043ae:	6063      	str	r3, [r4, #4]
  4043b0:	89a3      	ldrh	r3, [r4, #12]
  4043b2:	061b      	lsls	r3, r3, #24
  4043b4:	d503      	bpl.n	4043be <setvbuf+0x6a>
  4043b6:	6921      	ldr	r1, [r4, #16]
  4043b8:	4630      	mov	r0, r6
  4043ba:	f001 fc07 	bl	405bcc <_free_r>
  4043be:	89a3      	ldrh	r3, [r4, #12]
  4043c0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4043c4:	f023 0303 	bic.w	r3, r3, #3
  4043c8:	f1b8 0f02 	cmp.w	r8, #2
  4043cc:	81a3      	strh	r3, [r4, #12]
  4043ce:	d05d      	beq.n	40448c <setvbuf+0x138>
  4043d0:	ab01      	add	r3, sp, #4
  4043d2:	466a      	mov	r2, sp
  4043d4:	4621      	mov	r1, r4
  4043d6:	4630      	mov	r0, r6
  4043d8:	f001 f85a 	bl	405490 <__swhatbuf_r>
  4043dc:	89a3      	ldrh	r3, [r4, #12]
  4043de:	4318      	orrs	r0, r3
  4043e0:	81a0      	strh	r0, [r4, #12]
  4043e2:	bb2d      	cbnz	r5, 404430 <setvbuf+0xdc>
  4043e4:	9d00      	ldr	r5, [sp, #0]
  4043e6:	4628      	mov	r0, r5
  4043e8:	f001 f8b6 	bl	405558 <malloc>
  4043ec:	4607      	mov	r7, r0
  4043ee:	2800      	cmp	r0, #0
  4043f0:	d14e      	bne.n	404490 <setvbuf+0x13c>
  4043f2:	f8dd 9000 	ldr.w	r9, [sp]
  4043f6:	45a9      	cmp	r9, r5
  4043f8:	d13c      	bne.n	404474 <setvbuf+0x120>
  4043fa:	f04f 30ff 	mov.w	r0, #4294967295
  4043fe:	89a3      	ldrh	r3, [r4, #12]
  404400:	f043 0302 	orr.w	r3, r3, #2
  404404:	81a3      	strh	r3, [r4, #12]
  404406:	2300      	movs	r3, #0
  404408:	60a3      	str	r3, [r4, #8]
  40440a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40440e:	6023      	str	r3, [r4, #0]
  404410:	6123      	str	r3, [r4, #16]
  404412:	2301      	movs	r3, #1
  404414:	6163      	str	r3, [r4, #20]
  404416:	b003      	add	sp, #12
  404418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40441c:	4b22      	ldr	r3, [pc, #136]	; (4044a8 <setvbuf+0x154>)
  40441e:	429c      	cmp	r4, r3
  404420:	d101      	bne.n	404426 <setvbuf+0xd2>
  404422:	68b4      	ldr	r4, [r6, #8]
  404424:	e7a8      	b.n	404378 <setvbuf+0x24>
  404426:	4b21      	ldr	r3, [pc, #132]	; (4044ac <setvbuf+0x158>)
  404428:	429c      	cmp	r4, r3
  40442a:	bf08      	it	eq
  40442c:	68f4      	ldreq	r4, [r6, #12]
  40442e:	e7a3      	b.n	404378 <setvbuf+0x24>
  404430:	2f00      	cmp	r7, #0
  404432:	d0d8      	beq.n	4043e6 <setvbuf+0x92>
  404434:	69b3      	ldr	r3, [r6, #24]
  404436:	b913      	cbnz	r3, 40443e <setvbuf+0xea>
  404438:	4630      	mov	r0, r6
  40443a:	f000 ff91 	bl	405360 <__sinit>
  40443e:	f1b8 0f01 	cmp.w	r8, #1
  404442:	bf08      	it	eq
  404444:	89a3      	ldrheq	r3, [r4, #12]
  404446:	6027      	str	r7, [r4, #0]
  404448:	bf04      	itt	eq
  40444a:	f043 0301 	orreq.w	r3, r3, #1
  40444e:	81a3      	strheq	r3, [r4, #12]
  404450:	89a3      	ldrh	r3, [r4, #12]
  404452:	6127      	str	r7, [r4, #16]
  404454:	f013 0008 	ands.w	r0, r3, #8
  404458:	6165      	str	r5, [r4, #20]
  40445a:	d01b      	beq.n	404494 <setvbuf+0x140>
  40445c:	f013 0001 	ands.w	r0, r3, #1
  404460:	bf18      	it	ne
  404462:	426d      	negne	r5, r5
  404464:	f04f 0300 	mov.w	r3, #0
  404468:	bf1d      	ittte	ne
  40446a:	60a3      	strne	r3, [r4, #8]
  40446c:	61a5      	strne	r5, [r4, #24]
  40446e:	4618      	movne	r0, r3
  404470:	60a5      	streq	r5, [r4, #8]
  404472:	e7d0      	b.n	404416 <setvbuf+0xc2>
  404474:	4648      	mov	r0, r9
  404476:	f001 f86f 	bl	405558 <malloc>
  40447a:	4607      	mov	r7, r0
  40447c:	2800      	cmp	r0, #0
  40447e:	d0bc      	beq.n	4043fa <setvbuf+0xa6>
  404480:	89a3      	ldrh	r3, [r4, #12]
  404482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404486:	81a3      	strh	r3, [r4, #12]
  404488:	464d      	mov	r5, r9
  40448a:	e7d3      	b.n	404434 <setvbuf+0xe0>
  40448c:	2000      	movs	r0, #0
  40448e:	e7b6      	b.n	4043fe <setvbuf+0xaa>
  404490:	46a9      	mov	r9, r5
  404492:	e7f5      	b.n	404480 <setvbuf+0x12c>
  404494:	60a0      	str	r0, [r4, #8]
  404496:	e7be      	b.n	404416 <setvbuf+0xc2>
  404498:	f04f 30ff 	mov.w	r0, #4294967295
  40449c:	e7bb      	b.n	404416 <setvbuf+0xc2>
  40449e:	bf00      	nop
  4044a0:	20400048 	.word	0x20400048
  4044a4:	00406940 	.word	0x00406940
  4044a8:	00406960 	.word	0x00406960
  4044ac:	00406920 	.word	0x00406920

004044b0 <strlen>:
  4044b0:	4603      	mov	r3, r0
  4044b2:	f813 2b01 	ldrb.w	r2, [r3], #1
  4044b6:	2a00      	cmp	r2, #0
  4044b8:	d1fb      	bne.n	4044b2 <strlen+0x2>
  4044ba:	1a18      	subs	r0, r3, r0
  4044bc:	3801      	subs	r0, #1
  4044be:	4770      	bx	lr

004044c0 <quorem>:
  4044c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044c4:	6903      	ldr	r3, [r0, #16]
  4044c6:	690c      	ldr	r4, [r1, #16]
  4044c8:	429c      	cmp	r4, r3
  4044ca:	4680      	mov	r8, r0
  4044cc:	f300 8082 	bgt.w	4045d4 <quorem+0x114>
  4044d0:	3c01      	subs	r4, #1
  4044d2:	f101 0714 	add.w	r7, r1, #20
  4044d6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  4044da:	f100 0614 	add.w	r6, r0, #20
  4044de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  4044e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  4044e6:	eb06 030e 	add.w	r3, r6, lr
  4044ea:	3501      	adds	r5, #1
  4044ec:	eb07 090e 	add.w	r9, r7, lr
  4044f0:	9301      	str	r3, [sp, #4]
  4044f2:	fbb0 f5f5 	udiv	r5, r0, r5
  4044f6:	b395      	cbz	r5, 40455e <quorem+0x9e>
  4044f8:	f04f 0a00 	mov.w	sl, #0
  4044fc:	4638      	mov	r0, r7
  4044fe:	46b4      	mov	ip, r6
  404500:	46d3      	mov	fp, sl
  404502:	f850 2b04 	ldr.w	r2, [r0], #4
  404506:	b293      	uxth	r3, r2
  404508:	fb05 a303 	mla	r3, r5, r3, sl
  40450c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  404510:	b29b      	uxth	r3, r3
  404512:	ebab 0303 	sub.w	r3, fp, r3
  404516:	0c12      	lsrs	r2, r2, #16
  404518:	f8bc b000 	ldrh.w	fp, [ip]
  40451c:	fb05 a202 	mla	r2, r5, r2, sl
  404520:	fa13 f38b 	uxtah	r3, r3, fp
  404524:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  404528:	fa1f fb82 	uxth.w	fp, r2
  40452c:	f8dc 2000 	ldr.w	r2, [ip]
  404530:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  404534:	eb02 4223 	add.w	r2, r2, r3, asr #16
  404538:	b29b      	uxth	r3, r3
  40453a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40453e:	4581      	cmp	r9, r0
  404540:	ea4f 4b22 	mov.w	fp, r2, asr #16
  404544:	f84c 3b04 	str.w	r3, [ip], #4
  404548:	d2db      	bcs.n	404502 <quorem+0x42>
  40454a:	f856 300e 	ldr.w	r3, [r6, lr]
  40454e:	b933      	cbnz	r3, 40455e <quorem+0x9e>
  404550:	9b01      	ldr	r3, [sp, #4]
  404552:	3b04      	subs	r3, #4
  404554:	429e      	cmp	r6, r3
  404556:	461a      	mov	r2, r3
  404558:	d330      	bcc.n	4045bc <quorem+0xfc>
  40455a:	f8c8 4010 	str.w	r4, [r8, #16]
  40455e:	4640      	mov	r0, r8
  404560:	f001 fa5f 	bl	405a22 <__mcmp>
  404564:	2800      	cmp	r0, #0
  404566:	db25      	blt.n	4045b4 <quorem+0xf4>
  404568:	3501      	adds	r5, #1
  40456a:	4630      	mov	r0, r6
  40456c:	f04f 0e00 	mov.w	lr, #0
  404570:	f857 2b04 	ldr.w	r2, [r7], #4
  404574:	f8d0 c000 	ldr.w	ip, [r0]
  404578:	b293      	uxth	r3, r2
  40457a:	ebae 0303 	sub.w	r3, lr, r3
  40457e:	0c12      	lsrs	r2, r2, #16
  404580:	fa13 f38c 	uxtah	r3, r3, ip
  404584:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  404588:	eb02 4223 	add.w	r2, r2, r3, asr #16
  40458c:	b29b      	uxth	r3, r3
  40458e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404592:	45b9      	cmp	r9, r7
  404594:	ea4f 4e22 	mov.w	lr, r2, asr #16
  404598:	f840 3b04 	str.w	r3, [r0], #4
  40459c:	d2e8      	bcs.n	404570 <quorem+0xb0>
  40459e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  4045a2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  4045a6:	b92a      	cbnz	r2, 4045b4 <quorem+0xf4>
  4045a8:	3b04      	subs	r3, #4
  4045aa:	429e      	cmp	r6, r3
  4045ac:	461a      	mov	r2, r3
  4045ae:	d30b      	bcc.n	4045c8 <quorem+0x108>
  4045b0:	f8c8 4010 	str.w	r4, [r8, #16]
  4045b4:	4628      	mov	r0, r5
  4045b6:	b003      	add	sp, #12
  4045b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045bc:	6812      	ldr	r2, [r2, #0]
  4045be:	3b04      	subs	r3, #4
  4045c0:	2a00      	cmp	r2, #0
  4045c2:	d1ca      	bne.n	40455a <quorem+0x9a>
  4045c4:	3c01      	subs	r4, #1
  4045c6:	e7c5      	b.n	404554 <quorem+0x94>
  4045c8:	6812      	ldr	r2, [r2, #0]
  4045ca:	3b04      	subs	r3, #4
  4045cc:	2a00      	cmp	r2, #0
  4045ce:	d1ef      	bne.n	4045b0 <quorem+0xf0>
  4045d0:	3c01      	subs	r4, #1
  4045d2:	e7ea      	b.n	4045aa <quorem+0xea>
  4045d4:	2000      	movs	r0, #0
  4045d6:	e7ee      	b.n	4045b6 <quorem+0xf6>

004045d8 <_dtoa_r>:
  4045d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4045dc:	6a46      	ldr	r6, [r0, #36]	; 0x24
  4045de:	b095      	sub	sp, #84	; 0x54
  4045e0:	4604      	mov	r4, r0
  4045e2:	9d21      	ldr	r5, [sp, #132]	; 0x84
  4045e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4045e8:	b93e      	cbnz	r6, 4045fa <_dtoa_r+0x22>
  4045ea:	2010      	movs	r0, #16
  4045ec:	f000 ffb4 	bl	405558 <malloc>
  4045f0:	6260      	str	r0, [r4, #36]	; 0x24
  4045f2:	6046      	str	r6, [r0, #4]
  4045f4:	6086      	str	r6, [r0, #8]
  4045f6:	6006      	str	r6, [r0, #0]
  4045f8:	60c6      	str	r6, [r0, #12]
  4045fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4045fc:	6819      	ldr	r1, [r3, #0]
  4045fe:	b151      	cbz	r1, 404616 <_dtoa_r+0x3e>
  404600:	685a      	ldr	r2, [r3, #4]
  404602:	604a      	str	r2, [r1, #4]
  404604:	2301      	movs	r3, #1
  404606:	4093      	lsls	r3, r2
  404608:	608b      	str	r3, [r1, #8]
  40460a:	4620      	mov	r0, r4
  40460c:	f001 f834 	bl	405678 <_Bfree>
  404610:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404612:	2200      	movs	r2, #0
  404614:	601a      	str	r2, [r3, #0]
  404616:	9b03      	ldr	r3, [sp, #12]
  404618:	2b00      	cmp	r3, #0
  40461a:	bfbf      	itttt	lt
  40461c:	2301      	movlt	r3, #1
  40461e:	602b      	strlt	r3, [r5, #0]
  404620:	9b03      	ldrlt	r3, [sp, #12]
  404622:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  404626:	bfb2      	itee	lt
  404628:	9303      	strlt	r3, [sp, #12]
  40462a:	2300      	movge	r3, #0
  40462c:	602b      	strge	r3, [r5, #0]
  40462e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  404632:	4ba9      	ldr	r3, [pc, #676]	; (4048d8 <_dtoa_r+0x300>)
  404634:	ea33 0309 	bics.w	r3, r3, r9
  404638:	d11b      	bne.n	404672 <_dtoa_r+0x9a>
  40463a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40463c:	f242 730f 	movw	r3, #9999	; 0x270f
  404640:	6013      	str	r3, [r2, #0]
  404642:	9b02      	ldr	r3, [sp, #8]
  404644:	b923      	cbnz	r3, 404650 <_dtoa_r+0x78>
  404646:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40464a:	2800      	cmp	r0, #0
  40464c:	f000 8581 	beq.w	405152 <_dtoa_r+0xb7a>
  404650:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404652:	b953      	cbnz	r3, 40466a <_dtoa_r+0x92>
  404654:	4ba1      	ldr	r3, [pc, #644]	; (4048dc <_dtoa_r+0x304>)
  404656:	e021      	b.n	40469c <_dtoa_r+0xc4>
  404658:	4ba1      	ldr	r3, [pc, #644]	; (4048e0 <_dtoa_r+0x308>)
  40465a:	9306      	str	r3, [sp, #24]
  40465c:	3308      	adds	r3, #8
  40465e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404660:	6013      	str	r3, [r2, #0]
  404662:	9806      	ldr	r0, [sp, #24]
  404664:	b015      	add	sp, #84	; 0x54
  404666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40466a:	4b9c      	ldr	r3, [pc, #624]	; (4048dc <_dtoa_r+0x304>)
  40466c:	9306      	str	r3, [sp, #24]
  40466e:	3303      	adds	r3, #3
  404670:	e7f5      	b.n	40465e <_dtoa_r+0x86>
  404672:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  404676:	2200      	movs	r2, #0
  404678:	2300      	movs	r3, #0
  40467a:	4630      	mov	r0, r6
  40467c:	4639      	mov	r1, r7
  40467e:	f7ff f909 	bl	403894 <__aeabi_dcmpeq>
  404682:	4680      	mov	r8, r0
  404684:	b160      	cbz	r0, 4046a0 <_dtoa_r+0xc8>
  404686:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404688:	2301      	movs	r3, #1
  40468a:	6013      	str	r3, [r2, #0]
  40468c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40468e:	2b00      	cmp	r3, #0
  404690:	f000 855c 	beq.w	40514c <_dtoa_r+0xb74>
  404694:	4b93      	ldr	r3, [pc, #588]	; (4048e4 <_dtoa_r+0x30c>)
  404696:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404698:	6013      	str	r3, [r2, #0]
  40469a:	3b01      	subs	r3, #1
  40469c:	9306      	str	r3, [sp, #24]
  40469e:	e7e0      	b.n	404662 <_dtoa_r+0x8a>
  4046a0:	ab12      	add	r3, sp, #72	; 0x48
  4046a2:	9301      	str	r3, [sp, #4]
  4046a4:	ab13      	add	r3, sp, #76	; 0x4c
  4046a6:	9300      	str	r3, [sp, #0]
  4046a8:	4632      	mov	r2, r6
  4046aa:	463b      	mov	r3, r7
  4046ac:	4620      	mov	r0, r4
  4046ae:	f001 fa30 	bl	405b12 <__d2b>
  4046b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
  4046b6:	4682      	mov	sl, r0
  4046b8:	2d00      	cmp	r5, #0
  4046ba:	d07c      	beq.n	4047b6 <_dtoa_r+0x1de>
  4046bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
  4046c0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4046c4:	4630      	mov	r0, r6
  4046c6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4046ca:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  4046ce:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  4046d2:	2200      	movs	r2, #0
  4046d4:	4b84      	ldr	r3, [pc, #528]	; (4048e8 <_dtoa_r+0x310>)
  4046d6:	f7fe fcc1 	bl	40305c <__aeabi_dsub>
  4046da:	a379      	add	r3, pc, #484	; (adr r3, 4048c0 <_dtoa_r+0x2e8>)
  4046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4046e0:	f7fe fe70 	bl	4033c4 <__aeabi_dmul>
  4046e4:	a378      	add	r3, pc, #480	; (adr r3, 4048c8 <_dtoa_r+0x2f0>)
  4046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4046ea:	f7fe fcb9 	bl	403060 <__adddf3>
  4046ee:	4606      	mov	r6, r0
  4046f0:	4628      	mov	r0, r5
  4046f2:	460f      	mov	r7, r1
  4046f4:	f7fe fe00 	bl	4032f8 <__aeabi_i2d>
  4046f8:	a375      	add	r3, pc, #468	; (adr r3, 4048d0 <_dtoa_r+0x2f8>)
  4046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4046fe:	f7fe fe61 	bl	4033c4 <__aeabi_dmul>
  404702:	4602      	mov	r2, r0
  404704:	460b      	mov	r3, r1
  404706:	4630      	mov	r0, r6
  404708:	4639      	mov	r1, r7
  40470a:	f7fe fca9 	bl	403060 <__adddf3>
  40470e:	4606      	mov	r6, r0
  404710:	460f      	mov	r7, r1
  404712:	f7ff f8f1 	bl	4038f8 <__aeabi_d2iz>
  404716:	2200      	movs	r2, #0
  404718:	4683      	mov	fp, r0
  40471a:	2300      	movs	r3, #0
  40471c:	4630      	mov	r0, r6
  40471e:	4639      	mov	r1, r7
  404720:	f7ff f8c2 	bl	4038a8 <__aeabi_dcmplt>
  404724:	b158      	cbz	r0, 40473e <_dtoa_r+0x166>
  404726:	4658      	mov	r0, fp
  404728:	f7fe fde6 	bl	4032f8 <__aeabi_i2d>
  40472c:	4602      	mov	r2, r0
  40472e:	460b      	mov	r3, r1
  404730:	4630      	mov	r0, r6
  404732:	4639      	mov	r1, r7
  404734:	f7ff f8ae 	bl	403894 <__aeabi_dcmpeq>
  404738:	b908      	cbnz	r0, 40473e <_dtoa_r+0x166>
  40473a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40473e:	f1bb 0f16 	cmp.w	fp, #22
  404742:	d857      	bhi.n	4047f4 <_dtoa_r+0x21c>
  404744:	4969      	ldr	r1, [pc, #420]	; (4048ec <_dtoa_r+0x314>)
  404746:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40474a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40474e:	e9d1 0100 	ldrd	r0, r1, [r1]
  404752:	f7ff f8c7 	bl	4038e4 <__aeabi_dcmpgt>
  404756:	2800      	cmp	r0, #0
  404758:	d04e      	beq.n	4047f8 <_dtoa_r+0x220>
  40475a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40475e:	2300      	movs	r3, #0
  404760:	930d      	str	r3, [sp, #52]	; 0x34
  404762:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404764:	1b5d      	subs	r5, r3, r5
  404766:	1e6b      	subs	r3, r5, #1
  404768:	9307      	str	r3, [sp, #28]
  40476a:	bf43      	ittte	mi
  40476c:	2300      	movmi	r3, #0
  40476e:	f1c5 0801 	rsbmi	r8, r5, #1
  404772:	9307      	strmi	r3, [sp, #28]
  404774:	f04f 0800 	movpl.w	r8, #0
  404778:	f1bb 0f00 	cmp.w	fp, #0
  40477c:	db3e      	blt.n	4047fc <_dtoa_r+0x224>
  40477e:	9b07      	ldr	r3, [sp, #28]
  404780:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  404784:	445b      	add	r3, fp
  404786:	9307      	str	r3, [sp, #28]
  404788:	2300      	movs	r3, #0
  40478a:	9308      	str	r3, [sp, #32]
  40478c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40478e:	2b09      	cmp	r3, #9
  404790:	f200 80b0 	bhi.w	4048f4 <_dtoa_r+0x31c>
  404794:	2b05      	cmp	r3, #5
  404796:	bfc4      	itt	gt
  404798:	3b04      	subgt	r3, #4
  40479a:	931e      	strgt	r3, [sp, #120]	; 0x78
  40479c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40479e:	f1a3 0302 	sub.w	r3, r3, #2
  4047a2:	bfcc      	ite	gt
  4047a4:	2600      	movgt	r6, #0
  4047a6:	2601      	movle	r6, #1
  4047a8:	2b03      	cmp	r3, #3
  4047aa:	f200 80af 	bhi.w	40490c <_dtoa_r+0x334>
  4047ae:	e8df f003 	tbb	[pc, r3]
  4047b2:	8583      	.short	0x8583
  4047b4:	772d      	.short	0x772d
  4047b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4047b8:	9d12      	ldr	r5, [sp, #72]	; 0x48
  4047ba:	441d      	add	r5, r3
  4047bc:	f205 4332 	addw	r3, r5, #1074	; 0x432
  4047c0:	2b20      	cmp	r3, #32
  4047c2:	dd11      	ble.n	4047e8 <_dtoa_r+0x210>
  4047c4:	9a02      	ldr	r2, [sp, #8]
  4047c6:	f205 4012 	addw	r0, r5, #1042	; 0x412
  4047ca:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4047ce:	fa22 f000 	lsr.w	r0, r2, r0
  4047d2:	fa09 f303 	lsl.w	r3, r9, r3
  4047d6:	4318      	orrs	r0, r3
  4047d8:	f7fe fd7e 	bl	4032d8 <__aeabi_ui2d>
  4047dc:	2301      	movs	r3, #1
  4047de:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4047e2:	3d01      	subs	r5, #1
  4047e4:	9310      	str	r3, [sp, #64]	; 0x40
  4047e6:	e774      	b.n	4046d2 <_dtoa_r+0xfa>
  4047e8:	f1c3 0020 	rsb	r0, r3, #32
  4047ec:	9b02      	ldr	r3, [sp, #8]
  4047ee:	fa03 f000 	lsl.w	r0, r3, r0
  4047f2:	e7f1      	b.n	4047d8 <_dtoa_r+0x200>
  4047f4:	2301      	movs	r3, #1
  4047f6:	e7b3      	b.n	404760 <_dtoa_r+0x188>
  4047f8:	900d      	str	r0, [sp, #52]	; 0x34
  4047fa:	e7b2      	b.n	404762 <_dtoa_r+0x18a>
  4047fc:	f1cb 0300 	rsb	r3, fp, #0
  404800:	9308      	str	r3, [sp, #32]
  404802:	2300      	movs	r3, #0
  404804:	eba8 080b 	sub.w	r8, r8, fp
  404808:	930c      	str	r3, [sp, #48]	; 0x30
  40480a:	e7bf      	b.n	40478c <_dtoa_r+0x1b4>
  40480c:	2301      	movs	r3, #1
  40480e:	9309      	str	r3, [sp, #36]	; 0x24
  404810:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404812:	2b00      	cmp	r3, #0
  404814:	dd7d      	ble.n	404912 <_dtoa_r+0x33a>
  404816:	9304      	str	r3, [sp, #16]
  404818:	4699      	mov	r9, r3
  40481a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40481c:	2200      	movs	r2, #0
  40481e:	606a      	str	r2, [r5, #4]
  404820:	2104      	movs	r1, #4
  404822:	f101 0214 	add.w	r2, r1, #20
  404826:	429a      	cmp	r2, r3
  404828:	d978      	bls.n	40491c <_dtoa_r+0x344>
  40482a:	6869      	ldr	r1, [r5, #4]
  40482c:	4620      	mov	r0, r4
  40482e:	f000 feef 	bl	405610 <_Balloc>
  404832:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404834:	6028      	str	r0, [r5, #0]
  404836:	681b      	ldr	r3, [r3, #0]
  404838:	9306      	str	r3, [sp, #24]
  40483a:	f1b9 0f0e 	cmp.w	r9, #14
  40483e:	f200 80ee 	bhi.w	404a1e <_dtoa_r+0x446>
  404842:	2e00      	cmp	r6, #0
  404844:	f000 80eb 	beq.w	404a1e <_dtoa_r+0x446>
  404848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40484c:	f1bb 0f00 	cmp.w	fp, #0
  404850:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  404854:	dd77      	ble.n	404946 <_dtoa_r+0x36e>
  404856:	4a25      	ldr	r2, [pc, #148]	; (4048ec <_dtoa_r+0x314>)
  404858:	f00b 030f 	and.w	r3, fp, #15
  40485c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404860:	e9d3 2300 	ldrd	r2, r3, [r3]
  404864:	ea4f 162b 	mov.w	r6, fp, asr #4
  404868:	06f0      	lsls	r0, r6, #27
  40486a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40486e:	d55a      	bpl.n	404926 <_dtoa_r+0x34e>
  404870:	4b1f      	ldr	r3, [pc, #124]	; (4048f0 <_dtoa_r+0x318>)
  404872:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404876:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40487a:	f7fe fecd 	bl	403618 <__aeabi_ddiv>
  40487e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404882:	f006 060f 	and.w	r6, r6, #15
  404886:	2503      	movs	r5, #3
  404888:	4f19      	ldr	r7, [pc, #100]	; (4048f0 <_dtoa_r+0x318>)
  40488a:	2e00      	cmp	r6, #0
  40488c:	d14d      	bne.n	40492a <_dtoa_r+0x352>
  40488e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404896:	f7fe febf 	bl	403618 <__aeabi_ddiv>
  40489a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40489e:	e06c      	b.n	40497a <_dtoa_r+0x3a2>
  4048a0:	2301      	movs	r3, #1
  4048a2:	9309      	str	r3, [sp, #36]	; 0x24
  4048a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4048a6:	445b      	add	r3, fp
  4048a8:	f103 0901 	add.w	r9, r3, #1
  4048ac:	9304      	str	r3, [sp, #16]
  4048ae:	464b      	mov	r3, r9
  4048b0:	2b01      	cmp	r3, #1
  4048b2:	bfb8      	it	lt
  4048b4:	2301      	movlt	r3, #1
  4048b6:	e7b0      	b.n	40481a <_dtoa_r+0x242>
  4048b8:	2300      	movs	r3, #0
  4048ba:	e7a8      	b.n	40480e <_dtoa_r+0x236>
  4048bc:	2300      	movs	r3, #0
  4048be:	e7f0      	b.n	4048a2 <_dtoa_r+0x2ca>
  4048c0:	636f4361 	.word	0x636f4361
  4048c4:	3fd287a7 	.word	0x3fd287a7
  4048c8:	8b60c8b3 	.word	0x8b60c8b3
  4048cc:	3fc68a28 	.word	0x3fc68a28
  4048d0:	509f79fb 	.word	0x509f79fb
  4048d4:	3fd34413 	.word	0x3fd34413
  4048d8:	7ff00000 	.word	0x7ff00000
  4048dc:	00406919 	.word	0x00406919
  4048e0:	00406910 	.word	0x00406910
  4048e4:	004068ed 	.word	0x004068ed
  4048e8:	3ff80000 	.word	0x3ff80000
  4048ec:	004069a8 	.word	0x004069a8
  4048f0:	00406980 	.word	0x00406980
  4048f4:	2601      	movs	r6, #1
  4048f6:	2300      	movs	r3, #0
  4048f8:	931e      	str	r3, [sp, #120]	; 0x78
  4048fa:	9609      	str	r6, [sp, #36]	; 0x24
  4048fc:	f04f 33ff 	mov.w	r3, #4294967295
  404900:	9304      	str	r3, [sp, #16]
  404902:	4699      	mov	r9, r3
  404904:	2200      	movs	r2, #0
  404906:	2312      	movs	r3, #18
  404908:	921f      	str	r2, [sp, #124]	; 0x7c
  40490a:	e786      	b.n	40481a <_dtoa_r+0x242>
  40490c:	2301      	movs	r3, #1
  40490e:	9309      	str	r3, [sp, #36]	; 0x24
  404910:	e7f4      	b.n	4048fc <_dtoa_r+0x324>
  404912:	2301      	movs	r3, #1
  404914:	9304      	str	r3, [sp, #16]
  404916:	4699      	mov	r9, r3
  404918:	461a      	mov	r2, r3
  40491a:	e7f5      	b.n	404908 <_dtoa_r+0x330>
  40491c:	686a      	ldr	r2, [r5, #4]
  40491e:	3201      	adds	r2, #1
  404920:	606a      	str	r2, [r5, #4]
  404922:	0049      	lsls	r1, r1, #1
  404924:	e77d      	b.n	404822 <_dtoa_r+0x24a>
  404926:	2502      	movs	r5, #2
  404928:	e7ae      	b.n	404888 <_dtoa_r+0x2b0>
  40492a:	07f1      	lsls	r1, r6, #31
  40492c:	d508      	bpl.n	404940 <_dtoa_r+0x368>
  40492e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404932:	e9d7 2300 	ldrd	r2, r3, [r7]
  404936:	f7fe fd45 	bl	4033c4 <__aeabi_dmul>
  40493a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40493e:	3501      	adds	r5, #1
  404940:	1076      	asrs	r6, r6, #1
  404942:	3708      	adds	r7, #8
  404944:	e7a1      	b.n	40488a <_dtoa_r+0x2b2>
  404946:	f000 80a5 	beq.w	404a94 <_dtoa_r+0x4bc>
  40494a:	f1cb 0600 	rsb	r6, fp, #0
  40494e:	4ba3      	ldr	r3, [pc, #652]	; (404bdc <_dtoa_r+0x604>)
  404950:	4fa3      	ldr	r7, [pc, #652]	; (404be0 <_dtoa_r+0x608>)
  404952:	f006 020f 	and.w	r2, r6, #15
  404956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40495a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40495e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404962:	f7fe fd2f 	bl	4033c4 <__aeabi_dmul>
  404966:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40496a:	1136      	asrs	r6, r6, #4
  40496c:	2300      	movs	r3, #0
  40496e:	2502      	movs	r5, #2
  404970:	2e00      	cmp	r6, #0
  404972:	f040 8084 	bne.w	404a7e <_dtoa_r+0x4a6>
  404976:	2b00      	cmp	r3, #0
  404978:	d18f      	bne.n	40489a <_dtoa_r+0x2c2>
  40497a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40497c:	2b00      	cmp	r3, #0
  40497e:	f000 808b 	beq.w	404a98 <_dtoa_r+0x4c0>
  404982:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404986:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40498a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40498e:	2200      	movs	r2, #0
  404990:	4b94      	ldr	r3, [pc, #592]	; (404be4 <_dtoa_r+0x60c>)
  404992:	f7fe ff89 	bl	4038a8 <__aeabi_dcmplt>
  404996:	2800      	cmp	r0, #0
  404998:	d07e      	beq.n	404a98 <_dtoa_r+0x4c0>
  40499a:	f1b9 0f00 	cmp.w	r9, #0
  40499e:	d07b      	beq.n	404a98 <_dtoa_r+0x4c0>
  4049a0:	9b04      	ldr	r3, [sp, #16]
  4049a2:	2b00      	cmp	r3, #0
  4049a4:	dd37      	ble.n	404a16 <_dtoa_r+0x43e>
  4049a6:	2200      	movs	r2, #0
  4049a8:	4b8f      	ldr	r3, [pc, #572]	; (404be8 <_dtoa_r+0x610>)
  4049aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4049ae:	f7fe fd09 	bl	4033c4 <__aeabi_dmul>
  4049b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4049b6:	9e04      	ldr	r6, [sp, #16]
  4049b8:	f10b 37ff 	add.w	r7, fp, #4294967295
  4049bc:	3501      	adds	r5, #1
  4049be:	4628      	mov	r0, r5
  4049c0:	f7fe fc9a 	bl	4032f8 <__aeabi_i2d>
  4049c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4049c8:	f7fe fcfc 	bl	4033c4 <__aeabi_dmul>
  4049cc:	4b87      	ldr	r3, [pc, #540]	; (404bec <_dtoa_r+0x614>)
  4049ce:	2200      	movs	r2, #0
  4049d0:	f7fe fb46 	bl	403060 <__adddf3>
  4049d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4049d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4049da:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  4049de:	950b      	str	r5, [sp, #44]	; 0x2c
  4049e0:	2e00      	cmp	r6, #0
  4049e2:	d15c      	bne.n	404a9e <_dtoa_r+0x4c6>
  4049e4:	2200      	movs	r2, #0
  4049e6:	4b82      	ldr	r3, [pc, #520]	; (404bf0 <_dtoa_r+0x618>)
  4049e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4049ec:	f7fe fb36 	bl	40305c <__aeabi_dsub>
  4049f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4049f2:	462b      	mov	r3, r5
  4049f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4049f8:	f7fe ff74 	bl	4038e4 <__aeabi_dcmpgt>
  4049fc:	2800      	cmp	r0, #0
  4049fe:	f040 82f7 	bne.w	404ff0 <_dtoa_r+0xa18>
  404a02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404a04:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  404a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404a0c:	f7fe ff4c 	bl	4038a8 <__aeabi_dcmplt>
  404a10:	2800      	cmp	r0, #0
  404a12:	f040 82eb 	bne.w	404fec <_dtoa_r+0xa14>
  404a16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  404a1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404a1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a20:	2b00      	cmp	r3, #0
  404a22:	f2c0 8151 	blt.w	404cc8 <_dtoa_r+0x6f0>
  404a26:	f1bb 0f0e 	cmp.w	fp, #14
  404a2a:	f300 814d 	bgt.w	404cc8 <_dtoa_r+0x6f0>
  404a2e:	4b6b      	ldr	r3, [pc, #428]	; (404bdc <_dtoa_r+0x604>)
  404a30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  404a34:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a38:	e9cd 2304 	strd	r2, r3, [sp, #16]
  404a3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404a3e:	2b00      	cmp	r3, #0
  404a40:	f280 80da 	bge.w	404bf8 <_dtoa_r+0x620>
  404a44:	f1b9 0f00 	cmp.w	r9, #0
  404a48:	f300 80d6 	bgt.w	404bf8 <_dtoa_r+0x620>
  404a4c:	f040 82cd 	bne.w	404fea <_dtoa_r+0xa12>
  404a50:	2200      	movs	r2, #0
  404a52:	4b67      	ldr	r3, [pc, #412]	; (404bf0 <_dtoa_r+0x618>)
  404a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404a58:	f7fe fcb4 	bl	4033c4 <__aeabi_dmul>
  404a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404a60:	f7fe ff36 	bl	4038d0 <__aeabi_dcmpge>
  404a64:	464e      	mov	r6, r9
  404a66:	464f      	mov	r7, r9
  404a68:	2800      	cmp	r0, #0
  404a6a:	f040 82a4 	bne.w	404fb6 <_dtoa_r+0x9de>
  404a6e:	9b06      	ldr	r3, [sp, #24]
  404a70:	9a06      	ldr	r2, [sp, #24]
  404a72:	1c5d      	adds	r5, r3, #1
  404a74:	2331      	movs	r3, #49	; 0x31
  404a76:	7013      	strb	r3, [r2, #0]
  404a78:	f10b 0b01 	add.w	fp, fp, #1
  404a7c:	e29f      	b.n	404fbe <_dtoa_r+0x9e6>
  404a7e:	07f2      	lsls	r2, r6, #31
  404a80:	d505      	bpl.n	404a8e <_dtoa_r+0x4b6>
  404a82:	e9d7 2300 	ldrd	r2, r3, [r7]
  404a86:	f7fe fc9d 	bl	4033c4 <__aeabi_dmul>
  404a8a:	3501      	adds	r5, #1
  404a8c:	2301      	movs	r3, #1
  404a8e:	1076      	asrs	r6, r6, #1
  404a90:	3708      	adds	r7, #8
  404a92:	e76d      	b.n	404970 <_dtoa_r+0x398>
  404a94:	2502      	movs	r5, #2
  404a96:	e770      	b.n	40497a <_dtoa_r+0x3a2>
  404a98:	465f      	mov	r7, fp
  404a9a:	464e      	mov	r6, r9
  404a9c:	e78f      	b.n	4049be <_dtoa_r+0x3e6>
  404a9e:	9a06      	ldr	r2, [sp, #24]
  404aa0:	4b4e      	ldr	r3, [pc, #312]	; (404bdc <_dtoa_r+0x604>)
  404aa2:	4432      	add	r2, r6
  404aa4:	9211      	str	r2, [sp, #68]	; 0x44
  404aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404aa8:	1e71      	subs	r1, r6, #1
  404aaa:	2a00      	cmp	r2, #0
  404aac:	d048      	beq.n	404b40 <_dtoa_r+0x568>
  404aae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  404ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ab6:	2000      	movs	r0, #0
  404ab8:	494e      	ldr	r1, [pc, #312]	; (404bf4 <_dtoa_r+0x61c>)
  404aba:	f7fe fdad 	bl	403618 <__aeabi_ddiv>
  404abe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404ac2:	f7fe facb 	bl	40305c <__aeabi_dsub>
  404ac6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404aca:	9d06      	ldr	r5, [sp, #24]
  404acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ad0:	f7fe ff12 	bl	4038f8 <__aeabi_d2iz>
  404ad4:	4606      	mov	r6, r0
  404ad6:	f7fe fc0f 	bl	4032f8 <__aeabi_i2d>
  404ada:	4602      	mov	r2, r0
  404adc:	460b      	mov	r3, r1
  404ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ae2:	f7fe fabb 	bl	40305c <__aeabi_dsub>
  404ae6:	3630      	adds	r6, #48	; 0x30
  404ae8:	f805 6b01 	strb.w	r6, [r5], #1
  404aec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404af0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404af4:	f7fe fed8 	bl	4038a8 <__aeabi_dcmplt>
  404af8:	2800      	cmp	r0, #0
  404afa:	d165      	bne.n	404bc8 <_dtoa_r+0x5f0>
  404afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404b00:	2000      	movs	r0, #0
  404b02:	4938      	ldr	r1, [pc, #224]	; (404be4 <_dtoa_r+0x60c>)
  404b04:	f7fe faaa 	bl	40305c <__aeabi_dsub>
  404b08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404b0c:	f7fe fecc 	bl	4038a8 <__aeabi_dcmplt>
  404b10:	2800      	cmp	r0, #0
  404b12:	f040 80b9 	bne.w	404c88 <_dtoa_r+0x6b0>
  404b16:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b18:	429d      	cmp	r5, r3
  404b1a:	f43f af7c 	beq.w	404a16 <_dtoa_r+0x43e>
  404b1e:	2200      	movs	r2, #0
  404b20:	4b31      	ldr	r3, [pc, #196]	; (404be8 <_dtoa_r+0x610>)
  404b22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404b26:	f7fe fc4d 	bl	4033c4 <__aeabi_dmul>
  404b2a:	2200      	movs	r2, #0
  404b2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404b30:	4b2d      	ldr	r3, [pc, #180]	; (404be8 <_dtoa_r+0x610>)
  404b32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404b36:	f7fe fc45 	bl	4033c4 <__aeabi_dmul>
  404b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404b3e:	e7c5      	b.n	404acc <_dtoa_r+0x4f4>
  404b40:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404b44:	e9d1 0100 	ldrd	r0, r1, [r1]
  404b48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404b4c:	f7fe fc3a 	bl	4033c4 <__aeabi_dmul>
  404b50:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404b54:	9d06      	ldr	r5, [sp, #24]
  404b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404b5a:	f7fe fecd 	bl	4038f8 <__aeabi_d2iz>
  404b5e:	4606      	mov	r6, r0
  404b60:	f7fe fbca 	bl	4032f8 <__aeabi_i2d>
  404b64:	3630      	adds	r6, #48	; 0x30
  404b66:	4602      	mov	r2, r0
  404b68:	460b      	mov	r3, r1
  404b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404b6e:	f7fe fa75 	bl	40305c <__aeabi_dsub>
  404b72:	f805 6b01 	strb.w	r6, [r5], #1
  404b76:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b78:	42ab      	cmp	r3, r5
  404b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404b7e:	f04f 0200 	mov.w	r2, #0
  404b82:	d125      	bne.n	404bd0 <_dtoa_r+0x5f8>
  404b84:	4b1b      	ldr	r3, [pc, #108]	; (404bf4 <_dtoa_r+0x61c>)
  404b86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404b8a:	f7fe fa69 	bl	403060 <__adddf3>
  404b8e:	4602      	mov	r2, r0
  404b90:	460b      	mov	r3, r1
  404b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404b96:	f7fe fea5 	bl	4038e4 <__aeabi_dcmpgt>
  404b9a:	2800      	cmp	r0, #0
  404b9c:	d174      	bne.n	404c88 <_dtoa_r+0x6b0>
  404b9e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404ba2:	2000      	movs	r0, #0
  404ba4:	4913      	ldr	r1, [pc, #76]	; (404bf4 <_dtoa_r+0x61c>)
  404ba6:	f7fe fa59 	bl	40305c <__aeabi_dsub>
  404baa:	4602      	mov	r2, r0
  404bac:	460b      	mov	r3, r1
  404bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404bb2:	f7fe fe79 	bl	4038a8 <__aeabi_dcmplt>
  404bb6:	2800      	cmp	r0, #0
  404bb8:	f43f af2d 	beq.w	404a16 <_dtoa_r+0x43e>
  404bbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404bc0:	2b30      	cmp	r3, #48	; 0x30
  404bc2:	f105 32ff 	add.w	r2, r5, #4294967295
  404bc6:	d001      	beq.n	404bcc <_dtoa_r+0x5f4>
  404bc8:	46bb      	mov	fp, r7
  404bca:	e04c      	b.n	404c66 <_dtoa_r+0x68e>
  404bcc:	4615      	mov	r5, r2
  404bce:	e7f5      	b.n	404bbc <_dtoa_r+0x5e4>
  404bd0:	4b05      	ldr	r3, [pc, #20]	; (404be8 <_dtoa_r+0x610>)
  404bd2:	f7fe fbf7 	bl	4033c4 <__aeabi_dmul>
  404bd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404bda:	e7bc      	b.n	404b56 <_dtoa_r+0x57e>
  404bdc:	004069a8 	.word	0x004069a8
  404be0:	00406980 	.word	0x00406980
  404be4:	3ff00000 	.word	0x3ff00000
  404be8:	40240000 	.word	0x40240000
  404bec:	401c0000 	.word	0x401c0000
  404bf0:	40140000 	.word	0x40140000
  404bf4:	3fe00000 	.word	0x3fe00000
  404bf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  404bfc:	9d06      	ldr	r5, [sp, #24]
  404bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404c02:	4630      	mov	r0, r6
  404c04:	4639      	mov	r1, r7
  404c06:	f7fe fd07 	bl	403618 <__aeabi_ddiv>
  404c0a:	f7fe fe75 	bl	4038f8 <__aeabi_d2iz>
  404c0e:	4680      	mov	r8, r0
  404c10:	f7fe fb72 	bl	4032f8 <__aeabi_i2d>
  404c14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404c18:	f7fe fbd4 	bl	4033c4 <__aeabi_dmul>
  404c1c:	4602      	mov	r2, r0
  404c1e:	460b      	mov	r3, r1
  404c20:	4630      	mov	r0, r6
  404c22:	4639      	mov	r1, r7
  404c24:	f108 0630 	add.w	r6, r8, #48	; 0x30
  404c28:	f7fe fa18 	bl	40305c <__aeabi_dsub>
  404c2c:	f805 6b01 	strb.w	r6, [r5], #1
  404c30:	9e06      	ldr	r6, [sp, #24]
  404c32:	1bae      	subs	r6, r5, r6
  404c34:	45b1      	cmp	r9, r6
  404c36:	4602      	mov	r2, r0
  404c38:	460b      	mov	r3, r1
  404c3a:	d138      	bne.n	404cae <_dtoa_r+0x6d6>
  404c3c:	f7fe fa10 	bl	403060 <__adddf3>
  404c40:	4606      	mov	r6, r0
  404c42:	460f      	mov	r7, r1
  404c44:	4602      	mov	r2, r0
  404c46:	460b      	mov	r3, r1
  404c48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404c4c:	f7fe fe2c 	bl	4038a8 <__aeabi_dcmplt>
  404c50:	b9c8      	cbnz	r0, 404c86 <_dtoa_r+0x6ae>
  404c52:	4632      	mov	r2, r6
  404c54:	463b      	mov	r3, r7
  404c56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404c5a:	f7fe fe1b 	bl	403894 <__aeabi_dcmpeq>
  404c5e:	b110      	cbz	r0, 404c66 <_dtoa_r+0x68e>
  404c60:	f018 0f01 	tst.w	r8, #1
  404c64:	d10f      	bne.n	404c86 <_dtoa_r+0x6ae>
  404c66:	4651      	mov	r1, sl
  404c68:	4620      	mov	r0, r4
  404c6a:	f000 fd05 	bl	405678 <_Bfree>
  404c6e:	2300      	movs	r3, #0
  404c70:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404c72:	702b      	strb	r3, [r5, #0]
  404c74:	f10b 0301 	add.w	r3, fp, #1
  404c78:	6013      	str	r3, [r2, #0]
  404c7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404c7c:	2b00      	cmp	r3, #0
  404c7e:	f43f acf0 	beq.w	404662 <_dtoa_r+0x8a>
  404c82:	601d      	str	r5, [r3, #0]
  404c84:	e4ed      	b.n	404662 <_dtoa_r+0x8a>
  404c86:	465f      	mov	r7, fp
  404c88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  404c8c:	2a39      	cmp	r2, #57	; 0x39
  404c8e:	f105 33ff 	add.w	r3, r5, #4294967295
  404c92:	d106      	bne.n	404ca2 <_dtoa_r+0x6ca>
  404c94:	9a06      	ldr	r2, [sp, #24]
  404c96:	429a      	cmp	r2, r3
  404c98:	d107      	bne.n	404caa <_dtoa_r+0x6d2>
  404c9a:	2330      	movs	r3, #48	; 0x30
  404c9c:	7013      	strb	r3, [r2, #0]
  404c9e:	3701      	adds	r7, #1
  404ca0:	4613      	mov	r3, r2
  404ca2:	781a      	ldrb	r2, [r3, #0]
  404ca4:	3201      	adds	r2, #1
  404ca6:	701a      	strb	r2, [r3, #0]
  404ca8:	e78e      	b.n	404bc8 <_dtoa_r+0x5f0>
  404caa:	461d      	mov	r5, r3
  404cac:	e7ec      	b.n	404c88 <_dtoa_r+0x6b0>
  404cae:	2200      	movs	r2, #0
  404cb0:	4bb4      	ldr	r3, [pc, #720]	; (404f84 <_dtoa_r+0x9ac>)
  404cb2:	f7fe fb87 	bl	4033c4 <__aeabi_dmul>
  404cb6:	2200      	movs	r2, #0
  404cb8:	2300      	movs	r3, #0
  404cba:	4606      	mov	r6, r0
  404cbc:	460f      	mov	r7, r1
  404cbe:	f7fe fde9 	bl	403894 <__aeabi_dcmpeq>
  404cc2:	2800      	cmp	r0, #0
  404cc4:	d09b      	beq.n	404bfe <_dtoa_r+0x626>
  404cc6:	e7ce      	b.n	404c66 <_dtoa_r+0x68e>
  404cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404cca:	2a00      	cmp	r2, #0
  404ccc:	f000 8129 	beq.w	404f22 <_dtoa_r+0x94a>
  404cd0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404cd2:	2a01      	cmp	r2, #1
  404cd4:	f300 810e 	bgt.w	404ef4 <_dtoa_r+0x91c>
  404cd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  404cda:	2a00      	cmp	r2, #0
  404cdc:	f000 8106 	beq.w	404eec <_dtoa_r+0x914>
  404ce0:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404ce4:	9e08      	ldr	r6, [sp, #32]
  404ce6:	4645      	mov	r5, r8
  404ce8:	9a07      	ldr	r2, [sp, #28]
  404cea:	2101      	movs	r1, #1
  404cec:	441a      	add	r2, r3
  404cee:	4620      	mov	r0, r4
  404cf0:	4498      	add	r8, r3
  404cf2:	9207      	str	r2, [sp, #28]
  404cf4:	f000 fd60 	bl	4057b8 <__i2b>
  404cf8:	4607      	mov	r7, r0
  404cfa:	2d00      	cmp	r5, #0
  404cfc:	dd0b      	ble.n	404d16 <_dtoa_r+0x73e>
  404cfe:	9b07      	ldr	r3, [sp, #28]
  404d00:	2b00      	cmp	r3, #0
  404d02:	dd08      	ble.n	404d16 <_dtoa_r+0x73e>
  404d04:	42ab      	cmp	r3, r5
  404d06:	9a07      	ldr	r2, [sp, #28]
  404d08:	bfa8      	it	ge
  404d0a:	462b      	movge	r3, r5
  404d0c:	eba8 0803 	sub.w	r8, r8, r3
  404d10:	1aed      	subs	r5, r5, r3
  404d12:	1ad3      	subs	r3, r2, r3
  404d14:	9307      	str	r3, [sp, #28]
  404d16:	9b08      	ldr	r3, [sp, #32]
  404d18:	b1fb      	cbz	r3, 404d5a <_dtoa_r+0x782>
  404d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404d1c:	2b00      	cmp	r3, #0
  404d1e:	f000 8104 	beq.w	404f2a <_dtoa_r+0x952>
  404d22:	2e00      	cmp	r6, #0
  404d24:	dd11      	ble.n	404d4a <_dtoa_r+0x772>
  404d26:	4639      	mov	r1, r7
  404d28:	4632      	mov	r2, r6
  404d2a:	4620      	mov	r0, r4
  404d2c:	f000 fdda 	bl	4058e4 <__pow5mult>
  404d30:	4652      	mov	r2, sl
  404d32:	4601      	mov	r1, r0
  404d34:	4607      	mov	r7, r0
  404d36:	4620      	mov	r0, r4
  404d38:	f000 fd47 	bl	4057ca <__multiply>
  404d3c:	4651      	mov	r1, sl
  404d3e:	900a      	str	r0, [sp, #40]	; 0x28
  404d40:	4620      	mov	r0, r4
  404d42:	f000 fc99 	bl	405678 <_Bfree>
  404d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d48:	469a      	mov	sl, r3
  404d4a:	9b08      	ldr	r3, [sp, #32]
  404d4c:	1b9a      	subs	r2, r3, r6
  404d4e:	d004      	beq.n	404d5a <_dtoa_r+0x782>
  404d50:	4651      	mov	r1, sl
  404d52:	4620      	mov	r0, r4
  404d54:	f000 fdc6 	bl	4058e4 <__pow5mult>
  404d58:	4682      	mov	sl, r0
  404d5a:	2101      	movs	r1, #1
  404d5c:	4620      	mov	r0, r4
  404d5e:	f000 fd2b 	bl	4057b8 <__i2b>
  404d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404d64:	2b00      	cmp	r3, #0
  404d66:	4606      	mov	r6, r0
  404d68:	f340 80e1 	ble.w	404f2e <_dtoa_r+0x956>
  404d6c:	461a      	mov	r2, r3
  404d6e:	4601      	mov	r1, r0
  404d70:	4620      	mov	r0, r4
  404d72:	f000 fdb7 	bl	4058e4 <__pow5mult>
  404d76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404d78:	2b01      	cmp	r3, #1
  404d7a:	4606      	mov	r6, r0
  404d7c:	f340 80da 	ble.w	404f34 <_dtoa_r+0x95c>
  404d80:	2300      	movs	r3, #0
  404d82:	9308      	str	r3, [sp, #32]
  404d84:	6933      	ldr	r3, [r6, #16]
  404d86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  404d8a:	6918      	ldr	r0, [r3, #16]
  404d8c:	f000 fcc6 	bl	40571c <__hi0bits>
  404d90:	f1c0 0020 	rsb	r0, r0, #32
  404d94:	9b07      	ldr	r3, [sp, #28]
  404d96:	4418      	add	r0, r3
  404d98:	f010 001f 	ands.w	r0, r0, #31
  404d9c:	f000 80f0 	beq.w	404f80 <_dtoa_r+0x9a8>
  404da0:	f1c0 0320 	rsb	r3, r0, #32
  404da4:	2b04      	cmp	r3, #4
  404da6:	f340 80e2 	ble.w	404f6e <_dtoa_r+0x996>
  404daa:	9b07      	ldr	r3, [sp, #28]
  404dac:	f1c0 001c 	rsb	r0, r0, #28
  404db0:	4480      	add	r8, r0
  404db2:	4405      	add	r5, r0
  404db4:	4403      	add	r3, r0
  404db6:	9307      	str	r3, [sp, #28]
  404db8:	f1b8 0f00 	cmp.w	r8, #0
  404dbc:	dd05      	ble.n	404dca <_dtoa_r+0x7f2>
  404dbe:	4651      	mov	r1, sl
  404dc0:	4642      	mov	r2, r8
  404dc2:	4620      	mov	r0, r4
  404dc4:	f000 fddc 	bl	405980 <__lshift>
  404dc8:	4682      	mov	sl, r0
  404dca:	9b07      	ldr	r3, [sp, #28]
  404dcc:	2b00      	cmp	r3, #0
  404dce:	dd05      	ble.n	404ddc <_dtoa_r+0x804>
  404dd0:	4631      	mov	r1, r6
  404dd2:	461a      	mov	r2, r3
  404dd4:	4620      	mov	r0, r4
  404dd6:	f000 fdd3 	bl	405980 <__lshift>
  404dda:	4606      	mov	r6, r0
  404ddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404dde:	2b00      	cmp	r3, #0
  404de0:	f000 80d2 	beq.w	404f88 <_dtoa_r+0x9b0>
  404de4:	4631      	mov	r1, r6
  404de6:	4650      	mov	r0, sl
  404de8:	f000 fe1b 	bl	405a22 <__mcmp>
  404dec:	2800      	cmp	r0, #0
  404dee:	f280 80cb 	bge.w	404f88 <_dtoa_r+0x9b0>
  404df2:	2300      	movs	r3, #0
  404df4:	4651      	mov	r1, sl
  404df6:	220a      	movs	r2, #10
  404df8:	4620      	mov	r0, r4
  404dfa:	f000 fc54 	bl	4056a6 <__multadd>
  404dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404e00:	f10b 3bff 	add.w	fp, fp, #4294967295
  404e04:	4682      	mov	sl, r0
  404e06:	2b00      	cmp	r3, #0
  404e08:	f000 81aa 	beq.w	405160 <_dtoa_r+0xb88>
  404e0c:	2300      	movs	r3, #0
  404e0e:	4639      	mov	r1, r7
  404e10:	220a      	movs	r2, #10
  404e12:	4620      	mov	r0, r4
  404e14:	f000 fc47 	bl	4056a6 <__multadd>
  404e18:	9b04      	ldr	r3, [sp, #16]
  404e1a:	2b00      	cmp	r3, #0
  404e1c:	4607      	mov	r7, r0
  404e1e:	dc03      	bgt.n	404e28 <_dtoa_r+0x850>
  404e20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404e22:	2b02      	cmp	r3, #2
  404e24:	f300 80b8 	bgt.w	404f98 <_dtoa_r+0x9c0>
  404e28:	2d00      	cmp	r5, #0
  404e2a:	dd05      	ble.n	404e38 <_dtoa_r+0x860>
  404e2c:	4639      	mov	r1, r7
  404e2e:	462a      	mov	r2, r5
  404e30:	4620      	mov	r0, r4
  404e32:	f000 fda5 	bl	405980 <__lshift>
  404e36:	4607      	mov	r7, r0
  404e38:	9b08      	ldr	r3, [sp, #32]
  404e3a:	2b00      	cmp	r3, #0
  404e3c:	f000 8110 	beq.w	405060 <_dtoa_r+0xa88>
  404e40:	6879      	ldr	r1, [r7, #4]
  404e42:	4620      	mov	r0, r4
  404e44:	f000 fbe4 	bl	405610 <_Balloc>
  404e48:	693a      	ldr	r2, [r7, #16]
  404e4a:	3202      	adds	r2, #2
  404e4c:	4605      	mov	r5, r0
  404e4e:	0092      	lsls	r2, r2, #2
  404e50:	f107 010c 	add.w	r1, r7, #12
  404e54:	300c      	adds	r0, #12
  404e56:	f7fe fdeb 	bl	403a30 <memcpy>
  404e5a:	2201      	movs	r2, #1
  404e5c:	4629      	mov	r1, r5
  404e5e:	4620      	mov	r0, r4
  404e60:	f000 fd8e 	bl	405980 <__lshift>
  404e64:	9b02      	ldr	r3, [sp, #8]
  404e66:	f8dd 8018 	ldr.w	r8, [sp, #24]
  404e6a:	9707      	str	r7, [sp, #28]
  404e6c:	f003 0301 	and.w	r3, r3, #1
  404e70:	4607      	mov	r7, r0
  404e72:	9308      	str	r3, [sp, #32]
  404e74:	4631      	mov	r1, r6
  404e76:	4650      	mov	r0, sl
  404e78:	f7ff fb22 	bl	4044c0 <quorem>
  404e7c:	9907      	ldr	r1, [sp, #28]
  404e7e:	4605      	mov	r5, r0
  404e80:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404e84:	4650      	mov	r0, sl
  404e86:	f000 fdcc 	bl	405a22 <__mcmp>
  404e8a:	463a      	mov	r2, r7
  404e8c:	9002      	str	r0, [sp, #8]
  404e8e:	4631      	mov	r1, r6
  404e90:	4620      	mov	r0, r4
  404e92:	f000 fde0 	bl	405a56 <__mdiff>
  404e96:	68c3      	ldr	r3, [r0, #12]
  404e98:	4602      	mov	r2, r0
  404e9a:	2b00      	cmp	r3, #0
  404e9c:	f040 80e2 	bne.w	405064 <_dtoa_r+0xa8c>
  404ea0:	4601      	mov	r1, r0
  404ea2:	9009      	str	r0, [sp, #36]	; 0x24
  404ea4:	4650      	mov	r0, sl
  404ea6:	f000 fdbc 	bl	405a22 <__mcmp>
  404eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404eac:	4603      	mov	r3, r0
  404eae:	4611      	mov	r1, r2
  404eb0:	4620      	mov	r0, r4
  404eb2:	9309      	str	r3, [sp, #36]	; 0x24
  404eb4:	f000 fbe0 	bl	405678 <_Bfree>
  404eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404eba:	2b00      	cmp	r3, #0
  404ebc:	f040 80d4 	bne.w	405068 <_dtoa_r+0xa90>
  404ec0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404ec2:	2a00      	cmp	r2, #0
  404ec4:	f040 80d0 	bne.w	405068 <_dtoa_r+0xa90>
  404ec8:	9a08      	ldr	r2, [sp, #32]
  404eca:	2a00      	cmp	r2, #0
  404ecc:	f040 80cc 	bne.w	405068 <_dtoa_r+0xa90>
  404ed0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404ed4:	f000 80e8 	beq.w	4050a8 <_dtoa_r+0xad0>
  404ed8:	9b02      	ldr	r3, [sp, #8]
  404eda:	2b00      	cmp	r3, #0
  404edc:	dd01      	ble.n	404ee2 <_dtoa_r+0x90a>
  404ede:	f105 0931 	add.w	r9, r5, #49	; 0x31
  404ee2:	f108 0501 	add.w	r5, r8, #1
  404ee6:	f888 9000 	strb.w	r9, [r8]
  404eea:	e06a      	b.n	404fc2 <_dtoa_r+0x9ea>
  404eec:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404eee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404ef2:	e6f7      	b.n	404ce4 <_dtoa_r+0x70c>
  404ef4:	9b08      	ldr	r3, [sp, #32]
  404ef6:	f109 36ff 	add.w	r6, r9, #4294967295
  404efa:	42b3      	cmp	r3, r6
  404efc:	bfbf      	itttt	lt
  404efe:	9b08      	ldrlt	r3, [sp, #32]
  404f00:	9608      	strlt	r6, [sp, #32]
  404f02:	1af2      	sublt	r2, r6, r3
  404f04:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  404f06:	bfb7      	itett	lt
  404f08:	189b      	addlt	r3, r3, r2
  404f0a:	1b9e      	subge	r6, r3, r6
  404f0c:	930c      	strlt	r3, [sp, #48]	; 0x30
  404f0e:	2600      	movlt	r6, #0
  404f10:	f1b9 0f00 	cmp.w	r9, #0
  404f14:	bfb9      	ittee	lt
  404f16:	eba8 0509 	sublt.w	r5, r8, r9
  404f1a:	2300      	movlt	r3, #0
  404f1c:	4645      	movge	r5, r8
  404f1e:	464b      	movge	r3, r9
  404f20:	e6e2      	b.n	404ce8 <_dtoa_r+0x710>
  404f22:	9e08      	ldr	r6, [sp, #32]
  404f24:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404f26:	4645      	mov	r5, r8
  404f28:	e6e7      	b.n	404cfa <_dtoa_r+0x722>
  404f2a:	9a08      	ldr	r2, [sp, #32]
  404f2c:	e710      	b.n	404d50 <_dtoa_r+0x778>
  404f2e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404f30:	2b01      	cmp	r3, #1
  404f32:	dc18      	bgt.n	404f66 <_dtoa_r+0x98e>
  404f34:	9b02      	ldr	r3, [sp, #8]
  404f36:	b9b3      	cbnz	r3, 404f66 <_dtoa_r+0x98e>
  404f38:	9b03      	ldr	r3, [sp, #12]
  404f3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  404f3e:	b9a3      	cbnz	r3, 404f6a <_dtoa_r+0x992>
  404f40:	9b03      	ldr	r3, [sp, #12]
  404f42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  404f46:	0d1b      	lsrs	r3, r3, #20
  404f48:	051b      	lsls	r3, r3, #20
  404f4a:	b12b      	cbz	r3, 404f58 <_dtoa_r+0x980>
  404f4c:	9b07      	ldr	r3, [sp, #28]
  404f4e:	3301      	adds	r3, #1
  404f50:	9307      	str	r3, [sp, #28]
  404f52:	f108 0801 	add.w	r8, r8, #1
  404f56:	2301      	movs	r3, #1
  404f58:	9308      	str	r3, [sp, #32]
  404f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404f5c:	2b00      	cmp	r3, #0
  404f5e:	f47f af11 	bne.w	404d84 <_dtoa_r+0x7ac>
  404f62:	2001      	movs	r0, #1
  404f64:	e716      	b.n	404d94 <_dtoa_r+0x7bc>
  404f66:	2300      	movs	r3, #0
  404f68:	e7f6      	b.n	404f58 <_dtoa_r+0x980>
  404f6a:	9b02      	ldr	r3, [sp, #8]
  404f6c:	e7f4      	b.n	404f58 <_dtoa_r+0x980>
  404f6e:	f43f af23 	beq.w	404db8 <_dtoa_r+0x7e0>
  404f72:	9a07      	ldr	r2, [sp, #28]
  404f74:	331c      	adds	r3, #28
  404f76:	441a      	add	r2, r3
  404f78:	4498      	add	r8, r3
  404f7a:	441d      	add	r5, r3
  404f7c:	4613      	mov	r3, r2
  404f7e:	e71a      	b.n	404db6 <_dtoa_r+0x7de>
  404f80:	4603      	mov	r3, r0
  404f82:	e7f6      	b.n	404f72 <_dtoa_r+0x99a>
  404f84:	40240000 	.word	0x40240000
  404f88:	f1b9 0f00 	cmp.w	r9, #0
  404f8c:	dc33      	bgt.n	404ff6 <_dtoa_r+0xa1e>
  404f8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404f90:	2b02      	cmp	r3, #2
  404f92:	dd30      	ble.n	404ff6 <_dtoa_r+0xa1e>
  404f94:	f8cd 9010 	str.w	r9, [sp, #16]
  404f98:	9b04      	ldr	r3, [sp, #16]
  404f9a:	b963      	cbnz	r3, 404fb6 <_dtoa_r+0x9de>
  404f9c:	4631      	mov	r1, r6
  404f9e:	2205      	movs	r2, #5
  404fa0:	4620      	mov	r0, r4
  404fa2:	f000 fb80 	bl	4056a6 <__multadd>
  404fa6:	4601      	mov	r1, r0
  404fa8:	4606      	mov	r6, r0
  404faa:	4650      	mov	r0, sl
  404fac:	f000 fd39 	bl	405a22 <__mcmp>
  404fb0:	2800      	cmp	r0, #0
  404fb2:	f73f ad5c 	bgt.w	404a6e <_dtoa_r+0x496>
  404fb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404fb8:	9d06      	ldr	r5, [sp, #24]
  404fba:	ea6f 0b03 	mvn.w	fp, r3
  404fbe:	2300      	movs	r3, #0
  404fc0:	9307      	str	r3, [sp, #28]
  404fc2:	4631      	mov	r1, r6
  404fc4:	4620      	mov	r0, r4
  404fc6:	f000 fb57 	bl	405678 <_Bfree>
  404fca:	2f00      	cmp	r7, #0
  404fcc:	f43f ae4b 	beq.w	404c66 <_dtoa_r+0x68e>
  404fd0:	9b07      	ldr	r3, [sp, #28]
  404fd2:	b12b      	cbz	r3, 404fe0 <_dtoa_r+0xa08>
  404fd4:	42bb      	cmp	r3, r7
  404fd6:	d003      	beq.n	404fe0 <_dtoa_r+0xa08>
  404fd8:	4619      	mov	r1, r3
  404fda:	4620      	mov	r0, r4
  404fdc:	f000 fb4c 	bl	405678 <_Bfree>
  404fe0:	4639      	mov	r1, r7
  404fe2:	4620      	mov	r0, r4
  404fe4:	f000 fb48 	bl	405678 <_Bfree>
  404fe8:	e63d      	b.n	404c66 <_dtoa_r+0x68e>
  404fea:	2600      	movs	r6, #0
  404fec:	4637      	mov	r7, r6
  404fee:	e7e2      	b.n	404fb6 <_dtoa_r+0x9de>
  404ff0:	46bb      	mov	fp, r7
  404ff2:	4637      	mov	r7, r6
  404ff4:	e53b      	b.n	404a6e <_dtoa_r+0x496>
  404ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ff8:	f8cd 9010 	str.w	r9, [sp, #16]
  404ffc:	2b00      	cmp	r3, #0
  404ffe:	f47f af13 	bne.w	404e28 <_dtoa_r+0x850>
  405002:	9d06      	ldr	r5, [sp, #24]
  405004:	4631      	mov	r1, r6
  405006:	4650      	mov	r0, sl
  405008:	f7ff fa5a 	bl	4044c0 <quorem>
  40500c:	f100 0930 	add.w	r9, r0, #48	; 0x30
  405010:	f805 9b01 	strb.w	r9, [r5], #1
  405014:	9b06      	ldr	r3, [sp, #24]
  405016:	9a04      	ldr	r2, [sp, #16]
  405018:	1aeb      	subs	r3, r5, r3
  40501a:	429a      	cmp	r2, r3
  40501c:	f300 8083 	bgt.w	405126 <_dtoa_r+0xb4e>
  405020:	9b06      	ldr	r3, [sp, #24]
  405022:	2a01      	cmp	r2, #1
  405024:	bfac      	ite	ge
  405026:	189b      	addge	r3, r3, r2
  405028:	3301      	addlt	r3, #1
  40502a:	4698      	mov	r8, r3
  40502c:	2300      	movs	r3, #0
  40502e:	9307      	str	r3, [sp, #28]
  405030:	4651      	mov	r1, sl
  405032:	2201      	movs	r2, #1
  405034:	4620      	mov	r0, r4
  405036:	f000 fca3 	bl	405980 <__lshift>
  40503a:	4631      	mov	r1, r6
  40503c:	4682      	mov	sl, r0
  40503e:	f000 fcf0 	bl	405a22 <__mcmp>
  405042:	2800      	cmp	r0, #0
  405044:	dc35      	bgt.n	4050b2 <_dtoa_r+0xada>
  405046:	d102      	bne.n	40504e <_dtoa_r+0xa76>
  405048:	f019 0f01 	tst.w	r9, #1
  40504c:	d131      	bne.n	4050b2 <_dtoa_r+0xada>
  40504e:	4645      	mov	r5, r8
  405050:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405054:	2b30      	cmp	r3, #48	; 0x30
  405056:	f105 32ff 	add.w	r2, r5, #4294967295
  40505a:	d1b2      	bne.n	404fc2 <_dtoa_r+0x9ea>
  40505c:	4615      	mov	r5, r2
  40505e:	e7f7      	b.n	405050 <_dtoa_r+0xa78>
  405060:	4638      	mov	r0, r7
  405062:	e6ff      	b.n	404e64 <_dtoa_r+0x88c>
  405064:	2301      	movs	r3, #1
  405066:	e722      	b.n	404eae <_dtoa_r+0x8d6>
  405068:	9a02      	ldr	r2, [sp, #8]
  40506a:	2a00      	cmp	r2, #0
  40506c:	db04      	blt.n	405078 <_dtoa_r+0xaa0>
  40506e:	d129      	bne.n	4050c4 <_dtoa_r+0xaec>
  405070:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  405072:	bb3a      	cbnz	r2, 4050c4 <_dtoa_r+0xaec>
  405074:	9a08      	ldr	r2, [sp, #32]
  405076:	bb2a      	cbnz	r2, 4050c4 <_dtoa_r+0xaec>
  405078:	2b00      	cmp	r3, #0
  40507a:	f77f af32 	ble.w	404ee2 <_dtoa_r+0x90a>
  40507e:	4651      	mov	r1, sl
  405080:	2201      	movs	r2, #1
  405082:	4620      	mov	r0, r4
  405084:	f000 fc7c 	bl	405980 <__lshift>
  405088:	4631      	mov	r1, r6
  40508a:	4682      	mov	sl, r0
  40508c:	f000 fcc9 	bl	405a22 <__mcmp>
  405090:	2800      	cmp	r0, #0
  405092:	dc05      	bgt.n	4050a0 <_dtoa_r+0xac8>
  405094:	f47f af25 	bne.w	404ee2 <_dtoa_r+0x90a>
  405098:	f019 0f01 	tst.w	r9, #1
  40509c:	f43f af21 	beq.w	404ee2 <_dtoa_r+0x90a>
  4050a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4050a4:	f47f af1b 	bne.w	404ede <_dtoa_r+0x906>
  4050a8:	2339      	movs	r3, #57	; 0x39
  4050aa:	f888 3000 	strb.w	r3, [r8]
  4050ae:	f108 0801 	add.w	r8, r8, #1
  4050b2:	4645      	mov	r5, r8
  4050b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4050b8:	2b39      	cmp	r3, #57	; 0x39
  4050ba:	f105 32ff 	add.w	r2, r5, #4294967295
  4050be:	d03a      	beq.n	405136 <_dtoa_r+0xb5e>
  4050c0:	3301      	adds	r3, #1
  4050c2:	e03f      	b.n	405144 <_dtoa_r+0xb6c>
  4050c4:	2b00      	cmp	r3, #0
  4050c6:	f108 0501 	add.w	r5, r8, #1
  4050ca:	dd05      	ble.n	4050d8 <_dtoa_r+0xb00>
  4050cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4050d0:	d0ea      	beq.n	4050a8 <_dtoa_r+0xad0>
  4050d2:	f109 0901 	add.w	r9, r9, #1
  4050d6:	e706      	b.n	404ee6 <_dtoa_r+0x90e>
  4050d8:	9b06      	ldr	r3, [sp, #24]
  4050da:	9a04      	ldr	r2, [sp, #16]
  4050dc:	f805 9c01 	strb.w	r9, [r5, #-1]
  4050e0:	1aeb      	subs	r3, r5, r3
  4050e2:	4293      	cmp	r3, r2
  4050e4:	46a8      	mov	r8, r5
  4050e6:	d0a3      	beq.n	405030 <_dtoa_r+0xa58>
  4050e8:	4651      	mov	r1, sl
  4050ea:	2300      	movs	r3, #0
  4050ec:	220a      	movs	r2, #10
  4050ee:	4620      	mov	r0, r4
  4050f0:	f000 fad9 	bl	4056a6 <__multadd>
  4050f4:	9b07      	ldr	r3, [sp, #28]
  4050f6:	9907      	ldr	r1, [sp, #28]
  4050f8:	42bb      	cmp	r3, r7
  4050fa:	4682      	mov	sl, r0
  4050fc:	f04f 0300 	mov.w	r3, #0
  405100:	f04f 020a 	mov.w	r2, #10
  405104:	4620      	mov	r0, r4
  405106:	d104      	bne.n	405112 <_dtoa_r+0xb3a>
  405108:	f000 facd 	bl	4056a6 <__multadd>
  40510c:	9007      	str	r0, [sp, #28]
  40510e:	4607      	mov	r7, r0
  405110:	e6b0      	b.n	404e74 <_dtoa_r+0x89c>
  405112:	f000 fac8 	bl	4056a6 <__multadd>
  405116:	2300      	movs	r3, #0
  405118:	9007      	str	r0, [sp, #28]
  40511a:	220a      	movs	r2, #10
  40511c:	4639      	mov	r1, r7
  40511e:	4620      	mov	r0, r4
  405120:	f000 fac1 	bl	4056a6 <__multadd>
  405124:	e7f3      	b.n	40510e <_dtoa_r+0xb36>
  405126:	4651      	mov	r1, sl
  405128:	2300      	movs	r3, #0
  40512a:	220a      	movs	r2, #10
  40512c:	4620      	mov	r0, r4
  40512e:	f000 faba 	bl	4056a6 <__multadd>
  405132:	4682      	mov	sl, r0
  405134:	e766      	b.n	405004 <_dtoa_r+0xa2c>
  405136:	9b06      	ldr	r3, [sp, #24]
  405138:	4293      	cmp	r3, r2
  40513a:	d105      	bne.n	405148 <_dtoa_r+0xb70>
  40513c:	9a06      	ldr	r2, [sp, #24]
  40513e:	f10b 0b01 	add.w	fp, fp, #1
  405142:	2331      	movs	r3, #49	; 0x31
  405144:	7013      	strb	r3, [r2, #0]
  405146:	e73c      	b.n	404fc2 <_dtoa_r+0x9ea>
  405148:	4615      	mov	r5, r2
  40514a:	e7b3      	b.n	4050b4 <_dtoa_r+0xadc>
  40514c:	4b09      	ldr	r3, [pc, #36]	; (405174 <_dtoa_r+0xb9c>)
  40514e:	f7ff baa5 	b.w	40469c <_dtoa_r+0xc4>
  405152:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405154:	2b00      	cmp	r3, #0
  405156:	f47f aa7f 	bne.w	404658 <_dtoa_r+0x80>
  40515a:	4b07      	ldr	r3, [pc, #28]	; (405178 <_dtoa_r+0xba0>)
  40515c:	f7ff ba9e 	b.w	40469c <_dtoa_r+0xc4>
  405160:	9b04      	ldr	r3, [sp, #16]
  405162:	2b00      	cmp	r3, #0
  405164:	f73f af4d 	bgt.w	405002 <_dtoa_r+0xa2a>
  405168:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40516a:	2b02      	cmp	r3, #2
  40516c:	f77f af49 	ble.w	405002 <_dtoa_r+0xa2a>
  405170:	e712      	b.n	404f98 <_dtoa_r+0x9c0>
  405172:	bf00      	nop
  405174:	004068ec 	.word	0x004068ec
  405178:	00406910 	.word	0x00406910

0040517c <__sflush_r>:
  40517c:	898a      	ldrh	r2, [r1, #12]
  40517e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405182:	4605      	mov	r5, r0
  405184:	0710      	lsls	r0, r2, #28
  405186:	460c      	mov	r4, r1
  405188:	d45a      	bmi.n	405240 <__sflush_r+0xc4>
  40518a:	684b      	ldr	r3, [r1, #4]
  40518c:	2b00      	cmp	r3, #0
  40518e:	dc05      	bgt.n	40519c <__sflush_r+0x20>
  405190:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  405192:	2b00      	cmp	r3, #0
  405194:	dc02      	bgt.n	40519c <__sflush_r+0x20>
  405196:	2000      	movs	r0, #0
  405198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40519c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40519e:	2e00      	cmp	r6, #0
  4051a0:	d0f9      	beq.n	405196 <__sflush_r+0x1a>
  4051a2:	2300      	movs	r3, #0
  4051a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  4051a8:	682f      	ldr	r7, [r5, #0]
  4051aa:	602b      	str	r3, [r5, #0]
  4051ac:	d033      	beq.n	405216 <__sflush_r+0x9a>
  4051ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4051b0:	89a3      	ldrh	r3, [r4, #12]
  4051b2:	075a      	lsls	r2, r3, #29
  4051b4:	d505      	bpl.n	4051c2 <__sflush_r+0x46>
  4051b6:	6863      	ldr	r3, [r4, #4]
  4051b8:	1ac0      	subs	r0, r0, r3
  4051ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4051bc:	b10b      	cbz	r3, 4051c2 <__sflush_r+0x46>
  4051be:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4051c0:	1ac0      	subs	r0, r0, r3
  4051c2:	2300      	movs	r3, #0
  4051c4:	4602      	mov	r2, r0
  4051c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4051c8:	6a21      	ldr	r1, [r4, #32]
  4051ca:	4628      	mov	r0, r5
  4051cc:	47b0      	blx	r6
  4051ce:	1c43      	adds	r3, r0, #1
  4051d0:	89a3      	ldrh	r3, [r4, #12]
  4051d2:	d106      	bne.n	4051e2 <__sflush_r+0x66>
  4051d4:	6829      	ldr	r1, [r5, #0]
  4051d6:	291d      	cmp	r1, #29
  4051d8:	d84b      	bhi.n	405272 <__sflush_r+0xf6>
  4051da:	4a2b      	ldr	r2, [pc, #172]	; (405288 <__sflush_r+0x10c>)
  4051dc:	40ca      	lsrs	r2, r1
  4051de:	07d6      	lsls	r6, r2, #31
  4051e0:	d547      	bpl.n	405272 <__sflush_r+0xf6>
  4051e2:	2200      	movs	r2, #0
  4051e4:	6062      	str	r2, [r4, #4]
  4051e6:	04d9      	lsls	r1, r3, #19
  4051e8:	6922      	ldr	r2, [r4, #16]
  4051ea:	6022      	str	r2, [r4, #0]
  4051ec:	d504      	bpl.n	4051f8 <__sflush_r+0x7c>
  4051ee:	1c42      	adds	r2, r0, #1
  4051f0:	d101      	bne.n	4051f6 <__sflush_r+0x7a>
  4051f2:	682b      	ldr	r3, [r5, #0]
  4051f4:	b903      	cbnz	r3, 4051f8 <__sflush_r+0x7c>
  4051f6:	6560      	str	r0, [r4, #84]	; 0x54
  4051f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4051fa:	602f      	str	r7, [r5, #0]
  4051fc:	2900      	cmp	r1, #0
  4051fe:	d0ca      	beq.n	405196 <__sflush_r+0x1a>
  405200:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405204:	4299      	cmp	r1, r3
  405206:	d002      	beq.n	40520e <__sflush_r+0x92>
  405208:	4628      	mov	r0, r5
  40520a:	f000 fcdf 	bl	405bcc <_free_r>
  40520e:	2000      	movs	r0, #0
  405210:	6360      	str	r0, [r4, #52]	; 0x34
  405212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405216:	6a21      	ldr	r1, [r4, #32]
  405218:	2301      	movs	r3, #1
  40521a:	4628      	mov	r0, r5
  40521c:	47b0      	blx	r6
  40521e:	1c41      	adds	r1, r0, #1
  405220:	d1c6      	bne.n	4051b0 <__sflush_r+0x34>
  405222:	682b      	ldr	r3, [r5, #0]
  405224:	2b00      	cmp	r3, #0
  405226:	d0c3      	beq.n	4051b0 <__sflush_r+0x34>
  405228:	2b1d      	cmp	r3, #29
  40522a:	d001      	beq.n	405230 <__sflush_r+0xb4>
  40522c:	2b16      	cmp	r3, #22
  40522e:	d101      	bne.n	405234 <__sflush_r+0xb8>
  405230:	602f      	str	r7, [r5, #0]
  405232:	e7b0      	b.n	405196 <__sflush_r+0x1a>
  405234:	89a3      	ldrh	r3, [r4, #12]
  405236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40523a:	81a3      	strh	r3, [r4, #12]
  40523c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405240:	690f      	ldr	r7, [r1, #16]
  405242:	2f00      	cmp	r7, #0
  405244:	d0a7      	beq.n	405196 <__sflush_r+0x1a>
  405246:	0793      	lsls	r3, r2, #30
  405248:	680e      	ldr	r6, [r1, #0]
  40524a:	bf08      	it	eq
  40524c:	694b      	ldreq	r3, [r1, #20]
  40524e:	600f      	str	r7, [r1, #0]
  405250:	bf18      	it	ne
  405252:	2300      	movne	r3, #0
  405254:	eba6 0807 	sub.w	r8, r6, r7
  405258:	608b      	str	r3, [r1, #8]
  40525a:	f1b8 0f00 	cmp.w	r8, #0
  40525e:	dd9a      	ble.n	405196 <__sflush_r+0x1a>
  405260:	4643      	mov	r3, r8
  405262:	463a      	mov	r2, r7
  405264:	6a21      	ldr	r1, [r4, #32]
  405266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  405268:	4628      	mov	r0, r5
  40526a:	47b0      	blx	r6
  40526c:	2800      	cmp	r0, #0
  40526e:	dc07      	bgt.n	405280 <__sflush_r+0x104>
  405270:	89a3      	ldrh	r3, [r4, #12]
  405272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405276:	81a3      	strh	r3, [r4, #12]
  405278:	f04f 30ff 	mov.w	r0, #4294967295
  40527c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405280:	4407      	add	r7, r0
  405282:	eba8 0800 	sub.w	r8, r8, r0
  405286:	e7e8      	b.n	40525a <__sflush_r+0xde>
  405288:	20400001 	.word	0x20400001

0040528c <_fflush_r>:
  40528c:	b538      	push	{r3, r4, r5, lr}
  40528e:	690b      	ldr	r3, [r1, #16]
  405290:	4605      	mov	r5, r0
  405292:	460c      	mov	r4, r1
  405294:	b1db      	cbz	r3, 4052ce <_fflush_r+0x42>
  405296:	b118      	cbz	r0, 4052a0 <_fflush_r+0x14>
  405298:	6983      	ldr	r3, [r0, #24]
  40529a:	b90b      	cbnz	r3, 4052a0 <_fflush_r+0x14>
  40529c:	f000 f860 	bl	405360 <__sinit>
  4052a0:	4b0c      	ldr	r3, [pc, #48]	; (4052d4 <_fflush_r+0x48>)
  4052a2:	429c      	cmp	r4, r3
  4052a4:	d109      	bne.n	4052ba <_fflush_r+0x2e>
  4052a6:	686c      	ldr	r4, [r5, #4]
  4052a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4052ac:	b17b      	cbz	r3, 4052ce <_fflush_r+0x42>
  4052ae:	4621      	mov	r1, r4
  4052b0:	4628      	mov	r0, r5
  4052b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4052b6:	f7ff bf61 	b.w	40517c <__sflush_r>
  4052ba:	4b07      	ldr	r3, [pc, #28]	; (4052d8 <_fflush_r+0x4c>)
  4052bc:	429c      	cmp	r4, r3
  4052be:	d101      	bne.n	4052c4 <_fflush_r+0x38>
  4052c0:	68ac      	ldr	r4, [r5, #8]
  4052c2:	e7f1      	b.n	4052a8 <_fflush_r+0x1c>
  4052c4:	4b05      	ldr	r3, [pc, #20]	; (4052dc <_fflush_r+0x50>)
  4052c6:	429c      	cmp	r4, r3
  4052c8:	bf08      	it	eq
  4052ca:	68ec      	ldreq	r4, [r5, #12]
  4052cc:	e7ec      	b.n	4052a8 <_fflush_r+0x1c>
  4052ce:	2000      	movs	r0, #0
  4052d0:	bd38      	pop	{r3, r4, r5, pc}
  4052d2:	bf00      	nop
  4052d4:	00406940 	.word	0x00406940
  4052d8:	00406960 	.word	0x00406960
  4052dc:	00406920 	.word	0x00406920

004052e0 <_cleanup_r>:
  4052e0:	4901      	ldr	r1, [pc, #4]	; (4052e8 <_cleanup_r+0x8>)
  4052e2:	f000 b8a9 	b.w	405438 <_fwalk_reent>
  4052e6:	bf00      	nop
  4052e8:	0040528d 	.word	0x0040528d

004052ec <std.isra.0>:
  4052ec:	2300      	movs	r3, #0
  4052ee:	b510      	push	{r4, lr}
  4052f0:	4604      	mov	r4, r0
  4052f2:	6003      	str	r3, [r0, #0]
  4052f4:	6043      	str	r3, [r0, #4]
  4052f6:	6083      	str	r3, [r0, #8]
  4052f8:	8181      	strh	r1, [r0, #12]
  4052fa:	6643      	str	r3, [r0, #100]	; 0x64
  4052fc:	81c2      	strh	r2, [r0, #14]
  4052fe:	6103      	str	r3, [r0, #16]
  405300:	6143      	str	r3, [r0, #20]
  405302:	6183      	str	r3, [r0, #24]
  405304:	4619      	mov	r1, r3
  405306:	2208      	movs	r2, #8
  405308:	305c      	adds	r0, #92	; 0x5c
  40530a:	f7fe fb9c 	bl	403a46 <memset>
  40530e:	4b05      	ldr	r3, [pc, #20]	; (405324 <std.isra.0+0x38>)
  405310:	6263      	str	r3, [r4, #36]	; 0x24
  405312:	4b05      	ldr	r3, [pc, #20]	; (405328 <std.isra.0+0x3c>)
  405314:	62a3      	str	r3, [r4, #40]	; 0x28
  405316:	4b05      	ldr	r3, [pc, #20]	; (40532c <std.isra.0+0x40>)
  405318:	62e3      	str	r3, [r4, #44]	; 0x2c
  40531a:	4b05      	ldr	r3, [pc, #20]	; (405330 <std.isra.0+0x44>)
  40531c:	6224      	str	r4, [r4, #32]
  40531e:	6323      	str	r3, [r4, #48]	; 0x30
  405320:	bd10      	pop	{r4, pc}
  405322:	bf00      	nop
  405324:	00405fc1 	.word	0x00405fc1
  405328:	00405fe3 	.word	0x00405fe3
  40532c:	0040601b 	.word	0x0040601b
  405330:	0040603f 	.word	0x0040603f

00405334 <__sfmoreglue>:
  405334:	b570      	push	{r4, r5, r6, lr}
  405336:	1e4a      	subs	r2, r1, #1
  405338:	2568      	movs	r5, #104	; 0x68
  40533a:	4355      	muls	r5, r2
  40533c:	460e      	mov	r6, r1
  40533e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  405342:	f000 fc91 	bl	405c68 <_malloc_r>
  405346:	4604      	mov	r4, r0
  405348:	b140      	cbz	r0, 40535c <__sfmoreglue+0x28>
  40534a:	2100      	movs	r1, #0
  40534c:	e880 0042 	stmia.w	r0, {r1, r6}
  405350:	300c      	adds	r0, #12
  405352:	60a0      	str	r0, [r4, #8]
  405354:	f105 0268 	add.w	r2, r5, #104	; 0x68
  405358:	f7fe fb75 	bl	403a46 <memset>
  40535c:	4620      	mov	r0, r4
  40535e:	bd70      	pop	{r4, r5, r6, pc}

00405360 <__sinit>:
  405360:	6983      	ldr	r3, [r0, #24]
  405362:	b510      	push	{r4, lr}
  405364:	4604      	mov	r4, r0
  405366:	bb33      	cbnz	r3, 4053b6 <__sinit+0x56>
  405368:	6483      	str	r3, [r0, #72]	; 0x48
  40536a:	64c3      	str	r3, [r0, #76]	; 0x4c
  40536c:	6503      	str	r3, [r0, #80]	; 0x50
  40536e:	4b12      	ldr	r3, [pc, #72]	; (4053b8 <__sinit+0x58>)
  405370:	4a12      	ldr	r2, [pc, #72]	; (4053bc <__sinit+0x5c>)
  405372:	681b      	ldr	r3, [r3, #0]
  405374:	6282      	str	r2, [r0, #40]	; 0x28
  405376:	4298      	cmp	r0, r3
  405378:	bf04      	itt	eq
  40537a:	2301      	moveq	r3, #1
  40537c:	6183      	streq	r3, [r0, #24]
  40537e:	f000 f81f 	bl	4053c0 <__sfp>
  405382:	6060      	str	r0, [r4, #4]
  405384:	4620      	mov	r0, r4
  405386:	f000 f81b 	bl	4053c0 <__sfp>
  40538a:	60a0      	str	r0, [r4, #8]
  40538c:	4620      	mov	r0, r4
  40538e:	f000 f817 	bl	4053c0 <__sfp>
  405392:	2200      	movs	r2, #0
  405394:	60e0      	str	r0, [r4, #12]
  405396:	2104      	movs	r1, #4
  405398:	6860      	ldr	r0, [r4, #4]
  40539a:	f7ff ffa7 	bl	4052ec <std.isra.0>
  40539e:	2201      	movs	r2, #1
  4053a0:	2109      	movs	r1, #9
  4053a2:	68a0      	ldr	r0, [r4, #8]
  4053a4:	f7ff ffa2 	bl	4052ec <std.isra.0>
  4053a8:	2202      	movs	r2, #2
  4053aa:	2112      	movs	r1, #18
  4053ac:	68e0      	ldr	r0, [r4, #12]
  4053ae:	f7ff ff9d 	bl	4052ec <std.isra.0>
  4053b2:	2301      	movs	r3, #1
  4053b4:	61a3      	str	r3, [r4, #24]
  4053b6:	bd10      	pop	{r4, pc}
  4053b8:	004068d8 	.word	0x004068d8
  4053bc:	004052e1 	.word	0x004052e1

004053c0 <__sfp>:
  4053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4053c2:	4b1c      	ldr	r3, [pc, #112]	; (405434 <__sfp+0x74>)
  4053c4:	681e      	ldr	r6, [r3, #0]
  4053c6:	69b3      	ldr	r3, [r6, #24]
  4053c8:	4607      	mov	r7, r0
  4053ca:	b913      	cbnz	r3, 4053d2 <__sfp+0x12>
  4053cc:	4630      	mov	r0, r6
  4053ce:	f7ff ffc7 	bl	405360 <__sinit>
  4053d2:	3648      	adds	r6, #72	; 0x48
  4053d4:	68b4      	ldr	r4, [r6, #8]
  4053d6:	6873      	ldr	r3, [r6, #4]
  4053d8:	3b01      	subs	r3, #1
  4053da:	d503      	bpl.n	4053e4 <__sfp+0x24>
  4053dc:	6833      	ldr	r3, [r6, #0]
  4053de:	b133      	cbz	r3, 4053ee <__sfp+0x2e>
  4053e0:	6836      	ldr	r6, [r6, #0]
  4053e2:	e7f7      	b.n	4053d4 <__sfp+0x14>
  4053e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  4053e8:	b16d      	cbz	r5, 405406 <__sfp+0x46>
  4053ea:	3468      	adds	r4, #104	; 0x68
  4053ec:	e7f4      	b.n	4053d8 <__sfp+0x18>
  4053ee:	2104      	movs	r1, #4
  4053f0:	4638      	mov	r0, r7
  4053f2:	f7ff ff9f 	bl	405334 <__sfmoreglue>
  4053f6:	6030      	str	r0, [r6, #0]
  4053f8:	2800      	cmp	r0, #0
  4053fa:	d1f1      	bne.n	4053e0 <__sfp+0x20>
  4053fc:	230c      	movs	r3, #12
  4053fe:	603b      	str	r3, [r7, #0]
  405400:	4604      	mov	r4, r0
  405402:	4620      	mov	r0, r4
  405404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405406:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40540a:	81e3      	strh	r3, [r4, #14]
  40540c:	2301      	movs	r3, #1
  40540e:	81a3      	strh	r3, [r4, #12]
  405410:	6665      	str	r5, [r4, #100]	; 0x64
  405412:	6025      	str	r5, [r4, #0]
  405414:	60a5      	str	r5, [r4, #8]
  405416:	6065      	str	r5, [r4, #4]
  405418:	6125      	str	r5, [r4, #16]
  40541a:	6165      	str	r5, [r4, #20]
  40541c:	61a5      	str	r5, [r4, #24]
  40541e:	2208      	movs	r2, #8
  405420:	4629      	mov	r1, r5
  405422:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  405426:	f7fe fb0e 	bl	403a46 <memset>
  40542a:	6365      	str	r5, [r4, #52]	; 0x34
  40542c:	63a5      	str	r5, [r4, #56]	; 0x38
  40542e:	64a5      	str	r5, [r4, #72]	; 0x48
  405430:	64e5      	str	r5, [r4, #76]	; 0x4c
  405432:	e7e6      	b.n	405402 <__sfp+0x42>
  405434:	004068d8 	.word	0x004068d8

00405438 <_fwalk_reent>:
  405438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40543c:	4680      	mov	r8, r0
  40543e:	4689      	mov	r9, r1
  405440:	f100 0448 	add.w	r4, r0, #72	; 0x48
  405444:	2600      	movs	r6, #0
  405446:	b914      	cbnz	r4, 40544e <_fwalk_reent+0x16>
  405448:	4630      	mov	r0, r6
  40544a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40544e:	68a5      	ldr	r5, [r4, #8]
  405450:	6867      	ldr	r7, [r4, #4]
  405452:	3f01      	subs	r7, #1
  405454:	d501      	bpl.n	40545a <_fwalk_reent+0x22>
  405456:	6824      	ldr	r4, [r4, #0]
  405458:	e7f5      	b.n	405446 <_fwalk_reent+0xe>
  40545a:	89ab      	ldrh	r3, [r5, #12]
  40545c:	2b01      	cmp	r3, #1
  40545e:	d907      	bls.n	405470 <_fwalk_reent+0x38>
  405460:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  405464:	3301      	adds	r3, #1
  405466:	d003      	beq.n	405470 <_fwalk_reent+0x38>
  405468:	4629      	mov	r1, r5
  40546a:	4640      	mov	r0, r8
  40546c:	47c8      	blx	r9
  40546e:	4306      	orrs	r6, r0
  405470:	3568      	adds	r5, #104	; 0x68
  405472:	e7ee      	b.n	405452 <_fwalk_reent+0x1a>

00405474 <_localeconv_r>:
  405474:	4b04      	ldr	r3, [pc, #16]	; (405488 <_localeconv_r+0x14>)
  405476:	681b      	ldr	r3, [r3, #0]
  405478:	6a18      	ldr	r0, [r3, #32]
  40547a:	4b04      	ldr	r3, [pc, #16]	; (40548c <_localeconv_r+0x18>)
  40547c:	2800      	cmp	r0, #0
  40547e:	bf08      	it	eq
  405480:	4618      	moveq	r0, r3
  405482:	30f0      	adds	r0, #240	; 0xf0
  405484:	4770      	bx	lr
  405486:	bf00      	nop
  405488:	20400048 	.word	0x20400048
  40548c:	204000ac 	.word	0x204000ac

00405490 <__swhatbuf_r>:
  405490:	b570      	push	{r4, r5, r6, lr}
  405492:	460e      	mov	r6, r1
  405494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405498:	2900      	cmp	r1, #0
  40549a:	b090      	sub	sp, #64	; 0x40
  40549c:	4614      	mov	r4, r2
  40549e:	461d      	mov	r5, r3
  4054a0:	da07      	bge.n	4054b2 <__swhatbuf_r+0x22>
  4054a2:	2300      	movs	r3, #0
  4054a4:	602b      	str	r3, [r5, #0]
  4054a6:	89b3      	ldrh	r3, [r6, #12]
  4054a8:	061a      	lsls	r2, r3, #24
  4054aa:	d410      	bmi.n	4054ce <__swhatbuf_r+0x3e>
  4054ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4054b0:	e00e      	b.n	4054d0 <__swhatbuf_r+0x40>
  4054b2:	aa01      	add	r2, sp, #4
  4054b4:	f000 feaa 	bl	40620c <_fstat_r>
  4054b8:	2800      	cmp	r0, #0
  4054ba:	dbf2      	blt.n	4054a2 <__swhatbuf_r+0x12>
  4054bc:	9a02      	ldr	r2, [sp, #8]
  4054be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4054c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  4054c6:	425a      	negs	r2, r3
  4054c8:	415a      	adcs	r2, r3
  4054ca:	602a      	str	r2, [r5, #0]
  4054cc:	e7ee      	b.n	4054ac <__swhatbuf_r+0x1c>
  4054ce:	2340      	movs	r3, #64	; 0x40
  4054d0:	2000      	movs	r0, #0
  4054d2:	6023      	str	r3, [r4, #0]
  4054d4:	b010      	add	sp, #64	; 0x40
  4054d6:	bd70      	pop	{r4, r5, r6, pc}

004054d8 <__smakebuf_r>:
  4054d8:	898b      	ldrh	r3, [r1, #12]
  4054da:	b573      	push	{r0, r1, r4, r5, r6, lr}
  4054dc:	079d      	lsls	r5, r3, #30
  4054de:	4606      	mov	r6, r0
  4054e0:	460c      	mov	r4, r1
  4054e2:	d507      	bpl.n	4054f4 <__smakebuf_r+0x1c>
  4054e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4054e8:	6023      	str	r3, [r4, #0]
  4054ea:	6123      	str	r3, [r4, #16]
  4054ec:	2301      	movs	r3, #1
  4054ee:	6163      	str	r3, [r4, #20]
  4054f0:	b002      	add	sp, #8
  4054f2:	bd70      	pop	{r4, r5, r6, pc}
  4054f4:	ab01      	add	r3, sp, #4
  4054f6:	466a      	mov	r2, sp
  4054f8:	f7ff ffca 	bl	405490 <__swhatbuf_r>
  4054fc:	9900      	ldr	r1, [sp, #0]
  4054fe:	4605      	mov	r5, r0
  405500:	4630      	mov	r0, r6
  405502:	f000 fbb1 	bl	405c68 <_malloc_r>
  405506:	b948      	cbnz	r0, 40551c <__smakebuf_r+0x44>
  405508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40550c:	059a      	lsls	r2, r3, #22
  40550e:	d4ef      	bmi.n	4054f0 <__smakebuf_r+0x18>
  405510:	f023 0303 	bic.w	r3, r3, #3
  405514:	f043 0302 	orr.w	r3, r3, #2
  405518:	81a3      	strh	r3, [r4, #12]
  40551a:	e7e3      	b.n	4054e4 <__smakebuf_r+0xc>
  40551c:	4b0d      	ldr	r3, [pc, #52]	; (405554 <__smakebuf_r+0x7c>)
  40551e:	62b3      	str	r3, [r6, #40]	; 0x28
  405520:	89a3      	ldrh	r3, [r4, #12]
  405522:	6020      	str	r0, [r4, #0]
  405524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405528:	81a3      	strh	r3, [r4, #12]
  40552a:	9b00      	ldr	r3, [sp, #0]
  40552c:	6163      	str	r3, [r4, #20]
  40552e:	9b01      	ldr	r3, [sp, #4]
  405530:	6120      	str	r0, [r4, #16]
  405532:	b15b      	cbz	r3, 40554c <__smakebuf_r+0x74>
  405534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405538:	4630      	mov	r0, r6
  40553a:	f000 fe79 	bl	406230 <_isatty_r>
  40553e:	b128      	cbz	r0, 40554c <__smakebuf_r+0x74>
  405540:	89a3      	ldrh	r3, [r4, #12]
  405542:	f023 0303 	bic.w	r3, r3, #3
  405546:	f043 0301 	orr.w	r3, r3, #1
  40554a:	81a3      	strh	r3, [r4, #12]
  40554c:	89a3      	ldrh	r3, [r4, #12]
  40554e:	431d      	orrs	r5, r3
  405550:	81a5      	strh	r5, [r4, #12]
  405552:	e7cd      	b.n	4054f0 <__smakebuf_r+0x18>
  405554:	004052e1 	.word	0x004052e1

00405558 <malloc>:
  405558:	4b02      	ldr	r3, [pc, #8]	; (405564 <malloc+0xc>)
  40555a:	4601      	mov	r1, r0
  40555c:	6818      	ldr	r0, [r3, #0]
  40555e:	f000 bb83 	b.w	405c68 <_malloc_r>
  405562:	bf00      	nop
  405564:	20400048 	.word	0x20400048
	...

00405570 <memchr>:
  405570:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405574:	2a10      	cmp	r2, #16
  405576:	db2b      	blt.n	4055d0 <memchr+0x60>
  405578:	f010 0f07 	tst.w	r0, #7
  40557c:	d008      	beq.n	405590 <memchr+0x20>
  40557e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405582:	3a01      	subs	r2, #1
  405584:	428b      	cmp	r3, r1
  405586:	d02d      	beq.n	4055e4 <memchr+0x74>
  405588:	f010 0f07 	tst.w	r0, #7
  40558c:	b342      	cbz	r2, 4055e0 <memchr+0x70>
  40558e:	d1f6      	bne.n	40557e <memchr+0xe>
  405590:	b4f0      	push	{r4, r5, r6, r7}
  405592:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405596:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40559a:	f022 0407 	bic.w	r4, r2, #7
  40559e:	f07f 0700 	mvns.w	r7, #0
  4055a2:	2300      	movs	r3, #0
  4055a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4055a8:	3c08      	subs	r4, #8
  4055aa:	ea85 0501 	eor.w	r5, r5, r1
  4055ae:	ea86 0601 	eor.w	r6, r6, r1
  4055b2:	fa85 f547 	uadd8	r5, r5, r7
  4055b6:	faa3 f587 	sel	r5, r3, r7
  4055ba:	fa86 f647 	uadd8	r6, r6, r7
  4055be:	faa5 f687 	sel	r6, r5, r7
  4055c2:	b98e      	cbnz	r6, 4055e8 <memchr+0x78>
  4055c4:	d1ee      	bne.n	4055a4 <memchr+0x34>
  4055c6:	bcf0      	pop	{r4, r5, r6, r7}
  4055c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4055cc:	f002 0207 	and.w	r2, r2, #7
  4055d0:	b132      	cbz	r2, 4055e0 <memchr+0x70>
  4055d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4055d6:	3a01      	subs	r2, #1
  4055d8:	ea83 0301 	eor.w	r3, r3, r1
  4055dc:	b113      	cbz	r3, 4055e4 <memchr+0x74>
  4055de:	d1f8      	bne.n	4055d2 <memchr+0x62>
  4055e0:	2000      	movs	r0, #0
  4055e2:	4770      	bx	lr
  4055e4:	3801      	subs	r0, #1
  4055e6:	4770      	bx	lr
  4055e8:	2d00      	cmp	r5, #0
  4055ea:	bf06      	itte	eq
  4055ec:	4635      	moveq	r5, r6
  4055ee:	3803      	subeq	r0, #3
  4055f0:	3807      	subne	r0, #7
  4055f2:	f015 0f01 	tst.w	r5, #1
  4055f6:	d107      	bne.n	405608 <memchr+0x98>
  4055f8:	3001      	adds	r0, #1
  4055fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4055fe:	bf02      	ittt	eq
  405600:	3001      	addeq	r0, #1
  405602:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405606:	3001      	addeq	r0, #1
  405608:	bcf0      	pop	{r4, r5, r6, r7}
  40560a:	3801      	subs	r0, #1
  40560c:	4770      	bx	lr
  40560e:	bf00      	nop

00405610 <_Balloc>:
  405610:	b570      	push	{r4, r5, r6, lr}
  405612:	6a45      	ldr	r5, [r0, #36]	; 0x24
  405614:	4604      	mov	r4, r0
  405616:	460e      	mov	r6, r1
  405618:	b93d      	cbnz	r5, 40562a <_Balloc+0x1a>
  40561a:	2010      	movs	r0, #16
  40561c:	f7ff ff9c 	bl	405558 <malloc>
  405620:	6260      	str	r0, [r4, #36]	; 0x24
  405622:	6045      	str	r5, [r0, #4]
  405624:	6085      	str	r5, [r0, #8]
  405626:	6005      	str	r5, [r0, #0]
  405628:	60c5      	str	r5, [r0, #12]
  40562a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40562c:	68eb      	ldr	r3, [r5, #12]
  40562e:	b183      	cbz	r3, 405652 <_Balloc+0x42>
  405630:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405632:	68db      	ldr	r3, [r3, #12]
  405634:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  405638:	b9b8      	cbnz	r0, 40566a <_Balloc+0x5a>
  40563a:	2101      	movs	r1, #1
  40563c:	fa01 f506 	lsl.w	r5, r1, r6
  405640:	1d6a      	adds	r2, r5, #5
  405642:	0092      	lsls	r2, r2, #2
  405644:	4620      	mov	r0, r4
  405646:	f000 fab3 	bl	405bb0 <_calloc_r>
  40564a:	b160      	cbz	r0, 405666 <_Balloc+0x56>
  40564c:	6046      	str	r6, [r0, #4]
  40564e:	6085      	str	r5, [r0, #8]
  405650:	e00e      	b.n	405670 <_Balloc+0x60>
  405652:	2221      	movs	r2, #33	; 0x21
  405654:	2104      	movs	r1, #4
  405656:	4620      	mov	r0, r4
  405658:	f000 faaa 	bl	405bb0 <_calloc_r>
  40565c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40565e:	60e8      	str	r0, [r5, #12]
  405660:	68db      	ldr	r3, [r3, #12]
  405662:	2b00      	cmp	r3, #0
  405664:	d1e4      	bne.n	405630 <_Balloc+0x20>
  405666:	2000      	movs	r0, #0
  405668:	bd70      	pop	{r4, r5, r6, pc}
  40566a:	6802      	ldr	r2, [r0, #0]
  40566c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  405670:	2300      	movs	r3, #0
  405672:	6103      	str	r3, [r0, #16]
  405674:	60c3      	str	r3, [r0, #12]
  405676:	bd70      	pop	{r4, r5, r6, pc}

00405678 <_Bfree>:
  405678:	b570      	push	{r4, r5, r6, lr}
  40567a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40567c:	4606      	mov	r6, r0
  40567e:	460d      	mov	r5, r1
  405680:	b93c      	cbnz	r4, 405692 <_Bfree+0x1a>
  405682:	2010      	movs	r0, #16
  405684:	f7ff ff68 	bl	405558 <malloc>
  405688:	6270      	str	r0, [r6, #36]	; 0x24
  40568a:	6044      	str	r4, [r0, #4]
  40568c:	6084      	str	r4, [r0, #8]
  40568e:	6004      	str	r4, [r0, #0]
  405690:	60c4      	str	r4, [r0, #12]
  405692:	b13d      	cbz	r5, 4056a4 <_Bfree+0x2c>
  405694:	6a73      	ldr	r3, [r6, #36]	; 0x24
  405696:	686a      	ldr	r2, [r5, #4]
  405698:	68db      	ldr	r3, [r3, #12]
  40569a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40569e:	6029      	str	r1, [r5, #0]
  4056a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4056a4:	bd70      	pop	{r4, r5, r6, pc}

004056a6 <__multadd>:
  4056a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4056aa:	690d      	ldr	r5, [r1, #16]
  4056ac:	461f      	mov	r7, r3
  4056ae:	4606      	mov	r6, r0
  4056b0:	460c      	mov	r4, r1
  4056b2:	f101 0e14 	add.w	lr, r1, #20
  4056b6:	2300      	movs	r3, #0
  4056b8:	f8de 0000 	ldr.w	r0, [lr]
  4056bc:	b281      	uxth	r1, r0
  4056be:	fb02 7101 	mla	r1, r2, r1, r7
  4056c2:	0c0f      	lsrs	r7, r1, #16
  4056c4:	0c00      	lsrs	r0, r0, #16
  4056c6:	fb02 7000 	mla	r0, r2, r0, r7
  4056ca:	b289      	uxth	r1, r1
  4056cc:	3301      	adds	r3, #1
  4056ce:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  4056d2:	429d      	cmp	r5, r3
  4056d4:	ea4f 4710 	mov.w	r7, r0, lsr #16
  4056d8:	f84e 1b04 	str.w	r1, [lr], #4
  4056dc:	dcec      	bgt.n	4056b8 <__multadd+0x12>
  4056de:	b1d7      	cbz	r7, 405716 <__multadd+0x70>
  4056e0:	68a3      	ldr	r3, [r4, #8]
  4056e2:	429d      	cmp	r5, r3
  4056e4:	db12      	blt.n	40570c <__multadd+0x66>
  4056e6:	6861      	ldr	r1, [r4, #4]
  4056e8:	4630      	mov	r0, r6
  4056ea:	3101      	adds	r1, #1
  4056ec:	f7ff ff90 	bl	405610 <_Balloc>
  4056f0:	6922      	ldr	r2, [r4, #16]
  4056f2:	3202      	adds	r2, #2
  4056f4:	f104 010c 	add.w	r1, r4, #12
  4056f8:	4680      	mov	r8, r0
  4056fa:	0092      	lsls	r2, r2, #2
  4056fc:	300c      	adds	r0, #12
  4056fe:	f7fe f997 	bl	403a30 <memcpy>
  405702:	4621      	mov	r1, r4
  405704:	4630      	mov	r0, r6
  405706:	f7ff ffb7 	bl	405678 <_Bfree>
  40570a:	4644      	mov	r4, r8
  40570c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  405710:	3501      	adds	r5, #1
  405712:	615f      	str	r7, [r3, #20]
  405714:	6125      	str	r5, [r4, #16]
  405716:	4620      	mov	r0, r4
  405718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040571c <__hi0bits>:
  40571c:	0c02      	lsrs	r2, r0, #16
  40571e:	0412      	lsls	r2, r2, #16
  405720:	4603      	mov	r3, r0
  405722:	b9b2      	cbnz	r2, 405752 <__hi0bits+0x36>
  405724:	0403      	lsls	r3, r0, #16
  405726:	2010      	movs	r0, #16
  405728:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40572c:	bf04      	itt	eq
  40572e:	021b      	lsleq	r3, r3, #8
  405730:	3008      	addeq	r0, #8
  405732:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405736:	bf04      	itt	eq
  405738:	011b      	lsleq	r3, r3, #4
  40573a:	3004      	addeq	r0, #4
  40573c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  405740:	bf04      	itt	eq
  405742:	009b      	lsleq	r3, r3, #2
  405744:	3002      	addeq	r0, #2
  405746:	2b00      	cmp	r3, #0
  405748:	db06      	blt.n	405758 <__hi0bits+0x3c>
  40574a:	005b      	lsls	r3, r3, #1
  40574c:	d503      	bpl.n	405756 <__hi0bits+0x3a>
  40574e:	3001      	adds	r0, #1
  405750:	4770      	bx	lr
  405752:	2000      	movs	r0, #0
  405754:	e7e8      	b.n	405728 <__hi0bits+0xc>
  405756:	2020      	movs	r0, #32
  405758:	4770      	bx	lr

0040575a <__lo0bits>:
  40575a:	6803      	ldr	r3, [r0, #0]
  40575c:	f013 0207 	ands.w	r2, r3, #7
  405760:	4601      	mov	r1, r0
  405762:	d00b      	beq.n	40577c <__lo0bits+0x22>
  405764:	07da      	lsls	r2, r3, #31
  405766:	d423      	bmi.n	4057b0 <__lo0bits+0x56>
  405768:	0798      	lsls	r0, r3, #30
  40576a:	bf49      	itett	mi
  40576c:	085b      	lsrmi	r3, r3, #1
  40576e:	089b      	lsrpl	r3, r3, #2
  405770:	2001      	movmi	r0, #1
  405772:	600b      	strmi	r3, [r1, #0]
  405774:	bf5c      	itt	pl
  405776:	600b      	strpl	r3, [r1, #0]
  405778:	2002      	movpl	r0, #2
  40577a:	4770      	bx	lr
  40577c:	b298      	uxth	r0, r3
  40577e:	b9a8      	cbnz	r0, 4057ac <__lo0bits+0x52>
  405780:	0c1b      	lsrs	r3, r3, #16
  405782:	2010      	movs	r0, #16
  405784:	f013 0fff 	tst.w	r3, #255	; 0xff
  405788:	bf04      	itt	eq
  40578a:	0a1b      	lsreq	r3, r3, #8
  40578c:	3008      	addeq	r0, #8
  40578e:	071a      	lsls	r2, r3, #28
  405790:	bf04      	itt	eq
  405792:	091b      	lsreq	r3, r3, #4
  405794:	3004      	addeq	r0, #4
  405796:	079a      	lsls	r2, r3, #30
  405798:	bf04      	itt	eq
  40579a:	089b      	lsreq	r3, r3, #2
  40579c:	3002      	addeq	r0, #2
  40579e:	07da      	lsls	r2, r3, #31
  4057a0:	d402      	bmi.n	4057a8 <__lo0bits+0x4e>
  4057a2:	085b      	lsrs	r3, r3, #1
  4057a4:	d006      	beq.n	4057b4 <__lo0bits+0x5a>
  4057a6:	3001      	adds	r0, #1
  4057a8:	600b      	str	r3, [r1, #0]
  4057aa:	4770      	bx	lr
  4057ac:	4610      	mov	r0, r2
  4057ae:	e7e9      	b.n	405784 <__lo0bits+0x2a>
  4057b0:	2000      	movs	r0, #0
  4057b2:	4770      	bx	lr
  4057b4:	2020      	movs	r0, #32
  4057b6:	4770      	bx	lr

004057b8 <__i2b>:
  4057b8:	b510      	push	{r4, lr}
  4057ba:	460c      	mov	r4, r1
  4057bc:	2101      	movs	r1, #1
  4057be:	f7ff ff27 	bl	405610 <_Balloc>
  4057c2:	2201      	movs	r2, #1
  4057c4:	6144      	str	r4, [r0, #20]
  4057c6:	6102      	str	r2, [r0, #16]
  4057c8:	bd10      	pop	{r4, pc}

004057ca <__multiply>:
  4057ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057ce:	4614      	mov	r4, r2
  4057d0:	690a      	ldr	r2, [r1, #16]
  4057d2:	6923      	ldr	r3, [r4, #16]
  4057d4:	429a      	cmp	r2, r3
  4057d6:	bfb8      	it	lt
  4057d8:	460b      	movlt	r3, r1
  4057da:	4689      	mov	r9, r1
  4057dc:	bfbc      	itt	lt
  4057de:	46a1      	movlt	r9, r4
  4057e0:	461c      	movlt	r4, r3
  4057e2:	f8d9 7010 	ldr.w	r7, [r9, #16]
  4057e6:	f8d4 a010 	ldr.w	sl, [r4, #16]
  4057ea:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4057ee:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4057f2:	eb07 060a 	add.w	r6, r7, sl
  4057f6:	429e      	cmp	r6, r3
  4057f8:	bfc8      	it	gt
  4057fa:	3101      	addgt	r1, #1
  4057fc:	f7ff ff08 	bl	405610 <_Balloc>
  405800:	f100 0514 	add.w	r5, r0, #20
  405804:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  405808:	462b      	mov	r3, r5
  40580a:	2200      	movs	r2, #0
  40580c:	4543      	cmp	r3, r8
  40580e:	d316      	bcc.n	40583e <__multiply+0x74>
  405810:	f104 0214 	add.w	r2, r4, #20
  405814:	f109 0114 	add.w	r1, r9, #20
  405818:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  40581c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  405820:	9301      	str	r3, [sp, #4]
  405822:	9c01      	ldr	r4, [sp, #4]
  405824:	4294      	cmp	r4, r2
  405826:	4613      	mov	r3, r2
  405828:	d80c      	bhi.n	405844 <__multiply+0x7a>
  40582a:	2e00      	cmp	r6, #0
  40582c:	dd03      	ble.n	405836 <__multiply+0x6c>
  40582e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  405832:	2b00      	cmp	r3, #0
  405834:	d054      	beq.n	4058e0 <__multiply+0x116>
  405836:	6106      	str	r6, [r0, #16]
  405838:	b003      	add	sp, #12
  40583a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40583e:	f843 2b04 	str.w	r2, [r3], #4
  405842:	e7e3      	b.n	40580c <__multiply+0x42>
  405844:	f8b3 a000 	ldrh.w	sl, [r3]
  405848:	3204      	adds	r2, #4
  40584a:	f1ba 0f00 	cmp.w	sl, #0
  40584e:	d020      	beq.n	405892 <__multiply+0xc8>
  405850:	46ae      	mov	lr, r5
  405852:	4689      	mov	r9, r1
  405854:	f04f 0c00 	mov.w	ip, #0
  405858:	f859 4b04 	ldr.w	r4, [r9], #4
  40585c:	f8be b000 	ldrh.w	fp, [lr]
  405860:	b2a3      	uxth	r3, r4
  405862:	fb0a b303 	mla	r3, sl, r3, fp
  405866:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  40586a:	f8de 4000 	ldr.w	r4, [lr]
  40586e:	4463      	add	r3, ip
  405870:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  405874:	fb0a c40b 	mla	r4, sl, fp, ip
  405878:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40587c:	b29b      	uxth	r3, r3
  40587e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  405882:	454f      	cmp	r7, r9
  405884:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  405888:	f84e 3b04 	str.w	r3, [lr], #4
  40588c:	d8e4      	bhi.n	405858 <__multiply+0x8e>
  40588e:	f8ce c000 	str.w	ip, [lr]
  405892:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  405896:	f1b9 0f00 	cmp.w	r9, #0
  40589a:	d01f      	beq.n	4058dc <__multiply+0x112>
  40589c:	682b      	ldr	r3, [r5, #0]
  40589e:	46ae      	mov	lr, r5
  4058a0:	468c      	mov	ip, r1
  4058a2:	f04f 0a00 	mov.w	sl, #0
  4058a6:	f8bc 4000 	ldrh.w	r4, [ip]
  4058aa:	f8be b002 	ldrh.w	fp, [lr, #2]
  4058ae:	fb09 b404 	mla	r4, r9, r4, fp
  4058b2:	44a2      	add	sl, r4
  4058b4:	b29b      	uxth	r3, r3
  4058b6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  4058ba:	f84e 3b04 	str.w	r3, [lr], #4
  4058be:	f85c 3b04 	ldr.w	r3, [ip], #4
  4058c2:	f8be 4000 	ldrh.w	r4, [lr]
  4058c6:	0c1b      	lsrs	r3, r3, #16
  4058c8:	fb09 4303 	mla	r3, r9, r3, r4
  4058cc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  4058d0:	4567      	cmp	r7, ip
  4058d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4058d6:	d8e6      	bhi.n	4058a6 <__multiply+0xdc>
  4058d8:	f8ce 3000 	str.w	r3, [lr]
  4058dc:	3504      	adds	r5, #4
  4058de:	e7a0      	b.n	405822 <__multiply+0x58>
  4058e0:	3e01      	subs	r6, #1
  4058e2:	e7a2      	b.n	40582a <__multiply+0x60>

004058e4 <__pow5mult>:
  4058e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4058e8:	4615      	mov	r5, r2
  4058ea:	f012 0203 	ands.w	r2, r2, #3
  4058ee:	4606      	mov	r6, r0
  4058f0:	460f      	mov	r7, r1
  4058f2:	d007      	beq.n	405904 <__pow5mult+0x20>
  4058f4:	3a01      	subs	r2, #1
  4058f6:	4c21      	ldr	r4, [pc, #132]	; (40597c <__pow5mult+0x98>)
  4058f8:	2300      	movs	r3, #0
  4058fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  4058fe:	f7ff fed2 	bl	4056a6 <__multadd>
  405902:	4607      	mov	r7, r0
  405904:	10ad      	asrs	r5, r5, #2
  405906:	d035      	beq.n	405974 <__pow5mult+0x90>
  405908:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40590a:	b93c      	cbnz	r4, 40591c <__pow5mult+0x38>
  40590c:	2010      	movs	r0, #16
  40590e:	f7ff fe23 	bl	405558 <malloc>
  405912:	6270      	str	r0, [r6, #36]	; 0x24
  405914:	6044      	str	r4, [r0, #4]
  405916:	6084      	str	r4, [r0, #8]
  405918:	6004      	str	r4, [r0, #0]
  40591a:	60c4      	str	r4, [r0, #12]
  40591c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  405920:	f8d8 4008 	ldr.w	r4, [r8, #8]
  405924:	b94c      	cbnz	r4, 40593a <__pow5mult+0x56>
  405926:	f240 2171 	movw	r1, #625	; 0x271
  40592a:	4630      	mov	r0, r6
  40592c:	f7ff ff44 	bl	4057b8 <__i2b>
  405930:	2300      	movs	r3, #0
  405932:	f8c8 0008 	str.w	r0, [r8, #8]
  405936:	4604      	mov	r4, r0
  405938:	6003      	str	r3, [r0, #0]
  40593a:	f04f 0800 	mov.w	r8, #0
  40593e:	07eb      	lsls	r3, r5, #31
  405940:	d50a      	bpl.n	405958 <__pow5mult+0x74>
  405942:	4639      	mov	r1, r7
  405944:	4622      	mov	r2, r4
  405946:	4630      	mov	r0, r6
  405948:	f7ff ff3f 	bl	4057ca <__multiply>
  40594c:	4639      	mov	r1, r7
  40594e:	4681      	mov	r9, r0
  405950:	4630      	mov	r0, r6
  405952:	f7ff fe91 	bl	405678 <_Bfree>
  405956:	464f      	mov	r7, r9
  405958:	106d      	asrs	r5, r5, #1
  40595a:	d00b      	beq.n	405974 <__pow5mult+0x90>
  40595c:	6820      	ldr	r0, [r4, #0]
  40595e:	b938      	cbnz	r0, 405970 <__pow5mult+0x8c>
  405960:	4622      	mov	r2, r4
  405962:	4621      	mov	r1, r4
  405964:	4630      	mov	r0, r6
  405966:	f7ff ff30 	bl	4057ca <__multiply>
  40596a:	6020      	str	r0, [r4, #0]
  40596c:	f8c0 8000 	str.w	r8, [r0]
  405970:	4604      	mov	r4, r0
  405972:	e7e4      	b.n	40593e <__pow5mult+0x5a>
  405974:	4638      	mov	r0, r7
  405976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40597a:	bf00      	nop
  40597c:	00406a70 	.word	0x00406a70

00405980 <__lshift>:
  405980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405984:	460c      	mov	r4, r1
  405986:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40598a:	6923      	ldr	r3, [r4, #16]
  40598c:	6849      	ldr	r1, [r1, #4]
  40598e:	eb0a 0903 	add.w	r9, sl, r3
  405992:	68a3      	ldr	r3, [r4, #8]
  405994:	4607      	mov	r7, r0
  405996:	4616      	mov	r6, r2
  405998:	f109 0501 	add.w	r5, r9, #1
  40599c:	42ab      	cmp	r3, r5
  40599e:	db31      	blt.n	405a04 <__lshift+0x84>
  4059a0:	4638      	mov	r0, r7
  4059a2:	f7ff fe35 	bl	405610 <_Balloc>
  4059a6:	2200      	movs	r2, #0
  4059a8:	4680      	mov	r8, r0
  4059aa:	f100 0314 	add.w	r3, r0, #20
  4059ae:	4611      	mov	r1, r2
  4059b0:	4552      	cmp	r2, sl
  4059b2:	db2a      	blt.n	405a0a <__lshift+0x8a>
  4059b4:	6920      	ldr	r0, [r4, #16]
  4059b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  4059ba:	f104 0114 	add.w	r1, r4, #20
  4059be:	f016 021f 	ands.w	r2, r6, #31
  4059c2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  4059c6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  4059ca:	d022      	beq.n	405a12 <__lshift+0x92>
  4059cc:	f1c2 0c20 	rsb	ip, r2, #32
  4059d0:	2000      	movs	r0, #0
  4059d2:	680e      	ldr	r6, [r1, #0]
  4059d4:	4096      	lsls	r6, r2
  4059d6:	4330      	orrs	r0, r6
  4059d8:	f843 0b04 	str.w	r0, [r3], #4
  4059dc:	f851 0b04 	ldr.w	r0, [r1], #4
  4059e0:	458e      	cmp	lr, r1
  4059e2:	fa20 f00c 	lsr.w	r0, r0, ip
  4059e6:	d8f4      	bhi.n	4059d2 <__lshift+0x52>
  4059e8:	6018      	str	r0, [r3, #0]
  4059ea:	b108      	cbz	r0, 4059f0 <__lshift+0x70>
  4059ec:	f109 0502 	add.w	r5, r9, #2
  4059f0:	3d01      	subs	r5, #1
  4059f2:	4638      	mov	r0, r7
  4059f4:	f8c8 5010 	str.w	r5, [r8, #16]
  4059f8:	4621      	mov	r1, r4
  4059fa:	f7ff fe3d 	bl	405678 <_Bfree>
  4059fe:	4640      	mov	r0, r8
  405a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405a04:	3101      	adds	r1, #1
  405a06:	005b      	lsls	r3, r3, #1
  405a08:	e7c8      	b.n	40599c <__lshift+0x1c>
  405a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  405a0e:	3201      	adds	r2, #1
  405a10:	e7ce      	b.n	4059b0 <__lshift+0x30>
  405a12:	3b04      	subs	r3, #4
  405a14:	f851 2b04 	ldr.w	r2, [r1], #4
  405a18:	f843 2f04 	str.w	r2, [r3, #4]!
  405a1c:	458e      	cmp	lr, r1
  405a1e:	d8f9      	bhi.n	405a14 <__lshift+0x94>
  405a20:	e7e6      	b.n	4059f0 <__lshift+0x70>

00405a22 <__mcmp>:
  405a22:	6903      	ldr	r3, [r0, #16]
  405a24:	690a      	ldr	r2, [r1, #16]
  405a26:	1a9b      	subs	r3, r3, r2
  405a28:	b530      	push	{r4, r5, lr}
  405a2a:	d10c      	bne.n	405a46 <__mcmp+0x24>
  405a2c:	0092      	lsls	r2, r2, #2
  405a2e:	3014      	adds	r0, #20
  405a30:	3114      	adds	r1, #20
  405a32:	1884      	adds	r4, r0, r2
  405a34:	4411      	add	r1, r2
  405a36:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  405a3a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  405a3e:	4295      	cmp	r5, r2
  405a40:	d003      	beq.n	405a4a <__mcmp+0x28>
  405a42:	d305      	bcc.n	405a50 <__mcmp+0x2e>
  405a44:	2301      	movs	r3, #1
  405a46:	4618      	mov	r0, r3
  405a48:	bd30      	pop	{r4, r5, pc}
  405a4a:	42a0      	cmp	r0, r4
  405a4c:	d3f3      	bcc.n	405a36 <__mcmp+0x14>
  405a4e:	e7fa      	b.n	405a46 <__mcmp+0x24>
  405a50:	f04f 33ff 	mov.w	r3, #4294967295
  405a54:	e7f7      	b.n	405a46 <__mcmp+0x24>

00405a56 <__mdiff>:
  405a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405a5a:	460d      	mov	r5, r1
  405a5c:	4607      	mov	r7, r0
  405a5e:	4611      	mov	r1, r2
  405a60:	4628      	mov	r0, r5
  405a62:	4614      	mov	r4, r2
  405a64:	f7ff ffdd 	bl	405a22 <__mcmp>
  405a68:	1e06      	subs	r6, r0, #0
  405a6a:	d108      	bne.n	405a7e <__mdiff+0x28>
  405a6c:	4631      	mov	r1, r6
  405a6e:	4638      	mov	r0, r7
  405a70:	f7ff fdce 	bl	405610 <_Balloc>
  405a74:	2301      	movs	r3, #1
  405a76:	6103      	str	r3, [r0, #16]
  405a78:	6146      	str	r6, [r0, #20]
  405a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405a7e:	bfa4      	itt	ge
  405a80:	4623      	movge	r3, r4
  405a82:	462c      	movge	r4, r5
  405a84:	4638      	mov	r0, r7
  405a86:	6861      	ldr	r1, [r4, #4]
  405a88:	bfa6      	itte	ge
  405a8a:	461d      	movge	r5, r3
  405a8c:	2600      	movge	r6, #0
  405a8e:	2601      	movlt	r6, #1
  405a90:	f7ff fdbe 	bl	405610 <_Balloc>
  405a94:	692b      	ldr	r3, [r5, #16]
  405a96:	60c6      	str	r6, [r0, #12]
  405a98:	6926      	ldr	r6, [r4, #16]
  405a9a:	f105 0914 	add.w	r9, r5, #20
  405a9e:	f104 0214 	add.w	r2, r4, #20
  405aa2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  405aa6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  405aaa:	f100 0514 	add.w	r5, r0, #20
  405aae:	f04f 0c00 	mov.w	ip, #0
  405ab2:	f852 ab04 	ldr.w	sl, [r2], #4
  405ab6:	f859 4b04 	ldr.w	r4, [r9], #4
  405aba:	fa1c f18a 	uxtah	r1, ip, sl
  405abe:	b2a3      	uxth	r3, r4
  405ac0:	1ac9      	subs	r1, r1, r3
  405ac2:	0c23      	lsrs	r3, r4, #16
  405ac4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  405ac8:	eb03 4321 	add.w	r3, r3, r1, asr #16
  405acc:	b289      	uxth	r1, r1
  405ace:	ea4f 4c23 	mov.w	ip, r3, asr #16
  405ad2:	45c8      	cmp	r8, r9
  405ad4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  405ad8:	4696      	mov	lr, r2
  405ada:	f845 3b04 	str.w	r3, [r5], #4
  405ade:	d8e8      	bhi.n	405ab2 <__mdiff+0x5c>
  405ae0:	45be      	cmp	lr, r7
  405ae2:	d305      	bcc.n	405af0 <__mdiff+0x9a>
  405ae4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405ae8:	b18b      	cbz	r3, 405b0e <__mdiff+0xb8>
  405aea:	6106      	str	r6, [r0, #16]
  405aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405af0:	f85e 1b04 	ldr.w	r1, [lr], #4
  405af4:	fa1c f381 	uxtah	r3, ip, r1
  405af8:	141a      	asrs	r2, r3, #16
  405afa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  405afe:	b29b      	uxth	r3, r3
  405b00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405b04:	ea4f 4c22 	mov.w	ip, r2, asr #16
  405b08:	f845 3b04 	str.w	r3, [r5], #4
  405b0c:	e7e8      	b.n	405ae0 <__mdiff+0x8a>
  405b0e:	3e01      	subs	r6, #1
  405b10:	e7e8      	b.n	405ae4 <__mdiff+0x8e>

00405b12 <__d2b>:
  405b12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  405b16:	2101      	movs	r1, #1
  405b18:	461c      	mov	r4, r3
  405b1a:	4690      	mov	r8, r2
  405b1c:	9e08      	ldr	r6, [sp, #32]
  405b1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405b20:	f7ff fd76 	bl	405610 <_Balloc>
  405b24:	f3c4 0213 	ubfx	r2, r4, #0, #20
  405b28:	f3c4 540a 	ubfx	r4, r4, #20, #11
  405b2c:	4607      	mov	r7, r0
  405b2e:	bb34      	cbnz	r4, 405b7e <__d2b+0x6c>
  405b30:	9201      	str	r2, [sp, #4]
  405b32:	f1b8 0f00 	cmp.w	r8, #0
  405b36:	d027      	beq.n	405b88 <__d2b+0x76>
  405b38:	a802      	add	r0, sp, #8
  405b3a:	f840 8d08 	str.w	r8, [r0, #-8]!
  405b3e:	f7ff fe0c 	bl	40575a <__lo0bits>
  405b42:	9900      	ldr	r1, [sp, #0]
  405b44:	b1f0      	cbz	r0, 405b84 <__d2b+0x72>
  405b46:	9a01      	ldr	r2, [sp, #4]
  405b48:	f1c0 0320 	rsb	r3, r0, #32
  405b4c:	fa02 f303 	lsl.w	r3, r2, r3
  405b50:	430b      	orrs	r3, r1
  405b52:	40c2      	lsrs	r2, r0
  405b54:	617b      	str	r3, [r7, #20]
  405b56:	9201      	str	r2, [sp, #4]
  405b58:	9b01      	ldr	r3, [sp, #4]
  405b5a:	61bb      	str	r3, [r7, #24]
  405b5c:	2b00      	cmp	r3, #0
  405b5e:	bf14      	ite	ne
  405b60:	2102      	movne	r1, #2
  405b62:	2101      	moveq	r1, #1
  405b64:	6139      	str	r1, [r7, #16]
  405b66:	b1c4      	cbz	r4, 405b9a <__d2b+0x88>
  405b68:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  405b6c:	4404      	add	r4, r0
  405b6e:	6034      	str	r4, [r6, #0]
  405b70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405b74:	6028      	str	r0, [r5, #0]
  405b76:	4638      	mov	r0, r7
  405b78:	b002      	add	sp, #8
  405b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  405b82:	e7d5      	b.n	405b30 <__d2b+0x1e>
  405b84:	6179      	str	r1, [r7, #20]
  405b86:	e7e7      	b.n	405b58 <__d2b+0x46>
  405b88:	a801      	add	r0, sp, #4
  405b8a:	f7ff fde6 	bl	40575a <__lo0bits>
  405b8e:	9b01      	ldr	r3, [sp, #4]
  405b90:	617b      	str	r3, [r7, #20]
  405b92:	2101      	movs	r1, #1
  405b94:	6139      	str	r1, [r7, #16]
  405b96:	3020      	adds	r0, #32
  405b98:	e7e5      	b.n	405b66 <__d2b+0x54>
  405b9a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  405b9e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405ba2:	6030      	str	r0, [r6, #0]
  405ba4:	6918      	ldr	r0, [r3, #16]
  405ba6:	f7ff fdb9 	bl	40571c <__hi0bits>
  405baa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  405bae:	e7e1      	b.n	405b74 <__d2b+0x62>

00405bb0 <_calloc_r>:
  405bb0:	b538      	push	{r3, r4, r5, lr}
  405bb2:	fb02 f401 	mul.w	r4, r2, r1
  405bb6:	4621      	mov	r1, r4
  405bb8:	f000 f856 	bl	405c68 <_malloc_r>
  405bbc:	4605      	mov	r5, r0
  405bbe:	b118      	cbz	r0, 405bc8 <_calloc_r+0x18>
  405bc0:	4622      	mov	r2, r4
  405bc2:	2100      	movs	r1, #0
  405bc4:	f7fd ff3f 	bl	403a46 <memset>
  405bc8:	4628      	mov	r0, r5
  405bca:	bd38      	pop	{r3, r4, r5, pc}

00405bcc <_free_r>:
  405bcc:	b538      	push	{r3, r4, r5, lr}
  405bce:	4605      	mov	r5, r0
  405bd0:	2900      	cmp	r1, #0
  405bd2:	d045      	beq.n	405c60 <_free_r+0x94>
  405bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
  405bd8:	1f0c      	subs	r4, r1, #4
  405bda:	2b00      	cmp	r3, #0
  405bdc:	bfb8      	it	lt
  405bde:	18e4      	addlt	r4, r4, r3
  405be0:	f000 fb5a 	bl	406298 <__malloc_lock>
  405be4:	4a1f      	ldr	r2, [pc, #124]	; (405c64 <_free_r+0x98>)
  405be6:	6813      	ldr	r3, [r2, #0]
  405be8:	4610      	mov	r0, r2
  405bea:	b933      	cbnz	r3, 405bfa <_free_r+0x2e>
  405bec:	6063      	str	r3, [r4, #4]
  405bee:	6014      	str	r4, [r2, #0]
  405bf0:	4628      	mov	r0, r5
  405bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405bf6:	f000 bb50 	b.w	40629a <__malloc_unlock>
  405bfa:	42a3      	cmp	r3, r4
  405bfc:	d90c      	bls.n	405c18 <_free_r+0x4c>
  405bfe:	6821      	ldr	r1, [r4, #0]
  405c00:	1862      	adds	r2, r4, r1
  405c02:	4293      	cmp	r3, r2
  405c04:	bf04      	itt	eq
  405c06:	681a      	ldreq	r2, [r3, #0]
  405c08:	685b      	ldreq	r3, [r3, #4]
  405c0a:	6063      	str	r3, [r4, #4]
  405c0c:	bf04      	itt	eq
  405c0e:	1852      	addeq	r2, r2, r1
  405c10:	6022      	streq	r2, [r4, #0]
  405c12:	6004      	str	r4, [r0, #0]
  405c14:	e7ec      	b.n	405bf0 <_free_r+0x24>
  405c16:	4613      	mov	r3, r2
  405c18:	685a      	ldr	r2, [r3, #4]
  405c1a:	b10a      	cbz	r2, 405c20 <_free_r+0x54>
  405c1c:	42a2      	cmp	r2, r4
  405c1e:	d9fa      	bls.n	405c16 <_free_r+0x4a>
  405c20:	6819      	ldr	r1, [r3, #0]
  405c22:	1858      	adds	r0, r3, r1
  405c24:	42a0      	cmp	r0, r4
  405c26:	d10b      	bne.n	405c40 <_free_r+0x74>
  405c28:	6820      	ldr	r0, [r4, #0]
  405c2a:	4401      	add	r1, r0
  405c2c:	1858      	adds	r0, r3, r1
  405c2e:	4282      	cmp	r2, r0
  405c30:	6019      	str	r1, [r3, #0]
  405c32:	d1dd      	bne.n	405bf0 <_free_r+0x24>
  405c34:	6810      	ldr	r0, [r2, #0]
  405c36:	6852      	ldr	r2, [r2, #4]
  405c38:	605a      	str	r2, [r3, #4]
  405c3a:	4401      	add	r1, r0
  405c3c:	6019      	str	r1, [r3, #0]
  405c3e:	e7d7      	b.n	405bf0 <_free_r+0x24>
  405c40:	d902      	bls.n	405c48 <_free_r+0x7c>
  405c42:	230c      	movs	r3, #12
  405c44:	602b      	str	r3, [r5, #0]
  405c46:	e7d3      	b.n	405bf0 <_free_r+0x24>
  405c48:	6820      	ldr	r0, [r4, #0]
  405c4a:	1821      	adds	r1, r4, r0
  405c4c:	428a      	cmp	r2, r1
  405c4e:	bf04      	itt	eq
  405c50:	6811      	ldreq	r1, [r2, #0]
  405c52:	6852      	ldreq	r2, [r2, #4]
  405c54:	6062      	str	r2, [r4, #4]
  405c56:	bf04      	itt	eq
  405c58:	1809      	addeq	r1, r1, r0
  405c5a:	6021      	streq	r1, [r4, #0]
  405c5c:	605c      	str	r4, [r3, #4]
  405c5e:	e7c7      	b.n	405bf0 <_free_r+0x24>
  405c60:	bd38      	pop	{r3, r4, r5, pc}
  405c62:	bf00      	nop
  405c64:	204002b8 	.word	0x204002b8

00405c68 <_malloc_r>:
  405c68:	b570      	push	{r4, r5, r6, lr}
  405c6a:	1ccd      	adds	r5, r1, #3
  405c6c:	f025 0503 	bic.w	r5, r5, #3
  405c70:	3508      	adds	r5, #8
  405c72:	2d0c      	cmp	r5, #12
  405c74:	bf38      	it	cc
  405c76:	250c      	movcc	r5, #12
  405c78:	2d00      	cmp	r5, #0
  405c7a:	4606      	mov	r6, r0
  405c7c:	db01      	blt.n	405c82 <_malloc_r+0x1a>
  405c7e:	42a9      	cmp	r1, r5
  405c80:	d903      	bls.n	405c8a <_malloc_r+0x22>
  405c82:	230c      	movs	r3, #12
  405c84:	6033      	str	r3, [r6, #0]
  405c86:	2000      	movs	r0, #0
  405c88:	bd70      	pop	{r4, r5, r6, pc}
  405c8a:	f000 fb05 	bl	406298 <__malloc_lock>
  405c8e:	4a23      	ldr	r2, [pc, #140]	; (405d1c <_malloc_r+0xb4>)
  405c90:	6814      	ldr	r4, [r2, #0]
  405c92:	4621      	mov	r1, r4
  405c94:	b991      	cbnz	r1, 405cbc <_malloc_r+0x54>
  405c96:	4c22      	ldr	r4, [pc, #136]	; (405d20 <_malloc_r+0xb8>)
  405c98:	6823      	ldr	r3, [r4, #0]
  405c9a:	b91b      	cbnz	r3, 405ca4 <_malloc_r+0x3c>
  405c9c:	4630      	mov	r0, r6
  405c9e:	f000 f97f 	bl	405fa0 <_sbrk_r>
  405ca2:	6020      	str	r0, [r4, #0]
  405ca4:	4629      	mov	r1, r5
  405ca6:	4630      	mov	r0, r6
  405ca8:	f000 f97a 	bl	405fa0 <_sbrk_r>
  405cac:	1c43      	adds	r3, r0, #1
  405cae:	d126      	bne.n	405cfe <_malloc_r+0x96>
  405cb0:	230c      	movs	r3, #12
  405cb2:	6033      	str	r3, [r6, #0]
  405cb4:	4630      	mov	r0, r6
  405cb6:	f000 faf0 	bl	40629a <__malloc_unlock>
  405cba:	e7e4      	b.n	405c86 <_malloc_r+0x1e>
  405cbc:	680b      	ldr	r3, [r1, #0]
  405cbe:	1b5b      	subs	r3, r3, r5
  405cc0:	d41a      	bmi.n	405cf8 <_malloc_r+0x90>
  405cc2:	2b0b      	cmp	r3, #11
  405cc4:	d90f      	bls.n	405ce6 <_malloc_r+0x7e>
  405cc6:	600b      	str	r3, [r1, #0]
  405cc8:	50cd      	str	r5, [r1, r3]
  405cca:	18cc      	adds	r4, r1, r3
  405ccc:	4630      	mov	r0, r6
  405cce:	f000 fae4 	bl	40629a <__malloc_unlock>
  405cd2:	f104 000b 	add.w	r0, r4, #11
  405cd6:	1d23      	adds	r3, r4, #4
  405cd8:	f020 0007 	bic.w	r0, r0, #7
  405cdc:	1ac3      	subs	r3, r0, r3
  405cde:	d01b      	beq.n	405d18 <_malloc_r+0xb0>
  405ce0:	425a      	negs	r2, r3
  405ce2:	50e2      	str	r2, [r4, r3]
  405ce4:	bd70      	pop	{r4, r5, r6, pc}
  405ce6:	428c      	cmp	r4, r1
  405ce8:	bf0d      	iteet	eq
  405cea:	6863      	ldreq	r3, [r4, #4]
  405cec:	684b      	ldrne	r3, [r1, #4]
  405cee:	6063      	strne	r3, [r4, #4]
  405cf0:	6013      	streq	r3, [r2, #0]
  405cf2:	bf18      	it	ne
  405cf4:	460c      	movne	r4, r1
  405cf6:	e7e9      	b.n	405ccc <_malloc_r+0x64>
  405cf8:	460c      	mov	r4, r1
  405cfa:	6849      	ldr	r1, [r1, #4]
  405cfc:	e7ca      	b.n	405c94 <_malloc_r+0x2c>
  405cfe:	1cc4      	adds	r4, r0, #3
  405d00:	f024 0403 	bic.w	r4, r4, #3
  405d04:	42a0      	cmp	r0, r4
  405d06:	d005      	beq.n	405d14 <_malloc_r+0xac>
  405d08:	1a21      	subs	r1, r4, r0
  405d0a:	4630      	mov	r0, r6
  405d0c:	f000 f948 	bl	405fa0 <_sbrk_r>
  405d10:	3001      	adds	r0, #1
  405d12:	d0cd      	beq.n	405cb0 <_malloc_r+0x48>
  405d14:	6025      	str	r5, [r4, #0]
  405d16:	e7d9      	b.n	405ccc <_malloc_r+0x64>
  405d18:	bd70      	pop	{r4, r5, r6, pc}
  405d1a:	bf00      	nop
  405d1c:	204002b8 	.word	0x204002b8
  405d20:	204002bc 	.word	0x204002bc

00405d24 <__sfputc_r>:
  405d24:	6893      	ldr	r3, [r2, #8]
  405d26:	3b01      	subs	r3, #1
  405d28:	2b00      	cmp	r3, #0
  405d2a:	b410      	push	{r4}
  405d2c:	6093      	str	r3, [r2, #8]
  405d2e:	da08      	bge.n	405d42 <__sfputc_r+0x1e>
  405d30:	6994      	ldr	r4, [r2, #24]
  405d32:	42a3      	cmp	r3, r4
  405d34:	db02      	blt.n	405d3c <__sfputc_r+0x18>
  405d36:	b2cb      	uxtb	r3, r1
  405d38:	2b0a      	cmp	r3, #10
  405d3a:	d102      	bne.n	405d42 <__sfputc_r+0x1e>
  405d3c:	bc10      	pop	{r4}
  405d3e:	f000 b983 	b.w	406048 <__swbuf_r>
  405d42:	6813      	ldr	r3, [r2, #0]
  405d44:	1c58      	adds	r0, r3, #1
  405d46:	6010      	str	r0, [r2, #0]
  405d48:	7019      	strb	r1, [r3, #0]
  405d4a:	b2c8      	uxtb	r0, r1
  405d4c:	bc10      	pop	{r4}
  405d4e:	4770      	bx	lr

00405d50 <__sfputs_r>:
  405d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405d52:	4606      	mov	r6, r0
  405d54:	460f      	mov	r7, r1
  405d56:	4614      	mov	r4, r2
  405d58:	18d5      	adds	r5, r2, r3
  405d5a:	42ac      	cmp	r4, r5
  405d5c:	d101      	bne.n	405d62 <__sfputs_r+0x12>
  405d5e:	2000      	movs	r0, #0
  405d60:	e007      	b.n	405d72 <__sfputs_r+0x22>
  405d62:	463a      	mov	r2, r7
  405d64:	f814 1b01 	ldrb.w	r1, [r4], #1
  405d68:	4630      	mov	r0, r6
  405d6a:	f7ff ffdb 	bl	405d24 <__sfputc_r>
  405d6e:	1c43      	adds	r3, r0, #1
  405d70:	d1f3      	bne.n	405d5a <__sfputs_r+0xa>
  405d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00405d74 <_vfiprintf_r>:
  405d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d78:	b09d      	sub	sp, #116	; 0x74
  405d7a:	460c      	mov	r4, r1
  405d7c:	4617      	mov	r7, r2
  405d7e:	9303      	str	r3, [sp, #12]
  405d80:	4606      	mov	r6, r0
  405d82:	b118      	cbz	r0, 405d8c <_vfiprintf_r+0x18>
  405d84:	6983      	ldr	r3, [r0, #24]
  405d86:	b90b      	cbnz	r3, 405d8c <_vfiprintf_r+0x18>
  405d88:	f7ff faea 	bl	405360 <__sinit>
  405d8c:	4b7c      	ldr	r3, [pc, #496]	; (405f80 <_vfiprintf_r+0x20c>)
  405d8e:	429c      	cmp	r4, r3
  405d90:	d157      	bne.n	405e42 <_vfiprintf_r+0xce>
  405d92:	6874      	ldr	r4, [r6, #4]
  405d94:	89a3      	ldrh	r3, [r4, #12]
  405d96:	0718      	lsls	r0, r3, #28
  405d98:	d55d      	bpl.n	405e56 <_vfiprintf_r+0xe2>
  405d9a:	6923      	ldr	r3, [r4, #16]
  405d9c:	2b00      	cmp	r3, #0
  405d9e:	d05a      	beq.n	405e56 <_vfiprintf_r+0xe2>
  405da0:	2300      	movs	r3, #0
  405da2:	9309      	str	r3, [sp, #36]	; 0x24
  405da4:	2320      	movs	r3, #32
  405da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  405daa:	2330      	movs	r3, #48	; 0x30
  405dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  405db0:	f04f 0b01 	mov.w	fp, #1
  405db4:	46b8      	mov	r8, r7
  405db6:	4645      	mov	r5, r8
  405db8:	f815 3b01 	ldrb.w	r3, [r5], #1
  405dbc:	2b00      	cmp	r3, #0
  405dbe:	d155      	bne.n	405e6c <_vfiprintf_r+0xf8>
  405dc0:	ebb8 0a07 	subs.w	sl, r8, r7
  405dc4:	d00b      	beq.n	405dde <_vfiprintf_r+0x6a>
  405dc6:	4653      	mov	r3, sl
  405dc8:	463a      	mov	r2, r7
  405dca:	4621      	mov	r1, r4
  405dcc:	4630      	mov	r0, r6
  405dce:	f7ff ffbf 	bl	405d50 <__sfputs_r>
  405dd2:	3001      	adds	r0, #1
  405dd4:	f000 80c4 	beq.w	405f60 <_vfiprintf_r+0x1ec>
  405dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405dda:	4453      	add	r3, sl
  405ddc:	9309      	str	r3, [sp, #36]	; 0x24
  405dde:	f898 3000 	ldrb.w	r3, [r8]
  405de2:	2b00      	cmp	r3, #0
  405de4:	f000 80bc 	beq.w	405f60 <_vfiprintf_r+0x1ec>
  405de8:	2300      	movs	r3, #0
  405dea:	f04f 32ff 	mov.w	r2, #4294967295
  405dee:	9304      	str	r3, [sp, #16]
  405df0:	9307      	str	r3, [sp, #28]
  405df2:	9205      	str	r2, [sp, #20]
  405df4:	9306      	str	r3, [sp, #24]
  405df6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  405dfa:	931a      	str	r3, [sp, #104]	; 0x68
  405dfc:	2205      	movs	r2, #5
  405dfe:	7829      	ldrb	r1, [r5, #0]
  405e00:	4860      	ldr	r0, [pc, #384]	; (405f84 <_vfiprintf_r+0x210>)
  405e02:	f7ff fbb5 	bl	405570 <memchr>
  405e06:	f105 0801 	add.w	r8, r5, #1
  405e0a:	9b04      	ldr	r3, [sp, #16]
  405e0c:	2800      	cmp	r0, #0
  405e0e:	d131      	bne.n	405e74 <_vfiprintf_r+0x100>
  405e10:	06d9      	lsls	r1, r3, #27
  405e12:	bf44      	itt	mi
  405e14:	2220      	movmi	r2, #32
  405e16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  405e1a:	071a      	lsls	r2, r3, #28
  405e1c:	bf44      	itt	mi
  405e1e:	222b      	movmi	r2, #43	; 0x2b
  405e20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  405e24:	782a      	ldrb	r2, [r5, #0]
  405e26:	2a2a      	cmp	r2, #42	; 0x2a
  405e28:	d02c      	beq.n	405e84 <_vfiprintf_r+0x110>
  405e2a:	9a07      	ldr	r2, [sp, #28]
  405e2c:	2100      	movs	r1, #0
  405e2e:	200a      	movs	r0, #10
  405e30:	46a8      	mov	r8, r5
  405e32:	3501      	adds	r5, #1
  405e34:	f898 3000 	ldrb.w	r3, [r8]
  405e38:	3b30      	subs	r3, #48	; 0x30
  405e3a:	2b09      	cmp	r3, #9
  405e3c:	d96d      	bls.n	405f1a <_vfiprintf_r+0x1a6>
  405e3e:	b371      	cbz	r1, 405e9e <_vfiprintf_r+0x12a>
  405e40:	e026      	b.n	405e90 <_vfiprintf_r+0x11c>
  405e42:	4b51      	ldr	r3, [pc, #324]	; (405f88 <_vfiprintf_r+0x214>)
  405e44:	429c      	cmp	r4, r3
  405e46:	d101      	bne.n	405e4c <_vfiprintf_r+0xd8>
  405e48:	68b4      	ldr	r4, [r6, #8]
  405e4a:	e7a3      	b.n	405d94 <_vfiprintf_r+0x20>
  405e4c:	4b4f      	ldr	r3, [pc, #316]	; (405f8c <_vfiprintf_r+0x218>)
  405e4e:	429c      	cmp	r4, r3
  405e50:	bf08      	it	eq
  405e52:	68f4      	ldreq	r4, [r6, #12]
  405e54:	e79e      	b.n	405d94 <_vfiprintf_r+0x20>
  405e56:	4621      	mov	r1, r4
  405e58:	4630      	mov	r0, r6
  405e5a:	f000 f959 	bl	406110 <__swsetup_r>
  405e5e:	2800      	cmp	r0, #0
  405e60:	d09e      	beq.n	405da0 <_vfiprintf_r+0x2c>
  405e62:	f04f 30ff 	mov.w	r0, #4294967295
  405e66:	b01d      	add	sp, #116	; 0x74
  405e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e6c:	2b25      	cmp	r3, #37	; 0x25
  405e6e:	d0a7      	beq.n	405dc0 <_vfiprintf_r+0x4c>
  405e70:	46a8      	mov	r8, r5
  405e72:	e7a0      	b.n	405db6 <_vfiprintf_r+0x42>
  405e74:	4a43      	ldr	r2, [pc, #268]	; (405f84 <_vfiprintf_r+0x210>)
  405e76:	1a80      	subs	r0, r0, r2
  405e78:	fa0b f000 	lsl.w	r0, fp, r0
  405e7c:	4318      	orrs	r0, r3
  405e7e:	9004      	str	r0, [sp, #16]
  405e80:	4645      	mov	r5, r8
  405e82:	e7bb      	b.n	405dfc <_vfiprintf_r+0x88>
  405e84:	9a03      	ldr	r2, [sp, #12]
  405e86:	1d11      	adds	r1, r2, #4
  405e88:	6812      	ldr	r2, [r2, #0]
  405e8a:	9103      	str	r1, [sp, #12]
  405e8c:	2a00      	cmp	r2, #0
  405e8e:	db01      	blt.n	405e94 <_vfiprintf_r+0x120>
  405e90:	9207      	str	r2, [sp, #28]
  405e92:	e004      	b.n	405e9e <_vfiprintf_r+0x12a>
  405e94:	4252      	negs	r2, r2
  405e96:	f043 0302 	orr.w	r3, r3, #2
  405e9a:	9207      	str	r2, [sp, #28]
  405e9c:	9304      	str	r3, [sp, #16]
  405e9e:	f898 3000 	ldrb.w	r3, [r8]
  405ea2:	2b2e      	cmp	r3, #46	; 0x2e
  405ea4:	d110      	bne.n	405ec8 <_vfiprintf_r+0x154>
  405ea6:	f898 3001 	ldrb.w	r3, [r8, #1]
  405eaa:	2b2a      	cmp	r3, #42	; 0x2a
  405eac:	f108 0101 	add.w	r1, r8, #1
  405eb0:	d137      	bne.n	405f22 <_vfiprintf_r+0x1ae>
  405eb2:	9b03      	ldr	r3, [sp, #12]
  405eb4:	1d1a      	adds	r2, r3, #4
  405eb6:	681b      	ldr	r3, [r3, #0]
  405eb8:	9203      	str	r2, [sp, #12]
  405eba:	2b00      	cmp	r3, #0
  405ebc:	bfb8      	it	lt
  405ebe:	f04f 33ff 	movlt.w	r3, #4294967295
  405ec2:	f108 0802 	add.w	r8, r8, #2
  405ec6:	9305      	str	r3, [sp, #20]
  405ec8:	4d31      	ldr	r5, [pc, #196]	; (405f90 <_vfiprintf_r+0x21c>)
  405eca:	f898 1000 	ldrb.w	r1, [r8]
  405ece:	2203      	movs	r2, #3
  405ed0:	4628      	mov	r0, r5
  405ed2:	f7ff fb4d 	bl	405570 <memchr>
  405ed6:	b140      	cbz	r0, 405eea <_vfiprintf_r+0x176>
  405ed8:	2340      	movs	r3, #64	; 0x40
  405eda:	1b40      	subs	r0, r0, r5
  405edc:	fa03 f000 	lsl.w	r0, r3, r0
  405ee0:	9b04      	ldr	r3, [sp, #16]
  405ee2:	4303      	orrs	r3, r0
  405ee4:	9304      	str	r3, [sp, #16]
  405ee6:	f108 0801 	add.w	r8, r8, #1
  405eea:	f898 1000 	ldrb.w	r1, [r8]
  405eee:	4829      	ldr	r0, [pc, #164]	; (405f94 <_vfiprintf_r+0x220>)
  405ef0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  405ef4:	2206      	movs	r2, #6
  405ef6:	f108 0701 	add.w	r7, r8, #1
  405efa:	f7ff fb39 	bl	405570 <memchr>
  405efe:	2800      	cmp	r0, #0
  405f00:	d034      	beq.n	405f6c <_vfiprintf_r+0x1f8>
  405f02:	4b25      	ldr	r3, [pc, #148]	; (405f98 <_vfiprintf_r+0x224>)
  405f04:	bb03      	cbnz	r3, 405f48 <_vfiprintf_r+0x1d4>
  405f06:	9b03      	ldr	r3, [sp, #12]
  405f08:	3307      	adds	r3, #7
  405f0a:	f023 0307 	bic.w	r3, r3, #7
  405f0e:	3308      	adds	r3, #8
  405f10:	9303      	str	r3, [sp, #12]
  405f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405f14:	444b      	add	r3, r9
  405f16:	9309      	str	r3, [sp, #36]	; 0x24
  405f18:	e74c      	b.n	405db4 <_vfiprintf_r+0x40>
  405f1a:	fb00 3202 	mla	r2, r0, r2, r3
  405f1e:	2101      	movs	r1, #1
  405f20:	e786      	b.n	405e30 <_vfiprintf_r+0xbc>
  405f22:	2300      	movs	r3, #0
  405f24:	9305      	str	r3, [sp, #20]
  405f26:	4618      	mov	r0, r3
  405f28:	250a      	movs	r5, #10
  405f2a:	4688      	mov	r8, r1
  405f2c:	3101      	adds	r1, #1
  405f2e:	f898 2000 	ldrb.w	r2, [r8]
  405f32:	3a30      	subs	r2, #48	; 0x30
  405f34:	2a09      	cmp	r2, #9
  405f36:	d903      	bls.n	405f40 <_vfiprintf_r+0x1cc>
  405f38:	2b00      	cmp	r3, #0
  405f3a:	d0c5      	beq.n	405ec8 <_vfiprintf_r+0x154>
  405f3c:	9005      	str	r0, [sp, #20]
  405f3e:	e7c3      	b.n	405ec8 <_vfiprintf_r+0x154>
  405f40:	fb05 2000 	mla	r0, r5, r0, r2
  405f44:	2301      	movs	r3, #1
  405f46:	e7f0      	b.n	405f2a <_vfiprintf_r+0x1b6>
  405f48:	ab03      	add	r3, sp, #12
  405f4a:	9300      	str	r3, [sp, #0]
  405f4c:	4622      	mov	r2, r4
  405f4e:	4b13      	ldr	r3, [pc, #76]	; (405f9c <_vfiprintf_r+0x228>)
  405f50:	a904      	add	r1, sp, #16
  405f52:	4630      	mov	r0, r6
  405f54:	f7fd fe10 	bl	403b78 <_printf_float>
  405f58:	f1b0 3fff 	cmp.w	r0, #4294967295
  405f5c:	4681      	mov	r9, r0
  405f5e:	d1d8      	bne.n	405f12 <_vfiprintf_r+0x19e>
  405f60:	89a3      	ldrh	r3, [r4, #12]
  405f62:	065b      	lsls	r3, r3, #25
  405f64:	f53f af7d 	bmi.w	405e62 <_vfiprintf_r+0xee>
  405f68:	9809      	ldr	r0, [sp, #36]	; 0x24
  405f6a:	e77c      	b.n	405e66 <_vfiprintf_r+0xf2>
  405f6c:	ab03      	add	r3, sp, #12
  405f6e:	9300      	str	r3, [sp, #0]
  405f70:	4622      	mov	r2, r4
  405f72:	4b0a      	ldr	r3, [pc, #40]	; (405f9c <_vfiprintf_r+0x228>)
  405f74:	a904      	add	r1, sp, #16
  405f76:	4630      	mov	r0, r6
  405f78:	f7fe f8ac 	bl	4040d4 <_printf_i>
  405f7c:	e7ec      	b.n	405f58 <_vfiprintf_r+0x1e4>
  405f7e:	bf00      	nop
  405f80:	00406940 	.word	0x00406940
  405f84:	00406a7c 	.word	0x00406a7c
  405f88:	00406960 	.word	0x00406960
  405f8c:	00406920 	.word	0x00406920
  405f90:	00406a82 	.word	0x00406a82
  405f94:	00406a86 	.word	0x00406a86
  405f98:	00403b79 	.word	0x00403b79
  405f9c:	00405d51 	.word	0x00405d51

00405fa0 <_sbrk_r>:
  405fa0:	b538      	push	{r3, r4, r5, lr}
  405fa2:	4c06      	ldr	r4, [pc, #24]	; (405fbc <_sbrk_r+0x1c>)
  405fa4:	2300      	movs	r3, #0
  405fa6:	4605      	mov	r5, r0
  405fa8:	4608      	mov	r0, r1
  405faa:	6023      	str	r3, [r4, #0]
  405fac:	f7fa ffec 	bl	400f88 <_sbrk>
  405fb0:	1c43      	adds	r3, r0, #1
  405fb2:	d102      	bne.n	405fba <_sbrk_r+0x1a>
  405fb4:	6823      	ldr	r3, [r4, #0]
  405fb6:	b103      	cbz	r3, 405fba <_sbrk_r+0x1a>
  405fb8:	602b      	str	r3, [r5, #0]
  405fba:	bd38      	pop	{r3, r4, r5, pc}
  405fbc:	2040036c 	.word	0x2040036c

00405fc0 <__sread>:
  405fc0:	b510      	push	{r4, lr}
  405fc2:	460c      	mov	r4, r1
  405fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405fc8:	f000 f968 	bl	40629c <_read_r>
  405fcc:	2800      	cmp	r0, #0
  405fce:	bfab      	itete	ge
  405fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  405fd2:	89a3      	ldrhlt	r3, [r4, #12]
  405fd4:	181b      	addge	r3, r3, r0
  405fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  405fda:	bfac      	ite	ge
  405fdc:	6563      	strge	r3, [r4, #84]	; 0x54
  405fde:	81a3      	strhlt	r3, [r4, #12]
  405fe0:	bd10      	pop	{r4, pc}

00405fe2 <__swrite>:
  405fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405fe6:	461f      	mov	r7, r3
  405fe8:	898b      	ldrh	r3, [r1, #12]
  405fea:	05db      	lsls	r3, r3, #23
  405fec:	4605      	mov	r5, r0
  405fee:	460c      	mov	r4, r1
  405ff0:	4616      	mov	r6, r2
  405ff2:	d505      	bpl.n	406000 <__swrite+0x1e>
  405ff4:	2302      	movs	r3, #2
  405ff6:	2200      	movs	r2, #0
  405ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405ffc:	f000 f928 	bl	406250 <_lseek_r>
  406000:	89a3      	ldrh	r3, [r4, #12]
  406002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40600a:	81a3      	strh	r3, [r4, #12]
  40600c:	4632      	mov	r2, r6
  40600e:	463b      	mov	r3, r7
  406010:	4628      	mov	r0, r5
  406012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406016:	f000 b869 	b.w	4060ec <_write_r>

0040601a <__sseek>:
  40601a:	b510      	push	{r4, lr}
  40601c:	460c      	mov	r4, r1
  40601e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406022:	f000 f915 	bl	406250 <_lseek_r>
  406026:	1c43      	adds	r3, r0, #1
  406028:	89a3      	ldrh	r3, [r4, #12]
  40602a:	bf15      	itete	ne
  40602c:	6560      	strne	r0, [r4, #84]	; 0x54
  40602e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406036:	81a3      	strheq	r3, [r4, #12]
  406038:	bf18      	it	ne
  40603a:	81a3      	strhne	r3, [r4, #12]
  40603c:	bd10      	pop	{r4, pc}

0040603e <__sclose>:
  40603e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406042:	f000 b8d3 	b.w	4061ec <_close_r>
	...

00406048 <__swbuf_r>:
  406048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40604a:	460e      	mov	r6, r1
  40604c:	4614      	mov	r4, r2
  40604e:	4605      	mov	r5, r0
  406050:	b118      	cbz	r0, 40605a <__swbuf_r+0x12>
  406052:	6983      	ldr	r3, [r0, #24]
  406054:	b90b      	cbnz	r3, 40605a <__swbuf_r+0x12>
  406056:	f7ff f983 	bl	405360 <__sinit>
  40605a:	4b21      	ldr	r3, [pc, #132]	; (4060e0 <__swbuf_r+0x98>)
  40605c:	429c      	cmp	r4, r3
  40605e:	d12a      	bne.n	4060b6 <__swbuf_r+0x6e>
  406060:	686c      	ldr	r4, [r5, #4]
  406062:	69a3      	ldr	r3, [r4, #24]
  406064:	60a3      	str	r3, [r4, #8]
  406066:	89a3      	ldrh	r3, [r4, #12]
  406068:	071a      	lsls	r2, r3, #28
  40606a:	d52e      	bpl.n	4060ca <__swbuf_r+0x82>
  40606c:	6923      	ldr	r3, [r4, #16]
  40606e:	b363      	cbz	r3, 4060ca <__swbuf_r+0x82>
  406070:	6923      	ldr	r3, [r4, #16]
  406072:	6820      	ldr	r0, [r4, #0]
  406074:	1ac0      	subs	r0, r0, r3
  406076:	6963      	ldr	r3, [r4, #20]
  406078:	b2f6      	uxtb	r6, r6
  40607a:	4298      	cmp	r0, r3
  40607c:	4637      	mov	r7, r6
  40607e:	db04      	blt.n	40608a <__swbuf_r+0x42>
  406080:	4621      	mov	r1, r4
  406082:	4628      	mov	r0, r5
  406084:	f7ff f902 	bl	40528c <_fflush_r>
  406088:	bb28      	cbnz	r0, 4060d6 <__swbuf_r+0x8e>
  40608a:	68a3      	ldr	r3, [r4, #8]
  40608c:	3b01      	subs	r3, #1
  40608e:	60a3      	str	r3, [r4, #8]
  406090:	6823      	ldr	r3, [r4, #0]
  406092:	1c5a      	adds	r2, r3, #1
  406094:	6022      	str	r2, [r4, #0]
  406096:	701e      	strb	r6, [r3, #0]
  406098:	6963      	ldr	r3, [r4, #20]
  40609a:	3001      	adds	r0, #1
  40609c:	4298      	cmp	r0, r3
  40609e:	d004      	beq.n	4060aa <__swbuf_r+0x62>
  4060a0:	89a3      	ldrh	r3, [r4, #12]
  4060a2:	07db      	lsls	r3, r3, #31
  4060a4:	d519      	bpl.n	4060da <__swbuf_r+0x92>
  4060a6:	2e0a      	cmp	r6, #10
  4060a8:	d117      	bne.n	4060da <__swbuf_r+0x92>
  4060aa:	4621      	mov	r1, r4
  4060ac:	4628      	mov	r0, r5
  4060ae:	f7ff f8ed 	bl	40528c <_fflush_r>
  4060b2:	b190      	cbz	r0, 4060da <__swbuf_r+0x92>
  4060b4:	e00f      	b.n	4060d6 <__swbuf_r+0x8e>
  4060b6:	4b0b      	ldr	r3, [pc, #44]	; (4060e4 <__swbuf_r+0x9c>)
  4060b8:	429c      	cmp	r4, r3
  4060ba:	d101      	bne.n	4060c0 <__swbuf_r+0x78>
  4060bc:	68ac      	ldr	r4, [r5, #8]
  4060be:	e7d0      	b.n	406062 <__swbuf_r+0x1a>
  4060c0:	4b09      	ldr	r3, [pc, #36]	; (4060e8 <__swbuf_r+0xa0>)
  4060c2:	429c      	cmp	r4, r3
  4060c4:	bf08      	it	eq
  4060c6:	68ec      	ldreq	r4, [r5, #12]
  4060c8:	e7cb      	b.n	406062 <__swbuf_r+0x1a>
  4060ca:	4621      	mov	r1, r4
  4060cc:	4628      	mov	r0, r5
  4060ce:	f000 f81f 	bl	406110 <__swsetup_r>
  4060d2:	2800      	cmp	r0, #0
  4060d4:	d0cc      	beq.n	406070 <__swbuf_r+0x28>
  4060d6:	f04f 37ff 	mov.w	r7, #4294967295
  4060da:	4638      	mov	r0, r7
  4060dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4060de:	bf00      	nop
  4060e0:	00406940 	.word	0x00406940
  4060e4:	00406960 	.word	0x00406960
  4060e8:	00406920 	.word	0x00406920

004060ec <_write_r>:
  4060ec:	b538      	push	{r3, r4, r5, lr}
  4060ee:	4c07      	ldr	r4, [pc, #28]	; (40610c <_write_r+0x20>)
  4060f0:	4605      	mov	r5, r0
  4060f2:	4608      	mov	r0, r1
  4060f4:	4611      	mov	r1, r2
  4060f6:	2200      	movs	r2, #0
  4060f8:	6022      	str	r2, [r4, #0]
  4060fa:	461a      	mov	r2, r3
  4060fc:	f7fb fdaa 	bl	401c54 <_write>
  406100:	1c43      	adds	r3, r0, #1
  406102:	d102      	bne.n	40610a <_write_r+0x1e>
  406104:	6823      	ldr	r3, [r4, #0]
  406106:	b103      	cbz	r3, 40610a <_write_r+0x1e>
  406108:	602b      	str	r3, [r5, #0]
  40610a:	bd38      	pop	{r3, r4, r5, pc}
  40610c:	2040036c 	.word	0x2040036c

00406110 <__swsetup_r>:
  406110:	4b32      	ldr	r3, [pc, #200]	; (4061dc <__swsetup_r+0xcc>)
  406112:	b570      	push	{r4, r5, r6, lr}
  406114:	681d      	ldr	r5, [r3, #0]
  406116:	4606      	mov	r6, r0
  406118:	460c      	mov	r4, r1
  40611a:	b125      	cbz	r5, 406126 <__swsetup_r+0x16>
  40611c:	69ab      	ldr	r3, [r5, #24]
  40611e:	b913      	cbnz	r3, 406126 <__swsetup_r+0x16>
  406120:	4628      	mov	r0, r5
  406122:	f7ff f91d 	bl	405360 <__sinit>
  406126:	4b2e      	ldr	r3, [pc, #184]	; (4061e0 <__swsetup_r+0xd0>)
  406128:	429c      	cmp	r4, r3
  40612a:	d10f      	bne.n	40614c <__swsetup_r+0x3c>
  40612c:	686c      	ldr	r4, [r5, #4]
  40612e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406132:	b29a      	uxth	r2, r3
  406134:	0715      	lsls	r5, r2, #28
  406136:	d42c      	bmi.n	406192 <__swsetup_r+0x82>
  406138:	06d0      	lsls	r0, r2, #27
  40613a:	d411      	bmi.n	406160 <__swsetup_r+0x50>
  40613c:	2209      	movs	r2, #9
  40613e:	6032      	str	r2, [r6, #0]
  406140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406144:	81a3      	strh	r3, [r4, #12]
  406146:	f04f 30ff 	mov.w	r0, #4294967295
  40614a:	bd70      	pop	{r4, r5, r6, pc}
  40614c:	4b25      	ldr	r3, [pc, #148]	; (4061e4 <__swsetup_r+0xd4>)
  40614e:	429c      	cmp	r4, r3
  406150:	d101      	bne.n	406156 <__swsetup_r+0x46>
  406152:	68ac      	ldr	r4, [r5, #8]
  406154:	e7eb      	b.n	40612e <__swsetup_r+0x1e>
  406156:	4b24      	ldr	r3, [pc, #144]	; (4061e8 <__swsetup_r+0xd8>)
  406158:	429c      	cmp	r4, r3
  40615a:	bf08      	it	eq
  40615c:	68ec      	ldreq	r4, [r5, #12]
  40615e:	e7e6      	b.n	40612e <__swsetup_r+0x1e>
  406160:	0751      	lsls	r1, r2, #29
  406162:	d512      	bpl.n	40618a <__swsetup_r+0x7a>
  406164:	6b61      	ldr	r1, [r4, #52]	; 0x34
  406166:	b141      	cbz	r1, 40617a <__swsetup_r+0x6a>
  406168:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40616c:	4299      	cmp	r1, r3
  40616e:	d002      	beq.n	406176 <__swsetup_r+0x66>
  406170:	4630      	mov	r0, r6
  406172:	f7ff fd2b 	bl	405bcc <_free_r>
  406176:	2300      	movs	r3, #0
  406178:	6363      	str	r3, [r4, #52]	; 0x34
  40617a:	89a3      	ldrh	r3, [r4, #12]
  40617c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  406180:	81a3      	strh	r3, [r4, #12]
  406182:	2300      	movs	r3, #0
  406184:	6063      	str	r3, [r4, #4]
  406186:	6923      	ldr	r3, [r4, #16]
  406188:	6023      	str	r3, [r4, #0]
  40618a:	89a3      	ldrh	r3, [r4, #12]
  40618c:	f043 0308 	orr.w	r3, r3, #8
  406190:	81a3      	strh	r3, [r4, #12]
  406192:	6923      	ldr	r3, [r4, #16]
  406194:	b94b      	cbnz	r3, 4061aa <__swsetup_r+0x9a>
  406196:	89a3      	ldrh	r3, [r4, #12]
  406198:	f403 7320 	and.w	r3, r3, #640	; 0x280
  40619c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4061a0:	d003      	beq.n	4061aa <__swsetup_r+0x9a>
  4061a2:	4621      	mov	r1, r4
  4061a4:	4630      	mov	r0, r6
  4061a6:	f7ff f997 	bl	4054d8 <__smakebuf_r>
  4061aa:	89a2      	ldrh	r2, [r4, #12]
  4061ac:	f012 0301 	ands.w	r3, r2, #1
  4061b0:	d00c      	beq.n	4061cc <__swsetup_r+0xbc>
  4061b2:	2300      	movs	r3, #0
  4061b4:	60a3      	str	r3, [r4, #8]
  4061b6:	6963      	ldr	r3, [r4, #20]
  4061b8:	425b      	negs	r3, r3
  4061ba:	61a3      	str	r3, [r4, #24]
  4061bc:	6923      	ldr	r3, [r4, #16]
  4061be:	b953      	cbnz	r3, 4061d6 <__swsetup_r+0xc6>
  4061c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4061c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  4061c8:	d1ba      	bne.n	406140 <__swsetup_r+0x30>
  4061ca:	bd70      	pop	{r4, r5, r6, pc}
  4061cc:	0792      	lsls	r2, r2, #30
  4061ce:	bf58      	it	pl
  4061d0:	6963      	ldrpl	r3, [r4, #20]
  4061d2:	60a3      	str	r3, [r4, #8]
  4061d4:	e7f2      	b.n	4061bc <__swsetup_r+0xac>
  4061d6:	2000      	movs	r0, #0
  4061d8:	e7f7      	b.n	4061ca <__swsetup_r+0xba>
  4061da:	bf00      	nop
  4061dc:	20400048 	.word	0x20400048
  4061e0:	00406940 	.word	0x00406940
  4061e4:	00406960 	.word	0x00406960
  4061e8:	00406920 	.word	0x00406920

004061ec <_close_r>:
  4061ec:	b538      	push	{r3, r4, r5, lr}
  4061ee:	4c06      	ldr	r4, [pc, #24]	; (406208 <_close_r+0x1c>)
  4061f0:	2300      	movs	r3, #0
  4061f2:	4605      	mov	r5, r0
  4061f4:	4608      	mov	r0, r1
  4061f6:	6023      	str	r3, [r4, #0]
  4061f8:	f7fa fed8 	bl	400fac <_close>
  4061fc:	1c43      	adds	r3, r0, #1
  4061fe:	d102      	bne.n	406206 <_close_r+0x1a>
  406200:	6823      	ldr	r3, [r4, #0]
  406202:	b103      	cbz	r3, 406206 <_close_r+0x1a>
  406204:	602b      	str	r3, [r5, #0]
  406206:	bd38      	pop	{r3, r4, r5, pc}
  406208:	2040036c 	.word	0x2040036c

0040620c <_fstat_r>:
  40620c:	b538      	push	{r3, r4, r5, lr}
  40620e:	4c07      	ldr	r4, [pc, #28]	; (40622c <_fstat_r+0x20>)
  406210:	2300      	movs	r3, #0
  406212:	4605      	mov	r5, r0
  406214:	4608      	mov	r0, r1
  406216:	4611      	mov	r1, r2
  406218:	6023      	str	r3, [r4, #0]
  40621a:	f7fa feca 	bl	400fb2 <_fstat>
  40621e:	1c43      	adds	r3, r0, #1
  406220:	d102      	bne.n	406228 <_fstat_r+0x1c>
  406222:	6823      	ldr	r3, [r4, #0]
  406224:	b103      	cbz	r3, 406228 <_fstat_r+0x1c>
  406226:	602b      	str	r3, [r5, #0]
  406228:	bd38      	pop	{r3, r4, r5, pc}
  40622a:	bf00      	nop
  40622c:	2040036c 	.word	0x2040036c

00406230 <_isatty_r>:
  406230:	b538      	push	{r3, r4, r5, lr}
  406232:	4c06      	ldr	r4, [pc, #24]	; (40624c <_isatty_r+0x1c>)
  406234:	2300      	movs	r3, #0
  406236:	4605      	mov	r5, r0
  406238:	4608      	mov	r0, r1
  40623a:	6023      	str	r3, [r4, #0]
  40623c:	f7fa febe 	bl	400fbc <_isatty>
  406240:	1c43      	adds	r3, r0, #1
  406242:	d102      	bne.n	40624a <_isatty_r+0x1a>
  406244:	6823      	ldr	r3, [r4, #0]
  406246:	b103      	cbz	r3, 40624a <_isatty_r+0x1a>
  406248:	602b      	str	r3, [r5, #0]
  40624a:	bd38      	pop	{r3, r4, r5, pc}
  40624c:	2040036c 	.word	0x2040036c

00406250 <_lseek_r>:
  406250:	b538      	push	{r3, r4, r5, lr}
  406252:	4c07      	ldr	r4, [pc, #28]	; (406270 <_lseek_r+0x20>)
  406254:	4605      	mov	r5, r0
  406256:	4608      	mov	r0, r1
  406258:	4611      	mov	r1, r2
  40625a:	2200      	movs	r2, #0
  40625c:	6022      	str	r2, [r4, #0]
  40625e:	461a      	mov	r2, r3
  406260:	f7fa feae 	bl	400fc0 <_lseek>
  406264:	1c43      	adds	r3, r0, #1
  406266:	d102      	bne.n	40626e <_lseek_r+0x1e>
  406268:	6823      	ldr	r3, [r4, #0]
  40626a:	b103      	cbz	r3, 40626e <_lseek_r+0x1e>
  40626c:	602b      	str	r3, [r5, #0]
  40626e:	bd38      	pop	{r3, r4, r5, pc}
  406270:	2040036c 	.word	0x2040036c

00406274 <__ascii_mbtowc>:
  406274:	b082      	sub	sp, #8
  406276:	b901      	cbnz	r1, 40627a <__ascii_mbtowc+0x6>
  406278:	a901      	add	r1, sp, #4
  40627a:	b142      	cbz	r2, 40628e <__ascii_mbtowc+0x1a>
  40627c:	b14b      	cbz	r3, 406292 <__ascii_mbtowc+0x1e>
  40627e:	7813      	ldrb	r3, [r2, #0]
  406280:	600b      	str	r3, [r1, #0]
  406282:	7812      	ldrb	r2, [r2, #0]
  406284:	1c10      	adds	r0, r2, #0
  406286:	bf18      	it	ne
  406288:	2001      	movne	r0, #1
  40628a:	b002      	add	sp, #8
  40628c:	4770      	bx	lr
  40628e:	4610      	mov	r0, r2
  406290:	e7fb      	b.n	40628a <__ascii_mbtowc+0x16>
  406292:	f06f 0001 	mvn.w	r0, #1
  406296:	e7f8      	b.n	40628a <__ascii_mbtowc+0x16>

00406298 <__malloc_lock>:
  406298:	4770      	bx	lr

0040629a <__malloc_unlock>:
  40629a:	4770      	bx	lr

0040629c <_read_r>:
  40629c:	b538      	push	{r3, r4, r5, lr}
  40629e:	4c07      	ldr	r4, [pc, #28]	; (4062bc <_read_r+0x20>)
  4062a0:	4605      	mov	r5, r0
  4062a2:	4608      	mov	r0, r1
  4062a4:	4611      	mov	r1, r2
  4062a6:	2200      	movs	r2, #0
  4062a8:	6022      	str	r2, [r4, #0]
  4062aa:	461a      	mov	r2, r3
  4062ac:	f7fb fcc0 	bl	401c30 <_read>
  4062b0:	1c43      	adds	r3, r0, #1
  4062b2:	d102      	bne.n	4062ba <_read_r+0x1e>
  4062b4:	6823      	ldr	r3, [r4, #0]
  4062b6:	b103      	cbz	r3, 4062ba <_read_r+0x1e>
  4062b8:	602b      	str	r3, [r5, #0]
  4062ba:	bd38      	pop	{r3, r4, r5, pc}
  4062bc:	2040036c 	.word	0x2040036c

004062c0 <__ascii_wctomb>:
  4062c0:	b149      	cbz	r1, 4062d6 <__ascii_wctomb+0x16>
  4062c2:	2aff      	cmp	r2, #255	; 0xff
  4062c4:	bf85      	ittet	hi
  4062c6:	238a      	movhi	r3, #138	; 0x8a
  4062c8:	6003      	strhi	r3, [r0, #0]
  4062ca:	700a      	strbls	r2, [r1, #0]
  4062cc:	f04f 30ff 	movhi.w	r0, #4294967295
  4062d0:	bf98      	it	ls
  4062d2:	2001      	movls	r0, #1
  4062d4:	4770      	bx	lr
  4062d6:	4608      	mov	r0, r1
  4062d8:	4770      	bx	lr
	...

004062dc <__aeabi_dcmpun>:
  4062dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4062e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4062e4:	d102      	bne.n	4062ec <__aeabi_dcmpun+0x10>
  4062e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4062ea:	d10a      	bne.n	406302 <__aeabi_dcmpun+0x26>
  4062ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4062f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4062f4:	d102      	bne.n	4062fc <__aeabi_dcmpun+0x20>
  4062f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4062fa:	d102      	bne.n	406302 <__aeabi_dcmpun+0x26>
  4062fc:	f04f 0000 	mov.w	r0, #0
  406300:	4770      	bx	lr
  406302:	f04f 0001 	mov.w	r0, #1
  406306:	4770      	bx	lr
  406308:	4441200a 	.word	0x4441200a
  40630c:	65542043 	.word	0x65542043
  406310:	7265706d 	.word	0x7265706d
  406314:	72757461 	.word	0x72757461
  406318:	65542065 	.word	0x65542065
  40631c:	6e697473 	.word	0x6e697473
  406320:	2d2d2067 	.word	0x2d2d2067
  406324:	2d2d2d2d 	.word	0x2d2d2d2d
  406328:	2d2d2d2d 	.word	0x2d2d2d2d
  40632c:	2d2d2d2d 	.word	0x2d2d2d2d
  406330:	0a2d2d2d 	.word	0x0a2d2d2d
  406334:	00000000 	.word	0x00000000
  406338:	20776152 	.word	0x20776152
  40633c:	61746144 	.word	0x61746144
  406340:	00000a20 	.word	0x00000a20
  406344:	706d6554 	.word	0x706d6554
  406348:	203d2031 	.word	0x203d2031
  40634c:	09206925 	.word	0x09206925
  406350:	65542009 	.word	0x65542009
  406354:	2032706d 	.word	0x2032706d
  406358:	6925203d 	.word	0x6925203d
  40635c:	20090920 	.word	0x20090920
  406360:	706d6554 	.word	0x706d6554
  406364:	203d2033 	.word	0x203d2033
  406368:	0a206925 	.word	0x0a206925
  40636c:	00000000 	.word	0x00000000
  406370:	706d6554 	.word	0x706d6554
  406374:	203d2034 	.word	0x203d2034
  406378:	09206925 	.word	0x09206925
  40637c:	65542009 	.word	0x65542009
  406380:	2035706d 	.word	0x2035706d
  406384:	6925203d 	.word	0x6925203d
  406388:	20090920 	.word	0x20090920
  40638c:	706d6554 	.word	0x706d6554
  406390:	203d2036 	.word	0x203d2036
  406394:	0a206925 	.word	0x0a206925
  406398:	00000000 	.word	0x00000000
  40639c:	706d6554 	.word	0x706d6554
  4063a0:	746f4d20 	.word	0x746f4d20
  4063a4:	3d20726f 	.word	0x3d20726f
  4063a8:	20692520 	.word	0x20692520
  4063ac:	00000a20 	.word	0x00000a20
  4063b0:	7543200a 	.word	0x7543200a
  4063b4:	6e657272 	.word	0x6e657272
  4063b8:	6e612074 	.word	0x6e612074
  4063bc:	6f562064 	.word	0x6f562064
  4063c0:	6761746c 	.word	0x6761746c
  4063c4:	65542065 	.word	0x65542065
  4063c8:	6e697473 	.word	0x6e697473
  4063cc:	2d2d2067 	.word	0x2d2d2067
  4063d0:	2d2d2d2d 	.word	0x2d2d2d2d
  4063d4:	2d2d2d2d 	.word	0x2d2d2d2d
  4063d8:	2d2d2d2d 	.word	0x2d2d2d2d
  4063dc:	0a2d2d2d 	.word	0x0a2d2d2d
  4063e0:	00000000 	.word	0x00000000
  4063e4:	72727543 	.word	0x72727543
  4063e8:	203d2041 	.word	0x203d2041
  4063ec:	09206925 	.word	0x09206925
  4063f0:	75432009 	.word	0x75432009
  4063f4:	20427272 	.word	0x20427272
  4063f8:	6925203d 	.word	0x6925203d
  4063fc:	20090920 	.word	0x20090920
  406400:	72727543 	.word	0x72727543
  406404:	203d2043 	.word	0x203d2043
  406408:	0a206925 	.word	0x0a206925
  40640c:	00000000 	.word	0x00000000
  406410:	70707553 	.word	0x70707553
  406414:	5620796c 	.word	0x5620796c
  406418:	61746c6f 	.word	0x61746c6f
  40641c:	3d206567 	.word	0x3d206567
  406420:	20692520 	.word	0x20692520
  406424:	00000a20 	.word	0x00000a20
  406428:	682f2e2e 	.word	0x682f2e2e
  40642c:	732f6c61 	.word	0x732f6c61
  406430:	682f6372 	.word	0x682f6372
  406434:	615f6c61 	.word	0x615f6c61
  406438:	735f6364 	.word	0x735f6364
  40643c:	2e636e79 	.word	0x2e636e79
  406440:	00000063 	.word	0x00000063
  406444:	682f2e2e 	.word	0x682f2e2e
  406448:	732f6c61 	.word	0x732f6c61
  40644c:	682f6372 	.word	0x682f6372
  406450:	695f6c61 	.word	0x695f6c61
  406454:	00632e6f 	.word	0x00632e6f
  406458:	682f2e2e 	.word	0x682f2e2e
  40645c:	732f6c61 	.word	0x732f6c61
  406460:	682f6372 	.word	0x682f6372
  406464:	705f6c61 	.word	0x705f6c61
  406468:	632e6d77 	.word	0x632e6d77
  40646c:	00000000 	.word	0x00000000
  406470:	682f2e2e 	.word	0x682f2e2e
  406474:	732f6c61 	.word	0x732f6c61
  406478:	682f6372 	.word	0x682f6372
  40647c:	745f6c61 	.word	0x745f6c61
  406480:	72656d69 	.word	0x72656d69
  406484:	0000632e 	.word	0x0000632e
  406488:	682f2e2e 	.word	0x682f2e2e
  40648c:	732f6c61 	.word	0x732f6c61
  406490:	682f6372 	.word	0x682f6372
  406494:	755f6c61 	.word	0x755f6c61
  406498:	74726173 	.word	0x74726173
  40649c:	6e79735f 	.word	0x6e79735f
  4064a0:	00632e63 	.word	0x00632e63
  4064a4:	682f2e2e 	.word	0x682f2e2e
  4064a8:	752f6c61 	.word	0x752f6c61
  4064ac:	736c6974 	.word	0x736c6974
  4064b0:	6372732f 	.word	0x6372732f
  4064b4:	6974752f 	.word	0x6974752f
  4064b8:	6c5f736c 	.word	0x6c5f736c
  4064bc:	2e747369 	.word	0x2e747369
  4064c0:	00000063 	.word	0x00000063

004064c4 <_afecs>:
  4064c4:	00000000 2f843100 03000000 ffffffff     .....1./........
  4064d4:	0000ffff 00000000 00000000 00000000     ................
  4064e4:	0000010c 00000000 00000000 00000000     ................
  4064f4:	00000000 00000200 00000200 00000200     ................
  406504:	00000200 00000200 00000200 00000200     ................
  406514:	00000200 00000200 00000200 00000200     ................
  406524:	00000200 00000001 2f843100 03000000     .........1./....
  406534:	ffffffff 0000ffff 00000000 00000000     ................
  406544:	00000000 0000010c 00000000 00000000     ................
	...
  40655c:	00000200 00000200 00000200 00000200     ................
  40656c:	00000200 00000200 00000200 00000200     ................
  40657c:	00000200 00000200 00000200 00000200     ................
  40658c:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  40659c:	63656661 0000632e                       afec.c..

004065a4 <_ext_irq>:
  4065a4:	00000000 00000024 00000000 00000000     ....$...........
	...
  4065c0:	00000003 00080000 00000000 00000000     ................
	...

004065dc <_pio_irq_n>:
  4065dc:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  4065ec:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  4065fc:	00000000                                ....

00406600 <_pwms>:
  406600:	40020000 0000001f 00010019 00000001     ...@............
  406610:	00000001 000000ff 00000000 00000004     ................
	...
  40662c:	00000002 00406688 00000000 204002a0     .....f@.......@ 
  40663c:	4005c000 0000003c 00010019 00000001     ...@<...........
  40664c:	00000001 000000ff 00000000 00000004     ................
	...
  406668:	00000001 00406678 00000000 20400294     ....xf@.......@ 

00406678 <_ch_cfg1>:
  406678:	00000000 0000010b 000003e8 00000200     ................

00406688 <_ch_cfg0>:
  406688:	00000000 0000010b 000003e8 00000200     ................
  406698:	00000002 0000010b 000003e8 00000200     ................
  4066a8:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  4066b8:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  4066c8:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

004066d4 <_usarts>:
  4066d4:	00000001 001008c0 000100f4 682f2e2e     ............../h
  4066e4:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  4066f4:	632e7472 00000000                       rt.c....

004066fc <npio2_hw>:
  4066fc:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  40670c:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  40671c:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  40672c:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  40673c:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  40674c:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  40675c:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  40676c:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

0040677c <two_over_pi>:
  40677c:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  40678c:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  40679c:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  4067ac:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  4067bc:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  4067cc:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  4067dc:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  4067ec:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  4067fc:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  40680c:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  40681c:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  40682c:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  40683c:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  40684c:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  40685c:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  40686c:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  40687c:	0060e27b 00c08c6b 00000000              {.`.k.......

00406888 <PIo2>:
  406888:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  406898:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  4068a8:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  4068b8:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

004068c8 <init_jk>:
  4068c8:	00000002 00000003 00000004 00000006     ................

004068d8 <_global_impure_ptr>:
  4068d8:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  4068e8:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  4068f8:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  406908:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  406918:	4e614e00 00000000                       .NaN....

00406920 <__sf_fake_stderr>:
	...

00406940 <__sf_fake_stdin>:
	...

00406960 <__sf_fake_stdout>:
	...

00406980 <__mprec_bigtens>:
  406980:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  406990:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4069a0:	7f73bf3c 75154fdd                       <.s..O.u

004069a8 <__mprec_tens>:
  4069a8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4069b8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4069c8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4069d8:	00000000 412e8480 00000000 416312d0     .......A......cA
  4069e8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4069f8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406a08:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406a18:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  406a28:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406a38:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  406a48:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406a58:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406a68:	79d99db4 44ea7843                       ...yCx.D

00406a70 <p05.6047>:
  406a70:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  406a80:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  406a90:	5849534f 00002e00                                OSIX...

00406a97 <_ctype_>:
  406a97:	20202000 20202020 28282020 20282828     .         ((((( 
  406aa7:	20202020 20202020 20202020 20202020                     
  406ab7:	10108820 10101010 10101010 10101010      ...............
  406ac7:	04040410 04040404 10040404 10101010     ................
  406ad7:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406ae7:	01010101 01010101 01010101 10101010     ................
  406af7:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406b07:	02020202 02020202 02020202 10101010     ................
  406b17:	00000020 00000000 00000000 00000000      ...............
	...

00406b98 <_init>:
  406b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406b9a:	bf00      	nop
  406b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406b9e:	bc08      	pop	{r3}
  406ba0:	469e      	mov	lr, r3
  406ba2:	4770      	bx	lr

00406ba4 <__init_array_start>:
  406ba4:	0040018d 	.word	0x0040018d

00406ba8 <_fini>:
  406ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406baa:	bf00      	nop
  406bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406bae:	bc08      	pop	{r3}
  406bb0:	469e      	mov	lr, r3
  406bb2:	4770      	bx	lr

00406bb4 <__fini_array_start>:
  406bb4:	00400169 	.word	0x00400169
