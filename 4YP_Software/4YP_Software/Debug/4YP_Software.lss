
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006380  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  00406380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005a4  20400218  00406598  00020218  2**2
                  ALLOC
  3 .heap         00000204  204007bc  00406b3c  00020218  2**0
                  ALLOC
  4 .stack        00000400  204009c0  00406d40  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002be38  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000582d  00000000  00000000  0004c0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cbe7  00000000  00000000  00051904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e68  00000000  00000000  0005e4eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d20  00000000  00000000  0005f353  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00049008  00000000  00000000  00060073  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00020e28  00000000  00000000  000a907b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00158fe3  00000000  00000000  000c9ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003100  00000000  00000000  00222e88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 0d 40 20 b5 09 40 00 b1 09 40 00 b1 09 40 00     ..@ ..@...@...@.
  400010:	b1 09 40 00 b1 09 40 00 b1 09 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b1 09 40 00 b1 09 40 00 00 00 00 00 b1 09 40 00     ..@...@.......@.
  40003c:	b1 09 40 00 b1 09 40 00 b1 09 40 00 b1 09 40 00     ..@...@...@...@.
  40004c:	b1 09 40 00 b1 09 40 00 b1 09 40 00 b1 09 40 00     ..@...@...@...@.
  40005c:	b1 09 40 00 b1 09 40 00 00 00 00 00 45 1e 40 00     ..@...@.....E.@.
  40006c:	51 1e 40 00 b1 09 40 00 b1 09 40 00 b1 09 40 00     Q.@...@...@...@.
  40007c:	b1 09 40 00 39 1e 40 00 b1 09 40 00 b1 09 40 00     ..@.9.@...@...@.
  40008c:	b1 09 40 00 b1 09 40 00 b1 09 40 00 b1 09 40 00     ..@...@...@...@.
  40009c:	75 24 40 00 b1 09 40 00 b1 09 40 00 b1 09 40 00     u$@...@...@...@.
  4000ac:	b1 09 40 00 b1 09 40 00 01 1a 40 00 b1 09 40 00     ..@...@...@...@.
  4000bc:	05 20 40 00 b1 09 40 00 b1 09 40 00 b1 09 40 00     . @...@...@...@.
  4000cc:	b1 09 40 00 b1 09 40 00 e9 1b 40 00 b1 09 40 00     ..@...@...@...@.
  4000dc:	b1 09 40 00 15 1a 40 00 b1 09 40 00 b1 09 40 00     ..@...@...@...@.
  4000ec:	b1 09 40 00 b1 09 40 00 b1 09 40 00 b1 09 40 00     ..@...@...@...@.
  4000fc:	b1 09 40 00 b1 09 40 00 b1 09 40 00 89 24 40 00     ..@...@...@..$@.
  40010c:	b1 09 40 00 b1 09 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b1 09 40 00 b1 09 40 00 e5 27 40 00     ......@...@..'@.
  40012c:	b1 09 40 00 19 20 40 00 b1 09 40 00 b1 09 40 00     ..@.. @...@...@.
  40013c:	b1 09 40 00 b1 09 40 00 b1 09 40 00 b1 09 40 00     ..@...@...@...@.
  40014c:	b1 09 40 00 b1 09 40 00 b1 09 40 00 b1 09 40 00     ..@...@...@...@.
  40015c:	b1 09 40 00 b1 09 40 00 b1 09 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	00406380 	.word	0x00406380

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406380 	.word	0x00406380
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	00406380 	.word	0x00406380
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400e8d 	.word	0x00400e8d
  4001e4:	004029b1 	.word	0x004029b1

004001e8 <encoder_get_counter>:
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV(mask)) >> TC_CV_CV_Pos;
}

static inline hri_tc_cv_reg_t hri_tc_read_CV_CV_bf(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV_Msk) >> TC_CV_CV_Pos;
  4001e8:	4a06      	ldr	r2, [pc, #24]	; (400204 <encoder_get_counter+0x1c>)
  4001ea:	6913      	ldr	r3, [r2, #16]
  4001ec:	6d10      	ldr	r0, [r2, #80]	; 0x50
	//if starting offset is 0 (which is the case before it was recorded) then it returns the actual counter
	
	
	//get A (first line) and B (second line) counters
	//note that rising and falling edges could be the other way round. It doesn't matter for the current implementation
	int encoder_counter_no_offset =	  ( int) hri_tc_read_CV_CV_bf(TC0,0) + ( int) hri_tc_read_CV_CV_bf(TC0,1) \
  4001ee:	4403      	add	r3, r0
  4001f0:	f502 2290 	add.w	r2, r2, #294912	; 0x48000
  4001f4:	6910      	ldr	r0, [r2, #16]
									+ ( int) hri_tc_read_CV_CV_bf(TC3,0) + ( int) hri_tc_read_CV_CV_bf(TC3,1) \
  4001f6:	4403      	add	r3, r0
  4001f8:	6d10      	ldr	r0, [r2, #80]	; 0x50
  4001fa:	4403      	add	r3, r0
									- encoder_inital_offset;														//get the number of steps normalised to the starting offset
  4001fc:	4a02      	ldr	r2, [pc, #8]	; (400208 <encoder_get_counter+0x20>)
  4001fe:	6810      	ldr	r0, [r2, #0]
								
	return encoder_counter_no_offset;
}
  400200:	1a18      	subs	r0, r3, r0
  400202:	4770      	bx	lr
  400204:	4000c000 	.word	0x4000c000
  400208:	20400590 	.word	0x20400590

0040020c <Encoder_Z_Interrupt>:
static void Encoder_Z_Interrupt (void){
  40020c:	b508      	push	{r3, lr}
	int encoder_counter_no_offset = encoder_get_counter();
  40020e:	4b05      	ldr	r3, [pc, #20]	; (400224 <Encoder_Z_Interrupt+0x18>)
  400210:	4798      	blx	r3
	if(encoder_num_Z_interrupts == 0){
  400212:	4b05      	ldr	r3, [pc, #20]	; (400228 <Encoder_Z_Interrupt+0x1c>)
  400214:	681b      	ldr	r3, [r3, #0]
  400216:	b90b      	cbnz	r3, 40021c <Encoder_Z_Interrupt+0x10>
		encoder_inital_offset = encoder_counter_no_offset;
  400218:	4a04      	ldr	r2, [pc, #16]	; (40022c <Encoder_Z_Interrupt+0x20>)
  40021a:	6010      	str	r0, [r2, #0]
	encoder_num_Z_interrupts ++;
  40021c:	3301      	adds	r3, #1
  40021e:	4a02      	ldr	r2, [pc, #8]	; (400228 <Encoder_Z_Interrupt+0x1c>)
  400220:	6013      	str	r3, [r2, #0]
  400222:	bd08      	pop	{r3, pc}
  400224:	004001e9 	.word	0x004001e9
  400228:	2040058c 	.word	0x2040058c
  40022c:	20400590 	.word	0x20400590

00400230 <encoder_init>:
void encoder_init(void){
  400230:	b508      	push	{r3, lr}
	ext_irq_register(PIO_PB13_IDX,Encoder_Z_Interrupt);
  400232:	4942      	ldr	r1, [pc, #264]	; (40033c <encoder_init+0x10c>)
  400234:	202d      	movs	r0, #45	; 0x2d
  400236:	4b42      	ldr	r3, [pc, #264]	; (400340 <encoder_init+0x110>)
  400238:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40023a:	4b42      	ldr	r3, [pc, #264]	; (400344 <encoder_init+0x114>)
  40023c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400240:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400242:	2240      	movs	r2, #64	; 0x40
  400244:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400248:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40024c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400250:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400254:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400258:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40025c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400264:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400268:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40026c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400278:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40027c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400280:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400284:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  40028c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400290:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400294:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400298:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40029c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4002a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002a4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4002b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4002b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002b8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002cc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4002d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002e0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002e4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4002ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002f4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002f8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400304:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400308:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40030c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400310:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400318:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40031c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400320:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400324:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40032c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400330:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400334:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400338:	bd08      	pop	{r3, pc}
  40033a:	bf00      	nop
  40033c:	0040020d 	.word	0x0040020d
  400340:	00401285 	.word	0x00401285
  400344:	e000e100 	.word	0xe000e100

00400348 <Position_2_Interrupt>:
static void Position_1_Interrupt (void){
	Position_General_Interrupt();
	printf("POS 1\n");
}

static void Position_2_Interrupt (void){
  400348:	b538      	push	{r3, r4, r5, lr}
	has_triggered = true;
  40034a:	2201      	movs	r2, #1
  40034c:	4b14      	ldr	r3, [pc, #80]	; (4003a0 <Position_2_Interrupt+0x58>)
  40034e:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400350:	4b14      	ldr	r3, [pc, #80]	; (4003a4 <Position_2_Interrupt+0x5c>)
  400352:	6898      	ldr	r0, [r3, #8]
	int delta = current_systick - pos_sens_last_SysTick_count;
  400354:	4b14      	ldr	r3, [pc, #80]	; (4003a8 <Position_2_Interrupt+0x60>)
  400356:	681b      	ldr	r3, [r3, #0]
  400358:	1ac3      	subs	r3, r0, r3
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  40035a:	2b00      	cmp	r3, #0
  40035c:	dd13      	ble.n	400386 <Position_2_Interrupt+0x3e>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40035e:	2201      	movs	r2, #1
  400360:	2a00      	cmp	r2, #0
  400362:	dc13      	bgt.n	40038c <Position_2_Interrupt+0x44>
	pos_sens_deltas [0] = (float) delta / 300;
  400364:	ee07 3a90 	vmov	s15, r3
  400368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40036c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 4003ac <Position_2_Interrupt+0x64>
  400370:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400374:	4b0e      	ldr	r3, [pc, #56]	; (4003b0 <Position_2_Interrupt+0x68>)
  400376:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  40037a:	4b0b      	ldr	r3, [pc, #44]	; (4003a8 <Position_2_Interrupt+0x60>)
  40037c:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	printf("POS 2\n");
  40037e:	480d      	ldr	r0, [pc, #52]	; (4003b4 <Position_2_Interrupt+0x6c>)
  400380:	4b0d      	ldr	r3, [pc, #52]	; (4003b8 <Position_2_Interrupt+0x70>)
  400382:	4798      	blx	r3
  400384:	bd38      	pop	{r3, r4, r5, pc}
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  400386:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
  40038a:	e7e8      	b.n	40035e <Position_2_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  40038c:	1e54      	subs	r4, r2, #1
  40038e:	4908      	ldr	r1, [pc, #32]	; (4003b0 <Position_2_Interrupt+0x68>)
  400390:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400394:	682d      	ldr	r5, [r5, #0]
  400396:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40039a:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40039c:	4622      	mov	r2, r4
  40039e:	e7df      	b.n	400360 <Position_2_Interrupt+0x18>
  4003a0:	20400584 	.word	0x20400584
  4003a4:	e000e010 	.word	0xe000e010
  4003a8:	204005a0 	.word	0x204005a0
  4003ac:	43960000 	.word	0x43960000
  4003b0:	20400598 	.word	0x20400598
  4003b4:	00405be8 	.word	0x00405be8
  4003b8:	00403bf1 	.word	0x00403bf1

004003bc <Position_3_Interrupt>:
}

static void Position_3_Interrupt (void){
  4003bc:	b538      	push	{r3, r4, r5, lr}
	has_triggered = true;
  4003be:	2201      	movs	r2, #1
  4003c0:	4b14      	ldr	r3, [pc, #80]	; (400414 <Position_3_Interrupt+0x58>)
  4003c2:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  4003c4:	4b14      	ldr	r3, [pc, #80]	; (400418 <Position_3_Interrupt+0x5c>)
  4003c6:	6898      	ldr	r0, [r3, #8]
	int delta = current_systick - pos_sens_last_SysTick_count;
  4003c8:	4b14      	ldr	r3, [pc, #80]	; (40041c <Position_3_Interrupt+0x60>)
  4003ca:	681b      	ldr	r3, [r3, #0]
  4003cc:	1ac3      	subs	r3, r0, r3
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  4003ce:	2b00      	cmp	r3, #0
  4003d0:	dd13      	ble.n	4003fa <Position_3_Interrupt+0x3e>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4003d2:	2201      	movs	r2, #1
  4003d4:	2a00      	cmp	r2, #0
  4003d6:	dc13      	bgt.n	400400 <Position_3_Interrupt+0x44>
	pos_sens_deltas [0] = (float) delta / 300;
  4003d8:	ee07 3a90 	vmov	s15, r3
  4003dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4003e0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 400420 <Position_3_Interrupt+0x64>
  4003e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4003e8:	4b0e      	ldr	r3, [pc, #56]	; (400424 <Position_3_Interrupt+0x68>)
  4003ea:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  4003ee:	4b0b      	ldr	r3, [pc, #44]	; (40041c <Position_3_Interrupt+0x60>)
  4003f0:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	printf("POS 3\n");
  4003f2:	480d      	ldr	r0, [pc, #52]	; (400428 <Position_3_Interrupt+0x6c>)
  4003f4:	4b0d      	ldr	r3, [pc, #52]	; (40042c <Position_3_Interrupt+0x70>)
  4003f6:	4798      	blx	r3
  4003f8:	bd38      	pop	{r3, r4, r5, pc}
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  4003fa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
  4003fe:	e7e8      	b.n	4003d2 <Position_3_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400400:	1e54      	subs	r4, r2, #1
  400402:	4908      	ldr	r1, [pc, #32]	; (400424 <Position_3_Interrupt+0x68>)
  400404:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400408:	682d      	ldr	r5, [r5, #0]
  40040a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40040e:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400410:	4622      	mov	r2, r4
  400412:	e7df      	b.n	4003d4 <Position_3_Interrupt+0x18>
  400414:	20400584 	.word	0x20400584
  400418:	e000e010 	.word	0xe000e010
  40041c:	204005a0 	.word	0x204005a0
  400420:	43960000 	.word	0x43960000
  400424:	20400598 	.word	0x20400598
  400428:	00405bf0 	.word	0x00405bf0
  40042c:	00403bf1 	.word	0x00403bf1

00400430 <Position_1_Interrupt>:
static void Position_1_Interrupt (void){
  400430:	b538      	push	{r3, r4, r5, lr}
	has_triggered = true;
  400432:	2201      	movs	r2, #1
  400434:	4b14      	ldr	r3, [pc, #80]	; (400488 <Position_1_Interrupt+0x58>)
  400436:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400438:	4b14      	ldr	r3, [pc, #80]	; (40048c <Position_1_Interrupt+0x5c>)
  40043a:	6898      	ldr	r0, [r3, #8]
	int delta = current_systick - pos_sens_last_SysTick_count;
  40043c:	4b14      	ldr	r3, [pc, #80]	; (400490 <Position_1_Interrupt+0x60>)
  40043e:	681b      	ldr	r3, [r3, #0]
  400440:	1ac3      	subs	r3, r0, r3
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  400442:	2b00      	cmp	r3, #0
  400444:	dd13      	ble.n	40046e <Position_1_Interrupt+0x3e>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400446:	2201      	movs	r2, #1
  400448:	2a00      	cmp	r2, #0
  40044a:	dc13      	bgt.n	400474 <Position_1_Interrupt+0x44>
	pos_sens_deltas [0] = (float) delta / 300;
  40044c:	ee07 3a90 	vmov	s15, r3
  400450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400454:	eddf 6a0f 	vldr	s13, [pc, #60]	; 400494 <Position_1_Interrupt+0x64>
  400458:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  40045c:	4b0e      	ldr	r3, [pc, #56]	; (400498 <Position_1_Interrupt+0x68>)
  40045e:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  400462:	4b0b      	ldr	r3, [pc, #44]	; (400490 <Position_1_Interrupt+0x60>)
  400464:	6018      	str	r0, [r3, #0]
	printf("POS 1\n");
  400466:	480d      	ldr	r0, [pc, #52]	; (40049c <Position_1_Interrupt+0x6c>)
  400468:	4b0d      	ldr	r3, [pc, #52]	; (4004a0 <Position_1_Interrupt+0x70>)
  40046a:	4798      	blx	r3
  40046c:	bd38      	pop	{r3, r4, r5, pc}
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  40046e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
  400472:	e7e8      	b.n	400446 <Position_1_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400474:	1e54      	subs	r4, r2, #1
  400476:	4908      	ldr	r1, [pc, #32]	; (400498 <Position_1_Interrupt+0x68>)
  400478:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  40047c:	682d      	ldr	r5, [r5, #0]
  40047e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400482:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400484:	4622      	mov	r2, r4
  400486:	e7df      	b.n	400448 <Position_1_Interrupt+0x18>
  400488:	20400584 	.word	0x20400584
  40048c:	e000e010 	.word	0xe000e010
  400490:	204005a0 	.word	0x204005a0
  400494:	43960000 	.word	0x43960000
  400498:	20400598 	.word	0x20400598
  40049c:	00405bf8 	.word	0x00405bf8
  4004a0:	00403bf1 	.word	0x00403bf1

004004a4 <pos_sens_init>:
}

void pos_sens_init (void){
  4004a4:	b510      	push	{r4, lr}
	//set interrupt handlers
	ext_irq_register(PIO_PD19_IDX, Position_3_Interrupt);		//POS 3
  4004a6:	4919      	ldr	r1, [pc, #100]	; (40050c <pos_sens_init+0x68>)
  4004a8:	2073      	movs	r0, #115	; 0x73
  4004aa:	4c19      	ldr	r4, [pc, #100]	; (400510 <pos_sens_init+0x6c>)
  4004ac:	47a0      	blx	r4
	ext_irq_register(PIO_PA2_IDX, Position_2_Interrupt);		//POS 2
  4004ae:	4919      	ldr	r1, [pc, #100]	; (400514 <pos_sens_init+0x70>)
  4004b0:	2002      	movs	r0, #2
  4004b2:	47a0      	blx	r4
	ext_irq_register(PIO_PA5_IDX, Position_1_Interrupt);		//POS 1
  4004b4:	4918      	ldr	r1, [pc, #96]	; (400518 <pos_sens_init+0x74>)
  4004b6:	2005      	movs	r0, #5
  4004b8:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4004ba:	4b18      	ldr	r3, [pc, #96]	; (40051c <pos_sens_init+0x78>)
  4004bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4004c0:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4004c2:	2220      	movs	r2, #32
  4004c4:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4004c8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4004cc:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4004ce:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ	(PIOD_IRQn);
	NVIC_SetPriority(PIOD_IRQn, IRQ_PRIORITY_POSITION_SENS);

	
	//SysTick starting from 0
	pos_sens_last_SysTick_count = 0;
  4004d2:	2200      	movs	r2, #0
  4004d4:	4b12      	ldr	r3, [pc, #72]	; (400520 <pos_sens_init+0x7c>)
  4004d6:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
  4004d8:	4b12      	ldr	r3, [pc, #72]	; (400524 <pos_sens_init+0x80>)
  4004da:	609a      	str	r2, [r3, #8]
	//make the load value max, so that the overflows are as rare as possible
	SysTick->LOAD = (0xFFFFFF);
  4004dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  4004e0:	6059      	str	r1, [r3, #4]

	this means that the moment we transition to state (POS1=1, POS2=0 POS3=0) we are at 0 electrical degrees
	*/

	// sector_lookup_table[POS3][POS2][POS1];
	sector_lookup_table[0][0][1] = 1;
  4004e2:	4b11      	ldr	r3, [pc, #68]	; (400528 <pos_sens_init+0x84>)
  4004e4:	2101      	movs	r1, #1
  4004e6:	6059      	str	r1, [r3, #4]
	sector_lookup_table[0][1][1] = 2;
  4004e8:	2102      	movs	r1, #2
  4004ea:	60d9      	str	r1, [r3, #12]
	sector_lookup_table[0][1][0] = 3;
  4004ec:	2103      	movs	r1, #3
  4004ee:	6099      	str	r1, [r3, #8]
	sector_lookup_table[1][1][0] = 4;
  4004f0:	2104      	movs	r1, #4
  4004f2:	6199      	str	r1, [r3, #24]
	sector_lookup_table[1][0][0] = 5;
  4004f4:	2105      	movs	r1, #5
  4004f6:	6119      	str	r1, [r3, #16]
	sector_lookup_table[1][0][1] = 6;
  4004f8:	2106      	movs	r1, #6
  4004fa:	6159      	str	r1, [r3, #20]
	//Error states
	sector_lookup_table[0][0][0] = -1;
  4004fc:	f04f 31ff 	mov.w	r1, #4294967295
  400500:	6019      	str	r1, [r3, #0]
	sector_lookup_table[1][1][1] = -1;
  400502:	61d9      	str	r1, [r3, #28]
	
	has_triggered = false;
  400504:	4b09      	ldr	r3, [pc, #36]	; (40052c <pos_sens_init+0x88>)
  400506:	701a      	strb	r2, [r3, #0]
  400508:	bd10      	pop	{r4, pc}
  40050a:	bf00      	nop
  40050c:	004003bd 	.word	0x004003bd
  400510:	00401285 	.word	0x00401285
  400514:	00400349 	.word	0x00400349
  400518:	00400431 	.word	0x00400431
  40051c:	e000e100 	.word	0xe000e100
  400520:	204005a0 	.word	0x204005a0
  400524:	e000e010 	.word	0xe000e010
  400528:	2040055c 	.word	0x2040055c
  40052c:	20400584 	.word	0x20400584

00400530 <dma_adc_0_enable_for_one_transaction>:
	//DMAs are single transaction by default
	dma_adc_0_disable_continuously();
	dma_adc_1_disable_continuously();
}

void dma_adc_0_enable_for_one_transaction(void){
  400530:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  400532:	4906      	ldr	r1, [pc, #24]	; (40054c <dma_adc_0_enable_for_one_transaction+0x1c>)
  400534:	2000      	movs	r0, #0
  400536:	4b06      	ldr	r3, [pc, #24]	; (400550 <dma_adc_0_enable_for_one_transaction+0x20>)
  400538:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  40053a:	2118      	movs	r1, #24
  40053c:	2000      	movs	r0, #0
  40053e:	4b05      	ldr	r3, [pc, #20]	; (400554 <dma_adc_0_enable_for_one_transaction+0x24>)
  400540:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  400542:	2101      	movs	r1, #1
  400544:	2000      	movs	r0, #0
  400546:	4b04      	ldr	r3, [pc, #16]	; (400558 <dma_adc_0_enable_for_one_transaction+0x28>)
  400548:	4798      	blx	r3
  40054a:	bd08      	pop	{r3, pc}
  40054c:	20400234 	.word	0x20400234
  400550:	00402729 	.word	0x00402729
  400554:	00402749 	.word	0x00402749
  400558:	00402761 	.word	0x00402761

0040055c <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  40055c:	b530      	push	{r4, r5, lr}
  40055e:	b085      	sub	sp, #20
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3], (int)dma_adc_0_buff[4],(int)dma_adc_0_buff[5]);
  400560:	4825      	ldr	r0, [pc, #148]	; (4005f8 <dma_adc_0_callback+0x9c>)
  400562:	6801      	ldr	r1, [r0, #0]
  400564:	6842      	ldr	r2, [r0, #4]
  400566:	6883      	ldr	r3, [r0, #8]
  400568:	68c4      	ldr	r4, [r0, #12]
  40056a:	6905      	ldr	r5, [r0, #16]
  40056c:	6940      	ldr	r0, [r0, #20]
  40056e:	9002      	str	r0, [sp, #8]
  400570:	9501      	str	r5, [sp, #4]
  400572:	9400      	str	r4, [sp, #0]
  400574:	4821      	ldr	r0, [pc, #132]	; (4005fc <dma_adc_0_callback+0xa0>)
  400576:	4c22      	ldr	r4, [pc, #136]	; (400600 <dma_adc_0_callback+0xa4>)
  400578:	47a0      	blx	r4
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  40057a:	2300      	movs	r3, #0
  40057c:	e008      	b.n	400590 <dma_adc_0_callback+0x34>
				raw_currents[1] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  40057e:	b292      	uxth	r2, r2
  400580:	4920      	ldr	r1, [pc, #128]	; (400604 <dma_adc_0_callback+0xa8>)
  400582:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  400584:	491c      	ldr	r1, [pc, #112]	; (4005f8 <dma_adc_0_callback+0x9c>)
  400586:	7e0a      	ldrb	r2, [r1, #24]
  400588:	f042 0202 	orr.w	r2, r2, #2
  40058c:	760a      	strb	r2, [r1, #24]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  40058e:	3301      	adds	r3, #1
  400590:	2b05      	cmp	r3, #5
  400592:	dc13      	bgt.n	4005bc <dma_adc_0_callback+0x60>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400594:	4a18      	ldr	r2, [pc, #96]	; (4005f8 <dma_adc_0_callback+0x9c>)
  400596:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40059a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  40059e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  4005a2:	d0ec      	beq.n	40057e <dma_adc_0_callback+0x22>
  4005a4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4005a8:	d1f1      	bne.n	40058e <dma_adc_0_callback+0x32>
				raw_currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  4005aa:	b292      	uxth	r2, r2
  4005ac:	4915      	ldr	r1, [pc, #84]	; (400604 <dma_adc_0_callback+0xa8>)
  4005ae:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  4005b0:	4911      	ldr	r1, [pc, #68]	; (4005f8 <dma_adc_0_callback+0x9c>)
  4005b2:	7e0a      	ldrb	r2, [r1, #24]
  4005b4:	f042 0201 	orr.w	r2, r2, #1
  4005b8:	760a      	strb	r2, [r1, #24]
				break;
  4005ba:	e7e8      	b.n	40058e <dma_adc_0_callback+0x32>
	if(is_dma_adc_0_continuous){
  4005bc:	4b12      	ldr	r3, [pc, #72]	; (400608 <dma_adc_0_callback+0xac>)
  4005be:	781b      	ldrb	r3, [r3, #0]
  4005c0:	b92b      	cbnz	r3, 4005ce <dma_adc_0_callback+0x72>
	if(ready_values == ALL_VALUES_READY){
  4005c2:	4b0d      	ldr	r3, [pc, #52]	; (4005f8 <dma_adc_0_callback+0x9c>)
  4005c4:	7e1b      	ldrb	r3, [r3, #24]
  4005c6:	2b0f      	cmp	r3, #15
  4005c8:	d004      	beq.n	4005d4 <dma_adc_0_callback+0x78>
}
  4005ca:	b005      	add	sp, #20
  4005cc:	bd30      	pop	{r4, r5, pc}
		dma_adc_0_enable_for_one_transaction();
  4005ce:	4b0f      	ldr	r3, [pc, #60]	; (40060c <dma_adc_0_callback+0xb0>)
  4005d0:	4798      	blx	r3
  4005d2:	e7f6      	b.n	4005c2 <dma_adc_0_callback+0x66>
		ready_values = 0;
  4005d4:	2200      	movs	r2, #0
  4005d6:	4b08      	ldr	r3, [pc, #32]	; (4005f8 <dma_adc_0_callback+0x9c>)
  4005d8:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 0\n");
  4005da:	480d      	ldr	r0, [pc, #52]	; (400610 <dma_adc_0_callback+0xb4>)
  4005dc:	4c08      	ldr	r4, [pc, #32]	; (400600 <dma_adc_0_callback+0xa4>)
  4005de:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  4005e0:	4808      	ldr	r0, [pc, #32]	; (400604 <dma_adc_0_callback+0xa8>)
  4005e2:	6843      	ldr	r3, [r0, #4]
  4005e4:	6802      	ldr	r2, [r0, #0]
  4005e6:	490b      	ldr	r1, [pc, #44]	; (400614 <dma_adc_0_callback+0xb8>)
  4005e8:	6809      	ldr	r1, [r1, #0]
  4005ea:	68c5      	ldr	r5, [r0, #12]
  4005ec:	9501      	str	r5, [sp, #4]
  4005ee:	6880      	ldr	r0, [r0, #8]
  4005f0:	9000      	str	r0, [sp, #0]
  4005f2:	4809      	ldr	r0, [pc, #36]	; (400618 <dma_adc_0_callback+0xbc>)
  4005f4:	47a0      	blx	r4
}
  4005f6:	e7e8      	b.n	4005ca <dma_adc_0_callback+0x6e>
  4005f8:	20400234 	.word	0x20400234
  4005fc:	00405c00 	.word	0x00405c00
  400600:	00403bf1 	.word	0x00403bf1
  400604:	204005bc 	.word	0x204005bc
  400608:	20400559 	.word	0x20400559
  40060c:	00400531 	.word	0x00400531
  400610:	00405c2c 	.word	0x00405c2c
  400614:	204005c8 	.word	0x204005c8
  400618:	00405c74 	.word	0x00405c74

0040061c <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  40061c:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  40061e:	4906      	ldr	r1, [pc, #24]	; (400638 <dma_adc_1_enable_for_one_transaction+0x1c>)
  400620:	2001      	movs	r0, #1
  400622:	4b06      	ldr	r3, [pc, #24]	; (40063c <dma_adc_1_enable_for_one_transaction+0x20>)
  400624:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  400626:	2110      	movs	r1, #16
  400628:	2001      	movs	r0, #1
  40062a:	4b05      	ldr	r3, [pc, #20]	; (400640 <dma_adc_1_enable_for_one_transaction+0x24>)
  40062c:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  40062e:	2101      	movs	r1, #1
  400630:	4608      	mov	r0, r1
  400632:	4b04      	ldr	r3, [pc, #16]	; (400644 <dma_adc_1_enable_for_one_transaction+0x28>)
  400634:	4798      	blx	r3
  400636:	bd08      	pop	{r3, pc}
  400638:	20400250 	.word	0x20400250
  40063c:	00402729 	.word	0x00402729
  400640:	00402749 	.word	0x00402749
  400644:	00402761 	.word	0x00402761

00400648 <dma_adc_1_callback>:
static void dma_adc_1_callback(struct _dma_resource *resource){
  400648:	b530      	push	{r4, r5, lr}
  40064a:	b083      	sub	sp, #12
	printf("interrupt - ADC 1 - %i %i %i %i  \n", (int)dma_adc_1_buff[0],(int)dma_adc_1_buff[1],(int)dma_adc_1_buff[2],(int)dma_adc_1_buff[3]);
  40064c:	4824      	ldr	r0, [pc, #144]	; (4006e0 <dma_adc_1_callback+0x98>)
  40064e:	69c1      	ldr	r1, [r0, #28]
  400650:	6a02      	ldr	r2, [r0, #32]
  400652:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400654:	6a80      	ldr	r0, [r0, #40]	; 0x28
  400656:	9000      	str	r0, [sp, #0]
  400658:	4822      	ldr	r0, [pc, #136]	; (4006e4 <dma_adc_1_callback+0x9c>)
  40065a:	4c23      	ldr	r4, [pc, #140]	; (4006e8 <dma_adc_1_callback+0xa0>)
  40065c:	47a0      	blx	r4
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  40065e:	2300      	movs	r3, #0
  400660:	e008      	b.n	400674 <dma_adc_1_callback+0x2c>
				raw_currents[2] = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400662:	b292      	uxth	r2, r2
  400664:	4921      	ldr	r1, [pc, #132]	; (4006ec <dma_adc_1_callback+0xa4>)
  400666:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  400668:	491d      	ldr	r1, [pc, #116]	; (4006e0 <dma_adc_1_callback+0x98>)
  40066a:	7e0a      	ldrb	r2, [r1, #24]
  40066c:	f042 0204 	orr.w	r2, r2, #4
  400670:	760a      	strb	r2, [r1, #24]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400672:	3301      	adds	r3, #1
  400674:	2b03      	cmp	r3, #3
  400676:	dc14      	bgt.n	4006a2 <dma_adc_1_callback+0x5a>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400678:	4a19      	ldr	r2, [pc, #100]	; (4006e0 <dma_adc_1_callback+0x98>)
  40067a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  40067e:	69d2      	ldr	r2, [r2, #28]
  400680:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400684:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  400688:	d0eb      	beq.n	400662 <dma_adc_1_callback+0x1a>
  40068a:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  40068e:	d1f0      	bne.n	400672 <dma_adc_1_callback+0x2a>
				raw_voltage = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400690:	b292      	uxth	r2, r2
  400692:	4917      	ldr	r1, [pc, #92]	; (4006f0 <dma_adc_1_callback+0xa8>)
  400694:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<3);
  400696:	4912      	ldr	r1, [pc, #72]	; (4006e0 <dma_adc_1_callback+0x98>)
  400698:	7e0a      	ldrb	r2, [r1, #24]
  40069a:	f042 0208 	orr.w	r2, r2, #8
  40069e:	760a      	strb	r2, [r1, #24]
				break;
  4006a0:	e7e7      	b.n	400672 <dma_adc_1_callback+0x2a>
	if(is_dma_adc_1_continuous){
  4006a2:	4b14      	ldr	r3, [pc, #80]	; (4006f4 <dma_adc_1_callback+0xac>)
  4006a4:	781b      	ldrb	r3, [r3, #0]
  4006a6:	b92b      	cbnz	r3, 4006b4 <dma_adc_1_callback+0x6c>
	if(ready_values == ALL_VALUES_READY){
  4006a8:	4b0d      	ldr	r3, [pc, #52]	; (4006e0 <dma_adc_1_callback+0x98>)
  4006aa:	7e1b      	ldrb	r3, [r3, #24]
  4006ac:	2b0f      	cmp	r3, #15
  4006ae:	d004      	beq.n	4006ba <dma_adc_1_callback+0x72>
}
  4006b0:	b003      	add	sp, #12
  4006b2:	bd30      	pop	{r4, r5, pc}
		dma_adc_1_enable_for_one_transaction();
  4006b4:	4b10      	ldr	r3, [pc, #64]	; (4006f8 <dma_adc_1_callback+0xb0>)
  4006b6:	4798      	blx	r3
  4006b8:	e7f6      	b.n	4006a8 <dma_adc_1_callback+0x60>
		ready_values = 0;
  4006ba:	2200      	movs	r2, #0
  4006bc:	4b08      	ldr	r3, [pc, #32]	; (4006e0 <dma_adc_1_callback+0x98>)
  4006be:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 1 \n");
  4006c0:	480e      	ldr	r0, [pc, #56]	; (4006fc <dma_adc_1_callback+0xb4>)
  4006c2:	4c09      	ldr	r4, [pc, #36]	; (4006e8 <dma_adc_1_callback+0xa0>)
  4006c4:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  4006c6:	4809      	ldr	r0, [pc, #36]	; (4006ec <dma_adc_1_callback+0xa4>)
  4006c8:	6843      	ldr	r3, [r0, #4]
  4006ca:	6802      	ldr	r2, [r0, #0]
  4006cc:	4908      	ldr	r1, [pc, #32]	; (4006f0 <dma_adc_1_callback+0xa8>)
  4006ce:	6809      	ldr	r1, [r1, #0]
  4006d0:	68c5      	ldr	r5, [r0, #12]
  4006d2:	9501      	str	r5, [sp, #4]
  4006d4:	6880      	ldr	r0, [r0, #8]
  4006d6:	9000      	str	r0, [sp, #0]
  4006d8:	4809      	ldr	r0, [pc, #36]	; (400700 <dma_adc_1_callback+0xb8>)
  4006da:	47a0      	blx	r4
}
  4006dc:	e7e8      	b.n	4006b0 <dma_adc_1_callback+0x68>
  4006de:	bf00      	nop
  4006e0:	20400234 	.word	0x20400234
  4006e4:	00405c60 	.word	0x00405c60
  4006e8:	00403bf1 	.word	0x00403bf1
  4006ec:	204005bc 	.word	0x204005bc
  4006f0:	204005c8 	.word	0x204005c8
  4006f4:	20400558 	.word	0x20400558
  4006f8:	0040061d 	.word	0x0040061d
  4006fc:	00405c84 	.word	0x00405c84
  400700:	00405c74 	.word	0x00405c74

00400704 <dma_adc_0_disable_continuously>:
	is_dma_adc_1_continuous = true;
	dma_adc_1_enable_for_one_transaction();
}

void dma_adc_0_disable_continuously(void){
	is_dma_adc_0_continuous = false;
  400704:	2200      	movs	r2, #0
  400706:	4b01      	ldr	r3, [pc, #4]	; (40070c <dma_adc_0_disable_continuously+0x8>)
  400708:	701a      	strb	r2, [r3, #0]
  40070a:	4770      	bx	lr
  40070c:	20400559 	.word	0x20400559

00400710 <dma_adc_1_disable_continuously>:
}
void dma_adc_1_disable_continuously(void){
	is_dma_adc_1_continuous = false;
  400710:	2200      	movs	r2, #0
  400712:	4b01      	ldr	r3, [pc, #4]	; (400718 <dma_adc_1_disable_continuously+0x8>)
  400714:	701a      	strb	r2, [r3, #0]
  400716:	4770      	bx	lr
  400718:	20400558 	.word	0x20400558

0040071c <dma_adc_init>:
void dma_adc_init(void){
  40071c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  400720:	4928      	ldr	r1, [pc, #160]	; (4007c4 <dma_adc_init+0xa8>)
  400722:	2000      	movs	r0, #0
  400724:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 4007f0 <dma_adc_init+0xd4>
  400728:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  40072a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 4007f4 <dma_adc_init+0xd8>
  40072e:	4641      	mov	r1, r8
  400730:	2000      	movs	r0, #0
  400732:	4f25      	ldr	r7, [pc, #148]	; (4007c8 <dma_adc_init+0xac>)
  400734:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  400736:	2118      	movs	r1, #24
  400738:	2000      	movs	r0, #0
  40073a:	4d24      	ldr	r5, [pc, #144]	; (4007cc <dma_adc_init+0xb0>)
  40073c:	47a8      	blx	r5
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  40073e:	2100      	movs	r1, #0
  400740:	460c      	mov	r4, r1
  400742:	4608      	mov	r0, r1
  400744:	4e22      	ldr	r6, [pc, #136]	; (4007d0 <dma_adc_init+0xb4>)
  400746:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  400748:	6823      	ldr	r3, [r4, #0]
  40074a:	4a22      	ldr	r2, [pc, #136]	; (4007d4 <dma_adc_init+0xb8>)
  40074c:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  40074e:	2201      	movs	r2, #1
  400750:	4621      	mov	r1, r4
  400752:	4620      	mov	r0, r4
  400754:	4c20      	ldr	r4, [pc, #128]	; (4007d8 <dma_adc_init+0xbc>)
  400756:	47a0      	blx	r4
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  400758:	4920      	ldr	r1, [pc, #128]	; (4007dc <dma_adc_init+0xc0>)
  40075a:	2001      	movs	r0, #1
  40075c:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  40075e:	f108 011c 	add.w	r1, r8, #28
  400762:	2001      	movs	r0, #1
  400764:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  400766:	2110      	movs	r1, #16
  400768:	2001      	movs	r0, #1
  40076a:	47a8      	blx	r5
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  40076c:	2101      	movs	r1, #1
  40076e:	2500      	movs	r5, #0
  400770:	4628      	mov	r0, r5
  400772:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  400774:	682b      	ldr	r3, [r5, #0]
  400776:	4a1a      	ldr	r2, [pc, #104]	; (4007e0 <dma_adc_init+0xc4>)
  400778:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  40077a:	2201      	movs	r2, #1
  40077c:	4629      	mov	r1, r5
  40077e:	4610      	mov	r0, r2
  400780:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400782:	4b18      	ldr	r3, [pc, #96]	; (4007e4 <dma_adc_init+0xc8>)
  400784:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400788:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40078a:	2280      	movs	r2, #128	; 0x80
  40078c:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400790:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400798:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40079c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007a4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4007a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4007ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007b0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007b4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	dma_adc_0_disable_continuously();
  4007b8:	4b0b      	ldr	r3, [pc, #44]	; (4007e8 <dma_adc_init+0xcc>)
  4007ba:	4798      	blx	r3
	dma_adc_1_disable_continuously();
  4007bc:	4b0b      	ldr	r3, [pc, #44]	; (4007ec <dma_adc_init+0xd0>)
  4007be:	4798      	blx	r3
  4007c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4007c4:	4003c020 	.word	0x4003c020
  4007c8:	00402729 	.word	0x00402729
  4007cc:	00402749 	.word	0x00402749
  4007d0:	00402779 	.word	0x00402779
  4007d4:	0040055d 	.word	0x0040055d
  4007d8:	0040278d 	.word	0x0040278d
  4007dc:	40064020 	.word	0x40064020
  4007e0:	00400649 	.word	0x00400649
  4007e4:	e000e100 	.word	0xe000e100
  4007e8:	00400705 	.word	0x00400705
  4007ec:	00400711 	.word	0x00400711
  4007f0:	00402739 	.word	0x00402739
  4007f4:	20400234 	.word	0x20400234

004007f8 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  4007f8:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  4007fa:	4d11      	ldr	r5, [pc, #68]	; (400840 <adc_enable_all+0x48>)
  4007fc:	2108      	movs	r1, #8
  4007fe:	4628      	mov	r0, r5
  400800:	4c10      	ldr	r4, [pc, #64]	; (400844 <adc_enable_all+0x4c>)
  400802:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  400804:	2102      	movs	r1, #2
  400806:	4628      	mov	r0, r5
  400808:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  40080a:	4e0f      	ldr	r6, [pc, #60]	; (400848 <adc_enable_all+0x50>)
  40080c:	2101      	movs	r1, #1
  40080e:	4630      	mov	r0, r6
  400810:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  400812:	2106      	movs	r1, #6
  400814:	4630      	mov	r0, r6
  400816:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  400818:	2105      	movs	r1, #5
  40081a:	4630      	mov	r0, r6
  40081c:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  40081e:	2106      	movs	r1, #6
  400820:	4628      	mov	r0, r5
  400822:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  400824:	210a      	movs	r1, #10
  400826:	4628      	mov	r0, r5
  400828:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  40082a:	2100      	movs	r1, #0
  40082c:	4630      	mov	r0, r6
  40082e:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  400830:	2105      	movs	r1, #5
  400832:	4628      	mov	r0, r5
  400834:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  400836:	2100      	movs	r1, #0
  400838:	4628      	mov	r0, r5
  40083a:	47a0      	blx	r4
  40083c:	bd70      	pop	{r4, r5, r6, pc}
  40083e:	bf00      	nop
  400840:	204006b4 	.word	0x204006b4
  400844:	0040117d 	.word	0x0040117d
  400848:	2040078c 	.word	0x2040078c

0040084c <pwm_0_callback>:
#include <hpl_pwm.h>
#include <hpl_pwm_config.h>

int counter = 0;

void pwm_0_callback(const struct pwm_descriptor *const descr){
  40084c:	b508      	push	{r3, lr}
	counter ++;
  40084e:	4a08      	ldr	r2, [pc, #32]	; (400870 <pwm_0_callback+0x24>)
  400850:	6813      	ldr	r3, [r2, #0]
  400852:	3301      	adds	r3, #1
  400854:	6013      	str	r3, [r2, #0]
	if (counter > 3000){
  400856:	f640 32b8 	movw	r2, #3000	; 0xbb8
  40085a:	4293      	cmp	r3, r2
  40085c:	dc00      	bgt.n	400860 <pwm_0_callback+0x14>
  40085e:	bd08      	pop	{r3, pc}
		counter = 0;
  400860:	2200      	movs	r2, #0
  400862:	4b03      	ldr	r3, [pc, #12]	; (400870 <pwm_0_callback+0x24>)
  400864:	601a      	str	r2, [r3, #0]
		printf("PWM Interrupt \n");
  400866:	4803      	ldr	r0, [pc, #12]	; (400874 <pwm_0_callback+0x28>)
  400868:	4b03      	ldr	r3, [pc, #12]	; (400878 <pwm_0_callback+0x2c>)
  40086a:	4798      	blx	r3
	}
}
  40086c:	e7f7      	b.n	40085e <pwm_0_callback+0x12>
  40086e:	bf00      	nop
  400870:	20400260 	.word	0x20400260
  400874:	00405cb8 	.word	0x00405cb8
  400878:	00403bf1 	.word	0x00403bf1

0040087c <pwm_init_user>:


void pwm_init_user(void){
  40087c:	b508      	push	{r3, lr}
}

static inline void hri_pwm_set_CMR_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmr_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  40087e:	4b2e      	ldr	r3, [pc, #184]	; (400938 <pwm_init_user+0xbc>)
  400880:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  400884:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400888:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}

static inline void hri_pwm_set_DT_DTH_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  40088c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400890:	f042 020a 	orr.w	r2, r2, #10
  400894:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
}

static inline void hri_pwm_set_DT_DTL_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400898:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  40089c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  4008a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  4008a4:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
  4008a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4008ac:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  4008b0:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  4008b4:	f042 020a 	orr.w	r2, r2, #10
  4008b8:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  4008bc:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  4008c0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  4008c4:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  4008c8:	4a1c      	ldr	r2, [pc, #112]	; (40093c <pwm_init_user+0xc0>)
  4008ca:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  4008ce:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4008d2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  4008d6:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  4008da:	f041 010a 	orr.w	r1, r1, #10
  4008de:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  4008e2:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  4008e6:	f441 2120 	orr.w	r1, r1, #655360	; 0xa0000
  4008ea:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
}

static inline void hri_pwm_set_CMPV_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmpv_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV |= mask;
  4008ee:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
  4008f2:	f041 0101 	orr.w	r1, r1, #1
  4008f6:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  4008fa:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
  4008fe:	f041 0101 	orr.w	r1, r1, #1
  400902:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  400906:	2201      	movs	r2, #1
  400908:	611a      	str	r2, [r3, #16]
	
	
	//we want interrupt from one of the PWMs so that we can start the control loop
	//interrupt on PWM 0, channel 0 is enabled ; on PWM 1 is disabled
	hri_pwm_set_IMR1_CHID0_bit(PWM0);									//enable the interrupt from ADC 0, channel 0
	pwm_register_callback(&PWM_0, PWM_PERIOD_CB, pwm_0_callback);
  40090a:	4a0d      	ldr	r2, [pc, #52]	; (400940 <pwm_init_user+0xc4>)
  40090c:	2100      	movs	r1, #0
  40090e:	480d      	ldr	r0, [pc, #52]	; (400944 <pwm_init_user+0xc8>)
  400910:	4b0d      	ldr	r3, [pc, #52]	; (400948 <pwm_init_user+0xcc>)
  400912:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400914:	4b0d      	ldr	r3, [pc, #52]	; (40094c <pwm_init_user+0xd0>)
  400916:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40091a:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40091c:	2260      	movs	r2, #96	; 0x60
  40091e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40092a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40092e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400932:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400936:	bd08      	pop	{r3, pc}
  400938:	40020000 	.word	0x40020000
  40093c:	4005c000 	.word	0x4005c000
  400940:	0040084d 	.word	0x0040084d
  400944:	204005cc 	.word	0x204005cc
  400948:	00401449 	.word	0x00401449
  40094c:	e000e100 	.word	0xe000e100

00400950 <pwm_enable_all>:
}


//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400950:	b570      	push	{r4, r5, r6, lr}
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM |= mask;
  400952:	4a12      	ldr	r2, [pc, #72]	; (40099c <pwm_enable_all+0x4c>)
  400954:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400958:	f043 0301 	orr.w	r3, r3, #1
  40095c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
  400960:	f502 3270 	add.w	r2, r2, #245760	; 0x3c000
  400964:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400968:	f043 0301 	orr.w	r3, r3, #1
  40096c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	hri_pwm_set_CMPM_reg(PWM0, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	hri_pwm_set_CMPM_reg(PWM1, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  400970:	4c0b      	ldr	r4, [pc, #44]	; (4009a0 <pwm_enable_all+0x50>)
  400972:	4620      	mov	r0, r4
  400974:	4e0b      	ldr	r6, [pc, #44]	; (4009a4 <pwm_enable_all+0x54>)
  400976:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  400978:	4d0b      	ldr	r5, [pc, #44]	; (4009a8 <pwm_enable_all+0x58>)
  40097a:	4628      	mov	r0, r5
  40097c:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  40097e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400982:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400986:	4620      	mov	r0, r4
  400988:	4c08      	ldr	r4, [pc, #32]	; (4009ac <pwm_enable_all+0x5c>)
  40098a:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD>>1);
  40098c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400990:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400994:	4628      	mov	r0, r5
  400996:	47a0      	blx	r4
  400998:	bd70      	pop	{r4, r5, r6, pc}
  40099a:	bf00      	nop
  40099c:	40020000 	.word	0x40020000
  4009a0:	204005cc 	.word	0x204005cc
  4009a4:	0040140d 	.word	0x0040140d
  4009a8:	20400770 	.word	0x20400770
  4009ac:	00401491 	.word	0x00401491

004009b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4009b0:	e7fe      	b.n	4009b0 <Dummy_Handler>
	...

004009b4 <Reset_Handler>:
{
  4009b4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4009b6:	4b10      	ldr	r3, [pc, #64]	; (4009f8 <Reset_Handler+0x44>)
  4009b8:	4a10      	ldr	r2, [pc, #64]	; (4009fc <Reset_Handler+0x48>)
  4009ba:	429a      	cmp	r2, r3
  4009bc:	d009      	beq.n	4009d2 <Reset_Handler+0x1e>
  4009be:	4b0e      	ldr	r3, [pc, #56]	; (4009f8 <Reset_Handler+0x44>)
  4009c0:	4a0e      	ldr	r2, [pc, #56]	; (4009fc <Reset_Handler+0x48>)
  4009c2:	e003      	b.n	4009cc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4009c4:	6811      	ldr	r1, [r2, #0]
  4009c6:	6019      	str	r1, [r3, #0]
  4009c8:	3304      	adds	r3, #4
  4009ca:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4009cc:	490c      	ldr	r1, [pc, #48]	; (400a00 <Reset_Handler+0x4c>)
  4009ce:	428b      	cmp	r3, r1
  4009d0:	d3f8      	bcc.n	4009c4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4009d2:	4b0c      	ldr	r3, [pc, #48]	; (400a04 <Reset_Handler+0x50>)
  4009d4:	e002      	b.n	4009dc <Reset_Handler+0x28>
                *pDest++ = 0;
  4009d6:	2200      	movs	r2, #0
  4009d8:	601a      	str	r2, [r3, #0]
  4009da:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4009dc:	4a0a      	ldr	r2, [pc, #40]	; (400a08 <Reset_Handler+0x54>)
  4009de:	4293      	cmp	r3, r2
  4009e0:	d3f9      	bcc.n	4009d6 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4009e2:	4a0a      	ldr	r2, [pc, #40]	; (400a0c <Reset_Handler+0x58>)
  4009e4:	4b0a      	ldr	r3, [pc, #40]	; (400a10 <Reset_Handler+0x5c>)
  4009e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4009ea:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4009ec:	4b09      	ldr	r3, [pc, #36]	; (400a14 <Reset_Handler+0x60>)
  4009ee:	4798      	blx	r3
        main();
  4009f0:	4b09      	ldr	r3, [pc, #36]	; (400a18 <Reset_Handler+0x64>)
  4009f2:	4798      	blx	r3
  4009f4:	e7fe      	b.n	4009f4 <Reset_Handler+0x40>
  4009f6:	bf00      	nop
  4009f8:	20400000 	.word	0x20400000
  4009fc:	00406380 	.word	0x00406380
  400a00:	20400218 	.word	0x20400218
  400a04:	20400218 	.word	0x20400218
  400a08:	204007bc 	.word	0x204007bc
  400a0c:	e000ed00 	.word	0xe000ed00
  400a10:	00400000 	.word	0x00400000
  400a14:	004032c5 	.word	0x004032c5
  400a18:	00402851 	.word	0x00402851

00400a1c <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  400a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a1e:	b085      	sub	sp, #20
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400a20:	4b20      	ldr	r3, [pc, #128]	; (400aa4 <ADC_1_init+0x88>)
  400a22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400a26:	f413 7f80 	tst.w	r3, #256	; 0x100
  400a2a:	d104      	bne.n	400a36 <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400a30:	4b1c      	ldr	r3, [pc, #112]	; (400aa4 <ADC_1_init+0x88>)
  400a32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  400a36:	4d1c      	ldr	r5, [pc, #112]	; (400aa8 <ADC_1_init+0x8c>)
  400a38:	4c1c      	ldr	r4, [pc, #112]	; (400aac <ADC_1_init+0x90>)
  400a3a:	2600      	movs	r6, #0
  400a3c:	9602      	str	r6, [sp, #8]
  400a3e:	4b1c      	ldr	r3, [pc, #112]	; (400ab0 <ADC_1_init+0x94>)
  400a40:	9301      	str	r3, [sp, #4]
  400a42:	2304      	movs	r3, #4
  400a44:	9300      	str	r3, [sp, #0]
  400a46:	2306      	movs	r3, #6
  400a48:	462a      	mov	r2, r5
  400a4a:	491a      	ldr	r1, [pc, #104]	; (400ab4 <ADC_1_init+0x98>)
  400a4c:	4620      	mov	r0, r4
  400a4e:	4f1a      	ldr	r7, [pc, #104]	; (400ab8 <ADC_1_init+0x9c>)
  400a50:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  400a52:	2310      	movs	r3, #16
  400a54:	f105 0208 	add.w	r2, r5, #8
  400a58:	4631      	mov	r1, r6
  400a5a:	4620      	mov	r0, r4
  400a5c:	4e17      	ldr	r6, [pc, #92]	; (400abc <ADC_1_init+0xa0>)
  400a5e:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  400a60:	2310      	movs	r3, #16
  400a62:	f105 0218 	add.w	r2, r5, #24
  400a66:	2101      	movs	r1, #1
  400a68:	4620      	mov	r0, r4
  400a6a:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  400a6c:	2310      	movs	r3, #16
  400a6e:	f105 0228 	add.w	r2, r5, #40	; 0x28
  400a72:	2105      	movs	r1, #5
  400a74:	4620      	mov	r0, r4
  400a76:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  400a78:	2310      	movs	r3, #16
  400a7a:	f105 0238 	add.w	r2, r5, #56	; 0x38
  400a7e:	2106      	movs	r1, #6
  400a80:	4620      	mov	r0, r4
  400a82:	47b0      	blx	r6
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400a84:	2202      	movs	r2, #2
  400a86:	4b0e      	ldr	r3, [pc, #56]	; (400ac0 <ADC_1_init+0xa4>)
  400a88:	601a      	str	r2, [r3, #0]
  400a8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400a92:	601a      	str	r2, [r3, #0]
  400a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400a98:	601a      	str	r2, [r3, #0]
  400a9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400a9e:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  400aa0:	b005      	add	sp, #20
  400aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400aa4:	400e0600 	.word	0x400e0600
  400aa8:	20400264 	.word	0x20400264
  400aac:	2040078c 	.word	0x2040078c
  400ab0:	2040062c 	.word	0x2040062c
  400ab4:	40064000 	.word	0x40064000
  400ab8:	0040101d 	.word	0x0040101d
  400abc:	004010c5 	.word	0x004010c5
  400ac0:	400e1000 	.word	0x400e1000

00400ac4 <ADC_0_init>:
{
  400ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ac8:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400aca:	4b2a      	ldr	r3, [pc, #168]	; (400b74 <ADC_0_init+0xb0>)
  400acc:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400ace:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400ad2:	d103      	bne.n	400adc <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400ad4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ad8:	4b26      	ldr	r3, [pc, #152]	; (400b74 <ADC_0_init+0xb0>)
  400ada:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  400adc:	4d26      	ldr	r5, [pc, #152]	; (400b78 <ADC_0_init+0xb4>)
  400ade:	4c27      	ldr	r4, [pc, #156]	; (400b7c <ADC_0_init+0xb8>)
  400ae0:	2600      	movs	r6, #0
  400ae2:	9602      	str	r6, [sp, #8]
  400ae4:	4b26      	ldr	r3, [pc, #152]	; (400b80 <ADC_0_init+0xbc>)
  400ae6:	9301      	str	r3, [sp, #4]
  400ae8:	2706      	movs	r7, #6
  400aea:	9700      	str	r7, [sp, #0]
  400aec:	230a      	movs	r3, #10
  400aee:	f105 0248 	add.w	r2, r5, #72	; 0x48
  400af2:	4924      	ldr	r1, [pc, #144]	; (400b84 <ADC_0_init+0xc0>)
  400af4:	4620      	mov	r0, r4
  400af6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 400b94 <ADC_0_init+0xd0>
  400afa:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  400afc:	2310      	movs	r3, #16
  400afe:	f105 0254 	add.w	r2, r5, #84	; 0x54
  400b02:	4631      	mov	r1, r6
  400b04:	4620      	mov	r0, r4
  400b06:	4e20      	ldr	r6, [pc, #128]	; (400b88 <ADC_0_init+0xc4>)
  400b08:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  400b0a:	2310      	movs	r3, #16
  400b0c:	f105 0264 	add.w	r2, r5, #100	; 0x64
  400b10:	2102      	movs	r1, #2
  400b12:	4620      	mov	r0, r4
  400b14:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  400b16:	2310      	movs	r3, #16
  400b18:	f105 0274 	add.w	r2, r5, #116	; 0x74
  400b1c:	2105      	movs	r1, #5
  400b1e:	4620      	mov	r0, r4
  400b20:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  400b22:	2310      	movs	r3, #16
  400b24:	f105 0284 	add.w	r2, r5, #132	; 0x84
  400b28:	4639      	mov	r1, r7
  400b2a:	4620      	mov	r0, r4
  400b2c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  400b2e:	2310      	movs	r3, #16
  400b30:	f105 0294 	add.w	r2, r5, #148	; 0x94
  400b34:	2108      	movs	r1, #8
  400b36:	4620      	mov	r0, r4
  400b38:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  400b3a:	2310      	movs	r3, #16
  400b3c:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  400b40:	210a      	movs	r1, #10
  400b42:	4620      	mov	r0, r4
  400b44:	47b0      	blx	r6
  400b46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400b4a:	4b10      	ldr	r3, [pc, #64]	; (400b8c <ADC_0_init+0xc8>)
  400b4c:	601a      	str	r2, [r3, #0]
  400b4e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400b52:	2208      	movs	r2, #8
  400b54:	601a      	str	r2, [r3, #0]
  400b56:	2204      	movs	r2, #4
  400b58:	601a      	str	r2, [r3, #0]
  400b5a:	4a0d      	ldr	r2, [pc, #52]	; (400b90 <ADC_0_init+0xcc>)
  400b5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400b60:	6011      	str	r1, [r2, #0]
  400b62:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400b66:	6011      	str	r1, [r2, #0]
  400b68:	2201      	movs	r2, #1
  400b6a:	601a      	str	r2, [r3, #0]
}
  400b6c:	b004      	add	sp, #16
  400b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b72:	bf00      	nop
  400b74:	400e0600 	.word	0x400e0600
  400b78:	20400264 	.word	0x20400264
  400b7c:	204006b4 	.word	0x204006b4
  400b80:	204006e0 	.word	0x204006e0
  400b84:	4003c000 	.word	0x4003c000
  400b88:	004010c5 	.word	0x004010c5
  400b8c:	400e1400 	.word	0x400e1400
  400b90:	400e0e00 	.word	0x400e0e00
  400b94:	0040101d 	.word	0x0040101d

00400b98 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400b98:	4b04      	ldr	r3, [pc, #16]	; (400bac <EXTERNAL_IRQ_D_init+0x14>)
  400b9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400b9e:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  400ba0:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  400ba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400ba6:	601a      	str	r2, [r3, #0]
  400ba8:	4770      	bx	lr
  400baa:	bf00      	nop
  400bac:	400e1400 	.word	0x400e1400

00400bb0 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400bb0:	4b06      	ldr	r3, [pc, #24]	; (400bcc <EXTERNAL_IRQ_A_init+0x1c>)
  400bb2:	2204      	movs	r2, #4
  400bb4:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400bb6:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400bb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400bbc:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400bbe:	2220      	movs	r2, #32
  400bc0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400bc2:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400bc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400bc8:	601a      	str	r2, [r3, #0]
  400bca:	4770      	bx	lr
  400bcc:	400e0e00 	.word	0x400e0e00

00400bd0 <EXTERNAL_IRQ_B_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400bd0:	4b04      	ldr	r3, [pc, #16]	; (400be4 <EXTERNAL_IRQ_B_init+0x14>)
  400bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400bd6:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400bd8:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400bda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400bde:	601a      	str	r2, [r3, #0]
  400be0:	4770      	bx	lr
  400be2:	bf00      	nop
  400be4:	400e1000 	.word	0x400e1000

00400be8 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400be8:	4b16      	ldr	r3, [pc, #88]	; (400c44 <PWM_0_PORT_init+0x5c>)
  400bea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400bec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400bf0:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400bf2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400bf4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  400bf8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400bfa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400bfe:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400c00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c02:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  400c06:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400c08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c0a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400c0e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400c14:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400c16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c18:	f022 0202 	bic.w	r2, r2, #2
  400c1c:	671a      	str	r2, [r3, #112]	; 0x70
  400c1e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c20:	f022 0202 	bic.w	r2, r2, #2
  400c24:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400c26:	2202      	movs	r2, #2
  400c28:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400c2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c2c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400c30:	671a      	str	r2, [r3, #112]	; 0x70
  400c32:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c34:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400c38:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400c3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400c3e:	605a      	str	r2, [r3, #4]
  400c40:	4770      	bx	lr
  400c42:	bf00      	nop
  400c44:	400e0e00 	.word	0x400e0e00

00400c48 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400c48:	4b04      	ldr	r3, [pc, #16]	; (400c5c <PWM_0_CLOCK_init+0x14>)
  400c4a:	699b      	ldr	r3, [r3, #24]
  400c4c:	2b00      	cmp	r3, #0
  400c4e:	db03      	blt.n	400c58 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400c50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400c54:	4b01      	ldr	r3, [pc, #4]	; (400c5c <PWM_0_CLOCK_init+0x14>)
  400c56:	611a      	str	r2, [r3, #16]
  400c58:	4770      	bx	lr
  400c5a:	bf00      	nop
  400c5c:	400e0600 	.word	0x400e0600

00400c60 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400c60:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  400c62:	4b06      	ldr	r3, [pc, #24]	; (400c7c <PWM_0_init+0x1c>)
  400c64:	4798      	blx	r3
	PWM_0_PORT_init();
  400c66:	4b06      	ldr	r3, [pc, #24]	; (400c80 <PWM_0_init+0x20>)
  400c68:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400c6a:	4b06      	ldr	r3, [pc, #24]	; (400c84 <PWM_0_init+0x24>)
  400c6c:	4798      	blx	r3
  400c6e:	4602      	mov	r2, r0
  400c70:	4905      	ldr	r1, [pc, #20]	; (400c88 <PWM_0_init+0x28>)
  400c72:	4806      	ldr	r0, [pc, #24]	; (400c8c <PWM_0_init+0x2c>)
  400c74:	4b06      	ldr	r3, [pc, #24]	; (400c90 <PWM_0_init+0x30>)
  400c76:	4798      	blx	r3
  400c78:	bd08      	pop	{r3, pc}
  400c7a:	bf00      	nop
  400c7c:	00400c49 	.word	0x00400c49
  400c80:	00400be9 	.word	0x00400be9
  400c84:	00402299 	.word	0x00402299
  400c88:	40020000 	.word	0x40020000
  400c8c:	204005cc 	.word	0x204005cc
  400c90:	004013c9 	.word	0x004013c9

00400c94 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400c94:	4b0c      	ldr	r3, [pc, #48]	; (400cc8 <PWM_1_PORT_init+0x34>)
  400c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400c9c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400c9e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400ca0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400ca4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400ca6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400caa:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400cac:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400cb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400cb2:	f042 0201 	orr.w	r2, r2, #1
  400cb6:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400cb8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400cba:	f022 0201 	bic.w	r2, r2, #1
  400cbe:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400cc0:	2201      	movs	r2, #1
  400cc2:	605a      	str	r2, [r3, #4]
  400cc4:	4770      	bx	lr
  400cc6:	bf00      	nop
  400cc8:	400e0e00 	.word	0x400e0e00

00400ccc <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400ccc:	4b05      	ldr	r3, [pc, #20]	; (400ce4 <PWM_1_CLOCK_init+0x18>)
  400cce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400cd2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  400cd6:	d104      	bne.n	400ce2 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cdc:	4b01      	ldr	r3, [pc, #4]	; (400ce4 <PWM_1_CLOCK_init+0x18>)
  400cde:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400ce2:	4770      	bx	lr
  400ce4:	400e0600 	.word	0x400e0600

00400ce8 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  400ce8:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  400cea:	4b06      	ldr	r3, [pc, #24]	; (400d04 <PWM_1_init+0x1c>)
  400cec:	4798      	blx	r3
	PWM_1_PORT_init();
  400cee:	4b06      	ldr	r3, [pc, #24]	; (400d08 <PWM_1_init+0x20>)
  400cf0:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400cf2:	4b06      	ldr	r3, [pc, #24]	; (400d0c <PWM_1_init+0x24>)
  400cf4:	4798      	blx	r3
  400cf6:	4602      	mov	r2, r0
  400cf8:	4905      	ldr	r1, [pc, #20]	; (400d10 <PWM_1_init+0x28>)
  400cfa:	4806      	ldr	r0, [pc, #24]	; (400d14 <PWM_1_init+0x2c>)
  400cfc:	4b06      	ldr	r3, [pc, #24]	; (400d18 <PWM_1_init+0x30>)
  400cfe:	4798      	blx	r3
  400d00:	bd08      	pop	{r3, pc}
  400d02:	bf00      	nop
  400d04:	00400ccd 	.word	0x00400ccd
  400d08:	00400c95 	.word	0x00400c95
  400d0c:	00402299 	.word	0x00402299
  400d10:	4005c000 	.word	0x4005c000
  400d14:	20400770 	.word	0x20400770
  400d18:	004013c9 	.word	0x004013c9

00400d1c <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400d1c:	4b06      	ldr	r3, [pc, #24]	; (400d38 <ENCODER_A_PORT_init+0x1c>)
  400d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d20:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400d24:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d26:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d28:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  400d2c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d2e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400d32:	605a      	str	r2, [r3, #4]
  400d34:	4770      	bx	lr
  400d36:	bf00      	nop
  400d38:	400e0e00 	.word	0x400e0e00

00400d3c <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  400d3c:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400d3e:	4b09      	ldr	r3, [pc, #36]	; (400d64 <ENCODER_A_init+0x28>)
  400d40:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400d42:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400d46:	d103      	bne.n	400d50 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400d48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400d4c:	4b05      	ldr	r3, [pc, #20]	; (400d64 <ENCODER_A_init+0x28>)
  400d4e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  400d50:	4b05      	ldr	r3, [pc, #20]	; (400d68 <ENCODER_A_init+0x2c>)
  400d52:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  400d54:	4b05      	ldr	r3, [pc, #20]	; (400d6c <ENCODER_A_init+0x30>)
  400d56:	4798      	blx	r3
  400d58:	4602      	mov	r2, r0
  400d5a:	4905      	ldr	r1, [pc, #20]	; (400d70 <ENCODER_A_init+0x34>)
  400d5c:	4805      	ldr	r0, [pc, #20]	; (400d74 <ENCODER_A_init+0x38>)
  400d5e:	4b06      	ldr	r3, [pc, #24]	; (400d78 <ENCODER_A_init+0x3c>)
  400d60:	4798      	blx	r3
  400d62:	bd08      	pop	{r3, pc}
  400d64:	400e0600 	.word	0x400e0600
  400d68:	00400d1d 	.word	0x00400d1d
  400d6c:	0040246f 	.word	0x0040246f
  400d70:	4000c000 	.word	0x4000c000
  400d74:	20400698 	.word	0x20400698
  400d78:	00401579 	.word	0x00401579

00400d7c <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d7c:	4b06      	ldr	r3, [pc, #24]	; (400d98 <ENCODER_B_PORT_init+0x1c>)
  400d7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d80:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  400d84:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400d86:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d88:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  400d8c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400d92:	605a      	str	r2, [r3, #4]
  400d94:	4770      	bx	lr
  400d96:	bf00      	nop
  400d98:	400e1400 	.word	0x400e1400

00400d9c <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  400d9c:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400d9e:	4b0a      	ldr	r3, [pc, #40]	; (400dc8 <ENCODER_B_init+0x2c>)
  400da0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400da4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  400da8:	d104      	bne.n	400db4 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400daa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400dae:	4b06      	ldr	r3, [pc, #24]	; (400dc8 <ENCODER_B_init+0x2c>)
  400db0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  400db4:	4b05      	ldr	r3, [pc, #20]	; (400dcc <ENCODER_B_init+0x30>)
  400db6:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  400db8:	4b05      	ldr	r3, [pc, #20]	; (400dd0 <ENCODER_B_init+0x34>)
  400dba:	4798      	blx	r3
  400dbc:	4602      	mov	r2, r0
  400dbe:	4905      	ldr	r1, [pc, #20]	; (400dd4 <ENCODER_B_init+0x38>)
  400dc0:	4805      	ldr	r0, [pc, #20]	; (400dd8 <ENCODER_B_init+0x3c>)
  400dc2:	4b06      	ldr	r3, [pc, #24]	; (400ddc <ENCODER_B_init+0x40>)
  400dc4:	4798      	blx	r3
  400dc6:	bd08      	pop	{r3, pc}
  400dc8:	400e0600 	.word	0x400e0600
  400dcc:	00400d7d 	.word	0x00400d7d
  400dd0:	0040246f 	.word	0x0040246f
  400dd4:	40054000 	.word	0x40054000
  400dd8:	204005e8 	.word	0x204005e8
  400ddc:	00401579 	.word	0x00401579

00400de0 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400de0:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400de2:	4802      	ldr	r0, [pc, #8]	; (400dec <delay_driver_init+0xc>)
  400de4:	4b02      	ldr	r3, [pc, #8]	; (400df0 <delay_driver_init+0x10>)
  400de6:	4798      	blx	r3
  400de8:	bd08      	pop	{r3, pc}
  400dea:	bf00      	nop
  400dec:	e000e010 	.word	0xe000e010
  400df0:	004011d9 	.word	0x004011d9

00400df4 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400df4:	4b0f      	ldr	r3, [pc, #60]	; (400e34 <EDBG_COM_PORT_init+0x40>)
  400df6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400df8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400dfc:	671a      	str	r2, [r3, #112]	; 0x70
  400dfe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e00:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400e04:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400e0a:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400e0c:	4a0a      	ldr	r2, [pc, #40]	; (400e38 <EDBG_COM_PORT_init+0x44>)
  400e0e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400e12:	f043 0310 	orr.w	r3, r3, #16
  400e16:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400e1a:	4b08      	ldr	r3, [pc, #32]	; (400e3c <EDBG_COM_PORT_init+0x48>)
  400e1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e1e:	f042 0210 	orr.w	r2, r2, #16
  400e22:	671a      	str	r2, [r3, #112]	; 0x70
  400e24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e26:	f042 0210 	orr.w	r2, r2, #16
  400e2a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e2c:	2210      	movs	r2, #16
  400e2e:	605a      	str	r2, [r3, #4]
  400e30:	4770      	bx	lr
  400e32:	bf00      	nop
  400e34:	400e0e00 	.word	0x400e0e00
  400e38:	40088000 	.word	0x40088000
  400e3c:	400e1000 	.word	0x400e1000

00400e40 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400e40:	4b04      	ldr	r3, [pc, #16]	; (400e54 <EDBG_COM_CLOCK_init+0x14>)
  400e42:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400e44:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400e48:	d103      	bne.n	400e52 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400e4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400e4e:	4b01      	ldr	r3, [pc, #4]	; (400e54 <EDBG_COM_CLOCK_init+0x14>)
  400e50:	611a      	str	r2, [r3, #16]
  400e52:	4770      	bx	lr
  400e54:	400e0600 	.word	0x400e0600

00400e58 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  400e58:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  400e5a:	4b06      	ldr	r3, [pc, #24]	; (400e74 <EDBG_COM_init+0x1c>)
  400e5c:	4798      	blx	r3
	EDBG_COM_PORT_init();
  400e5e:	4b06      	ldr	r3, [pc, #24]	; (400e78 <EDBG_COM_init+0x20>)
  400e60:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  400e62:	4b06      	ldr	r3, [pc, #24]	; (400e7c <EDBG_COM_init+0x24>)
  400e64:	4798      	blx	r3
  400e66:	4602      	mov	r2, r0
  400e68:	4905      	ldr	r1, [pc, #20]	; (400e80 <EDBG_COM_init+0x28>)
  400e6a:	4806      	ldr	r0, [pc, #24]	; (400e84 <EDBG_COM_init+0x2c>)
  400e6c:	4b06      	ldr	r3, [pc, #24]	; (400e88 <EDBG_COM_init+0x30>)
  400e6e:	4798      	blx	r3
  400e70:	bd08      	pop	{r3, pc}
  400e72:	bf00      	nop
  400e74:	00400e41 	.word	0x00400e41
  400e78:	00400df5 	.word	0x00400df5
  400e7c:	004026b1 	.word	0x004026b1
  400e80:	40028000 	.word	0x40028000
  400e84:	2040068c 	.word	0x2040068c
  400e88:	004016c1 	.word	0x004016c1

00400e8c <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  400e8c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400e8e:	4b37      	ldr	r3, [pc, #220]	; (400f6c <system_init+0xe0>)
  400e90:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400e92:	4b37      	ldr	r3, [pc, #220]	; (400f70 <system_init+0xe4>)
  400e94:	699b      	ldr	r3, [r3, #24]
  400e96:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400e9a:	d103      	bne.n	400ea4 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400ea0:	4b33      	ldr	r3, [pc, #204]	; (400f70 <system_init+0xe4>)
  400ea2:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400ea4:	4b32      	ldr	r3, [pc, #200]	; (400f70 <system_init+0xe4>)
  400ea6:	699b      	ldr	r3, [r3, #24]
  400ea8:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400eac:	d103      	bne.n	400eb6 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400eae:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400eb2:	4b2f      	ldr	r3, [pc, #188]	; (400f70 <system_init+0xe4>)
  400eb4:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400eb6:	4b2e      	ldr	r3, [pc, #184]	; (400f70 <system_init+0xe4>)
  400eb8:	699b      	ldr	r3, [r3, #24]
  400eba:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400ebe:	d103      	bne.n	400ec8 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400ec0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400ec4:	4b2a      	ldr	r3, [pc, #168]	; (400f70 <system_init+0xe4>)
  400ec6:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400ec8:	4b29      	ldr	r3, [pc, #164]	; (400f70 <system_init+0xe4>)
  400eca:	699b      	ldr	r3, [r3, #24]
  400ecc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400ed0:	d103      	bne.n	400eda <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400ed2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400ed6:	4b26      	ldr	r3, [pc, #152]	; (400f70 <system_init+0xe4>)
  400ed8:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400eda:	4a26      	ldr	r2, [pc, #152]	; (400f74 <system_init+0xe8>)
  400edc:	6853      	ldr	r3, [r2, #4]
  400ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400ee2:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  400ee4:	4b24      	ldr	r3, [pc, #144]	; (400f78 <system_init+0xec>)
  400ee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400eea:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  400eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  400ef0:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  400ef2:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400ef4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  400ef8:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400efa:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400efc:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f02:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400f04:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400f06:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400f0c:	f44f 7080 	mov.w	r0, #256	; 0x100
  400f10:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400f12:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400f14:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400f16:	f44f 7000 	mov.w	r0, #512	; 0x200
  400f1a:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400f1c:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400f1e:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400f20:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400f24:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400f26:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400f28:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400f2a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f2e:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400f30:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400f32:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400f34:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400f36:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400f38:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  400f3a:	4b10      	ldr	r3, [pc, #64]	; (400f7c <system_init+0xf0>)
  400f3c:	4798      	blx	r3
	ADC_1_init();
  400f3e:	4b10      	ldr	r3, [pc, #64]	; (400f80 <system_init+0xf4>)
  400f40:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  400f42:	4b10      	ldr	r3, [pc, #64]	; (400f84 <system_init+0xf8>)
  400f44:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  400f46:	4b10      	ldr	r3, [pc, #64]	; (400f88 <system_init+0xfc>)
  400f48:	4798      	blx	r3
	EXTERNAL_IRQ_B_init();
  400f4a:	4b10      	ldr	r3, [pc, #64]	; (400f8c <system_init+0x100>)
  400f4c:	4798      	blx	r3

	PWM_0_init();
  400f4e:	4b10      	ldr	r3, [pc, #64]	; (400f90 <system_init+0x104>)
  400f50:	4798      	blx	r3

	PWM_1_init();
  400f52:	4b10      	ldr	r3, [pc, #64]	; (400f94 <system_init+0x108>)
  400f54:	4798      	blx	r3
	ENCODER_A_init();
  400f56:	4b10      	ldr	r3, [pc, #64]	; (400f98 <system_init+0x10c>)
  400f58:	4798      	blx	r3
	ENCODER_B_init();
  400f5a:	4b10      	ldr	r3, [pc, #64]	; (400f9c <system_init+0x110>)
  400f5c:	4798      	blx	r3

	delay_driver_init();
  400f5e:	4b10      	ldr	r3, [pc, #64]	; (400fa0 <system_init+0x114>)
  400f60:	4798      	blx	r3

	EDBG_COM_init();
  400f62:	4b10      	ldr	r3, [pc, #64]	; (400fa4 <system_init+0x118>)
  400f64:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  400f66:	4b10      	ldr	r3, [pc, #64]	; (400fa8 <system_init+0x11c>)
  400f68:	4798      	blx	r3
  400f6a:	bd08      	pop	{r3, pc}
  400f6c:	00401b01 	.word	0x00401b01
  400f70:	400e0600 	.word	0x400e0600
  400f74:	400e1850 	.word	0x400e1850
  400f78:	400e0e00 	.word	0x400e0e00
  400f7c:	00400ac5 	.word	0x00400ac5
  400f80:	00400a1d 	.word	0x00400a1d
  400f84:	00400b99 	.word	0x00400b99
  400f88:	00400bb1 	.word	0x00400bb1
  400f8c:	00400bd1 	.word	0x00400bd1
  400f90:	00400c61 	.word	0x00400c61
  400f94:	00400ce9 	.word	0x00400ce9
  400f98:	00400d3d 	.word	0x00400d3d
  400f9c:	00400d9d 	.word	0x00400d9d
  400fa0:	00400de1 	.word	0x00400de1
  400fa4:	00400e59 	.word	0x00400e59
  400fa8:	00401251 	.word	0x00401251

00400fac <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  400fac:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  400fae:	6983      	ldr	r3, [r0, #24]
  400fb0:	b103      	cbz	r3, 400fb4 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  400fb2:	4798      	blx	r3
  400fb4:	bd08      	pop	{r3, pc}

00400fb6 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  400fb6:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  400fb8:	69c3      	ldr	r3, [r0, #28]
  400fba:	b103      	cbz	r3, 400fbe <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  400fbc:	4798      	blx	r3
  400fbe:	bd08      	pop	{r3, pc}

00400fc0 <adc_async_channel_conversion_done>:
{
  400fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400fc4:	4605      	mov	r5, r0
  400fc6:	4688      	mov	r8, r1
  400fc8:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  400fca:	6a03      	ldr	r3, [r0, #32]
  400fcc:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  400fce:	6a87      	ldr	r7, [r0, #40]	; 0x28
  400fd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400fd4:	00de      	lsls	r6, r3, #3
  400fd6:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  400fd8:	f104 0a04 	add.w	sl, r4, #4
  400fdc:	b2d1      	uxtb	r1, r2
  400fde:	4650      	mov	r0, sl
  400fe0:	4b0c      	ldr	r3, [pc, #48]	; (401014 <adc_async_channel_conversion_done+0x54>)
  400fe2:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  400fe4:	4628      	mov	r0, r5
  400fe6:	4b0c      	ldr	r3, [pc, #48]	; (401018 <adc_async_channel_conversion_done+0x58>)
  400fe8:	4798      	blx	r3
  400fea:	2801      	cmp	r0, #1
  400fec:	d907      	bls.n	400ffe <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  400fee:	ea4f 2119 	mov.w	r1, r9, lsr #8
  400ff2:	4650      	mov	r0, sl
  400ff4:	4b07      	ldr	r3, [pc, #28]	; (401014 <adc_async_channel_conversion_done+0x54>)
  400ff6:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  400ff8:	8aa3      	ldrh	r3, [r4, #20]
  400ffa:	3301      	adds	r3, #1
  400ffc:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  400ffe:	8aa3      	ldrh	r3, [r4, #20]
  401000:	3301      	adds	r3, #1
  401002:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  401004:	59bb      	ldr	r3, [r7, r6]
  401006:	b113      	cbz	r3, 40100e <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  401008:	4641      	mov	r1, r8
  40100a:	4628      	mov	r0, r5
  40100c:	4798      	blx	r3
  40100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401012:	bf00      	nop
  401014:	004017d9 	.word	0x004017d9
  401018:	00401ae9 	.word	0x00401ae9

0040101c <adc_async_init>:
{
  40101c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401020:	4616      	mov	r6, r2
  401022:	461c      	mov	r4, r3
  401024:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  401028:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  40102a:	4607      	mov	r7, r0
  40102c:	4689      	mov	r9, r1
  40102e:	2800      	cmp	r0, #0
  401030:	bf18      	it	ne
  401032:	2900      	cmpne	r1, #0
  401034:	d00b      	beq.n	40104e <adc_async_init+0x32>
  401036:	1c13      	adds	r3, r2, #0
  401038:	bf18      	it	ne
  40103a:	2301      	movne	r3, #1
  40103c:	f1b8 0f00 	cmp.w	r8, #0
  401040:	d017      	beq.n	401072 <adc_async_init+0x56>
  401042:	b1b3      	cbz	r3, 401072 <adc_async_init+0x56>
  401044:	b10d      	cbz	r5, 40104a <adc_async_init+0x2e>
  401046:	2001      	movs	r0, #1
  401048:	e002      	b.n	401050 <adc_async_init+0x34>
  40104a:	2000      	movs	r0, #0
  40104c:	e000      	b.n	401050 <adc_async_init+0x34>
  40104e:	2000      	movs	r0, #0
  401050:	f8df b068 	ldr.w	fp, [pc, #104]	; 4010bc <adc_async_init+0xa0>
  401054:	223f      	movs	r2, #63	; 0x3f
  401056:	4659      	mov	r1, fp
  401058:	f8df a064 	ldr.w	sl, [pc, #100]	; 4010c0 <adc_async_init+0xa4>
  40105c:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  40105e:	1c60      	adds	r0, r4, #1
  401060:	2240      	movs	r2, #64	; 0x40
  401062:	4659      	mov	r1, fp
  401064:	4580      	cmp	r8, r0
  401066:	bfcc      	ite	gt
  401068:	2000      	movgt	r0, #0
  40106a:	2001      	movle	r0, #1
  40106c:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  40106e:	2300      	movs	r3, #0
  401070:	e005      	b.n	40107e <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  401072:	2000      	movs	r0, #0
  401074:	e7ec      	b.n	401050 <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  401076:	22ff      	movs	r2, #255	; 0xff
  401078:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  40107a:	3301      	adds	r3, #1
  40107c:	b2db      	uxtb	r3, r3
  40107e:	42a3      	cmp	r3, r4
  401080:	d9f9      	bls.n	401076 <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  401082:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  401084:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  401088:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  40108c:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  40108e:	4649      	mov	r1, r9
  401090:	4638      	mov	r0, r7
  401092:	4b06      	ldr	r3, [pc, #24]	; (4010ac <adc_async_init+0x90>)
  401094:	4798      	blx	r3
	if (init_status) {
  401096:	4603      	mov	r3, r0
  401098:	b928      	cbnz	r0, 4010a6 <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  40109a:	4a05      	ldr	r2, [pc, #20]	; (4010b0 <adc_async_init+0x94>)
  40109c:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  40109e:	4a05      	ldr	r2, [pc, #20]	; (4010b4 <adc_async_init+0x98>)
  4010a0:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  4010a2:	4a05      	ldr	r2, [pc, #20]	; (4010b8 <adc_async_init+0x9c>)
  4010a4:	607a      	str	r2, [r7, #4]
}
  4010a6:	4618      	mov	r0, r3
  4010a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4010ac:	00401a29 	.word	0x00401a29
  4010b0:	00400fc1 	.word	0x00400fc1
  4010b4:	00400fad 	.word	0x00400fad
  4010b8:	00400fb7 	.word	0x00400fb7
  4010bc:	00405cc8 	.word	0x00405cc8
  4010c0:	00401735 	.word	0x00401735

004010c4 <adc_async_register_channel_buffer>:
{
  4010c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4010c8:	460e      	mov	r6, r1
  4010ca:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  4010cc:	4605      	mov	r5, r0
  4010ce:	4690      	mov	r8, r2
  4010d0:	2800      	cmp	r0, #0
  4010d2:	bf18      	it	ne
  4010d4:	2a00      	cmpne	r2, #0
  4010d6:	d002      	beq.n	4010de <adc_async_register_channel_buffer+0x1a>
  4010d8:	b9c3      	cbnz	r3, 40110c <adc_async_register_channel_buffer+0x48>
  4010da:	2000      	movs	r0, #0
  4010dc:	e000      	b.n	4010e0 <adc_async_register_channel_buffer+0x1c>
  4010de:	2000      	movs	r0, #0
  4010e0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401178 <adc_async_register_channel_buffer+0xb4>
  4010e4:	2266      	movs	r2, #102	; 0x66
  4010e6:	4649      	mov	r1, r9
  4010e8:	4c21      	ldr	r4, [pc, #132]	; (401170 <adc_async_register_channel_buffer+0xac>)
  4010ea:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  4010ec:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  4010f0:	2267      	movs	r2, #103	; 0x67
  4010f2:	4649      	mov	r1, r9
  4010f4:	42b0      	cmp	r0, r6
  4010f6:	bf34      	ite	cc
  4010f8:	2000      	movcc	r0, #0
  4010fa:	2001      	movcs	r0, #1
  4010fc:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  4010fe:	6a29      	ldr	r1, [r5, #32]
  401100:	5d8b      	ldrb	r3, [r1, r6]
  401102:	2bff      	cmp	r3, #255	; 0xff
  401104:	d12b      	bne.n	40115e <adc_async_register_channel_buffer+0x9a>
  401106:	2400      	movs	r4, #0
  401108:	4623      	mov	r3, r4
  40110a:	e003      	b.n	401114 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  40110c:	2001      	movs	r0, #1
  40110e:	e7e7      	b.n	4010e0 <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  401110:	3301      	adds	r3, #1
  401112:	b2db      	uxtb	r3, r3
  401114:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  401118:	4293      	cmp	r3, r2
  40111a:	d805      	bhi.n	401128 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  40111c:	5cca      	ldrb	r2, [r1, r3]
  40111e:	2aff      	cmp	r2, #255	; 0xff
  401120:	d0f6      	beq.n	401110 <adc_async_register_channel_buffer+0x4c>
			index++;
  401122:	3401      	adds	r4, #1
  401124:	b2e4      	uxtb	r4, r4
  401126:	e7f3      	b.n	401110 <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  401128:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  40112c:	429c      	cmp	r4, r3
  40112e:	d819      	bhi.n	401164 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  401130:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  401132:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  401136:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  40113a:	4448      	add	r0, r9
  40113c:	463a      	mov	r2, r7
  40113e:	4641      	mov	r1, r8
  401140:	3004      	adds	r0, #4
  401142:	4b0c      	ldr	r3, [pc, #48]	; (401174 <adc_async_register_channel_buffer+0xb0>)
  401144:	4798      	blx	r3
  401146:	4602      	mov	r2, r0
  401148:	b978      	cbnz	r0, 40116a <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  40114a:	6a2b      	ldr	r3, [r5, #32]
  40114c:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  40114e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401150:	4499      	add	r9, r3
  401152:	2300      	movs	r3, #0
  401154:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  401158:	4610      	mov	r0, r2
  40115a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  40115e:	f06f 020c 	mvn.w	r2, #12
  401162:	e7f9      	b.n	401158 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  401164:	f06f 021b 	mvn.w	r2, #27
  401168:	e7f6      	b.n	401158 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  40116a:	f06f 020c 	mvn.w	r2, #12
  40116e:	e7f3      	b.n	401158 <adc_async_register_channel_buffer+0x94>
  401170:	00401735 	.word	0x00401735
  401174:	00401795 	.word	0x00401795
  401178:	00405cc8 	.word	0x00405cc8

0040117c <adc_async_enable_channel>:
{
  40117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40117e:	460d      	mov	r5, r1
	ASSERT(descr);
  401180:	4f0b      	ldr	r7, [pc, #44]	; (4011b0 <adc_async_enable_channel+0x34>)
  401182:	4604      	mov	r4, r0
  401184:	2283      	movs	r2, #131	; 0x83
  401186:	4639      	mov	r1, r7
  401188:	3000      	adds	r0, #0
  40118a:	bf18      	it	ne
  40118c:	2001      	movne	r0, #1
  40118e:	4e09      	ldr	r6, [pc, #36]	; (4011b4 <adc_async_enable_channel+0x38>)
  401190:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  401192:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  401196:	2284      	movs	r2, #132	; 0x84
  401198:	4639      	mov	r1, r7
  40119a:	42a8      	cmp	r0, r5
  40119c:	bf34      	ite	cc
  40119e:	2000      	movcc	r0, #0
  4011a0:	2001      	movcs	r0, #1
  4011a2:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  4011a4:	4629      	mov	r1, r5
  4011a6:	4620      	mov	r0, r4
  4011a8:	4b03      	ldr	r3, [pc, #12]	; (4011b8 <adc_async_enable_channel+0x3c>)
  4011aa:	4798      	blx	r3
}
  4011ac:	2000      	movs	r0, #0
  4011ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011b0:	00405cc8 	.word	0x00405cc8
  4011b4:	00401735 	.word	0x00401735
  4011b8:	00401add 	.word	0x00401add

004011bc <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4011bc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4011c0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4011c2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4011c4:	f3bf 8f5f 	dmb	sy
  4011c8:	4770      	bx	lr

004011ca <atomic_leave_critical>:
  4011ca:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4011ce:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4011d0:	f383 8810 	msr	PRIMASK, r3
  4011d4:	4770      	bx	lr
	...

004011d8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4011d8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4011da:	4b02      	ldr	r3, [pc, #8]	; (4011e4 <delay_init+0xc>)
  4011dc:	6018      	str	r0, [r3, #0]
  4011de:	4b02      	ldr	r3, [pc, #8]	; (4011e8 <delay_init+0x10>)
  4011e0:	4798      	blx	r3
  4011e2:	bd08      	pop	{r3, pc}
  4011e4:	20400318 	.word	0x20400318
  4011e8:	004022b1 	.word	0x004022b1

004011ec <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4011ec:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4011ee:	4b04      	ldr	r3, [pc, #16]	; (401200 <delay_ms+0x14>)
  4011f0:	681c      	ldr	r4, [r3, #0]
  4011f2:	4b04      	ldr	r3, [pc, #16]	; (401204 <delay_ms+0x18>)
  4011f4:	4798      	blx	r3
  4011f6:	4601      	mov	r1, r0
  4011f8:	4620      	mov	r0, r4
  4011fa:	4b03      	ldr	r3, [pc, #12]	; (401208 <delay_ms+0x1c>)
  4011fc:	4798      	blx	r3
  4011fe:	bd10      	pop	{r4, pc}
  401200:	20400318 	.word	0x20400318
  401204:	00401aed 	.word	0x00401aed
  401208:	004022bd 	.word	0x004022bd

0040120c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  40120c:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  40120e:	2504      	movs	r5, #4
  401210:	2400      	movs	r4, #0

	while (upper >= lower) {
  401212:	e007      	b.n	401224 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  401214:	4a0d      	ldr	r2, [pc, #52]	; (40124c <process_ext_irq+0x40>)
  401216:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40121a:	b1b3      	cbz	r3, 40124a <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  40121c:	4798      	blx	r3
  40121e:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  401220:	3a01      	subs	r2, #1
  401222:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  401224:	42ac      	cmp	r4, r5
  401226:	d810      	bhi.n	40124a <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  401228:	192b      	adds	r3, r5, r4
  40122a:	105b      	asrs	r3, r3, #1
  40122c:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  40122e:	2a03      	cmp	r2, #3
  401230:	d80b      	bhi.n	40124a <process_ext_irq+0x3e>
  401232:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  401234:	4905      	ldr	r1, [pc, #20]	; (40124c <process_ext_irq+0x40>)
  401236:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  40123a:	6849      	ldr	r1, [r1, #4]
  40123c:	4281      	cmp	r1, r0
  40123e:	d0e9      	beq.n	401214 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  401240:	4281      	cmp	r1, r0
  401242:	d2ed      	bcs.n	401220 <process_ext_irq+0x14>
			lower = middle + 1;
  401244:	3201      	adds	r2, #1
  401246:	b2d4      	uxtb	r4, r2
  401248:	e7ec      	b.n	401224 <process_ext_irq+0x18>
  40124a:	bd38      	pop	{r3, r4, r5, pc}
  40124c:	2040031c 	.word	0x2040031c

00401250 <ext_irq_init>:
{
  401250:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401252:	2300      	movs	r3, #0
  401254:	e00a      	b.n	40126c <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  401256:	4a08      	ldr	r2, [pc, #32]	; (401278 <ext_irq_init+0x28>)
  401258:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  40125c:	f04f 30ff 	mov.w	r0, #4294967295
  401260:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  401262:	2100      	movs	r1, #0
  401264:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401268:	3301      	adds	r3, #1
  40126a:	b29b      	uxth	r3, r3
  40126c:	2b03      	cmp	r3, #3
  40126e:	d9f2      	bls.n	401256 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  401270:	4802      	ldr	r0, [pc, #8]	; (40127c <ext_irq_init+0x2c>)
  401272:	4b03      	ldr	r3, [pc, #12]	; (401280 <ext_irq_init+0x30>)
  401274:	4798      	blx	r3
}
  401276:	bd08      	pop	{r3, pc}
  401278:	2040031c 	.word	0x2040031c
  40127c:	0040120d 	.word	0x0040120d
  401280:	00401e5d 	.word	0x00401e5d

00401284 <ext_irq_register>:
{
  401284:	b5f0      	push	{r4, r5, r6, r7, lr}
  401286:	b083      	sub	sp, #12
  401288:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  40128a:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  40128c:	2b03      	cmp	r3, #3
  40128e:	d80e      	bhi.n	4012ae <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  401290:	4618      	mov	r0, r3
  401292:	4a2e      	ldr	r2, [pc, #184]	; (40134c <ext_irq_register+0xc8>)
  401294:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  401298:	6852      	ldr	r2, [r2, #4]
  40129a:	42aa      	cmp	r2, r5
  40129c:	d002      	beq.n	4012a4 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  40129e:	3301      	adds	r3, #1
  4012a0:	b2db      	uxtb	r3, r3
  4012a2:	e7f3      	b.n	40128c <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  4012a4:	4b29      	ldr	r3, [pc, #164]	; (40134c <ext_irq_register+0xc8>)
  4012a6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  4012aa:	2701      	movs	r7, #1
			break;
  4012ac:	e000      	b.n	4012b0 <ext_irq_register+0x2c>
	bool    found = false;
  4012ae:	2700      	movs	r7, #0
	if (NULL == cb) {
  4012b0:	b159      	cbz	r1, 4012ca <ext_irq_register+0x46>
	if (!found) {
  4012b2:	2f00      	cmp	r7, #0
  4012b4:	d13d      	bne.n	401332 <ext_irq_register+0xae>
  4012b6:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4012b8:	2e03      	cmp	r6, #3
  4012ba:	d813      	bhi.n	4012e4 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  4012bc:	4b23      	ldr	r3, [pc, #140]	; (40134c <ext_irq_register+0xc8>)
  4012be:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  4012c2:	b143      	cbz	r3, 4012d6 <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4012c4:	3601      	adds	r6, #1
  4012c6:	b2f6      	uxtb	r6, r6
  4012c8:	e7f6      	b.n	4012b8 <ext_irq_register+0x34>
		if (!found) {
  4012ca:	2f00      	cmp	r7, #0
  4012cc:	d038      	beq.n	401340 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  4012ce:	4628      	mov	r0, r5
  4012d0:	4b1f      	ldr	r3, [pc, #124]	; (401350 <ext_irq_register+0xcc>)
  4012d2:	4798      	blx	r3
  4012d4:	e032      	b.n	40133c <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  4012d6:	4b1d      	ldr	r3, [pc, #116]	; (40134c <ext_irq_register+0xc8>)
  4012d8:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  4012dc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4012e0:	605d      	str	r5, [r3, #4]
				found           = true;
  4012e2:	2701      	movs	r7, #1
  4012e4:	2300      	movs	r3, #0
  4012e6:	e001      	b.n	4012ec <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  4012e8:	3301      	adds	r3, #1
  4012ea:	b2db      	uxtb	r3, r3
  4012ec:	2b03      	cmp	r3, #3
  4012ee:	bf98      	it	ls
  4012f0:	2e03      	cmpls	r6, #3
  4012f2:	d81e      	bhi.n	401332 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  4012f4:	46b6      	mov	lr, r6
  4012f6:	4a15      	ldr	r2, [pc, #84]	; (40134c <ext_irq_register+0xc8>)
  4012f8:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  4012fc:	6848      	ldr	r0, [r1, #4]
  4012fe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  401302:	6852      	ldr	r2, [r2, #4]
  401304:	4290      	cmp	r0, r2
  401306:	d2ef      	bcs.n	4012e8 <ext_irq_register+0x64>
  401308:	f1b2 3fff 	cmp.w	r2, #4294967295
  40130c:	d0ec      	beq.n	4012e8 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  40130e:	4c0f      	ldr	r4, [pc, #60]	; (40134c <ext_irq_register+0xc8>)
  401310:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  401314:	e892 0003 	ldmia.w	r2, {r0, r1}
  401318:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  40131c:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  401320:	e894 0003 	ldmia.w	r4, {r0, r1}
  401324:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  401328:	e89d 0003 	ldmia.w	sp, {r0, r1}
  40132c:	e884 0003 	stmia.w	r4, {r0, r1}
  401330:	e7da      	b.n	4012e8 <ext_irq_register+0x64>
	if (!found) {
  401332:	b147      	cbz	r7, 401346 <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  401334:	2101      	movs	r1, #1
  401336:	4628      	mov	r0, r5
  401338:	4b05      	ldr	r3, [pc, #20]	; (401350 <ext_irq_register+0xcc>)
  40133a:	4798      	blx	r3
}
  40133c:	b003      	add	sp, #12
  40133e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  401340:	f06f 000c 	mvn.w	r0, #12
  401344:	e7fa      	b.n	40133c <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  401346:	f06f 000c 	mvn.w	r0, #12
  40134a:	e7f7      	b.n	40133c <ext_irq_register+0xb8>
  40134c:	2040031c 	.word	0x2040031c
  401350:	00401e8d 	.word	0x00401e8d

00401354 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401354:	b570      	push	{r4, r5, r6, lr}
  401356:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  401358:	4604      	mov	r4, r0
  40135a:	460d      	mov	r5, r1
  40135c:	2800      	cmp	r0, #0
  40135e:	bf18      	it	ne
  401360:	2900      	cmpne	r1, #0
  401362:	bf14      	ite	ne
  401364:	2001      	movne	r0, #1
  401366:	2000      	moveq	r0, #0
  401368:	2234      	movs	r2, #52	; 0x34
  40136a:	4904      	ldr	r1, [pc, #16]	; (40137c <io_write+0x28>)
  40136c:	4b04      	ldr	r3, [pc, #16]	; (401380 <io_write+0x2c>)
  40136e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  401370:	6823      	ldr	r3, [r4, #0]
  401372:	4632      	mov	r2, r6
  401374:	4629      	mov	r1, r5
  401376:	4620      	mov	r0, r4
  401378:	4798      	blx	r3
}
  40137a:	bd70      	pop	{r4, r5, r6, pc}
  40137c:	00405ce4 	.word	0x00405ce4
  401380:	00401735 	.word	0x00401735

00401384 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401384:	b570      	push	{r4, r5, r6, lr}
  401386:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  401388:	4604      	mov	r4, r0
  40138a:	460d      	mov	r5, r1
  40138c:	2800      	cmp	r0, #0
  40138e:	bf18      	it	ne
  401390:	2900      	cmpne	r1, #0
  401392:	bf14      	ite	ne
  401394:	2001      	movne	r0, #1
  401396:	2000      	moveq	r0, #0
  401398:	223d      	movs	r2, #61	; 0x3d
  40139a:	4904      	ldr	r1, [pc, #16]	; (4013ac <io_read+0x28>)
  40139c:	4b04      	ldr	r3, [pc, #16]	; (4013b0 <io_read+0x2c>)
  40139e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  4013a0:	6863      	ldr	r3, [r4, #4]
  4013a2:	4632      	mov	r2, r6
  4013a4:	4629      	mov	r1, r5
  4013a6:	4620      	mov	r0, r4
  4013a8:	4798      	blx	r3
}
  4013aa:	bd70      	pop	{r4, r5, r6, pc}
  4013ac:	00405ce4 	.word	0x00405ce4
  4013b0:	00401735 	.word	0x00401735

004013b4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  4013b4:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  4013b6:	6943      	ldr	r3, [r0, #20]
  4013b8:	b103      	cbz	r3, 4013bc <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  4013ba:	4798      	blx	r3
  4013bc:	bd08      	pop	{r3, pc}

004013be <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  4013be:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  4013c0:	6983      	ldr	r3, [r0, #24]
  4013c2:	b103      	cbz	r3, 4013c6 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  4013c4:	4798      	blx	r3
  4013c6:	bd08      	pop	{r3, pc}

004013c8 <pwm_init>:
{
  4013c8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4013ca:	4604      	mov	r4, r0
  4013cc:	460d      	mov	r5, r1
  4013ce:	2800      	cmp	r0, #0
  4013d0:	bf18      	it	ne
  4013d2:	2900      	cmpne	r1, #0
  4013d4:	bf14      	ite	ne
  4013d6:	2001      	movne	r0, #1
  4013d8:	2000      	moveq	r0, #0
  4013da:	2233      	movs	r2, #51	; 0x33
  4013dc:	4906      	ldr	r1, [pc, #24]	; (4013f8 <pwm_init+0x30>)
  4013de:	4b07      	ldr	r3, [pc, #28]	; (4013fc <pwm_init+0x34>)
  4013e0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  4013e2:	4629      	mov	r1, r5
  4013e4:	4620      	mov	r0, r4
  4013e6:	4b06      	ldr	r3, [pc, #24]	; (401400 <pwm_init+0x38>)
  4013e8:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  4013ea:	4b06      	ldr	r3, [pc, #24]	; (401404 <pwm_init+0x3c>)
  4013ec:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  4013ee:	4b06      	ldr	r3, [pc, #24]	; (401408 <pwm_init+0x40>)
  4013f0:	6063      	str	r3, [r4, #4]
}
  4013f2:	2000      	movs	r0, #0
  4013f4:	bd38      	pop	{r3, r4, r5, pc}
  4013f6:	bf00      	nop
  4013f8:	00405cf8 	.word	0x00405cf8
  4013fc:	00401735 	.word	0x00401735
  401400:	0040202d 	.word	0x0040202d
  401404:	004013b5 	.word	0x004013b5
  401408:	004013bf 	.word	0x004013bf

0040140c <pwm_enable>:
{
  40140c:	b510      	push	{r4, lr}
	ASSERT(descr);
  40140e:	4604      	mov	r4, r0
  401410:	224a      	movs	r2, #74	; 0x4a
  401412:	4909      	ldr	r1, [pc, #36]	; (401438 <pwm_enable+0x2c>)
  401414:	3000      	adds	r0, #0
  401416:	bf18      	it	ne
  401418:	2001      	movne	r0, #1
  40141a:	4b08      	ldr	r3, [pc, #32]	; (40143c <pwm_enable+0x30>)
  40141c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  40141e:	4620      	mov	r0, r4
  401420:	4b07      	ldr	r3, [pc, #28]	; (401440 <pwm_enable+0x34>)
  401422:	4798      	blx	r3
  401424:	b920      	cbnz	r0, 401430 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  401426:	4620      	mov	r0, r4
  401428:	4b06      	ldr	r3, [pc, #24]	; (401444 <pwm_enable+0x38>)
  40142a:	4798      	blx	r3
	return ERR_NONE;
  40142c:	2000      	movs	r0, #0
  40142e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401430:	f06f 0010 	mvn.w	r0, #16
}
  401434:	bd10      	pop	{r4, pc}
  401436:	bf00      	nop
  401438:	00405cf8 	.word	0x00405cf8
  40143c:	00401735 	.word	0x00401735
  401440:	00402209 	.word	0x00402209
  401444:	00402165 	.word	0x00402165

00401448 <pwm_register_callback>:
{
  401448:	b570      	push	{r4, r5, r6, lr}
	switch (type) {
  40144a:	460d      	mov	r5, r1
  40144c:	b121      	cbz	r1, 401458 <pwm_register_callback+0x10>
  40144e:	2901      	cmp	r1, #1
  401450:	d015      	beq.n	40147e <pwm_register_callback+0x36>
		return ERR_INVALID_ARG;
  401452:	f06f 000c 	mvn.w	r0, #12
}
  401456:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.period = cb;
  401458:	6142      	str	r2, [r0, #20]
  40145a:	4616      	mov	r6, r2
  40145c:	4604      	mov	r4, r0
	ASSERT(descr);
  40145e:	2272      	movs	r2, #114	; 0x72
  401460:	4908      	ldr	r1, [pc, #32]	; (401484 <pwm_register_callback+0x3c>)
  401462:	3000      	adds	r0, #0
  401464:	bf18      	it	ne
  401466:	2001      	movne	r0, #1
  401468:	4b07      	ldr	r3, [pc, #28]	; (401488 <pwm_register_callback+0x40>)
  40146a:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
  40146c:	1c32      	adds	r2, r6, #0
  40146e:	bf18      	it	ne
  401470:	2201      	movne	r2, #1
  401472:	4629      	mov	r1, r5
  401474:	4620      	mov	r0, r4
  401476:	4b05      	ldr	r3, [pc, #20]	; (40148c <pwm_register_callback+0x44>)
  401478:	4798      	blx	r3
	return ERR_NONE;
  40147a:	2000      	movs	r0, #0
  40147c:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
  40147e:	6182      	str	r2, [r0, #24]
		break;
  401480:	e7eb      	b.n	40145a <pwm_register_callback+0x12>
  401482:	bf00      	nop
  401484:	00405cf8 	.word	0x00405cf8
  401488:	00401735 	.word	0x00401735
  40148c:	00402239 	.word	0x00402239

00401490 <pwm_set_parameters>:
{
  401490:	b570      	push	{r4, r5, r6, lr}
  401492:	460d      	mov	r5, r1
  401494:	4616      	mov	r6, r2
	ASSERT(descr);
  401496:	4604      	mov	r4, r0
  401498:	227c      	movs	r2, #124	; 0x7c
  40149a:	4906      	ldr	r1, [pc, #24]	; (4014b4 <pwm_set_parameters+0x24>)
  40149c:	3000      	adds	r0, #0
  40149e:	bf18      	it	ne
  4014a0:	2001      	movne	r0, #1
  4014a2:	4b05      	ldr	r3, [pc, #20]	; (4014b8 <pwm_set_parameters+0x28>)
  4014a4:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  4014a6:	4632      	mov	r2, r6
  4014a8:	4629      	mov	r1, r5
  4014aa:	4620      	mov	r0, r4
  4014ac:	4b03      	ldr	r3, [pc, #12]	; (4014bc <pwm_set_parameters+0x2c>)
  4014ae:	4798      	blx	r3
}
  4014b0:	2000      	movs	r0, #0
  4014b2:	bd70      	pop	{r4, r5, r6, pc}
  4014b4:	00405cf8 	.word	0x00405cf8
  4014b8:	00401735 	.word	0x00401735
  4014bc:	004021a9 	.word	0x004021a9

004014c0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  4014c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  4014c2:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  4014c4:	b117      	cbz	r7, 4014cc <timer_add_timer_task+0xc>
  4014c6:	463c      	mov	r4, r7
  4014c8:	2600      	movs	r6, #0
  4014ca:	e00b      	b.n	4014e4 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  4014cc:	4b0e      	ldr	r3, [pc, #56]	; (401508 <timer_add_timer_task+0x48>)
  4014ce:	4798      	blx	r3
		return;
  4014d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  4014d2:	68a5      	ldr	r5, [r4, #8]
  4014d4:	442b      	add	r3, r5
  4014d6:	1a9b      	subs	r3, r3, r2
  4014d8:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  4014da:	688d      	ldr	r5, [r1, #8]
  4014dc:	42ab      	cmp	r3, r5
  4014de:	d209      	bcs.n	4014f4 <timer_add_timer_task+0x34>
			break;
		prev = it;
  4014e0:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  4014e2:	6824      	ldr	r4, [r4, #0]
  4014e4:	b134      	cbz	r4, 4014f4 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  4014e6:	6863      	ldr	r3, [r4, #4]
  4014e8:	4293      	cmp	r3, r2
  4014ea:	d8f2      	bhi.n	4014d2 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  4014ec:	68a5      	ldr	r5, [r4, #8]
  4014ee:	1a9b      	subs	r3, r3, r2
  4014f0:	442b      	add	r3, r5
  4014f2:	e7f2      	b.n	4014da <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  4014f4:	42bc      	cmp	r4, r7
  4014f6:	d003      	beq.n	401500 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  4014f8:	4630      	mov	r0, r6
  4014fa:	4b04      	ldr	r3, [pc, #16]	; (40150c <timer_add_timer_task+0x4c>)
  4014fc:	4798      	blx	r3
  4014fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  401500:	4b01      	ldr	r3, [pc, #4]	; (401508 <timer_add_timer_task+0x48>)
  401502:	4798      	blx	r3
  401504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401506:	bf00      	nop
  401508:	00401751 	.word	0x00401751
  40150c:	0040177d 	.word	0x0040177d

00401510 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  401510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401512:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  401514:	6906      	ldr	r6, [r0, #16]
  401516:	3601      	adds	r6, #1
  401518:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  40151a:	7e03      	ldrb	r3, [r0, #24]
  40151c:	f013 0f01 	tst.w	r3, #1
  401520:	d105      	bne.n	40152e <timer_process_counted+0x1e>
  401522:	7e03      	ldrb	r3, [r0, #24]
  401524:	f013 0f02 	tst.w	r3, #2
  401528:	d101      	bne.n	40152e <timer_process_counted+0x1e>
  40152a:	4605      	mov	r5, r0
  40152c:	e009      	b.n	401542 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  40152e:	7e03      	ldrb	r3, [r0, #24]
  401530:	f043 0302 	orr.w	r3, r3, #2
  401534:	7603      	strb	r3, [r0, #24]
		return;
  401536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401538:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  40153a:	68e3      	ldr	r3, [r4, #12]
  40153c:	4620      	mov	r0, r4
  40153e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  401540:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  401542:	b19c      	cbz	r4, 40156c <timer_process_counted+0x5c>
  401544:	6863      	ldr	r3, [r4, #4]
  401546:	1af3      	subs	r3, r6, r3
  401548:	68a2      	ldr	r2, [r4, #8]
  40154a:	4293      	cmp	r3, r2
  40154c:	d30e      	bcc.n	40156c <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  40154e:	f105 0714 	add.w	r7, r5, #20
  401552:	4638      	mov	r0, r7
  401554:	4b06      	ldr	r3, [pc, #24]	; (401570 <timer_process_counted+0x60>)
  401556:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  401558:	7c23      	ldrb	r3, [r4, #16]
  40155a:	2b01      	cmp	r3, #1
  40155c:	d1ec      	bne.n	401538 <timer_process_counted+0x28>
			tmp->time_label = time;
  40155e:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  401560:	4632      	mov	r2, r6
  401562:	4621      	mov	r1, r4
  401564:	4638      	mov	r0, r7
  401566:	4b03      	ldr	r3, [pc, #12]	; (401574 <timer_process_counted+0x64>)
  401568:	4798      	blx	r3
  40156a:	e7e5      	b.n	401538 <timer_process_counted+0x28>
  40156c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40156e:	bf00      	nop
  401570:	00401785 	.word	0x00401785
  401574:	004014c1 	.word	0x004014c1

00401578 <timer_init>:
{
  401578:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40157a:	4604      	mov	r4, r0
  40157c:	460d      	mov	r5, r1
  40157e:	2800      	cmp	r0, #0
  401580:	bf18      	it	ne
  401582:	2900      	cmpne	r1, #0
  401584:	bf14      	ite	ne
  401586:	2001      	movne	r0, #1
  401588:	2000      	moveq	r0, #0
  40158a:	223b      	movs	r2, #59	; 0x3b
  40158c:	4905      	ldr	r1, [pc, #20]	; (4015a4 <timer_init+0x2c>)
  40158e:	4b06      	ldr	r3, [pc, #24]	; (4015a8 <timer_init+0x30>)
  401590:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  401592:	4629      	mov	r1, r5
  401594:	4620      	mov	r0, r4
  401596:	4b05      	ldr	r3, [pc, #20]	; (4015ac <timer_init+0x34>)
  401598:	4798      	blx	r3
	descr->time                           = 0;
  40159a:	2000      	movs	r0, #0
  40159c:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  40159e:	4b04      	ldr	r3, [pc, #16]	; (4015b0 <timer_init+0x38>)
  4015a0:	6023      	str	r3, [r4, #0]
}
  4015a2:	bd38      	pop	{r3, r4, r5, pc}
  4015a4:	00405d10 	.word	0x00405d10
  4015a8:	00401735 	.word	0x00401735
  4015ac:	00402375 	.word	0x00402375
  4015b0:	00401511 	.word	0x00401511

004015b4 <timer_start>:
{
  4015b4:	b510      	push	{r4, lr}
	ASSERT(descr);
  4015b6:	4604      	mov	r4, r0
  4015b8:	2253      	movs	r2, #83	; 0x53
  4015ba:	4909      	ldr	r1, [pc, #36]	; (4015e0 <timer_start+0x2c>)
  4015bc:	3000      	adds	r0, #0
  4015be:	bf18      	it	ne
  4015c0:	2001      	movne	r0, #1
  4015c2:	4b08      	ldr	r3, [pc, #32]	; (4015e4 <timer_start+0x30>)
  4015c4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  4015c6:	4620      	mov	r0, r4
  4015c8:	4b07      	ldr	r3, [pc, #28]	; (4015e8 <timer_start+0x34>)
  4015ca:	4798      	blx	r3
  4015cc:	b920      	cbnz	r0, 4015d8 <timer_start+0x24>
	_timer_start(&descr->device);
  4015ce:	4620      	mov	r0, r4
  4015d0:	4b06      	ldr	r3, [pc, #24]	; (4015ec <timer_start+0x38>)
  4015d2:	4798      	blx	r3
	return ERR_NONE;
  4015d4:	2000      	movs	r0, #0
  4015d6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4015d8:	f06f 0010 	mvn.w	r0, #16
}
  4015dc:	bd10      	pop	{r4, pc}
  4015de:	bf00      	nop
  4015e0:	00405d10 	.word	0x00405d10
  4015e4:	00401735 	.word	0x00401735
  4015e8:	0040245d 	.word	0x0040245d
  4015ec:	00402451 	.word	0x00402451

004015f0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4015f2:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4015f4:	4605      	mov	r5, r0
  4015f6:	460f      	mov	r7, r1
  4015f8:	2800      	cmp	r0, #0
  4015fa:	bf18      	it	ne
  4015fc:	2900      	cmpne	r1, #0
  4015fe:	d002      	beq.n	401606 <usart_sync_write+0x16>
  401600:	bb0a      	cbnz	r2, 401646 <usart_sync_write+0x56>
  401602:	2000      	movs	r0, #0
  401604:	e000      	b.n	401608 <usart_sync_write+0x18>
  401606:	2000      	movs	r0, #0
  401608:	22f1      	movs	r2, #241	; 0xf1
  40160a:	4910      	ldr	r1, [pc, #64]	; (40164c <usart_sync_write+0x5c>)
  40160c:	4b10      	ldr	r3, [pc, #64]	; (401650 <usart_sync_write+0x60>)
  40160e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  401610:	f105 0408 	add.w	r4, r5, #8
  401614:	4620      	mov	r0, r4
  401616:	4b0f      	ldr	r3, [pc, #60]	; (401654 <usart_sync_write+0x64>)
  401618:	4798      	blx	r3
  40161a:	2800      	cmp	r0, #0
  40161c:	d0f8      	beq.n	401610 <usart_sync_write+0x20>
  40161e:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  401620:	5d79      	ldrb	r1, [r7, r5]
  401622:	4620      	mov	r0, r4
  401624:	4b0c      	ldr	r3, [pc, #48]	; (401658 <usart_sync_write+0x68>)
  401626:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  401628:	4620      	mov	r0, r4
  40162a:	4b0a      	ldr	r3, [pc, #40]	; (401654 <usart_sync_write+0x64>)
  40162c:	4798      	blx	r3
  40162e:	2800      	cmp	r0, #0
  401630:	d0fa      	beq.n	401628 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  401632:	3501      	adds	r5, #1
  401634:	42b5      	cmp	r5, r6
  401636:	d3f3      	bcc.n	401620 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  401638:	4620      	mov	r0, r4
  40163a:	4b08      	ldr	r3, [pc, #32]	; (40165c <usart_sync_write+0x6c>)
  40163c:	4798      	blx	r3
  40163e:	2800      	cmp	r0, #0
  401640:	d0fa      	beq.n	401638 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  401642:	4628      	mov	r0, r5
  401644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  401646:	2001      	movs	r0, #1
  401648:	e7de      	b.n	401608 <usart_sync_write+0x18>
  40164a:	bf00      	nop
  40164c:	00405d28 	.word	0x00405d28
  401650:	00401735 	.word	0x00401735
  401654:	00402639 	.word	0x00402639
  401658:	004025f1 	.word	0x004025f1
  40165c:	00402661 	.word	0x00402661

00401660 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401664:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401666:	4605      	mov	r5, r0
  401668:	4688      	mov	r8, r1
  40166a:	2800      	cmp	r0, #0
  40166c:	bf18      	it	ne
  40166e:	2900      	cmpne	r1, #0
  401670:	d002      	beq.n	401678 <usart_sync_read+0x18>
  401672:	b9d2      	cbnz	r2, 4016aa <usart_sync_read+0x4a>
  401674:	2000      	movs	r0, #0
  401676:	e000      	b.n	40167a <usart_sync_read+0x1a>
  401678:	2000      	movs	r0, #0
  40167a:	f44f 7286 	mov.w	r2, #268	; 0x10c
  40167e:	490c      	ldr	r1, [pc, #48]	; (4016b0 <usart_sync_read+0x50>)
  401680:	4b0c      	ldr	r3, [pc, #48]	; (4016b4 <usart_sync_read+0x54>)
  401682:	4798      	blx	r3
	uint32_t                      offset = 0;
  401684:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  401686:	f105 0408 	add.w	r4, r5, #8
  40168a:	4620      	mov	r0, r4
  40168c:	4b0a      	ldr	r3, [pc, #40]	; (4016b8 <usart_sync_read+0x58>)
  40168e:	4798      	blx	r3
  401690:	2800      	cmp	r0, #0
  401692:	d0f8      	beq.n	401686 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  401694:	4620      	mov	r0, r4
  401696:	4b09      	ldr	r3, [pc, #36]	; (4016bc <usart_sync_read+0x5c>)
  401698:	4798      	blx	r3
  40169a:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  40169e:	3601      	adds	r6, #1
  4016a0:	42be      	cmp	r6, r7
  4016a2:	d3f0      	bcc.n	401686 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  4016a4:	4630      	mov	r0, r6
  4016a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  4016aa:	2001      	movs	r0, #1
  4016ac:	e7e5      	b.n	40167a <usart_sync_read+0x1a>
  4016ae:	bf00      	nop
  4016b0:	00405d28 	.word	0x00405d28
  4016b4:	00401735 	.word	0x00401735
  4016b8:	00402689 	.word	0x00402689
  4016bc:	00402615 	.word	0x00402615

004016c0 <usart_sync_init>:
{
  4016c0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4016c2:	4604      	mov	r4, r0
  4016c4:	460d      	mov	r5, r1
  4016c6:	2800      	cmp	r0, #0
  4016c8:	bf18      	it	ne
  4016ca:	2900      	cmpne	r1, #0
  4016cc:	bf14      	ite	ne
  4016ce:	2001      	movne	r0, #1
  4016d0:	2000      	moveq	r0, #0
  4016d2:	2234      	movs	r2, #52	; 0x34
  4016d4:	4907      	ldr	r1, [pc, #28]	; (4016f4 <usart_sync_init+0x34>)
  4016d6:	4b08      	ldr	r3, [pc, #32]	; (4016f8 <usart_sync_init+0x38>)
  4016d8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  4016da:	4629      	mov	r1, r5
  4016dc:	f104 0008 	add.w	r0, r4, #8
  4016e0:	4b06      	ldr	r3, [pc, #24]	; (4016fc <usart_sync_init+0x3c>)
  4016e2:	4798      	blx	r3
	if (init_status) {
  4016e4:	4603      	mov	r3, r0
  4016e6:	b918      	cbnz	r0, 4016f0 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  4016e8:	4a05      	ldr	r2, [pc, #20]	; (401700 <usart_sync_init+0x40>)
  4016ea:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  4016ec:	4a05      	ldr	r2, [pc, #20]	; (401704 <usart_sync_init+0x44>)
  4016ee:	6022      	str	r2, [r4, #0]
}
  4016f0:	4618      	mov	r0, r3
  4016f2:	bd38      	pop	{r3, r4, r5, pc}
  4016f4:	00405d28 	.word	0x00405d28
  4016f8:	00401735 	.word	0x00401735
  4016fc:	00402585 	.word	0x00402585
  401700:	00401661 	.word	0x00401661
  401704:	004015f1 	.word	0x004015f1

00401708 <usart_sync_enable>:
{
  401708:	b510      	push	{r4, lr}
	ASSERT(descr);
  40170a:	4604      	mov	r4, r0
  40170c:	2253      	movs	r2, #83	; 0x53
  40170e:	4906      	ldr	r1, [pc, #24]	; (401728 <usart_sync_enable+0x20>)
  401710:	3000      	adds	r0, #0
  401712:	bf18      	it	ne
  401714:	2001      	movne	r0, #1
  401716:	4b05      	ldr	r3, [pc, #20]	; (40172c <usart_sync_enable+0x24>)
  401718:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  40171a:	f104 0008 	add.w	r0, r4, #8
  40171e:	4b04      	ldr	r3, [pc, #16]	; (401730 <usart_sync_enable+0x28>)
  401720:	4798      	blx	r3
}
  401722:	2000      	movs	r0, #0
  401724:	bd10      	pop	{r4, pc}
  401726:	bf00      	nop
  401728:	00405d28 	.word	0x00405d28
  40172c:	00401735 	.word	0x00401735
  401730:	004025bd 	.word	0x004025bd

00401734 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401734:	b900      	cbnz	r0, 401738 <assert+0x4>
		__asm("BKPT #0");
  401736:	be00      	bkpt	0x0000
  401738:	4770      	bx	lr

0040173a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  40173a:	6803      	ldr	r3, [r0, #0]
  40173c:	b11b      	cbz	r3, 401746 <is_list_element+0xc>
		if (it == element) {
  40173e:	428b      	cmp	r3, r1
  401740:	d003      	beq.n	40174a <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  401742:	681b      	ldr	r3, [r3, #0]
  401744:	e7fa      	b.n	40173c <is_list_element+0x2>
			return true;
		}
	}

	return false;
  401746:	2000      	movs	r0, #0
  401748:	4770      	bx	lr
			return true;
  40174a:	2001      	movs	r0, #1
}
  40174c:	4770      	bx	lr
	...

00401750 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  401750:	b538      	push	{r3, r4, r5, lr}
  401752:	4604      	mov	r4, r0
  401754:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  401756:	4b06      	ldr	r3, [pc, #24]	; (401770 <list_insert_as_head+0x20>)
  401758:	4798      	blx	r3
  40175a:	f080 0001 	eor.w	r0, r0, #1
  40175e:	2239      	movs	r2, #57	; 0x39
  401760:	4904      	ldr	r1, [pc, #16]	; (401774 <list_insert_as_head+0x24>)
  401762:	b2c0      	uxtb	r0, r0
  401764:	4b04      	ldr	r3, [pc, #16]	; (401778 <list_insert_as_head+0x28>)
  401766:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  401768:	6823      	ldr	r3, [r4, #0]
  40176a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  40176c:	6025      	str	r5, [r4, #0]
  40176e:	bd38      	pop	{r3, r4, r5, pc}
  401770:	0040173b 	.word	0x0040173b
  401774:	00405d44 	.word	0x00405d44
  401778:	00401735 	.word	0x00401735

0040177c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  40177c:	6803      	ldr	r3, [r0, #0]
  40177e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  401780:	6001      	str	r1, [r0, #0]
  401782:	4770      	bx	lr

00401784 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  401784:	6803      	ldr	r3, [r0, #0]
  401786:	b11b      	cbz	r3, 401790 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  401788:	681a      	ldr	r2, [r3, #0]
  40178a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  40178c:	4618      	mov	r0, r3
  40178e:	4770      	bx	lr
	}

	return NULL;
  401790:	2000      	movs	r0, #0
}
  401792:	4770      	bx	lr

00401794 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  401794:	b570      	push	{r4, r5, r6, lr}
  401796:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  401798:	4604      	mov	r4, r0
  40179a:	460e      	mov	r6, r1
  40179c:	2800      	cmp	r0, #0
  40179e:	bf18      	it	ne
  4017a0:	2900      	cmpne	r1, #0
  4017a2:	d002      	beq.n	4017aa <ringbuffer_init+0x16>
  4017a4:	b97a      	cbnz	r2, 4017c6 <ringbuffer_init+0x32>
  4017a6:	2000      	movs	r0, #0
  4017a8:	e000      	b.n	4017ac <ringbuffer_init+0x18>
  4017aa:	2000      	movs	r0, #0
  4017ac:	2228      	movs	r2, #40	; 0x28
  4017ae:	4908      	ldr	r1, [pc, #32]	; (4017d0 <ringbuffer_init+0x3c>)
  4017b0:	4b08      	ldr	r3, [pc, #32]	; (4017d4 <ringbuffer_init+0x40>)
  4017b2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  4017b4:	1e6b      	subs	r3, r5, #1
  4017b6:	421d      	tst	r5, r3
  4017b8:	d107      	bne.n	4017ca <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  4017ba:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  4017bc:	2000      	movs	r0, #0
  4017be:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  4017c0:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  4017c2:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  4017c4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  4017c6:	2001      	movs	r0, #1
  4017c8:	e7f0      	b.n	4017ac <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  4017ca:	f06f 000c 	mvn.w	r0, #12
}
  4017ce:	bd70      	pop	{r4, r5, r6, pc}
  4017d0:	00405d64 	.word	0x00405d64
  4017d4:	00401735 	.word	0x00401735

004017d8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  4017d8:	b538      	push	{r3, r4, r5, lr}
  4017da:	460d      	mov	r5, r1
	ASSERT(rb);
  4017dc:	4604      	mov	r4, r0
  4017de:	2251      	movs	r2, #81	; 0x51
  4017e0:	490b      	ldr	r1, [pc, #44]	; (401810 <ringbuffer_put+0x38>)
  4017e2:	3000      	adds	r0, #0
  4017e4:	bf18      	it	ne
  4017e6:	2001      	movne	r0, #1
  4017e8:	4b0a      	ldr	r3, [pc, #40]	; (401814 <ringbuffer_put+0x3c>)
  4017ea:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  4017ec:	6822      	ldr	r2, [r4, #0]
  4017ee:	68e3      	ldr	r3, [r4, #12]
  4017f0:	6861      	ldr	r1, [r4, #4]
  4017f2:	400b      	ands	r3, r1
  4017f4:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  4017f6:	68e3      	ldr	r3, [r4, #12]
  4017f8:	68a2      	ldr	r2, [r4, #8]
  4017fa:	1a9a      	subs	r2, r3, r2
  4017fc:	6861      	ldr	r1, [r4, #4]
  4017fe:	428a      	cmp	r2, r1
  401800:	d901      	bls.n	401806 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  401802:	1a59      	subs	r1, r3, r1
  401804:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  401806:	3301      	adds	r3, #1
  401808:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  40180a:	2000      	movs	r0, #0
  40180c:	bd38      	pop	{r3, r4, r5, pc}
  40180e:	bf00      	nop
  401810:	00405d64 	.word	0x00405d64
  401814:	00401735 	.word	0x00401735

00401818 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  401818:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  40181a:	4a06      	ldr	r2, [pc, #24]	; (401834 <_sbrk+0x1c>)
  40181c:	6812      	ldr	r2, [r2, #0]
  40181e:	b122      	cbz	r2, 40182a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401820:	4a04      	ldr	r2, [pc, #16]	; (401834 <_sbrk+0x1c>)
  401822:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  401824:	4403      	add	r3, r0
  401826:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  401828:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40182a:	4903      	ldr	r1, [pc, #12]	; (401838 <_sbrk+0x20>)
  40182c:	4a01      	ldr	r2, [pc, #4]	; (401834 <_sbrk+0x1c>)
  40182e:	6011      	str	r1, [r2, #0]
  401830:	e7f6      	b.n	401820 <_sbrk+0x8>
  401832:	bf00      	nop
  401834:	2040033c 	.word	0x2040033c
  401838:	20400dc0 	.word	0x20400dc0

0040183c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  40183c:	f04f 30ff 	mov.w	r0, #4294967295
  401840:	4770      	bx	lr

00401842 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  401842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401846:	604b      	str	r3, [r1, #4]

	return 0;
}
  401848:	2000      	movs	r0, #0
  40184a:	4770      	bx	lr

0040184c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  40184c:	2001      	movs	r0, #1
  40184e:	4770      	bx	lr

00401850 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  401850:	2000      	movs	r0, #0
  401852:	4770      	bx	lr

00401854 <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  401854:	6943      	ldr	r3, [r0, #20]
  401856:	4a07      	ldr	r2, [pc, #28]	; (401874 <_afec_get_irq_num+0x20>)
  401858:	4293      	cmp	r3, r2
  40185a:	d005      	beq.n	401868 <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  40185c:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  401860:	4293      	cmp	r3, r2
  401862:	d103      	bne.n	40186c <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  401864:	2028      	movs	r0, #40	; 0x28
  401866:	4770      	bx	lr
		return AFEC0_IRQn;
  401868:	201d      	movs	r0, #29
  40186a:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  40186c:	f04f 30ff 	mov.w	r0, #4294967295
}
  401870:	4770      	bx	lr
  401872:	bf00      	nop
  401874:	4003c000 	.word	0x4003c000

00401878 <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  401878:	4b06      	ldr	r3, [pc, #24]	; (401894 <_afec_init_irq_param+0x1c>)
  40187a:	4298      	cmp	r0, r3
  40187c:	d003      	beq.n	401886 <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  40187e:	4b06      	ldr	r3, [pc, #24]	; (401898 <_afec_init_irq_param+0x20>)
  401880:	4298      	cmp	r0, r3
  401882:	d003      	beq.n	40188c <_afec_init_irq_param+0x14>
  401884:	4770      	bx	lr
		_afec0_dev = dev;
  401886:	4b05      	ldr	r3, [pc, #20]	; (40189c <_afec_init_irq_param+0x24>)
  401888:	6019      	str	r1, [r3, #0]
  40188a:	e7f8      	b.n	40187e <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  40188c:	4b03      	ldr	r3, [pc, #12]	; (40189c <_afec_init_irq_param+0x24>)
  40188e:	6059      	str	r1, [r3, #4]
	}
}
  401890:	e7f8      	b.n	401884 <_afec_init_irq_param+0xc>
  401892:	bf00      	nop
  401894:	4003c000 	.word	0x4003c000
  401898:	40064000 	.word	0x40064000
  40189c:	20400340 	.word	0x20400340

004018a0 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  4018a0:	2364      	movs	r3, #100	; 0x64
  4018a2:	4a1d      	ldr	r2, [pc, #116]	; (401918 <_afec_init+0x78>)
  4018a4:	fb03 2301 	mla	r3, r3, r1, r2
  4018a8:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  4018aa:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  4018ac:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  4018ae:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  4018b0:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  4018b2:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  4018b4:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  4018b6:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  4018b8:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  4018ba:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  4018bc:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  4018be:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  4018c0:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  4018c2:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  4018c4:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  4018c6:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  4018ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  4018cc:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  4018d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  4018d2:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  4018d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  4018d8:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  4018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  4018de:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  4018e2:	2200      	movs	r2, #0
  4018e4:	2a0b      	cmp	r2, #11
  4018e6:	d814      	bhi.n	401912 <_afec_init+0x72>
{
  4018e8:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  4018ea:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  4018ec:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4018f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4018f4:	4413      	add	r3, r2
  4018f6:	330c      	adds	r3, #12
  4018f8:	4c07      	ldr	r4, [pc, #28]	; (401918 <_afec_init+0x78>)
  4018fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4018fe:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  401900:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401902:	3201      	adds	r2, #1
  401904:	b2d2      	uxtb	r2, r2
  401906:	2a0b      	cmp	r2, #11
  401908:	d9ef      	bls.n	4018ea <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  40190a:	2000      	movs	r0, #0
  40190c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401910:	4770      	bx	lr
  401912:	2000      	movs	r0, #0
  401914:	4770      	bx	lr
  401916:	bf00      	nop
  401918:	00405d88 	.word	0x00405d88

0040191c <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  40191c:	b530      	push	{r4, r5, lr}
  40191e:	b083      	sub	sp, #12
  401920:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  401922:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  401924:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  401926:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  401928:	400b      	ands	r3, r1
  40192a:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  40192c:	9b01      	ldr	r3, [sp, #4]
  40192e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401932:	d10e      	bne.n	401952 <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  401934:	9b01      	ldr	r3, [sp, #4]
  401936:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  40193a:	d10e      	bne.n	40195a <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  40193c:	9b01      	ldr	r3, [sp, #4]
  40193e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401942:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  401944:	9c01      	ldr	r4, [sp, #4]
  401946:	fab4 f484 	clz	r4, r4
  40194a:	f1c4 0420 	rsb	r4, r4, #32
  40194e:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401950:	e01f      	b.n	401992 <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  401952:	6803      	ldr	r3, [r0, #0]
  401954:	2100      	movs	r1, #0
  401956:	4798      	blx	r3
  401958:	e7ec      	b.n	401934 <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  40195a:	686b      	ldr	r3, [r5, #4]
  40195c:	2100      	movs	r1, #0
  40195e:	4628      	mov	r0, r5
  401960:	4798      	blx	r3
  401962:	e7eb      	b.n	40193c <_afec_interrupt_handler+0x20>
		cnt--;
  401964:	3c01      	subs	r4, #1
  401966:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  401968:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  40196a:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  40196c:	68ab      	ldr	r3, [r5, #8]
  40196e:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  401970:	6e92      	ldr	r2, [r2, #104]	; 0x68
  401972:	b292      	uxth	r2, r2
  401974:	4621      	mov	r1, r4
  401976:	4628      	mov	r0, r5
  401978:	4798      	blx	r3
		status &= ~(1 << cnt);
  40197a:	2301      	movs	r3, #1
  40197c:	40a3      	lsls	r3, r4
  40197e:	9c01      	ldr	r4, [sp, #4]
  401980:	ea24 0403 	bic.w	r4, r4, r3
  401984:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  401986:	9c01      	ldr	r4, [sp, #4]
  401988:	fab4 f484 	clz	r4, r4
  40198c:	f1c4 0420 	rsb	r4, r4, #32
  401990:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401992:	2c00      	cmp	r4, #0
  401994:	d1e6      	bne.n	401964 <_afec_interrupt_handler+0x48>
	}
}
  401996:	b003      	add	sp, #12
  401998:	bd30      	pop	{r4, r5, pc}
	...

0040199c <_afec_get_hardware_index>:
{
  40199c:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  40199e:	4b09      	ldr	r3, [pc, #36]	; (4019c4 <_afec_get_hardware_index+0x28>)
  4019a0:	4298      	cmp	r0, r3
  4019a2:	d00a      	beq.n	4019ba <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  4019a4:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4019a8:	4298      	cmp	r0, r3
  4019aa:	d008      	beq.n	4019be <_afec_get_hardware_index+0x22>
	ASSERT(false);
  4019ac:	22a7      	movs	r2, #167	; 0xa7
  4019ae:	4906      	ldr	r1, [pc, #24]	; (4019c8 <_afec_get_hardware_index+0x2c>)
  4019b0:	2000      	movs	r0, #0
  4019b2:	4b06      	ldr	r3, [pc, #24]	; (4019cc <_afec_get_hardware_index+0x30>)
  4019b4:	4798      	blx	r3
	return 0;
  4019b6:	2000      	movs	r0, #0
  4019b8:	bd08      	pop	{r3, pc}
		return 0;
  4019ba:	2000      	movs	r0, #0
  4019bc:	bd08      	pop	{r3, pc}
		return 1;
  4019be:	2001      	movs	r0, #1
}
  4019c0:	bd08      	pop	{r3, pc}
  4019c2:	bf00      	nop
  4019c4:	4003c000 	.word	0x4003c000
  4019c8:	00405e50 	.word	0x00405e50
  4019cc:	00401735 	.word	0x00401735

004019d0 <_afec_get_regs>:
{
  4019d0:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  4019d2:	4b09      	ldr	r3, [pc, #36]	; (4019f8 <_afec_get_regs+0x28>)
  4019d4:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  4019d6:	2300      	movs	r3, #0
  4019d8:	2b01      	cmp	r3, #1
  4019da:	d809      	bhi.n	4019f0 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  4019dc:	2264      	movs	r2, #100	; 0x64
  4019de:	fb02 f203 	mul.w	r2, r2, r3
  4019e2:	4906      	ldr	r1, [pc, #24]	; (4019fc <_afec_get_regs+0x2c>)
  4019e4:	5c8a      	ldrb	r2, [r1, r2]
  4019e6:	4290      	cmp	r0, r2
  4019e8:	d003      	beq.n	4019f2 <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  4019ea:	3301      	adds	r3, #1
  4019ec:	b2db      	uxtb	r3, r3
  4019ee:	e7f3      	b.n	4019d8 <_afec_get_regs+0x8>
	return 0;
  4019f0:	2300      	movs	r3, #0
}
  4019f2:	4618      	mov	r0, r3
  4019f4:	bd08      	pop	{r3, pc}
  4019f6:	bf00      	nop
  4019f8:	0040199d 	.word	0x0040199d
  4019fc:	00405d88 	.word	0x00405d88

00401a00 <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  401a00:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  401a02:	4b02      	ldr	r3, [pc, #8]	; (401a0c <AFEC0_Handler+0xc>)
  401a04:	6818      	ldr	r0, [r3, #0]
  401a06:	4b02      	ldr	r3, [pc, #8]	; (401a10 <AFEC0_Handler+0x10>)
  401a08:	4798      	blx	r3
  401a0a:	bd08      	pop	{r3, pc}
  401a0c:	20400340 	.word	0x20400340
  401a10:	0040191d 	.word	0x0040191d

00401a14 <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  401a14:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  401a16:	4b02      	ldr	r3, [pc, #8]	; (401a20 <AFEC1_Handler+0xc>)
  401a18:	6858      	ldr	r0, [r3, #4]
  401a1a:	4b02      	ldr	r3, [pc, #8]	; (401a24 <AFEC1_Handler+0x10>)
  401a1c:	4798      	blx	r3
  401a1e:	bd08      	pop	{r3, pc}
  401a20:	20400340 	.word	0x20400340
  401a24:	0040191d 	.word	0x0040191d

00401a28 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  401a28:	b570      	push	{r4, r5, r6, lr}
  401a2a:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  401a2c:	4605      	mov	r5, r0
  401a2e:	f44f 72a1 	mov.w	r2, #322	; 0x142
  401a32:	4923      	ldr	r1, [pc, #140]	; (401ac0 <_adc_async_init+0x98>)
  401a34:	3000      	adds	r0, #0
  401a36:	bf18      	it	ne
  401a38:	2001      	movne	r0, #1
  401a3a:	4b22      	ldr	r3, [pc, #136]	; (401ac4 <_adc_async_init+0x9c>)
  401a3c:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  401a3e:	4620      	mov	r0, r4
  401a40:	4b21      	ldr	r3, [pc, #132]	; (401ac8 <_adc_async_init+0xa0>)
  401a42:	4798      	blx	r3
  401a44:	4601      	mov	r1, r0
  401a46:	4620      	mov	r0, r4
  401a48:	4b20      	ldr	r3, [pc, #128]	; (401acc <_adc_async_init+0xa4>)
  401a4a:	4798      	blx	r3
	if (init_status) {
  401a4c:	4606      	mov	r6, r0
  401a4e:	b108      	cbz	r0, 401a54 <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  401a50:	4630      	mov	r0, r6
  401a52:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  401a54:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  401a56:	4629      	mov	r1, r5
  401a58:	4620      	mov	r0, r4
  401a5a:	4b1d      	ldr	r3, [pc, #116]	; (401ad0 <_adc_async_init+0xa8>)
  401a5c:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  401a5e:	4628      	mov	r0, r5
  401a60:	4b1c      	ldr	r3, [pc, #112]	; (401ad4 <_adc_async_init+0xac>)
  401a62:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401a64:	2800      	cmp	r0, #0
  401a66:	db0d      	blt.n	401a84 <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a68:	0943      	lsrs	r3, r0, #5
  401a6a:	f000 001f 	and.w	r0, r0, #31
  401a6e:	2201      	movs	r2, #1
  401a70:	fa02 f000 	lsl.w	r0, r2, r0
  401a74:	3320      	adds	r3, #32
  401a76:	4a18      	ldr	r2, [pc, #96]	; (401ad8 <_adc_async_init+0xb0>)
  401a78:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401a7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401a80:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  401a84:	4628      	mov	r0, r5
  401a86:	4b13      	ldr	r3, [pc, #76]	; (401ad4 <_adc_async_init+0xac>)
  401a88:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401a8a:	2800      	cmp	r0, #0
  401a8c:	db09      	blt.n	401aa2 <_adc_async_init+0x7a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a8e:	0943      	lsrs	r3, r0, #5
  401a90:	f000 001f 	and.w	r0, r0, #31
  401a94:	2201      	movs	r2, #1
  401a96:	fa02 f000 	lsl.w	r0, r2, r0
  401a9a:	3360      	adds	r3, #96	; 0x60
  401a9c:	4a0e      	ldr	r2, [pc, #56]	; (401ad8 <_adc_async_init+0xb0>)
  401a9e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  401aa2:	4628      	mov	r0, r5
  401aa4:	4b0b      	ldr	r3, [pc, #44]	; (401ad4 <_adc_async_init+0xac>)
  401aa6:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401aa8:	2800      	cmp	r0, #0
  401aaa:	dbd1      	blt.n	401a50 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401aac:	0942      	lsrs	r2, r0, #5
  401aae:	f000 001f 	and.w	r0, r0, #31
  401ab2:	2301      	movs	r3, #1
  401ab4:	fa03 f000 	lsl.w	r0, r3, r0
  401ab8:	4b07      	ldr	r3, [pc, #28]	; (401ad8 <_adc_async_init+0xb0>)
  401aba:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  401abe:	e7c7      	b.n	401a50 <_adc_async_init+0x28>
  401ac0:	00405e50 	.word	0x00405e50
  401ac4:	00401735 	.word	0x00401735
  401ac8:	004019d1 	.word	0x004019d1
  401acc:	004018a1 	.word	0x004018a1
  401ad0:	00401879 	.word	0x00401879
  401ad4:	00401855 	.word	0x00401855
  401ad8:	e000e100 	.word	0xe000e100

00401adc <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  401adc:	6942      	ldr	r2, [r0, #20]
  401ade:	2301      	movs	r3, #1
  401ae0:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  401ae4:	6151      	str	r1, [r2, #20]
  401ae6:	4770      	bx	lr

00401ae8 <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  401ae8:	2002      	movs	r0, #2
  401aea:	4770      	bx	lr

00401aec <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  401aec:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401af0:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  401af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401af8:	fb03 f000 	mul.w	r0, r3, r0
  401afc:	4770      	bx	lr
	...

00401b00 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  401b00:	b500      	push	{lr}
  401b02:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  401b04:	a801      	add	r0, sp, #4
  401b06:	4b14      	ldr	r3, [pc, #80]	; (401b58 <_init_chip+0x58>)
  401b08:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  401b0a:	4a14      	ldr	r2, [pc, #80]	; (401b5c <_init_chip+0x5c>)
  401b0c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  401b18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401b1c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  401b20:	a801      	add	r0, sp, #4
  401b22:	4b0f      	ldr	r3, [pc, #60]	; (401b60 <_init_chip+0x60>)
  401b24:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  401b26:	4a0f      	ldr	r2, [pc, #60]	; (401b64 <_init_chip+0x64>)
  401b28:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  401b2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  401b2e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  401b32:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401b34:	4b0c      	ldr	r3, [pc, #48]	; (401b68 <_init_chip+0x68>)
  401b36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  401b3a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401b3e:	d104      	bne.n	401b4a <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401b40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401b44:	4b08      	ldr	r3, [pc, #32]	; (401b68 <_init_chip+0x68>)
  401b46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  401b4a:	4b08      	ldr	r3, [pc, #32]	; (401b6c <_init_chip+0x6c>)
  401b4c:	4798      	blx	r3

#endif
	_pmc_init();
  401b4e:	4b08      	ldr	r3, [pc, #32]	; (401b70 <_init_chip+0x70>)
  401b50:	4798      	blx	r3
}
  401b52:	b003      	add	sp, #12
  401b54:	f85d fb04 	ldr.w	pc, [sp], #4
  401b58:	004011bd 	.word	0x004011bd
  401b5c:	e000ed00 	.word	0xe000ed00
  401b60:	004011cb 	.word	0x004011cb
  401b64:	400e0c00 	.word	0x400e0c00
  401b68:	400e0600 	.word	0x400e0600
  401b6c:	004026b5 	.word	0x004026b5
  401b70:	00401f89 	.word	0x00401f89

00401b74 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  401b74:	b538      	push	{r3, r4, r5, lr}
  401b76:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  401b78:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  401b7a:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  401b7c:	f014 0f01 	tst.w	r4, #1
  401b80:	d11a      	bne.n	401bb8 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  401b82:	f414 7f00 	tst.w	r4, #512	; 0x200
  401b86:	d11a      	bne.n	401bbe <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  401b88:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  401b8c:	d11b      	bne.n	401bc6 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  401b8e:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  401b92:	d11d      	bne.n	401bd0 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  401b94:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  401b98:	d008      	beq.n	401bac <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401b9a:	68eb      	ldr	r3, [r5, #12]
  401b9c:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  401b9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
  401ba0:	f012 0f20 	tst.w	r2, #32
  401ba4:	d019      	beq.n	401bda <_can_irq_handler+0x66>
  401ba6:	2102      	movs	r1, #2
  401ba8:	4628      	mov	r0, r5
  401baa:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  401bac:	f014 0f08 	tst.w	r4, #8
  401bb0:	d115      	bne.n	401bde <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  401bb2:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  401bb4:	651c      	str	r4, [r3, #80]	; 0x50
  401bb6:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  401bb8:	6883      	ldr	r3, [r0, #8]
  401bba:	4798      	blx	r3
  401bbc:	e7e1      	b.n	401b82 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  401bbe:	686b      	ldr	r3, [r5, #4]
  401bc0:	4628      	mov	r0, r5
  401bc2:	4798      	blx	r3
  401bc4:	e7e0      	b.n	401b88 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  401bc6:	68eb      	ldr	r3, [r5, #12]
  401bc8:	2103      	movs	r1, #3
  401bca:	4628      	mov	r0, r5
  401bcc:	4798      	blx	r3
  401bce:	e7de      	b.n	401b8e <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  401bd0:	68eb      	ldr	r3, [r5, #12]
  401bd2:	2100      	movs	r1, #0
  401bd4:	4628      	mov	r0, r5
  401bd6:	4798      	blx	r3
  401bd8:	e7dc      	b.n	401b94 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401bda:	2101      	movs	r1, #1
  401bdc:	e7e4      	b.n	401ba8 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  401bde:	68eb      	ldr	r3, [r5, #12]
  401be0:	2104      	movs	r1, #4
  401be2:	4628      	mov	r0, r5
  401be4:	4798      	blx	r3
  401be6:	e7e4      	b.n	401bb2 <_can_irq_handler+0x3e>

00401be8 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  401be8:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  401bea:	4b02      	ldr	r3, [pc, #8]	; (401bf4 <MCAN1_INT0_Handler+0xc>)
  401bec:	6a98      	ldr	r0, [r3, #40]	; 0x28
  401bee:	4b02      	ldr	r3, [pc, #8]	; (401bf8 <MCAN1_INT0_Handler+0x10>)
  401bf0:	4798      	blx	r3
  401bf2:	bd08      	pop	{r3, pc}
  401bf4:	20400348 	.word	0x20400348
  401bf8:	00401b75 	.word	0x00401b75

00401bfc <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401bfc:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  401bfe:	2500      	movs	r5, #0
  401c00:	428d      	cmp	r5, r1
  401c02:	d210      	bcs.n	401c26 <_ffs+0x2a>
  401c04:	2201      	movs	r2, #1
  401c06:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401c08:	2b1f      	cmp	r3, #31
  401c0a:	d80a      	bhi.n	401c22 <_ffs+0x26>
			if (v[i] & bit) {
  401c0c:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401c10:	4222      	tst	r2, r4
  401c12:	d102      	bne.n	401c1a <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401c14:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401c16:	3301      	adds	r3, #1
  401c18:	e7f6      	b.n	401c08 <_ffs+0xc>
				return i * 32 + j;
  401c1a:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401c1e:	bc30      	pop	{r4, r5}
  401c20:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  401c22:	3501      	adds	r5, #1
  401c24:	e7ec      	b.n	401c00 <_ffs+0x4>
	return -1;
  401c26:	f04f 30ff 	mov.w	r0, #4294967295
  401c2a:	e7f8      	b.n	401c1e <_ffs+0x22>

00401c2c <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401c2c:	b510      	push	{r4, lr}
  401c2e:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401c30:	2300      	movs	r3, #0
  401c32:	9301      	str	r3, [sp, #4]
  401c34:	9302      	str	r3, [sp, #8]
  401c36:	9303      	str	r3, [sp, #12]
  401c38:	9304      	str	r3, [sp, #16]
  401c3a:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401c3c:	4b28      	ldr	r3, [pc, #160]	; (401ce0 <_ext_irq_handler+0xb4>)
  401c3e:	6818      	ldr	r0, [r3, #0]
  401c40:	22f8      	movs	r2, #248	; 0xf8
  401c42:	4928      	ldr	r1, [pc, #160]	; (401ce4 <_ext_irq_handler+0xb8>)
  401c44:	3000      	adds	r0, #0
  401c46:	bf18      	it	ne
  401c48:	2001      	movne	r0, #1
  401c4a:	4b27      	ldr	r3, [pc, #156]	; (401ce8 <_ext_irq_handler+0xbc>)
  401c4c:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401c4e:	4b27      	ldr	r3, [pc, #156]	; (401cec <_ext_irq_handler+0xc0>)
  401c50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401c54:	4013      	ands	r3, r2
  401c56:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401c58:	4a25      	ldr	r2, [pc, #148]	; (401cf0 <_ext_irq_handler+0xc4>)
  401c5a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401c5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401c5e:	400a      	ands	r2, r1
  401c60:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  401c62:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  401c64:	4923      	ldr	r1, [pc, #140]	; (401cf4 <_ext_irq_handler+0xc8>)
  401c66:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401c68:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401c6a:	400a      	ands	r2, r1
  401c6c:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  401c6e:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  401c70:	e02c      	b.n	401ccc <_ext_irq_handler+0xa0>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  401c72:	4b1b      	ldr	r3, [pc, #108]	; (401ce0 <_ext_irq_handler+0xb4>)
  401c74:	681b      	ldr	r3, [r3, #0]
  401c76:	4620      	mov	r0, r4
  401c78:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  401c7a:	1163      	asrs	r3, r4, #5
  401c7c:	f004 041f 	and.w	r4, r4, #31
  401c80:	2201      	movs	r2, #1
  401c82:	fa02 f404 	lsl.w	r4, r2, r4
  401c86:	aa06      	add	r2, sp, #24
  401c88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401c8c:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401c90:	ea22 0204 	bic.w	r2, r2, r4
  401c94:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  401c98:	2105      	movs	r1, #5
  401c9a:	a801      	add	r0, sp, #4
  401c9c:	4b16      	ldr	r3, [pc, #88]	; (401cf8 <_ext_irq_handler+0xcc>)
  401c9e:	4798      	blx	r3
  401ca0:	4604      	mov	r4, r0
		while (-1 != pos) {
  401ca2:	f1b4 3fff 	cmp.w	r4, #4294967295
  401ca6:	d1e4      	bne.n	401c72 <_ext_irq_handler+0x46>
	return ((Pio *)hw)->PIO_ISR;
  401ca8:	4a10      	ldr	r2, [pc, #64]	; (401cec <_ext_irq_handler+0xc0>)
  401caa:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401cac:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401cae:	400b      	ands	r3, r1
  401cb0:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401cb2:	490f      	ldr	r1, [pc, #60]	; (401cf0 <_ext_irq_handler+0xc4>)
  401cb4:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401cb6:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401cb8:	4002      	ands	r2, r0
  401cba:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  401cbc:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  401cbe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  401cc2:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401cc4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401cc6:	4002      	ands	r2, r0
  401cc8:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  401cca:	4313      	orrs	r3, r2
	while (flag_total) {
  401ccc:	b12b      	cbz	r3, 401cda <_ext_irq_handler+0xae>
		pos = _ffs(flags, 5);
  401cce:	2105      	movs	r1, #5
  401cd0:	a801      	add	r0, sp, #4
  401cd2:	4b09      	ldr	r3, [pc, #36]	; (401cf8 <_ext_irq_handler+0xcc>)
  401cd4:	4798      	blx	r3
  401cd6:	4604      	mov	r4, r0
		while (-1 != pos) {
  401cd8:	e7e3      	b.n	401ca2 <_ext_irq_handler+0x76>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  401cda:	b006      	add	sp, #24
  401cdc:	bd10      	pop	{r4, pc}
  401cde:	bf00      	nop
  401ce0:	20400374 	.word	0x20400374
  401ce4:	00405ec4 	.word	0x00405ec4
  401ce8:	00401735 	.word	0x00401735
  401cec:	400e0e00 	.word	0x400e0e00
  401cf0:	400e1000 	.word	0x400e1000
  401cf4:	400e1400 	.word	0x400e1400
  401cf8:	00401bfd 	.word	0x00401bfd

00401cfc <_pio_get_hardware_index>:
{
  401cfc:	b510      	push	{r4, lr}
	ASSERT(hw);
  401cfe:	4604      	mov	r4, r0
  401d00:	22d2      	movs	r2, #210	; 0xd2
  401d02:	4905      	ldr	r1, [pc, #20]	; (401d18 <_pio_get_hardware_index+0x1c>)
  401d04:	3000      	adds	r0, #0
  401d06:	bf18      	it	ne
  401d08:	2001      	movne	r0, #1
  401d0a:	4b04      	ldr	r3, [pc, #16]	; (401d1c <_pio_get_hardware_index+0x20>)
  401d0c:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  401d0e:	4804      	ldr	r0, [pc, #16]	; (401d20 <_pio_get_hardware_index+0x24>)
  401d10:	4420      	add	r0, r4
}
  401d12:	f3c0 2047 	ubfx	r0, r0, #9, #8
  401d16:	bd10      	pop	{r4, pc}
  401d18:	00405ec4 	.word	0x00405ec4
  401d1c:	00401735 	.word	0x00401735
  401d20:	bff1f200 	.word	0xbff1f200

00401d24 <_pio_get_index>:
{
  401d24:	b510      	push	{r4, lr}
	ASSERT(hw);
  401d26:	4604      	mov	r4, r0
  401d28:	22e0      	movs	r2, #224	; 0xe0
  401d2a:	490d      	ldr	r1, [pc, #52]	; (401d60 <_pio_get_index+0x3c>)
  401d2c:	3000      	adds	r0, #0
  401d2e:	bf18      	it	ne
  401d30:	2001      	movne	r0, #1
  401d32:	4b0c      	ldr	r3, [pc, #48]	; (401d64 <_pio_get_index+0x40>)
  401d34:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  401d36:	4620      	mov	r0, r4
  401d38:	4b0b      	ldr	r3, [pc, #44]	; (401d68 <_pio_get_index+0x44>)
  401d3a:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401d3c:	2300      	movs	r3, #0
  401d3e:	2b02      	cmp	r3, #2
  401d40:	d80b      	bhi.n	401d5a <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  401d42:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  401d46:	008a      	lsls	r2, r1, #2
  401d48:	4908      	ldr	r1, [pc, #32]	; (401d6c <_pio_get_index+0x48>)
  401d4a:	5c8a      	ldrb	r2, [r1, r2]
  401d4c:	4290      	cmp	r0, r2
  401d4e:	d002      	beq.n	401d56 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401d50:	3301      	adds	r3, #1
  401d52:	b2db      	uxtb	r3, r3
  401d54:	e7f3      	b.n	401d3e <_pio_get_index+0x1a>
			return i;
  401d56:	b258      	sxtb	r0, r3
  401d58:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  401d5a:	f04f 30ff 	mov.w	r0, #4294967295
}
  401d5e:	bd10      	pop	{r4, pc}
  401d60:	00405ec4 	.word	0x00405ec4
  401d64:	00401735 	.word	0x00401735
  401d68:	00401cfd 	.word	0x00401cfd
  401d6c:	00405e68 	.word	0x00405e68

00401d70 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401d70:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  401d72:	4604      	mov	r4, r0
  401d74:	f44f 72af 	mov.w	r2, #350	; 0x15e
  401d78:	4929      	ldr	r1, [pc, #164]	; (401e20 <_pio_init+0xb0>)
  401d7a:	3000      	adds	r0, #0
  401d7c:	bf18      	it	ne
  401d7e:	2001      	movne	r0, #1
  401d80:	4b28      	ldr	r3, [pc, #160]	; (401e24 <_pio_init+0xb4>)
  401d82:	4798      	blx	r3

	i = _pio_get_index(hw);
  401d84:	4620      	mov	r0, r4
  401d86:	4b28      	ldr	r3, [pc, #160]	; (401e28 <_pio_init+0xb8>)
  401d88:	4798      	blx	r3
	if (i < 0) {
  401d8a:	2800      	cmp	r0, #0
  401d8c:	db43      	blt.n	401e16 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  401d8e:	4d27      	ldr	r5, [pc, #156]	; (401e2c <_pio_init+0xbc>)
  401d90:	00c2      	lsls	r2, r0, #3
  401d92:	1a11      	subs	r1, r2, r0
  401d94:	008b      	lsls	r3, r1, #2
  401d96:	442b      	add	r3, r5
  401d98:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  401d9a:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  401d9e:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  401da0:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  401da4:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  401da6:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  401daa:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  401dac:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  401db0:	1a10      	subs	r0, r2, r0
  401db2:	0083      	lsls	r3, r0, #2
  401db4:	442b      	add	r3, r5
  401db6:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  401db8:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401dbc:	4620      	mov	r0, r4
  401dbe:	4b1c      	ldr	r3, [pc, #112]	; (401e30 <_pio_init+0xc0>)
  401dc0:	4798      	blx	r3
  401dc2:	4428      	add	r0, r5
  401dc4:	f990 3054 	ldrsb.w	r3, [r0, #84]	; 0x54
  if ((int32_t)(IRQn) >= 0)
  401dc8:	2b00      	cmp	r3, #0
  401dca:	db0c      	blt.n	401de6 <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401dcc:	095a      	lsrs	r2, r3, #5
  401dce:	f003 001f 	and.w	r0, r3, #31
  401dd2:	2101      	movs	r1, #1
  401dd4:	4081      	lsls	r1, r0
  401dd6:	3220      	adds	r2, #32
  401dd8:	4816      	ldr	r0, [pc, #88]	; (401e34 <_pio_init+0xc4>)
  401dda:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401dde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401de2:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  401de6:	2b00      	cmp	r3, #0
  401de8:	db08      	blt.n	401dfc <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401dea:	095a      	lsrs	r2, r3, #5
  401dec:	f003 001f 	and.w	r0, r3, #31
  401df0:	2101      	movs	r1, #1
  401df2:	4081      	lsls	r1, r0
  401df4:	3260      	adds	r2, #96	; 0x60
  401df6:	480f      	ldr	r0, [pc, #60]	; (401e34 <_pio_init+0xc4>)
  401df8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401dfc:	2b00      	cmp	r3, #0
  401dfe:	db0d      	blt.n	401e1c <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401e00:	0959      	lsrs	r1, r3, #5
  401e02:	f003 031f 	and.w	r3, r3, #31
  401e06:	2201      	movs	r2, #1
  401e08:	fa02 f303 	lsl.w	r3, r2, r3
  401e0c:	4a09      	ldr	r2, [pc, #36]	; (401e34 <_pio_init+0xc4>)
  401e0e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  401e12:	2000      	movs	r0, #0
  401e14:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  401e16:	f06f 0010 	mvn.w	r0, #16
  401e1a:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401e1c:	2000      	movs	r0, #0
}
  401e1e:	bd38      	pop	{r3, r4, r5, pc}
  401e20:	00405ec4 	.word	0x00405ec4
  401e24:	00401735 	.word	0x00401735
  401e28:	00401d25 	.word	0x00401d25
  401e2c:	00405e68 	.word	0x00405e68
  401e30:	00401cfd 	.word	0x00401cfd
  401e34:	e000e100 	.word	0xe000e100

00401e38 <PIOD_Handler>:
{
  401e38:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401e3a:	4b01      	ldr	r3, [pc, #4]	; (401e40 <PIOD_Handler+0x8>)
  401e3c:	4798      	blx	r3
  401e3e:	bd08      	pop	{r3, pc}
  401e40:	00401c2d 	.word	0x00401c2d

00401e44 <PIOA_Handler>:
{
  401e44:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401e46:	4b01      	ldr	r3, [pc, #4]	; (401e4c <PIOA_Handler+0x8>)
  401e48:	4798      	blx	r3
  401e4a:	bd08      	pop	{r3, pc}
  401e4c:	00401c2d 	.word	0x00401c2d

00401e50 <PIOB_Handler>:
{
  401e50:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401e52:	4b01      	ldr	r3, [pc, #4]	; (401e58 <PIOB_Handler+0x8>)
  401e54:	4798      	blx	r3
  401e56:	bd08      	pop	{r3, pc}
  401e58:	00401c2d 	.word	0x00401c2d

00401e5c <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401e5c:	b538      	push	{r3, r4, r5, lr}
  401e5e:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401e60:	4805      	ldr	r0, [pc, #20]	; (401e78 <_ext_irq_init+0x1c>)
  401e62:	4c06      	ldr	r4, [pc, #24]	; (401e7c <_ext_irq_init+0x20>)
  401e64:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  401e66:	4806      	ldr	r0, [pc, #24]	; (401e80 <_ext_irq_init+0x24>)
  401e68:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  401e6a:	4806      	ldr	r0, [pc, #24]	; (401e84 <_ext_irq_init+0x28>)
  401e6c:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401e6e:	4b06      	ldr	r3, [pc, #24]	; (401e88 <_ext_irq_init+0x2c>)
  401e70:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401e72:	2000      	movs	r0, #0
  401e74:	bd38      	pop	{r3, r4, r5, pc}
  401e76:	bf00      	nop
  401e78:	400e0e00 	.word	0x400e0e00
  401e7c:	00401d71 	.word	0x00401d71
  401e80:	400e1000 	.word	0x400e1000
  401e84:	400e1400 	.word	0x400e1400
  401e88:	20400374 	.word	0x20400374

00401e8c <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  401e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e90:	4604      	mov	r4, r0
  401e92:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  401e94:	f8df 8050 	ldr.w	r8, [pc, #80]	; 401ee8 <_ext_irq_enable+0x5c>
  401e98:	f240 12ab 	movw	r2, #427	; 0x1ab
  401e9c:	4641      	mov	r1, r8
  401e9e:	289f      	cmp	r0, #159	; 0x9f
  401ea0:	bf8c      	ite	hi
  401ea2:	2000      	movhi	r0, #0
  401ea4:	2001      	movls	r0, #1
  401ea6:	4e0e      	ldr	r6, [pc, #56]	; (401ee0 <_ext_irq_enable+0x54>)
  401ea8:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  401eaa:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  401eac:	22c3      	movs	r2, #195	; 0xc3
  401eae:	4641      	mov	r1, r8
  401eb0:	2d9f      	cmp	r5, #159	; 0x9f
  401eb2:	bf8c      	ite	hi
  401eb4:	2000      	movhi	r0, #0
  401eb6:	2001      	movls	r0, #1
  401eb8:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  401eba:	096d      	lsrs	r5, r5, #5
  401ebc:	4b09      	ldr	r3, [pc, #36]	; (401ee4 <_ext_irq_enable+0x58>)
  401ebe:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  401ec2:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  401ec6:	b937      	cbnz	r7, 401ed6 <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  401ec8:	2301      	movs	r3, #1
  401eca:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  401ece:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  401ed0:	2000      	movs	r0, #0
  401ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  401ed6:	2301      	movs	r3, #1
  401ed8:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  401edc:	642c      	str	r4, [r5, #64]	; 0x40
  401ede:	e7f7      	b.n	401ed0 <_ext_irq_enable+0x44>
  401ee0:	00401735 	.word	0x00401735
  401ee4:	400e0e00 	.word	0x400e0e00
  401ee8:	00405ec4 	.word	0x00405ec4

00401eec <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  401eec:	490e      	ldr	r1, [pc, #56]	; (401f28 <_pmc_init_sources+0x3c>)
  401eee:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401ef0:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  401ef4:	4b0d      	ldr	r3, [pc, #52]	; (401f2c <_pmc_init_sources+0x40>)
  401ef6:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401ef8:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  401efa:	4b0b      	ldr	r3, [pc, #44]	; (401f28 <_pmc_init_sources+0x3c>)
  401efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  401efe:	f013 0f01 	tst.w	r3, #1
  401f02:	d0fa      	beq.n	401efa <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  401f04:	4b08      	ldr	r3, [pc, #32]	; (401f28 <_pmc_init_sources+0x3c>)
  401f06:	6a19      	ldr	r1, [r3, #32]
  401f08:	4a09      	ldr	r2, [pc, #36]	; (401f30 <_pmc_init_sources+0x44>)
  401f0a:	430a      	orrs	r2, r1
  401f0c:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  401f0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  401f10:	4a08      	ldr	r2, [pc, #32]	; (401f34 <_pmc_init_sources+0x48>)
  401f12:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  401f14:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  401f16:	4a08      	ldr	r2, [pc, #32]	; (401f38 <_pmc_init_sources+0x4c>)
  401f18:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  401f1a:	4b03      	ldr	r3, [pc, #12]	; (401f28 <_pmc_init_sources+0x3c>)
  401f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  401f1e:	f013 0f02 	tst.w	r3, #2
  401f22:	d0fa      	beq.n	401f1a <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  401f24:	4770      	bx	lr
  401f26:	bf00      	nop
  401f28:	400e0600 	.word	0x400e0600
  401f2c:	00373e01 	.word	0x00373e01
  401f30:	01370000 	.word	0x01370000
  401f34:	f800ffff 	.word	0xf800ffff
  401f38:	20183f01 	.word	0x20183f01

00401f3c <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401f3c:	4a11      	ldr	r2, [pc, #68]	; (401f84 <_pmc_init_master_clock+0x48>)
  401f3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  401f44:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401f46:	4b0f      	ldr	r3, [pc, #60]	; (401f84 <_pmc_init_master_clock+0x48>)
  401f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401f4a:	f013 0f08 	tst.w	r3, #8
  401f4e:	d0fa      	beq.n	401f46 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401f50:	4a0c      	ldr	r2, [pc, #48]	; (401f84 <_pmc_init_master_clock+0x48>)
  401f52:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  401f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401f5c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401f5e:	4b09      	ldr	r3, [pc, #36]	; (401f84 <_pmc_init_master_clock+0x48>)
  401f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401f62:	f013 0f08 	tst.w	r3, #8
  401f66:	d0fa      	beq.n	401f5e <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401f68:	4a06      	ldr	r2, [pc, #24]	; (401f84 <_pmc_init_master_clock+0x48>)
  401f6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401f6c:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401f70:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401f74:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401f76:	4b03      	ldr	r3, [pc, #12]	; (401f84 <_pmc_init_master_clock+0x48>)
  401f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401f7a:	f013 0f08 	tst.w	r3, #8
  401f7e:	d0fa      	beq.n	401f76 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401f80:	4770      	bx	lr
  401f82:	bf00      	nop
  401f84:	400e0600 	.word	0x400e0600

00401f88 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401f88:	b508      	push	{r3, lr}
	_pmc_init_sources();
  401f8a:	4b02      	ldr	r3, [pc, #8]	; (401f94 <_pmc_init+0xc>)
  401f8c:	4798      	blx	r3
	_pmc_init_master_clock();
  401f8e:	4b02      	ldr	r3, [pc, #8]	; (401f98 <_pmc_init+0x10>)
  401f90:	4798      	blx	r3
  401f92:	bd08      	pop	{r3, pc}
  401f94:	00401eed 	.word	0x00401eed
  401f98:	00401f3d 	.word	0x00401f3d

00401f9c <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401f9c:	2300      	movs	r3, #0
  401f9e:	2b01      	cmp	r3, #1
  401fa0:	d80f      	bhi.n	401fc2 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  401fa2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  401fa6:	008a      	lsls	r2, r1, #2
  401fa8:	4907      	ldr	r1, [pc, #28]	; (401fc8 <_pwm_get_cfg+0x2c>)
  401faa:	588a      	ldr	r2, [r1, r2]
  401fac:	4282      	cmp	r2, r0
  401fae:	d002      	beq.n	401fb6 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401fb0:	3301      	adds	r3, #1
  401fb2:	b2db      	uxtb	r3, r3
  401fb4:	e7f3      	b.n	401f9e <_pwm_get_cfg+0x2>
			return (_pwms + i);
  401fb6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  401fba:	009a      	lsls	r2, r3, #2
  401fbc:	4608      	mov	r0, r1
  401fbe:	4410      	add	r0, r2
  401fc0:	4770      	bx	lr
		}
	}

	return NULL;
  401fc2:	2000      	movs	r0, #0
}
  401fc4:	4770      	bx	lr
  401fc6:	bf00      	nop
  401fc8:	00405ee0 	.word	0x00405ee0

00401fcc <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  401fcc:	4b06      	ldr	r3, [pc, #24]	; (401fe8 <_pwm_init_irq_param+0x1c>)
  401fce:	4298      	cmp	r0, r3
  401fd0:	d003      	beq.n	401fda <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  401fd2:	4b06      	ldr	r3, [pc, #24]	; (401fec <_pwm_init_irq_param+0x20>)
  401fd4:	4298      	cmp	r0, r3
  401fd6:	d003      	beq.n	401fe0 <_pwm_init_irq_param+0x14>
  401fd8:	4770      	bx	lr
		_pwm0_dev = dev;
  401fda:	4b05      	ldr	r3, [pc, #20]	; (401ff0 <_pwm_init_irq_param+0x24>)
  401fdc:	6019      	str	r1, [r3, #0]
  401fde:	e7f8      	b.n	401fd2 <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  401fe0:	4b03      	ldr	r3, [pc, #12]	; (401ff0 <_pwm_init_irq_param+0x24>)
  401fe2:	6059      	str	r1, [r3, #4]
	}
}
  401fe4:	e7f8      	b.n	401fd8 <_pwm_init_irq_param+0xc>
  401fe6:	bf00      	nop
  401fe8:	40020000 	.word	0x40020000
  401fec:	4005c000 	.word	0x4005c000
  401ff0:	20400378 	.word	0x20400378

00401ff4 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  401ff4:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  401ff6:	6903      	ldr	r3, [r0, #16]
	return ((Pwm *)hw)->PWM_ISR1;
  401ff8:	69db      	ldr	r3, [r3, #28]
  401ffa:	b113      	cbz	r3, 402002 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  401ffc:	6803      	ldr	r3, [r0, #0]
  401ffe:	b103      	cbz	r3, 402002 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  402000:	4798      	blx	r3
  402002:	bd08      	pop	{r3, pc}

00402004 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  402004:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  402006:	4b02      	ldr	r3, [pc, #8]	; (402010 <PWM0_Handler+0xc>)
  402008:	6818      	ldr	r0, [r3, #0]
  40200a:	4b02      	ldr	r3, [pc, #8]	; (402014 <PWM0_Handler+0x10>)
  40200c:	4798      	blx	r3
  40200e:	bd08      	pop	{r3, pc}
  402010:	20400378 	.word	0x20400378
  402014:	00401ff5 	.word	0x00401ff5

00402018 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  402018:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  40201a:	4b02      	ldr	r3, [pc, #8]	; (402024 <PWM1_Handler+0xc>)
  40201c:	6858      	ldr	r0, [r3, #4]
  40201e:	4b02      	ldr	r3, [pc, #8]	; (402028 <PWM1_Handler+0x10>)
  402020:	4798      	blx	r3
  402022:	bd08      	pop	{r3, pc}
  402024:	20400378 	.word	0x20400378
  402028:	00401ff5 	.word	0x00401ff5

0040202c <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  40202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40202e:	4606      	mov	r6, r0
	ASSERT(hw);
  402030:	460c      	mov	r4, r1
  402032:	1c08      	adds	r0, r1, #0
  402034:	bf18      	it	ne
  402036:	2001      	movne	r0, #1
  402038:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  40203c:	4944      	ldr	r1, [pc, #272]	; (402150 <_pwm_init+0x124>)
  40203e:	4b45      	ldr	r3, [pc, #276]	; (402154 <_pwm_init+0x128>)
  402040:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  402042:	4620      	mov	r0, r4
  402044:	4b44      	ldr	r3, [pc, #272]	; (402158 <_pwm_init+0x12c>)
  402046:	4798      	blx	r3
  402048:	4605      	mov	r5, r0

	device->hw = hw;
  40204a:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  40204c:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  40204e:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  402050:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  402052:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  402054:	6903      	ldr	r3, [r0, #16]
  402056:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  40205a:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  40205c:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  40205e:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  402060:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  402062:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  402064:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  402068:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  40206a:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  40206c:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  40206e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  402072:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  402074:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  402078:	2300      	movs	r3, #0
  40207a:	e019      	b.n	4020b0 <_pwm_init+0x84>
		ch = cfg->ch + i;
  40207c:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  40207e:	0118      	lsls	r0, r3, #4
  402080:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  402084:	5c3a      	ldrb	r2, [r7, r0]
  402086:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  40208a:	3210      	adds	r2, #16
  40208c:	0152      	lsls	r2, r2, #5
  40208e:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  402090:	5c3a      	ldrb	r2, [r7, r0]
  402092:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  402096:	3210      	adds	r2, #16
  402098:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  40209c:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  40209e:	5c3a      	ldrb	r2, [r7, r0]
  4020a0:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  4020a4:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4020a8:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  4020ac:	3301      	adds	r3, #1
  4020ae:	b25b      	sxtb	r3, r3
  4020b0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4020b2:	4293      	cmp	r3, r2
  4020b4:	d3e2      	bcc.n	40207c <_pwm_init+0x50>
  4020b6:	2300      	movs	r3, #0
  4020b8:	e014      	b.n	4020e4 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  4020ba:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4020bc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4020c0:	0082      	lsls	r2, r0, #2
  4020c2:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  4020c6:	5c88      	ldrb	r0, [r1, r2]
  4020c8:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  4020cc:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  4020d0:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4020d4:	5c8a      	ldrb	r2, [r1, r2]
  4020d6:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4020da:	3213      	adds	r2, #19
  4020dc:	0112      	lsls	r2, r2, #4
  4020de:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  4020e0:	3301      	adds	r3, #1
  4020e2:	b25b      	sxtb	r3, r3
  4020e4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4020e6:	4293      	cmp	r3, r2
  4020e8:	d3e7      	bcc.n	4020ba <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  4020ea:	4631      	mov	r1, r6
  4020ec:	4620      	mov	r0, r4
  4020ee:	4b1b      	ldr	r3, [pc, #108]	; (40215c <_pwm_init+0x130>)
  4020f0:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  4020f2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4020f6:	2b00      	cmp	r3, #0
  4020f8:	db0d      	blt.n	402116 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4020fa:	095a      	lsrs	r2, r3, #5
  4020fc:	f003 031f 	and.w	r3, r3, #31
  402100:	2101      	movs	r1, #1
  402102:	fa01 f303 	lsl.w	r3, r1, r3
  402106:	3220      	adds	r2, #32
  402108:	4915      	ldr	r1, [pc, #84]	; (402160 <_pwm_init+0x134>)
  40210a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40210e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402112:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  402116:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40211a:	2b00      	cmp	r3, #0
  40211c:	db09      	blt.n	402132 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40211e:	095a      	lsrs	r2, r3, #5
  402120:	f003 031f 	and.w	r3, r3, #31
  402124:	2101      	movs	r1, #1
  402126:	fa01 f303 	lsl.w	r3, r1, r3
  40212a:	3260      	adds	r2, #96	; 0x60
  40212c:	490c      	ldr	r1, [pc, #48]	; (402160 <_pwm_init+0x134>)
  40212e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  402132:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402136:	2b00      	cmp	r3, #0
  402138:	db08      	blt.n	40214c <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40213a:	0959      	lsrs	r1, r3, #5
  40213c:	f003 031f 	and.w	r3, r3, #31
  402140:	2201      	movs	r2, #1
  402142:	fa02 f303 	lsl.w	r3, r2, r3
  402146:	4a06      	ldr	r2, [pc, #24]	; (402160 <_pwm_init+0x134>)
  402148:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  40214c:	2000      	movs	r0, #0
  40214e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402150:	00405f88 	.word	0x00405f88
  402154:	00401735 	.word	0x00401735
  402158:	00401f9d 	.word	0x00401f9d
  40215c:	00401fcd 	.word	0x00401fcd
  402160:	e000e100 	.word	0xe000e100

00402164 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  402164:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  402166:	4604      	mov	r4, r0
  402168:	f240 12b5 	movw	r2, #437	; 0x1b5
  40216c:	490b      	ldr	r1, [pc, #44]	; (40219c <_pwm_enable+0x38>)
  40216e:	3000      	adds	r0, #0
  402170:	bf18      	it	ne
  402172:	2001      	movne	r0, #1
  402174:	4b0a      	ldr	r3, [pc, #40]	; (4021a0 <_pwm_enable+0x3c>)
  402176:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  402178:	6920      	ldr	r0, [r4, #16]
  40217a:	4b0a      	ldr	r3, [pc, #40]	; (4021a4 <_pwm_enable+0x40>)
  40217c:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  40217e:	2300      	movs	r3, #0
  402180:	e008      	b.n	402194 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  402182:	6921      	ldr	r1, [r4, #16]
  402184:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402186:	011a      	lsls	r2, r3, #4
  402188:	5cad      	ldrb	r5, [r5, r2]
  40218a:	2201      	movs	r2, #1
  40218c:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  40218e:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  402190:	3301      	adds	r3, #1
  402192:	b25b      	sxtb	r3, r3
  402194:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402196:	4293      	cmp	r3, r2
  402198:	d3f3      	bcc.n	402182 <_pwm_enable+0x1e>
	}
}
  40219a:	bd38      	pop	{r3, r4, r5, pc}
  40219c:	00405f88 	.word	0x00405f88
  4021a0:	00401735 	.word	0x00401735
  4021a4:	00401f9d 	.word	0x00401f9d

004021a8 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  4021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4021aa:	460d      	mov	r5, r1
  4021ac:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  4021ae:	4604      	mov	r4, r0
  4021b0:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  4021b4:	4911      	ldr	r1, [pc, #68]	; (4021fc <_pwm_set_param+0x54>)
  4021b6:	2800      	cmp	r0, #0
  4021b8:	bf18      	it	ne
  4021ba:	42ae      	cmpne	r6, r5
  4021bc:	bf34      	ite	cc
  4021be:	2001      	movcc	r0, #1
  4021c0:	2000      	movcs	r0, #0
  4021c2:	4b0f      	ldr	r3, [pc, #60]	; (402200 <_pwm_set_param+0x58>)
  4021c4:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  4021c6:	6920      	ldr	r0, [r4, #16]
  4021c8:	4b0e      	ldr	r3, [pc, #56]	; (402204 <_pwm_set_param+0x5c>)
  4021ca:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4021cc:	2300      	movs	r3, #0
  4021ce:	e010      	b.n	4021f2 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  4021d0:	6922      	ldr	r2, [r4, #16]
  4021d2:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4021d4:	0119      	lsls	r1, r3, #4
  4021d6:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  4021d8:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  4021dc:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  4021e0:	6922      	ldr	r2, [r4, #16]
  4021e2:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4021e4:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  4021e6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  4021ea:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  4021ee:	3301      	adds	r3, #1
  4021f0:	b2db      	uxtb	r3, r3
  4021f2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4021f4:	4293      	cmp	r3, r2
  4021f6:	d3eb      	bcc.n	4021d0 <_pwm_set_param+0x28>
	}
}
  4021f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021fa:	bf00      	nop
  4021fc:	00405f88 	.word	0x00405f88
  402200:	00401735 	.word	0x00401735
  402204:	00401f9d 	.word	0x00401f9d

00402208 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  402208:	b510      	push	{r4, lr}
	ASSERT(device);
  40220a:	4604      	mov	r4, r0
  40220c:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402210:	4907      	ldr	r1, [pc, #28]	; (402230 <_pwm_is_enabled+0x28>)
  402212:	3000      	adds	r0, #0
  402214:	bf18      	it	ne
  402216:	2001      	movne	r0, #1
  402218:	4b06      	ldr	r3, [pc, #24]	; (402234 <_pwm_is_enabled+0x2c>)
  40221a:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  40221c:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  40221e:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  402220:	f013 0f0f 	tst.w	r3, #15
  402224:	d001      	beq.n	40222a <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  402226:	2001      	movs	r0, #1
	}
}
  402228:	bd10      	pop	{r4, pc}
		return false;
  40222a:	2000      	movs	r0, #0
  40222c:	bd10      	pop	{r4, pc}
  40222e:	bf00      	nop
  402230:	00405f88 	.word	0x00405f88
  402234:	00401735 	.word	0x00401735

00402238 <_pwm_set_irq_state>:

	return hri_pwm_read_CDTY_reg(device->hw, cfg->ch[0].index);
}

void _pwm_set_irq_state(struct _pwm_device *const device, const enum _pwm_callback_type type, const bool disable)
{
  402238:	b538      	push	{r3, r4, r5, lr}
  40223a:	460d      	mov	r5, r1
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device);
  40223c:	4604      	mov	r4, r0
  40223e:	f44f 7200 	mov.w	r2, #512	; 0x200
  402242:	4912      	ldr	r1, [pc, #72]	; (40228c <_pwm_set_irq_state+0x54>)
  402244:	3000      	adds	r0, #0
  402246:	bf18      	it	ne
  402248:	2001      	movne	r0, #1
  40224a:	4b11      	ldr	r3, [pc, #68]	; (402290 <_pwm_set_irq_state+0x58>)
  40224c:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  40224e:	6920      	ldr	r0, [r4, #16]
  402250:	4b10      	ldr	r3, [pc, #64]	; (402294 <_pwm_set_irq_state+0x5c>)
  402252:	4798      	blx	r3

	if (PWM_DEVICE_PERIOD_CB == type) {
  402254:	b18d      	cbz	r5, 40227a <_pwm_set_irq_state+0x42>
		for (i = 0; i < cfg->ch_num; i++) {
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
		}
	} else if (PWM_DEVICE_ERROR_CB == type) {
  402256:	2d01      	cmp	r5, #1
  402258:	d011      	beq.n	40227e <_pwm_set_irq_state+0x46>
  40225a:	bd38      	pop	{r3, r4, r5, pc}
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
  40225c:	6921      	ldr	r1, [r4, #16]
  40225e:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402260:	0113      	lsls	r3, r2, #4
  402262:	5ced      	ldrb	r5, [r5, r3]
  402264:	2301      	movs	r3, #1
  402266:	40ab      	lsls	r3, r5
	((Pwm *)hw)->PWM_IER1 = data;
  402268:	610b      	str	r3, [r1, #16]
	((Pwm *)hw)->PWM_IDR1 = ~data;
  40226a:	43db      	mvns	r3, r3
  40226c:	614b      	str	r3, [r1, #20]
		for (i = 0; i < cfg->ch_num; i++) {
  40226e:	3201      	adds	r2, #1
  402270:	b2d2      	uxtb	r2, r2
  402272:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402274:	429a      	cmp	r2, r3
  402276:	d3f1      	bcc.n	40225c <_pwm_set_irq_state+0x24>
  402278:	bd38      	pop	{r3, r4, r5, pc}
  40227a:	2200      	movs	r2, #0
  40227c:	e7f9      	b.n	402272 <_pwm_set_irq_state+0x3a>
		ASSERT(false);
  40227e:	f240 2209 	movw	r2, #521	; 0x209
  402282:	4902      	ldr	r1, [pc, #8]	; (40228c <_pwm_set_irq_state+0x54>)
  402284:	2000      	movs	r0, #0
  402286:	4b02      	ldr	r3, [pc, #8]	; (402290 <_pwm_set_irq_state+0x58>)
  402288:	4798      	blx	r3
	}
}
  40228a:	e7e6      	b.n	40225a <_pwm_set_irq_state+0x22>
  40228c:	00405f88 	.word	0x00405f88
  402290:	00401735 	.word	0x00401735
  402294:	00401f9d 	.word	0x00401f9d

00402298 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  402298:	2000      	movs	r0, #0
  40229a:	4770      	bx	lr

0040229c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  40229c:	4b03      	ldr	r3, [pc, #12]	; (4022ac <_system_time_init+0x10>)
  40229e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4022a2:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  4022a4:	2205      	movs	r2, #5
  4022a6:	601a      	str	r2, [r3, #0]
  4022a8:	4770      	bx	lr
  4022aa:	bf00      	nop
  4022ac:	e000e010 	.word	0xe000e010

004022b0 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  4022b0:	b508      	push	{r3, lr}
	_system_time_init(hw);
  4022b2:	4b01      	ldr	r3, [pc, #4]	; (4022b8 <_delay_init+0x8>)
  4022b4:	4798      	blx	r3
  4022b6:	bd08      	pop	{r3, pc}
  4022b8:	0040229d 	.word	0x0040229d

004022bc <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  4022bc:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  4022be:	e00d      	b.n	4022dc <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  4022c0:	4b0d      	ldr	r3, [pc, #52]	; (4022f8 <_delay_cycles+0x3c>)
  4022c2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  4022c6:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  4022c8:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4022ca:	4b0b      	ldr	r3, [pc, #44]	; (4022f8 <_delay_cycles+0x3c>)
  4022cc:	681b      	ldr	r3, [r3, #0]
  4022ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4022d2:	d0fa      	beq.n	4022ca <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  4022d4:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4022d8:	3101      	adds	r1, #1
	while (n--) {
  4022da:	4610      	mov	r0, r2
  4022dc:	1e43      	subs	r3, r0, #1
  4022de:	b2da      	uxtb	r2, r3
  4022e0:	2800      	cmp	r0, #0
  4022e2:	d1ed      	bne.n	4022c0 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  4022e4:	4b04      	ldr	r3, [pc, #16]	; (4022f8 <_delay_cycles+0x3c>)
  4022e6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4022e8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4022ea:	4b03      	ldr	r3, [pc, #12]	; (4022f8 <_delay_cycles+0x3c>)
  4022ec:	681b      	ldr	r3, [r3, #0]
  4022ee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4022f2:	d0fa      	beq.n	4022ea <_delay_cycles+0x2e>
		;
}
  4022f4:	4770      	bx	lr
  4022f6:	bf00      	nop
  4022f8:	e000e010 	.word	0xe000e010

004022fc <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4022fc:	2300      	movs	r3, #0
  4022fe:	2b01      	cmp	r3, #1
  402300:	d815      	bhi.n	40232e <get_cfg+0x32>
{
  402302:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  402304:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  402308:	008a      	lsls	r2, r1, #2
  40230a:	490a      	ldr	r1, [pc, #40]	; (402334 <get_cfg+0x38>)
  40230c:	588a      	ldr	r2, [r1, r2]
  40230e:	4282      	cmp	r2, r0
  402310:	d007      	beq.n	402322 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  402312:	3301      	adds	r3, #1
  402314:	b2db      	uxtb	r3, r3
  402316:	2b01      	cmp	r3, #1
  402318:	d9f4      	bls.n	402304 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  40231a:	2000      	movs	r0, #0
}
  40231c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402320:	4770      	bx	lr
			return &(_tcs[i]);
  402322:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  402326:	00a3      	lsls	r3, r4, #2
  402328:	4608      	mov	r0, r1
  40232a:	4418      	add	r0, r3
  40232c:	e7f6      	b.n	40231c <get_cfg+0x20>
	return NULL;
  40232e:	2000      	movs	r0, #0
  402330:	4770      	bx	lr
  402332:	bf00      	nop
  402334:	20400000 	.word	0x20400000

00402338 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  402338:	4b06      	ldr	r3, [pc, #24]	; (402354 <_tc_init_irq_param+0x1c>)
  40233a:	4298      	cmp	r0, r3
  40233c:	d003      	beq.n	402346 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  40233e:	4b06      	ldr	r3, [pc, #24]	; (402358 <_tc_init_irq_param+0x20>)
  402340:	4298      	cmp	r0, r3
  402342:	d003      	beq.n	40234c <_tc_init_irq_param+0x14>
  402344:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  402346:	4b05      	ldr	r3, [pc, #20]	; (40235c <_tc_init_irq_param+0x24>)
  402348:	6019      	str	r1, [r3, #0]
  40234a:	e7f8      	b.n	40233e <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  40234c:	4b03      	ldr	r3, [pc, #12]	; (40235c <_tc_init_irq_param+0x24>)
  40234e:	6059      	str	r1, [r3, #4]
	}
}
  402350:	e7f8      	b.n	402344 <_tc_init_irq_param+0xc>
  402352:	bf00      	nop
  402354:	4000c000 	.word	0x4000c000
  402358:	40054000 	.word	0x40054000
  40235c:	20400398 	.word	0x20400398

00402360 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  402360:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  402362:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  402364:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  402366:	f013 0f10 	tst.w	r3, #16
  40236a:	d100      	bne.n	40236e <tc_interrupt_handler+0xe>
  40236c:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  40236e:	6803      	ldr	r3, [r0, #0]
  402370:	4798      	blx	r3
	}
}
  402372:	e7fb      	b.n	40236c <tc_interrupt_handler+0xc>

00402374 <_timer_init>:
{
  402374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402378:	4606      	mov	r6, r0
  40237a:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  40237c:	4608      	mov	r0, r1
  40237e:	4b2f      	ldr	r3, [pc, #188]	; (40243c <_timer_init+0xc8>)
  402380:	4798      	blx	r3
  402382:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  402384:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  402388:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  40238c:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  40238e:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  402392:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  402394:	22c3      	movs	r2, #195	; 0xc3
  402396:	492a      	ldr	r1, [pc, #168]	; (402440 <_timer_init+0xcc>)
  402398:	2001      	movs	r0, #1
  40239a:	4b2a      	ldr	r3, [pc, #168]	; (402444 <_timer_init+0xd0>)
  40239c:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  40239e:	f248 0307 	movw	r3, #32775	; 0x8007
  4023a2:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4023a4:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4023a8:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4023ac:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4023b0:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4023b2:	2300      	movs	r3, #0
  4023b4:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  4023b6:	f248 020f 	movw	r2, #32783	; 0x800f
  4023ba:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4023bc:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4023c0:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4023c4:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4023c8:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4023ca:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  4023cc:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  4023ce:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  4023d2:	4631      	mov	r1, r6
  4023d4:	4620      	mov	r0, r4
  4023d6:	4b1c      	ldr	r3, [pc, #112]	; (402448 <_timer_init+0xd4>)
  4023d8:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  4023da:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4023de:	2b00      	cmp	r3, #0
  4023e0:	db0d      	blt.n	4023fe <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4023e2:	095a      	lsrs	r2, r3, #5
  4023e4:	f003 031f 	and.w	r3, r3, #31
  4023e8:	2101      	movs	r1, #1
  4023ea:	fa01 f303 	lsl.w	r3, r1, r3
  4023ee:	3220      	adds	r2, #32
  4023f0:	4916      	ldr	r1, [pc, #88]	; (40244c <_timer_init+0xd8>)
  4023f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4023f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4023fa:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  4023fe:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402402:	2b00      	cmp	r3, #0
  402404:	db09      	blt.n	40241a <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402406:	095a      	lsrs	r2, r3, #5
  402408:	f003 031f 	and.w	r3, r3, #31
  40240c:	2101      	movs	r1, #1
  40240e:	fa01 f303 	lsl.w	r3, r1, r3
  402412:	3260      	adds	r2, #96	; 0x60
  402414:	490d      	ldr	r1, [pc, #52]	; (40244c <_timer_init+0xd8>)
  402416:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  40241a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40241e:	2b00      	cmp	r3, #0
  402420:	db08      	blt.n	402434 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402422:	0959      	lsrs	r1, r3, #5
  402424:	f003 031f 	and.w	r3, r3, #31
  402428:	2201      	movs	r2, #1
  40242a:	fa02 f303 	lsl.w	r3, r2, r3
  40242e:	4a07      	ldr	r2, [pc, #28]	; (40244c <_timer_init+0xd8>)
  402430:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  402434:	2000      	movs	r0, #0
  402436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40243a:	bf00      	nop
  40243c:	004022fd 	.word	0x004022fd
  402440:	00405fa0 	.word	0x00405fa0
  402444:	00401735 	.word	0x00401735
  402448:	00402339 	.word	0x00402339
  40244c:	e000e100 	.word	0xe000e100

00402450 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402450:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  402452:	2305      	movs	r3, #5
  402454:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402456:	68c2      	ldr	r2, [r0, #12]
  402458:	6413      	str	r3, [r2, #64]	; 0x40
  40245a:	4770      	bx	lr

0040245c <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  40245c:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  40245e:	6a13      	ldr	r3, [r2, #32]
  402460:	f3c3 4300 	ubfx	r3, r3, #16, #1
  402464:	6e10      	ldr	r0, [r2, #96]	; 0x60
  402466:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  40246a:	4318      	orrs	r0, r3
  40246c:	4770      	bx	lr

0040246e <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  40246e:	2000      	movs	r0, #0
  402470:	4770      	bx	lr
	...

00402474 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  402474:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  402476:	4b02      	ldr	r3, [pc, #8]	; (402480 <TC0_Handler+0xc>)
  402478:	6818      	ldr	r0, [r3, #0]
  40247a:	4b02      	ldr	r3, [pc, #8]	; (402484 <TC0_Handler+0x10>)
  40247c:	4798      	blx	r3
  40247e:	bd08      	pop	{r3, pc}
  402480:	20400398 	.word	0x20400398
  402484:	00402361 	.word	0x00402361

00402488 <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  402488:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  40248a:	4b02      	ldr	r3, [pc, #8]	; (402494 <TC9_Handler+0xc>)
  40248c:	6858      	ldr	r0, [r3, #4]
  40248e:	4b02      	ldr	r3, [pc, #8]	; (402498 <TC9_Handler+0x10>)
  402490:	4798      	blx	r3
  402492:	bd08      	pop	{r3, pc}
  402494:	20400398 	.word	0x20400398
  402498:	00402361 	.word	0x00402361

0040249c <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  40249c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40249e:	4604      	mov	r4, r0
  4024a0:	f240 222b 	movw	r2, #555	; 0x22b
  4024a4:	4905      	ldr	r1, [pc, #20]	; (4024bc <_usart_get_hardware_index+0x20>)
  4024a6:	3000      	adds	r0, #0
  4024a8:	bf18      	it	ne
  4024aa:	2001      	movne	r0, #1
  4024ac:	4b04      	ldr	r3, [pc, #16]	; (4024c0 <_usart_get_hardware_index+0x24>)
  4024ae:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  4024b0:	4804      	ldr	r0, [pc, #16]	; (4024c4 <_usart_get_hardware_index+0x28>)
  4024b2:	4420      	add	r0, r4
}
  4024b4:	f3c0 3087 	ubfx	r0, r0, #14, #8
  4024b8:	bd10      	pop	{r4, pc}
  4024ba:	bf00      	nop
  4024bc:	00405fc0 	.word	0x00405fc0
  4024c0:	00401735 	.word	0x00401735
  4024c4:	bffdc000 	.word	0xbffdc000

004024c8 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  4024c8:	b510      	push	{r4, lr}
	ASSERT(hw);
  4024ca:	4604      	mov	r4, r0
  4024cc:	f240 2287 	movw	r2, #647	; 0x287
  4024d0:	490e      	ldr	r1, [pc, #56]	; (40250c <_get_usart_index+0x44>)
  4024d2:	3000      	adds	r0, #0
  4024d4:	bf18      	it	ne
  4024d6:	2001      	movne	r0, #1
  4024d8:	4b0d      	ldr	r3, [pc, #52]	; (402510 <_get_usart_index+0x48>)
  4024da:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  4024dc:	4620      	mov	r0, r4
  4024de:	4b0d      	ldr	r3, [pc, #52]	; (402514 <_get_usart_index+0x4c>)
  4024e0:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4024e2:	2300      	movs	r3, #0
  4024e4:	b143      	cbz	r3, 4024f8 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  4024e6:	f240 2291 	movw	r2, #657	; 0x291
  4024ea:	4908      	ldr	r1, [pc, #32]	; (40250c <_get_usart_index+0x44>)
  4024ec:	2000      	movs	r0, #0
  4024ee:	4b08      	ldr	r3, [pc, #32]	; (402510 <_get_usart_index+0x48>)
  4024f0:	4798      	blx	r3
	return 0;
  4024f2:	2300      	movs	r3, #0
}
  4024f4:	4618      	mov	r0, r3
  4024f6:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  4024f8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4024fc:	008a      	lsls	r2, r1, #2
  4024fe:	4906      	ldr	r1, [pc, #24]	; (402518 <_get_usart_index+0x50>)
  402500:	5c8a      	ldrb	r2, [r1, r2]
  402502:	4290      	cmp	r0, r2
  402504:	d0f6      	beq.n	4024f4 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  402506:	3301      	adds	r3, #1
  402508:	b2db      	uxtb	r3, r3
  40250a:	e7eb      	b.n	4024e4 <_get_usart_index+0x1c>
  40250c:	00405fc0 	.word	0x00405fc0
  402510:	00401735 	.word	0x00401735
  402514:	0040249d 	.word	0x0040249d
  402518:	00405fb4 	.word	0x00405fb4

0040251c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  40251c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40251e:	4604      	mov	r4, r0
  402520:	f240 229e 	movw	r2, #670	; 0x29e
  402524:	4911      	ldr	r1, [pc, #68]	; (40256c <_usart_init+0x50>)
  402526:	3000      	adds	r0, #0
  402528:	bf18      	it	ne
  40252a:	2001      	movne	r0, #1
  40252c:	4b10      	ldr	r3, [pc, #64]	; (402570 <_usart_init+0x54>)
  40252e:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  402530:	4620      	mov	r0, r4
  402532:	4b10      	ldr	r3, [pc, #64]	; (402574 <_usart_init+0x58>)
  402534:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  402536:	4b10      	ldr	r3, [pc, #64]	; (402578 <_usart_init+0x5c>)
  402538:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  40253c:	2300      	movs	r3, #0
  40253e:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  402540:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  402542:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  402544:	22ac      	movs	r2, #172	; 0xac
  402546:	6022      	str	r2, [r4, #0]
  402548:	f44f 7280 	mov.w	r2, #256	; 0x100
  40254c:	6022      	str	r2, [r4, #0]
  40254e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402552:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  402554:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  402558:	0081      	lsls	r1, r0, #2
  40255a:	4a08      	ldr	r2, [pc, #32]	; (40257c <_usart_init+0x60>)
  40255c:	440a      	add	r2, r1
  40255e:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  402560:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  402562:	4a07      	ldr	r2, [pc, #28]	; (402580 <_usart_init+0x64>)
  402564:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  402566:	4618      	mov	r0, r3
  402568:	bd10      	pop	{r4, pc}
  40256a:	bf00      	nop
  40256c:	00405fc0 	.word	0x00405fc0
  402570:	00401735 	.word	0x00401735
  402574:	004024c9 	.word	0x004024c9
  402578:	55534100 	.word	0x55534100
  40257c:	00405fb4 	.word	0x00405fb4
  402580:	000100f4 	.word	0x000100f4

00402584 <_usart_sync_init>:
{
  402584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402586:	460c      	mov	r4, r1
	ASSERT(device);
  402588:	4e09      	ldr	r6, [pc, #36]	; (4025b0 <_usart_sync_init+0x2c>)
  40258a:	4607      	mov	r7, r0
  40258c:	22bd      	movs	r2, #189	; 0xbd
  40258e:	4631      	mov	r1, r6
  402590:	3000      	adds	r0, #0
  402592:	bf18      	it	ne
  402594:	2001      	movne	r0, #1
  402596:	4d07      	ldr	r5, [pc, #28]	; (4025b4 <_usart_sync_init+0x30>)
  402598:	47a8      	blx	r5
	ASSERT(hw);
  40259a:	22be      	movs	r2, #190	; 0xbe
  40259c:	4631      	mov	r1, r6
  40259e:	1c20      	adds	r0, r4, #0
  4025a0:	bf18      	it	ne
  4025a2:	2001      	movne	r0, #1
  4025a4:	47a8      	blx	r5
	device->hw = hw;
  4025a6:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  4025a8:	4620      	mov	r0, r4
  4025aa:	4b03      	ldr	r3, [pc, #12]	; (4025b8 <_usart_sync_init+0x34>)
  4025ac:	4798      	blx	r3
}
  4025ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4025b0:	00405fc0 	.word	0x00405fc0
  4025b4:	00401735 	.word	0x00401735
  4025b8:	0040251d 	.word	0x0040251d

004025bc <_usart_sync_enable>:
{
  4025bc:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4025be:	4e0a      	ldr	r6, [pc, #40]	; (4025e8 <_usart_sync_enable+0x2c>)
  4025c0:	4604      	mov	r4, r0
  4025c2:	f240 1205 	movw	r2, #261	; 0x105
  4025c6:	4631      	mov	r1, r6
  4025c8:	3000      	adds	r0, #0
  4025ca:	bf18      	it	ne
  4025cc:	2001      	movne	r0, #1
  4025ce:	4d07      	ldr	r5, [pc, #28]	; (4025ec <_usart_sync_enable+0x30>)
  4025d0:	47a8      	blx	r5
	_usart_enable(device->hw);
  4025d2:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4025d4:	f240 22c7 	movw	r2, #711	; 0x2c7
  4025d8:	4631      	mov	r1, r6
  4025da:	1c20      	adds	r0, r4, #0
  4025dc:	bf18      	it	ne
  4025de:	2001      	movne	r0, #1
  4025e0:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  4025e2:	2350      	movs	r3, #80	; 0x50
  4025e4:	6023      	str	r3, [r4, #0]
  4025e6:	bd70      	pop	{r4, r5, r6, pc}
  4025e8:	00405fc0 	.word	0x00405fc0
  4025ec:	00401735 	.word	0x00401735

004025f0 <_usart_sync_write_byte>:
{
  4025f0:	b538      	push	{r3, r4, r5, lr}
  4025f2:	460c      	mov	r4, r1
	ASSERT(device);
  4025f4:	4605      	mov	r5, r0
  4025f6:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4025fa:	4904      	ldr	r1, [pc, #16]	; (40260c <_usart_sync_write_byte+0x1c>)
  4025fc:	3000      	adds	r0, #0
  4025fe:	bf18      	it	ne
  402600:	2001      	movne	r0, #1
  402602:	4b03      	ldr	r3, [pc, #12]	; (402610 <_usart_sync_write_byte+0x20>)
  402604:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  402606:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  402608:	61dc      	str	r4, [r3, #28]
  40260a:	bd38      	pop	{r3, r4, r5, pc}
  40260c:	00405fc0 	.word	0x00405fc0
  402610:	00401735 	.word	0x00401735

00402614 <_usart_sync_read_byte>:
{
  402614:	b510      	push	{r4, lr}
	ASSERT(device);
  402616:	4604      	mov	r4, r0
  402618:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  40261c:	4904      	ldr	r1, [pc, #16]	; (402630 <_usart_sync_read_byte+0x1c>)
  40261e:	3000      	adds	r0, #0
  402620:	bf18      	it	ne
  402622:	2001      	movne	r0, #1
  402624:	4b03      	ldr	r3, [pc, #12]	; (402634 <_usart_sync_read_byte+0x20>)
  402626:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  402628:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  40262a:	6998      	ldr	r0, [r3, #24]
}
  40262c:	b2c0      	uxtb	r0, r0
  40262e:	bd10      	pop	{r4, pc}
  402630:	00405fc0 	.word	0x00405fc0
  402634:	00401735 	.word	0x00401735

00402638 <_usart_sync_is_ready_to_send>:
{
  402638:	b510      	push	{r4, lr}
	ASSERT(device);
  40263a:	4604      	mov	r4, r0
  40263c:	f240 12c3 	movw	r2, #451	; 0x1c3
  402640:	4905      	ldr	r1, [pc, #20]	; (402658 <_usart_sync_is_ready_to_send+0x20>)
  402642:	3000      	adds	r0, #0
  402644:	bf18      	it	ne
  402646:	2001      	movne	r0, #1
  402648:	4b04      	ldr	r3, [pc, #16]	; (40265c <_usart_sync_is_ready_to_send+0x24>)
  40264a:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  40264c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  40264e:	6958      	ldr	r0, [r3, #20]
}
  402650:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402654:	bd10      	pop	{r4, pc}
  402656:	bf00      	nop
  402658:	00405fc0 	.word	0x00405fc0
  40265c:	00401735 	.word	0x00401735

00402660 <_usart_sync_is_transmit_done>:
{
  402660:	b510      	push	{r4, lr}
	ASSERT(device);
  402662:	4604      	mov	r4, r0
  402664:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  402668:	4905      	ldr	r1, [pc, #20]	; (402680 <_usart_sync_is_transmit_done+0x20>)
  40266a:	3000      	adds	r0, #0
  40266c:	bf18      	it	ne
  40266e:	2001      	movne	r0, #1
  402670:	4b04      	ldr	r3, [pc, #16]	; (402684 <_usart_sync_is_transmit_done+0x24>)
  402672:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  402674:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  402676:	6958      	ldr	r0, [r3, #20]
}
  402678:	f3c0 2040 	ubfx	r0, r0, #9, #1
  40267c:	bd10      	pop	{r4, pc}
  40267e:	bf00      	nop
  402680:	00405fc0 	.word	0x00405fc0
  402684:	00401735 	.word	0x00401735

00402688 <_usart_sync_is_byte_received>:
{
  402688:	b510      	push	{r4, lr}
	ASSERT(device);
  40268a:	4604      	mov	r4, r0
  40268c:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402690:	4905      	ldr	r1, [pc, #20]	; (4026a8 <_usart_sync_is_byte_received+0x20>)
  402692:	3000      	adds	r0, #0
  402694:	bf18      	it	ne
  402696:	2001      	movne	r0, #1
  402698:	4b04      	ldr	r3, [pc, #16]	; (4026ac <_usart_sync_is_byte_received+0x24>)
  40269a:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  40269c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  40269e:	6958      	ldr	r0, [r3, #20]
  4026a0:	f000 0001 	and.w	r0, r0, #1
}
  4026a4:	bd10      	pop	{r4, pc}
  4026a6:	bf00      	nop
  4026a8:	00405fc0 	.word	0x00405fc0
  4026ac:	00401735 	.word	0x00401735

004026b0 <_usart_get_usart_sync>:
}
  4026b0:	2000      	movs	r0, #0
  4026b2:	4770      	bx	lr

004026b4 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  4026b4:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4026b6:	2300      	movs	r3, #0
  4026b8:	e004      	b.n	4026c4 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  4026ba:	0199      	lsls	r1, r3, #6
  4026bc:	4a16      	ldr	r2, [pc, #88]	; (402718 <_dma_init+0x64>)
  4026be:	5852      	ldr	r2, [r2, r1]
  4026c0:	3301      	adds	r3, #1
  4026c2:	b2db      	uxtb	r3, r3
  4026c4:	2b17      	cmp	r3, #23
  4026c6:	d9f8      	bls.n	4026ba <_dma_init+0x6>
  4026c8:	2300      	movs	r3, #0
  4026ca:	e014      	b.n	4026f6 <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  4026cc:	4c13      	ldr	r4, [pc, #76]	; (40271c <_dma_init+0x68>)
  4026ce:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  4026d2:	2100      	movs	r1, #0
  4026d4:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  4026d6:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  4026d8:	1c98      	adds	r0, r3, #2
  4026da:	0180      	lsls	r0, r0, #6
  4026dc:	1825      	adds	r5, r4, r0
  4026de:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  4026e0:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  4026e2:	490f      	ldr	r1, [pc, #60]	; (402720 <_dma_init+0x6c>)
  4026e4:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  4026e8:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  4026ea:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4026ee:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  4026f0:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4026f2:	3301      	adds	r3, #1
  4026f4:	b2db      	uxtb	r3, r3
  4026f6:	2b17      	cmp	r3, #23
  4026f8:	d9e8      	bls.n	4026cc <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4026fa:	4b0a      	ldr	r3, [pc, #40]	; (402724 <_dma_init+0x70>)
  4026fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  402704:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402708:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40270c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402710:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  402712:	2000      	movs	r0, #0
  402714:	bc30      	pop	{r4, r5}
  402716:	4770      	bx	lr
  402718:	4007805c 	.word	0x4007805c
  40271c:	40078000 	.word	0x40078000
  402720:	00405fdc 	.word	0x00405fdc
  402724:	e000e100 	.word	0xe000e100

00402728 <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  402728:	0180      	lsls	r0, r0, #6
  40272a:	4b02      	ldr	r3, [pc, #8]	; (402734 <_dma_set_destination_address+0xc>)
  40272c:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  40272e:	2000      	movs	r0, #0
  402730:	4770      	bx	lr
  402732:	bf00      	nop
  402734:	40078064 	.word	0x40078064

00402738 <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  402738:	0180      	lsls	r0, r0, #6
  40273a:	4b02      	ldr	r3, [pc, #8]	; (402744 <_dma_set_source_address+0xc>)
  40273c:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  40273e:	2000      	movs	r0, #0
  402740:	4770      	bx	lr
  402742:	bf00      	nop
  402744:	40078060 	.word	0x40078060

00402748 <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  402748:	0180      	lsls	r0, r0, #6
  40274a:	4a04      	ldr	r2, [pc, #16]	; (40275c <_dma_set_data_amount+0x14>)
  40274c:	4402      	add	r2, r0
  40274e:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  402750:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  402754:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  402756:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  402758:	2000      	movs	r0, #0
  40275a:	4770      	bx	lr
  40275c:	40078000 	.word	0x40078000

00402760 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  402760:	2301      	movs	r3, #1
  402762:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  402766:	4b03      	ldr	r3, [pc, #12]	; (402774 <_dma_enable_transaction+0x14>)
  402768:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  40276a:	b101      	cbz	r1, 40276e <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  40276c:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  40276e:	2000      	movs	r0, #0
  402770:	4770      	bx	lr
  402772:	bf00      	nop
  402774:	40078000 	.word	0x40078000

00402778 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  402778:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  40277c:	008a      	lsls	r2, r1, #2
  40277e:	4b02      	ldr	r3, [pc, #8]	; (402788 <_dma_get_channel_resource+0x10>)
  402780:	4413      	add	r3, r2
  402782:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  402784:	2000      	movs	r0, #0
  402786:	4770      	bx	lr
  402788:	204003a0 	.word	0x204003a0

0040278c <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  40278c:	b19a      	cbz	r2, 4027b6 <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  40278e:	b951      	cbnz	r1, 4027a6 <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  402790:	0182      	lsls	r2, r0, #6
  402792:	4b13      	ldr	r3, [pc, #76]	; (4027e0 <_dma_set_irq_state+0x54>)
  402794:	4413      	add	r3, r2
  402796:	2201      	movs	r2, #1
  402798:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  40279a:	2301      	movs	r3, #1
  40279c:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  4027a0:	4b0f      	ldr	r3, [pc, #60]	; (4027e0 <_dma_set_irq_state+0x54>)
  4027a2:	60d8      	str	r0, [r3, #12]
  4027a4:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4027a6:	2901      	cmp	r1, #1
  4027a8:	d1f7      	bne.n	40279a <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  4027aa:	0182      	lsls	r2, r0, #6
  4027ac:	4b0c      	ldr	r3, [pc, #48]	; (4027e0 <_dma_set_irq_state+0x54>)
  4027ae:	4413      	add	r3, r2
  4027b0:	2270      	movs	r2, #112	; 0x70
  4027b2:	651a      	str	r2, [r3, #80]	; 0x50
  4027b4:	e7f1      	b.n	40279a <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  4027b6:	b951      	cbnz	r1, 4027ce <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4027b8:	0182      	lsls	r2, r0, #6
  4027ba:	4b09      	ldr	r3, [pc, #36]	; (4027e0 <_dma_set_irq_state+0x54>)
  4027bc:	4413      	add	r3, r2
  4027be:	2201      	movs	r2, #1
  4027c0:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  4027c2:	2301      	movs	r3, #1
  4027c4:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  4027c8:	4b05      	ldr	r3, [pc, #20]	; (4027e0 <_dma_set_irq_state+0x54>)
  4027ca:	6118      	str	r0, [r3, #16]
  4027cc:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4027ce:	2901      	cmp	r1, #1
  4027d0:	d1f7      	bne.n	4027c2 <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4027d2:	0182      	lsls	r2, r0, #6
  4027d4:	4b02      	ldr	r3, [pc, #8]	; (4027e0 <_dma_set_irq_state+0x54>)
  4027d6:	4413      	add	r3, r2
  4027d8:	2270      	movs	r2, #112	; 0x70
  4027da:	655a      	str	r2, [r3, #84]	; 0x54
  4027dc:	e7f1      	b.n	4027c2 <_dma_set_irq_state+0x36>
  4027de:	bf00      	nop
  4027e0:	40078000 	.word	0x40078000

004027e4 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  4027e4:	4b17      	ldr	r3, [pc, #92]	; (402844 <XDMAC_Handler+0x60>)
  4027e6:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4027e8:	2300      	movs	r3, #0
  4027ea:	2b17      	cmp	r3, #23
  4027ec:	d81b      	bhi.n	402826 <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  4027ee:	fa21 f203 	lsr.w	r2, r1, r3
  4027f2:	f012 0f01 	tst.w	r2, #1
  4027f6:	d102      	bne.n	4027fe <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4027f8:	3301      	adds	r3, #1
  4027fa:	b2db      	uxtb	r3, r3
  4027fc:	e7f5      	b.n	4027ea <XDMAC_Handler+0x6>
			channel = i;
  4027fe:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  402800:	2b00      	cmp	r3, #0
  402802:	db1d      	blt.n	402840 <XDMAC_Handler+0x5c>
{
  402804:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  402806:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  40280a:	0090      	lsls	r0, r2, #2
  40280c:	4a0e      	ldr	r2, [pc, #56]	; (402848 <XDMAC_Handler+0x64>)
  40280e:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  402810:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  402812:	0189      	lsls	r1, r1, #6
  402814:	4a0d      	ldr	r2, [pc, #52]	; (40284c <XDMAC_Handler+0x68>)
  402816:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  402818:	f012 0f70 	tst.w	r2, #112	; 0x70
  40281c:	d106      	bne.n	40282c <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  40281e:	f012 0f01 	tst.w	r2, #1
  402822:	d106      	bne.n	402832 <XDMAC_Handler+0x4e>
  402824:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  402826:	f04f 33ff 	mov.w	r3, #4294967295
  40282a:	e7e9      	b.n	402800 <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  40282c:	6843      	ldr	r3, [r0, #4]
  40282e:	4798      	blx	r3
  402830:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  402832:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  402836:	00a3      	lsls	r3, r4, #2
  402838:	4a03      	ldr	r2, [pc, #12]	; (402848 <XDMAC_Handler+0x64>)
  40283a:	58d3      	ldr	r3, [r2, r3]
  40283c:	4798      	blx	r3
  40283e:	e7f1      	b.n	402824 <XDMAC_Handler+0x40>
  402840:	4770      	bx	lr
  402842:	bf00      	nop
  402844:	40078000 	.word	0x40078000
  402848:	204003a0 	.word	0x204003a0
  40284c:	4007805c 	.word	0x4007805c

00402850 <main>:




int main(void)
{
  402850:	b580      	push	{r7, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  402852:	4b17      	ldr	r3, [pc, #92]	; (4028b0 <main+0x60>)
  402854:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	/* Additional User initialisation */
	dma_adc_init();
  402856:	4b17      	ldr	r3, [pc, #92]	; (4028b4 <main+0x64>)
  402858:	4798      	blx	r3
	pwm_init_user();
  40285a:	4b17      	ldr	r3, [pc, #92]	; (4028b8 <main+0x68>)
  40285c:	4798      	blx	r3
	encoder_init();
  40285e:	4b17      	ldr	r3, [pc, #92]	; (4028bc <main+0x6c>)
  402860:	4798      	blx	r3
	pos_sens_init();
  402862:	4b17      	ldr	r3, [pc, #92]	; (4028c0 <main+0x70>)
  402864:	4798      	blx	r3
	
	/* Enable all devices */
	pwm_enable_all();
  402866:	4b17      	ldr	r3, [pc, #92]	; (4028c4 <main+0x74>)
  402868:	4798      	blx	r3
	adc_enable_all();
  40286a:	4b17      	ldr	r3, [pc, #92]	; (4028c8 <main+0x78>)
  40286c:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  40286e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  402872:	4b16      	ldr	r3, [pc, #88]	; (4028cc <main+0x7c>)
  402874:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);		//enables the DC-DC converter for the HV side
	
	timer_start(&ENCODER_A);
  402876:	4816      	ldr	r0, [pc, #88]	; (4028d0 <main+0x80>)
  402878:	4c16      	ldr	r4, [pc, #88]	; (4028d4 <main+0x84>)
  40287a:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  40287c:	4816      	ldr	r0, [pc, #88]	; (4028d8 <main+0x88>)
  40287e:	47a0      	blx	r4
  402880:	4f16      	ldr	r7, [pc, #88]	; (4028dc <main+0x8c>)
  402882:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
  402886:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
  40288a:	4d15      	ldr	r5, [pc, #84]	; (4028e0 <main+0x90>)
  40288c:	f44f 7680 	mov.w	r6, #256	; 0x100
  402890:	632e      	str	r6, [r5, #48]	; 0x30
	/* Replace with your application code */
	while (1) {
		
		gpio_set_pin_level(PIN_GPIO_6,true);
		gpio_set_pin_level(PIN_USER_LED,true);
		delay_ms(500);
  402892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402896:	4c13      	ldr	r4, [pc, #76]	; (4028e4 <main+0x94>)
  402898:	47a0      	blx	r4
		
		dma_adc_0_enable_for_one_transaction();
  40289a:	4b13      	ldr	r3, [pc, #76]	; (4028e8 <main+0x98>)
  40289c:	4798      	blx	r3
		dma_adc_1_enable_for_one_transaction();
  40289e:	4b13      	ldr	r3, [pc, #76]	; (4028ec <main+0x9c>)
  4028a0:	4798      	blx	r3
	((Pio *)hw)->PIO_CODR = mask;
  4028a2:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4028a6:	636e      	str	r6, [r5, #52]	; 0x34
		//printf("main - %i %i %i %i %i %i %i %i %i %i %i %i  \n", (int)afec_buf[0],(int)afec_buf[1],(int)afec_buf[2],(int)afec_buf[3],(int)afec_buf[4],(int)afec_buf[5],(int)afec_buf[6],(int)afec_buf[7],(int)afec_buf[8],(int)afec_buf[9],(int)afec_buf[10],(int)afec_buf[11]);
		//AFEC0_Handler
		
		gpio_set_pin_level(PIN_GPIO_6,false);
		gpio_set_pin_level(PIN_USER_LED,false);
		delay_ms(500);
  4028a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4028ac:	47a0      	blx	r4
  4028ae:	e7e7      	b.n	402880 <main+0x30>
  4028b0:	004001d5 	.word	0x004001d5
  4028b4:	0040071d 	.word	0x0040071d
  4028b8:	0040087d 	.word	0x0040087d
  4028bc:	00400231 	.word	0x00400231
  4028c0:	004004a5 	.word	0x004004a5
  4028c4:	00400951 	.word	0x00400951
  4028c8:	004007f9 	.word	0x004007f9
  4028cc:	400e0e00 	.word	0x400e0e00
  4028d0:	20400698 	.word	0x20400698
  4028d4:	004015b5 	.word	0x004015b5
  4028d8:	204005e8 	.word	0x204005e8
  4028dc:	400e1400 	.word	0x400e1400
  4028e0:	400e1200 	.word	0x400e1200
  4028e4:	004011ed 	.word	0x004011ed
  4028e8:	00400531 	.word	0x00400531
  4028ec:	0040061d 	.word	0x0040061d

004028f0 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  4028f0:	b958      	cbnz	r0, 40290a <_read+0x1a>
{
  4028f2:	b508      	push	{r3, lr}
  4028f4:	460b      	mov	r3, r1
  4028f6:	4611      	mov	r1, r2
  4028f8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  4028fa:	4b05      	ldr	r3, [pc, #20]	; (402910 <_read+0x20>)
  4028fc:	4798      	blx	r3
	if (n < 0) {
  4028fe:	2800      	cmp	r0, #0
  402900:	db00      	blt.n	402904 <_read+0x14>
		return -1;
	}

	return n;
}
  402902:	bd08      	pop	{r3, pc}
		return -1;
  402904:	f04f 30ff 	mov.w	r0, #4294967295
  402908:	bd08      	pop	{r3, pc}
		return -1;
  40290a:	f04f 30ff 	mov.w	r0, #4294967295
  40290e:	4770      	bx	lr
  402910:	00402969 	.word	0x00402969

00402914 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  402914:	3801      	subs	r0, #1
  402916:	2802      	cmp	r0, #2
  402918:	d80b      	bhi.n	402932 <_write+0x1e>
{
  40291a:	b508      	push	{r3, lr}
  40291c:	460b      	mov	r3, r1
  40291e:	4611      	mov	r1, r2
  402920:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  402922:	4b05      	ldr	r3, [pc, #20]	; (402938 <_write+0x24>)
  402924:	4798      	blx	r3
	if (n < 0) {
  402926:	2800      	cmp	r0, #0
  402928:	db00      	blt.n	40292c <_write+0x18>
		return -1;
	}

	return n;
}
  40292a:	bd08      	pop	{r3, pc}
		return -1;
  40292c:	f04f 30ff 	mov.w	r0, #4294967295
  402930:	bd08      	pop	{r3, pc}
		return -1;
  402932:	f04f 30ff 	mov.w	r0, #4294967295
  402936:	4770      	bx	lr
  402938:	0040298d 	.word	0x0040298d

0040293c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  40293c:	b570      	push	{r4, r5, r6, lr}
  40293e:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  402940:	4d06      	ldr	r5, [pc, #24]	; (40295c <stdio_io_init+0x20>)
  402942:	682b      	ldr	r3, [r5, #0]
  402944:	2100      	movs	r1, #0
  402946:	6898      	ldr	r0, [r3, #8]
  402948:	4c05      	ldr	r4, [pc, #20]	; (402960 <stdio_io_init+0x24>)
  40294a:	47a0      	blx	r4
	setbuf(stdin, NULL);
  40294c:	682b      	ldr	r3, [r5, #0]
  40294e:	2100      	movs	r1, #0
  402950:	6858      	ldr	r0, [r3, #4]
  402952:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  402954:	4b03      	ldr	r3, [pc, #12]	; (402964 <stdio_io_init+0x28>)
  402956:	601e      	str	r6, [r3, #0]
  402958:	bd70      	pop	{r4, r5, r6, pc}
  40295a:	bf00      	nop
  40295c:	20400048 	.word	0x20400048
  402960:	00403c21 	.word	0x00403c21
  402964:	204004c0 	.word	0x204004c0

00402968 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  402968:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40296a:	4b06      	ldr	r3, [pc, #24]	; (402984 <stdio_io_read+0x1c>)
  40296c:	681b      	ldr	r3, [r3, #0]
  40296e:	b133      	cbz	r3, 40297e <stdio_io_read+0x16>
  402970:	460a      	mov	r2, r1
  402972:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  402974:	b292      	uxth	r2, r2
  402976:	4618      	mov	r0, r3
  402978:	4b03      	ldr	r3, [pc, #12]	; (402988 <stdio_io_read+0x20>)
  40297a:	4798      	blx	r3
  40297c:	bd08      	pop	{r3, pc}
		return 0;
  40297e:	2000      	movs	r0, #0
}
  402980:	bd08      	pop	{r3, pc}
  402982:	bf00      	nop
  402984:	204004c0 	.word	0x204004c0
  402988:	00401385 	.word	0x00401385

0040298c <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  40298c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40298e:	4b06      	ldr	r3, [pc, #24]	; (4029a8 <stdio_io_write+0x1c>)
  402990:	681b      	ldr	r3, [r3, #0]
  402992:	b133      	cbz	r3, 4029a2 <stdio_io_write+0x16>
  402994:	460a      	mov	r2, r1
  402996:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  402998:	b292      	uxth	r2, r2
  40299a:	4618      	mov	r0, r3
  40299c:	4b03      	ldr	r3, [pc, #12]	; (4029ac <stdio_io_write+0x20>)
  40299e:	4798      	blx	r3
  4029a0:	bd08      	pop	{r3, pc}
		return 0;
  4029a2:	2000      	movs	r0, #0
}
  4029a4:	bd08      	pop	{r3, pc}
  4029a6:	bf00      	nop
  4029a8:	204004c0 	.word	0x204004c0
  4029ac:	00401355 	.word	0x00401355

004029b0 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  4029b0:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  4029b2:	4c04      	ldr	r4, [pc, #16]	; (4029c4 <stdio_redirect_init+0x14>)
  4029b4:	4620      	mov	r0, r4
  4029b6:	4b04      	ldr	r3, [pc, #16]	; (4029c8 <stdio_redirect_init+0x18>)
  4029b8:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  4029ba:	4620      	mov	r0, r4
  4029bc:	4b03      	ldr	r3, [pc, #12]	; (4029cc <stdio_redirect_init+0x1c>)
  4029be:	4798      	blx	r3
  4029c0:	bd10      	pop	{r4, pc}
  4029c2:	bf00      	nop
  4029c4:	2040068c 	.word	0x2040068c
  4029c8:	00401709 	.word	0x00401709
  4029cc:	0040293d 	.word	0x0040293d

004029d0 <__aeabi_drsub>:
  4029d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4029d4:	e002      	b.n	4029dc <__adddf3>
  4029d6:	bf00      	nop

004029d8 <__aeabi_dsub>:
  4029d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004029dc <__adddf3>:
  4029dc:	b530      	push	{r4, r5, lr}
  4029de:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4029e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4029e6:	ea94 0f05 	teq	r4, r5
  4029ea:	bf08      	it	eq
  4029ec:	ea90 0f02 	teqeq	r0, r2
  4029f0:	bf1f      	itttt	ne
  4029f2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4029f6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4029fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4029fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402a02:	f000 80e2 	beq.w	402bca <__adddf3+0x1ee>
  402a06:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402a0a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402a0e:	bfb8      	it	lt
  402a10:	426d      	neglt	r5, r5
  402a12:	dd0c      	ble.n	402a2e <__adddf3+0x52>
  402a14:	442c      	add	r4, r5
  402a16:	ea80 0202 	eor.w	r2, r0, r2
  402a1a:	ea81 0303 	eor.w	r3, r1, r3
  402a1e:	ea82 0000 	eor.w	r0, r2, r0
  402a22:	ea83 0101 	eor.w	r1, r3, r1
  402a26:	ea80 0202 	eor.w	r2, r0, r2
  402a2a:	ea81 0303 	eor.w	r3, r1, r3
  402a2e:	2d36      	cmp	r5, #54	; 0x36
  402a30:	bf88      	it	hi
  402a32:	bd30      	pophi	{r4, r5, pc}
  402a34:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402a38:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402a3c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402a40:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402a44:	d002      	beq.n	402a4c <__adddf3+0x70>
  402a46:	4240      	negs	r0, r0
  402a48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402a4c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402a50:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402a54:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402a58:	d002      	beq.n	402a60 <__adddf3+0x84>
  402a5a:	4252      	negs	r2, r2
  402a5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402a60:	ea94 0f05 	teq	r4, r5
  402a64:	f000 80a7 	beq.w	402bb6 <__adddf3+0x1da>
  402a68:	f1a4 0401 	sub.w	r4, r4, #1
  402a6c:	f1d5 0e20 	rsbs	lr, r5, #32
  402a70:	db0d      	blt.n	402a8e <__adddf3+0xb2>
  402a72:	fa02 fc0e 	lsl.w	ip, r2, lr
  402a76:	fa22 f205 	lsr.w	r2, r2, r5
  402a7a:	1880      	adds	r0, r0, r2
  402a7c:	f141 0100 	adc.w	r1, r1, #0
  402a80:	fa03 f20e 	lsl.w	r2, r3, lr
  402a84:	1880      	adds	r0, r0, r2
  402a86:	fa43 f305 	asr.w	r3, r3, r5
  402a8a:	4159      	adcs	r1, r3
  402a8c:	e00e      	b.n	402aac <__adddf3+0xd0>
  402a8e:	f1a5 0520 	sub.w	r5, r5, #32
  402a92:	f10e 0e20 	add.w	lr, lr, #32
  402a96:	2a01      	cmp	r2, #1
  402a98:	fa03 fc0e 	lsl.w	ip, r3, lr
  402a9c:	bf28      	it	cs
  402a9e:	f04c 0c02 	orrcs.w	ip, ip, #2
  402aa2:	fa43 f305 	asr.w	r3, r3, r5
  402aa6:	18c0      	adds	r0, r0, r3
  402aa8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402aac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402ab0:	d507      	bpl.n	402ac2 <__adddf3+0xe6>
  402ab2:	f04f 0e00 	mov.w	lr, #0
  402ab6:	f1dc 0c00 	rsbs	ip, ip, #0
  402aba:	eb7e 0000 	sbcs.w	r0, lr, r0
  402abe:	eb6e 0101 	sbc.w	r1, lr, r1
  402ac2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402ac6:	d31b      	bcc.n	402b00 <__adddf3+0x124>
  402ac8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402acc:	d30c      	bcc.n	402ae8 <__adddf3+0x10c>
  402ace:	0849      	lsrs	r1, r1, #1
  402ad0:	ea5f 0030 	movs.w	r0, r0, rrx
  402ad4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402ad8:	f104 0401 	add.w	r4, r4, #1
  402adc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402ae0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402ae4:	f080 809a 	bcs.w	402c1c <__adddf3+0x240>
  402ae8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402aec:	bf08      	it	eq
  402aee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402af2:	f150 0000 	adcs.w	r0, r0, #0
  402af6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402afa:	ea41 0105 	orr.w	r1, r1, r5
  402afe:	bd30      	pop	{r4, r5, pc}
  402b00:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402b04:	4140      	adcs	r0, r0
  402b06:	eb41 0101 	adc.w	r1, r1, r1
  402b0a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402b0e:	f1a4 0401 	sub.w	r4, r4, #1
  402b12:	d1e9      	bne.n	402ae8 <__adddf3+0x10c>
  402b14:	f091 0f00 	teq	r1, #0
  402b18:	bf04      	itt	eq
  402b1a:	4601      	moveq	r1, r0
  402b1c:	2000      	moveq	r0, #0
  402b1e:	fab1 f381 	clz	r3, r1
  402b22:	bf08      	it	eq
  402b24:	3320      	addeq	r3, #32
  402b26:	f1a3 030b 	sub.w	r3, r3, #11
  402b2a:	f1b3 0220 	subs.w	r2, r3, #32
  402b2e:	da0c      	bge.n	402b4a <__adddf3+0x16e>
  402b30:	320c      	adds	r2, #12
  402b32:	dd08      	ble.n	402b46 <__adddf3+0x16a>
  402b34:	f102 0c14 	add.w	ip, r2, #20
  402b38:	f1c2 020c 	rsb	r2, r2, #12
  402b3c:	fa01 f00c 	lsl.w	r0, r1, ip
  402b40:	fa21 f102 	lsr.w	r1, r1, r2
  402b44:	e00c      	b.n	402b60 <__adddf3+0x184>
  402b46:	f102 0214 	add.w	r2, r2, #20
  402b4a:	bfd8      	it	le
  402b4c:	f1c2 0c20 	rsble	ip, r2, #32
  402b50:	fa01 f102 	lsl.w	r1, r1, r2
  402b54:	fa20 fc0c 	lsr.w	ip, r0, ip
  402b58:	bfdc      	itt	le
  402b5a:	ea41 010c 	orrle.w	r1, r1, ip
  402b5e:	4090      	lslle	r0, r2
  402b60:	1ae4      	subs	r4, r4, r3
  402b62:	bfa2      	ittt	ge
  402b64:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402b68:	4329      	orrge	r1, r5
  402b6a:	bd30      	popge	{r4, r5, pc}
  402b6c:	ea6f 0404 	mvn.w	r4, r4
  402b70:	3c1f      	subs	r4, #31
  402b72:	da1c      	bge.n	402bae <__adddf3+0x1d2>
  402b74:	340c      	adds	r4, #12
  402b76:	dc0e      	bgt.n	402b96 <__adddf3+0x1ba>
  402b78:	f104 0414 	add.w	r4, r4, #20
  402b7c:	f1c4 0220 	rsb	r2, r4, #32
  402b80:	fa20 f004 	lsr.w	r0, r0, r4
  402b84:	fa01 f302 	lsl.w	r3, r1, r2
  402b88:	ea40 0003 	orr.w	r0, r0, r3
  402b8c:	fa21 f304 	lsr.w	r3, r1, r4
  402b90:	ea45 0103 	orr.w	r1, r5, r3
  402b94:	bd30      	pop	{r4, r5, pc}
  402b96:	f1c4 040c 	rsb	r4, r4, #12
  402b9a:	f1c4 0220 	rsb	r2, r4, #32
  402b9e:	fa20 f002 	lsr.w	r0, r0, r2
  402ba2:	fa01 f304 	lsl.w	r3, r1, r4
  402ba6:	ea40 0003 	orr.w	r0, r0, r3
  402baa:	4629      	mov	r1, r5
  402bac:	bd30      	pop	{r4, r5, pc}
  402bae:	fa21 f004 	lsr.w	r0, r1, r4
  402bb2:	4629      	mov	r1, r5
  402bb4:	bd30      	pop	{r4, r5, pc}
  402bb6:	f094 0f00 	teq	r4, #0
  402bba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402bbe:	bf06      	itte	eq
  402bc0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402bc4:	3401      	addeq	r4, #1
  402bc6:	3d01      	subne	r5, #1
  402bc8:	e74e      	b.n	402a68 <__adddf3+0x8c>
  402bca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402bce:	bf18      	it	ne
  402bd0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402bd4:	d029      	beq.n	402c2a <__adddf3+0x24e>
  402bd6:	ea94 0f05 	teq	r4, r5
  402bda:	bf08      	it	eq
  402bdc:	ea90 0f02 	teqeq	r0, r2
  402be0:	d005      	beq.n	402bee <__adddf3+0x212>
  402be2:	ea54 0c00 	orrs.w	ip, r4, r0
  402be6:	bf04      	itt	eq
  402be8:	4619      	moveq	r1, r3
  402bea:	4610      	moveq	r0, r2
  402bec:	bd30      	pop	{r4, r5, pc}
  402bee:	ea91 0f03 	teq	r1, r3
  402bf2:	bf1e      	ittt	ne
  402bf4:	2100      	movne	r1, #0
  402bf6:	2000      	movne	r0, #0
  402bf8:	bd30      	popne	{r4, r5, pc}
  402bfa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402bfe:	d105      	bne.n	402c0c <__adddf3+0x230>
  402c00:	0040      	lsls	r0, r0, #1
  402c02:	4149      	adcs	r1, r1
  402c04:	bf28      	it	cs
  402c06:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402c0a:	bd30      	pop	{r4, r5, pc}
  402c0c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402c10:	bf3c      	itt	cc
  402c12:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402c16:	bd30      	popcc	{r4, r5, pc}
  402c18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402c1c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402c20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402c24:	f04f 0000 	mov.w	r0, #0
  402c28:	bd30      	pop	{r4, r5, pc}
  402c2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402c2e:	bf1a      	itte	ne
  402c30:	4619      	movne	r1, r3
  402c32:	4610      	movne	r0, r2
  402c34:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402c38:	bf1c      	itt	ne
  402c3a:	460b      	movne	r3, r1
  402c3c:	4602      	movne	r2, r0
  402c3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402c42:	bf06      	itte	eq
  402c44:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402c48:	ea91 0f03 	teqeq	r1, r3
  402c4c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402c50:	bd30      	pop	{r4, r5, pc}
  402c52:	bf00      	nop

00402c54 <__aeabi_ui2d>:
  402c54:	f090 0f00 	teq	r0, #0
  402c58:	bf04      	itt	eq
  402c5a:	2100      	moveq	r1, #0
  402c5c:	4770      	bxeq	lr
  402c5e:	b530      	push	{r4, r5, lr}
  402c60:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402c64:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402c68:	f04f 0500 	mov.w	r5, #0
  402c6c:	f04f 0100 	mov.w	r1, #0
  402c70:	e750      	b.n	402b14 <__adddf3+0x138>
  402c72:	bf00      	nop

00402c74 <__aeabi_i2d>:
  402c74:	f090 0f00 	teq	r0, #0
  402c78:	bf04      	itt	eq
  402c7a:	2100      	moveq	r1, #0
  402c7c:	4770      	bxeq	lr
  402c7e:	b530      	push	{r4, r5, lr}
  402c80:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402c84:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402c88:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402c8c:	bf48      	it	mi
  402c8e:	4240      	negmi	r0, r0
  402c90:	f04f 0100 	mov.w	r1, #0
  402c94:	e73e      	b.n	402b14 <__adddf3+0x138>
  402c96:	bf00      	nop

00402c98 <__aeabi_f2d>:
  402c98:	0042      	lsls	r2, r0, #1
  402c9a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402c9e:	ea4f 0131 	mov.w	r1, r1, rrx
  402ca2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402ca6:	bf1f      	itttt	ne
  402ca8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402cac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402cb0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402cb4:	4770      	bxne	lr
  402cb6:	f092 0f00 	teq	r2, #0
  402cba:	bf14      	ite	ne
  402cbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402cc0:	4770      	bxeq	lr
  402cc2:	b530      	push	{r4, r5, lr}
  402cc4:	f44f 7460 	mov.w	r4, #896	; 0x380
  402cc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402ccc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402cd0:	e720      	b.n	402b14 <__adddf3+0x138>
  402cd2:	bf00      	nop

00402cd4 <__aeabi_ul2d>:
  402cd4:	ea50 0201 	orrs.w	r2, r0, r1
  402cd8:	bf08      	it	eq
  402cda:	4770      	bxeq	lr
  402cdc:	b530      	push	{r4, r5, lr}
  402cde:	f04f 0500 	mov.w	r5, #0
  402ce2:	e00a      	b.n	402cfa <__aeabi_l2d+0x16>

00402ce4 <__aeabi_l2d>:
  402ce4:	ea50 0201 	orrs.w	r2, r0, r1
  402ce8:	bf08      	it	eq
  402cea:	4770      	bxeq	lr
  402cec:	b530      	push	{r4, r5, lr}
  402cee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402cf2:	d502      	bpl.n	402cfa <__aeabi_l2d+0x16>
  402cf4:	4240      	negs	r0, r0
  402cf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402cfa:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402cfe:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402d02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402d06:	f43f aedc 	beq.w	402ac2 <__adddf3+0xe6>
  402d0a:	f04f 0203 	mov.w	r2, #3
  402d0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402d12:	bf18      	it	ne
  402d14:	3203      	addne	r2, #3
  402d16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402d1a:	bf18      	it	ne
  402d1c:	3203      	addne	r2, #3
  402d1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402d22:	f1c2 0320 	rsb	r3, r2, #32
  402d26:	fa00 fc03 	lsl.w	ip, r0, r3
  402d2a:	fa20 f002 	lsr.w	r0, r0, r2
  402d2e:	fa01 fe03 	lsl.w	lr, r1, r3
  402d32:	ea40 000e 	orr.w	r0, r0, lr
  402d36:	fa21 f102 	lsr.w	r1, r1, r2
  402d3a:	4414      	add	r4, r2
  402d3c:	e6c1      	b.n	402ac2 <__adddf3+0xe6>
  402d3e:	bf00      	nop

00402d40 <__aeabi_dmul>:
  402d40:	b570      	push	{r4, r5, r6, lr}
  402d42:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402d46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402d4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402d4e:	bf1d      	ittte	ne
  402d50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402d54:	ea94 0f0c 	teqne	r4, ip
  402d58:	ea95 0f0c 	teqne	r5, ip
  402d5c:	f000 f8de 	bleq	402f1c <__aeabi_dmul+0x1dc>
  402d60:	442c      	add	r4, r5
  402d62:	ea81 0603 	eor.w	r6, r1, r3
  402d66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402d6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402d6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402d72:	bf18      	it	ne
  402d74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402d78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402d80:	d038      	beq.n	402df4 <__aeabi_dmul+0xb4>
  402d82:	fba0 ce02 	umull	ip, lr, r0, r2
  402d86:	f04f 0500 	mov.w	r5, #0
  402d8a:	fbe1 e502 	umlal	lr, r5, r1, r2
  402d8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402d92:	fbe0 e503 	umlal	lr, r5, r0, r3
  402d96:	f04f 0600 	mov.w	r6, #0
  402d9a:	fbe1 5603 	umlal	r5, r6, r1, r3
  402d9e:	f09c 0f00 	teq	ip, #0
  402da2:	bf18      	it	ne
  402da4:	f04e 0e01 	orrne.w	lr, lr, #1
  402da8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402dac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402db0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402db4:	d204      	bcs.n	402dc0 <__aeabi_dmul+0x80>
  402db6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402dba:	416d      	adcs	r5, r5
  402dbc:	eb46 0606 	adc.w	r6, r6, r6
  402dc0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402dc4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402dc8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402dcc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402dd0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402dd4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402dd8:	bf88      	it	hi
  402dda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402dde:	d81e      	bhi.n	402e1e <__aeabi_dmul+0xde>
  402de0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402de4:	bf08      	it	eq
  402de6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402dea:	f150 0000 	adcs.w	r0, r0, #0
  402dee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402df2:	bd70      	pop	{r4, r5, r6, pc}
  402df4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402df8:	ea46 0101 	orr.w	r1, r6, r1
  402dfc:	ea40 0002 	orr.w	r0, r0, r2
  402e00:	ea81 0103 	eor.w	r1, r1, r3
  402e04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402e08:	bfc2      	ittt	gt
  402e0a:	ebd4 050c 	rsbsgt	r5, r4, ip
  402e0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402e12:	bd70      	popgt	{r4, r5, r6, pc}
  402e14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402e18:	f04f 0e00 	mov.w	lr, #0
  402e1c:	3c01      	subs	r4, #1
  402e1e:	f300 80ab 	bgt.w	402f78 <__aeabi_dmul+0x238>
  402e22:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402e26:	bfde      	ittt	le
  402e28:	2000      	movle	r0, #0
  402e2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402e2e:	bd70      	pople	{r4, r5, r6, pc}
  402e30:	f1c4 0400 	rsb	r4, r4, #0
  402e34:	3c20      	subs	r4, #32
  402e36:	da35      	bge.n	402ea4 <__aeabi_dmul+0x164>
  402e38:	340c      	adds	r4, #12
  402e3a:	dc1b      	bgt.n	402e74 <__aeabi_dmul+0x134>
  402e3c:	f104 0414 	add.w	r4, r4, #20
  402e40:	f1c4 0520 	rsb	r5, r4, #32
  402e44:	fa00 f305 	lsl.w	r3, r0, r5
  402e48:	fa20 f004 	lsr.w	r0, r0, r4
  402e4c:	fa01 f205 	lsl.w	r2, r1, r5
  402e50:	ea40 0002 	orr.w	r0, r0, r2
  402e54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402e58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402e5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402e60:	fa21 f604 	lsr.w	r6, r1, r4
  402e64:	eb42 0106 	adc.w	r1, r2, r6
  402e68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402e6c:	bf08      	it	eq
  402e6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402e72:	bd70      	pop	{r4, r5, r6, pc}
  402e74:	f1c4 040c 	rsb	r4, r4, #12
  402e78:	f1c4 0520 	rsb	r5, r4, #32
  402e7c:	fa00 f304 	lsl.w	r3, r0, r4
  402e80:	fa20 f005 	lsr.w	r0, r0, r5
  402e84:	fa01 f204 	lsl.w	r2, r1, r4
  402e88:	ea40 0002 	orr.w	r0, r0, r2
  402e8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402e90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402e94:	f141 0100 	adc.w	r1, r1, #0
  402e98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402e9c:	bf08      	it	eq
  402e9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402ea2:	bd70      	pop	{r4, r5, r6, pc}
  402ea4:	f1c4 0520 	rsb	r5, r4, #32
  402ea8:	fa00 f205 	lsl.w	r2, r0, r5
  402eac:	ea4e 0e02 	orr.w	lr, lr, r2
  402eb0:	fa20 f304 	lsr.w	r3, r0, r4
  402eb4:	fa01 f205 	lsl.w	r2, r1, r5
  402eb8:	ea43 0302 	orr.w	r3, r3, r2
  402ebc:	fa21 f004 	lsr.w	r0, r1, r4
  402ec0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402ec4:	fa21 f204 	lsr.w	r2, r1, r4
  402ec8:	ea20 0002 	bic.w	r0, r0, r2
  402ecc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402ed0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402ed4:	bf08      	it	eq
  402ed6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402eda:	bd70      	pop	{r4, r5, r6, pc}
  402edc:	f094 0f00 	teq	r4, #0
  402ee0:	d10f      	bne.n	402f02 <__aeabi_dmul+0x1c2>
  402ee2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402ee6:	0040      	lsls	r0, r0, #1
  402ee8:	eb41 0101 	adc.w	r1, r1, r1
  402eec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402ef0:	bf08      	it	eq
  402ef2:	3c01      	subeq	r4, #1
  402ef4:	d0f7      	beq.n	402ee6 <__aeabi_dmul+0x1a6>
  402ef6:	ea41 0106 	orr.w	r1, r1, r6
  402efa:	f095 0f00 	teq	r5, #0
  402efe:	bf18      	it	ne
  402f00:	4770      	bxne	lr
  402f02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402f06:	0052      	lsls	r2, r2, #1
  402f08:	eb43 0303 	adc.w	r3, r3, r3
  402f0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402f10:	bf08      	it	eq
  402f12:	3d01      	subeq	r5, #1
  402f14:	d0f7      	beq.n	402f06 <__aeabi_dmul+0x1c6>
  402f16:	ea43 0306 	orr.w	r3, r3, r6
  402f1a:	4770      	bx	lr
  402f1c:	ea94 0f0c 	teq	r4, ip
  402f20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402f24:	bf18      	it	ne
  402f26:	ea95 0f0c 	teqne	r5, ip
  402f2a:	d00c      	beq.n	402f46 <__aeabi_dmul+0x206>
  402f2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402f30:	bf18      	it	ne
  402f32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402f36:	d1d1      	bne.n	402edc <__aeabi_dmul+0x19c>
  402f38:	ea81 0103 	eor.w	r1, r1, r3
  402f3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402f40:	f04f 0000 	mov.w	r0, #0
  402f44:	bd70      	pop	{r4, r5, r6, pc}
  402f46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402f4a:	bf06      	itte	eq
  402f4c:	4610      	moveq	r0, r2
  402f4e:	4619      	moveq	r1, r3
  402f50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402f54:	d019      	beq.n	402f8a <__aeabi_dmul+0x24a>
  402f56:	ea94 0f0c 	teq	r4, ip
  402f5a:	d102      	bne.n	402f62 <__aeabi_dmul+0x222>
  402f5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402f60:	d113      	bne.n	402f8a <__aeabi_dmul+0x24a>
  402f62:	ea95 0f0c 	teq	r5, ip
  402f66:	d105      	bne.n	402f74 <__aeabi_dmul+0x234>
  402f68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402f6c:	bf1c      	itt	ne
  402f6e:	4610      	movne	r0, r2
  402f70:	4619      	movne	r1, r3
  402f72:	d10a      	bne.n	402f8a <__aeabi_dmul+0x24a>
  402f74:	ea81 0103 	eor.w	r1, r1, r3
  402f78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402f7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402f80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402f84:	f04f 0000 	mov.w	r0, #0
  402f88:	bd70      	pop	{r4, r5, r6, pc}
  402f8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402f8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402f92:	bd70      	pop	{r4, r5, r6, pc}

00402f94 <__aeabi_ddiv>:
  402f94:	b570      	push	{r4, r5, r6, lr}
  402f96:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402f9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402f9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402fa2:	bf1d      	ittte	ne
  402fa4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402fa8:	ea94 0f0c 	teqne	r4, ip
  402fac:	ea95 0f0c 	teqne	r5, ip
  402fb0:	f000 f8a7 	bleq	403102 <__aeabi_ddiv+0x16e>
  402fb4:	eba4 0405 	sub.w	r4, r4, r5
  402fb8:	ea81 0e03 	eor.w	lr, r1, r3
  402fbc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402fc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402fc4:	f000 8088 	beq.w	4030d8 <__aeabi_ddiv+0x144>
  402fc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402fcc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402fd0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402fd4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402fd8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402fdc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402fe0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402fe4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402fe8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402fec:	429d      	cmp	r5, r3
  402fee:	bf08      	it	eq
  402ff0:	4296      	cmpeq	r6, r2
  402ff2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402ff6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402ffa:	d202      	bcs.n	403002 <__aeabi_ddiv+0x6e>
  402ffc:	085b      	lsrs	r3, r3, #1
  402ffe:	ea4f 0232 	mov.w	r2, r2, rrx
  403002:	1ab6      	subs	r6, r6, r2
  403004:	eb65 0503 	sbc.w	r5, r5, r3
  403008:	085b      	lsrs	r3, r3, #1
  40300a:	ea4f 0232 	mov.w	r2, r2, rrx
  40300e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403012:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403016:	ebb6 0e02 	subs.w	lr, r6, r2
  40301a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40301e:	bf22      	ittt	cs
  403020:	1ab6      	subcs	r6, r6, r2
  403022:	4675      	movcs	r5, lr
  403024:	ea40 000c 	orrcs.w	r0, r0, ip
  403028:	085b      	lsrs	r3, r3, #1
  40302a:	ea4f 0232 	mov.w	r2, r2, rrx
  40302e:	ebb6 0e02 	subs.w	lr, r6, r2
  403032:	eb75 0e03 	sbcs.w	lr, r5, r3
  403036:	bf22      	ittt	cs
  403038:	1ab6      	subcs	r6, r6, r2
  40303a:	4675      	movcs	r5, lr
  40303c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403040:	085b      	lsrs	r3, r3, #1
  403042:	ea4f 0232 	mov.w	r2, r2, rrx
  403046:	ebb6 0e02 	subs.w	lr, r6, r2
  40304a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40304e:	bf22      	ittt	cs
  403050:	1ab6      	subcs	r6, r6, r2
  403052:	4675      	movcs	r5, lr
  403054:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403058:	085b      	lsrs	r3, r3, #1
  40305a:	ea4f 0232 	mov.w	r2, r2, rrx
  40305e:	ebb6 0e02 	subs.w	lr, r6, r2
  403062:	eb75 0e03 	sbcs.w	lr, r5, r3
  403066:	bf22      	ittt	cs
  403068:	1ab6      	subcs	r6, r6, r2
  40306a:	4675      	movcs	r5, lr
  40306c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403070:	ea55 0e06 	orrs.w	lr, r5, r6
  403074:	d018      	beq.n	4030a8 <__aeabi_ddiv+0x114>
  403076:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40307a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40307e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403082:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403086:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40308a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40308e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403092:	d1c0      	bne.n	403016 <__aeabi_ddiv+0x82>
  403094:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403098:	d10b      	bne.n	4030b2 <__aeabi_ddiv+0x11e>
  40309a:	ea41 0100 	orr.w	r1, r1, r0
  40309e:	f04f 0000 	mov.w	r0, #0
  4030a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4030a6:	e7b6      	b.n	403016 <__aeabi_ddiv+0x82>
  4030a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4030ac:	bf04      	itt	eq
  4030ae:	4301      	orreq	r1, r0
  4030b0:	2000      	moveq	r0, #0
  4030b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4030b6:	bf88      	it	hi
  4030b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4030bc:	f63f aeaf 	bhi.w	402e1e <__aeabi_dmul+0xde>
  4030c0:	ebb5 0c03 	subs.w	ip, r5, r3
  4030c4:	bf04      	itt	eq
  4030c6:	ebb6 0c02 	subseq.w	ip, r6, r2
  4030ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4030ce:	f150 0000 	adcs.w	r0, r0, #0
  4030d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4030d6:	bd70      	pop	{r4, r5, r6, pc}
  4030d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4030dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4030e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4030e4:	bfc2      	ittt	gt
  4030e6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4030ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4030ee:	bd70      	popgt	{r4, r5, r6, pc}
  4030f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4030f4:	f04f 0e00 	mov.w	lr, #0
  4030f8:	3c01      	subs	r4, #1
  4030fa:	e690      	b.n	402e1e <__aeabi_dmul+0xde>
  4030fc:	ea45 0e06 	orr.w	lr, r5, r6
  403100:	e68d      	b.n	402e1e <__aeabi_dmul+0xde>
  403102:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403106:	ea94 0f0c 	teq	r4, ip
  40310a:	bf08      	it	eq
  40310c:	ea95 0f0c 	teqeq	r5, ip
  403110:	f43f af3b 	beq.w	402f8a <__aeabi_dmul+0x24a>
  403114:	ea94 0f0c 	teq	r4, ip
  403118:	d10a      	bne.n	403130 <__aeabi_ddiv+0x19c>
  40311a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40311e:	f47f af34 	bne.w	402f8a <__aeabi_dmul+0x24a>
  403122:	ea95 0f0c 	teq	r5, ip
  403126:	f47f af25 	bne.w	402f74 <__aeabi_dmul+0x234>
  40312a:	4610      	mov	r0, r2
  40312c:	4619      	mov	r1, r3
  40312e:	e72c      	b.n	402f8a <__aeabi_dmul+0x24a>
  403130:	ea95 0f0c 	teq	r5, ip
  403134:	d106      	bne.n	403144 <__aeabi_ddiv+0x1b0>
  403136:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40313a:	f43f aefd 	beq.w	402f38 <__aeabi_dmul+0x1f8>
  40313e:	4610      	mov	r0, r2
  403140:	4619      	mov	r1, r3
  403142:	e722      	b.n	402f8a <__aeabi_dmul+0x24a>
  403144:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403148:	bf18      	it	ne
  40314a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40314e:	f47f aec5 	bne.w	402edc <__aeabi_dmul+0x19c>
  403152:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403156:	f47f af0d 	bne.w	402f74 <__aeabi_dmul+0x234>
  40315a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40315e:	f47f aeeb 	bne.w	402f38 <__aeabi_dmul+0x1f8>
  403162:	e712      	b.n	402f8a <__aeabi_dmul+0x24a>

00403164 <__gedf2>:
  403164:	f04f 3cff 	mov.w	ip, #4294967295
  403168:	e006      	b.n	403178 <__cmpdf2+0x4>
  40316a:	bf00      	nop

0040316c <__ledf2>:
  40316c:	f04f 0c01 	mov.w	ip, #1
  403170:	e002      	b.n	403178 <__cmpdf2+0x4>
  403172:	bf00      	nop

00403174 <__cmpdf2>:
  403174:	f04f 0c01 	mov.w	ip, #1
  403178:	f84d cd04 	str.w	ip, [sp, #-4]!
  40317c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403180:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403184:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403188:	bf18      	it	ne
  40318a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40318e:	d01b      	beq.n	4031c8 <__cmpdf2+0x54>
  403190:	b001      	add	sp, #4
  403192:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403196:	bf0c      	ite	eq
  403198:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40319c:	ea91 0f03 	teqne	r1, r3
  4031a0:	bf02      	ittt	eq
  4031a2:	ea90 0f02 	teqeq	r0, r2
  4031a6:	2000      	moveq	r0, #0
  4031a8:	4770      	bxeq	lr
  4031aa:	f110 0f00 	cmn.w	r0, #0
  4031ae:	ea91 0f03 	teq	r1, r3
  4031b2:	bf58      	it	pl
  4031b4:	4299      	cmppl	r1, r3
  4031b6:	bf08      	it	eq
  4031b8:	4290      	cmpeq	r0, r2
  4031ba:	bf2c      	ite	cs
  4031bc:	17d8      	asrcs	r0, r3, #31
  4031be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4031c2:	f040 0001 	orr.w	r0, r0, #1
  4031c6:	4770      	bx	lr
  4031c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4031cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4031d0:	d102      	bne.n	4031d8 <__cmpdf2+0x64>
  4031d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4031d6:	d107      	bne.n	4031e8 <__cmpdf2+0x74>
  4031d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4031dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4031e0:	d1d6      	bne.n	403190 <__cmpdf2+0x1c>
  4031e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4031e6:	d0d3      	beq.n	403190 <__cmpdf2+0x1c>
  4031e8:	f85d 0b04 	ldr.w	r0, [sp], #4
  4031ec:	4770      	bx	lr
  4031ee:	bf00      	nop

004031f0 <__aeabi_cdrcmple>:
  4031f0:	4684      	mov	ip, r0
  4031f2:	4610      	mov	r0, r2
  4031f4:	4662      	mov	r2, ip
  4031f6:	468c      	mov	ip, r1
  4031f8:	4619      	mov	r1, r3
  4031fa:	4663      	mov	r3, ip
  4031fc:	e000      	b.n	403200 <__aeabi_cdcmpeq>
  4031fe:	bf00      	nop

00403200 <__aeabi_cdcmpeq>:
  403200:	b501      	push	{r0, lr}
  403202:	f7ff ffb7 	bl	403174 <__cmpdf2>
  403206:	2800      	cmp	r0, #0
  403208:	bf48      	it	mi
  40320a:	f110 0f00 	cmnmi.w	r0, #0
  40320e:	bd01      	pop	{r0, pc}

00403210 <__aeabi_dcmpeq>:
  403210:	f84d ed08 	str.w	lr, [sp, #-8]!
  403214:	f7ff fff4 	bl	403200 <__aeabi_cdcmpeq>
  403218:	bf0c      	ite	eq
  40321a:	2001      	moveq	r0, #1
  40321c:	2000      	movne	r0, #0
  40321e:	f85d fb08 	ldr.w	pc, [sp], #8
  403222:	bf00      	nop

00403224 <__aeabi_dcmplt>:
  403224:	f84d ed08 	str.w	lr, [sp, #-8]!
  403228:	f7ff ffea 	bl	403200 <__aeabi_cdcmpeq>
  40322c:	bf34      	ite	cc
  40322e:	2001      	movcc	r0, #1
  403230:	2000      	movcs	r0, #0
  403232:	f85d fb08 	ldr.w	pc, [sp], #8
  403236:	bf00      	nop

00403238 <__aeabi_dcmple>:
  403238:	f84d ed08 	str.w	lr, [sp, #-8]!
  40323c:	f7ff ffe0 	bl	403200 <__aeabi_cdcmpeq>
  403240:	bf94      	ite	ls
  403242:	2001      	movls	r0, #1
  403244:	2000      	movhi	r0, #0
  403246:	f85d fb08 	ldr.w	pc, [sp], #8
  40324a:	bf00      	nop

0040324c <__aeabi_dcmpge>:
  40324c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403250:	f7ff ffce 	bl	4031f0 <__aeabi_cdrcmple>
  403254:	bf94      	ite	ls
  403256:	2001      	movls	r0, #1
  403258:	2000      	movhi	r0, #0
  40325a:	f85d fb08 	ldr.w	pc, [sp], #8
  40325e:	bf00      	nop

00403260 <__aeabi_dcmpgt>:
  403260:	f84d ed08 	str.w	lr, [sp, #-8]!
  403264:	f7ff ffc4 	bl	4031f0 <__aeabi_cdrcmple>
  403268:	bf34      	ite	cc
  40326a:	2001      	movcc	r0, #1
  40326c:	2000      	movcs	r0, #0
  40326e:	f85d fb08 	ldr.w	pc, [sp], #8
  403272:	bf00      	nop

00403274 <__aeabi_d2iz>:
  403274:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403278:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40327c:	d215      	bcs.n	4032aa <__aeabi_d2iz+0x36>
  40327e:	d511      	bpl.n	4032a4 <__aeabi_d2iz+0x30>
  403280:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403284:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403288:	d912      	bls.n	4032b0 <__aeabi_d2iz+0x3c>
  40328a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40328e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403292:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403296:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40329a:	fa23 f002 	lsr.w	r0, r3, r2
  40329e:	bf18      	it	ne
  4032a0:	4240      	negne	r0, r0
  4032a2:	4770      	bx	lr
  4032a4:	f04f 0000 	mov.w	r0, #0
  4032a8:	4770      	bx	lr
  4032aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4032ae:	d105      	bne.n	4032bc <__aeabi_d2iz+0x48>
  4032b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4032b4:	bf08      	it	eq
  4032b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4032ba:	4770      	bx	lr
  4032bc:	f04f 0000 	mov.w	r0, #0
  4032c0:	4770      	bx	lr
  4032c2:	bf00      	nop

004032c4 <__libc_init_array>:
  4032c4:	b570      	push	{r4, r5, r6, lr}
  4032c6:	4e0d      	ldr	r6, [pc, #52]	; (4032fc <__libc_init_array+0x38>)
  4032c8:	4c0d      	ldr	r4, [pc, #52]	; (403300 <__libc_init_array+0x3c>)
  4032ca:	1ba4      	subs	r4, r4, r6
  4032cc:	10a4      	asrs	r4, r4, #2
  4032ce:	2500      	movs	r5, #0
  4032d0:	42a5      	cmp	r5, r4
  4032d2:	d109      	bne.n	4032e8 <__libc_init_array+0x24>
  4032d4:	4e0b      	ldr	r6, [pc, #44]	; (403304 <__libc_init_array+0x40>)
  4032d6:	4c0c      	ldr	r4, [pc, #48]	; (403308 <__libc_init_array+0x44>)
  4032d8:	f003 f842 	bl	406360 <_init>
  4032dc:	1ba4      	subs	r4, r4, r6
  4032de:	10a4      	asrs	r4, r4, #2
  4032e0:	2500      	movs	r5, #0
  4032e2:	42a5      	cmp	r5, r4
  4032e4:	d105      	bne.n	4032f2 <__libc_init_array+0x2e>
  4032e6:	bd70      	pop	{r4, r5, r6, pc}
  4032e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4032ec:	4798      	blx	r3
  4032ee:	3501      	adds	r5, #1
  4032f0:	e7ee      	b.n	4032d0 <__libc_init_array+0xc>
  4032f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4032f6:	4798      	blx	r3
  4032f8:	3501      	adds	r5, #1
  4032fa:	e7f2      	b.n	4032e2 <__libc_init_array+0x1e>
  4032fc:	0040636c 	.word	0x0040636c
  403300:	0040636c 	.word	0x0040636c
  403304:	0040636c 	.word	0x0040636c
  403308:	00406370 	.word	0x00406370

0040330c <memcpy>:
  40330c:	b510      	push	{r4, lr}
  40330e:	1e43      	subs	r3, r0, #1
  403310:	440a      	add	r2, r1
  403312:	4291      	cmp	r1, r2
  403314:	d100      	bne.n	403318 <memcpy+0xc>
  403316:	bd10      	pop	{r4, pc}
  403318:	f811 4b01 	ldrb.w	r4, [r1], #1
  40331c:	f803 4f01 	strb.w	r4, [r3, #1]!
  403320:	e7f7      	b.n	403312 <memcpy+0x6>

00403322 <memset>:
  403322:	4402      	add	r2, r0
  403324:	4603      	mov	r3, r0
  403326:	4293      	cmp	r3, r2
  403328:	d100      	bne.n	40332c <memset+0xa>
  40332a:	4770      	bx	lr
  40332c:	f803 1b01 	strb.w	r1, [r3], #1
  403330:	e7f9      	b.n	403326 <memset+0x4>

00403332 <__cvt>:
  403332:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403336:	b088      	sub	sp, #32
  403338:	2b00      	cmp	r3, #0
  40333a:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40333c:	9912      	ldr	r1, [sp, #72]	; 0x48
  40333e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403340:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  403344:	461e      	mov	r6, r3
  403346:	f027 0720 	bic.w	r7, r7, #32
  40334a:	bfbb      	ittet	lt
  40334c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  403350:	461e      	movlt	r6, r3
  403352:	2300      	movge	r3, #0
  403354:	232d      	movlt	r3, #45	; 0x2d
  403356:	2f46      	cmp	r7, #70	; 0x46
  403358:	4614      	mov	r4, r2
  40335a:	700b      	strb	r3, [r1, #0]
  40335c:	d004      	beq.n	403368 <__cvt+0x36>
  40335e:	2f45      	cmp	r7, #69	; 0x45
  403360:	d100      	bne.n	403364 <__cvt+0x32>
  403362:	3501      	adds	r5, #1
  403364:	2302      	movs	r3, #2
  403366:	e000      	b.n	40336a <__cvt+0x38>
  403368:	2303      	movs	r3, #3
  40336a:	aa07      	add	r2, sp, #28
  40336c:	9204      	str	r2, [sp, #16]
  40336e:	aa06      	add	r2, sp, #24
  403370:	9203      	str	r2, [sp, #12]
  403372:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  403376:	4622      	mov	r2, r4
  403378:	4633      	mov	r3, r6
  40337a:	f000 fd9d 	bl	403eb8 <_dtoa_r>
  40337e:	2f47      	cmp	r7, #71	; 0x47
  403380:	4680      	mov	r8, r0
  403382:	d102      	bne.n	40338a <__cvt+0x58>
  403384:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403386:	07db      	lsls	r3, r3, #31
  403388:	d526      	bpl.n	4033d8 <__cvt+0xa6>
  40338a:	2f46      	cmp	r7, #70	; 0x46
  40338c:	eb08 0905 	add.w	r9, r8, r5
  403390:	d111      	bne.n	4033b6 <__cvt+0x84>
  403392:	f898 3000 	ldrb.w	r3, [r8]
  403396:	2b30      	cmp	r3, #48	; 0x30
  403398:	d10a      	bne.n	4033b0 <__cvt+0x7e>
  40339a:	2200      	movs	r2, #0
  40339c:	2300      	movs	r3, #0
  40339e:	4620      	mov	r0, r4
  4033a0:	4631      	mov	r1, r6
  4033a2:	f7ff ff35 	bl	403210 <__aeabi_dcmpeq>
  4033a6:	b918      	cbnz	r0, 4033b0 <__cvt+0x7e>
  4033a8:	f1c5 0501 	rsb	r5, r5, #1
  4033ac:	f8ca 5000 	str.w	r5, [sl]
  4033b0:	f8da 3000 	ldr.w	r3, [sl]
  4033b4:	4499      	add	r9, r3
  4033b6:	2200      	movs	r2, #0
  4033b8:	2300      	movs	r3, #0
  4033ba:	4620      	mov	r0, r4
  4033bc:	4631      	mov	r1, r6
  4033be:	f7ff ff27 	bl	403210 <__aeabi_dcmpeq>
  4033c2:	b938      	cbnz	r0, 4033d4 <__cvt+0xa2>
  4033c4:	2230      	movs	r2, #48	; 0x30
  4033c6:	9b07      	ldr	r3, [sp, #28]
  4033c8:	4599      	cmp	r9, r3
  4033ca:	d905      	bls.n	4033d8 <__cvt+0xa6>
  4033cc:	1c59      	adds	r1, r3, #1
  4033ce:	9107      	str	r1, [sp, #28]
  4033d0:	701a      	strb	r2, [r3, #0]
  4033d2:	e7f8      	b.n	4033c6 <__cvt+0x94>
  4033d4:	f8cd 901c 	str.w	r9, [sp, #28]
  4033d8:	9b07      	ldr	r3, [sp, #28]
  4033da:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4033dc:	eba3 0308 	sub.w	r3, r3, r8
  4033e0:	4640      	mov	r0, r8
  4033e2:	6013      	str	r3, [r2, #0]
  4033e4:	b008      	add	sp, #32
  4033e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004033ea <__exponent>:
  4033ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  4033ec:	4603      	mov	r3, r0
  4033ee:	2900      	cmp	r1, #0
  4033f0:	bfb8      	it	lt
  4033f2:	4249      	neglt	r1, r1
  4033f4:	f803 2b02 	strb.w	r2, [r3], #2
  4033f8:	bfb4      	ite	lt
  4033fa:	222d      	movlt	r2, #45	; 0x2d
  4033fc:	222b      	movge	r2, #43	; 0x2b
  4033fe:	2909      	cmp	r1, #9
  403400:	7042      	strb	r2, [r0, #1]
  403402:	dd20      	ble.n	403446 <__exponent+0x5c>
  403404:	f10d 0207 	add.w	r2, sp, #7
  403408:	4617      	mov	r7, r2
  40340a:	260a      	movs	r6, #10
  40340c:	fb91 f5f6 	sdiv	r5, r1, r6
  403410:	fb06 1115 	mls	r1, r6, r5, r1
  403414:	3130      	adds	r1, #48	; 0x30
  403416:	2d09      	cmp	r5, #9
  403418:	f802 1c01 	strb.w	r1, [r2, #-1]
  40341c:	f102 34ff 	add.w	r4, r2, #4294967295
  403420:	4629      	mov	r1, r5
  403422:	dc09      	bgt.n	403438 <__exponent+0x4e>
  403424:	3130      	adds	r1, #48	; 0x30
  403426:	3a02      	subs	r2, #2
  403428:	f804 1c01 	strb.w	r1, [r4, #-1]
  40342c:	42ba      	cmp	r2, r7
  40342e:	461c      	mov	r4, r3
  403430:	d304      	bcc.n	40343c <__exponent+0x52>
  403432:	1a20      	subs	r0, r4, r0
  403434:	b003      	add	sp, #12
  403436:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403438:	4622      	mov	r2, r4
  40343a:	e7e7      	b.n	40340c <__exponent+0x22>
  40343c:	f812 1b01 	ldrb.w	r1, [r2], #1
  403440:	f803 1b01 	strb.w	r1, [r3], #1
  403444:	e7f2      	b.n	40342c <__exponent+0x42>
  403446:	2230      	movs	r2, #48	; 0x30
  403448:	461c      	mov	r4, r3
  40344a:	4411      	add	r1, r2
  40344c:	f804 2b02 	strb.w	r2, [r4], #2
  403450:	7059      	strb	r1, [r3, #1]
  403452:	e7ee      	b.n	403432 <__exponent+0x48>

00403454 <_printf_float>:
  403454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403458:	b091      	sub	sp, #68	; 0x44
  40345a:	460c      	mov	r4, r1
  40345c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  40345e:	4693      	mov	fp, r2
  403460:	461e      	mov	r6, r3
  403462:	4605      	mov	r5, r0
  403464:	f001 fc76 	bl	404d54 <_localeconv_r>
  403468:	6803      	ldr	r3, [r0, #0]
  40346a:	9309      	str	r3, [sp, #36]	; 0x24
  40346c:	4618      	mov	r0, r3
  40346e:	f000 fc8d 	bl	403d8c <strlen>
  403472:	2300      	movs	r3, #0
  403474:	930e      	str	r3, [sp, #56]	; 0x38
  403476:	683b      	ldr	r3, [r7, #0]
  403478:	900a      	str	r0, [sp, #40]	; 0x28
  40347a:	3307      	adds	r3, #7
  40347c:	f023 0307 	bic.w	r3, r3, #7
  403480:	f103 0208 	add.w	r2, r3, #8
  403484:	f894 8018 	ldrb.w	r8, [r4, #24]
  403488:	f8d4 a000 	ldr.w	sl, [r4]
  40348c:	603a      	str	r2, [r7, #0]
  40348e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403492:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  403496:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  40349a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  40349c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4034a0:	930b      	str	r3, [sp, #44]	; 0x2c
  4034a2:	f04f 32ff 	mov.w	r2, #4294967295
  4034a6:	4ba6      	ldr	r3, [pc, #664]	; (403740 <_printf_float+0x2ec>)
  4034a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4034aa:	4638      	mov	r0, r7
  4034ac:	f002 fb86 	bl	405bbc <__aeabi_dcmpun>
  4034b0:	2800      	cmp	r0, #0
  4034b2:	f040 81f7 	bne.w	4038a4 <_printf_float+0x450>
  4034b6:	f04f 32ff 	mov.w	r2, #4294967295
  4034ba:	4ba1      	ldr	r3, [pc, #644]	; (403740 <_printf_float+0x2ec>)
  4034bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4034be:	4638      	mov	r0, r7
  4034c0:	f7ff feba 	bl	403238 <__aeabi_dcmple>
  4034c4:	2800      	cmp	r0, #0
  4034c6:	f040 81ed 	bne.w	4038a4 <_printf_float+0x450>
  4034ca:	2200      	movs	r2, #0
  4034cc:	2300      	movs	r3, #0
  4034ce:	4638      	mov	r0, r7
  4034d0:	4649      	mov	r1, r9
  4034d2:	f7ff fea7 	bl	403224 <__aeabi_dcmplt>
  4034d6:	b110      	cbz	r0, 4034de <_printf_float+0x8a>
  4034d8:	232d      	movs	r3, #45	; 0x2d
  4034da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4034de:	4b99      	ldr	r3, [pc, #612]	; (403744 <_printf_float+0x2f0>)
  4034e0:	4f99      	ldr	r7, [pc, #612]	; (403748 <_printf_float+0x2f4>)
  4034e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4034e6:	bf98      	it	ls
  4034e8:	461f      	movls	r7, r3
  4034ea:	2303      	movs	r3, #3
  4034ec:	6123      	str	r3, [r4, #16]
  4034ee:	f02a 0304 	bic.w	r3, sl, #4
  4034f2:	6023      	str	r3, [r4, #0]
  4034f4:	f04f 0900 	mov.w	r9, #0
  4034f8:	9600      	str	r6, [sp, #0]
  4034fa:	465b      	mov	r3, fp
  4034fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4034fe:	4621      	mov	r1, r4
  403500:	4628      	mov	r0, r5
  403502:	f000 f9df 	bl	4038c4 <_printf_common>
  403506:	3001      	adds	r0, #1
  403508:	f040 809a 	bne.w	403640 <_printf_float+0x1ec>
  40350c:	f04f 30ff 	mov.w	r0, #4294967295
  403510:	b011      	add	sp, #68	; 0x44
  403512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403516:	6862      	ldr	r2, [r4, #4]
  403518:	1c53      	adds	r3, r2, #1
  40351a:	a80e      	add	r0, sp, #56	; 0x38
  40351c:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  403520:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  403524:	d141      	bne.n	4035aa <_printf_float+0x156>
  403526:	2206      	movs	r2, #6
  403528:	6062      	str	r2, [r4, #4]
  40352a:	6023      	str	r3, [r4, #0]
  40352c:	2100      	movs	r1, #0
  40352e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  403532:	9301      	str	r3, [sp, #4]
  403534:	6863      	ldr	r3, [r4, #4]
  403536:	9005      	str	r0, [sp, #20]
  403538:	9202      	str	r2, [sp, #8]
  40353a:	9300      	str	r3, [sp, #0]
  40353c:	463a      	mov	r2, r7
  40353e:	464b      	mov	r3, r9
  403540:	9106      	str	r1, [sp, #24]
  403542:	f8cd 8010 	str.w	r8, [sp, #16]
  403546:	f8cd e00c 	str.w	lr, [sp, #12]
  40354a:	4628      	mov	r0, r5
  40354c:	f7ff fef1 	bl	403332 <__cvt>
  403550:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  403554:	2b47      	cmp	r3, #71	; 0x47
  403556:	4607      	mov	r7, r0
  403558:	d109      	bne.n	40356e <_printf_float+0x11a>
  40355a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40355c:	1cd8      	adds	r0, r3, #3
  40355e:	db02      	blt.n	403566 <_printf_float+0x112>
  403560:	6862      	ldr	r2, [r4, #4]
  403562:	4293      	cmp	r3, r2
  403564:	dd59      	ble.n	40361a <_printf_float+0x1c6>
  403566:	f1a8 0802 	sub.w	r8, r8, #2
  40356a:	fa5f f888 	uxtb.w	r8, r8
  40356e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  403572:	990d      	ldr	r1, [sp, #52]	; 0x34
  403574:	d836      	bhi.n	4035e4 <_printf_float+0x190>
  403576:	3901      	subs	r1, #1
  403578:	4642      	mov	r2, r8
  40357a:	f104 0050 	add.w	r0, r4, #80	; 0x50
  40357e:	910d      	str	r1, [sp, #52]	; 0x34
  403580:	f7ff ff33 	bl	4033ea <__exponent>
  403584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403586:	1883      	adds	r3, r0, r2
  403588:	2a01      	cmp	r2, #1
  40358a:	4681      	mov	r9, r0
  40358c:	6123      	str	r3, [r4, #16]
  40358e:	dc02      	bgt.n	403596 <_printf_float+0x142>
  403590:	6822      	ldr	r2, [r4, #0]
  403592:	07d1      	lsls	r1, r2, #31
  403594:	d501      	bpl.n	40359a <_printf_float+0x146>
  403596:	3301      	adds	r3, #1
  403598:	6123      	str	r3, [r4, #16]
  40359a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  40359e:	2b00      	cmp	r3, #0
  4035a0:	d0aa      	beq.n	4034f8 <_printf_float+0xa4>
  4035a2:	232d      	movs	r3, #45	; 0x2d
  4035a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4035a8:	e7a6      	b.n	4034f8 <_printf_float+0xa4>
  4035aa:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  4035ae:	d002      	beq.n	4035b6 <_printf_float+0x162>
  4035b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4035b4:	d1b9      	bne.n	40352a <_printf_float+0xd6>
  4035b6:	b19a      	cbz	r2, 4035e0 <_printf_float+0x18c>
  4035b8:	2100      	movs	r1, #0
  4035ba:	9106      	str	r1, [sp, #24]
  4035bc:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  4035c0:	e88d 000c 	stmia.w	sp, {r2, r3}
  4035c4:	6023      	str	r3, [r4, #0]
  4035c6:	9005      	str	r0, [sp, #20]
  4035c8:	463a      	mov	r2, r7
  4035ca:	f8cd 8010 	str.w	r8, [sp, #16]
  4035ce:	f8cd e00c 	str.w	lr, [sp, #12]
  4035d2:	9102      	str	r1, [sp, #8]
  4035d4:	464b      	mov	r3, r9
  4035d6:	4628      	mov	r0, r5
  4035d8:	f7ff feab 	bl	403332 <__cvt>
  4035dc:	4607      	mov	r7, r0
  4035de:	e7bc      	b.n	40355a <_printf_float+0x106>
  4035e0:	2201      	movs	r2, #1
  4035e2:	e7a1      	b.n	403528 <_printf_float+0xd4>
  4035e4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  4035e8:	d119      	bne.n	40361e <_printf_float+0x1ca>
  4035ea:	2900      	cmp	r1, #0
  4035ec:	6863      	ldr	r3, [r4, #4]
  4035ee:	dd0c      	ble.n	40360a <_printf_float+0x1b6>
  4035f0:	6121      	str	r1, [r4, #16]
  4035f2:	b913      	cbnz	r3, 4035fa <_printf_float+0x1a6>
  4035f4:	6822      	ldr	r2, [r4, #0]
  4035f6:	07d2      	lsls	r2, r2, #31
  4035f8:	d502      	bpl.n	403600 <_printf_float+0x1ac>
  4035fa:	3301      	adds	r3, #1
  4035fc:	440b      	add	r3, r1
  4035fe:	6123      	str	r3, [r4, #16]
  403600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403602:	65a3      	str	r3, [r4, #88]	; 0x58
  403604:	f04f 0900 	mov.w	r9, #0
  403608:	e7c7      	b.n	40359a <_printf_float+0x146>
  40360a:	b913      	cbnz	r3, 403612 <_printf_float+0x1be>
  40360c:	6822      	ldr	r2, [r4, #0]
  40360e:	07d0      	lsls	r0, r2, #31
  403610:	d501      	bpl.n	403616 <_printf_float+0x1c2>
  403612:	3302      	adds	r3, #2
  403614:	e7f3      	b.n	4035fe <_printf_float+0x1aa>
  403616:	2301      	movs	r3, #1
  403618:	e7f1      	b.n	4035fe <_printf_float+0x1aa>
  40361a:	f04f 0867 	mov.w	r8, #103	; 0x67
  40361e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403622:	4293      	cmp	r3, r2
  403624:	db05      	blt.n	403632 <_printf_float+0x1de>
  403626:	6822      	ldr	r2, [r4, #0]
  403628:	6123      	str	r3, [r4, #16]
  40362a:	07d1      	lsls	r1, r2, #31
  40362c:	d5e8      	bpl.n	403600 <_printf_float+0x1ac>
  40362e:	3301      	adds	r3, #1
  403630:	e7e5      	b.n	4035fe <_printf_float+0x1aa>
  403632:	2b00      	cmp	r3, #0
  403634:	bfd4      	ite	le
  403636:	f1c3 0302 	rsble	r3, r3, #2
  40363a:	2301      	movgt	r3, #1
  40363c:	4413      	add	r3, r2
  40363e:	e7de      	b.n	4035fe <_printf_float+0x1aa>
  403640:	6823      	ldr	r3, [r4, #0]
  403642:	055a      	lsls	r2, r3, #21
  403644:	d407      	bmi.n	403656 <_printf_float+0x202>
  403646:	6923      	ldr	r3, [r4, #16]
  403648:	463a      	mov	r2, r7
  40364a:	4659      	mov	r1, fp
  40364c:	4628      	mov	r0, r5
  40364e:	47b0      	blx	r6
  403650:	3001      	adds	r0, #1
  403652:	d12a      	bne.n	4036aa <_printf_float+0x256>
  403654:	e75a      	b.n	40350c <_printf_float+0xb8>
  403656:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40365a:	f240 80dc 	bls.w	403816 <_printf_float+0x3c2>
  40365e:	2200      	movs	r2, #0
  403660:	2300      	movs	r3, #0
  403662:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403666:	f7ff fdd3 	bl	403210 <__aeabi_dcmpeq>
  40366a:	2800      	cmp	r0, #0
  40366c:	d039      	beq.n	4036e2 <_printf_float+0x28e>
  40366e:	2301      	movs	r3, #1
  403670:	4a36      	ldr	r2, [pc, #216]	; (40374c <_printf_float+0x2f8>)
  403672:	4659      	mov	r1, fp
  403674:	4628      	mov	r0, r5
  403676:	47b0      	blx	r6
  403678:	3001      	adds	r0, #1
  40367a:	f43f af47 	beq.w	40350c <_printf_float+0xb8>
  40367e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403682:	429a      	cmp	r2, r3
  403684:	db02      	blt.n	40368c <_printf_float+0x238>
  403686:	6823      	ldr	r3, [r4, #0]
  403688:	07d8      	lsls	r0, r3, #31
  40368a:	d50e      	bpl.n	4036aa <_printf_float+0x256>
  40368c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40368e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403690:	4659      	mov	r1, fp
  403692:	4628      	mov	r0, r5
  403694:	47b0      	blx	r6
  403696:	3001      	adds	r0, #1
  403698:	f43f af38 	beq.w	40350c <_printf_float+0xb8>
  40369c:	2700      	movs	r7, #0
  40369e:	f104 081a 	add.w	r8, r4, #26
  4036a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4036a4:	3b01      	subs	r3, #1
  4036a6:	429f      	cmp	r7, r3
  4036a8:	db11      	blt.n	4036ce <_printf_float+0x27a>
  4036aa:	6823      	ldr	r3, [r4, #0]
  4036ac:	079f      	lsls	r7, r3, #30
  4036ae:	d508      	bpl.n	4036c2 <_printf_float+0x26e>
  4036b0:	2700      	movs	r7, #0
  4036b2:	f104 0819 	add.w	r8, r4, #25
  4036b6:	68e3      	ldr	r3, [r4, #12]
  4036b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4036ba:	1a9b      	subs	r3, r3, r2
  4036bc:	429f      	cmp	r7, r3
  4036be:	f2c0 80e7 	blt.w	403890 <_printf_float+0x43c>
  4036c2:	68e0      	ldr	r0, [r4, #12]
  4036c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4036c6:	4298      	cmp	r0, r3
  4036c8:	bfb8      	it	lt
  4036ca:	4618      	movlt	r0, r3
  4036cc:	e720      	b.n	403510 <_printf_float+0xbc>
  4036ce:	2301      	movs	r3, #1
  4036d0:	4642      	mov	r2, r8
  4036d2:	4659      	mov	r1, fp
  4036d4:	4628      	mov	r0, r5
  4036d6:	47b0      	blx	r6
  4036d8:	3001      	adds	r0, #1
  4036da:	f43f af17 	beq.w	40350c <_printf_float+0xb8>
  4036de:	3701      	adds	r7, #1
  4036e0:	e7df      	b.n	4036a2 <_printf_float+0x24e>
  4036e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4036e4:	2b00      	cmp	r3, #0
  4036e6:	dc33      	bgt.n	403750 <_printf_float+0x2fc>
  4036e8:	2301      	movs	r3, #1
  4036ea:	4a18      	ldr	r2, [pc, #96]	; (40374c <_printf_float+0x2f8>)
  4036ec:	4659      	mov	r1, fp
  4036ee:	4628      	mov	r0, r5
  4036f0:	47b0      	blx	r6
  4036f2:	3001      	adds	r0, #1
  4036f4:	f43f af0a 	beq.w	40350c <_printf_float+0xb8>
  4036f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4036fa:	b923      	cbnz	r3, 403706 <_printf_float+0x2b2>
  4036fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4036fe:	b913      	cbnz	r3, 403706 <_printf_float+0x2b2>
  403700:	6823      	ldr	r3, [r4, #0]
  403702:	07d9      	lsls	r1, r3, #31
  403704:	d5d1      	bpl.n	4036aa <_printf_float+0x256>
  403706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403708:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40370a:	4659      	mov	r1, fp
  40370c:	4628      	mov	r0, r5
  40370e:	47b0      	blx	r6
  403710:	3001      	adds	r0, #1
  403712:	f43f aefb 	beq.w	40350c <_printf_float+0xb8>
  403716:	f04f 0800 	mov.w	r8, #0
  40371a:	f104 091a 	add.w	r9, r4, #26
  40371e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403720:	425b      	negs	r3, r3
  403722:	4598      	cmp	r8, r3
  403724:	db01      	blt.n	40372a <_printf_float+0x2d6>
  403726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403728:	e78e      	b.n	403648 <_printf_float+0x1f4>
  40372a:	2301      	movs	r3, #1
  40372c:	464a      	mov	r2, r9
  40372e:	4659      	mov	r1, fp
  403730:	4628      	mov	r0, r5
  403732:	47b0      	blx	r6
  403734:	3001      	adds	r0, #1
  403736:	f43f aee9 	beq.w	40350c <_printf_float+0xb8>
  40373a:	f108 0801 	add.w	r8, r8, #1
  40373e:	e7ee      	b.n	40371e <_printf_float+0x2ca>
  403740:	7fefffff 	.word	0x7fefffff
  403744:	004060a0 	.word	0x004060a0
  403748:	004060a4 	.word	0x004060a4
  40374c:	004060b0 	.word	0x004060b0
  403750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403752:	6da3      	ldr	r3, [r4, #88]	; 0x58
  403754:	429a      	cmp	r2, r3
  403756:	bfa8      	it	ge
  403758:	461a      	movge	r2, r3
  40375a:	2a00      	cmp	r2, #0
  40375c:	4690      	mov	r8, r2
  40375e:	dc36      	bgt.n	4037ce <_printf_float+0x37a>
  403760:	f104 031a 	add.w	r3, r4, #26
  403764:	f04f 0a00 	mov.w	sl, #0
  403768:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  40376c:	930b      	str	r3, [sp, #44]	; 0x2c
  40376e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  403772:	eba9 0308 	sub.w	r3, r9, r8
  403776:	459a      	cmp	sl, r3
  403778:	db31      	blt.n	4037de <_printf_float+0x38a>
  40377a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40377c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40377e:	429a      	cmp	r2, r3
  403780:	db38      	blt.n	4037f4 <_printf_float+0x3a0>
  403782:	6823      	ldr	r3, [r4, #0]
  403784:	07da      	lsls	r2, r3, #31
  403786:	d435      	bmi.n	4037f4 <_printf_float+0x3a0>
  403788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40378a:	990d      	ldr	r1, [sp, #52]	; 0x34
  40378c:	eba3 0209 	sub.w	r2, r3, r9
  403790:	eba3 0801 	sub.w	r8, r3, r1
  403794:	4590      	cmp	r8, r2
  403796:	bfa8      	it	ge
  403798:	4690      	movge	r8, r2
  40379a:	f1b8 0f00 	cmp.w	r8, #0
  40379e:	dc31      	bgt.n	403804 <_printf_float+0x3b0>
  4037a0:	2700      	movs	r7, #0
  4037a2:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4037a6:	f104 091a 	add.w	r9, r4, #26
  4037aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4037ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4037ae:	1a9b      	subs	r3, r3, r2
  4037b0:	eba3 0308 	sub.w	r3, r3, r8
  4037b4:	429f      	cmp	r7, r3
  4037b6:	f6bf af78 	bge.w	4036aa <_printf_float+0x256>
  4037ba:	2301      	movs	r3, #1
  4037bc:	464a      	mov	r2, r9
  4037be:	4659      	mov	r1, fp
  4037c0:	4628      	mov	r0, r5
  4037c2:	47b0      	blx	r6
  4037c4:	3001      	adds	r0, #1
  4037c6:	f43f aea1 	beq.w	40350c <_printf_float+0xb8>
  4037ca:	3701      	adds	r7, #1
  4037cc:	e7ed      	b.n	4037aa <_printf_float+0x356>
  4037ce:	4613      	mov	r3, r2
  4037d0:	4659      	mov	r1, fp
  4037d2:	463a      	mov	r2, r7
  4037d4:	4628      	mov	r0, r5
  4037d6:	47b0      	blx	r6
  4037d8:	3001      	adds	r0, #1
  4037da:	d1c1      	bne.n	403760 <_printf_float+0x30c>
  4037dc:	e696      	b.n	40350c <_printf_float+0xb8>
  4037de:	2301      	movs	r3, #1
  4037e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4037e2:	4659      	mov	r1, fp
  4037e4:	4628      	mov	r0, r5
  4037e6:	47b0      	blx	r6
  4037e8:	3001      	adds	r0, #1
  4037ea:	f43f ae8f 	beq.w	40350c <_printf_float+0xb8>
  4037ee:	f10a 0a01 	add.w	sl, sl, #1
  4037f2:	e7bc      	b.n	40376e <_printf_float+0x31a>
  4037f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4037f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4037f8:	4659      	mov	r1, fp
  4037fa:	4628      	mov	r0, r5
  4037fc:	47b0      	blx	r6
  4037fe:	3001      	adds	r0, #1
  403800:	d1c2      	bne.n	403788 <_printf_float+0x334>
  403802:	e683      	b.n	40350c <_printf_float+0xb8>
  403804:	4643      	mov	r3, r8
  403806:	eb07 0209 	add.w	r2, r7, r9
  40380a:	4659      	mov	r1, fp
  40380c:	4628      	mov	r0, r5
  40380e:	47b0      	blx	r6
  403810:	3001      	adds	r0, #1
  403812:	d1c5      	bne.n	4037a0 <_printf_float+0x34c>
  403814:	e67a      	b.n	40350c <_printf_float+0xb8>
  403816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403818:	2a01      	cmp	r2, #1
  40381a:	dc01      	bgt.n	403820 <_printf_float+0x3cc>
  40381c:	07db      	lsls	r3, r3, #31
  40381e:	d534      	bpl.n	40388a <_printf_float+0x436>
  403820:	2301      	movs	r3, #1
  403822:	463a      	mov	r2, r7
  403824:	4659      	mov	r1, fp
  403826:	4628      	mov	r0, r5
  403828:	47b0      	blx	r6
  40382a:	3001      	adds	r0, #1
  40382c:	f43f ae6e 	beq.w	40350c <_printf_float+0xb8>
  403830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403832:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403834:	4659      	mov	r1, fp
  403836:	4628      	mov	r0, r5
  403838:	47b0      	blx	r6
  40383a:	3001      	adds	r0, #1
  40383c:	f43f ae66 	beq.w	40350c <_printf_float+0xb8>
  403840:	2200      	movs	r2, #0
  403842:	2300      	movs	r3, #0
  403844:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403848:	f7ff fce2 	bl	403210 <__aeabi_dcmpeq>
  40384c:	b150      	cbz	r0, 403864 <_printf_float+0x410>
  40384e:	2700      	movs	r7, #0
  403850:	f104 081a 	add.w	r8, r4, #26
  403854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403856:	3b01      	subs	r3, #1
  403858:	429f      	cmp	r7, r3
  40385a:	db0c      	blt.n	403876 <_printf_float+0x422>
  40385c:	464b      	mov	r3, r9
  40385e:	f104 0250 	add.w	r2, r4, #80	; 0x50
  403862:	e6f2      	b.n	40364a <_printf_float+0x1f6>
  403864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403866:	1c7a      	adds	r2, r7, #1
  403868:	3b01      	subs	r3, #1
  40386a:	4659      	mov	r1, fp
  40386c:	4628      	mov	r0, r5
  40386e:	47b0      	blx	r6
  403870:	3001      	adds	r0, #1
  403872:	d1f3      	bne.n	40385c <_printf_float+0x408>
  403874:	e64a      	b.n	40350c <_printf_float+0xb8>
  403876:	2301      	movs	r3, #1
  403878:	4642      	mov	r2, r8
  40387a:	4659      	mov	r1, fp
  40387c:	4628      	mov	r0, r5
  40387e:	47b0      	blx	r6
  403880:	3001      	adds	r0, #1
  403882:	f43f ae43 	beq.w	40350c <_printf_float+0xb8>
  403886:	3701      	adds	r7, #1
  403888:	e7e4      	b.n	403854 <_printf_float+0x400>
  40388a:	2301      	movs	r3, #1
  40388c:	463a      	mov	r2, r7
  40388e:	e7ec      	b.n	40386a <_printf_float+0x416>
  403890:	2301      	movs	r3, #1
  403892:	4642      	mov	r2, r8
  403894:	4659      	mov	r1, fp
  403896:	4628      	mov	r0, r5
  403898:	47b0      	blx	r6
  40389a:	3001      	adds	r0, #1
  40389c:	f43f ae36 	beq.w	40350c <_printf_float+0xb8>
  4038a0:	3701      	adds	r7, #1
  4038a2:	e708      	b.n	4036b6 <_printf_float+0x262>
  4038a4:	463a      	mov	r2, r7
  4038a6:	464b      	mov	r3, r9
  4038a8:	4638      	mov	r0, r7
  4038aa:	4649      	mov	r1, r9
  4038ac:	f002 f986 	bl	405bbc <__aeabi_dcmpun>
  4038b0:	2800      	cmp	r0, #0
  4038b2:	f43f ae30 	beq.w	403516 <_printf_float+0xc2>
  4038b6:	4b01      	ldr	r3, [pc, #4]	; (4038bc <_printf_float+0x468>)
  4038b8:	4f01      	ldr	r7, [pc, #4]	; (4038c0 <_printf_float+0x46c>)
  4038ba:	e612      	b.n	4034e2 <_printf_float+0x8e>
  4038bc:	004060a8 	.word	0x004060a8
  4038c0:	004060ac 	.word	0x004060ac

004038c4 <_printf_common>:
  4038c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4038c8:	4691      	mov	r9, r2
  4038ca:	461f      	mov	r7, r3
  4038cc:	688a      	ldr	r2, [r1, #8]
  4038ce:	690b      	ldr	r3, [r1, #16]
  4038d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4038d4:	4293      	cmp	r3, r2
  4038d6:	bfb8      	it	lt
  4038d8:	4613      	movlt	r3, r2
  4038da:	f8c9 3000 	str.w	r3, [r9]
  4038de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4038e2:	4606      	mov	r6, r0
  4038e4:	460c      	mov	r4, r1
  4038e6:	b112      	cbz	r2, 4038ee <_printf_common+0x2a>
  4038e8:	3301      	adds	r3, #1
  4038ea:	f8c9 3000 	str.w	r3, [r9]
  4038ee:	6823      	ldr	r3, [r4, #0]
  4038f0:	0699      	lsls	r1, r3, #26
  4038f2:	bf42      	ittt	mi
  4038f4:	f8d9 3000 	ldrmi.w	r3, [r9]
  4038f8:	3302      	addmi	r3, #2
  4038fa:	f8c9 3000 	strmi.w	r3, [r9]
  4038fe:	6825      	ldr	r5, [r4, #0]
  403900:	f015 0506 	ands.w	r5, r5, #6
  403904:	d107      	bne.n	403916 <_printf_common+0x52>
  403906:	f104 0a19 	add.w	sl, r4, #25
  40390a:	68e3      	ldr	r3, [r4, #12]
  40390c:	f8d9 2000 	ldr.w	r2, [r9]
  403910:	1a9b      	subs	r3, r3, r2
  403912:	429d      	cmp	r5, r3
  403914:	db29      	blt.n	40396a <_printf_common+0xa6>
  403916:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  40391a:	6822      	ldr	r2, [r4, #0]
  40391c:	3300      	adds	r3, #0
  40391e:	bf18      	it	ne
  403920:	2301      	movne	r3, #1
  403922:	0692      	lsls	r2, r2, #26
  403924:	d42e      	bmi.n	403984 <_printf_common+0xc0>
  403926:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40392a:	4639      	mov	r1, r7
  40392c:	4630      	mov	r0, r6
  40392e:	47c0      	blx	r8
  403930:	3001      	adds	r0, #1
  403932:	d021      	beq.n	403978 <_printf_common+0xb4>
  403934:	6823      	ldr	r3, [r4, #0]
  403936:	68e5      	ldr	r5, [r4, #12]
  403938:	f8d9 2000 	ldr.w	r2, [r9]
  40393c:	f003 0306 	and.w	r3, r3, #6
  403940:	2b04      	cmp	r3, #4
  403942:	bf08      	it	eq
  403944:	1aad      	subeq	r5, r5, r2
  403946:	68a3      	ldr	r3, [r4, #8]
  403948:	6922      	ldr	r2, [r4, #16]
  40394a:	bf0c      	ite	eq
  40394c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  403950:	2500      	movne	r5, #0
  403952:	4293      	cmp	r3, r2
  403954:	bfc4      	itt	gt
  403956:	1a9b      	subgt	r3, r3, r2
  403958:	18ed      	addgt	r5, r5, r3
  40395a:	f04f 0900 	mov.w	r9, #0
  40395e:	341a      	adds	r4, #26
  403960:	454d      	cmp	r5, r9
  403962:	d11b      	bne.n	40399c <_printf_common+0xd8>
  403964:	2000      	movs	r0, #0
  403966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40396a:	2301      	movs	r3, #1
  40396c:	4652      	mov	r2, sl
  40396e:	4639      	mov	r1, r7
  403970:	4630      	mov	r0, r6
  403972:	47c0      	blx	r8
  403974:	3001      	adds	r0, #1
  403976:	d103      	bne.n	403980 <_printf_common+0xbc>
  403978:	f04f 30ff 	mov.w	r0, #4294967295
  40397c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403980:	3501      	adds	r5, #1
  403982:	e7c2      	b.n	40390a <_printf_common+0x46>
  403984:	18e1      	adds	r1, r4, r3
  403986:	1c5a      	adds	r2, r3, #1
  403988:	2030      	movs	r0, #48	; 0x30
  40398a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  40398e:	4422      	add	r2, r4
  403990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  403994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  403998:	3302      	adds	r3, #2
  40399a:	e7c4      	b.n	403926 <_printf_common+0x62>
  40399c:	2301      	movs	r3, #1
  40399e:	4622      	mov	r2, r4
  4039a0:	4639      	mov	r1, r7
  4039a2:	4630      	mov	r0, r6
  4039a4:	47c0      	blx	r8
  4039a6:	3001      	adds	r0, #1
  4039a8:	d0e6      	beq.n	403978 <_printf_common+0xb4>
  4039aa:	f109 0901 	add.w	r9, r9, #1
  4039ae:	e7d7      	b.n	403960 <_printf_common+0x9c>

004039b0 <_printf_i>:
  4039b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4039b4:	4617      	mov	r7, r2
  4039b6:	7e0a      	ldrb	r2, [r1, #24]
  4039b8:	b085      	sub	sp, #20
  4039ba:	2a6e      	cmp	r2, #110	; 0x6e
  4039bc:	4698      	mov	r8, r3
  4039be:	4606      	mov	r6, r0
  4039c0:	460c      	mov	r4, r1
  4039c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4039c4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  4039c8:	f000 80bc 	beq.w	403b44 <_printf_i+0x194>
  4039cc:	d81a      	bhi.n	403a04 <_printf_i+0x54>
  4039ce:	2a63      	cmp	r2, #99	; 0x63
  4039d0:	d02e      	beq.n	403a30 <_printf_i+0x80>
  4039d2:	d80a      	bhi.n	4039ea <_printf_i+0x3a>
  4039d4:	2a00      	cmp	r2, #0
  4039d6:	f000 80c8 	beq.w	403b6a <_printf_i+0x1ba>
  4039da:	2a58      	cmp	r2, #88	; 0x58
  4039dc:	f000 808a 	beq.w	403af4 <_printf_i+0x144>
  4039e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4039e4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  4039e8:	e02a      	b.n	403a40 <_printf_i+0x90>
  4039ea:	2a64      	cmp	r2, #100	; 0x64
  4039ec:	d001      	beq.n	4039f2 <_printf_i+0x42>
  4039ee:	2a69      	cmp	r2, #105	; 0x69
  4039f0:	d1f6      	bne.n	4039e0 <_printf_i+0x30>
  4039f2:	6821      	ldr	r1, [r4, #0]
  4039f4:	681a      	ldr	r2, [r3, #0]
  4039f6:	f011 0f80 	tst.w	r1, #128	; 0x80
  4039fa:	d023      	beq.n	403a44 <_printf_i+0x94>
  4039fc:	1d11      	adds	r1, r2, #4
  4039fe:	6019      	str	r1, [r3, #0]
  403a00:	6813      	ldr	r3, [r2, #0]
  403a02:	e027      	b.n	403a54 <_printf_i+0xa4>
  403a04:	2a73      	cmp	r2, #115	; 0x73
  403a06:	f000 80b4 	beq.w	403b72 <_printf_i+0x1c2>
  403a0a:	d808      	bhi.n	403a1e <_printf_i+0x6e>
  403a0c:	2a6f      	cmp	r2, #111	; 0x6f
  403a0e:	d02a      	beq.n	403a66 <_printf_i+0xb6>
  403a10:	2a70      	cmp	r2, #112	; 0x70
  403a12:	d1e5      	bne.n	4039e0 <_printf_i+0x30>
  403a14:	680a      	ldr	r2, [r1, #0]
  403a16:	f042 0220 	orr.w	r2, r2, #32
  403a1a:	600a      	str	r2, [r1, #0]
  403a1c:	e003      	b.n	403a26 <_printf_i+0x76>
  403a1e:	2a75      	cmp	r2, #117	; 0x75
  403a20:	d021      	beq.n	403a66 <_printf_i+0xb6>
  403a22:	2a78      	cmp	r2, #120	; 0x78
  403a24:	d1dc      	bne.n	4039e0 <_printf_i+0x30>
  403a26:	2278      	movs	r2, #120	; 0x78
  403a28:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  403a2c:	496e      	ldr	r1, [pc, #440]	; (403be8 <_printf_i+0x238>)
  403a2e:	e064      	b.n	403afa <_printf_i+0x14a>
  403a30:	681a      	ldr	r2, [r3, #0]
  403a32:	f101 0542 	add.w	r5, r1, #66	; 0x42
  403a36:	1d11      	adds	r1, r2, #4
  403a38:	6019      	str	r1, [r3, #0]
  403a3a:	6813      	ldr	r3, [r2, #0]
  403a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403a40:	2301      	movs	r3, #1
  403a42:	e0a3      	b.n	403b8c <_printf_i+0x1dc>
  403a44:	f011 0f40 	tst.w	r1, #64	; 0x40
  403a48:	f102 0104 	add.w	r1, r2, #4
  403a4c:	6019      	str	r1, [r3, #0]
  403a4e:	d0d7      	beq.n	403a00 <_printf_i+0x50>
  403a50:	f9b2 3000 	ldrsh.w	r3, [r2]
  403a54:	2b00      	cmp	r3, #0
  403a56:	da03      	bge.n	403a60 <_printf_i+0xb0>
  403a58:	222d      	movs	r2, #45	; 0x2d
  403a5a:	425b      	negs	r3, r3
  403a5c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  403a60:	4962      	ldr	r1, [pc, #392]	; (403bec <_printf_i+0x23c>)
  403a62:	220a      	movs	r2, #10
  403a64:	e017      	b.n	403a96 <_printf_i+0xe6>
  403a66:	6820      	ldr	r0, [r4, #0]
  403a68:	6819      	ldr	r1, [r3, #0]
  403a6a:	f010 0f80 	tst.w	r0, #128	; 0x80
  403a6e:	d003      	beq.n	403a78 <_printf_i+0xc8>
  403a70:	1d08      	adds	r0, r1, #4
  403a72:	6018      	str	r0, [r3, #0]
  403a74:	680b      	ldr	r3, [r1, #0]
  403a76:	e006      	b.n	403a86 <_printf_i+0xd6>
  403a78:	f010 0f40 	tst.w	r0, #64	; 0x40
  403a7c:	f101 0004 	add.w	r0, r1, #4
  403a80:	6018      	str	r0, [r3, #0]
  403a82:	d0f7      	beq.n	403a74 <_printf_i+0xc4>
  403a84:	880b      	ldrh	r3, [r1, #0]
  403a86:	4959      	ldr	r1, [pc, #356]	; (403bec <_printf_i+0x23c>)
  403a88:	2a6f      	cmp	r2, #111	; 0x6f
  403a8a:	bf14      	ite	ne
  403a8c:	220a      	movne	r2, #10
  403a8e:	2208      	moveq	r2, #8
  403a90:	2000      	movs	r0, #0
  403a92:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  403a96:	6865      	ldr	r5, [r4, #4]
  403a98:	60a5      	str	r5, [r4, #8]
  403a9a:	2d00      	cmp	r5, #0
  403a9c:	f2c0 809c 	blt.w	403bd8 <_printf_i+0x228>
  403aa0:	6820      	ldr	r0, [r4, #0]
  403aa2:	f020 0004 	bic.w	r0, r0, #4
  403aa6:	6020      	str	r0, [r4, #0]
  403aa8:	2b00      	cmp	r3, #0
  403aaa:	d13f      	bne.n	403b2c <_printf_i+0x17c>
  403aac:	2d00      	cmp	r5, #0
  403aae:	f040 8095 	bne.w	403bdc <_printf_i+0x22c>
  403ab2:	4675      	mov	r5, lr
  403ab4:	2a08      	cmp	r2, #8
  403ab6:	d10b      	bne.n	403ad0 <_printf_i+0x120>
  403ab8:	6823      	ldr	r3, [r4, #0]
  403aba:	07da      	lsls	r2, r3, #31
  403abc:	d508      	bpl.n	403ad0 <_printf_i+0x120>
  403abe:	6923      	ldr	r3, [r4, #16]
  403ac0:	6862      	ldr	r2, [r4, #4]
  403ac2:	429a      	cmp	r2, r3
  403ac4:	bfde      	ittt	le
  403ac6:	2330      	movle	r3, #48	; 0x30
  403ac8:	f805 3c01 	strble.w	r3, [r5, #-1]
  403acc:	f105 35ff 	addle.w	r5, r5, #4294967295
  403ad0:	ebae 0305 	sub.w	r3, lr, r5
  403ad4:	6123      	str	r3, [r4, #16]
  403ad6:	f8cd 8000 	str.w	r8, [sp]
  403ada:	463b      	mov	r3, r7
  403adc:	aa03      	add	r2, sp, #12
  403ade:	4621      	mov	r1, r4
  403ae0:	4630      	mov	r0, r6
  403ae2:	f7ff feef 	bl	4038c4 <_printf_common>
  403ae6:	3001      	adds	r0, #1
  403ae8:	d155      	bne.n	403b96 <_printf_i+0x1e6>
  403aea:	f04f 30ff 	mov.w	r0, #4294967295
  403aee:	b005      	add	sp, #20
  403af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403af4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  403af8:	493c      	ldr	r1, [pc, #240]	; (403bec <_printf_i+0x23c>)
  403afa:	6822      	ldr	r2, [r4, #0]
  403afc:	6818      	ldr	r0, [r3, #0]
  403afe:	f012 0f80 	tst.w	r2, #128	; 0x80
  403b02:	f100 0504 	add.w	r5, r0, #4
  403b06:	601d      	str	r5, [r3, #0]
  403b08:	d001      	beq.n	403b0e <_printf_i+0x15e>
  403b0a:	6803      	ldr	r3, [r0, #0]
  403b0c:	e002      	b.n	403b14 <_printf_i+0x164>
  403b0e:	0655      	lsls	r5, r2, #25
  403b10:	d5fb      	bpl.n	403b0a <_printf_i+0x15a>
  403b12:	8803      	ldrh	r3, [r0, #0]
  403b14:	07d0      	lsls	r0, r2, #31
  403b16:	bf44      	itt	mi
  403b18:	f042 0220 	orrmi.w	r2, r2, #32
  403b1c:	6022      	strmi	r2, [r4, #0]
  403b1e:	b91b      	cbnz	r3, 403b28 <_printf_i+0x178>
  403b20:	6822      	ldr	r2, [r4, #0]
  403b22:	f022 0220 	bic.w	r2, r2, #32
  403b26:	6022      	str	r2, [r4, #0]
  403b28:	2210      	movs	r2, #16
  403b2a:	e7b1      	b.n	403a90 <_printf_i+0xe0>
  403b2c:	4675      	mov	r5, lr
  403b2e:	fbb3 f0f2 	udiv	r0, r3, r2
  403b32:	fb02 3310 	mls	r3, r2, r0, r3
  403b36:	5ccb      	ldrb	r3, [r1, r3]
  403b38:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403b3c:	4603      	mov	r3, r0
  403b3e:	2800      	cmp	r0, #0
  403b40:	d1f5      	bne.n	403b2e <_printf_i+0x17e>
  403b42:	e7b7      	b.n	403ab4 <_printf_i+0x104>
  403b44:	6808      	ldr	r0, [r1, #0]
  403b46:	681a      	ldr	r2, [r3, #0]
  403b48:	6949      	ldr	r1, [r1, #20]
  403b4a:	f010 0f80 	tst.w	r0, #128	; 0x80
  403b4e:	d004      	beq.n	403b5a <_printf_i+0x1aa>
  403b50:	1d10      	adds	r0, r2, #4
  403b52:	6018      	str	r0, [r3, #0]
  403b54:	6813      	ldr	r3, [r2, #0]
  403b56:	6019      	str	r1, [r3, #0]
  403b58:	e007      	b.n	403b6a <_printf_i+0x1ba>
  403b5a:	f010 0f40 	tst.w	r0, #64	; 0x40
  403b5e:	f102 0004 	add.w	r0, r2, #4
  403b62:	6018      	str	r0, [r3, #0]
  403b64:	6813      	ldr	r3, [r2, #0]
  403b66:	d0f6      	beq.n	403b56 <_printf_i+0x1a6>
  403b68:	8019      	strh	r1, [r3, #0]
  403b6a:	2300      	movs	r3, #0
  403b6c:	6123      	str	r3, [r4, #16]
  403b6e:	4675      	mov	r5, lr
  403b70:	e7b1      	b.n	403ad6 <_printf_i+0x126>
  403b72:	681a      	ldr	r2, [r3, #0]
  403b74:	1d11      	adds	r1, r2, #4
  403b76:	6019      	str	r1, [r3, #0]
  403b78:	6815      	ldr	r5, [r2, #0]
  403b7a:	6862      	ldr	r2, [r4, #4]
  403b7c:	2100      	movs	r1, #0
  403b7e:	4628      	mov	r0, r5
  403b80:	f001 f966 	bl	404e50 <memchr>
  403b84:	b108      	cbz	r0, 403b8a <_printf_i+0x1da>
  403b86:	1b40      	subs	r0, r0, r5
  403b88:	6060      	str	r0, [r4, #4]
  403b8a:	6863      	ldr	r3, [r4, #4]
  403b8c:	6123      	str	r3, [r4, #16]
  403b8e:	2300      	movs	r3, #0
  403b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403b94:	e79f      	b.n	403ad6 <_printf_i+0x126>
  403b96:	6923      	ldr	r3, [r4, #16]
  403b98:	462a      	mov	r2, r5
  403b9a:	4639      	mov	r1, r7
  403b9c:	4630      	mov	r0, r6
  403b9e:	47c0      	blx	r8
  403ba0:	3001      	adds	r0, #1
  403ba2:	d0a2      	beq.n	403aea <_printf_i+0x13a>
  403ba4:	6823      	ldr	r3, [r4, #0]
  403ba6:	079b      	lsls	r3, r3, #30
  403ba8:	d507      	bpl.n	403bba <_printf_i+0x20a>
  403baa:	2500      	movs	r5, #0
  403bac:	f104 0919 	add.w	r9, r4, #25
  403bb0:	68e3      	ldr	r3, [r4, #12]
  403bb2:	9a03      	ldr	r2, [sp, #12]
  403bb4:	1a9b      	subs	r3, r3, r2
  403bb6:	429d      	cmp	r5, r3
  403bb8:	db05      	blt.n	403bc6 <_printf_i+0x216>
  403bba:	68e0      	ldr	r0, [r4, #12]
  403bbc:	9b03      	ldr	r3, [sp, #12]
  403bbe:	4298      	cmp	r0, r3
  403bc0:	bfb8      	it	lt
  403bc2:	4618      	movlt	r0, r3
  403bc4:	e793      	b.n	403aee <_printf_i+0x13e>
  403bc6:	2301      	movs	r3, #1
  403bc8:	464a      	mov	r2, r9
  403bca:	4639      	mov	r1, r7
  403bcc:	4630      	mov	r0, r6
  403bce:	47c0      	blx	r8
  403bd0:	3001      	adds	r0, #1
  403bd2:	d08a      	beq.n	403aea <_printf_i+0x13a>
  403bd4:	3501      	adds	r5, #1
  403bd6:	e7eb      	b.n	403bb0 <_printf_i+0x200>
  403bd8:	2b00      	cmp	r3, #0
  403bda:	d1a7      	bne.n	403b2c <_printf_i+0x17c>
  403bdc:	780b      	ldrb	r3, [r1, #0]
  403bde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403be2:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403be6:	e765      	b.n	403ab4 <_printf_i+0x104>
  403be8:	004060c3 	.word	0x004060c3
  403bec:	004060b2 	.word	0x004060b2

00403bf0 <iprintf>:
  403bf0:	b40f      	push	{r0, r1, r2, r3}
  403bf2:	4b0a      	ldr	r3, [pc, #40]	; (403c1c <iprintf+0x2c>)
  403bf4:	b513      	push	{r0, r1, r4, lr}
  403bf6:	681c      	ldr	r4, [r3, #0]
  403bf8:	b124      	cbz	r4, 403c04 <iprintf+0x14>
  403bfa:	69a3      	ldr	r3, [r4, #24]
  403bfc:	b913      	cbnz	r3, 403c04 <iprintf+0x14>
  403bfe:	4620      	mov	r0, r4
  403c00:	f001 f81e 	bl	404c40 <__sinit>
  403c04:	ab05      	add	r3, sp, #20
  403c06:	9a04      	ldr	r2, [sp, #16]
  403c08:	68a1      	ldr	r1, [r4, #8]
  403c0a:	9301      	str	r3, [sp, #4]
  403c0c:	4620      	mov	r0, r4
  403c0e:	f001 fd21 	bl	405654 <_vfiprintf_r>
  403c12:	b002      	add	sp, #8
  403c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403c18:	b004      	add	sp, #16
  403c1a:	4770      	bx	lr
  403c1c:	20400048 	.word	0x20400048

00403c20 <setbuf>:
  403c20:	2900      	cmp	r1, #0
  403c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403c26:	bf0c      	ite	eq
  403c28:	2202      	moveq	r2, #2
  403c2a:	2200      	movne	r2, #0
  403c2c:	f000 b800 	b.w	403c30 <setvbuf>

00403c30 <setvbuf>:
  403c30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403c34:	461d      	mov	r5, r3
  403c36:	4b51      	ldr	r3, [pc, #324]	; (403d7c <setvbuf+0x14c>)
  403c38:	681e      	ldr	r6, [r3, #0]
  403c3a:	4604      	mov	r4, r0
  403c3c:	460f      	mov	r7, r1
  403c3e:	4690      	mov	r8, r2
  403c40:	b126      	cbz	r6, 403c4c <setvbuf+0x1c>
  403c42:	69b3      	ldr	r3, [r6, #24]
  403c44:	b913      	cbnz	r3, 403c4c <setvbuf+0x1c>
  403c46:	4630      	mov	r0, r6
  403c48:	f000 fffa 	bl	404c40 <__sinit>
  403c4c:	4b4c      	ldr	r3, [pc, #304]	; (403d80 <setvbuf+0x150>)
  403c4e:	429c      	cmp	r4, r3
  403c50:	d152      	bne.n	403cf8 <setvbuf+0xc8>
  403c52:	6874      	ldr	r4, [r6, #4]
  403c54:	f1b8 0f02 	cmp.w	r8, #2
  403c58:	d006      	beq.n	403c68 <setvbuf+0x38>
  403c5a:	f1b8 0f01 	cmp.w	r8, #1
  403c5e:	f200 8089 	bhi.w	403d74 <setvbuf+0x144>
  403c62:	2d00      	cmp	r5, #0
  403c64:	f2c0 8086 	blt.w	403d74 <setvbuf+0x144>
  403c68:	4621      	mov	r1, r4
  403c6a:	4630      	mov	r0, r6
  403c6c:	f000 ff7e 	bl	404b6c <_fflush_r>
  403c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403c72:	b141      	cbz	r1, 403c86 <setvbuf+0x56>
  403c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403c78:	4299      	cmp	r1, r3
  403c7a:	d002      	beq.n	403c82 <setvbuf+0x52>
  403c7c:	4630      	mov	r0, r6
  403c7e:	f001 fc15 	bl	4054ac <_free_r>
  403c82:	2300      	movs	r3, #0
  403c84:	6363      	str	r3, [r4, #52]	; 0x34
  403c86:	2300      	movs	r3, #0
  403c88:	61a3      	str	r3, [r4, #24]
  403c8a:	6063      	str	r3, [r4, #4]
  403c8c:	89a3      	ldrh	r3, [r4, #12]
  403c8e:	061b      	lsls	r3, r3, #24
  403c90:	d503      	bpl.n	403c9a <setvbuf+0x6a>
  403c92:	6921      	ldr	r1, [r4, #16]
  403c94:	4630      	mov	r0, r6
  403c96:	f001 fc09 	bl	4054ac <_free_r>
  403c9a:	89a3      	ldrh	r3, [r4, #12]
  403c9c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403ca0:	f023 0303 	bic.w	r3, r3, #3
  403ca4:	f1b8 0f02 	cmp.w	r8, #2
  403ca8:	81a3      	strh	r3, [r4, #12]
  403caa:	d05d      	beq.n	403d68 <setvbuf+0x138>
  403cac:	ab01      	add	r3, sp, #4
  403cae:	466a      	mov	r2, sp
  403cb0:	4621      	mov	r1, r4
  403cb2:	4630      	mov	r0, r6
  403cb4:	f001 f85c 	bl	404d70 <__swhatbuf_r>
  403cb8:	89a3      	ldrh	r3, [r4, #12]
  403cba:	4318      	orrs	r0, r3
  403cbc:	81a0      	strh	r0, [r4, #12]
  403cbe:	bb2d      	cbnz	r5, 403d0c <setvbuf+0xdc>
  403cc0:	9d00      	ldr	r5, [sp, #0]
  403cc2:	4628      	mov	r0, r5
  403cc4:	f001 f8b8 	bl	404e38 <malloc>
  403cc8:	4607      	mov	r7, r0
  403cca:	2800      	cmp	r0, #0
  403ccc:	d14e      	bne.n	403d6c <setvbuf+0x13c>
  403cce:	f8dd 9000 	ldr.w	r9, [sp]
  403cd2:	45a9      	cmp	r9, r5
  403cd4:	d13c      	bne.n	403d50 <setvbuf+0x120>
  403cd6:	f04f 30ff 	mov.w	r0, #4294967295
  403cda:	89a3      	ldrh	r3, [r4, #12]
  403cdc:	f043 0302 	orr.w	r3, r3, #2
  403ce0:	81a3      	strh	r3, [r4, #12]
  403ce2:	2300      	movs	r3, #0
  403ce4:	60a3      	str	r3, [r4, #8]
  403ce6:	f104 0347 	add.w	r3, r4, #71	; 0x47
  403cea:	6023      	str	r3, [r4, #0]
  403cec:	6123      	str	r3, [r4, #16]
  403cee:	2301      	movs	r3, #1
  403cf0:	6163      	str	r3, [r4, #20]
  403cf2:	b003      	add	sp, #12
  403cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403cf8:	4b22      	ldr	r3, [pc, #136]	; (403d84 <setvbuf+0x154>)
  403cfa:	429c      	cmp	r4, r3
  403cfc:	d101      	bne.n	403d02 <setvbuf+0xd2>
  403cfe:	68b4      	ldr	r4, [r6, #8]
  403d00:	e7a8      	b.n	403c54 <setvbuf+0x24>
  403d02:	4b21      	ldr	r3, [pc, #132]	; (403d88 <setvbuf+0x158>)
  403d04:	429c      	cmp	r4, r3
  403d06:	bf08      	it	eq
  403d08:	68f4      	ldreq	r4, [r6, #12]
  403d0a:	e7a3      	b.n	403c54 <setvbuf+0x24>
  403d0c:	2f00      	cmp	r7, #0
  403d0e:	d0d8      	beq.n	403cc2 <setvbuf+0x92>
  403d10:	69b3      	ldr	r3, [r6, #24]
  403d12:	b913      	cbnz	r3, 403d1a <setvbuf+0xea>
  403d14:	4630      	mov	r0, r6
  403d16:	f000 ff93 	bl	404c40 <__sinit>
  403d1a:	f1b8 0f01 	cmp.w	r8, #1
  403d1e:	bf08      	it	eq
  403d20:	89a3      	ldrheq	r3, [r4, #12]
  403d22:	6027      	str	r7, [r4, #0]
  403d24:	bf04      	itt	eq
  403d26:	f043 0301 	orreq.w	r3, r3, #1
  403d2a:	81a3      	strheq	r3, [r4, #12]
  403d2c:	89a3      	ldrh	r3, [r4, #12]
  403d2e:	6127      	str	r7, [r4, #16]
  403d30:	f013 0008 	ands.w	r0, r3, #8
  403d34:	6165      	str	r5, [r4, #20]
  403d36:	d01b      	beq.n	403d70 <setvbuf+0x140>
  403d38:	f013 0001 	ands.w	r0, r3, #1
  403d3c:	bf18      	it	ne
  403d3e:	426d      	negne	r5, r5
  403d40:	f04f 0300 	mov.w	r3, #0
  403d44:	bf1d      	ittte	ne
  403d46:	60a3      	strne	r3, [r4, #8]
  403d48:	61a5      	strne	r5, [r4, #24]
  403d4a:	4618      	movne	r0, r3
  403d4c:	60a5      	streq	r5, [r4, #8]
  403d4e:	e7d0      	b.n	403cf2 <setvbuf+0xc2>
  403d50:	4648      	mov	r0, r9
  403d52:	f001 f871 	bl	404e38 <malloc>
  403d56:	4607      	mov	r7, r0
  403d58:	2800      	cmp	r0, #0
  403d5a:	d0bc      	beq.n	403cd6 <setvbuf+0xa6>
  403d5c:	89a3      	ldrh	r3, [r4, #12]
  403d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403d62:	81a3      	strh	r3, [r4, #12]
  403d64:	464d      	mov	r5, r9
  403d66:	e7d3      	b.n	403d10 <setvbuf+0xe0>
  403d68:	2000      	movs	r0, #0
  403d6a:	e7b6      	b.n	403cda <setvbuf+0xaa>
  403d6c:	46a9      	mov	r9, r5
  403d6e:	e7f5      	b.n	403d5c <setvbuf+0x12c>
  403d70:	60a0      	str	r0, [r4, #8]
  403d72:	e7be      	b.n	403cf2 <setvbuf+0xc2>
  403d74:	f04f 30ff 	mov.w	r0, #4294967295
  403d78:	e7bb      	b.n	403cf2 <setvbuf+0xc2>
  403d7a:	bf00      	nop
  403d7c:	20400048 	.word	0x20400048
  403d80:	00406104 	.word	0x00406104
  403d84:	00406124 	.word	0x00406124
  403d88:	004060e4 	.word	0x004060e4

00403d8c <strlen>:
  403d8c:	4603      	mov	r3, r0
  403d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
  403d92:	2a00      	cmp	r2, #0
  403d94:	d1fb      	bne.n	403d8e <strlen+0x2>
  403d96:	1a18      	subs	r0, r3, r0
  403d98:	3801      	subs	r0, #1
  403d9a:	4770      	bx	lr

00403d9c <quorem>:
  403d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403da0:	6903      	ldr	r3, [r0, #16]
  403da2:	690c      	ldr	r4, [r1, #16]
  403da4:	429c      	cmp	r4, r3
  403da6:	4680      	mov	r8, r0
  403da8:	f300 8082 	bgt.w	403eb0 <quorem+0x114>
  403dac:	3c01      	subs	r4, #1
  403dae:	f101 0714 	add.w	r7, r1, #20
  403db2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  403db6:	f100 0614 	add.w	r6, r0, #20
  403dba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  403dbe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  403dc2:	eb06 030e 	add.w	r3, r6, lr
  403dc6:	3501      	adds	r5, #1
  403dc8:	eb07 090e 	add.w	r9, r7, lr
  403dcc:	9301      	str	r3, [sp, #4]
  403dce:	fbb0 f5f5 	udiv	r5, r0, r5
  403dd2:	b395      	cbz	r5, 403e3a <quorem+0x9e>
  403dd4:	f04f 0a00 	mov.w	sl, #0
  403dd8:	4638      	mov	r0, r7
  403dda:	46b4      	mov	ip, r6
  403ddc:	46d3      	mov	fp, sl
  403dde:	f850 2b04 	ldr.w	r2, [r0], #4
  403de2:	b293      	uxth	r3, r2
  403de4:	fb05 a303 	mla	r3, r5, r3, sl
  403de8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  403dec:	b29b      	uxth	r3, r3
  403dee:	ebab 0303 	sub.w	r3, fp, r3
  403df2:	0c12      	lsrs	r2, r2, #16
  403df4:	f8bc b000 	ldrh.w	fp, [ip]
  403df8:	fb05 a202 	mla	r2, r5, r2, sl
  403dfc:	fa13 f38b 	uxtah	r3, r3, fp
  403e00:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  403e04:	fa1f fb82 	uxth.w	fp, r2
  403e08:	f8dc 2000 	ldr.w	r2, [ip]
  403e0c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  403e10:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403e14:	b29b      	uxth	r3, r3
  403e16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403e1a:	4581      	cmp	r9, r0
  403e1c:	ea4f 4b22 	mov.w	fp, r2, asr #16
  403e20:	f84c 3b04 	str.w	r3, [ip], #4
  403e24:	d2db      	bcs.n	403dde <quorem+0x42>
  403e26:	f856 300e 	ldr.w	r3, [r6, lr]
  403e2a:	b933      	cbnz	r3, 403e3a <quorem+0x9e>
  403e2c:	9b01      	ldr	r3, [sp, #4]
  403e2e:	3b04      	subs	r3, #4
  403e30:	429e      	cmp	r6, r3
  403e32:	461a      	mov	r2, r3
  403e34:	d330      	bcc.n	403e98 <quorem+0xfc>
  403e36:	f8c8 4010 	str.w	r4, [r8, #16]
  403e3a:	4640      	mov	r0, r8
  403e3c:	f001 fa61 	bl	405302 <__mcmp>
  403e40:	2800      	cmp	r0, #0
  403e42:	db25      	blt.n	403e90 <quorem+0xf4>
  403e44:	3501      	adds	r5, #1
  403e46:	4630      	mov	r0, r6
  403e48:	f04f 0e00 	mov.w	lr, #0
  403e4c:	f857 2b04 	ldr.w	r2, [r7], #4
  403e50:	f8d0 c000 	ldr.w	ip, [r0]
  403e54:	b293      	uxth	r3, r2
  403e56:	ebae 0303 	sub.w	r3, lr, r3
  403e5a:	0c12      	lsrs	r2, r2, #16
  403e5c:	fa13 f38c 	uxtah	r3, r3, ip
  403e60:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  403e64:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403e68:	b29b      	uxth	r3, r3
  403e6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403e6e:	45b9      	cmp	r9, r7
  403e70:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403e74:	f840 3b04 	str.w	r3, [r0], #4
  403e78:	d2e8      	bcs.n	403e4c <quorem+0xb0>
  403e7a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403e7e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  403e82:	b92a      	cbnz	r2, 403e90 <quorem+0xf4>
  403e84:	3b04      	subs	r3, #4
  403e86:	429e      	cmp	r6, r3
  403e88:	461a      	mov	r2, r3
  403e8a:	d30b      	bcc.n	403ea4 <quorem+0x108>
  403e8c:	f8c8 4010 	str.w	r4, [r8, #16]
  403e90:	4628      	mov	r0, r5
  403e92:	b003      	add	sp, #12
  403e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e98:	6812      	ldr	r2, [r2, #0]
  403e9a:	3b04      	subs	r3, #4
  403e9c:	2a00      	cmp	r2, #0
  403e9e:	d1ca      	bne.n	403e36 <quorem+0x9a>
  403ea0:	3c01      	subs	r4, #1
  403ea2:	e7c5      	b.n	403e30 <quorem+0x94>
  403ea4:	6812      	ldr	r2, [r2, #0]
  403ea6:	3b04      	subs	r3, #4
  403ea8:	2a00      	cmp	r2, #0
  403eaa:	d1ef      	bne.n	403e8c <quorem+0xf0>
  403eac:	3c01      	subs	r4, #1
  403eae:	e7ea      	b.n	403e86 <quorem+0xea>
  403eb0:	2000      	movs	r0, #0
  403eb2:	e7ee      	b.n	403e92 <quorem+0xf6>
  403eb4:	0000      	movs	r0, r0
	...

00403eb8 <_dtoa_r>:
  403eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ebc:	6a46      	ldr	r6, [r0, #36]	; 0x24
  403ebe:	b095      	sub	sp, #84	; 0x54
  403ec0:	4604      	mov	r4, r0
  403ec2:	9d21      	ldr	r5, [sp, #132]	; 0x84
  403ec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403ec8:	b93e      	cbnz	r6, 403eda <_dtoa_r+0x22>
  403eca:	2010      	movs	r0, #16
  403ecc:	f000 ffb4 	bl	404e38 <malloc>
  403ed0:	6260      	str	r0, [r4, #36]	; 0x24
  403ed2:	6046      	str	r6, [r0, #4]
  403ed4:	6086      	str	r6, [r0, #8]
  403ed6:	6006      	str	r6, [r0, #0]
  403ed8:	60c6      	str	r6, [r0, #12]
  403eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403edc:	6819      	ldr	r1, [r3, #0]
  403ede:	b151      	cbz	r1, 403ef6 <_dtoa_r+0x3e>
  403ee0:	685a      	ldr	r2, [r3, #4]
  403ee2:	604a      	str	r2, [r1, #4]
  403ee4:	2301      	movs	r3, #1
  403ee6:	4093      	lsls	r3, r2
  403ee8:	608b      	str	r3, [r1, #8]
  403eea:	4620      	mov	r0, r4
  403eec:	f001 f834 	bl	404f58 <_Bfree>
  403ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403ef2:	2200      	movs	r2, #0
  403ef4:	601a      	str	r2, [r3, #0]
  403ef6:	9b03      	ldr	r3, [sp, #12]
  403ef8:	2b00      	cmp	r3, #0
  403efa:	bfbf      	itttt	lt
  403efc:	2301      	movlt	r3, #1
  403efe:	602b      	strlt	r3, [r5, #0]
  403f00:	9b03      	ldrlt	r3, [sp, #12]
  403f02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  403f06:	bfb2      	itee	lt
  403f08:	9303      	strlt	r3, [sp, #12]
  403f0a:	2300      	movge	r3, #0
  403f0c:	602b      	strge	r3, [r5, #0]
  403f0e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  403f12:	4ba9      	ldr	r3, [pc, #676]	; (4041b8 <_dtoa_r+0x300>)
  403f14:	ea33 0309 	bics.w	r3, r3, r9
  403f18:	d11b      	bne.n	403f52 <_dtoa_r+0x9a>
  403f1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403f1c:	f242 730f 	movw	r3, #9999	; 0x270f
  403f20:	6013      	str	r3, [r2, #0]
  403f22:	9b02      	ldr	r3, [sp, #8]
  403f24:	b923      	cbnz	r3, 403f30 <_dtoa_r+0x78>
  403f26:	f3c9 0013 	ubfx	r0, r9, #0, #20
  403f2a:	2800      	cmp	r0, #0
  403f2c:	f000 8581 	beq.w	404a32 <_dtoa_r+0xb7a>
  403f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403f32:	b953      	cbnz	r3, 403f4a <_dtoa_r+0x92>
  403f34:	4ba1      	ldr	r3, [pc, #644]	; (4041bc <_dtoa_r+0x304>)
  403f36:	e021      	b.n	403f7c <_dtoa_r+0xc4>
  403f38:	4ba1      	ldr	r3, [pc, #644]	; (4041c0 <_dtoa_r+0x308>)
  403f3a:	9306      	str	r3, [sp, #24]
  403f3c:	3308      	adds	r3, #8
  403f3e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403f40:	6013      	str	r3, [r2, #0]
  403f42:	9806      	ldr	r0, [sp, #24]
  403f44:	b015      	add	sp, #84	; 0x54
  403f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f4a:	4b9c      	ldr	r3, [pc, #624]	; (4041bc <_dtoa_r+0x304>)
  403f4c:	9306      	str	r3, [sp, #24]
  403f4e:	3303      	adds	r3, #3
  403f50:	e7f5      	b.n	403f3e <_dtoa_r+0x86>
  403f52:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  403f56:	2200      	movs	r2, #0
  403f58:	2300      	movs	r3, #0
  403f5a:	4630      	mov	r0, r6
  403f5c:	4639      	mov	r1, r7
  403f5e:	f7ff f957 	bl	403210 <__aeabi_dcmpeq>
  403f62:	4680      	mov	r8, r0
  403f64:	b160      	cbz	r0, 403f80 <_dtoa_r+0xc8>
  403f66:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403f68:	2301      	movs	r3, #1
  403f6a:	6013      	str	r3, [r2, #0]
  403f6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403f6e:	2b00      	cmp	r3, #0
  403f70:	f000 855c 	beq.w	404a2c <_dtoa_r+0xb74>
  403f74:	4b93      	ldr	r3, [pc, #588]	; (4041c4 <_dtoa_r+0x30c>)
  403f76:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403f78:	6013      	str	r3, [r2, #0]
  403f7a:	3b01      	subs	r3, #1
  403f7c:	9306      	str	r3, [sp, #24]
  403f7e:	e7e0      	b.n	403f42 <_dtoa_r+0x8a>
  403f80:	ab12      	add	r3, sp, #72	; 0x48
  403f82:	9301      	str	r3, [sp, #4]
  403f84:	ab13      	add	r3, sp, #76	; 0x4c
  403f86:	9300      	str	r3, [sp, #0]
  403f88:	4632      	mov	r2, r6
  403f8a:	463b      	mov	r3, r7
  403f8c:	4620      	mov	r0, r4
  403f8e:	f001 fa30 	bl	4053f2 <__d2b>
  403f92:	f3c9 550a 	ubfx	r5, r9, #20, #11
  403f96:	4682      	mov	sl, r0
  403f98:	2d00      	cmp	r5, #0
  403f9a:	d07c      	beq.n	404096 <_dtoa_r+0x1de>
  403f9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
  403fa0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  403fa4:	4630      	mov	r0, r6
  403fa6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403faa:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  403fae:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  403fb2:	2200      	movs	r2, #0
  403fb4:	4b84      	ldr	r3, [pc, #528]	; (4041c8 <_dtoa_r+0x310>)
  403fb6:	f7fe fd0f 	bl	4029d8 <__aeabi_dsub>
  403fba:	a379      	add	r3, pc, #484	; (adr r3, 4041a0 <_dtoa_r+0x2e8>)
  403fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
  403fc0:	f7fe febe 	bl	402d40 <__aeabi_dmul>
  403fc4:	a378      	add	r3, pc, #480	; (adr r3, 4041a8 <_dtoa_r+0x2f0>)
  403fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
  403fca:	f7fe fd07 	bl	4029dc <__adddf3>
  403fce:	4606      	mov	r6, r0
  403fd0:	4628      	mov	r0, r5
  403fd2:	460f      	mov	r7, r1
  403fd4:	f7fe fe4e 	bl	402c74 <__aeabi_i2d>
  403fd8:	a375      	add	r3, pc, #468	; (adr r3, 4041b0 <_dtoa_r+0x2f8>)
  403fda:	e9d3 2300 	ldrd	r2, r3, [r3]
  403fde:	f7fe feaf 	bl	402d40 <__aeabi_dmul>
  403fe2:	4602      	mov	r2, r0
  403fe4:	460b      	mov	r3, r1
  403fe6:	4630      	mov	r0, r6
  403fe8:	4639      	mov	r1, r7
  403fea:	f7fe fcf7 	bl	4029dc <__adddf3>
  403fee:	4606      	mov	r6, r0
  403ff0:	460f      	mov	r7, r1
  403ff2:	f7ff f93f 	bl	403274 <__aeabi_d2iz>
  403ff6:	2200      	movs	r2, #0
  403ff8:	4683      	mov	fp, r0
  403ffa:	2300      	movs	r3, #0
  403ffc:	4630      	mov	r0, r6
  403ffe:	4639      	mov	r1, r7
  404000:	f7ff f910 	bl	403224 <__aeabi_dcmplt>
  404004:	b158      	cbz	r0, 40401e <_dtoa_r+0x166>
  404006:	4658      	mov	r0, fp
  404008:	f7fe fe34 	bl	402c74 <__aeabi_i2d>
  40400c:	4602      	mov	r2, r0
  40400e:	460b      	mov	r3, r1
  404010:	4630      	mov	r0, r6
  404012:	4639      	mov	r1, r7
  404014:	f7ff f8fc 	bl	403210 <__aeabi_dcmpeq>
  404018:	b908      	cbnz	r0, 40401e <_dtoa_r+0x166>
  40401a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40401e:	f1bb 0f16 	cmp.w	fp, #22
  404022:	d857      	bhi.n	4040d4 <_dtoa_r+0x21c>
  404024:	4969      	ldr	r1, [pc, #420]	; (4041cc <_dtoa_r+0x314>)
  404026:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40402a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40402e:	e9d1 0100 	ldrd	r0, r1, [r1]
  404032:	f7ff f915 	bl	403260 <__aeabi_dcmpgt>
  404036:	2800      	cmp	r0, #0
  404038:	d04e      	beq.n	4040d8 <_dtoa_r+0x220>
  40403a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40403e:	2300      	movs	r3, #0
  404040:	930d      	str	r3, [sp, #52]	; 0x34
  404042:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404044:	1b5d      	subs	r5, r3, r5
  404046:	1e6b      	subs	r3, r5, #1
  404048:	9307      	str	r3, [sp, #28]
  40404a:	bf43      	ittte	mi
  40404c:	2300      	movmi	r3, #0
  40404e:	f1c5 0801 	rsbmi	r8, r5, #1
  404052:	9307      	strmi	r3, [sp, #28]
  404054:	f04f 0800 	movpl.w	r8, #0
  404058:	f1bb 0f00 	cmp.w	fp, #0
  40405c:	db3e      	blt.n	4040dc <_dtoa_r+0x224>
  40405e:	9b07      	ldr	r3, [sp, #28]
  404060:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  404064:	445b      	add	r3, fp
  404066:	9307      	str	r3, [sp, #28]
  404068:	2300      	movs	r3, #0
  40406a:	9308      	str	r3, [sp, #32]
  40406c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40406e:	2b09      	cmp	r3, #9
  404070:	f200 80b0 	bhi.w	4041d4 <_dtoa_r+0x31c>
  404074:	2b05      	cmp	r3, #5
  404076:	bfc4      	itt	gt
  404078:	3b04      	subgt	r3, #4
  40407a:	931e      	strgt	r3, [sp, #120]	; 0x78
  40407c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40407e:	f1a3 0302 	sub.w	r3, r3, #2
  404082:	bfcc      	ite	gt
  404084:	2600      	movgt	r6, #0
  404086:	2601      	movle	r6, #1
  404088:	2b03      	cmp	r3, #3
  40408a:	f200 80af 	bhi.w	4041ec <_dtoa_r+0x334>
  40408e:	e8df f003 	tbb	[pc, r3]
  404092:	8583      	.short	0x8583
  404094:	772d      	.short	0x772d
  404096:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404098:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40409a:	441d      	add	r5, r3
  40409c:	f205 4332 	addw	r3, r5, #1074	; 0x432
  4040a0:	2b20      	cmp	r3, #32
  4040a2:	dd11      	ble.n	4040c8 <_dtoa_r+0x210>
  4040a4:	9a02      	ldr	r2, [sp, #8]
  4040a6:	f205 4012 	addw	r0, r5, #1042	; 0x412
  4040aa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4040ae:	fa22 f000 	lsr.w	r0, r2, r0
  4040b2:	fa09 f303 	lsl.w	r3, r9, r3
  4040b6:	4318      	orrs	r0, r3
  4040b8:	f7fe fdcc 	bl	402c54 <__aeabi_ui2d>
  4040bc:	2301      	movs	r3, #1
  4040be:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4040c2:	3d01      	subs	r5, #1
  4040c4:	9310      	str	r3, [sp, #64]	; 0x40
  4040c6:	e774      	b.n	403fb2 <_dtoa_r+0xfa>
  4040c8:	f1c3 0020 	rsb	r0, r3, #32
  4040cc:	9b02      	ldr	r3, [sp, #8]
  4040ce:	fa03 f000 	lsl.w	r0, r3, r0
  4040d2:	e7f1      	b.n	4040b8 <_dtoa_r+0x200>
  4040d4:	2301      	movs	r3, #1
  4040d6:	e7b3      	b.n	404040 <_dtoa_r+0x188>
  4040d8:	900d      	str	r0, [sp, #52]	; 0x34
  4040da:	e7b2      	b.n	404042 <_dtoa_r+0x18a>
  4040dc:	f1cb 0300 	rsb	r3, fp, #0
  4040e0:	9308      	str	r3, [sp, #32]
  4040e2:	2300      	movs	r3, #0
  4040e4:	eba8 080b 	sub.w	r8, r8, fp
  4040e8:	930c      	str	r3, [sp, #48]	; 0x30
  4040ea:	e7bf      	b.n	40406c <_dtoa_r+0x1b4>
  4040ec:	2301      	movs	r3, #1
  4040ee:	9309      	str	r3, [sp, #36]	; 0x24
  4040f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4040f2:	2b00      	cmp	r3, #0
  4040f4:	dd7d      	ble.n	4041f2 <_dtoa_r+0x33a>
  4040f6:	9304      	str	r3, [sp, #16]
  4040f8:	4699      	mov	r9, r3
  4040fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4040fc:	2200      	movs	r2, #0
  4040fe:	606a      	str	r2, [r5, #4]
  404100:	2104      	movs	r1, #4
  404102:	f101 0214 	add.w	r2, r1, #20
  404106:	429a      	cmp	r2, r3
  404108:	d978      	bls.n	4041fc <_dtoa_r+0x344>
  40410a:	6869      	ldr	r1, [r5, #4]
  40410c:	4620      	mov	r0, r4
  40410e:	f000 feef 	bl	404ef0 <_Balloc>
  404112:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404114:	6028      	str	r0, [r5, #0]
  404116:	681b      	ldr	r3, [r3, #0]
  404118:	9306      	str	r3, [sp, #24]
  40411a:	f1b9 0f0e 	cmp.w	r9, #14
  40411e:	f200 80ee 	bhi.w	4042fe <_dtoa_r+0x446>
  404122:	2e00      	cmp	r6, #0
  404124:	f000 80eb 	beq.w	4042fe <_dtoa_r+0x446>
  404128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40412c:	f1bb 0f00 	cmp.w	fp, #0
  404130:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  404134:	dd77      	ble.n	404226 <_dtoa_r+0x36e>
  404136:	4a25      	ldr	r2, [pc, #148]	; (4041cc <_dtoa_r+0x314>)
  404138:	f00b 030f 	and.w	r3, fp, #15
  40413c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404140:	e9d3 2300 	ldrd	r2, r3, [r3]
  404144:	ea4f 162b 	mov.w	r6, fp, asr #4
  404148:	06f0      	lsls	r0, r6, #27
  40414a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40414e:	d55a      	bpl.n	404206 <_dtoa_r+0x34e>
  404150:	4b1f      	ldr	r3, [pc, #124]	; (4041d0 <_dtoa_r+0x318>)
  404152:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404156:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40415a:	f7fe ff1b 	bl	402f94 <__aeabi_ddiv>
  40415e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404162:	f006 060f 	and.w	r6, r6, #15
  404166:	2503      	movs	r5, #3
  404168:	4f19      	ldr	r7, [pc, #100]	; (4041d0 <_dtoa_r+0x318>)
  40416a:	2e00      	cmp	r6, #0
  40416c:	d14d      	bne.n	40420a <_dtoa_r+0x352>
  40416e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404176:	f7fe ff0d 	bl	402f94 <__aeabi_ddiv>
  40417a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40417e:	e06c      	b.n	40425a <_dtoa_r+0x3a2>
  404180:	2301      	movs	r3, #1
  404182:	9309      	str	r3, [sp, #36]	; 0x24
  404184:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404186:	445b      	add	r3, fp
  404188:	f103 0901 	add.w	r9, r3, #1
  40418c:	9304      	str	r3, [sp, #16]
  40418e:	464b      	mov	r3, r9
  404190:	2b01      	cmp	r3, #1
  404192:	bfb8      	it	lt
  404194:	2301      	movlt	r3, #1
  404196:	e7b0      	b.n	4040fa <_dtoa_r+0x242>
  404198:	2300      	movs	r3, #0
  40419a:	e7a8      	b.n	4040ee <_dtoa_r+0x236>
  40419c:	2300      	movs	r3, #0
  40419e:	e7f0      	b.n	404182 <_dtoa_r+0x2ca>
  4041a0:	636f4361 	.word	0x636f4361
  4041a4:	3fd287a7 	.word	0x3fd287a7
  4041a8:	8b60c8b3 	.word	0x8b60c8b3
  4041ac:	3fc68a28 	.word	0x3fc68a28
  4041b0:	509f79fb 	.word	0x509f79fb
  4041b4:	3fd34413 	.word	0x3fd34413
  4041b8:	7ff00000 	.word	0x7ff00000
  4041bc:	004060dd 	.word	0x004060dd
  4041c0:	004060d4 	.word	0x004060d4
  4041c4:	004060b1 	.word	0x004060b1
  4041c8:	3ff80000 	.word	0x3ff80000
  4041cc:	00406170 	.word	0x00406170
  4041d0:	00406148 	.word	0x00406148
  4041d4:	2601      	movs	r6, #1
  4041d6:	2300      	movs	r3, #0
  4041d8:	931e      	str	r3, [sp, #120]	; 0x78
  4041da:	9609      	str	r6, [sp, #36]	; 0x24
  4041dc:	f04f 33ff 	mov.w	r3, #4294967295
  4041e0:	9304      	str	r3, [sp, #16]
  4041e2:	4699      	mov	r9, r3
  4041e4:	2200      	movs	r2, #0
  4041e6:	2312      	movs	r3, #18
  4041e8:	921f      	str	r2, [sp, #124]	; 0x7c
  4041ea:	e786      	b.n	4040fa <_dtoa_r+0x242>
  4041ec:	2301      	movs	r3, #1
  4041ee:	9309      	str	r3, [sp, #36]	; 0x24
  4041f0:	e7f4      	b.n	4041dc <_dtoa_r+0x324>
  4041f2:	2301      	movs	r3, #1
  4041f4:	9304      	str	r3, [sp, #16]
  4041f6:	4699      	mov	r9, r3
  4041f8:	461a      	mov	r2, r3
  4041fa:	e7f5      	b.n	4041e8 <_dtoa_r+0x330>
  4041fc:	686a      	ldr	r2, [r5, #4]
  4041fe:	3201      	adds	r2, #1
  404200:	606a      	str	r2, [r5, #4]
  404202:	0049      	lsls	r1, r1, #1
  404204:	e77d      	b.n	404102 <_dtoa_r+0x24a>
  404206:	2502      	movs	r5, #2
  404208:	e7ae      	b.n	404168 <_dtoa_r+0x2b0>
  40420a:	07f1      	lsls	r1, r6, #31
  40420c:	d508      	bpl.n	404220 <_dtoa_r+0x368>
  40420e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404212:	e9d7 2300 	ldrd	r2, r3, [r7]
  404216:	f7fe fd93 	bl	402d40 <__aeabi_dmul>
  40421a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40421e:	3501      	adds	r5, #1
  404220:	1076      	asrs	r6, r6, #1
  404222:	3708      	adds	r7, #8
  404224:	e7a1      	b.n	40416a <_dtoa_r+0x2b2>
  404226:	f000 80a5 	beq.w	404374 <_dtoa_r+0x4bc>
  40422a:	f1cb 0600 	rsb	r6, fp, #0
  40422e:	4ba3      	ldr	r3, [pc, #652]	; (4044bc <_dtoa_r+0x604>)
  404230:	4fa3      	ldr	r7, [pc, #652]	; (4044c0 <_dtoa_r+0x608>)
  404232:	f006 020f 	and.w	r2, r6, #15
  404236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40423a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40423e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404242:	f7fe fd7d 	bl	402d40 <__aeabi_dmul>
  404246:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40424a:	1136      	asrs	r6, r6, #4
  40424c:	2300      	movs	r3, #0
  40424e:	2502      	movs	r5, #2
  404250:	2e00      	cmp	r6, #0
  404252:	f040 8084 	bne.w	40435e <_dtoa_r+0x4a6>
  404256:	2b00      	cmp	r3, #0
  404258:	d18f      	bne.n	40417a <_dtoa_r+0x2c2>
  40425a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40425c:	2b00      	cmp	r3, #0
  40425e:	f000 808b 	beq.w	404378 <_dtoa_r+0x4c0>
  404262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404266:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40426a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40426e:	2200      	movs	r2, #0
  404270:	4b94      	ldr	r3, [pc, #592]	; (4044c4 <_dtoa_r+0x60c>)
  404272:	f7fe ffd7 	bl	403224 <__aeabi_dcmplt>
  404276:	2800      	cmp	r0, #0
  404278:	d07e      	beq.n	404378 <_dtoa_r+0x4c0>
  40427a:	f1b9 0f00 	cmp.w	r9, #0
  40427e:	d07b      	beq.n	404378 <_dtoa_r+0x4c0>
  404280:	9b04      	ldr	r3, [sp, #16]
  404282:	2b00      	cmp	r3, #0
  404284:	dd37      	ble.n	4042f6 <_dtoa_r+0x43e>
  404286:	2200      	movs	r2, #0
  404288:	4b8f      	ldr	r3, [pc, #572]	; (4044c8 <_dtoa_r+0x610>)
  40428a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40428e:	f7fe fd57 	bl	402d40 <__aeabi_dmul>
  404292:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404296:	9e04      	ldr	r6, [sp, #16]
  404298:	f10b 37ff 	add.w	r7, fp, #4294967295
  40429c:	3501      	adds	r5, #1
  40429e:	4628      	mov	r0, r5
  4042a0:	f7fe fce8 	bl	402c74 <__aeabi_i2d>
  4042a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4042a8:	f7fe fd4a 	bl	402d40 <__aeabi_dmul>
  4042ac:	4b87      	ldr	r3, [pc, #540]	; (4044cc <_dtoa_r+0x614>)
  4042ae:	2200      	movs	r2, #0
  4042b0:	f7fe fb94 	bl	4029dc <__adddf3>
  4042b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4042b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4042ba:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  4042be:	950b      	str	r5, [sp, #44]	; 0x2c
  4042c0:	2e00      	cmp	r6, #0
  4042c2:	d15c      	bne.n	40437e <_dtoa_r+0x4c6>
  4042c4:	2200      	movs	r2, #0
  4042c6:	4b82      	ldr	r3, [pc, #520]	; (4044d0 <_dtoa_r+0x618>)
  4042c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4042cc:	f7fe fb84 	bl	4029d8 <__aeabi_dsub>
  4042d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4042d2:	462b      	mov	r3, r5
  4042d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4042d8:	f7fe ffc2 	bl	403260 <__aeabi_dcmpgt>
  4042dc:	2800      	cmp	r0, #0
  4042de:	f040 82f7 	bne.w	4048d0 <_dtoa_r+0xa18>
  4042e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4042e4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4042e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4042ec:	f7fe ff9a 	bl	403224 <__aeabi_dcmplt>
  4042f0:	2800      	cmp	r0, #0
  4042f2:	f040 82eb 	bne.w	4048cc <_dtoa_r+0xa14>
  4042f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4042fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4042fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404300:	2b00      	cmp	r3, #0
  404302:	f2c0 8151 	blt.w	4045a8 <_dtoa_r+0x6f0>
  404306:	f1bb 0f0e 	cmp.w	fp, #14
  40430a:	f300 814d 	bgt.w	4045a8 <_dtoa_r+0x6f0>
  40430e:	4b6b      	ldr	r3, [pc, #428]	; (4044bc <_dtoa_r+0x604>)
  404310:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  404314:	e9d3 2300 	ldrd	r2, r3, [r3]
  404318:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40431c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40431e:	2b00      	cmp	r3, #0
  404320:	f280 80da 	bge.w	4044d8 <_dtoa_r+0x620>
  404324:	f1b9 0f00 	cmp.w	r9, #0
  404328:	f300 80d6 	bgt.w	4044d8 <_dtoa_r+0x620>
  40432c:	f040 82cd 	bne.w	4048ca <_dtoa_r+0xa12>
  404330:	2200      	movs	r2, #0
  404332:	4b67      	ldr	r3, [pc, #412]	; (4044d0 <_dtoa_r+0x618>)
  404334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404338:	f7fe fd02 	bl	402d40 <__aeabi_dmul>
  40433c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404340:	f7fe ff84 	bl	40324c <__aeabi_dcmpge>
  404344:	464e      	mov	r6, r9
  404346:	464f      	mov	r7, r9
  404348:	2800      	cmp	r0, #0
  40434a:	f040 82a4 	bne.w	404896 <_dtoa_r+0x9de>
  40434e:	9b06      	ldr	r3, [sp, #24]
  404350:	9a06      	ldr	r2, [sp, #24]
  404352:	1c5d      	adds	r5, r3, #1
  404354:	2331      	movs	r3, #49	; 0x31
  404356:	7013      	strb	r3, [r2, #0]
  404358:	f10b 0b01 	add.w	fp, fp, #1
  40435c:	e29f      	b.n	40489e <_dtoa_r+0x9e6>
  40435e:	07f2      	lsls	r2, r6, #31
  404360:	d505      	bpl.n	40436e <_dtoa_r+0x4b6>
  404362:	e9d7 2300 	ldrd	r2, r3, [r7]
  404366:	f7fe fceb 	bl	402d40 <__aeabi_dmul>
  40436a:	3501      	adds	r5, #1
  40436c:	2301      	movs	r3, #1
  40436e:	1076      	asrs	r6, r6, #1
  404370:	3708      	adds	r7, #8
  404372:	e76d      	b.n	404250 <_dtoa_r+0x398>
  404374:	2502      	movs	r5, #2
  404376:	e770      	b.n	40425a <_dtoa_r+0x3a2>
  404378:	465f      	mov	r7, fp
  40437a:	464e      	mov	r6, r9
  40437c:	e78f      	b.n	40429e <_dtoa_r+0x3e6>
  40437e:	9a06      	ldr	r2, [sp, #24]
  404380:	4b4e      	ldr	r3, [pc, #312]	; (4044bc <_dtoa_r+0x604>)
  404382:	4432      	add	r2, r6
  404384:	9211      	str	r2, [sp, #68]	; 0x44
  404386:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404388:	1e71      	subs	r1, r6, #1
  40438a:	2a00      	cmp	r2, #0
  40438c:	d048      	beq.n	404420 <_dtoa_r+0x568>
  40438e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  404392:	e9d3 2300 	ldrd	r2, r3, [r3]
  404396:	2000      	movs	r0, #0
  404398:	494e      	ldr	r1, [pc, #312]	; (4044d4 <_dtoa_r+0x61c>)
  40439a:	f7fe fdfb 	bl	402f94 <__aeabi_ddiv>
  40439e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4043a2:	f7fe fb19 	bl	4029d8 <__aeabi_dsub>
  4043a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4043aa:	9d06      	ldr	r5, [sp, #24]
  4043ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4043b0:	f7fe ff60 	bl	403274 <__aeabi_d2iz>
  4043b4:	4606      	mov	r6, r0
  4043b6:	f7fe fc5d 	bl	402c74 <__aeabi_i2d>
  4043ba:	4602      	mov	r2, r0
  4043bc:	460b      	mov	r3, r1
  4043be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4043c2:	f7fe fb09 	bl	4029d8 <__aeabi_dsub>
  4043c6:	3630      	adds	r6, #48	; 0x30
  4043c8:	f805 6b01 	strb.w	r6, [r5], #1
  4043cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4043d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4043d4:	f7fe ff26 	bl	403224 <__aeabi_dcmplt>
  4043d8:	2800      	cmp	r0, #0
  4043da:	d165      	bne.n	4044a8 <_dtoa_r+0x5f0>
  4043dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4043e0:	2000      	movs	r0, #0
  4043e2:	4938      	ldr	r1, [pc, #224]	; (4044c4 <_dtoa_r+0x60c>)
  4043e4:	f7fe faf8 	bl	4029d8 <__aeabi_dsub>
  4043e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4043ec:	f7fe ff1a 	bl	403224 <__aeabi_dcmplt>
  4043f0:	2800      	cmp	r0, #0
  4043f2:	f040 80b9 	bne.w	404568 <_dtoa_r+0x6b0>
  4043f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4043f8:	429d      	cmp	r5, r3
  4043fa:	f43f af7c 	beq.w	4042f6 <_dtoa_r+0x43e>
  4043fe:	2200      	movs	r2, #0
  404400:	4b31      	ldr	r3, [pc, #196]	; (4044c8 <_dtoa_r+0x610>)
  404402:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404406:	f7fe fc9b 	bl	402d40 <__aeabi_dmul>
  40440a:	2200      	movs	r2, #0
  40440c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404410:	4b2d      	ldr	r3, [pc, #180]	; (4044c8 <_dtoa_r+0x610>)
  404412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404416:	f7fe fc93 	bl	402d40 <__aeabi_dmul>
  40441a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40441e:	e7c5      	b.n	4043ac <_dtoa_r+0x4f4>
  404420:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404424:	e9d1 0100 	ldrd	r0, r1, [r1]
  404428:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40442c:	f7fe fc88 	bl	402d40 <__aeabi_dmul>
  404430:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404434:	9d06      	ldr	r5, [sp, #24]
  404436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40443a:	f7fe ff1b 	bl	403274 <__aeabi_d2iz>
  40443e:	4606      	mov	r6, r0
  404440:	f7fe fc18 	bl	402c74 <__aeabi_i2d>
  404444:	3630      	adds	r6, #48	; 0x30
  404446:	4602      	mov	r2, r0
  404448:	460b      	mov	r3, r1
  40444a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40444e:	f7fe fac3 	bl	4029d8 <__aeabi_dsub>
  404452:	f805 6b01 	strb.w	r6, [r5], #1
  404456:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404458:	42ab      	cmp	r3, r5
  40445a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40445e:	f04f 0200 	mov.w	r2, #0
  404462:	d125      	bne.n	4044b0 <_dtoa_r+0x5f8>
  404464:	4b1b      	ldr	r3, [pc, #108]	; (4044d4 <_dtoa_r+0x61c>)
  404466:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40446a:	f7fe fab7 	bl	4029dc <__adddf3>
  40446e:	4602      	mov	r2, r0
  404470:	460b      	mov	r3, r1
  404472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404476:	f7fe fef3 	bl	403260 <__aeabi_dcmpgt>
  40447a:	2800      	cmp	r0, #0
  40447c:	d174      	bne.n	404568 <_dtoa_r+0x6b0>
  40447e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404482:	2000      	movs	r0, #0
  404484:	4913      	ldr	r1, [pc, #76]	; (4044d4 <_dtoa_r+0x61c>)
  404486:	f7fe faa7 	bl	4029d8 <__aeabi_dsub>
  40448a:	4602      	mov	r2, r0
  40448c:	460b      	mov	r3, r1
  40448e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404492:	f7fe fec7 	bl	403224 <__aeabi_dcmplt>
  404496:	2800      	cmp	r0, #0
  404498:	f43f af2d 	beq.w	4042f6 <_dtoa_r+0x43e>
  40449c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4044a0:	2b30      	cmp	r3, #48	; 0x30
  4044a2:	f105 32ff 	add.w	r2, r5, #4294967295
  4044a6:	d001      	beq.n	4044ac <_dtoa_r+0x5f4>
  4044a8:	46bb      	mov	fp, r7
  4044aa:	e04c      	b.n	404546 <_dtoa_r+0x68e>
  4044ac:	4615      	mov	r5, r2
  4044ae:	e7f5      	b.n	40449c <_dtoa_r+0x5e4>
  4044b0:	4b05      	ldr	r3, [pc, #20]	; (4044c8 <_dtoa_r+0x610>)
  4044b2:	f7fe fc45 	bl	402d40 <__aeabi_dmul>
  4044b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4044ba:	e7bc      	b.n	404436 <_dtoa_r+0x57e>
  4044bc:	00406170 	.word	0x00406170
  4044c0:	00406148 	.word	0x00406148
  4044c4:	3ff00000 	.word	0x3ff00000
  4044c8:	40240000 	.word	0x40240000
  4044cc:	401c0000 	.word	0x401c0000
  4044d0:	40140000 	.word	0x40140000
  4044d4:	3fe00000 	.word	0x3fe00000
  4044d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4044dc:	9d06      	ldr	r5, [sp, #24]
  4044de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4044e2:	4630      	mov	r0, r6
  4044e4:	4639      	mov	r1, r7
  4044e6:	f7fe fd55 	bl	402f94 <__aeabi_ddiv>
  4044ea:	f7fe fec3 	bl	403274 <__aeabi_d2iz>
  4044ee:	4680      	mov	r8, r0
  4044f0:	f7fe fbc0 	bl	402c74 <__aeabi_i2d>
  4044f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4044f8:	f7fe fc22 	bl	402d40 <__aeabi_dmul>
  4044fc:	4602      	mov	r2, r0
  4044fe:	460b      	mov	r3, r1
  404500:	4630      	mov	r0, r6
  404502:	4639      	mov	r1, r7
  404504:	f108 0630 	add.w	r6, r8, #48	; 0x30
  404508:	f7fe fa66 	bl	4029d8 <__aeabi_dsub>
  40450c:	f805 6b01 	strb.w	r6, [r5], #1
  404510:	9e06      	ldr	r6, [sp, #24]
  404512:	1bae      	subs	r6, r5, r6
  404514:	45b1      	cmp	r9, r6
  404516:	4602      	mov	r2, r0
  404518:	460b      	mov	r3, r1
  40451a:	d138      	bne.n	40458e <_dtoa_r+0x6d6>
  40451c:	f7fe fa5e 	bl	4029dc <__adddf3>
  404520:	4606      	mov	r6, r0
  404522:	460f      	mov	r7, r1
  404524:	4602      	mov	r2, r0
  404526:	460b      	mov	r3, r1
  404528:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40452c:	f7fe fe7a 	bl	403224 <__aeabi_dcmplt>
  404530:	b9c8      	cbnz	r0, 404566 <_dtoa_r+0x6ae>
  404532:	4632      	mov	r2, r6
  404534:	463b      	mov	r3, r7
  404536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40453a:	f7fe fe69 	bl	403210 <__aeabi_dcmpeq>
  40453e:	b110      	cbz	r0, 404546 <_dtoa_r+0x68e>
  404540:	f018 0f01 	tst.w	r8, #1
  404544:	d10f      	bne.n	404566 <_dtoa_r+0x6ae>
  404546:	4651      	mov	r1, sl
  404548:	4620      	mov	r0, r4
  40454a:	f000 fd05 	bl	404f58 <_Bfree>
  40454e:	2300      	movs	r3, #0
  404550:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404552:	702b      	strb	r3, [r5, #0]
  404554:	f10b 0301 	add.w	r3, fp, #1
  404558:	6013      	str	r3, [r2, #0]
  40455a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40455c:	2b00      	cmp	r3, #0
  40455e:	f43f acf0 	beq.w	403f42 <_dtoa_r+0x8a>
  404562:	601d      	str	r5, [r3, #0]
  404564:	e4ed      	b.n	403f42 <_dtoa_r+0x8a>
  404566:	465f      	mov	r7, fp
  404568:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40456c:	2a39      	cmp	r2, #57	; 0x39
  40456e:	f105 33ff 	add.w	r3, r5, #4294967295
  404572:	d106      	bne.n	404582 <_dtoa_r+0x6ca>
  404574:	9a06      	ldr	r2, [sp, #24]
  404576:	429a      	cmp	r2, r3
  404578:	d107      	bne.n	40458a <_dtoa_r+0x6d2>
  40457a:	2330      	movs	r3, #48	; 0x30
  40457c:	7013      	strb	r3, [r2, #0]
  40457e:	3701      	adds	r7, #1
  404580:	4613      	mov	r3, r2
  404582:	781a      	ldrb	r2, [r3, #0]
  404584:	3201      	adds	r2, #1
  404586:	701a      	strb	r2, [r3, #0]
  404588:	e78e      	b.n	4044a8 <_dtoa_r+0x5f0>
  40458a:	461d      	mov	r5, r3
  40458c:	e7ec      	b.n	404568 <_dtoa_r+0x6b0>
  40458e:	2200      	movs	r2, #0
  404590:	4bb4      	ldr	r3, [pc, #720]	; (404864 <_dtoa_r+0x9ac>)
  404592:	f7fe fbd5 	bl	402d40 <__aeabi_dmul>
  404596:	2200      	movs	r2, #0
  404598:	2300      	movs	r3, #0
  40459a:	4606      	mov	r6, r0
  40459c:	460f      	mov	r7, r1
  40459e:	f7fe fe37 	bl	403210 <__aeabi_dcmpeq>
  4045a2:	2800      	cmp	r0, #0
  4045a4:	d09b      	beq.n	4044de <_dtoa_r+0x626>
  4045a6:	e7ce      	b.n	404546 <_dtoa_r+0x68e>
  4045a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4045aa:	2a00      	cmp	r2, #0
  4045ac:	f000 8129 	beq.w	404802 <_dtoa_r+0x94a>
  4045b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4045b2:	2a01      	cmp	r2, #1
  4045b4:	f300 810e 	bgt.w	4047d4 <_dtoa_r+0x91c>
  4045b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4045ba:	2a00      	cmp	r2, #0
  4045bc:	f000 8106 	beq.w	4047cc <_dtoa_r+0x914>
  4045c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4045c4:	9e08      	ldr	r6, [sp, #32]
  4045c6:	4645      	mov	r5, r8
  4045c8:	9a07      	ldr	r2, [sp, #28]
  4045ca:	2101      	movs	r1, #1
  4045cc:	441a      	add	r2, r3
  4045ce:	4620      	mov	r0, r4
  4045d0:	4498      	add	r8, r3
  4045d2:	9207      	str	r2, [sp, #28]
  4045d4:	f000 fd60 	bl	405098 <__i2b>
  4045d8:	4607      	mov	r7, r0
  4045da:	2d00      	cmp	r5, #0
  4045dc:	dd0b      	ble.n	4045f6 <_dtoa_r+0x73e>
  4045de:	9b07      	ldr	r3, [sp, #28]
  4045e0:	2b00      	cmp	r3, #0
  4045e2:	dd08      	ble.n	4045f6 <_dtoa_r+0x73e>
  4045e4:	42ab      	cmp	r3, r5
  4045e6:	9a07      	ldr	r2, [sp, #28]
  4045e8:	bfa8      	it	ge
  4045ea:	462b      	movge	r3, r5
  4045ec:	eba8 0803 	sub.w	r8, r8, r3
  4045f0:	1aed      	subs	r5, r5, r3
  4045f2:	1ad3      	subs	r3, r2, r3
  4045f4:	9307      	str	r3, [sp, #28]
  4045f6:	9b08      	ldr	r3, [sp, #32]
  4045f8:	b1fb      	cbz	r3, 40463a <_dtoa_r+0x782>
  4045fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4045fc:	2b00      	cmp	r3, #0
  4045fe:	f000 8104 	beq.w	40480a <_dtoa_r+0x952>
  404602:	2e00      	cmp	r6, #0
  404604:	dd11      	ble.n	40462a <_dtoa_r+0x772>
  404606:	4639      	mov	r1, r7
  404608:	4632      	mov	r2, r6
  40460a:	4620      	mov	r0, r4
  40460c:	f000 fdda 	bl	4051c4 <__pow5mult>
  404610:	4652      	mov	r2, sl
  404612:	4601      	mov	r1, r0
  404614:	4607      	mov	r7, r0
  404616:	4620      	mov	r0, r4
  404618:	f000 fd47 	bl	4050aa <__multiply>
  40461c:	4651      	mov	r1, sl
  40461e:	900a      	str	r0, [sp, #40]	; 0x28
  404620:	4620      	mov	r0, r4
  404622:	f000 fc99 	bl	404f58 <_Bfree>
  404626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404628:	469a      	mov	sl, r3
  40462a:	9b08      	ldr	r3, [sp, #32]
  40462c:	1b9a      	subs	r2, r3, r6
  40462e:	d004      	beq.n	40463a <_dtoa_r+0x782>
  404630:	4651      	mov	r1, sl
  404632:	4620      	mov	r0, r4
  404634:	f000 fdc6 	bl	4051c4 <__pow5mult>
  404638:	4682      	mov	sl, r0
  40463a:	2101      	movs	r1, #1
  40463c:	4620      	mov	r0, r4
  40463e:	f000 fd2b 	bl	405098 <__i2b>
  404642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404644:	2b00      	cmp	r3, #0
  404646:	4606      	mov	r6, r0
  404648:	f340 80e1 	ble.w	40480e <_dtoa_r+0x956>
  40464c:	461a      	mov	r2, r3
  40464e:	4601      	mov	r1, r0
  404650:	4620      	mov	r0, r4
  404652:	f000 fdb7 	bl	4051c4 <__pow5mult>
  404656:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404658:	2b01      	cmp	r3, #1
  40465a:	4606      	mov	r6, r0
  40465c:	f340 80da 	ble.w	404814 <_dtoa_r+0x95c>
  404660:	2300      	movs	r3, #0
  404662:	9308      	str	r3, [sp, #32]
  404664:	6933      	ldr	r3, [r6, #16]
  404666:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  40466a:	6918      	ldr	r0, [r3, #16]
  40466c:	f000 fcc6 	bl	404ffc <__hi0bits>
  404670:	f1c0 0020 	rsb	r0, r0, #32
  404674:	9b07      	ldr	r3, [sp, #28]
  404676:	4418      	add	r0, r3
  404678:	f010 001f 	ands.w	r0, r0, #31
  40467c:	f000 80f0 	beq.w	404860 <_dtoa_r+0x9a8>
  404680:	f1c0 0320 	rsb	r3, r0, #32
  404684:	2b04      	cmp	r3, #4
  404686:	f340 80e2 	ble.w	40484e <_dtoa_r+0x996>
  40468a:	9b07      	ldr	r3, [sp, #28]
  40468c:	f1c0 001c 	rsb	r0, r0, #28
  404690:	4480      	add	r8, r0
  404692:	4405      	add	r5, r0
  404694:	4403      	add	r3, r0
  404696:	9307      	str	r3, [sp, #28]
  404698:	f1b8 0f00 	cmp.w	r8, #0
  40469c:	dd05      	ble.n	4046aa <_dtoa_r+0x7f2>
  40469e:	4651      	mov	r1, sl
  4046a0:	4642      	mov	r2, r8
  4046a2:	4620      	mov	r0, r4
  4046a4:	f000 fddc 	bl	405260 <__lshift>
  4046a8:	4682      	mov	sl, r0
  4046aa:	9b07      	ldr	r3, [sp, #28]
  4046ac:	2b00      	cmp	r3, #0
  4046ae:	dd05      	ble.n	4046bc <_dtoa_r+0x804>
  4046b0:	4631      	mov	r1, r6
  4046b2:	461a      	mov	r2, r3
  4046b4:	4620      	mov	r0, r4
  4046b6:	f000 fdd3 	bl	405260 <__lshift>
  4046ba:	4606      	mov	r6, r0
  4046bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4046be:	2b00      	cmp	r3, #0
  4046c0:	f000 80d2 	beq.w	404868 <_dtoa_r+0x9b0>
  4046c4:	4631      	mov	r1, r6
  4046c6:	4650      	mov	r0, sl
  4046c8:	f000 fe1b 	bl	405302 <__mcmp>
  4046cc:	2800      	cmp	r0, #0
  4046ce:	f280 80cb 	bge.w	404868 <_dtoa_r+0x9b0>
  4046d2:	2300      	movs	r3, #0
  4046d4:	4651      	mov	r1, sl
  4046d6:	220a      	movs	r2, #10
  4046d8:	4620      	mov	r0, r4
  4046da:	f000 fc54 	bl	404f86 <__multadd>
  4046de:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4046e0:	f10b 3bff 	add.w	fp, fp, #4294967295
  4046e4:	4682      	mov	sl, r0
  4046e6:	2b00      	cmp	r3, #0
  4046e8:	f000 81aa 	beq.w	404a40 <_dtoa_r+0xb88>
  4046ec:	2300      	movs	r3, #0
  4046ee:	4639      	mov	r1, r7
  4046f0:	220a      	movs	r2, #10
  4046f2:	4620      	mov	r0, r4
  4046f4:	f000 fc47 	bl	404f86 <__multadd>
  4046f8:	9b04      	ldr	r3, [sp, #16]
  4046fa:	2b00      	cmp	r3, #0
  4046fc:	4607      	mov	r7, r0
  4046fe:	dc03      	bgt.n	404708 <_dtoa_r+0x850>
  404700:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404702:	2b02      	cmp	r3, #2
  404704:	f300 80b8 	bgt.w	404878 <_dtoa_r+0x9c0>
  404708:	2d00      	cmp	r5, #0
  40470a:	dd05      	ble.n	404718 <_dtoa_r+0x860>
  40470c:	4639      	mov	r1, r7
  40470e:	462a      	mov	r2, r5
  404710:	4620      	mov	r0, r4
  404712:	f000 fda5 	bl	405260 <__lshift>
  404716:	4607      	mov	r7, r0
  404718:	9b08      	ldr	r3, [sp, #32]
  40471a:	2b00      	cmp	r3, #0
  40471c:	f000 8110 	beq.w	404940 <_dtoa_r+0xa88>
  404720:	6879      	ldr	r1, [r7, #4]
  404722:	4620      	mov	r0, r4
  404724:	f000 fbe4 	bl	404ef0 <_Balloc>
  404728:	693a      	ldr	r2, [r7, #16]
  40472a:	3202      	adds	r2, #2
  40472c:	4605      	mov	r5, r0
  40472e:	0092      	lsls	r2, r2, #2
  404730:	f107 010c 	add.w	r1, r7, #12
  404734:	300c      	adds	r0, #12
  404736:	f7fe fde9 	bl	40330c <memcpy>
  40473a:	2201      	movs	r2, #1
  40473c:	4629      	mov	r1, r5
  40473e:	4620      	mov	r0, r4
  404740:	f000 fd8e 	bl	405260 <__lshift>
  404744:	9b02      	ldr	r3, [sp, #8]
  404746:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40474a:	9707      	str	r7, [sp, #28]
  40474c:	f003 0301 	and.w	r3, r3, #1
  404750:	4607      	mov	r7, r0
  404752:	9308      	str	r3, [sp, #32]
  404754:	4631      	mov	r1, r6
  404756:	4650      	mov	r0, sl
  404758:	f7ff fb20 	bl	403d9c <quorem>
  40475c:	9907      	ldr	r1, [sp, #28]
  40475e:	4605      	mov	r5, r0
  404760:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404764:	4650      	mov	r0, sl
  404766:	f000 fdcc 	bl	405302 <__mcmp>
  40476a:	463a      	mov	r2, r7
  40476c:	9002      	str	r0, [sp, #8]
  40476e:	4631      	mov	r1, r6
  404770:	4620      	mov	r0, r4
  404772:	f000 fde0 	bl	405336 <__mdiff>
  404776:	68c3      	ldr	r3, [r0, #12]
  404778:	4602      	mov	r2, r0
  40477a:	2b00      	cmp	r3, #0
  40477c:	f040 80e2 	bne.w	404944 <_dtoa_r+0xa8c>
  404780:	4601      	mov	r1, r0
  404782:	9009      	str	r0, [sp, #36]	; 0x24
  404784:	4650      	mov	r0, sl
  404786:	f000 fdbc 	bl	405302 <__mcmp>
  40478a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40478c:	4603      	mov	r3, r0
  40478e:	4611      	mov	r1, r2
  404790:	4620      	mov	r0, r4
  404792:	9309      	str	r3, [sp, #36]	; 0x24
  404794:	f000 fbe0 	bl	404f58 <_Bfree>
  404798:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40479a:	2b00      	cmp	r3, #0
  40479c:	f040 80d4 	bne.w	404948 <_dtoa_r+0xa90>
  4047a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4047a2:	2a00      	cmp	r2, #0
  4047a4:	f040 80d0 	bne.w	404948 <_dtoa_r+0xa90>
  4047a8:	9a08      	ldr	r2, [sp, #32]
  4047aa:	2a00      	cmp	r2, #0
  4047ac:	f040 80cc 	bne.w	404948 <_dtoa_r+0xa90>
  4047b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4047b4:	f000 80e8 	beq.w	404988 <_dtoa_r+0xad0>
  4047b8:	9b02      	ldr	r3, [sp, #8]
  4047ba:	2b00      	cmp	r3, #0
  4047bc:	dd01      	ble.n	4047c2 <_dtoa_r+0x90a>
  4047be:	f105 0931 	add.w	r9, r5, #49	; 0x31
  4047c2:	f108 0501 	add.w	r5, r8, #1
  4047c6:	f888 9000 	strb.w	r9, [r8]
  4047ca:	e06a      	b.n	4048a2 <_dtoa_r+0x9ea>
  4047cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4047ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4047d2:	e6f7      	b.n	4045c4 <_dtoa_r+0x70c>
  4047d4:	9b08      	ldr	r3, [sp, #32]
  4047d6:	f109 36ff 	add.w	r6, r9, #4294967295
  4047da:	42b3      	cmp	r3, r6
  4047dc:	bfbf      	itttt	lt
  4047de:	9b08      	ldrlt	r3, [sp, #32]
  4047e0:	9608      	strlt	r6, [sp, #32]
  4047e2:	1af2      	sublt	r2, r6, r3
  4047e4:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  4047e6:	bfb7      	itett	lt
  4047e8:	189b      	addlt	r3, r3, r2
  4047ea:	1b9e      	subge	r6, r3, r6
  4047ec:	930c      	strlt	r3, [sp, #48]	; 0x30
  4047ee:	2600      	movlt	r6, #0
  4047f0:	f1b9 0f00 	cmp.w	r9, #0
  4047f4:	bfb9      	ittee	lt
  4047f6:	eba8 0509 	sublt.w	r5, r8, r9
  4047fa:	2300      	movlt	r3, #0
  4047fc:	4645      	movge	r5, r8
  4047fe:	464b      	movge	r3, r9
  404800:	e6e2      	b.n	4045c8 <_dtoa_r+0x710>
  404802:	9e08      	ldr	r6, [sp, #32]
  404804:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404806:	4645      	mov	r5, r8
  404808:	e6e7      	b.n	4045da <_dtoa_r+0x722>
  40480a:	9a08      	ldr	r2, [sp, #32]
  40480c:	e710      	b.n	404630 <_dtoa_r+0x778>
  40480e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404810:	2b01      	cmp	r3, #1
  404812:	dc18      	bgt.n	404846 <_dtoa_r+0x98e>
  404814:	9b02      	ldr	r3, [sp, #8]
  404816:	b9b3      	cbnz	r3, 404846 <_dtoa_r+0x98e>
  404818:	9b03      	ldr	r3, [sp, #12]
  40481a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40481e:	b9a3      	cbnz	r3, 40484a <_dtoa_r+0x992>
  404820:	9b03      	ldr	r3, [sp, #12]
  404822:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  404826:	0d1b      	lsrs	r3, r3, #20
  404828:	051b      	lsls	r3, r3, #20
  40482a:	b12b      	cbz	r3, 404838 <_dtoa_r+0x980>
  40482c:	9b07      	ldr	r3, [sp, #28]
  40482e:	3301      	adds	r3, #1
  404830:	9307      	str	r3, [sp, #28]
  404832:	f108 0801 	add.w	r8, r8, #1
  404836:	2301      	movs	r3, #1
  404838:	9308      	str	r3, [sp, #32]
  40483a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40483c:	2b00      	cmp	r3, #0
  40483e:	f47f af11 	bne.w	404664 <_dtoa_r+0x7ac>
  404842:	2001      	movs	r0, #1
  404844:	e716      	b.n	404674 <_dtoa_r+0x7bc>
  404846:	2300      	movs	r3, #0
  404848:	e7f6      	b.n	404838 <_dtoa_r+0x980>
  40484a:	9b02      	ldr	r3, [sp, #8]
  40484c:	e7f4      	b.n	404838 <_dtoa_r+0x980>
  40484e:	f43f af23 	beq.w	404698 <_dtoa_r+0x7e0>
  404852:	9a07      	ldr	r2, [sp, #28]
  404854:	331c      	adds	r3, #28
  404856:	441a      	add	r2, r3
  404858:	4498      	add	r8, r3
  40485a:	441d      	add	r5, r3
  40485c:	4613      	mov	r3, r2
  40485e:	e71a      	b.n	404696 <_dtoa_r+0x7de>
  404860:	4603      	mov	r3, r0
  404862:	e7f6      	b.n	404852 <_dtoa_r+0x99a>
  404864:	40240000 	.word	0x40240000
  404868:	f1b9 0f00 	cmp.w	r9, #0
  40486c:	dc33      	bgt.n	4048d6 <_dtoa_r+0xa1e>
  40486e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404870:	2b02      	cmp	r3, #2
  404872:	dd30      	ble.n	4048d6 <_dtoa_r+0xa1e>
  404874:	f8cd 9010 	str.w	r9, [sp, #16]
  404878:	9b04      	ldr	r3, [sp, #16]
  40487a:	b963      	cbnz	r3, 404896 <_dtoa_r+0x9de>
  40487c:	4631      	mov	r1, r6
  40487e:	2205      	movs	r2, #5
  404880:	4620      	mov	r0, r4
  404882:	f000 fb80 	bl	404f86 <__multadd>
  404886:	4601      	mov	r1, r0
  404888:	4606      	mov	r6, r0
  40488a:	4650      	mov	r0, sl
  40488c:	f000 fd39 	bl	405302 <__mcmp>
  404890:	2800      	cmp	r0, #0
  404892:	f73f ad5c 	bgt.w	40434e <_dtoa_r+0x496>
  404896:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404898:	9d06      	ldr	r5, [sp, #24]
  40489a:	ea6f 0b03 	mvn.w	fp, r3
  40489e:	2300      	movs	r3, #0
  4048a0:	9307      	str	r3, [sp, #28]
  4048a2:	4631      	mov	r1, r6
  4048a4:	4620      	mov	r0, r4
  4048a6:	f000 fb57 	bl	404f58 <_Bfree>
  4048aa:	2f00      	cmp	r7, #0
  4048ac:	f43f ae4b 	beq.w	404546 <_dtoa_r+0x68e>
  4048b0:	9b07      	ldr	r3, [sp, #28]
  4048b2:	b12b      	cbz	r3, 4048c0 <_dtoa_r+0xa08>
  4048b4:	42bb      	cmp	r3, r7
  4048b6:	d003      	beq.n	4048c0 <_dtoa_r+0xa08>
  4048b8:	4619      	mov	r1, r3
  4048ba:	4620      	mov	r0, r4
  4048bc:	f000 fb4c 	bl	404f58 <_Bfree>
  4048c0:	4639      	mov	r1, r7
  4048c2:	4620      	mov	r0, r4
  4048c4:	f000 fb48 	bl	404f58 <_Bfree>
  4048c8:	e63d      	b.n	404546 <_dtoa_r+0x68e>
  4048ca:	2600      	movs	r6, #0
  4048cc:	4637      	mov	r7, r6
  4048ce:	e7e2      	b.n	404896 <_dtoa_r+0x9de>
  4048d0:	46bb      	mov	fp, r7
  4048d2:	4637      	mov	r7, r6
  4048d4:	e53b      	b.n	40434e <_dtoa_r+0x496>
  4048d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4048d8:	f8cd 9010 	str.w	r9, [sp, #16]
  4048dc:	2b00      	cmp	r3, #0
  4048de:	f47f af13 	bne.w	404708 <_dtoa_r+0x850>
  4048e2:	9d06      	ldr	r5, [sp, #24]
  4048e4:	4631      	mov	r1, r6
  4048e6:	4650      	mov	r0, sl
  4048e8:	f7ff fa58 	bl	403d9c <quorem>
  4048ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4048f0:	f805 9b01 	strb.w	r9, [r5], #1
  4048f4:	9b06      	ldr	r3, [sp, #24]
  4048f6:	9a04      	ldr	r2, [sp, #16]
  4048f8:	1aeb      	subs	r3, r5, r3
  4048fa:	429a      	cmp	r2, r3
  4048fc:	f300 8083 	bgt.w	404a06 <_dtoa_r+0xb4e>
  404900:	9b06      	ldr	r3, [sp, #24]
  404902:	2a01      	cmp	r2, #1
  404904:	bfac      	ite	ge
  404906:	189b      	addge	r3, r3, r2
  404908:	3301      	addlt	r3, #1
  40490a:	4698      	mov	r8, r3
  40490c:	2300      	movs	r3, #0
  40490e:	9307      	str	r3, [sp, #28]
  404910:	4651      	mov	r1, sl
  404912:	2201      	movs	r2, #1
  404914:	4620      	mov	r0, r4
  404916:	f000 fca3 	bl	405260 <__lshift>
  40491a:	4631      	mov	r1, r6
  40491c:	4682      	mov	sl, r0
  40491e:	f000 fcf0 	bl	405302 <__mcmp>
  404922:	2800      	cmp	r0, #0
  404924:	dc35      	bgt.n	404992 <_dtoa_r+0xada>
  404926:	d102      	bne.n	40492e <_dtoa_r+0xa76>
  404928:	f019 0f01 	tst.w	r9, #1
  40492c:	d131      	bne.n	404992 <_dtoa_r+0xada>
  40492e:	4645      	mov	r5, r8
  404930:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404934:	2b30      	cmp	r3, #48	; 0x30
  404936:	f105 32ff 	add.w	r2, r5, #4294967295
  40493a:	d1b2      	bne.n	4048a2 <_dtoa_r+0x9ea>
  40493c:	4615      	mov	r5, r2
  40493e:	e7f7      	b.n	404930 <_dtoa_r+0xa78>
  404940:	4638      	mov	r0, r7
  404942:	e6ff      	b.n	404744 <_dtoa_r+0x88c>
  404944:	2301      	movs	r3, #1
  404946:	e722      	b.n	40478e <_dtoa_r+0x8d6>
  404948:	9a02      	ldr	r2, [sp, #8]
  40494a:	2a00      	cmp	r2, #0
  40494c:	db04      	blt.n	404958 <_dtoa_r+0xaa0>
  40494e:	d129      	bne.n	4049a4 <_dtoa_r+0xaec>
  404950:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404952:	bb3a      	cbnz	r2, 4049a4 <_dtoa_r+0xaec>
  404954:	9a08      	ldr	r2, [sp, #32]
  404956:	bb2a      	cbnz	r2, 4049a4 <_dtoa_r+0xaec>
  404958:	2b00      	cmp	r3, #0
  40495a:	f77f af32 	ble.w	4047c2 <_dtoa_r+0x90a>
  40495e:	4651      	mov	r1, sl
  404960:	2201      	movs	r2, #1
  404962:	4620      	mov	r0, r4
  404964:	f000 fc7c 	bl	405260 <__lshift>
  404968:	4631      	mov	r1, r6
  40496a:	4682      	mov	sl, r0
  40496c:	f000 fcc9 	bl	405302 <__mcmp>
  404970:	2800      	cmp	r0, #0
  404972:	dc05      	bgt.n	404980 <_dtoa_r+0xac8>
  404974:	f47f af25 	bne.w	4047c2 <_dtoa_r+0x90a>
  404978:	f019 0f01 	tst.w	r9, #1
  40497c:	f43f af21 	beq.w	4047c2 <_dtoa_r+0x90a>
  404980:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404984:	f47f af1b 	bne.w	4047be <_dtoa_r+0x906>
  404988:	2339      	movs	r3, #57	; 0x39
  40498a:	f888 3000 	strb.w	r3, [r8]
  40498e:	f108 0801 	add.w	r8, r8, #1
  404992:	4645      	mov	r5, r8
  404994:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404998:	2b39      	cmp	r3, #57	; 0x39
  40499a:	f105 32ff 	add.w	r2, r5, #4294967295
  40499e:	d03a      	beq.n	404a16 <_dtoa_r+0xb5e>
  4049a0:	3301      	adds	r3, #1
  4049a2:	e03f      	b.n	404a24 <_dtoa_r+0xb6c>
  4049a4:	2b00      	cmp	r3, #0
  4049a6:	f108 0501 	add.w	r5, r8, #1
  4049aa:	dd05      	ble.n	4049b8 <_dtoa_r+0xb00>
  4049ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4049b0:	d0ea      	beq.n	404988 <_dtoa_r+0xad0>
  4049b2:	f109 0901 	add.w	r9, r9, #1
  4049b6:	e706      	b.n	4047c6 <_dtoa_r+0x90e>
  4049b8:	9b06      	ldr	r3, [sp, #24]
  4049ba:	9a04      	ldr	r2, [sp, #16]
  4049bc:	f805 9c01 	strb.w	r9, [r5, #-1]
  4049c0:	1aeb      	subs	r3, r5, r3
  4049c2:	4293      	cmp	r3, r2
  4049c4:	46a8      	mov	r8, r5
  4049c6:	d0a3      	beq.n	404910 <_dtoa_r+0xa58>
  4049c8:	4651      	mov	r1, sl
  4049ca:	2300      	movs	r3, #0
  4049cc:	220a      	movs	r2, #10
  4049ce:	4620      	mov	r0, r4
  4049d0:	f000 fad9 	bl	404f86 <__multadd>
  4049d4:	9b07      	ldr	r3, [sp, #28]
  4049d6:	9907      	ldr	r1, [sp, #28]
  4049d8:	42bb      	cmp	r3, r7
  4049da:	4682      	mov	sl, r0
  4049dc:	f04f 0300 	mov.w	r3, #0
  4049e0:	f04f 020a 	mov.w	r2, #10
  4049e4:	4620      	mov	r0, r4
  4049e6:	d104      	bne.n	4049f2 <_dtoa_r+0xb3a>
  4049e8:	f000 facd 	bl	404f86 <__multadd>
  4049ec:	9007      	str	r0, [sp, #28]
  4049ee:	4607      	mov	r7, r0
  4049f0:	e6b0      	b.n	404754 <_dtoa_r+0x89c>
  4049f2:	f000 fac8 	bl	404f86 <__multadd>
  4049f6:	2300      	movs	r3, #0
  4049f8:	9007      	str	r0, [sp, #28]
  4049fa:	220a      	movs	r2, #10
  4049fc:	4639      	mov	r1, r7
  4049fe:	4620      	mov	r0, r4
  404a00:	f000 fac1 	bl	404f86 <__multadd>
  404a04:	e7f3      	b.n	4049ee <_dtoa_r+0xb36>
  404a06:	4651      	mov	r1, sl
  404a08:	2300      	movs	r3, #0
  404a0a:	220a      	movs	r2, #10
  404a0c:	4620      	mov	r0, r4
  404a0e:	f000 faba 	bl	404f86 <__multadd>
  404a12:	4682      	mov	sl, r0
  404a14:	e766      	b.n	4048e4 <_dtoa_r+0xa2c>
  404a16:	9b06      	ldr	r3, [sp, #24]
  404a18:	4293      	cmp	r3, r2
  404a1a:	d105      	bne.n	404a28 <_dtoa_r+0xb70>
  404a1c:	9a06      	ldr	r2, [sp, #24]
  404a1e:	f10b 0b01 	add.w	fp, fp, #1
  404a22:	2331      	movs	r3, #49	; 0x31
  404a24:	7013      	strb	r3, [r2, #0]
  404a26:	e73c      	b.n	4048a2 <_dtoa_r+0x9ea>
  404a28:	4615      	mov	r5, r2
  404a2a:	e7b3      	b.n	404994 <_dtoa_r+0xadc>
  404a2c:	4b09      	ldr	r3, [pc, #36]	; (404a54 <_dtoa_r+0xb9c>)
  404a2e:	f7ff baa5 	b.w	403f7c <_dtoa_r+0xc4>
  404a32:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404a34:	2b00      	cmp	r3, #0
  404a36:	f47f aa7f 	bne.w	403f38 <_dtoa_r+0x80>
  404a3a:	4b07      	ldr	r3, [pc, #28]	; (404a58 <_dtoa_r+0xba0>)
  404a3c:	f7ff ba9e 	b.w	403f7c <_dtoa_r+0xc4>
  404a40:	9b04      	ldr	r3, [sp, #16]
  404a42:	2b00      	cmp	r3, #0
  404a44:	f73f af4d 	bgt.w	4048e2 <_dtoa_r+0xa2a>
  404a48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404a4a:	2b02      	cmp	r3, #2
  404a4c:	f77f af49 	ble.w	4048e2 <_dtoa_r+0xa2a>
  404a50:	e712      	b.n	404878 <_dtoa_r+0x9c0>
  404a52:	bf00      	nop
  404a54:	004060b0 	.word	0x004060b0
  404a58:	004060d4 	.word	0x004060d4

00404a5c <__sflush_r>:
  404a5c:	898a      	ldrh	r2, [r1, #12]
  404a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404a62:	4605      	mov	r5, r0
  404a64:	0710      	lsls	r0, r2, #28
  404a66:	460c      	mov	r4, r1
  404a68:	d45a      	bmi.n	404b20 <__sflush_r+0xc4>
  404a6a:	684b      	ldr	r3, [r1, #4]
  404a6c:	2b00      	cmp	r3, #0
  404a6e:	dc05      	bgt.n	404a7c <__sflush_r+0x20>
  404a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  404a72:	2b00      	cmp	r3, #0
  404a74:	dc02      	bgt.n	404a7c <__sflush_r+0x20>
  404a76:	2000      	movs	r0, #0
  404a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404a7e:	2e00      	cmp	r6, #0
  404a80:	d0f9      	beq.n	404a76 <__sflush_r+0x1a>
  404a82:	2300      	movs	r3, #0
  404a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  404a88:	682f      	ldr	r7, [r5, #0]
  404a8a:	602b      	str	r3, [r5, #0]
  404a8c:	d033      	beq.n	404af6 <__sflush_r+0x9a>
  404a8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  404a90:	89a3      	ldrh	r3, [r4, #12]
  404a92:	075a      	lsls	r2, r3, #29
  404a94:	d505      	bpl.n	404aa2 <__sflush_r+0x46>
  404a96:	6863      	ldr	r3, [r4, #4]
  404a98:	1ac0      	subs	r0, r0, r3
  404a9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  404a9c:	b10b      	cbz	r3, 404aa2 <__sflush_r+0x46>
  404a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  404aa0:	1ac0      	subs	r0, r0, r3
  404aa2:	2300      	movs	r3, #0
  404aa4:	4602      	mov	r2, r0
  404aa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404aa8:	6a21      	ldr	r1, [r4, #32]
  404aaa:	4628      	mov	r0, r5
  404aac:	47b0      	blx	r6
  404aae:	1c43      	adds	r3, r0, #1
  404ab0:	89a3      	ldrh	r3, [r4, #12]
  404ab2:	d106      	bne.n	404ac2 <__sflush_r+0x66>
  404ab4:	6829      	ldr	r1, [r5, #0]
  404ab6:	291d      	cmp	r1, #29
  404ab8:	d84b      	bhi.n	404b52 <__sflush_r+0xf6>
  404aba:	4a2b      	ldr	r2, [pc, #172]	; (404b68 <__sflush_r+0x10c>)
  404abc:	40ca      	lsrs	r2, r1
  404abe:	07d6      	lsls	r6, r2, #31
  404ac0:	d547      	bpl.n	404b52 <__sflush_r+0xf6>
  404ac2:	2200      	movs	r2, #0
  404ac4:	6062      	str	r2, [r4, #4]
  404ac6:	04d9      	lsls	r1, r3, #19
  404ac8:	6922      	ldr	r2, [r4, #16]
  404aca:	6022      	str	r2, [r4, #0]
  404acc:	d504      	bpl.n	404ad8 <__sflush_r+0x7c>
  404ace:	1c42      	adds	r2, r0, #1
  404ad0:	d101      	bne.n	404ad6 <__sflush_r+0x7a>
  404ad2:	682b      	ldr	r3, [r5, #0]
  404ad4:	b903      	cbnz	r3, 404ad8 <__sflush_r+0x7c>
  404ad6:	6560      	str	r0, [r4, #84]	; 0x54
  404ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  404ada:	602f      	str	r7, [r5, #0]
  404adc:	2900      	cmp	r1, #0
  404ade:	d0ca      	beq.n	404a76 <__sflush_r+0x1a>
  404ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404ae4:	4299      	cmp	r1, r3
  404ae6:	d002      	beq.n	404aee <__sflush_r+0x92>
  404ae8:	4628      	mov	r0, r5
  404aea:	f000 fcdf 	bl	4054ac <_free_r>
  404aee:	2000      	movs	r0, #0
  404af0:	6360      	str	r0, [r4, #52]	; 0x34
  404af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404af6:	6a21      	ldr	r1, [r4, #32]
  404af8:	2301      	movs	r3, #1
  404afa:	4628      	mov	r0, r5
  404afc:	47b0      	blx	r6
  404afe:	1c41      	adds	r1, r0, #1
  404b00:	d1c6      	bne.n	404a90 <__sflush_r+0x34>
  404b02:	682b      	ldr	r3, [r5, #0]
  404b04:	2b00      	cmp	r3, #0
  404b06:	d0c3      	beq.n	404a90 <__sflush_r+0x34>
  404b08:	2b1d      	cmp	r3, #29
  404b0a:	d001      	beq.n	404b10 <__sflush_r+0xb4>
  404b0c:	2b16      	cmp	r3, #22
  404b0e:	d101      	bne.n	404b14 <__sflush_r+0xb8>
  404b10:	602f      	str	r7, [r5, #0]
  404b12:	e7b0      	b.n	404a76 <__sflush_r+0x1a>
  404b14:	89a3      	ldrh	r3, [r4, #12]
  404b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b1a:	81a3      	strh	r3, [r4, #12]
  404b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b20:	690f      	ldr	r7, [r1, #16]
  404b22:	2f00      	cmp	r7, #0
  404b24:	d0a7      	beq.n	404a76 <__sflush_r+0x1a>
  404b26:	0793      	lsls	r3, r2, #30
  404b28:	680e      	ldr	r6, [r1, #0]
  404b2a:	bf08      	it	eq
  404b2c:	694b      	ldreq	r3, [r1, #20]
  404b2e:	600f      	str	r7, [r1, #0]
  404b30:	bf18      	it	ne
  404b32:	2300      	movne	r3, #0
  404b34:	eba6 0807 	sub.w	r8, r6, r7
  404b38:	608b      	str	r3, [r1, #8]
  404b3a:	f1b8 0f00 	cmp.w	r8, #0
  404b3e:	dd9a      	ble.n	404a76 <__sflush_r+0x1a>
  404b40:	4643      	mov	r3, r8
  404b42:	463a      	mov	r2, r7
  404b44:	6a21      	ldr	r1, [r4, #32]
  404b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  404b48:	4628      	mov	r0, r5
  404b4a:	47b0      	blx	r6
  404b4c:	2800      	cmp	r0, #0
  404b4e:	dc07      	bgt.n	404b60 <__sflush_r+0x104>
  404b50:	89a3      	ldrh	r3, [r4, #12]
  404b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b56:	81a3      	strh	r3, [r4, #12]
  404b58:	f04f 30ff 	mov.w	r0, #4294967295
  404b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b60:	4407      	add	r7, r0
  404b62:	eba8 0800 	sub.w	r8, r8, r0
  404b66:	e7e8      	b.n	404b3a <__sflush_r+0xde>
  404b68:	20400001 	.word	0x20400001

00404b6c <_fflush_r>:
  404b6c:	b538      	push	{r3, r4, r5, lr}
  404b6e:	690b      	ldr	r3, [r1, #16]
  404b70:	4605      	mov	r5, r0
  404b72:	460c      	mov	r4, r1
  404b74:	b1db      	cbz	r3, 404bae <_fflush_r+0x42>
  404b76:	b118      	cbz	r0, 404b80 <_fflush_r+0x14>
  404b78:	6983      	ldr	r3, [r0, #24]
  404b7a:	b90b      	cbnz	r3, 404b80 <_fflush_r+0x14>
  404b7c:	f000 f860 	bl	404c40 <__sinit>
  404b80:	4b0c      	ldr	r3, [pc, #48]	; (404bb4 <_fflush_r+0x48>)
  404b82:	429c      	cmp	r4, r3
  404b84:	d109      	bne.n	404b9a <_fflush_r+0x2e>
  404b86:	686c      	ldr	r4, [r5, #4]
  404b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b8c:	b17b      	cbz	r3, 404bae <_fflush_r+0x42>
  404b8e:	4621      	mov	r1, r4
  404b90:	4628      	mov	r0, r5
  404b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404b96:	f7ff bf61 	b.w	404a5c <__sflush_r>
  404b9a:	4b07      	ldr	r3, [pc, #28]	; (404bb8 <_fflush_r+0x4c>)
  404b9c:	429c      	cmp	r4, r3
  404b9e:	d101      	bne.n	404ba4 <_fflush_r+0x38>
  404ba0:	68ac      	ldr	r4, [r5, #8]
  404ba2:	e7f1      	b.n	404b88 <_fflush_r+0x1c>
  404ba4:	4b05      	ldr	r3, [pc, #20]	; (404bbc <_fflush_r+0x50>)
  404ba6:	429c      	cmp	r4, r3
  404ba8:	bf08      	it	eq
  404baa:	68ec      	ldreq	r4, [r5, #12]
  404bac:	e7ec      	b.n	404b88 <_fflush_r+0x1c>
  404bae:	2000      	movs	r0, #0
  404bb0:	bd38      	pop	{r3, r4, r5, pc}
  404bb2:	bf00      	nop
  404bb4:	00406104 	.word	0x00406104
  404bb8:	00406124 	.word	0x00406124
  404bbc:	004060e4 	.word	0x004060e4

00404bc0 <_cleanup_r>:
  404bc0:	4901      	ldr	r1, [pc, #4]	; (404bc8 <_cleanup_r+0x8>)
  404bc2:	f000 b8a9 	b.w	404d18 <_fwalk_reent>
  404bc6:	bf00      	nop
  404bc8:	00404b6d 	.word	0x00404b6d

00404bcc <std.isra.0>:
  404bcc:	2300      	movs	r3, #0
  404bce:	b510      	push	{r4, lr}
  404bd0:	4604      	mov	r4, r0
  404bd2:	6003      	str	r3, [r0, #0]
  404bd4:	6043      	str	r3, [r0, #4]
  404bd6:	6083      	str	r3, [r0, #8]
  404bd8:	8181      	strh	r1, [r0, #12]
  404bda:	6643      	str	r3, [r0, #100]	; 0x64
  404bdc:	81c2      	strh	r2, [r0, #14]
  404bde:	6103      	str	r3, [r0, #16]
  404be0:	6143      	str	r3, [r0, #20]
  404be2:	6183      	str	r3, [r0, #24]
  404be4:	4619      	mov	r1, r3
  404be6:	2208      	movs	r2, #8
  404be8:	305c      	adds	r0, #92	; 0x5c
  404bea:	f7fe fb9a 	bl	403322 <memset>
  404bee:	4b05      	ldr	r3, [pc, #20]	; (404c04 <std.isra.0+0x38>)
  404bf0:	6263      	str	r3, [r4, #36]	; 0x24
  404bf2:	4b05      	ldr	r3, [pc, #20]	; (404c08 <std.isra.0+0x3c>)
  404bf4:	62a3      	str	r3, [r4, #40]	; 0x28
  404bf6:	4b05      	ldr	r3, [pc, #20]	; (404c0c <std.isra.0+0x40>)
  404bf8:	62e3      	str	r3, [r4, #44]	; 0x2c
  404bfa:	4b05      	ldr	r3, [pc, #20]	; (404c10 <std.isra.0+0x44>)
  404bfc:	6224      	str	r4, [r4, #32]
  404bfe:	6323      	str	r3, [r4, #48]	; 0x30
  404c00:	bd10      	pop	{r4, pc}
  404c02:	bf00      	nop
  404c04:	004058a1 	.word	0x004058a1
  404c08:	004058c3 	.word	0x004058c3
  404c0c:	004058fb 	.word	0x004058fb
  404c10:	0040591f 	.word	0x0040591f

00404c14 <__sfmoreglue>:
  404c14:	b570      	push	{r4, r5, r6, lr}
  404c16:	1e4a      	subs	r2, r1, #1
  404c18:	2568      	movs	r5, #104	; 0x68
  404c1a:	4355      	muls	r5, r2
  404c1c:	460e      	mov	r6, r1
  404c1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  404c22:	f000 fc91 	bl	405548 <_malloc_r>
  404c26:	4604      	mov	r4, r0
  404c28:	b140      	cbz	r0, 404c3c <__sfmoreglue+0x28>
  404c2a:	2100      	movs	r1, #0
  404c2c:	e880 0042 	stmia.w	r0, {r1, r6}
  404c30:	300c      	adds	r0, #12
  404c32:	60a0      	str	r0, [r4, #8]
  404c34:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404c38:	f7fe fb73 	bl	403322 <memset>
  404c3c:	4620      	mov	r0, r4
  404c3e:	bd70      	pop	{r4, r5, r6, pc}

00404c40 <__sinit>:
  404c40:	6983      	ldr	r3, [r0, #24]
  404c42:	b510      	push	{r4, lr}
  404c44:	4604      	mov	r4, r0
  404c46:	bb33      	cbnz	r3, 404c96 <__sinit+0x56>
  404c48:	6483      	str	r3, [r0, #72]	; 0x48
  404c4a:	64c3      	str	r3, [r0, #76]	; 0x4c
  404c4c:	6503      	str	r3, [r0, #80]	; 0x50
  404c4e:	4b12      	ldr	r3, [pc, #72]	; (404c98 <__sinit+0x58>)
  404c50:	4a12      	ldr	r2, [pc, #72]	; (404c9c <__sinit+0x5c>)
  404c52:	681b      	ldr	r3, [r3, #0]
  404c54:	6282      	str	r2, [r0, #40]	; 0x28
  404c56:	4298      	cmp	r0, r3
  404c58:	bf04      	itt	eq
  404c5a:	2301      	moveq	r3, #1
  404c5c:	6183      	streq	r3, [r0, #24]
  404c5e:	f000 f81f 	bl	404ca0 <__sfp>
  404c62:	6060      	str	r0, [r4, #4]
  404c64:	4620      	mov	r0, r4
  404c66:	f000 f81b 	bl	404ca0 <__sfp>
  404c6a:	60a0      	str	r0, [r4, #8]
  404c6c:	4620      	mov	r0, r4
  404c6e:	f000 f817 	bl	404ca0 <__sfp>
  404c72:	2200      	movs	r2, #0
  404c74:	60e0      	str	r0, [r4, #12]
  404c76:	2104      	movs	r1, #4
  404c78:	6860      	ldr	r0, [r4, #4]
  404c7a:	f7ff ffa7 	bl	404bcc <std.isra.0>
  404c7e:	2201      	movs	r2, #1
  404c80:	2109      	movs	r1, #9
  404c82:	68a0      	ldr	r0, [r4, #8]
  404c84:	f7ff ffa2 	bl	404bcc <std.isra.0>
  404c88:	2202      	movs	r2, #2
  404c8a:	2112      	movs	r1, #18
  404c8c:	68e0      	ldr	r0, [r4, #12]
  404c8e:	f7ff ff9d 	bl	404bcc <std.isra.0>
  404c92:	2301      	movs	r3, #1
  404c94:	61a3      	str	r3, [r4, #24]
  404c96:	bd10      	pop	{r4, pc}
  404c98:	0040609c 	.word	0x0040609c
  404c9c:	00404bc1 	.word	0x00404bc1

00404ca0 <__sfp>:
  404ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404ca2:	4b1c      	ldr	r3, [pc, #112]	; (404d14 <__sfp+0x74>)
  404ca4:	681e      	ldr	r6, [r3, #0]
  404ca6:	69b3      	ldr	r3, [r6, #24]
  404ca8:	4607      	mov	r7, r0
  404caa:	b913      	cbnz	r3, 404cb2 <__sfp+0x12>
  404cac:	4630      	mov	r0, r6
  404cae:	f7ff ffc7 	bl	404c40 <__sinit>
  404cb2:	3648      	adds	r6, #72	; 0x48
  404cb4:	68b4      	ldr	r4, [r6, #8]
  404cb6:	6873      	ldr	r3, [r6, #4]
  404cb8:	3b01      	subs	r3, #1
  404cba:	d503      	bpl.n	404cc4 <__sfp+0x24>
  404cbc:	6833      	ldr	r3, [r6, #0]
  404cbe:	b133      	cbz	r3, 404cce <__sfp+0x2e>
  404cc0:	6836      	ldr	r6, [r6, #0]
  404cc2:	e7f7      	b.n	404cb4 <__sfp+0x14>
  404cc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  404cc8:	b16d      	cbz	r5, 404ce6 <__sfp+0x46>
  404cca:	3468      	adds	r4, #104	; 0x68
  404ccc:	e7f4      	b.n	404cb8 <__sfp+0x18>
  404cce:	2104      	movs	r1, #4
  404cd0:	4638      	mov	r0, r7
  404cd2:	f7ff ff9f 	bl	404c14 <__sfmoreglue>
  404cd6:	6030      	str	r0, [r6, #0]
  404cd8:	2800      	cmp	r0, #0
  404cda:	d1f1      	bne.n	404cc0 <__sfp+0x20>
  404cdc:	230c      	movs	r3, #12
  404cde:	603b      	str	r3, [r7, #0]
  404ce0:	4604      	mov	r4, r0
  404ce2:	4620      	mov	r0, r4
  404ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ce6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404cea:	81e3      	strh	r3, [r4, #14]
  404cec:	2301      	movs	r3, #1
  404cee:	81a3      	strh	r3, [r4, #12]
  404cf0:	6665      	str	r5, [r4, #100]	; 0x64
  404cf2:	6025      	str	r5, [r4, #0]
  404cf4:	60a5      	str	r5, [r4, #8]
  404cf6:	6065      	str	r5, [r4, #4]
  404cf8:	6125      	str	r5, [r4, #16]
  404cfa:	6165      	str	r5, [r4, #20]
  404cfc:	61a5      	str	r5, [r4, #24]
  404cfe:	2208      	movs	r2, #8
  404d00:	4629      	mov	r1, r5
  404d02:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  404d06:	f7fe fb0c 	bl	403322 <memset>
  404d0a:	6365      	str	r5, [r4, #52]	; 0x34
  404d0c:	63a5      	str	r5, [r4, #56]	; 0x38
  404d0e:	64a5      	str	r5, [r4, #72]	; 0x48
  404d10:	64e5      	str	r5, [r4, #76]	; 0x4c
  404d12:	e7e6      	b.n	404ce2 <__sfp+0x42>
  404d14:	0040609c 	.word	0x0040609c

00404d18 <_fwalk_reent>:
  404d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404d1c:	4680      	mov	r8, r0
  404d1e:	4689      	mov	r9, r1
  404d20:	f100 0448 	add.w	r4, r0, #72	; 0x48
  404d24:	2600      	movs	r6, #0
  404d26:	b914      	cbnz	r4, 404d2e <_fwalk_reent+0x16>
  404d28:	4630      	mov	r0, r6
  404d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404d2e:	68a5      	ldr	r5, [r4, #8]
  404d30:	6867      	ldr	r7, [r4, #4]
  404d32:	3f01      	subs	r7, #1
  404d34:	d501      	bpl.n	404d3a <_fwalk_reent+0x22>
  404d36:	6824      	ldr	r4, [r4, #0]
  404d38:	e7f5      	b.n	404d26 <_fwalk_reent+0xe>
  404d3a:	89ab      	ldrh	r3, [r5, #12]
  404d3c:	2b01      	cmp	r3, #1
  404d3e:	d907      	bls.n	404d50 <_fwalk_reent+0x38>
  404d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  404d44:	3301      	adds	r3, #1
  404d46:	d003      	beq.n	404d50 <_fwalk_reent+0x38>
  404d48:	4629      	mov	r1, r5
  404d4a:	4640      	mov	r0, r8
  404d4c:	47c8      	blx	r9
  404d4e:	4306      	orrs	r6, r0
  404d50:	3568      	adds	r5, #104	; 0x68
  404d52:	e7ee      	b.n	404d32 <_fwalk_reent+0x1a>

00404d54 <_localeconv_r>:
  404d54:	4b04      	ldr	r3, [pc, #16]	; (404d68 <_localeconv_r+0x14>)
  404d56:	681b      	ldr	r3, [r3, #0]
  404d58:	6a18      	ldr	r0, [r3, #32]
  404d5a:	4b04      	ldr	r3, [pc, #16]	; (404d6c <_localeconv_r+0x18>)
  404d5c:	2800      	cmp	r0, #0
  404d5e:	bf08      	it	eq
  404d60:	4618      	moveq	r0, r3
  404d62:	30f0      	adds	r0, #240	; 0xf0
  404d64:	4770      	bx	lr
  404d66:	bf00      	nop
  404d68:	20400048 	.word	0x20400048
  404d6c:	204000ac 	.word	0x204000ac

00404d70 <__swhatbuf_r>:
  404d70:	b570      	push	{r4, r5, r6, lr}
  404d72:	460e      	mov	r6, r1
  404d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404d78:	2900      	cmp	r1, #0
  404d7a:	b090      	sub	sp, #64	; 0x40
  404d7c:	4614      	mov	r4, r2
  404d7e:	461d      	mov	r5, r3
  404d80:	da07      	bge.n	404d92 <__swhatbuf_r+0x22>
  404d82:	2300      	movs	r3, #0
  404d84:	602b      	str	r3, [r5, #0]
  404d86:	89b3      	ldrh	r3, [r6, #12]
  404d88:	061a      	lsls	r2, r3, #24
  404d8a:	d410      	bmi.n	404dae <__swhatbuf_r+0x3e>
  404d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404d90:	e00e      	b.n	404db0 <__swhatbuf_r+0x40>
  404d92:	aa01      	add	r2, sp, #4
  404d94:	f000 feaa 	bl	405aec <_fstat_r>
  404d98:	2800      	cmp	r0, #0
  404d9a:	dbf2      	blt.n	404d82 <__swhatbuf_r+0x12>
  404d9c:	9a02      	ldr	r2, [sp, #8]
  404d9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404da2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  404da6:	425a      	negs	r2, r3
  404da8:	415a      	adcs	r2, r3
  404daa:	602a      	str	r2, [r5, #0]
  404dac:	e7ee      	b.n	404d8c <__swhatbuf_r+0x1c>
  404dae:	2340      	movs	r3, #64	; 0x40
  404db0:	2000      	movs	r0, #0
  404db2:	6023      	str	r3, [r4, #0]
  404db4:	b010      	add	sp, #64	; 0x40
  404db6:	bd70      	pop	{r4, r5, r6, pc}

00404db8 <__smakebuf_r>:
  404db8:	898b      	ldrh	r3, [r1, #12]
  404dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  404dbc:	079d      	lsls	r5, r3, #30
  404dbe:	4606      	mov	r6, r0
  404dc0:	460c      	mov	r4, r1
  404dc2:	d507      	bpl.n	404dd4 <__smakebuf_r+0x1c>
  404dc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
  404dc8:	6023      	str	r3, [r4, #0]
  404dca:	6123      	str	r3, [r4, #16]
  404dcc:	2301      	movs	r3, #1
  404dce:	6163      	str	r3, [r4, #20]
  404dd0:	b002      	add	sp, #8
  404dd2:	bd70      	pop	{r4, r5, r6, pc}
  404dd4:	ab01      	add	r3, sp, #4
  404dd6:	466a      	mov	r2, sp
  404dd8:	f7ff ffca 	bl	404d70 <__swhatbuf_r>
  404ddc:	9900      	ldr	r1, [sp, #0]
  404dde:	4605      	mov	r5, r0
  404de0:	4630      	mov	r0, r6
  404de2:	f000 fbb1 	bl	405548 <_malloc_r>
  404de6:	b948      	cbnz	r0, 404dfc <__smakebuf_r+0x44>
  404de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404dec:	059a      	lsls	r2, r3, #22
  404dee:	d4ef      	bmi.n	404dd0 <__smakebuf_r+0x18>
  404df0:	f023 0303 	bic.w	r3, r3, #3
  404df4:	f043 0302 	orr.w	r3, r3, #2
  404df8:	81a3      	strh	r3, [r4, #12]
  404dfa:	e7e3      	b.n	404dc4 <__smakebuf_r+0xc>
  404dfc:	4b0d      	ldr	r3, [pc, #52]	; (404e34 <__smakebuf_r+0x7c>)
  404dfe:	62b3      	str	r3, [r6, #40]	; 0x28
  404e00:	89a3      	ldrh	r3, [r4, #12]
  404e02:	6020      	str	r0, [r4, #0]
  404e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404e08:	81a3      	strh	r3, [r4, #12]
  404e0a:	9b00      	ldr	r3, [sp, #0]
  404e0c:	6163      	str	r3, [r4, #20]
  404e0e:	9b01      	ldr	r3, [sp, #4]
  404e10:	6120      	str	r0, [r4, #16]
  404e12:	b15b      	cbz	r3, 404e2c <__smakebuf_r+0x74>
  404e14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404e18:	4630      	mov	r0, r6
  404e1a:	f000 fe79 	bl	405b10 <_isatty_r>
  404e1e:	b128      	cbz	r0, 404e2c <__smakebuf_r+0x74>
  404e20:	89a3      	ldrh	r3, [r4, #12]
  404e22:	f023 0303 	bic.w	r3, r3, #3
  404e26:	f043 0301 	orr.w	r3, r3, #1
  404e2a:	81a3      	strh	r3, [r4, #12]
  404e2c:	89a3      	ldrh	r3, [r4, #12]
  404e2e:	431d      	orrs	r5, r3
  404e30:	81a5      	strh	r5, [r4, #12]
  404e32:	e7cd      	b.n	404dd0 <__smakebuf_r+0x18>
  404e34:	00404bc1 	.word	0x00404bc1

00404e38 <malloc>:
  404e38:	4b02      	ldr	r3, [pc, #8]	; (404e44 <malloc+0xc>)
  404e3a:	4601      	mov	r1, r0
  404e3c:	6818      	ldr	r0, [r3, #0]
  404e3e:	f000 bb83 	b.w	405548 <_malloc_r>
  404e42:	bf00      	nop
  404e44:	20400048 	.word	0x20400048
	...

00404e50 <memchr>:
  404e50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404e54:	2a10      	cmp	r2, #16
  404e56:	db2b      	blt.n	404eb0 <memchr+0x60>
  404e58:	f010 0f07 	tst.w	r0, #7
  404e5c:	d008      	beq.n	404e70 <memchr+0x20>
  404e5e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404e62:	3a01      	subs	r2, #1
  404e64:	428b      	cmp	r3, r1
  404e66:	d02d      	beq.n	404ec4 <memchr+0x74>
  404e68:	f010 0f07 	tst.w	r0, #7
  404e6c:	b342      	cbz	r2, 404ec0 <memchr+0x70>
  404e6e:	d1f6      	bne.n	404e5e <memchr+0xe>
  404e70:	b4f0      	push	{r4, r5, r6, r7}
  404e72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404e76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404e7a:	f022 0407 	bic.w	r4, r2, #7
  404e7e:	f07f 0700 	mvns.w	r7, #0
  404e82:	2300      	movs	r3, #0
  404e84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404e88:	3c08      	subs	r4, #8
  404e8a:	ea85 0501 	eor.w	r5, r5, r1
  404e8e:	ea86 0601 	eor.w	r6, r6, r1
  404e92:	fa85 f547 	uadd8	r5, r5, r7
  404e96:	faa3 f587 	sel	r5, r3, r7
  404e9a:	fa86 f647 	uadd8	r6, r6, r7
  404e9e:	faa5 f687 	sel	r6, r5, r7
  404ea2:	b98e      	cbnz	r6, 404ec8 <memchr+0x78>
  404ea4:	d1ee      	bne.n	404e84 <memchr+0x34>
  404ea6:	bcf0      	pop	{r4, r5, r6, r7}
  404ea8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404eac:	f002 0207 	and.w	r2, r2, #7
  404eb0:	b132      	cbz	r2, 404ec0 <memchr+0x70>
  404eb2:	f810 3b01 	ldrb.w	r3, [r0], #1
  404eb6:	3a01      	subs	r2, #1
  404eb8:	ea83 0301 	eor.w	r3, r3, r1
  404ebc:	b113      	cbz	r3, 404ec4 <memchr+0x74>
  404ebe:	d1f8      	bne.n	404eb2 <memchr+0x62>
  404ec0:	2000      	movs	r0, #0
  404ec2:	4770      	bx	lr
  404ec4:	3801      	subs	r0, #1
  404ec6:	4770      	bx	lr
  404ec8:	2d00      	cmp	r5, #0
  404eca:	bf06      	itte	eq
  404ecc:	4635      	moveq	r5, r6
  404ece:	3803      	subeq	r0, #3
  404ed0:	3807      	subne	r0, #7
  404ed2:	f015 0f01 	tst.w	r5, #1
  404ed6:	d107      	bne.n	404ee8 <memchr+0x98>
  404ed8:	3001      	adds	r0, #1
  404eda:	f415 7f80 	tst.w	r5, #256	; 0x100
  404ede:	bf02      	ittt	eq
  404ee0:	3001      	addeq	r0, #1
  404ee2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404ee6:	3001      	addeq	r0, #1
  404ee8:	bcf0      	pop	{r4, r5, r6, r7}
  404eea:	3801      	subs	r0, #1
  404eec:	4770      	bx	lr
  404eee:	bf00      	nop

00404ef0 <_Balloc>:
  404ef0:	b570      	push	{r4, r5, r6, lr}
  404ef2:	6a45      	ldr	r5, [r0, #36]	; 0x24
  404ef4:	4604      	mov	r4, r0
  404ef6:	460e      	mov	r6, r1
  404ef8:	b93d      	cbnz	r5, 404f0a <_Balloc+0x1a>
  404efa:	2010      	movs	r0, #16
  404efc:	f7ff ff9c 	bl	404e38 <malloc>
  404f00:	6260      	str	r0, [r4, #36]	; 0x24
  404f02:	6045      	str	r5, [r0, #4]
  404f04:	6085      	str	r5, [r0, #8]
  404f06:	6005      	str	r5, [r0, #0]
  404f08:	60c5      	str	r5, [r0, #12]
  404f0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  404f0c:	68eb      	ldr	r3, [r5, #12]
  404f0e:	b183      	cbz	r3, 404f32 <_Balloc+0x42>
  404f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404f12:	68db      	ldr	r3, [r3, #12]
  404f14:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  404f18:	b9b8      	cbnz	r0, 404f4a <_Balloc+0x5a>
  404f1a:	2101      	movs	r1, #1
  404f1c:	fa01 f506 	lsl.w	r5, r1, r6
  404f20:	1d6a      	adds	r2, r5, #5
  404f22:	0092      	lsls	r2, r2, #2
  404f24:	4620      	mov	r0, r4
  404f26:	f000 fab3 	bl	405490 <_calloc_r>
  404f2a:	b160      	cbz	r0, 404f46 <_Balloc+0x56>
  404f2c:	6046      	str	r6, [r0, #4]
  404f2e:	6085      	str	r5, [r0, #8]
  404f30:	e00e      	b.n	404f50 <_Balloc+0x60>
  404f32:	2221      	movs	r2, #33	; 0x21
  404f34:	2104      	movs	r1, #4
  404f36:	4620      	mov	r0, r4
  404f38:	f000 faaa 	bl	405490 <_calloc_r>
  404f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404f3e:	60e8      	str	r0, [r5, #12]
  404f40:	68db      	ldr	r3, [r3, #12]
  404f42:	2b00      	cmp	r3, #0
  404f44:	d1e4      	bne.n	404f10 <_Balloc+0x20>
  404f46:	2000      	movs	r0, #0
  404f48:	bd70      	pop	{r4, r5, r6, pc}
  404f4a:	6802      	ldr	r2, [r0, #0]
  404f4c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  404f50:	2300      	movs	r3, #0
  404f52:	6103      	str	r3, [r0, #16]
  404f54:	60c3      	str	r3, [r0, #12]
  404f56:	bd70      	pop	{r4, r5, r6, pc}

00404f58 <_Bfree>:
  404f58:	b570      	push	{r4, r5, r6, lr}
  404f5a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  404f5c:	4606      	mov	r6, r0
  404f5e:	460d      	mov	r5, r1
  404f60:	b93c      	cbnz	r4, 404f72 <_Bfree+0x1a>
  404f62:	2010      	movs	r0, #16
  404f64:	f7ff ff68 	bl	404e38 <malloc>
  404f68:	6270      	str	r0, [r6, #36]	; 0x24
  404f6a:	6044      	str	r4, [r0, #4]
  404f6c:	6084      	str	r4, [r0, #8]
  404f6e:	6004      	str	r4, [r0, #0]
  404f70:	60c4      	str	r4, [r0, #12]
  404f72:	b13d      	cbz	r5, 404f84 <_Bfree+0x2c>
  404f74:	6a73      	ldr	r3, [r6, #36]	; 0x24
  404f76:	686a      	ldr	r2, [r5, #4]
  404f78:	68db      	ldr	r3, [r3, #12]
  404f7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404f7e:	6029      	str	r1, [r5, #0]
  404f80:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  404f84:	bd70      	pop	{r4, r5, r6, pc}

00404f86 <__multadd>:
  404f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f8a:	690d      	ldr	r5, [r1, #16]
  404f8c:	461f      	mov	r7, r3
  404f8e:	4606      	mov	r6, r0
  404f90:	460c      	mov	r4, r1
  404f92:	f101 0e14 	add.w	lr, r1, #20
  404f96:	2300      	movs	r3, #0
  404f98:	f8de 0000 	ldr.w	r0, [lr]
  404f9c:	b281      	uxth	r1, r0
  404f9e:	fb02 7101 	mla	r1, r2, r1, r7
  404fa2:	0c0f      	lsrs	r7, r1, #16
  404fa4:	0c00      	lsrs	r0, r0, #16
  404fa6:	fb02 7000 	mla	r0, r2, r0, r7
  404faa:	b289      	uxth	r1, r1
  404fac:	3301      	adds	r3, #1
  404fae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  404fb2:	429d      	cmp	r5, r3
  404fb4:	ea4f 4710 	mov.w	r7, r0, lsr #16
  404fb8:	f84e 1b04 	str.w	r1, [lr], #4
  404fbc:	dcec      	bgt.n	404f98 <__multadd+0x12>
  404fbe:	b1d7      	cbz	r7, 404ff6 <__multadd+0x70>
  404fc0:	68a3      	ldr	r3, [r4, #8]
  404fc2:	429d      	cmp	r5, r3
  404fc4:	db12      	blt.n	404fec <__multadd+0x66>
  404fc6:	6861      	ldr	r1, [r4, #4]
  404fc8:	4630      	mov	r0, r6
  404fca:	3101      	adds	r1, #1
  404fcc:	f7ff ff90 	bl	404ef0 <_Balloc>
  404fd0:	6922      	ldr	r2, [r4, #16]
  404fd2:	3202      	adds	r2, #2
  404fd4:	f104 010c 	add.w	r1, r4, #12
  404fd8:	4680      	mov	r8, r0
  404fda:	0092      	lsls	r2, r2, #2
  404fdc:	300c      	adds	r0, #12
  404fde:	f7fe f995 	bl	40330c <memcpy>
  404fe2:	4621      	mov	r1, r4
  404fe4:	4630      	mov	r0, r6
  404fe6:	f7ff ffb7 	bl	404f58 <_Bfree>
  404fea:	4644      	mov	r4, r8
  404fec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  404ff0:	3501      	adds	r5, #1
  404ff2:	615f      	str	r7, [r3, #20]
  404ff4:	6125      	str	r5, [r4, #16]
  404ff6:	4620      	mov	r0, r4
  404ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404ffc <__hi0bits>:
  404ffc:	0c02      	lsrs	r2, r0, #16
  404ffe:	0412      	lsls	r2, r2, #16
  405000:	4603      	mov	r3, r0
  405002:	b9b2      	cbnz	r2, 405032 <__hi0bits+0x36>
  405004:	0403      	lsls	r3, r0, #16
  405006:	2010      	movs	r0, #16
  405008:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40500c:	bf04      	itt	eq
  40500e:	021b      	lsleq	r3, r3, #8
  405010:	3008      	addeq	r0, #8
  405012:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405016:	bf04      	itt	eq
  405018:	011b      	lsleq	r3, r3, #4
  40501a:	3004      	addeq	r0, #4
  40501c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  405020:	bf04      	itt	eq
  405022:	009b      	lsleq	r3, r3, #2
  405024:	3002      	addeq	r0, #2
  405026:	2b00      	cmp	r3, #0
  405028:	db06      	blt.n	405038 <__hi0bits+0x3c>
  40502a:	005b      	lsls	r3, r3, #1
  40502c:	d503      	bpl.n	405036 <__hi0bits+0x3a>
  40502e:	3001      	adds	r0, #1
  405030:	4770      	bx	lr
  405032:	2000      	movs	r0, #0
  405034:	e7e8      	b.n	405008 <__hi0bits+0xc>
  405036:	2020      	movs	r0, #32
  405038:	4770      	bx	lr

0040503a <__lo0bits>:
  40503a:	6803      	ldr	r3, [r0, #0]
  40503c:	f013 0207 	ands.w	r2, r3, #7
  405040:	4601      	mov	r1, r0
  405042:	d00b      	beq.n	40505c <__lo0bits+0x22>
  405044:	07da      	lsls	r2, r3, #31
  405046:	d423      	bmi.n	405090 <__lo0bits+0x56>
  405048:	0798      	lsls	r0, r3, #30
  40504a:	bf49      	itett	mi
  40504c:	085b      	lsrmi	r3, r3, #1
  40504e:	089b      	lsrpl	r3, r3, #2
  405050:	2001      	movmi	r0, #1
  405052:	600b      	strmi	r3, [r1, #0]
  405054:	bf5c      	itt	pl
  405056:	600b      	strpl	r3, [r1, #0]
  405058:	2002      	movpl	r0, #2
  40505a:	4770      	bx	lr
  40505c:	b298      	uxth	r0, r3
  40505e:	b9a8      	cbnz	r0, 40508c <__lo0bits+0x52>
  405060:	0c1b      	lsrs	r3, r3, #16
  405062:	2010      	movs	r0, #16
  405064:	f013 0fff 	tst.w	r3, #255	; 0xff
  405068:	bf04      	itt	eq
  40506a:	0a1b      	lsreq	r3, r3, #8
  40506c:	3008      	addeq	r0, #8
  40506e:	071a      	lsls	r2, r3, #28
  405070:	bf04      	itt	eq
  405072:	091b      	lsreq	r3, r3, #4
  405074:	3004      	addeq	r0, #4
  405076:	079a      	lsls	r2, r3, #30
  405078:	bf04      	itt	eq
  40507a:	089b      	lsreq	r3, r3, #2
  40507c:	3002      	addeq	r0, #2
  40507e:	07da      	lsls	r2, r3, #31
  405080:	d402      	bmi.n	405088 <__lo0bits+0x4e>
  405082:	085b      	lsrs	r3, r3, #1
  405084:	d006      	beq.n	405094 <__lo0bits+0x5a>
  405086:	3001      	adds	r0, #1
  405088:	600b      	str	r3, [r1, #0]
  40508a:	4770      	bx	lr
  40508c:	4610      	mov	r0, r2
  40508e:	e7e9      	b.n	405064 <__lo0bits+0x2a>
  405090:	2000      	movs	r0, #0
  405092:	4770      	bx	lr
  405094:	2020      	movs	r0, #32
  405096:	4770      	bx	lr

00405098 <__i2b>:
  405098:	b510      	push	{r4, lr}
  40509a:	460c      	mov	r4, r1
  40509c:	2101      	movs	r1, #1
  40509e:	f7ff ff27 	bl	404ef0 <_Balloc>
  4050a2:	2201      	movs	r2, #1
  4050a4:	6144      	str	r4, [r0, #20]
  4050a6:	6102      	str	r2, [r0, #16]
  4050a8:	bd10      	pop	{r4, pc}

004050aa <__multiply>:
  4050aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050ae:	4614      	mov	r4, r2
  4050b0:	690a      	ldr	r2, [r1, #16]
  4050b2:	6923      	ldr	r3, [r4, #16]
  4050b4:	429a      	cmp	r2, r3
  4050b6:	bfb8      	it	lt
  4050b8:	460b      	movlt	r3, r1
  4050ba:	4689      	mov	r9, r1
  4050bc:	bfbc      	itt	lt
  4050be:	46a1      	movlt	r9, r4
  4050c0:	461c      	movlt	r4, r3
  4050c2:	f8d9 7010 	ldr.w	r7, [r9, #16]
  4050c6:	f8d4 a010 	ldr.w	sl, [r4, #16]
  4050ca:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4050ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4050d2:	eb07 060a 	add.w	r6, r7, sl
  4050d6:	429e      	cmp	r6, r3
  4050d8:	bfc8      	it	gt
  4050da:	3101      	addgt	r1, #1
  4050dc:	f7ff ff08 	bl	404ef0 <_Balloc>
  4050e0:	f100 0514 	add.w	r5, r0, #20
  4050e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  4050e8:	462b      	mov	r3, r5
  4050ea:	2200      	movs	r2, #0
  4050ec:	4543      	cmp	r3, r8
  4050ee:	d316      	bcc.n	40511e <__multiply+0x74>
  4050f0:	f104 0214 	add.w	r2, r4, #20
  4050f4:	f109 0114 	add.w	r1, r9, #20
  4050f8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  4050fc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  405100:	9301      	str	r3, [sp, #4]
  405102:	9c01      	ldr	r4, [sp, #4]
  405104:	4294      	cmp	r4, r2
  405106:	4613      	mov	r3, r2
  405108:	d80c      	bhi.n	405124 <__multiply+0x7a>
  40510a:	2e00      	cmp	r6, #0
  40510c:	dd03      	ble.n	405116 <__multiply+0x6c>
  40510e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  405112:	2b00      	cmp	r3, #0
  405114:	d054      	beq.n	4051c0 <__multiply+0x116>
  405116:	6106      	str	r6, [r0, #16]
  405118:	b003      	add	sp, #12
  40511a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40511e:	f843 2b04 	str.w	r2, [r3], #4
  405122:	e7e3      	b.n	4050ec <__multiply+0x42>
  405124:	f8b3 a000 	ldrh.w	sl, [r3]
  405128:	3204      	adds	r2, #4
  40512a:	f1ba 0f00 	cmp.w	sl, #0
  40512e:	d020      	beq.n	405172 <__multiply+0xc8>
  405130:	46ae      	mov	lr, r5
  405132:	4689      	mov	r9, r1
  405134:	f04f 0c00 	mov.w	ip, #0
  405138:	f859 4b04 	ldr.w	r4, [r9], #4
  40513c:	f8be b000 	ldrh.w	fp, [lr]
  405140:	b2a3      	uxth	r3, r4
  405142:	fb0a b303 	mla	r3, sl, r3, fp
  405146:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  40514a:	f8de 4000 	ldr.w	r4, [lr]
  40514e:	4463      	add	r3, ip
  405150:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  405154:	fb0a c40b 	mla	r4, sl, fp, ip
  405158:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40515c:	b29b      	uxth	r3, r3
  40515e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  405162:	454f      	cmp	r7, r9
  405164:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  405168:	f84e 3b04 	str.w	r3, [lr], #4
  40516c:	d8e4      	bhi.n	405138 <__multiply+0x8e>
  40516e:	f8ce c000 	str.w	ip, [lr]
  405172:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  405176:	f1b9 0f00 	cmp.w	r9, #0
  40517a:	d01f      	beq.n	4051bc <__multiply+0x112>
  40517c:	682b      	ldr	r3, [r5, #0]
  40517e:	46ae      	mov	lr, r5
  405180:	468c      	mov	ip, r1
  405182:	f04f 0a00 	mov.w	sl, #0
  405186:	f8bc 4000 	ldrh.w	r4, [ip]
  40518a:	f8be b002 	ldrh.w	fp, [lr, #2]
  40518e:	fb09 b404 	mla	r4, r9, r4, fp
  405192:	44a2      	add	sl, r4
  405194:	b29b      	uxth	r3, r3
  405196:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  40519a:	f84e 3b04 	str.w	r3, [lr], #4
  40519e:	f85c 3b04 	ldr.w	r3, [ip], #4
  4051a2:	f8be 4000 	ldrh.w	r4, [lr]
  4051a6:	0c1b      	lsrs	r3, r3, #16
  4051a8:	fb09 4303 	mla	r3, r9, r3, r4
  4051ac:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  4051b0:	4567      	cmp	r7, ip
  4051b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4051b6:	d8e6      	bhi.n	405186 <__multiply+0xdc>
  4051b8:	f8ce 3000 	str.w	r3, [lr]
  4051bc:	3504      	adds	r5, #4
  4051be:	e7a0      	b.n	405102 <__multiply+0x58>
  4051c0:	3e01      	subs	r6, #1
  4051c2:	e7a2      	b.n	40510a <__multiply+0x60>

004051c4 <__pow5mult>:
  4051c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4051c8:	4615      	mov	r5, r2
  4051ca:	f012 0203 	ands.w	r2, r2, #3
  4051ce:	4606      	mov	r6, r0
  4051d0:	460f      	mov	r7, r1
  4051d2:	d007      	beq.n	4051e4 <__pow5mult+0x20>
  4051d4:	3a01      	subs	r2, #1
  4051d6:	4c21      	ldr	r4, [pc, #132]	; (40525c <__pow5mult+0x98>)
  4051d8:	2300      	movs	r3, #0
  4051da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  4051de:	f7ff fed2 	bl	404f86 <__multadd>
  4051e2:	4607      	mov	r7, r0
  4051e4:	10ad      	asrs	r5, r5, #2
  4051e6:	d035      	beq.n	405254 <__pow5mult+0x90>
  4051e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
  4051ea:	b93c      	cbnz	r4, 4051fc <__pow5mult+0x38>
  4051ec:	2010      	movs	r0, #16
  4051ee:	f7ff fe23 	bl	404e38 <malloc>
  4051f2:	6270      	str	r0, [r6, #36]	; 0x24
  4051f4:	6044      	str	r4, [r0, #4]
  4051f6:	6084      	str	r4, [r0, #8]
  4051f8:	6004      	str	r4, [r0, #0]
  4051fa:	60c4      	str	r4, [r0, #12]
  4051fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  405200:	f8d8 4008 	ldr.w	r4, [r8, #8]
  405204:	b94c      	cbnz	r4, 40521a <__pow5mult+0x56>
  405206:	f240 2171 	movw	r1, #625	; 0x271
  40520a:	4630      	mov	r0, r6
  40520c:	f7ff ff44 	bl	405098 <__i2b>
  405210:	2300      	movs	r3, #0
  405212:	f8c8 0008 	str.w	r0, [r8, #8]
  405216:	4604      	mov	r4, r0
  405218:	6003      	str	r3, [r0, #0]
  40521a:	f04f 0800 	mov.w	r8, #0
  40521e:	07eb      	lsls	r3, r5, #31
  405220:	d50a      	bpl.n	405238 <__pow5mult+0x74>
  405222:	4639      	mov	r1, r7
  405224:	4622      	mov	r2, r4
  405226:	4630      	mov	r0, r6
  405228:	f7ff ff3f 	bl	4050aa <__multiply>
  40522c:	4639      	mov	r1, r7
  40522e:	4681      	mov	r9, r0
  405230:	4630      	mov	r0, r6
  405232:	f7ff fe91 	bl	404f58 <_Bfree>
  405236:	464f      	mov	r7, r9
  405238:	106d      	asrs	r5, r5, #1
  40523a:	d00b      	beq.n	405254 <__pow5mult+0x90>
  40523c:	6820      	ldr	r0, [r4, #0]
  40523e:	b938      	cbnz	r0, 405250 <__pow5mult+0x8c>
  405240:	4622      	mov	r2, r4
  405242:	4621      	mov	r1, r4
  405244:	4630      	mov	r0, r6
  405246:	f7ff ff30 	bl	4050aa <__multiply>
  40524a:	6020      	str	r0, [r4, #0]
  40524c:	f8c0 8000 	str.w	r8, [r0]
  405250:	4604      	mov	r4, r0
  405252:	e7e4      	b.n	40521e <__pow5mult+0x5a>
  405254:	4638      	mov	r0, r7
  405256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40525a:	bf00      	nop
  40525c:	00406238 	.word	0x00406238

00405260 <__lshift>:
  405260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405264:	460c      	mov	r4, r1
  405266:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40526a:	6923      	ldr	r3, [r4, #16]
  40526c:	6849      	ldr	r1, [r1, #4]
  40526e:	eb0a 0903 	add.w	r9, sl, r3
  405272:	68a3      	ldr	r3, [r4, #8]
  405274:	4607      	mov	r7, r0
  405276:	4616      	mov	r6, r2
  405278:	f109 0501 	add.w	r5, r9, #1
  40527c:	42ab      	cmp	r3, r5
  40527e:	db31      	blt.n	4052e4 <__lshift+0x84>
  405280:	4638      	mov	r0, r7
  405282:	f7ff fe35 	bl	404ef0 <_Balloc>
  405286:	2200      	movs	r2, #0
  405288:	4680      	mov	r8, r0
  40528a:	f100 0314 	add.w	r3, r0, #20
  40528e:	4611      	mov	r1, r2
  405290:	4552      	cmp	r2, sl
  405292:	db2a      	blt.n	4052ea <__lshift+0x8a>
  405294:	6920      	ldr	r0, [r4, #16]
  405296:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  40529a:	f104 0114 	add.w	r1, r4, #20
  40529e:	f016 021f 	ands.w	r2, r6, #31
  4052a2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  4052a6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  4052aa:	d022      	beq.n	4052f2 <__lshift+0x92>
  4052ac:	f1c2 0c20 	rsb	ip, r2, #32
  4052b0:	2000      	movs	r0, #0
  4052b2:	680e      	ldr	r6, [r1, #0]
  4052b4:	4096      	lsls	r6, r2
  4052b6:	4330      	orrs	r0, r6
  4052b8:	f843 0b04 	str.w	r0, [r3], #4
  4052bc:	f851 0b04 	ldr.w	r0, [r1], #4
  4052c0:	458e      	cmp	lr, r1
  4052c2:	fa20 f00c 	lsr.w	r0, r0, ip
  4052c6:	d8f4      	bhi.n	4052b2 <__lshift+0x52>
  4052c8:	6018      	str	r0, [r3, #0]
  4052ca:	b108      	cbz	r0, 4052d0 <__lshift+0x70>
  4052cc:	f109 0502 	add.w	r5, r9, #2
  4052d0:	3d01      	subs	r5, #1
  4052d2:	4638      	mov	r0, r7
  4052d4:	f8c8 5010 	str.w	r5, [r8, #16]
  4052d8:	4621      	mov	r1, r4
  4052da:	f7ff fe3d 	bl	404f58 <_Bfree>
  4052de:	4640      	mov	r0, r8
  4052e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4052e4:	3101      	adds	r1, #1
  4052e6:	005b      	lsls	r3, r3, #1
  4052e8:	e7c8      	b.n	40527c <__lshift+0x1c>
  4052ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4052ee:	3201      	adds	r2, #1
  4052f0:	e7ce      	b.n	405290 <__lshift+0x30>
  4052f2:	3b04      	subs	r3, #4
  4052f4:	f851 2b04 	ldr.w	r2, [r1], #4
  4052f8:	f843 2f04 	str.w	r2, [r3, #4]!
  4052fc:	458e      	cmp	lr, r1
  4052fe:	d8f9      	bhi.n	4052f4 <__lshift+0x94>
  405300:	e7e6      	b.n	4052d0 <__lshift+0x70>

00405302 <__mcmp>:
  405302:	6903      	ldr	r3, [r0, #16]
  405304:	690a      	ldr	r2, [r1, #16]
  405306:	1a9b      	subs	r3, r3, r2
  405308:	b530      	push	{r4, r5, lr}
  40530a:	d10c      	bne.n	405326 <__mcmp+0x24>
  40530c:	0092      	lsls	r2, r2, #2
  40530e:	3014      	adds	r0, #20
  405310:	3114      	adds	r1, #20
  405312:	1884      	adds	r4, r0, r2
  405314:	4411      	add	r1, r2
  405316:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40531a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40531e:	4295      	cmp	r5, r2
  405320:	d003      	beq.n	40532a <__mcmp+0x28>
  405322:	d305      	bcc.n	405330 <__mcmp+0x2e>
  405324:	2301      	movs	r3, #1
  405326:	4618      	mov	r0, r3
  405328:	bd30      	pop	{r4, r5, pc}
  40532a:	42a0      	cmp	r0, r4
  40532c:	d3f3      	bcc.n	405316 <__mcmp+0x14>
  40532e:	e7fa      	b.n	405326 <__mcmp+0x24>
  405330:	f04f 33ff 	mov.w	r3, #4294967295
  405334:	e7f7      	b.n	405326 <__mcmp+0x24>

00405336 <__mdiff>:
  405336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40533a:	460d      	mov	r5, r1
  40533c:	4607      	mov	r7, r0
  40533e:	4611      	mov	r1, r2
  405340:	4628      	mov	r0, r5
  405342:	4614      	mov	r4, r2
  405344:	f7ff ffdd 	bl	405302 <__mcmp>
  405348:	1e06      	subs	r6, r0, #0
  40534a:	d108      	bne.n	40535e <__mdiff+0x28>
  40534c:	4631      	mov	r1, r6
  40534e:	4638      	mov	r0, r7
  405350:	f7ff fdce 	bl	404ef0 <_Balloc>
  405354:	2301      	movs	r3, #1
  405356:	6103      	str	r3, [r0, #16]
  405358:	6146      	str	r6, [r0, #20]
  40535a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40535e:	bfa4      	itt	ge
  405360:	4623      	movge	r3, r4
  405362:	462c      	movge	r4, r5
  405364:	4638      	mov	r0, r7
  405366:	6861      	ldr	r1, [r4, #4]
  405368:	bfa6      	itte	ge
  40536a:	461d      	movge	r5, r3
  40536c:	2600      	movge	r6, #0
  40536e:	2601      	movlt	r6, #1
  405370:	f7ff fdbe 	bl	404ef0 <_Balloc>
  405374:	692b      	ldr	r3, [r5, #16]
  405376:	60c6      	str	r6, [r0, #12]
  405378:	6926      	ldr	r6, [r4, #16]
  40537a:	f105 0914 	add.w	r9, r5, #20
  40537e:	f104 0214 	add.w	r2, r4, #20
  405382:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  405386:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40538a:	f100 0514 	add.w	r5, r0, #20
  40538e:	f04f 0c00 	mov.w	ip, #0
  405392:	f852 ab04 	ldr.w	sl, [r2], #4
  405396:	f859 4b04 	ldr.w	r4, [r9], #4
  40539a:	fa1c f18a 	uxtah	r1, ip, sl
  40539e:	b2a3      	uxth	r3, r4
  4053a0:	1ac9      	subs	r1, r1, r3
  4053a2:	0c23      	lsrs	r3, r4, #16
  4053a4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  4053a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
  4053ac:	b289      	uxth	r1, r1
  4053ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4053b2:	45c8      	cmp	r8, r9
  4053b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  4053b8:	4696      	mov	lr, r2
  4053ba:	f845 3b04 	str.w	r3, [r5], #4
  4053be:	d8e8      	bhi.n	405392 <__mdiff+0x5c>
  4053c0:	45be      	cmp	lr, r7
  4053c2:	d305      	bcc.n	4053d0 <__mdiff+0x9a>
  4053c4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4053c8:	b18b      	cbz	r3, 4053ee <__mdiff+0xb8>
  4053ca:	6106      	str	r6, [r0, #16]
  4053cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053d0:	f85e 1b04 	ldr.w	r1, [lr], #4
  4053d4:	fa1c f381 	uxtah	r3, ip, r1
  4053d8:	141a      	asrs	r2, r3, #16
  4053da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  4053de:	b29b      	uxth	r3, r3
  4053e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4053e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
  4053e8:	f845 3b04 	str.w	r3, [r5], #4
  4053ec:	e7e8      	b.n	4053c0 <__mdiff+0x8a>
  4053ee:	3e01      	subs	r6, #1
  4053f0:	e7e8      	b.n	4053c4 <__mdiff+0x8e>

004053f2 <__d2b>:
  4053f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  4053f6:	2101      	movs	r1, #1
  4053f8:	461c      	mov	r4, r3
  4053fa:	4690      	mov	r8, r2
  4053fc:	9e08      	ldr	r6, [sp, #32]
  4053fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405400:	f7ff fd76 	bl	404ef0 <_Balloc>
  405404:	f3c4 0213 	ubfx	r2, r4, #0, #20
  405408:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40540c:	4607      	mov	r7, r0
  40540e:	bb34      	cbnz	r4, 40545e <__d2b+0x6c>
  405410:	9201      	str	r2, [sp, #4]
  405412:	f1b8 0f00 	cmp.w	r8, #0
  405416:	d027      	beq.n	405468 <__d2b+0x76>
  405418:	a802      	add	r0, sp, #8
  40541a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40541e:	f7ff fe0c 	bl	40503a <__lo0bits>
  405422:	9900      	ldr	r1, [sp, #0]
  405424:	b1f0      	cbz	r0, 405464 <__d2b+0x72>
  405426:	9a01      	ldr	r2, [sp, #4]
  405428:	f1c0 0320 	rsb	r3, r0, #32
  40542c:	fa02 f303 	lsl.w	r3, r2, r3
  405430:	430b      	orrs	r3, r1
  405432:	40c2      	lsrs	r2, r0
  405434:	617b      	str	r3, [r7, #20]
  405436:	9201      	str	r2, [sp, #4]
  405438:	9b01      	ldr	r3, [sp, #4]
  40543a:	61bb      	str	r3, [r7, #24]
  40543c:	2b00      	cmp	r3, #0
  40543e:	bf14      	ite	ne
  405440:	2102      	movne	r1, #2
  405442:	2101      	moveq	r1, #1
  405444:	6139      	str	r1, [r7, #16]
  405446:	b1c4      	cbz	r4, 40547a <__d2b+0x88>
  405448:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40544c:	4404      	add	r4, r0
  40544e:	6034      	str	r4, [r6, #0]
  405450:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405454:	6028      	str	r0, [r5, #0]
  405456:	4638      	mov	r0, r7
  405458:	b002      	add	sp, #8
  40545a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40545e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  405462:	e7d5      	b.n	405410 <__d2b+0x1e>
  405464:	6179      	str	r1, [r7, #20]
  405466:	e7e7      	b.n	405438 <__d2b+0x46>
  405468:	a801      	add	r0, sp, #4
  40546a:	f7ff fde6 	bl	40503a <__lo0bits>
  40546e:	9b01      	ldr	r3, [sp, #4]
  405470:	617b      	str	r3, [r7, #20]
  405472:	2101      	movs	r1, #1
  405474:	6139      	str	r1, [r7, #16]
  405476:	3020      	adds	r0, #32
  405478:	e7e5      	b.n	405446 <__d2b+0x54>
  40547a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40547e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405482:	6030      	str	r0, [r6, #0]
  405484:	6918      	ldr	r0, [r3, #16]
  405486:	f7ff fdb9 	bl	404ffc <__hi0bits>
  40548a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40548e:	e7e1      	b.n	405454 <__d2b+0x62>

00405490 <_calloc_r>:
  405490:	b538      	push	{r3, r4, r5, lr}
  405492:	fb02 f401 	mul.w	r4, r2, r1
  405496:	4621      	mov	r1, r4
  405498:	f000 f856 	bl	405548 <_malloc_r>
  40549c:	4605      	mov	r5, r0
  40549e:	b118      	cbz	r0, 4054a8 <_calloc_r+0x18>
  4054a0:	4622      	mov	r2, r4
  4054a2:	2100      	movs	r1, #0
  4054a4:	f7fd ff3d 	bl	403322 <memset>
  4054a8:	4628      	mov	r0, r5
  4054aa:	bd38      	pop	{r3, r4, r5, pc}

004054ac <_free_r>:
  4054ac:	b538      	push	{r3, r4, r5, lr}
  4054ae:	4605      	mov	r5, r0
  4054b0:	2900      	cmp	r1, #0
  4054b2:	d045      	beq.n	405540 <_free_r+0x94>
  4054b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4054b8:	1f0c      	subs	r4, r1, #4
  4054ba:	2b00      	cmp	r3, #0
  4054bc:	bfb8      	it	lt
  4054be:	18e4      	addlt	r4, r4, r3
  4054c0:	f000 fb5a 	bl	405b78 <__malloc_lock>
  4054c4:	4a1f      	ldr	r2, [pc, #124]	; (405544 <_free_r+0x98>)
  4054c6:	6813      	ldr	r3, [r2, #0]
  4054c8:	4610      	mov	r0, r2
  4054ca:	b933      	cbnz	r3, 4054da <_free_r+0x2e>
  4054cc:	6063      	str	r3, [r4, #4]
  4054ce:	6014      	str	r4, [r2, #0]
  4054d0:	4628      	mov	r0, r5
  4054d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4054d6:	f000 bb50 	b.w	405b7a <__malloc_unlock>
  4054da:	42a3      	cmp	r3, r4
  4054dc:	d90c      	bls.n	4054f8 <_free_r+0x4c>
  4054de:	6821      	ldr	r1, [r4, #0]
  4054e0:	1862      	adds	r2, r4, r1
  4054e2:	4293      	cmp	r3, r2
  4054e4:	bf04      	itt	eq
  4054e6:	681a      	ldreq	r2, [r3, #0]
  4054e8:	685b      	ldreq	r3, [r3, #4]
  4054ea:	6063      	str	r3, [r4, #4]
  4054ec:	bf04      	itt	eq
  4054ee:	1852      	addeq	r2, r2, r1
  4054f0:	6022      	streq	r2, [r4, #0]
  4054f2:	6004      	str	r4, [r0, #0]
  4054f4:	e7ec      	b.n	4054d0 <_free_r+0x24>
  4054f6:	4613      	mov	r3, r2
  4054f8:	685a      	ldr	r2, [r3, #4]
  4054fa:	b10a      	cbz	r2, 405500 <_free_r+0x54>
  4054fc:	42a2      	cmp	r2, r4
  4054fe:	d9fa      	bls.n	4054f6 <_free_r+0x4a>
  405500:	6819      	ldr	r1, [r3, #0]
  405502:	1858      	adds	r0, r3, r1
  405504:	42a0      	cmp	r0, r4
  405506:	d10b      	bne.n	405520 <_free_r+0x74>
  405508:	6820      	ldr	r0, [r4, #0]
  40550a:	4401      	add	r1, r0
  40550c:	1858      	adds	r0, r3, r1
  40550e:	4282      	cmp	r2, r0
  405510:	6019      	str	r1, [r3, #0]
  405512:	d1dd      	bne.n	4054d0 <_free_r+0x24>
  405514:	6810      	ldr	r0, [r2, #0]
  405516:	6852      	ldr	r2, [r2, #4]
  405518:	605a      	str	r2, [r3, #4]
  40551a:	4401      	add	r1, r0
  40551c:	6019      	str	r1, [r3, #0]
  40551e:	e7d7      	b.n	4054d0 <_free_r+0x24>
  405520:	d902      	bls.n	405528 <_free_r+0x7c>
  405522:	230c      	movs	r3, #12
  405524:	602b      	str	r3, [r5, #0]
  405526:	e7d3      	b.n	4054d0 <_free_r+0x24>
  405528:	6820      	ldr	r0, [r4, #0]
  40552a:	1821      	adds	r1, r4, r0
  40552c:	428a      	cmp	r2, r1
  40552e:	bf04      	itt	eq
  405530:	6811      	ldreq	r1, [r2, #0]
  405532:	6852      	ldreq	r2, [r2, #4]
  405534:	6062      	str	r2, [r4, #4]
  405536:	bf04      	itt	eq
  405538:	1809      	addeq	r1, r1, r0
  40553a:	6021      	streq	r1, [r4, #0]
  40553c:	605c      	str	r4, [r3, #4]
  40553e:	e7c7      	b.n	4054d0 <_free_r+0x24>
  405540:	bd38      	pop	{r3, r4, r5, pc}
  405542:	bf00      	nop
  405544:	204004c4 	.word	0x204004c4

00405548 <_malloc_r>:
  405548:	b570      	push	{r4, r5, r6, lr}
  40554a:	1ccd      	adds	r5, r1, #3
  40554c:	f025 0503 	bic.w	r5, r5, #3
  405550:	3508      	adds	r5, #8
  405552:	2d0c      	cmp	r5, #12
  405554:	bf38      	it	cc
  405556:	250c      	movcc	r5, #12
  405558:	2d00      	cmp	r5, #0
  40555a:	4606      	mov	r6, r0
  40555c:	db01      	blt.n	405562 <_malloc_r+0x1a>
  40555e:	42a9      	cmp	r1, r5
  405560:	d903      	bls.n	40556a <_malloc_r+0x22>
  405562:	230c      	movs	r3, #12
  405564:	6033      	str	r3, [r6, #0]
  405566:	2000      	movs	r0, #0
  405568:	bd70      	pop	{r4, r5, r6, pc}
  40556a:	f000 fb05 	bl	405b78 <__malloc_lock>
  40556e:	4a23      	ldr	r2, [pc, #140]	; (4055fc <_malloc_r+0xb4>)
  405570:	6814      	ldr	r4, [r2, #0]
  405572:	4621      	mov	r1, r4
  405574:	b991      	cbnz	r1, 40559c <_malloc_r+0x54>
  405576:	4c22      	ldr	r4, [pc, #136]	; (405600 <_malloc_r+0xb8>)
  405578:	6823      	ldr	r3, [r4, #0]
  40557a:	b91b      	cbnz	r3, 405584 <_malloc_r+0x3c>
  40557c:	4630      	mov	r0, r6
  40557e:	f000 f97f 	bl	405880 <_sbrk_r>
  405582:	6020      	str	r0, [r4, #0]
  405584:	4629      	mov	r1, r5
  405586:	4630      	mov	r0, r6
  405588:	f000 f97a 	bl	405880 <_sbrk_r>
  40558c:	1c43      	adds	r3, r0, #1
  40558e:	d126      	bne.n	4055de <_malloc_r+0x96>
  405590:	230c      	movs	r3, #12
  405592:	6033      	str	r3, [r6, #0]
  405594:	4630      	mov	r0, r6
  405596:	f000 faf0 	bl	405b7a <__malloc_unlock>
  40559a:	e7e4      	b.n	405566 <_malloc_r+0x1e>
  40559c:	680b      	ldr	r3, [r1, #0]
  40559e:	1b5b      	subs	r3, r3, r5
  4055a0:	d41a      	bmi.n	4055d8 <_malloc_r+0x90>
  4055a2:	2b0b      	cmp	r3, #11
  4055a4:	d90f      	bls.n	4055c6 <_malloc_r+0x7e>
  4055a6:	600b      	str	r3, [r1, #0]
  4055a8:	50cd      	str	r5, [r1, r3]
  4055aa:	18cc      	adds	r4, r1, r3
  4055ac:	4630      	mov	r0, r6
  4055ae:	f000 fae4 	bl	405b7a <__malloc_unlock>
  4055b2:	f104 000b 	add.w	r0, r4, #11
  4055b6:	1d23      	adds	r3, r4, #4
  4055b8:	f020 0007 	bic.w	r0, r0, #7
  4055bc:	1ac3      	subs	r3, r0, r3
  4055be:	d01b      	beq.n	4055f8 <_malloc_r+0xb0>
  4055c0:	425a      	negs	r2, r3
  4055c2:	50e2      	str	r2, [r4, r3]
  4055c4:	bd70      	pop	{r4, r5, r6, pc}
  4055c6:	428c      	cmp	r4, r1
  4055c8:	bf0d      	iteet	eq
  4055ca:	6863      	ldreq	r3, [r4, #4]
  4055cc:	684b      	ldrne	r3, [r1, #4]
  4055ce:	6063      	strne	r3, [r4, #4]
  4055d0:	6013      	streq	r3, [r2, #0]
  4055d2:	bf18      	it	ne
  4055d4:	460c      	movne	r4, r1
  4055d6:	e7e9      	b.n	4055ac <_malloc_r+0x64>
  4055d8:	460c      	mov	r4, r1
  4055da:	6849      	ldr	r1, [r1, #4]
  4055dc:	e7ca      	b.n	405574 <_malloc_r+0x2c>
  4055de:	1cc4      	adds	r4, r0, #3
  4055e0:	f024 0403 	bic.w	r4, r4, #3
  4055e4:	42a0      	cmp	r0, r4
  4055e6:	d005      	beq.n	4055f4 <_malloc_r+0xac>
  4055e8:	1a21      	subs	r1, r4, r0
  4055ea:	4630      	mov	r0, r6
  4055ec:	f000 f948 	bl	405880 <_sbrk_r>
  4055f0:	3001      	adds	r0, #1
  4055f2:	d0cd      	beq.n	405590 <_malloc_r+0x48>
  4055f4:	6025      	str	r5, [r4, #0]
  4055f6:	e7d9      	b.n	4055ac <_malloc_r+0x64>
  4055f8:	bd70      	pop	{r4, r5, r6, pc}
  4055fa:	bf00      	nop
  4055fc:	204004c4 	.word	0x204004c4
  405600:	204004c8 	.word	0x204004c8

00405604 <__sfputc_r>:
  405604:	6893      	ldr	r3, [r2, #8]
  405606:	3b01      	subs	r3, #1
  405608:	2b00      	cmp	r3, #0
  40560a:	b410      	push	{r4}
  40560c:	6093      	str	r3, [r2, #8]
  40560e:	da08      	bge.n	405622 <__sfputc_r+0x1e>
  405610:	6994      	ldr	r4, [r2, #24]
  405612:	42a3      	cmp	r3, r4
  405614:	db02      	blt.n	40561c <__sfputc_r+0x18>
  405616:	b2cb      	uxtb	r3, r1
  405618:	2b0a      	cmp	r3, #10
  40561a:	d102      	bne.n	405622 <__sfputc_r+0x1e>
  40561c:	bc10      	pop	{r4}
  40561e:	f000 b983 	b.w	405928 <__swbuf_r>
  405622:	6813      	ldr	r3, [r2, #0]
  405624:	1c58      	adds	r0, r3, #1
  405626:	6010      	str	r0, [r2, #0]
  405628:	7019      	strb	r1, [r3, #0]
  40562a:	b2c8      	uxtb	r0, r1
  40562c:	bc10      	pop	{r4}
  40562e:	4770      	bx	lr

00405630 <__sfputs_r>:
  405630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405632:	4606      	mov	r6, r0
  405634:	460f      	mov	r7, r1
  405636:	4614      	mov	r4, r2
  405638:	18d5      	adds	r5, r2, r3
  40563a:	42ac      	cmp	r4, r5
  40563c:	d101      	bne.n	405642 <__sfputs_r+0x12>
  40563e:	2000      	movs	r0, #0
  405640:	e007      	b.n	405652 <__sfputs_r+0x22>
  405642:	463a      	mov	r2, r7
  405644:	f814 1b01 	ldrb.w	r1, [r4], #1
  405648:	4630      	mov	r0, r6
  40564a:	f7ff ffdb 	bl	405604 <__sfputc_r>
  40564e:	1c43      	adds	r3, r0, #1
  405650:	d1f3      	bne.n	40563a <__sfputs_r+0xa>
  405652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00405654 <_vfiprintf_r>:
  405654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405658:	b09d      	sub	sp, #116	; 0x74
  40565a:	460c      	mov	r4, r1
  40565c:	4617      	mov	r7, r2
  40565e:	9303      	str	r3, [sp, #12]
  405660:	4606      	mov	r6, r0
  405662:	b118      	cbz	r0, 40566c <_vfiprintf_r+0x18>
  405664:	6983      	ldr	r3, [r0, #24]
  405666:	b90b      	cbnz	r3, 40566c <_vfiprintf_r+0x18>
  405668:	f7ff faea 	bl	404c40 <__sinit>
  40566c:	4b7c      	ldr	r3, [pc, #496]	; (405860 <_vfiprintf_r+0x20c>)
  40566e:	429c      	cmp	r4, r3
  405670:	d157      	bne.n	405722 <_vfiprintf_r+0xce>
  405672:	6874      	ldr	r4, [r6, #4]
  405674:	89a3      	ldrh	r3, [r4, #12]
  405676:	0718      	lsls	r0, r3, #28
  405678:	d55d      	bpl.n	405736 <_vfiprintf_r+0xe2>
  40567a:	6923      	ldr	r3, [r4, #16]
  40567c:	2b00      	cmp	r3, #0
  40567e:	d05a      	beq.n	405736 <_vfiprintf_r+0xe2>
  405680:	2300      	movs	r3, #0
  405682:	9309      	str	r3, [sp, #36]	; 0x24
  405684:	2320      	movs	r3, #32
  405686:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40568a:	2330      	movs	r3, #48	; 0x30
  40568c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  405690:	f04f 0b01 	mov.w	fp, #1
  405694:	46b8      	mov	r8, r7
  405696:	4645      	mov	r5, r8
  405698:	f815 3b01 	ldrb.w	r3, [r5], #1
  40569c:	2b00      	cmp	r3, #0
  40569e:	d155      	bne.n	40574c <_vfiprintf_r+0xf8>
  4056a0:	ebb8 0a07 	subs.w	sl, r8, r7
  4056a4:	d00b      	beq.n	4056be <_vfiprintf_r+0x6a>
  4056a6:	4653      	mov	r3, sl
  4056a8:	463a      	mov	r2, r7
  4056aa:	4621      	mov	r1, r4
  4056ac:	4630      	mov	r0, r6
  4056ae:	f7ff ffbf 	bl	405630 <__sfputs_r>
  4056b2:	3001      	adds	r0, #1
  4056b4:	f000 80c4 	beq.w	405840 <_vfiprintf_r+0x1ec>
  4056b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4056ba:	4453      	add	r3, sl
  4056bc:	9309      	str	r3, [sp, #36]	; 0x24
  4056be:	f898 3000 	ldrb.w	r3, [r8]
  4056c2:	2b00      	cmp	r3, #0
  4056c4:	f000 80bc 	beq.w	405840 <_vfiprintf_r+0x1ec>
  4056c8:	2300      	movs	r3, #0
  4056ca:	f04f 32ff 	mov.w	r2, #4294967295
  4056ce:	9304      	str	r3, [sp, #16]
  4056d0:	9307      	str	r3, [sp, #28]
  4056d2:	9205      	str	r2, [sp, #20]
  4056d4:	9306      	str	r3, [sp, #24]
  4056d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  4056da:	931a      	str	r3, [sp, #104]	; 0x68
  4056dc:	2205      	movs	r2, #5
  4056de:	7829      	ldrb	r1, [r5, #0]
  4056e0:	4860      	ldr	r0, [pc, #384]	; (405864 <_vfiprintf_r+0x210>)
  4056e2:	f7ff fbb5 	bl	404e50 <memchr>
  4056e6:	f105 0801 	add.w	r8, r5, #1
  4056ea:	9b04      	ldr	r3, [sp, #16]
  4056ec:	2800      	cmp	r0, #0
  4056ee:	d131      	bne.n	405754 <_vfiprintf_r+0x100>
  4056f0:	06d9      	lsls	r1, r3, #27
  4056f2:	bf44      	itt	mi
  4056f4:	2220      	movmi	r2, #32
  4056f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4056fa:	071a      	lsls	r2, r3, #28
  4056fc:	bf44      	itt	mi
  4056fe:	222b      	movmi	r2, #43	; 0x2b
  405700:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  405704:	782a      	ldrb	r2, [r5, #0]
  405706:	2a2a      	cmp	r2, #42	; 0x2a
  405708:	d02c      	beq.n	405764 <_vfiprintf_r+0x110>
  40570a:	9a07      	ldr	r2, [sp, #28]
  40570c:	2100      	movs	r1, #0
  40570e:	200a      	movs	r0, #10
  405710:	46a8      	mov	r8, r5
  405712:	3501      	adds	r5, #1
  405714:	f898 3000 	ldrb.w	r3, [r8]
  405718:	3b30      	subs	r3, #48	; 0x30
  40571a:	2b09      	cmp	r3, #9
  40571c:	d96d      	bls.n	4057fa <_vfiprintf_r+0x1a6>
  40571e:	b371      	cbz	r1, 40577e <_vfiprintf_r+0x12a>
  405720:	e026      	b.n	405770 <_vfiprintf_r+0x11c>
  405722:	4b51      	ldr	r3, [pc, #324]	; (405868 <_vfiprintf_r+0x214>)
  405724:	429c      	cmp	r4, r3
  405726:	d101      	bne.n	40572c <_vfiprintf_r+0xd8>
  405728:	68b4      	ldr	r4, [r6, #8]
  40572a:	e7a3      	b.n	405674 <_vfiprintf_r+0x20>
  40572c:	4b4f      	ldr	r3, [pc, #316]	; (40586c <_vfiprintf_r+0x218>)
  40572e:	429c      	cmp	r4, r3
  405730:	bf08      	it	eq
  405732:	68f4      	ldreq	r4, [r6, #12]
  405734:	e79e      	b.n	405674 <_vfiprintf_r+0x20>
  405736:	4621      	mov	r1, r4
  405738:	4630      	mov	r0, r6
  40573a:	f000 f959 	bl	4059f0 <__swsetup_r>
  40573e:	2800      	cmp	r0, #0
  405740:	d09e      	beq.n	405680 <_vfiprintf_r+0x2c>
  405742:	f04f 30ff 	mov.w	r0, #4294967295
  405746:	b01d      	add	sp, #116	; 0x74
  405748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40574c:	2b25      	cmp	r3, #37	; 0x25
  40574e:	d0a7      	beq.n	4056a0 <_vfiprintf_r+0x4c>
  405750:	46a8      	mov	r8, r5
  405752:	e7a0      	b.n	405696 <_vfiprintf_r+0x42>
  405754:	4a43      	ldr	r2, [pc, #268]	; (405864 <_vfiprintf_r+0x210>)
  405756:	1a80      	subs	r0, r0, r2
  405758:	fa0b f000 	lsl.w	r0, fp, r0
  40575c:	4318      	orrs	r0, r3
  40575e:	9004      	str	r0, [sp, #16]
  405760:	4645      	mov	r5, r8
  405762:	e7bb      	b.n	4056dc <_vfiprintf_r+0x88>
  405764:	9a03      	ldr	r2, [sp, #12]
  405766:	1d11      	adds	r1, r2, #4
  405768:	6812      	ldr	r2, [r2, #0]
  40576a:	9103      	str	r1, [sp, #12]
  40576c:	2a00      	cmp	r2, #0
  40576e:	db01      	blt.n	405774 <_vfiprintf_r+0x120>
  405770:	9207      	str	r2, [sp, #28]
  405772:	e004      	b.n	40577e <_vfiprintf_r+0x12a>
  405774:	4252      	negs	r2, r2
  405776:	f043 0302 	orr.w	r3, r3, #2
  40577a:	9207      	str	r2, [sp, #28]
  40577c:	9304      	str	r3, [sp, #16]
  40577e:	f898 3000 	ldrb.w	r3, [r8]
  405782:	2b2e      	cmp	r3, #46	; 0x2e
  405784:	d110      	bne.n	4057a8 <_vfiprintf_r+0x154>
  405786:	f898 3001 	ldrb.w	r3, [r8, #1]
  40578a:	2b2a      	cmp	r3, #42	; 0x2a
  40578c:	f108 0101 	add.w	r1, r8, #1
  405790:	d137      	bne.n	405802 <_vfiprintf_r+0x1ae>
  405792:	9b03      	ldr	r3, [sp, #12]
  405794:	1d1a      	adds	r2, r3, #4
  405796:	681b      	ldr	r3, [r3, #0]
  405798:	9203      	str	r2, [sp, #12]
  40579a:	2b00      	cmp	r3, #0
  40579c:	bfb8      	it	lt
  40579e:	f04f 33ff 	movlt.w	r3, #4294967295
  4057a2:	f108 0802 	add.w	r8, r8, #2
  4057a6:	9305      	str	r3, [sp, #20]
  4057a8:	4d31      	ldr	r5, [pc, #196]	; (405870 <_vfiprintf_r+0x21c>)
  4057aa:	f898 1000 	ldrb.w	r1, [r8]
  4057ae:	2203      	movs	r2, #3
  4057b0:	4628      	mov	r0, r5
  4057b2:	f7ff fb4d 	bl	404e50 <memchr>
  4057b6:	b140      	cbz	r0, 4057ca <_vfiprintf_r+0x176>
  4057b8:	2340      	movs	r3, #64	; 0x40
  4057ba:	1b40      	subs	r0, r0, r5
  4057bc:	fa03 f000 	lsl.w	r0, r3, r0
  4057c0:	9b04      	ldr	r3, [sp, #16]
  4057c2:	4303      	orrs	r3, r0
  4057c4:	9304      	str	r3, [sp, #16]
  4057c6:	f108 0801 	add.w	r8, r8, #1
  4057ca:	f898 1000 	ldrb.w	r1, [r8]
  4057ce:	4829      	ldr	r0, [pc, #164]	; (405874 <_vfiprintf_r+0x220>)
  4057d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  4057d4:	2206      	movs	r2, #6
  4057d6:	f108 0701 	add.w	r7, r8, #1
  4057da:	f7ff fb39 	bl	404e50 <memchr>
  4057de:	2800      	cmp	r0, #0
  4057e0:	d034      	beq.n	40584c <_vfiprintf_r+0x1f8>
  4057e2:	4b25      	ldr	r3, [pc, #148]	; (405878 <_vfiprintf_r+0x224>)
  4057e4:	bb03      	cbnz	r3, 405828 <_vfiprintf_r+0x1d4>
  4057e6:	9b03      	ldr	r3, [sp, #12]
  4057e8:	3307      	adds	r3, #7
  4057ea:	f023 0307 	bic.w	r3, r3, #7
  4057ee:	3308      	adds	r3, #8
  4057f0:	9303      	str	r3, [sp, #12]
  4057f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4057f4:	444b      	add	r3, r9
  4057f6:	9309      	str	r3, [sp, #36]	; 0x24
  4057f8:	e74c      	b.n	405694 <_vfiprintf_r+0x40>
  4057fa:	fb00 3202 	mla	r2, r0, r2, r3
  4057fe:	2101      	movs	r1, #1
  405800:	e786      	b.n	405710 <_vfiprintf_r+0xbc>
  405802:	2300      	movs	r3, #0
  405804:	9305      	str	r3, [sp, #20]
  405806:	4618      	mov	r0, r3
  405808:	250a      	movs	r5, #10
  40580a:	4688      	mov	r8, r1
  40580c:	3101      	adds	r1, #1
  40580e:	f898 2000 	ldrb.w	r2, [r8]
  405812:	3a30      	subs	r2, #48	; 0x30
  405814:	2a09      	cmp	r2, #9
  405816:	d903      	bls.n	405820 <_vfiprintf_r+0x1cc>
  405818:	2b00      	cmp	r3, #0
  40581a:	d0c5      	beq.n	4057a8 <_vfiprintf_r+0x154>
  40581c:	9005      	str	r0, [sp, #20]
  40581e:	e7c3      	b.n	4057a8 <_vfiprintf_r+0x154>
  405820:	fb05 2000 	mla	r0, r5, r0, r2
  405824:	2301      	movs	r3, #1
  405826:	e7f0      	b.n	40580a <_vfiprintf_r+0x1b6>
  405828:	ab03      	add	r3, sp, #12
  40582a:	9300      	str	r3, [sp, #0]
  40582c:	4622      	mov	r2, r4
  40582e:	4b13      	ldr	r3, [pc, #76]	; (40587c <_vfiprintf_r+0x228>)
  405830:	a904      	add	r1, sp, #16
  405832:	4630      	mov	r0, r6
  405834:	f7fd fe0e 	bl	403454 <_printf_float>
  405838:	f1b0 3fff 	cmp.w	r0, #4294967295
  40583c:	4681      	mov	r9, r0
  40583e:	d1d8      	bne.n	4057f2 <_vfiprintf_r+0x19e>
  405840:	89a3      	ldrh	r3, [r4, #12]
  405842:	065b      	lsls	r3, r3, #25
  405844:	f53f af7d 	bmi.w	405742 <_vfiprintf_r+0xee>
  405848:	9809      	ldr	r0, [sp, #36]	; 0x24
  40584a:	e77c      	b.n	405746 <_vfiprintf_r+0xf2>
  40584c:	ab03      	add	r3, sp, #12
  40584e:	9300      	str	r3, [sp, #0]
  405850:	4622      	mov	r2, r4
  405852:	4b0a      	ldr	r3, [pc, #40]	; (40587c <_vfiprintf_r+0x228>)
  405854:	a904      	add	r1, sp, #16
  405856:	4630      	mov	r0, r6
  405858:	f7fe f8aa 	bl	4039b0 <_printf_i>
  40585c:	e7ec      	b.n	405838 <_vfiprintf_r+0x1e4>
  40585e:	bf00      	nop
  405860:	00406104 	.word	0x00406104
  405864:	00406244 	.word	0x00406244
  405868:	00406124 	.word	0x00406124
  40586c:	004060e4 	.word	0x004060e4
  405870:	0040624a 	.word	0x0040624a
  405874:	0040624e 	.word	0x0040624e
  405878:	00403455 	.word	0x00403455
  40587c:	00405631 	.word	0x00405631

00405880 <_sbrk_r>:
  405880:	b538      	push	{r3, r4, r5, lr}
  405882:	4c06      	ldr	r4, [pc, #24]	; (40589c <_sbrk_r+0x1c>)
  405884:	2300      	movs	r3, #0
  405886:	4605      	mov	r5, r0
  405888:	4608      	mov	r0, r1
  40588a:	6023      	str	r3, [r4, #0]
  40588c:	f7fb ffc4 	bl	401818 <_sbrk>
  405890:	1c43      	adds	r3, r0, #1
  405892:	d102      	bne.n	40589a <_sbrk_r+0x1a>
  405894:	6823      	ldr	r3, [r4, #0]
  405896:	b103      	cbz	r3, 40589a <_sbrk_r+0x1a>
  405898:	602b      	str	r3, [r5, #0]
  40589a:	bd38      	pop	{r3, r4, r5, pc}
  40589c:	204007b8 	.word	0x204007b8

004058a0 <__sread>:
  4058a0:	b510      	push	{r4, lr}
  4058a2:	460c      	mov	r4, r1
  4058a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4058a8:	f000 f968 	bl	405b7c <_read_r>
  4058ac:	2800      	cmp	r0, #0
  4058ae:	bfab      	itete	ge
  4058b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  4058b2:	89a3      	ldrhlt	r3, [r4, #12]
  4058b4:	181b      	addge	r3, r3, r0
  4058b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  4058ba:	bfac      	ite	ge
  4058bc:	6563      	strge	r3, [r4, #84]	; 0x54
  4058be:	81a3      	strhlt	r3, [r4, #12]
  4058c0:	bd10      	pop	{r4, pc}

004058c2 <__swrite>:
  4058c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4058c6:	461f      	mov	r7, r3
  4058c8:	898b      	ldrh	r3, [r1, #12]
  4058ca:	05db      	lsls	r3, r3, #23
  4058cc:	4605      	mov	r5, r0
  4058ce:	460c      	mov	r4, r1
  4058d0:	4616      	mov	r6, r2
  4058d2:	d505      	bpl.n	4058e0 <__swrite+0x1e>
  4058d4:	2302      	movs	r3, #2
  4058d6:	2200      	movs	r2, #0
  4058d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4058dc:	f000 f928 	bl	405b30 <_lseek_r>
  4058e0:	89a3      	ldrh	r3, [r4, #12]
  4058e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4058e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4058ea:	81a3      	strh	r3, [r4, #12]
  4058ec:	4632      	mov	r2, r6
  4058ee:	463b      	mov	r3, r7
  4058f0:	4628      	mov	r0, r5
  4058f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4058f6:	f000 b869 	b.w	4059cc <_write_r>

004058fa <__sseek>:
  4058fa:	b510      	push	{r4, lr}
  4058fc:	460c      	mov	r4, r1
  4058fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405902:	f000 f915 	bl	405b30 <_lseek_r>
  405906:	1c43      	adds	r3, r0, #1
  405908:	89a3      	ldrh	r3, [r4, #12]
  40590a:	bf15      	itete	ne
  40590c:	6560      	strne	r0, [r4, #84]	; 0x54
  40590e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405916:	81a3      	strheq	r3, [r4, #12]
  405918:	bf18      	it	ne
  40591a:	81a3      	strhne	r3, [r4, #12]
  40591c:	bd10      	pop	{r4, pc}

0040591e <__sclose>:
  40591e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405922:	f000 b8d3 	b.w	405acc <_close_r>
	...

00405928 <__swbuf_r>:
  405928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40592a:	460e      	mov	r6, r1
  40592c:	4614      	mov	r4, r2
  40592e:	4605      	mov	r5, r0
  405930:	b118      	cbz	r0, 40593a <__swbuf_r+0x12>
  405932:	6983      	ldr	r3, [r0, #24]
  405934:	b90b      	cbnz	r3, 40593a <__swbuf_r+0x12>
  405936:	f7ff f983 	bl	404c40 <__sinit>
  40593a:	4b21      	ldr	r3, [pc, #132]	; (4059c0 <__swbuf_r+0x98>)
  40593c:	429c      	cmp	r4, r3
  40593e:	d12a      	bne.n	405996 <__swbuf_r+0x6e>
  405940:	686c      	ldr	r4, [r5, #4]
  405942:	69a3      	ldr	r3, [r4, #24]
  405944:	60a3      	str	r3, [r4, #8]
  405946:	89a3      	ldrh	r3, [r4, #12]
  405948:	071a      	lsls	r2, r3, #28
  40594a:	d52e      	bpl.n	4059aa <__swbuf_r+0x82>
  40594c:	6923      	ldr	r3, [r4, #16]
  40594e:	b363      	cbz	r3, 4059aa <__swbuf_r+0x82>
  405950:	6923      	ldr	r3, [r4, #16]
  405952:	6820      	ldr	r0, [r4, #0]
  405954:	1ac0      	subs	r0, r0, r3
  405956:	6963      	ldr	r3, [r4, #20]
  405958:	b2f6      	uxtb	r6, r6
  40595a:	4298      	cmp	r0, r3
  40595c:	4637      	mov	r7, r6
  40595e:	db04      	blt.n	40596a <__swbuf_r+0x42>
  405960:	4621      	mov	r1, r4
  405962:	4628      	mov	r0, r5
  405964:	f7ff f902 	bl	404b6c <_fflush_r>
  405968:	bb28      	cbnz	r0, 4059b6 <__swbuf_r+0x8e>
  40596a:	68a3      	ldr	r3, [r4, #8]
  40596c:	3b01      	subs	r3, #1
  40596e:	60a3      	str	r3, [r4, #8]
  405970:	6823      	ldr	r3, [r4, #0]
  405972:	1c5a      	adds	r2, r3, #1
  405974:	6022      	str	r2, [r4, #0]
  405976:	701e      	strb	r6, [r3, #0]
  405978:	6963      	ldr	r3, [r4, #20]
  40597a:	3001      	adds	r0, #1
  40597c:	4298      	cmp	r0, r3
  40597e:	d004      	beq.n	40598a <__swbuf_r+0x62>
  405980:	89a3      	ldrh	r3, [r4, #12]
  405982:	07db      	lsls	r3, r3, #31
  405984:	d519      	bpl.n	4059ba <__swbuf_r+0x92>
  405986:	2e0a      	cmp	r6, #10
  405988:	d117      	bne.n	4059ba <__swbuf_r+0x92>
  40598a:	4621      	mov	r1, r4
  40598c:	4628      	mov	r0, r5
  40598e:	f7ff f8ed 	bl	404b6c <_fflush_r>
  405992:	b190      	cbz	r0, 4059ba <__swbuf_r+0x92>
  405994:	e00f      	b.n	4059b6 <__swbuf_r+0x8e>
  405996:	4b0b      	ldr	r3, [pc, #44]	; (4059c4 <__swbuf_r+0x9c>)
  405998:	429c      	cmp	r4, r3
  40599a:	d101      	bne.n	4059a0 <__swbuf_r+0x78>
  40599c:	68ac      	ldr	r4, [r5, #8]
  40599e:	e7d0      	b.n	405942 <__swbuf_r+0x1a>
  4059a0:	4b09      	ldr	r3, [pc, #36]	; (4059c8 <__swbuf_r+0xa0>)
  4059a2:	429c      	cmp	r4, r3
  4059a4:	bf08      	it	eq
  4059a6:	68ec      	ldreq	r4, [r5, #12]
  4059a8:	e7cb      	b.n	405942 <__swbuf_r+0x1a>
  4059aa:	4621      	mov	r1, r4
  4059ac:	4628      	mov	r0, r5
  4059ae:	f000 f81f 	bl	4059f0 <__swsetup_r>
  4059b2:	2800      	cmp	r0, #0
  4059b4:	d0cc      	beq.n	405950 <__swbuf_r+0x28>
  4059b6:	f04f 37ff 	mov.w	r7, #4294967295
  4059ba:	4638      	mov	r0, r7
  4059bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4059be:	bf00      	nop
  4059c0:	00406104 	.word	0x00406104
  4059c4:	00406124 	.word	0x00406124
  4059c8:	004060e4 	.word	0x004060e4

004059cc <_write_r>:
  4059cc:	b538      	push	{r3, r4, r5, lr}
  4059ce:	4c07      	ldr	r4, [pc, #28]	; (4059ec <_write_r+0x20>)
  4059d0:	4605      	mov	r5, r0
  4059d2:	4608      	mov	r0, r1
  4059d4:	4611      	mov	r1, r2
  4059d6:	2200      	movs	r2, #0
  4059d8:	6022      	str	r2, [r4, #0]
  4059da:	461a      	mov	r2, r3
  4059dc:	f7fc ff9a 	bl	402914 <_write>
  4059e0:	1c43      	adds	r3, r0, #1
  4059e2:	d102      	bne.n	4059ea <_write_r+0x1e>
  4059e4:	6823      	ldr	r3, [r4, #0]
  4059e6:	b103      	cbz	r3, 4059ea <_write_r+0x1e>
  4059e8:	602b      	str	r3, [r5, #0]
  4059ea:	bd38      	pop	{r3, r4, r5, pc}
  4059ec:	204007b8 	.word	0x204007b8

004059f0 <__swsetup_r>:
  4059f0:	4b32      	ldr	r3, [pc, #200]	; (405abc <__swsetup_r+0xcc>)
  4059f2:	b570      	push	{r4, r5, r6, lr}
  4059f4:	681d      	ldr	r5, [r3, #0]
  4059f6:	4606      	mov	r6, r0
  4059f8:	460c      	mov	r4, r1
  4059fa:	b125      	cbz	r5, 405a06 <__swsetup_r+0x16>
  4059fc:	69ab      	ldr	r3, [r5, #24]
  4059fe:	b913      	cbnz	r3, 405a06 <__swsetup_r+0x16>
  405a00:	4628      	mov	r0, r5
  405a02:	f7ff f91d 	bl	404c40 <__sinit>
  405a06:	4b2e      	ldr	r3, [pc, #184]	; (405ac0 <__swsetup_r+0xd0>)
  405a08:	429c      	cmp	r4, r3
  405a0a:	d10f      	bne.n	405a2c <__swsetup_r+0x3c>
  405a0c:	686c      	ldr	r4, [r5, #4]
  405a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405a12:	b29a      	uxth	r2, r3
  405a14:	0715      	lsls	r5, r2, #28
  405a16:	d42c      	bmi.n	405a72 <__swsetup_r+0x82>
  405a18:	06d0      	lsls	r0, r2, #27
  405a1a:	d411      	bmi.n	405a40 <__swsetup_r+0x50>
  405a1c:	2209      	movs	r2, #9
  405a1e:	6032      	str	r2, [r6, #0]
  405a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405a24:	81a3      	strh	r3, [r4, #12]
  405a26:	f04f 30ff 	mov.w	r0, #4294967295
  405a2a:	bd70      	pop	{r4, r5, r6, pc}
  405a2c:	4b25      	ldr	r3, [pc, #148]	; (405ac4 <__swsetup_r+0xd4>)
  405a2e:	429c      	cmp	r4, r3
  405a30:	d101      	bne.n	405a36 <__swsetup_r+0x46>
  405a32:	68ac      	ldr	r4, [r5, #8]
  405a34:	e7eb      	b.n	405a0e <__swsetup_r+0x1e>
  405a36:	4b24      	ldr	r3, [pc, #144]	; (405ac8 <__swsetup_r+0xd8>)
  405a38:	429c      	cmp	r4, r3
  405a3a:	bf08      	it	eq
  405a3c:	68ec      	ldreq	r4, [r5, #12]
  405a3e:	e7e6      	b.n	405a0e <__swsetup_r+0x1e>
  405a40:	0751      	lsls	r1, r2, #29
  405a42:	d512      	bpl.n	405a6a <__swsetup_r+0x7a>
  405a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405a46:	b141      	cbz	r1, 405a5a <__swsetup_r+0x6a>
  405a48:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405a4c:	4299      	cmp	r1, r3
  405a4e:	d002      	beq.n	405a56 <__swsetup_r+0x66>
  405a50:	4630      	mov	r0, r6
  405a52:	f7ff fd2b 	bl	4054ac <_free_r>
  405a56:	2300      	movs	r3, #0
  405a58:	6363      	str	r3, [r4, #52]	; 0x34
  405a5a:	89a3      	ldrh	r3, [r4, #12]
  405a5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  405a60:	81a3      	strh	r3, [r4, #12]
  405a62:	2300      	movs	r3, #0
  405a64:	6063      	str	r3, [r4, #4]
  405a66:	6923      	ldr	r3, [r4, #16]
  405a68:	6023      	str	r3, [r4, #0]
  405a6a:	89a3      	ldrh	r3, [r4, #12]
  405a6c:	f043 0308 	orr.w	r3, r3, #8
  405a70:	81a3      	strh	r3, [r4, #12]
  405a72:	6923      	ldr	r3, [r4, #16]
  405a74:	b94b      	cbnz	r3, 405a8a <__swsetup_r+0x9a>
  405a76:	89a3      	ldrh	r3, [r4, #12]
  405a78:	f403 7320 	and.w	r3, r3, #640	; 0x280
  405a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405a80:	d003      	beq.n	405a8a <__swsetup_r+0x9a>
  405a82:	4621      	mov	r1, r4
  405a84:	4630      	mov	r0, r6
  405a86:	f7ff f997 	bl	404db8 <__smakebuf_r>
  405a8a:	89a2      	ldrh	r2, [r4, #12]
  405a8c:	f012 0301 	ands.w	r3, r2, #1
  405a90:	d00c      	beq.n	405aac <__swsetup_r+0xbc>
  405a92:	2300      	movs	r3, #0
  405a94:	60a3      	str	r3, [r4, #8]
  405a96:	6963      	ldr	r3, [r4, #20]
  405a98:	425b      	negs	r3, r3
  405a9a:	61a3      	str	r3, [r4, #24]
  405a9c:	6923      	ldr	r3, [r4, #16]
  405a9e:	b953      	cbnz	r3, 405ab6 <__swsetup_r+0xc6>
  405aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405aa4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  405aa8:	d1ba      	bne.n	405a20 <__swsetup_r+0x30>
  405aaa:	bd70      	pop	{r4, r5, r6, pc}
  405aac:	0792      	lsls	r2, r2, #30
  405aae:	bf58      	it	pl
  405ab0:	6963      	ldrpl	r3, [r4, #20]
  405ab2:	60a3      	str	r3, [r4, #8]
  405ab4:	e7f2      	b.n	405a9c <__swsetup_r+0xac>
  405ab6:	2000      	movs	r0, #0
  405ab8:	e7f7      	b.n	405aaa <__swsetup_r+0xba>
  405aba:	bf00      	nop
  405abc:	20400048 	.word	0x20400048
  405ac0:	00406104 	.word	0x00406104
  405ac4:	00406124 	.word	0x00406124
  405ac8:	004060e4 	.word	0x004060e4

00405acc <_close_r>:
  405acc:	b538      	push	{r3, r4, r5, lr}
  405ace:	4c06      	ldr	r4, [pc, #24]	; (405ae8 <_close_r+0x1c>)
  405ad0:	2300      	movs	r3, #0
  405ad2:	4605      	mov	r5, r0
  405ad4:	4608      	mov	r0, r1
  405ad6:	6023      	str	r3, [r4, #0]
  405ad8:	f7fb feb0 	bl	40183c <_close>
  405adc:	1c43      	adds	r3, r0, #1
  405ade:	d102      	bne.n	405ae6 <_close_r+0x1a>
  405ae0:	6823      	ldr	r3, [r4, #0]
  405ae2:	b103      	cbz	r3, 405ae6 <_close_r+0x1a>
  405ae4:	602b      	str	r3, [r5, #0]
  405ae6:	bd38      	pop	{r3, r4, r5, pc}
  405ae8:	204007b8 	.word	0x204007b8

00405aec <_fstat_r>:
  405aec:	b538      	push	{r3, r4, r5, lr}
  405aee:	4c07      	ldr	r4, [pc, #28]	; (405b0c <_fstat_r+0x20>)
  405af0:	2300      	movs	r3, #0
  405af2:	4605      	mov	r5, r0
  405af4:	4608      	mov	r0, r1
  405af6:	4611      	mov	r1, r2
  405af8:	6023      	str	r3, [r4, #0]
  405afa:	f7fb fea2 	bl	401842 <_fstat>
  405afe:	1c43      	adds	r3, r0, #1
  405b00:	d102      	bne.n	405b08 <_fstat_r+0x1c>
  405b02:	6823      	ldr	r3, [r4, #0]
  405b04:	b103      	cbz	r3, 405b08 <_fstat_r+0x1c>
  405b06:	602b      	str	r3, [r5, #0]
  405b08:	bd38      	pop	{r3, r4, r5, pc}
  405b0a:	bf00      	nop
  405b0c:	204007b8 	.word	0x204007b8

00405b10 <_isatty_r>:
  405b10:	b538      	push	{r3, r4, r5, lr}
  405b12:	4c06      	ldr	r4, [pc, #24]	; (405b2c <_isatty_r+0x1c>)
  405b14:	2300      	movs	r3, #0
  405b16:	4605      	mov	r5, r0
  405b18:	4608      	mov	r0, r1
  405b1a:	6023      	str	r3, [r4, #0]
  405b1c:	f7fb fe96 	bl	40184c <_isatty>
  405b20:	1c43      	adds	r3, r0, #1
  405b22:	d102      	bne.n	405b2a <_isatty_r+0x1a>
  405b24:	6823      	ldr	r3, [r4, #0]
  405b26:	b103      	cbz	r3, 405b2a <_isatty_r+0x1a>
  405b28:	602b      	str	r3, [r5, #0]
  405b2a:	bd38      	pop	{r3, r4, r5, pc}
  405b2c:	204007b8 	.word	0x204007b8

00405b30 <_lseek_r>:
  405b30:	b538      	push	{r3, r4, r5, lr}
  405b32:	4c07      	ldr	r4, [pc, #28]	; (405b50 <_lseek_r+0x20>)
  405b34:	4605      	mov	r5, r0
  405b36:	4608      	mov	r0, r1
  405b38:	4611      	mov	r1, r2
  405b3a:	2200      	movs	r2, #0
  405b3c:	6022      	str	r2, [r4, #0]
  405b3e:	461a      	mov	r2, r3
  405b40:	f7fb fe86 	bl	401850 <_lseek>
  405b44:	1c43      	adds	r3, r0, #1
  405b46:	d102      	bne.n	405b4e <_lseek_r+0x1e>
  405b48:	6823      	ldr	r3, [r4, #0]
  405b4a:	b103      	cbz	r3, 405b4e <_lseek_r+0x1e>
  405b4c:	602b      	str	r3, [r5, #0]
  405b4e:	bd38      	pop	{r3, r4, r5, pc}
  405b50:	204007b8 	.word	0x204007b8

00405b54 <__ascii_mbtowc>:
  405b54:	b082      	sub	sp, #8
  405b56:	b901      	cbnz	r1, 405b5a <__ascii_mbtowc+0x6>
  405b58:	a901      	add	r1, sp, #4
  405b5a:	b142      	cbz	r2, 405b6e <__ascii_mbtowc+0x1a>
  405b5c:	b14b      	cbz	r3, 405b72 <__ascii_mbtowc+0x1e>
  405b5e:	7813      	ldrb	r3, [r2, #0]
  405b60:	600b      	str	r3, [r1, #0]
  405b62:	7812      	ldrb	r2, [r2, #0]
  405b64:	1c10      	adds	r0, r2, #0
  405b66:	bf18      	it	ne
  405b68:	2001      	movne	r0, #1
  405b6a:	b002      	add	sp, #8
  405b6c:	4770      	bx	lr
  405b6e:	4610      	mov	r0, r2
  405b70:	e7fb      	b.n	405b6a <__ascii_mbtowc+0x16>
  405b72:	f06f 0001 	mvn.w	r0, #1
  405b76:	e7f8      	b.n	405b6a <__ascii_mbtowc+0x16>

00405b78 <__malloc_lock>:
  405b78:	4770      	bx	lr

00405b7a <__malloc_unlock>:
  405b7a:	4770      	bx	lr

00405b7c <_read_r>:
  405b7c:	b538      	push	{r3, r4, r5, lr}
  405b7e:	4c07      	ldr	r4, [pc, #28]	; (405b9c <_read_r+0x20>)
  405b80:	4605      	mov	r5, r0
  405b82:	4608      	mov	r0, r1
  405b84:	4611      	mov	r1, r2
  405b86:	2200      	movs	r2, #0
  405b88:	6022      	str	r2, [r4, #0]
  405b8a:	461a      	mov	r2, r3
  405b8c:	f7fc feb0 	bl	4028f0 <_read>
  405b90:	1c43      	adds	r3, r0, #1
  405b92:	d102      	bne.n	405b9a <_read_r+0x1e>
  405b94:	6823      	ldr	r3, [r4, #0]
  405b96:	b103      	cbz	r3, 405b9a <_read_r+0x1e>
  405b98:	602b      	str	r3, [r5, #0]
  405b9a:	bd38      	pop	{r3, r4, r5, pc}
  405b9c:	204007b8 	.word	0x204007b8

00405ba0 <__ascii_wctomb>:
  405ba0:	b149      	cbz	r1, 405bb6 <__ascii_wctomb+0x16>
  405ba2:	2aff      	cmp	r2, #255	; 0xff
  405ba4:	bf85      	ittet	hi
  405ba6:	238a      	movhi	r3, #138	; 0x8a
  405ba8:	6003      	strhi	r3, [r0, #0]
  405baa:	700a      	strbls	r2, [r1, #0]
  405bac:	f04f 30ff 	movhi.w	r0, #4294967295
  405bb0:	bf98      	it	ls
  405bb2:	2001      	movls	r0, #1
  405bb4:	4770      	bx	lr
  405bb6:	4608      	mov	r0, r1
  405bb8:	4770      	bx	lr
	...

00405bbc <__aeabi_dcmpun>:
  405bbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405bc4:	d102      	bne.n	405bcc <__aeabi_dcmpun+0x10>
  405bc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405bca:	d10a      	bne.n	405be2 <__aeabi_dcmpun+0x26>
  405bcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405bd4:	d102      	bne.n	405bdc <__aeabi_dcmpun+0x20>
  405bd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405bda:	d102      	bne.n	405be2 <__aeabi_dcmpun+0x26>
  405bdc:	f04f 0000 	mov.w	r0, #0
  405be0:	4770      	bx	lr
  405be2:	f04f 0001 	mov.w	r0, #1
  405be6:	4770      	bx	lr
  405be8:	20534f50 	.word	0x20534f50
  405bec:	00000a32 	.word	0x00000a32
  405bf0:	20534f50 	.word	0x20534f50
  405bf4:	00000a33 	.word	0x00000a33
  405bf8:	20534f50 	.word	0x20534f50
  405bfc:	00000a31 	.word	0x00000a31
  405c00:	65746e69 	.word	0x65746e69
  405c04:	70757272 	.word	0x70757272
  405c08:	202d2074 	.word	0x202d2074
  405c0c:	20434441 	.word	0x20434441
  405c10:	202d2030 	.word	0x202d2030
  405c14:	25206925 	.word	0x25206925
  405c18:	69252069 	.word	0x69252069
  405c1c:	20692520 	.word	0x20692520
  405c20:	25206925 	.word	0x25206925
  405c24:	0a202069 	.word	0x0a202069
  405c28:	00000000 	.word	0x00000000
  405c2c:	61746144 	.word	0x61746144
  405c30:	6c6f6320 	.word	0x6c6f6320
  405c34:	7463656c 	.word	0x7463656c
  405c38:	202c6465 	.word	0x202c6465
  405c3c:	6e75616c 	.word	0x6e75616c
  405c40:	6e696863 	.word	0x6e696863
  405c44:	6f632067 	.word	0x6f632067
  405c48:	6f72746e 	.word	0x6f72746e
  405c4c:	6f6c206c 	.word	0x6f6c206c
  405c50:	6620706f 	.word	0x6620706f
  405c54:	206d6f72 	.word	0x206d6f72
  405c58:	20636461 	.word	0x20636461
  405c5c:	00000a30 	.word	0x00000a30
  405c60:	65746e69 	.word	0x65746e69
  405c64:	70757272 	.word	0x70757272
  405c68:	202d2074 	.word	0x202d2074
  405c6c:	20434441 	.word	0x20434441
  405c70:	202d2031 	.word	0x202d2031
  405c74:	25206925 	.word	0x25206925
  405c78:	69252069 	.word	0x69252069
  405c7c:	20692520 	.word	0x20692520
  405c80:	00000a20 	.word	0x00000a20
  405c84:	61746144 	.word	0x61746144
  405c88:	6c6f6320 	.word	0x6c6f6320
  405c8c:	7463656c 	.word	0x7463656c
  405c90:	202c6465 	.word	0x202c6465
  405c94:	6e75616c 	.word	0x6e75616c
  405c98:	6e696863 	.word	0x6e696863
  405c9c:	6f632067 	.word	0x6f632067
  405ca0:	6f72746e 	.word	0x6f72746e
  405ca4:	6f6c206c 	.word	0x6f6c206c
  405ca8:	6620706f 	.word	0x6620706f
  405cac:	206d6f72 	.word	0x206d6f72
  405cb0:	20636461 	.word	0x20636461
  405cb4:	000a2031 	.word	0x000a2031
  405cb8:	204d5750 	.word	0x204d5750
  405cbc:	65746e49 	.word	0x65746e49
  405cc0:	70757272 	.word	0x70757272
  405cc4:	000a2074 	.word	0x000a2074
  405cc8:	682f2e2e 	.word	0x682f2e2e
  405ccc:	732f6c61 	.word	0x732f6c61
  405cd0:	682f6372 	.word	0x682f6372
  405cd4:	615f6c61 	.word	0x615f6c61
  405cd8:	615f6364 	.word	0x615f6364
  405cdc:	636e7973 	.word	0x636e7973
  405ce0:	0000632e 	.word	0x0000632e
  405ce4:	682f2e2e 	.word	0x682f2e2e
  405ce8:	732f6c61 	.word	0x732f6c61
  405cec:	682f6372 	.word	0x682f6372
  405cf0:	695f6c61 	.word	0x695f6c61
  405cf4:	00632e6f 	.word	0x00632e6f
  405cf8:	682f2e2e 	.word	0x682f2e2e
  405cfc:	732f6c61 	.word	0x732f6c61
  405d00:	682f6372 	.word	0x682f6372
  405d04:	705f6c61 	.word	0x705f6c61
  405d08:	632e6d77 	.word	0x632e6d77
  405d0c:	00000000 	.word	0x00000000
  405d10:	682f2e2e 	.word	0x682f2e2e
  405d14:	732f6c61 	.word	0x732f6c61
  405d18:	682f6372 	.word	0x682f6372
  405d1c:	745f6c61 	.word	0x745f6c61
  405d20:	72656d69 	.word	0x72656d69
  405d24:	0000632e 	.word	0x0000632e
  405d28:	682f2e2e 	.word	0x682f2e2e
  405d2c:	732f6c61 	.word	0x732f6c61
  405d30:	682f6372 	.word	0x682f6372
  405d34:	755f6c61 	.word	0x755f6c61
  405d38:	74726173 	.word	0x74726173
  405d3c:	6e79735f 	.word	0x6e79735f
  405d40:	00632e63 	.word	0x00632e63
  405d44:	682f2e2e 	.word	0x682f2e2e
  405d48:	752f6c61 	.word	0x752f6c61
  405d4c:	736c6974 	.word	0x736c6974
  405d50:	6372732f 	.word	0x6372732f
  405d54:	6974752f 	.word	0x6974752f
  405d58:	6c5f736c 	.word	0x6c5f736c
  405d5c:	2e747369 	.word	0x2e747369
  405d60:	00000063 	.word	0x00000063
  405d64:	682f2e2e 	.word	0x682f2e2e
  405d68:	752f6c61 	.word	0x752f6c61
  405d6c:	736c6974 	.word	0x736c6974
  405d70:	6372732f 	.word	0x6372732f
  405d74:	6974752f 	.word	0x6974752f
  405d78:	725f736c 	.word	0x725f736c
  405d7c:	62676e69 	.word	0x62676e69
  405d80:	65666675 	.word	0x65666675
  405d84:	00632e72 	.word	0x00632e72

00405d88 <_afecs>:
  405d88:	00000000 2f84310b 23000000 ffffffff     .....1./...#....
  405d98:	0000ffff 00000000 00000000 00000000     ................
  405da8:	0000010c 00000000 00000000 00000000     ................
  405db8:	00000000 00000200 00000200 00000200     ................
  405dc8:	00000200 00000200 00000200 00000200     ................
  405dd8:	00000200 00000200 00000200 00000200     ................
  405de8:	00000200 00000001 2f84310b 23000000     .........1./...#
  405df8:	ffffffff 0000ffff 00000000 00000000     ................
  405e08:	00000000 0000010c 00000000 00000000     ................
	...
  405e20:	00000200 00000200 00000200 00000200     ................
  405e30:	00000200 00000200 00000200 00000200     ................
  405e40:	00000200 00000200 00000200 00000200     ................
  405e50:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  405e60:	63656661 0000632e                       afec.c..

00405e68 <_ext_irq>:
  405e68:	00000000 00000024 00000000 00000000     ....$...........
	...
  405e84:	00000001 00002000 00002000 00002000     ..... ... ... ..
  405e94:	00000000 00002000 00000000 00000003     ..... ..........
  405ea4:	00080000 00000000 00000000 00000000     ................
	...

00405ebc <_pio_irq_n>:
  405ebc:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  405ecc:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  405edc:	00000000                                ....

00405ee0 <_pwms>:
  405ee0:	40020000 0000001f 00010019 00000001     ...@............
  405ef0:	00000001 000000ff 00000000 00000004     ................
	...
  405f0c:	00000002 00405f68 00000001 2040038c     ....h_@.......@ 
  405f1c:	4005c000 0000003c 00010019 00000001     ...@<...........
  405f2c:	00000001 000000ff 00000000 00000004     ................
	...
  405f48:	00000001 00405f58 00000001 20400380     ....X_@.......@ 

00405f58 <_ch_cfg1>:
  405f58:	00000000 0000010b 000003e8 00000200     ................

00405f68 <_ch_cfg0>:
  405f68:	00000000 0000010b 000003e8 00000200     ................
  405f78:	00000002 0000010b 000003e8 00000200     ................
  405f88:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  405f98:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  405fa8:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00405fb4 <_usarts>:
  405fb4:	00000001 001008c0 000100f4 682f2e2e     ............../h
  405fc4:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  405fd4:	632e7472 00000000                       rt.c....

00405fdc <_cfgs>:
  405fdc:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  405fec:	00000040 00000000 00000040 00000000     @.......@.......
  405ffc:	00000040 00000000 00000040 00000000     @.......@.......
  40600c:	00000040 00000000 00000040 00000000     @.......@.......
  40601c:	00000040 00000000 00000040 00000000     @.......@.......
  40602c:	00000040 00000000 00000040 00000000     @.......@.......
  40603c:	00000040 00000000 00000040 00000000     @.......@.......
  40604c:	00000040 00000000 00000040 00000000     @.......@.......
  40605c:	00000040 00000000 00000040 00000000     @.......@.......
  40606c:	00000040 00000000 00000040 00000000     @.......@.......
  40607c:	00000040 00000000 00000040 00000000     @.......@.......
  40608c:	00000040 00000000 00000040 00000000     @.......@.......

0040609c <_global_impure_ptr>:
  40609c:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  4060ac:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  4060bc:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  4060cc:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  4060dc:	4e614e00 00000000                       .NaN....

004060e4 <__sf_fake_stderr>:
	...

00406104 <__sf_fake_stdin>:
	...

00406124 <__sf_fake_stdout>:
	...

00406148 <__mprec_bigtens>:
  406148:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  406158:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  406168:	7f73bf3c 75154fdd                       <.s..O.u

00406170 <__mprec_tens>:
  406170:	00000000 3ff00000 00000000 40240000     .......?......$@
  406180:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  406190:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4061a0:	00000000 412e8480 00000000 416312d0     .......A......cA
  4061b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4061c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4061d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4061e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4061f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406200:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  406210:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406220:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406230:	79d99db4 44ea7843                       ...yCx.D

00406238 <p05.6047>:
  406238:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  406248:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  406258:	5849534f 00002e00                                OSIX...

0040625f <_ctype_>:
  40625f:	20202000 20202020 28282020 20282828     .         ((((( 
  40626f:	20202020 20202020 20202020 20202020                     
  40627f:	10108820 10101010 10101010 10101010      ...............
  40628f:	04040410 04040404 10040404 10101010     ................
  40629f:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4062af:	01010101 01010101 01010101 10101010     ................
  4062bf:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4062cf:	02020202 02020202 02020202 10101010     ................
  4062df:	00000020 00000000 00000000 00000000      ...............
	...

00406360 <_init>:
  406360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406362:	bf00      	nop
  406364:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406366:	bc08      	pop	{r3}
  406368:	469e      	mov	lr, r3
  40636a:	4770      	bx	lr

0040636c <__init_array_start>:
  40636c:	0040018d 	.word	0x0040018d

00406370 <_fini>:
  406370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406372:	bf00      	nop
  406374:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406376:	bc08      	pop	{r3}
  406378:	469e      	mov	lr, r3
  40637a:	4770      	bx	lr

0040637c <__fini_array_start>:
  40637c:	00400169 	.word	0x00400169
