
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006680  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  00406680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000520  20400218  00406898  00020218  2**2
                  ALLOC
  3 .heap         00000200  20400738  00406db8  00020218  2**0
                  ALLOC
  4 .stack        00000400  20400938  00406fb8  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002d0c8  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000058d0  00000000  00000000  0004d367  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ce5f  00000000  00000000  00052c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e78  00000000  00000000  0005fa96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d68  00000000  00000000  0006090e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00048cb7  00000000  00000000  00061676  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00020f53  00000000  00000000  000aa32d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00158e76  00000000  00000000  000cb280  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003164  00000000  00000000  002240f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	38 0d 40 20 c9 0a 40 00 c5 0a 40 00 c5 0a 40 00     8.@ ..@...@...@.
  400010:	c5 0a 40 00 c5 0a 40 00 c5 0a 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c5 0a 40 00 c5 0a 40 00 00 00 00 00 c5 0a 40 00     ..@...@.......@.
  40003c:	c5 0a 40 00 c5 0a 40 00 c5 0a 40 00 c5 0a 40 00     ..@...@...@...@.
  40004c:	c5 0a 40 00 c5 0a 40 00 c5 0a 40 00 c5 0a 40 00     ..@...@...@...@.
  40005c:	c5 0a 40 00 c5 0a 40 00 00 00 00 00 59 1f 40 00     ..@...@.....Y.@.
  40006c:	65 1f 40 00 c5 0a 40 00 c5 0a 40 00 c5 0a 40 00     e.@...@...@...@.
  40007c:	c5 0a 40 00 4d 1f 40 00 c5 0a 40 00 c5 0a 40 00     ..@.M.@...@...@.
  40008c:	c5 0a 40 00 c5 0a 40 00 c5 0a 40 00 c5 0a 40 00     ..@...@...@...@.
  40009c:	89 25 40 00 c5 0a 40 00 c5 0a 40 00 c5 0a 40 00     .%@...@...@...@.
  4000ac:	c5 0a 40 00 c5 0a 40 00 15 1b 40 00 c5 0a 40 00     ..@...@...@...@.
  4000bc:	19 21 40 00 c5 0a 40 00 c5 0a 40 00 c5 0a 40 00     .!@...@...@...@.
  4000cc:	c5 0a 40 00 c5 0a 40 00 fd 1c 40 00 c5 0a 40 00     ..@...@...@...@.
  4000dc:	c5 0a 40 00 29 1b 40 00 c5 0a 40 00 c5 0a 40 00     ..@.).@...@...@.
  4000ec:	c5 0a 40 00 c5 0a 40 00 c5 0a 40 00 c5 0a 40 00     ..@...@...@...@.
  4000fc:	c5 0a 40 00 c5 0a 40 00 c5 0a 40 00 9d 25 40 00     ..@...@...@..%@.
  40010c:	c5 0a 40 00 c5 0a 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 c5 0a 40 00 c5 0a 40 00 f9 28 40 00     ......@...@..(@.
  40012c:	c5 0a 40 00 2d 21 40 00 c5 0a 40 00 c5 0a 40 00     ..@.-!@...@...@.
  40013c:	c5 0a 40 00 c5 0a 40 00 c5 0a 40 00 c5 0a 40 00     ..@...@...@...@.
  40014c:	c5 0a 40 00 c5 0a 40 00 c5 0a 40 00 c5 0a 40 00     ..@...@...@...@.
  40015c:	c5 0a 40 00 c5 0a 40 00 c5 0a 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	00406680 	.word	0x00406680

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406680 	.word	0x00406680
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	00406680 	.word	0x00406680
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400fa1 	.word	0x00400fa1
  4001e4:	00402acd 	.word	0x00402acd

004001e8 <encoder_init>:
	
	//increment rotation counter
	encoder_num_Z_interrupts ++;
}

void encoder_init(void){
  4001e8:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4001ea:	4b56      	ldr	r3, [pc, #344]	; (400344 <encoder_init+0x15c>)
  4001ec:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4001ee:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  4001f2:	d103      	bne.n	4001fc <encoder_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4001f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4001f8:	4b52      	ldr	r3, [pc, #328]	; (400344 <encoder_init+0x15c>)
  4001fa:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4001fc:	4b51      	ldr	r3, [pc, #324]	; (400344 <encoder_init+0x15c>)
  4001fe:	699b      	ldr	r3, [r3, #24]
  400200:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400204:	d103      	bne.n	40020e <encoder_init+0x26>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400206:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40020a:	4b4e      	ldr	r3, [pc, #312]	; (400344 <encoder_init+0x15c>)
  40020c:	611a      	str	r2, [r3, #16]
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40020e:	4b4d      	ldr	r3, [pc, #308]	; (400344 <encoder_init+0x15c>)
  400210:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400214:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  400218:	d104      	bne.n	400224 <encoder_init+0x3c>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40021a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40021e:	4b49      	ldr	r3, [pc, #292]	; (400344 <encoder_init+0x15c>)
  400220:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400224:	4b47      	ldr	r3, [pc, #284]	; (400344 <encoder_init+0x15c>)
  400226:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  40022a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  40022e:	d104      	bne.n	40023a <encoder_init+0x52>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400230:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400234:	4b43      	ldr	r3, [pc, #268]	; (400344 <encoder_init+0x15c>)
  400236:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	_pmc_enable_periph_clock(ID_TC3_CHANNEL1);
	
	
	//enable external interrupt on the Z line 
	ext_irq_register(PIO_PB13_IDX,Encoder_Z_Interrupt);
  40023a:	4943      	ldr	r1, [pc, #268]	; (400348 <encoder_init+0x160>)
  40023c:	202d      	movs	r0, #45	; 0x2d
  40023e:	4b43      	ldr	r3, [pc, #268]	; (40034c <encoder_init+0x164>)
  400240:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400242:	4b43      	ldr	r3, [pc, #268]	; (400350 <encoder_init+0x168>)
  400244:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400248:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40024a:	2240      	movs	r2, #64	; 0x40
  40024c:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400250:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400258:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40025c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400260:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400264:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  40026c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400270:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400274:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400278:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40027c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400280:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400284:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400288:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40028c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400294:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400298:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40029c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4002a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4002a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002ac:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4002b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4002bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002c0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002d4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002d8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4002e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002e8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002ec:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4002f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002fc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400300:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400304:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40030c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400310:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400314:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400318:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40031c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400320:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400324:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400328:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40032c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400338:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40033c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400340:	bd08      	pop	{r3, pc}
  400342:	bf00      	nop
  400344:	400e0600 	.word	0x400e0600
  400348:	00400379 	.word	0x00400379
  40034c:	00401399 	.word	0x00401399
  400350:	e000e100 	.word	0xe000e100

00400354 <encoder_get_counter>:
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV(mask)) >> TC_CV_CV_Pos;
}

static inline hri_tc_cv_reg_t hri_tc_read_CV_CV_bf(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV_Msk) >> TC_CV_CV_Pos;
  400354:	4a06      	ldr	r2, [pc, #24]	; (400370 <encoder_get_counter+0x1c>)
  400356:	6913      	ldr	r3, [r2, #16]
  400358:	6d10      	ldr	r0, [r2, #80]	; 0x50
	//if starting offset is 0 (which is the case before it was recorded) then it returns the actual counter
	
	
	//get A (first line) and B (second line) counters
	//note that rising and falling edges could be the other way round. It doesn't matter for the current implementation
	int encoder_counter_no_offset =	  ( int) hri_tc_read_CV_CV_bf(TC0,0) + ( int) hri_tc_read_CV_CV_bf(TC0,1) \
  40035a:	4403      	add	r3, r0
  40035c:	f502 2290 	add.w	r2, r2, #294912	; 0x48000
  400360:	6910      	ldr	r0, [r2, #16]
									+ ( int) hri_tc_read_CV_CV_bf(TC3,0) + ( int) hri_tc_read_CV_CV_bf(TC3,1) \
  400362:	4403      	add	r3, r0
  400364:	6d10      	ldr	r0, [r2, #80]	; 0x50
  400366:	4403      	add	r3, r0
									- encoder_inital_offset;														//get the number of steps normalised to the starting offset
  400368:	4a02      	ldr	r2, [pc, #8]	; (400374 <encoder_get_counter+0x20>)
  40036a:	6810      	ldr	r0, [r2, #0]
								
	
	return encoder_counter_no_offset;
}
  40036c:	1a18      	subs	r0, r3, r0
  40036e:	4770      	bx	lr
  400370:	4000c000 	.word	0x4000c000
  400374:	20400500 	.word	0x20400500

00400378 <Encoder_Z_Interrupt>:
static void Encoder_Z_Interrupt (void){
  400378:	b510      	push	{r4, lr}
	int encoder_counter_no_offset = encoder_get_counter();
  40037a:	4b11      	ldr	r3, [pc, #68]	; (4003c0 <Encoder_Z_Interrupt+0x48>)
  40037c:	4798      	blx	r3
  40037e:	4604      	mov	r4, r0
	printf("Z interrupt - %i \t; offset = %i \n", encoder_counter_no_offset, encoder_inital_offset);
  400380:	4b10      	ldr	r3, [pc, #64]	; (4003c4 <Encoder_Z_Interrupt+0x4c>)
  400382:	681a      	ldr	r2, [r3, #0]
  400384:	4601      	mov	r1, r0
  400386:	4810      	ldr	r0, [pc, #64]	; (4003c8 <Encoder_Z_Interrupt+0x50>)
  400388:	4b10      	ldr	r3, [pc, #64]	; (4003cc <Encoder_Z_Interrupt+0x54>)
  40038a:	4798      	blx	r3
	if(encoder_num_Z_interrupts == 0){
  40038c:	4b10      	ldr	r3, [pc, #64]	; (4003d0 <Encoder_Z_Interrupt+0x58>)
  40038e:	681b      	ldr	r3, [r3, #0]
  400390:	b933      	cbnz	r3, 4003a0 <Encoder_Z_Interrupt+0x28>
		encoder_inital_offset = encoder_counter_no_offset;
  400392:	4b0c      	ldr	r3, [pc, #48]	; (4003c4 <Encoder_Z_Interrupt+0x4c>)
  400394:	601c      	str	r4, [r3, #0]
	encoder_num_Z_interrupts ++;
  400396:	4a0e      	ldr	r2, [pc, #56]	; (4003d0 <Encoder_Z_Interrupt+0x58>)
  400398:	6813      	ldr	r3, [r2, #0]
  40039a:	3301      	adds	r3, #1
  40039c:	6013      	str	r3, [r2, #0]
  40039e:	bd10      	pop	{r4, pc}
		unsigned int delta = encoder_counter_no_offset & (ENCODER_STEPS - 1);
  4003a0:	f3c4 040d 	ubfx	r4, r4, #0, #14
		printf("Z interrupt - delta = %i \n", delta);
  4003a4:	4621      	mov	r1, r4
  4003a6:	480b      	ldr	r0, [pc, #44]	; (4003d4 <Encoder_Z_Interrupt+0x5c>)
  4003a8:	4b08      	ldr	r3, [pc, #32]	; (4003cc <Encoder_Z_Interrupt+0x54>)
  4003aa:	4798      	blx	r3
		if( (delta <= ENCODER_MAX_DELTA) || (delta >= ENCODER_STEPS-1 - ENCODER_MAX_DELTA) ){
  4003ac:	1ee2      	subs	r2, r4, #3
  4003ae:	f643 73f9 	movw	r3, #16377	; 0x3ff9
  4003b2:	429a      	cmp	r2, r3
  4003b4:	d8ef      	bhi.n	400396 <Encoder_Z_Interrupt+0x1e>
			encoder_inital_offset += delta;
  4003b6:	4a03      	ldr	r2, [pc, #12]	; (4003c4 <Encoder_Z_Interrupt+0x4c>)
  4003b8:	6813      	ldr	r3, [r2, #0]
  4003ba:	441c      	add	r4, r3
  4003bc:	6014      	str	r4, [r2, #0]
  4003be:	e7ea      	b.n	400396 <Encoder_Z_Interrupt+0x1e>
  4003c0:	00400355 	.word	0x00400355
  4003c4:	20400500 	.word	0x20400500
  4003c8:	00405cfc 	.word	0x00405cfc
  4003cc:	00403d39 	.word	0x00403d39
  4003d0:	204004fc 	.word	0x204004fc
  4003d4:	00405d20 	.word	0x00405d20

004003d8 <encoder_get_angle>:
float encoder_get_angle(void){
  4003d8:	b508      	push	{r3, lr}
	int encoder_counter_no_offset = encoder_get_counter();
  4003da:	4b0b      	ldr	r3, [pc, #44]	; (400408 <encoder_get_angle+0x30>)
  4003dc:	4798      	blx	r3
	int current_counter = encoder_counter_no_offset & (ENCODER_STEPS - 1);
  4003de:	f3c0 000d 	ubfx	r0, r0, #0, #14
	float angl  = (2 * PI * (float) current_counter / (ENCODER_STEPS)) + ENCODER_MOUNTING_OFFSET;
  4003e2:	ee07 0a90 	vmov	s15, r0
  4003e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4003ea:	ed9f 7a08 	vldr	s14, [pc, #32]	; 40040c <encoder_get_angle+0x34>
  4003ee:	ee67 7a87 	vmul.f32	s15, s15, s14
  4003f2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 400410 <encoder_get_angle+0x38>
  4003f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
  4003fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 400414 <encoder_get_angle+0x3c>
  4003fe:	ee77 7a87 	vadd.f32	s15, s15, s14
  400402:	ee17 0a90 	vmov	r0, s15
  400406:	bd08      	pop	{r3, pc}
  400408:	00400355 	.word	0x00400355
  40040c:	40c90fdb 	.word	0x40c90fdb
  400410:	38800000 	.word	0x38800000
  400414:	00000000 	.word	0x00000000

00400418 <Position_1_Interrupt>:
	
	
	
}

static void Position_1_Interrupt (void){
  400418:	b538      	push	{r3, r4, r5, lr}
	has_triggered = true;
  40041a:	2201      	movs	r2, #1
  40041c:	4b14      	ldr	r3, [pc, #80]	; (400470 <Position_1_Interrupt+0x58>)
  40041e:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400420:	4b14      	ldr	r3, [pc, #80]	; (400474 <Position_1_Interrupt+0x5c>)
  400422:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400424:	4b14      	ldr	r3, [pc, #80]	; (400478 <Position_1_Interrupt+0x60>)
  400426:	681b      	ldr	r3, [r3, #0]
  400428:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40042a:	2b00      	cmp	r3, #0
  40042c:	dd13      	ble.n	400456 <Position_1_Interrupt+0x3e>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40042e:	2201      	movs	r2, #1
  400430:	2a00      	cmp	r2, #0
  400432:	dc13      	bgt.n	40045c <Position_1_Interrupt+0x44>
	pos_sens_deltas [0] = (float) delta / 300;
  400434:	ee07 3a90 	vmov	s15, r3
  400438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40043c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 40047c <Position_1_Interrupt+0x64>
  400440:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400444:	4b0e      	ldr	r3, [pc, #56]	; (400480 <Position_1_Interrupt+0x68>)
  400446:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  40044a:	4b0b      	ldr	r3, [pc, #44]	; (400478 <Position_1_Interrupt+0x60>)
  40044c:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	printf("POS 1\n");
  40044e:	480d      	ldr	r0, [pc, #52]	; (400484 <Position_1_Interrupt+0x6c>)
  400450:	4b0d      	ldr	r3, [pc, #52]	; (400488 <Position_1_Interrupt+0x70>)
  400452:	4798      	blx	r3
  400454:	bd38      	pop	{r3, r4, r5, pc}
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400456:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  40045a:	e7e8      	b.n	40042e <Position_1_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  40045c:	1e54      	subs	r4, r2, #1
  40045e:	4908      	ldr	r1, [pc, #32]	; (400480 <Position_1_Interrupt+0x68>)
  400460:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400464:	682d      	ldr	r5, [r5, #0]
  400466:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40046a:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40046c:	4622      	mov	r2, r4
  40046e:	e7df      	b.n	400430 <Position_1_Interrupt+0x18>
  400470:	204004f5 	.word	0x204004f5
  400474:	e000e010 	.word	0xe000e010
  400478:	20400510 	.word	0x20400510
  40047c:	43960000 	.word	0x43960000
  400480:	20400508 	.word	0x20400508
  400484:	00405d3c 	.word	0x00405d3c
  400488:	00403d39 	.word	0x00403d39

0040048c <Position_2_Interrupt>:
}

static void Position_2_Interrupt (void){
  40048c:	b430      	push	{r4, r5}
	has_triggered = true;
  40048e:	2201      	movs	r2, #1
  400490:	4b13      	ldr	r3, [pc, #76]	; (4004e0 <Position_2_Interrupt+0x54>)
  400492:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400494:	4b13      	ldr	r3, [pc, #76]	; (4004e4 <Position_2_Interrupt+0x58>)
  400496:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400498:	4b13      	ldr	r3, [pc, #76]	; (4004e8 <Position_2_Interrupt+0x5c>)
  40049a:	681b      	ldr	r3, [r3, #0]
  40049c:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40049e:	2b00      	cmp	r3, #0
  4004a0:	dd11      	ble.n	4004c6 <Position_2_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4004a2:	2201      	movs	r2, #1
  4004a4:	2a00      	cmp	r2, #0
  4004a6:	dc11      	bgt.n	4004cc <Position_2_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  4004a8:	ee07 3a90 	vmov	s15, r3
  4004ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4004b0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 4004ec <Position_2_Interrupt+0x60>
  4004b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4004b8:	4b0d      	ldr	r3, [pc, #52]	; (4004f0 <Position_2_Interrupt+0x64>)
  4004ba:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  4004be:	4b0a      	ldr	r3, [pc, #40]	; (4004e8 <Position_2_Interrupt+0x5c>)
  4004c0:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	//printf("POS 2\n");
}
  4004c2:	bc30      	pop	{r4, r5}
  4004c4:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4004c6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  4004ca:	e7ea      	b.n	4004a2 <Position_2_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  4004cc:	1e54      	subs	r4, r2, #1
  4004ce:	4908      	ldr	r1, [pc, #32]	; (4004f0 <Position_2_Interrupt+0x64>)
  4004d0:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  4004d4:	682d      	ldr	r5, [r5, #0]
  4004d6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4004da:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4004dc:	4622      	mov	r2, r4
  4004de:	e7e1      	b.n	4004a4 <Position_2_Interrupt+0x18>
  4004e0:	204004f5 	.word	0x204004f5
  4004e4:	e000e010 	.word	0xe000e010
  4004e8:	20400510 	.word	0x20400510
  4004ec:	43960000 	.word	0x43960000
  4004f0:	20400508 	.word	0x20400508

004004f4 <Position_3_Interrupt>:

static void Position_3_Interrupt (void){
  4004f4:	b538      	push	{r3, r4, r5, lr}
	has_triggered = true;
  4004f6:	2201      	movs	r2, #1
  4004f8:	4b14      	ldr	r3, [pc, #80]	; (40054c <Position_3_Interrupt+0x58>)
  4004fa:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  4004fc:	4b14      	ldr	r3, [pc, #80]	; (400550 <Position_3_Interrupt+0x5c>)
  4004fe:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400500:	4b14      	ldr	r3, [pc, #80]	; (400554 <Position_3_Interrupt+0x60>)
  400502:	681b      	ldr	r3, [r3, #0]
  400504:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400506:	2b00      	cmp	r3, #0
  400508:	dd13      	ble.n	400532 <Position_3_Interrupt+0x3e>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40050a:	2201      	movs	r2, #1
  40050c:	2a00      	cmp	r2, #0
  40050e:	dc13      	bgt.n	400538 <Position_3_Interrupt+0x44>
	pos_sens_deltas [0] = (float) delta / 300;
  400510:	ee07 3a90 	vmov	s15, r3
  400514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400518:	eddf 6a0f 	vldr	s13, [pc, #60]	; 400558 <Position_3_Interrupt+0x64>
  40051c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400520:	4b0e      	ldr	r3, [pc, #56]	; (40055c <Position_3_Interrupt+0x68>)
  400522:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  400526:	4b0b      	ldr	r3, [pc, #44]	; (400554 <Position_3_Interrupt+0x60>)
  400528:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	printf("POS 3\n");
  40052a:	480d      	ldr	r0, [pc, #52]	; (400560 <Position_3_Interrupt+0x6c>)
  40052c:	4b0d      	ldr	r3, [pc, #52]	; (400564 <Position_3_Interrupt+0x70>)
  40052e:	4798      	blx	r3
  400530:	bd38      	pop	{r3, r4, r5, pc}
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400532:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  400536:	e7e8      	b.n	40050a <Position_3_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400538:	1e54      	subs	r4, r2, #1
  40053a:	4908      	ldr	r1, [pc, #32]	; (40055c <Position_3_Interrupt+0x68>)
  40053c:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400540:	682d      	ldr	r5, [r5, #0]
  400542:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400546:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400548:	4622      	mov	r2, r4
  40054a:	e7df      	b.n	40050c <Position_3_Interrupt+0x18>
  40054c:	204004f5 	.word	0x204004f5
  400550:	e000e010 	.word	0xe000e010
  400554:	20400510 	.word	0x20400510
  400558:	43960000 	.word	0x43960000
  40055c:	20400508 	.word	0x20400508
  400560:	00405d44 	.word	0x00405d44
  400564:	00403d39 	.word	0x00403d39

00400568 <pos_sens_init>:
}

void pos_sens_init (void){
  400568:	b510      	push	{r4, lr}
	//set interrupt handlers
	ext_irq_register(PIO_PD19_IDX, Position_3_Interrupt);		//POS 3
  40056a:	4919      	ldr	r1, [pc, #100]	; (4005d0 <pos_sens_init+0x68>)
  40056c:	2073      	movs	r0, #115	; 0x73
  40056e:	4c19      	ldr	r4, [pc, #100]	; (4005d4 <pos_sens_init+0x6c>)
  400570:	47a0      	blx	r4
	ext_irq_register(PIO_PA2_IDX, Position_2_Interrupt);		//POS 2
  400572:	4919      	ldr	r1, [pc, #100]	; (4005d8 <pos_sens_init+0x70>)
  400574:	2002      	movs	r0, #2
  400576:	47a0      	blx	r4
	ext_irq_register(PIO_PA5_IDX, Position_1_Interrupt);		//POS 1
  400578:	4918      	ldr	r1, [pc, #96]	; (4005dc <pos_sens_init+0x74>)
  40057a:	2005      	movs	r0, #5
  40057c:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40057e:	4b18      	ldr	r3, [pc, #96]	; (4005e0 <pos_sens_init+0x78>)
  400580:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400584:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400586:	2220      	movs	r2, #32
  400588:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40058c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400590:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400592:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ	(PIOD_IRQn);
	NVIC_SetPriority(PIOD_IRQn, IRQ_PRIORITY_POSITION_SENS);

	
	//SysTick starting from 0
	pos_sens_last_SysTick_count = 0;
  400596:	2200      	movs	r2, #0
  400598:	4b12      	ldr	r3, [pc, #72]	; (4005e4 <pos_sens_init+0x7c>)
  40059a:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
  40059c:	4b12      	ldr	r3, [pc, #72]	; (4005e8 <pos_sens_init+0x80>)
  40059e:	609a      	str	r2, [r3, #8]
	//make the load value max, so that the overflows are as rare as possible
	SysTick->LOAD = (0xFFFFFF);
  4005a0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  4005a4:	6059      	str	r1, [r3, #4]

	this means that the moment we transition to state (POS1=1, POS2=0 POS3=0) we are at 0 electrical degrees
	*/

	// sector_lookup_table[POS3][POS2][POS1];
	sector_lookup_table[0][0][1] = 1;
  4005a6:	4b11      	ldr	r3, [pc, #68]	; (4005ec <pos_sens_init+0x84>)
  4005a8:	2101      	movs	r1, #1
  4005aa:	6059      	str	r1, [r3, #4]
	sector_lookup_table[0][1][1] = 2;
  4005ac:	2102      	movs	r1, #2
  4005ae:	60d9      	str	r1, [r3, #12]
	sector_lookup_table[0][1][0] = 3;
  4005b0:	2103      	movs	r1, #3
  4005b2:	6099      	str	r1, [r3, #8]
	sector_lookup_table[1][1][0] = 4;
  4005b4:	2104      	movs	r1, #4
  4005b6:	6199      	str	r1, [r3, #24]
	sector_lookup_table[1][0][0] = 5;
  4005b8:	2105      	movs	r1, #5
  4005ba:	6119      	str	r1, [r3, #16]
	sector_lookup_table[1][0][1] = 6;
  4005bc:	2106      	movs	r1, #6
  4005be:	6159      	str	r1, [r3, #20]
	//Error states
	sector_lookup_table[0][0][0] = -1;
  4005c0:	f04f 31ff 	mov.w	r1, #4294967295
  4005c4:	6019      	str	r1, [r3, #0]
	sector_lookup_table[1][1][1] = -1;
  4005c6:	61d9      	str	r1, [r3, #28]
	
	has_triggered = false;
  4005c8:	4b09      	ldr	r3, [pc, #36]	; (4005f0 <pos_sens_init+0x88>)
  4005ca:	701a      	strb	r2, [r3, #0]
  4005cc:	bd10      	pop	{r4, pc}
  4005ce:	bf00      	nop
  4005d0:	004004f5 	.word	0x004004f5
  4005d4:	00401399 	.word	0x00401399
  4005d8:	0040048d 	.word	0x0040048d
  4005dc:	00400419 	.word	0x00400419
  4005e0:	e000e100 	.word	0xe000e100
  4005e4:	20400510 	.word	0x20400510
  4005e8:	e000e010 	.word	0xe000e010
  4005ec:	204004cc 	.word	0x204004cc
  4005f0:	204004f5 	.word	0x204004f5

004005f4 <dma_adc_0_enable_for_one_transaction>:
	
	has_0_triggered = false;
	has_1_triggered = false;
}

void dma_adc_0_enable_for_one_transaction(void){
  4005f4:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  4005f6:	4906      	ldr	r1, [pc, #24]	; (400610 <dma_adc_0_enable_for_one_transaction+0x1c>)
  4005f8:	2000      	movs	r0, #0
  4005fa:	4b06      	ldr	r3, [pc, #24]	; (400614 <dma_adc_0_enable_for_one_transaction+0x20>)
  4005fc:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  4005fe:	2118      	movs	r1, #24
  400600:	2000      	movs	r0, #0
  400602:	4b05      	ldr	r3, [pc, #20]	; (400618 <dma_adc_0_enable_for_one_transaction+0x24>)
  400604:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  400606:	2101      	movs	r1, #1
  400608:	2000      	movs	r0, #0
  40060a:	4b04      	ldr	r3, [pc, #16]	; (40061c <dma_adc_0_enable_for_one_transaction+0x28>)
  40060c:	4798      	blx	r3
  40060e:	bd08      	pop	{r3, pc}
  400610:	20400234 	.word	0x20400234
  400614:	0040283d 	.word	0x0040283d
  400618:	0040285d 	.word	0x0040285d
  40061c:	00402875 	.word	0x00402875

00400620 <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  400620:	b530      	push	{r4, r5, lr}
  400622:	b085      	sub	sp, #20
	has_0_triggered = true;
  400624:	2201      	movs	r2, #1
  400626:	4b27      	ldr	r3, [pc, #156]	; (4006c4 <dma_adc_0_callback+0xa4>)
  400628:	701a      	strb	r2, [r3, #0]
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3], (int)dma_adc_0_buff[4],(int)dma_adc_0_buff[5]);
  40062a:	4827      	ldr	r0, [pc, #156]	; (4006c8 <dma_adc_0_callback+0xa8>)
  40062c:	6801      	ldr	r1, [r0, #0]
  40062e:	6842      	ldr	r2, [r0, #4]
  400630:	6883      	ldr	r3, [r0, #8]
  400632:	68c4      	ldr	r4, [r0, #12]
  400634:	6905      	ldr	r5, [r0, #16]
  400636:	6940      	ldr	r0, [r0, #20]
  400638:	9002      	str	r0, [sp, #8]
  40063a:	9501      	str	r5, [sp, #4]
  40063c:	9400      	str	r4, [sp, #0]
  40063e:	4823      	ldr	r0, [pc, #140]	; (4006cc <dma_adc_0_callback+0xac>)
  400640:	4c23      	ldr	r4, [pc, #140]	; (4006d0 <dma_adc_0_callback+0xb0>)
  400642:	47a0      	blx	r4
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400644:	2300      	movs	r3, #0
  400646:	e008      	b.n	40065a <dma_adc_0_callback+0x3a>
				raw_currents[1] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400648:	b292      	uxth	r2, r2
  40064a:	4922      	ldr	r1, [pc, #136]	; (4006d4 <dma_adc_0_callback+0xb4>)
  40064c:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  40064e:	491e      	ldr	r1, [pc, #120]	; (4006c8 <dma_adc_0_callback+0xa8>)
  400650:	7e0a      	ldrb	r2, [r1, #24]
  400652:	f042 0202 	orr.w	r2, r2, #2
  400656:	760a      	strb	r2, [r1, #24]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400658:	3301      	adds	r3, #1
  40065a:	2b05      	cmp	r3, #5
  40065c:	dc13      	bgt.n	400686 <dma_adc_0_callback+0x66>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  40065e:	4a1a      	ldr	r2, [pc, #104]	; (4006c8 <dma_adc_0_callback+0xa8>)
  400660:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  400664:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400668:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  40066c:	d0ec      	beq.n	400648 <dma_adc_0_callback+0x28>
  40066e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400672:	d1f1      	bne.n	400658 <dma_adc_0_callback+0x38>
				raw_currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400674:	b292      	uxth	r2, r2
  400676:	4917      	ldr	r1, [pc, #92]	; (4006d4 <dma_adc_0_callback+0xb4>)
  400678:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  40067a:	4913      	ldr	r1, [pc, #76]	; (4006c8 <dma_adc_0_callback+0xa8>)
  40067c:	7e0a      	ldrb	r2, [r1, #24]
  40067e:	f042 0201 	orr.w	r2, r2, #1
  400682:	760a      	strb	r2, [r1, #24]
				break;
  400684:	e7e8      	b.n	400658 <dma_adc_0_callback+0x38>
	if(is_dma_adc_0_continuous){
  400686:	4b14      	ldr	r3, [pc, #80]	; (4006d8 <dma_adc_0_callback+0xb8>)
  400688:	781b      	ldrb	r3, [r3, #0]
  40068a:	b92b      	cbnz	r3, 400698 <dma_adc_0_callback+0x78>
	if(ready_values == ALL_VALUES_READY){
  40068c:	4b0e      	ldr	r3, [pc, #56]	; (4006c8 <dma_adc_0_callback+0xa8>)
  40068e:	7e1b      	ldrb	r3, [r3, #24]
  400690:	2b0f      	cmp	r3, #15
  400692:	d004      	beq.n	40069e <dma_adc_0_callback+0x7e>
}
  400694:	b005      	add	sp, #20
  400696:	bd30      	pop	{r4, r5, pc}
		dma_adc_0_enable_for_one_transaction();
  400698:	4b10      	ldr	r3, [pc, #64]	; (4006dc <dma_adc_0_callback+0xbc>)
  40069a:	4798      	blx	r3
  40069c:	e7f6      	b.n	40068c <dma_adc_0_callback+0x6c>
		ready_values = 0;
  40069e:	2200      	movs	r2, #0
  4006a0:	4b09      	ldr	r3, [pc, #36]	; (4006c8 <dma_adc_0_callback+0xa8>)
  4006a2:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 0\n");
  4006a4:	480e      	ldr	r0, [pc, #56]	; (4006e0 <dma_adc_0_callback+0xc0>)
  4006a6:	4c0a      	ldr	r4, [pc, #40]	; (4006d0 <dma_adc_0_callback+0xb0>)
  4006a8:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  4006aa:	480a      	ldr	r0, [pc, #40]	; (4006d4 <dma_adc_0_callback+0xb4>)
  4006ac:	6843      	ldr	r3, [r0, #4]
  4006ae:	6802      	ldr	r2, [r0, #0]
  4006b0:	490c      	ldr	r1, [pc, #48]	; (4006e4 <dma_adc_0_callback+0xc4>)
  4006b2:	6809      	ldr	r1, [r1, #0]
  4006b4:	68c5      	ldr	r5, [r0, #12]
  4006b6:	9501      	str	r5, [sp, #4]
  4006b8:	6880      	ldr	r0, [r0, #8]
  4006ba:	9000      	str	r0, [sp, #0]
  4006bc:	480a      	ldr	r0, [pc, #40]	; (4006e8 <dma_adc_0_callback+0xc8>)
  4006be:	47a0      	blx	r4
}
  4006c0:	e7e8      	b.n	400694 <dma_adc_0_callback+0x74>
  4006c2:	bf00      	nop
  4006c4:	20400514 	.word	0x20400514
  4006c8:	20400234 	.word	0x20400234
  4006cc:	00405d4c 	.word	0x00405d4c
  4006d0:	00403d39 	.word	0x00403d39
  4006d4:	20400538 	.word	0x20400538
  4006d8:	20400534 	.word	0x20400534
  4006dc:	004005f5 	.word	0x004005f5
  4006e0:	00405d78 	.word	0x00405d78
  4006e4:	20400544 	.word	0x20400544
  4006e8:	00405dc0 	.word	0x00405dc0

004006ec <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  4006ec:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  4006ee:	4906      	ldr	r1, [pc, #24]	; (400708 <dma_adc_1_enable_for_one_transaction+0x1c>)
  4006f0:	2001      	movs	r0, #1
  4006f2:	4b06      	ldr	r3, [pc, #24]	; (40070c <dma_adc_1_enable_for_one_transaction+0x20>)
  4006f4:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  4006f6:	2110      	movs	r1, #16
  4006f8:	2001      	movs	r0, #1
  4006fa:	4b05      	ldr	r3, [pc, #20]	; (400710 <dma_adc_1_enable_for_one_transaction+0x24>)
  4006fc:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  4006fe:	2101      	movs	r1, #1
  400700:	4608      	mov	r0, r1
  400702:	4b04      	ldr	r3, [pc, #16]	; (400714 <dma_adc_1_enable_for_one_transaction+0x28>)
  400704:	4798      	blx	r3
  400706:	bd08      	pop	{r3, pc}
  400708:	20400250 	.word	0x20400250
  40070c:	0040283d 	.word	0x0040283d
  400710:	0040285d 	.word	0x0040285d
  400714:	00402875 	.word	0x00402875

00400718 <dma_adc_1_callback>:
static void dma_adc_1_callback(struct _dma_resource *resource){
  400718:	b530      	push	{r4, r5, lr}
  40071a:	b083      	sub	sp, #12
	has_1_triggered = true;
  40071c:	2201      	movs	r2, #1
  40071e:	4b25      	ldr	r3, [pc, #148]	; (4007b4 <dma_adc_1_callback+0x9c>)
  400720:	701a      	strb	r2, [r3, #0]
	printf("interrupt - ADC 1 - %i %i %i %i  \n", (int)dma_adc_1_buff[0],(int)dma_adc_1_buff[1],(int)dma_adc_1_buff[2],(int)dma_adc_1_buff[3]);
  400722:	4825      	ldr	r0, [pc, #148]	; (4007b8 <dma_adc_1_callback+0xa0>)
  400724:	69c1      	ldr	r1, [r0, #28]
  400726:	6a02      	ldr	r2, [r0, #32]
  400728:	6a43      	ldr	r3, [r0, #36]	; 0x24
  40072a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  40072c:	9000      	str	r0, [sp, #0]
  40072e:	4823      	ldr	r0, [pc, #140]	; (4007bc <dma_adc_1_callback+0xa4>)
  400730:	4c23      	ldr	r4, [pc, #140]	; (4007c0 <dma_adc_1_callback+0xa8>)
  400732:	47a0      	blx	r4
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400734:	2300      	movs	r3, #0
  400736:	e008      	b.n	40074a <dma_adc_1_callback+0x32>
				raw_currents[2] = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400738:	b292      	uxth	r2, r2
  40073a:	4922      	ldr	r1, [pc, #136]	; (4007c4 <dma_adc_1_callback+0xac>)
  40073c:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  40073e:	491e      	ldr	r1, [pc, #120]	; (4007b8 <dma_adc_1_callback+0xa0>)
  400740:	7e0a      	ldrb	r2, [r1, #24]
  400742:	f042 0204 	orr.w	r2, r2, #4
  400746:	760a      	strb	r2, [r1, #24]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400748:	3301      	adds	r3, #1
  40074a:	2b03      	cmp	r3, #3
  40074c:	dc14      	bgt.n	400778 <dma_adc_1_callback+0x60>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  40074e:	4a1a      	ldr	r2, [pc, #104]	; (4007b8 <dma_adc_1_callback+0xa0>)
  400750:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  400754:	69d2      	ldr	r2, [r2, #28]
  400756:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  40075a:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  40075e:	d0eb      	beq.n	400738 <dma_adc_1_callback+0x20>
  400760:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  400764:	d1f0      	bne.n	400748 <dma_adc_1_callback+0x30>
				raw_voltage = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400766:	b292      	uxth	r2, r2
  400768:	4917      	ldr	r1, [pc, #92]	; (4007c8 <dma_adc_1_callback+0xb0>)
  40076a:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<3);
  40076c:	4912      	ldr	r1, [pc, #72]	; (4007b8 <dma_adc_1_callback+0xa0>)
  40076e:	7e0a      	ldrb	r2, [r1, #24]
  400770:	f042 0208 	orr.w	r2, r2, #8
  400774:	760a      	strb	r2, [r1, #24]
				break;
  400776:	e7e7      	b.n	400748 <dma_adc_1_callback+0x30>
	if(is_dma_adc_1_continuous){
  400778:	4b14      	ldr	r3, [pc, #80]	; (4007cc <dma_adc_1_callback+0xb4>)
  40077a:	781b      	ldrb	r3, [r3, #0]
  40077c:	b92b      	cbnz	r3, 40078a <dma_adc_1_callback+0x72>
	if(ready_values == ALL_VALUES_READY){
  40077e:	4b0e      	ldr	r3, [pc, #56]	; (4007b8 <dma_adc_1_callback+0xa0>)
  400780:	7e1b      	ldrb	r3, [r3, #24]
  400782:	2b0f      	cmp	r3, #15
  400784:	d004      	beq.n	400790 <dma_adc_1_callback+0x78>
}
  400786:	b003      	add	sp, #12
  400788:	bd30      	pop	{r4, r5, pc}
		dma_adc_1_enable_for_one_transaction();
  40078a:	4b11      	ldr	r3, [pc, #68]	; (4007d0 <dma_adc_1_callback+0xb8>)
  40078c:	4798      	blx	r3
  40078e:	e7f6      	b.n	40077e <dma_adc_1_callback+0x66>
		ready_values = 0;
  400790:	2200      	movs	r2, #0
  400792:	4b09      	ldr	r3, [pc, #36]	; (4007b8 <dma_adc_1_callback+0xa0>)
  400794:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 1 \n");
  400796:	480f      	ldr	r0, [pc, #60]	; (4007d4 <dma_adc_1_callback+0xbc>)
  400798:	4c09      	ldr	r4, [pc, #36]	; (4007c0 <dma_adc_1_callback+0xa8>)
  40079a:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  40079c:	4809      	ldr	r0, [pc, #36]	; (4007c4 <dma_adc_1_callback+0xac>)
  40079e:	6843      	ldr	r3, [r0, #4]
  4007a0:	6802      	ldr	r2, [r0, #0]
  4007a2:	4909      	ldr	r1, [pc, #36]	; (4007c8 <dma_adc_1_callback+0xb0>)
  4007a4:	6809      	ldr	r1, [r1, #0]
  4007a6:	68c5      	ldr	r5, [r0, #12]
  4007a8:	9501      	str	r5, [sp, #4]
  4007aa:	6880      	ldr	r0, [r0, #8]
  4007ac:	9000      	str	r0, [sp, #0]
  4007ae:	480a      	ldr	r0, [pc, #40]	; (4007d8 <dma_adc_1_callback+0xc0>)
  4007b0:	47a0      	blx	r4
}
  4007b2:	e7e8      	b.n	400786 <dma_adc_1_callback+0x6e>
  4007b4:	204004f4 	.word	0x204004f4
  4007b8:	20400234 	.word	0x20400234
  4007bc:	00405dac 	.word	0x00405dac
  4007c0:	00403d39 	.word	0x00403d39
  4007c4:	20400538 	.word	0x20400538
  4007c8:	20400544 	.word	0x20400544
  4007cc:	20400520 	.word	0x20400520
  4007d0:	004006ed 	.word	0x004006ed
  4007d4:	00405dd0 	.word	0x00405dd0
  4007d8:	00405dc0 	.word	0x00405dc0

004007dc <dma_adc_0_disable_continuously>:
	is_dma_adc_1_continuous = true;
	dma_adc_1_enable_for_one_transaction();
}

void dma_adc_0_disable_continuously(void){
	is_dma_adc_0_continuous = false;
  4007dc:	2200      	movs	r2, #0
  4007de:	4b01      	ldr	r3, [pc, #4]	; (4007e4 <dma_adc_0_disable_continuously+0x8>)
  4007e0:	701a      	strb	r2, [r3, #0]
  4007e2:	4770      	bx	lr
  4007e4:	20400534 	.word	0x20400534

004007e8 <dma_adc_1_disable_continuously>:
}
void dma_adc_1_disable_continuously(void){
	is_dma_adc_1_continuous = false;
  4007e8:	2200      	movs	r2, #0
  4007ea:	4b01      	ldr	r3, [pc, #4]	; (4007f0 <dma_adc_1_disable_continuously+0x8>)
  4007ec:	701a      	strb	r2, [r3, #0]
  4007ee:	4770      	bx	lr
  4007f0:	20400520 	.word	0x20400520

004007f4 <dma_adc_init>:
void dma_adc_init(void){
  4007f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  4007f8:	492a      	ldr	r1, [pc, #168]	; (4008a4 <dma_adc_init+0xb0>)
  4007fa:	2000      	movs	r0, #0
  4007fc:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 4008d8 <dma_adc_init+0xe4>
  400800:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  400802:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4008dc <dma_adc_init+0xe8>
  400806:	4641      	mov	r1, r8
  400808:	2000      	movs	r0, #0
  40080a:	4f27      	ldr	r7, [pc, #156]	; (4008a8 <dma_adc_init+0xb4>)
  40080c:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  40080e:	2118      	movs	r1, #24
  400810:	2000      	movs	r0, #0
  400812:	4d26      	ldr	r5, [pc, #152]	; (4008ac <dma_adc_init+0xb8>)
  400814:	47a8      	blx	r5
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  400816:	2100      	movs	r1, #0
  400818:	460c      	mov	r4, r1
  40081a:	4608      	mov	r0, r1
  40081c:	4e24      	ldr	r6, [pc, #144]	; (4008b0 <dma_adc_init+0xbc>)
  40081e:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  400820:	6823      	ldr	r3, [r4, #0]
  400822:	4a24      	ldr	r2, [pc, #144]	; (4008b4 <dma_adc_init+0xc0>)
  400824:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400826:	2201      	movs	r2, #1
  400828:	4621      	mov	r1, r4
  40082a:	4620      	mov	r0, r4
  40082c:	4c22      	ldr	r4, [pc, #136]	; (4008b8 <dma_adc_init+0xc4>)
  40082e:	47a0      	blx	r4
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  400830:	4922      	ldr	r1, [pc, #136]	; (4008bc <dma_adc_init+0xc8>)
  400832:	2001      	movs	r0, #1
  400834:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400836:	f108 011c 	add.w	r1, r8, #28
  40083a:	2001      	movs	r0, #1
  40083c:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  40083e:	2110      	movs	r1, #16
  400840:	2001      	movs	r0, #1
  400842:	47a8      	blx	r5
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  400844:	2101      	movs	r1, #1
  400846:	2500      	movs	r5, #0
  400848:	4628      	mov	r0, r5
  40084a:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  40084c:	682b      	ldr	r3, [r5, #0]
  40084e:	4a1c      	ldr	r2, [pc, #112]	; (4008c0 <dma_adc_init+0xcc>)
  400850:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400852:	2201      	movs	r2, #1
  400854:	4629      	mov	r1, r5
  400856:	4610      	mov	r0, r2
  400858:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40085a:	4b1a      	ldr	r3, [pc, #104]	; (4008c4 <dma_adc_init+0xd0>)
  40085c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400860:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400862:	2280      	movs	r2, #128	; 0x80
  400864:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400868:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40086c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400870:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400874:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400878:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40087c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400884:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400888:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40088c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	dma_adc_0_disable_continuously();
  400890:	4b0d      	ldr	r3, [pc, #52]	; (4008c8 <dma_adc_init+0xd4>)
  400892:	4798      	blx	r3
	dma_adc_1_disable_continuously();
  400894:	4b0d      	ldr	r3, [pc, #52]	; (4008cc <dma_adc_init+0xd8>)
  400896:	4798      	blx	r3
	has_0_triggered = false;
  400898:	4a0d      	ldr	r2, [pc, #52]	; (4008d0 <dma_adc_init+0xdc>)
  40089a:	7015      	strb	r5, [r2, #0]
	has_1_triggered = false;
  40089c:	4a0d      	ldr	r2, [pc, #52]	; (4008d4 <dma_adc_init+0xe0>)
  40089e:	7015      	strb	r5, [r2, #0]
  4008a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008a4:	4003c020 	.word	0x4003c020
  4008a8:	0040283d 	.word	0x0040283d
  4008ac:	0040285d 	.word	0x0040285d
  4008b0:	0040288d 	.word	0x0040288d
  4008b4:	00400621 	.word	0x00400621
  4008b8:	004028a1 	.word	0x004028a1
  4008bc:	40064020 	.word	0x40064020
  4008c0:	00400719 	.word	0x00400719
  4008c4:	e000e100 	.word	0xe000e100
  4008c8:	004007dd 	.word	0x004007dd
  4008cc:	004007e9 	.word	0x004007e9
  4008d0:	20400514 	.word	0x20400514
  4008d4:	204004f4 	.word	0x204004f4
  4008d8:	0040284d 	.word	0x0040284d
  4008dc:	20400234 	.word	0x20400234

004008e0 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  4008e0:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  4008e2:	4d11      	ldr	r5, [pc, #68]	; (400928 <adc_enable_all+0x48>)
  4008e4:	2108      	movs	r1, #8
  4008e6:	4628      	mov	r0, r5
  4008e8:	4c10      	ldr	r4, [pc, #64]	; (40092c <adc_enable_all+0x4c>)
  4008ea:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  4008ec:	2102      	movs	r1, #2
  4008ee:	4628      	mov	r0, r5
  4008f0:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  4008f2:	4e0f      	ldr	r6, [pc, #60]	; (400930 <adc_enable_all+0x50>)
  4008f4:	2101      	movs	r1, #1
  4008f6:	4630      	mov	r0, r6
  4008f8:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  4008fa:	2106      	movs	r1, #6
  4008fc:	4630      	mov	r0, r6
  4008fe:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  400900:	2105      	movs	r1, #5
  400902:	4630      	mov	r0, r6
  400904:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  400906:	2106      	movs	r1, #6
  400908:	4628      	mov	r0, r5
  40090a:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  40090c:	210a      	movs	r1, #10
  40090e:	4628      	mov	r0, r5
  400910:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  400912:	2100      	movs	r1, #0
  400914:	4630      	mov	r0, r6
  400916:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  400918:	2105      	movs	r1, #5
  40091a:	4628      	mov	r0, r5
  40091c:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  40091e:	2100      	movs	r1, #0
  400920:	4628      	mov	r0, r5
  400922:	47a0      	blx	r4
  400924:	bd70      	pop	{r4, r5, r6, pc}
  400926:	bf00      	nop
  400928:	20400630 	.word	0x20400630
  40092c:	00401291 	.word	0x00401291
  400930:	20400708 	.word	0x20400708

00400934 <pwm_0_callback>:
#include <hpl_pwm_config.h>

int counter = 0;

void pwm_0_callback(const struct pwm_descriptor *const descr){
	counter ++;
  400934:	4a05      	ldr	r2, [pc, #20]	; (40094c <pwm_0_callback+0x18>)
  400936:	6813      	ldr	r3, [r2, #0]
  400938:	3301      	adds	r3, #1
  40093a:	6013      	str	r3, [r2, #0]
	if (counter > 3000){
  40093c:	f640 32b8 	movw	r2, #3000	; 0xbb8
  400940:	4293      	cmp	r3, r2
  400942:	dd02      	ble.n	40094a <pwm_0_callback+0x16>
		counter = 0;
  400944:	2200      	movs	r2, #0
  400946:	4b01      	ldr	r3, [pc, #4]	; (40094c <pwm_0_callback+0x18>)
  400948:	601a      	str	r2, [r3, #0]
  40094a:	4770      	bx	lr
  40094c:	20400260 	.word	0x20400260

00400950 <pwm_init_user>:
		//printf("PWM Interrupt \n");
	}
}


void pwm_init_user(void){
  400950:	b508      	push	{r3, lr}
}

static inline void hri_pwm_set_CMR_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmr_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400952:	4b2e      	ldr	r3, [pc, #184]	; (400a0c <pwm_init_user+0xbc>)
  400954:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  400958:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40095c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}

static inline void hri_pwm_set_DT_DTH_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400960:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400964:	f042 020a 	orr.w	r2, r2, #10
  400968:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
}

static inline void hri_pwm_set_DT_DTL_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  40096c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400970:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  400974:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400978:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
  40097c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400980:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400984:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400988:	f042 020a 	orr.w	r2, r2, #10
  40098c:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400990:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400994:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  400998:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  40099c:	4a1c      	ldr	r2, [pc, #112]	; (400a10 <pwm_init_user+0xc0>)
  40099e:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  4009a2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4009a6:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  4009aa:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  4009ae:	f041 010a 	orr.w	r1, r1, #10
  4009b2:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  4009b6:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  4009ba:	f441 2120 	orr.w	r1, r1, #655360	; 0xa0000
  4009be:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
}

static inline void hri_pwm_set_CMPV_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmpv_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV |= mask;
  4009c2:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
  4009c6:	f041 0101 	orr.w	r1, r1, #1
  4009ca:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  4009ce:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
  4009d2:	f041 0101 	orr.w	r1, r1, #1
  4009d6:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  4009da:	2201      	movs	r2, #1
  4009dc:	611a      	str	r2, [r3, #16]
	
	
	//we want interrupt from one of the PWMs so that we can start the control loop
	//interrupt on PWM 0, channel 0 is enabled ; on PWM 1 is disabled
	hri_pwm_set_IMR1_CHID0_bit(PWM0);									//enable the interrupt from ADC 0, channel 0
	pwm_register_callback(&PWM_0, PWM_PERIOD_CB, pwm_0_callback);
  4009de:	4a0d      	ldr	r2, [pc, #52]	; (400a14 <pwm_init_user+0xc4>)
  4009e0:	2100      	movs	r1, #0
  4009e2:	480d      	ldr	r0, [pc, #52]	; (400a18 <pwm_init_user+0xc8>)
  4009e4:	4b0d      	ldr	r3, [pc, #52]	; (400a1c <pwm_init_user+0xcc>)
  4009e6:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4009e8:	4b0d      	ldr	r3, [pc, #52]	; (400a20 <pwm_init_user+0xd0>)
  4009ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4009ee:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4009f0:	2260      	movs	r2, #96	; 0x60
  4009f2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4009f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4009fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4009fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a02:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a06:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400a0a:	bd08      	pop	{r3, pc}
  400a0c:	40020000 	.word	0x40020000
  400a10:	4005c000 	.word	0x4005c000
  400a14:	00400935 	.word	0x00400935
  400a18:	20400548 	.word	0x20400548
  400a1c:	0040155d 	.word	0x0040155d
  400a20:	e000e100 	.word	0xe000e100

00400a24 <pwm_enable_all>:
}


//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400a24:	b570      	push	{r4, r5, r6, lr}
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM |= mask;
  400a26:	4a12      	ldr	r2, [pc, #72]	; (400a70 <pwm_enable_all+0x4c>)
  400a28:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400a2c:	f043 0301 	orr.w	r3, r3, #1
  400a30:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
  400a34:	f502 3270 	add.w	r2, r2, #245760	; 0x3c000
  400a38:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400a3c:	f043 0301 	orr.w	r3, r3, #1
  400a40:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	hri_pwm_set_CMPM_reg(PWM0, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	hri_pwm_set_CMPM_reg(PWM1, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  400a44:	4c0b      	ldr	r4, [pc, #44]	; (400a74 <pwm_enable_all+0x50>)
  400a46:	4620      	mov	r0, r4
  400a48:	4e0b      	ldr	r6, [pc, #44]	; (400a78 <pwm_enable_all+0x54>)
  400a4a:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  400a4c:	4d0b      	ldr	r5, [pc, #44]	; (400a7c <pwm_enable_all+0x58>)
  400a4e:	4628      	mov	r0, r5
  400a50:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  400a52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400a56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400a5a:	4620      	mov	r0, r4
  400a5c:	4c08      	ldr	r4, [pc, #32]	; (400a80 <pwm_enable_all+0x5c>)
  400a5e:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD>>1);
  400a60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400a64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400a68:	4628      	mov	r0, r5
  400a6a:	47a0      	blx	r4
  400a6c:	bd70      	pop	{r4, r5, r6, pc}
  400a6e:	bf00      	nop
  400a70:	40020000 	.word	0x40020000
  400a74:	20400548 	.word	0x20400548
  400a78:	00401521 	.word	0x00401521
  400a7c:	204006ec 	.word	0x204006ec
  400a80:	004015a5 	.word	0x004015a5

00400a84 <Encoder_Initial_Test>:
		gpio_set_pin_level(PIN_GPIO_6, false);
		delay_ms(500);
	}
}

void Encoder_Initial_Test(void){
  400a84:	b510      	push	{r4, lr}
	while(1){
		int enccntr = encoder_get_counter();
  400a86:	4b09      	ldr	r3, [pc, #36]	; (400aac <Encoder_Initial_Test+0x28>)
  400a88:	4798      	blx	r3
  400a8a:	4604      	mov	r4, r0
		float encangle = encoder_get_angle();
  400a8c:	4b08      	ldr	r3, [pc, #32]	; (400ab0 <Encoder_Initial_Test+0x2c>)
  400a8e:	4798      	blx	r3
		printf("Encoder counter = %i \t; angle = %f \n", enccntr, encangle);
  400a90:	4b08      	ldr	r3, [pc, #32]	; (400ab4 <Encoder_Initial_Test+0x30>)
  400a92:	4798      	blx	r3
  400a94:	4602      	mov	r2, r0
  400a96:	460b      	mov	r3, r1
  400a98:	4621      	mov	r1, r4
  400a9a:	4807      	ldr	r0, [pc, #28]	; (400ab8 <Encoder_Initial_Test+0x34>)
  400a9c:	4c07      	ldr	r4, [pc, #28]	; (400abc <Encoder_Initial_Test+0x38>)
  400a9e:	47a0      	blx	r4
		
		//printf("Encoder A = \t %u ; \t %u \n"  , (unsigned int) hri_tc_read_CV_CV_bf(TC0,0) , (unsigned int) hri_tc_read_CV_CV_bf(TC0,1));
		//printf("Encoder B = \t %u ; \t %u \n\n", (unsigned int) hri_tc_read_CV_CV_bf(TC3,0) , (unsigned int) hri_tc_read_CV_CV_bf(TC3,1));
		
		
		delay_ms(3000);
  400aa0:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400aa4:	4b06      	ldr	r3, [pc, #24]	; (400ac0 <Encoder_Initial_Test+0x3c>)
  400aa6:	4798      	blx	r3
  400aa8:	e7ed      	b.n	400a86 <Encoder_Initial_Test+0x2>
  400aaa:	bf00      	nop
  400aac:	00400355 	.word	0x00400355
  400ab0:	004003d9 	.word	0x004003d9
  400ab4:	00402db5 	.word	0x00402db5
  400ab8:	00405fa4 	.word	0x00405fa4
  400abc:	00403d39 	.word	0x00403d39
  400ac0:	00401301 	.word	0x00401301

00400ac4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400ac4:	e7fe      	b.n	400ac4 <Dummy_Handler>
	...

00400ac8 <Reset_Handler>:
{
  400ac8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400aca:	4b10      	ldr	r3, [pc, #64]	; (400b0c <Reset_Handler+0x44>)
  400acc:	4a10      	ldr	r2, [pc, #64]	; (400b10 <Reset_Handler+0x48>)
  400ace:	429a      	cmp	r2, r3
  400ad0:	d009      	beq.n	400ae6 <Reset_Handler+0x1e>
  400ad2:	4b0e      	ldr	r3, [pc, #56]	; (400b0c <Reset_Handler+0x44>)
  400ad4:	4a0e      	ldr	r2, [pc, #56]	; (400b10 <Reset_Handler+0x48>)
  400ad6:	e003      	b.n	400ae0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400ad8:	6811      	ldr	r1, [r2, #0]
  400ada:	6019      	str	r1, [r3, #0]
  400adc:	3304      	adds	r3, #4
  400ade:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400ae0:	490c      	ldr	r1, [pc, #48]	; (400b14 <Reset_Handler+0x4c>)
  400ae2:	428b      	cmp	r3, r1
  400ae4:	d3f8      	bcc.n	400ad8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400ae6:	4b0c      	ldr	r3, [pc, #48]	; (400b18 <Reset_Handler+0x50>)
  400ae8:	e002      	b.n	400af0 <Reset_Handler+0x28>
                *pDest++ = 0;
  400aea:	2200      	movs	r2, #0
  400aec:	601a      	str	r2, [r3, #0]
  400aee:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400af0:	4a0a      	ldr	r2, [pc, #40]	; (400b1c <Reset_Handler+0x54>)
  400af2:	4293      	cmp	r3, r2
  400af4:	d3f9      	bcc.n	400aea <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400af6:	4a0a      	ldr	r2, [pc, #40]	; (400b20 <Reset_Handler+0x58>)
  400af8:	4b0a      	ldr	r3, [pc, #40]	; (400b24 <Reset_Handler+0x5c>)
  400afa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400afe:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400b00:	4b09      	ldr	r3, [pc, #36]	; (400b28 <Reset_Handler+0x60>)
  400b02:	4798      	blx	r3
        main();
  400b04:	4b09      	ldr	r3, [pc, #36]	; (400b2c <Reset_Handler+0x64>)
  400b06:	4798      	blx	r3
  400b08:	e7fe      	b.n	400b08 <Reset_Handler+0x40>
  400b0a:	bf00      	nop
  400b0c:	20400000 	.word	0x20400000
  400b10:	00406680 	.word	0x00406680
  400b14:	20400218 	.word	0x20400218
  400b18:	20400218 	.word	0x20400218
  400b1c:	20400738 	.word	0x20400738
  400b20:	e000ed00 	.word	0xe000ed00
  400b24:	00400000 	.word	0x00400000
  400b28:	0040340d 	.word	0x0040340d
  400b2c:	00402965 	.word	0x00402965

00400b30 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  400b30:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b32:	b085      	sub	sp, #20
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400b34:	4b20      	ldr	r3, [pc, #128]	; (400bb8 <ADC_1_init+0x88>)
  400b36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  400b3a:	f413 7f80 	tst.w	r3, #256	; 0x100
  400b3e:	d104      	bne.n	400b4a <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400b40:	f44f 7280 	mov.w	r2, #256	; 0x100
  400b44:	4b1c      	ldr	r3, [pc, #112]	; (400bb8 <ADC_1_init+0x88>)
  400b46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  400b4a:	4d1c      	ldr	r5, [pc, #112]	; (400bbc <ADC_1_init+0x8c>)
  400b4c:	4c1c      	ldr	r4, [pc, #112]	; (400bc0 <ADC_1_init+0x90>)
  400b4e:	2600      	movs	r6, #0
  400b50:	9602      	str	r6, [sp, #8]
  400b52:	4b1c      	ldr	r3, [pc, #112]	; (400bc4 <ADC_1_init+0x94>)
  400b54:	9301      	str	r3, [sp, #4]
  400b56:	2304      	movs	r3, #4
  400b58:	9300      	str	r3, [sp, #0]
  400b5a:	2306      	movs	r3, #6
  400b5c:	462a      	mov	r2, r5
  400b5e:	491a      	ldr	r1, [pc, #104]	; (400bc8 <ADC_1_init+0x98>)
  400b60:	4620      	mov	r0, r4
  400b62:	4f1a      	ldr	r7, [pc, #104]	; (400bcc <ADC_1_init+0x9c>)
  400b64:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  400b66:	2310      	movs	r3, #16
  400b68:	f105 0208 	add.w	r2, r5, #8
  400b6c:	4631      	mov	r1, r6
  400b6e:	4620      	mov	r0, r4
  400b70:	4e17      	ldr	r6, [pc, #92]	; (400bd0 <ADC_1_init+0xa0>)
  400b72:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  400b74:	2310      	movs	r3, #16
  400b76:	f105 0218 	add.w	r2, r5, #24
  400b7a:	2101      	movs	r1, #1
  400b7c:	4620      	mov	r0, r4
  400b7e:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  400b80:	2310      	movs	r3, #16
  400b82:	f105 0228 	add.w	r2, r5, #40	; 0x28
  400b86:	2105      	movs	r1, #5
  400b88:	4620      	mov	r0, r4
  400b8a:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  400b8c:	2310      	movs	r3, #16
  400b8e:	f105 0238 	add.w	r2, r5, #56	; 0x38
  400b92:	2106      	movs	r1, #6
  400b94:	4620      	mov	r0, r4
  400b96:	47b0      	blx	r6
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400b98:	2202      	movs	r2, #2
  400b9a:	4b0e      	ldr	r3, [pc, #56]	; (400bd4 <ADC_1_init+0xa4>)
  400b9c:	601a      	str	r2, [r3, #0]
  400b9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400ba6:	601a      	str	r2, [r3, #0]
  400ba8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400bac:	601a      	str	r2, [r3, #0]
  400bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400bb2:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  400bb4:	b005      	add	sp, #20
  400bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400bb8:	400e0600 	.word	0x400e0600
  400bbc:	20400264 	.word	0x20400264
  400bc0:	20400708 	.word	0x20400708
  400bc4:	204005a8 	.word	0x204005a8
  400bc8:	40064000 	.word	0x40064000
  400bcc:	00401131 	.word	0x00401131
  400bd0:	004011d9 	.word	0x004011d9
  400bd4:	400e1000 	.word	0x400e1000

00400bd8 <ADC_0_init>:
{
  400bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400bdc:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400bde:	4b2a      	ldr	r3, [pc, #168]	; (400c88 <ADC_0_init+0xb0>)
  400be0:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400be2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400be6:	d103      	bne.n	400bf0 <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400be8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400bec:	4b26      	ldr	r3, [pc, #152]	; (400c88 <ADC_0_init+0xb0>)
  400bee:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  400bf0:	4d26      	ldr	r5, [pc, #152]	; (400c8c <ADC_0_init+0xb4>)
  400bf2:	4c27      	ldr	r4, [pc, #156]	; (400c90 <ADC_0_init+0xb8>)
  400bf4:	2600      	movs	r6, #0
  400bf6:	9602      	str	r6, [sp, #8]
  400bf8:	4b26      	ldr	r3, [pc, #152]	; (400c94 <ADC_0_init+0xbc>)
  400bfa:	9301      	str	r3, [sp, #4]
  400bfc:	2706      	movs	r7, #6
  400bfe:	9700      	str	r7, [sp, #0]
  400c00:	230a      	movs	r3, #10
  400c02:	f105 0248 	add.w	r2, r5, #72	; 0x48
  400c06:	4924      	ldr	r1, [pc, #144]	; (400c98 <ADC_0_init+0xc0>)
  400c08:	4620      	mov	r0, r4
  400c0a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 400ca8 <ADC_0_init+0xd0>
  400c0e:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  400c10:	2310      	movs	r3, #16
  400c12:	f105 0254 	add.w	r2, r5, #84	; 0x54
  400c16:	4631      	mov	r1, r6
  400c18:	4620      	mov	r0, r4
  400c1a:	4e20      	ldr	r6, [pc, #128]	; (400c9c <ADC_0_init+0xc4>)
  400c1c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  400c1e:	2310      	movs	r3, #16
  400c20:	f105 0264 	add.w	r2, r5, #100	; 0x64
  400c24:	2102      	movs	r1, #2
  400c26:	4620      	mov	r0, r4
  400c28:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  400c2a:	2310      	movs	r3, #16
  400c2c:	f105 0274 	add.w	r2, r5, #116	; 0x74
  400c30:	2105      	movs	r1, #5
  400c32:	4620      	mov	r0, r4
  400c34:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  400c36:	2310      	movs	r3, #16
  400c38:	f105 0284 	add.w	r2, r5, #132	; 0x84
  400c3c:	4639      	mov	r1, r7
  400c3e:	4620      	mov	r0, r4
  400c40:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  400c42:	2310      	movs	r3, #16
  400c44:	f105 0294 	add.w	r2, r5, #148	; 0x94
  400c48:	2108      	movs	r1, #8
  400c4a:	4620      	mov	r0, r4
  400c4c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  400c4e:	2310      	movs	r3, #16
  400c50:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  400c54:	210a      	movs	r1, #10
  400c56:	4620      	mov	r0, r4
  400c58:	47b0      	blx	r6
  400c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400c5e:	4b10      	ldr	r3, [pc, #64]	; (400ca0 <ADC_0_init+0xc8>)
  400c60:	601a      	str	r2, [r3, #0]
  400c62:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400c66:	2208      	movs	r2, #8
  400c68:	601a      	str	r2, [r3, #0]
  400c6a:	2204      	movs	r2, #4
  400c6c:	601a      	str	r2, [r3, #0]
  400c6e:	4a0d      	ldr	r2, [pc, #52]	; (400ca4 <ADC_0_init+0xcc>)
  400c70:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400c74:	6011      	str	r1, [r2, #0]
  400c76:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400c7a:	6011      	str	r1, [r2, #0]
  400c7c:	2201      	movs	r2, #1
  400c7e:	601a      	str	r2, [r3, #0]
}
  400c80:	b004      	add	sp, #16
  400c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c86:	bf00      	nop
  400c88:	400e0600 	.word	0x400e0600
  400c8c:	20400264 	.word	0x20400264
  400c90:	20400630 	.word	0x20400630
  400c94:	2040065c 	.word	0x2040065c
  400c98:	4003c000 	.word	0x4003c000
  400c9c:	004011d9 	.word	0x004011d9
  400ca0:	400e1400 	.word	0x400e1400
  400ca4:	400e0e00 	.word	0x400e0e00
  400ca8:	00401131 	.word	0x00401131

00400cac <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400cac:	4b04      	ldr	r3, [pc, #16]	; (400cc0 <EXTERNAL_IRQ_D_init+0x14>)
  400cae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400cb2:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  400cb4:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  400cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400cba:	601a      	str	r2, [r3, #0]
  400cbc:	4770      	bx	lr
  400cbe:	bf00      	nop
  400cc0:	400e1400 	.word	0x400e1400

00400cc4 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400cc4:	4b06      	ldr	r3, [pc, #24]	; (400ce0 <EXTERNAL_IRQ_A_init+0x1c>)
  400cc6:	2204      	movs	r2, #4
  400cc8:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400cca:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400ccc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400cd0:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400cd2:	2220      	movs	r2, #32
  400cd4:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400cd6:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400cd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400cdc:	601a      	str	r2, [r3, #0]
  400cde:	4770      	bx	lr
  400ce0:	400e0e00 	.word	0x400e0e00

00400ce4 <EXTERNAL_IRQ_B_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400ce4:	4b04      	ldr	r3, [pc, #16]	; (400cf8 <EXTERNAL_IRQ_B_init+0x14>)
  400ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400cea:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400cec:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400cee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400cf2:	601a      	str	r2, [r3, #0]
  400cf4:	4770      	bx	lr
  400cf6:	bf00      	nop
  400cf8:	400e1000 	.word	0x400e1000

00400cfc <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400cfc:	4b16      	ldr	r3, [pc, #88]	; (400d58 <PWM_0_PORT_init+0x5c>)
  400cfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400d04:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d06:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d08:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  400d0c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400d12:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400d14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d16:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  400d1a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d1c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d1e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400d22:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400d28:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d2c:	f022 0202 	bic.w	r2, r2, #2
  400d30:	671a      	str	r2, [r3, #112]	; 0x70
  400d32:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d34:	f022 0202 	bic.w	r2, r2, #2
  400d38:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d3a:	2202      	movs	r2, #2
  400d3c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d40:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400d44:	671a      	str	r2, [r3, #112]	; 0x70
  400d46:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d48:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400d4c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400d52:	605a      	str	r2, [r3, #4]
  400d54:	4770      	bx	lr
  400d56:	bf00      	nop
  400d58:	400e0e00 	.word	0x400e0e00

00400d5c <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400d5c:	4b04      	ldr	r3, [pc, #16]	; (400d70 <PWM_0_CLOCK_init+0x14>)
  400d5e:	699b      	ldr	r3, [r3, #24]
  400d60:	2b00      	cmp	r3, #0
  400d62:	db03      	blt.n	400d6c <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400d64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400d68:	4b01      	ldr	r3, [pc, #4]	; (400d70 <PWM_0_CLOCK_init+0x14>)
  400d6a:	611a      	str	r2, [r3, #16]
  400d6c:	4770      	bx	lr
  400d6e:	bf00      	nop
  400d70:	400e0600 	.word	0x400e0600

00400d74 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400d74:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  400d76:	4b06      	ldr	r3, [pc, #24]	; (400d90 <PWM_0_init+0x1c>)
  400d78:	4798      	blx	r3
	PWM_0_PORT_init();
  400d7a:	4b06      	ldr	r3, [pc, #24]	; (400d94 <PWM_0_init+0x20>)
  400d7c:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400d7e:	4b06      	ldr	r3, [pc, #24]	; (400d98 <PWM_0_init+0x24>)
  400d80:	4798      	blx	r3
  400d82:	4602      	mov	r2, r0
  400d84:	4905      	ldr	r1, [pc, #20]	; (400d9c <PWM_0_init+0x28>)
  400d86:	4806      	ldr	r0, [pc, #24]	; (400da0 <PWM_0_init+0x2c>)
  400d88:	4b06      	ldr	r3, [pc, #24]	; (400da4 <PWM_0_init+0x30>)
  400d8a:	4798      	blx	r3
  400d8c:	bd08      	pop	{r3, pc}
  400d8e:	bf00      	nop
  400d90:	00400d5d 	.word	0x00400d5d
  400d94:	00400cfd 	.word	0x00400cfd
  400d98:	004023ad 	.word	0x004023ad
  400d9c:	40020000 	.word	0x40020000
  400da0:	20400548 	.word	0x20400548
  400da4:	004014dd 	.word	0x004014dd

00400da8 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400da8:	4b0c      	ldr	r3, [pc, #48]	; (400ddc <PWM_1_PORT_init+0x34>)
  400daa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400dac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400db0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400db2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400db4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400db8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400dba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400dbe:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400dc0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400dc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400dc6:	f042 0201 	orr.w	r2, r2, #1
  400dca:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400dcc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400dce:	f022 0201 	bic.w	r2, r2, #1
  400dd2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400dd4:	2201      	movs	r2, #1
  400dd6:	605a      	str	r2, [r3, #4]
  400dd8:	4770      	bx	lr
  400dda:	bf00      	nop
  400ddc:	400e0e00 	.word	0x400e0e00

00400de0 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400de0:	4b05      	ldr	r3, [pc, #20]	; (400df8 <PWM_1_CLOCK_init+0x18>)
  400de2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400de6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  400dea:	d104      	bne.n	400df6 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400df0:	4b01      	ldr	r3, [pc, #4]	; (400df8 <PWM_1_CLOCK_init+0x18>)
  400df2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400df6:	4770      	bx	lr
  400df8:	400e0600 	.word	0x400e0600

00400dfc <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  400dfc:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  400dfe:	4b06      	ldr	r3, [pc, #24]	; (400e18 <PWM_1_init+0x1c>)
  400e00:	4798      	blx	r3
	PWM_1_PORT_init();
  400e02:	4b06      	ldr	r3, [pc, #24]	; (400e1c <PWM_1_init+0x20>)
  400e04:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400e06:	4b06      	ldr	r3, [pc, #24]	; (400e20 <PWM_1_init+0x24>)
  400e08:	4798      	blx	r3
  400e0a:	4602      	mov	r2, r0
  400e0c:	4905      	ldr	r1, [pc, #20]	; (400e24 <PWM_1_init+0x28>)
  400e0e:	4806      	ldr	r0, [pc, #24]	; (400e28 <PWM_1_init+0x2c>)
  400e10:	4b06      	ldr	r3, [pc, #24]	; (400e2c <PWM_1_init+0x30>)
  400e12:	4798      	blx	r3
  400e14:	bd08      	pop	{r3, pc}
  400e16:	bf00      	nop
  400e18:	00400de1 	.word	0x00400de1
  400e1c:	00400da9 	.word	0x00400da9
  400e20:	004023ad 	.word	0x004023ad
  400e24:	4005c000 	.word	0x4005c000
  400e28:	204006ec 	.word	0x204006ec
  400e2c:	004014dd 	.word	0x004014dd

00400e30 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400e30:	4b06      	ldr	r3, [pc, #24]	; (400e4c <ENCODER_A_PORT_init+0x1c>)
  400e32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e34:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400e38:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400e3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e3c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  400e40:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e42:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e46:	605a      	str	r2, [r3, #4]
  400e48:	4770      	bx	lr
  400e4a:	bf00      	nop
  400e4c:	400e0e00 	.word	0x400e0e00

00400e50 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  400e50:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400e52:	4b09      	ldr	r3, [pc, #36]	; (400e78 <ENCODER_A_init+0x28>)
  400e54:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400e56:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400e5a:	d103      	bne.n	400e64 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400e5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400e60:	4b05      	ldr	r3, [pc, #20]	; (400e78 <ENCODER_A_init+0x28>)
  400e62:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  400e64:	4b05      	ldr	r3, [pc, #20]	; (400e7c <ENCODER_A_init+0x2c>)
  400e66:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  400e68:	4b05      	ldr	r3, [pc, #20]	; (400e80 <ENCODER_A_init+0x30>)
  400e6a:	4798      	blx	r3
  400e6c:	4602      	mov	r2, r0
  400e6e:	4905      	ldr	r1, [pc, #20]	; (400e84 <ENCODER_A_init+0x34>)
  400e70:	4805      	ldr	r0, [pc, #20]	; (400e88 <ENCODER_A_init+0x38>)
  400e72:	4b06      	ldr	r3, [pc, #24]	; (400e8c <ENCODER_A_init+0x3c>)
  400e74:	4798      	blx	r3
  400e76:	bd08      	pop	{r3, pc}
  400e78:	400e0600 	.word	0x400e0600
  400e7c:	00400e31 	.word	0x00400e31
  400e80:	00402583 	.word	0x00402583
  400e84:	4000c000 	.word	0x4000c000
  400e88:	20400614 	.word	0x20400614
  400e8c:	0040168d 	.word	0x0040168d

00400e90 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400e90:	4b06      	ldr	r3, [pc, #24]	; (400eac <ENCODER_B_PORT_init+0x1c>)
  400e92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e94:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  400e98:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400e9a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e9c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  400ea0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400ea2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400ea6:	605a      	str	r2, [r3, #4]
  400ea8:	4770      	bx	lr
  400eaa:	bf00      	nop
  400eac:	400e1400 	.word	0x400e1400

00400eb0 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  400eb0:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400eb2:	4b0a      	ldr	r3, [pc, #40]	; (400edc <ENCODER_B_init+0x2c>)
  400eb4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400eb8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  400ebc:	d104      	bne.n	400ec8 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400ebe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400ec2:	4b06      	ldr	r3, [pc, #24]	; (400edc <ENCODER_B_init+0x2c>)
  400ec4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  400ec8:	4b05      	ldr	r3, [pc, #20]	; (400ee0 <ENCODER_B_init+0x30>)
  400eca:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  400ecc:	4b05      	ldr	r3, [pc, #20]	; (400ee4 <ENCODER_B_init+0x34>)
  400ece:	4798      	blx	r3
  400ed0:	4602      	mov	r2, r0
  400ed2:	4905      	ldr	r1, [pc, #20]	; (400ee8 <ENCODER_B_init+0x38>)
  400ed4:	4805      	ldr	r0, [pc, #20]	; (400eec <ENCODER_B_init+0x3c>)
  400ed6:	4b06      	ldr	r3, [pc, #24]	; (400ef0 <ENCODER_B_init+0x40>)
  400ed8:	4798      	blx	r3
  400eda:	bd08      	pop	{r3, pc}
  400edc:	400e0600 	.word	0x400e0600
  400ee0:	00400e91 	.word	0x00400e91
  400ee4:	00402583 	.word	0x00402583
  400ee8:	40054000 	.word	0x40054000
  400eec:	20400564 	.word	0x20400564
  400ef0:	0040168d 	.word	0x0040168d

00400ef4 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400ef4:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400ef6:	4802      	ldr	r0, [pc, #8]	; (400f00 <delay_driver_init+0xc>)
  400ef8:	4b02      	ldr	r3, [pc, #8]	; (400f04 <delay_driver_init+0x10>)
  400efa:	4798      	blx	r3
  400efc:	bd08      	pop	{r3, pc}
  400efe:	bf00      	nop
  400f00:	e000e010 	.word	0xe000e010
  400f04:	004012ed 	.word	0x004012ed

00400f08 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400f08:	4b0f      	ldr	r3, [pc, #60]	; (400f48 <EDBG_COM_PORT_init+0x40>)
  400f0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f0c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400f10:	671a      	str	r2, [r3, #112]	; 0x70
  400f12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f14:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400f18:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400f1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400f1e:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400f20:	4a0a      	ldr	r2, [pc, #40]	; (400f4c <EDBG_COM_PORT_init+0x44>)
  400f22:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400f26:	f043 0310 	orr.w	r3, r3, #16
  400f2a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400f2e:	4b08      	ldr	r3, [pc, #32]	; (400f50 <EDBG_COM_PORT_init+0x48>)
  400f30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f32:	f042 0210 	orr.w	r2, r2, #16
  400f36:	671a      	str	r2, [r3, #112]	; 0x70
  400f38:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f3a:	f042 0210 	orr.w	r2, r2, #16
  400f3e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400f40:	2210      	movs	r2, #16
  400f42:	605a      	str	r2, [r3, #4]
  400f44:	4770      	bx	lr
  400f46:	bf00      	nop
  400f48:	400e0e00 	.word	0x400e0e00
  400f4c:	40088000 	.word	0x40088000
  400f50:	400e1000 	.word	0x400e1000

00400f54 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400f54:	4b04      	ldr	r3, [pc, #16]	; (400f68 <EDBG_COM_CLOCK_init+0x14>)
  400f56:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400f58:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400f5c:	d103      	bne.n	400f66 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400f5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400f62:	4b01      	ldr	r3, [pc, #4]	; (400f68 <EDBG_COM_CLOCK_init+0x14>)
  400f64:	611a      	str	r2, [r3, #16]
  400f66:	4770      	bx	lr
  400f68:	400e0600 	.word	0x400e0600

00400f6c <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  400f6c:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  400f6e:	4b06      	ldr	r3, [pc, #24]	; (400f88 <EDBG_COM_init+0x1c>)
  400f70:	4798      	blx	r3
	EDBG_COM_PORT_init();
  400f72:	4b06      	ldr	r3, [pc, #24]	; (400f8c <EDBG_COM_init+0x20>)
  400f74:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  400f76:	4b06      	ldr	r3, [pc, #24]	; (400f90 <EDBG_COM_init+0x24>)
  400f78:	4798      	blx	r3
  400f7a:	4602      	mov	r2, r0
  400f7c:	4905      	ldr	r1, [pc, #20]	; (400f94 <EDBG_COM_init+0x28>)
  400f7e:	4806      	ldr	r0, [pc, #24]	; (400f98 <EDBG_COM_init+0x2c>)
  400f80:	4b06      	ldr	r3, [pc, #24]	; (400f9c <EDBG_COM_init+0x30>)
  400f82:	4798      	blx	r3
  400f84:	bd08      	pop	{r3, pc}
  400f86:	bf00      	nop
  400f88:	00400f55 	.word	0x00400f55
  400f8c:	00400f09 	.word	0x00400f09
  400f90:	004027c5 	.word	0x004027c5
  400f94:	40028000 	.word	0x40028000
  400f98:	20400608 	.word	0x20400608
  400f9c:	004017d5 	.word	0x004017d5

00400fa0 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  400fa0:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400fa2:	4b37      	ldr	r3, [pc, #220]	; (401080 <system_init+0xe0>)
  400fa4:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400fa6:	4b37      	ldr	r3, [pc, #220]	; (401084 <system_init+0xe4>)
  400fa8:	699b      	ldr	r3, [r3, #24]
  400faa:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400fae:	d103      	bne.n	400fb8 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400fb4:	4b33      	ldr	r3, [pc, #204]	; (401084 <system_init+0xe4>)
  400fb6:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400fb8:	4b32      	ldr	r3, [pc, #200]	; (401084 <system_init+0xe4>)
  400fba:	699b      	ldr	r3, [r3, #24]
  400fbc:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400fc0:	d103      	bne.n	400fca <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400fc6:	4b2f      	ldr	r3, [pc, #188]	; (401084 <system_init+0xe4>)
  400fc8:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400fca:	4b2e      	ldr	r3, [pc, #184]	; (401084 <system_init+0xe4>)
  400fcc:	699b      	ldr	r3, [r3, #24]
  400fce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400fd2:	d103      	bne.n	400fdc <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400fd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400fd8:	4b2a      	ldr	r3, [pc, #168]	; (401084 <system_init+0xe4>)
  400fda:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400fdc:	4b29      	ldr	r3, [pc, #164]	; (401084 <system_init+0xe4>)
  400fde:	699b      	ldr	r3, [r3, #24]
  400fe0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400fe4:	d103      	bne.n	400fee <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400fea:	4b26      	ldr	r3, [pc, #152]	; (401084 <system_init+0xe4>)
  400fec:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400fee:	4a26      	ldr	r2, [pc, #152]	; (401088 <system_init+0xe8>)
  400ff0:	6853      	ldr	r3, [r2, #4]
  400ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400ff6:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  400ff8:	4b24      	ldr	r3, [pc, #144]	; (40108c <system_init+0xec>)
  400ffa:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400ffe:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  401000:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  401004:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  401006:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401008:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40100c:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40100e:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401010:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401016:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401018:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40101a:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40101c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  401020:	f44f 7080 	mov.w	r0, #256	; 0x100
  401024:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401026:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401028:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40102a:	f44f 7000 	mov.w	r0, #512	; 0x200
  40102e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401030:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401032:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401034:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401038:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40103a:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40103c:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40103e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401042:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401044:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401046:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401048:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40104a:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40104c:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  40104e:	4b10      	ldr	r3, [pc, #64]	; (401090 <system_init+0xf0>)
  401050:	4798      	blx	r3
	ADC_1_init();
  401052:	4b10      	ldr	r3, [pc, #64]	; (401094 <system_init+0xf4>)
  401054:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  401056:	4b10      	ldr	r3, [pc, #64]	; (401098 <system_init+0xf8>)
  401058:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  40105a:	4b10      	ldr	r3, [pc, #64]	; (40109c <system_init+0xfc>)
  40105c:	4798      	blx	r3
	EXTERNAL_IRQ_B_init();
  40105e:	4b10      	ldr	r3, [pc, #64]	; (4010a0 <system_init+0x100>)
  401060:	4798      	blx	r3

	PWM_0_init();
  401062:	4b10      	ldr	r3, [pc, #64]	; (4010a4 <system_init+0x104>)
  401064:	4798      	blx	r3

	PWM_1_init();
  401066:	4b10      	ldr	r3, [pc, #64]	; (4010a8 <system_init+0x108>)
  401068:	4798      	blx	r3
	ENCODER_A_init();
  40106a:	4b10      	ldr	r3, [pc, #64]	; (4010ac <system_init+0x10c>)
  40106c:	4798      	blx	r3
	ENCODER_B_init();
  40106e:	4b10      	ldr	r3, [pc, #64]	; (4010b0 <system_init+0x110>)
  401070:	4798      	blx	r3

	delay_driver_init();
  401072:	4b10      	ldr	r3, [pc, #64]	; (4010b4 <system_init+0x114>)
  401074:	4798      	blx	r3

	EDBG_COM_init();
  401076:	4b10      	ldr	r3, [pc, #64]	; (4010b8 <system_init+0x118>)
  401078:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  40107a:	4b10      	ldr	r3, [pc, #64]	; (4010bc <system_init+0x11c>)
  40107c:	4798      	blx	r3
  40107e:	bd08      	pop	{r3, pc}
  401080:	00401c15 	.word	0x00401c15
  401084:	400e0600 	.word	0x400e0600
  401088:	400e1850 	.word	0x400e1850
  40108c:	400e0e00 	.word	0x400e0e00
  401090:	00400bd9 	.word	0x00400bd9
  401094:	00400b31 	.word	0x00400b31
  401098:	00400cad 	.word	0x00400cad
  40109c:	00400cc5 	.word	0x00400cc5
  4010a0:	00400ce5 	.word	0x00400ce5
  4010a4:	00400d75 	.word	0x00400d75
  4010a8:	00400dfd 	.word	0x00400dfd
  4010ac:	00400e51 	.word	0x00400e51
  4010b0:	00400eb1 	.word	0x00400eb1
  4010b4:	00400ef5 	.word	0x00400ef5
  4010b8:	00400f6d 	.word	0x00400f6d
  4010bc:	00401365 	.word	0x00401365

004010c0 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  4010c0:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  4010c2:	6983      	ldr	r3, [r0, #24]
  4010c4:	b103      	cbz	r3, 4010c8 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  4010c6:	4798      	blx	r3
  4010c8:	bd08      	pop	{r3, pc}

004010ca <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  4010ca:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  4010cc:	69c3      	ldr	r3, [r0, #28]
  4010ce:	b103      	cbz	r3, 4010d2 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  4010d0:	4798      	blx	r3
  4010d2:	bd08      	pop	{r3, pc}

004010d4 <adc_async_channel_conversion_done>:
{
  4010d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4010d8:	4605      	mov	r5, r0
  4010da:	4688      	mov	r8, r1
  4010dc:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  4010de:	6a03      	ldr	r3, [r0, #32]
  4010e0:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  4010e2:	6a87      	ldr	r7, [r0, #40]	; 0x28
  4010e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4010e8:	00de      	lsls	r6, r3, #3
  4010ea:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  4010ec:	f104 0a04 	add.w	sl, r4, #4
  4010f0:	b2d1      	uxtb	r1, r2
  4010f2:	4650      	mov	r0, sl
  4010f4:	4b0c      	ldr	r3, [pc, #48]	; (401128 <adc_async_channel_conversion_done+0x54>)
  4010f6:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  4010f8:	4628      	mov	r0, r5
  4010fa:	4b0c      	ldr	r3, [pc, #48]	; (40112c <adc_async_channel_conversion_done+0x58>)
  4010fc:	4798      	blx	r3
  4010fe:	2801      	cmp	r0, #1
  401100:	d907      	bls.n	401112 <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  401102:	ea4f 2119 	mov.w	r1, r9, lsr #8
  401106:	4650      	mov	r0, sl
  401108:	4b07      	ldr	r3, [pc, #28]	; (401128 <adc_async_channel_conversion_done+0x54>)
  40110a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  40110c:	8aa3      	ldrh	r3, [r4, #20]
  40110e:	3301      	adds	r3, #1
  401110:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  401112:	8aa3      	ldrh	r3, [r4, #20]
  401114:	3301      	adds	r3, #1
  401116:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  401118:	59bb      	ldr	r3, [r7, r6]
  40111a:	b113      	cbz	r3, 401122 <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  40111c:	4641      	mov	r1, r8
  40111e:	4628      	mov	r0, r5
  401120:	4798      	blx	r3
  401122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401126:	bf00      	nop
  401128:	004018ed 	.word	0x004018ed
  40112c:	00401bfd 	.word	0x00401bfd

00401130 <adc_async_init>:
{
  401130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401134:	4616      	mov	r6, r2
  401136:	461c      	mov	r4, r3
  401138:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  40113c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  40113e:	4607      	mov	r7, r0
  401140:	4689      	mov	r9, r1
  401142:	2800      	cmp	r0, #0
  401144:	bf18      	it	ne
  401146:	2900      	cmpne	r1, #0
  401148:	d00b      	beq.n	401162 <adc_async_init+0x32>
  40114a:	1c13      	adds	r3, r2, #0
  40114c:	bf18      	it	ne
  40114e:	2301      	movne	r3, #1
  401150:	f1b8 0f00 	cmp.w	r8, #0
  401154:	d017      	beq.n	401186 <adc_async_init+0x56>
  401156:	b1b3      	cbz	r3, 401186 <adc_async_init+0x56>
  401158:	b10d      	cbz	r5, 40115e <adc_async_init+0x2e>
  40115a:	2001      	movs	r0, #1
  40115c:	e002      	b.n	401164 <adc_async_init+0x34>
  40115e:	2000      	movs	r0, #0
  401160:	e000      	b.n	401164 <adc_async_init+0x34>
  401162:	2000      	movs	r0, #0
  401164:	f8df b068 	ldr.w	fp, [pc, #104]	; 4011d0 <adc_async_init+0xa0>
  401168:	223f      	movs	r2, #63	; 0x3f
  40116a:	4659      	mov	r1, fp
  40116c:	f8df a064 	ldr.w	sl, [pc, #100]	; 4011d4 <adc_async_init+0xa4>
  401170:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  401172:	1c60      	adds	r0, r4, #1
  401174:	2240      	movs	r2, #64	; 0x40
  401176:	4659      	mov	r1, fp
  401178:	4580      	cmp	r8, r0
  40117a:	bfcc      	ite	gt
  40117c:	2000      	movgt	r0, #0
  40117e:	2001      	movle	r0, #1
  401180:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  401182:	2300      	movs	r3, #0
  401184:	e005      	b.n	401192 <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  401186:	2000      	movs	r0, #0
  401188:	e7ec      	b.n	401164 <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  40118a:	22ff      	movs	r2, #255	; 0xff
  40118c:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  40118e:	3301      	adds	r3, #1
  401190:	b2db      	uxtb	r3, r3
  401192:	42a3      	cmp	r3, r4
  401194:	d9f9      	bls.n	40118a <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  401196:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  401198:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  40119c:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  4011a0:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  4011a2:	4649      	mov	r1, r9
  4011a4:	4638      	mov	r0, r7
  4011a6:	4b06      	ldr	r3, [pc, #24]	; (4011c0 <adc_async_init+0x90>)
  4011a8:	4798      	blx	r3
	if (init_status) {
  4011aa:	4603      	mov	r3, r0
  4011ac:	b928      	cbnz	r0, 4011ba <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  4011ae:	4a05      	ldr	r2, [pc, #20]	; (4011c4 <adc_async_init+0x94>)
  4011b0:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  4011b2:	4a05      	ldr	r2, [pc, #20]	; (4011c8 <adc_async_init+0x98>)
  4011b4:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  4011b6:	4a05      	ldr	r2, [pc, #20]	; (4011cc <adc_async_init+0x9c>)
  4011b8:	607a      	str	r2, [r7, #4]
}
  4011ba:	4618      	mov	r0, r3
  4011bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4011c0:	00401b3d 	.word	0x00401b3d
  4011c4:	004010d5 	.word	0x004010d5
  4011c8:	004010c1 	.word	0x004010c1
  4011cc:	004010cb 	.word	0x004010cb
  4011d0:	00405fcc 	.word	0x00405fcc
  4011d4:	00401849 	.word	0x00401849

004011d8 <adc_async_register_channel_buffer>:
{
  4011d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4011dc:	460e      	mov	r6, r1
  4011de:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  4011e0:	4605      	mov	r5, r0
  4011e2:	4690      	mov	r8, r2
  4011e4:	2800      	cmp	r0, #0
  4011e6:	bf18      	it	ne
  4011e8:	2a00      	cmpne	r2, #0
  4011ea:	d002      	beq.n	4011f2 <adc_async_register_channel_buffer+0x1a>
  4011ec:	b9c3      	cbnz	r3, 401220 <adc_async_register_channel_buffer+0x48>
  4011ee:	2000      	movs	r0, #0
  4011f0:	e000      	b.n	4011f4 <adc_async_register_channel_buffer+0x1c>
  4011f2:	2000      	movs	r0, #0
  4011f4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 40128c <adc_async_register_channel_buffer+0xb4>
  4011f8:	2266      	movs	r2, #102	; 0x66
  4011fa:	4649      	mov	r1, r9
  4011fc:	4c21      	ldr	r4, [pc, #132]	; (401284 <adc_async_register_channel_buffer+0xac>)
  4011fe:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  401200:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  401204:	2267      	movs	r2, #103	; 0x67
  401206:	4649      	mov	r1, r9
  401208:	42b0      	cmp	r0, r6
  40120a:	bf34      	ite	cc
  40120c:	2000      	movcc	r0, #0
  40120e:	2001      	movcs	r0, #1
  401210:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  401212:	6a29      	ldr	r1, [r5, #32]
  401214:	5d8b      	ldrb	r3, [r1, r6]
  401216:	2bff      	cmp	r3, #255	; 0xff
  401218:	d12b      	bne.n	401272 <adc_async_register_channel_buffer+0x9a>
  40121a:	2400      	movs	r4, #0
  40121c:	4623      	mov	r3, r4
  40121e:	e003      	b.n	401228 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  401220:	2001      	movs	r0, #1
  401222:	e7e7      	b.n	4011f4 <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  401224:	3301      	adds	r3, #1
  401226:	b2db      	uxtb	r3, r3
  401228:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  40122c:	4293      	cmp	r3, r2
  40122e:	d805      	bhi.n	40123c <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  401230:	5cca      	ldrb	r2, [r1, r3]
  401232:	2aff      	cmp	r2, #255	; 0xff
  401234:	d0f6      	beq.n	401224 <adc_async_register_channel_buffer+0x4c>
			index++;
  401236:	3401      	adds	r4, #1
  401238:	b2e4      	uxtb	r4, r4
  40123a:	e7f3      	b.n	401224 <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  40123c:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  401240:	429c      	cmp	r4, r3
  401242:	d819      	bhi.n	401278 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  401244:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  401246:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  40124a:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  40124e:	4448      	add	r0, r9
  401250:	463a      	mov	r2, r7
  401252:	4641      	mov	r1, r8
  401254:	3004      	adds	r0, #4
  401256:	4b0c      	ldr	r3, [pc, #48]	; (401288 <adc_async_register_channel_buffer+0xb0>)
  401258:	4798      	blx	r3
  40125a:	4602      	mov	r2, r0
  40125c:	b978      	cbnz	r0, 40127e <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  40125e:	6a2b      	ldr	r3, [r5, #32]
  401260:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  401262:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401264:	4499      	add	r9, r3
  401266:	2300      	movs	r3, #0
  401268:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  40126c:	4610      	mov	r0, r2
  40126e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  401272:	f06f 020c 	mvn.w	r2, #12
  401276:	e7f9      	b.n	40126c <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  401278:	f06f 021b 	mvn.w	r2, #27
  40127c:	e7f6      	b.n	40126c <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  40127e:	f06f 020c 	mvn.w	r2, #12
  401282:	e7f3      	b.n	40126c <adc_async_register_channel_buffer+0x94>
  401284:	00401849 	.word	0x00401849
  401288:	004018a9 	.word	0x004018a9
  40128c:	00405fcc 	.word	0x00405fcc

00401290 <adc_async_enable_channel>:
{
  401290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401292:	460d      	mov	r5, r1
	ASSERT(descr);
  401294:	4f0b      	ldr	r7, [pc, #44]	; (4012c4 <adc_async_enable_channel+0x34>)
  401296:	4604      	mov	r4, r0
  401298:	2283      	movs	r2, #131	; 0x83
  40129a:	4639      	mov	r1, r7
  40129c:	3000      	adds	r0, #0
  40129e:	bf18      	it	ne
  4012a0:	2001      	movne	r0, #1
  4012a2:	4e09      	ldr	r6, [pc, #36]	; (4012c8 <adc_async_enable_channel+0x38>)
  4012a4:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  4012a6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  4012aa:	2284      	movs	r2, #132	; 0x84
  4012ac:	4639      	mov	r1, r7
  4012ae:	42a8      	cmp	r0, r5
  4012b0:	bf34      	ite	cc
  4012b2:	2000      	movcc	r0, #0
  4012b4:	2001      	movcs	r0, #1
  4012b6:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  4012b8:	4629      	mov	r1, r5
  4012ba:	4620      	mov	r0, r4
  4012bc:	4b03      	ldr	r3, [pc, #12]	; (4012cc <adc_async_enable_channel+0x3c>)
  4012be:	4798      	blx	r3
}
  4012c0:	2000      	movs	r0, #0
  4012c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4012c4:	00405fcc 	.word	0x00405fcc
  4012c8:	00401849 	.word	0x00401849
  4012cc:	00401bf1 	.word	0x00401bf1

004012d0 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4012d0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4012d4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4012d6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4012d8:	f3bf 8f5f 	dmb	sy
  4012dc:	4770      	bx	lr

004012de <atomic_leave_critical>:
  4012de:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4012e2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4012e4:	f383 8810 	msr	PRIMASK, r3
  4012e8:	4770      	bx	lr
	...

004012ec <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4012ec:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4012ee:	4b02      	ldr	r3, [pc, #8]	; (4012f8 <delay_init+0xc>)
  4012f0:	6018      	str	r0, [r3, #0]
  4012f2:	4b02      	ldr	r3, [pc, #8]	; (4012fc <delay_init+0x10>)
  4012f4:	4798      	blx	r3
  4012f6:	bd08      	pop	{r3, pc}
  4012f8:	20400318 	.word	0x20400318
  4012fc:	004023c5 	.word	0x004023c5

00401300 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  401300:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  401302:	4b04      	ldr	r3, [pc, #16]	; (401314 <delay_ms+0x14>)
  401304:	681c      	ldr	r4, [r3, #0]
  401306:	4b04      	ldr	r3, [pc, #16]	; (401318 <delay_ms+0x18>)
  401308:	4798      	blx	r3
  40130a:	4601      	mov	r1, r0
  40130c:	4620      	mov	r0, r4
  40130e:	4b03      	ldr	r3, [pc, #12]	; (40131c <delay_ms+0x1c>)
  401310:	4798      	blx	r3
  401312:	bd10      	pop	{r4, pc}
  401314:	20400318 	.word	0x20400318
  401318:	00401c01 	.word	0x00401c01
  40131c:	004023d1 	.word	0x004023d1

00401320 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  401320:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  401322:	2504      	movs	r5, #4
  401324:	2400      	movs	r4, #0

	while (upper >= lower) {
  401326:	e007      	b.n	401338 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  401328:	4a0d      	ldr	r2, [pc, #52]	; (401360 <process_ext_irq+0x40>)
  40132a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40132e:	b1b3      	cbz	r3, 40135e <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  401330:	4798      	blx	r3
  401332:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  401334:	3a01      	subs	r2, #1
  401336:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  401338:	42ac      	cmp	r4, r5
  40133a:	d810      	bhi.n	40135e <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  40133c:	192b      	adds	r3, r5, r4
  40133e:	105b      	asrs	r3, r3, #1
  401340:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  401342:	2a03      	cmp	r2, #3
  401344:	d80b      	bhi.n	40135e <process_ext_irq+0x3e>
  401346:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  401348:	4905      	ldr	r1, [pc, #20]	; (401360 <process_ext_irq+0x40>)
  40134a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  40134e:	6849      	ldr	r1, [r1, #4]
  401350:	4281      	cmp	r1, r0
  401352:	d0e9      	beq.n	401328 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  401354:	4281      	cmp	r1, r0
  401356:	d2ed      	bcs.n	401334 <process_ext_irq+0x14>
			lower = middle + 1;
  401358:	3201      	adds	r2, #1
  40135a:	b2d4      	uxtb	r4, r2
  40135c:	e7ec      	b.n	401338 <process_ext_irq+0x18>
  40135e:	bd38      	pop	{r3, r4, r5, pc}
  401360:	2040031c 	.word	0x2040031c

00401364 <ext_irq_init>:
{
  401364:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401366:	2300      	movs	r3, #0
  401368:	e00a      	b.n	401380 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  40136a:	4a08      	ldr	r2, [pc, #32]	; (40138c <ext_irq_init+0x28>)
  40136c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  401370:	f04f 30ff 	mov.w	r0, #4294967295
  401374:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  401376:	2100      	movs	r1, #0
  401378:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40137c:	3301      	adds	r3, #1
  40137e:	b29b      	uxth	r3, r3
  401380:	2b03      	cmp	r3, #3
  401382:	d9f2      	bls.n	40136a <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  401384:	4802      	ldr	r0, [pc, #8]	; (401390 <ext_irq_init+0x2c>)
  401386:	4b03      	ldr	r3, [pc, #12]	; (401394 <ext_irq_init+0x30>)
  401388:	4798      	blx	r3
}
  40138a:	bd08      	pop	{r3, pc}
  40138c:	2040031c 	.word	0x2040031c
  401390:	00401321 	.word	0x00401321
  401394:	00401f71 	.word	0x00401f71

00401398 <ext_irq_register>:
{
  401398:	b5f0      	push	{r4, r5, r6, r7, lr}
  40139a:	b083      	sub	sp, #12
  40139c:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  40139e:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  4013a0:	2b03      	cmp	r3, #3
  4013a2:	d80e      	bhi.n	4013c2 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  4013a4:	4618      	mov	r0, r3
  4013a6:	4a2e      	ldr	r2, [pc, #184]	; (401460 <ext_irq_register+0xc8>)
  4013a8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4013ac:	6852      	ldr	r2, [r2, #4]
  4013ae:	42aa      	cmp	r2, r5
  4013b0:	d002      	beq.n	4013b8 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  4013b2:	3301      	adds	r3, #1
  4013b4:	b2db      	uxtb	r3, r3
  4013b6:	e7f3      	b.n	4013a0 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  4013b8:	4b29      	ldr	r3, [pc, #164]	; (401460 <ext_irq_register+0xc8>)
  4013ba:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  4013be:	2701      	movs	r7, #1
			break;
  4013c0:	e000      	b.n	4013c4 <ext_irq_register+0x2c>
	bool    found = false;
  4013c2:	2700      	movs	r7, #0
	if (NULL == cb) {
  4013c4:	b159      	cbz	r1, 4013de <ext_irq_register+0x46>
	if (!found) {
  4013c6:	2f00      	cmp	r7, #0
  4013c8:	d13d      	bne.n	401446 <ext_irq_register+0xae>
  4013ca:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4013cc:	2e03      	cmp	r6, #3
  4013ce:	d813      	bhi.n	4013f8 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  4013d0:	4b23      	ldr	r3, [pc, #140]	; (401460 <ext_irq_register+0xc8>)
  4013d2:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  4013d6:	b143      	cbz	r3, 4013ea <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4013d8:	3601      	adds	r6, #1
  4013da:	b2f6      	uxtb	r6, r6
  4013dc:	e7f6      	b.n	4013cc <ext_irq_register+0x34>
		if (!found) {
  4013de:	2f00      	cmp	r7, #0
  4013e0:	d038      	beq.n	401454 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  4013e2:	4628      	mov	r0, r5
  4013e4:	4b1f      	ldr	r3, [pc, #124]	; (401464 <ext_irq_register+0xcc>)
  4013e6:	4798      	blx	r3
  4013e8:	e032      	b.n	401450 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  4013ea:	4b1d      	ldr	r3, [pc, #116]	; (401460 <ext_irq_register+0xc8>)
  4013ec:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  4013f0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4013f4:	605d      	str	r5, [r3, #4]
				found           = true;
  4013f6:	2701      	movs	r7, #1
  4013f8:	2300      	movs	r3, #0
  4013fa:	e001      	b.n	401400 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  4013fc:	3301      	adds	r3, #1
  4013fe:	b2db      	uxtb	r3, r3
  401400:	2b03      	cmp	r3, #3
  401402:	bf98      	it	ls
  401404:	2e03      	cmpls	r6, #3
  401406:	d81e      	bhi.n	401446 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  401408:	46b6      	mov	lr, r6
  40140a:	4a15      	ldr	r2, [pc, #84]	; (401460 <ext_irq_register+0xc8>)
  40140c:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  401410:	6848      	ldr	r0, [r1, #4]
  401412:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  401416:	6852      	ldr	r2, [r2, #4]
  401418:	4290      	cmp	r0, r2
  40141a:	d2ef      	bcs.n	4013fc <ext_irq_register+0x64>
  40141c:	f1b2 3fff 	cmp.w	r2, #4294967295
  401420:	d0ec      	beq.n	4013fc <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  401422:	4c0f      	ldr	r4, [pc, #60]	; (401460 <ext_irq_register+0xc8>)
  401424:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  401428:	e892 0003 	ldmia.w	r2, {r0, r1}
  40142c:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  401430:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  401434:	e894 0003 	ldmia.w	r4, {r0, r1}
  401438:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  40143c:	e89d 0003 	ldmia.w	sp, {r0, r1}
  401440:	e884 0003 	stmia.w	r4, {r0, r1}
  401444:	e7da      	b.n	4013fc <ext_irq_register+0x64>
	if (!found) {
  401446:	b147      	cbz	r7, 40145a <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  401448:	2101      	movs	r1, #1
  40144a:	4628      	mov	r0, r5
  40144c:	4b05      	ldr	r3, [pc, #20]	; (401464 <ext_irq_register+0xcc>)
  40144e:	4798      	blx	r3
}
  401450:	b003      	add	sp, #12
  401452:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  401454:	f06f 000c 	mvn.w	r0, #12
  401458:	e7fa      	b.n	401450 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  40145a:	f06f 000c 	mvn.w	r0, #12
  40145e:	e7f7      	b.n	401450 <ext_irq_register+0xb8>
  401460:	2040031c 	.word	0x2040031c
  401464:	00401fa1 	.word	0x00401fa1

00401468 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401468:	b570      	push	{r4, r5, r6, lr}
  40146a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  40146c:	4604      	mov	r4, r0
  40146e:	460d      	mov	r5, r1
  401470:	2800      	cmp	r0, #0
  401472:	bf18      	it	ne
  401474:	2900      	cmpne	r1, #0
  401476:	bf14      	ite	ne
  401478:	2001      	movne	r0, #1
  40147a:	2000      	moveq	r0, #0
  40147c:	2234      	movs	r2, #52	; 0x34
  40147e:	4904      	ldr	r1, [pc, #16]	; (401490 <io_write+0x28>)
  401480:	4b04      	ldr	r3, [pc, #16]	; (401494 <io_write+0x2c>)
  401482:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  401484:	6823      	ldr	r3, [r4, #0]
  401486:	4632      	mov	r2, r6
  401488:	4629      	mov	r1, r5
  40148a:	4620      	mov	r0, r4
  40148c:	4798      	blx	r3
}
  40148e:	bd70      	pop	{r4, r5, r6, pc}
  401490:	00405fe8 	.word	0x00405fe8
  401494:	00401849 	.word	0x00401849

00401498 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401498:	b570      	push	{r4, r5, r6, lr}
  40149a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  40149c:	4604      	mov	r4, r0
  40149e:	460d      	mov	r5, r1
  4014a0:	2800      	cmp	r0, #0
  4014a2:	bf18      	it	ne
  4014a4:	2900      	cmpne	r1, #0
  4014a6:	bf14      	ite	ne
  4014a8:	2001      	movne	r0, #1
  4014aa:	2000      	moveq	r0, #0
  4014ac:	223d      	movs	r2, #61	; 0x3d
  4014ae:	4904      	ldr	r1, [pc, #16]	; (4014c0 <io_read+0x28>)
  4014b0:	4b04      	ldr	r3, [pc, #16]	; (4014c4 <io_read+0x2c>)
  4014b2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  4014b4:	6863      	ldr	r3, [r4, #4]
  4014b6:	4632      	mov	r2, r6
  4014b8:	4629      	mov	r1, r5
  4014ba:	4620      	mov	r0, r4
  4014bc:	4798      	blx	r3
}
  4014be:	bd70      	pop	{r4, r5, r6, pc}
  4014c0:	00405fe8 	.word	0x00405fe8
  4014c4:	00401849 	.word	0x00401849

004014c8 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  4014c8:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  4014ca:	6943      	ldr	r3, [r0, #20]
  4014cc:	b103      	cbz	r3, 4014d0 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  4014ce:	4798      	blx	r3
  4014d0:	bd08      	pop	{r3, pc}

004014d2 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  4014d2:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  4014d4:	6983      	ldr	r3, [r0, #24]
  4014d6:	b103      	cbz	r3, 4014da <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  4014d8:	4798      	blx	r3
  4014da:	bd08      	pop	{r3, pc}

004014dc <pwm_init>:
{
  4014dc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4014de:	4604      	mov	r4, r0
  4014e0:	460d      	mov	r5, r1
  4014e2:	2800      	cmp	r0, #0
  4014e4:	bf18      	it	ne
  4014e6:	2900      	cmpne	r1, #0
  4014e8:	bf14      	ite	ne
  4014ea:	2001      	movne	r0, #1
  4014ec:	2000      	moveq	r0, #0
  4014ee:	2233      	movs	r2, #51	; 0x33
  4014f0:	4906      	ldr	r1, [pc, #24]	; (40150c <pwm_init+0x30>)
  4014f2:	4b07      	ldr	r3, [pc, #28]	; (401510 <pwm_init+0x34>)
  4014f4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  4014f6:	4629      	mov	r1, r5
  4014f8:	4620      	mov	r0, r4
  4014fa:	4b06      	ldr	r3, [pc, #24]	; (401514 <pwm_init+0x38>)
  4014fc:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  4014fe:	4b06      	ldr	r3, [pc, #24]	; (401518 <pwm_init+0x3c>)
  401500:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  401502:	4b06      	ldr	r3, [pc, #24]	; (40151c <pwm_init+0x40>)
  401504:	6063      	str	r3, [r4, #4]
}
  401506:	2000      	movs	r0, #0
  401508:	bd38      	pop	{r3, r4, r5, pc}
  40150a:	bf00      	nop
  40150c:	00405ffc 	.word	0x00405ffc
  401510:	00401849 	.word	0x00401849
  401514:	00402141 	.word	0x00402141
  401518:	004014c9 	.word	0x004014c9
  40151c:	004014d3 	.word	0x004014d3

00401520 <pwm_enable>:
{
  401520:	b510      	push	{r4, lr}
	ASSERT(descr);
  401522:	4604      	mov	r4, r0
  401524:	224a      	movs	r2, #74	; 0x4a
  401526:	4909      	ldr	r1, [pc, #36]	; (40154c <pwm_enable+0x2c>)
  401528:	3000      	adds	r0, #0
  40152a:	bf18      	it	ne
  40152c:	2001      	movne	r0, #1
  40152e:	4b08      	ldr	r3, [pc, #32]	; (401550 <pwm_enable+0x30>)
  401530:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  401532:	4620      	mov	r0, r4
  401534:	4b07      	ldr	r3, [pc, #28]	; (401554 <pwm_enable+0x34>)
  401536:	4798      	blx	r3
  401538:	b920      	cbnz	r0, 401544 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  40153a:	4620      	mov	r0, r4
  40153c:	4b06      	ldr	r3, [pc, #24]	; (401558 <pwm_enable+0x38>)
  40153e:	4798      	blx	r3
	return ERR_NONE;
  401540:	2000      	movs	r0, #0
  401542:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401544:	f06f 0010 	mvn.w	r0, #16
}
  401548:	bd10      	pop	{r4, pc}
  40154a:	bf00      	nop
  40154c:	00405ffc 	.word	0x00405ffc
  401550:	00401849 	.word	0x00401849
  401554:	0040231d 	.word	0x0040231d
  401558:	00402279 	.word	0x00402279

0040155c <pwm_register_callback>:
{
  40155c:	b570      	push	{r4, r5, r6, lr}
	switch (type) {
  40155e:	460d      	mov	r5, r1
  401560:	b121      	cbz	r1, 40156c <pwm_register_callback+0x10>
  401562:	2901      	cmp	r1, #1
  401564:	d015      	beq.n	401592 <pwm_register_callback+0x36>
		return ERR_INVALID_ARG;
  401566:	f06f 000c 	mvn.w	r0, #12
}
  40156a:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.period = cb;
  40156c:	6142      	str	r2, [r0, #20]
  40156e:	4616      	mov	r6, r2
  401570:	4604      	mov	r4, r0
	ASSERT(descr);
  401572:	2272      	movs	r2, #114	; 0x72
  401574:	4908      	ldr	r1, [pc, #32]	; (401598 <pwm_register_callback+0x3c>)
  401576:	3000      	adds	r0, #0
  401578:	bf18      	it	ne
  40157a:	2001      	movne	r0, #1
  40157c:	4b07      	ldr	r3, [pc, #28]	; (40159c <pwm_register_callback+0x40>)
  40157e:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
  401580:	1c32      	adds	r2, r6, #0
  401582:	bf18      	it	ne
  401584:	2201      	movne	r2, #1
  401586:	4629      	mov	r1, r5
  401588:	4620      	mov	r0, r4
  40158a:	4b05      	ldr	r3, [pc, #20]	; (4015a0 <pwm_register_callback+0x44>)
  40158c:	4798      	blx	r3
	return ERR_NONE;
  40158e:	2000      	movs	r0, #0
  401590:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
  401592:	6182      	str	r2, [r0, #24]
		break;
  401594:	e7eb      	b.n	40156e <pwm_register_callback+0x12>
  401596:	bf00      	nop
  401598:	00405ffc 	.word	0x00405ffc
  40159c:	00401849 	.word	0x00401849
  4015a0:	0040234d 	.word	0x0040234d

004015a4 <pwm_set_parameters>:
{
  4015a4:	b570      	push	{r4, r5, r6, lr}
  4015a6:	460d      	mov	r5, r1
  4015a8:	4616      	mov	r6, r2
	ASSERT(descr);
  4015aa:	4604      	mov	r4, r0
  4015ac:	227c      	movs	r2, #124	; 0x7c
  4015ae:	4906      	ldr	r1, [pc, #24]	; (4015c8 <pwm_set_parameters+0x24>)
  4015b0:	3000      	adds	r0, #0
  4015b2:	bf18      	it	ne
  4015b4:	2001      	movne	r0, #1
  4015b6:	4b05      	ldr	r3, [pc, #20]	; (4015cc <pwm_set_parameters+0x28>)
  4015b8:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  4015ba:	4632      	mov	r2, r6
  4015bc:	4629      	mov	r1, r5
  4015be:	4620      	mov	r0, r4
  4015c0:	4b03      	ldr	r3, [pc, #12]	; (4015d0 <pwm_set_parameters+0x2c>)
  4015c2:	4798      	blx	r3
}
  4015c4:	2000      	movs	r0, #0
  4015c6:	bd70      	pop	{r4, r5, r6, pc}
  4015c8:	00405ffc 	.word	0x00405ffc
  4015cc:	00401849 	.word	0x00401849
  4015d0:	004022bd 	.word	0x004022bd

004015d4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  4015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  4015d6:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  4015d8:	b117      	cbz	r7, 4015e0 <timer_add_timer_task+0xc>
  4015da:	463c      	mov	r4, r7
  4015dc:	2600      	movs	r6, #0
  4015de:	e00b      	b.n	4015f8 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  4015e0:	4b0e      	ldr	r3, [pc, #56]	; (40161c <timer_add_timer_task+0x48>)
  4015e2:	4798      	blx	r3
		return;
  4015e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  4015e6:	68a5      	ldr	r5, [r4, #8]
  4015e8:	442b      	add	r3, r5
  4015ea:	1a9b      	subs	r3, r3, r2
  4015ec:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  4015ee:	688d      	ldr	r5, [r1, #8]
  4015f0:	42ab      	cmp	r3, r5
  4015f2:	d209      	bcs.n	401608 <timer_add_timer_task+0x34>
			break;
		prev = it;
  4015f4:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  4015f6:	6824      	ldr	r4, [r4, #0]
  4015f8:	b134      	cbz	r4, 401608 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  4015fa:	6863      	ldr	r3, [r4, #4]
  4015fc:	4293      	cmp	r3, r2
  4015fe:	d8f2      	bhi.n	4015e6 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  401600:	68a5      	ldr	r5, [r4, #8]
  401602:	1a9b      	subs	r3, r3, r2
  401604:	442b      	add	r3, r5
  401606:	e7f2      	b.n	4015ee <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  401608:	42bc      	cmp	r4, r7
  40160a:	d003      	beq.n	401614 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  40160c:	4630      	mov	r0, r6
  40160e:	4b04      	ldr	r3, [pc, #16]	; (401620 <timer_add_timer_task+0x4c>)
  401610:	4798      	blx	r3
  401612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  401614:	4b01      	ldr	r3, [pc, #4]	; (40161c <timer_add_timer_task+0x48>)
  401616:	4798      	blx	r3
  401618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40161a:	bf00      	nop
  40161c:	00401865 	.word	0x00401865
  401620:	00401891 	.word	0x00401891

00401624 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  401624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401626:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  401628:	6906      	ldr	r6, [r0, #16]
  40162a:	3601      	adds	r6, #1
  40162c:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  40162e:	7e03      	ldrb	r3, [r0, #24]
  401630:	f013 0f01 	tst.w	r3, #1
  401634:	d105      	bne.n	401642 <timer_process_counted+0x1e>
  401636:	7e03      	ldrb	r3, [r0, #24]
  401638:	f013 0f02 	tst.w	r3, #2
  40163c:	d101      	bne.n	401642 <timer_process_counted+0x1e>
  40163e:	4605      	mov	r5, r0
  401640:	e009      	b.n	401656 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  401642:	7e03      	ldrb	r3, [r0, #24]
  401644:	f043 0302 	orr.w	r3, r3, #2
  401648:	7603      	strb	r3, [r0, #24]
		return;
  40164a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40164c:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  40164e:	68e3      	ldr	r3, [r4, #12]
  401650:	4620      	mov	r0, r4
  401652:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  401654:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  401656:	b19c      	cbz	r4, 401680 <timer_process_counted+0x5c>
  401658:	6863      	ldr	r3, [r4, #4]
  40165a:	1af3      	subs	r3, r6, r3
  40165c:	68a2      	ldr	r2, [r4, #8]
  40165e:	4293      	cmp	r3, r2
  401660:	d30e      	bcc.n	401680 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  401662:	f105 0714 	add.w	r7, r5, #20
  401666:	4638      	mov	r0, r7
  401668:	4b06      	ldr	r3, [pc, #24]	; (401684 <timer_process_counted+0x60>)
  40166a:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  40166c:	7c23      	ldrb	r3, [r4, #16]
  40166e:	2b01      	cmp	r3, #1
  401670:	d1ec      	bne.n	40164c <timer_process_counted+0x28>
			tmp->time_label = time;
  401672:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  401674:	4632      	mov	r2, r6
  401676:	4621      	mov	r1, r4
  401678:	4638      	mov	r0, r7
  40167a:	4b03      	ldr	r3, [pc, #12]	; (401688 <timer_process_counted+0x64>)
  40167c:	4798      	blx	r3
  40167e:	e7e5      	b.n	40164c <timer_process_counted+0x28>
  401680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401682:	bf00      	nop
  401684:	00401899 	.word	0x00401899
  401688:	004015d5 	.word	0x004015d5

0040168c <timer_init>:
{
  40168c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40168e:	4604      	mov	r4, r0
  401690:	460d      	mov	r5, r1
  401692:	2800      	cmp	r0, #0
  401694:	bf18      	it	ne
  401696:	2900      	cmpne	r1, #0
  401698:	bf14      	ite	ne
  40169a:	2001      	movne	r0, #1
  40169c:	2000      	moveq	r0, #0
  40169e:	223b      	movs	r2, #59	; 0x3b
  4016a0:	4905      	ldr	r1, [pc, #20]	; (4016b8 <timer_init+0x2c>)
  4016a2:	4b06      	ldr	r3, [pc, #24]	; (4016bc <timer_init+0x30>)
  4016a4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  4016a6:	4629      	mov	r1, r5
  4016a8:	4620      	mov	r0, r4
  4016aa:	4b05      	ldr	r3, [pc, #20]	; (4016c0 <timer_init+0x34>)
  4016ac:	4798      	blx	r3
	descr->time                           = 0;
  4016ae:	2000      	movs	r0, #0
  4016b0:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  4016b2:	4b04      	ldr	r3, [pc, #16]	; (4016c4 <timer_init+0x38>)
  4016b4:	6023      	str	r3, [r4, #0]
}
  4016b6:	bd38      	pop	{r3, r4, r5, pc}
  4016b8:	00406014 	.word	0x00406014
  4016bc:	00401849 	.word	0x00401849
  4016c0:	00402489 	.word	0x00402489
  4016c4:	00401625 	.word	0x00401625

004016c8 <timer_start>:
{
  4016c8:	b510      	push	{r4, lr}
	ASSERT(descr);
  4016ca:	4604      	mov	r4, r0
  4016cc:	2253      	movs	r2, #83	; 0x53
  4016ce:	4909      	ldr	r1, [pc, #36]	; (4016f4 <timer_start+0x2c>)
  4016d0:	3000      	adds	r0, #0
  4016d2:	bf18      	it	ne
  4016d4:	2001      	movne	r0, #1
  4016d6:	4b08      	ldr	r3, [pc, #32]	; (4016f8 <timer_start+0x30>)
  4016d8:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  4016da:	4620      	mov	r0, r4
  4016dc:	4b07      	ldr	r3, [pc, #28]	; (4016fc <timer_start+0x34>)
  4016de:	4798      	blx	r3
  4016e0:	b920      	cbnz	r0, 4016ec <timer_start+0x24>
	_timer_start(&descr->device);
  4016e2:	4620      	mov	r0, r4
  4016e4:	4b06      	ldr	r3, [pc, #24]	; (401700 <timer_start+0x38>)
  4016e6:	4798      	blx	r3
	return ERR_NONE;
  4016e8:	2000      	movs	r0, #0
  4016ea:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4016ec:	f06f 0010 	mvn.w	r0, #16
}
  4016f0:	bd10      	pop	{r4, pc}
  4016f2:	bf00      	nop
  4016f4:	00406014 	.word	0x00406014
  4016f8:	00401849 	.word	0x00401849
  4016fc:	00402571 	.word	0x00402571
  401700:	00402565 	.word	0x00402565

00401704 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401706:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401708:	4605      	mov	r5, r0
  40170a:	460f      	mov	r7, r1
  40170c:	2800      	cmp	r0, #0
  40170e:	bf18      	it	ne
  401710:	2900      	cmpne	r1, #0
  401712:	d002      	beq.n	40171a <usart_sync_write+0x16>
  401714:	bb0a      	cbnz	r2, 40175a <usart_sync_write+0x56>
  401716:	2000      	movs	r0, #0
  401718:	e000      	b.n	40171c <usart_sync_write+0x18>
  40171a:	2000      	movs	r0, #0
  40171c:	22f1      	movs	r2, #241	; 0xf1
  40171e:	4910      	ldr	r1, [pc, #64]	; (401760 <usart_sync_write+0x5c>)
  401720:	4b10      	ldr	r3, [pc, #64]	; (401764 <usart_sync_write+0x60>)
  401722:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  401724:	f105 0408 	add.w	r4, r5, #8
  401728:	4620      	mov	r0, r4
  40172a:	4b0f      	ldr	r3, [pc, #60]	; (401768 <usart_sync_write+0x64>)
  40172c:	4798      	blx	r3
  40172e:	2800      	cmp	r0, #0
  401730:	d0f8      	beq.n	401724 <usart_sync_write+0x20>
  401732:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  401734:	5d79      	ldrb	r1, [r7, r5]
  401736:	4620      	mov	r0, r4
  401738:	4b0c      	ldr	r3, [pc, #48]	; (40176c <usart_sync_write+0x68>)
  40173a:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  40173c:	4620      	mov	r0, r4
  40173e:	4b0a      	ldr	r3, [pc, #40]	; (401768 <usart_sync_write+0x64>)
  401740:	4798      	blx	r3
  401742:	2800      	cmp	r0, #0
  401744:	d0fa      	beq.n	40173c <usart_sync_write+0x38>
			;
	} while (++offset < length);
  401746:	3501      	adds	r5, #1
  401748:	42b5      	cmp	r5, r6
  40174a:	d3f3      	bcc.n	401734 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  40174c:	4620      	mov	r0, r4
  40174e:	4b08      	ldr	r3, [pc, #32]	; (401770 <usart_sync_write+0x6c>)
  401750:	4798      	blx	r3
  401752:	2800      	cmp	r0, #0
  401754:	d0fa      	beq.n	40174c <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  401756:	4628      	mov	r0, r5
  401758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  40175a:	2001      	movs	r0, #1
  40175c:	e7de      	b.n	40171c <usart_sync_write+0x18>
  40175e:	bf00      	nop
  401760:	0040602c 	.word	0x0040602c
  401764:	00401849 	.word	0x00401849
  401768:	0040274d 	.word	0x0040274d
  40176c:	00402705 	.word	0x00402705
  401770:	00402775 	.word	0x00402775

00401774 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401778:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  40177a:	4605      	mov	r5, r0
  40177c:	4688      	mov	r8, r1
  40177e:	2800      	cmp	r0, #0
  401780:	bf18      	it	ne
  401782:	2900      	cmpne	r1, #0
  401784:	d002      	beq.n	40178c <usart_sync_read+0x18>
  401786:	b9d2      	cbnz	r2, 4017be <usart_sync_read+0x4a>
  401788:	2000      	movs	r0, #0
  40178a:	e000      	b.n	40178e <usart_sync_read+0x1a>
  40178c:	2000      	movs	r0, #0
  40178e:	f44f 7286 	mov.w	r2, #268	; 0x10c
  401792:	490c      	ldr	r1, [pc, #48]	; (4017c4 <usart_sync_read+0x50>)
  401794:	4b0c      	ldr	r3, [pc, #48]	; (4017c8 <usart_sync_read+0x54>)
  401796:	4798      	blx	r3
	uint32_t                      offset = 0;
  401798:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  40179a:	f105 0408 	add.w	r4, r5, #8
  40179e:	4620      	mov	r0, r4
  4017a0:	4b0a      	ldr	r3, [pc, #40]	; (4017cc <usart_sync_read+0x58>)
  4017a2:	4798      	blx	r3
  4017a4:	2800      	cmp	r0, #0
  4017a6:	d0f8      	beq.n	40179a <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  4017a8:	4620      	mov	r0, r4
  4017aa:	4b09      	ldr	r3, [pc, #36]	; (4017d0 <usart_sync_read+0x5c>)
  4017ac:	4798      	blx	r3
  4017ae:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  4017b2:	3601      	adds	r6, #1
  4017b4:	42be      	cmp	r6, r7
  4017b6:	d3f0      	bcc.n	40179a <usart_sync_read+0x26>

	return (int32_t)offset;
}
  4017b8:	4630      	mov	r0, r6
  4017ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  4017be:	2001      	movs	r0, #1
  4017c0:	e7e5      	b.n	40178e <usart_sync_read+0x1a>
  4017c2:	bf00      	nop
  4017c4:	0040602c 	.word	0x0040602c
  4017c8:	00401849 	.word	0x00401849
  4017cc:	0040279d 	.word	0x0040279d
  4017d0:	00402729 	.word	0x00402729

004017d4 <usart_sync_init>:
{
  4017d4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4017d6:	4604      	mov	r4, r0
  4017d8:	460d      	mov	r5, r1
  4017da:	2800      	cmp	r0, #0
  4017dc:	bf18      	it	ne
  4017de:	2900      	cmpne	r1, #0
  4017e0:	bf14      	ite	ne
  4017e2:	2001      	movne	r0, #1
  4017e4:	2000      	moveq	r0, #0
  4017e6:	2234      	movs	r2, #52	; 0x34
  4017e8:	4907      	ldr	r1, [pc, #28]	; (401808 <usart_sync_init+0x34>)
  4017ea:	4b08      	ldr	r3, [pc, #32]	; (40180c <usart_sync_init+0x38>)
  4017ec:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  4017ee:	4629      	mov	r1, r5
  4017f0:	f104 0008 	add.w	r0, r4, #8
  4017f4:	4b06      	ldr	r3, [pc, #24]	; (401810 <usart_sync_init+0x3c>)
  4017f6:	4798      	blx	r3
	if (init_status) {
  4017f8:	4603      	mov	r3, r0
  4017fa:	b918      	cbnz	r0, 401804 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  4017fc:	4a05      	ldr	r2, [pc, #20]	; (401814 <usart_sync_init+0x40>)
  4017fe:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  401800:	4a05      	ldr	r2, [pc, #20]	; (401818 <usart_sync_init+0x44>)
  401802:	6022      	str	r2, [r4, #0]
}
  401804:	4618      	mov	r0, r3
  401806:	bd38      	pop	{r3, r4, r5, pc}
  401808:	0040602c 	.word	0x0040602c
  40180c:	00401849 	.word	0x00401849
  401810:	00402699 	.word	0x00402699
  401814:	00401775 	.word	0x00401775
  401818:	00401705 	.word	0x00401705

0040181c <usart_sync_enable>:
{
  40181c:	b510      	push	{r4, lr}
	ASSERT(descr);
  40181e:	4604      	mov	r4, r0
  401820:	2253      	movs	r2, #83	; 0x53
  401822:	4906      	ldr	r1, [pc, #24]	; (40183c <usart_sync_enable+0x20>)
  401824:	3000      	adds	r0, #0
  401826:	bf18      	it	ne
  401828:	2001      	movne	r0, #1
  40182a:	4b05      	ldr	r3, [pc, #20]	; (401840 <usart_sync_enable+0x24>)
  40182c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  40182e:	f104 0008 	add.w	r0, r4, #8
  401832:	4b04      	ldr	r3, [pc, #16]	; (401844 <usart_sync_enable+0x28>)
  401834:	4798      	blx	r3
}
  401836:	2000      	movs	r0, #0
  401838:	bd10      	pop	{r4, pc}
  40183a:	bf00      	nop
  40183c:	0040602c 	.word	0x0040602c
  401840:	00401849 	.word	0x00401849
  401844:	004026d1 	.word	0x004026d1

00401848 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401848:	b900      	cbnz	r0, 40184c <assert+0x4>
		__asm("BKPT #0");
  40184a:	be00      	bkpt	0x0000
  40184c:	4770      	bx	lr

0040184e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  40184e:	6803      	ldr	r3, [r0, #0]
  401850:	b11b      	cbz	r3, 40185a <is_list_element+0xc>
		if (it == element) {
  401852:	428b      	cmp	r3, r1
  401854:	d003      	beq.n	40185e <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  401856:	681b      	ldr	r3, [r3, #0]
  401858:	e7fa      	b.n	401850 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  40185a:	2000      	movs	r0, #0
  40185c:	4770      	bx	lr
			return true;
  40185e:	2001      	movs	r0, #1
}
  401860:	4770      	bx	lr
	...

00401864 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  401864:	b538      	push	{r3, r4, r5, lr}
  401866:	4604      	mov	r4, r0
  401868:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  40186a:	4b06      	ldr	r3, [pc, #24]	; (401884 <list_insert_as_head+0x20>)
  40186c:	4798      	blx	r3
  40186e:	f080 0001 	eor.w	r0, r0, #1
  401872:	2239      	movs	r2, #57	; 0x39
  401874:	4904      	ldr	r1, [pc, #16]	; (401888 <list_insert_as_head+0x24>)
  401876:	b2c0      	uxtb	r0, r0
  401878:	4b04      	ldr	r3, [pc, #16]	; (40188c <list_insert_as_head+0x28>)
  40187a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  40187c:	6823      	ldr	r3, [r4, #0]
  40187e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  401880:	6025      	str	r5, [r4, #0]
  401882:	bd38      	pop	{r3, r4, r5, pc}
  401884:	0040184f 	.word	0x0040184f
  401888:	00406048 	.word	0x00406048
  40188c:	00401849 	.word	0x00401849

00401890 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  401890:	6803      	ldr	r3, [r0, #0]
  401892:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  401894:	6001      	str	r1, [r0, #0]
  401896:	4770      	bx	lr

00401898 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  401898:	6803      	ldr	r3, [r0, #0]
  40189a:	b11b      	cbz	r3, 4018a4 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  40189c:	681a      	ldr	r2, [r3, #0]
  40189e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  4018a0:	4618      	mov	r0, r3
  4018a2:	4770      	bx	lr
	}

	return NULL;
  4018a4:	2000      	movs	r0, #0
}
  4018a6:	4770      	bx	lr

004018a8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  4018a8:	b570      	push	{r4, r5, r6, lr}
  4018aa:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  4018ac:	4604      	mov	r4, r0
  4018ae:	460e      	mov	r6, r1
  4018b0:	2800      	cmp	r0, #0
  4018b2:	bf18      	it	ne
  4018b4:	2900      	cmpne	r1, #0
  4018b6:	d002      	beq.n	4018be <ringbuffer_init+0x16>
  4018b8:	b97a      	cbnz	r2, 4018da <ringbuffer_init+0x32>
  4018ba:	2000      	movs	r0, #0
  4018bc:	e000      	b.n	4018c0 <ringbuffer_init+0x18>
  4018be:	2000      	movs	r0, #0
  4018c0:	2228      	movs	r2, #40	; 0x28
  4018c2:	4908      	ldr	r1, [pc, #32]	; (4018e4 <ringbuffer_init+0x3c>)
  4018c4:	4b08      	ldr	r3, [pc, #32]	; (4018e8 <ringbuffer_init+0x40>)
  4018c6:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  4018c8:	1e6b      	subs	r3, r5, #1
  4018ca:	421d      	tst	r5, r3
  4018cc:	d107      	bne.n	4018de <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  4018ce:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  4018d0:	2000      	movs	r0, #0
  4018d2:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  4018d4:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  4018d6:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  4018d8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  4018da:	2001      	movs	r0, #1
  4018dc:	e7f0      	b.n	4018c0 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  4018de:	f06f 000c 	mvn.w	r0, #12
}
  4018e2:	bd70      	pop	{r4, r5, r6, pc}
  4018e4:	00406068 	.word	0x00406068
  4018e8:	00401849 	.word	0x00401849

004018ec <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  4018ec:	b538      	push	{r3, r4, r5, lr}
  4018ee:	460d      	mov	r5, r1
	ASSERT(rb);
  4018f0:	4604      	mov	r4, r0
  4018f2:	2251      	movs	r2, #81	; 0x51
  4018f4:	490b      	ldr	r1, [pc, #44]	; (401924 <ringbuffer_put+0x38>)
  4018f6:	3000      	adds	r0, #0
  4018f8:	bf18      	it	ne
  4018fa:	2001      	movne	r0, #1
  4018fc:	4b0a      	ldr	r3, [pc, #40]	; (401928 <ringbuffer_put+0x3c>)
  4018fe:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  401900:	6822      	ldr	r2, [r4, #0]
  401902:	68e3      	ldr	r3, [r4, #12]
  401904:	6861      	ldr	r1, [r4, #4]
  401906:	400b      	ands	r3, r1
  401908:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  40190a:	68e3      	ldr	r3, [r4, #12]
  40190c:	68a2      	ldr	r2, [r4, #8]
  40190e:	1a9a      	subs	r2, r3, r2
  401910:	6861      	ldr	r1, [r4, #4]
  401912:	428a      	cmp	r2, r1
  401914:	d901      	bls.n	40191a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  401916:	1a59      	subs	r1, r3, r1
  401918:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  40191a:	3301      	adds	r3, #1
  40191c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  40191e:	2000      	movs	r0, #0
  401920:	bd38      	pop	{r3, r4, r5, pc}
  401922:	bf00      	nop
  401924:	00406068 	.word	0x00406068
  401928:	00401849 	.word	0x00401849

0040192c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  40192c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  40192e:	4a06      	ldr	r2, [pc, #24]	; (401948 <_sbrk+0x1c>)
  401930:	6812      	ldr	r2, [r2, #0]
  401932:	b122      	cbz	r2, 40193e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401934:	4a04      	ldr	r2, [pc, #16]	; (401948 <_sbrk+0x1c>)
  401936:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  401938:	4403      	add	r3, r0
  40193a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  40193c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40193e:	4903      	ldr	r1, [pc, #12]	; (40194c <_sbrk+0x20>)
  401940:	4a01      	ldr	r2, [pc, #4]	; (401948 <_sbrk+0x1c>)
  401942:	6011      	str	r1, [r2, #0]
  401944:	e7f6      	b.n	401934 <_sbrk+0x8>
  401946:	bf00      	nop
  401948:	2040033c 	.word	0x2040033c
  40194c:	20400d38 	.word	0x20400d38

00401950 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  401950:	f04f 30ff 	mov.w	r0, #4294967295
  401954:	4770      	bx	lr

00401956 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  401956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40195a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40195c:	2000      	movs	r0, #0
  40195e:	4770      	bx	lr

00401960 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  401960:	2001      	movs	r0, #1
  401962:	4770      	bx	lr

00401964 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  401964:	2000      	movs	r0, #0
  401966:	4770      	bx	lr

00401968 <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  401968:	6943      	ldr	r3, [r0, #20]
  40196a:	4a07      	ldr	r2, [pc, #28]	; (401988 <_afec_get_irq_num+0x20>)
  40196c:	4293      	cmp	r3, r2
  40196e:	d005      	beq.n	40197c <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  401970:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  401974:	4293      	cmp	r3, r2
  401976:	d103      	bne.n	401980 <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  401978:	2028      	movs	r0, #40	; 0x28
  40197a:	4770      	bx	lr
		return AFEC0_IRQn;
  40197c:	201d      	movs	r0, #29
  40197e:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  401980:	f04f 30ff 	mov.w	r0, #4294967295
}
  401984:	4770      	bx	lr
  401986:	bf00      	nop
  401988:	4003c000 	.word	0x4003c000

0040198c <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  40198c:	4b06      	ldr	r3, [pc, #24]	; (4019a8 <_afec_init_irq_param+0x1c>)
  40198e:	4298      	cmp	r0, r3
  401990:	d003      	beq.n	40199a <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  401992:	4b06      	ldr	r3, [pc, #24]	; (4019ac <_afec_init_irq_param+0x20>)
  401994:	4298      	cmp	r0, r3
  401996:	d003      	beq.n	4019a0 <_afec_init_irq_param+0x14>
  401998:	4770      	bx	lr
		_afec0_dev = dev;
  40199a:	4b05      	ldr	r3, [pc, #20]	; (4019b0 <_afec_init_irq_param+0x24>)
  40199c:	6019      	str	r1, [r3, #0]
  40199e:	e7f8      	b.n	401992 <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  4019a0:	4b03      	ldr	r3, [pc, #12]	; (4019b0 <_afec_init_irq_param+0x24>)
  4019a2:	6059      	str	r1, [r3, #4]
	}
}
  4019a4:	e7f8      	b.n	401998 <_afec_init_irq_param+0xc>
  4019a6:	bf00      	nop
  4019a8:	4003c000 	.word	0x4003c000
  4019ac:	40064000 	.word	0x40064000
  4019b0:	20400340 	.word	0x20400340

004019b4 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  4019b4:	2364      	movs	r3, #100	; 0x64
  4019b6:	4a1d      	ldr	r2, [pc, #116]	; (401a2c <_afec_init+0x78>)
  4019b8:	fb03 2301 	mla	r3, r3, r1, r2
  4019bc:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  4019be:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  4019c0:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  4019c2:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  4019c4:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  4019c6:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  4019c8:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  4019ca:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  4019cc:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  4019ce:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  4019d0:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  4019d2:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  4019d4:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  4019d6:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  4019d8:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  4019da:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  4019de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  4019e0:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  4019e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  4019e6:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  4019ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  4019ec:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  4019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  4019f2:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  4019f6:	2200      	movs	r2, #0
  4019f8:	2a0b      	cmp	r2, #11
  4019fa:	d814      	bhi.n	401a26 <_afec_init+0x72>
{
  4019fc:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  4019fe:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  401a00:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401a04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401a08:	4413      	add	r3, r2
  401a0a:	330c      	adds	r3, #12
  401a0c:	4c07      	ldr	r4, [pc, #28]	; (401a2c <_afec_init+0x78>)
  401a0e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  401a12:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  401a14:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401a16:	3201      	adds	r2, #1
  401a18:	b2d2      	uxtb	r2, r2
  401a1a:	2a0b      	cmp	r2, #11
  401a1c:	d9ef      	bls.n	4019fe <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  401a1e:	2000      	movs	r0, #0
  401a20:	f85d 4b04 	ldr.w	r4, [sp], #4
  401a24:	4770      	bx	lr
  401a26:	2000      	movs	r0, #0
  401a28:	4770      	bx	lr
  401a2a:	bf00      	nop
  401a2c:	0040608c 	.word	0x0040608c

00401a30 <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  401a30:	b530      	push	{r4, r5, lr}
  401a32:	b083      	sub	sp, #12
  401a34:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  401a36:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  401a38:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  401a3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  401a3c:	400b      	ands	r3, r1
  401a3e:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  401a40:	9b01      	ldr	r3, [sp, #4]
  401a42:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401a46:	d10e      	bne.n	401a66 <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  401a48:	9b01      	ldr	r3, [sp, #4]
  401a4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  401a4e:	d10e      	bne.n	401a6e <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  401a50:	9b01      	ldr	r3, [sp, #4]
  401a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401a56:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  401a58:	9c01      	ldr	r4, [sp, #4]
  401a5a:	fab4 f484 	clz	r4, r4
  401a5e:	f1c4 0420 	rsb	r4, r4, #32
  401a62:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401a64:	e01f      	b.n	401aa6 <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  401a66:	6803      	ldr	r3, [r0, #0]
  401a68:	2100      	movs	r1, #0
  401a6a:	4798      	blx	r3
  401a6c:	e7ec      	b.n	401a48 <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  401a6e:	686b      	ldr	r3, [r5, #4]
  401a70:	2100      	movs	r1, #0
  401a72:	4628      	mov	r0, r5
  401a74:	4798      	blx	r3
  401a76:	e7eb      	b.n	401a50 <_afec_interrupt_handler+0x20>
		cnt--;
  401a78:	3c01      	subs	r4, #1
  401a7a:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  401a7c:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  401a7e:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  401a80:	68ab      	ldr	r3, [r5, #8]
  401a82:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  401a84:	6e92      	ldr	r2, [r2, #104]	; 0x68
  401a86:	b292      	uxth	r2, r2
  401a88:	4621      	mov	r1, r4
  401a8a:	4628      	mov	r0, r5
  401a8c:	4798      	blx	r3
		status &= ~(1 << cnt);
  401a8e:	2301      	movs	r3, #1
  401a90:	40a3      	lsls	r3, r4
  401a92:	9c01      	ldr	r4, [sp, #4]
  401a94:	ea24 0403 	bic.w	r4, r4, r3
  401a98:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  401a9a:	9c01      	ldr	r4, [sp, #4]
  401a9c:	fab4 f484 	clz	r4, r4
  401aa0:	f1c4 0420 	rsb	r4, r4, #32
  401aa4:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401aa6:	2c00      	cmp	r4, #0
  401aa8:	d1e6      	bne.n	401a78 <_afec_interrupt_handler+0x48>
	}
}
  401aaa:	b003      	add	sp, #12
  401aac:	bd30      	pop	{r4, r5, pc}
	...

00401ab0 <_afec_get_hardware_index>:
{
  401ab0:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  401ab2:	4b09      	ldr	r3, [pc, #36]	; (401ad8 <_afec_get_hardware_index+0x28>)
  401ab4:	4298      	cmp	r0, r3
  401ab6:	d00a      	beq.n	401ace <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  401ab8:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  401abc:	4298      	cmp	r0, r3
  401abe:	d008      	beq.n	401ad2 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  401ac0:	22a7      	movs	r2, #167	; 0xa7
  401ac2:	4906      	ldr	r1, [pc, #24]	; (401adc <_afec_get_hardware_index+0x2c>)
  401ac4:	2000      	movs	r0, #0
  401ac6:	4b06      	ldr	r3, [pc, #24]	; (401ae0 <_afec_get_hardware_index+0x30>)
  401ac8:	4798      	blx	r3
	return 0;
  401aca:	2000      	movs	r0, #0
  401acc:	bd08      	pop	{r3, pc}
		return 0;
  401ace:	2000      	movs	r0, #0
  401ad0:	bd08      	pop	{r3, pc}
		return 1;
  401ad2:	2001      	movs	r0, #1
}
  401ad4:	bd08      	pop	{r3, pc}
  401ad6:	bf00      	nop
  401ad8:	4003c000 	.word	0x4003c000
  401adc:	00406154 	.word	0x00406154
  401ae0:	00401849 	.word	0x00401849

00401ae4 <_afec_get_regs>:
{
  401ae4:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  401ae6:	4b09      	ldr	r3, [pc, #36]	; (401b0c <_afec_get_regs+0x28>)
  401ae8:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401aea:	2300      	movs	r3, #0
  401aec:	2b01      	cmp	r3, #1
  401aee:	d809      	bhi.n	401b04 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  401af0:	2264      	movs	r2, #100	; 0x64
  401af2:	fb02 f203 	mul.w	r2, r2, r3
  401af6:	4906      	ldr	r1, [pc, #24]	; (401b10 <_afec_get_regs+0x2c>)
  401af8:	5c8a      	ldrb	r2, [r1, r2]
  401afa:	4290      	cmp	r0, r2
  401afc:	d003      	beq.n	401b06 <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401afe:	3301      	adds	r3, #1
  401b00:	b2db      	uxtb	r3, r3
  401b02:	e7f3      	b.n	401aec <_afec_get_regs+0x8>
	return 0;
  401b04:	2300      	movs	r3, #0
}
  401b06:	4618      	mov	r0, r3
  401b08:	bd08      	pop	{r3, pc}
  401b0a:	bf00      	nop
  401b0c:	00401ab1 	.word	0x00401ab1
  401b10:	0040608c 	.word	0x0040608c

00401b14 <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  401b14:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  401b16:	4b02      	ldr	r3, [pc, #8]	; (401b20 <AFEC0_Handler+0xc>)
  401b18:	6818      	ldr	r0, [r3, #0]
  401b1a:	4b02      	ldr	r3, [pc, #8]	; (401b24 <AFEC0_Handler+0x10>)
  401b1c:	4798      	blx	r3
  401b1e:	bd08      	pop	{r3, pc}
  401b20:	20400340 	.word	0x20400340
  401b24:	00401a31 	.word	0x00401a31

00401b28 <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  401b28:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  401b2a:	4b02      	ldr	r3, [pc, #8]	; (401b34 <AFEC1_Handler+0xc>)
  401b2c:	6858      	ldr	r0, [r3, #4]
  401b2e:	4b02      	ldr	r3, [pc, #8]	; (401b38 <AFEC1_Handler+0x10>)
  401b30:	4798      	blx	r3
  401b32:	bd08      	pop	{r3, pc}
  401b34:	20400340 	.word	0x20400340
  401b38:	00401a31 	.word	0x00401a31

00401b3c <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  401b3c:	b570      	push	{r4, r5, r6, lr}
  401b3e:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  401b40:	4605      	mov	r5, r0
  401b42:	f44f 72a1 	mov.w	r2, #322	; 0x142
  401b46:	4923      	ldr	r1, [pc, #140]	; (401bd4 <_adc_async_init+0x98>)
  401b48:	3000      	adds	r0, #0
  401b4a:	bf18      	it	ne
  401b4c:	2001      	movne	r0, #1
  401b4e:	4b22      	ldr	r3, [pc, #136]	; (401bd8 <_adc_async_init+0x9c>)
  401b50:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  401b52:	4620      	mov	r0, r4
  401b54:	4b21      	ldr	r3, [pc, #132]	; (401bdc <_adc_async_init+0xa0>)
  401b56:	4798      	blx	r3
  401b58:	4601      	mov	r1, r0
  401b5a:	4620      	mov	r0, r4
  401b5c:	4b20      	ldr	r3, [pc, #128]	; (401be0 <_adc_async_init+0xa4>)
  401b5e:	4798      	blx	r3
	if (init_status) {
  401b60:	4606      	mov	r6, r0
  401b62:	b108      	cbz	r0, 401b68 <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  401b64:	4630      	mov	r0, r6
  401b66:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  401b68:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  401b6a:	4629      	mov	r1, r5
  401b6c:	4620      	mov	r0, r4
  401b6e:	4b1d      	ldr	r3, [pc, #116]	; (401be4 <_adc_async_init+0xa8>)
  401b70:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  401b72:	4628      	mov	r0, r5
  401b74:	4b1c      	ldr	r3, [pc, #112]	; (401be8 <_adc_async_init+0xac>)
  401b76:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401b78:	2800      	cmp	r0, #0
  401b7a:	db0d      	blt.n	401b98 <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b7c:	0943      	lsrs	r3, r0, #5
  401b7e:	f000 001f 	and.w	r0, r0, #31
  401b82:	2201      	movs	r2, #1
  401b84:	fa02 f000 	lsl.w	r0, r2, r0
  401b88:	3320      	adds	r3, #32
  401b8a:	4a18      	ldr	r2, [pc, #96]	; (401bec <_adc_async_init+0xb0>)
  401b8c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401b90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401b94:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  401b98:	4628      	mov	r0, r5
  401b9a:	4b13      	ldr	r3, [pc, #76]	; (401be8 <_adc_async_init+0xac>)
  401b9c:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401b9e:	2800      	cmp	r0, #0
  401ba0:	db09      	blt.n	401bb6 <_adc_async_init+0x7a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ba2:	0943      	lsrs	r3, r0, #5
  401ba4:	f000 001f 	and.w	r0, r0, #31
  401ba8:	2201      	movs	r2, #1
  401baa:	fa02 f000 	lsl.w	r0, r2, r0
  401bae:	3360      	adds	r3, #96	; 0x60
  401bb0:	4a0e      	ldr	r2, [pc, #56]	; (401bec <_adc_async_init+0xb0>)
  401bb2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  401bb6:	4628      	mov	r0, r5
  401bb8:	4b0b      	ldr	r3, [pc, #44]	; (401be8 <_adc_async_init+0xac>)
  401bba:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401bbc:	2800      	cmp	r0, #0
  401bbe:	dbd1      	blt.n	401b64 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401bc0:	0942      	lsrs	r2, r0, #5
  401bc2:	f000 001f 	and.w	r0, r0, #31
  401bc6:	2301      	movs	r3, #1
  401bc8:	fa03 f000 	lsl.w	r0, r3, r0
  401bcc:	4b07      	ldr	r3, [pc, #28]	; (401bec <_adc_async_init+0xb0>)
  401bce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  401bd2:	e7c7      	b.n	401b64 <_adc_async_init+0x28>
  401bd4:	00406154 	.word	0x00406154
  401bd8:	00401849 	.word	0x00401849
  401bdc:	00401ae5 	.word	0x00401ae5
  401be0:	004019b5 	.word	0x004019b5
  401be4:	0040198d 	.word	0x0040198d
  401be8:	00401969 	.word	0x00401969
  401bec:	e000e100 	.word	0xe000e100

00401bf0 <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  401bf0:	6942      	ldr	r2, [r0, #20]
  401bf2:	2301      	movs	r3, #1
  401bf4:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  401bf8:	6151      	str	r1, [r2, #20]
  401bfa:	4770      	bx	lr

00401bfc <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  401bfc:	2002      	movs	r0, #2
  401bfe:	4770      	bx	lr

00401c00 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  401c00:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401c04:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  401c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401c0c:	fb03 f000 	mul.w	r0, r3, r0
  401c10:	4770      	bx	lr
	...

00401c14 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  401c14:	b500      	push	{lr}
  401c16:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  401c18:	a801      	add	r0, sp, #4
  401c1a:	4b14      	ldr	r3, [pc, #80]	; (401c6c <_init_chip+0x58>)
  401c1c:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  401c1e:	4a14      	ldr	r2, [pc, #80]	; (401c70 <_init_chip+0x5c>)
  401c20:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  401c2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401c30:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  401c34:	a801      	add	r0, sp, #4
  401c36:	4b0f      	ldr	r3, [pc, #60]	; (401c74 <_init_chip+0x60>)
  401c38:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  401c3a:	4a0f      	ldr	r2, [pc, #60]	; (401c78 <_init_chip+0x64>)
  401c3c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  401c3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  401c42:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  401c46:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401c48:	4b0c      	ldr	r3, [pc, #48]	; (401c7c <_init_chip+0x68>)
  401c4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  401c4e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401c52:	d104      	bne.n	401c5e <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401c54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401c58:	4b08      	ldr	r3, [pc, #32]	; (401c7c <_init_chip+0x68>)
  401c5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  401c5e:	4b08      	ldr	r3, [pc, #32]	; (401c80 <_init_chip+0x6c>)
  401c60:	4798      	blx	r3

#endif
	_pmc_init();
  401c62:	4b08      	ldr	r3, [pc, #32]	; (401c84 <_init_chip+0x70>)
  401c64:	4798      	blx	r3
}
  401c66:	b003      	add	sp, #12
  401c68:	f85d fb04 	ldr.w	pc, [sp], #4
  401c6c:	004012d1 	.word	0x004012d1
  401c70:	e000ed00 	.word	0xe000ed00
  401c74:	004012df 	.word	0x004012df
  401c78:	400e0c00 	.word	0x400e0c00
  401c7c:	400e0600 	.word	0x400e0600
  401c80:	004027c9 	.word	0x004027c9
  401c84:	0040209d 	.word	0x0040209d

00401c88 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  401c88:	b538      	push	{r3, r4, r5, lr}
  401c8a:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  401c8c:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  401c8e:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  401c90:	f014 0f01 	tst.w	r4, #1
  401c94:	d11a      	bne.n	401ccc <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  401c96:	f414 7f00 	tst.w	r4, #512	; 0x200
  401c9a:	d11a      	bne.n	401cd2 <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  401c9c:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  401ca0:	d11b      	bne.n	401cda <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  401ca2:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  401ca6:	d11d      	bne.n	401ce4 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  401ca8:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  401cac:	d008      	beq.n	401cc0 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401cae:	68eb      	ldr	r3, [r5, #12]
  401cb0:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  401cb2:	6c52      	ldr	r2, [r2, #68]	; 0x44
  401cb4:	f012 0f20 	tst.w	r2, #32
  401cb8:	d019      	beq.n	401cee <_can_irq_handler+0x66>
  401cba:	2102      	movs	r1, #2
  401cbc:	4628      	mov	r0, r5
  401cbe:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  401cc0:	f014 0f08 	tst.w	r4, #8
  401cc4:	d115      	bne.n	401cf2 <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  401cc6:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  401cc8:	651c      	str	r4, [r3, #80]	; 0x50
  401cca:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  401ccc:	6883      	ldr	r3, [r0, #8]
  401cce:	4798      	blx	r3
  401cd0:	e7e1      	b.n	401c96 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  401cd2:	686b      	ldr	r3, [r5, #4]
  401cd4:	4628      	mov	r0, r5
  401cd6:	4798      	blx	r3
  401cd8:	e7e0      	b.n	401c9c <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  401cda:	68eb      	ldr	r3, [r5, #12]
  401cdc:	2103      	movs	r1, #3
  401cde:	4628      	mov	r0, r5
  401ce0:	4798      	blx	r3
  401ce2:	e7de      	b.n	401ca2 <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  401ce4:	68eb      	ldr	r3, [r5, #12]
  401ce6:	2100      	movs	r1, #0
  401ce8:	4628      	mov	r0, r5
  401cea:	4798      	blx	r3
  401cec:	e7dc      	b.n	401ca8 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401cee:	2101      	movs	r1, #1
  401cf0:	e7e4      	b.n	401cbc <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  401cf2:	68eb      	ldr	r3, [r5, #12]
  401cf4:	2104      	movs	r1, #4
  401cf6:	4628      	mov	r0, r5
  401cf8:	4798      	blx	r3
  401cfa:	e7e4      	b.n	401cc6 <_can_irq_handler+0x3e>

00401cfc <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  401cfc:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  401cfe:	4b02      	ldr	r3, [pc, #8]	; (401d08 <MCAN1_INT0_Handler+0xc>)
  401d00:	6a98      	ldr	r0, [r3, #40]	; 0x28
  401d02:	4b02      	ldr	r3, [pc, #8]	; (401d0c <MCAN1_INT0_Handler+0x10>)
  401d04:	4798      	blx	r3
  401d06:	bd08      	pop	{r3, pc}
  401d08:	20400348 	.word	0x20400348
  401d0c:	00401c89 	.word	0x00401c89

00401d10 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401d10:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  401d12:	2500      	movs	r5, #0
  401d14:	428d      	cmp	r5, r1
  401d16:	d210      	bcs.n	401d3a <_ffs+0x2a>
  401d18:	2201      	movs	r2, #1
  401d1a:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401d1c:	2b1f      	cmp	r3, #31
  401d1e:	d80a      	bhi.n	401d36 <_ffs+0x26>
			if (v[i] & bit) {
  401d20:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401d24:	4222      	tst	r2, r4
  401d26:	d102      	bne.n	401d2e <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401d28:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401d2a:	3301      	adds	r3, #1
  401d2c:	e7f6      	b.n	401d1c <_ffs+0xc>
				return i * 32 + j;
  401d2e:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401d32:	bc30      	pop	{r4, r5}
  401d34:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  401d36:	3501      	adds	r5, #1
  401d38:	e7ec      	b.n	401d14 <_ffs+0x4>
	return -1;
  401d3a:	f04f 30ff 	mov.w	r0, #4294967295
  401d3e:	e7f8      	b.n	401d32 <_ffs+0x22>

00401d40 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401d40:	b510      	push	{r4, lr}
  401d42:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401d44:	2300      	movs	r3, #0
  401d46:	9301      	str	r3, [sp, #4]
  401d48:	9302      	str	r3, [sp, #8]
  401d4a:	9303      	str	r3, [sp, #12]
  401d4c:	9304      	str	r3, [sp, #16]
  401d4e:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401d50:	4b28      	ldr	r3, [pc, #160]	; (401df4 <_ext_irq_handler+0xb4>)
  401d52:	6818      	ldr	r0, [r3, #0]
  401d54:	22f8      	movs	r2, #248	; 0xf8
  401d56:	4928      	ldr	r1, [pc, #160]	; (401df8 <_ext_irq_handler+0xb8>)
  401d58:	3000      	adds	r0, #0
  401d5a:	bf18      	it	ne
  401d5c:	2001      	movne	r0, #1
  401d5e:	4b27      	ldr	r3, [pc, #156]	; (401dfc <_ext_irq_handler+0xbc>)
  401d60:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401d62:	4b27      	ldr	r3, [pc, #156]	; (401e00 <_ext_irq_handler+0xc0>)
  401d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401d68:	4013      	ands	r3, r2
  401d6a:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401d6c:	4a25      	ldr	r2, [pc, #148]	; (401e04 <_ext_irq_handler+0xc4>)
  401d6e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401d70:	6c92      	ldr	r2, [r2, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401d72:	400a      	ands	r2, r1
  401d74:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  401d76:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  401d78:	4923      	ldr	r1, [pc, #140]	; (401e08 <_ext_irq_handler+0xc8>)
  401d7a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401d7c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401d7e:	400a      	ands	r2, r1
  401d80:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  401d82:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  401d84:	e02c      	b.n	401de0 <_ext_irq_handler+0xa0>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  401d86:	4b1b      	ldr	r3, [pc, #108]	; (401df4 <_ext_irq_handler+0xb4>)
  401d88:	681b      	ldr	r3, [r3, #0]
  401d8a:	4620      	mov	r0, r4
  401d8c:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  401d8e:	1163      	asrs	r3, r4, #5
  401d90:	f004 041f 	and.w	r4, r4, #31
  401d94:	2201      	movs	r2, #1
  401d96:	fa02 f404 	lsl.w	r4, r2, r4
  401d9a:	aa06      	add	r2, sp, #24
  401d9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401da0:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401da4:	ea22 0204 	bic.w	r2, r2, r4
  401da8:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  401dac:	2105      	movs	r1, #5
  401dae:	a801      	add	r0, sp, #4
  401db0:	4b16      	ldr	r3, [pc, #88]	; (401e0c <_ext_irq_handler+0xcc>)
  401db2:	4798      	blx	r3
  401db4:	4604      	mov	r4, r0
		while (-1 != pos) {
  401db6:	f1b4 3fff 	cmp.w	r4, #4294967295
  401dba:	d1e4      	bne.n	401d86 <_ext_irq_handler+0x46>
	return ((Pio *)hw)->PIO_ISR;
  401dbc:	4a10      	ldr	r2, [pc, #64]	; (401e00 <_ext_irq_handler+0xc0>)
  401dbe:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401dc0:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401dc2:	400b      	ands	r3, r1
  401dc4:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401dc6:	490f      	ldr	r1, [pc, #60]	; (401e04 <_ext_irq_handler+0xc4>)
  401dc8:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401dca:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401dcc:	4002      	ands	r2, r0
  401dce:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  401dd0:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  401dd2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  401dd6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401dd8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401dda:	4002      	ands	r2, r0
  401ddc:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  401dde:	4313      	orrs	r3, r2
	while (flag_total) {
  401de0:	b12b      	cbz	r3, 401dee <_ext_irq_handler+0xae>
		pos = _ffs(flags, 5);
  401de2:	2105      	movs	r1, #5
  401de4:	a801      	add	r0, sp, #4
  401de6:	4b09      	ldr	r3, [pc, #36]	; (401e0c <_ext_irq_handler+0xcc>)
  401de8:	4798      	blx	r3
  401dea:	4604      	mov	r4, r0
		while (-1 != pos) {
  401dec:	e7e3      	b.n	401db6 <_ext_irq_handler+0x76>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  401dee:	b006      	add	sp, #24
  401df0:	bd10      	pop	{r4, pc}
  401df2:	bf00      	nop
  401df4:	20400374 	.word	0x20400374
  401df8:	004061c8 	.word	0x004061c8
  401dfc:	00401849 	.word	0x00401849
  401e00:	400e0e00 	.word	0x400e0e00
  401e04:	400e1000 	.word	0x400e1000
  401e08:	400e1400 	.word	0x400e1400
  401e0c:	00401d11 	.word	0x00401d11

00401e10 <_pio_get_hardware_index>:
{
  401e10:	b510      	push	{r4, lr}
	ASSERT(hw);
  401e12:	4604      	mov	r4, r0
  401e14:	22d2      	movs	r2, #210	; 0xd2
  401e16:	4905      	ldr	r1, [pc, #20]	; (401e2c <_pio_get_hardware_index+0x1c>)
  401e18:	3000      	adds	r0, #0
  401e1a:	bf18      	it	ne
  401e1c:	2001      	movne	r0, #1
  401e1e:	4b04      	ldr	r3, [pc, #16]	; (401e30 <_pio_get_hardware_index+0x20>)
  401e20:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  401e22:	4804      	ldr	r0, [pc, #16]	; (401e34 <_pio_get_hardware_index+0x24>)
  401e24:	4420      	add	r0, r4
}
  401e26:	f3c0 2047 	ubfx	r0, r0, #9, #8
  401e2a:	bd10      	pop	{r4, pc}
  401e2c:	004061c8 	.word	0x004061c8
  401e30:	00401849 	.word	0x00401849
  401e34:	bff1f200 	.word	0xbff1f200

00401e38 <_pio_get_index>:
{
  401e38:	b510      	push	{r4, lr}
	ASSERT(hw);
  401e3a:	4604      	mov	r4, r0
  401e3c:	22e0      	movs	r2, #224	; 0xe0
  401e3e:	490d      	ldr	r1, [pc, #52]	; (401e74 <_pio_get_index+0x3c>)
  401e40:	3000      	adds	r0, #0
  401e42:	bf18      	it	ne
  401e44:	2001      	movne	r0, #1
  401e46:	4b0c      	ldr	r3, [pc, #48]	; (401e78 <_pio_get_index+0x40>)
  401e48:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  401e4a:	4620      	mov	r0, r4
  401e4c:	4b0b      	ldr	r3, [pc, #44]	; (401e7c <_pio_get_index+0x44>)
  401e4e:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401e50:	2300      	movs	r3, #0
  401e52:	2b02      	cmp	r3, #2
  401e54:	d80b      	bhi.n	401e6e <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  401e56:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  401e5a:	008a      	lsls	r2, r1, #2
  401e5c:	4908      	ldr	r1, [pc, #32]	; (401e80 <_pio_get_index+0x48>)
  401e5e:	5c8a      	ldrb	r2, [r1, r2]
  401e60:	4290      	cmp	r0, r2
  401e62:	d002      	beq.n	401e6a <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401e64:	3301      	adds	r3, #1
  401e66:	b2db      	uxtb	r3, r3
  401e68:	e7f3      	b.n	401e52 <_pio_get_index+0x1a>
			return i;
  401e6a:	b258      	sxtb	r0, r3
  401e6c:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  401e6e:	f04f 30ff 	mov.w	r0, #4294967295
}
  401e72:	bd10      	pop	{r4, pc}
  401e74:	004061c8 	.word	0x004061c8
  401e78:	00401849 	.word	0x00401849
  401e7c:	00401e11 	.word	0x00401e11
  401e80:	0040616c 	.word	0x0040616c

00401e84 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401e84:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  401e86:	4604      	mov	r4, r0
  401e88:	f44f 72af 	mov.w	r2, #350	; 0x15e
  401e8c:	4929      	ldr	r1, [pc, #164]	; (401f34 <_pio_init+0xb0>)
  401e8e:	3000      	adds	r0, #0
  401e90:	bf18      	it	ne
  401e92:	2001      	movne	r0, #1
  401e94:	4b28      	ldr	r3, [pc, #160]	; (401f38 <_pio_init+0xb4>)
  401e96:	4798      	blx	r3

	i = _pio_get_index(hw);
  401e98:	4620      	mov	r0, r4
  401e9a:	4b28      	ldr	r3, [pc, #160]	; (401f3c <_pio_init+0xb8>)
  401e9c:	4798      	blx	r3
	if (i < 0) {
  401e9e:	2800      	cmp	r0, #0
  401ea0:	db43      	blt.n	401f2a <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  401ea2:	4d27      	ldr	r5, [pc, #156]	; (401f40 <_pio_init+0xbc>)
  401ea4:	00c2      	lsls	r2, r0, #3
  401ea6:	1a11      	subs	r1, r2, r0
  401ea8:	008b      	lsls	r3, r1, #2
  401eaa:	442b      	add	r3, r5
  401eac:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  401eae:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  401eb2:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  401eb4:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  401eb8:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  401eba:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  401ebe:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  401ec0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  401ec4:	1a10      	subs	r0, r2, r0
  401ec6:	0083      	lsls	r3, r0, #2
  401ec8:	442b      	add	r3, r5
  401eca:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  401ecc:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401ed0:	4620      	mov	r0, r4
  401ed2:	4b1c      	ldr	r3, [pc, #112]	; (401f44 <_pio_init+0xc0>)
  401ed4:	4798      	blx	r3
  401ed6:	4428      	add	r0, r5
  401ed8:	f990 3054 	ldrsb.w	r3, [r0, #84]	; 0x54
  if ((int32_t)(IRQn) >= 0)
  401edc:	2b00      	cmp	r3, #0
  401ede:	db0c      	blt.n	401efa <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ee0:	095a      	lsrs	r2, r3, #5
  401ee2:	f003 001f 	and.w	r0, r3, #31
  401ee6:	2101      	movs	r1, #1
  401ee8:	4081      	lsls	r1, r0
  401eea:	3220      	adds	r2, #32
  401eec:	4816      	ldr	r0, [pc, #88]	; (401f48 <_pio_init+0xc4>)
  401eee:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401ef2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401ef6:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  401efa:	2b00      	cmp	r3, #0
  401efc:	db08      	blt.n	401f10 <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401efe:	095a      	lsrs	r2, r3, #5
  401f00:	f003 001f 	and.w	r0, r3, #31
  401f04:	2101      	movs	r1, #1
  401f06:	4081      	lsls	r1, r0
  401f08:	3260      	adds	r2, #96	; 0x60
  401f0a:	480f      	ldr	r0, [pc, #60]	; (401f48 <_pio_init+0xc4>)
  401f0c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401f10:	2b00      	cmp	r3, #0
  401f12:	db0d      	blt.n	401f30 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401f14:	0959      	lsrs	r1, r3, #5
  401f16:	f003 031f 	and.w	r3, r3, #31
  401f1a:	2201      	movs	r2, #1
  401f1c:	fa02 f303 	lsl.w	r3, r2, r3
  401f20:	4a09      	ldr	r2, [pc, #36]	; (401f48 <_pio_init+0xc4>)
  401f22:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  401f26:	2000      	movs	r0, #0
  401f28:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  401f2a:	f06f 0010 	mvn.w	r0, #16
  401f2e:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401f30:	2000      	movs	r0, #0
}
  401f32:	bd38      	pop	{r3, r4, r5, pc}
  401f34:	004061c8 	.word	0x004061c8
  401f38:	00401849 	.word	0x00401849
  401f3c:	00401e39 	.word	0x00401e39
  401f40:	0040616c 	.word	0x0040616c
  401f44:	00401e11 	.word	0x00401e11
  401f48:	e000e100 	.word	0xe000e100

00401f4c <PIOD_Handler>:
{
  401f4c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401f4e:	4b01      	ldr	r3, [pc, #4]	; (401f54 <PIOD_Handler+0x8>)
  401f50:	4798      	blx	r3
  401f52:	bd08      	pop	{r3, pc}
  401f54:	00401d41 	.word	0x00401d41

00401f58 <PIOA_Handler>:
{
  401f58:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401f5a:	4b01      	ldr	r3, [pc, #4]	; (401f60 <PIOA_Handler+0x8>)
  401f5c:	4798      	blx	r3
  401f5e:	bd08      	pop	{r3, pc}
  401f60:	00401d41 	.word	0x00401d41

00401f64 <PIOB_Handler>:
{
  401f64:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401f66:	4b01      	ldr	r3, [pc, #4]	; (401f6c <PIOB_Handler+0x8>)
  401f68:	4798      	blx	r3
  401f6a:	bd08      	pop	{r3, pc}
  401f6c:	00401d41 	.word	0x00401d41

00401f70 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401f70:	b538      	push	{r3, r4, r5, lr}
  401f72:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401f74:	4805      	ldr	r0, [pc, #20]	; (401f8c <_ext_irq_init+0x1c>)
  401f76:	4c06      	ldr	r4, [pc, #24]	; (401f90 <_ext_irq_init+0x20>)
  401f78:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  401f7a:	4806      	ldr	r0, [pc, #24]	; (401f94 <_ext_irq_init+0x24>)
  401f7c:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  401f7e:	4806      	ldr	r0, [pc, #24]	; (401f98 <_ext_irq_init+0x28>)
  401f80:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401f82:	4b06      	ldr	r3, [pc, #24]	; (401f9c <_ext_irq_init+0x2c>)
  401f84:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401f86:	2000      	movs	r0, #0
  401f88:	bd38      	pop	{r3, r4, r5, pc}
  401f8a:	bf00      	nop
  401f8c:	400e0e00 	.word	0x400e0e00
  401f90:	00401e85 	.word	0x00401e85
  401f94:	400e1000 	.word	0x400e1000
  401f98:	400e1400 	.word	0x400e1400
  401f9c:	20400374 	.word	0x20400374

00401fa0 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  401fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401fa4:	4604      	mov	r4, r0
  401fa6:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  401fa8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 401ffc <_ext_irq_enable+0x5c>
  401fac:	f240 12ab 	movw	r2, #427	; 0x1ab
  401fb0:	4641      	mov	r1, r8
  401fb2:	289f      	cmp	r0, #159	; 0x9f
  401fb4:	bf8c      	ite	hi
  401fb6:	2000      	movhi	r0, #0
  401fb8:	2001      	movls	r0, #1
  401fba:	4e0e      	ldr	r6, [pc, #56]	; (401ff4 <_ext_irq_enable+0x54>)
  401fbc:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  401fbe:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  401fc0:	22c3      	movs	r2, #195	; 0xc3
  401fc2:	4641      	mov	r1, r8
  401fc4:	2d9f      	cmp	r5, #159	; 0x9f
  401fc6:	bf8c      	ite	hi
  401fc8:	2000      	movhi	r0, #0
  401fca:	2001      	movls	r0, #1
  401fcc:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  401fce:	096d      	lsrs	r5, r5, #5
  401fd0:	4b09      	ldr	r3, [pc, #36]	; (401ff8 <_ext_irq_enable+0x58>)
  401fd2:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  401fd6:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  401fda:	b937      	cbnz	r7, 401fea <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  401fdc:	2301      	movs	r3, #1
  401fde:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  401fe2:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  401fe4:	2000      	movs	r0, #0
  401fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  401fea:	2301      	movs	r3, #1
  401fec:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  401ff0:	642c      	str	r4, [r5, #64]	; 0x40
  401ff2:	e7f7      	b.n	401fe4 <_ext_irq_enable+0x44>
  401ff4:	00401849 	.word	0x00401849
  401ff8:	400e0e00 	.word	0x400e0e00
  401ffc:	004061c8 	.word	0x004061c8

00402000 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  402000:	490e      	ldr	r1, [pc, #56]	; (40203c <_pmc_init_sources+0x3c>)
  402002:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  402004:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  402008:	4b0d      	ldr	r3, [pc, #52]	; (402040 <_pmc_init_sources+0x40>)
  40200a:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  40200c:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40200e:	4b0b      	ldr	r3, [pc, #44]	; (40203c <_pmc_init_sources+0x3c>)
  402010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  402012:	f013 0f01 	tst.w	r3, #1
  402016:	d0fa      	beq.n	40200e <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  402018:	4b08      	ldr	r3, [pc, #32]	; (40203c <_pmc_init_sources+0x3c>)
  40201a:	6a19      	ldr	r1, [r3, #32]
  40201c:	4a09      	ldr	r2, [pc, #36]	; (402044 <_pmc_init_sources+0x44>)
  40201e:	430a      	orrs	r2, r1
  402020:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  402022:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  402024:	4a08      	ldr	r2, [pc, #32]	; (402048 <_pmc_init_sources+0x48>)
  402026:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  402028:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  40202a:	4a08      	ldr	r2, [pc, #32]	; (40204c <_pmc_init_sources+0x4c>)
  40202c:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  40202e:	4b03      	ldr	r3, [pc, #12]	; (40203c <_pmc_init_sources+0x3c>)
  402030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  402032:	f013 0f02 	tst.w	r3, #2
  402036:	d0fa      	beq.n	40202e <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  402038:	4770      	bx	lr
  40203a:	bf00      	nop
  40203c:	400e0600 	.word	0x400e0600
  402040:	00373e01 	.word	0x00373e01
  402044:	01370000 	.word	0x01370000
  402048:	f800ffff 	.word	0xf800ffff
  40204c:	20183f01 	.word	0x20183f01

00402050 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402050:	4a11      	ldr	r2, [pc, #68]	; (402098 <_pmc_init_master_clock+0x48>)
  402052:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  402054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  402058:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40205a:	4b0f      	ldr	r3, [pc, #60]	; (402098 <_pmc_init_master_clock+0x48>)
  40205c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40205e:	f013 0f08 	tst.w	r3, #8
  402062:	d0fa      	beq.n	40205a <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402064:	4a0c      	ldr	r2, [pc, #48]	; (402098 <_pmc_init_master_clock+0x48>)
  402066:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  402068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  40206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  402070:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  402072:	4b09      	ldr	r3, [pc, #36]	; (402098 <_pmc_init_master_clock+0x48>)
  402074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  402076:	f013 0f08 	tst.w	r3, #8
  40207a:	d0fa      	beq.n	402072 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40207c:	4a06      	ldr	r2, [pc, #24]	; (402098 <_pmc_init_master_clock+0x48>)
  40207e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  402080:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  402084:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  402088:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40208a:	4b03      	ldr	r3, [pc, #12]	; (402098 <_pmc_init_master_clock+0x48>)
  40208c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40208e:	f013 0f08 	tst.w	r3, #8
  402092:	d0fa      	beq.n	40208a <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  402094:	4770      	bx	lr
  402096:	bf00      	nop
  402098:	400e0600 	.word	0x400e0600

0040209c <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  40209c:	b508      	push	{r3, lr}
	_pmc_init_sources();
  40209e:	4b02      	ldr	r3, [pc, #8]	; (4020a8 <_pmc_init+0xc>)
  4020a0:	4798      	blx	r3
	_pmc_init_master_clock();
  4020a2:	4b02      	ldr	r3, [pc, #8]	; (4020ac <_pmc_init+0x10>)
  4020a4:	4798      	blx	r3
  4020a6:	bd08      	pop	{r3, pc}
  4020a8:	00402001 	.word	0x00402001
  4020ac:	00402051 	.word	0x00402051

004020b0 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4020b0:	2300      	movs	r3, #0
  4020b2:	2b01      	cmp	r3, #1
  4020b4:	d80f      	bhi.n	4020d6 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  4020b6:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  4020ba:	008a      	lsls	r2, r1, #2
  4020bc:	4907      	ldr	r1, [pc, #28]	; (4020dc <_pwm_get_cfg+0x2c>)
  4020be:	588a      	ldr	r2, [r1, r2]
  4020c0:	4282      	cmp	r2, r0
  4020c2:	d002      	beq.n	4020ca <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4020c4:	3301      	adds	r3, #1
  4020c6:	b2db      	uxtb	r3, r3
  4020c8:	e7f3      	b.n	4020b2 <_pwm_get_cfg+0x2>
			return (_pwms + i);
  4020ca:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4020ce:	009a      	lsls	r2, r3, #2
  4020d0:	4608      	mov	r0, r1
  4020d2:	4410      	add	r0, r2
  4020d4:	4770      	bx	lr
		}
	}

	return NULL;
  4020d6:	2000      	movs	r0, #0
}
  4020d8:	4770      	bx	lr
  4020da:	bf00      	nop
  4020dc:	004061e4 	.word	0x004061e4

004020e0 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  4020e0:	4b06      	ldr	r3, [pc, #24]	; (4020fc <_pwm_init_irq_param+0x1c>)
  4020e2:	4298      	cmp	r0, r3
  4020e4:	d003      	beq.n	4020ee <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  4020e6:	4b06      	ldr	r3, [pc, #24]	; (402100 <_pwm_init_irq_param+0x20>)
  4020e8:	4298      	cmp	r0, r3
  4020ea:	d003      	beq.n	4020f4 <_pwm_init_irq_param+0x14>
  4020ec:	4770      	bx	lr
		_pwm0_dev = dev;
  4020ee:	4b05      	ldr	r3, [pc, #20]	; (402104 <_pwm_init_irq_param+0x24>)
  4020f0:	6019      	str	r1, [r3, #0]
  4020f2:	e7f8      	b.n	4020e6 <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  4020f4:	4b03      	ldr	r3, [pc, #12]	; (402104 <_pwm_init_irq_param+0x24>)
  4020f6:	6059      	str	r1, [r3, #4]
	}
}
  4020f8:	e7f8      	b.n	4020ec <_pwm_init_irq_param+0xc>
  4020fa:	bf00      	nop
  4020fc:	40020000 	.word	0x40020000
  402100:	4005c000 	.word	0x4005c000
  402104:	20400378 	.word	0x20400378

00402108 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  402108:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  40210a:	6903      	ldr	r3, [r0, #16]
	return ((Pwm *)hw)->PWM_ISR1;
  40210c:	69db      	ldr	r3, [r3, #28]
  40210e:	b113      	cbz	r3, 402116 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  402110:	6803      	ldr	r3, [r0, #0]
  402112:	b103      	cbz	r3, 402116 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  402114:	4798      	blx	r3
  402116:	bd08      	pop	{r3, pc}

00402118 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  402118:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  40211a:	4b02      	ldr	r3, [pc, #8]	; (402124 <PWM0_Handler+0xc>)
  40211c:	6818      	ldr	r0, [r3, #0]
  40211e:	4b02      	ldr	r3, [pc, #8]	; (402128 <PWM0_Handler+0x10>)
  402120:	4798      	blx	r3
  402122:	bd08      	pop	{r3, pc}
  402124:	20400378 	.word	0x20400378
  402128:	00402109 	.word	0x00402109

0040212c <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  40212c:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  40212e:	4b02      	ldr	r3, [pc, #8]	; (402138 <PWM1_Handler+0xc>)
  402130:	6858      	ldr	r0, [r3, #4]
  402132:	4b02      	ldr	r3, [pc, #8]	; (40213c <PWM1_Handler+0x10>)
  402134:	4798      	blx	r3
  402136:	bd08      	pop	{r3, pc}
  402138:	20400378 	.word	0x20400378
  40213c:	00402109 	.word	0x00402109

00402140 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  402140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402142:	4606      	mov	r6, r0
	ASSERT(hw);
  402144:	460c      	mov	r4, r1
  402146:	1c08      	adds	r0, r1, #0
  402148:	bf18      	it	ne
  40214a:	2001      	movne	r0, #1
  40214c:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  402150:	4944      	ldr	r1, [pc, #272]	; (402264 <_pwm_init+0x124>)
  402152:	4b45      	ldr	r3, [pc, #276]	; (402268 <_pwm_init+0x128>)
  402154:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  402156:	4620      	mov	r0, r4
  402158:	4b44      	ldr	r3, [pc, #272]	; (40226c <_pwm_init+0x12c>)
  40215a:	4798      	blx	r3
  40215c:	4605      	mov	r5, r0

	device->hw = hw;
  40215e:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  402160:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  402162:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  402164:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  402166:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  402168:	6903      	ldr	r3, [r0, #16]
  40216a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  40216e:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  402170:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  402172:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  402174:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  402176:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  402178:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  40217c:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  40217e:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  402180:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  402182:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  402186:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  402188:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  40218c:	2300      	movs	r3, #0
  40218e:	e019      	b.n	4021c4 <_pwm_init+0x84>
		ch = cfg->ch + i;
  402190:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  402192:	0118      	lsls	r0, r3, #4
  402194:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  402198:	5c3a      	ldrb	r2, [r7, r0]
  40219a:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  40219e:	3210      	adds	r2, #16
  4021a0:	0152      	lsls	r2, r2, #5
  4021a2:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  4021a4:	5c3a      	ldrb	r2, [r7, r0]
  4021a6:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  4021aa:	3210      	adds	r2, #16
  4021ac:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4021b0:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  4021b2:	5c3a      	ldrb	r2, [r7, r0]
  4021b4:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  4021b8:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4021bc:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  4021c0:	3301      	adds	r3, #1
  4021c2:	b25b      	sxtb	r3, r3
  4021c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4021c6:	4293      	cmp	r3, r2
  4021c8:	d3e2      	bcc.n	402190 <_pwm_init+0x50>
  4021ca:	2300      	movs	r3, #0
  4021cc:	e014      	b.n	4021f8 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  4021ce:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4021d0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4021d4:	0082      	lsls	r2, r0, #2
  4021d6:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  4021da:	5c88      	ldrb	r0, [r1, r2]
  4021dc:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  4021e0:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  4021e4:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4021e8:	5c8a      	ldrb	r2, [r1, r2]
  4021ea:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4021ee:	3213      	adds	r2, #19
  4021f0:	0112      	lsls	r2, r2, #4
  4021f2:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  4021f4:	3301      	adds	r3, #1
  4021f6:	b25b      	sxtb	r3, r3
  4021f8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4021fa:	4293      	cmp	r3, r2
  4021fc:	d3e7      	bcc.n	4021ce <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  4021fe:	4631      	mov	r1, r6
  402200:	4620      	mov	r0, r4
  402202:	4b1b      	ldr	r3, [pc, #108]	; (402270 <_pwm_init+0x130>)
  402204:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  402206:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40220a:	2b00      	cmp	r3, #0
  40220c:	db0d      	blt.n	40222a <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40220e:	095a      	lsrs	r2, r3, #5
  402210:	f003 031f 	and.w	r3, r3, #31
  402214:	2101      	movs	r1, #1
  402216:	fa01 f303 	lsl.w	r3, r1, r3
  40221a:	3220      	adds	r2, #32
  40221c:	4915      	ldr	r1, [pc, #84]	; (402274 <_pwm_init+0x134>)
  40221e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402222:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402226:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40222a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40222e:	2b00      	cmp	r3, #0
  402230:	db09      	blt.n	402246 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402232:	095a      	lsrs	r2, r3, #5
  402234:	f003 031f 	and.w	r3, r3, #31
  402238:	2101      	movs	r1, #1
  40223a:	fa01 f303 	lsl.w	r3, r1, r3
  40223e:	3260      	adds	r2, #96	; 0x60
  402240:	490c      	ldr	r1, [pc, #48]	; (402274 <_pwm_init+0x134>)
  402242:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  402246:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40224a:	2b00      	cmp	r3, #0
  40224c:	db08      	blt.n	402260 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40224e:	0959      	lsrs	r1, r3, #5
  402250:	f003 031f 	and.w	r3, r3, #31
  402254:	2201      	movs	r2, #1
  402256:	fa02 f303 	lsl.w	r3, r2, r3
  40225a:	4a06      	ldr	r2, [pc, #24]	; (402274 <_pwm_init+0x134>)
  40225c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  402260:	2000      	movs	r0, #0
  402262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402264:	0040628c 	.word	0x0040628c
  402268:	00401849 	.word	0x00401849
  40226c:	004020b1 	.word	0x004020b1
  402270:	004020e1 	.word	0x004020e1
  402274:	e000e100 	.word	0xe000e100

00402278 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  402278:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  40227a:	4604      	mov	r4, r0
  40227c:	f240 12b5 	movw	r2, #437	; 0x1b5
  402280:	490b      	ldr	r1, [pc, #44]	; (4022b0 <_pwm_enable+0x38>)
  402282:	3000      	adds	r0, #0
  402284:	bf18      	it	ne
  402286:	2001      	movne	r0, #1
  402288:	4b0a      	ldr	r3, [pc, #40]	; (4022b4 <_pwm_enable+0x3c>)
  40228a:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  40228c:	6920      	ldr	r0, [r4, #16]
  40228e:	4b0a      	ldr	r3, [pc, #40]	; (4022b8 <_pwm_enable+0x40>)
  402290:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  402292:	2300      	movs	r3, #0
  402294:	e008      	b.n	4022a8 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  402296:	6921      	ldr	r1, [r4, #16]
  402298:	6b05      	ldr	r5, [r0, #48]	; 0x30
  40229a:	011a      	lsls	r2, r3, #4
  40229c:	5cad      	ldrb	r5, [r5, r2]
  40229e:	2201      	movs	r2, #1
  4022a0:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  4022a2:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  4022a4:	3301      	adds	r3, #1
  4022a6:	b25b      	sxtb	r3, r3
  4022a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4022aa:	4293      	cmp	r3, r2
  4022ac:	d3f3      	bcc.n	402296 <_pwm_enable+0x1e>
	}
}
  4022ae:	bd38      	pop	{r3, r4, r5, pc}
  4022b0:	0040628c 	.word	0x0040628c
  4022b4:	00401849 	.word	0x00401849
  4022b8:	004020b1 	.word	0x004020b1

004022bc <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  4022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4022be:	460d      	mov	r5, r1
  4022c0:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  4022c2:	4604      	mov	r4, r0
  4022c4:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  4022c8:	4911      	ldr	r1, [pc, #68]	; (402310 <_pwm_set_param+0x54>)
  4022ca:	2800      	cmp	r0, #0
  4022cc:	bf18      	it	ne
  4022ce:	42ae      	cmpne	r6, r5
  4022d0:	bf34      	ite	cc
  4022d2:	2001      	movcc	r0, #1
  4022d4:	2000      	movcs	r0, #0
  4022d6:	4b0f      	ldr	r3, [pc, #60]	; (402314 <_pwm_set_param+0x58>)
  4022d8:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  4022da:	6920      	ldr	r0, [r4, #16]
  4022dc:	4b0e      	ldr	r3, [pc, #56]	; (402318 <_pwm_set_param+0x5c>)
  4022de:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4022e0:	2300      	movs	r3, #0
  4022e2:	e010      	b.n	402306 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  4022e4:	6922      	ldr	r2, [r4, #16]
  4022e6:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4022e8:	0119      	lsls	r1, r3, #4
  4022ea:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  4022ec:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  4022f0:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  4022f4:	6922      	ldr	r2, [r4, #16]
  4022f6:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4022f8:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  4022fa:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  4022fe:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  402302:	3301      	adds	r3, #1
  402304:	b2db      	uxtb	r3, r3
  402306:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402308:	4293      	cmp	r3, r2
  40230a:	d3eb      	bcc.n	4022e4 <_pwm_set_param+0x28>
	}
}
  40230c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40230e:	bf00      	nop
  402310:	0040628c 	.word	0x0040628c
  402314:	00401849 	.word	0x00401849
  402318:	004020b1 	.word	0x004020b1

0040231c <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  40231c:	b510      	push	{r4, lr}
	ASSERT(device);
  40231e:	4604      	mov	r4, r0
  402320:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402324:	4907      	ldr	r1, [pc, #28]	; (402344 <_pwm_is_enabled+0x28>)
  402326:	3000      	adds	r0, #0
  402328:	bf18      	it	ne
  40232a:	2001      	movne	r0, #1
  40232c:	4b06      	ldr	r3, [pc, #24]	; (402348 <_pwm_is_enabled+0x2c>)
  40232e:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  402330:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  402332:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  402334:	f013 0f0f 	tst.w	r3, #15
  402338:	d001      	beq.n	40233e <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  40233a:	2001      	movs	r0, #1
	}
}
  40233c:	bd10      	pop	{r4, pc}
		return false;
  40233e:	2000      	movs	r0, #0
  402340:	bd10      	pop	{r4, pc}
  402342:	bf00      	nop
  402344:	0040628c 	.word	0x0040628c
  402348:	00401849 	.word	0x00401849

0040234c <_pwm_set_irq_state>:

	return hri_pwm_read_CDTY_reg(device->hw, cfg->ch[0].index);
}

void _pwm_set_irq_state(struct _pwm_device *const device, const enum _pwm_callback_type type, const bool disable)
{
  40234c:	b538      	push	{r3, r4, r5, lr}
  40234e:	460d      	mov	r5, r1
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device);
  402350:	4604      	mov	r4, r0
  402352:	f44f 7200 	mov.w	r2, #512	; 0x200
  402356:	4912      	ldr	r1, [pc, #72]	; (4023a0 <_pwm_set_irq_state+0x54>)
  402358:	3000      	adds	r0, #0
  40235a:	bf18      	it	ne
  40235c:	2001      	movne	r0, #1
  40235e:	4b11      	ldr	r3, [pc, #68]	; (4023a4 <_pwm_set_irq_state+0x58>)
  402360:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  402362:	6920      	ldr	r0, [r4, #16]
  402364:	4b10      	ldr	r3, [pc, #64]	; (4023a8 <_pwm_set_irq_state+0x5c>)
  402366:	4798      	blx	r3

	if (PWM_DEVICE_PERIOD_CB == type) {
  402368:	b18d      	cbz	r5, 40238e <_pwm_set_irq_state+0x42>
		for (i = 0; i < cfg->ch_num; i++) {
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
		}
	} else if (PWM_DEVICE_ERROR_CB == type) {
  40236a:	2d01      	cmp	r5, #1
  40236c:	d011      	beq.n	402392 <_pwm_set_irq_state+0x46>
  40236e:	bd38      	pop	{r3, r4, r5, pc}
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
  402370:	6921      	ldr	r1, [r4, #16]
  402372:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402374:	0113      	lsls	r3, r2, #4
  402376:	5ced      	ldrb	r5, [r5, r3]
  402378:	2301      	movs	r3, #1
  40237a:	40ab      	lsls	r3, r5
	((Pwm *)hw)->PWM_IER1 = data;
  40237c:	610b      	str	r3, [r1, #16]
	((Pwm *)hw)->PWM_IDR1 = ~data;
  40237e:	43db      	mvns	r3, r3
  402380:	614b      	str	r3, [r1, #20]
		for (i = 0; i < cfg->ch_num; i++) {
  402382:	3201      	adds	r2, #1
  402384:	b2d2      	uxtb	r2, r2
  402386:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402388:	429a      	cmp	r2, r3
  40238a:	d3f1      	bcc.n	402370 <_pwm_set_irq_state+0x24>
  40238c:	bd38      	pop	{r3, r4, r5, pc}
  40238e:	2200      	movs	r2, #0
  402390:	e7f9      	b.n	402386 <_pwm_set_irq_state+0x3a>
		ASSERT(false);
  402392:	f240 2209 	movw	r2, #521	; 0x209
  402396:	4902      	ldr	r1, [pc, #8]	; (4023a0 <_pwm_set_irq_state+0x54>)
  402398:	2000      	movs	r0, #0
  40239a:	4b02      	ldr	r3, [pc, #8]	; (4023a4 <_pwm_set_irq_state+0x58>)
  40239c:	4798      	blx	r3
	}
}
  40239e:	e7e6      	b.n	40236e <_pwm_set_irq_state+0x22>
  4023a0:	0040628c 	.word	0x0040628c
  4023a4:	00401849 	.word	0x00401849
  4023a8:	004020b1 	.word	0x004020b1

004023ac <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  4023ac:	2000      	movs	r0, #0
  4023ae:	4770      	bx	lr

004023b0 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  4023b0:	4b03      	ldr	r3, [pc, #12]	; (4023c0 <_system_time_init+0x10>)
  4023b2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4023b6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  4023b8:	2205      	movs	r2, #5
  4023ba:	601a      	str	r2, [r3, #0]
  4023bc:	4770      	bx	lr
  4023be:	bf00      	nop
  4023c0:	e000e010 	.word	0xe000e010

004023c4 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  4023c4:	b508      	push	{r3, lr}
	_system_time_init(hw);
  4023c6:	4b01      	ldr	r3, [pc, #4]	; (4023cc <_delay_init+0x8>)
  4023c8:	4798      	blx	r3
  4023ca:	bd08      	pop	{r3, pc}
  4023cc:	004023b1 	.word	0x004023b1

004023d0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  4023d0:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  4023d2:	e00d      	b.n	4023f0 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  4023d4:	4b0d      	ldr	r3, [pc, #52]	; (40240c <_delay_cycles+0x3c>)
  4023d6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  4023da:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  4023dc:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4023de:	4b0b      	ldr	r3, [pc, #44]	; (40240c <_delay_cycles+0x3c>)
  4023e0:	681b      	ldr	r3, [r3, #0]
  4023e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4023e6:	d0fa      	beq.n	4023de <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  4023e8:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4023ec:	3101      	adds	r1, #1
	while (n--) {
  4023ee:	4610      	mov	r0, r2
  4023f0:	1e43      	subs	r3, r0, #1
  4023f2:	b2da      	uxtb	r2, r3
  4023f4:	2800      	cmp	r0, #0
  4023f6:	d1ed      	bne.n	4023d4 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  4023f8:	4b04      	ldr	r3, [pc, #16]	; (40240c <_delay_cycles+0x3c>)
  4023fa:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4023fc:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4023fe:	4b03      	ldr	r3, [pc, #12]	; (40240c <_delay_cycles+0x3c>)
  402400:	681b      	ldr	r3, [r3, #0]
  402402:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402406:	d0fa      	beq.n	4023fe <_delay_cycles+0x2e>
		;
}
  402408:	4770      	bx	lr
  40240a:	bf00      	nop
  40240c:	e000e010 	.word	0xe000e010

00402410 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  402410:	2300      	movs	r3, #0
  402412:	2b01      	cmp	r3, #1
  402414:	d815      	bhi.n	402442 <get_cfg+0x32>
{
  402416:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  402418:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  40241c:	008a      	lsls	r2, r1, #2
  40241e:	490a      	ldr	r1, [pc, #40]	; (402448 <get_cfg+0x38>)
  402420:	588a      	ldr	r2, [r1, r2]
  402422:	4282      	cmp	r2, r0
  402424:	d007      	beq.n	402436 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  402426:	3301      	adds	r3, #1
  402428:	b2db      	uxtb	r3, r3
  40242a:	2b01      	cmp	r3, #1
  40242c:	d9f4      	bls.n	402418 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  40242e:	2000      	movs	r0, #0
}
  402430:	f85d 4b04 	ldr.w	r4, [sp], #4
  402434:	4770      	bx	lr
			return &(_tcs[i]);
  402436:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  40243a:	00a3      	lsls	r3, r4, #2
  40243c:	4608      	mov	r0, r1
  40243e:	4418      	add	r0, r3
  402440:	e7f6      	b.n	402430 <get_cfg+0x20>
	return NULL;
  402442:	2000      	movs	r0, #0
  402444:	4770      	bx	lr
  402446:	bf00      	nop
  402448:	20400000 	.word	0x20400000

0040244c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  40244c:	4b06      	ldr	r3, [pc, #24]	; (402468 <_tc_init_irq_param+0x1c>)
  40244e:	4298      	cmp	r0, r3
  402450:	d003      	beq.n	40245a <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  402452:	4b06      	ldr	r3, [pc, #24]	; (40246c <_tc_init_irq_param+0x20>)
  402454:	4298      	cmp	r0, r3
  402456:	d003      	beq.n	402460 <_tc_init_irq_param+0x14>
  402458:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  40245a:	4b05      	ldr	r3, [pc, #20]	; (402470 <_tc_init_irq_param+0x24>)
  40245c:	6019      	str	r1, [r3, #0]
  40245e:	e7f8      	b.n	402452 <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  402460:	4b03      	ldr	r3, [pc, #12]	; (402470 <_tc_init_irq_param+0x24>)
  402462:	6059      	str	r1, [r3, #4]
	}
}
  402464:	e7f8      	b.n	402458 <_tc_init_irq_param+0xc>
  402466:	bf00      	nop
  402468:	4000c000 	.word	0x4000c000
  40246c:	40054000 	.word	0x40054000
  402470:	20400398 	.word	0x20400398

00402474 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  402474:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  402476:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  402478:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  40247a:	f013 0f10 	tst.w	r3, #16
  40247e:	d100      	bne.n	402482 <tc_interrupt_handler+0xe>
  402480:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  402482:	6803      	ldr	r3, [r0, #0]
  402484:	4798      	blx	r3
	}
}
  402486:	e7fb      	b.n	402480 <tc_interrupt_handler+0xc>

00402488 <_timer_init>:
{
  402488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40248c:	4606      	mov	r6, r0
  40248e:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  402490:	4608      	mov	r0, r1
  402492:	4b2f      	ldr	r3, [pc, #188]	; (402550 <_timer_init+0xc8>)
  402494:	4798      	blx	r3
  402496:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  402498:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  40249c:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  4024a0:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  4024a2:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  4024a6:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  4024a8:	22c3      	movs	r2, #195	; 0xc3
  4024aa:	492a      	ldr	r1, [pc, #168]	; (402554 <_timer_init+0xcc>)
  4024ac:	2001      	movs	r0, #1
  4024ae:	4b2a      	ldr	r3, [pc, #168]	; (402558 <_timer_init+0xd0>)
  4024b0:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  4024b2:	f248 0307 	movw	r3, #32775	; 0x8007
  4024b6:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4024b8:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4024bc:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4024c0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4024c4:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4024c6:	2300      	movs	r3, #0
  4024c8:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  4024ca:	f248 020f 	movw	r2, #32783	; 0x800f
  4024ce:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4024d0:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4024d4:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4024d8:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4024dc:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4024de:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  4024e0:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  4024e2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  4024e6:	4631      	mov	r1, r6
  4024e8:	4620      	mov	r0, r4
  4024ea:	4b1c      	ldr	r3, [pc, #112]	; (40255c <_timer_init+0xd4>)
  4024ec:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  4024ee:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4024f2:	2b00      	cmp	r3, #0
  4024f4:	db0d      	blt.n	402512 <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4024f6:	095a      	lsrs	r2, r3, #5
  4024f8:	f003 031f 	and.w	r3, r3, #31
  4024fc:	2101      	movs	r1, #1
  4024fe:	fa01 f303 	lsl.w	r3, r1, r3
  402502:	3220      	adds	r2, #32
  402504:	4916      	ldr	r1, [pc, #88]	; (402560 <_timer_init+0xd8>)
  402506:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40250a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40250e:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  402512:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402516:	2b00      	cmp	r3, #0
  402518:	db09      	blt.n	40252e <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40251a:	095a      	lsrs	r2, r3, #5
  40251c:	f003 031f 	and.w	r3, r3, #31
  402520:	2101      	movs	r1, #1
  402522:	fa01 f303 	lsl.w	r3, r1, r3
  402526:	3260      	adds	r2, #96	; 0x60
  402528:	490d      	ldr	r1, [pc, #52]	; (402560 <_timer_init+0xd8>)
  40252a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  40252e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402532:	2b00      	cmp	r3, #0
  402534:	db08      	blt.n	402548 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402536:	0959      	lsrs	r1, r3, #5
  402538:	f003 031f 	and.w	r3, r3, #31
  40253c:	2201      	movs	r2, #1
  40253e:	fa02 f303 	lsl.w	r3, r2, r3
  402542:	4a07      	ldr	r2, [pc, #28]	; (402560 <_timer_init+0xd8>)
  402544:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  402548:	2000      	movs	r0, #0
  40254a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40254e:	bf00      	nop
  402550:	00402411 	.word	0x00402411
  402554:	004062a4 	.word	0x004062a4
  402558:	00401849 	.word	0x00401849
  40255c:	0040244d 	.word	0x0040244d
  402560:	e000e100 	.word	0xe000e100

00402564 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402564:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  402566:	2305      	movs	r3, #5
  402568:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  40256a:	68c2      	ldr	r2, [r0, #12]
  40256c:	6413      	str	r3, [r2, #64]	; 0x40
  40256e:	4770      	bx	lr

00402570 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  402570:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  402572:	6a13      	ldr	r3, [r2, #32]
  402574:	f3c3 4300 	ubfx	r3, r3, #16, #1
  402578:	6e10      	ldr	r0, [r2, #96]	; 0x60
  40257a:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  40257e:	4318      	orrs	r0, r3
  402580:	4770      	bx	lr

00402582 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  402582:	2000      	movs	r0, #0
  402584:	4770      	bx	lr
	...

00402588 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  402588:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  40258a:	4b02      	ldr	r3, [pc, #8]	; (402594 <TC0_Handler+0xc>)
  40258c:	6818      	ldr	r0, [r3, #0]
  40258e:	4b02      	ldr	r3, [pc, #8]	; (402598 <TC0_Handler+0x10>)
  402590:	4798      	blx	r3
  402592:	bd08      	pop	{r3, pc}
  402594:	20400398 	.word	0x20400398
  402598:	00402475 	.word	0x00402475

0040259c <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  40259c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  40259e:	4b02      	ldr	r3, [pc, #8]	; (4025a8 <TC9_Handler+0xc>)
  4025a0:	6858      	ldr	r0, [r3, #4]
  4025a2:	4b02      	ldr	r3, [pc, #8]	; (4025ac <TC9_Handler+0x10>)
  4025a4:	4798      	blx	r3
  4025a6:	bd08      	pop	{r3, pc}
  4025a8:	20400398 	.word	0x20400398
  4025ac:	00402475 	.word	0x00402475

004025b0 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  4025b0:	b510      	push	{r4, lr}
	ASSERT(hw);
  4025b2:	4604      	mov	r4, r0
  4025b4:	f240 222b 	movw	r2, #555	; 0x22b
  4025b8:	4905      	ldr	r1, [pc, #20]	; (4025d0 <_usart_get_hardware_index+0x20>)
  4025ba:	3000      	adds	r0, #0
  4025bc:	bf18      	it	ne
  4025be:	2001      	movne	r0, #1
  4025c0:	4b04      	ldr	r3, [pc, #16]	; (4025d4 <_usart_get_hardware_index+0x24>)
  4025c2:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  4025c4:	4804      	ldr	r0, [pc, #16]	; (4025d8 <_usart_get_hardware_index+0x28>)
  4025c6:	4420      	add	r0, r4
}
  4025c8:	f3c0 3087 	ubfx	r0, r0, #14, #8
  4025cc:	bd10      	pop	{r4, pc}
  4025ce:	bf00      	nop
  4025d0:	004062c4 	.word	0x004062c4
  4025d4:	00401849 	.word	0x00401849
  4025d8:	bffdc000 	.word	0xbffdc000

004025dc <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  4025dc:	b510      	push	{r4, lr}
	ASSERT(hw);
  4025de:	4604      	mov	r4, r0
  4025e0:	f240 2287 	movw	r2, #647	; 0x287
  4025e4:	490e      	ldr	r1, [pc, #56]	; (402620 <_get_usart_index+0x44>)
  4025e6:	3000      	adds	r0, #0
  4025e8:	bf18      	it	ne
  4025ea:	2001      	movne	r0, #1
  4025ec:	4b0d      	ldr	r3, [pc, #52]	; (402624 <_get_usart_index+0x48>)
  4025ee:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  4025f0:	4620      	mov	r0, r4
  4025f2:	4b0d      	ldr	r3, [pc, #52]	; (402628 <_get_usart_index+0x4c>)
  4025f4:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4025f6:	2300      	movs	r3, #0
  4025f8:	b143      	cbz	r3, 40260c <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  4025fa:	f240 2291 	movw	r2, #657	; 0x291
  4025fe:	4908      	ldr	r1, [pc, #32]	; (402620 <_get_usart_index+0x44>)
  402600:	2000      	movs	r0, #0
  402602:	4b08      	ldr	r3, [pc, #32]	; (402624 <_get_usart_index+0x48>)
  402604:	4798      	blx	r3
	return 0;
  402606:	2300      	movs	r3, #0
}
  402608:	4618      	mov	r0, r3
  40260a:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  40260c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402610:	008a      	lsls	r2, r1, #2
  402612:	4906      	ldr	r1, [pc, #24]	; (40262c <_get_usart_index+0x50>)
  402614:	5c8a      	ldrb	r2, [r1, r2]
  402616:	4290      	cmp	r0, r2
  402618:	d0f6      	beq.n	402608 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40261a:	3301      	adds	r3, #1
  40261c:	b2db      	uxtb	r3, r3
  40261e:	e7eb      	b.n	4025f8 <_get_usart_index+0x1c>
  402620:	004062c4 	.word	0x004062c4
  402624:	00401849 	.word	0x00401849
  402628:	004025b1 	.word	0x004025b1
  40262c:	004062b8 	.word	0x004062b8

00402630 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  402630:	b510      	push	{r4, lr}
	ASSERT(hw);
  402632:	4604      	mov	r4, r0
  402634:	f240 229e 	movw	r2, #670	; 0x29e
  402638:	4911      	ldr	r1, [pc, #68]	; (402680 <_usart_init+0x50>)
  40263a:	3000      	adds	r0, #0
  40263c:	bf18      	it	ne
  40263e:	2001      	movne	r0, #1
  402640:	4b10      	ldr	r3, [pc, #64]	; (402684 <_usart_init+0x54>)
  402642:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  402644:	4620      	mov	r0, r4
  402646:	4b10      	ldr	r3, [pc, #64]	; (402688 <_usart_init+0x58>)
  402648:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  40264a:	4b10      	ldr	r3, [pc, #64]	; (40268c <_usart_init+0x5c>)
  40264c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  402650:	2300      	movs	r3, #0
  402652:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  402654:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  402656:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  402658:	22ac      	movs	r2, #172	; 0xac
  40265a:	6022      	str	r2, [r4, #0]
  40265c:	f44f 7280 	mov.w	r2, #256	; 0x100
  402660:	6022      	str	r2, [r4, #0]
  402662:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402666:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  402668:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  40266c:	0081      	lsls	r1, r0, #2
  40266e:	4a08      	ldr	r2, [pc, #32]	; (402690 <_usart_init+0x60>)
  402670:	440a      	add	r2, r1
  402672:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  402674:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  402676:	4a07      	ldr	r2, [pc, #28]	; (402694 <_usart_init+0x64>)
  402678:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  40267a:	4618      	mov	r0, r3
  40267c:	bd10      	pop	{r4, pc}
  40267e:	bf00      	nop
  402680:	004062c4 	.word	0x004062c4
  402684:	00401849 	.word	0x00401849
  402688:	004025dd 	.word	0x004025dd
  40268c:	55534100 	.word	0x55534100
  402690:	004062b8 	.word	0x004062b8
  402694:	000100f4 	.word	0x000100f4

00402698 <_usart_sync_init>:
{
  402698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40269a:	460c      	mov	r4, r1
	ASSERT(device);
  40269c:	4e09      	ldr	r6, [pc, #36]	; (4026c4 <_usart_sync_init+0x2c>)
  40269e:	4607      	mov	r7, r0
  4026a0:	22bd      	movs	r2, #189	; 0xbd
  4026a2:	4631      	mov	r1, r6
  4026a4:	3000      	adds	r0, #0
  4026a6:	bf18      	it	ne
  4026a8:	2001      	movne	r0, #1
  4026aa:	4d07      	ldr	r5, [pc, #28]	; (4026c8 <_usart_sync_init+0x30>)
  4026ac:	47a8      	blx	r5
	ASSERT(hw);
  4026ae:	22be      	movs	r2, #190	; 0xbe
  4026b0:	4631      	mov	r1, r6
  4026b2:	1c20      	adds	r0, r4, #0
  4026b4:	bf18      	it	ne
  4026b6:	2001      	movne	r0, #1
  4026b8:	47a8      	blx	r5
	device->hw = hw;
  4026ba:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  4026bc:	4620      	mov	r0, r4
  4026be:	4b03      	ldr	r3, [pc, #12]	; (4026cc <_usart_sync_init+0x34>)
  4026c0:	4798      	blx	r3
}
  4026c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4026c4:	004062c4 	.word	0x004062c4
  4026c8:	00401849 	.word	0x00401849
  4026cc:	00402631 	.word	0x00402631

004026d0 <_usart_sync_enable>:
{
  4026d0:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4026d2:	4e0a      	ldr	r6, [pc, #40]	; (4026fc <_usart_sync_enable+0x2c>)
  4026d4:	4604      	mov	r4, r0
  4026d6:	f240 1205 	movw	r2, #261	; 0x105
  4026da:	4631      	mov	r1, r6
  4026dc:	3000      	adds	r0, #0
  4026de:	bf18      	it	ne
  4026e0:	2001      	movne	r0, #1
  4026e2:	4d07      	ldr	r5, [pc, #28]	; (402700 <_usart_sync_enable+0x30>)
  4026e4:	47a8      	blx	r5
	_usart_enable(device->hw);
  4026e6:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4026e8:	f240 22c7 	movw	r2, #711	; 0x2c7
  4026ec:	4631      	mov	r1, r6
  4026ee:	1c20      	adds	r0, r4, #0
  4026f0:	bf18      	it	ne
  4026f2:	2001      	movne	r0, #1
  4026f4:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  4026f6:	2350      	movs	r3, #80	; 0x50
  4026f8:	6023      	str	r3, [r4, #0]
  4026fa:	bd70      	pop	{r4, r5, r6, pc}
  4026fc:	004062c4 	.word	0x004062c4
  402700:	00401849 	.word	0x00401849

00402704 <_usart_sync_write_byte>:
{
  402704:	b538      	push	{r3, r4, r5, lr}
  402706:	460c      	mov	r4, r1
	ASSERT(device);
  402708:	4605      	mov	r5, r0
  40270a:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  40270e:	4904      	ldr	r1, [pc, #16]	; (402720 <_usart_sync_write_byte+0x1c>)
  402710:	3000      	adds	r0, #0
  402712:	bf18      	it	ne
  402714:	2001      	movne	r0, #1
  402716:	4b03      	ldr	r3, [pc, #12]	; (402724 <_usart_sync_write_byte+0x20>)
  402718:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  40271a:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  40271c:	61dc      	str	r4, [r3, #28]
  40271e:	bd38      	pop	{r3, r4, r5, pc}
  402720:	004062c4 	.word	0x004062c4
  402724:	00401849 	.word	0x00401849

00402728 <_usart_sync_read_byte>:
{
  402728:	b510      	push	{r4, lr}
	ASSERT(device);
  40272a:	4604      	mov	r4, r0
  40272c:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  402730:	4904      	ldr	r1, [pc, #16]	; (402744 <_usart_sync_read_byte+0x1c>)
  402732:	3000      	adds	r0, #0
  402734:	bf18      	it	ne
  402736:	2001      	movne	r0, #1
  402738:	4b03      	ldr	r3, [pc, #12]	; (402748 <_usart_sync_read_byte+0x20>)
  40273a:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  40273c:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  40273e:	6998      	ldr	r0, [r3, #24]
}
  402740:	b2c0      	uxtb	r0, r0
  402742:	bd10      	pop	{r4, pc}
  402744:	004062c4 	.word	0x004062c4
  402748:	00401849 	.word	0x00401849

0040274c <_usart_sync_is_ready_to_send>:
{
  40274c:	b510      	push	{r4, lr}
	ASSERT(device);
  40274e:	4604      	mov	r4, r0
  402750:	f240 12c3 	movw	r2, #451	; 0x1c3
  402754:	4905      	ldr	r1, [pc, #20]	; (40276c <_usart_sync_is_ready_to_send+0x20>)
  402756:	3000      	adds	r0, #0
  402758:	bf18      	it	ne
  40275a:	2001      	movne	r0, #1
  40275c:	4b04      	ldr	r3, [pc, #16]	; (402770 <_usart_sync_is_ready_to_send+0x24>)
  40275e:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  402760:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  402762:	6958      	ldr	r0, [r3, #20]
}
  402764:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402768:	bd10      	pop	{r4, pc}
  40276a:	bf00      	nop
  40276c:	004062c4 	.word	0x004062c4
  402770:	00401849 	.word	0x00401849

00402774 <_usart_sync_is_transmit_done>:
{
  402774:	b510      	push	{r4, lr}
	ASSERT(device);
  402776:	4604      	mov	r4, r0
  402778:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  40277c:	4905      	ldr	r1, [pc, #20]	; (402794 <_usart_sync_is_transmit_done+0x20>)
  40277e:	3000      	adds	r0, #0
  402780:	bf18      	it	ne
  402782:	2001      	movne	r0, #1
  402784:	4b04      	ldr	r3, [pc, #16]	; (402798 <_usart_sync_is_transmit_done+0x24>)
  402786:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  402788:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  40278a:	6958      	ldr	r0, [r3, #20]
}
  40278c:	f3c0 2040 	ubfx	r0, r0, #9, #1
  402790:	bd10      	pop	{r4, pc}
  402792:	bf00      	nop
  402794:	004062c4 	.word	0x004062c4
  402798:	00401849 	.word	0x00401849

0040279c <_usart_sync_is_byte_received>:
{
  40279c:	b510      	push	{r4, lr}
	ASSERT(device);
  40279e:	4604      	mov	r4, r0
  4027a0:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4027a4:	4905      	ldr	r1, [pc, #20]	; (4027bc <_usart_sync_is_byte_received+0x20>)
  4027a6:	3000      	adds	r0, #0
  4027a8:	bf18      	it	ne
  4027aa:	2001      	movne	r0, #1
  4027ac:	4b04      	ldr	r3, [pc, #16]	; (4027c0 <_usart_sync_is_byte_received+0x24>)
  4027ae:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  4027b0:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  4027b2:	6958      	ldr	r0, [r3, #20]
  4027b4:	f000 0001 	and.w	r0, r0, #1
}
  4027b8:	bd10      	pop	{r4, pc}
  4027ba:	bf00      	nop
  4027bc:	004062c4 	.word	0x004062c4
  4027c0:	00401849 	.word	0x00401849

004027c4 <_usart_get_usart_sync>:
}
  4027c4:	2000      	movs	r0, #0
  4027c6:	4770      	bx	lr

004027c8 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  4027c8:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4027ca:	2300      	movs	r3, #0
  4027cc:	e004      	b.n	4027d8 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  4027ce:	0199      	lsls	r1, r3, #6
  4027d0:	4a16      	ldr	r2, [pc, #88]	; (40282c <_dma_init+0x64>)
  4027d2:	5852      	ldr	r2, [r2, r1]
  4027d4:	3301      	adds	r3, #1
  4027d6:	b2db      	uxtb	r3, r3
  4027d8:	2b17      	cmp	r3, #23
  4027da:	d9f8      	bls.n	4027ce <_dma_init+0x6>
  4027dc:	2300      	movs	r3, #0
  4027de:	e014      	b.n	40280a <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  4027e0:	4c13      	ldr	r4, [pc, #76]	; (402830 <_dma_init+0x68>)
  4027e2:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  4027e6:	2100      	movs	r1, #0
  4027e8:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  4027ea:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  4027ec:	1c98      	adds	r0, r3, #2
  4027ee:	0180      	lsls	r0, r0, #6
  4027f0:	1825      	adds	r5, r4, r0
  4027f2:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  4027f4:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  4027f6:	490f      	ldr	r1, [pc, #60]	; (402834 <_dma_init+0x6c>)
  4027f8:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  4027fc:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  4027fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  402802:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  402804:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  402806:	3301      	adds	r3, #1
  402808:	b2db      	uxtb	r3, r3
  40280a:	2b17      	cmp	r3, #23
  40280c:	d9e8      	bls.n	4027e0 <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40280e:	4b0a      	ldr	r3, [pc, #40]	; (402838 <_dma_init+0x70>)
  402810:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  402818:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40281c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402820:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402824:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  402826:	2000      	movs	r0, #0
  402828:	bc30      	pop	{r4, r5}
  40282a:	4770      	bx	lr
  40282c:	4007805c 	.word	0x4007805c
  402830:	40078000 	.word	0x40078000
  402834:	004062e0 	.word	0x004062e0
  402838:	e000e100 	.word	0xe000e100

0040283c <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  40283c:	0180      	lsls	r0, r0, #6
  40283e:	4b02      	ldr	r3, [pc, #8]	; (402848 <_dma_set_destination_address+0xc>)
  402840:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  402842:	2000      	movs	r0, #0
  402844:	4770      	bx	lr
  402846:	bf00      	nop
  402848:	40078064 	.word	0x40078064

0040284c <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  40284c:	0180      	lsls	r0, r0, #6
  40284e:	4b02      	ldr	r3, [pc, #8]	; (402858 <_dma_set_source_address+0xc>)
  402850:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  402852:	2000      	movs	r0, #0
  402854:	4770      	bx	lr
  402856:	bf00      	nop
  402858:	40078060 	.word	0x40078060

0040285c <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  40285c:	0180      	lsls	r0, r0, #6
  40285e:	4a04      	ldr	r2, [pc, #16]	; (402870 <_dma_set_data_amount+0x14>)
  402860:	4402      	add	r2, r0
  402862:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  402864:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  402868:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  40286a:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  40286c:	2000      	movs	r0, #0
  40286e:	4770      	bx	lr
  402870:	40078000 	.word	0x40078000

00402874 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  402874:	2301      	movs	r3, #1
  402876:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  40287a:	4b03      	ldr	r3, [pc, #12]	; (402888 <_dma_enable_transaction+0x14>)
  40287c:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  40287e:	b101      	cbz	r1, 402882 <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  402880:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  402882:	2000      	movs	r0, #0
  402884:	4770      	bx	lr
  402886:	bf00      	nop
  402888:	40078000 	.word	0x40078000

0040288c <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  40288c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  402890:	008a      	lsls	r2, r1, #2
  402892:	4b02      	ldr	r3, [pc, #8]	; (40289c <_dma_get_channel_resource+0x10>)
  402894:	4413      	add	r3, r2
  402896:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  402898:	2000      	movs	r0, #0
  40289a:	4770      	bx	lr
  40289c:	204003a0 	.word	0x204003a0

004028a0 <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  4028a0:	b19a      	cbz	r2, 4028ca <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  4028a2:	b951      	cbnz	r1, 4028ba <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  4028a4:	0182      	lsls	r2, r0, #6
  4028a6:	4b13      	ldr	r3, [pc, #76]	; (4028f4 <_dma_set_irq_state+0x54>)
  4028a8:	4413      	add	r3, r2
  4028aa:	2201      	movs	r2, #1
  4028ac:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  4028ae:	2301      	movs	r3, #1
  4028b0:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  4028b4:	4b0f      	ldr	r3, [pc, #60]	; (4028f4 <_dma_set_irq_state+0x54>)
  4028b6:	60d8      	str	r0, [r3, #12]
  4028b8:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4028ba:	2901      	cmp	r1, #1
  4028bc:	d1f7      	bne.n	4028ae <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  4028be:	0182      	lsls	r2, r0, #6
  4028c0:	4b0c      	ldr	r3, [pc, #48]	; (4028f4 <_dma_set_irq_state+0x54>)
  4028c2:	4413      	add	r3, r2
  4028c4:	2270      	movs	r2, #112	; 0x70
  4028c6:	651a      	str	r2, [r3, #80]	; 0x50
  4028c8:	e7f1      	b.n	4028ae <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  4028ca:	b951      	cbnz	r1, 4028e2 <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4028cc:	0182      	lsls	r2, r0, #6
  4028ce:	4b09      	ldr	r3, [pc, #36]	; (4028f4 <_dma_set_irq_state+0x54>)
  4028d0:	4413      	add	r3, r2
  4028d2:	2201      	movs	r2, #1
  4028d4:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  4028d6:	2301      	movs	r3, #1
  4028d8:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  4028dc:	4b05      	ldr	r3, [pc, #20]	; (4028f4 <_dma_set_irq_state+0x54>)
  4028de:	6118      	str	r0, [r3, #16]
  4028e0:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4028e2:	2901      	cmp	r1, #1
  4028e4:	d1f7      	bne.n	4028d6 <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4028e6:	0182      	lsls	r2, r0, #6
  4028e8:	4b02      	ldr	r3, [pc, #8]	; (4028f4 <_dma_set_irq_state+0x54>)
  4028ea:	4413      	add	r3, r2
  4028ec:	2270      	movs	r2, #112	; 0x70
  4028ee:	655a      	str	r2, [r3, #84]	; 0x54
  4028f0:	e7f1      	b.n	4028d6 <_dma_set_irq_state+0x36>
  4028f2:	bf00      	nop
  4028f4:	40078000 	.word	0x40078000

004028f8 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  4028f8:	4b17      	ldr	r3, [pc, #92]	; (402958 <XDMAC_Handler+0x60>)
  4028fa:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4028fc:	2300      	movs	r3, #0
  4028fe:	2b17      	cmp	r3, #23
  402900:	d81b      	bhi.n	40293a <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  402902:	fa21 f203 	lsr.w	r2, r1, r3
  402906:	f012 0f01 	tst.w	r2, #1
  40290a:	d102      	bne.n	402912 <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  40290c:	3301      	adds	r3, #1
  40290e:	b2db      	uxtb	r3, r3
  402910:	e7f5      	b.n	4028fe <XDMAC_Handler+0x6>
			channel = i;
  402912:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  402914:	2b00      	cmp	r3, #0
  402916:	db1d      	blt.n	402954 <XDMAC_Handler+0x5c>
{
  402918:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  40291a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  40291e:	0090      	lsls	r0, r2, #2
  402920:	4a0e      	ldr	r2, [pc, #56]	; (40295c <XDMAC_Handler+0x64>)
  402922:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  402924:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  402926:	0189      	lsls	r1, r1, #6
  402928:	4a0d      	ldr	r2, [pc, #52]	; (402960 <XDMAC_Handler+0x68>)
  40292a:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  40292c:	f012 0f70 	tst.w	r2, #112	; 0x70
  402930:	d106      	bne.n	402940 <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  402932:	f012 0f01 	tst.w	r2, #1
  402936:	d106      	bne.n	402946 <XDMAC_Handler+0x4e>
  402938:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  40293a:	f04f 33ff 	mov.w	r3, #4294967295
  40293e:	e7e9      	b.n	402914 <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  402940:	6843      	ldr	r3, [r0, #4]
  402942:	4798      	blx	r3
  402944:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  402946:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  40294a:	00a3      	lsls	r3, r4, #2
  40294c:	4a03      	ldr	r2, [pc, #12]	; (40295c <XDMAC_Handler+0x64>)
  40294e:	58d3      	ldr	r3, [r2, r3]
  402950:	4798      	blx	r3
  402952:	e7f1      	b.n	402938 <XDMAC_Handler+0x40>
  402954:	4770      	bx	lr
  402956:	bf00      	nop
  402958:	40078000 	.word	0x40078000
  40295c:	204003a0 	.word	0x204003a0
  402960:	4007805c 	.word	0x4007805c

00402964 <main>:




int main(void)
{
  402964:	b580      	push	{r7, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  402966:	4b18      	ldr	r3, [pc, #96]	; (4029c8 <main+0x64>)
  402968:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	/* Additional User initialisation */
	dma_adc_init();
  40296a:	4b18      	ldr	r3, [pc, #96]	; (4029cc <main+0x68>)
  40296c:	4798      	blx	r3
	pwm_init_user();
  40296e:	4b18      	ldr	r3, [pc, #96]	; (4029d0 <main+0x6c>)
  402970:	4798      	blx	r3
	encoder_init();
  402972:	4b18      	ldr	r3, [pc, #96]	; (4029d4 <main+0x70>)
  402974:	4798      	blx	r3
	pos_sens_init();
  402976:	4b18      	ldr	r3, [pc, #96]	; (4029d8 <main+0x74>)
  402978:	4798      	blx	r3
	
	/* Enable all devices */
	pwm_enable_all();
  40297a:	4b18      	ldr	r3, [pc, #96]	; (4029dc <main+0x78>)
  40297c:	4798      	blx	r3
	adc_enable_all();
  40297e:	4b18      	ldr	r3, [pc, #96]	; (4029e0 <main+0x7c>)
  402980:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  402982:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  402986:	4b17      	ldr	r3, [pc, #92]	; (4029e4 <main+0x80>)
  402988:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);		//enables the DC-DC converter for the HV side
	
	timer_start(&ENCODER_A);
  40298a:	4817      	ldr	r0, [pc, #92]	; (4029e8 <main+0x84>)
  40298c:	4c17      	ldr	r4, [pc, #92]	; (4029ec <main+0x88>)
  40298e:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  402990:	4817      	ldr	r0, [pc, #92]	; (4029f0 <main+0x8c>)
  402992:	47a0      	blx	r4
	
	
	//test timers for encoder
	//Timer_Counter_Initial_Test();
	//test encoder itself
	Encoder_Initial_Test();
  402994:	4b17      	ldr	r3, [pc, #92]	; (4029f4 <main+0x90>)
  402996:	4798      	blx	r3
  402998:	4f17      	ldr	r7, [pc, #92]	; (4029f8 <main+0x94>)
  40299a:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
  40299e:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
  4029a2:	4d16      	ldr	r5, [pc, #88]	; (4029fc <main+0x98>)
  4029a4:	f44f 7680 	mov.w	r6, #256	; 0x100
  4029a8:	632e      	str	r6, [r5, #48]	; 0x30
	/* Replace with your application code */
	while (1) {
		
		gpio_set_pin_level(PIN_GPIO_6,true);
		gpio_set_pin_level(PIN_USER_LED,true);
		delay_ms(500);
  4029aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4029ae:	4c14      	ldr	r4, [pc, #80]	; (402a00 <main+0x9c>)
  4029b0:	47a0      	blx	r4
		
		dma_adc_0_enable_for_one_transaction();
  4029b2:	4b14      	ldr	r3, [pc, #80]	; (402a04 <main+0xa0>)
  4029b4:	4798      	blx	r3
		dma_adc_1_enable_for_one_transaction();
  4029b6:	4b14      	ldr	r3, [pc, #80]	; (402a08 <main+0xa4>)
  4029b8:	4798      	blx	r3
	((Pio *)hw)->PIO_CODR = mask;
  4029ba:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4029be:	636e      	str	r6, [r5, #52]	; 0x34
		//printf("main - %i %i %i %i %i %i %i %i %i %i %i %i  \n", (int)afec_buf[0],(int)afec_buf[1],(int)afec_buf[2],(int)afec_buf[3],(int)afec_buf[4],(int)afec_buf[5],(int)afec_buf[6],(int)afec_buf[7],(int)afec_buf[8],(int)afec_buf[9],(int)afec_buf[10],(int)afec_buf[11]);
		//AFEC0_Handler
		
		gpio_set_pin_level(PIN_GPIO_6,false);
		gpio_set_pin_level(PIN_USER_LED,false);
		delay_ms(500);
  4029c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4029c4:	47a0      	blx	r4
  4029c6:	e7e7      	b.n	402998 <main+0x34>
  4029c8:	004001d5 	.word	0x004001d5
  4029cc:	004007f5 	.word	0x004007f5
  4029d0:	00400951 	.word	0x00400951
  4029d4:	004001e9 	.word	0x004001e9
  4029d8:	00400569 	.word	0x00400569
  4029dc:	00400a25 	.word	0x00400a25
  4029e0:	004008e1 	.word	0x004008e1
  4029e4:	400e0e00 	.word	0x400e0e00
  4029e8:	20400614 	.word	0x20400614
  4029ec:	004016c9 	.word	0x004016c9
  4029f0:	20400564 	.word	0x20400564
  4029f4:	00400a85 	.word	0x00400a85
  4029f8:	400e1400 	.word	0x400e1400
  4029fc:	400e1200 	.word	0x400e1200
  402a00:	00401301 	.word	0x00401301
  402a04:	004005f5 	.word	0x004005f5
  402a08:	004006ed 	.word	0x004006ed

00402a0c <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  402a0c:	b958      	cbnz	r0, 402a26 <_read+0x1a>
{
  402a0e:	b508      	push	{r3, lr}
  402a10:	460b      	mov	r3, r1
  402a12:	4611      	mov	r1, r2
  402a14:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  402a16:	4b05      	ldr	r3, [pc, #20]	; (402a2c <_read+0x20>)
  402a18:	4798      	blx	r3
	if (n < 0) {
  402a1a:	2800      	cmp	r0, #0
  402a1c:	db00      	blt.n	402a20 <_read+0x14>
		return -1;
	}

	return n;
}
  402a1e:	bd08      	pop	{r3, pc}
		return -1;
  402a20:	f04f 30ff 	mov.w	r0, #4294967295
  402a24:	bd08      	pop	{r3, pc}
		return -1;
  402a26:	f04f 30ff 	mov.w	r0, #4294967295
  402a2a:	4770      	bx	lr
  402a2c:	00402a85 	.word	0x00402a85

00402a30 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  402a30:	3801      	subs	r0, #1
  402a32:	2802      	cmp	r0, #2
  402a34:	d80b      	bhi.n	402a4e <_write+0x1e>
{
  402a36:	b508      	push	{r3, lr}
  402a38:	460b      	mov	r3, r1
  402a3a:	4611      	mov	r1, r2
  402a3c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  402a3e:	4b05      	ldr	r3, [pc, #20]	; (402a54 <_write+0x24>)
  402a40:	4798      	blx	r3
	if (n < 0) {
  402a42:	2800      	cmp	r0, #0
  402a44:	db00      	blt.n	402a48 <_write+0x18>
		return -1;
	}

	return n;
}
  402a46:	bd08      	pop	{r3, pc}
		return -1;
  402a48:	f04f 30ff 	mov.w	r0, #4294967295
  402a4c:	bd08      	pop	{r3, pc}
		return -1;
  402a4e:	f04f 30ff 	mov.w	r0, #4294967295
  402a52:	4770      	bx	lr
  402a54:	00402aa9 	.word	0x00402aa9

00402a58 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  402a58:	b570      	push	{r4, r5, r6, lr}
  402a5a:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  402a5c:	4d06      	ldr	r5, [pc, #24]	; (402a78 <stdio_io_init+0x20>)
  402a5e:	682b      	ldr	r3, [r5, #0]
  402a60:	2100      	movs	r1, #0
  402a62:	6898      	ldr	r0, [r3, #8]
  402a64:	4c05      	ldr	r4, [pc, #20]	; (402a7c <stdio_io_init+0x24>)
  402a66:	47a0      	blx	r4
	setbuf(stdin, NULL);
  402a68:	682b      	ldr	r3, [r5, #0]
  402a6a:	2100      	movs	r1, #0
  402a6c:	6858      	ldr	r0, [r3, #4]
  402a6e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  402a70:	4b03      	ldr	r3, [pc, #12]	; (402a80 <stdio_io_init+0x28>)
  402a72:	601e      	str	r6, [r3, #0]
  402a74:	bd70      	pop	{r4, r5, r6, pc}
  402a76:	bf00      	nop
  402a78:	20400048 	.word	0x20400048
  402a7c:	00403d69 	.word	0x00403d69
  402a80:	204004c0 	.word	0x204004c0

00402a84 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  402a84:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  402a86:	4b06      	ldr	r3, [pc, #24]	; (402aa0 <stdio_io_read+0x1c>)
  402a88:	681b      	ldr	r3, [r3, #0]
  402a8a:	b133      	cbz	r3, 402a9a <stdio_io_read+0x16>
  402a8c:	460a      	mov	r2, r1
  402a8e:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  402a90:	b292      	uxth	r2, r2
  402a92:	4618      	mov	r0, r3
  402a94:	4b03      	ldr	r3, [pc, #12]	; (402aa4 <stdio_io_read+0x20>)
  402a96:	4798      	blx	r3
  402a98:	bd08      	pop	{r3, pc}
		return 0;
  402a9a:	2000      	movs	r0, #0
}
  402a9c:	bd08      	pop	{r3, pc}
  402a9e:	bf00      	nop
  402aa0:	204004c0 	.word	0x204004c0
  402aa4:	00401499 	.word	0x00401499

00402aa8 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  402aa8:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  402aaa:	4b06      	ldr	r3, [pc, #24]	; (402ac4 <stdio_io_write+0x1c>)
  402aac:	681b      	ldr	r3, [r3, #0]
  402aae:	b133      	cbz	r3, 402abe <stdio_io_write+0x16>
  402ab0:	460a      	mov	r2, r1
  402ab2:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  402ab4:	b292      	uxth	r2, r2
  402ab6:	4618      	mov	r0, r3
  402ab8:	4b03      	ldr	r3, [pc, #12]	; (402ac8 <stdio_io_write+0x20>)
  402aba:	4798      	blx	r3
  402abc:	bd08      	pop	{r3, pc}
		return 0;
  402abe:	2000      	movs	r0, #0
}
  402ac0:	bd08      	pop	{r3, pc}
  402ac2:	bf00      	nop
  402ac4:	204004c0 	.word	0x204004c0
  402ac8:	00401469 	.word	0x00401469

00402acc <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  402acc:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  402ace:	4c04      	ldr	r4, [pc, #16]	; (402ae0 <stdio_redirect_init+0x14>)
  402ad0:	4620      	mov	r0, r4
  402ad2:	4b04      	ldr	r3, [pc, #16]	; (402ae4 <stdio_redirect_init+0x18>)
  402ad4:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  402ad6:	4620      	mov	r0, r4
  402ad8:	4b03      	ldr	r3, [pc, #12]	; (402ae8 <stdio_redirect_init+0x1c>)
  402ada:	4798      	blx	r3
  402adc:	bd10      	pop	{r4, pc}
  402ade:	bf00      	nop
  402ae0:	20400608 	.word	0x20400608
  402ae4:	0040181d 	.word	0x0040181d
  402ae8:	00402a59 	.word	0x00402a59

00402aec <__aeabi_drsub>:
  402aec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402af0:	e002      	b.n	402af8 <__adddf3>
  402af2:	bf00      	nop

00402af4 <__aeabi_dsub>:
  402af4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402af8 <__adddf3>:
  402af8:	b530      	push	{r4, r5, lr}
  402afa:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402afe:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402b02:	ea94 0f05 	teq	r4, r5
  402b06:	bf08      	it	eq
  402b08:	ea90 0f02 	teqeq	r0, r2
  402b0c:	bf1f      	itttt	ne
  402b0e:	ea54 0c00 	orrsne.w	ip, r4, r0
  402b12:	ea55 0c02 	orrsne.w	ip, r5, r2
  402b16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402b1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402b1e:	f000 80e2 	beq.w	402ce6 <__adddf3+0x1ee>
  402b22:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402b26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402b2a:	bfb8      	it	lt
  402b2c:	426d      	neglt	r5, r5
  402b2e:	dd0c      	ble.n	402b4a <__adddf3+0x52>
  402b30:	442c      	add	r4, r5
  402b32:	ea80 0202 	eor.w	r2, r0, r2
  402b36:	ea81 0303 	eor.w	r3, r1, r3
  402b3a:	ea82 0000 	eor.w	r0, r2, r0
  402b3e:	ea83 0101 	eor.w	r1, r3, r1
  402b42:	ea80 0202 	eor.w	r2, r0, r2
  402b46:	ea81 0303 	eor.w	r3, r1, r3
  402b4a:	2d36      	cmp	r5, #54	; 0x36
  402b4c:	bf88      	it	hi
  402b4e:	bd30      	pophi	{r4, r5, pc}
  402b50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402b54:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402b58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402b5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402b60:	d002      	beq.n	402b68 <__adddf3+0x70>
  402b62:	4240      	negs	r0, r0
  402b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402b68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402b6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402b70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402b74:	d002      	beq.n	402b7c <__adddf3+0x84>
  402b76:	4252      	negs	r2, r2
  402b78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402b7c:	ea94 0f05 	teq	r4, r5
  402b80:	f000 80a7 	beq.w	402cd2 <__adddf3+0x1da>
  402b84:	f1a4 0401 	sub.w	r4, r4, #1
  402b88:	f1d5 0e20 	rsbs	lr, r5, #32
  402b8c:	db0d      	blt.n	402baa <__adddf3+0xb2>
  402b8e:	fa02 fc0e 	lsl.w	ip, r2, lr
  402b92:	fa22 f205 	lsr.w	r2, r2, r5
  402b96:	1880      	adds	r0, r0, r2
  402b98:	f141 0100 	adc.w	r1, r1, #0
  402b9c:	fa03 f20e 	lsl.w	r2, r3, lr
  402ba0:	1880      	adds	r0, r0, r2
  402ba2:	fa43 f305 	asr.w	r3, r3, r5
  402ba6:	4159      	adcs	r1, r3
  402ba8:	e00e      	b.n	402bc8 <__adddf3+0xd0>
  402baa:	f1a5 0520 	sub.w	r5, r5, #32
  402bae:	f10e 0e20 	add.w	lr, lr, #32
  402bb2:	2a01      	cmp	r2, #1
  402bb4:	fa03 fc0e 	lsl.w	ip, r3, lr
  402bb8:	bf28      	it	cs
  402bba:	f04c 0c02 	orrcs.w	ip, ip, #2
  402bbe:	fa43 f305 	asr.w	r3, r3, r5
  402bc2:	18c0      	adds	r0, r0, r3
  402bc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402bc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402bcc:	d507      	bpl.n	402bde <__adddf3+0xe6>
  402bce:	f04f 0e00 	mov.w	lr, #0
  402bd2:	f1dc 0c00 	rsbs	ip, ip, #0
  402bd6:	eb7e 0000 	sbcs.w	r0, lr, r0
  402bda:	eb6e 0101 	sbc.w	r1, lr, r1
  402bde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402be2:	d31b      	bcc.n	402c1c <__adddf3+0x124>
  402be4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402be8:	d30c      	bcc.n	402c04 <__adddf3+0x10c>
  402bea:	0849      	lsrs	r1, r1, #1
  402bec:	ea5f 0030 	movs.w	r0, r0, rrx
  402bf0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402bf4:	f104 0401 	add.w	r4, r4, #1
  402bf8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402bfc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402c00:	f080 809a 	bcs.w	402d38 <__adddf3+0x240>
  402c04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402c08:	bf08      	it	eq
  402c0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402c0e:	f150 0000 	adcs.w	r0, r0, #0
  402c12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402c16:	ea41 0105 	orr.w	r1, r1, r5
  402c1a:	bd30      	pop	{r4, r5, pc}
  402c1c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402c20:	4140      	adcs	r0, r0
  402c22:	eb41 0101 	adc.w	r1, r1, r1
  402c26:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402c2a:	f1a4 0401 	sub.w	r4, r4, #1
  402c2e:	d1e9      	bne.n	402c04 <__adddf3+0x10c>
  402c30:	f091 0f00 	teq	r1, #0
  402c34:	bf04      	itt	eq
  402c36:	4601      	moveq	r1, r0
  402c38:	2000      	moveq	r0, #0
  402c3a:	fab1 f381 	clz	r3, r1
  402c3e:	bf08      	it	eq
  402c40:	3320      	addeq	r3, #32
  402c42:	f1a3 030b 	sub.w	r3, r3, #11
  402c46:	f1b3 0220 	subs.w	r2, r3, #32
  402c4a:	da0c      	bge.n	402c66 <__adddf3+0x16e>
  402c4c:	320c      	adds	r2, #12
  402c4e:	dd08      	ble.n	402c62 <__adddf3+0x16a>
  402c50:	f102 0c14 	add.w	ip, r2, #20
  402c54:	f1c2 020c 	rsb	r2, r2, #12
  402c58:	fa01 f00c 	lsl.w	r0, r1, ip
  402c5c:	fa21 f102 	lsr.w	r1, r1, r2
  402c60:	e00c      	b.n	402c7c <__adddf3+0x184>
  402c62:	f102 0214 	add.w	r2, r2, #20
  402c66:	bfd8      	it	le
  402c68:	f1c2 0c20 	rsble	ip, r2, #32
  402c6c:	fa01 f102 	lsl.w	r1, r1, r2
  402c70:	fa20 fc0c 	lsr.w	ip, r0, ip
  402c74:	bfdc      	itt	le
  402c76:	ea41 010c 	orrle.w	r1, r1, ip
  402c7a:	4090      	lslle	r0, r2
  402c7c:	1ae4      	subs	r4, r4, r3
  402c7e:	bfa2      	ittt	ge
  402c80:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402c84:	4329      	orrge	r1, r5
  402c86:	bd30      	popge	{r4, r5, pc}
  402c88:	ea6f 0404 	mvn.w	r4, r4
  402c8c:	3c1f      	subs	r4, #31
  402c8e:	da1c      	bge.n	402cca <__adddf3+0x1d2>
  402c90:	340c      	adds	r4, #12
  402c92:	dc0e      	bgt.n	402cb2 <__adddf3+0x1ba>
  402c94:	f104 0414 	add.w	r4, r4, #20
  402c98:	f1c4 0220 	rsb	r2, r4, #32
  402c9c:	fa20 f004 	lsr.w	r0, r0, r4
  402ca0:	fa01 f302 	lsl.w	r3, r1, r2
  402ca4:	ea40 0003 	orr.w	r0, r0, r3
  402ca8:	fa21 f304 	lsr.w	r3, r1, r4
  402cac:	ea45 0103 	orr.w	r1, r5, r3
  402cb0:	bd30      	pop	{r4, r5, pc}
  402cb2:	f1c4 040c 	rsb	r4, r4, #12
  402cb6:	f1c4 0220 	rsb	r2, r4, #32
  402cba:	fa20 f002 	lsr.w	r0, r0, r2
  402cbe:	fa01 f304 	lsl.w	r3, r1, r4
  402cc2:	ea40 0003 	orr.w	r0, r0, r3
  402cc6:	4629      	mov	r1, r5
  402cc8:	bd30      	pop	{r4, r5, pc}
  402cca:	fa21 f004 	lsr.w	r0, r1, r4
  402cce:	4629      	mov	r1, r5
  402cd0:	bd30      	pop	{r4, r5, pc}
  402cd2:	f094 0f00 	teq	r4, #0
  402cd6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402cda:	bf06      	itte	eq
  402cdc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402ce0:	3401      	addeq	r4, #1
  402ce2:	3d01      	subne	r5, #1
  402ce4:	e74e      	b.n	402b84 <__adddf3+0x8c>
  402ce6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402cea:	bf18      	it	ne
  402cec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402cf0:	d029      	beq.n	402d46 <__adddf3+0x24e>
  402cf2:	ea94 0f05 	teq	r4, r5
  402cf6:	bf08      	it	eq
  402cf8:	ea90 0f02 	teqeq	r0, r2
  402cfc:	d005      	beq.n	402d0a <__adddf3+0x212>
  402cfe:	ea54 0c00 	orrs.w	ip, r4, r0
  402d02:	bf04      	itt	eq
  402d04:	4619      	moveq	r1, r3
  402d06:	4610      	moveq	r0, r2
  402d08:	bd30      	pop	{r4, r5, pc}
  402d0a:	ea91 0f03 	teq	r1, r3
  402d0e:	bf1e      	ittt	ne
  402d10:	2100      	movne	r1, #0
  402d12:	2000      	movne	r0, #0
  402d14:	bd30      	popne	{r4, r5, pc}
  402d16:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402d1a:	d105      	bne.n	402d28 <__adddf3+0x230>
  402d1c:	0040      	lsls	r0, r0, #1
  402d1e:	4149      	adcs	r1, r1
  402d20:	bf28      	it	cs
  402d22:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402d26:	bd30      	pop	{r4, r5, pc}
  402d28:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402d2c:	bf3c      	itt	cc
  402d2e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402d32:	bd30      	popcc	{r4, r5, pc}
  402d34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402d38:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402d3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402d40:	f04f 0000 	mov.w	r0, #0
  402d44:	bd30      	pop	{r4, r5, pc}
  402d46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402d4a:	bf1a      	itte	ne
  402d4c:	4619      	movne	r1, r3
  402d4e:	4610      	movne	r0, r2
  402d50:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402d54:	bf1c      	itt	ne
  402d56:	460b      	movne	r3, r1
  402d58:	4602      	movne	r2, r0
  402d5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402d5e:	bf06      	itte	eq
  402d60:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402d64:	ea91 0f03 	teqeq	r1, r3
  402d68:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402d6c:	bd30      	pop	{r4, r5, pc}
  402d6e:	bf00      	nop

00402d70 <__aeabi_ui2d>:
  402d70:	f090 0f00 	teq	r0, #0
  402d74:	bf04      	itt	eq
  402d76:	2100      	moveq	r1, #0
  402d78:	4770      	bxeq	lr
  402d7a:	b530      	push	{r4, r5, lr}
  402d7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402d80:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402d84:	f04f 0500 	mov.w	r5, #0
  402d88:	f04f 0100 	mov.w	r1, #0
  402d8c:	e750      	b.n	402c30 <__adddf3+0x138>
  402d8e:	bf00      	nop

00402d90 <__aeabi_i2d>:
  402d90:	f090 0f00 	teq	r0, #0
  402d94:	bf04      	itt	eq
  402d96:	2100      	moveq	r1, #0
  402d98:	4770      	bxeq	lr
  402d9a:	b530      	push	{r4, r5, lr}
  402d9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402da0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402da4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402da8:	bf48      	it	mi
  402daa:	4240      	negmi	r0, r0
  402dac:	f04f 0100 	mov.w	r1, #0
  402db0:	e73e      	b.n	402c30 <__adddf3+0x138>
  402db2:	bf00      	nop

00402db4 <__aeabi_f2d>:
  402db4:	0042      	lsls	r2, r0, #1
  402db6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402dba:	ea4f 0131 	mov.w	r1, r1, rrx
  402dbe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402dc2:	bf1f      	itttt	ne
  402dc4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402dc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402dcc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402dd0:	4770      	bxne	lr
  402dd2:	f092 0f00 	teq	r2, #0
  402dd6:	bf14      	ite	ne
  402dd8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402ddc:	4770      	bxeq	lr
  402dde:	b530      	push	{r4, r5, lr}
  402de0:	f44f 7460 	mov.w	r4, #896	; 0x380
  402de4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402de8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402dec:	e720      	b.n	402c30 <__adddf3+0x138>
  402dee:	bf00      	nop

00402df0 <__aeabi_ul2d>:
  402df0:	ea50 0201 	orrs.w	r2, r0, r1
  402df4:	bf08      	it	eq
  402df6:	4770      	bxeq	lr
  402df8:	b530      	push	{r4, r5, lr}
  402dfa:	f04f 0500 	mov.w	r5, #0
  402dfe:	e00a      	b.n	402e16 <__aeabi_l2d+0x16>

00402e00 <__aeabi_l2d>:
  402e00:	ea50 0201 	orrs.w	r2, r0, r1
  402e04:	bf08      	it	eq
  402e06:	4770      	bxeq	lr
  402e08:	b530      	push	{r4, r5, lr}
  402e0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402e0e:	d502      	bpl.n	402e16 <__aeabi_l2d+0x16>
  402e10:	4240      	negs	r0, r0
  402e12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402e16:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402e1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402e1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402e22:	f43f aedc 	beq.w	402bde <__adddf3+0xe6>
  402e26:	f04f 0203 	mov.w	r2, #3
  402e2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402e2e:	bf18      	it	ne
  402e30:	3203      	addne	r2, #3
  402e32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402e36:	bf18      	it	ne
  402e38:	3203      	addne	r2, #3
  402e3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402e3e:	f1c2 0320 	rsb	r3, r2, #32
  402e42:	fa00 fc03 	lsl.w	ip, r0, r3
  402e46:	fa20 f002 	lsr.w	r0, r0, r2
  402e4a:	fa01 fe03 	lsl.w	lr, r1, r3
  402e4e:	ea40 000e 	orr.w	r0, r0, lr
  402e52:	fa21 f102 	lsr.w	r1, r1, r2
  402e56:	4414      	add	r4, r2
  402e58:	e6c1      	b.n	402bde <__adddf3+0xe6>
  402e5a:	bf00      	nop

00402e5c <__aeabi_dmul>:
  402e5c:	b570      	push	{r4, r5, r6, lr}
  402e5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402e62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402e66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402e6a:	bf1d      	ittte	ne
  402e6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402e70:	ea94 0f0c 	teqne	r4, ip
  402e74:	ea95 0f0c 	teqne	r5, ip
  402e78:	f000 f8de 	bleq	403038 <__aeabi_dmul+0x1dc>
  402e7c:	442c      	add	r4, r5
  402e7e:	ea81 0603 	eor.w	r6, r1, r3
  402e82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402e86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402e8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402e8e:	bf18      	it	ne
  402e90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402e94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402e9c:	d038      	beq.n	402f10 <__aeabi_dmul+0xb4>
  402e9e:	fba0 ce02 	umull	ip, lr, r0, r2
  402ea2:	f04f 0500 	mov.w	r5, #0
  402ea6:	fbe1 e502 	umlal	lr, r5, r1, r2
  402eaa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402eae:	fbe0 e503 	umlal	lr, r5, r0, r3
  402eb2:	f04f 0600 	mov.w	r6, #0
  402eb6:	fbe1 5603 	umlal	r5, r6, r1, r3
  402eba:	f09c 0f00 	teq	ip, #0
  402ebe:	bf18      	it	ne
  402ec0:	f04e 0e01 	orrne.w	lr, lr, #1
  402ec4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402ec8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402ecc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402ed0:	d204      	bcs.n	402edc <__aeabi_dmul+0x80>
  402ed2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402ed6:	416d      	adcs	r5, r5
  402ed8:	eb46 0606 	adc.w	r6, r6, r6
  402edc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402ee0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402ee4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402ee8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402eec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402ef0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402ef4:	bf88      	it	hi
  402ef6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402efa:	d81e      	bhi.n	402f3a <__aeabi_dmul+0xde>
  402efc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402f00:	bf08      	it	eq
  402f02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402f06:	f150 0000 	adcs.w	r0, r0, #0
  402f0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402f0e:	bd70      	pop	{r4, r5, r6, pc}
  402f10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402f14:	ea46 0101 	orr.w	r1, r6, r1
  402f18:	ea40 0002 	orr.w	r0, r0, r2
  402f1c:	ea81 0103 	eor.w	r1, r1, r3
  402f20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402f24:	bfc2      	ittt	gt
  402f26:	ebd4 050c 	rsbsgt	r5, r4, ip
  402f2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402f2e:	bd70      	popgt	{r4, r5, r6, pc}
  402f30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402f34:	f04f 0e00 	mov.w	lr, #0
  402f38:	3c01      	subs	r4, #1
  402f3a:	f300 80ab 	bgt.w	403094 <__aeabi_dmul+0x238>
  402f3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402f42:	bfde      	ittt	le
  402f44:	2000      	movle	r0, #0
  402f46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402f4a:	bd70      	pople	{r4, r5, r6, pc}
  402f4c:	f1c4 0400 	rsb	r4, r4, #0
  402f50:	3c20      	subs	r4, #32
  402f52:	da35      	bge.n	402fc0 <__aeabi_dmul+0x164>
  402f54:	340c      	adds	r4, #12
  402f56:	dc1b      	bgt.n	402f90 <__aeabi_dmul+0x134>
  402f58:	f104 0414 	add.w	r4, r4, #20
  402f5c:	f1c4 0520 	rsb	r5, r4, #32
  402f60:	fa00 f305 	lsl.w	r3, r0, r5
  402f64:	fa20 f004 	lsr.w	r0, r0, r4
  402f68:	fa01 f205 	lsl.w	r2, r1, r5
  402f6c:	ea40 0002 	orr.w	r0, r0, r2
  402f70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402f74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402f78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402f7c:	fa21 f604 	lsr.w	r6, r1, r4
  402f80:	eb42 0106 	adc.w	r1, r2, r6
  402f84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402f88:	bf08      	it	eq
  402f8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402f8e:	bd70      	pop	{r4, r5, r6, pc}
  402f90:	f1c4 040c 	rsb	r4, r4, #12
  402f94:	f1c4 0520 	rsb	r5, r4, #32
  402f98:	fa00 f304 	lsl.w	r3, r0, r4
  402f9c:	fa20 f005 	lsr.w	r0, r0, r5
  402fa0:	fa01 f204 	lsl.w	r2, r1, r4
  402fa4:	ea40 0002 	orr.w	r0, r0, r2
  402fa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402fac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402fb0:	f141 0100 	adc.w	r1, r1, #0
  402fb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402fb8:	bf08      	it	eq
  402fba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402fbe:	bd70      	pop	{r4, r5, r6, pc}
  402fc0:	f1c4 0520 	rsb	r5, r4, #32
  402fc4:	fa00 f205 	lsl.w	r2, r0, r5
  402fc8:	ea4e 0e02 	orr.w	lr, lr, r2
  402fcc:	fa20 f304 	lsr.w	r3, r0, r4
  402fd0:	fa01 f205 	lsl.w	r2, r1, r5
  402fd4:	ea43 0302 	orr.w	r3, r3, r2
  402fd8:	fa21 f004 	lsr.w	r0, r1, r4
  402fdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402fe0:	fa21 f204 	lsr.w	r2, r1, r4
  402fe4:	ea20 0002 	bic.w	r0, r0, r2
  402fe8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402fec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402ff0:	bf08      	it	eq
  402ff2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402ff6:	bd70      	pop	{r4, r5, r6, pc}
  402ff8:	f094 0f00 	teq	r4, #0
  402ffc:	d10f      	bne.n	40301e <__aeabi_dmul+0x1c2>
  402ffe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403002:	0040      	lsls	r0, r0, #1
  403004:	eb41 0101 	adc.w	r1, r1, r1
  403008:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40300c:	bf08      	it	eq
  40300e:	3c01      	subeq	r4, #1
  403010:	d0f7      	beq.n	403002 <__aeabi_dmul+0x1a6>
  403012:	ea41 0106 	orr.w	r1, r1, r6
  403016:	f095 0f00 	teq	r5, #0
  40301a:	bf18      	it	ne
  40301c:	4770      	bxne	lr
  40301e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403022:	0052      	lsls	r2, r2, #1
  403024:	eb43 0303 	adc.w	r3, r3, r3
  403028:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40302c:	bf08      	it	eq
  40302e:	3d01      	subeq	r5, #1
  403030:	d0f7      	beq.n	403022 <__aeabi_dmul+0x1c6>
  403032:	ea43 0306 	orr.w	r3, r3, r6
  403036:	4770      	bx	lr
  403038:	ea94 0f0c 	teq	r4, ip
  40303c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403040:	bf18      	it	ne
  403042:	ea95 0f0c 	teqne	r5, ip
  403046:	d00c      	beq.n	403062 <__aeabi_dmul+0x206>
  403048:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40304c:	bf18      	it	ne
  40304e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403052:	d1d1      	bne.n	402ff8 <__aeabi_dmul+0x19c>
  403054:	ea81 0103 	eor.w	r1, r1, r3
  403058:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40305c:	f04f 0000 	mov.w	r0, #0
  403060:	bd70      	pop	{r4, r5, r6, pc}
  403062:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403066:	bf06      	itte	eq
  403068:	4610      	moveq	r0, r2
  40306a:	4619      	moveq	r1, r3
  40306c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403070:	d019      	beq.n	4030a6 <__aeabi_dmul+0x24a>
  403072:	ea94 0f0c 	teq	r4, ip
  403076:	d102      	bne.n	40307e <__aeabi_dmul+0x222>
  403078:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40307c:	d113      	bne.n	4030a6 <__aeabi_dmul+0x24a>
  40307e:	ea95 0f0c 	teq	r5, ip
  403082:	d105      	bne.n	403090 <__aeabi_dmul+0x234>
  403084:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403088:	bf1c      	itt	ne
  40308a:	4610      	movne	r0, r2
  40308c:	4619      	movne	r1, r3
  40308e:	d10a      	bne.n	4030a6 <__aeabi_dmul+0x24a>
  403090:	ea81 0103 	eor.w	r1, r1, r3
  403094:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403098:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40309c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4030a0:	f04f 0000 	mov.w	r0, #0
  4030a4:	bd70      	pop	{r4, r5, r6, pc}
  4030a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4030aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4030ae:	bd70      	pop	{r4, r5, r6, pc}

004030b0 <__aeabi_ddiv>:
  4030b0:	b570      	push	{r4, r5, r6, lr}
  4030b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4030b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4030ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4030be:	bf1d      	ittte	ne
  4030c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4030c4:	ea94 0f0c 	teqne	r4, ip
  4030c8:	ea95 0f0c 	teqne	r5, ip
  4030cc:	f000 f8a7 	bleq	40321e <__aeabi_ddiv+0x16e>
  4030d0:	eba4 0405 	sub.w	r4, r4, r5
  4030d4:	ea81 0e03 	eor.w	lr, r1, r3
  4030d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4030dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4030e0:	f000 8088 	beq.w	4031f4 <__aeabi_ddiv+0x144>
  4030e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4030e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4030ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4030f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4030f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4030f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4030fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403100:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403104:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403108:	429d      	cmp	r5, r3
  40310a:	bf08      	it	eq
  40310c:	4296      	cmpeq	r6, r2
  40310e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403112:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403116:	d202      	bcs.n	40311e <__aeabi_ddiv+0x6e>
  403118:	085b      	lsrs	r3, r3, #1
  40311a:	ea4f 0232 	mov.w	r2, r2, rrx
  40311e:	1ab6      	subs	r6, r6, r2
  403120:	eb65 0503 	sbc.w	r5, r5, r3
  403124:	085b      	lsrs	r3, r3, #1
  403126:	ea4f 0232 	mov.w	r2, r2, rrx
  40312a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40312e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403132:	ebb6 0e02 	subs.w	lr, r6, r2
  403136:	eb75 0e03 	sbcs.w	lr, r5, r3
  40313a:	bf22      	ittt	cs
  40313c:	1ab6      	subcs	r6, r6, r2
  40313e:	4675      	movcs	r5, lr
  403140:	ea40 000c 	orrcs.w	r0, r0, ip
  403144:	085b      	lsrs	r3, r3, #1
  403146:	ea4f 0232 	mov.w	r2, r2, rrx
  40314a:	ebb6 0e02 	subs.w	lr, r6, r2
  40314e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403152:	bf22      	ittt	cs
  403154:	1ab6      	subcs	r6, r6, r2
  403156:	4675      	movcs	r5, lr
  403158:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40315c:	085b      	lsrs	r3, r3, #1
  40315e:	ea4f 0232 	mov.w	r2, r2, rrx
  403162:	ebb6 0e02 	subs.w	lr, r6, r2
  403166:	eb75 0e03 	sbcs.w	lr, r5, r3
  40316a:	bf22      	ittt	cs
  40316c:	1ab6      	subcs	r6, r6, r2
  40316e:	4675      	movcs	r5, lr
  403170:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403174:	085b      	lsrs	r3, r3, #1
  403176:	ea4f 0232 	mov.w	r2, r2, rrx
  40317a:	ebb6 0e02 	subs.w	lr, r6, r2
  40317e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403182:	bf22      	ittt	cs
  403184:	1ab6      	subcs	r6, r6, r2
  403186:	4675      	movcs	r5, lr
  403188:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40318c:	ea55 0e06 	orrs.w	lr, r5, r6
  403190:	d018      	beq.n	4031c4 <__aeabi_ddiv+0x114>
  403192:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403196:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40319a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40319e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4031a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4031a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4031aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4031ae:	d1c0      	bne.n	403132 <__aeabi_ddiv+0x82>
  4031b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4031b4:	d10b      	bne.n	4031ce <__aeabi_ddiv+0x11e>
  4031b6:	ea41 0100 	orr.w	r1, r1, r0
  4031ba:	f04f 0000 	mov.w	r0, #0
  4031be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4031c2:	e7b6      	b.n	403132 <__aeabi_ddiv+0x82>
  4031c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4031c8:	bf04      	itt	eq
  4031ca:	4301      	orreq	r1, r0
  4031cc:	2000      	moveq	r0, #0
  4031ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4031d2:	bf88      	it	hi
  4031d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4031d8:	f63f aeaf 	bhi.w	402f3a <__aeabi_dmul+0xde>
  4031dc:	ebb5 0c03 	subs.w	ip, r5, r3
  4031e0:	bf04      	itt	eq
  4031e2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4031e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4031ea:	f150 0000 	adcs.w	r0, r0, #0
  4031ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4031f2:	bd70      	pop	{r4, r5, r6, pc}
  4031f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4031f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4031fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403200:	bfc2      	ittt	gt
  403202:	ebd4 050c 	rsbsgt	r5, r4, ip
  403206:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40320a:	bd70      	popgt	{r4, r5, r6, pc}
  40320c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403210:	f04f 0e00 	mov.w	lr, #0
  403214:	3c01      	subs	r4, #1
  403216:	e690      	b.n	402f3a <__aeabi_dmul+0xde>
  403218:	ea45 0e06 	orr.w	lr, r5, r6
  40321c:	e68d      	b.n	402f3a <__aeabi_dmul+0xde>
  40321e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403222:	ea94 0f0c 	teq	r4, ip
  403226:	bf08      	it	eq
  403228:	ea95 0f0c 	teqeq	r5, ip
  40322c:	f43f af3b 	beq.w	4030a6 <__aeabi_dmul+0x24a>
  403230:	ea94 0f0c 	teq	r4, ip
  403234:	d10a      	bne.n	40324c <__aeabi_ddiv+0x19c>
  403236:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40323a:	f47f af34 	bne.w	4030a6 <__aeabi_dmul+0x24a>
  40323e:	ea95 0f0c 	teq	r5, ip
  403242:	f47f af25 	bne.w	403090 <__aeabi_dmul+0x234>
  403246:	4610      	mov	r0, r2
  403248:	4619      	mov	r1, r3
  40324a:	e72c      	b.n	4030a6 <__aeabi_dmul+0x24a>
  40324c:	ea95 0f0c 	teq	r5, ip
  403250:	d106      	bne.n	403260 <__aeabi_ddiv+0x1b0>
  403252:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403256:	f43f aefd 	beq.w	403054 <__aeabi_dmul+0x1f8>
  40325a:	4610      	mov	r0, r2
  40325c:	4619      	mov	r1, r3
  40325e:	e722      	b.n	4030a6 <__aeabi_dmul+0x24a>
  403260:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403264:	bf18      	it	ne
  403266:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40326a:	f47f aec5 	bne.w	402ff8 <__aeabi_dmul+0x19c>
  40326e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403272:	f47f af0d 	bne.w	403090 <__aeabi_dmul+0x234>
  403276:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40327a:	f47f aeeb 	bne.w	403054 <__aeabi_dmul+0x1f8>
  40327e:	e712      	b.n	4030a6 <__aeabi_dmul+0x24a>

00403280 <__gedf2>:
  403280:	f04f 3cff 	mov.w	ip, #4294967295
  403284:	e006      	b.n	403294 <__cmpdf2+0x4>
  403286:	bf00      	nop

00403288 <__ledf2>:
  403288:	f04f 0c01 	mov.w	ip, #1
  40328c:	e002      	b.n	403294 <__cmpdf2+0x4>
  40328e:	bf00      	nop

00403290 <__cmpdf2>:
  403290:	f04f 0c01 	mov.w	ip, #1
  403294:	f84d cd04 	str.w	ip, [sp, #-4]!
  403298:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40329c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4032a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4032a4:	bf18      	it	ne
  4032a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4032aa:	d01b      	beq.n	4032e4 <__cmpdf2+0x54>
  4032ac:	b001      	add	sp, #4
  4032ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4032b2:	bf0c      	ite	eq
  4032b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4032b8:	ea91 0f03 	teqne	r1, r3
  4032bc:	bf02      	ittt	eq
  4032be:	ea90 0f02 	teqeq	r0, r2
  4032c2:	2000      	moveq	r0, #0
  4032c4:	4770      	bxeq	lr
  4032c6:	f110 0f00 	cmn.w	r0, #0
  4032ca:	ea91 0f03 	teq	r1, r3
  4032ce:	bf58      	it	pl
  4032d0:	4299      	cmppl	r1, r3
  4032d2:	bf08      	it	eq
  4032d4:	4290      	cmpeq	r0, r2
  4032d6:	bf2c      	ite	cs
  4032d8:	17d8      	asrcs	r0, r3, #31
  4032da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4032de:	f040 0001 	orr.w	r0, r0, #1
  4032e2:	4770      	bx	lr
  4032e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4032e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4032ec:	d102      	bne.n	4032f4 <__cmpdf2+0x64>
  4032ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4032f2:	d107      	bne.n	403304 <__cmpdf2+0x74>
  4032f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4032f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4032fc:	d1d6      	bne.n	4032ac <__cmpdf2+0x1c>
  4032fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403302:	d0d3      	beq.n	4032ac <__cmpdf2+0x1c>
  403304:	f85d 0b04 	ldr.w	r0, [sp], #4
  403308:	4770      	bx	lr
  40330a:	bf00      	nop

0040330c <__aeabi_cdrcmple>:
  40330c:	4684      	mov	ip, r0
  40330e:	4610      	mov	r0, r2
  403310:	4662      	mov	r2, ip
  403312:	468c      	mov	ip, r1
  403314:	4619      	mov	r1, r3
  403316:	4663      	mov	r3, ip
  403318:	e000      	b.n	40331c <__aeabi_cdcmpeq>
  40331a:	bf00      	nop

0040331c <__aeabi_cdcmpeq>:
  40331c:	b501      	push	{r0, lr}
  40331e:	f7ff ffb7 	bl	403290 <__cmpdf2>
  403322:	2800      	cmp	r0, #0
  403324:	bf48      	it	mi
  403326:	f110 0f00 	cmnmi.w	r0, #0
  40332a:	bd01      	pop	{r0, pc}

0040332c <__aeabi_dcmpeq>:
  40332c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403330:	f7ff fff4 	bl	40331c <__aeabi_cdcmpeq>
  403334:	bf0c      	ite	eq
  403336:	2001      	moveq	r0, #1
  403338:	2000      	movne	r0, #0
  40333a:	f85d fb08 	ldr.w	pc, [sp], #8
  40333e:	bf00      	nop

00403340 <__aeabi_dcmplt>:
  403340:	f84d ed08 	str.w	lr, [sp, #-8]!
  403344:	f7ff ffea 	bl	40331c <__aeabi_cdcmpeq>
  403348:	bf34      	ite	cc
  40334a:	2001      	movcc	r0, #1
  40334c:	2000      	movcs	r0, #0
  40334e:	f85d fb08 	ldr.w	pc, [sp], #8
  403352:	bf00      	nop

00403354 <__aeabi_dcmple>:
  403354:	f84d ed08 	str.w	lr, [sp, #-8]!
  403358:	f7ff ffe0 	bl	40331c <__aeabi_cdcmpeq>
  40335c:	bf94      	ite	ls
  40335e:	2001      	movls	r0, #1
  403360:	2000      	movhi	r0, #0
  403362:	f85d fb08 	ldr.w	pc, [sp], #8
  403366:	bf00      	nop

00403368 <__aeabi_dcmpge>:
  403368:	f84d ed08 	str.w	lr, [sp, #-8]!
  40336c:	f7ff ffce 	bl	40330c <__aeabi_cdrcmple>
  403370:	bf94      	ite	ls
  403372:	2001      	movls	r0, #1
  403374:	2000      	movhi	r0, #0
  403376:	f85d fb08 	ldr.w	pc, [sp], #8
  40337a:	bf00      	nop

0040337c <__aeabi_dcmpgt>:
  40337c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403380:	f7ff ffc4 	bl	40330c <__aeabi_cdrcmple>
  403384:	bf34      	ite	cc
  403386:	2001      	movcc	r0, #1
  403388:	2000      	movcs	r0, #0
  40338a:	f85d fb08 	ldr.w	pc, [sp], #8
  40338e:	bf00      	nop

00403390 <__aeabi_dcmpun>:
  403390:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403394:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403398:	d102      	bne.n	4033a0 <__aeabi_dcmpun+0x10>
  40339a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40339e:	d10a      	bne.n	4033b6 <__aeabi_dcmpun+0x26>
  4033a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4033a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4033a8:	d102      	bne.n	4033b0 <__aeabi_dcmpun+0x20>
  4033aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4033ae:	d102      	bne.n	4033b6 <__aeabi_dcmpun+0x26>
  4033b0:	f04f 0000 	mov.w	r0, #0
  4033b4:	4770      	bx	lr
  4033b6:	f04f 0001 	mov.w	r0, #1
  4033ba:	4770      	bx	lr

004033bc <__aeabi_d2iz>:
  4033bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4033c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4033c4:	d215      	bcs.n	4033f2 <__aeabi_d2iz+0x36>
  4033c6:	d511      	bpl.n	4033ec <__aeabi_d2iz+0x30>
  4033c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4033cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4033d0:	d912      	bls.n	4033f8 <__aeabi_d2iz+0x3c>
  4033d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4033d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4033da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4033de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4033e2:	fa23 f002 	lsr.w	r0, r3, r2
  4033e6:	bf18      	it	ne
  4033e8:	4240      	negne	r0, r0
  4033ea:	4770      	bx	lr
  4033ec:	f04f 0000 	mov.w	r0, #0
  4033f0:	4770      	bx	lr
  4033f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4033f6:	d105      	bne.n	403404 <__aeabi_d2iz+0x48>
  4033f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4033fc:	bf08      	it	eq
  4033fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  403402:	4770      	bx	lr
  403404:	f04f 0000 	mov.w	r0, #0
  403408:	4770      	bx	lr
  40340a:	bf00      	nop

0040340c <__libc_init_array>:
  40340c:	b570      	push	{r4, r5, r6, lr}
  40340e:	4e0d      	ldr	r6, [pc, #52]	; (403444 <__libc_init_array+0x38>)
  403410:	4c0d      	ldr	r4, [pc, #52]	; (403448 <__libc_init_array+0x3c>)
  403412:	1ba4      	subs	r4, r4, r6
  403414:	10a4      	asrs	r4, r4, #2
  403416:	2500      	movs	r5, #0
  403418:	42a5      	cmp	r5, r4
  40341a:	d109      	bne.n	403430 <__libc_init_array+0x24>
  40341c:	4e0b      	ldr	r6, [pc, #44]	; (40344c <__libc_init_array+0x40>)
  40341e:	4c0c      	ldr	r4, [pc, #48]	; (403450 <__libc_init_array+0x44>)
  403420:	f003 f91e 	bl	406660 <_init>
  403424:	1ba4      	subs	r4, r4, r6
  403426:	10a4      	asrs	r4, r4, #2
  403428:	2500      	movs	r5, #0
  40342a:	42a5      	cmp	r5, r4
  40342c:	d105      	bne.n	40343a <__libc_init_array+0x2e>
  40342e:	bd70      	pop	{r4, r5, r6, pc}
  403430:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  403434:	4798      	blx	r3
  403436:	3501      	adds	r5, #1
  403438:	e7ee      	b.n	403418 <__libc_init_array+0xc>
  40343a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40343e:	4798      	blx	r3
  403440:	3501      	adds	r5, #1
  403442:	e7f2      	b.n	40342a <__libc_init_array+0x1e>
  403444:	0040666c 	.word	0x0040666c
  403448:	0040666c 	.word	0x0040666c
  40344c:	0040666c 	.word	0x0040666c
  403450:	00406670 	.word	0x00406670

00403454 <memcpy>:
  403454:	b510      	push	{r4, lr}
  403456:	1e43      	subs	r3, r0, #1
  403458:	440a      	add	r2, r1
  40345a:	4291      	cmp	r1, r2
  40345c:	d100      	bne.n	403460 <memcpy+0xc>
  40345e:	bd10      	pop	{r4, pc}
  403460:	f811 4b01 	ldrb.w	r4, [r1], #1
  403464:	f803 4f01 	strb.w	r4, [r3, #1]!
  403468:	e7f7      	b.n	40345a <memcpy+0x6>

0040346a <memset>:
  40346a:	4402      	add	r2, r0
  40346c:	4603      	mov	r3, r0
  40346e:	4293      	cmp	r3, r2
  403470:	d100      	bne.n	403474 <memset+0xa>
  403472:	4770      	bx	lr
  403474:	f803 1b01 	strb.w	r1, [r3], #1
  403478:	e7f9      	b.n	40346e <memset+0x4>

0040347a <__cvt>:
  40347a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40347e:	b088      	sub	sp, #32
  403480:	2b00      	cmp	r3, #0
  403482:	9f14      	ldr	r7, [sp, #80]	; 0x50
  403484:	9912      	ldr	r1, [sp, #72]	; 0x48
  403486:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403488:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  40348c:	461e      	mov	r6, r3
  40348e:	f027 0720 	bic.w	r7, r7, #32
  403492:	bfbb      	ittet	lt
  403494:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  403498:	461e      	movlt	r6, r3
  40349a:	2300      	movge	r3, #0
  40349c:	232d      	movlt	r3, #45	; 0x2d
  40349e:	2f46      	cmp	r7, #70	; 0x46
  4034a0:	4614      	mov	r4, r2
  4034a2:	700b      	strb	r3, [r1, #0]
  4034a4:	d004      	beq.n	4034b0 <__cvt+0x36>
  4034a6:	2f45      	cmp	r7, #69	; 0x45
  4034a8:	d100      	bne.n	4034ac <__cvt+0x32>
  4034aa:	3501      	adds	r5, #1
  4034ac:	2302      	movs	r3, #2
  4034ae:	e000      	b.n	4034b2 <__cvt+0x38>
  4034b0:	2303      	movs	r3, #3
  4034b2:	aa07      	add	r2, sp, #28
  4034b4:	9204      	str	r2, [sp, #16]
  4034b6:	aa06      	add	r2, sp, #24
  4034b8:	9203      	str	r2, [sp, #12]
  4034ba:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  4034be:	4622      	mov	r2, r4
  4034c0:	4633      	mov	r3, r6
  4034c2:	f000 fd9d 	bl	404000 <_dtoa_r>
  4034c6:	2f47      	cmp	r7, #71	; 0x47
  4034c8:	4680      	mov	r8, r0
  4034ca:	d102      	bne.n	4034d2 <__cvt+0x58>
  4034cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4034ce:	07db      	lsls	r3, r3, #31
  4034d0:	d526      	bpl.n	403520 <__cvt+0xa6>
  4034d2:	2f46      	cmp	r7, #70	; 0x46
  4034d4:	eb08 0905 	add.w	r9, r8, r5
  4034d8:	d111      	bne.n	4034fe <__cvt+0x84>
  4034da:	f898 3000 	ldrb.w	r3, [r8]
  4034de:	2b30      	cmp	r3, #48	; 0x30
  4034e0:	d10a      	bne.n	4034f8 <__cvt+0x7e>
  4034e2:	2200      	movs	r2, #0
  4034e4:	2300      	movs	r3, #0
  4034e6:	4620      	mov	r0, r4
  4034e8:	4631      	mov	r1, r6
  4034ea:	f7ff ff1f 	bl	40332c <__aeabi_dcmpeq>
  4034ee:	b918      	cbnz	r0, 4034f8 <__cvt+0x7e>
  4034f0:	f1c5 0501 	rsb	r5, r5, #1
  4034f4:	f8ca 5000 	str.w	r5, [sl]
  4034f8:	f8da 3000 	ldr.w	r3, [sl]
  4034fc:	4499      	add	r9, r3
  4034fe:	2200      	movs	r2, #0
  403500:	2300      	movs	r3, #0
  403502:	4620      	mov	r0, r4
  403504:	4631      	mov	r1, r6
  403506:	f7ff ff11 	bl	40332c <__aeabi_dcmpeq>
  40350a:	b938      	cbnz	r0, 40351c <__cvt+0xa2>
  40350c:	2230      	movs	r2, #48	; 0x30
  40350e:	9b07      	ldr	r3, [sp, #28]
  403510:	4599      	cmp	r9, r3
  403512:	d905      	bls.n	403520 <__cvt+0xa6>
  403514:	1c59      	adds	r1, r3, #1
  403516:	9107      	str	r1, [sp, #28]
  403518:	701a      	strb	r2, [r3, #0]
  40351a:	e7f8      	b.n	40350e <__cvt+0x94>
  40351c:	f8cd 901c 	str.w	r9, [sp, #28]
  403520:	9b07      	ldr	r3, [sp, #28]
  403522:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403524:	eba3 0308 	sub.w	r3, r3, r8
  403528:	4640      	mov	r0, r8
  40352a:	6013      	str	r3, [r2, #0]
  40352c:	b008      	add	sp, #32
  40352e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403532 <__exponent>:
  403532:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  403534:	4603      	mov	r3, r0
  403536:	2900      	cmp	r1, #0
  403538:	bfb8      	it	lt
  40353a:	4249      	neglt	r1, r1
  40353c:	f803 2b02 	strb.w	r2, [r3], #2
  403540:	bfb4      	ite	lt
  403542:	222d      	movlt	r2, #45	; 0x2d
  403544:	222b      	movge	r2, #43	; 0x2b
  403546:	2909      	cmp	r1, #9
  403548:	7042      	strb	r2, [r0, #1]
  40354a:	dd20      	ble.n	40358e <__exponent+0x5c>
  40354c:	f10d 0207 	add.w	r2, sp, #7
  403550:	4617      	mov	r7, r2
  403552:	260a      	movs	r6, #10
  403554:	fb91 f5f6 	sdiv	r5, r1, r6
  403558:	fb06 1115 	mls	r1, r6, r5, r1
  40355c:	3130      	adds	r1, #48	; 0x30
  40355e:	2d09      	cmp	r5, #9
  403560:	f802 1c01 	strb.w	r1, [r2, #-1]
  403564:	f102 34ff 	add.w	r4, r2, #4294967295
  403568:	4629      	mov	r1, r5
  40356a:	dc09      	bgt.n	403580 <__exponent+0x4e>
  40356c:	3130      	adds	r1, #48	; 0x30
  40356e:	3a02      	subs	r2, #2
  403570:	f804 1c01 	strb.w	r1, [r4, #-1]
  403574:	42ba      	cmp	r2, r7
  403576:	461c      	mov	r4, r3
  403578:	d304      	bcc.n	403584 <__exponent+0x52>
  40357a:	1a20      	subs	r0, r4, r0
  40357c:	b003      	add	sp, #12
  40357e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403580:	4622      	mov	r2, r4
  403582:	e7e7      	b.n	403554 <__exponent+0x22>
  403584:	f812 1b01 	ldrb.w	r1, [r2], #1
  403588:	f803 1b01 	strb.w	r1, [r3], #1
  40358c:	e7f2      	b.n	403574 <__exponent+0x42>
  40358e:	2230      	movs	r2, #48	; 0x30
  403590:	461c      	mov	r4, r3
  403592:	4411      	add	r1, r2
  403594:	f804 2b02 	strb.w	r2, [r4], #2
  403598:	7059      	strb	r1, [r3, #1]
  40359a:	e7ee      	b.n	40357a <__exponent+0x48>

0040359c <_printf_float>:
  40359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035a0:	b091      	sub	sp, #68	; 0x44
  4035a2:	460c      	mov	r4, r1
  4035a4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  4035a6:	4693      	mov	fp, r2
  4035a8:	461e      	mov	r6, r3
  4035aa:	4605      	mov	r5, r0
  4035ac:	f001 fc76 	bl	404e9c <_localeconv_r>
  4035b0:	6803      	ldr	r3, [r0, #0]
  4035b2:	9309      	str	r3, [sp, #36]	; 0x24
  4035b4:	4618      	mov	r0, r3
  4035b6:	f000 fc8d 	bl	403ed4 <strlen>
  4035ba:	2300      	movs	r3, #0
  4035bc:	930e      	str	r3, [sp, #56]	; 0x38
  4035be:	683b      	ldr	r3, [r7, #0]
  4035c0:	900a      	str	r0, [sp, #40]	; 0x28
  4035c2:	3307      	adds	r3, #7
  4035c4:	f023 0307 	bic.w	r3, r3, #7
  4035c8:	f103 0208 	add.w	r2, r3, #8
  4035cc:	f894 8018 	ldrb.w	r8, [r4, #24]
  4035d0:	f8d4 a000 	ldr.w	sl, [r4]
  4035d4:	603a      	str	r2, [r7, #0]
  4035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4035da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  4035de:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  4035e2:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  4035e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4035e8:	930b      	str	r3, [sp, #44]	; 0x2c
  4035ea:	f04f 32ff 	mov.w	r2, #4294967295
  4035ee:	4ba6      	ldr	r3, [pc, #664]	; (403888 <_printf_float+0x2ec>)
  4035f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4035f2:	4638      	mov	r0, r7
  4035f4:	f7ff fecc 	bl	403390 <__aeabi_dcmpun>
  4035f8:	2800      	cmp	r0, #0
  4035fa:	f040 81f7 	bne.w	4039ec <_printf_float+0x450>
  4035fe:	f04f 32ff 	mov.w	r2, #4294967295
  403602:	4ba1      	ldr	r3, [pc, #644]	; (403888 <_printf_float+0x2ec>)
  403604:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403606:	4638      	mov	r0, r7
  403608:	f7ff fea4 	bl	403354 <__aeabi_dcmple>
  40360c:	2800      	cmp	r0, #0
  40360e:	f040 81ed 	bne.w	4039ec <_printf_float+0x450>
  403612:	2200      	movs	r2, #0
  403614:	2300      	movs	r3, #0
  403616:	4638      	mov	r0, r7
  403618:	4649      	mov	r1, r9
  40361a:	f7ff fe91 	bl	403340 <__aeabi_dcmplt>
  40361e:	b110      	cbz	r0, 403626 <_printf_float+0x8a>
  403620:	232d      	movs	r3, #45	; 0x2d
  403622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403626:	4b99      	ldr	r3, [pc, #612]	; (40388c <_printf_float+0x2f0>)
  403628:	4f99      	ldr	r7, [pc, #612]	; (403890 <_printf_float+0x2f4>)
  40362a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40362e:	bf98      	it	ls
  403630:	461f      	movls	r7, r3
  403632:	2303      	movs	r3, #3
  403634:	6123      	str	r3, [r4, #16]
  403636:	f02a 0304 	bic.w	r3, sl, #4
  40363a:	6023      	str	r3, [r4, #0]
  40363c:	f04f 0900 	mov.w	r9, #0
  403640:	9600      	str	r6, [sp, #0]
  403642:	465b      	mov	r3, fp
  403644:	aa0f      	add	r2, sp, #60	; 0x3c
  403646:	4621      	mov	r1, r4
  403648:	4628      	mov	r0, r5
  40364a:	f000 f9df 	bl	403a0c <_printf_common>
  40364e:	3001      	adds	r0, #1
  403650:	f040 809a 	bne.w	403788 <_printf_float+0x1ec>
  403654:	f04f 30ff 	mov.w	r0, #4294967295
  403658:	b011      	add	sp, #68	; 0x44
  40365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40365e:	6862      	ldr	r2, [r4, #4]
  403660:	1c53      	adds	r3, r2, #1
  403662:	a80e      	add	r0, sp, #56	; 0x38
  403664:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  403668:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  40366c:	d141      	bne.n	4036f2 <_printf_float+0x156>
  40366e:	2206      	movs	r2, #6
  403670:	6062      	str	r2, [r4, #4]
  403672:	6023      	str	r3, [r4, #0]
  403674:	2100      	movs	r1, #0
  403676:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  40367a:	9301      	str	r3, [sp, #4]
  40367c:	6863      	ldr	r3, [r4, #4]
  40367e:	9005      	str	r0, [sp, #20]
  403680:	9202      	str	r2, [sp, #8]
  403682:	9300      	str	r3, [sp, #0]
  403684:	463a      	mov	r2, r7
  403686:	464b      	mov	r3, r9
  403688:	9106      	str	r1, [sp, #24]
  40368a:	f8cd 8010 	str.w	r8, [sp, #16]
  40368e:	f8cd e00c 	str.w	lr, [sp, #12]
  403692:	4628      	mov	r0, r5
  403694:	f7ff fef1 	bl	40347a <__cvt>
  403698:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  40369c:	2b47      	cmp	r3, #71	; 0x47
  40369e:	4607      	mov	r7, r0
  4036a0:	d109      	bne.n	4036b6 <_printf_float+0x11a>
  4036a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4036a4:	1cd8      	adds	r0, r3, #3
  4036a6:	db02      	blt.n	4036ae <_printf_float+0x112>
  4036a8:	6862      	ldr	r2, [r4, #4]
  4036aa:	4293      	cmp	r3, r2
  4036ac:	dd59      	ble.n	403762 <_printf_float+0x1c6>
  4036ae:	f1a8 0802 	sub.w	r8, r8, #2
  4036b2:	fa5f f888 	uxtb.w	r8, r8
  4036b6:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4036ba:	990d      	ldr	r1, [sp, #52]	; 0x34
  4036bc:	d836      	bhi.n	40372c <_printf_float+0x190>
  4036be:	3901      	subs	r1, #1
  4036c0:	4642      	mov	r2, r8
  4036c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
  4036c6:	910d      	str	r1, [sp, #52]	; 0x34
  4036c8:	f7ff ff33 	bl	403532 <__exponent>
  4036cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4036ce:	1883      	adds	r3, r0, r2
  4036d0:	2a01      	cmp	r2, #1
  4036d2:	4681      	mov	r9, r0
  4036d4:	6123      	str	r3, [r4, #16]
  4036d6:	dc02      	bgt.n	4036de <_printf_float+0x142>
  4036d8:	6822      	ldr	r2, [r4, #0]
  4036da:	07d1      	lsls	r1, r2, #31
  4036dc:	d501      	bpl.n	4036e2 <_printf_float+0x146>
  4036de:	3301      	adds	r3, #1
  4036e0:	6123      	str	r3, [r4, #16]
  4036e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  4036e6:	2b00      	cmp	r3, #0
  4036e8:	d0aa      	beq.n	403640 <_printf_float+0xa4>
  4036ea:	232d      	movs	r3, #45	; 0x2d
  4036ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4036f0:	e7a6      	b.n	403640 <_printf_float+0xa4>
  4036f2:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  4036f6:	d002      	beq.n	4036fe <_printf_float+0x162>
  4036f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4036fc:	d1b9      	bne.n	403672 <_printf_float+0xd6>
  4036fe:	b19a      	cbz	r2, 403728 <_printf_float+0x18c>
  403700:	2100      	movs	r1, #0
  403702:	9106      	str	r1, [sp, #24]
  403704:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  403708:	e88d 000c 	stmia.w	sp, {r2, r3}
  40370c:	6023      	str	r3, [r4, #0]
  40370e:	9005      	str	r0, [sp, #20]
  403710:	463a      	mov	r2, r7
  403712:	f8cd 8010 	str.w	r8, [sp, #16]
  403716:	f8cd e00c 	str.w	lr, [sp, #12]
  40371a:	9102      	str	r1, [sp, #8]
  40371c:	464b      	mov	r3, r9
  40371e:	4628      	mov	r0, r5
  403720:	f7ff feab 	bl	40347a <__cvt>
  403724:	4607      	mov	r7, r0
  403726:	e7bc      	b.n	4036a2 <_printf_float+0x106>
  403728:	2201      	movs	r2, #1
  40372a:	e7a1      	b.n	403670 <_printf_float+0xd4>
  40372c:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  403730:	d119      	bne.n	403766 <_printf_float+0x1ca>
  403732:	2900      	cmp	r1, #0
  403734:	6863      	ldr	r3, [r4, #4]
  403736:	dd0c      	ble.n	403752 <_printf_float+0x1b6>
  403738:	6121      	str	r1, [r4, #16]
  40373a:	b913      	cbnz	r3, 403742 <_printf_float+0x1a6>
  40373c:	6822      	ldr	r2, [r4, #0]
  40373e:	07d2      	lsls	r2, r2, #31
  403740:	d502      	bpl.n	403748 <_printf_float+0x1ac>
  403742:	3301      	adds	r3, #1
  403744:	440b      	add	r3, r1
  403746:	6123      	str	r3, [r4, #16]
  403748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40374a:	65a3      	str	r3, [r4, #88]	; 0x58
  40374c:	f04f 0900 	mov.w	r9, #0
  403750:	e7c7      	b.n	4036e2 <_printf_float+0x146>
  403752:	b913      	cbnz	r3, 40375a <_printf_float+0x1be>
  403754:	6822      	ldr	r2, [r4, #0]
  403756:	07d0      	lsls	r0, r2, #31
  403758:	d501      	bpl.n	40375e <_printf_float+0x1c2>
  40375a:	3302      	adds	r3, #2
  40375c:	e7f3      	b.n	403746 <_printf_float+0x1aa>
  40375e:	2301      	movs	r3, #1
  403760:	e7f1      	b.n	403746 <_printf_float+0x1aa>
  403762:	f04f 0867 	mov.w	r8, #103	; 0x67
  403766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40376a:	4293      	cmp	r3, r2
  40376c:	db05      	blt.n	40377a <_printf_float+0x1de>
  40376e:	6822      	ldr	r2, [r4, #0]
  403770:	6123      	str	r3, [r4, #16]
  403772:	07d1      	lsls	r1, r2, #31
  403774:	d5e8      	bpl.n	403748 <_printf_float+0x1ac>
  403776:	3301      	adds	r3, #1
  403778:	e7e5      	b.n	403746 <_printf_float+0x1aa>
  40377a:	2b00      	cmp	r3, #0
  40377c:	bfd4      	ite	le
  40377e:	f1c3 0302 	rsble	r3, r3, #2
  403782:	2301      	movgt	r3, #1
  403784:	4413      	add	r3, r2
  403786:	e7de      	b.n	403746 <_printf_float+0x1aa>
  403788:	6823      	ldr	r3, [r4, #0]
  40378a:	055a      	lsls	r2, r3, #21
  40378c:	d407      	bmi.n	40379e <_printf_float+0x202>
  40378e:	6923      	ldr	r3, [r4, #16]
  403790:	463a      	mov	r2, r7
  403792:	4659      	mov	r1, fp
  403794:	4628      	mov	r0, r5
  403796:	47b0      	blx	r6
  403798:	3001      	adds	r0, #1
  40379a:	d12a      	bne.n	4037f2 <_printf_float+0x256>
  40379c:	e75a      	b.n	403654 <_printf_float+0xb8>
  40379e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4037a2:	f240 80dc 	bls.w	40395e <_printf_float+0x3c2>
  4037a6:	2200      	movs	r2, #0
  4037a8:	2300      	movs	r3, #0
  4037aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4037ae:	f7ff fdbd 	bl	40332c <__aeabi_dcmpeq>
  4037b2:	2800      	cmp	r0, #0
  4037b4:	d039      	beq.n	40382a <_printf_float+0x28e>
  4037b6:	2301      	movs	r3, #1
  4037b8:	4a36      	ldr	r2, [pc, #216]	; (403894 <_printf_float+0x2f8>)
  4037ba:	4659      	mov	r1, fp
  4037bc:	4628      	mov	r0, r5
  4037be:	47b0      	blx	r6
  4037c0:	3001      	adds	r0, #1
  4037c2:	f43f af47 	beq.w	403654 <_printf_float+0xb8>
  4037c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4037c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4037ca:	429a      	cmp	r2, r3
  4037cc:	db02      	blt.n	4037d4 <_printf_float+0x238>
  4037ce:	6823      	ldr	r3, [r4, #0]
  4037d0:	07d8      	lsls	r0, r3, #31
  4037d2:	d50e      	bpl.n	4037f2 <_printf_float+0x256>
  4037d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4037d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4037d8:	4659      	mov	r1, fp
  4037da:	4628      	mov	r0, r5
  4037dc:	47b0      	blx	r6
  4037de:	3001      	adds	r0, #1
  4037e0:	f43f af38 	beq.w	403654 <_printf_float+0xb8>
  4037e4:	2700      	movs	r7, #0
  4037e6:	f104 081a 	add.w	r8, r4, #26
  4037ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4037ec:	3b01      	subs	r3, #1
  4037ee:	429f      	cmp	r7, r3
  4037f0:	db11      	blt.n	403816 <_printf_float+0x27a>
  4037f2:	6823      	ldr	r3, [r4, #0]
  4037f4:	079f      	lsls	r7, r3, #30
  4037f6:	d508      	bpl.n	40380a <_printf_float+0x26e>
  4037f8:	2700      	movs	r7, #0
  4037fa:	f104 0819 	add.w	r8, r4, #25
  4037fe:	68e3      	ldr	r3, [r4, #12]
  403800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403802:	1a9b      	subs	r3, r3, r2
  403804:	429f      	cmp	r7, r3
  403806:	f2c0 80e7 	blt.w	4039d8 <_printf_float+0x43c>
  40380a:	68e0      	ldr	r0, [r4, #12]
  40380c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40380e:	4298      	cmp	r0, r3
  403810:	bfb8      	it	lt
  403812:	4618      	movlt	r0, r3
  403814:	e720      	b.n	403658 <_printf_float+0xbc>
  403816:	2301      	movs	r3, #1
  403818:	4642      	mov	r2, r8
  40381a:	4659      	mov	r1, fp
  40381c:	4628      	mov	r0, r5
  40381e:	47b0      	blx	r6
  403820:	3001      	adds	r0, #1
  403822:	f43f af17 	beq.w	403654 <_printf_float+0xb8>
  403826:	3701      	adds	r7, #1
  403828:	e7df      	b.n	4037ea <_printf_float+0x24e>
  40382a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40382c:	2b00      	cmp	r3, #0
  40382e:	dc33      	bgt.n	403898 <_printf_float+0x2fc>
  403830:	2301      	movs	r3, #1
  403832:	4a18      	ldr	r2, [pc, #96]	; (403894 <_printf_float+0x2f8>)
  403834:	4659      	mov	r1, fp
  403836:	4628      	mov	r0, r5
  403838:	47b0      	blx	r6
  40383a:	3001      	adds	r0, #1
  40383c:	f43f af0a 	beq.w	403654 <_printf_float+0xb8>
  403840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403842:	b923      	cbnz	r3, 40384e <_printf_float+0x2b2>
  403844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403846:	b913      	cbnz	r3, 40384e <_printf_float+0x2b2>
  403848:	6823      	ldr	r3, [r4, #0]
  40384a:	07d9      	lsls	r1, r3, #31
  40384c:	d5d1      	bpl.n	4037f2 <_printf_float+0x256>
  40384e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403850:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403852:	4659      	mov	r1, fp
  403854:	4628      	mov	r0, r5
  403856:	47b0      	blx	r6
  403858:	3001      	adds	r0, #1
  40385a:	f43f aefb 	beq.w	403654 <_printf_float+0xb8>
  40385e:	f04f 0800 	mov.w	r8, #0
  403862:	f104 091a 	add.w	r9, r4, #26
  403866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403868:	425b      	negs	r3, r3
  40386a:	4598      	cmp	r8, r3
  40386c:	db01      	blt.n	403872 <_printf_float+0x2d6>
  40386e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403870:	e78e      	b.n	403790 <_printf_float+0x1f4>
  403872:	2301      	movs	r3, #1
  403874:	464a      	mov	r2, r9
  403876:	4659      	mov	r1, fp
  403878:	4628      	mov	r0, r5
  40387a:	47b0      	blx	r6
  40387c:	3001      	adds	r0, #1
  40387e:	f43f aee9 	beq.w	403654 <_printf_float+0xb8>
  403882:	f108 0801 	add.w	r8, r8, #1
  403886:	e7ee      	b.n	403866 <_printf_float+0x2ca>
  403888:	7fefffff 	.word	0x7fefffff
  40388c:	004063a4 	.word	0x004063a4
  403890:	004063a8 	.word	0x004063a8
  403894:	004063b4 	.word	0x004063b4
  403898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40389a:	6da3      	ldr	r3, [r4, #88]	; 0x58
  40389c:	429a      	cmp	r2, r3
  40389e:	bfa8      	it	ge
  4038a0:	461a      	movge	r2, r3
  4038a2:	2a00      	cmp	r2, #0
  4038a4:	4690      	mov	r8, r2
  4038a6:	dc36      	bgt.n	403916 <_printf_float+0x37a>
  4038a8:	f104 031a 	add.w	r3, r4, #26
  4038ac:	f04f 0a00 	mov.w	sl, #0
  4038b0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4038b4:	930b      	str	r3, [sp, #44]	; 0x2c
  4038b6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  4038ba:	eba9 0308 	sub.w	r3, r9, r8
  4038be:	459a      	cmp	sl, r3
  4038c0:	db31      	blt.n	403926 <_printf_float+0x38a>
  4038c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4038c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4038c6:	429a      	cmp	r2, r3
  4038c8:	db38      	blt.n	40393c <_printf_float+0x3a0>
  4038ca:	6823      	ldr	r3, [r4, #0]
  4038cc:	07da      	lsls	r2, r3, #31
  4038ce:	d435      	bmi.n	40393c <_printf_float+0x3a0>
  4038d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4038d2:	990d      	ldr	r1, [sp, #52]	; 0x34
  4038d4:	eba3 0209 	sub.w	r2, r3, r9
  4038d8:	eba3 0801 	sub.w	r8, r3, r1
  4038dc:	4590      	cmp	r8, r2
  4038de:	bfa8      	it	ge
  4038e0:	4690      	movge	r8, r2
  4038e2:	f1b8 0f00 	cmp.w	r8, #0
  4038e6:	dc31      	bgt.n	40394c <_printf_float+0x3b0>
  4038e8:	2700      	movs	r7, #0
  4038ea:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4038ee:	f104 091a 	add.w	r9, r4, #26
  4038f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4038f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4038f6:	1a9b      	subs	r3, r3, r2
  4038f8:	eba3 0308 	sub.w	r3, r3, r8
  4038fc:	429f      	cmp	r7, r3
  4038fe:	f6bf af78 	bge.w	4037f2 <_printf_float+0x256>
  403902:	2301      	movs	r3, #1
  403904:	464a      	mov	r2, r9
  403906:	4659      	mov	r1, fp
  403908:	4628      	mov	r0, r5
  40390a:	47b0      	blx	r6
  40390c:	3001      	adds	r0, #1
  40390e:	f43f aea1 	beq.w	403654 <_printf_float+0xb8>
  403912:	3701      	adds	r7, #1
  403914:	e7ed      	b.n	4038f2 <_printf_float+0x356>
  403916:	4613      	mov	r3, r2
  403918:	4659      	mov	r1, fp
  40391a:	463a      	mov	r2, r7
  40391c:	4628      	mov	r0, r5
  40391e:	47b0      	blx	r6
  403920:	3001      	adds	r0, #1
  403922:	d1c1      	bne.n	4038a8 <_printf_float+0x30c>
  403924:	e696      	b.n	403654 <_printf_float+0xb8>
  403926:	2301      	movs	r3, #1
  403928:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40392a:	4659      	mov	r1, fp
  40392c:	4628      	mov	r0, r5
  40392e:	47b0      	blx	r6
  403930:	3001      	adds	r0, #1
  403932:	f43f ae8f 	beq.w	403654 <_printf_float+0xb8>
  403936:	f10a 0a01 	add.w	sl, sl, #1
  40393a:	e7bc      	b.n	4038b6 <_printf_float+0x31a>
  40393c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40393e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403940:	4659      	mov	r1, fp
  403942:	4628      	mov	r0, r5
  403944:	47b0      	blx	r6
  403946:	3001      	adds	r0, #1
  403948:	d1c2      	bne.n	4038d0 <_printf_float+0x334>
  40394a:	e683      	b.n	403654 <_printf_float+0xb8>
  40394c:	4643      	mov	r3, r8
  40394e:	eb07 0209 	add.w	r2, r7, r9
  403952:	4659      	mov	r1, fp
  403954:	4628      	mov	r0, r5
  403956:	47b0      	blx	r6
  403958:	3001      	adds	r0, #1
  40395a:	d1c5      	bne.n	4038e8 <_printf_float+0x34c>
  40395c:	e67a      	b.n	403654 <_printf_float+0xb8>
  40395e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403960:	2a01      	cmp	r2, #1
  403962:	dc01      	bgt.n	403968 <_printf_float+0x3cc>
  403964:	07db      	lsls	r3, r3, #31
  403966:	d534      	bpl.n	4039d2 <_printf_float+0x436>
  403968:	2301      	movs	r3, #1
  40396a:	463a      	mov	r2, r7
  40396c:	4659      	mov	r1, fp
  40396e:	4628      	mov	r0, r5
  403970:	47b0      	blx	r6
  403972:	3001      	adds	r0, #1
  403974:	f43f ae6e 	beq.w	403654 <_printf_float+0xb8>
  403978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40397a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40397c:	4659      	mov	r1, fp
  40397e:	4628      	mov	r0, r5
  403980:	47b0      	blx	r6
  403982:	3001      	adds	r0, #1
  403984:	f43f ae66 	beq.w	403654 <_printf_float+0xb8>
  403988:	2200      	movs	r2, #0
  40398a:	2300      	movs	r3, #0
  40398c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403990:	f7ff fccc 	bl	40332c <__aeabi_dcmpeq>
  403994:	b150      	cbz	r0, 4039ac <_printf_float+0x410>
  403996:	2700      	movs	r7, #0
  403998:	f104 081a 	add.w	r8, r4, #26
  40399c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40399e:	3b01      	subs	r3, #1
  4039a0:	429f      	cmp	r7, r3
  4039a2:	db0c      	blt.n	4039be <_printf_float+0x422>
  4039a4:	464b      	mov	r3, r9
  4039a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
  4039aa:	e6f2      	b.n	403792 <_printf_float+0x1f6>
  4039ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4039ae:	1c7a      	adds	r2, r7, #1
  4039b0:	3b01      	subs	r3, #1
  4039b2:	4659      	mov	r1, fp
  4039b4:	4628      	mov	r0, r5
  4039b6:	47b0      	blx	r6
  4039b8:	3001      	adds	r0, #1
  4039ba:	d1f3      	bne.n	4039a4 <_printf_float+0x408>
  4039bc:	e64a      	b.n	403654 <_printf_float+0xb8>
  4039be:	2301      	movs	r3, #1
  4039c0:	4642      	mov	r2, r8
  4039c2:	4659      	mov	r1, fp
  4039c4:	4628      	mov	r0, r5
  4039c6:	47b0      	blx	r6
  4039c8:	3001      	adds	r0, #1
  4039ca:	f43f ae43 	beq.w	403654 <_printf_float+0xb8>
  4039ce:	3701      	adds	r7, #1
  4039d0:	e7e4      	b.n	40399c <_printf_float+0x400>
  4039d2:	2301      	movs	r3, #1
  4039d4:	463a      	mov	r2, r7
  4039d6:	e7ec      	b.n	4039b2 <_printf_float+0x416>
  4039d8:	2301      	movs	r3, #1
  4039da:	4642      	mov	r2, r8
  4039dc:	4659      	mov	r1, fp
  4039de:	4628      	mov	r0, r5
  4039e0:	47b0      	blx	r6
  4039e2:	3001      	adds	r0, #1
  4039e4:	f43f ae36 	beq.w	403654 <_printf_float+0xb8>
  4039e8:	3701      	adds	r7, #1
  4039ea:	e708      	b.n	4037fe <_printf_float+0x262>
  4039ec:	463a      	mov	r2, r7
  4039ee:	464b      	mov	r3, r9
  4039f0:	4638      	mov	r0, r7
  4039f2:	4649      	mov	r1, r9
  4039f4:	f7ff fccc 	bl	403390 <__aeabi_dcmpun>
  4039f8:	2800      	cmp	r0, #0
  4039fa:	f43f ae30 	beq.w	40365e <_printf_float+0xc2>
  4039fe:	4b01      	ldr	r3, [pc, #4]	; (403a04 <_printf_float+0x468>)
  403a00:	4f01      	ldr	r7, [pc, #4]	; (403a08 <_printf_float+0x46c>)
  403a02:	e612      	b.n	40362a <_printf_float+0x8e>
  403a04:	004063ac 	.word	0x004063ac
  403a08:	004063b0 	.word	0x004063b0

00403a0c <_printf_common>:
  403a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403a10:	4691      	mov	r9, r2
  403a12:	461f      	mov	r7, r3
  403a14:	688a      	ldr	r2, [r1, #8]
  403a16:	690b      	ldr	r3, [r1, #16]
  403a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
  403a1c:	4293      	cmp	r3, r2
  403a1e:	bfb8      	it	lt
  403a20:	4613      	movlt	r3, r2
  403a22:	f8c9 3000 	str.w	r3, [r9]
  403a26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  403a2a:	4606      	mov	r6, r0
  403a2c:	460c      	mov	r4, r1
  403a2e:	b112      	cbz	r2, 403a36 <_printf_common+0x2a>
  403a30:	3301      	adds	r3, #1
  403a32:	f8c9 3000 	str.w	r3, [r9]
  403a36:	6823      	ldr	r3, [r4, #0]
  403a38:	0699      	lsls	r1, r3, #26
  403a3a:	bf42      	ittt	mi
  403a3c:	f8d9 3000 	ldrmi.w	r3, [r9]
  403a40:	3302      	addmi	r3, #2
  403a42:	f8c9 3000 	strmi.w	r3, [r9]
  403a46:	6825      	ldr	r5, [r4, #0]
  403a48:	f015 0506 	ands.w	r5, r5, #6
  403a4c:	d107      	bne.n	403a5e <_printf_common+0x52>
  403a4e:	f104 0a19 	add.w	sl, r4, #25
  403a52:	68e3      	ldr	r3, [r4, #12]
  403a54:	f8d9 2000 	ldr.w	r2, [r9]
  403a58:	1a9b      	subs	r3, r3, r2
  403a5a:	429d      	cmp	r5, r3
  403a5c:	db29      	blt.n	403ab2 <_printf_common+0xa6>
  403a5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  403a62:	6822      	ldr	r2, [r4, #0]
  403a64:	3300      	adds	r3, #0
  403a66:	bf18      	it	ne
  403a68:	2301      	movne	r3, #1
  403a6a:	0692      	lsls	r2, r2, #26
  403a6c:	d42e      	bmi.n	403acc <_printf_common+0xc0>
  403a6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403a72:	4639      	mov	r1, r7
  403a74:	4630      	mov	r0, r6
  403a76:	47c0      	blx	r8
  403a78:	3001      	adds	r0, #1
  403a7a:	d021      	beq.n	403ac0 <_printf_common+0xb4>
  403a7c:	6823      	ldr	r3, [r4, #0]
  403a7e:	68e5      	ldr	r5, [r4, #12]
  403a80:	f8d9 2000 	ldr.w	r2, [r9]
  403a84:	f003 0306 	and.w	r3, r3, #6
  403a88:	2b04      	cmp	r3, #4
  403a8a:	bf08      	it	eq
  403a8c:	1aad      	subeq	r5, r5, r2
  403a8e:	68a3      	ldr	r3, [r4, #8]
  403a90:	6922      	ldr	r2, [r4, #16]
  403a92:	bf0c      	ite	eq
  403a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  403a98:	2500      	movne	r5, #0
  403a9a:	4293      	cmp	r3, r2
  403a9c:	bfc4      	itt	gt
  403a9e:	1a9b      	subgt	r3, r3, r2
  403aa0:	18ed      	addgt	r5, r5, r3
  403aa2:	f04f 0900 	mov.w	r9, #0
  403aa6:	341a      	adds	r4, #26
  403aa8:	454d      	cmp	r5, r9
  403aaa:	d11b      	bne.n	403ae4 <_printf_common+0xd8>
  403aac:	2000      	movs	r0, #0
  403aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ab2:	2301      	movs	r3, #1
  403ab4:	4652      	mov	r2, sl
  403ab6:	4639      	mov	r1, r7
  403ab8:	4630      	mov	r0, r6
  403aba:	47c0      	blx	r8
  403abc:	3001      	adds	r0, #1
  403abe:	d103      	bne.n	403ac8 <_printf_common+0xbc>
  403ac0:	f04f 30ff 	mov.w	r0, #4294967295
  403ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ac8:	3501      	adds	r5, #1
  403aca:	e7c2      	b.n	403a52 <_printf_common+0x46>
  403acc:	18e1      	adds	r1, r4, r3
  403ace:	1c5a      	adds	r2, r3, #1
  403ad0:	2030      	movs	r0, #48	; 0x30
  403ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  403ad6:	4422      	add	r2, r4
  403ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  403adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  403ae0:	3302      	adds	r3, #2
  403ae2:	e7c4      	b.n	403a6e <_printf_common+0x62>
  403ae4:	2301      	movs	r3, #1
  403ae6:	4622      	mov	r2, r4
  403ae8:	4639      	mov	r1, r7
  403aea:	4630      	mov	r0, r6
  403aec:	47c0      	blx	r8
  403aee:	3001      	adds	r0, #1
  403af0:	d0e6      	beq.n	403ac0 <_printf_common+0xb4>
  403af2:	f109 0901 	add.w	r9, r9, #1
  403af6:	e7d7      	b.n	403aa8 <_printf_common+0x9c>

00403af8 <_printf_i>:
  403af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403afc:	4617      	mov	r7, r2
  403afe:	7e0a      	ldrb	r2, [r1, #24]
  403b00:	b085      	sub	sp, #20
  403b02:	2a6e      	cmp	r2, #110	; 0x6e
  403b04:	4698      	mov	r8, r3
  403b06:	4606      	mov	r6, r0
  403b08:	460c      	mov	r4, r1
  403b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403b0c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  403b10:	f000 80bc 	beq.w	403c8c <_printf_i+0x194>
  403b14:	d81a      	bhi.n	403b4c <_printf_i+0x54>
  403b16:	2a63      	cmp	r2, #99	; 0x63
  403b18:	d02e      	beq.n	403b78 <_printf_i+0x80>
  403b1a:	d80a      	bhi.n	403b32 <_printf_i+0x3a>
  403b1c:	2a00      	cmp	r2, #0
  403b1e:	f000 80c8 	beq.w	403cb2 <_printf_i+0x1ba>
  403b22:	2a58      	cmp	r2, #88	; 0x58
  403b24:	f000 808a 	beq.w	403c3c <_printf_i+0x144>
  403b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403b2c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  403b30:	e02a      	b.n	403b88 <_printf_i+0x90>
  403b32:	2a64      	cmp	r2, #100	; 0x64
  403b34:	d001      	beq.n	403b3a <_printf_i+0x42>
  403b36:	2a69      	cmp	r2, #105	; 0x69
  403b38:	d1f6      	bne.n	403b28 <_printf_i+0x30>
  403b3a:	6821      	ldr	r1, [r4, #0]
  403b3c:	681a      	ldr	r2, [r3, #0]
  403b3e:	f011 0f80 	tst.w	r1, #128	; 0x80
  403b42:	d023      	beq.n	403b8c <_printf_i+0x94>
  403b44:	1d11      	adds	r1, r2, #4
  403b46:	6019      	str	r1, [r3, #0]
  403b48:	6813      	ldr	r3, [r2, #0]
  403b4a:	e027      	b.n	403b9c <_printf_i+0xa4>
  403b4c:	2a73      	cmp	r2, #115	; 0x73
  403b4e:	f000 80b4 	beq.w	403cba <_printf_i+0x1c2>
  403b52:	d808      	bhi.n	403b66 <_printf_i+0x6e>
  403b54:	2a6f      	cmp	r2, #111	; 0x6f
  403b56:	d02a      	beq.n	403bae <_printf_i+0xb6>
  403b58:	2a70      	cmp	r2, #112	; 0x70
  403b5a:	d1e5      	bne.n	403b28 <_printf_i+0x30>
  403b5c:	680a      	ldr	r2, [r1, #0]
  403b5e:	f042 0220 	orr.w	r2, r2, #32
  403b62:	600a      	str	r2, [r1, #0]
  403b64:	e003      	b.n	403b6e <_printf_i+0x76>
  403b66:	2a75      	cmp	r2, #117	; 0x75
  403b68:	d021      	beq.n	403bae <_printf_i+0xb6>
  403b6a:	2a78      	cmp	r2, #120	; 0x78
  403b6c:	d1dc      	bne.n	403b28 <_printf_i+0x30>
  403b6e:	2278      	movs	r2, #120	; 0x78
  403b70:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  403b74:	496e      	ldr	r1, [pc, #440]	; (403d30 <_printf_i+0x238>)
  403b76:	e064      	b.n	403c42 <_printf_i+0x14a>
  403b78:	681a      	ldr	r2, [r3, #0]
  403b7a:	f101 0542 	add.w	r5, r1, #66	; 0x42
  403b7e:	1d11      	adds	r1, r2, #4
  403b80:	6019      	str	r1, [r3, #0]
  403b82:	6813      	ldr	r3, [r2, #0]
  403b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403b88:	2301      	movs	r3, #1
  403b8a:	e0a3      	b.n	403cd4 <_printf_i+0x1dc>
  403b8c:	f011 0f40 	tst.w	r1, #64	; 0x40
  403b90:	f102 0104 	add.w	r1, r2, #4
  403b94:	6019      	str	r1, [r3, #0]
  403b96:	d0d7      	beq.n	403b48 <_printf_i+0x50>
  403b98:	f9b2 3000 	ldrsh.w	r3, [r2]
  403b9c:	2b00      	cmp	r3, #0
  403b9e:	da03      	bge.n	403ba8 <_printf_i+0xb0>
  403ba0:	222d      	movs	r2, #45	; 0x2d
  403ba2:	425b      	negs	r3, r3
  403ba4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  403ba8:	4962      	ldr	r1, [pc, #392]	; (403d34 <_printf_i+0x23c>)
  403baa:	220a      	movs	r2, #10
  403bac:	e017      	b.n	403bde <_printf_i+0xe6>
  403bae:	6820      	ldr	r0, [r4, #0]
  403bb0:	6819      	ldr	r1, [r3, #0]
  403bb2:	f010 0f80 	tst.w	r0, #128	; 0x80
  403bb6:	d003      	beq.n	403bc0 <_printf_i+0xc8>
  403bb8:	1d08      	adds	r0, r1, #4
  403bba:	6018      	str	r0, [r3, #0]
  403bbc:	680b      	ldr	r3, [r1, #0]
  403bbe:	e006      	b.n	403bce <_printf_i+0xd6>
  403bc0:	f010 0f40 	tst.w	r0, #64	; 0x40
  403bc4:	f101 0004 	add.w	r0, r1, #4
  403bc8:	6018      	str	r0, [r3, #0]
  403bca:	d0f7      	beq.n	403bbc <_printf_i+0xc4>
  403bcc:	880b      	ldrh	r3, [r1, #0]
  403bce:	4959      	ldr	r1, [pc, #356]	; (403d34 <_printf_i+0x23c>)
  403bd0:	2a6f      	cmp	r2, #111	; 0x6f
  403bd2:	bf14      	ite	ne
  403bd4:	220a      	movne	r2, #10
  403bd6:	2208      	moveq	r2, #8
  403bd8:	2000      	movs	r0, #0
  403bda:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  403bde:	6865      	ldr	r5, [r4, #4]
  403be0:	60a5      	str	r5, [r4, #8]
  403be2:	2d00      	cmp	r5, #0
  403be4:	f2c0 809c 	blt.w	403d20 <_printf_i+0x228>
  403be8:	6820      	ldr	r0, [r4, #0]
  403bea:	f020 0004 	bic.w	r0, r0, #4
  403bee:	6020      	str	r0, [r4, #0]
  403bf0:	2b00      	cmp	r3, #0
  403bf2:	d13f      	bne.n	403c74 <_printf_i+0x17c>
  403bf4:	2d00      	cmp	r5, #0
  403bf6:	f040 8095 	bne.w	403d24 <_printf_i+0x22c>
  403bfa:	4675      	mov	r5, lr
  403bfc:	2a08      	cmp	r2, #8
  403bfe:	d10b      	bne.n	403c18 <_printf_i+0x120>
  403c00:	6823      	ldr	r3, [r4, #0]
  403c02:	07da      	lsls	r2, r3, #31
  403c04:	d508      	bpl.n	403c18 <_printf_i+0x120>
  403c06:	6923      	ldr	r3, [r4, #16]
  403c08:	6862      	ldr	r2, [r4, #4]
  403c0a:	429a      	cmp	r2, r3
  403c0c:	bfde      	ittt	le
  403c0e:	2330      	movle	r3, #48	; 0x30
  403c10:	f805 3c01 	strble.w	r3, [r5, #-1]
  403c14:	f105 35ff 	addle.w	r5, r5, #4294967295
  403c18:	ebae 0305 	sub.w	r3, lr, r5
  403c1c:	6123      	str	r3, [r4, #16]
  403c1e:	f8cd 8000 	str.w	r8, [sp]
  403c22:	463b      	mov	r3, r7
  403c24:	aa03      	add	r2, sp, #12
  403c26:	4621      	mov	r1, r4
  403c28:	4630      	mov	r0, r6
  403c2a:	f7ff feef 	bl	403a0c <_printf_common>
  403c2e:	3001      	adds	r0, #1
  403c30:	d155      	bne.n	403cde <_printf_i+0x1e6>
  403c32:	f04f 30ff 	mov.w	r0, #4294967295
  403c36:	b005      	add	sp, #20
  403c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403c3c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  403c40:	493c      	ldr	r1, [pc, #240]	; (403d34 <_printf_i+0x23c>)
  403c42:	6822      	ldr	r2, [r4, #0]
  403c44:	6818      	ldr	r0, [r3, #0]
  403c46:	f012 0f80 	tst.w	r2, #128	; 0x80
  403c4a:	f100 0504 	add.w	r5, r0, #4
  403c4e:	601d      	str	r5, [r3, #0]
  403c50:	d001      	beq.n	403c56 <_printf_i+0x15e>
  403c52:	6803      	ldr	r3, [r0, #0]
  403c54:	e002      	b.n	403c5c <_printf_i+0x164>
  403c56:	0655      	lsls	r5, r2, #25
  403c58:	d5fb      	bpl.n	403c52 <_printf_i+0x15a>
  403c5a:	8803      	ldrh	r3, [r0, #0]
  403c5c:	07d0      	lsls	r0, r2, #31
  403c5e:	bf44      	itt	mi
  403c60:	f042 0220 	orrmi.w	r2, r2, #32
  403c64:	6022      	strmi	r2, [r4, #0]
  403c66:	b91b      	cbnz	r3, 403c70 <_printf_i+0x178>
  403c68:	6822      	ldr	r2, [r4, #0]
  403c6a:	f022 0220 	bic.w	r2, r2, #32
  403c6e:	6022      	str	r2, [r4, #0]
  403c70:	2210      	movs	r2, #16
  403c72:	e7b1      	b.n	403bd8 <_printf_i+0xe0>
  403c74:	4675      	mov	r5, lr
  403c76:	fbb3 f0f2 	udiv	r0, r3, r2
  403c7a:	fb02 3310 	mls	r3, r2, r0, r3
  403c7e:	5ccb      	ldrb	r3, [r1, r3]
  403c80:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403c84:	4603      	mov	r3, r0
  403c86:	2800      	cmp	r0, #0
  403c88:	d1f5      	bne.n	403c76 <_printf_i+0x17e>
  403c8a:	e7b7      	b.n	403bfc <_printf_i+0x104>
  403c8c:	6808      	ldr	r0, [r1, #0]
  403c8e:	681a      	ldr	r2, [r3, #0]
  403c90:	6949      	ldr	r1, [r1, #20]
  403c92:	f010 0f80 	tst.w	r0, #128	; 0x80
  403c96:	d004      	beq.n	403ca2 <_printf_i+0x1aa>
  403c98:	1d10      	adds	r0, r2, #4
  403c9a:	6018      	str	r0, [r3, #0]
  403c9c:	6813      	ldr	r3, [r2, #0]
  403c9e:	6019      	str	r1, [r3, #0]
  403ca0:	e007      	b.n	403cb2 <_printf_i+0x1ba>
  403ca2:	f010 0f40 	tst.w	r0, #64	; 0x40
  403ca6:	f102 0004 	add.w	r0, r2, #4
  403caa:	6018      	str	r0, [r3, #0]
  403cac:	6813      	ldr	r3, [r2, #0]
  403cae:	d0f6      	beq.n	403c9e <_printf_i+0x1a6>
  403cb0:	8019      	strh	r1, [r3, #0]
  403cb2:	2300      	movs	r3, #0
  403cb4:	6123      	str	r3, [r4, #16]
  403cb6:	4675      	mov	r5, lr
  403cb8:	e7b1      	b.n	403c1e <_printf_i+0x126>
  403cba:	681a      	ldr	r2, [r3, #0]
  403cbc:	1d11      	adds	r1, r2, #4
  403cbe:	6019      	str	r1, [r3, #0]
  403cc0:	6815      	ldr	r5, [r2, #0]
  403cc2:	6862      	ldr	r2, [r4, #4]
  403cc4:	2100      	movs	r1, #0
  403cc6:	4628      	mov	r0, r5
  403cc8:	f001 f962 	bl	404f90 <memchr>
  403ccc:	b108      	cbz	r0, 403cd2 <_printf_i+0x1da>
  403cce:	1b40      	subs	r0, r0, r5
  403cd0:	6060      	str	r0, [r4, #4]
  403cd2:	6863      	ldr	r3, [r4, #4]
  403cd4:	6123      	str	r3, [r4, #16]
  403cd6:	2300      	movs	r3, #0
  403cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403cdc:	e79f      	b.n	403c1e <_printf_i+0x126>
  403cde:	6923      	ldr	r3, [r4, #16]
  403ce0:	462a      	mov	r2, r5
  403ce2:	4639      	mov	r1, r7
  403ce4:	4630      	mov	r0, r6
  403ce6:	47c0      	blx	r8
  403ce8:	3001      	adds	r0, #1
  403cea:	d0a2      	beq.n	403c32 <_printf_i+0x13a>
  403cec:	6823      	ldr	r3, [r4, #0]
  403cee:	079b      	lsls	r3, r3, #30
  403cf0:	d507      	bpl.n	403d02 <_printf_i+0x20a>
  403cf2:	2500      	movs	r5, #0
  403cf4:	f104 0919 	add.w	r9, r4, #25
  403cf8:	68e3      	ldr	r3, [r4, #12]
  403cfa:	9a03      	ldr	r2, [sp, #12]
  403cfc:	1a9b      	subs	r3, r3, r2
  403cfe:	429d      	cmp	r5, r3
  403d00:	db05      	blt.n	403d0e <_printf_i+0x216>
  403d02:	68e0      	ldr	r0, [r4, #12]
  403d04:	9b03      	ldr	r3, [sp, #12]
  403d06:	4298      	cmp	r0, r3
  403d08:	bfb8      	it	lt
  403d0a:	4618      	movlt	r0, r3
  403d0c:	e793      	b.n	403c36 <_printf_i+0x13e>
  403d0e:	2301      	movs	r3, #1
  403d10:	464a      	mov	r2, r9
  403d12:	4639      	mov	r1, r7
  403d14:	4630      	mov	r0, r6
  403d16:	47c0      	blx	r8
  403d18:	3001      	adds	r0, #1
  403d1a:	d08a      	beq.n	403c32 <_printf_i+0x13a>
  403d1c:	3501      	adds	r5, #1
  403d1e:	e7eb      	b.n	403cf8 <_printf_i+0x200>
  403d20:	2b00      	cmp	r3, #0
  403d22:	d1a7      	bne.n	403c74 <_printf_i+0x17c>
  403d24:	780b      	ldrb	r3, [r1, #0]
  403d26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403d2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403d2e:	e765      	b.n	403bfc <_printf_i+0x104>
  403d30:	004063c7 	.word	0x004063c7
  403d34:	004063b6 	.word	0x004063b6

00403d38 <iprintf>:
  403d38:	b40f      	push	{r0, r1, r2, r3}
  403d3a:	4b0a      	ldr	r3, [pc, #40]	; (403d64 <iprintf+0x2c>)
  403d3c:	b513      	push	{r0, r1, r4, lr}
  403d3e:	681c      	ldr	r4, [r3, #0]
  403d40:	b124      	cbz	r4, 403d4c <iprintf+0x14>
  403d42:	69a3      	ldr	r3, [r4, #24]
  403d44:	b913      	cbnz	r3, 403d4c <iprintf+0x14>
  403d46:	4620      	mov	r0, r4
  403d48:	f001 f81e 	bl	404d88 <__sinit>
  403d4c:	ab05      	add	r3, sp, #20
  403d4e:	9a04      	ldr	r2, [sp, #16]
  403d50:	68a1      	ldr	r1, [r4, #8]
  403d52:	9301      	str	r3, [sp, #4]
  403d54:	4620      	mov	r0, r4
  403d56:	f001 fd1d 	bl	405794 <_vfiprintf_r>
  403d5a:	b002      	add	sp, #8
  403d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403d60:	b004      	add	sp, #16
  403d62:	4770      	bx	lr
  403d64:	20400048 	.word	0x20400048

00403d68 <setbuf>:
  403d68:	2900      	cmp	r1, #0
  403d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403d6e:	bf0c      	ite	eq
  403d70:	2202      	moveq	r2, #2
  403d72:	2200      	movne	r2, #0
  403d74:	f000 b800 	b.w	403d78 <setvbuf>

00403d78 <setvbuf>:
  403d78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403d7c:	461d      	mov	r5, r3
  403d7e:	4b51      	ldr	r3, [pc, #324]	; (403ec4 <setvbuf+0x14c>)
  403d80:	681e      	ldr	r6, [r3, #0]
  403d82:	4604      	mov	r4, r0
  403d84:	460f      	mov	r7, r1
  403d86:	4690      	mov	r8, r2
  403d88:	b126      	cbz	r6, 403d94 <setvbuf+0x1c>
  403d8a:	69b3      	ldr	r3, [r6, #24]
  403d8c:	b913      	cbnz	r3, 403d94 <setvbuf+0x1c>
  403d8e:	4630      	mov	r0, r6
  403d90:	f000 fffa 	bl	404d88 <__sinit>
  403d94:	4b4c      	ldr	r3, [pc, #304]	; (403ec8 <setvbuf+0x150>)
  403d96:	429c      	cmp	r4, r3
  403d98:	d152      	bne.n	403e40 <setvbuf+0xc8>
  403d9a:	6874      	ldr	r4, [r6, #4]
  403d9c:	f1b8 0f02 	cmp.w	r8, #2
  403da0:	d006      	beq.n	403db0 <setvbuf+0x38>
  403da2:	f1b8 0f01 	cmp.w	r8, #1
  403da6:	f200 8089 	bhi.w	403ebc <setvbuf+0x144>
  403daa:	2d00      	cmp	r5, #0
  403dac:	f2c0 8086 	blt.w	403ebc <setvbuf+0x144>
  403db0:	4621      	mov	r1, r4
  403db2:	4630      	mov	r0, r6
  403db4:	f000 ff7e 	bl	404cb4 <_fflush_r>
  403db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403dba:	b141      	cbz	r1, 403dce <setvbuf+0x56>
  403dbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403dc0:	4299      	cmp	r1, r3
  403dc2:	d002      	beq.n	403dca <setvbuf+0x52>
  403dc4:	4630      	mov	r0, r6
  403dc6:	f001 fc11 	bl	4055ec <_free_r>
  403dca:	2300      	movs	r3, #0
  403dcc:	6363      	str	r3, [r4, #52]	; 0x34
  403dce:	2300      	movs	r3, #0
  403dd0:	61a3      	str	r3, [r4, #24]
  403dd2:	6063      	str	r3, [r4, #4]
  403dd4:	89a3      	ldrh	r3, [r4, #12]
  403dd6:	061b      	lsls	r3, r3, #24
  403dd8:	d503      	bpl.n	403de2 <setvbuf+0x6a>
  403dda:	6921      	ldr	r1, [r4, #16]
  403ddc:	4630      	mov	r0, r6
  403dde:	f001 fc05 	bl	4055ec <_free_r>
  403de2:	89a3      	ldrh	r3, [r4, #12]
  403de4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403de8:	f023 0303 	bic.w	r3, r3, #3
  403dec:	f1b8 0f02 	cmp.w	r8, #2
  403df0:	81a3      	strh	r3, [r4, #12]
  403df2:	d05d      	beq.n	403eb0 <setvbuf+0x138>
  403df4:	ab01      	add	r3, sp, #4
  403df6:	466a      	mov	r2, sp
  403df8:	4621      	mov	r1, r4
  403dfa:	4630      	mov	r0, r6
  403dfc:	f001 f85c 	bl	404eb8 <__swhatbuf_r>
  403e00:	89a3      	ldrh	r3, [r4, #12]
  403e02:	4318      	orrs	r0, r3
  403e04:	81a0      	strh	r0, [r4, #12]
  403e06:	bb2d      	cbnz	r5, 403e54 <setvbuf+0xdc>
  403e08:	9d00      	ldr	r5, [sp, #0]
  403e0a:	4628      	mov	r0, r5
  403e0c:	f001 f8b8 	bl	404f80 <malloc>
  403e10:	4607      	mov	r7, r0
  403e12:	2800      	cmp	r0, #0
  403e14:	d14e      	bne.n	403eb4 <setvbuf+0x13c>
  403e16:	f8dd 9000 	ldr.w	r9, [sp]
  403e1a:	45a9      	cmp	r9, r5
  403e1c:	d13c      	bne.n	403e98 <setvbuf+0x120>
  403e1e:	f04f 30ff 	mov.w	r0, #4294967295
  403e22:	89a3      	ldrh	r3, [r4, #12]
  403e24:	f043 0302 	orr.w	r3, r3, #2
  403e28:	81a3      	strh	r3, [r4, #12]
  403e2a:	2300      	movs	r3, #0
  403e2c:	60a3      	str	r3, [r4, #8]
  403e2e:	f104 0347 	add.w	r3, r4, #71	; 0x47
  403e32:	6023      	str	r3, [r4, #0]
  403e34:	6123      	str	r3, [r4, #16]
  403e36:	2301      	movs	r3, #1
  403e38:	6163      	str	r3, [r4, #20]
  403e3a:	b003      	add	sp, #12
  403e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403e40:	4b22      	ldr	r3, [pc, #136]	; (403ecc <setvbuf+0x154>)
  403e42:	429c      	cmp	r4, r3
  403e44:	d101      	bne.n	403e4a <setvbuf+0xd2>
  403e46:	68b4      	ldr	r4, [r6, #8]
  403e48:	e7a8      	b.n	403d9c <setvbuf+0x24>
  403e4a:	4b21      	ldr	r3, [pc, #132]	; (403ed0 <setvbuf+0x158>)
  403e4c:	429c      	cmp	r4, r3
  403e4e:	bf08      	it	eq
  403e50:	68f4      	ldreq	r4, [r6, #12]
  403e52:	e7a3      	b.n	403d9c <setvbuf+0x24>
  403e54:	2f00      	cmp	r7, #0
  403e56:	d0d8      	beq.n	403e0a <setvbuf+0x92>
  403e58:	69b3      	ldr	r3, [r6, #24]
  403e5a:	b913      	cbnz	r3, 403e62 <setvbuf+0xea>
  403e5c:	4630      	mov	r0, r6
  403e5e:	f000 ff93 	bl	404d88 <__sinit>
  403e62:	f1b8 0f01 	cmp.w	r8, #1
  403e66:	bf08      	it	eq
  403e68:	89a3      	ldrheq	r3, [r4, #12]
  403e6a:	6027      	str	r7, [r4, #0]
  403e6c:	bf04      	itt	eq
  403e6e:	f043 0301 	orreq.w	r3, r3, #1
  403e72:	81a3      	strheq	r3, [r4, #12]
  403e74:	89a3      	ldrh	r3, [r4, #12]
  403e76:	6127      	str	r7, [r4, #16]
  403e78:	f013 0008 	ands.w	r0, r3, #8
  403e7c:	6165      	str	r5, [r4, #20]
  403e7e:	d01b      	beq.n	403eb8 <setvbuf+0x140>
  403e80:	f013 0001 	ands.w	r0, r3, #1
  403e84:	bf18      	it	ne
  403e86:	426d      	negne	r5, r5
  403e88:	f04f 0300 	mov.w	r3, #0
  403e8c:	bf1d      	ittte	ne
  403e8e:	60a3      	strne	r3, [r4, #8]
  403e90:	61a5      	strne	r5, [r4, #24]
  403e92:	4618      	movne	r0, r3
  403e94:	60a5      	streq	r5, [r4, #8]
  403e96:	e7d0      	b.n	403e3a <setvbuf+0xc2>
  403e98:	4648      	mov	r0, r9
  403e9a:	f001 f871 	bl	404f80 <malloc>
  403e9e:	4607      	mov	r7, r0
  403ea0:	2800      	cmp	r0, #0
  403ea2:	d0bc      	beq.n	403e1e <setvbuf+0xa6>
  403ea4:	89a3      	ldrh	r3, [r4, #12]
  403ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403eaa:	81a3      	strh	r3, [r4, #12]
  403eac:	464d      	mov	r5, r9
  403eae:	e7d3      	b.n	403e58 <setvbuf+0xe0>
  403eb0:	2000      	movs	r0, #0
  403eb2:	e7b6      	b.n	403e22 <setvbuf+0xaa>
  403eb4:	46a9      	mov	r9, r5
  403eb6:	e7f5      	b.n	403ea4 <setvbuf+0x12c>
  403eb8:	60a0      	str	r0, [r4, #8]
  403eba:	e7be      	b.n	403e3a <setvbuf+0xc2>
  403ebc:	f04f 30ff 	mov.w	r0, #4294967295
  403ec0:	e7bb      	b.n	403e3a <setvbuf+0xc2>
  403ec2:	bf00      	nop
  403ec4:	20400048 	.word	0x20400048
  403ec8:	00406408 	.word	0x00406408
  403ecc:	00406428 	.word	0x00406428
  403ed0:	004063e8 	.word	0x004063e8

00403ed4 <strlen>:
  403ed4:	4603      	mov	r3, r0
  403ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
  403eda:	2a00      	cmp	r2, #0
  403edc:	d1fb      	bne.n	403ed6 <strlen+0x2>
  403ede:	1a18      	subs	r0, r3, r0
  403ee0:	3801      	subs	r0, #1
  403ee2:	4770      	bx	lr

00403ee4 <quorem>:
  403ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ee8:	6903      	ldr	r3, [r0, #16]
  403eea:	690c      	ldr	r4, [r1, #16]
  403eec:	429c      	cmp	r4, r3
  403eee:	4680      	mov	r8, r0
  403ef0:	f300 8082 	bgt.w	403ff8 <quorem+0x114>
  403ef4:	3c01      	subs	r4, #1
  403ef6:	f101 0714 	add.w	r7, r1, #20
  403efa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  403efe:	f100 0614 	add.w	r6, r0, #20
  403f02:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  403f06:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  403f0a:	eb06 030e 	add.w	r3, r6, lr
  403f0e:	3501      	adds	r5, #1
  403f10:	eb07 090e 	add.w	r9, r7, lr
  403f14:	9301      	str	r3, [sp, #4]
  403f16:	fbb0 f5f5 	udiv	r5, r0, r5
  403f1a:	b395      	cbz	r5, 403f82 <quorem+0x9e>
  403f1c:	f04f 0a00 	mov.w	sl, #0
  403f20:	4638      	mov	r0, r7
  403f22:	46b4      	mov	ip, r6
  403f24:	46d3      	mov	fp, sl
  403f26:	f850 2b04 	ldr.w	r2, [r0], #4
  403f2a:	b293      	uxth	r3, r2
  403f2c:	fb05 a303 	mla	r3, r5, r3, sl
  403f30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  403f34:	b29b      	uxth	r3, r3
  403f36:	ebab 0303 	sub.w	r3, fp, r3
  403f3a:	0c12      	lsrs	r2, r2, #16
  403f3c:	f8bc b000 	ldrh.w	fp, [ip]
  403f40:	fb05 a202 	mla	r2, r5, r2, sl
  403f44:	fa13 f38b 	uxtah	r3, r3, fp
  403f48:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  403f4c:	fa1f fb82 	uxth.w	fp, r2
  403f50:	f8dc 2000 	ldr.w	r2, [ip]
  403f54:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  403f58:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403f5c:	b29b      	uxth	r3, r3
  403f5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403f62:	4581      	cmp	r9, r0
  403f64:	ea4f 4b22 	mov.w	fp, r2, asr #16
  403f68:	f84c 3b04 	str.w	r3, [ip], #4
  403f6c:	d2db      	bcs.n	403f26 <quorem+0x42>
  403f6e:	f856 300e 	ldr.w	r3, [r6, lr]
  403f72:	b933      	cbnz	r3, 403f82 <quorem+0x9e>
  403f74:	9b01      	ldr	r3, [sp, #4]
  403f76:	3b04      	subs	r3, #4
  403f78:	429e      	cmp	r6, r3
  403f7a:	461a      	mov	r2, r3
  403f7c:	d330      	bcc.n	403fe0 <quorem+0xfc>
  403f7e:	f8c8 4010 	str.w	r4, [r8, #16]
  403f82:	4640      	mov	r0, r8
  403f84:	f001 fa5d 	bl	405442 <__mcmp>
  403f88:	2800      	cmp	r0, #0
  403f8a:	db25      	blt.n	403fd8 <quorem+0xf4>
  403f8c:	3501      	adds	r5, #1
  403f8e:	4630      	mov	r0, r6
  403f90:	f04f 0e00 	mov.w	lr, #0
  403f94:	f857 2b04 	ldr.w	r2, [r7], #4
  403f98:	f8d0 c000 	ldr.w	ip, [r0]
  403f9c:	b293      	uxth	r3, r2
  403f9e:	ebae 0303 	sub.w	r3, lr, r3
  403fa2:	0c12      	lsrs	r2, r2, #16
  403fa4:	fa13 f38c 	uxtah	r3, r3, ip
  403fa8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  403fac:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403fb0:	b29b      	uxth	r3, r3
  403fb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403fb6:	45b9      	cmp	r9, r7
  403fb8:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403fbc:	f840 3b04 	str.w	r3, [r0], #4
  403fc0:	d2e8      	bcs.n	403f94 <quorem+0xb0>
  403fc2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403fc6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  403fca:	b92a      	cbnz	r2, 403fd8 <quorem+0xf4>
  403fcc:	3b04      	subs	r3, #4
  403fce:	429e      	cmp	r6, r3
  403fd0:	461a      	mov	r2, r3
  403fd2:	d30b      	bcc.n	403fec <quorem+0x108>
  403fd4:	f8c8 4010 	str.w	r4, [r8, #16]
  403fd8:	4628      	mov	r0, r5
  403fda:	b003      	add	sp, #12
  403fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fe0:	6812      	ldr	r2, [r2, #0]
  403fe2:	3b04      	subs	r3, #4
  403fe4:	2a00      	cmp	r2, #0
  403fe6:	d1ca      	bne.n	403f7e <quorem+0x9a>
  403fe8:	3c01      	subs	r4, #1
  403fea:	e7c5      	b.n	403f78 <quorem+0x94>
  403fec:	6812      	ldr	r2, [r2, #0]
  403fee:	3b04      	subs	r3, #4
  403ff0:	2a00      	cmp	r2, #0
  403ff2:	d1ef      	bne.n	403fd4 <quorem+0xf0>
  403ff4:	3c01      	subs	r4, #1
  403ff6:	e7ea      	b.n	403fce <quorem+0xea>
  403ff8:	2000      	movs	r0, #0
  403ffa:	e7ee      	b.n	403fda <quorem+0xf6>
  403ffc:	0000      	movs	r0, r0
	...

00404000 <_dtoa_r>:
  404000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404004:	6a46      	ldr	r6, [r0, #36]	; 0x24
  404006:	b095      	sub	sp, #84	; 0x54
  404008:	4604      	mov	r4, r0
  40400a:	9d21      	ldr	r5, [sp, #132]	; 0x84
  40400c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404010:	b93e      	cbnz	r6, 404022 <_dtoa_r+0x22>
  404012:	2010      	movs	r0, #16
  404014:	f000 ffb4 	bl	404f80 <malloc>
  404018:	6260      	str	r0, [r4, #36]	; 0x24
  40401a:	6046      	str	r6, [r0, #4]
  40401c:	6086      	str	r6, [r0, #8]
  40401e:	6006      	str	r6, [r0, #0]
  404020:	60c6      	str	r6, [r0, #12]
  404022:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404024:	6819      	ldr	r1, [r3, #0]
  404026:	b151      	cbz	r1, 40403e <_dtoa_r+0x3e>
  404028:	685a      	ldr	r2, [r3, #4]
  40402a:	604a      	str	r2, [r1, #4]
  40402c:	2301      	movs	r3, #1
  40402e:	4093      	lsls	r3, r2
  404030:	608b      	str	r3, [r1, #8]
  404032:	4620      	mov	r0, r4
  404034:	f001 f830 	bl	405098 <_Bfree>
  404038:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40403a:	2200      	movs	r2, #0
  40403c:	601a      	str	r2, [r3, #0]
  40403e:	9b03      	ldr	r3, [sp, #12]
  404040:	2b00      	cmp	r3, #0
  404042:	bfbf      	itttt	lt
  404044:	2301      	movlt	r3, #1
  404046:	602b      	strlt	r3, [r5, #0]
  404048:	9b03      	ldrlt	r3, [sp, #12]
  40404a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  40404e:	bfb2      	itee	lt
  404050:	9303      	strlt	r3, [sp, #12]
  404052:	2300      	movge	r3, #0
  404054:	602b      	strge	r3, [r5, #0]
  404056:	f8dd 900c 	ldr.w	r9, [sp, #12]
  40405a:	4ba9      	ldr	r3, [pc, #676]	; (404300 <_dtoa_r+0x300>)
  40405c:	ea33 0309 	bics.w	r3, r3, r9
  404060:	d11b      	bne.n	40409a <_dtoa_r+0x9a>
  404062:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404064:	f242 730f 	movw	r3, #9999	; 0x270f
  404068:	6013      	str	r3, [r2, #0]
  40406a:	9b02      	ldr	r3, [sp, #8]
  40406c:	b923      	cbnz	r3, 404078 <_dtoa_r+0x78>
  40406e:	f3c9 0013 	ubfx	r0, r9, #0, #20
  404072:	2800      	cmp	r0, #0
  404074:	f000 8581 	beq.w	404b7a <_dtoa_r+0xb7a>
  404078:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40407a:	b953      	cbnz	r3, 404092 <_dtoa_r+0x92>
  40407c:	4ba1      	ldr	r3, [pc, #644]	; (404304 <_dtoa_r+0x304>)
  40407e:	e021      	b.n	4040c4 <_dtoa_r+0xc4>
  404080:	4ba1      	ldr	r3, [pc, #644]	; (404308 <_dtoa_r+0x308>)
  404082:	9306      	str	r3, [sp, #24]
  404084:	3308      	adds	r3, #8
  404086:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404088:	6013      	str	r3, [r2, #0]
  40408a:	9806      	ldr	r0, [sp, #24]
  40408c:	b015      	add	sp, #84	; 0x54
  40408e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404092:	4b9c      	ldr	r3, [pc, #624]	; (404304 <_dtoa_r+0x304>)
  404094:	9306      	str	r3, [sp, #24]
  404096:	3303      	adds	r3, #3
  404098:	e7f5      	b.n	404086 <_dtoa_r+0x86>
  40409a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40409e:	2200      	movs	r2, #0
  4040a0:	2300      	movs	r3, #0
  4040a2:	4630      	mov	r0, r6
  4040a4:	4639      	mov	r1, r7
  4040a6:	f7ff f941 	bl	40332c <__aeabi_dcmpeq>
  4040aa:	4680      	mov	r8, r0
  4040ac:	b160      	cbz	r0, 4040c8 <_dtoa_r+0xc8>
  4040ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4040b0:	2301      	movs	r3, #1
  4040b2:	6013      	str	r3, [r2, #0]
  4040b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4040b6:	2b00      	cmp	r3, #0
  4040b8:	f000 855c 	beq.w	404b74 <_dtoa_r+0xb74>
  4040bc:	4b93      	ldr	r3, [pc, #588]	; (40430c <_dtoa_r+0x30c>)
  4040be:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4040c0:	6013      	str	r3, [r2, #0]
  4040c2:	3b01      	subs	r3, #1
  4040c4:	9306      	str	r3, [sp, #24]
  4040c6:	e7e0      	b.n	40408a <_dtoa_r+0x8a>
  4040c8:	ab12      	add	r3, sp, #72	; 0x48
  4040ca:	9301      	str	r3, [sp, #4]
  4040cc:	ab13      	add	r3, sp, #76	; 0x4c
  4040ce:	9300      	str	r3, [sp, #0]
  4040d0:	4632      	mov	r2, r6
  4040d2:	463b      	mov	r3, r7
  4040d4:	4620      	mov	r0, r4
  4040d6:	f001 fa2c 	bl	405532 <__d2b>
  4040da:	f3c9 550a 	ubfx	r5, r9, #20, #11
  4040de:	4682      	mov	sl, r0
  4040e0:	2d00      	cmp	r5, #0
  4040e2:	d07c      	beq.n	4041de <_dtoa_r+0x1de>
  4040e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
  4040e8:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4040ec:	4630      	mov	r0, r6
  4040ee:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4040f2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  4040f6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  4040fa:	2200      	movs	r2, #0
  4040fc:	4b84      	ldr	r3, [pc, #528]	; (404310 <_dtoa_r+0x310>)
  4040fe:	f7fe fcf9 	bl	402af4 <__aeabi_dsub>
  404102:	a379      	add	r3, pc, #484	; (adr r3, 4042e8 <_dtoa_r+0x2e8>)
  404104:	e9d3 2300 	ldrd	r2, r3, [r3]
  404108:	f7fe fea8 	bl	402e5c <__aeabi_dmul>
  40410c:	a378      	add	r3, pc, #480	; (adr r3, 4042f0 <_dtoa_r+0x2f0>)
  40410e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404112:	f7fe fcf1 	bl	402af8 <__adddf3>
  404116:	4606      	mov	r6, r0
  404118:	4628      	mov	r0, r5
  40411a:	460f      	mov	r7, r1
  40411c:	f7fe fe38 	bl	402d90 <__aeabi_i2d>
  404120:	a375      	add	r3, pc, #468	; (adr r3, 4042f8 <_dtoa_r+0x2f8>)
  404122:	e9d3 2300 	ldrd	r2, r3, [r3]
  404126:	f7fe fe99 	bl	402e5c <__aeabi_dmul>
  40412a:	4602      	mov	r2, r0
  40412c:	460b      	mov	r3, r1
  40412e:	4630      	mov	r0, r6
  404130:	4639      	mov	r1, r7
  404132:	f7fe fce1 	bl	402af8 <__adddf3>
  404136:	4606      	mov	r6, r0
  404138:	460f      	mov	r7, r1
  40413a:	f7ff f93f 	bl	4033bc <__aeabi_d2iz>
  40413e:	2200      	movs	r2, #0
  404140:	4683      	mov	fp, r0
  404142:	2300      	movs	r3, #0
  404144:	4630      	mov	r0, r6
  404146:	4639      	mov	r1, r7
  404148:	f7ff f8fa 	bl	403340 <__aeabi_dcmplt>
  40414c:	b158      	cbz	r0, 404166 <_dtoa_r+0x166>
  40414e:	4658      	mov	r0, fp
  404150:	f7fe fe1e 	bl	402d90 <__aeabi_i2d>
  404154:	4602      	mov	r2, r0
  404156:	460b      	mov	r3, r1
  404158:	4630      	mov	r0, r6
  40415a:	4639      	mov	r1, r7
  40415c:	f7ff f8e6 	bl	40332c <__aeabi_dcmpeq>
  404160:	b908      	cbnz	r0, 404166 <_dtoa_r+0x166>
  404162:	f10b 3bff 	add.w	fp, fp, #4294967295
  404166:	f1bb 0f16 	cmp.w	fp, #22
  40416a:	d857      	bhi.n	40421c <_dtoa_r+0x21c>
  40416c:	4969      	ldr	r1, [pc, #420]	; (404314 <_dtoa_r+0x314>)
  40416e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  404172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404176:	e9d1 0100 	ldrd	r0, r1, [r1]
  40417a:	f7ff f8ff 	bl	40337c <__aeabi_dcmpgt>
  40417e:	2800      	cmp	r0, #0
  404180:	d04e      	beq.n	404220 <_dtoa_r+0x220>
  404182:	f10b 3bff 	add.w	fp, fp, #4294967295
  404186:	2300      	movs	r3, #0
  404188:	930d      	str	r3, [sp, #52]	; 0x34
  40418a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40418c:	1b5d      	subs	r5, r3, r5
  40418e:	1e6b      	subs	r3, r5, #1
  404190:	9307      	str	r3, [sp, #28]
  404192:	bf43      	ittte	mi
  404194:	2300      	movmi	r3, #0
  404196:	f1c5 0801 	rsbmi	r8, r5, #1
  40419a:	9307      	strmi	r3, [sp, #28]
  40419c:	f04f 0800 	movpl.w	r8, #0
  4041a0:	f1bb 0f00 	cmp.w	fp, #0
  4041a4:	db3e      	blt.n	404224 <_dtoa_r+0x224>
  4041a6:	9b07      	ldr	r3, [sp, #28]
  4041a8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  4041ac:	445b      	add	r3, fp
  4041ae:	9307      	str	r3, [sp, #28]
  4041b0:	2300      	movs	r3, #0
  4041b2:	9308      	str	r3, [sp, #32]
  4041b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4041b6:	2b09      	cmp	r3, #9
  4041b8:	f200 80b0 	bhi.w	40431c <_dtoa_r+0x31c>
  4041bc:	2b05      	cmp	r3, #5
  4041be:	bfc4      	itt	gt
  4041c0:	3b04      	subgt	r3, #4
  4041c2:	931e      	strgt	r3, [sp, #120]	; 0x78
  4041c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4041c6:	f1a3 0302 	sub.w	r3, r3, #2
  4041ca:	bfcc      	ite	gt
  4041cc:	2600      	movgt	r6, #0
  4041ce:	2601      	movle	r6, #1
  4041d0:	2b03      	cmp	r3, #3
  4041d2:	f200 80af 	bhi.w	404334 <_dtoa_r+0x334>
  4041d6:	e8df f003 	tbb	[pc, r3]
  4041da:	8583      	.short	0x8583
  4041dc:	772d      	.short	0x772d
  4041de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4041e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
  4041e2:	441d      	add	r5, r3
  4041e4:	f205 4332 	addw	r3, r5, #1074	; 0x432
  4041e8:	2b20      	cmp	r3, #32
  4041ea:	dd11      	ble.n	404210 <_dtoa_r+0x210>
  4041ec:	9a02      	ldr	r2, [sp, #8]
  4041ee:	f205 4012 	addw	r0, r5, #1042	; 0x412
  4041f2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4041f6:	fa22 f000 	lsr.w	r0, r2, r0
  4041fa:	fa09 f303 	lsl.w	r3, r9, r3
  4041fe:	4318      	orrs	r0, r3
  404200:	f7fe fdb6 	bl	402d70 <__aeabi_ui2d>
  404204:	2301      	movs	r3, #1
  404206:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40420a:	3d01      	subs	r5, #1
  40420c:	9310      	str	r3, [sp, #64]	; 0x40
  40420e:	e774      	b.n	4040fa <_dtoa_r+0xfa>
  404210:	f1c3 0020 	rsb	r0, r3, #32
  404214:	9b02      	ldr	r3, [sp, #8]
  404216:	fa03 f000 	lsl.w	r0, r3, r0
  40421a:	e7f1      	b.n	404200 <_dtoa_r+0x200>
  40421c:	2301      	movs	r3, #1
  40421e:	e7b3      	b.n	404188 <_dtoa_r+0x188>
  404220:	900d      	str	r0, [sp, #52]	; 0x34
  404222:	e7b2      	b.n	40418a <_dtoa_r+0x18a>
  404224:	f1cb 0300 	rsb	r3, fp, #0
  404228:	9308      	str	r3, [sp, #32]
  40422a:	2300      	movs	r3, #0
  40422c:	eba8 080b 	sub.w	r8, r8, fp
  404230:	930c      	str	r3, [sp, #48]	; 0x30
  404232:	e7bf      	b.n	4041b4 <_dtoa_r+0x1b4>
  404234:	2301      	movs	r3, #1
  404236:	9309      	str	r3, [sp, #36]	; 0x24
  404238:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40423a:	2b00      	cmp	r3, #0
  40423c:	dd7d      	ble.n	40433a <_dtoa_r+0x33a>
  40423e:	9304      	str	r3, [sp, #16]
  404240:	4699      	mov	r9, r3
  404242:	6a65      	ldr	r5, [r4, #36]	; 0x24
  404244:	2200      	movs	r2, #0
  404246:	606a      	str	r2, [r5, #4]
  404248:	2104      	movs	r1, #4
  40424a:	f101 0214 	add.w	r2, r1, #20
  40424e:	429a      	cmp	r2, r3
  404250:	d978      	bls.n	404344 <_dtoa_r+0x344>
  404252:	6869      	ldr	r1, [r5, #4]
  404254:	4620      	mov	r0, r4
  404256:	f000 feeb 	bl	405030 <_Balloc>
  40425a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40425c:	6028      	str	r0, [r5, #0]
  40425e:	681b      	ldr	r3, [r3, #0]
  404260:	9306      	str	r3, [sp, #24]
  404262:	f1b9 0f0e 	cmp.w	r9, #14
  404266:	f200 80ee 	bhi.w	404446 <_dtoa_r+0x446>
  40426a:	2e00      	cmp	r6, #0
  40426c:	f000 80eb 	beq.w	404446 <_dtoa_r+0x446>
  404270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404274:	f1bb 0f00 	cmp.w	fp, #0
  404278:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40427c:	dd77      	ble.n	40436e <_dtoa_r+0x36e>
  40427e:	4a25      	ldr	r2, [pc, #148]	; (404314 <_dtoa_r+0x314>)
  404280:	f00b 030f 	and.w	r3, fp, #15
  404284:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404288:	e9d3 2300 	ldrd	r2, r3, [r3]
  40428c:	ea4f 162b 	mov.w	r6, fp, asr #4
  404290:	06f0      	lsls	r0, r6, #27
  404292:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  404296:	d55a      	bpl.n	40434e <_dtoa_r+0x34e>
  404298:	4b1f      	ldr	r3, [pc, #124]	; (404318 <_dtoa_r+0x318>)
  40429a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40429e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4042a2:	f7fe ff05 	bl	4030b0 <__aeabi_ddiv>
  4042a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4042aa:	f006 060f 	and.w	r6, r6, #15
  4042ae:	2503      	movs	r5, #3
  4042b0:	4f19      	ldr	r7, [pc, #100]	; (404318 <_dtoa_r+0x318>)
  4042b2:	2e00      	cmp	r6, #0
  4042b4:	d14d      	bne.n	404352 <_dtoa_r+0x352>
  4042b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4042ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4042be:	f7fe fef7 	bl	4030b0 <__aeabi_ddiv>
  4042c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4042c6:	e06c      	b.n	4043a2 <_dtoa_r+0x3a2>
  4042c8:	2301      	movs	r3, #1
  4042ca:	9309      	str	r3, [sp, #36]	; 0x24
  4042cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4042ce:	445b      	add	r3, fp
  4042d0:	f103 0901 	add.w	r9, r3, #1
  4042d4:	9304      	str	r3, [sp, #16]
  4042d6:	464b      	mov	r3, r9
  4042d8:	2b01      	cmp	r3, #1
  4042da:	bfb8      	it	lt
  4042dc:	2301      	movlt	r3, #1
  4042de:	e7b0      	b.n	404242 <_dtoa_r+0x242>
  4042e0:	2300      	movs	r3, #0
  4042e2:	e7a8      	b.n	404236 <_dtoa_r+0x236>
  4042e4:	2300      	movs	r3, #0
  4042e6:	e7f0      	b.n	4042ca <_dtoa_r+0x2ca>
  4042e8:	636f4361 	.word	0x636f4361
  4042ec:	3fd287a7 	.word	0x3fd287a7
  4042f0:	8b60c8b3 	.word	0x8b60c8b3
  4042f4:	3fc68a28 	.word	0x3fc68a28
  4042f8:	509f79fb 	.word	0x509f79fb
  4042fc:	3fd34413 	.word	0x3fd34413
  404300:	7ff00000 	.word	0x7ff00000
  404304:	004063e1 	.word	0x004063e1
  404308:	004063d8 	.word	0x004063d8
  40430c:	004063b5 	.word	0x004063b5
  404310:	3ff80000 	.word	0x3ff80000
  404314:	00406470 	.word	0x00406470
  404318:	00406448 	.word	0x00406448
  40431c:	2601      	movs	r6, #1
  40431e:	2300      	movs	r3, #0
  404320:	931e      	str	r3, [sp, #120]	; 0x78
  404322:	9609      	str	r6, [sp, #36]	; 0x24
  404324:	f04f 33ff 	mov.w	r3, #4294967295
  404328:	9304      	str	r3, [sp, #16]
  40432a:	4699      	mov	r9, r3
  40432c:	2200      	movs	r2, #0
  40432e:	2312      	movs	r3, #18
  404330:	921f      	str	r2, [sp, #124]	; 0x7c
  404332:	e786      	b.n	404242 <_dtoa_r+0x242>
  404334:	2301      	movs	r3, #1
  404336:	9309      	str	r3, [sp, #36]	; 0x24
  404338:	e7f4      	b.n	404324 <_dtoa_r+0x324>
  40433a:	2301      	movs	r3, #1
  40433c:	9304      	str	r3, [sp, #16]
  40433e:	4699      	mov	r9, r3
  404340:	461a      	mov	r2, r3
  404342:	e7f5      	b.n	404330 <_dtoa_r+0x330>
  404344:	686a      	ldr	r2, [r5, #4]
  404346:	3201      	adds	r2, #1
  404348:	606a      	str	r2, [r5, #4]
  40434a:	0049      	lsls	r1, r1, #1
  40434c:	e77d      	b.n	40424a <_dtoa_r+0x24a>
  40434e:	2502      	movs	r5, #2
  404350:	e7ae      	b.n	4042b0 <_dtoa_r+0x2b0>
  404352:	07f1      	lsls	r1, r6, #31
  404354:	d508      	bpl.n	404368 <_dtoa_r+0x368>
  404356:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40435a:	e9d7 2300 	ldrd	r2, r3, [r7]
  40435e:	f7fe fd7d 	bl	402e5c <__aeabi_dmul>
  404362:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404366:	3501      	adds	r5, #1
  404368:	1076      	asrs	r6, r6, #1
  40436a:	3708      	adds	r7, #8
  40436c:	e7a1      	b.n	4042b2 <_dtoa_r+0x2b2>
  40436e:	f000 80a5 	beq.w	4044bc <_dtoa_r+0x4bc>
  404372:	f1cb 0600 	rsb	r6, fp, #0
  404376:	4ba3      	ldr	r3, [pc, #652]	; (404604 <_dtoa_r+0x604>)
  404378:	4fa3      	ldr	r7, [pc, #652]	; (404608 <_dtoa_r+0x608>)
  40437a:	f006 020f 	and.w	r2, r6, #15
  40437e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404382:	e9d3 2300 	ldrd	r2, r3, [r3]
  404386:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40438a:	f7fe fd67 	bl	402e5c <__aeabi_dmul>
  40438e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404392:	1136      	asrs	r6, r6, #4
  404394:	2300      	movs	r3, #0
  404396:	2502      	movs	r5, #2
  404398:	2e00      	cmp	r6, #0
  40439a:	f040 8084 	bne.w	4044a6 <_dtoa_r+0x4a6>
  40439e:	2b00      	cmp	r3, #0
  4043a0:	d18f      	bne.n	4042c2 <_dtoa_r+0x2c2>
  4043a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4043a4:	2b00      	cmp	r3, #0
  4043a6:	f000 808b 	beq.w	4044c0 <_dtoa_r+0x4c0>
  4043aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4043ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  4043b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4043b6:	2200      	movs	r2, #0
  4043b8:	4b94      	ldr	r3, [pc, #592]	; (40460c <_dtoa_r+0x60c>)
  4043ba:	f7fe ffc1 	bl	403340 <__aeabi_dcmplt>
  4043be:	2800      	cmp	r0, #0
  4043c0:	d07e      	beq.n	4044c0 <_dtoa_r+0x4c0>
  4043c2:	f1b9 0f00 	cmp.w	r9, #0
  4043c6:	d07b      	beq.n	4044c0 <_dtoa_r+0x4c0>
  4043c8:	9b04      	ldr	r3, [sp, #16]
  4043ca:	2b00      	cmp	r3, #0
  4043cc:	dd37      	ble.n	40443e <_dtoa_r+0x43e>
  4043ce:	2200      	movs	r2, #0
  4043d0:	4b8f      	ldr	r3, [pc, #572]	; (404610 <_dtoa_r+0x610>)
  4043d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4043d6:	f7fe fd41 	bl	402e5c <__aeabi_dmul>
  4043da:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4043de:	9e04      	ldr	r6, [sp, #16]
  4043e0:	f10b 37ff 	add.w	r7, fp, #4294967295
  4043e4:	3501      	adds	r5, #1
  4043e6:	4628      	mov	r0, r5
  4043e8:	f7fe fcd2 	bl	402d90 <__aeabi_i2d>
  4043ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4043f0:	f7fe fd34 	bl	402e5c <__aeabi_dmul>
  4043f4:	4b87      	ldr	r3, [pc, #540]	; (404614 <_dtoa_r+0x614>)
  4043f6:	2200      	movs	r2, #0
  4043f8:	f7fe fb7e 	bl	402af8 <__adddf3>
  4043fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404402:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  404406:	950b      	str	r5, [sp, #44]	; 0x2c
  404408:	2e00      	cmp	r6, #0
  40440a:	d15c      	bne.n	4044c6 <_dtoa_r+0x4c6>
  40440c:	2200      	movs	r2, #0
  40440e:	4b82      	ldr	r3, [pc, #520]	; (404618 <_dtoa_r+0x618>)
  404410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404414:	f7fe fb6e 	bl	402af4 <__aeabi_dsub>
  404418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40441a:	462b      	mov	r3, r5
  40441c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404420:	f7fe ffac 	bl	40337c <__aeabi_dcmpgt>
  404424:	2800      	cmp	r0, #0
  404426:	f040 82f7 	bne.w	404a18 <_dtoa_r+0xa18>
  40442a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40442c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  404430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404434:	f7fe ff84 	bl	403340 <__aeabi_dcmplt>
  404438:	2800      	cmp	r0, #0
  40443a:	f040 82eb 	bne.w	404a14 <_dtoa_r+0xa14>
  40443e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  404442:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404446:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404448:	2b00      	cmp	r3, #0
  40444a:	f2c0 8151 	blt.w	4046f0 <_dtoa_r+0x6f0>
  40444e:	f1bb 0f0e 	cmp.w	fp, #14
  404452:	f300 814d 	bgt.w	4046f0 <_dtoa_r+0x6f0>
  404456:	4b6b      	ldr	r3, [pc, #428]	; (404604 <_dtoa_r+0x604>)
  404458:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  40445c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404460:	e9cd 2304 	strd	r2, r3, [sp, #16]
  404464:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404466:	2b00      	cmp	r3, #0
  404468:	f280 80da 	bge.w	404620 <_dtoa_r+0x620>
  40446c:	f1b9 0f00 	cmp.w	r9, #0
  404470:	f300 80d6 	bgt.w	404620 <_dtoa_r+0x620>
  404474:	f040 82cd 	bne.w	404a12 <_dtoa_r+0xa12>
  404478:	2200      	movs	r2, #0
  40447a:	4b67      	ldr	r3, [pc, #412]	; (404618 <_dtoa_r+0x618>)
  40447c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404480:	f7fe fcec 	bl	402e5c <__aeabi_dmul>
  404484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404488:	f7fe ff6e 	bl	403368 <__aeabi_dcmpge>
  40448c:	464e      	mov	r6, r9
  40448e:	464f      	mov	r7, r9
  404490:	2800      	cmp	r0, #0
  404492:	f040 82a4 	bne.w	4049de <_dtoa_r+0x9de>
  404496:	9b06      	ldr	r3, [sp, #24]
  404498:	9a06      	ldr	r2, [sp, #24]
  40449a:	1c5d      	adds	r5, r3, #1
  40449c:	2331      	movs	r3, #49	; 0x31
  40449e:	7013      	strb	r3, [r2, #0]
  4044a0:	f10b 0b01 	add.w	fp, fp, #1
  4044a4:	e29f      	b.n	4049e6 <_dtoa_r+0x9e6>
  4044a6:	07f2      	lsls	r2, r6, #31
  4044a8:	d505      	bpl.n	4044b6 <_dtoa_r+0x4b6>
  4044aa:	e9d7 2300 	ldrd	r2, r3, [r7]
  4044ae:	f7fe fcd5 	bl	402e5c <__aeabi_dmul>
  4044b2:	3501      	adds	r5, #1
  4044b4:	2301      	movs	r3, #1
  4044b6:	1076      	asrs	r6, r6, #1
  4044b8:	3708      	adds	r7, #8
  4044ba:	e76d      	b.n	404398 <_dtoa_r+0x398>
  4044bc:	2502      	movs	r5, #2
  4044be:	e770      	b.n	4043a2 <_dtoa_r+0x3a2>
  4044c0:	465f      	mov	r7, fp
  4044c2:	464e      	mov	r6, r9
  4044c4:	e78f      	b.n	4043e6 <_dtoa_r+0x3e6>
  4044c6:	9a06      	ldr	r2, [sp, #24]
  4044c8:	4b4e      	ldr	r3, [pc, #312]	; (404604 <_dtoa_r+0x604>)
  4044ca:	4432      	add	r2, r6
  4044cc:	9211      	str	r2, [sp, #68]	; 0x44
  4044ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4044d0:	1e71      	subs	r1, r6, #1
  4044d2:	2a00      	cmp	r2, #0
  4044d4:	d048      	beq.n	404568 <_dtoa_r+0x568>
  4044d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  4044da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4044de:	2000      	movs	r0, #0
  4044e0:	494e      	ldr	r1, [pc, #312]	; (40461c <_dtoa_r+0x61c>)
  4044e2:	f7fe fde5 	bl	4030b0 <__aeabi_ddiv>
  4044e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4044ea:	f7fe fb03 	bl	402af4 <__aeabi_dsub>
  4044ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4044f2:	9d06      	ldr	r5, [sp, #24]
  4044f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4044f8:	f7fe ff60 	bl	4033bc <__aeabi_d2iz>
  4044fc:	4606      	mov	r6, r0
  4044fe:	f7fe fc47 	bl	402d90 <__aeabi_i2d>
  404502:	4602      	mov	r2, r0
  404504:	460b      	mov	r3, r1
  404506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40450a:	f7fe faf3 	bl	402af4 <__aeabi_dsub>
  40450e:	3630      	adds	r6, #48	; 0x30
  404510:	f805 6b01 	strb.w	r6, [r5], #1
  404514:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404518:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40451c:	f7fe ff10 	bl	403340 <__aeabi_dcmplt>
  404520:	2800      	cmp	r0, #0
  404522:	d165      	bne.n	4045f0 <_dtoa_r+0x5f0>
  404524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404528:	2000      	movs	r0, #0
  40452a:	4938      	ldr	r1, [pc, #224]	; (40460c <_dtoa_r+0x60c>)
  40452c:	f7fe fae2 	bl	402af4 <__aeabi_dsub>
  404530:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404534:	f7fe ff04 	bl	403340 <__aeabi_dcmplt>
  404538:	2800      	cmp	r0, #0
  40453a:	f040 80b9 	bne.w	4046b0 <_dtoa_r+0x6b0>
  40453e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404540:	429d      	cmp	r5, r3
  404542:	f43f af7c 	beq.w	40443e <_dtoa_r+0x43e>
  404546:	2200      	movs	r2, #0
  404548:	4b31      	ldr	r3, [pc, #196]	; (404610 <_dtoa_r+0x610>)
  40454a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40454e:	f7fe fc85 	bl	402e5c <__aeabi_dmul>
  404552:	2200      	movs	r2, #0
  404554:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404558:	4b2d      	ldr	r3, [pc, #180]	; (404610 <_dtoa_r+0x610>)
  40455a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40455e:	f7fe fc7d 	bl	402e5c <__aeabi_dmul>
  404562:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404566:	e7c5      	b.n	4044f4 <_dtoa_r+0x4f4>
  404568:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  40456c:	e9d1 0100 	ldrd	r0, r1, [r1]
  404570:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404574:	f7fe fc72 	bl	402e5c <__aeabi_dmul>
  404578:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40457c:	9d06      	ldr	r5, [sp, #24]
  40457e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404582:	f7fe ff1b 	bl	4033bc <__aeabi_d2iz>
  404586:	4606      	mov	r6, r0
  404588:	f7fe fc02 	bl	402d90 <__aeabi_i2d>
  40458c:	3630      	adds	r6, #48	; 0x30
  40458e:	4602      	mov	r2, r0
  404590:	460b      	mov	r3, r1
  404592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404596:	f7fe faad 	bl	402af4 <__aeabi_dsub>
  40459a:	f805 6b01 	strb.w	r6, [r5], #1
  40459e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4045a0:	42ab      	cmp	r3, r5
  4045a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4045a6:	f04f 0200 	mov.w	r2, #0
  4045aa:	d125      	bne.n	4045f8 <_dtoa_r+0x5f8>
  4045ac:	4b1b      	ldr	r3, [pc, #108]	; (40461c <_dtoa_r+0x61c>)
  4045ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4045b2:	f7fe faa1 	bl	402af8 <__adddf3>
  4045b6:	4602      	mov	r2, r0
  4045b8:	460b      	mov	r3, r1
  4045ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4045be:	f7fe fedd 	bl	40337c <__aeabi_dcmpgt>
  4045c2:	2800      	cmp	r0, #0
  4045c4:	d174      	bne.n	4046b0 <_dtoa_r+0x6b0>
  4045c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4045ca:	2000      	movs	r0, #0
  4045cc:	4913      	ldr	r1, [pc, #76]	; (40461c <_dtoa_r+0x61c>)
  4045ce:	f7fe fa91 	bl	402af4 <__aeabi_dsub>
  4045d2:	4602      	mov	r2, r0
  4045d4:	460b      	mov	r3, r1
  4045d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4045da:	f7fe feb1 	bl	403340 <__aeabi_dcmplt>
  4045de:	2800      	cmp	r0, #0
  4045e0:	f43f af2d 	beq.w	40443e <_dtoa_r+0x43e>
  4045e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4045e8:	2b30      	cmp	r3, #48	; 0x30
  4045ea:	f105 32ff 	add.w	r2, r5, #4294967295
  4045ee:	d001      	beq.n	4045f4 <_dtoa_r+0x5f4>
  4045f0:	46bb      	mov	fp, r7
  4045f2:	e04c      	b.n	40468e <_dtoa_r+0x68e>
  4045f4:	4615      	mov	r5, r2
  4045f6:	e7f5      	b.n	4045e4 <_dtoa_r+0x5e4>
  4045f8:	4b05      	ldr	r3, [pc, #20]	; (404610 <_dtoa_r+0x610>)
  4045fa:	f7fe fc2f 	bl	402e5c <__aeabi_dmul>
  4045fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404602:	e7bc      	b.n	40457e <_dtoa_r+0x57e>
  404604:	00406470 	.word	0x00406470
  404608:	00406448 	.word	0x00406448
  40460c:	3ff00000 	.word	0x3ff00000
  404610:	40240000 	.word	0x40240000
  404614:	401c0000 	.word	0x401c0000
  404618:	40140000 	.word	0x40140000
  40461c:	3fe00000 	.word	0x3fe00000
  404620:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  404624:	9d06      	ldr	r5, [sp, #24]
  404626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40462a:	4630      	mov	r0, r6
  40462c:	4639      	mov	r1, r7
  40462e:	f7fe fd3f 	bl	4030b0 <__aeabi_ddiv>
  404632:	f7fe fec3 	bl	4033bc <__aeabi_d2iz>
  404636:	4680      	mov	r8, r0
  404638:	f7fe fbaa 	bl	402d90 <__aeabi_i2d>
  40463c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404640:	f7fe fc0c 	bl	402e5c <__aeabi_dmul>
  404644:	4602      	mov	r2, r0
  404646:	460b      	mov	r3, r1
  404648:	4630      	mov	r0, r6
  40464a:	4639      	mov	r1, r7
  40464c:	f108 0630 	add.w	r6, r8, #48	; 0x30
  404650:	f7fe fa50 	bl	402af4 <__aeabi_dsub>
  404654:	f805 6b01 	strb.w	r6, [r5], #1
  404658:	9e06      	ldr	r6, [sp, #24]
  40465a:	1bae      	subs	r6, r5, r6
  40465c:	45b1      	cmp	r9, r6
  40465e:	4602      	mov	r2, r0
  404660:	460b      	mov	r3, r1
  404662:	d138      	bne.n	4046d6 <_dtoa_r+0x6d6>
  404664:	f7fe fa48 	bl	402af8 <__adddf3>
  404668:	4606      	mov	r6, r0
  40466a:	460f      	mov	r7, r1
  40466c:	4602      	mov	r2, r0
  40466e:	460b      	mov	r3, r1
  404670:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404674:	f7fe fe64 	bl	403340 <__aeabi_dcmplt>
  404678:	b9c8      	cbnz	r0, 4046ae <_dtoa_r+0x6ae>
  40467a:	4632      	mov	r2, r6
  40467c:	463b      	mov	r3, r7
  40467e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404682:	f7fe fe53 	bl	40332c <__aeabi_dcmpeq>
  404686:	b110      	cbz	r0, 40468e <_dtoa_r+0x68e>
  404688:	f018 0f01 	tst.w	r8, #1
  40468c:	d10f      	bne.n	4046ae <_dtoa_r+0x6ae>
  40468e:	4651      	mov	r1, sl
  404690:	4620      	mov	r0, r4
  404692:	f000 fd01 	bl	405098 <_Bfree>
  404696:	2300      	movs	r3, #0
  404698:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40469a:	702b      	strb	r3, [r5, #0]
  40469c:	f10b 0301 	add.w	r3, fp, #1
  4046a0:	6013      	str	r3, [r2, #0]
  4046a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4046a4:	2b00      	cmp	r3, #0
  4046a6:	f43f acf0 	beq.w	40408a <_dtoa_r+0x8a>
  4046aa:	601d      	str	r5, [r3, #0]
  4046ac:	e4ed      	b.n	40408a <_dtoa_r+0x8a>
  4046ae:	465f      	mov	r7, fp
  4046b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4046b4:	2a39      	cmp	r2, #57	; 0x39
  4046b6:	f105 33ff 	add.w	r3, r5, #4294967295
  4046ba:	d106      	bne.n	4046ca <_dtoa_r+0x6ca>
  4046bc:	9a06      	ldr	r2, [sp, #24]
  4046be:	429a      	cmp	r2, r3
  4046c0:	d107      	bne.n	4046d2 <_dtoa_r+0x6d2>
  4046c2:	2330      	movs	r3, #48	; 0x30
  4046c4:	7013      	strb	r3, [r2, #0]
  4046c6:	3701      	adds	r7, #1
  4046c8:	4613      	mov	r3, r2
  4046ca:	781a      	ldrb	r2, [r3, #0]
  4046cc:	3201      	adds	r2, #1
  4046ce:	701a      	strb	r2, [r3, #0]
  4046d0:	e78e      	b.n	4045f0 <_dtoa_r+0x5f0>
  4046d2:	461d      	mov	r5, r3
  4046d4:	e7ec      	b.n	4046b0 <_dtoa_r+0x6b0>
  4046d6:	2200      	movs	r2, #0
  4046d8:	4bb4      	ldr	r3, [pc, #720]	; (4049ac <_dtoa_r+0x9ac>)
  4046da:	f7fe fbbf 	bl	402e5c <__aeabi_dmul>
  4046de:	2200      	movs	r2, #0
  4046e0:	2300      	movs	r3, #0
  4046e2:	4606      	mov	r6, r0
  4046e4:	460f      	mov	r7, r1
  4046e6:	f7fe fe21 	bl	40332c <__aeabi_dcmpeq>
  4046ea:	2800      	cmp	r0, #0
  4046ec:	d09b      	beq.n	404626 <_dtoa_r+0x626>
  4046ee:	e7ce      	b.n	40468e <_dtoa_r+0x68e>
  4046f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4046f2:	2a00      	cmp	r2, #0
  4046f4:	f000 8129 	beq.w	40494a <_dtoa_r+0x94a>
  4046f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4046fa:	2a01      	cmp	r2, #1
  4046fc:	f300 810e 	bgt.w	40491c <_dtoa_r+0x91c>
  404700:	9a10      	ldr	r2, [sp, #64]	; 0x40
  404702:	2a00      	cmp	r2, #0
  404704:	f000 8106 	beq.w	404914 <_dtoa_r+0x914>
  404708:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40470c:	9e08      	ldr	r6, [sp, #32]
  40470e:	4645      	mov	r5, r8
  404710:	9a07      	ldr	r2, [sp, #28]
  404712:	2101      	movs	r1, #1
  404714:	441a      	add	r2, r3
  404716:	4620      	mov	r0, r4
  404718:	4498      	add	r8, r3
  40471a:	9207      	str	r2, [sp, #28]
  40471c:	f000 fd5c 	bl	4051d8 <__i2b>
  404720:	4607      	mov	r7, r0
  404722:	2d00      	cmp	r5, #0
  404724:	dd0b      	ble.n	40473e <_dtoa_r+0x73e>
  404726:	9b07      	ldr	r3, [sp, #28]
  404728:	2b00      	cmp	r3, #0
  40472a:	dd08      	ble.n	40473e <_dtoa_r+0x73e>
  40472c:	42ab      	cmp	r3, r5
  40472e:	9a07      	ldr	r2, [sp, #28]
  404730:	bfa8      	it	ge
  404732:	462b      	movge	r3, r5
  404734:	eba8 0803 	sub.w	r8, r8, r3
  404738:	1aed      	subs	r5, r5, r3
  40473a:	1ad3      	subs	r3, r2, r3
  40473c:	9307      	str	r3, [sp, #28]
  40473e:	9b08      	ldr	r3, [sp, #32]
  404740:	b1fb      	cbz	r3, 404782 <_dtoa_r+0x782>
  404742:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404744:	2b00      	cmp	r3, #0
  404746:	f000 8104 	beq.w	404952 <_dtoa_r+0x952>
  40474a:	2e00      	cmp	r6, #0
  40474c:	dd11      	ble.n	404772 <_dtoa_r+0x772>
  40474e:	4639      	mov	r1, r7
  404750:	4632      	mov	r2, r6
  404752:	4620      	mov	r0, r4
  404754:	f000 fdd6 	bl	405304 <__pow5mult>
  404758:	4652      	mov	r2, sl
  40475a:	4601      	mov	r1, r0
  40475c:	4607      	mov	r7, r0
  40475e:	4620      	mov	r0, r4
  404760:	f000 fd43 	bl	4051ea <__multiply>
  404764:	4651      	mov	r1, sl
  404766:	900a      	str	r0, [sp, #40]	; 0x28
  404768:	4620      	mov	r0, r4
  40476a:	f000 fc95 	bl	405098 <_Bfree>
  40476e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404770:	469a      	mov	sl, r3
  404772:	9b08      	ldr	r3, [sp, #32]
  404774:	1b9a      	subs	r2, r3, r6
  404776:	d004      	beq.n	404782 <_dtoa_r+0x782>
  404778:	4651      	mov	r1, sl
  40477a:	4620      	mov	r0, r4
  40477c:	f000 fdc2 	bl	405304 <__pow5mult>
  404780:	4682      	mov	sl, r0
  404782:	2101      	movs	r1, #1
  404784:	4620      	mov	r0, r4
  404786:	f000 fd27 	bl	4051d8 <__i2b>
  40478a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40478c:	2b00      	cmp	r3, #0
  40478e:	4606      	mov	r6, r0
  404790:	f340 80e1 	ble.w	404956 <_dtoa_r+0x956>
  404794:	461a      	mov	r2, r3
  404796:	4601      	mov	r1, r0
  404798:	4620      	mov	r0, r4
  40479a:	f000 fdb3 	bl	405304 <__pow5mult>
  40479e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4047a0:	2b01      	cmp	r3, #1
  4047a2:	4606      	mov	r6, r0
  4047a4:	f340 80da 	ble.w	40495c <_dtoa_r+0x95c>
  4047a8:	2300      	movs	r3, #0
  4047aa:	9308      	str	r3, [sp, #32]
  4047ac:	6933      	ldr	r3, [r6, #16]
  4047ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4047b2:	6918      	ldr	r0, [r3, #16]
  4047b4:	f000 fcc2 	bl	40513c <__hi0bits>
  4047b8:	f1c0 0020 	rsb	r0, r0, #32
  4047bc:	9b07      	ldr	r3, [sp, #28]
  4047be:	4418      	add	r0, r3
  4047c0:	f010 001f 	ands.w	r0, r0, #31
  4047c4:	f000 80f0 	beq.w	4049a8 <_dtoa_r+0x9a8>
  4047c8:	f1c0 0320 	rsb	r3, r0, #32
  4047cc:	2b04      	cmp	r3, #4
  4047ce:	f340 80e2 	ble.w	404996 <_dtoa_r+0x996>
  4047d2:	9b07      	ldr	r3, [sp, #28]
  4047d4:	f1c0 001c 	rsb	r0, r0, #28
  4047d8:	4480      	add	r8, r0
  4047da:	4405      	add	r5, r0
  4047dc:	4403      	add	r3, r0
  4047de:	9307      	str	r3, [sp, #28]
  4047e0:	f1b8 0f00 	cmp.w	r8, #0
  4047e4:	dd05      	ble.n	4047f2 <_dtoa_r+0x7f2>
  4047e6:	4651      	mov	r1, sl
  4047e8:	4642      	mov	r2, r8
  4047ea:	4620      	mov	r0, r4
  4047ec:	f000 fdd8 	bl	4053a0 <__lshift>
  4047f0:	4682      	mov	sl, r0
  4047f2:	9b07      	ldr	r3, [sp, #28]
  4047f4:	2b00      	cmp	r3, #0
  4047f6:	dd05      	ble.n	404804 <_dtoa_r+0x804>
  4047f8:	4631      	mov	r1, r6
  4047fa:	461a      	mov	r2, r3
  4047fc:	4620      	mov	r0, r4
  4047fe:	f000 fdcf 	bl	4053a0 <__lshift>
  404802:	4606      	mov	r6, r0
  404804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404806:	2b00      	cmp	r3, #0
  404808:	f000 80d2 	beq.w	4049b0 <_dtoa_r+0x9b0>
  40480c:	4631      	mov	r1, r6
  40480e:	4650      	mov	r0, sl
  404810:	f000 fe17 	bl	405442 <__mcmp>
  404814:	2800      	cmp	r0, #0
  404816:	f280 80cb 	bge.w	4049b0 <_dtoa_r+0x9b0>
  40481a:	2300      	movs	r3, #0
  40481c:	4651      	mov	r1, sl
  40481e:	220a      	movs	r2, #10
  404820:	4620      	mov	r0, r4
  404822:	f000 fc50 	bl	4050c6 <__multadd>
  404826:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404828:	f10b 3bff 	add.w	fp, fp, #4294967295
  40482c:	4682      	mov	sl, r0
  40482e:	2b00      	cmp	r3, #0
  404830:	f000 81aa 	beq.w	404b88 <_dtoa_r+0xb88>
  404834:	2300      	movs	r3, #0
  404836:	4639      	mov	r1, r7
  404838:	220a      	movs	r2, #10
  40483a:	4620      	mov	r0, r4
  40483c:	f000 fc43 	bl	4050c6 <__multadd>
  404840:	9b04      	ldr	r3, [sp, #16]
  404842:	2b00      	cmp	r3, #0
  404844:	4607      	mov	r7, r0
  404846:	dc03      	bgt.n	404850 <_dtoa_r+0x850>
  404848:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40484a:	2b02      	cmp	r3, #2
  40484c:	f300 80b8 	bgt.w	4049c0 <_dtoa_r+0x9c0>
  404850:	2d00      	cmp	r5, #0
  404852:	dd05      	ble.n	404860 <_dtoa_r+0x860>
  404854:	4639      	mov	r1, r7
  404856:	462a      	mov	r2, r5
  404858:	4620      	mov	r0, r4
  40485a:	f000 fda1 	bl	4053a0 <__lshift>
  40485e:	4607      	mov	r7, r0
  404860:	9b08      	ldr	r3, [sp, #32]
  404862:	2b00      	cmp	r3, #0
  404864:	f000 8110 	beq.w	404a88 <_dtoa_r+0xa88>
  404868:	6879      	ldr	r1, [r7, #4]
  40486a:	4620      	mov	r0, r4
  40486c:	f000 fbe0 	bl	405030 <_Balloc>
  404870:	693a      	ldr	r2, [r7, #16]
  404872:	3202      	adds	r2, #2
  404874:	4605      	mov	r5, r0
  404876:	0092      	lsls	r2, r2, #2
  404878:	f107 010c 	add.w	r1, r7, #12
  40487c:	300c      	adds	r0, #12
  40487e:	f7fe fde9 	bl	403454 <memcpy>
  404882:	2201      	movs	r2, #1
  404884:	4629      	mov	r1, r5
  404886:	4620      	mov	r0, r4
  404888:	f000 fd8a 	bl	4053a0 <__lshift>
  40488c:	9b02      	ldr	r3, [sp, #8]
  40488e:	f8dd 8018 	ldr.w	r8, [sp, #24]
  404892:	9707      	str	r7, [sp, #28]
  404894:	f003 0301 	and.w	r3, r3, #1
  404898:	4607      	mov	r7, r0
  40489a:	9308      	str	r3, [sp, #32]
  40489c:	4631      	mov	r1, r6
  40489e:	4650      	mov	r0, sl
  4048a0:	f7ff fb20 	bl	403ee4 <quorem>
  4048a4:	9907      	ldr	r1, [sp, #28]
  4048a6:	4605      	mov	r5, r0
  4048a8:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4048ac:	4650      	mov	r0, sl
  4048ae:	f000 fdc8 	bl	405442 <__mcmp>
  4048b2:	463a      	mov	r2, r7
  4048b4:	9002      	str	r0, [sp, #8]
  4048b6:	4631      	mov	r1, r6
  4048b8:	4620      	mov	r0, r4
  4048ba:	f000 fddc 	bl	405476 <__mdiff>
  4048be:	68c3      	ldr	r3, [r0, #12]
  4048c0:	4602      	mov	r2, r0
  4048c2:	2b00      	cmp	r3, #0
  4048c4:	f040 80e2 	bne.w	404a8c <_dtoa_r+0xa8c>
  4048c8:	4601      	mov	r1, r0
  4048ca:	9009      	str	r0, [sp, #36]	; 0x24
  4048cc:	4650      	mov	r0, sl
  4048ce:	f000 fdb8 	bl	405442 <__mcmp>
  4048d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4048d4:	4603      	mov	r3, r0
  4048d6:	4611      	mov	r1, r2
  4048d8:	4620      	mov	r0, r4
  4048da:	9309      	str	r3, [sp, #36]	; 0x24
  4048dc:	f000 fbdc 	bl	405098 <_Bfree>
  4048e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4048e2:	2b00      	cmp	r3, #0
  4048e4:	f040 80d4 	bne.w	404a90 <_dtoa_r+0xa90>
  4048e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4048ea:	2a00      	cmp	r2, #0
  4048ec:	f040 80d0 	bne.w	404a90 <_dtoa_r+0xa90>
  4048f0:	9a08      	ldr	r2, [sp, #32]
  4048f2:	2a00      	cmp	r2, #0
  4048f4:	f040 80cc 	bne.w	404a90 <_dtoa_r+0xa90>
  4048f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4048fc:	f000 80e8 	beq.w	404ad0 <_dtoa_r+0xad0>
  404900:	9b02      	ldr	r3, [sp, #8]
  404902:	2b00      	cmp	r3, #0
  404904:	dd01      	ble.n	40490a <_dtoa_r+0x90a>
  404906:	f105 0931 	add.w	r9, r5, #49	; 0x31
  40490a:	f108 0501 	add.w	r5, r8, #1
  40490e:	f888 9000 	strb.w	r9, [r8]
  404912:	e06a      	b.n	4049ea <_dtoa_r+0x9ea>
  404914:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404916:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40491a:	e6f7      	b.n	40470c <_dtoa_r+0x70c>
  40491c:	9b08      	ldr	r3, [sp, #32]
  40491e:	f109 36ff 	add.w	r6, r9, #4294967295
  404922:	42b3      	cmp	r3, r6
  404924:	bfbf      	itttt	lt
  404926:	9b08      	ldrlt	r3, [sp, #32]
  404928:	9608      	strlt	r6, [sp, #32]
  40492a:	1af2      	sublt	r2, r6, r3
  40492c:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  40492e:	bfb7      	itett	lt
  404930:	189b      	addlt	r3, r3, r2
  404932:	1b9e      	subge	r6, r3, r6
  404934:	930c      	strlt	r3, [sp, #48]	; 0x30
  404936:	2600      	movlt	r6, #0
  404938:	f1b9 0f00 	cmp.w	r9, #0
  40493c:	bfb9      	ittee	lt
  40493e:	eba8 0509 	sublt.w	r5, r8, r9
  404942:	2300      	movlt	r3, #0
  404944:	4645      	movge	r5, r8
  404946:	464b      	movge	r3, r9
  404948:	e6e2      	b.n	404710 <_dtoa_r+0x710>
  40494a:	9e08      	ldr	r6, [sp, #32]
  40494c:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40494e:	4645      	mov	r5, r8
  404950:	e6e7      	b.n	404722 <_dtoa_r+0x722>
  404952:	9a08      	ldr	r2, [sp, #32]
  404954:	e710      	b.n	404778 <_dtoa_r+0x778>
  404956:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404958:	2b01      	cmp	r3, #1
  40495a:	dc18      	bgt.n	40498e <_dtoa_r+0x98e>
  40495c:	9b02      	ldr	r3, [sp, #8]
  40495e:	b9b3      	cbnz	r3, 40498e <_dtoa_r+0x98e>
  404960:	9b03      	ldr	r3, [sp, #12]
  404962:	f3c3 0313 	ubfx	r3, r3, #0, #20
  404966:	b9a3      	cbnz	r3, 404992 <_dtoa_r+0x992>
  404968:	9b03      	ldr	r3, [sp, #12]
  40496a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40496e:	0d1b      	lsrs	r3, r3, #20
  404970:	051b      	lsls	r3, r3, #20
  404972:	b12b      	cbz	r3, 404980 <_dtoa_r+0x980>
  404974:	9b07      	ldr	r3, [sp, #28]
  404976:	3301      	adds	r3, #1
  404978:	9307      	str	r3, [sp, #28]
  40497a:	f108 0801 	add.w	r8, r8, #1
  40497e:	2301      	movs	r3, #1
  404980:	9308      	str	r3, [sp, #32]
  404982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404984:	2b00      	cmp	r3, #0
  404986:	f47f af11 	bne.w	4047ac <_dtoa_r+0x7ac>
  40498a:	2001      	movs	r0, #1
  40498c:	e716      	b.n	4047bc <_dtoa_r+0x7bc>
  40498e:	2300      	movs	r3, #0
  404990:	e7f6      	b.n	404980 <_dtoa_r+0x980>
  404992:	9b02      	ldr	r3, [sp, #8]
  404994:	e7f4      	b.n	404980 <_dtoa_r+0x980>
  404996:	f43f af23 	beq.w	4047e0 <_dtoa_r+0x7e0>
  40499a:	9a07      	ldr	r2, [sp, #28]
  40499c:	331c      	adds	r3, #28
  40499e:	441a      	add	r2, r3
  4049a0:	4498      	add	r8, r3
  4049a2:	441d      	add	r5, r3
  4049a4:	4613      	mov	r3, r2
  4049a6:	e71a      	b.n	4047de <_dtoa_r+0x7de>
  4049a8:	4603      	mov	r3, r0
  4049aa:	e7f6      	b.n	40499a <_dtoa_r+0x99a>
  4049ac:	40240000 	.word	0x40240000
  4049b0:	f1b9 0f00 	cmp.w	r9, #0
  4049b4:	dc33      	bgt.n	404a1e <_dtoa_r+0xa1e>
  4049b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4049b8:	2b02      	cmp	r3, #2
  4049ba:	dd30      	ble.n	404a1e <_dtoa_r+0xa1e>
  4049bc:	f8cd 9010 	str.w	r9, [sp, #16]
  4049c0:	9b04      	ldr	r3, [sp, #16]
  4049c2:	b963      	cbnz	r3, 4049de <_dtoa_r+0x9de>
  4049c4:	4631      	mov	r1, r6
  4049c6:	2205      	movs	r2, #5
  4049c8:	4620      	mov	r0, r4
  4049ca:	f000 fb7c 	bl	4050c6 <__multadd>
  4049ce:	4601      	mov	r1, r0
  4049d0:	4606      	mov	r6, r0
  4049d2:	4650      	mov	r0, sl
  4049d4:	f000 fd35 	bl	405442 <__mcmp>
  4049d8:	2800      	cmp	r0, #0
  4049da:	f73f ad5c 	bgt.w	404496 <_dtoa_r+0x496>
  4049de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4049e0:	9d06      	ldr	r5, [sp, #24]
  4049e2:	ea6f 0b03 	mvn.w	fp, r3
  4049e6:	2300      	movs	r3, #0
  4049e8:	9307      	str	r3, [sp, #28]
  4049ea:	4631      	mov	r1, r6
  4049ec:	4620      	mov	r0, r4
  4049ee:	f000 fb53 	bl	405098 <_Bfree>
  4049f2:	2f00      	cmp	r7, #0
  4049f4:	f43f ae4b 	beq.w	40468e <_dtoa_r+0x68e>
  4049f8:	9b07      	ldr	r3, [sp, #28]
  4049fa:	b12b      	cbz	r3, 404a08 <_dtoa_r+0xa08>
  4049fc:	42bb      	cmp	r3, r7
  4049fe:	d003      	beq.n	404a08 <_dtoa_r+0xa08>
  404a00:	4619      	mov	r1, r3
  404a02:	4620      	mov	r0, r4
  404a04:	f000 fb48 	bl	405098 <_Bfree>
  404a08:	4639      	mov	r1, r7
  404a0a:	4620      	mov	r0, r4
  404a0c:	f000 fb44 	bl	405098 <_Bfree>
  404a10:	e63d      	b.n	40468e <_dtoa_r+0x68e>
  404a12:	2600      	movs	r6, #0
  404a14:	4637      	mov	r7, r6
  404a16:	e7e2      	b.n	4049de <_dtoa_r+0x9de>
  404a18:	46bb      	mov	fp, r7
  404a1a:	4637      	mov	r7, r6
  404a1c:	e53b      	b.n	404496 <_dtoa_r+0x496>
  404a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404a20:	f8cd 9010 	str.w	r9, [sp, #16]
  404a24:	2b00      	cmp	r3, #0
  404a26:	f47f af13 	bne.w	404850 <_dtoa_r+0x850>
  404a2a:	9d06      	ldr	r5, [sp, #24]
  404a2c:	4631      	mov	r1, r6
  404a2e:	4650      	mov	r0, sl
  404a30:	f7ff fa58 	bl	403ee4 <quorem>
  404a34:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404a38:	f805 9b01 	strb.w	r9, [r5], #1
  404a3c:	9b06      	ldr	r3, [sp, #24]
  404a3e:	9a04      	ldr	r2, [sp, #16]
  404a40:	1aeb      	subs	r3, r5, r3
  404a42:	429a      	cmp	r2, r3
  404a44:	f300 8083 	bgt.w	404b4e <_dtoa_r+0xb4e>
  404a48:	9b06      	ldr	r3, [sp, #24]
  404a4a:	2a01      	cmp	r2, #1
  404a4c:	bfac      	ite	ge
  404a4e:	189b      	addge	r3, r3, r2
  404a50:	3301      	addlt	r3, #1
  404a52:	4698      	mov	r8, r3
  404a54:	2300      	movs	r3, #0
  404a56:	9307      	str	r3, [sp, #28]
  404a58:	4651      	mov	r1, sl
  404a5a:	2201      	movs	r2, #1
  404a5c:	4620      	mov	r0, r4
  404a5e:	f000 fc9f 	bl	4053a0 <__lshift>
  404a62:	4631      	mov	r1, r6
  404a64:	4682      	mov	sl, r0
  404a66:	f000 fcec 	bl	405442 <__mcmp>
  404a6a:	2800      	cmp	r0, #0
  404a6c:	dc35      	bgt.n	404ada <_dtoa_r+0xada>
  404a6e:	d102      	bne.n	404a76 <_dtoa_r+0xa76>
  404a70:	f019 0f01 	tst.w	r9, #1
  404a74:	d131      	bne.n	404ada <_dtoa_r+0xada>
  404a76:	4645      	mov	r5, r8
  404a78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404a7c:	2b30      	cmp	r3, #48	; 0x30
  404a7e:	f105 32ff 	add.w	r2, r5, #4294967295
  404a82:	d1b2      	bne.n	4049ea <_dtoa_r+0x9ea>
  404a84:	4615      	mov	r5, r2
  404a86:	e7f7      	b.n	404a78 <_dtoa_r+0xa78>
  404a88:	4638      	mov	r0, r7
  404a8a:	e6ff      	b.n	40488c <_dtoa_r+0x88c>
  404a8c:	2301      	movs	r3, #1
  404a8e:	e722      	b.n	4048d6 <_dtoa_r+0x8d6>
  404a90:	9a02      	ldr	r2, [sp, #8]
  404a92:	2a00      	cmp	r2, #0
  404a94:	db04      	blt.n	404aa0 <_dtoa_r+0xaa0>
  404a96:	d129      	bne.n	404aec <_dtoa_r+0xaec>
  404a98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404a9a:	bb3a      	cbnz	r2, 404aec <_dtoa_r+0xaec>
  404a9c:	9a08      	ldr	r2, [sp, #32]
  404a9e:	bb2a      	cbnz	r2, 404aec <_dtoa_r+0xaec>
  404aa0:	2b00      	cmp	r3, #0
  404aa2:	f77f af32 	ble.w	40490a <_dtoa_r+0x90a>
  404aa6:	4651      	mov	r1, sl
  404aa8:	2201      	movs	r2, #1
  404aaa:	4620      	mov	r0, r4
  404aac:	f000 fc78 	bl	4053a0 <__lshift>
  404ab0:	4631      	mov	r1, r6
  404ab2:	4682      	mov	sl, r0
  404ab4:	f000 fcc5 	bl	405442 <__mcmp>
  404ab8:	2800      	cmp	r0, #0
  404aba:	dc05      	bgt.n	404ac8 <_dtoa_r+0xac8>
  404abc:	f47f af25 	bne.w	40490a <_dtoa_r+0x90a>
  404ac0:	f019 0f01 	tst.w	r9, #1
  404ac4:	f43f af21 	beq.w	40490a <_dtoa_r+0x90a>
  404ac8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404acc:	f47f af1b 	bne.w	404906 <_dtoa_r+0x906>
  404ad0:	2339      	movs	r3, #57	; 0x39
  404ad2:	f888 3000 	strb.w	r3, [r8]
  404ad6:	f108 0801 	add.w	r8, r8, #1
  404ada:	4645      	mov	r5, r8
  404adc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404ae0:	2b39      	cmp	r3, #57	; 0x39
  404ae2:	f105 32ff 	add.w	r2, r5, #4294967295
  404ae6:	d03a      	beq.n	404b5e <_dtoa_r+0xb5e>
  404ae8:	3301      	adds	r3, #1
  404aea:	e03f      	b.n	404b6c <_dtoa_r+0xb6c>
  404aec:	2b00      	cmp	r3, #0
  404aee:	f108 0501 	add.w	r5, r8, #1
  404af2:	dd05      	ble.n	404b00 <_dtoa_r+0xb00>
  404af4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404af8:	d0ea      	beq.n	404ad0 <_dtoa_r+0xad0>
  404afa:	f109 0901 	add.w	r9, r9, #1
  404afe:	e706      	b.n	40490e <_dtoa_r+0x90e>
  404b00:	9b06      	ldr	r3, [sp, #24]
  404b02:	9a04      	ldr	r2, [sp, #16]
  404b04:	f805 9c01 	strb.w	r9, [r5, #-1]
  404b08:	1aeb      	subs	r3, r5, r3
  404b0a:	4293      	cmp	r3, r2
  404b0c:	46a8      	mov	r8, r5
  404b0e:	d0a3      	beq.n	404a58 <_dtoa_r+0xa58>
  404b10:	4651      	mov	r1, sl
  404b12:	2300      	movs	r3, #0
  404b14:	220a      	movs	r2, #10
  404b16:	4620      	mov	r0, r4
  404b18:	f000 fad5 	bl	4050c6 <__multadd>
  404b1c:	9b07      	ldr	r3, [sp, #28]
  404b1e:	9907      	ldr	r1, [sp, #28]
  404b20:	42bb      	cmp	r3, r7
  404b22:	4682      	mov	sl, r0
  404b24:	f04f 0300 	mov.w	r3, #0
  404b28:	f04f 020a 	mov.w	r2, #10
  404b2c:	4620      	mov	r0, r4
  404b2e:	d104      	bne.n	404b3a <_dtoa_r+0xb3a>
  404b30:	f000 fac9 	bl	4050c6 <__multadd>
  404b34:	9007      	str	r0, [sp, #28]
  404b36:	4607      	mov	r7, r0
  404b38:	e6b0      	b.n	40489c <_dtoa_r+0x89c>
  404b3a:	f000 fac4 	bl	4050c6 <__multadd>
  404b3e:	2300      	movs	r3, #0
  404b40:	9007      	str	r0, [sp, #28]
  404b42:	220a      	movs	r2, #10
  404b44:	4639      	mov	r1, r7
  404b46:	4620      	mov	r0, r4
  404b48:	f000 fabd 	bl	4050c6 <__multadd>
  404b4c:	e7f3      	b.n	404b36 <_dtoa_r+0xb36>
  404b4e:	4651      	mov	r1, sl
  404b50:	2300      	movs	r3, #0
  404b52:	220a      	movs	r2, #10
  404b54:	4620      	mov	r0, r4
  404b56:	f000 fab6 	bl	4050c6 <__multadd>
  404b5a:	4682      	mov	sl, r0
  404b5c:	e766      	b.n	404a2c <_dtoa_r+0xa2c>
  404b5e:	9b06      	ldr	r3, [sp, #24]
  404b60:	4293      	cmp	r3, r2
  404b62:	d105      	bne.n	404b70 <_dtoa_r+0xb70>
  404b64:	9a06      	ldr	r2, [sp, #24]
  404b66:	f10b 0b01 	add.w	fp, fp, #1
  404b6a:	2331      	movs	r3, #49	; 0x31
  404b6c:	7013      	strb	r3, [r2, #0]
  404b6e:	e73c      	b.n	4049ea <_dtoa_r+0x9ea>
  404b70:	4615      	mov	r5, r2
  404b72:	e7b3      	b.n	404adc <_dtoa_r+0xadc>
  404b74:	4b09      	ldr	r3, [pc, #36]	; (404b9c <_dtoa_r+0xb9c>)
  404b76:	f7ff baa5 	b.w	4040c4 <_dtoa_r+0xc4>
  404b7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404b7c:	2b00      	cmp	r3, #0
  404b7e:	f47f aa7f 	bne.w	404080 <_dtoa_r+0x80>
  404b82:	4b07      	ldr	r3, [pc, #28]	; (404ba0 <_dtoa_r+0xba0>)
  404b84:	f7ff ba9e 	b.w	4040c4 <_dtoa_r+0xc4>
  404b88:	9b04      	ldr	r3, [sp, #16]
  404b8a:	2b00      	cmp	r3, #0
  404b8c:	f73f af4d 	bgt.w	404a2a <_dtoa_r+0xa2a>
  404b90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404b92:	2b02      	cmp	r3, #2
  404b94:	f77f af49 	ble.w	404a2a <_dtoa_r+0xa2a>
  404b98:	e712      	b.n	4049c0 <_dtoa_r+0x9c0>
  404b9a:	bf00      	nop
  404b9c:	004063b4 	.word	0x004063b4
  404ba0:	004063d8 	.word	0x004063d8

00404ba4 <__sflush_r>:
  404ba4:	898a      	ldrh	r2, [r1, #12]
  404ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404baa:	4605      	mov	r5, r0
  404bac:	0710      	lsls	r0, r2, #28
  404bae:	460c      	mov	r4, r1
  404bb0:	d45a      	bmi.n	404c68 <__sflush_r+0xc4>
  404bb2:	684b      	ldr	r3, [r1, #4]
  404bb4:	2b00      	cmp	r3, #0
  404bb6:	dc05      	bgt.n	404bc4 <__sflush_r+0x20>
  404bb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  404bba:	2b00      	cmp	r3, #0
  404bbc:	dc02      	bgt.n	404bc4 <__sflush_r+0x20>
  404bbe:	2000      	movs	r0, #0
  404bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404bc6:	2e00      	cmp	r6, #0
  404bc8:	d0f9      	beq.n	404bbe <__sflush_r+0x1a>
  404bca:	2300      	movs	r3, #0
  404bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  404bd0:	682f      	ldr	r7, [r5, #0]
  404bd2:	602b      	str	r3, [r5, #0]
  404bd4:	d033      	beq.n	404c3e <__sflush_r+0x9a>
  404bd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
  404bd8:	89a3      	ldrh	r3, [r4, #12]
  404bda:	075a      	lsls	r2, r3, #29
  404bdc:	d505      	bpl.n	404bea <__sflush_r+0x46>
  404bde:	6863      	ldr	r3, [r4, #4]
  404be0:	1ac0      	subs	r0, r0, r3
  404be2:	6b63      	ldr	r3, [r4, #52]	; 0x34
  404be4:	b10b      	cbz	r3, 404bea <__sflush_r+0x46>
  404be6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  404be8:	1ac0      	subs	r0, r0, r3
  404bea:	2300      	movs	r3, #0
  404bec:	4602      	mov	r2, r0
  404bee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404bf0:	6a21      	ldr	r1, [r4, #32]
  404bf2:	4628      	mov	r0, r5
  404bf4:	47b0      	blx	r6
  404bf6:	1c43      	adds	r3, r0, #1
  404bf8:	89a3      	ldrh	r3, [r4, #12]
  404bfa:	d106      	bne.n	404c0a <__sflush_r+0x66>
  404bfc:	6829      	ldr	r1, [r5, #0]
  404bfe:	291d      	cmp	r1, #29
  404c00:	d84b      	bhi.n	404c9a <__sflush_r+0xf6>
  404c02:	4a2b      	ldr	r2, [pc, #172]	; (404cb0 <__sflush_r+0x10c>)
  404c04:	40ca      	lsrs	r2, r1
  404c06:	07d6      	lsls	r6, r2, #31
  404c08:	d547      	bpl.n	404c9a <__sflush_r+0xf6>
  404c0a:	2200      	movs	r2, #0
  404c0c:	6062      	str	r2, [r4, #4]
  404c0e:	04d9      	lsls	r1, r3, #19
  404c10:	6922      	ldr	r2, [r4, #16]
  404c12:	6022      	str	r2, [r4, #0]
  404c14:	d504      	bpl.n	404c20 <__sflush_r+0x7c>
  404c16:	1c42      	adds	r2, r0, #1
  404c18:	d101      	bne.n	404c1e <__sflush_r+0x7a>
  404c1a:	682b      	ldr	r3, [r5, #0]
  404c1c:	b903      	cbnz	r3, 404c20 <__sflush_r+0x7c>
  404c1e:	6560      	str	r0, [r4, #84]	; 0x54
  404c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
  404c22:	602f      	str	r7, [r5, #0]
  404c24:	2900      	cmp	r1, #0
  404c26:	d0ca      	beq.n	404bbe <__sflush_r+0x1a>
  404c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404c2c:	4299      	cmp	r1, r3
  404c2e:	d002      	beq.n	404c36 <__sflush_r+0x92>
  404c30:	4628      	mov	r0, r5
  404c32:	f000 fcdb 	bl	4055ec <_free_r>
  404c36:	2000      	movs	r0, #0
  404c38:	6360      	str	r0, [r4, #52]	; 0x34
  404c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c3e:	6a21      	ldr	r1, [r4, #32]
  404c40:	2301      	movs	r3, #1
  404c42:	4628      	mov	r0, r5
  404c44:	47b0      	blx	r6
  404c46:	1c41      	adds	r1, r0, #1
  404c48:	d1c6      	bne.n	404bd8 <__sflush_r+0x34>
  404c4a:	682b      	ldr	r3, [r5, #0]
  404c4c:	2b00      	cmp	r3, #0
  404c4e:	d0c3      	beq.n	404bd8 <__sflush_r+0x34>
  404c50:	2b1d      	cmp	r3, #29
  404c52:	d001      	beq.n	404c58 <__sflush_r+0xb4>
  404c54:	2b16      	cmp	r3, #22
  404c56:	d101      	bne.n	404c5c <__sflush_r+0xb8>
  404c58:	602f      	str	r7, [r5, #0]
  404c5a:	e7b0      	b.n	404bbe <__sflush_r+0x1a>
  404c5c:	89a3      	ldrh	r3, [r4, #12]
  404c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404c62:	81a3      	strh	r3, [r4, #12]
  404c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c68:	690f      	ldr	r7, [r1, #16]
  404c6a:	2f00      	cmp	r7, #0
  404c6c:	d0a7      	beq.n	404bbe <__sflush_r+0x1a>
  404c6e:	0793      	lsls	r3, r2, #30
  404c70:	680e      	ldr	r6, [r1, #0]
  404c72:	bf08      	it	eq
  404c74:	694b      	ldreq	r3, [r1, #20]
  404c76:	600f      	str	r7, [r1, #0]
  404c78:	bf18      	it	ne
  404c7a:	2300      	movne	r3, #0
  404c7c:	eba6 0807 	sub.w	r8, r6, r7
  404c80:	608b      	str	r3, [r1, #8]
  404c82:	f1b8 0f00 	cmp.w	r8, #0
  404c86:	dd9a      	ble.n	404bbe <__sflush_r+0x1a>
  404c88:	4643      	mov	r3, r8
  404c8a:	463a      	mov	r2, r7
  404c8c:	6a21      	ldr	r1, [r4, #32]
  404c8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  404c90:	4628      	mov	r0, r5
  404c92:	47b0      	blx	r6
  404c94:	2800      	cmp	r0, #0
  404c96:	dc07      	bgt.n	404ca8 <__sflush_r+0x104>
  404c98:	89a3      	ldrh	r3, [r4, #12]
  404c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404c9e:	81a3      	strh	r3, [r4, #12]
  404ca0:	f04f 30ff 	mov.w	r0, #4294967295
  404ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404ca8:	4407      	add	r7, r0
  404caa:	eba8 0800 	sub.w	r8, r8, r0
  404cae:	e7e8      	b.n	404c82 <__sflush_r+0xde>
  404cb0:	20400001 	.word	0x20400001

00404cb4 <_fflush_r>:
  404cb4:	b538      	push	{r3, r4, r5, lr}
  404cb6:	690b      	ldr	r3, [r1, #16]
  404cb8:	4605      	mov	r5, r0
  404cba:	460c      	mov	r4, r1
  404cbc:	b1db      	cbz	r3, 404cf6 <_fflush_r+0x42>
  404cbe:	b118      	cbz	r0, 404cc8 <_fflush_r+0x14>
  404cc0:	6983      	ldr	r3, [r0, #24]
  404cc2:	b90b      	cbnz	r3, 404cc8 <_fflush_r+0x14>
  404cc4:	f000 f860 	bl	404d88 <__sinit>
  404cc8:	4b0c      	ldr	r3, [pc, #48]	; (404cfc <_fflush_r+0x48>)
  404cca:	429c      	cmp	r4, r3
  404ccc:	d109      	bne.n	404ce2 <_fflush_r+0x2e>
  404cce:	686c      	ldr	r4, [r5, #4]
  404cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404cd4:	b17b      	cbz	r3, 404cf6 <_fflush_r+0x42>
  404cd6:	4621      	mov	r1, r4
  404cd8:	4628      	mov	r0, r5
  404cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404cde:	f7ff bf61 	b.w	404ba4 <__sflush_r>
  404ce2:	4b07      	ldr	r3, [pc, #28]	; (404d00 <_fflush_r+0x4c>)
  404ce4:	429c      	cmp	r4, r3
  404ce6:	d101      	bne.n	404cec <_fflush_r+0x38>
  404ce8:	68ac      	ldr	r4, [r5, #8]
  404cea:	e7f1      	b.n	404cd0 <_fflush_r+0x1c>
  404cec:	4b05      	ldr	r3, [pc, #20]	; (404d04 <_fflush_r+0x50>)
  404cee:	429c      	cmp	r4, r3
  404cf0:	bf08      	it	eq
  404cf2:	68ec      	ldreq	r4, [r5, #12]
  404cf4:	e7ec      	b.n	404cd0 <_fflush_r+0x1c>
  404cf6:	2000      	movs	r0, #0
  404cf8:	bd38      	pop	{r3, r4, r5, pc}
  404cfa:	bf00      	nop
  404cfc:	00406408 	.word	0x00406408
  404d00:	00406428 	.word	0x00406428
  404d04:	004063e8 	.word	0x004063e8

00404d08 <_cleanup_r>:
  404d08:	4901      	ldr	r1, [pc, #4]	; (404d10 <_cleanup_r+0x8>)
  404d0a:	f000 b8a9 	b.w	404e60 <_fwalk_reent>
  404d0e:	bf00      	nop
  404d10:	00404cb5 	.word	0x00404cb5

00404d14 <std.isra.0>:
  404d14:	2300      	movs	r3, #0
  404d16:	b510      	push	{r4, lr}
  404d18:	4604      	mov	r4, r0
  404d1a:	6003      	str	r3, [r0, #0]
  404d1c:	6043      	str	r3, [r0, #4]
  404d1e:	6083      	str	r3, [r0, #8]
  404d20:	8181      	strh	r1, [r0, #12]
  404d22:	6643      	str	r3, [r0, #100]	; 0x64
  404d24:	81c2      	strh	r2, [r0, #14]
  404d26:	6103      	str	r3, [r0, #16]
  404d28:	6143      	str	r3, [r0, #20]
  404d2a:	6183      	str	r3, [r0, #24]
  404d2c:	4619      	mov	r1, r3
  404d2e:	2208      	movs	r2, #8
  404d30:	305c      	adds	r0, #92	; 0x5c
  404d32:	f7fe fb9a 	bl	40346a <memset>
  404d36:	4b05      	ldr	r3, [pc, #20]	; (404d4c <std.isra.0+0x38>)
  404d38:	6263      	str	r3, [r4, #36]	; 0x24
  404d3a:	4b05      	ldr	r3, [pc, #20]	; (404d50 <std.isra.0+0x3c>)
  404d3c:	62a3      	str	r3, [r4, #40]	; 0x28
  404d3e:	4b05      	ldr	r3, [pc, #20]	; (404d54 <std.isra.0+0x40>)
  404d40:	62e3      	str	r3, [r4, #44]	; 0x2c
  404d42:	4b05      	ldr	r3, [pc, #20]	; (404d58 <std.isra.0+0x44>)
  404d44:	6224      	str	r4, [r4, #32]
  404d46:	6323      	str	r3, [r4, #48]	; 0x30
  404d48:	bd10      	pop	{r4, pc}
  404d4a:	bf00      	nop
  404d4c:	004059e1 	.word	0x004059e1
  404d50:	00405a03 	.word	0x00405a03
  404d54:	00405a3b 	.word	0x00405a3b
  404d58:	00405a5f 	.word	0x00405a5f

00404d5c <__sfmoreglue>:
  404d5c:	b570      	push	{r4, r5, r6, lr}
  404d5e:	1e4a      	subs	r2, r1, #1
  404d60:	2568      	movs	r5, #104	; 0x68
  404d62:	4355      	muls	r5, r2
  404d64:	460e      	mov	r6, r1
  404d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
  404d6a:	f000 fc8d 	bl	405688 <_malloc_r>
  404d6e:	4604      	mov	r4, r0
  404d70:	b140      	cbz	r0, 404d84 <__sfmoreglue+0x28>
  404d72:	2100      	movs	r1, #0
  404d74:	e880 0042 	stmia.w	r0, {r1, r6}
  404d78:	300c      	adds	r0, #12
  404d7a:	60a0      	str	r0, [r4, #8]
  404d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404d80:	f7fe fb73 	bl	40346a <memset>
  404d84:	4620      	mov	r0, r4
  404d86:	bd70      	pop	{r4, r5, r6, pc}

00404d88 <__sinit>:
  404d88:	6983      	ldr	r3, [r0, #24]
  404d8a:	b510      	push	{r4, lr}
  404d8c:	4604      	mov	r4, r0
  404d8e:	bb33      	cbnz	r3, 404dde <__sinit+0x56>
  404d90:	6483      	str	r3, [r0, #72]	; 0x48
  404d92:	64c3      	str	r3, [r0, #76]	; 0x4c
  404d94:	6503      	str	r3, [r0, #80]	; 0x50
  404d96:	4b12      	ldr	r3, [pc, #72]	; (404de0 <__sinit+0x58>)
  404d98:	4a12      	ldr	r2, [pc, #72]	; (404de4 <__sinit+0x5c>)
  404d9a:	681b      	ldr	r3, [r3, #0]
  404d9c:	6282      	str	r2, [r0, #40]	; 0x28
  404d9e:	4298      	cmp	r0, r3
  404da0:	bf04      	itt	eq
  404da2:	2301      	moveq	r3, #1
  404da4:	6183      	streq	r3, [r0, #24]
  404da6:	f000 f81f 	bl	404de8 <__sfp>
  404daa:	6060      	str	r0, [r4, #4]
  404dac:	4620      	mov	r0, r4
  404dae:	f000 f81b 	bl	404de8 <__sfp>
  404db2:	60a0      	str	r0, [r4, #8]
  404db4:	4620      	mov	r0, r4
  404db6:	f000 f817 	bl	404de8 <__sfp>
  404dba:	2200      	movs	r2, #0
  404dbc:	60e0      	str	r0, [r4, #12]
  404dbe:	2104      	movs	r1, #4
  404dc0:	6860      	ldr	r0, [r4, #4]
  404dc2:	f7ff ffa7 	bl	404d14 <std.isra.0>
  404dc6:	2201      	movs	r2, #1
  404dc8:	2109      	movs	r1, #9
  404dca:	68a0      	ldr	r0, [r4, #8]
  404dcc:	f7ff ffa2 	bl	404d14 <std.isra.0>
  404dd0:	2202      	movs	r2, #2
  404dd2:	2112      	movs	r1, #18
  404dd4:	68e0      	ldr	r0, [r4, #12]
  404dd6:	f7ff ff9d 	bl	404d14 <std.isra.0>
  404dda:	2301      	movs	r3, #1
  404ddc:	61a3      	str	r3, [r4, #24]
  404dde:	bd10      	pop	{r4, pc}
  404de0:	004063a0 	.word	0x004063a0
  404de4:	00404d09 	.word	0x00404d09

00404de8 <__sfp>:
  404de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404dea:	4b1c      	ldr	r3, [pc, #112]	; (404e5c <__sfp+0x74>)
  404dec:	681e      	ldr	r6, [r3, #0]
  404dee:	69b3      	ldr	r3, [r6, #24]
  404df0:	4607      	mov	r7, r0
  404df2:	b913      	cbnz	r3, 404dfa <__sfp+0x12>
  404df4:	4630      	mov	r0, r6
  404df6:	f7ff ffc7 	bl	404d88 <__sinit>
  404dfa:	3648      	adds	r6, #72	; 0x48
  404dfc:	68b4      	ldr	r4, [r6, #8]
  404dfe:	6873      	ldr	r3, [r6, #4]
  404e00:	3b01      	subs	r3, #1
  404e02:	d503      	bpl.n	404e0c <__sfp+0x24>
  404e04:	6833      	ldr	r3, [r6, #0]
  404e06:	b133      	cbz	r3, 404e16 <__sfp+0x2e>
  404e08:	6836      	ldr	r6, [r6, #0]
  404e0a:	e7f7      	b.n	404dfc <__sfp+0x14>
  404e0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  404e10:	b16d      	cbz	r5, 404e2e <__sfp+0x46>
  404e12:	3468      	adds	r4, #104	; 0x68
  404e14:	e7f4      	b.n	404e00 <__sfp+0x18>
  404e16:	2104      	movs	r1, #4
  404e18:	4638      	mov	r0, r7
  404e1a:	f7ff ff9f 	bl	404d5c <__sfmoreglue>
  404e1e:	6030      	str	r0, [r6, #0]
  404e20:	2800      	cmp	r0, #0
  404e22:	d1f1      	bne.n	404e08 <__sfp+0x20>
  404e24:	230c      	movs	r3, #12
  404e26:	603b      	str	r3, [r7, #0]
  404e28:	4604      	mov	r4, r0
  404e2a:	4620      	mov	r0, r4
  404e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404e32:	81e3      	strh	r3, [r4, #14]
  404e34:	2301      	movs	r3, #1
  404e36:	81a3      	strh	r3, [r4, #12]
  404e38:	6665      	str	r5, [r4, #100]	; 0x64
  404e3a:	6025      	str	r5, [r4, #0]
  404e3c:	60a5      	str	r5, [r4, #8]
  404e3e:	6065      	str	r5, [r4, #4]
  404e40:	6125      	str	r5, [r4, #16]
  404e42:	6165      	str	r5, [r4, #20]
  404e44:	61a5      	str	r5, [r4, #24]
  404e46:	2208      	movs	r2, #8
  404e48:	4629      	mov	r1, r5
  404e4a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  404e4e:	f7fe fb0c 	bl	40346a <memset>
  404e52:	6365      	str	r5, [r4, #52]	; 0x34
  404e54:	63a5      	str	r5, [r4, #56]	; 0x38
  404e56:	64a5      	str	r5, [r4, #72]	; 0x48
  404e58:	64e5      	str	r5, [r4, #76]	; 0x4c
  404e5a:	e7e6      	b.n	404e2a <__sfp+0x42>
  404e5c:	004063a0 	.word	0x004063a0

00404e60 <_fwalk_reent>:
  404e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404e64:	4680      	mov	r8, r0
  404e66:	4689      	mov	r9, r1
  404e68:	f100 0448 	add.w	r4, r0, #72	; 0x48
  404e6c:	2600      	movs	r6, #0
  404e6e:	b914      	cbnz	r4, 404e76 <_fwalk_reent+0x16>
  404e70:	4630      	mov	r0, r6
  404e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404e76:	68a5      	ldr	r5, [r4, #8]
  404e78:	6867      	ldr	r7, [r4, #4]
  404e7a:	3f01      	subs	r7, #1
  404e7c:	d501      	bpl.n	404e82 <_fwalk_reent+0x22>
  404e7e:	6824      	ldr	r4, [r4, #0]
  404e80:	e7f5      	b.n	404e6e <_fwalk_reent+0xe>
  404e82:	89ab      	ldrh	r3, [r5, #12]
  404e84:	2b01      	cmp	r3, #1
  404e86:	d907      	bls.n	404e98 <_fwalk_reent+0x38>
  404e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  404e8c:	3301      	adds	r3, #1
  404e8e:	d003      	beq.n	404e98 <_fwalk_reent+0x38>
  404e90:	4629      	mov	r1, r5
  404e92:	4640      	mov	r0, r8
  404e94:	47c8      	blx	r9
  404e96:	4306      	orrs	r6, r0
  404e98:	3568      	adds	r5, #104	; 0x68
  404e9a:	e7ee      	b.n	404e7a <_fwalk_reent+0x1a>

00404e9c <_localeconv_r>:
  404e9c:	4b04      	ldr	r3, [pc, #16]	; (404eb0 <_localeconv_r+0x14>)
  404e9e:	681b      	ldr	r3, [r3, #0]
  404ea0:	6a18      	ldr	r0, [r3, #32]
  404ea2:	4b04      	ldr	r3, [pc, #16]	; (404eb4 <_localeconv_r+0x18>)
  404ea4:	2800      	cmp	r0, #0
  404ea6:	bf08      	it	eq
  404ea8:	4618      	moveq	r0, r3
  404eaa:	30f0      	adds	r0, #240	; 0xf0
  404eac:	4770      	bx	lr
  404eae:	bf00      	nop
  404eb0:	20400048 	.word	0x20400048
  404eb4:	204000ac 	.word	0x204000ac

00404eb8 <__swhatbuf_r>:
  404eb8:	b570      	push	{r4, r5, r6, lr}
  404eba:	460e      	mov	r6, r1
  404ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404ec0:	2900      	cmp	r1, #0
  404ec2:	b090      	sub	sp, #64	; 0x40
  404ec4:	4614      	mov	r4, r2
  404ec6:	461d      	mov	r5, r3
  404ec8:	da07      	bge.n	404eda <__swhatbuf_r+0x22>
  404eca:	2300      	movs	r3, #0
  404ecc:	602b      	str	r3, [r5, #0]
  404ece:	89b3      	ldrh	r3, [r6, #12]
  404ed0:	061a      	lsls	r2, r3, #24
  404ed2:	d410      	bmi.n	404ef6 <__swhatbuf_r+0x3e>
  404ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404ed8:	e00e      	b.n	404ef8 <__swhatbuf_r+0x40>
  404eda:	aa01      	add	r2, sp, #4
  404edc:	f000 fea6 	bl	405c2c <_fstat_r>
  404ee0:	2800      	cmp	r0, #0
  404ee2:	dbf2      	blt.n	404eca <__swhatbuf_r+0x12>
  404ee4:	9a02      	ldr	r2, [sp, #8]
  404ee6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404eea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  404eee:	425a      	negs	r2, r3
  404ef0:	415a      	adcs	r2, r3
  404ef2:	602a      	str	r2, [r5, #0]
  404ef4:	e7ee      	b.n	404ed4 <__swhatbuf_r+0x1c>
  404ef6:	2340      	movs	r3, #64	; 0x40
  404ef8:	2000      	movs	r0, #0
  404efa:	6023      	str	r3, [r4, #0]
  404efc:	b010      	add	sp, #64	; 0x40
  404efe:	bd70      	pop	{r4, r5, r6, pc}

00404f00 <__smakebuf_r>:
  404f00:	898b      	ldrh	r3, [r1, #12]
  404f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
  404f04:	079d      	lsls	r5, r3, #30
  404f06:	4606      	mov	r6, r0
  404f08:	460c      	mov	r4, r1
  404f0a:	d507      	bpl.n	404f1c <__smakebuf_r+0x1c>
  404f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
  404f10:	6023      	str	r3, [r4, #0]
  404f12:	6123      	str	r3, [r4, #16]
  404f14:	2301      	movs	r3, #1
  404f16:	6163      	str	r3, [r4, #20]
  404f18:	b002      	add	sp, #8
  404f1a:	bd70      	pop	{r4, r5, r6, pc}
  404f1c:	ab01      	add	r3, sp, #4
  404f1e:	466a      	mov	r2, sp
  404f20:	f7ff ffca 	bl	404eb8 <__swhatbuf_r>
  404f24:	9900      	ldr	r1, [sp, #0]
  404f26:	4605      	mov	r5, r0
  404f28:	4630      	mov	r0, r6
  404f2a:	f000 fbad 	bl	405688 <_malloc_r>
  404f2e:	b948      	cbnz	r0, 404f44 <__smakebuf_r+0x44>
  404f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f34:	059a      	lsls	r2, r3, #22
  404f36:	d4ef      	bmi.n	404f18 <__smakebuf_r+0x18>
  404f38:	f023 0303 	bic.w	r3, r3, #3
  404f3c:	f043 0302 	orr.w	r3, r3, #2
  404f40:	81a3      	strh	r3, [r4, #12]
  404f42:	e7e3      	b.n	404f0c <__smakebuf_r+0xc>
  404f44:	4b0d      	ldr	r3, [pc, #52]	; (404f7c <__smakebuf_r+0x7c>)
  404f46:	62b3      	str	r3, [r6, #40]	; 0x28
  404f48:	89a3      	ldrh	r3, [r4, #12]
  404f4a:	6020      	str	r0, [r4, #0]
  404f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404f50:	81a3      	strh	r3, [r4, #12]
  404f52:	9b00      	ldr	r3, [sp, #0]
  404f54:	6163      	str	r3, [r4, #20]
  404f56:	9b01      	ldr	r3, [sp, #4]
  404f58:	6120      	str	r0, [r4, #16]
  404f5a:	b15b      	cbz	r3, 404f74 <__smakebuf_r+0x74>
  404f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404f60:	4630      	mov	r0, r6
  404f62:	f000 fe75 	bl	405c50 <_isatty_r>
  404f66:	b128      	cbz	r0, 404f74 <__smakebuf_r+0x74>
  404f68:	89a3      	ldrh	r3, [r4, #12]
  404f6a:	f023 0303 	bic.w	r3, r3, #3
  404f6e:	f043 0301 	orr.w	r3, r3, #1
  404f72:	81a3      	strh	r3, [r4, #12]
  404f74:	89a3      	ldrh	r3, [r4, #12]
  404f76:	431d      	orrs	r5, r3
  404f78:	81a5      	strh	r5, [r4, #12]
  404f7a:	e7cd      	b.n	404f18 <__smakebuf_r+0x18>
  404f7c:	00404d09 	.word	0x00404d09

00404f80 <malloc>:
  404f80:	4b02      	ldr	r3, [pc, #8]	; (404f8c <malloc+0xc>)
  404f82:	4601      	mov	r1, r0
  404f84:	6818      	ldr	r0, [r3, #0]
  404f86:	f000 bb7f 	b.w	405688 <_malloc_r>
  404f8a:	bf00      	nop
  404f8c:	20400048 	.word	0x20400048

00404f90 <memchr>:
  404f90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404f94:	2a10      	cmp	r2, #16
  404f96:	db2b      	blt.n	404ff0 <memchr+0x60>
  404f98:	f010 0f07 	tst.w	r0, #7
  404f9c:	d008      	beq.n	404fb0 <memchr+0x20>
  404f9e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404fa2:	3a01      	subs	r2, #1
  404fa4:	428b      	cmp	r3, r1
  404fa6:	d02d      	beq.n	405004 <memchr+0x74>
  404fa8:	f010 0f07 	tst.w	r0, #7
  404fac:	b342      	cbz	r2, 405000 <memchr+0x70>
  404fae:	d1f6      	bne.n	404f9e <memchr+0xe>
  404fb0:	b4f0      	push	{r4, r5, r6, r7}
  404fb2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404fb6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404fba:	f022 0407 	bic.w	r4, r2, #7
  404fbe:	f07f 0700 	mvns.w	r7, #0
  404fc2:	2300      	movs	r3, #0
  404fc4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404fc8:	3c08      	subs	r4, #8
  404fca:	ea85 0501 	eor.w	r5, r5, r1
  404fce:	ea86 0601 	eor.w	r6, r6, r1
  404fd2:	fa85 f547 	uadd8	r5, r5, r7
  404fd6:	faa3 f587 	sel	r5, r3, r7
  404fda:	fa86 f647 	uadd8	r6, r6, r7
  404fde:	faa5 f687 	sel	r6, r5, r7
  404fe2:	b98e      	cbnz	r6, 405008 <memchr+0x78>
  404fe4:	d1ee      	bne.n	404fc4 <memchr+0x34>
  404fe6:	bcf0      	pop	{r4, r5, r6, r7}
  404fe8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404fec:	f002 0207 	and.w	r2, r2, #7
  404ff0:	b132      	cbz	r2, 405000 <memchr+0x70>
  404ff2:	f810 3b01 	ldrb.w	r3, [r0], #1
  404ff6:	3a01      	subs	r2, #1
  404ff8:	ea83 0301 	eor.w	r3, r3, r1
  404ffc:	b113      	cbz	r3, 405004 <memchr+0x74>
  404ffe:	d1f8      	bne.n	404ff2 <memchr+0x62>
  405000:	2000      	movs	r0, #0
  405002:	4770      	bx	lr
  405004:	3801      	subs	r0, #1
  405006:	4770      	bx	lr
  405008:	2d00      	cmp	r5, #0
  40500a:	bf06      	itte	eq
  40500c:	4635      	moveq	r5, r6
  40500e:	3803      	subeq	r0, #3
  405010:	3807      	subne	r0, #7
  405012:	f015 0f01 	tst.w	r5, #1
  405016:	d107      	bne.n	405028 <memchr+0x98>
  405018:	3001      	adds	r0, #1
  40501a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40501e:	bf02      	ittt	eq
  405020:	3001      	addeq	r0, #1
  405022:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405026:	3001      	addeq	r0, #1
  405028:	bcf0      	pop	{r4, r5, r6, r7}
  40502a:	3801      	subs	r0, #1
  40502c:	4770      	bx	lr
  40502e:	bf00      	nop

00405030 <_Balloc>:
  405030:	b570      	push	{r4, r5, r6, lr}
  405032:	6a45      	ldr	r5, [r0, #36]	; 0x24
  405034:	4604      	mov	r4, r0
  405036:	460e      	mov	r6, r1
  405038:	b93d      	cbnz	r5, 40504a <_Balloc+0x1a>
  40503a:	2010      	movs	r0, #16
  40503c:	f7ff ffa0 	bl	404f80 <malloc>
  405040:	6260      	str	r0, [r4, #36]	; 0x24
  405042:	6045      	str	r5, [r0, #4]
  405044:	6085      	str	r5, [r0, #8]
  405046:	6005      	str	r5, [r0, #0]
  405048:	60c5      	str	r5, [r0, #12]
  40504a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40504c:	68eb      	ldr	r3, [r5, #12]
  40504e:	b183      	cbz	r3, 405072 <_Balloc+0x42>
  405050:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405052:	68db      	ldr	r3, [r3, #12]
  405054:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  405058:	b9b8      	cbnz	r0, 40508a <_Balloc+0x5a>
  40505a:	2101      	movs	r1, #1
  40505c:	fa01 f506 	lsl.w	r5, r1, r6
  405060:	1d6a      	adds	r2, r5, #5
  405062:	0092      	lsls	r2, r2, #2
  405064:	4620      	mov	r0, r4
  405066:	f000 fab3 	bl	4055d0 <_calloc_r>
  40506a:	b160      	cbz	r0, 405086 <_Balloc+0x56>
  40506c:	6046      	str	r6, [r0, #4]
  40506e:	6085      	str	r5, [r0, #8]
  405070:	e00e      	b.n	405090 <_Balloc+0x60>
  405072:	2221      	movs	r2, #33	; 0x21
  405074:	2104      	movs	r1, #4
  405076:	4620      	mov	r0, r4
  405078:	f000 faaa 	bl	4055d0 <_calloc_r>
  40507c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40507e:	60e8      	str	r0, [r5, #12]
  405080:	68db      	ldr	r3, [r3, #12]
  405082:	2b00      	cmp	r3, #0
  405084:	d1e4      	bne.n	405050 <_Balloc+0x20>
  405086:	2000      	movs	r0, #0
  405088:	bd70      	pop	{r4, r5, r6, pc}
  40508a:	6802      	ldr	r2, [r0, #0]
  40508c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  405090:	2300      	movs	r3, #0
  405092:	6103      	str	r3, [r0, #16]
  405094:	60c3      	str	r3, [r0, #12]
  405096:	bd70      	pop	{r4, r5, r6, pc}

00405098 <_Bfree>:
  405098:	b570      	push	{r4, r5, r6, lr}
  40509a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40509c:	4606      	mov	r6, r0
  40509e:	460d      	mov	r5, r1
  4050a0:	b93c      	cbnz	r4, 4050b2 <_Bfree+0x1a>
  4050a2:	2010      	movs	r0, #16
  4050a4:	f7ff ff6c 	bl	404f80 <malloc>
  4050a8:	6270      	str	r0, [r6, #36]	; 0x24
  4050aa:	6044      	str	r4, [r0, #4]
  4050ac:	6084      	str	r4, [r0, #8]
  4050ae:	6004      	str	r4, [r0, #0]
  4050b0:	60c4      	str	r4, [r0, #12]
  4050b2:	b13d      	cbz	r5, 4050c4 <_Bfree+0x2c>
  4050b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4050b6:	686a      	ldr	r2, [r5, #4]
  4050b8:	68db      	ldr	r3, [r3, #12]
  4050ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4050be:	6029      	str	r1, [r5, #0]
  4050c0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4050c4:	bd70      	pop	{r4, r5, r6, pc}

004050c6 <__multadd>:
  4050c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4050ca:	690d      	ldr	r5, [r1, #16]
  4050cc:	461f      	mov	r7, r3
  4050ce:	4606      	mov	r6, r0
  4050d0:	460c      	mov	r4, r1
  4050d2:	f101 0e14 	add.w	lr, r1, #20
  4050d6:	2300      	movs	r3, #0
  4050d8:	f8de 0000 	ldr.w	r0, [lr]
  4050dc:	b281      	uxth	r1, r0
  4050de:	fb02 7101 	mla	r1, r2, r1, r7
  4050e2:	0c0f      	lsrs	r7, r1, #16
  4050e4:	0c00      	lsrs	r0, r0, #16
  4050e6:	fb02 7000 	mla	r0, r2, r0, r7
  4050ea:	b289      	uxth	r1, r1
  4050ec:	3301      	adds	r3, #1
  4050ee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  4050f2:	429d      	cmp	r5, r3
  4050f4:	ea4f 4710 	mov.w	r7, r0, lsr #16
  4050f8:	f84e 1b04 	str.w	r1, [lr], #4
  4050fc:	dcec      	bgt.n	4050d8 <__multadd+0x12>
  4050fe:	b1d7      	cbz	r7, 405136 <__multadd+0x70>
  405100:	68a3      	ldr	r3, [r4, #8]
  405102:	429d      	cmp	r5, r3
  405104:	db12      	blt.n	40512c <__multadd+0x66>
  405106:	6861      	ldr	r1, [r4, #4]
  405108:	4630      	mov	r0, r6
  40510a:	3101      	adds	r1, #1
  40510c:	f7ff ff90 	bl	405030 <_Balloc>
  405110:	6922      	ldr	r2, [r4, #16]
  405112:	3202      	adds	r2, #2
  405114:	f104 010c 	add.w	r1, r4, #12
  405118:	4680      	mov	r8, r0
  40511a:	0092      	lsls	r2, r2, #2
  40511c:	300c      	adds	r0, #12
  40511e:	f7fe f999 	bl	403454 <memcpy>
  405122:	4621      	mov	r1, r4
  405124:	4630      	mov	r0, r6
  405126:	f7ff ffb7 	bl	405098 <_Bfree>
  40512a:	4644      	mov	r4, r8
  40512c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  405130:	3501      	adds	r5, #1
  405132:	615f      	str	r7, [r3, #20]
  405134:	6125      	str	r5, [r4, #16]
  405136:	4620      	mov	r0, r4
  405138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040513c <__hi0bits>:
  40513c:	0c02      	lsrs	r2, r0, #16
  40513e:	0412      	lsls	r2, r2, #16
  405140:	4603      	mov	r3, r0
  405142:	b9b2      	cbnz	r2, 405172 <__hi0bits+0x36>
  405144:	0403      	lsls	r3, r0, #16
  405146:	2010      	movs	r0, #16
  405148:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40514c:	bf04      	itt	eq
  40514e:	021b      	lsleq	r3, r3, #8
  405150:	3008      	addeq	r0, #8
  405152:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405156:	bf04      	itt	eq
  405158:	011b      	lsleq	r3, r3, #4
  40515a:	3004      	addeq	r0, #4
  40515c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  405160:	bf04      	itt	eq
  405162:	009b      	lsleq	r3, r3, #2
  405164:	3002      	addeq	r0, #2
  405166:	2b00      	cmp	r3, #0
  405168:	db06      	blt.n	405178 <__hi0bits+0x3c>
  40516a:	005b      	lsls	r3, r3, #1
  40516c:	d503      	bpl.n	405176 <__hi0bits+0x3a>
  40516e:	3001      	adds	r0, #1
  405170:	4770      	bx	lr
  405172:	2000      	movs	r0, #0
  405174:	e7e8      	b.n	405148 <__hi0bits+0xc>
  405176:	2020      	movs	r0, #32
  405178:	4770      	bx	lr

0040517a <__lo0bits>:
  40517a:	6803      	ldr	r3, [r0, #0]
  40517c:	f013 0207 	ands.w	r2, r3, #7
  405180:	4601      	mov	r1, r0
  405182:	d00b      	beq.n	40519c <__lo0bits+0x22>
  405184:	07da      	lsls	r2, r3, #31
  405186:	d423      	bmi.n	4051d0 <__lo0bits+0x56>
  405188:	0798      	lsls	r0, r3, #30
  40518a:	bf49      	itett	mi
  40518c:	085b      	lsrmi	r3, r3, #1
  40518e:	089b      	lsrpl	r3, r3, #2
  405190:	2001      	movmi	r0, #1
  405192:	600b      	strmi	r3, [r1, #0]
  405194:	bf5c      	itt	pl
  405196:	600b      	strpl	r3, [r1, #0]
  405198:	2002      	movpl	r0, #2
  40519a:	4770      	bx	lr
  40519c:	b298      	uxth	r0, r3
  40519e:	b9a8      	cbnz	r0, 4051cc <__lo0bits+0x52>
  4051a0:	0c1b      	lsrs	r3, r3, #16
  4051a2:	2010      	movs	r0, #16
  4051a4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4051a8:	bf04      	itt	eq
  4051aa:	0a1b      	lsreq	r3, r3, #8
  4051ac:	3008      	addeq	r0, #8
  4051ae:	071a      	lsls	r2, r3, #28
  4051b0:	bf04      	itt	eq
  4051b2:	091b      	lsreq	r3, r3, #4
  4051b4:	3004      	addeq	r0, #4
  4051b6:	079a      	lsls	r2, r3, #30
  4051b8:	bf04      	itt	eq
  4051ba:	089b      	lsreq	r3, r3, #2
  4051bc:	3002      	addeq	r0, #2
  4051be:	07da      	lsls	r2, r3, #31
  4051c0:	d402      	bmi.n	4051c8 <__lo0bits+0x4e>
  4051c2:	085b      	lsrs	r3, r3, #1
  4051c4:	d006      	beq.n	4051d4 <__lo0bits+0x5a>
  4051c6:	3001      	adds	r0, #1
  4051c8:	600b      	str	r3, [r1, #0]
  4051ca:	4770      	bx	lr
  4051cc:	4610      	mov	r0, r2
  4051ce:	e7e9      	b.n	4051a4 <__lo0bits+0x2a>
  4051d0:	2000      	movs	r0, #0
  4051d2:	4770      	bx	lr
  4051d4:	2020      	movs	r0, #32
  4051d6:	4770      	bx	lr

004051d8 <__i2b>:
  4051d8:	b510      	push	{r4, lr}
  4051da:	460c      	mov	r4, r1
  4051dc:	2101      	movs	r1, #1
  4051de:	f7ff ff27 	bl	405030 <_Balloc>
  4051e2:	2201      	movs	r2, #1
  4051e4:	6144      	str	r4, [r0, #20]
  4051e6:	6102      	str	r2, [r0, #16]
  4051e8:	bd10      	pop	{r4, pc}

004051ea <__multiply>:
  4051ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4051ee:	4614      	mov	r4, r2
  4051f0:	690a      	ldr	r2, [r1, #16]
  4051f2:	6923      	ldr	r3, [r4, #16]
  4051f4:	429a      	cmp	r2, r3
  4051f6:	bfb8      	it	lt
  4051f8:	460b      	movlt	r3, r1
  4051fa:	4689      	mov	r9, r1
  4051fc:	bfbc      	itt	lt
  4051fe:	46a1      	movlt	r9, r4
  405200:	461c      	movlt	r4, r3
  405202:	f8d9 7010 	ldr.w	r7, [r9, #16]
  405206:	f8d4 a010 	ldr.w	sl, [r4, #16]
  40520a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40520e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  405212:	eb07 060a 	add.w	r6, r7, sl
  405216:	429e      	cmp	r6, r3
  405218:	bfc8      	it	gt
  40521a:	3101      	addgt	r1, #1
  40521c:	f7ff ff08 	bl	405030 <_Balloc>
  405220:	f100 0514 	add.w	r5, r0, #20
  405224:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  405228:	462b      	mov	r3, r5
  40522a:	2200      	movs	r2, #0
  40522c:	4543      	cmp	r3, r8
  40522e:	d316      	bcc.n	40525e <__multiply+0x74>
  405230:	f104 0214 	add.w	r2, r4, #20
  405234:	f109 0114 	add.w	r1, r9, #20
  405238:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  40523c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  405240:	9301      	str	r3, [sp, #4]
  405242:	9c01      	ldr	r4, [sp, #4]
  405244:	4294      	cmp	r4, r2
  405246:	4613      	mov	r3, r2
  405248:	d80c      	bhi.n	405264 <__multiply+0x7a>
  40524a:	2e00      	cmp	r6, #0
  40524c:	dd03      	ble.n	405256 <__multiply+0x6c>
  40524e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  405252:	2b00      	cmp	r3, #0
  405254:	d054      	beq.n	405300 <__multiply+0x116>
  405256:	6106      	str	r6, [r0, #16]
  405258:	b003      	add	sp, #12
  40525a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40525e:	f843 2b04 	str.w	r2, [r3], #4
  405262:	e7e3      	b.n	40522c <__multiply+0x42>
  405264:	f8b3 a000 	ldrh.w	sl, [r3]
  405268:	3204      	adds	r2, #4
  40526a:	f1ba 0f00 	cmp.w	sl, #0
  40526e:	d020      	beq.n	4052b2 <__multiply+0xc8>
  405270:	46ae      	mov	lr, r5
  405272:	4689      	mov	r9, r1
  405274:	f04f 0c00 	mov.w	ip, #0
  405278:	f859 4b04 	ldr.w	r4, [r9], #4
  40527c:	f8be b000 	ldrh.w	fp, [lr]
  405280:	b2a3      	uxth	r3, r4
  405282:	fb0a b303 	mla	r3, sl, r3, fp
  405286:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  40528a:	f8de 4000 	ldr.w	r4, [lr]
  40528e:	4463      	add	r3, ip
  405290:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  405294:	fb0a c40b 	mla	r4, sl, fp, ip
  405298:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40529c:	b29b      	uxth	r3, r3
  40529e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  4052a2:	454f      	cmp	r7, r9
  4052a4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  4052a8:	f84e 3b04 	str.w	r3, [lr], #4
  4052ac:	d8e4      	bhi.n	405278 <__multiply+0x8e>
  4052ae:	f8ce c000 	str.w	ip, [lr]
  4052b2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  4052b6:	f1b9 0f00 	cmp.w	r9, #0
  4052ba:	d01f      	beq.n	4052fc <__multiply+0x112>
  4052bc:	682b      	ldr	r3, [r5, #0]
  4052be:	46ae      	mov	lr, r5
  4052c0:	468c      	mov	ip, r1
  4052c2:	f04f 0a00 	mov.w	sl, #0
  4052c6:	f8bc 4000 	ldrh.w	r4, [ip]
  4052ca:	f8be b002 	ldrh.w	fp, [lr, #2]
  4052ce:	fb09 b404 	mla	r4, r9, r4, fp
  4052d2:	44a2      	add	sl, r4
  4052d4:	b29b      	uxth	r3, r3
  4052d6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  4052da:	f84e 3b04 	str.w	r3, [lr], #4
  4052de:	f85c 3b04 	ldr.w	r3, [ip], #4
  4052e2:	f8be 4000 	ldrh.w	r4, [lr]
  4052e6:	0c1b      	lsrs	r3, r3, #16
  4052e8:	fb09 4303 	mla	r3, r9, r3, r4
  4052ec:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  4052f0:	4567      	cmp	r7, ip
  4052f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4052f6:	d8e6      	bhi.n	4052c6 <__multiply+0xdc>
  4052f8:	f8ce 3000 	str.w	r3, [lr]
  4052fc:	3504      	adds	r5, #4
  4052fe:	e7a0      	b.n	405242 <__multiply+0x58>
  405300:	3e01      	subs	r6, #1
  405302:	e7a2      	b.n	40524a <__multiply+0x60>

00405304 <__pow5mult>:
  405304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405308:	4615      	mov	r5, r2
  40530a:	f012 0203 	ands.w	r2, r2, #3
  40530e:	4606      	mov	r6, r0
  405310:	460f      	mov	r7, r1
  405312:	d007      	beq.n	405324 <__pow5mult+0x20>
  405314:	3a01      	subs	r2, #1
  405316:	4c21      	ldr	r4, [pc, #132]	; (40539c <__pow5mult+0x98>)
  405318:	2300      	movs	r3, #0
  40531a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40531e:	f7ff fed2 	bl	4050c6 <__multadd>
  405322:	4607      	mov	r7, r0
  405324:	10ad      	asrs	r5, r5, #2
  405326:	d035      	beq.n	405394 <__pow5mult+0x90>
  405328:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40532a:	b93c      	cbnz	r4, 40533c <__pow5mult+0x38>
  40532c:	2010      	movs	r0, #16
  40532e:	f7ff fe27 	bl	404f80 <malloc>
  405332:	6270      	str	r0, [r6, #36]	; 0x24
  405334:	6044      	str	r4, [r0, #4]
  405336:	6084      	str	r4, [r0, #8]
  405338:	6004      	str	r4, [r0, #0]
  40533a:	60c4      	str	r4, [r0, #12]
  40533c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  405340:	f8d8 4008 	ldr.w	r4, [r8, #8]
  405344:	b94c      	cbnz	r4, 40535a <__pow5mult+0x56>
  405346:	f240 2171 	movw	r1, #625	; 0x271
  40534a:	4630      	mov	r0, r6
  40534c:	f7ff ff44 	bl	4051d8 <__i2b>
  405350:	2300      	movs	r3, #0
  405352:	f8c8 0008 	str.w	r0, [r8, #8]
  405356:	4604      	mov	r4, r0
  405358:	6003      	str	r3, [r0, #0]
  40535a:	f04f 0800 	mov.w	r8, #0
  40535e:	07eb      	lsls	r3, r5, #31
  405360:	d50a      	bpl.n	405378 <__pow5mult+0x74>
  405362:	4639      	mov	r1, r7
  405364:	4622      	mov	r2, r4
  405366:	4630      	mov	r0, r6
  405368:	f7ff ff3f 	bl	4051ea <__multiply>
  40536c:	4639      	mov	r1, r7
  40536e:	4681      	mov	r9, r0
  405370:	4630      	mov	r0, r6
  405372:	f7ff fe91 	bl	405098 <_Bfree>
  405376:	464f      	mov	r7, r9
  405378:	106d      	asrs	r5, r5, #1
  40537a:	d00b      	beq.n	405394 <__pow5mult+0x90>
  40537c:	6820      	ldr	r0, [r4, #0]
  40537e:	b938      	cbnz	r0, 405390 <__pow5mult+0x8c>
  405380:	4622      	mov	r2, r4
  405382:	4621      	mov	r1, r4
  405384:	4630      	mov	r0, r6
  405386:	f7ff ff30 	bl	4051ea <__multiply>
  40538a:	6020      	str	r0, [r4, #0]
  40538c:	f8c0 8000 	str.w	r8, [r0]
  405390:	4604      	mov	r4, r0
  405392:	e7e4      	b.n	40535e <__pow5mult+0x5a>
  405394:	4638      	mov	r0, r7
  405396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40539a:	bf00      	nop
  40539c:	00406538 	.word	0x00406538

004053a0 <__lshift>:
  4053a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4053a4:	460c      	mov	r4, r1
  4053a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4053aa:	6923      	ldr	r3, [r4, #16]
  4053ac:	6849      	ldr	r1, [r1, #4]
  4053ae:	eb0a 0903 	add.w	r9, sl, r3
  4053b2:	68a3      	ldr	r3, [r4, #8]
  4053b4:	4607      	mov	r7, r0
  4053b6:	4616      	mov	r6, r2
  4053b8:	f109 0501 	add.w	r5, r9, #1
  4053bc:	42ab      	cmp	r3, r5
  4053be:	db31      	blt.n	405424 <__lshift+0x84>
  4053c0:	4638      	mov	r0, r7
  4053c2:	f7ff fe35 	bl	405030 <_Balloc>
  4053c6:	2200      	movs	r2, #0
  4053c8:	4680      	mov	r8, r0
  4053ca:	f100 0314 	add.w	r3, r0, #20
  4053ce:	4611      	mov	r1, r2
  4053d0:	4552      	cmp	r2, sl
  4053d2:	db2a      	blt.n	40542a <__lshift+0x8a>
  4053d4:	6920      	ldr	r0, [r4, #16]
  4053d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  4053da:	f104 0114 	add.w	r1, r4, #20
  4053de:	f016 021f 	ands.w	r2, r6, #31
  4053e2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  4053e6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  4053ea:	d022      	beq.n	405432 <__lshift+0x92>
  4053ec:	f1c2 0c20 	rsb	ip, r2, #32
  4053f0:	2000      	movs	r0, #0
  4053f2:	680e      	ldr	r6, [r1, #0]
  4053f4:	4096      	lsls	r6, r2
  4053f6:	4330      	orrs	r0, r6
  4053f8:	f843 0b04 	str.w	r0, [r3], #4
  4053fc:	f851 0b04 	ldr.w	r0, [r1], #4
  405400:	458e      	cmp	lr, r1
  405402:	fa20 f00c 	lsr.w	r0, r0, ip
  405406:	d8f4      	bhi.n	4053f2 <__lshift+0x52>
  405408:	6018      	str	r0, [r3, #0]
  40540a:	b108      	cbz	r0, 405410 <__lshift+0x70>
  40540c:	f109 0502 	add.w	r5, r9, #2
  405410:	3d01      	subs	r5, #1
  405412:	4638      	mov	r0, r7
  405414:	f8c8 5010 	str.w	r5, [r8, #16]
  405418:	4621      	mov	r1, r4
  40541a:	f7ff fe3d 	bl	405098 <_Bfree>
  40541e:	4640      	mov	r0, r8
  405420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405424:	3101      	adds	r1, #1
  405426:	005b      	lsls	r3, r3, #1
  405428:	e7c8      	b.n	4053bc <__lshift+0x1c>
  40542a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40542e:	3201      	adds	r2, #1
  405430:	e7ce      	b.n	4053d0 <__lshift+0x30>
  405432:	3b04      	subs	r3, #4
  405434:	f851 2b04 	ldr.w	r2, [r1], #4
  405438:	f843 2f04 	str.w	r2, [r3, #4]!
  40543c:	458e      	cmp	lr, r1
  40543e:	d8f9      	bhi.n	405434 <__lshift+0x94>
  405440:	e7e6      	b.n	405410 <__lshift+0x70>

00405442 <__mcmp>:
  405442:	6903      	ldr	r3, [r0, #16]
  405444:	690a      	ldr	r2, [r1, #16]
  405446:	1a9b      	subs	r3, r3, r2
  405448:	b530      	push	{r4, r5, lr}
  40544a:	d10c      	bne.n	405466 <__mcmp+0x24>
  40544c:	0092      	lsls	r2, r2, #2
  40544e:	3014      	adds	r0, #20
  405450:	3114      	adds	r1, #20
  405452:	1884      	adds	r4, r0, r2
  405454:	4411      	add	r1, r2
  405456:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40545a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40545e:	4295      	cmp	r5, r2
  405460:	d003      	beq.n	40546a <__mcmp+0x28>
  405462:	d305      	bcc.n	405470 <__mcmp+0x2e>
  405464:	2301      	movs	r3, #1
  405466:	4618      	mov	r0, r3
  405468:	bd30      	pop	{r4, r5, pc}
  40546a:	42a0      	cmp	r0, r4
  40546c:	d3f3      	bcc.n	405456 <__mcmp+0x14>
  40546e:	e7fa      	b.n	405466 <__mcmp+0x24>
  405470:	f04f 33ff 	mov.w	r3, #4294967295
  405474:	e7f7      	b.n	405466 <__mcmp+0x24>

00405476 <__mdiff>:
  405476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40547a:	460d      	mov	r5, r1
  40547c:	4607      	mov	r7, r0
  40547e:	4611      	mov	r1, r2
  405480:	4628      	mov	r0, r5
  405482:	4614      	mov	r4, r2
  405484:	f7ff ffdd 	bl	405442 <__mcmp>
  405488:	1e06      	subs	r6, r0, #0
  40548a:	d108      	bne.n	40549e <__mdiff+0x28>
  40548c:	4631      	mov	r1, r6
  40548e:	4638      	mov	r0, r7
  405490:	f7ff fdce 	bl	405030 <_Balloc>
  405494:	2301      	movs	r3, #1
  405496:	6103      	str	r3, [r0, #16]
  405498:	6146      	str	r6, [r0, #20]
  40549a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40549e:	bfa4      	itt	ge
  4054a0:	4623      	movge	r3, r4
  4054a2:	462c      	movge	r4, r5
  4054a4:	4638      	mov	r0, r7
  4054a6:	6861      	ldr	r1, [r4, #4]
  4054a8:	bfa6      	itte	ge
  4054aa:	461d      	movge	r5, r3
  4054ac:	2600      	movge	r6, #0
  4054ae:	2601      	movlt	r6, #1
  4054b0:	f7ff fdbe 	bl	405030 <_Balloc>
  4054b4:	692b      	ldr	r3, [r5, #16]
  4054b6:	60c6      	str	r6, [r0, #12]
  4054b8:	6926      	ldr	r6, [r4, #16]
  4054ba:	f105 0914 	add.w	r9, r5, #20
  4054be:	f104 0214 	add.w	r2, r4, #20
  4054c2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  4054c6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  4054ca:	f100 0514 	add.w	r5, r0, #20
  4054ce:	f04f 0c00 	mov.w	ip, #0
  4054d2:	f852 ab04 	ldr.w	sl, [r2], #4
  4054d6:	f859 4b04 	ldr.w	r4, [r9], #4
  4054da:	fa1c f18a 	uxtah	r1, ip, sl
  4054de:	b2a3      	uxth	r3, r4
  4054e0:	1ac9      	subs	r1, r1, r3
  4054e2:	0c23      	lsrs	r3, r4, #16
  4054e4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  4054e8:	eb03 4321 	add.w	r3, r3, r1, asr #16
  4054ec:	b289      	uxth	r1, r1
  4054ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4054f2:	45c8      	cmp	r8, r9
  4054f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  4054f8:	4696      	mov	lr, r2
  4054fa:	f845 3b04 	str.w	r3, [r5], #4
  4054fe:	d8e8      	bhi.n	4054d2 <__mdiff+0x5c>
  405500:	45be      	cmp	lr, r7
  405502:	d305      	bcc.n	405510 <__mdiff+0x9a>
  405504:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405508:	b18b      	cbz	r3, 40552e <__mdiff+0xb8>
  40550a:	6106      	str	r6, [r0, #16]
  40550c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405510:	f85e 1b04 	ldr.w	r1, [lr], #4
  405514:	fa1c f381 	uxtah	r3, ip, r1
  405518:	141a      	asrs	r2, r3, #16
  40551a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  40551e:	b29b      	uxth	r3, r3
  405520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405524:	ea4f 4c22 	mov.w	ip, r2, asr #16
  405528:	f845 3b04 	str.w	r3, [r5], #4
  40552c:	e7e8      	b.n	405500 <__mdiff+0x8a>
  40552e:	3e01      	subs	r6, #1
  405530:	e7e8      	b.n	405504 <__mdiff+0x8e>

00405532 <__d2b>:
  405532:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  405536:	2101      	movs	r1, #1
  405538:	461c      	mov	r4, r3
  40553a:	4690      	mov	r8, r2
  40553c:	9e08      	ldr	r6, [sp, #32]
  40553e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405540:	f7ff fd76 	bl	405030 <_Balloc>
  405544:	f3c4 0213 	ubfx	r2, r4, #0, #20
  405548:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40554c:	4607      	mov	r7, r0
  40554e:	bb34      	cbnz	r4, 40559e <__d2b+0x6c>
  405550:	9201      	str	r2, [sp, #4]
  405552:	f1b8 0f00 	cmp.w	r8, #0
  405556:	d027      	beq.n	4055a8 <__d2b+0x76>
  405558:	a802      	add	r0, sp, #8
  40555a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40555e:	f7ff fe0c 	bl	40517a <__lo0bits>
  405562:	9900      	ldr	r1, [sp, #0]
  405564:	b1f0      	cbz	r0, 4055a4 <__d2b+0x72>
  405566:	9a01      	ldr	r2, [sp, #4]
  405568:	f1c0 0320 	rsb	r3, r0, #32
  40556c:	fa02 f303 	lsl.w	r3, r2, r3
  405570:	430b      	orrs	r3, r1
  405572:	40c2      	lsrs	r2, r0
  405574:	617b      	str	r3, [r7, #20]
  405576:	9201      	str	r2, [sp, #4]
  405578:	9b01      	ldr	r3, [sp, #4]
  40557a:	61bb      	str	r3, [r7, #24]
  40557c:	2b00      	cmp	r3, #0
  40557e:	bf14      	ite	ne
  405580:	2102      	movne	r1, #2
  405582:	2101      	moveq	r1, #1
  405584:	6139      	str	r1, [r7, #16]
  405586:	b1c4      	cbz	r4, 4055ba <__d2b+0x88>
  405588:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40558c:	4404      	add	r4, r0
  40558e:	6034      	str	r4, [r6, #0]
  405590:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405594:	6028      	str	r0, [r5, #0]
  405596:	4638      	mov	r0, r7
  405598:	b002      	add	sp, #8
  40559a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40559e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4055a2:	e7d5      	b.n	405550 <__d2b+0x1e>
  4055a4:	6179      	str	r1, [r7, #20]
  4055a6:	e7e7      	b.n	405578 <__d2b+0x46>
  4055a8:	a801      	add	r0, sp, #4
  4055aa:	f7ff fde6 	bl	40517a <__lo0bits>
  4055ae:	9b01      	ldr	r3, [sp, #4]
  4055b0:	617b      	str	r3, [r7, #20]
  4055b2:	2101      	movs	r1, #1
  4055b4:	6139      	str	r1, [r7, #16]
  4055b6:	3020      	adds	r0, #32
  4055b8:	e7e5      	b.n	405586 <__d2b+0x54>
  4055ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  4055be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4055c2:	6030      	str	r0, [r6, #0]
  4055c4:	6918      	ldr	r0, [r3, #16]
  4055c6:	f7ff fdb9 	bl	40513c <__hi0bits>
  4055ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4055ce:	e7e1      	b.n	405594 <__d2b+0x62>

004055d0 <_calloc_r>:
  4055d0:	b538      	push	{r3, r4, r5, lr}
  4055d2:	fb02 f401 	mul.w	r4, r2, r1
  4055d6:	4621      	mov	r1, r4
  4055d8:	f000 f856 	bl	405688 <_malloc_r>
  4055dc:	4605      	mov	r5, r0
  4055de:	b118      	cbz	r0, 4055e8 <_calloc_r+0x18>
  4055e0:	4622      	mov	r2, r4
  4055e2:	2100      	movs	r1, #0
  4055e4:	f7fd ff41 	bl	40346a <memset>
  4055e8:	4628      	mov	r0, r5
  4055ea:	bd38      	pop	{r3, r4, r5, pc}

004055ec <_free_r>:
  4055ec:	b538      	push	{r3, r4, r5, lr}
  4055ee:	4605      	mov	r5, r0
  4055f0:	2900      	cmp	r1, #0
  4055f2:	d045      	beq.n	405680 <_free_r+0x94>
  4055f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4055f8:	1f0c      	subs	r4, r1, #4
  4055fa:	2b00      	cmp	r3, #0
  4055fc:	bfb8      	it	lt
  4055fe:	18e4      	addlt	r4, r4, r3
  405600:	f000 fb5a 	bl	405cb8 <__malloc_lock>
  405604:	4a1f      	ldr	r2, [pc, #124]	; (405684 <_free_r+0x98>)
  405606:	6813      	ldr	r3, [r2, #0]
  405608:	4610      	mov	r0, r2
  40560a:	b933      	cbnz	r3, 40561a <_free_r+0x2e>
  40560c:	6063      	str	r3, [r4, #4]
  40560e:	6014      	str	r4, [r2, #0]
  405610:	4628      	mov	r0, r5
  405612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405616:	f000 bb50 	b.w	405cba <__malloc_unlock>
  40561a:	42a3      	cmp	r3, r4
  40561c:	d90c      	bls.n	405638 <_free_r+0x4c>
  40561e:	6821      	ldr	r1, [r4, #0]
  405620:	1862      	adds	r2, r4, r1
  405622:	4293      	cmp	r3, r2
  405624:	bf04      	itt	eq
  405626:	681a      	ldreq	r2, [r3, #0]
  405628:	685b      	ldreq	r3, [r3, #4]
  40562a:	6063      	str	r3, [r4, #4]
  40562c:	bf04      	itt	eq
  40562e:	1852      	addeq	r2, r2, r1
  405630:	6022      	streq	r2, [r4, #0]
  405632:	6004      	str	r4, [r0, #0]
  405634:	e7ec      	b.n	405610 <_free_r+0x24>
  405636:	4613      	mov	r3, r2
  405638:	685a      	ldr	r2, [r3, #4]
  40563a:	b10a      	cbz	r2, 405640 <_free_r+0x54>
  40563c:	42a2      	cmp	r2, r4
  40563e:	d9fa      	bls.n	405636 <_free_r+0x4a>
  405640:	6819      	ldr	r1, [r3, #0]
  405642:	1858      	adds	r0, r3, r1
  405644:	42a0      	cmp	r0, r4
  405646:	d10b      	bne.n	405660 <_free_r+0x74>
  405648:	6820      	ldr	r0, [r4, #0]
  40564a:	4401      	add	r1, r0
  40564c:	1858      	adds	r0, r3, r1
  40564e:	4282      	cmp	r2, r0
  405650:	6019      	str	r1, [r3, #0]
  405652:	d1dd      	bne.n	405610 <_free_r+0x24>
  405654:	6810      	ldr	r0, [r2, #0]
  405656:	6852      	ldr	r2, [r2, #4]
  405658:	605a      	str	r2, [r3, #4]
  40565a:	4401      	add	r1, r0
  40565c:	6019      	str	r1, [r3, #0]
  40565e:	e7d7      	b.n	405610 <_free_r+0x24>
  405660:	d902      	bls.n	405668 <_free_r+0x7c>
  405662:	230c      	movs	r3, #12
  405664:	602b      	str	r3, [r5, #0]
  405666:	e7d3      	b.n	405610 <_free_r+0x24>
  405668:	6820      	ldr	r0, [r4, #0]
  40566a:	1821      	adds	r1, r4, r0
  40566c:	428a      	cmp	r2, r1
  40566e:	bf04      	itt	eq
  405670:	6811      	ldreq	r1, [r2, #0]
  405672:	6852      	ldreq	r2, [r2, #4]
  405674:	6062      	str	r2, [r4, #4]
  405676:	bf04      	itt	eq
  405678:	1809      	addeq	r1, r1, r0
  40567a:	6021      	streq	r1, [r4, #0]
  40567c:	605c      	str	r4, [r3, #4]
  40567e:	e7c7      	b.n	405610 <_free_r+0x24>
  405680:	bd38      	pop	{r3, r4, r5, pc}
  405682:	bf00      	nop
  405684:	204004c4 	.word	0x204004c4

00405688 <_malloc_r>:
  405688:	b570      	push	{r4, r5, r6, lr}
  40568a:	1ccd      	adds	r5, r1, #3
  40568c:	f025 0503 	bic.w	r5, r5, #3
  405690:	3508      	adds	r5, #8
  405692:	2d0c      	cmp	r5, #12
  405694:	bf38      	it	cc
  405696:	250c      	movcc	r5, #12
  405698:	2d00      	cmp	r5, #0
  40569a:	4606      	mov	r6, r0
  40569c:	db01      	blt.n	4056a2 <_malloc_r+0x1a>
  40569e:	42a9      	cmp	r1, r5
  4056a0:	d903      	bls.n	4056aa <_malloc_r+0x22>
  4056a2:	230c      	movs	r3, #12
  4056a4:	6033      	str	r3, [r6, #0]
  4056a6:	2000      	movs	r0, #0
  4056a8:	bd70      	pop	{r4, r5, r6, pc}
  4056aa:	f000 fb05 	bl	405cb8 <__malloc_lock>
  4056ae:	4a23      	ldr	r2, [pc, #140]	; (40573c <_malloc_r+0xb4>)
  4056b0:	6814      	ldr	r4, [r2, #0]
  4056b2:	4621      	mov	r1, r4
  4056b4:	b991      	cbnz	r1, 4056dc <_malloc_r+0x54>
  4056b6:	4c22      	ldr	r4, [pc, #136]	; (405740 <_malloc_r+0xb8>)
  4056b8:	6823      	ldr	r3, [r4, #0]
  4056ba:	b91b      	cbnz	r3, 4056c4 <_malloc_r+0x3c>
  4056bc:	4630      	mov	r0, r6
  4056be:	f000 f97f 	bl	4059c0 <_sbrk_r>
  4056c2:	6020      	str	r0, [r4, #0]
  4056c4:	4629      	mov	r1, r5
  4056c6:	4630      	mov	r0, r6
  4056c8:	f000 f97a 	bl	4059c0 <_sbrk_r>
  4056cc:	1c43      	adds	r3, r0, #1
  4056ce:	d126      	bne.n	40571e <_malloc_r+0x96>
  4056d0:	230c      	movs	r3, #12
  4056d2:	6033      	str	r3, [r6, #0]
  4056d4:	4630      	mov	r0, r6
  4056d6:	f000 faf0 	bl	405cba <__malloc_unlock>
  4056da:	e7e4      	b.n	4056a6 <_malloc_r+0x1e>
  4056dc:	680b      	ldr	r3, [r1, #0]
  4056de:	1b5b      	subs	r3, r3, r5
  4056e0:	d41a      	bmi.n	405718 <_malloc_r+0x90>
  4056e2:	2b0b      	cmp	r3, #11
  4056e4:	d90f      	bls.n	405706 <_malloc_r+0x7e>
  4056e6:	600b      	str	r3, [r1, #0]
  4056e8:	50cd      	str	r5, [r1, r3]
  4056ea:	18cc      	adds	r4, r1, r3
  4056ec:	4630      	mov	r0, r6
  4056ee:	f000 fae4 	bl	405cba <__malloc_unlock>
  4056f2:	f104 000b 	add.w	r0, r4, #11
  4056f6:	1d23      	adds	r3, r4, #4
  4056f8:	f020 0007 	bic.w	r0, r0, #7
  4056fc:	1ac3      	subs	r3, r0, r3
  4056fe:	d01b      	beq.n	405738 <_malloc_r+0xb0>
  405700:	425a      	negs	r2, r3
  405702:	50e2      	str	r2, [r4, r3]
  405704:	bd70      	pop	{r4, r5, r6, pc}
  405706:	428c      	cmp	r4, r1
  405708:	bf0d      	iteet	eq
  40570a:	6863      	ldreq	r3, [r4, #4]
  40570c:	684b      	ldrne	r3, [r1, #4]
  40570e:	6063      	strne	r3, [r4, #4]
  405710:	6013      	streq	r3, [r2, #0]
  405712:	bf18      	it	ne
  405714:	460c      	movne	r4, r1
  405716:	e7e9      	b.n	4056ec <_malloc_r+0x64>
  405718:	460c      	mov	r4, r1
  40571a:	6849      	ldr	r1, [r1, #4]
  40571c:	e7ca      	b.n	4056b4 <_malloc_r+0x2c>
  40571e:	1cc4      	adds	r4, r0, #3
  405720:	f024 0403 	bic.w	r4, r4, #3
  405724:	42a0      	cmp	r0, r4
  405726:	d005      	beq.n	405734 <_malloc_r+0xac>
  405728:	1a21      	subs	r1, r4, r0
  40572a:	4630      	mov	r0, r6
  40572c:	f000 f948 	bl	4059c0 <_sbrk_r>
  405730:	3001      	adds	r0, #1
  405732:	d0cd      	beq.n	4056d0 <_malloc_r+0x48>
  405734:	6025      	str	r5, [r4, #0]
  405736:	e7d9      	b.n	4056ec <_malloc_r+0x64>
  405738:	bd70      	pop	{r4, r5, r6, pc}
  40573a:	bf00      	nop
  40573c:	204004c4 	.word	0x204004c4
  405740:	204004c8 	.word	0x204004c8

00405744 <__sfputc_r>:
  405744:	6893      	ldr	r3, [r2, #8]
  405746:	3b01      	subs	r3, #1
  405748:	2b00      	cmp	r3, #0
  40574a:	b410      	push	{r4}
  40574c:	6093      	str	r3, [r2, #8]
  40574e:	da08      	bge.n	405762 <__sfputc_r+0x1e>
  405750:	6994      	ldr	r4, [r2, #24]
  405752:	42a3      	cmp	r3, r4
  405754:	db02      	blt.n	40575c <__sfputc_r+0x18>
  405756:	b2cb      	uxtb	r3, r1
  405758:	2b0a      	cmp	r3, #10
  40575a:	d102      	bne.n	405762 <__sfputc_r+0x1e>
  40575c:	bc10      	pop	{r4}
  40575e:	f000 b983 	b.w	405a68 <__swbuf_r>
  405762:	6813      	ldr	r3, [r2, #0]
  405764:	1c58      	adds	r0, r3, #1
  405766:	6010      	str	r0, [r2, #0]
  405768:	7019      	strb	r1, [r3, #0]
  40576a:	b2c8      	uxtb	r0, r1
  40576c:	bc10      	pop	{r4}
  40576e:	4770      	bx	lr

00405770 <__sfputs_r>:
  405770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405772:	4606      	mov	r6, r0
  405774:	460f      	mov	r7, r1
  405776:	4614      	mov	r4, r2
  405778:	18d5      	adds	r5, r2, r3
  40577a:	42ac      	cmp	r4, r5
  40577c:	d101      	bne.n	405782 <__sfputs_r+0x12>
  40577e:	2000      	movs	r0, #0
  405780:	e007      	b.n	405792 <__sfputs_r+0x22>
  405782:	463a      	mov	r2, r7
  405784:	f814 1b01 	ldrb.w	r1, [r4], #1
  405788:	4630      	mov	r0, r6
  40578a:	f7ff ffdb 	bl	405744 <__sfputc_r>
  40578e:	1c43      	adds	r3, r0, #1
  405790:	d1f3      	bne.n	40577a <__sfputs_r+0xa>
  405792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00405794 <_vfiprintf_r>:
  405794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405798:	b09d      	sub	sp, #116	; 0x74
  40579a:	460c      	mov	r4, r1
  40579c:	4617      	mov	r7, r2
  40579e:	9303      	str	r3, [sp, #12]
  4057a0:	4606      	mov	r6, r0
  4057a2:	b118      	cbz	r0, 4057ac <_vfiprintf_r+0x18>
  4057a4:	6983      	ldr	r3, [r0, #24]
  4057a6:	b90b      	cbnz	r3, 4057ac <_vfiprintf_r+0x18>
  4057a8:	f7ff faee 	bl	404d88 <__sinit>
  4057ac:	4b7c      	ldr	r3, [pc, #496]	; (4059a0 <_vfiprintf_r+0x20c>)
  4057ae:	429c      	cmp	r4, r3
  4057b0:	d157      	bne.n	405862 <_vfiprintf_r+0xce>
  4057b2:	6874      	ldr	r4, [r6, #4]
  4057b4:	89a3      	ldrh	r3, [r4, #12]
  4057b6:	0718      	lsls	r0, r3, #28
  4057b8:	d55d      	bpl.n	405876 <_vfiprintf_r+0xe2>
  4057ba:	6923      	ldr	r3, [r4, #16]
  4057bc:	2b00      	cmp	r3, #0
  4057be:	d05a      	beq.n	405876 <_vfiprintf_r+0xe2>
  4057c0:	2300      	movs	r3, #0
  4057c2:	9309      	str	r3, [sp, #36]	; 0x24
  4057c4:	2320      	movs	r3, #32
  4057c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  4057ca:	2330      	movs	r3, #48	; 0x30
  4057cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4057d0:	f04f 0b01 	mov.w	fp, #1
  4057d4:	46b8      	mov	r8, r7
  4057d6:	4645      	mov	r5, r8
  4057d8:	f815 3b01 	ldrb.w	r3, [r5], #1
  4057dc:	2b00      	cmp	r3, #0
  4057de:	d155      	bne.n	40588c <_vfiprintf_r+0xf8>
  4057e0:	ebb8 0a07 	subs.w	sl, r8, r7
  4057e4:	d00b      	beq.n	4057fe <_vfiprintf_r+0x6a>
  4057e6:	4653      	mov	r3, sl
  4057e8:	463a      	mov	r2, r7
  4057ea:	4621      	mov	r1, r4
  4057ec:	4630      	mov	r0, r6
  4057ee:	f7ff ffbf 	bl	405770 <__sfputs_r>
  4057f2:	3001      	adds	r0, #1
  4057f4:	f000 80c4 	beq.w	405980 <_vfiprintf_r+0x1ec>
  4057f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4057fa:	4453      	add	r3, sl
  4057fc:	9309      	str	r3, [sp, #36]	; 0x24
  4057fe:	f898 3000 	ldrb.w	r3, [r8]
  405802:	2b00      	cmp	r3, #0
  405804:	f000 80bc 	beq.w	405980 <_vfiprintf_r+0x1ec>
  405808:	2300      	movs	r3, #0
  40580a:	f04f 32ff 	mov.w	r2, #4294967295
  40580e:	9304      	str	r3, [sp, #16]
  405810:	9307      	str	r3, [sp, #28]
  405812:	9205      	str	r2, [sp, #20]
  405814:	9306      	str	r3, [sp, #24]
  405816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40581a:	931a      	str	r3, [sp, #104]	; 0x68
  40581c:	2205      	movs	r2, #5
  40581e:	7829      	ldrb	r1, [r5, #0]
  405820:	4860      	ldr	r0, [pc, #384]	; (4059a4 <_vfiprintf_r+0x210>)
  405822:	f7ff fbb5 	bl	404f90 <memchr>
  405826:	f105 0801 	add.w	r8, r5, #1
  40582a:	9b04      	ldr	r3, [sp, #16]
  40582c:	2800      	cmp	r0, #0
  40582e:	d131      	bne.n	405894 <_vfiprintf_r+0x100>
  405830:	06d9      	lsls	r1, r3, #27
  405832:	bf44      	itt	mi
  405834:	2220      	movmi	r2, #32
  405836:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40583a:	071a      	lsls	r2, r3, #28
  40583c:	bf44      	itt	mi
  40583e:	222b      	movmi	r2, #43	; 0x2b
  405840:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  405844:	782a      	ldrb	r2, [r5, #0]
  405846:	2a2a      	cmp	r2, #42	; 0x2a
  405848:	d02c      	beq.n	4058a4 <_vfiprintf_r+0x110>
  40584a:	9a07      	ldr	r2, [sp, #28]
  40584c:	2100      	movs	r1, #0
  40584e:	200a      	movs	r0, #10
  405850:	46a8      	mov	r8, r5
  405852:	3501      	adds	r5, #1
  405854:	f898 3000 	ldrb.w	r3, [r8]
  405858:	3b30      	subs	r3, #48	; 0x30
  40585a:	2b09      	cmp	r3, #9
  40585c:	d96d      	bls.n	40593a <_vfiprintf_r+0x1a6>
  40585e:	b371      	cbz	r1, 4058be <_vfiprintf_r+0x12a>
  405860:	e026      	b.n	4058b0 <_vfiprintf_r+0x11c>
  405862:	4b51      	ldr	r3, [pc, #324]	; (4059a8 <_vfiprintf_r+0x214>)
  405864:	429c      	cmp	r4, r3
  405866:	d101      	bne.n	40586c <_vfiprintf_r+0xd8>
  405868:	68b4      	ldr	r4, [r6, #8]
  40586a:	e7a3      	b.n	4057b4 <_vfiprintf_r+0x20>
  40586c:	4b4f      	ldr	r3, [pc, #316]	; (4059ac <_vfiprintf_r+0x218>)
  40586e:	429c      	cmp	r4, r3
  405870:	bf08      	it	eq
  405872:	68f4      	ldreq	r4, [r6, #12]
  405874:	e79e      	b.n	4057b4 <_vfiprintf_r+0x20>
  405876:	4621      	mov	r1, r4
  405878:	4630      	mov	r0, r6
  40587a:	f000 f959 	bl	405b30 <__swsetup_r>
  40587e:	2800      	cmp	r0, #0
  405880:	d09e      	beq.n	4057c0 <_vfiprintf_r+0x2c>
  405882:	f04f 30ff 	mov.w	r0, #4294967295
  405886:	b01d      	add	sp, #116	; 0x74
  405888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40588c:	2b25      	cmp	r3, #37	; 0x25
  40588e:	d0a7      	beq.n	4057e0 <_vfiprintf_r+0x4c>
  405890:	46a8      	mov	r8, r5
  405892:	e7a0      	b.n	4057d6 <_vfiprintf_r+0x42>
  405894:	4a43      	ldr	r2, [pc, #268]	; (4059a4 <_vfiprintf_r+0x210>)
  405896:	1a80      	subs	r0, r0, r2
  405898:	fa0b f000 	lsl.w	r0, fp, r0
  40589c:	4318      	orrs	r0, r3
  40589e:	9004      	str	r0, [sp, #16]
  4058a0:	4645      	mov	r5, r8
  4058a2:	e7bb      	b.n	40581c <_vfiprintf_r+0x88>
  4058a4:	9a03      	ldr	r2, [sp, #12]
  4058a6:	1d11      	adds	r1, r2, #4
  4058a8:	6812      	ldr	r2, [r2, #0]
  4058aa:	9103      	str	r1, [sp, #12]
  4058ac:	2a00      	cmp	r2, #0
  4058ae:	db01      	blt.n	4058b4 <_vfiprintf_r+0x120>
  4058b0:	9207      	str	r2, [sp, #28]
  4058b2:	e004      	b.n	4058be <_vfiprintf_r+0x12a>
  4058b4:	4252      	negs	r2, r2
  4058b6:	f043 0302 	orr.w	r3, r3, #2
  4058ba:	9207      	str	r2, [sp, #28]
  4058bc:	9304      	str	r3, [sp, #16]
  4058be:	f898 3000 	ldrb.w	r3, [r8]
  4058c2:	2b2e      	cmp	r3, #46	; 0x2e
  4058c4:	d110      	bne.n	4058e8 <_vfiprintf_r+0x154>
  4058c6:	f898 3001 	ldrb.w	r3, [r8, #1]
  4058ca:	2b2a      	cmp	r3, #42	; 0x2a
  4058cc:	f108 0101 	add.w	r1, r8, #1
  4058d0:	d137      	bne.n	405942 <_vfiprintf_r+0x1ae>
  4058d2:	9b03      	ldr	r3, [sp, #12]
  4058d4:	1d1a      	adds	r2, r3, #4
  4058d6:	681b      	ldr	r3, [r3, #0]
  4058d8:	9203      	str	r2, [sp, #12]
  4058da:	2b00      	cmp	r3, #0
  4058dc:	bfb8      	it	lt
  4058de:	f04f 33ff 	movlt.w	r3, #4294967295
  4058e2:	f108 0802 	add.w	r8, r8, #2
  4058e6:	9305      	str	r3, [sp, #20]
  4058e8:	4d31      	ldr	r5, [pc, #196]	; (4059b0 <_vfiprintf_r+0x21c>)
  4058ea:	f898 1000 	ldrb.w	r1, [r8]
  4058ee:	2203      	movs	r2, #3
  4058f0:	4628      	mov	r0, r5
  4058f2:	f7ff fb4d 	bl	404f90 <memchr>
  4058f6:	b140      	cbz	r0, 40590a <_vfiprintf_r+0x176>
  4058f8:	2340      	movs	r3, #64	; 0x40
  4058fa:	1b40      	subs	r0, r0, r5
  4058fc:	fa03 f000 	lsl.w	r0, r3, r0
  405900:	9b04      	ldr	r3, [sp, #16]
  405902:	4303      	orrs	r3, r0
  405904:	9304      	str	r3, [sp, #16]
  405906:	f108 0801 	add.w	r8, r8, #1
  40590a:	f898 1000 	ldrb.w	r1, [r8]
  40590e:	4829      	ldr	r0, [pc, #164]	; (4059b4 <_vfiprintf_r+0x220>)
  405910:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  405914:	2206      	movs	r2, #6
  405916:	f108 0701 	add.w	r7, r8, #1
  40591a:	f7ff fb39 	bl	404f90 <memchr>
  40591e:	2800      	cmp	r0, #0
  405920:	d034      	beq.n	40598c <_vfiprintf_r+0x1f8>
  405922:	4b25      	ldr	r3, [pc, #148]	; (4059b8 <_vfiprintf_r+0x224>)
  405924:	bb03      	cbnz	r3, 405968 <_vfiprintf_r+0x1d4>
  405926:	9b03      	ldr	r3, [sp, #12]
  405928:	3307      	adds	r3, #7
  40592a:	f023 0307 	bic.w	r3, r3, #7
  40592e:	3308      	adds	r3, #8
  405930:	9303      	str	r3, [sp, #12]
  405932:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405934:	444b      	add	r3, r9
  405936:	9309      	str	r3, [sp, #36]	; 0x24
  405938:	e74c      	b.n	4057d4 <_vfiprintf_r+0x40>
  40593a:	fb00 3202 	mla	r2, r0, r2, r3
  40593e:	2101      	movs	r1, #1
  405940:	e786      	b.n	405850 <_vfiprintf_r+0xbc>
  405942:	2300      	movs	r3, #0
  405944:	9305      	str	r3, [sp, #20]
  405946:	4618      	mov	r0, r3
  405948:	250a      	movs	r5, #10
  40594a:	4688      	mov	r8, r1
  40594c:	3101      	adds	r1, #1
  40594e:	f898 2000 	ldrb.w	r2, [r8]
  405952:	3a30      	subs	r2, #48	; 0x30
  405954:	2a09      	cmp	r2, #9
  405956:	d903      	bls.n	405960 <_vfiprintf_r+0x1cc>
  405958:	2b00      	cmp	r3, #0
  40595a:	d0c5      	beq.n	4058e8 <_vfiprintf_r+0x154>
  40595c:	9005      	str	r0, [sp, #20]
  40595e:	e7c3      	b.n	4058e8 <_vfiprintf_r+0x154>
  405960:	fb05 2000 	mla	r0, r5, r0, r2
  405964:	2301      	movs	r3, #1
  405966:	e7f0      	b.n	40594a <_vfiprintf_r+0x1b6>
  405968:	ab03      	add	r3, sp, #12
  40596a:	9300      	str	r3, [sp, #0]
  40596c:	4622      	mov	r2, r4
  40596e:	4b13      	ldr	r3, [pc, #76]	; (4059bc <_vfiprintf_r+0x228>)
  405970:	a904      	add	r1, sp, #16
  405972:	4630      	mov	r0, r6
  405974:	f7fd fe12 	bl	40359c <_printf_float>
  405978:	f1b0 3fff 	cmp.w	r0, #4294967295
  40597c:	4681      	mov	r9, r0
  40597e:	d1d8      	bne.n	405932 <_vfiprintf_r+0x19e>
  405980:	89a3      	ldrh	r3, [r4, #12]
  405982:	065b      	lsls	r3, r3, #25
  405984:	f53f af7d 	bmi.w	405882 <_vfiprintf_r+0xee>
  405988:	9809      	ldr	r0, [sp, #36]	; 0x24
  40598a:	e77c      	b.n	405886 <_vfiprintf_r+0xf2>
  40598c:	ab03      	add	r3, sp, #12
  40598e:	9300      	str	r3, [sp, #0]
  405990:	4622      	mov	r2, r4
  405992:	4b0a      	ldr	r3, [pc, #40]	; (4059bc <_vfiprintf_r+0x228>)
  405994:	a904      	add	r1, sp, #16
  405996:	4630      	mov	r0, r6
  405998:	f7fe f8ae 	bl	403af8 <_printf_i>
  40599c:	e7ec      	b.n	405978 <_vfiprintf_r+0x1e4>
  40599e:	bf00      	nop
  4059a0:	00406408 	.word	0x00406408
  4059a4:	00406544 	.word	0x00406544
  4059a8:	00406428 	.word	0x00406428
  4059ac:	004063e8 	.word	0x004063e8
  4059b0:	0040654a 	.word	0x0040654a
  4059b4:	0040654e 	.word	0x0040654e
  4059b8:	0040359d 	.word	0x0040359d
  4059bc:	00405771 	.word	0x00405771

004059c0 <_sbrk_r>:
  4059c0:	b538      	push	{r3, r4, r5, lr}
  4059c2:	4c06      	ldr	r4, [pc, #24]	; (4059dc <_sbrk_r+0x1c>)
  4059c4:	2300      	movs	r3, #0
  4059c6:	4605      	mov	r5, r0
  4059c8:	4608      	mov	r0, r1
  4059ca:	6023      	str	r3, [r4, #0]
  4059cc:	f7fb ffae 	bl	40192c <_sbrk>
  4059d0:	1c43      	adds	r3, r0, #1
  4059d2:	d102      	bne.n	4059da <_sbrk_r+0x1a>
  4059d4:	6823      	ldr	r3, [r4, #0]
  4059d6:	b103      	cbz	r3, 4059da <_sbrk_r+0x1a>
  4059d8:	602b      	str	r3, [r5, #0]
  4059da:	bd38      	pop	{r3, r4, r5, pc}
  4059dc:	20400734 	.word	0x20400734

004059e0 <__sread>:
  4059e0:	b510      	push	{r4, lr}
  4059e2:	460c      	mov	r4, r1
  4059e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4059e8:	f000 f968 	bl	405cbc <_read_r>
  4059ec:	2800      	cmp	r0, #0
  4059ee:	bfab      	itete	ge
  4059f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  4059f2:	89a3      	ldrhlt	r3, [r4, #12]
  4059f4:	181b      	addge	r3, r3, r0
  4059f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  4059fa:	bfac      	ite	ge
  4059fc:	6563      	strge	r3, [r4, #84]	; 0x54
  4059fe:	81a3      	strhlt	r3, [r4, #12]
  405a00:	bd10      	pop	{r4, pc}

00405a02 <__swrite>:
  405a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405a06:	461f      	mov	r7, r3
  405a08:	898b      	ldrh	r3, [r1, #12]
  405a0a:	05db      	lsls	r3, r3, #23
  405a0c:	4605      	mov	r5, r0
  405a0e:	460c      	mov	r4, r1
  405a10:	4616      	mov	r6, r2
  405a12:	d505      	bpl.n	405a20 <__swrite+0x1e>
  405a14:	2302      	movs	r3, #2
  405a16:	2200      	movs	r2, #0
  405a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405a1c:	f000 f928 	bl	405c70 <_lseek_r>
  405a20:	89a3      	ldrh	r3, [r4, #12]
  405a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405a2a:	81a3      	strh	r3, [r4, #12]
  405a2c:	4632      	mov	r2, r6
  405a2e:	463b      	mov	r3, r7
  405a30:	4628      	mov	r0, r5
  405a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405a36:	f000 b869 	b.w	405b0c <_write_r>

00405a3a <__sseek>:
  405a3a:	b510      	push	{r4, lr}
  405a3c:	460c      	mov	r4, r1
  405a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405a42:	f000 f915 	bl	405c70 <_lseek_r>
  405a46:	1c43      	adds	r3, r0, #1
  405a48:	89a3      	ldrh	r3, [r4, #12]
  405a4a:	bf15      	itete	ne
  405a4c:	6560      	strne	r0, [r4, #84]	; 0x54
  405a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405a56:	81a3      	strheq	r3, [r4, #12]
  405a58:	bf18      	it	ne
  405a5a:	81a3      	strhne	r3, [r4, #12]
  405a5c:	bd10      	pop	{r4, pc}

00405a5e <__sclose>:
  405a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405a62:	f000 b8d3 	b.w	405c0c <_close_r>
	...

00405a68 <__swbuf_r>:
  405a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405a6a:	460e      	mov	r6, r1
  405a6c:	4614      	mov	r4, r2
  405a6e:	4605      	mov	r5, r0
  405a70:	b118      	cbz	r0, 405a7a <__swbuf_r+0x12>
  405a72:	6983      	ldr	r3, [r0, #24]
  405a74:	b90b      	cbnz	r3, 405a7a <__swbuf_r+0x12>
  405a76:	f7ff f987 	bl	404d88 <__sinit>
  405a7a:	4b21      	ldr	r3, [pc, #132]	; (405b00 <__swbuf_r+0x98>)
  405a7c:	429c      	cmp	r4, r3
  405a7e:	d12a      	bne.n	405ad6 <__swbuf_r+0x6e>
  405a80:	686c      	ldr	r4, [r5, #4]
  405a82:	69a3      	ldr	r3, [r4, #24]
  405a84:	60a3      	str	r3, [r4, #8]
  405a86:	89a3      	ldrh	r3, [r4, #12]
  405a88:	071a      	lsls	r2, r3, #28
  405a8a:	d52e      	bpl.n	405aea <__swbuf_r+0x82>
  405a8c:	6923      	ldr	r3, [r4, #16]
  405a8e:	b363      	cbz	r3, 405aea <__swbuf_r+0x82>
  405a90:	6923      	ldr	r3, [r4, #16]
  405a92:	6820      	ldr	r0, [r4, #0]
  405a94:	1ac0      	subs	r0, r0, r3
  405a96:	6963      	ldr	r3, [r4, #20]
  405a98:	b2f6      	uxtb	r6, r6
  405a9a:	4298      	cmp	r0, r3
  405a9c:	4637      	mov	r7, r6
  405a9e:	db04      	blt.n	405aaa <__swbuf_r+0x42>
  405aa0:	4621      	mov	r1, r4
  405aa2:	4628      	mov	r0, r5
  405aa4:	f7ff f906 	bl	404cb4 <_fflush_r>
  405aa8:	bb28      	cbnz	r0, 405af6 <__swbuf_r+0x8e>
  405aaa:	68a3      	ldr	r3, [r4, #8]
  405aac:	3b01      	subs	r3, #1
  405aae:	60a3      	str	r3, [r4, #8]
  405ab0:	6823      	ldr	r3, [r4, #0]
  405ab2:	1c5a      	adds	r2, r3, #1
  405ab4:	6022      	str	r2, [r4, #0]
  405ab6:	701e      	strb	r6, [r3, #0]
  405ab8:	6963      	ldr	r3, [r4, #20]
  405aba:	3001      	adds	r0, #1
  405abc:	4298      	cmp	r0, r3
  405abe:	d004      	beq.n	405aca <__swbuf_r+0x62>
  405ac0:	89a3      	ldrh	r3, [r4, #12]
  405ac2:	07db      	lsls	r3, r3, #31
  405ac4:	d519      	bpl.n	405afa <__swbuf_r+0x92>
  405ac6:	2e0a      	cmp	r6, #10
  405ac8:	d117      	bne.n	405afa <__swbuf_r+0x92>
  405aca:	4621      	mov	r1, r4
  405acc:	4628      	mov	r0, r5
  405ace:	f7ff f8f1 	bl	404cb4 <_fflush_r>
  405ad2:	b190      	cbz	r0, 405afa <__swbuf_r+0x92>
  405ad4:	e00f      	b.n	405af6 <__swbuf_r+0x8e>
  405ad6:	4b0b      	ldr	r3, [pc, #44]	; (405b04 <__swbuf_r+0x9c>)
  405ad8:	429c      	cmp	r4, r3
  405ada:	d101      	bne.n	405ae0 <__swbuf_r+0x78>
  405adc:	68ac      	ldr	r4, [r5, #8]
  405ade:	e7d0      	b.n	405a82 <__swbuf_r+0x1a>
  405ae0:	4b09      	ldr	r3, [pc, #36]	; (405b08 <__swbuf_r+0xa0>)
  405ae2:	429c      	cmp	r4, r3
  405ae4:	bf08      	it	eq
  405ae6:	68ec      	ldreq	r4, [r5, #12]
  405ae8:	e7cb      	b.n	405a82 <__swbuf_r+0x1a>
  405aea:	4621      	mov	r1, r4
  405aec:	4628      	mov	r0, r5
  405aee:	f000 f81f 	bl	405b30 <__swsetup_r>
  405af2:	2800      	cmp	r0, #0
  405af4:	d0cc      	beq.n	405a90 <__swbuf_r+0x28>
  405af6:	f04f 37ff 	mov.w	r7, #4294967295
  405afa:	4638      	mov	r0, r7
  405afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405afe:	bf00      	nop
  405b00:	00406408 	.word	0x00406408
  405b04:	00406428 	.word	0x00406428
  405b08:	004063e8 	.word	0x004063e8

00405b0c <_write_r>:
  405b0c:	b538      	push	{r3, r4, r5, lr}
  405b0e:	4c07      	ldr	r4, [pc, #28]	; (405b2c <_write_r+0x20>)
  405b10:	4605      	mov	r5, r0
  405b12:	4608      	mov	r0, r1
  405b14:	4611      	mov	r1, r2
  405b16:	2200      	movs	r2, #0
  405b18:	6022      	str	r2, [r4, #0]
  405b1a:	461a      	mov	r2, r3
  405b1c:	f7fc ff88 	bl	402a30 <_write>
  405b20:	1c43      	adds	r3, r0, #1
  405b22:	d102      	bne.n	405b2a <_write_r+0x1e>
  405b24:	6823      	ldr	r3, [r4, #0]
  405b26:	b103      	cbz	r3, 405b2a <_write_r+0x1e>
  405b28:	602b      	str	r3, [r5, #0]
  405b2a:	bd38      	pop	{r3, r4, r5, pc}
  405b2c:	20400734 	.word	0x20400734

00405b30 <__swsetup_r>:
  405b30:	4b32      	ldr	r3, [pc, #200]	; (405bfc <__swsetup_r+0xcc>)
  405b32:	b570      	push	{r4, r5, r6, lr}
  405b34:	681d      	ldr	r5, [r3, #0]
  405b36:	4606      	mov	r6, r0
  405b38:	460c      	mov	r4, r1
  405b3a:	b125      	cbz	r5, 405b46 <__swsetup_r+0x16>
  405b3c:	69ab      	ldr	r3, [r5, #24]
  405b3e:	b913      	cbnz	r3, 405b46 <__swsetup_r+0x16>
  405b40:	4628      	mov	r0, r5
  405b42:	f7ff f921 	bl	404d88 <__sinit>
  405b46:	4b2e      	ldr	r3, [pc, #184]	; (405c00 <__swsetup_r+0xd0>)
  405b48:	429c      	cmp	r4, r3
  405b4a:	d10f      	bne.n	405b6c <__swsetup_r+0x3c>
  405b4c:	686c      	ldr	r4, [r5, #4]
  405b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b52:	b29a      	uxth	r2, r3
  405b54:	0715      	lsls	r5, r2, #28
  405b56:	d42c      	bmi.n	405bb2 <__swsetup_r+0x82>
  405b58:	06d0      	lsls	r0, r2, #27
  405b5a:	d411      	bmi.n	405b80 <__swsetup_r+0x50>
  405b5c:	2209      	movs	r2, #9
  405b5e:	6032      	str	r2, [r6, #0]
  405b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405b64:	81a3      	strh	r3, [r4, #12]
  405b66:	f04f 30ff 	mov.w	r0, #4294967295
  405b6a:	bd70      	pop	{r4, r5, r6, pc}
  405b6c:	4b25      	ldr	r3, [pc, #148]	; (405c04 <__swsetup_r+0xd4>)
  405b6e:	429c      	cmp	r4, r3
  405b70:	d101      	bne.n	405b76 <__swsetup_r+0x46>
  405b72:	68ac      	ldr	r4, [r5, #8]
  405b74:	e7eb      	b.n	405b4e <__swsetup_r+0x1e>
  405b76:	4b24      	ldr	r3, [pc, #144]	; (405c08 <__swsetup_r+0xd8>)
  405b78:	429c      	cmp	r4, r3
  405b7a:	bf08      	it	eq
  405b7c:	68ec      	ldreq	r4, [r5, #12]
  405b7e:	e7e6      	b.n	405b4e <__swsetup_r+0x1e>
  405b80:	0751      	lsls	r1, r2, #29
  405b82:	d512      	bpl.n	405baa <__swsetup_r+0x7a>
  405b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405b86:	b141      	cbz	r1, 405b9a <__swsetup_r+0x6a>
  405b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405b8c:	4299      	cmp	r1, r3
  405b8e:	d002      	beq.n	405b96 <__swsetup_r+0x66>
  405b90:	4630      	mov	r0, r6
  405b92:	f7ff fd2b 	bl	4055ec <_free_r>
  405b96:	2300      	movs	r3, #0
  405b98:	6363      	str	r3, [r4, #52]	; 0x34
  405b9a:	89a3      	ldrh	r3, [r4, #12]
  405b9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  405ba0:	81a3      	strh	r3, [r4, #12]
  405ba2:	2300      	movs	r3, #0
  405ba4:	6063      	str	r3, [r4, #4]
  405ba6:	6923      	ldr	r3, [r4, #16]
  405ba8:	6023      	str	r3, [r4, #0]
  405baa:	89a3      	ldrh	r3, [r4, #12]
  405bac:	f043 0308 	orr.w	r3, r3, #8
  405bb0:	81a3      	strh	r3, [r4, #12]
  405bb2:	6923      	ldr	r3, [r4, #16]
  405bb4:	b94b      	cbnz	r3, 405bca <__swsetup_r+0x9a>
  405bb6:	89a3      	ldrh	r3, [r4, #12]
  405bb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
  405bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405bc0:	d003      	beq.n	405bca <__swsetup_r+0x9a>
  405bc2:	4621      	mov	r1, r4
  405bc4:	4630      	mov	r0, r6
  405bc6:	f7ff f99b 	bl	404f00 <__smakebuf_r>
  405bca:	89a2      	ldrh	r2, [r4, #12]
  405bcc:	f012 0301 	ands.w	r3, r2, #1
  405bd0:	d00c      	beq.n	405bec <__swsetup_r+0xbc>
  405bd2:	2300      	movs	r3, #0
  405bd4:	60a3      	str	r3, [r4, #8]
  405bd6:	6963      	ldr	r3, [r4, #20]
  405bd8:	425b      	negs	r3, r3
  405bda:	61a3      	str	r3, [r4, #24]
  405bdc:	6923      	ldr	r3, [r4, #16]
  405bde:	b953      	cbnz	r3, 405bf6 <__swsetup_r+0xc6>
  405be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405be4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  405be8:	d1ba      	bne.n	405b60 <__swsetup_r+0x30>
  405bea:	bd70      	pop	{r4, r5, r6, pc}
  405bec:	0792      	lsls	r2, r2, #30
  405bee:	bf58      	it	pl
  405bf0:	6963      	ldrpl	r3, [r4, #20]
  405bf2:	60a3      	str	r3, [r4, #8]
  405bf4:	e7f2      	b.n	405bdc <__swsetup_r+0xac>
  405bf6:	2000      	movs	r0, #0
  405bf8:	e7f7      	b.n	405bea <__swsetup_r+0xba>
  405bfa:	bf00      	nop
  405bfc:	20400048 	.word	0x20400048
  405c00:	00406408 	.word	0x00406408
  405c04:	00406428 	.word	0x00406428
  405c08:	004063e8 	.word	0x004063e8

00405c0c <_close_r>:
  405c0c:	b538      	push	{r3, r4, r5, lr}
  405c0e:	4c06      	ldr	r4, [pc, #24]	; (405c28 <_close_r+0x1c>)
  405c10:	2300      	movs	r3, #0
  405c12:	4605      	mov	r5, r0
  405c14:	4608      	mov	r0, r1
  405c16:	6023      	str	r3, [r4, #0]
  405c18:	f7fb fe9a 	bl	401950 <_close>
  405c1c:	1c43      	adds	r3, r0, #1
  405c1e:	d102      	bne.n	405c26 <_close_r+0x1a>
  405c20:	6823      	ldr	r3, [r4, #0]
  405c22:	b103      	cbz	r3, 405c26 <_close_r+0x1a>
  405c24:	602b      	str	r3, [r5, #0]
  405c26:	bd38      	pop	{r3, r4, r5, pc}
  405c28:	20400734 	.word	0x20400734

00405c2c <_fstat_r>:
  405c2c:	b538      	push	{r3, r4, r5, lr}
  405c2e:	4c07      	ldr	r4, [pc, #28]	; (405c4c <_fstat_r+0x20>)
  405c30:	2300      	movs	r3, #0
  405c32:	4605      	mov	r5, r0
  405c34:	4608      	mov	r0, r1
  405c36:	4611      	mov	r1, r2
  405c38:	6023      	str	r3, [r4, #0]
  405c3a:	f7fb fe8c 	bl	401956 <_fstat>
  405c3e:	1c43      	adds	r3, r0, #1
  405c40:	d102      	bne.n	405c48 <_fstat_r+0x1c>
  405c42:	6823      	ldr	r3, [r4, #0]
  405c44:	b103      	cbz	r3, 405c48 <_fstat_r+0x1c>
  405c46:	602b      	str	r3, [r5, #0]
  405c48:	bd38      	pop	{r3, r4, r5, pc}
  405c4a:	bf00      	nop
  405c4c:	20400734 	.word	0x20400734

00405c50 <_isatty_r>:
  405c50:	b538      	push	{r3, r4, r5, lr}
  405c52:	4c06      	ldr	r4, [pc, #24]	; (405c6c <_isatty_r+0x1c>)
  405c54:	2300      	movs	r3, #0
  405c56:	4605      	mov	r5, r0
  405c58:	4608      	mov	r0, r1
  405c5a:	6023      	str	r3, [r4, #0]
  405c5c:	f7fb fe80 	bl	401960 <_isatty>
  405c60:	1c43      	adds	r3, r0, #1
  405c62:	d102      	bne.n	405c6a <_isatty_r+0x1a>
  405c64:	6823      	ldr	r3, [r4, #0]
  405c66:	b103      	cbz	r3, 405c6a <_isatty_r+0x1a>
  405c68:	602b      	str	r3, [r5, #0]
  405c6a:	bd38      	pop	{r3, r4, r5, pc}
  405c6c:	20400734 	.word	0x20400734

00405c70 <_lseek_r>:
  405c70:	b538      	push	{r3, r4, r5, lr}
  405c72:	4c07      	ldr	r4, [pc, #28]	; (405c90 <_lseek_r+0x20>)
  405c74:	4605      	mov	r5, r0
  405c76:	4608      	mov	r0, r1
  405c78:	4611      	mov	r1, r2
  405c7a:	2200      	movs	r2, #0
  405c7c:	6022      	str	r2, [r4, #0]
  405c7e:	461a      	mov	r2, r3
  405c80:	f7fb fe70 	bl	401964 <_lseek>
  405c84:	1c43      	adds	r3, r0, #1
  405c86:	d102      	bne.n	405c8e <_lseek_r+0x1e>
  405c88:	6823      	ldr	r3, [r4, #0]
  405c8a:	b103      	cbz	r3, 405c8e <_lseek_r+0x1e>
  405c8c:	602b      	str	r3, [r5, #0]
  405c8e:	bd38      	pop	{r3, r4, r5, pc}
  405c90:	20400734 	.word	0x20400734

00405c94 <__ascii_mbtowc>:
  405c94:	b082      	sub	sp, #8
  405c96:	b901      	cbnz	r1, 405c9a <__ascii_mbtowc+0x6>
  405c98:	a901      	add	r1, sp, #4
  405c9a:	b142      	cbz	r2, 405cae <__ascii_mbtowc+0x1a>
  405c9c:	b14b      	cbz	r3, 405cb2 <__ascii_mbtowc+0x1e>
  405c9e:	7813      	ldrb	r3, [r2, #0]
  405ca0:	600b      	str	r3, [r1, #0]
  405ca2:	7812      	ldrb	r2, [r2, #0]
  405ca4:	1c10      	adds	r0, r2, #0
  405ca6:	bf18      	it	ne
  405ca8:	2001      	movne	r0, #1
  405caa:	b002      	add	sp, #8
  405cac:	4770      	bx	lr
  405cae:	4610      	mov	r0, r2
  405cb0:	e7fb      	b.n	405caa <__ascii_mbtowc+0x16>
  405cb2:	f06f 0001 	mvn.w	r0, #1
  405cb6:	e7f8      	b.n	405caa <__ascii_mbtowc+0x16>

00405cb8 <__malloc_lock>:
  405cb8:	4770      	bx	lr

00405cba <__malloc_unlock>:
  405cba:	4770      	bx	lr

00405cbc <_read_r>:
  405cbc:	b538      	push	{r3, r4, r5, lr}
  405cbe:	4c07      	ldr	r4, [pc, #28]	; (405cdc <_read_r+0x20>)
  405cc0:	4605      	mov	r5, r0
  405cc2:	4608      	mov	r0, r1
  405cc4:	4611      	mov	r1, r2
  405cc6:	2200      	movs	r2, #0
  405cc8:	6022      	str	r2, [r4, #0]
  405cca:	461a      	mov	r2, r3
  405ccc:	f7fc fe9e 	bl	402a0c <_read>
  405cd0:	1c43      	adds	r3, r0, #1
  405cd2:	d102      	bne.n	405cda <_read_r+0x1e>
  405cd4:	6823      	ldr	r3, [r4, #0]
  405cd6:	b103      	cbz	r3, 405cda <_read_r+0x1e>
  405cd8:	602b      	str	r3, [r5, #0]
  405cda:	bd38      	pop	{r3, r4, r5, pc}
  405cdc:	20400734 	.word	0x20400734

00405ce0 <__ascii_wctomb>:
  405ce0:	b149      	cbz	r1, 405cf6 <__ascii_wctomb+0x16>
  405ce2:	2aff      	cmp	r2, #255	; 0xff
  405ce4:	bf85      	ittet	hi
  405ce6:	238a      	movhi	r3, #138	; 0x8a
  405ce8:	6003      	strhi	r3, [r0, #0]
  405cea:	700a      	strbls	r2, [r1, #0]
  405cec:	f04f 30ff 	movhi.w	r0, #4294967295
  405cf0:	bf98      	it	ls
  405cf2:	2001      	movls	r0, #1
  405cf4:	4770      	bx	lr
  405cf6:	4608      	mov	r0, r1
  405cf8:	4770      	bx	lr
  405cfa:	0000      	movs	r0, r0
  405cfc:	6e69205a 	.word	0x6e69205a
  405d00:	72726574 	.word	0x72726574
  405d04:	20747075 	.word	0x20747075
  405d08:	6925202d 	.word	0x6925202d
  405d0c:	203b0920 	.word	0x203b0920
  405d10:	7366666f 	.word	0x7366666f
  405d14:	3d207465 	.word	0x3d207465
  405d18:	20692520 	.word	0x20692520
  405d1c:	0000000a 	.word	0x0000000a
  405d20:	6e69205a 	.word	0x6e69205a
  405d24:	72726574 	.word	0x72726574
  405d28:	20747075 	.word	0x20747075
  405d2c:	6564202d 	.word	0x6564202d
  405d30:	2061746c 	.word	0x2061746c
  405d34:	6925203d 	.word	0x6925203d
  405d38:	00000a20 	.word	0x00000a20
  405d3c:	20534f50 	.word	0x20534f50
  405d40:	00000a31 	.word	0x00000a31
  405d44:	20534f50 	.word	0x20534f50
  405d48:	00000a33 	.word	0x00000a33
  405d4c:	65746e69 	.word	0x65746e69
  405d50:	70757272 	.word	0x70757272
  405d54:	202d2074 	.word	0x202d2074
  405d58:	20434441 	.word	0x20434441
  405d5c:	202d2030 	.word	0x202d2030
  405d60:	25206925 	.word	0x25206925
  405d64:	69252069 	.word	0x69252069
  405d68:	20692520 	.word	0x20692520
  405d6c:	25206925 	.word	0x25206925
  405d70:	0a202069 	.word	0x0a202069
  405d74:	00000000 	.word	0x00000000
  405d78:	61746144 	.word	0x61746144
  405d7c:	6c6f6320 	.word	0x6c6f6320
  405d80:	7463656c 	.word	0x7463656c
  405d84:	202c6465 	.word	0x202c6465
  405d88:	6e75616c 	.word	0x6e75616c
  405d8c:	6e696863 	.word	0x6e696863
  405d90:	6f632067 	.word	0x6f632067
  405d94:	6f72746e 	.word	0x6f72746e
  405d98:	6f6c206c 	.word	0x6f6c206c
  405d9c:	6620706f 	.word	0x6620706f
  405da0:	206d6f72 	.word	0x206d6f72
  405da4:	20636461 	.word	0x20636461
  405da8:	00000a30 	.word	0x00000a30
  405dac:	65746e69 	.word	0x65746e69
  405db0:	70757272 	.word	0x70757272
  405db4:	202d2074 	.word	0x202d2074
  405db8:	20434441 	.word	0x20434441
  405dbc:	202d2031 	.word	0x202d2031
  405dc0:	25206925 	.word	0x25206925
  405dc4:	69252069 	.word	0x69252069
  405dc8:	20692520 	.word	0x20692520
  405dcc:	00000a20 	.word	0x00000a20
  405dd0:	61746144 	.word	0x61746144
  405dd4:	6c6f6320 	.word	0x6c6f6320
  405dd8:	7463656c 	.word	0x7463656c
  405ddc:	202c6465 	.word	0x202c6465
  405de0:	6e75616c 	.word	0x6e75616c
  405de4:	6e696863 	.word	0x6e696863
  405de8:	6f632067 	.word	0x6f632067
  405dec:	6f72746e 	.word	0x6f72746e
  405df0:	6f6c206c 	.word	0x6f6c206c
  405df4:	6620706f 	.word	0x6620706f
  405df8:	206d6f72 	.word	0x206d6f72
  405dfc:	20636461 	.word	0x20636461
  405e00:	000a2031 	.word	0x000a2031
  405e04:	4441200a 	.word	0x4441200a
  405e08:	65542043 	.word	0x65542043
  405e0c:	7265706d 	.word	0x7265706d
  405e10:	72757461 	.word	0x72757461
  405e14:	65542065 	.word	0x65542065
  405e18:	6e697473 	.word	0x6e697473
  405e1c:	2d2d2067 	.word	0x2d2d2067
  405e20:	2d2d2d2d 	.word	0x2d2d2d2d
  405e24:	2d2d2d2d 	.word	0x2d2d2d2d
  405e28:	2d2d2d2d 	.word	0x2d2d2d2d
  405e2c:	0a2d2d2d 	.word	0x0a2d2d2d
  405e30:	00000000 	.word	0x00000000
  405e34:	20776152 	.word	0x20776152
  405e38:	61746144 	.word	0x61746144
  405e3c:	00000a20 	.word	0x00000a20
  405e40:	706d6554 	.word	0x706d6554
  405e44:	203d2031 	.word	0x203d2031
  405e48:	09206925 	.word	0x09206925
  405e4c:	65542009 	.word	0x65542009
  405e50:	2032706d 	.word	0x2032706d
  405e54:	6925203d 	.word	0x6925203d
  405e58:	20090920 	.word	0x20090920
  405e5c:	706d6554 	.word	0x706d6554
  405e60:	203d2033 	.word	0x203d2033
  405e64:	0a206925 	.word	0x0a206925
  405e68:	00000000 	.word	0x00000000
  405e6c:	706d6554 	.word	0x706d6554
  405e70:	203d2034 	.word	0x203d2034
  405e74:	09206925 	.word	0x09206925
  405e78:	65542009 	.word	0x65542009
  405e7c:	2035706d 	.word	0x2035706d
  405e80:	6925203d 	.word	0x6925203d
  405e84:	20090920 	.word	0x20090920
  405e88:	706d6554 	.word	0x706d6554
  405e8c:	203d2036 	.word	0x203d2036
  405e90:	0a206925 	.word	0x0a206925
  405e94:	00000000 	.word	0x00000000
  405e98:	706d6554 	.word	0x706d6554
  405e9c:	746f4d20 	.word	0x746f4d20
  405ea0:	3d20726f 	.word	0x3d20726f
  405ea4:	20692520 	.word	0x20692520
  405ea8:	00000a20 	.word	0x00000a20
  405eac:	7543200a 	.word	0x7543200a
  405eb0:	6e657272 	.word	0x6e657272
  405eb4:	6e612074 	.word	0x6e612074
  405eb8:	6f562064 	.word	0x6f562064
  405ebc:	6761746c 	.word	0x6761746c
  405ec0:	65542065 	.word	0x65542065
  405ec4:	6e697473 	.word	0x6e697473
  405ec8:	2d2d2067 	.word	0x2d2d2067
  405ecc:	2d2d2d2d 	.word	0x2d2d2d2d
  405ed0:	2d2d2d2d 	.word	0x2d2d2d2d
  405ed4:	2d2d2d2d 	.word	0x2d2d2d2d
  405ed8:	0a2d2d2d 	.word	0x0a2d2d2d
  405edc:	00000000 	.word	0x00000000
  405ee0:	72727543 	.word	0x72727543
  405ee4:	203d2041 	.word	0x203d2041
  405ee8:	09206925 	.word	0x09206925
  405eec:	75432009 	.word	0x75432009
  405ef0:	20427272 	.word	0x20427272
  405ef4:	6925203d 	.word	0x6925203d
  405ef8:	20090920 	.word	0x20090920
  405efc:	72727543 	.word	0x72727543
  405f00:	203d2043 	.word	0x203d2043
  405f04:	0a206925 	.word	0x0a206925
  405f08:	00000000 	.word	0x00000000
  405f0c:	70707553 	.word	0x70707553
  405f10:	5620796c 	.word	0x5620796c
  405f14:	61746c6f 	.word	0x61746c6f
  405f18:	3d206567 	.word	0x3d206567
  405f1c:	20692520 	.word	0x20692520
  405f20:	00000a20 	.word	0x00000a20
  405f24:	746c6544 	.word	0x746c6544
  405f28:	3d207361 	.word	0x3d207361
  405f2c:	20662520 	.word	0x20662520
  405f30:	66252009 	.word	0x66252009
  405f34:	0000000a 	.word	0x0000000a
  405f38:	72727543 	.word	0x72727543
  405f3c:	6d697420 	.word	0x6d697420
  405f40:	203d2065 	.word	0x203d2065
  405f44:	000a6625 	.word	0x000a6625
  405f48:	203d206b 	.word	0x203d206b
  405f4c:	0a206925 	.word	0x0a206925
  405f50:	00000000 	.word	0x00000000
  405f54:	74736554 	.word	0x74736554
  405f58:	20676e69 	.word	0x20676e69
  405f5c:	656d6954 	.word	0x656d6954
  405f60:	6f432072 	.word	0x6f432072
  405f64:	65746e75 	.word	0x65746e75
  405f68:	00007372 	.word	0x00007372
  405f6c:	6f636e45 	.word	0x6f636e45
  405f70:	20726564 	.word	0x20726564
  405f74:	203d2041 	.word	0x203d2041
  405f78:	75252009 	.word	0x75252009
  405f7c:	09203b20 	.word	0x09203b20
  405f80:	20752520 	.word	0x20752520
  405f84:	0000000a 	.word	0x0000000a
  405f88:	6f636e45 	.word	0x6f636e45
  405f8c:	20726564 	.word	0x20726564
  405f90:	203d2042 	.word	0x203d2042
  405f94:	75252009 	.word	0x75252009
  405f98:	09203b20 	.word	0x09203b20
  405f9c:	20752520 	.word	0x20752520
  405fa0:	00000a0a 	.word	0x00000a0a
  405fa4:	6f636e45 	.word	0x6f636e45
  405fa8:	20726564 	.word	0x20726564
  405fac:	6e756f63 	.word	0x6e756f63
  405fb0:	20726574 	.word	0x20726574
  405fb4:	6925203d 	.word	0x6925203d
  405fb8:	203b0920 	.word	0x203b0920
  405fbc:	6c676e61 	.word	0x6c676e61
  405fc0:	203d2065 	.word	0x203d2065
  405fc4:	0a206625 	.word	0x0a206625
  405fc8:	00000000 	.word	0x00000000
  405fcc:	682f2e2e 	.word	0x682f2e2e
  405fd0:	732f6c61 	.word	0x732f6c61
  405fd4:	682f6372 	.word	0x682f6372
  405fd8:	615f6c61 	.word	0x615f6c61
  405fdc:	615f6364 	.word	0x615f6364
  405fe0:	636e7973 	.word	0x636e7973
  405fe4:	0000632e 	.word	0x0000632e
  405fe8:	682f2e2e 	.word	0x682f2e2e
  405fec:	732f6c61 	.word	0x732f6c61
  405ff0:	682f6372 	.word	0x682f6372
  405ff4:	695f6c61 	.word	0x695f6c61
  405ff8:	00632e6f 	.word	0x00632e6f
  405ffc:	682f2e2e 	.word	0x682f2e2e
  406000:	732f6c61 	.word	0x732f6c61
  406004:	682f6372 	.word	0x682f6372
  406008:	705f6c61 	.word	0x705f6c61
  40600c:	632e6d77 	.word	0x632e6d77
  406010:	00000000 	.word	0x00000000
  406014:	682f2e2e 	.word	0x682f2e2e
  406018:	732f6c61 	.word	0x732f6c61
  40601c:	682f6372 	.word	0x682f6372
  406020:	745f6c61 	.word	0x745f6c61
  406024:	72656d69 	.word	0x72656d69
  406028:	0000632e 	.word	0x0000632e
  40602c:	682f2e2e 	.word	0x682f2e2e
  406030:	732f6c61 	.word	0x732f6c61
  406034:	682f6372 	.word	0x682f6372
  406038:	755f6c61 	.word	0x755f6c61
  40603c:	74726173 	.word	0x74726173
  406040:	6e79735f 	.word	0x6e79735f
  406044:	00632e63 	.word	0x00632e63
  406048:	682f2e2e 	.word	0x682f2e2e
  40604c:	752f6c61 	.word	0x752f6c61
  406050:	736c6974 	.word	0x736c6974
  406054:	6372732f 	.word	0x6372732f
  406058:	6974752f 	.word	0x6974752f
  40605c:	6c5f736c 	.word	0x6c5f736c
  406060:	2e747369 	.word	0x2e747369
  406064:	00000063 	.word	0x00000063
  406068:	682f2e2e 	.word	0x682f2e2e
  40606c:	752f6c61 	.word	0x752f6c61
  406070:	736c6974 	.word	0x736c6974
  406074:	6372732f 	.word	0x6372732f
  406078:	6974752f 	.word	0x6974752f
  40607c:	725f736c 	.word	0x725f736c
  406080:	62676e69 	.word	0x62676e69
  406084:	65666675 	.word	0x65666675
  406088:	00632e72 	.word	0x00632e72

0040608c <_afecs>:
  40608c:	00000000 2f84310b 23000000 ffffffff     .....1./...#....
  40609c:	0000ffff 00000000 00000000 00000000     ................
  4060ac:	0000010c 00000000 00000000 00000000     ................
  4060bc:	00000000 00000200 00000200 00000200     ................
  4060cc:	00000200 00000200 00000200 00000200     ................
  4060dc:	00000200 00000200 00000200 00000200     ................
  4060ec:	00000200 00000001 2f84310b 23000000     .........1./...#
  4060fc:	ffffffff 0000ffff 00000000 00000000     ................
  40610c:	00000000 0000010c 00000000 00000000     ................
	...
  406124:	00000200 00000200 00000200 00000200     ................
  406134:	00000200 00000200 00000200 00000200     ................
  406144:	00000200 00000200 00000200 00000200     ................
  406154:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  406164:	63656661 0000632e                       afec.c..

0040616c <_ext_irq>:
  40616c:	00000000 00000024 00000000 00000000     ....$...........
	...
  406188:	00000001 00002000 00002000 00002000     ..... ... ... ..
  406198:	00000000 00002000 00000000 00000003     ..... ..........
  4061a8:	00080000 00000000 00000000 00000000     ................
	...

004061c0 <_pio_irq_n>:
  4061c0:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  4061d0:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  4061e0:	00000000                                ....

004061e4 <_pwms>:
  4061e4:	40020000 0000001f 00010019 00000001     ...@............
  4061f4:	00000001 000000ff 00000000 00000004     ................
	...
  406210:	00000002 0040626c 00000001 2040038c     ....lb@.......@ 
  406220:	4005c000 0000003c 00010019 00000001     ...@<...........
  406230:	00000001 000000ff 00000000 00000004     ................
	...
  40624c:	00000001 0040625c 00000001 20400380     ....\b@.......@ 

0040625c <_ch_cfg1>:
  40625c:	00000000 0000010b 000003e8 00000200     ................

0040626c <_ch_cfg0>:
  40626c:	00000000 0000010b 000003e8 00000200     ................
  40627c:	00000002 0000010b 000003e8 00000200     ................
  40628c:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  40629c:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  4062ac:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

004062b8 <_usarts>:
  4062b8:	00000001 001008c0 000100f4 682f2e2e     ............../h
  4062c8:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  4062d8:	632e7472 00000000                       rt.c....

004062e0 <_cfgs>:
  4062e0:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  4062f0:	00000040 00000000 00000040 00000000     @.......@.......
  406300:	00000040 00000000 00000040 00000000     @.......@.......
  406310:	00000040 00000000 00000040 00000000     @.......@.......
  406320:	00000040 00000000 00000040 00000000     @.......@.......
  406330:	00000040 00000000 00000040 00000000     @.......@.......
  406340:	00000040 00000000 00000040 00000000     @.......@.......
  406350:	00000040 00000000 00000040 00000000     @.......@.......
  406360:	00000040 00000000 00000040 00000000     @.......@.......
  406370:	00000040 00000000 00000040 00000000     @.......@.......
  406380:	00000040 00000000 00000040 00000000     @.......@.......
  406390:	00000040 00000000 00000040 00000000     @.......@.......

004063a0 <_global_impure_ptr>:
  4063a0:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  4063b0:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  4063c0:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  4063d0:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  4063e0:	4e614e00 00000000                       .NaN....

004063e8 <__sf_fake_stderr>:
	...

00406408 <__sf_fake_stdin>:
	...

00406428 <__sf_fake_stdout>:
	...

00406448 <__mprec_bigtens>:
  406448:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  406458:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  406468:	7f73bf3c 75154fdd                       <.s..O.u

00406470 <__mprec_tens>:
  406470:	00000000 3ff00000 00000000 40240000     .......?......$@
  406480:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  406490:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4064a0:	00000000 412e8480 00000000 416312d0     .......A......cA
  4064b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4064c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4064d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4064e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4064f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406500:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  406510:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406520:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406530:	79d99db4 44ea7843                       ...yCx.D

00406538 <p05.6047>:
  406538:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  406548:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  406558:	5849534f 00002e00                                OSIX...

0040655f <_ctype_>:
  40655f:	20202000 20202020 28282020 20282828     .         ((((( 
  40656f:	20202020 20202020 20202020 20202020                     
  40657f:	10108820 10101010 10101010 10101010      ...............
  40658f:	04040410 04040404 10040404 10101010     ................
  40659f:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4065af:	01010101 01010101 01010101 10101010     ................
  4065bf:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4065cf:	02020202 02020202 02020202 10101010     ................
  4065df:	00000020 00000000 00000000 00000000      ...............
	...

00406660 <_init>:
  406660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406662:	bf00      	nop
  406664:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406666:	bc08      	pop	{r3}
  406668:	469e      	mov	lr, r3
  40666a:	4770      	bx	lr

0040666c <__init_array_start>:
  40666c:	0040018d 	.word	0x0040018d

00406670 <_fini>:
  406670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406672:	bf00      	nop
  406674:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406676:	bc08      	pop	{r3}
  406678:	469e      	mov	lr, r3
  40667a:	4770      	bx	lr

0040667c <__fini_array_start>:
  40667c:	00400169 	.word	0x00400169
