
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e38  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  00406e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000620  20400218  00407050  00020218  2**2
                  ALLOC
  3 .heap         00000200  20400838  00407670  00020218  2**0
                  ALLOC
  4 .stack        00000400  20400a38  00407870  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      000000c7  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   000344b8  00000000  00000000  0002030d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000653d  00000000  00000000  000547c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000db59  00000000  00000000  0005ad02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000fb0  00000000  00000000  0006885b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e80  00000000  00000000  0006980b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0004ba6e  00000000  00000000  0006a68b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000256a2  00000000  00000000  000b60f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00159694  00000000  00000000  000db79b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000034a4  00000000  00000000  00234e30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	38 0e 40 20 d9 11 40 00 d5 11 40 00 d5 11 40 00     8.@ ..@...@...@.
  400010:	d5 11 40 00 d5 11 40 00 d5 11 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d5 11 40 00 d5 11 40 00 00 00 00 00 d5 11 40 00     ..@...@.......@.
  40003c:	d5 11 40 00 d5 11 40 00 d5 11 40 00 d5 11 40 00     ..@...@...@...@.
  40004c:	d5 11 40 00 d5 11 40 00 d5 11 40 00 d5 11 40 00     ..@...@...@...@.
  40005c:	d5 11 40 00 d5 11 40 00 00 00 00 00 75 26 40 00     ..@...@.....u&@.
  40006c:	69 26 40 00 d5 11 40 00 d5 11 40 00 d5 11 40 00     i&@...@...@...@.
  40007c:	d5 11 40 00 5d 26 40 00 d5 11 40 00 d5 11 40 00     ..@.]&@...@...@.
  40008c:	d5 11 40 00 d5 11 40 00 d5 11 40 00 d5 11 40 00     ..@...@...@...@.
  40009c:	99 2c 40 00 d5 11 40 00 d5 11 40 00 d5 11 40 00     .,@...@...@...@.
  4000ac:	d5 11 40 00 d5 11 40 00 25 22 40 00 d5 11 40 00     ..@...@.%"@...@.
  4000bc:	29 28 40 00 d5 11 40 00 d5 11 40 00 d5 11 40 00     )(@...@...@...@.
  4000cc:	d5 11 40 00 d5 11 40 00 0d 24 40 00 d5 11 40 00     ..@...@..$@...@.
  4000dc:	d5 11 40 00 39 22 40 00 d5 11 40 00 d5 11 40 00     ..@.9"@...@...@.
  4000ec:	d5 11 40 00 d5 11 40 00 d5 11 40 00 d5 11 40 00     ..@...@...@...@.
  4000fc:	d5 11 40 00 d5 11 40 00 d5 11 40 00 ad 2c 40 00     ..@...@...@..,@.
  40010c:	d5 11 40 00 d5 11 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 d5 11 40 00 d5 11 40 00 09 30 40 00     ......@...@..0@.
  40012c:	d5 11 40 00 3d 28 40 00 d5 11 40 00 d5 11 40 00     ..@.=(@...@...@.
  40013c:	d5 11 40 00 d5 11 40 00 d5 11 40 00 d5 11 40 00     ..@...@...@...@.
  40014c:	d5 11 40 00 d5 11 40 00 d5 11 40 00 d5 11 40 00     ..@...@...@...@.
  40015c:	d5 11 40 00 d5 11 40 00 d5 11 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	00406e38 	.word	0x00406e38

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406e38 	.word	0x00406e38
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	00406e38 	.word	0x00406e38
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	004016b1 	.word	0x004016b1
  4001e4:	0040322d 	.word	0x0040322d

004001e8 <Init_Control>:
#include "ControlStartup.h"
#include "EstimateTheta.h"

#include <atmel_start.h>

void Init_Control(void) {
  4001e8:	b570      	push	{r4, r5, r6, lr}
  4001ea:	b082      	sub	sp, #8
	arm_mat_init_f32 (&A,A_rows,A_cols,(float32_t *)A_data);    //MATRIX EXAMPLE
  4001ec:	4b11      	ldr	r3, [pc, #68]	; (400234 <Init_Control+0x4c>)
  4001ee:	2202      	movs	r2, #2
  4001f0:	2103      	movs	r1, #3
  4001f2:	4811      	ldr	r0, [pc, #68]	; (400238 <Init_Control+0x50>)
  4001f4:	4c11      	ldr	r4, [pc, #68]	; (40023c <Init_Control+0x54>)
  4001f6:	47a0      	blx	r4
	arm_mat_init_f32 (&I,I_rows,I_cols,(float32_t *)control_currents);    //create current vector
  4001f8:	4b11      	ldr	r3, [pc, #68]	; (400240 <Init_Control+0x58>)
  4001fa:	2201      	movs	r2, #1
  4001fc:	2103      	movs	r1, #3
  4001fe:	4811      	ldr	r0, [pc, #68]	; (400244 <Init_Control+0x5c>)
  400200:	47a0      	blx	r4
	arm_mat_init_f32 (&PWM,PWM_rows,PWM_cols,(float32_t *)PWM_data);    //create pwm vector
  400202:	4b11      	ldr	r3, [pc, #68]	; (400248 <Init_Control+0x60>)
  400204:	2201      	movs	r2, #1
  400206:	2103      	movs	r1, #3
  400208:	4810      	ldr	r0, [pc, #64]	; (40024c <Init_Control+0x64>)
  40020a:	47a0      	blx	r4
	
	PID_init_cts(&PID_d, PID_d_Kp, PID_d_Ki, PID_d_Kd,(float)1/15000);		//initialise the PID controller for d and q values
  40020c:	2400      	movs	r4, #0
  40020e:	4e10      	ldr	r6, [pc, #64]	; (400250 <Init_Control+0x68>)
  400210:	9600      	str	r6, [sp, #0]
  400212:	4623      	mov	r3, r4
  400214:	4a0f      	ldr	r2, [pc, #60]	; (400254 <Init_Control+0x6c>)
  400216:	4910      	ldr	r1, [pc, #64]	; (400258 <Init_Control+0x70>)
  400218:	4810      	ldr	r0, [pc, #64]	; (40025c <Init_Control+0x74>)
  40021a:	4d11      	ldr	r5, [pc, #68]	; (400260 <Init_Control+0x78>)
  40021c:	47a8      	blx	r5
	PID_init_cts(&PID_q, PID_q_Kp, PID_q_Ki, PID_q_Kd,(float)1/15000);
  40021e:	9600      	str	r6, [sp, #0]
  400220:	4623      	mov	r3, r4
  400222:	4a10      	ldr	r2, [pc, #64]	; (400264 <Init_Control+0x7c>)
  400224:	4910      	ldr	r1, [pc, #64]	; (400268 <Init_Control+0x80>)
  400226:	4811      	ldr	r0, [pc, #68]	; (40026c <Init_Control+0x84>)
  400228:	47a8      	blx	r5
	
	oldtorquerequest = 0;
  40022a:	4b11      	ldr	r3, [pc, #68]	; (400270 <Init_Control+0x88>)
  40022c:	601c      	str	r4, [r3, #0]
}
  40022e:	b002      	add	sp, #8
  400230:	bd70      	pop	{r4, r5, r6, pc}
  400232:	bf00      	nop
  400234:	204004d4 	.word	0x204004d4
  400238:	204004ec 	.word	0x204004ec
  40023c:	0040324d 	.word	0x0040324d
  400240:	20400578 	.word	0x20400578
  400244:	20400550 	.word	0x20400550
  400248:	2040055c 	.word	0x2040055c
  40024c:	20400540 	.word	0x20400540
  400250:	388bcf65 	.word	0x388bcf65
  400254:	431a2794 	.word	0x431a2794
  400258:	3f1aa32f 	.word	0x3f1aa32f
  40025c:	20400520 	.word	0x20400520
  400260:	00400481 	.word	0x00400481
  400264:	43227a93 	.word	0x43227a93
  400268:	3f29dbab 	.word	0x3f29dbab
  40026c:	204004f8 	.word	0x204004f8
  400270:	2040053c 	.word	0x2040053c

00400274 <gather_control_data>:




//get position data, timing and torque request
void gather_control_data(void){
  400274:	b508      	push	{r3, lr}
	//get torque request
	control_torque_request = 0;
  400276:	2200      	movs	r2, #0
  400278:	4b05      	ldr	r3, [pc, #20]	; (400290 <gather_control_data+0x1c>)
  40027a:	601a      	str	r2, [r3, #0]
	
	get_Data_Pos(&(control_pos_sens_deltas[0]), &control_pos_sens_sector, &control_pos_sens_time_in_current_sector);
  40027c:	4a05      	ldr	r2, [pc, #20]	; (400294 <gather_control_data+0x20>)
  40027e:	4906      	ldr	r1, [pc, #24]	; (400298 <gather_control_data+0x24>)
  400280:	4806      	ldr	r0, [pc, #24]	; (40029c <gather_control_data+0x28>)
  400282:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <gather_control_data+0x2c>)
  400284:	4798      	blx	r3
	
	
	//do last as this is the most frequently updated data
	encoder_get_angle(& control_encoder_angle);
  400286:	4807      	ldr	r0, [pc, #28]	; (4002a4 <gather_control_data+0x30>)
  400288:	4b07      	ldr	r3, [pc, #28]	; (4002a8 <gather_control_data+0x34>)
  40028a:	4798      	blx	r3
  40028c:	bd08      	pop	{r3, pc}
  40028e:	bf00      	nop
  400290:	20400574 	.word	0x20400574
  400294:	204004d0 	.word	0x204004d0
  400298:	2040051c 	.word	0x2040051c
  40029c:	20400548 	.word	0x20400548
  4002a0:	00400ac1 	.word	0x00400ac1
  4002a4:	204004cc 	.word	0x204004cc
  4002a8:	004008a9 	.word	0x004008a9
  4002ac:	00000000 	.word	0x00000000

004002b0 <start_control_loop_dummy>:
float fy_z0, fy_z1, fy_z2, fy_z3, fy_z4;
float fx_z0, fx_z1, fx_z2, fx_z3, fx_z4;
int fcntr;
//process ADC data and start the control loop
//this is being called from the ADC DMA, so we know that the analog sensor values passed are not going to change, hence use pointers instead of copyin data
void start_control_loop_dummy(int * raw_currents, int raw_voltage){
  4002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4002b4:	ed2d 8b02 	vpush	{d8}
  4002b8:	b08a      	sub	sp, #40	; 0x28
  4002ba:	4604      	mov	r4, r0
  4002bc:	468a      	mov	sl, r1
	//control_currents[0] = reconstruct_curr_A(raw_currents[0]);
	
	fx_z0 = reconstruct_curr_A(raw_currents[0]);
  4002be:	6800      	ldr	r0, [r0, #0]
  4002c0:	4b55      	ldr	r3, [pc, #340]	; (400418 <start_control_loop_dummy+0x168>)
  4002c2:	4798      	blx	r3
  4002c4:	4607      	mov	r7, r0
  4002c6:	4b55      	ldr	r3, [pc, #340]	; (40041c <start_control_loop_dummy+0x16c>)
  4002c8:	6018      	str	r0, [r3, #0]
	//fy_z0 = 0.023 * fy_z1 + 0.511 * fx_z0 + 0.511 * fx_z1;	//5khz cutoff
	fy_z0 = -0.522 * fy_z1 + 0.239 * fx_z0 + 0.239 * fx_z1;	//3khz cutoff
  4002ca:	4e55      	ldr	r6, [pc, #340]	; (400420 <start_control_loop_dummy+0x170>)
  4002cc:	4b55      	ldr	r3, [pc, #340]	; (400424 <start_control_loop_dummy+0x174>)
  4002ce:	6818      	ldr	r0, [r3, #0]
  4002d0:	47b0      	blx	r6
  4002d2:	4d55      	ldr	r5, [pc, #340]	; (400428 <start_control_loop_dummy+0x178>)
  4002d4:	a34c      	add	r3, pc, #304	; (adr r3, 400408 <start_control_loop_dummy+0x158>)
  4002d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002da:	47a8      	blx	r5
  4002dc:	4680      	mov	r8, r0
  4002de:	4689      	mov	r9, r1
  4002e0:	4638      	mov	r0, r7
  4002e2:	47b0      	blx	r6
  4002e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
  4002e8:	a349      	add	r3, pc, #292	; (adr r3, 400410 <start_control_loop_dummy+0x160>)
  4002ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002ee:	47a8      	blx	r5
  4002f0:	4f4e      	ldr	r7, [pc, #312]	; (40042c <start_control_loop_dummy+0x17c>)
  4002f2:	4602      	mov	r2, r0
  4002f4:	460b      	mov	r3, r1
  4002f6:	4640      	mov	r0, r8
  4002f8:	4649      	mov	r1, r9
  4002fa:	47b8      	blx	r7
  4002fc:	4680      	mov	r8, r0
  4002fe:	4689      	mov	r9, r1
  400300:	4b4b      	ldr	r3, [pc, #300]	; (400430 <start_control_loop_dummy+0x180>)
  400302:	6818      	ldr	r0, [r3, #0]
  400304:	47b0      	blx	r6
  400306:	ec41 0b18 	vmov	d8, r0, r1
  40030a:	a341      	add	r3, pc, #260	; (adr r3, 400410 <start_control_loop_dummy+0x160>)
  40030c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400310:	47a8      	blx	r5
  400312:	4602      	mov	r2, r0
  400314:	460b      	mov	r3, r1
  400316:	4640      	mov	r0, r8
  400318:	4649      	mov	r1, r9
  40031a:	47b8      	blx	r7
  40031c:	4b45      	ldr	r3, [pc, #276]	; (400434 <start_control_loop_dummy+0x184>)
  40031e:	4798      	blx	r3
  400320:	4b45      	ldr	r3, [pc, #276]	; (400438 <start_control_loop_dummy+0x188>)
  400322:	6018      	str	r0, [r3, #0]
	fcntr++;
  400324:	4a45      	ldr	r2, [pc, #276]	; (40043c <start_control_loop_dummy+0x18c>)
  400326:	6813      	ldr	r3, [r2, #0]
  400328:	3301      	adds	r3, #1
  40032a:	6013      	str	r3, [r2, #0]
	if(fcntr == 15000){
  40032c:	f643 2298 	movw	r2, #15000	; 0x3a98
  400330:	4293      	cmp	r3, r2
  400332:	d030      	beq.n	400396 <start_control_loop_dummy+0xe6>
		fcntr =0;
		printf("X = %f \t %f \t %f \t %f \t %f \t \n",fx_z0, fx_z1, fx_z2, fx_z3, fx_z4);
		printf("Y = %f \t %f \t %f \t %f \t %f \t \n",fy_z0, fy_z1, fy_z2, fy_z3, fy_z4);
	}
	
	fx_z4 = fx_z3;
  400334:	4b42      	ldr	r3, [pc, #264]	; (400440 <start_control_loop_dummy+0x190>)
  400336:	6819      	ldr	r1, [r3, #0]
  400338:	4a42      	ldr	r2, [pc, #264]	; (400444 <start_control_loop_dummy+0x194>)
  40033a:	6011      	str	r1, [r2, #0]
	fx_z3 = fx_z2;
  40033c:	4a42      	ldr	r2, [pc, #264]	; (400448 <start_control_loop_dummy+0x198>)
  40033e:	6811      	ldr	r1, [r2, #0]
  400340:	6019      	str	r1, [r3, #0]
	fx_z2 = fx_z1;
  400342:	4b3b      	ldr	r3, [pc, #236]	; (400430 <start_control_loop_dummy+0x180>)
  400344:	6819      	ldr	r1, [r3, #0]
  400346:	6011      	str	r1, [r2, #0]
	fx_z1 = fx_z0;
  400348:	4a34      	ldr	r2, [pc, #208]	; (40041c <start_control_loop_dummy+0x16c>)
  40034a:	6812      	ldr	r2, [r2, #0]
  40034c:	601a      	str	r2, [r3, #0]
	
	fy_z4 = fy_z3;
  40034e:	4a3f      	ldr	r2, [pc, #252]	; (40044c <start_control_loop_dummy+0x19c>)
  400350:	6811      	ldr	r1, [r2, #0]
  400352:	4b3f      	ldr	r3, [pc, #252]	; (400450 <start_control_loop_dummy+0x1a0>)
  400354:	6019      	str	r1, [r3, #0]
	fy_z3 = fy_z2;
  400356:	4b3f      	ldr	r3, [pc, #252]	; (400454 <start_control_loop_dummy+0x1a4>)
  400358:	6819      	ldr	r1, [r3, #0]
  40035a:	6011      	str	r1, [r2, #0]
	fy_z2 = fy_z1;
  40035c:	4a31      	ldr	r2, [pc, #196]	; (400424 <start_control_loop_dummy+0x174>)
  40035e:	6811      	ldr	r1, [r2, #0]
  400360:	6019      	str	r1, [r3, #0]
	fy_z1 = fy_z0;
  400362:	4b35      	ldr	r3, [pc, #212]	; (400438 <start_control_loop_dummy+0x188>)
  400364:	681b      	ldr	r3, [r3, #0]
  400366:	6013      	str	r3, [r2, #0]
	control_currents[0] = fy_z0;
  400368:	4d3b      	ldr	r5, [pc, #236]	; (400458 <start_control_loop_dummy+0x1a8>)
  40036a:	602b      	str	r3, [r5, #0]
	
	
	
	
	control_currents[1] = reconstruct_curr_B(raw_currents[1]);
  40036c:	6860      	ldr	r0, [r4, #4]
  40036e:	4b3b      	ldr	r3, [pc, #236]	; (40045c <start_control_loop_dummy+0x1ac>)
  400370:	4798      	blx	r3
  400372:	6068      	str	r0, [r5, #4]
	control_currents[2] = reconstruct_curr_C(raw_currents[2]);
  400374:	68a0      	ldr	r0, [r4, #8]
  400376:	4b3a      	ldr	r3, [pc, #232]	; (400460 <start_control_loop_dummy+0x1b0>)
  400378:	4798      	blx	r3
  40037a:	60a8      	str	r0, [r5, #8]
	
	control_supply_voltage = reconstruct_bus_voltage(raw_voltage);
  40037c:	4650      	mov	r0, sl
  40037e:	4b39      	ldr	r3, [pc, #228]	; (400464 <start_control_loop_dummy+0x1b4>)
  400380:	4798      	blx	r3
  400382:	4b39      	ldr	r3, [pc, #228]	; (400468 <start_control_loop_dummy+0x1b8>)
  400384:	6018      	str	r0, [r3, #0]
	
	//for testing
	control_torque_request = 2.5;
  400386:	4a39      	ldr	r2, [pc, #228]	; (40046c <start_control_loop_dummy+0x1bc>)
  400388:	4b39      	ldr	r3, [pc, #228]	; (400470 <start_control_loop_dummy+0x1c0>)
  40038a:	601a      	str	r2, [r3, #0]
	
	//start control loop below
	//Control(control_torque_request, control_supply_voltage, control_pos_sens_sector, control_pos_sens_time_in_current_sector, &control_pos_sens_deltas, control_encoder_angle);
	//controlV(control_torque_request, control_supply_voltage, control_pos_sens_sector, control_pos_sens_time_in_current_sector, &control_pos_sens_deltas, control_encoder_angle);
  40038c:	b00a      	add	sp, #40	; 0x28
  40038e:	ecbd 8b02 	vpop	{d8}
  400392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		fcntr =0;
  400396:	2200      	movs	r2, #0
  400398:	4b28      	ldr	r3, [pc, #160]	; (40043c <start_control_loop_dummy+0x18c>)
  40039a:	601a      	str	r2, [r3, #0]
		printf("X = %f \t %f \t %f \t %f \t %f \t \n",fx_z0, fx_z1, fx_z2, fx_z3, fx_z4);
  40039c:	4635      	mov	r5, r6
  40039e:	4b29      	ldr	r3, [pc, #164]	; (400444 <start_control_loop_dummy+0x194>)
  4003a0:	6818      	ldr	r0, [r3, #0]
  4003a2:	47b0      	blx	r6
  4003a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4003a8:	4b25      	ldr	r3, [pc, #148]	; (400440 <start_control_loop_dummy+0x190>)
  4003aa:	6818      	ldr	r0, [r3, #0]
  4003ac:	47b0      	blx	r6
  4003ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4003b2:	4b25      	ldr	r3, [pc, #148]	; (400448 <start_control_loop_dummy+0x198>)
  4003b4:	6818      	ldr	r0, [r3, #0]
  4003b6:	47b0      	blx	r6
  4003b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4003bc:	ed8d 8b00 	vstr	d8, [sp]
  4003c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4003c4:	482b      	ldr	r0, [pc, #172]	; (400474 <start_control_loop_dummy+0x1c4>)
  4003c6:	4e2c      	ldr	r6, [pc, #176]	; (400478 <start_control_loop_dummy+0x1c8>)
  4003c8:	47b0      	blx	r6
		printf("Y = %f \t %f \t %f \t %f \t %f \t \n",fy_z0, fy_z1, fy_z2, fy_z3, fy_z4);
  4003ca:	4b1b      	ldr	r3, [pc, #108]	; (400438 <start_control_loop_dummy+0x188>)
  4003cc:	6818      	ldr	r0, [r3, #0]
  4003ce:	47a8      	blx	r5
  4003d0:	4680      	mov	r8, r0
  4003d2:	4689      	mov	r9, r1
  4003d4:	4b1e      	ldr	r3, [pc, #120]	; (400450 <start_control_loop_dummy+0x1a0>)
  4003d6:	6818      	ldr	r0, [r3, #0]
  4003d8:	47a8      	blx	r5
  4003da:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4003de:	4b1b      	ldr	r3, [pc, #108]	; (40044c <start_control_loop_dummy+0x19c>)
  4003e0:	6818      	ldr	r0, [r3, #0]
  4003e2:	47a8      	blx	r5
  4003e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4003e8:	4b1a      	ldr	r3, [pc, #104]	; (400454 <start_control_loop_dummy+0x1a4>)
  4003ea:	6818      	ldr	r0, [r3, #0]
  4003ec:	47a8      	blx	r5
  4003ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4003f2:	4b0c      	ldr	r3, [pc, #48]	; (400424 <start_control_loop_dummy+0x174>)
  4003f4:	6818      	ldr	r0, [r3, #0]
  4003f6:	47a8      	blx	r5
  4003f8:	e9cd 0100 	strd	r0, r1, [sp]
  4003fc:	4642      	mov	r2, r8
  4003fe:	464b      	mov	r3, r9
  400400:	481e      	ldr	r0, [pc, #120]	; (40047c <start_control_loop_dummy+0x1cc>)
  400402:	47b0      	blx	r6
  400404:	e796      	b.n	400334 <start_control_loop_dummy+0x84>
  400406:	bf00      	nop
  400408:	5810624e 	.word	0x5810624e
  40040c:	bfe0b439 	.word	0xbfe0b439
  400410:	4fdf3b64 	.word	0x4fdf3b64
  400414:	3fce978d 	.word	0x3fce978d
  400418:	004005d1 	.word	0x004005d1
  40041c:	20400618 	.word	0x20400618
  400420:	0040351d 	.word	0x0040351d
  400424:	204005ac 	.word	0x204005ac
  400428:	004035c5 	.word	0x004035c5
  40042c:	00403261 	.word	0x00403261
  400430:	204005b0 	.word	0x204005b0
  400434:	00403b75 	.word	0x00403b75
  400438:	20400608 	.word	0x20400608
  40043c:	2040061c 	.word	0x2040061c
  400440:	204005c0 	.word	0x204005c0
  400444:	204005d0 	.word	0x204005d0
  400448:	204005dc 	.word	0x204005dc
  40044c:	204005cc 	.word	0x204005cc
  400450:	204005ec 	.word	0x204005ec
  400454:	204005b8 	.word	0x204005b8
  400458:	20400578 	.word	0x20400578
  40045c:	00400621 	.word	0x00400621
  400460:	00400671 	.word	0x00400671
  400464:	00400497 	.word	0x00400497
  400468:	204004f4 	.word	0x204004f4
  40046c:	40200000 	.word	0x40200000
  400470:	20400574 	.word	0x20400574
  400474:	0040650c 	.word	0x0040650c
  400478:	00404541 	.word	0x00404541
  40047c:	0040652c 	.word	0x0040652c

00400480 <PID_init_cts>:




void PID_init_cts(struct PID_instance* PID,float Kp,float Ki,float Kd, float time_step){
	PID->Kd = Kd;
  400480:	6083      	str	r3, [r0, #8]
	PID->Ki = Ki;
  400482:	6042      	str	r2, [r0, #4]
	PID->Kp = Kp;							//sets gains
  400484:	6001      	str	r1, [r0, #0]
	PID->integral_v = 0;
  400486:	2300      	movs	r3, #0
  400488:	6103      	str	r3, [r0, #16]
	PID->previous_error = 0;
  40048a:	60c3      	str	r3, [r0, #12]
	PID->is_using_constant_timestep = true;
  40048c:	2301      	movs	r3, #1
  40048e:	7603      	strb	r3, [r0, #24]
	PID->time_step = time_step;
  400490:	9b00      	ldr	r3, [sp, #0]
  400492:	6143      	str	r3, [r0, #20]
  400494:	4770      	bx	lr

00400496 <reconstruct_bus_voltage>:


float reconstruct_bus_voltage(uint32_t raw_voltage_data){
	
	return 0;
}
  400496:	2000      	movs	r0, #0
  400498:	4770      	bx	lr
  40049a:	0000      	movs	r0, r0
  40049c:	0000      	movs	r0, r0
	...

004004a0 <raw_data_to_voltage>:
	
	return 0;
}


float raw_data_to_voltage(uint32_t analog_data){
  4004a0:	b510      	push	{r4, lr}
	//12 bit ADCs
	//Vref = 3.3V
	float voltage = (((float) analog_data) / (4096)) * 3.3;
  4004a2:	ee07 0a90 	vmov	s15, r0
  4004a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  4004aa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 4004d8 <raw_data_to_voltage+0x38>
  4004ae:	ee67 7a27 	vmul.f32	s15, s14, s15
  4004b2:	ee17 0a90 	vmov	r0, s15
  4004b6:	4b09      	ldr	r3, [pc, #36]	; (4004dc <raw_data_to_voltage+0x3c>)
  4004b8:	4798      	blx	r3
  4004ba:	a305      	add	r3, pc, #20	; (adr r3, 4004d0 <raw_data_to_voltage+0x30>)
  4004bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4004c0:	4c07      	ldr	r4, [pc, #28]	; (4004e0 <raw_data_to_voltage+0x40>)
  4004c2:	47a0      	blx	r4
  4004c4:	4b07      	ldr	r3, [pc, #28]	; (4004e4 <raw_data_to_voltage+0x44>)
  4004c6:	4798      	blx	r3
	//printf("raw data - %i \t voltage - %f \n",(int) analog_data, voltage);
	return voltage;
  4004c8:	bd10      	pop	{r4, pc}
  4004ca:	bf00      	nop
  4004cc:	f3af 8000 	nop.w
  4004d0:	66666666 	.word	0x66666666
  4004d4:	400a6666 	.word	0x400a6666
  4004d8:	39800000 	.word	0x39800000
  4004dc:	0040351d 	.word	0x0040351d
  4004e0:	004035c5 	.word	0x004035c5
  4004e4:	00403b75 	.word	0x00403b75

004004e8 <calibrate_curr_sensors>:
void calibrate_curr_sensors(void){
  4004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dma_adc_0_enable_for_one_transaction();
  4004ea:	4b2e      	ldr	r3, [pc, #184]	; (4005a4 <calibrate_curr_sensors+0xbc>)
  4004ec:	4798      	blx	r3
	dma_adc_1_enable_for_one_transaction();
  4004ee:	4b2e      	ldr	r3, [pc, #184]	; (4005a8 <calibrate_curr_sensors+0xc0>)
  4004f0:	4798      	blx	r3
	delay_ms(1);
  4004f2:	2001      	movs	r0, #1
  4004f4:	4b2d      	ldr	r3, [pc, #180]	; (4005ac <calibrate_curr_sensors+0xc4>)
  4004f6:	4798      	blx	r3
	curr_A_offset = 0;
  4004f8:	2300      	movs	r3, #0
  4004fa:	4a2d      	ldr	r2, [pc, #180]	; (4005b0 <calibrate_curr_sensors+0xc8>)
  4004fc:	6013      	str	r3, [r2, #0]
	curr_B_offset = 0;
  4004fe:	4a2d      	ldr	r2, [pc, #180]	; (4005b4 <calibrate_curr_sensors+0xcc>)
  400500:	6013      	str	r3, [r2, #0]
	curr_C_offset = 0;
  400502:	4a2d      	ldr	r2, [pc, #180]	; (4005b8 <calibrate_curr_sensors+0xd0>)
  400504:	6013      	str	r3, [r2, #0]
	for(int i =0; i<10; i++){
  400506:	2600      	movs	r6, #0
  400508:	e031      	b.n	40056e <calibrate_curr_sensors+0x86>
			dma_adc_0_enable_for_one_transaction();
  40050a:	4b26      	ldr	r3, [pc, #152]	; (4005a4 <calibrate_curr_sensors+0xbc>)
  40050c:	4798      	blx	r3
			dma_adc_1_enable_for_one_transaction();
  40050e:	4b26      	ldr	r3, [pc, #152]	; (4005a8 <calibrate_curr_sensors+0xc0>)
  400510:	4798      	blx	r3
			delay_ms(1);
  400512:	2001      	movs	r0, #1
  400514:	4b25      	ldr	r3, [pc, #148]	; (4005ac <calibrate_curr_sensors+0xc4>)
  400516:	4798      	blx	r3
		curr_A_offset += raw_data_to_voltage(adc_read(ADC_CURRENT_A));
  400518:	4f28      	ldr	r7, [pc, #160]	; (4005bc <calibrate_curr_sensors+0xd4>)
  40051a:	2108      	movs	r1, #8
  40051c:	4638      	mov	r0, r7
  40051e:	4d28      	ldr	r5, [pc, #160]	; (4005c0 <calibrate_curr_sensors+0xd8>)
  400520:	47a8      	blx	r5
  400522:	4c28      	ldr	r4, [pc, #160]	; (4005c4 <calibrate_curr_sensors+0xdc>)
  400524:	47a0      	blx	r4
  400526:	4b22      	ldr	r3, [pc, #136]	; (4005b0 <calibrate_curr_sensors+0xc8>)
  400528:	edd3 7a00 	vldr	s15, [r3]
  40052c:	ee07 0a10 	vmov	s14, r0
  400530:	ee77 7a87 	vadd.f32	s15, s15, s14
  400534:	edc3 7a00 	vstr	s15, [r3]
		curr_B_offset += raw_data_to_voltage(adc_read(ADC_CURRENT_B));
  400538:	2102      	movs	r1, #2
  40053a:	4638      	mov	r0, r7
  40053c:	47a8      	blx	r5
  40053e:	47a0      	blx	r4
  400540:	4b1c      	ldr	r3, [pc, #112]	; (4005b4 <calibrate_curr_sensors+0xcc>)
  400542:	edd3 7a00 	vldr	s15, [r3]
  400546:	ee07 0a10 	vmov	s14, r0
  40054a:	ee77 7a87 	vadd.f32	s15, s15, s14
  40054e:	edc3 7a00 	vstr	s15, [r3]
		curr_C_offset += raw_data_to_voltage(adc_read(ADC_CURRENT_C));
  400552:	2101      	movs	r1, #1
  400554:	481c      	ldr	r0, [pc, #112]	; (4005c8 <calibrate_curr_sensors+0xe0>)
  400556:	47a8      	blx	r5
  400558:	47a0      	blx	r4
  40055a:	4b17      	ldr	r3, [pc, #92]	; (4005b8 <calibrate_curr_sensors+0xd0>)
  40055c:	edd3 7a00 	vldr	s15, [r3]
  400560:	ee07 0a10 	vmov	s14, r0
  400564:	ee77 7a87 	vadd.f32	s15, s15, s14
  400568:	edc3 7a00 	vstr	s15, [r3]
	for(int i =0; i<10; i++){
  40056c:	3601      	adds	r6, #1
  40056e:	2e09      	cmp	r6, #9
  400570:	ddcb      	ble.n	40050a <calibrate_curr_sensors+0x22>
	curr_A_offset /= 10;
  400572:	4b0f      	ldr	r3, [pc, #60]	; (4005b0 <calibrate_curr_sensors+0xc8>)
  400574:	edd3 6a00 	vldr	s13, [r3]
  400578:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  40057c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  400580:	ed83 7a00 	vstr	s14, [r3]
	curr_B_offset /= 10;
  400584:	4b0b      	ldr	r3, [pc, #44]	; (4005b4 <calibrate_curr_sensors+0xcc>)
  400586:	edd3 6a00 	vldr	s13, [r3]
  40058a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  40058e:	ed83 7a00 	vstr	s14, [r3]
	curr_C_offset /= 10;
  400592:	4b09      	ldr	r3, [pc, #36]	; (4005b8 <calibrate_curr_sensors+0xd0>)
  400594:	edd3 6a00 	vldr	s13, [r3]
  400598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  40059c:	ed83 7a00 	vstr	s14, [r3]
  4005a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4005a2:	bf00      	nop
  4005a4:	00400b65 	.word	0x00400b65
  4005a8:	00400c3d 	.word	0x00400c3d
  4005ac:	00401a11 	.word	0x00401a11
  4005b0:	204005f4 	.word	0x204005f4
  4005b4:	204005fc 	.word	0x204005fc
  4005b8:	204005bc 	.word	0x204005bc
  4005bc:	20400730 	.word	0x20400730
  4005c0:	00400e9d 	.word	0x00400e9d
  4005c4:	004004a1 	.word	0x004004a1
  4005c8:	20400808 	.word	0x20400808
  4005cc:	00000000 	.word	0x00000000

004005d0 <reconstruct_curr_A>:
float reconstruct_curr_A(uint32_t raw_current_data){
  4005d0:	b510      	push	{r4, lr}
	float I = (raw_data_to_voltage(raw_current_data)   -   curr_A_offset)/CURR_A_SLOPE;
  4005d2:	4b0d      	ldr	r3, [pc, #52]	; (400608 <reconstruct_curr_A+0x38>)
  4005d4:	4798      	blx	r3
  4005d6:	4b0d      	ldr	r3, [pc, #52]	; (40060c <reconstruct_curr_A+0x3c>)
  4005d8:	edd3 7a00 	vldr	s15, [r3]
  4005dc:	ee07 0a10 	vmov	s14, r0
  4005e0:	ee77 7a67 	vsub.f32	s15, s14, s15
  4005e4:	ee17 0a90 	vmov	r0, s15
  4005e8:	4b09      	ldr	r3, [pc, #36]	; (400610 <reconstruct_curr_A+0x40>)
  4005ea:	4798      	blx	r3
  4005ec:	a304      	add	r3, pc, #16	; (adr r3, 400600 <reconstruct_curr_A+0x30>)
  4005ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  4005f2:	4c08      	ldr	r4, [pc, #32]	; (400614 <reconstruct_curr_A+0x44>)
  4005f4:	47a0      	blx	r4
  4005f6:	4b08      	ldr	r3, [pc, #32]	; (400618 <reconstruct_curr_A+0x48>)
  4005f8:	4798      	blx	r3
}
  4005fa:	bd10      	pop	{r4, pc}
  4005fc:	f3af 8000 	nop.w
  400600:	47ae147b 	.word	0x47ae147b
  400604:	3f747ae1 	.word	0x3f747ae1
  400608:	004004a1 	.word	0x004004a1
  40060c:	204005f4 	.word	0x204005f4
  400610:	0040351d 	.word	0x0040351d
  400614:	00403819 	.word	0x00403819
  400618:	00403b75 	.word	0x00403b75
  40061c:	00000000 	.word	0x00000000

00400620 <reconstruct_curr_B>:
float reconstruct_curr_B(uint32_t raw_current_data){
  400620:	b510      	push	{r4, lr}
	float I = (raw_data_to_voltage(raw_current_data)   -   curr_B_offset)/CURR_B_SLOPE;
  400622:	4b0d      	ldr	r3, [pc, #52]	; (400658 <reconstruct_curr_B+0x38>)
  400624:	4798      	blx	r3
  400626:	4b0d      	ldr	r3, [pc, #52]	; (40065c <reconstruct_curr_B+0x3c>)
  400628:	edd3 7a00 	vldr	s15, [r3]
  40062c:	ee07 0a10 	vmov	s14, r0
  400630:	ee77 7a67 	vsub.f32	s15, s14, s15
  400634:	ee17 0a90 	vmov	r0, s15
  400638:	4b09      	ldr	r3, [pc, #36]	; (400660 <reconstruct_curr_B+0x40>)
  40063a:	4798      	blx	r3
  40063c:	a304      	add	r3, pc, #16	; (adr r3, 400650 <reconstruct_curr_B+0x30>)
  40063e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400642:	4c08      	ldr	r4, [pc, #32]	; (400664 <reconstruct_curr_B+0x44>)
  400644:	47a0      	blx	r4
  400646:	4b08      	ldr	r3, [pc, #32]	; (400668 <reconstruct_curr_B+0x48>)
  400648:	4798      	blx	r3
}
  40064a:	bd10      	pop	{r4, pc}
  40064c:	f3af 8000 	nop.w
  400650:	47ae147b 	.word	0x47ae147b
  400654:	3f747ae1 	.word	0x3f747ae1
  400658:	004004a1 	.word	0x004004a1
  40065c:	204005fc 	.word	0x204005fc
  400660:	0040351d 	.word	0x0040351d
  400664:	00403819 	.word	0x00403819
  400668:	00403b75 	.word	0x00403b75
  40066c:	00000000 	.word	0x00000000

00400670 <reconstruct_curr_C>:
float reconstruct_curr_C(uint32_t raw_current_data){		
  400670:	b510      	push	{r4, lr}
	float I = (raw_data_to_voltage(raw_current_data)   -   curr_C_offset)/CURR_C_SLOPE;
  400672:	4b0d      	ldr	r3, [pc, #52]	; (4006a8 <reconstruct_curr_C+0x38>)
  400674:	4798      	blx	r3
  400676:	4b0d      	ldr	r3, [pc, #52]	; (4006ac <reconstruct_curr_C+0x3c>)
  400678:	edd3 7a00 	vldr	s15, [r3]
  40067c:	ee07 0a10 	vmov	s14, r0
  400680:	ee77 7a67 	vsub.f32	s15, s14, s15
  400684:	ee17 0a90 	vmov	r0, s15
  400688:	4b09      	ldr	r3, [pc, #36]	; (4006b0 <reconstruct_curr_C+0x40>)
  40068a:	4798      	blx	r3
  40068c:	a304      	add	r3, pc, #16	; (adr r3, 4006a0 <reconstruct_curr_C+0x30>)
  40068e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400692:	4c08      	ldr	r4, [pc, #32]	; (4006b4 <reconstruct_curr_C+0x44>)
  400694:	47a0      	blx	r4
  400696:	4b08      	ldr	r3, [pc, #32]	; (4006b8 <reconstruct_curr_C+0x48>)
  400698:	4798      	blx	r3
}
  40069a:	bd10      	pop	{r4, pc}
  40069c:	f3af 8000 	nop.w
  4006a0:	47ae147b 	.word	0x47ae147b
  4006a4:	3f747ae1 	.word	0x3f747ae1
  4006a8:	004004a1 	.word	0x004004a1
  4006ac:	204005bc 	.word	0x204005bc
  4006b0:	0040351d 	.word	0x0040351d
  4006b4:	00403819 	.word	0x00403819
  4006b8:	00403b75 	.word	0x00403b75

004006bc <encoder_init>:
		encoder_num_Z_interrupts ++;
	}
	encoder_last_count = encoder_counter_no_offset;
}

void encoder_init(void){
  4006bc:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4006be:	4b56      	ldr	r3, [pc, #344]	; (400818 <encoder_init+0x15c>)
  4006c0:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4006c2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  4006c6:	d103      	bne.n	4006d0 <encoder_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4006c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4006cc:	4b52      	ldr	r3, [pc, #328]	; (400818 <encoder_init+0x15c>)
  4006ce:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4006d0:	4b51      	ldr	r3, [pc, #324]	; (400818 <encoder_init+0x15c>)
  4006d2:	699b      	ldr	r3, [r3, #24]
  4006d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4006d8:	d103      	bne.n	4006e2 <encoder_init+0x26>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4006da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4006de:	4b4e      	ldr	r3, [pc, #312]	; (400818 <encoder_init+0x15c>)
  4006e0:	611a      	str	r2, [r3, #16]
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4006e2:	4b4d      	ldr	r3, [pc, #308]	; (400818 <encoder_init+0x15c>)
  4006e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4006e8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  4006ec:	d104      	bne.n	4006f8 <encoder_init+0x3c>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4006ee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4006f2:	4b49      	ldr	r3, [pc, #292]	; (400818 <encoder_init+0x15c>)
  4006f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4006f8:	4b47      	ldr	r3, [pc, #284]	; (400818 <encoder_init+0x15c>)
  4006fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  4006fe:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  400702:	d104      	bne.n	40070e <encoder_init+0x52>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400704:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400708:	4b43      	ldr	r3, [pc, #268]	; (400818 <encoder_init+0x15c>)
  40070a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	_pmc_enable_periph_clock(ID_TC3_CHANNEL1);
	
	
	//enable external interrupt on the Z line 
	ext_irq_register(PIO_PB13_IDX,Encoder_Z_Interrupt);
  40070e:	4943      	ldr	r1, [pc, #268]	; (40081c <encoder_init+0x160>)
  400710:	202d      	movs	r0, #45	; 0x2d
  400712:	4b43      	ldr	r3, [pc, #268]	; (400820 <encoder_init+0x164>)
  400714:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400716:	4b43      	ldr	r3, [pc, #268]	; (400824 <encoder_init+0x168>)
  400718:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40071c:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40071e:	2240      	movs	r2, #64	; 0x40
  400720:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400724:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40072c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400730:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400734:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400738:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40073c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400740:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400744:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400748:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40074c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400754:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400758:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40075c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400760:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400768:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40076c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400770:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  40077c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400780:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400784:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40078c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400790:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400794:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400798:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40079c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4007a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4007a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007a8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007ac:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4007b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4007b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007bc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007c0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4007c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4007cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007d0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007d4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4007dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4007e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007e4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007e8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4007f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4007f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007f8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007fc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400800:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400808:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40080c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400810:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400814:	bd08      	pop	{r3, pc}
  400816:	bf00      	nop
  400818:	400e0600 	.word	0x400e0600
  40081c:	00400845 	.word	0x00400845
  400820:	00401aa9 	.word	0x00401aa9
  400824:	e000e100 	.word	0xe000e100

00400828 <encoder_get_counter>:
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV(mask)) >> TC_CV_CV_Pos;
}

static inline hri_tc_cv_reg_t hri_tc_read_CV_CV_bf(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV_Msk) >> TC_CV_CV_Pos;
  400828:	4a05      	ldr	r2, [pc, #20]	; (400840 <encoder_get_counter+0x18>)
  40082a:	6913      	ldr	r3, [r2, #16]
  40082c:	6d10      	ldr	r0, [r2, #80]	; 0x50
	//if starting offset is 0 (which is the case before it was recorded) then it returns the actual counter
	
	
	//get A (first line) and B (second line) counters
	//note that rising and falling edges could be the other way round. It doesn't matter for the current implementation
	int encoder_counter_no_offset =	  ( int) hri_tc_read_CV_CV_bf(TC0,0) + ( int) hri_tc_read_CV_CV_bf(TC0,1) \
  40082e:	4403      	add	r3, r0
  400830:	f502 2290 	add.w	r2, r2, #294912	; 0x48000
  400834:	6910      	ldr	r0, [r2, #16]
									+ ( int) hri_tc_read_CV_CV_bf(TC3,0) + ( int) hri_tc_read_CV_CV_bf(TC3,1);						
  400836:	4403      	add	r3, r0
  400838:	6d10      	ldr	r0, [r2, #80]	; 0x50
	
	return encoder_counter_no_offset;
}
  40083a:	4418      	add	r0, r3
  40083c:	4770      	bx	lr
  40083e:	bf00      	nop
  400840:	4000c000 	.word	0x4000c000

00400844 <Encoder_Z_Interrupt>:
static void Encoder_Z_Interrupt (void){
  400844:	b538      	push	{r3, r4, r5, lr}
	int encoder_counter_no_offset = encoder_get_counter();
  400846:	4b13      	ldr	r3, [pc, #76]	; (400894 <Encoder_Z_Interrupt+0x50>)
  400848:	4798      	blx	r3
	if(encoder_counter_no_offset - encoder_last_count > ENCODER_MIN_Z_DELTA || encoder_counter_no_offset - encoder_last_count < -ENCODER_MIN_Z_DELTA){
  40084a:	4b13      	ldr	r3, [pc, #76]	; (400898 <Encoder_Z_Interrupt+0x54>)
  40084c:	681b      	ldr	r3, [r3, #0]
  40084e:	1ac3      	subs	r3, r0, r3
  400850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  400854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  400858:	d907      	bls.n	40086a <Encoder_Z_Interrupt+0x26>
		if(encoder_num_Z_interrupts == 0){
  40085a:	4b10      	ldr	r3, [pc, #64]	; (40089c <Encoder_Z_Interrupt+0x58>)
  40085c:	681b      	ldr	r3, [r3, #0]
  40085e:	b93b      	cbnz	r3, 400870 <Encoder_Z_Interrupt+0x2c>
			encoder_Z_offset = encoder_counter_no_offset;
  400860:	4a0f      	ldr	r2, [pc, #60]	; (4008a0 <Encoder_Z_Interrupt+0x5c>)
  400862:	6010      	str	r0, [r2, #0]
		encoder_num_Z_interrupts ++;
  400864:	3301      	adds	r3, #1
  400866:	4a0d      	ldr	r2, [pc, #52]	; (40089c <Encoder_Z_Interrupt+0x58>)
  400868:	6013      	str	r3, [r2, #0]
	encoder_last_count = encoder_counter_no_offset;
  40086a:	4b0b      	ldr	r3, [pc, #44]	; (400898 <Encoder_Z_Interrupt+0x54>)
  40086c:	6018      	str	r0, [r3, #0]
  40086e:	bd38      	pop	{r3, r4, r5, pc}
			unsigned int delta = (encoder_counter_no_offset - encoder_Z_offset) & (ENCODER_STEPS - 1);
  400870:	4a0b      	ldr	r2, [pc, #44]	; (4008a0 <Encoder_Z_Interrupt+0x5c>)
  400872:	6811      	ldr	r1, [r2, #0]
  400874:	1a42      	subs	r2, r0, r1
  400876:	f3c2 020d 	ubfx	r2, r2, #0, #14
			if( (delta <= ENCODER_MAX_DELTA) || (delta >= ENCODER_STEPS-1 - ENCODER_MAX_DELTA) ){
  40087a:	1f95      	subs	r5, r2, #6
  40087c:	f643 74f3 	movw	r4, #16371	; 0x3ff3
  400880:	42a5      	cmp	r5, r4
  400882:	d8ef      	bhi.n	400864 <Encoder_Z_Interrupt+0x20>
				encoder_Z_offset += delta;
  400884:	4411      	add	r1, r2
  400886:	4c06      	ldr	r4, [pc, #24]	; (4008a0 <Encoder_Z_Interrupt+0x5c>)
  400888:	6021      	str	r1, [r4, #0]
				encoder_Daxis_offset += delta;
  40088a:	4c06      	ldr	r4, [pc, #24]	; (4008a4 <Encoder_Z_Interrupt+0x60>)
  40088c:	6821      	ldr	r1, [r4, #0]
  40088e:	440a      	add	r2, r1
  400890:	6022      	str	r2, [r4, #0]
  400892:	e7e7      	b.n	400864 <Encoder_Z_Interrupt+0x20>
  400894:	00400829 	.word	0x00400829
  400898:	20400600 	.word	0x20400600
  40089c:	204005c8 	.word	0x204005c8
  4008a0:	204005d8 	.word	0x204005d8
  4008a4:	20400604 	.word	0x20400604

004008a8 <encoder_get_angle>:
void encoder_get_angle(float * angl){
  4008a8:	b510      	push	{r4, lr}
  4008aa:	4604      	mov	r4, r0
	int encoder_counter_no_offset = encoder_get_counter();
  4008ac:	4b0a      	ldr	r3, [pc, #40]	; (4008d8 <encoder_get_angle+0x30>)
  4008ae:	4798      	blx	r3
	int current_counter = (encoder_counter_no_offset - encoder_Daxis_offset) & (ENCODER_STEPS - 1);
  4008b0:	4b0a      	ldr	r3, [pc, #40]	; (4008dc <encoder_get_angle+0x34>)
  4008b2:	681b      	ldr	r3, [r3, #0]
  4008b4:	1ac0      	subs	r0, r0, r3
  4008b6:	f3c0 030d 	ubfx	r3, r0, #0, #14
  4008ba:	ee07 3a90 	vmov	s15, r3
	float current_counter_float = (float) current_counter;
  4008be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	*angl  = (2 * PI * current_counter_float / (ENCODER_STEPS));
  4008c2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 4008e0 <encoder_get_angle+0x38>
  4008c6:	ee67 7a87 	vmul.f32	s15, s15, s14
  4008ca:	ed9f 7a06 	vldr	s14, [pc, #24]	; 4008e4 <encoder_get_angle+0x3c>
  4008ce:	ee67 7a87 	vmul.f32	s15, s15, s14
  4008d2:	edc4 7a00 	vstr	s15, [r4]
  4008d6:	bd10      	pop	{r4, pc}
  4008d8:	00400829 	.word	0x00400829
  4008dc:	20400604 	.word	0x20400604
  4008e0:	40c90fdb 	.word	0x40c90fdb
  4008e4:	38800000 	.word	0x38800000

004008e8 <encoder_record_Daxis_offset>:
	
}



void encoder_record_Daxis_offset(void){
  4008e8:	b508      	push	{r3, lr}
	//records the value at which we have a D axis
	encoder_Daxis_offset = encoder_get_counter();
  4008ea:	4b02      	ldr	r3, [pc, #8]	; (4008f4 <encoder_record_Daxis_offset+0xc>)
  4008ec:	4798      	blx	r3
  4008ee:	4b02      	ldr	r3, [pc, #8]	; (4008f8 <encoder_record_Daxis_offset+0x10>)
  4008f0:	6018      	str	r0, [r3, #0]
  4008f2:	bd08      	pop	{r3, pc}
  4008f4:	00400829 	.word	0x00400829
  4008f8:	20400604 	.word	0x20400604

004008fc <Position_2_Interrupt>:
static void Position_1_Interrupt (void){
	Position_General_Interrupt();
	//printf("POS 1\n");
}

static void Position_2_Interrupt (void){
  4008fc:	b430      	push	{r4, r5}
	has_triggered = true;
  4008fe:	2201      	movs	r2, #1
  400900:	4b13      	ldr	r3, [pc, #76]	; (400950 <Position_2_Interrupt+0x54>)
  400902:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400904:	4b13      	ldr	r3, [pc, #76]	; (400954 <Position_2_Interrupt+0x58>)
  400906:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400908:	4b13      	ldr	r3, [pc, #76]	; (400958 <Position_2_Interrupt+0x5c>)
  40090a:	681b      	ldr	r3, [r3, #0]
  40090c:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40090e:	2b00      	cmp	r3, #0
  400910:	dd11      	ble.n	400936 <Position_2_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400912:	2201      	movs	r2, #1
  400914:	2a00      	cmp	r2, #0
  400916:	dc11      	bgt.n	40093c <Position_2_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  400918:	ee07 3a90 	vmov	s15, r3
  40091c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400920:	eddf 6a0e 	vldr	s13, [pc, #56]	; 40095c <Position_2_Interrupt+0x60>
  400924:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400928:	4b0d      	ldr	r3, [pc, #52]	; (400960 <Position_2_Interrupt+0x64>)
  40092a:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  40092e:	4b0a      	ldr	r3, [pc, #40]	; (400958 <Position_2_Interrupt+0x5c>)
  400930:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	//printf("POS 2\n");
}
  400932:	bc30      	pop	{r4, r5}
  400934:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400936:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  40093a:	e7ea      	b.n	400912 <Position_2_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  40093c:	1e54      	subs	r4, r2, #1
  40093e:	4908      	ldr	r1, [pc, #32]	; (400960 <Position_2_Interrupt+0x64>)
  400940:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400944:	682d      	ldr	r5, [r5, #0]
  400946:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40094a:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40094c:	4622      	mov	r2, r4
  40094e:	e7e1      	b.n	400914 <Position_2_Interrupt+0x18>
  400950:	204005c4 	.word	0x204005c4
  400954:	e000e010 	.word	0xe000e010
  400958:	204005e8 	.word	0x204005e8
  40095c:	43960000 	.word	0x43960000
  400960:	204005e0 	.word	0x204005e0

00400964 <Position_3_Interrupt>:
int cntr = 0;
static void Position_3_Interrupt (void){
  400964:	b430      	push	{r4, r5}
	has_triggered = true;
  400966:	2201      	movs	r2, #1
  400968:	4b13      	ldr	r3, [pc, #76]	; (4009b8 <Position_3_Interrupt+0x54>)
  40096a:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  40096c:	4b13      	ldr	r3, [pc, #76]	; (4009bc <Position_3_Interrupt+0x58>)
  40096e:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400970:	4b13      	ldr	r3, [pc, #76]	; (4009c0 <Position_3_Interrupt+0x5c>)
  400972:	681b      	ldr	r3, [r3, #0]
  400974:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400976:	2b00      	cmp	r3, #0
  400978:	dd11      	ble.n	40099e <Position_3_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40097a:	2201      	movs	r2, #1
  40097c:	2a00      	cmp	r2, #0
  40097e:	dc11      	bgt.n	4009a4 <Position_3_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  400980:	ee07 3a90 	vmov	s15, r3
  400984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400988:	eddf 6a0e 	vldr	s13, [pc, #56]	; 4009c4 <Position_3_Interrupt+0x60>
  40098c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400990:	4b0d      	ldr	r3, [pc, #52]	; (4009c8 <Position_3_Interrupt+0x64>)
  400992:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  400996:	4b0a      	ldr	r3, [pc, #40]	; (4009c0 <Position_3_Interrupt+0x5c>)
  400998:	6018      	str	r0, [r3, #0]
		
			printf("%f\n",angleee);
		}
	}
	*/
}
  40099a:	bc30      	pop	{r4, r5}
  40099c:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40099e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  4009a2:	e7ea      	b.n	40097a <Position_3_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  4009a4:	1e54      	subs	r4, r2, #1
  4009a6:	4908      	ldr	r1, [pc, #32]	; (4009c8 <Position_3_Interrupt+0x64>)
  4009a8:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  4009ac:	682d      	ldr	r5, [r5, #0]
  4009ae:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4009b2:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4009b4:	4622      	mov	r2, r4
  4009b6:	e7e1      	b.n	40097c <Position_3_Interrupt+0x18>
  4009b8:	204005c4 	.word	0x204005c4
  4009bc:	e000e010 	.word	0xe000e010
  4009c0:	204005e8 	.word	0x204005e8
  4009c4:	43960000 	.word	0x43960000
  4009c8:	204005e0 	.word	0x204005e0

004009cc <Position_1_Interrupt>:
static void Position_1_Interrupt (void){
  4009cc:	b430      	push	{r4, r5}
	has_triggered = true;
  4009ce:	2201      	movs	r2, #1
  4009d0:	4b13      	ldr	r3, [pc, #76]	; (400a20 <Position_1_Interrupt+0x54>)
  4009d2:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  4009d4:	4b13      	ldr	r3, [pc, #76]	; (400a24 <Position_1_Interrupt+0x58>)
  4009d6:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  4009d8:	4b13      	ldr	r3, [pc, #76]	; (400a28 <Position_1_Interrupt+0x5c>)
  4009da:	681b      	ldr	r3, [r3, #0]
  4009dc:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4009de:	2b00      	cmp	r3, #0
  4009e0:	dd11      	ble.n	400a06 <Position_1_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4009e2:	2201      	movs	r2, #1
  4009e4:	2a00      	cmp	r2, #0
  4009e6:	dc11      	bgt.n	400a0c <Position_1_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  4009e8:	ee07 3a90 	vmov	s15, r3
  4009ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4009f0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 400a2c <Position_1_Interrupt+0x60>
  4009f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4009f8:	4b0d      	ldr	r3, [pc, #52]	; (400a30 <Position_1_Interrupt+0x64>)
  4009fa:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  4009fe:	4b0a      	ldr	r3, [pc, #40]	; (400a28 <Position_1_Interrupt+0x5c>)
  400a00:	6018      	str	r0, [r3, #0]
}
  400a02:	bc30      	pop	{r4, r5}
  400a04:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400a06:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  400a0a:	e7ea      	b.n	4009e2 <Position_1_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400a0c:	1e54      	subs	r4, r2, #1
  400a0e:	4908      	ldr	r1, [pc, #32]	; (400a30 <Position_1_Interrupt+0x64>)
  400a10:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400a14:	682d      	ldr	r5, [r5, #0]
  400a16:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400a1a:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400a1c:	4622      	mov	r2, r4
  400a1e:	e7e1      	b.n	4009e4 <Position_1_Interrupt+0x18>
  400a20:	204005c4 	.word	0x204005c4
  400a24:	e000e010 	.word	0xe000e010
  400a28:	204005e8 	.word	0x204005e8
  400a2c:	43960000 	.word	0x43960000
  400a30:	204005e0 	.word	0x204005e0

00400a34 <pos_sens_init>:

void pos_sens_init (void){
  400a34:	b510      	push	{r4, lr}
	//set interrupt handlers
	ext_irq_register(PIO_PD19_IDX, Position_3_Interrupt);		//POS 3
  400a36:	4919      	ldr	r1, [pc, #100]	; (400a9c <pos_sens_init+0x68>)
  400a38:	2073      	movs	r0, #115	; 0x73
  400a3a:	4c19      	ldr	r4, [pc, #100]	; (400aa0 <pos_sens_init+0x6c>)
  400a3c:	47a0      	blx	r4
	ext_irq_register(PIO_PA2_IDX, Position_2_Interrupt);		//POS 2
  400a3e:	4919      	ldr	r1, [pc, #100]	; (400aa4 <pos_sens_init+0x70>)
  400a40:	2002      	movs	r0, #2
  400a42:	47a0      	blx	r4
	ext_irq_register(PIO_PA5_IDX, Position_1_Interrupt);		//POS 1
  400a44:	4918      	ldr	r1, [pc, #96]	; (400aa8 <pos_sens_init+0x74>)
  400a46:	2005      	movs	r0, #5
  400a48:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a4a:	4b18      	ldr	r3, [pc, #96]	; (400aac <pos_sens_init+0x78>)
  400a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400a50:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400a52:	2220      	movs	r2, #32
  400a54:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400a58:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400a5c:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400a5e:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ	(PIOD_IRQn);
	NVIC_SetPriority(PIOD_IRQn, IRQ_PRIORITY_POSITION_SENS);

	
	//SysTick starting from 0
	pos_sens_last_SysTick_count = 0;
  400a62:	2200      	movs	r2, #0
  400a64:	4b12      	ldr	r3, [pc, #72]	; (400ab0 <pos_sens_init+0x7c>)
  400a66:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
  400a68:	4b12      	ldr	r3, [pc, #72]	; (400ab4 <pos_sens_init+0x80>)
  400a6a:	609a      	str	r2, [r3, #8]
	//make the load value max, so that the overflows are as rare as possible
	SysTick->LOAD = (0xFFFFFF);
  400a6c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  400a70:	6059      	str	r1, [r3, #4]

	this means that the moment we transition to state (POS1=1, POS2=0 POS3=0) we are at 0 electrical degrees
	*/

	// sector_lookup_table[POS3][POS2][POS1];
	sector_lookup_table[0][0][1] = 1;
  400a72:	4b11      	ldr	r3, [pc, #68]	; (400ab8 <pos_sens_init+0x84>)
  400a74:	2101      	movs	r1, #1
  400a76:	6059      	str	r1, [r3, #4]
	sector_lookup_table[0][1][1] = 2;
  400a78:	2102      	movs	r1, #2
  400a7a:	60d9      	str	r1, [r3, #12]
	sector_lookup_table[0][1][0] = 3;
  400a7c:	2103      	movs	r1, #3
  400a7e:	6099      	str	r1, [r3, #8]
	sector_lookup_table[1][1][0] = 4;
  400a80:	2104      	movs	r1, #4
  400a82:	6199      	str	r1, [r3, #24]
	sector_lookup_table[1][0][0] = 5;
  400a84:	2105      	movs	r1, #5
  400a86:	6119      	str	r1, [r3, #16]
	sector_lookup_table[1][0][1] = 6;
  400a88:	2106      	movs	r1, #6
  400a8a:	6159      	str	r1, [r3, #20]
	//Error states
	sector_lookup_table[0][0][0] = -1;
  400a8c:	f04f 31ff 	mov.w	r1, #4294967295
  400a90:	6019      	str	r1, [r3, #0]
	sector_lookup_table[1][1][1] = -1;
  400a92:	61d9      	str	r1, [r3, #28]
	
	has_triggered = false;
  400a94:	4b09      	ldr	r3, [pc, #36]	; (400abc <pos_sens_init+0x88>)
  400a96:	701a      	strb	r2, [r3, #0]
  400a98:	bd10      	pop	{r4, pc}
  400a9a:	bf00      	nop
  400a9c:	00400965 	.word	0x00400965
  400aa0:	00401aa9 	.word	0x00401aa9
  400aa4:	004008fd 	.word	0x004008fd
  400aa8:	004009cd 	.word	0x004009cd
  400aac:	e000e100 	.word	0xe000e100
  400ab0:	204005e8 	.word	0x204005e8
  400ab4:	e000e010 	.word	0xe000e010
  400ab8:	20400588 	.word	0x20400588
  400abc:	204005c4 	.word	0x204005c4

00400ac0 <get_Data_Pos>:
}

//returns time spent in previous sectors
// which sector we are at currently (see above for position convention)
// how much time has elapsed since we entered this sector
void get_Data_Pos (float * previous_deltas, int * current_sector, float * time_in_current_sector){
  400ac0:	b570      	push	{r4, r5, r6, lr}
	//null checking variable to see if a write has occurred
	has_triggered = false;
  400ac2:	2400      	movs	r4, #0
  400ac4:	4b1d      	ldr	r3, [pc, #116]	; (400b3c <get_Data_Pos+0x7c>)
  400ac6:	701c      	strb	r4, [r3, #0]
	
	
	//get systick value immediately for most accurate result
	int current_systick = SysTick->VAL;
  400ac8:	4b1d      	ldr	r3, [pc, #116]	; (400b40 <get_Data_Pos+0x80>)
  400aca:	689c      	ldr	r4, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400acc:	4b1d      	ldr	r3, [pc, #116]	; (400b44 <get_Data_Pos+0x84>)
  400ace:	681b      	ldr	r3, [r3, #0]
  400ad0:	1b1b      	subs	r3, r3, r4
	
	//if there was an overflow, account for it
	//NB this can only handle one overflow at max <=> if systick frequency < interrupt frequency timing will be very inaccurate
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400ad2:	2b00      	cmp	r3, #0
  400ad4:	dd0b      	ble.n	400aee <get_Data_Pos+0x2e>
	
	//systick clock frequency equals MCU clock at 300MHz
	(*time_in_current_sector) = (float) delta / 300;
  400ad6:	ee07 3a90 	vmov	s15, r3
  400ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400ade:	eddf 6a1a 	vldr	s13, [pc, #104]	; 400b48 <get_Data_Pos+0x88>
  400ae2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400ae6:	ed82 7a00 	vstr	s14, [r2]
	
	
	//copy data over
	for (int i = 0 ; i < POS_SENS_DELTAS_SIZE; i++){
  400aea:	2300      	movs	r3, #0
  400aec:	e009      	b.n	400b02 <get_Data_Pos+0x42>
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400aee:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  400af2:	e7f0      	b.n	400ad6 <get_Data_Pos+0x16>
		previous_deltas[i] = pos_sens_deltas[i];
  400af4:	009d      	lsls	r5, r3, #2
  400af6:	1946      	adds	r6, r0, r5
  400af8:	4c14      	ldr	r4, [pc, #80]	; (400b4c <get_Data_Pos+0x8c>)
  400afa:	442c      	add	r4, r5
  400afc:	6824      	ldr	r4, [r4, #0]
  400afe:	6034      	str	r4, [r6, #0]
	for (int i = 0 ; i < POS_SENS_DELTAS_SIZE; i++){
  400b00:	3301      	adds	r3, #1
  400b02:	2b01      	cmp	r3, #1
  400b04:	ddf6      	ble.n	400af4 <get_Data_Pos+0x34>
	return tmp;
}

static inline hri_pio_pdsr_reg_t hri_pio_read_PDSR_reg(const void *const hw)
{
	return ((Pio *)hw)->PIO_PDSR;
  400b06:	4b12      	ldr	r3, [pc, #72]	; (400b50 <get_Data_Pos+0x90>)
  400b08:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
  400b0a:	f3c5 45c0 	ubfx	r5, r5, #19, #1
  400b0e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400b12:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  400b14:	f3c4 0480 	ubfx	r4, r4, #2, #1
  400b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400b1a:	f3c3 1340 	ubfx	r3, r3, #5, #1
	}
	
	//get which sector we are in
	(*current_sector) = sector_lookup_table	[gpio_get_pin_level(PIN_GPIO_POS_3)]\
											[gpio_get_pin_level(PIN_GPIO_POS_2)]\
											[gpio_get_pin_level(PIN_GPIO_POS_1)];
  400b1e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  400b22:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  400b26:	4c0b      	ldr	r4, [pc, #44]	; (400b54 <get_Data_Pos+0x94>)
  400b28:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	(*current_sector) = sector_lookup_table	[gpio_get_pin_level(PIN_GPIO_POS_3)]\
  400b2c:	600b      	str	r3, [r1, #0]
											
											
	if(has_triggered){
  400b2e:	4b03      	ldr	r3, [pc, #12]	; (400b3c <get_Data_Pos+0x7c>)
  400b30:	781b      	ldrb	r3, [r3, #0]
  400b32:	b903      	cbnz	r3, 400b36 <get_Data_Pos+0x76>
  400b34:	bd70      	pop	{r4, r5, r6, pc}
		// this means the value of has_triggered was modified while we were reading the data <=> retake reading
		// since data writes are rare there is no chance of a long wait on the recursive function
		get_Data_Pos (previous_deltas, current_sector, time_in_current_sector);
  400b36:	f7ff ffc3 	bl	400ac0 <get_Data_Pos>
	}

  400b3a:	e7fb      	b.n	400b34 <get_Data_Pos+0x74>
  400b3c:	204005c4 	.word	0x204005c4
  400b40:	e000e010 	.word	0xe000e010
  400b44:	204005e8 	.word	0x204005e8
  400b48:	43960000 	.word	0x43960000
  400b4c:	204005e0 	.word	0x204005e0
  400b50:	400e1400 	.word	0x400e1400
  400b54:	20400588 	.word	0x20400588

00400b58 <enable_control>:



//enables calling the control loop from the DMA
void enable_control(void){
	is_control_enabled = true;
  400b58:	2201      	movs	r2, #1
  400b5a:	4b01      	ldr	r3, [pc, #4]	; (400b60 <enable_control+0x8>)
  400b5c:	701a      	strb	r2, [r3, #0]
  400b5e:	4770      	bx	lr
  400b60:	204005a8 	.word	0x204005a8

00400b64 <dma_adc_0_enable_for_one_transaction>:
	
	has_0_triggered = false;
	has_1_triggered = false;
}

void dma_adc_0_enable_for_one_transaction(void){
  400b64:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  400b66:	4906      	ldr	r1, [pc, #24]	; (400b80 <dma_adc_0_enable_for_one_transaction+0x1c>)
  400b68:	2000      	movs	r0, #0
  400b6a:	4b06      	ldr	r3, [pc, #24]	; (400b84 <dma_adc_0_enable_for_one_transaction+0x20>)
  400b6c:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  400b6e:	2118      	movs	r1, #24
  400b70:	2000      	movs	r0, #0
  400b72:	4b05      	ldr	r3, [pc, #20]	; (400b88 <dma_adc_0_enable_for_one_transaction+0x24>)
  400b74:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  400b76:	2101      	movs	r1, #1
  400b78:	2000      	movs	r0, #0
  400b7a:	4b04      	ldr	r3, [pc, #16]	; (400b8c <dma_adc_0_enable_for_one_transaction+0x28>)
  400b7c:	4798      	blx	r3
  400b7e:	bd08      	pop	{r3, pc}
  400b80:	20400234 	.word	0x20400234
  400b84:	00402f4d 	.word	0x00402f4d
  400b88:	00402f6d 	.word	0x00402f6d
  400b8c:	00402f85 	.word	0x00402f85

00400b90 <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  400b90:	b508      	push	{r3, lr}
	has_0_triggered = true;
  400b92:	2201      	movs	r2, #1
  400b94:	4b1f      	ldr	r3, [pc, #124]	; (400c14 <dma_adc_0_callback+0x84>)
  400b96:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400b98:	2300      	movs	r3, #0
  400b9a:	e008      	b.n	400bae <dma_adc_0_callback+0x1e>
				raw_currents[1] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400b9c:	b292      	uxth	r2, r2
  400b9e:	491e      	ldr	r1, [pc, #120]	; (400c18 <dma_adc_0_callback+0x88>)
  400ba0:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  400ba2:	491e      	ldr	r1, [pc, #120]	; (400c1c <dma_adc_0_callback+0x8c>)
  400ba4:	7e0a      	ldrb	r2, [r1, #24]
  400ba6:	f042 0202 	orr.w	r2, r2, #2
  400baa:	760a      	strb	r2, [r1, #24]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400bac:	3301      	adds	r3, #1
  400bae:	2b05      	cmp	r3, #5
  400bb0:	dc13      	bgt.n	400bda <dma_adc_0_callback+0x4a>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400bb2:	4a1a      	ldr	r2, [pc, #104]	; (400c1c <dma_adc_0_callback+0x8c>)
  400bb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  400bb8:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400bbc:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  400bc0:	d0ec      	beq.n	400b9c <dma_adc_0_callback+0xc>
  400bc2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400bc6:	d1f1      	bne.n	400bac <dma_adc_0_callback+0x1c>
				raw_currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400bc8:	b292      	uxth	r2, r2
  400bca:	4913      	ldr	r1, [pc, #76]	; (400c18 <dma_adc_0_callback+0x88>)
  400bcc:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  400bce:	4913      	ldr	r1, [pc, #76]	; (400c1c <dma_adc_0_callback+0x8c>)
  400bd0:	7e0a      	ldrb	r2, [r1, #24]
  400bd2:	f042 0201 	orr.w	r2, r2, #1
  400bd6:	760a      	strb	r2, [r1, #24]
				break;
  400bd8:	e7e8      	b.n	400bac <dma_adc_0_callback+0x1c>
	if(is_dma_adc_0_continuous){
  400bda:	4b11      	ldr	r3, [pc, #68]	; (400c20 <dma_adc_0_callback+0x90>)
  400bdc:	781b      	ldrb	r3, [r3, #0]
  400bde:	b943      	cbnz	r3, 400bf2 <dma_adc_0_callback+0x62>
	time_delta_adc_0 = time_get_delta_us();
  400be0:	4b10      	ldr	r3, [pc, #64]	; (400c24 <dma_adc_0_callback+0x94>)
  400be2:	4798      	blx	r3
  400be4:	4b10      	ldr	r3, [pc, #64]	; (400c28 <dma_adc_0_callback+0x98>)
  400be6:	6018      	str	r0, [r3, #0]
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  400be8:	4b0c      	ldr	r3, [pc, #48]	; (400c1c <dma_adc_0_callback+0x8c>)
  400bea:	7e1b      	ldrb	r3, [r3, #24]
  400bec:	2b0f      	cmp	r3, #15
  400bee:	d003      	beq.n	400bf8 <dma_adc_0_callback+0x68>
  400bf0:	bd08      	pop	{r3, pc}
		dma_adc_0_enable_for_one_transaction();
  400bf2:	4b0e      	ldr	r3, [pc, #56]	; (400c2c <dma_adc_0_callback+0x9c>)
  400bf4:	4798      	blx	r3
  400bf6:	e7f3      	b.n	400be0 <dma_adc_0_callback+0x50>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  400bf8:	4b0d      	ldr	r3, [pc, #52]	; (400c30 <dma_adc_0_callback+0xa0>)
  400bfa:	781b      	ldrb	r3, [r3, #0]
  400bfc:	2b00      	cmp	r3, #0
  400bfe:	d0f7      	beq.n	400bf0 <dma_adc_0_callback+0x60>
		ready_values = 0;
  400c00:	2200      	movs	r2, #0
  400c02:	4b06      	ldr	r3, [pc, #24]	; (400c1c <dma_adc_0_callback+0x8c>)
  400c04:	761a      	strb	r2, [r3, #24]
		start_control_loop_dummy((int *) &raw_currents, raw_voltage);
  400c06:	4b0b      	ldr	r3, [pc, #44]	; (400c34 <dma_adc_0_callback+0xa4>)
  400c08:	6819      	ldr	r1, [r3, #0]
  400c0a:	4803      	ldr	r0, [pc, #12]	; (400c18 <dma_adc_0_callback+0x88>)
  400c0c:	4b0a      	ldr	r3, [pc, #40]	; (400c38 <dma_adc_0_callback+0xa8>)
  400c0e:	4798      	blx	r3
}
  400c10:	e7ee      	b.n	400bf0 <dma_adc_0_callback+0x60>
  400c12:	bf00      	nop
  400c14:	204005f8 	.word	0x204005f8
  400c18:	20400628 	.word	0x20400628
  400c1c:	20400234 	.word	0x20400234
  400c20:	20400620 	.word	0x20400620
  400c24:	0040119d 	.word	0x0040119d
  400c28:	204005f0 	.word	0x204005f0
  400c2c:	00400b65 	.word	0x00400b65
  400c30:	204005a8 	.word	0x204005a8
  400c34:	20400634 	.word	0x20400634
  400c38:	004002b1 	.word	0x004002b1

00400c3c <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  400c3c:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400c3e:	4906      	ldr	r1, [pc, #24]	; (400c58 <dma_adc_1_enable_for_one_transaction+0x1c>)
  400c40:	2001      	movs	r0, #1
  400c42:	4b06      	ldr	r3, [pc, #24]	; (400c5c <dma_adc_1_enable_for_one_transaction+0x20>)
  400c44:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  400c46:	2110      	movs	r1, #16
  400c48:	2001      	movs	r0, #1
  400c4a:	4b05      	ldr	r3, [pc, #20]	; (400c60 <dma_adc_1_enable_for_one_transaction+0x24>)
  400c4c:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  400c4e:	2101      	movs	r1, #1
  400c50:	4608      	mov	r0, r1
  400c52:	4b04      	ldr	r3, [pc, #16]	; (400c64 <dma_adc_1_enable_for_one_transaction+0x28>)
  400c54:	4798      	blx	r3
  400c56:	bd08      	pop	{r3, pc}
  400c58:	20400250 	.word	0x20400250
  400c5c:	00402f4d 	.word	0x00402f4d
  400c60:	00402f6d 	.word	0x00402f6d
  400c64:	00402f85 	.word	0x00402f85

00400c68 <dma_adc_1_callback>:
static void dma_adc_1_callback(struct _dma_resource *resource){
  400c68:	b508      	push	{r3, lr}
	has_1_triggered = true;
  400c6a:	2201      	movs	r2, #1
  400c6c:	4b1f      	ldr	r3, [pc, #124]	; (400cec <dma_adc_1_callback+0x84>)
  400c6e:	701a      	strb	r2, [r3, #0]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400c70:	2300      	movs	r3, #0
  400c72:	e008      	b.n	400c86 <dma_adc_1_callback+0x1e>
				raw_currents[2] = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400c74:	b292      	uxth	r2, r2
  400c76:	491e      	ldr	r1, [pc, #120]	; (400cf0 <dma_adc_1_callback+0x88>)
  400c78:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  400c7a:	491e      	ldr	r1, [pc, #120]	; (400cf4 <dma_adc_1_callback+0x8c>)
  400c7c:	7e0a      	ldrb	r2, [r1, #24]
  400c7e:	f042 0204 	orr.w	r2, r2, #4
  400c82:	760a      	strb	r2, [r1, #24]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400c84:	3301      	adds	r3, #1
  400c86:	2b03      	cmp	r3, #3
  400c88:	dc14      	bgt.n	400cb4 <dma_adc_1_callback+0x4c>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400c8a:	4a1a      	ldr	r2, [pc, #104]	; (400cf4 <dma_adc_1_callback+0x8c>)
  400c8c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  400c90:	69d2      	ldr	r2, [r2, #28]
  400c92:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400c96:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  400c9a:	d0eb      	beq.n	400c74 <dma_adc_1_callback+0xc>
  400c9c:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  400ca0:	d1f0      	bne.n	400c84 <dma_adc_1_callback+0x1c>
				raw_voltage = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400ca2:	b292      	uxth	r2, r2
  400ca4:	4914      	ldr	r1, [pc, #80]	; (400cf8 <dma_adc_1_callback+0x90>)
  400ca6:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<3);
  400ca8:	4912      	ldr	r1, [pc, #72]	; (400cf4 <dma_adc_1_callback+0x8c>)
  400caa:	7e0a      	ldrb	r2, [r1, #24]
  400cac:	f042 0208 	orr.w	r2, r2, #8
  400cb0:	760a      	strb	r2, [r1, #24]
				break;
  400cb2:	e7e7      	b.n	400c84 <dma_adc_1_callback+0x1c>
	if(is_dma_adc_1_continuous){
  400cb4:	4b11      	ldr	r3, [pc, #68]	; (400cfc <dma_adc_1_callback+0x94>)
  400cb6:	781b      	ldrb	r3, [r3, #0]
  400cb8:	b943      	cbnz	r3, 400ccc <dma_adc_1_callback+0x64>
	time_delta_adc_1 = time_get_delta_us();
  400cba:	4b11      	ldr	r3, [pc, #68]	; (400d00 <dma_adc_1_callback+0x98>)
  400cbc:	4798      	blx	r3
  400cbe:	4b11      	ldr	r3, [pc, #68]	; (400d04 <dma_adc_1_callback+0x9c>)
  400cc0:	6018      	str	r0, [r3, #0]
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  400cc2:	4b0c      	ldr	r3, [pc, #48]	; (400cf4 <dma_adc_1_callback+0x8c>)
  400cc4:	7e1b      	ldrb	r3, [r3, #24]
  400cc6:	2b0f      	cmp	r3, #15
  400cc8:	d003      	beq.n	400cd2 <dma_adc_1_callback+0x6a>
  400cca:	bd08      	pop	{r3, pc}
		dma_adc_1_enable_for_one_transaction();
  400ccc:	4b0e      	ldr	r3, [pc, #56]	; (400d08 <dma_adc_1_callback+0xa0>)
  400cce:	4798      	blx	r3
  400cd0:	e7f3      	b.n	400cba <dma_adc_1_callback+0x52>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  400cd2:	4b0e      	ldr	r3, [pc, #56]	; (400d0c <dma_adc_1_callback+0xa4>)
  400cd4:	781b      	ldrb	r3, [r3, #0]
  400cd6:	2b00      	cmp	r3, #0
  400cd8:	d0f7      	beq.n	400cca <dma_adc_1_callback+0x62>
		ready_values = 0;
  400cda:	2200      	movs	r2, #0
  400cdc:	4b05      	ldr	r3, [pc, #20]	; (400cf4 <dma_adc_1_callback+0x8c>)
  400cde:	761a      	strb	r2, [r3, #24]
		start_control_loop_dummy((int *) &raw_currents, raw_voltage);
  400ce0:	4b05      	ldr	r3, [pc, #20]	; (400cf8 <dma_adc_1_callback+0x90>)
  400ce2:	6819      	ldr	r1, [r3, #0]
  400ce4:	4802      	ldr	r0, [pc, #8]	; (400cf0 <dma_adc_1_callback+0x88>)
  400ce6:	4b0a      	ldr	r3, [pc, #40]	; (400d10 <dma_adc_1_callback+0xa8>)
  400ce8:	4798      	blx	r3
}
  400cea:	e7ee      	b.n	400cca <dma_adc_1_callback+0x62>
  400cec:	204005b4 	.word	0x204005b4
  400cf0:	20400628 	.word	0x20400628
  400cf4:	20400234 	.word	0x20400234
  400cf8:	20400634 	.word	0x20400634
  400cfc:	20400610 	.word	0x20400610
  400d00:	0040119d 	.word	0x0040119d
  400d04:	20400614 	.word	0x20400614
  400d08:	00400c3d 	.word	0x00400c3d
  400d0c:	204005a8 	.word	0x204005a8
  400d10:	004002b1 	.word	0x004002b1

00400d14 <dma_adc_0_enable_continuously>:
}

void dma_adc_0_enable_continuously(void){
  400d14:	b508      	push	{r3, lr}
	is_dma_adc_0_continuous = true;
  400d16:	2201      	movs	r2, #1
  400d18:	4b02      	ldr	r3, [pc, #8]	; (400d24 <dma_adc_0_enable_continuously+0x10>)
  400d1a:	701a      	strb	r2, [r3, #0]
	dma_adc_0_enable_for_one_transaction();
  400d1c:	4b02      	ldr	r3, [pc, #8]	; (400d28 <dma_adc_0_enable_continuously+0x14>)
  400d1e:	4798      	blx	r3
  400d20:	bd08      	pop	{r3, pc}
  400d22:	bf00      	nop
  400d24:	20400620 	.word	0x20400620
  400d28:	00400b65 	.word	0x00400b65

00400d2c <dma_adc_1_enable_continuously>:
}
void dma_adc_1_enable_continuously(void){
  400d2c:	b508      	push	{r3, lr}
	is_dma_adc_1_continuous = true;
  400d2e:	2201      	movs	r2, #1
  400d30:	4b02      	ldr	r3, [pc, #8]	; (400d3c <dma_adc_1_enable_continuously+0x10>)
  400d32:	701a      	strb	r2, [r3, #0]
	dma_adc_1_enable_for_one_transaction();
  400d34:	4b02      	ldr	r3, [pc, #8]	; (400d40 <dma_adc_1_enable_continuously+0x14>)
  400d36:	4798      	blx	r3
  400d38:	bd08      	pop	{r3, pc}
  400d3a:	bf00      	nop
  400d3c:	20400610 	.word	0x20400610
  400d40:	00400c3d 	.word	0x00400c3d

00400d44 <dma_adc_0_disable_continuously>:
}

void dma_adc_0_disable_continuously(void){
	is_dma_adc_0_continuous = false;
  400d44:	2200      	movs	r2, #0
  400d46:	4b01      	ldr	r3, [pc, #4]	; (400d4c <dma_adc_0_disable_continuously+0x8>)
  400d48:	701a      	strb	r2, [r3, #0]
  400d4a:	4770      	bx	lr
  400d4c:	20400620 	.word	0x20400620

00400d50 <dma_adc_1_disable_continuously>:
}
void dma_adc_1_disable_continuously(void){
	is_dma_adc_1_continuous = false;
  400d50:	2200      	movs	r2, #0
  400d52:	4b01      	ldr	r3, [pc, #4]	; (400d58 <dma_adc_1_disable_continuously+0x8>)
  400d54:	701a      	strb	r2, [r3, #0]
  400d56:	4770      	bx	lr
  400d58:	20400610 	.word	0x20400610

00400d5c <dma_adc_init>:
void dma_adc_init(void){
  400d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  400d60:	492a      	ldr	r1, [pc, #168]	; (400e0c <dma_adc_init+0xb0>)
  400d62:	2000      	movs	r0, #0
  400d64:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 400e40 <dma_adc_init+0xe4>
  400d68:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  400d6a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 400e44 <dma_adc_init+0xe8>
  400d6e:	4641      	mov	r1, r8
  400d70:	2000      	movs	r0, #0
  400d72:	4f27      	ldr	r7, [pc, #156]	; (400e10 <dma_adc_init+0xb4>)
  400d74:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  400d76:	2118      	movs	r1, #24
  400d78:	2000      	movs	r0, #0
  400d7a:	4d26      	ldr	r5, [pc, #152]	; (400e14 <dma_adc_init+0xb8>)
  400d7c:	47a8      	blx	r5
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  400d7e:	2100      	movs	r1, #0
  400d80:	460c      	mov	r4, r1
  400d82:	4608      	mov	r0, r1
  400d84:	4e24      	ldr	r6, [pc, #144]	; (400e18 <dma_adc_init+0xbc>)
  400d86:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  400d88:	6823      	ldr	r3, [r4, #0]
  400d8a:	4a24      	ldr	r2, [pc, #144]	; (400e1c <dma_adc_init+0xc0>)
  400d8c:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400d8e:	2201      	movs	r2, #1
  400d90:	4621      	mov	r1, r4
  400d92:	4620      	mov	r0, r4
  400d94:	4c22      	ldr	r4, [pc, #136]	; (400e20 <dma_adc_init+0xc4>)
  400d96:	47a0      	blx	r4
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  400d98:	4922      	ldr	r1, [pc, #136]	; (400e24 <dma_adc_init+0xc8>)
  400d9a:	2001      	movs	r0, #1
  400d9c:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400d9e:	f108 011c 	add.w	r1, r8, #28
  400da2:	2001      	movs	r0, #1
  400da4:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  400da6:	2110      	movs	r1, #16
  400da8:	2001      	movs	r0, #1
  400daa:	47a8      	blx	r5
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  400dac:	2101      	movs	r1, #1
  400dae:	2500      	movs	r5, #0
  400db0:	4628      	mov	r0, r5
  400db2:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  400db4:	682b      	ldr	r3, [r5, #0]
  400db6:	4a1c      	ldr	r2, [pc, #112]	; (400e28 <dma_adc_init+0xcc>)
  400db8:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400dba:	2201      	movs	r2, #1
  400dbc:	4629      	mov	r1, r5
  400dbe:	4610      	mov	r0, r2
  400dc0:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400dc2:	4b1a      	ldr	r3, [pc, #104]	; (400e2c <dma_adc_init+0xd0>)
  400dc4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400dc8:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400dca:	2280      	movs	r2, #128	; 0x80
  400dcc:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400dd0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400dd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ddc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400de0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400de4:	f44f 7280 	mov.w	r2, #256	; 0x100
  400de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400dec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400df0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400df4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	dma_adc_0_disable_continuously();
  400df8:	4b0d      	ldr	r3, [pc, #52]	; (400e30 <dma_adc_init+0xd4>)
  400dfa:	4798      	blx	r3
	dma_adc_1_disable_continuously();
  400dfc:	4b0d      	ldr	r3, [pc, #52]	; (400e34 <dma_adc_init+0xd8>)
  400dfe:	4798      	blx	r3
	has_0_triggered = false;
  400e00:	4a0d      	ldr	r2, [pc, #52]	; (400e38 <dma_adc_init+0xdc>)
  400e02:	7015      	strb	r5, [r2, #0]
	has_1_triggered = false;
  400e04:	4a0d      	ldr	r2, [pc, #52]	; (400e3c <dma_adc_init+0xe0>)
  400e06:	7015      	strb	r5, [r2, #0]
  400e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400e0c:	4003c020 	.word	0x4003c020
  400e10:	00402f4d 	.word	0x00402f4d
  400e14:	00402f6d 	.word	0x00402f6d
  400e18:	00402f9d 	.word	0x00402f9d
  400e1c:	00400b91 	.word	0x00400b91
  400e20:	00402fb1 	.word	0x00402fb1
  400e24:	40064020 	.word	0x40064020
  400e28:	00400c69 	.word	0x00400c69
  400e2c:	e000e100 	.word	0xe000e100
  400e30:	00400d45 	.word	0x00400d45
  400e34:	00400d51 	.word	0x00400d51
  400e38:	204005f8 	.word	0x204005f8
  400e3c:	204005b4 	.word	0x204005b4
  400e40:	00402f5d 	.word	0x00402f5d
  400e44:	20400234 	.word	0x20400234

00400e48 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  400e48:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  400e4a:	4d11      	ldr	r5, [pc, #68]	; (400e90 <adc_enable_all+0x48>)
  400e4c:	2108      	movs	r1, #8
  400e4e:	4628      	mov	r0, r5
  400e50:	4c10      	ldr	r4, [pc, #64]	; (400e94 <adc_enable_all+0x4c>)
  400e52:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  400e54:	2102      	movs	r1, #2
  400e56:	4628      	mov	r0, r5
  400e58:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  400e5a:	4e0f      	ldr	r6, [pc, #60]	; (400e98 <adc_enable_all+0x50>)
  400e5c:	2101      	movs	r1, #1
  400e5e:	4630      	mov	r0, r6
  400e60:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  400e62:	2106      	movs	r1, #6
  400e64:	4630      	mov	r0, r6
  400e66:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  400e68:	2105      	movs	r1, #5
  400e6a:	4630      	mov	r0, r6
  400e6c:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  400e6e:	2106      	movs	r1, #6
  400e70:	4628      	mov	r0, r5
  400e72:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  400e74:	210a      	movs	r1, #10
  400e76:	4628      	mov	r0, r5
  400e78:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  400e7a:	2100      	movs	r1, #0
  400e7c:	4630      	mov	r0, r6
  400e7e:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  400e80:	2105      	movs	r1, #5
  400e82:	4628      	mov	r0, r5
  400e84:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  400e86:	2100      	movs	r1, #0
  400e88:	4628      	mov	r0, r5
  400e8a:	47a0      	blx	r4
  400e8c:	bd70      	pop	{r4, r5, r6, pc}
  400e8e:	bf00      	nop
  400e90:	20400730 	.word	0x20400730
  400e94:	004019a1 	.word	0x004019a1
  400e98:	20400808 	.word	0x20400808

00400e9c <adc_read>:
	adc_async_disable_channel(ADC_TEMP_MOTOR);
}


//reads data from the DMA buffers
int adc_read(struct adc_async_descriptor *const descr, const uint8_t channel){
  400e9c:	b410      	push	{r4}
	//null checking variable to see if a write has occured
	has_0_triggered = false;
  400e9e:	2300      	movs	r3, #0
  400ea0:	4a17      	ldr	r2, [pc, #92]	; (400f00 <adc_read+0x64>)
  400ea2:	7013      	strb	r3, [r2, #0]
	has_1_triggered = false;
  400ea4:	4a17      	ldr	r2, [pc, #92]	; (400f04 <adc_read+0x68>)
  400ea6:	7013      	strb	r3, [r2, #0]
	
		
	if (descr == (&ADC_0)){
  400ea8:	4b17      	ldr	r3, [pc, #92]	; (400f08 <adc_read+0x6c>)
  400eaa:	4298      	cmp	r0, r3
  400eac:	d008      	beq.n	400ec0 <adc_read+0x24>
				return temp;
			}
		}
	}
	
	if (descr == (&ADC_1)){
  400eae:	4b17      	ldr	r3, [pc, #92]	; (400f0c <adc_read+0x70>)
  400eb0:	4298      	cmp	r0, r3
  400eb2:	d014      	beq.n	400ede <adc_read+0x42>
			}
		}
	}
	
	
	return 0;
  400eb4:	2000      	movs	r0, #0
  400eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  400eba:	4770      	bx	lr
				int temp = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400ebc:	b298      	uxth	r0, r3
  400ebe:	e7fa      	b.n	400eb6 <adc_read+0x1a>
  400ec0:	2200      	movs	r2, #0
		for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400ec2:	2a05      	cmp	r2, #5
  400ec4:	dcf3      	bgt.n	400eae <adc_read+0x12>
			if((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk) == AFEC_LCDR_CHNB(channel)){
  400ec6:	4b12      	ldr	r3, [pc, #72]	; (400f10 <adc_read+0x74>)
  400ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400ecc:	ea83 6401 	eor.w	r4, r3, r1, lsl #24
  400ed0:	f014 6f70 	tst.w	r4, #251658240	; 0xf000000
  400ed4:	d0f2      	beq.n	400ebc <adc_read+0x20>
		for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400ed6:	3201      	adds	r2, #1
  400ed8:	e7f3      	b.n	400ec2 <adc_read+0x26>
				int temp = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400eda:	b280      	uxth	r0, r0
  400edc:	e7eb      	b.n	400eb6 <adc_read+0x1a>
  400ede:	2300      	movs	r3, #0
		for (int i =0; i<ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400ee0:	2b03      	cmp	r3, #3
  400ee2:	dc0a      	bgt.n	400efa <adc_read+0x5e>
			if((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk) == AFEC_LCDR_CHNB(channel)){
  400ee4:	4a0a      	ldr	r2, [pc, #40]	; (400f10 <adc_read+0x74>)
  400ee6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  400eea:	69d0      	ldr	r0, [r2, #28]
  400eec:	ea80 6201 	eor.w	r2, r0, r1, lsl #24
  400ef0:	f012 6f70 	tst.w	r2, #251658240	; 0xf000000
  400ef4:	d0f1      	beq.n	400eda <adc_read+0x3e>
		for (int i =0; i<ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400ef6:	3301      	adds	r3, #1
  400ef8:	e7f2      	b.n	400ee0 <adc_read+0x44>
	return 0;
  400efa:	2000      	movs	r0, #0
  400efc:	e7db      	b.n	400eb6 <adc_read+0x1a>
  400efe:	bf00      	nop
  400f00:	204005f8 	.word	0x204005f8
  400f04:	204005b4 	.word	0x204005b4
  400f08:	20400730 	.word	0x20400730
  400f0c:	20400808 	.word	0x20400808
  400f10:	20400234 	.word	0x20400234

00400f14 <pwm_0_callback>:
#include <hpl_pwm_config.h>
#include "Time_Tester.h"

int counter = 0;

void pwm_0_callback(const struct pwm_descriptor *const descr){
  400f14:	b508      	push	{r3, lr}
	
	gather_control_data();
  400f16:	4b02      	ldr	r3, [pc, #8]	; (400f20 <pwm_0_callback+0xc>)
  400f18:	4798      	blx	r3
		printf("PWM Interrupt \n");
	}
	*/
	
	//for timing diagram
	time_record_timestamp();
  400f1a:	4b02      	ldr	r3, [pc, #8]	; (400f24 <pwm_0_callback+0x10>)
  400f1c:	4798      	blx	r3
  400f1e:	bd08      	pop	{r3, pc}
  400f20:	00400275 	.word	0x00400275
  400f24:	00401189 	.word	0x00401189

00400f28 <pwm_init_user>:
}


void pwm_init_user(void){
  400f28:	b508      	push	{r3, lr}
}

static inline void hri_pwm_set_CMR_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmr_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400f2a:	4b2e      	ldr	r3, [pc, #184]	; (400fe4 <pwm_init_user+0xbc>)
  400f2c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  400f30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400f34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}

static inline void hri_pwm_set_DT_DTH_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400f38:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400f3c:	f042 020a 	orr.w	r2, r2, #10
  400f40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
}

static inline void hri_pwm_set_DT_DTL_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400f44:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400f48:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  400f4c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400f50:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
  400f54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400f58:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400f5c:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400f60:	f042 020a 	orr.w	r2, r2, #10
  400f64:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400f68:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400f6c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  400f70:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400f74:	4a1c      	ldr	r2, [pc, #112]	; (400fe8 <pwm_init_user+0xc0>)
  400f76:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  400f7a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  400f7e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400f82:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400f86:	f041 010a 	orr.w	r1, r1, #10
  400f8a:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400f8e:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400f92:	f441 2120 	orr.w	r1, r1, #655360	; 0xa0000
  400f96:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
}

static inline void hri_pwm_set_CMPV_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmpv_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV |= mask;
  400f9a:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
  400f9e:	f041 0101 	orr.w	r1, r1, #1
  400fa2:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  400fa6:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
  400faa:	f041 0101 	orr.w	r1, r1, #1
  400fae:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  400fb2:	2201      	movs	r2, #1
  400fb4:	611a      	str	r2, [r3, #16]
	
	
	//we want interrupt from one of the PWMs so that we can start the control loop
	//interrupt on PWM 0, channel 0 is enabled ; on PWM 1 is disabled
	hri_pwm_set_IMR1_CHID0_bit(PWM0);									//enable the interrupt from ADC 0, channel 0
	pwm_register_callback(&PWM_0, PWM_PERIOD_CB, pwm_0_callback);
  400fb6:	4a0d      	ldr	r2, [pc, #52]	; (400fec <pwm_init_user+0xc4>)
  400fb8:	2100      	movs	r1, #0
  400fba:	480d      	ldr	r0, [pc, #52]	; (400ff0 <pwm_init_user+0xc8>)
  400fbc:	4b0d      	ldr	r3, [pc, #52]	; (400ff4 <pwm_init_user+0xcc>)
  400fbe:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400fc0:	4b0d      	ldr	r3, [pc, #52]	; (400ff8 <pwm_init_user+0xd0>)
  400fc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400fc6:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400fc8:	2260      	movs	r2, #96	; 0x60
  400fca:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400fd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400fda:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400fde:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400fe2:	bd08      	pop	{r3, pc}
  400fe4:	40020000 	.word	0x40020000
  400fe8:	4005c000 	.word	0x4005c000
  400fec:	00400f15 	.word	0x00400f15
  400ff0:	20400648 	.word	0x20400648
  400ff4:	00401c6d 	.word	0x00401c6d
  400ff8:	e000e100 	.word	0xe000e100

00400ffc <pwm_enable_all>:
}


//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400ffc:	b570      	push	{r4, r5, r6, lr}
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM |= mask;
  400ffe:	4a12      	ldr	r2, [pc, #72]	; (401048 <pwm_enable_all+0x4c>)
  401000:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  401004:	f043 0301 	orr.w	r3, r3, #1
  401008:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
  40100c:	f502 3270 	add.w	r2, r2, #245760	; 0x3c000
  401010:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  401014:	f043 0301 	orr.w	r3, r3, #1
  401018:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	hri_pwm_set_CMPM_reg(PWM0, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	hri_pwm_set_CMPM_reg(PWM1, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  40101c:	4c0b      	ldr	r4, [pc, #44]	; (40104c <pwm_enable_all+0x50>)
  40101e:	4620      	mov	r0, r4
  401020:	4e0b      	ldr	r6, [pc, #44]	; (401050 <pwm_enable_all+0x54>)
  401022:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  401024:	4d0b      	ldr	r5, [pc, #44]	; (401054 <pwm_enable_all+0x58>)
  401026:	4628      	mov	r0, r5
  401028:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD-1);
  40102a:	f240 32e7 	movw	r2, #999	; 0x3e7
  40102e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  401032:	4620      	mov	r0, r4
  401034:	4c08      	ldr	r4, [pc, #32]	; (401058 <pwm_enable_all+0x5c>)
  401036:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD-1);
  401038:	f240 32e7 	movw	r2, #999	; 0x3e7
  40103c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  401040:	4628      	mov	r0, r5
  401042:	47a0      	blx	r4
  401044:	bd70      	pop	{r4, r5, r6, pc}
  401046:	bf00      	nop
  401048:	40020000 	.word	0x40020000
  40104c:	20400648 	.word	0x20400648
  401050:	00401c31 	.word	0x00401c31
  401054:	204007ec 	.word	0x204007ec
  401058:	00401cb5 	.word	0x00401cb5

0040105c <pwm_set_duty>:
//sets individual channel pwm duty cycle
void pwm_set_duty(struct  pwm_descriptor * const descr, const uint8_t channel, const pwm_period_t duty_cycle){
	// based on available code from <hpl_pwm.h>
	// the default function doesn't allow to set the PWM cycle on individual channels
	
	hri_pwm_write_CDTYUPD_reg(descr->device.hw, channel, duty_cycle);
  40105c:	6903      	ldr	r3, [r0, #16]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  40105e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  401062:	f8c1 2208 	str.w	r2, [r1, #520]	; 0x208
  401066:	4770      	bx	lr

00401068 <Current_Offset_And_Timing_Test>:


float y_z0, y_z1, x_z0, x_z1;

	
void Current_Offset_And_Timing_Test(void){
  401068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40106c:	b083      	sub	sp, #12
  40106e:	e017      	b.n	4010a0 <Current_Offset_And_Timing_Test+0x38>
		//printf("LPF Curr A = %f\n",y_z0);
		
		//for time diagram testing 
		//artificial delay to allow for the timings to be collected withouth the delay functions causing any problems with the systick
		int k = 0;
		for(int i=0; i<100000;i++){
  401070:	3301      	adds	r3, #1
  401072:	4a31      	ldr	r2, [pc, #196]	; (401138 <Current_Offset_And_Timing_Test+0xd0>)
  401074:	4293      	cmp	r3, r2
  401076:	ddfb      	ble.n	401070 <Current_Offset_And_Timing_Test+0x8>
			k +=i;
		}
		printf("Time ADC_0 = %f us \t Time ADC_1 = %f us \n",time_delta_adc_0,time_delta_adc_1);
  401078:	4c30      	ldr	r4, [pc, #192]	; (40113c <Current_Offset_And_Timing_Test+0xd4>)
  40107a:	4b31      	ldr	r3, [pc, #196]	; (401140 <Current_Offset_And_Timing_Test+0xd8>)
  40107c:	6818      	ldr	r0, [r3, #0]
  40107e:	47a0      	blx	r4
  401080:	4606      	mov	r6, r0
  401082:	460f      	mov	r7, r1
  401084:	4b2f      	ldr	r3, [pc, #188]	; (401144 <Current_Offset_And_Timing_Test+0xdc>)
  401086:	6818      	ldr	r0, [r3, #0]
  401088:	47a0      	blx	r4
  40108a:	e9cd 0100 	strd	r0, r1, [sp]
  40108e:	4632      	mov	r2, r6
  401090:	463b      	mov	r3, r7
  401092:	482d      	ldr	r0, [pc, #180]	; (401148 <Current_Offset_And_Timing_Test+0xe0>)
  401094:	492d      	ldr	r1, [pc, #180]	; (40114c <Current_Offset_And_Timing_Test+0xe4>)
  401096:	4788      	blx	r1
		delay_ms(2000);
  401098:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  40109c:	4b2c      	ldr	r3, [pc, #176]	; (401150 <Current_Offset_And_Timing_Test+0xe8>)
  40109e:	4798      	blx	r3
		dma_adc_0_enable_for_one_transaction();
  4010a0:	4b2c      	ldr	r3, [pc, #176]	; (401154 <Current_Offset_And_Timing_Test+0xec>)
  4010a2:	4798      	blx	r3
		dma_adc_1_enable_for_one_transaction();
  4010a4:	4b2c      	ldr	r3, [pc, #176]	; (401158 <Current_Offset_And_Timing_Test+0xf0>)
  4010a6:	4798      	blx	r3
		delay_ms(2);
  4010a8:	2002      	movs	r0, #2
  4010aa:	4b29      	ldr	r3, [pc, #164]	; (401150 <Current_Offset_And_Timing_Test+0xe8>)
  4010ac:	4798      	blx	r3
		printf("\n");
  4010ae:	482b      	ldr	r0, [pc, #172]	; (40115c <Current_Offset_And_Timing_Test+0xf4>)
  4010b0:	4b26      	ldr	r3, [pc, #152]	; (40114c <Current_Offset_And_Timing_Test+0xe4>)
  4010b2:	4798      	blx	r3
		x_z0 = reconstruct_curr_A(adc_read(ADC_CURRENT_A));
  4010b4:	2108      	movs	r1, #8
  4010b6:	482a      	ldr	r0, [pc, #168]	; (401160 <Current_Offset_And_Timing_Test+0xf8>)
  4010b8:	4b2a      	ldr	r3, [pc, #168]	; (401164 <Current_Offset_And_Timing_Test+0xfc>)
  4010ba:	4798      	blx	r3
  4010bc:	4b2a      	ldr	r3, [pc, #168]	; (401168 <Current_Offset_And_Timing_Test+0x100>)
  4010be:	4798      	blx	r3
  4010c0:	4682      	mov	sl, r0
  4010c2:	4b2a      	ldr	r3, [pc, #168]	; (40116c <Current_Offset_And_Timing_Test+0x104>)
  4010c4:	6018      	str	r0, [r3, #0]
		y_z0 = 0.023 * y_z1 + 0.511 * x_z0 + 0.511 * x_z1;
  4010c6:	4e2a      	ldr	r6, [pc, #168]	; (401170 <Current_Offset_And_Timing_Test+0x108>)
  4010c8:	4d1c      	ldr	r5, [pc, #112]	; (40113c <Current_Offset_And_Timing_Test+0xd4>)
  4010ca:	6830      	ldr	r0, [r6, #0]
  4010cc:	47a8      	blx	r5
  4010ce:	4c29      	ldr	r4, [pc, #164]	; (401174 <Current_Offset_And_Timing_Test+0x10c>)
  4010d0:	a315      	add	r3, pc, #84	; (adr r3, 401128 <Current_Offset_And_Timing_Test+0xc0>)
  4010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4010d6:	47a0      	blx	r4
  4010d8:	4680      	mov	r8, r0
  4010da:	4689      	mov	r9, r1
  4010dc:	4650      	mov	r0, sl
  4010de:	47a8      	blx	r5
  4010e0:	a313      	add	r3, pc, #76	; (adr r3, 401130 <Current_Offset_And_Timing_Test+0xc8>)
  4010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4010e6:	47a0      	blx	r4
  4010e8:	4f23      	ldr	r7, [pc, #140]	; (401178 <Current_Offset_And_Timing_Test+0x110>)
  4010ea:	4602      	mov	r2, r0
  4010ec:	460b      	mov	r3, r1
  4010ee:	4640      	mov	r0, r8
  4010f0:	4649      	mov	r1, r9
  4010f2:	47b8      	blx	r7
  4010f4:	4680      	mov	r8, r0
  4010f6:	4689      	mov	r9, r1
  4010f8:	f8df b088 	ldr.w	fp, [pc, #136]	; 401184 <Current_Offset_And_Timing_Test+0x11c>
  4010fc:	f8db 0000 	ldr.w	r0, [fp]
  401100:	47a8      	blx	r5
  401102:	a30b      	add	r3, pc, #44	; (adr r3, 401130 <Current_Offset_And_Timing_Test+0xc8>)
  401104:	e9d3 2300 	ldrd	r2, r3, [r3]
  401108:	47a0      	blx	r4
  40110a:	4602      	mov	r2, r0
  40110c:	460b      	mov	r3, r1
  40110e:	4640      	mov	r0, r8
  401110:	4649      	mov	r1, r9
  401112:	47b8      	blx	r7
  401114:	4b19      	ldr	r3, [pc, #100]	; (40117c <Current_Offset_And_Timing_Test+0x114>)
  401116:	4798      	blx	r3
  401118:	4b19      	ldr	r3, [pc, #100]	; (401180 <Current_Offset_And_Timing_Test+0x118>)
  40111a:	6018      	str	r0, [r3, #0]
		x_z1 = x_z0;
  40111c:	f8cb a000 	str.w	sl, [fp]
		y_z1 = y_z0;
  401120:	6030      	str	r0, [r6, #0]
		for(int i=0; i<100000;i++){
  401122:	2300      	movs	r3, #0
  401124:	e7a5      	b.n	401072 <Current_Offset_And_Timing_Test+0xa>
  401126:	bf00      	nop
  401128:	df3b645a 	.word	0xdf3b645a
  40112c:	3f978d4f 	.word	0x3f978d4f
  401130:	ac083127 	.word	0xac083127
  401134:	3fe05a1c 	.word	0x3fe05a1c
  401138:	0001869f 	.word	0x0001869f
  40113c:	0040351d 	.word	0x0040351d
  401140:	204005f0 	.word	0x204005f0
  401144:	20400614 	.word	0x20400614
  401148:	0040666c 	.word	0x0040666c
  40114c:	00404541 	.word	0x00404541
  401150:	00401a11 	.word	0x00401a11
  401154:	00400b65 	.word	0x00400b65
  401158:	00400c3d 	.word	0x00400c3d
  40115c:	00406694 	.word	0x00406694
  401160:	20400730 	.word	0x20400730
  401164:	00400e9d 	.word	0x00400e9d
  401168:	004005d1 	.word	0x004005d1
  40116c:	2040063c 	.word	0x2040063c
  401170:	20400640 	.word	0x20400640
  401174:	004035c5 	.word	0x004035c5
  401178:	00403261 	.word	0x00403261
  40117c:	00403b75 	.word	0x00403b75
  401180:	20400638 	.word	0x20400638
  401184:	20400644 	.word	0x20400644

00401188 <time_record_timestamp>:




inline void time_record_timestamp(void){
	int current_systick = SysTick->VAL;
  401188:	4b02      	ldr	r3, [pc, #8]	; (401194 <time_record_timestamp+0xc>)
  40118a:	689a      	ldr	r2, [r3, #8]
	timestamp = current_systick;
  40118c:	4b02      	ldr	r3, [pc, #8]	; (401198 <time_record_timestamp+0x10>)
  40118e:	601a      	str	r2, [r3, #0]
  401190:	4770      	bx	lr
  401192:	bf00      	nop
  401194:	e000e010 	.word	0xe000e010
  401198:	20400624 	.word	0x20400624

0040119c <time_get_delta_us>:
}

inline float time_get_delta_us(void){
	int current_systick = SysTick->VAL;
  40119c:	4b0a      	ldr	r3, [pc, #40]	; (4011c8 <time_get_delta_us+0x2c>)
  40119e:	689a      	ldr	r2, [r3, #8]
	int delta = timestamp - current_systick;
  4011a0:	4b0a      	ldr	r3, [pc, #40]	; (4011cc <time_get_delta_us+0x30>)
  4011a2:	681b      	ldr	r3, [r3, #0]
  4011a4:	1a9b      	subs	r3, r3, r2
	if(delta <= 0) delta += (1<<24);
  4011a6:	2b00      	cmp	r3, #0
  4011a8:	dd0a      	ble.n	4011c0 <time_get_delta_us+0x24>
	//systick clock frequency equals MCU clock at 300MHz
	return (float) delta / 300;
  4011aa:	ee07 3a90 	vmov	s15, r3
  4011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4011b2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 4011d0 <time_get_delta_us+0x34>
  4011b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
  4011ba:	ee16 0a90 	vmov	r0, s13
  4011be:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);
  4011c0:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  4011c4:	e7f1      	b.n	4011aa <time_get_delta_us+0xe>
  4011c6:	bf00      	nop
  4011c8:	e000e010 	.word	0xe000e010
  4011cc:	20400624 	.word	0x20400624
  4011d0:	43960000 	.word	0x43960000

004011d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4011d4:	e7fe      	b.n	4011d4 <Dummy_Handler>
	...

004011d8 <Reset_Handler>:
{
  4011d8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4011da:	4b10      	ldr	r3, [pc, #64]	; (40121c <Reset_Handler+0x44>)
  4011dc:	4a10      	ldr	r2, [pc, #64]	; (401220 <Reset_Handler+0x48>)
  4011de:	429a      	cmp	r2, r3
  4011e0:	d009      	beq.n	4011f6 <Reset_Handler+0x1e>
  4011e2:	4b0e      	ldr	r3, [pc, #56]	; (40121c <Reset_Handler+0x44>)
  4011e4:	4a0e      	ldr	r2, [pc, #56]	; (401220 <Reset_Handler+0x48>)
  4011e6:	e003      	b.n	4011f0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4011e8:	6811      	ldr	r1, [r2, #0]
  4011ea:	6019      	str	r1, [r3, #0]
  4011ec:	3304      	adds	r3, #4
  4011ee:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4011f0:	490c      	ldr	r1, [pc, #48]	; (401224 <Reset_Handler+0x4c>)
  4011f2:	428b      	cmp	r3, r1
  4011f4:	d3f8      	bcc.n	4011e8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4011f6:	4b0c      	ldr	r3, [pc, #48]	; (401228 <Reset_Handler+0x50>)
  4011f8:	e002      	b.n	401200 <Reset_Handler+0x28>
                *pDest++ = 0;
  4011fa:	2200      	movs	r2, #0
  4011fc:	601a      	str	r2, [r3, #0]
  4011fe:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401200:	4a0a      	ldr	r2, [pc, #40]	; (40122c <Reset_Handler+0x54>)
  401202:	4293      	cmp	r3, r2
  401204:	d3f9      	bcc.n	4011fa <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401206:	4a0a      	ldr	r2, [pc, #40]	; (401230 <Reset_Handler+0x58>)
  401208:	4b0a      	ldr	r3, [pc, #40]	; (401234 <Reset_Handler+0x5c>)
  40120a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40120e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  401210:	4b09      	ldr	r3, [pc, #36]	; (401238 <Reset_Handler+0x60>)
  401212:	4798      	blx	r3
        main();
  401214:	4b09      	ldr	r3, [pc, #36]	; (40123c <Reset_Handler+0x64>)
  401216:	4798      	blx	r3
  401218:	e7fe      	b.n	401218 <Reset_Handler+0x40>
  40121a:	bf00      	nop
  40121c:	20400000 	.word	0x20400000
  401220:	00406e38 	.word	0x00406e38
  401224:	20400218 	.word	0x20400218
  401228:	20400218 	.word	0x20400218
  40122c:	20400838 	.word	0x20400838
  401230:	e000ed00 	.word	0xe000ed00
  401234:	00400000 	.word	0x00400000
  401238:	00403c15 	.word	0x00403c15
  40123c:	00403075 	.word	0x00403075

00401240 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  401240:	b5f0      	push	{r4, r5, r6, r7, lr}
  401242:	b085      	sub	sp, #20
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401244:	4b20      	ldr	r3, [pc, #128]	; (4012c8 <ADC_1_init+0x88>)
  401246:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  40124a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40124e:	d104      	bne.n	40125a <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401250:	f44f 7280 	mov.w	r2, #256	; 0x100
  401254:	4b1c      	ldr	r3, [pc, #112]	; (4012c8 <ADC_1_init+0x88>)
  401256:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  40125a:	4d1c      	ldr	r5, [pc, #112]	; (4012cc <ADC_1_init+0x8c>)
  40125c:	4c1c      	ldr	r4, [pc, #112]	; (4012d0 <ADC_1_init+0x90>)
  40125e:	2600      	movs	r6, #0
  401260:	9602      	str	r6, [sp, #8]
  401262:	4b1c      	ldr	r3, [pc, #112]	; (4012d4 <ADC_1_init+0x94>)
  401264:	9301      	str	r3, [sp, #4]
  401266:	2304      	movs	r3, #4
  401268:	9300      	str	r3, [sp, #0]
  40126a:	2306      	movs	r3, #6
  40126c:	462a      	mov	r2, r5
  40126e:	491a      	ldr	r1, [pc, #104]	; (4012d8 <ADC_1_init+0x98>)
  401270:	4620      	mov	r0, r4
  401272:	4f1a      	ldr	r7, [pc, #104]	; (4012dc <ADC_1_init+0x9c>)
  401274:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  401276:	2310      	movs	r3, #16
  401278:	f105 0208 	add.w	r2, r5, #8
  40127c:	4631      	mov	r1, r6
  40127e:	4620      	mov	r0, r4
  401280:	4e17      	ldr	r6, [pc, #92]	; (4012e0 <ADC_1_init+0xa0>)
  401282:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  401284:	2310      	movs	r3, #16
  401286:	f105 0218 	add.w	r2, r5, #24
  40128a:	2101      	movs	r1, #1
  40128c:	4620      	mov	r0, r4
  40128e:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  401290:	2310      	movs	r3, #16
  401292:	f105 0228 	add.w	r2, r5, #40	; 0x28
  401296:	2105      	movs	r1, #5
  401298:	4620      	mov	r0, r4
  40129a:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  40129c:	2310      	movs	r3, #16
  40129e:	f105 0238 	add.w	r2, r5, #56	; 0x38
  4012a2:	2106      	movs	r1, #6
  4012a4:	4620      	mov	r0, r4
  4012a6:	47b0      	blx	r6
	((Pio *)hw)->PIO_PER = mask;
  4012a8:	2202      	movs	r2, #2
  4012aa:	4b0e      	ldr	r3, [pc, #56]	; (4012e4 <ADC_1_init+0xa4>)
  4012ac:	601a      	str	r2, [r3, #0]
  4012ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4012b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4012b6:	601a      	str	r2, [r3, #0]
  4012b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4012bc:	601a      	str	r2, [r3, #0]
  4012be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4012c2:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  4012c4:	b005      	add	sp, #20
  4012c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4012c8:	400e0600 	.word	0x400e0600
  4012cc:	20400260 	.word	0x20400260
  4012d0:	20400808 	.word	0x20400808
  4012d4:	204006a8 	.word	0x204006a8
  4012d8:	40064000 	.word	0x40064000
  4012dc:	00401841 	.word	0x00401841
  4012e0:	004018e9 	.word	0x004018e9
  4012e4:	400e1000 	.word	0x400e1000

004012e8 <ADC_0_init>:
{
  4012e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012ec:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4012ee:	4b2a      	ldr	r3, [pc, #168]	; (401398 <ADC_0_init+0xb0>)
  4012f0:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4012f2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  4012f6:	d103      	bne.n	401300 <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4012f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4012fc:	4b26      	ldr	r3, [pc, #152]	; (401398 <ADC_0_init+0xb0>)
  4012fe:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  401300:	4d26      	ldr	r5, [pc, #152]	; (40139c <ADC_0_init+0xb4>)
  401302:	4c27      	ldr	r4, [pc, #156]	; (4013a0 <ADC_0_init+0xb8>)
  401304:	2600      	movs	r6, #0
  401306:	9602      	str	r6, [sp, #8]
  401308:	4b26      	ldr	r3, [pc, #152]	; (4013a4 <ADC_0_init+0xbc>)
  40130a:	9301      	str	r3, [sp, #4]
  40130c:	2706      	movs	r7, #6
  40130e:	9700      	str	r7, [sp, #0]
  401310:	230a      	movs	r3, #10
  401312:	f105 0248 	add.w	r2, r5, #72	; 0x48
  401316:	4924      	ldr	r1, [pc, #144]	; (4013a8 <ADC_0_init+0xc0>)
  401318:	4620      	mov	r0, r4
  40131a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4013b8 <ADC_0_init+0xd0>
  40131e:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  401320:	2310      	movs	r3, #16
  401322:	f105 0254 	add.w	r2, r5, #84	; 0x54
  401326:	4631      	mov	r1, r6
  401328:	4620      	mov	r0, r4
  40132a:	4e20      	ldr	r6, [pc, #128]	; (4013ac <ADC_0_init+0xc4>)
  40132c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  40132e:	2310      	movs	r3, #16
  401330:	f105 0264 	add.w	r2, r5, #100	; 0x64
  401334:	2102      	movs	r1, #2
  401336:	4620      	mov	r0, r4
  401338:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  40133a:	2310      	movs	r3, #16
  40133c:	f105 0274 	add.w	r2, r5, #116	; 0x74
  401340:	2105      	movs	r1, #5
  401342:	4620      	mov	r0, r4
  401344:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  401346:	2310      	movs	r3, #16
  401348:	f105 0284 	add.w	r2, r5, #132	; 0x84
  40134c:	4639      	mov	r1, r7
  40134e:	4620      	mov	r0, r4
  401350:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  401352:	2310      	movs	r3, #16
  401354:	f105 0294 	add.w	r2, r5, #148	; 0x94
  401358:	2108      	movs	r1, #8
  40135a:	4620      	mov	r0, r4
  40135c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  40135e:	2310      	movs	r3, #16
  401360:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  401364:	210a      	movs	r1, #10
  401366:	4620      	mov	r0, r4
  401368:	47b0      	blx	r6
  40136a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40136e:	4b10      	ldr	r3, [pc, #64]	; (4013b0 <ADC_0_init+0xc8>)
  401370:	601a      	str	r2, [r3, #0]
  401372:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401376:	2208      	movs	r2, #8
  401378:	601a      	str	r2, [r3, #0]
  40137a:	2204      	movs	r2, #4
  40137c:	601a      	str	r2, [r3, #0]
  40137e:	4a0d      	ldr	r2, [pc, #52]	; (4013b4 <ADC_0_init+0xcc>)
  401380:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401384:	6011      	str	r1, [r2, #0]
  401386:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40138a:	6011      	str	r1, [r2, #0]
  40138c:	2201      	movs	r2, #1
  40138e:	601a      	str	r2, [r3, #0]
}
  401390:	b004      	add	sp, #16
  401392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401396:	bf00      	nop
  401398:	400e0600 	.word	0x400e0600
  40139c:	20400260 	.word	0x20400260
  4013a0:	20400730 	.word	0x20400730
  4013a4:	2040075c 	.word	0x2040075c
  4013a8:	4003c000 	.word	0x4003c000
  4013ac:	004018e9 	.word	0x004018e9
  4013b0:	400e1400 	.word	0x400e1400
  4013b4:	400e0e00 	.word	0x400e0e00
  4013b8:	00401841 	.word	0x00401841

004013bc <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4013bc:	4b04      	ldr	r3, [pc, #16]	; (4013d0 <EXTERNAL_IRQ_D_init+0x14>)
  4013be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4013c2:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4013c4:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4013c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4013ca:	601a      	str	r2, [r3, #0]
  4013cc:	4770      	bx	lr
  4013ce:	bf00      	nop
  4013d0:	400e1400 	.word	0x400e1400

004013d4 <EXTERNAL_IRQ_B_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4013d4:	4b04      	ldr	r3, [pc, #16]	; (4013e8 <EXTERNAL_IRQ_B_init+0x14>)
  4013d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4013da:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4013dc:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4013de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4013e2:	601a      	str	r2, [r3, #0]
  4013e4:	4770      	bx	lr
  4013e6:	bf00      	nop
  4013e8:	400e1000 	.word	0x400e1000

004013ec <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4013ec:	4b06      	ldr	r3, [pc, #24]	; (401408 <EXTERNAL_IRQ_A_init+0x1c>)
  4013ee:	2204      	movs	r2, #4
  4013f0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4013f2:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4013f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4013f8:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4013fa:	2220      	movs	r2, #32
  4013fc:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4013fe:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  401400:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  401404:	601a      	str	r2, [r3, #0]
  401406:	4770      	bx	lr
  401408:	400e0e00 	.word	0x400e0e00

0040140c <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40140c:	4b16      	ldr	r3, [pc, #88]	; (401468 <PWM_0_PORT_init+0x5c>)
  40140e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401410:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  401414:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401416:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401418:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  40141c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40141e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401422:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401424:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401426:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  40142a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40142c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40142e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  401432:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401434:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401438:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40143a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40143c:	f022 0202 	bic.w	r2, r2, #2
  401440:	671a      	str	r2, [r3, #112]	; 0x70
  401442:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401444:	f022 0202 	bic.w	r2, r2, #2
  401448:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40144a:	2202      	movs	r2, #2
  40144c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40144e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401450:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  401454:	671a      	str	r2, [r3, #112]	; 0x70
  401456:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401458:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  40145c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40145e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401462:	605a      	str	r2, [r3, #4]
  401464:	4770      	bx	lr
  401466:	bf00      	nop
  401468:	400e0e00 	.word	0x400e0e00

0040146c <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40146c:	4b04      	ldr	r3, [pc, #16]	; (401480 <PWM_0_CLOCK_init+0x14>)
  40146e:	699b      	ldr	r3, [r3, #24]
  401470:	2b00      	cmp	r3, #0
  401472:	db03      	blt.n	40147c <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401474:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401478:	4b01      	ldr	r3, [pc, #4]	; (401480 <PWM_0_CLOCK_init+0x14>)
  40147a:	611a      	str	r2, [r3, #16]
  40147c:	4770      	bx	lr
  40147e:	bf00      	nop
  401480:	400e0600 	.word	0x400e0600

00401484 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  401484:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  401486:	4b06      	ldr	r3, [pc, #24]	; (4014a0 <PWM_0_init+0x1c>)
  401488:	4798      	blx	r3
	PWM_0_PORT_init();
  40148a:	4b06      	ldr	r3, [pc, #24]	; (4014a4 <PWM_0_init+0x20>)
  40148c:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  40148e:	4b06      	ldr	r3, [pc, #24]	; (4014a8 <PWM_0_init+0x24>)
  401490:	4798      	blx	r3
  401492:	4602      	mov	r2, r0
  401494:	4905      	ldr	r1, [pc, #20]	; (4014ac <PWM_0_init+0x28>)
  401496:	4806      	ldr	r0, [pc, #24]	; (4014b0 <PWM_0_init+0x2c>)
  401498:	4b06      	ldr	r3, [pc, #24]	; (4014b4 <PWM_0_init+0x30>)
  40149a:	4798      	blx	r3
  40149c:	bd08      	pop	{r3, pc}
  40149e:	bf00      	nop
  4014a0:	0040146d 	.word	0x0040146d
  4014a4:	0040140d 	.word	0x0040140d
  4014a8:	00402abd 	.word	0x00402abd
  4014ac:	40020000 	.word	0x40020000
  4014b0:	20400648 	.word	0x20400648
  4014b4:	00401bed 	.word	0x00401bed

004014b8 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4014b8:	4b0c      	ldr	r3, [pc, #48]	; (4014ec <PWM_1_PORT_init+0x34>)
  4014ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4014bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4014c0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4014c2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4014c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4014c8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4014ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4014ce:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4014d0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4014d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4014d6:	f042 0201 	orr.w	r2, r2, #1
  4014da:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4014dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4014de:	f022 0201 	bic.w	r2, r2, #1
  4014e2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4014e4:	2201      	movs	r2, #1
  4014e6:	605a      	str	r2, [r3, #4]
  4014e8:	4770      	bx	lr
  4014ea:	bf00      	nop
  4014ec:	400e0e00 	.word	0x400e0e00

004014f0 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4014f0:	4b05      	ldr	r3, [pc, #20]	; (401508 <PWM_1_CLOCK_init+0x18>)
  4014f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4014f6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  4014fa:	d104      	bne.n	401506 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4014fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401500:	4b01      	ldr	r3, [pc, #4]	; (401508 <PWM_1_CLOCK_init+0x18>)
  401502:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  401506:	4770      	bx	lr
  401508:	400e0600 	.word	0x400e0600

0040150c <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  40150c:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  40150e:	4b06      	ldr	r3, [pc, #24]	; (401528 <PWM_1_init+0x1c>)
  401510:	4798      	blx	r3
	PWM_1_PORT_init();
  401512:	4b06      	ldr	r3, [pc, #24]	; (40152c <PWM_1_init+0x20>)
  401514:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  401516:	4b06      	ldr	r3, [pc, #24]	; (401530 <PWM_1_init+0x24>)
  401518:	4798      	blx	r3
  40151a:	4602      	mov	r2, r0
  40151c:	4905      	ldr	r1, [pc, #20]	; (401534 <PWM_1_init+0x28>)
  40151e:	4806      	ldr	r0, [pc, #24]	; (401538 <PWM_1_init+0x2c>)
  401520:	4b06      	ldr	r3, [pc, #24]	; (40153c <PWM_1_init+0x30>)
  401522:	4798      	blx	r3
  401524:	bd08      	pop	{r3, pc}
  401526:	bf00      	nop
  401528:	004014f1 	.word	0x004014f1
  40152c:	004014b9 	.word	0x004014b9
  401530:	00402abd 	.word	0x00402abd
  401534:	4005c000 	.word	0x4005c000
  401538:	204007ec 	.word	0x204007ec
  40153c:	00401bed 	.word	0x00401bed

00401540 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401540:	4b06      	ldr	r3, [pc, #24]	; (40155c <ENCODER_A_PORT_init+0x1c>)
  401542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401544:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  401548:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40154a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40154c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  401550:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401552:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401556:	605a      	str	r2, [r3, #4]
  401558:	4770      	bx	lr
  40155a:	bf00      	nop
  40155c:	400e0e00 	.word	0x400e0e00

00401560 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  401560:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401562:	4b09      	ldr	r3, [pc, #36]	; (401588 <ENCODER_A_init+0x28>)
  401564:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  401566:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40156a:	d103      	bne.n	401574 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40156c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401570:	4b05      	ldr	r3, [pc, #20]	; (401588 <ENCODER_A_init+0x28>)
  401572:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  401574:	4b05      	ldr	r3, [pc, #20]	; (40158c <ENCODER_A_init+0x2c>)
  401576:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  401578:	4b05      	ldr	r3, [pc, #20]	; (401590 <ENCODER_A_init+0x30>)
  40157a:	4798      	blx	r3
  40157c:	4602      	mov	r2, r0
  40157e:	4905      	ldr	r1, [pc, #20]	; (401594 <ENCODER_A_init+0x34>)
  401580:	4805      	ldr	r0, [pc, #20]	; (401598 <ENCODER_A_init+0x38>)
  401582:	4b06      	ldr	r3, [pc, #24]	; (40159c <ENCODER_A_init+0x3c>)
  401584:	4798      	blx	r3
  401586:	bd08      	pop	{r3, pc}
  401588:	400e0600 	.word	0x400e0600
  40158c:	00401541 	.word	0x00401541
  401590:	00402c93 	.word	0x00402c93
  401594:	4000c000 	.word	0x4000c000
  401598:	20400714 	.word	0x20400714
  40159c:	00401d9d 	.word	0x00401d9d

004015a0 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4015a0:	4b06      	ldr	r3, [pc, #24]	; (4015bc <ENCODER_B_PORT_init+0x1c>)
  4015a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4015a4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4015a8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4015aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4015ac:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  4015b0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4015b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4015b6:	605a      	str	r2, [r3, #4]
  4015b8:	4770      	bx	lr
  4015ba:	bf00      	nop
  4015bc:	400e1400 	.word	0x400e1400

004015c0 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  4015c0:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4015c2:	4b0a      	ldr	r3, [pc, #40]	; (4015ec <ENCODER_B_init+0x2c>)
  4015c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4015c8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  4015cc:	d104      	bne.n	4015d8 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4015ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4015d2:	4b06      	ldr	r3, [pc, #24]	; (4015ec <ENCODER_B_init+0x2c>)
  4015d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  4015d8:	4b05      	ldr	r3, [pc, #20]	; (4015f0 <ENCODER_B_init+0x30>)
  4015da:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  4015dc:	4b05      	ldr	r3, [pc, #20]	; (4015f4 <ENCODER_B_init+0x34>)
  4015de:	4798      	blx	r3
  4015e0:	4602      	mov	r2, r0
  4015e2:	4905      	ldr	r1, [pc, #20]	; (4015f8 <ENCODER_B_init+0x38>)
  4015e4:	4805      	ldr	r0, [pc, #20]	; (4015fc <ENCODER_B_init+0x3c>)
  4015e6:	4b06      	ldr	r3, [pc, #24]	; (401600 <ENCODER_B_init+0x40>)
  4015e8:	4798      	blx	r3
  4015ea:	bd08      	pop	{r3, pc}
  4015ec:	400e0600 	.word	0x400e0600
  4015f0:	004015a1 	.word	0x004015a1
  4015f4:	00402c93 	.word	0x00402c93
  4015f8:	40054000 	.word	0x40054000
  4015fc:	20400664 	.word	0x20400664
  401600:	00401d9d 	.word	0x00401d9d

00401604 <delay_driver_init>:
}

void delay_driver_init(void)
{
  401604:	b508      	push	{r3, lr}
	delay_init(SysTick);
  401606:	4802      	ldr	r0, [pc, #8]	; (401610 <delay_driver_init+0xc>)
  401608:	4b02      	ldr	r3, [pc, #8]	; (401614 <delay_driver_init+0x10>)
  40160a:	4798      	blx	r3
  40160c:	bd08      	pop	{r3, pc}
  40160e:	bf00      	nop
  401610:	e000e010 	.word	0xe000e010
  401614:	004019fd 	.word	0x004019fd

00401618 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401618:	4b0f      	ldr	r3, [pc, #60]	; (401658 <EDBG_COM_PORT_init+0x40>)
  40161a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40161c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401620:	671a      	str	r2, [r3, #112]	; 0x70
  401622:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401624:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401628:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40162a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40162e:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  401630:	4a0a      	ldr	r2, [pc, #40]	; (40165c <EDBG_COM_PORT_init+0x44>)
  401632:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  401636:	f043 0310 	orr.w	r3, r3, #16
  40163a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40163e:	4b08      	ldr	r3, [pc, #32]	; (401660 <EDBG_COM_PORT_init+0x48>)
  401640:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401642:	f042 0210 	orr.w	r2, r2, #16
  401646:	671a      	str	r2, [r3, #112]	; 0x70
  401648:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40164a:	f042 0210 	orr.w	r2, r2, #16
  40164e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401650:	2210      	movs	r2, #16
  401652:	605a      	str	r2, [r3, #4]
  401654:	4770      	bx	lr
  401656:	bf00      	nop
  401658:	400e0e00 	.word	0x400e0e00
  40165c:	40088000 	.word	0x40088000
  401660:	400e1000 	.word	0x400e1000

00401664 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401664:	4b04      	ldr	r3, [pc, #16]	; (401678 <EDBG_COM_CLOCK_init+0x14>)
  401666:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  401668:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  40166c:	d103      	bne.n	401676 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40166e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401672:	4b01      	ldr	r3, [pc, #4]	; (401678 <EDBG_COM_CLOCK_init+0x14>)
  401674:	611a      	str	r2, [r3, #16]
  401676:	4770      	bx	lr
  401678:	400e0600 	.word	0x400e0600

0040167c <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  40167c:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  40167e:	4b06      	ldr	r3, [pc, #24]	; (401698 <EDBG_COM_init+0x1c>)
  401680:	4798      	blx	r3
	EDBG_COM_PORT_init();
  401682:	4b06      	ldr	r3, [pc, #24]	; (40169c <EDBG_COM_init+0x20>)
  401684:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  401686:	4b06      	ldr	r3, [pc, #24]	; (4016a0 <EDBG_COM_init+0x24>)
  401688:	4798      	blx	r3
  40168a:	4602      	mov	r2, r0
  40168c:	4905      	ldr	r1, [pc, #20]	; (4016a4 <EDBG_COM_init+0x28>)
  40168e:	4806      	ldr	r0, [pc, #24]	; (4016a8 <EDBG_COM_init+0x2c>)
  401690:	4b06      	ldr	r3, [pc, #24]	; (4016ac <EDBG_COM_init+0x30>)
  401692:	4798      	blx	r3
  401694:	bd08      	pop	{r3, pc}
  401696:	bf00      	nop
  401698:	00401665 	.word	0x00401665
  40169c:	00401619 	.word	0x00401619
  4016a0:	00402ed5 	.word	0x00402ed5
  4016a4:	40028000 	.word	0x40028000
  4016a8:	20400708 	.word	0x20400708
  4016ac:	00401ee5 	.word	0x00401ee5

004016b0 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  4016b0:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4016b2:	4b37      	ldr	r3, [pc, #220]	; (401790 <system_init+0xe0>)
  4016b4:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4016b6:	4b37      	ldr	r3, [pc, #220]	; (401794 <system_init+0xe4>)
  4016b8:	699b      	ldr	r3, [r3, #24]
  4016ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4016be:	d103      	bne.n	4016c8 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4016c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4016c4:	4b33      	ldr	r3, [pc, #204]	; (401794 <system_init+0xe4>)
  4016c6:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4016c8:	4b32      	ldr	r3, [pc, #200]	; (401794 <system_init+0xe4>)
  4016ca:	699b      	ldr	r3, [r3, #24]
  4016cc:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4016d0:	d103      	bne.n	4016da <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4016d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4016d6:	4b2f      	ldr	r3, [pc, #188]	; (401794 <system_init+0xe4>)
  4016d8:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4016da:	4b2e      	ldr	r3, [pc, #184]	; (401794 <system_init+0xe4>)
  4016dc:	699b      	ldr	r3, [r3, #24]
  4016de:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  4016e2:	d103      	bne.n	4016ec <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4016e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4016e8:	4b2a      	ldr	r3, [pc, #168]	; (401794 <system_init+0xe4>)
  4016ea:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4016ec:	4b29      	ldr	r3, [pc, #164]	; (401794 <system_init+0xe4>)
  4016ee:	699b      	ldr	r3, [r3, #24]
  4016f0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4016f4:	d103      	bne.n	4016fe <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4016f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4016fa:	4b26      	ldr	r3, [pc, #152]	; (401794 <system_init+0xe4>)
  4016fc:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  4016fe:	4a26      	ldr	r2, [pc, #152]	; (401798 <system_init+0xe8>)
  401700:	6853      	ldr	r3, [r2, #4]
  401702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401706:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  401708:	4b24      	ldr	r3, [pc, #144]	; (40179c <system_init+0xec>)
  40170a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40170e:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  401710:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  401714:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  401716:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401718:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40171c:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40171e:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401720:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401726:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401728:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40172a:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40172c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  401730:	f44f 7080 	mov.w	r0, #256	; 0x100
  401734:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401736:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401738:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40173a:	f44f 7000 	mov.w	r0, #512	; 0x200
  40173e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401740:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401742:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401744:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401748:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40174a:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40174c:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40174e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401752:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401754:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401756:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401758:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40175a:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40175c:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  40175e:	4b10      	ldr	r3, [pc, #64]	; (4017a0 <system_init+0xf0>)
  401760:	4798      	blx	r3
	ADC_1_init();
  401762:	4b10      	ldr	r3, [pc, #64]	; (4017a4 <system_init+0xf4>)
  401764:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  401766:	4b10      	ldr	r3, [pc, #64]	; (4017a8 <system_init+0xf8>)
  401768:	4798      	blx	r3
	EXTERNAL_IRQ_B_init();
  40176a:	4b10      	ldr	r3, [pc, #64]	; (4017ac <system_init+0xfc>)
  40176c:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  40176e:	4b10      	ldr	r3, [pc, #64]	; (4017b0 <system_init+0x100>)
  401770:	4798      	blx	r3

	PWM_0_init();
  401772:	4b10      	ldr	r3, [pc, #64]	; (4017b4 <system_init+0x104>)
  401774:	4798      	blx	r3

	PWM_1_init();
  401776:	4b10      	ldr	r3, [pc, #64]	; (4017b8 <system_init+0x108>)
  401778:	4798      	blx	r3
	ENCODER_A_init();
  40177a:	4b10      	ldr	r3, [pc, #64]	; (4017bc <system_init+0x10c>)
  40177c:	4798      	blx	r3
	ENCODER_B_init();
  40177e:	4b10      	ldr	r3, [pc, #64]	; (4017c0 <system_init+0x110>)
  401780:	4798      	blx	r3

	delay_driver_init();
  401782:	4b10      	ldr	r3, [pc, #64]	; (4017c4 <system_init+0x114>)
  401784:	4798      	blx	r3

	EDBG_COM_init();
  401786:	4b10      	ldr	r3, [pc, #64]	; (4017c8 <system_init+0x118>)
  401788:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  40178a:	4b10      	ldr	r3, [pc, #64]	; (4017cc <system_init+0x11c>)
  40178c:	4798      	blx	r3
  40178e:	bd08      	pop	{r3, pc}
  401790:	00402325 	.word	0x00402325
  401794:	400e0600 	.word	0x400e0600
  401798:	400e1850 	.word	0x400e1850
  40179c:	400e0e00 	.word	0x400e0e00
  4017a0:	004012e9 	.word	0x004012e9
  4017a4:	00401241 	.word	0x00401241
  4017a8:	004013bd 	.word	0x004013bd
  4017ac:	004013d5 	.word	0x004013d5
  4017b0:	004013ed 	.word	0x004013ed
  4017b4:	00401485 	.word	0x00401485
  4017b8:	0040150d 	.word	0x0040150d
  4017bc:	00401561 	.word	0x00401561
  4017c0:	004015c1 	.word	0x004015c1
  4017c4:	00401605 	.word	0x00401605
  4017c8:	0040167d 	.word	0x0040167d
  4017cc:	00401a75 	.word	0x00401a75

004017d0 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  4017d0:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  4017d2:	6983      	ldr	r3, [r0, #24]
  4017d4:	b103      	cbz	r3, 4017d8 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  4017d6:	4798      	blx	r3
  4017d8:	bd08      	pop	{r3, pc}

004017da <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  4017da:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  4017dc:	69c3      	ldr	r3, [r0, #28]
  4017de:	b103      	cbz	r3, 4017e2 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  4017e0:	4798      	blx	r3
  4017e2:	bd08      	pop	{r3, pc}

004017e4 <adc_async_channel_conversion_done>:
{
  4017e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4017e8:	4605      	mov	r5, r0
  4017ea:	4688      	mov	r8, r1
  4017ec:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  4017ee:	6a03      	ldr	r3, [r0, #32]
  4017f0:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  4017f2:	6a87      	ldr	r7, [r0, #40]	; 0x28
  4017f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4017f8:	00de      	lsls	r6, r3, #3
  4017fa:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  4017fc:	f104 0a04 	add.w	sl, r4, #4
  401800:	b2d1      	uxtb	r1, r2
  401802:	4650      	mov	r0, sl
  401804:	4b0c      	ldr	r3, [pc, #48]	; (401838 <adc_async_channel_conversion_done+0x54>)
  401806:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  401808:	4628      	mov	r0, r5
  40180a:	4b0c      	ldr	r3, [pc, #48]	; (40183c <adc_async_channel_conversion_done+0x58>)
  40180c:	4798      	blx	r3
  40180e:	2801      	cmp	r0, #1
  401810:	d907      	bls.n	401822 <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  401812:	ea4f 2119 	mov.w	r1, r9, lsr #8
  401816:	4650      	mov	r0, sl
  401818:	4b07      	ldr	r3, [pc, #28]	; (401838 <adc_async_channel_conversion_done+0x54>)
  40181a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  40181c:	8aa3      	ldrh	r3, [r4, #20]
  40181e:	3301      	adds	r3, #1
  401820:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  401822:	8aa3      	ldrh	r3, [r4, #20]
  401824:	3301      	adds	r3, #1
  401826:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  401828:	59bb      	ldr	r3, [r7, r6]
  40182a:	b113      	cbz	r3, 401832 <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  40182c:	4641      	mov	r1, r8
  40182e:	4628      	mov	r0, r5
  401830:	4798      	blx	r3
  401832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401836:	bf00      	nop
  401838:	00401ffd 	.word	0x00401ffd
  40183c:	0040230d 	.word	0x0040230d

00401840 <adc_async_init>:
{
  401840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401844:	4616      	mov	r6, r2
  401846:	461c      	mov	r4, r3
  401848:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  40184c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  40184e:	4607      	mov	r7, r0
  401850:	4689      	mov	r9, r1
  401852:	2800      	cmp	r0, #0
  401854:	bf18      	it	ne
  401856:	2900      	cmpne	r1, #0
  401858:	d00b      	beq.n	401872 <adc_async_init+0x32>
  40185a:	1c13      	adds	r3, r2, #0
  40185c:	bf18      	it	ne
  40185e:	2301      	movne	r3, #1
  401860:	f1b8 0f00 	cmp.w	r8, #0
  401864:	d017      	beq.n	401896 <adc_async_init+0x56>
  401866:	b1b3      	cbz	r3, 401896 <adc_async_init+0x56>
  401868:	b10d      	cbz	r5, 40186e <adc_async_init+0x2e>
  40186a:	2001      	movs	r0, #1
  40186c:	e002      	b.n	401874 <adc_async_init+0x34>
  40186e:	2000      	movs	r0, #0
  401870:	e000      	b.n	401874 <adc_async_init+0x34>
  401872:	2000      	movs	r0, #0
  401874:	f8df b068 	ldr.w	fp, [pc, #104]	; 4018e0 <adc_async_init+0xa0>
  401878:	223f      	movs	r2, #63	; 0x3f
  40187a:	4659      	mov	r1, fp
  40187c:	f8df a064 	ldr.w	sl, [pc, #100]	; 4018e4 <adc_async_init+0xa4>
  401880:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  401882:	1c60      	adds	r0, r4, #1
  401884:	2240      	movs	r2, #64	; 0x40
  401886:	4659      	mov	r1, fp
  401888:	4580      	cmp	r8, r0
  40188a:	bfcc      	ite	gt
  40188c:	2000      	movgt	r0, #0
  40188e:	2001      	movle	r0, #1
  401890:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  401892:	2300      	movs	r3, #0
  401894:	e005      	b.n	4018a2 <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  401896:	2000      	movs	r0, #0
  401898:	e7ec      	b.n	401874 <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  40189a:	22ff      	movs	r2, #255	; 0xff
  40189c:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  40189e:	3301      	adds	r3, #1
  4018a0:	b2db      	uxtb	r3, r3
  4018a2:	42a3      	cmp	r3, r4
  4018a4:	d9f9      	bls.n	40189a <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  4018a6:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  4018a8:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  4018ac:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  4018b0:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  4018b2:	4649      	mov	r1, r9
  4018b4:	4638      	mov	r0, r7
  4018b6:	4b06      	ldr	r3, [pc, #24]	; (4018d0 <adc_async_init+0x90>)
  4018b8:	4798      	blx	r3
	if (init_status) {
  4018ba:	4603      	mov	r3, r0
  4018bc:	b928      	cbnz	r0, 4018ca <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  4018be:	4a05      	ldr	r2, [pc, #20]	; (4018d4 <adc_async_init+0x94>)
  4018c0:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  4018c2:	4a05      	ldr	r2, [pc, #20]	; (4018d8 <adc_async_init+0x98>)
  4018c4:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  4018c6:	4a05      	ldr	r2, [pc, #20]	; (4018dc <adc_async_init+0x9c>)
  4018c8:	607a      	str	r2, [r7, #4]
}
  4018ca:	4618      	mov	r0, r3
  4018cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018d0:	0040224d 	.word	0x0040224d
  4018d4:	004017e5 	.word	0x004017e5
  4018d8:	004017d1 	.word	0x004017d1
  4018dc:	004017db 	.word	0x004017db
  4018e0:	00406740 	.word	0x00406740
  4018e4:	00401f59 	.word	0x00401f59

004018e8 <adc_async_register_channel_buffer>:
{
  4018e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4018ec:	460e      	mov	r6, r1
  4018ee:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  4018f0:	4605      	mov	r5, r0
  4018f2:	4690      	mov	r8, r2
  4018f4:	2800      	cmp	r0, #0
  4018f6:	bf18      	it	ne
  4018f8:	2a00      	cmpne	r2, #0
  4018fa:	d002      	beq.n	401902 <adc_async_register_channel_buffer+0x1a>
  4018fc:	b9c3      	cbnz	r3, 401930 <adc_async_register_channel_buffer+0x48>
  4018fe:	2000      	movs	r0, #0
  401900:	e000      	b.n	401904 <adc_async_register_channel_buffer+0x1c>
  401902:	2000      	movs	r0, #0
  401904:	f8df 9094 	ldr.w	r9, [pc, #148]	; 40199c <adc_async_register_channel_buffer+0xb4>
  401908:	2266      	movs	r2, #102	; 0x66
  40190a:	4649      	mov	r1, r9
  40190c:	4c21      	ldr	r4, [pc, #132]	; (401994 <adc_async_register_channel_buffer+0xac>)
  40190e:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  401910:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  401914:	2267      	movs	r2, #103	; 0x67
  401916:	4649      	mov	r1, r9
  401918:	42b0      	cmp	r0, r6
  40191a:	bf34      	ite	cc
  40191c:	2000      	movcc	r0, #0
  40191e:	2001      	movcs	r0, #1
  401920:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  401922:	6a29      	ldr	r1, [r5, #32]
  401924:	5d8b      	ldrb	r3, [r1, r6]
  401926:	2bff      	cmp	r3, #255	; 0xff
  401928:	d12b      	bne.n	401982 <adc_async_register_channel_buffer+0x9a>
  40192a:	2400      	movs	r4, #0
  40192c:	4623      	mov	r3, r4
  40192e:	e003      	b.n	401938 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  401930:	2001      	movs	r0, #1
  401932:	e7e7      	b.n	401904 <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  401934:	3301      	adds	r3, #1
  401936:	b2db      	uxtb	r3, r3
  401938:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  40193c:	4293      	cmp	r3, r2
  40193e:	d805      	bhi.n	40194c <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  401940:	5cca      	ldrb	r2, [r1, r3]
  401942:	2aff      	cmp	r2, #255	; 0xff
  401944:	d0f6      	beq.n	401934 <adc_async_register_channel_buffer+0x4c>
			index++;
  401946:	3401      	adds	r4, #1
  401948:	b2e4      	uxtb	r4, r4
  40194a:	e7f3      	b.n	401934 <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  40194c:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  401950:	429c      	cmp	r4, r3
  401952:	d819      	bhi.n	401988 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  401954:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  401956:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  40195a:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  40195e:	4448      	add	r0, r9
  401960:	463a      	mov	r2, r7
  401962:	4641      	mov	r1, r8
  401964:	3004      	adds	r0, #4
  401966:	4b0c      	ldr	r3, [pc, #48]	; (401998 <adc_async_register_channel_buffer+0xb0>)
  401968:	4798      	blx	r3
  40196a:	4602      	mov	r2, r0
  40196c:	b978      	cbnz	r0, 40198e <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  40196e:	6a2b      	ldr	r3, [r5, #32]
  401970:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  401972:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401974:	4499      	add	r9, r3
  401976:	2300      	movs	r3, #0
  401978:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  40197c:	4610      	mov	r0, r2
  40197e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  401982:	f06f 020c 	mvn.w	r2, #12
  401986:	e7f9      	b.n	40197c <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  401988:	f06f 021b 	mvn.w	r2, #27
  40198c:	e7f6      	b.n	40197c <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  40198e:	f06f 020c 	mvn.w	r2, #12
  401992:	e7f3      	b.n	40197c <adc_async_register_channel_buffer+0x94>
  401994:	00401f59 	.word	0x00401f59
  401998:	00401fb9 	.word	0x00401fb9
  40199c:	00406740 	.word	0x00406740

004019a0 <adc_async_enable_channel>:
{
  4019a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4019a2:	460d      	mov	r5, r1
	ASSERT(descr);
  4019a4:	4f0b      	ldr	r7, [pc, #44]	; (4019d4 <adc_async_enable_channel+0x34>)
  4019a6:	4604      	mov	r4, r0
  4019a8:	2283      	movs	r2, #131	; 0x83
  4019aa:	4639      	mov	r1, r7
  4019ac:	3000      	adds	r0, #0
  4019ae:	bf18      	it	ne
  4019b0:	2001      	movne	r0, #1
  4019b2:	4e09      	ldr	r6, [pc, #36]	; (4019d8 <adc_async_enable_channel+0x38>)
  4019b4:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  4019b6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  4019ba:	2284      	movs	r2, #132	; 0x84
  4019bc:	4639      	mov	r1, r7
  4019be:	42a8      	cmp	r0, r5
  4019c0:	bf34      	ite	cc
  4019c2:	2000      	movcc	r0, #0
  4019c4:	2001      	movcs	r0, #1
  4019c6:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  4019c8:	4629      	mov	r1, r5
  4019ca:	4620      	mov	r0, r4
  4019cc:	4b03      	ldr	r3, [pc, #12]	; (4019dc <adc_async_enable_channel+0x3c>)
  4019ce:	4798      	blx	r3
}
  4019d0:	2000      	movs	r0, #0
  4019d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4019d4:	00406740 	.word	0x00406740
  4019d8:	00401f59 	.word	0x00401f59
  4019dc:	00402301 	.word	0x00402301

004019e0 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4019e0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4019e4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4019e6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4019e8:	f3bf 8f5f 	dmb	sy
  4019ec:	4770      	bx	lr

004019ee <atomic_leave_critical>:
  4019ee:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4019f2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4019f4:	f383 8810 	msr	PRIMASK, r3
  4019f8:	4770      	bx	lr
	...

004019fc <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4019fc:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4019fe:	4b02      	ldr	r3, [pc, #8]	; (401a08 <delay_init+0xc>)
  401a00:	6018      	str	r0, [r3, #0]
  401a02:	4b02      	ldr	r3, [pc, #8]	; (401a0c <delay_init+0x10>)
  401a04:	4798      	blx	r3
  401a06:	bd08      	pop	{r3, pc}
  401a08:	20400314 	.word	0x20400314
  401a0c:	00402ad5 	.word	0x00402ad5

00401a10 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  401a10:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  401a12:	4b04      	ldr	r3, [pc, #16]	; (401a24 <delay_ms+0x14>)
  401a14:	681c      	ldr	r4, [r3, #0]
  401a16:	4b04      	ldr	r3, [pc, #16]	; (401a28 <delay_ms+0x18>)
  401a18:	4798      	blx	r3
  401a1a:	4601      	mov	r1, r0
  401a1c:	4620      	mov	r0, r4
  401a1e:	4b03      	ldr	r3, [pc, #12]	; (401a2c <delay_ms+0x1c>)
  401a20:	4798      	blx	r3
  401a22:	bd10      	pop	{r4, pc}
  401a24:	20400314 	.word	0x20400314
  401a28:	00402311 	.word	0x00402311
  401a2c:	00402ae1 	.word	0x00402ae1

00401a30 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  401a30:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  401a32:	2504      	movs	r5, #4
  401a34:	2400      	movs	r4, #0

	while (upper >= lower) {
  401a36:	e007      	b.n	401a48 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  401a38:	4a0d      	ldr	r2, [pc, #52]	; (401a70 <process_ext_irq+0x40>)
  401a3a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  401a3e:	b1b3      	cbz	r3, 401a6e <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  401a40:	4798      	blx	r3
  401a42:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  401a44:	3a01      	subs	r2, #1
  401a46:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  401a48:	42ac      	cmp	r4, r5
  401a4a:	d810      	bhi.n	401a6e <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  401a4c:	192b      	adds	r3, r5, r4
  401a4e:	105b      	asrs	r3, r3, #1
  401a50:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  401a52:	2a03      	cmp	r2, #3
  401a54:	d80b      	bhi.n	401a6e <process_ext_irq+0x3e>
  401a56:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  401a58:	4905      	ldr	r1, [pc, #20]	; (401a70 <process_ext_irq+0x40>)
  401a5a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  401a5e:	6849      	ldr	r1, [r1, #4]
  401a60:	4281      	cmp	r1, r0
  401a62:	d0e9      	beq.n	401a38 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  401a64:	4281      	cmp	r1, r0
  401a66:	d2ed      	bcs.n	401a44 <process_ext_irq+0x14>
			lower = middle + 1;
  401a68:	3201      	adds	r2, #1
  401a6a:	b2d4      	uxtb	r4, r2
  401a6c:	e7ec      	b.n	401a48 <process_ext_irq+0x18>
  401a6e:	bd38      	pop	{r3, r4, r5, pc}
  401a70:	20400318 	.word	0x20400318

00401a74 <ext_irq_init>:
{
  401a74:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401a76:	2300      	movs	r3, #0
  401a78:	e00a      	b.n	401a90 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  401a7a:	4a08      	ldr	r2, [pc, #32]	; (401a9c <ext_irq_init+0x28>)
  401a7c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  401a80:	f04f 30ff 	mov.w	r0, #4294967295
  401a84:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  401a86:	2100      	movs	r1, #0
  401a88:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401a8c:	3301      	adds	r3, #1
  401a8e:	b29b      	uxth	r3, r3
  401a90:	2b03      	cmp	r3, #3
  401a92:	d9f2      	bls.n	401a7a <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  401a94:	4802      	ldr	r0, [pc, #8]	; (401aa0 <ext_irq_init+0x2c>)
  401a96:	4b03      	ldr	r3, [pc, #12]	; (401aa4 <ext_irq_init+0x30>)
  401a98:	4798      	blx	r3
}
  401a9a:	bd08      	pop	{r3, pc}
  401a9c:	20400318 	.word	0x20400318
  401aa0:	00401a31 	.word	0x00401a31
  401aa4:	00402681 	.word	0x00402681

00401aa8 <ext_irq_register>:
{
  401aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
  401aaa:	b083      	sub	sp, #12
  401aac:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  401aae:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  401ab0:	2b03      	cmp	r3, #3
  401ab2:	d80e      	bhi.n	401ad2 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  401ab4:	4618      	mov	r0, r3
  401ab6:	4a2e      	ldr	r2, [pc, #184]	; (401b70 <ext_irq_register+0xc8>)
  401ab8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  401abc:	6852      	ldr	r2, [r2, #4]
  401abe:	42aa      	cmp	r2, r5
  401ac0:	d002      	beq.n	401ac8 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  401ac2:	3301      	adds	r3, #1
  401ac4:	b2db      	uxtb	r3, r3
  401ac6:	e7f3      	b.n	401ab0 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  401ac8:	4b29      	ldr	r3, [pc, #164]	; (401b70 <ext_irq_register+0xc8>)
  401aca:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  401ace:	2701      	movs	r7, #1
			break;
  401ad0:	e000      	b.n	401ad4 <ext_irq_register+0x2c>
	bool    found = false;
  401ad2:	2700      	movs	r7, #0
	if (NULL == cb) {
  401ad4:	b159      	cbz	r1, 401aee <ext_irq_register+0x46>
	if (!found) {
  401ad6:	2f00      	cmp	r7, #0
  401ad8:	d13d      	bne.n	401b56 <ext_irq_register+0xae>
  401ada:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401adc:	2e03      	cmp	r6, #3
  401ade:	d813      	bhi.n	401b08 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  401ae0:	4b23      	ldr	r3, [pc, #140]	; (401b70 <ext_irq_register+0xc8>)
  401ae2:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  401ae6:	b143      	cbz	r3, 401afa <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401ae8:	3601      	adds	r6, #1
  401aea:	b2f6      	uxtb	r6, r6
  401aec:	e7f6      	b.n	401adc <ext_irq_register+0x34>
		if (!found) {
  401aee:	2f00      	cmp	r7, #0
  401af0:	d038      	beq.n	401b64 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  401af2:	4628      	mov	r0, r5
  401af4:	4b1f      	ldr	r3, [pc, #124]	; (401b74 <ext_irq_register+0xcc>)
  401af6:	4798      	blx	r3
  401af8:	e032      	b.n	401b60 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  401afa:	4b1d      	ldr	r3, [pc, #116]	; (401b70 <ext_irq_register+0xc8>)
  401afc:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  401b00:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  401b04:	605d      	str	r5, [r3, #4]
				found           = true;
  401b06:	2701      	movs	r7, #1
  401b08:	2300      	movs	r3, #0
  401b0a:	e001      	b.n	401b10 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  401b0c:	3301      	adds	r3, #1
  401b0e:	b2db      	uxtb	r3, r3
  401b10:	2b03      	cmp	r3, #3
  401b12:	bf98      	it	ls
  401b14:	2e03      	cmpls	r6, #3
  401b16:	d81e      	bhi.n	401b56 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  401b18:	46b6      	mov	lr, r6
  401b1a:	4a15      	ldr	r2, [pc, #84]	; (401b70 <ext_irq_register+0xc8>)
  401b1c:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  401b20:	6848      	ldr	r0, [r1, #4]
  401b22:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  401b26:	6852      	ldr	r2, [r2, #4]
  401b28:	4290      	cmp	r0, r2
  401b2a:	d2ef      	bcs.n	401b0c <ext_irq_register+0x64>
  401b2c:	f1b2 3fff 	cmp.w	r2, #4294967295
  401b30:	d0ec      	beq.n	401b0c <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  401b32:	4c0f      	ldr	r4, [pc, #60]	; (401b70 <ext_irq_register+0xc8>)
  401b34:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  401b38:	e892 0003 	ldmia.w	r2, {r0, r1}
  401b3c:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  401b40:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  401b44:	e894 0003 	ldmia.w	r4, {r0, r1}
  401b48:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  401b4c:	e89d 0003 	ldmia.w	sp, {r0, r1}
  401b50:	e884 0003 	stmia.w	r4, {r0, r1}
  401b54:	e7da      	b.n	401b0c <ext_irq_register+0x64>
	if (!found) {
  401b56:	b147      	cbz	r7, 401b6a <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  401b58:	2101      	movs	r1, #1
  401b5a:	4628      	mov	r0, r5
  401b5c:	4b05      	ldr	r3, [pc, #20]	; (401b74 <ext_irq_register+0xcc>)
  401b5e:	4798      	blx	r3
}
  401b60:	b003      	add	sp, #12
  401b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  401b64:	f06f 000c 	mvn.w	r0, #12
  401b68:	e7fa      	b.n	401b60 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  401b6a:	f06f 000c 	mvn.w	r0, #12
  401b6e:	e7f7      	b.n	401b60 <ext_irq_register+0xb8>
  401b70:	20400318 	.word	0x20400318
  401b74:	004026b1 	.word	0x004026b1

00401b78 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401b78:	b570      	push	{r4, r5, r6, lr}
  401b7a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  401b7c:	4604      	mov	r4, r0
  401b7e:	460d      	mov	r5, r1
  401b80:	2800      	cmp	r0, #0
  401b82:	bf18      	it	ne
  401b84:	2900      	cmpne	r1, #0
  401b86:	bf14      	ite	ne
  401b88:	2001      	movne	r0, #1
  401b8a:	2000      	moveq	r0, #0
  401b8c:	2234      	movs	r2, #52	; 0x34
  401b8e:	4904      	ldr	r1, [pc, #16]	; (401ba0 <io_write+0x28>)
  401b90:	4b04      	ldr	r3, [pc, #16]	; (401ba4 <io_write+0x2c>)
  401b92:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  401b94:	6823      	ldr	r3, [r4, #0]
  401b96:	4632      	mov	r2, r6
  401b98:	4629      	mov	r1, r5
  401b9a:	4620      	mov	r0, r4
  401b9c:	4798      	blx	r3
}
  401b9e:	bd70      	pop	{r4, r5, r6, pc}
  401ba0:	0040675c 	.word	0x0040675c
  401ba4:	00401f59 	.word	0x00401f59

00401ba8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401ba8:	b570      	push	{r4, r5, r6, lr}
  401baa:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  401bac:	4604      	mov	r4, r0
  401bae:	460d      	mov	r5, r1
  401bb0:	2800      	cmp	r0, #0
  401bb2:	bf18      	it	ne
  401bb4:	2900      	cmpne	r1, #0
  401bb6:	bf14      	ite	ne
  401bb8:	2001      	movne	r0, #1
  401bba:	2000      	moveq	r0, #0
  401bbc:	223d      	movs	r2, #61	; 0x3d
  401bbe:	4904      	ldr	r1, [pc, #16]	; (401bd0 <io_read+0x28>)
  401bc0:	4b04      	ldr	r3, [pc, #16]	; (401bd4 <io_read+0x2c>)
  401bc2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  401bc4:	6863      	ldr	r3, [r4, #4]
  401bc6:	4632      	mov	r2, r6
  401bc8:	4629      	mov	r1, r5
  401bca:	4620      	mov	r0, r4
  401bcc:	4798      	blx	r3
}
  401bce:	bd70      	pop	{r4, r5, r6, pc}
  401bd0:	0040675c 	.word	0x0040675c
  401bd4:	00401f59 	.word	0x00401f59

00401bd8 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  401bd8:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  401bda:	6943      	ldr	r3, [r0, #20]
  401bdc:	b103      	cbz	r3, 401be0 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  401bde:	4798      	blx	r3
  401be0:	bd08      	pop	{r3, pc}

00401be2 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  401be2:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  401be4:	6983      	ldr	r3, [r0, #24]
  401be6:	b103      	cbz	r3, 401bea <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  401be8:	4798      	blx	r3
  401bea:	bd08      	pop	{r3, pc}

00401bec <pwm_init>:
{
  401bec:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401bee:	4604      	mov	r4, r0
  401bf0:	460d      	mov	r5, r1
  401bf2:	2800      	cmp	r0, #0
  401bf4:	bf18      	it	ne
  401bf6:	2900      	cmpne	r1, #0
  401bf8:	bf14      	ite	ne
  401bfa:	2001      	movne	r0, #1
  401bfc:	2000      	moveq	r0, #0
  401bfe:	2233      	movs	r2, #51	; 0x33
  401c00:	4906      	ldr	r1, [pc, #24]	; (401c1c <pwm_init+0x30>)
  401c02:	4b07      	ldr	r3, [pc, #28]	; (401c20 <pwm_init+0x34>)
  401c04:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  401c06:	4629      	mov	r1, r5
  401c08:	4620      	mov	r0, r4
  401c0a:	4b06      	ldr	r3, [pc, #24]	; (401c24 <pwm_init+0x38>)
  401c0c:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  401c0e:	4b06      	ldr	r3, [pc, #24]	; (401c28 <pwm_init+0x3c>)
  401c10:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  401c12:	4b06      	ldr	r3, [pc, #24]	; (401c2c <pwm_init+0x40>)
  401c14:	6063      	str	r3, [r4, #4]
}
  401c16:	2000      	movs	r0, #0
  401c18:	bd38      	pop	{r3, r4, r5, pc}
  401c1a:	bf00      	nop
  401c1c:	00406770 	.word	0x00406770
  401c20:	00401f59 	.word	0x00401f59
  401c24:	00402851 	.word	0x00402851
  401c28:	00401bd9 	.word	0x00401bd9
  401c2c:	00401be3 	.word	0x00401be3

00401c30 <pwm_enable>:
{
  401c30:	b510      	push	{r4, lr}
	ASSERT(descr);
  401c32:	4604      	mov	r4, r0
  401c34:	224a      	movs	r2, #74	; 0x4a
  401c36:	4909      	ldr	r1, [pc, #36]	; (401c5c <pwm_enable+0x2c>)
  401c38:	3000      	adds	r0, #0
  401c3a:	bf18      	it	ne
  401c3c:	2001      	movne	r0, #1
  401c3e:	4b08      	ldr	r3, [pc, #32]	; (401c60 <pwm_enable+0x30>)
  401c40:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  401c42:	4620      	mov	r0, r4
  401c44:	4b07      	ldr	r3, [pc, #28]	; (401c64 <pwm_enable+0x34>)
  401c46:	4798      	blx	r3
  401c48:	b920      	cbnz	r0, 401c54 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  401c4a:	4620      	mov	r0, r4
  401c4c:	4b06      	ldr	r3, [pc, #24]	; (401c68 <pwm_enable+0x38>)
  401c4e:	4798      	blx	r3
	return ERR_NONE;
  401c50:	2000      	movs	r0, #0
  401c52:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401c54:	f06f 0010 	mvn.w	r0, #16
}
  401c58:	bd10      	pop	{r4, pc}
  401c5a:	bf00      	nop
  401c5c:	00406770 	.word	0x00406770
  401c60:	00401f59 	.word	0x00401f59
  401c64:	00402a2d 	.word	0x00402a2d
  401c68:	00402989 	.word	0x00402989

00401c6c <pwm_register_callback>:
{
  401c6c:	b570      	push	{r4, r5, r6, lr}
	switch (type) {
  401c6e:	460d      	mov	r5, r1
  401c70:	b121      	cbz	r1, 401c7c <pwm_register_callback+0x10>
  401c72:	2901      	cmp	r1, #1
  401c74:	d015      	beq.n	401ca2 <pwm_register_callback+0x36>
		return ERR_INVALID_ARG;
  401c76:	f06f 000c 	mvn.w	r0, #12
}
  401c7a:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.period = cb;
  401c7c:	6142      	str	r2, [r0, #20]
  401c7e:	4616      	mov	r6, r2
  401c80:	4604      	mov	r4, r0
	ASSERT(descr);
  401c82:	2272      	movs	r2, #114	; 0x72
  401c84:	4908      	ldr	r1, [pc, #32]	; (401ca8 <pwm_register_callback+0x3c>)
  401c86:	3000      	adds	r0, #0
  401c88:	bf18      	it	ne
  401c8a:	2001      	movne	r0, #1
  401c8c:	4b07      	ldr	r3, [pc, #28]	; (401cac <pwm_register_callback+0x40>)
  401c8e:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
  401c90:	1c32      	adds	r2, r6, #0
  401c92:	bf18      	it	ne
  401c94:	2201      	movne	r2, #1
  401c96:	4629      	mov	r1, r5
  401c98:	4620      	mov	r0, r4
  401c9a:	4b05      	ldr	r3, [pc, #20]	; (401cb0 <pwm_register_callback+0x44>)
  401c9c:	4798      	blx	r3
	return ERR_NONE;
  401c9e:	2000      	movs	r0, #0
  401ca0:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
  401ca2:	6182      	str	r2, [r0, #24]
		break;
  401ca4:	e7eb      	b.n	401c7e <pwm_register_callback+0x12>
  401ca6:	bf00      	nop
  401ca8:	00406770 	.word	0x00406770
  401cac:	00401f59 	.word	0x00401f59
  401cb0:	00402a5d 	.word	0x00402a5d

00401cb4 <pwm_set_parameters>:
{
  401cb4:	b570      	push	{r4, r5, r6, lr}
  401cb6:	460d      	mov	r5, r1
  401cb8:	4616      	mov	r6, r2
	ASSERT(descr);
  401cba:	4604      	mov	r4, r0
  401cbc:	227c      	movs	r2, #124	; 0x7c
  401cbe:	4906      	ldr	r1, [pc, #24]	; (401cd8 <pwm_set_parameters+0x24>)
  401cc0:	3000      	adds	r0, #0
  401cc2:	bf18      	it	ne
  401cc4:	2001      	movne	r0, #1
  401cc6:	4b05      	ldr	r3, [pc, #20]	; (401cdc <pwm_set_parameters+0x28>)
  401cc8:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  401cca:	4632      	mov	r2, r6
  401ccc:	4629      	mov	r1, r5
  401cce:	4620      	mov	r0, r4
  401cd0:	4b03      	ldr	r3, [pc, #12]	; (401ce0 <pwm_set_parameters+0x2c>)
  401cd2:	4798      	blx	r3
}
  401cd4:	2000      	movs	r0, #0
  401cd6:	bd70      	pop	{r4, r5, r6, pc}
  401cd8:	00406770 	.word	0x00406770
  401cdc:	00401f59 	.word	0x00401f59
  401ce0:	004029cd 	.word	0x004029cd

00401ce4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  401ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  401ce6:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  401ce8:	b117      	cbz	r7, 401cf0 <timer_add_timer_task+0xc>
  401cea:	463c      	mov	r4, r7
  401cec:	2600      	movs	r6, #0
  401cee:	e00b      	b.n	401d08 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  401cf0:	4b0e      	ldr	r3, [pc, #56]	; (401d2c <timer_add_timer_task+0x48>)
  401cf2:	4798      	blx	r3
		return;
  401cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  401cf6:	68a5      	ldr	r5, [r4, #8]
  401cf8:	442b      	add	r3, r5
  401cfa:	1a9b      	subs	r3, r3, r2
  401cfc:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  401cfe:	688d      	ldr	r5, [r1, #8]
  401d00:	42ab      	cmp	r3, r5
  401d02:	d209      	bcs.n	401d18 <timer_add_timer_task+0x34>
			break;
		prev = it;
  401d04:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  401d06:	6824      	ldr	r4, [r4, #0]
  401d08:	b134      	cbz	r4, 401d18 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  401d0a:	6863      	ldr	r3, [r4, #4]
  401d0c:	4293      	cmp	r3, r2
  401d0e:	d8f2      	bhi.n	401cf6 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  401d10:	68a5      	ldr	r5, [r4, #8]
  401d12:	1a9b      	subs	r3, r3, r2
  401d14:	442b      	add	r3, r5
  401d16:	e7f2      	b.n	401cfe <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  401d18:	42bc      	cmp	r4, r7
  401d1a:	d003      	beq.n	401d24 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  401d1c:	4630      	mov	r0, r6
  401d1e:	4b04      	ldr	r3, [pc, #16]	; (401d30 <timer_add_timer_task+0x4c>)
  401d20:	4798      	blx	r3
  401d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  401d24:	4b01      	ldr	r3, [pc, #4]	; (401d2c <timer_add_timer_task+0x48>)
  401d26:	4798      	blx	r3
  401d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d2a:	bf00      	nop
  401d2c:	00401f75 	.word	0x00401f75
  401d30:	00401fa1 	.word	0x00401fa1

00401d34 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  401d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d36:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  401d38:	6906      	ldr	r6, [r0, #16]
  401d3a:	3601      	adds	r6, #1
  401d3c:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  401d3e:	7e03      	ldrb	r3, [r0, #24]
  401d40:	f013 0f01 	tst.w	r3, #1
  401d44:	d105      	bne.n	401d52 <timer_process_counted+0x1e>
  401d46:	7e03      	ldrb	r3, [r0, #24]
  401d48:	f013 0f02 	tst.w	r3, #2
  401d4c:	d101      	bne.n	401d52 <timer_process_counted+0x1e>
  401d4e:	4605      	mov	r5, r0
  401d50:	e009      	b.n	401d66 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  401d52:	7e03      	ldrb	r3, [r0, #24]
  401d54:	f043 0302 	orr.w	r3, r3, #2
  401d58:	7603      	strb	r3, [r0, #24]
		return;
  401d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d5c:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  401d5e:	68e3      	ldr	r3, [r4, #12]
  401d60:	4620      	mov	r0, r4
  401d62:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  401d64:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  401d66:	b19c      	cbz	r4, 401d90 <timer_process_counted+0x5c>
  401d68:	6863      	ldr	r3, [r4, #4]
  401d6a:	1af3      	subs	r3, r6, r3
  401d6c:	68a2      	ldr	r2, [r4, #8]
  401d6e:	4293      	cmp	r3, r2
  401d70:	d30e      	bcc.n	401d90 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  401d72:	f105 0714 	add.w	r7, r5, #20
  401d76:	4638      	mov	r0, r7
  401d78:	4b06      	ldr	r3, [pc, #24]	; (401d94 <timer_process_counted+0x60>)
  401d7a:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  401d7c:	7c23      	ldrb	r3, [r4, #16]
  401d7e:	2b01      	cmp	r3, #1
  401d80:	d1ec      	bne.n	401d5c <timer_process_counted+0x28>
			tmp->time_label = time;
  401d82:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  401d84:	4632      	mov	r2, r6
  401d86:	4621      	mov	r1, r4
  401d88:	4638      	mov	r0, r7
  401d8a:	4b03      	ldr	r3, [pc, #12]	; (401d98 <timer_process_counted+0x64>)
  401d8c:	4798      	blx	r3
  401d8e:	e7e5      	b.n	401d5c <timer_process_counted+0x28>
  401d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d92:	bf00      	nop
  401d94:	00401fa9 	.word	0x00401fa9
  401d98:	00401ce5 	.word	0x00401ce5

00401d9c <timer_init>:
{
  401d9c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401d9e:	4604      	mov	r4, r0
  401da0:	460d      	mov	r5, r1
  401da2:	2800      	cmp	r0, #0
  401da4:	bf18      	it	ne
  401da6:	2900      	cmpne	r1, #0
  401da8:	bf14      	ite	ne
  401daa:	2001      	movne	r0, #1
  401dac:	2000      	moveq	r0, #0
  401dae:	223b      	movs	r2, #59	; 0x3b
  401db0:	4905      	ldr	r1, [pc, #20]	; (401dc8 <timer_init+0x2c>)
  401db2:	4b06      	ldr	r3, [pc, #24]	; (401dcc <timer_init+0x30>)
  401db4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  401db6:	4629      	mov	r1, r5
  401db8:	4620      	mov	r0, r4
  401dba:	4b05      	ldr	r3, [pc, #20]	; (401dd0 <timer_init+0x34>)
  401dbc:	4798      	blx	r3
	descr->time                           = 0;
  401dbe:	2000      	movs	r0, #0
  401dc0:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  401dc2:	4b04      	ldr	r3, [pc, #16]	; (401dd4 <timer_init+0x38>)
  401dc4:	6023      	str	r3, [r4, #0]
}
  401dc6:	bd38      	pop	{r3, r4, r5, pc}
  401dc8:	00406788 	.word	0x00406788
  401dcc:	00401f59 	.word	0x00401f59
  401dd0:	00402b99 	.word	0x00402b99
  401dd4:	00401d35 	.word	0x00401d35

00401dd8 <timer_start>:
{
  401dd8:	b510      	push	{r4, lr}
	ASSERT(descr);
  401dda:	4604      	mov	r4, r0
  401ddc:	2253      	movs	r2, #83	; 0x53
  401dde:	4909      	ldr	r1, [pc, #36]	; (401e04 <timer_start+0x2c>)
  401de0:	3000      	adds	r0, #0
  401de2:	bf18      	it	ne
  401de4:	2001      	movne	r0, #1
  401de6:	4b08      	ldr	r3, [pc, #32]	; (401e08 <timer_start+0x30>)
  401de8:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  401dea:	4620      	mov	r0, r4
  401dec:	4b07      	ldr	r3, [pc, #28]	; (401e0c <timer_start+0x34>)
  401dee:	4798      	blx	r3
  401df0:	b920      	cbnz	r0, 401dfc <timer_start+0x24>
	_timer_start(&descr->device);
  401df2:	4620      	mov	r0, r4
  401df4:	4b06      	ldr	r3, [pc, #24]	; (401e10 <timer_start+0x38>)
  401df6:	4798      	blx	r3
	return ERR_NONE;
  401df8:	2000      	movs	r0, #0
  401dfa:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401dfc:	f06f 0010 	mvn.w	r0, #16
}
  401e00:	bd10      	pop	{r4, pc}
  401e02:	bf00      	nop
  401e04:	00406788 	.word	0x00406788
  401e08:	00401f59 	.word	0x00401f59
  401e0c:	00402c81 	.word	0x00402c81
  401e10:	00402c75 	.word	0x00402c75

00401e14 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e16:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401e18:	4605      	mov	r5, r0
  401e1a:	460f      	mov	r7, r1
  401e1c:	2800      	cmp	r0, #0
  401e1e:	bf18      	it	ne
  401e20:	2900      	cmpne	r1, #0
  401e22:	d002      	beq.n	401e2a <usart_sync_write+0x16>
  401e24:	bb0a      	cbnz	r2, 401e6a <usart_sync_write+0x56>
  401e26:	2000      	movs	r0, #0
  401e28:	e000      	b.n	401e2c <usart_sync_write+0x18>
  401e2a:	2000      	movs	r0, #0
  401e2c:	22f1      	movs	r2, #241	; 0xf1
  401e2e:	4910      	ldr	r1, [pc, #64]	; (401e70 <usart_sync_write+0x5c>)
  401e30:	4b10      	ldr	r3, [pc, #64]	; (401e74 <usart_sync_write+0x60>)
  401e32:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  401e34:	f105 0408 	add.w	r4, r5, #8
  401e38:	4620      	mov	r0, r4
  401e3a:	4b0f      	ldr	r3, [pc, #60]	; (401e78 <usart_sync_write+0x64>)
  401e3c:	4798      	blx	r3
  401e3e:	2800      	cmp	r0, #0
  401e40:	d0f8      	beq.n	401e34 <usart_sync_write+0x20>
  401e42:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  401e44:	5d79      	ldrb	r1, [r7, r5]
  401e46:	4620      	mov	r0, r4
  401e48:	4b0c      	ldr	r3, [pc, #48]	; (401e7c <usart_sync_write+0x68>)
  401e4a:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  401e4c:	4620      	mov	r0, r4
  401e4e:	4b0a      	ldr	r3, [pc, #40]	; (401e78 <usart_sync_write+0x64>)
  401e50:	4798      	blx	r3
  401e52:	2800      	cmp	r0, #0
  401e54:	d0fa      	beq.n	401e4c <usart_sync_write+0x38>
			;
	} while (++offset < length);
  401e56:	3501      	adds	r5, #1
  401e58:	42b5      	cmp	r5, r6
  401e5a:	d3f3      	bcc.n	401e44 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  401e5c:	4620      	mov	r0, r4
  401e5e:	4b08      	ldr	r3, [pc, #32]	; (401e80 <usart_sync_write+0x6c>)
  401e60:	4798      	blx	r3
  401e62:	2800      	cmp	r0, #0
  401e64:	d0fa      	beq.n	401e5c <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  401e66:	4628      	mov	r0, r5
  401e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  401e6a:	2001      	movs	r0, #1
  401e6c:	e7de      	b.n	401e2c <usart_sync_write+0x18>
  401e6e:	bf00      	nop
  401e70:	004067a0 	.word	0x004067a0
  401e74:	00401f59 	.word	0x00401f59
  401e78:	00402e5d 	.word	0x00402e5d
  401e7c:	00402e15 	.word	0x00402e15
  401e80:	00402e85 	.word	0x00402e85

00401e84 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e88:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401e8a:	4605      	mov	r5, r0
  401e8c:	4688      	mov	r8, r1
  401e8e:	2800      	cmp	r0, #0
  401e90:	bf18      	it	ne
  401e92:	2900      	cmpne	r1, #0
  401e94:	d002      	beq.n	401e9c <usart_sync_read+0x18>
  401e96:	b9d2      	cbnz	r2, 401ece <usart_sync_read+0x4a>
  401e98:	2000      	movs	r0, #0
  401e9a:	e000      	b.n	401e9e <usart_sync_read+0x1a>
  401e9c:	2000      	movs	r0, #0
  401e9e:	f44f 7286 	mov.w	r2, #268	; 0x10c
  401ea2:	490c      	ldr	r1, [pc, #48]	; (401ed4 <usart_sync_read+0x50>)
  401ea4:	4b0c      	ldr	r3, [pc, #48]	; (401ed8 <usart_sync_read+0x54>)
  401ea6:	4798      	blx	r3
	uint32_t                      offset = 0;
  401ea8:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  401eaa:	f105 0408 	add.w	r4, r5, #8
  401eae:	4620      	mov	r0, r4
  401eb0:	4b0a      	ldr	r3, [pc, #40]	; (401edc <usart_sync_read+0x58>)
  401eb2:	4798      	blx	r3
  401eb4:	2800      	cmp	r0, #0
  401eb6:	d0f8      	beq.n	401eaa <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  401eb8:	4620      	mov	r0, r4
  401eba:	4b09      	ldr	r3, [pc, #36]	; (401ee0 <usart_sync_read+0x5c>)
  401ebc:	4798      	blx	r3
  401ebe:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  401ec2:	3601      	adds	r6, #1
  401ec4:	42be      	cmp	r6, r7
  401ec6:	d3f0      	bcc.n	401eaa <usart_sync_read+0x26>

	return (int32_t)offset;
}
  401ec8:	4630      	mov	r0, r6
  401eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  401ece:	2001      	movs	r0, #1
  401ed0:	e7e5      	b.n	401e9e <usart_sync_read+0x1a>
  401ed2:	bf00      	nop
  401ed4:	004067a0 	.word	0x004067a0
  401ed8:	00401f59 	.word	0x00401f59
  401edc:	00402ead 	.word	0x00402ead
  401ee0:	00402e39 	.word	0x00402e39

00401ee4 <usart_sync_init>:
{
  401ee4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401ee6:	4604      	mov	r4, r0
  401ee8:	460d      	mov	r5, r1
  401eea:	2800      	cmp	r0, #0
  401eec:	bf18      	it	ne
  401eee:	2900      	cmpne	r1, #0
  401ef0:	bf14      	ite	ne
  401ef2:	2001      	movne	r0, #1
  401ef4:	2000      	moveq	r0, #0
  401ef6:	2234      	movs	r2, #52	; 0x34
  401ef8:	4907      	ldr	r1, [pc, #28]	; (401f18 <usart_sync_init+0x34>)
  401efa:	4b08      	ldr	r3, [pc, #32]	; (401f1c <usart_sync_init+0x38>)
  401efc:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  401efe:	4629      	mov	r1, r5
  401f00:	f104 0008 	add.w	r0, r4, #8
  401f04:	4b06      	ldr	r3, [pc, #24]	; (401f20 <usart_sync_init+0x3c>)
  401f06:	4798      	blx	r3
	if (init_status) {
  401f08:	4603      	mov	r3, r0
  401f0a:	b918      	cbnz	r0, 401f14 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  401f0c:	4a05      	ldr	r2, [pc, #20]	; (401f24 <usart_sync_init+0x40>)
  401f0e:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  401f10:	4a05      	ldr	r2, [pc, #20]	; (401f28 <usart_sync_init+0x44>)
  401f12:	6022      	str	r2, [r4, #0]
}
  401f14:	4618      	mov	r0, r3
  401f16:	bd38      	pop	{r3, r4, r5, pc}
  401f18:	004067a0 	.word	0x004067a0
  401f1c:	00401f59 	.word	0x00401f59
  401f20:	00402da9 	.word	0x00402da9
  401f24:	00401e85 	.word	0x00401e85
  401f28:	00401e15 	.word	0x00401e15

00401f2c <usart_sync_enable>:
{
  401f2c:	b510      	push	{r4, lr}
	ASSERT(descr);
  401f2e:	4604      	mov	r4, r0
  401f30:	2253      	movs	r2, #83	; 0x53
  401f32:	4906      	ldr	r1, [pc, #24]	; (401f4c <usart_sync_enable+0x20>)
  401f34:	3000      	adds	r0, #0
  401f36:	bf18      	it	ne
  401f38:	2001      	movne	r0, #1
  401f3a:	4b05      	ldr	r3, [pc, #20]	; (401f50 <usart_sync_enable+0x24>)
  401f3c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  401f3e:	f104 0008 	add.w	r0, r4, #8
  401f42:	4b04      	ldr	r3, [pc, #16]	; (401f54 <usart_sync_enable+0x28>)
  401f44:	4798      	blx	r3
}
  401f46:	2000      	movs	r0, #0
  401f48:	bd10      	pop	{r4, pc}
  401f4a:	bf00      	nop
  401f4c:	004067a0 	.word	0x004067a0
  401f50:	00401f59 	.word	0x00401f59
  401f54:	00402de1 	.word	0x00402de1

00401f58 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401f58:	b900      	cbnz	r0, 401f5c <assert+0x4>
		__asm("BKPT #0");
  401f5a:	be00      	bkpt	0x0000
  401f5c:	4770      	bx	lr

00401f5e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  401f5e:	6803      	ldr	r3, [r0, #0]
  401f60:	b11b      	cbz	r3, 401f6a <is_list_element+0xc>
		if (it == element) {
  401f62:	428b      	cmp	r3, r1
  401f64:	d003      	beq.n	401f6e <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  401f66:	681b      	ldr	r3, [r3, #0]
  401f68:	e7fa      	b.n	401f60 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  401f6a:	2000      	movs	r0, #0
  401f6c:	4770      	bx	lr
			return true;
  401f6e:	2001      	movs	r0, #1
}
  401f70:	4770      	bx	lr
	...

00401f74 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  401f74:	b538      	push	{r3, r4, r5, lr}
  401f76:	4604      	mov	r4, r0
  401f78:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  401f7a:	4b06      	ldr	r3, [pc, #24]	; (401f94 <list_insert_as_head+0x20>)
  401f7c:	4798      	blx	r3
  401f7e:	f080 0001 	eor.w	r0, r0, #1
  401f82:	2239      	movs	r2, #57	; 0x39
  401f84:	4904      	ldr	r1, [pc, #16]	; (401f98 <list_insert_as_head+0x24>)
  401f86:	b2c0      	uxtb	r0, r0
  401f88:	4b04      	ldr	r3, [pc, #16]	; (401f9c <list_insert_as_head+0x28>)
  401f8a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  401f8c:	6823      	ldr	r3, [r4, #0]
  401f8e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  401f90:	6025      	str	r5, [r4, #0]
  401f92:	bd38      	pop	{r3, r4, r5, pc}
  401f94:	00401f5f 	.word	0x00401f5f
  401f98:	004067bc 	.word	0x004067bc
  401f9c:	00401f59 	.word	0x00401f59

00401fa0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  401fa0:	6803      	ldr	r3, [r0, #0]
  401fa2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  401fa4:	6001      	str	r1, [r0, #0]
  401fa6:	4770      	bx	lr

00401fa8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  401fa8:	6803      	ldr	r3, [r0, #0]
  401faa:	b11b      	cbz	r3, 401fb4 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  401fac:	681a      	ldr	r2, [r3, #0]
  401fae:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  401fb0:	4618      	mov	r0, r3
  401fb2:	4770      	bx	lr
	}

	return NULL;
  401fb4:	2000      	movs	r0, #0
}
  401fb6:	4770      	bx	lr

00401fb8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  401fb8:	b570      	push	{r4, r5, r6, lr}
  401fba:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  401fbc:	4604      	mov	r4, r0
  401fbe:	460e      	mov	r6, r1
  401fc0:	2800      	cmp	r0, #0
  401fc2:	bf18      	it	ne
  401fc4:	2900      	cmpne	r1, #0
  401fc6:	d002      	beq.n	401fce <ringbuffer_init+0x16>
  401fc8:	b97a      	cbnz	r2, 401fea <ringbuffer_init+0x32>
  401fca:	2000      	movs	r0, #0
  401fcc:	e000      	b.n	401fd0 <ringbuffer_init+0x18>
  401fce:	2000      	movs	r0, #0
  401fd0:	2228      	movs	r2, #40	; 0x28
  401fd2:	4908      	ldr	r1, [pc, #32]	; (401ff4 <ringbuffer_init+0x3c>)
  401fd4:	4b08      	ldr	r3, [pc, #32]	; (401ff8 <ringbuffer_init+0x40>)
  401fd6:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  401fd8:	1e6b      	subs	r3, r5, #1
  401fda:	421d      	tst	r5, r3
  401fdc:	d107      	bne.n	401fee <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  401fde:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  401fe0:	2000      	movs	r0, #0
  401fe2:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  401fe4:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  401fe6:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  401fe8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  401fea:	2001      	movs	r0, #1
  401fec:	e7f0      	b.n	401fd0 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  401fee:	f06f 000c 	mvn.w	r0, #12
}
  401ff2:	bd70      	pop	{r4, r5, r6, pc}
  401ff4:	004067dc 	.word	0x004067dc
  401ff8:	00401f59 	.word	0x00401f59

00401ffc <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  401ffc:	b538      	push	{r3, r4, r5, lr}
  401ffe:	460d      	mov	r5, r1
	ASSERT(rb);
  402000:	4604      	mov	r4, r0
  402002:	2251      	movs	r2, #81	; 0x51
  402004:	490b      	ldr	r1, [pc, #44]	; (402034 <ringbuffer_put+0x38>)
  402006:	3000      	adds	r0, #0
  402008:	bf18      	it	ne
  40200a:	2001      	movne	r0, #1
  40200c:	4b0a      	ldr	r3, [pc, #40]	; (402038 <ringbuffer_put+0x3c>)
  40200e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  402010:	6822      	ldr	r2, [r4, #0]
  402012:	68e3      	ldr	r3, [r4, #12]
  402014:	6861      	ldr	r1, [r4, #4]
  402016:	400b      	ands	r3, r1
  402018:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  40201a:	68e3      	ldr	r3, [r4, #12]
  40201c:	68a2      	ldr	r2, [r4, #8]
  40201e:	1a9a      	subs	r2, r3, r2
  402020:	6861      	ldr	r1, [r4, #4]
  402022:	428a      	cmp	r2, r1
  402024:	d901      	bls.n	40202a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  402026:	1a59      	subs	r1, r3, r1
  402028:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  40202a:	3301      	adds	r3, #1
  40202c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  40202e:	2000      	movs	r0, #0
  402030:	bd38      	pop	{r3, r4, r5, pc}
  402032:	bf00      	nop
  402034:	004067dc 	.word	0x004067dc
  402038:	00401f59 	.word	0x00401f59

0040203c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  40203c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  40203e:	4a06      	ldr	r2, [pc, #24]	; (402058 <_sbrk+0x1c>)
  402040:	6812      	ldr	r2, [r2, #0]
  402042:	b122      	cbz	r2, 40204e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  402044:	4a04      	ldr	r2, [pc, #16]	; (402058 <_sbrk+0x1c>)
  402046:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  402048:	4403      	add	r3, r0
  40204a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  40204c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40204e:	4903      	ldr	r1, [pc, #12]	; (40205c <_sbrk+0x20>)
  402050:	4a01      	ldr	r2, [pc, #4]	; (402058 <_sbrk+0x1c>)
  402052:	6011      	str	r1, [r2, #0]
  402054:	e7f6      	b.n	402044 <_sbrk+0x8>
  402056:	bf00      	nop
  402058:	20400338 	.word	0x20400338
  40205c:	20400e38 	.word	0x20400e38

00402060 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  402060:	f04f 30ff 	mov.w	r0, #4294967295
  402064:	4770      	bx	lr

00402066 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  402066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40206a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40206c:	2000      	movs	r0, #0
  40206e:	4770      	bx	lr

00402070 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  402070:	2001      	movs	r0, #1
  402072:	4770      	bx	lr

00402074 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  402074:	2000      	movs	r0, #0
  402076:	4770      	bx	lr

00402078 <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  402078:	6943      	ldr	r3, [r0, #20]
  40207a:	4a07      	ldr	r2, [pc, #28]	; (402098 <_afec_get_irq_num+0x20>)
  40207c:	4293      	cmp	r3, r2
  40207e:	d005      	beq.n	40208c <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  402080:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  402084:	4293      	cmp	r3, r2
  402086:	d103      	bne.n	402090 <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  402088:	2028      	movs	r0, #40	; 0x28
  40208a:	4770      	bx	lr
		return AFEC0_IRQn;
  40208c:	201d      	movs	r0, #29
  40208e:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  402090:	f04f 30ff 	mov.w	r0, #4294967295
}
  402094:	4770      	bx	lr
  402096:	bf00      	nop
  402098:	4003c000 	.word	0x4003c000

0040209c <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  40209c:	4b06      	ldr	r3, [pc, #24]	; (4020b8 <_afec_init_irq_param+0x1c>)
  40209e:	4298      	cmp	r0, r3
  4020a0:	d003      	beq.n	4020aa <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  4020a2:	4b06      	ldr	r3, [pc, #24]	; (4020bc <_afec_init_irq_param+0x20>)
  4020a4:	4298      	cmp	r0, r3
  4020a6:	d003      	beq.n	4020b0 <_afec_init_irq_param+0x14>
  4020a8:	4770      	bx	lr
		_afec0_dev = dev;
  4020aa:	4b05      	ldr	r3, [pc, #20]	; (4020c0 <_afec_init_irq_param+0x24>)
  4020ac:	6019      	str	r1, [r3, #0]
  4020ae:	e7f8      	b.n	4020a2 <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  4020b0:	4b03      	ldr	r3, [pc, #12]	; (4020c0 <_afec_init_irq_param+0x24>)
  4020b2:	6059      	str	r1, [r3, #4]
	}
}
  4020b4:	e7f8      	b.n	4020a8 <_afec_init_irq_param+0xc>
  4020b6:	bf00      	nop
  4020b8:	4003c000 	.word	0x4003c000
  4020bc:	40064000 	.word	0x40064000
  4020c0:	2040033c 	.word	0x2040033c

004020c4 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  4020c4:	2364      	movs	r3, #100	; 0x64
  4020c6:	4a1d      	ldr	r2, [pc, #116]	; (40213c <_afec_init+0x78>)
  4020c8:	fb03 2301 	mla	r3, r3, r1, r2
  4020cc:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  4020ce:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  4020d0:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  4020d2:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  4020d4:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  4020d6:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  4020d8:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  4020da:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  4020dc:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  4020de:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  4020e0:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  4020e2:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  4020e4:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  4020e6:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  4020e8:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  4020ea:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  4020ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  4020f0:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  4020f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  4020f6:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  4020fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  4020fc:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  402100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  402102:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  402106:	2200      	movs	r2, #0
  402108:	2a0b      	cmp	r2, #11
  40210a:	d814      	bhi.n	402136 <_afec_init+0x72>
{
  40210c:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  40210e:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  402110:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402114:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402118:	4413      	add	r3, r2
  40211a:	330c      	adds	r3, #12
  40211c:	4c07      	ldr	r4, [pc, #28]	; (40213c <_afec_init+0x78>)
  40211e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  402122:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  402124:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  402126:	3201      	adds	r2, #1
  402128:	b2d2      	uxtb	r2, r2
  40212a:	2a0b      	cmp	r2, #11
  40212c:	d9ef      	bls.n	40210e <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  40212e:	2000      	movs	r0, #0
  402130:	f85d 4b04 	ldr.w	r4, [sp], #4
  402134:	4770      	bx	lr
  402136:	2000      	movs	r0, #0
  402138:	4770      	bx	lr
  40213a:	bf00      	nop
  40213c:	00406800 	.word	0x00406800

00402140 <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  402140:	b530      	push	{r4, r5, lr}
  402142:	b083      	sub	sp, #12
  402144:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  402146:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  402148:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  40214a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  40214c:	400b      	ands	r3, r1
  40214e:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  402150:	9b01      	ldr	r3, [sp, #4]
  402152:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  402156:	d10e      	bne.n	402176 <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  402158:	9b01      	ldr	r3, [sp, #4]
  40215a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  40215e:	d10e      	bne.n	40217e <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  402160:	9b01      	ldr	r3, [sp, #4]
  402162:	f3c3 030b 	ubfx	r3, r3, #0, #12
  402166:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  402168:	9c01      	ldr	r4, [sp, #4]
  40216a:	fab4 f484 	clz	r4, r4
  40216e:	f1c4 0420 	rsb	r4, r4, #32
  402172:	b2e4      	uxtb	r4, r4
	while (cnt) {
  402174:	e01f      	b.n	4021b6 <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  402176:	6803      	ldr	r3, [r0, #0]
  402178:	2100      	movs	r1, #0
  40217a:	4798      	blx	r3
  40217c:	e7ec      	b.n	402158 <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  40217e:	686b      	ldr	r3, [r5, #4]
  402180:	2100      	movs	r1, #0
  402182:	4628      	mov	r0, r5
  402184:	4798      	blx	r3
  402186:	e7eb      	b.n	402160 <_afec_interrupt_handler+0x20>
		cnt--;
  402188:	3c01      	subs	r4, #1
  40218a:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  40218c:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  40218e:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  402190:	68ab      	ldr	r3, [r5, #8]
  402192:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  402194:	6e92      	ldr	r2, [r2, #104]	; 0x68
  402196:	b292      	uxth	r2, r2
  402198:	4621      	mov	r1, r4
  40219a:	4628      	mov	r0, r5
  40219c:	4798      	blx	r3
		status &= ~(1 << cnt);
  40219e:	2301      	movs	r3, #1
  4021a0:	40a3      	lsls	r3, r4
  4021a2:	9c01      	ldr	r4, [sp, #4]
  4021a4:	ea24 0403 	bic.w	r4, r4, r3
  4021a8:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  4021aa:	9c01      	ldr	r4, [sp, #4]
  4021ac:	fab4 f484 	clz	r4, r4
  4021b0:	f1c4 0420 	rsb	r4, r4, #32
  4021b4:	b2e4      	uxtb	r4, r4
	while (cnt) {
  4021b6:	2c00      	cmp	r4, #0
  4021b8:	d1e6      	bne.n	402188 <_afec_interrupt_handler+0x48>
	}
}
  4021ba:	b003      	add	sp, #12
  4021bc:	bd30      	pop	{r4, r5, pc}
	...

004021c0 <_afec_get_hardware_index>:
{
  4021c0:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  4021c2:	4b09      	ldr	r3, [pc, #36]	; (4021e8 <_afec_get_hardware_index+0x28>)
  4021c4:	4298      	cmp	r0, r3
  4021c6:	d00a      	beq.n	4021de <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  4021c8:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4021cc:	4298      	cmp	r0, r3
  4021ce:	d008      	beq.n	4021e2 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  4021d0:	22a7      	movs	r2, #167	; 0xa7
  4021d2:	4906      	ldr	r1, [pc, #24]	; (4021ec <_afec_get_hardware_index+0x2c>)
  4021d4:	2000      	movs	r0, #0
  4021d6:	4b06      	ldr	r3, [pc, #24]	; (4021f0 <_afec_get_hardware_index+0x30>)
  4021d8:	4798      	blx	r3
	return 0;
  4021da:	2000      	movs	r0, #0
  4021dc:	bd08      	pop	{r3, pc}
		return 0;
  4021de:	2000      	movs	r0, #0
  4021e0:	bd08      	pop	{r3, pc}
		return 1;
  4021e2:	2001      	movs	r0, #1
}
  4021e4:	bd08      	pop	{r3, pc}
  4021e6:	bf00      	nop
  4021e8:	4003c000 	.word	0x4003c000
  4021ec:	004068c8 	.word	0x004068c8
  4021f0:	00401f59 	.word	0x00401f59

004021f4 <_afec_get_regs>:
{
  4021f4:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  4021f6:	4b09      	ldr	r3, [pc, #36]	; (40221c <_afec_get_regs+0x28>)
  4021f8:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  4021fa:	2300      	movs	r3, #0
  4021fc:	2b01      	cmp	r3, #1
  4021fe:	d809      	bhi.n	402214 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  402200:	2264      	movs	r2, #100	; 0x64
  402202:	fb02 f203 	mul.w	r2, r2, r3
  402206:	4906      	ldr	r1, [pc, #24]	; (402220 <_afec_get_regs+0x2c>)
  402208:	5c8a      	ldrb	r2, [r1, r2]
  40220a:	4290      	cmp	r0, r2
  40220c:	d003      	beq.n	402216 <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  40220e:	3301      	adds	r3, #1
  402210:	b2db      	uxtb	r3, r3
  402212:	e7f3      	b.n	4021fc <_afec_get_regs+0x8>
	return 0;
  402214:	2300      	movs	r3, #0
}
  402216:	4618      	mov	r0, r3
  402218:	bd08      	pop	{r3, pc}
  40221a:	bf00      	nop
  40221c:	004021c1 	.word	0x004021c1
  402220:	00406800 	.word	0x00406800

00402224 <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  402224:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  402226:	4b02      	ldr	r3, [pc, #8]	; (402230 <AFEC0_Handler+0xc>)
  402228:	6818      	ldr	r0, [r3, #0]
  40222a:	4b02      	ldr	r3, [pc, #8]	; (402234 <AFEC0_Handler+0x10>)
  40222c:	4798      	blx	r3
  40222e:	bd08      	pop	{r3, pc}
  402230:	2040033c 	.word	0x2040033c
  402234:	00402141 	.word	0x00402141

00402238 <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  402238:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  40223a:	4b02      	ldr	r3, [pc, #8]	; (402244 <AFEC1_Handler+0xc>)
  40223c:	6858      	ldr	r0, [r3, #4]
  40223e:	4b02      	ldr	r3, [pc, #8]	; (402248 <AFEC1_Handler+0x10>)
  402240:	4798      	blx	r3
  402242:	bd08      	pop	{r3, pc}
  402244:	2040033c 	.word	0x2040033c
  402248:	00402141 	.word	0x00402141

0040224c <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  40224c:	b570      	push	{r4, r5, r6, lr}
  40224e:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  402250:	4605      	mov	r5, r0
  402252:	f44f 72a1 	mov.w	r2, #322	; 0x142
  402256:	4923      	ldr	r1, [pc, #140]	; (4022e4 <_adc_async_init+0x98>)
  402258:	3000      	adds	r0, #0
  40225a:	bf18      	it	ne
  40225c:	2001      	movne	r0, #1
  40225e:	4b22      	ldr	r3, [pc, #136]	; (4022e8 <_adc_async_init+0x9c>)
  402260:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  402262:	4620      	mov	r0, r4
  402264:	4b21      	ldr	r3, [pc, #132]	; (4022ec <_adc_async_init+0xa0>)
  402266:	4798      	blx	r3
  402268:	4601      	mov	r1, r0
  40226a:	4620      	mov	r0, r4
  40226c:	4b20      	ldr	r3, [pc, #128]	; (4022f0 <_adc_async_init+0xa4>)
  40226e:	4798      	blx	r3
	if (init_status) {
  402270:	4606      	mov	r6, r0
  402272:	b108      	cbz	r0, 402278 <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  402274:	4630      	mov	r0, r6
  402276:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  402278:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  40227a:	4629      	mov	r1, r5
  40227c:	4620      	mov	r0, r4
  40227e:	4b1d      	ldr	r3, [pc, #116]	; (4022f4 <_adc_async_init+0xa8>)
  402280:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  402282:	4628      	mov	r0, r5
  402284:	4b1c      	ldr	r3, [pc, #112]	; (4022f8 <_adc_async_init+0xac>)
  402286:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  402288:	2800      	cmp	r0, #0
  40228a:	db0d      	blt.n	4022a8 <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40228c:	0943      	lsrs	r3, r0, #5
  40228e:	f000 001f 	and.w	r0, r0, #31
  402292:	2201      	movs	r2, #1
  402294:	fa02 f000 	lsl.w	r0, r2, r0
  402298:	3320      	adds	r3, #32
  40229a:	4a18      	ldr	r2, [pc, #96]	; (4022fc <_adc_async_init+0xb0>)
  40229c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4022a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4022a4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  4022a8:	4628      	mov	r0, r5
  4022aa:	4b13      	ldr	r3, [pc, #76]	; (4022f8 <_adc_async_init+0xac>)
  4022ac:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  4022ae:	2800      	cmp	r0, #0
  4022b0:	db09      	blt.n	4022c6 <_adc_async_init+0x7a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4022b2:	0943      	lsrs	r3, r0, #5
  4022b4:	f000 001f 	and.w	r0, r0, #31
  4022b8:	2201      	movs	r2, #1
  4022ba:	fa02 f000 	lsl.w	r0, r2, r0
  4022be:	3360      	adds	r3, #96	; 0x60
  4022c0:	4a0e      	ldr	r2, [pc, #56]	; (4022fc <_adc_async_init+0xb0>)
  4022c2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  4022c6:	4628      	mov	r0, r5
  4022c8:	4b0b      	ldr	r3, [pc, #44]	; (4022f8 <_adc_async_init+0xac>)
  4022ca:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  4022cc:	2800      	cmp	r0, #0
  4022ce:	dbd1      	blt.n	402274 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4022d0:	0942      	lsrs	r2, r0, #5
  4022d2:	f000 001f 	and.w	r0, r0, #31
  4022d6:	2301      	movs	r3, #1
  4022d8:	fa03 f000 	lsl.w	r0, r3, r0
  4022dc:	4b07      	ldr	r3, [pc, #28]	; (4022fc <_adc_async_init+0xb0>)
  4022de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  4022e2:	e7c7      	b.n	402274 <_adc_async_init+0x28>
  4022e4:	004068c8 	.word	0x004068c8
  4022e8:	00401f59 	.word	0x00401f59
  4022ec:	004021f5 	.word	0x004021f5
  4022f0:	004020c5 	.word	0x004020c5
  4022f4:	0040209d 	.word	0x0040209d
  4022f8:	00402079 	.word	0x00402079
  4022fc:	e000e100 	.word	0xe000e100

00402300 <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  402300:	6942      	ldr	r2, [r0, #20]
  402302:	2301      	movs	r3, #1
  402304:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  402308:	6151      	str	r1, [r2, #20]
  40230a:	4770      	bx	lr

0040230c <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  40230c:	2002      	movs	r0, #2
  40230e:	4770      	bx	lr

00402310 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  402310:	f44f 7396 	mov.w	r3, #300	; 0x12c
  402314:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  402318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40231c:	fb03 f000 	mul.w	r0, r3, r0
  402320:	4770      	bx	lr
	...

00402324 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  402324:	b500      	push	{lr}
  402326:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  402328:	a801      	add	r0, sp, #4
  40232a:	4b14      	ldr	r3, [pc, #80]	; (40237c <_init_chip+0x58>)
  40232c:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  40232e:	4a14      	ldr	r2, [pc, #80]	; (402380 <_init_chip+0x5c>)
  402330:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  402334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  40233c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402340:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  402344:	a801      	add	r0, sp, #4
  402346:	4b0f      	ldr	r3, [pc, #60]	; (402384 <_init_chip+0x60>)
  402348:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  40234a:	4a0f      	ldr	r2, [pc, #60]	; (402388 <_init_chip+0x64>)
  40234c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  40234e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  402352:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  402356:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  402358:	4b0c      	ldr	r3, [pc, #48]	; (40238c <_init_chip+0x68>)
  40235a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40235e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  402362:	d104      	bne.n	40236e <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  402364:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402368:	4b08      	ldr	r3, [pc, #32]	; (40238c <_init_chip+0x68>)
  40236a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  40236e:	4b08      	ldr	r3, [pc, #32]	; (402390 <_init_chip+0x6c>)
  402370:	4798      	blx	r3

#endif
	_pmc_init();
  402372:	4b08      	ldr	r3, [pc, #32]	; (402394 <_init_chip+0x70>)
  402374:	4798      	blx	r3
}
  402376:	b003      	add	sp, #12
  402378:	f85d fb04 	ldr.w	pc, [sp], #4
  40237c:	004019e1 	.word	0x004019e1
  402380:	e000ed00 	.word	0xe000ed00
  402384:	004019ef 	.word	0x004019ef
  402388:	400e0c00 	.word	0x400e0c00
  40238c:	400e0600 	.word	0x400e0600
  402390:	00402ed9 	.word	0x00402ed9
  402394:	004027ad 	.word	0x004027ad

00402398 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  402398:	b538      	push	{r3, r4, r5, lr}
  40239a:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  40239c:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  40239e:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  4023a0:	f014 0f01 	tst.w	r4, #1
  4023a4:	d11a      	bne.n	4023dc <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  4023a6:	f414 7f00 	tst.w	r4, #512	; 0x200
  4023aa:	d11a      	bne.n	4023e2 <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  4023ac:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  4023b0:	d11b      	bne.n	4023ea <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  4023b2:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  4023b6:	d11d      	bne.n	4023f4 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  4023b8:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  4023bc:	d008      	beq.n	4023d0 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4023be:	68eb      	ldr	r3, [r5, #12]
  4023c0:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  4023c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
  4023c4:	f012 0f20 	tst.w	r2, #32
  4023c8:	d019      	beq.n	4023fe <_can_irq_handler+0x66>
  4023ca:	2102      	movs	r1, #2
  4023cc:	4628      	mov	r0, r5
  4023ce:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  4023d0:	f014 0f08 	tst.w	r4, #8
  4023d4:	d115      	bne.n	402402 <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  4023d6:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  4023d8:	651c      	str	r4, [r3, #80]	; 0x50
  4023da:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  4023dc:	6883      	ldr	r3, [r0, #8]
  4023de:	4798      	blx	r3
  4023e0:	e7e1      	b.n	4023a6 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  4023e2:	686b      	ldr	r3, [r5, #4]
  4023e4:	4628      	mov	r0, r5
  4023e6:	4798      	blx	r3
  4023e8:	e7e0      	b.n	4023ac <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  4023ea:	68eb      	ldr	r3, [r5, #12]
  4023ec:	2103      	movs	r1, #3
  4023ee:	4628      	mov	r0, r5
  4023f0:	4798      	blx	r3
  4023f2:	e7de      	b.n	4023b2 <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  4023f4:	68eb      	ldr	r3, [r5, #12]
  4023f6:	2100      	movs	r1, #0
  4023f8:	4628      	mov	r0, r5
  4023fa:	4798      	blx	r3
  4023fc:	e7dc      	b.n	4023b8 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4023fe:	2101      	movs	r1, #1
  402400:	e7e4      	b.n	4023cc <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  402402:	68eb      	ldr	r3, [r5, #12]
  402404:	2104      	movs	r1, #4
  402406:	4628      	mov	r0, r5
  402408:	4798      	blx	r3
  40240a:	e7e4      	b.n	4023d6 <_can_irq_handler+0x3e>

0040240c <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  40240c:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  40240e:	4b02      	ldr	r3, [pc, #8]	; (402418 <MCAN1_INT0_Handler+0xc>)
  402410:	6a98      	ldr	r0, [r3, #40]	; 0x28
  402412:	4b02      	ldr	r3, [pc, #8]	; (40241c <MCAN1_INT0_Handler+0x10>)
  402414:	4798      	blx	r3
  402416:	bd08      	pop	{r3, pc}
  402418:	20400344 	.word	0x20400344
  40241c:	00402399 	.word	0x00402399

00402420 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  402420:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  402422:	2500      	movs	r5, #0
  402424:	428d      	cmp	r5, r1
  402426:	d210      	bcs.n	40244a <_ffs+0x2a>
  402428:	2201      	movs	r2, #1
  40242a:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40242c:	2b1f      	cmp	r3, #31
  40242e:	d80a      	bhi.n	402446 <_ffs+0x26>
			if (v[i] & bit) {
  402430:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  402434:	4222      	tst	r2, r4
  402436:	d102      	bne.n	40243e <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  402438:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40243a:	3301      	adds	r3, #1
  40243c:	e7f6      	b.n	40242c <_ffs+0xc>
				return i * 32 + j;
  40243e:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  402442:	bc30      	pop	{r4, r5}
  402444:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  402446:	3501      	adds	r5, #1
  402448:	e7ec      	b.n	402424 <_ffs+0x4>
	return -1;
  40244a:	f04f 30ff 	mov.w	r0, #4294967295
  40244e:	e7f8      	b.n	402442 <_ffs+0x22>

00402450 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  402450:	b510      	push	{r4, lr}
  402452:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  402454:	2300      	movs	r3, #0
  402456:	9301      	str	r3, [sp, #4]
  402458:	9302      	str	r3, [sp, #8]
  40245a:	9303      	str	r3, [sp, #12]
  40245c:	9304      	str	r3, [sp, #16]
  40245e:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  402460:	4b28      	ldr	r3, [pc, #160]	; (402504 <_ext_irq_handler+0xb4>)
  402462:	6818      	ldr	r0, [r3, #0]
  402464:	22f8      	movs	r2, #248	; 0xf8
  402466:	4928      	ldr	r1, [pc, #160]	; (402508 <_ext_irq_handler+0xb8>)
  402468:	3000      	adds	r0, #0
  40246a:	bf18      	it	ne
  40246c:	2001      	movne	r0, #1
  40246e:	4b27      	ldr	r3, [pc, #156]	; (40250c <_ext_irq_handler+0xbc>)
  402470:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  402472:	4b27      	ldr	r3, [pc, #156]	; (402510 <_ext_irq_handler+0xc0>)
  402474:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  402476:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  402478:	4013      	ands	r3, r2
  40247a:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  40247c:	4a25      	ldr	r2, [pc, #148]	; (402514 <_ext_irq_handler+0xc4>)
  40247e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  402480:	6c92      	ldr	r2, [r2, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  402482:	400a      	ands	r2, r1
  402484:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  402486:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  402488:	4923      	ldr	r1, [pc, #140]	; (402518 <_ext_irq_handler+0xc8>)
  40248a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40248c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  40248e:	400a      	ands	r2, r1
  402490:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  402492:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  402494:	e02c      	b.n	4024f0 <_ext_irq_handler+0xa0>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  402496:	4b1b      	ldr	r3, [pc, #108]	; (402504 <_ext_irq_handler+0xb4>)
  402498:	681b      	ldr	r3, [r3, #0]
  40249a:	4620      	mov	r0, r4
  40249c:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  40249e:	1163      	asrs	r3, r4, #5
  4024a0:	f004 041f 	and.w	r4, r4, #31
  4024a4:	2201      	movs	r2, #1
  4024a6:	fa02 f404 	lsl.w	r4, r2, r4
  4024aa:	aa06      	add	r2, sp, #24
  4024ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4024b0:	f853 2c14 	ldr.w	r2, [r3, #-20]
  4024b4:	ea22 0204 	bic.w	r2, r2, r4
  4024b8:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  4024bc:	2105      	movs	r1, #5
  4024be:	a801      	add	r0, sp, #4
  4024c0:	4b16      	ldr	r3, [pc, #88]	; (40251c <_ext_irq_handler+0xcc>)
  4024c2:	4798      	blx	r3
  4024c4:	4604      	mov	r4, r0
		while (-1 != pos) {
  4024c6:	f1b4 3fff 	cmp.w	r4, #4294967295
  4024ca:	d1e4      	bne.n	402496 <_ext_irq_handler+0x46>
	return ((Pio *)hw)->PIO_ISR;
  4024cc:	4a10      	ldr	r2, [pc, #64]	; (402510 <_ext_irq_handler+0xc0>)
  4024ce:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4024d0:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  4024d2:	400b      	ands	r3, r1
  4024d4:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  4024d6:	490f      	ldr	r1, [pc, #60]	; (402514 <_ext_irq_handler+0xc4>)
  4024d8:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4024da:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  4024dc:	4002      	ands	r2, r0
  4024de:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  4024e0:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  4024e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  4024e6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4024e8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4024ea:	4002      	ands	r2, r0
  4024ec:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  4024ee:	4313      	orrs	r3, r2
	while (flag_total) {
  4024f0:	b12b      	cbz	r3, 4024fe <_ext_irq_handler+0xae>
		pos = _ffs(flags, 5);
  4024f2:	2105      	movs	r1, #5
  4024f4:	a801      	add	r0, sp, #4
  4024f6:	4b09      	ldr	r3, [pc, #36]	; (40251c <_ext_irq_handler+0xcc>)
  4024f8:	4798      	blx	r3
  4024fa:	4604      	mov	r4, r0
		while (-1 != pos) {
  4024fc:	e7e3      	b.n	4024c6 <_ext_irq_handler+0x76>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  4024fe:	b006      	add	sp, #24
  402500:	bd10      	pop	{r4, pc}
  402502:	bf00      	nop
  402504:	20400370 	.word	0x20400370
  402508:	0040693c 	.word	0x0040693c
  40250c:	00401f59 	.word	0x00401f59
  402510:	400e0e00 	.word	0x400e0e00
  402514:	400e1000 	.word	0x400e1000
  402518:	400e1400 	.word	0x400e1400
  40251c:	00402421 	.word	0x00402421

00402520 <_pio_get_hardware_index>:
{
  402520:	b510      	push	{r4, lr}
	ASSERT(hw);
  402522:	4604      	mov	r4, r0
  402524:	22d2      	movs	r2, #210	; 0xd2
  402526:	4905      	ldr	r1, [pc, #20]	; (40253c <_pio_get_hardware_index+0x1c>)
  402528:	3000      	adds	r0, #0
  40252a:	bf18      	it	ne
  40252c:	2001      	movne	r0, #1
  40252e:	4b04      	ldr	r3, [pc, #16]	; (402540 <_pio_get_hardware_index+0x20>)
  402530:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  402532:	4804      	ldr	r0, [pc, #16]	; (402544 <_pio_get_hardware_index+0x24>)
  402534:	4420      	add	r0, r4
}
  402536:	f3c0 2047 	ubfx	r0, r0, #9, #8
  40253a:	bd10      	pop	{r4, pc}
  40253c:	0040693c 	.word	0x0040693c
  402540:	00401f59 	.word	0x00401f59
  402544:	bff1f200 	.word	0xbff1f200

00402548 <_pio_get_index>:
{
  402548:	b510      	push	{r4, lr}
	ASSERT(hw);
  40254a:	4604      	mov	r4, r0
  40254c:	22e0      	movs	r2, #224	; 0xe0
  40254e:	490d      	ldr	r1, [pc, #52]	; (402584 <_pio_get_index+0x3c>)
  402550:	3000      	adds	r0, #0
  402552:	bf18      	it	ne
  402554:	2001      	movne	r0, #1
  402556:	4b0c      	ldr	r3, [pc, #48]	; (402588 <_pio_get_index+0x40>)
  402558:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  40255a:	4620      	mov	r0, r4
  40255c:	4b0b      	ldr	r3, [pc, #44]	; (40258c <_pio_get_index+0x44>)
  40255e:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  402560:	2300      	movs	r3, #0
  402562:	2b02      	cmp	r3, #2
  402564:	d80b      	bhi.n	40257e <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  402566:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  40256a:	008a      	lsls	r2, r1, #2
  40256c:	4908      	ldr	r1, [pc, #32]	; (402590 <_pio_get_index+0x48>)
  40256e:	5c8a      	ldrb	r2, [r1, r2]
  402570:	4290      	cmp	r0, r2
  402572:	d002      	beq.n	40257a <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  402574:	3301      	adds	r3, #1
  402576:	b2db      	uxtb	r3, r3
  402578:	e7f3      	b.n	402562 <_pio_get_index+0x1a>
			return i;
  40257a:	b258      	sxtb	r0, r3
  40257c:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  40257e:	f04f 30ff 	mov.w	r0, #4294967295
}
  402582:	bd10      	pop	{r4, pc}
  402584:	0040693c 	.word	0x0040693c
  402588:	00401f59 	.word	0x00401f59
  40258c:	00402521 	.word	0x00402521
  402590:	004068e0 	.word	0x004068e0

00402594 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  402594:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  402596:	4604      	mov	r4, r0
  402598:	f44f 72af 	mov.w	r2, #350	; 0x15e
  40259c:	4929      	ldr	r1, [pc, #164]	; (402644 <_pio_init+0xb0>)
  40259e:	3000      	adds	r0, #0
  4025a0:	bf18      	it	ne
  4025a2:	2001      	movne	r0, #1
  4025a4:	4b28      	ldr	r3, [pc, #160]	; (402648 <_pio_init+0xb4>)
  4025a6:	4798      	blx	r3

	i = _pio_get_index(hw);
  4025a8:	4620      	mov	r0, r4
  4025aa:	4b28      	ldr	r3, [pc, #160]	; (40264c <_pio_init+0xb8>)
  4025ac:	4798      	blx	r3
	if (i < 0) {
  4025ae:	2800      	cmp	r0, #0
  4025b0:	db43      	blt.n	40263a <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  4025b2:	4d27      	ldr	r5, [pc, #156]	; (402650 <_pio_init+0xbc>)
  4025b4:	00c2      	lsls	r2, r0, #3
  4025b6:	1a11      	subs	r1, r2, r0
  4025b8:	008b      	lsls	r3, r1, #2
  4025ba:	442b      	add	r3, r5
  4025bc:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  4025be:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  4025c2:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  4025c4:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  4025c8:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  4025ca:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  4025ce:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  4025d0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  4025d4:	1a10      	subs	r0, r2, r0
  4025d6:	0083      	lsls	r3, r0, #2
  4025d8:	442b      	add	r3, r5
  4025da:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  4025dc:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  4025e0:	4620      	mov	r0, r4
  4025e2:	4b1c      	ldr	r3, [pc, #112]	; (402654 <_pio_init+0xc0>)
  4025e4:	4798      	blx	r3
  4025e6:	4428      	add	r0, r5
  4025e8:	f990 3054 	ldrsb.w	r3, [r0, #84]	; 0x54
  if ((int32_t)(IRQn) >= 0)
  4025ec:	2b00      	cmp	r3, #0
  4025ee:	db0c      	blt.n	40260a <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4025f0:	095a      	lsrs	r2, r3, #5
  4025f2:	f003 001f 	and.w	r0, r3, #31
  4025f6:	2101      	movs	r1, #1
  4025f8:	4081      	lsls	r1, r0
  4025fa:	3220      	adds	r2, #32
  4025fc:	4816      	ldr	r0, [pc, #88]	; (402658 <_pio_init+0xc4>)
  4025fe:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402602:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402606:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  40260a:	2b00      	cmp	r3, #0
  40260c:	db08      	blt.n	402620 <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40260e:	095a      	lsrs	r2, r3, #5
  402610:	f003 001f 	and.w	r0, r3, #31
  402614:	2101      	movs	r1, #1
  402616:	4081      	lsls	r1, r0
  402618:	3260      	adds	r2, #96	; 0x60
  40261a:	480f      	ldr	r0, [pc, #60]	; (402658 <_pio_init+0xc4>)
  40261c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  402620:	2b00      	cmp	r3, #0
  402622:	db0d      	blt.n	402640 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402624:	0959      	lsrs	r1, r3, #5
  402626:	f003 031f 	and.w	r3, r3, #31
  40262a:	2201      	movs	r2, #1
  40262c:	fa02 f303 	lsl.w	r3, r2, r3
  402630:	4a09      	ldr	r2, [pc, #36]	; (402658 <_pio_init+0xc4>)
  402632:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  402636:	2000      	movs	r0, #0
  402638:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  40263a:	f06f 0010 	mvn.w	r0, #16
  40263e:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  402640:	2000      	movs	r0, #0
}
  402642:	bd38      	pop	{r3, r4, r5, pc}
  402644:	0040693c 	.word	0x0040693c
  402648:	00401f59 	.word	0x00401f59
  40264c:	00402549 	.word	0x00402549
  402650:	004068e0 	.word	0x004068e0
  402654:	00402521 	.word	0x00402521
  402658:	e000e100 	.word	0xe000e100

0040265c <PIOD_Handler>:
{
  40265c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40265e:	4b01      	ldr	r3, [pc, #4]	; (402664 <PIOD_Handler+0x8>)
  402660:	4798      	blx	r3
  402662:	bd08      	pop	{r3, pc}
  402664:	00402451 	.word	0x00402451

00402668 <PIOB_Handler>:
{
  402668:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40266a:	4b01      	ldr	r3, [pc, #4]	; (402670 <PIOB_Handler+0x8>)
  40266c:	4798      	blx	r3
  40266e:	bd08      	pop	{r3, pc}
  402670:	00402451 	.word	0x00402451

00402674 <PIOA_Handler>:
{
  402674:	b508      	push	{r3, lr}
	_ext_irq_handler();
  402676:	4b01      	ldr	r3, [pc, #4]	; (40267c <PIOA_Handler+0x8>)
  402678:	4798      	blx	r3
  40267a:	bd08      	pop	{r3, pc}
  40267c:	00402451 	.word	0x00402451

00402680 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  402680:	b538      	push	{r3, r4, r5, lr}
  402682:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  402684:	4805      	ldr	r0, [pc, #20]	; (40269c <_ext_irq_init+0x1c>)
  402686:	4c06      	ldr	r4, [pc, #24]	; (4026a0 <_ext_irq_init+0x20>)
  402688:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  40268a:	4806      	ldr	r0, [pc, #24]	; (4026a4 <_ext_irq_init+0x24>)
  40268c:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  40268e:	4806      	ldr	r0, [pc, #24]	; (4026a8 <_ext_irq_init+0x28>)
  402690:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  402692:	4b06      	ldr	r3, [pc, #24]	; (4026ac <_ext_irq_init+0x2c>)
  402694:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  402696:	2000      	movs	r0, #0
  402698:	bd38      	pop	{r3, r4, r5, pc}
  40269a:	bf00      	nop
  40269c:	400e0e00 	.word	0x400e0e00
  4026a0:	00402595 	.word	0x00402595
  4026a4:	400e1000 	.word	0x400e1000
  4026a8:	400e1400 	.word	0x400e1400
  4026ac:	20400370 	.word	0x20400370

004026b0 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  4026b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4026b4:	4604      	mov	r4, r0
  4026b6:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  4026b8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 40270c <_ext_irq_enable+0x5c>
  4026bc:	f240 12ab 	movw	r2, #427	; 0x1ab
  4026c0:	4641      	mov	r1, r8
  4026c2:	289f      	cmp	r0, #159	; 0x9f
  4026c4:	bf8c      	ite	hi
  4026c6:	2000      	movhi	r0, #0
  4026c8:	2001      	movls	r0, #1
  4026ca:	4e0e      	ldr	r6, [pc, #56]	; (402704 <_ext_irq_enable+0x54>)
  4026cc:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  4026ce:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  4026d0:	22c3      	movs	r2, #195	; 0xc3
  4026d2:	4641      	mov	r1, r8
  4026d4:	2d9f      	cmp	r5, #159	; 0x9f
  4026d6:	bf8c      	ite	hi
  4026d8:	2000      	movhi	r0, #0
  4026da:	2001      	movls	r0, #1
  4026dc:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  4026de:	096d      	lsrs	r5, r5, #5
  4026e0:	4b09      	ldr	r3, [pc, #36]	; (402708 <_ext_irq_enable+0x58>)
  4026e2:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  4026e6:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  4026ea:	b937      	cbnz	r7, 4026fa <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  4026ec:	2301      	movs	r3, #1
  4026ee:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  4026f2:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  4026f4:	2000      	movs	r0, #0
  4026f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  4026fa:	2301      	movs	r3, #1
  4026fc:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  402700:	642c      	str	r4, [r5, #64]	; 0x40
  402702:	e7f7      	b.n	4026f4 <_ext_irq_enable+0x44>
  402704:	00401f59 	.word	0x00401f59
  402708:	400e0e00 	.word	0x400e0e00
  40270c:	0040693c 	.word	0x0040693c

00402710 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  402710:	490e      	ldr	r1, [pc, #56]	; (40274c <_pmc_init_sources+0x3c>)
  402712:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  402714:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  402718:	4b0d      	ldr	r3, [pc, #52]	; (402750 <_pmc_init_sources+0x40>)
  40271a:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  40271c:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40271e:	4b0b      	ldr	r3, [pc, #44]	; (40274c <_pmc_init_sources+0x3c>)
  402720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  402722:	f013 0f01 	tst.w	r3, #1
  402726:	d0fa      	beq.n	40271e <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  402728:	4b08      	ldr	r3, [pc, #32]	; (40274c <_pmc_init_sources+0x3c>)
  40272a:	6a19      	ldr	r1, [r3, #32]
  40272c:	4a09      	ldr	r2, [pc, #36]	; (402754 <_pmc_init_sources+0x44>)
  40272e:	430a      	orrs	r2, r1
  402730:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  402732:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  402734:	4a08      	ldr	r2, [pc, #32]	; (402758 <_pmc_init_sources+0x48>)
  402736:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  402738:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  40273a:	4a08      	ldr	r2, [pc, #32]	; (40275c <_pmc_init_sources+0x4c>)
  40273c:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  40273e:	4b03      	ldr	r3, [pc, #12]	; (40274c <_pmc_init_sources+0x3c>)
  402740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  402742:	f013 0f02 	tst.w	r3, #2
  402746:	d0fa      	beq.n	40273e <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  402748:	4770      	bx	lr
  40274a:	bf00      	nop
  40274c:	400e0600 	.word	0x400e0600
  402750:	00373e01 	.word	0x00373e01
  402754:	01370000 	.word	0x01370000
  402758:	f800ffff 	.word	0xf800ffff
  40275c:	20183f01 	.word	0x20183f01

00402760 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402760:	4a11      	ldr	r2, [pc, #68]	; (4027a8 <_pmc_init_master_clock+0x48>)
  402762:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  402764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  402768:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40276a:	4b0f      	ldr	r3, [pc, #60]	; (4027a8 <_pmc_init_master_clock+0x48>)
  40276c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40276e:	f013 0f08 	tst.w	r3, #8
  402772:	d0fa      	beq.n	40276a <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402774:	4a0c      	ldr	r2, [pc, #48]	; (4027a8 <_pmc_init_master_clock+0x48>)
  402776:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  402778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  40277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  402780:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  402782:	4b09      	ldr	r3, [pc, #36]	; (4027a8 <_pmc_init_master_clock+0x48>)
  402784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  402786:	f013 0f08 	tst.w	r3, #8
  40278a:	d0fa      	beq.n	402782 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40278c:	4a06      	ldr	r2, [pc, #24]	; (4027a8 <_pmc_init_master_clock+0x48>)
  40278e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  402790:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  402794:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  402798:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40279a:	4b03      	ldr	r3, [pc, #12]	; (4027a8 <_pmc_init_master_clock+0x48>)
  40279c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40279e:	f013 0f08 	tst.w	r3, #8
  4027a2:	d0fa      	beq.n	40279a <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  4027a4:	4770      	bx	lr
  4027a6:	bf00      	nop
  4027a8:	400e0600 	.word	0x400e0600

004027ac <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  4027ac:	b508      	push	{r3, lr}
	_pmc_init_sources();
  4027ae:	4b02      	ldr	r3, [pc, #8]	; (4027b8 <_pmc_init+0xc>)
  4027b0:	4798      	blx	r3
	_pmc_init_master_clock();
  4027b2:	4b02      	ldr	r3, [pc, #8]	; (4027bc <_pmc_init+0x10>)
  4027b4:	4798      	blx	r3
  4027b6:	bd08      	pop	{r3, pc}
  4027b8:	00402711 	.word	0x00402711
  4027bc:	00402761 	.word	0x00402761

004027c0 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4027c0:	2300      	movs	r3, #0
  4027c2:	2b01      	cmp	r3, #1
  4027c4:	d80f      	bhi.n	4027e6 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  4027c6:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  4027ca:	008a      	lsls	r2, r1, #2
  4027cc:	4907      	ldr	r1, [pc, #28]	; (4027ec <_pwm_get_cfg+0x2c>)
  4027ce:	588a      	ldr	r2, [r1, r2]
  4027d0:	4282      	cmp	r2, r0
  4027d2:	d002      	beq.n	4027da <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4027d4:	3301      	adds	r3, #1
  4027d6:	b2db      	uxtb	r3, r3
  4027d8:	e7f3      	b.n	4027c2 <_pwm_get_cfg+0x2>
			return (_pwms + i);
  4027da:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4027de:	009a      	lsls	r2, r3, #2
  4027e0:	4608      	mov	r0, r1
  4027e2:	4410      	add	r0, r2
  4027e4:	4770      	bx	lr
		}
	}

	return NULL;
  4027e6:	2000      	movs	r0, #0
}
  4027e8:	4770      	bx	lr
  4027ea:	bf00      	nop
  4027ec:	00406958 	.word	0x00406958

004027f0 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  4027f0:	4b06      	ldr	r3, [pc, #24]	; (40280c <_pwm_init_irq_param+0x1c>)
  4027f2:	4298      	cmp	r0, r3
  4027f4:	d003      	beq.n	4027fe <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  4027f6:	4b06      	ldr	r3, [pc, #24]	; (402810 <_pwm_init_irq_param+0x20>)
  4027f8:	4298      	cmp	r0, r3
  4027fa:	d003      	beq.n	402804 <_pwm_init_irq_param+0x14>
  4027fc:	4770      	bx	lr
		_pwm0_dev = dev;
  4027fe:	4b05      	ldr	r3, [pc, #20]	; (402814 <_pwm_init_irq_param+0x24>)
  402800:	6019      	str	r1, [r3, #0]
  402802:	e7f8      	b.n	4027f6 <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  402804:	4b03      	ldr	r3, [pc, #12]	; (402814 <_pwm_init_irq_param+0x24>)
  402806:	6059      	str	r1, [r3, #4]
	}
}
  402808:	e7f8      	b.n	4027fc <_pwm_init_irq_param+0xc>
  40280a:	bf00      	nop
  40280c:	40020000 	.word	0x40020000
  402810:	4005c000 	.word	0x4005c000
  402814:	20400374 	.word	0x20400374

00402818 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  402818:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  40281a:	6903      	ldr	r3, [r0, #16]
	return ((Pwm *)hw)->PWM_ISR1;
  40281c:	69db      	ldr	r3, [r3, #28]
  40281e:	b113      	cbz	r3, 402826 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  402820:	6803      	ldr	r3, [r0, #0]
  402822:	b103      	cbz	r3, 402826 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  402824:	4798      	blx	r3
  402826:	bd08      	pop	{r3, pc}

00402828 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  402828:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  40282a:	4b02      	ldr	r3, [pc, #8]	; (402834 <PWM0_Handler+0xc>)
  40282c:	6818      	ldr	r0, [r3, #0]
  40282e:	4b02      	ldr	r3, [pc, #8]	; (402838 <PWM0_Handler+0x10>)
  402830:	4798      	blx	r3
  402832:	bd08      	pop	{r3, pc}
  402834:	20400374 	.word	0x20400374
  402838:	00402819 	.word	0x00402819

0040283c <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  40283c:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  40283e:	4b02      	ldr	r3, [pc, #8]	; (402848 <PWM1_Handler+0xc>)
  402840:	6858      	ldr	r0, [r3, #4]
  402842:	4b02      	ldr	r3, [pc, #8]	; (40284c <PWM1_Handler+0x10>)
  402844:	4798      	blx	r3
  402846:	bd08      	pop	{r3, pc}
  402848:	20400374 	.word	0x20400374
  40284c:	00402819 	.word	0x00402819

00402850 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  402850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402852:	4606      	mov	r6, r0
	ASSERT(hw);
  402854:	460c      	mov	r4, r1
  402856:	1c08      	adds	r0, r1, #0
  402858:	bf18      	it	ne
  40285a:	2001      	movne	r0, #1
  40285c:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  402860:	4944      	ldr	r1, [pc, #272]	; (402974 <_pwm_init+0x124>)
  402862:	4b45      	ldr	r3, [pc, #276]	; (402978 <_pwm_init+0x128>)
  402864:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  402866:	4620      	mov	r0, r4
  402868:	4b44      	ldr	r3, [pc, #272]	; (40297c <_pwm_init+0x12c>)
  40286a:	4798      	blx	r3
  40286c:	4605      	mov	r5, r0

	device->hw = hw;
  40286e:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  402870:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  402872:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  402874:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  402876:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  402878:	6903      	ldr	r3, [r0, #16]
  40287a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  40287e:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  402880:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  402882:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  402884:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  402886:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  402888:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  40288c:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  40288e:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  402890:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  402892:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  402896:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  402898:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  40289c:	2300      	movs	r3, #0
  40289e:	e019      	b.n	4028d4 <_pwm_init+0x84>
		ch = cfg->ch + i;
  4028a0:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  4028a2:	0118      	lsls	r0, r3, #4
  4028a4:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  4028a8:	5c3a      	ldrb	r2, [r7, r0]
  4028aa:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  4028ae:	3210      	adds	r2, #16
  4028b0:	0152      	lsls	r2, r2, #5
  4028b2:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  4028b4:	5c3a      	ldrb	r2, [r7, r0]
  4028b6:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  4028ba:	3210      	adds	r2, #16
  4028bc:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4028c0:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  4028c2:	5c3a      	ldrb	r2, [r7, r0]
  4028c4:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  4028c8:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4028cc:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  4028d0:	3301      	adds	r3, #1
  4028d2:	b25b      	sxtb	r3, r3
  4028d4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4028d6:	4293      	cmp	r3, r2
  4028d8:	d3e2      	bcc.n	4028a0 <_pwm_init+0x50>
  4028da:	2300      	movs	r3, #0
  4028dc:	e014      	b.n	402908 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  4028de:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4028e0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4028e4:	0082      	lsls	r2, r0, #2
  4028e6:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  4028ea:	5c88      	ldrb	r0, [r1, r2]
  4028ec:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  4028f0:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  4028f4:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4028f8:	5c8a      	ldrb	r2, [r1, r2]
  4028fa:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4028fe:	3213      	adds	r2, #19
  402900:	0112      	lsls	r2, r2, #4
  402902:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  402904:	3301      	adds	r3, #1
  402906:	b25b      	sxtb	r3, r3
  402908:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  40290a:	4293      	cmp	r3, r2
  40290c:	d3e7      	bcc.n	4028de <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  40290e:	4631      	mov	r1, r6
  402910:	4620      	mov	r0, r4
  402912:	4b1b      	ldr	r3, [pc, #108]	; (402980 <_pwm_init+0x130>)
  402914:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  402916:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40291a:	2b00      	cmp	r3, #0
  40291c:	db0d      	blt.n	40293a <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40291e:	095a      	lsrs	r2, r3, #5
  402920:	f003 031f 	and.w	r3, r3, #31
  402924:	2101      	movs	r1, #1
  402926:	fa01 f303 	lsl.w	r3, r1, r3
  40292a:	3220      	adds	r2, #32
  40292c:	4915      	ldr	r1, [pc, #84]	; (402984 <_pwm_init+0x134>)
  40292e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402932:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402936:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40293a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40293e:	2b00      	cmp	r3, #0
  402940:	db09      	blt.n	402956 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402942:	095a      	lsrs	r2, r3, #5
  402944:	f003 031f 	and.w	r3, r3, #31
  402948:	2101      	movs	r1, #1
  40294a:	fa01 f303 	lsl.w	r3, r1, r3
  40294e:	3260      	adds	r2, #96	; 0x60
  402950:	490c      	ldr	r1, [pc, #48]	; (402984 <_pwm_init+0x134>)
  402952:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  402956:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40295a:	2b00      	cmp	r3, #0
  40295c:	db08      	blt.n	402970 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40295e:	0959      	lsrs	r1, r3, #5
  402960:	f003 031f 	and.w	r3, r3, #31
  402964:	2201      	movs	r2, #1
  402966:	fa02 f303 	lsl.w	r3, r2, r3
  40296a:	4a06      	ldr	r2, [pc, #24]	; (402984 <_pwm_init+0x134>)
  40296c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  402970:	2000      	movs	r0, #0
  402972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402974:	00406a00 	.word	0x00406a00
  402978:	00401f59 	.word	0x00401f59
  40297c:	004027c1 	.word	0x004027c1
  402980:	004027f1 	.word	0x004027f1
  402984:	e000e100 	.word	0xe000e100

00402988 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  402988:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  40298a:	4604      	mov	r4, r0
  40298c:	f240 12b5 	movw	r2, #437	; 0x1b5
  402990:	490b      	ldr	r1, [pc, #44]	; (4029c0 <_pwm_enable+0x38>)
  402992:	3000      	adds	r0, #0
  402994:	bf18      	it	ne
  402996:	2001      	movne	r0, #1
  402998:	4b0a      	ldr	r3, [pc, #40]	; (4029c4 <_pwm_enable+0x3c>)
  40299a:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  40299c:	6920      	ldr	r0, [r4, #16]
  40299e:	4b0a      	ldr	r3, [pc, #40]	; (4029c8 <_pwm_enable+0x40>)
  4029a0:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4029a2:	2300      	movs	r3, #0
  4029a4:	e008      	b.n	4029b8 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  4029a6:	6921      	ldr	r1, [r4, #16]
  4029a8:	6b05      	ldr	r5, [r0, #48]	; 0x30
  4029aa:	011a      	lsls	r2, r3, #4
  4029ac:	5cad      	ldrb	r5, [r5, r2]
  4029ae:	2201      	movs	r2, #1
  4029b0:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  4029b2:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  4029b4:	3301      	adds	r3, #1
  4029b6:	b25b      	sxtb	r3, r3
  4029b8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4029ba:	4293      	cmp	r3, r2
  4029bc:	d3f3      	bcc.n	4029a6 <_pwm_enable+0x1e>
	}
}
  4029be:	bd38      	pop	{r3, r4, r5, pc}
  4029c0:	00406a00 	.word	0x00406a00
  4029c4:	00401f59 	.word	0x00401f59
  4029c8:	004027c1 	.word	0x004027c1

004029cc <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  4029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4029ce:	460d      	mov	r5, r1
  4029d0:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  4029d2:	4604      	mov	r4, r0
  4029d4:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  4029d8:	4911      	ldr	r1, [pc, #68]	; (402a20 <_pwm_set_param+0x54>)
  4029da:	2800      	cmp	r0, #0
  4029dc:	bf18      	it	ne
  4029de:	42ae      	cmpne	r6, r5
  4029e0:	bf34      	ite	cc
  4029e2:	2001      	movcc	r0, #1
  4029e4:	2000      	movcs	r0, #0
  4029e6:	4b0f      	ldr	r3, [pc, #60]	; (402a24 <_pwm_set_param+0x58>)
  4029e8:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  4029ea:	6920      	ldr	r0, [r4, #16]
  4029ec:	4b0e      	ldr	r3, [pc, #56]	; (402a28 <_pwm_set_param+0x5c>)
  4029ee:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4029f0:	2300      	movs	r3, #0
  4029f2:	e010      	b.n	402a16 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  4029f4:	6922      	ldr	r2, [r4, #16]
  4029f6:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4029f8:	0119      	lsls	r1, r3, #4
  4029fa:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  4029fc:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  402a00:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  402a04:	6922      	ldr	r2, [r4, #16]
  402a06:	6b07      	ldr	r7, [r0, #48]	; 0x30
  402a08:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  402a0a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  402a0e:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  402a12:	3301      	adds	r3, #1
  402a14:	b2db      	uxtb	r3, r3
  402a16:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402a18:	4293      	cmp	r3, r2
  402a1a:	d3eb      	bcc.n	4029f4 <_pwm_set_param+0x28>
	}
}
  402a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a1e:	bf00      	nop
  402a20:	00406a00 	.word	0x00406a00
  402a24:	00401f59 	.word	0x00401f59
  402a28:	004027c1 	.word	0x004027c1

00402a2c <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  402a2c:	b510      	push	{r4, lr}
	ASSERT(device);
  402a2e:	4604      	mov	r4, r0
  402a30:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402a34:	4907      	ldr	r1, [pc, #28]	; (402a54 <_pwm_is_enabled+0x28>)
  402a36:	3000      	adds	r0, #0
  402a38:	bf18      	it	ne
  402a3a:	2001      	movne	r0, #1
  402a3c:	4b06      	ldr	r3, [pc, #24]	; (402a58 <_pwm_is_enabled+0x2c>)
  402a3e:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  402a40:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  402a42:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  402a44:	f013 0f0f 	tst.w	r3, #15
  402a48:	d001      	beq.n	402a4e <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  402a4a:	2001      	movs	r0, #1
	}
}
  402a4c:	bd10      	pop	{r4, pc}
		return false;
  402a4e:	2000      	movs	r0, #0
  402a50:	bd10      	pop	{r4, pc}
  402a52:	bf00      	nop
  402a54:	00406a00 	.word	0x00406a00
  402a58:	00401f59 	.word	0x00401f59

00402a5c <_pwm_set_irq_state>:

	return hri_pwm_read_CDTY_reg(device->hw, cfg->ch[0].index);
}

void _pwm_set_irq_state(struct _pwm_device *const device, const enum _pwm_callback_type type, const bool disable)
{
  402a5c:	b538      	push	{r3, r4, r5, lr}
  402a5e:	460d      	mov	r5, r1
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device);
  402a60:	4604      	mov	r4, r0
  402a62:	f44f 7200 	mov.w	r2, #512	; 0x200
  402a66:	4912      	ldr	r1, [pc, #72]	; (402ab0 <_pwm_set_irq_state+0x54>)
  402a68:	3000      	adds	r0, #0
  402a6a:	bf18      	it	ne
  402a6c:	2001      	movne	r0, #1
  402a6e:	4b11      	ldr	r3, [pc, #68]	; (402ab4 <_pwm_set_irq_state+0x58>)
  402a70:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  402a72:	6920      	ldr	r0, [r4, #16]
  402a74:	4b10      	ldr	r3, [pc, #64]	; (402ab8 <_pwm_set_irq_state+0x5c>)
  402a76:	4798      	blx	r3

	if (PWM_DEVICE_PERIOD_CB == type) {
  402a78:	b18d      	cbz	r5, 402a9e <_pwm_set_irq_state+0x42>
		for (i = 0; i < cfg->ch_num; i++) {
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
		}
	} else if (PWM_DEVICE_ERROR_CB == type) {
  402a7a:	2d01      	cmp	r5, #1
  402a7c:	d011      	beq.n	402aa2 <_pwm_set_irq_state+0x46>
  402a7e:	bd38      	pop	{r3, r4, r5, pc}
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
  402a80:	6921      	ldr	r1, [r4, #16]
  402a82:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402a84:	0113      	lsls	r3, r2, #4
  402a86:	5ced      	ldrb	r5, [r5, r3]
  402a88:	2301      	movs	r3, #1
  402a8a:	40ab      	lsls	r3, r5
	((Pwm *)hw)->PWM_IER1 = data;
  402a8c:	610b      	str	r3, [r1, #16]
	((Pwm *)hw)->PWM_IDR1 = ~data;
  402a8e:	43db      	mvns	r3, r3
  402a90:	614b      	str	r3, [r1, #20]
		for (i = 0; i < cfg->ch_num; i++) {
  402a92:	3201      	adds	r2, #1
  402a94:	b2d2      	uxtb	r2, r2
  402a96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402a98:	429a      	cmp	r2, r3
  402a9a:	d3f1      	bcc.n	402a80 <_pwm_set_irq_state+0x24>
  402a9c:	bd38      	pop	{r3, r4, r5, pc}
  402a9e:	2200      	movs	r2, #0
  402aa0:	e7f9      	b.n	402a96 <_pwm_set_irq_state+0x3a>
		ASSERT(false);
  402aa2:	f240 2209 	movw	r2, #521	; 0x209
  402aa6:	4902      	ldr	r1, [pc, #8]	; (402ab0 <_pwm_set_irq_state+0x54>)
  402aa8:	2000      	movs	r0, #0
  402aaa:	4b02      	ldr	r3, [pc, #8]	; (402ab4 <_pwm_set_irq_state+0x58>)
  402aac:	4798      	blx	r3
	}
}
  402aae:	e7e6      	b.n	402a7e <_pwm_set_irq_state+0x22>
  402ab0:	00406a00 	.word	0x00406a00
  402ab4:	00401f59 	.word	0x00401f59
  402ab8:	004027c1 	.word	0x004027c1

00402abc <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  402abc:	2000      	movs	r0, #0
  402abe:	4770      	bx	lr

00402ac0 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  402ac0:	4b03      	ldr	r3, [pc, #12]	; (402ad0 <_system_time_init+0x10>)
  402ac2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  402ac6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  402ac8:	2205      	movs	r2, #5
  402aca:	601a      	str	r2, [r3, #0]
  402acc:	4770      	bx	lr
  402ace:	bf00      	nop
  402ad0:	e000e010 	.word	0xe000e010

00402ad4 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  402ad4:	b508      	push	{r3, lr}
	_system_time_init(hw);
  402ad6:	4b01      	ldr	r3, [pc, #4]	; (402adc <_delay_init+0x8>)
  402ad8:	4798      	blx	r3
  402ada:	bd08      	pop	{r3, pc}
  402adc:	00402ac1 	.word	0x00402ac1

00402ae0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  402ae0:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  402ae2:	e00d      	b.n	402b00 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  402ae4:	4b0d      	ldr	r3, [pc, #52]	; (402b1c <_delay_cycles+0x3c>)
  402ae6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  402aea:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  402aec:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  402aee:	4b0b      	ldr	r3, [pc, #44]	; (402b1c <_delay_cycles+0x3c>)
  402af0:	681b      	ldr	r3, [r3, #0]
  402af2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402af6:	d0fa      	beq.n	402aee <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  402af8:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  402afc:	3101      	adds	r1, #1
	while (n--) {
  402afe:	4610      	mov	r0, r2
  402b00:	1e43      	subs	r3, r0, #1
  402b02:	b2da      	uxtb	r2, r3
  402b04:	2800      	cmp	r0, #0
  402b06:	d1ed      	bne.n	402ae4 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  402b08:	4b04      	ldr	r3, [pc, #16]	; (402b1c <_delay_cycles+0x3c>)
  402b0a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  402b0c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  402b0e:	4b03      	ldr	r3, [pc, #12]	; (402b1c <_delay_cycles+0x3c>)
  402b10:	681b      	ldr	r3, [r3, #0]
  402b12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402b16:	d0fa      	beq.n	402b0e <_delay_cycles+0x2e>
		;
}
  402b18:	4770      	bx	lr
  402b1a:	bf00      	nop
  402b1c:	e000e010 	.word	0xe000e010

00402b20 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  402b20:	2300      	movs	r3, #0
  402b22:	2b01      	cmp	r3, #1
  402b24:	d815      	bhi.n	402b52 <get_cfg+0x32>
{
  402b26:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  402b28:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  402b2c:	008a      	lsls	r2, r1, #2
  402b2e:	490a      	ldr	r1, [pc, #40]	; (402b58 <get_cfg+0x38>)
  402b30:	588a      	ldr	r2, [r1, r2]
  402b32:	4282      	cmp	r2, r0
  402b34:	d007      	beq.n	402b46 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  402b36:	3301      	adds	r3, #1
  402b38:	b2db      	uxtb	r3, r3
  402b3a:	2b01      	cmp	r3, #1
  402b3c:	d9f4      	bls.n	402b28 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  402b3e:	2000      	movs	r0, #0
}
  402b40:	f85d 4b04 	ldr.w	r4, [sp], #4
  402b44:	4770      	bx	lr
			return &(_tcs[i]);
  402b46:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  402b4a:	00a3      	lsls	r3, r4, #2
  402b4c:	4608      	mov	r0, r1
  402b4e:	4418      	add	r0, r3
  402b50:	e7f6      	b.n	402b40 <get_cfg+0x20>
	return NULL;
  402b52:	2000      	movs	r0, #0
  402b54:	4770      	bx	lr
  402b56:	bf00      	nop
  402b58:	20400000 	.word	0x20400000

00402b5c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  402b5c:	4b06      	ldr	r3, [pc, #24]	; (402b78 <_tc_init_irq_param+0x1c>)
  402b5e:	4298      	cmp	r0, r3
  402b60:	d003      	beq.n	402b6a <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  402b62:	4b06      	ldr	r3, [pc, #24]	; (402b7c <_tc_init_irq_param+0x20>)
  402b64:	4298      	cmp	r0, r3
  402b66:	d003      	beq.n	402b70 <_tc_init_irq_param+0x14>
  402b68:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  402b6a:	4b05      	ldr	r3, [pc, #20]	; (402b80 <_tc_init_irq_param+0x24>)
  402b6c:	6019      	str	r1, [r3, #0]
  402b6e:	e7f8      	b.n	402b62 <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  402b70:	4b03      	ldr	r3, [pc, #12]	; (402b80 <_tc_init_irq_param+0x24>)
  402b72:	6059      	str	r1, [r3, #4]
	}
}
  402b74:	e7f8      	b.n	402b68 <_tc_init_irq_param+0xc>
  402b76:	bf00      	nop
  402b78:	4000c000 	.word	0x4000c000
  402b7c:	40054000 	.word	0x40054000
  402b80:	20400394 	.word	0x20400394

00402b84 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  402b84:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  402b86:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  402b88:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  402b8a:	f013 0f10 	tst.w	r3, #16
  402b8e:	d100      	bne.n	402b92 <tc_interrupt_handler+0xe>
  402b90:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  402b92:	6803      	ldr	r3, [r0, #0]
  402b94:	4798      	blx	r3
	}
}
  402b96:	e7fb      	b.n	402b90 <tc_interrupt_handler+0xc>

00402b98 <_timer_init>:
{
  402b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b9c:	4606      	mov	r6, r0
  402b9e:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  402ba0:	4608      	mov	r0, r1
  402ba2:	4b2f      	ldr	r3, [pc, #188]	; (402c60 <_timer_init+0xc8>)
  402ba4:	4798      	blx	r3
  402ba6:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  402ba8:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  402bac:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  402bb0:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  402bb2:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  402bb6:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  402bb8:	22c3      	movs	r2, #195	; 0xc3
  402bba:	492a      	ldr	r1, [pc, #168]	; (402c64 <_timer_init+0xcc>)
  402bbc:	2001      	movs	r0, #1
  402bbe:	4b2a      	ldr	r3, [pc, #168]	; (402c68 <_timer_init+0xd0>)
  402bc0:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  402bc2:	f248 0307 	movw	r3, #32775	; 0x8007
  402bc6:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  402bc8:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  402bcc:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  402bd0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  402bd4:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  402bd6:	2300      	movs	r3, #0
  402bd8:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  402bda:	f248 020f 	movw	r2, #32783	; 0x800f
  402bde:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  402be0:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  402be4:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  402be8:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  402bec:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  402bee:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  402bf0:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  402bf2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  402bf6:	4631      	mov	r1, r6
  402bf8:	4620      	mov	r0, r4
  402bfa:	4b1c      	ldr	r3, [pc, #112]	; (402c6c <_timer_init+0xd4>)
  402bfc:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  402bfe:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402c02:	2b00      	cmp	r3, #0
  402c04:	db0d      	blt.n	402c22 <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402c06:	095a      	lsrs	r2, r3, #5
  402c08:	f003 031f 	and.w	r3, r3, #31
  402c0c:	2101      	movs	r1, #1
  402c0e:	fa01 f303 	lsl.w	r3, r1, r3
  402c12:	3220      	adds	r2, #32
  402c14:	4916      	ldr	r1, [pc, #88]	; (402c70 <_timer_init+0xd8>)
  402c16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402c1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402c1e:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  402c22:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402c26:	2b00      	cmp	r3, #0
  402c28:	db09      	blt.n	402c3e <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402c2a:	095a      	lsrs	r2, r3, #5
  402c2c:	f003 031f 	and.w	r3, r3, #31
  402c30:	2101      	movs	r1, #1
  402c32:	fa01 f303 	lsl.w	r3, r1, r3
  402c36:	3260      	adds	r2, #96	; 0x60
  402c38:	490d      	ldr	r1, [pc, #52]	; (402c70 <_timer_init+0xd8>)
  402c3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  402c3e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402c42:	2b00      	cmp	r3, #0
  402c44:	db08      	blt.n	402c58 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402c46:	0959      	lsrs	r1, r3, #5
  402c48:	f003 031f 	and.w	r3, r3, #31
  402c4c:	2201      	movs	r2, #1
  402c4e:	fa02 f303 	lsl.w	r3, r2, r3
  402c52:	4a07      	ldr	r2, [pc, #28]	; (402c70 <_timer_init+0xd8>)
  402c54:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  402c58:	2000      	movs	r0, #0
  402c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c5e:	bf00      	nop
  402c60:	00402b21 	.word	0x00402b21
  402c64:	00406a18 	.word	0x00406a18
  402c68:	00401f59 	.word	0x00401f59
  402c6c:	00402b5d 	.word	0x00402b5d
  402c70:	e000e100 	.word	0xe000e100

00402c74 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402c74:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  402c76:	2305      	movs	r3, #5
  402c78:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402c7a:	68c2      	ldr	r2, [r0, #12]
  402c7c:	6413      	str	r3, [r2, #64]	; 0x40
  402c7e:	4770      	bx	lr

00402c80 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  402c80:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  402c82:	6a13      	ldr	r3, [r2, #32]
  402c84:	f3c3 4300 	ubfx	r3, r3, #16, #1
  402c88:	6e10      	ldr	r0, [r2, #96]	; 0x60
  402c8a:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  402c8e:	4318      	orrs	r0, r3
  402c90:	4770      	bx	lr

00402c92 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  402c92:	2000      	movs	r0, #0
  402c94:	4770      	bx	lr
	...

00402c98 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  402c98:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  402c9a:	4b02      	ldr	r3, [pc, #8]	; (402ca4 <TC0_Handler+0xc>)
  402c9c:	6818      	ldr	r0, [r3, #0]
  402c9e:	4b02      	ldr	r3, [pc, #8]	; (402ca8 <TC0_Handler+0x10>)
  402ca0:	4798      	blx	r3
  402ca2:	bd08      	pop	{r3, pc}
  402ca4:	20400394 	.word	0x20400394
  402ca8:	00402b85 	.word	0x00402b85

00402cac <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  402cac:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  402cae:	4b02      	ldr	r3, [pc, #8]	; (402cb8 <TC9_Handler+0xc>)
  402cb0:	6858      	ldr	r0, [r3, #4]
  402cb2:	4b02      	ldr	r3, [pc, #8]	; (402cbc <TC9_Handler+0x10>)
  402cb4:	4798      	blx	r3
  402cb6:	bd08      	pop	{r3, pc}
  402cb8:	20400394 	.word	0x20400394
  402cbc:	00402b85 	.word	0x00402b85

00402cc0 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  402cc0:	b510      	push	{r4, lr}
	ASSERT(hw);
  402cc2:	4604      	mov	r4, r0
  402cc4:	f240 222b 	movw	r2, #555	; 0x22b
  402cc8:	4905      	ldr	r1, [pc, #20]	; (402ce0 <_usart_get_hardware_index+0x20>)
  402cca:	3000      	adds	r0, #0
  402ccc:	bf18      	it	ne
  402cce:	2001      	movne	r0, #1
  402cd0:	4b04      	ldr	r3, [pc, #16]	; (402ce4 <_usart_get_hardware_index+0x24>)
  402cd2:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  402cd4:	4804      	ldr	r0, [pc, #16]	; (402ce8 <_usart_get_hardware_index+0x28>)
  402cd6:	4420      	add	r0, r4
}
  402cd8:	f3c0 3087 	ubfx	r0, r0, #14, #8
  402cdc:	bd10      	pop	{r4, pc}
  402cde:	bf00      	nop
  402ce0:	00406a38 	.word	0x00406a38
  402ce4:	00401f59 	.word	0x00401f59
  402ce8:	bffdc000 	.word	0xbffdc000

00402cec <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  402cec:	b510      	push	{r4, lr}
	ASSERT(hw);
  402cee:	4604      	mov	r4, r0
  402cf0:	f240 2287 	movw	r2, #647	; 0x287
  402cf4:	490e      	ldr	r1, [pc, #56]	; (402d30 <_get_usart_index+0x44>)
  402cf6:	3000      	adds	r0, #0
  402cf8:	bf18      	it	ne
  402cfa:	2001      	movne	r0, #1
  402cfc:	4b0d      	ldr	r3, [pc, #52]	; (402d34 <_get_usart_index+0x48>)
  402cfe:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  402d00:	4620      	mov	r0, r4
  402d02:	4b0d      	ldr	r3, [pc, #52]	; (402d38 <_get_usart_index+0x4c>)
  402d04:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  402d06:	2300      	movs	r3, #0
  402d08:	b143      	cbz	r3, 402d1c <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  402d0a:	f240 2291 	movw	r2, #657	; 0x291
  402d0e:	4908      	ldr	r1, [pc, #32]	; (402d30 <_get_usart_index+0x44>)
  402d10:	2000      	movs	r0, #0
  402d12:	4b08      	ldr	r3, [pc, #32]	; (402d34 <_get_usart_index+0x48>)
  402d14:	4798      	blx	r3
	return 0;
  402d16:	2300      	movs	r3, #0
}
  402d18:	4618      	mov	r0, r3
  402d1a:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  402d1c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402d20:	008a      	lsls	r2, r1, #2
  402d22:	4906      	ldr	r1, [pc, #24]	; (402d3c <_get_usart_index+0x50>)
  402d24:	5c8a      	ldrb	r2, [r1, r2]
  402d26:	4290      	cmp	r0, r2
  402d28:	d0f6      	beq.n	402d18 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  402d2a:	3301      	adds	r3, #1
  402d2c:	b2db      	uxtb	r3, r3
  402d2e:	e7eb      	b.n	402d08 <_get_usart_index+0x1c>
  402d30:	00406a38 	.word	0x00406a38
  402d34:	00401f59 	.word	0x00401f59
  402d38:	00402cc1 	.word	0x00402cc1
  402d3c:	00406a2c 	.word	0x00406a2c

00402d40 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  402d40:	b510      	push	{r4, lr}
	ASSERT(hw);
  402d42:	4604      	mov	r4, r0
  402d44:	f240 229e 	movw	r2, #670	; 0x29e
  402d48:	4911      	ldr	r1, [pc, #68]	; (402d90 <_usart_init+0x50>)
  402d4a:	3000      	adds	r0, #0
  402d4c:	bf18      	it	ne
  402d4e:	2001      	movne	r0, #1
  402d50:	4b10      	ldr	r3, [pc, #64]	; (402d94 <_usart_init+0x54>)
  402d52:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  402d54:	4620      	mov	r0, r4
  402d56:	4b10      	ldr	r3, [pc, #64]	; (402d98 <_usart_init+0x58>)
  402d58:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  402d5a:	4b10      	ldr	r3, [pc, #64]	; (402d9c <_usart_init+0x5c>)
  402d5c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  402d60:	2300      	movs	r3, #0
  402d62:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  402d64:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  402d66:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  402d68:	22ac      	movs	r2, #172	; 0xac
  402d6a:	6022      	str	r2, [r4, #0]
  402d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
  402d70:	6022      	str	r2, [r4, #0]
  402d72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402d76:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  402d78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  402d7c:	0081      	lsls	r1, r0, #2
  402d7e:	4a08      	ldr	r2, [pc, #32]	; (402da0 <_usart_init+0x60>)
  402d80:	440a      	add	r2, r1
  402d82:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  402d84:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  402d86:	4a07      	ldr	r2, [pc, #28]	; (402da4 <_usart_init+0x64>)
  402d88:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  402d8a:	4618      	mov	r0, r3
  402d8c:	bd10      	pop	{r4, pc}
  402d8e:	bf00      	nop
  402d90:	00406a38 	.word	0x00406a38
  402d94:	00401f59 	.word	0x00401f59
  402d98:	00402ced 	.word	0x00402ced
  402d9c:	55534100 	.word	0x55534100
  402da0:	00406a2c 	.word	0x00406a2c
  402da4:	000100f4 	.word	0x000100f4

00402da8 <_usart_sync_init>:
{
  402da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402daa:	460c      	mov	r4, r1
	ASSERT(device);
  402dac:	4e09      	ldr	r6, [pc, #36]	; (402dd4 <_usart_sync_init+0x2c>)
  402dae:	4607      	mov	r7, r0
  402db0:	22bd      	movs	r2, #189	; 0xbd
  402db2:	4631      	mov	r1, r6
  402db4:	3000      	adds	r0, #0
  402db6:	bf18      	it	ne
  402db8:	2001      	movne	r0, #1
  402dba:	4d07      	ldr	r5, [pc, #28]	; (402dd8 <_usart_sync_init+0x30>)
  402dbc:	47a8      	blx	r5
	ASSERT(hw);
  402dbe:	22be      	movs	r2, #190	; 0xbe
  402dc0:	4631      	mov	r1, r6
  402dc2:	1c20      	adds	r0, r4, #0
  402dc4:	bf18      	it	ne
  402dc6:	2001      	movne	r0, #1
  402dc8:	47a8      	blx	r5
	device->hw = hw;
  402dca:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  402dcc:	4620      	mov	r0, r4
  402dce:	4b03      	ldr	r3, [pc, #12]	; (402ddc <_usart_sync_init+0x34>)
  402dd0:	4798      	blx	r3
}
  402dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402dd4:	00406a38 	.word	0x00406a38
  402dd8:	00401f59 	.word	0x00401f59
  402ddc:	00402d41 	.word	0x00402d41

00402de0 <_usart_sync_enable>:
{
  402de0:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  402de2:	4e0a      	ldr	r6, [pc, #40]	; (402e0c <_usart_sync_enable+0x2c>)
  402de4:	4604      	mov	r4, r0
  402de6:	f240 1205 	movw	r2, #261	; 0x105
  402dea:	4631      	mov	r1, r6
  402dec:	3000      	adds	r0, #0
  402dee:	bf18      	it	ne
  402df0:	2001      	movne	r0, #1
  402df2:	4d07      	ldr	r5, [pc, #28]	; (402e10 <_usart_sync_enable+0x30>)
  402df4:	47a8      	blx	r5
	_usart_enable(device->hw);
  402df6:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  402df8:	f240 22c7 	movw	r2, #711	; 0x2c7
  402dfc:	4631      	mov	r1, r6
  402dfe:	1c20      	adds	r0, r4, #0
  402e00:	bf18      	it	ne
  402e02:	2001      	movne	r0, #1
  402e04:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  402e06:	2350      	movs	r3, #80	; 0x50
  402e08:	6023      	str	r3, [r4, #0]
  402e0a:	bd70      	pop	{r4, r5, r6, pc}
  402e0c:	00406a38 	.word	0x00406a38
  402e10:	00401f59 	.word	0x00401f59

00402e14 <_usart_sync_write_byte>:
{
  402e14:	b538      	push	{r3, r4, r5, lr}
  402e16:	460c      	mov	r4, r1
	ASSERT(device);
  402e18:	4605      	mov	r5, r0
  402e1a:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  402e1e:	4904      	ldr	r1, [pc, #16]	; (402e30 <_usart_sync_write_byte+0x1c>)
  402e20:	3000      	adds	r0, #0
  402e22:	bf18      	it	ne
  402e24:	2001      	movne	r0, #1
  402e26:	4b03      	ldr	r3, [pc, #12]	; (402e34 <_usart_sync_write_byte+0x20>)
  402e28:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  402e2a:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  402e2c:	61dc      	str	r4, [r3, #28]
  402e2e:	bd38      	pop	{r3, r4, r5, pc}
  402e30:	00406a38 	.word	0x00406a38
  402e34:	00401f59 	.word	0x00401f59

00402e38 <_usart_sync_read_byte>:
{
  402e38:	b510      	push	{r4, lr}
	ASSERT(device);
  402e3a:	4604      	mov	r4, r0
  402e3c:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  402e40:	4904      	ldr	r1, [pc, #16]	; (402e54 <_usart_sync_read_byte+0x1c>)
  402e42:	3000      	adds	r0, #0
  402e44:	bf18      	it	ne
  402e46:	2001      	movne	r0, #1
  402e48:	4b03      	ldr	r3, [pc, #12]	; (402e58 <_usart_sync_read_byte+0x20>)
  402e4a:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  402e4c:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  402e4e:	6998      	ldr	r0, [r3, #24]
}
  402e50:	b2c0      	uxtb	r0, r0
  402e52:	bd10      	pop	{r4, pc}
  402e54:	00406a38 	.word	0x00406a38
  402e58:	00401f59 	.word	0x00401f59

00402e5c <_usart_sync_is_ready_to_send>:
{
  402e5c:	b510      	push	{r4, lr}
	ASSERT(device);
  402e5e:	4604      	mov	r4, r0
  402e60:	f240 12c3 	movw	r2, #451	; 0x1c3
  402e64:	4905      	ldr	r1, [pc, #20]	; (402e7c <_usart_sync_is_ready_to_send+0x20>)
  402e66:	3000      	adds	r0, #0
  402e68:	bf18      	it	ne
  402e6a:	2001      	movne	r0, #1
  402e6c:	4b04      	ldr	r3, [pc, #16]	; (402e80 <_usart_sync_is_ready_to_send+0x24>)
  402e6e:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  402e70:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  402e72:	6958      	ldr	r0, [r3, #20]
}
  402e74:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402e78:	bd10      	pop	{r4, pc}
  402e7a:	bf00      	nop
  402e7c:	00406a38 	.word	0x00406a38
  402e80:	00401f59 	.word	0x00401f59

00402e84 <_usart_sync_is_transmit_done>:
{
  402e84:	b510      	push	{r4, lr}
	ASSERT(device);
  402e86:	4604      	mov	r4, r0
  402e88:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  402e8c:	4905      	ldr	r1, [pc, #20]	; (402ea4 <_usart_sync_is_transmit_done+0x20>)
  402e8e:	3000      	adds	r0, #0
  402e90:	bf18      	it	ne
  402e92:	2001      	movne	r0, #1
  402e94:	4b04      	ldr	r3, [pc, #16]	; (402ea8 <_usart_sync_is_transmit_done+0x24>)
  402e96:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  402e98:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  402e9a:	6958      	ldr	r0, [r3, #20]
}
  402e9c:	f3c0 2040 	ubfx	r0, r0, #9, #1
  402ea0:	bd10      	pop	{r4, pc}
  402ea2:	bf00      	nop
  402ea4:	00406a38 	.word	0x00406a38
  402ea8:	00401f59 	.word	0x00401f59

00402eac <_usart_sync_is_byte_received>:
{
  402eac:	b510      	push	{r4, lr}
	ASSERT(device);
  402eae:	4604      	mov	r4, r0
  402eb0:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402eb4:	4905      	ldr	r1, [pc, #20]	; (402ecc <_usart_sync_is_byte_received+0x20>)
  402eb6:	3000      	adds	r0, #0
  402eb8:	bf18      	it	ne
  402eba:	2001      	movne	r0, #1
  402ebc:	4b04      	ldr	r3, [pc, #16]	; (402ed0 <_usart_sync_is_byte_received+0x24>)
  402ebe:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  402ec0:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  402ec2:	6958      	ldr	r0, [r3, #20]
  402ec4:	f000 0001 	and.w	r0, r0, #1
}
  402ec8:	bd10      	pop	{r4, pc}
  402eca:	bf00      	nop
  402ecc:	00406a38 	.word	0x00406a38
  402ed0:	00401f59 	.word	0x00401f59

00402ed4 <_usart_get_usart_sync>:
}
  402ed4:	2000      	movs	r0, #0
  402ed6:	4770      	bx	lr

00402ed8 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  402ed8:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  402eda:	2300      	movs	r3, #0
  402edc:	e004      	b.n	402ee8 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  402ede:	0199      	lsls	r1, r3, #6
  402ee0:	4a16      	ldr	r2, [pc, #88]	; (402f3c <_dma_init+0x64>)
  402ee2:	5852      	ldr	r2, [r2, r1]
  402ee4:	3301      	adds	r3, #1
  402ee6:	b2db      	uxtb	r3, r3
  402ee8:	2b17      	cmp	r3, #23
  402eea:	d9f8      	bls.n	402ede <_dma_init+0x6>
  402eec:	2300      	movs	r3, #0
  402eee:	e014      	b.n	402f1a <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  402ef0:	4c13      	ldr	r4, [pc, #76]	; (402f40 <_dma_init+0x68>)
  402ef2:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  402ef6:	2100      	movs	r1, #0
  402ef8:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  402efa:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  402efc:	1c98      	adds	r0, r3, #2
  402efe:	0180      	lsls	r0, r0, #6
  402f00:	1825      	adds	r5, r4, r0
  402f02:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  402f04:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  402f06:	490f      	ldr	r1, [pc, #60]	; (402f44 <_dma_init+0x6c>)
  402f08:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  402f0c:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  402f0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  402f12:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  402f14:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  402f16:	3301      	adds	r3, #1
  402f18:	b2db      	uxtb	r3, r3
  402f1a:	2b17      	cmp	r3, #23
  402f1c:	d9e8      	bls.n	402ef0 <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402f1e:	4b0a      	ldr	r3, [pc, #40]	; (402f48 <_dma_init+0x70>)
  402f20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  402f28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402f2c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402f30:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402f34:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  402f36:	2000      	movs	r0, #0
  402f38:	bc30      	pop	{r4, r5}
  402f3a:	4770      	bx	lr
  402f3c:	4007805c 	.word	0x4007805c
  402f40:	40078000 	.word	0x40078000
  402f44:	00406a54 	.word	0x00406a54
  402f48:	e000e100 	.word	0xe000e100

00402f4c <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  402f4c:	0180      	lsls	r0, r0, #6
  402f4e:	4b02      	ldr	r3, [pc, #8]	; (402f58 <_dma_set_destination_address+0xc>)
  402f50:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  402f52:	2000      	movs	r0, #0
  402f54:	4770      	bx	lr
  402f56:	bf00      	nop
  402f58:	40078064 	.word	0x40078064

00402f5c <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  402f5c:	0180      	lsls	r0, r0, #6
  402f5e:	4b02      	ldr	r3, [pc, #8]	; (402f68 <_dma_set_source_address+0xc>)
  402f60:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  402f62:	2000      	movs	r0, #0
  402f64:	4770      	bx	lr
  402f66:	bf00      	nop
  402f68:	40078060 	.word	0x40078060

00402f6c <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  402f6c:	0180      	lsls	r0, r0, #6
  402f6e:	4a04      	ldr	r2, [pc, #16]	; (402f80 <_dma_set_data_amount+0x14>)
  402f70:	4402      	add	r2, r0
  402f72:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  402f74:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  402f78:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  402f7a:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  402f7c:	2000      	movs	r0, #0
  402f7e:	4770      	bx	lr
  402f80:	40078000 	.word	0x40078000

00402f84 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  402f84:	2301      	movs	r3, #1
  402f86:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  402f8a:	4b03      	ldr	r3, [pc, #12]	; (402f98 <_dma_enable_transaction+0x14>)
  402f8c:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  402f8e:	b101      	cbz	r1, 402f92 <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  402f90:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  402f92:	2000      	movs	r0, #0
  402f94:	4770      	bx	lr
  402f96:	bf00      	nop
  402f98:	40078000 	.word	0x40078000

00402f9c <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  402f9c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  402fa0:	008a      	lsls	r2, r1, #2
  402fa2:	4b02      	ldr	r3, [pc, #8]	; (402fac <_dma_get_channel_resource+0x10>)
  402fa4:	4413      	add	r3, r2
  402fa6:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  402fa8:	2000      	movs	r0, #0
  402faa:	4770      	bx	lr
  402fac:	2040039c 	.word	0x2040039c

00402fb0 <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  402fb0:	b19a      	cbz	r2, 402fda <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  402fb2:	b951      	cbnz	r1, 402fca <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  402fb4:	0182      	lsls	r2, r0, #6
  402fb6:	4b13      	ldr	r3, [pc, #76]	; (403004 <_dma_set_irq_state+0x54>)
  402fb8:	4413      	add	r3, r2
  402fba:	2201      	movs	r2, #1
  402fbc:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  402fbe:	2301      	movs	r3, #1
  402fc0:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  402fc4:	4b0f      	ldr	r3, [pc, #60]	; (403004 <_dma_set_irq_state+0x54>)
  402fc6:	60d8      	str	r0, [r3, #12]
  402fc8:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  402fca:	2901      	cmp	r1, #1
  402fcc:	d1f7      	bne.n	402fbe <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  402fce:	0182      	lsls	r2, r0, #6
  402fd0:	4b0c      	ldr	r3, [pc, #48]	; (403004 <_dma_set_irq_state+0x54>)
  402fd2:	4413      	add	r3, r2
  402fd4:	2270      	movs	r2, #112	; 0x70
  402fd6:	651a      	str	r2, [r3, #80]	; 0x50
  402fd8:	e7f1      	b.n	402fbe <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  402fda:	b951      	cbnz	r1, 402ff2 <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  402fdc:	0182      	lsls	r2, r0, #6
  402fde:	4b09      	ldr	r3, [pc, #36]	; (403004 <_dma_set_irq_state+0x54>)
  402fe0:	4413      	add	r3, r2
  402fe2:	2201      	movs	r2, #1
  402fe4:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  402fe6:	2301      	movs	r3, #1
  402fe8:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  402fec:	4b05      	ldr	r3, [pc, #20]	; (403004 <_dma_set_irq_state+0x54>)
  402fee:	6118      	str	r0, [r3, #16]
  402ff0:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  402ff2:	2901      	cmp	r1, #1
  402ff4:	d1f7      	bne.n	402fe6 <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  402ff6:	0182      	lsls	r2, r0, #6
  402ff8:	4b02      	ldr	r3, [pc, #8]	; (403004 <_dma_set_irq_state+0x54>)
  402ffa:	4413      	add	r3, r2
  402ffc:	2270      	movs	r2, #112	; 0x70
  402ffe:	655a      	str	r2, [r3, #84]	; 0x54
  403000:	e7f1      	b.n	402fe6 <_dma_set_irq_state+0x36>
  403002:	bf00      	nop
  403004:	40078000 	.word	0x40078000

00403008 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  403008:	4b17      	ldr	r3, [pc, #92]	; (403068 <XDMAC_Handler+0x60>)
  40300a:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  40300c:	2300      	movs	r3, #0
  40300e:	2b17      	cmp	r3, #23
  403010:	d81b      	bhi.n	40304a <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  403012:	fa21 f203 	lsr.w	r2, r1, r3
  403016:	f012 0f01 	tst.w	r2, #1
  40301a:	d102      	bne.n	403022 <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  40301c:	3301      	adds	r3, #1
  40301e:	b2db      	uxtb	r3, r3
  403020:	e7f5      	b.n	40300e <XDMAC_Handler+0x6>
			channel = i;
  403022:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  403024:	2b00      	cmp	r3, #0
  403026:	db1d      	blt.n	403064 <XDMAC_Handler+0x5c>
{
  403028:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  40302a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  40302e:	0090      	lsls	r0, r2, #2
  403030:	4a0e      	ldr	r2, [pc, #56]	; (40306c <XDMAC_Handler+0x64>)
  403032:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  403034:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  403036:	0189      	lsls	r1, r1, #6
  403038:	4a0d      	ldr	r2, [pc, #52]	; (403070 <XDMAC_Handler+0x68>)
  40303a:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  40303c:	f012 0f70 	tst.w	r2, #112	; 0x70
  403040:	d106      	bne.n	403050 <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  403042:	f012 0f01 	tst.w	r2, #1
  403046:	d106      	bne.n	403056 <XDMAC_Handler+0x4e>
  403048:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  40304a:	f04f 33ff 	mov.w	r3, #4294967295
  40304e:	e7e9      	b.n	403024 <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  403050:	6843      	ldr	r3, [r0, #4]
  403052:	4798      	blx	r3
  403054:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  403056:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  40305a:	00a3      	lsls	r3, r4, #2
  40305c:	4a03      	ldr	r2, [pc, #12]	; (40306c <XDMAC_Handler+0x64>)
  40305e:	58d3      	ldr	r3, [r2, r3]
  403060:	4798      	blx	r3
  403062:	e7f1      	b.n	403048 <XDMAC_Handler+0x40>
  403064:	4770      	bx	lr
  403066:	bf00      	nop
  403068:	40078000 	.word	0x40078000
  40306c:	2040039c 	.word	0x2040039c
  403070:	4007805c 	.word	0x4007805c

00403074 <main>:




int main(void)
{
  403074:	b580      	push	{r7, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  403076:	4b23      	ldr	r3, [pc, #140]	; (403104 <main+0x90>)
  403078:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	/* Additional User initialisation */
	dma_adc_init();
  40307a:	4b23      	ldr	r3, [pc, #140]	; (403108 <main+0x94>)
  40307c:	4798      	blx	r3
	pwm_init_user();
  40307e:	4b23      	ldr	r3, [pc, #140]	; (40310c <main+0x98>)
  403080:	4798      	blx	r3
	encoder_init();
  403082:	4b23      	ldr	r3, [pc, #140]	; (403110 <main+0x9c>)
  403084:	4798      	blx	r3
	pos_sens_init();
  403086:	4b23      	ldr	r3, [pc, #140]	; (403114 <main+0xa0>)
  403088:	4798      	blx	r3
	
	/* Enable all devices */
	pwm_enable_all();
  40308a:	4b23      	ldr	r3, [pc, #140]	; (403118 <main+0xa4>)
  40308c:	4798      	blx	r3
	adc_enable_all();
  40308e:	4b23      	ldr	r3, [pc, #140]	; (40311c <main+0xa8>)
  403090:	4798      	blx	r3
	calibrate_curr_sensors();	//both PWM and ADC need to be enabled to calibrate the current sensors
  403092:	4b23      	ldr	r3, [pc, #140]	; (403120 <main+0xac>)
  403094:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  403096:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40309a:	4b22      	ldr	r3, [pc, #136]	; (403124 <main+0xb0>)
  40309c:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);		//enables the DC-DC converter for the HV side
	
	timer_start(&ENCODER_A);
  40309e:	4822      	ldr	r0, [pc, #136]	; (403128 <main+0xb4>)
  4030a0:	4c22      	ldr	r4, [pc, #136]	; (40312c <main+0xb8>)
  4030a2:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  4030a4:	4822      	ldr	r0, [pc, #136]	; (403130 <main+0xbc>)
  4030a6:	47a0      	blx	r4
	
	dma_adc_0_enable_continuously();
  4030a8:	4b22      	ldr	r3, [pc, #136]	; (403134 <main+0xc0>)
  4030aa:	4798      	blx	r3
	dma_adc_1_enable_continuously();
  4030ac:	4b22      	ldr	r3, [pc, #136]	; (403138 <main+0xc4>)
  4030ae:	4798      	blx	r3
	
	Init_Control();
  4030b0:	4b22      	ldr	r3, [pc, #136]	; (40313c <main+0xc8>)
  4030b2:	4798      	blx	r3
	enable_control();
  4030b4:	4e22      	ldr	r6, [pc, #136]	; (403140 <main+0xcc>)
  4030b6:	47b0      	blx	r6
	//----------------------------------------End of Startup Code--------------------------------------------------
	
	Current_Offset_And_Timing_Test();
  4030b8:	4b22      	ldr	r3, [pc, #136]	; (403144 <main+0xd0>)
  4030ba:	4798      	blx	r3
	delay_ms(500);
  4030bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4030c0:	4f21      	ldr	r7, [pc, #132]	; (403148 <main+0xd4>)
  4030c2:	47b8      	blx	r7
	printf("Initiated \n");
  4030c4:	4821      	ldr	r0, [pc, #132]	; (40314c <main+0xd8>)
  4030c6:	4c22      	ldr	r4, [pc, #136]	; (403150 <main+0xdc>)
  4030c8:	47a0      	blx	r4
	//first_slow_spin();
	
	printf("Starting D axis alignment \n");
  4030ca:	4822      	ldr	r0, [pc, #136]	; (403154 <main+0xe0>)
  4030cc:	47a0      	blx	r4
	pwm_set_duty(PWM_PHASE_A, 0);
  4030ce:	f8df 8098 	ldr.w	r8, [pc, #152]	; 403168 <main+0xf4>
  4030d2:	2200      	movs	r2, #0
  4030d4:	4611      	mov	r1, r2
  4030d6:	4640      	mov	r0, r8
  4030d8:	4d1f      	ldr	r5, [pc, #124]	; (403158 <main+0xe4>)
  4030da:	47a8      	blx	r5
	pwm_set_duty(PWM_PHASE_B, (PWM_PERIOD-1));
  4030dc:	f240 32e7 	movw	r2, #999	; 0x3e7
  4030e0:	2102      	movs	r1, #2
  4030e2:	4640      	mov	r0, r8
  4030e4:	47a8      	blx	r5
	pwm_set_duty(PWM_PHASE_C, (PWM_PERIOD-1));
  4030e6:	f240 32e7 	movw	r2, #999	; 0x3e7
  4030ea:	2100      	movs	r1, #0
  4030ec:	481b      	ldr	r0, [pc, #108]	; (40315c <main+0xe8>)
  4030ee:	47a8      	blx	r5
	
	

	delay_ms(2000);
  4030f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  4030f4:	47b8      	blx	r7
	encoder_record_Daxis_offset();
  4030f6:	4b1a      	ldr	r3, [pc, #104]	; (403160 <main+0xec>)
  4030f8:	4798      	blx	r3
	printf("Finished D axis alignment \n");
  4030fa:	481a      	ldr	r0, [pc, #104]	; (403164 <main+0xf0>)
  4030fc:	47a0      	blx	r4
		Vq_aim +=0.1;
		delay_us(100);
	}
	printf("Vq aim - %f \n",Vq_aim);
	*/
	enable_control();
  4030fe:	47b0      	blx	r6
  403100:	e7fe      	b.n	403100 <main+0x8c>
  403102:	bf00      	nop
  403104:	004001d5 	.word	0x004001d5
  403108:	00400d5d 	.word	0x00400d5d
  40310c:	00400f29 	.word	0x00400f29
  403110:	004006bd 	.word	0x004006bd
  403114:	00400a35 	.word	0x00400a35
  403118:	00400ffd 	.word	0x00400ffd
  40311c:	00400e49 	.word	0x00400e49
  403120:	004004e9 	.word	0x004004e9
  403124:	400e0e00 	.word	0x400e0e00
  403128:	20400714 	.word	0x20400714
  40312c:	00401dd9 	.word	0x00401dd9
  403130:	20400664 	.word	0x20400664
  403134:	00400d15 	.word	0x00400d15
  403138:	00400d2d 	.word	0x00400d2d
  40313c:	004001e9 	.word	0x004001e9
  403140:	00400b59 	.word	0x00400b59
  403144:	00401069 	.word	0x00401069
  403148:	00401a11 	.word	0x00401a11
  40314c:	00406b14 	.word	0x00406b14
  403150:	00404541 	.word	0x00404541
  403154:	00406b20 	.word	0x00406b20
  403158:	0040105d 	.word	0x0040105d
  40315c:	204007ec 	.word	0x204007ec
  403160:	004008e9 	.word	0x004008e9
  403164:	00406b3c 	.word	0x00406b3c
  403168:	20400648 	.word	0x20400648

0040316c <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  40316c:	b958      	cbnz	r0, 403186 <_read+0x1a>
{
  40316e:	b508      	push	{r3, lr}
  403170:	460b      	mov	r3, r1
  403172:	4611      	mov	r1, r2
  403174:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  403176:	4b05      	ldr	r3, [pc, #20]	; (40318c <_read+0x20>)
  403178:	4798      	blx	r3
	if (n < 0) {
  40317a:	2800      	cmp	r0, #0
  40317c:	db00      	blt.n	403180 <_read+0x14>
		return -1;
	}

	return n;
}
  40317e:	bd08      	pop	{r3, pc}
		return -1;
  403180:	f04f 30ff 	mov.w	r0, #4294967295
  403184:	bd08      	pop	{r3, pc}
		return -1;
  403186:	f04f 30ff 	mov.w	r0, #4294967295
  40318a:	4770      	bx	lr
  40318c:	004031e5 	.word	0x004031e5

00403190 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  403190:	3801      	subs	r0, #1
  403192:	2802      	cmp	r0, #2
  403194:	d80b      	bhi.n	4031ae <_write+0x1e>
{
  403196:	b508      	push	{r3, lr}
  403198:	460b      	mov	r3, r1
  40319a:	4611      	mov	r1, r2
  40319c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  40319e:	4b05      	ldr	r3, [pc, #20]	; (4031b4 <_write+0x24>)
  4031a0:	4798      	blx	r3
	if (n < 0) {
  4031a2:	2800      	cmp	r0, #0
  4031a4:	db00      	blt.n	4031a8 <_write+0x18>
		return -1;
	}

	return n;
}
  4031a6:	bd08      	pop	{r3, pc}
		return -1;
  4031a8:	f04f 30ff 	mov.w	r0, #4294967295
  4031ac:	bd08      	pop	{r3, pc}
		return -1;
  4031ae:	f04f 30ff 	mov.w	r0, #4294967295
  4031b2:	4770      	bx	lr
  4031b4:	00403209 	.word	0x00403209

004031b8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  4031b8:	b570      	push	{r4, r5, r6, lr}
  4031ba:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  4031bc:	4d06      	ldr	r5, [pc, #24]	; (4031d8 <stdio_io_init+0x20>)
  4031be:	682b      	ldr	r3, [r5, #0]
  4031c0:	2100      	movs	r1, #0
  4031c2:	6898      	ldr	r0, [r3, #8]
  4031c4:	4c05      	ldr	r4, [pc, #20]	; (4031dc <stdio_io_init+0x24>)
  4031c6:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4031c8:	682b      	ldr	r3, [r5, #0]
  4031ca:	2100      	movs	r1, #0
  4031cc:	6858      	ldr	r0, [r3, #4]
  4031ce:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  4031d0:	4b03      	ldr	r3, [pc, #12]	; (4031e0 <stdio_io_init+0x28>)
  4031d2:	601e      	str	r6, [r3, #0]
  4031d4:	bd70      	pop	{r4, r5, r6, pc}
  4031d6:	bf00      	nop
  4031d8:	20400048 	.word	0x20400048
  4031dc:	00404571 	.word	0x00404571
  4031e0:	204004bc 	.word	0x204004bc

004031e4 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  4031e4:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4031e6:	4b06      	ldr	r3, [pc, #24]	; (403200 <stdio_io_read+0x1c>)
  4031e8:	681b      	ldr	r3, [r3, #0]
  4031ea:	b133      	cbz	r3, 4031fa <stdio_io_read+0x16>
  4031ec:	460a      	mov	r2, r1
  4031ee:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  4031f0:	b292      	uxth	r2, r2
  4031f2:	4618      	mov	r0, r3
  4031f4:	4b03      	ldr	r3, [pc, #12]	; (403204 <stdio_io_read+0x20>)
  4031f6:	4798      	blx	r3
  4031f8:	bd08      	pop	{r3, pc}
		return 0;
  4031fa:	2000      	movs	r0, #0
}
  4031fc:	bd08      	pop	{r3, pc}
  4031fe:	bf00      	nop
  403200:	204004bc 	.word	0x204004bc
  403204:	00401ba9 	.word	0x00401ba9

00403208 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  403208:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40320a:	4b06      	ldr	r3, [pc, #24]	; (403224 <stdio_io_write+0x1c>)
  40320c:	681b      	ldr	r3, [r3, #0]
  40320e:	b133      	cbz	r3, 40321e <stdio_io_write+0x16>
  403210:	460a      	mov	r2, r1
  403212:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  403214:	b292      	uxth	r2, r2
  403216:	4618      	mov	r0, r3
  403218:	4b03      	ldr	r3, [pc, #12]	; (403228 <stdio_io_write+0x20>)
  40321a:	4798      	blx	r3
  40321c:	bd08      	pop	{r3, pc}
		return 0;
  40321e:	2000      	movs	r0, #0
}
  403220:	bd08      	pop	{r3, pc}
  403222:	bf00      	nop
  403224:	204004bc 	.word	0x204004bc
  403228:	00401b79 	.word	0x00401b79

0040322c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  40322c:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  40322e:	4c04      	ldr	r4, [pc, #16]	; (403240 <stdio_redirect_init+0x14>)
  403230:	4620      	mov	r0, r4
  403232:	4b04      	ldr	r3, [pc, #16]	; (403244 <stdio_redirect_init+0x18>)
  403234:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  403236:	4620      	mov	r0, r4
  403238:	4b03      	ldr	r3, [pc, #12]	; (403248 <stdio_redirect_init+0x1c>)
  40323a:	4798      	blx	r3
  40323c:	bd10      	pop	{r4, pc}
  40323e:	bf00      	nop
  403240:	20400708 	.word	0x20400708
  403244:	00401f2d 	.word	0x00401f2d
  403248:	004031b9 	.word	0x004031b9

0040324c <arm_mat_init_f32>:
  40324c:	8001      	strh	r1, [r0, #0]
  40324e:	8042      	strh	r2, [r0, #2]
  403250:	6043      	str	r3, [r0, #4]
  403252:	4770      	bx	lr

00403254 <__aeabi_drsub>:
  403254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403258:	e002      	b.n	403260 <__adddf3>
  40325a:	bf00      	nop

0040325c <__aeabi_dsub>:
  40325c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403260 <__adddf3>:
  403260:	b530      	push	{r4, r5, lr}
  403262:	ea4f 0441 	mov.w	r4, r1, lsl #1
  403266:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40326a:	ea94 0f05 	teq	r4, r5
  40326e:	bf08      	it	eq
  403270:	ea90 0f02 	teqeq	r0, r2
  403274:	bf1f      	itttt	ne
  403276:	ea54 0c00 	orrsne.w	ip, r4, r0
  40327a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40327e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403286:	f000 80e2 	beq.w	40344e <__adddf3+0x1ee>
  40328a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40328e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403292:	bfb8      	it	lt
  403294:	426d      	neglt	r5, r5
  403296:	dd0c      	ble.n	4032b2 <__adddf3+0x52>
  403298:	442c      	add	r4, r5
  40329a:	ea80 0202 	eor.w	r2, r0, r2
  40329e:	ea81 0303 	eor.w	r3, r1, r3
  4032a2:	ea82 0000 	eor.w	r0, r2, r0
  4032a6:	ea83 0101 	eor.w	r1, r3, r1
  4032aa:	ea80 0202 	eor.w	r2, r0, r2
  4032ae:	ea81 0303 	eor.w	r3, r1, r3
  4032b2:	2d36      	cmp	r5, #54	; 0x36
  4032b4:	bf88      	it	hi
  4032b6:	bd30      	pophi	{r4, r5, pc}
  4032b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4032bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4032c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4032c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4032c8:	d002      	beq.n	4032d0 <__adddf3+0x70>
  4032ca:	4240      	negs	r0, r0
  4032cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4032d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4032d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4032d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4032dc:	d002      	beq.n	4032e4 <__adddf3+0x84>
  4032de:	4252      	negs	r2, r2
  4032e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4032e4:	ea94 0f05 	teq	r4, r5
  4032e8:	f000 80a7 	beq.w	40343a <__adddf3+0x1da>
  4032ec:	f1a4 0401 	sub.w	r4, r4, #1
  4032f0:	f1d5 0e20 	rsbs	lr, r5, #32
  4032f4:	db0d      	blt.n	403312 <__adddf3+0xb2>
  4032f6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4032fa:	fa22 f205 	lsr.w	r2, r2, r5
  4032fe:	1880      	adds	r0, r0, r2
  403300:	f141 0100 	adc.w	r1, r1, #0
  403304:	fa03 f20e 	lsl.w	r2, r3, lr
  403308:	1880      	adds	r0, r0, r2
  40330a:	fa43 f305 	asr.w	r3, r3, r5
  40330e:	4159      	adcs	r1, r3
  403310:	e00e      	b.n	403330 <__adddf3+0xd0>
  403312:	f1a5 0520 	sub.w	r5, r5, #32
  403316:	f10e 0e20 	add.w	lr, lr, #32
  40331a:	2a01      	cmp	r2, #1
  40331c:	fa03 fc0e 	lsl.w	ip, r3, lr
  403320:	bf28      	it	cs
  403322:	f04c 0c02 	orrcs.w	ip, ip, #2
  403326:	fa43 f305 	asr.w	r3, r3, r5
  40332a:	18c0      	adds	r0, r0, r3
  40332c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403334:	d507      	bpl.n	403346 <__adddf3+0xe6>
  403336:	f04f 0e00 	mov.w	lr, #0
  40333a:	f1dc 0c00 	rsbs	ip, ip, #0
  40333e:	eb7e 0000 	sbcs.w	r0, lr, r0
  403342:	eb6e 0101 	sbc.w	r1, lr, r1
  403346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40334a:	d31b      	bcc.n	403384 <__adddf3+0x124>
  40334c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403350:	d30c      	bcc.n	40336c <__adddf3+0x10c>
  403352:	0849      	lsrs	r1, r1, #1
  403354:	ea5f 0030 	movs.w	r0, r0, rrx
  403358:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40335c:	f104 0401 	add.w	r4, r4, #1
  403360:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403368:	f080 809a 	bcs.w	4034a0 <__adddf3+0x240>
  40336c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403370:	bf08      	it	eq
  403372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403376:	f150 0000 	adcs.w	r0, r0, #0
  40337a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40337e:	ea41 0105 	orr.w	r1, r1, r5
  403382:	bd30      	pop	{r4, r5, pc}
  403384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403388:	4140      	adcs	r0, r0
  40338a:	eb41 0101 	adc.w	r1, r1, r1
  40338e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403392:	f1a4 0401 	sub.w	r4, r4, #1
  403396:	d1e9      	bne.n	40336c <__adddf3+0x10c>
  403398:	f091 0f00 	teq	r1, #0
  40339c:	bf04      	itt	eq
  40339e:	4601      	moveq	r1, r0
  4033a0:	2000      	moveq	r0, #0
  4033a2:	fab1 f381 	clz	r3, r1
  4033a6:	bf08      	it	eq
  4033a8:	3320      	addeq	r3, #32
  4033aa:	f1a3 030b 	sub.w	r3, r3, #11
  4033ae:	f1b3 0220 	subs.w	r2, r3, #32
  4033b2:	da0c      	bge.n	4033ce <__adddf3+0x16e>
  4033b4:	320c      	adds	r2, #12
  4033b6:	dd08      	ble.n	4033ca <__adddf3+0x16a>
  4033b8:	f102 0c14 	add.w	ip, r2, #20
  4033bc:	f1c2 020c 	rsb	r2, r2, #12
  4033c0:	fa01 f00c 	lsl.w	r0, r1, ip
  4033c4:	fa21 f102 	lsr.w	r1, r1, r2
  4033c8:	e00c      	b.n	4033e4 <__adddf3+0x184>
  4033ca:	f102 0214 	add.w	r2, r2, #20
  4033ce:	bfd8      	it	le
  4033d0:	f1c2 0c20 	rsble	ip, r2, #32
  4033d4:	fa01 f102 	lsl.w	r1, r1, r2
  4033d8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4033dc:	bfdc      	itt	le
  4033de:	ea41 010c 	orrle.w	r1, r1, ip
  4033e2:	4090      	lslle	r0, r2
  4033e4:	1ae4      	subs	r4, r4, r3
  4033e6:	bfa2      	ittt	ge
  4033e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4033ec:	4329      	orrge	r1, r5
  4033ee:	bd30      	popge	{r4, r5, pc}
  4033f0:	ea6f 0404 	mvn.w	r4, r4
  4033f4:	3c1f      	subs	r4, #31
  4033f6:	da1c      	bge.n	403432 <__adddf3+0x1d2>
  4033f8:	340c      	adds	r4, #12
  4033fa:	dc0e      	bgt.n	40341a <__adddf3+0x1ba>
  4033fc:	f104 0414 	add.w	r4, r4, #20
  403400:	f1c4 0220 	rsb	r2, r4, #32
  403404:	fa20 f004 	lsr.w	r0, r0, r4
  403408:	fa01 f302 	lsl.w	r3, r1, r2
  40340c:	ea40 0003 	orr.w	r0, r0, r3
  403410:	fa21 f304 	lsr.w	r3, r1, r4
  403414:	ea45 0103 	orr.w	r1, r5, r3
  403418:	bd30      	pop	{r4, r5, pc}
  40341a:	f1c4 040c 	rsb	r4, r4, #12
  40341e:	f1c4 0220 	rsb	r2, r4, #32
  403422:	fa20 f002 	lsr.w	r0, r0, r2
  403426:	fa01 f304 	lsl.w	r3, r1, r4
  40342a:	ea40 0003 	orr.w	r0, r0, r3
  40342e:	4629      	mov	r1, r5
  403430:	bd30      	pop	{r4, r5, pc}
  403432:	fa21 f004 	lsr.w	r0, r1, r4
  403436:	4629      	mov	r1, r5
  403438:	bd30      	pop	{r4, r5, pc}
  40343a:	f094 0f00 	teq	r4, #0
  40343e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403442:	bf06      	itte	eq
  403444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403448:	3401      	addeq	r4, #1
  40344a:	3d01      	subne	r5, #1
  40344c:	e74e      	b.n	4032ec <__adddf3+0x8c>
  40344e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403452:	bf18      	it	ne
  403454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403458:	d029      	beq.n	4034ae <__adddf3+0x24e>
  40345a:	ea94 0f05 	teq	r4, r5
  40345e:	bf08      	it	eq
  403460:	ea90 0f02 	teqeq	r0, r2
  403464:	d005      	beq.n	403472 <__adddf3+0x212>
  403466:	ea54 0c00 	orrs.w	ip, r4, r0
  40346a:	bf04      	itt	eq
  40346c:	4619      	moveq	r1, r3
  40346e:	4610      	moveq	r0, r2
  403470:	bd30      	pop	{r4, r5, pc}
  403472:	ea91 0f03 	teq	r1, r3
  403476:	bf1e      	ittt	ne
  403478:	2100      	movne	r1, #0
  40347a:	2000      	movne	r0, #0
  40347c:	bd30      	popne	{r4, r5, pc}
  40347e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403482:	d105      	bne.n	403490 <__adddf3+0x230>
  403484:	0040      	lsls	r0, r0, #1
  403486:	4149      	adcs	r1, r1
  403488:	bf28      	it	cs
  40348a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40348e:	bd30      	pop	{r4, r5, pc}
  403490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403494:	bf3c      	itt	cc
  403496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40349a:	bd30      	popcc	{r4, r5, pc}
  40349c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4034a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4034a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4034a8:	f04f 0000 	mov.w	r0, #0
  4034ac:	bd30      	pop	{r4, r5, pc}
  4034ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4034b2:	bf1a      	itte	ne
  4034b4:	4619      	movne	r1, r3
  4034b6:	4610      	movne	r0, r2
  4034b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4034bc:	bf1c      	itt	ne
  4034be:	460b      	movne	r3, r1
  4034c0:	4602      	movne	r2, r0
  4034c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4034c6:	bf06      	itte	eq
  4034c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4034cc:	ea91 0f03 	teqeq	r1, r3
  4034d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4034d4:	bd30      	pop	{r4, r5, pc}
  4034d6:	bf00      	nop

004034d8 <__aeabi_ui2d>:
  4034d8:	f090 0f00 	teq	r0, #0
  4034dc:	bf04      	itt	eq
  4034de:	2100      	moveq	r1, #0
  4034e0:	4770      	bxeq	lr
  4034e2:	b530      	push	{r4, r5, lr}
  4034e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4034e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4034ec:	f04f 0500 	mov.w	r5, #0
  4034f0:	f04f 0100 	mov.w	r1, #0
  4034f4:	e750      	b.n	403398 <__adddf3+0x138>
  4034f6:	bf00      	nop

004034f8 <__aeabi_i2d>:
  4034f8:	f090 0f00 	teq	r0, #0
  4034fc:	bf04      	itt	eq
  4034fe:	2100      	moveq	r1, #0
  403500:	4770      	bxeq	lr
  403502:	b530      	push	{r4, r5, lr}
  403504:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403508:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40350c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403510:	bf48      	it	mi
  403512:	4240      	negmi	r0, r0
  403514:	f04f 0100 	mov.w	r1, #0
  403518:	e73e      	b.n	403398 <__adddf3+0x138>
  40351a:	bf00      	nop

0040351c <__aeabi_f2d>:
  40351c:	0042      	lsls	r2, r0, #1
  40351e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403522:	ea4f 0131 	mov.w	r1, r1, rrx
  403526:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40352a:	bf1f      	itttt	ne
  40352c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403538:	4770      	bxne	lr
  40353a:	f092 0f00 	teq	r2, #0
  40353e:	bf14      	ite	ne
  403540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403544:	4770      	bxeq	lr
  403546:	b530      	push	{r4, r5, lr}
  403548:	f44f 7460 	mov.w	r4, #896	; 0x380
  40354c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403554:	e720      	b.n	403398 <__adddf3+0x138>
  403556:	bf00      	nop

00403558 <__aeabi_ul2d>:
  403558:	ea50 0201 	orrs.w	r2, r0, r1
  40355c:	bf08      	it	eq
  40355e:	4770      	bxeq	lr
  403560:	b530      	push	{r4, r5, lr}
  403562:	f04f 0500 	mov.w	r5, #0
  403566:	e00a      	b.n	40357e <__aeabi_l2d+0x16>

00403568 <__aeabi_l2d>:
  403568:	ea50 0201 	orrs.w	r2, r0, r1
  40356c:	bf08      	it	eq
  40356e:	4770      	bxeq	lr
  403570:	b530      	push	{r4, r5, lr}
  403572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403576:	d502      	bpl.n	40357e <__aeabi_l2d+0x16>
  403578:	4240      	negs	r0, r0
  40357a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40357e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403582:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40358a:	f43f aedc 	beq.w	403346 <__adddf3+0xe6>
  40358e:	f04f 0203 	mov.w	r2, #3
  403592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403596:	bf18      	it	ne
  403598:	3203      	addne	r2, #3
  40359a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40359e:	bf18      	it	ne
  4035a0:	3203      	addne	r2, #3
  4035a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4035a6:	f1c2 0320 	rsb	r3, r2, #32
  4035aa:	fa00 fc03 	lsl.w	ip, r0, r3
  4035ae:	fa20 f002 	lsr.w	r0, r0, r2
  4035b2:	fa01 fe03 	lsl.w	lr, r1, r3
  4035b6:	ea40 000e 	orr.w	r0, r0, lr
  4035ba:	fa21 f102 	lsr.w	r1, r1, r2
  4035be:	4414      	add	r4, r2
  4035c0:	e6c1      	b.n	403346 <__adddf3+0xe6>
  4035c2:	bf00      	nop

004035c4 <__aeabi_dmul>:
  4035c4:	b570      	push	{r4, r5, r6, lr}
  4035c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4035ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4035ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4035d2:	bf1d      	ittte	ne
  4035d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4035d8:	ea94 0f0c 	teqne	r4, ip
  4035dc:	ea95 0f0c 	teqne	r5, ip
  4035e0:	f000 f8de 	bleq	4037a0 <__aeabi_dmul+0x1dc>
  4035e4:	442c      	add	r4, r5
  4035e6:	ea81 0603 	eor.w	r6, r1, r3
  4035ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4035ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4035f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4035f6:	bf18      	it	ne
  4035f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4035fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403604:	d038      	beq.n	403678 <__aeabi_dmul+0xb4>
  403606:	fba0 ce02 	umull	ip, lr, r0, r2
  40360a:	f04f 0500 	mov.w	r5, #0
  40360e:	fbe1 e502 	umlal	lr, r5, r1, r2
  403612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403616:	fbe0 e503 	umlal	lr, r5, r0, r3
  40361a:	f04f 0600 	mov.w	r6, #0
  40361e:	fbe1 5603 	umlal	r5, r6, r1, r3
  403622:	f09c 0f00 	teq	ip, #0
  403626:	bf18      	it	ne
  403628:	f04e 0e01 	orrne.w	lr, lr, #1
  40362c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403638:	d204      	bcs.n	403644 <__aeabi_dmul+0x80>
  40363a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40363e:	416d      	adcs	r5, r5
  403640:	eb46 0606 	adc.w	r6, r6, r6
  403644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40364c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40365c:	bf88      	it	hi
  40365e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403662:	d81e      	bhi.n	4036a2 <__aeabi_dmul+0xde>
  403664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403668:	bf08      	it	eq
  40366a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40366e:	f150 0000 	adcs.w	r0, r0, #0
  403672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403676:	bd70      	pop	{r4, r5, r6, pc}
  403678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40367c:	ea46 0101 	orr.w	r1, r6, r1
  403680:	ea40 0002 	orr.w	r0, r0, r2
  403684:	ea81 0103 	eor.w	r1, r1, r3
  403688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40368c:	bfc2      	ittt	gt
  40368e:	ebd4 050c 	rsbsgt	r5, r4, ip
  403692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403696:	bd70      	popgt	{r4, r5, r6, pc}
  403698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40369c:	f04f 0e00 	mov.w	lr, #0
  4036a0:	3c01      	subs	r4, #1
  4036a2:	f300 80ab 	bgt.w	4037fc <__aeabi_dmul+0x238>
  4036a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4036aa:	bfde      	ittt	le
  4036ac:	2000      	movle	r0, #0
  4036ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4036b2:	bd70      	pople	{r4, r5, r6, pc}
  4036b4:	f1c4 0400 	rsb	r4, r4, #0
  4036b8:	3c20      	subs	r4, #32
  4036ba:	da35      	bge.n	403728 <__aeabi_dmul+0x164>
  4036bc:	340c      	adds	r4, #12
  4036be:	dc1b      	bgt.n	4036f8 <__aeabi_dmul+0x134>
  4036c0:	f104 0414 	add.w	r4, r4, #20
  4036c4:	f1c4 0520 	rsb	r5, r4, #32
  4036c8:	fa00 f305 	lsl.w	r3, r0, r5
  4036cc:	fa20 f004 	lsr.w	r0, r0, r4
  4036d0:	fa01 f205 	lsl.w	r2, r1, r5
  4036d4:	ea40 0002 	orr.w	r0, r0, r2
  4036d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4036dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4036e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4036e4:	fa21 f604 	lsr.w	r6, r1, r4
  4036e8:	eb42 0106 	adc.w	r1, r2, r6
  4036ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4036f0:	bf08      	it	eq
  4036f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4036f6:	bd70      	pop	{r4, r5, r6, pc}
  4036f8:	f1c4 040c 	rsb	r4, r4, #12
  4036fc:	f1c4 0520 	rsb	r5, r4, #32
  403700:	fa00 f304 	lsl.w	r3, r0, r4
  403704:	fa20 f005 	lsr.w	r0, r0, r5
  403708:	fa01 f204 	lsl.w	r2, r1, r4
  40370c:	ea40 0002 	orr.w	r0, r0, r2
  403710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403718:	f141 0100 	adc.w	r1, r1, #0
  40371c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403720:	bf08      	it	eq
  403722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403726:	bd70      	pop	{r4, r5, r6, pc}
  403728:	f1c4 0520 	rsb	r5, r4, #32
  40372c:	fa00 f205 	lsl.w	r2, r0, r5
  403730:	ea4e 0e02 	orr.w	lr, lr, r2
  403734:	fa20 f304 	lsr.w	r3, r0, r4
  403738:	fa01 f205 	lsl.w	r2, r1, r5
  40373c:	ea43 0302 	orr.w	r3, r3, r2
  403740:	fa21 f004 	lsr.w	r0, r1, r4
  403744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403748:	fa21 f204 	lsr.w	r2, r1, r4
  40374c:	ea20 0002 	bic.w	r0, r0, r2
  403750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403758:	bf08      	it	eq
  40375a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40375e:	bd70      	pop	{r4, r5, r6, pc}
  403760:	f094 0f00 	teq	r4, #0
  403764:	d10f      	bne.n	403786 <__aeabi_dmul+0x1c2>
  403766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40376a:	0040      	lsls	r0, r0, #1
  40376c:	eb41 0101 	adc.w	r1, r1, r1
  403770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403774:	bf08      	it	eq
  403776:	3c01      	subeq	r4, #1
  403778:	d0f7      	beq.n	40376a <__aeabi_dmul+0x1a6>
  40377a:	ea41 0106 	orr.w	r1, r1, r6
  40377e:	f095 0f00 	teq	r5, #0
  403782:	bf18      	it	ne
  403784:	4770      	bxne	lr
  403786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40378a:	0052      	lsls	r2, r2, #1
  40378c:	eb43 0303 	adc.w	r3, r3, r3
  403790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403794:	bf08      	it	eq
  403796:	3d01      	subeq	r5, #1
  403798:	d0f7      	beq.n	40378a <__aeabi_dmul+0x1c6>
  40379a:	ea43 0306 	orr.w	r3, r3, r6
  40379e:	4770      	bx	lr
  4037a0:	ea94 0f0c 	teq	r4, ip
  4037a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4037a8:	bf18      	it	ne
  4037aa:	ea95 0f0c 	teqne	r5, ip
  4037ae:	d00c      	beq.n	4037ca <__aeabi_dmul+0x206>
  4037b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4037b4:	bf18      	it	ne
  4037b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4037ba:	d1d1      	bne.n	403760 <__aeabi_dmul+0x19c>
  4037bc:	ea81 0103 	eor.w	r1, r1, r3
  4037c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4037c4:	f04f 0000 	mov.w	r0, #0
  4037c8:	bd70      	pop	{r4, r5, r6, pc}
  4037ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4037ce:	bf06      	itte	eq
  4037d0:	4610      	moveq	r0, r2
  4037d2:	4619      	moveq	r1, r3
  4037d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4037d8:	d019      	beq.n	40380e <__aeabi_dmul+0x24a>
  4037da:	ea94 0f0c 	teq	r4, ip
  4037de:	d102      	bne.n	4037e6 <__aeabi_dmul+0x222>
  4037e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4037e4:	d113      	bne.n	40380e <__aeabi_dmul+0x24a>
  4037e6:	ea95 0f0c 	teq	r5, ip
  4037ea:	d105      	bne.n	4037f8 <__aeabi_dmul+0x234>
  4037ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4037f0:	bf1c      	itt	ne
  4037f2:	4610      	movne	r0, r2
  4037f4:	4619      	movne	r1, r3
  4037f6:	d10a      	bne.n	40380e <__aeabi_dmul+0x24a>
  4037f8:	ea81 0103 	eor.w	r1, r1, r3
  4037fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403808:	f04f 0000 	mov.w	r0, #0
  40380c:	bd70      	pop	{r4, r5, r6, pc}
  40380e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403816:	bd70      	pop	{r4, r5, r6, pc}

00403818 <__aeabi_ddiv>:
  403818:	b570      	push	{r4, r5, r6, lr}
  40381a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40381e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403826:	bf1d      	ittte	ne
  403828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40382c:	ea94 0f0c 	teqne	r4, ip
  403830:	ea95 0f0c 	teqne	r5, ip
  403834:	f000 f8a7 	bleq	403986 <__aeabi_ddiv+0x16e>
  403838:	eba4 0405 	sub.w	r4, r4, r5
  40383c:	ea81 0e03 	eor.w	lr, r1, r3
  403840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403844:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403848:	f000 8088 	beq.w	40395c <__aeabi_ddiv+0x144>
  40384c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40385c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403868:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40386c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403870:	429d      	cmp	r5, r3
  403872:	bf08      	it	eq
  403874:	4296      	cmpeq	r6, r2
  403876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40387a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40387e:	d202      	bcs.n	403886 <__aeabi_ddiv+0x6e>
  403880:	085b      	lsrs	r3, r3, #1
  403882:	ea4f 0232 	mov.w	r2, r2, rrx
  403886:	1ab6      	subs	r6, r6, r2
  403888:	eb65 0503 	sbc.w	r5, r5, r3
  40388c:	085b      	lsrs	r3, r3, #1
  40388e:	ea4f 0232 	mov.w	r2, r2, rrx
  403892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40389a:	ebb6 0e02 	subs.w	lr, r6, r2
  40389e:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038a2:	bf22      	ittt	cs
  4038a4:	1ab6      	subcs	r6, r6, r2
  4038a6:	4675      	movcs	r5, lr
  4038a8:	ea40 000c 	orrcs.w	r0, r0, ip
  4038ac:	085b      	lsrs	r3, r3, #1
  4038ae:	ea4f 0232 	mov.w	r2, r2, rrx
  4038b2:	ebb6 0e02 	subs.w	lr, r6, r2
  4038b6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038ba:	bf22      	ittt	cs
  4038bc:	1ab6      	subcs	r6, r6, r2
  4038be:	4675      	movcs	r5, lr
  4038c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4038c4:	085b      	lsrs	r3, r3, #1
  4038c6:	ea4f 0232 	mov.w	r2, r2, rrx
  4038ca:	ebb6 0e02 	subs.w	lr, r6, r2
  4038ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038d2:	bf22      	ittt	cs
  4038d4:	1ab6      	subcs	r6, r6, r2
  4038d6:	4675      	movcs	r5, lr
  4038d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4038dc:	085b      	lsrs	r3, r3, #1
  4038de:	ea4f 0232 	mov.w	r2, r2, rrx
  4038e2:	ebb6 0e02 	subs.w	lr, r6, r2
  4038e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4038ea:	bf22      	ittt	cs
  4038ec:	1ab6      	subcs	r6, r6, r2
  4038ee:	4675      	movcs	r5, lr
  4038f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4038f4:	ea55 0e06 	orrs.w	lr, r5, r6
  4038f8:	d018      	beq.n	40392c <__aeabi_ddiv+0x114>
  4038fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4038fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403902:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40390a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40390e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403916:	d1c0      	bne.n	40389a <__aeabi_ddiv+0x82>
  403918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40391c:	d10b      	bne.n	403936 <__aeabi_ddiv+0x11e>
  40391e:	ea41 0100 	orr.w	r1, r1, r0
  403922:	f04f 0000 	mov.w	r0, #0
  403926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40392a:	e7b6      	b.n	40389a <__aeabi_ddiv+0x82>
  40392c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403930:	bf04      	itt	eq
  403932:	4301      	orreq	r1, r0
  403934:	2000      	moveq	r0, #0
  403936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40393a:	bf88      	it	hi
  40393c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403940:	f63f aeaf 	bhi.w	4036a2 <__aeabi_dmul+0xde>
  403944:	ebb5 0c03 	subs.w	ip, r5, r3
  403948:	bf04      	itt	eq
  40394a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40394e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403952:	f150 0000 	adcs.w	r0, r0, #0
  403956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40395a:	bd70      	pop	{r4, r5, r6, pc}
  40395c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403968:	bfc2      	ittt	gt
  40396a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40396e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403972:	bd70      	popgt	{r4, r5, r6, pc}
  403974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403978:	f04f 0e00 	mov.w	lr, #0
  40397c:	3c01      	subs	r4, #1
  40397e:	e690      	b.n	4036a2 <__aeabi_dmul+0xde>
  403980:	ea45 0e06 	orr.w	lr, r5, r6
  403984:	e68d      	b.n	4036a2 <__aeabi_dmul+0xde>
  403986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40398a:	ea94 0f0c 	teq	r4, ip
  40398e:	bf08      	it	eq
  403990:	ea95 0f0c 	teqeq	r5, ip
  403994:	f43f af3b 	beq.w	40380e <__aeabi_dmul+0x24a>
  403998:	ea94 0f0c 	teq	r4, ip
  40399c:	d10a      	bne.n	4039b4 <__aeabi_ddiv+0x19c>
  40399e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4039a2:	f47f af34 	bne.w	40380e <__aeabi_dmul+0x24a>
  4039a6:	ea95 0f0c 	teq	r5, ip
  4039aa:	f47f af25 	bne.w	4037f8 <__aeabi_dmul+0x234>
  4039ae:	4610      	mov	r0, r2
  4039b0:	4619      	mov	r1, r3
  4039b2:	e72c      	b.n	40380e <__aeabi_dmul+0x24a>
  4039b4:	ea95 0f0c 	teq	r5, ip
  4039b8:	d106      	bne.n	4039c8 <__aeabi_ddiv+0x1b0>
  4039ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4039be:	f43f aefd 	beq.w	4037bc <__aeabi_dmul+0x1f8>
  4039c2:	4610      	mov	r0, r2
  4039c4:	4619      	mov	r1, r3
  4039c6:	e722      	b.n	40380e <__aeabi_dmul+0x24a>
  4039c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4039cc:	bf18      	it	ne
  4039ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4039d2:	f47f aec5 	bne.w	403760 <__aeabi_dmul+0x19c>
  4039d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4039da:	f47f af0d 	bne.w	4037f8 <__aeabi_dmul+0x234>
  4039de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4039e2:	f47f aeeb 	bne.w	4037bc <__aeabi_dmul+0x1f8>
  4039e6:	e712      	b.n	40380e <__aeabi_dmul+0x24a>

004039e8 <__gedf2>:
  4039e8:	f04f 3cff 	mov.w	ip, #4294967295
  4039ec:	e006      	b.n	4039fc <__cmpdf2+0x4>
  4039ee:	bf00      	nop

004039f0 <__ledf2>:
  4039f0:	f04f 0c01 	mov.w	ip, #1
  4039f4:	e002      	b.n	4039fc <__cmpdf2+0x4>
  4039f6:	bf00      	nop

004039f8 <__cmpdf2>:
  4039f8:	f04f 0c01 	mov.w	ip, #1
  4039fc:	f84d cd04 	str.w	ip, [sp, #-4]!
  403a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403a0c:	bf18      	it	ne
  403a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  403a12:	d01b      	beq.n	403a4c <__cmpdf2+0x54>
  403a14:	b001      	add	sp, #4
  403a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403a1a:	bf0c      	ite	eq
  403a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403a20:	ea91 0f03 	teqne	r1, r3
  403a24:	bf02      	ittt	eq
  403a26:	ea90 0f02 	teqeq	r0, r2
  403a2a:	2000      	moveq	r0, #0
  403a2c:	4770      	bxeq	lr
  403a2e:	f110 0f00 	cmn.w	r0, #0
  403a32:	ea91 0f03 	teq	r1, r3
  403a36:	bf58      	it	pl
  403a38:	4299      	cmppl	r1, r3
  403a3a:	bf08      	it	eq
  403a3c:	4290      	cmpeq	r0, r2
  403a3e:	bf2c      	ite	cs
  403a40:	17d8      	asrcs	r0, r3, #31
  403a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  403a46:	f040 0001 	orr.w	r0, r0, #1
  403a4a:	4770      	bx	lr
  403a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403a54:	d102      	bne.n	403a5c <__cmpdf2+0x64>
  403a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  403a5a:	d107      	bne.n	403a6c <__cmpdf2+0x74>
  403a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403a64:	d1d6      	bne.n	403a14 <__cmpdf2+0x1c>
  403a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403a6a:	d0d3      	beq.n	403a14 <__cmpdf2+0x1c>
  403a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
  403a70:	4770      	bx	lr
  403a72:	bf00      	nop

00403a74 <__aeabi_cdrcmple>:
  403a74:	4684      	mov	ip, r0
  403a76:	4610      	mov	r0, r2
  403a78:	4662      	mov	r2, ip
  403a7a:	468c      	mov	ip, r1
  403a7c:	4619      	mov	r1, r3
  403a7e:	4663      	mov	r3, ip
  403a80:	e000      	b.n	403a84 <__aeabi_cdcmpeq>
  403a82:	bf00      	nop

00403a84 <__aeabi_cdcmpeq>:
  403a84:	b501      	push	{r0, lr}
  403a86:	f7ff ffb7 	bl	4039f8 <__cmpdf2>
  403a8a:	2800      	cmp	r0, #0
  403a8c:	bf48      	it	mi
  403a8e:	f110 0f00 	cmnmi.w	r0, #0
  403a92:	bd01      	pop	{r0, pc}

00403a94 <__aeabi_dcmpeq>:
  403a94:	f84d ed08 	str.w	lr, [sp, #-8]!
  403a98:	f7ff fff4 	bl	403a84 <__aeabi_cdcmpeq>
  403a9c:	bf0c      	ite	eq
  403a9e:	2001      	moveq	r0, #1
  403aa0:	2000      	movne	r0, #0
  403aa2:	f85d fb08 	ldr.w	pc, [sp], #8
  403aa6:	bf00      	nop

00403aa8 <__aeabi_dcmplt>:
  403aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
  403aac:	f7ff ffea 	bl	403a84 <__aeabi_cdcmpeq>
  403ab0:	bf34      	ite	cc
  403ab2:	2001      	movcc	r0, #1
  403ab4:	2000      	movcs	r0, #0
  403ab6:	f85d fb08 	ldr.w	pc, [sp], #8
  403aba:	bf00      	nop

00403abc <__aeabi_dcmple>:
  403abc:	f84d ed08 	str.w	lr, [sp, #-8]!
  403ac0:	f7ff ffe0 	bl	403a84 <__aeabi_cdcmpeq>
  403ac4:	bf94      	ite	ls
  403ac6:	2001      	movls	r0, #1
  403ac8:	2000      	movhi	r0, #0
  403aca:	f85d fb08 	ldr.w	pc, [sp], #8
  403ace:	bf00      	nop

00403ad0 <__aeabi_dcmpge>:
  403ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
  403ad4:	f7ff ffce 	bl	403a74 <__aeabi_cdrcmple>
  403ad8:	bf94      	ite	ls
  403ada:	2001      	movls	r0, #1
  403adc:	2000      	movhi	r0, #0
  403ade:	f85d fb08 	ldr.w	pc, [sp], #8
  403ae2:	bf00      	nop

00403ae4 <__aeabi_dcmpgt>:
  403ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
  403ae8:	f7ff ffc4 	bl	403a74 <__aeabi_cdrcmple>
  403aec:	bf34      	ite	cc
  403aee:	2001      	movcc	r0, #1
  403af0:	2000      	movcs	r0, #0
  403af2:	f85d fb08 	ldr.w	pc, [sp], #8
  403af6:	bf00      	nop

00403af8 <__aeabi_dcmpun>:
  403af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403b00:	d102      	bne.n	403b08 <__aeabi_dcmpun+0x10>
  403b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  403b06:	d10a      	bne.n	403b1e <__aeabi_dcmpun+0x26>
  403b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403b10:	d102      	bne.n	403b18 <__aeabi_dcmpun+0x20>
  403b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403b16:	d102      	bne.n	403b1e <__aeabi_dcmpun+0x26>
  403b18:	f04f 0000 	mov.w	r0, #0
  403b1c:	4770      	bx	lr
  403b1e:	f04f 0001 	mov.w	r0, #1
  403b22:	4770      	bx	lr

00403b24 <__aeabi_d2iz>:
  403b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403b2c:	d215      	bcs.n	403b5a <__aeabi_d2iz+0x36>
  403b2e:	d511      	bpl.n	403b54 <__aeabi_d2iz+0x30>
  403b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403b38:	d912      	bls.n	403b60 <__aeabi_d2iz+0x3c>
  403b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403b4a:	fa23 f002 	lsr.w	r0, r3, r2
  403b4e:	bf18      	it	ne
  403b50:	4240      	negne	r0, r0
  403b52:	4770      	bx	lr
  403b54:	f04f 0000 	mov.w	r0, #0
  403b58:	4770      	bx	lr
  403b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403b5e:	d105      	bne.n	403b6c <__aeabi_d2iz+0x48>
  403b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  403b64:	bf08      	it	eq
  403b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  403b6a:	4770      	bx	lr
  403b6c:	f04f 0000 	mov.w	r0, #0
  403b70:	4770      	bx	lr
  403b72:	bf00      	nop

00403b74 <__aeabi_d2f>:
  403b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403b78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  403b7c:	bf24      	itt	cs
  403b7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  403b82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  403b86:	d90d      	bls.n	403ba4 <__aeabi_d2f+0x30>
  403b88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403b8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  403b90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  403b94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  403b98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  403b9c:	bf08      	it	eq
  403b9e:	f020 0001 	biceq.w	r0, r0, #1
  403ba2:	4770      	bx	lr
  403ba4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  403ba8:	d121      	bne.n	403bee <__aeabi_d2f+0x7a>
  403baa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  403bae:	bfbc      	itt	lt
  403bb0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  403bb4:	4770      	bxlt	lr
  403bb6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403bba:	ea4f 5252 	mov.w	r2, r2, lsr #21
  403bbe:	f1c2 0218 	rsb	r2, r2, #24
  403bc2:	f1c2 0c20 	rsb	ip, r2, #32
  403bc6:	fa10 f30c 	lsls.w	r3, r0, ip
  403bca:	fa20 f002 	lsr.w	r0, r0, r2
  403bce:	bf18      	it	ne
  403bd0:	f040 0001 	orrne.w	r0, r0, #1
  403bd4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403bd8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  403bdc:	fa03 fc0c 	lsl.w	ip, r3, ip
  403be0:	ea40 000c 	orr.w	r0, r0, ip
  403be4:	fa23 f302 	lsr.w	r3, r3, r2
  403be8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  403bec:	e7cc      	b.n	403b88 <__aeabi_d2f+0x14>
  403bee:	ea7f 5362 	mvns.w	r3, r2, asr #21
  403bf2:	d107      	bne.n	403c04 <__aeabi_d2f+0x90>
  403bf4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  403bf8:	bf1e      	ittt	ne
  403bfa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  403bfe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  403c02:	4770      	bxne	lr
  403c04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  403c08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403c0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403c10:	4770      	bx	lr
  403c12:	bf00      	nop

00403c14 <__libc_init_array>:
  403c14:	b570      	push	{r4, r5, r6, lr}
  403c16:	4e0d      	ldr	r6, [pc, #52]	; (403c4c <__libc_init_array+0x38>)
  403c18:	4c0d      	ldr	r4, [pc, #52]	; (403c50 <__libc_init_array+0x3c>)
  403c1a:	1ba4      	subs	r4, r4, r6
  403c1c:	10a4      	asrs	r4, r4, #2
  403c1e:	2500      	movs	r5, #0
  403c20:	42a5      	cmp	r5, r4
  403c22:	d109      	bne.n	403c38 <__libc_init_array+0x24>
  403c24:	4e0b      	ldr	r6, [pc, #44]	; (403c54 <__libc_init_array+0x40>)
  403c26:	4c0c      	ldr	r4, [pc, #48]	; (403c58 <__libc_init_array+0x44>)
  403c28:	f003 f8f6 	bl	406e18 <_init>
  403c2c:	1ba4      	subs	r4, r4, r6
  403c2e:	10a4      	asrs	r4, r4, #2
  403c30:	2500      	movs	r5, #0
  403c32:	42a5      	cmp	r5, r4
  403c34:	d105      	bne.n	403c42 <__libc_init_array+0x2e>
  403c36:	bd70      	pop	{r4, r5, r6, pc}
  403c38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  403c3c:	4798      	blx	r3
  403c3e:	3501      	adds	r5, #1
  403c40:	e7ee      	b.n	403c20 <__libc_init_array+0xc>
  403c42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  403c46:	4798      	blx	r3
  403c48:	3501      	adds	r5, #1
  403c4a:	e7f2      	b.n	403c32 <__libc_init_array+0x1e>
  403c4c:	00406e24 	.word	0x00406e24
  403c50:	00406e24 	.word	0x00406e24
  403c54:	00406e24 	.word	0x00406e24
  403c58:	00406e28 	.word	0x00406e28

00403c5c <memcpy>:
  403c5c:	b510      	push	{r4, lr}
  403c5e:	1e43      	subs	r3, r0, #1
  403c60:	440a      	add	r2, r1
  403c62:	4291      	cmp	r1, r2
  403c64:	d100      	bne.n	403c68 <memcpy+0xc>
  403c66:	bd10      	pop	{r4, pc}
  403c68:	f811 4b01 	ldrb.w	r4, [r1], #1
  403c6c:	f803 4f01 	strb.w	r4, [r3, #1]!
  403c70:	e7f7      	b.n	403c62 <memcpy+0x6>

00403c72 <memset>:
  403c72:	4402      	add	r2, r0
  403c74:	4603      	mov	r3, r0
  403c76:	4293      	cmp	r3, r2
  403c78:	d100      	bne.n	403c7c <memset+0xa>
  403c7a:	4770      	bx	lr
  403c7c:	f803 1b01 	strb.w	r1, [r3], #1
  403c80:	e7f9      	b.n	403c76 <memset+0x4>

00403c82 <__cvt>:
  403c82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c86:	b088      	sub	sp, #32
  403c88:	2b00      	cmp	r3, #0
  403c8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
  403c8c:	9912      	ldr	r1, [sp, #72]	; 0x48
  403c8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403c90:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  403c94:	461e      	mov	r6, r3
  403c96:	f027 0720 	bic.w	r7, r7, #32
  403c9a:	bfbb      	ittet	lt
  403c9c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  403ca0:	461e      	movlt	r6, r3
  403ca2:	2300      	movge	r3, #0
  403ca4:	232d      	movlt	r3, #45	; 0x2d
  403ca6:	2f46      	cmp	r7, #70	; 0x46
  403ca8:	4614      	mov	r4, r2
  403caa:	700b      	strb	r3, [r1, #0]
  403cac:	d004      	beq.n	403cb8 <__cvt+0x36>
  403cae:	2f45      	cmp	r7, #69	; 0x45
  403cb0:	d100      	bne.n	403cb4 <__cvt+0x32>
  403cb2:	3501      	adds	r5, #1
  403cb4:	2302      	movs	r3, #2
  403cb6:	e000      	b.n	403cba <__cvt+0x38>
  403cb8:	2303      	movs	r3, #3
  403cba:	aa07      	add	r2, sp, #28
  403cbc:	9204      	str	r2, [sp, #16]
  403cbe:	aa06      	add	r2, sp, #24
  403cc0:	9203      	str	r2, [sp, #12]
  403cc2:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  403cc6:	4622      	mov	r2, r4
  403cc8:	4633      	mov	r3, r6
  403cca:	f000 fd9d 	bl	404808 <_dtoa_r>
  403cce:	2f47      	cmp	r7, #71	; 0x47
  403cd0:	4680      	mov	r8, r0
  403cd2:	d102      	bne.n	403cda <__cvt+0x58>
  403cd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403cd6:	07db      	lsls	r3, r3, #31
  403cd8:	d526      	bpl.n	403d28 <__cvt+0xa6>
  403cda:	2f46      	cmp	r7, #70	; 0x46
  403cdc:	eb08 0905 	add.w	r9, r8, r5
  403ce0:	d111      	bne.n	403d06 <__cvt+0x84>
  403ce2:	f898 3000 	ldrb.w	r3, [r8]
  403ce6:	2b30      	cmp	r3, #48	; 0x30
  403ce8:	d10a      	bne.n	403d00 <__cvt+0x7e>
  403cea:	2200      	movs	r2, #0
  403cec:	2300      	movs	r3, #0
  403cee:	4620      	mov	r0, r4
  403cf0:	4631      	mov	r1, r6
  403cf2:	f7ff fecf 	bl	403a94 <__aeabi_dcmpeq>
  403cf6:	b918      	cbnz	r0, 403d00 <__cvt+0x7e>
  403cf8:	f1c5 0501 	rsb	r5, r5, #1
  403cfc:	f8ca 5000 	str.w	r5, [sl]
  403d00:	f8da 3000 	ldr.w	r3, [sl]
  403d04:	4499      	add	r9, r3
  403d06:	2200      	movs	r2, #0
  403d08:	2300      	movs	r3, #0
  403d0a:	4620      	mov	r0, r4
  403d0c:	4631      	mov	r1, r6
  403d0e:	f7ff fec1 	bl	403a94 <__aeabi_dcmpeq>
  403d12:	b938      	cbnz	r0, 403d24 <__cvt+0xa2>
  403d14:	2230      	movs	r2, #48	; 0x30
  403d16:	9b07      	ldr	r3, [sp, #28]
  403d18:	4599      	cmp	r9, r3
  403d1a:	d905      	bls.n	403d28 <__cvt+0xa6>
  403d1c:	1c59      	adds	r1, r3, #1
  403d1e:	9107      	str	r1, [sp, #28]
  403d20:	701a      	strb	r2, [r3, #0]
  403d22:	e7f8      	b.n	403d16 <__cvt+0x94>
  403d24:	f8cd 901c 	str.w	r9, [sp, #28]
  403d28:	9b07      	ldr	r3, [sp, #28]
  403d2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403d2c:	eba3 0308 	sub.w	r3, r3, r8
  403d30:	4640      	mov	r0, r8
  403d32:	6013      	str	r3, [r2, #0]
  403d34:	b008      	add	sp, #32
  403d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403d3a <__exponent>:
  403d3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  403d3c:	4603      	mov	r3, r0
  403d3e:	2900      	cmp	r1, #0
  403d40:	bfb8      	it	lt
  403d42:	4249      	neglt	r1, r1
  403d44:	f803 2b02 	strb.w	r2, [r3], #2
  403d48:	bfb4      	ite	lt
  403d4a:	222d      	movlt	r2, #45	; 0x2d
  403d4c:	222b      	movge	r2, #43	; 0x2b
  403d4e:	2909      	cmp	r1, #9
  403d50:	7042      	strb	r2, [r0, #1]
  403d52:	dd20      	ble.n	403d96 <__exponent+0x5c>
  403d54:	f10d 0207 	add.w	r2, sp, #7
  403d58:	4617      	mov	r7, r2
  403d5a:	260a      	movs	r6, #10
  403d5c:	fb91 f5f6 	sdiv	r5, r1, r6
  403d60:	fb06 1115 	mls	r1, r6, r5, r1
  403d64:	3130      	adds	r1, #48	; 0x30
  403d66:	2d09      	cmp	r5, #9
  403d68:	f802 1c01 	strb.w	r1, [r2, #-1]
  403d6c:	f102 34ff 	add.w	r4, r2, #4294967295
  403d70:	4629      	mov	r1, r5
  403d72:	dc09      	bgt.n	403d88 <__exponent+0x4e>
  403d74:	3130      	adds	r1, #48	; 0x30
  403d76:	3a02      	subs	r2, #2
  403d78:	f804 1c01 	strb.w	r1, [r4, #-1]
  403d7c:	42ba      	cmp	r2, r7
  403d7e:	461c      	mov	r4, r3
  403d80:	d304      	bcc.n	403d8c <__exponent+0x52>
  403d82:	1a20      	subs	r0, r4, r0
  403d84:	b003      	add	sp, #12
  403d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403d88:	4622      	mov	r2, r4
  403d8a:	e7e7      	b.n	403d5c <__exponent+0x22>
  403d8c:	f812 1b01 	ldrb.w	r1, [r2], #1
  403d90:	f803 1b01 	strb.w	r1, [r3], #1
  403d94:	e7f2      	b.n	403d7c <__exponent+0x42>
  403d96:	2230      	movs	r2, #48	; 0x30
  403d98:	461c      	mov	r4, r3
  403d9a:	4411      	add	r1, r2
  403d9c:	f804 2b02 	strb.w	r2, [r4], #2
  403da0:	7059      	strb	r1, [r3, #1]
  403da2:	e7ee      	b.n	403d82 <__exponent+0x48>

00403da4 <_printf_float>:
  403da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403da8:	b091      	sub	sp, #68	; 0x44
  403daa:	460c      	mov	r4, r1
  403dac:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  403dae:	4693      	mov	fp, r2
  403db0:	461e      	mov	r6, r3
  403db2:	4605      	mov	r5, r0
  403db4:	f001 fc76 	bl	4056a4 <_localeconv_r>
  403db8:	6803      	ldr	r3, [r0, #0]
  403dba:	9309      	str	r3, [sp, #36]	; 0x24
  403dbc:	4618      	mov	r0, r3
  403dbe:	f000 fc8d 	bl	4046dc <strlen>
  403dc2:	2300      	movs	r3, #0
  403dc4:	930e      	str	r3, [sp, #56]	; 0x38
  403dc6:	683b      	ldr	r3, [r7, #0]
  403dc8:	900a      	str	r0, [sp, #40]	; 0x28
  403dca:	3307      	adds	r3, #7
  403dcc:	f023 0307 	bic.w	r3, r3, #7
  403dd0:	f103 0208 	add.w	r2, r3, #8
  403dd4:	f894 8018 	ldrb.w	r8, [r4, #24]
  403dd8:	f8d4 a000 	ldr.w	sl, [r4]
  403ddc:	603a      	str	r2, [r7, #0]
  403dde:	e9d3 2300 	ldrd	r2, r3, [r3]
  403de2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  403de6:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  403dea:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  403dec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  403df0:	930b      	str	r3, [sp, #44]	; 0x2c
  403df2:	f04f 32ff 	mov.w	r2, #4294967295
  403df6:	4ba6      	ldr	r3, [pc, #664]	; (404090 <_printf_float+0x2ec>)
  403df8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403dfa:	4638      	mov	r0, r7
  403dfc:	f7ff fe7c 	bl	403af8 <__aeabi_dcmpun>
  403e00:	2800      	cmp	r0, #0
  403e02:	f040 81f7 	bne.w	4041f4 <_printf_float+0x450>
  403e06:	f04f 32ff 	mov.w	r2, #4294967295
  403e0a:	4ba1      	ldr	r3, [pc, #644]	; (404090 <_printf_float+0x2ec>)
  403e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e0e:	4638      	mov	r0, r7
  403e10:	f7ff fe54 	bl	403abc <__aeabi_dcmple>
  403e14:	2800      	cmp	r0, #0
  403e16:	f040 81ed 	bne.w	4041f4 <_printf_float+0x450>
  403e1a:	2200      	movs	r2, #0
  403e1c:	2300      	movs	r3, #0
  403e1e:	4638      	mov	r0, r7
  403e20:	4649      	mov	r1, r9
  403e22:	f7ff fe41 	bl	403aa8 <__aeabi_dcmplt>
  403e26:	b110      	cbz	r0, 403e2e <_printf_float+0x8a>
  403e28:	232d      	movs	r3, #45	; 0x2d
  403e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403e2e:	4b99      	ldr	r3, [pc, #612]	; (404094 <_printf_float+0x2f0>)
  403e30:	4f99      	ldr	r7, [pc, #612]	; (404098 <_printf_float+0x2f4>)
  403e32:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403e36:	bf98      	it	ls
  403e38:	461f      	movls	r7, r3
  403e3a:	2303      	movs	r3, #3
  403e3c:	6123      	str	r3, [r4, #16]
  403e3e:	f02a 0304 	bic.w	r3, sl, #4
  403e42:	6023      	str	r3, [r4, #0]
  403e44:	f04f 0900 	mov.w	r9, #0
  403e48:	9600      	str	r6, [sp, #0]
  403e4a:	465b      	mov	r3, fp
  403e4c:	aa0f      	add	r2, sp, #60	; 0x3c
  403e4e:	4621      	mov	r1, r4
  403e50:	4628      	mov	r0, r5
  403e52:	f000 f9df 	bl	404214 <_printf_common>
  403e56:	3001      	adds	r0, #1
  403e58:	f040 809a 	bne.w	403f90 <_printf_float+0x1ec>
  403e5c:	f04f 30ff 	mov.w	r0, #4294967295
  403e60:	b011      	add	sp, #68	; 0x44
  403e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e66:	6862      	ldr	r2, [r4, #4]
  403e68:	1c53      	adds	r3, r2, #1
  403e6a:	a80e      	add	r0, sp, #56	; 0x38
  403e6c:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  403e70:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  403e74:	d141      	bne.n	403efa <_printf_float+0x156>
  403e76:	2206      	movs	r2, #6
  403e78:	6062      	str	r2, [r4, #4]
  403e7a:	6023      	str	r3, [r4, #0]
  403e7c:	2100      	movs	r1, #0
  403e7e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  403e82:	9301      	str	r3, [sp, #4]
  403e84:	6863      	ldr	r3, [r4, #4]
  403e86:	9005      	str	r0, [sp, #20]
  403e88:	9202      	str	r2, [sp, #8]
  403e8a:	9300      	str	r3, [sp, #0]
  403e8c:	463a      	mov	r2, r7
  403e8e:	464b      	mov	r3, r9
  403e90:	9106      	str	r1, [sp, #24]
  403e92:	f8cd 8010 	str.w	r8, [sp, #16]
  403e96:	f8cd e00c 	str.w	lr, [sp, #12]
  403e9a:	4628      	mov	r0, r5
  403e9c:	f7ff fef1 	bl	403c82 <__cvt>
  403ea0:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  403ea4:	2b47      	cmp	r3, #71	; 0x47
  403ea6:	4607      	mov	r7, r0
  403ea8:	d109      	bne.n	403ebe <_printf_float+0x11a>
  403eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403eac:	1cd8      	adds	r0, r3, #3
  403eae:	db02      	blt.n	403eb6 <_printf_float+0x112>
  403eb0:	6862      	ldr	r2, [r4, #4]
  403eb2:	4293      	cmp	r3, r2
  403eb4:	dd59      	ble.n	403f6a <_printf_float+0x1c6>
  403eb6:	f1a8 0802 	sub.w	r8, r8, #2
  403eba:	fa5f f888 	uxtb.w	r8, r8
  403ebe:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  403ec2:	990d      	ldr	r1, [sp, #52]	; 0x34
  403ec4:	d836      	bhi.n	403f34 <_printf_float+0x190>
  403ec6:	3901      	subs	r1, #1
  403ec8:	4642      	mov	r2, r8
  403eca:	f104 0050 	add.w	r0, r4, #80	; 0x50
  403ece:	910d      	str	r1, [sp, #52]	; 0x34
  403ed0:	f7ff ff33 	bl	403d3a <__exponent>
  403ed4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403ed6:	1883      	adds	r3, r0, r2
  403ed8:	2a01      	cmp	r2, #1
  403eda:	4681      	mov	r9, r0
  403edc:	6123      	str	r3, [r4, #16]
  403ede:	dc02      	bgt.n	403ee6 <_printf_float+0x142>
  403ee0:	6822      	ldr	r2, [r4, #0]
  403ee2:	07d1      	lsls	r1, r2, #31
  403ee4:	d501      	bpl.n	403eea <_printf_float+0x146>
  403ee6:	3301      	adds	r3, #1
  403ee8:	6123      	str	r3, [r4, #16]
  403eea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  403eee:	2b00      	cmp	r3, #0
  403ef0:	d0aa      	beq.n	403e48 <_printf_float+0xa4>
  403ef2:	232d      	movs	r3, #45	; 0x2d
  403ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403ef8:	e7a6      	b.n	403e48 <_printf_float+0xa4>
  403efa:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  403efe:	d002      	beq.n	403f06 <_printf_float+0x162>
  403f00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403f04:	d1b9      	bne.n	403e7a <_printf_float+0xd6>
  403f06:	b19a      	cbz	r2, 403f30 <_printf_float+0x18c>
  403f08:	2100      	movs	r1, #0
  403f0a:	9106      	str	r1, [sp, #24]
  403f0c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  403f10:	e88d 000c 	stmia.w	sp, {r2, r3}
  403f14:	6023      	str	r3, [r4, #0]
  403f16:	9005      	str	r0, [sp, #20]
  403f18:	463a      	mov	r2, r7
  403f1a:	f8cd 8010 	str.w	r8, [sp, #16]
  403f1e:	f8cd e00c 	str.w	lr, [sp, #12]
  403f22:	9102      	str	r1, [sp, #8]
  403f24:	464b      	mov	r3, r9
  403f26:	4628      	mov	r0, r5
  403f28:	f7ff feab 	bl	403c82 <__cvt>
  403f2c:	4607      	mov	r7, r0
  403f2e:	e7bc      	b.n	403eaa <_printf_float+0x106>
  403f30:	2201      	movs	r2, #1
  403f32:	e7a1      	b.n	403e78 <_printf_float+0xd4>
  403f34:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  403f38:	d119      	bne.n	403f6e <_printf_float+0x1ca>
  403f3a:	2900      	cmp	r1, #0
  403f3c:	6863      	ldr	r3, [r4, #4]
  403f3e:	dd0c      	ble.n	403f5a <_printf_float+0x1b6>
  403f40:	6121      	str	r1, [r4, #16]
  403f42:	b913      	cbnz	r3, 403f4a <_printf_float+0x1a6>
  403f44:	6822      	ldr	r2, [r4, #0]
  403f46:	07d2      	lsls	r2, r2, #31
  403f48:	d502      	bpl.n	403f50 <_printf_float+0x1ac>
  403f4a:	3301      	adds	r3, #1
  403f4c:	440b      	add	r3, r1
  403f4e:	6123      	str	r3, [r4, #16]
  403f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f52:	65a3      	str	r3, [r4, #88]	; 0x58
  403f54:	f04f 0900 	mov.w	r9, #0
  403f58:	e7c7      	b.n	403eea <_printf_float+0x146>
  403f5a:	b913      	cbnz	r3, 403f62 <_printf_float+0x1be>
  403f5c:	6822      	ldr	r2, [r4, #0]
  403f5e:	07d0      	lsls	r0, r2, #31
  403f60:	d501      	bpl.n	403f66 <_printf_float+0x1c2>
  403f62:	3302      	adds	r3, #2
  403f64:	e7f3      	b.n	403f4e <_printf_float+0x1aa>
  403f66:	2301      	movs	r3, #1
  403f68:	e7f1      	b.n	403f4e <_printf_float+0x1aa>
  403f6a:	f04f 0867 	mov.w	r8, #103	; 0x67
  403f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403f72:	4293      	cmp	r3, r2
  403f74:	db05      	blt.n	403f82 <_printf_float+0x1de>
  403f76:	6822      	ldr	r2, [r4, #0]
  403f78:	6123      	str	r3, [r4, #16]
  403f7a:	07d1      	lsls	r1, r2, #31
  403f7c:	d5e8      	bpl.n	403f50 <_printf_float+0x1ac>
  403f7e:	3301      	adds	r3, #1
  403f80:	e7e5      	b.n	403f4e <_printf_float+0x1aa>
  403f82:	2b00      	cmp	r3, #0
  403f84:	bfd4      	ite	le
  403f86:	f1c3 0302 	rsble	r3, r3, #2
  403f8a:	2301      	movgt	r3, #1
  403f8c:	4413      	add	r3, r2
  403f8e:	e7de      	b.n	403f4e <_printf_float+0x1aa>
  403f90:	6823      	ldr	r3, [r4, #0]
  403f92:	055a      	lsls	r2, r3, #21
  403f94:	d407      	bmi.n	403fa6 <_printf_float+0x202>
  403f96:	6923      	ldr	r3, [r4, #16]
  403f98:	463a      	mov	r2, r7
  403f9a:	4659      	mov	r1, fp
  403f9c:	4628      	mov	r0, r5
  403f9e:	47b0      	blx	r6
  403fa0:	3001      	adds	r0, #1
  403fa2:	d12a      	bne.n	403ffa <_printf_float+0x256>
  403fa4:	e75a      	b.n	403e5c <_printf_float+0xb8>
  403fa6:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  403faa:	f240 80dc 	bls.w	404166 <_printf_float+0x3c2>
  403fae:	2200      	movs	r2, #0
  403fb0:	2300      	movs	r3, #0
  403fb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403fb6:	f7ff fd6d 	bl	403a94 <__aeabi_dcmpeq>
  403fba:	2800      	cmp	r0, #0
  403fbc:	d039      	beq.n	404032 <_printf_float+0x28e>
  403fbe:	2301      	movs	r3, #1
  403fc0:	4a36      	ldr	r2, [pc, #216]	; (40409c <_printf_float+0x2f8>)
  403fc2:	4659      	mov	r1, fp
  403fc4:	4628      	mov	r0, r5
  403fc6:	47b0      	blx	r6
  403fc8:	3001      	adds	r0, #1
  403fca:	f43f af47 	beq.w	403e5c <_printf_float+0xb8>
  403fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403fd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403fd2:	429a      	cmp	r2, r3
  403fd4:	db02      	blt.n	403fdc <_printf_float+0x238>
  403fd6:	6823      	ldr	r3, [r4, #0]
  403fd8:	07d8      	lsls	r0, r3, #31
  403fda:	d50e      	bpl.n	403ffa <_printf_float+0x256>
  403fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403fe0:	4659      	mov	r1, fp
  403fe2:	4628      	mov	r0, r5
  403fe4:	47b0      	blx	r6
  403fe6:	3001      	adds	r0, #1
  403fe8:	f43f af38 	beq.w	403e5c <_printf_float+0xb8>
  403fec:	2700      	movs	r7, #0
  403fee:	f104 081a 	add.w	r8, r4, #26
  403ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403ff4:	3b01      	subs	r3, #1
  403ff6:	429f      	cmp	r7, r3
  403ff8:	db11      	blt.n	40401e <_printf_float+0x27a>
  403ffa:	6823      	ldr	r3, [r4, #0]
  403ffc:	079f      	lsls	r7, r3, #30
  403ffe:	d508      	bpl.n	404012 <_printf_float+0x26e>
  404000:	2700      	movs	r7, #0
  404002:	f104 0819 	add.w	r8, r4, #25
  404006:	68e3      	ldr	r3, [r4, #12]
  404008:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40400a:	1a9b      	subs	r3, r3, r2
  40400c:	429f      	cmp	r7, r3
  40400e:	f2c0 80e7 	blt.w	4041e0 <_printf_float+0x43c>
  404012:	68e0      	ldr	r0, [r4, #12]
  404014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404016:	4298      	cmp	r0, r3
  404018:	bfb8      	it	lt
  40401a:	4618      	movlt	r0, r3
  40401c:	e720      	b.n	403e60 <_printf_float+0xbc>
  40401e:	2301      	movs	r3, #1
  404020:	4642      	mov	r2, r8
  404022:	4659      	mov	r1, fp
  404024:	4628      	mov	r0, r5
  404026:	47b0      	blx	r6
  404028:	3001      	adds	r0, #1
  40402a:	f43f af17 	beq.w	403e5c <_printf_float+0xb8>
  40402e:	3701      	adds	r7, #1
  404030:	e7df      	b.n	403ff2 <_printf_float+0x24e>
  404032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404034:	2b00      	cmp	r3, #0
  404036:	dc33      	bgt.n	4040a0 <_printf_float+0x2fc>
  404038:	2301      	movs	r3, #1
  40403a:	4a18      	ldr	r2, [pc, #96]	; (40409c <_printf_float+0x2f8>)
  40403c:	4659      	mov	r1, fp
  40403e:	4628      	mov	r0, r5
  404040:	47b0      	blx	r6
  404042:	3001      	adds	r0, #1
  404044:	f43f af0a 	beq.w	403e5c <_printf_float+0xb8>
  404048:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40404a:	b923      	cbnz	r3, 404056 <_printf_float+0x2b2>
  40404c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40404e:	b913      	cbnz	r3, 404056 <_printf_float+0x2b2>
  404050:	6823      	ldr	r3, [r4, #0]
  404052:	07d9      	lsls	r1, r3, #31
  404054:	d5d1      	bpl.n	403ffa <_printf_float+0x256>
  404056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404058:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40405a:	4659      	mov	r1, fp
  40405c:	4628      	mov	r0, r5
  40405e:	47b0      	blx	r6
  404060:	3001      	adds	r0, #1
  404062:	f43f aefb 	beq.w	403e5c <_printf_float+0xb8>
  404066:	f04f 0800 	mov.w	r8, #0
  40406a:	f104 091a 	add.w	r9, r4, #26
  40406e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404070:	425b      	negs	r3, r3
  404072:	4598      	cmp	r8, r3
  404074:	db01      	blt.n	40407a <_printf_float+0x2d6>
  404076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404078:	e78e      	b.n	403f98 <_printf_float+0x1f4>
  40407a:	2301      	movs	r3, #1
  40407c:	464a      	mov	r2, r9
  40407e:	4659      	mov	r1, fp
  404080:	4628      	mov	r0, r5
  404082:	47b0      	blx	r6
  404084:	3001      	adds	r0, #1
  404086:	f43f aee9 	beq.w	403e5c <_printf_float+0xb8>
  40408a:	f108 0801 	add.w	r8, r8, #1
  40408e:	e7ee      	b.n	40406e <_printf_float+0x2ca>
  404090:	7fefffff 	.word	0x7fefffff
  404094:	00406b5c 	.word	0x00406b5c
  404098:	00406b60 	.word	0x00406b60
  40409c:	00406b6c 	.word	0x00406b6c
  4040a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4040a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4040a4:	429a      	cmp	r2, r3
  4040a6:	bfa8      	it	ge
  4040a8:	461a      	movge	r2, r3
  4040aa:	2a00      	cmp	r2, #0
  4040ac:	4690      	mov	r8, r2
  4040ae:	dc36      	bgt.n	40411e <_printf_float+0x37a>
  4040b0:	f104 031a 	add.w	r3, r4, #26
  4040b4:	f04f 0a00 	mov.w	sl, #0
  4040b8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4040bc:	930b      	str	r3, [sp, #44]	; 0x2c
  4040be:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  4040c2:	eba9 0308 	sub.w	r3, r9, r8
  4040c6:	459a      	cmp	sl, r3
  4040c8:	db31      	blt.n	40412e <_printf_float+0x38a>
  4040ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4040cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4040ce:	429a      	cmp	r2, r3
  4040d0:	db38      	blt.n	404144 <_printf_float+0x3a0>
  4040d2:	6823      	ldr	r3, [r4, #0]
  4040d4:	07da      	lsls	r2, r3, #31
  4040d6:	d435      	bmi.n	404144 <_printf_float+0x3a0>
  4040d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4040da:	990d      	ldr	r1, [sp, #52]	; 0x34
  4040dc:	eba3 0209 	sub.w	r2, r3, r9
  4040e0:	eba3 0801 	sub.w	r8, r3, r1
  4040e4:	4590      	cmp	r8, r2
  4040e6:	bfa8      	it	ge
  4040e8:	4690      	movge	r8, r2
  4040ea:	f1b8 0f00 	cmp.w	r8, #0
  4040ee:	dc31      	bgt.n	404154 <_printf_float+0x3b0>
  4040f0:	2700      	movs	r7, #0
  4040f2:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4040f6:	f104 091a 	add.w	r9, r4, #26
  4040fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4040fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4040fe:	1a9b      	subs	r3, r3, r2
  404100:	eba3 0308 	sub.w	r3, r3, r8
  404104:	429f      	cmp	r7, r3
  404106:	f6bf af78 	bge.w	403ffa <_printf_float+0x256>
  40410a:	2301      	movs	r3, #1
  40410c:	464a      	mov	r2, r9
  40410e:	4659      	mov	r1, fp
  404110:	4628      	mov	r0, r5
  404112:	47b0      	blx	r6
  404114:	3001      	adds	r0, #1
  404116:	f43f aea1 	beq.w	403e5c <_printf_float+0xb8>
  40411a:	3701      	adds	r7, #1
  40411c:	e7ed      	b.n	4040fa <_printf_float+0x356>
  40411e:	4613      	mov	r3, r2
  404120:	4659      	mov	r1, fp
  404122:	463a      	mov	r2, r7
  404124:	4628      	mov	r0, r5
  404126:	47b0      	blx	r6
  404128:	3001      	adds	r0, #1
  40412a:	d1c1      	bne.n	4040b0 <_printf_float+0x30c>
  40412c:	e696      	b.n	403e5c <_printf_float+0xb8>
  40412e:	2301      	movs	r3, #1
  404130:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404132:	4659      	mov	r1, fp
  404134:	4628      	mov	r0, r5
  404136:	47b0      	blx	r6
  404138:	3001      	adds	r0, #1
  40413a:	f43f ae8f 	beq.w	403e5c <_printf_float+0xb8>
  40413e:	f10a 0a01 	add.w	sl, sl, #1
  404142:	e7bc      	b.n	4040be <_printf_float+0x31a>
  404144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404146:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404148:	4659      	mov	r1, fp
  40414a:	4628      	mov	r0, r5
  40414c:	47b0      	blx	r6
  40414e:	3001      	adds	r0, #1
  404150:	d1c2      	bne.n	4040d8 <_printf_float+0x334>
  404152:	e683      	b.n	403e5c <_printf_float+0xb8>
  404154:	4643      	mov	r3, r8
  404156:	eb07 0209 	add.w	r2, r7, r9
  40415a:	4659      	mov	r1, fp
  40415c:	4628      	mov	r0, r5
  40415e:	47b0      	blx	r6
  404160:	3001      	adds	r0, #1
  404162:	d1c5      	bne.n	4040f0 <_printf_float+0x34c>
  404164:	e67a      	b.n	403e5c <_printf_float+0xb8>
  404166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404168:	2a01      	cmp	r2, #1
  40416a:	dc01      	bgt.n	404170 <_printf_float+0x3cc>
  40416c:	07db      	lsls	r3, r3, #31
  40416e:	d534      	bpl.n	4041da <_printf_float+0x436>
  404170:	2301      	movs	r3, #1
  404172:	463a      	mov	r2, r7
  404174:	4659      	mov	r1, fp
  404176:	4628      	mov	r0, r5
  404178:	47b0      	blx	r6
  40417a:	3001      	adds	r0, #1
  40417c:	f43f ae6e 	beq.w	403e5c <_printf_float+0xb8>
  404180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404182:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404184:	4659      	mov	r1, fp
  404186:	4628      	mov	r0, r5
  404188:	47b0      	blx	r6
  40418a:	3001      	adds	r0, #1
  40418c:	f43f ae66 	beq.w	403e5c <_printf_float+0xb8>
  404190:	2200      	movs	r2, #0
  404192:	2300      	movs	r3, #0
  404194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  404198:	f7ff fc7c 	bl	403a94 <__aeabi_dcmpeq>
  40419c:	b150      	cbz	r0, 4041b4 <_printf_float+0x410>
  40419e:	2700      	movs	r7, #0
  4041a0:	f104 081a 	add.w	r8, r4, #26
  4041a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4041a6:	3b01      	subs	r3, #1
  4041a8:	429f      	cmp	r7, r3
  4041aa:	db0c      	blt.n	4041c6 <_printf_float+0x422>
  4041ac:	464b      	mov	r3, r9
  4041ae:	f104 0250 	add.w	r2, r4, #80	; 0x50
  4041b2:	e6f2      	b.n	403f9a <_printf_float+0x1f6>
  4041b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4041b6:	1c7a      	adds	r2, r7, #1
  4041b8:	3b01      	subs	r3, #1
  4041ba:	4659      	mov	r1, fp
  4041bc:	4628      	mov	r0, r5
  4041be:	47b0      	blx	r6
  4041c0:	3001      	adds	r0, #1
  4041c2:	d1f3      	bne.n	4041ac <_printf_float+0x408>
  4041c4:	e64a      	b.n	403e5c <_printf_float+0xb8>
  4041c6:	2301      	movs	r3, #1
  4041c8:	4642      	mov	r2, r8
  4041ca:	4659      	mov	r1, fp
  4041cc:	4628      	mov	r0, r5
  4041ce:	47b0      	blx	r6
  4041d0:	3001      	adds	r0, #1
  4041d2:	f43f ae43 	beq.w	403e5c <_printf_float+0xb8>
  4041d6:	3701      	adds	r7, #1
  4041d8:	e7e4      	b.n	4041a4 <_printf_float+0x400>
  4041da:	2301      	movs	r3, #1
  4041dc:	463a      	mov	r2, r7
  4041de:	e7ec      	b.n	4041ba <_printf_float+0x416>
  4041e0:	2301      	movs	r3, #1
  4041e2:	4642      	mov	r2, r8
  4041e4:	4659      	mov	r1, fp
  4041e6:	4628      	mov	r0, r5
  4041e8:	47b0      	blx	r6
  4041ea:	3001      	adds	r0, #1
  4041ec:	f43f ae36 	beq.w	403e5c <_printf_float+0xb8>
  4041f0:	3701      	adds	r7, #1
  4041f2:	e708      	b.n	404006 <_printf_float+0x262>
  4041f4:	463a      	mov	r2, r7
  4041f6:	464b      	mov	r3, r9
  4041f8:	4638      	mov	r0, r7
  4041fa:	4649      	mov	r1, r9
  4041fc:	f7ff fc7c 	bl	403af8 <__aeabi_dcmpun>
  404200:	2800      	cmp	r0, #0
  404202:	f43f ae30 	beq.w	403e66 <_printf_float+0xc2>
  404206:	4b01      	ldr	r3, [pc, #4]	; (40420c <_printf_float+0x468>)
  404208:	4f01      	ldr	r7, [pc, #4]	; (404210 <_printf_float+0x46c>)
  40420a:	e612      	b.n	403e32 <_printf_float+0x8e>
  40420c:	00406b64 	.word	0x00406b64
  404210:	00406b68 	.word	0x00406b68

00404214 <_printf_common>:
  404214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404218:	4691      	mov	r9, r2
  40421a:	461f      	mov	r7, r3
  40421c:	688a      	ldr	r2, [r1, #8]
  40421e:	690b      	ldr	r3, [r1, #16]
  404220:	f8dd 8020 	ldr.w	r8, [sp, #32]
  404224:	4293      	cmp	r3, r2
  404226:	bfb8      	it	lt
  404228:	4613      	movlt	r3, r2
  40422a:	f8c9 3000 	str.w	r3, [r9]
  40422e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  404232:	4606      	mov	r6, r0
  404234:	460c      	mov	r4, r1
  404236:	b112      	cbz	r2, 40423e <_printf_common+0x2a>
  404238:	3301      	adds	r3, #1
  40423a:	f8c9 3000 	str.w	r3, [r9]
  40423e:	6823      	ldr	r3, [r4, #0]
  404240:	0699      	lsls	r1, r3, #26
  404242:	bf42      	ittt	mi
  404244:	f8d9 3000 	ldrmi.w	r3, [r9]
  404248:	3302      	addmi	r3, #2
  40424a:	f8c9 3000 	strmi.w	r3, [r9]
  40424e:	6825      	ldr	r5, [r4, #0]
  404250:	f015 0506 	ands.w	r5, r5, #6
  404254:	d107      	bne.n	404266 <_printf_common+0x52>
  404256:	f104 0a19 	add.w	sl, r4, #25
  40425a:	68e3      	ldr	r3, [r4, #12]
  40425c:	f8d9 2000 	ldr.w	r2, [r9]
  404260:	1a9b      	subs	r3, r3, r2
  404262:	429d      	cmp	r5, r3
  404264:	db29      	blt.n	4042ba <_printf_common+0xa6>
  404266:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  40426a:	6822      	ldr	r2, [r4, #0]
  40426c:	3300      	adds	r3, #0
  40426e:	bf18      	it	ne
  404270:	2301      	movne	r3, #1
  404272:	0692      	lsls	r2, r2, #26
  404274:	d42e      	bmi.n	4042d4 <_printf_common+0xc0>
  404276:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40427a:	4639      	mov	r1, r7
  40427c:	4630      	mov	r0, r6
  40427e:	47c0      	blx	r8
  404280:	3001      	adds	r0, #1
  404282:	d021      	beq.n	4042c8 <_printf_common+0xb4>
  404284:	6823      	ldr	r3, [r4, #0]
  404286:	68e5      	ldr	r5, [r4, #12]
  404288:	f8d9 2000 	ldr.w	r2, [r9]
  40428c:	f003 0306 	and.w	r3, r3, #6
  404290:	2b04      	cmp	r3, #4
  404292:	bf08      	it	eq
  404294:	1aad      	subeq	r5, r5, r2
  404296:	68a3      	ldr	r3, [r4, #8]
  404298:	6922      	ldr	r2, [r4, #16]
  40429a:	bf0c      	ite	eq
  40429c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  4042a0:	2500      	movne	r5, #0
  4042a2:	4293      	cmp	r3, r2
  4042a4:	bfc4      	itt	gt
  4042a6:	1a9b      	subgt	r3, r3, r2
  4042a8:	18ed      	addgt	r5, r5, r3
  4042aa:	f04f 0900 	mov.w	r9, #0
  4042ae:	341a      	adds	r4, #26
  4042b0:	454d      	cmp	r5, r9
  4042b2:	d11b      	bne.n	4042ec <_printf_common+0xd8>
  4042b4:	2000      	movs	r0, #0
  4042b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4042ba:	2301      	movs	r3, #1
  4042bc:	4652      	mov	r2, sl
  4042be:	4639      	mov	r1, r7
  4042c0:	4630      	mov	r0, r6
  4042c2:	47c0      	blx	r8
  4042c4:	3001      	adds	r0, #1
  4042c6:	d103      	bne.n	4042d0 <_printf_common+0xbc>
  4042c8:	f04f 30ff 	mov.w	r0, #4294967295
  4042cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4042d0:	3501      	adds	r5, #1
  4042d2:	e7c2      	b.n	40425a <_printf_common+0x46>
  4042d4:	18e1      	adds	r1, r4, r3
  4042d6:	1c5a      	adds	r2, r3, #1
  4042d8:	2030      	movs	r0, #48	; 0x30
  4042da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4042de:	4422      	add	r2, r4
  4042e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4042e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4042e8:	3302      	adds	r3, #2
  4042ea:	e7c4      	b.n	404276 <_printf_common+0x62>
  4042ec:	2301      	movs	r3, #1
  4042ee:	4622      	mov	r2, r4
  4042f0:	4639      	mov	r1, r7
  4042f2:	4630      	mov	r0, r6
  4042f4:	47c0      	blx	r8
  4042f6:	3001      	adds	r0, #1
  4042f8:	d0e6      	beq.n	4042c8 <_printf_common+0xb4>
  4042fa:	f109 0901 	add.w	r9, r9, #1
  4042fe:	e7d7      	b.n	4042b0 <_printf_common+0x9c>

00404300 <_printf_i>:
  404300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404304:	4617      	mov	r7, r2
  404306:	7e0a      	ldrb	r2, [r1, #24]
  404308:	b085      	sub	sp, #20
  40430a:	2a6e      	cmp	r2, #110	; 0x6e
  40430c:	4698      	mov	r8, r3
  40430e:	4606      	mov	r6, r0
  404310:	460c      	mov	r4, r1
  404312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404314:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  404318:	f000 80bc 	beq.w	404494 <_printf_i+0x194>
  40431c:	d81a      	bhi.n	404354 <_printf_i+0x54>
  40431e:	2a63      	cmp	r2, #99	; 0x63
  404320:	d02e      	beq.n	404380 <_printf_i+0x80>
  404322:	d80a      	bhi.n	40433a <_printf_i+0x3a>
  404324:	2a00      	cmp	r2, #0
  404326:	f000 80c8 	beq.w	4044ba <_printf_i+0x1ba>
  40432a:	2a58      	cmp	r2, #88	; 0x58
  40432c:	f000 808a 	beq.w	404444 <_printf_i+0x144>
  404330:	f104 0542 	add.w	r5, r4, #66	; 0x42
  404334:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  404338:	e02a      	b.n	404390 <_printf_i+0x90>
  40433a:	2a64      	cmp	r2, #100	; 0x64
  40433c:	d001      	beq.n	404342 <_printf_i+0x42>
  40433e:	2a69      	cmp	r2, #105	; 0x69
  404340:	d1f6      	bne.n	404330 <_printf_i+0x30>
  404342:	6821      	ldr	r1, [r4, #0]
  404344:	681a      	ldr	r2, [r3, #0]
  404346:	f011 0f80 	tst.w	r1, #128	; 0x80
  40434a:	d023      	beq.n	404394 <_printf_i+0x94>
  40434c:	1d11      	adds	r1, r2, #4
  40434e:	6019      	str	r1, [r3, #0]
  404350:	6813      	ldr	r3, [r2, #0]
  404352:	e027      	b.n	4043a4 <_printf_i+0xa4>
  404354:	2a73      	cmp	r2, #115	; 0x73
  404356:	f000 80b4 	beq.w	4044c2 <_printf_i+0x1c2>
  40435a:	d808      	bhi.n	40436e <_printf_i+0x6e>
  40435c:	2a6f      	cmp	r2, #111	; 0x6f
  40435e:	d02a      	beq.n	4043b6 <_printf_i+0xb6>
  404360:	2a70      	cmp	r2, #112	; 0x70
  404362:	d1e5      	bne.n	404330 <_printf_i+0x30>
  404364:	680a      	ldr	r2, [r1, #0]
  404366:	f042 0220 	orr.w	r2, r2, #32
  40436a:	600a      	str	r2, [r1, #0]
  40436c:	e003      	b.n	404376 <_printf_i+0x76>
  40436e:	2a75      	cmp	r2, #117	; 0x75
  404370:	d021      	beq.n	4043b6 <_printf_i+0xb6>
  404372:	2a78      	cmp	r2, #120	; 0x78
  404374:	d1dc      	bne.n	404330 <_printf_i+0x30>
  404376:	2278      	movs	r2, #120	; 0x78
  404378:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  40437c:	496e      	ldr	r1, [pc, #440]	; (404538 <_printf_i+0x238>)
  40437e:	e064      	b.n	40444a <_printf_i+0x14a>
  404380:	681a      	ldr	r2, [r3, #0]
  404382:	f101 0542 	add.w	r5, r1, #66	; 0x42
  404386:	1d11      	adds	r1, r2, #4
  404388:	6019      	str	r1, [r3, #0]
  40438a:	6813      	ldr	r3, [r2, #0]
  40438c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  404390:	2301      	movs	r3, #1
  404392:	e0a3      	b.n	4044dc <_printf_i+0x1dc>
  404394:	f011 0f40 	tst.w	r1, #64	; 0x40
  404398:	f102 0104 	add.w	r1, r2, #4
  40439c:	6019      	str	r1, [r3, #0]
  40439e:	d0d7      	beq.n	404350 <_printf_i+0x50>
  4043a0:	f9b2 3000 	ldrsh.w	r3, [r2]
  4043a4:	2b00      	cmp	r3, #0
  4043a6:	da03      	bge.n	4043b0 <_printf_i+0xb0>
  4043a8:	222d      	movs	r2, #45	; 0x2d
  4043aa:	425b      	negs	r3, r3
  4043ac:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  4043b0:	4962      	ldr	r1, [pc, #392]	; (40453c <_printf_i+0x23c>)
  4043b2:	220a      	movs	r2, #10
  4043b4:	e017      	b.n	4043e6 <_printf_i+0xe6>
  4043b6:	6820      	ldr	r0, [r4, #0]
  4043b8:	6819      	ldr	r1, [r3, #0]
  4043ba:	f010 0f80 	tst.w	r0, #128	; 0x80
  4043be:	d003      	beq.n	4043c8 <_printf_i+0xc8>
  4043c0:	1d08      	adds	r0, r1, #4
  4043c2:	6018      	str	r0, [r3, #0]
  4043c4:	680b      	ldr	r3, [r1, #0]
  4043c6:	e006      	b.n	4043d6 <_printf_i+0xd6>
  4043c8:	f010 0f40 	tst.w	r0, #64	; 0x40
  4043cc:	f101 0004 	add.w	r0, r1, #4
  4043d0:	6018      	str	r0, [r3, #0]
  4043d2:	d0f7      	beq.n	4043c4 <_printf_i+0xc4>
  4043d4:	880b      	ldrh	r3, [r1, #0]
  4043d6:	4959      	ldr	r1, [pc, #356]	; (40453c <_printf_i+0x23c>)
  4043d8:	2a6f      	cmp	r2, #111	; 0x6f
  4043da:	bf14      	ite	ne
  4043dc:	220a      	movne	r2, #10
  4043de:	2208      	moveq	r2, #8
  4043e0:	2000      	movs	r0, #0
  4043e2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  4043e6:	6865      	ldr	r5, [r4, #4]
  4043e8:	60a5      	str	r5, [r4, #8]
  4043ea:	2d00      	cmp	r5, #0
  4043ec:	f2c0 809c 	blt.w	404528 <_printf_i+0x228>
  4043f0:	6820      	ldr	r0, [r4, #0]
  4043f2:	f020 0004 	bic.w	r0, r0, #4
  4043f6:	6020      	str	r0, [r4, #0]
  4043f8:	2b00      	cmp	r3, #0
  4043fa:	d13f      	bne.n	40447c <_printf_i+0x17c>
  4043fc:	2d00      	cmp	r5, #0
  4043fe:	f040 8095 	bne.w	40452c <_printf_i+0x22c>
  404402:	4675      	mov	r5, lr
  404404:	2a08      	cmp	r2, #8
  404406:	d10b      	bne.n	404420 <_printf_i+0x120>
  404408:	6823      	ldr	r3, [r4, #0]
  40440a:	07da      	lsls	r2, r3, #31
  40440c:	d508      	bpl.n	404420 <_printf_i+0x120>
  40440e:	6923      	ldr	r3, [r4, #16]
  404410:	6862      	ldr	r2, [r4, #4]
  404412:	429a      	cmp	r2, r3
  404414:	bfde      	ittt	le
  404416:	2330      	movle	r3, #48	; 0x30
  404418:	f805 3c01 	strble.w	r3, [r5, #-1]
  40441c:	f105 35ff 	addle.w	r5, r5, #4294967295
  404420:	ebae 0305 	sub.w	r3, lr, r5
  404424:	6123      	str	r3, [r4, #16]
  404426:	f8cd 8000 	str.w	r8, [sp]
  40442a:	463b      	mov	r3, r7
  40442c:	aa03      	add	r2, sp, #12
  40442e:	4621      	mov	r1, r4
  404430:	4630      	mov	r0, r6
  404432:	f7ff feef 	bl	404214 <_printf_common>
  404436:	3001      	adds	r0, #1
  404438:	d155      	bne.n	4044e6 <_printf_i+0x1e6>
  40443a:	f04f 30ff 	mov.w	r0, #4294967295
  40443e:	b005      	add	sp, #20
  404440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404444:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  404448:	493c      	ldr	r1, [pc, #240]	; (40453c <_printf_i+0x23c>)
  40444a:	6822      	ldr	r2, [r4, #0]
  40444c:	6818      	ldr	r0, [r3, #0]
  40444e:	f012 0f80 	tst.w	r2, #128	; 0x80
  404452:	f100 0504 	add.w	r5, r0, #4
  404456:	601d      	str	r5, [r3, #0]
  404458:	d001      	beq.n	40445e <_printf_i+0x15e>
  40445a:	6803      	ldr	r3, [r0, #0]
  40445c:	e002      	b.n	404464 <_printf_i+0x164>
  40445e:	0655      	lsls	r5, r2, #25
  404460:	d5fb      	bpl.n	40445a <_printf_i+0x15a>
  404462:	8803      	ldrh	r3, [r0, #0]
  404464:	07d0      	lsls	r0, r2, #31
  404466:	bf44      	itt	mi
  404468:	f042 0220 	orrmi.w	r2, r2, #32
  40446c:	6022      	strmi	r2, [r4, #0]
  40446e:	b91b      	cbnz	r3, 404478 <_printf_i+0x178>
  404470:	6822      	ldr	r2, [r4, #0]
  404472:	f022 0220 	bic.w	r2, r2, #32
  404476:	6022      	str	r2, [r4, #0]
  404478:	2210      	movs	r2, #16
  40447a:	e7b1      	b.n	4043e0 <_printf_i+0xe0>
  40447c:	4675      	mov	r5, lr
  40447e:	fbb3 f0f2 	udiv	r0, r3, r2
  404482:	fb02 3310 	mls	r3, r2, r0, r3
  404486:	5ccb      	ldrb	r3, [r1, r3]
  404488:	f805 3d01 	strb.w	r3, [r5, #-1]!
  40448c:	4603      	mov	r3, r0
  40448e:	2800      	cmp	r0, #0
  404490:	d1f5      	bne.n	40447e <_printf_i+0x17e>
  404492:	e7b7      	b.n	404404 <_printf_i+0x104>
  404494:	6808      	ldr	r0, [r1, #0]
  404496:	681a      	ldr	r2, [r3, #0]
  404498:	6949      	ldr	r1, [r1, #20]
  40449a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40449e:	d004      	beq.n	4044aa <_printf_i+0x1aa>
  4044a0:	1d10      	adds	r0, r2, #4
  4044a2:	6018      	str	r0, [r3, #0]
  4044a4:	6813      	ldr	r3, [r2, #0]
  4044a6:	6019      	str	r1, [r3, #0]
  4044a8:	e007      	b.n	4044ba <_printf_i+0x1ba>
  4044aa:	f010 0f40 	tst.w	r0, #64	; 0x40
  4044ae:	f102 0004 	add.w	r0, r2, #4
  4044b2:	6018      	str	r0, [r3, #0]
  4044b4:	6813      	ldr	r3, [r2, #0]
  4044b6:	d0f6      	beq.n	4044a6 <_printf_i+0x1a6>
  4044b8:	8019      	strh	r1, [r3, #0]
  4044ba:	2300      	movs	r3, #0
  4044bc:	6123      	str	r3, [r4, #16]
  4044be:	4675      	mov	r5, lr
  4044c0:	e7b1      	b.n	404426 <_printf_i+0x126>
  4044c2:	681a      	ldr	r2, [r3, #0]
  4044c4:	1d11      	adds	r1, r2, #4
  4044c6:	6019      	str	r1, [r3, #0]
  4044c8:	6815      	ldr	r5, [r2, #0]
  4044ca:	6862      	ldr	r2, [r4, #4]
  4044cc:	2100      	movs	r1, #0
  4044ce:	4628      	mov	r0, r5
  4044d0:	f001 f966 	bl	4057a0 <memchr>
  4044d4:	b108      	cbz	r0, 4044da <_printf_i+0x1da>
  4044d6:	1b40      	subs	r0, r0, r5
  4044d8:	6060      	str	r0, [r4, #4]
  4044da:	6863      	ldr	r3, [r4, #4]
  4044dc:	6123      	str	r3, [r4, #16]
  4044de:	2300      	movs	r3, #0
  4044e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4044e4:	e79f      	b.n	404426 <_printf_i+0x126>
  4044e6:	6923      	ldr	r3, [r4, #16]
  4044e8:	462a      	mov	r2, r5
  4044ea:	4639      	mov	r1, r7
  4044ec:	4630      	mov	r0, r6
  4044ee:	47c0      	blx	r8
  4044f0:	3001      	adds	r0, #1
  4044f2:	d0a2      	beq.n	40443a <_printf_i+0x13a>
  4044f4:	6823      	ldr	r3, [r4, #0]
  4044f6:	079b      	lsls	r3, r3, #30
  4044f8:	d507      	bpl.n	40450a <_printf_i+0x20a>
  4044fa:	2500      	movs	r5, #0
  4044fc:	f104 0919 	add.w	r9, r4, #25
  404500:	68e3      	ldr	r3, [r4, #12]
  404502:	9a03      	ldr	r2, [sp, #12]
  404504:	1a9b      	subs	r3, r3, r2
  404506:	429d      	cmp	r5, r3
  404508:	db05      	blt.n	404516 <_printf_i+0x216>
  40450a:	68e0      	ldr	r0, [r4, #12]
  40450c:	9b03      	ldr	r3, [sp, #12]
  40450e:	4298      	cmp	r0, r3
  404510:	bfb8      	it	lt
  404512:	4618      	movlt	r0, r3
  404514:	e793      	b.n	40443e <_printf_i+0x13e>
  404516:	2301      	movs	r3, #1
  404518:	464a      	mov	r2, r9
  40451a:	4639      	mov	r1, r7
  40451c:	4630      	mov	r0, r6
  40451e:	47c0      	blx	r8
  404520:	3001      	adds	r0, #1
  404522:	d08a      	beq.n	40443a <_printf_i+0x13a>
  404524:	3501      	adds	r5, #1
  404526:	e7eb      	b.n	404500 <_printf_i+0x200>
  404528:	2b00      	cmp	r3, #0
  40452a:	d1a7      	bne.n	40447c <_printf_i+0x17c>
  40452c:	780b      	ldrb	r3, [r1, #0]
  40452e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  404532:	f104 0542 	add.w	r5, r4, #66	; 0x42
  404536:	e765      	b.n	404404 <_printf_i+0x104>
  404538:	00406b7f 	.word	0x00406b7f
  40453c:	00406b6e 	.word	0x00406b6e

00404540 <iprintf>:
  404540:	b40f      	push	{r0, r1, r2, r3}
  404542:	4b0a      	ldr	r3, [pc, #40]	; (40456c <iprintf+0x2c>)
  404544:	b513      	push	{r0, r1, r4, lr}
  404546:	681c      	ldr	r4, [r3, #0]
  404548:	b124      	cbz	r4, 404554 <iprintf+0x14>
  40454a:	69a3      	ldr	r3, [r4, #24]
  40454c:	b913      	cbnz	r3, 404554 <iprintf+0x14>
  40454e:	4620      	mov	r0, r4
  404550:	f001 f81e 	bl	405590 <__sinit>
  404554:	ab05      	add	r3, sp, #20
  404556:	9a04      	ldr	r2, [sp, #16]
  404558:	68a1      	ldr	r1, [r4, #8]
  40455a:	9301      	str	r3, [sp, #4]
  40455c:	4620      	mov	r0, r4
  40455e:	f001 fd21 	bl	405fa4 <_vfiprintf_r>
  404562:	b002      	add	sp, #8
  404564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404568:	b004      	add	sp, #16
  40456a:	4770      	bx	lr
  40456c:	20400048 	.word	0x20400048

00404570 <setbuf>:
  404570:	2900      	cmp	r1, #0
  404572:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404576:	bf0c      	ite	eq
  404578:	2202      	moveq	r2, #2
  40457a:	2200      	movne	r2, #0
  40457c:	f000 b800 	b.w	404580 <setvbuf>

00404580 <setvbuf>:
  404580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  404584:	461d      	mov	r5, r3
  404586:	4b51      	ldr	r3, [pc, #324]	; (4046cc <setvbuf+0x14c>)
  404588:	681e      	ldr	r6, [r3, #0]
  40458a:	4604      	mov	r4, r0
  40458c:	460f      	mov	r7, r1
  40458e:	4690      	mov	r8, r2
  404590:	b126      	cbz	r6, 40459c <setvbuf+0x1c>
  404592:	69b3      	ldr	r3, [r6, #24]
  404594:	b913      	cbnz	r3, 40459c <setvbuf+0x1c>
  404596:	4630      	mov	r0, r6
  404598:	f000 fffa 	bl	405590 <__sinit>
  40459c:	4b4c      	ldr	r3, [pc, #304]	; (4046d0 <setvbuf+0x150>)
  40459e:	429c      	cmp	r4, r3
  4045a0:	d152      	bne.n	404648 <setvbuf+0xc8>
  4045a2:	6874      	ldr	r4, [r6, #4]
  4045a4:	f1b8 0f02 	cmp.w	r8, #2
  4045a8:	d006      	beq.n	4045b8 <setvbuf+0x38>
  4045aa:	f1b8 0f01 	cmp.w	r8, #1
  4045ae:	f200 8089 	bhi.w	4046c4 <setvbuf+0x144>
  4045b2:	2d00      	cmp	r5, #0
  4045b4:	f2c0 8086 	blt.w	4046c4 <setvbuf+0x144>
  4045b8:	4621      	mov	r1, r4
  4045ba:	4630      	mov	r0, r6
  4045bc:	f000 ff7e 	bl	4054bc <_fflush_r>
  4045c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4045c2:	b141      	cbz	r1, 4045d6 <setvbuf+0x56>
  4045c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4045c8:	4299      	cmp	r1, r3
  4045ca:	d002      	beq.n	4045d2 <setvbuf+0x52>
  4045cc:	4630      	mov	r0, r6
  4045ce:	f001 fc15 	bl	405dfc <_free_r>
  4045d2:	2300      	movs	r3, #0
  4045d4:	6363      	str	r3, [r4, #52]	; 0x34
  4045d6:	2300      	movs	r3, #0
  4045d8:	61a3      	str	r3, [r4, #24]
  4045da:	6063      	str	r3, [r4, #4]
  4045dc:	89a3      	ldrh	r3, [r4, #12]
  4045de:	061b      	lsls	r3, r3, #24
  4045e0:	d503      	bpl.n	4045ea <setvbuf+0x6a>
  4045e2:	6921      	ldr	r1, [r4, #16]
  4045e4:	4630      	mov	r0, r6
  4045e6:	f001 fc09 	bl	405dfc <_free_r>
  4045ea:	89a3      	ldrh	r3, [r4, #12]
  4045ec:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4045f0:	f023 0303 	bic.w	r3, r3, #3
  4045f4:	f1b8 0f02 	cmp.w	r8, #2
  4045f8:	81a3      	strh	r3, [r4, #12]
  4045fa:	d05d      	beq.n	4046b8 <setvbuf+0x138>
  4045fc:	ab01      	add	r3, sp, #4
  4045fe:	466a      	mov	r2, sp
  404600:	4621      	mov	r1, r4
  404602:	4630      	mov	r0, r6
  404604:	f001 f85c 	bl	4056c0 <__swhatbuf_r>
  404608:	89a3      	ldrh	r3, [r4, #12]
  40460a:	4318      	orrs	r0, r3
  40460c:	81a0      	strh	r0, [r4, #12]
  40460e:	bb2d      	cbnz	r5, 40465c <setvbuf+0xdc>
  404610:	9d00      	ldr	r5, [sp, #0]
  404612:	4628      	mov	r0, r5
  404614:	f001 f8b8 	bl	405788 <malloc>
  404618:	4607      	mov	r7, r0
  40461a:	2800      	cmp	r0, #0
  40461c:	d14e      	bne.n	4046bc <setvbuf+0x13c>
  40461e:	f8dd 9000 	ldr.w	r9, [sp]
  404622:	45a9      	cmp	r9, r5
  404624:	d13c      	bne.n	4046a0 <setvbuf+0x120>
  404626:	f04f 30ff 	mov.w	r0, #4294967295
  40462a:	89a3      	ldrh	r3, [r4, #12]
  40462c:	f043 0302 	orr.w	r3, r3, #2
  404630:	81a3      	strh	r3, [r4, #12]
  404632:	2300      	movs	r3, #0
  404634:	60a3      	str	r3, [r4, #8]
  404636:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40463a:	6023      	str	r3, [r4, #0]
  40463c:	6123      	str	r3, [r4, #16]
  40463e:	2301      	movs	r3, #1
  404640:	6163      	str	r3, [r4, #20]
  404642:	b003      	add	sp, #12
  404644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404648:	4b22      	ldr	r3, [pc, #136]	; (4046d4 <setvbuf+0x154>)
  40464a:	429c      	cmp	r4, r3
  40464c:	d101      	bne.n	404652 <setvbuf+0xd2>
  40464e:	68b4      	ldr	r4, [r6, #8]
  404650:	e7a8      	b.n	4045a4 <setvbuf+0x24>
  404652:	4b21      	ldr	r3, [pc, #132]	; (4046d8 <setvbuf+0x158>)
  404654:	429c      	cmp	r4, r3
  404656:	bf08      	it	eq
  404658:	68f4      	ldreq	r4, [r6, #12]
  40465a:	e7a3      	b.n	4045a4 <setvbuf+0x24>
  40465c:	2f00      	cmp	r7, #0
  40465e:	d0d8      	beq.n	404612 <setvbuf+0x92>
  404660:	69b3      	ldr	r3, [r6, #24]
  404662:	b913      	cbnz	r3, 40466a <setvbuf+0xea>
  404664:	4630      	mov	r0, r6
  404666:	f000 ff93 	bl	405590 <__sinit>
  40466a:	f1b8 0f01 	cmp.w	r8, #1
  40466e:	bf08      	it	eq
  404670:	89a3      	ldrheq	r3, [r4, #12]
  404672:	6027      	str	r7, [r4, #0]
  404674:	bf04      	itt	eq
  404676:	f043 0301 	orreq.w	r3, r3, #1
  40467a:	81a3      	strheq	r3, [r4, #12]
  40467c:	89a3      	ldrh	r3, [r4, #12]
  40467e:	6127      	str	r7, [r4, #16]
  404680:	f013 0008 	ands.w	r0, r3, #8
  404684:	6165      	str	r5, [r4, #20]
  404686:	d01b      	beq.n	4046c0 <setvbuf+0x140>
  404688:	f013 0001 	ands.w	r0, r3, #1
  40468c:	bf18      	it	ne
  40468e:	426d      	negne	r5, r5
  404690:	f04f 0300 	mov.w	r3, #0
  404694:	bf1d      	ittte	ne
  404696:	60a3      	strne	r3, [r4, #8]
  404698:	61a5      	strne	r5, [r4, #24]
  40469a:	4618      	movne	r0, r3
  40469c:	60a5      	streq	r5, [r4, #8]
  40469e:	e7d0      	b.n	404642 <setvbuf+0xc2>
  4046a0:	4648      	mov	r0, r9
  4046a2:	f001 f871 	bl	405788 <malloc>
  4046a6:	4607      	mov	r7, r0
  4046a8:	2800      	cmp	r0, #0
  4046aa:	d0bc      	beq.n	404626 <setvbuf+0xa6>
  4046ac:	89a3      	ldrh	r3, [r4, #12]
  4046ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4046b2:	81a3      	strh	r3, [r4, #12]
  4046b4:	464d      	mov	r5, r9
  4046b6:	e7d3      	b.n	404660 <setvbuf+0xe0>
  4046b8:	2000      	movs	r0, #0
  4046ba:	e7b6      	b.n	40462a <setvbuf+0xaa>
  4046bc:	46a9      	mov	r9, r5
  4046be:	e7f5      	b.n	4046ac <setvbuf+0x12c>
  4046c0:	60a0      	str	r0, [r4, #8]
  4046c2:	e7be      	b.n	404642 <setvbuf+0xc2>
  4046c4:	f04f 30ff 	mov.w	r0, #4294967295
  4046c8:	e7bb      	b.n	404642 <setvbuf+0xc2>
  4046ca:	bf00      	nop
  4046cc:	20400048 	.word	0x20400048
  4046d0:	00406bc0 	.word	0x00406bc0
  4046d4:	00406be0 	.word	0x00406be0
  4046d8:	00406ba0 	.word	0x00406ba0

004046dc <strlen>:
  4046dc:	4603      	mov	r3, r0
  4046de:	f813 2b01 	ldrb.w	r2, [r3], #1
  4046e2:	2a00      	cmp	r2, #0
  4046e4:	d1fb      	bne.n	4046de <strlen+0x2>
  4046e6:	1a18      	subs	r0, r3, r0
  4046e8:	3801      	subs	r0, #1
  4046ea:	4770      	bx	lr

004046ec <quorem>:
  4046ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4046f0:	6903      	ldr	r3, [r0, #16]
  4046f2:	690c      	ldr	r4, [r1, #16]
  4046f4:	429c      	cmp	r4, r3
  4046f6:	4680      	mov	r8, r0
  4046f8:	f300 8082 	bgt.w	404800 <quorem+0x114>
  4046fc:	3c01      	subs	r4, #1
  4046fe:	f101 0714 	add.w	r7, r1, #20
  404702:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  404706:	f100 0614 	add.w	r6, r0, #20
  40470a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  40470e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  404712:	eb06 030e 	add.w	r3, r6, lr
  404716:	3501      	adds	r5, #1
  404718:	eb07 090e 	add.w	r9, r7, lr
  40471c:	9301      	str	r3, [sp, #4]
  40471e:	fbb0 f5f5 	udiv	r5, r0, r5
  404722:	b395      	cbz	r5, 40478a <quorem+0x9e>
  404724:	f04f 0a00 	mov.w	sl, #0
  404728:	4638      	mov	r0, r7
  40472a:	46b4      	mov	ip, r6
  40472c:	46d3      	mov	fp, sl
  40472e:	f850 2b04 	ldr.w	r2, [r0], #4
  404732:	b293      	uxth	r3, r2
  404734:	fb05 a303 	mla	r3, r5, r3, sl
  404738:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  40473c:	b29b      	uxth	r3, r3
  40473e:	ebab 0303 	sub.w	r3, fp, r3
  404742:	0c12      	lsrs	r2, r2, #16
  404744:	f8bc b000 	ldrh.w	fp, [ip]
  404748:	fb05 a202 	mla	r2, r5, r2, sl
  40474c:	fa13 f38b 	uxtah	r3, r3, fp
  404750:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  404754:	fa1f fb82 	uxth.w	fp, r2
  404758:	f8dc 2000 	ldr.w	r2, [ip]
  40475c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  404760:	eb02 4223 	add.w	r2, r2, r3, asr #16
  404764:	b29b      	uxth	r3, r3
  404766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40476a:	4581      	cmp	r9, r0
  40476c:	ea4f 4b22 	mov.w	fp, r2, asr #16
  404770:	f84c 3b04 	str.w	r3, [ip], #4
  404774:	d2db      	bcs.n	40472e <quorem+0x42>
  404776:	f856 300e 	ldr.w	r3, [r6, lr]
  40477a:	b933      	cbnz	r3, 40478a <quorem+0x9e>
  40477c:	9b01      	ldr	r3, [sp, #4]
  40477e:	3b04      	subs	r3, #4
  404780:	429e      	cmp	r6, r3
  404782:	461a      	mov	r2, r3
  404784:	d330      	bcc.n	4047e8 <quorem+0xfc>
  404786:	f8c8 4010 	str.w	r4, [r8, #16]
  40478a:	4640      	mov	r0, r8
  40478c:	f001 fa61 	bl	405c52 <__mcmp>
  404790:	2800      	cmp	r0, #0
  404792:	db25      	blt.n	4047e0 <quorem+0xf4>
  404794:	3501      	adds	r5, #1
  404796:	4630      	mov	r0, r6
  404798:	f04f 0e00 	mov.w	lr, #0
  40479c:	f857 2b04 	ldr.w	r2, [r7], #4
  4047a0:	f8d0 c000 	ldr.w	ip, [r0]
  4047a4:	b293      	uxth	r3, r2
  4047a6:	ebae 0303 	sub.w	r3, lr, r3
  4047aa:	0c12      	lsrs	r2, r2, #16
  4047ac:	fa13 f38c 	uxtah	r3, r3, ip
  4047b0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  4047b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4047b8:	b29b      	uxth	r3, r3
  4047ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4047be:	45b9      	cmp	r9, r7
  4047c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
  4047c4:	f840 3b04 	str.w	r3, [r0], #4
  4047c8:	d2e8      	bcs.n	40479c <quorem+0xb0>
  4047ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  4047ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  4047d2:	b92a      	cbnz	r2, 4047e0 <quorem+0xf4>
  4047d4:	3b04      	subs	r3, #4
  4047d6:	429e      	cmp	r6, r3
  4047d8:	461a      	mov	r2, r3
  4047da:	d30b      	bcc.n	4047f4 <quorem+0x108>
  4047dc:	f8c8 4010 	str.w	r4, [r8, #16]
  4047e0:	4628      	mov	r0, r5
  4047e2:	b003      	add	sp, #12
  4047e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047e8:	6812      	ldr	r2, [r2, #0]
  4047ea:	3b04      	subs	r3, #4
  4047ec:	2a00      	cmp	r2, #0
  4047ee:	d1ca      	bne.n	404786 <quorem+0x9a>
  4047f0:	3c01      	subs	r4, #1
  4047f2:	e7c5      	b.n	404780 <quorem+0x94>
  4047f4:	6812      	ldr	r2, [r2, #0]
  4047f6:	3b04      	subs	r3, #4
  4047f8:	2a00      	cmp	r2, #0
  4047fa:	d1ef      	bne.n	4047dc <quorem+0xf0>
  4047fc:	3c01      	subs	r4, #1
  4047fe:	e7ea      	b.n	4047d6 <quorem+0xea>
  404800:	2000      	movs	r0, #0
  404802:	e7ee      	b.n	4047e2 <quorem+0xf6>
  404804:	0000      	movs	r0, r0
	...

00404808 <_dtoa_r>:
  404808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40480c:	6a46      	ldr	r6, [r0, #36]	; 0x24
  40480e:	b095      	sub	sp, #84	; 0x54
  404810:	4604      	mov	r4, r0
  404812:	9d21      	ldr	r5, [sp, #132]	; 0x84
  404814:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404818:	b93e      	cbnz	r6, 40482a <_dtoa_r+0x22>
  40481a:	2010      	movs	r0, #16
  40481c:	f000 ffb4 	bl	405788 <malloc>
  404820:	6260      	str	r0, [r4, #36]	; 0x24
  404822:	6046      	str	r6, [r0, #4]
  404824:	6086      	str	r6, [r0, #8]
  404826:	6006      	str	r6, [r0, #0]
  404828:	60c6      	str	r6, [r0, #12]
  40482a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40482c:	6819      	ldr	r1, [r3, #0]
  40482e:	b151      	cbz	r1, 404846 <_dtoa_r+0x3e>
  404830:	685a      	ldr	r2, [r3, #4]
  404832:	604a      	str	r2, [r1, #4]
  404834:	2301      	movs	r3, #1
  404836:	4093      	lsls	r3, r2
  404838:	608b      	str	r3, [r1, #8]
  40483a:	4620      	mov	r0, r4
  40483c:	f001 f834 	bl	4058a8 <_Bfree>
  404840:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404842:	2200      	movs	r2, #0
  404844:	601a      	str	r2, [r3, #0]
  404846:	9b03      	ldr	r3, [sp, #12]
  404848:	2b00      	cmp	r3, #0
  40484a:	bfbf      	itttt	lt
  40484c:	2301      	movlt	r3, #1
  40484e:	602b      	strlt	r3, [r5, #0]
  404850:	9b03      	ldrlt	r3, [sp, #12]
  404852:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  404856:	bfb2      	itee	lt
  404858:	9303      	strlt	r3, [sp, #12]
  40485a:	2300      	movge	r3, #0
  40485c:	602b      	strge	r3, [r5, #0]
  40485e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  404862:	4ba9      	ldr	r3, [pc, #676]	; (404b08 <_dtoa_r+0x300>)
  404864:	ea33 0309 	bics.w	r3, r3, r9
  404868:	d11b      	bne.n	4048a2 <_dtoa_r+0x9a>
  40486a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40486c:	f242 730f 	movw	r3, #9999	; 0x270f
  404870:	6013      	str	r3, [r2, #0]
  404872:	9b02      	ldr	r3, [sp, #8]
  404874:	b923      	cbnz	r3, 404880 <_dtoa_r+0x78>
  404876:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40487a:	2800      	cmp	r0, #0
  40487c:	f000 8581 	beq.w	405382 <_dtoa_r+0xb7a>
  404880:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404882:	b953      	cbnz	r3, 40489a <_dtoa_r+0x92>
  404884:	4ba1      	ldr	r3, [pc, #644]	; (404b0c <_dtoa_r+0x304>)
  404886:	e021      	b.n	4048cc <_dtoa_r+0xc4>
  404888:	4ba1      	ldr	r3, [pc, #644]	; (404b10 <_dtoa_r+0x308>)
  40488a:	9306      	str	r3, [sp, #24]
  40488c:	3308      	adds	r3, #8
  40488e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404890:	6013      	str	r3, [r2, #0]
  404892:	9806      	ldr	r0, [sp, #24]
  404894:	b015      	add	sp, #84	; 0x54
  404896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40489a:	4b9c      	ldr	r3, [pc, #624]	; (404b0c <_dtoa_r+0x304>)
  40489c:	9306      	str	r3, [sp, #24]
  40489e:	3303      	adds	r3, #3
  4048a0:	e7f5      	b.n	40488e <_dtoa_r+0x86>
  4048a2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4048a6:	2200      	movs	r2, #0
  4048a8:	2300      	movs	r3, #0
  4048aa:	4630      	mov	r0, r6
  4048ac:	4639      	mov	r1, r7
  4048ae:	f7ff f8f1 	bl	403a94 <__aeabi_dcmpeq>
  4048b2:	4680      	mov	r8, r0
  4048b4:	b160      	cbz	r0, 4048d0 <_dtoa_r+0xc8>
  4048b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4048b8:	2301      	movs	r3, #1
  4048ba:	6013      	str	r3, [r2, #0]
  4048bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4048be:	2b00      	cmp	r3, #0
  4048c0:	f000 855c 	beq.w	40537c <_dtoa_r+0xb74>
  4048c4:	4b93      	ldr	r3, [pc, #588]	; (404b14 <_dtoa_r+0x30c>)
  4048c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4048c8:	6013      	str	r3, [r2, #0]
  4048ca:	3b01      	subs	r3, #1
  4048cc:	9306      	str	r3, [sp, #24]
  4048ce:	e7e0      	b.n	404892 <_dtoa_r+0x8a>
  4048d0:	ab12      	add	r3, sp, #72	; 0x48
  4048d2:	9301      	str	r3, [sp, #4]
  4048d4:	ab13      	add	r3, sp, #76	; 0x4c
  4048d6:	9300      	str	r3, [sp, #0]
  4048d8:	4632      	mov	r2, r6
  4048da:	463b      	mov	r3, r7
  4048dc:	4620      	mov	r0, r4
  4048de:	f001 fa30 	bl	405d42 <__d2b>
  4048e2:	f3c9 550a 	ubfx	r5, r9, #20, #11
  4048e6:	4682      	mov	sl, r0
  4048e8:	2d00      	cmp	r5, #0
  4048ea:	d07c      	beq.n	4049e6 <_dtoa_r+0x1de>
  4048ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
  4048f0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4048f4:	4630      	mov	r0, r6
  4048f6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4048fa:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  4048fe:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  404902:	2200      	movs	r2, #0
  404904:	4b84      	ldr	r3, [pc, #528]	; (404b18 <_dtoa_r+0x310>)
  404906:	f7fe fca9 	bl	40325c <__aeabi_dsub>
  40490a:	a379      	add	r3, pc, #484	; (adr r3, 404af0 <_dtoa_r+0x2e8>)
  40490c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404910:	f7fe fe58 	bl	4035c4 <__aeabi_dmul>
  404914:	a378      	add	r3, pc, #480	; (adr r3, 404af8 <_dtoa_r+0x2f0>)
  404916:	e9d3 2300 	ldrd	r2, r3, [r3]
  40491a:	f7fe fca1 	bl	403260 <__adddf3>
  40491e:	4606      	mov	r6, r0
  404920:	4628      	mov	r0, r5
  404922:	460f      	mov	r7, r1
  404924:	f7fe fde8 	bl	4034f8 <__aeabi_i2d>
  404928:	a375      	add	r3, pc, #468	; (adr r3, 404b00 <_dtoa_r+0x2f8>)
  40492a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40492e:	f7fe fe49 	bl	4035c4 <__aeabi_dmul>
  404932:	4602      	mov	r2, r0
  404934:	460b      	mov	r3, r1
  404936:	4630      	mov	r0, r6
  404938:	4639      	mov	r1, r7
  40493a:	f7fe fc91 	bl	403260 <__adddf3>
  40493e:	4606      	mov	r6, r0
  404940:	460f      	mov	r7, r1
  404942:	f7ff f8ef 	bl	403b24 <__aeabi_d2iz>
  404946:	2200      	movs	r2, #0
  404948:	4683      	mov	fp, r0
  40494a:	2300      	movs	r3, #0
  40494c:	4630      	mov	r0, r6
  40494e:	4639      	mov	r1, r7
  404950:	f7ff f8aa 	bl	403aa8 <__aeabi_dcmplt>
  404954:	b158      	cbz	r0, 40496e <_dtoa_r+0x166>
  404956:	4658      	mov	r0, fp
  404958:	f7fe fdce 	bl	4034f8 <__aeabi_i2d>
  40495c:	4602      	mov	r2, r0
  40495e:	460b      	mov	r3, r1
  404960:	4630      	mov	r0, r6
  404962:	4639      	mov	r1, r7
  404964:	f7ff f896 	bl	403a94 <__aeabi_dcmpeq>
  404968:	b908      	cbnz	r0, 40496e <_dtoa_r+0x166>
  40496a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40496e:	f1bb 0f16 	cmp.w	fp, #22
  404972:	d857      	bhi.n	404a24 <_dtoa_r+0x21c>
  404974:	4969      	ldr	r1, [pc, #420]	; (404b1c <_dtoa_r+0x314>)
  404976:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40497a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40497e:	e9d1 0100 	ldrd	r0, r1, [r1]
  404982:	f7ff f8af 	bl	403ae4 <__aeabi_dcmpgt>
  404986:	2800      	cmp	r0, #0
  404988:	d04e      	beq.n	404a28 <_dtoa_r+0x220>
  40498a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40498e:	2300      	movs	r3, #0
  404990:	930d      	str	r3, [sp, #52]	; 0x34
  404992:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404994:	1b5d      	subs	r5, r3, r5
  404996:	1e6b      	subs	r3, r5, #1
  404998:	9307      	str	r3, [sp, #28]
  40499a:	bf43      	ittte	mi
  40499c:	2300      	movmi	r3, #0
  40499e:	f1c5 0801 	rsbmi	r8, r5, #1
  4049a2:	9307      	strmi	r3, [sp, #28]
  4049a4:	f04f 0800 	movpl.w	r8, #0
  4049a8:	f1bb 0f00 	cmp.w	fp, #0
  4049ac:	db3e      	blt.n	404a2c <_dtoa_r+0x224>
  4049ae:	9b07      	ldr	r3, [sp, #28]
  4049b0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  4049b4:	445b      	add	r3, fp
  4049b6:	9307      	str	r3, [sp, #28]
  4049b8:	2300      	movs	r3, #0
  4049ba:	9308      	str	r3, [sp, #32]
  4049bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4049be:	2b09      	cmp	r3, #9
  4049c0:	f200 80b0 	bhi.w	404b24 <_dtoa_r+0x31c>
  4049c4:	2b05      	cmp	r3, #5
  4049c6:	bfc4      	itt	gt
  4049c8:	3b04      	subgt	r3, #4
  4049ca:	931e      	strgt	r3, [sp, #120]	; 0x78
  4049cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4049ce:	f1a3 0302 	sub.w	r3, r3, #2
  4049d2:	bfcc      	ite	gt
  4049d4:	2600      	movgt	r6, #0
  4049d6:	2601      	movle	r6, #1
  4049d8:	2b03      	cmp	r3, #3
  4049da:	f200 80af 	bhi.w	404b3c <_dtoa_r+0x334>
  4049de:	e8df f003 	tbb	[pc, r3]
  4049e2:	8583      	.short	0x8583
  4049e4:	772d      	.short	0x772d
  4049e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4049e8:	9d12      	ldr	r5, [sp, #72]	; 0x48
  4049ea:	441d      	add	r5, r3
  4049ec:	f205 4332 	addw	r3, r5, #1074	; 0x432
  4049f0:	2b20      	cmp	r3, #32
  4049f2:	dd11      	ble.n	404a18 <_dtoa_r+0x210>
  4049f4:	9a02      	ldr	r2, [sp, #8]
  4049f6:	f205 4012 	addw	r0, r5, #1042	; 0x412
  4049fa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4049fe:	fa22 f000 	lsr.w	r0, r2, r0
  404a02:	fa09 f303 	lsl.w	r3, r9, r3
  404a06:	4318      	orrs	r0, r3
  404a08:	f7fe fd66 	bl	4034d8 <__aeabi_ui2d>
  404a0c:	2301      	movs	r3, #1
  404a0e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404a12:	3d01      	subs	r5, #1
  404a14:	9310      	str	r3, [sp, #64]	; 0x40
  404a16:	e774      	b.n	404902 <_dtoa_r+0xfa>
  404a18:	f1c3 0020 	rsb	r0, r3, #32
  404a1c:	9b02      	ldr	r3, [sp, #8]
  404a1e:	fa03 f000 	lsl.w	r0, r3, r0
  404a22:	e7f1      	b.n	404a08 <_dtoa_r+0x200>
  404a24:	2301      	movs	r3, #1
  404a26:	e7b3      	b.n	404990 <_dtoa_r+0x188>
  404a28:	900d      	str	r0, [sp, #52]	; 0x34
  404a2a:	e7b2      	b.n	404992 <_dtoa_r+0x18a>
  404a2c:	f1cb 0300 	rsb	r3, fp, #0
  404a30:	9308      	str	r3, [sp, #32]
  404a32:	2300      	movs	r3, #0
  404a34:	eba8 080b 	sub.w	r8, r8, fp
  404a38:	930c      	str	r3, [sp, #48]	; 0x30
  404a3a:	e7bf      	b.n	4049bc <_dtoa_r+0x1b4>
  404a3c:	2301      	movs	r3, #1
  404a3e:	9309      	str	r3, [sp, #36]	; 0x24
  404a40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404a42:	2b00      	cmp	r3, #0
  404a44:	dd7d      	ble.n	404b42 <_dtoa_r+0x33a>
  404a46:	9304      	str	r3, [sp, #16]
  404a48:	4699      	mov	r9, r3
  404a4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  404a4c:	2200      	movs	r2, #0
  404a4e:	606a      	str	r2, [r5, #4]
  404a50:	2104      	movs	r1, #4
  404a52:	f101 0214 	add.w	r2, r1, #20
  404a56:	429a      	cmp	r2, r3
  404a58:	d978      	bls.n	404b4c <_dtoa_r+0x344>
  404a5a:	6869      	ldr	r1, [r5, #4]
  404a5c:	4620      	mov	r0, r4
  404a5e:	f000 feef 	bl	405840 <_Balloc>
  404a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404a64:	6028      	str	r0, [r5, #0]
  404a66:	681b      	ldr	r3, [r3, #0]
  404a68:	9306      	str	r3, [sp, #24]
  404a6a:	f1b9 0f0e 	cmp.w	r9, #14
  404a6e:	f200 80ee 	bhi.w	404c4e <_dtoa_r+0x446>
  404a72:	2e00      	cmp	r6, #0
  404a74:	f000 80eb 	beq.w	404c4e <_dtoa_r+0x446>
  404a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404a7c:	f1bb 0f00 	cmp.w	fp, #0
  404a80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  404a84:	dd77      	ble.n	404b76 <_dtoa_r+0x36e>
  404a86:	4a25      	ldr	r2, [pc, #148]	; (404b1c <_dtoa_r+0x314>)
  404a88:	f00b 030f 	and.w	r3, fp, #15
  404a8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404a90:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a94:	ea4f 162b 	mov.w	r6, fp, asr #4
  404a98:	06f0      	lsls	r0, r6, #27
  404a9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  404a9e:	d55a      	bpl.n	404b56 <_dtoa_r+0x34e>
  404aa0:	4b1f      	ldr	r3, [pc, #124]	; (404b20 <_dtoa_r+0x318>)
  404aa2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404aa6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  404aaa:	f7fe feb5 	bl	403818 <__aeabi_ddiv>
  404aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404ab2:	f006 060f 	and.w	r6, r6, #15
  404ab6:	2503      	movs	r5, #3
  404ab8:	4f19      	ldr	r7, [pc, #100]	; (404b20 <_dtoa_r+0x318>)
  404aba:	2e00      	cmp	r6, #0
  404abc:	d14d      	bne.n	404b5a <_dtoa_r+0x352>
  404abe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ac6:	f7fe fea7 	bl	403818 <__aeabi_ddiv>
  404aca:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404ace:	e06c      	b.n	404baa <_dtoa_r+0x3a2>
  404ad0:	2301      	movs	r3, #1
  404ad2:	9309      	str	r3, [sp, #36]	; 0x24
  404ad4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404ad6:	445b      	add	r3, fp
  404ad8:	f103 0901 	add.w	r9, r3, #1
  404adc:	9304      	str	r3, [sp, #16]
  404ade:	464b      	mov	r3, r9
  404ae0:	2b01      	cmp	r3, #1
  404ae2:	bfb8      	it	lt
  404ae4:	2301      	movlt	r3, #1
  404ae6:	e7b0      	b.n	404a4a <_dtoa_r+0x242>
  404ae8:	2300      	movs	r3, #0
  404aea:	e7a8      	b.n	404a3e <_dtoa_r+0x236>
  404aec:	2300      	movs	r3, #0
  404aee:	e7f0      	b.n	404ad2 <_dtoa_r+0x2ca>
  404af0:	636f4361 	.word	0x636f4361
  404af4:	3fd287a7 	.word	0x3fd287a7
  404af8:	8b60c8b3 	.word	0x8b60c8b3
  404afc:	3fc68a28 	.word	0x3fc68a28
  404b00:	509f79fb 	.word	0x509f79fb
  404b04:	3fd34413 	.word	0x3fd34413
  404b08:	7ff00000 	.word	0x7ff00000
  404b0c:	00406b99 	.word	0x00406b99
  404b10:	00406b90 	.word	0x00406b90
  404b14:	00406b6d 	.word	0x00406b6d
  404b18:	3ff80000 	.word	0x3ff80000
  404b1c:	00406c28 	.word	0x00406c28
  404b20:	00406c00 	.word	0x00406c00
  404b24:	2601      	movs	r6, #1
  404b26:	2300      	movs	r3, #0
  404b28:	931e      	str	r3, [sp, #120]	; 0x78
  404b2a:	9609      	str	r6, [sp, #36]	; 0x24
  404b2c:	f04f 33ff 	mov.w	r3, #4294967295
  404b30:	9304      	str	r3, [sp, #16]
  404b32:	4699      	mov	r9, r3
  404b34:	2200      	movs	r2, #0
  404b36:	2312      	movs	r3, #18
  404b38:	921f      	str	r2, [sp, #124]	; 0x7c
  404b3a:	e786      	b.n	404a4a <_dtoa_r+0x242>
  404b3c:	2301      	movs	r3, #1
  404b3e:	9309      	str	r3, [sp, #36]	; 0x24
  404b40:	e7f4      	b.n	404b2c <_dtoa_r+0x324>
  404b42:	2301      	movs	r3, #1
  404b44:	9304      	str	r3, [sp, #16]
  404b46:	4699      	mov	r9, r3
  404b48:	461a      	mov	r2, r3
  404b4a:	e7f5      	b.n	404b38 <_dtoa_r+0x330>
  404b4c:	686a      	ldr	r2, [r5, #4]
  404b4e:	3201      	adds	r2, #1
  404b50:	606a      	str	r2, [r5, #4]
  404b52:	0049      	lsls	r1, r1, #1
  404b54:	e77d      	b.n	404a52 <_dtoa_r+0x24a>
  404b56:	2502      	movs	r5, #2
  404b58:	e7ae      	b.n	404ab8 <_dtoa_r+0x2b0>
  404b5a:	07f1      	lsls	r1, r6, #31
  404b5c:	d508      	bpl.n	404b70 <_dtoa_r+0x368>
  404b5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404b62:	e9d7 2300 	ldrd	r2, r3, [r7]
  404b66:	f7fe fd2d 	bl	4035c4 <__aeabi_dmul>
  404b6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404b6e:	3501      	adds	r5, #1
  404b70:	1076      	asrs	r6, r6, #1
  404b72:	3708      	adds	r7, #8
  404b74:	e7a1      	b.n	404aba <_dtoa_r+0x2b2>
  404b76:	f000 80a5 	beq.w	404cc4 <_dtoa_r+0x4bc>
  404b7a:	f1cb 0600 	rsb	r6, fp, #0
  404b7e:	4ba3      	ldr	r3, [pc, #652]	; (404e0c <_dtoa_r+0x604>)
  404b80:	4fa3      	ldr	r7, [pc, #652]	; (404e10 <_dtoa_r+0x608>)
  404b82:	f006 020f 	and.w	r2, r6, #15
  404b86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404b92:	f7fe fd17 	bl	4035c4 <__aeabi_dmul>
  404b96:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404b9a:	1136      	asrs	r6, r6, #4
  404b9c:	2300      	movs	r3, #0
  404b9e:	2502      	movs	r5, #2
  404ba0:	2e00      	cmp	r6, #0
  404ba2:	f040 8084 	bne.w	404cae <_dtoa_r+0x4a6>
  404ba6:	2b00      	cmp	r3, #0
  404ba8:	d18f      	bne.n	404aca <_dtoa_r+0x2c2>
  404baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404bac:	2b00      	cmp	r3, #0
  404bae:	f000 808b 	beq.w	404cc8 <_dtoa_r+0x4c0>
  404bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404bb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  404bba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404bbe:	2200      	movs	r2, #0
  404bc0:	4b94      	ldr	r3, [pc, #592]	; (404e14 <_dtoa_r+0x60c>)
  404bc2:	f7fe ff71 	bl	403aa8 <__aeabi_dcmplt>
  404bc6:	2800      	cmp	r0, #0
  404bc8:	d07e      	beq.n	404cc8 <_dtoa_r+0x4c0>
  404bca:	f1b9 0f00 	cmp.w	r9, #0
  404bce:	d07b      	beq.n	404cc8 <_dtoa_r+0x4c0>
  404bd0:	9b04      	ldr	r3, [sp, #16]
  404bd2:	2b00      	cmp	r3, #0
  404bd4:	dd37      	ble.n	404c46 <_dtoa_r+0x43e>
  404bd6:	2200      	movs	r2, #0
  404bd8:	4b8f      	ldr	r3, [pc, #572]	; (404e18 <_dtoa_r+0x610>)
  404bda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404bde:	f7fe fcf1 	bl	4035c4 <__aeabi_dmul>
  404be2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404be6:	9e04      	ldr	r6, [sp, #16]
  404be8:	f10b 37ff 	add.w	r7, fp, #4294967295
  404bec:	3501      	adds	r5, #1
  404bee:	4628      	mov	r0, r5
  404bf0:	f7fe fc82 	bl	4034f8 <__aeabi_i2d>
  404bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404bf8:	f7fe fce4 	bl	4035c4 <__aeabi_dmul>
  404bfc:	4b87      	ldr	r3, [pc, #540]	; (404e1c <_dtoa_r+0x614>)
  404bfe:	2200      	movs	r2, #0
  404c00:	f7fe fb2e 	bl	403260 <__adddf3>
  404c04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404c0a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  404c0e:	950b      	str	r5, [sp, #44]	; 0x2c
  404c10:	2e00      	cmp	r6, #0
  404c12:	d15c      	bne.n	404cce <_dtoa_r+0x4c6>
  404c14:	2200      	movs	r2, #0
  404c16:	4b82      	ldr	r3, [pc, #520]	; (404e20 <_dtoa_r+0x618>)
  404c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404c1c:	f7fe fb1e 	bl	40325c <__aeabi_dsub>
  404c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404c22:	462b      	mov	r3, r5
  404c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404c28:	f7fe ff5c 	bl	403ae4 <__aeabi_dcmpgt>
  404c2c:	2800      	cmp	r0, #0
  404c2e:	f040 82f7 	bne.w	405220 <_dtoa_r+0xa18>
  404c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404c34:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  404c38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404c3c:	f7fe ff34 	bl	403aa8 <__aeabi_dcmplt>
  404c40:	2800      	cmp	r0, #0
  404c42:	f040 82eb 	bne.w	40521c <_dtoa_r+0xa14>
  404c46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  404c4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404c4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404c50:	2b00      	cmp	r3, #0
  404c52:	f2c0 8151 	blt.w	404ef8 <_dtoa_r+0x6f0>
  404c56:	f1bb 0f0e 	cmp.w	fp, #14
  404c5a:	f300 814d 	bgt.w	404ef8 <_dtoa_r+0x6f0>
  404c5e:	4b6b      	ldr	r3, [pc, #428]	; (404e0c <_dtoa_r+0x604>)
  404c60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  404c64:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c68:	e9cd 2304 	strd	r2, r3, [sp, #16]
  404c6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404c6e:	2b00      	cmp	r3, #0
  404c70:	f280 80da 	bge.w	404e28 <_dtoa_r+0x620>
  404c74:	f1b9 0f00 	cmp.w	r9, #0
  404c78:	f300 80d6 	bgt.w	404e28 <_dtoa_r+0x620>
  404c7c:	f040 82cd 	bne.w	40521a <_dtoa_r+0xa12>
  404c80:	2200      	movs	r2, #0
  404c82:	4b67      	ldr	r3, [pc, #412]	; (404e20 <_dtoa_r+0x618>)
  404c84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404c88:	f7fe fc9c 	bl	4035c4 <__aeabi_dmul>
  404c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404c90:	f7fe ff1e 	bl	403ad0 <__aeabi_dcmpge>
  404c94:	464e      	mov	r6, r9
  404c96:	464f      	mov	r7, r9
  404c98:	2800      	cmp	r0, #0
  404c9a:	f040 82a4 	bne.w	4051e6 <_dtoa_r+0x9de>
  404c9e:	9b06      	ldr	r3, [sp, #24]
  404ca0:	9a06      	ldr	r2, [sp, #24]
  404ca2:	1c5d      	adds	r5, r3, #1
  404ca4:	2331      	movs	r3, #49	; 0x31
  404ca6:	7013      	strb	r3, [r2, #0]
  404ca8:	f10b 0b01 	add.w	fp, fp, #1
  404cac:	e29f      	b.n	4051ee <_dtoa_r+0x9e6>
  404cae:	07f2      	lsls	r2, r6, #31
  404cb0:	d505      	bpl.n	404cbe <_dtoa_r+0x4b6>
  404cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
  404cb6:	f7fe fc85 	bl	4035c4 <__aeabi_dmul>
  404cba:	3501      	adds	r5, #1
  404cbc:	2301      	movs	r3, #1
  404cbe:	1076      	asrs	r6, r6, #1
  404cc0:	3708      	adds	r7, #8
  404cc2:	e76d      	b.n	404ba0 <_dtoa_r+0x398>
  404cc4:	2502      	movs	r5, #2
  404cc6:	e770      	b.n	404baa <_dtoa_r+0x3a2>
  404cc8:	465f      	mov	r7, fp
  404cca:	464e      	mov	r6, r9
  404ccc:	e78f      	b.n	404bee <_dtoa_r+0x3e6>
  404cce:	9a06      	ldr	r2, [sp, #24]
  404cd0:	4b4e      	ldr	r3, [pc, #312]	; (404e0c <_dtoa_r+0x604>)
  404cd2:	4432      	add	r2, r6
  404cd4:	9211      	str	r2, [sp, #68]	; 0x44
  404cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404cd8:	1e71      	subs	r1, r6, #1
  404cda:	2a00      	cmp	r2, #0
  404cdc:	d048      	beq.n	404d70 <_dtoa_r+0x568>
  404cde:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  404ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ce6:	2000      	movs	r0, #0
  404ce8:	494e      	ldr	r1, [pc, #312]	; (404e24 <_dtoa_r+0x61c>)
  404cea:	f7fe fd95 	bl	403818 <__aeabi_ddiv>
  404cee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404cf2:	f7fe fab3 	bl	40325c <__aeabi_dsub>
  404cf6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404cfa:	9d06      	ldr	r5, [sp, #24]
  404cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d00:	f7fe ff10 	bl	403b24 <__aeabi_d2iz>
  404d04:	4606      	mov	r6, r0
  404d06:	f7fe fbf7 	bl	4034f8 <__aeabi_i2d>
  404d0a:	4602      	mov	r2, r0
  404d0c:	460b      	mov	r3, r1
  404d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d12:	f7fe faa3 	bl	40325c <__aeabi_dsub>
  404d16:	3630      	adds	r6, #48	; 0x30
  404d18:	f805 6b01 	strb.w	r6, [r5], #1
  404d1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d24:	f7fe fec0 	bl	403aa8 <__aeabi_dcmplt>
  404d28:	2800      	cmp	r0, #0
  404d2a:	d165      	bne.n	404df8 <_dtoa_r+0x5f0>
  404d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404d30:	2000      	movs	r0, #0
  404d32:	4938      	ldr	r1, [pc, #224]	; (404e14 <_dtoa_r+0x60c>)
  404d34:	f7fe fa92 	bl	40325c <__aeabi_dsub>
  404d38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404d3c:	f7fe feb4 	bl	403aa8 <__aeabi_dcmplt>
  404d40:	2800      	cmp	r0, #0
  404d42:	f040 80b9 	bne.w	404eb8 <_dtoa_r+0x6b0>
  404d46:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d48:	429d      	cmp	r5, r3
  404d4a:	f43f af7c 	beq.w	404c46 <_dtoa_r+0x43e>
  404d4e:	2200      	movs	r2, #0
  404d50:	4b31      	ldr	r3, [pc, #196]	; (404e18 <_dtoa_r+0x610>)
  404d52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404d56:	f7fe fc35 	bl	4035c4 <__aeabi_dmul>
  404d5a:	2200      	movs	r2, #0
  404d5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404d60:	4b2d      	ldr	r3, [pc, #180]	; (404e18 <_dtoa_r+0x610>)
  404d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d66:	f7fe fc2d 	bl	4035c4 <__aeabi_dmul>
  404d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d6e:	e7c5      	b.n	404cfc <_dtoa_r+0x4f4>
  404d70:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404d74:	e9d1 0100 	ldrd	r0, r1, [r1]
  404d78:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404d7c:	f7fe fc22 	bl	4035c4 <__aeabi_dmul>
  404d80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404d84:	9d06      	ldr	r5, [sp, #24]
  404d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d8a:	f7fe fecb 	bl	403b24 <__aeabi_d2iz>
  404d8e:	4606      	mov	r6, r0
  404d90:	f7fe fbb2 	bl	4034f8 <__aeabi_i2d>
  404d94:	3630      	adds	r6, #48	; 0x30
  404d96:	4602      	mov	r2, r0
  404d98:	460b      	mov	r3, r1
  404d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d9e:	f7fe fa5d 	bl	40325c <__aeabi_dsub>
  404da2:	f805 6b01 	strb.w	r6, [r5], #1
  404da6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404da8:	42ab      	cmp	r3, r5
  404daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404dae:	f04f 0200 	mov.w	r2, #0
  404db2:	d125      	bne.n	404e00 <_dtoa_r+0x5f8>
  404db4:	4b1b      	ldr	r3, [pc, #108]	; (404e24 <_dtoa_r+0x61c>)
  404db6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404dba:	f7fe fa51 	bl	403260 <__adddf3>
  404dbe:	4602      	mov	r2, r0
  404dc0:	460b      	mov	r3, r1
  404dc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404dc6:	f7fe fe8d 	bl	403ae4 <__aeabi_dcmpgt>
  404dca:	2800      	cmp	r0, #0
  404dcc:	d174      	bne.n	404eb8 <_dtoa_r+0x6b0>
  404dce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404dd2:	2000      	movs	r0, #0
  404dd4:	4913      	ldr	r1, [pc, #76]	; (404e24 <_dtoa_r+0x61c>)
  404dd6:	f7fe fa41 	bl	40325c <__aeabi_dsub>
  404dda:	4602      	mov	r2, r0
  404ddc:	460b      	mov	r3, r1
  404dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404de2:	f7fe fe61 	bl	403aa8 <__aeabi_dcmplt>
  404de6:	2800      	cmp	r0, #0
  404de8:	f43f af2d 	beq.w	404c46 <_dtoa_r+0x43e>
  404dec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404df0:	2b30      	cmp	r3, #48	; 0x30
  404df2:	f105 32ff 	add.w	r2, r5, #4294967295
  404df6:	d001      	beq.n	404dfc <_dtoa_r+0x5f4>
  404df8:	46bb      	mov	fp, r7
  404dfa:	e04c      	b.n	404e96 <_dtoa_r+0x68e>
  404dfc:	4615      	mov	r5, r2
  404dfe:	e7f5      	b.n	404dec <_dtoa_r+0x5e4>
  404e00:	4b05      	ldr	r3, [pc, #20]	; (404e18 <_dtoa_r+0x610>)
  404e02:	f7fe fbdf 	bl	4035c4 <__aeabi_dmul>
  404e06:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404e0a:	e7bc      	b.n	404d86 <_dtoa_r+0x57e>
  404e0c:	00406c28 	.word	0x00406c28
  404e10:	00406c00 	.word	0x00406c00
  404e14:	3ff00000 	.word	0x3ff00000
  404e18:	40240000 	.word	0x40240000
  404e1c:	401c0000 	.word	0x401c0000
  404e20:	40140000 	.word	0x40140000
  404e24:	3fe00000 	.word	0x3fe00000
  404e28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  404e2c:	9d06      	ldr	r5, [sp, #24]
  404e2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404e32:	4630      	mov	r0, r6
  404e34:	4639      	mov	r1, r7
  404e36:	f7fe fcef 	bl	403818 <__aeabi_ddiv>
  404e3a:	f7fe fe73 	bl	403b24 <__aeabi_d2iz>
  404e3e:	4680      	mov	r8, r0
  404e40:	f7fe fb5a 	bl	4034f8 <__aeabi_i2d>
  404e44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404e48:	f7fe fbbc 	bl	4035c4 <__aeabi_dmul>
  404e4c:	4602      	mov	r2, r0
  404e4e:	460b      	mov	r3, r1
  404e50:	4630      	mov	r0, r6
  404e52:	4639      	mov	r1, r7
  404e54:	f108 0630 	add.w	r6, r8, #48	; 0x30
  404e58:	f7fe fa00 	bl	40325c <__aeabi_dsub>
  404e5c:	f805 6b01 	strb.w	r6, [r5], #1
  404e60:	9e06      	ldr	r6, [sp, #24]
  404e62:	1bae      	subs	r6, r5, r6
  404e64:	45b1      	cmp	r9, r6
  404e66:	4602      	mov	r2, r0
  404e68:	460b      	mov	r3, r1
  404e6a:	d138      	bne.n	404ede <_dtoa_r+0x6d6>
  404e6c:	f7fe f9f8 	bl	403260 <__adddf3>
  404e70:	4606      	mov	r6, r0
  404e72:	460f      	mov	r7, r1
  404e74:	4602      	mov	r2, r0
  404e76:	460b      	mov	r3, r1
  404e78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404e7c:	f7fe fe14 	bl	403aa8 <__aeabi_dcmplt>
  404e80:	b9c8      	cbnz	r0, 404eb6 <_dtoa_r+0x6ae>
  404e82:	4632      	mov	r2, r6
  404e84:	463b      	mov	r3, r7
  404e86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404e8a:	f7fe fe03 	bl	403a94 <__aeabi_dcmpeq>
  404e8e:	b110      	cbz	r0, 404e96 <_dtoa_r+0x68e>
  404e90:	f018 0f01 	tst.w	r8, #1
  404e94:	d10f      	bne.n	404eb6 <_dtoa_r+0x6ae>
  404e96:	4651      	mov	r1, sl
  404e98:	4620      	mov	r0, r4
  404e9a:	f000 fd05 	bl	4058a8 <_Bfree>
  404e9e:	2300      	movs	r3, #0
  404ea0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404ea2:	702b      	strb	r3, [r5, #0]
  404ea4:	f10b 0301 	add.w	r3, fp, #1
  404ea8:	6013      	str	r3, [r2, #0]
  404eaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404eac:	2b00      	cmp	r3, #0
  404eae:	f43f acf0 	beq.w	404892 <_dtoa_r+0x8a>
  404eb2:	601d      	str	r5, [r3, #0]
  404eb4:	e4ed      	b.n	404892 <_dtoa_r+0x8a>
  404eb6:	465f      	mov	r7, fp
  404eb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  404ebc:	2a39      	cmp	r2, #57	; 0x39
  404ebe:	f105 33ff 	add.w	r3, r5, #4294967295
  404ec2:	d106      	bne.n	404ed2 <_dtoa_r+0x6ca>
  404ec4:	9a06      	ldr	r2, [sp, #24]
  404ec6:	429a      	cmp	r2, r3
  404ec8:	d107      	bne.n	404eda <_dtoa_r+0x6d2>
  404eca:	2330      	movs	r3, #48	; 0x30
  404ecc:	7013      	strb	r3, [r2, #0]
  404ece:	3701      	adds	r7, #1
  404ed0:	4613      	mov	r3, r2
  404ed2:	781a      	ldrb	r2, [r3, #0]
  404ed4:	3201      	adds	r2, #1
  404ed6:	701a      	strb	r2, [r3, #0]
  404ed8:	e78e      	b.n	404df8 <_dtoa_r+0x5f0>
  404eda:	461d      	mov	r5, r3
  404edc:	e7ec      	b.n	404eb8 <_dtoa_r+0x6b0>
  404ede:	2200      	movs	r2, #0
  404ee0:	4bb4      	ldr	r3, [pc, #720]	; (4051b4 <_dtoa_r+0x9ac>)
  404ee2:	f7fe fb6f 	bl	4035c4 <__aeabi_dmul>
  404ee6:	2200      	movs	r2, #0
  404ee8:	2300      	movs	r3, #0
  404eea:	4606      	mov	r6, r0
  404eec:	460f      	mov	r7, r1
  404eee:	f7fe fdd1 	bl	403a94 <__aeabi_dcmpeq>
  404ef2:	2800      	cmp	r0, #0
  404ef4:	d09b      	beq.n	404e2e <_dtoa_r+0x626>
  404ef6:	e7ce      	b.n	404e96 <_dtoa_r+0x68e>
  404ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404efa:	2a00      	cmp	r2, #0
  404efc:	f000 8129 	beq.w	405152 <_dtoa_r+0x94a>
  404f00:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404f02:	2a01      	cmp	r2, #1
  404f04:	f300 810e 	bgt.w	405124 <_dtoa_r+0x91c>
  404f08:	9a10      	ldr	r2, [sp, #64]	; 0x40
  404f0a:	2a00      	cmp	r2, #0
  404f0c:	f000 8106 	beq.w	40511c <_dtoa_r+0x914>
  404f10:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404f14:	9e08      	ldr	r6, [sp, #32]
  404f16:	4645      	mov	r5, r8
  404f18:	9a07      	ldr	r2, [sp, #28]
  404f1a:	2101      	movs	r1, #1
  404f1c:	441a      	add	r2, r3
  404f1e:	4620      	mov	r0, r4
  404f20:	4498      	add	r8, r3
  404f22:	9207      	str	r2, [sp, #28]
  404f24:	f000 fd60 	bl	4059e8 <__i2b>
  404f28:	4607      	mov	r7, r0
  404f2a:	2d00      	cmp	r5, #0
  404f2c:	dd0b      	ble.n	404f46 <_dtoa_r+0x73e>
  404f2e:	9b07      	ldr	r3, [sp, #28]
  404f30:	2b00      	cmp	r3, #0
  404f32:	dd08      	ble.n	404f46 <_dtoa_r+0x73e>
  404f34:	42ab      	cmp	r3, r5
  404f36:	9a07      	ldr	r2, [sp, #28]
  404f38:	bfa8      	it	ge
  404f3a:	462b      	movge	r3, r5
  404f3c:	eba8 0803 	sub.w	r8, r8, r3
  404f40:	1aed      	subs	r5, r5, r3
  404f42:	1ad3      	subs	r3, r2, r3
  404f44:	9307      	str	r3, [sp, #28]
  404f46:	9b08      	ldr	r3, [sp, #32]
  404f48:	b1fb      	cbz	r3, 404f8a <_dtoa_r+0x782>
  404f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404f4c:	2b00      	cmp	r3, #0
  404f4e:	f000 8104 	beq.w	40515a <_dtoa_r+0x952>
  404f52:	2e00      	cmp	r6, #0
  404f54:	dd11      	ble.n	404f7a <_dtoa_r+0x772>
  404f56:	4639      	mov	r1, r7
  404f58:	4632      	mov	r2, r6
  404f5a:	4620      	mov	r0, r4
  404f5c:	f000 fdda 	bl	405b14 <__pow5mult>
  404f60:	4652      	mov	r2, sl
  404f62:	4601      	mov	r1, r0
  404f64:	4607      	mov	r7, r0
  404f66:	4620      	mov	r0, r4
  404f68:	f000 fd47 	bl	4059fa <__multiply>
  404f6c:	4651      	mov	r1, sl
  404f6e:	900a      	str	r0, [sp, #40]	; 0x28
  404f70:	4620      	mov	r0, r4
  404f72:	f000 fc99 	bl	4058a8 <_Bfree>
  404f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f78:	469a      	mov	sl, r3
  404f7a:	9b08      	ldr	r3, [sp, #32]
  404f7c:	1b9a      	subs	r2, r3, r6
  404f7e:	d004      	beq.n	404f8a <_dtoa_r+0x782>
  404f80:	4651      	mov	r1, sl
  404f82:	4620      	mov	r0, r4
  404f84:	f000 fdc6 	bl	405b14 <__pow5mult>
  404f88:	4682      	mov	sl, r0
  404f8a:	2101      	movs	r1, #1
  404f8c:	4620      	mov	r0, r4
  404f8e:	f000 fd2b 	bl	4059e8 <__i2b>
  404f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404f94:	2b00      	cmp	r3, #0
  404f96:	4606      	mov	r6, r0
  404f98:	f340 80e1 	ble.w	40515e <_dtoa_r+0x956>
  404f9c:	461a      	mov	r2, r3
  404f9e:	4601      	mov	r1, r0
  404fa0:	4620      	mov	r0, r4
  404fa2:	f000 fdb7 	bl	405b14 <__pow5mult>
  404fa6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404fa8:	2b01      	cmp	r3, #1
  404faa:	4606      	mov	r6, r0
  404fac:	f340 80da 	ble.w	405164 <_dtoa_r+0x95c>
  404fb0:	2300      	movs	r3, #0
  404fb2:	9308      	str	r3, [sp, #32]
  404fb4:	6933      	ldr	r3, [r6, #16]
  404fb6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  404fba:	6918      	ldr	r0, [r3, #16]
  404fbc:	f000 fcc6 	bl	40594c <__hi0bits>
  404fc0:	f1c0 0020 	rsb	r0, r0, #32
  404fc4:	9b07      	ldr	r3, [sp, #28]
  404fc6:	4418      	add	r0, r3
  404fc8:	f010 001f 	ands.w	r0, r0, #31
  404fcc:	f000 80f0 	beq.w	4051b0 <_dtoa_r+0x9a8>
  404fd0:	f1c0 0320 	rsb	r3, r0, #32
  404fd4:	2b04      	cmp	r3, #4
  404fd6:	f340 80e2 	ble.w	40519e <_dtoa_r+0x996>
  404fda:	9b07      	ldr	r3, [sp, #28]
  404fdc:	f1c0 001c 	rsb	r0, r0, #28
  404fe0:	4480      	add	r8, r0
  404fe2:	4405      	add	r5, r0
  404fe4:	4403      	add	r3, r0
  404fe6:	9307      	str	r3, [sp, #28]
  404fe8:	f1b8 0f00 	cmp.w	r8, #0
  404fec:	dd05      	ble.n	404ffa <_dtoa_r+0x7f2>
  404fee:	4651      	mov	r1, sl
  404ff0:	4642      	mov	r2, r8
  404ff2:	4620      	mov	r0, r4
  404ff4:	f000 fddc 	bl	405bb0 <__lshift>
  404ff8:	4682      	mov	sl, r0
  404ffa:	9b07      	ldr	r3, [sp, #28]
  404ffc:	2b00      	cmp	r3, #0
  404ffe:	dd05      	ble.n	40500c <_dtoa_r+0x804>
  405000:	4631      	mov	r1, r6
  405002:	461a      	mov	r2, r3
  405004:	4620      	mov	r0, r4
  405006:	f000 fdd3 	bl	405bb0 <__lshift>
  40500a:	4606      	mov	r6, r0
  40500c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40500e:	2b00      	cmp	r3, #0
  405010:	f000 80d2 	beq.w	4051b8 <_dtoa_r+0x9b0>
  405014:	4631      	mov	r1, r6
  405016:	4650      	mov	r0, sl
  405018:	f000 fe1b 	bl	405c52 <__mcmp>
  40501c:	2800      	cmp	r0, #0
  40501e:	f280 80cb 	bge.w	4051b8 <_dtoa_r+0x9b0>
  405022:	2300      	movs	r3, #0
  405024:	4651      	mov	r1, sl
  405026:	220a      	movs	r2, #10
  405028:	4620      	mov	r0, r4
  40502a:	f000 fc54 	bl	4058d6 <__multadd>
  40502e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405030:	f10b 3bff 	add.w	fp, fp, #4294967295
  405034:	4682      	mov	sl, r0
  405036:	2b00      	cmp	r3, #0
  405038:	f000 81aa 	beq.w	405390 <_dtoa_r+0xb88>
  40503c:	2300      	movs	r3, #0
  40503e:	4639      	mov	r1, r7
  405040:	220a      	movs	r2, #10
  405042:	4620      	mov	r0, r4
  405044:	f000 fc47 	bl	4058d6 <__multadd>
  405048:	9b04      	ldr	r3, [sp, #16]
  40504a:	2b00      	cmp	r3, #0
  40504c:	4607      	mov	r7, r0
  40504e:	dc03      	bgt.n	405058 <_dtoa_r+0x850>
  405050:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405052:	2b02      	cmp	r3, #2
  405054:	f300 80b8 	bgt.w	4051c8 <_dtoa_r+0x9c0>
  405058:	2d00      	cmp	r5, #0
  40505a:	dd05      	ble.n	405068 <_dtoa_r+0x860>
  40505c:	4639      	mov	r1, r7
  40505e:	462a      	mov	r2, r5
  405060:	4620      	mov	r0, r4
  405062:	f000 fda5 	bl	405bb0 <__lshift>
  405066:	4607      	mov	r7, r0
  405068:	9b08      	ldr	r3, [sp, #32]
  40506a:	2b00      	cmp	r3, #0
  40506c:	f000 8110 	beq.w	405290 <_dtoa_r+0xa88>
  405070:	6879      	ldr	r1, [r7, #4]
  405072:	4620      	mov	r0, r4
  405074:	f000 fbe4 	bl	405840 <_Balloc>
  405078:	693a      	ldr	r2, [r7, #16]
  40507a:	3202      	adds	r2, #2
  40507c:	4605      	mov	r5, r0
  40507e:	0092      	lsls	r2, r2, #2
  405080:	f107 010c 	add.w	r1, r7, #12
  405084:	300c      	adds	r0, #12
  405086:	f7fe fde9 	bl	403c5c <memcpy>
  40508a:	2201      	movs	r2, #1
  40508c:	4629      	mov	r1, r5
  40508e:	4620      	mov	r0, r4
  405090:	f000 fd8e 	bl	405bb0 <__lshift>
  405094:	9b02      	ldr	r3, [sp, #8]
  405096:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40509a:	9707      	str	r7, [sp, #28]
  40509c:	f003 0301 	and.w	r3, r3, #1
  4050a0:	4607      	mov	r7, r0
  4050a2:	9308      	str	r3, [sp, #32]
  4050a4:	4631      	mov	r1, r6
  4050a6:	4650      	mov	r0, sl
  4050a8:	f7ff fb20 	bl	4046ec <quorem>
  4050ac:	9907      	ldr	r1, [sp, #28]
  4050ae:	4605      	mov	r5, r0
  4050b0:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4050b4:	4650      	mov	r0, sl
  4050b6:	f000 fdcc 	bl	405c52 <__mcmp>
  4050ba:	463a      	mov	r2, r7
  4050bc:	9002      	str	r0, [sp, #8]
  4050be:	4631      	mov	r1, r6
  4050c0:	4620      	mov	r0, r4
  4050c2:	f000 fde0 	bl	405c86 <__mdiff>
  4050c6:	68c3      	ldr	r3, [r0, #12]
  4050c8:	4602      	mov	r2, r0
  4050ca:	2b00      	cmp	r3, #0
  4050cc:	f040 80e2 	bne.w	405294 <_dtoa_r+0xa8c>
  4050d0:	4601      	mov	r1, r0
  4050d2:	9009      	str	r0, [sp, #36]	; 0x24
  4050d4:	4650      	mov	r0, sl
  4050d6:	f000 fdbc 	bl	405c52 <__mcmp>
  4050da:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4050dc:	4603      	mov	r3, r0
  4050de:	4611      	mov	r1, r2
  4050e0:	4620      	mov	r0, r4
  4050e2:	9309      	str	r3, [sp, #36]	; 0x24
  4050e4:	f000 fbe0 	bl	4058a8 <_Bfree>
  4050e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4050ea:	2b00      	cmp	r3, #0
  4050ec:	f040 80d4 	bne.w	405298 <_dtoa_r+0xa90>
  4050f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4050f2:	2a00      	cmp	r2, #0
  4050f4:	f040 80d0 	bne.w	405298 <_dtoa_r+0xa90>
  4050f8:	9a08      	ldr	r2, [sp, #32]
  4050fa:	2a00      	cmp	r2, #0
  4050fc:	f040 80cc 	bne.w	405298 <_dtoa_r+0xa90>
  405100:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  405104:	f000 80e8 	beq.w	4052d8 <_dtoa_r+0xad0>
  405108:	9b02      	ldr	r3, [sp, #8]
  40510a:	2b00      	cmp	r3, #0
  40510c:	dd01      	ble.n	405112 <_dtoa_r+0x90a>
  40510e:	f105 0931 	add.w	r9, r5, #49	; 0x31
  405112:	f108 0501 	add.w	r5, r8, #1
  405116:	f888 9000 	strb.w	r9, [r8]
  40511a:	e06a      	b.n	4051f2 <_dtoa_r+0x9ea>
  40511c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40511e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405122:	e6f7      	b.n	404f14 <_dtoa_r+0x70c>
  405124:	9b08      	ldr	r3, [sp, #32]
  405126:	f109 36ff 	add.w	r6, r9, #4294967295
  40512a:	42b3      	cmp	r3, r6
  40512c:	bfbf      	itttt	lt
  40512e:	9b08      	ldrlt	r3, [sp, #32]
  405130:	9608      	strlt	r6, [sp, #32]
  405132:	1af2      	sublt	r2, r6, r3
  405134:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  405136:	bfb7      	itett	lt
  405138:	189b      	addlt	r3, r3, r2
  40513a:	1b9e      	subge	r6, r3, r6
  40513c:	930c      	strlt	r3, [sp, #48]	; 0x30
  40513e:	2600      	movlt	r6, #0
  405140:	f1b9 0f00 	cmp.w	r9, #0
  405144:	bfb9      	ittee	lt
  405146:	eba8 0509 	sublt.w	r5, r8, r9
  40514a:	2300      	movlt	r3, #0
  40514c:	4645      	movge	r5, r8
  40514e:	464b      	movge	r3, r9
  405150:	e6e2      	b.n	404f18 <_dtoa_r+0x710>
  405152:	9e08      	ldr	r6, [sp, #32]
  405154:	9f09      	ldr	r7, [sp, #36]	; 0x24
  405156:	4645      	mov	r5, r8
  405158:	e6e7      	b.n	404f2a <_dtoa_r+0x722>
  40515a:	9a08      	ldr	r2, [sp, #32]
  40515c:	e710      	b.n	404f80 <_dtoa_r+0x778>
  40515e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405160:	2b01      	cmp	r3, #1
  405162:	dc18      	bgt.n	405196 <_dtoa_r+0x98e>
  405164:	9b02      	ldr	r3, [sp, #8]
  405166:	b9b3      	cbnz	r3, 405196 <_dtoa_r+0x98e>
  405168:	9b03      	ldr	r3, [sp, #12]
  40516a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40516e:	b9a3      	cbnz	r3, 40519a <_dtoa_r+0x992>
  405170:	9b03      	ldr	r3, [sp, #12]
  405172:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  405176:	0d1b      	lsrs	r3, r3, #20
  405178:	051b      	lsls	r3, r3, #20
  40517a:	b12b      	cbz	r3, 405188 <_dtoa_r+0x980>
  40517c:	9b07      	ldr	r3, [sp, #28]
  40517e:	3301      	adds	r3, #1
  405180:	9307      	str	r3, [sp, #28]
  405182:	f108 0801 	add.w	r8, r8, #1
  405186:	2301      	movs	r3, #1
  405188:	9308      	str	r3, [sp, #32]
  40518a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40518c:	2b00      	cmp	r3, #0
  40518e:	f47f af11 	bne.w	404fb4 <_dtoa_r+0x7ac>
  405192:	2001      	movs	r0, #1
  405194:	e716      	b.n	404fc4 <_dtoa_r+0x7bc>
  405196:	2300      	movs	r3, #0
  405198:	e7f6      	b.n	405188 <_dtoa_r+0x980>
  40519a:	9b02      	ldr	r3, [sp, #8]
  40519c:	e7f4      	b.n	405188 <_dtoa_r+0x980>
  40519e:	f43f af23 	beq.w	404fe8 <_dtoa_r+0x7e0>
  4051a2:	9a07      	ldr	r2, [sp, #28]
  4051a4:	331c      	adds	r3, #28
  4051a6:	441a      	add	r2, r3
  4051a8:	4498      	add	r8, r3
  4051aa:	441d      	add	r5, r3
  4051ac:	4613      	mov	r3, r2
  4051ae:	e71a      	b.n	404fe6 <_dtoa_r+0x7de>
  4051b0:	4603      	mov	r3, r0
  4051b2:	e7f6      	b.n	4051a2 <_dtoa_r+0x99a>
  4051b4:	40240000 	.word	0x40240000
  4051b8:	f1b9 0f00 	cmp.w	r9, #0
  4051bc:	dc33      	bgt.n	405226 <_dtoa_r+0xa1e>
  4051be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4051c0:	2b02      	cmp	r3, #2
  4051c2:	dd30      	ble.n	405226 <_dtoa_r+0xa1e>
  4051c4:	f8cd 9010 	str.w	r9, [sp, #16]
  4051c8:	9b04      	ldr	r3, [sp, #16]
  4051ca:	b963      	cbnz	r3, 4051e6 <_dtoa_r+0x9de>
  4051cc:	4631      	mov	r1, r6
  4051ce:	2205      	movs	r2, #5
  4051d0:	4620      	mov	r0, r4
  4051d2:	f000 fb80 	bl	4058d6 <__multadd>
  4051d6:	4601      	mov	r1, r0
  4051d8:	4606      	mov	r6, r0
  4051da:	4650      	mov	r0, sl
  4051dc:	f000 fd39 	bl	405c52 <__mcmp>
  4051e0:	2800      	cmp	r0, #0
  4051e2:	f73f ad5c 	bgt.w	404c9e <_dtoa_r+0x496>
  4051e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4051e8:	9d06      	ldr	r5, [sp, #24]
  4051ea:	ea6f 0b03 	mvn.w	fp, r3
  4051ee:	2300      	movs	r3, #0
  4051f0:	9307      	str	r3, [sp, #28]
  4051f2:	4631      	mov	r1, r6
  4051f4:	4620      	mov	r0, r4
  4051f6:	f000 fb57 	bl	4058a8 <_Bfree>
  4051fa:	2f00      	cmp	r7, #0
  4051fc:	f43f ae4b 	beq.w	404e96 <_dtoa_r+0x68e>
  405200:	9b07      	ldr	r3, [sp, #28]
  405202:	b12b      	cbz	r3, 405210 <_dtoa_r+0xa08>
  405204:	42bb      	cmp	r3, r7
  405206:	d003      	beq.n	405210 <_dtoa_r+0xa08>
  405208:	4619      	mov	r1, r3
  40520a:	4620      	mov	r0, r4
  40520c:	f000 fb4c 	bl	4058a8 <_Bfree>
  405210:	4639      	mov	r1, r7
  405212:	4620      	mov	r0, r4
  405214:	f000 fb48 	bl	4058a8 <_Bfree>
  405218:	e63d      	b.n	404e96 <_dtoa_r+0x68e>
  40521a:	2600      	movs	r6, #0
  40521c:	4637      	mov	r7, r6
  40521e:	e7e2      	b.n	4051e6 <_dtoa_r+0x9de>
  405220:	46bb      	mov	fp, r7
  405222:	4637      	mov	r7, r6
  405224:	e53b      	b.n	404c9e <_dtoa_r+0x496>
  405226:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405228:	f8cd 9010 	str.w	r9, [sp, #16]
  40522c:	2b00      	cmp	r3, #0
  40522e:	f47f af13 	bne.w	405058 <_dtoa_r+0x850>
  405232:	9d06      	ldr	r5, [sp, #24]
  405234:	4631      	mov	r1, r6
  405236:	4650      	mov	r0, sl
  405238:	f7ff fa58 	bl	4046ec <quorem>
  40523c:	f100 0930 	add.w	r9, r0, #48	; 0x30
  405240:	f805 9b01 	strb.w	r9, [r5], #1
  405244:	9b06      	ldr	r3, [sp, #24]
  405246:	9a04      	ldr	r2, [sp, #16]
  405248:	1aeb      	subs	r3, r5, r3
  40524a:	429a      	cmp	r2, r3
  40524c:	f300 8083 	bgt.w	405356 <_dtoa_r+0xb4e>
  405250:	9b06      	ldr	r3, [sp, #24]
  405252:	2a01      	cmp	r2, #1
  405254:	bfac      	ite	ge
  405256:	189b      	addge	r3, r3, r2
  405258:	3301      	addlt	r3, #1
  40525a:	4698      	mov	r8, r3
  40525c:	2300      	movs	r3, #0
  40525e:	9307      	str	r3, [sp, #28]
  405260:	4651      	mov	r1, sl
  405262:	2201      	movs	r2, #1
  405264:	4620      	mov	r0, r4
  405266:	f000 fca3 	bl	405bb0 <__lshift>
  40526a:	4631      	mov	r1, r6
  40526c:	4682      	mov	sl, r0
  40526e:	f000 fcf0 	bl	405c52 <__mcmp>
  405272:	2800      	cmp	r0, #0
  405274:	dc35      	bgt.n	4052e2 <_dtoa_r+0xada>
  405276:	d102      	bne.n	40527e <_dtoa_r+0xa76>
  405278:	f019 0f01 	tst.w	r9, #1
  40527c:	d131      	bne.n	4052e2 <_dtoa_r+0xada>
  40527e:	4645      	mov	r5, r8
  405280:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405284:	2b30      	cmp	r3, #48	; 0x30
  405286:	f105 32ff 	add.w	r2, r5, #4294967295
  40528a:	d1b2      	bne.n	4051f2 <_dtoa_r+0x9ea>
  40528c:	4615      	mov	r5, r2
  40528e:	e7f7      	b.n	405280 <_dtoa_r+0xa78>
  405290:	4638      	mov	r0, r7
  405292:	e6ff      	b.n	405094 <_dtoa_r+0x88c>
  405294:	2301      	movs	r3, #1
  405296:	e722      	b.n	4050de <_dtoa_r+0x8d6>
  405298:	9a02      	ldr	r2, [sp, #8]
  40529a:	2a00      	cmp	r2, #0
  40529c:	db04      	blt.n	4052a8 <_dtoa_r+0xaa0>
  40529e:	d129      	bne.n	4052f4 <_dtoa_r+0xaec>
  4052a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4052a2:	bb3a      	cbnz	r2, 4052f4 <_dtoa_r+0xaec>
  4052a4:	9a08      	ldr	r2, [sp, #32]
  4052a6:	bb2a      	cbnz	r2, 4052f4 <_dtoa_r+0xaec>
  4052a8:	2b00      	cmp	r3, #0
  4052aa:	f77f af32 	ble.w	405112 <_dtoa_r+0x90a>
  4052ae:	4651      	mov	r1, sl
  4052b0:	2201      	movs	r2, #1
  4052b2:	4620      	mov	r0, r4
  4052b4:	f000 fc7c 	bl	405bb0 <__lshift>
  4052b8:	4631      	mov	r1, r6
  4052ba:	4682      	mov	sl, r0
  4052bc:	f000 fcc9 	bl	405c52 <__mcmp>
  4052c0:	2800      	cmp	r0, #0
  4052c2:	dc05      	bgt.n	4052d0 <_dtoa_r+0xac8>
  4052c4:	f47f af25 	bne.w	405112 <_dtoa_r+0x90a>
  4052c8:	f019 0f01 	tst.w	r9, #1
  4052cc:	f43f af21 	beq.w	405112 <_dtoa_r+0x90a>
  4052d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4052d4:	f47f af1b 	bne.w	40510e <_dtoa_r+0x906>
  4052d8:	2339      	movs	r3, #57	; 0x39
  4052da:	f888 3000 	strb.w	r3, [r8]
  4052de:	f108 0801 	add.w	r8, r8, #1
  4052e2:	4645      	mov	r5, r8
  4052e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4052e8:	2b39      	cmp	r3, #57	; 0x39
  4052ea:	f105 32ff 	add.w	r2, r5, #4294967295
  4052ee:	d03a      	beq.n	405366 <_dtoa_r+0xb5e>
  4052f0:	3301      	adds	r3, #1
  4052f2:	e03f      	b.n	405374 <_dtoa_r+0xb6c>
  4052f4:	2b00      	cmp	r3, #0
  4052f6:	f108 0501 	add.w	r5, r8, #1
  4052fa:	dd05      	ble.n	405308 <_dtoa_r+0xb00>
  4052fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  405300:	d0ea      	beq.n	4052d8 <_dtoa_r+0xad0>
  405302:	f109 0901 	add.w	r9, r9, #1
  405306:	e706      	b.n	405116 <_dtoa_r+0x90e>
  405308:	9b06      	ldr	r3, [sp, #24]
  40530a:	9a04      	ldr	r2, [sp, #16]
  40530c:	f805 9c01 	strb.w	r9, [r5, #-1]
  405310:	1aeb      	subs	r3, r5, r3
  405312:	4293      	cmp	r3, r2
  405314:	46a8      	mov	r8, r5
  405316:	d0a3      	beq.n	405260 <_dtoa_r+0xa58>
  405318:	4651      	mov	r1, sl
  40531a:	2300      	movs	r3, #0
  40531c:	220a      	movs	r2, #10
  40531e:	4620      	mov	r0, r4
  405320:	f000 fad9 	bl	4058d6 <__multadd>
  405324:	9b07      	ldr	r3, [sp, #28]
  405326:	9907      	ldr	r1, [sp, #28]
  405328:	42bb      	cmp	r3, r7
  40532a:	4682      	mov	sl, r0
  40532c:	f04f 0300 	mov.w	r3, #0
  405330:	f04f 020a 	mov.w	r2, #10
  405334:	4620      	mov	r0, r4
  405336:	d104      	bne.n	405342 <_dtoa_r+0xb3a>
  405338:	f000 facd 	bl	4058d6 <__multadd>
  40533c:	9007      	str	r0, [sp, #28]
  40533e:	4607      	mov	r7, r0
  405340:	e6b0      	b.n	4050a4 <_dtoa_r+0x89c>
  405342:	f000 fac8 	bl	4058d6 <__multadd>
  405346:	2300      	movs	r3, #0
  405348:	9007      	str	r0, [sp, #28]
  40534a:	220a      	movs	r2, #10
  40534c:	4639      	mov	r1, r7
  40534e:	4620      	mov	r0, r4
  405350:	f000 fac1 	bl	4058d6 <__multadd>
  405354:	e7f3      	b.n	40533e <_dtoa_r+0xb36>
  405356:	4651      	mov	r1, sl
  405358:	2300      	movs	r3, #0
  40535a:	220a      	movs	r2, #10
  40535c:	4620      	mov	r0, r4
  40535e:	f000 faba 	bl	4058d6 <__multadd>
  405362:	4682      	mov	sl, r0
  405364:	e766      	b.n	405234 <_dtoa_r+0xa2c>
  405366:	9b06      	ldr	r3, [sp, #24]
  405368:	4293      	cmp	r3, r2
  40536a:	d105      	bne.n	405378 <_dtoa_r+0xb70>
  40536c:	9a06      	ldr	r2, [sp, #24]
  40536e:	f10b 0b01 	add.w	fp, fp, #1
  405372:	2331      	movs	r3, #49	; 0x31
  405374:	7013      	strb	r3, [r2, #0]
  405376:	e73c      	b.n	4051f2 <_dtoa_r+0x9ea>
  405378:	4615      	mov	r5, r2
  40537a:	e7b3      	b.n	4052e4 <_dtoa_r+0xadc>
  40537c:	4b09      	ldr	r3, [pc, #36]	; (4053a4 <_dtoa_r+0xb9c>)
  40537e:	f7ff baa5 	b.w	4048cc <_dtoa_r+0xc4>
  405382:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405384:	2b00      	cmp	r3, #0
  405386:	f47f aa7f 	bne.w	404888 <_dtoa_r+0x80>
  40538a:	4b07      	ldr	r3, [pc, #28]	; (4053a8 <_dtoa_r+0xba0>)
  40538c:	f7ff ba9e 	b.w	4048cc <_dtoa_r+0xc4>
  405390:	9b04      	ldr	r3, [sp, #16]
  405392:	2b00      	cmp	r3, #0
  405394:	f73f af4d 	bgt.w	405232 <_dtoa_r+0xa2a>
  405398:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40539a:	2b02      	cmp	r3, #2
  40539c:	f77f af49 	ble.w	405232 <_dtoa_r+0xa2a>
  4053a0:	e712      	b.n	4051c8 <_dtoa_r+0x9c0>
  4053a2:	bf00      	nop
  4053a4:	00406b6c 	.word	0x00406b6c
  4053a8:	00406b90 	.word	0x00406b90

004053ac <__sflush_r>:
  4053ac:	898a      	ldrh	r2, [r1, #12]
  4053ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4053b2:	4605      	mov	r5, r0
  4053b4:	0710      	lsls	r0, r2, #28
  4053b6:	460c      	mov	r4, r1
  4053b8:	d45a      	bmi.n	405470 <__sflush_r+0xc4>
  4053ba:	684b      	ldr	r3, [r1, #4]
  4053bc:	2b00      	cmp	r3, #0
  4053be:	dc05      	bgt.n	4053cc <__sflush_r+0x20>
  4053c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4053c2:	2b00      	cmp	r3, #0
  4053c4:	dc02      	bgt.n	4053cc <__sflush_r+0x20>
  4053c6:	2000      	movs	r0, #0
  4053c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4053cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4053ce:	2e00      	cmp	r6, #0
  4053d0:	d0f9      	beq.n	4053c6 <__sflush_r+0x1a>
  4053d2:	2300      	movs	r3, #0
  4053d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  4053d8:	682f      	ldr	r7, [r5, #0]
  4053da:	602b      	str	r3, [r5, #0]
  4053dc:	d033      	beq.n	405446 <__sflush_r+0x9a>
  4053de:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4053e0:	89a3      	ldrh	r3, [r4, #12]
  4053e2:	075a      	lsls	r2, r3, #29
  4053e4:	d505      	bpl.n	4053f2 <__sflush_r+0x46>
  4053e6:	6863      	ldr	r3, [r4, #4]
  4053e8:	1ac0      	subs	r0, r0, r3
  4053ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4053ec:	b10b      	cbz	r3, 4053f2 <__sflush_r+0x46>
  4053ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4053f0:	1ac0      	subs	r0, r0, r3
  4053f2:	2300      	movs	r3, #0
  4053f4:	4602      	mov	r2, r0
  4053f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4053f8:	6a21      	ldr	r1, [r4, #32]
  4053fa:	4628      	mov	r0, r5
  4053fc:	47b0      	blx	r6
  4053fe:	1c43      	adds	r3, r0, #1
  405400:	89a3      	ldrh	r3, [r4, #12]
  405402:	d106      	bne.n	405412 <__sflush_r+0x66>
  405404:	6829      	ldr	r1, [r5, #0]
  405406:	291d      	cmp	r1, #29
  405408:	d84b      	bhi.n	4054a2 <__sflush_r+0xf6>
  40540a:	4a2b      	ldr	r2, [pc, #172]	; (4054b8 <__sflush_r+0x10c>)
  40540c:	40ca      	lsrs	r2, r1
  40540e:	07d6      	lsls	r6, r2, #31
  405410:	d547      	bpl.n	4054a2 <__sflush_r+0xf6>
  405412:	2200      	movs	r2, #0
  405414:	6062      	str	r2, [r4, #4]
  405416:	04d9      	lsls	r1, r3, #19
  405418:	6922      	ldr	r2, [r4, #16]
  40541a:	6022      	str	r2, [r4, #0]
  40541c:	d504      	bpl.n	405428 <__sflush_r+0x7c>
  40541e:	1c42      	adds	r2, r0, #1
  405420:	d101      	bne.n	405426 <__sflush_r+0x7a>
  405422:	682b      	ldr	r3, [r5, #0]
  405424:	b903      	cbnz	r3, 405428 <__sflush_r+0x7c>
  405426:	6560      	str	r0, [r4, #84]	; 0x54
  405428:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40542a:	602f      	str	r7, [r5, #0]
  40542c:	2900      	cmp	r1, #0
  40542e:	d0ca      	beq.n	4053c6 <__sflush_r+0x1a>
  405430:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405434:	4299      	cmp	r1, r3
  405436:	d002      	beq.n	40543e <__sflush_r+0x92>
  405438:	4628      	mov	r0, r5
  40543a:	f000 fcdf 	bl	405dfc <_free_r>
  40543e:	2000      	movs	r0, #0
  405440:	6360      	str	r0, [r4, #52]	; 0x34
  405442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405446:	6a21      	ldr	r1, [r4, #32]
  405448:	2301      	movs	r3, #1
  40544a:	4628      	mov	r0, r5
  40544c:	47b0      	blx	r6
  40544e:	1c41      	adds	r1, r0, #1
  405450:	d1c6      	bne.n	4053e0 <__sflush_r+0x34>
  405452:	682b      	ldr	r3, [r5, #0]
  405454:	2b00      	cmp	r3, #0
  405456:	d0c3      	beq.n	4053e0 <__sflush_r+0x34>
  405458:	2b1d      	cmp	r3, #29
  40545a:	d001      	beq.n	405460 <__sflush_r+0xb4>
  40545c:	2b16      	cmp	r3, #22
  40545e:	d101      	bne.n	405464 <__sflush_r+0xb8>
  405460:	602f      	str	r7, [r5, #0]
  405462:	e7b0      	b.n	4053c6 <__sflush_r+0x1a>
  405464:	89a3      	ldrh	r3, [r4, #12]
  405466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40546a:	81a3      	strh	r3, [r4, #12]
  40546c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405470:	690f      	ldr	r7, [r1, #16]
  405472:	2f00      	cmp	r7, #0
  405474:	d0a7      	beq.n	4053c6 <__sflush_r+0x1a>
  405476:	0793      	lsls	r3, r2, #30
  405478:	680e      	ldr	r6, [r1, #0]
  40547a:	bf08      	it	eq
  40547c:	694b      	ldreq	r3, [r1, #20]
  40547e:	600f      	str	r7, [r1, #0]
  405480:	bf18      	it	ne
  405482:	2300      	movne	r3, #0
  405484:	eba6 0807 	sub.w	r8, r6, r7
  405488:	608b      	str	r3, [r1, #8]
  40548a:	f1b8 0f00 	cmp.w	r8, #0
  40548e:	dd9a      	ble.n	4053c6 <__sflush_r+0x1a>
  405490:	4643      	mov	r3, r8
  405492:	463a      	mov	r2, r7
  405494:	6a21      	ldr	r1, [r4, #32]
  405496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  405498:	4628      	mov	r0, r5
  40549a:	47b0      	blx	r6
  40549c:	2800      	cmp	r0, #0
  40549e:	dc07      	bgt.n	4054b0 <__sflush_r+0x104>
  4054a0:	89a3      	ldrh	r3, [r4, #12]
  4054a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4054a6:	81a3      	strh	r3, [r4, #12]
  4054a8:	f04f 30ff 	mov.w	r0, #4294967295
  4054ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4054b0:	4407      	add	r7, r0
  4054b2:	eba8 0800 	sub.w	r8, r8, r0
  4054b6:	e7e8      	b.n	40548a <__sflush_r+0xde>
  4054b8:	20400001 	.word	0x20400001

004054bc <_fflush_r>:
  4054bc:	b538      	push	{r3, r4, r5, lr}
  4054be:	690b      	ldr	r3, [r1, #16]
  4054c0:	4605      	mov	r5, r0
  4054c2:	460c      	mov	r4, r1
  4054c4:	b1db      	cbz	r3, 4054fe <_fflush_r+0x42>
  4054c6:	b118      	cbz	r0, 4054d0 <_fflush_r+0x14>
  4054c8:	6983      	ldr	r3, [r0, #24]
  4054ca:	b90b      	cbnz	r3, 4054d0 <_fflush_r+0x14>
  4054cc:	f000 f860 	bl	405590 <__sinit>
  4054d0:	4b0c      	ldr	r3, [pc, #48]	; (405504 <_fflush_r+0x48>)
  4054d2:	429c      	cmp	r4, r3
  4054d4:	d109      	bne.n	4054ea <_fflush_r+0x2e>
  4054d6:	686c      	ldr	r4, [r5, #4]
  4054d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4054dc:	b17b      	cbz	r3, 4054fe <_fflush_r+0x42>
  4054de:	4621      	mov	r1, r4
  4054e0:	4628      	mov	r0, r5
  4054e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4054e6:	f7ff bf61 	b.w	4053ac <__sflush_r>
  4054ea:	4b07      	ldr	r3, [pc, #28]	; (405508 <_fflush_r+0x4c>)
  4054ec:	429c      	cmp	r4, r3
  4054ee:	d101      	bne.n	4054f4 <_fflush_r+0x38>
  4054f0:	68ac      	ldr	r4, [r5, #8]
  4054f2:	e7f1      	b.n	4054d8 <_fflush_r+0x1c>
  4054f4:	4b05      	ldr	r3, [pc, #20]	; (40550c <_fflush_r+0x50>)
  4054f6:	429c      	cmp	r4, r3
  4054f8:	bf08      	it	eq
  4054fa:	68ec      	ldreq	r4, [r5, #12]
  4054fc:	e7ec      	b.n	4054d8 <_fflush_r+0x1c>
  4054fe:	2000      	movs	r0, #0
  405500:	bd38      	pop	{r3, r4, r5, pc}
  405502:	bf00      	nop
  405504:	00406bc0 	.word	0x00406bc0
  405508:	00406be0 	.word	0x00406be0
  40550c:	00406ba0 	.word	0x00406ba0

00405510 <_cleanup_r>:
  405510:	4901      	ldr	r1, [pc, #4]	; (405518 <_cleanup_r+0x8>)
  405512:	f000 b8a9 	b.w	405668 <_fwalk_reent>
  405516:	bf00      	nop
  405518:	004054bd 	.word	0x004054bd

0040551c <std.isra.0>:
  40551c:	2300      	movs	r3, #0
  40551e:	b510      	push	{r4, lr}
  405520:	4604      	mov	r4, r0
  405522:	6003      	str	r3, [r0, #0]
  405524:	6043      	str	r3, [r0, #4]
  405526:	6083      	str	r3, [r0, #8]
  405528:	8181      	strh	r1, [r0, #12]
  40552a:	6643      	str	r3, [r0, #100]	; 0x64
  40552c:	81c2      	strh	r2, [r0, #14]
  40552e:	6103      	str	r3, [r0, #16]
  405530:	6143      	str	r3, [r0, #20]
  405532:	6183      	str	r3, [r0, #24]
  405534:	4619      	mov	r1, r3
  405536:	2208      	movs	r2, #8
  405538:	305c      	adds	r0, #92	; 0x5c
  40553a:	f7fe fb9a 	bl	403c72 <memset>
  40553e:	4b05      	ldr	r3, [pc, #20]	; (405554 <std.isra.0+0x38>)
  405540:	6263      	str	r3, [r4, #36]	; 0x24
  405542:	4b05      	ldr	r3, [pc, #20]	; (405558 <std.isra.0+0x3c>)
  405544:	62a3      	str	r3, [r4, #40]	; 0x28
  405546:	4b05      	ldr	r3, [pc, #20]	; (40555c <std.isra.0+0x40>)
  405548:	62e3      	str	r3, [r4, #44]	; 0x2c
  40554a:	4b05      	ldr	r3, [pc, #20]	; (405560 <std.isra.0+0x44>)
  40554c:	6224      	str	r4, [r4, #32]
  40554e:	6323      	str	r3, [r4, #48]	; 0x30
  405550:	bd10      	pop	{r4, pc}
  405552:	bf00      	nop
  405554:	004061f1 	.word	0x004061f1
  405558:	00406213 	.word	0x00406213
  40555c:	0040624b 	.word	0x0040624b
  405560:	0040626f 	.word	0x0040626f

00405564 <__sfmoreglue>:
  405564:	b570      	push	{r4, r5, r6, lr}
  405566:	1e4a      	subs	r2, r1, #1
  405568:	2568      	movs	r5, #104	; 0x68
  40556a:	4355      	muls	r5, r2
  40556c:	460e      	mov	r6, r1
  40556e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  405572:	f000 fc91 	bl	405e98 <_malloc_r>
  405576:	4604      	mov	r4, r0
  405578:	b140      	cbz	r0, 40558c <__sfmoreglue+0x28>
  40557a:	2100      	movs	r1, #0
  40557c:	e880 0042 	stmia.w	r0, {r1, r6}
  405580:	300c      	adds	r0, #12
  405582:	60a0      	str	r0, [r4, #8]
  405584:	f105 0268 	add.w	r2, r5, #104	; 0x68
  405588:	f7fe fb73 	bl	403c72 <memset>
  40558c:	4620      	mov	r0, r4
  40558e:	bd70      	pop	{r4, r5, r6, pc}

00405590 <__sinit>:
  405590:	6983      	ldr	r3, [r0, #24]
  405592:	b510      	push	{r4, lr}
  405594:	4604      	mov	r4, r0
  405596:	bb33      	cbnz	r3, 4055e6 <__sinit+0x56>
  405598:	6483      	str	r3, [r0, #72]	; 0x48
  40559a:	64c3      	str	r3, [r0, #76]	; 0x4c
  40559c:	6503      	str	r3, [r0, #80]	; 0x50
  40559e:	4b12      	ldr	r3, [pc, #72]	; (4055e8 <__sinit+0x58>)
  4055a0:	4a12      	ldr	r2, [pc, #72]	; (4055ec <__sinit+0x5c>)
  4055a2:	681b      	ldr	r3, [r3, #0]
  4055a4:	6282      	str	r2, [r0, #40]	; 0x28
  4055a6:	4298      	cmp	r0, r3
  4055a8:	bf04      	itt	eq
  4055aa:	2301      	moveq	r3, #1
  4055ac:	6183      	streq	r3, [r0, #24]
  4055ae:	f000 f81f 	bl	4055f0 <__sfp>
  4055b2:	6060      	str	r0, [r4, #4]
  4055b4:	4620      	mov	r0, r4
  4055b6:	f000 f81b 	bl	4055f0 <__sfp>
  4055ba:	60a0      	str	r0, [r4, #8]
  4055bc:	4620      	mov	r0, r4
  4055be:	f000 f817 	bl	4055f0 <__sfp>
  4055c2:	2200      	movs	r2, #0
  4055c4:	60e0      	str	r0, [r4, #12]
  4055c6:	2104      	movs	r1, #4
  4055c8:	6860      	ldr	r0, [r4, #4]
  4055ca:	f7ff ffa7 	bl	40551c <std.isra.0>
  4055ce:	2201      	movs	r2, #1
  4055d0:	2109      	movs	r1, #9
  4055d2:	68a0      	ldr	r0, [r4, #8]
  4055d4:	f7ff ffa2 	bl	40551c <std.isra.0>
  4055d8:	2202      	movs	r2, #2
  4055da:	2112      	movs	r1, #18
  4055dc:	68e0      	ldr	r0, [r4, #12]
  4055de:	f7ff ff9d 	bl	40551c <std.isra.0>
  4055e2:	2301      	movs	r3, #1
  4055e4:	61a3      	str	r3, [r4, #24]
  4055e6:	bd10      	pop	{r4, pc}
  4055e8:	00406b58 	.word	0x00406b58
  4055ec:	00405511 	.word	0x00405511

004055f0 <__sfp>:
  4055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4055f2:	4b1c      	ldr	r3, [pc, #112]	; (405664 <__sfp+0x74>)
  4055f4:	681e      	ldr	r6, [r3, #0]
  4055f6:	69b3      	ldr	r3, [r6, #24]
  4055f8:	4607      	mov	r7, r0
  4055fa:	b913      	cbnz	r3, 405602 <__sfp+0x12>
  4055fc:	4630      	mov	r0, r6
  4055fe:	f7ff ffc7 	bl	405590 <__sinit>
  405602:	3648      	adds	r6, #72	; 0x48
  405604:	68b4      	ldr	r4, [r6, #8]
  405606:	6873      	ldr	r3, [r6, #4]
  405608:	3b01      	subs	r3, #1
  40560a:	d503      	bpl.n	405614 <__sfp+0x24>
  40560c:	6833      	ldr	r3, [r6, #0]
  40560e:	b133      	cbz	r3, 40561e <__sfp+0x2e>
  405610:	6836      	ldr	r6, [r6, #0]
  405612:	e7f7      	b.n	405604 <__sfp+0x14>
  405614:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  405618:	b16d      	cbz	r5, 405636 <__sfp+0x46>
  40561a:	3468      	adds	r4, #104	; 0x68
  40561c:	e7f4      	b.n	405608 <__sfp+0x18>
  40561e:	2104      	movs	r1, #4
  405620:	4638      	mov	r0, r7
  405622:	f7ff ff9f 	bl	405564 <__sfmoreglue>
  405626:	6030      	str	r0, [r6, #0]
  405628:	2800      	cmp	r0, #0
  40562a:	d1f1      	bne.n	405610 <__sfp+0x20>
  40562c:	230c      	movs	r3, #12
  40562e:	603b      	str	r3, [r7, #0]
  405630:	4604      	mov	r4, r0
  405632:	4620      	mov	r0, r4
  405634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405636:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40563a:	81e3      	strh	r3, [r4, #14]
  40563c:	2301      	movs	r3, #1
  40563e:	81a3      	strh	r3, [r4, #12]
  405640:	6665      	str	r5, [r4, #100]	; 0x64
  405642:	6025      	str	r5, [r4, #0]
  405644:	60a5      	str	r5, [r4, #8]
  405646:	6065      	str	r5, [r4, #4]
  405648:	6125      	str	r5, [r4, #16]
  40564a:	6165      	str	r5, [r4, #20]
  40564c:	61a5      	str	r5, [r4, #24]
  40564e:	2208      	movs	r2, #8
  405650:	4629      	mov	r1, r5
  405652:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  405656:	f7fe fb0c 	bl	403c72 <memset>
  40565a:	6365      	str	r5, [r4, #52]	; 0x34
  40565c:	63a5      	str	r5, [r4, #56]	; 0x38
  40565e:	64a5      	str	r5, [r4, #72]	; 0x48
  405660:	64e5      	str	r5, [r4, #76]	; 0x4c
  405662:	e7e6      	b.n	405632 <__sfp+0x42>
  405664:	00406b58 	.word	0x00406b58

00405668 <_fwalk_reent>:
  405668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40566c:	4680      	mov	r8, r0
  40566e:	4689      	mov	r9, r1
  405670:	f100 0448 	add.w	r4, r0, #72	; 0x48
  405674:	2600      	movs	r6, #0
  405676:	b914      	cbnz	r4, 40567e <_fwalk_reent+0x16>
  405678:	4630      	mov	r0, r6
  40567a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40567e:	68a5      	ldr	r5, [r4, #8]
  405680:	6867      	ldr	r7, [r4, #4]
  405682:	3f01      	subs	r7, #1
  405684:	d501      	bpl.n	40568a <_fwalk_reent+0x22>
  405686:	6824      	ldr	r4, [r4, #0]
  405688:	e7f5      	b.n	405676 <_fwalk_reent+0xe>
  40568a:	89ab      	ldrh	r3, [r5, #12]
  40568c:	2b01      	cmp	r3, #1
  40568e:	d907      	bls.n	4056a0 <_fwalk_reent+0x38>
  405690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  405694:	3301      	adds	r3, #1
  405696:	d003      	beq.n	4056a0 <_fwalk_reent+0x38>
  405698:	4629      	mov	r1, r5
  40569a:	4640      	mov	r0, r8
  40569c:	47c8      	blx	r9
  40569e:	4306      	orrs	r6, r0
  4056a0:	3568      	adds	r5, #104	; 0x68
  4056a2:	e7ee      	b.n	405682 <_fwalk_reent+0x1a>

004056a4 <_localeconv_r>:
  4056a4:	4b04      	ldr	r3, [pc, #16]	; (4056b8 <_localeconv_r+0x14>)
  4056a6:	681b      	ldr	r3, [r3, #0]
  4056a8:	6a18      	ldr	r0, [r3, #32]
  4056aa:	4b04      	ldr	r3, [pc, #16]	; (4056bc <_localeconv_r+0x18>)
  4056ac:	2800      	cmp	r0, #0
  4056ae:	bf08      	it	eq
  4056b0:	4618      	moveq	r0, r3
  4056b2:	30f0      	adds	r0, #240	; 0xf0
  4056b4:	4770      	bx	lr
  4056b6:	bf00      	nop
  4056b8:	20400048 	.word	0x20400048
  4056bc:	204000ac 	.word	0x204000ac

004056c0 <__swhatbuf_r>:
  4056c0:	b570      	push	{r4, r5, r6, lr}
  4056c2:	460e      	mov	r6, r1
  4056c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4056c8:	2900      	cmp	r1, #0
  4056ca:	b090      	sub	sp, #64	; 0x40
  4056cc:	4614      	mov	r4, r2
  4056ce:	461d      	mov	r5, r3
  4056d0:	da07      	bge.n	4056e2 <__swhatbuf_r+0x22>
  4056d2:	2300      	movs	r3, #0
  4056d4:	602b      	str	r3, [r5, #0]
  4056d6:	89b3      	ldrh	r3, [r6, #12]
  4056d8:	061a      	lsls	r2, r3, #24
  4056da:	d410      	bmi.n	4056fe <__swhatbuf_r+0x3e>
  4056dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4056e0:	e00e      	b.n	405700 <__swhatbuf_r+0x40>
  4056e2:	aa01      	add	r2, sp, #4
  4056e4:	f000 feaa 	bl	40643c <_fstat_r>
  4056e8:	2800      	cmp	r0, #0
  4056ea:	dbf2      	blt.n	4056d2 <__swhatbuf_r+0x12>
  4056ec:	9a02      	ldr	r2, [sp, #8]
  4056ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4056f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  4056f6:	425a      	negs	r2, r3
  4056f8:	415a      	adcs	r2, r3
  4056fa:	602a      	str	r2, [r5, #0]
  4056fc:	e7ee      	b.n	4056dc <__swhatbuf_r+0x1c>
  4056fe:	2340      	movs	r3, #64	; 0x40
  405700:	2000      	movs	r0, #0
  405702:	6023      	str	r3, [r4, #0]
  405704:	b010      	add	sp, #64	; 0x40
  405706:	bd70      	pop	{r4, r5, r6, pc}

00405708 <__smakebuf_r>:
  405708:	898b      	ldrh	r3, [r1, #12]
  40570a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  40570c:	079d      	lsls	r5, r3, #30
  40570e:	4606      	mov	r6, r0
  405710:	460c      	mov	r4, r1
  405712:	d507      	bpl.n	405724 <__smakebuf_r+0x1c>
  405714:	f104 0347 	add.w	r3, r4, #71	; 0x47
  405718:	6023      	str	r3, [r4, #0]
  40571a:	6123      	str	r3, [r4, #16]
  40571c:	2301      	movs	r3, #1
  40571e:	6163      	str	r3, [r4, #20]
  405720:	b002      	add	sp, #8
  405722:	bd70      	pop	{r4, r5, r6, pc}
  405724:	ab01      	add	r3, sp, #4
  405726:	466a      	mov	r2, sp
  405728:	f7ff ffca 	bl	4056c0 <__swhatbuf_r>
  40572c:	9900      	ldr	r1, [sp, #0]
  40572e:	4605      	mov	r5, r0
  405730:	4630      	mov	r0, r6
  405732:	f000 fbb1 	bl	405e98 <_malloc_r>
  405736:	b948      	cbnz	r0, 40574c <__smakebuf_r+0x44>
  405738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40573c:	059a      	lsls	r2, r3, #22
  40573e:	d4ef      	bmi.n	405720 <__smakebuf_r+0x18>
  405740:	f023 0303 	bic.w	r3, r3, #3
  405744:	f043 0302 	orr.w	r3, r3, #2
  405748:	81a3      	strh	r3, [r4, #12]
  40574a:	e7e3      	b.n	405714 <__smakebuf_r+0xc>
  40574c:	4b0d      	ldr	r3, [pc, #52]	; (405784 <__smakebuf_r+0x7c>)
  40574e:	62b3      	str	r3, [r6, #40]	; 0x28
  405750:	89a3      	ldrh	r3, [r4, #12]
  405752:	6020      	str	r0, [r4, #0]
  405754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405758:	81a3      	strh	r3, [r4, #12]
  40575a:	9b00      	ldr	r3, [sp, #0]
  40575c:	6163      	str	r3, [r4, #20]
  40575e:	9b01      	ldr	r3, [sp, #4]
  405760:	6120      	str	r0, [r4, #16]
  405762:	b15b      	cbz	r3, 40577c <__smakebuf_r+0x74>
  405764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405768:	4630      	mov	r0, r6
  40576a:	f000 fe79 	bl	406460 <_isatty_r>
  40576e:	b128      	cbz	r0, 40577c <__smakebuf_r+0x74>
  405770:	89a3      	ldrh	r3, [r4, #12]
  405772:	f023 0303 	bic.w	r3, r3, #3
  405776:	f043 0301 	orr.w	r3, r3, #1
  40577a:	81a3      	strh	r3, [r4, #12]
  40577c:	89a3      	ldrh	r3, [r4, #12]
  40577e:	431d      	orrs	r5, r3
  405780:	81a5      	strh	r5, [r4, #12]
  405782:	e7cd      	b.n	405720 <__smakebuf_r+0x18>
  405784:	00405511 	.word	0x00405511

00405788 <malloc>:
  405788:	4b02      	ldr	r3, [pc, #8]	; (405794 <malloc+0xc>)
  40578a:	4601      	mov	r1, r0
  40578c:	6818      	ldr	r0, [r3, #0]
  40578e:	f000 bb83 	b.w	405e98 <_malloc_r>
  405792:	bf00      	nop
  405794:	20400048 	.word	0x20400048
	...

004057a0 <memchr>:
  4057a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4057a4:	2a10      	cmp	r2, #16
  4057a6:	db2b      	blt.n	405800 <memchr+0x60>
  4057a8:	f010 0f07 	tst.w	r0, #7
  4057ac:	d008      	beq.n	4057c0 <memchr+0x20>
  4057ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4057b2:	3a01      	subs	r2, #1
  4057b4:	428b      	cmp	r3, r1
  4057b6:	d02d      	beq.n	405814 <memchr+0x74>
  4057b8:	f010 0f07 	tst.w	r0, #7
  4057bc:	b342      	cbz	r2, 405810 <memchr+0x70>
  4057be:	d1f6      	bne.n	4057ae <memchr+0xe>
  4057c0:	b4f0      	push	{r4, r5, r6, r7}
  4057c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4057c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4057ca:	f022 0407 	bic.w	r4, r2, #7
  4057ce:	f07f 0700 	mvns.w	r7, #0
  4057d2:	2300      	movs	r3, #0
  4057d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4057d8:	3c08      	subs	r4, #8
  4057da:	ea85 0501 	eor.w	r5, r5, r1
  4057de:	ea86 0601 	eor.w	r6, r6, r1
  4057e2:	fa85 f547 	uadd8	r5, r5, r7
  4057e6:	faa3 f587 	sel	r5, r3, r7
  4057ea:	fa86 f647 	uadd8	r6, r6, r7
  4057ee:	faa5 f687 	sel	r6, r5, r7
  4057f2:	b98e      	cbnz	r6, 405818 <memchr+0x78>
  4057f4:	d1ee      	bne.n	4057d4 <memchr+0x34>
  4057f6:	bcf0      	pop	{r4, r5, r6, r7}
  4057f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4057fc:	f002 0207 	and.w	r2, r2, #7
  405800:	b132      	cbz	r2, 405810 <memchr+0x70>
  405802:	f810 3b01 	ldrb.w	r3, [r0], #1
  405806:	3a01      	subs	r2, #1
  405808:	ea83 0301 	eor.w	r3, r3, r1
  40580c:	b113      	cbz	r3, 405814 <memchr+0x74>
  40580e:	d1f8      	bne.n	405802 <memchr+0x62>
  405810:	2000      	movs	r0, #0
  405812:	4770      	bx	lr
  405814:	3801      	subs	r0, #1
  405816:	4770      	bx	lr
  405818:	2d00      	cmp	r5, #0
  40581a:	bf06      	itte	eq
  40581c:	4635      	moveq	r5, r6
  40581e:	3803      	subeq	r0, #3
  405820:	3807      	subne	r0, #7
  405822:	f015 0f01 	tst.w	r5, #1
  405826:	d107      	bne.n	405838 <memchr+0x98>
  405828:	3001      	adds	r0, #1
  40582a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40582e:	bf02      	ittt	eq
  405830:	3001      	addeq	r0, #1
  405832:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405836:	3001      	addeq	r0, #1
  405838:	bcf0      	pop	{r4, r5, r6, r7}
  40583a:	3801      	subs	r0, #1
  40583c:	4770      	bx	lr
  40583e:	bf00      	nop

00405840 <_Balloc>:
  405840:	b570      	push	{r4, r5, r6, lr}
  405842:	6a45      	ldr	r5, [r0, #36]	; 0x24
  405844:	4604      	mov	r4, r0
  405846:	460e      	mov	r6, r1
  405848:	b93d      	cbnz	r5, 40585a <_Balloc+0x1a>
  40584a:	2010      	movs	r0, #16
  40584c:	f7ff ff9c 	bl	405788 <malloc>
  405850:	6260      	str	r0, [r4, #36]	; 0x24
  405852:	6045      	str	r5, [r0, #4]
  405854:	6085      	str	r5, [r0, #8]
  405856:	6005      	str	r5, [r0, #0]
  405858:	60c5      	str	r5, [r0, #12]
  40585a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40585c:	68eb      	ldr	r3, [r5, #12]
  40585e:	b183      	cbz	r3, 405882 <_Balloc+0x42>
  405860:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405862:	68db      	ldr	r3, [r3, #12]
  405864:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  405868:	b9b8      	cbnz	r0, 40589a <_Balloc+0x5a>
  40586a:	2101      	movs	r1, #1
  40586c:	fa01 f506 	lsl.w	r5, r1, r6
  405870:	1d6a      	adds	r2, r5, #5
  405872:	0092      	lsls	r2, r2, #2
  405874:	4620      	mov	r0, r4
  405876:	f000 fab3 	bl	405de0 <_calloc_r>
  40587a:	b160      	cbz	r0, 405896 <_Balloc+0x56>
  40587c:	6046      	str	r6, [r0, #4]
  40587e:	6085      	str	r5, [r0, #8]
  405880:	e00e      	b.n	4058a0 <_Balloc+0x60>
  405882:	2221      	movs	r2, #33	; 0x21
  405884:	2104      	movs	r1, #4
  405886:	4620      	mov	r0, r4
  405888:	f000 faaa 	bl	405de0 <_calloc_r>
  40588c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40588e:	60e8      	str	r0, [r5, #12]
  405890:	68db      	ldr	r3, [r3, #12]
  405892:	2b00      	cmp	r3, #0
  405894:	d1e4      	bne.n	405860 <_Balloc+0x20>
  405896:	2000      	movs	r0, #0
  405898:	bd70      	pop	{r4, r5, r6, pc}
  40589a:	6802      	ldr	r2, [r0, #0]
  40589c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  4058a0:	2300      	movs	r3, #0
  4058a2:	6103      	str	r3, [r0, #16]
  4058a4:	60c3      	str	r3, [r0, #12]
  4058a6:	bd70      	pop	{r4, r5, r6, pc}

004058a8 <_Bfree>:
  4058a8:	b570      	push	{r4, r5, r6, lr}
  4058aa:	6a44      	ldr	r4, [r0, #36]	; 0x24
  4058ac:	4606      	mov	r6, r0
  4058ae:	460d      	mov	r5, r1
  4058b0:	b93c      	cbnz	r4, 4058c2 <_Bfree+0x1a>
  4058b2:	2010      	movs	r0, #16
  4058b4:	f7ff ff68 	bl	405788 <malloc>
  4058b8:	6270      	str	r0, [r6, #36]	; 0x24
  4058ba:	6044      	str	r4, [r0, #4]
  4058bc:	6084      	str	r4, [r0, #8]
  4058be:	6004      	str	r4, [r0, #0]
  4058c0:	60c4      	str	r4, [r0, #12]
  4058c2:	b13d      	cbz	r5, 4058d4 <_Bfree+0x2c>
  4058c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4058c6:	686a      	ldr	r2, [r5, #4]
  4058c8:	68db      	ldr	r3, [r3, #12]
  4058ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4058ce:	6029      	str	r1, [r5, #0]
  4058d0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4058d4:	bd70      	pop	{r4, r5, r6, pc}

004058d6 <__multadd>:
  4058d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4058da:	690d      	ldr	r5, [r1, #16]
  4058dc:	461f      	mov	r7, r3
  4058de:	4606      	mov	r6, r0
  4058e0:	460c      	mov	r4, r1
  4058e2:	f101 0e14 	add.w	lr, r1, #20
  4058e6:	2300      	movs	r3, #0
  4058e8:	f8de 0000 	ldr.w	r0, [lr]
  4058ec:	b281      	uxth	r1, r0
  4058ee:	fb02 7101 	mla	r1, r2, r1, r7
  4058f2:	0c0f      	lsrs	r7, r1, #16
  4058f4:	0c00      	lsrs	r0, r0, #16
  4058f6:	fb02 7000 	mla	r0, r2, r0, r7
  4058fa:	b289      	uxth	r1, r1
  4058fc:	3301      	adds	r3, #1
  4058fe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  405902:	429d      	cmp	r5, r3
  405904:	ea4f 4710 	mov.w	r7, r0, lsr #16
  405908:	f84e 1b04 	str.w	r1, [lr], #4
  40590c:	dcec      	bgt.n	4058e8 <__multadd+0x12>
  40590e:	b1d7      	cbz	r7, 405946 <__multadd+0x70>
  405910:	68a3      	ldr	r3, [r4, #8]
  405912:	429d      	cmp	r5, r3
  405914:	db12      	blt.n	40593c <__multadd+0x66>
  405916:	6861      	ldr	r1, [r4, #4]
  405918:	4630      	mov	r0, r6
  40591a:	3101      	adds	r1, #1
  40591c:	f7ff ff90 	bl	405840 <_Balloc>
  405920:	6922      	ldr	r2, [r4, #16]
  405922:	3202      	adds	r2, #2
  405924:	f104 010c 	add.w	r1, r4, #12
  405928:	4680      	mov	r8, r0
  40592a:	0092      	lsls	r2, r2, #2
  40592c:	300c      	adds	r0, #12
  40592e:	f7fe f995 	bl	403c5c <memcpy>
  405932:	4621      	mov	r1, r4
  405934:	4630      	mov	r0, r6
  405936:	f7ff ffb7 	bl	4058a8 <_Bfree>
  40593a:	4644      	mov	r4, r8
  40593c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  405940:	3501      	adds	r5, #1
  405942:	615f      	str	r7, [r3, #20]
  405944:	6125      	str	r5, [r4, #16]
  405946:	4620      	mov	r0, r4
  405948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040594c <__hi0bits>:
  40594c:	0c02      	lsrs	r2, r0, #16
  40594e:	0412      	lsls	r2, r2, #16
  405950:	4603      	mov	r3, r0
  405952:	b9b2      	cbnz	r2, 405982 <__hi0bits+0x36>
  405954:	0403      	lsls	r3, r0, #16
  405956:	2010      	movs	r0, #16
  405958:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40595c:	bf04      	itt	eq
  40595e:	021b      	lsleq	r3, r3, #8
  405960:	3008      	addeq	r0, #8
  405962:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405966:	bf04      	itt	eq
  405968:	011b      	lsleq	r3, r3, #4
  40596a:	3004      	addeq	r0, #4
  40596c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  405970:	bf04      	itt	eq
  405972:	009b      	lsleq	r3, r3, #2
  405974:	3002      	addeq	r0, #2
  405976:	2b00      	cmp	r3, #0
  405978:	db06      	blt.n	405988 <__hi0bits+0x3c>
  40597a:	005b      	lsls	r3, r3, #1
  40597c:	d503      	bpl.n	405986 <__hi0bits+0x3a>
  40597e:	3001      	adds	r0, #1
  405980:	4770      	bx	lr
  405982:	2000      	movs	r0, #0
  405984:	e7e8      	b.n	405958 <__hi0bits+0xc>
  405986:	2020      	movs	r0, #32
  405988:	4770      	bx	lr

0040598a <__lo0bits>:
  40598a:	6803      	ldr	r3, [r0, #0]
  40598c:	f013 0207 	ands.w	r2, r3, #7
  405990:	4601      	mov	r1, r0
  405992:	d00b      	beq.n	4059ac <__lo0bits+0x22>
  405994:	07da      	lsls	r2, r3, #31
  405996:	d423      	bmi.n	4059e0 <__lo0bits+0x56>
  405998:	0798      	lsls	r0, r3, #30
  40599a:	bf49      	itett	mi
  40599c:	085b      	lsrmi	r3, r3, #1
  40599e:	089b      	lsrpl	r3, r3, #2
  4059a0:	2001      	movmi	r0, #1
  4059a2:	600b      	strmi	r3, [r1, #0]
  4059a4:	bf5c      	itt	pl
  4059a6:	600b      	strpl	r3, [r1, #0]
  4059a8:	2002      	movpl	r0, #2
  4059aa:	4770      	bx	lr
  4059ac:	b298      	uxth	r0, r3
  4059ae:	b9a8      	cbnz	r0, 4059dc <__lo0bits+0x52>
  4059b0:	0c1b      	lsrs	r3, r3, #16
  4059b2:	2010      	movs	r0, #16
  4059b4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4059b8:	bf04      	itt	eq
  4059ba:	0a1b      	lsreq	r3, r3, #8
  4059bc:	3008      	addeq	r0, #8
  4059be:	071a      	lsls	r2, r3, #28
  4059c0:	bf04      	itt	eq
  4059c2:	091b      	lsreq	r3, r3, #4
  4059c4:	3004      	addeq	r0, #4
  4059c6:	079a      	lsls	r2, r3, #30
  4059c8:	bf04      	itt	eq
  4059ca:	089b      	lsreq	r3, r3, #2
  4059cc:	3002      	addeq	r0, #2
  4059ce:	07da      	lsls	r2, r3, #31
  4059d0:	d402      	bmi.n	4059d8 <__lo0bits+0x4e>
  4059d2:	085b      	lsrs	r3, r3, #1
  4059d4:	d006      	beq.n	4059e4 <__lo0bits+0x5a>
  4059d6:	3001      	adds	r0, #1
  4059d8:	600b      	str	r3, [r1, #0]
  4059da:	4770      	bx	lr
  4059dc:	4610      	mov	r0, r2
  4059de:	e7e9      	b.n	4059b4 <__lo0bits+0x2a>
  4059e0:	2000      	movs	r0, #0
  4059e2:	4770      	bx	lr
  4059e4:	2020      	movs	r0, #32
  4059e6:	4770      	bx	lr

004059e8 <__i2b>:
  4059e8:	b510      	push	{r4, lr}
  4059ea:	460c      	mov	r4, r1
  4059ec:	2101      	movs	r1, #1
  4059ee:	f7ff ff27 	bl	405840 <_Balloc>
  4059f2:	2201      	movs	r2, #1
  4059f4:	6144      	str	r4, [r0, #20]
  4059f6:	6102      	str	r2, [r0, #16]
  4059f8:	bd10      	pop	{r4, pc}

004059fa <__multiply>:
  4059fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059fe:	4614      	mov	r4, r2
  405a00:	690a      	ldr	r2, [r1, #16]
  405a02:	6923      	ldr	r3, [r4, #16]
  405a04:	429a      	cmp	r2, r3
  405a06:	bfb8      	it	lt
  405a08:	460b      	movlt	r3, r1
  405a0a:	4689      	mov	r9, r1
  405a0c:	bfbc      	itt	lt
  405a0e:	46a1      	movlt	r9, r4
  405a10:	461c      	movlt	r4, r3
  405a12:	f8d9 7010 	ldr.w	r7, [r9, #16]
  405a16:	f8d4 a010 	ldr.w	sl, [r4, #16]
  405a1a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  405a1e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  405a22:	eb07 060a 	add.w	r6, r7, sl
  405a26:	429e      	cmp	r6, r3
  405a28:	bfc8      	it	gt
  405a2a:	3101      	addgt	r1, #1
  405a2c:	f7ff ff08 	bl	405840 <_Balloc>
  405a30:	f100 0514 	add.w	r5, r0, #20
  405a34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  405a38:	462b      	mov	r3, r5
  405a3a:	2200      	movs	r2, #0
  405a3c:	4543      	cmp	r3, r8
  405a3e:	d316      	bcc.n	405a6e <__multiply+0x74>
  405a40:	f104 0214 	add.w	r2, r4, #20
  405a44:	f109 0114 	add.w	r1, r9, #20
  405a48:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  405a4c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  405a50:	9301      	str	r3, [sp, #4]
  405a52:	9c01      	ldr	r4, [sp, #4]
  405a54:	4294      	cmp	r4, r2
  405a56:	4613      	mov	r3, r2
  405a58:	d80c      	bhi.n	405a74 <__multiply+0x7a>
  405a5a:	2e00      	cmp	r6, #0
  405a5c:	dd03      	ble.n	405a66 <__multiply+0x6c>
  405a5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  405a62:	2b00      	cmp	r3, #0
  405a64:	d054      	beq.n	405b10 <__multiply+0x116>
  405a66:	6106      	str	r6, [r0, #16]
  405a68:	b003      	add	sp, #12
  405a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a6e:	f843 2b04 	str.w	r2, [r3], #4
  405a72:	e7e3      	b.n	405a3c <__multiply+0x42>
  405a74:	f8b3 a000 	ldrh.w	sl, [r3]
  405a78:	3204      	adds	r2, #4
  405a7a:	f1ba 0f00 	cmp.w	sl, #0
  405a7e:	d020      	beq.n	405ac2 <__multiply+0xc8>
  405a80:	46ae      	mov	lr, r5
  405a82:	4689      	mov	r9, r1
  405a84:	f04f 0c00 	mov.w	ip, #0
  405a88:	f859 4b04 	ldr.w	r4, [r9], #4
  405a8c:	f8be b000 	ldrh.w	fp, [lr]
  405a90:	b2a3      	uxth	r3, r4
  405a92:	fb0a b303 	mla	r3, sl, r3, fp
  405a96:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  405a9a:	f8de 4000 	ldr.w	r4, [lr]
  405a9e:	4463      	add	r3, ip
  405aa0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  405aa4:	fb0a c40b 	mla	r4, sl, fp, ip
  405aa8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  405aac:	b29b      	uxth	r3, r3
  405aae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  405ab2:	454f      	cmp	r7, r9
  405ab4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  405ab8:	f84e 3b04 	str.w	r3, [lr], #4
  405abc:	d8e4      	bhi.n	405a88 <__multiply+0x8e>
  405abe:	f8ce c000 	str.w	ip, [lr]
  405ac2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  405ac6:	f1b9 0f00 	cmp.w	r9, #0
  405aca:	d01f      	beq.n	405b0c <__multiply+0x112>
  405acc:	682b      	ldr	r3, [r5, #0]
  405ace:	46ae      	mov	lr, r5
  405ad0:	468c      	mov	ip, r1
  405ad2:	f04f 0a00 	mov.w	sl, #0
  405ad6:	f8bc 4000 	ldrh.w	r4, [ip]
  405ada:	f8be b002 	ldrh.w	fp, [lr, #2]
  405ade:	fb09 b404 	mla	r4, r9, r4, fp
  405ae2:	44a2      	add	sl, r4
  405ae4:	b29b      	uxth	r3, r3
  405ae6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  405aea:	f84e 3b04 	str.w	r3, [lr], #4
  405aee:	f85c 3b04 	ldr.w	r3, [ip], #4
  405af2:	f8be 4000 	ldrh.w	r4, [lr]
  405af6:	0c1b      	lsrs	r3, r3, #16
  405af8:	fb09 4303 	mla	r3, r9, r3, r4
  405afc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  405b00:	4567      	cmp	r7, ip
  405b02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  405b06:	d8e6      	bhi.n	405ad6 <__multiply+0xdc>
  405b08:	f8ce 3000 	str.w	r3, [lr]
  405b0c:	3504      	adds	r5, #4
  405b0e:	e7a0      	b.n	405a52 <__multiply+0x58>
  405b10:	3e01      	subs	r6, #1
  405b12:	e7a2      	b.n	405a5a <__multiply+0x60>

00405b14 <__pow5mult>:
  405b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405b18:	4615      	mov	r5, r2
  405b1a:	f012 0203 	ands.w	r2, r2, #3
  405b1e:	4606      	mov	r6, r0
  405b20:	460f      	mov	r7, r1
  405b22:	d007      	beq.n	405b34 <__pow5mult+0x20>
  405b24:	3a01      	subs	r2, #1
  405b26:	4c21      	ldr	r4, [pc, #132]	; (405bac <__pow5mult+0x98>)
  405b28:	2300      	movs	r3, #0
  405b2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  405b2e:	f7ff fed2 	bl	4058d6 <__multadd>
  405b32:	4607      	mov	r7, r0
  405b34:	10ad      	asrs	r5, r5, #2
  405b36:	d035      	beq.n	405ba4 <__pow5mult+0x90>
  405b38:	6a74      	ldr	r4, [r6, #36]	; 0x24
  405b3a:	b93c      	cbnz	r4, 405b4c <__pow5mult+0x38>
  405b3c:	2010      	movs	r0, #16
  405b3e:	f7ff fe23 	bl	405788 <malloc>
  405b42:	6270      	str	r0, [r6, #36]	; 0x24
  405b44:	6044      	str	r4, [r0, #4]
  405b46:	6084      	str	r4, [r0, #8]
  405b48:	6004      	str	r4, [r0, #0]
  405b4a:	60c4      	str	r4, [r0, #12]
  405b4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  405b50:	f8d8 4008 	ldr.w	r4, [r8, #8]
  405b54:	b94c      	cbnz	r4, 405b6a <__pow5mult+0x56>
  405b56:	f240 2171 	movw	r1, #625	; 0x271
  405b5a:	4630      	mov	r0, r6
  405b5c:	f7ff ff44 	bl	4059e8 <__i2b>
  405b60:	2300      	movs	r3, #0
  405b62:	f8c8 0008 	str.w	r0, [r8, #8]
  405b66:	4604      	mov	r4, r0
  405b68:	6003      	str	r3, [r0, #0]
  405b6a:	f04f 0800 	mov.w	r8, #0
  405b6e:	07eb      	lsls	r3, r5, #31
  405b70:	d50a      	bpl.n	405b88 <__pow5mult+0x74>
  405b72:	4639      	mov	r1, r7
  405b74:	4622      	mov	r2, r4
  405b76:	4630      	mov	r0, r6
  405b78:	f7ff ff3f 	bl	4059fa <__multiply>
  405b7c:	4639      	mov	r1, r7
  405b7e:	4681      	mov	r9, r0
  405b80:	4630      	mov	r0, r6
  405b82:	f7ff fe91 	bl	4058a8 <_Bfree>
  405b86:	464f      	mov	r7, r9
  405b88:	106d      	asrs	r5, r5, #1
  405b8a:	d00b      	beq.n	405ba4 <__pow5mult+0x90>
  405b8c:	6820      	ldr	r0, [r4, #0]
  405b8e:	b938      	cbnz	r0, 405ba0 <__pow5mult+0x8c>
  405b90:	4622      	mov	r2, r4
  405b92:	4621      	mov	r1, r4
  405b94:	4630      	mov	r0, r6
  405b96:	f7ff ff30 	bl	4059fa <__multiply>
  405b9a:	6020      	str	r0, [r4, #0]
  405b9c:	f8c0 8000 	str.w	r8, [r0]
  405ba0:	4604      	mov	r4, r0
  405ba2:	e7e4      	b.n	405b6e <__pow5mult+0x5a>
  405ba4:	4638      	mov	r0, r7
  405ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405baa:	bf00      	nop
  405bac:	00406cf0 	.word	0x00406cf0

00405bb0 <__lshift>:
  405bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405bb4:	460c      	mov	r4, r1
  405bb6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  405bba:	6923      	ldr	r3, [r4, #16]
  405bbc:	6849      	ldr	r1, [r1, #4]
  405bbe:	eb0a 0903 	add.w	r9, sl, r3
  405bc2:	68a3      	ldr	r3, [r4, #8]
  405bc4:	4607      	mov	r7, r0
  405bc6:	4616      	mov	r6, r2
  405bc8:	f109 0501 	add.w	r5, r9, #1
  405bcc:	42ab      	cmp	r3, r5
  405bce:	db31      	blt.n	405c34 <__lshift+0x84>
  405bd0:	4638      	mov	r0, r7
  405bd2:	f7ff fe35 	bl	405840 <_Balloc>
  405bd6:	2200      	movs	r2, #0
  405bd8:	4680      	mov	r8, r0
  405bda:	f100 0314 	add.w	r3, r0, #20
  405bde:	4611      	mov	r1, r2
  405be0:	4552      	cmp	r2, sl
  405be2:	db2a      	blt.n	405c3a <__lshift+0x8a>
  405be4:	6920      	ldr	r0, [r4, #16]
  405be6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  405bea:	f104 0114 	add.w	r1, r4, #20
  405bee:	f016 021f 	ands.w	r2, r6, #31
  405bf2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  405bf6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  405bfa:	d022      	beq.n	405c42 <__lshift+0x92>
  405bfc:	f1c2 0c20 	rsb	ip, r2, #32
  405c00:	2000      	movs	r0, #0
  405c02:	680e      	ldr	r6, [r1, #0]
  405c04:	4096      	lsls	r6, r2
  405c06:	4330      	orrs	r0, r6
  405c08:	f843 0b04 	str.w	r0, [r3], #4
  405c0c:	f851 0b04 	ldr.w	r0, [r1], #4
  405c10:	458e      	cmp	lr, r1
  405c12:	fa20 f00c 	lsr.w	r0, r0, ip
  405c16:	d8f4      	bhi.n	405c02 <__lshift+0x52>
  405c18:	6018      	str	r0, [r3, #0]
  405c1a:	b108      	cbz	r0, 405c20 <__lshift+0x70>
  405c1c:	f109 0502 	add.w	r5, r9, #2
  405c20:	3d01      	subs	r5, #1
  405c22:	4638      	mov	r0, r7
  405c24:	f8c8 5010 	str.w	r5, [r8, #16]
  405c28:	4621      	mov	r1, r4
  405c2a:	f7ff fe3d 	bl	4058a8 <_Bfree>
  405c2e:	4640      	mov	r0, r8
  405c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405c34:	3101      	adds	r1, #1
  405c36:	005b      	lsls	r3, r3, #1
  405c38:	e7c8      	b.n	405bcc <__lshift+0x1c>
  405c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  405c3e:	3201      	adds	r2, #1
  405c40:	e7ce      	b.n	405be0 <__lshift+0x30>
  405c42:	3b04      	subs	r3, #4
  405c44:	f851 2b04 	ldr.w	r2, [r1], #4
  405c48:	f843 2f04 	str.w	r2, [r3, #4]!
  405c4c:	458e      	cmp	lr, r1
  405c4e:	d8f9      	bhi.n	405c44 <__lshift+0x94>
  405c50:	e7e6      	b.n	405c20 <__lshift+0x70>

00405c52 <__mcmp>:
  405c52:	6903      	ldr	r3, [r0, #16]
  405c54:	690a      	ldr	r2, [r1, #16]
  405c56:	1a9b      	subs	r3, r3, r2
  405c58:	b530      	push	{r4, r5, lr}
  405c5a:	d10c      	bne.n	405c76 <__mcmp+0x24>
  405c5c:	0092      	lsls	r2, r2, #2
  405c5e:	3014      	adds	r0, #20
  405c60:	3114      	adds	r1, #20
  405c62:	1884      	adds	r4, r0, r2
  405c64:	4411      	add	r1, r2
  405c66:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  405c6a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  405c6e:	4295      	cmp	r5, r2
  405c70:	d003      	beq.n	405c7a <__mcmp+0x28>
  405c72:	d305      	bcc.n	405c80 <__mcmp+0x2e>
  405c74:	2301      	movs	r3, #1
  405c76:	4618      	mov	r0, r3
  405c78:	bd30      	pop	{r4, r5, pc}
  405c7a:	42a0      	cmp	r0, r4
  405c7c:	d3f3      	bcc.n	405c66 <__mcmp+0x14>
  405c7e:	e7fa      	b.n	405c76 <__mcmp+0x24>
  405c80:	f04f 33ff 	mov.w	r3, #4294967295
  405c84:	e7f7      	b.n	405c76 <__mcmp+0x24>

00405c86 <__mdiff>:
  405c86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405c8a:	460d      	mov	r5, r1
  405c8c:	4607      	mov	r7, r0
  405c8e:	4611      	mov	r1, r2
  405c90:	4628      	mov	r0, r5
  405c92:	4614      	mov	r4, r2
  405c94:	f7ff ffdd 	bl	405c52 <__mcmp>
  405c98:	1e06      	subs	r6, r0, #0
  405c9a:	d108      	bne.n	405cae <__mdiff+0x28>
  405c9c:	4631      	mov	r1, r6
  405c9e:	4638      	mov	r0, r7
  405ca0:	f7ff fdce 	bl	405840 <_Balloc>
  405ca4:	2301      	movs	r3, #1
  405ca6:	6103      	str	r3, [r0, #16]
  405ca8:	6146      	str	r6, [r0, #20]
  405caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405cae:	bfa4      	itt	ge
  405cb0:	4623      	movge	r3, r4
  405cb2:	462c      	movge	r4, r5
  405cb4:	4638      	mov	r0, r7
  405cb6:	6861      	ldr	r1, [r4, #4]
  405cb8:	bfa6      	itte	ge
  405cba:	461d      	movge	r5, r3
  405cbc:	2600      	movge	r6, #0
  405cbe:	2601      	movlt	r6, #1
  405cc0:	f7ff fdbe 	bl	405840 <_Balloc>
  405cc4:	692b      	ldr	r3, [r5, #16]
  405cc6:	60c6      	str	r6, [r0, #12]
  405cc8:	6926      	ldr	r6, [r4, #16]
  405cca:	f105 0914 	add.w	r9, r5, #20
  405cce:	f104 0214 	add.w	r2, r4, #20
  405cd2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  405cd6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  405cda:	f100 0514 	add.w	r5, r0, #20
  405cde:	f04f 0c00 	mov.w	ip, #0
  405ce2:	f852 ab04 	ldr.w	sl, [r2], #4
  405ce6:	f859 4b04 	ldr.w	r4, [r9], #4
  405cea:	fa1c f18a 	uxtah	r1, ip, sl
  405cee:	b2a3      	uxth	r3, r4
  405cf0:	1ac9      	subs	r1, r1, r3
  405cf2:	0c23      	lsrs	r3, r4, #16
  405cf4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  405cf8:	eb03 4321 	add.w	r3, r3, r1, asr #16
  405cfc:	b289      	uxth	r1, r1
  405cfe:	ea4f 4c23 	mov.w	ip, r3, asr #16
  405d02:	45c8      	cmp	r8, r9
  405d04:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  405d08:	4696      	mov	lr, r2
  405d0a:	f845 3b04 	str.w	r3, [r5], #4
  405d0e:	d8e8      	bhi.n	405ce2 <__mdiff+0x5c>
  405d10:	45be      	cmp	lr, r7
  405d12:	d305      	bcc.n	405d20 <__mdiff+0x9a>
  405d14:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405d18:	b18b      	cbz	r3, 405d3e <__mdiff+0xb8>
  405d1a:	6106      	str	r6, [r0, #16]
  405d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d20:	f85e 1b04 	ldr.w	r1, [lr], #4
  405d24:	fa1c f381 	uxtah	r3, ip, r1
  405d28:	141a      	asrs	r2, r3, #16
  405d2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  405d2e:	b29b      	uxth	r3, r3
  405d30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405d34:	ea4f 4c22 	mov.w	ip, r2, asr #16
  405d38:	f845 3b04 	str.w	r3, [r5], #4
  405d3c:	e7e8      	b.n	405d10 <__mdiff+0x8a>
  405d3e:	3e01      	subs	r6, #1
  405d40:	e7e8      	b.n	405d14 <__mdiff+0x8e>

00405d42 <__d2b>:
  405d42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  405d46:	2101      	movs	r1, #1
  405d48:	461c      	mov	r4, r3
  405d4a:	4690      	mov	r8, r2
  405d4c:	9e08      	ldr	r6, [sp, #32]
  405d4e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405d50:	f7ff fd76 	bl	405840 <_Balloc>
  405d54:	f3c4 0213 	ubfx	r2, r4, #0, #20
  405d58:	f3c4 540a 	ubfx	r4, r4, #20, #11
  405d5c:	4607      	mov	r7, r0
  405d5e:	bb34      	cbnz	r4, 405dae <__d2b+0x6c>
  405d60:	9201      	str	r2, [sp, #4]
  405d62:	f1b8 0f00 	cmp.w	r8, #0
  405d66:	d027      	beq.n	405db8 <__d2b+0x76>
  405d68:	a802      	add	r0, sp, #8
  405d6a:	f840 8d08 	str.w	r8, [r0, #-8]!
  405d6e:	f7ff fe0c 	bl	40598a <__lo0bits>
  405d72:	9900      	ldr	r1, [sp, #0]
  405d74:	b1f0      	cbz	r0, 405db4 <__d2b+0x72>
  405d76:	9a01      	ldr	r2, [sp, #4]
  405d78:	f1c0 0320 	rsb	r3, r0, #32
  405d7c:	fa02 f303 	lsl.w	r3, r2, r3
  405d80:	430b      	orrs	r3, r1
  405d82:	40c2      	lsrs	r2, r0
  405d84:	617b      	str	r3, [r7, #20]
  405d86:	9201      	str	r2, [sp, #4]
  405d88:	9b01      	ldr	r3, [sp, #4]
  405d8a:	61bb      	str	r3, [r7, #24]
  405d8c:	2b00      	cmp	r3, #0
  405d8e:	bf14      	ite	ne
  405d90:	2102      	movne	r1, #2
  405d92:	2101      	moveq	r1, #1
  405d94:	6139      	str	r1, [r7, #16]
  405d96:	b1c4      	cbz	r4, 405dca <__d2b+0x88>
  405d98:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  405d9c:	4404      	add	r4, r0
  405d9e:	6034      	str	r4, [r6, #0]
  405da0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405da4:	6028      	str	r0, [r5, #0]
  405da6:	4638      	mov	r0, r7
  405da8:	b002      	add	sp, #8
  405daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405dae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  405db2:	e7d5      	b.n	405d60 <__d2b+0x1e>
  405db4:	6179      	str	r1, [r7, #20]
  405db6:	e7e7      	b.n	405d88 <__d2b+0x46>
  405db8:	a801      	add	r0, sp, #4
  405dba:	f7ff fde6 	bl	40598a <__lo0bits>
  405dbe:	9b01      	ldr	r3, [sp, #4]
  405dc0:	617b      	str	r3, [r7, #20]
  405dc2:	2101      	movs	r1, #1
  405dc4:	6139      	str	r1, [r7, #16]
  405dc6:	3020      	adds	r0, #32
  405dc8:	e7e5      	b.n	405d96 <__d2b+0x54>
  405dca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  405dce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405dd2:	6030      	str	r0, [r6, #0]
  405dd4:	6918      	ldr	r0, [r3, #16]
  405dd6:	f7ff fdb9 	bl	40594c <__hi0bits>
  405dda:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  405dde:	e7e1      	b.n	405da4 <__d2b+0x62>

00405de0 <_calloc_r>:
  405de0:	b538      	push	{r3, r4, r5, lr}
  405de2:	fb02 f401 	mul.w	r4, r2, r1
  405de6:	4621      	mov	r1, r4
  405de8:	f000 f856 	bl	405e98 <_malloc_r>
  405dec:	4605      	mov	r5, r0
  405dee:	b118      	cbz	r0, 405df8 <_calloc_r+0x18>
  405df0:	4622      	mov	r2, r4
  405df2:	2100      	movs	r1, #0
  405df4:	f7fd ff3d 	bl	403c72 <memset>
  405df8:	4628      	mov	r0, r5
  405dfa:	bd38      	pop	{r3, r4, r5, pc}

00405dfc <_free_r>:
  405dfc:	b538      	push	{r3, r4, r5, lr}
  405dfe:	4605      	mov	r5, r0
  405e00:	2900      	cmp	r1, #0
  405e02:	d045      	beq.n	405e90 <_free_r+0x94>
  405e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
  405e08:	1f0c      	subs	r4, r1, #4
  405e0a:	2b00      	cmp	r3, #0
  405e0c:	bfb8      	it	lt
  405e0e:	18e4      	addlt	r4, r4, r3
  405e10:	f000 fb5a 	bl	4064c8 <__malloc_lock>
  405e14:	4a1f      	ldr	r2, [pc, #124]	; (405e94 <_free_r+0x98>)
  405e16:	6813      	ldr	r3, [r2, #0]
  405e18:	4610      	mov	r0, r2
  405e1a:	b933      	cbnz	r3, 405e2a <_free_r+0x2e>
  405e1c:	6063      	str	r3, [r4, #4]
  405e1e:	6014      	str	r4, [r2, #0]
  405e20:	4628      	mov	r0, r5
  405e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405e26:	f000 bb50 	b.w	4064ca <__malloc_unlock>
  405e2a:	42a3      	cmp	r3, r4
  405e2c:	d90c      	bls.n	405e48 <_free_r+0x4c>
  405e2e:	6821      	ldr	r1, [r4, #0]
  405e30:	1862      	adds	r2, r4, r1
  405e32:	4293      	cmp	r3, r2
  405e34:	bf04      	itt	eq
  405e36:	681a      	ldreq	r2, [r3, #0]
  405e38:	685b      	ldreq	r3, [r3, #4]
  405e3a:	6063      	str	r3, [r4, #4]
  405e3c:	bf04      	itt	eq
  405e3e:	1852      	addeq	r2, r2, r1
  405e40:	6022      	streq	r2, [r4, #0]
  405e42:	6004      	str	r4, [r0, #0]
  405e44:	e7ec      	b.n	405e20 <_free_r+0x24>
  405e46:	4613      	mov	r3, r2
  405e48:	685a      	ldr	r2, [r3, #4]
  405e4a:	b10a      	cbz	r2, 405e50 <_free_r+0x54>
  405e4c:	42a2      	cmp	r2, r4
  405e4e:	d9fa      	bls.n	405e46 <_free_r+0x4a>
  405e50:	6819      	ldr	r1, [r3, #0]
  405e52:	1858      	adds	r0, r3, r1
  405e54:	42a0      	cmp	r0, r4
  405e56:	d10b      	bne.n	405e70 <_free_r+0x74>
  405e58:	6820      	ldr	r0, [r4, #0]
  405e5a:	4401      	add	r1, r0
  405e5c:	1858      	adds	r0, r3, r1
  405e5e:	4282      	cmp	r2, r0
  405e60:	6019      	str	r1, [r3, #0]
  405e62:	d1dd      	bne.n	405e20 <_free_r+0x24>
  405e64:	6810      	ldr	r0, [r2, #0]
  405e66:	6852      	ldr	r2, [r2, #4]
  405e68:	605a      	str	r2, [r3, #4]
  405e6a:	4401      	add	r1, r0
  405e6c:	6019      	str	r1, [r3, #0]
  405e6e:	e7d7      	b.n	405e20 <_free_r+0x24>
  405e70:	d902      	bls.n	405e78 <_free_r+0x7c>
  405e72:	230c      	movs	r3, #12
  405e74:	602b      	str	r3, [r5, #0]
  405e76:	e7d3      	b.n	405e20 <_free_r+0x24>
  405e78:	6820      	ldr	r0, [r4, #0]
  405e7a:	1821      	adds	r1, r4, r0
  405e7c:	428a      	cmp	r2, r1
  405e7e:	bf04      	itt	eq
  405e80:	6811      	ldreq	r1, [r2, #0]
  405e82:	6852      	ldreq	r2, [r2, #4]
  405e84:	6062      	str	r2, [r4, #4]
  405e86:	bf04      	itt	eq
  405e88:	1809      	addeq	r1, r1, r0
  405e8a:	6021      	streq	r1, [r4, #0]
  405e8c:	605c      	str	r4, [r3, #4]
  405e8e:	e7c7      	b.n	405e20 <_free_r+0x24>
  405e90:	bd38      	pop	{r3, r4, r5, pc}
  405e92:	bf00      	nop
  405e94:	204004c0 	.word	0x204004c0

00405e98 <_malloc_r>:
  405e98:	b570      	push	{r4, r5, r6, lr}
  405e9a:	1ccd      	adds	r5, r1, #3
  405e9c:	f025 0503 	bic.w	r5, r5, #3
  405ea0:	3508      	adds	r5, #8
  405ea2:	2d0c      	cmp	r5, #12
  405ea4:	bf38      	it	cc
  405ea6:	250c      	movcc	r5, #12
  405ea8:	2d00      	cmp	r5, #0
  405eaa:	4606      	mov	r6, r0
  405eac:	db01      	blt.n	405eb2 <_malloc_r+0x1a>
  405eae:	42a9      	cmp	r1, r5
  405eb0:	d903      	bls.n	405eba <_malloc_r+0x22>
  405eb2:	230c      	movs	r3, #12
  405eb4:	6033      	str	r3, [r6, #0]
  405eb6:	2000      	movs	r0, #0
  405eb8:	bd70      	pop	{r4, r5, r6, pc}
  405eba:	f000 fb05 	bl	4064c8 <__malloc_lock>
  405ebe:	4a23      	ldr	r2, [pc, #140]	; (405f4c <_malloc_r+0xb4>)
  405ec0:	6814      	ldr	r4, [r2, #0]
  405ec2:	4621      	mov	r1, r4
  405ec4:	b991      	cbnz	r1, 405eec <_malloc_r+0x54>
  405ec6:	4c22      	ldr	r4, [pc, #136]	; (405f50 <_malloc_r+0xb8>)
  405ec8:	6823      	ldr	r3, [r4, #0]
  405eca:	b91b      	cbnz	r3, 405ed4 <_malloc_r+0x3c>
  405ecc:	4630      	mov	r0, r6
  405ece:	f000 f97f 	bl	4061d0 <_sbrk_r>
  405ed2:	6020      	str	r0, [r4, #0]
  405ed4:	4629      	mov	r1, r5
  405ed6:	4630      	mov	r0, r6
  405ed8:	f000 f97a 	bl	4061d0 <_sbrk_r>
  405edc:	1c43      	adds	r3, r0, #1
  405ede:	d126      	bne.n	405f2e <_malloc_r+0x96>
  405ee0:	230c      	movs	r3, #12
  405ee2:	6033      	str	r3, [r6, #0]
  405ee4:	4630      	mov	r0, r6
  405ee6:	f000 faf0 	bl	4064ca <__malloc_unlock>
  405eea:	e7e4      	b.n	405eb6 <_malloc_r+0x1e>
  405eec:	680b      	ldr	r3, [r1, #0]
  405eee:	1b5b      	subs	r3, r3, r5
  405ef0:	d41a      	bmi.n	405f28 <_malloc_r+0x90>
  405ef2:	2b0b      	cmp	r3, #11
  405ef4:	d90f      	bls.n	405f16 <_malloc_r+0x7e>
  405ef6:	600b      	str	r3, [r1, #0]
  405ef8:	50cd      	str	r5, [r1, r3]
  405efa:	18cc      	adds	r4, r1, r3
  405efc:	4630      	mov	r0, r6
  405efe:	f000 fae4 	bl	4064ca <__malloc_unlock>
  405f02:	f104 000b 	add.w	r0, r4, #11
  405f06:	1d23      	adds	r3, r4, #4
  405f08:	f020 0007 	bic.w	r0, r0, #7
  405f0c:	1ac3      	subs	r3, r0, r3
  405f0e:	d01b      	beq.n	405f48 <_malloc_r+0xb0>
  405f10:	425a      	negs	r2, r3
  405f12:	50e2      	str	r2, [r4, r3]
  405f14:	bd70      	pop	{r4, r5, r6, pc}
  405f16:	428c      	cmp	r4, r1
  405f18:	bf0d      	iteet	eq
  405f1a:	6863      	ldreq	r3, [r4, #4]
  405f1c:	684b      	ldrne	r3, [r1, #4]
  405f1e:	6063      	strne	r3, [r4, #4]
  405f20:	6013      	streq	r3, [r2, #0]
  405f22:	bf18      	it	ne
  405f24:	460c      	movne	r4, r1
  405f26:	e7e9      	b.n	405efc <_malloc_r+0x64>
  405f28:	460c      	mov	r4, r1
  405f2a:	6849      	ldr	r1, [r1, #4]
  405f2c:	e7ca      	b.n	405ec4 <_malloc_r+0x2c>
  405f2e:	1cc4      	adds	r4, r0, #3
  405f30:	f024 0403 	bic.w	r4, r4, #3
  405f34:	42a0      	cmp	r0, r4
  405f36:	d005      	beq.n	405f44 <_malloc_r+0xac>
  405f38:	1a21      	subs	r1, r4, r0
  405f3a:	4630      	mov	r0, r6
  405f3c:	f000 f948 	bl	4061d0 <_sbrk_r>
  405f40:	3001      	adds	r0, #1
  405f42:	d0cd      	beq.n	405ee0 <_malloc_r+0x48>
  405f44:	6025      	str	r5, [r4, #0]
  405f46:	e7d9      	b.n	405efc <_malloc_r+0x64>
  405f48:	bd70      	pop	{r4, r5, r6, pc}
  405f4a:	bf00      	nop
  405f4c:	204004c0 	.word	0x204004c0
  405f50:	204004c4 	.word	0x204004c4

00405f54 <__sfputc_r>:
  405f54:	6893      	ldr	r3, [r2, #8]
  405f56:	3b01      	subs	r3, #1
  405f58:	2b00      	cmp	r3, #0
  405f5a:	b410      	push	{r4}
  405f5c:	6093      	str	r3, [r2, #8]
  405f5e:	da08      	bge.n	405f72 <__sfputc_r+0x1e>
  405f60:	6994      	ldr	r4, [r2, #24]
  405f62:	42a3      	cmp	r3, r4
  405f64:	db02      	blt.n	405f6c <__sfputc_r+0x18>
  405f66:	b2cb      	uxtb	r3, r1
  405f68:	2b0a      	cmp	r3, #10
  405f6a:	d102      	bne.n	405f72 <__sfputc_r+0x1e>
  405f6c:	bc10      	pop	{r4}
  405f6e:	f000 b983 	b.w	406278 <__swbuf_r>
  405f72:	6813      	ldr	r3, [r2, #0]
  405f74:	1c58      	adds	r0, r3, #1
  405f76:	6010      	str	r0, [r2, #0]
  405f78:	7019      	strb	r1, [r3, #0]
  405f7a:	b2c8      	uxtb	r0, r1
  405f7c:	bc10      	pop	{r4}
  405f7e:	4770      	bx	lr

00405f80 <__sfputs_r>:
  405f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405f82:	4606      	mov	r6, r0
  405f84:	460f      	mov	r7, r1
  405f86:	4614      	mov	r4, r2
  405f88:	18d5      	adds	r5, r2, r3
  405f8a:	42ac      	cmp	r4, r5
  405f8c:	d101      	bne.n	405f92 <__sfputs_r+0x12>
  405f8e:	2000      	movs	r0, #0
  405f90:	e007      	b.n	405fa2 <__sfputs_r+0x22>
  405f92:	463a      	mov	r2, r7
  405f94:	f814 1b01 	ldrb.w	r1, [r4], #1
  405f98:	4630      	mov	r0, r6
  405f9a:	f7ff ffdb 	bl	405f54 <__sfputc_r>
  405f9e:	1c43      	adds	r3, r0, #1
  405fa0:	d1f3      	bne.n	405f8a <__sfputs_r+0xa>
  405fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00405fa4 <_vfiprintf_r>:
  405fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405fa8:	b09d      	sub	sp, #116	; 0x74
  405faa:	460c      	mov	r4, r1
  405fac:	4617      	mov	r7, r2
  405fae:	9303      	str	r3, [sp, #12]
  405fb0:	4606      	mov	r6, r0
  405fb2:	b118      	cbz	r0, 405fbc <_vfiprintf_r+0x18>
  405fb4:	6983      	ldr	r3, [r0, #24]
  405fb6:	b90b      	cbnz	r3, 405fbc <_vfiprintf_r+0x18>
  405fb8:	f7ff faea 	bl	405590 <__sinit>
  405fbc:	4b7c      	ldr	r3, [pc, #496]	; (4061b0 <_vfiprintf_r+0x20c>)
  405fbe:	429c      	cmp	r4, r3
  405fc0:	d157      	bne.n	406072 <_vfiprintf_r+0xce>
  405fc2:	6874      	ldr	r4, [r6, #4]
  405fc4:	89a3      	ldrh	r3, [r4, #12]
  405fc6:	0718      	lsls	r0, r3, #28
  405fc8:	d55d      	bpl.n	406086 <_vfiprintf_r+0xe2>
  405fca:	6923      	ldr	r3, [r4, #16]
  405fcc:	2b00      	cmp	r3, #0
  405fce:	d05a      	beq.n	406086 <_vfiprintf_r+0xe2>
  405fd0:	2300      	movs	r3, #0
  405fd2:	9309      	str	r3, [sp, #36]	; 0x24
  405fd4:	2320      	movs	r3, #32
  405fd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  405fda:	2330      	movs	r3, #48	; 0x30
  405fdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  405fe0:	f04f 0b01 	mov.w	fp, #1
  405fe4:	46b8      	mov	r8, r7
  405fe6:	4645      	mov	r5, r8
  405fe8:	f815 3b01 	ldrb.w	r3, [r5], #1
  405fec:	2b00      	cmp	r3, #0
  405fee:	d155      	bne.n	40609c <_vfiprintf_r+0xf8>
  405ff0:	ebb8 0a07 	subs.w	sl, r8, r7
  405ff4:	d00b      	beq.n	40600e <_vfiprintf_r+0x6a>
  405ff6:	4653      	mov	r3, sl
  405ff8:	463a      	mov	r2, r7
  405ffa:	4621      	mov	r1, r4
  405ffc:	4630      	mov	r0, r6
  405ffe:	f7ff ffbf 	bl	405f80 <__sfputs_r>
  406002:	3001      	adds	r0, #1
  406004:	f000 80c4 	beq.w	406190 <_vfiprintf_r+0x1ec>
  406008:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40600a:	4453      	add	r3, sl
  40600c:	9309      	str	r3, [sp, #36]	; 0x24
  40600e:	f898 3000 	ldrb.w	r3, [r8]
  406012:	2b00      	cmp	r3, #0
  406014:	f000 80bc 	beq.w	406190 <_vfiprintf_r+0x1ec>
  406018:	2300      	movs	r3, #0
  40601a:	f04f 32ff 	mov.w	r2, #4294967295
  40601e:	9304      	str	r3, [sp, #16]
  406020:	9307      	str	r3, [sp, #28]
  406022:	9205      	str	r2, [sp, #20]
  406024:	9306      	str	r3, [sp, #24]
  406026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40602a:	931a      	str	r3, [sp, #104]	; 0x68
  40602c:	2205      	movs	r2, #5
  40602e:	7829      	ldrb	r1, [r5, #0]
  406030:	4860      	ldr	r0, [pc, #384]	; (4061b4 <_vfiprintf_r+0x210>)
  406032:	f7ff fbb5 	bl	4057a0 <memchr>
  406036:	f105 0801 	add.w	r8, r5, #1
  40603a:	9b04      	ldr	r3, [sp, #16]
  40603c:	2800      	cmp	r0, #0
  40603e:	d131      	bne.n	4060a4 <_vfiprintf_r+0x100>
  406040:	06d9      	lsls	r1, r3, #27
  406042:	bf44      	itt	mi
  406044:	2220      	movmi	r2, #32
  406046:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40604a:	071a      	lsls	r2, r3, #28
  40604c:	bf44      	itt	mi
  40604e:	222b      	movmi	r2, #43	; 0x2b
  406050:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  406054:	782a      	ldrb	r2, [r5, #0]
  406056:	2a2a      	cmp	r2, #42	; 0x2a
  406058:	d02c      	beq.n	4060b4 <_vfiprintf_r+0x110>
  40605a:	9a07      	ldr	r2, [sp, #28]
  40605c:	2100      	movs	r1, #0
  40605e:	200a      	movs	r0, #10
  406060:	46a8      	mov	r8, r5
  406062:	3501      	adds	r5, #1
  406064:	f898 3000 	ldrb.w	r3, [r8]
  406068:	3b30      	subs	r3, #48	; 0x30
  40606a:	2b09      	cmp	r3, #9
  40606c:	d96d      	bls.n	40614a <_vfiprintf_r+0x1a6>
  40606e:	b371      	cbz	r1, 4060ce <_vfiprintf_r+0x12a>
  406070:	e026      	b.n	4060c0 <_vfiprintf_r+0x11c>
  406072:	4b51      	ldr	r3, [pc, #324]	; (4061b8 <_vfiprintf_r+0x214>)
  406074:	429c      	cmp	r4, r3
  406076:	d101      	bne.n	40607c <_vfiprintf_r+0xd8>
  406078:	68b4      	ldr	r4, [r6, #8]
  40607a:	e7a3      	b.n	405fc4 <_vfiprintf_r+0x20>
  40607c:	4b4f      	ldr	r3, [pc, #316]	; (4061bc <_vfiprintf_r+0x218>)
  40607e:	429c      	cmp	r4, r3
  406080:	bf08      	it	eq
  406082:	68f4      	ldreq	r4, [r6, #12]
  406084:	e79e      	b.n	405fc4 <_vfiprintf_r+0x20>
  406086:	4621      	mov	r1, r4
  406088:	4630      	mov	r0, r6
  40608a:	f000 f959 	bl	406340 <__swsetup_r>
  40608e:	2800      	cmp	r0, #0
  406090:	d09e      	beq.n	405fd0 <_vfiprintf_r+0x2c>
  406092:	f04f 30ff 	mov.w	r0, #4294967295
  406096:	b01d      	add	sp, #116	; 0x74
  406098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40609c:	2b25      	cmp	r3, #37	; 0x25
  40609e:	d0a7      	beq.n	405ff0 <_vfiprintf_r+0x4c>
  4060a0:	46a8      	mov	r8, r5
  4060a2:	e7a0      	b.n	405fe6 <_vfiprintf_r+0x42>
  4060a4:	4a43      	ldr	r2, [pc, #268]	; (4061b4 <_vfiprintf_r+0x210>)
  4060a6:	1a80      	subs	r0, r0, r2
  4060a8:	fa0b f000 	lsl.w	r0, fp, r0
  4060ac:	4318      	orrs	r0, r3
  4060ae:	9004      	str	r0, [sp, #16]
  4060b0:	4645      	mov	r5, r8
  4060b2:	e7bb      	b.n	40602c <_vfiprintf_r+0x88>
  4060b4:	9a03      	ldr	r2, [sp, #12]
  4060b6:	1d11      	adds	r1, r2, #4
  4060b8:	6812      	ldr	r2, [r2, #0]
  4060ba:	9103      	str	r1, [sp, #12]
  4060bc:	2a00      	cmp	r2, #0
  4060be:	db01      	blt.n	4060c4 <_vfiprintf_r+0x120>
  4060c0:	9207      	str	r2, [sp, #28]
  4060c2:	e004      	b.n	4060ce <_vfiprintf_r+0x12a>
  4060c4:	4252      	negs	r2, r2
  4060c6:	f043 0302 	orr.w	r3, r3, #2
  4060ca:	9207      	str	r2, [sp, #28]
  4060cc:	9304      	str	r3, [sp, #16]
  4060ce:	f898 3000 	ldrb.w	r3, [r8]
  4060d2:	2b2e      	cmp	r3, #46	; 0x2e
  4060d4:	d110      	bne.n	4060f8 <_vfiprintf_r+0x154>
  4060d6:	f898 3001 	ldrb.w	r3, [r8, #1]
  4060da:	2b2a      	cmp	r3, #42	; 0x2a
  4060dc:	f108 0101 	add.w	r1, r8, #1
  4060e0:	d137      	bne.n	406152 <_vfiprintf_r+0x1ae>
  4060e2:	9b03      	ldr	r3, [sp, #12]
  4060e4:	1d1a      	adds	r2, r3, #4
  4060e6:	681b      	ldr	r3, [r3, #0]
  4060e8:	9203      	str	r2, [sp, #12]
  4060ea:	2b00      	cmp	r3, #0
  4060ec:	bfb8      	it	lt
  4060ee:	f04f 33ff 	movlt.w	r3, #4294967295
  4060f2:	f108 0802 	add.w	r8, r8, #2
  4060f6:	9305      	str	r3, [sp, #20]
  4060f8:	4d31      	ldr	r5, [pc, #196]	; (4061c0 <_vfiprintf_r+0x21c>)
  4060fa:	f898 1000 	ldrb.w	r1, [r8]
  4060fe:	2203      	movs	r2, #3
  406100:	4628      	mov	r0, r5
  406102:	f7ff fb4d 	bl	4057a0 <memchr>
  406106:	b140      	cbz	r0, 40611a <_vfiprintf_r+0x176>
  406108:	2340      	movs	r3, #64	; 0x40
  40610a:	1b40      	subs	r0, r0, r5
  40610c:	fa03 f000 	lsl.w	r0, r3, r0
  406110:	9b04      	ldr	r3, [sp, #16]
  406112:	4303      	orrs	r3, r0
  406114:	9304      	str	r3, [sp, #16]
  406116:	f108 0801 	add.w	r8, r8, #1
  40611a:	f898 1000 	ldrb.w	r1, [r8]
  40611e:	4829      	ldr	r0, [pc, #164]	; (4061c4 <_vfiprintf_r+0x220>)
  406120:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  406124:	2206      	movs	r2, #6
  406126:	f108 0701 	add.w	r7, r8, #1
  40612a:	f7ff fb39 	bl	4057a0 <memchr>
  40612e:	2800      	cmp	r0, #0
  406130:	d034      	beq.n	40619c <_vfiprintf_r+0x1f8>
  406132:	4b25      	ldr	r3, [pc, #148]	; (4061c8 <_vfiprintf_r+0x224>)
  406134:	bb03      	cbnz	r3, 406178 <_vfiprintf_r+0x1d4>
  406136:	9b03      	ldr	r3, [sp, #12]
  406138:	3307      	adds	r3, #7
  40613a:	f023 0307 	bic.w	r3, r3, #7
  40613e:	3308      	adds	r3, #8
  406140:	9303      	str	r3, [sp, #12]
  406142:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406144:	444b      	add	r3, r9
  406146:	9309      	str	r3, [sp, #36]	; 0x24
  406148:	e74c      	b.n	405fe4 <_vfiprintf_r+0x40>
  40614a:	fb00 3202 	mla	r2, r0, r2, r3
  40614e:	2101      	movs	r1, #1
  406150:	e786      	b.n	406060 <_vfiprintf_r+0xbc>
  406152:	2300      	movs	r3, #0
  406154:	9305      	str	r3, [sp, #20]
  406156:	4618      	mov	r0, r3
  406158:	250a      	movs	r5, #10
  40615a:	4688      	mov	r8, r1
  40615c:	3101      	adds	r1, #1
  40615e:	f898 2000 	ldrb.w	r2, [r8]
  406162:	3a30      	subs	r2, #48	; 0x30
  406164:	2a09      	cmp	r2, #9
  406166:	d903      	bls.n	406170 <_vfiprintf_r+0x1cc>
  406168:	2b00      	cmp	r3, #0
  40616a:	d0c5      	beq.n	4060f8 <_vfiprintf_r+0x154>
  40616c:	9005      	str	r0, [sp, #20]
  40616e:	e7c3      	b.n	4060f8 <_vfiprintf_r+0x154>
  406170:	fb05 2000 	mla	r0, r5, r0, r2
  406174:	2301      	movs	r3, #1
  406176:	e7f0      	b.n	40615a <_vfiprintf_r+0x1b6>
  406178:	ab03      	add	r3, sp, #12
  40617a:	9300      	str	r3, [sp, #0]
  40617c:	4622      	mov	r2, r4
  40617e:	4b13      	ldr	r3, [pc, #76]	; (4061cc <_vfiprintf_r+0x228>)
  406180:	a904      	add	r1, sp, #16
  406182:	4630      	mov	r0, r6
  406184:	f7fd fe0e 	bl	403da4 <_printf_float>
  406188:	f1b0 3fff 	cmp.w	r0, #4294967295
  40618c:	4681      	mov	r9, r0
  40618e:	d1d8      	bne.n	406142 <_vfiprintf_r+0x19e>
  406190:	89a3      	ldrh	r3, [r4, #12]
  406192:	065b      	lsls	r3, r3, #25
  406194:	f53f af7d 	bmi.w	406092 <_vfiprintf_r+0xee>
  406198:	9809      	ldr	r0, [sp, #36]	; 0x24
  40619a:	e77c      	b.n	406096 <_vfiprintf_r+0xf2>
  40619c:	ab03      	add	r3, sp, #12
  40619e:	9300      	str	r3, [sp, #0]
  4061a0:	4622      	mov	r2, r4
  4061a2:	4b0a      	ldr	r3, [pc, #40]	; (4061cc <_vfiprintf_r+0x228>)
  4061a4:	a904      	add	r1, sp, #16
  4061a6:	4630      	mov	r0, r6
  4061a8:	f7fe f8aa 	bl	404300 <_printf_i>
  4061ac:	e7ec      	b.n	406188 <_vfiprintf_r+0x1e4>
  4061ae:	bf00      	nop
  4061b0:	00406bc0 	.word	0x00406bc0
  4061b4:	00406cfc 	.word	0x00406cfc
  4061b8:	00406be0 	.word	0x00406be0
  4061bc:	00406ba0 	.word	0x00406ba0
  4061c0:	00406d02 	.word	0x00406d02
  4061c4:	00406d06 	.word	0x00406d06
  4061c8:	00403da5 	.word	0x00403da5
  4061cc:	00405f81 	.word	0x00405f81

004061d0 <_sbrk_r>:
  4061d0:	b538      	push	{r3, r4, r5, lr}
  4061d2:	4c06      	ldr	r4, [pc, #24]	; (4061ec <_sbrk_r+0x1c>)
  4061d4:	2300      	movs	r3, #0
  4061d6:	4605      	mov	r5, r0
  4061d8:	4608      	mov	r0, r1
  4061da:	6023      	str	r3, [r4, #0]
  4061dc:	f7fb ff2e 	bl	40203c <_sbrk>
  4061e0:	1c43      	adds	r3, r0, #1
  4061e2:	d102      	bne.n	4061ea <_sbrk_r+0x1a>
  4061e4:	6823      	ldr	r3, [r4, #0]
  4061e6:	b103      	cbz	r3, 4061ea <_sbrk_r+0x1a>
  4061e8:	602b      	str	r3, [r5, #0]
  4061ea:	bd38      	pop	{r3, r4, r5, pc}
  4061ec:	20400834 	.word	0x20400834

004061f0 <__sread>:
  4061f0:	b510      	push	{r4, lr}
  4061f2:	460c      	mov	r4, r1
  4061f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4061f8:	f000 f968 	bl	4064cc <_read_r>
  4061fc:	2800      	cmp	r0, #0
  4061fe:	bfab      	itete	ge
  406200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  406202:	89a3      	ldrhlt	r3, [r4, #12]
  406204:	181b      	addge	r3, r3, r0
  406206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  40620a:	bfac      	ite	ge
  40620c:	6563      	strge	r3, [r4, #84]	; 0x54
  40620e:	81a3      	strhlt	r3, [r4, #12]
  406210:	bd10      	pop	{r4, pc}

00406212 <__swrite>:
  406212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406216:	461f      	mov	r7, r3
  406218:	898b      	ldrh	r3, [r1, #12]
  40621a:	05db      	lsls	r3, r3, #23
  40621c:	4605      	mov	r5, r0
  40621e:	460c      	mov	r4, r1
  406220:	4616      	mov	r6, r2
  406222:	d505      	bpl.n	406230 <__swrite+0x1e>
  406224:	2302      	movs	r3, #2
  406226:	2200      	movs	r2, #0
  406228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40622c:	f000 f928 	bl	406480 <_lseek_r>
  406230:	89a3      	ldrh	r3, [r4, #12]
  406232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40623a:	81a3      	strh	r3, [r4, #12]
  40623c:	4632      	mov	r2, r6
  40623e:	463b      	mov	r3, r7
  406240:	4628      	mov	r0, r5
  406242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406246:	f000 b869 	b.w	40631c <_write_r>

0040624a <__sseek>:
  40624a:	b510      	push	{r4, lr}
  40624c:	460c      	mov	r4, r1
  40624e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406252:	f000 f915 	bl	406480 <_lseek_r>
  406256:	1c43      	adds	r3, r0, #1
  406258:	89a3      	ldrh	r3, [r4, #12]
  40625a:	bf15      	itete	ne
  40625c:	6560      	strne	r0, [r4, #84]	; 0x54
  40625e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406266:	81a3      	strheq	r3, [r4, #12]
  406268:	bf18      	it	ne
  40626a:	81a3      	strhne	r3, [r4, #12]
  40626c:	bd10      	pop	{r4, pc}

0040626e <__sclose>:
  40626e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406272:	f000 b8d3 	b.w	40641c <_close_r>
	...

00406278 <__swbuf_r>:
  406278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40627a:	460e      	mov	r6, r1
  40627c:	4614      	mov	r4, r2
  40627e:	4605      	mov	r5, r0
  406280:	b118      	cbz	r0, 40628a <__swbuf_r+0x12>
  406282:	6983      	ldr	r3, [r0, #24]
  406284:	b90b      	cbnz	r3, 40628a <__swbuf_r+0x12>
  406286:	f7ff f983 	bl	405590 <__sinit>
  40628a:	4b21      	ldr	r3, [pc, #132]	; (406310 <__swbuf_r+0x98>)
  40628c:	429c      	cmp	r4, r3
  40628e:	d12a      	bne.n	4062e6 <__swbuf_r+0x6e>
  406290:	686c      	ldr	r4, [r5, #4]
  406292:	69a3      	ldr	r3, [r4, #24]
  406294:	60a3      	str	r3, [r4, #8]
  406296:	89a3      	ldrh	r3, [r4, #12]
  406298:	071a      	lsls	r2, r3, #28
  40629a:	d52e      	bpl.n	4062fa <__swbuf_r+0x82>
  40629c:	6923      	ldr	r3, [r4, #16]
  40629e:	b363      	cbz	r3, 4062fa <__swbuf_r+0x82>
  4062a0:	6923      	ldr	r3, [r4, #16]
  4062a2:	6820      	ldr	r0, [r4, #0]
  4062a4:	1ac0      	subs	r0, r0, r3
  4062a6:	6963      	ldr	r3, [r4, #20]
  4062a8:	b2f6      	uxtb	r6, r6
  4062aa:	4298      	cmp	r0, r3
  4062ac:	4637      	mov	r7, r6
  4062ae:	db04      	blt.n	4062ba <__swbuf_r+0x42>
  4062b0:	4621      	mov	r1, r4
  4062b2:	4628      	mov	r0, r5
  4062b4:	f7ff f902 	bl	4054bc <_fflush_r>
  4062b8:	bb28      	cbnz	r0, 406306 <__swbuf_r+0x8e>
  4062ba:	68a3      	ldr	r3, [r4, #8]
  4062bc:	3b01      	subs	r3, #1
  4062be:	60a3      	str	r3, [r4, #8]
  4062c0:	6823      	ldr	r3, [r4, #0]
  4062c2:	1c5a      	adds	r2, r3, #1
  4062c4:	6022      	str	r2, [r4, #0]
  4062c6:	701e      	strb	r6, [r3, #0]
  4062c8:	6963      	ldr	r3, [r4, #20]
  4062ca:	3001      	adds	r0, #1
  4062cc:	4298      	cmp	r0, r3
  4062ce:	d004      	beq.n	4062da <__swbuf_r+0x62>
  4062d0:	89a3      	ldrh	r3, [r4, #12]
  4062d2:	07db      	lsls	r3, r3, #31
  4062d4:	d519      	bpl.n	40630a <__swbuf_r+0x92>
  4062d6:	2e0a      	cmp	r6, #10
  4062d8:	d117      	bne.n	40630a <__swbuf_r+0x92>
  4062da:	4621      	mov	r1, r4
  4062dc:	4628      	mov	r0, r5
  4062de:	f7ff f8ed 	bl	4054bc <_fflush_r>
  4062e2:	b190      	cbz	r0, 40630a <__swbuf_r+0x92>
  4062e4:	e00f      	b.n	406306 <__swbuf_r+0x8e>
  4062e6:	4b0b      	ldr	r3, [pc, #44]	; (406314 <__swbuf_r+0x9c>)
  4062e8:	429c      	cmp	r4, r3
  4062ea:	d101      	bne.n	4062f0 <__swbuf_r+0x78>
  4062ec:	68ac      	ldr	r4, [r5, #8]
  4062ee:	e7d0      	b.n	406292 <__swbuf_r+0x1a>
  4062f0:	4b09      	ldr	r3, [pc, #36]	; (406318 <__swbuf_r+0xa0>)
  4062f2:	429c      	cmp	r4, r3
  4062f4:	bf08      	it	eq
  4062f6:	68ec      	ldreq	r4, [r5, #12]
  4062f8:	e7cb      	b.n	406292 <__swbuf_r+0x1a>
  4062fa:	4621      	mov	r1, r4
  4062fc:	4628      	mov	r0, r5
  4062fe:	f000 f81f 	bl	406340 <__swsetup_r>
  406302:	2800      	cmp	r0, #0
  406304:	d0cc      	beq.n	4062a0 <__swbuf_r+0x28>
  406306:	f04f 37ff 	mov.w	r7, #4294967295
  40630a:	4638      	mov	r0, r7
  40630c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40630e:	bf00      	nop
  406310:	00406bc0 	.word	0x00406bc0
  406314:	00406be0 	.word	0x00406be0
  406318:	00406ba0 	.word	0x00406ba0

0040631c <_write_r>:
  40631c:	b538      	push	{r3, r4, r5, lr}
  40631e:	4c07      	ldr	r4, [pc, #28]	; (40633c <_write_r+0x20>)
  406320:	4605      	mov	r5, r0
  406322:	4608      	mov	r0, r1
  406324:	4611      	mov	r1, r2
  406326:	2200      	movs	r2, #0
  406328:	6022      	str	r2, [r4, #0]
  40632a:	461a      	mov	r2, r3
  40632c:	f7fc ff30 	bl	403190 <_write>
  406330:	1c43      	adds	r3, r0, #1
  406332:	d102      	bne.n	40633a <_write_r+0x1e>
  406334:	6823      	ldr	r3, [r4, #0]
  406336:	b103      	cbz	r3, 40633a <_write_r+0x1e>
  406338:	602b      	str	r3, [r5, #0]
  40633a:	bd38      	pop	{r3, r4, r5, pc}
  40633c:	20400834 	.word	0x20400834

00406340 <__swsetup_r>:
  406340:	4b32      	ldr	r3, [pc, #200]	; (40640c <__swsetup_r+0xcc>)
  406342:	b570      	push	{r4, r5, r6, lr}
  406344:	681d      	ldr	r5, [r3, #0]
  406346:	4606      	mov	r6, r0
  406348:	460c      	mov	r4, r1
  40634a:	b125      	cbz	r5, 406356 <__swsetup_r+0x16>
  40634c:	69ab      	ldr	r3, [r5, #24]
  40634e:	b913      	cbnz	r3, 406356 <__swsetup_r+0x16>
  406350:	4628      	mov	r0, r5
  406352:	f7ff f91d 	bl	405590 <__sinit>
  406356:	4b2e      	ldr	r3, [pc, #184]	; (406410 <__swsetup_r+0xd0>)
  406358:	429c      	cmp	r4, r3
  40635a:	d10f      	bne.n	40637c <__swsetup_r+0x3c>
  40635c:	686c      	ldr	r4, [r5, #4]
  40635e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406362:	b29a      	uxth	r2, r3
  406364:	0715      	lsls	r5, r2, #28
  406366:	d42c      	bmi.n	4063c2 <__swsetup_r+0x82>
  406368:	06d0      	lsls	r0, r2, #27
  40636a:	d411      	bmi.n	406390 <__swsetup_r+0x50>
  40636c:	2209      	movs	r2, #9
  40636e:	6032      	str	r2, [r6, #0]
  406370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406374:	81a3      	strh	r3, [r4, #12]
  406376:	f04f 30ff 	mov.w	r0, #4294967295
  40637a:	bd70      	pop	{r4, r5, r6, pc}
  40637c:	4b25      	ldr	r3, [pc, #148]	; (406414 <__swsetup_r+0xd4>)
  40637e:	429c      	cmp	r4, r3
  406380:	d101      	bne.n	406386 <__swsetup_r+0x46>
  406382:	68ac      	ldr	r4, [r5, #8]
  406384:	e7eb      	b.n	40635e <__swsetup_r+0x1e>
  406386:	4b24      	ldr	r3, [pc, #144]	; (406418 <__swsetup_r+0xd8>)
  406388:	429c      	cmp	r4, r3
  40638a:	bf08      	it	eq
  40638c:	68ec      	ldreq	r4, [r5, #12]
  40638e:	e7e6      	b.n	40635e <__swsetup_r+0x1e>
  406390:	0751      	lsls	r1, r2, #29
  406392:	d512      	bpl.n	4063ba <__swsetup_r+0x7a>
  406394:	6b61      	ldr	r1, [r4, #52]	; 0x34
  406396:	b141      	cbz	r1, 4063aa <__swsetup_r+0x6a>
  406398:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40639c:	4299      	cmp	r1, r3
  40639e:	d002      	beq.n	4063a6 <__swsetup_r+0x66>
  4063a0:	4630      	mov	r0, r6
  4063a2:	f7ff fd2b 	bl	405dfc <_free_r>
  4063a6:	2300      	movs	r3, #0
  4063a8:	6363      	str	r3, [r4, #52]	; 0x34
  4063aa:	89a3      	ldrh	r3, [r4, #12]
  4063ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4063b0:	81a3      	strh	r3, [r4, #12]
  4063b2:	2300      	movs	r3, #0
  4063b4:	6063      	str	r3, [r4, #4]
  4063b6:	6923      	ldr	r3, [r4, #16]
  4063b8:	6023      	str	r3, [r4, #0]
  4063ba:	89a3      	ldrh	r3, [r4, #12]
  4063bc:	f043 0308 	orr.w	r3, r3, #8
  4063c0:	81a3      	strh	r3, [r4, #12]
  4063c2:	6923      	ldr	r3, [r4, #16]
  4063c4:	b94b      	cbnz	r3, 4063da <__swsetup_r+0x9a>
  4063c6:	89a3      	ldrh	r3, [r4, #12]
  4063c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
  4063cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4063d0:	d003      	beq.n	4063da <__swsetup_r+0x9a>
  4063d2:	4621      	mov	r1, r4
  4063d4:	4630      	mov	r0, r6
  4063d6:	f7ff f997 	bl	405708 <__smakebuf_r>
  4063da:	89a2      	ldrh	r2, [r4, #12]
  4063dc:	f012 0301 	ands.w	r3, r2, #1
  4063e0:	d00c      	beq.n	4063fc <__swsetup_r+0xbc>
  4063e2:	2300      	movs	r3, #0
  4063e4:	60a3      	str	r3, [r4, #8]
  4063e6:	6963      	ldr	r3, [r4, #20]
  4063e8:	425b      	negs	r3, r3
  4063ea:	61a3      	str	r3, [r4, #24]
  4063ec:	6923      	ldr	r3, [r4, #16]
  4063ee:	b953      	cbnz	r3, 406406 <__swsetup_r+0xc6>
  4063f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4063f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  4063f8:	d1ba      	bne.n	406370 <__swsetup_r+0x30>
  4063fa:	bd70      	pop	{r4, r5, r6, pc}
  4063fc:	0792      	lsls	r2, r2, #30
  4063fe:	bf58      	it	pl
  406400:	6963      	ldrpl	r3, [r4, #20]
  406402:	60a3      	str	r3, [r4, #8]
  406404:	e7f2      	b.n	4063ec <__swsetup_r+0xac>
  406406:	2000      	movs	r0, #0
  406408:	e7f7      	b.n	4063fa <__swsetup_r+0xba>
  40640a:	bf00      	nop
  40640c:	20400048 	.word	0x20400048
  406410:	00406bc0 	.word	0x00406bc0
  406414:	00406be0 	.word	0x00406be0
  406418:	00406ba0 	.word	0x00406ba0

0040641c <_close_r>:
  40641c:	b538      	push	{r3, r4, r5, lr}
  40641e:	4c06      	ldr	r4, [pc, #24]	; (406438 <_close_r+0x1c>)
  406420:	2300      	movs	r3, #0
  406422:	4605      	mov	r5, r0
  406424:	4608      	mov	r0, r1
  406426:	6023      	str	r3, [r4, #0]
  406428:	f7fb fe1a 	bl	402060 <_close>
  40642c:	1c43      	adds	r3, r0, #1
  40642e:	d102      	bne.n	406436 <_close_r+0x1a>
  406430:	6823      	ldr	r3, [r4, #0]
  406432:	b103      	cbz	r3, 406436 <_close_r+0x1a>
  406434:	602b      	str	r3, [r5, #0]
  406436:	bd38      	pop	{r3, r4, r5, pc}
  406438:	20400834 	.word	0x20400834

0040643c <_fstat_r>:
  40643c:	b538      	push	{r3, r4, r5, lr}
  40643e:	4c07      	ldr	r4, [pc, #28]	; (40645c <_fstat_r+0x20>)
  406440:	2300      	movs	r3, #0
  406442:	4605      	mov	r5, r0
  406444:	4608      	mov	r0, r1
  406446:	4611      	mov	r1, r2
  406448:	6023      	str	r3, [r4, #0]
  40644a:	f7fb fe0c 	bl	402066 <_fstat>
  40644e:	1c43      	adds	r3, r0, #1
  406450:	d102      	bne.n	406458 <_fstat_r+0x1c>
  406452:	6823      	ldr	r3, [r4, #0]
  406454:	b103      	cbz	r3, 406458 <_fstat_r+0x1c>
  406456:	602b      	str	r3, [r5, #0]
  406458:	bd38      	pop	{r3, r4, r5, pc}
  40645a:	bf00      	nop
  40645c:	20400834 	.word	0x20400834

00406460 <_isatty_r>:
  406460:	b538      	push	{r3, r4, r5, lr}
  406462:	4c06      	ldr	r4, [pc, #24]	; (40647c <_isatty_r+0x1c>)
  406464:	2300      	movs	r3, #0
  406466:	4605      	mov	r5, r0
  406468:	4608      	mov	r0, r1
  40646a:	6023      	str	r3, [r4, #0]
  40646c:	f7fb fe00 	bl	402070 <_isatty>
  406470:	1c43      	adds	r3, r0, #1
  406472:	d102      	bne.n	40647a <_isatty_r+0x1a>
  406474:	6823      	ldr	r3, [r4, #0]
  406476:	b103      	cbz	r3, 40647a <_isatty_r+0x1a>
  406478:	602b      	str	r3, [r5, #0]
  40647a:	bd38      	pop	{r3, r4, r5, pc}
  40647c:	20400834 	.word	0x20400834

00406480 <_lseek_r>:
  406480:	b538      	push	{r3, r4, r5, lr}
  406482:	4c07      	ldr	r4, [pc, #28]	; (4064a0 <_lseek_r+0x20>)
  406484:	4605      	mov	r5, r0
  406486:	4608      	mov	r0, r1
  406488:	4611      	mov	r1, r2
  40648a:	2200      	movs	r2, #0
  40648c:	6022      	str	r2, [r4, #0]
  40648e:	461a      	mov	r2, r3
  406490:	f7fb fdf0 	bl	402074 <_lseek>
  406494:	1c43      	adds	r3, r0, #1
  406496:	d102      	bne.n	40649e <_lseek_r+0x1e>
  406498:	6823      	ldr	r3, [r4, #0]
  40649a:	b103      	cbz	r3, 40649e <_lseek_r+0x1e>
  40649c:	602b      	str	r3, [r5, #0]
  40649e:	bd38      	pop	{r3, r4, r5, pc}
  4064a0:	20400834 	.word	0x20400834

004064a4 <__ascii_mbtowc>:
  4064a4:	b082      	sub	sp, #8
  4064a6:	b901      	cbnz	r1, 4064aa <__ascii_mbtowc+0x6>
  4064a8:	a901      	add	r1, sp, #4
  4064aa:	b142      	cbz	r2, 4064be <__ascii_mbtowc+0x1a>
  4064ac:	b14b      	cbz	r3, 4064c2 <__ascii_mbtowc+0x1e>
  4064ae:	7813      	ldrb	r3, [r2, #0]
  4064b0:	600b      	str	r3, [r1, #0]
  4064b2:	7812      	ldrb	r2, [r2, #0]
  4064b4:	1c10      	adds	r0, r2, #0
  4064b6:	bf18      	it	ne
  4064b8:	2001      	movne	r0, #1
  4064ba:	b002      	add	sp, #8
  4064bc:	4770      	bx	lr
  4064be:	4610      	mov	r0, r2
  4064c0:	e7fb      	b.n	4064ba <__ascii_mbtowc+0x16>
  4064c2:	f06f 0001 	mvn.w	r0, #1
  4064c6:	e7f8      	b.n	4064ba <__ascii_mbtowc+0x16>

004064c8 <__malloc_lock>:
  4064c8:	4770      	bx	lr

004064ca <__malloc_unlock>:
  4064ca:	4770      	bx	lr

004064cc <_read_r>:
  4064cc:	b538      	push	{r3, r4, r5, lr}
  4064ce:	4c07      	ldr	r4, [pc, #28]	; (4064ec <_read_r+0x20>)
  4064d0:	4605      	mov	r5, r0
  4064d2:	4608      	mov	r0, r1
  4064d4:	4611      	mov	r1, r2
  4064d6:	2200      	movs	r2, #0
  4064d8:	6022      	str	r2, [r4, #0]
  4064da:	461a      	mov	r2, r3
  4064dc:	f7fc fe46 	bl	40316c <_read>
  4064e0:	1c43      	adds	r3, r0, #1
  4064e2:	d102      	bne.n	4064ea <_read_r+0x1e>
  4064e4:	6823      	ldr	r3, [r4, #0]
  4064e6:	b103      	cbz	r3, 4064ea <_read_r+0x1e>
  4064e8:	602b      	str	r3, [r5, #0]
  4064ea:	bd38      	pop	{r3, r4, r5, pc}
  4064ec:	20400834 	.word	0x20400834

004064f0 <__ascii_wctomb>:
  4064f0:	b149      	cbz	r1, 406506 <__ascii_wctomb+0x16>
  4064f2:	2aff      	cmp	r2, #255	; 0xff
  4064f4:	bf85      	ittet	hi
  4064f6:	238a      	movhi	r3, #138	; 0x8a
  4064f8:	6003      	strhi	r3, [r0, #0]
  4064fa:	700a      	strbls	r2, [r1, #0]
  4064fc:	f04f 30ff 	movhi.w	r0, #4294967295
  406500:	bf98      	it	ls
  406502:	2001      	movls	r0, #1
  406504:	4770      	bx	lr
  406506:	4608      	mov	r0, r1
  406508:	4770      	bx	lr
  40650a:	0000      	movs	r0, r0
  40650c:	203d2058 	.word	0x203d2058
  406510:	09206625 	.word	0x09206625
  406514:	20662520 	.word	0x20662520
  406518:	66252009 	.word	0x66252009
  40651c:	25200920 	.word	0x25200920
  406520:	20092066 	.word	0x20092066
  406524:	09206625 	.word	0x09206625
  406528:	00000a20 	.word	0x00000a20
  40652c:	203d2059 	.word	0x203d2059
  406530:	09206625 	.word	0x09206625
  406534:	20662520 	.word	0x20662520
  406538:	66252009 	.word	0x66252009
  40653c:	25200920 	.word	0x25200920
  406540:	20092066 	.word	0x20092066
  406544:	09206625 	.word	0x09206625
  406548:	00000a20 	.word	0x00000a20
  40654c:	4441200a 	.word	0x4441200a
  406550:	65542043 	.word	0x65542043
  406554:	7265706d 	.word	0x7265706d
  406558:	72757461 	.word	0x72757461
  40655c:	65542065 	.word	0x65542065
  406560:	6e697473 	.word	0x6e697473
  406564:	2d2d2067 	.word	0x2d2d2067
  406568:	2d2d2d2d 	.word	0x2d2d2d2d
  40656c:	2d2d2d2d 	.word	0x2d2d2d2d
  406570:	2d2d2d2d 	.word	0x2d2d2d2d
  406574:	0a2d2d2d 	.word	0x0a2d2d2d
  406578:	00000000 	.word	0x00000000
  40657c:	20776152 	.word	0x20776152
  406580:	61746144 	.word	0x61746144
  406584:	00000a20 	.word	0x00000a20
  406588:	706d6554 	.word	0x706d6554
  40658c:	203d2031 	.word	0x203d2031
  406590:	09206925 	.word	0x09206925
  406594:	65542009 	.word	0x65542009
  406598:	2032706d 	.word	0x2032706d
  40659c:	6925203d 	.word	0x6925203d
  4065a0:	20090920 	.word	0x20090920
  4065a4:	706d6554 	.word	0x706d6554
  4065a8:	203d2033 	.word	0x203d2033
  4065ac:	0a206925 	.word	0x0a206925
  4065b0:	00000000 	.word	0x00000000
  4065b4:	706d6554 	.word	0x706d6554
  4065b8:	203d2034 	.word	0x203d2034
  4065bc:	09206925 	.word	0x09206925
  4065c0:	65542009 	.word	0x65542009
  4065c4:	2035706d 	.word	0x2035706d
  4065c8:	6925203d 	.word	0x6925203d
  4065cc:	20090920 	.word	0x20090920
  4065d0:	706d6554 	.word	0x706d6554
  4065d4:	203d2036 	.word	0x203d2036
  4065d8:	0a206925 	.word	0x0a206925
  4065dc:	00000000 	.word	0x00000000
  4065e0:	706d6554 	.word	0x706d6554
  4065e4:	746f4d20 	.word	0x746f4d20
  4065e8:	3d20726f 	.word	0x3d20726f
  4065ec:	20692520 	.word	0x20692520
  4065f0:	00000a20 	.word	0x00000a20
  4065f4:	7543200a 	.word	0x7543200a
  4065f8:	6e657272 	.word	0x6e657272
  4065fc:	6e612074 	.word	0x6e612074
  406600:	6f562064 	.word	0x6f562064
  406604:	6761746c 	.word	0x6761746c
  406608:	65542065 	.word	0x65542065
  40660c:	6e697473 	.word	0x6e697473
  406610:	2d2d2067 	.word	0x2d2d2067
  406614:	2d2d2d2d 	.word	0x2d2d2d2d
  406618:	2d2d2d2d 	.word	0x2d2d2d2d
  40661c:	2d2d2d2d 	.word	0x2d2d2d2d
  406620:	0a2d2d2d 	.word	0x0a2d2d2d
  406624:	00000000 	.word	0x00000000
  406628:	72727543 	.word	0x72727543
  40662c:	203d2041 	.word	0x203d2041
  406630:	09206925 	.word	0x09206925
  406634:	75432009 	.word	0x75432009
  406638:	20427272 	.word	0x20427272
  40663c:	6925203d 	.word	0x6925203d
  406640:	20090920 	.word	0x20090920
  406644:	72727543 	.word	0x72727543
  406648:	203d2043 	.word	0x203d2043
  40664c:	0a206925 	.word	0x0a206925
  406650:	00000000 	.word	0x00000000
  406654:	70707553 	.word	0x70707553
  406658:	5620796c 	.word	0x5620796c
  40665c:	61746c6f 	.word	0x61746c6f
  406660:	3d206567 	.word	0x3d206567
  406664:	20692520 	.word	0x20692520
  406668:	00000a20 	.word	0x00000a20
  40666c:	656d6954 	.word	0x656d6954
  406670:	43444120 	.word	0x43444120
  406674:	3d20305f 	.word	0x3d20305f
  406678:	20662520 	.word	0x20662520
  40667c:	09207375 	.word	0x09207375
  406680:	6d695420 	.word	0x6d695420
  406684:	44412065 	.word	0x44412065
  406688:	20315f43 	.word	0x20315f43
  40668c:	6625203d 	.word	0x6625203d
  406690:	20737520 	.word	0x20737520
  406694:	0000000a 	.word	0x0000000a
  406698:	746c6544 	.word	0x746c6544
  40669c:	3d207361 	.word	0x3d207361
  4066a0:	20662520 	.word	0x20662520
  4066a4:	66252009 	.word	0x66252009
  4066a8:	0000000a 	.word	0x0000000a
  4066ac:	72727543 	.word	0x72727543
  4066b0:	6d697420 	.word	0x6d697420
  4066b4:	203d2065 	.word	0x203d2065
  4066b8:	000a6625 	.word	0x000a6625
  4066bc:	203d206b 	.word	0x203d206b
  4066c0:	0a206925 	.word	0x0a206925
  4066c4:	00000000 	.word	0x00000000
  4066c8:	74736554 	.word	0x74736554
  4066cc:	20676e69 	.word	0x20676e69
  4066d0:	656d6954 	.word	0x656d6954
  4066d4:	6f432072 	.word	0x6f432072
  4066d8:	65746e75 	.word	0x65746e75
  4066dc:	00007372 	.word	0x00007372
  4066e0:	6f636e45 	.word	0x6f636e45
  4066e4:	20726564 	.word	0x20726564
  4066e8:	203d2041 	.word	0x203d2041
  4066ec:	75252009 	.word	0x75252009
  4066f0:	09203b20 	.word	0x09203b20
  4066f4:	20752520 	.word	0x20752520
  4066f8:	0000000a 	.word	0x0000000a
  4066fc:	6f636e45 	.word	0x6f636e45
  406700:	20726564 	.word	0x20726564
  406704:	203d2042 	.word	0x203d2042
  406708:	75252009 	.word	0x75252009
  40670c:	09203b20 	.word	0x09203b20
  406710:	20752520 	.word	0x20752520
  406714:	00000a0a 	.word	0x00000a0a
  406718:	6f636e45 	.word	0x6f636e45
  40671c:	20726564 	.word	0x20726564
  406720:	6e756f63 	.word	0x6e756f63
  406724:	20726574 	.word	0x20726574
  406728:	6925203d 	.word	0x6925203d
  40672c:	203b0920 	.word	0x203b0920
  406730:	6c676e61 	.word	0x6c676e61
  406734:	203d2065 	.word	0x203d2065
  406738:	0a206625 	.word	0x0a206625
  40673c:	00000000 	.word	0x00000000
  406740:	682f2e2e 	.word	0x682f2e2e
  406744:	732f6c61 	.word	0x732f6c61
  406748:	682f6372 	.word	0x682f6372
  40674c:	615f6c61 	.word	0x615f6c61
  406750:	615f6364 	.word	0x615f6364
  406754:	636e7973 	.word	0x636e7973
  406758:	0000632e 	.word	0x0000632e
  40675c:	682f2e2e 	.word	0x682f2e2e
  406760:	732f6c61 	.word	0x732f6c61
  406764:	682f6372 	.word	0x682f6372
  406768:	695f6c61 	.word	0x695f6c61
  40676c:	00632e6f 	.word	0x00632e6f
  406770:	682f2e2e 	.word	0x682f2e2e
  406774:	732f6c61 	.word	0x732f6c61
  406778:	682f6372 	.word	0x682f6372
  40677c:	705f6c61 	.word	0x705f6c61
  406780:	632e6d77 	.word	0x632e6d77
  406784:	00000000 	.word	0x00000000
  406788:	682f2e2e 	.word	0x682f2e2e
  40678c:	732f6c61 	.word	0x732f6c61
  406790:	682f6372 	.word	0x682f6372
  406794:	745f6c61 	.word	0x745f6c61
  406798:	72656d69 	.word	0x72656d69
  40679c:	0000632e 	.word	0x0000632e
  4067a0:	682f2e2e 	.word	0x682f2e2e
  4067a4:	732f6c61 	.word	0x732f6c61
  4067a8:	682f6372 	.word	0x682f6372
  4067ac:	755f6c61 	.word	0x755f6c61
  4067b0:	74726173 	.word	0x74726173
  4067b4:	6e79735f 	.word	0x6e79735f
  4067b8:	00632e63 	.word	0x00632e63
  4067bc:	682f2e2e 	.word	0x682f2e2e
  4067c0:	752f6c61 	.word	0x752f6c61
  4067c4:	736c6974 	.word	0x736c6974
  4067c8:	6372732f 	.word	0x6372732f
  4067cc:	6974752f 	.word	0x6974752f
  4067d0:	6c5f736c 	.word	0x6c5f736c
  4067d4:	2e747369 	.word	0x2e747369
  4067d8:	00000063 	.word	0x00000063
  4067dc:	682f2e2e 	.word	0x682f2e2e
  4067e0:	752f6c61 	.word	0x752f6c61
  4067e4:	736c6974 	.word	0x736c6974
  4067e8:	6372732f 	.word	0x6372732f
  4067ec:	6974752f 	.word	0x6974752f
  4067f0:	725f736c 	.word	0x725f736c
  4067f4:	62676e69 	.word	0x62676e69
  4067f8:	65666675 	.word	0x65666675
  4067fc:	00632e72 	.word	0x00632e72

00406800 <_afecs>:
  406800:	00000000 2f84080b 23000000 ffffffff     ......./...#....
  406810:	0000ffff 00000000 00000000 00000000     ................
  406820:	0000030c 00000000 00000000 00000000     ................
  406830:	00000000 00000200 00000200 00000200     ................
  406840:	00000200 00000200 00000200 00000200     ................
  406850:	00000200 00000200 00000200 00000200     ................
  406860:	00000200 00000001 2f84080b 23000000     .........../...#
  406870:	ffffffff 0000ffff 00000000 00000000     ................
  406880:	00000000 0000030c 00000000 00000000     ................
	...
  406898:	00000200 00000200 00000200 00000200     ................
  4068a8:	00000200 00000200 00000200 00000200     ................
  4068b8:	00000200 00000200 00000200 00000200     ................
  4068c8:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  4068d8:	63656661 0000632e                       afec.c..

004068e0 <_ext_irq>:
  4068e0:	00000000 00000024 00000000 00000000     ....$...........
	...
  4068fc:	00000001 00002000 00002000 00002000     ..... ... ... ..
  40690c:	00000000 00002000 00000000 00000003     ..... ..........
  40691c:	00080000 00000000 00000000 00000000     ................
	...

00406934 <_pio_irq_n>:
  406934:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  406944:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  406954:	00000000                                ....

00406958 <_pwms>:
  406958:	40020000 0000001f 00010005 00000001     ...@............
  406968:	00000001 000000ff 00000000 00000004     ................
	...
  406984:	00000002 004069e0 00000001 20400388     .....i@.......@ 
  406994:	4005c000 0000003c 00010005 00000001     ...@<...........
  4069a4:	00000001 000000ff 00000000 00000004     ................
	...
  4069c0:	00000001 004069d0 00000001 2040037c     .....i@.....|.@ 

004069d0 <_ch_cfg1>:
  4069d0:	00000000 0000010b 000003e8 00000200     ................

004069e0 <_ch_cfg0>:
  4069e0:	00000000 0000010b 000003e8 00000200     ................
  4069f0:	00000002 0000010b 000003e8 00000200     ................
  406a00:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  406a10:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  406a20:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00406a2c <_usarts>:
  406a2c:	00000001 001008c0 000100f4 682f2e2e     ............../h
  406a3c:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  406a4c:	632e7472 00000000                       rt.c....

00406a54 <_cfgs>:
  406a54:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  406a64:	00000040 00000000 00000040 00000000     @.......@.......
  406a74:	00000040 00000000 00000040 00000000     @.......@.......
  406a84:	00000040 00000000 00000040 00000000     @.......@.......
  406a94:	00000040 00000000 00000040 00000000     @.......@.......
  406aa4:	00000040 00000000 00000040 00000000     @.......@.......
  406ab4:	00000040 00000000 00000040 00000000     @.......@.......
  406ac4:	00000040 00000000 00000040 00000000     @.......@.......
  406ad4:	00000040 00000000 00000040 00000000     @.......@.......
  406ae4:	00000040 00000000 00000040 00000000     @.......@.......
  406af4:	00000040 00000000 00000040 00000000     @.......@.......
  406b04:	00000040 00000000 00000040 00000000     @.......@.......
  406b14:	74696e49 65746169 000a2064 72617453     Initiated ..Star
  406b24:	676e6974 61204420 20736978 67696c61     ting D axis alig
  406b34:	6e656d6e 000a2074 696e6946 64656873     nment ..Finished
  406b44:	61204420 20736978 67696c61 6e656d6e      D axis alignmen
  406b54:	000a2074                                t ..

00406b58 <_global_impure_ptr>:
  406b58:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  406b68:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  406b78:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  406b88:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  406b98:	4e614e00 00000000                       .NaN....

00406ba0 <__sf_fake_stderr>:
	...

00406bc0 <__sf_fake_stdin>:
	...

00406be0 <__sf_fake_stdout>:
	...

00406c00 <__mprec_bigtens>:
  406c00:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  406c10:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  406c20:	7f73bf3c 75154fdd                       <.s..O.u

00406c28 <__mprec_tens>:
  406c28:	00000000 3ff00000 00000000 40240000     .......?......$@
  406c38:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  406c48:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  406c58:	00000000 412e8480 00000000 416312d0     .......A......cA
  406c68:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  406c78:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406c88:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406c98:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  406ca8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406cb8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  406cc8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406cd8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406ce8:	79d99db4 44ea7843                       ...yCx.D

00406cf0 <p05.6047>:
  406cf0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  406d00:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  406d10:	5849534f 00002e00                                OSIX...

00406d17 <_ctype_>:
  406d17:	20202000 20202020 28282020 20282828     .         ((((( 
  406d27:	20202020 20202020 20202020 20202020                     
  406d37:	10108820 10101010 10101010 10101010      ...............
  406d47:	04040410 04040404 10040404 10101010     ................
  406d57:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406d67:	01010101 01010101 01010101 10101010     ................
  406d77:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406d87:	02020202 02020202 02020202 10101010     ................
  406d97:	00000020 00000000 00000000 00000000      ...............
	...

00406e18 <_init>:
  406e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406e1a:	bf00      	nop
  406e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406e1e:	bc08      	pop	{r3}
  406e20:	469e      	mov	lr, r3
  406e22:	4770      	bx	lr

00406e24 <__init_array_start>:
  406e24:	0040018d 	.word	0x0040018d

00406e28 <_fini>:
  406e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406e2a:	bf00      	nop
  406e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406e2e:	bc08      	pop	{r3}
  406e30:	469e      	mov	lr, r3
  406e32:	4770      	bx	lr

00406e34 <__fini_array_start>:
  406e34:	00400169 	.word	0x00400169
