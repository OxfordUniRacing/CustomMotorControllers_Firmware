
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000081b8  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000021c  20400000  004081b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005a0  2040021c  004083d4  0002021c  2**2
                  ALLOC
  3 .heap         00000204  204007bc  00408974  0002021c  2**0
                  ALLOC
  4 .stack        00000400  204009c0  00408b78  0002021c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
  6 .comment      000000c7  00000000  00000000  0002024a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003009f  00000000  00000000  00020311  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005fa5  00000000  00000000  000503b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d5d1  00000000  00000000  00056355  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f30  00000000  00000000  00063926  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000de0  00000000  00000000  00064856  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0004a3e5  00000000  00000000  00065636  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00023216  00000000  00000000  000afa1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001593d6  00000000  00000000  000d2c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000035fc  00000000  00000000  0022c008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 0d 40 20 01 0f 40 00 fd 0e 40 00 fd 0e 40 00     ..@ ..@...@...@.
  400010:	fd 0e 40 00 fd 0e 40 00 fd 0e 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	fd 0e 40 00 fd 0e 40 00 00 00 00 00 fd 0e 40 00     ..@...@.......@.
  40003c:	fd 0e 40 00 fd 0e 40 00 fd 0e 40 00 fd 0e 40 00     ..@...@...@...@.
  40004c:	fd 0e 40 00 fd 0e 40 00 fd 0e 40 00 fd 0e 40 00     ..@...@...@...@.
  40005c:	fd 0e 40 00 fd 0e 40 00 00 00 00 00 d1 23 40 00     ..@...@......#@.
  40006c:	c5 23 40 00 fd 0e 40 00 fd 0e 40 00 fd 0e 40 00     .#@...@...@...@.
  40007c:	fd 0e 40 00 b9 23 40 00 fd 0e 40 00 fd 0e 40 00     ..@..#@...@...@.
  40008c:	fd 0e 40 00 fd 0e 40 00 fd 0e 40 00 fd 0e 40 00     ..@...@...@...@.
  40009c:	39 2a 40 00 fd 0e 40 00 fd 0e 40 00 fd 0e 40 00     9*@...@...@...@.
  4000ac:	fd 0e 40 00 fd 0e 40 00 89 1f 40 00 fd 0e 40 00     ..@...@...@...@.
  4000bc:	85 25 40 00 fd 0e 40 00 fd 0e 40 00 fd 0e 40 00     .%@...@...@...@.
  4000cc:	fd 0e 40 00 fd 0e 40 00 69 21 40 00 fd 0e 40 00     ..@...@.i!@...@.
  4000dc:	fd 0e 40 00 9d 1f 40 00 fd 0e 40 00 fd 0e 40 00     ..@...@...@...@.
  4000ec:	fd 0e 40 00 fd 0e 40 00 fd 0e 40 00 fd 0e 40 00     ..@...@...@...@.
  4000fc:	fd 0e 40 00 fd 0e 40 00 fd 0e 40 00 4d 2a 40 00     ..@...@...@.M*@.
  40010c:	fd 0e 40 00 fd 0e 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 fd 0e 40 00 fd 0e 40 00 a9 2d 40 00     ......@...@..-@.
  40012c:	fd 0e 40 00 99 25 40 00 fd 0e 40 00 fd 0e 40 00     ..@..%@...@...@.
  40013c:	fd 0e 40 00 fd 0e 40 00 fd 0e 40 00 fd 0e 40 00     ..@...@...@...@.
  40014c:	fd 0e 40 00 fd 0e 40 00 fd 0e 40 00 fd 0e 40 00     ..@...@...@...@.
  40015c:	fd 0e 40 00 fd 0e 40 00 fd 0e 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	2040021c 	.word	0x2040021c
  400184:	00000000 	.word	0x00000000
  400188:	004081b8 	.word	0x004081b8

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004081b8 	.word	0x004081b8
  4001c8:	20400220 	.word	0x20400220
  4001cc:	004081b8 	.word	0x004081b8
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	004013d9 	.word	0x004013d9
  4001e4:	00402f5d 	.word	0x00402f5d

004001e8 <Init_Control>:
#include "Control.h"
#include "ControlConfig.h"
#include "ControlStartup.h"
#include "EstimateTheta.h"

void Init_Control(void) {
  4001e8:	b570      	push	{r4, r5, r6, lr}
	arm_mat_init_f32 (&A,A_rows,A_cols,(float32_t *)A_data);    //MATRIX EXAMPLE
  4001ea:	4b10      	ldr	r3, [pc, #64]	; (40022c <Init_Control+0x44>)
  4001ec:	2202      	movs	r2, #2
  4001ee:	2103      	movs	r1, #3
  4001f0:	480f      	ldr	r0, [pc, #60]	; (400230 <Init_Control+0x48>)
  4001f2:	4c10      	ldr	r4, [pc, #64]	; (400234 <Init_Control+0x4c>)
  4001f4:	47a0      	blx	r4
	arm_mat_init_f32 (&I,I_rows,I_cols,(float32_t *)control_currents);    //create current vector
  4001f6:	4b10      	ldr	r3, [pc, #64]	; (400238 <Init_Control+0x50>)
  4001f8:	2201      	movs	r2, #1
  4001fa:	2103      	movs	r1, #3
  4001fc:	480f      	ldr	r0, [pc, #60]	; (40023c <Init_Control+0x54>)
  4001fe:	47a0      	blx	r4
	arm_mat_init_f32 (&PWM,PWM_rows,PWM_cols,(float32_t *)PWM_data);    //create pwm vector
  400200:	4b0f      	ldr	r3, [pc, #60]	; (400240 <Init_Control+0x58>)
  400202:	2201      	movs	r2, #1
  400204:	2103      	movs	r1, #3
  400206:	480f      	ldr	r0, [pc, #60]	; (400244 <Init_Control+0x5c>)
  400208:	47a0      	blx	r4
	
	PID_init_ncts(&PID_d, PID_d_Kp, PID_d_Ki, PID_d_Kd);		//initialise the PID controller for d and q values
  40020a:	2500      	movs	r5, #0
  40020c:	4c0e      	ldr	r4, [pc, #56]	; (400248 <Init_Control+0x60>)
  40020e:	462b      	mov	r3, r5
  400210:	4622      	mov	r2, r4
  400212:	4621      	mov	r1, r4
  400214:	480d      	ldr	r0, [pc, #52]	; (40024c <Init_Control+0x64>)
  400216:	4e0e      	ldr	r6, [pc, #56]	; (400250 <Init_Control+0x68>)
  400218:	47b0      	blx	r6
	PID_init_ncts(&PID_q, PID_q_Kp, PID_q_Ki, PID_q_Kd);
  40021a:	462b      	mov	r3, r5
  40021c:	4622      	mov	r2, r4
  40021e:	4621      	mov	r1, r4
  400220:	480c      	ldr	r0, [pc, #48]	; (400254 <Init_Control+0x6c>)
  400222:	47b0      	blx	r6
	
	oldtorquerequest = 0;
  400224:	4b0c      	ldr	r3, [pc, #48]	; (400258 <Init_Control+0x70>)
  400226:	601d      	str	r5, [r3, #0]
  400228:	bd70      	pop	{r4, r5, r6, pc}
  40022a:	bf00      	nop
  40022c:	204004dc 	.word	0x204004dc
  400230:	204004f4 	.word	0x204004f4
  400234:	00404595 	.word	0x00404595
  400238:	20400574 	.word	0x20400574
  40023c:	20400558 	.word	0x20400558
  400240:	20400560 	.word	0x20400560
  400244:	20400548 	.word	0x20400548
  400248:	41a9c28f 	.word	0x41a9c28f
  40024c:	20400528 	.word	0x20400528
  400250:	004005a9 	.word	0x004005a9
  400254:	20400500 	.word	0x20400500
  400258:	20400544 	.word	0x20400544
  40025c:	00000000 	.word	0x00000000

00400260 <getIqId_r>:
}


void getIqId_r(float torquerequest, float* Iq_r, float* Id_r, float V_dc) {		//Calculates reference currents based on the torque requests 
  400260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400264:	ed2d 8b02 	vpush	{d8}
  400268:	460f      	mov	r7, r1
  40026a:	4690      	mov	r8, r2
	
	//float omega_base_e = V_dc*LST_SQ_OMEGA_BASE_E				//FIELD WEAKENING PART TO FINISH
	//if(omega_e > omega_base_e ){}
		
	float I_m = 2*torquerequest/(3*PP*FLUX_PM);
  40026c:	ee07 0a90 	vmov	s15, r0
  400270:	ee77 7aa7 	vadd.f32	s15, s15, s15
  400274:	ee17 0a90 	vmov	r0, s15
  400278:	4b27      	ldr	r3, [pc, #156]	; (400318 <getIqId_r+0xb8>)
  40027a:	4798      	blx	r3
  40027c:	a320      	add	r3, pc, #128	; (adr r3, 400300 <getIqId_r+0xa0>)
  40027e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400282:	4c26      	ldr	r4, [pc, #152]	; (40031c <getIqId_r+0xbc>)
  400284:	47a0      	blx	r4
  400286:	4b26      	ldr	r3, [pc, #152]	; (400320 <getIqId_r+0xc0>)
  400288:	4798      	blx	r3
  40028a:	ee07 0a90 	vmov	s15, r0
	if (I_m > I_MAX){I_m = I_MAX;}
  40028e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
  400292:	eef4 7ac7 	vcmpe.f32	s15, s14
  400296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40029a:	dd01      	ble.n	4002a0 <getIqId_r+0x40>
  40029c:	eef0 7a47 	vmov.f32	s15, s14
	*Id_r = C1 - sqrt(C1_SQR - 0.5*(I_m*I_m));
  4002a0:	ee27 8aa7 	vmul.f32	s16, s15, s15
  4002a4:	4e1c      	ldr	r6, [pc, #112]	; (400318 <getIqId_r+0xb8>)
  4002a6:	ee18 0a10 	vmov	r0, s16
  4002aa:	47b0      	blx	r6
  4002ac:	2200      	movs	r2, #0
  4002ae:	4b1d      	ldr	r3, [pc, #116]	; (400324 <getIqId_r+0xc4>)
  4002b0:	4c1d      	ldr	r4, [pc, #116]	; (400328 <getIqId_r+0xc8>)
  4002b2:	47a0      	blx	r4
  4002b4:	4c1d      	ldr	r4, [pc, #116]	; (40032c <getIqId_r+0xcc>)
  4002b6:	4602      	mov	r2, r0
  4002b8:	460b      	mov	r3, r1
  4002ba:	a113      	add	r1, pc, #76	; (adr r1, 400308 <getIqId_r+0xa8>)
  4002bc:	e9d1 0100 	ldrd	r0, r1, [r1]
  4002c0:	47a0      	blx	r4
  4002c2:	4d1b      	ldr	r5, [pc, #108]	; (400330 <getIqId_r+0xd0>)
  4002c4:	47a8      	blx	r5
  4002c6:	4602      	mov	r2, r0
  4002c8:	460b      	mov	r3, r1
  4002ca:	a111      	add	r1, pc, #68	; (adr r1, 400310 <getIqId_r+0xb0>)
  4002cc:	e9d1 0100 	ldrd	r0, r1, [r1]
  4002d0:	47a0      	blx	r4
  4002d2:	4c13      	ldr	r4, [pc, #76]	; (400320 <getIqId_r+0xc0>)
  4002d4:	47a0      	blx	r4
  4002d6:	ee07 0a90 	vmov	s15, r0
  4002da:	f8c8 0000 	str.w	r0, [r8]
	*Iq_r = sqrt(I_m*I_m - (*Id_r)*(*Id_r));
  4002de:	ee67 7aa7 	vmul.f32	s15, s15, s15
  4002e2:	ee78 7a67 	vsub.f32	s15, s16, s15
  4002e6:	ee17 0a90 	vmov	r0, s15
  4002ea:	47b0      	blx	r6
  4002ec:	47a8      	blx	r5
  4002ee:	47a0      	blx	r4
  4002f0:	6038      	str	r0, [r7, #0]
}	
  4002f2:	ecbd 8b02 	vpop	{d8}
  4002f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002fa:	bf00      	nop
  4002fc:	f3af 8000 	nop.w
  400300:	47ae147b 	.word	0x47ae147b
  400304:	3fd87ae1 	.word	0x3fd87ae1
  400308:	00000000 	.word	0x00000000
  40030c:	40f06550 	.word	0x40f06550
  400310:	3eab367a 	.word	0x3eab367a
  400314:	40703257 	.word	0x40703257
  400318:	00404865 	.word	0x00404865
  40031c:	00404b61 	.word	0x00404b61
  400320:	00404ebd 	.word	0x00404ebd
  400324:	3fe00000 	.word	0x3fe00000
  400328:	0040490d 	.word	0x0040490d
  40032c:	004045a5 	.word	0x004045a5
  400330:	00403099 	.word	0x00403099

00400334 <SVPWM>:

void SVPWM(float Va_aim, float Vb_aim, float* PWM, float V_dc) {							//Space Vector Modulation Function
  400334:	ee06 0a10 	vmov	s12, r0
  400338:	ee07 1a10 	vmov	s14, r1
  40033c:	ee07 3a90 	vmov	s15, r3
	float Vc_aim;
	Vc_aim = -Vb_aim - Va_aim;										//Calculates third voltage aim
  400340:	eef1 6a47 	vneg.f32	s13, s14
  400344:	ee76 6ac6 	vsub.f32	s13, s13, s12
	
	float Va_comp, Vb_comp, Vc_comp;
	Va_comp = (V_dc-Va_aim)/V_dc;									//normalise 
  400348:	ee37 6ac6 	vsub.f32	s12, s15, s12
  40034c:	eec6 5a27 	vdiv.f32	s11, s12, s15
	Vb_comp = (V_dc-Vb_aim)/V_dc;	
  400350:	ee37 6ac7 	vsub.f32	s12, s15, s14
  400354:	ee86 7a27 	vdiv.f32	s14, s12, s15
	Vc_comp = (V_dc-Vc_aim)/V_dc;
  400358:	ee77 6ae6 	vsub.f32	s13, s15, s13
  40035c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	
	float V_min;
	
	if((Va_comp<Vb_comp)&&(Va_comp<Vc_comp)) {					//Finds minimum 
  400360:	eef4 5ac7 	vcmpe.f32	s11, s14
  400364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400368:	d504      	bpl.n	400374 <SVPWM+0x40>
  40036a:	eef4 5ac6 	vcmpe.f32	s11, s12
  40036e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400372:	d416      	bmi.n	4003a2 <SVPWM+0x6e>
		V_min = Va_comp;
	}else{
		if(Vb_comp<Vc_comp){
  400374:	eeb4 7ac6 	vcmpe.f32	s14, s12
  400378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40037c:	d40e      	bmi.n	40039c <SVPWM+0x68>
			V_min = Vb_comp;
		}else{
			V_min = Vc_comp;
  40037e:	eef0 7a46 	vmov.f32	s15, s12
		}
	}
	
	float Va_dc, Vb_dc, Vc_dc;					//does down clamping and sets minimum to zero, subtracting minimum from all three
	PWM[0] = Va_comp - V_min;
  400382:	ee75 5ae7 	vsub.f32	s11, s11, s15
  400386:	edc2 5a00 	vstr	s11, [r2]
	PWM[1] = Vb_comp - V_min;
  40038a:	ee37 7a67 	vsub.f32	s14, s14, s15
  40038e:	ed82 7a01 	vstr	s14, [r2, #4]
	PWM[2] = Vc_comp - V_min;
  400392:	ee36 6a67 	vsub.f32	s12, s12, s15
  400396:	ed82 6a02 	vstr	s12, [r2, #8]
  40039a:	4770      	bx	lr
			V_min = Vb_comp;
  40039c:	eef0 7a47 	vmov.f32	s15, s14
  4003a0:	e7ef      	b.n	400382 <SVPWM+0x4e>
		V_min = Va_comp;
  4003a2:	eef0 7a65 	vmov.f32	s15, s11
  4003a6:	e7ec      	b.n	400382 <SVPWM+0x4e>

004003a8 <Control>:
	
}

void Control(float torquerequest, float V_dc, int pos_HS_state, float pos_HS_t1, float *pos_HS_dts, float pos_ENC_angle) {
  4003a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003ac:	ed2d 8b04 	vpush	{d8-d9}
  4003b0:	b085      	sub	sp, #20
  4003b2:	4604      	mov	r4, r0
  4003b4:	9101      	str	r1, [sp, #4]
  4003b6:	4692      	mov	sl, r2
  4003b8:	469b      	mov	fp, r3
	
	
	//Limit torque request rate
	if (torquerequest - T_RATE_UP > oldtorquerequest){torquerequest = oldtorquerequest + T_RATE_UP;} //Limit Increase Rate
  4003ba:	4e55      	ldr	r6, [pc, #340]	; (400510 <Control+0x168>)
  4003bc:	47b0      	blx	r6
  4003be:	a352      	add	r3, pc, #328	; (adr r3, 400508 <Control+0x160>)
  4003c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4003c4:	4f53      	ldr	r7, [pc, #332]	; (400514 <Control+0x16c>)
  4003c6:	47b8      	blx	r7
  4003c8:	4680      	mov	r8, r0
  4003ca:	4689      	mov	r9, r1
  4003cc:	4b52      	ldr	r3, [pc, #328]	; (400518 <Control+0x170>)
  4003ce:	6818      	ldr	r0, [r3, #0]
  4003d0:	47b0      	blx	r6
  4003d2:	4606      	mov	r6, r0
  4003d4:	460f      	mov	r7, r1
  4003d6:	4602      	mov	r2, r0
  4003d8:	460b      	mov	r3, r1
  4003da:	4640      	mov	r0, r8
  4003dc:	4649      	mov	r1, r9
  4003de:	4d4f      	ldr	r5, [pc, #316]	; (40051c <Control+0x174>)
  4003e0:	47a8      	blx	r5
  4003e2:	b148      	cbz	r0, 4003f8 <Control+0x50>
  4003e4:	a348      	add	r3, pc, #288	; (adr r3, 400508 <Control+0x160>)
  4003e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4003ea:	4630      	mov	r0, r6
  4003ec:	4639      	mov	r1, r7
  4003ee:	4c4c      	ldr	r4, [pc, #304]	; (400520 <Control+0x178>)
  4003f0:	47a0      	blx	r4
  4003f2:	4b4c      	ldr	r3, [pc, #304]	; (400524 <Control+0x17c>)
  4003f4:	4798      	blx	r3
  4003f6:	4604      	mov	r4, r0
	if (torquerequest + T_RATE_DOWN < oldtorquerequest){torquerequest = oldtorquerequest - T_RATE_DOWN;} //Limit Decrease Rate
  4003f8:	4620      	mov	r0, r4
  4003fa:	4b45      	ldr	r3, [pc, #276]	; (400510 <Control+0x168>)
  4003fc:	4798      	blx	r3
  4003fe:	a342      	add	r3, pc, #264	; (adr r3, 400508 <Control+0x160>)
  400400:	e9d3 2300 	ldrd	r2, r3, [r3]
  400404:	4d46      	ldr	r5, [pc, #280]	; (400520 <Control+0x178>)
  400406:	47a8      	blx	r5
  400408:	4602      	mov	r2, r0
  40040a:	460b      	mov	r3, r1
  40040c:	4630      	mov	r0, r6
  40040e:	4639      	mov	r1, r7
  400410:	4d42      	ldr	r5, [pc, #264]	; (40051c <Control+0x174>)
  400412:	47a8      	blx	r5
  400414:	b148      	cbz	r0, 40042a <Control+0x82>
  400416:	a33c      	add	r3, pc, #240	; (adr r3, 400508 <Control+0x160>)
  400418:	e9d3 2300 	ldrd	r2, r3, [r3]
  40041c:	4630      	mov	r0, r6
  40041e:	4639      	mov	r1, r7
  400420:	4c3c      	ldr	r4, [pc, #240]	; (400514 <Control+0x16c>)
  400422:	47a0      	blx	r4
  400424:	4b3f      	ldr	r3, [pc, #252]	; (400524 <Control+0x17c>)
  400426:	4798      	blx	r3
  400428:	4604      	mov	r4, r0
	oldtorquerequest = torquerequest;	//Update the new old value
  40042a:	4b3b      	ldr	r3, [pc, #236]	; (400518 <Control+0x170>)
  40042c:	601c      	str	r4, [r3, #0]
	
	
	float Iq_r, Id_r;
	getIqId_r(torquerequest, &Iq_r, &Id_r, V_dc);	//Get the id and iq requested current
  40042e:	9d01      	ldr	r5, [sp, #4]
  400430:	462b      	mov	r3, r5
  400432:	aa02      	add	r2, sp, #8
  400434:	a903      	add	r1, sp, #12
  400436:	4620      	mov	r0, r4
  400438:	4c3b      	ldr	r4, [pc, #236]	; (400528 <Control+0x180>)
  40043a:	47a0      	blx	r4
	

	
	theta_e = EstimateTheta(pos_HS_state, pos_HS_t1, &pos_HS_dts, pos_ENC_angle);
  40043c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40043e:	aa12      	add	r2, sp, #72	; 0x48
  400440:	4659      	mov	r1, fp
  400442:	4650      	mov	r0, sl
  400444:	4c39      	ldr	r4, [pc, #228]	; (40052c <Control+0x184>)
  400446:	47a0      	blx	r4
  400448:	4b39      	ldr	r3, [pc, #228]	; (400530 <Control+0x188>)
  40044a:	6018      	str	r0, [r3, #0]
	float sintheta_e = sin(theta_e);
  40044c:	4b30      	ldr	r3, [pc, #192]	; (400510 <Control+0x168>)
  40044e:	4798      	blx	r3
  400450:	4606      	mov	r6, r0
  400452:	460f      	mov	r7, r1
  400454:	4b37      	ldr	r3, [pc, #220]	; (400534 <Control+0x18c>)
  400456:	4798      	blx	r3
  400458:	4c32      	ldr	r4, [pc, #200]	; (400524 <Control+0x17c>)
  40045a:	47a0      	blx	r4
  40045c:	ee08 0a10 	vmov	s16, r0
	float costheta_e = cos(theta_e);	//(Currently uses fast sin and cosine)
  400460:	4630      	mov	r0, r6
  400462:	4639      	mov	r1, r7
  400464:	4b34      	ldr	r3, [pc, #208]	; (400538 <Control+0x190>)
  400466:	4798      	blx	r3
  400468:	47a0      	blx	r4
  40046a:	ee09 0a10 	vmov	s18, r0
	
	float I_alpha, I_beta;
	arm_clarke_f32(control_currents[0],control_currents[1],&I_alpha,&I_beta); //Does clarke transform
  40046e:	4b33      	ldr	r3, [pc, #204]	; (40053c <Control+0x194>)
  400470:	ed93 7a00 	vldr	s14, [r3]
  400474:	edd3 6a01 	vldr	s13, [r3, #4]
  {
    /* Calculate pIalpha using the equation, pIalpha = Ia */
    *pIalpha = Ia;

    /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
  400478:	eddf 7a31 	vldr	s15, [pc, #196]	; 400540 <Control+0x198>
  40047c:	ee67 7a27 	vmul.f32	s15, s14, s15
  400480:	ed9f 6a30 	vldr	s12, [pc, #192]	; 400544 <Control+0x19c>
  400484:	ee66 6a86 	vmul.f32	s13, s13, s12
  400488:	ee77 7aa6 	vadd.f32	s15, s15, s13
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
  40048c:	ee29 6a07 	vmul.f32	s12, s18, s14
  400490:	ee68 6a27 	vmul.f32	s13, s16, s15

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
  400494:	ee27 7a48 	vnmul.f32	s14, s14, s16
  400498:	ee69 7a27 	vmul.f32	s15, s18, s15
  40049c:	ee77 8a27 	vadd.f32	s17, s14, s15
	float I_d, I_q; 
	arm_park_f32(I_alpha,I_beta, &I_d, &I_q, sintheta_e, costheta_e);	//Does Park transform 
	
	float Vd_aim, Vq_aim;
	Vd_aim = runPID(&PID_d, Id_r, I_d);								//PID 
  4004a0:	ee76 7a26 	vadd.f32	s15, s12, s13
  4004a4:	ee17 2a90 	vmov	r2, s15
  4004a8:	9902      	ldr	r1, [sp, #8]
  4004aa:	4827      	ldr	r0, [pc, #156]	; (400548 <Control+0x1a0>)
  4004ac:	4c27      	ldr	r4, [pc, #156]	; (40054c <Control+0x1a4>)
  4004ae:	47a0      	blx	r4
  4004b0:	ee09 0a90 	vmov	s19, r0
	Vq_aim = runPID(&PID_q, Iq_r, I_q);
  4004b4:	ee18 2a90 	vmov	r2, s17
  4004b8:	9903      	ldr	r1, [sp, #12]
  4004ba:	4825      	ldr	r0, [pc, #148]	; (400550 <Control+0x1a8>)
  4004bc:	47a0      	blx	r4
  4004be:	ee07 0a10 	vmov	s14, r0
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
  4004c2:	ee69 7a29 	vmul.f32	s15, s18, s19
  4004c6:	ee68 6a07 	vmul.f32	s13, s16, s14
  4004ca:	ee77 7ae6 	vsub.f32	s15, s15, s13

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
  4004ce:	ee28 8a29 	vmul.f32	s16, s16, s19
  4004d2:	ee29 9a07 	vmul.f32	s18, s18, s14
  4004d6:	ee38 8a09 	vadd.f32	s16, s16, s18
    *pIb = -0.5f * Ialpha + 0.8660254039f * Ibeta;
  4004da:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
  4004de:	ee27 7a87 	vmul.f32	s14, s15, s14
  4004e2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 400554 <Control+0x1ac>
  4004e6:	ee28 8a26 	vmul.f32	s16, s16, s13
	arm_inv_park_f32(Vd_aim,Vq_aim,&Valpha_aim,&Vbeta_aim,sintheta_e,costheta_e);	//Inverse Park transform
	
	float Va_aim, Vb_aim;
	arm_inv_clarke_f32(Valpha_aim,Vbeta_aim,&Va_aim,&Vb_aim);		//Inverse clarke transform
	
	SVPWM(Va_aim, Vb_aim, (float32_t *)PWM_data, V_dc);										//Updates PWM values using space vector PWM
  4004ea:	462b      	mov	r3, r5
  4004ec:	4a1a      	ldr	r2, [pc, #104]	; (400558 <Control+0x1b0>)
  4004ee:	ee37 7a08 	vadd.f32	s14, s14, s16
  4004f2:	ee17 1a10 	vmov	r1, s14
  4004f6:	ee17 0a90 	vmov	r0, s15
  4004fa:	4c18      	ldr	r4, [pc, #96]	; (40055c <Control+0x1b4>)
  4004fc:	47a0      	blx	r4
	
}
  4004fe:	b005      	add	sp, #20
  400500:	ecbd 8b04 	vpop	{d8-d9}
  400504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400508:	230fcf81 	.word	0x230fcf81
  40050c:	3f7b4784 	.word	0x3f7b4784
  400510:	00404865 	.word	0x00404865
  400514:	004045a5 	.word	0x004045a5
  400518:	20400544 	.word	0x20400544
  40051c:	00404e2d 	.word	0x00404e2d
  400520:	004045a9 	.word	0x004045a9
  400524:	00404ebd 	.word	0x00404ebd
  400528:	00400261 	.word	0x00400261
  40052c:	00400565 	.word	0x00400565
  400530:	2040051c 	.word	0x2040051c
  400534:	00403011 	.word	0x00403011
  400538:	00402f7d 	.word	0x00402f7d
  40053c:	20400574 	.word	0x20400574
  400540:	3f13cd3a 	.word	0x3f13cd3a
  400544:	3f93cd3a 	.word	0x3f93cd3a
  400548:	20400528 	.word	0x20400528
  40054c:	004005bb 	.word	0x004005bb
  400550:	20400500 	.word	0x20400500
  400554:	3f5db3d7 	.word	0x3f5db3d7
  400558:	20400560 	.word	0x20400560
  40055c:	00400335 	.word	0x00400335

00400560 <EstimateThetaHS>:
}

float EstimateThetaHS(int pos_HS_state, float pos_HS_t1, float *pos_HS_dts){
//Estimate angle from hall sensors
return 0;
}
  400560:	2000      	movs	r0, #0
  400562:	4770      	bx	lr

00400564 <EstimateTheta>:
float EstimateTheta(int pos_HS_state, float pos_HS_t1, float *pos_HS_dts, float pos_ENC_angle){
  400564:	b500      	push	{lr}
  400566:	ed2d 8b02 	vpush	{d8}
  40056a:	b083      	sub	sp, #12
  40056c:	ee08 3a10 	vmov	s16, r3
	theta_e_HS = EstimateThetaHS(pos_HS_state, pos_HS_t1, &pos_HS_dts);
  400570:	aa01      	add	r2, sp, #4
  400572:	4b09      	ldr	r3, [pc, #36]	; (400598 <EstimateTheta+0x34>)
  400574:	4798      	blx	r3
  400576:	4b09      	ldr	r3, [pc, #36]	; (40059c <EstimateTheta+0x38>)
  400578:	6018      	str	r0, [r3, #0]
	theta_e_ENC = pos_ENC_angle/(PP*GR);
  40057a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 4005a0 <EstimateTheta+0x3c>
  40057e:	eec8 7a07 	vdiv.f32	s15, s16, s14
  400582:	4b08      	ldr	r3, [pc, #32]	; (4005a4 <EstimateTheta+0x40>)
  400584:	edc3 7a00 	vstr	s15, [r3]
}
  400588:	ee17 0a90 	vmov	r0, s15
  40058c:	b003      	add	sp, #12
  40058e:	ecbd 8b02 	vpop	{d8}
  400592:	f85d fb04 	ldr.w	pc, [sp], #4
  400596:	bf00      	nop
  400598:	00400561 	.word	0x00400561
  40059c:	2040056c 	.word	0x2040056c
  4005a0:	42960000 	.word	0x42960000
  4005a4:	20400520 	.word	0x20400520

004005a8 <PID_init_ncts>:
 */ 

#include "PID.h"

void PID_init_ncts(struct PID_instance* PID,float Kp,float Ki,float Kd){
	PID->Kd = Kd;
  4005a8:	6083      	str	r3, [r0, #8]
	PID->Ki = Ki;
  4005aa:	6042      	str	r2, [r0, #4]
	PID->Kp = Kp;							//sets gains
  4005ac:	6001      	str	r1, [r0, #0]
	PID->integral_v = 0;
  4005ae:	2300      	movs	r3, #0
  4005b0:	6103      	str	r3, [r0, #16]
	PID->previous_error = 0;
  4005b2:	60c3      	str	r3, [r0, #12]
	PID->is_using_constant_timestep = false;
  4005b4:	2300      	movs	r3, #0
  4005b6:	7603      	strb	r3, [r0, #24]
  4005b8:	4770      	bx	lr

004005ba <runPID>:
	//if(!PID->is_using_constant_timestep){
		//PID->time_step = getTimeStep();
	//}
	
	float Ap, Ad, Ai;
	float error = ref - feedback;
  4005ba:	ee07 1a90 	vmov	s15, r1
  4005be:	ee07 2a10 	vmov	s14, r2
  4005c2:	ee77 6ac7 	vsub.f32	s13, s15, s14
	
	Ap = error*PID->Kp;
  4005c6:	edd0 7a00 	vldr	s15, [r0]
  4005ca:	ee26 7aa7 	vmul.f32	s14, s13, s15
	Ad = PID->Kd*(error - PID->previous_error)/PID->time_step;
  4005ce:	edd0 7a02 	vldr	s15, [r0, #8]
  4005d2:	ed90 6a03 	vldr	s12, [r0, #12]
  4005d6:	ee36 6ac6 	vsub.f32	s12, s13, s12
  4005da:	ee67 7a86 	vmul.f32	s15, s15, s12
  4005de:	ed90 6a05 	vldr	s12, [r0, #20]
  4005e2:	eec7 5a86 	vdiv.f32	s11, s15, s12
	Ai = PID->Ki*(error*PID->time_step) + PID->integral_v;
  4005e6:	edd0 7a01 	vldr	s15, [r0, #4]
  4005ea:	ee26 6a86 	vmul.f32	s12, s13, s12
  4005ee:	ee67 7a86 	vmul.f32	s15, s15, s12
  4005f2:	ed90 6a04 	vldr	s12, [r0, #16]
  4005f6:	ee77 7a86 	vadd.f32	s15, s15, s12
	
	if( ((Ai>=Ap) & (Ap>=0)) | ((Ai<=Ap) & (Ap<=0)) )   Ai = Ap;		//set anti-windup for integral action
  4005fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
  4005fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400602:	bf94      	ite	ls
  400604:	2201      	movls	r2, #1
  400606:	2200      	movhi	r2, #0
  400608:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  40060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400610:	f002 0201 	and.w	r2, r2, #1
  400614:	bfb8      	it	lt
  400616:	2200      	movlt	r2, #0
  400618:	eeb4 7ae7 	vcmpe.f32	s14, s15
  40061c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400620:	bfac      	ite	ge
  400622:	2301      	movge	r3, #1
  400624:	2300      	movlt	r3, #0
  400626:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  40062a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40062e:	f003 0301 	and.w	r3, r3, #1
  400632:	bf88      	it	hi
  400634:	2300      	movhi	r3, #0
  400636:	4313      	orrs	r3, r2
  400638:	d001      	beq.n	40063e <runPID+0x84>
  40063a:	eef0 7a47 	vmov.f32	s15, s14
	
	PID->previous_error = error;
  40063e:	edc0 6a03 	vstr	s13, [r0, #12]
	return (Ap + Ai + Ad);
  400642:	ee77 7a87 	vadd.f32	s15, s15, s14

  400646:	ee75 7aa7 	vadd.f32	s15, s11, s15
  40064a:	ee17 0a90 	vmov	r0, s15
  40064e:	4770      	bx	lr

00400650 <encoder_init>:
	
	//increment rotation counter
	encoder_num_Z_interrupts ++;
}

void encoder_init(void){
  400650:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400652:	4b56      	ldr	r3, [pc, #344]	; (4007ac <encoder_init+0x15c>)
  400654:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400656:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40065a:	d103      	bne.n	400664 <encoder_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40065c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400660:	4b52      	ldr	r3, [pc, #328]	; (4007ac <encoder_init+0x15c>)
  400662:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400664:	4b51      	ldr	r3, [pc, #324]	; (4007ac <encoder_init+0x15c>)
  400666:	699b      	ldr	r3, [r3, #24]
  400668:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40066c:	d103      	bne.n	400676 <encoder_init+0x26>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40066e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400672:	4b4e      	ldr	r3, [pc, #312]	; (4007ac <encoder_init+0x15c>)
  400674:	611a      	str	r2, [r3, #16]
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400676:	4b4d      	ldr	r3, [pc, #308]	; (4007ac <encoder_init+0x15c>)
  400678:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40067c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  400680:	d104      	bne.n	40068c <encoder_init+0x3c>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400682:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400686:	4b49      	ldr	r3, [pc, #292]	; (4007ac <encoder_init+0x15c>)
  400688:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40068c:	4b47      	ldr	r3, [pc, #284]	; (4007ac <encoder_init+0x15c>)
  40068e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  400692:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  400696:	d104      	bne.n	4006a2 <encoder_init+0x52>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400698:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40069c:	4b43      	ldr	r3, [pc, #268]	; (4007ac <encoder_init+0x15c>)
  40069e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	_pmc_enable_periph_clock(ID_TC3_CHANNEL1);
	
	
	//enable external interrupt on the Z line 
	ext_irq_register(PIO_PB13_IDX,Encoder_Z_Interrupt);
  4006a2:	4943      	ldr	r1, [pc, #268]	; (4007b0 <encoder_init+0x160>)
  4006a4:	202d      	movs	r0, #45	; 0x2d
  4006a6:	4b43      	ldr	r3, [pc, #268]	; (4007b4 <encoder_init+0x164>)
  4006a8:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006aa:	4b43      	ldr	r3, [pc, #268]	; (4007b8 <encoder_init+0x168>)
  4006ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4006b0:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4006b2:	2240      	movs	r2, #64	; 0x40
  4006b4:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4006bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4006c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4006c4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006c8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4006d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4006d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4006d8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006dc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4006e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4006e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4006ec:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4006f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4006fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400700:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400704:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400708:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40070c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400710:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400714:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400718:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40071c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400724:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400728:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40072c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400730:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400738:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40073c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400740:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400744:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40074c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400750:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400754:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400758:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40075c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400760:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400764:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400768:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40076c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400774:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400778:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40077c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400780:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400788:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40078c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400790:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400794:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40079c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007a0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007a4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  4007a8:	bd08      	pop	{r3, pc}
  4007aa:	bf00      	nop
  4007ac:	400e0600 	.word	0x400e0600
  4007b0:	004007e1 	.word	0x004007e1
  4007b4:	004017d1 	.word	0x004017d1
  4007b8:	e000e100 	.word	0xe000e100

004007bc <encoder_get_counter>:
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV(mask)) >> TC_CV_CV_Pos;
}

static inline hri_tc_cv_reg_t hri_tc_read_CV_CV_bf(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV_Msk) >> TC_CV_CV_Pos;
  4007bc:	4a06      	ldr	r2, [pc, #24]	; (4007d8 <encoder_get_counter+0x1c>)
  4007be:	6913      	ldr	r3, [r2, #16]
  4007c0:	6d10      	ldr	r0, [r2, #80]	; 0x50
	//if starting offset is 0 (which is the case before it was recorded) then it returns the actual counter
	
	
	//get A (first line) and B (second line) counters
	//note that rising and falling edges could be the other way round. It doesn't matter for the current implementation
	int encoder_counter_no_offset =	  ( int) hri_tc_read_CV_CV_bf(TC0,0) + ( int) hri_tc_read_CV_CV_bf(TC0,1) \
  4007c2:	4403      	add	r3, r0
  4007c4:	f502 2290 	add.w	r2, r2, #294912	; 0x48000
  4007c8:	6910      	ldr	r0, [r2, #16]
									+ ( int) hri_tc_read_CV_CV_bf(TC3,0) + ( int) hri_tc_read_CV_CV_bf(TC3,1) \
  4007ca:	4403      	add	r3, r0
  4007cc:	6d10      	ldr	r0, [r2, #80]	; 0x50
  4007ce:	4403      	add	r3, r0
									- encoder_inital_offset;														//get the number of steps normalised to the starting offset
  4007d0:	4a02      	ldr	r2, [pc, #8]	; (4007dc <encoder_get_counter+0x20>)
  4007d2:	6810      	ldr	r0, [r2, #0]
								
	
	return encoder_counter_no_offset;
}
  4007d4:	1a18      	subs	r0, r3, r0
  4007d6:	4770      	bx	lr
  4007d8:	4000c000 	.word	0x4000c000
  4007dc:	204005a8 	.word	0x204005a8

004007e0 <Encoder_Z_Interrupt>:
static void Encoder_Z_Interrupt (void){
  4007e0:	b508      	push	{r3, lr}
	int encoder_counter_no_offset = encoder_get_counter();
  4007e2:	4b0b      	ldr	r3, [pc, #44]	; (400810 <Encoder_Z_Interrupt+0x30>)
  4007e4:	4798      	blx	r3
	if(encoder_num_Z_interrupts == 0){
  4007e6:	4b0b      	ldr	r3, [pc, #44]	; (400814 <Encoder_Z_Interrupt+0x34>)
  4007e8:	681b      	ldr	r3, [r3, #0]
  4007ea:	b15b      	cbz	r3, 400804 <Encoder_Z_Interrupt+0x24>
		unsigned int delta = encoder_counter_no_offset & (ENCODER_STEPS - 1);
  4007ec:	f3c0 000d 	ubfx	r0, r0, #0, #14
		if( (delta <= ENCODER_MAX_DELTA) || (delta >= ENCODER_STEPS-1 - ENCODER_MAX_DELTA) ){
  4007f0:	1ec1      	subs	r1, r0, #3
  4007f2:	f643 72f9 	movw	r2, #16377	; 0x3ff9
  4007f6:	4291      	cmp	r1, r2
  4007f8:	d806      	bhi.n	400808 <Encoder_Z_Interrupt+0x28>
			encoder_inital_offset += delta;
  4007fa:	4907      	ldr	r1, [pc, #28]	; (400818 <Encoder_Z_Interrupt+0x38>)
  4007fc:	680a      	ldr	r2, [r1, #0]
  4007fe:	4410      	add	r0, r2
  400800:	6008      	str	r0, [r1, #0]
  400802:	e001      	b.n	400808 <Encoder_Z_Interrupt+0x28>
		encoder_inital_offset = encoder_counter_no_offset;
  400804:	4a04      	ldr	r2, [pc, #16]	; (400818 <Encoder_Z_Interrupt+0x38>)
  400806:	6010      	str	r0, [r2, #0]
	encoder_num_Z_interrupts ++;
  400808:	3301      	adds	r3, #1
  40080a:	4a02      	ldr	r2, [pc, #8]	; (400814 <Encoder_Z_Interrupt+0x34>)
  40080c:	6013      	str	r3, [r2, #0]
  40080e:	bd08      	pop	{r3, pc}
  400810:	004007bd 	.word	0x004007bd
  400814:	204005a4 	.word	0x204005a4
  400818:	204005a8 	.word	0x204005a8

0040081c <Position_1_Interrupt>:
	
	
	
}

static void Position_1_Interrupt (void){
  40081c:	b538      	push	{r3, r4, r5, lr}
	has_triggered = true;
  40081e:	2201      	movs	r2, #1
  400820:	4b14      	ldr	r3, [pc, #80]	; (400874 <Position_1_Interrupt+0x58>)
  400822:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400824:	4b14      	ldr	r3, [pc, #80]	; (400878 <Position_1_Interrupt+0x5c>)
  400826:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400828:	4b14      	ldr	r3, [pc, #80]	; (40087c <Position_1_Interrupt+0x60>)
  40082a:	681b      	ldr	r3, [r3, #0]
  40082c:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40082e:	2b00      	cmp	r3, #0
  400830:	dd13      	ble.n	40085a <Position_1_Interrupt+0x3e>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400832:	2201      	movs	r2, #1
  400834:	2a00      	cmp	r2, #0
  400836:	dc13      	bgt.n	400860 <Position_1_Interrupt+0x44>
	pos_sens_deltas [0] = (float) delta / 300;
  400838:	ee07 3a90 	vmov	s15, r3
  40083c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400840:	eddf 6a0f 	vldr	s13, [pc, #60]	; 400880 <Position_1_Interrupt+0x64>
  400844:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400848:	4b0e      	ldr	r3, [pc, #56]	; (400884 <Position_1_Interrupt+0x68>)
  40084a:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  40084e:	4b0b      	ldr	r3, [pc, #44]	; (40087c <Position_1_Interrupt+0x60>)
  400850:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	printf("POS 1\n");
  400852:	480d      	ldr	r0, [pc, #52]	; (400888 <Position_1_Interrupt+0x6c>)
  400854:	4b0d      	ldr	r3, [pc, #52]	; (40088c <Position_1_Interrupt+0x70>)
  400856:	4798      	blx	r3
  400858:	bd38      	pop	{r3, r4, r5, pc}
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40085a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  40085e:	e7e8      	b.n	400832 <Position_1_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400860:	1e54      	subs	r4, r2, #1
  400862:	4908      	ldr	r1, [pc, #32]	; (400884 <Position_1_Interrupt+0x68>)
  400864:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400868:	682d      	ldr	r5, [r5, #0]
  40086a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40086e:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400870:	4622      	mov	r2, r4
  400872:	e7df      	b.n	400834 <Position_1_Interrupt+0x18>
  400874:	204005a1 	.word	0x204005a1
  400878:	e000e010 	.word	0xe000e010
  40087c:	204005b4 	.word	0x204005b4
  400880:	43960000 	.word	0x43960000
  400884:	204005ac 	.word	0x204005ac
  400888:	0040785c 	.word	0x0040785c
  40088c:	00405895 	.word	0x00405895

00400890 <Position_2_Interrupt>:
}

static void Position_2_Interrupt (void){
  400890:	b430      	push	{r4, r5}
	has_triggered = true;
  400892:	2201      	movs	r2, #1
  400894:	4b13      	ldr	r3, [pc, #76]	; (4008e4 <Position_2_Interrupt+0x54>)
  400896:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400898:	4b13      	ldr	r3, [pc, #76]	; (4008e8 <Position_2_Interrupt+0x58>)
  40089a:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  40089c:	4b13      	ldr	r3, [pc, #76]	; (4008ec <Position_2_Interrupt+0x5c>)
  40089e:	681b      	ldr	r3, [r3, #0]
  4008a0:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4008a2:	2b00      	cmp	r3, #0
  4008a4:	dd11      	ble.n	4008ca <Position_2_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4008a6:	2201      	movs	r2, #1
  4008a8:	2a00      	cmp	r2, #0
  4008aa:	dc11      	bgt.n	4008d0 <Position_2_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  4008ac:	ee07 3a90 	vmov	s15, r3
  4008b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4008b4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 4008f0 <Position_2_Interrupt+0x60>
  4008b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4008bc:	4b0d      	ldr	r3, [pc, #52]	; (4008f4 <Position_2_Interrupt+0x64>)
  4008be:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  4008c2:	4b0a      	ldr	r3, [pc, #40]	; (4008ec <Position_2_Interrupt+0x5c>)
  4008c4:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	//printf("POS 2\n");
}
  4008c6:	bc30      	pop	{r4, r5}
  4008c8:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4008ca:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  4008ce:	e7ea      	b.n	4008a6 <Position_2_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  4008d0:	1e54      	subs	r4, r2, #1
  4008d2:	4908      	ldr	r1, [pc, #32]	; (4008f4 <Position_2_Interrupt+0x64>)
  4008d4:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  4008d8:	682d      	ldr	r5, [r5, #0]
  4008da:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4008de:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4008e0:	4622      	mov	r2, r4
  4008e2:	e7e1      	b.n	4008a8 <Position_2_Interrupt+0x18>
  4008e4:	204005a1 	.word	0x204005a1
  4008e8:	e000e010 	.word	0xe000e010
  4008ec:	204005b4 	.word	0x204005b4
  4008f0:	43960000 	.word	0x43960000
  4008f4:	204005ac 	.word	0x204005ac

004008f8 <Position_3_Interrupt>:

static void Position_3_Interrupt (void){
  4008f8:	b538      	push	{r3, r4, r5, lr}
	has_triggered = true;
  4008fa:	2201      	movs	r2, #1
  4008fc:	4b14      	ldr	r3, [pc, #80]	; (400950 <Position_3_Interrupt+0x58>)
  4008fe:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400900:	4b14      	ldr	r3, [pc, #80]	; (400954 <Position_3_Interrupt+0x5c>)
  400902:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400904:	4b14      	ldr	r3, [pc, #80]	; (400958 <Position_3_Interrupt+0x60>)
  400906:	681b      	ldr	r3, [r3, #0]
  400908:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40090a:	2b00      	cmp	r3, #0
  40090c:	dd13      	ble.n	400936 <Position_3_Interrupt+0x3e>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40090e:	2201      	movs	r2, #1
  400910:	2a00      	cmp	r2, #0
  400912:	dc13      	bgt.n	40093c <Position_3_Interrupt+0x44>
	pos_sens_deltas [0] = (float) delta / 300;
  400914:	ee07 3a90 	vmov	s15, r3
  400918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40091c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 40095c <Position_3_Interrupt+0x64>
  400920:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400924:	4b0e      	ldr	r3, [pc, #56]	; (400960 <Position_3_Interrupt+0x68>)
  400926:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  40092a:	4b0b      	ldr	r3, [pc, #44]	; (400958 <Position_3_Interrupt+0x60>)
  40092c:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	printf("POS 3\n");
  40092e:	480d      	ldr	r0, [pc, #52]	; (400964 <Position_3_Interrupt+0x6c>)
  400930:	4b0d      	ldr	r3, [pc, #52]	; (400968 <Position_3_Interrupt+0x70>)
  400932:	4798      	blx	r3
  400934:	bd38      	pop	{r3, r4, r5, pc}
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400936:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  40093a:	e7e8      	b.n	40090e <Position_3_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  40093c:	1e54      	subs	r4, r2, #1
  40093e:	4908      	ldr	r1, [pc, #32]	; (400960 <Position_3_Interrupt+0x68>)
  400940:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400944:	682d      	ldr	r5, [r5, #0]
  400946:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40094a:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40094c:	4622      	mov	r2, r4
  40094e:	e7df      	b.n	400910 <Position_3_Interrupt+0x18>
  400950:	204005a1 	.word	0x204005a1
  400954:	e000e010 	.word	0xe000e010
  400958:	204005b4 	.word	0x204005b4
  40095c:	43960000 	.word	0x43960000
  400960:	204005ac 	.word	0x204005ac
  400964:	00407864 	.word	0x00407864
  400968:	00405895 	.word	0x00405895

0040096c <pos_sens_init>:
}

void pos_sens_init (void){
  40096c:	b510      	push	{r4, lr}
	//set interrupt handlers
	ext_irq_register(PIO_PD19_IDX, Position_3_Interrupt);		//POS 3
  40096e:	4919      	ldr	r1, [pc, #100]	; (4009d4 <pos_sens_init+0x68>)
  400970:	2073      	movs	r0, #115	; 0x73
  400972:	4c19      	ldr	r4, [pc, #100]	; (4009d8 <pos_sens_init+0x6c>)
  400974:	47a0      	blx	r4
	ext_irq_register(PIO_PA2_IDX, Position_2_Interrupt);		//POS 2
  400976:	4919      	ldr	r1, [pc, #100]	; (4009dc <pos_sens_init+0x70>)
  400978:	2002      	movs	r0, #2
  40097a:	47a0      	blx	r4
	ext_irq_register(PIO_PA5_IDX, Position_1_Interrupt);		//POS 1
  40097c:	4918      	ldr	r1, [pc, #96]	; (4009e0 <pos_sens_init+0x74>)
  40097e:	2005      	movs	r0, #5
  400980:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400982:	4b18      	ldr	r3, [pc, #96]	; (4009e4 <pos_sens_init+0x78>)
  400984:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400988:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40098a:	2220      	movs	r2, #32
  40098c:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400990:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400994:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400996:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ	(PIOD_IRQn);
	NVIC_SetPriority(PIOD_IRQn, IRQ_PRIORITY_POSITION_SENS);

	
	//SysTick starting from 0
	pos_sens_last_SysTick_count = 0;
  40099a:	2200      	movs	r2, #0
  40099c:	4b12      	ldr	r3, [pc, #72]	; (4009e8 <pos_sens_init+0x7c>)
  40099e:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
  4009a0:	4b12      	ldr	r3, [pc, #72]	; (4009ec <pos_sens_init+0x80>)
  4009a2:	609a      	str	r2, [r3, #8]
	//make the load value max, so that the overflows are as rare as possible
	SysTick->LOAD = (0xFFFFFF);
  4009a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  4009a8:	6059      	str	r1, [r3, #4]

	this means that the moment we transition to state (POS1=1, POS2=0 POS3=0) we are at 0 electrical degrees
	*/

	// sector_lookup_table[POS3][POS2][POS1];
	sector_lookup_table[0][0][1] = 1;
  4009aa:	4b11      	ldr	r3, [pc, #68]	; (4009f0 <pos_sens_init+0x84>)
  4009ac:	2101      	movs	r1, #1
  4009ae:	6059      	str	r1, [r3, #4]
	sector_lookup_table[0][1][1] = 2;
  4009b0:	2102      	movs	r1, #2
  4009b2:	60d9      	str	r1, [r3, #12]
	sector_lookup_table[0][1][0] = 3;
  4009b4:	2103      	movs	r1, #3
  4009b6:	6099      	str	r1, [r3, #8]
	sector_lookup_table[1][1][0] = 4;
  4009b8:	2104      	movs	r1, #4
  4009ba:	6199      	str	r1, [r3, #24]
	sector_lookup_table[1][0][0] = 5;
  4009bc:	2105      	movs	r1, #5
  4009be:	6119      	str	r1, [r3, #16]
	sector_lookup_table[1][0][1] = 6;
  4009c0:	2106      	movs	r1, #6
  4009c2:	6159      	str	r1, [r3, #20]
	//Error states
	sector_lookup_table[0][0][0] = -1;
  4009c4:	f04f 31ff 	mov.w	r1, #4294967295
  4009c8:	6019      	str	r1, [r3, #0]
	sector_lookup_table[1][1][1] = -1;
  4009ca:	61d9      	str	r1, [r3, #28]
	
	has_triggered = false;
  4009cc:	4b09      	ldr	r3, [pc, #36]	; (4009f4 <pos_sens_init+0x88>)
  4009ce:	701a      	strb	r2, [r3, #0]
  4009d0:	bd10      	pop	{r4, pc}
  4009d2:	bf00      	nop
  4009d4:	004008f9 	.word	0x004008f9
  4009d8:	004017d1 	.word	0x004017d1
  4009dc:	00400891 	.word	0x00400891
  4009e0:	0040081d 	.word	0x0040081d
  4009e4:	e000e100 	.word	0xe000e100
  4009e8:	204005b4 	.word	0x204005b4
  4009ec:	e000e010 	.word	0xe000e010
  4009f0:	20400580 	.word	0x20400580
  4009f4:	204005a1 	.word	0x204005a1

004009f8 <dma_adc_0_enable_for_one_transaction>:
	
	has_0_triggered = false;
	has_1_triggered = false;
}

void dma_adc_0_enable_for_one_transaction(void){
  4009f8:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  4009fa:	4906      	ldr	r1, [pc, #24]	; (400a14 <dma_adc_0_enable_for_one_transaction+0x1c>)
  4009fc:	2000      	movs	r0, #0
  4009fe:	4b06      	ldr	r3, [pc, #24]	; (400a18 <dma_adc_0_enable_for_one_transaction+0x20>)
  400a00:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  400a02:	2118      	movs	r1, #24
  400a04:	2000      	movs	r0, #0
  400a06:	4b05      	ldr	r3, [pc, #20]	; (400a1c <dma_adc_0_enable_for_one_transaction+0x24>)
  400a08:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  400a0a:	2101      	movs	r1, #1
  400a0c:	2000      	movs	r0, #0
  400a0e:	4b04      	ldr	r3, [pc, #16]	; (400a20 <dma_adc_0_enable_for_one_transaction+0x28>)
  400a10:	4798      	blx	r3
  400a12:	bd08      	pop	{r3, pc}
  400a14:	20400238 	.word	0x20400238
  400a18:	00402ced 	.word	0x00402ced
  400a1c:	00402d0d 	.word	0x00402d0d
  400a20:	00402d25 	.word	0x00402d25

00400a24 <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  400a24:	b530      	push	{r4, r5, lr}
  400a26:	b085      	sub	sp, #20
	has_0_triggered = true;
  400a28:	2201      	movs	r2, #1
  400a2a:	4b27      	ldr	r3, [pc, #156]	; (400ac8 <dma_adc_0_callback+0xa4>)
  400a2c:	701a      	strb	r2, [r3, #0]
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3], (int)dma_adc_0_buff[4],(int)dma_adc_0_buff[5]);
  400a2e:	4827      	ldr	r0, [pc, #156]	; (400acc <dma_adc_0_callback+0xa8>)
  400a30:	6801      	ldr	r1, [r0, #0]
  400a32:	6842      	ldr	r2, [r0, #4]
  400a34:	6883      	ldr	r3, [r0, #8]
  400a36:	68c4      	ldr	r4, [r0, #12]
  400a38:	6905      	ldr	r5, [r0, #16]
  400a3a:	6940      	ldr	r0, [r0, #20]
  400a3c:	9002      	str	r0, [sp, #8]
  400a3e:	9501      	str	r5, [sp, #4]
  400a40:	9400      	str	r4, [sp, #0]
  400a42:	4823      	ldr	r0, [pc, #140]	; (400ad0 <dma_adc_0_callback+0xac>)
  400a44:	4c23      	ldr	r4, [pc, #140]	; (400ad4 <dma_adc_0_callback+0xb0>)
  400a46:	47a0      	blx	r4
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400a48:	2300      	movs	r3, #0
  400a4a:	e008      	b.n	400a5e <dma_adc_0_callback+0x3a>
				raw_currents[1] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400a4c:	b292      	uxth	r2, r2
  400a4e:	4922      	ldr	r1, [pc, #136]	; (400ad8 <dma_adc_0_callback+0xb4>)
  400a50:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  400a52:	491e      	ldr	r1, [pc, #120]	; (400acc <dma_adc_0_callback+0xa8>)
  400a54:	7e0a      	ldrb	r2, [r1, #24]
  400a56:	f042 0202 	orr.w	r2, r2, #2
  400a5a:	760a      	strb	r2, [r1, #24]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  400a5c:	3301      	adds	r3, #1
  400a5e:	2b05      	cmp	r3, #5
  400a60:	dc13      	bgt.n	400a8a <dma_adc_0_callback+0x66>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400a62:	4a1a      	ldr	r2, [pc, #104]	; (400acc <dma_adc_0_callback+0xa8>)
  400a64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  400a68:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400a6c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  400a70:	d0ec      	beq.n	400a4c <dma_adc_0_callback+0x28>
  400a72:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400a76:	d1f1      	bne.n	400a5c <dma_adc_0_callback+0x38>
				raw_currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  400a78:	b292      	uxth	r2, r2
  400a7a:	4917      	ldr	r1, [pc, #92]	; (400ad8 <dma_adc_0_callback+0xb4>)
  400a7c:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  400a7e:	4913      	ldr	r1, [pc, #76]	; (400acc <dma_adc_0_callback+0xa8>)
  400a80:	7e0a      	ldrb	r2, [r1, #24]
  400a82:	f042 0201 	orr.w	r2, r2, #1
  400a86:	760a      	strb	r2, [r1, #24]
				break;
  400a88:	e7e8      	b.n	400a5c <dma_adc_0_callback+0x38>
	if(is_dma_adc_0_continuous){
  400a8a:	4b14      	ldr	r3, [pc, #80]	; (400adc <dma_adc_0_callback+0xb8>)
  400a8c:	781b      	ldrb	r3, [r3, #0]
  400a8e:	b92b      	cbnz	r3, 400a9c <dma_adc_0_callback+0x78>
	if(ready_values == ALL_VALUES_READY){
  400a90:	4b0e      	ldr	r3, [pc, #56]	; (400acc <dma_adc_0_callback+0xa8>)
  400a92:	7e1b      	ldrb	r3, [r3, #24]
  400a94:	2b0f      	cmp	r3, #15
  400a96:	d004      	beq.n	400aa2 <dma_adc_0_callback+0x7e>
}
  400a98:	b005      	add	sp, #20
  400a9a:	bd30      	pop	{r4, r5, pc}
		dma_adc_0_enable_for_one_transaction();
  400a9c:	4b10      	ldr	r3, [pc, #64]	; (400ae0 <dma_adc_0_callback+0xbc>)
  400a9e:	4798      	blx	r3
  400aa0:	e7f6      	b.n	400a90 <dma_adc_0_callback+0x6c>
		ready_values = 0;
  400aa2:	2200      	movs	r2, #0
  400aa4:	4b09      	ldr	r3, [pc, #36]	; (400acc <dma_adc_0_callback+0xa8>)
  400aa6:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 0\n");
  400aa8:	480e      	ldr	r0, [pc, #56]	; (400ae4 <dma_adc_0_callback+0xc0>)
  400aaa:	4c0a      	ldr	r4, [pc, #40]	; (400ad4 <dma_adc_0_callback+0xb0>)
  400aac:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  400aae:	480a      	ldr	r0, [pc, #40]	; (400ad8 <dma_adc_0_callback+0xb4>)
  400ab0:	6843      	ldr	r3, [r0, #4]
  400ab2:	6802      	ldr	r2, [r0, #0]
  400ab4:	490c      	ldr	r1, [pc, #48]	; (400ae8 <dma_adc_0_callback+0xc4>)
  400ab6:	6809      	ldr	r1, [r1, #0]
  400ab8:	68c5      	ldr	r5, [r0, #12]
  400aba:	9501      	str	r5, [sp, #4]
  400abc:	6880      	ldr	r0, [r0, #8]
  400abe:	9000      	str	r0, [sp, #0]
  400ac0:	480a      	ldr	r0, [pc, #40]	; (400aec <dma_adc_0_callback+0xc8>)
  400ac2:	47a0      	blx	r4
}
  400ac4:	e7e8      	b.n	400a98 <dma_adc_0_callback+0x74>
  400ac6:	bf00      	nop
  400ac8:	204005b8 	.word	0x204005b8
  400acc:	20400238 	.word	0x20400238
  400ad0:	0040786c 	.word	0x0040786c
  400ad4:	00405895 	.word	0x00405895
  400ad8:	204005bc 	.word	0x204005bc
  400adc:	204005ba 	.word	0x204005ba
  400ae0:	004009f9 	.word	0x004009f9
  400ae4:	00407898 	.word	0x00407898
  400ae8:	204005c8 	.word	0x204005c8
  400aec:	004078e0 	.word	0x004078e0

00400af0 <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  400af0:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400af2:	4906      	ldr	r1, [pc, #24]	; (400b0c <dma_adc_1_enable_for_one_transaction+0x1c>)
  400af4:	2001      	movs	r0, #1
  400af6:	4b06      	ldr	r3, [pc, #24]	; (400b10 <dma_adc_1_enable_for_one_transaction+0x20>)
  400af8:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  400afa:	2110      	movs	r1, #16
  400afc:	2001      	movs	r0, #1
  400afe:	4b05      	ldr	r3, [pc, #20]	; (400b14 <dma_adc_1_enable_for_one_transaction+0x24>)
  400b00:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  400b02:	2101      	movs	r1, #1
  400b04:	4608      	mov	r0, r1
  400b06:	4b04      	ldr	r3, [pc, #16]	; (400b18 <dma_adc_1_enable_for_one_transaction+0x28>)
  400b08:	4798      	blx	r3
  400b0a:	bd08      	pop	{r3, pc}
  400b0c:	20400254 	.word	0x20400254
  400b10:	00402ced 	.word	0x00402ced
  400b14:	00402d0d 	.word	0x00402d0d
  400b18:	00402d25 	.word	0x00402d25

00400b1c <dma_adc_1_callback>:
static void dma_adc_1_callback(struct _dma_resource *resource){
  400b1c:	b530      	push	{r4, r5, lr}
  400b1e:	b083      	sub	sp, #12
	has_1_triggered = true;
  400b20:	2201      	movs	r2, #1
  400b22:	4b25      	ldr	r3, [pc, #148]	; (400bb8 <dma_adc_1_callback+0x9c>)
  400b24:	701a      	strb	r2, [r3, #0]
	printf("interrupt - ADC 1 - %i %i %i %i  \n", (int)dma_adc_1_buff[0],(int)dma_adc_1_buff[1],(int)dma_adc_1_buff[2],(int)dma_adc_1_buff[3]);
  400b26:	4825      	ldr	r0, [pc, #148]	; (400bbc <dma_adc_1_callback+0xa0>)
  400b28:	69c1      	ldr	r1, [r0, #28]
  400b2a:	6a02      	ldr	r2, [r0, #32]
  400b2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400b2e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  400b30:	9000      	str	r0, [sp, #0]
  400b32:	4823      	ldr	r0, [pc, #140]	; (400bc0 <dma_adc_1_callback+0xa4>)
  400b34:	4c23      	ldr	r4, [pc, #140]	; (400bc4 <dma_adc_1_callback+0xa8>)
  400b36:	47a0      	blx	r4
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400b38:	2300      	movs	r3, #0
  400b3a:	e008      	b.n	400b4e <dma_adc_1_callback+0x32>
				raw_currents[2] = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400b3c:	b292      	uxth	r2, r2
  400b3e:	4922      	ldr	r1, [pc, #136]	; (400bc8 <dma_adc_1_callback+0xac>)
  400b40:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  400b42:	491e      	ldr	r1, [pc, #120]	; (400bbc <dma_adc_1_callback+0xa0>)
  400b44:	7e0a      	ldrb	r2, [r1, #24]
  400b46:	f042 0204 	orr.w	r2, r2, #4
  400b4a:	760a      	strb	r2, [r1, #24]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400b4c:	3301      	adds	r3, #1
  400b4e:	2b03      	cmp	r3, #3
  400b50:	dc14      	bgt.n	400b7c <dma_adc_1_callback+0x60>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400b52:	4a1a      	ldr	r2, [pc, #104]	; (400bbc <dma_adc_1_callback+0xa0>)
  400b54:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  400b58:	69d2      	ldr	r2, [r2, #28]
  400b5a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400b5e:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  400b62:	d0eb      	beq.n	400b3c <dma_adc_1_callback+0x20>
  400b64:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  400b68:	d1f0      	bne.n	400b4c <dma_adc_1_callback+0x30>
				raw_voltage = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400b6a:	b292      	uxth	r2, r2
  400b6c:	4917      	ldr	r1, [pc, #92]	; (400bcc <dma_adc_1_callback+0xb0>)
  400b6e:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<3);
  400b70:	4912      	ldr	r1, [pc, #72]	; (400bbc <dma_adc_1_callback+0xa0>)
  400b72:	7e0a      	ldrb	r2, [r1, #24]
  400b74:	f042 0208 	orr.w	r2, r2, #8
  400b78:	760a      	strb	r2, [r1, #24]
				break;
  400b7a:	e7e7      	b.n	400b4c <dma_adc_1_callback+0x30>
	if(is_dma_adc_1_continuous){
  400b7c:	4b14      	ldr	r3, [pc, #80]	; (400bd0 <dma_adc_1_callback+0xb4>)
  400b7e:	781b      	ldrb	r3, [r3, #0]
  400b80:	b92b      	cbnz	r3, 400b8e <dma_adc_1_callback+0x72>
	if(ready_values == ALL_VALUES_READY){
  400b82:	4b0e      	ldr	r3, [pc, #56]	; (400bbc <dma_adc_1_callback+0xa0>)
  400b84:	7e1b      	ldrb	r3, [r3, #24]
  400b86:	2b0f      	cmp	r3, #15
  400b88:	d004      	beq.n	400b94 <dma_adc_1_callback+0x78>
}
  400b8a:	b003      	add	sp, #12
  400b8c:	bd30      	pop	{r4, r5, pc}
		dma_adc_1_enable_for_one_transaction();
  400b8e:	4b11      	ldr	r3, [pc, #68]	; (400bd4 <dma_adc_1_callback+0xb8>)
  400b90:	4798      	blx	r3
  400b92:	e7f6      	b.n	400b82 <dma_adc_1_callback+0x66>
		ready_values = 0;
  400b94:	2200      	movs	r2, #0
  400b96:	4b09      	ldr	r3, [pc, #36]	; (400bbc <dma_adc_1_callback+0xa0>)
  400b98:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 1 \n");
  400b9a:	480f      	ldr	r0, [pc, #60]	; (400bd8 <dma_adc_1_callback+0xbc>)
  400b9c:	4c09      	ldr	r4, [pc, #36]	; (400bc4 <dma_adc_1_callback+0xa8>)
  400b9e:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  400ba0:	4809      	ldr	r0, [pc, #36]	; (400bc8 <dma_adc_1_callback+0xac>)
  400ba2:	6843      	ldr	r3, [r0, #4]
  400ba4:	6802      	ldr	r2, [r0, #0]
  400ba6:	4909      	ldr	r1, [pc, #36]	; (400bcc <dma_adc_1_callback+0xb0>)
  400ba8:	6809      	ldr	r1, [r1, #0]
  400baa:	68c5      	ldr	r5, [r0, #12]
  400bac:	9501      	str	r5, [sp, #4]
  400bae:	6880      	ldr	r0, [r0, #8]
  400bb0:	9000      	str	r0, [sp, #0]
  400bb2:	480a      	ldr	r0, [pc, #40]	; (400bdc <dma_adc_1_callback+0xc0>)
  400bb4:	47a0      	blx	r4
}
  400bb6:	e7e8      	b.n	400b8a <dma_adc_1_callback+0x6e>
  400bb8:	204005a0 	.word	0x204005a0
  400bbc:	20400238 	.word	0x20400238
  400bc0:	004078cc 	.word	0x004078cc
  400bc4:	00405895 	.word	0x00405895
  400bc8:	204005bc 	.word	0x204005bc
  400bcc:	204005c8 	.word	0x204005c8
  400bd0:	204005b9 	.word	0x204005b9
  400bd4:	00400af1 	.word	0x00400af1
  400bd8:	004078f0 	.word	0x004078f0
  400bdc:	004078e0 	.word	0x004078e0

00400be0 <dma_adc_0_disable_continuously>:
	is_dma_adc_1_continuous = true;
	dma_adc_1_enable_for_one_transaction();
}

void dma_adc_0_disable_continuously(void){
	is_dma_adc_0_continuous = false;
  400be0:	2200      	movs	r2, #0
  400be2:	4b01      	ldr	r3, [pc, #4]	; (400be8 <dma_adc_0_disable_continuously+0x8>)
  400be4:	701a      	strb	r2, [r3, #0]
  400be6:	4770      	bx	lr
  400be8:	204005ba 	.word	0x204005ba

00400bec <dma_adc_1_disable_continuously>:
}
void dma_adc_1_disable_continuously(void){
	is_dma_adc_1_continuous = false;
  400bec:	2200      	movs	r2, #0
  400bee:	4b01      	ldr	r3, [pc, #4]	; (400bf4 <dma_adc_1_disable_continuously+0x8>)
  400bf0:	701a      	strb	r2, [r3, #0]
  400bf2:	4770      	bx	lr
  400bf4:	204005b9 	.word	0x204005b9

00400bf8 <dma_adc_init>:
void dma_adc_init(void){
  400bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  400bfc:	492a      	ldr	r1, [pc, #168]	; (400ca8 <dma_adc_init+0xb0>)
  400bfe:	2000      	movs	r0, #0
  400c00:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 400cdc <dma_adc_init+0xe4>
  400c04:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  400c06:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 400ce0 <dma_adc_init+0xe8>
  400c0a:	4641      	mov	r1, r8
  400c0c:	2000      	movs	r0, #0
  400c0e:	4f27      	ldr	r7, [pc, #156]	; (400cac <dma_adc_init+0xb4>)
  400c10:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  400c12:	2118      	movs	r1, #24
  400c14:	2000      	movs	r0, #0
  400c16:	4d26      	ldr	r5, [pc, #152]	; (400cb0 <dma_adc_init+0xb8>)
  400c18:	47a8      	blx	r5
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  400c1a:	2100      	movs	r1, #0
  400c1c:	460c      	mov	r4, r1
  400c1e:	4608      	mov	r0, r1
  400c20:	4e24      	ldr	r6, [pc, #144]	; (400cb4 <dma_adc_init+0xbc>)
  400c22:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  400c24:	6823      	ldr	r3, [r4, #0]
  400c26:	4a24      	ldr	r2, [pc, #144]	; (400cb8 <dma_adc_init+0xc0>)
  400c28:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400c2a:	2201      	movs	r2, #1
  400c2c:	4621      	mov	r1, r4
  400c2e:	4620      	mov	r0, r4
  400c30:	4c22      	ldr	r4, [pc, #136]	; (400cbc <dma_adc_init+0xc4>)
  400c32:	47a0      	blx	r4
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  400c34:	4922      	ldr	r1, [pc, #136]	; (400cc0 <dma_adc_init+0xc8>)
  400c36:	2001      	movs	r0, #1
  400c38:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400c3a:	f108 011c 	add.w	r1, r8, #28
  400c3e:	2001      	movs	r0, #1
  400c40:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  400c42:	2110      	movs	r1, #16
  400c44:	2001      	movs	r0, #1
  400c46:	47a8      	blx	r5
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  400c48:	2101      	movs	r1, #1
  400c4a:	2500      	movs	r5, #0
  400c4c:	4628      	mov	r0, r5
  400c4e:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  400c50:	682b      	ldr	r3, [r5, #0]
  400c52:	4a1c      	ldr	r2, [pc, #112]	; (400cc4 <dma_adc_init+0xcc>)
  400c54:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400c56:	2201      	movs	r2, #1
  400c58:	4629      	mov	r1, r5
  400c5a:	4610      	mov	r0, r2
  400c5c:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c5e:	4b1a      	ldr	r3, [pc, #104]	; (400cc8 <dma_adc_init+0xd0>)
  400c60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c64:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400c66:	2280      	movs	r2, #128	; 0x80
  400c68:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400c74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400c78:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c7c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c80:	f44f 7280 	mov.w	r2, #256	; 0x100
  400c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400c88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400c8c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c90:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	dma_adc_0_disable_continuously();
  400c94:	4b0d      	ldr	r3, [pc, #52]	; (400ccc <dma_adc_init+0xd4>)
  400c96:	4798      	blx	r3
	dma_adc_1_disable_continuously();
  400c98:	4b0d      	ldr	r3, [pc, #52]	; (400cd0 <dma_adc_init+0xd8>)
  400c9a:	4798      	blx	r3
	has_0_triggered = false;
  400c9c:	4a0d      	ldr	r2, [pc, #52]	; (400cd4 <dma_adc_init+0xdc>)
  400c9e:	7015      	strb	r5, [r2, #0]
	has_1_triggered = false;
  400ca0:	4a0d      	ldr	r2, [pc, #52]	; (400cd8 <dma_adc_init+0xe0>)
  400ca2:	7015      	strb	r5, [r2, #0]
  400ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ca8:	4003c020 	.word	0x4003c020
  400cac:	00402ced 	.word	0x00402ced
  400cb0:	00402d0d 	.word	0x00402d0d
  400cb4:	00402d3d 	.word	0x00402d3d
  400cb8:	00400a25 	.word	0x00400a25
  400cbc:	00402d51 	.word	0x00402d51
  400cc0:	40064020 	.word	0x40064020
  400cc4:	00400b1d 	.word	0x00400b1d
  400cc8:	e000e100 	.word	0xe000e100
  400ccc:	00400be1 	.word	0x00400be1
  400cd0:	00400bed 	.word	0x00400bed
  400cd4:	204005b8 	.word	0x204005b8
  400cd8:	204005a0 	.word	0x204005a0
  400cdc:	00402cfd 	.word	0x00402cfd
  400ce0:	20400238 	.word	0x20400238

00400ce4 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  400ce4:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  400ce6:	4d11      	ldr	r5, [pc, #68]	; (400d2c <adc_enable_all+0x48>)
  400ce8:	2108      	movs	r1, #8
  400cea:	4628      	mov	r0, r5
  400cec:	4c10      	ldr	r4, [pc, #64]	; (400d30 <adc_enable_all+0x4c>)
  400cee:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  400cf0:	2102      	movs	r1, #2
  400cf2:	4628      	mov	r0, r5
  400cf4:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  400cf6:	4e0f      	ldr	r6, [pc, #60]	; (400d34 <adc_enable_all+0x50>)
  400cf8:	2101      	movs	r1, #1
  400cfa:	4630      	mov	r0, r6
  400cfc:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  400cfe:	2106      	movs	r1, #6
  400d00:	4630      	mov	r0, r6
  400d02:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  400d04:	2105      	movs	r1, #5
  400d06:	4630      	mov	r0, r6
  400d08:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  400d0a:	2106      	movs	r1, #6
  400d0c:	4628      	mov	r0, r5
  400d0e:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  400d10:	210a      	movs	r1, #10
  400d12:	4628      	mov	r0, r5
  400d14:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  400d16:	2100      	movs	r1, #0
  400d18:	4630      	mov	r0, r6
  400d1a:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  400d1c:	2105      	movs	r1, #5
  400d1e:	4628      	mov	r0, r5
  400d20:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  400d22:	2100      	movs	r1, #0
  400d24:	4628      	mov	r0, r5
  400d26:	47a0      	blx	r4
  400d28:	bd70      	pop	{r4, r5, r6, pc}
  400d2a:	bf00      	nop
  400d2c:	204006b4 	.word	0x204006b4
  400d30:	004016c9 	.word	0x004016c9
  400d34:	2040078c 	.word	0x2040078c

00400d38 <pwm_0_callback>:
#include <hpl_pwm_config.h>

int counter = 0;

void pwm_0_callback(const struct pwm_descriptor *const descr){
	counter ++;
  400d38:	4a05      	ldr	r2, [pc, #20]	; (400d50 <pwm_0_callback+0x18>)
  400d3a:	6813      	ldr	r3, [r2, #0]
  400d3c:	3301      	adds	r3, #1
  400d3e:	6013      	str	r3, [r2, #0]
	if (counter > 3000){
  400d40:	f640 32b8 	movw	r2, #3000	; 0xbb8
  400d44:	4293      	cmp	r3, r2
  400d46:	dd02      	ble.n	400d4e <pwm_0_callback+0x16>
		counter = 0;
  400d48:	2200      	movs	r2, #0
  400d4a:	4b01      	ldr	r3, [pc, #4]	; (400d50 <pwm_0_callback+0x18>)
  400d4c:	601a      	str	r2, [r3, #0]
  400d4e:	4770      	bx	lr
  400d50:	20400264 	.word	0x20400264

00400d54 <pwm_init_user>:
		//printf("PWM Interrupt \n");
	}
}


void pwm_init_user(void){
  400d54:	b508      	push	{r3, lr}
}

static inline void hri_pwm_set_CMR_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmr_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400d56:	4b2e      	ldr	r3, [pc, #184]	; (400e10 <pwm_init_user+0xbc>)
  400d58:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  400d5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400d60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}

static inline void hri_pwm_set_DT_DTH_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400d64:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400d68:	f042 0222 	orr.w	r2, r2, #34	; 0x22
  400d6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
}

static inline void hri_pwm_set_DT_DTL_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400d70:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400d74:	f442 1208 	orr.w	r2, r2, #2228224	; 0x220000
  400d78:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400d7c:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
  400d80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400d84:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400d88:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400d8c:	f042 0222 	orr.w	r2, r2, #34	; 0x22
  400d90:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400d94:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400d98:	f442 1208 	orr.w	r2, r2, #2228224	; 0x220000
  400d9c:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400da0:	4a1c      	ldr	r2, [pc, #112]	; (400e14 <pwm_init_user+0xc0>)
  400da2:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  400da6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  400daa:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400dae:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400db2:	f041 0122 	orr.w	r1, r1, #34	; 0x22
  400db6:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400dba:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400dbe:	f441 1108 	orr.w	r1, r1, #2228224	; 0x220000
  400dc2:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
}

static inline void hri_pwm_set_CMPV_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmpv_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV |= mask;
  400dc6:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
  400dca:	f041 0101 	orr.w	r1, r1, #1
  400dce:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  400dd2:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
  400dd6:	f041 0101 	orr.w	r1, r1, #1
  400dda:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  400dde:	2201      	movs	r2, #1
  400de0:	611a      	str	r2, [r3, #16]
	
	
	//we want interrupt from one of the PWMs so that we can start the control loop
	//interrupt on PWM 0, channel 0 is enabled ; on PWM 1 is disabled
	hri_pwm_set_IMR1_CHID0_bit(PWM0);									//enable the interrupt from ADC 0, channel 0
	pwm_register_callback(&PWM_0, PWM_PERIOD_CB, pwm_0_callback);
  400de2:	4a0d      	ldr	r2, [pc, #52]	; (400e18 <pwm_init_user+0xc4>)
  400de4:	2100      	movs	r1, #0
  400de6:	480d      	ldr	r0, [pc, #52]	; (400e1c <pwm_init_user+0xc8>)
  400de8:	4b0d      	ldr	r3, [pc, #52]	; (400e20 <pwm_init_user+0xcc>)
  400dea:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400dec:	4b0d      	ldr	r3, [pc, #52]	; (400e24 <pwm_init_user+0xd0>)
  400dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400df2:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400df4:	2260      	movs	r2, #96	; 0x60
  400df6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400e02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400e06:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e0a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400e0e:	bd08      	pop	{r3, pc}
  400e10:	40020000 	.word	0x40020000
  400e14:	4005c000 	.word	0x4005c000
  400e18:	00400d39 	.word	0x00400d39
  400e1c:	204005cc 	.word	0x204005cc
  400e20:	004019d1 	.word	0x004019d1
  400e24:	e000e100 	.word	0xe000e100

00400e28 <pwm_enable_all>:
}


//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400e28:	b570      	push	{r4, r5, r6, lr}
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM |= mask;
  400e2a:	4a12      	ldr	r2, [pc, #72]	; (400e74 <pwm_enable_all+0x4c>)
  400e2c:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400e30:	f043 0301 	orr.w	r3, r3, #1
  400e34:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
  400e38:	f502 3270 	add.w	r2, r2, #245760	; 0x3c000
  400e3c:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400e40:	f043 0301 	orr.w	r3, r3, #1
  400e44:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	hri_pwm_set_CMPM_reg(PWM0, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	hri_pwm_set_CMPM_reg(PWM1, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  400e48:	4c0b      	ldr	r4, [pc, #44]	; (400e78 <pwm_enable_all+0x50>)
  400e4a:	4620      	mov	r0, r4
  400e4c:	4e0b      	ldr	r6, [pc, #44]	; (400e7c <pwm_enable_all+0x54>)
  400e4e:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  400e50:	4d0b      	ldr	r5, [pc, #44]	; (400e80 <pwm_enable_all+0x58>)
  400e52:	4628      	mov	r0, r5
  400e54:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  400e56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400e5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400e5e:	4620      	mov	r0, r4
  400e60:	4c08      	ldr	r4, [pc, #32]	; (400e84 <pwm_enable_all+0x5c>)
  400e62:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD>>1);
  400e64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400e68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400e6c:	4628      	mov	r0, r5
  400e6e:	47a0      	blx	r4
  400e70:	bd70      	pop	{r4, r5, r6, pc}
  400e72:	bf00      	nop
  400e74:	40020000 	.word	0x40020000
  400e78:	204005cc 	.word	0x204005cc
  400e7c:	00401959 	.word	0x00401959
  400e80:	20400770 	.word	0x20400770
  400e84:	00401a19 	.word	0x00401a19

00400e88 <pwm_set_duty>:
//sets individual channel pwm duty cycle
void pwm_set_duty(struct  pwm_descriptor * const descr, const uint8_t channel, const pwm_period_t duty_cycle){
	// based on available code from <hpl_pwm.h>
	// the default function doesn't allow to set the PWM cycle on individual channels
	
	hri_pwm_write_CDTYUPD_reg(descr->device.hw, channel, duty_cycle);
  400e88:	6903      	ldr	r3, [r0, #16]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  400e8a:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  400e8e:	f8c1 2208 	str.w	r2, [r1, #520]	; 0x208
  400e92:	4770      	bx	lr
  400e94:	0000      	movs	r0, r0
	...

00400e98 <Control_Function_Test>:
#include "PositionSensors.h"
#include "Encoder.h"
#include "Control.h"


void Control_Function_Test(void){
  400e98:	b530      	push	{r4, r5, lr}
  400e9a:	b083      	sub	sp, #12
	while (1)
	{
		Init_Control();
  400e9c:	4b10      	ldr	r3, [pc, #64]	; (400ee0 <Control_Function_Test+0x48>)
  400e9e:	4798      	blx	r3
		float a = 0;
  400ea0:	2400      	movs	r4, #0
		while (1)
		{
			Control(1, 100, 0, 0, 0, a);
  400ea2:	9401      	str	r4, [sp, #4]
  400ea4:	2200      	movs	r2, #0
  400ea6:	9200      	str	r2, [sp, #0]
  400ea8:	2300      	movs	r3, #0
  400eaa:	490e      	ldr	r1, [pc, #56]	; (400ee4 <Control_Function_Test+0x4c>)
  400eac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  400eb0:	4d0d      	ldr	r5, [pc, #52]	; (400ee8 <Control_Function_Test+0x50>)
  400eb2:	47a8      	blx	r5
			a = a+0.01;
  400eb4:	4620      	mov	r0, r4
  400eb6:	4b0d      	ldr	r3, [pc, #52]	; (400eec <Control_Function_Test+0x54>)
  400eb8:	4798      	blx	r3
  400eba:	a307      	add	r3, pc, #28	; (adr r3, 400ed8 <Control_Function_Test+0x40>)
  400ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
  400ec0:	4c0b      	ldr	r4, [pc, #44]	; (400ef0 <Control_Function_Test+0x58>)
  400ec2:	47a0      	blx	r4
  400ec4:	4b0b      	ldr	r3, [pc, #44]	; (400ef4 <Control_Function_Test+0x5c>)
  400ec6:	4798      	blx	r3
  400ec8:	4604      	mov	r4, r0
			delay_us(1);
  400eca:	2001      	movs	r0, #1
  400ecc:	4b0a      	ldr	r3, [pc, #40]	; (400ef8 <Control_Function_Test+0x60>)
  400ece:	4798      	blx	r3
  400ed0:	e7e7      	b.n	400ea2 <Control_Function_Test+0xa>
  400ed2:	bf00      	nop
  400ed4:	f3af 8000 	nop.w
  400ed8:	47ae147b 	.word	0x47ae147b
  400edc:	3f847ae1 	.word	0x3f847ae1
  400ee0:	004001e9 	.word	0x004001e9
  400ee4:	42c80000 	.word	0x42c80000
  400ee8:	004003a9 	.word	0x004003a9
  400eec:	00404865 	.word	0x00404865
  400ef0:	004045a9 	.word	0x004045a9
  400ef4:	00404ebd 	.word	0x00404ebd
  400ef8:	00401739 	.word	0x00401739

00400efc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400efc:	e7fe      	b.n	400efc <Dummy_Handler>
	...

00400f00 <Reset_Handler>:
{
  400f00:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400f02:	4b10      	ldr	r3, [pc, #64]	; (400f44 <Reset_Handler+0x44>)
  400f04:	4a10      	ldr	r2, [pc, #64]	; (400f48 <Reset_Handler+0x48>)
  400f06:	429a      	cmp	r2, r3
  400f08:	d009      	beq.n	400f1e <Reset_Handler+0x1e>
  400f0a:	4b0e      	ldr	r3, [pc, #56]	; (400f44 <Reset_Handler+0x44>)
  400f0c:	4a0e      	ldr	r2, [pc, #56]	; (400f48 <Reset_Handler+0x48>)
  400f0e:	e003      	b.n	400f18 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400f10:	6811      	ldr	r1, [r2, #0]
  400f12:	6019      	str	r1, [r3, #0]
  400f14:	3304      	adds	r3, #4
  400f16:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400f18:	490c      	ldr	r1, [pc, #48]	; (400f4c <Reset_Handler+0x4c>)
  400f1a:	428b      	cmp	r3, r1
  400f1c:	d3f8      	bcc.n	400f10 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400f1e:	4b0c      	ldr	r3, [pc, #48]	; (400f50 <Reset_Handler+0x50>)
  400f20:	e002      	b.n	400f28 <Reset_Handler+0x28>
                *pDest++ = 0;
  400f22:	2200      	movs	r2, #0
  400f24:	601a      	str	r2, [r3, #0]
  400f26:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400f28:	4a0a      	ldr	r2, [pc, #40]	; (400f54 <Reset_Handler+0x54>)
  400f2a:	4293      	cmp	r3, r2
  400f2c:	d3f9      	bcc.n	400f22 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400f2e:	4a0a      	ldr	r2, [pc, #40]	; (400f58 <Reset_Handler+0x58>)
  400f30:	4b0a      	ldr	r3, [pc, #40]	; (400f5c <Reset_Handler+0x5c>)
  400f32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400f36:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400f38:	4b09      	ldr	r3, [pc, #36]	; (400f60 <Reset_Handler+0x60>)
  400f3a:	4798      	blx	r3
        main();
  400f3c:	4b09      	ldr	r3, [pc, #36]	; (400f64 <Reset_Handler+0x64>)
  400f3e:	4798      	blx	r3
  400f40:	e7fe      	b.n	400f40 <Reset_Handler+0x40>
  400f42:	bf00      	nop
  400f44:	20400000 	.word	0x20400000
  400f48:	004081b8 	.word	0x004081b8
  400f4c:	2040021c 	.word	0x2040021c
  400f50:	2040021c 	.word	0x2040021c
  400f54:	204007bc 	.word	0x204007bc
  400f58:	e000ed00 	.word	0xe000ed00
  400f5c:	00400000 	.word	0x00400000
  400f60:	00404f69 	.word	0x00404f69
  400f64:	00402e15 	.word	0x00402e15

00400f68 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  400f68:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f6a:	b085      	sub	sp, #20
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400f6c:	4b20      	ldr	r3, [pc, #128]	; (400ff0 <ADC_1_init+0x88>)
  400f6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  400f72:	f413 7f80 	tst.w	r3, #256	; 0x100
  400f76:	d104      	bne.n	400f82 <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400f78:	f44f 7280 	mov.w	r2, #256	; 0x100
  400f7c:	4b1c      	ldr	r3, [pc, #112]	; (400ff0 <ADC_1_init+0x88>)
  400f7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  400f82:	4d1c      	ldr	r5, [pc, #112]	; (400ff4 <ADC_1_init+0x8c>)
  400f84:	4c1c      	ldr	r4, [pc, #112]	; (400ff8 <ADC_1_init+0x90>)
  400f86:	2600      	movs	r6, #0
  400f88:	9602      	str	r6, [sp, #8]
  400f8a:	4b1c      	ldr	r3, [pc, #112]	; (400ffc <ADC_1_init+0x94>)
  400f8c:	9301      	str	r3, [sp, #4]
  400f8e:	2304      	movs	r3, #4
  400f90:	9300      	str	r3, [sp, #0]
  400f92:	2306      	movs	r3, #6
  400f94:	462a      	mov	r2, r5
  400f96:	491a      	ldr	r1, [pc, #104]	; (401000 <ADC_1_init+0x98>)
  400f98:	4620      	mov	r0, r4
  400f9a:	4f1a      	ldr	r7, [pc, #104]	; (401004 <ADC_1_init+0x9c>)
  400f9c:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  400f9e:	2310      	movs	r3, #16
  400fa0:	f105 0208 	add.w	r2, r5, #8
  400fa4:	4631      	mov	r1, r6
  400fa6:	4620      	mov	r0, r4
  400fa8:	4e17      	ldr	r6, [pc, #92]	; (401008 <ADC_1_init+0xa0>)
  400faa:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  400fac:	2310      	movs	r3, #16
  400fae:	f105 0218 	add.w	r2, r5, #24
  400fb2:	2101      	movs	r1, #1
  400fb4:	4620      	mov	r0, r4
  400fb6:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  400fb8:	2310      	movs	r3, #16
  400fba:	f105 0228 	add.w	r2, r5, #40	; 0x28
  400fbe:	2105      	movs	r1, #5
  400fc0:	4620      	mov	r0, r4
  400fc2:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  400fc4:	2310      	movs	r3, #16
  400fc6:	f105 0238 	add.w	r2, r5, #56	; 0x38
  400fca:	2106      	movs	r1, #6
  400fcc:	4620      	mov	r0, r4
  400fce:	47b0      	blx	r6
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400fd0:	2202      	movs	r2, #2
  400fd2:	4b0e      	ldr	r3, [pc, #56]	; (40100c <ADC_1_init+0xa4>)
  400fd4:	601a      	str	r2, [r3, #0]
  400fd6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400fde:	601a      	str	r2, [r3, #0]
  400fe0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400fe4:	601a      	str	r2, [r3, #0]
  400fe6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400fea:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  400fec:	b005      	add	sp, #20
  400fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400ff0:	400e0600 	.word	0x400e0600
  400ff4:	20400268 	.word	0x20400268
  400ff8:	2040078c 	.word	0x2040078c
  400ffc:	2040062c 	.word	0x2040062c
  401000:	40064000 	.word	0x40064000
  401004:	00401569 	.word	0x00401569
  401008:	00401611 	.word	0x00401611
  40100c:	400e1000 	.word	0x400e1000

00401010 <ADC_0_init>:
{
  401010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401014:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401016:	4b2a      	ldr	r3, [pc, #168]	; (4010c0 <ADC_0_init+0xb0>)
  401018:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40101a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40101e:	d103      	bne.n	401028 <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401020:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401024:	4b26      	ldr	r3, [pc, #152]	; (4010c0 <ADC_0_init+0xb0>)
  401026:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  401028:	4d26      	ldr	r5, [pc, #152]	; (4010c4 <ADC_0_init+0xb4>)
  40102a:	4c27      	ldr	r4, [pc, #156]	; (4010c8 <ADC_0_init+0xb8>)
  40102c:	2600      	movs	r6, #0
  40102e:	9602      	str	r6, [sp, #8]
  401030:	4b26      	ldr	r3, [pc, #152]	; (4010cc <ADC_0_init+0xbc>)
  401032:	9301      	str	r3, [sp, #4]
  401034:	2706      	movs	r7, #6
  401036:	9700      	str	r7, [sp, #0]
  401038:	230a      	movs	r3, #10
  40103a:	f105 0248 	add.w	r2, r5, #72	; 0x48
  40103e:	4924      	ldr	r1, [pc, #144]	; (4010d0 <ADC_0_init+0xc0>)
  401040:	4620      	mov	r0, r4
  401042:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4010e0 <ADC_0_init+0xd0>
  401046:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  401048:	2310      	movs	r3, #16
  40104a:	f105 0254 	add.w	r2, r5, #84	; 0x54
  40104e:	4631      	mov	r1, r6
  401050:	4620      	mov	r0, r4
  401052:	4e20      	ldr	r6, [pc, #128]	; (4010d4 <ADC_0_init+0xc4>)
  401054:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  401056:	2310      	movs	r3, #16
  401058:	f105 0264 	add.w	r2, r5, #100	; 0x64
  40105c:	2102      	movs	r1, #2
  40105e:	4620      	mov	r0, r4
  401060:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  401062:	2310      	movs	r3, #16
  401064:	f105 0274 	add.w	r2, r5, #116	; 0x74
  401068:	2105      	movs	r1, #5
  40106a:	4620      	mov	r0, r4
  40106c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  40106e:	2310      	movs	r3, #16
  401070:	f105 0284 	add.w	r2, r5, #132	; 0x84
  401074:	4639      	mov	r1, r7
  401076:	4620      	mov	r0, r4
  401078:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  40107a:	2310      	movs	r3, #16
  40107c:	f105 0294 	add.w	r2, r5, #148	; 0x94
  401080:	2108      	movs	r1, #8
  401082:	4620      	mov	r0, r4
  401084:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  401086:	2310      	movs	r3, #16
  401088:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  40108c:	210a      	movs	r1, #10
  40108e:	4620      	mov	r0, r4
  401090:	47b0      	blx	r6
  401092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401096:	4b10      	ldr	r3, [pc, #64]	; (4010d8 <ADC_0_init+0xc8>)
  401098:	601a      	str	r2, [r3, #0]
  40109a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40109e:	2208      	movs	r2, #8
  4010a0:	601a      	str	r2, [r3, #0]
  4010a2:	2204      	movs	r2, #4
  4010a4:	601a      	str	r2, [r3, #0]
  4010a6:	4a0d      	ldr	r2, [pc, #52]	; (4010dc <ADC_0_init+0xcc>)
  4010a8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4010ac:	6011      	str	r1, [r2, #0]
  4010ae:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4010b2:	6011      	str	r1, [r2, #0]
  4010b4:	2201      	movs	r2, #1
  4010b6:	601a      	str	r2, [r3, #0]
}
  4010b8:	b004      	add	sp, #16
  4010ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010be:	bf00      	nop
  4010c0:	400e0600 	.word	0x400e0600
  4010c4:	20400268 	.word	0x20400268
  4010c8:	204006b4 	.word	0x204006b4
  4010cc:	204006e0 	.word	0x204006e0
  4010d0:	4003c000 	.word	0x4003c000
  4010d4:	00401611 	.word	0x00401611
  4010d8:	400e1400 	.word	0x400e1400
  4010dc:	400e0e00 	.word	0x400e0e00
  4010e0:	00401569 	.word	0x00401569

004010e4 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  4010e4:	4b04      	ldr	r3, [pc, #16]	; (4010f8 <EXTERNAL_IRQ_D_init+0x14>)
  4010e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4010ea:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  4010ec:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  4010ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4010f2:	601a      	str	r2, [r3, #0]
  4010f4:	4770      	bx	lr
  4010f6:	bf00      	nop
  4010f8:	400e1400 	.word	0x400e1400

004010fc <EXTERNAL_IRQ_B_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4010fc:	4b04      	ldr	r3, [pc, #16]	; (401110 <EXTERNAL_IRQ_B_init+0x14>)
  4010fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401102:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  401104:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  401106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40110a:	601a      	str	r2, [r3, #0]
  40110c:	4770      	bx	lr
  40110e:	bf00      	nop
  401110:	400e1000 	.word	0x400e1000

00401114 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  401114:	4b06      	ldr	r3, [pc, #24]	; (401130 <EXTERNAL_IRQ_A_init+0x1c>)
  401116:	2204      	movs	r2, #4
  401118:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40111a:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40111c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  401120:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  401122:	2220      	movs	r2, #32
  401124:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  401126:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  401128:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40112c:	601a      	str	r2, [r3, #0]
  40112e:	4770      	bx	lr
  401130:	400e0e00 	.word	0x400e0e00

00401134 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401134:	4b16      	ldr	r3, [pc, #88]	; (401190 <PWM_0_PORT_init+0x5c>)
  401136:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401138:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  40113c:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40113e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401140:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  401144:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401146:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40114a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40114c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40114e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  401152:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401154:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401156:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  40115a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40115c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401160:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401162:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401164:	f022 0202 	bic.w	r2, r2, #2
  401168:	671a      	str	r2, [r3, #112]	; 0x70
  40116a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40116c:	f022 0202 	bic.w	r2, r2, #2
  401170:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401172:	2202      	movs	r2, #2
  401174:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401176:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401178:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  40117c:	671a      	str	r2, [r3, #112]	; 0x70
  40117e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401180:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  401184:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40118a:	605a      	str	r2, [r3, #4]
  40118c:	4770      	bx	lr
  40118e:	bf00      	nop
  401190:	400e0e00 	.word	0x400e0e00

00401194 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401194:	4b04      	ldr	r3, [pc, #16]	; (4011a8 <PWM_0_CLOCK_init+0x14>)
  401196:	699b      	ldr	r3, [r3, #24]
  401198:	2b00      	cmp	r3, #0
  40119a:	db03      	blt.n	4011a4 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40119c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4011a0:	4b01      	ldr	r3, [pc, #4]	; (4011a8 <PWM_0_CLOCK_init+0x14>)
  4011a2:	611a      	str	r2, [r3, #16]
  4011a4:	4770      	bx	lr
  4011a6:	bf00      	nop
  4011a8:	400e0600 	.word	0x400e0600

004011ac <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  4011ac:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  4011ae:	4b06      	ldr	r3, [pc, #24]	; (4011c8 <PWM_0_init+0x1c>)
  4011b0:	4798      	blx	r3
	PWM_0_PORT_init();
  4011b2:	4b06      	ldr	r3, [pc, #24]	; (4011cc <PWM_0_init+0x20>)
  4011b4:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  4011b6:	4b06      	ldr	r3, [pc, #24]	; (4011d0 <PWM_0_init+0x24>)
  4011b8:	4798      	blx	r3
  4011ba:	4602      	mov	r2, r0
  4011bc:	4905      	ldr	r1, [pc, #20]	; (4011d4 <PWM_0_init+0x28>)
  4011be:	4806      	ldr	r0, [pc, #24]	; (4011d8 <PWM_0_init+0x2c>)
  4011c0:	4b06      	ldr	r3, [pc, #24]	; (4011dc <PWM_0_init+0x30>)
  4011c2:	4798      	blx	r3
  4011c4:	bd08      	pop	{r3, pc}
  4011c6:	bf00      	nop
  4011c8:	00401195 	.word	0x00401195
  4011cc:	00401135 	.word	0x00401135
  4011d0:	0040285d 	.word	0x0040285d
  4011d4:	40020000 	.word	0x40020000
  4011d8:	204005cc 	.word	0x204005cc
  4011dc:	00401915 	.word	0x00401915

004011e0 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4011e0:	4b0c      	ldr	r3, [pc, #48]	; (401214 <PWM_1_PORT_init+0x34>)
  4011e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4011e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4011e8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4011ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4011ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4011f0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4011f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4011f6:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4011f8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4011fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4011fe:	f042 0201 	orr.w	r2, r2, #1
  401202:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401204:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401206:	f022 0201 	bic.w	r2, r2, #1
  40120a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40120c:	2201      	movs	r2, #1
  40120e:	605a      	str	r2, [r3, #4]
  401210:	4770      	bx	lr
  401212:	bf00      	nop
  401214:	400e0e00 	.word	0x400e0e00

00401218 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401218:	4b05      	ldr	r3, [pc, #20]	; (401230 <PWM_1_CLOCK_init+0x18>)
  40121a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40121e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  401222:	d104      	bne.n	40122e <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401228:	4b01      	ldr	r3, [pc, #4]	; (401230 <PWM_1_CLOCK_init+0x18>)
  40122a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40122e:	4770      	bx	lr
  401230:	400e0600 	.word	0x400e0600

00401234 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  401234:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  401236:	4b06      	ldr	r3, [pc, #24]	; (401250 <PWM_1_init+0x1c>)
  401238:	4798      	blx	r3
	PWM_1_PORT_init();
  40123a:	4b06      	ldr	r3, [pc, #24]	; (401254 <PWM_1_init+0x20>)
  40123c:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  40123e:	4b06      	ldr	r3, [pc, #24]	; (401258 <PWM_1_init+0x24>)
  401240:	4798      	blx	r3
  401242:	4602      	mov	r2, r0
  401244:	4905      	ldr	r1, [pc, #20]	; (40125c <PWM_1_init+0x28>)
  401246:	4806      	ldr	r0, [pc, #24]	; (401260 <PWM_1_init+0x2c>)
  401248:	4b06      	ldr	r3, [pc, #24]	; (401264 <PWM_1_init+0x30>)
  40124a:	4798      	blx	r3
  40124c:	bd08      	pop	{r3, pc}
  40124e:	bf00      	nop
  401250:	00401219 	.word	0x00401219
  401254:	004011e1 	.word	0x004011e1
  401258:	0040285d 	.word	0x0040285d
  40125c:	4005c000 	.word	0x4005c000
  401260:	20400770 	.word	0x20400770
  401264:	00401915 	.word	0x00401915

00401268 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401268:	4b06      	ldr	r3, [pc, #24]	; (401284 <ENCODER_A_PORT_init+0x1c>)
  40126a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40126c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  401270:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401272:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401274:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  401278:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40127a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40127e:	605a      	str	r2, [r3, #4]
  401280:	4770      	bx	lr
  401282:	bf00      	nop
  401284:	400e0e00 	.word	0x400e0e00

00401288 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  401288:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40128a:	4b09      	ldr	r3, [pc, #36]	; (4012b0 <ENCODER_A_init+0x28>)
  40128c:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40128e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  401292:	d103      	bne.n	40129c <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401294:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401298:	4b05      	ldr	r3, [pc, #20]	; (4012b0 <ENCODER_A_init+0x28>)
  40129a:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  40129c:	4b05      	ldr	r3, [pc, #20]	; (4012b4 <ENCODER_A_init+0x2c>)
  40129e:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  4012a0:	4b05      	ldr	r3, [pc, #20]	; (4012b8 <ENCODER_A_init+0x30>)
  4012a2:	4798      	blx	r3
  4012a4:	4602      	mov	r2, r0
  4012a6:	4905      	ldr	r1, [pc, #20]	; (4012bc <ENCODER_A_init+0x34>)
  4012a8:	4805      	ldr	r0, [pc, #20]	; (4012c0 <ENCODER_A_init+0x38>)
  4012aa:	4b06      	ldr	r3, [pc, #24]	; (4012c4 <ENCODER_A_init+0x3c>)
  4012ac:	4798      	blx	r3
  4012ae:	bd08      	pop	{r3, pc}
  4012b0:	400e0600 	.word	0x400e0600
  4012b4:	00401269 	.word	0x00401269
  4012b8:	00402a33 	.word	0x00402a33
  4012bc:	4000c000 	.word	0x4000c000
  4012c0:	20400698 	.word	0x20400698
  4012c4:	00401b01 	.word	0x00401b01

004012c8 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4012c8:	4b06      	ldr	r3, [pc, #24]	; (4012e4 <ENCODER_B_PORT_init+0x1c>)
  4012ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4012cc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4012d0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4012d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4012d4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  4012d8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4012da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4012de:	605a      	str	r2, [r3, #4]
  4012e0:	4770      	bx	lr
  4012e2:	bf00      	nop
  4012e4:	400e1400 	.word	0x400e1400

004012e8 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  4012e8:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4012ea:	4b0a      	ldr	r3, [pc, #40]	; (401314 <ENCODER_B_init+0x2c>)
  4012ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4012f0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  4012f4:	d104      	bne.n	401300 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4012f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4012fa:	4b06      	ldr	r3, [pc, #24]	; (401314 <ENCODER_B_init+0x2c>)
  4012fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  401300:	4b05      	ldr	r3, [pc, #20]	; (401318 <ENCODER_B_init+0x30>)
  401302:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  401304:	4b05      	ldr	r3, [pc, #20]	; (40131c <ENCODER_B_init+0x34>)
  401306:	4798      	blx	r3
  401308:	4602      	mov	r2, r0
  40130a:	4905      	ldr	r1, [pc, #20]	; (401320 <ENCODER_B_init+0x38>)
  40130c:	4805      	ldr	r0, [pc, #20]	; (401324 <ENCODER_B_init+0x3c>)
  40130e:	4b06      	ldr	r3, [pc, #24]	; (401328 <ENCODER_B_init+0x40>)
  401310:	4798      	blx	r3
  401312:	bd08      	pop	{r3, pc}
  401314:	400e0600 	.word	0x400e0600
  401318:	004012c9 	.word	0x004012c9
  40131c:	00402a33 	.word	0x00402a33
  401320:	40054000 	.word	0x40054000
  401324:	204005e8 	.word	0x204005e8
  401328:	00401b01 	.word	0x00401b01

0040132c <delay_driver_init>:
}

void delay_driver_init(void)
{
  40132c:	b508      	push	{r3, lr}
	delay_init(SysTick);
  40132e:	4802      	ldr	r0, [pc, #8]	; (401338 <delay_driver_init+0xc>)
  401330:	4b02      	ldr	r3, [pc, #8]	; (40133c <delay_driver_init+0x10>)
  401332:	4798      	blx	r3
  401334:	bd08      	pop	{r3, pc}
  401336:	bf00      	nop
  401338:	e000e010 	.word	0xe000e010
  40133c:	00401725 	.word	0x00401725

00401340 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401340:	4b0f      	ldr	r3, [pc, #60]	; (401380 <EDBG_COM_PORT_init+0x40>)
  401342:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401344:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401348:	671a      	str	r2, [r3, #112]	; 0x70
  40134a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40134c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401350:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401352:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401356:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  401358:	4a0a      	ldr	r2, [pc, #40]	; (401384 <EDBG_COM_PORT_init+0x44>)
  40135a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40135e:	f043 0310 	orr.w	r3, r3, #16
  401362:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401366:	4b08      	ldr	r3, [pc, #32]	; (401388 <EDBG_COM_PORT_init+0x48>)
  401368:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40136a:	f042 0210 	orr.w	r2, r2, #16
  40136e:	671a      	str	r2, [r3, #112]	; 0x70
  401370:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401372:	f042 0210 	orr.w	r2, r2, #16
  401376:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401378:	2210      	movs	r2, #16
  40137a:	605a      	str	r2, [r3, #4]
  40137c:	4770      	bx	lr
  40137e:	bf00      	nop
  401380:	400e0e00 	.word	0x400e0e00
  401384:	40088000 	.word	0x40088000
  401388:	400e1000 	.word	0x400e1000

0040138c <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40138c:	4b04      	ldr	r3, [pc, #16]	; (4013a0 <EDBG_COM_CLOCK_init+0x14>)
  40138e:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  401390:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  401394:	d103      	bne.n	40139e <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  401396:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40139a:	4b01      	ldr	r3, [pc, #4]	; (4013a0 <EDBG_COM_CLOCK_init+0x14>)
  40139c:	611a      	str	r2, [r3, #16]
  40139e:	4770      	bx	lr
  4013a0:	400e0600 	.word	0x400e0600

004013a4 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  4013a4:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  4013a6:	4b06      	ldr	r3, [pc, #24]	; (4013c0 <EDBG_COM_init+0x1c>)
  4013a8:	4798      	blx	r3
	EDBG_COM_PORT_init();
  4013aa:	4b06      	ldr	r3, [pc, #24]	; (4013c4 <EDBG_COM_init+0x20>)
  4013ac:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  4013ae:	4b06      	ldr	r3, [pc, #24]	; (4013c8 <EDBG_COM_init+0x24>)
  4013b0:	4798      	blx	r3
  4013b2:	4602      	mov	r2, r0
  4013b4:	4905      	ldr	r1, [pc, #20]	; (4013cc <EDBG_COM_init+0x28>)
  4013b6:	4806      	ldr	r0, [pc, #24]	; (4013d0 <EDBG_COM_init+0x2c>)
  4013b8:	4b06      	ldr	r3, [pc, #24]	; (4013d4 <EDBG_COM_init+0x30>)
  4013ba:	4798      	blx	r3
  4013bc:	bd08      	pop	{r3, pc}
  4013be:	bf00      	nop
  4013c0:	0040138d 	.word	0x0040138d
  4013c4:	00401341 	.word	0x00401341
  4013c8:	00402c75 	.word	0x00402c75
  4013cc:	40028000 	.word	0x40028000
  4013d0:	2040068c 	.word	0x2040068c
  4013d4:	00401c49 	.word	0x00401c49

004013d8 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  4013d8:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4013da:	4b37      	ldr	r3, [pc, #220]	; (4014b8 <system_init+0xe0>)
  4013dc:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4013de:	4b37      	ldr	r3, [pc, #220]	; (4014bc <system_init+0xe4>)
  4013e0:	699b      	ldr	r3, [r3, #24]
  4013e2:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4013e6:	d103      	bne.n	4013f0 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4013e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4013ec:	4b33      	ldr	r3, [pc, #204]	; (4014bc <system_init+0xe4>)
  4013ee:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4013f0:	4b32      	ldr	r3, [pc, #200]	; (4014bc <system_init+0xe4>)
  4013f2:	699b      	ldr	r3, [r3, #24]
  4013f4:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4013f8:	d103      	bne.n	401402 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4013fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4013fe:	4b2f      	ldr	r3, [pc, #188]	; (4014bc <system_init+0xe4>)
  401400:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401402:	4b2e      	ldr	r3, [pc, #184]	; (4014bc <system_init+0xe4>)
  401404:	699b      	ldr	r3, [r3, #24]
  401406:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  40140a:	d103      	bne.n	401414 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40140c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401410:	4b2a      	ldr	r3, [pc, #168]	; (4014bc <system_init+0xe4>)
  401412:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401414:	4b29      	ldr	r3, [pc, #164]	; (4014bc <system_init+0xe4>)
  401416:	699b      	ldr	r3, [r3, #24]
  401418:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40141c:	d103      	bne.n	401426 <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40141e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401422:	4b26      	ldr	r3, [pc, #152]	; (4014bc <system_init+0xe4>)
  401424:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  401426:	4a26      	ldr	r2, [pc, #152]	; (4014c0 <system_init+0xe8>)
  401428:	6853      	ldr	r3, [r2, #4]
  40142a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40142e:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  401430:	4b24      	ldr	r3, [pc, #144]	; (4014c4 <system_init+0xec>)
  401432:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401436:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  401438:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  40143c:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  40143e:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401440:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  401444:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401446:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401448:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40144a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40144e:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401450:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401452:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  401458:	f44f 7080 	mov.w	r0, #256	; 0x100
  40145c:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40145e:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401460:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401462:	f44f 7000 	mov.w	r0, #512	; 0x200
  401466:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401468:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40146a:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40146c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401470:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401472:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401474:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401476:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40147a:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40147c:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40147e:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401480:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401482:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401484:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  401486:	4b10      	ldr	r3, [pc, #64]	; (4014c8 <system_init+0xf0>)
  401488:	4798      	blx	r3
	ADC_1_init();
  40148a:	4b10      	ldr	r3, [pc, #64]	; (4014cc <system_init+0xf4>)
  40148c:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  40148e:	4b10      	ldr	r3, [pc, #64]	; (4014d0 <system_init+0xf8>)
  401490:	4798      	blx	r3
	EXTERNAL_IRQ_B_init();
  401492:	4b10      	ldr	r3, [pc, #64]	; (4014d4 <system_init+0xfc>)
  401494:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  401496:	4b10      	ldr	r3, [pc, #64]	; (4014d8 <system_init+0x100>)
  401498:	4798      	blx	r3

	PWM_0_init();
  40149a:	4b10      	ldr	r3, [pc, #64]	; (4014dc <system_init+0x104>)
  40149c:	4798      	blx	r3

	PWM_1_init();
  40149e:	4b10      	ldr	r3, [pc, #64]	; (4014e0 <system_init+0x108>)
  4014a0:	4798      	blx	r3
	ENCODER_A_init();
  4014a2:	4b10      	ldr	r3, [pc, #64]	; (4014e4 <system_init+0x10c>)
  4014a4:	4798      	blx	r3
	ENCODER_B_init();
  4014a6:	4b10      	ldr	r3, [pc, #64]	; (4014e8 <system_init+0x110>)
  4014a8:	4798      	blx	r3

	delay_driver_init();
  4014aa:	4b10      	ldr	r3, [pc, #64]	; (4014ec <system_init+0x114>)
  4014ac:	4798      	blx	r3

	EDBG_COM_init();
  4014ae:	4b10      	ldr	r3, [pc, #64]	; (4014f0 <system_init+0x118>)
  4014b0:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  4014b2:	4b10      	ldr	r3, [pc, #64]	; (4014f4 <system_init+0x11c>)
  4014b4:	4798      	blx	r3
  4014b6:	bd08      	pop	{r3, pc}
  4014b8:	00402081 	.word	0x00402081
  4014bc:	400e0600 	.word	0x400e0600
  4014c0:	400e1850 	.word	0x400e1850
  4014c4:	400e0e00 	.word	0x400e0e00
  4014c8:	00401011 	.word	0x00401011
  4014cc:	00400f69 	.word	0x00400f69
  4014d0:	004010e5 	.word	0x004010e5
  4014d4:	004010fd 	.word	0x004010fd
  4014d8:	00401115 	.word	0x00401115
  4014dc:	004011ad 	.word	0x004011ad
  4014e0:	00401235 	.word	0x00401235
  4014e4:	00401289 	.word	0x00401289
  4014e8:	004012e9 	.word	0x004012e9
  4014ec:	0040132d 	.word	0x0040132d
  4014f0:	004013a5 	.word	0x004013a5
  4014f4:	0040179d 	.word	0x0040179d

004014f8 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  4014f8:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  4014fa:	6983      	ldr	r3, [r0, #24]
  4014fc:	b103      	cbz	r3, 401500 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  4014fe:	4798      	blx	r3
  401500:	bd08      	pop	{r3, pc}

00401502 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  401502:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  401504:	69c3      	ldr	r3, [r0, #28]
  401506:	b103      	cbz	r3, 40150a <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  401508:	4798      	blx	r3
  40150a:	bd08      	pop	{r3, pc}

0040150c <adc_async_channel_conversion_done>:
{
  40150c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401510:	4605      	mov	r5, r0
  401512:	4688      	mov	r8, r1
  401514:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  401516:	6a03      	ldr	r3, [r0, #32]
  401518:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  40151a:	6a87      	ldr	r7, [r0, #40]	; 0x28
  40151c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401520:	00de      	lsls	r6, r3, #3
  401522:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  401524:	f104 0a04 	add.w	sl, r4, #4
  401528:	b2d1      	uxtb	r1, r2
  40152a:	4650      	mov	r0, sl
  40152c:	4b0c      	ldr	r3, [pc, #48]	; (401560 <adc_async_channel_conversion_done+0x54>)
  40152e:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  401530:	4628      	mov	r0, r5
  401532:	4b0c      	ldr	r3, [pc, #48]	; (401564 <adc_async_channel_conversion_done+0x58>)
  401534:	4798      	blx	r3
  401536:	2801      	cmp	r0, #1
  401538:	d907      	bls.n	40154a <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  40153a:	ea4f 2119 	mov.w	r1, r9, lsr #8
  40153e:	4650      	mov	r0, sl
  401540:	4b07      	ldr	r3, [pc, #28]	; (401560 <adc_async_channel_conversion_done+0x54>)
  401542:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  401544:	8aa3      	ldrh	r3, [r4, #20]
  401546:	3301      	adds	r3, #1
  401548:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  40154a:	8aa3      	ldrh	r3, [r4, #20]
  40154c:	3301      	adds	r3, #1
  40154e:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  401550:	59bb      	ldr	r3, [r7, r6]
  401552:	b113      	cbz	r3, 40155a <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  401554:	4641      	mov	r1, r8
  401556:	4628      	mov	r0, r5
  401558:	4798      	blx	r3
  40155a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40155e:	bf00      	nop
  401560:	00401d61 	.word	0x00401d61
  401564:	00402071 	.word	0x00402071

00401568 <adc_async_init>:
{
  401568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40156c:	4616      	mov	r6, r2
  40156e:	461c      	mov	r4, r3
  401570:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  401574:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  401576:	4607      	mov	r7, r0
  401578:	4689      	mov	r9, r1
  40157a:	2800      	cmp	r0, #0
  40157c:	bf18      	it	ne
  40157e:	2900      	cmpne	r1, #0
  401580:	d00b      	beq.n	40159a <adc_async_init+0x32>
  401582:	1c13      	adds	r3, r2, #0
  401584:	bf18      	it	ne
  401586:	2301      	movne	r3, #1
  401588:	f1b8 0f00 	cmp.w	r8, #0
  40158c:	d017      	beq.n	4015be <adc_async_init+0x56>
  40158e:	b1b3      	cbz	r3, 4015be <adc_async_init+0x56>
  401590:	b10d      	cbz	r5, 401596 <adc_async_init+0x2e>
  401592:	2001      	movs	r0, #1
  401594:	e002      	b.n	40159c <adc_async_init+0x34>
  401596:	2000      	movs	r0, #0
  401598:	e000      	b.n	40159c <adc_async_init+0x34>
  40159a:	2000      	movs	r0, #0
  40159c:	f8df b068 	ldr.w	fp, [pc, #104]	; 401608 <adc_async_init+0xa0>
  4015a0:	223f      	movs	r2, #63	; 0x3f
  4015a2:	4659      	mov	r1, fp
  4015a4:	f8df a064 	ldr.w	sl, [pc, #100]	; 40160c <adc_async_init+0xa4>
  4015a8:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  4015aa:	1c60      	adds	r0, r4, #1
  4015ac:	2240      	movs	r2, #64	; 0x40
  4015ae:	4659      	mov	r1, fp
  4015b0:	4580      	cmp	r8, r0
  4015b2:	bfcc      	ite	gt
  4015b4:	2000      	movgt	r0, #0
  4015b6:	2001      	movle	r0, #1
  4015b8:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  4015ba:	2300      	movs	r3, #0
  4015bc:	e005      	b.n	4015ca <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  4015be:	2000      	movs	r0, #0
  4015c0:	e7ec      	b.n	40159c <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  4015c2:	22ff      	movs	r2, #255	; 0xff
  4015c4:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  4015c6:	3301      	adds	r3, #1
  4015c8:	b2db      	uxtb	r3, r3
  4015ca:	42a3      	cmp	r3, r4
  4015cc:	d9f9      	bls.n	4015c2 <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  4015ce:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  4015d0:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  4015d4:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  4015d8:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  4015da:	4649      	mov	r1, r9
  4015dc:	4638      	mov	r0, r7
  4015de:	4b06      	ldr	r3, [pc, #24]	; (4015f8 <adc_async_init+0x90>)
  4015e0:	4798      	blx	r3
	if (init_status) {
  4015e2:	4603      	mov	r3, r0
  4015e4:	b928      	cbnz	r0, 4015f2 <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  4015e6:	4a05      	ldr	r2, [pc, #20]	; (4015fc <adc_async_init+0x94>)
  4015e8:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  4015ea:	4a05      	ldr	r2, [pc, #20]	; (401600 <adc_async_init+0x98>)
  4015ec:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  4015ee:	4a05      	ldr	r2, [pc, #20]	; (401604 <adc_async_init+0x9c>)
  4015f0:	607a      	str	r2, [r7, #4]
}
  4015f2:	4618      	mov	r0, r3
  4015f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015f8:	00401fb1 	.word	0x00401fb1
  4015fc:	0040150d 	.word	0x0040150d
  401600:	004014f9 	.word	0x004014f9
  401604:	00401503 	.word	0x00401503
  401608:	00407924 	.word	0x00407924
  40160c:	00401cbd 	.word	0x00401cbd

00401610 <adc_async_register_channel_buffer>:
{
  401610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401614:	460e      	mov	r6, r1
  401616:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  401618:	4605      	mov	r5, r0
  40161a:	4690      	mov	r8, r2
  40161c:	2800      	cmp	r0, #0
  40161e:	bf18      	it	ne
  401620:	2a00      	cmpne	r2, #0
  401622:	d002      	beq.n	40162a <adc_async_register_channel_buffer+0x1a>
  401624:	b9c3      	cbnz	r3, 401658 <adc_async_register_channel_buffer+0x48>
  401626:	2000      	movs	r0, #0
  401628:	e000      	b.n	40162c <adc_async_register_channel_buffer+0x1c>
  40162a:	2000      	movs	r0, #0
  40162c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4016c4 <adc_async_register_channel_buffer+0xb4>
  401630:	2266      	movs	r2, #102	; 0x66
  401632:	4649      	mov	r1, r9
  401634:	4c21      	ldr	r4, [pc, #132]	; (4016bc <adc_async_register_channel_buffer+0xac>)
  401636:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  401638:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  40163c:	2267      	movs	r2, #103	; 0x67
  40163e:	4649      	mov	r1, r9
  401640:	42b0      	cmp	r0, r6
  401642:	bf34      	ite	cc
  401644:	2000      	movcc	r0, #0
  401646:	2001      	movcs	r0, #1
  401648:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  40164a:	6a29      	ldr	r1, [r5, #32]
  40164c:	5d8b      	ldrb	r3, [r1, r6]
  40164e:	2bff      	cmp	r3, #255	; 0xff
  401650:	d12b      	bne.n	4016aa <adc_async_register_channel_buffer+0x9a>
  401652:	2400      	movs	r4, #0
  401654:	4623      	mov	r3, r4
  401656:	e003      	b.n	401660 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  401658:	2001      	movs	r0, #1
  40165a:	e7e7      	b.n	40162c <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  40165c:	3301      	adds	r3, #1
  40165e:	b2db      	uxtb	r3, r3
  401660:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  401664:	4293      	cmp	r3, r2
  401666:	d805      	bhi.n	401674 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  401668:	5cca      	ldrb	r2, [r1, r3]
  40166a:	2aff      	cmp	r2, #255	; 0xff
  40166c:	d0f6      	beq.n	40165c <adc_async_register_channel_buffer+0x4c>
			index++;
  40166e:	3401      	adds	r4, #1
  401670:	b2e4      	uxtb	r4, r4
  401672:	e7f3      	b.n	40165c <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  401674:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  401678:	429c      	cmp	r4, r3
  40167a:	d819      	bhi.n	4016b0 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  40167c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  40167e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  401682:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  401686:	4448      	add	r0, r9
  401688:	463a      	mov	r2, r7
  40168a:	4641      	mov	r1, r8
  40168c:	3004      	adds	r0, #4
  40168e:	4b0c      	ldr	r3, [pc, #48]	; (4016c0 <adc_async_register_channel_buffer+0xb0>)
  401690:	4798      	blx	r3
  401692:	4602      	mov	r2, r0
  401694:	b978      	cbnz	r0, 4016b6 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  401696:	6a2b      	ldr	r3, [r5, #32]
  401698:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  40169a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40169c:	4499      	add	r9, r3
  40169e:	2300      	movs	r3, #0
  4016a0:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  4016a4:	4610      	mov	r0, r2
  4016a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  4016aa:	f06f 020c 	mvn.w	r2, #12
  4016ae:	e7f9      	b.n	4016a4 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  4016b0:	f06f 021b 	mvn.w	r2, #27
  4016b4:	e7f6      	b.n	4016a4 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  4016b6:	f06f 020c 	mvn.w	r2, #12
  4016ba:	e7f3      	b.n	4016a4 <adc_async_register_channel_buffer+0x94>
  4016bc:	00401cbd 	.word	0x00401cbd
  4016c0:	00401d1d 	.word	0x00401d1d
  4016c4:	00407924 	.word	0x00407924

004016c8 <adc_async_enable_channel>:
{
  4016c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4016ca:	460d      	mov	r5, r1
	ASSERT(descr);
  4016cc:	4f0b      	ldr	r7, [pc, #44]	; (4016fc <adc_async_enable_channel+0x34>)
  4016ce:	4604      	mov	r4, r0
  4016d0:	2283      	movs	r2, #131	; 0x83
  4016d2:	4639      	mov	r1, r7
  4016d4:	3000      	adds	r0, #0
  4016d6:	bf18      	it	ne
  4016d8:	2001      	movne	r0, #1
  4016da:	4e09      	ldr	r6, [pc, #36]	; (401700 <adc_async_enable_channel+0x38>)
  4016dc:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  4016de:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  4016e2:	2284      	movs	r2, #132	; 0x84
  4016e4:	4639      	mov	r1, r7
  4016e6:	42a8      	cmp	r0, r5
  4016e8:	bf34      	ite	cc
  4016ea:	2000      	movcc	r0, #0
  4016ec:	2001      	movcs	r0, #1
  4016ee:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  4016f0:	4629      	mov	r1, r5
  4016f2:	4620      	mov	r0, r4
  4016f4:	4b03      	ldr	r3, [pc, #12]	; (401704 <adc_async_enable_channel+0x3c>)
  4016f6:	4798      	blx	r3
}
  4016f8:	2000      	movs	r0, #0
  4016fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4016fc:	00407924 	.word	0x00407924
  401700:	00401cbd 	.word	0x00401cbd
  401704:	00402065 	.word	0x00402065

00401708 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401708:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  40170c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40170e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401710:	f3bf 8f5f 	dmb	sy
  401714:	4770      	bx	lr

00401716 <atomic_leave_critical>:
  401716:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40171a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  40171c:	f383 8810 	msr	PRIMASK, r3
  401720:	4770      	bx	lr
	...

00401724 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  401724:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  401726:	4b02      	ldr	r3, [pc, #8]	; (401730 <delay_init+0xc>)
  401728:	6018      	str	r0, [r3, #0]
  40172a:	4b02      	ldr	r3, [pc, #8]	; (401734 <delay_init+0x10>)
  40172c:	4798      	blx	r3
  40172e:	bd08      	pop	{r3, pc}
  401730:	2040031c 	.word	0x2040031c
  401734:	00402875 	.word	0x00402875

00401738 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  401738:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
  40173a:	4b04      	ldr	r3, [pc, #16]	; (40174c <delay_us+0x14>)
  40173c:	681c      	ldr	r4, [r3, #0]
  40173e:	4b04      	ldr	r3, [pc, #16]	; (401750 <delay_us+0x18>)
  401740:	4798      	blx	r3
  401742:	4601      	mov	r1, r0
  401744:	4620      	mov	r0, r4
  401746:	4b03      	ldr	r3, [pc, #12]	; (401754 <delay_us+0x1c>)
  401748:	4798      	blx	r3
  40174a:	bd10      	pop	{r4, pc}
  40174c:	2040031c 	.word	0x2040031c
  401750:	00402075 	.word	0x00402075
  401754:	00402881 	.word	0x00402881

00401758 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  401758:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  40175a:	2504      	movs	r5, #4
  40175c:	2400      	movs	r4, #0

	while (upper >= lower) {
  40175e:	e007      	b.n	401770 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  401760:	4a0d      	ldr	r2, [pc, #52]	; (401798 <process_ext_irq+0x40>)
  401762:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  401766:	b1b3      	cbz	r3, 401796 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  401768:	4798      	blx	r3
  40176a:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  40176c:	3a01      	subs	r2, #1
  40176e:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  401770:	42ac      	cmp	r4, r5
  401772:	d810      	bhi.n	401796 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  401774:	192b      	adds	r3, r5, r4
  401776:	105b      	asrs	r3, r3, #1
  401778:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  40177a:	2a03      	cmp	r2, #3
  40177c:	d80b      	bhi.n	401796 <process_ext_irq+0x3e>
  40177e:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  401780:	4905      	ldr	r1, [pc, #20]	; (401798 <process_ext_irq+0x40>)
  401782:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  401786:	6849      	ldr	r1, [r1, #4]
  401788:	4281      	cmp	r1, r0
  40178a:	d0e9      	beq.n	401760 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  40178c:	4281      	cmp	r1, r0
  40178e:	d2ed      	bcs.n	40176c <process_ext_irq+0x14>
			lower = middle + 1;
  401790:	3201      	adds	r2, #1
  401792:	b2d4      	uxtb	r4, r2
  401794:	e7ec      	b.n	401770 <process_ext_irq+0x18>
  401796:	bd38      	pop	{r3, r4, r5, pc}
  401798:	20400320 	.word	0x20400320

0040179c <ext_irq_init>:
{
  40179c:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40179e:	2300      	movs	r3, #0
  4017a0:	e00a      	b.n	4017b8 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  4017a2:	4a08      	ldr	r2, [pc, #32]	; (4017c4 <ext_irq_init+0x28>)
  4017a4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  4017a8:	f04f 30ff 	mov.w	r0, #4294967295
  4017ac:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  4017ae:	2100      	movs	r1, #0
  4017b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4017b4:	3301      	adds	r3, #1
  4017b6:	b29b      	uxth	r3, r3
  4017b8:	2b03      	cmp	r3, #3
  4017ba:	d9f2      	bls.n	4017a2 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  4017bc:	4802      	ldr	r0, [pc, #8]	; (4017c8 <ext_irq_init+0x2c>)
  4017be:	4b03      	ldr	r3, [pc, #12]	; (4017cc <ext_irq_init+0x30>)
  4017c0:	4798      	blx	r3
}
  4017c2:	bd08      	pop	{r3, pc}
  4017c4:	20400320 	.word	0x20400320
  4017c8:	00401759 	.word	0x00401759
  4017cc:	004023dd 	.word	0x004023dd

004017d0 <ext_irq_register>:
{
  4017d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4017d2:	b083      	sub	sp, #12
  4017d4:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  4017d6:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  4017d8:	2b03      	cmp	r3, #3
  4017da:	d80e      	bhi.n	4017fa <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  4017dc:	4618      	mov	r0, r3
  4017de:	4a2e      	ldr	r2, [pc, #184]	; (401898 <ext_irq_register+0xc8>)
  4017e0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4017e4:	6852      	ldr	r2, [r2, #4]
  4017e6:	42aa      	cmp	r2, r5
  4017e8:	d002      	beq.n	4017f0 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  4017ea:	3301      	adds	r3, #1
  4017ec:	b2db      	uxtb	r3, r3
  4017ee:	e7f3      	b.n	4017d8 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  4017f0:	4b29      	ldr	r3, [pc, #164]	; (401898 <ext_irq_register+0xc8>)
  4017f2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  4017f6:	2701      	movs	r7, #1
			break;
  4017f8:	e000      	b.n	4017fc <ext_irq_register+0x2c>
	bool    found = false;
  4017fa:	2700      	movs	r7, #0
	if (NULL == cb) {
  4017fc:	b159      	cbz	r1, 401816 <ext_irq_register+0x46>
	if (!found) {
  4017fe:	2f00      	cmp	r7, #0
  401800:	d13d      	bne.n	40187e <ext_irq_register+0xae>
  401802:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401804:	2e03      	cmp	r6, #3
  401806:	d813      	bhi.n	401830 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  401808:	4b23      	ldr	r3, [pc, #140]	; (401898 <ext_irq_register+0xc8>)
  40180a:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  40180e:	b143      	cbz	r3, 401822 <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401810:	3601      	adds	r6, #1
  401812:	b2f6      	uxtb	r6, r6
  401814:	e7f6      	b.n	401804 <ext_irq_register+0x34>
		if (!found) {
  401816:	2f00      	cmp	r7, #0
  401818:	d038      	beq.n	40188c <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  40181a:	4628      	mov	r0, r5
  40181c:	4b1f      	ldr	r3, [pc, #124]	; (40189c <ext_irq_register+0xcc>)
  40181e:	4798      	blx	r3
  401820:	e032      	b.n	401888 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  401822:	4b1d      	ldr	r3, [pc, #116]	; (401898 <ext_irq_register+0xc8>)
  401824:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  401828:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40182c:	605d      	str	r5, [r3, #4]
				found           = true;
  40182e:	2701      	movs	r7, #1
  401830:	2300      	movs	r3, #0
  401832:	e001      	b.n	401838 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  401834:	3301      	adds	r3, #1
  401836:	b2db      	uxtb	r3, r3
  401838:	2b03      	cmp	r3, #3
  40183a:	bf98      	it	ls
  40183c:	2e03      	cmpls	r6, #3
  40183e:	d81e      	bhi.n	40187e <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  401840:	46b6      	mov	lr, r6
  401842:	4a15      	ldr	r2, [pc, #84]	; (401898 <ext_irq_register+0xc8>)
  401844:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  401848:	6848      	ldr	r0, [r1, #4]
  40184a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40184e:	6852      	ldr	r2, [r2, #4]
  401850:	4290      	cmp	r0, r2
  401852:	d2ef      	bcs.n	401834 <ext_irq_register+0x64>
  401854:	f1b2 3fff 	cmp.w	r2, #4294967295
  401858:	d0ec      	beq.n	401834 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  40185a:	4c0f      	ldr	r4, [pc, #60]	; (401898 <ext_irq_register+0xc8>)
  40185c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  401860:	e892 0003 	ldmia.w	r2, {r0, r1}
  401864:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  401868:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  40186c:	e894 0003 	ldmia.w	r4, {r0, r1}
  401870:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  401874:	e89d 0003 	ldmia.w	sp, {r0, r1}
  401878:	e884 0003 	stmia.w	r4, {r0, r1}
  40187c:	e7da      	b.n	401834 <ext_irq_register+0x64>
	if (!found) {
  40187e:	b147      	cbz	r7, 401892 <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  401880:	2101      	movs	r1, #1
  401882:	4628      	mov	r0, r5
  401884:	4b05      	ldr	r3, [pc, #20]	; (40189c <ext_irq_register+0xcc>)
  401886:	4798      	blx	r3
}
  401888:	b003      	add	sp, #12
  40188a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  40188c:	f06f 000c 	mvn.w	r0, #12
  401890:	e7fa      	b.n	401888 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  401892:	f06f 000c 	mvn.w	r0, #12
  401896:	e7f7      	b.n	401888 <ext_irq_register+0xb8>
  401898:	20400320 	.word	0x20400320
  40189c:	0040240d 	.word	0x0040240d

004018a0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4018a0:	b570      	push	{r4, r5, r6, lr}
  4018a2:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4018a4:	4604      	mov	r4, r0
  4018a6:	460d      	mov	r5, r1
  4018a8:	2800      	cmp	r0, #0
  4018aa:	bf18      	it	ne
  4018ac:	2900      	cmpne	r1, #0
  4018ae:	bf14      	ite	ne
  4018b0:	2001      	movne	r0, #1
  4018b2:	2000      	moveq	r0, #0
  4018b4:	2234      	movs	r2, #52	; 0x34
  4018b6:	4904      	ldr	r1, [pc, #16]	; (4018c8 <io_write+0x28>)
  4018b8:	4b04      	ldr	r3, [pc, #16]	; (4018cc <io_write+0x2c>)
  4018ba:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  4018bc:	6823      	ldr	r3, [r4, #0]
  4018be:	4632      	mov	r2, r6
  4018c0:	4629      	mov	r1, r5
  4018c2:	4620      	mov	r0, r4
  4018c4:	4798      	blx	r3
}
  4018c6:	bd70      	pop	{r4, r5, r6, pc}
  4018c8:	00407940 	.word	0x00407940
  4018cc:	00401cbd 	.word	0x00401cbd

004018d0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4018d0:	b570      	push	{r4, r5, r6, lr}
  4018d2:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4018d4:	4604      	mov	r4, r0
  4018d6:	460d      	mov	r5, r1
  4018d8:	2800      	cmp	r0, #0
  4018da:	bf18      	it	ne
  4018dc:	2900      	cmpne	r1, #0
  4018de:	bf14      	ite	ne
  4018e0:	2001      	movne	r0, #1
  4018e2:	2000      	moveq	r0, #0
  4018e4:	223d      	movs	r2, #61	; 0x3d
  4018e6:	4904      	ldr	r1, [pc, #16]	; (4018f8 <io_read+0x28>)
  4018e8:	4b04      	ldr	r3, [pc, #16]	; (4018fc <io_read+0x2c>)
  4018ea:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  4018ec:	6863      	ldr	r3, [r4, #4]
  4018ee:	4632      	mov	r2, r6
  4018f0:	4629      	mov	r1, r5
  4018f2:	4620      	mov	r0, r4
  4018f4:	4798      	blx	r3
}
  4018f6:	bd70      	pop	{r4, r5, r6, pc}
  4018f8:	00407940 	.word	0x00407940
  4018fc:	00401cbd 	.word	0x00401cbd

00401900 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  401900:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  401902:	6943      	ldr	r3, [r0, #20]
  401904:	b103      	cbz	r3, 401908 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  401906:	4798      	blx	r3
  401908:	bd08      	pop	{r3, pc}

0040190a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  40190a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  40190c:	6983      	ldr	r3, [r0, #24]
  40190e:	b103      	cbz	r3, 401912 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  401910:	4798      	blx	r3
  401912:	bd08      	pop	{r3, pc}

00401914 <pwm_init>:
{
  401914:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401916:	4604      	mov	r4, r0
  401918:	460d      	mov	r5, r1
  40191a:	2800      	cmp	r0, #0
  40191c:	bf18      	it	ne
  40191e:	2900      	cmpne	r1, #0
  401920:	bf14      	ite	ne
  401922:	2001      	movne	r0, #1
  401924:	2000      	moveq	r0, #0
  401926:	2233      	movs	r2, #51	; 0x33
  401928:	4906      	ldr	r1, [pc, #24]	; (401944 <pwm_init+0x30>)
  40192a:	4b07      	ldr	r3, [pc, #28]	; (401948 <pwm_init+0x34>)
  40192c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  40192e:	4629      	mov	r1, r5
  401930:	4620      	mov	r0, r4
  401932:	4b06      	ldr	r3, [pc, #24]	; (40194c <pwm_init+0x38>)
  401934:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  401936:	4b06      	ldr	r3, [pc, #24]	; (401950 <pwm_init+0x3c>)
  401938:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  40193a:	4b06      	ldr	r3, [pc, #24]	; (401954 <pwm_init+0x40>)
  40193c:	6063      	str	r3, [r4, #4]
}
  40193e:	2000      	movs	r0, #0
  401940:	bd38      	pop	{r3, r4, r5, pc}
  401942:	bf00      	nop
  401944:	00407954 	.word	0x00407954
  401948:	00401cbd 	.word	0x00401cbd
  40194c:	004025ad 	.word	0x004025ad
  401950:	00401901 	.word	0x00401901
  401954:	0040190b 	.word	0x0040190b

00401958 <pwm_enable>:
{
  401958:	b510      	push	{r4, lr}
	ASSERT(descr);
  40195a:	4604      	mov	r4, r0
  40195c:	224a      	movs	r2, #74	; 0x4a
  40195e:	4909      	ldr	r1, [pc, #36]	; (401984 <pwm_enable+0x2c>)
  401960:	3000      	adds	r0, #0
  401962:	bf18      	it	ne
  401964:	2001      	movne	r0, #1
  401966:	4b08      	ldr	r3, [pc, #32]	; (401988 <pwm_enable+0x30>)
  401968:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  40196a:	4620      	mov	r0, r4
  40196c:	4b07      	ldr	r3, [pc, #28]	; (40198c <pwm_enable+0x34>)
  40196e:	4798      	blx	r3
  401970:	b920      	cbnz	r0, 40197c <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  401972:	4620      	mov	r0, r4
  401974:	4b06      	ldr	r3, [pc, #24]	; (401990 <pwm_enable+0x38>)
  401976:	4798      	blx	r3
	return ERR_NONE;
  401978:	2000      	movs	r0, #0
  40197a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  40197c:	f06f 0010 	mvn.w	r0, #16
}
  401980:	bd10      	pop	{r4, pc}
  401982:	bf00      	nop
  401984:	00407954 	.word	0x00407954
  401988:	00401cbd 	.word	0x00401cbd
  40198c:	004027cd 	.word	0x004027cd
  401990:	004026e5 	.word	0x004026e5

00401994 <pwm_disable>:
{
  401994:	b510      	push	{r4, lr}
	ASSERT(descr);
  401996:	4604      	mov	r4, r0
  401998:	2258      	movs	r2, #88	; 0x58
  40199a:	4909      	ldr	r1, [pc, #36]	; (4019c0 <pwm_disable+0x2c>)
  40199c:	3000      	adds	r0, #0
  40199e:	bf18      	it	ne
  4019a0:	2001      	movne	r0, #1
  4019a2:	4b08      	ldr	r3, [pc, #32]	; (4019c4 <pwm_disable+0x30>)
  4019a4:	4798      	blx	r3
	if (!_pwm_is_enabled(&descr->device)) {
  4019a6:	4620      	mov	r0, r4
  4019a8:	4b07      	ldr	r3, [pc, #28]	; (4019c8 <pwm_disable+0x34>)
  4019aa:	4798      	blx	r3
  4019ac:	b120      	cbz	r0, 4019b8 <pwm_disable+0x24>
	_pwm_disable(&descr->device);
  4019ae:	4620      	mov	r0, r4
  4019b0:	4b06      	ldr	r3, [pc, #24]	; (4019cc <pwm_disable+0x38>)
  4019b2:	4798      	blx	r3
	return ERR_NONE;
  4019b4:	2000      	movs	r0, #0
  4019b6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4019b8:	f06f 0010 	mvn.w	r0, #16
}
  4019bc:	bd10      	pop	{r4, pc}
  4019be:	bf00      	nop
  4019c0:	00407954 	.word	0x00407954
  4019c4:	00401cbd 	.word	0x00401cbd
  4019c8:	004027cd 	.word	0x004027cd
  4019cc:	00402729 	.word	0x00402729

004019d0 <pwm_register_callback>:
{
  4019d0:	b570      	push	{r4, r5, r6, lr}
	switch (type) {
  4019d2:	460d      	mov	r5, r1
  4019d4:	b121      	cbz	r1, 4019e0 <pwm_register_callback+0x10>
  4019d6:	2901      	cmp	r1, #1
  4019d8:	d015      	beq.n	401a06 <pwm_register_callback+0x36>
		return ERR_INVALID_ARG;
  4019da:	f06f 000c 	mvn.w	r0, #12
}
  4019de:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.period = cb;
  4019e0:	6142      	str	r2, [r0, #20]
  4019e2:	4616      	mov	r6, r2
  4019e4:	4604      	mov	r4, r0
	ASSERT(descr);
  4019e6:	2272      	movs	r2, #114	; 0x72
  4019e8:	4908      	ldr	r1, [pc, #32]	; (401a0c <pwm_register_callback+0x3c>)
  4019ea:	3000      	adds	r0, #0
  4019ec:	bf18      	it	ne
  4019ee:	2001      	movne	r0, #1
  4019f0:	4b07      	ldr	r3, [pc, #28]	; (401a10 <pwm_register_callback+0x40>)
  4019f2:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
  4019f4:	1c32      	adds	r2, r6, #0
  4019f6:	bf18      	it	ne
  4019f8:	2201      	movne	r2, #1
  4019fa:	4629      	mov	r1, r5
  4019fc:	4620      	mov	r0, r4
  4019fe:	4b05      	ldr	r3, [pc, #20]	; (401a14 <pwm_register_callback+0x44>)
  401a00:	4798      	blx	r3
	return ERR_NONE;
  401a02:	2000      	movs	r0, #0
  401a04:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
  401a06:	6182      	str	r2, [r0, #24]
		break;
  401a08:	e7eb      	b.n	4019e2 <pwm_register_callback+0x12>
  401a0a:	bf00      	nop
  401a0c:	00407954 	.word	0x00407954
  401a10:	00401cbd 	.word	0x00401cbd
  401a14:	004027fd 	.word	0x004027fd

00401a18 <pwm_set_parameters>:
{
  401a18:	b570      	push	{r4, r5, r6, lr}
  401a1a:	460d      	mov	r5, r1
  401a1c:	4616      	mov	r6, r2
	ASSERT(descr);
  401a1e:	4604      	mov	r4, r0
  401a20:	227c      	movs	r2, #124	; 0x7c
  401a22:	4906      	ldr	r1, [pc, #24]	; (401a3c <pwm_set_parameters+0x24>)
  401a24:	3000      	adds	r0, #0
  401a26:	bf18      	it	ne
  401a28:	2001      	movne	r0, #1
  401a2a:	4b05      	ldr	r3, [pc, #20]	; (401a40 <pwm_set_parameters+0x28>)
  401a2c:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  401a2e:	4632      	mov	r2, r6
  401a30:	4629      	mov	r1, r5
  401a32:	4620      	mov	r0, r4
  401a34:	4b03      	ldr	r3, [pc, #12]	; (401a44 <pwm_set_parameters+0x2c>)
  401a36:	4798      	blx	r3
}
  401a38:	2000      	movs	r0, #0
  401a3a:	bd70      	pop	{r4, r5, r6, pc}
  401a3c:	00407954 	.word	0x00407954
  401a40:	00401cbd 	.word	0x00401cbd
  401a44:	0040276d 	.word	0x0040276d

00401a48 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  401a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  401a4a:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  401a4c:	b117      	cbz	r7, 401a54 <timer_add_timer_task+0xc>
  401a4e:	463c      	mov	r4, r7
  401a50:	2600      	movs	r6, #0
  401a52:	e00b      	b.n	401a6c <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  401a54:	4b0e      	ldr	r3, [pc, #56]	; (401a90 <timer_add_timer_task+0x48>)
  401a56:	4798      	blx	r3
		return;
  401a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  401a5a:	68a5      	ldr	r5, [r4, #8]
  401a5c:	442b      	add	r3, r5
  401a5e:	1a9b      	subs	r3, r3, r2
  401a60:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  401a62:	688d      	ldr	r5, [r1, #8]
  401a64:	42ab      	cmp	r3, r5
  401a66:	d209      	bcs.n	401a7c <timer_add_timer_task+0x34>
			break;
		prev = it;
  401a68:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  401a6a:	6824      	ldr	r4, [r4, #0]
  401a6c:	b134      	cbz	r4, 401a7c <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  401a6e:	6863      	ldr	r3, [r4, #4]
  401a70:	4293      	cmp	r3, r2
  401a72:	d8f2      	bhi.n	401a5a <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  401a74:	68a5      	ldr	r5, [r4, #8]
  401a76:	1a9b      	subs	r3, r3, r2
  401a78:	442b      	add	r3, r5
  401a7a:	e7f2      	b.n	401a62 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  401a7c:	42bc      	cmp	r4, r7
  401a7e:	d003      	beq.n	401a88 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  401a80:	4630      	mov	r0, r6
  401a82:	4b04      	ldr	r3, [pc, #16]	; (401a94 <timer_add_timer_task+0x4c>)
  401a84:	4798      	blx	r3
  401a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  401a88:	4b01      	ldr	r3, [pc, #4]	; (401a90 <timer_add_timer_task+0x48>)
  401a8a:	4798      	blx	r3
  401a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a8e:	bf00      	nop
  401a90:	00401cd9 	.word	0x00401cd9
  401a94:	00401d05 	.word	0x00401d05

00401a98 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  401a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401a9a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  401a9c:	6906      	ldr	r6, [r0, #16]
  401a9e:	3601      	adds	r6, #1
  401aa0:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  401aa2:	7e03      	ldrb	r3, [r0, #24]
  401aa4:	f013 0f01 	tst.w	r3, #1
  401aa8:	d105      	bne.n	401ab6 <timer_process_counted+0x1e>
  401aaa:	7e03      	ldrb	r3, [r0, #24]
  401aac:	f013 0f02 	tst.w	r3, #2
  401ab0:	d101      	bne.n	401ab6 <timer_process_counted+0x1e>
  401ab2:	4605      	mov	r5, r0
  401ab4:	e009      	b.n	401aca <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  401ab6:	7e03      	ldrb	r3, [r0, #24]
  401ab8:	f043 0302 	orr.w	r3, r3, #2
  401abc:	7603      	strb	r3, [r0, #24]
		return;
  401abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401ac0:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  401ac2:	68e3      	ldr	r3, [r4, #12]
  401ac4:	4620      	mov	r0, r4
  401ac6:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  401ac8:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  401aca:	b19c      	cbz	r4, 401af4 <timer_process_counted+0x5c>
  401acc:	6863      	ldr	r3, [r4, #4]
  401ace:	1af3      	subs	r3, r6, r3
  401ad0:	68a2      	ldr	r2, [r4, #8]
  401ad2:	4293      	cmp	r3, r2
  401ad4:	d30e      	bcc.n	401af4 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  401ad6:	f105 0714 	add.w	r7, r5, #20
  401ada:	4638      	mov	r0, r7
  401adc:	4b06      	ldr	r3, [pc, #24]	; (401af8 <timer_process_counted+0x60>)
  401ade:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  401ae0:	7c23      	ldrb	r3, [r4, #16]
  401ae2:	2b01      	cmp	r3, #1
  401ae4:	d1ec      	bne.n	401ac0 <timer_process_counted+0x28>
			tmp->time_label = time;
  401ae6:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  401ae8:	4632      	mov	r2, r6
  401aea:	4621      	mov	r1, r4
  401aec:	4638      	mov	r0, r7
  401aee:	4b03      	ldr	r3, [pc, #12]	; (401afc <timer_process_counted+0x64>)
  401af0:	4798      	blx	r3
  401af2:	e7e5      	b.n	401ac0 <timer_process_counted+0x28>
  401af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401af6:	bf00      	nop
  401af8:	00401d0d 	.word	0x00401d0d
  401afc:	00401a49 	.word	0x00401a49

00401b00 <timer_init>:
{
  401b00:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401b02:	4604      	mov	r4, r0
  401b04:	460d      	mov	r5, r1
  401b06:	2800      	cmp	r0, #0
  401b08:	bf18      	it	ne
  401b0a:	2900      	cmpne	r1, #0
  401b0c:	bf14      	ite	ne
  401b0e:	2001      	movne	r0, #1
  401b10:	2000      	moveq	r0, #0
  401b12:	223b      	movs	r2, #59	; 0x3b
  401b14:	4905      	ldr	r1, [pc, #20]	; (401b2c <timer_init+0x2c>)
  401b16:	4b06      	ldr	r3, [pc, #24]	; (401b30 <timer_init+0x30>)
  401b18:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  401b1a:	4629      	mov	r1, r5
  401b1c:	4620      	mov	r0, r4
  401b1e:	4b05      	ldr	r3, [pc, #20]	; (401b34 <timer_init+0x34>)
  401b20:	4798      	blx	r3
	descr->time                           = 0;
  401b22:	2000      	movs	r0, #0
  401b24:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  401b26:	4b04      	ldr	r3, [pc, #16]	; (401b38 <timer_init+0x38>)
  401b28:	6023      	str	r3, [r4, #0]
}
  401b2a:	bd38      	pop	{r3, r4, r5, pc}
  401b2c:	0040796c 	.word	0x0040796c
  401b30:	00401cbd 	.word	0x00401cbd
  401b34:	00402939 	.word	0x00402939
  401b38:	00401a99 	.word	0x00401a99

00401b3c <timer_start>:
{
  401b3c:	b510      	push	{r4, lr}
	ASSERT(descr);
  401b3e:	4604      	mov	r4, r0
  401b40:	2253      	movs	r2, #83	; 0x53
  401b42:	4909      	ldr	r1, [pc, #36]	; (401b68 <timer_start+0x2c>)
  401b44:	3000      	adds	r0, #0
  401b46:	bf18      	it	ne
  401b48:	2001      	movne	r0, #1
  401b4a:	4b08      	ldr	r3, [pc, #32]	; (401b6c <timer_start+0x30>)
  401b4c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  401b4e:	4620      	mov	r0, r4
  401b50:	4b07      	ldr	r3, [pc, #28]	; (401b70 <timer_start+0x34>)
  401b52:	4798      	blx	r3
  401b54:	b920      	cbnz	r0, 401b60 <timer_start+0x24>
	_timer_start(&descr->device);
  401b56:	4620      	mov	r0, r4
  401b58:	4b06      	ldr	r3, [pc, #24]	; (401b74 <timer_start+0x38>)
  401b5a:	4798      	blx	r3
	return ERR_NONE;
  401b5c:	2000      	movs	r0, #0
  401b5e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401b60:	f06f 0010 	mvn.w	r0, #16
}
  401b64:	bd10      	pop	{r4, pc}
  401b66:	bf00      	nop
  401b68:	0040796c 	.word	0x0040796c
  401b6c:	00401cbd 	.word	0x00401cbd
  401b70:	00402a21 	.word	0x00402a21
  401b74:	00402a15 	.word	0x00402a15

00401b78 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401b7a:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401b7c:	4605      	mov	r5, r0
  401b7e:	460f      	mov	r7, r1
  401b80:	2800      	cmp	r0, #0
  401b82:	bf18      	it	ne
  401b84:	2900      	cmpne	r1, #0
  401b86:	d002      	beq.n	401b8e <usart_sync_write+0x16>
  401b88:	bb0a      	cbnz	r2, 401bce <usart_sync_write+0x56>
  401b8a:	2000      	movs	r0, #0
  401b8c:	e000      	b.n	401b90 <usart_sync_write+0x18>
  401b8e:	2000      	movs	r0, #0
  401b90:	22f1      	movs	r2, #241	; 0xf1
  401b92:	4910      	ldr	r1, [pc, #64]	; (401bd4 <usart_sync_write+0x5c>)
  401b94:	4b10      	ldr	r3, [pc, #64]	; (401bd8 <usart_sync_write+0x60>)
  401b96:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  401b98:	f105 0408 	add.w	r4, r5, #8
  401b9c:	4620      	mov	r0, r4
  401b9e:	4b0f      	ldr	r3, [pc, #60]	; (401bdc <usart_sync_write+0x64>)
  401ba0:	4798      	blx	r3
  401ba2:	2800      	cmp	r0, #0
  401ba4:	d0f8      	beq.n	401b98 <usart_sync_write+0x20>
  401ba6:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  401ba8:	5d79      	ldrb	r1, [r7, r5]
  401baa:	4620      	mov	r0, r4
  401bac:	4b0c      	ldr	r3, [pc, #48]	; (401be0 <usart_sync_write+0x68>)
  401bae:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  401bb0:	4620      	mov	r0, r4
  401bb2:	4b0a      	ldr	r3, [pc, #40]	; (401bdc <usart_sync_write+0x64>)
  401bb4:	4798      	blx	r3
  401bb6:	2800      	cmp	r0, #0
  401bb8:	d0fa      	beq.n	401bb0 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  401bba:	3501      	adds	r5, #1
  401bbc:	42b5      	cmp	r5, r6
  401bbe:	d3f3      	bcc.n	401ba8 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  401bc0:	4620      	mov	r0, r4
  401bc2:	4b08      	ldr	r3, [pc, #32]	; (401be4 <usart_sync_write+0x6c>)
  401bc4:	4798      	blx	r3
  401bc6:	2800      	cmp	r0, #0
  401bc8:	d0fa      	beq.n	401bc0 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  401bca:	4628      	mov	r0, r5
  401bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  401bce:	2001      	movs	r0, #1
  401bd0:	e7de      	b.n	401b90 <usart_sync_write+0x18>
  401bd2:	bf00      	nop
  401bd4:	00407984 	.word	0x00407984
  401bd8:	00401cbd 	.word	0x00401cbd
  401bdc:	00402bfd 	.word	0x00402bfd
  401be0:	00402bb5 	.word	0x00402bb5
  401be4:	00402c25 	.word	0x00402c25

00401be8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401bec:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401bee:	4605      	mov	r5, r0
  401bf0:	4688      	mov	r8, r1
  401bf2:	2800      	cmp	r0, #0
  401bf4:	bf18      	it	ne
  401bf6:	2900      	cmpne	r1, #0
  401bf8:	d002      	beq.n	401c00 <usart_sync_read+0x18>
  401bfa:	b9d2      	cbnz	r2, 401c32 <usart_sync_read+0x4a>
  401bfc:	2000      	movs	r0, #0
  401bfe:	e000      	b.n	401c02 <usart_sync_read+0x1a>
  401c00:	2000      	movs	r0, #0
  401c02:	f44f 7286 	mov.w	r2, #268	; 0x10c
  401c06:	490c      	ldr	r1, [pc, #48]	; (401c38 <usart_sync_read+0x50>)
  401c08:	4b0c      	ldr	r3, [pc, #48]	; (401c3c <usart_sync_read+0x54>)
  401c0a:	4798      	blx	r3
	uint32_t                      offset = 0;
  401c0c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  401c0e:	f105 0408 	add.w	r4, r5, #8
  401c12:	4620      	mov	r0, r4
  401c14:	4b0a      	ldr	r3, [pc, #40]	; (401c40 <usart_sync_read+0x58>)
  401c16:	4798      	blx	r3
  401c18:	2800      	cmp	r0, #0
  401c1a:	d0f8      	beq.n	401c0e <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  401c1c:	4620      	mov	r0, r4
  401c1e:	4b09      	ldr	r3, [pc, #36]	; (401c44 <usart_sync_read+0x5c>)
  401c20:	4798      	blx	r3
  401c22:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  401c26:	3601      	adds	r6, #1
  401c28:	42be      	cmp	r6, r7
  401c2a:	d3f0      	bcc.n	401c0e <usart_sync_read+0x26>

	return (int32_t)offset;
}
  401c2c:	4630      	mov	r0, r6
  401c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  401c32:	2001      	movs	r0, #1
  401c34:	e7e5      	b.n	401c02 <usart_sync_read+0x1a>
  401c36:	bf00      	nop
  401c38:	00407984 	.word	0x00407984
  401c3c:	00401cbd 	.word	0x00401cbd
  401c40:	00402c4d 	.word	0x00402c4d
  401c44:	00402bd9 	.word	0x00402bd9

00401c48 <usart_sync_init>:
{
  401c48:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401c4a:	4604      	mov	r4, r0
  401c4c:	460d      	mov	r5, r1
  401c4e:	2800      	cmp	r0, #0
  401c50:	bf18      	it	ne
  401c52:	2900      	cmpne	r1, #0
  401c54:	bf14      	ite	ne
  401c56:	2001      	movne	r0, #1
  401c58:	2000      	moveq	r0, #0
  401c5a:	2234      	movs	r2, #52	; 0x34
  401c5c:	4907      	ldr	r1, [pc, #28]	; (401c7c <usart_sync_init+0x34>)
  401c5e:	4b08      	ldr	r3, [pc, #32]	; (401c80 <usart_sync_init+0x38>)
  401c60:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  401c62:	4629      	mov	r1, r5
  401c64:	f104 0008 	add.w	r0, r4, #8
  401c68:	4b06      	ldr	r3, [pc, #24]	; (401c84 <usart_sync_init+0x3c>)
  401c6a:	4798      	blx	r3
	if (init_status) {
  401c6c:	4603      	mov	r3, r0
  401c6e:	b918      	cbnz	r0, 401c78 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  401c70:	4a05      	ldr	r2, [pc, #20]	; (401c88 <usart_sync_init+0x40>)
  401c72:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  401c74:	4a05      	ldr	r2, [pc, #20]	; (401c8c <usart_sync_init+0x44>)
  401c76:	6022      	str	r2, [r4, #0]
}
  401c78:	4618      	mov	r0, r3
  401c7a:	bd38      	pop	{r3, r4, r5, pc}
  401c7c:	00407984 	.word	0x00407984
  401c80:	00401cbd 	.word	0x00401cbd
  401c84:	00402b49 	.word	0x00402b49
  401c88:	00401be9 	.word	0x00401be9
  401c8c:	00401b79 	.word	0x00401b79

00401c90 <usart_sync_enable>:
{
  401c90:	b510      	push	{r4, lr}
	ASSERT(descr);
  401c92:	4604      	mov	r4, r0
  401c94:	2253      	movs	r2, #83	; 0x53
  401c96:	4906      	ldr	r1, [pc, #24]	; (401cb0 <usart_sync_enable+0x20>)
  401c98:	3000      	adds	r0, #0
  401c9a:	bf18      	it	ne
  401c9c:	2001      	movne	r0, #1
  401c9e:	4b05      	ldr	r3, [pc, #20]	; (401cb4 <usart_sync_enable+0x24>)
  401ca0:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  401ca2:	f104 0008 	add.w	r0, r4, #8
  401ca6:	4b04      	ldr	r3, [pc, #16]	; (401cb8 <usart_sync_enable+0x28>)
  401ca8:	4798      	blx	r3
}
  401caa:	2000      	movs	r0, #0
  401cac:	bd10      	pop	{r4, pc}
  401cae:	bf00      	nop
  401cb0:	00407984 	.word	0x00407984
  401cb4:	00401cbd 	.word	0x00401cbd
  401cb8:	00402b81 	.word	0x00402b81

00401cbc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401cbc:	b900      	cbnz	r0, 401cc0 <assert+0x4>
		__asm("BKPT #0");
  401cbe:	be00      	bkpt	0x0000
  401cc0:	4770      	bx	lr

00401cc2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  401cc2:	6803      	ldr	r3, [r0, #0]
  401cc4:	b11b      	cbz	r3, 401cce <is_list_element+0xc>
		if (it == element) {
  401cc6:	428b      	cmp	r3, r1
  401cc8:	d003      	beq.n	401cd2 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  401cca:	681b      	ldr	r3, [r3, #0]
  401ccc:	e7fa      	b.n	401cc4 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  401cce:	2000      	movs	r0, #0
  401cd0:	4770      	bx	lr
			return true;
  401cd2:	2001      	movs	r0, #1
}
  401cd4:	4770      	bx	lr
	...

00401cd8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  401cd8:	b538      	push	{r3, r4, r5, lr}
  401cda:	4604      	mov	r4, r0
  401cdc:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  401cde:	4b06      	ldr	r3, [pc, #24]	; (401cf8 <list_insert_as_head+0x20>)
  401ce0:	4798      	blx	r3
  401ce2:	f080 0001 	eor.w	r0, r0, #1
  401ce6:	2239      	movs	r2, #57	; 0x39
  401ce8:	4904      	ldr	r1, [pc, #16]	; (401cfc <list_insert_as_head+0x24>)
  401cea:	b2c0      	uxtb	r0, r0
  401cec:	4b04      	ldr	r3, [pc, #16]	; (401d00 <list_insert_as_head+0x28>)
  401cee:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  401cf0:	6823      	ldr	r3, [r4, #0]
  401cf2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  401cf4:	6025      	str	r5, [r4, #0]
  401cf6:	bd38      	pop	{r3, r4, r5, pc}
  401cf8:	00401cc3 	.word	0x00401cc3
  401cfc:	004079a0 	.word	0x004079a0
  401d00:	00401cbd 	.word	0x00401cbd

00401d04 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  401d04:	6803      	ldr	r3, [r0, #0]
  401d06:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  401d08:	6001      	str	r1, [r0, #0]
  401d0a:	4770      	bx	lr

00401d0c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  401d0c:	6803      	ldr	r3, [r0, #0]
  401d0e:	b11b      	cbz	r3, 401d18 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  401d10:	681a      	ldr	r2, [r3, #0]
  401d12:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  401d14:	4618      	mov	r0, r3
  401d16:	4770      	bx	lr
	}

	return NULL;
  401d18:	2000      	movs	r0, #0
}
  401d1a:	4770      	bx	lr

00401d1c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  401d1c:	b570      	push	{r4, r5, r6, lr}
  401d1e:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  401d20:	4604      	mov	r4, r0
  401d22:	460e      	mov	r6, r1
  401d24:	2800      	cmp	r0, #0
  401d26:	bf18      	it	ne
  401d28:	2900      	cmpne	r1, #0
  401d2a:	d002      	beq.n	401d32 <ringbuffer_init+0x16>
  401d2c:	b97a      	cbnz	r2, 401d4e <ringbuffer_init+0x32>
  401d2e:	2000      	movs	r0, #0
  401d30:	e000      	b.n	401d34 <ringbuffer_init+0x18>
  401d32:	2000      	movs	r0, #0
  401d34:	2228      	movs	r2, #40	; 0x28
  401d36:	4908      	ldr	r1, [pc, #32]	; (401d58 <ringbuffer_init+0x3c>)
  401d38:	4b08      	ldr	r3, [pc, #32]	; (401d5c <ringbuffer_init+0x40>)
  401d3a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  401d3c:	1e6b      	subs	r3, r5, #1
  401d3e:	421d      	tst	r5, r3
  401d40:	d107      	bne.n	401d52 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  401d42:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  401d44:	2000      	movs	r0, #0
  401d46:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  401d48:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  401d4a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  401d4c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  401d4e:	2001      	movs	r0, #1
  401d50:	e7f0      	b.n	401d34 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  401d52:	f06f 000c 	mvn.w	r0, #12
}
  401d56:	bd70      	pop	{r4, r5, r6, pc}
  401d58:	004079c0 	.word	0x004079c0
  401d5c:	00401cbd 	.word	0x00401cbd

00401d60 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  401d60:	b538      	push	{r3, r4, r5, lr}
  401d62:	460d      	mov	r5, r1
	ASSERT(rb);
  401d64:	4604      	mov	r4, r0
  401d66:	2251      	movs	r2, #81	; 0x51
  401d68:	490b      	ldr	r1, [pc, #44]	; (401d98 <ringbuffer_put+0x38>)
  401d6a:	3000      	adds	r0, #0
  401d6c:	bf18      	it	ne
  401d6e:	2001      	movne	r0, #1
  401d70:	4b0a      	ldr	r3, [pc, #40]	; (401d9c <ringbuffer_put+0x3c>)
  401d72:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  401d74:	6822      	ldr	r2, [r4, #0]
  401d76:	68e3      	ldr	r3, [r4, #12]
  401d78:	6861      	ldr	r1, [r4, #4]
  401d7a:	400b      	ands	r3, r1
  401d7c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  401d7e:	68e3      	ldr	r3, [r4, #12]
  401d80:	68a2      	ldr	r2, [r4, #8]
  401d82:	1a9a      	subs	r2, r3, r2
  401d84:	6861      	ldr	r1, [r4, #4]
  401d86:	428a      	cmp	r2, r1
  401d88:	d901      	bls.n	401d8e <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  401d8a:	1a59      	subs	r1, r3, r1
  401d8c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  401d8e:	3301      	adds	r3, #1
  401d90:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  401d92:	2000      	movs	r0, #0
  401d94:	bd38      	pop	{r3, r4, r5, pc}
  401d96:	bf00      	nop
  401d98:	004079c0 	.word	0x004079c0
  401d9c:	00401cbd 	.word	0x00401cbd

00401da0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  401da0:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  401da2:	4a06      	ldr	r2, [pc, #24]	; (401dbc <_sbrk+0x1c>)
  401da4:	6812      	ldr	r2, [r2, #0]
  401da6:	b122      	cbz	r2, 401db2 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401da8:	4a04      	ldr	r2, [pc, #16]	; (401dbc <_sbrk+0x1c>)
  401daa:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  401dac:	4403      	add	r3, r0
  401dae:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  401db0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401db2:	4903      	ldr	r1, [pc, #12]	; (401dc0 <_sbrk+0x20>)
  401db4:	4a01      	ldr	r2, [pc, #4]	; (401dbc <_sbrk+0x1c>)
  401db6:	6011      	str	r1, [r2, #0]
  401db8:	e7f6      	b.n	401da8 <_sbrk+0x8>
  401dba:	bf00      	nop
  401dbc:	20400340 	.word	0x20400340
  401dc0:	20400dc0 	.word	0x20400dc0

00401dc4 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  401dc4:	f04f 30ff 	mov.w	r0, #4294967295
  401dc8:	4770      	bx	lr

00401dca <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  401dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401dce:	604b      	str	r3, [r1, #4]

	return 0;
}
  401dd0:	2000      	movs	r0, #0
  401dd2:	4770      	bx	lr

00401dd4 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  401dd4:	2001      	movs	r0, #1
  401dd6:	4770      	bx	lr

00401dd8 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  401dd8:	2000      	movs	r0, #0
  401dda:	4770      	bx	lr

00401ddc <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  401ddc:	6943      	ldr	r3, [r0, #20]
  401dde:	4a07      	ldr	r2, [pc, #28]	; (401dfc <_afec_get_irq_num+0x20>)
  401de0:	4293      	cmp	r3, r2
  401de2:	d005      	beq.n	401df0 <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  401de4:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  401de8:	4293      	cmp	r3, r2
  401dea:	d103      	bne.n	401df4 <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  401dec:	2028      	movs	r0, #40	; 0x28
  401dee:	4770      	bx	lr
		return AFEC0_IRQn;
  401df0:	201d      	movs	r0, #29
  401df2:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  401df4:	f04f 30ff 	mov.w	r0, #4294967295
}
  401df8:	4770      	bx	lr
  401dfa:	bf00      	nop
  401dfc:	4003c000 	.word	0x4003c000

00401e00 <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  401e00:	4b06      	ldr	r3, [pc, #24]	; (401e1c <_afec_init_irq_param+0x1c>)
  401e02:	4298      	cmp	r0, r3
  401e04:	d003      	beq.n	401e0e <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  401e06:	4b06      	ldr	r3, [pc, #24]	; (401e20 <_afec_init_irq_param+0x20>)
  401e08:	4298      	cmp	r0, r3
  401e0a:	d003      	beq.n	401e14 <_afec_init_irq_param+0x14>
  401e0c:	4770      	bx	lr
		_afec0_dev = dev;
  401e0e:	4b05      	ldr	r3, [pc, #20]	; (401e24 <_afec_init_irq_param+0x24>)
  401e10:	6019      	str	r1, [r3, #0]
  401e12:	e7f8      	b.n	401e06 <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  401e14:	4b03      	ldr	r3, [pc, #12]	; (401e24 <_afec_init_irq_param+0x24>)
  401e16:	6059      	str	r1, [r3, #4]
	}
}
  401e18:	e7f8      	b.n	401e0c <_afec_init_irq_param+0xc>
  401e1a:	bf00      	nop
  401e1c:	4003c000 	.word	0x4003c000
  401e20:	40064000 	.word	0x40064000
  401e24:	20400344 	.word	0x20400344

00401e28 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  401e28:	2364      	movs	r3, #100	; 0x64
  401e2a:	4a1d      	ldr	r2, [pc, #116]	; (401ea0 <_afec_init+0x78>)
  401e2c:	fb03 2301 	mla	r3, r3, r1, r2
  401e30:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  401e32:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  401e34:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  401e36:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  401e38:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  401e3a:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  401e3c:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  401e3e:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  401e40:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  401e42:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  401e44:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  401e46:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  401e48:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  401e4a:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  401e4c:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  401e4e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  401e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  401e54:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  401e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  401e5a:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  401e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  401e60:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  401e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  401e66:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401e6a:	2200      	movs	r2, #0
  401e6c:	2a0b      	cmp	r2, #11
  401e6e:	d814      	bhi.n	401e9a <_afec_init+0x72>
{
  401e70:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  401e72:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  401e74:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401e78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401e7c:	4413      	add	r3, r2
  401e7e:	330c      	adds	r3, #12
  401e80:	4c07      	ldr	r4, [pc, #28]	; (401ea0 <_afec_init+0x78>)
  401e82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  401e86:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  401e88:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401e8a:	3201      	adds	r2, #1
  401e8c:	b2d2      	uxtb	r2, r2
  401e8e:	2a0b      	cmp	r2, #11
  401e90:	d9ef      	bls.n	401e72 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  401e92:	2000      	movs	r0, #0
  401e94:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e98:	4770      	bx	lr
  401e9a:	2000      	movs	r0, #0
  401e9c:	4770      	bx	lr
  401e9e:	bf00      	nop
  401ea0:	004079e4 	.word	0x004079e4

00401ea4 <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  401ea4:	b530      	push	{r4, r5, lr}
  401ea6:	b083      	sub	sp, #12
  401ea8:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  401eaa:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  401eac:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  401eae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  401eb0:	400b      	ands	r3, r1
  401eb2:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  401eb4:	9b01      	ldr	r3, [sp, #4]
  401eb6:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401eba:	d10e      	bne.n	401eda <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  401ebc:	9b01      	ldr	r3, [sp, #4]
  401ebe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  401ec2:	d10e      	bne.n	401ee2 <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  401ec4:	9b01      	ldr	r3, [sp, #4]
  401ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401eca:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  401ecc:	9c01      	ldr	r4, [sp, #4]
  401ece:	fab4 f484 	clz	r4, r4
  401ed2:	f1c4 0420 	rsb	r4, r4, #32
  401ed6:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401ed8:	e01f      	b.n	401f1a <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  401eda:	6803      	ldr	r3, [r0, #0]
  401edc:	2100      	movs	r1, #0
  401ede:	4798      	blx	r3
  401ee0:	e7ec      	b.n	401ebc <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  401ee2:	686b      	ldr	r3, [r5, #4]
  401ee4:	2100      	movs	r1, #0
  401ee6:	4628      	mov	r0, r5
  401ee8:	4798      	blx	r3
  401eea:	e7eb      	b.n	401ec4 <_afec_interrupt_handler+0x20>
		cnt--;
  401eec:	3c01      	subs	r4, #1
  401eee:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  401ef0:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  401ef2:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  401ef4:	68ab      	ldr	r3, [r5, #8]
  401ef6:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  401ef8:	6e92      	ldr	r2, [r2, #104]	; 0x68
  401efa:	b292      	uxth	r2, r2
  401efc:	4621      	mov	r1, r4
  401efe:	4628      	mov	r0, r5
  401f00:	4798      	blx	r3
		status &= ~(1 << cnt);
  401f02:	2301      	movs	r3, #1
  401f04:	40a3      	lsls	r3, r4
  401f06:	9c01      	ldr	r4, [sp, #4]
  401f08:	ea24 0403 	bic.w	r4, r4, r3
  401f0c:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  401f0e:	9c01      	ldr	r4, [sp, #4]
  401f10:	fab4 f484 	clz	r4, r4
  401f14:	f1c4 0420 	rsb	r4, r4, #32
  401f18:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401f1a:	2c00      	cmp	r4, #0
  401f1c:	d1e6      	bne.n	401eec <_afec_interrupt_handler+0x48>
	}
}
  401f1e:	b003      	add	sp, #12
  401f20:	bd30      	pop	{r4, r5, pc}
	...

00401f24 <_afec_get_hardware_index>:
{
  401f24:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  401f26:	4b09      	ldr	r3, [pc, #36]	; (401f4c <_afec_get_hardware_index+0x28>)
  401f28:	4298      	cmp	r0, r3
  401f2a:	d00a      	beq.n	401f42 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  401f2c:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  401f30:	4298      	cmp	r0, r3
  401f32:	d008      	beq.n	401f46 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  401f34:	22a7      	movs	r2, #167	; 0xa7
  401f36:	4906      	ldr	r1, [pc, #24]	; (401f50 <_afec_get_hardware_index+0x2c>)
  401f38:	2000      	movs	r0, #0
  401f3a:	4b06      	ldr	r3, [pc, #24]	; (401f54 <_afec_get_hardware_index+0x30>)
  401f3c:	4798      	blx	r3
	return 0;
  401f3e:	2000      	movs	r0, #0
  401f40:	bd08      	pop	{r3, pc}
		return 0;
  401f42:	2000      	movs	r0, #0
  401f44:	bd08      	pop	{r3, pc}
		return 1;
  401f46:	2001      	movs	r0, #1
}
  401f48:	bd08      	pop	{r3, pc}
  401f4a:	bf00      	nop
  401f4c:	4003c000 	.word	0x4003c000
  401f50:	00407aac 	.word	0x00407aac
  401f54:	00401cbd 	.word	0x00401cbd

00401f58 <_afec_get_regs>:
{
  401f58:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  401f5a:	4b09      	ldr	r3, [pc, #36]	; (401f80 <_afec_get_regs+0x28>)
  401f5c:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401f5e:	2300      	movs	r3, #0
  401f60:	2b01      	cmp	r3, #1
  401f62:	d809      	bhi.n	401f78 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  401f64:	2264      	movs	r2, #100	; 0x64
  401f66:	fb02 f203 	mul.w	r2, r2, r3
  401f6a:	4906      	ldr	r1, [pc, #24]	; (401f84 <_afec_get_regs+0x2c>)
  401f6c:	5c8a      	ldrb	r2, [r1, r2]
  401f6e:	4290      	cmp	r0, r2
  401f70:	d003      	beq.n	401f7a <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401f72:	3301      	adds	r3, #1
  401f74:	b2db      	uxtb	r3, r3
  401f76:	e7f3      	b.n	401f60 <_afec_get_regs+0x8>
	return 0;
  401f78:	2300      	movs	r3, #0
}
  401f7a:	4618      	mov	r0, r3
  401f7c:	bd08      	pop	{r3, pc}
  401f7e:	bf00      	nop
  401f80:	00401f25 	.word	0x00401f25
  401f84:	004079e4 	.word	0x004079e4

00401f88 <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  401f88:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  401f8a:	4b02      	ldr	r3, [pc, #8]	; (401f94 <AFEC0_Handler+0xc>)
  401f8c:	6818      	ldr	r0, [r3, #0]
  401f8e:	4b02      	ldr	r3, [pc, #8]	; (401f98 <AFEC0_Handler+0x10>)
  401f90:	4798      	blx	r3
  401f92:	bd08      	pop	{r3, pc}
  401f94:	20400344 	.word	0x20400344
  401f98:	00401ea5 	.word	0x00401ea5

00401f9c <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  401f9c:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  401f9e:	4b02      	ldr	r3, [pc, #8]	; (401fa8 <AFEC1_Handler+0xc>)
  401fa0:	6858      	ldr	r0, [r3, #4]
  401fa2:	4b02      	ldr	r3, [pc, #8]	; (401fac <AFEC1_Handler+0x10>)
  401fa4:	4798      	blx	r3
  401fa6:	bd08      	pop	{r3, pc}
  401fa8:	20400344 	.word	0x20400344
  401fac:	00401ea5 	.word	0x00401ea5

00401fb0 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  401fb0:	b570      	push	{r4, r5, r6, lr}
  401fb2:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  401fb4:	4605      	mov	r5, r0
  401fb6:	f44f 72a1 	mov.w	r2, #322	; 0x142
  401fba:	4923      	ldr	r1, [pc, #140]	; (402048 <_adc_async_init+0x98>)
  401fbc:	3000      	adds	r0, #0
  401fbe:	bf18      	it	ne
  401fc0:	2001      	movne	r0, #1
  401fc2:	4b22      	ldr	r3, [pc, #136]	; (40204c <_adc_async_init+0x9c>)
  401fc4:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  401fc6:	4620      	mov	r0, r4
  401fc8:	4b21      	ldr	r3, [pc, #132]	; (402050 <_adc_async_init+0xa0>)
  401fca:	4798      	blx	r3
  401fcc:	4601      	mov	r1, r0
  401fce:	4620      	mov	r0, r4
  401fd0:	4b20      	ldr	r3, [pc, #128]	; (402054 <_adc_async_init+0xa4>)
  401fd2:	4798      	blx	r3
	if (init_status) {
  401fd4:	4606      	mov	r6, r0
  401fd6:	b108      	cbz	r0, 401fdc <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  401fd8:	4630      	mov	r0, r6
  401fda:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  401fdc:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  401fde:	4629      	mov	r1, r5
  401fe0:	4620      	mov	r0, r4
  401fe2:	4b1d      	ldr	r3, [pc, #116]	; (402058 <_adc_async_init+0xa8>)
  401fe4:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  401fe6:	4628      	mov	r0, r5
  401fe8:	4b1c      	ldr	r3, [pc, #112]	; (40205c <_adc_async_init+0xac>)
  401fea:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401fec:	2800      	cmp	r0, #0
  401fee:	db0d      	blt.n	40200c <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ff0:	0943      	lsrs	r3, r0, #5
  401ff2:	f000 001f 	and.w	r0, r0, #31
  401ff6:	2201      	movs	r2, #1
  401ff8:	fa02 f000 	lsl.w	r0, r2, r0
  401ffc:	3320      	adds	r3, #32
  401ffe:	4a18      	ldr	r2, [pc, #96]	; (402060 <_adc_async_init+0xb0>)
  402000:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402004:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402008:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  40200c:	4628      	mov	r0, r5
  40200e:	4b13      	ldr	r3, [pc, #76]	; (40205c <_adc_async_init+0xac>)
  402010:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  402012:	2800      	cmp	r0, #0
  402014:	db09      	blt.n	40202a <_adc_async_init+0x7a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402016:	0943      	lsrs	r3, r0, #5
  402018:	f000 001f 	and.w	r0, r0, #31
  40201c:	2201      	movs	r2, #1
  40201e:	fa02 f000 	lsl.w	r0, r2, r0
  402022:	3360      	adds	r3, #96	; 0x60
  402024:	4a0e      	ldr	r2, [pc, #56]	; (402060 <_adc_async_init+0xb0>)
  402026:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  40202a:	4628      	mov	r0, r5
  40202c:	4b0b      	ldr	r3, [pc, #44]	; (40205c <_adc_async_init+0xac>)
  40202e:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  402030:	2800      	cmp	r0, #0
  402032:	dbd1      	blt.n	401fd8 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402034:	0942      	lsrs	r2, r0, #5
  402036:	f000 001f 	and.w	r0, r0, #31
  40203a:	2301      	movs	r3, #1
  40203c:	fa03 f000 	lsl.w	r0, r3, r0
  402040:	4b07      	ldr	r3, [pc, #28]	; (402060 <_adc_async_init+0xb0>)
  402042:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  402046:	e7c7      	b.n	401fd8 <_adc_async_init+0x28>
  402048:	00407aac 	.word	0x00407aac
  40204c:	00401cbd 	.word	0x00401cbd
  402050:	00401f59 	.word	0x00401f59
  402054:	00401e29 	.word	0x00401e29
  402058:	00401e01 	.word	0x00401e01
  40205c:	00401ddd 	.word	0x00401ddd
  402060:	e000e100 	.word	0xe000e100

00402064 <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  402064:	6942      	ldr	r2, [r0, #20]
  402066:	2301      	movs	r3, #1
  402068:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  40206c:	6151      	str	r1, [r2, #20]
  40206e:	4770      	bx	lr

00402070 <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  402070:	2002      	movs	r0, #2
  402072:	4770      	bx	lr

00402074 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  402074:	f44f 7396 	mov.w	r3, #300	; 0x12c
  402078:	fb03 f000 	mul.w	r0, r3, r0
  40207c:	4770      	bx	lr
	...

00402080 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  402080:	b500      	push	{lr}
  402082:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  402084:	a801      	add	r0, sp, #4
  402086:	4b14      	ldr	r3, [pc, #80]	; (4020d8 <_init_chip+0x58>)
  402088:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  40208a:	4a14      	ldr	r2, [pc, #80]	; (4020dc <_init_chip+0x5c>)
  40208c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  402090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  402098:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40209c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  4020a0:	a801      	add	r0, sp, #4
  4020a2:	4b0f      	ldr	r3, [pc, #60]	; (4020e0 <_init_chip+0x60>)
  4020a4:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  4020a6:	4a0f      	ldr	r2, [pc, #60]	; (4020e4 <_init_chip+0x64>)
  4020a8:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4020aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  4020ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  4020b2:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4020b4:	4b0c      	ldr	r3, [pc, #48]	; (4020e8 <_init_chip+0x68>)
  4020b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4020ba:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  4020be:	d104      	bne.n	4020ca <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4020c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4020c4:	4b08      	ldr	r3, [pc, #32]	; (4020e8 <_init_chip+0x68>)
  4020c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  4020ca:	4b08      	ldr	r3, [pc, #32]	; (4020ec <_init_chip+0x6c>)
  4020cc:	4798      	blx	r3

#endif
	_pmc_init();
  4020ce:	4b08      	ldr	r3, [pc, #32]	; (4020f0 <_init_chip+0x70>)
  4020d0:	4798      	blx	r3
}
  4020d2:	b003      	add	sp, #12
  4020d4:	f85d fb04 	ldr.w	pc, [sp], #4
  4020d8:	00401709 	.word	0x00401709
  4020dc:	e000ed00 	.word	0xe000ed00
  4020e0:	00401717 	.word	0x00401717
  4020e4:	400e0c00 	.word	0x400e0c00
  4020e8:	400e0600 	.word	0x400e0600
  4020ec:	00402c79 	.word	0x00402c79
  4020f0:	00402509 	.word	0x00402509

004020f4 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  4020f4:	b538      	push	{r3, r4, r5, lr}
  4020f6:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  4020f8:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  4020fa:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  4020fc:	f014 0f01 	tst.w	r4, #1
  402100:	d11a      	bne.n	402138 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  402102:	f414 7f00 	tst.w	r4, #512	; 0x200
  402106:	d11a      	bne.n	40213e <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  402108:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  40210c:	d11b      	bne.n	402146 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  40210e:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  402112:	d11d      	bne.n	402150 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  402114:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  402118:	d008      	beq.n	40212c <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  40211a:	68eb      	ldr	r3, [r5, #12]
  40211c:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  40211e:	6c52      	ldr	r2, [r2, #68]	; 0x44
  402120:	f012 0f20 	tst.w	r2, #32
  402124:	d019      	beq.n	40215a <_can_irq_handler+0x66>
  402126:	2102      	movs	r1, #2
  402128:	4628      	mov	r0, r5
  40212a:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  40212c:	f014 0f08 	tst.w	r4, #8
  402130:	d115      	bne.n	40215e <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  402132:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  402134:	651c      	str	r4, [r3, #80]	; 0x50
  402136:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  402138:	6883      	ldr	r3, [r0, #8]
  40213a:	4798      	blx	r3
  40213c:	e7e1      	b.n	402102 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  40213e:	686b      	ldr	r3, [r5, #4]
  402140:	4628      	mov	r0, r5
  402142:	4798      	blx	r3
  402144:	e7e0      	b.n	402108 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  402146:	68eb      	ldr	r3, [r5, #12]
  402148:	2103      	movs	r1, #3
  40214a:	4628      	mov	r0, r5
  40214c:	4798      	blx	r3
  40214e:	e7de      	b.n	40210e <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  402150:	68eb      	ldr	r3, [r5, #12]
  402152:	2100      	movs	r1, #0
  402154:	4628      	mov	r0, r5
  402156:	4798      	blx	r3
  402158:	e7dc      	b.n	402114 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  40215a:	2101      	movs	r1, #1
  40215c:	e7e4      	b.n	402128 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  40215e:	68eb      	ldr	r3, [r5, #12]
  402160:	2104      	movs	r1, #4
  402162:	4628      	mov	r0, r5
  402164:	4798      	blx	r3
  402166:	e7e4      	b.n	402132 <_can_irq_handler+0x3e>

00402168 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  402168:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  40216a:	4b02      	ldr	r3, [pc, #8]	; (402174 <MCAN1_INT0_Handler+0xc>)
  40216c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  40216e:	4b02      	ldr	r3, [pc, #8]	; (402178 <MCAN1_INT0_Handler+0x10>)
  402170:	4798      	blx	r3
  402172:	bd08      	pop	{r3, pc}
  402174:	2040034c 	.word	0x2040034c
  402178:	004020f5 	.word	0x004020f5

0040217c <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  40217c:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  40217e:	2500      	movs	r5, #0
  402180:	428d      	cmp	r5, r1
  402182:	d210      	bcs.n	4021a6 <_ffs+0x2a>
  402184:	2201      	movs	r2, #1
  402186:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  402188:	2b1f      	cmp	r3, #31
  40218a:	d80a      	bhi.n	4021a2 <_ffs+0x26>
			if (v[i] & bit) {
  40218c:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  402190:	4222      	tst	r2, r4
  402192:	d102      	bne.n	40219a <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  402194:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  402196:	3301      	adds	r3, #1
  402198:	e7f6      	b.n	402188 <_ffs+0xc>
				return i * 32 + j;
  40219a:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  40219e:	bc30      	pop	{r4, r5}
  4021a0:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  4021a2:	3501      	adds	r5, #1
  4021a4:	e7ec      	b.n	402180 <_ffs+0x4>
	return -1;
  4021a6:	f04f 30ff 	mov.w	r0, #4294967295
  4021aa:	e7f8      	b.n	40219e <_ffs+0x22>

004021ac <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  4021ac:	b510      	push	{r4, lr}
  4021ae:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  4021b0:	2300      	movs	r3, #0
  4021b2:	9301      	str	r3, [sp, #4]
  4021b4:	9302      	str	r3, [sp, #8]
  4021b6:	9303      	str	r3, [sp, #12]
  4021b8:	9304      	str	r3, [sp, #16]
  4021ba:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  4021bc:	4b28      	ldr	r3, [pc, #160]	; (402260 <_ext_irq_handler+0xb4>)
  4021be:	6818      	ldr	r0, [r3, #0]
  4021c0:	22f8      	movs	r2, #248	; 0xf8
  4021c2:	4928      	ldr	r1, [pc, #160]	; (402264 <_ext_irq_handler+0xb8>)
  4021c4:	3000      	adds	r0, #0
  4021c6:	bf18      	it	ne
  4021c8:	2001      	movne	r0, #1
  4021ca:	4b27      	ldr	r3, [pc, #156]	; (402268 <_ext_irq_handler+0xbc>)
  4021cc:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  4021ce:	4b27      	ldr	r3, [pc, #156]	; (40226c <_ext_irq_handler+0xc0>)
  4021d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4021d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  4021d4:	4013      	ands	r3, r2
  4021d6:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  4021d8:	4a25      	ldr	r2, [pc, #148]	; (402270 <_ext_irq_handler+0xc4>)
  4021da:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4021dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  4021de:	400a      	ands	r2, r1
  4021e0:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  4021e2:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  4021e4:	4923      	ldr	r1, [pc, #140]	; (402274 <_ext_irq_handler+0xc8>)
  4021e6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  4021e8:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4021ea:	400a      	ands	r2, r1
  4021ec:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  4021ee:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  4021f0:	e02c      	b.n	40224c <_ext_irq_handler+0xa0>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  4021f2:	4b1b      	ldr	r3, [pc, #108]	; (402260 <_ext_irq_handler+0xb4>)
  4021f4:	681b      	ldr	r3, [r3, #0]
  4021f6:	4620      	mov	r0, r4
  4021f8:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  4021fa:	1163      	asrs	r3, r4, #5
  4021fc:	f004 041f 	and.w	r4, r4, #31
  402200:	2201      	movs	r2, #1
  402202:	fa02 f404 	lsl.w	r4, r2, r4
  402206:	aa06      	add	r2, sp, #24
  402208:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40220c:	f853 2c14 	ldr.w	r2, [r3, #-20]
  402210:	ea22 0204 	bic.w	r2, r2, r4
  402214:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  402218:	2105      	movs	r1, #5
  40221a:	a801      	add	r0, sp, #4
  40221c:	4b16      	ldr	r3, [pc, #88]	; (402278 <_ext_irq_handler+0xcc>)
  40221e:	4798      	blx	r3
  402220:	4604      	mov	r4, r0
		while (-1 != pos) {
  402222:	f1b4 3fff 	cmp.w	r4, #4294967295
  402226:	d1e4      	bne.n	4021f2 <_ext_irq_handler+0x46>
	return ((Pio *)hw)->PIO_ISR;
  402228:	4a10      	ldr	r2, [pc, #64]	; (40226c <_ext_irq_handler+0xc0>)
  40222a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40222c:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  40222e:	400b      	ands	r3, r1
  402230:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  402232:	490f      	ldr	r1, [pc, #60]	; (402270 <_ext_irq_handler+0xc4>)
  402234:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  402236:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  402238:	4002      	ands	r2, r0
  40223a:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  40223c:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  40223e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  402242:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  402244:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  402246:	4002      	ands	r2, r0
  402248:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  40224a:	4313      	orrs	r3, r2
	while (flag_total) {
  40224c:	b12b      	cbz	r3, 40225a <_ext_irq_handler+0xae>
		pos = _ffs(flags, 5);
  40224e:	2105      	movs	r1, #5
  402250:	a801      	add	r0, sp, #4
  402252:	4b09      	ldr	r3, [pc, #36]	; (402278 <_ext_irq_handler+0xcc>)
  402254:	4798      	blx	r3
  402256:	4604      	mov	r4, r0
		while (-1 != pos) {
  402258:	e7e3      	b.n	402222 <_ext_irq_handler+0x76>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  40225a:	b006      	add	sp, #24
  40225c:	bd10      	pop	{r4, pc}
  40225e:	bf00      	nop
  402260:	20400378 	.word	0x20400378
  402264:	00407b20 	.word	0x00407b20
  402268:	00401cbd 	.word	0x00401cbd
  40226c:	400e0e00 	.word	0x400e0e00
  402270:	400e1000 	.word	0x400e1000
  402274:	400e1400 	.word	0x400e1400
  402278:	0040217d 	.word	0x0040217d

0040227c <_pio_get_hardware_index>:
{
  40227c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40227e:	4604      	mov	r4, r0
  402280:	22d2      	movs	r2, #210	; 0xd2
  402282:	4905      	ldr	r1, [pc, #20]	; (402298 <_pio_get_hardware_index+0x1c>)
  402284:	3000      	adds	r0, #0
  402286:	bf18      	it	ne
  402288:	2001      	movne	r0, #1
  40228a:	4b04      	ldr	r3, [pc, #16]	; (40229c <_pio_get_hardware_index+0x20>)
  40228c:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  40228e:	4804      	ldr	r0, [pc, #16]	; (4022a0 <_pio_get_hardware_index+0x24>)
  402290:	4420      	add	r0, r4
}
  402292:	f3c0 2047 	ubfx	r0, r0, #9, #8
  402296:	bd10      	pop	{r4, pc}
  402298:	00407b20 	.word	0x00407b20
  40229c:	00401cbd 	.word	0x00401cbd
  4022a0:	bff1f200 	.word	0xbff1f200

004022a4 <_pio_get_index>:
{
  4022a4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4022a6:	4604      	mov	r4, r0
  4022a8:	22e0      	movs	r2, #224	; 0xe0
  4022aa:	490d      	ldr	r1, [pc, #52]	; (4022e0 <_pio_get_index+0x3c>)
  4022ac:	3000      	adds	r0, #0
  4022ae:	bf18      	it	ne
  4022b0:	2001      	movne	r0, #1
  4022b2:	4b0c      	ldr	r3, [pc, #48]	; (4022e4 <_pio_get_index+0x40>)
  4022b4:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  4022b6:	4620      	mov	r0, r4
  4022b8:	4b0b      	ldr	r3, [pc, #44]	; (4022e8 <_pio_get_index+0x44>)
  4022ba:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  4022bc:	2300      	movs	r3, #0
  4022be:	2b02      	cmp	r3, #2
  4022c0:	d80b      	bhi.n	4022da <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  4022c2:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  4022c6:	008a      	lsls	r2, r1, #2
  4022c8:	4908      	ldr	r1, [pc, #32]	; (4022ec <_pio_get_index+0x48>)
  4022ca:	5c8a      	ldrb	r2, [r1, r2]
  4022cc:	4290      	cmp	r0, r2
  4022ce:	d002      	beq.n	4022d6 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  4022d0:	3301      	adds	r3, #1
  4022d2:	b2db      	uxtb	r3, r3
  4022d4:	e7f3      	b.n	4022be <_pio_get_index+0x1a>
			return i;
  4022d6:	b258      	sxtb	r0, r3
  4022d8:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  4022da:	f04f 30ff 	mov.w	r0, #4294967295
}
  4022de:	bd10      	pop	{r4, pc}
  4022e0:	00407b20 	.word	0x00407b20
  4022e4:	00401cbd 	.word	0x00401cbd
  4022e8:	0040227d 	.word	0x0040227d
  4022ec:	00407ac4 	.word	0x00407ac4

004022f0 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  4022f0:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  4022f2:	4604      	mov	r4, r0
  4022f4:	f44f 72af 	mov.w	r2, #350	; 0x15e
  4022f8:	4929      	ldr	r1, [pc, #164]	; (4023a0 <_pio_init+0xb0>)
  4022fa:	3000      	adds	r0, #0
  4022fc:	bf18      	it	ne
  4022fe:	2001      	movne	r0, #1
  402300:	4b28      	ldr	r3, [pc, #160]	; (4023a4 <_pio_init+0xb4>)
  402302:	4798      	blx	r3

	i = _pio_get_index(hw);
  402304:	4620      	mov	r0, r4
  402306:	4b28      	ldr	r3, [pc, #160]	; (4023a8 <_pio_init+0xb8>)
  402308:	4798      	blx	r3
	if (i < 0) {
  40230a:	2800      	cmp	r0, #0
  40230c:	db43      	blt.n	402396 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  40230e:	4d27      	ldr	r5, [pc, #156]	; (4023ac <_pio_init+0xbc>)
  402310:	00c2      	lsls	r2, r0, #3
  402312:	1a11      	subs	r1, r2, r0
  402314:	008b      	lsls	r3, r1, #2
  402316:	442b      	add	r3, r5
  402318:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  40231a:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  40231e:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  402320:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  402324:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  402326:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  40232a:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  40232c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  402330:	1a10      	subs	r0, r2, r0
  402332:	0083      	lsls	r3, r0, #2
  402334:	442b      	add	r3, r5
  402336:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  402338:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  40233c:	4620      	mov	r0, r4
  40233e:	4b1c      	ldr	r3, [pc, #112]	; (4023b0 <_pio_init+0xc0>)
  402340:	4798      	blx	r3
  402342:	4428      	add	r0, r5
  402344:	f990 3054 	ldrsb.w	r3, [r0, #84]	; 0x54
  if ((int32_t)(IRQn) >= 0)
  402348:	2b00      	cmp	r3, #0
  40234a:	db0c      	blt.n	402366 <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40234c:	095a      	lsrs	r2, r3, #5
  40234e:	f003 001f 	and.w	r0, r3, #31
  402352:	2101      	movs	r1, #1
  402354:	4081      	lsls	r1, r0
  402356:	3220      	adds	r2, #32
  402358:	4816      	ldr	r0, [pc, #88]	; (4023b4 <_pio_init+0xc4>)
  40235a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40235e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402362:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  402366:	2b00      	cmp	r3, #0
  402368:	db08      	blt.n	40237c <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40236a:	095a      	lsrs	r2, r3, #5
  40236c:	f003 001f 	and.w	r0, r3, #31
  402370:	2101      	movs	r1, #1
  402372:	4081      	lsls	r1, r0
  402374:	3260      	adds	r2, #96	; 0x60
  402376:	480f      	ldr	r0, [pc, #60]	; (4023b4 <_pio_init+0xc4>)
  402378:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  40237c:	2b00      	cmp	r3, #0
  40237e:	db0d      	blt.n	40239c <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402380:	0959      	lsrs	r1, r3, #5
  402382:	f003 031f 	and.w	r3, r3, #31
  402386:	2201      	movs	r2, #1
  402388:	fa02 f303 	lsl.w	r3, r2, r3
  40238c:	4a09      	ldr	r2, [pc, #36]	; (4023b4 <_pio_init+0xc4>)
  40238e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  402392:	2000      	movs	r0, #0
  402394:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  402396:	f06f 0010 	mvn.w	r0, #16
  40239a:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  40239c:	2000      	movs	r0, #0
}
  40239e:	bd38      	pop	{r3, r4, r5, pc}
  4023a0:	00407b20 	.word	0x00407b20
  4023a4:	00401cbd 	.word	0x00401cbd
  4023a8:	004022a5 	.word	0x004022a5
  4023ac:	00407ac4 	.word	0x00407ac4
  4023b0:	0040227d 	.word	0x0040227d
  4023b4:	e000e100 	.word	0xe000e100

004023b8 <PIOD_Handler>:
{
  4023b8:	b508      	push	{r3, lr}
	_ext_irq_handler();
  4023ba:	4b01      	ldr	r3, [pc, #4]	; (4023c0 <PIOD_Handler+0x8>)
  4023bc:	4798      	blx	r3
  4023be:	bd08      	pop	{r3, pc}
  4023c0:	004021ad 	.word	0x004021ad

004023c4 <PIOB_Handler>:
{
  4023c4:	b508      	push	{r3, lr}
	_ext_irq_handler();
  4023c6:	4b01      	ldr	r3, [pc, #4]	; (4023cc <PIOB_Handler+0x8>)
  4023c8:	4798      	blx	r3
  4023ca:	bd08      	pop	{r3, pc}
  4023cc:	004021ad 	.word	0x004021ad

004023d0 <PIOA_Handler>:
{
  4023d0:	b508      	push	{r3, lr}
	_ext_irq_handler();
  4023d2:	4b01      	ldr	r3, [pc, #4]	; (4023d8 <PIOA_Handler+0x8>)
  4023d4:	4798      	blx	r3
  4023d6:	bd08      	pop	{r3, pc}
  4023d8:	004021ad 	.word	0x004021ad

004023dc <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  4023dc:	b538      	push	{r3, r4, r5, lr}
  4023de:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  4023e0:	4805      	ldr	r0, [pc, #20]	; (4023f8 <_ext_irq_init+0x1c>)
  4023e2:	4c06      	ldr	r4, [pc, #24]	; (4023fc <_ext_irq_init+0x20>)
  4023e4:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  4023e6:	4806      	ldr	r0, [pc, #24]	; (402400 <_ext_irq_init+0x24>)
  4023e8:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  4023ea:	4806      	ldr	r0, [pc, #24]	; (402404 <_ext_irq_init+0x28>)
  4023ec:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  4023ee:	4b06      	ldr	r3, [pc, #24]	; (402408 <_ext_irq_init+0x2c>)
  4023f0:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  4023f2:	2000      	movs	r0, #0
  4023f4:	bd38      	pop	{r3, r4, r5, pc}
  4023f6:	bf00      	nop
  4023f8:	400e0e00 	.word	0x400e0e00
  4023fc:	004022f1 	.word	0x004022f1
  402400:	400e1000 	.word	0x400e1000
  402404:	400e1400 	.word	0x400e1400
  402408:	20400378 	.word	0x20400378

0040240c <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  40240c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402410:	4604      	mov	r4, r0
  402412:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  402414:	f8df 8050 	ldr.w	r8, [pc, #80]	; 402468 <_ext_irq_enable+0x5c>
  402418:	f240 12ab 	movw	r2, #427	; 0x1ab
  40241c:	4641      	mov	r1, r8
  40241e:	289f      	cmp	r0, #159	; 0x9f
  402420:	bf8c      	ite	hi
  402422:	2000      	movhi	r0, #0
  402424:	2001      	movls	r0, #1
  402426:	4e0e      	ldr	r6, [pc, #56]	; (402460 <_ext_irq_enable+0x54>)
  402428:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  40242a:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  40242c:	22c3      	movs	r2, #195	; 0xc3
  40242e:	4641      	mov	r1, r8
  402430:	2d9f      	cmp	r5, #159	; 0x9f
  402432:	bf8c      	ite	hi
  402434:	2000      	movhi	r0, #0
  402436:	2001      	movls	r0, #1
  402438:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  40243a:	096d      	lsrs	r5, r5, #5
  40243c:	4b09      	ldr	r3, [pc, #36]	; (402464 <_ext_irq_enable+0x58>)
  40243e:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  402442:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  402446:	b937      	cbnz	r7, 402456 <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  402448:	2301      	movs	r3, #1
  40244a:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  40244e:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  402450:	2000      	movs	r0, #0
  402452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  402456:	2301      	movs	r3, #1
  402458:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  40245c:	642c      	str	r4, [r5, #64]	; 0x40
  40245e:	e7f7      	b.n	402450 <_ext_irq_enable+0x44>
  402460:	00401cbd 	.word	0x00401cbd
  402464:	400e0e00 	.word	0x400e0e00
  402468:	00407b20 	.word	0x00407b20

0040246c <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  40246c:	490e      	ldr	r1, [pc, #56]	; (4024a8 <_pmc_init_sources+0x3c>)
  40246e:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  402470:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  402474:	4b0d      	ldr	r3, [pc, #52]	; (4024ac <_pmc_init_sources+0x40>)
  402476:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  402478:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40247a:	4b0b      	ldr	r3, [pc, #44]	; (4024a8 <_pmc_init_sources+0x3c>)
  40247c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  40247e:	f013 0f01 	tst.w	r3, #1
  402482:	d0fa      	beq.n	40247a <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  402484:	4b08      	ldr	r3, [pc, #32]	; (4024a8 <_pmc_init_sources+0x3c>)
  402486:	6a19      	ldr	r1, [r3, #32]
  402488:	4a09      	ldr	r2, [pc, #36]	; (4024b0 <_pmc_init_sources+0x44>)
  40248a:	430a      	orrs	r2, r1
  40248c:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  40248e:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  402490:	4a08      	ldr	r2, [pc, #32]	; (4024b4 <_pmc_init_sources+0x48>)
  402492:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  402494:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  402496:	4a08      	ldr	r2, [pc, #32]	; (4024b8 <_pmc_init_sources+0x4c>)
  402498:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  40249a:	4b03      	ldr	r3, [pc, #12]	; (4024a8 <_pmc_init_sources+0x3c>)
  40249c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40249e:	f013 0f02 	tst.w	r3, #2
  4024a2:	d0fa      	beq.n	40249a <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4024a4:	4770      	bx	lr
  4024a6:	bf00      	nop
  4024a8:	400e0600 	.word	0x400e0600
  4024ac:	00373e01 	.word	0x00373e01
  4024b0:	01370000 	.word	0x01370000
  4024b4:	f800ffff 	.word	0xf800ffff
  4024b8:	20183f01 	.word	0x20183f01

004024bc <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4024bc:	4a11      	ldr	r2, [pc, #68]	; (402504 <_pmc_init_master_clock+0x48>)
  4024be:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  4024c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4024c4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4024c6:	4b0f      	ldr	r3, [pc, #60]	; (402504 <_pmc_init_master_clock+0x48>)
  4024c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4024ca:	f013 0f08 	tst.w	r3, #8
  4024ce:	d0fa      	beq.n	4024c6 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4024d0:	4a0c      	ldr	r2, [pc, #48]	; (402504 <_pmc_init_master_clock+0x48>)
  4024d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  4024d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  4024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  4024dc:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4024de:	4b09      	ldr	r3, [pc, #36]	; (402504 <_pmc_init_master_clock+0x48>)
  4024e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4024e2:	f013 0f08 	tst.w	r3, #8
  4024e6:	d0fa      	beq.n	4024de <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4024e8:	4a06      	ldr	r2, [pc, #24]	; (402504 <_pmc_init_master_clock+0x48>)
  4024ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  4024ec:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  4024f0:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  4024f4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4024f6:	4b03      	ldr	r3, [pc, #12]	; (402504 <_pmc_init_master_clock+0x48>)
  4024f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4024fa:	f013 0f08 	tst.w	r3, #8
  4024fe:	d0fa      	beq.n	4024f6 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  402500:	4770      	bx	lr
  402502:	bf00      	nop
  402504:	400e0600 	.word	0x400e0600

00402508 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  402508:	b508      	push	{r3, lr}
	_pmc_init_sources();
  40250a:	4b02      	ldr	r3, [pc, #8]	; (402514 <_pmc_init+0xc>)
  40250c:	4798      	blx	r3
	_pmc_init_master_clock();
  40250e:	4b02      	ldr	r3, [pc, #8]	; (402518 <_pmc_init+0x10>)
  402510:	4798      	blx	r3
  402512:	bd08      	pop	{r3, pc}
  402514:	0040246d 	.word	0x0040246d
  402518:	004024bd 	.word	0x004024bd

0040251c <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  40251c:	2300      	movs	r3, #0
  40251e:	2b01      	cmp	r3, #1
  402520:	d80f      	bhi.n	402542 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  402522:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  402526:	008a      	lsls	r2, r1, #2
  402528:	4907      	ldr	r1, [pc, #28]	; (402548 <_pwm_get_cfg+0x2c>)
  40252a:	588a      	ldr	r2, [r1, r2]
  40252c:	4282      	cmp	r2, r0
  40252e:	d002      	beq.n	402536 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  402530:	3301      	adds	r3, #1
  402532:	b2db      	uxtb	r3, r3
  402534:	e7f3      	b.n	40251e <_pwm_get_cfg+0x2>
			return (_pwms + i);
  402536:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  40253a:	009a      	lsls	r2, r3, #2
  40253c:	4608      	mov	r0, r1
  40253e:	4410      	add	r0, r2
  402540:	4770      	bx	lr
		}
	}

	return NULL;
  402542:	2000      	movs	r0, #0
}
  402544:	4770      	bx	lr
  402546:	bf00      	nop
  402548:	00407b3c 	.word	0x00407b3c

0040254c <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  40254c:	4b06      	ldr	r3, [pc, #24]	; (402568 <_pwm_init_irq_param+0x1c>)
  40254e:	4298      	cmp	r0, r3
  402550:	d003      	beq.n	40255a <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  402552:	4b06      	ldr	r3, [pc, #24]	; (40256c <_pwm_init_irq_param+0x20>)
  402554:	4298      	cmp	r0, r3
  402556:	d003      	beq.n	402560 <_pwm_init_irq_param+0x14>
  402558:	4770      	bx	lr
		_pwm0_dev = dev;
  40255a:	4b05      	ldr	r3, [pc, #20]	; (402570 <_pwm_init_irq_param+0x24>)
  40255c:	6019      	str	r1, [r3, #0]
  40255e:	e7f8      	b.n	402552 <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  402560:	4b03      	ldr	r3, [pc, #12]	; (402570 <_pwm_init_irq_param+0x24>)
  402562:	6059      	str	r1, [r3, #4]
	}
}
  402564:	e7f8      	b.n	402558 <_pwm_init_irq_param+0xc>
  402566:	bf00      	nop
  402568:	40020000 	.word	0x40020000
  40256c:	4005c000 	.word	0x4005c000
  402570:	2040037c 	.word	0x2040037c

00402574 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  402574:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  402576:	6903      	ldr	r3, [r0, #16]
	return ((Pwm *)hw)->PWM_ISR1;
  402578:	69db      	ldr	r3, [r3, #28]
  40257a:	b113      	cbz	r3, 402582 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  40257c:	6803      	ldr	r3, [r0, #0]
  40257e:	b103      	cbz	r3, 402582 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  402580:	4798      	blx	r3
  402582:	bd08      	pop	{r3, pc}

00402584 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  402584:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  402586:	4b02      	ldr	r3, [pc, #8]	; (402590 <PWM0_Handler+0xc>)
  402588:	6818      	ldr	r0, [r3, #0]
  40258a:	4b02      	ldr	r3, [pc, #8]	; (402594 <PWM0_Handler+0x10>)
  40258c:	4798      	blx	r3
  40258e:	bd08      	pop	{r3, pc}
  402590:	2040037c 	.word	0x2040037c
  402594:	00402575 	.word	0x00402575

00402598 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  402598:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  40259a:	4b02      	ldr	r3, [pc, #8]	; (4025a4 <PWM1_Handler+0xc>)
  40259c:	6858      	ldr	r0, [r3, #4]
  40259e:	4b02      	ldr	r3, [pc, #8]	; (4025a8 <PWM1_Handler+0x10>)
  4025a0:	4798      	blx	r3
  4025a2:	bd08      	pop	{r3, pc}
  4025a4:	2040037c 	.word	0x2040037c
  4025a8:	00402575 	.word	0x00402575

004025ac <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  4025ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4025ae:	4606      	mov	r6, r0
	ASSERT(hw);
  4025b0:	460c      	mov	r4, r1
  4025b2:	1c08      	adds	r0, r1, #0
  4025b4:	bf18      	it	ne
  4025b6:	2001      	movne	r0, #1
  4025b8:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  4025bc:	4944      	ldr	r1, [pc, #272]	; (4026d0 <_pwm_init+0x124>)
  4025be:	4b45      	ldr	r3, [pc, #276]	; (4026d4 <_pwm_init+0x128>)
  4025c0:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  4025c2:	4620      	mov	r0, r4
  4025c4:	4b44      	ldr	r3, [pc, #272]	; (4026d8 <_pwm_init+0x12c>)
  4025c6:	4798      	blx	r3
  4025c8:	4605      	mov	r5, r0

	device->hw = hw;
  4025ca:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  4025cc:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  4025ce:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  4025d0:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  4025d2:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  4025d4:	6903      	ldr	r3, [r0, #16]
  4025d6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  4025da:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  4025dc:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  4025de:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  4025e0:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  4025e2:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  4025e4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  4025e8:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  4025ea:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  4025ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  4025ee:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  4025f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  4025f4:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  4025f8:	2300      	movs	r3, #0
  4025fa:	e019      	b.n	402630 <_pwm_init+0x84>
		ch = cfg->ch + i;
  4025fc:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  4025fe:	0118      	lsls	r0, r3, #4
  402600:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  402604:	5c3a      	ldrb	r2, [r7, r0]
  402606:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  40260a:	3210      	adds	r2, #16
  40260c:	0152      	lsls	r2, r2, #5
  40260e:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  402610:	5c3a      	ldrb	r2, [r7, r0]
  402612:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  402616:	3210      	adds	r2, #16
  402618:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  40261c:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  40261e:	5c3a      	ldrb	r2, [r7, r0]
  402620:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  402624:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  402628:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  40262c:	3301      	adds	r3, #1
  40262e:	b25b      	sxtb	r3, r3
  402630:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402632:	4293      	cmp	r3, r2
  402634:	d3e2      	bcc.n	4025fc <_pwm_init+0x50>
  402636:	2300      	movs	r3, #0
  402638:	e014      	b.n	402664 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  40263a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  40263c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  402640:	0082      	lsls	r2, r0, #2
  402642:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  402646:	5c88      	ldrb	r0, [r1, r2]
  402648:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  40264c:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  402650:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  402654:	5c8a      	ldrb	r2, [r1, r2]
  402656:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  40265a:	3213      	adds	r2, #19
  40265c:	0112      	lsls	r2, r2, #4
  40265e:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  402660:	3301      	adds	r3, #1
  402662:	b25b      	sxtb	r3, r3
  402664:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  402666:	4293      	cmp	r3, r2
  402668:	d3e7      	bcc.n	40263a <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  40266a:	4631      	mov	r1, r6
  40266c:	4620      	mov	r0, r4
  40266e:	4b1b      	ldr	r3, [pc, #108]	; (4026dc <_pwm_init+0x130>)
  402670:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  402672:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402676:	2b00      	cmp	r3, #0
  402678:	db0d      	blt.n	402696 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40267a:	095a      	lsrs	r2, r3, #5
  40267c:	f003 031f 	and.w	r3, r3, #31
  402680:	2101      	movs	r1, #1
  402682:	fa01 f303 	lsl.w	r3, r1, r3
  402686:	3220      	adds	r2, #32
  402688:	4915      	ldr	r1, [pc, #84]	; (4026e0 <_pwm_init+0x134>)
  40268a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40268e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402692:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  402696:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40269a:	2b00      	cmp	r3, #0
  40269c:	db09      	blt.n	4026b2 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40269e:	095a      	lsrs	r2, r3, #5
  4026a0:	f003 031f 	and.w	r3, r3, #31
  4026a4:	2101      	movs	r1, #1
  4026a6:	fa01 f303 	lsl.w	r3, r1, r3
  4026aa:	3260      	adds	r2, #96	; 0x60
  4026ac:	490c      	ldr	r1, [pc, #48]	; (4026e0 <_pwm_init+0x134>)
  4026ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  4026b2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4026b6:	2b00      	cmp	r3, #0
  4026b8:	db08      	blt.n	4026cc <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4026ba:	0959      	lsrs	r1, r3, #5
  4026bc:	f003 031f 	and.w	r3, r3, #31
  4026c0:	2201      	movs	r2, #1
  4026c2:	fa02 f303 	lsl.w	r3, r2, r3
  4026c6:	4a06      	ldr	r2, [pc, #24]	; (4026e0 <_pwm_init+0x134>)
  4026c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  4026cc:	2000      	movs	r0, #0
  4026ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4026d0:	00407be4 	.word	0x00407be4
  4026d4:	00401cbd 	.word	0x00401cbd
  4026d8:	0040251d 	.word	0x0040251d
  4026dc:	0040254d 	.word	0x0040254d
  4026e0:	e000e100 	.word	0xe000e100

004026e4 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  4026e4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  4026e6:	4604      	mov	r4, r0
  4026e8:	f240 12b5 	movw	r2, #437	; 0x1b5
  4026ec:	490b      	ldr	r1, [pc, #44]	; (40271c <_pwm_enable+0x38>)
  4026ee:	3000      	adds	r0, #0
  4026f0:	bf18      	it	ne
  4026f2:	2001      	movne	r0, #1
  4026f4:	4b0a      	ldr	r3, [pc, #40]	; (402720 <_pwm_enable+0x3c>)
  4026f6:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  4026f8:	6920      	ldr	r0, [r4, #16]
  4026fa:	4b0a      	ldr	r3, [pc, #40]	; (402724 <_pwm_enable+0x40>)
  4026fc:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4026fe:	2300      	movs	r3, #0
  402700:	e008      	b.n	402714 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  402702:	6921      	ldr	r1, [r4, #16]
  402704:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402706:	011a      	lsls	r2, r3, #4
  402708:	5cad      	ldrb	r5, [r5, r2]
  40270a:	2201      	movs	r2, #1
  40270c:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  40270e:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  402710:	3301      	adds	r3, #1
  402712:	b25b      	sxtb	r3, r3
  402714:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402716:	4293      	cmp	r3, r2
  402718:	d3f3      	bcc.n	402702 <_pwm_enable+0x1e>
	}
}
  40271a:	bd38      	pop	{r3, r4, r5, pc}
  40271c:	00407be4 	.word	0x00407be4
  402720:	00401cbd 	.word	0x00401cbd
  402724:	0040251d 	.word	0x0040251d

00402728 <_pwm_disable>:

void _pwm_disable(struct _pwm_device *const device)
{
  402728:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  40272a:	4604      	mov	r4, r0
  40272c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
  402730:	490b      	ldr	r1, [pc, #44]	; (402760 <_pwm_disable+0x38>)
  402732:	3000      	adds	r0, #0
  402734:	bf18      	it	ne
  402736:	2001      	movne	r0, #1
  402738:	4b0a      	ldr	r3, [pc, #40]	; (402764 <_pwm_disable+0x3c>)
  40273a:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  40273c:	6920      	ldr	r0, [r4, #16]
  40273e:	4b0a      	ldr	r3, [pc, #40]	; (402768 <_pwm_disable+0x40>)
  402740:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  402742:	2300      	movs	r3, #0
  402744:	e008      	b.n	402758 <_pwm_disable+0x30>
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
  402746:	6921      	ldr	r1, [r4, #16]
  402748:	6b05      	ldr	r5, [r0, #48]	; 0x30
  40274a:	011a      	lsls	r2, r3, #4
  40274c:	5cad      	ldrb	r5, [r5, r2]
  40274e:	2201      	movs	r2, #1
  402750:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_DIS_reg(const void *const hw, hri_pwm_dis_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_DIS = data;
  402752:	608a      	str	r2, [r1, #8]
	for (i = 0; i < cfg->ch_num; i++) {
  402754:	3301      	adds	r3, #1
  402756:	b25b      	sxtb	r3, r3
  402758:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40275a:	4293      	cmp	r3, r2
  40275c:	d3f3      	bcc.n	402746 <_pwm_disable+0x1e>
	}
}
  40275e:	bd38      	pop	{r3, r4, r5, pc}
  402760:	00407be4 	.word	0x00407be4
  402764:	00401cbd 	.word	0x00401cbd
  402768:	0040251d 	.word	0x0040251d

0040276c <_pwm_set_param>:

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  40276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40276e:	460d      	mov	r5, r1
  402770:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  402772:	4604      	mov	r4, r0
  402774:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  402778:	4911      	ldr	r1, [pc, #68]	; (4027c0 <_pwm_set_param+0x54>)
  40277a:	2800      	cmp	r0, #0
  40277c:	bf18      	it	ne
  40277e:	42ae      	cmpne	r6, r5
  402780:	bf34      	ite	cc
  402782:	2001      	movcc	r0, #1
  402784:	2000      	movcs	r0, #0
  402786:	4b0f      	ldr	r3, [pc, #60]	; (4027c4 <_pwm_set_param+0x58>)
  402788:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  40278a:	6920      	ldr	r0, [r4, #16]
  40278c:	4b0e      	ldr	r3, [pc, #56]	; (4027c8 <_pwm_set_param+0x5c>)
  40278e:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  402790:	2300      	movs	r3, #0
  402792:	e010      	b.n	4027b6 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  402794:	6922      	ldr	r2, [r4, #16]
  402796:	6b07      	ldr	r7, [r0, #48]	; 0x30
  402798:	0119      	lsls	r1, r3, #4
  40279a:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  40279c:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  4027a0:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  4027a4:	6922      	ldr	r2, [r4, #16]
  4027a6:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4027a8:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  4027aa:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  4027ae:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  4027b2:	3301      	adds	r3, #1
  4027b4:	b2db      	uxtb	r3, r3
  4027b6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4027b8:	4293      	cmp	r3, r2
  4027ba:	d3eb      	bcc.n	402794 <_pwm_set_param+0x28>
	}
}
  4027bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4027be:	bf00      	nop
  4027c0:	00407be4 	.word	0x00407be4
  4027c4:	00401cbd 	.word	0x00401cbd
  4027c8:	0040251d 	.word	0x0040251d

004027cc <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  4027cc:	b510      	push	{r4, lr}
	ASSERT(device);
  4027ce:	4604      	mov	r4, r0
  4027d0:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4027d4:	4907      	ldr	r1, [pc, #28]	; (4027f4 <_pwm_is_enabled+0x28>)
  4027d6:	3000      	adds	r0, #0
  4027d8:	bf18      	it	ne
  4027da:	2001      	movne	r0, #1
  4027dc:	4b06      	ldr	r3, [pc, #24]	; (4027f8 <_pwm_is_enabled+0x2c>)
  4027de:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  4027e0:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  4027e2:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  4027e4:	f013 0f0f 	tst.w	r3, #15
  4027e8:	d001      	beq.n	4027ee <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  4027ea:	2001      	movs	r0, #1
	}
}
  4027ec:	bd10      	pop	{r4, pc}
		return false;
  4027ee:	2000      	movs	r0, #0
  4027f0:	bd10      	pop	{r4, pc}
  4027f2:	bf00      	nop
  4027f4:	00407be4 	.word	0x00407be4
  4027f8:	00401cbd 	.word	0x00401cbd

004027fc <_pwm_set_irq_state>:

	return hri_pwm_read_CDTY_reg(device->hw, cfg->ch[0].index);
}

void _pwm_set_irq_state(struct _pwm_device *const device, const enum _pwm_callback_type type, const bool disable)
{
  4027fc:	b538      	push	{r3, r4, r5, lr}
  4027fe:	460d      	mov	r5, r1
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device);
  402800:	4604      	mov	r4, r0
  402802:	f44f 7200 	mov.w	r2, #512	; 0x200
  402806:	4912      	ldr	r1, [pc, #72]	; (402850 <_pwm_set_irq_state+0x54>)
  402808:	3000      	adds	r0, #0
  40280a:	bf18      	it	ne
  40280c:	2001      	movne	r0, #1
  40280e:	4b11      	ldr	r3, [pc, #68]	; (402854 <_pwm_set_irq_state+0x58>)
  402810:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  402812:	6920      	ldr	r0, [r4, #16]
  402814:	4b10      	ldr	r3, [pc, #64]	; (402858 <_pwm_set_irq_state+0x5c>)
  402816:	4798      	blx	r3

	if (PWM_DEVICE_PERIOD_CB == type) {
  402818:	b18d      	cbz	r5, 40283e <_pwm_set_irq_state+0x42>
		for (i = 0; i < cfg->ch_num; i++) {
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
		}
	} else if (PWM_DEVICE_ERROR_CB == type) {
  40281a:	2d01      	cmp	r5, #1
  40281c:	d011      	beq.n	402842 <_pwm_set_irq_state+0x46>
  40281e:	bd38      	pop	{r3, r4, r5, pc}
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
  402820:	6921      	ldr	r1, [r4, #16]
  402822:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402824:	0113      	lsls	r3, r2, #4
  402826:	5ced      	ldrb	r5, [r5, r3]
  402828:	2301      	movs	r3, #1
  40282a:	40ab      	lsls	r3, r5
	((Pwm *)hw)->PWM_IER1 = data;
  40282c:	610b      	str	r3, [r1, #16]
	((Pwm *)hw)->PWM_IDR1 = ~data;
  40282e:	43db      	mvns	r3, r3
  402830:	614b      	str	r3, [r1, #20]
		for (i = 0; i < cfg->ch_num; i++) {
  402832:	3201      	adds	r2, #1
  402834:	b2d2      	uxtb	r2, r2
  402836:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402838:	429a      	cmp	r2, r3
  40283a:	d3f1      	bcc.n	402820 <_pwm_set_irq_state+0x24>
  40283c:	bd38      	pop	{r3, r4, r5, pc}
  40283e:	2200      	movs	r2, #0
  402840:	e7f9      	b.n	402836 <_pwm_set_irq_state+0x3a>
		ASSERT(false);
  402842:	f240 2209 	movw	r2, #521	; 0x209
  402846:	4902      	ldr	r1, [pc, #8]	; (402850 <_pwm_set_irq_state+0x54>)
  402848:	2000      	movs	r0, #0
  40284a:	4b02      	ldr	r3, [pc, #8]	; (402854 <_pwm_set_irq_state+0x58>)
  40284c:	4798      	blx	r3
	}
}
  40284e:	e7e6      	b.n	40281e <_pwm_set_irq_state+0x22>
  402850:	00407be4 	.word	0x00407be4
  402854:	00401cbd 	.word	0x00401cbd
  402858:	0040251d 	.word	0x0040251d

0040285c <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  40285c:	2000      	movs	r0, #0
  40285e:	4770      	bx	lr

00402860 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  402860:	4b03      	ldr	r3, [pc, #12]	; (402870 <_system_time_init+0x10>)
  402862:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  402866:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  402868:	2205      	movs	r2, #5
  40286a:	601a      	str	r2, [r3, #0]
  40286c:	4770      	bx	lr
  40286e:	bf00      	nop
  402870:	e000e010 	.word	0xe000e010

00402874 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  402874:	b508      	push	{r3, lr}
	_system_time_init(hw);
  402876:	4b01      	ldr	r3, [pc, #4]	; (40287c <_delay_init+0x8>)
  402878:	4798      	blx	r3
  40287a:	bd08      	pop	{r3, pc}
  40287c:	00402861 	.word	0x00402861

00402880 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  402880:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  402882:	e00d      	b.n	4028a0 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  402884:	4b0d      	ldr	r3, [pc, #52]	; (4028bc <_delay_cycles+0x3c>)
  402886:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  40288a:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  40288c:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  40288e:	4b0b      	ldr	r3, [pc, #44]	; (4028bc <_delay_cycles+0x3c>)
  402890:	681b      	ldr	r3, [r3, #0]
  402892:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402896:	d0fa      	beq.n	40288e <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  402898:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  40289c:	3101      	adds	r1, #1
	while (n--) {
  40289e:	4610      	mov	r0, r2
  4028a0:	1e43      	subs	r3, r0, #1
  4028a2:	b2da      	uxtb	r2, r3
  4028a4:	2800      	cmp	r0, #0
  4028a6:	d1ed      	bne.n	402884 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  4028a8:	4b04      	ldr	r3, [pc, #16]	; (4028bc <_delay_cycles+0x3c>)
  4028aa:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4028ac:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4028ae:	4b03      	ldr	r3, [pc, #12]	; (4028bc <_delay_cycles+0x3c>)
  4028b0:	681b      	ldr	r3, [r3, #0]
  4028b2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4028b6:	d0fa      	beq.n	4028ae <_delay_cycles+0x2e>
		;
}
  4028b8:	4770      	bx	lr
  4028ba:	bf00      	nop
  4028bc:	e000e010 	.word	0xe000e010

004028c0 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4028c0:	2300      	movs	r3, #0
  4028c2:	2b01      	cmp	r3, #1
  4028c4:	d815      	bhi.n	4028f2 <get_cfg+0x32>
{
  4028c6:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  4028c8:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  4028cc:	008a      	lsls	r2, r1, #2
  4028ce:	490a      	ldr	r1, [pc, #40]	; (4028f8 <get_cfg+0x38>)
  4028d0:	588a      	ldr	r2, [r1, r2]
  4028d2:	4282      	cmp	r2, r0
  4028d4:	d007      	beq.n	4028e6 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4028d6:	3301      	adds	r3, #1
  4028d8:	b2db      	uxtb	r3, r3
  4028da:	2b01      	cmp	r3, #1
  4028dc:	d9f4      	bls.n	4028c8 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  4028de:	2000      	movs	r0, #0
}
  4028e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4028e4:	4770      	bx	lr
			return &(_tcs[i]);
  4028e6:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  4028ea:	00a3      	lsls	r3, r4, #2
  4028ec:	4608      	mov	r0, r1
  4028ee:	4418      	add	r0, r3
  4028f0:	e7f6      	b.n	4028e0 <get_cfg+0x20>
	return NULL;
  4028f2:	2000      	movs	r0, #0
  4028f4:	4770      	bx	lr
  4028f6:	bf00      	nop
  4028f8:	20400000 	.word	0x20400000

004028fc <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  4028fc:	4b06      	ldr	r3, [pc, #24]	; (402918 <_tc_init_irq_param+0x1c>)
  4028fe:	4298      	cmp	r0, r3
  402900:	d003      	beq.n	40290a <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  402902:	4b06      	ldr	r3, [pc, #24]	; (40291c <_tc_init_irq_param+0x20>)
  402904:	4298      	cmp	r0, r3
  402906:	d003      	beq.n	402910 <_tc_init_irq_param+0x14>
  402908:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  40290a:	4b05      	ldr	r3, [pc, #20]	; (402920 <_tc_init_irq_param+0x24>)
  40290c:	6019      	str	r1, [r3, #0]
  40290e:	e7f8      	b.n	402902 <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  402910:	4b03      	ldr	r3, [pc, #12]	; (402920 <_tc_init_irq_param+0x24>)
  402912:	6059      	str	r1, [r3, #4]
	}
}
  402914:	e7f8      	b.n	402908 <_tc_init_irq_param+0xc>
  402916:	bf00      	nop
  402918:	4000c000 	.word	0x4000c000
  40291c:	40054000 	.word	0x40054000
  402920:	2040039c 	.word	0x2040039c

00402924 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  402924:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  402926:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  402928:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  40292a:	f013 0f10 	tst.w	r3, #16
  40292e:	d100      	bne.n	402932 <tc_interrupt_handler+0xe>
  402930:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  402932:	6803      	ldr	r3, [r0, #0]
  402934:	4798      	blx	r3
	}
}
  402936:	e7fb      	b.n	402930 <tc_interrupt_handler+0xc>

00402938 <_timer_init>:
{
  402938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40293c:	4606      	mov	r6, r0
  40293e:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  402940:	4608      	mov	r0, r1
  402942:	4b2f      	ldr	r3, [pc, #188]	; (402a00 <_timer_init+0xc8>)
  402944:	4798      	blx	r3
  402946:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  402948:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  40294c:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  402950:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  402952:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  402956:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  402958:	22c3      	movs	r2, #195	; 0xc3
  40295a:	492a      	ldr	r1, [pc, #168]	; (402a04 <_timer_init+0xcc>)
  40295c:	2001      	movs	r0, #1
  40295e:	4b2a      	ldr	r3, [pc, #168]	; (402a08 <_timer_init+0xd0>)
  402960:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  402962:	f248 0307 	movw	r3, #32775	; 0x8007
  402966:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  402968:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  40296c:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  402970:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  402974:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  402976:	2300      	movs	r3, #0
  402978:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  40297a:	f248 020f 	movw	r2, #32783	; 0x800f
  40297e:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  402980:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  402984:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  402988:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  40298c:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  40298e:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  402990:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  402992:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  402996:	4631      	mov	r1, r6
  402998:	4620      	mov	r0, r4
  40299a:	4b1c      	ldr	r3, [pc, #112]	; (402a0c <_timer_init+0xd4>)
  40299c:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  40299e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4029a2:	2b00      	cmp	r3, #0
  4029a4:	db0d      	blt.n	4029c2 <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4029a6:	095a      	lsrs	r2, r3, #5
  4029a8:	f003 031f 	and.w	r3, r3, #31
  4029ac:	2101      	movs	r1, #1
  4029ae:	fa01 f303 	lsl.w	r3, r1, r3
  4029b2:	3220      	adds	r2, #32
  4029b4:	4916      	ldr	r1, [pc, #88]	; (402a10 <_timer_init+0xd8>)
  4029b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4029ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4029be:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  4029c2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4029c6:	2b00      	cmp	r3, #0
  4029c8:	db09      	blt.n	4029de <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4029ca:	095a      	lsrs	r2, r3, #5
  4029cc:	f003 031f 	and.w	r3, r3, #31
  4029d0:	2101      	movs	r1, #1
  4029d2:	fa01 f303 	lsl.w	r3, r1, r3
  4029d6:	3260      	adds	r2, #96	; 0x60
  4029d8:	490d      	ldr	r1, [pc, #52]	; (402a10 <_timer_init+0xd8>)
  4029da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  4029de:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4029e2:	2b00      	cmp	r3, #0
  4029e4:	db08      	blt.n	4029f8 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4029e6:	0959      	lsrs	r1, r3, #5
  4029e8:	f003 031f 	and.w	r3, r3, #31
  4029ec:	2201      	movs	r2, #1
  4029ee:	fa02 f303 	lsl.w	r3, r2, r3
  4029f2:	4a07      	ldr	r2, [pc, #28]	; (402a10 <_timer_init+0xd8>)
  4029f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  4029f8:	2000      	movs	r0, #0
  4029fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4029fe:	bf00      	nop
  402a00:	004028c1 	.word	0x004028c1
  402a04:	00407bfc 	.word	0x00407bfc
  402a08:	00401cbd 	.word	0x00401cbd
  402a0c:	004028fd 	.word	0x004028fd
  402a10:	e000e100 	.word	0xe000e100

00402a14 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402a14:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  402a16:	2305      	movs	r3, #5
  402a18:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402a1a:	68c2      	ldr	r2, [r0, #12]
  402a1c:	6413      	str	r3, [r2, #64]	; 0x40
  402a1e:	4770      	bx	lr

00402a20 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  402a20:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  402a22:	6a13      	ldr	r3, [r2, #32]
  402a24:	f3c3 4300 	ubfx	r3, r3, #16, #1
  402a28:	6e10      	ldr	r0, [r2, #96]	; 0x60
  402a2a:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  402a2e:	4318      	orrs	r0, r3
  402a30:	4770      	bx	lr

00402a32 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  402a32:	2000      	movs	r0, #0
  402a34:	4770      	bx	lr
	...

00402a38 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  402a38:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  402a3a:	4b02      	ldr	r3, [pc, #8]	; (402a44 <TC0_Handler+0xc>)
  402a3c:	6818      	ldr	r0, [r3, #0]
  402a3e:	4b02      	ldr	r3, [pc, #8]	; (402a48 <TC0_Handler+0x10>)
  402a40:	4798      	blx	r3
  402a42:	bd08      	pop	{r3, pc}
  402a44:	2040039c 	.word	0x2040039c
  402a48:	00402925 	.word	0x00402925

00402a4c <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  402a4c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  402a4e:	4b02      	ldr	r3, [pc, #8]	; (402a58 <TC9_Handler+0xc>)
  402a50:	6858      	ldr	r0, [r3, #4]
  402a52:	4b02      	ldr	r3, [pc, #8]	; (402a5c <TC9_Handler+0x10>)
  402a54:	4798      	blx	r3
  402a56:	bd08      	pop	{r3, pc}
  402a58:	2040039c 	.word	0x2040039c
  402a5c:	00402925 	.word	0x00402925

00402a60 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  402a60:	b510      	push	{r4, lr}
	ASSERT(hw);
  402a62:	4604      	mov	r4, r0
  402a64:	f240 222b 	movw	r2, #555	; 0x22b
  402a68:	4905      	ldr	r1, [pc, #20]	; (402a80 <_usart_get_hardware_index+0x20>)
  402a6a:	3000      	adds	r0, #0
  402a6c:	bf18      	it	ne
  402a6e:	2001      	movne	r0, #1
  402a70:	4b04      	ldr	r3, [pc, #16]	; (402a84 <_usart_get_hardware_index+0x24>)
  402a72:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  402a74:	4804      	ldr	r0, [pc, #16]	; (402a88 <_usart_get_hardware_index+0x28>)
  402a76:	4420      	add	r0, r4
}
  402a78:	f3c0 3087 	ubfx	r0, r0, #14, #8
  402a7c:	bd10      	pop	{r4, pc}
  402a7e:	bf00      	nop
  402a80:	00407c1c 	.word	0x00407c1c
  402a84:	00401cbd 	.word	0x00401cbd
  402a88:	bffdc000 	.word	0xbffdc000

00402a8c <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  402a8c:	b510      	push	{r4, lr}
	ASSERT(hw);
  402a8e:	4604      	mov	r4, r0
  402a90:	f240 2287 	movw	r2, #647	; 0x287
  402a94:	490e      	ldr	r1, [pc, #56]	; (402ad0 <_get_usart_index+0x44>)
  402a96:	3000      	adds	r0, #0
  402a98:	bf18      	it	ne
  402a9a:	2001      	movne	r0, #1
  402a9c:	4b0d      	ldr	r3, [pc, #52]	; (402ad4 <_get_usart_index+0x48>)
  402a9e:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  402aa0:	4620      	mov	r0, r4
  402aa2:	4b0d      	ldr	r3, [pc, #52]	; (402ad8 <_get_usart_index+0x4c>)
  402aa4:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  402aa6:	2300      	movs	r3, #0
  402aa8:	b143      	cbz	r3, 402abc <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  402aaa:	f240 2291 	movw	r2, #657	; 0x291
  402aae:	4908      	ldr	r1, [pc, #32]	; (402ad0 <_get_usart_index+0x44>)
  402ab0:	2000      	movs	r0, #0
  402ab2:	4b08      	ldr	r3, [pc, #32]	; (402ad4 <_get_usart_index+0x48>)
  402ab4:	4798      	blx	r3
	return 0;
  402ab6:	2300      	movs	r3, #0
}
  402ab8:	4618      	mov	r0, r3
  402aba:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  402abc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402ac0:	008a      	lsls	r2, r1, #2
  402ac2:	4906      	ldr	r1, [pc, #24]	; (402adc <_get_usart_index+0x50>)
  402ac4:	5c8a      	ldrb	r2, [r1, r2]
  402ac6:	4290      	cmp	r0, r2
  402ac8:	d0f6      	beq.n	402ab8 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  402aca:	3301      	adds	r3, #1
  402acc:	b2db      	uxtb	r3, r3
  402ace:	e7eb      	b.n	402aa8 <_get_usart_index+0x1c>
  402ad0:	00407c1c 	.word	0x00407c1c
  402ad4:	00401cbd 	.word	0x00401cbd
  402ad8:	00402a61 	.word	0x00402a61
  402adc:	00407c10 	.word	0x00407c10

00402ae0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  402ae0:	b510      	push	{r4, lr}
	ASSERT(hw);
  402ae2:	4604      	mov	r4, r0
  402ae4:	f240 229e 	movw	r2, #670	; 0x29e
  402ae8:	4911      	ldr	r1, [pc, #68]	; (402b30 <_usart_init+0x50>)
  402aea:	3000      	adds	r0, #0
  402aec:	bf18      	it	ne
  402aee:	2001      	movne	r0, #1
  402af0:	4b10      	ldr	r3, [pc, #64]	; (402b34 <_usart_init+0x54>)
  402af2:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  402af4:	4620      	mov	r0, r4
  402af6:	4b10      	ldr	r3, [pc, #64]	; (402b38 <_usart_init+0x58>)
  402af8:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  402afa:	4b10      	ldr	r3, [pc, #64]	; (402b3c <_usart_init+0x5c>)
  402afc:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  402b00:	2300      	movs	r3, #0
  402b02:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  402b04:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  402b06:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  402b08:	22ac      	movs	r2, #172	; 0xac
  402b0a:	6022      	str	r2, [r4, #0]
  402b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
  402b10:	6022      	str	r2, [r4, #0]
  402b12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402b16:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  402b18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  402b1c:	0081      	lsls	r1, r0, #2
  402b1e:	4a08      	ldr	r2, [pc, #32]	; (402b40 <_usart_init+0x60>)
  402b20:	440a      	add	r2, r1
  402b22:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  402b24:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  402b26:	4a07      	ldr	r2, [pc, #28]	; (402b44 <_usart_init+0x64>)
  402b28:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  402b2a:	4618      	mov	r0, r3
  402b2c:	bd10      	pop	{r4, pc}
  402b2e:	bf00      	nop
  402b30:	00407c1c 	.word	0x00407c1c
  402b34:	00401cbd 	.word	0x00401cbd
  402b38:	00402a8d 	.word	0x00402a8d
  402b3c:	55534100 	.word	0x55534100
  402b40:	00407c10 	.word	0x00407c10
  402b44:	000100f4 	.word	0x000100f4

00402b48 <_usart_sync_init>:
{
  402b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402b4a:	460c      	mov	r4, r1
	ASSERT(device);
  402b4c:	4e09      	ldr	r6, [pc, #36]	; (402b74 <_usart_sync_init+0x2c>)
  402b4e:	4607      	mov	r7, r0
  402b50:	22bd      	movs	r2, #189	; 0xbd
  402b52:	4631      	mov	r1, r6
  402b54:	3000      	adds	r0, #0
  402b56:	bf18      	it	ne
  402b58:	2001      	movne	r0, #1
  402b5a:	4d07      	ldr	r5, [pc, #28]	; (402b78 <_usart_sync_init+0x30>)
  402b5c:	47a8      	blx	r5
	ASSERT(hw);
  402b5e:	22be      	movs	r2, #190	; 0xbe
  402b60:	4631      	mov	r1, r6
  402b62:	1c20      	adds	r0, r4, #0
  402b64:	bf18      	it	ne
  402b66:	2001      	movne	r0, #1
  402b68:	47a8      	blx	r5
	device->hw = hw;
  402b6a:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  402b6c:	4620      	mov	r0, r4
  402b6e:	4b03      	ldr	r3, [pc, #12]	; (402b7c <_usart_sync_init+0x34>)
  402b70:	4798      	blx	r3
}
  402b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402b74:	00407c1c 	.word	0x00407c1c
  402b78:	00401cbd 	.word	0x00401cbd
  402b7c:	00402ae1 	.word	0x00402ae1

00402b80 <_usart_sync_enable>:
{
  402b80:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  402b82:	4e0a      	ldr	r6, [pc, #40]	; (402bac <_usart_sync_enable+0x2c>)
  402b84:	4604      	mov	r4, r0
  402b86:	f240 1205 	movw	r2, #261	; 0x105
  402b8a:	4631      	mov	r1, r6
  402b8c:	3000      	adds	r0, #0
  402b8e:	bf18      	it	ne
  402b90:	2001      	movne	r0, #1
  402b92:	4d07      	ldr	r5, [pc, #28]	; (402bb0 <_usart_sync_enable+0x30>)
  402b94:	47a8      	blx	r5
	_usart_enable(device->hw);
  402b96:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  402b98:	f240 22c7 	movw	r2, #711	; 0x2c7
  402b9c:	4631      	mov	r1, r6
  402b9e:	1c20      	adds	r0, r4, #0
  402ba0:	bf18      	it	ne
  402ba2:	2001      	movne	r0, #1
  402ba4:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  402ba6:	2350      	movs	r3, #80	; 0x50
  402ba8:	6023      	str	r3, [r4, #0]
  402baa:	bd70      	pop	{r4, r5, r6, pc}
  402bac:	00407c1c 	.word	0x00407c1c
  402bb0:	00401cbd 	.word	0x00401cbd

00402bb4 <_usart_sync_write_byte>:
{
  402bb4:	b538      	push	{r3, r4, r5, lr}
  402bb6:	460c      	mov	r4, r1
	ASSERT(device);
  402bb8:	4605      	mov	r5, r0
  402bba:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  402bbe:	4904      	ldr	r1, [pc, #16]	; (402bd0 <_usart_sync_write_byte+0x1c>)
  402bc0:	3000      	adds	r0, #0
  402bc2:	bf18      	it	ne
  402bc4:	2001      	movne	r0, #1
  402bc6:	4b03      	ldr	r3, [pc, #12]	; (402bd4 <_usart_sync_write_byte+0x20>)
  402bc8:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  402bca:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  402bcc:	61dc      	str	r4, [r3, #28]
  402bce:	bd38      	pop	{r3, r4, r5, pc}
  402bd0:	00407c1c 	.word	0x00407c1c
  402bd4:	00401cbd 	.word	0x00401cbd

00402bd8 <_usart_sync_read_byte>:
{
  402bd8:	b510      	push	{r4, lr}
	ASSERT(device);
  402bda:	4604      	mov	r4, r0
  402bdc:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  402be0:	4904      	ldr	r1, [pc, #16]	; (402bf4 <_usart_sync_read_byte+0x1c>)
  402be2:	3000      	adds	r0, #0
  402be4:	bf18      	it	ne
  402be6:	2001      	movne	r0, #1
  402be8:	4b03      	ldr	r3, [pc, #12]	; (402bf8 <_usart_sync_read_byte+0x20>)
  402bea:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  402bec:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  402bee:	6998      	ldr	r0, [r3, #24]
}
  402bf0:	b2c0      	uxtb	r0, r0
  402bf2:	bd10      	pop	{r4, pc}
  402bf4:	00407c1c 	.word	0x00407c1c
  402bf8:	00401cbd 	.word	0x00401cbd

00402bfc <_usart_sync_is_ready_to_send>:
{
  402bfc:	b510      	push	{r4, lr}
	ASSERT(device);
  402bfe:	4604      	mov	r4, r0
  402c00:	f240 12c3 	movw	r2, #451	; 0x1c3
  402c04:	4905      	ldr	r1, [pc, #20]	; (402c1c <_usart_sync_is_ready_to_send+0x20>)
  402c06:	3000      	adds	r0, #0
  402c08:	bf18      	it	ne
  402c0a:	2001      	movne	r0, #1
  402c0c:	4b04      	ldr	r3, [pc, #16]	; (402c20 <_usart_sync_is_ready_to_send+0x24>)
  402c0e:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  402c10:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  402c12:	6958      	ldr	r0, [r3, #20]
}
  402c14:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402c18:	bd10      	pop	{r4, pc}
  402c1a:	bf00      	nop
  402c1c:	00407c1c 	.word	0x00407c1c
  402c20:	00401cbd 	.word	0x00401cbd

00402c24 <_usart_sync_is_transmit_done>:
{
  402c24:	b510      	push	{r4, lr}
	ASSERT(device);
  402c26:	4604      	mov	r4, r0
  402c28:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  402c2c:	4905      	ldr	r1, [pc, #20]	; (402c44 <_usart_sync_is_transmit_done+0x20>)
  402c2e:	3000      	adds	r0, #0
  402c30:	bf18      	it	ne
  402c32:	2001      	movne	r0, #1
  402c34:	4b04      	ldr	r3, [pc, #16]	; (402c48 <_usart_sync_is_transmit_done+0x24>)
  402c36:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  402c38:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  402c3a:	6958      	ldr	r0, [r3, #20]
}
  402c3c:	f3c0 2040 	ubfx	r0, r0, #9, #1
  402c40:	bd10      	pop	{r4, pc}
  402c42:	bf00      	nop
  402c44:	00407c1c 	.word	0x00407c1c
  402c48:	00401cbd 	.word	0x00401cbd

00402c4c <_usart_sync_is_byte_received>:
{
  402c4c:	b510      	push	{r4, lr}
	ASSERT(device);
  402c4e:	4604      	mov	r4, r0
  402c50:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402c54:	4905      	ldr	r1, [pc, #20]	; (402c6c <_usart_sync_is_byte_received+0x20>)
  402c56:	3000      	adds	r0, #0
  402c58:	bf18      	it	ne
  402c5a:	2001      	movne	r0, #1
  402c5c:	4b04      	ldr	r3, [pc, #16]	; (402c70 <_usart_sync_is_byte_received+0x24>)
  402c5e:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  402c60:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  402c62:	6958      	ldr	r0, [r3, #20]
  402c64:	f000 0001 	and.w	r0, r0, #1
}
  402c68:	bd10      	pop	{r4, pc}
  402c6a:	bf00      	nop
  402c6c:	00407c1c 	.word	0x00407c1c
  402c70:	00401cbd 	.word	0x00401cbd

00402c74 <_usart_get_usart_sync>:
}
  402c74:	2000      	movs	r0, #0
  402c76:	4770      	bx	lr

00402c78 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  402c78:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  402c7a:	2300      	movs	r3, #0
  402c7c:	e004      	b.n	402c88 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  402c7e:	0199      	lsls	r1, r3, #6
  402c80:	4a16      	ldr	r2, [pc, #88]	; (402cdc <_dma_init+0x64>)
  402c82:	5852      	ldr	r2, [r2, r1]
  402c84:	3301      	adds	r3, #1
  402c86:	b2db      	uxtb	r3, r3
  402c88:	2b17      	cmp	r3, #23
  402c8a:	d9f8      	bls.n	402c7e <_dma_init+0x6>
  402c8c:	2300      	movs	r3, #0
  402c8e:	e014      	b.n	402cba <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  402c90:	4c13      	ldr	r4, [pc, #76]	; (402ce0 <_dma_init+0x68>)
  402c92:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  402c96:	2100      	movs	r1, #0
  402c98:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  402c9a:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  402c9c:	1c98      	adds	r0, r3, #2
  402c9e:	0180      	lsls	r0, r0, #6
  402ca0:	1825      	adds	r5, r4, r0
  402ca2:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  402ca4:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  402ca6:	490f      	ldr	r1, [pc, #60]	; (402ce4 <_dma_init+0x6c>)
  402ca8:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  402cac:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  402cae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  402cb2:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  402cb4:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  402cb6:	3301      	adds	r3, #1
  402cb8:	b2db      	uxtb	r3, r3
  402cba:	2b17      	cmp	r3, #23
  402cbc:	d9e8      	bls.n	402c90 <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402cbe:	4b0a      	ldr	r3, [pc, #40]	; (402ce8 <_dma_init+0x70>)
  402cc0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  402cc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402ccc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402cd0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402cd4:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  402cd6:	2000      	movs	r0, #0
  402cd8:	bc30      	pop	{r4, r5}
  402cda:	4770      	bx	lr
  402cdc:	4007805c 	.word	0x4007805c
  402ce0:	40078000 	.word	0x40078000
  402ce4:	00407c38 	.word	0x00407c38
  402ce8:	e000e100 	.word	0xe000e100

00402cec <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  402cec:	0180      	lsls	r0, r0, #6
  402cee:	4b02      	ldr	r3, [pc, #8]	; (402cf8 <_dma_set_destination_address+0xc>)
  402cf0:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  402cf2:	2000      	movs	r0, #0
  402cf4:	4770      	bx	lr
  402cf6:	bf00      	nop
  402cf8:	40078064 	.word	0x40078064

00402cfc <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  402cfc:	0180      	lsls	r0, r0, #6
  402cfe:	4b02      	ldr	r3, [pc, #8]	; (402d08 <_dma_set_source_address+0xc>)
  402d00:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  402d02:	2000      	movs	r0, #0
  402d04:	4770      	bx	lr
  402d06:	bf00      	nop
  402d08:	40078060 	.word	0x40078060

00402d0c <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  402d0c:	0180      	lsls	r0, r0, #6
  402d0e:	4a04      	ldr	r2, [pc, #16]	; (402d20 <_dma_set_data_amount+0x14>)
  402d10:	4402      	add	r2, r0
  402d12:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  402d14:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  402d18:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  402d1a:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  402d1c:	2000      	movs	r0, #0
  402d1e:	4770      	bx	lr
  402d20:	40078000 	.word	0x40078000

00402d24 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  402d24:	2301      	movs	r3, #1
  402d26:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  402d2a:	4b03      	ldr	r3, [pc, #12]	; (402d38 <_dma_enable_transaction+0x14>)
  402d2c:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  402d2e:	b101      	cbz	r1, 402d32 <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  402d30:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  402d32:	2000      	movs	r0, #0
  402d34:	4770      	bx	lr
  402d36:	bf00      	nop
  402d38:	40078000 	.word	0x40078000

00402d3c <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  402d3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  402d40:	008a      	lsls	r2, r1, #2
  402d42:	4b02      	ldr	r3, [pc, #8]	; (402d4c <_dma_get_channel_resource+0x10>)
  402d44:	4413      	add	r3, r2
  402d46:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  402d48:	2000      	movs	r0, #0
  402d4a:	4770      	bx	lr
  402d4c:	204003a4 	.word	0x204003a4

00402d50 <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  402d50:	b19a      	cbz	r2, 402d7a <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  402d52:	b951      	cbnz	r1, 402d6a <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  402d54:	0182      	lsls	r2, r0, #6
  402d56:	4b13      	ldr	r3, [pc, #76]	; (402da4 <_dma_set_irq_state+0x54>)
  402d58:	4413      	add	r3, r2
  402d5a:	2201      	movs	r2, #1
  402d5c:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  402d5e:	2301      	movs	r3, #1
  402d60:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  402d64:	4b0f      	ldr	r3, [pc, #60]	; (402da4 <_dma_set_irq_state+0x54>)
  402d66:	60d8      	str	r0, [r3, #12]
  402d68:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  402d6a:	2901      	cmp	r1, #1
  402d6c:	d1f7      	bne.n	402d5e <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  402d6e:	0182      	lsls	r2, r0, #6
  402d70:	4b0c      	ldr	r3, [pc, #48]	; (402da4 <_dma_set_irq_state+0x54>)
  402d72:	4413      	add	r3, r2
  402d74:	2270      	movs	r2, #112	; 0x70
  402d76:	651a      	str	r2, [r3, #80]	; 0x50
  402d78:	e7f1      	b.n	402d5e <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  402d7a:	b951      	cbnz	r1, 402d92 <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  402d7c:	0182      	lsls	r2, r0, #6
  402d7e:	4b09      	ldr	r3, [pc, #36]	; (402da4 <_dma_set_irq_state+0x54>)
  402d80:	4413      	add	r3, r2
  402d82:	2201      	movs	r2, #1
  402d84:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  402d86:	2301      	movs	r3, #1
  402d88:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  402d8c:	4b05      	ldr	r3, [pc, #20]	; (402da4 <_dma_set_irq_state+0x54>)
  402d8e:	6118      	str	r0, [r3, #16]
  402d90:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  402d92:	2901      	cmp	r1, #1
  402d94:	d1f7      	bne.n	402d86 <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  402d96:	0182      	lsls	r2, r0, #6
  402d98:	4b02      	ldr	r3, [pc, #8]	; (402da4 <_dma_set_irq_state+0x54>)
  402d9a:	4413      	add	r3, r2
  402d9c:	2270      	movs	r2, #112	; 0x70
  402d9e:	655a      	str	r2, [r3, #84]	; 0x54
  402da0:	e7f1      	b.n	402d86 <_dma_set_irq_state+0x36>
  402da2:	bf00      	nop
  402da4:	40078000 	.word	0x40078000

00402da8 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  402da8:	4b17      	ldr	r3, [pc, #92]	; (402e08 <XDMAC_Handler+0x60>)
  402daa:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  402dac:	2300      	movs	r3, #0
  402dae:	2b17      	cmp	r3, #23
  402db0:	d81b      	bhi.n	402dea <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  402db2:	fa21 f203 	lsr.w	r2, r1, r3
  402db6:	f012 0f01 	tst.w	r2, #1
  402dba:	d102      	bne.n	402dc2 <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  402dbc:	3301      	adds	r3, #1
  402dbe:	b2db      	uxtb	r3, r3
  402dc0:	e7f5      	b.n	402dae <XDMAC_Handler+0x6>
			channel = i;
  402dc2:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  402dc4:	2b00      	cmp	r3, #0
  402dc6:	db1d      	blt.n	402e04 <XDMAC_Handler+0x5c>
{
  402dc8:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  402dca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  402dce:	0090      	lsls	r0, r2, #2
  402dd0:	4a0e      	ldr	r2, [pc, #56]	; (402e0c <XDMAC_Handler+0x64>)
  402dd2:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  402dd4:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  402dd6:	0189      	lsls	r1, r1, #6
  402dd8:	4a0d      	ldr	r2, [pc, #52]	; (402e10 <XDMAC_Handler+0x68>)
  402dda:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  402ddc:	f012 0f70 	tst.w	r2, #112	; 0x70
  402de0:	d106      	bne.n	402df0 <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  402de2:	f012 0f01 	tst.w	r2, #1
  402de6:	d106      	bne.n	402df6 <XDMAC_Handler+0x4e>
  402de8:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  402dea:	f04f 33ff 	mov.w	r3, #4294967295
  402dee:	e7e9      	b.n	402dc4 <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  402df0:	6843      	ldr	r3, [r0, #4]
  402df2:	4798      	blx	r3
  402df4:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  402df6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  402dfa:	00a3      	lsls	r3, r4, #2
  402dfc:	4a03      	ldr	r2, [pc, #12]	; (402e0c <XDMAC_Handler+0x64>)
  402dfe:	58d3      	ldr	r3, [r2, r3]
  402e00:	4798      	blx	r3
  402e02:	e7f1      	b.n	402de8 <XDMAC_Handler+0x40>
  402e04:	4770      	bx	lr
  402e06:	bf00      	nop
  402e08:	40078000 	.word	0x40078000
  402e0c:	204003a4 	.word	0x204003a4
  402e10:	4007805c 	.word	0x4007805c

00402e14 <main>:




int main(void)
{
  402e14:	b508      	push	{r3, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  402e16:	4b11      	ldr	r3, [pc, #68]	; (402e5c <main+0x48>)
  402e18:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	/* Additional User initialisation */
	dma_adc_init();
  402e1a:	4b11      	ldr	r3, [pc, #68]	; (402e60 <main+0x4c>)
  402e1c:	4798      	blx	r3
	pwm_init_user();
  402e1e:	4b11      	ldr	r3, [pc, #68]	; (402e64 <main+0x50>)
  402e20:	4798      	blx	r3
	encoder_init();
  402e22:	4b11      	ldr	r3, [pc, #68]	; (402e68 <main+0x54>)
  402e24:	4798      	blx	r3
	pos_sens_init();
  402e26:	4b11      	ldr	r3, [pc, #68]	; (402e6c <main+0x58>)
  402e28:	4798      	blx	r3
	
	/* Enable all devices */
	pwm_enable_all();
  402e2a:	4b11      	ldr	r3, [pc, #68]	; (402e70 <main+0x5c>)
  402e2c:	4798      	blx	r3
	adc_enable_all();
  402e2e:	4b11      	ldr	r3, [pc, #68]	; (402e74 <main+0x60>)
  402e30:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  402e32:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  402e36:	4b10      	ldr	r3, [pc, #64]	; (402e78 <main+0x64>)
  402e38:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);		//enables the DC-DC converter for the HV side
	
	timer_start(&ENCODER_A);
  402e3a:	4810      	ldr	r0, [pc, #64]	; (402e7c <main+0x68>)
  402e3c:	4c10      	ldr	r4, [pc, #64]	; (402e80 <main+0x6c>)
  402e3e:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  402e40:	4810      	ldr	r0, [pc, #64]	; (402e84 <main+0x70>)
  402e42:	47a0      	blx	r4
	//Encoder_Initial_Test();
	
	//test position sensor
	//POS_Sensor_Initial_Test();
	
	Control_Function_Test();
  402e44:	4b10      	ldr	r3, [pc, #64]	; (402e88 <main+0x74>)
  402e46:	4798      	blx	r3
	
	
	pwm_set_duty(PWM_PHASE_B, 500);
  402e48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  402e4c:	2102      	movs	r1, #2
  402e4e:	480f      	ldr	r0, [pc, #60]	; (402e8c <main+0x78>)
  402e50:	4b0f      	ldr	r3, [pc, #60]	; (402e90 <main+0x7c>)
  402e52:	4798      	blx	r3
	pwm_disable(&PWM_1);
  402e54:	480f      	ldr	r0, [pc, #60]	; (402e94 <main+0x80>)
  402e56:	4b10      	ldr	r3, [pc, #64]	; (402e98 <main+0x84>)
  402e58:	4798      	blx	r3
  402e5a:	e7fe      	b.n	402e5a <main+0x46>
  402e5c:	004001d5 	.word	0x004001d5
  402e60:	00400bf9 	.word	0x00400bf9
  402e64:	00400d55 	.word	0x00400d55
  402e68:	00400651 	.word	0x00400651
  402e6c:	0040096d 	.word	0x0040096d
  402e70:	00400e29 	.word	0x00400e29
  402e74:	00400ce5 	.word	0x00400ce5
  402e78:	400e0e00 	.word	0x400e0e00
  402e7c:	20400698 	.word	0x20400698
  402e80:	00401b3d 	.word	0x00401b3d
  402e84:	204005e8 	.word	0x204005e8
  402e88:	00400e99 	.word	0x00400e99
  402e8c:	204005cc 	.word	0x204005cc
  402e90:	00400e89 	.word	0x00400e89
  402e94:	20400770 	.word	0x20400770
  402e98:	00401995 	.word	0x00401995

00402e9c <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  402e9c:	b958      	cbnz	r0, 402eb6 <_read+0x1a>
{
  402e9e:	b508      	push	{r3, lr}
  402ea0:	460b      	mov	r3, r1
  402ea2:	4611      	mov	r1, r2
  402ea4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  402ea6:	4b05      	ldr	r3, [pc, #20]	; (402ebc <_read+0x20>)
  402ea8:	4798      	blx	r3
	if (n < 0) {
  402eaa:	2800      	cmp	r0, #0
  402eac:	db00      	blt.n	402eb0 <_read+0x14>
		return -1;
	}

	return n;
}
  402eae:	bd08      	pop	{r3, pc}
		return -1;
  402eb0:	f04f 30ff 	mov.w	r0, #4294967295
  402eb4:	bd08      	pop	{r3, pc}
		return -1;
  402eb6:	f04f 30ff 	mov.w	r0, #4294967295
  402eba:	4770      	bx	lr
  402ebc:	00402f15 	.word	0x00402f15

00402ec0 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  402ec0:	3801      	subs	r0, #1
  402ec2:	2802      	cmp	r0, #2
  402ec4:	d80b      	bhi.n	402ede <_write+0x1e>
{
  402ec6:	b508      	push	{r3, lr}
  402ec8:	460b      	mov	r3, r1
  402eca:	4611      	mov	r1, r2
  402ecc:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  402ece:	4b05      	ldr	r3, [pc, #20]	; (402ee4 <_write+0x24>)
  402ed0:	4798      	blx	r3
	if (n < 0) {
  402ed2:	2800      	cmp	r0, #0
  402ed4:	db00      	blt.n	402ed8 <_write+0x18>
		return -1;
	}

	return n;
}
  402ed6:	bd08      	pop	{r3, pc}
		return -1;
  402ed8:	f04f 30ff 	mov.w	r0, #4294967295
  402edc:	bd08      	pop	{r3, pc}
		return -1;
  402ede:	f04f 30ff 	mov.w	r0, #4294967295
  402ee2:	4770      	bx	lr
  402ee4:	00402f39 	.word	0x00402f39

00402ee8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  402ee8:	b570      	push	{r4, r5, r6, lr}
  402eea:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  402eec:	4d06      	ldr	r5, [pc, #24]	; (402f08 <stdio_io_init+0x20>)
  402eee:	682b      	ldr	r3, [r5, #0]
  402ef0:	2100      	movs	r1, #0
  402ef2:	6898      	ldr	r0, [r3, #8]
  402ef4:	4c05      	ldr	r4, [pc, #20]	; (402f0c <stdio_io_init+0x24>)
  402ef6:	47a0      	blx	r4
	setbuf(stdin, NULL);
  402ef8:	682b      	ldr	r3, [r5, #0]
  402efa:	2100      	movs	r1, #0
  402efc:	6858      	ldr	r0, [r3, #4]
  402efe:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  402f00:	4b03      	ldr	r3, [pc, #12]	; (402f10 <stdio_io_init+0x28>)
  402f02:	601e      	str	r6, [r3, #0]
  402f04:	bd70      	pop	{r4, r5, r6, pc}
  402f06:	bf00      	nop
  402f08:	2040004c 	.word	0x2040004c
  402f0c:	004058c5 	.word	0x004058c5
  402f10:	204004c4 	.word	0x204004c4

00402f14 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  402f14:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  402f16:	4b06      	ldr	r3, [pc, #24]	; (402f30 <stdio_io_read+0x1c>)
  402f18:	681b      	ldr	r3, [r3, #0]
  402f1a:	b133      	cbz	r3, 402f2a <stdio_io_read+0x16>
  402f1c:	460a      	mov	r2, r1
  402f1e:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  402f20:	b292      	uxth	r2, r2
  402f22:	4618      	mov	r0, r3
  402f24:	4b03      	ldr	r3, [pc, #12]	; (402f34 <stdio_io_read+0x20>)
  402f26:	4798      	blx	r3
  402f28:	bd08      	pop	{r3, pc}
		return 0;
  402f2a:	2000      	movs	r0, #0
}
  402f2c:	bd08      	pop	{r3, pc}
  402f2e:	bf00      	nop
  402f30:	204004c4 	.word	0x204004c4
  402f34:	004018d1 	.word	0x004018d1

00402f38 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  402f38:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  402f3a:	4b06      	ldr	r3, [pc, #24]	; (402f54 <stdio_io_write+0x1c>)
  402f3c:	681b      	ldr	r3, [r3, #0]
  402f3e:	b133      	cbz	r3, 402f4e <stdio_io_write+0x16>
  402f40:	460a      	mov	r2, r1
  402f42:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  402f44:	b292      	uxth	r2, r2
  402f46:	4618      	mov	r0, r3
  402f48:	4b03      	ldr	r3, [pc, #12]	; (402f58 <stdio_io_write+0x20>)
  402f4a:	4798      	blx	r3
  402f4c:	bd08      	pop	{r3, pc}
		return 0;
  402f4e:	2000      	movs	r0, #0
}
  402f50:	bd08      	pop	{r3, pc}
  402f52:	bf00      	nop
  402f54:	204004c4 	.word	0x204004c4
  402f58:	004018a1 	.word	0x004018a1

00402f5c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  402f5c:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  402f5e:	4c04      	ldr	r4, [pc, #16]	; (402f70 <stdio_redirect_init+0x14>)
  402f60:	4620      	mov	r0, r4
  402f62:	4b04      	ldr	r3, [pc, #16]	; (402f74 <stdio_redirect_init+0x18>)
  402f64:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  402f66:	4620      	mov	r0, r4
  402f68:	4b03      	ldr	r3, [pc, #12]	; (402f78 <stdio_redirect_init+0x1c>)
  402f6a:	4798      	blx	r3
  402f6c:	bd10      	pop	{r4, pc}
  402f6e:	bf00      	nop
  402f70:	2040068c 	.word	0x2040068c
  402f74:	00401c91 	.word	0x00401c91
  402f78:	00402ee9 	.word	0x00402ee9

00402f7c <cos>:
  402f7c:	b530      	push	{r4, r5, lr}
  402f7e:	4a22      	ldr	r2, [pc, #136]	; (403008 <cos+0x8c>)
  402f80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  402f84:	4293      	cmp	r3, r2
  402f86:	b087      	sub	sp, #28
  402f88:	dd1b      	ble.n	402fc2 <cos+0x46>
  402f8a:	4a20      	ldr	r2, [pc, #128]	; (40300c <cos+0x90>)
  402f8c:	4293      	cmp	r3, r2
  402f8e:	dd05      	ble.n	402f9c <cos+0x20>
  402f90:	4602      	mov	r2, r0
  402f92:	460b      	mov	r3, r1
  402f94:	f001 fb06 	bl	4045a4 <__aeabi_dsub>
  402f98:	b007      	add	sp, #28
  402f9a:	bd30      	pop	{r4, r5, pc}
  402f9c:	aa02      	add	r2, sp, #8
  402f9e:	f000 f8db 	bl	403158 <__ieee754_rem_pio2>
  402fa2:	f000 0303 	and.w	r3, r0, #3
  402fa6:	2b01      	cmp	r3, #1
  402fa8:	d01a      	beq.n	402fe0 <cos+0x64>
  402faa:	2b02      	cmp	r3, #2
  402fac:	d00f      	beq.n	402fce <cos+0x52>
  402fae:	b31b      	cbz	r3, 402ff8 <cos+0x7c>
  402fb0:	2401      	movs	r4, #1
  402fb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402fba:	9400      	str	r4, [sp, #0]
  402fbc:	f001 f918 	bl	4041f0 <__kernel_sin>
  402fc0:	e7ea      	b.n	402f98 <cos+0x1c>
  402fc2:	2200      	movs	r2, #0
  402fc4:	2300      	movs	r3, #0
  402fc6:	f000 fba7 	bl	403718 <__kernel_cos>
  402fca:	b007      	add	sp, #28
  402fcc:	bd30      	pop	{r4, r5, pc}
  402fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402fd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402fd6:	f000 fb9f 	bl	403718 <__kernel_cos>
  402fda:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402fde:	e7db      	b.n	402f98 <cos+0x1c>
  402fe0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  402fe4:	9300      	str	r3, [sp, #0]
  402fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402fea:	4622      	mov	r2, r4
  402fec:	462b      	mov	r3, r5
  402fee:	f001 f8ff 	bl	4041f0 <__kernel_sin>
  402ff2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402ff6:	e7cf      	b.n	402f98 <cos+0x1c>
  402ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403000:	f000 fb8a 	bl	403718 <__kernel_cos>
  403004:	e7c8      	b.n	402f98 <cos+0x1c>
  403006:	bf00      	nop
  403008:	3fe921fb 	.word	0x3fe921fb
  40300c:	7fefffff 	.word	0x7fefffff

00403010 <sin>:
  403010:	b530      	push	{r4, r5, lr}
  403012:	4a1f      	ldr	r2, [pc, #124]	; (403090 <sin+0x80>)
  403014:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  403018:	4293      	cmp	r3, r2
  40301a:	b087      	sub	sp, #28
  40301c:	dd1b      	ble.n	403056 <sin+0x46>
  40301e:	4a1d      	ldr	r2, [pc, #116]	; (403094 <sin+0x84>)
  403020:	4293      	cmp	r3, r2
  403022:	dd05      	ble.n	403030 <sin+0x20>
  403024:	4602      	mov	r2, r0
  403026:	460b      	mov	r3, r1
  403028:	f001 fabc 	bl	4045a4 <__aeabi_dsub>
  40302c:	b007      	add	sp, #28
  40302e:	bd30      	pop	{r4, r5, pc}
  403030:	aa02      	add	r2, sp, #8
  403032:	f000 f891 	bl	403158 <__ieee754_rem_pio2>
  403036:	f000 0003 	and.w	r0, r0, #3
  40303a:	2801      	cmp	r0, #1
  40303c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403040:	d01a      	beq.n	403078 <sin+0x68>
  403042:	2802      	cmp	r0, #2
  403044:	d00f      	beq.n	403066 <sin+0x56>
  403046:	b1e0      	cbz	r0, 403082 <sin+0x72>
  403048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40304c:	f000 fb64 	bl	403718 <__kernel_cos>
  403050:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403054:	e7ea      	b.n	40302c <sin+0x1c>
  403056:	2300      	movs	r3, #0
  403058:	9300      	str	r3, [sp, #0]
  40305a:	2200      	movs	r2, #0
  40305c:	2300      	movs	r3, #0
  40305e:	f001 f8c7 	bl	4041f0 <__kernel_sin>
  403062:	b007      	add	sp, #28
  403064:	bd30      	pop	{r4, r5, pc}
  403066:	2401      	movs	r4, #1
  403068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40306c:	9400      	str	r4, [sp, #0]
  40306e:	f001 f8bf 	bl	4041f0 <__kernel_sin>
  403072:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403076:	e7d9      	b.n	40302c <sin+0x1c>
  403078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40307c:	f000 fb4c 	bl	403718 <__kernel_cos>
  403080:	e7d4      	b.n	40302c <sin+0x1c>
  403082:	2401      	movs	r4, #1
  403084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403088:	9400      	str	r4, [sp, #0]
  40308a:	f001 f8b1 	bl	4041f0 <__kernel_sin>
  40308e:	e7cd      	b.n	40302c <sin+0x1c>
  403090:	3fe921fb 	.word	0x3fe921fb
  403094:	7fefffff 	.word	0x7fefffff

00403098 <sqrt>:
  403098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40309c:	b08b      	sub	sp, #44	; 0x2c
  40309e:	4604      	mov	r4, r0
  4030a0:	460d      	mov	r5, r1
  4030a2:	f000 fa7b 	bl	40359c <__ieee754_sqrt>
  4030a6:	4b29      	ldr	r3, [pc, #164]	; (40314c <sqrt+0xb4>)
  4030a8:	f993 a000 	ldrsb.w	sl, [r3]
  4030ac:	f1ba 3fff 	cmp.w	sl, #4294967295
  4030b0:	4606      	mov	r6, r0
  4030b2:	460f      	mov	r7, r1
  4030b4:	d012      	beq.n	4030dc <sqrt+0x44>
  4030b6:	4622      	mov	r2, r4
  4030b8:	462b      	mov	r3, r5
  4030ba:	4620      	mov	r0, r4
  4030bc:	4629      	mov	r1, r5
  4030be:	f001 febf 	bl	404e40 <__aeabi_dcmpun>
  4030c2:	4683      	mov	fp, r0
  4030c4:	b950      	cbnz	r0, 4030dc <sqrt+0x44>
  4030c6:	f04f 0800 	mov.w	r8, #0
  4030ca:	f04f 0900 	mov.w	r9, #0
  4030ce:	4642      	mov	r2, r8
  4030d0:	464b      	mov	r3, r9
  4030d2:	4620      	mov	r0, r4
  4030d4:	4629      	mov	r1, r5
  4030d6:	f001 fe8b 	bl	404df0 <__aeabi_dcmplt>
  4030da:	b920      	cbnz	r0, 4030e6 <sqrt+0x4e>
  4030dc:	4630      	mov	r0, r6
  4030de:	4639      	mov	r1, r7
  4030e0:	b00b      	add	sp, #44	; 0x2c
  4030e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030e6:	4b1a      	ldr	r3, [pc, #104]	; (403150 <sqrt+0xb8>)
  4030e8:	f8cd b020 	str.w	fp, [sp, #32]
  4030ec:	2201      	movs	r2, #1
  4030ee:	e9cd 4504 	strd	r4, r5, [sp, #16]
  4030f2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4030f6:	e88d 000c 	stmia.w	sp, {r2, r3}
  4030fa:	f1ba 0f00 	cmp.w	sl, #0
  4030fe:	d017      	beq.n	403130 <sqrt+0x98>
  403100:	4642      	mov	r2, r8
  403102:	464b      	mov	r3, r9
  403104:	4640      	mov	r0, r8
  403106:	4649      	mov	r1, r9
  403108:	f001 fd2a 	bl	404b60 <__aeabi_ddiv>
  40310c:	f1ba 0f02 	cmp.w	sl, #2
  403110:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403114:	d10e      	bne.n	403134 <sqrt+0x9c>
  403116:	f001 ff21 	bl	404f5c <__errno>
  40311a:	2321      	movs	r3, #33	; 0x21
  40311c:	6003      	str	r3, [r0, #0]
  40311e:	9b08      	ldr	r3, [sp, #32]
  403120:	b973      	cbnz	r3, 403140 <sqrt+0xa8>
  403122:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  403126:	4630      	mov	r0, r6
  403128:	4639      	mov	r1, r7
  40312a:	b00b      	add	sp, #44	; 0x2c
  40312c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403130:	e9cd 8906 	strd	r8, r9, [sp, #24]
  403134:	4668      	mov	r0, sp
  403136:	f001 f9a3 	bl	404480 <matherr>
  40313a:	2800      	cmp	r0, #0
  40313c:	d1ef      	bne.n	40311e <sqrt+0x86>
  40313e:	e7ea      	b.n	403116 <sqrt+0x7e>
  403140:	f001 ff0c 	bl	404f5c <__errno>
  403144:	9b08      	ldr	r3, [sp, #32]
  403146:	6003      	str	r3, [r0, #0]
  403148:	e7eb      	b.n	403122 <sqrt+0x8a>
  40314a:	bf00      	nop
  40314c:	20400048 	.word	0x20400048
  403150:	00407cf8 	.word	0x00407cf8
  403154:	00000000 	.word	0x00000000

00403158 <__ieee754_rem_pio2>:
  403158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40315c:	4e9a      	ldr	r6, [pc, #616]	; (4033c8 <__ieee754_rem_pio2+0x270>)
  40315e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  403162:	42b7      	cmp	r7, r6
  403164:	b091      	sub	sp, #68	; 0x44
  403166:	f340 808e 	ble.w	403286 <__ieee754_rem_pio2+0x12e>
  40316a:	4692      	mov	sl, r2
  40316c:	4a97      	ldr	r2, [pc, #604]	; (4033cc <__ieee754_rem_pio2+0x274>)
  40316e:	4297      	cmp	r7, r2
  403170:	460c      	mov	r4, r1
  403172:	dc26      	bgt.n	4031c2 <__ieee754_rem_pio2+0x6a>
  403174:	2900      	cmp	r1, #0
  403176:	a38a      	add	r3, pc, #552	; (adr r3, 4033a0 <__ieee754_rem_pio2+0x248>)
  403178:	e9d3 2300 	ldrd	r2, r3, [r3]
  40317c:	f340 81b4 	ble.w	4034e8 <__ieee754_rem_pio2+0x390>
  403180:	f001 fa10 	bl	4045a4 <__aeabi_dsub>
  403184:	4b92      	ldr	r3, [pc, #584]	; (4033d0 <__ieee754_rem_pio2+0x278>)
  403186:	429f      	cmp	r7, r3
  403188:	4604      	mov	r4, r0
  40318a:	460d      	mov	r5, r1
  40318c:	f000 8090 	beq.w	4032b0 <__ieee754_rem_pio2+0x158>
  403190:	a385      	add	r3, pc, #532	; (adr r3, 4033a8 <__ieee754_rem_pio2+0x250>)
  403192:	e9d3 2300 	ldrd	r2, r3, [r3]
  403196:	f001 fa05 	bl	4045a4 <__aeabi_dsub>
  40319a:	4602      	mov	r2, r0
  40319c:	460b      	mov	r3, r1
  40319e:	e9ca 2300 	strd	r2, r3, [sl]
  4031a2:	4620      	mov	r0, r4
  4031a4:	4629      	mov	r1, r5
  4031a6:	f001 f9fd 	bl	4045a4 <__aeabi_dsub>
  4031aa:	a37f      	add	r3, pc, #508	; (adr r3, 4033a8 <__ieee754_rem_pio2+0x250>)
  4031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4031b0:	f001 f9f8 	bl	4045a4 <__aeabi_dsub>
  4031b4:	2501      	movs	r5, #1
  4031b6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4031ba:	4628      	mov	r0, r5
  4031bc:	b011      	add	sp, #68	; 0x44
  4031be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031c2:	4a84      	ldr	r2, [pc, #528]	; (4033d4 <__ieee754_rem_pio2+0x27c>)
  4031c4:	4297      	cmp	r7, r2
  4031c6:	f340 8090 	ble.w	4032ea <__ieee754_rem_pio2+0x192>
  4031ca:	4a83      	ldr	r2, [pc, #524]	; (4033d8 <__ieee754_rem_pio2+0x280>)
  4031cc:	4297      	cmp	r7, r2
  4031ce:	dc65      	bgt.n	40329c <__ieee754_rem_pio2+0x144>
  4031d0:	153d      	asrs	r5, r7, #20
  4031d2:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  4031d6:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  4031da:	4619      	mov	r1, r3
  4031dc:	461f      	mov	r7, r3
  4031de:	4606      	mov	r6, r0
  4031e0:	f001 fe44 	bl	404e6c <__aeabi_d2iz>
  4031e4:	f001 fb2c 	bl	404840 <__aeabi_i2d>
  4031e8:	4680      	mov	r8, r0
  4031ea:	4689      	mov	r9, r1
  4031ec:	4602      	mov	r2, r0
  4031ee:	460b      	mov	r3, r1
  4031f0:	4630      	mov	r0, r6
  4031f2:	4639      	mov	r1, r7
  4031f4:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  4031f8:	f001 f9d4 	bl	4045a4 <__aeabi_dsub>
  4031fc:	2200      	movs	r2, #0
  4031fe:	4b77      	ldr	r3, [pc, #476]	; (4033dc <__ieee754_rem_pio2+0x284>)
  403200:	f001 fb84 	bl	40490c <__aeabi_dmul>
  403204:	4689      	mov	r9, r1
  403206:	4680      	mov	r8, r0
  403208:	f001 fe30 	bl	404e6c <__aeabi_d2iz>
  40320c:	f001 fb18 	bl	404840 <__aeabi_i2d>
  403210:	4602      	mov	r2, r0
  403212:	460b      	mov	r3, r1
  403214:	4606      	mov	r6, r0
  403216:	460f      	mov	r7, r1
  403218:	4640      	mov	r0, r8
  40321a:	4649      	mov	r1, r9
  40321c:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  403220:	f001 f9c0 	bl	4045a4 <__aeabi_dsub>
  403224:	2200      	movs	r2, #0
  403226:	4b6d      	ldr	r3, [pc, #436]	; (4033dc <__ieee754_rem_pio2+0x284>)
  403228:	f001 fb70 	bl	40490c <__aeabi_dmul>
  40322c:	2200      	movs	r2, #0
  40322e:	2300      	movs	r3, #0
  403230:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  403234:	f001 fdd2 	bl	404ddc <__aeabi_dcmpeq>
  403238:	2800      	cmp	r0, #0
  40323a:	f000 8173 	beq.w	403524 <__ieee754_rem_pio2+0x3cc>
  40323e:	2300      	movs	r3, #0
  403240:	4630      	mov	r0, r6
  403242:	4639      	mov	r1, r7
  403244:	2200      	movs	r2, #0
  403246:	f001 fdc9 	bl	404ddc <__aeabi_dcmpeq>
  40324a:	2800      	cmp	r0, #0
  40324c:	bf14      	ite	ne
  40324e:	2301      	movne	r3, #1
  403250:	2302      	moveq	r3, #2
  403252:	4a63      	ldr	r2, [pc, #396]	; (4033e0 <__ieee754_rem_pio2+0x288>)
  403254:	9201      	str	r2, [sp, #4]
  403256:	2102      	movs	r1, #2
  403258:	462a      	mov	r2, r5
  40325a:	9100      	str	r1, [sp, #0]
  40325c:	a80a      	add	r0, sp, #40	; 0x28
  40325e:	4651      	mov	r1, sl
  403260:	f000 fb7e 	bl	403960 <__kernel_rem_pio2>
  403264:	2c00      	cmp	r4, #0
  403266:	4605      	mov	r5, r0
  403268:	da14      	bge.n	403294 <__ieee754_rem_pio2+0x13c>
  40326a:	f8da 2004 	ldr.w	r2, [sl, #4]
  40326e:	f8da 300c 	ldr.w	r3, [sl, #12]
  403272:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  403276:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40327a:	4245      	negs	r5, r0
  40327c:	f8ca 2004 	str.w	r2, [sl, #4]
  403280:	f8ca 300c 	str.w	r3, [sl, #12]
  403284:	e006      	b.n	403294 <__ieee754_rem_pio2+0x13c>
  403286:	e9c2 0100 	strd	r0, r1, [r2]
  40328a:	2500      	movs	r5, #0
  40328c:	2400      	movs	r4, #0
  40328e:	e9c2 4502 	strd	r4, r5, [r2, #8]
  403292:	2500      	movs	r5, #0
  403294:	4628      	mov	r0, r5
  403296:	b011      	add	sp, #68	; 0x44
  403298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40329c:	4602      	mov	r2, r0
  40329e:	460b      	mov	r3, r1
  4032a0:	f001 f980 	bl	4045a4 <__aeabi_dsub>
  4032a4:	2500      	movs	r5, #0
  4032a6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4032aa:	e9ca 0100 	strd	r0, r1, [sl]
  4032ae:	e7f1      	b.n	403294 <__ieee754_rem_pio2+0x13c>
  4032b0:	a33f      	add	r3, pc, #252	; (adr r3, 4033b0 <__ieee754_rem_pio2+0x258>)
  4032b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4032b6:	f001 f975 	bl	4045a4 <__aeabi_dsub>
  4032ba:	a33f      	add	r3, pc, #252	; (adr r3, 4033b8 <__ieee754_rem_pio2+0x260>)
  4032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4032c0:	460d      	mov	r5, r1
  4032c2:	4604      	mov	r4, r0
  4032c4:	f001 f96e 	bl	4045a4 <__aeabi_dsub>
  4032c8:	4602      	mov	r2, r0
  4032ca:	460b      	mov	r3, r1
  4032cc:	e9ca 2300 	strd	r2, r3, [sl]
  4032d0:	4629      	mov	r1, r5
  4032d2:	4620      	mov	r0, r4
  4032d4:	f001 f966 	bl	4045a4 <__aeabi_dsub>
  4032d8:	a337      	add	r3, pc, #220	; (adr r3, 4033b8 <__ieee754_rem_pio2+0x260>)
  4032da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4032de:	f001 f961 	bl	4045a4 <__aeabi_dsub>
  4032e2:	2501      	movs	r5, #1
  4032e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4032e8:	e7d4      	b.n	403294 <__ieee754_rem_pio2+0x13c>
  4032ea:	f001 f837 	bl	40435c <fabs>
  4032ee:	a334      	add	r3, pc, #208	; (adr r3, 4033c0 <__ieee754_rem_pio2+0x268>)
  4032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4032f4:	4680      	mov	r8, r0
  4032f6:	4689      	mov	r9, r1
  4032f8:	f001 fb08 	bl	40490c <__aeabi_dmul>
  4032fc:	2200      	movs	r2, #0
  4032fe:	4b39      	ldr	r3, [pc, #228]	; (4033e4 <__ieee754_rem_pio2+0x28c>)
  403300:	f001 f952 	bl	4045a8 <__adddf3>
  403304:	f001 fdb2 	bl	404e6c <__aeabi_d2iz>
  403308:	4605      	mov	r5, r0
  40330a:	f001 fa99 	bl	404840 <__aeabi_i2d>
  40330e:	a324      	add	r3, pc, #144	; (adr r3, 4033a0 <__ieee754_rem_pio2+0x248>)
  403310:	e9d3 2300 	ldrd	r2, r3, [r3]
  403314:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403318:	f001 faf8 	bl	40490c <__aeabi_dmul>
  40331c:	4602      	mov	r2, r0
  40331e:	460b      	mov	r3, r1
  403320:	4640      	mov	r0, r8
  403322:	4649      	mov	r1, r9
  403324:	f001 f93e 	bl	4045a4 <__aeabi_dsub>
  403328:	a31f      	add	r3, pc, #124	; (adr r3, 4033a8 <__ieee754_rem_pio2+0x250>)
  40332a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40332e:	4680      	mov	r8, r0
  403330:	4689      	mov	r9, r1
  403332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403336:	f001 fae9 	bl	40490c <__aeabi_dmul>
  40333a:	2d1f      	cmp	r5, #31
  40333c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403340:	dc54      	bgt.n	4033ec <__ieee754_rem_pio2+0x294>
  403342:	4b29      	ldr	r3, [pc, #164]	; (4033e8 <__ieee754_rem_pio2+0x290>)
  403344:	1e6a      	subs	r2, r5, #1
  403346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40334a:	429f      	cmp	r7, r3
  40334c:	d04e      	beq.n	4033ec <__ieee754_rem_pio2+0x294>
  40334e:	4602      	mov	r2, r0
  403350:	460b      	mov	r3, r1
  403352:	4640      	mov	r0, r8
  403354:	4649      	mov	r1, r9
  403356:	f001 f925 	bl	4045a4 <__aeabi_dsub>
  40335a:	4602      	mov	r2, r0
  40335c:	460b      	mov	r3, r1
  40335e:	e9ca 2300 	strd	r2, r3, [sl]
  403362:	4683      	mov	fp, r0
  403364:	460e      	mov	r6, r1
  403366:	465a      	mov	r2, fp
  403368:	4633      	mov	r3, r6
  40336a:	4640      	mov	r0, r8
  40336c:	4649      	mov	r1, r9
  40336e:	f001 f919 	bl	4045a4 <__aeabi_dsub>
  403372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403376:	f001 f915 	bl	4045a4 <__aeabi_dsub>
  40337a:	2c00      	cmp	r4, #0
  40337c:	4602      	mov	r2, r0
  40337e:	460b      	mov	r3, r1
  403380:	e9ca 2302 	strd	r2, r3, [sl, #8]
  403384:	da86      	bge.n	403294 <__ieee754_rem_pio2+0x13c>
  403386:	465b      	mov	r3, fp
  403388:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  40338c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403390:	e88a 0048 	stmia.w	sl, {r3, r6}
  403394:	f8ca 100c 	str.w	r1, [sl, #12]
  403398:	f8ca 0008 	str.w	r0, [sl, #8]
  40339c:	426d      	negs	r5, r5
  40339e:	e779      	b.n	403294 <__ieee754_rem_pio2+0x13c>
  4033a0:	54400000 	.word	0x54400000
  4033a4:	3ff921fb 	.word	0x3ff921fb
  4033a8:	1a626331 	.word	0x1a626331
  4033ac:	3dd0b461 	.word	0x3dd0b461
  4033b0:	1a600000 	.word	0x1a600000
  4033b4:	3dd0b461 	.word	0x3dd0b461
  4033b8:	2e037073 	.word	0x2e037073
  4033bc:	3ba3198a 	.word	0x3ba3198a
  4033c0:	6dc9c883 	.word	0x6dc9c883
  4033c4:	3fe45f30 	.word	0x3fe45f30
  4033c8:	3fe921fb 	.word	0x3fe921fb
  4033cc:	4002d97b 	.word	0x4002d97b
  4033d0:	3ff921fb 	.word	0x3ff921fb
  4033d4:	413921fb 	.word	0x413921fb
  4033d8:	7fefffff 	.word	0x7fefffff
  4033dc:	41700000 	.word	0x41700000
  4033e0:	00407d80 	.word	0x00407d80
  4033e4:	3fe00000 	.word	0x3fe00000
  4033e8:	00407d00 	.word	0x00407d00
  4033ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4033f0:	4640      	mov	r0, r8
  4033f2:	4649      	mov	r1, r9
  4033f4:	f001 f8d6 	bl	4045a4 <__aeabi_dsub>
  4033f8:	153a      	asrs	r2, r7, #20
  4033fa:	f3c1 530a 	ubfx	r3, r1, #20, #11
  4033fe:	1ad3      	subs	r3, r2, r3
  403400:	2b10      	cmp	r3, #16
  403402:	4683      	mov	fp, r0
  403404:	460e      	mov	r6, r1
  403406:	9209      	str	r2, [sp, #36]	; 0x24
  403408:	e9ca 0100 	strd	r0, r1, [sl]
  40340c:	ddab      	ble.n	403366 <__ieee754_rem_pio2+0x20e>
  40340e:	a358      	add	r3, pc, #352	; (adr r3, 403570 <__ieee754_rem_pio2+0x418>)
  403410:	e9d3 2300 	ldrd	r2, r3, [r3]
  403414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403418:	f001 fa78 	bl	40490c <__aeabi_dmul>
  40341c:	4606      	mov	r6, r0
  40341e:	460f      	mov	r7, r1
  403420:	4602      	mov	r2, r0
  403422:	460b      	mov	r3, r1
  403424:	4640      	mov	r0, r8
  403426:	4649      	mov	r1, r9
  403428:	f001 f8bc 	bl	4045a4 <__aeabi_dsub>
  40342c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403430:	4602      	mov	r2, r0
  403432:	460b      	mov	r3, r1
  403434:	4640      	mov	r0, r8
  403436:	4649      	mov	r1, r9
  403438:	f001 f8b4 	bl	4045a4 <__aeabi_dsub>
  40343c:	4632      	mov	r2, r6
  40343e:	463b      	mov	r3, r7
  403440:	f001 f8b0 	bl	4045a4 <__aeabi_dsub>
  403444:	a34c      	add	r3, pc, #304	; (adr r3, 403578 <__ieee754_rem_pio2+0x420>)
  403446:	e9d3 2300 	ldrd	r2, r3, [r3]
  40344a:	4606      	mov	r6, r0
  40344c:	460f      	mov	r7, r1
  40344e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403452:	f001 fa5b 	bl	40490c <__aeabi_dmul>
  403456:	4632      	mov	r2, r6
  403458:	463b      	mov	r3, r7
  40345a:	f001 f8a3 	bl	4045a4 <__aeabi_dsub>
  40345e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  403462:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403466:	4602      	mov	r2, r0
  403468:	460b      	mov	r3, r1
  40346a:	4640      	mov	r0, r8
  40346c:	4649      	mov	r1, r9
  40346e:	f001 f899 	bl	4045a4 <__aeabi_dsub>
  403472:	460b      	mov	r3, r1
  403474:	f3c1 570a 	ubfx	r7, r1, #20, #11
  403478:	460e      	mov	r6, r1
  40347a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40347c:	1bcf      	subs	r7, r1, r7
  40347e:	4602      	mov	r2, r0
  403480:	2f31      	cmp	r7, #49	; 0x31
  403482:	4683      	mov	fp, r0
  403484:	e9ca 2300 	strd	r2, r3, [sl]
  403488:	dd6c      	ble.n	403564 <__ieee754_rem_pio2+0x40c>
  40348a:	a33d      	add	r3, pc, #244	; (adr r3, 403580 <__ieee754_rem_pio2+0x428>)
  40348c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403490:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403494:	f001 fa3a 	bl	40490c <__aeabi_dmul>
  403498:	4606      	mov	r6, r0
  40349a:	460f      	mov	r7, r1
  40349c:	4602      	mov	r2, r0
  40349e:	460b      	mov	r3, r1
  4034a0:	4640      	mov	r0, r8
  4034a2:	4649      	mov	r1, r9
  4034a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4034a8:	f001 f87c 	bl	4045a4 <__aeabi_dsub>
  4034ac:	4602      	mov	r2, r0
  4034ae:	460b      	mov	r3, r1
  4034b0:	4680      	mov	r8, r0
  4034b2:	4689      	mov	r9, r1
  4034b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4034b8:	f001 f874 	bl	4045a4 <__aeabi_dsub>
  4034bc:	4632      	mov	r2, r6
  4034be:	463b      	mov	r3, r7
  4034c0:	f001 f870 	bl	4045a4 <__aeabi_dsub>
  4034c4:	a330      	add	r3, pc, #192	; (adr r3, 403588 <__ieee754_rem_pio2+0x430>)
  4034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4034ca:	4606      	mov	r6, r0
  4034cc:	460f      	mov	r7, r1
  4034ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4034d2:	f001 fa1b 	bl	40490c <__aeabi_dmul>
  4034d6:	4632      	mov	r2, r6
  4034d8:	463b      	mov	r3, r7
  4034da:	f001 f863 	bl	4045a4 <__aeabi_dsub>
  4034de:	4602      	mov	r2, r0
  4034e0:	460b      	mov	r3, r1
  4034e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4034e6:	e734      	b.n	403352 <__ieee754_rem_pio2+0x1fa>
  4034e8:	f001 f85e 	bl	4045a8 <__adddf3>
  4034ec:	4b2a      	ldr	r3, [pc, #168]	; (403598 <__ieee754_rem_pio2+0x440>)
  4034ee:	429f      	cmp	r7, r3
  4034f0:	4604      	mov	r4, r0
  4034f2:	460d      	mov	r5, r1
  4034f4:	d018      	beq.n	403528 <__ieee754_rem_pio2+0x3d0>
  4034f6:	a326      	add	r3, pc, #152	; (adr r3, 403590 <__ieee754_rem_pio2+0x438>)
  4034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4034fc:	f001 f854 	bl	4045a8 <__adddf3>
  403500:	4602      	mov	r2, r0
  403502:	460b      	mov	r3, r1
  403504:	e9ca 2300 	strd	r2, r3, [sl]
  403508:	4629      	mov	r1, r5
  40350a:	4620      	mov	r0, r4
  40350c:	f001 f84a 	bl	4045a4 <__aeabi_dsub>
  403510:	a31f      	add	r3, pc, #124	; (adr r3, 403590 <__ieee754_rem_pio2+0x438>)
  403512:	e9d3 2300 	ldrd	r2, r3, [r3]
  403516:	f001 f847 	bl	4045a8 <__adddf3>
  40351a:	f04f 35ff 	mov.w	r5, #4294967295
  40351e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  403522:	e6b7      	b.n	403294 <__ieee754_rem_pio2+0x13c>
  403524:	2303      	movs	r3, #3
  403526:	e694      	b.n	403252 <__ieee754_rem_pio2+0xfa>
  403528:	a311      	add	r3, pc, #68	; (adr r3, 403570 <__ieee754_rem_pio2+0x418>)
  40352a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40352e:	f001 f83b 	bl	4045a8 <__adddf3>
  403532:	a311      	add	r3, pc, #68	; (adr r3, 403578 <__ieee754_rem_pio2+0x420>)
  403534:	e9d3 2300 	ldrd	r2, r3, [r3]
  403538:	460d      	mov	r5, r1
  40353a:	4604      	mov	r4, r0
  40353c:	f001 f834 	bl	4045a8 <__adddf3>
  403540:	4602      	mov	r2, r0
  403542:	460b      	mov	r3, r1
  403544:	e9ca 2300 	strd	r2, r3, [sl]
  403548:	4629      	mov	r1, r5
  40354a:	4620      	mov	r0, r4
  40354c:	f001 f82a 	bl	4045a4 <__aeabi_dsub>
  403550:	a309      	add	r3, pc, #36	; (adr r3, 403578 <__ieee754_rem_pio2+0x420>)
  403552:	e9d3 2300 	ldrd	r2, r3, [r3]
  403556:	f001 f827 	bl	4045a8 <__adddf3>
  40355a:	f04f 35ff 	mov.w	r5, #4294967295
  40355e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  403562:	e697      	b.n	403294 <__ieee754_rem_pio2+0x13c>
  403564:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  403568:	e6fd      	b.n	403366 <__ieee754_rem_pio2+0x20e>
  40356a:	bf00      	nop
  40356c:	f3af 8000 	nop.w
  403570:	1a600000 	.word	0x1a600000
  403574:	3dd0b461 	.word	0x3dd0b461
  403578:	2e037073 	.word	0x2e037073
  40357c:	3ba3198a 	.word	0x3ba3198a
  403580:	2e000000 	.word	0x2e000000
  403584:	3ba3198a 	.word	0x3ba3198a
  403588:	252049c1 	.word	0x252049c1
  40358c:	397b839a 	.word	0x397b839a
  403590:	1a626331 	.word	0x1a626331
  403594:	3dd0b461 	.word	0x3dd0b461
  403598:	3ff921fb 	.word	0x3ff921fb

0040359c <__ieee754_sqrt>:
  40359c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4035a0:	4f5b      	ldr	r7, [pc, #364]	; (403710 <__ieee754_sqrt+0x174>)
  4035a2:	438f      	bics	r7, r1
  4035a4:	4605      	mov	r5, r0
  4035a6:	460c      	mov	r4, r1
  4035a8:	f000 8092 	beq.w	4036d0 <__ieee754_sqrt+0x134>
  4035ac:	2900      	cmp	r1, #0
  4035ae:	460b      	mov	r3, r1
  4035b0:	4602      	mov	r2, r0
  4035b2:	dd6f      	ble.n	403694 <__ieee754_sqrt+0xf8>
  4035b4:	150f      	asrs	r7, r1, #20
  4035b6:	d07b      	beq.n	4036b0 <__ieee754_sqrt+0x114>
  4035b8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4035bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4035c0:	07f8      	lsls	r0, r7, #31
  4035c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4035c6:	d45c      	bmi.n	403682 <__ieee754_sqrt+0xe6>
  4035c8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  4035cc:	2600      	movs	r6, #0
  4035ce:	440b      	add	r3, r1
  4035d0:	107f      	asrs	r7, r7, #1
  4035d2:	0052      	lsls	r2, r2, #1
  4035d4:	46b6      	mov	lr, r6
  4035d6:	2016      	movs	r0, #22
  4035d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4035dc:	eb0e 0401 	add.w	r4, lr, r1
  4035e0:	429c      	cmp	r4, r3
  4035e2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  4035e6:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4035ea:	dc03      	bgt.n	4035f4 <__ieee754_sqrt+0x58>
  4035ec:	1b1b      	subs	r3, r3, r4
  4035ee:	eb04 0e01 	add.w	lr, r4, r1
  4035f2:	440e      	add	r6, r1
  4035f4:	3801      	subs	r0, #1
  4035f6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  4035fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4035fe:	d1ed      	bne.n	4035dc <__ieee754_sqrt+0x40>
  403600:	4684      	mov	ip, r0
  403602:	2420      	movs	r4, #32
  403604:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403608:	e009      	b.n	40361e <__ieee754_sqrt+0x82>
  40360a:	d020      	beq.n	40364e <__ieee754_sqrt+0xb2>
  40360c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  403610:	3c01      	subs	r4, #1
  403612:	ea4f 0151 	mov.w	r1, r1, lsr #1
  403616:	442b      	add	r3, r5
  403618:	ea4f 0242 	mov.w	r2, r2, lsl #1
  40361c:	d020      	beq.n	403660 <__ieee754_sqrt+0xc4>
  40361e:	4573      	cmp	r3, lr
  403620:	eb01 050c 	add.w	r5, r1, ip
  403624:	ddf1      	ble.n	40360a <__ieee754_sqrt+0x6e>
  403626:	2d00      	cmp	r5, #0
  403628:	eb05 0c01 	add.w	ip, r5, r1
  40362c:	db09      	blt.n	403642 <__ieee754_sqrt+0xa6>
  40362e:	46f0      	mov	r8, lr
  403630:	4295      	cmp	r5, r2
  403632:	eba3 030e 	sub.w	r3, r3, lr
  403636:	d900      	bls.n	40363a <__ieee754_sqrt+0x9e>
  403638:	3b01      	subs	r3, #1
  40363a:	1b52      	subs	r2, r2, r5
  40363c:	4408      	add	r0, r1
  40363e:	46c6      	mov	lr, r8
  403640:	e7e4      	b.n	40360c <__ieee754_sqrt+0x70>
  403642:	f1bc 0f00 	cmp.w	ip, #0
  403646:	dbf2      	blt.n	40362e <__ieee754_sqrt+0x92>
  403648:	f10e 0801 	add.w	r8, lr, #1
  40364c:	e7f0      	b.n	403630 <__ieee754_sqrt+0x94>
  40364e:	4295      	cmp	r5, r2
  403650:	d8dc      	bhi.n	40360c <__ieee754_sqrt+0x70>
  403652:	2d00      	cmp	r5, #0
  403654:	eb05 0c01 	add.w	ip, r5, r1
  403658:	db44      	blt.n	4036e4 <__ieee754_sqrt+0x148>
  40365a:	4698      	mov	r8, r3
  40365c:	2300      	movs	r3, #0
  40365e:	e7ec      	b.n	40363a <__ieee754_sqrt+0x9e>
  403660:	4313      	orrs	r3, r2
  403662:	d113      	bne.n	40368c <__ieee754_sqrt+0xf0>
  403664:	0840      	lsrs	r0, r0, #1
  403666:	1073      	asrs	r3, r6, #1
  403668:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  40366c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403670:	07f2      	lsls	r2, r6, #31
  403672:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  403676:	bf48      	it	mi
  403678:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  40367c:	4649      	mov	r1, r9
  40367e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403682:	005b      	lsls	r3, r3, #1
  403684:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  403688:	0052      	lsls	r2, r2, #1
  40368a:	e79d      	b.n	4035c8 <__ieee754_sqrt+0x2c>
  40368c:	1c41      	adds	r1, r0, #1
  40368e:	d02d      	beq.n	4036ec <__ieee754_sqrt+0x150>
  403690:	3001      	adds	r0, #1
  403692:	e7e7      	b.n	403664 <__ieee754_sqrt+0xc8>
  403694:	4606      	mov	r6, r0
  403696:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  40369a:	433e      	orrs	r6, r7
  40369c:	d0ef      	beq.n	40367e <__ieee754_sqrt+0xe2>
  40369e:	bb69      	cbnz	r1, 4036fc <__ieee754_sqrt+0x160>
  4036a0:	460f      	mov	r7, r1
  4036a2:	0ad3      	lsrs	r3, r2, #11
  4036a4:	3f15      	subs	r7, #21
  4036a6:	0552      	lsls	r2, r2, #21
  4036a8:	2b00      	cmp	r3, #0
  4036aa:	d0fa      	beq.n	4036a2 <__ieee754_sqrt+0x106>
  4036ac:	02de      	lsls	r6, r3, #11
  4036ae:	d420      	bmi.n	4036f2 <__ieee754_sqrt+0x156>
  4036b0:	2400      	movs	r4, #0
  4036b2:	e000      	b.n	4036b6 <__ieee754_sqrt+0x11a>
  4036b4:	4604      	mov	r4, r0
  4036b6:	005b      	lsls	r3, r3, #1
  4036b8:	02dd      	lsls	r5, r3, #11
  4036ba:	f104 0001 	add.w	r0, r4, #1
  4036be:	d5f9      	bpl.n	4036b4 <__ieee754_sqrt+0x118>
  4036c0:	f1c0 0120 	rsb	r1, r0, #32
  4036c4:	fa22 f101 	lsr.w	r1, r2, r1
  4036c8:	430b      	orrs	r3, r1
  4036ca:	1b3f      	subs	r7, r7, r4
  4036cc:	4082      	lsls	r2, r0
  4036ce:	e773      	b.n	4035b8 <__ieee754_sqrt+0x1c>
  4036d0:	4602      	mov	r2, r0
  4036d2:	460b      	mov	r3, r1
  4036d4:	f001 f91a 	bl	40490c <__aeabi_dmul>
  4036d8:	462a      	mov	r2, r5
  4036da:	4623      	mov	r3, r4
  4036dc:	f000 ff64 	bl	4045a8 <__adddf3>
  4036e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4036e4:	f1bc 0f00 	cmp.w	ip, #0
  4036e8:	daae      	bge.n	403648 <__ieee754_sqrt+0xac>
  4036ea:	e7b6      	b.n	40365a <__ieee754_sqrt+0xbe>
  4036ec:	3601      	adds	r6, #1
  4036ee:	4620      	mov	r0, r4
  4036f0:	e7b9      	b.n	403666 <__ieee754_sqrt+0xca>
  4036f2:	2000      	movs	r0, #0
  4036f4:	2120      	movs	r1, #32
  4036f6:	f04f 34ff 	mov.w	r4, #4294967295
  4036fa:	e7e3      	b.n	4036c4 <__ieee754_sqrt+0x128>
  4036fc:	4602      	mov	r2, r0
  4036fe:	460b      	mov	r3, r1
  403700:	f000 ff50 	bl	4045a4 <__aeabi_dsub>
  403704:	4602      	mov	r2, r0
  403706:	460b      	mov	r3, r1
  403708:	f001 fa2a 	bl	404b60 <__aeabi_ddiv>
  40370c:	e7b7      	b.n	40367e <__ieee754_sqrt+0xe2>
  40370e:	bf00      	nop
  403710:	7ff00000 	.word	0x7ff00000
  403714:	00000000 	.word	0x00000000

00403718 <__kernel_cos>:
  403718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40371c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  403720:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  403724:	b085      	sub	sp, #20
  403726:	460c      	mov	r4, r1
  403728:	4692      	mov	sl, r2
  40372a:	469b      	mov	fp, r3
  40372c:	4605      	mov	r5, r0
  40372e:	da6b      	bge.n	403808 <__kernel_cos+0xf0>
  403730:	f001 fb9c 	bl	404e6c <__aeabi_d2iz>
  403734:	2800      	cmp	r0, #0
  403736:	f000 80e8 	beq.w	40390a <__kernel_cos+0x1f2>
  40373a:	462a      	mov	r2, r5
  40373c:	4623      	mov	r3, r4
  40373e:	4628      	mov	r0, r5
  403740:	4621      	mov	r1, r4
  403742:	f001 f8e3 	bl	40490c <__aeabi_dmul>
  403746:	a374      	add	r3, pc, #464	; (adr r3, 403918 <__kernel_cos+0x200>)
  403748:	e9d3 2300 	ldrd	r2, r3, [r3]
  40374c:	4680      	mov	r8, r0
  40374e:	4689      	mov	r9, r1
  403750:	f001 f8dc 	bl	40490c <__aeabi_dmul>
  403754:	a372      	add	r3, pc, #456	; (adr r3, 403920 <__kernel_cos+0x208>)
  403756:	e9d3 2300 	ldrd	r2, r3, [r3]
  40375a:	f000 ff25 	bl	4045a8 <__adddf3>
  40375e:	4642      	mov	r2, r8
  403760:	464b      	mov	r3, r9
  403762:	f001 f8d3 	bl	40490c <__aeabi_dmul>
  403766:	a370      	add	r3, pc, #448	; (adr r3, 403928 <__kernel_cos+0x210>)
  403768:	e9d3 2300 	ldrd	r2, r3, [r3]
  40376c:	f000 ff1a 	bl	4045a4 <__aeabi_dsub>
  403770:	4642      	mov	r2, r8
  403772:	464b      	mov	r3, r9
  403774:	f001 f8ca 	bl	40490c <__aeabi_dmul>
  403778:	a36d      	add	r3, pc, #436	; (adr r3, 403930 <__kernel_cos+0x218>)
  40377a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40377e:	f000 ff13 	bl	4045a8 <__adddf3>
  403782:	4642      	mov	r2, r8
  403784:	464b      	mov	r3, r9
  403786:	f001 f8c1 	bl	40490c <__aeabi_dmul>
  40378a:	a36b      	add	r3, pc, #428	; (adr r3, 403938 <__kernel_cos+0x220>)
  40378c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403790:	f000 ff08 	bl	4045a4 <__aeabi_dsub>
  403794:	4642      	mov	r2, r8
  403796:	464b      	mov	r3, r9
  403798:	f001 f8b8 	bl	40490c <__aeabi_dmul>
  40379c:	a368      	add	r3, pc, #416	; (adr r3, 403940 <__kernel_cos+0x228>)
  40379e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4037a2:	f000 ff01 	bl	4045a8 <__adddf3>
  4037a6:	4642      	mov	r2, r8
  4037a8:	464b      	mov	r3, r9
  4037aa:	f001 f8af 	bl	40490c <__aeabi_dmul>
  4037ae:	e9cd 0100 	strd	r0, r1, [sp]
  4037b2:	2200      	movs	r2, #0
  4037b4:	4b64      	ldr	r3, [pc, #400]	; (403948 <__kernel_cos+0x230>)
  4037b6:	4640      	mov	r0, r8
  4037b8:	4649      	mov	r1, r9
  4037ba:	f001 f8a7 	bl	40490c <__aeabi_dmul>
  4037be:	e9dd 2300 	ldrd	r2, r3, [sp]
  4037c2:	4606      	mov	r6, r0
  4037c4:	460f      	mov	r7, r1
  4037c6:	4640      	mov	r0, r8
  4037c8:	4649      	mov	r1, r9
  4037ca:	f001 f89f 	bl	40490c <__aeabi_dmul>
  4037ce:	4652      	mov	r2, sl
  4037d0:	4680      	mov	r8, r0
  4037d2:	4689      	mov	r9, r1
  4037d4:	465b      	mov	r3, fp
  4037d6:	4628      	mov	r0, r5
  4037d8:	4621      	mov	r1, r4
  4037da:	f001 f897 	bl	40490c <__aeabi_dmul>
  4037de:	4602      	mov	r2, r0
  4037e0:	460b      	mov	r3, r1
  4037e2:	4640      	mov	r0, r8
  4037e4:	4649      	mov	r1, r9
  4037e6:	f000 fedd 	bl	4045a4 <__aeabi_dsub>
  4037ea:	4602      	mov	r2, r0
  4037ec:	460b      	mov	r3, r1
  4037ee:	4630      	mov	r0, r6
  4037f0:	4639      	mov	r1, r7
  4037f2:	f000 fed7 	bl	4045a4 <__aeabi_dsub>
  4037f6:	4602      	mov	r2, r0
  4037f8:	460b      	mov	r3, r1
  4037fa:	2000      	movs	r0, #0
  4037fc:	4953      	ldr	r1, [pc, #332]	; (40394c <__kernel_cos+0x234>)
  4037fe:	f000 fed1 	bl	4045a4 <__aeabi_dsub>
  403802:	b005      	add	sp, #20
  403804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403808:	4602      	mov	r2, r0
  40380a:	460b      	mov	r3, r1
  40380c:	f001 f87e 	bl	40490c <__aeabi_dmul>
  403810:	a341      	add	r3, pc, #260	; (adr r3, 403918 <__kernel_cos+0x200>)
  403812:	e9d3 2300 	ldrd	r2, r3, [r3]
  403816:	4680      	mov	r8, r0
  403818:	4689      	mov	r9, r1
  40381a:	f001 f877 	bl	40490c <__aeabi_dmul>
  40381e:	a340      	add	r3, pc, #256	; (adr r3, 403920 <__kernel_cos+0x208>)
  403820:	e9d3 2300 	ldrd	r2, r3, [r3]
  403824:	f000 fec0 	bl	4045a8 <__adddf3>
  403828:	4642      	mov	r2, r8
  40382a:	464b      	mov	r3, r9
  40382c:	f001 f86e 	bl	40490c <__aeabi_dmul>
  403830:	a33d      	add	r3, pc, #244	; (adr r3, 403928 <__kernel_cos+0x210>)
  403832:	e9d3 2300 	ldrd	r2, r3, [r3]
  403836:	f000 feb5 	bl	4045a4 <__aeabi_dsub>
  40383a:	4642      	mov	r2, r8
  40383c:	464b      	mov	r3, r9
  40383e:	f001 f865 	bl	40490c <__aeabi_dmul>
  403842:	a33b      	add	r3, pc, #236	; (adr r3, 403930 <__kernel_cos+0x218>)
  403844:	e9d3 2300 	ldrd	r2, r3, [r3]
  403848:	f000 feae 	bl	4045a8 <__adddf3>
  40384c:	4642      	mov	r2, r8
  40384e:	464b      	mov	r3, r9
  403850:	f001 f85c 	bl	40490c <__aeabi_dmul>
  403854:	a338      	add	r3, pc, #224	; (adr r3, 403938 <__kernel_cos+0x220>)
  403856:	e9d3 2300 	ldrd	r2, r3, [r3]
  40385a:	f000 fea3 	bl	4045a4 <__aeabi_dsub>
  40385e:	4642      	mov	r2, r8
  403860:	464b      	mov	r3, r9
  403862:	f001 f853 	bl	40490c <__aeabi_dmul>
  403866:	a336      	add	r3, pc, #216	; (adr r3, 403940 <__kernel_cos+0x228>)
  403868:	e9d3 2300 	ldrd	r2, r3, [r3]
  40386c:	f000 fe9c 	bl	4045a8 <__adddf3>
  403870:	464b      	mov	r3, r9
  403872:	4642      	mov	r2, r8
  403874:	f001 f84a 	bl	40490c <__aeabi_dmul>
  403878:	4b35      	ldr	r3, [pc, #212]	; (403950 <__kernel_cos+0x238>)
  40387a:	429e      	cmp	r6, r3
  40387c:	e9cd 0100 	strd	r0, r1, [sp]
  403880:	dd97      	ble.n	4037b2 <__kernel_cos+0x9a>
  403882:	4b34      	ldr	r3, [pc, #208]	; (403954 <__kernel_cos+0x23c>)
  403884:	429e      	cmp	r6, r3
  403886:	f04f 0200 	mov.w	r2, #0
  40388a:	dc38      	bgt.n	4038fe <__kernel_cos+0x1e6>
  40388c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  403890:	2000      	movs	r0, #0
  403892:	492e      	ldr	r1, [pc, #184]	; (40394c <__kernel_cos+0x234>)
  403894:	4616      	mov	r6, r2
  403896:	461f      	mov	r7, r3
  403898:	f000 fe84 	bl	4045a4 <__aeabi_dsub>
  40389c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4038a0:	2200      	movs	r2, #0
  4038a2:	4b29      	ldr	r3, [pc, #164]	; (403948 <__kernel_cos+0x230>)
  4038a4:	4640      	mov	r0, r8
  4038a6:	4649      	mov	r1, r9
  4038a8:	f001 f830 	bl	40490c <__aeabi_dmul>
  4038ac:	4632      	mov	r2, r6
  4038ae:	463b      	mov	r3, r7
  4038b0:	f000 fe78 	bl	4045a4 <__aeabi_dsub>
  4038b4:	e9dd 2300 	ldrd	r2, r3, [sp]
  4038b8:	4606      	mov	r6, r0
  4038ba:	460f      	mov	r7, r1
  4038bc:	4640      	mov	r0, r8
  4038be:	4649      	mov	r1, r9
  4038c0:	f001 f824 	bl	40490c <__aeabi_dmul>
  4038c4:	4652      	mov	r2, sl
  4038c6:	4680      	mov	r8, r0
  4038c8:	4689      	mov	r9, r1
  4038ca:	465b      	mov	r3, fp
  4038cc:	4628      	mov	r0, r5
  4038ce:	4621      	mov	r1, r4
  4038d0:	f001 f81c 	bl	40490c <__aeabi_dmul>
  4038d4:	4602      	mov	r2, r0
  4038d6:	460b      	mov	r3, r1
  4038d8:	4640      	mov	r0, r8
  4038da:	4649      	mov	r1, r9
  4038dc:	f000 fe62 	bl	4045a4 <__aeabi_dsub>
  4038e0:	4602      	mov	r2, r0
  4038e2:	460b      	mov	r3, r1
  4038e4:	4630      	mov	r0, r6
  4038e6:	4639      	mov	r1, r7
  4038e8:	f000 fe5c 	bl	4045a4 <__aeabi_dsub>
  4038ec:	4602      	mov	r2, r0
  4038ee:	460b      	mov	r3, r1
  4038f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4038f4:	f000 fe56 	bl	4045a4 <__aeabi_dsub>
  4038f8:	b005      	add	sp, #20
  4038fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038fe:	4b16      	ldr	r3, [pc, #88]	; (403958 <__kernel_cos+0x240>)
  403900:	4f16      	ldr	r7, [pc, #88]	; (40395c <__kernel_cos+0x244>)
  403902:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403906:	2600      	movs	r6, #0
  403908:	e7ca      	b.n	4038a0 <__kernel_cos+0x188>
  40390a:	4910      	ldr	r1, [pc, #64]	; (40394c <__kernel_cos+0x234>)
  40390c:	2000      	movs	r0, #0
  40390e:	b005      	add	sp, #20
  403910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403914:	f3af 8000 	nop.w
  403918:	be8838d4 	.word	0xbe8838d4
  40391c:	bda8fae9 	.word	0xbda8fae9
  403920:	bdb4b1c4 	.word	0xbdb4b1c4
  403924:	3e21ee9e 	.word	0x3e21ee9e
  403928:	809c52ad 	.word	0x809c52ad
  40392c:	3e927e4f 	.word	0x3e927e4f
  403930:	19cb1590 	.word	0x19cb1590
  403934:	3efa01a0 	.word	0x3efa01a0
  403938:	16c15177 	.word	0x16c15177
  40393c:	3f56c16c 	.word	0x3f56c16c
  403940:	5555554c 	.word	0x5555554c
  403944:	3fa55555 	.word	0x3fa55555
  403948:	3fe00000 	.word	0x3fe00000
  40394c:	3ff00000 	.word	0x3ff00000
  403950:	3fd33332 	.word	0x3fd33332
  403954:	3fe90000 	.word	0x3fe90000
  403958:	3fe70000 	.word	0x3fe70000
  40395c:	3fd20000 	.word	0x3fd20000

00403960 <__kernel_rem_pio2>:
  403960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403964:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
  403968:	4c9c      	ldr	r4, [pc, #624]	; (403bdc <__kernel_rem_pio2+0x27c>)
  40396a:	9ea2      	ldr	r6, [sp, #648]	; 0x288
  40396c:	4d9c      	ldr	r5, [pc, #624]	; (403be0 <__kernel_rem_pio2+0x280>)
  40396e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  403972:	9405      	str	r4, [sp, #20]
  403974:	4626      	mov	r6, r4
  403976:	1ed4      	subs	r4, r2, #3
  403978:	fb85 7504 	smull	r7, r5, r5, r4
  40397c:	17e4      	asrs	r4, r4, #31
  40397e:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  403982:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  403986:	461d      	mov	r5, r3
  403988:	9308      	str	r3, [sp, #32]
  40398a:	1c63      	adds	r3, r4, #1
  40398c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  403990:	3d01      	subs	r5, #1
  403992:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403996:	9304      	str	r3, [sp, #16]
  403998:	462b      	mov	r3, r5
  40399a:	9409      	str	r4, [sp, #36]	; 0x24
  40399c:	9502      	str	r5, [sp, #8]
  40399e:	1b65      	subs	r5, r4, r5
  4039a0:	18f4      	adds	r4, r6, r3
  4039a2:	9003      	str	r0, [sp, #12]
  4039a4:	9106      	str	r1, [sp, #24]
  4039a6:	d41a      	bmi.n	4039de <__kernel_rem_pio2+0x7e>
  4039a8:	442c      	add	r4, r5
  4039aa:	3401      	adds	r4, #1
  4039ac:	f10d 0878 	add.w	r8, sp, #120	; 0x78
  4039b0:	2600      	movs	r6, #0
  4039b2:	2700      	movs	r7, #0
  4039b4:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
  4039b8:	e008      	b.n	4039cc <__kernel_rem_pio2+0x6c>
  4039ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
  4039be:	f000 ff3f 	bl	404840 <__aeabi_i2d>
  4039c2:	3501      	adds	r5, #1
  4039c4:	42a5      	cmp	r5, r4
  4039c6:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  4039ca:	d008      	beq.n	4039de <__kernel_rem_pio2+0x7e>
  4039cc:	2d00      	cmp	r5, #0
  4039ce:	daf4      	bge.n	4039ba <__kernel_rem_pio2+0x5a>
  4039d0:	3501      	adds	r5, #1
  4039d2:	4630      	mov	r0, r6
  4039d4:	4639      	mov	r1, r7
  4039d6:	42a5      	cmp	r5, r4
  4039d8:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  4039dc:	d1f6      	bne.n	4039cc <__kernel_rem_pio2+0x6c>
  4039de:	9b05      	ldr	r3, [sp, #20]
  4039e0:	2b00      	cmp	r3, #0
  4039e2:	db2e      	blt.n	403a42 <__kernel_rem_pio2+0xe2>
  4039e4:	9b08      	ldr	r3, [sp, #32]
  4039e6:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  4039ea:	9b03      	ldr	r3, [sp, #12]
  4039ec:	f1a9 0808 	sub.w	r8, r9, #8
  4039f0:	4498      	add	r8, r3
  4039f2:	ab20      	add	r3, sp, #128	; 0x80
  4039f4:	4499      	add	r9, r3
  4039f6:	9b05      	ldr	r3, [sp, #20]
  4039f8:	aa70      	add	r2, sp, #448	; 0x1c0
  4039fa:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
  4039fe:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  403a02:	9b02      	ldr	r3, [sp, #8]
  403a04:	2b00      	cmp	r3, #0
  403a06:	f2c0 830f 	blt.w	404028 <__kernel_rem_pio2+0x6c8>
  403a0a:	9b03      	ldr	r3, [sp, #12]
  403a0c:	464d      	mov	r5, r9
  403a0e:	f1a3 0408 	sub.w	r4, r3, #8
  403a12:	2600      	movs	r6, #0
  403a14:	2700      	movs	r7, #0
  403a16:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  403a1a:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  403a1e:	f000 ff75 	bl	40490c <__aeabi_dmul>
  403a22:	4602      	mov	r2, r0
  403a24:	460b      	mov	r3, r1
  403a26:	4630      	mov	r0, r6
  403a28:	4639      	mov	r1, r7
  403a2a:	f000 fdbd 	bl	4045a8 <__adddf3>
  403a2e:	4544      	cmp	r4, r8
  403a30:	4606      	mov	r6, r0
  403a32:	460f      	mov	r7, r1
  403a34:	d1ef      	bne.n	403a16 <__kernel_rem_pio2+0xb6>
  403a36:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  403a3a:	45da      	cmp	sl, fp
  403a3c:	f109 0908 	add.w	r9, r9, #8
  403a40:	d1df      	bne.n	403a02 <__kernel_rem_pio2+0xa2>
  403a42:	9805      	ldr	r0, [sp, #20]
  403a44:	9a08      	ldr	r2, [sp, #32]
  403a46:	9000      	str	r0, [sp, #0]
  403a48:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  403a4c:	3b01      	subs	r3, #1
  403a4e:	009b      	lsls	r3, r3, #2
  403a50:	ac0c      	add	r4, sp, #48	; 0x30
  403a52:	1f19      	subs	r1, r3, #4
  403a54:	4423      	add	r3, r4
  403a56:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
  403a5a:	930b      	str	r3, [sp, #44]	; 0x2c
  403a5c:	9b03      	ldr	r3, [sp, #12]
  403a5e:	3a01      	subs	r2, #1
  403a60:	4421      	add	r1, r4
  403a62:	910a      	str	r1, [sp, #40]	; 0x28
  403a64:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
  403a68:	9a00      	ldr	r2, [sp, #0]
  403a6a:	a998      	add	r1, sp, #608	; 0x260
  403a6c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  403a70:	2a00      	cmp	r2, #0
  403a72:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
  403a76:	4613      	mov	r3, r2
  403a78:	dd2b      	ble.n	403ad2 <__kernel_rem_pio2+0x172>
  403a7a:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  403a7e:	f1a8 08a8 	sub.w	r8, r8, #168	; 0xa8
  403a82:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  403a86:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  403a8a:	2200      	movs	r2, #0
  403a8c:	4b55      	ldr	r3, [pc, #340]	; (403be4 <__kernel_rem_pio2+0x284>)
  403a8e:	4620      	mov	r0, r4
  403a90:	4629      	mov	r1, r5
  403a92:	f000 ff3b 	bl	40490c <__aeabi_dmul>
  403a96:	f001 f9e9 	bl	404e6c <__aeabi_d2iz>
  403a9a:	f000 fed1 	bl	404840 <__aeabi_i2d>
  403a9e:	2200      	movs	r2, #0
  403aa0:	4b51      	ldr	r3, [pc, #324]	; (403be8 <__kernel_rem_pio2+0x288>)
  403aa2:	4606      	mov	r6, r0
  403aa4:	460f      	mov	r7, r1
  403aa6:	f000 ff31 	bl	40490c <__aeabi_dmul>
  403aaa:	4602      	mov	r2, r0
  403aac:	460b      	mov	r3, r1
  403aae:	4620      	mov	r0, r4
  403ab0:	4629      	mov	r1, r5
  403ab2:	f000 fd77 	bl	4045a4 <__aeabi_dsub>
  403ab6:	f001 f9d9 	bl	404e6c <__aeabi_d2iz>
  403aba:	e878 2302 	ldrd	r2, r3, [r8], #-8
  403abe:	f849 0f04 	str.w	r0, [r9, #4]!
  403ac2:	4639      	mov	r1, r7
  403ac4:	4630      	mov	r0, r6
  403ac6:	f000 fd6f 	bl	4045a8 <__adddf3>
  403aca:	45d0      	cmp	r8, sl
  403acc:	4604      	mov	r4, r0
  403ace:	460d      	mov	r5, r1
  403ad0:	d1db      	bne.n	403a8a <__kernel_rem_pio2+0x12a>
  403ad2:	f8dd 9010 	ldr.w	r9, [sp, #16]
  403ad6:	4620      	mov	r0, r4
  403ad8:	4629      	mov	r1, r5
  403ada:	464a      	mov	r2, r9
  403adc:	f000 fcd4 	bl	404488 <scalbn>
  403ae0:	2200      	movs	r2, #0
  403ae2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  403ae6:	4604      	mov	r4, r0
  403ae8:	460d      	mov	r5, r1
  403aea:	f000 ff0f 	bl	40490c <__aeabi_dmul>
  403aee:	f000 fc3b 	bl	404368 <floor>
  403af2:	2200      	movs	r2, #0
  403af4:	4b3d      	ldr	r3, [pc, #244]	; (403bec <__kernel_rem_pio2+0x28c>)
  403af6:	f000 ff09 	bl	40490c <__aeabi_dmul>
  403afa:	4602      	mov	r2, r0
  403afc:	460b      	mov	r3, r1
  403afe:	4620      	mov	r0, r4
  403b00:	4629      	mov	r1, r5
  403b02:	f000 fd4f 	bl	4045a4 <__aeabi_dsub>
  403b06:	460d      	mov	r5, r1
  403b08:	4604      	mov	r4, r0
  403b0a:	f001 f9af 	bl	404e6c <__aeabi_d2iz>
  403b0e:	4680      	mov	r8, r0
  403b10:	f000 fe96 	bl	404840 <__aeabi_i2d>
  403b14:	460b      	mov	r3, r1
  403b16:	4602      	mov	r2, r0
  403b18:	4629      	mov	r1, r5
  403b1a:	4620      	mov	r0, r4
  403b1c:	f000 fd42 	bl	4045a4 <__aeabi_dsub>
  403b20:	464b      	mov	r3, r9
  403b22:	2b00      	cmp	r3, #0
  403b24:	4606      	mov	r6, r0
  403b26:	460f      	mov	r7, r1
  403b28:	f340 80f7 	ble.w	403d1a <__kernel_rem_pio2+0x3ba>
  403b2c:	9a00      	ldr	r2, [sp, #0]
  403b2e:	a90c      	add	r1, sp, #48	; 0x30
  403b30:	3a01      	subs	r2, #1
  403b32:	f1c9 0318 	rsb	r3, r9, #24
  403b36:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
  403b3a:	fa45 f103 	asr.w	r1, r5, r3
  403b3e:	fa01 f303 	lsl.w	r3, r1, r3
  403b42:	a80c      	add	r0, sp, #48	; 0x30
  403b44:	1aeb      	subs	r3, r5, r3
  403b46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  403b4a:	f1c9 0517 	rsb	r5, r9, #23
  403b4e:	4488      	add	r8, r1
  403b50:	fa43 f505 	asr.w	r5, r3, r5
  403b54:	2d00      	cmp	r5, #0
  403b56:	dd63      	ble.n	403c20 <__kernel_rem_pio2+0x2c0>
  403b58:	9b00      	ldr	r3, [sp, #0]
  403b5a:	2b00      	cmp	r3, #0
  403b5c:	f108 0801 	add.w	r8, r8, #1
  403b60:	f340 8281 	ble.w	404066 <__kernel_rem_pio2+0x706>
  403b64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403b66:	2c00      	cmp	r4, #0
  403b68:	f000 8318 	beq.w	40419c <__kernel_rem_pio2+0x83c>
  403b6c:	2001      	movs	r0, #1
  403b6e:	2300      	movs	r3, #0
  403b70:	aa0c      	add	r2, sp, #48	; 0x30
  403b72:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
  403b76:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  403b7a:	9a00      	ldr	r2, [sp, #0]
  403b7c:	4282      	cmp	r2, r0
  403b7e:	dd19      	ble.n	403bb4 <__kernel_rem_pio2+0x254>
  403b80:	aa0c      	add	r2, sp, #48	; 0x30
  403b82:	ac0c      	add	r4, sp, #48	; 0x30
  403b84:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
  403b88:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  403b8c:	1a51      	subs	r1, r2, r1
  403b8e:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
  403b92:	9900      	ldr	r1, [sp, #0]
  403b94:	3302      	adds	r3, #2
  403b96:	4299      	cmp	r1, r3
  403b98:	dd0c      	ble.n	403bb4 <__kernel_rem_pio2+0x254>
  403b9a:	4610      	mov	r0, r2
  403b9c:	9a00      	ldr	r2, [sp, #0]
  403b9e:	a90c      	add	r1, sp, #48	; 0x30
  403ba0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  403ba4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  403ba8:	681a      	ldr	r2, [r3, #0]
  403baa:	1a82      	subs	r2, r0, r2
  403bac:	f843 2b04 	str.w	r2, [r3], #4
  403bb0:	428b      	cmp	r3, r1
  403bb2:	d1f9      	bne.n	403ba8 <__kernel_rem_pio2+0x248>
  403bb4:	9b04      	ldr	r3, [sp, #16]
  403bb6:	2b00      	cmp	r3, #0
  403bb8:	dd1a      	ble.n	403bf0 <__kernel_rem_pio2+0x290>
  403bba:	9b04      	ldr	r3, [sp, #16]
  403bbc:	2b01      	cmp	r3, #1
  403bbe:	f04f 0401 	mov.w	r4, #1
  403bc2:	f040 8258 	bne.w	404076 <__kernel_rem_pio2+0x716>
  403bc6:	9b00      	ldr	r3, [sp, #0]
  403bc8:	1e5a      	subs	r2, r3, #1
  403bca:	ab0c      	add	r3, sp, #48	; 0x30
  403bcc:	a90c      	add	r1, sp, #48	; 0x30
  403bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403bd2:	f3c3 0316 	ubfx	r3, r3, #0, #23
  403bd6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  403bda:	e258      	b.n	40408e <__kernel_rem_pio2+0x72e>
  403bdc:	00407ec8 	.word	0x00407ec8
  403be0:	2aaaaaab 	.word	0x2aaaaaab
  403be4:	3e700000 	.word	0x3e700000
  403be8:	41700000 	.word	0x41700000
  403bec:	40200000 	.word	0x40200000
  403bf0:	2d02      	cmp	r5, #2
  403bf2:	d115      	bne.n	403c20 <__kernel_rem_pio2+0x2c0>
  403bf4:	4632      	mov	r2, r6
  403bf6:	463b      	mov	r3, r7
  403bf8:	2000      	movs	r0, #0
  403bfa:	4997      	ldr	r1, [pc, #604]	; (403e58 <__kernel_rem_pio2+0x4f8>)
  403bfc:	f000 fcd2 	bl	4045a4 <__aeabi_dsub>
  403c00:	4606      	mov	r6, r0
  403c02:	460f      	mov	r7, r1
  403c04:	9a04      	ldr	r2, [sp, #16]
  403c06:	4994      	ldr	r1, [pc, #592]	; (403e58 <__kernel_rem_pio2+0x4f8>)
  403c08:	2000      	movs	r0, #0
  403c0a:	f000 fc3d 	bl	404488 <scalbn>
  403c0e:	4602      	mov	r2, r0
  403c10:	460b      	mov	r3, r1
  403c12:	4630      	mov	r0, r6
  403c14:	4639      	mov	r1, r7
  403c16:	f000 fcc5 	bl	4045a4 <__aeabi_dsub>
  403c1a:	2502      	movs	r5, #2
  403c1c:	4606      	mov	r6, r0
  403c1e:	460f      	mov	r7, r1
  403c20:	2200      	movs	r2, #0
  403c22:	2300      	movs	r3, #0
  403c24:	4630      	mov	r0, r6
  403c26:	4639      	mov	r1, r7
  403c28:	f001 f8d8 	bl	404ddc <__aeabi_dcmpeq>
  403c2c:	2800      	cmp	r0, #0
  403c2e:	f000 8252 	beq.w	4040d6 <__kernel_rem_pio2+0x776>
  403c32:	9a00      	ldr	r2, [sp, #0]
  403c34:	9b05      	ldr	r3, [sp, #20]
  403c36:	1e50      	subs	r0, r2, #1
  403c38:	4283      	cmp	r3, r0
  403c3a:	dc0f      	bgt.n	403c5c <__kernel_rem_pio2+0x2fc>
  403c3c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
  403c40:	3b01      	subs	r3, #1
  403c42:	aa0c      	add	r2, sp, #48	; 0x30
  403c44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403c46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403c4a:	2200      	movs	r2, #0
  403c4c:	f853 1904 	ldr.w	r1, [r3], #-4
  403c50:	42a3      	cmp	r3, r4
  403c52:	ea42 0201 	orr.w	r2, r2, r1
  403c56:	d1f9      	bne.n	403c4c <__kernel_rem_pio2+0x2ec>
  403c58:	2a00      	cmp	r2, #0
  403c5a:	d16f      	bne.n	403d3c <__kernel_rem_pio2+0x3dc>
  403c5c:	9b05      	ldr	r3, [sp, #20]
  403c5e:	aa0c      	add	r2, sp, #48	; 0x30
  403c60:	3b01      	subs	r3, #1
  403c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403c66:	2b00      	cmp	r3, #0
  403c68:	f040 8233 	bne.w	4040d2 <__kernel_rem_pio2+0x772>
  403c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403c6e:	2301      	movs	r3, #1
  403c70:	f852 1904 	ldr.w	r1, [r2], #-4
  403c74:	3301      	adds	r3, #1
  403c76:	2900      	cmp	r1, #0
  403c78:	d0fa      	beq.n	403c70 <__kernel_rem_pio2+0x310>
  403c7a:	9a00      	ldr	r2, [sp, #0]
  403c7c:	18d3      	adds	r3, r2, r3
  403c7e:	f102 0a01 	add.w	sl, r2, #1
  403c82:	459a      	cmp	sl, r3
  403c84:	9307      	str	r3, [sp, #28]
  403c86:	dc3d      	bgt.n	403d04 <__kernel_rem_pio2+0x3a4>
  403c88:	9b00      	ldr	r3, [sp, #0]
  403c8a:	9908      	ldr	r1, [sp, #32]
  403c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403c8e:	440b      	add	r3, r1
  403c90:	9907      	ldr	r1, [sp, #28]
  403c92:	eb0a 0802 	add.w	r8, sl, r2
  403c96:	4699      	mov	r9, r3
  403c98:	ab20      	add	r3, sp, #128	; 0x80
  403c9a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
  403c9e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
  403ca2:	188b      	adds	r3, r1, r2
  403ca4:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  403ca6:	f108 38ff 	add.w	r8, r8, #4294967295
  403caa:	eb02 0888 	add.w	r8, r2, r8, lsl #2
  403cae:	aa70      	add	r2, sp, #448	; 0x1c0
  403cb0:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
  403cb4:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  403cb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403cba:	9300      	str	r3, [sp, #0]
  403cbc:	f858 0f04 	ldr.w	r0, [r8, #4]!
  403cc0:	f000 fdbe 	bl	404840 <__aeabi_i2d>
  403cc4:	9b02      	ldr	r3, [sp, #8]
  403cc6:	2b00      	cmp	r3, #0
  403cc8:	e8e9 0102 	strd	r0, r1, [r9], #8
  403ccc:	db1d      	blt.n	403d0a <__kernel_rem_pio2+0x3aa>
  403cce:	9b03      	ldr	r3, [sp, #12]
  403cd0:	464d      	mov	r5, r9
  403cd2:	f1a3 0408 	sub.w	r4, r3, #8
  403cd6:	2600      	movs	r6, #0
  403cd8:	2700      	movs	r7, #0
  403cda:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  403cde:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  403ce2:	f000 fe13 	bl	40490c <__aeabi_dmul>
  403ce6:	4602      	mov	r2, r0
  403ce8:	460b      	mov	r3, r1
  403cea:	4630      	mov	r0, r6
  403cec:	4639      	mov	r1, r7
  403cee:	f000 fc5b 	bl	4045a8 <__adddf3>
  403cf2:	455c      	cmp	r4, fp
  403cf4:	4606      	mov	r6, r0
  403cf6:	460f      	mov	r7, r1
  403cf8:	d1ef      	bne.n	403cda <__kernel_rem_pio2+0x37a>
  403cfa:	9b00      	ldr	r3, [sp, #0]
  403cfc:	4598      	cmp	r8, r3
  403cfe:	e8ea 6702 	strd	r6, r7, [sl], #8
  403d02:	d1db      	bne.n	403cbc <__kernel_rem_pio2+0x35c>
  403d04:	9b07      	ldr	r3, [sp, #28]
  403d06:	9300      	str	r3, [sp, #0]
  403d08:	e6ae      	b.n	403a68 <__kernel_rem_pio2+0x108>
  403d0a:	9b00      	ldr	r3, [sp, #0]
  403d0c:	2600      	movs	r6, #0
  403d0e:	2700      	movs	r7, #0
  403d10:	4598      	cmp	r8, r3
  403d12:	e8ea 6702 	strd	r6, r7, [sl], #8
  403d16:	d1d1      	bne.n	403cbc <__kernel_rem_pio2+0x35c>
  403d18:	e7f4      	b.n	403d04 <__kernel_rem_pio2+0x3a4>
  403d1a:	d106      	bne.n	403d2a <__kernel_rem_pio2+0x3ca>
  403d1c:	9b00      	ldr	r3, [sp, #0]
  403d1e:	aa0c      	add	r2, sp, #48	; 0x30
  403d20:	3b01      	subs	r3, #1
  403d22:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  403d26:	15ed      	asrs	r5, r5, #23
  403d28:	e714      	b.n	403b54 <__kernel_rem_pio2+0x1f4>
  403d2a:	2200      	movs	r2, #0
  403d2c:	4b4b      	ldr	r3, [pc, #300]	; (403e5c <__kernel_rem_pio2+0x4fc>)
  403d2e:	f001 f873 	bl	404e18 <__aeabi_dcmpge>
  403d32:	2800      	cmp	r0, #0
  403d34:	f040 8182 	bne.w	40403c <__kernel_rem_pio2+0x6dc>
  403d38:	4605      	mov	r5, r0
  403d3a:	e771      	b.n	403c20 <__kernel_rem_pio2+0x2c0>
  403d3c:	a90c      	add	r1, sp, #48	; 0x30
  403d3e:	9502      	str	r5, [sp, #8]
  403d40:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
  403d44:	9904      	ldr	r1, [sp, #16]
  403d46:	f8cd 801c 	str.w	r8, [sp, #28]
  403d4a:	3918      	subs	r1, #24
  403d4c:	4602      	mov	r2, r0
  403d4e:	9000      	str	r0, [sp, #0]
  403d50:	9104      	str	r1, [sp, #16]
  403d52:	b96b      	cbnz	r3, 403d70 <__kernel_rem_pio2+0x410>
  403d54:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  403d58:	3b01      	subs	r3, #1
  403d5a:	a80c      	add	r0, sp, #48	; 0x30
  403d5c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  403d60:	f853 0904 	ldr.w	r0, [r3], #-4
  403d64:	3a01      	subs	r2, #1
  403d66:	3918      	subs	r1, #24
  403d68:	2800      	cmp	r0, #0
  403d6a:	d0f9      	beq.n	403d60 <__kernel_rem_pio2+0x400>
  403d6c:	9200      	str	r2, [sp, #0]
  403d6e:	9104      	str	r1, [sp, #16]
  403d70:	9a04      	ldr	r2, [sp, #16]
  403d72:	4939      	ldr	r1, [pc, #228]	; (403e58 <__kernel_rem_pio2+0x4f8>)
  403d74:	2000      	movs	r0, #0
  403d76:	f000 fb87 	bl	404488 <scalbn>
  403d7a:	9b00      	ldr	r3, [sp, #0]
  403d7c:	2b00      	cmp	r3, #0
  403d7e:	4604      	mov	r4, r0
  403d80:	460d      	mov	r5, r1
  403d82:	f2c0 8203 	blt.w	40418c <__kernel_rem_pio2+0x82c>
  403d86:	00da      	lsls	r2, r3, #3
  403d88:	a970      	add	r1, sp, #448	; 0x1c0
  403d8a:	eb01 0b02 	add.w	fp, r1, r2
  403d8e:	9204      	str	r2, [sp, #16]
  403d90:	aa0c      	add	r2, sp, #48	; 0x30
  403d92:	eb02 0683 	add.w	r6, r2, r3, lsl #2
  403d96:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 403e60 <__kernel_rem_pio2+0x500>
  403d9a:	f10b 0708 	add.w	r7, fp, #8
  403d9e:	3604      	adds	r6, #4
  403da0:	f04f 0800 	mov.w	r8, #0
  403da4:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  403da8:	f000 fd4a 	bl	404840 <__aeabi_i2d>
  403dac:	4622      	mov	r2, r4
  403dae:	462b      	mov	r3, r5
  403db0:	f000 fdac 	bl	40490c <__aeabi_dmul>
  403db4:	464b      	mov	r3, r9
  403db6:	e967 0102 	strd	r0, r1, [r7, #-8]!
  403dba:	4642      	mov	r2, r8
  403dbc:	4620      	mov	r0, r4
  403dbe:	4629      	mov	r1, r5
  403dc0:	f000 fda4 	bl	40490c <__aeabi_dmul>
  403dc4:	ab0c      	add	r3, sp, #48	; 0x30
  403dc6:	429e      	cmp	r6, r3
  403dc8:	4604      	mov	r4, r0
  403dca:	460d      	mov	r5, r1
  403dcc:	d1ea      	bne.n	403da4 <__kernel_rem_pio2+0x444>
  403dce:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  403dd2:	f8cd a00c 	str.w	sl, [sp, #12]
  403dd6:	f8dd a014 	ldr.w	sl, [sp, #20]
  403dda:	f04f 0900 	mov.w	r9, #0
  403dde:	f1ba 0f00 	cmp.w	sl, #0
  403de2:	f2c0 813d 	blt.w	404060 <__kernel_rem_pio2+0x700>
  403de6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 403e64 <__kernel_rem_pio2+0x504>
  403dea:	465d      	mov	r5, fp
  403dec:	a118      	add	r1, pc, #96	; (adr r1, 403e50 <__kernel_rem_pio2+0x4f0>)
  403dee:	e9d1 0100 	ldrd	r0, r1, [r1]
  403df2:	2600      	movs	r6, #0
  403df4:	2700      	movs	r7, #0
  403df6:	2400      	movs	r4, #0
  403df8:	e003      	b.n	403e02 <__kernel_rem_pio2+0x4a2>
  403dfa:	454c      	cmp	r4, r9
  403dfc:	dc10      	bgt.n	403e20 <__kernel_rem_pio2+0x4c0>
  403dfe:	e8f8 0102 	ldrd	r0, r1, [r8], #8
  403e02:	e8f5 2302 	ldrd	r2, r3, [r5], #8
  403e06:	f000 fd81 	bl	40490c <__aeabi_dmul>
  403e0a:	4602      	mov	r2, r0
  403e0c:	460b      	mov	r3, r1
  403e0e:	4630      	mov	r0, r6
  403e10:	4639      	mov	r1, r7
  403e12:	f000 fbc9 	bl	4045a8 <__adddf3>
  403e16:	3401      	adds	r4, #1
  403e18:	45a2      	cmp	sl, r4
  403e1a:	4606      	mov	r6, r0
  403e1c:	460f      	mov	r7, r1
  403e1e:	daec      	bge.n	403dfa <__kernel_rem_pio2+0x49a>
  403e20:	9b03      	ldr	r3, [sp, #12]
  403e22:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  403e26:	f1ab 0b08 	sub.w	fp, fp, #8
  403e2a:	e9c3 6700 	strd	r6, r7, [r3]
  403e2e:	ab6e      	add	r3, sp, #440	; 0x1b8
  403e30:	455b      	cmp	r3, fp
  403e32:	f109 0901 	add.w	r9, r9, #1
  403e36:	d1d2      	bne.n	403dde <__kernel_rem_pio2+0x47e>
  403e38:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  403e3a:	f8dd a00c 	ldr.w	sl, [sp, #12]
  403e3e:	2b03      	cmp	r3, #3
  403e40:	f200 808b 	bhi.w	403f5a <__kernel_rem_pio2+0x5fa>
  403e44:	e8df f013 	tbh	[pc, r3, lsl #1]
  403e48:	009000d1 	.word	0x009000d1
  403e4c:	00100090 	.word	0x00100090
  403e50:	40000000 	.word	0x40000000
  403e54:	3ff921fb 	.word	0x3ff921fb
  403e58:	3ff00000 	.word	0x3ff00000
  403e5c:	3fe00000 	.word	0x3fe00000
  403e60:	3e700000 	.word	0x3e700000
  403e64:	00407e90 	.word	0x00407e90
  403e68:	9b00      	ldr	r3, [sp, #0]
  403e6a:	2b00      	cmp	r3, #0
  403e6c:	f340 81a4 	ble.w	4041b8 <__kernel_rem_pio2+0x858>
  403e70:	9b04      	ldr	r3, [sp, #16]
  403e72:	eb0a 0803 	add.w	r8, sl, r3
  403e76:	e9d8 6700 	ldrd	r6, r7, [r8]
  403e7a:	46d3      	mov	fp, sl
  403e7c:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  403e80:	4632      	mov	r2, r6
  403e82:	463b      	mov	r3, r7
  403e84:	4648      	mov	r0, r9
  403e86:	4651      	mov	r1, sl
  403e88:	f000 fb8e 	bl	4045a8 <__adddf3>
  403e8c:	4604      	mov	r4, r0
  403e8e:	460d      	mov	r5, r1
  403e90:	4602      	mov	r2, r0
  403e92:	460b      	mov	r3, r1
  403e94:	4648      	mov	r0, r9
  403e96:	4651      	mov	r1, sl
  403e98:	f000 fb84 	bl	4045a4 <__aeabi_dsub>
  403e9c:	4632      	mov	r2, r6
  403e9e:	463b      	mov	r3, r7
  403ea0:	f000 fb82 	bl	4045a8 <__adddf3>
  403ea4:	e9c8 0100 	strd	r0, r1, [r8]
  403ea8:	e968 4502 	strd	r4, r5, [r8, #-8]!
  403eac:	45c3      	cmp	fp, r8
  403eae:	4626      	mov	r6, r4
  403eb0:	462f      	mov	r7, r5
  403eb2:	d1e3      	bne.n	403e7c <__kernel_rem_pio2+0x51c>
  403eb4:	9b00      	ldr	r3, [sp, #0]
  403eb6:	2b01      	cmp	r3, #1
  403eb8:	46da      	mov	sl, fp
  403eba:	f340 817d 	ble.w	4041b8 <__kernel_rem_pio2+0x858>
  403ebe:	9b04      	ldr	r3, [sp, #16]
  403ec0:	445b      	add	r3, fp
  403ec2:	e9d3 6700 	ldrd	r6, r7, [r3]
  403ec6:	4698      	mov	r8, r3
  403ec8:	4699      	mov	r9, r3
  403eca:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
  403ece:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  403ed2:	4632      	mov	r2, r6
  403ed4:	4618      	mov	r0, r3
  403ed6:	4621      	mov	r1, r4
  403ed8:	463b      	mov	r3, r7
  403eda:	e9cd 0100 	strd	r0, r1, [sp]
  403ede:	f000 fb63 	bl	4045a8 <__adddf3>
  403ee2:	4604      	mov	r4, r0
  403ee4:	460d      	mov	r5, r1
  403ee6:	4602      	mov	r2, r0
  403ee8:	460b      	mov	r3, r1
  403eea:	e9dd 0100 	ldrd	r0, r1, [sp]
  403eee:	f000 fb59 	bl	4045a4 <__aeabi_dsub>
  403ef2:	4632      	mov	r2, r6
  403ef4:	463b      	mov	r3, r7
  403ef6:	f000 fb57 	bl	4045a8 <__adddf3>
  403efa:	e9c9 0100 	strd	r0, r1, [r9]
  403efe:	e969 4502 	strd	r4, r5, [r9, #-8]!
  403f02:	45cb      	cmp	fp, r9
  403f04:	4626      	mov	r6, r4
  403f06:	462f      	mov	r7, r5
  403f08:	d1e1      	bne.n	403ece <__kernel_rem_pio2+0x56e>
  403f0a:	2300      	movs	r3, #0
  403f0c:	f108 0808 	add.w	r8, r8, #8
  403f10:	461d      	mov	r5, r3
  403f12:	ac4c      	add	r4, sp, #304	; 0x130
  403f14:	4618      	mov	r0, r3
  403f16:	4629      	mov	r1, r5
  403f18:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  403f1c:	f000 fb44 	bl	4045a8 <__adddf3>
  403f20:	4544      	cmp	r4, r8
  403f22:	4603      	mov	r3, r0
  403f24:	460d      	mov	r5, r1
  403f26:	d1f5      	bne.n	403f14 <__kernel_rem_pio2+0x5b4>
  403f28:	9a02      	ldr	r2, [sp, #8]
  403f2a:	2a00      	cmp	r2, #0
  403f2c:	f000 8120 	beq.w	404170 <__kernel_rem_pio2+0x810>
  403f30:	f8da 4004 	ldr.w	r4, [sl, #4]
  403f34:	f8da 200c 	ldr.w	r2, [sl, #12]
  403f38:	9f06      	ldr	r7, [sp, #24]
  403f3a:	f8da 1000 	ldr.w	r1, [sl]
  403f3e:	f8da 0008 	ldr.w	r0, [sl, #8]
  403f42:	613b      	str	r3, [r7, #16]
  403f44:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  403f48:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  403f4c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  403f50:	617d      	str	r5, [r7, #20]
  403f52:	607c      	str	r4, [r7, #4]
  403f54:	60fa      	str	r2, [r7, #12]
  403f56:	6039      	str	r1, [r7, #0]
  403f58:	60b8      	str	r0, [r7, #8]
  403f5a:	9b07      	ldr	r3, [sp, #28]
  403f5c:	f003 0007 	and.w	r0, r3, #7
  403f60:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  403f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f68:	9c04      	ldr	r4, [sp, #16]
  403f6a:	2600      	movs	r6, #0
  403f6c:	3408      	adds	r4, #8
  403f6e:	4454      	add	r4, sl
  403f70:	4633      	mov	r3, r6
  403f72:	4630      	mov	r0, r6
  403f74:	4619      	mov	r1, r3
  403f76:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  403f7a:	f000 fb15 	bl	4045a8 <__adddf3>
  403f7e:	4554      	cmp	r4, sl
  403f80:	4606      	mov	r6, r0
  403f82:	460b      	mov	r3, r1
  403f84:	d1f5      	bne.n	403f72 <__kernel_rem_pio2+0x612>
  403f86:	9a02      	ldr	r2, [sp, #8]
  403f88:	4630      	mov	r0, r6
  403f8a:	4619      	mov	r1, r3
  403f8c:	2a00      	cmp	r2, #0
  403f8e:	f000 80da 	beq.w	404146 <__kernel_rem_pio2+0x7e6>
  403f92:	9806      	ldr	r0, [sp, #24]
  403f94:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  403f98:	4632      	mov	r2, r6
  403f9a:	6044      	str	r4, [r0, #4]
  403f9c:	6006      	str	r6, [r0, #0]
  403f9e:	e9da 0100 	ldrd	r0, r1, [sl]
  403fa2:	f000 faff 	bl	4045a4 <__aeabi_dsub>
  403fa6:	460b      	mov	r3, r1
  403fa8:	9900      	ldr	r1, [sp, #0]
  403faa:	2900      	cmp	r1, #0
  403fac:	4602      	mov	r2, r0
  403fae:	dd0e      	ble.n	403fce <__kernel_rem_pio2+0x66e>
  403fb0:	2401      	movs	r4, #1
  403fb2:	4610      	mov	r0, r2
  403fb4:	4619      	mov	r1, r3
  403fb6:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  403fba:	f000 faf5 	bl	4045a8 <__adddf3>
  403fbe:	460b      	mov	r3, r1
  403fc0:	9900      	ldr	r1, [sp, #0]
  403fc2:	3401      	adds	r4, #1
  403fc4:	42a1      	cmp	r1, r4
  403fc6:	4602      	mov	r2, r0
  403fc8:	daf3      	bge.n	403fb2 <__kernel_rem_pio2+0x652>
  403fca:	9902      	ldr	r1, [sp, #8]
  403fcc:	b109      	cbz	r1, 403fd2 <__kernel_rem_pio2+0x672>
  403fce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  403fd2:	4619      	mov	r1, r3
  403fd4:	9b06      	ldr	r3, [sp, #24]
  403fd6:	4610      	mov	r0, r2
  403fd8:	e9c3 0102 	strd	r0, r1, [r3, #8]
  403fdc:	9b07      	ldr	r3, [sp, #28]
  403fde:	f003 0007 	and.w	r0, r3, #7
  403fe2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  403fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fea:	9c04      	ldr	r4, [sp, #16]
  403fec:	2200      	movs	r2, #0
  403fee:	3408      	adds	r4, #8
  403ff0:	4454      	add	r4, sl
  403ff2:	4613      	mov	r3, r2
  403ff4:	4610      	mov	r0, r2
  403ff6:	4619      	mov	r1, r3
  403ff8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  403ffc:	f000 fad4 	bl	4045a8 <__adddf3>
  404000:	45a2      	cmp	sl, r4
  404002:	4602      	mov	r2, r0
  404004:	460b      	mov	r3, r1
  404006:	d1f5      	bne.n	403ff4 <__kernel_rem_pio2+0x694>
  404008:	9902      	ldr	r1, [sp, #8]
  40400a:	b109      	cbz	r1, 404010 <__kernel_rem_pio2+0x6b0>
  40400c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404010:	4619      	mov	r1, r3
  404012:	9b06      	ldr	r3, [sp, #24]
  404014:	4610      	mov	r0, r2
  404016:	e9c3 0100 	strd	r0, r1, [r3]
  40401a:	9b07      	ldr	r3, [sp, #28]
  40401c:	f003 0007 	and.w	r0, r3, #7
  404020:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  404024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404028:	2600      	movs	r6, #0
  40402a:	2700      	movs	r7, #0
  40402c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  404030:	45da      	cmp	sl, fp
  404032:	f109 0908 	add.w	r9, r9, #8
  404036:	f47f ace4 	bne.w	403a02 <__kernel_rem_pio2+0xa2>
  40403a:	e502      	b.n	403a42 <__kernel_rem_pio2+0xe2>
  40403c:	9b00      	ldr	r3, [sp, #0]
  40403e:	2b00      	cmp	r3, #0
  404040:	f108 0801 	add.w	r8, r8, #1
  404044:	bfc8      	it	gt
  404046:	2502      	movgt	r5, #2
  404048:	f73f ad8c 	bgt.w	403b64 <__kernel_rem_pio2+0x204>
  40404c:	4632      	mov	r2, r6
  40404e:	463b      	mov	r3, r7
  404050:	2000      	movs	r0, #0
  404052:	4963      	ldr	r1, [pc, #396]	; (4041e0 <__kernel_rem_pio2+0x880>)
  404054:	f000 faa6 	bl	4045a4 <__aeabi_dsub>
  404058:	2502      	movs	r5, #2
  40405a:	4606      	mov	r6, r0
  40405c:	460f      	mov	r7, r1
  40405e:	e5df      	b.n	403c20 <__kernel_rem_pio2+0x2c0>
  404060:	2600      	movs	r6, #0
  404062:	2700      	movs	r7, #0
  404064:	e6dc      	b.n	403e20 <__kernel_rem_pio2+0x4c0>
  404066:	9b04      	ldr	r3, [sp, #16]
  404068:	2b00      	cmp	r3, #0
  40406a:	dd26      	ble.n	4040ba <__kernel_rem_pio2+0x75a>
  40406c:	2400      	movs	r4, #0
  40406e:	9b04      	ldr	r3, [sp, #16]
  404070:	2b01      	cmp	r3, #1
  404072:	f43f ada8 	beq.w	403bc6 <__kernel_rem_pio2+0x266>
  404076:	2b02      	cmp	r3, #2
  404078:	d109      	bne.n	40408e <__kernel_rem_pio2+0x72e>
  40407a:	9b00      	ldr	r3, [sp, #0]
  40407c:	1e5a      	subs	r2, r3, #1
  40407e:	ab0c      	add	r3, sp, #48	; 0x30
  404080:	a90c      	add	r1, sp, #48	; 0x30
  404082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404086:	f3c3 0315 	ubfx	r3, r3, #0, #22
  40408a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  40408e:	2d02      	cmp	r5, #2
  404090:	f47f adc6 	bne.w	403c20 <__kernel_rem_pio2+0x2c0>
  404094:	4632      	mov	r2, r6
  404096:	463b      	mov	r3, r7
  404098:	2000      	movs	r0, #0
  40409a:	4951      	ldr	r1, [pc, #324]	; (4041e0 <__kernel_rem_pio2+0x880>)
  40409c:	f000 fa82 	bl	4045a4 <__aeabi_dsub>
  4040a0:	4606      	mov	r6, r0
  4040a2:	460f      	mov	r7, r1
  4040a4:	2c00      	cmp	r4, #0
  4040a6:	f43f adbb 	beq.w	403c20 <__kernel_rem_pio2+0x2c0>
  4040aa:	e5ab      	b.n	403c04 <__kernel_rem_pio2+0x2a4>
  4040ac:	9900      	ldr	r1, [sp, #0]
  4040ae:	3301      	adds	r3, #1
  4040b0:	4299      	cmp	r1, r3
  4040b2:	d178      	bne.n	4041a6 <__kernel_rem_pio2+0x846>
  4040b4:	9b04      	ldr	r3, [sp, #16]
  4040b6:	2b00      	cmp	r3, #0
  4040b8:	dcd9      	bgt.n	40406e <__kernel_rem_pio2+0x70e>
  4040ba:	2d02      	cmp	r5, #2
  4040bc:	f47f adb0 	bne.w	403c20 <__kernel_rem_pio2+0x2c0>
  4040c0:	4632      	mov	r2, r6
  4040c2:	463b      	mov	r3, r7
  4040c4:	2000      	movs	r0, #0
  4040c6:	4946      	ldr	r1, [pc, #280]	; (4041e0 <__kernel_rem_pio2+0x880>)
  4040c8:	f000 fa6c 	bl	4045a4 <__aeabi_dsub>
  4040cc:	4606      	mov	r6, r0
  4040ce:	460f      	mov	r7, r1
  4040d0:	e5a6      	b.n	403c20 <__kernel_rem_pio2+0x2c0>
  4040d2:	2301      	movs	r3, #1
  4040d4:	e5d1      	b.n	403c7a <__kernel_rem_pio2+0x31a>
  4040d6:	4639      	mov	r1, r7
  4040d8:	9f04      	ldr	r7, [sp, #16]
  4040da:	9502      	str	r5, [sp, #8]
  4040dc:	427a      	negs	r2, r7
  4040de:	4630      	mov	r0, r6
  4040e0:	f8cd 801c 	str.w	r8, [sp, #28]
  4040e4:	f000 f9d0 	bl	404488 <scalbn>
  4040e8:	2200      	movs	r2, #0
  4040ea:	4b3e      	ldr	r3, [pc, #248]	; (4041e4 <__kernel_rem_pio2+0x884>)
  4040ec:	4604      	mov	r4, r0
  4040ee:	460d      	mov	r5, r1
  4040f0:	f000 fe92 	bl	404e18 <__aeabi_dcmpge>
  4040f4:	2800      	cmp	r0, #0
  4040f6:	d062      	beq.n	4041be <__kernel_rem_pio2+0x85e>
  4040f8:	2200      	movs	r2, #0
  4040fa:	4b3b      	ldr	r3, [pc, #236]	; (4041e8 <__kernel_rem_pio2+0x888>)
  4040fc:	4620      	mov	r0, r4
  4040fe:	4629      	mov	r1, r5
  404100:	f000 fc04 	bl	40490c <__aeabi_dmul>
  404104:	f000 feb2 	bl	404e6c <__aeabi_d2iz>
  404108:	4606      	mov	r6, r0
  40410a:	f000 fb99 	bl	404840 <__aeabi_i2d>
  40410e:	2200      	movs	r2, #0
  404110:	4b34      	ldr	r3, [pc, #208]	; (4041e4 <__kernel_rem_pio2+0x884>)
  404112:	f000 fbfb 	bl	40490c <__aeabi_dmul>
  404116:	4602      	mov	r2, r0
  404118:	460b      	mov	r3, r1
  40411a:	4620      	mov	r0, r4
  40411c:	4629      	mov	r1, r5
  40411e:	f000 fa41 	bl	4045a4 <__aeabi_dsub>
  404122:	f000 fea3 	bl	404e6c <__aeabi_d2iz>
  404126:	9900      	ldr	r1, [sp, #0]
  404128:	460b      	mov	r3, r1
  40412a:	3301      	adds	r3, #1
  40412c:	461a      	mov	r2, r3
  40412e:	9300      	str	r3, [sp, #0]
  404130:	463b      	mov	r3, r7
  404132:	3318      	adds	r3, #24
  404134:	9304      	str	r3, [sp, #16]
  404136:	460b      	mov	r3, r1
  404138:	a90c      	add	r1, sp, #48	; 0x30
  40413a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  40413e:	4613      	mov	r3, r2
  404140:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
  404144:	e614      	b.n	403d70 <__kernel_rem_pio2+0x410>
  404146:	9b06      	ldr	r3, [sp, #24]
  404148:	4632      	mov	r2, r6
  40414a:	e9c3 0100 	strd	r0, r1, [r3]
  40414e:	460b      	mov	r3, r1
  404150:	e9da 0100 	ldrd	r0, r1, [sl]
  404154:	f000 fa26 	bl	4045a4 <__aeabi_dsub>
  404158:	460b      	mov	r3, r1
  40415a:	9900      	ldr	r1, [sp, #0]
  40415c:	2900      	cmp	r1, #0
  40415e:	4602      	mov	r2, r0
  404160:	f73f af26 	bgt.w	403fb0 <__kernel_rem_pio2+0x650>
  404164:	4619      	mov	r1, r3
  404166:	9b06      	ldr	r3, [sp, #24]
  404168:	4610      	mov	r0, r2
  40416a:	e9c3 0102 	strd	r0, r1, [r3, #8]
  40416e:	e735      	b.n	403fdc <__kernel_rem_pio2+0x67c>
  404170:	4618      	mov	r0, r3
  404172:	4629      	mov	r1, r5
  404174:	e9da 2300 	ldrd	r2, r3, [sl]
  404178:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  40417c:	9f06      	ldr	r7, [sp, #24]
  40417e:	e9c7 0104 	strd	r0, r1, [r7, #16]
  404182:	e9c7 2300 	strd	r2, r3, [r7]
  404186:	e9c7 4502 	strd	r4, r5, [r7, #8]
  40418a:	e6e6      	b.n	403f5a <__kernel_rem_pio2+0x5fa>
  40418c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  40418e:	2b03      	cmp	r3, #3
  404190:	f63f aee3 	bhi.w	403f5a <__kernel_rem_pio2+0x5fa>
  404194:	e8df f003 	tbb	[pc, r3]
  404198:	0e1c1c21 	.word	0x0e1c1c21
  40419c:	9b00      	ldr	r3, [sp, #0]
  40419e:	2b01      	cmp	r3, #1
  4041a0:	dd88      	ble.n	4040b4 <__kernel_rem_pio2+0x754>
  4041a2:	aa0c      	add	r2, sp, #48	; 0x30
  4041a4:	2301      	movs	r3, #1
  4041a6:	f852 4f04 	ldr.w	r4, [r2, #4]!
  4041aa:	2c00      	cmp	r4, #0
  4041ac:	f43f af7e 	beq.w	4040ac <__kernel_rem_pio2+0x74c>
  4041b0:	1c58      	adds	r0, r3, #1
  4041b2:	e4dd      	b.n	403b70 <__kernel_rem_pio2+0x210>
  4041b4:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  4041b8:	2300      	movs	r3, #0
  4041ba:	461d      	mov	r5, r3
  4041bc:	e6b4      	b.n	403f28 <__kernel_rem_pio2+0x5c8>
  4041be:	4629      	mov	r1, r5
  4041c0:	4620      	mov	r0, r4
  4041c2:	f000 fe53 	bl	404e6c <__aeabi_d2iz>
  4041c6:	9a00      	ldr	r2, [sp, #0]
  4041c8:	a90c      	add	r1, sp, #48	; 0x30
  4041ca:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
  4041ce:	e5cf      	b.n	403d70 <__kernel_rem_pio2+0x410>
  4041d0:	2600      	movs	r6, #0
  4041d2:	4633      	mov	r3, r6
  4041d4:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  4041d8:	e6d5      	b.n	403f86 <__kernel_rem_pio2+0x626>
  4041da:	2200      	movs	r2, #0
  4041dc:	4613      	mov	r3, r2
  4041de:	e713      	b.n	404008 <__kernel_rem_pio2+0x6a8>
  4041e0:	3ff00000 	.word	0x3ff00000
  4041e4:	41700000 	.word	0x41700000
  4041e8:	3e700000 	.word	0x3e700000
  4041ec:	00000000 	.word	0x00000000

004041f0 <__kernel_sin>:
  4041f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041f4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4041f8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  4041fc:	b085      	sub	sp, #20
  4041fe:	460c      	mov	r4, r1
  404200:	4690      	mov	r8, r2
  404202:	4699      	mov	r9, r3
  404204:	4605      	mov	r5, r0
  404206:	da04      	bge.n	404212 <__kernel_sin+0x22>
  404208:	f000 fe30 	bl	404e6c <__aeabi_d2iz>
  40420c:	2800      	cmp	r0, #0
  40420e:	f000 8085 	beq.w	40431c <__kernel_sin+0x12c>
  404212:	462a      	mov	r2, r5
  404214:	4623      	mov	r3, r4
  404216:	4628      	mov	r0, r5
  404218:	4621      	mov	r1, r4
  40421a:	f000 fb77 	bl	40490c <__aeabi_dmul>
  40421e:	4606      	mov	r6, r0
  404220:	460f      	mov	r7, r1
  404222:	4602      	mov	r2, r0
  404224:	460b      	mov	r3, r1
  404226:	4628      	mov	r0, r5
  404228:	4621      	mov	r1, r4
  40422a:	f000 fb6f 	bl	40490c <__aeabi_dmul>
  40422e:	a33e      	add	r3, pc, #248	; (adr r3, 404328 <__kernel_sin+0x138>)
  404230:	e9d3 2300 	ldrd	r2, r3, [r3]
  404234:	4682      	mov	sl, r0
  404236:	468b      	mov	fp, r1
  404238:	4630      	mov	r0, r6
  40423a:	4639      	mov	r1, r7
  40423c:	f000 fb66 	bl	40490c <__aeabi_dmul>
  404240:	a33b      	add	r3, pc, #236	; (adr r3, 404330 <__kernel_sin+0x140>)
  404242:	e9d3 2300 	ldrd	r2, r3, [r3]
  404246:	f000 f9ad 	bl	4045a4 <__aeabi_dsub>
  40424a:	4632      	mov	r2, r6
  40424c:	463b      	mov	r3, r7
  40424e:	f000 fb5d 	bl	40490c <__aeabi_dmul>
  404252:	a339      	add	r3, pc, #228	; (adr r3, 404338 <__kernel_sin+0x148>)
  404254:	e9d3 2300 	ldrd	r2, r3, [r3]
  404258:	f000 f9a6 	bl	4045a8 <__adddf3>
  40425c:	4632      	mov	r2, r6
  40425e:	463b      	mov	r3, r7
  404260:	f000 fb54 	bl	40490c <__aeabi_dmul>
  404264:	a336      	add	r3, pc, #216	; (adr r3, 404340 <__kernel_sin+0x150>)
  404266:	e9d3 2300 	ldrd	r2, r3, [r3]
  40426a:	f000 f99b 	bl	4045a4 <__aeabi_dsub>
  40426e:	4632      	mov	r2, r6
  404270:	463b      	mov	r3, r7
  404272:	f000 fb4b 	bl	40490c <__aeabi_dmul>
  404276:	a334      	add	r3, pc, #208	; (adr r3, 404348 <__kernel_sin+0x158>)
  404278:	e9d3 2300 	ldrd	r2, r3, [r3]
  40427c:	f000 f994 	bl	4045a8 <__adddf3>
  404280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404282:	e9cd 0100 	strd	r0, r1, [sp]
  404286:	b39b      	cbz	r3, 4042f0 <__kernel_sin+0x100>
  404288:	2200      	movs	r2, #0
  40428a:	4b33      	ldr	r3, [pc, #204]	; (404358 <__kernel_sin+0x168>)
  40428c:	4640      	mov	r0, r8
  40428e:	4649      	mov	r1, r9
  404290:	f000 fb3c 	bl	40490c <__aeabi_dmul>
  404294:	e9dd 2300 	ldrd	r2, r3, [sp]
  404298:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40429c:	4650      	mov	r0, sl
  40429e:	4659      	mov	r1, fp
  4042a0:	f000 fb34 	bl	40490c <__aeabi_dmul>
  4042a4:	4602      	mov	r2, r0
  4042a6:	460b      	mov	r3, r1
  4042a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4042ac:	f000 f97a 	bl	4045a4 <__aeabi_dsub>
  4042b0:	4632      	mov	r2, r6
  4042b2:	463b      	mov	r3, r7
  4042b4:	f000 fb2a 	bl	40490c <__aeabi_dmul>
  4042b8:	4642      	mov	r2, r8
  4042ba:	464b      	mov	r3, r9
  4042bc:	f000 f972 	bl	4045a4 <__aeabi_dsub>
  4042c0:	a323      	add	r3, pc, #140	; (adr r3, 404350 <__kernel_sin+0x160>)
  4042c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042c6:	4606      	mov	r6, r0
  4042c8:	460f      	mov	r7, r1
  4042ca:	4650      	mov	r0, sl
  4042cc:	4659      	mov	r1, fp
  4042ce:	f000 fb1d 	bl	40490c <__aeabi_dmul>
  4042d2:	4602      	mov	r2, r0
  4042d4:	460b      	mov	r3, r1
  4042d6:	4630      	mov	r0, r6
  4042d8:	4639      	mov	r1, r7
  4042da:	f000 f965 	bl	4045a8 <__adddf3>
  4042de:	4602      	mov	r2, r0
  4042e0:	460b      	mov	r3, r1
  4042e2:	4628      	mov	r0, r5
  4042e4:	4621      	mov	r1, r4
  4042e6:	f000 f95d 	bl	4045a4 <__aeabi_dsub>
  4042ea:	b005      	add	sp, #20
  4042ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042f0:	4602      	mov	r2, r0
  4042f2:	460b      	mov	r3, r1
  4042f4:	4630      	mov	r0, r6
  4042f6:	4639      	mov	r1, r7
  4042f8:	f000 fb08 	bl	40490c <__aeabi_dmul>
  4042fc:	a314      	add	r3, pc, #80	; (adr r3, 404350 <__kernel_sin+0x160>)
  4042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  404302:	f000 f94f 	bl	4045a4 <__aeabi_dsub>
  404306:	4652      	mov	r2, sl
  404308:	465b      	mov	r3, fp
  40430a:	f000 faff 	bl	40490c <__aeabi_dmul>
  40430e:	462a      	mov	r2, r5
  404310:	4623      	mov	r3, r4
  404312:	f000 f949 	bl	4045a8 <__adddf3>
  404316:	b005      	add	sp, #20
  404318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40431c:	4628      	mov	r0, r5
  40431e:	4621      	mov	r1, r4
  404320:	b005      	add	sp, #20
  404322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404326:	bf00      	nop
  404328:	5acfd57c 	.word	0x5acfd57c
  40432c:	3de5d93a 	.word	0x3de5d93a
  404330:	8a2b9ceb 	.word	0x8a2b9ceb
  404334:	3e5ae5e6 	.word	0x3e5ae5e6
  404338:	57b1fe7d 	.word	0x57b1fe7d
  40433c:	3ec71de3 	.word	0x3ec71de3
  404340:	19c161d5 	.word	0x19c161d5
  404344:	3f2a01a0 	.word	0x3f2a01a0
  404348:	1110f8a6 	.word	0x1110f8a6
  40434c:	3f811111 	.word	0x3f811111
  404350:	55555549 	.word	0x55555549
  404354:	3fc55555 	.word	0x3fc55555
  404358:	3fe00000 	.word	0x3fe00000

0040435c <fabs>:
  40435c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404360:	4770      	bx	lr
  404362:	bf00      	nop
  404364:	0000      	movs	r0, r0
	...

00404368 <floor>:
  404368:	f3c1 520a 	ubfx	r2, r1, #20, #11
  40436c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404370:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  404374:	2e13      	cmp	r6, #19
  404376:	460b      	mov	r3, r1
  404378:	460d      	mov	r5, r1
  40437a:	4604      	mov	r4, r0
  40437c:	4688      	mov	r8, r1
  40437e:	4607      	mov	r7, r0
  404380:	dc1d      	bgt.n	4043be <floor+0x56>
  404382:	2e00      	cmp	r6, #0
  404384:	db40      	blt.n	404408 <floor+0xa0>
  404386:	4a3c      	ldr	r2, [pc, #240]	; (404478 <floor+0x110>)
  404388:	fa42 f906 	asr.w	r9, r2, r6
  40438c:	ea01 0209 	and.w	r2, r1, r9
  404390:	4302      	orrs	r2, r0
  404392:	4686      	mov	lr, r0
  404394:	d018      	beq.n	4043c8 <floor+0x60>
  404396:	a336      	add	r3, pc, #216	; (adr r3, 404470 <floor+0x108>)
  404398:	e9d3 2300 	ldrd	r2, r3, [r3]
  40439c:	f000 f904 	bl	4045a8 <__adddf3>
  4043a0:	2200      	movs	r2, #0
  4043a2:	2300      	movs	r3, #0
  4043a4:	f000 fd42 	bl	404e2c <__aeabi_dcmpgt>
  4043a8:	b120      	cbz	r0, 4043b4 <floor+0x4c>
  4043aa:	2d00      	cmp	r5, #0
  4043ac:	db42      	blt.n	404434 <floor+0xcc>
  4043ae:	ea28 0509 	bic.w	r5, r8, r9
  4043b2:	2700      	movs	r7, #0
  4043b4:	463c      	mov	r4, r7
  4043b6:	4629      	mov	r1, r5
  4043b8:	4620      	mov	r0, r4
  4043ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043be:	2e33      	cmp	r6, #51	; 0x33
  4043c0:	dd06      	ble.n	4043d0 <floor+0x68>
  4043c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  4043c6:	d02f      	beq.n	404428 <floor+0xc0>
  4043c8:	4619      	mov	r1, r3
  4043ca:	4620      	mov	r0, r4
  4043cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043d0:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  4043d4:	f04f 39ff 	mov.w	r9, #4294967295
  4043d8:	fa29 f902 	lsr.w	r9, r9, r2
  4043dc:	ea10 0f09 	tst.w	r0, r9
  4043e0:	d0f2      	beq.n	4043c8 <floor+0x60>
  4043e2:	a323      	add	r3, pc, #140	; (adr r3, 404470 <floor+0x108>)
  4043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4043e8:	f000 f8de 	bl	4045a8 <__adddf3>
  4043ec:	2200      	movs	r2, #0
  4043ee:	2300      	movs	r3, #0
  4043f0:	f000 fd1c 	bl	404e2c <__aeabi_dcmpgt>
  4043f4:	2800      	cmp	r0, #0
  4043f6:	d0dd      	beq.n	4043b4 <floor+0x4c>
  4043f8:	2d00      	cmp	r5, #0
  4043fa:	db21      	blt.n	404440 <floor+0xd8>
  4043fc:	4645      	mov	r5, r8
  4043fe:	ea27 0709 	bic.w	r7, r7, r9
  404402:	463c      	mov	r4, r7
  404404:	4629      	mov	r1, r5
  404406:	e7d7      	b.n	4043b8 <floor+0x50>
  404408:	a319      	add	r3, pc, #100	; (adr r3, 404470 <floor+0x108>)
  40440a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40440e:	f000 f8cb 	bl	4045a8 <__adddf3>
  404412:	2200      	movs	r2, #0
  404414:	2300      	movs	r3, #0
  404416:	f000 fd09 	bl	404e2c <__aeabi_dcmpgt>
  40441a:	2800      	cmp	r0, #0
  40441c:	d0ca      	beq.n	4043b4 <floor+0x4c>
  40441e:	2d00      	cmp	r5, #0
  404420:	db19      	blt.n	404456 <floor+0xee>
  404422:	2700      	movs	r7, #0
  404424:	463d      	mov	r5, r7
  404426:	e7c5      	b.n	4043b4 <floor+0x4c>
  404428:	4602      	mov	r2, r0
  40442a:	460b      	mov	r3, r1
  40442c:	f000 f8bc 	bl	4045a8 <__adddf3>
  404430:	4604      	mov	r4, r0
  404432:	e7ca      	b.n	4043ca <floor+0x62>
  404434:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  404438:	fa43 f606 	asr.w	r6, r3, r6
  40443c:	44b0      	add	r8, r6
  40443e:	e7b6      	b.n	4043ae <floor+0x46>
  404440:	2e14      	cmp	r6, #20
  404442:	d010      	beq.n	404466 <floor+0xfe>
  404444:	2301      	movs	r3, #1
  404446:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  40444a:	fa03 f606 	lsl.w	r6, r3, r6
  40444e:	1937      	adds	r7, r6, r4
  404450:	bf28      	it	cs
  404452:	4498      	addcs	r8, r3
  404454:	e7d2      	b.n	4043fc <floor+0x94>
  404456:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  40445a:	4b08      	ldr	r3, [pc, #32]	; (40447c <floor+0x114>)
  40445c:	4322      	orrs	r2, r4
  40445e:	bf18      	it	ne
  404460:	461d      	movne	r5, r3
  404462:	2700      	movs	r7, #0
  404464:	e7a6      	b.n	4043b4 <floor+0x4c>
  404466:	f105 0801 	add.w	r8, r5, #1
  40446a:	e7c7      	b.n	4043fc <floor+0x94>
  40446c:	f3af 8000 	nop.w
  404470:	8800759c 	.word	0x8800759c
  404474:	7e37e43c 	.word	0x7e37e43c
  404478:	000fffff 	.word	0x000fffff
  40447c:	bff00000 	.word	0xbff00000

00404480 <matherr>:
  404480:	2000      	movs	r0, #0
  404482:	4770      	bx	lr
  404484:	0000      	movs	r0, r0
	...

00404488 <scalbn>:
  404488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40448a:	f3c1 560a 	ubfx	r6, r1, #20, #11
  40448e:	4604      	mov	r4, r0
  404490:	460d      	mov	r5, r1
  404492:	460b      	mov	r3, r1
  404494:	4617      	mov	r7, r2
  404496:	bb0e      	cbnz	r6, 4044dc <scalbn+0x54>
  404498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40449c:	4303      	orrs	r3, r0
  40449e:	4686      	mov	lr, r0
  4044a0:	d025      	beq.n	4044ee <scalbn+0x66>
  4044a2:	2200      	movs	r2, #0
  4044a4:	4b34      	ldr	r3, [pc, #208]	; (404578 <scalbn+0xf0>)
  4044a6:	f000 fa31 	bl	40490c <__aeabi_dmul>
  4044aa:	4a34      	ldr	r2, [pc, #208]	; (40457c <scalbn+0xf4>)
  4044ac:	4297      	cmp	r7, r2
  4044ae:	4604      	mov	r4, r0
  4044b0:	460d      	mov	r5, r1
  4044b2:	460b      	mov	r3, r1
  4044b4:	db2a      	blt.n	40450c <scalbn+0x84>
  4044b6:	f3c1 560a 	ubfx	r6, r1, #20, #11
  4044ba:	3e36      	subs	r6, #54	; 0x36
  4044bc:	443e      	add	r6, r7
  4044be:	f240 72fe 	movw	r2, #2046	; 0x7fe
  4044c2:	4296      	cmp	r6, r2
  4044c4:	dc28      	bgt.n	404518 <scalbn+0x90>
  4044c6:	2e00      	cmp	r6, #0
  4044c8:	dd12      	ble.n	4044f0 <scalbn+0x68>
  4044ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  4044ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  4044d2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  4044d6:	4620      	mov	r0, r4
  4044d8:	4629      	mov	r1, r5
  4044da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044dc:	f240 72ff 	movw	r2, #2047	; 0x7ff
  4044e0:	4296      	cmp	r6, r2
  4044e2:	d1eb      	bne.n	4044bc <scalbn+0x34>
  4044e4:	4602      	mov	r2, r0
  4044e6:	460b      	mov	r3, r1
  4044e8:	f000 f85e 	bl	4045a8 <__adddf3>
  4044ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044f0:	f116 0f35 	cmn.w	r6, #53	; 0x35
  4044f4:	da1d      	bge.n	404532 <scalbn+0xaa>
  4044f6:	f24c 3350 	movw	r3, #50000	; 0xc350
  4044fa:	429f      	cmp	r7, r3
  4044fc:	4622      	mov	r2, r4
  4044fe:	462b      	mov	r3, r5
  404500:	dc25      	bgt.n	40454e <scalbn+0xc6>
  404502:	a119      	add	r1, pc, #100	; (adr r1, 404568 <scalbn+0xe0>)
  404504:	e9d1 0100 	ldrd	r0, r1, [r1]
  404508:	f000 f83c 	bl	404584 <copysign>
  40450c:	a316      	add	r3, pc, #88	; (adr r3, 404568 <scalbn+0xe0>)
  40450e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404512:	f000 f9fb 	bl	40490c <__aeabi_dmul>
  404516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404518:	4622      	mov	r2, r4
  40451a:	462b      	mov	r3, r5
  40451c:	a114      	add	r1, pc, #80	; (adr r1, 404570 <scalbn+0xe8>)
  40451e:	e9d1 0100 	ldrd	r0, r1, [r1]
  404522:	f000 f82f 	bl	404584 <copysign>
  404526:	a312      	add	r3, pc, #72	; (adr r3, 404570 <scalbn+0xe8>)
  404528:	e9d3 2300 	ldrd	r2, r3, [r3]
  40452c:	f000 f9ee 	bl	40490c <__aeabi_dmul>
  404530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404532:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  404536:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  40453a:	3636      	adds	r6, #54	; 0x36
  40453c:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  404540:	4620      	mov	r0, r4
  404542:	4629      	mov	r1, r5
  404544:	2200      	movs	r2, #0
  404546:	4b0e      	ldr	r3, [pc, #56]	; (404580 <scalbn+0xf8>)
  404548:	f000 f9e0 	bl	40490c <__aeabi_dmul>
  40454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40454e:	a108      	add	r1, pc, #32	; (adr r1, 404570 <scalbn+0xe8>)
  404550:	e9d1 0100 	ldrd	r0, r1, [r1]
  404554:	f000 f816 	bl	404584 <copysign>
  404558:	a305      	add	r3, pc, #20	; (adr r3, 404570 <scalbn+0xe8>)
  40455a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40455e:	f000 f9d5 	bl	40490c <__aeabi_dmul>
  404562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404564:	f3af 8000 	nop.w
  404568:	c2f8f359 	.word	0xc2f8f359
  40456c:	01a56e1f 	.word	0x01a56e1f
  404570:	8800759c 	.word	0x8800759c
  404574:	7e37e43c 	.word	0x7e37e43c
  404578:	43500000 	.word	0x43500000
  40457c:	ffff3cb0 	.word	0xffff3cb0
  404580:	3c900000 	.word	0x3c900000

00404584 <copysign>:
  404584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  404588:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  40458c:	ea42 0103 	orr.w	r1, r2, r3
  404590:	4770      	bx	lr
  404592:	bf00      	nop

00404594 <arm_mat_init_f32>:
  404594:	8001      	strh	r1, [r0, #0]
  404596:	8042      	strh	r2, [r0, #2]
  404598:	6043      	str	r3, [r0, #4]
  40459a:	4770      	bx	lr

0040459c <__aeabi_drsub>:
  40459c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4045a0:	e002      	b.n	4045a8 <__adddf3>
  4045a2:	bf00      	nop

004045a4 <__aeabi_dsub>:
  4045a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004045a8 <__adddf3>:
  4045a8:	b530      	push	{r4, r5, lr}
  4045aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4045ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4045b2:	ea94 0f05 	teq	r4, r5
  4045b6:	bf08      	it	eq
  4045b8:	ea90 0f02 	teqeq	r0, r2
  4045bc:	bf1f      	itttt	ne
  4045be:	ea54 0c00 	orrsne.w	ip, r4, r0
  4045c2:	ea55 0c02 	orrsne.w	ip, r5, r2
  4045c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4045ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4045ce:	f000 80e2 	beq.w	404796 <__adddf3+0x1ee>
  4045d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4045d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4045da:	bfb8      	it	lt
  4045dc:	426d      	neglt	r5, r5
  4045de:	dd0c      	ble.n	4045fa <__adddf3+0x52>
  4045e0:	442c      	add	r4, r5
  4045e2:	ea80 0202 	eor.w	r2, r0, r2
  4045e6:	ea81 0303 	eor.w	r3, r1, r3
  4045ea:	ea82 0000 	eor.w	r0, r2, r0
  4045ee:	ea83 0101 	eor.w	r1, r3, r1
  4045f2:	ea80 0202 	eor.w	r2, r0, r2
  4045f6:	ea81 0303 	eor.w	r3, r1, r3
  4045fa:	2d36      	cmp	r5, #54	; 0x36
  4045fc:	bf88      	it	hi
  4045fe:	bd30      	pophi	{r4, r5, pc}
  404600:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404604:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404608:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40460c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404610:	d002      	beq.n	404618 <__adddf3+0x70>
  404612:	4240      	negs	r0, r0
  404614:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404618:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40461c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404620:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404624:	d002      	beq.n	40462c <__adddf3+0x84>
  404626:	4252      	negs	r2, r2
  404628:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40462c:	ea94 0f05 	teq	r4, r5
  404630:	f000 80a7 	beq.w	404782 <__adddf3+0x1da>
  404634:	f1a4 0401 	sub.w	r4, r4, #1
  404638:	f1d5 0e20 	rsbs	lr, r5, #32
  40463c:	db0d      	blt.n	40465a <__adddf3+0xb2>
  40463e:	fa02 fc0e 	lsl.w	ip, r2, lr
  404642:	fa22 f205 	lsr.w	r2, r2, r5
  404646:	1880      	adds	r0, r0, r2
  404648:	f141 0100 	adc.w	r1, r1, #0
  40464c:	fa03 f20e 	lsl.w	r2, r3, lr
  404650:	1880      	adds	r0, r0, r2
  404652:	fa43 f305 	asr.w	r3, r3, r5
  404656:	4159      	adcs	r1, r3
  404658:	e00e      	b.n	404678 <__adddf3+0xd0>
  40465a:	f1a5 0520 	sub.w	r5, r5, #32
  40465e:	f10e 0e20 	add.w	lr, lr, #32
  404662:	2a01      	cmp	r2, #1
  404664:	fa03 fc0e 	lsl.w	ip, r3, lr
  404668:	bf28      	it	cs
  40466a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40466e:	fa43 f305 	asr.w	r3, r3, r5
  404672:	18c0      	adds	r0, r0, r3
  404674:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  404678:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40467c:	d507      	bpl.n	40468e <__adddf3+0xe6>
  40467e:	f04f 0e00 	mov.w	lr, #0
  404682:	f1dc 0c00 	rsbs	ip, ip, #0
  404686:	eb7e 0000 	sbcs.w	r0, lr, r0
  40468a:	eb6e 0101 	sbc.w	r1, lr, r1
  40468e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  404692:	d31b      	bcc.n	4046cc <__adddf3+0x124>
  404694:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  404698:	d30c      	bcc.n	4046b4 <__adddf3+0x10c>
  40469a:	0849      	lsrs	r1, r1, #1
  40469c:	ea5f 0030 	movs.w	r0, r0, rrx
  4046a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4046a4:	f104 0401 	add.w	r4, r4, #1
  4046a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4046ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4046b0:	f080 809a 	bcs.w	4047e8 <__adddf3+0x240>
  4046b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4046b8:	bf08      	it	eq
  4046ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4046be:	f150 0000 	adcs.w	r0, r0, #0
  4046c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4046c6:	ea41 0105 	orr.w	r1, r1, r5
  4046ca:	bd30      	pop	{r4, r5, pc}
  4046cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4046d0:	4140      	adcs	r0, r0
  4046d2:	eb41 0101 	adc.w	r1, r1, r1
  4046d6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4046da:	f1a4 0401 	sub.w	r4, r4, #1
  4046de:	d1e9      	bne.n	4046b4 <__adddf3+0x10c>
  4046e0:	f091 0f00 	teq	r1, #0
  4046e4:	bf04      	itt	eq
  4046e6:	4601      	moveq	r1, r0
  4046e8:	2000      	moveq	r0, #0
  4046ea:	fab1 f381 	clz	r3, r1
  4046ee:	bf08      	it	eq
  4046f0:	3320      	addeq	r3, #32
  4046f2:	f1a3 030b 	sub.w	r3, r3, #11
  4046f6:	f1b3 0220 	subs.w	r2, r3, #32
  4046fa:	da0c      	bge.n	404716 <__adddf3+0x16e>
  4046fc:	320c      	adds	r2, #12
  4046fe:	dd08      	ble.n	404712 <__adddf3+0x16a>
  404700:	f102 0c14 	add.w	ip, r2, #20
  404704:	f1c2 020c 	rsb	r2, r2, #12
  404708:	fa01 f00c 	lsl.w	r0, r1, ip
  40470c:	fa21 f102 	lsr.w	r1, r1, r2
  404710:	e00c      	b.n	40472c <__adddf3+0x184>
  404712:	f102 0214 	add.w	r2, r2, #20
  404716:	bfd8      	it	le
  404718:	f1c2 0c20 	rsble	ip, r2, #32
  40471c:	fa01 f102 	lsl.w	r1, r1, r2
  404720:	fa20 fc0c 	lsr.w	ip, r0, ip
  404724:	bfdc      	itt	le
  404726:	ea41 010c 	orrle.w	r1, r1, ip
  40472a:	4090      	lslle	r0, r2
  40472c:	1ae4      	subs	r4, r4, r3
  40472e:	bfa2      	ittt	ge
  404730:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  404734:	4329      	orrge	r1, r5
  404736:	bd30      	popge	{r4, r5, pc}
  404738:	ea6f 0404 	mvn.w	r4, r4
  40473c:	3c1f      	subs	r4, #31
  40473e:	da1c      	bge.n	40477a <__adddf3+0x1d2>
  404740:	340c      	adds	r4, #12
  404742:	dc0e      	bgt.n	404762 <__adddf3+0x1ba>
  404744:	f104 0414 	add.w	r4, r4, #20
  404748:	f1c4 0220 	rsb	r2, r4, #32
  40474c:	fa20 f004 	lsr.w	r0, r0, r4
  404750:	fa01 f302 	lsl.w	r3, r1, r2
  404754:	ea40 0003 	orr.w	r0, r0, r3
  404758:	fa21 f304 	lsr.w	r3, r1, r4
  40475c:	ea45 0103 	orr.w	r1, r5, r3
  404760:	bd30      	pop	{r4, r5, pc}
  404762:	f1c4 040c 	rsb	r4, r4, #12
  404766:	f1c4 0220 	rsb	r2, r4, #32
  40476a:	fa20 f002 	lsr.w	r0, r0, r2
  40476e:	fa01 f304 	lsl.w	r3, r1, r4
  404772:	ea40 0003 	orr.w	r0, r0, r3
  404776:	4629      	mov	r1, r5
  404778:	bd30      	pop	{r4, r5, pc}
  40477a:	fa21 f004 	lsr.w	r0, r1, r4
  40477e:	4629      	mov	r1, r5
  404780:	bd30      	pop	{r4, r5, pc}
  404782:	f094 0f00 	teq	r4, #0
  404786:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40478a:	bf06      	itte	eq
  40478c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  404790:	3401      	addeq	r4, #1
  404792:	3d01      	subne	r5, #1
  404794:	e74e      	b.n	404634 <__adddf3+0x8c>
  404796:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40479a:	bf18      	it	ne
  40479c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4047a0:	d029      	beq.n	4047f6 <__adddf3+0x24e>
  4047a2:	ea94 0f05 	teq	r4, r5
  4047a6:	bf08      	it	eq
  4047a8:	ea90 0f02 	teqeq	r0, r2
  4047ac:	d005      	beq.n	4047ba <__adddf3+0x212>
  4047ae:	ea54 0c00 	orrs.w	ip, r4, r0
  4047b2:	bf04      	itt	eq
  4047b4:	4619      	moveq	r1, r3
  4047b6:	4610      	moveq	r0, r2
  4047b8:	bd30      	pop	{r4, r5, pc}
  4047ba:	ea91 0f03 	teq	r1, r3
  4047be:	bf1e      	ittt	ne
  4047c0:	2100      	movne	r1, #0
  4047c2:	2000      	movne	r0, #0
  4047c4:	bd30      	popne	{r4, r5, pc}
  4047c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4047ca:	d105      	bne.n	4047d8 <__adddf3+0x230>
  4047cc:	0040      	lsls	r0, r0, #1
  4047ce:	4149      	adcs	r1, r1
  4047d0:	bf28      	it	cs
  4047d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4047d6:	bd30      	pop	{r4, r5, pc}
  4047d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4047dc:	bf3c      	itt	cc
  4047de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4047e2:	bd30      	popcc	{r4, r5, pc}
  4047e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4047e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4047ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4047f0:	f04f 0000 	mov.w	r0, #0
  4047f4:	bd30      	pop	{r4, r5, pc}
  4047f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4047fa:	bf1a      	itte	ne
  4047fc:	4619      	movne	r1, r3
  4047fe:	4610      	movne	r0, r2
  404800:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  404804:	bf1c      	itt	ne
  404806:	460b      	movne	r3, r1
  404808:	4602      	movne	r2, r0
  40480a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40480e:	bf06      	itte	eq
  404810:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  404814:	ea91 0f03 	teqeq	r1, r3
  404818:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40481c:	bd30      	pop	{r4, r5, pc}
  40481e:	bf00      	nop

00404820 <__aeabi_ui2d>:
  404820:	f090 0f00 	teq	r0, #0
  404824:	bf04      	itt	eq
  404826:	2100      	moveq	r1, #0
  404828:	4770      	bxeq	lr
  40482a:	b530      	push	{r4, r5, lr}
  40482c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404830:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404834:	f04f 0500 	mov.w	r5, #0
  404838:	f04f 0100 	mov.w	r1, #0
  40483c:	e750      	b.n	4046e0 <__adddf3+0x138>
  40483e:	bf00      	nop

00404840 <__aeabi_i2d>:
  404840:	f090 0f00 	teq	r0, #0
  404844:	bf04      	itt	eq
  404846:	2100      	moveq	r1, #0
  404848:	4770      	bxeq	lr
  40484a:	b530      	push	{r4, r5, lr}
  40484c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404850:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404854:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  404858:	bf48      	it	mi
  40485a:	4240      	negmi	r0, r0
  40485c:	f04f 0100 	mov.w	r1, #0
  404860:	e73e      	b.n	4046e0 <__adddf3+0x138>
  404862:	bf00      	nop

00404864 <__aeabi_f2d>:
  404864:	0042      	lsls	r2, r0, #1
  404866:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40486a:	ea4f 0131 	mov.w	r1, r1, rrx
  40486e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  404872:	bf1f      	itttt	ne
  404874:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  404878:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40487c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  404880:	4770      	bxne	lr
  404882:	f092 0f00 	teq	r2, #0
  404886:	bf14      	ite	ne
  404888:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40488c:	4770      	bxeq	lr
  40488e:	b530      	push	{r4, r5, lr}
  404890:	f44f 7460 	mov.w	r4, #896	; 0x380
  404894:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404898:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40489c:	e720      	b.n	4046e0 <__adddf3+0x138>
  40489e:	bf00      	nop

004048a0 <__aeabi_ul2d>:
  4048a0:	ea50 0201 	orrs.w	r2, r0, r1
  4048a4:	bf08      	it	eq
  4048a6:	4770      	bxeq	lr
  4048a8:	b530      	push	{r4, r5, lr}
  4048aa:	f04f 0500 	mov.w	r5, #0
  4048ae:	e00a      	b.n	4048c6 <__aeabi_l2d+0x16>

004048b0 <__aeabi_l2d>:
  4048b0:	ea50 0201 	orrs.w	r2, r0, r1
  4048b4:	bf08      	it	eq
  4048b6:	4770      	bxeq	lr
  4048b8:	b530      	push	{r4, r5, lr}
  4048ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4048be:	d502      	bpl.n	4048c6 <__aeabi_l2d+0x16>
  4048c0:	4240      	negs	r0, r0
  4048c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4048c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4048ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4048ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4048d2:	f43f aedc 	beq.w	40468e <__adddf3+0xe6>
  4048d6:	f04f 0203 	mov.w	r2, #3
  4048da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4048de:	bf18      	it	ne
  4048e0:	3203      	addne	r2, #3
  4048e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4048e6:	bf18      	it	ne
  4048e8:	3203      	addne	r2, #3
  4048ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4048ee:	f1c2 0320 	rsb	r3, r2, #32
  4048f2:	fa00 fc03 	lsl.w	ip, r0, r3
  4048f6:	fa20 f002 	lsr.w	r0, r0, r2
  4048fa:	fa01 fe03 	lsl.w	lr, r1, r3
  4048fe:	ea40 000e 	orr.w	r0, r0, lr
  404902:	fa21 f102 	lsr.w	r1, r1, r2
  404906:	4414      	add	r4, r2
  404908:	e6c1      	b.n	40468e <__adddf3+0xe6>
  40490a:	bf00      	nop

0040490c <__aeabi_dmul>:
  40490c:	b570      	push	{r4, r5, r6, lr}
  40490e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40491a:	bf1d      	ittte	ne
  40491c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404920:	ea94 0f0c 	teqne	r4, ip
  404924:	ea95 0f0c 	teqne	r5, ip
  404928:	f000 f8de 	bleq	404ae8 <__aeabi_dmul+0x1dc>
  40492c:	442c      	add	r4, r5
  40492e:	ea81 0603 	eor.w	r6, r1, r3
  404932:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  404936:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40493a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40493e:	bf18      	it	ne
  404940:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  404944:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40494c:	d038      	beq.n	4049c0 <__aeabi_dmul+0xb4>
  40494e:	fba0 ce02 	umull	ip, lr, r0, r2
  404952:	f04f 0500 	mov.w	r5, #0
  404956:	fbe1 e502 	umlal	lr, r5, r1, r2
  40495a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40495e:	fbe0 e503 	umlal	lr, r5, r0, r3
  404962:	f04f 0600 	mov.w	r6, #0
  404966:	fbe1 5603 	umlal	r5, r6, r1, r3
  40496a:	f09c 0f00 	teq	ip, #0
  40496e:	bf18      	it	ne
  404970:	f04e 0e01 	orrne.w	lr, lr, #1
  404974:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  404978:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40497c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  404980:	d204      	bcs.n	40498c <__aeabi_dmul+0x80>
  404982:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  404986:	416d      	adcs	r5, r5
  404988:	eb46 0606 	adc.w	r6, r6, r6
  40498c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  404990:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  404994:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  404998:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40499c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4049a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4049a4:	bf88      	it	hi
  4049a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4049aa:	d81e      	bhi.n	4049ea <__aeabi_dmul+0xde>
  4049ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4049b0:	bf08      	it	eq
  4049b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4049b6:	f150 0000 	adcs.w	r0, r0, #0
  4049ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4049be:	bd70      	pop	{r4, r5, r6, pc}
  4049c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4049c4:	ea46 0101 	orr.w	r1, r6, r1
  4049c8:	ea40 0002 	orr.w	r0, r0, r2
  4049cc:	ea81 0103 	eor.w	r1, r1, r3
  4049d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4049d4:	bfc2      	ittt	gt
  4049d6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4049da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4049de:	bd70      	popgt	{r4, r5, r6, pc}
  4049e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4049e4:	f04f 0e00 	mov.w	lr, #0
  4049e8:	3c01      	subs	r4, #1
  4049ea:	f300 80ab 	bgt.w	404b44 <__aeabi_dmul+0x238>
  4049ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4049f2:	bfde      	ittt	le
  4049f4:	2000      	movle	r0, #0
  4049f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4049fa:	bd70      	pople	{r4, r5, r6, pc}
  4049fc:	f1c4 0400 	rsb	r4, r4, #0
  404a00:	3c20      	subs	r4, #32
  404a02:	da35      	bge.n	404a70 <__aeabi_dmul+0x164>
  404a04:	340c      	adds	r4, #12
  404a06:	dc1b      	bgt.n	404a40 <__aeabi_dmul+0x134>
  404a08:	f104 0414 	add.w	r4, r4, #20
  404a0c:	f1c4 0520 	rsb	r5, r4, #32
  404a10:	fa00 f305 	lsl.w	r3, r0, r5
  404a14:	fa20 f004 	lsr.w	r0, r0, r4
  404a18:	fa01 f205 	lsl.w	r2, r1, r5
  404a1c:	ea40 0002 	orr.w	r0, r0, r2
  404a20:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404a24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404a28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404a2c:	fa21 f604 	lsr.w	r6, r1, r4
  404a30:	eb42 0106 	adc.w	r1, r2, r6
  404a34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404a38:	bf08      	it	eq
  404a3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404a3e:	bd70      	pop	{r4, r5, r6, pc}
  404a40:	f1c4 040c 	rsb	r4, r4, #12
  404a44:	f1c4 0520 	rsb	r5, r4, #32
  404a48:	fa00 f304 	lsl.w	r3, r0, r4
  404a4c:	fa20 f005 	lsr.w	r0, r0, r5
  404a50:	fa01 f204 	lsl.w	r2, r1, r4
  404a54:	ea40 0002 	orr.w	r0, r0, r2
  404a58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404a5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404a60:	f141 0100 	adc.w	r1, r1, #0
  404a64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404a68:	bf08      	it	eq
  404a6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404a6e:	bd70      	pop	{r4, r5, r6, pc}
  404a70:	f1c4 0520 	rsb	r5, r4, #32
  404a74:	fa00 f205 	lsl.w	r2, r0, r5
  404a78:	ea4e 0e02 	orr.w	lr, lr, r2
  404a7c:	fa20 f304 	lsr.w	r3, r0, r4
  404a80:	fa01 f205 	lsl.w	r2, r1, r5
  404a84:	ea43 0302 	orr.w	r3, r3, r2
  404a88:	fa21 f004 	lsr.w	r0, r1, r4
  404a8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404a90:	fa21 f204 	lsr.w	r2, r1, r4
  404a94:	ea20 0002 	bic.w	r0, r0, r2
  404a98:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  404a9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404aa0:	bf08      	it	eq
  404aa2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404aa6:	bd70      	pop	{r4, r5, r6, pc}
  404aa8:	f094 0f00 	teq	r4, #0
  404aac:	d10f      	bne.n	404ace <__aeabi_dmul+0x1c2>
  404aae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  404ab2:	0040      	lsls	r0, r0, #1
  404ab4:	eb41 0101 	adc.w	r1, r1, r1
  404ab8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404abc:	bf08      	it	eq
  404abe:	3c01      	subeq	r4, #1
  404ac0:	d0f7      	beq.n	404ab2 <__aeabi_dmul+0x1a6>
  404ac2:	ea41 0106 	orr.w	r1, r1, r6
  404ac6:	f095 0f00 	teq	r5, #0
  404aca:	bf18      	it	ne
  404acc:	4770      	bxne	lr
  404ace:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  404ad2:	0052      	lsls	r2, r2, #1
  404ad4:	eb43 0303 	adc.w	r3, r3, r3
  404ad8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  404adc:	bf08      	it	eq
  404ade:	3d01      	subeq	r5, #1
  404ae0:	d0f7      	beq.n	404ad2 <__aeabi_dmul+0x1c6>
  404ae2:	ea43 0306 	orr.w	r3, r3, r6
  404ae6:	4770      	bx	lr
  404ae8:	ea94 0f0c 	teq	r4, ip
  404aec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404af0:	bf18      	it	ne
  404af2:	ea95 0f0c 	teqne	r5, ip
  404af6:	d00c      	beq.n	404b12 <__aeabi_dmul+0x206>
  404af8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404afc:	bf18      	it	ne
  404afe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404b02:	d1d1      	bne.n	404aa8 <__aeabi_dmul+0x19c>
  404b04:	ea81 0103 	eor.w	r1, r1, r3
  404b08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404b0c:	f04f 0000 	mov.w	r0, #0
  404b10:	bd70      	pop	{r4, r5, r6, pc}
  404b12:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404b16:	bf06      	itte	eq
  404b18:	4610      	moveq	r0, r2
  404b1a:	4619      	moveq	r1, r3
  404b1c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404b20:	d019      	beq.n	404b56 <__aeabi_dmul+0x24a>
  404b22:	ea94 0f0c 	teq	r4, ip
  404b26:	d102      	bne.n	404b2e <__aeabi_dmul+0x222>
  404b28:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404b2c:	d113      	bne.n	404b56 <__aeabi_dmul+0x24a>
  404b2e:	ea95 0f0c 	teq	r5, ip
  404b32:	d105      	bne.n	404b40 <__aeabi_dmul+0x234>
  404b34:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404b38:	bf1c      	itt	ne
  404b3a:	4610      	movne	r0, r2
  404b3c:	4619      	movne	r1, r3
  404b3e:	d10a      	bne.n	404b56 <__aeabi_dmul+0x24a>
  404b40:	ea81 0103 	eor.w	r1, r1, r3
  404b44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404b48:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404b4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404b50:	f04f 0000 	mov.w	r0, #0
  404b54:	bd70      	pop	{r4, r5, r6, pc}
  404b56:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404b5a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  404b5e:	bd70      	pop	{r4, r5, r6, pc}

00404b60 <__aeabi_ddiv>:
  404b60:	b570      	push	{r4, r5, r6, lr}
  404b62:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404b66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404b6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404b6e:	bf1d      	ittte	ne
  404b70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404b74:	ea94 0f0c 	teqne	r4, ip
  404b78:	ea95 0f0c 	teqne	r5, ip
  404b7c:	f000 f8a7 	bleq	404cce <__aeabi_ddiv+0x16e>
  404b80:	eba4 0405 	sub.w	r4, r4, r5
  404b84:	ea81 0e03 	eor.w	lr, r1, r3
  404b88:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404b8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404b90:	f000 8088 	beq.w	404ca4 <__aeabi_ddiv+0x144>
  404b94:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404b98:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  404b9c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  404ba0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  404ba4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  404ba8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  404bac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  404bb0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  404bb4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  404bb8:	429d      	cmp	r5, r3
  404bba:	bf08      	it	eq
  404bbc:	4296      	cmpeq	r6, r2
  404bbe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  404bc2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  404bc6:	d202      	bcs.n	404bce <__aeabi_ddiv+0x6e>
  404bc8:	085b      	lsrs	r3, r3, #1
  404bca:	ea4f 0232 	mov.w	r2, r2, rrx
  404bce:	1ab6      	subs	r6, r6, r2
  404bd0:	eb65 0503 	sbc.w	r5, r5, r3
  404bd4:	085b      	lsrs	r3, r3, #1
  404bd6:	ea4f 0232 	mov.w	r2, r2, rrx
  404bda:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  404bde:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404be2:	ebb6 0e02 	subs.w	lr, r6, r2
  404be6:	eb75 0e03 	sbcs.w	lr, r5, r3
  404bea:	bf22      	ittt	cs
  404bec:	1ab6      	subcs	r6, r6, r2
  404bee:	4675      	movcs	r5, lr
  404bf0:	ea40 000c 	orrcs.w	r0, r0, ip
  404bf4:	085b      	lsrs	r3, r3, #1
  404bf6:	ea4f 0232 	mov.w	r2, r2, rrx
  404bfa:	ebb6 0e02 	subs.w	lr, r6, r2
  404bfe:	eb75 0e03 	sbcs.w	lr, r5, r3
  404c02:	bf22      	ittt	cs
  404c04:	1ab6      	subcs	r6, r6, r2
  404c06:	4675      	movcs	r5, lr
  404c08:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404c0c:	085b      	lsrs	r3, r3, #1
  404c0e:	ea4f 0232 	mov.w	r2, r2, rrx
  404c12:	ebb6 0e02 	subs.w	lr, r6, r2
  404c16:	eb75 0e03 	sbcs.w	lr, r5, r3
  404c1a:	bf22      	ittt	cs
  404c1c:	1ab6      	subcs	r6, r6, r2
  404c1e:	4675      	movcs	r5, lr
  404c20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404c24:	085b      	lsrs	r3, r3, #1
  404c26:	ea4f 0232 	mov.w	r2, r2, rrx
  404c2a:	ebb6 0e02 	subs.w	lr, r6, r2
  404c2e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404c32:	bf22      	ittt	cs
  404c34:	1ab6      	subcs	r6, r6, r2
  404c36:	4675      	movcs	r5, lr
  404c38:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404c3c:	ea55 0e06 	orrs.w	lr, r5, r6
  404c40:	d018      	beq.n	404c74 <__aeabi_ddiv+0x114>
  404c42:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404c46:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  404c4a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  404c4e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404c52:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  404c56:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  404c5a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  404c5e:	d1c0      	bne.n	404be2 <__aeabi_ddiv+0x82>
  404c60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404c64:	d10b      	bne.n	404c7e <__aeabi_ddiv+0x11e>
  404c66:	ea41 0100 	orr.w	r1, r1, r0
  404c6a:	f04f 0000 	mov.w	r0, #0
  404c6e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  404c72:	e7b6      	b.n	404be2 <__aeabi_ddiv+0x82>
  404c74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404c78:	bf04      	itt	eq
  404c7a:	4301      	orreq	r1, r0
  404c7c:	2000      	moveq	r0, #0
  404c7e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404c82:	bf88      	it	hi
  404c84:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404c88:	f63f aeaf 	bhi.w	4049ea <__aeabi_dmul+0xde>
  404c8c:	ebb5 0c03 	subs.w	ip, r5, r3
  404c90:	bf04      	itt	eq
  404c92:	ebb6 0c02 	subseq.w	ip, r6, r2
  404c96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404c9a:	f150 0000 	adcs.w	r0, r0, #0
  404c9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404ca2:	bd70      	pop	{r4, r5, r6, pc}
  404ca4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  404ca8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  404cac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  404cb0:	bfc2      	ittt	gt
  404cb2:	ebd4 050c 	rsbsgt	r5, r4, ip
  404cb6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404cba:	bd70      	popgt	{r4, r5, r6, pc}
  404cbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404cc0:	f04f 0e00 	mov.w	lr, #0
  404cc4:	3c01      	subs	r4, #1
  404cc6:	e690      	b.n	4049ea <__aeabi_dmul+0xde>
  404cc8:	ea45 0e06 	orr.w	lr, r5, r6
  404ccc:	e68d      	b.n	4049ea <__aeabi_dmul+0xde>
  404cce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404cd2:	ea94 0f0c 	teq	r4, ip
  404cd6:	bf08      	it	eq
  404cd8:	ea95 0f0c 	teqeq	r5, ip
  404cdc:	f43f af3b 	beq.w	404b56 <__aeabi_dmul+0x24a>
  404ce0:	ea94 0f0c 	teq	r4, ip
  404ce4:	d10a      	bne.n	404cfc <__aeabi_ddiv+0x19c>
  404ce6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404cea:	f47f af34 	bne.w	404b56 <__aeabi_dmul+0x24a>
  404cee:	ea95 0f0c 	teq	r5, ip
  404cf2:	f47f af25 	bne.w	404b40 <__aeabi_dmul+0x234>
  404cf6:	4610      	mov	r0, r2
  404cf8:	4619      	mov	r1, r3
  404cfa:	e72c      	b.n	404b56 <__aeabi_dmul+0x24a>
  404cfc:	ea95 0f0c 	teq	r5, ip
  404d00:	d106      	bne.n	404d10 <__aeabi_ddiv+0x1b0>
  404d02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404d06:	f43f aefd 	beq.w	404b04 <__aeabi_dmul+0x1f8>
  404d0a:	4610      	mov	r0, r2
  404d0c:	4619      	mov	r1, r3
  404d0e:	e722      	b.n	404b56 <__aeabi_dmul+0x24a>
  404d10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404d14:	bf18      	it	ne
  404d16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404d1a:	f47f aec5 	bne.w	404aa8 <__aeabi_dmul+0x19c>
  404d1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  404d22:	f47f af0d 	bne.w	404b40 <__aeabi_dmul+0x234>
  404d26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  404d2a:	f47f aeeb 	bne.w	404b04 <__aeabi_dmul+0x1f8>
  404d2e:	e712      	b.n	404b56 <__aeabi_dmul+0x24a>

00404d30 <__gedf2>:
  404d30:	f04f 3cff 	mov.w	ip, #4294967295
  404d34:	e006      	b.n	404d44 <__cmpdf2+0x4>
  404d36:	bf00      	nop

00404d38 <__ledf2>:
  404d38:	f04f 0c01 	mov.w	ip, #1
  404d3c:	e002      	b.n	404d44 <__cmpdf2+0x4>
  404d3e:	bf00      	nop

00404d40 <__cmpdf2>:
  404d40:	f04f 0c01 	mov.w	ip, #1
  404d44:	f84d cd04 	str.w	ip, [sp, #-4]!
  404d48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404d4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404d50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404d54:	bf18      	it	ne
  404d56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  404d5a:	d01b      	beq.n	404d94 <__cmpdf2+0x54>
  404d5c:	b001      	add	sp, #4
  404d5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  404d62:	bf0c      	ite	eq
  404d64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  404d68:	ea91 0f03 	teqne	r1, r3
  404d6c:	bf02      	ittt	eq
  404d6e:	ea90 0f02 	teqeq	r0, r2
  404d72:	2000      	moveq	r0, #0
  404d74:	4770      	bxeq	lr
  404d76:	f110 0f00 	cmn.w	r0, #0
  404d7a:	ea91 0f03 	teq	r1, r3
  404d7e:	bf58      	it	pl
  404d80:	4299      	cmppl	r1, r3
  404d82:	bf08      	it	eq
  404d84:	4290      	cmpeq	r0, r2
  404d86:	bf2c      	ite	cs
  404d88:	17d8      	asrcs	r0, r3, #31
  404d8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  404d8e:	f040 0001 	orr.w	r0, r0, #1
  404d92:	4770      	bx	lr
  404d94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404d98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404d9c:	d102      	bne.n	404da4 <__cmpdf2+0x64>
  404d9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404da2:	d107      	bne.n	404db4 <__cmpdf2+0x74>
  404da4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404da8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404dac:	d1d6      	bne.n	404d5c <__cmpdf2+0x1c>
  404dae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404db2:	d0d3      	beq.n	404d5c <__cmpdf2+0x1c>
  404db4:	f85d 0b04 	ldr.w	r0, [sp], #4
  404db8:	4770      	bx	lr
  404dba:	bf00      	nop

00404dbc <__aeabi_cdrcmple>:
  404dbc:	4684      	mov	ip, r0
  404dbe:	4610      	mov	r0, r2
  404dc0:	4662      	mov	r2, ip
  404dc2:	468c      	mov	ip, r1
  404dc4:	4619      	mov	r1, r3
  404dc6:	4663      	mov	r3, ip
  404dc8:	e000      	b.n	404dcc <__aeabi_cdcmpeq>
  404dca:	bf00      	nop

00404dcc <__aeabi_cdcmpeq>:
  404dcc:	b501      	push	{r0, lr}
  404dce:	f7ff ffb7 	bl	404d40 <__cmpdf2>
  404dd2:	2800      	cmp	r0, #0
  404dd4:	bf48      	it	mi
  404dd6:	f110 0f00 	cmnmi.w	r0, #0
  404dda:	bd01      	pop	{r0, pc}

00404ddc <__aeabi_dcmpeq>:
  404ddc:	f84d ed08 	str.w	lr, [sp, #-8]!
  404de0:	f7ff fff4 	bl	404dcc <__aeabi_cdcmpeq>
  404de4:	bf0c      	ite	eq
  404de6:	2001      	moveq	r0, #1
  404de8:	2000      	movne	r0, #0
  404dea:	f85d fb08 	ldr.w	pc, [sp], #8
  404dee:	bf00      	nop

00404df0 <__aeabi_dcmplt>:
  404df0:	f84d ed08 	str.w	lr, [sp, #-8]!
  404df4:	f7ff ffea 	bl	404dcc <__aeabi_cdcmpeq>
  404df8:	bf34      	ite	cc
  404dfa:	2001      	movcc	r0, #1
  404dfc:	2000      	movcs	r0, #0
  404dfe:	f85d fb08 	ldr.w	pc, [sp], #8
  404e02:	bf00      	nop

00404e04 <__aeabi_dcmple>:
  404e04:	f84d ed08 	str.w	lr, [sp, #-8]!
  404e08:	f7ff ffe0 	bl	404dcc <__aeabi_cdcmpeq>
  404e0c:	bf94      	ite	ls
  404e0e:	2001      	movls	r0, #1
  404e10:	2000      	movhi	r0, #0
  404e12:	f85d fb08 	ldr.w	pc, [sp], #8
  404e16:	bf00      	nop

00404e18 <__aeabi_dcmpge>:
  404e18:	f84d ed08 	str.w	lr, [sp, #-8]!
  404e1c:	f7ff ffce 	bl	404dbc <__aeabi_cdrcmple>
  404e20:	bf94      	ite	ls
  404e22:	2001      	movls	r0, #1
  404e24:	2000      	movhi	r0, #0
  404e26:	f85d fb08 	ldr.w	pc, [sp], #8
  404e2a:	bf00      	nop

00404e2c <__aeabi_dcmpgt>:
  404e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
  404e30:	f7ff ffc4 	bl	404dbc <__aeabi_cdrcmple>
  404e34:	bf34      	ite	cc
  404e36:	2001      	movcc	r0, #1
  404e38:	2000      	movcs	r0, #0
  404e3a:	f85d fb08 	ldr.w	pc, [sp], #8
  404e3e:	bf00      	nop

00404e40 <__aeabi_dcmpun>:
  404e40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404e44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404e48:	d102      	bne.n	404e50 <__aeabi_dcmpun+0x10>
  404e4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404e4e:	d10a      	bne.n	404e66 <__aeabi_dcmpun+0x26>
  404e50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404e54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404e58:	d102      	bne.n	404e60 <__aeabi_dcmpun+0x20>
  404e5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404e5e:	d102      	bne.n	404e66 <__aeabi_dcmpun+0x26>
  404e60:	f04f 0000 	mov.w	r0, #0
  404e64:	4770      	bx	lr
  404e66:	f04f 0001 	mov.w	r0, #1
  404e6a:	4770      	bx	lr

00404e6c <__aeabi_d2iz>:
  404e6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404e70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  404e74:	d215      	bcs.n	404ea2 <__aeabi_d2iz+0x36>
  404e76:	d511      	bpl.n	404e9c <__aeabi_d2iz+0x30>
  404e78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  404e7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  404e80:	d912      	bls.n	404ea8 <__aeabi_d2iz+0x3c>
  404e82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  404e86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  404e8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  404e8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404e92:	fa23 f002 	lsr.w	r0, r3, r2
  404e96:	bf18      	it	ne
  404e98:	4240      	negne	r0, r0
  404e9a:	4770      	bx	lr
  404e9c:	f04f 0000 	mov.w	r0, #0
  404ea0:	4770      	bx	lr
  404ea2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  404ea6:	d105      	bne.n	404eb4 <__aeabi_d2iz+0x48>
  404ea8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  404eac:	bf08      	it	eq
  404eae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  404eb2:	4770      	bx	lr
  404eb4:	f04f 0000 	mov.w	r0, #0
  404eb8:	4770      	bx	lr
  404eba:	bf00      	nop

00404ebc <__aeabi_d2f>:
  404ebc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404ec0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  404ec4:	bf24      	itt	cs
  404ec6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  404eca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  404ece:	d90d      	bls.n	404eec <__aeabi_d2f+0x30>
  404ed0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404ed4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  404ed8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  404edc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  404ee0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  404ee4:	bf08      	it	eq
  404ee6:	f020 0001 	biceq.w	r0, r0, #1
  404eea:	4770      	bx	lr
  404eec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  404ef0:	d121      	bne.n	404f36 <__aeabi_d2f+0x7a>
  404ef2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  404ef6:	bfbc      	itt	lt
  404ef8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  404efc:	4770      	bxlt	lr
  404efe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404f02:	ea4f 5252 	mov.w	r2, r2, lsr #21
  404f06:	f1c2 0218 	rsb	r2, r2, #24
  404f0a:	f1c2 0c20 	rsb	ip, r2, #32
  404f0e:	fa10 f30c 	lsls.w	r3, r0, ip
  404f12:	fa20 f002 	lsr.w	r0, r0, r2
  404f16:	bf18      	it	ne
  404f18:	f040 0001 	orrne.w	r0, r0, #1
  404f1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  404f20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  404f24:	fa03 fc0c 	lsl.w	ip, r3, ip
  404f28:	ea40 000c 	orr.w	r0, r0, ip
  404f2c:	fa23 f302 	lsr.w	r3, r3, r2
  404f30:	ea4f 0343 	mov.w	r3, r3, lsl #1
  404f34:	e7cc      	b.n	404ed0 <__aeabi_d2f+0x14>
  404f36:	ea7f 5362 	mvns.w	r3, r2, asr #21
  404f3a:	d107      	bne.n	404f4c <__aeabi_d2f+0x90>
  404f3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  404f40:	bf1e      	ittt	ne
  404f42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  404f46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  404f4a:	4770      	bxne	lr
  404f4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  404f50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  404f54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404f58:	4770      	bx	lr
  404f5a:	bf00      	nop

00404f5c <__errno>:
  404f5c:	4b01      	ldr	r3, [pc, #4]	; (404f64 <__errno+0x8>)
  404f5e:	6818      	ldr	r0, [r3, #0]
  404f60:	4770      	bx	lr
  404f62:	bf00      	nop
  404f64:	2040004c 	.word	0x2040004c

00404f68 <__libc_init_array>:
  404f68:	b570      	push	{r4, r5, r6, lr}
  404f6a:	4e0d      	ldr	r6, [pc, #52]	; (404fa0 <__libc_init_array+0x38>)
  404f6c:	4c0d      	ldr	r4, [pc, #52]	; (404fa4 <__libc_init_array+0x3c>)
  404f6e:	1ba4      	subs	r4, r4, r6
  404f70:	10a4      	asrs	r4, r4, #2
  404f72:	2500      	movs	r5, #0
  404f74:	42a5      	cmp	r5, r4
  404f76:	d109      	bne.n	404f8c <__libc_init_array+0x24>
  404f78:	4e0b      	ldr	r6, [pc, #44]	; (404fa8 <__libc_init_array+0x40>)
  404f7a:	4c0c      	ldr	r4, [pc, #48]	; (404fac <__libc_init_array+0x44>)
  404f7c:	f003 f90c 	bl	408198 <_init>
  404f80:	1ba4      	subs	r4, r4, r6
  404f82:	10a4      	asrs	r4, r4, #2
  404f84:	2500      	movs	r5, #0
  404f86:	42a5      	cmp	r5, r4
  404f88:	d105      	bne.n	404f96 <__libc_init_array+0x2e>
  404f8a:	bd70      	pop	{r4, r5, r6, pc}
  404f8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  404f90:	4798      	blx	r3
  404f92:	3501      	adds	r5, #1
  404f94:	e7ee      	b.n	404f74 <__libc_init_array+0xc>
  404f96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  404f9a:	4798      	blx	r3
  404f9c:	3501      	adds	r5, #1
  404f9e:	e7f2      	b.n	404f86 <__libc_init_array+0x1e>
  404fa0:	004081a4 	.word	0x004081a4
  404fa4:	004081a4 	.word	0x004081a4
  404fa8:	004081a4 	.word	0x004081a4
  404fac:	004081a8 	.word	0x004081a8

00404fb0 <memcpy>:
  404fb0:	b510      	push	{r4, lr}
  404fb2:	1e43      	subs	r3, r0, #1
  404fb4:	440a      	add	r2, r1
  404fb6:	4291      	cmp	r1, r2
  404fb8:	d100      	bne.n	404fbc <memcpy+0xc>
  404fba:	bd10      	pop	{r4, pc}
  404fbc:	f811 4b01 	ldrb.w	r4, [r1], #1
  404fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
  404fc4:	e7f7      	b.n	404fb6 <memcpy+0x6>

00404fc6 <memset>:
  404fc6:	4402      	add	r2, r0
  404fc8:	4603      	mov	r3, r0
  404fca:	4293      	cmp	r3, r2
  404fcc:	d100      	bne.n	404fd0 <memset+0xa>
  404fce:	4770      	bx	lr
  404fd0:	f803 1b01 	strb.w	r1, [r3], #1
  404fd4:	e7f9      	b.n	404fca <memset+0x4>

00404fd6 <__cvt>:
  404fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404fda:	b088      	sub	sp, #32
  404fdc:	2b00      	cmp	r3, #0
  404fde:	9f14      	ldr	r7, [sp, #80]	; 0x50
  404fe0:	9912      	ldr	r1, [sp, #72]	; 0x48
  404fe2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  404fe4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  404fe8:	461e      	mov	r6, r3
  404fea:	f027 0720 	bic.w	r7, r7, #32
  404fee:	bfbb      	ittet	lt
  404ff0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  404ff4:	461e      	movlt	r6, r3
  404ff6:	2300      	movge	r3, #0
  404ff8:	232d      	movlt	r3, #45	; 0x2d
  404ffa:	2f46      	cmp	r7, #70	; 0x46
  404ffc:	4614      	mov	r4, r2
  404ffe:	700b      	strb	r3, [r1, #0]
  405000:	d004      	beq.n	40500c <__cvt+0x36>
  405002:	2f45      	cmp	r7, #69	; 0x45
  405004:	d100      	bne.n	405008 <__cvt+0x32>
  405006:	3501      	adds	r5, #1
  405008:	2302      	movs	r3, #2
  40500a:	e000      	b.n	40500e <__cvt+0x38>
  40500c:	2303      	movs	r3, #3
  40500e:	aa07      	add	r2, sp, #28
  405010:	9204      	str	r2, [sp, #16]
  405012:	aa06      	add	r2, sp, #24
  405014:	9203      	str	r2, [sp, #12]
  405016:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  40501a:	4622      	mov	r2, r4
  40501c:	4633      	mov	r3, r6
  40501e:	f000 fd9b 	bl	405b58 <_dtoa_r>
  405022:	2f47      	cmp	r7, #71	; 0x47
  405024:	4680      	mov	r8, r0
  405026:	d102      	bne.n	40502e <__cvt+0x58>
  405028:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40502a:	07db      	lsls	r3, r3, #31
  40502c:	d526      	bpl.n	40507c <__cvt+0xa6>
  40502e:	2f46      	cmp	r7, #70	; 0x46
  405030:	eb08 0905 	add.w	r9, r8, r5
  405034:	d111      	bne.n	40505a <__cvt+0x84>
  405036:	f898 3000 	ldrb.w	r3, [r8]
  40503a:	2b30      	cmp	r3, #48	; 0x30
  40503c:	d10a      	bne.n	405054 <__cvt+0x7e>
  40503e:	2200      	movs	r2, #0
  405040:	2300      	movs	r3, #0
  405042:	4620      	mov	r0, r4
  405044:	4631      	mov	r1, r6
  405046:	f7ff fec9 	bl	404ddc <__aeabi_dcmpeq>
  40504a:	b918      	cbnz	r0, 405054 <__cvt+0x7e>
  40504c:	f1c5 0501 	rsb	r5, r5, #1
  405050:	f8ca 5000 	str.w	r5, [sl]
  405054:	f8da 3000 	ldr.w	r3, [sl]
  405058:	4499      	add	r9, r3
  40505a:	2200      	movs	r2, #0
  40505c:	2300      	movs	r3, #0
  40505e:	4620      	mov	r0, r4
  405060:	4631      	mov	r1, r6
  405062:	f7ff febb 	bl	404ddc <__aeabi_dcmpeq>
  405066:	b938      	cbnz	r0, 405078 <__cvt+0xa2>
  405068:	2230      	movs	r2, #48	; 0x30
  40506a:	9b07      	ldr	r3, [sp, #28]
  40506c:	4599      	cmp	r9, r3
  40506e:	d905      	bls.n	40507c <__cvt+0xa6>
  405070:	1c59      	adds	r1, r3, #1
  405072:	9107      	str	r1, [sp, #28]
  405074:	701a      	strb	r2, [r3, #0]
  405076:	e7f8      	b.n	40506a <__cvt+0x94>
  405078:	f8cd 901c 	str.w	r9, [sp, #28]
  40507c:	9b07      	ldr	r3, [sp, #28]
  40507e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405080:	eba3 0308 	sub.w	r3, r3, r8
  405084:	4640      	mov	r0, r8
  405086:	6013      	str	r3, [r2, #0]
  405088:	b008      	add	sp, #32
  40508a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040508e <__exponent>:
  40508e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  405090:	4603      	mov	r3, r0
  405092:	2900      	cmp	r1, #0
  405094:	bfb8      	it	lt
  405096:	4249      	neglt	r1, r1
  405098:	f803 2b02 	strb.w	r2, [r3], #2
  40509c:	bfb4      	ite	lt
  40509e:	222d      	movlt	r2, #45	; 0x2d
  4050a0:	222b      	movge	r2, #43	; 0x2b
  4050a2:	2909      	cmp	r1, #9
  4050a4:	7042      	strb	r2, [r0, #1]
  4050a6:	dd20      	ble.n	4050ea <__exponent+0x5c>
  4050a8:	f10d 0207 	add.w	r2, sp, #7
  4050ac:	4617      	mov	r7, r2
  4050ae:	260a      	movs	r6, #10
  4050b0:	fb91 f5f6 	sdiv	r5, r1, r6
  4050b4:	fb06 1115 	mls	r1, r6, r5, r1
  4050b8:	3130      	adds	r1, #48	; 0x30
  4050ba:	2d09      	cmp	r5, #9
  4050bc:	f802 1c01 	strb.w	r1, [r2, #-1]
  4050c0:	f102 34ff 	add.w	r4, r2, #4294967295
  4050c4:	4629      	mov	r1, r5
  4050c6:	dc09      	bgt.n	4050dc <__exponent+0x4e>
  4050c8:	3130      	adds	r1, #48	; 0x30
  4050ca:	3a02      	subs	r2, #2
  4050cc:	f804 1c01 	strb.w	r1, [r4, #-1]
  4050d0:	42ba      	cmp	r2, r7
  4050d2:	461c      	mov	r4, r3
  4050d4:	d304      	bcc.n	4050e0 <__exponent+0x52>
  4050d6:	1a20      	subs	r0, r4, r0
  4050d8:	b003      	add	sp, #12
  4050da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4050dc:	4622      	mov	r2, r4
  4050de:	e7e7      	b.n	4050b0 <__exponent+0x22>
  4050e0:	f812 1b01 	ldrb.w	r1, [r2], #1
  4050e4:	f803 1b01 	strb.w	r1, [r3], #1
  4050e8:	e7f2      	b.n	4050d0 <__exponent+0x42>
  4050ea:	2230      	movs	r2, #48	; 0x30
  4050ec:	461c      	mov	r4, r3
  4050ee:	4411      	add	r1, r2
  4050f0:	f804 2b02 	strb.w	r2, [r4], #2
  4050f4:	7059      	strb	r1, [r3, #1]
  4050f6:	e7ee      	b.n	4050d6 <__exponent+0x48>

004050f8 <_printf_float>:
  4050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050fc:	b091      	sub	sp, #68	; 0x44
  4050fe:	460c      	mov	r4, r1
  405100:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  405102:	4693      	mov	fp, r2
  405104:	461e      	mov	r6, r3
  405106:	4605      	mov	r5, r0
  405108:	f001 fc74 	bl	4069f4 <_localeconv_r>
  40510c:	6803      	ldr	r3, [r0, #0]
  40510e:	9309      	str	r3, [sp, #36]	; 0x24
  405110:	4618      	mov	r0, r3
  405112:	f000 fc8d 	bl	405a30 <strlen>
  405116:	2300      	movs	r3, #0
  405118:	930e      	str	r3, [sp, #56]	; 0x38
  40511a:	683b      	ldr	r3, [r7, #0]
  40511c:	900a      	str	r0, [sp, #40]	; 0x28
  40511e:	3307      	adds	r3, #7
  405120:	f023 0307 	bic.w	r3, r3, #7
  405124:	f103 0208 	add.w	r2, r3, #8
  405128:	f894 8018 	ldrb.w	r8, [r4, #24]
  40512c:	f8d4 a000 	ldr.w	sl, [r4]
  405130:	603a      	str	r2, [r7, #0]
  405132:	e9d3 2300 	ldrd	r2, r3, [r3]
  405136:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  40513a:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  40513e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  405140:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  405144:	930b      	str	r3, [sp, #44]	; 0x2c
  405146:	f04f 32ff 	mov.w	r2, #4294967295
  40514a:	4ba6      	ldr	r3, [pc, #664]	; (4053e4 <_printf_float+0x2ec>)
  40514c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40514e:	4638      	mov	r0, r7
  405150:	f7ff fe76 	bl	404e40 <__aeabi_dcmpun>
  405154:	2800      	cmp	r0, #0
  405156:	f040 81f7 	bne.w	405548 <_printf_float+0x450>
  40515a:	f04f 32ff 	mov.w	r2, #4294967295
  40515e:	4ba1      	ldr	r3, [pc, #644]	; (4053e4 <_printf_float+0x2ec>)
  405160:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405162:	4638      	mov	r0, r7
  405164:	f7ff fe4e 	bl	404e04 <__aeabi_dcmple>
  405168:	2800      	cmp	r0, #0
  40516a:	f040 81ed 	bne.w	405548 <_printf_float+0x450>
  40516e:	2200      	movs	r2, #0
  405170:	2300      	movs	r3, #0
  405172:	4638      	mov	r0, r7
  405174:	4649      	mov	r1, r9
  405176:	f7ff fe3b 	bl	404df0 <__aeabi_dcmplt>
  40517a:	b110      	cbz	r0, 405182 <_printf_float+0x8a>
  40517c:	232d      	movs	r3, #45	; 0x2d
  40517e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  405182:	4b99      	ldr	r3, [pc, #612]	; (4053e8 <_printf_float+0x2f0>)
  405184:	4f99      	ldr	r7, [pc, #612]	; (4053ec <_printf_float+0x2f4>)
  405186:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40518a:	bf98      	it	ls
  40518c:	461f      	movls	r7, r3
  40518e:	2303      	movs	r3, #3
  405190:	6123      	str	r3, [r4, #16]
  405192:	f02a 0304 	bic.w	r3, sl, #4
  405196:	6023      	str	r3, [r4, #0]
  405198:	f04f 0900 	mov.w	r9, #0
  40519c:	9600      	str	r6, [sp, #0]
  40519e:	465b      	mov	r3, fp
  4051a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4051a2:	4621      	mov	r1, r4
  4051a4:	4628      	mov	r0, r5
  4051a6:	f000 f9df 	bl	405568 <_printf_common>
  4051aa:	3001      	adds	r0, #1
  4051ac:	f040 809a 	bne.w	4052e4 <_printf_float+0x1ec>
  4051b0:	f04f 30ff 	mov.w	r0, #4294967295
  4051b4:	b011      	add	sp, #68	; 0x44
  4051b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051ba:	6862      	ldr	r2, [r4, #4]
  4051bc:	1c53      	adds	r3, r2, #1
  4051be:	a80e      	add	r0, sp, #56	; 0x38
  4051c0:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  4051c4:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  4051c8:	d141      	bne.n	40524e <_printf_float+0x156>
  4051ca:	2206      	movs	r2, #6
  4051cc:	6062      	str	r2, [r4, #4]
  4051ce:	6023      	str	r3, [r4, #0]
  4051d0:	2100      	movs	r1, #0
  4051d2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  4051d6:	9301      	str	r3, [sp, #4]
  4051d8:	6863      	ldr	r3, [r4, #4]
  4051da:	9005      	str	r0, [sp, #20]
  4051dc:	9202      	str	r2, [sp, #8]
  4051de:	9300      	str	r3, [sp, #0]
  4051e0:	463a      	mov	r2, r7
  4051e2:	464b      	mov	r3, r9
  4051e4:	9106      	str	r1, [sp, #24]
  4051e6:	f8cd 8010 	str.w	r8, [sp, #16]
  4051ea:	f8cd e00c 	str.w	lr, [sp, #12]
  4051ee:	4628      	mov	r0, r5
  4051f0:	f7ff fef1 	bl	404fd6 <__cvt>
  4051f4:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  4051f8:	2b47      	cmp	r3, #71	; 0x47
  4051fa:	4607      	mov	r7, r0
  4051fc:	d109      	bne.n	405212 <_printf_float+0x11a>
  4051fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405200:	1cd8      	adds	r0, r3, #3
  405202:	db02      	blt.n	40520a <_printf_float+0x112>
  405204:	6862      	ldr	r2, [r4, #4]
  405206:	4293      	cmp	r3, r2
  405208:	dd59      	ble.n	4052be <_printf_float+0x1c6>
  40520a:	f1a8 0802 	sub.w	r8, r8, #2
  40520e:	fa5f f888 	uxtb.w	r8, r8
  405212:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  405216:	990d      	ldr	r1, [sp, #52]	; 0x34
  405218:	d836      	bhi.n	405288 <_printf_float+0x190>
  40521a:	3901      	subs	r1, #1
  40521c:	4642      	mov	r2, r8
  40521e:	f104 0050 	add.w	r0, r4, #80	; 0x50
  405222:	910d      	str	r1, [sp, #52]	; 0x34
  405224:	f7ff ff33 	bl	40508e <__exponent>
  405228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40522a:	1883      	adds	r3, r0, r2
  40522c:	2a01      	cmp	r2, #1
  40522e:	4681      	mov	r9, r0
  405230:	6123      	str	r3, [r4, #16]
  405232:	dc02      	bgt.n	40523a <_printf_float+0x142>
  405234:	6822      	ldr	r2, [r4, #0]
  405236:	07d1      	lsls	r1, r2, #31
  405238:	d501      	bpl.n	40523e <_printf_float+0x146>
  40523a:	3301      	adds	r3, #1
  40523c:	6123      	str	r3, [r4, #16]
  40523e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  405242:	2b00      	cmp	r3, #0
  405244:	d0aa      	beq.n	40519c <_printf_float+0xa4>
  405246:	232d      	movs	r3, #45	; 0x2d
  405248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40524c:	e7a6      	b.n	40519c <_printf_float+0xa4>
  40524e:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  405252:	d002      	beq.n	40525a <_printf_float+0x162>
  405254:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  405258:	d1b9      	bne.n	4051ce <_printf_float+0xd6>
  40525a:	b19a      	cbz	r2, 405284 <_printf_float+0x18c>
  40525c:	2100      	movs	r1, #0
  40525e:	9106      	str	r1, [sp, #24]
  405260:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  405264:	e88d 000c 	stmia.w	sp, {r2, r3}
  405268:	6023      	str	r3, [r4, #0]
  40526a:	9005      	str	r0, [sp, #20]
  40526c:	463a      	mov	r2, r7
  40526e:	f8cd 8010 	str.w	r8, [sp, #16]
  405272:	f8cd e00c 	str.w	lr, [sp, #12]
  405276:	9102      	str	r1, [sp, #8]
  405278:	464b      	mov	r3, r9
  40527a:	4628      	mov	r0, r5
  40527c:	f7ff feab 	bl	404fd6 <__cvt>
  405280:	4607      	mov	r7, r0
  405282:	e7bc      	b.n	4051fe <_printf_float+0x106>
  405284:	2201      	movs	r2, #1
  405286:	e7a1      	b.n	4051cc <_printf_float+0xd4>
  405288:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40528c:	d119      	bne.n	4052c2 <_printf_float+0x1ca>
  40528e:	2900      	cmp	r1, #0
  405290:	6863      	ldr	r3, [r4, #4]
  405292:	dd0c      	ble.n	4052ae <_printf_float+0x1b6>
  405294:	6121      	str	r1, [r4, #16]
  405296:	b913      	cbnz	r3, 40529e <_printf_float+0x1a6>
  405298:	6822      	ldr	r2, [r4, #0]
  40529a:	07d2      	lsls	r2, r2, #31
  40529c:	d502      	bpl.n	4052a4 <_printf_float+0x1ac>
  40529e:	3301      	adds	r3, #1
  4052a0:	440b      	add	r3, r1
  4052a2:	6123      	str	r3, [r4, #16]
  4052a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4052a6:	65a3      	str	r3, [r4, #88]	; 0x58
  4052a8:	f04f 0900 	mov.w	r9, #0
  4052ac:	e7c7      	b.n	40523e <_printf_float+0x146>
  4052ae:	b913      	cbnz	r3, 4052b6 <_printf_float+0x1be>
  4052b0:	6822      	ldr	r2, [r4, #0]
  4052b2:	07d0      	lsls	r0, r2, #31
  4052b4:	d501      	bpl.n	4052ba <_printf_float+0x1c2>
  4052b6:	3302      	adds	r3, #2
  4052b8:	e7f3      	b.n	4052a2 <_printf_float+0x1aa>
  4052ba:	2301      	movs	r3, #1
  4052bc:	e7f1      	b.n	4052a2 <_printf_float+0x1aa>
  4052be:	f04f 0867 	mov.w	r8, #103	; 0x67
  4052c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4052c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4052c6:	4293      	cmp	r3, r2
  4052c8:	db05      	blt.n	4052d6 <_printf_float+0x1de>
  4052ca:	6822      	ldr	r2, [r4, #0]
  4052cc:	6123      	str	r3, [r4, #16]
  4052ce:	07d1      	lsls	r1, r2, #31
  4052d0:	d5e8      	bpl.n	4052a4 <_printf_float+0x1ac>
  4052d2:	3301      	adds	r3, #1
  4052d4:	e7e5      	b.n	4052a2 <_printf_float+0x1aa>
  4052d6:	2b00      	cmp	r3, #0
  4052d8:	bfd4      	ite	le
  4052da:	f1c3 0302 	rsble	r3, r3, #2
  4052de:	2301      	movgt	r3, #1
  4052e0:	4413      	add	r3, r2
  4052e2:	e7de      	b.n	4052a2 <_printf_float+0x1aa>
  4052e4:	6823      	ldr	r3, [r4, #0]
  4052e6:	055a      	lsls	r2, r3, #21
  4052e8:	d407      	bmi.n	4052fa <_printf_float+0x202>
  4052ea:	6923      	ldr	r3, [r4, #16]
  4052ec:	463a      	mov	r2, r7
  4052ee:	4659      	mov	r1, fp
  4052f0:	4628      	mov	r0, r5
  4052f2:	47b0      	blx	r6
  4052f4:	3001      	adds	r0, #1
  4052f6:	d12a      	bne.n	40534e <_printf_float+0x256>
  4052f8:	e75a      	b.n	4051b0 <_printf_float+0xb8>
  4052fa:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4052fe:	f240 80dc 	bls.w	4054ba <_printf_float+0x3c2>
  405302:	2200      	movs	r2, #0
  405304:	2300      	movs	r3, #0
  405306:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40530a:	f7ff fd67 	bl	404ddc <__aeabi_dcmpeq>
  40530e:	2800      	cmp	r0, #0
  405310:	d039      	beq.n	405386 <_printf_float+0x28e>
  405312:	2301      	movs	r3, #1
  405314:	4a36      	ldr	r2, [pc, #216]	; (4053f0 <_printf_float+0x2f8>)
  405316:	4659      	mov	r1, fp
  405318:	4628      	mov	r0, r5
  40531a:	47b0      	blx	r6
  40531c:	3001      	adds	r0, #1
  40531e:	f43f af47 	beq.w	4051b0 <_printf_float+0xb8>
  405322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405324:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405326:	429a      	cmp	r2, r3
  405328:	db02      	blt.n	405330 <_printf_float+0x238>
  40532a:	6823      	ldr	r3, [r4, #0]
  40532c:	07d8      	lsls	r0, r3, #31
  40532e:	d50e      	bpl.n	40534e <_printf_float+0x256>
  405330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405332:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405334:	4659      	mov	r1, fp
  405336:	4628      	mov	r0, r5
  405338:	47b0      	blx	r6
  40533a:	3001      	adds	r0, #1
  40533c:	f43f af38 	beq.w	4051b0 <_printf_float+0xb8>
  405340:	2700      	movs	r7, #0
  405342:	f104 081a 	add.w	r8, r4, #26
  405346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405348:	3b01      	subs	r3, #1
  40534a:	429f      	cmp	r7, r3
  40534c:	db11      	blt.n	405372 <_printf_float+0x27a>
  40534e:	6823      	ldr	r3, [r4, #0]
  405350:	079f      	lsls	r7, r3, #30
  405352:	d508      	bpl.n	405366 <_printf_float+0x26e>
  405354:	2700      	movs	r7, #0
  405356:	f104 0819 	add.w	r8, r4, #25
  40535a:	68e3      	ldr	r3, [r4, #12]
  40535c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40535e:	1a9b      	subs	r3, r3, r2
  405360:	429f      	cmp	r7, r3
  405362:	f2c0 80e7 	blt.w	405534 <_printf_float+0x43c>
  405366:	68e0      	ldr	r0, [r4, #12]
  405368:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40536a:	4298      	cmp	r0, r3
  40536c:	bfb8      	it	lt
  40536e:	4618      	movlt	r0, r3
  405370:	e720      	b.n	4051b4 <_printf_float+0xbc>
  405372:	2301      	movs	r3, #1
  405374:	4642      	mov	r2, r8
  405376:	4659      	mov	r1, fp
  405378:	4628      	mov	r0, r5
  40537a:	47b0      	blx	r6
  40537c:	3001      	adds	r0, #1
  40537e:	f43f af17 	beq.w	4051b0 <_printf_float+0xb8>
  405382:	3701      	adds	r7, #1
  405384:	e7df      	b.n	405346 <_printf_float+0x24e>
  405386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405388:	2b00      	cmp	r3, #0
  40538a:	dc33      	bgt.n	4053f4 <_printf_float+0x2fc>
  40538c:	2301      	movs	r3, #1
  40538e:	4a18      	ldr	r2, [pc, #96]	; (4053f0 <_printf_float+0x2f8>)
  405390:	4659      	mov	r1, fp
  405392:	4628      	mov	r0, r5
  405394:	47b0      	blx	r6
  405396:	3001      	adds	r0, #1
  405398:	f43f af0a 	beq.w	4051b0 <_printf_float+0xb8>
  40539c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40539e:	b923      	cbnz	r3, 4053aa <_printf_float+0x2b2>
  4053a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4053a2:	b913      	cbnz	r3, 4053aa <_printf_float+0x2b2>
  4053a4:	6823      	ldr	r3, [r4, #0]
  4053a6:	07d9      	lsls	r1, r3, #31
  4053a8:	d5d1      	bpl.n	40534e <_printf_float+0x256>
  4053aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4053ae:	4659      	mov	r1, fp
  4053b0:	4628      	mov	r0, r5
  4053b2:	47b0      	blx	r6
  4053b4:	3001      	adds	r0, #1
  4053b6:	f43f aefb 	beq.w	4051b0 <_printf_float+0xb8>
  4053ba:	f04f 0800 	mov.w	r8, #0
  4053be:	f104 091a 	add.w	r9, r4, #26
  4053c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4053c4:	425b      	negs	r3, r3
  4053c6:	4598      	cmp	r8, r3
  4053c8:	db01      	blt.n	4053ce <_printf_float+0x2d6>
  4053ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4053cc:	e78e      	b.n	4052ec <_printf_float+0x1f4>
  4053ce:	2301      	movs	r3, #1
  4053d0:	464a      	mov	r2, r9
  4053d2:	4659      	mov	r1, fp
  4053d4:	4628      	mov	r0, r5
  4053d6:	47b0      	blx	r6
  4053d8:	3001      	adds	r0, #1
  4053da:	f43f aee9 	beq.w	4051b0 <_printf_float+0xb8>
  4053de:	f108 0801 	add.w	r8, r8, #1
  4053e2:	e7ee      	b.n	4053c2 <_printf_float+0x2ca>
  4053e4:	7fefffff 	.word	0x7fefffff
  4053e8:	00407edc 	.word	0x00407edc
  4053ec:	00407ee0 	.word	0x00407ee0
  4053f0:	00407eec 	.word	0x00407eec
  4053f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4053f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4053f8:	429a      	cmp	r2, r3
  4053fa:	bfa8      	it	ge
  4053fc:	461a      	movge	r2, r3
  4053fe:	2a00      	cmp	r2, #0
  405400:	4690      	mov	r8, r2
  405402:	dc36      	bgt.n	405472 <_printf_float+0x37a>
  405404:	f104 031a 	add.w	r3, r4, #26
  405408:	f04f 0a00 	mov.w	sl, #0
  40540c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  405410:	930b      	str	r3, [sp, #44]	; 0x2c
  405412:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  405416:	eba9 0308 	sub.w	r3, r9, r8
  40541a:	459a      	cmp	sl, r3
  40541c:	db31      	blt.n	405482 <_printf_float+0x38a>
  40541e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405420:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405422:	429a      	cmp	r2, r3
  405424:	db38      	blt.n	405498 <_printf_float+0x3a0>
  405426:	6823      	ldr	r3, [r4, #0]
  405428:	07da      	lsls	r2, r3, #31
  40542a:	d435      	bmi.n	405498 <_printf_float+0x3a0>
  40542c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40542e:	990d      	ldr	r1, [sp, #52]	; 0x34
  405430:	eba3 0209 	sub.w	r2, r3, r9
  405434:	eba3 0801 	sub.w	r8, r3, r1
  405438:	4590      	cmp	r8, r2
  40543a:	bfa8      	it	ge
  40543c:	4690      	movge	r8, r2
  40543e:	f1b8 0f00 	cmp.w	r8, #0
  405442:	dc31      	bgt.n	4054a8 <_printf_float+0x3b0>
  405444:	2700      	movs	r7, #0
  405446:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  40544a:	f104 091a 	add.w	r9, r4, #26
  40544e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405452:	1a9b      	subs	r3, r3, r2
  405454:	eba3 0308 	sub.w	r3, r3, r8
  405458:	429f      	cmp	r7, r3
  40545a:	f6bf af78 	bge.w	40534e <_printf_float+0x256>
  40545e:	2301      	movs	r3, #1
  405460:	464a      	mov	r2, r9
  405462:	4659      	mov	r1, fp
  405464:	4628      	mov	r0, r5
  405466:	47b0      	blx	r6
  405468:	3001      	adds	r0, #1
  40546a:	f43f aea1 	beq.w	4051b0 <_printf_float+0xb8>
  40546e:	3701      	adds	r7, #1
  405470:	e7ed      	b.n	40544e <_printf_float+0x356>
  405472:	4613      	mov	r3, r2
  405474:	4659      	mov	r1, fp
  405476:	463a      	mov	r2, r7
  405478:	4628      	mov	r0, r5
  40547a:	47b0      	blx	r6
  40547c:	3001      	adds	r0, #1
  40547e:	d1c1      	bne.n	405404 <_printf_float+0x30c>
  405480:	e696      	b.n	4051b0 <_printf_float+0xb8>
  405482:	2301      	movs	r3, #1
  405484:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405486:	4659      	mov	r1, fp
  405488:	4628      	mov	r0, r5
  40548a:	47b0      	blx	r6
  40548c:	3001      	adds	r0, #1
  40548e:	f43f ae8f 	beq.w	4051b0 <_printf_float+0xb8>
  405492:	f10a 0a01 	add.w	sl, sl, #1
  405496:	e7bc      	b.n	405412 <_printf_float+0x31a>
  405498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40549a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40549c:	4659      	mov	r1, fp
  40549e:	4628      	mov	r0, r5
  4054a0:	47b0      	blx	r6
  4054a2:	3001      	adds	r0, #1
  4054a4:	d1c2      	bne.n	40542c <_printf_float+0x334>
  4054a6:	e683      	b.n	4051b0 <_printf_float+0xb8>
  4054a8:	4643      	mov	r3, r8
  4054aa:	eb07 0209 	add.w	r2, r7, r9
  4054ae:	4659      	mov	r1, fp
  4054b0:	4628      	mov	r0, r5
  4054b2:	47b0      	blx	r6
  4054b4:	3001      	adds	r0, #1
  4054b6:	d1c5      	bne.n	405444 <_printf_float+0x34c>
  4054b8:	e67a      	b.n	4051b0 <_printf_float+0xb8>
  4054ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4054bc:	2a01      	cmp	r2, #1
  4054be:	dc01      	bgt.n	4054c4 <_printf_float+0x3cc>
  4054c0:	07db      	lsls	r3, r3, #31
  4054c2:	d534      	bpl.n	40552e <_printf_float+0x436>
  4054c4:	2301      	movs	r3, #1
  4054c6:	463a      	mov	r2, r7
  4054c8:	4659      	mov	r1, fp
  4054ca:	4628      	mov	r0, r5
  4054cc:	47b0      	blx	r6
  4054ce:	3001      	adds	r0, #1
  4054d0:	f43f ae6e 	beq.w	4051b0 <_printf_float+0xb8>
  4054d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4054d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4054d8:	4659      	mov	r1, fp
  4054da:	4628      	mov	r0, r5
  4054dc:	47b0      	blx	r6
  4054de:	3001      	adds	r0, #1
  4054e0:	f43f ae66 	beq.w	4051b0 <_printf_float+0xb8>
  4054e4:	2200      	movs	r2, #0
  4054e6:	2300      	movs	r3, #0
  4054e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4054ec:	f7ff fc76 	bl	404ddc <__aeabi_dcmpeq>
  4054f0:	b150      	cbz	r0, 405508 <_printf_float+0x410>
  4054f2:	2700      	movs	r7, #0
  4054f4:	f104 081a 	add.w	r8, r4, #26
  4054f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4054fa:	3b01      	subs	r3, #1
  4054fc:	429f      	cmp	r7, r3
  4054fe:	db0c      	blt.n	40551a <_printf_float+0x422>
  405500:	464b      	mov	r3, r9
  405502:	f104 0250 	add.w	r2, r4, #80	; 0x50
  405506:	e6f2      	b.n	4052ee <_printf_float+0x1f6>
  405508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40550a:	1c7a      	adds	r2, r7, #1
  40550c:	3b01      	subs	r3, #1
  40550e:	4659      	mov	r1, fp
  405510:	4628      	mov	r0, r5
  405512:	47b0      	blx	r6
  405514:	3001      	adds	r0, #1
  405516:	d1f3      	bne.n	405500 <_printf_float+0x408>
  405518:	e64a      	b.n	4051b0 <_printf_float+0xb8>
  40551a:	2301      	movs	r3, #1
  40551c:	4642      	mov	r2, r8
  40551e:	4659      	mov	r1, fp
  405520:	4628      	mov	r0, r5
  405522:	47b0      	blx	r6
  405524:	3001      	adds	r0, #1
  405526:	f43f ae43 	beq.w	4051b0 <_printf_float+0xb8>
  40552a:	3701      	adds	r7, #1
  40552c:	e7e4      	b.n	4054f8 <_printf_float+0x400>
  40552e:	2301      	movs	r3, #1
  405530:	463a      	mov	r2, r7
  405532:	e7ec      	b.n	40550e <_printf_float+0x416>
  405534:	2301      	movs	r3, #1
  405536:	4642      	mov	r2, r8
  405538:	4659      	mov	r1, fp
  40553a:	4628      	mov	r0, r5
  40553c:	47b0      	blx	r6
  40553e:	3001      	adds	r0, #1
  405540:	f43f ae36 	beq.w	4051b0 <_printf_float+0xb8>
  405544:	3701      	adds	r7, #1
  405546:	e708      	b.n	40535a <_printf_float+0x262>
  405548:	463a      	mov	r2, r7
  40554a:	464b      	mov	r3, r9
  40554c:	4638      	mov	r0, r7
  40554e:	4649      	mov	r1, r9
  405550:	f7ff fc76 	bl	404e40 <__aeabi_dcmpun>
  405554:	2800      	cmp	r0, #0
  405556:	f43f ae30 	beq.w	4051ba <_printf_float+0xc2>
  40555a:	4b01      	ldr	r3, [pc, #4]	; (405560 <_printf_float+0x468>)
  40555c:	4f01      	ldr	r7, [pc, #4]	; (405564 <_printf_float+0x46c>)
  40555e:	e612      	b.n	405186 <_printf_float+0x8e>
  405560:	00407ee4 	.word	0x00407ee4
  405564:	00407ee8 	.word	0x00407ee8

00405568 <_printf_common>:
  405568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40556c:	4691      	mov	r9, r2
  40556e:	461f      	mov	r7, r3
  405570:	688a      	ldr	r2, [r1, #8]
  405572:	690b      	ldr	r3, [r1, #16]
  405574:	f8dd 8020 	ldr.w	r8, [sp, #32]
  405578:	4293      	cmp	r3, r2
  40557a:	bfb8      	it	lt
  40557c:	4613      	movlt	r3, r2
  40557e:	f8c9 3000 	str.w	r3, [r9]
  405582:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  405586:	4606      	mov	r6, r0
  405588:	460c      	mov	r4, r1
  40558a:	b112      	cbz	r2, 405592 <_printf_common+0x2a>
  40558c:	3301      	adds	r3, #1
  40558e:	f8c9 3000 	str.w	r3, [r9]
  405592:	6823      	ldr	r3, [r4, #0]
  405594:	0699      	lsls	r1, r3, #26
  405596:	bf42      	ittt	mi
  405598:	f8d9 3000 	ldrmi.w	r3, [r9]
  40559c:	3302      	addmi	r3, #2
  40559e:	f8c9 3000 	strmi.w	r3, [r9]
  4055a2:	6825      	ldr	r5, [r4, #0]
  4055a4:	f015 0506 	ands.w	r5, r5, #6
  4055a8:	d107      	bne.n	4055ba <_printf_common+0x52>
  4055aa:	f104 0a19 	add.w	sl, r4, #25
  4055ae:	68e3      	ldr	r3, [r4, #12]
  4055b0:	f8d9 2000 	ldr.w	r2, [r9]
  4055b4:	1a9b      	subs	r3, r3, r2
  4055b6:	429d      	cmp	r5, r3
  4055b8:	db29      	blt.n	40560e <_printf_common+0xa6>
  4055ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4055be:	6822      	ldr	r2, [r4, #0]
  4055c0:	3300      	adds	r3, #0
  4055c2:	bf18      	it	ne
  4055c4:	2301      	movne	r3, #1
  4055c6:	0692      	lsls	r2, r2, #26
  4055c8:	d42e      	bmi.n	405628 <_printf_common+0xc0>
  4055ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4055ce:	4639      	mov	r1, r7
  4055d0:	4630      	mov	r0, r6
  4055d2:	47c0      	blx	r8
  4055d4:	3001      	adds	r0, #1
  4055d6:	d021      	beq.n	40561c <_printf_common+0xb4>
  4055d8:	6823      	ldr	r3, [r4, #0]
  4055da:	68e5      	ldr	r5, [r4, #12]
  4055dc:	f8d9 2000 	ldr.w	r2, [r9]
  4055e0:	f003 0306 	and.w	r3, r3, #6
  4055e4:	2b04      	cmp	r3, #4
  4055e6:	bf08      	it	eq
  4055e8:	1aad      	subeq	r5, r5, r2
  4055ea:	68a3      	ldr	r3, [r4, #8]
  4055ec:	6922      	ldr	r2, [r4, #16]
  4055ee:	bf0c      	ite	eq
  4055f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  4055f4:	2500      	movne	r5, #0
  4055f6:	4293      	cmp	r3, r2
  4055f8:	bfc4      	itt	gt
  4055fa:	1a9b      	subgt	r3, r3, r2
  4055fc:	18ed      	addgt	r5, r5, r3
  4055fe:	f04f 0900 	mov.w	r9, #0
  405602:	341a      	adds	r4, #26
  405604:	454d      	cmp	r5, r9
  405606:	d11b      	bne.n	405640 <_printf_common+0xd8>
  405608:	2000      	movs	r0, #0
  40560a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40560e:	2301      	movs	r3, #1
  405610:	4652      	mov	r2, sl
  405612:	4639      	mov	r1, r7
  405614:	4630      	mov	r0, r6
  405616:	47c0      	blx	r8
  405618:	3001      	adds	r0, #1
  40561a:	d103      	bne.n	405624 <_printf_common+0xbc>
  40561c:	f04f 30ff 	mov.w	r0, #4294967295
  405620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405624:	3501      	adds	r5, #1
  405626:	e7c2      	b.n	4055ae <_printf_common+0x46>
  405628:	18e1      	adds	r1, r4, r3
  40562a:	1c5a      	adds	r2, r3, #1
  40562c:	2030      	movs	r0, #48	; 0x30
  40562e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  405632:	4422      	add	r2, r4
  405634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  405638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  40563c:	3302      	adds	r3, #2
  40563e:	e7c4      	b.n	4055ca <_printf_common+0x62>
  405640:	2301      	movs	r3, #1
  405642:	4622      	mov	r2, r4
  405644:	4639      	mov	r1, r7
  405646:	4630      	mov	r0, r6
  405648:	47c0      	blx	r8
  40564a:	3001      	adds	r0, #1
  40564c:	d0e6      	beq.n	40561c <_printf_common+0xb4>
  40564e:	f109 0901 	add.w	r9, r9, #1
  405652:	e7d7      	b.n	405604 <_printf_common+0x9c>

00405654 <_printf_i>:
  405654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405658:	4617      	mov	r7, r2
  40565a:	7e0a      	ldrb	r2, [r1, #24]
  40565c:	b085      	sub	sp, #20
  40565e:	2a6e      	cmp	r2, #110	; 0x6e
  405660:	4698      	mov	r8, r3
  405662:	4606      	mov	r6, r0
  405664:	460c      	mov	r4, r1
  405666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405668:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  40566c:	f000 80bc 	beq.w	4057e8 <_printf_i+0x194>
  405670:	d81a      	bhi.n	4056a8 <_printf_i+0x54>
  405672:	2a63      	cmp	r2, #99	; 0x63
  405674:	d02e      	beq.n	4056d4 <_printf_i+0x80>
  405676:	d80a      	bhi.n	40568e <_printf_i+0x3a>
  405678:	2a00      	cmp	r2, #0
  40567a:	f000 80c8 	beq.w	40580e <_printf_i+0x1ba>
  40567e:	2a58      	cmp	r2, #88	; 0x58
  405680:	f000 808a 	beq.w	405798 <_printf_i+0x144>
  405684:	f104 0542 	add.w	r5, r4, #66	; 0x42
  405688:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  40568c:	e02a      	b.n	4056e4 <_printf_i+0x90>
  40568e:	2a64      	cmp	r2, #100	; 0x64
  405690:	d001      	beq.n	405696 <_printf_i+0x42>
  405692:	2a69      	cmp	r2, #105	; 0x69
  405694:	d1f6      	bne.n	405684 <_printf_i+0x30>
  405696:	6821      	ldr	r1, [r4, #0]
  405698:	681a      	ldr	r2, [r3, #0]
  40569a:	f011 0f80 	tst.w	r1, #128	; 0x80
  40569e:	d023      	beq.n	4056e8 <_printf_i+0x94>
  4056a0:	1d11      	adds	r1, r2, #4
  4056a2:	6019      	str	r1, [r3, #0]
  4056a4:	6813      	ldr	r3, [r2, #0]
  4056a6:	e027      	b.n	4056f8 <_printf_i+0xa4>
  4056a8:	2a73      	cmp	r2, #115	; 0x73
  4056aa:	f000 80b4 	beq.w	405816 <_printf_i+0x1c2>
  4056ae:	d808      	bhi.n	4056c2 <_printf_i+0x6e>
  4056b0:	2a6f      	cmp	r2, #111	; 0x6f
  4056b2:	d02a      	beq.n	40570a <_printf_i+0xb6>
  4056b4:	2a70      	cmp	r2, #112	; 0x70
  4056b6:	d1e5      	bne.n	405684 <_printf_i+0x30>
  4056b8:	680a      	ldr	r2, [r1, #0]
  4056ba:	f042 0220 	orr.w	r2, r2, #32
  4056be:	600a      	str	r2, [r1, #0]
  4056c0:	e003      	b.n	4056ca <_printf_i+0x76>
  4056c2:	2a75      	cmp	r2, #117	; 0x75
  4056c4:	d021      	beq.n	40570a <_printf_i+0xb6>
  4056c6:	2a78      	cmp	r2, #120	; 0x78
  4056c8:	d1dc      	bne.n	405684 <_printf_i+0x30>
  4056ca:	2278      	movs	r2, #120	; 0x78
  4056cc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  4056d0:	496e      	ldr	r1, [pc, #440]	; (40588c <_printf_i+0x238>)
  4056d2:	e064      	b.n	40579e <_printf_i+0x14a>
  4056d4:	681a      	ldr	r2, [r3, #0]
  4056d6:	f101 0542 	add.w	r5, r1, #66	; 0x42
  4056da:	1d11      	adds	r1, r2, #4
  4056dc:	6019      	str	r1, [r3, #0]
  4056de:	6813      	ldr	r3, [r2, #0]
  4056e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4056e4:	2301      	movs	r3, #1
  4056e6:	e0a3      	b.n	405830 <_printf_i+0x1dc>
  4056e8:	f011 0f40 	tst.w	r1, #64	; 0x40
  4056ec:	f102 0104 	add.w	r1, r2, #4
  4056f0:	6019      	str	r1, [r3, #0]
  4056f2:	d0d7      	beq.n	4056a4 <_printf_i+0x50>
  4056f4:	f9b2 3000 	ldrsh.w	r3, [r2]
  4056f8:	2b00      	cmp	r3, #0
  4056fa:	da03      	bge.n	405704 <_printf_i+0xb0>
  4056fc:	222d      	movs	r2, #45	; 0x2d
  4056fe:	425b      	negs	r3, r3
  405700:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  405704:	4962      	ldr	r1, [pc, #392]	; (405890 <_printf_i+0x23c>)
  405706:	220a      	movs	r2, #10
  405708:	e017      	b.n	40573a <_printf_i+0xe6>
  40570a:	6820      	ldr	r0, [r4, #0]
  40570c:	6819      	ldr	r1, [r3, #0]
  40570e:	f010 0f80 	tst.w	r0, #128	; 0x80
  405712:	d003      	beq.n	40571c <_printf_i+0xc8>
  405714:	1d08      	adds	r0, r1, #4
  405716:	6018      	str	r0, [r3, #0]
  405718:	680b      	ldr	r3, [r1, #0]
  40571a:	e006      	b.n	40572a <_printf_i+0xd6>
  40571c:	f010 0f40 	tst.w	r0, #64	; 0x40
  405720:	f101 0004 	add.w	r0, r1, #4
  405724:	6018      	str	r0, [r3, #0]
  405726:	d0f7      	beq.n	405718 <_printf_i+0xc4>
  405728:	880b      	ldrh	r3, [r1, #0]
  40572a:	4959      	ldr	r1, [pc, #356]	; (405890 <_printf_i+0x23c>)
  40572c:	2a6f      	cmp	r2, #111	; 0x6f
  40572e:	bf14      	ite	ne
  405730:	220a      	movne	r2, #10
  405732:	2208      	moveq	r2, #8
  405734:	2000      	movs	r0, #0
  405736:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  40573a:	6865      	ldr	r5, [r4, #4]
  40573c:	60a5      	str	r5, [r4, #8]
  40573e:	2d00      	cmp	r5, #0
  405740:	f2c0 809c 	blt.w	40587c <_printf_i+0x228>
  405744:	6820      	ldr	r0, [r4, #0]
  405746:	f020 0004 	bic.w	r0, r0, #4
  40574a:	6020      	str	r0, [r4, #0]
  40574c:	2b00      	cmp	r3, #0
  40574e:	d13f      	bne.n	4057d0 <_printf_i+0x17c>
  405750:	2d00      	cmp	r5, #0
  405752:	f040 8095 	bne.w	405880 <_printf_i+0x22c>
  405756:	4675      	mov	r5, lr
  405758:	2a08      	cmp	r2, #8
  40575a:	d10b      	bne.n	405774 <_printf_i+0x120>
  40575c:	6823      	ldr	r3, [r4, #0]
  40575e:	07da      	lsls	r2, r3, #31
  405760:	d508      	bpl.n	405774 <_printf_i+0x120>
  405762:	6923      	ldr	r3, [r4, #16]
  405764:	6862      	ldr	r2, [r4, #4]
  405766:	429a      	cmp	r2, r3
  405768:	bfde      	ittt	le
  40576a:	2330      	movle	r3, #48	; 0x30
  40576c:	f805 3c01 	strble.w	r3, [r5, #-1]
  405770:	f105 35ff 	addle.w	r5, r5, #4294967295
  405774:	ebae 0305 	sub.w	r3, lr, r5
  405778:	6123      	str	r3, [r4, #16]
  40577a:	f8cd 8000 	str.w	r8, [sp]
  40577e:	463b      	mov	r3, r7
  405780:	aa03      	add	r2, sp, #12
  405782:	4621      	mov	r1, r4
  405784:	4630      	mov	r0, r6
  405786:	f7ff feef 	bl	405568 <_printf_common>
  40578a:	3001      	adds	r0, #1
  40578c:	d155      	bne.n	40583a <_printf_i+0x1e6>
  40578e:	f04f 30ff 	mov.w	r0, #4294967295
  405792:	b005      	add	sp, #20
  405794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405798:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  40579c:	493c      	ldr	r1, [pc, #240]	; (405890 <_printf_i+0x23c>)
  40579e:	6822      	ldr	r2, [r4, #0]
  4057a0:	6818      	ldr	r0, [r3, #0]
  4057a2:	f012 0f80 	tst.w	r2, #128	; 0x80
  4057a6:	f100 0504 	add.w	r5, r0, #4
  4057aa:	601d      	str	r5, [r3, #0]
  4057ac:	d001      	beq.n	4057b2 <_printf_i+0x15e>
  4057ae:	6803      	ldr	r3, [r0, #0]
  4057b0:	e002      	b.n	4057b8 <_printf_i+0x164>
  4057b2:	0655      	lsls	r5, r2, #25
  4057b4:	d5fb      	bpl.n	4057ae <_printf_i+0x15a>
  4057b6:	8803      	ldrh	r3, [r0, #0]
  4057b8:	07d0      	lsls	r0, r2, #31
  4057ba:	bf44      	itt	mi
  4057bc:	f042 0220 	orrmi.w	r2, r2, #32
  4057c0:	6022      	strmi	r2, [r4, #0]
  4057c2:	b91b      	cbnz	r3, 4057cc <_printf_i+0x178>
  4057c4:	6822      	ldr	r2, [r4, #0]
  4057c6:	f022 0220 	bic.w	r2, r2, #32
  4057ca:	6022      	str	r2, [r4, #0]
  4057cc:	2210      	movs	r2, #16
  4057ce:	e7b1      	b.n	405734 <_printf_i+0xe0>
  4057d0:	4675      	mov	r5, lr
  4057d2:	fbb3 f0f2 	udiv	r0, r3, r2
  4057d6:	fb02 3310 	mls	r3, r2, r0, r3
  4057da:	5ccb      	ldrb	r3, [r1, r3]
  4057dc:	f805 3d01 	strb.w	r3, [r5, #-1]!
  4057e0:	4603      	mov	r3, r0
  4057e2:	2800      	cmp	r0, #0
  4057e4:	d1f5      	bne.n	4057d2 <_printf_i+0x17e>
  4057e6:	e7b7      	b.n	405758 <_printf_i+0x104>
  4057e8:	6808      	ldr	r0, [r1, #0]
  4057ea:	681a      	ldr	r2, [r3, #0]
  4057ec:	6949      	ldr	r1, [r1, #20]
  4057ee:	f010 0f80 	tst.w	r0, #128	; 0x80
  4057f2:	d004      	beq.n	4057fe <_printf_i+0x1aa>
  4057f4:	1d10      	adds	r0, r2, #4
  4057f6:	6018      	str	r0, [r3, #0]
  4057f8:	6813      	ldr	r3, [r2, #0]
  4057fa:	6019      	str	r1, [r3, #0]
  4057fc:	e007      	b.n	40580e <_printf_i+0x1ba>
  4057fe:	f010 0f40 	tst.w	r0, #64	; 0x40
  405802:	f102 0004 	add.w	r0, r2, #4
  405806:	6018      	str	r0, [r3, #0]
  405808:	6813      	ldr	r3, [r2, #0]
  40580a:	d0f6      	beq.n	4057fa <_printf_i+0x1a6>
  40580c:	8019      	strh	r1, [r3, #0]
  40580e:	2300      	movs	r3, #0
  405810:	6123      	str	r3, [r4, #16]
  405812:	4675      	mov	r5, lr
  405814:	e7b1      	b.n	40577a <_printf_i+0x126>
  405816:	681a      	ldr	r2, [r3, #0]
  405818:	1d11      	adds	r1, r2, #4
  40581a:	6019      	str	r1, [r3, #0]
  40581c:	6815      	ldr	r5, [r2, #0]
  40581e:	6862      	ldr	r2, [r4, #4]
  405820:	2100      	movs	r1, #0
  405822:	4628      	mov	r0, r5
  405824:	f001 f964 	bl	406af0 <memchr>
  405828:	b108      	cbz	r0, 40582e <_printf_i+0x1da>
  40582a:	1b40      	subs	r0, r0, r5
  40582c:	6060      	str	r0, [r4, #4]
  40582e:	6863      	ldr	r3, [r4, #4]
  405830:	6123      	str	r3, [r4, #16]
  405832:	2300      	movs	r3, #0
  405834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  405838:	e79f      	b.n	40577a <_printf_i+0x126>
  40583a:	6923      	ldr	r3, [r4, #16]
  40583c:	462a      	mov	r2, r5
  40583e:	4639      	mov	r1, r7
  405840:	4630      	mov	r0, r6
  405842:	47c0      	blx	r8
  405844:	3001      	adds	r0, #1
  405846:	d0a2      	beq.n	40578e <_printf_i+0x13a>
  405848:	6823      	ldr	r3, [r4, #0]
  40584a:	079b      	lsls	r3, r3, #30
  40584c:	d507      	bpl.n	40585e <_printf_i+0x20a>
  40584e:	2500      	movs	r5, #0
  405850:	f104 0919 	add.w	r9, r4, #25
  405854:	68e3      	ldr	r3, [r4, #12]
  405856:	9a03      	ldr	r2, [sp, #12]
  405858:	1a9b      	subs	r3, r3, r2
  40585a:	429d      	cmp	r5, r3
  40585c:	db05      	blt.n	40586a <_printf_i+0x216>
  40585e:	68e0      	ldr	r0, [r4, #12]
  405860:	9b03      	ldr	r3, [sp, #12]
  405862:	4298      	cmp	r0, r3
  405864:	bfb8      	it	lt
  405866:	4618      	movlt	r0, r3
  405868:	e793      	b.n	405792 <_printf_i+0x13e>
  40586a:	2301      	movs	r3, #1
  40586c:	464a      	mov	r2, r9
  40586e:	4639      	mov	r1, r7
  405870:	4630      	mov	r0, r6
  405872:	47c0      	blx	r8
  405874:	3001      	adds	r0, #1
  405876:	d08a      	beq.n	40578e <_printf_i+0x13a>
  405878:	3501      	adds	r5, #1
  40587a:	e7eb      	b.n	405854 <_printf_i+0x200>
  40587c:	2b00      	cmp	r3, #0
  40587e:	d1a7      	bne.n	4057d0 <_printf_i+0x17c>
  405880:	780b      	ldrb	r3, [r1, #0]
  405882:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  405886:	f104 0542 	add.w	r5, r4, #66	; 0x42
  40588a:	e765      	b.n	405758 <_printf_i+0x104>
  40588c:	00407eff 	.word	0x00407eff
  405890:	00407eee 	.word	0x00407eee

00405894 <iprintf>:
  405894:	b40f      	push	{r0, r1, r2, r3}
  405896:	4b0a      	ldr	r3, [pc, #40]	; (4058c0 <iprintf+0x2c>)
  405898:	b513      	push	{r0, r1, r4, lr}
  40589a:	681c      	ldr	r4, [r3, #0]
  40589c:	b124      	cbz	r4, 4058a8 <iprintf+0x14>
  40589e:	69a3      	ldr	r3, [r4, #24]
  4058a0:	b913      	cbnz	r3, 4058a8 <iprintf+0x14>
  4058a2:	4620      	mov	r0, r4
  4058a4:	f001 f81c 	bl	4068e0 <__sinit>
  4058a8:	ab05      	add	r3, sp, #20
  4058aa:	9a04      	ldr	r2, [sp, #16]
  4058ac:	68a1      	ldr	r1, [r4, #8]
  4058ae:	9301      	str	r3, [sp, #4]
  4058b0:	4620      	mov	r0, r4
  4058b2:	f001 fd1f 	bl	4072f4 <_vfiprintf_r>
  4058b6:	b002      	add	sp, #8
  4058b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4058bc:	b004      	add	sp, #16
  4058be:	4770      	bx	lr
  4058c0:	2040004c 	.word	0x2040004c

004058c4 <setbuf>:
  4058c4:	2900      	cmp	r1, #0
  4058c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4058ca:	bf0c      	ite	eq
  4058cc:	2202      	moveq	r2, #2
  4058ce:	2200      	movne	r2, #0
  4058d0:	f000 b800 	b.w	4058d4 <setvbuf>

004058d4 <setvbuf>:
  4058d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4058d8:	461d      	mov	r5, r3
  4058da:	4b51      	ldr	r3, [pc, #324]	; (405a20 <setvbuf+0x14c>)
  4058dc:	681e      	ldr	r6, [r3, #0]
  4058de:	4604      	mov	r4, r0
  4058e0:	460f      	mov	r7, r1
  4058e2:	4690      	mov	r8, r2
  4058e4:	b126      	cbz	r6, 4058f0 <setvbuf+0x1c>
  4058e6:	69b3      	ldr	r3, [r6, #24]
  4058e8:	b913      	cbnz	r3, 4058f0 <setvbuf+0x1c>
  4058ea:	4630      	mov	r0, r6
  4058ec:	f000 fff8 	bl	4068e0 <__sinit>
  4058f0:	4b4c      	ldr	r3, [pc, #304]	; (405a24 <setvbuf+0x150>)
  4058f2:	429c      	cmp	r4, r3
  4058f4:	d152      	bne.n	40599c <setvbuf+0xc8>
  4058f6:	6874      	ldr	r4, [r6, #4]
  4058f8:	f1b8 0f02 	cmp.w	r8, #2
  4058fc:	d006      	beq.n	40590c <setvbuf+0x38>
  4058fe:	f1b8 0f01 	cmp.w	r8, #1
  405902:	f200 8089 	bhi.w	405a18 <setvbuf+0x144>
  405906:	2d00      	cmp	r5, #0
  405908:	f2c0 8086 	blt.w	405a18 <setvbuf+0x144>
  40590c:	4621      	mov	r1, r4
  40590e:	4630      	mov	r0, r6
  405910:	f000 ff7c 	bl	40680c <_fflush_r>
  405914:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405916:	b141      	cbz	r1, 40592a <setvbuf+0x56>
  405918:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40591c:	4299      	cmp	r1, r3
  40591e:	d002      	beq.n	405926 <setvbuf+0x52>
  405920:	4630      	mov	r0, r6
  405922:	f001 fc13 	bl	40714c <_free_r>
  405926:	2300      	movs	r3, #0
  405928:	6363      	str	r3, [r4, #52]	; 0x34
  40592a:	2300      	movs	r3, #0
  40592c:	61a3      	str	r3, [r4, #24]
  40592e:	6063      	str	r3, [r4, #4]
  405930:	89a3      	ldrh	r3, [r4, #12]
  405932:	061b      	lsls	r3, r3, #24
  405934:	d503      	bpl.n	40593e <setvbuf+0x6a>
  405936:	6921      	ldr	r1, [r4, #16]
  405938:	4630      	mov	r0, r6
  40593a:	f001 fc07 	bl	40714c <_free_r>
  40593e:	89a3      	ldrh	r3, [r4, #12]
  405940:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  405944:	f023 0303 	bic.w	r3, r3, #3
  405948:	f1b8 0f02 	cmp.w	r8, #2
  40594c:	81a3      	strh	r3, [r4, #12]
  40594e:	d05d      	beq.n	405a0c <setvbuf+0x138>
  405950:	ab01      	add	r3, sp, #4
  405952:	466a      	mov	r2, sp
  405954:	4621      	mov	r1, r4
  405956:	4630      	mov	r0, r6
  405958:	f001 f85a 	bl	406a10 <__swhatbuf_r>
  40595c:	89a3      	ldrh	r3, [r4, #12]
  40595e:	4318      	orrs	r0, r3
  405960:	81a0      	strh	r0, [r4, #12]
  405962:	bb2d      	cbnz	r5, 4059b0 <setvbuf+0xdc>
  405964:	9d00      	ldr	r5, [sp, #0]
  405966:	4628      	mov	r0, r5
  405968:	f001 f8b6 	bl	406ad8 <malloc>
  40596c:	4607      	mov	r7, r0
  40596e:	2800      	cmp	r0, #0
  405970:	d14e      	bne.n	405a10 <setvbuf+0x13c>
  405972:	f8dd 9000 	ldr.w	r9, [sp]
  405976:	45a9      	cmp	r9, r5
  405978:	d13c      	bne.n	4059f4 <setvbuf+0x120>
  40597a:	f04f 30ff 	mov.w	r0, #4294967295
  40597e:	89a3      	ldrh	r3, [r4, #12]
  405980:	f043 0302 	orr.w	r3, r3, #2
  405984:	81a3      	strh	r3, [r4, #12]
  405986:	2300      	movs	r3, #0
  405988:	60a3      	str	r3, [r4, #8]
  40598a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40598e:	6023      	str	r3, [r4, #0]
  405990:	6123      	str	r3, [r4, #16]
  405992:	2301      	movs	r3, #1
  405994:	6163      	str	r3, [r4, #20]
  405996:	b003      	add	sp, #12
  405998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40599c:	4b22      	ldr	r3, [pc, #136]	; (405a28 <setvbuf+0x154>)
  40599e:	429c      	cmp	r4, r3
  4059a0:	d101      	bne.n	4059a6 <setvbuf+0xd2>
  4059a2:	68b4      	ldr	r4, [r6, #8]
  4059a4:	e7a8      	b.n	4058f8 <setvbuf+0x24>
  4059a6:	4b21      	ldr	r3, [pc, #132]	; (405a2c <setvbuf+0x158>)
  4059a8:	429c      	cmp	r4, r3
  4059aa:	bf08      	it	eq
  4059ac:	68f4      	ldreq	r4, [r6, #12]
  4059ae:	e7a3      	b.n	4058f8 <setvbuf+0x24>
  4059b0:	2f00      	cmp	r7, #0
  4059b2:	d0d8      	beq.n	405966 <setvbuf+0x92>
  4059b4:	69b3      	ldr	r3, [r6, #24]
  4059b6:	b913      	cbnz	r3, 4059be <setvbuf+0xea>
  4059b8:	4630      	mov	r0, r6
  4059ba:	f000 ff91 	bl	4068e0 <__sinit>
  4059be:	f1b8 0f01 	cmp.w	r8, #1
  4059c2:	bf08      	it	eq
  4059c4:	89a3      	ldrheq	r3, [r4, #12]
  4059c6:	6027      	str	r7, [r4, #0]
  4059c8:	bf04      	itt	eq
  4059ca:	f043 0301 	orreq.w	r3, r3, #1
  4059ce:	81a3      	strheq	r3, [r4, #12]
  4059d0:	89a3      	ldrh	r3, [r4, #12]
  4059d2:	6127      	str	r7, [r4, #16]
  4059d4:	f013 0008 	ands.w	r0, r3, #8
  4059d8:	6165      	str	r5, [r4, #20]
  4059da:	d01b      	beq.n	405a14 <setvbuf+0x140>
  4059dc:	f013 0001 	ands.w	r0, r3, #1
  4059e0:	bf18      	it	ne
  4059e2:	426d      	negne	r5, r5
  4059e4:	f04f 0300 	mov.w	r3, #0
  4059e8:	bf1d      	ittte	ne
  4059ea:	60a3      	strne	r3, [r4, #8]
  4059ec:	61a5      	strne	r5, [r4, #24]
  4059ee:	4618      	movne	r0, r3
  4059f0:	60a5      	streq	r5, [r4, #8]
  4059f2:	e7d0      	b.n	405996 <setvbuf+0xc2>
  4059f4:	4648      	mov	r0, r9
  4059f6:	f001 f86f 	bl	406ad8 <malloc>
  4059fa:	4607      	mov	r7, r0
  4059fc:	2800      	cmp	r0, #0
  4059fe:	d0bc      	beq.n	40597a <setvbuf+0xa6>
  405a00:	89a3      	ldrh	r3, [r4, #12]
  405a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405a06:	81a3      	strh	r3, [r4, #12]
  405a08:	464d      	mov	r5, r9
  405a0a:	e7d3      	b.n	4059b4 <setvbuf+0xe0>
  405a0c:	2000      	movs	r0, #0
  405a0e:	e7b6      	b.n	40597e <setvbuf+0xaa>
  405a10:	46a9      	mov	r9, r5
  405a12:	e7f5      	b.n	405a00 <setvbuf+0x12c>
  405a14:	60a0      	str	r0, [r4, #8]
  405a16:	e7be      	b.n	405996 <setvbuf+0xc2>
  405a18:	f04f 30ff 	mov.w	r0, #4294967295
  405a1c:	e7bb      	b.n	405996 <setvbuf+0xc2>
  405a1e:	bf00      	nop
  405a20:	2040004c 	.word	0x2040004c
  405a24:	00407f40 	.word	0x00407f40
  405a28:	00407f60 	.word	0x00407f60
  405a2c:	00407f20 	.word	0x00407f20

00405a30 <strlen>:
  405a30:	4603      	mov	r3, r0
  405a32:	f813 2b01 	ldrb.w	r2, [r3], #1
  405a36:	2a00      	cmp	r2, #0
  405a38:	d1fb      	bne.n	405a32 <strlen+0x2>
  405a3a:	1a18      	subs	r0, r3, r0
  405a3c:	3801      	subs	r0, #1
  405a3e:	4770      	bx	lr

00405a40 <quorem>:
  405a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a44:	6903      	ldr	r3, [r0, #16]
  405a46:	690c      	ldr	r4, [r1, #16]
  405a48:	429c      	cmp	r4, r3
  405a4a:	4680      	mov	r8, r0
  405a4c:	f300 8082 	bgt.w	405b54 <quorem+0x114>
  405a50:	3c01      	subs	r4, #1
  405a52:	f101 0714 	add.w	r7, r1, #20
  405a56:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  405a5a:	f100 0614 	add.w	r6, r0, #20
  405a5e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  405a62:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  405a66:	eb06 030e 	add.w	r3, r6, lr
  405a6a:	3501      	adds	r5, #1
  405a6c:	eb07 090e 	add.w	r9, r7, lr
  405a70:	9301      	str	r3, [sp, #4]
  405a72:	fbb0 f5f5 	udiv	r5, r0, r5
  405a76:	b395      	cbz	r5, 405ade <quorem+0x9e>
  405a78:	f04f 0a00 	mov.w	sl, #0
  405a7c:	4638      	mov	r0, r7
  405a7e:	46b4      	mov	ip, r6
  405a80:	46d3      	mov	fp, sl
  405a82:	f850 2b04 	ldr.w	r2, [r0], #4
  405a86:	b293      	uxth	r3, r2
  405a88:	fb05 a303 	mla	r3, r5, r3, sl
  405a8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  405a90:	b29b      	uxth	r3, r3
  405a92:	ebab 0303 	sub.w	r3, fp, r3
  405a96:	0c12      	lsrs	r2, r2, #16
  405a98:	f8bc b000 	ldrh.w	fp, [ip]
  405a9c:	fb05 a202 	mla	r2, r5, r2, sl
  405aa0:	fa13 f38b 	uxtah	r3, r3, fp
  405aa4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  405aa8:	fa1f fb82 	uxth.w	fp, r2
  405aac:	f8dc 2000 	ldr.w	r2, [ip]
  405ab0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  405ab4:	eb02 4223 	add.w	r2, r2, r3, asr #16
  405ab8:	b29b      	uxth	r3, r3
  405aba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405abe:	4581      	cmp	r9, r0
  405ac0:	ea4f 4b22 	mov.w	fp, r2, asr #16
  405ac4:	f84c 3b04 	str.w	r3, [ip], #4
  405ac8:	d2db      	bcs.n	405a82 <quorem+0x42>
  405aca:	f856 300e 	ldr.w	r3, [r6, lr]
  405ace:	b933      	cbnz	r3, 405ade <quorem+0x9e>
  405ad0:	9b01      	ldr	r3, [sp, #4]
  405ad2:	3b04      	subs	r3, #4
  405ad4:	429e      	cmp	r6, r3
  405ad6:	461a      	mov	r2, r3
  405ad8:	d330      	bcc.n	405b3c <quorem+0xfc>
  405ada:	f8c8 4010 	str.w	r4, [r8, #16]
  405ade:	4640      	mov	r0, r8
  405ae0:	f001 fa5f 	bl	406fa2 <__mcmp>
  405ae4:	2800      	cmp	r0, #0
  405ae6:	db25      	blt.n	405b34 <quorem+0xf4>
  405ae8:	3501      	adds	r5, #1
  405aea:	4630      	mov	r0, r6
  405aec:	f04f 0e00 	mov.w	lr, #0
  405af0:	f857 2b04 	ldr.w	r2, [r7], #4
  405af4:	f8d0 c000 	ldr.w	ip, [r0]
  405af8:	b293      	uxth	r3, r2
  405afa:	ebae 0303 	sub.w	r3, lr, r3
  405afe:	0c12      	lsrs	r2, r2, #16
  405b00:	fa13 f38c 	uxtah	r3, r3, ip
  405b04:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  405b08:	eb02 4223 	add.w	r2, r2, r3, asr #16
  405b0c:	b29b      	uxth	r3, r3
  405b0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  405b12:	45b9      	cmp	r9, r7
  405b14:	ea4f 4e22 	mov.w	lr, r2, asr #16
  405b18:	f840 3b04 	str.w	r3, [r0], #4
  405b1c:	d2e8      	bcs.n	405af0 <quorem+0xb0>
  405b1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  405b22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  405b26:	b92a      	cbnz	r2, 405b34 <quorem+0xf4>
  405b28:	3b04      	subs	r3, #4
  405b2a:	429e      	cmp	r6, r3
  405b2c:	461a      	mov	r2, r3
  405b2e:	d30b      	bcc.n	405b48 <quorem+0x108>
  405b30:	f8c8 4010 	str.w	r4, [r8, #16]
  405b34:	4628      	mov	r0, r5
  405b36:	b003      	add	sp, #12
  405b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b3c:	6812      	ldr	r2, [r2, #0]
  405b3e:	3b04      	subs	r3, #4
  405b40:	2a00      	cmp	r2, #0
  405b42:	d1ca      	bne.n	405ada <quorem+0x9a>
  405b44:	3c01      	subs	r4, #1
  405b46:	e7c5      	b.n	405ad4 <quorem+0x94>
  405b48:	6812      	ldr	r2, [r2, #0]
  405b4a:	3b04      	subs	r3, #4
  405b4c:	2a00      	cmp	r2, #0
  405b4e:	d1ef      	bne.n	405b30 <quorem+0xf0>
  405b50:	3c01      	subs	r4, #1
  405b52:	e7ea      	b.n	405b2a <quorem+0xea>
  405b54:	2000      	movs	r0, #0
  405b56:	e7ee      	b.n	405b36 <quorem+0xf6>

00405b58 <_dtoa_r>:
  405b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b5c:	6a46      	ldr	r6, [r0, #36]	; 0x24
  405b5e:	b095      	sub	sp, #84	; 0x54
  405b60:	4604      	mov	r4, r0
  405b62:	9d21      	ldr	r5, [sp, #132]	; 0x84
  405b64:	e9cd 2302 	strd	r2, r3, [sp, #8]
  405b68:	b93e      	cbnz	r6, 405b7a <_dtoa_r+0x22>
  405b6a:	2010      	movs	r0, #16
  405b6c:	f000 ffb4 	bl	406ad8 <malloc>
  405b70:	6260      	str	r0, [r4, #36]	; 0x24
  405b72:	6046      	str	r6, [r0, #4]
  405b74:	6086      	str	r6, [r0, #8]
  405b76:	6006      	str	r6, [r0, #0]
  405b78:	60c6      	str	r6, [r0, #12]
  405b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405b7c:	6819      	ldr	r1, [r3, #0]
  405b7e:	b151      	cbz	r1, 405b96 <_dtoa_r+0x3e>
  405b80:	685a      	ldr	r2, [r3, #4]
  405b82:	604a      	str	r2, [r1, #4]
  405b84:	2301      	movs	r3, #1
  405b86:	4093      	lsls	r3, r2
  405b88:	608b      	str	r3, [r1, #8]
  405b8a:	4620      	mov	r0, r4
  405b8c:	f001 f834 	bl	406bf8 <_Bfree>
  405b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405b92:	2200      	movs	r2, #0
  405b94:	601a      	str	r2, [r3, #0]
  405b96:	9b03      	ldr	r3, [sp, #12]
  405b98:	2b00      	cmp	r3, #0
  405b9a:	bfbf      	itttt	lt
  405b9c:	2301      	movlt	r3, #1
  405b9e:	602b      	strlt	r3, [r5, #0]
  405ba0:	9b03      	ldrlt	r3, [sp, #12]
  405ba2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  405ba6:	bfb2      	itee	lt
  405ba8:	9303      	strlt	r3, [sp, #12]
  405baa:	2300      	movge	r3, #0
  405bac:	602b      	strge	r3, [r5, #0]
  405bae:	f8dd 900c 	ldr.w	r9, [sp, #12]
  405bb2:	4ba9      	ldr	r3, [pc, #676]	; (405e58 <_dtoa_r+0x300>)
  405bb4:	ea33 0309 	bics.w	r3, r3, r9
  405bb8:	d11b      	bne.n	405bf2 <_dtoa_r+0x9a>
  405bba:	9a20      	ldr	r2, [sp, #128]	; 0x80
  405bbc:	f242 730f 	movw	r3, #9999	; 0x270f
  405bc0:	6013      	str	r3, [r2, #0]
  405bc2:	9b02      	ldr	r3, [sp, #8]
  405bc4:	b923      	cbnz	r3, 405bd0 <_dtoa_r+0x78>
  405bc6:	f3c9 0013 	ubfx	r0, r9, #0, #20
  405bca:	2800      	cmp	r0, #0
  405bcc:	f000 8581 	beq.w	4066d2 <_dtoa_r+0xb7a>
  405bd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405bd2:	b953      	cbnz	r3, 405bea <_dtoa_r+0x92>
  405bd4:	4ba1      	ldr	r3, [pc, #644]	; (405e5c <_dtoa_r+0x304>)
  405bd6:	e021      	b.n	405c1c <_dtoa_r+0xc4>
  405bd8:	4ba1      	ldr	r3, [pc, #644]	; (405e60 <_dtoa_r+0x308>)
  405bda:	9306      	str	r3, [sp, #24]
  405bdc:	3308      	adds	r3, #8
  405bde:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405be0:	6013      	str	r3, [r2, #0]
  405be2:	9806      	ldr	r0, [sp, #24]
  405be4:	b015      	add	sp, #84	; 0x54
  405be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bea:	4b9c      	ldr	r3, [pc, #624]	; (405e5c <_dtoa_r+0x304>)
  405bec:	9306      	str	r3, [sp, #24]
  405bee:	3303      	adds	r3, #3
  405bf0:	e7f5      	b.n	405bde <_dtoa_r+0x86>
  405bf2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  405bf6:	2200      	movs	r2, #0
  405bf8:	2300      	movs	r3, #0
  405bfa:	4630      	mov	r0, r6
  405bfc:	4639      	mov	r1, r7
  405bfe:	f7ff f8ed 	bl	404ddc <__aeabi_dcmpeq>
  405c02:	4680      	mov	r8, r0
  405c04:	b160      	cbz	r0, 405c20 <_dtoa_r+0xc8>
  405c06:	9a20      	ldr	r2, [sp, #128]	; 0x80
  405c08:	2301      	movs	r3, #1
  405c0a:	6013      	str	r3, [r2, #0]
  405c0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405c0e:	2b00      	cmp	r3, #0
  405c10:	f000 855c 	beq.w	4066cc <_dtoa_r+0xb74>
  405c14:	4b93      	ldr	r3, [pc, #588]	; (405e64 <_dtoa_r+0x30c>)
  405c16:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405c18:	6013      	str	r3, [r2, #0]
  405c1a:	3b01      	subs	r3, #1
  405c1c:	9306      	str	r3, [sp, #24]
  405c1e:	e7e0      	b.n	405be2 <_dtoa_r+0x8a>
  405c20:	ab12      	add	r3, sp, #72	; 0x48
  405c22:	9301      	str	r3, [sp, #4]
  405c24:	ab13      	add	r3, sp, #76	; 0x4c
  405c26:	9300      	str	r3, [sp, #0]
  405c28:	4632      	mov	r2, r6
  405c2a:	463b      	mov	r3, r7
  405c2c:	4620      	mov	r0, r4
  405c2e:	f001 fa30 	bl	407092 <__d2b>
  405c32:	f3c9 550a 	ubfx	r5, r9, #20, #11
  405c36:	4682      	mov	sl, r0
  405c38:	2d00      	cmp	r5, #0
  405c3a:	d07c      	beq.n	405d36 <_dtoa_r+0x1de>
  405c3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
  405c40:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  405c44:	4630      	mov	r0, r6
  405c46:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405c4a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  405c4e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  405c52:	2200      	movs	r2, #0
  405c54:	4b84      	ldr	r3, [pc, #528]	; (405e68 <_dtoa_r+0x310>)
  405c56:	f7fe fca5 	bl	4045a4 <__aeabi_dsub>
  405c5a:	a379      	add	r3, pc, #484	; (adr r3, 405e40 <_dtoa_r+0x2e8>)
  405c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c60:	f7fe fe54 	bl	40490c <__aeabi_dmul>
  405c64:	a378      	add	r3, pc, #480	; (adr r3, 405e48 <_dtoa_r+0x2f0>)
  405c66:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c6a:	f7fe fc9d 	bl	4045a8 <__adddf3>
  405c6e:	4606      	mov	r6, r0
  405c70:	4628      	mov	r0, r5
  405c72:	460f      	mov	r7, r1
  405c74:	f7fe fde4 	bl	404840 <__aeabi_i2d>
  405c78:	a375      	add	r3, pc, #468	; (adr r3, 405e50 <_dtoa_r+0x2f8>)
  405c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c7e:	f7fe fe45 	bl	40490c <__aeabi_dmul>
  405c82:	4602      	mov	r2, r0
  405c84:	460b      	mov	r3, r1
  405c86:	4630      	mov	r0, r6
  405c88:	4639      	mov	r1, r7
  405c8a:	f7fe fc8d 	bl	4045a8 <__adddf3>
  405c8e:	4606      	mov	r6, r0
  405c90:	460f      	mov	r7, r1
  405c92:	f7ff f8eb 	bl	404e6c <__aeabi_d2iz>
  405c96:	2200      	movs	r2, #0
  405c98:	4683      	mov	fp, r0
  405c9a:	2300      	movs	r3, #0
  405c9c:	4630      	mov	r0, r6
  405c9e:	4639      	mov	r1, r7
  405ca0:	f7ff f8a6 	bl	404df0 <__aeabi_dcmplt>
  405ca4:	b158      	cbz	r0, 405cbe <_dtoa_r+0x166>
  405ca6:	4658      	mov	r0, fp
  405ca8:	f7fe fdca 	bl	404840 <__aeabi_i2d>
  405cac:	4602      	mov	r2, r0
  405cae:	460b      	mov	r3, r1
  405cb0:	4630      	mov	r0, r6
  405cb2:	4639      	mov	r1, r7
  405cb4:	f7ff f892 	bl	404ddc <__aeabi_dcmpeq>
  405cb8:	b908      	cbnz	r0, 405cbe <_dtoa_r+0x166>
  405cba:	f10b 3bff 	add.w	fp, fp, #4294967295
  405cbe:	f1bb 0f16 	cmp.w	fp, #22
  405cc2:	d857      	bhi.n	405d74 <_dtoa_r+0x21c>
  405cc4:	4969      	ldr	r1, [pc, #420]	; (405e6c <_dtoa_r+0x314>)
  405cc6:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  405cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405cce:	e9d1 0100 	ldrd	r0, r1, [r1]
  405cd2:	f7ff f8ab 	bl	404e2c <__aeabi_dcmpgt>
  405cd6:	2800      	cmp	r0, #0
  405cd8:	d04e      	beq.n	405d78 <_dtoa_r+0x220>
  405cda:	f10b 3bff 	add.w	fp, fp, #4294967295
  405cde:	2300      	movs	r3, #0
  405ce0:	930d      	str	r3, [sp, #52]	; 0x34
  405ce2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405ce4:	1b5d      	subs	r5, r3, r5
  405ce6:	1e6b      	subs	r3, r5, #1
  405ce8:	9307      	str	r3, [sp, #28]
  405cea:	bf43      	ittte	mi
  405cec:	2300      	movmi	r3, #0
  405cee:	f1c5 0801 	rsbmi	r8, r5, #1
  405cf2:	9307      	strmi	r3, [sp, #28]
  405cf4:	f04f 0800 	movpl.w	r8, #0
  405cf8:	f1bb 0f00 	cmp.w	fp, #0
  405cfc:	db3e      	blt.n	405d7c <_dtoa_r+0x224>
  405cfe:	9b07      	ldr	r3, [sp, #28]
  405d00:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  405d04:	445b      	add	r3, fp
  405d06:	9307      	str	r3, [sp, #28]
  405d08:	2300      	movs	r3, #0
  405d0a:	9308      	str	r3, [sp, #32]
  405d0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405d0e:	2b09      	cmp	r3, #9
  405d10:	f200 80b0 	bhi.w	405e74 <_dtoa_r+0x31c>
  405d14:	2b05      	cmp	r3, #5
  405d16:	bfc4      	itt	gt
  405d18:	3b04      	subgt	r3, #4
  405d1a:	931e      	strgt	r3, [sp, #120]	; 0x78
  405d1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405d1e:	f1a3 0302 	sub.w	r3, r3, #2
  405d22:	bfcc      	ite	gt
  405d24:	2600      	movgt	r6, #0
  405d26:	2601      	movle	r6, #1
  405d28:	2b03      	cmp	r3, #3
  405d2a:	f200 80af 	bhi.w	405e8c <_dtoa_r+0x334>
  405d2e:	e8df f003 	tbb	[pc, r3]
  405d32:	8583      	.short	0x8583
  405d34:	772d      	.short	0x772d
  405d36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405d38:	9d12      	ldr	r5, [sp, #72]	; 0x48
  405d3a:	441d      	add	r5, r3
  405d3c:	f205 4332 	addw	r3, r5, #1074	; 0x432
  405d40:	2b20      	cmp	r3, #32
  405d42:	dd11      	ble.n	405d68 <_dtoa_r+0x210>
  405d44:	9a02      	ldr	r2, [sp, #8]
  405d46:	f205 4012 	addw	r0, r5, #1042	; 0x412
  405d4a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405d4e:	fa22 f000 	lsr.w	r0, r2, r0
  405d52:	fa09 f303 	lsl.w	r3, r9, r3
  405d56:	4318      	orrs	r0, r3
  405d58:	f7fe fd62 	bl	404820 <__aeabi_ui2d>
  405d5c:	2301      	movs	r3, #1
  405d5e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405d62:	3d01      	subs	r5, #1
  405d64:	9310      	str	r3, [sp, #64]	; 0x40
  405d66:	e774      	b.n	405c52 <_dtoa_r+0xfa>
  405d68:	f1c3 0020 	rsb	r0, r3, #32
  405d6c:	9b02      	ldr	r3, [sp, #8]
  405d6e:	fa03 f000 	lsl.w	r0, r3, r0
  405d72:	e7f1      	b.n	405d58 <_dtoa_r+0x200>
  405d74:	2301      	movs	r3, #1
  405d76:	e7b3      	b.n	405ce0 <_dtoa_r+0x188>
  405d78:	900d      	str	r0, [sp, #52]	; 0x34
  405d7a:	e7b2      	b.n	405ce2 <_dtoa_r+0x18a>
  405d7c:	f1cb 0300 	rsb	r3, fp, #0
  405d80:	9308      	str	r3, [sp, #32]
  405d82:	2300      	movs	r3, #0
  405d84:	eba8 080b 	sub.w	r8, r8, fp
  405d88:	930c      	str	r3, [sp, #48]	; 0x30
  405d8a:	e7bf      	b.n	405d0c <_dtoa_r+0x1b4>
  405d8c:	2301      	movs	r3, #1
  405d8e:	9309      	str	r3, [sp, #36]	; 0x24
  405d90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405d92:	2b00      	cmp	r3, #0
  405d94:	dd7d      	ble.n	405e92 <_dtoa_r+0x33a>
  405d96:	9304      	str	r3, [sp, #16]
  405d98:	4699      	mov	r9, r3
  405d9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  405d9c:	2200      	movs	r2, #0
  405d9e:	606a      	str	r2, [r5, #4]
  405da0:	2104      	movs	r1, #4
  405da2:	f101 0214 	add.w	r2, r1, #20
  405da6:	429a      	cmp	r2, r3
  405da8:	d978      	bls.n	405e9c <_dtoa_r+0x344>
  405daa:	6869      	ldr	r1, [r5, #4]
  405dac:	4620      	mov	r0, r4
  405dae:	f000 feef 	bl	406b90 <_Balloc>
  405db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405db4:	6028      	str	r0, [r5, #0]
  405db6:	681b      	ldr	r3, [r3, #0]
  405db8:	9306      	str	r3, [sp, #24]
  405dba:	f1b9 0f0e 	cmp.w	r9, #14
  405dbe:	f200 80ee 	bhi.w	405f9e <_dtoa_r+0x446>
  405dc2:	2e00      	cmp	r6, #0
  405dc4:	f000 80eb 	beq.w	405f9e <_dtoa_r+0x446>
  405dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405dcc:	f1bb 0f00 	cmp.w	fp, #0
  405dd0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  405dd4:	dd77      	ble.n	405ec6 <_dtoa_r+0x36e>
  405dd6:	4a25      	ldr	r2, [pc, #148]	; (405e6c <_dtoa_r+0x314>)
  405dd8:	f00b 030f 	and.w	r3, fp, #15
  405ddc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  405de0:	e9d3 2300 	ldrd	r2, r3, [r3]
  405de4:	ea4f 162b 	mov.w	r6, fp, asr #4
  405de8:	06f0      	lsls	r0, r6, #27
  405dea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  405dee:	d55a      	bpl.n	405ea6 <_dtoa_r+0x34e>
  405df0:	4b1f      	ldr	r3, [pc, #124]	; (405e70 <_dtoa_r+0x318>)
  405df2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  405df6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405dfa:	f7fe feb1 	bl	404b60 <__aeabi_ddiv>
  405dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405e02:	f006 060f 	and.w	r6, r6, #15
  405e06:	2503      	movs	r5, #3
  405e08:	4f19      	ldr	r7, [pc, #100]	; (405e70 <_dtoa_r+0x318>)
  405e0a:	2e00      	cmp	r6, #0
  405e0c:	d14d      	bne.n	405eaa <_dtoa_r+0x352>
  405e0e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  405e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405e16:	f7fe fea3 	bl	404b60 <__aeabi_ddiv>
  405e1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405e1e:	e06c      	b.n	405efa <_dtoa_r+0x3a2>
  405e20:	2301      	movs	r3, #1
  405e22:	9309      	str	r3, [sp, #36]	; 0x24
  405e24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405e26:	445b      	add	r3, fp
  405e28:	f103 0901 	add.w	r9, r3, #1
  405e2c:	9304      	str	r3, [sp, #16]
  405e2e:	464b      	mov	r3, r9
  405e30:	2b01      	cmp	r3, #1
  405e32:	bfb8      	it	lt
  405e34:	2301      	movlt	r3, #1
  405e36:	e7b0      	b.n	405d9a <_dtoa_r+0x242>
  405e38:	2300      	movs	r3, #0
  405e3a:	e7a8      	b.n	405d8e <_dtoa_r+0x236>
  405e3c:	2300      	movs	r3, #0
  405e3e:	e7f0      	b.n	405e22 <_dtoa_r+0x2ca>
  405e40:	636f4361 	.word	0x636f4361
  405e44:	3fd287a7 	.word	0x3fd287a7
  405e48:	8b60c8b3 	.word	0x8b60c8b3
  405e4c:	3fc68a28 	.word	0x3fc68a28
  405e50:	509f79fb 	.word	0x509f79fb
  405e54:	3fd34413 	.word	0x3fd34413
  405e58:	7ff00000 	.word	0x7ff00000
  405e5c:	00407f19 	.word	0x00407f19
  405e60:	00407f10 	.word	0x00407f10
  405e64:	00407eed 	.word	0x00407eed
  405e68:	3ff80000 	.word	0x3ff80000
  405e6c:	00407fa8 	.word	0x00407fa8
  405e70:	00407f80 	.word	0x00407f80
  405e74:	2601      	movs	r6, #1
  405e76:	2300      	movs	r3, #0
  405e78:	931e      	str	r3, [sp, #120]	; 0x78
  405e7a:	9609      	str	r6, [sp, #36]	; 0x24
  405e7c:	f04f 33ff 	mov.w	r3, #4294967295
  405e80:	9304      	str	r3, [sp, #16]
  405e82:	4699      	mov	r9, r3
  405e84:	2200      	movs	r2, #0
  405e86:	2312      	movs	r3, #18
  405e88:	921f      	str	r2, [sp, #124]	; 0x7c
  405e8a:	e786      	b.n	405d9a <_dtoa_r+0x242>
  405e8c:	2301      	movs	r3, #1
  405e8e:	9309      	str	r3, [sp, #36]	; 0x24
  405e90:	e7f4      	b.n	405e7c <_dtoa_r+0x324>
  405e92:	2301      	movs	r3, #1
  405e94:	9304      	str	r3, [sp, #16]
  405e96:	4699      	mov	r9, r3
  405e98:	461a      	mov	r2, r3
  405e9a:	e7f5      	b.n	405e88 <_dtoa_r+0x330>
  405e9c:	686a      	ldr	r2, [r5, #4]
  405e9e:	3201      	adds	r2, #1
  405ea0:	606a      	str	r2, [r5, #4]
  405ea2:	0049      	lsls	r1, r1, #1
  405ea4:	e77d      	b.n	405da2 <_dtoa_r+0x24a>
  405ea6:	2502      	movs	r5, #2
  405ea8:	e7ae      	b.n	405e08 <_dtoa_r+0x2b0>
  405eaa:	07f1      	lsls	r1, r6, #31
  405eac:	d508      	bpl.n	405ec0 <_dtoa_r+0x368>
  405eae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  405eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
  405eb6:	f7fe fd29 	bl	40490c <__aeabi_dmul>
  405eba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  405ebe:	3501      	adds	r5, #1
  405ec0:	1076      	asrs	r6, r6, #1
  405ec2:	3708      	adds	r7, #8
  405ec4:	e7a1      	b.n	405e0a <_dtoa_r+0x2b2>
  405ec6:	f000 80a5 	beq.w	406014 <_dtoa_r+0x4bc>
  405eca:	f1cb 0600 	rsb	r6, fp, #0
  405ece:	4ba3      	ldr	r3, [pc, #652]	; (40615c <_dtoa_r+0x604>)
  405ed0:	4fa3      	ldr	r7, [pc, #652]	; (406160 <_dtoa_r+0x608>)
  405ed2:	f006 020f 	and.w	r2, r6, #15
  405ed6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405eda:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ede:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  405ee2:	f7fe fd13 	bl	40490c <__aeabi_dmul>
  405ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405eea:	1136      	asrs	r6, r6, #4
  405eec:	2300      	movs	r3, #0
  405eee:	2502      	movs	r5, #2
  405ef0:	2e00      	cmp	r6, #0
  405ef2:	f040 8084 	bne.w	405ffe <_dtoa_r+0x4a6>
  405ef6:	2b00      	cmp	r3, #0
  405ef8:	d18f      	bne.n	405e1a <_dtoa_r+0x2c2>
  405efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405efc:	2b00      	cmp	r3, #0
  405efe:	f000 808b 	beq.w	406018 <_dtoa_r+0x4c0>
  405f02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405f06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  405f0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  405f0e:	2200      	movs	r2, #0
  405f10:	4b94      	ldr	r3, [pc, #592]	; (406164 <_dtoa_r+0x60c>)
  405f12:	f7fe ff6d 	bl	404df0 <__aeabi_dcmplt>
  405f16:	2800      	cmp	r0, #0
  405f18:	d07e      	beq.n	406018 <_dtoa_r+0x4c0>
  405f1a:	f1b9 0f00 	cmp.w	r9, #0
  405f1e:	d07b      	beq.n	406018 <_dtoa_r+0x4c0>
  405f20:	9b04      	ldr	r3, [sp, #16]
  405f22:	2b00      	cmp	r3, #0
  405f24:	dd37      	ble.n	405f96 <_dtoa_r+0x43e>
  405f26:	2200      	movs	r2, #0
  405f28:	4b8f      	ldr	r3, [pc, #572]	; (406168 <_dtoa_r+0x610>)
  405f2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  405f2e:	f7fe fced 	bl	40490c <__aeabi_dmul>
  405f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405f36:	9e04      	ldr	r6, [sp, #16]
  405f38:	f10b 37ff 	add.w	r7, fp, #4294967295
  405f3c:	3501      	adds	r5, #1
  405f3e:	4628      	mov	r0, r5
  405f40:	f7fe fc7e 	bl	404840 <__aeabi_i2d>
  405f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405f48:	f7fe fce0 	bl	40490c <__aeabi_dmul>
  405f4c:	4b87      	ldr	r3, [pc, #540]	; (40616c <_dtoa_r+0x614>)
  405f4e:	2200      	movs	r2, #0
  405f50:	f7fe fb2a 	bl	4045a8 <__adddf3>
  405f54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  405f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405f5a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  405f5e:	950b      	str	r5, [sp, #44]	; 0x2c
  405f60:	2e00      	cmp	r6, #0
  405f62:	d15c      	bne.n	40601e <_dtoa_r+0x4c6>
  405f64:	2200      	movs	r2, #0
  405f66:	4b82      	ldr	r3, [pc, #520]	; (406170 <_dtoa_r+0x618>)
  405f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405f6c:	f7fe fb1a 	bl	4045a4 <__aeabi_dsub>
  405f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405f72:	462b      	mov	r3, r5
  405f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405f78:	f7fe ff58 	bl	404e2c <__aeabi_dcmpgt>
  405f7c:	2800      	cmp	r0, #0
  405f7e:	f040 82f7 	bne.w	406570 <_dtoa_r+0xa18>
  405f82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405f84:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  405f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405f8c:	f7fe ff30 	bl	404df0 <__aeabi_dcmplt>
  405f90:	2800      	cmp	r0, #0
  405f92:	f040 82eb 	bne.w	40656c <_dtoa_r+0xa14>
  405f96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  405f9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  405f9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405fa0:	2b00      	cmp	r3, #0
  405fa2:	f2c0 8151 	blt.w	406248 <_dtoa_r+0x6f0>
  405fa6:	f1bb 0f0e 	cmp.w	fp, #14
  405faa:	f300 814d 	bgt.w	406248 <_dtoa_r+0x6f0>
  405fae:	4b6b      	ldr	r3, [pc, #428]	; (40615c <_dtoa_r+0x604>)
  405fb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  405fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
  405fb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  405fbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405fbe:	2b00      	cmp	r3, #0
  405fc0:	f280 80da 	bge.w	406178 <_dtoa_r+0x620>
  405fc4:	f1b9 0f00 	cmp.w	r9, #0
  405fc8:	f300 80d6 	bgt.w	406178 <_dtoa_r+0x620>
  405fcc:	f040 82cd 	bne.w	40656a <_dtoa_r+0xa12>
  405fd0:	2200      	movs	r2, #0
  405fd2:	4b67      	ldr	r3, [pc, #412]	; (406170 <_dtoa_r+0x618>)
  405fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405fd8:	f7fe fc98 	bl	40490c <__aeabi_dmul>
  405fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405fe0:	f7fe ff1a 	bl	404e18 <__aeabi_dcmpge>
  405fe4:	464e      	mov	r6, r9
  405fe6:	464f      	mov	r7, r9
  405fe8:	2800      	cmp	r0, #0
  405fea:	f040 82a4 	bne.w	406536 <_dtoa_r+0x9de>
  405fee:	9b06      	ldr	r3, [sp, #24]
  405ff0:	9a06      	ldr	r2, [sp, #24]
  405ff2:	1c5d      	adds	r5, r3, #1
  405ff4:	2331      	movs	r3, #49	; 0x31
  405ff6:	7013      	strb	r3, [r2, #0]
  405ff8:	f10b 0b01 	add.w	fp, fp, #1
  405ffc:	e29f      	b.n	40653e <_dtoa_r+0x9e6>
  405ffe:	07f2      	lsls	r2, r6, #31
  406000:	d505      	bpl.n	40600e <_dtoa_r+0x4b6>
  406002:	e9d7 2300 	ldrd	r2, r3, [r7]
  406006:	f7fe fc81 	bl	40490c <__aeabi_dmul>
  40600a:	3501      	adds	r5, #1
  40600c:	2301      	movs	r3, #1
  40600e:	1076      	asrs	r6, r6, #1
  406010:	3708      	adds	r7, #8
  406012:	e76d      	b.n	405ef0 <_dtoa_r+0x398>
  406014:	2502      	movs	r5, #2
  406016:	e770      	b.n	405efa <_dtoa_r+0x3a2>
  406018:	465f      	mov	r7, fp
  40601a:	464e      	mov	r6, r9
  40601c:	e78f      	b.n	405f3e <_dtoa_r+0x3e6>
  40601e:	9a06      	ldr	r2, [sp, #24]
  406020:	4b4e      	ldr	r3, [pc, #312]	; (40615c <_dtoa_r+0x604>)
  406022:	4432      	add	r2, r6
  406024:	9211      	str	r2, [sp, #68]	; 0x44
  406026:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406028:	1e71      	subs	r1, r6, #1
  40602a:	2a00      	cmp	r2, #0
  40602c:	d048      	beq.n	4060c0 <_dtoa_r+0x568>
  40602e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  406032:	e9d3 2300 	ldrd	r2, r3, [r3]
  406036:	2000      	movs	r0, #0
  406038:	494e      	ldr	r1, [pc, #312]	; (406174 <_dtoa_r+0x61c>)
  40603a:	f7fe fd91 	bl	404b60 <__aeabi_ddiv>
  40603e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  406042:	f7fe faaf 	bl	4045a4 <__aeabi_dsub>
  406046:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40604a:	9d06      	ldr	r5, [sp, #24]
  40604c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406050:	f7fe ff0c 	bl	404e6c <__aeabi_d2iz>
  406054:	4606      	mov	r6, r0
  406056:	f7fe fbf3 	bl	404840 <__aeabi_i2d>
  40605a:	4602      	mov	r2, r0
  40605c:	460b      	mov	r3, r1
  40605e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406062:	f7fe fa9f 	bl	4045a4 <__aeabi_dsub>
  406066:	3630      	adds	r6, #48	; 0x30
  406068:	f805 6b01 	strb.w	r6, [r5], #1
  40606c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  406070:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406074:	f7fe febc 	bl	404df0 <__aeabi_dcmplt>
  406078:	2800      	cmp	r0, #0
  40607a:	d165      	bne.n	406148 <_dtoa_r+0x5f0>
  40607c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406080:	2000      	movs	r0, #0
  406082:	4938      	ldr	r1, [pc, #224]	; (406164 <_dtoa_r+0x60c>)
  406084:	f7fe fa8e 	bl	4045a4 <__aeabi_dsub>
  406088:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40608c:	f7fe feb0 	bl	404df0 <__aeabi_dcmplt>
  406090:	2800      	cmp	r0, #0
  406092:	f040 80b9 	bne.w	406208 <_dtoa_r+0x6b0>
  406096:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406098:	429d      	cmp	r5, r3
  40609a:	f43f af7c 	beq.w	405f96 <_dtoa_r+0x43e>
  40609e:	2200      	movs	r2, #0
  4060a0:	4b31      	ldr	r3, [pc, #196]	; (406168 <_dtoa_r+0x610>)
  4060a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4060a6:	f7fe fc31 	bl	40490c <__aeabi_dmul>
  4060aa:	2200      	movs	r2, #0
  4060ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4060b0:	4b2d      	ldr	r3, [pc, #180]	; (406168 <_dtoa_r+0x610>)
  4060b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4060b6:	f7fe fc29 	bl	40490c <__aeabi_dmul>
  4060ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4060be:	e7c5      	b.n	40604c <_dtoa_r+0x4f4>
  4060c0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4060c4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4060c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4060cc:	f7fe fc1e 	bl	40490c <__aeabi_dmul>
  4060d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4060d4:	9d06      	ldr	r5, [sp, #24]
  4060d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4060da:	f7fe fec7 	bl	404e6c <__aeabi_d2iz>
  4060de:	4606      	mov	r6, r0
  4060e0:	f7fe fbae 	bl	404840 <__aeabi_i2d>
  4060e4:	3630      	adds	r6, #48	; 0x30
  4060e6:	4602      	mov	r2, r0
  4060e8:	460b      	mov	r3, r1
  4060ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4060ee:	f7fe fa59 	bl	4045a4 <__aeabi_dsub>
  4060f2:	f805 6b01 	strb.w	r6, [r5], #1
  4060f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4060f8:	42ab      	cmp	r3, r5
  4060fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4060fe:	f04f 0200 	mov.w	r2, #0
  406102:	d125      	bne.n	406150 <_dtoa_r+0x5f8>
  406104:	4b1b      	ldr	r3, [pc, #108]	; (406174 <_dtoa_r+0x61c>)
  406106:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40610a:	f7fe fa4d 	bl	4045a8 <__adddf3>
  40610e:	4602      	mov	r2, r0
  406110:	460b      	mov	r3, r1
  406112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406116:	f7fe fe89 	bl	404e2c <__aeabi_dcmpgt>
  40611a:	2800      	cmp	r0, #0
  40611c:	d174      	bne.n	406208 <_dtoa_r+0x6b0>
  40611e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  406122:	2000      	movs	r0, #0
  406124:	4913      	ldr	r1, [pc, #76]	; (406174 <_dtoa_r+0x61c>)
  406126:	f7fe fa3d 	bl	4045a4 <__aeabi_dsub>
  40612a:	4602      	mov	r2, r0
  40612c:	460b      	mov	r3, r1
  40612e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406132:	f7fe fe5d 	bl	404df0 <__aeabi_dcmplt>
  406136:	2800      	cmp	r0, #0
  406138:	f43f af2d 	beq.w	405f96 <_dtoa_r+0x43e>
  40613c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406140:	2b30      	cmp	r3, #48	; 0x30
  406142:	f105 32ff 	add.w	r2, r5, #4294967295
  406146:	d001      	beq.n	40614c <_dtoa_r+0x5f4>
  406148:	46bb      	mov	fp, r7
  40614a:	e04c      	b.n	4061e6 <_dtoa_r+0x68e>
  40614c:	4615      	mov	r5, r2
  40614e:	e7f5      	b.n	40613c <_dtoa_r+0x5e4>
  406150:	4b05      	ldr	r3, [pc, #20]	; (406168 <_dtoa_r+0x610>)
  406152:	f7fe fbdb 	bl	40490c <__aeabi_dmul>
  406156:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40615a:	e7bc      	b.n	4060d6 <_dtoa_r+0x57e>
  40615c:	00407fa8 	.word	0x00407fa8
  406160:	00407f80 	.word	0x00407f80
  406164:	3ff00000 	.word	0x3ff00000
  406168:	40240000 	.word	0x40240000
  40616c:	401c0000 	.word	0x401c0000
  406170:	40140000 	.word	0x40140000
  406174:	3fe00000 	.word	0x3fe00000
  406178:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40617c:	9d06      	ldr	r5, [sp, #24]
  40617e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  406182:	4630      	mov	r0, r6
  406184:	4639      	mov	r1, r7
  406186:	f7fe fceb 	bl	404b60 <__aeabi_ddiv>
  40618a:	f7fe fe6f 	bl	404e6c <__aeabi_d2iz>
  40618e:	4680      	mov	r8, r0
  406190:	f7fe fb56 	bl	404840 <__aeabi_i2d>
  406194:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  406198:	f7fe fbb8 	bl	40490c <__aeabi_dmul>
  40619c:	4602      	mov	r2, r0
  40619e:	460b      	mov	r3, r1
  4061a0:	4630      	mov	r0, r6
  4061a2:	4639      	mov	r1, r7
  4061a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
  4061a8:	f7fe f9fc 	bl	4045a4 <__aeabi_dsub>
  4061ac:	f805 6b01 	strb.w	r6, [r5], #1
  4061b0:	9e06      	ldr	r6, [sp, #24]
  4061b2:	1bae      	subs	r6, r5, r6
  4061b4:	45b1      	cmp	r9, r6
  4061b6:	4602      	mov	r2, r0
  4061b8:	460b      	mov	r3, r1
  4061ba:	d138      	bne.n	40622e <_dtoa_r+0x6d6>
  4061bc:	f7fe f9f4 	bl	4045a8 <__adddf3>
  4061c0:	4606      	mov	r6, r0
  4061c2:	460f      	mov	r7, r1
  4061c4:	4602      	mov	r2, r0
  4061c6:	460b      	mov	r3, r1
  4061c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4061cc:	f7fe fe10 	bl	404df0 <__aeabi_dcmplt>
  4061d0:	b9c8      	cbnz	r0, 406206 <_dtoa_r+0x6ae>
  4061d2:	4632      	mov	r2, r6
  4061d4:	463b      	mov	r3, r7
  4061d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4061da:	f7fe fdff 	bl	404ddc <__aeabi_dcmpeq>
  4061de:	b110      	cbz	r0, 4061e6 <_dtoa_r+0x68e>
  4061e0:	f018 0f01 	tst.w	r8, #1
  4061e4:	d10f      	bne.n	406206 <_dtoa_r+0x6ae>
  4061e6:	4651      	mov	r1, sl
  4061e8:	4620      	mov	r0, r4
  4061ea:	f000 fd05 	bl	406bf8 <_Bfree>
  4061ee:	2300      	movs	r3, #0
  4061f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4061f2:	702b      	strb	r3, [r5, #0]
  4061f4:	f10b 0301 	add.w	r3, fp, #1
  4061f8:	6013      	str	r3, [r2, #0]
  4061fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4061fc:	2b00      	cmp	r3, #0
  4061fe:	f43f acf0 	beq.w	405be2 <_dtoa_r+0x8a>
  406202:	601d      	str	r5, [r3, #0]
  406204:	e4ed      	b.n	405be2 <_dtoa_r+0x8a>
  406206:	465f      	mov	r7, fp
  406208:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40620c:	2a39      	cmp	r2, #57	; 0x39
  40620e:	f105 33ff 	add.w	r3, r5, #4294967295
  406212:	d106      	bne.n	406222 <_dtoa_r+0x6ca>
  406214:	9a06      	ldr	r2, [sp, #24]
  406216:	429a      	cmp	r2, r3
  406218:	d107      	bne.n	40622a <_dtoa_r+0x6d2>
  40621a:	2330      	movs	r3, #48	; 0x30
  40621c:	7013      	strb	r3, [r2, #0]
  40621e:	3701      	adds	r7, #1
  406220:	4613      	mov	r3, r2
  406222:	781a      	ldrb	r2, [r3, #0]
  406224:	3201      	adds	r2, #1
  406226:	701a      	strb	r2, [r3, #0]
  406228:	e78e      	b.n	406148 <_dtoa_r+0x5f0>
  40622a:	461d      	mov	r5, r3
  40622c:	e7ec      	b.n	406208 <_dtoa_r+0x6b0>
  40622e:	2200      	movs	r2, #0
  406230:	4bb4      	ldr	r3, [pc, #720]	; (406504 <_dtoa_r+0x9ac>)
  406232:	f7fe fb6b 	bl	40490c <__aeabi_dmul>
  406236:	2200      	movs	r2, #0
  406238:	2300      	movs	r3, #0
  40623a:	4606      	mov	r6, r0
  40623c:	460f      	mov	r7, r1
  40623e:	f7fe fdcd 	bl	404ddc <__aeabi_dcmpeq>
  406242:	2800      	cmp	r0, #0
  406244:	d09b      	beq.n	40617e <_dtoa_r+0x626>
  406246:	e7ce      	b.n	4061e6 <_dtoa_r+0x68e>
  406248:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40624a:	2a00      	cmp	r2, #0
  40624c:	f000 8129 	beq.w	4064a2 <_dtoa_r+0x94a>
  406250:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  406252:	2a01      	cmp	r2, #1
  406254:	f300 810e 	bgt.w	406474 <_dtoa_r+0x91c>
  406258:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40625a:	2a00      	cmp	r2, #0
  40625c:	f000 8106 	beq.w	40646c <_dtoa_r+0x914>
  406260:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406264:	9e08      	ldr	r6, [sp, #32]
  406266:	4645      	mov	r5, r8
  406268:	9a07      	ldr	r2, [sp, #28]
  40626a:	2101      	movs	r1, #1
  40626c:	441a      	add	r2, r3
  40626e:	4620      	mov	r0, r4
  406270:	4498      	add	r8, r3
  406272:	9207      	str	r2, [sp, #28]
  406274:	f000 fd60 	bl	406d38 <__i2b>
  406278:	4607      	mov	r7, r0
  40627a:	2d00      	cmp	r5, #0
  40627c:	dd0b      	ble.n	406296 <_dtoa_r+0x73e>
  40627e:	9b07      	ldr	r3, [sp, #28]
  406280:	2b00      	cmp	r3, #0
  406282:	dd08      	ble.n	406296 <_dtoa_r+0x73e>
  406284:	42ab      	cmp	r3, r5
  406286:	9a07      	ldr	r2, [sp, #28]
  406288:	bfa8      	it	ge
  40628a:	462b      	movge	r3, r5
  40628c:	eba8 0803 	sub.w	r8, r8, r3
  406290:	1aed      	subs	r5, r5, r3
  406292:	1ad3      	subs	r3, r2, r3
  406294:	9307      	str	r3, [sp, #28]
  406296:	9b08      	ldr	r3, [sp, #32]
  406298:	b1fb      	cbz	r3, 4062da <_dtoa_r+0x782>
  40629a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40629c:	2b00      	cmp	r3, #0
  40629e:	f000 8104 	beq.w	4064aa <_dtoa_r+0x952>
  4062a2:	2e00      	cmp	r6, #0
  4062a4:	dd11      	ble.n	4062ca <_dtoa_r+0x772>
  4062a6:	4639      	mov	r1, r7
  4062a8:	4632      	mov	r2, r6
  4062aa:	4620      	mov	r0, r4
  4062ac:	f000 fdda 	bl	406e64 <__pow5mult>
  4062b0:	4652      	mov	r2, sl
  4062b2:	4601      	mov	r1, r0
  4062b4:	4607      	mov	r7, r0
  4062b6:	4620      	mov	r0, r4
  4062b8:	f000 fd47 	bl	406d4a <__multiply>
  4062bc:	4651      	mov	r1, sl
  4062be:	900a      	str	r0, [sp, #40]	; 0x28
  4062c0:	4620      	mov	r0, r4
  4062c2:	f000 fc99 	bl	406bf8 <_Bfree>
  4062c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4062c8:	469a      	mov	sl, r3
  4062ca:	9b08      	ldr	r3, [sp, #32]
  4062cc:	1b9a      	subs	r2, r3, r6
  4062ce:	d004      	beq.n	4062da <_dtoa_r+0x782>
  4062d0:	4651      	mov	r1, sl
  4062d2:	4620      	mov	r0, r4
  4062d4:	f000 fdc6 	bl	406e64 <__pow5mult>
  4062d8:	4682      	mov	sl, r0
  4062da:	2101      	movs	r1, #1
  4062dc:	4620      	mov	r0, r4
  4062de:	f000 fd2b 	bl	406d38 <__i2b>
  4062e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4062e4:	2b00      	cmp	r3, #0
  4062e6:	4606      	mov	r6, r0
  4062e8:	f340 80e1 	ble.w	4064ae <_dtoa_r+0x956>
  4062ec:	461a      	mov	r2, r3
  4062ee:	4601      	mov	r1, r0
  4062f0:	4620      	mov	r0, r4
  4062f2:	f000 fdb7 	bl	406e64 <__pow5mult>
  4062f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4062f8:	2b01      	cmp	r3, #1
  4062fa:	4606      	mov	r6, r0
  4062fc:	f340 80da 	ble.w	4064b4 <_dtoa_r+0x95c>
  406300:	2300      	movs	r3, #0
  406302:	9308      	str	r3, [sp, #32]
  406304:	6933      	ldr	r3, [r6, #16]
  406306:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  40630a:	6918      	ldr	r0, [r3, #16]
  40630c:	f000 fcc6 	bl	406c9c <__hi0bits>
  406310:	f1c0 0020 	rsb	r0, r0, #32
  406314:	9b07      	ldr	r3, [sp, #28]
  406316:	4418      	add	r0, r3
  406318:	f010 001f 	ands.w	r0, r0, #31
  40631c:	f000 80f0 	beq.w	406500 <_dtoa_r+0x9a8>
  406320:	f1c0 0320 	rsb	r3, r0, #32
  406324:	2b04      	cmp	r3, #4
  406326:	f340 80e2 	ble.w	4064ee <_dtoa_r+0x996>
  40632a:	9b07      	ldr	r3, [sp, #28]
  40632c:	f1c0 001c 	rsb	r0, r0, #28
  406330:	4480      	add	r8, r0
  406332:	4405      	add	r5, r0
  406334:	4403      	add	r3, r0
  406336:	9307      	str	r3, [sp, #28]
  406338:	f1b8 0f00 	cmp.w	r8, #0
  40633c:	dd05      	ble.n	40634a <_dtoa_r+0x7f2>
  40633e:	4651      	mov	r1, sl
  406340:	4642      	mov	r2, r8
  406342:	4620      	mov	r0, r4
  406344:	f000 fddc 	bl	406f00 <__lshift>
  406348:	4682      	mov	sl, r0
  40634a:	9b07      	ldr	r3, [sp, #28]
  40634c:	2b00      	cmp	r3, #0
  40634e:	dd05      	ble.n	40635c <_dtoa_r+0x804>
  406350:	4631      	mov	r1, r6
  406352:	461a      	mov	r2, r3
  406354:	4620      	mov	r0, r4
  406356:	f000 fdd3 	bl	406f00 <__lshift>
  40635a:	4606      	mov	r6, r0
  40635c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40635e:	2b00      	cmp	r3, #0
  406360:	f000 80d2 	beq.w	406508 <_dtoa_r+0x9b0>
  406364:	4631      	mov	r1, r6
  406366:	4650      	mov	r0, sl
  406368:	f000 fe1b 	bl	406fa2 <__mcmp>
  40636c:	2800      	cmp	r0, #0
  40636e:	f280 80cb 	bge.w	406508 <_dtoa_r+0x9b0>
  406372:	2300      	movs	r3, #0
  406374:	4651      	mov	r1, sl
  406376:	220a      	movs	r2, #10
  406378:	4620      	mov	r0, r4
  40637a:	f000 fc54 	bl	406c26 <__multadd>
  40637e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406380:	f10b 3bff 	add.w	fp, fp, #4294967295
  406384:	4682      	mov	sl, r0
  406386:	2b00      	cmp	r3, #0
  406388:	f000 81aa 	beq.w	4066e0 <_dtoa_r+0xb88>
  40638c:	2300      	movs	r3, #0
  40638e:	4639      	mov	r1, r7
  406390:	220a      	movs	r2, #10
  406392:	4620      	mov	r0, r4
  406394:	f000 fc47 	bl	406c26 <__multadd>
  406398:	9b04      	ldr	r3, [sp, #16]
  40639a:	2b00      	cmp	r3, #0
  40639c:	4607      	mov	r7, r0
  40639e:	dc03      	bgt.n	4063a8 <_dtoa_r+0x850>
  4063a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4063a2:	2b02      	cmp	r3, #2
  4063a4:	f300 80b8 	bgt.w	406518 <_dtoa_r+0x9c0>
  4063a8:	2d00      	cmp	r5, #0
  4063aa:	dd05      	ble.n	4063b8 <_dtoa_r+0x860>
  4063ac:	4639      	mov	r1, r7
  4063ae:	462a      	mov	r2, r5
  4063b0:	4620      	mov	r0, r4
  4063b2:	f000 fda5 	bl	406f00 <__lshift>
  4063b6:	4607      	mov	r7, r0
  4063b8:	9b08      	ldr	r3, [sp, #32]
  4063ba:	2b00      	cmp	r3, #0
  4063bc:	f000 8110 	beq.w	4065e0 <_dtoa_r+0xa88>
  4063c0:	6879      	ldr	r1, [r7, #4]
  4063c2:	4620      	mov	r0, r4
  4063c4:	f000 fbe4 	bl	406b90 <_Balloc>
  4063c8:	693a      	ldr	r2, [r7, #16]
  4063ca:	3202      	adds	r2, #2
  4063cc:	4605      	mov	r5, r0
  4063ce:	0092      	lsls	r2, r2, #2
  4063d0:	f107 010c 	add.w	r1, r7, #12
  4063d4:	300c      	adds	r0, #12
  4063d6:	f7fe fdeb 	bl	404fb0 <memcpy>
  4063da:	2201      	movs	r2, #1
  4063dc:	4629      	mov	r1, r5
  4063de:	4620      	mov	r0, r4
  4063e0:	f000 fd8e 	bl	406f00 <__lshift>
  4063e4:	9b02      	ldr	r3, [sp, #8]
  4063e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4063ea:	9707      	str	r7, [sp, #28]
  4063ec:	f003 0301 	and.w	r3, r3, #1
  4063f0:	4607      	mov	r7, r0
  4063f2:	9308      	str	r3, [sp, #32]
  4063f4:	4631      	mov	r1, r6
  4063f6:	4650      	mov	r0, sl
  4063f8:	f7ff fb22 	bl	405a40 <quorem>
  4063fc:	9907      	ldr	r1, [sp, #28]
  4063fe:	4605      	mov	r5, r0
  406400:	f100 0930 	add.w	r9, r0, #48	; 0x30
  406404:	4650      	mov	r0, sl
  406406:	f000 fdcc 	bl	406fa2 <__mcmp>
  40640a:	463a      	mov	r2, r7
  40640c:	9002      	str	r0, [sp, #8]
  40640e:	4631      	mov	r1, r6
  406410:	4620      	mov	r0, r4
  406412:	f000 fde0 	bl	406fd6 <__mdiff>
  406416:	68c3      	ldr	r3, [r0, #12]
  406418:	4602      	mov	r2, r0
  40641a:	2b00      	cmp	r3, #0
  40641c:	f040 80e2 	bne.w	4065e4 <_dtoa_r+0xa8c>
  406420:	4601      	mov	r1, r0
  406422:	9009      	str	r0, [sp, #36]	; 0x24
  406424:	4650      	mov	r0, sl
  406426:	f000 fdbc 	bl	406fa2 <__mcmp>
  40642a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40642c:	4603      	mov	r3, r0
  40642e:	4611      	mov	r1, r2
  406430:	4620      	mov	r0, r4
  406432:	9309      	str	r3, [sp, #36]	; 0x24
  406434:	f000 fbe0 	bl	406bf8 <_Bfree>
  406438:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40643a:	2b00      	cmp	r3, #0
  40643c:	f040 80d4 	bne.w	4065e8 <_dtoa_r+0xa90>
  406440:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  406442:	2a00      	cmp	r2, #0
  406444:	f040 80d0 	bne.w	4065e8 <_dtoa_r+0xa90>
  406448:	9a08      	ldr	r2, [sp, #32]
  40644a:	2a00      	cmp	r2, #0
  40644c:	f040 80cc 	bne.w	4065e8 <_dtoa_r+0xa90>
  406450:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  406454:	f000 80e8 	beq.w	406628 <_dtoa_r+0xad0>
  406458:	9b02      	ldr	r3, [sp, #8]
  40645a:	2b00      	cmp	r3, #0
  40645c:	dd01      	ble.n	406462 <_dtoa_r+0x90a>
  40645e:	f105 0931 	add.w	r9, r5, #49	; 0x31
  406462:	f108 0501 	add.w	r5, r8, #1
  406466:	f888 9000 	strb.w	r9, [r8]
  40646a:	e06a      	b.n	406542 <_dtoa_r+0x9ea>
  40646c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40646e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406472:	e6f7      	b.n	406264 <_dtoa_r+0x70c>
  406474:	9b08      	ldr	r3, [sp, #32]
  406476:	f109 36ff 	add.w	r6, r9, #4294967295
  40647a:	42b3      	cmp	r3, r6
  40647c:	bfbf      	itttt	lt
  40647e:	9b08      	ldrlt	r3, [sp, #32]
  406480:	9608      	strlt	r6, [sp, #32]
  406482:	1af2      	sublt	r2, r6, r3
  406484:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  406486:	bfb7      	itett	lt
  406488:	189b      	addlt	r3, r3, r2
  40648a:	1b9e      	subge	r6, r3, r6
  40648c:	930c      	strlt	r3, [sp, #48]	; 0x30
  40648e:	2600      	movlt	r6, #0
  406490:	f1b9 0f00 	cmp.w	r9, #0
  406494:	bfb9      	ittee	lt
  406496:	eba8 0509 	sublt.w	r5, r8, r9
  40649a:	2300      	movlt	r3, #0
  40649c:	4645      	movge	r5, r8
  40649e:	464b      	movge	r3, r9
  4064a0:	e6e2      	b.n	406268 <_dtoa_r+0x710>
  4064a2:	9e08      	ldr	r6, [sp, #32]
  4064a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4064a6:	4645      	mov	r5, r8
  4064a8:	e6e7      	b.n	40627a <_dtoa_r+0x722>
  4064aa:	9a08      	ldr	r2, [sp, #32]
  4064ac:	e710      	b.n	4062d0 <_dtoa_r+0x778>
  4064ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4064b0:	2b01      	cmp	r3, #1
  4064b2:	dc18      	bgt.n	4064e6 <_dtoa_r+0x98e>
  4064b4:	9b02      	ldr	r3, [sp, #8]
  4064b6:	b9b3      	cbnz	r3, 4064e6 <_dtoa_r+0x98e>
  4064b8:	9b03      	ldr	r3, [sp, #12]
  4064ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4064be:	b9a3      	cbnz	r3, 4064ea <_dtoa_r+0x992>
  4064c0:	9b03      	ldr	r3, [sp, #12]
  4064c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  4064c6:	0d1b      	lsrs	r3, r3, #20
  4064c8:	051b      	lsls	r3, r3, #20
  4064ca:	b12b      	cbz	r3, 4064d8 <_dtoa_r+0x980>
  4064cc:	9b07      	ldr	r3, [sp, #28]
  4064ce:	3301      	adds	r3, #1
  4064d0:	9307      	str	r3, [sp, #28]
  4064d2:	f108 0801 	add.w	r8, r8, #1
  4064d6:	2301      	movs	r3, #1
  4064d8:	9308      	str	r3, [sp, #32]
  4064da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4064dc:	2b00      	cmp	r3, #0
  4064de:	f47f af11 	bne.w	406304 <_dtoa_r+0x7ac>
  4064e2:	2001      	movs	r0, #1
  4064e4:	e716      	b.n	406314 <_dtoa_r+0x7bc>
  4064e6:	2300      	movs	r3, #0
  4064e8:	e7f6      	b.n	4064d8 <_dtoa_r+0x980>
  4064ea:	9b02      	ldr	r3, [sp, #8]
  4064ec:	e7f4      	b.n	4064d8 <_dtoa_r+0x980>
  4064ee:	f43f af23 	beq.w	406338 <_dtoa_r+0x7e0>
  4064f2:	9a07      	ldr	r2, [sp, #28]
  4064f4:	331c      	adds	r3, #28
  4064f6:	441a      	add	r2, r3
  4064f8:	4498      	add	r8, r3
  4064fa:	441d      	add	r5, r3
  4064fc:	4613      	mov	r3, r2
  4064fe:	e71a      	b.n	406336 <_dtoa_r+0x7de>
  406500:	4603      	mov	r3, r0
  406502:	e7f6      	b.n	4064f2 <_dtoa_r+0x99a>
  406504:	40240000 	.word	0x40240000
  406508:	f1b9 0f00 	cmp.w	r9, #0
  40650c:	dc33      	bgt.n	406576 <_dtoa_r+0xa1e>
  40650e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  406510:	2b02      	cmp	r3, #2
  406512:	dd30      	ble.n	406576 <_dtoa_r+0xa1e>
  406514:	f8cd 9010 	str.w	r9, [sp, #16]
  406518:	9b04      	ldr	r3, [sp, #16]
  40651a:	b963      	cbnz	r3, 406536 <_dtoa_r+0x9de>
  40651c:	4631      	mov	r1, r6
  40651e:	2205      	movs	r2, #5
  406520:	4620      	mov	r0, r4
  406522:	f000 fb80 	bl	406c26 <__multadd>
  406526:	4601      	mov	r1, r0
  406528:	4606      	mov	r6, r0
  40652a:	4650      	mov	r0, sl
  40652c:	f000 fd39 	bl	406fa2 <__mcmp>
  406530:	2800      	cmp	r0, #0
  406532:	f73f ad5c 	bgt.w	405fee <_dtoa_r+0x496>
  406536:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406538:	9d06      	ldr	r5, [sp, #24]
  40653a:	ea6f 0b03 	mvn.w	fp, r3
  40653e:	2300      	movs	r3, #0
  406540:	9307      	str	r3, [sp, #28]
  406542:	4631      	mov	r1, r6
  406544:	4620      	mov	r0, r4
  406546:	f000 fb57 	bl	406bf8 <_Bfree>
  40654a:	2f00      	cmp	r7, #0
  40654c:	f43f ae4b 	beq.w	4061e6 <_dtoa_r+0x68e>
  406550:	9b07      	ldr	r3, [sp, #28]
  406552:	b12b      	cbz	r3, 406560 <_dtoa_r+0xa08>
  406554:	42bb      	cmp	r3, r7
  406556:	d003      	beq.n	406560 <_dtoa_r+0xa08>
  406558:	4619      	mov	r1, r3
  40655a:	4620      	mov	r0, r4
  40655c:	f000 fb4c 	bl	406bf8 <_Bfree>
  406560:	4639      	mov	r1, r7
  406562:	4620      	mov	r0, r4
  406564:	f000 fb48 	bl	406bf8 <_Bfree>
  406568:	e63d      	b.n	4061e6 <_dtoa_r+0x68e>
  40656a:	2600      	movs	r6, #0
  40656c:	4637      	mov	r7, r6
  40656e:	e7e2      	b.n	406536 <_dtoa_r+0x9de>
  406570:	46bb      	mov	fp, r7
  406572:	4637      	mov	r7, r6
  406574:	e53b      	b.n	405fee <_dtoa_r+0x496>
  406576:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406578:	f8cd 9010 	str.w	r9, [sp, #16]
  40657c:	2b00      	cmp	r3, #0
  40657e:	f47f af13 	bne.w	4063a8 <_dtoa_r+0x850>
  406582:	9d06      	ldr	r5, [sp, #24]
  406584:	4631      	mov	r1, r6
  406586:	4650      	mov	r0, sl
  406588:	f7ff fa5a 	bl	405a40 <quorem>
  40658c:	f100 0930 	add.w	r9, r0, #48	; 0x30
  406590:	f805 9b01 	strb.w	r9, [r5], #1
  406594:	9b06      	ldr	r3, [sp, #24]
  406596:	9a04      	ldr	r2, [sp, #16]
  406598:	1aeb      	subs	r3, r5, r3
  40659a:	429a      	cmp	r2, r3
  40659c:	f300 8083 	bgt.w	4066a6 <_dtoa_r+0xb4e>
  4065a0:	9b06      	ldr	r3, [sp, #24]
  4065a2:	2a01      	cmp	r2, #1
  4065a4:	bfac      	ite	ge
  4065a6:	189b      	addge	r3, r3, r2
  4065a8:	3301      	addlt	r3, #1
  4065aa:	4698      	mov	r8, r3
  4065ac:	2300      	movs	r3, #0
  4065ae:	9307      	str	r3, [sp, #28]
  4065b0:	4651      	mov	r1, sl
  4065b2:	2201      	movs	r2, #1
  4065b4:	4620      	mov	r0, r4
  4065b6:	f000 fca3 	bl	406f00 <__lshift>
  4065ba:	4631      	mov	r1, r6
  4065bc:	4682      	mov	sl, r0
  4065be:	f000 fcf0 	bl	406fa2 <__mcmp>
  4065c2:	2800      	cmp	r0, #0
  4065c4:	dc35      	bgt.n	406632 <_dtoa_r+0xada>
  4065c6:	d102      	bne.n	4065ce <_dtoa_r+0xa76>
  4065c8:	f019 0f01 	tst.w	r9, #1
  4065cc:	d131      	bne.n	406632 <_dtoa_r+0xada>
  4065ce:	4645      	mov	r5, r8
  4065d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4065d4:	2b30      	cmp	r3, #48	; 0x30
  4065d6:	f105 32ff 	add.w	r2, r5, #4294967295
  4065da:	d1b2      	bne.n	406542 <_dtoa_r+0x9ea>
  4065dc:	4615      	mov	r5, r2
  4065de:	e7f7      	b.n	4065d0 <_dtoa_r+0xa78>
  4065e0:	4638      	mov	r0, r7
  4065e2:	e6ff      	b.n	4063e4 <_dtoa_r+0x88c>
  4065e4:	2301      	movs	r3, #1
  4065e6:	e722      	b.n	40642e <_dtoa_r+0x8d6>
  4065e8:	9a02      	ldr	r2, [sp, #8]
  4065ea:	2a00      	cmp	r2, #0
  4065ec:	db04      	blt.n	4065f8 <_dtoa_r+0xaa0>
  4065ee:	d129      	bne.n	406644 <_dtoa_r+0xaec>
  4065f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4065f2:	bb3a      	cbnz	r2, 406644 <_dtoa_r+0xaec>
  4065f4:	9a08      	ldr	r2, [sp, #32]
  4065f6:	bb2a      	cbnz	r2, 406644 <_dtoa_r+0xaec>
  4065f8:	2b00      	cmp	r3, #0
  4065fa:	f77f af32 	ble.w	406462 <_dtoa_r+0x90a>
  4065fe:	4651      	mov	r1, sl
  406600:	2201      	movs	r2, #1
  406602:	4620      	mov	r0, r4
  406604:	f000 fc7c 	bl	406f00 <__lshift>
  406608:	4631      	mov	r1, r6
  40660a:	4682      	mov	sl, r0
  40660c:	f000 fcc9 	bl	406fa2 <__mcmp>
  406610:	2800      	cmp	r0, #0
  406612:	dc05      	bgt.n	406620 <_dtoa_r+0xac8>
  406614:	f47f af25 	bne.w	406462 <_dtoa_r+0x90a>
  406618:	f019 0f01 	tst.w	r9, #1
  40661c:	f43f af21 	beq.w	406462 <_dtoa_r+0x90a>
  406620:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  406624:	f47f af1b 	bne.w	40645e <_dtoa_r+0x906>
  406628:	2339      	movs	r3, #57	; 0x39
  40662a:	f888 3000 	strb.w	r3, [r8]
  40662e:	f108 0801 	add.w	r8, r8, #1
  406632:	4645      	mov	r5, r8
  406634:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406638:	2b39      	cmp	r3, #57	; 0x39
  40663a:	f105 32ff 	add.w	r2, r5, #4294967295
  40663e:	d03a      	beq.n	4066b6 <_dtoa_r+0xb5e>
  406640:	3301      	adds	r3, #1
  406642:	e03f      	b.n	4066c4 <_dtoa_r+0xb6c>
  406644:	2b00      	cmp	r3, #0
  406646:	f108 0501 	add.w	r5, r8, #1
  40664a:	dd05      	ble.n	406658 <_dtoa_r+0xb00>
  40664c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  406650:	d0ea      	beq.n	406628 <_dtoa_r+0xad0>
  406652:	f109 0901 	add.w	r9, r9, #1
  406656:	e706      	b.n	406466 <_dtoa_r+0x90e>
  406658:	9b06      	ldr	r3, [sp, #24]
  40665a:	9a04      	ldr	r2, [sp, #16]
  40665c:	f805 9c01 	strb.w	r9, [r5, #-1]
  406660:	1aeb      	subs	r3, r5, r3
  406662:	4293      	cmp	r3, r2
  406664:	46a8      	mov	r8, r5
  406666:	d0a3      	beq.n	4065b0 <_dtoa_r+0xa58>
  406668:	4651      	mov	r1, sl
  40666a:	2300      	movs	r3, #0
  40666c:	220a      	movs	r2, #10
  40666e:	4620      	mov	r0, r4
  406670:	f000 fad9 	bl	406c26 <__multadd>
  406674:	9b07      	ldr	r3, [sp, #28]
  406676:	9907      	ldr	r1, [sp, #28]
  406678:	42bb      	cmp	r3, r7
  40667a:	4682      	mov	sl, r0
  40667c:	f04f 0300 	mov.w	r3, #0
  406680:	f04f 020a 	mov.w	r2, #10
  406684:	4620      	mov	r0, r4
  406686:	d104      	bne.n	406692 <_dtoa_r+0xb3a>
  406688:	f000 facd 	bl	406c26 <__multadd>
  40668c:	9007      	str	r0, [sp, #28]
  40668e:	4607      	mov	r7, r0
  406690:	e6b0      	b.n	4063f4 <_dtoa_r+0x89c>
  406692:	f000 fac8 	bl	406c26 <__multadd>
  406696:	2300      	movs	r3, #0
  406698:	9007      	str	r0, [sp, #28]
  40669a:	220a      	movs	r2, #10
  40669c:	4639      	mov	r1, r7
  40669e:	4620      	mov	r0, r4
  4066a0:	f000 fac1 	bl	406c26 <__multadd>
  4066a4:	e7f3      	b.n	40668e <_dtoa_r+0xb36>
  4066a6:	4651      	mov	r1, sl
  4066a8:	2300      	movs	r3, #0
  4066aa:	220a      	movs	r2, #10
  4066ac:	4620      	mov	r0, r4
  4066ae:	f000 faba 	bl	406c26 <__multadd>
  4066b2:	4682      	mov	sl, r0
  4066b4:	e766      	b.n	406584 <_dtoa_r+0xa2c>
  4066b6:	9b06      	ldr	r3, [sp, #24]
  4066b8:	4293      	cmp	r3, r2
  4066ba:	d105      	bne.n	4066c8 <_dtoa_r+0xb70>
  4066bc:	9a06      	ldr	r2, [sp, #24]
  4066be:	f10b 0b01 	add.w	fp, fp, #1
  4066c2:	2331      	movs	r3, #49	; 0x31
  4066c4:	7013      	strb	r3, [r2, #0]
  4066c6:	e73c      	b.n	406542 <_dtoa_r+0x9ea>
  4066c8:	4615      	mov	r5, r2
  4066ca:	e7b3      	b.n	406634 <_dtoa_r+0xadc>
  4066cc:	4b09      	ldr	r3, [pc, #36]	; (4066f4 <_dtoa_r+0xb9c>)
  4066ce:	f7ff baa5 	b.w	405c1c <_dtoa_r+0xc4>
  4066d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4066d4:	2b00      	cmp	r3, #0
  4066d6:	f47f aa7f 	bne.w	405bd8 <_dtoa_r+0x80>
  4066da:	4b07      	ldr	r3, [pc, #28]	; (4066f8 <_dtoa_r+0xba0>)
  4066dc:	f7ff ba9e 	b.w	405c1c <_dtoa_r+0xc4>
  4066e0:	9b04      	ldr	r3, [sp, #16]
  4066e2:	2b00      	cmp	r3, #0
  4066e4:	f73f af4d 	bgt.w	406582 <_dtoa_r+0xa2a>
  4066e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4066ea:	2b02      	cmp	r3, #2
  4066ec:	f77f af49 	ble.w	406582 <_dtoa_r+0xa2a>
  4066f0:	e712      	b.n	406518 <_dtoa_r+0x9c0>
  4066f2:	bf00      	nop
  4066f4:	00407eec 	.word	0x00407eec
  4066f8:	00407f10 	.word	0x00407f10

004066fc <__sflush_r>:
  4066fc:	898a      	ldrh	r2, [r1, #12]
  4066fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406702:	4605      	mov	r5, r0
  406704:	0710      	lsls	r0, r2, #28
  406706:	460c      	mov	r4, r1
  406708:	d45a      	bmi.n	4067c0 <__sflush_r+0xc4>
  40670a:	684b      	ldr	r3, [r1, #4]
  40670c:	2b00      	cmp	r3, #0
  40670e:	dc05      	bgt.n	40671c <__sflush_r+0x20>
  406710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  406712:	2b00      	cmp	r3, #0
  406714:	dc02      	bgt.n	40671c <__sflush_r+0x20>
  406716:	2000      	movs	r0, #0
  406718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40671c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40671e:	2e00      	cmp	r6, #0
  406720:	d0f9      	beq.n	406716 <__sflush_r+0x1a>
  406722:	2300      	movs	r3, #0
  406724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  406728:	682f      	ldr	r7, [r5, #0]
  40672a:	602b      	str	r3, [r5, #0]
  40672c:	d033      	beq.n	406796 <__sflush_r+0x9a>
  40672e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  406730:	89a3      	ldrh	r3, [r4, #12]
  406732:	075a      	lsls	r2, r3, #29
  406734:	d505      	bpl.n	406742 <__sflush_r+0x46>
  406736:	6863      	ldr	r3, [r4, #4]
  406738:	1ac0      	subs	r0, r0, r3
  40673a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40673c:	b10b      	cbz	r3, 406742 <__sflush_r+0x46>
  40673e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  406740:	1ac0      	subs	r0, r0, r3
  406742:	2300      	movs	r3, #0
  406744:	4602      	mov	r2, r0
  406746:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  406748:	6a21      	ldr	r1, [r4, #32]
  40674a:	4628      	mov	r0, r5
  40674c:	47b0      	blx	r6
  40674e:	1c43      	adds	r3, r0, #1
  406750:	89a3      	ldrh	r3, [r4, #12]
  406752:	d106      	bne.n	406762 <__sflush_r+0x66>
  406754:	6829      	ldr	r1, [r5, #0]
  406756:	291d      	cmp	r1, #29
  406758:	d84b      	bhi.n	4067f2 <__sflush_r+0xf6>
  40675a:	4a2b      	ldr	r2, [pc, #172]	; (406808 <__sflush_r+0x10c>)
  40675c:	40ca      	lsrs	r2, r1
  40675e:	07d6      	lsls	r6, r2, #31
  406760:	d547      	bpl.n	4067f2 <__sflush_r+0xf6>
  406762:	2200      	movs	r2, #0
  406764:	6062      	str	r2, [r4, #4]
  406766:	04d9      	lsls	r1, r3, #19
  406768:	6922      	ldr	r2, [r4, #16]
  40676a:	6022      	str	r2, [r4, #0]
  40676c:	d504      	bpl.n	406778 <__sflush_r+0x7c>
  40676e:	1c42      	adds	r2, r0, #1
  406770:	d101      	bne.n	406776 <__sflush_r+0x7a>
  406772:	682b      	ldr	r3, [r5, #0]
  406774:	b903      	cbnz	r3, 406778 <__sflush_r+0x7c>
  406776:	6560      	str	r0, [r4, #84]	; 0x54
  406778:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40677a:	602f      	str	r7, [r5, #0]
  40677c:	2900      	cmp	r1, #0
  40677e:	d0ca      	beq.n	406716 <__sflush_r+0x1a>
  406780:	f104 0344 	add.w	r3, r4, #68	; 0x44
  406784:	4299      	cmp	r1, r3
  406786:	d002      	beq.n	40678e <__sflush_r+0x92>
  406788:	4628      	mov	r0, r5
  40678a:	f000 fcdf 	bl	40714c <_free_r>
  40678e:	2000      	movs	r0, #0
  406790:	6360      	str	r0, [r4, #52]	; 0x34
  406792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406796:	6a21      	ldr	r1, [r4, #32]
  406798:	2301      	movs	r3, #1
  40679a:	4628      	mov	r0, r5
  40679c:	47b0      	blx	r6
  40679e:	1c41      	adds	r1, r0, #1
  4067a0:	d1c6      	bne.n	406730 <__sflush_r+0x34>
  4067a2:	682b      	ldr	r3, [r5, #0]
  4067a4:	2b00      	cmp	r3, #0
  4067a6:	d0c3      	beq.n	406730 <__sflush_r+0x34>
  4067a8:	2b1d      	cmp	r3, #29
  4067aa:	d001      	beq.n	4067b0 <__sflush_r+0xb4>
  4067ac:	2b16      	cmp	r3, #22
  4067ae:	d101      	bne.n	4067b4 <__sflush_r+0xb8>
  4067b0:	602f      	str	r7, [r5, #0]
  4067b2:	e7b0      	b.n	406716 <__sflush_r+0x1a>
  4067b4:	89a3      	ldrh	r3, [r4, #12]
  4067b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4067ba:	81a3      	strh	r3, [r4, #12]
  4067bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4067c0:	690f      	ldr	r7, [r1, #16]
  4067c2:	2f00      	cmp	r7, #0
  4067c4:	d0a7      	beq.n	406716 <__sflush_r+0x1a>
  4067c6:	0793      	lsls	r3, r2, #30
  4067c8:	680e      	ldr	r6, [r1, #0]
  4067ca:	bf08      	it	eq
  4067cc:	694b      	ldreq	r3, [r1, #20]
  4067ce:	600f      	str	r7, [r1, #0]
  4067d0:	bf18      	it	ne
  4067d2:	2300      	movne	r3, #0
  4067d4:	eba6 0807 	sub.w	r8, r6, r7
  4067d8:	608b      	str	r3, [r1, #8]
  4067da:	f1b8 0f00 	cmp.w	r8, #0
  4067de:	dd9a      	ble.n	406716 <__sflush_r+0x1a>
  4067e0:	4643      	mov	r3, r8
  4067e2:	463a      	mov	r2, r7
  4067e4:	6a21      	ldr	r1, [r4, #32]
  4067e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4067e8:	4628      	mov	r0, r5
  4067ea:	47b0      	blx	r6
  4067ec:	2800      	cmp	r0, #0
  4067ee:	dc07      	bgt.n	406800 <__sflush_r+0x104>
  4067f0:	89a3      	ldrh	r3, [r4, #12]
  4067f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4067f6:	81a3      	strh	r3, [r4, #12]
  4067f8:	f04f 30ff 	mov.w	r0, #4294967295
  4067fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406800:	4407      	add	r7, r0
  406802:	eba8 0800 	sub.w	r8, r8, r0
  406806:	e7e8      	b.n	4067da <__sflush_r+0xde>
  406808:	20400001 	.word	0x20400001

0040680c <_fflush_r>:
  40680c:	b538      	push	{r3, r4, r5, lr}
  40680e:	690b      	ldr	r3, [r1, #16]
  406810:	4605      	mov	r5, r0
  406812:	460c      	mov	r4, r1
  406814:	b1db      	cbz	r3, 40684e <_fflush_r+0x42>
  406816:	b118      	cbz	r0, 406820 <_fflush_r+0x14>
  406818:	6983      	ldr	r3, [r0, #24]
  40681a:	b90b      	cbnz	r3, 406820 <_fflush_r+0x14>
  40681c:	f000 f860 	bl	4068e0 <__sinit>
  406820:	4b0c      	ldr	r3, [pc, #48]	; (406854 <_fflush_r+0x48>)
  406822:	429c      	cmp	r4, r3
  406824:	d109      	bne.n	40683a <_fflush_r+0x2e>
  406826:	686c      	ldr	r4, [r5, #4]
  406828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40682c:	b17b      	cbz	r3, 40684e <_fflush_r+0x42>
  40682e:	4621      	mov	r1, r4
  406830:	4628      	mov	r0, r5
  406832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406836:	f7ff bf61 	b.w	4066fc <__sflush_r>
  40683a:	4b07      	ldr	r3, [pc, #28]	; (406858 <_fflush_r+0x4c>)
  40683c:	429c      	cmp	r4, r3
  40683e:	d101      	bne.n	406844 <_fflush_r+0x38>
  406840:	68ac      	ldr	r4, [r5, #8]
  406842:	e7f1      	b.n	406828 <_fflush_r+0x1c>
  406844:	4b05      	ldr	r3, [pc, #20]	; (40685c <_fflush_r+0x50>)
  406846:	429c      	cmp	r4, r3
  406848:	bf08      	it	eq
  40684a:	68ec      	ldreq	r4, [r5, #12]
  40684c:	e7ec      	b.n	406828 <_fflush_r+0x1c>
  40684e:	2000      	movs	r0, #0
  406850:	bd38      	pop	{r3, r4, r5, pc}
  406852:	bf00      	nop
  406854:	00407f40 	.word	0x00407f40
  406858:	00407f60 	.word	0x00407f60
  40685c:	00407f20 	.word	0x00407f20

00406860 <_cleanup_r>:
  406860:	4901      	ldr	r1, [pc, #4]	; (406868 <_cleanup_r+0x8>)
  406862:	f000 b8a9 	b.w	4069b8 <_fwalk_reent>
  406866:	bf00      	nop
  406868:	0040680d 	.word	0x0040680d

0040686c <std.isra.0>:
  40686c:	2300      	movs	r3, #0
  40686e:	b510      	push	{r4, lr}
  406870:	4604      	mov	r4, r0
  406872:	6003      	str	r3, [r0, #0]
  406874:	6043      	str	r3, [r0, #4]
  406876:	6083      	str	r3, [r0, #8]
  406878:	8181      	strh	r1, [r0, #12]
  40687a:	6643      	str	r3, [r0, #100]	; 0x64
  40687c:	81c2      	strh	r2, [r0, #14]
  40687e:	6103      	str	r3, [r0, #16]
  406880:	6143      	str	r3, [r0, #20]
  406882:	6183      	str	r3, [r0, #24]
  406884:	4619      	mov	r1, r3
  406886:	2208      	movs	r2, #8
  406888:	305c      	adds	r0, #92	; 0x5c
  40688a:	f7fe fb9c 	bl	404fc6 <memset>
  40688e:	4b05      	ldr	r3, [pc, #20]	; (4068a4 <std.isra.0+0x38>)
  406890:	6263      	str	r3, [r4, #36]	; 0x24
  406892:	4b05      	ldr	r3, [pc, #20]	; (4068a8 <std.isra.0+0x3c>)
  406894:	62a3      	str	r3, [r4, #40]	; 0x28
  406896:	4b05      	ldr	r3, [pc, #20]	; (4068ac <std.isra.0+0x40>)
  406898:	62e3      	str	r3, [r4, #44]	; 0x2c
  40689a:	4b05      	ldr	r3, [pc, #20]	; (4068b0 <std.isra.0+0x44>)
  40689c:	6224      	str	r4, [r4, #32]
  40689e:	6323      	str	r3, [r4, #48]	; 0x30
  4068a0:	bd10      	pop	{r4, pc}
  4068a2:	bf00      	nop
  4068a4:	00407541 	.word	0x00407541
  4068a8:	00407563 	.word	0x00407563
  4068ac:	0040759b 	.word	0x0040759b
  4068b0:	004075bf 	.word	0x004075bf

004068b4 <__sfmoreglue>:
  4068b4:	b570      	push	{r4, r5, r6, lr}
  4068b6:	1e4a      	subs	r2, r1, #1
  4068b8:	2568      	movs	r5, #104	; 0x68
  4068ba:	4355      	muls	r5, r2
  4068bc:	460e      	mov	r6, r1
  4068be:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4068c2:	f000 fc91 	bl	4071e8 <_malloc_r>
  4068c6:	4604      	mov	r4, r0
  4068c8:	b140      	cbz	r0, 4068dc <__sfmoreglue+0x28>
  4068ca:	2100      	movs	r1, #0
  4068cc:	e880 0042 	stmia.w	r0, {r1, r6}
  4068d0:	300c      	adds	r0, #12
  4068d2:	60a0      	str	r0, [r4, #8]
  4068d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4068d8:	f7fe fb75 	bl	404fc6 <memset>
  4068dc:	4620      	mov	r0, r4
  4068de:	bd70      	pop	{r4, r5, r6, pc}

004068e0 <__sinit>:
  4068e0:	6983      	ldr	r3, [r0, #24]
  4068e2:	b510      	push	{r4, lr}
  4068e4:	4604      	mov	r4, r0
  4068e6:	bb33      	cbnz	r3, 406936 <__sinit+0x56>
  4068e8:	6483      	str	r3, [r0, #72]	; 0x48
  4068ea:	64c3      	str	r3, [r0, #76]	; 0x4c
  4068ec:	6503      	str	r3, [r0, #80]	; 0x50
  4068ee:	4b12      	ldr	r3, [pc, #72]	; (406938 <__sinit+0x58>)
  4068f0:	4a12      	ldr	r2, [pc, #72]	; (40693c <__sinit+0x5c>)
  4068f2:	681b      	ldr	r3, [r3, #0]
  4068f4:	6282      	str	r2, [r0, #40]	; 0x28
  4068f6:	4298      	cmp	r0, r3
  4068f8:	bf04      	itt	eq
  4068fa:	2301      	moveq	r3, #1
  4068fc:	6183      	streq	r3, [r0, #24]
  4068fe:	f000 f81f 	bl	406940 <__sfp>
  406902:	6060      	str	r0, [r4, #4]
  406904:	4620      	mov	r0, r4
  406906:	f000 f81b 	bl	406940 <__sfp>
  40690a:	60a0      	str	r0, [r4, #8]
  40690c:	4620      	mov	r0, r4
  40690e:	f000 f817 	bl	406940 <__sfp>
  406912:	2200      	movs	r2, #0
  406914:	60e0      	str	r0, [r4, #12]
  406916:	2104      	movs	r1, #4
  406918:	6860      	ldr	r0, [r4, #4]
  40691a:	f7ff ffa7 	bl	40686c <std.isra.0>
  40691e:	2201      	movs	r2, #1
  406920:	2109      	movs	r1, #9
  406922:	68a0      	ldr	r0, [r4, #8]
  406924:	f7ff ffa2 	bl	40686c <std.isra.0>
  406928:	2202      	movs	r2, #2
  40692a:	2112      	movs	r1, #18
  40692c:	68e0      	ldr	r0, [r4, #12]
  40692e:	f7ff ff9d 	bl	40686c <std.isra.0>
  406932:	2301      	movs	r3, #1
  406934:	61a3      	str	r3, [r4, #24]
  406936:	bd10      	pop	{r4, pc}
  406938:	00407ed8 	.word	0x00407ed8
  40693c:	00406861 	.word	0x00406861

00406940 <__sfp>:
  406940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406942:	4b1c      	ldr	r3, [pc, #112]	; (4069b4 <__sfp+0x74>)
  406944:	681e      	ldr	r6, [r3, #0]
  406946:	69b3      	ldr	r3, [r6, #24]
  406948:	4607      	mov	r7, r0
  40694a:	b913      	cbnz	r3, 406952 <__sfp+0x12>
  40694c:	4630      	mov	r0, r6
  40694e:	f7ff ffc7 	bl	4068e0 <__sinit>
  406952:	3648      	adds	r6, #72	; 0x48
  406954:	68b4      	ldr	r4, [r6, #8]
  406956:	6873      	ldr	r3, [r6, #4]
  406958:	3b01      	subs	r3, #1
  40695a:	d503      	bpl.n	406964 <__sfp+0x24>
  40695c:	6833      	ldr	r3, [r6, #0]
  40695e:	b133      	cbz	r3, 40696e <__sfp+0x2e>
  406960:	6836      	ldr	r6, [r6, #0]
  406962:	e7f7      	b.n	406954 <__sfp+0x14>
  406964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  406968:	b16d      	cbz	r5, 406986 <__sfp+0x46>
  40696a:	3468      	adds	r4, #104	; 0x68
  40696c:	e7f4      	b.n	406958 <__sfp+0x18>
  40696e:	2104      	movs	r1, #4
  406970:	4638      	mov	r0, r7
  406972:	f7ff ff9f 	bl	4068b4 <__sfmoreglue>
  406976:	6030      	str	r0, [r6, #0]
  406978:	2800      	cmp	r0, #0
  40697a:	d1f1      	bne.n	406960 <__sfp+0x20>
  40697c:	230c      	movs	r3, #12
  40697e:	603b      	str	r3, [r7, #0]
  406980:	4604      	mov	r4, r0
  406982:	4620      	mov	r0, r4
  406984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406986:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40698a:	81e3      	strh	r3, [r4, #14]
  40698c:	2301      	movs	r3, #1
  40698e:	81a3      	strh	r3, [r4, #12]
  406990:	6665      	str	r5, [r4, #100]	; 0x64
  406992:	6025      	str	r5, [r4, #0]
  406994:	60a5      	str	r5, [r4, #8]
  406996:	6065      	str	r5, [r4, #4]
  406998:	6125      	str	r5, [r4, #16]
  40699a:	6165      	str	r5, [r4, #20]
  40699c:	61a5      	str	r5, [r4, #24]
  40699e:	2208      	movs	r2, #8
  4069a0:	4629      	mov	r1, r5
  4069a2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  4069a6:	f7fe fb0e 	bl	404fc6 <memset>
  4069aa:	6365      	str	r5, [r4, #52]	; 0x34
  4069ac:	63a5      	str	r5, [r4, #56]	; 0x38
  4069ae:	64a5      	str	r5, [r4, #72]	; 0x48
  4069b0:	64e5      	str	r5, [r4, #76]	; 0x4c
  4069b2:	e7e6      	b.n	406982 <__sfp+0x42>
  4069b4:	00407ed8 	.word	0x00407ed8

004069b8 <_fwalk_reent>:
  4069b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4069bc:	4680      	mov	r8, r0
  4069be:	4689      	mov	r9, r1
  4069c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
  4069c4:	2600      	movs	r6, #0
  4069c6:	b914      	cbnz	r4, 4069ce <_fwalk_reent+0x16>
  4069c8:	4630      	mov	r0, r6
  4069ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4069ce:	68a5      	ldr	r5, [r4, #8]
  4069d0:	6867      	ldr	r7, [r4, #4]
  4069d2:	3f01      	subs	r7, #1
  4069d4:	d501      	bpl.n	4069da <_fwalk_reent+0x22>
  4069d6:	6824      	ldr	r4, [r4, #0]
  4069d8:	e7f5      	b.n	4069c6 <_fwalk_reent+0xe>
  4069da:	89ab      	ldrh	r3, [r5, #12]
  4069dc:	2b01      	cmp	r3, #1
  4069de:	d907      	bls.n	4069f0 <_fwalk_reent+0x38>
  4069e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4069e4:	3301      	adds	r3, #1
  4069e6:	d003      	beq.n	4069f0 <_fwalk_reent+0x38>
  4069e8:	4629      	mov	r1, r5
  4069ea:	4640      	mov	r0, r8
  4069ec:	47c8      	blx	r9
  4069ee:	4306      	orrs	r6, r0
  4069f0:	3568      	adds	r5, #104	; 0x68
  4069f2:	e7ee      	b.n	4069d2 <_fwalk_reent+0x1a>

004069f4 <_localeconv_r>:
  4069f4:	4b04      	ldr	r3, [pc, #16]	; (406a08 <_localeconv_r+0x14>)
  4069f6:	681b      	ldr	r3, [r3, #0]
  4069f8:	6a18      	ldr	r0, [r3, #32]
  4069fa:	4b04      	ldr	r3, [pc, #16]	; (406a0c <_localeconv_r+0x18>)
  4069fc:	2800      	cmp	r0, #0
  4069fe:	bf08      	it	eq
  406a00:	4618      	moveq	r0, r3
  406a02:	30f0      	adds	r0, #240	; 0xf0
  406a04:	4770      	bx	lr
  406a06:	bf00      	nop
  406a08:	2040004c 	.word	0x2040004c
  406a0c:	204000b0 	.word	0x204000b0

00406a10 <__swhatbuf_r>:
  406a10:	b570      	push	{r4, r5, r6, lr}
  406a12:	460e      	mov	r6, r1
  406a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406a18:	2900      	cmp	r1, #0
  406a1a:	b090      	sub	sp, #64	; 0x40
  406a1c:	4614      	mov	r4, r2
  406a1e:	461d      	mov	r5, r3
  406a20:	da07      	bge.n	406a32 <__swhatbuf_r+0x22>
  406a22:	2300      	movs	r3, #0
  406a24:	602b      	str	r3, [r5, #0]
  406a26:	89b3      	ldrh	r3, [r6, #12]
  406a28:	061a      	lsls	r2, r3, #24
  406a2a:	d410      	bmi.n	406a4e <__swhatbuf_r+0x3e>
  406a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406a30:	e00e      	b.n	406a50 <__swhatbuf_r+0x40>
  406a32:	aa01      	add	r2, sp, #4
  406a34:	f000 feaa 	bl	40778c <_fstat_r>
  406a38:	2800      	cmp	r0, #0
  406a3a:	dbf2      	blt.n	406a22 <__swhatbuf_r+0x12>
  406a3c:	9a02      	ldr	r2, [sp, #8]
  406a3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  406a42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  406a46:	425a      	negs	r2, r3
  406a48:	415a      	adcs	r2, r3
  406a4a:	602a      	str	r2, [r5, #0]
  406a4c:	e7ee      	b.n	406a2c <__swhatbuf_r+0x1c>
  406a4e:	2340      	movs	r3, #64	; 0x40
  406a50:	2000      	movs	r0, #0
  406a52:	6023      	str	r3, [r4, #0]
  406a54:	b010      	add	sp, #64	; 0x40
  406a56:	bd70      	pop	{r4, r5, r6, pc}

00406a58 <__smakebuf_r>:
  406a58:	898b      	ldrh	r3, [r1, #12]
  406a5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  406a5c:	079d      	lsls	r5, r3, #30
  406a5e:	4606      	mov	r6, r0
  406a60:	460c      	mov	r4, r1
  406a62:	d507      	bpl.n	406a74 <__smakebuf_r+0x1c>
  406a64:	f104 0347 	add.w	r3, r4, #71	; 0x47
  406a68:	6023      	str	r3, [r4, #0]
  406a6a:	6123      	str	r3, [r4, #16]
  406a6c:	2301      	movs	r3, #1
  406a6e:	6163      	str	r3, [r4, #20]
  406a70:	b002      	add	sp, #8
  406a72:	bd70      	pop	{r4, r5, r6, pc}
  406a74:	ab01      	add	r3, sp, #4
  406a76:	466a      	mov	r2, sp
  406a78:	f7ff ffca 	bl	406a10 <__swhatbuf_r>
  406a7c:	9900      	ldr	r1, [sp, #0]
  406a7e:	4605      	mov	r5, r0
  406a80:	4630      	mov	r0, r6
  406a82:	f000 fbb1 	bl	4071e8 <_malloc_r>
  406a86:	b948      	cbnz	r0, 406a9c <__smakebuf_r+0x44>
  406a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406a8c:	059a      	lsls	r2, r3, #22
  406a8e:	d4ef      	bmi.n	406a70 <__smakebuf_r+0x18>
  406a90:	f023 0303 	bic.w	r3, r3, #3
  406a94:	f043 0302 	orr.w	r3, r3, #2
  406a98:	81a3      	strh	r3, [r4, #12]
  406a9a:	e7e3      	b.n	406a64 <__smakebuf_r+0xc>
  406a9c:	4b0d      	ldr	r3, [pc, #52]	; (406ad4 <__smakebuf_r+0x7c>)
  406a9e:	62b3      	str	r3, [r6, #40]	; 0x28
  406aa0:	89a3      	ldrh	r3, [r4, #12]
  406aa2:	6020      	str	r0, [r4, #0]
  406aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406aa8:	81a3      	strh	r3, [r4, #12]
  406aaa:	9b00      	ldr	r3, [sp, #0]
  406aac:	6163      	str	r3, [r4, #20]
  406aae:	9b01      	ldr	r3, [sp, #4]
  406ab0:	6120      	str	r0, [r4, #16]
  406ab2:	b15b      	cbz	r3, 406acc <__smakebuf_r+0x74>
  406ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406ab8:	4630      	mov	r0, r6
  406aba:	f000 fe79 	bl	4077b0 <_isatty_r>
  406abe:	b128      	cbz	r0, 406acc <__smakebuf_r+0x74>
  406ac0:	89a3      	ldrh	r3, [r4, #12]
  406ac2:	f023 0303 	bic.w	r3, r3, #3
  406ac6:	f043 0301 	orr.w	r3, r3, #1
  406aca:	81a3      	strh	r3, [r4, #12]
  406acc:	89a3      	ldrh	r3, [r4, #12]
  406ace:	431d      	orrs	r5, r3
  406ad0:	81a5      	strh	r5, [r4, #12]
  406ad2:	e7cd      	b.n	406a70 <__smakebuf_r+0x18>
  406ad4:	00406861 	.word	0x00406861

00406ad8 <malloc>:
  406ad8:	4b02      	ldr	r3, [pc, #8]	; (406ae4 <malloc+0xc>)
  406ada:	4601      	mov	r1, r0
  406adc:	6818      	ldr	r0, [r3, #0]
  406ade:	f000 bb83 	b.w	4071e8 <_malloc_r>
  406ae2:	bf00      	nop
  406ae4:	2040004c 	.word	0x2040004c
	...

00406af0 <memchr>:
  406af0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406af4:	2a10      	cmp	r2, #16
  406af6:	db2b      	blt.n	406b50 <memchr+0x60>
  406af8:	f010 0f07 	tst.w	r0, #7
  406afc:	d008      	beq.n	406b10 <memchr+0x20>
  406afe:	f810 3b01 	ldrb.w	r3, [r0], #1
  406b02:	3a01      	subs	r2, #1
  406b04:	428b      	cmp	r3, r1
  406b06:	d02d      	beq.n	406b64 <memchr+0x74>
  406b08:	f010 0f07 	tst.w	r0, #7
  406b0c:	b342      	cbz	r2, 406b60 <memchr+0x70>
  406b0e:	d1f6      	bne.n	406afe <memchr+0xe>
  406b10:	b4f0      	push	{r4, r5, r6, r7}
  406b12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406b16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406b1a:	f022 0407 	bic.w	r4, r2, #7
  406b1e:	f07f 0700 	mvns.w	r7, #0
  406b22:	2300      	movs	r3, #0
  406b24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406b28:	3c08      	subs	r4, #8
  406b2a:	ea85 0501 	eor.w	r5, r5, r1
  406b2e:	ea86 0601 	eor.w	r6, r6, r1
  406b32:	fa85 f547 	uadd8	r5, r5, r7
  406b36:	faa3 f587 	sel	r5, r3, r7
  406b3a:	fa86 f647 	uadd8	r6, r6, r7
  406b3e:	faa5 f687 	sel	r6, r5, r7
  406b42:	b98e      	cbnz	r6, 406b68 <memchr+0x78>
  406b44:	d1ee      	bne.n	406b24 <memchr+0x34>
  406b46:	bcf0      	pop	{r4, r5, r6, r7}
  406b48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406b4c:	f002 0207 	and.w	r2, r2, #7
  406b50:	b132      	cbz	r2, 406b60 <memchr+0x70>
  406b52:	f810 3b01 	ldrb.w	r3, [r0], #1
  406b56:	3a01      	subs	r2, #1
  406b58:	ea83 0301 	eor.w	r3, r3, r1
  406b5c:	b113      	cbz	r3, 406b64 <memchr+0x74>
  406b5e:	d1f8      	bne.n	406b52 <memchr+0x62>
  406b60:	2000      	movs	r0, #0
  406b62:	4770      	bx	lr
  406b64:	3801      	subs	r0, #1
  406b66:	4770      	bx	lr
  406b68:	2d00      	cmp	r5, #0
  406b6a:	bf06      	itte	eq
  406b6c:	4635      	moveq	r5, r6
  406b6e:	3803      	subeq	r0, #3
  406b70:	3807      	subne	r0, #7
  406b72:	f015 0f01 	tst.w	r5, #1
  406b76:	d107      	bne.n	406b88 <memchr+0x98>
  406b78:	3001      	adds	r0, #1
  406b7a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406b7e:	bf02      	ittt	eq
  406b80:	3001      	addeq	r0, #1
  406b82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406b86:	3001      	addeq	r0, #1
  406b88:	bcf0      	pop	{r4, r5, r6, r7}
  406b8a:	3801      	subs	r0, #1
  406b8c:	4770      	bx	lr
  406b8e:	bf00      	nop

00406b90 <_Balloc>:
  406b90:	b570      	push	{r4, r5, r6, lr}
  406b92:	6a45      	ldr	r5, [r0, #36]	; 0x24
  406b94:	4604      	mov	r4, r0
  406b96:	460e      	mov	r6, r1
  406b98:	b93d      	cbnz	r5, 406baa <_Balloc+0x1a>
  406b9a:	2010      	movs	r0, #16
  406b9c:	f7ff ff9c 	bl	406ad8 <malloc>
  406ba0:	6260      	str	r0, [r4, #36]	; 0x24
  406ba2:	6045      	str	r5, [r0, #4]
  406ba4:	6085      	str	r5, [r0, #8]
  406ba6:	6005      	str	r5, [r0, #0]
  406ba8:	60c5      	str	r5, [r0, #12]
  406baa:	6a65      	ldr	r5, [r4, #36]	; 0x24
  406bac:	68eb      	ldr	r3, [r5, #12]
  406bae:	b183      	cbz	r3, 406bd2 <_Balloc+0x42>
  406bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  406bb2:	68db      	ldr	r3, [r3, #12]
  406bb4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  406bb8:	b9b8      	cbnz	r0, 406bea <_Balloc+0x5a>
  406bba:	2101      	movs	r1, #1
  406bbc:	fa01 f506 	lsl.w	r5, r1, r6
  406bc0:	1d6a      	adds	r2, r5, #5
  406bc2:	0092      	lsls	r2, r2, #2
  406bc4:	4620      	mov	r0, r4
  406bc6:	f000 fab3 	bl	407130 <_calloc_r>
  406bca:	b160      	cbz	r0, 406be6 <_Balloc+0x56>
  406bcc:	6046      	str	r6, [r0, #4]
  406bce:	6085      	str	r5, [r0, #8]
  406bd0:	e00e      	b.n	406bf0 <_Balloc+0x60>
  406bd2:	2221      	movs	r2, #33	; 0x21
  406bd4:	2104      	movs	r1, #4
  406bd6:	4620      	mov	r0, r4
  406bd8:	f000 faaa 	bl	407130 <_calloc_r>
  406bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  406bde:	60e8      	str	r0, [r5, #12]
  406be0:	68db      	ldr	r3, [r3, #12]
  406be2:	2b00      	cmp	r3, #0
  406be4:	d1e4      	bne.n	406bb0 <_Balloc+0x20>
  406be6:	2000      	movs	r0, #0
  406be8:	bd70      	pop	{r4, r5, r6, pc}
  406bea:	6802      	ldr	r2, [r0, #0]
  406bec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  406bf0:	2300      	movs	r3, #0
  406bf2:	6103      	str	r3, [r0, #16]
  406bf4:	60c3      	str	r3, [r0, #12]
  406bf6:	bd70      	pop	{r4, r5, r6, pc}

00406bf8 <_Bfree>:
  406bf8:	b570      	push	{r4, r5, r6, lr}
  406bfa:	6a44      	ldr	r4, [r0, #36]	; 0x24
  406bfc:	4606      	mov	r6, r0
  406bfe:	460d      	mov	r5, r1
  406c00:	b93c      	cbnz	r4, 406c12 <_Bfree+0x1a>
  406c02:	2010      	movs	r0, #16
  406c04:	f7ff ff68 	bl	406ad8 <malloc>
  406c08:	6270      	str	r0, [r6, #36]	; 0x24
  406c0a:	6044      	str	r4, [r0, #4]
  406c0c:	6084      	str	r4, [r0, #8]
  406c0e:	6004      	str	r4, [r0, #0]
  406c10:	60c4      	str	r4, [r0, #12]
  406c12:	b13d      	cbz	r5, 406c24 <_Bfree+0x2c>
  406c14:	6a73      	ldr	r3, [r6, #36]	; 0x24
  406c16:	686a      	ldr	r2, [r5, #4]
  406c18:	68db      	ldr	r3, [r3, #12]
  406c1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406c1e:	6029      	str	r1, [r5, #0]
  406c20:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406c24:	bd70      	pop	{r4, r5, r6, pc}

00406c26 <__multadd>:
  406c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c2a:	690d      	ldr	r5, [r1, #16]
  406c2c:	461f      	mov	r7, r3
  406c2e:	4606      	mov	r6, r0
  406c30:	460c      	mov	r4, r1
  406c32:	f101 0e14 	add.w	lr, r1, #20
  406c36:	2300      	movs	r3, #0
  406c38:	f8de 0000 	ldr.w	r0, [lr]
  406c3c:	b281      	uxth	r1, r0
  406c3e:	fb02 7101 	mla	r1, r2, r1, r7
  406c42:	0c0f      	lsrs	r7, r1, #16
  406c44:	0c00      	lsrs	r0, r0, #16
  406c46:	fb02 7000 	mla	r0, r2, r0, r7
  406c4a:	b289      	uxth	r1, r1
  406c4c:	3301      	adds	r3, #1
  406c4e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  406c52:	429d      	cmp	r5, r3
  406c54:	ea4f 4710 	mov.w	r7, r0, lsr #16
  406c58:	f84e 1b04 	str.w	r1, [lr], #4
  406c5c:	dcec      	bgt.n	406c38 <__multadd+0x12>
  406c5e:	b1d7      	cbz	r7, 406c96 <__multadd+0x70>
  406c60:	68a3      	ldr	r3, [r4, #8]
  406c62:	429d      	cmp	r5, r3
  406c64:	db12      	blt.n	406c8c <__multadd+0x66>
  406c66:	6861      	ldr	r1, [r4, #4]
  406c68:	4630      	mov	r0, r6
  406c6a:	3101      	adds	r1, #1
  406c6c:	f7ff ff90 	bl	406b90 <_Balloc>
  406c70:	6922      	ldr	r2, [r4, #16]
  406c72:	3202      	adds	r2, #2
  406c74:	f104 010c 	add.w	r1, r4, #12
  406c78:	4680      	mov	r8, r0
  406c7a:	0092      	lsls	r2, r2, #2
  406c7c:	300c      	adds	r0, #12
  406c7e:	f7fe f997 	bl	404fb0 <memcpy>
  406c82:	4621      	mov	r1, r4
  406c84:	4630      	mov	r0, r6
  406c86:	f7ff ffb7 	bl	406bf8 <_Bfree>
  406c8a:	4644      	mov	r4, r8
  406c8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  406c90:	3501      	adds	r5, #1
  406c92:	615f      	str	r7, [r3, #20]
  406c94:	6125      	str	r5, [r4, #16]
  406c96:	4620      	mov	r0, r4
  406c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406c9c <__hi0bits>:
  406c9c:	0c02      	lsrs	r2, r0, #16
  406c9e:	0412      	lsls	r2, r2, #16
  406ca0:	4603      	mov	r3, r0
  406ca2:	b9b2      	cbnz	r2, 406cd2 <__hi0bits+0x36>
  406ca4:	0403      	lsls	r3, r0, #16
  406ca6:	2010      	movs	r0, #16
  406ca8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  406cac:	bf04      	itt	eq
  406cae:	021b      	lsleq	r3, r3, #8
  406cb0:	3008      	addeq	r0, #8
  406cb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406cb6:	bf04      	itt	eq
  406cb8:	011b      	lsleq	r3, r3, #4
  406cba:	3004      	addeq	r0, #4
  406cbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406cc0:	bf04      	itt	eq
  406cc2:	009b      	lsleq	r3, r3, #2
  406cc4:	3002      	addeq	r0, #2
  406cc6:	2b00      	cmp	r3, #0
  406cc8:	db06      	blt.n	406cd8 <__hi0bits+0x3c>
  406cca:	005b      	lsls	r3, r3, #1
  406ccc:	d503      	bpl.n	406cd6 <__hi0bits+0x3a>
  406cce:	3001      	adds	r0, #1
  406cd0:	4770      	bx	lr
  406cd2:	2000      	movs	r0, #0
  406cd4:	e7e8      	b.n	406ca8 <__hi0bits+0xc>
  406cd6:	2020      	movs	r0, #32
  406cd8:	4770      	bx	lr

00406cda <__lo0bits>:
  406cda:	6803      	ldr	r3, [r0, #0]
  406cdc:	f013 0207 	ands.w	r2, r3, #7
  406ce0:	4601      	mov	r1, r0
  406ce2:	d00b      	beq.n	406cfc <__lo0bits+0x22>
  406ce4:	07da      	lsls	r2, r3, #31
  406ce6:	d423      	bmi.n	406d30 <__lo0bits+0x56>
  406ce8:	0798      	lsls	r0, r3, #30
  406cea:	bf49      	itett	mi
  406cec:	085b      	lsrmi	r3, r3, #1
  406cee:	089b      	lsrpl	r3, r3, #2
  406cf0:	2001      	movmi	r0, #1
  406cf2:	600b      	strmi	r3, [r1, #0]
  406cf4:	bf5c      	itt	pl
  406cf6:	600b      	strpl	r3, [r1, #0]
  406cf8:	2002      	movpl	r0, #2
  406cfa:	4770      	bx	lr
  406cfc:	b298      	uxth	r0, r3
  406cfe:	b9a8      	cbnz	r0, 406d2c <__lo0bits+0x52>
  406d00:	0c1b      	lsrs	r3, r3, #16
  406d02:	2010      	movs	r0, #16
  406d04:	f013 0fff 	tst.w	r3, #255	; 0xff
  406d08:	bf04      	itt	eq
  406d0a:	0a1b      	lsreq	r3, r3, #8
  406d0c:	3008      	addeq	r0, #8
  406d0e:	071a      	lsls	r2, r3, #28
  406d10:	bf04      	itt	eq
  406d12:	091b      	lsreq	r3, r3, #4
  406d14:	3004      	addeq	r0, #4
  406d16:	079a      	lsls	r2, r3, #30
  406d18:	bf04      	itt	eq
  406d1a:	089b      	lsreq	r3, r3, #2
  406d1c:	3002      	addeq	r0, #2
  406d1e:	07da      	lsls	r2, r3, #31
  406d20:	d402      	bmi.n	406d28 <__lo0bits+0x4e>
  406d22:	085b      	lsrs	r3, r3, #1
  406d24:	d006      	beq.n	406d34 <__lo0bits+0x5a>
  406d26:	3001      	adds	r0, #1
  406d28:	600b      	str	r3, [r1, #0]
  406d2a:	4770      	bx	lr
  406d2c:	4610      	mov	r0, r2
  406d2e:	e7e9      	b.n	406d04 <__lo0bits+0x2a>
  406d30:	2000      	movs	r0, #0
  406d32:	4770      	bx	lr
  406d34:	2020      	movs	r0, #32
  406d36:	4770      	bx	lr

00406d38 <__i2b>:
  406d38:	b510      	push	{r4, lr}
  406d3a:	460c      	mov	r4, r1
  406d3c:	2101      	movs	r1, #1
  406d3e:	f7ff ff27 	bl	406b90 <_Balloc>
  406d42:	2201      	movs	r2, #1
  406d44:	6144      	str	r4, [r0, #20]
  406d46:	6102      	str	r2, [r0, #16]
  406d48:	bd10      	pop	{r4, pc}

00406d4a <__multiply>:
  406d4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d4e:	4614      	mov	r4, r2
  406d50:	690a      	ldr	r2, [r1, #16]
  406d52:	6923      	ldr	r3, [r4, #16]
  406d54:	429a      	cmp	r2, r3
  406d56:	bfb8      	it	lt
  406d58:	460b      	movlt	r3, r1
  406d5a:	4689      	mov	r9, r1
  406d5c:	bfbc      	itt	lt
  406d5e:	46a1      	movlt	r9, r4
  406d60:	461c      	movlt	r4, r3
  406d62:	f8d9 7010 	ldr.w	r7, [r9, #16]
  406d66:	f8d4 a010 	ldr.w	sl, [r4, #16]
  406d6a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  406d6e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  406d72:	eb07 060a 	add.w	r6, r7, sl
  406d76:	429e      	cmp	r6, r3
  406d78:	bfc8      	it	gt
  406d7a:	3101      	addgt	r1, #1
  406d7c:	f7ff ff08 	bl	406b90 <_Balloc>
  406d80:	f100 0514 	add.w	r5, r0, #20
  406d84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  406d88:	462b      	mov	r3, r5
  406d8a:	2200      	movs	r2, #0
  406d8c:	4543      	cmp	r3, r8
  406d8e:	d316      	bcc.n	406dbe <__multiply+0x74>
  406d90:	f104 0214 	add.w	r2, r4, #20
  406d94:	f109 0114 	add.w	r1, r9, #20
  406d98:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  406d9c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  406da0:	9301      	str	r3, [sp, #4]
  406da2:	9c01      	ldr	r4, [sp, #4]
  406da4:	4294      	cmp	r4, r2
  406da6:	4613      	mov	r3, r2
  406da8:	d80c      	bhi.n	406dc4 <__multiply+0x7a>
  406daa:	2e00      	cmp	r6, #0
  406dac:	dd03      	ble.n	406db6 <__multiply+0x6c>
  406dae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  406db2:	2b00      	cmp	r3, #0
  406db4:	d054      	beq.n	406e60 <__multiply+0x116>
  406db6:	6106      	str	r6, [r0, #16]
  406db8:	b003      	add	sp, #12
  406dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dbe:	f843 2b04 	str.w	r2, [r3], #4
  406dc2:	e7e3      	b.n	406d8c <__multiply+0x42>
  406dc4:	f8b3 a000 	ldrh.w	sl, [r3]
  406dc8:	3204      	adds	r2, #4
  406dca:	f1ba 0f00 	cmp.w	sl, #0
  406dce:	d020      	beq.n	406e12 <__multiply+0xc8>
  406dd0:	46ae      	mov	lr, r5
  406dd2:	4689      	mov	r9, r1
  406dd4:	f04f 0c00 	mov.w	ip, #0
  406dd8:	f859 4b04 	ldr.w	r4, [r9], #4
  406ddc:	f8be b000 	ldrh.w	fp, [lr]
  406de0:	b2a3      	uxth	r3, r4
  406de2:	fb0a b303 	mla	r3, sl, r3, fp
  406de6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  406dea:	f8de 4000 	ldr.w	r4, [lr]
  406dee:	4463      	add	r3, ip
  406df0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  406df4:	fb0a c40b 	mla	r4, sl, fp, ip
  406df8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  406dfc:	b29b      	uxth	r3, r3
  406dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  406e02:	454f      	cmp	r7, r9
  406e04:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  406e08:	f84e 3b04 	str.w	r3, [lr], #4
  406e0c:	d8e4      	bhi.n	406dd8 <__multiply+0x8e>
  406e0e:	f8ce c000 	str.w	ip, [lr]
  406e12:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  406e16:	f1b9 0f00 	cmp.w	r9, #0
  406e1a:	d01f      	beq.n	406e5c <__multiply+0x112>
  406e1c:	682b      	ldr	r3, [r5, #0]
  406e1e:	46ae      	mov	lr, r5
  406e20:	468c      	mov	ip, r1
  406e22:	f04f 0a00 	mov.w	sl, #0
  406e26:	f8bc 4000 	ldrh.w	r4, [ip]
  406e2a:	f8be b002 	ldrh.w	fp, [lr, #2]
  406e2e:	fb09 b404 	mla	r4, r9, r4, fp
  406e32:	44a2      	add	sl, r4
  406e34:	b29b      	uxth	r3, r3
  406e36:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  406e3a:	f84e 3b04 	str.w	r3, [lr], #4
  406e3e:	f85c 3b04 	ldr.w	r3, [ip], #4
  406e42:	f8be 4000 	ldrh.w	r4, [lr]
  406e46:	0c1b      	lsrs	r3, r3, #16
  406e48:	fb09 4303 	mla	r3, r9, r3, r4
  406e4c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  406e50:	4567      	cmp	r7, ip
  406e52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  406e56:	d8e6      	bhi.n	406e26 <__multiply+0xdc>
  406e58:	f8ce 3000 	str.w	r3, [lr]
  406e5c:	3504      	adds	r5, #4
  406e5e:	e7a0      	b.n	406da2 <__multiply+0x58>
  406e60:	3e01      	subs	r6, #1
  406e62:	e7a2      	b.n	406daa <__multiply+0x60>

00406e64 <__pow5mult>:
  406e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406e68:	4615      	mov	r5, r2
  406e6a:	f012 0203 	ands.w	r2, r2, #3
  406e6e:	4606      	mov	r6, r0
  406e70:	460f      	mov	r7, r1
  406e72:	d007      	beq.n	406e84 <__pow5mult+0x20>
  406e74:	3a01      	subs	r2, #1
  406e76:	4c21      	ldr	r4, [pc, #132]	; (406efc <__pow5mult+0x98>)
  406e78:	2300      	movs	r3, #0
  406e7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  406e7e:	f7ff fed2 	bl	406c26 <__multadd>
  406e82:	4607      	mov	r7, r0
  406e84:	10ad      	asrs	r5, r5, #2
  406e86:	d035      	beq.n	406ef4 <__pow5mult+0x90>
  406e88:	6a74      	ldr	r4, [r6, #36]	; 0x24
  406e8a:	b93c      	cbnz	r4, 406e9c <__pow5mult+0x38>
  406e8c:	2010      	movs	r0, #16
  406e8e:	f7ff fe23 	bl	406ad8 <malloc>
  406e92:	6270      	str	r0, [r6, #36]	; 0x24
  406e94:	6044      	str	r4, [r0, #4]
  406e96:	6084      	str	r4, [r0, #8]
  406e98:	6004      	str	r4, [r0, #0]
  406e9a:	60c4      	str	r4, [r0, #12]
  406e9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  406ea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
  406ea4:	b94c      	cbnz	r4, 406eba <__pow5mult+0x56>
  406ea6:	f240 2171 	movw	r1, #625	; 0x271
  406eaa:	4630      	mov	r0, r6
  406eac:	f7ff ff44 	bl	406d38 <__i2b>
  406eb0:	2300      	movs	r3, #0
  406eb2:	f8c8 0008 	str.w	r0, [r8, #8]
  406eb6:	4604      	mov	r4, r0
  406eb8:	6003      	str	r3, [r0, #0]
  406eba:	f04f 0800 	mov.w	r8, #0
  406ebe:	07eb      	lsls	r3, r5, #31
  406ec0:	d50a      	bpl.n	406ed8 <__pow5mult+0x74>
  406ec2:	4639      	mov	r1, r7
  406ec4:	4622      	mov	r2, r4
  406ec6:	4630      	mov	r0, r6
  406ec8:	f7ff ff3f 	bl	406d4a <__multiply>
  406ecc:	4639      	mov	r1, r7
  406ece:	4681      	mov	r9, r0
  406ed0:	4630      	mov	r0, r6
  406ed2:	f7ff fe91 	bl	406bf8 <_Bfree>
  406ed6:	464f      	mov	r7, r9
  406ed8:	106d      	asrs	r5, r5, #1
  406eda:	d00b      	beq.n	406ef4 <__pow5mult+0x90>
  406edc:	6820      	ldr	r0, [r4, #0]
  406ede:	b938      	cbnz	r0, 406ef0 <__pow5mult+0x8c>
  406ee0:	4622      	mov	r2, r4
  406ee2:	4621      	mov	r1, r4
  406ee4:	4630      	mov	r0, r6
  406ee6:	f7ff ff30 	bl	406d4a <__multiply>
  406eea:	6020      	str	r0, [r4, #0]
  406eec:	f8c0 8000 	str.w	r8, [r0]
  406ef0:	4604      	mov	r4, r0
  406ef2:	e7e4      	b.n	406ebe <__pow5mult+0x5a>
  406ef4:	4638      	mov	r0, r7
  406ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406efa:	bf00      	nop
  406efc:	00408070 	.word	0x00408070

00406f00 <__lshift>:
  406f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406f04:	460c      	mov	r4, r1
  406f06:	ea4f 1a62 	mov.w	sl, r2, asr #5
  406f0a:	6923      	ldr	r3, [r4, #16]
  406f0c:	6849      	ldr	r1, [r1, #4]
  406f0e:	eb0a 0903 	add.w	r9, sl, r3
  406f12:	68a3      	ldr	r3, [r4, #8]
  406f14:	4607      	mov	r7, r0
  406f16:	4616      	mov	r6, r2
  406f18:	f109 0501 	add.w	r5, r9, #1
  406f1c:	42ab      	cmp	r3, r5
  406f1e:	db31      	blt.n	406f84 <__lshift+0x84>
  406f20:	4638      	mov	r0, r7
  406f22:	f7ff fe35 	bl	406b90 <_Balloc>
  406f26:	2200      	movs	r2, #0
  406f28:	4680      	mov	r8, r0
  406f2a:	f100 0314 	add.w	r3, r0, #20
  406f2e:	4611      	mov	r1, r2
  406f30:	4552      	cmp	r2, sl
  406f32:	db2a      	blt.n	406f8a <__lshift+0x8a>
  406f34:	6920      	ldr	r0, [r4, #16]
  406f36:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  406f3a:	f104 0114 	add.w	r1, r4, #20
  406f3e:	f016 021f 	ands.w	r2, r6, #31
  406f42:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  406f46:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  406f4a:	d022      	beq.n	406f92 <__lshift+0x92>
  406f4c:	f1c2 0c20 	rsb	ip, r2, #32
  406f50:	2000      	movs	r0, #0
  406f52:	680e      	ldr	r6, [r1, #0]
  406f54:	4096      	lsls	r6, r2
  406f56:	4330      	orrs	r0, r6
  406f58:	f843 0b04 	str.w	r0, [r3], #4
  406f5c:	f851 0b04 	ldr.w	r0, [r1], #4
  406f60:	458e      	cmp	lr, r1
  406f62:	fa20 f00c 	lsr.w	r0, r0, ip
  406f66:	d8f4      	bhi.n	406f52 <__lshift+0x52>
  406f68:	6018      	str	r0, [r3, #0]
  406f6a:	b108      	cbz	r0, 406f70 <__lshift+0x70>
  406f6c:	f109 0502 	add.w	r5, r9, #2
  406f70:	3d01      	subs	r5, #1
  406f72:	4638      	mov	r0, r7
  406f74:	f8c8 5010 	str.w	r5, [r8, #16]
  406f78:	4621      	mov	r1, r4
  406f7a:	f7ff fe3d 	bl	406bf8 <_Bfree>
  406f7e:	4640      	mov	r0, r8
  406f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f84:	3101      	adds	r1, #1
  406f86:	005b      	lsls	r3, r3, #1
  406f88:	e7c8      	b.n	406f1c <__lshift+0x1c>
  406f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406f8e:	3201      	adds	r2, #1
  406f90:	e7ce      	b.n	406f30 <__lshift+0x30>
  406f92:	3b04      	subs	r3, #4
  406f94:	f851 2b04 	ldr.w	r2, [r1], #4
  406f98:	f843 2f04 	str.w	r2, [r3, #4]!
  406f9c:	458e      	cmp	lr, r1
  406f9e:	d8f9      	bhi.n	406f94 <__lshift+0x94>
  406fa0:	e7e6      	b.n	406f70 <__lshift+0x70>

00406fa2 <__mcmp>:
  406fa2:	6903      	ldr	r3, [r0, #16]
  406fa4:	690a      	ldr	r2, [r1, #16]
  406fa6:	1a9b      	subs	r3, r3, r2
  406fa8:	b530      	push	{r4, r5, lr}
  406faa:	d10c      	bne.n	406fc6 <__mcmp+0x24>
  406fac:	0092      	lsls	r2, r2, #2
  406fae:	3014      	adds	r0, #20
  406fb0:	3114      	adds	r1, #20
  406fb2:	1884      	adds	r4, r0, r2
  406fb4:	4411      	add	r1, r2
  406fb6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  406fba:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406fbe:	4295      	cmp	r5, r2
  406fc0:	d003      	beq.n	406fca <__mcmp+0x28>
  406fc2:	d305      	bcc.n	406fd0 <__mcmp+0x2e>
  406fc4:	2301      	movs	r3, #1
  406fc6:	4618      	mov	r0, r3
  406fc8:	bd30      	pop	{r4, r5, pc}
  406fca:	42a0      	cmp	r0, r4
  406fcc:	d3f3      	bcc.n	406fb6 <__mcmp+0x14>
  406fce:	e7fa      	b.n	406fc6 <__mcmp+0x24>
  406fd0:	f04f 33ff 	mov.w	r3, #4294967295
  406fd4:	e7f7      	b.n	406fc6 <__mcmp+0x24>

00406fd6 <__mdiff>:
  406fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406fda:	460d      	mov	r5, r1
  406fdc:	4607      	mov	r7, r0
  406fde:	4611      	mov	r1, r2
  406fe0:	4628      	mov	r0, r5
  406fe2:	4614      	mov	r4, r2
  406fe4:	f7ff ffdd 	bl	406fa2 <__mcmp>
  406fe8:	1e06      	subs	r6, r0, #0
  406fea:	d108      	bne.n	406ffe <__mdiff+0x28>
  406fec:	4631      	mov	r1, r6
  406fee:	4638      	mov	r0, r7
  406ff0:	f7ff fdce 	bl	406b90 <_Balloc>
  406ff4:	2301      	movs	r3, #1
  406ff6:	6103      	str	r3, [r0, #16]
  406ff8:	6146      	str	r6, [r0, #20]
  406ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406ffe:	bfa4      	itt	ge
  407000:	4623      	movge	r3, r4
  407002:	462c      	movge	r4, r5
  407004:	4638      	mov	r0, r7
  407006:	6861      	ldr	r1, [r4, #4]
  407008:	bfa6      	itte	ge
  40700a:	461d      	movge	r5, r3
  40700c:	2600      	movge	r6, #0
  40700e:	2601      	movlt	r6, #1
  407010:	f7ff fdbe 	bl	406b90 <_Balloc>
  407014:	692b      	ldr	r3, [r5, #16]
  407016:	60c6      	str	r6, [r0, #12]
  407018:	6926      	ldr	r6, [r4, #16]
  40701a:	f105 0914 	add.w	r9, r5, #20
  40701e:	f104 0214 	add.w	r2, r4, #20
  407022:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  407026:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40702a:	f100 0514 	add.w	r5, r0, #20
  40702e:	f04f 0c00 	mov.w	ip, #0
  407032:	f852 ab04 	ldr.w	sl, [r2], #4
  407036:	f859 4b04 	ldr.w	r4, [r9], #4
  40703a:	fa1c f18a 	uxtah	r1, ip, sl
  40703e:	b2a3      	uxth	r3, r4
  407040:	1ac9      	subs	r1, r1, r3
  407042:	0c23      	lsrs	r3, r4, #16
  407044:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  407048:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40704c:	b289      	uxth	r1, r1
  40704e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  407052:	45c8      	cmp	r8, r9
  407054:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  407058:	4696      	mov	lr, r2
  40705a:	f845 3b04 	str.w	r3, [r5], #4
  40705e:	d8e8      	bhi.n	407032 <__mdiff+0x5c>
  407060:	45be      	cmp	lr, r7
  407062:	d305      	bcc.n	407070 <__mdiff+0x9a>
  407064:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  407068:	b18b      	cbz	r3, 40708e <__mdiff+0xb8>
  40706a:	6106      	str	r6, [r0, #16]
  40706c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407070:	f85e 1b04 	ldr.w	r1, [lr], #4
  407074:	fa1c f381 	uxtah	r3, ip, r1
  407078:	141a      	asrs	r2, r3, #16
  40707a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  40707e:	b29b      	uxth	r3, r3
  407080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407084:	ea4f 4c22 	mov.w	ip, r2, asr #16
  407088:	f845 3b04 	str.w	r3, [r5], #4
  40708c:	e7e8      	b.n	407060 <__mdiff+0x8a>
  40708e:	3e01      	subs	r6, #1
  407090:	e7e8      	b.n	407064 <__mdiff+0x8e>

00407092 <__d2b>:
  407092:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  407096:	2101      	movs	r1, #1
  407098:	461c      	mov	r4, r3
  40709a:	4690      	mov	r8, r2
  40709c:	9e08      	ldr	r6, [sp, #32]
  40709e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4070a0:	f7ff fd76 	bl	406b90 <_Balloc>
  4070a4:	f3c4 0213 	ubfx	r2, r4, #0, #20
  4070a8:	f3c4 540a 	ubfx	r4, r4, #20, #11
  4070ac:	4607      	mov	r7, r0
  4070ae:	bb34      	cbnz	r4, 4070fe <__d2b+0x6c>
  4070b0:	9201      	str	r2, [sp, #4]
  4070b2:	f1b8 0f00 	cmp.w	r8, #0
  4070b6:	d027      	beq.n	407108 <__d2b+0x76>
  4070b8:	a802      	add	r0, sp, #8
  4070ba:	f840 8d08 	str.w	r8, [r0, #-8]!
  4070be:	f7ff fe0c 	bl	406cda <__lo0bits>
  4070c2:	9900      	ldr	r1, [sp, #0]
  4070c4:	b1f0      	cbz	r0, 407104 <__d2b+0x72>
  4070c6:	9a01      	ldr	r2, [sp, #4]
  4070c8:	f1c0 0320 	rsb	r3, r0, #32
  4070cc:	fa02 f303 	lsl.w	r3, r2, r3
  4070d0:	430b      	orrs	r3, r1
  4070d2:	40c2      	lsrs	r2, r0
  4070d4:	617b      	str	r3, [r7, #20]
  4070d6:	9201      	str	r2, [sp, #4]
  4070d8:	9b01      	ldr	r3, [sp, #4]
  4070da:	61bb      	str	r3, [r7, #24]
  4070dc:	2b00      	cmp	r3, #0
  4070de:	bf14      	ite	ne
  4070e0:	2102      	movne	r1, #2
  4070e2:	2101      	moveq	r1, #1
  4070e4:	6139      	str	r1, [r7, #16]
  4070e6:	b1c4      	cbz	r4, 40711a <__d2b+0x88>
  4070e8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  4070ec:	4404      	add	r4, r0
  4070ee:	6034      	str	r4, [r6, #0]
  4070f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4070f4:	6028      	str	r0, [r5, #0]
  4070f6:	4638      	mov	r0, r7
  4070f8:	b002      	add	sp, #8
  4070fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4070fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  407102:	e7d5      	b.n	4070b0 <__d2b+0x1e>
  407104:	6179      	str	r1, [r7, #20]
  407106:	e7e7      	b.n	4070d8 <__d2b+0x46>
  407108:	a801      	add	r0, sp, #4
  40710a:	f7ff fde6 	bl	406cda <__lo0bits>
  40710e:	9b01      	ldr	r3, [sp, #4]
  407110:	617b      	str	r3, [r7, #20]
  407112:	2101      	movs	r1, #1
  407114:	6139      	str	r1, [r7, #16]
  407116:	3020      	adds	r0, #32
  407118:	e7e5      	b.n	4070e6 <__d2b+0x54>
  40711a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40711e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407122:	6030      	str	r0, [r6, #0]
  407124:	6918      	ldr	r0, [r3, #16]
  407126:	f7ff fdb9 	bl	406c9c <__hi0bits>
  40712a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40712e:	e7e1      	b.n	4070f4 <__d2b+0x62>

00407130 <_calloc_r>:
  407130:	b538      	push	{r3, r4, r5, lr}
  407132:	fb02 f401 	mul.w	r4, r2, r1
  407136:	4621      	mov	r1, r4
  407138:	f000 f856 	bl	4071e8 <_malloc_r>
  40713c:	4605      	mov	r5, r0
  40713e:	b118      	cbz	r0, 407148 <_calloc_r+0x18>
  407140:	4622      	mov	r2, r4
  407142:	2100      	movs	r1, #0
  407144:	f7fd ff3f 	bl	404fc6 <memset>
  407148:	4628      	mov	r0, r5
  40714a:	bd38      	pop	{r3, r4, r5, pc}

0040714c <_free_r>:
  40714c:	b538      	push	{r3, r4, r5, lr}
  40714e:	4605      	mov	r5, r0
  407150:	2900      	cmp	r1, #0
  407152:	d045      	beq.n	4071e0 <_free_r+0x94>
  407154:	f851 3c04 	ldr.w	r3, [r1, #-4]
  407158:	1f0c      	subs	r4, r1, #4
  40715a:	2b00      	cmp	r3, #0
  40715c:	bfb8      	it	lt
  40715e:	18e4      	addlt	r4, r4, r3
  407160:	f000 fb5a 	bl	407818 <__malloc_lock>
  407164:	4a1f      	ldr	r2, [pc, #124]	; (4071e4 <_free_r+0x98>)
  407166:	6813      	ldr	r3, [r2, #0]
  407168:	4610      	mov	r0, r2
  40716a:	b933      	cbnz	r3, 40717a <_free_r+0x2e>
  40716c:	6063      	str	r3, [r4, #4]
  40716e:	6014      	str	r4, [r2, #0]
  407170:	4628      	mov	r0, r5
  407172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407176:	f000 bb50 	b.w	40781a <__malloc_unlock>
  40717a:	42a3      	cmp	r3, r4
  40717c:	d90c      	bls.n	407198 <_free_r+0x4c>
  40717e:	6821      	ldr	r1, [r4, #0]
  407180:	1862      	adds	r2, r4, r1
  407182:	4293      	cmp	r3, r2
  407184:	bf04      	itt	eq
  407186:	681a      	ldreq	r2, [r3, #0]
  407188:	685b      	ldreq	r3, [r3, #4]
  40718a:	6063      	str	r3, [r4, #4]
  40718c:	bf04      	itt	eq
  40718e:	1852      	addeq	r2, r2, r1
  407190:	6022      	streq	r2, [r4, #0]
  407192:	6004      	str	r4, [r0, #0]
  407194:	e7ec      	b.n	407170 <_free_r+0x24>
  407196:	4613      	mov	r3, r2
  407198:	685a      	ldr	r2, [r3, #4]
  40719a:	b10a      	cbz	r2, 4071a0 <_free_r+0x54>
  40719c:	42a2      	cmp	r2, r4
  40719e:	d9fa      	bls.n	407196 <_free_r+0x4a>
  4071a0:	6819      	ldr	r1, [r3, #0]
  4071a2:	1858      	adds	r0, r3, r1
  4071a4:	42a0      	cmp	r0, r4
  4071a6:	d10b      	bne.n	4071c0 <_free_r+0x74>
  4071a8:	6820      	ldr	r0, [r4, #0]
  4071aa:	4401      	add	r1, r0
  4071ac:	1858      	adds	r0, r3, r1
  4071ae:	4282      	cmp	r2, r0
  4071b0:	6019      	str	r1, [r3, #0]
  4071b2:	d1dd      	bne.n	407170 <_free_r+0x24>
  4071b4:	6810      	ldr	r0, [r2, #0]
  4071b6:	6852      	ldr	r2, [r2, #4]
  4071b8:	605a      	str	r2, [r3, #4]
  4071ba:	4401      	add	r1, r0
  4071bc:	6019      	str	r1, [r3, #0]
  4071be:	e7d7      	b.n	407170 <_free_r+0x24>
  4071c0:	d902      	bls.n	4071c8 <_free_r+0x7c>
  4071c2:	230c      	movs	r3, #12
  4071c4:	602b      	str	r3, [r5, #0]
  4071c6:	e7d3      	b.n	407170 <_free_r+0x24>
  4071c8:	6820      	ldr	r0, [r4, #0]
  4071ca:	1821      	adds	r1, r4, r0
  4071cc:	428a      	cmp	r2, r1
  4071ce:	bf04      	itt	eq
  4071d0:	6811      	ldreq	r1, [r2, #0]
  4071d2:	6852      	ldreq	r2, [r2, #4]
  4071d4:	6062      	str	r2, [r4, #4]
  4071d6:	bf04      	itt	eq
  4071d8:	1809      	addeq	r1, r1, r0
  4071da:	6021      	streq	r1, [r4, #0]
  4071dc:	605c      	str	r4, [r3, #4]
  4071de:	e7c7      	b.n	407170 <_free_r+0x24>
  4071e0:	bd38      	pop	{r3, r4, r5, pc}
  4071e2:	bf00      	nop
  4071e4:	204004c8 	.word	0x204004c8

004071e8 <_malloc_r>:
  4071e8:	b570      	push	{r4, r5, r6, lr}
  4071ea:	1ccd      	adds	r5, r1, #3
  4071ec:	f025 0503 	bic.w	r5, r5, #3
  4071f0:	3508      	adds	r5, #8
  4071f2:	2d0c      	cmp	r5, #12
  4071f4:	bf38      	it	cc
  4071f6:	250c      	movcc	r5, #12
  4071f8:	2d00      	cmp	r5, #0
  4071fa:	4606      	mov	r6, r0
  4071fc:	db01      	blt.n	407202 <_malloc_r+0x1a>
  4071fe:	42a9      	cmp	r1, r5
  407200:	d903      	bls.n	40720a <_malloc_r+0x22>
  407202:	230c      	movs	r3, #12
  407204:	6033      	str	r3, [r6, #0]
  407206:	2000      	movs	r0, #0
  407208:	bd70      	pop	{r4, r5, r6, pc}
  40720a:	f000 fb05 	bl	407818 <__malloc_lock>
  40720e:	4a23      	ldr	r2, [pc, #140]	; (40729c <_malloc_r+0xb4>)
  407210:	6814      	ldr	r4, [r2, #0]
  407212:	4621      	mov	r1, r4
  407214:	b991      	cbnz	r1, 40723c <_malloc_r+0x54>
  407216:	4c22      	ldr	r4, [pc, #136]	; (4072a0 <_malloc_r+0xb8>)
  407218:	6823      	ldr	r3, [r4, #0]
  40721a:	b91b      	cbnz	r3, 407224 <_malloc_r+0x3c>
  40721c:	4630      	mov	r0, r6
  40721e:	f000 f97f 	bl	407520 <_sbrk_r>
  407222:	6020      	str	r0, [r4, #0]
  407224:	4629      	mov	r1, r5
  407226:	4630      	mov	r0, r6
  407228:	f000 f97a 	bl	407520 <_sbrk_r>
  40722c:	1c43      	adds	r3, r0, #1
  40722e:	d126      	bne.n	40727e <_malloc_r+0x96>
  407230:	230c      	movs	r3, #12
  407232:	6033      	str	r3, [r6, #0]
  407234:	4630      	mov	r0, r6
  407236:	f000 faf0 	bl	40781a <__malloc_unlock>
  40723a:	e7e4      	b.n	407206 <_malloc_r+0x1e>
  40723c:	680b      	ldr	r3, [r1, #0]
  40723e:	1b5b      	subs	r3, r3, r5
  407240:	d41a      	bmi.n	407278 <_malloc_r+0x90>
  407242:	2b0b      	cmp	r3, #11
  407244:	d90f      	bls.n	407266 <_malloc_r+0x7e>
  407246:	600b      	str	r3, [r1, #0]
  407248:	50cd      	str	r5, [r1, r3]
  40724a:	18cc      	adds	r4, r1, r3
  40724c:	4630      	mov	r0, r6
  40724e:	f000 fae4 	bl	40781a <__malloc_unlock>
  407252:	f104 000b 	add.w	r0, r4, #11
  407256:	1d23      	adds	r3, r4, #4
  407258:	f020 0007 	bic.w	r0, r0, #7
  40725c:	1ac3      	subs	r3, r0, r3
  40725e:	d01b      	beq.n	407298 <_malloc_r+0xb0>
  407260:	425a      	negs	r2, r3
  407262:	50e2      	str	r2, [r4, r3]
  407264:	bd70      	pop	{r4, r5, r6, pc}
  407266:	428c      	cmp	r4, r1
  407268:	bf0d      	iteet	eq
  40726a:	6863      	ldreq	r3, [r4, #4]
  40726c:	684b      	ldrne	r3, [r1, #4]
  40726e:	6063      	strne	r3, [r4, #4]
  407270:	6013      	streq	r3, [r2, #0]
  407272:	bf18      	it	ne
  407274:	460c      	movne	r4, r1
  407276:	e7e9      	b.n	40724c <_malloc_r+0x64>
  407278:	460c      	mov	r4, r1
  40727a:	6849      	ldr	r1, [r1, #4]
  40727c:	e7ca      	b.n	407214 <_malloc_r+0x2c>
  40727e:	1cc4      	adds	r4, r0, #3
  407280:	f024 0403 	bic.w	r4, r4, #3
  407284:	42a0      	cmp	r0, r4
  407286:	d005      	beq.n	407294 <_malloc_r+0xac>
  407288:	1a21      	subs	r1, r4, r0
  40728a:	4630      	mov	r0, r6
  40728c:	f000 f948 	bl	407520 <_sbrk_r>
  407290:	3001      	adds	r0, #1
  407292:	d0cd      	beq.n	407230 <_malloc_r+0x48>
  407294:	6025      	str	r5, [r4, #0]
  407296:	e7d9      	b.n	40724c <_malloc_r+0x64>
  407298:	bd70      	pop	{r4, r5, r6, pc}
  40729a:	bf00      	nop
  40729c:	204004c8 	.word	0x204004c8
  4072a0:	204004cc 	.word	0x204004cc

004072a4 <__sfputc_r>:
  4072a4:	6893      	ldr	r3, [r2, #8]
  4072a6:	3b01      	subs	r3, #1
  4072a8:	2b00      	cmp	r3, #0
  4072aa:	b410      	push	{r4}
  4072ac:	6093      	str	r3, [r2, #8]
  4072ae:	da08      	bge.n	4072c2 <__sfputc_r+0x1e>
  4072b0:	6994      	ldr	r4, [r2, #24]
  4072b2:	42a3      	cmp	r3, r4
  4072b4:	db02      	blt.n	4072bc <__sfputc_r+0x18>
  4072b6:	b2cb      	uxtb	r3, r1
  4072b8:	2b0a      	cmp	r3, #10
  4072ba:	d102      	bne.n	4072c2 <__sfputc_r+0x1e>
  4072bc:	bc10      	pop	{r4}
  4072be:	f000 b983 	b.w	4075c8 <__swbuf_r>
  4072c2:	6813      	ldr	r3, [r2, #0]
  4072c4:	1c58      	adds	r0, r3, #1
  4072c6:	6010      	str	r0, [r2, #0]
  4072c8:	7019      	strb	r1, [r3, #0]
  4072ca:	b2c8      	uxtb	r0, r1
  4072cc:	bc10      	pop	{r4}
  4072ce:	4770      	bx	lr

004072d0 <__sfputs_r>:
  4072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4072d2:	4606      	mov	r6, r0
  4072d4:	460f      	mov	r7, r1
  4072d6:	4614      	mov	r4, r2
  4072d8:	18d5      	adds	r5, r2, r3
  4072da:	42ac      	cmp	r4, r5
  4072dc:	d101      	bne.n	4072e2 <__sfputs_r+0x12>
  4072de:	2000      	movs	r0, #0
  4072e0:	e007      	b.n	4072f2 <__sfputs_r+0x22>
  4072e2:	463a      	mov	r2, r7
  4072e4:	f814 1b01 	ldrb.w	r1, [r4], #1
  4072e8:	4630      	mov	r0, r6
  4072ea:	f7ff ffdb 	bl	4072a4 <__sfputc_r>
  4072ee:	1c43      	adds	r3, r0, #1
  4072f0:	d1f3      	bne.n	4072da <__sfputs_r+0xa>
  4072f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004072f4 <_vfiprintf_r>:
  4072f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4072f8:	b09d      	sub	sp, #116	; 0x74
  4072fa:	460c      	mov	r4, r1
  4072fc:	4617      	mov	r7, r2
  4072fe:	9303      	str	r3, [sp, #12]
  407300:	4606      	mov	r6, r0
  407302:	b118      	cbz	r0, 40730c <_vfiprintf_r+0x18>
  407304:	6983      	ldr	r3, [r0, #24]
  407306:	b90b      	cbnz	r3, 40730c <_vfiprintf_r+0x18>
  407308:	f7ff faea 	bl	4068e0 <__sinit>
  40730c:	4b7c      	ldr	r3, [pc, #496]	; (407500 <_vfiprintf_r+0x20c>)
  40730e:	429c      	cmp	r4, r3
  407310:	d157      	bne.n	4073c2 <_vfiprintf_r+0xce>
  407312:	6874      	ldr	r4, [r6, #4]
  407314:	89a3      	ldrh	r3, [r4, #12]
  407316:	0718      	lsls	r0, r3, #28
  407318:	d55d      	bpl.n	4073d6 <_vfiprintf_r+0xe2>
  40731a:	6923      	ldr	r3, [r4, #16]
  40731c:	2b00      	cmp	r3, #0
  40731e:	d05a      	beq.n	4073d6 <_vfiprintf_r+0xe2>
  407320:	2300      	movs	r3, #0
  407322:	9309      	str	r3, [sp, #36]	; 0x24
  407324:	2320      	movs	r3, #32
  407326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40732a:	2330      	movs	r3, #48	; 0x30
  40732c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  407330:	f04f 0b01 	mov.w	fp, #1
  407334:	46b8      	mov	r8, r7
  407336:	4645      	mov	r5, r8
  407338:	f815 3b01 	ldrb.w	r3, [r5], #1
  40733c:	2b00      	cmp	r3, #0
  40733e:	d155      	bne.n	4073ec <_vfiprintf_r+0xf8>
  407340:	ebb8 0a07 	subs.w	sl, r8, r7
  407344:	d00b      	beq.n	40735e <_vfiprintf_r+0x6a>
  407346:	4653      	mov	r3, sl
  407348:	463a      	mov	r2, r7
  40734a:	4621      	mov	r1, r4
  40734c:	4630      	mov	r0, r6
  40734e:	f7ff ffbf 	bl	4072d0 <__sfputs_r>
  407352:	3001      	adds	r0, #1
  407354:	f000 80c4 	beq.w	4074e0 <_vfiprintf_r+0x1ec>
  407358:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40735a:	4453      	add	r3, sl
  40735c:	9309      	str	r3, [sp, #36]	; 0x24
  40735e:	f898 3000 	ldrb.w	r3, [r8]
  407362:	2b00      	cmp	r3, #0
  407364:	f000 80bc 	beq.w	4074e0 <_vfiprintf_r+0x1ec>
  407368:	2300      	movs	r3, #0
  40736a:	f04f 32ff 	mov.w	r2, #4294967295
  40736e:	9304      	str	r3, [sp, #16]
  407370:	9307      	str	r3, [sp, #28]
  407372:	9205      	str	r2, [sp, #20]
  407374:	9306      	str	r3, [sp, #24]
  407376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40737a:	931a      	str	r3, [sp, #104]	; 0x68
  40737c:	2205      	movs	r2, #5
  40737e:	7829      	ldrb	r1, [r5, #0]
  407380:	4860      	ldr	r0, [pc, #384]	; (407504 <_vfiprintf_r+0x210>)
  407382:	f7ff fbb5 	bl	406af0 <memchr>
  407386:	f105 0801 	add.w	r8, r5, #1
  40738a:	9b04      	ldr	r3, [sp, #16]
  40738c:	2800      	cmp	r0, #0
  40738e:	d131      	bne.n	4073f4 <_vfiprintf_r+0x100>
  407390:	06d9      	lsls	r1, r3, #27
  407392:	bf44      	itt	mi
  407394:	2220      	movmi	r2, #32
  407396:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40739a:	071a      	lsls	r2, r3, #28
  40739c:	bf44      	itt	mi
  40739e:	222b      	movmi	r2, #43	; 0x2b
  4073a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4073a4:	782a      	ldrb	r2, [r5, #0]
  4073a6:	2a2a      	cmp	r2, #42	; 0x2a
  4073a8:	d02c      	beq.n	407404 <_vfiprintf_r+0x110>
  4073aa:	9a07      	ldr	r2, [sp, #28]
  4073ac:	2100      	movs	r1, #0
  4073ae:	200a      	movs	r0, #10
  4073b0:	46a8      	mov	r8, r5
  4073b2:	3501      	adds	r5, #1
  4073b4:	f898 3000 	ldrb.w	r3, [r8]
  4073b8:	3b30      	subs	r3, #48	; 0x30
  4073ba:	2b09      	cmp	r3, #9
  4073bc:	d96d      	bls.n	40749a <_vfiprintf_r+0x1a6>
  4073be:	b371      	cbz	r1, 40741e <_vfiprintf_r+0x12a>
  4073c0:	e026      	b.n	407410 <_vfiprintf_r+0x11c>
  4073c2:	4b51      	ldr	r3, [pc, #324]	; (407508 <_vfiprintf_r+0x214>)
  4073c4:	429c      	cmp	r4, r3
  4073c6:	d101      	bne.n	4073cc <_vfiprintf_r+0xd8>
  4073c8:	68b4      	ldr	r4, [r6, #8]
  4073ca:	e7a3      	b.n	407314 <_vfiprintf_r+0x20>
  4073cc:	4b4f      	ldr	r3, [pc, #316]	; (40750c <_vfiprintf_r+0x218>)
  4073ce:	429c      	cmp	r4, r3
  4073d0:	bf08      	it	eq
  4073d2:	68f4      	ldreq	r4, [r6, #12]
  4073d4:	e79e      	b.n	407314 <_vfiprintf_r+0x20>
  4073d6:	4621      	mov	r1, r4
  4073d8:	4630      	mov	r0, r6
  4073da:	f000 f959 	bl	407690 <__swsetup_r>
  4073de:	2800      	cmp	r0, #0
  4073e0:	d09e      	beq.n	407320 <_vfiprintf_r+0x2c>
  4073e2:	f04f 30ff 	mov.w	r0, #4294967295
  4073e6:	b01d      	add	sp, #116	; 0x74
  4073e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4073ec:	2b25      	cmp	r3, #37	; 0x25
  4073ee:	d0a7      	beq.n	407340 <_vfiprintf_r+0x4c>
  4073f0:	46a8      	mov	r8, r5
  4073f2:	e7a0      	b.n	407336 <_vfiprintf_r+0x42>
  4073f4:	4a43      	ldr	r2, [pc, #268]	; (407504 <_vfiprintf_r+0x210>)
  4073f6:	1a80      	subs	r0, r0, r2
  4073f8:	fa0b f000 	lsl.w	r0, fp, r0
  4073fc:	4318      	orrs	r0, r3
  4073fe:	9004      	str	r0, [sp, #16]
  407400:	4645      	mov	r5, r8
  407402:	e7bb      	b.n	40737c <_vfiprintf_r+0x88>
  407404:	9a03      	ldr	r2, [sp, #12]
  407406:	1d11      	adds	r1, r2, #4
  407408:	6812      	ldr	r2, [r2, #0]
  40740a:	9103      	str	r1, [sp, #12]
  40740c:	2a00      	cmp	r2, #0
  40740e:	db01      	blt.n	407414 <_vfiprintf_r+0x120>
  407410:	9207      	str	r2, [sp, #28]
  407412:	e004      	b.n	40741e <_vfiprintf_r+0x12a>
  407414:	4252      	negs	r2, r2
  407416:	f043 0302 	orr.w	r3, r3, #2
  40741a:	9207      	str	r2, [sp, #28]
  40741c:	9304      	str	r3, [sp, #16]
  40741e:	f898 3000 	ldrb.w	r3, [r8]
  407422:	2b2e      	cmp	r3, #46	; 0x2e
  407424:	d110      	bne.n	407448 <_vfiprintf_r+0x154>
  407426:	f898 3001 	ldrb.w	r3, [r8, #1]
  40742a:	2b2a      	cmp	r3, #42	; 0x2a
  40742c:	f108 0101 	add.w	r1, r8, #1
  407430:	d137      	bne.n	4074a2 <_vfiprintf_r+0x1ae>
  407432:	9b03      	ldr	r3, [sp, #12]
  407434:	1d1a      	adds	r2, r3, #4
  407436:	681b      	ldr	r3, [r3, #0]
  407438:	9203      	str	r2, [sp, #12]
  40743a:	2b00      	cmp	r3, #0
  40743c:	bfb8      	it	lt
  40743e:	f04f 33ff 	movlt.w	r3, #4294967295
  407442:	f108 0802 	add.w	r8, r8, #2
  407446:	9305      	str	r3, [sp, #20]
  407448:	4d31      	ldr	r5, [pc, #196]	; (407510 <_vfiprintf_r+0x21c>)
  40744a:	f898 1000 	ldrb.w	r1, [r8]
  40744e:	2203      	movs	r2, #3
  407450:	4628      	mov	r0, r5
  407452:	f7ff fb4d 	bl	406af0 <memchr>
  407456:	b140      	cbz	r0, 40746a <_vfiprintf_r+0x176>
  407458:	2340      	movs	r3, #64	; 0x40
  40745a:	1b40      	subs	r0, r0, r5
  40745c:	fa03 f000 	lsl.w	r0, r3, r0
  407460:	9b04      	ldr	r3, [sp, #16]
  407462:	4303      	orrs	r3, r0
  407464:	9304      	str	r3, [sp, #16]
  407466:	f108 0801 	add.w	r8, r8, #1
  40746a:	f898 1000 	ldrb.w	r1, [r8]
  40746e:	4829      	ldr	r0, [pc, #164]	; (407514 <_vfiprintf_r+0x220>)
  407470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  407474:	2206      	movs	r2, #6
  407476:	f108 0701 	add.w	r7, r8, #1
  40747a:	f7ff fb39 	bl	406af0 <memchr>
  40747e:	2800      	cmp	r0, #0
  407480:	d034      	beq.n	4074ec <_vfiprintf_r+0x1f8>
  407482:	4b25      	ldr	r3, [pc, #148]	; (407518 <_vfiprintf_r+0x224>)
  407484:	bb03      	cbnz	r3, 4074c8 <_vfiprintf_r+0x1d4>
  407486:	9b03      	ldr	r3, [sp, #12]
  407488:	3307      	adds	r3, #7
  40748a:	f023 0307 	bic.w	r3, r3, #7
  40748e:	3308      	adds	r3, #8
  407490:	9303      	str	r3, [sp, #12]
  407492:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407494:	444b      	add	r3, r9
  407496:	9309      	str	r3, [sp, #36]	; 0x24
  407498:	e74c      	b.n	407334 <_vfiprintf_r+0x40>
  40749a:	fb00 3202 	mla	r2, r0, r2, r3
  40749e:	2101      	movs	r1, #1
  4074a0:	e786      	b.n	4073b0 <_vfiprintf_r+0xbc>
  4074a2:	2300      	movs	r3, #0
  4074a4:	9305      	str	r3, [sp, #20]
  4074a6:	4618      	mov	r0, r3
  4074a8:	250a      	movs	r5, #10
  4074aa:	4688      	mov	r8, r1
  4074ac:	3101      	adds	r1, #1
  4074ae:	f898 2000 	ldrb.w	r2, [r8]
  4074b2:	3a30      	subs	r2, #48	; 0x30
  4074b4:	2a09      	cmp	r2, #9
  4074b6:	d903      	bls.n	4074c0 <_vfiprintf_r+0x1cc>
  4074b8:	2b00      	cmp	r3, #0
  4074ba:	d0c5      	beq.n	407448 <_vfiprintf_r+0x154>
  4074bc:	9005      	str	r0, [sp, #20]
  4074be:	e7c3      	b.n	407448 <_vfiprintf_r+0x154>
  4074c0:	fb05 2000 	mla	r0, r5, r0, r2
  4074c4:	2301      	movs	r3, #1
  4074c6:	e7f0      	b.n	4074aa <_vfiprintf_r+0x1b6>
  4074c8:	ab03      	add	r3, sp, #12
  4074ca:	9300      	str	r3, [sp, #0]
  4074cc:	4622      	mov	r2, r4
  4074ce:	4b13      	ldr	r3, [pc, #76]	; (40751c <_vfiprintf_r+0x228>)
  4074d0:	a904      	add	r1, sp, #16
  4074d2:	4630      	mov	r0, r6
  4074d4:	f7fd fe10 	bl	4050f8 <_printf_float>
  4074d8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4074dc:	4681      	mov	r9, r0
  4074de:	d1d8      	bne.n	407492 <_vfiprintf_r+0x19e>
  4074e0:	89a3      	ldrh	r3, [r4, #12]
  4074e2:	065b      	lsls	r3, r3, #25
  4074e4:	f53f af7d 	bmi.w	4073e2 <_vfiprintf_r+0xee>
  4074e8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4074ea:	e77c      	b.n	4073e6 <_vfiprintf_r+0xf2>
  4074ec:	ab03      	add	r3, sp, #12
  4074ee:	9300      	str	r3, [sp, #0]
  4074f0:	4622      	mov	r2, r4
  4074f2:	4b0a      	ldr	r3, [pc, #40]	; (40751c <_vfiprintf_r+0x228>)
  4074f4:	a904      	add	r1, sp, #16
  4074f6:	4630      	mov	r0, r6
  4074f8:	f7fe f8ac 	bl	405654 <_printf_i>
  4074fc:	e7ec      	b.n	4074d8 <_vfiprintf_r+0x1e4>
  4074fe:	bf00      	nop
  407500:	00407f40 	.word	0x00407f40
  407504:	0040807c 	.word	0x0040807c
  407508:	00407f60 	.word	0x00407f60
  40750c:	00407f20 	.word	0x00407f20
  407510:	00408082 	.word	0x00408082
  407514:	00408086 	.word	0x00408086
  407518:	004050f9 	.word	0x004050f9
  40751c:	004072d1 	.word	0x004072d1

00407520 <_sbrk_r>:
  407520:	b538      	push	{r3, r4, r5, lr}
  407522:	4c06      	ldr	r4, [pc, #24]	; (40753c <_sbrk_r+0x1c>)
  407524:	2300      	movs	r3, #0
  407526:	4605      	mov	r5, r0
  407528:	4608      	mov	r0, r1
  40752a:	6023      	str	r3, [r4, #0]
  40752c:	f7fa fc38 	bl	401da0 <_sbrk>
  407530:	1c43      	adds	r3, r0, #1
  407532:	d102      	bne.n	40753a <_sbrk_r+0x1a>
  407534:	6823      	ldr	r3, [r4, #0]
  407536:	b103      	cbz	r3, 40753a <_sbrk_r+0x1a>
  407538:	602b      	str	r3, [r5, #0]
  40753a:	bd38      	pop	{r3, r4, r5, pc}
  40753c:	204007b8 	.word	0x204007b8

00407540 <__sread>:
  407540:	b510      	push	{r4, lr}
  407542:	460c      	mov	r4, r1
  407544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407548:	f000 f968 	bl	40781c <_read_r>
  40754c:	2800      	cmp	r0, #0
  40754e:	bfab      	itete	ge
  407550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  407552:	89a3      	ldrhlt	r3, [r4, #12]
  407554:	181b      	addge	r3, r3, r0
  407556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  40755a:	bfac      	ite	ge
  40755c:	6563      	strge	r3, [r4, #84]	; 0x54
  40755e:	81a3      	strhlt	r3, [r4, #12]
  407560:	bd10      	pop	{r4, pc}

00407562 <__swrite>:
  407562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407566:	461f      	mov	r7, r3
  407568:	898b      	ldrh	r3, [r1, #12]
  40756a:	05db      	lsls	r3, r3, #23
  40756c:	4605      	mov	r5, r0
  40756e:	460c      	mov	r4, r1
  407570:	4616      	mov	r6, r2
  407572:	d505      	bpl.n	407580 <__swrite+0x1e>
  407574:	2302      	movs	r3, #2
  407576:	2200      	movs	r2, #0
  407578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40757c:	f000 f928 	bl	4077d0 <_lseek_r>
  407580:	89a3      	ldrh	r3, [r4, #12]
  407582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40758a:	81a3      	strh	r3, [r4, #12]
  40758c:	4632      	mov	r2, r6
  40758e:	463b      	mov	r3, r7
  407590:	4628      	mov	r0, r5
  407592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407596:	f000 b869 	b.w	40766c <_write_r>

0040759a <__sseek>:
  40759a:	b510      	push	{r4, lr}
  40759c:	460c      	mov	r4, r1
  40759e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4075a2:	f000 f915 	bl	4077d0 <_lseek_r>
  4075a6:	1c43      	adds	r3, r0, #1
  4075a8:	89a3      	ldrh	r3, [r4, #12]
  4075aa:	bf15      	itete	ne
  4075ac:	6560      	strne	r0, [r4, #84]	; 0x54
  4075ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4075b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4075b6:	81a3      	strheq	r3, [r4, #12]
  4075b8:	bf18      	it	ne
  4075ba:	81a3      	strhne	r3, [r4, #12]
  4075bc:	bd10      	pop	{r4, pc}

004075be <__sclose>:
  4075be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4075c2:	f000 b8d3 	b.w	40776c <_close_r>
	...

004075c8 <__swbuf_r>:
  4075c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4075ca:	460e      	mov	r6, r1
  4075cc:	4614      	mov	r4, r2
  4075ce:	4605      	mov	r5, r0
  4075d0:	b118      	cbz	r0, 4075da <__swbuf_r+0x12>
  4075d2:	6983      	ldr	r3, [r0, #24]
  4075d4:	b90b      	cbnz	r3, 4075da <__swbuf_r+0x12>
  4075d6:	f7ff f983 	bl	4068e0 <__sinit>
  4075da:	4b21      	ldr	r3, [pc, #132]	; (407660 <__swbuf_r+0x98>)
  4075dc:	429c      	cmp	r4, r3
  4075de:	d12a      	bne.n	407636 <__swbuf_r+0x6e>
  4075e0:	686c      	ldr	r4, [r5, #4]
  4075e2:	69a3      	ldr	r3, [r4, #24]
  4075e4:	60a3      	str	r3, [r4, #8]
  4075e6:	89a3      	ldrh	r3, [r4, #12]
  4075e8:	071a      	lsls	r2, r3, #28
  4075ea:	d52e      	bpl.n	40764a <__swbuf_r+0x82>
  4075ec:	6923      	ldr	r3, [r4, #16]
  4075ee:	b363      	cbz	r3, 40764a <__swbuf_r+0x82>
  4075f0:	6923      	ldr	r3, [r4, #16]
  4075f2:	6820      	ldr	r0, [r4, #0]
  4075f4:	1ac0      	subs	r0, r0, r3
  4075f6:	6963      	ldr	r3, [r4, #20]
  4075f8:	b2f6      	uxtb	r6, r6
  4075fa:	4298      	cmp	r0, r3
  4075fc:	4637      	mov	r7, r6
  4075fe:	db04      	blt.n	40760a <__swbuf_r+0x42>
  407600:	4621      	mov	r1, r4
  407602:	4628      	mov	r0, r5
  407604:	f7ff f902 	bl	40680c <_fflush_r>
  407608:	bb28      	cbnz	r0, 407656 <__swbuf_r+0x8e>
  40760a:	68a3      	ldr	r3, [r4, #8]
  40760c:	3b01      	subs	r3, #1
  40760e:	60a3      	str	r3, [r4, #8]
  407610:	6823      	ldr	r3, [r4, #0]
  407612:	1c5a      	adds	r2, r3, #1
  407614:	6022      	str	r2, [r4, #0]
  407616:	701e      	strb	r6, [r3, #0]
  407618:	6963      	ldr	r3, [r4, #20]
  40761a:	3001      	adds	r0, #1
  40761c:	4298      	cmp	r0, r3
  40761e:	d004      	beq.n	40762a <__swbuf_r+0x62>
  407620:	89a3      	ldrh	r3, [r4, #12]
  407622:	07db      	lsls	r3, r3, #31
  407624:	d519      	bpl.n	40765a <__swbuf_r+0x92>
  407626:	2e0a      	cmp	r6, #10
  407628:	d117      	bne.n	40765a <__swbuf_r+0x92>
  40762a:	4621      	mov	r1, r4
  40762c:	4628      	mov	r0, r5
  40762e:	f7ff f8ed 	bl	40680c <_fflush_r>
  407632:	b190      	cbz	r0, 40765a <__swbuf_r+0x92>
  407634:	e00f      	b.n	407656 <__swbuf_r+0x8e>
  407636:	4b0b      	ldr	r3, [pc, #44]	; (407664 <__swbuf_r+0x9c>)
  407638:	429c      	cmp	r4, r3
  40763a:	d101      	bne.n	407640 <__swbuf_r+0x78>
  40763c:	68ac      	ldr	r4, [r5, #8]
  40763e:	e7d0      	b.n	4075e2 <__swbuf_r+0x1a>
  407640:	4b09      	ldr	r3, [pc, #36]	; (407668 <__swbuf_r+0xa0>)
  407642:	429c      	cmp	r4, r3
  407644:	bf08      	it	eq
  407646:	68ec      	ldreq	r4, [r5, #12]
  407648:	e7cb      	b.n	4075e2 <__swbuf_r+0x1a>
  40764a:	4621      	mov	r1, r4
  40764c:	4628      	mov	r0, r5
  40764e:	f000 f81f 	bl	407690 <__swsetup_r>
  407652:	2800      	cmp	r0, #0
  407654:	d0cc      	beq.n	4075f0 <__swbuf_r+0x28>
  407656:	f04f 37ff 	mov.w	r7, #4294967295
  40765a:	4638      	mov	r0, r7
  40765c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40765e:	bf00      	nop
  407660:	00407f40 	.word	0x00407f40
  407664:	00407f60 	.word	0x00407f60
  407668:	00407f20 	.word	0x00407f20

0040766c <_write_r>:
  40766c:	b538      	push	{r3, r4, r5, lr}
  40766e:	4c07      	ldr	r4, [pc, #28]	; (40768c <_write_r+0x20>)
  407670:	4605      	mov	r5, r0
  407672:	4608      	mov	r0, r1
  407674:	4611      	mov	r1, r2
  407676:	2200      	movs	r2, #0
  407678:	6022      	str	r2, [r4, #0]
  40767a:	461a      	mov	r2, r3
  40767c:	f7fb fc20 	bl	402ec0 <_write>
  407680:	1c43      	adds	r3, r0, #1
  407682:	d102      	bne.n	40768a <_write_r+0x1e>
  407684:	6823      	ldr	r3, [r4, #0]
  407686:	b103      	cbz	r3, 40768a <_write_r+0x1e>
  407688:	602b      	str	r3, [r5, #0]
  40768a:	bd38      	pop	{r3, r4, r5, pc}
  40768c:	204007b8 	.word	0x204007b8

00407690 <__swsetup_r>:
  407690:	4b32      	ldr	r3, [pc, #200]	; (40775c <__swsetup_r+0xcc>)
  407692:	b570      	push	{r4, r5, r6, lr}
  407694:	681d      	ldr	r5, [r3, #0]
  407696:	4606      	mov	r6, r0
  407698:	460c      	mov	r4, r1
  40769a:	b125      	cbz	r5, 4076a6 <__swsetup_r+0x16>
  40769c:	69ab      	ldr	r3, [r5, #24]
  40769e:	b913      	cbnz	r3, 4076a6 <__swsetup_r+0x16>
  4076a0:	4628      	mov	r0, r5
  4076a2:	f7ff f91d 	bl	4068e0 <__sinit>
  4076a6:	4b2e      	ldr	r3, [pc, #184]	; (407760 <__swsetup_r+0xd0>)
  4076a8:	429c      	cmp	r4, r3
  4076aa:	d10f      	bne.n	4076cc <__swsetup_r+0x3c>
  4076ac:	686c      	ldr	r4, [r5, #4]
  4076ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4076b2:	b29a      	uxth	r2, r3
  4076b4:	0715      	lsls	r5, r2, #28
  4076b6:	d42c      	bmi.n	407712 <__swsetup_r+0x82>
  4076b8:	06d0      	lsls	r0, r2, #27
  4076ba:	d411      	bmi.n	4076e0 <__swsetup_r+0x50>
  4076bc:	2209      	movs	r2, #9
  4076be:	6032      	str	r2, [r6, #0]
  4076c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4076c4:	81a3      	strh	r3, [r4, #12]
  4076c6:	f04f 30ff 	mov.w	r0, #4294967295
  4076ca:	bd70      	pop	{r4, r5, r6, pc}
  4076cc:	4b25      	ldr	r3, [pc, #148]	; (407764 <__swsetup_r+0xd4>)
  4076ce:	429c      	cmp	r4, r3
  4076d0:	d101      	bne.n	4076d6 <__swsetup_r+0x46>
  4076d2:	68ac      	ldr	r4, [r5, #8]
  4076d4:	e7eb      	b.n	4076ae <__swsetup_r+0x1e>
  4076d6:	4b24      	ldr	r3, [pc, #144]	; (407768 <__swsetup_r+0xd8>)
  4076d8:	429c      	cmp	r4, r3
  4076da:	bf08      	it	eq
  4076dc:	68ec      	ldreq	r4, [r5, #12]
  4076de:	e7e6      	b.n	4076ae <__swsetup_r+0x1e>
  4076e0:	0751      	lsls	r1, r2, #29
  4076e2:	d512      	bpl.n	40770a <__swsetup_r+0x7a>
  4076e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4076e6:	b141      	cbz	r1, 4076fa <__swsetup_r+0x6a>
  4076e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4076ec:	4299      	cmp	r1, r3
  4076ee:	d002      	beq.n	4076f6 <__swsetup_r+0x66>
  4076f0:	4630      	mov	r0, r6
  4076f2:	f7ff fd2b 	bl	40714c <_free_r>
  4076f6:	2300      	movs	r3, #0
  4076f8:	6363      	str	r3, [r4, #52]	; 0x34
  4076fa:	89a3      	ldrh	r3, [r4, #12]
  4076fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  407700:	81a3      	strh	r3, [r4, #12]
  407702:	2300      	movs	r3, #0
  407704:	6063      	str	r3, [r4, #4]
  407706:	6923      	ldr	r3, [r4, #16]
  407708:	6023      	str	r3, [r4, #0]
  40770a:	89a3      	ldrh	r3, [r4, #12]
  40770c:	f043 0308 	orr.w	r3, r3, #8
  407710:	81a3      	strh	r3, [r4, #12]
  407712:	6923      	ldr	r3, [r4, #16]
  407714:	b94b      	cbnz	r3, 40772a <__swsetup_r+0x9a>
  407716:	89a3      	ldrh	r3, [r4, #12]
  407718:	f403 7320 	and.w	r3, r3, #640	; 0x280
  40771c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407720:	d003      	beq.n	40772a <__swsetup_r+0x9a>
  407722:	4621      	mov	r1, r4
  407724:	4630      	mov	r0, r6
  407726:	f7ff f997 	bl	406a58 <__smakebuf_r>
  40772a:	89a2      	ldrh	r2, [r4, #12]
  40772c:	f012 0301 	ands.w	r3, r2, #1
  407730:	d00c      	beq.n	40774c <__swsetup_r+0xbc>
  407732:	2300      	movs	r3, #0
  407734:	60a3      	str	r3, [r4, #8]
  407736:	6963      	ldr	r3, [r4, #20]
  407738:	425b      	negs	r3, r3
  40773a:	61a3      	str	r3, [r4, #24]
  40773c:	6923      	ldr	r3, [r4, #16]
  40773e:	b953      	cbnz	r3, 407756 <__swsetup_r+0xc6>
  407740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407744:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  407748:	d1ba      	bne.n	4076c0 <__swsetup_r+0x30>
  40774a:	bd70      	pop	{r4, r5, r6, pc}
  40774c:	0792      	lsls	r2, r2, #30
  40774e:	bf58      	it	pl
  407750:	6963      	ldrpl	r3, [r4, #20]
  407752:	60a3      	str	r3, [r4, #8]
  407754:	e7f2      	b.n	40773c <__swsetup_r+0xac>
  407756:	2000      	movs	r0, #0
  407758:	e7f7      	b.n	40774a <__swsetup_r+0xba>
  40775a:	bf00      	nop
  40775c:	2040004c 	.word	0x2040004c
  407760:	00407f40 	.word	0x00407f40
  407764:	00407f60 	.word	0x00407f60
  407768:	00407f20 	.word	0x00407f20

0040776c <_close_r>:
  40776c:	b538      	push	{r3, r4, r5, lr}
  40776e:	4c06      	ldr	r4, [pc, #24]	; (407788 <_close_r+0x1c>)
  407770:	2300      	movs	r3, #0
  407772:	4605      	mov	r5, r0
  407774:	4608      	mov	r0, r1
  407776:	6023      	str	r3, [r4, #0]
  407778:	f7fa fb24 	bl	401dc4 <_close>
  40777c:	1c43      	adds	r3, r0, #1
  40777e:	d102      	bne.n	407786 <_close_r+0x1a>
  407780:	6823      	ldr	r3, [r4, #0]
  407782:	b103      	cbz	r3, 407786 <_close_r+0x1a>
  407784:	602b      	str	r3, [r5, #0]
  407786:	bd38      	pop	{r3, r4, r5, pc}
  407788:	204007b8 	.word	0x204007b8

0040778c <_fstat_r>:
  40778c:	b538      	push	{r3, r4, r5, lr}
  40778e:	4c07      	ldr	r4, [pc, #28]	; (4077ac <_fstat_r+0x20>)
  407790:	2300      	movs	r3, #0
  407792:	4605      	mov	r5, r0
  407794:	4608      	mov	r0, r1
  407796:	4611      	mov	r1, r2
  407798:	6023      	str	r3, [r4, #0]
  40779a:	f7fa fb16 	bl	401dca <_fstat>
  40779e:	1c43      	adds	r3, r0, #1
  4077a0:	d102      	bne.n	4077a8 <_fstat_r+0x1c>
  4077a2:	6823      	ldr	r3, [r4, #0]
  4077a4:	b103      	cbz	r3, 4077a8 <_fstat_r+0x1c>
  4077a6:	602b      	str	r3, [r5, #0]
  4077a8:	bd38      	pop	{r3, r4, r5, pc}
  4077aa:	bf00      	nop
  4077ac:	204007b8 	.word	0x204007b8

004077b0 <_isatty_r>:
  4077b0:	b538      	push	{r3, r4, r5, lr}
  4077b2:	4c06      	ldr	r4, [pc, #24]	; (4077cc <_isatty_r+0x1c>)
  4077b4:	2300      	movs	r3, #0
  4077b6:	4605      	mov	r5, r0
  4077b8:	4608      	mov	r0, r1
  4077ba:	6023      	str	r3, [r4, #0]
  4077bc:	f7fa fb0a 	bl	401dd4 <_isatty>
  4077c0:	1c43      	adds	r3, r0, #1
  4077c2:	d102      	bne.n	4077ca <_isatty_r+0x1a>
  4077c4:	6823      	ldr	r3, [r4, #0]
  4077c6:	b103      	cbz	r3, 4077ca <_isatty_r+0x1a>
  4077c8:	602b      	str	r3, [r5, #0]
  4077ca:	bd38      	pop	{r3, r4, r5, pc}
  4077cc:	204007b8 	.word	0x204007b8

004077d0 <_lseek_r>:
  4077d0:	b538      	push	{r3, r4, r5, lr}
  4077d2:	4c07      	ldr	r4, [pc, #28]	; (4077f0 <_lseek_r+0x20>)
  4077d4:	4605      	mov	r5, r0
  4077d6:	4608      	mov	r0, r1
  4077d8:	4611      	mov	r1, r2
  4077da:	2200      	movs	r2, #0
  4077dc:	6022      	str	r2, [r4, #0]
  4077de:	461a      	mov	r2, r3
  4077e0:	f7fa fafa 	bl	401dd8 <_lseek>
  4077e4:	1c43      	adds	r3, r0, #1
  4077e6:	d102      	bne.n	4077ee <_lseek_r+0x1e>
  4077e8:	6823      	ldr	r3, [r4, #0]
  4077ea:	b103      	cbz	r3, 4077ee <_lseek_r+0x1e>
  4077ec:	602b      	str	r3, [r5, #0]
  4077ee:	bd38      	pop	{r3, r4, r5, pc}
  4077f0:	204007b8 	.word	0x204007b8

004077f4 <__ascii_mbtowc>:
  4077f4:	b082      	sub	sp, #8
  4077f6:	b901      	cbnz	r1, 4077fa <__ascii_mbtowc+0x6>
  4077f8:	a901      	add	r1, sp, #4
  4077fa:	b142      	cbz	r2, 40780e <__ascii_mbtowc+0x1a>
  4077fc:	b14b      	cbz	r3, 407812 <__ascii_mbtowc+0x1e>
  4077fe:	7813      	ldrb	r3, [r2, #0]
  407800:	600b      	str	r3, [r1, #0]
  407802:	7812      	ldrb	r2, [r2, #0]
  407804:	1c10      	adds	r0, r2, #0
  407806:	bf18      	it	ne
  407808:	2001      	movne	r0, #1
  40780a:	b002      	add	sp, #8
  40780c:	4770      	bx	lr
  40780e:	4610      	mov	r0, r2
  407810:	e7fb      	b.n	40780a <__ascii_mbtowc+0x16>
  407812:	f06f 0001 	mvn.w	r0, #1
  407816:	e7f8      	b.n	40780a <__ascii_mbtowc+0x16>

00407818 <__malloc_lock>:
  407818:	4770      	bx	lr

0040781a <__malloc_unlock>:
  40781a:	4770      	bx	lr

0040781c <_read_r>:
  40781c:	b538      	push	{r3, r4, r5, lr}
  40781e:	4c07      	ldr	r4, [pc, #28]	; (40783c <_read_r+0x20>)
  407820:	4605      	mov	r5, r0
  407822:	4608      	mov	r0, r1
  407824:	4611      	mov	r1, r2
  407826:	2200      	movs	r2, #0
  407828:	6022      	str	r2, [r4, #0]
  40782a:	461a      	mov	r2, r3
  40782c:	f7fb fb36 	bl	402e9c <_read>
  407830:	1c43      	adds	r3, r0, #1
  407832:	d102      	bne.n	40783a <_read_r+0x1e>
  407834:	6823      	ldr	r3, [r4, #0]
  407836:	b103      	cbz	r3, 40783a <_read_r+0x1e>
  407838:	602b      	str	r3, [r5, #0]
  40783a:	bd38      	pop	{r3, r4, r5, pc}
  40783c:	204007b8 	.word	0x204007b8

00407840 <__ascii_wctomb>:
  407840:	b149      	cbz	r1, 407856 <__ascii_wctomb+0x16>
  407842:	2aff      	cmp	r2, #255	; 0xff
  407844:	bf85      	ittet	hi
  407846:	238a      	movhi	r3, #138	; 0x8a
  407848:	6003      	strhi	r3, [r0, #0]
  40784a:	700a      	strbls	r2, [r1, #0]
  40784c:	f04f 30ff 	movhi.w	r0, #4294967295
  407850:	bf98      	it	ls
  407852:	2001      	movls	r0, #1
  407854:	4770      	bx	lr
  407856:	4608      	mov	r0, r1
  407858:	4770      	bx	lr
  40785a:	0000      	movs	r0, r0
  40785c:	20534f50 	.word	0x20534f50
  407860:	00000a31 	.word	0x00000a31
  407864:	20534f50 	.word	0x20534f50
  407868:	00000a33 	.word	0x00000a33
  40786c:	65746e69 	.word	0x65746e69
  407870:	70757272 	.word	0x70757272
  407874:	202d2074 	.word	0x202d2074
  407878:	20434441 	.word	0x20434441
  40787c:	202d2030 	.word	0x202d2030
  407880:	25206925 	.word	0x25206925
  407884:	69252069 	.word	0x69252069
  407888:	20692520 	.word	0x20692520
  40788c:	25206925 	.word	0x25206925
  407890:	0a202069 	.word	0x0a202069
  407894:	00000000 	.word	0x00000000
  407898:	61746144 	.word	0x61746144
  40789c:	6c6f6320 	.word	0x6c6f6320
  4078a0:	7463656c 	.word	0x7463656c
  4078a4:	202c6465 	.word	0x202c6465
  4078a8:	6e75616c 	.word	0x6e75616c
  4078ac:	6e696863 	.word	0x6e696863
  4078b0:	6f632067 	.word	0x6f632067
  4078b4:	6f72746e 	.word	0x6f72746e
  4078b8:	6f6c206c 	.word	0x6f6c206c
  4078bc:	6620706f 	.word	0x6620706f
  4078c0:	206d6f72 	.word	0x206d6f72
  4078c4:	20636461 	.word	0x20636461
  4078c8:	00000a30 	.word	0x00000a30
  4078cc:	65746e69 	.word	0x65746e69
  4078d0:	70757272 	.word	0x70757272
  4078d4:	202d2074 	.word	0x202d2074
  4078d8:	20434441 	.word	0x20434441
  4078dc:	202d2031 	.word	0x202d2031
  4078e0:	25206925 	.word	0x25206925
  4078e4:	69252069 	.word	0x69252069
  4078e8:	20692520 	.word	0x20692520
  4078ec:	00000a20 	.word	0x00000a20
  4078f0:	61746144 	.word	0x61746144
  4078f4:	6c6f6320 	.word	0x6c6f6320
  4078f8:	7463656c 	.word	0x7463656c
  4078fc:	202c6465 	.word	0x202c6465
  407900:	6e75616c 	.word	0x6e75616c
  407904:	6e696863 	.word	0x6e696863
  407908:	6f632067 	.word	0x6f632067
  40790c:	6f72746e 	.word	0x6f72746e
  407910:	6f6c206c 	.word	0x6f6c206c
  407914:	6620706f 	.word	0x6620706f
  407918:	206d6f72 	.word	0x206d6f72
  40791c:	20636461 	.word	0x20636461
  407920:	000a2031 	.word	0x000a2031
  407924:	682f2e2e 	.word	0x682f2e2e
  407928:	732f6c61 	.word	0x732f6c61
  40792c:	682f6372 	.word	0x682f6372
  407930:	615f6c61 	.word	0x615f6c61
  407934:	615f6364 	.word	0x615f6364
  407938:	636e7973 	.word	0x636e7973
  40793c:	0000632e 	.word	0x0000632e
  407940:	682f2e2e 	.word	0x682f2e2e
  407944:	732f6c61 	.word	0x732f6c61
  407948:	682f6372 	.word	0x682f6372
  40794c:	695f6c61 	.word	0x695f6c61
  407950:	00632e6f 	.word	0x00632e6f
  407954:	682f2e2e 	.word	0x682f2e2e
  407958:	732f6c61 	.word	0x732f6c61
  40795c:	682f6372 	.word	0x682f6372
  407960:	705f6c61 	.word	0x705f6c61
  407964:	632e6d77 	.word	0x632e6d77
  407968:	00000000 	.word	0x00000000
  40796c:	682f2e2e 	.word	0x682f2e2e
  407970:	732f6c61 	.word	0x732f6c61
  407974:	682f6372 	.word	0x682f6372
  407978:	745f6c61 	.word	0x745f6c61
  40797c:	72656d69 	.word	0x72656d69
  407980:	0000632e 	.word	0x0000632e
  407984:	682f2e2e 	.word	0x682f2e2e
  407988:	732f6c61 	.word	0x732f6c61
  40798c:	682f6372 	.word	0x682f6372
  407990:	755f6c61 	.word	0x755f6c61
  407994:	74726173 	.word	0x74726173
  407998:	6e79735f 	.word	0x6e79735f
  40799c:	00632e63 	.word	0x00632e63
  4079a0:	682f2e2e 	.word	0x682f2e2e
  4079a4:	752f6c61 	.word	0x752f6c61
  4079a8:	736c6974 	.word	0x736c6974
  4079ac:	6372732f 	.word	0x6372732f
  4079b0:	6974752f 	.word	0x6974752f
  4079b4:	6c5f736c 	.word	0x6c5f736c
  4079b8:	2e747369 	.word	0x2e747369
  4079bc:	00000063 	.word	0x00000063
  4079c0:	682f2e2e 	.word	0x682f2e2e
  4079c4:	752f6c61 	.word	0x752f6c61
  4079c8:	736c6974 	.word	0x736c6974
  4079cc:	6372732f 	.word	0x6372732f
  4079d0:	6974752f 	.word	0x6974752f
  4079d4:	725f736c 	.word	0x725f736c
  4079d8:	62676e69 	.word	0x62676e69
  4079dc:	65666675 	.word	0x65666675
  4079e0:	00632e72 	.word	0x00632e72

004079e4 <_afecs>:
  4079e4:	00000000 2f84310b 23000000 ffffffff     .....1./...#....
  4079f4:	0000ffff 00000000 00000000 00000000     ................
  407a04:	0000010c 00000000 00000000 00000000     ................
  407a14:	00000000 00000200 00000200 00000200     ................
  407a24:	00000200 00000200 00000200 00000200     ................
  407a34:	00000200 00000200 00000200 00000200     ................
  407a44:	00000200 00000001 2f84310b 23000000     .........1./...#
  407a54:	ffffffff 0000ffff 00000000 00000000     ................
  407a64:	00000000 0000010c 00000000 00000000     ................
	...
  407a7c:	00000200 00000200 00000200 00000200     ................
  407a8c:	00000200 00000200 00000200 00000200     ................
  407a9c:	00000200 00000200 00000200 00000200     ................
  407aac:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  407abc:	63656661 0000632e                       afec.c..

00407ac4 <_ext_irq>:
  407ac4:	00000000 00000024 00000000 00000000     ....$...........
	...
  407ae0:	00000001 00002000 00002000 00002000     ..... ... ... ..
  407af0:	00000000 00002000 00000000 00000003     ..... ..........
  407b00:	00080000 00000000 00000000 00000000     ................
	...

00407b18 <_pio_irq_n>:
  407b18:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  407b28:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  407b38:	00000000                                ....

00407b3c <_pwms>:
  407b3c:	40020000 0000001f 00010005 00000001     ...@............
  407b4c:	00000001 000000ff 00000000 00000004     ................
	...
  407b68:	00000002 00407bc4 00000001 20400390     .....{@.......@ 
  407b78:	4005c000 0000003c 00010005 00000001     ...@<...........
  407b88:	00000001 000000ff 00000000 00000004     ................
	...
  407ba4:	00000001 00407bb4 00000001 20400384     .....{@.......@ 

00407bb4 <_ch_cfg1>:
  407bb4:	00000000 0000010b 000003e8 00000200     ................

00407bc4 <_ch_cfg0>:
  407bc4:	00000000 0000010b 000003e8 00000200     ................
  407bd4:	00000002 0000010b 000003e8 00000200     ................
  407be4:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  407bf4:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  407c04:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00407c10 <_usarts>:
  407c10:	00000001 001008c0 000100f4 682f2e2e     ............../h
  407c20:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  407c30:	632e7472 00000000                       rt.c....

00407c38 <_cfgs>:
  407c38:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  407c48:	00000040 00000000 00000040 00000000     @.......@.......
  407c58:	00000040 00000000 00000040 00000000     @.......@.......
  407c68:	00000040 00000000 00000040 00000000     @.......@.......
  407c78:	00000040 00000000 00000040 00000000     @.......@.......
  407c88:	00000040 00000000 00000040 00000000     @.......@.......
  407c98:	00000040 00000000 00000040 00000000     @.......@.......
  407ca8:	00000040 00000000 00000040 00000000     @.......@.......
  407cb8:	00000040 00000000 00000040 00000000     @.......@.......
  407cc8:	00000040 00000000 00000040 00000000     @.......@.......
  407cd8:	00000040 00000000 00000040 00000000     @.......@.......
  407ce8:	00000040 00000000 00000040 00000000     @.......@.......
  407cf8:	74727173 00000000                       sqrt....

00407d00 <npio2_hw>:
  407d00:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  407d10:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  407d20:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  407d30:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  407d40:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  407d50:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  407d60:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  407d70:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00407d80 <two_over_pi>:
  407d80:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  407d90:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  407da0:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  407db0:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  407dc0:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  407dd0:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  407de0:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  407df0:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  407e00:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  407e10:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  407e20:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  407e30:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  407e40:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  407e50:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  407e60:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  407e70:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  407e80:	0060e27b 00c08c6b                       {.`.k...

00407e88 <PIo2>:
  407e88:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  407e98:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  407ea8:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  407eb8:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00407ec8 <init_jk>:
  407ec8:	00000002 00000003 00000004 00000006     ................

00407ed8 <_global_impure_ptr>:
  407ed8:	20400050 00464e49 00666e69 004e414e     P.@ INF.inf.NAN.
  407ee8:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  407ef8:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  407f08:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  407f18:	4e614e00 00000000                       .NaN....

00407f20 <__sf_fake_stderr>:
	...

00407f40 <__sf_fake_stdin>:
	...

00407f60 <__sf_fake_stdout>:
	...

00407f80 <__mprec_bigtens>:
  407f80:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  407f90:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  407fa0:	7f73bf3c 75154fdd                       <.s..O.u

00407fa8 <__mprec_tens>:
  407fa8:	00000000 3ff00000 00000000 40240000     .......?......$@
  407fb8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  407fc8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  407fd8:	00000000 412e8480 00000000 416312d0     .......A......cA
  407fe8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  407ff8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408008:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408018:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408028:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408038:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408048:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408058:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408068:	79d99db4 44ea7843                       ...yCx.D

00408070 <p05.6047>:
  408070:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  408080:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  408090:	5849534f 00002e00                                OSIX...

00408097 <_ctype_>:
  408097:	20202000 20202020 28282020 20282828     .         ((((( 
  4080a7:	20202020 20202020 20202020 20202020                     
  4080b7:	10108820 10101010 10101010 10101010      ...............
  4080c7:	04040410 04040404 10040404 10101010     ................
  4080d7:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4080e7:	01010101 01010101 01010101 10101010     ................
  4080f7:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408107:	02020202 02020202 02020202 10101010     ................
  408117:	00000020 00000000 00000000 00000000      ...............
	...

00408198 <_init>:
  408198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40819a:	bf00      	nop
  40819c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40819e:	bc08      	pop	{r3}
  4081a0:	469e      	mov	lr, r3
  4081a2:	4770      	bx	lr

004081a4 <__init_array_start>:
  4081a4:	0040018d 	.word	0x0040018d

004081a8 <_fini>:
  4081a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4081aa:	bf00      	nop
  4081ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4081ae:	bc08      	pop	{r3}
  4081b0:	469e      	mov	lr, r3
  4081b2:	4770      	bx	lr

004081b4 <__fini_array_start>:
  4081b4:	00400169 	.word	0x00400169
