
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b80  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d0  20400000  00404b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000110  204001d0  00404d50  000201d0  2**2
                  ALLOC
  3 .heap         00000200  204002e0  00404e60  000201d0  2**0
                  ALLOC
  4 .stack        00000400  204004e0  00405060  000201d0  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000201fe  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001ba33  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003968  00000000  00000000  0003bc8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008aaa  00000000  00000000  0003f5f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a70  00000000  00000000  0004809c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008e8  00000000  00000000  00048b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00042f37  00000000  00000000  000493f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016397  00000000  00000000  0008c32b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00152256  00000000  00000000  000a26c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000026fc  00000000  00000000  001f4918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 08 40 20 ed 01 40 00 e9 01 40 00 e9 01 40 00     ..@ ..@...@...@.
  400010:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40003c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40004c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40005c:	e9 01 40 00 e9 01 40 00 00 00 00 00 b5 0d 40 00     ..@...@.......@.
  40006c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40007c:	e9 01 40 00 a9 0d 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40008c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40009c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ac:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000bc:	01 0f 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000cc:	e9 01 40 00 e9 01 40 00 79 0b 40 00 e9 01 40 00     ..@...@.y.@...@.
  4000dc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ec:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000fc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40010c:	e9 01 40 00 e9 01 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ......@...@...@.
  40012c:	e9 01 40 00 15 0f 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40013c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40014c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40015c:	e9 01 40 00 e9 01 40 00 e9 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204001d0 	.word	0x204001d0
  400184:	00000000 	.word	0x00000000
  400188:	00404b80 	.word	0x00404b80

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00404b80 	.word	0x00404b80
  4001c8:	204001d4 	.word	0x204001d4
  4001cc:	00404b80 	.word	0x00404b80
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	0040054d 	.word	0x0040054d
  4001e4:	004013d9 	.word	0x004013d9

004001e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e8:	e7fe      	b.n	4001e8 <Dummy_Handler>
	...

004001ec <Reset_Handler>:
{
  4001ec:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <Reset_Handler+0x44>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <Reset_Handler+0x48>)
  4001f2:	429a      	cmp	r2, r3
  4001f4:	d009      	beq.n	40020a <Reset_Handler+0x1e>
  4001f6:	4b0e      	ldr	r3, [pc, #56]	; (400230 <Reset_Handler+0x44>)
  4001f8:	4a0e      	ldr	r2, [pc, #56]	; (400234 <Reset_Handler+0x48>)
  4001fa:	e003      	b.n	400204 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001fc:	6811      	ldr	r1, [r2, #0]
  4001fe:	6019      	str	r1, [r3, #0]
  400200:	3304      	adds	r3, #4
  400202:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400204:	490c      	ldr	r1, [pc, #48]	; (400238 <Reset_Handler+0x4c>)
  400206:	428b      	cmp	r3, r1
  400208:	d3f8      	bcc.n	4001fc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40020a:	4b0c      	ldr	r3, [pc, #48]	; (40023c <Reset_Handler+0x50>)
  40020c:	e002      	b.n	400214 <Reset_Handler+0x28>
                *pDest++ = 0;
  40020e:	2200      	movs	r2, #0
  400210:	601a      	str	r2, [r3, #0]
  400212:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400214:	4a0a      	ldr	r2, [pc, #40]	; (400240 <Reset_Handler+0x54>)
  400216:	4293      	cmp	r3, r2
  400218:	d3f9      	bcc.n	40020e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40021a:	4a0a      	ldr	r2, [pc, #40]	; (400244 <Reset_Handler+0x58>)
  40021c:	4b0a      	ldr	r3, [pc, #40]	; (400248 <Reset_Handler+0x5c>)
  40021e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400222:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400224:	4b09      	ldr	r3, [pc, #36]	; (40024c <Reset_Handler+0x60>)
  400226:	4798      	blx	r3
        main();
  400228:	4b09      	ldr	r3, [pc, #36]	; (400250 <Reset_Handler+0x64>)
  40022a:	4798      	blx	r3
  40022c:	e7fe      	b.n	40022c <Reset_Handler+0x40>
  40022e:	bf00      	nop
  400230:	20400000 	.word	0x20400000
  400234:	00404b80 	.word	0x00404b80
  400238:	204001d0 	.word	0x204001d0
  40023c:	204001d0 	.word	0x204001d0
  400240:	204002e0 	.word	0x204002e0
  400244:	e000ed00 	.word	0xe000ed00
  400248:	00400000 	.word	0x00400000
  40024c:	004013f9 	.word	0x004013f9
  400250:	004012dd 	.word	0x004012dd

00400254 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400254:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400258:	4b08      	ldr	r3, [pc, #32]	; (40027c <ADC_0_PORT_init+0x28>)
  40025a:	601a      	str	r2, [r3, #0]
  40025c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400260:	2208      	movs	r2, #8
  400262:	601a      	str	r2, [r3, #0]
  400264:	2204      	movs	r2, #4
  400266:	601a      	str	r2, [r3, #0]
  400268:	4a05      	ldr	r2, [pc, #20]	; (400280 <ADC_0_PORT_init+0x2c>)
  40026a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40026e:	6011      	str	r1, [r2, #0]
  400270:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400274:	6011      	str	r1, [r2, #0]
  400276:	2201      	movs	r2, #1
  400278:	601a      	str	r2, [r3, #0]
  40027a:	4770      	bx	lr
  40027c:	400e1400 	.word	0x400e1400
  400280:	400e0e00 	.word	0x400e0e00

00400284 <ADC_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400284:	4b04      	ldr	r3, [pc, #16]	; (400298 <ADC_0_CLOCK_init+0x14>)
  400286:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400288:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40028c:	d103      	bne.n	400296 <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40028e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400292:	4b01      	ldr	r3, [pc, #4]	; (400298 <ADC_0_CLOCK_init+0x14>)
  400294:	611a      	str	r2, [r3, #16]
  400296:	4770      	bx	lr
  400298:	400e0600 	.word	0x400e0600

0040029c <ADC_0_init>:

	_pmc_enable_periph_clock(ID_AFEC0);
}

void ADC_0_init(void)
{
  40029c:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  40029e:	4b05      	ldr	r3, [pc, #20]	; (4002b4 <ADC_0_init+0x18>)
  4002a0:	4798      	blx	r3
	ADC_0_PORT_init();
  4002a2:	4b05      	ldr	r3, [pc, #20]	; (4002b8 <ADC_0_init+0x1c>)
  4002a4:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  4002a6:	2200      	movs	r2, #0
  4002a8:	4904      	ldr	r1, [pc, #16]	; (4002bc <ADC_0_init+0x20>)
  4002aa:	4805      	ldr	r0, [pc, #20]	; (4002c0 <ADC_0_init+0x24>)
  4002ac:	4b05      	ldr	r3, [pc, #20]	; (4002c4 <ADC_0_init+0x28>)
  4002ae:	4798      	blx	r3
  4002b0:	bd08      	pop	{r3, pc}
  4002b2:	bf00      	nop
  4002b4:	00400285 	.word	0x00400285
  4002b8:	00400255 	.word	0x00400255
  4002bc:	4003c000 	.word	0x4003c000
  4002c0:	204002b8 	.word	0x204002b8
  4002c4:	0040064d 	.word	0x0040064d

004002c8 <ADC_1_PORT_init>:
  4002c8:	2202      	movs	r2, #2
  4002ca:	4b07      	ldr	r3, [pc, #28]	; (4002e8 <ADC_1_PORT_init+0x20>)
  4002cc:	601a      	str	r2, [r3, #0]
  4002ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4002d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4002d6:	601a      	str	r2, [r3, #0]
  4002d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4002dc:	601a      	str	r2, [r3, #0]
  4002de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4002e2:	601a      	str	r2, [r3, #0]
  4002e4:	4770      	bx	lr
  4002e6:	bf00      	nop
  4002e8:	400e1000 	.word	0x400e1000

004002ec <ADC_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4002ec:	4b05      	ldr	r3, [pc, #20]	; (400304 <ADC_1_CLOCK_init+0x18>)
  4002ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4002f2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002f6:	d104      	bne.n	400302 <ADC_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4002f8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4002fc:	4b01      	ldr	r3, [pc, #4]	; (400304 <ADC_1_CLOCK_init+0x18>)
  4002fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400302:	4770      	bx	lr
  400304:	400e0600 	.word	0x400e0600

00400308 <ADC_1_init>:

	_pmc_enable_periph_clock(ID_AFEC1);
}

void ADC_1_init(void)
{
  400308:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
  40030a:	4b05      	ldr	r3, [pc, #20]	; (400320 <ADC_1_init+0x18>)
  40030c:	4798      	blx	r3
	ADC_1_PORT_init();
  40030e:	4b05      	ldr	r3, [pc, #20]	; (400324 <ADC_1_init+0x1c>)
  400310:	4798      	blx	r3
	adc_sync_init(&ADC_1, AFEC1, (void *)NULL);
  400312:	2200      	movs	r2, #0
  400314:	4904      	ldr	r1, [pc, #16]	; (400328 <ADC_1_init+0x20>)
  400316:	4805      	ldr	r0, [pc, #20]	; (40032c <ADC_1_init+0x24>)
  400318:	4b05      	ldr	r3, [pc, #20]	; (400330 <ADC_1_init+0x28>)
  40031a:	4798      	blx	r3
  40031c:	bd08      	pop	{r3, pc}
  40031e:	bf00      	nop
  400320:	004002ed 	.word	0x004002ed
  400324:	004002c9 	.word	0x004002c9
  400328:	40064000 	.word	0x40064000
  40032c:	204002d8 	.word	0x204002d8
  400330:	0040064d 	.word	0x0040064d

00400334 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400334:	4b04      	ldr	r3, [pc, #16]	; (400348 <EXTERNAL_IRQ_D_init+0x14>)
  400336:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40033a:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  40033c:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  40033e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400342:	601a      	str	r2, [r3, #0]
  400344:	4770      	bx	lr
  400346:	bf00      	nop
  400348:	400e1400 	.word	0x400e1400

0040034c <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  40034c:	4b06      	ldr	r3, [pc, #24]	; (400368 <EXTERNAL_IRQ_A_init+0x1c>)
  40034e:	2204      	movs	r2, #4
  400350:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400352:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400354:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400358:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40035a:	2220      	movs	r2, #32
  40035c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40035e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400364:	601a      	str	r2, [r3, #0]
  400366:	4770      	bx	lr
  400368:	400e0e00 	.word	0x400e0e00

0040036c <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40036c:	4b16      	ldr	r3, [pc, #88]	; (4003c8 <PWM_0_PORT_init+0x5c>)
  40036e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400370:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400374:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400376:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400378:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  40037c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40037e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400382:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400384:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400386:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  40038a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40038c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40038e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400392:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400398:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40039a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40039c:	f022 0202 	bic.w	r2, r2, #2
  4003a0:	671a      	str	r2, [r3, #112]	; 0x70
  4003a2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003a4:	f022 0202 	bic.w	r2, r2, #2
  4003a8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003aa:	2202      	movs	r2, #2
  4003ac:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003b0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  4003b4:	671a      	str	r2, [r3, #112]	; 0x70
  4003b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003b8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  4003bc:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4003c2:	605a      	str	r2, [r3, #4]
  4003c4:	4770      	bx	lr
  4003c6:	bf00      	nop
  4003c8:	400e0e00 	.word	0x400e0e00

004003cc <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003cc:	4b04      	ldr	r3, [pc, #16]	; (4003e0 <PWM_0_CLOCK_init+0x14>)
  4003ce:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4003d0:	2b00      	cmp	r3, #0
  4003d2:	db03      	blt.n	4003dc <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4003d8:	4b01      	ldr	r3, [pc, #4]	; (4003e0 <PWM_0_CLOCK_init+0x14>)
  4003da:	611a      	str	r2, [r3, #16]
  4003dc:	4770      	bx	lr
  4003de:	bf00      	nop
  4003e0:	400e0600 	.word	0x400e0600

004003e4 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  4003e4:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  4003e6:	4b06      	ldr	r3, [pc, #24]	; (400400 <PWM_0_init+0x1c>)
  4003e8:	4798      	blx	r3
	PWM_0_PORT_init();
  4003ea:	4b06      	ldr	r3, [pc, #24]	; (400404 <PWM_0_init+0x20>)
  4003ec:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  4003ee:	4b06      	ldr	r3, [pc, #24]	; (400408 <PWM_0_init+0x24>)
  4003f0:	4798      	blx	r3
  4003f2:	4602      	mov	r2, r0
  4003f4:	4905      	ldr	r1, [pc, #20]	; (40040c <PWM_0_init+0x28>)
  4003f6:	4806      	ldr	r0, [pc, #24]	; (400410 <PWM_0_init+0x2c>)
  4003f8:	4b06      	ldr	r3, [pc, #24]	; (400414 <PWM_0_init+0x30>)
  4003fa:	4798      	blx	r3
  4003fc:	bd08      	pop	{r3, pc}
  4003fe:	bf00      	nop
  400400:	004003cd 	.word	0x004003cd
  400404:	0040036d 	.word	0x0040036d
  400408:	00401061 	.word	0x00401061
  40040c:	40020000 	.word	0x40020000
  400410:	20400268 	.word	0x20400268
  400414:	004007b9 	.word	0x004007b9

00400418 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400418:	4b0c      	ldr	r3, [pc, #48]	; (40044c <PWM_1_PORT_init+0x34>)
  40041a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40041c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400420:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400422:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400424:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400428:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40042a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40042e:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400430:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400434:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400436:	f042 0201 	orr.w	r2, r2, #1
  40043a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40043c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40043e:	f022 0201 	bic.w	r2, r2, #1
  400442:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400444:	2201      	movs	r2, #1
  400446:	605a      	str	r2, [r3, #4]
  400448:	4770      	bx	lr
  40044a:	bf00      	nop
  40044c:	400e0e00 	.word	0x400e0e00

00400450 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400450:	4b05      	ldr	r3, [pc, #20]	; (400468 <PWM_1_CLOCK_init+0x18>)
  400452:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400456:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  40045a:	d104      	bne.n	400466 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40045c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400460:	4b01      	ldr	r3, [pc, #4]	; (400468 <PWM_1_CLOCK_init+0x18>)
  400462:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400466:	4770      	bx	lr
  400468:	400e0600 	.word	0x400e0600

0040046c <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  40046c:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  40046e:	4b06      	ldr	r3, [pc, #24]	; (400488 <PWM_1_init+0x1c>)
  400470:	4798      	blx	r3
	PWM_1_PORT_init();
  400472:	4b06      	ldr	r3, [pc, #24]	; (40048c <PWM_1_init+0x20>)
  400474:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400476:	4b06      	ldr	r3, [pc, #24]	; (400490 <PWM_1_init+0x24>)
  400478:	4798      	blx	r3
  40047a:	4602      	mov	r2, r0
  40047c:	4905      	ldr	r1, [pc, #20]	; (400494 <PWM_1_init+0x28>)
  40047e:	4806      	ldr	r0, [pc, #24]	; (400498 <PWM_1_init+0x2c>)
  400480:	4b06      	ldr	r3, [pc, #24]	; (40049c <PWM_1_init+0x30>)
  400482:	4798      	blx	r3
  400484:	bd08      	pop	{r3, pc}
  400486:	bf00      	nop
  400488:	00400451 	.word	0x00400451
  40048c:	00400419 	.word	0x00400419
  400490:	00401061 	.word	0x00401061
  400494:	4005c000 	.word	0x4005c000
  400498:	204002bc 	.word	0x204002bc
  40049c:	004007b9 	.word	0x004007b9

004004a0 <delay_driver_init>:
}

void delay_driver_init(void)
{
  4004a0:	b508      	push	{r3, lr}
	delay_init(SysTick);
  4004a2:	4802      	ldr	r0, [pc, #8]	; (4004ac <delay_driver_init+0xc>)
  4004a4:	4b02      	ldr	r3, [pc, #8]	; (4004b0 <delay_driver_init+0x10>)
  4004a6:	4798      	blx	r3
  4004a8:	bd08      	pop	{r3, pc}
  4004aa:	bf00      	nop
  4004ac:	e000e010 	.word	0xe000e010
  4004b0:	00400699 	.word	0x00400699

004004b4 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004b4:	4b0f      	ldr	r3, [pc, #60]	; (4004f4 <EDBG_COM_PORT_init+0x40>)
  4004b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004b8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4004bc:	671a      	str	r2, [r3, #112]	; 0x70
  4004be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004c0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4004c4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004ca:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  4004cc:	4a0a      	ldr	r2, [pc, #40]	; (4004f8 <EDBG_COM_PORT_init+0x44>)
  4004ce:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4004d2:	f043 0310 	orr.w	r3, r3, #16
  4004d6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4004da:	4b08      	ldr	r3, [pc, #32]	; (4004fc <EDBG_COM_PORT_init+0x48>)
  4004dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004de:	f042 0210 	orr.w	r2, r2, #16
  4004e2:	671a      	str	r2, [r3, #112]	; 0x70
  4004e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004e6:	f042 0210 	orr.w	r2, r2, #16
  4004ea:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004ec:	2210      	movs	r2, #16
  4004ee:	605a      	str	r2, [r3, #4]
  4004f0:	4770      	bx	lr
  4004f2:	bf00      	nop
  4004f4:	400e0e00 	.word	0x400e0e00
  4004f8:	40088000 	.word	0x40088000
  4004fc:	400e1000 	.word	0x400e1000

00400500 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400500:	4b04      	ldr	r3, [pc, #16]	; (400514 <EDBG_COM_CLOCK_init+0x14>)
  400502:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400504:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400508:	d103      	bne.n	400512 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40050a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40050e:	4b01      	ldr	r3, [pc, #4]	; (400514 <EDBG_COM_CLOCK_init+0x14>)
  400510:	611a      	str	r2, [r3, #16]
  400512:	4770      	bx	lr
  400514:	400e0600 	.word	0x400e0600

00400518 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  400518:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  40051a:	4b06      	ldr	r3, [pc, #24]	; (400534 <EDBG_COM_init+0x1c>)
  40051c:	4798      	blx	r3
	EDBG_COM_PORT_init();
  40051e:	4b06      	ldr	r3, [pc, #24]	; (400538 <EDBG_COM_init+0x20>)
  400520:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  400522:	4b06      	ldr	r3, [pc, #24]	; (40053c <EDBG_COM_init+0x24>)
  400524:	4798      	blx	r3
  400526:	4602      	mov	r2, r0
  400528:	4905      	ldr	r1, [pc, #20]	; (400540 <EDBG_COM_init+0x28>)
  40052a:	4806      	ldr	r0, [pc, #24]	; (400544 <EDBG_COM_init+0x2c>)
  40052c:	4b06      	ldr	r3, [pc, #24]	; (400548 <EDBG_COM_init+0x30>)
  40052e:	4798      	blx	r3
  400530:	bd08      	pop	{r3, pc}
  400532:	bf00      	nop
  400534:	00400501 	.word	0x00400501
  400538:	004004b5 	.word	0x004004b5
  40053c:	004012d9 	.word	0x004012d9
  400540:	40028000 	.word	0x40028000
  400544:	204002ac 	.word	0x204002ac
  400548:	004008cd 	.word	0x004008cd

0040054c <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  40054c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  40054e:	4b32      	ldr	r3, [pc, #200]	; (400618 <system_init+0xcc>)
  400550:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400552:	4b32      	ldr	r3, [pc, #200]	; (40061c <system_init+0xd0>)
  400554:	699b      	ldr	r3, [r3, #24]
  400556:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40055a:	d103      	bne.n	400564 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40055c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400560:	4b2e      	ldr	r3, [pc, #184]	; (40061c <system_init+0xd0>)
  400562:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400564:	4b2d      	ldr	r3, [pc, #180]	; (40061c <system_init+0xd0>)
  400566:	699b      	ldr	r3, [r3, #24]
  400568:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  40056c:	d103      	bne.n	400576 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40056e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400572:	4b2a      	ldr	r3, [pc, #168]	; (40061c <system_init+0xd0>)
  400574:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400576:	4b29      	ldr	r3, [pc, #164]	; (40061c <system_init+0xd0>)
  400578:	699b      	ldr	r3, [r3, #24]
  40057a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40057e:	d103      	bne.n	400588 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400580:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400584:	4b25      	ldr	r3, [pc, #148]	; (40061c <system_init+0xd0>)
  400586:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400588:	4a25      	ldr	r2, [pc, #148]	; (400620 <system_init+0xd4>)
  40058a:	6853      	ldr	r3, [r2, #4]
  40058c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400590:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  400592:	4b24      	ldr	r3, [pc, #144]	; (400624 <system_init+0xd8>)
  400594:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400598:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  40059a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  40059e:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  4005a0:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4005a2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  4005a6:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4005a8:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4005aa:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4005ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4005b0:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4005b2:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4005b4:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4005b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4005ba:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4005bc:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4005be:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4005c0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  4005c4:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4005c6:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4005c8:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4005ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4005ce:	f44f 7080 	mov.w	r0, #256	; 0x100
  4005d2:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4005d4:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4005d6:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4005d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4005dc:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4005de:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4005e0:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4005e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005e6:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4005e8:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4005ea:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4005ec:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4005ee:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4005f0:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  4005f2:	4b0d      	ldr	r3, [pc, #52]	; (400628 <system_init+0xdc>)
  4005f4:	4798      	blx	r3

	ADC_1_init();
  4005f6:	4b0d      	ldr	r3, [pc, #52]	; (40062c <system_init+0xe0>)
  4005f8:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  4005fa:	4b0d      	ldr	r3, [pc, #52]	; (400630 <system_init+0xe4>)
  4005fc:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  4005fe:	4b0d      	ldr	r3, [pc, #52]	; (400634 <system_init+0xe8>)
  400600:	4798      	blx	r3

	PWM_0_init();
  400602:	4b0d      	ldr	r3, [pc, #52]	; (400638 <system_init+0xec>)
  400604:	4798      	blx	r3

	PWM_1_init();
  400606:	4b0d      	ldr	r3, [pc, #52]	; (40063c <system_init+0xf0>)
  400608:	4798      	blx	r3

	delay_driver_init();
  40060a:	4b0d      	ldr	r3, [pc, #52]	; (400640 <system_init+0xf4>)
  40060c:	4798      	blx	r3

	EDBG_COM_init();
  40060e:	4b0d      	ldr	r3, [pc, #52]	; (400644 <system_init+0xf8>)
  400610:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  400612:	4b0d      	ldr	r3, [pc, #52]	; (400648 <system_init+0xfc>)
  400614:	4798      	blx	r3
  400616:	bd08      	pop	{r3, pc}
  400618:	00400ab1 	.word	0x00400ab1
  40061c:	400e0600 	.word	0x400e0600
  400620:	400e1850 	.word	0x400e1850
  400624:	400e0e00 	.word	0x400e0e00
  400628:	0040029d 	.word	0x0040029d
  40062c:	00400309 	.word	0x00400309
  400630:	00400335 	.word	0x00400335
  400634:	0040034d 	.word	0x0040034d
  400638:	004003e5 	.word	0x004003e5
  40063c:	0040046d 	.word	0x0040046d
  400640:	004004a1 	.word	0x004004a1
  400644:	00400519 	.word	0x00400519
  400648:	00400711 	.word	0x00400711

0040064c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  40064c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40064e:	4604      	mov	r4, r0
  400650:	460d      	mov	r5, r1
  400652:	2800      	cmp	r0, #0
  400654:	bf18      	it	ne
  400656:	2900      	cmpne	r1, #0
  400658:	bf14      	ite	ne
  40065a:	2001      	movne	r0, #1
  40065c:	2000      	moveq	r0, #0
  40065e:	2239      	movs	r2, #57	; 0x39
  400660:	4903      	ldr	r1, [pc, #12]	; (400670 <adc_sync_init+0x24>)
  400662:	4b04      	ldr	r3, [pc, #16]	; (400674 <adc_sync_init+0x28>)
  400664:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  400666:	4629      	mov	r1, r5
  400668:	4620      	mov	r0, r4
  40066a:	4b03      	ldr	r3, [pc, #12]	; (400678 <adc_sync_init+0x2c>)
  40066c:	4798      	blx	r3
}
  40066e:	bd38      	pop	{r3, r4, r5, pc}
  400670:	0040460c 	.word	0x0040460c
  400674:	00400941 	.word	0x00400941
  400678:	00400a65 	.word	0x00400a65

0040067c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40067c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400680:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400682:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400684:	f3bf 8f5f 	dmb	sy
  400688:	4770      	bx	lr

0040068a <atomic_leave_critical>:
  40068a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40068e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400690:	f383 8810 	msr	PRIMASK, r3
  400694:	4770      	bx	lr
	...

00400698 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400698:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  40069a:	4b02      	ldr	r3, [pc, #8]	; (4006a4 <delay_init+0xc>)
  40069c:	6018      	str	r0, [r3, #0]
  40069e:	4b02      	ldr	r3, [pc, #8]	; (4006a8 <delay_init+0x10>)
  4006a0:	4798      	blx	r3
  4006a2:	bd08      	pop	{r3, pc}
  4006a4:	204001ec 	.word	0x204001ec
  4006a8:	00401079 	.word	0x00401079

004006ac <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4006ac:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4006ae:	4b04      	ldr	r3, [pc, #16]	; (4006c0 <delay_ms+0x14>)
  4006b0:	681c      	ldr	r4, [r3, #0]
  4006b2:	4b04      	ldr	r3, [pc, #16]	; (4006c4 <delay_ms+0x18>)
  4006b4:	4798      	blx	r3
  4006b6:	4601      	mov	r1, r0
  4006b8:	4620      	mov	r0, r4
  4006ba:	4b03      	ldr	r3, [pc, #12]	; (4006c8 <delay_ms+0x1c>)
  4006bc:	4798      	blx	r3
  4006be:	bd10      	pop	{r4, pc}
  4006c0:	204001ec 	.word	0x204001ec
  4006c4:	00400a9d 	.word	0x00400a9d
  4006c8:	00401085 	.word	0x00401085

004006cc <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  4006cc:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  4006ce:	2503      	movs	r5, #3
  4006d0:	2400      	movs	r4, #0

	while (upper >= lower) {
  4006d2:	e007      	b.n	4006e4 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  4006d4:	4a0d      	ldr	r2, [pc, #52]	; (40070c <process_ext_irq+0x40>)
  4006d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4006da:	b1b3      	cbz	r3, 40070a <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  4006dc:	4798      	blx	r3
  4006de:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  4006e0:	3a01      	subs	r2, #1
  4006e2:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  4006e4:	42ac      	cmp	r4, r5
  4006e6:	d810      	bhi.n	40070a <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  4006e8:	192b      	adds	r3, r5, r4
  4006ea:	105b      	asrs	r3, r3, #1
  4006ec:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  4006ee:	2a02      	cmp	r2, #2
  4006f0:	d80b      	bhi.n	40070a <process_ext_irq+0x3e>
  4006f2:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  4006f4:	4905      	ldr	r1, [pc, #20]	; (40070c <process_ext_irq+0x40>)
  4006f6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  4006fa:	6849      	ldr	r1, [r1, #4]
  4006fc:	4281      	cmp	r1, r0
  4006fe:	d0e9      	beq.n	4006d4 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400700:	4281      	cmp	r1, r0
  400702:	d2ed      	bcs.n	4006e0 <process_ext_irq+0x14>
			lower = middle + 1;
  400704:	3201      	adds	r2, #1
  400706:	b2d4      	uxtb	r4, r2
  400708:	e7ec      	b.n	4006e4 <process_ext_irq+0x18>
  40070a:	bd38      	pop	{r3, r4, r5, pc}
  40070c:	204001f0 	.word	0x204001f0

00400710 <ext_irq_init>:
{
  400710:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400712:	2300      	movs	r3, #0
  400714:	e00a      	b.n	40072c <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400716:	4a08      	ldr	r2, [pc, #32]	; (400738 <ext_irq_init+0x28>)
  400718:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  40071c:	f04f 30ff 	mov.w	r0, #4294967295
  400720:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400722:	2100      	movs	r1, #0
  400724:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400728:	3301      	adds	r3, #1
  40072a:	b29b      	uxth	r3, r3
  40072c:	2b02      	cmp	r3, #2
  40072e:	d9f2      	bls.n	400716 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400730:	4802      	ldr	r0, [pc, #8]	; (40073c <ext_irq_init+0x2c>)
  400732:	4b03      	ldr	r3, [pc, #12]	; (400740 <ext_irq_init+0x30>)
  400734:	4798      	blx	r3
}
  400736:	bd08      	pop	{r3, pc}
  400738:	204001f0 	.word	0x204001f0
  40073c:	004006cd 	.word	0x004006cd
  400740:	00400dc1 	.word	0x00400dc1

00400744 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400744:	b570      	push	{r4, r5, r6, lr}
  400746:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400748:	4604      	mov	r4, r0
  40074a:	460d      	mov	r5, r1
  40074c:	2800      	cmp	r0, #0
  40074e:	bf18      	it	ne
  400750:	2900      	cmpne	r1, #0
  400752:	bf14      	ite	ne
  400754:	2001      	movne	r0, #1
  400756:	2000      	moveq	r0, #0
  400758:	2234      	movs	r2, #52	; 0x34
  40075a:	4904      	ldr	r1, [pc, #16]	; (40076c <io_write+0x28>)
  40075c:	4b04      	ldr	r3, [pc, #16]	; (400770 <io_write+0x2c>)
  40075e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400760:	6823      	ldr	r3, [r4, #0]
  400762:	4632      	mov	r2, r6
  400764:	4629      	mov	r1, r5
  400766:	4620      	mov	r0, r4
  400768:	4798      	blx	r3
}
  40076a:	bd70      	pop	{r4, r5, r6, pc}
  40076c:	00404628 	.word	0x00404628
  400770:	00400941 	.word	0x00400941

00400774 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400774:	b570      	push	{r4, r5, r6, lr}
  400776:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400778:	4604      	mov	r4, r0
  40077a:	460d      	mov	r5, r1
  40077c:	2800      	cmp	r0, #0
  40077e:	bf18      	it	ne
  400780:	2900      	cmpne	r1, #0
  400782:	bf14      	ite	ne
  400784:	2001      	movne	r0, #1
  400786:	2000      	moveq	r0, #0
  400788:	223d      	movs	r2, #61	; 0x3d
  40078a:	4904      	ldr	r1, [pc, #16]	; (40079c <io_read+0x28>)
  40078c:	4b04      	ldr	r3, [pc, #16]	; (4007a0 <io_read+0x2c>)
  40078e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400790:	6863      	ldr	r3, [r4, #4]
  400792:	4632      	mov	r2, r6
  400794:	4629      	mov	r1, r5
  400796:	4620      	mov	r0, r4
  400798:	4798      	blx	r3
}
  40079a:	bd70      	pop	{r4, r5, r6, pc}
  40079c:	00404628 	.word	0x00404628
  4007a0:	00400941 	.word	0x00400941

004007a4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  4007a4:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  4007a6:	6943      	ldr	r3, [r0, #20]
  4007a8:	b103      	cbz	r3, 4007ac <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  4007aa:	4798      	blx	r3
  4007ac:	bd08      	pop	{r3, pc}

004007ae <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  4007ae:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  4007b0:	6983      	ldr	r3, [r0, #24]
  4007b2:	b103      	cbz	r3, 4007b6 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  4007b4:	4798      	blx	r3
  4007b6:	bd08      	pop	{r3, pc}

004007b8 <pwm_init>:
{
  4007b8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4007ba:	4604      	mov	r4, r0
  4007bc:	460d      	mov	r5, r1
  4007be:	2800      	cmp	r0, #0
  4007c0:	bf18      	it	ne
  4007c2:	2900      	cmpne	r1, #0
  4007c4:	bf14      	ite	ne
  4007c6:	2001      	movne	r0, #1
  4007c8:	2000      	moveq	r0, #0
  4007ca:	2233      	movs	r2, #51	; 0x33
  4007cc:	4906      	ldr	r1, [pc, #24]	; (4007e8 <pwm_init+0x30>)
  4007ce:	4b07      	ldr	r3, [pc, #28]	; (4007ec <pwm_init+0x34>)
  4007d0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  4007d2:	4629      	mov	r1, r5
  4007d4:	4620      	mov	r0, r4
  4007d6:	4b06      	ldr	r3, [pc, #24]	; (4007f0 <pwm_init+0x38>)
  4007d8:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  4007da:	4b06      	ldr	r3, [pc, #24]	; (4007f4 <pwm_init+0x3c>)
  4007dc:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  4007de:	4b06      	ldr	r3, [pc, #24]	; (4007f8 <pwm_init+0x40>)
  4007e0:	6063      	str	r3, [r4, #4]
}
  4007e2:	2000      	movs	r0, #0
  4007e4:	bd38      	pop	{r3, r4, r5, pc}
  4007e6:	bf00      	nop
  4007e8:	0040463c 	.word	0x0040463c
  4007ec:	00400941 	.word	0x00400941
  4007f0:	00400f29 	.word	0x00400f29
  4007f4:	004007a5 	.word	0x004007a5
  4007f8:	004007af 	.word	0x004007af

004007fc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4007fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4007fe:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400800:	4605      	mov	r5, r0
  400802:	460f      	mov	r7, r1
  400804:	2800      	cmp	r0, #0
  400806:	bf18      	it	ne
  400808:	2900      	cmpne	r1, #0
  40080a:	d002      	beq.n	400812 <usart_sync_write+0x16>
  40080c:	bb0a      	cbnz	r2, 400852 <usart_sync_write+0x56>
  40080e:	2000      	movs	r0, #0
  400810:	e000      	b.n	400814 <usart_sync_write+0x18>
  400812:	2000      	movs	r0, #0
  400814:	22f1      	movs	r2, #241	; 0xf1
  400816:	4910      	ldr	r1, [pc, #64]	; (400858 <usart_sync_write+0x5c>)
  400818:	4b10      	ldr	r3, [pc, #64]	; (40085c <usart_sync_write+0x60>)
  40081a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  40081c:	f105 0408 	add.w	r4, r5, #8
  400820:	4620      	mov	r0, r4
  400822:	4b0f      	ldr	r3, [pc, #60]	; (400860 <usart_sync_write+0x64>)
  400824:	4798      	blx	r3
  400826:	2800      	cmp	r0, #0
  400828:	d0f8      	beq.n	40081c <usart_sync_write+0x20>
  40082a:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  40082c:	5d79      	ldrb	r1, [r7, r5]
  40082e:	4620      	mov	r0, r4
  400830:	4b0c      	ldr	r3, [pc, #48]	; (400864 <usart_sync_write+0x68>)
  400832:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400834:	4620      	mov	r0, r4
  400836:	4b0a      	ldr	r3, [pc, #40]	; (400860 <usart_sync_write+0x64>)
  400838:	4798      	blx	r3
  40083a:	2800      	cmp	r0, #0
  40083c:	d0fa      	beq.n	400834 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  40083e:	3501      	adds	r5, #1
  400840:	42b5      	cmp	r5, r6
  400842:	d3f3      	bcc.n	40082c <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400844:	4620      	mov	r0, r4
  400846:	4b08      	ldr	r3, [pc, #32]	; (400868 <usart_sync_write+0x6c>)
  400848:	4798      	blx	r3
  40084a:	2800      	cmp	r0, #0
  40084c:	d0fa      	beq.n	400844 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  40084e:	4628      	mov	r0, r5
  400850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400852:	2001      	movs	r0, #1
  400854:	e7de      	b.n	400814 <usart_sync_write+0x18>
  400856:	bf00      	nop
  400858:	00404654 	.word	0x00404654
  40085c:	00400941 	.word	0x00400941
  400860:	00401261 	.word	0x00401261
  400864:	00401219 	.word	0x00401219
  400868:	00401289 	.word	0x00401289

0040086c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  40086c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400870:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400872:	4605      	mov	r5, r0
  400874:	4688      	mov	r8, r1
  400876:	2800      	cmp	r0, #0
  400878:	bf18      	it	ne
  40087a:	2900      	cmpne	r1, #0
  40087c:	d002      	beq.n	400884 <usart_sync_read+0x18>
  40087e:	b9d2      	cbnz	r2, 4008b6 <usart_sync_read+0x4a>
  400880:	2000      	movs	r0, #0
  400882:	e000      	b.n	400886 <usart_sync_read+0x1a>
  400884:	2000      	movs	r0, #0
  400886:	f44f 7286 	mov.w	r2, #268	; 0x10c
  40088a:	490c      	ldr	r1, [pc, #48]	; (4008bc <usart_sync_read+0x50>)
  40088c:	4b0c      	ldr	r3, [pc, #48]	; (4008c0 <usart_sync_read+0x54>)
  40088e:	4798      	blx	r3
	uint32_t                      offset = 0;
  400890:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400892:	f105 0408 	add.w	r4, r5, #8
  400896:	4620      	mov	r0, r4
  400898:	4b0a      	ldr	r3, [pc, #40]	; (4008c4 <usart_sync_read+0x58>)
  40089a:	4798      	blx	r3
  40089c:	2800      	cmp	r0, #0
  40089e:	d0f8      	beq.n	400892 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  4008a0:	4620      	mov	r0, r4
  4008a2:	4b09      	ldr	r3, [pc, #36]	; (4008c8 <usart_sync_read+0x5c>)
  4008a4:	4798      	blx	r3
  4008a6:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  4008aa:	3601      	adds	r6, #1
  4008ac:	42be      	cmp	r6, r7
  4008ae:	d3f0      	bcc.n	400892 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  4008b0:	4630      	mov	r0, r6
  4008b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  4008b6:	2001      	movs	r0, #1
  4008b8:	e7e5      	b.n	400886 <usart_sync_read+0x1a>
  4008ba:	bf00      	nop
  4008bc:	00404654 	.word	0x00404654
  4008c0:	00400941 	.word	0x00400941
  4008c4:	004012b1 	.word	0x004012b1
  4008c8:	0040123d 	.word	0x0040123d

004008cc <usart_sync_init>:
{
  4008cc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4008ce:	4604      	mov	r4, r0
  4008d0:	460d      	mov	r5, r1
  4008d2:	2800      	cmp	r0, #0
  4008d4:	bf18      	it	ne
  4008d6:	2900      	cmpne	r1, #0
  4008d8:	bf14      	ite	ne
  4008da:	2001      	movne	r0, #1
  4008dc:	2000      	moveq	r0, #0
  4008de:	2234      	movs	r2, #52	; 0x34
  4008e0:	4907      	ldr	r1, [pc, #28]	; (400900 <usart_sync_init+0x34>)
  4008e2:	4b08      	ldr	r3, [pc, #32]	; (400904 <usart_sync_init+0x38>)
  4008e4:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  4008e6:	4629      	mov	r1, r5
  4008e8:	f104 0008 	add.w	r0, r4, #8
  4008ec:	4b06      	ldr	r3, [pc, #24]	; (400908 <usart_sync_init+0x3c>)
  4008ee:	4798      	blx	r3
	if (init_status) {
  4008f0:	4603      	mov	r3, r0
  4008f2:	b918      	cbnz	r0, 4008fc <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  4008f4:	4a05      	ldr	r2, [pc, #20]	; (40090c <usart_sync_init+0x40>)
  4008f6:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  4008f8:	4a05      	ldr	r2, [pc, #20]	; (400910 <usart_sync_init+0x44>)
  4008fa:	6022      	str	r2, [r4, #0]
}
  4008fc:	4618      	mov	r0, r3
  4008fe:	bd38      	pop	{r3, r4, r5, pc}
  400900:	00404654 	.word	0x00404654
  400904:	00400941 	.word	0x00400941
  400908:	004011ad 	.word	0x004011ad
  40090c:	0040086d 	.word	0x0040086d
  400910:	004007fd 	.word	0x004007fd

00400914 <usart_sync_enable>:
{
  400914:	b510      	push	{r4, lr}
	ASSERT(descr);
  400916:	4604      	mov	r4, r0
  400918:	2253      	movs	r2, #83	; 0x53
  40091a:	4906      	ldr	r1, [pc, #24]	; (400934 <usart_sync_enable+0x20>)
  40091c:	3000      	adds	r0, #0
  40091e:	bf18      	it	ne
  400920:	2001      	movne	r0, #1
  400922:	4b05      	ldr	r3, [pc, #20]	; (400938 <usart_sync_enable+0x24>)
  400924:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400926:	f104 0008 	add.w	r0, r4, #8
  40092a:	4b04      	ldr	r3, [pc, #16]	; (40093c <usart_sync_enable+0x28>)
  40092c:	4798      	blx	r3
}
  40092e:	2000      	movs	r0, #0
  400930:	bd10      	pop	{r4, pc}
  400932:	bf00      	nop
  400934:	00404654 	.word	0x00404654
  400938:	00400941 	.word	0x00400941
  40093c:	004011e5 	.word	0x004011e5

00400940 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400940:	b900      	cbnz	r0, 400944 <assert+0x4>
		__asm("BKPT #0");
  400942:	be00      	bkpt	0x0000
  400944:	4770      	bx	lr
	...

00400948 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  400948:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  40094a:	4a06      	ldr	r2, [pc, #24]	; (400964 <_sbrk+0x1c>)
  40094c:	6812      	ldr	r2, [r2, #0]
  40094e:	b122      	cbz	r2, 40095a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400950:	4a04      	ldr	r2, [pc, #16]	; (400964 <_sbrk+0x1c>)
  400952:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400954:	4403      	add	r3, r0
  400956:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  400958:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40095a:	4903      	ldr	r1, [pc, #12]	; (400968 <_sbrk+0x20>)
  40095c:	4a01      	ldr	r2, [pc, #4]	; (400964 <_sbrk+0x1c>)
  40095e:	6011      	str	r1, [r2, #0]
  400960:	e7f6      	b.n	400950 <_sbrk+0x8>
  400962:	bf00      	nop
  400964:	20400208 	.word	0x20400208
  400968:	204008e0 	.word	0x204008e0

0040096c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  40096c:	f04f 30ff 	mov.w	r0, #4294967295
  400970:	4770      	bx	lr

00400972 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400976:	604b      	str	r3, [r1, #4]

	return 0;
}
  400978:	2000      	movs	r0, #0
  40097a:	4770      	bx	lr

0040097c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  40097c:	2001      	movs	r0, #1
  40097e:	4770      	bx	lr

00400980 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400980:	2000      	movs	r0, #0
  400982:	4770      	bx	lr

00400984 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  400984:	2364      	movs	r3, #100	; 0x64
  400986:	4a1d      	ldr	r2, [pc, #116]	; (4009fc <_afec_init+0x78>)
  400988:	fb03 2301 	mla	r3, r3, r1, r2
  40098c:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  40098e:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  400990:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  400992:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  400994:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  400996:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  400998:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  40099a:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  40099c:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  40099e:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  4009a0:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  4009a2:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  4009a4:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  4009a6:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  4009a8:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  4009aa:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  4009ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  4009b0:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  4009b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  4009b6:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  4009ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  4009bc:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  4009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  4009c2:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  4009c6:	2200      	movs	r2, #0
  4009c8:	2a0b      	cmp	r2, #11
  4009ca:	d814      	bhi.n	4009f6 <_afec_init+0x72>
{
  4009cc:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  4009ce:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  4009d0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4009d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4009d8:	4413      	add	r3, r2
  4009da:	330c      	adds	r3, #12
  4009dc:	4c07      	ldr	r4, [pc, #28]	; (4009fc <_afec_init+0x78>)
  4009de:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4009e2:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  4009e4:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  4009e6:	3201      	adds	r2, #1
  4009e8:	b2d2      	uxtb	r2, r2
  4009ea:	2a0b      	cmp	r2, #11
  4009ec:	d9ef      	bls.n	4009ce <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  4009ee:	2000      	movs	r0, #0
  4009f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009f4:	4770      	bx	lr
  4009f6:	2000      	movs	r0, #0
  4009f8:	4770      	bx	lr
  4009fa:	bf00      	nop
  4009fc:	00404670 	.word	0x00404670

00400a00 <_afec_get_hardware_index>:
{
  400a00:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  400a02:	4b09      	ldr	r3, [pc, #36]	; (400a28 <_afec_get_hardware_index+0x28>)
  400a04:	4298      	cmp	r0, r3
  400a06:	d00a      	beq.n	400a1e <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  400a08:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400a0c:	4298      	cmp	r0, r3
  400a0e:	d008      	beq.n	400a22 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  400a10:	22a3      	movs	r2, #163	; 0xa3
  400a12:	4906      	ldr	r1, [pc, #24]	; (400a2c <_afec_get_hardware_index+0x2c>)
  400a14:	2000      	movs	r0, #0
  400a16:	4b06      	ldr	r3, [pc, #24]	; (400a30 <_afec_get_hardware_index+0x30>)
  400a18:	4798      	blx	r3
	return 0;
  400a1a:	2000      	movs	r0, #0
  400a1c:	bd08      	pop	{r3, pc}
		return 0;
  400a1e:	2000      	movs	r0, #0
  400a20:	bd08      	pop	{r3, pc}
		return 1;
  400a22:	2001      	movs	r0, #1
}
  400a24:	bd08      	pop	{r3, pc}
  400a26:	bf00      	nop
  400a28:	4003c000 	.word	0x4003c000
  400a2c:	00404738 	.word	0x00404738
  400a30:	00400941 	.word	0x00400941

00400a34 <_afec_get_regs>:
{
  400a34:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  400a36:	4b09      	ldr	r3, [pc, #36]	; (400a5c <_afec_get_regs+0x28>)
  400a38:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400a3a:	2300      	movs	r3, #0
  400a3c:	2b01      	cmp	r3, #1
  400a3e:	d809      	bhi.n	400a54 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  400a40:	2264      	movs	r2, #100	; 0x64
  400a42:	fb02 f203 	mul.w	r2, r2, r3
  400a46:	4906      	ldr	r1, [pc, #24]	; (400a60 <_afec_get_regs+0x2c>)
  400a48:	5c8a      	ldrb	r2, [r1, r2]
  400a4a:	4290      	cmp	r0, r2
  400a4c:	d003      	beq.n	400a56 <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400a4e:	3301      	adds	r3, #1
  400a50:	b2db      	uxtb	r3, r3
  400a52:	e7f3      	b.n	400a3c <_afec_get_regs+0x8>
	return 0;
  400a54:	2300      	movs	r3, #0
}
  400a56:	4618      	mov	r0, r3
  400a58:	bd08      	pop	{r3, pc}
  400a5a:	bf00      	nop
  400a5c:	00400a01 	.word	0x00400a01
  400a60:	00404670 	.word	0x00404670

00400a64 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
  400a64:	b538      	push	{r3, r4, r5, lr}
  400a66:	460c      	mov	r4, r1
	ASSERT(device);
  400a68:	4605      	mov	r5, r0
  400a6a:	f44f 728d 	mov.w	r2, #282	; 0x11a
  400a6e:	4907      	ldr	r1, [pc, #28]	; (400a8c <_adc_sync_init+0x28>)
  400a70:	3000      	adds	r0, #0
  400a72:	bf18      	it	ne
  400a74:	2001      	movne	r0, #1
  400a76:	4b06      	ldr	r3, [pc, #24]	; (400a90 <_adc_sync_init+0x2c>)
  400a78:	4798      	blx	r3

	device->hw = hw;
  400a7a:	602c      	str	r4, [r5, #0]

	return _afec_init(hw, _afec_get_regs((uint32_t)hw));
  400a7c:	4620      	mov	r0, r4
  400a7e:	4b05      	ldr	r3, [pc, #20]	; (400a94 <_adc_sync_init+0x30>)
  400a80:	4798      	blx	r3
  400a82:	4601      	mov	r1, r0
  400a84:	4620      	mov	r0, r4
  400a86:	4b04      	ldr	r3, [pc, #16]	; (400a98 <_adc_sync_init+0x34>)
  400a88:	4798      	blx	r3
}
  400a8a:	bd38      	pop	{r3, r4, r5, pc}
  400a8c:	00404738 	.word	0x00404738
  400a90:	00400941 	.word	0x00400941
  400a94:	00400a35 	.word	0x00400a35
  400a98:	00400985 	.word	0x00400985

00400a9c <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  400a9c:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400aa0:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400aa8:	fb03 f000 	mul.w	r0, r3, r0
  400aac:	4770      	bx	lr
	...

00400ab0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400ab0:	b500      	push	{lr}
  400ab2:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400ab4:	a801      	add	r0, sp, #4
  400ab6:	4b0e      	ldr	r3, [pc, #56]	; (400af0 <_init_chip+0x40>)
  400ab8:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400aba:	4a0e      	ldr	r2, [pc, #56]	; (400af4 <_init_chip+0x44>)
  400abc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400ac8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400acc:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400ad0:	a801      	add	r0, sp, #4
  400ad2:	4b09      	ldr	r3, [pc, #36]	; (400af8 <_init_chip+0x48>)
  400ad4:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400ad6:	4a09      	ldr	r2, [pc, #36]	; (400afc <_init_chip+0x4c>)
  400ad8:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400ada:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400ade:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400ae2:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400ae4:	4b06      	ldr	r3, [pc, #24]	; (400b00 <_init_chip+0x50>)
  400ae6:	4798      	blx	r3
}
  400ae8:	b003      	add	sp, #12
  400aea:	f85d fb04 	ldr.w	pc, [sp], #4
  400aee:	bf00      	nop
  400af0:	0040067d 	.word	0x0040067d
  400af4:	e000ed00 	.word	0xe000ed00
  400af8:	0040068b 	.word	0x0040068b
  400afc:	400e0c00 	.word	0x400e0c00
  400b00:	00400e85 	.word	0x00400e85

00400b04 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  400b04:	b538      	push	{r3, r4, r5, lr}
  400b06:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  400b08:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  400b0a:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  400b0c:	f014 0f01 	tst.w	r4, #1
  400b10:	d11a      	bne.n	400b48 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  400b12:	f414 7f00 	tst.w	r4, #512	; 0x200
  400b16:	d11a      	bne.n	400b4e <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  400b18:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  400b1c:	d11b      	bne.n	400b56 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  400b1e:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  400b22:	d11d      	bne.n	400b60 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  400b24:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  400b28:	d008      	beq.n	400b3c <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400b2a:	68eb      	ldr	r3, [r5, #12]
  400b2c:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  400b2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
  400b30:	f012 0f20 	tst.w	r2, #32
  400b34:	d019      	beq.n	400b6a <_can_irq_handler+0x66>
  400b36:	2102      	movs	r1, #2
  400b38:	4628      	mov	r0, r5
  400b3a:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  400b3c:	f014 0f08 	tst.w	r4, #8
  400b40:	d115      	bne.n	400b6e <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  400b42:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  400b44:	651c      	str	r4, [r3, #80]	; 0x50
  400b46:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  400b48:	6883      	ldr	r3, [r0, #8]
  400b4a:	4798      	blx	r3
  400b4c:	e7e1      	b.n	400b12 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  400b4e:	686b      	ldr	r3, [r5, #4]
  400b50:	4628      	mov	r0, r5
  400b52:	4798      	blx	r3
  400b54:	e7e0      	b.n	400b18 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  400b56:	68eb      	ldr	r3, [r5, #12]
  400b58:	2103      	movs	r1, #3
  400b5a:	4628      	mov	r0, r5
  400b5c:	4798      	blx	r3
  400b5e:	e7de      	b.n	400b1e <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  400b60:	68eb      	ldr	r3, [r5, #12]
  400b62:	2100      	movs	r1, #0
  400b64:	4628      	mov	r0, r5
  400b66:	4798      	blx	r3
  400b68:	e7dc      	b.n	400b24 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400b6a:	2101      	movs	r1, #1
  400b6c:	e7e4      	b.n	400b38 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  400b6e:	68eb      	ldr	r3, [r5, #12]
  400b70:	2104      	movs	r1, #4
  400b72:	4628      	mov	r0, r5
  400b74:	4798      	blx	r3
  400b76:	e7e4      	b.n	400b42 <_can_irq_handler+0x3e>

00400b78 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  400b78:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  400b7a:	4b02      	ldr	r3, [pc, #8]	; (400b84 <MCAN1_INT0_Handler+0xc>)
  400b7c:	6a98      	ldr	r0, [r3, #40]	; 0x28
  400b7e:	4b02      	ldr	r3, [pc, #8]	; (400b88 <MCAN1_INT0_Handler+0x10>)
  400b80:	4798      	blx	r3
  400b82:	bd08      	pop	{r3, pc}
  400b84:	2040020c 	.word	0x2040020c
  400b88:	00400b05 	.word	0x00400b05

00400b8c <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  400b8c:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  400b8e:	2500      	movs	r5, #0
  400b90:	428d      	cmp	r5, r1
  400b92:	d210      	bcs.n	400bb6 <_ffs+0x2a>
  400b94:	2201      	movs	r2, #1
  400b96:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400b98:	2b1f      	cmp	r3, #31
  400b9a:	d80a      	bhi.n	400bb2 <_ffs+0x26>
			if (v[i] & bit) {
  400b9c:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  400ba0:	4222      	tst	r2, r4
  400ba2:	d102      	bne.n	400baa <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  400ba4:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400ba6:	3301      	adds	r3, #1
  400ba8:	e7f6      	b.n	400b98 <_ffs+0xc>
				return i * 32 + j;
  400baa:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  400bae:	bc30      	pop	{r4, r5}
  400bb0:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  400bb2:	3501      	adds	r5, #1
  400bb4:	e7ec      	b.n	400b90 <_ffs+0x4>
	return -1;
  400bb6:	f04f 30ff 	mov.w	r0, #4294967295
  400bba:	e7f8      	b.n	400bae <_ffs+0x22>

00400bbc <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  400bbc:	b510      	push	{r4, lr}
  400bbe:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  400bc0:	2300      	movs	r3, #0
  400bc2:	9301      	str	r3, [sp, #4]
  400bc4:	9302      	str	r3, [sp, #8]
  400bc6:	9303      	str	r3, [sp, #12]
  400bc8:	9304      	str	r3, [sp, #16]
  400bca:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  400bcc:	4b21      	ldr	r3, [pc, #132]	; (400c54 <_ext_irq_handler+0x98>)
  400bce:	6818      	ldr	r0, [r3, #0]
  400bd0:	22f8      	movs	r2, #248	; 0xf8
  400bd2:	4921      	ldr	r1, [pc, #132]	; (400c58 <_ext_irq_handler+0x9c>)
  400bd4:	3000      	adds	r0, #0
  400bd6:	bf18      	it	ne
  400bd8:	2001      	movne	r0, #1
  400bda:	4b20      	ldr	r3, [pc, #128]	; (400c5c <_ext_irq_handler+0xa0>)
  400bdc:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  400bde:	4b20      	ldr	r3, [pc, #128]	; (400c60 <_ext_irq_handler+0xa4>)
  400be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400be4:	4013      	ands	r3, r2
  400be6:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400be8:	491e      	ldr	r1, [pc, #120]	; (400c64 <_ext_irq_handler+0xa8>)
  400bea:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400bec:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  400bee:	400a      	ands	r2, r1
  400bf0:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  400bf2:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  400bf4:	e025      	b.n	400c42 <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  400bf6:	4b17      	ldr	r3, [pc, #92]	; (400c54 <_ext_irq_handler+0x98>)
  400bf8:	681b      	ldr	r3, [r3, #0]
  400bfa:	4620      	mov	r0, r4
  400bfc:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  400bfe:	1163      	asrs	r3, r4, #5
  400c00:	f004 041f 	and.w	r4, r4, #31
  400c04:	2201      	movs	r2, #1
  400c06:	fa02 f404 	lsl.w	r4, r2, r4
  400c0a:	aa06      	add	r2, sp, #24
  400c0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400c10:	f853 2c14 	ldr.w	r2, [r3, #-20]
  400c14:	ea22 0204 	bic.w	r2, r2, r4
  400c18:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  400c1c:	2105      	movs	r1, #5
  400c1e:	a801      	add	r0, sp, #4
  400c20:	4b11      	ldr	r3, [pc, #68]	; (400c68 <_ext_irq_handler+0xac>)
  400c22:	4798      	blx	r3
  400c24:	4604      	mov	r4, r0
		while (-1 != pos) {
  400c26:	f1b4 3fff 	cmp.w	r4, #4294967295
  400c2a:	d1e4      	bne.n	400bf6 <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  400c2c:	4a0c      	ldr	r2, [pc, #48]	; (400c60 <_ext_irq_handler+0xa4>)
  400c2e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400c30:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400c32:	400b      	ands	r3, r1
  400c34:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400c36:	490b      	ldr	r1, [pc, #44]	; (400c64 <_ext_irq_handler+0xa8>)
  400c38:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400c3a:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  400c3c:	4002      	ands	r2, r0
  400c3e:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  400c40:	4313      	orrs	r3, r2
	while (flag_total) {
  400c42:	b12b      	cbz	r3, 400c50 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  400c44:	2105      	movs	r1, #5
  400c46:	a801      	add	r0, sp, #4
  400c48:	4b07      	ldr	r3, [pc, #28]	; (400c68 <_ext_irq_handler+0xac>)
  400c4a:	4798      	blx	r3
  400c4c:	4604      	mov	r4, r0
		while (-1 != pos) {
  400c4e:	e7ea      	b.n	400c26 <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  400c50:	b006      	add	sp, #24
  400c52:	bd10      	pop	{r4, pc}
  400c54:	20400238 	.word	0x20400238
  400c58:	00404790 	.word	0x00404790
  400c5c:	00400941 	.word	0x00400941
  400c60:	400e0e00 	.word	0x400e0e00
  400c64:	400e1400 	.word	0x400e1400
  400c68:	00400b8d 	.word	0x00400b8d

00400c6c <_pio_get_hardware_index>:
{
  400c6c:	b510      	push	{r4, lr}
	ASSERT(hw);
  400c6e:	4604      	mov	r4, r0
  400c70:	22d2      	movs	r2, #210	; 0xd2
  400c72:	4905      	ldr	r1, [pc, #20]	; (400c88 <_pio_get_hardware_index+0x1c>)
  400c74:	3000      	adds	r0, #0
  400c76:	bf18      	it	ne
  400c78:	2001      	movne	r0, #1
  400c7a:	4b04      	ldr	r3, [pc, #16]	; (400c8c <_pio_get_hardware_index+0x20>)
  400c7c:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  400c7e:	4804      	ldr	r0, [pc, #16]	; (400c90 <_pio_get_hardware_index+0x24>)
  400c80:	4420      	add	r0, r4
}
  400c82:	f3c0 2047 	ubfx	r0, r0, #9, #8
  400c86:	bd10      	pop	{r4, pc}
  400c88:	00404790 	.word	0x00404790
  400c8c:	00400941 	.word	0x00400941
  400c90:	bff1f200 	.word	0xbff1f200

00400c94 <_pio_get_index>:
{
  400c94:	b510      	push	{r4, lr}
	ASSERT(hw);
  400c96:	4604      	mov	r4, r0
  400c98:	22e0      	movs	r2, #224	; 0xe0
  400c9a:	490d      	ldr	r1, [pc, #52]	; (400cd0 <_pio_get_index+0x3c>)
  400c9c:	3000      	adds	r0, #0
  400c9e:	bf18      	it	ne
  400ca0:	2001      	movne	r0, #1
  400ca2:	4b0c      	ldr	r3, [pc, #48]	; (400cd4 <_pio_get_index+0x40>)
  400ca4:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  400ca6:	4620      	mov	r0, r4
  400ca8:	4b0b      	ldr	r3, [pc, #44]	; (400cd8 <_pio_get_index+0x44>)
  400caa:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400cac:	2300      	movs	r3, #0
  400cae:	2b01      	cmp	r3, #1
  400cb0:	d80b      	bhi.n	400cca <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  400cb2:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  400cb6:	008a      	lsls	r2, r1, #2
  400cb8:	4908      	ldr	r1, [pc, #32]	; (400cdc <_pio_get_index+0x48>)
  400cba:	5c8a      	ldrb	r2, [r1, r2]
  400cbc:	4290      	cmp	r0, r2
  400cbe:	d002      	beq.n	400cc6 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400cc0:	3301      	adds	r3, #1
  400cc2:	b2db      	uxtb	r3, r3
  400cc4:	e7f3      	b.n	400cae <_pio_get_index+0x1a>
			return i;
  400cc6:	b258      	sxtb	r0, r3
  400cc8:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  400cca:	f04f 30ff 	mov.w	r0, #4294967295
}
  400cce:	bd10      	pop	{r4, pc}
  400cd0:	00404790 	.word	0x00404790
  400cd4:	00400941 	.word	0x00400941
  400cd8:	00400c6d 	.word	0x00400c6d
  400cdc:	00404750 	.word	0x00404750

00400ce0 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  400ce0:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  400ce2:	4604      	mov	r4, r0
  400ce4:	f240 1259 	movw	r2, #345	; 0x159
  400ce8:	4929      	ldr	r1, [pc, #164]	; (400d90 <_pio_init+0xb0>)
  400cea:	3000      	adds	r0, #0
  400cec:	bf18      	it	ne
  400cee:	2001      	movne	r0, #1
  400cf0:	4b28      	ldr	r3, [pc, #160]	; (400d94 <_pio_init+0xb4>)
  400cf2:	4798      	blx	r3

	i = _pio_get_index(hw);
  400cf4:	4620      	mov	r0, r4
  400cf6:	4b28      	ldr	r3, [pc, #160]	; (400d98 <_pio_init+0xb8>)
  400cf8:	4798      	blx	r3
	if (i < 0) {
  400cfa:	2800      	cmp	r0, #0
  400cfc:	db43      	blt.n	400d86 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  400cfe:	4d27      	ldr	r5, [pc, #156]	; (400d9c <_pio_init+0xbc>)
  400d00:	00c2      	lsls	r2, r0, #3
  400d02:	1a11      	subs	r1, r2, r0
  400d04:	008b      	lsls	r3, r1, #2
  400d06:	442b      	add	r3, r5
  400d08:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  400d0a:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  400d0e:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  400d10:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  400d14:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  400d16:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  400d1a:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  400d1c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  400d20:	1a10      	subs	r0, r2, r0
  400d22:	0083      	lsls	r3, r0, #2
  400d24:	442b      	add	r3, r5
  400d26:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  400d28:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  400d2c:	4620      	mov	r0, r4
  400d2e:	4b1c      	ldr	r3, [pc, #112]	; (400da0 <_pio_init+0xc0>)
  400d30:	4798      	blx	r3
  400d32:	4428      	add	r0, r5
  400d34:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400d38:	2b00      	cmp	r3, #0
  400d3a:	db0c      	blt.n	400d56 <_pio_init+0x76>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d3c:	095a      	lsrs	r2, r3, #5
  400d3e:	f003 001f 	and.w	r0, r3, #31
  400d42:	2101      	movs	r1, #1
  400d44:	4081      	lsls	r1, r0
  400d46:	3220      	adds	r2, #32
  400d48:	4816      	ldr	r0, [pc, #88]	; (400da4 <_pio_init+0xc4>)
  400d4a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400d4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d52:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400d56:	2b00      	cmp	r3, #0
  400d58:	db08      	blt.n	400d6c <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d5a:	095a      	lsrs	r2, r3, #5
  400d5c:	f003 001f 	and.w	r0, r3, #31
  400d60:	2101      	movs	r1, #1
  400d62:	4081      	lsls	r1, r0
  400d64:	3260      	adds	r2, #96	; 0x60
  400d66:	480f      	ldr	r0, [pc, #60]	; (400da4 <_pio_init+0xc4>)
  400d68:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  400d6c:	2b00      	cmp	r3, #0
  400d6e:	db0d      	blt.n	400d8c <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d70:	0959      	lsrs	r1, r3, #5
  400d72:	f003 031f 	and.w	r3, r3, #31
  400d76:	2201      	movs	r2, #1
  400d78:	fa02 f303 	lsl.w	r3, r2, r3
  400d7c:	4a09      	ldr	r2, [pc, #36]	; (400da4 <_pio_init+0xc4>)
  400d7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  400d82:	2000      	movs	r0, #0
  400d84:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  400d86:	f06f 0010 	mvn.w	r0, #16
  400d8a:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  400d8c:	2000      	movs	r0, #0
}
  400d8e:	bd38      	pop	{r3, r4, r5, pc}
  400d90:	00404790 	.word	0x00404790
  400d94:	00400941 	.word	0x00400941
  400d98:	00400c95 	.word	0x00400c95
  400d9c:	00404750 	.word	0x00404750
  400da0:	00400c6d 	.word	0x00400c6d
  400da4:	e000e100 	.word	0xe000e100

00400da8 <PIOD_Handler>:
{
  400da8:	b508      	push	{r3, lr}
	_ext_irq_handler();
  400daa:	4b01      	ldr	r3, [pc, #4]	; (400db0 <PIOD_Handler+0x8>)
  400dac:	4798      	blx	r3
  400dae:	bd08      	pop	{r3, pc}
  400db0:	00400bbd 	.word	0x00400bbd

00400db4 <PIOA_Handler>:
{
  400db4:	b508      	push	{r3, lr}
	_ext_irq_handler();
  400db6:	4b01      	ldr	r3, [pc, #4]	; (400dbc <PIOA_Handler+0x8>)
  400db8:	4798      	blx	r3
  400dba:	bd08      	pop	{r3, pc}
  400dbc:	00400bbd 	.word	0x00400bbd

00400dc0 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  400dc0:	b538      	push	{r3, r4, r5, lr}
  400dc2:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  400dc4:	4804      	ldr	r0, [pc, #16]	; (400dd8 <_ext_irq_init+0x18>)
  400dc6:	4c05      	ldr	r4, [pc, #20]	; (400ddc <_ext_irq_init+0x1c>)
  400dc8:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  400dca:	4805      	ldr	r0, [pc, #20]	; (400de0 <_ext_irq_init+0x20>)
  400dcc:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  400dce:	4b05      	ldr	r3, [pc, #20]	; (400de4 <_ext_irq_init+0x24>)
  400dd0:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  400dd2:	2000      	movs	r0, #0
  400dd4:	bd38      	pop	{r3, r4, r5, pc}
  400dd6:	bf00      	nop
  400dd8:	400e0e00 	.word	0x400e0e00
  400ddc:	00400ce1 	.word	0x00400ce1
  400de0:	400e1400 	.word	0x400e1400
  400de4:	20400238 	.word	0x20400238

00400de8 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400de8:	490e      	ldr	r1, [pc, #56]	; (400e24 <_pmc_init_sources+0x3c>)
  400dea:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400dec:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400df0:	4b0d      	ldr	r3, [pc, #52]	; (400e28 <_pmc_init_sources+0x40>)
  400df2:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400df4:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400df6:	4b0b      	ldr	r3, [pc, #44]	; (400e24 <_pmc_init_sources+0x3c>)
  400df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400dfa:	f013 0f01 	tst.w	r3, #1
  400dfe:	d0fa      	beq.n	400df6 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400e00:	4b08      	ldr	r3, [pc, #32]	; (400e24 <_pmc_init_sources+0x3c>)
  400e02:	6a19      	ldr	r1, [r3, #32]
  400e04:	4a09      	ldr	r2, [pc, #36]	; (400e2c <_pmc_init_sources+0x44>)
  400e06:	430a      	orrs	r2, r1
  400e08:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400e0a:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400e0c:	4a08      	ldr	r2, [pc, #32]	; (400e30 <_pmc_init_sources+0x48>)
  400e0e:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400e10:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400e12:	4a08      	ldr	r2, [pc, #32]	; (400e34 <_pmc_init_sources+0x4c>)
  400e14:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400e16:	4b03      	ldr	r3, [pc, #12]	; (400e24 <_pmc_init_sources+0x3c>)
  400e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400e1a:	f013 0f02 	tst.w	r3, #2
  400e1e:	d0fa      	beq.n	400e16 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400e20:	4770      	bx	lr
  400e22:	bf00      	nop
  400e24:	400e0600 	.word	0x400e0600
  400e28:	00373e01 	.word	0x00373e01
  400e2c:	01370000 	.word	0x01370000
  400e30:	f800ffff 	.word	0xf800ffff
  400e34:	20183f01 	.word	0x20183f01

00400e38 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400e38:	4a11      	ldr	r2, [pc, #68]	; (400e80 <_pmc_init_master_clock+0x48>)
  400e3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  400e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400e40:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400e42:	4b0f      	ldr	r3, [pc, #60]	; (400e80 <_pmc_init_master_clock+0x48>)
  400e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400e46:	f013 0f08 	tst.w	r3, #8
  400e4a:	d0fa      	beq.n	400e42 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400e4c:	4a0c      	ldr	r2, [pc, #48]	; (400e80 <_pmc_init_master_clock+0x48>)
  400e4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400e58:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400e5a:	4b09      	ldr	r3, [pc, #36]	; (400e80 <_pmc_init_master_clock+0x48>)
  400e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400e5e:	f013 0f08 	tst.w	r3, #8
  400e62:	d0fa      	beq.n	400e5a <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400e64:	4a06      	ldr	r2, [pc, #24]	; (400e80 <_pmc_init_master_clock+0x48>)
  400e66:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400e68:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400e6c:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400e70:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400e72:	4b03      	ldr	r3, [pc, #12]	; (400e80 <_pmc_init_master_clock+0x48>)
  400e74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400e76:	f013 0f08 	tst.w	r3, #8
  400e7a:	d0fa      	beq.n	400e72 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  400e7c:	4770      	bx	lr
  400e7e:	bf00      	nop
  400e80:	400e0600 	.word	0x400e0600

00400e84 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400e84:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400e86:	4b02      	ldr	r3, [pc, #8]	; (400e90 <_pmc_init+0xc>)
  400e88:	4798      	blx	r3
	_pmc_init_master_clock();
  400e8a:	4b02      	ldr	r3, [pc, #8]	; (400e94 <_pmc_init+0x10>)
  400e8c:	4798      	blx	r3
  400e8e:	bd08      	pop	{r3, pc}
  400e90:	00400de9 	.word	0x00400de9
  400e94:	00400e39 	.word	0x00400e39

00400e98 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  400e98:	2300      	movs	r3, #0
  400e9a:	2b01      	cmp	r3, #1
  400e9c:	d80f      	bhi.n	400ebe <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  400e9e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  400ea2:	008a      	lsls	r2, r1, #2
  400ea4:	4907      	ldr	r1, [pc, #28]	; (400ec4 <_pwm_get_cfg+0x2c>)
  400ea6:	588a      	ldr	r2, [r1, r2]
  400ea8:	4282      	cmp	r2, r0
  400eaa:	d002      	beq.n	400eb2 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  400eac:	3301      	adds	r3, #1
  400eae:	b2db      	uxtb	r3, r3
  400eb0:	e7f3      	b.n	400e9a <_pwm_get_cfg+0x2>
			return (_pwms + i);
  400eb2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  400eb6:	009a      	lsls	r2, r3, #2
  400eb8:	4608      	mov	r0, r1
  400eba:	4410      	add	r0, r2
  400ebc:	4770      	bx	lr
		}
	}

	return NULL;
  400ebe:	2000      	movs	r0, #0
}
  400ec0:	4770      	bx	lr
  400ec2:	bf00      	nop
  400ec4:	004047ac 	.word	0x004047ac

00400ec8 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  400ec8:	4b06      	ldr	r3, [pc, #24]	; (400ee4 <_pwm_init_irq_param+0x1c>)
  400eca:	4298      	cmp	r0, r3
  400ecc:	d003      	beq.n	400ed6 <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  400ece:	4b06      	ldr	r3, [pc, #24]	; (400ee8 <_pwm_init_irq_param+0x20>)
  400ed0:	4298      	cmp	r0, r3
  400ed2:	d003      	beq.n	400edc <_pwm_init_irq_param+0x14>
  400ed4:	4770      	bx	lr
		_pwm0_dev = dev;
  400ed6:	4b05      	ldr	r3, [pc, #20]	; (400eec <_pwm_init_irq_param+0x24>)
  400ed8:	6019      	str	r1, [r3, #0]
  400eda:	e7f8      	b.n	400ece <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  400edc:	4b03      	ldr	r3, [pc, #12]	; (400eec <_pwm_init_irq_param+0x24>)
  400ede:	6059      	str	r1, [r3, #4]
	}
}
  400ee0:	e7f8      	b.n	400ed4 <_pwm_init_irq_param+0xc>
  400ee2:	bf00      	nop
  400ee4:	40020000 	.word	0x40020000
  400ee8:	4005c000 	.word	0x4005c000
  400eec:	2040023c 	.word	0x2040023c

00400ef0 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  400ef0:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  400ef2:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  400ef4:	69db      	ldr	r3, [r3, #28]
  400ef6:	b113      	cbz	r3, 400efe <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  400ef8:	6803      	ldr	r3, [r0, #0]
  400efa:	b103      	cbz	r3, 400efe <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  400efc:	4798      	blx	r3
  400efe:	bd08      	pop	{r3, pc}

00400f00 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  400f00:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  400f02:	4b02      	ldr	r3, [pc, #8]	; (400f0c <PWM0_Handler+0xc>)
  400f04:	6818      	ldr	r0, [r3, #0]
  400f06:	4b02      	ldr	r3, [pc, #8]	; (400f10 <PWM0_Handler+0x10>)
  400f08:	4798      	blx	r3
  400f0a:	bd08      	pop	{r3, pc}
  400f0c:	2040023c 	.word	0x2040023c
  400f10:	00400ef1 	.word	0x00400ef1

00400f14 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  400f14:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  400f16:	4b02      	ldr	r3, [pc, #8]	; (400f20 <PWM1_Handler+0xc>)
  400f18:	6858      	ldr	r0, [r3, #4]
  400f1a:	4b02      	ldr	r3, [pc, #8]	; (400f24 <PWM1_Handler+0x10>)
  400f1c:	4798      	blx	r3
  400f1e:	bd08      	pop	{r3, pc}
  400f20:	2040023c 	.word	0x2040023c
  400f24:	00400ef1 	.word	0x00400ef1

00400f28 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  400f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f2a:	4606      	mov	r6, r0
	ASSERT(hw);
  400f2c:	460c      	mov	r4, r1
  400f2e:	1c08      	adds	r0, r1, #0
  400f30:	bf18      	it	ne
  400f32:	2001      	movne	r0, #1
  400f34:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  400f38:	4944      	ldr	r1, [pc, #272]	; (40104c <_pwm_init+0x124>)
  400f3a:	4b45      	ldr	r3, [pc, #276]	; (401050 <_pwm_init+0x128>)
  400f3c:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  400f3e:	4620      	mov	r0, r4
  400f40:	4b44      	ldr	r3, [pc, #272]	; (401054 <_pwm_init+0x12c>)
  400f42:	4798      	blx	r3
  400f44:	4605      	mov	r5, r0

	device->hw = hw;
  400f46:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  400f48:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  400f4a:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  400f4c:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  400f4e:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  400f50:	6903      	ldr	r3, [r0, #16]
  400f52:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  400f56:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  400f58:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  400f5a:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  400f5c:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  400f5e:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  400f60:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  400f64:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  400f66:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  400f68:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  400f6a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  400f6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  400f70:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  400f74:	2300      	movs	r3, #0
  400f76:	e019      	b.n	400fac <_pwm_init+0x84>
		ch = cfg->ch + i;
  400f78:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  400f7a:	0118      	lsls	r0, r3, #4
  400f7c:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  400f80:	5c3a      	ldrb	r2, [r7, r0]
  400f82:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  400f86:	3210      	adds	r2, #16
  400f88:	0152      	lsls	r2, r2, #5
  400f8a:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  400f8c:	5c3a      	ldrb	r2, [r7, r0]
  400f8e:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  400f92:	3210      	adds	r2, #16
  400f94:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  400f98:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  400f9a:	5c3a      	ldrb	r2, [r7, r0]
  400f9c:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  400fa0:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  400fa4:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  400fa8:	3301      	adds	r3, #1
  400faa:	b25b      	sxtb	r3, r3
  400fac:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  400fae:	4293      	cmp	r3, r2
  400fb0:	d3e2      	bcc.n	400f78 <_pwm_init+0x50>
  400fb2:	2300      	movs	r3, #0
  400fb4:	e014      	b.n	400fe0 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  400fb6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  400fb8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  400fbc:	0082      	lsls	r2, r0, #2
  400fbe:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  400fc2:	5c88      	ldrb	r0, [r1, r2]
  400fc4:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  400fc8:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  400fcc:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  400fd0:	5c8a      	ldrb	r2, [r1, r2]
  400fd2:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  400fd6:	3213      	adds	r2, #19
  400fd8:	0112      	lsls	r2, r2, #4
  400fda:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  400fdc:	3301      	adds	r3, #1
  400fde:	b25b      	sxtb	r3, r3
  400fe0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  400fe2:	4293      	cmp	r3, r2
  400fe4:	d3e7      	bcc.n	400fb6 <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  400fe6:	4631      	mov	r1, r6
  400fe8:	4620      	mov	r0, r4
  400fea:	4b1b      	ldr	r3, [pc, #108]	; (401058 <_pwm_init+0x130>)
  400fec:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  400fee:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400ff2:	2b00      	cmp	r3, #0
  400ff4:	db0d      	blt.n	401012 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ff6:	095a      	lsrs	r2, r3, #5
  400ff8:	f003 031f 	and.w	r3, r3, #31
  400ffc:	2101      	movs	r1, #1
  400ffe:	fa01 f303 	lsl.w	r3, r1, r3
  401002:	3220      	adds	r2, #32
  401004:	4915      	ldr	r1, [pc, #84]	; (40105c <_pwm_init+0x134>)
  401006:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40100a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40100e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  401012:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401016:	2b00      	cmp	r3, #0
  401018:	db09      	blt.n	40102e <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40101a:	095a      	lsrs	r2, r3, #5
  40101c:	f003 031f 	and.w	r3, r3, #31
  401020:	2101      	movs	r1, #1
  401022:	fa01 f303 	lsl.w	r3, r1, r3
  401026:	3260      	adds	r2, #96	; 0x60
  401028:	490c      	ldr	r1, [pc, #48]	; (40105c <_pwm_init+0x134>)
  40102a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  40102e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401032:	2b00      	cmp	r3, #0
  401034:	db08      	blt.n	401048 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401036:	0959      	lsrs	r1, r3, #5
  401038:	f003 031f 	and.w	r3, r3, #31
  40103c:	2201      	movs	r2, #1
  40103e:	fa02 f303 	lsl.w	r3, r2, r3
  401042:	4a06      	ldr	r2, [pc, #24]	; (40105c <_pwm_init+0x134>)
  401044:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  401048:	2000      	movs	r0, #0
  40104a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40104c:	00404854 	.word	0x00404854
  401050:	00400941 	.word	0x00400941
  401054:	00400e99 	.word	0x00400e99
  401058:	00400ec9 	.word	0x00400ec9
  40105c:	e000e100 	.word	0xe000e100

00401060 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  401060:	2000      	movs	r0, #0
  401062:	4770      	bx	lr

00401064 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  401064:	4b03      	ldr	r3, [pc, #12]	; (401074 <_system_time_init+0x10>)
  401066:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  40106a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  40106c:	2205      	movs	r2, #5
  40106e:	601a      	str	r2, [r3, #0]
  401070:	4770      	bx	lr
  401072:	bf00      	nop
  401074:	e000e010 	.word	0xe000e010

00401078 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  401078:	b508      	push	{r3, lr}
	_system_time_init(hw);
  40107a:	4b01      	ldr	r3, [pc, #4]	; (401080 <_delay_init+0x8>)
  40107c:	4798      	blx	r3
  40107e:	bd08      	pop	{r3, pc}
  401080:	00401065 	.word	0x00401065

00401084 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  401084:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  401086:	e00d      	b.n	4010a4 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  401088:	4b0d      	ldr	r3, [pc, #52]	; (4010c0 <_delay_cycles+0x3c>)
  40108a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  40108e:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401090:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401092:	4b0b      	ldr	r3, [pc, #44]	; (4010c0 <_delay_cycles+0x3c>)
  401094:	681b      	ldr	r3, [r3, #0]
  401096:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40109a:	d0fa      	beq.n	401092 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  40109c:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4010a0:	3101      	adds	r1, #1
	while (n--) {
  4010a2:	4610      	mov	r0, r2
  4010a4:	1e43      	subs	r3, r0, #1
  4010a6:	b2da      	uxtb	r2, r3
  4010a8:	2800      	cmp	r0, #0
  4010aa:	d1ed      	bne.n	401088 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  4010ac:	4b04      	ldr	r3, [pc, #16]	; (4010c0 <_delay_cycles+0x3c>)
  4010ae:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4010b0:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4010b2:	4b03      	ldr	r3, [pc, #12]	; (4010c0 <_delay_cycles+0x3c>)
  4010b4:	681b      	ldr	r3, [r3, #0]
  4010b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4010ba:	d0fa      	beq.n	4010b2 <_delay_cycles+0x2e>
		;
}
  4010bc:	4770      	bx	lr
  4010be:	bf00      	nop
  4010c0:	e000e010 	.word	0xe000e010

004010c4 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  4010c4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4010c6:	4604      	mov	r4, r0
  4010c8:	f240 222b 	movw	r2, #555	; 0x22b
  4010cc:	4905      	ldr	r1, [pc, #20]	; (4010e4 <_usart_get_hardware_index+0x20>)
  4010ce:	3000      	adds	r0, #0
  4010d0:	bf18      	it	ne
  4010d2:	2001      	movne	r0, #1
  4010d4:	4b04      	ldr	r3, [pc, #16]	; (4010e8 <_usart_get_hardware_index+0x24>)
  4010d6:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  4010d8:	4804      	ldr	r0, [pc, #16]	; (4010ec <_usart_get_hardware_index+0x28>)
  4010da:	4420      	add	r0, r4
}
  4010dc:	f3c0 3087 	ubfx	r0, r0, #14, #8
  4010e0:	bd10      	pop	{r4, pc}
  4010e2:	bf00      	nop
  4010e4:	00404878 	.word	0x00404878
  4010e8:	00400941 	.word	0x00400941
  4010ec:	bffdc000 	.word	0xbffdc000

004010f0 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  4010f0:	b510      	push	{r4, lr}
	ASSERT(hw);
  4010f2:	4604      	mov	r4, r0
  4010f4:	f240 2287 	movw	r2, #647	; 0x287
  4010f8:	490e      	ldr	r1, [pc, #56]	; (401134 <_get_usart_index+0x44>)
  4010fa:	3000      	adds	r0, #0
  4010fc:	bf18      	it	ne
  4010fe:	2001      	movne	r0, #1
  401100:	4b0d      	ldr	r3, [pc, #52]	; (401138 <_get_usart_index+0x48>)
  401102:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  401104:	4620      	mov	r0, r4
  401106:	4b0d      	ldr	r3, [pc, #52]	; (40113c <_get_usart_index+0x4c>)
  401108:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40110a:	2300      	movs	r3, #0
  40110c:	b143      	cbz	r3, 401120 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  40110e:	f240 2291 	movw	r2, #657	; 0x291
  401112:	4908      	ldr	r1, [pc, #32]	; (401134 <_get_usart_index+0x44>)
  401114:	2000      	movs	r0, #0
  401116:	4b08      	ldr	r3, [pc, #32]	; (401138 <_get_usart_index+0x48>)
  401118:	4798      	blx	r3
	return 0;
  40111a:	2300      	movs	r3, #0
}
  40111c:	4618      	mov	r0, r3
  40111e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  401120:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401124:	008a      	lsls	r2, r1, #2
  401126:	4906      	ldr	r1, [pc, #24]	; (401140 <_get_usart_index+0x50>)
  401128:	5c8a      	ldrb	r2, [r1, r2]
  40112a:	4290      	cmp	r0, r2
  40112c:	d0f6      	beq.n	40111c <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40112e:	3301      	adds	r3, #1
  401130:	b2db      	uxtb	r3, r3
  401132:	e7eb      	b.n	40110c <_get_usart_index+0x1c>
  401134:	00404878 	.word	0x00404878
  401138:	00400941 	.word	0x00400941
  40113c:	004010c5 	.word	0x004010c5
  401140:	0040486c 	.word	0x0040486c

00401144 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  401144:	b510      	push	{r4, lr}
	ASSERT(hw);
  401146:	4604      	mov	r4, r0
  401148:	f240 229e 	movw	r2, #670	; 0x29e
  40114c:	4911      	ldr	r1, [pc, #68]	; (401194 <_usart_init+0x50>)
  40114e:	3000      	adds	r0, #0
  401150:	bf18      	it	ne
  401152:	2001      	movne	r0, #1
  401154:	4b10      	ldr	r3, [pc, #64]	; (401198 <_usart_init+0x54>)
  401156:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  401158:	4620      	mov	r0, r4
  40115a:	4b10      	ldr	r3, [pc, #64]	; (40119c <_usart_init+0x58>)
  40115c:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  40115e:	4b10      	ldr	r3, [pc, #64]	; (4011a0 <_usart_init+0x5c>)
  401160:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  401164:	2300      	movs	r3, #0
  401166:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  401168:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  40116a:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  40116c:	22ac      	movs	r2, #172	; 0xac
  40116e:	6022      	str	r2, [r4, #0]
  401170:	f44f 7280 	mov.w	r2, #256	; 0x100
  401174:	6022      	str	r2, [r4, #0]
  401176:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40117a:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  40117c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401180:	0081      	lsls	r1, r0, #2
  401182:	4a08      	ldr	r2, [pc, #32]	; (4011a4 <_usart_init+0x60>)
  401184:	440a      	add	r2, r1
  401186:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  401188:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  40118a:	4a07      	ldr	r2, [pc, #28]	; (4011a8 <_usart_init+0x64>)
  40118c:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  40118e:	4618      	mov	r0, r3
  401190:	bd10      	pop	{r4, pc}
  401192:	bf00      	nop
  401194:	00404878 	.word	0x00404878
  401198:	00400941 	.word	0x00400941
  40119c:	004010f1 	.word	0x004010f1
  4011a0:	55534100 	.word	0x55534100
  4011a4:	0040486c 	.word	0x0040486c
  4011a8:	000100f4 	.word	0x000100f4

004011ac <_usart_sync_init>:
{
  4011ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011ae:	460c      	mov	r4, r1
	ASSERT(device);
  4011b0:	4e09      	ldr	r6, [pc, #36]	; (4011d8 <_usart_sync_init+0x2c>)
  4011b2:	4607      	mov	r7, r0
  4011b4:	22bd      	movs	r2, #189	; 0xbd
  4011b6:	4631      	mov	r1, r6
  4011b8:	3000      	adds	r0, #0
  4011ba:	bf18      	it	ne
  4011bc:	2001      	movne	r0, #1
  4011be:	4d07      	ldr	r5, [pc, #28]	; (4011dc <_usart_sync_init+0x30>)
  4011c0:	47a8      	blx	r5
	ASSERT(hw);
  4011c2:	22be      	movs	r2, #190	; 0xbe
  4011c4:	4631      	mov	r1, r6
  4011c6:	1c20      	adds	r0, r4, #0
  4011c8:	bf18      	it	ne
  4011ca:	2001      	movne	r0, #1
  4011cc:	47a8      	blx	r5
	device->hw = hw;
  4011ce:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  4011d0:	4620      	mov	r0, r4
  4011d2:	4b03      	ldr	r3, [pc, #12]	; (4011e0 <_usart_sync_init+0x34>)
  4011d4:	4798      	blx	r3
}
  4011d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011d8:	00404878 	.word	0x00404878
  4011dc:	00400941 	.word	0x00400941
  4011e0:	00401145 	.word	0x00401145

004011e4 <_usart_sync_enable>:
{
  4011e4:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4011e6:	4e0a      	ldr	r6, [pc, #40]	; (401210 <_usart_sync_enable+0x2c>)
  4011e8:	4604      	mov	r4, r0
  4011ea:	f240 1205 	movw	r2, #261	; 0x105
  4011ee:	4631      	mov	r1, r6
  4011f0:	3000      	adds	r0, #0
  4011f2:	bf18      	it	ne
  4011f4:	2001      	movne	r0, #1
  4011f6:	4d07      	ldr	r5, [pc, #28]	; (401214 <_usart_sync_enable+0x30>)
  4011f8:	47a8      	blx	r5
	_usart_enable(device->hw);
  4011fa:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4011fc:	f240 22c7 	movw	r2, #711	; 0x2c7
  401200:	4631      	mov	r1, r6
  401202:	1c20      	adds	r0, r4, #0
  401204:	bf18      	it	ne
  401206:	2001      	movne	r0, #1
  401208:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  40120a:	2350      	movs	r3, #80	; 0x50
  40120c:	6023      	str	r3, [r4, #0]
  40120e:	bd70      	pop	{r4, r5, r6, pc}
  401210:	00404878 	.word	0x00404878
  401214:	00400941 	.word	0x00400941

00401218 <_usart_sync_write_byte>:
{
  401218:	b538      	push	{r3, r4, r5, lr}
  40121a:	460c      	mov	r4, r1
	ASSERT(device);
  40121c:	4605      	mov	r5, r0
  40121e:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  401222:	4904      	ldr	r1, [pc, #16]	; (401234 <_usart_sync_write_byte+0x1c>)
  401224:	3000      	adds	r0, #0
  401226:	bf18      	it	ne
  401228:	2001      	movne	r0, #1
  40122a:	4b03      	ldr	r3, [pc, #12]	; (401238 <_usart_sync_write_byte+0x20>)
  40122c:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  40122e:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  401230:	61dc      	str	r4, [r3, #28]
  401232:	bd38      	pop	{r3, r4, r5, pc}
  401234:	00404878 	.word	0x00404878
  401238:	00400941 	.word	0x00400941

0040123c <_usart_sync_read_byte>:
{
  40123c:	b510      	push	{r4, lr}
	ASSERT(device);
  40123e:	4604      	mov	r4, r0
  401240:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  401244:	4904      	ldr	r1, [pc, #16]	; (401258 <_usart_sync_read_byte+0x1c>)
  401246:	3000      	adds	r0, #0
  401248:	bf18      	it	ne
  40124a:	2001      	movne	r0, #1
  40124c:	4b03      	ldr	r3, [pc, #12]	; (40125c <_usart_sync_read_byte+0x20>)
  40124e:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  401250:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  401252:	6998      	ldr	r0, [r3, #24]
}
  401254:	b2c0      	uxtb	r0, r0
  401256:	bd10      	pop	{r4, pc}
  401258:	00404878 	.word	0x00404878
  40125c:	00400941 	.word	0x00400941

00401260 <_usart_sync_is_ready_to_send>:
{
  401260:	b510      	push	{r4, lr}
	ASSERT(device);
  401262:	4604      	mov	r4, r0
  401264:	f240 12c3 	movw	r2, #451	; 0x1c3
  401268:	4905      	ldr	r1, [pc, #20]	; (401280 <_usart_sync_is_ready_to_send+0x20>)
  40126a:	3000      	adds	r0, #0
  40126c:	bf18      	it	ne
  40126e:	2001      	movne	r0, #1
  401270:	4b04      	ldr	r3, [pc, #16]	; (401284 <_usart_sync_is_ready_to_send+0x24>)
  401272:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  401274:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  401276:	6958      	ldr	r0, [r3, #20]
}
  401278:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40127c:	bd10      	pop	{r4, pc}
  40127e:	bf00      	nop
  401280:	00404878 	.word	0x00404878
  401284:	00400941 	.word	0x00400941

00401288 <_usart_sync_is_transmit_done>:
{
  401288:	b510      	push	{r4, lr}
	ASSERT(device);
  40128a:	4604      	mov	r4, r0
  40128c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  401290:	4905      	ldr	r1, [pc, #20]	; (4012a8 <_usart_sync_is_transmit_done+0x20>)
  401292:	3000      	adds	r0, #0
  401294:	bf18      	it	ne
  401296:	2001      	movne	r0, #1
  401298:	4b04      	ldr	r3, [pc, #16]	; (4012ac <_usart_sync_is_transmit_done+0x24>)
  40129a:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  40129c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  40129e:	6958      	ldr	r0, [r3, #20]
}
  4012a0:	f3c0 2040 	ubfx	r0, r0, #9, #1
  4012a4:	bd10      	pop	{r4, pc}
  4012a6:	bf00      	nop
  4012a8:	00404878 	.word	0x00404878
  4012ac:	00400941 	.word	0x00400941

004012b0 <_usart_sync_is_byte_received>:
{
  4012b0:	b510      	push	{r4, lr}
	ASSERT(device);
  4012b2:	4604      	mov	r4, r0
  4012b4:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4012b8:	4905      	ldr	r1, [pc, #20]	; (4012d0 <_usart_sync_is_byte_received+0x20>)
  4012ba:	3000      	adds	r0, #0
  4012bc:	bf18      	it	ne
  4012be:	2001      	movne	r0, #1
  4012c0:	4b04      	ldr	r3, [pc, #16]	; (4012d4 <_usart_sync_is_byte_received+0x24>)
  4012c2:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  4012c4:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  4012c6:	6958      	ldr	r0, [r3, #20]
  4012c8:	f000 0001 	and.w	r0, r0, #1
}
  4012cc:	bd10      	pop	{r4, pc}
  4012ce:	bf00      	nop
  4012d0:	00404878 	.word	0x00404878
  4012d4:	00400941 	.word	0x00400941

004012d8 <_usart_get_usart_sync>:
}
  4012d8:	2000      	movs	r0, #0
  4012da:	4770      	bx	lr

004012dc <main>:
#include <atmel_start.h>

int main(void)
{
  4012dc:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  4012de:	4b09      	ldr	r3, [pc, #36]	; (401304 <main+0x28>)
  4012e0:	4798      	blx	r3
	((Pio *)hw)->PIO_CODR = mask;
  4012e2:	4d09      	ldr	r5, [pc, #36]	; (401308 <main+0x2c>)
  4012e4:	f44f 7680 	mov.w	r6, #256	; 0x100
  4012e8:	636e      	str	r6, [r5, #52]	; 0x34
	/* Replace with your application code */
	while (1) {
		
		gpio_set_pin_level(PIN_USER_LED, false);
		//pwm_set_duty(PWM_PHASE_A, 8000);
		delay_ms(2000);
  4012ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  4012ee:	4c07      	ldr	r4, [pc, #28]	; (40130c <main+0x30>)
  4012f0:	47a0      	blx	r4
		printf("heya\n");
  4012f2:	4807      	ldr	r0, [pc, #28]	; (401310 <main+0x34>)
  4012f4:	4b07      	ldr	r3, [pc, #28]	; (401314 <main+0x38>)
  4012f6:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  4012f8:	632e      	str	r6, [r5, #48]	; 0x30
		
		gpio_set_pin_level(PIN_USER_LED, true);
		//pwm_set_duty(PWM_PHASE_A, 3000);
		delay_ms(2000);
  4012fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  4012fe:	47a0      	blx	r4
  401300:	e7ef      	b.n	4012e2 <main+0x6>
  401302:	bf00      	nop
  401304:	004001d5 	.word	0x004001d5
  401308:	400e1200 	.word	0x400e1200
  40130c:	004006ad 	.word	0x004006ad
  401310:	00404894 	.word	0x00404894
  401314:	00401d25 	.word	0x00401d25

00401318 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  401318:	b958      	cbnz	r0, 401332 <_read+0x1a>
{
  40131a:	b508      	push	{r3, lr}
  40131c:	460b      	mov	r3, r1
  40131e:	4611      	mov	r1, r2
  401320:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  401322:	4b05      	ldr	r3, [pc, #20]	; (401338 <_read+0x20>)
  401324:	4798      	blx	r3
	if (n < 0) {
  401326:	2800      	cmp	r0, #0
  401328:	db00      	blt.n	40132c <_read+0x14>
		return -1;
	}

	return n;
}
  40132a:	bd08      	pop	{r3, pc}
		return -1;
  40132c:	f04f 30ff 	mov.w	r0, #4294967295
  401330:	bd08      	pop	{r3, pc}
		return -1;
  401332:	f04f 30ff 	mov.w	r0, #4294967295
  401336:	4770      	bx	lr
  401338:	00401391 	.word	0x00401391

0040133c <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  40133c:	3801      	subs	r0, #1
  40133e:	2802      	cmp	r0, #2
  401340:	d80b      	bhi.n	40135a <_write+0x1e>
{
  401342:	b508      	push	{r3, lr}
  401344:	460b      	mov	r3, r1
  401346:	4611      	mov	r1, r2
  401348:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  40134a:	4b05      	ldr	r3, [pc, #20]	; (401360 <_write+0x24>)
  40134c:	4798      	blx	r3
	if (n < 0) {
  40134e:	2800      	cmp	r0, #0
  401350:	db00      	blt.n	401354 <_write+0x18>
		return -1;
	}

	return n;
}
  401352:	bd08      	pop	{r3, pc}
		return -1;
  401354:	f04f 30ff 	mov.w	r0, #4294967295
  401358:	bd08      	pop	{r3, pc}
		return -1;
  40135a:	f04f 30ff 	mov.w	r0, #4294967295
  40135e:	4770      	bx	lr
  401360:	004013b5 	.word	0x004013b5

00401364 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  401364:	b570      	push	{r4, r5, r6, lr}
  401366:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  401368:	4d06      	ldr	r5, [pc, #24]	; (401384 <stdio_io_init+0x20>)
  40136a:	682b      	ldr	r3, [r5, #0]
  40136c:	2100      	movs	r1, #0
  40136e:	6898      	ldr	r0, [r3, #8]
  401370:	4c05      	ldr	r4, [pc, #20]	; (401388 <stdio_io_init+0x24>)
  401372:	47a0      	blx	r4
	setbuf(stdin, NULL);
  401374:	682b      	ldr	r3, [r5, #0]
  401376:	2100      	movs	r1, #0
  401378:	6858      	ldr	r0, [r3, #4]
  40137a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  40137c:	4b03      	ldr	r3, [pc, #12]	; (40138c <stdio_io_init+0x28>)
  40137e:	601e      	str	r6, [r3, #0]
  401380:	bd70      	pop	{r4, r5, r6, pc}
  401382:	bf00      	nop
  401384:	20400000 	.word	0x20400000
  401388:	00401d55 	.word	0x00401d55
  40138c:	2040025c 	.word	0x2040025c

00401390 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  401390:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401392:	4b06      	ldr	r3, [pc, #24]	; (4013ac <stdio_io_read+0x1c>)
  401394:	681b      	ldr	r3, [r3, #0]
  401396:	b133      	cbz	r3, 4013a6 <stdio_io_read+0x16>
  401398:	460a      	mov	r2, r1
  40139a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  40139c:	b292      	uxth	r2, r2
  40139e:	4618      	mov	r0, r3
  4013a0:	4b03      	ldr	r3, [pc, #12]	; (4013b0 <stdio_io_read+0x20>)
  4013a2:	4798      	blx	r3
  4013a4:	bd08      	pop	{r3, pc}
		return 0;
  4013a6:	2000      	movs	r0, #0
}
  4013a8:	bd08      	pop	{r3, pc}
  4013aa:	bf00      	nop
  4013ac:	2040025c 	.word	0x2040025c
  4013b0:	00400775 	.word	0x00400775

004013b4 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  4013b4:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4013b6:	4b06      	ldr	r3, [pc, #24]	; (4013d0 <stdio_io_write+0x1c>)
  4013b8:	681b      	ldr	r3, [r3, #0]
  4013ba:	b133      	cbz	r3, 4013ca <stdio_io_write+0x16>
  4013bc:	460a      	mov	r2, r1
  4013be:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  4013c0:	b292      	uxth	r2, r2
  4013c2:	4618      	mov	r0, r3
  4013c4:	4b03      	ldr	r3, [pc, #12]	; (4013d4 <stdio_io_write+0x20>)
  4013c6:	4798      	blx	r3
  4013c8:	bd08      	pop	{r3, pc}
		return 0;
  4013ca:	2000      	movs	r0, #0
}
  4013cc:	bd08      	pop	{r3, pc}
  4013ce:	bf00      	nop
  4013d0:	2040025c 	.word	0x2040025c
  4013d4:	00400745 	.word	0x00400745

004013d8 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  4013d8:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  4013da:	4c04      	ldr	r4, [pc, #16]	; (4013ec <stdio_redirect_init+0x14>)
  4013dc:	4620      	mov	r0, r4
  4013de:	4b04      	ldr	r3, [pc, #16]	; (4013f0 <stdio_redirect_init+0x18>)
  4013e0:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  4013e2:	4620      	mov	r0, r4
  4013e4:	4b03      	ldr	r3, [pc, #12]	; (4013f4 <stdio_redirect_init+0x1c>)
  4013e6:	4798      	blx	r3
  4013e8:	bd10      	pop	{r4, pc}
  4013ea:	bf00      	nop
  4013ec:	204002ac 	.word	0x204002ac
  4013f0:	00400915 	.word	0x00400915
  4013f4:	00401365 	.word	0x00401365

004013f8 <__libc_init_array>:
  4013f8:	b570      	push	{r4, r5, r6, lr}
  4013fa:	4e0d      	ldr	r6, [pc, #52]	; (401430 <__libc_init_array+0x38>)
  4013fc:	4c0d      	ldr	r4, [pc, #52]	; (401434 <__libc_init_array+0x3c>)
  4013fe:	1ba4      	subs	r4, r4, r6
  401400:	10a4      	asrs	r4, r4, #2
  401402:	2500      	movs	r5, #0
  401404:	42a5      	cmp	r5, r4
  401406:	d109      	bne.n	40141c <__libc_init_array+0x24>
  401408:	4e0b      	ldr	r6, [pc, #44]	; (401438 <__libc_init_array+0x40>)
  40140a:	4c0c      	ldr	r4, [pc, #48]	; (40143c <__libc_init_array+0x44>)
  40140c:	f003 fba8 	bl	404b60 <_init>
  401410:	1ba4      	subs	r4, r4, r6
  401412:	10a4      	asrs	r4, r4, #2
  401414:	2500      	movs	r5, #0
  401416:	42a5      	cmp	r5, r4
  401418:	d105      	bne.n	401426 <__libc_init_array+0x2e>
  40141a:	bd70      	pop	{r4, r5, r6, pc}
  40141c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401420:	4798      	blx	r3
  401422:	3501      	adds	r5, #1
  401424:	e7ee      	b.n	401404 <__libc_init_array+0xc>
  401426:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40142a:	4798      	blx	r3
  40142c:	3501      	adds	r5, #1
  40142e:	e7f2      	b.n	401416 <__libc_init_array+0x1e>
  401430:	00404b6c 	.word	0x00404b6c
  401434:	00404b6c 	.word	0x00404b6c
  401438:	00404b6c 	.word	0x00404b6c
  40143c:	00404b70 	.word	0x00404b70

00401440 <memcpy>:
  401440:	b510      	push	{r4, lr}
  401442:	1e43      	subs	r3, r0, #1
  401444:	440a      	add	r2, r1
  401446:	4291      	cmp	r1, r2
  401448:	d100      	bne.n	40144c <memcpy+0xc>
  40144a:	bd10      	pop	{r4, pc}
  40144c:	f811 4b01 	ldrb.w	r4, [r1], #1
  401450:	f803 4f01 	strb.w	r4, [r3, #1]!
  401454:	e7f7      	b.n	401446 <memcpy+0x6>

00401456 <memset>:
  401456:	4402      	add	r2, r0
  401458:	4603      	mov	r3, r0
  40145a:	4293      	cmp	r3, r2
  40145c:	d100      	bne.n	401460 <memset+0xa>
  40145e:	4770      	bx	lr
  401460:	f803 1b01 	strb.w	r1, [r3], #1
  401464:	e7f9      	b.n	40145a <memset+0x4>

00401466 <__cvt>:
  401466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40146a:	b088      	sub	sp, #32
  40146c:	2b00      	cmp	r3, #0
  40146e:	9f14      	ldr	r7, [sp, #80]	; 0x50
  401470:	9912      	ldr	r1, [sp, #72]	; 0x48
  401472:	9d10      	ldr	r5, [sp, #64]	; 0x40
  401474:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  401478:	461e      	mov	r6, r3
  40147a:	f027 0720 	bic.w	r7, r7, #32
  40147e:	bfbb      	ittet	lt
  401480:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  401484:	461e      	movlt	r6, r3
  401486:	2300      	movge	r3, #0
  401488:	232d      	movlt	r3, #45	; 0x2d
  40148a:	2f46      	cmp	r7, #70	; 0x46
  40148c:	4614      	mov	r4, r2
  40148e:	700b      	strb	r3, [r1, #0]
  401490:	d004      	beq.n	40149c <__cvt+0x36>
  401492:	2f45      	cmp	r7, #69	; 0x45
  401494:	d100      	bne.n	401498 <__cvt+0x32>
  401496:	3501      	adds	r5, #1
  401498:	2302      	movs	r3, #2
  40149a:	e000      	b.n	40149e <__cvt+0x38>
  40149c:	2303      	movs	r3, #3
  40149e:	aa07      	add	r2, sp, #28
  4014a0:	9204      	str	r2, [sp, #16]
  4014a2:	aa06      	add	r2, sp, #24
  4014a4:	9203      	str	r2, [sp, #12]
  4014a6:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  4014aa:	4622      	mov	r2, r4
  4014ac:	4633      	mov	r3, r6
  4014ae:	f000 fd9b 	bl	401fe8 <_dtoa_r>
  4014b2:	2f47      	cmp	r7, #71	; 0x47
  4014b4:	4680      	mov	r8, r0
  4014b6:	d102      	bne.n	4014be <__cvt+0x58>
  4014b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4014ba:	07db      	lsls	r3, r3, #31
  4014bc:	d526      	bpl.n	40150c <__cvt+0xa6>
  4014be:	2f46      	cmp	r7, #70	; 0x46
  4014c0:	eb08 0905 	add.w	r9, r8, r5
  4014c4:	d111      	bne.n	4014ea <__cvt+0x84>
  4014c6:	f898 3000 	ldrb.w	r3, [r8]
  4014ca:	2b30      	cmp	r3, #48	; 0x30
  4014cc:	d10a      	bne.n	4014e4 <__cvt+0x7e>
  4014ce:	2200      	movs	r2, #0
  4014d0:	2300      	movs	r3, #0
  4014d2:	4620      	mov	r0, r4
  4014d4:	4631      	mov	r1, r6
  4014d6:	f003 f829 	bl	40452c <__aeabi_dcmpeq>
  4014da:	b918      	cbnz	r0, 4014e4 <__cvt+0x7e>
  4014dc:	f1c5 0501 	rsb	r5, r5, #1
  4014e0:	f8ca 5000 	str.w	r5, [sl]
  4014e4:	f8da 3000 	ldr.w	r3, [sl]
  4014e8:	4499      	add	r9, r3
  4014ea:	2200      	movs	r2, #0
  4014ec:	2300      	movs	r3, #0
  4014ee:	4620      	mov	r0, r4
  4014f0:	4631      	mov	r1, r6
  4014f2:	f003 f81b 	bl	40452c <__aeabi_dcmpeq>
  4014f6:	b938      	cbnz	r0, 401508 <__cvt+0xa2>
  4014f8:	2230      	movs	r2, #48	; 0x30
  4014fa:	9b07      	ldr	r3, [sp, #28]
  4014fc:	4599      	cmp	r9, r3
  4014fe:	d905      	bls.n	40150c <__cvt+0xa6>
  401500:	1c59      	adds	r1, r3, #1
  401502:	9107      	str	r1, [sp, #28]
  401504:	701a      	strb	r2, [r3, #0]
  401506:	e7f8      	b.n	4014fa <__cvt+0x94>
  401508:	f8cd 901c 	str.w	r9, [sp, #28]
  40150c:	9b07      	ldr	r3, [sp, #28]
  40150e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  401510:	eba3 0308 	sub.w	r3, r3, r8
  401514:	4640      	mov	r0, r8
  401516:	6013      	str	r3, [r2, #0]
  401518:	b008      	add	sp, #32
  40151a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040151e <__exponent>:
  40151e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  401520:	4603      	mov	r3, r0
  401522:	2900      	cmp	r1, #0
  401524:	bfb8      	it	lt
  401526:	4249      	neglt	r1, r1
  401528:	f803 2b02 	strb.w	r2, [r3], #2
  40152c:	bfb4      	ite	lt
  40152e:	222d      	movlt	r2, #45	; 0x2d
  401530:	222b      	movge	r2, #43	; 0x2b
  401532:	2909      	cmp	r1, #9
  401534:	7042      	strb	r2, [r0, #1]
  401536:	dd20      	ble.n	40157a <__exponent+0x5c>
  401538:	f10d 0207 	add.w	r2, sp, #7
  40153c:	4617      	mov	r7, r2
  40153e:	260a      	movs	r6, #10
  401540:	fb91 f5f6 	sdiv	r5, r1, r6
  401544:	fb06 1115 	mls	r1, r6, r5, r1
  401548:	3130      	adds	r1, #48	; 0x30
  40154a:	2d09      	cmp	r5, #9
  40154c:	f802 1c01 	strb.w	r1, [r2, #-1]
  401550:	f102 34ff 	add.w	r4, r2, #4294967295
  401554:	4629      	mov	r1, r5
  401556:	dc09      	bgt.n	40156c <__exponent+0x4e>
  401558:	3130      	adds	r1, #48	; 0x30
  40155a:	3a02      	subs	r2, #2
  40155c:	f804 1c01 	strb.w	r1, [r4, #-1]
  401560:	42ba      	cmp	r2, r7
  401562:	461c      	mov	r4, r3
  401564:	d304      	bcc.n	401570 <__exponent+0x52>
  401566:	1a20      	subs	r0, r4, r0
  401568:	b003      	add	sp, #12
  40156a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40156c:	4622      	mov	r2, r4
  40156e:	e7e7      	b.n	401540 <__exponent+0x22>
  401570:	f812 1b01 	ldrb.w	r1, [r2], #1
  401574:	f803 1b01 	strb.w	r1, [r3], #1
  401578:	e7f2      	b.n	401560 <__exponent+0x42>
  40157a:	2230      	movs	r2, #48	; 0x30
  40157c:	461c      	mov	r4, r3
  40157e:	4411      	add	r1, r2
  401580:	f804 2b02 	strb.w	r2, [r4], #2
  401584:	7059      	strb	r1, [r3, #1]
  401586:	e7ee      	b.n	401566 <__exponent+0x48>

00401588 <_printf_float>:
  401588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40158c:	b091      	sub	sp, #68	; 0x44
  40158e:	460c      	mov	r4, r1
  401590:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  401592:	4693      	mov	fp, r2
  401594:	461e      	mov	r6, r3
  401596:	4605      	mov	r5, r0
  401598:	f001 fc74 	bl	402e84 <_localeconv_r>
  40159c:	6803      	ldr	r3, [r0, #0]
  40159e:	9309      	str	r3, [sp, #36]	; 0x24
  4015a0:	4618      	mov	r0, r3
  4015a2:	f000 fc8d 	bl	401ec0 <strlen>
  4015a6:	2300      	movs	r3, #0
  4015a8:	930e      	str	r3, [sp, #56]	; 0x38
  4015aa:	683b      	ldr	r3, [r7, #0]
  4015ac:	900a      	str	r0, [sp, #40]	; 0x28
  4015ae:	3307      	adds	r3, #7
  4015b0:	f023 0307 	bic.w	r3, r3, #7
  4015b4:	f103 0208 	add.w	r2, r3, #8
  4015b8:	f894 8018 	ldrb.w	r8, [r4, #24]
  4015bc:	f8d4 a000 	ldr.w	sl, [r4]
  4015c0:	603a      	str	r2, [r7, #0]
  4015c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4015c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  4015ca:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  4015ce:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  4015d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4015d4:	930b      	str	r3, [sp, #44]	; 0x2c
  4015d6:	f04f 32ff 	mov.w	r2, #4294967295
  4015da:	4ba6      	ldr	r3, [pc, #664]	; (401874 <_printf_float+0x2ec>)
  4015dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4015de:	4638      	mov	r0, r7
  4015e0:	f002 ffd6 	bl	404590 <__aeabi_dcmpun>
  4015e4:	2800      	cmp	r0, #0
  4015e6:	f040 81f7 	bne.w	4019d8 <_printf_float+0x450>
  4015ea:	f04f 32ff 	mov.w	r2, #4294967295
  4015ee:	4ba1      	ldr	r3, [pc, #644]	; (401874 <_printf_float+0x2ec>)
  4015f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4015f2:	4638      	mov	r0, r7
  4015f4:	f002 ffae 	bl	404554 <__aeabi_dcmple>
  4015f8:	2800      	cmp	r0, #0
  4015fa:	f040 81ed 	bne.w	4019d8 <_printf_float+0x450>
  4015fe:	2200      	movs	r2, #0
  401600:	2300      	movs	r3, #0
  401602:	4638      	mov	r0, r7
  401604:	4649      	mov	r1, r9
  401606:	f002 ff9b 	bl	404540 <__aeabi_dcmplt>
  40160a:	b110      	cbz	r0, 401612 <_printf_float+0x8a>
  40160c:	232d      	movs	r3, #45	; 0x2d
  40160e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  401612:	4b99      	ldr	r3, [pc, #612]	; (401878 <_printf_float+0x2f0>)
  401614:	4f99      	ldr	r7, [pc, #612]	; (40187c <_printf_float+0x2f4>)
  401616:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40161a:	bf98      	it	ls
  40161c:	461f      	movls	r7, r3
  40161e:	2303      	movs	r3, #3
  401620:	6123      	str	r3, [r4, #16]
  401622:	f02a 0304 	bic.w	r3, sl, #4
  401626:	6023      	str	r3, [r4, #0]
  401628:	f04f 0900 	mov.w	r9, #0
  40162c:	9600      	str	r6, [sp, #0]
  40162e:	465b      	mov	r3, fp
  401630:	aa0f      	add	r2, sp, #60	; 0x3c
  401632:	4621      	mov	r1, r4
  401634:	4628      	mov	r0, r5
  401636:	f000 f9df 	bl	4019f8 <_printf_common>
  40163a:	3001      	adds	r0, #1
  40163c:	f040 809a 	bne.w	401774 <_printf_float+0x1ec>
  401640:	f04f 30ff 	mov.w	r0, #4294967295
  401644:	b011      	add	sp, #68	; 0x44
  401646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40164a:	6862      	ldr	r2, [r4, #4]
  40164c:	1c53      	adds	r3, r2, #1
  40164e:	a80e      	add	r0, sp, #56	; 0x38
  401650:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  401654:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  401658:	d141      	bne.n	4016de <_printf_float+0x156>
  40165a:	2206      	movs	r2, #6
  40165c:	6062      	str	r2, [r4, #4]
  40165e:	6023      	str	r3, [r4, #0]
  401660:	2100      	movs	r1, #0
  401662:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  401666:	9301      	str	r3, [sp, #4]
  401668:	6863      	ldr	r3, [r4, #4]
  40166a:	9005      	str	r0, [sp, #20]
  40166c:	9202      	str	r2, [sp, #8]
  40166e:	9300      	str	r3, [sp, #0]
  401670:	463a      	mov	r2, r7
  401672:	464b      	mov	r3, r9
  401674:	9106      	str	r1, [sp, #24]
  401676:	f8cd 8010 	str.w	r8, [sp, #16]
  40167a:	f8cd e00c 	str.w	lr, [sp, #12]
  40167e:	4628      	mov	r0, r5
  401680:	f7ff fef1 	bl	401466 <__cvt>
  401684:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  401688:	2b47      	cmp	r3, #71	; 0x47
  40168a:	4607      	mov	r7, r0
  40168c:	d109      	bne.n	4016a2 <_printf_float+0x11a>
  40168e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401690:	1cd8      	adds	r0, r3, #3
  401692:	db02      	blt.n	40169a <_printf_float+0x112>
  401694:	6862      	ldr	r2, [r4, #4]
  401696:	4293      	cmp	r3, r2
  401698:	dd59      	ble.n	40174e <_printf_float+0x1c6>
  40169a:	f1a8 0802 	sub.w	r8, r8, #2
  40169e:	fa5f f888 	uxtb.w	r8, r8
  4016a2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4016a6:	990d      	ldr	r1, [sp, #52]	; 0x34
  4016a8:	d836      	bhi.n	401718 <_printf_float+0x190>
  4016aa:	3901      	subs	r1, #1
  4016ac:	4642      	mov	r2, r8
  4016ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
  4016b2:	910d      	str	r1, [sp, #52]	; 0x34
  4016b4:	f7ff ff33 	bl	40151e <__exponent>
  4016b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4016ba:	1883      	adds	r3, r0, r2
  4016bc:	2a01      	cmp	r2, #1
  4016be:	4681      	mov	r9, r0
  4016c0:	6123      	str	r3, [r4, #16]
  4016c2:	dc02      	bgt.n	4016ca <_printf_float+0x142>
  4016c4:	6822      	ldr	r2, [r4, #0]
  4016c6:	07d1      	lsls	r1, r2, #31
  4016c8:	d501      	bpl.n	4016ce <_printf_float+0x146>
  4016ca:	3301      	adds	r3, #1
  4016cc:	6123      	str	r3, [r4, #16]
  4016ce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  4016d2:	2b00      	cmp	r3, #0
  4016d4:	d0aa      	beq.n	40162c <_printf_float+0xa4>
  4016d6:	232d      	movs	r3, #45	; 0x2d
  4016d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4016dc:	e7a6      	b.n	40162c <_printf_float+0xa4>
  4016de:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  4016e2:	d002      	beq.n	4016ea <_printf_float+0x162>
  4016e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4016e8:	d1b9      	bne.n	40165e <_printf_float+0xd6>
  4016ea:	b19a      	cbz	r2, 401714 <_printf_float+0x18c>
  4016ec:	2100      	movs	r1, #0
  4016ee:	9106      	str	r1, [sp, #24]
  4016f0:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  4016f4:	e88d 000c 	stmia.w	sp, {r2, r3}
  4016f8:	6023      	str	r3, [r4, #0]
  4016fa:	9005      	str	r0, [sp, #20]
  4016fc:	463a      	mov	r2, r7
  4016fe:	f8cd 8010 	str.w	r8, [sp, #16]
  401702:	f8cd e00c 	str.w	lr, [sp, #12]
  401706:	9102      	str	r1, [sp, #8]
  401708:	464b      	mov	r3, r9
  40170a:	4628      	mov	r0, r5
  40170c:	f7ff feab 	bl	401466 <__cvt>
  401710:	4607      	mov	r7, r0
  401712:	e7bc      	b.n	40168e <_printf_float+0x106>
  401714:	2201      	movs	r2, #1
  401716:	e7a1      	b.n	40165c <_printf_float+0xd4>
  401718:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40171c:	d119      	bne.n	401752 <_printf_float+0x1ca>
  40171e:	2900      	cmp	r1, #0
  401720:	6863      	ldr	r3, [r4, #4]
  401722:	dd0c      	ble.n	40173e <_printf_float+0x1b6>
  401724:	6121      	str	r1, [r4, #16]
  401726:	b913      	cbnz	r3, 40172e <_printf_float+0x1a6>
  401728:	6822      	ldr	r2, [r4, #0]
  40172a:	07d2      	lsls	r2, r2, #31
  40172c:	d502      	bpl.n	401734 <_printf_float+0x1ac>
  40172e:	3301      	adds	r3, #1
  401730:	440b      	add	r3, r1
  401732:	6123      	str	r3, [r4, #16]
  401734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401736:	65a3      	str	r3, [r4, #88]	; 0x58
  401738:	f04f 0900 	mov.w	r9, #0
  40173c:	e7c7      	b.n	4016ce <_printf_float+0x146>
  40173e:	b913      	cbnz	r3, 401746 <_printf_float+0x1be>
  401740:	6822      	ldr	r2, [r4, #0]
  401742:	07d0      	lsls	r0, r2, #31
  401744:	d501      	bpl.n	40174a <_printf_float+0x1c2>
  401746:	3302      	adds	r3, #2
  401748:	e7f3      	b.n	401732 <_printf_float+0x1aa>
  40174a:	2301      	movs	r3, #1
  40174c:	e7f1      	b.n	401732 <_printf_float+0x1aa>
  40174e:	f04f 0867 	mov.w	r8, #103	; 0x67
  401752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401756:	4293      	cmp	r3, r2
  401758:	db05      	blt.n	401766 <_printf_float+0x1de>
  40175a:	6822      	ldr	r2, [r4, #0]
  40175c:	6123      	str	r3, [r4, #16]
  40175e:	07d1      	lsls	r1, r2, #31
  401760:	d5e8      	bpl.n	401734 <_printf_float+0x1ac>
  401762:	3301      	adds	r3, #1
  401764:	e7e5      	b.n	401732 <_printf_float+0x1aa>
  401766:	2b00      	cmp	r3, #0
  401768:	bfd4      	ite	le
  40176a:	f1c3 0302 	rsble	r3, r3, #2
  40176e:	2301      	movgt	r3, #1
  401770:	4413      	add	r3, r2
  401772:	e7de      	b.n	401732 <_printf_float+0x1aa>
  401774:	6823      	ldr	r3, [r4, #0]
  401776:	055a      	lsls	r2, r3, #21
  401778:	d407      	bmi.n	40178a <_printf_float+0x202>
  40177a:	6923      	ldr	r3, [r4, #16]
  40177c:	463a      	mov	r2, r7
  40177e:	4659      	mov	r1, fp
  401780:	4628      	mov	r0, r5
  401782:	47b0      	blx	r6
  401784:	3001      	adds	r0, #1
  401786:	d12a      	bne.n	4017de <_printf_float+0x256>
  401788:	e75a      	b.n	401640 <_printf_float+0xb8>
  40178a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40178e:	f240 80dc 	bls.w	40194a <_printf_float+0x3c2>
  401792:	2200      	movs	r2, #0
  401794:	2300      	movs	r3, #0
  401796:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40179a:	f002 fec7 	bl	40452c <__aeabi_dcmpeq>
  40179e:	2800      	cmp	r0, #0
  4017a0:	d039      	beq.n	401816 <_printf_float+0x28e>
  4017a2:	2301      	movs	r3, #1
  4017a4:	4a36      	ldr	r2, [pc, #216]	; (401880 <_printf_float+0x2f8>)
  4017a6:	4659      	mov	r1, fp
  4017a8:	4628      	mov	r0, r5
  4017aa:	47b0      	blx	r6
  4017ac:	3001      	adds	r0, #1
  4017ae:	f43f af47 	beq.w	401640 <_printf_float+0xb8>
  4017b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4017b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4017b6:	429a      	cmp	r2, r3
  4017b8:	db02      	blt.n	4017c0 <_printf_float+0x238>
  4017ba:	6823      	ldr	r3, [r4, #0]
  4017bc:	07d8      	lsls	r0, r3, #31
  4017be:	d50e      	bpl.n	4017de <_printf_float+0x256>
  4017c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4017c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4017c4:	4659      	mov	r1, fp
  4017c6:	4628      	mov	r0, r5
  4017c8:	47b0      	blx	r6
  4017ca:	3001      	adds	r0, #1
  4017cc:	f43f af38 	beq.w	401640 <_printf_float+0xb8>
  4017d0:	2700      	movs	r7, #0
  4017d2:	f104 081a 	add.w	r8, r4, #26
  4017d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4017d8:	3b01      	subs	r3, #1
  4017da:	429f      	cmp	r7, r3
  4017dc:	db11      	blt.n	401802 <_printf_float+0x27a>
  4017de:	6823      	ldr	r3, [r4, #0]
  4017e0:	079f      	lsls	r7, r3, #30
  4017e2:	d508      	bpl.n	4017f6 <_printf_float+0x26e>
  4017e4:	2700      	movs	r7, #0
  4017e6:	f104 0819 	add.w	r8, r4, #25
  4017ea:	68e3      	ldr	r3, [r4, #12]
  4017ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4017ee:	1a9b      	subs	r3, r3, r2
  4017f0:	429f      	cmp	r7, r3
  4017f2:	f2c0 80e7 	blt.w	4019c4 <_printf_float+0x43c>
  4017f6:	68e0      	ldr	r0, [r4, #12]
  4017f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4017fa:	4298      	cmp	r0, r3
  4017fc:	bfb8      	it	lt
  4017fe:	4618      	movlt	r0, r3
  401800:	e720      	b.n	401644 <_printf_float+0xbc>
  401802:	2301      	movs	r3, #1
  401804:	4642      	mov	r2, r8
  401806:	4659      	mov	r1, fp
  401808:	4628      	mov	r0, r5
  40180a:	47b0      	blx	r6
  40180c:	3001      	adds	r0, #1
  40180e:	f43f af17 	beq.w	401640 <_printf_float+0xb8>
  401812:	3701      	adds	r7, #1
  401814:	e7df      	b.n	4017d6 <_printf_float+0x24e>
  401816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401818:	2b00      	cmp	r3, #0
  40181a:	dc33      	bgt.n	401884 <_printf_float+0x2fc>
  40181c:	2301      	movs	r3, #1
  40181e:	4a18      	ldr	r2, [pc, #96]	; (401880 <_printf_float+0x2f8>)
  401820:	4659      	mov	r1, fp
  401822:	4628      	mov	r0, r5
  401824:	47b0      	blx	r6
  401826:	3001      	adds	r0, #1
  401828:	f43f af0a 	beq.w	401640 <_printf_float+0xb8>
  40182c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40182e:	b923      	cbnz	r3, 40183a <_printf_float+0x2b2>
  401830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401832:	b913      	cbnz	r3, 40183a <_printf_float+0x2b2>
  401834:	6823      	ldr	r3, [r4, #0]
  401836:	07d9      	lsls	r1, r3, #31
  401838:	d5d1      	bpl.n	4017de <_printf_float+0x256>
  40183a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40183c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40183e:	4659      	mov	r1, fp
  401840:	4628      	mov	r0, r5
  401842:	47b0      	blx	r6
  401844:	3001      	adds	r0, #1
  401846:	f43f aefb 	beq.w	401640 <_printf_float+0xb8>
  40184a:	f04f 0800 	mov.w	r8, #0
  40184e:	f104 091a 	add.w	r9, r4, #26
  401852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401854:	425b      	negs	r3, r3
  401856:	4598      	cmp	r8, r3
  401858:	db01      	blt.n	40185e <_printf_float+0x2d6>
  40185a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40185c:	e78e      	b.n	40177c <_printf_float+0x1f4>
  40185e:	2301      	movs	r3, #1
  401860:	464a      	mov	r2, r9
  401862:	4659      	mov	r1, fp
  401864:	4628      	mov	r0, r5
  401866:	47b0      	blx	r6
  401868:	3001      	adds	r0, #1
  40186a:	f43f aee9 	beq.w	401640 <_printf_float+0xb8>
  40186e:	f108 0801 	add.w	r8, r8, #1
  401872:	e7ee      	b.n	401852 <_printf_float+0x2ca>
  401874:	7fefffff 	.word	0x7fefffff
  401878:	004048a0 	.word	0x004048a0
  40187c:	004048a4 	.word	0x004048a4
  401880:	004048b0 	.word	0x004048b0
  401884:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401886:	6da3      	ldr	r3, [r4, #88]	; 0x58
  401888:	429a      	cmp	r2, r3
  40188a:	bfa8      	it	ge
  40188c:	461a      	movge	r2, r3
  40188e:	2a00      	cmp	r2, #0
  401890:	4690      	mov	r8, r2
  401892:	dc36      	bgt.n	401902 <_printf_float+0x37a>
  401894:	f104 031a 	add.w	r3, r4, #26
  401898:	f04f 0a00 	mov.w	sl, #0
  40189c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4018a0:	930b      	str	r3, [sp, #44]	; 0x2c
  4018a2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  4018a6:	eba9 0308 	sub.w	r3, r9, r8
  4018aa:	459a      	cmp	sl, r3
  4018ac:	db31      	blt.n	401912 <_printf_float+0x38a>
  4018ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4018b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4018b2:	429a      	cmp	r2, r3
  4018b4:	db38      	blt.n	401928 <_printf_float+0x3a0>
  4018b6:	6823      	ldr	r3, [r4, #0]
  4018b8:	07da      	lsls	r2, r3, #31
  4018ba:	d435      	bmi.n	401928 <_printf_float+0x3a0>
  4018bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4018be:	990d      	ldr	r1, [sp, #52]	; 0x34
  4018c0:	eba3 0209 	sub.w	r2, r3, r9
  4018c4:	eba3 0801 	sub.w	r8, r3, r1
  4018c8:	4590      	cmp	r8, r2
  4018ca:	bfa8      	it	ge
  4018cc:	4690      	movge	r8, r2
  4018ce:	f1b8 0f00 	cmp.w	r8, #0
  4018d2:	dc31      	bgt.n	401938 <_printf_float+0x3b0>
  4018d4:	2700      	movs	r7, #0
  4018d6:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4018da:	f104 091a 	add.w	r9, r4, #26
  4018de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4018e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4018e2:	1a9b      	subs	r3, r3, r2
  4018e4:	eba3 0308 	sub.w	r3, r3, r8
  4018e8:	429f      	cmp	r7, r3
  4018ea:	f6bf af78 	bge.w	4017de <_printf_float+0x256>
  4018ee:	2301      	movs	r3, #1
  4018f0:	464a      	mov	r2, r9
  4018f2:	4659      	mov	r1, fp
  4018f4:	4628      	mov	r0, r5
  4018f6:	47b0      	blx	r6
  4018f8:	3001      	adds	r0, #1
  4018fa:	f43f aea1 	beq.w	401640 <_printf_float+0xb8>
  4018fe:	3701      	adds	r7, #1
  401900:	e7ed      	b.n	4018de <_printf_float+0x356>
  401902:	4613      	mov	r3, r2
  401904:	4659      	mov	r1, fp
  401906:	463a      	mov	r2, r7
  401908:	4628      	mov	r0, r5
  40190a:	47b0      	blx	r6
  40190c:	3001      	adds	r0, #1
  40190e:	d1c1      	bne.n	401894 <_printf_float+0x30c>
  401910:	e696      	b.n	401640 <_printf_float+0xb8>
  401912:	2301      	movs	r3, #1
  401914:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401916:	4659      	mov	r1, fp
  401918:	4628      	mov	r0, r5
  40191a:	47b0      	blx	r6
  40191c:	3001      	adds	r0, #1
  40191e:	f43f ae8f 	beq.w	401640 <_printf_float+0xb8>
  401922:	f10a 0a01 	add.w	sl, sl, #1
  401926:	e7bc      	b.n	4018a2 <_printf_float+0x31a>
  401928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40192a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40192c:	4659      	mov	r1, fp
  40192e:	4628      	mov	r0, r5
  401930:	47b0      	blx	r6
  401932:	3001      	adds	r0, #1
  401934:	d1c2      	bne.n	4018bc <_printf_float+0x334>
  401936:	e683      	b.n	401640 <_printf_float+0xb8>
  401938:	4643      	mov	r3, r8
  40193a:	eb07 0209 	add.w	r2, r7, r9
  40193e:	4659      	mov	r1, fp
  401940:	4628      	mov	r0, r5
  401942:	47b0      	blx	r6
  401944:	3001      	adds	r0, #1
  401946:	d1c5      	bne.n	4018d4 <_printf_float+0x34c>
  401948:	e67a      	b.n	401640 <_printf_float+0xb8>
  40194a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40194c:	2a01      	cmp	r2, #1
  40194e:	dc01      	bgt.n	401954 <_printf_float+0x3cc>
  401950:	07db      	lsls	r3, r3, #31
  401952:	d534      	bpl.n	4019be <_printf_float+0x436>
  401954:	2301      	movs	r3, #1
  401956:	463a      	mov	r2, r7
  401958:	4659      	mov	r1, fp
  40195a:	4628      	mov	r0, r5
  40195c:	47b0      	blx	r6
  40195e:	3001      	adds	r0, #1
  401960:	f43f ae6e 	beq.w	401640 <_printf_float+0xb8>
  401964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401966:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401968:	4659      	mov	r1, fp
  40196a:	4628      	mov	r0, r5
  40196c:	47b0      	blx	r6
  40196e:	3001      	adds	r0, #1
  401970:	f43f ae66 	beq.w	401640 <_printf_float+0xb8>
  401974:	2200      	movs	r2, #0
  401976:	2300      	movs	r3, #0
  401978:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40197c:	f002 fdd6 	bl	40452c <__aeabi_dcmpeq>
  401980:	b150      	cbz	r0, 401998 <_printf_float+0x410>
  401982:	2700      	movs	r7, #0
  401984:	f104 081a 	add.w	r8, r4, #26
  401988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40198a:	3b01      	subs	r3, #1
  40198c:	429f      	cmp	r7, r3
  40198e:	db0c      	blt.n	4019aa <_printf_float+0x422>
  401990:	464b      	mov	r3, r9
  401992:	f104 0250 	add.w	r2, r4, #80	; 0x50
  401996:	e6f2      	b.n	40177e <_printf_float+0x1f6>
  401998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40199a:	1c7a      	adds	r2, r7, #1
  40199c:	3b01      	subs	r3, #1
  40199e:	4659      	mov	r1, fp
  4019a0:	4628      	mov	r0, r5
  4019a2:	47b0      	blx	r6
  4019a4:	3001      	adds	r0, #1
  4019a6:	d1f3      	bne.n	401990 <_printf_float+0x408>
  4019a8:	e64a      	b.n	401640 <_printf_float+0xb8>
  4019aa:	2301      	movs	r3, #1
  4019ac:	4642      	mov	r2, r8
  4019ae:	4659      	mov	r1, fp
  4019b0:	4628      	mov	r0, r5
  4019b2:	47b0      	blx	r6
  4019b4:	3001      	adds	r0, #1
  4019b6:	f43f ae43 	beq.w	401640 <_printf_float+0xb8>
  4019ba:	3701      	adds	r7, #1
  4019bc:	e7e4      	b.n	401988 <_printf_float+0x400>
  4019be:	2301      	movs	r3, #1
  4019c0:	463a      	mov	r2, r7
  4019c2:	e7ec      	b.n	40199e <_printf_float+0x416>
  4019c4:	2301      	movs	r3, #1
  4019c6:	4642      	mov	r2, r8
  4019c8:	4659      	mov	r1, fp
  4019ca:	4628      	mov	r0, r5
  4019cc:	47b0      	blx	r6
  4019ce:	3001      	adds	r0, #1
  4019d0:	f43f ae36 	beq.w	401640 <_printf_float+0xb8>
  4019d4:	3701      	adds	r7, #1
  4019d6:	e708      	b.n	4017ea <_printf_float+0x262>
  4019d8:	463a      	mov	r2, r7
  4019da:	464b      	mov	r3, r9
  4019dc:	4638      	mov	r0, r7
  4019de:	4649      	mov	r1, r9
  4019e0:	f002 fdd6 	bl	404590 <__aeabi_dcmpun>
  4019e4:	2800      	cmp	r0, #0
  4019e6:	f43f ae30 	beq.w	40164a <_printf_float+0xc2>
  4019ea:	4b01      	ldr	r3, [pc, #4]	; (4019f0 <_printf_float+0x468>)
  4019ec:	4f01      	ldr	r7, [pc, #4]	; (4019f4 <_printf_float+0x46c>)
  4019ee:	e612      	b.n	401616 <_printf_float+0x8e>
  4019f0:	004048a8 	.word	0x004048a8
  4019f4:	004048ac 	.word	0x004048ac

004019f8 <_printf_common>:
  4019f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4019fc:	4691      	mov	r9, r2
  4019fe:	461f      	mov	r7, r3
  401a00:	688a      	ldr	r2, [r1, #8]
  401a02:	690b      	ldr	r3, [r1, #16]
  401a04:	f8dd 8020 	ldr.w	r8, [sp, #32]
  401a08:	4293      	cmp	r3, r2
  401a0a:	bfb8      	it	lt
  401a0c:	4613      	movlt	r3, r2
  401a0e:	f8c9 3000 	str.w	r3, [r9]
  401a12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  401a16:	4606      	mov	r6, r0
  401a18:	460c      	mov	r4, r1
  401a1a:	b112      	cbz	r2, 401a22 <_printf_common+0x2a>
  401a1c:	3301      	adds	r3, #1
  401a1e:	f8c9 3000 	str.w	r3, [r9]
  401a22:	6823      	ldr	r3, [r4, #0]
  401a24:	0699      	lsls	r1, r3, #26
  401a26:	bf42      	ittt	mi
  401a28:	f8d9 3000 	ldrmi.w	r3, [r9]
  401a2c:	3302      	addmi	r3, #2
  401a2e:	f8c9 3000 	strmi.w	r3, [r9]
  401a32:	6825      	ldr	r5, [r4, #0]
  401a34:	f015 0506 	ands.w	r5, r5, #6
  401a38:	d107      	bne.n	401a4a <_printf_common+0x52>
  401a3a:	f104 0a19 	add.w	sl, r4, #25
  401a3e:	68e3      	ldr	r3, [r4, #12]
  401a40:	f8d9 2000 	ldr.w	r2, [r9]
  401a44:	1a9b      	subs	r3, r3, r2
  401a46:	429d      	cmp	r5, r3
  401a48:	db29      	blt.n	401a9e <_printf_common+0xa6>
  401a4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  401a4e:	6822      	ldr	r2, [r4, #0]
  401a50:	3300      	adds	r3, #0
  401a52:	bf18      	it	ne
  401a54:	2301      	movne	r3, #1
  401a56:	0692      	lsls	r2, r2, #26
  401a58:	d42e      	bmi.n	401ab8 <_printf_common+0xc0>
  401a5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401a5e:	4639      	mov	r1, r7
  401a60:	4630      	mov	r0, r6
  401a62:	47c0      	blx	r8
  401a64:	3001      	adds	r0, #1
  401a66:	d021      	beq.n	401aac <_printf_common+0xb4>
  401a68:	6823      	ldr	r3, [r4, #0]
  401a6a:	68e5      	ldr	r5, [r4, #12]
  401a6c:	f8d9 2000 	ldr.w	r2, [r9]
  401a70:	f003 0306 	and.w	r3, r3, #6
  401a74:	2b04      	cmp	r3, #4
  401a76:	bf08      	it	eq
  401a78:	1aad      	subeq	r5, r5, r2
  401a7a:	68a3      	ldr	r3, [r4, #8]
  401a7c:	6922      	ldr	r2, [r4, #16]
  401a7e:	bf0c      	ite	eq
  401a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  401a84:	2500      	movne	r5, #0
  401a86:	4293      	cmp	r3, r2
  401a88:	bfc4      	itt	gt
  401a8a:	1a9b      	subgt	r3, r3, r2
  401a8c:	18ed      	addgt	r5, r5, r3
  401a8e:	f04f 0900 	mov.w	r9, #0
  401a92:	341a      	adds	r4, #26
  401a94:	454d      	cmp	r5, r9
  401a96:	d11b      	bne.n	401ad0 <_printf_common+0xd8>
  401a98:	2000      	movs	r0, #0
  401a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a9e:	2301      	movs	r3, #1
  401aa0:	4652      	mov	r2, sl
  401aa2:	4639      	mov	r1, r7
  401aa4:	4630      	mov	r0, r6
  401aa6:	47c0      	blx	r8
  401aa8:	3001      	adds	r0, #1
  401aaa:	d103      	bne.n	401ab4 <_printf_common+0xbc>
  401aac:	f04f 30ff 	mov.w	r0, #4294967295
  401ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401ab4:	3501      	adds	r5, #1
  401ab6:	e7c2      	b.n	401a3e <_printf_common+0x46>
  401ab8:	18e1      	adds	r1, r4, r3
  401aba:	1c5a      	adds	r2, r3, #1
  401abc:	2030      	movs	r0, #48	; 0x30
  401abe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  401ac2:	4422      	add	r2, r4
  401ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  401ac8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  401acc:	3302      	adds	r3, #2
  401ace:	e7c4      	b.n	401a5a <_printf_common+0x62>
  401ad0:	2301      	movs	r3, #1
  401ad2:	4622      	mov	r2, r4
  401ad4:	4639      	mov	r1, r7
  401ad6:	4630      	mov	r0, r6
  401ad8:	47c0      	blx	r8
  401ada:	3001      	adds	r0, #1
  401adc:	d0e6      	beq.n	401aac <_printf_common+0xb4>
  401ade:	f109 0901 	add.w	r9, r9, #1
  401ae2:	e7d7      	b.n	401a94 <_printf_common+0x9c>

00401ae4 <_printf_i>:
  401ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401ae8:	4617      	mov	r7, r2
  401aea:	7e0a      	ldrb	r2, [r1, #24]
  401aec:	b085      	sub	sp, #20
  401aee:	2a6e      	cmp	r2, #110	; 0x6e
  401af0:	4698      	mov	r8, r3
  401af2:	4606      	mov	r6, r0
  401af4:	460c      	mov	r4, r1
  401af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401af8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  401afc:	f000 80bc 	beq.w	401c78 <_printf_i+0x194>
  401b00:	d81a      	bhi.n	401b38 <_printf_i+0x54>
  401b02:	2a63      	cmp	r2, #99	; 0x63
  401b04:	d02e      	beq.n	401b64 <_printf_i+0x80>
  401b06:	d80a      	bhi.n	401b1e <_printf_i+0x3a>
  401b08:	2a00      	cmp	r2, #0
  401b0a:	f000 80c8 	beq.w	401c9e <_printf_i+0x1ba>
  401b0e:	2a58      	cmp	r2, #88	; 0x58
  401b10:	f000 808a 	beq.w	401c28 <_printf_i+0x144>
  401b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
  401b18:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  401b1c:	e02a      	b.n	401b74 <_printf_i+0x90>
  401b1e:	2a64      	cmp	r2, #100	; 0x64
  401b20:	d001      	beq.n	401b26 <_printf_i+0x42>
  401b22:	2a69      	cmp	r2, #105	; 0x69
  401b24:	d1f6      	bne.n	401b14 <_printf_i+0x30>
  401b26:	6821      	ldr	r1, [r4, #0]
  401b28:	681a      	ldr	r2, [r3, #0]
  401b2a:	f011 0f80 	tst.w	r1, #128	; 0x80
  401b2e:	d023      	beq.n	401b78 <_printf_i+0x94>
  401b30:	1d11      	adds	r1, r2, #4
  401b32:	6019      	str	r1, [r3, #0]
  401b34:	6813      	ldr	r3, [r2, #0]
  401b36:	e027      	b.n	401b88 <_printf_i+0xa4>
  401b38:	2a73      	cmp	r2, #115	; 0x73
  401b3a:	f000 80b4 	beq.w	401ca6 <_printf_i+0x1c2>
  401b3e:	d808      	bhi.n	401b52 <_printf_i+0x6e>
  401b40:	2a6f      	cmp	r2, #111	; 0x6f
  401b42:	d02a      	beq.n	401b9a <_printf_i+0xb6>
  401b44:	2a70      	cmp	r2, #112	; 0x70
  401b46:	d1e5      	bne.n	401b14 <_printf_i+0x30>
  401b48:	680a      	ldr	r2, [r1, #0]
  401b4a:	f042 0220 	orr.w	r2, r2, #32
  401b4e:	600a      	str	r2, [r1, #0]
  401b50:	e003      	b.n	401b5a <_printf_i+0x76>
  401b52:	2a75      	cmp	r2, #117	; 0x75
  401b54:	d021      	beq.n	401b9a <_printf_i+0xb6>
  401b56:	2a78      	cmp	r2, #120	; 0x78
  401b58:	d1dc      	bne.n	401b14 <_printf_i+0x30>
  401b5a:	2278      	movs	r2, #120	; 0x78
  401b5c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  401b60:	496e      	ldr	r1, [pc, #440]	; (401d1c <_printf_i+0x238>)
  401b62:	e064      	b.n	401c2e <_printf_i+0x14a>
  401b64:	681a      	ldr	r2, [r3, #0]
  401b66:	f101 0542 	add.w	r5, r1, #66	; 0x42
  401b6a:	1d11      	adds	r1, r2, #4
  401b6c:	6019      	str	r1, [r3, #0]
  401b6e:	6813      	ldr	r3, [r2, #0]
  401b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  401b74:	2301      	movs	r3, #1
  401b76:	e0a3      	b.n	401cc0 <_printf_i+0x1dc>
  401b78:	f011 0f40 	tst.w	r1, #64	; 0x40
  401b7c:	f102 0104 	add.w	r1, r2, #4
  401b80:	6019      	str	r1, [r3, #0]
  401b82:	d0d7      	beq.n	401b34 <_printf_i+0x50>
  401b84:	f9b2 3000 	ldrsh.w	r3, [r2]
  401b88:	2b00      	cmp	r3, #0
  401b8a:	da03      	bge.n	401b94 <_printf_i+0xb0>
  401b8c:	222d      	movs	r2, #45	; 0x2d
  401b8e:	425b      	negs	r3, r3
  401b90:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  401b94:	4962      	ldr	r1, [pc, #392]	; (401d20 <_printf_i+0x23c>)
  401b96:	220a      	movs	r2, #10
  401b98:	e017      	b.n	401bca <_printf_i+0xe6>
  401b9a:	6820      	ldr	r0, [r4, #0]
  401b9c:	6819      	ldr	r1, [r3, #0]
  401b9e:	f010 0f80 	tst.w	r0, #128	; 0x80
  401ba2:	d003      	beq.n	401bac <_printf_i+0xc8>
  401ba4:	1d08      	adds	r0, r1, #4
  401ba6:	6018      	str	r0, [r3, #0]
  401ba8:	680b      	ldr	r3, [r1, #0]
  401baa:	e006      	b.n	401bba <_printf_i+0xd6>
  401bac:	f010 0f40 	tst.w	r0, #64	; 0x40
  401bb0:	f101 0004 	add.w	r0, r1, #4
  401bb4:	6018      	str	r0, [r3, #0]
  401bb6:	d0f7      	beq.n	401ba8 <_printf_i+0xc4>
  401bb8:	880b      	ldrh	r3, [r1, #0]
  401bba:	4959      	ldr	r1, [pc, #356]	; (401d20 <_printf_i+0x23c>)
  401bbc:	2a6f      	cmp	r2, #111	; 0x6f
  401bbe:	bf14      	ite	ne
  401bc0:	220a      	movne	r2, #10
  401bc2:	2208      	moveq	r2, #8
  401bc4:	2000      	movs	r0, #0
  401bc6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  401bca:	6865      	ldr	r5, [r4, #4]
  401bcc:	60a5      	str	r5, [r4, #8]
  401bce:	2d00      	cmp	r5, #0
  401bd0:	f2c0 809c 	blt.w	401d0c <_printf_i+0x228>
  401bd4:	6820      	ldr	r0, [r4, #0]
  401bd6:	f020 0004 	bic.w	r0, r0, #4
  401bda:	6020      	str	r0, [r4, #0]
  401bdc:	2b00      	cmp	r3, #0
  401bde:	d13f      	bne.n	401c60 <_printf_i+0x17c>
  401be0:	2d00      	cmp	r5, #0
  401be2:	f040 8095 	bne.w	401d10 <_printf_i+0x22c>
  401be6:	4675      	mov	r5, lr
  401be8:	2a08      	cmp	r2, #8
  401bea:	d10b      	bne.n	401c04 <_printf_i+0x120>
  401bec:	6823      	ldr	r3, [r4, #0]
  401bee:	07da      	lsls	r2, r3, #31
  401bf0:	d508      	bpl.n	401c04 <_printf_i+0x120>
  401bf2:	6923      	ldr	r3, [r4, #16]
  401bf4:	6862      	ldr	r2, [r4, #4]
  401bf6:	429a      	cmp	r2, r3
  401bf8:	bfde      	ittt	le
  401bfa:	2330      	movle	r3, #48	; 0x30
  401bfc:	f805 3c01 	strble.w	r3, [r5, #-1]
  401c00:	f105 35ff 	addle.w	r5, r5, #4294967295
  401c04:	ebae 0305 	sub.w	r3, lr, r5
  401c08:	6123      	str	r3, [r4, #16]
  401c0a:	f8cd 8000 	str.w	r8, [sp]
  401c0e:	463b      	mov	r3, r7
  401c10:	aa03      	add	r2, sp, #12
  401c12:	4621      	mov	r1, r4
  401c14:	4630      	mov	r0, r6
  401c16:	f7ff feef 	bl	4019f8 <_printf_common>
  401c1a:	3001      	adds	r0, #1
  401c1c:	d155      	bne.n	401cca <_printf_i+0x1e6>
  401c1e:	f04f 30ff 	mov.w	r0, #4294967295
  401c22:	b005      	add	sp, #20
  401c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401c28:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  401c2c:	493c      	ldr	r1, [pc, #240]	; (401d20 <_printf_i+0x23c>)
  401c2e:	6822      	ldr	r2, [r4, #0]
  401c30:	6818      	ldr	r0, [r3, #0]
  401c32:	f012 0f80 	tst.w	r2, #128	; 0x80
  401c36:	f100 0504 	add.w	r5, r0, #4
  401c3a:	601d      	str	r5, [r3, #0]
  401c3c:	d001      	beq.n	401c42 <_printf_i+0x15e>
  401c3e:	6803      	ldr	r3, [r0, #0]
  401c40:	e002      	b.n	401c48 <_printf_i+0x164>
  401c42:	0655      	lsls	r5, r2, #25
  401c44:	d5fb      	bpl.n	401c3e <_printf_i+0x15a>
  401c46:	8803      	ldrh	r3, [r0, #0]
  401c48:	07d0      	lsls	r0, r2, #31
  401c4a:	bf44      	itt	mi
  401c4c:	f042 0220 	orrmi.w	r2, r2, #32
  401c50:	6022      	strmi	r2, [r4, #0]
  401c52:	b91b      	cbnz	r3, 401c5c <_printf_i+0x178>
  401c54:	6822      	ldr	r2, [r4, #0]
  401c56:	f022 0220 	bic.w	r2, r2, #32
  401c5a:	6022      	str	r2, [r4, #0]
  401c5c:	2210      	movs	r2, #16
  401c5e:	e7b1      	b.n	401bc4 <_printf_i+0xe0>
  401c60:	4675      	mov	r5, lr
  401c62:	fbb3 f0f2 	udiv	r0, r3, r2
  401c66:	fb02 3310 	mls	r3, r2, r0, r3
  401c6a:	5ccb      	ldrb	r3, [r1, r3]
  401c6c:	f805 3d01 	strb.w	r3, [r5, #-1]!
  401c70:	4603      	mov	r3, r0
  401c72:	2800      	cmp	r0, #0
  401c74:	d1f5      	bne.n	401c62 <_printf_i+0x17e>
  401c76:	e7b7      	b.n	401be8 <_printf_i+0x104>
  401c78:	6808      	ldr	r0, [r1, #0]
  401c7a:	681a      	ldr	r2, [r3, #0]
  401c7c:	6949      	ldr	r1, [r1, #20]
  401c7e:	f010 0f80 	tst.w	r0, #128	; 0x80
  401c82:	d004      	beq.n	401c8e <_printf_i+0x1aa>
  401c84:	1d10      	adds	r0, r2, #4
  401c86:	6018      	str	r0, [r3, #0]
  401c88:	6813      	ldr	r3, [r2, #0]
  401c8a:	6019      	str	r1, [r3, #0]
  401c8c:	e007      	b.n	401c9e <_printf_i+0x1ba>
  401c8e:	f010 0f40 	tst.w	r0, #64	; 0x40
  401c92:	f102 0004 	add.w	r0, r2, #4
  401c96:	6018      	str	r0, [r3, #0]
  401c98:	6813      	ldr	r3, [r2, #0]
  401c9a:	d0f6      	beq.n	401c8a <_printf_i+0x1a6>
  401c9c:	8019      	strh	r1, [r3, #0]
  401c9e:	2300      	movs	r3, #0
  401ca0:	6123      	str	r3, [r4, #16]
  401ca2:	4675      	mov	r5, lr
  401ca4:	e7b1      	b.n	401c0a <_printf_i+0x126>
  401ca6:	681a      	ldr	r2, [r3, #0]
  401ca8:	1d11      	adds	r1, r2, #4
  401caa:	6019      	str	r1, [r3, #0]
  401cac:	6815      	ldr	r5, [r2, #0]
  401cae:	6862      	ldr	r2, [r4, #4]
  401cb0:	2100      	movs	r1, #0
  401cb2:	4628      	mov	r0, r5
  401cb4:	f001 f964 	bl	402f80 <memchr>
  401cb8:	b108      	cbz	r0, 401cbe <_printf_i+0x1da>
  401cba:	1b40      	subs	r0, r0, r5
  401cbc:	6060      	str	r0, [r4, #4]
  401cbe:	6863      	ldr	r3, [r4, #4]
  401cc0:	6123      	str	r3, [r4, #16]
  401cc2:	2300      	movs	r3, #0
  401cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  401cc8:	e79f      	b.n	401c0a <_printf_i+0x126>
  401cca:	6923      	ldr	r3, [r4, #16]
  401ccc:	462a      	mov	r2, r5
  401cce:	4639      	mov	r1, r7
  401cd0:	4630      	mov	r0, r6
  401cd2:	47c0      	blx	r8
  401cd4:	3001      	adds	r0, #1
  401cd6:	d0a2      	beq.n	401c1e <_printf_i+0x13a>
  401cd8:	6823      	ldr	r3, [r4, #0]
  401cda:	079b      	lsls	r3, r3, #30
  401cdc:	d507      	bpl.n	401cee <_printf_i+0x20a>
  401cde:	2500      	movs	r5, #0
  401ce0:	f104 0919 	add.w	r9, r4, #25
  401ce4:	68e3      	ldr	r3, [r4, #12]
  401ce6:	9a03      	ldr	r2, [sp, #12]
  401ce8:	1a9b      	subs	r3, r3, r2
  401cea:	429d      	cmp	r5, r3
  401cec:	db05      	blt.n	401cfa <_printf_i+0x216>
  401cee:	68e0      	ldr	r0, [r4, #12]
  401cf0:	9b03      	ldr	r3, [sp, #12]
  401cf2:	4298      	cmp	r0, r3
  401cf4:	bfb8      	it	lt
  401cf6:	4618      	movlt	r0, r3
  401cf8:	e793      	b.n	401c22 <_printf_i+0x13e>
  401cfa:	2301      	movs	r3, #1
  401cfc:	464a      	mov	r2, r9
  401cfe:	4639      	mov	r1, r7
  401d00:	4630      	mov	r0, r6
  401d02:	47c0      	blx	r8
  401d04:	3001      	adds	r0, #1
  401d06:	d08a      	beq.n	401c1e <_printf_i+0x13a>
  401d08:	3501      	adds	r5, #1
  401d0a:	e7eb      	b.n	401ce4 <_printf_i+0x200>
  401d0c:	2b00      	cmp	r3, #0
  401d0e:	d1a7      	bne.n	401c60 <_printf_i+0x17c>
  401d10:	780b      	ldrb	r3, [r1, #0]
  401d12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  401d16:	f104 0542 	add.w	r5, r4, #66	; 0x42
  401d1a:	e765      	b.n	401be8 <_printf_i+0x104>
  401d1c:	004048c3 	.word	0x004048c3
  401d20:	004048b2 	.word	0x004048b2

00401d24 <iprintf>:
  401d24:	b40f      	push	{r0, r1, r2, r3}
  401d26:	4b0a      	ldr	r3, [pc, #40]	; (401d50 <iprintf+0x2c>)
  401d28:	b513      	push	{r0, r1, r4, lr}
  401d2a:	681c      	ldr	r4, [r3, #0]
  401d2c:	b124      	cbz	r4, 401d38 <iprintf+0x14>
  401d2e:	69a3      	ldr	r3, [r4, #24]
  401d30:	b913      	cbnz	r3, 401d38 <iprintf+0x14>
  401d32:	4620      	mov	r0, r4
  401d34:	f001 f81c 	bl	402d70 <__sinit>
  401d38:	ab05      	add	r3, sp, #20
  401d3a:	9a04      	ldr	r2, [sp, #16]
  401d3c:	68a1      	ldr	r1, [r4, #8]
  401d3e:	9301      	str	r3, [sp, #4]
  401d40:	4620      	mov	r0, r4
  401d42:	f001 fd1f 	bl	403784 <_vfiprintf_r>
  401d46:	b002      	add	sp, #8
  401d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401d4c:	b004      	add	sp, #16
  401d4e:	4770      	bx	lr
  401d50:	20400000 	.word	0x20400000

00401d54 <setbuf>:
  401d54:	2900      	cmp	r1, #0
  401d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401d5a:	bf0c      	ite	eq
  401d5c:	2202      	moveq	r2, #2
  401d5e:	2200      	movne	r2, #0
  401d60:	f000 b800 	b.w	401d64 <setvbuf>

00401d64 <setvbuf>:
  401d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  401d68:	461d      	mov	r5, r3
  401d6a:	4b51      	ldr	r3, [pc, #324]	; (401eb0 <setvbuf+0x14c>)
  401d6c:	681e      	ldr	r6, [r3, #0]
  401d6e:	4604      	mov	r4, r0
  401d70:	460f      	mov	r7, r1
  401d72:	4690      	mov	r8, r2
  401d74:	b126      	cbz	r6, 401d80 <setvbuf+0x1c>
  401d76:	69b3      	ldr	r3, [r6, #24]
  401d78:	b913      	cbnz	r3, 401d80 <setvbuf+0x1c>
  401d7a:	4630      	mov	r0, r6
  401d7c:	f000 fff8 	bl	402d70 <__sinit>
  401d80:	4b4c      	ldr	r3, [pc, #304]	; (401eb4 <setvbuf+0x150>)
  401d82:	429c      	cmp	r4, r3
  401d84:	d152      	bne.n	401e2c <setvbuf+0xc8>
  401d86:	6874      	ldr	r4, [r6, #4]
  401d88:	f1b8 0f02 	cmp.w	r8, #2
  401d8c:	d006      	beq.n	401d9c <setvbuf+0x38>
  401d8e:	f1b8 0f01 	cmp.w	r8, #1
  401d92:	f200 8089 	bhi.w	401ea8 <setvbuf+0x144>
  401d96:	2d00      	cmp	r5, #0
  401d98:	f2c0 8086 	blt.w	401ea8 <setvbuf+0x144>
  401d9c:	4621      	mov	r1, r4
  401d9e:	4630      	mov	r0, r6
  401da0:	f000 ff7c 	bl	402c9c <_fflush_r>
  401da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401da6:	b141      	cbz	r1, 401dba <setvbuf+0x56>
  401da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401dac:	4299      	cmp	r1, r3
  401dae:	d002      	beq.n	401db6 <setvbuf+0x52>
  401db0:	4630      	mov	r0, r6
  401db2:	f001 fc13 	bl	4035dc <_free_r>
  401db6:	2300      	movs	r3, #0
  401db8:	6363      	str	r3, [r4, #52]	; 0x34
  401dba:	2300      	movs	r3, #0
  401dbc:	61a3      	str	r3, [r4, #24]
  401dbe:	6063      	str	r3, [r4, #4]
  401dc0:	89a3      	ldrh	r3, [r4, #12]
  401dc2:	061b      	lsls	r3, r3, #24
  401dc4:	d503      	bpl.n	401dce <setvbuf+0x6a>
  401dc6:	6921      	ldr	r1, [r4, #16]
  401dc8:	4630      	mov	r0, r6
  401dca:	f001 fc07 	bl	4035dc <_free_r>
  401dce:	89a3      	ldrh	r3, [r4, #12]
  401dd0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401dd4:	f023 0303 	bic.w	r3, r3, #3
  401dd8:	f1b8 0f02 	cmp.w	r8, #2
  401ddc:	81a3      	strh	r3, [r4, #12]
  401dde:	d05d      	beq.n	401e9c <setvbuf+0x138>
  401de0:	ab01      	add	r3, sp, #4
  401de2:	466a      	mov	r2, sp
  401de4:	4621      	mov	r1, r4
  401de6:	4630      	mov	r0, r6
  401de8:	f001 f85a 	bl	402ea0 <__swhatbuf_r>
  401dec:	89a3      	ldrh	r3, [r4, #12]
  401dee:	4318      	orrs	r0, r3
  401df0:	81a0      	strh	r0, [r4, #12]
  401df2:	bb2d      	cbnz	r5, 401e40 <setvbuf+0xdc>
  401df4:	9d00      	ldr	r5, [sp, #0]
  401df6:	4628      	mov	r0, r5
  401df8:	f001 f8b6 	bl	402f68 <malloc>
  401dfc:	4607      	mov	r7, r0
  401dfe:	2800      	cmp	r0, #0
  401e00:	d14e      	bne.n	401ea0 <setvbuf+0x13c>
  401e02:	f8dd 9000 	ldr.w	r9, [sp]
  401e06:	45a9      	cmp	r9, r5
  401e08:	d13c      	bne.n	401e84 <setvbuf+0x120>
  401e0a:	f04f 30ff 	mov.w	r0, #4294967295
  401e0e:	89a3      	ldrh	r3, [r4, #12]
  401e10:	f043 0302 	orr.w	r3, r3, #2
  401e14:	81a3      	strh	r3, [r4, #12]
  401e16:	2300      	movs	r3, #0
  401e18:	60a3      	str	r3, [r4, #8]
  401e1a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  401e1e:	6023      	str	r3, [r4, #0]
  401e20:	6123      	str	r3, [r4, #16]
  401e22:	2301      	movs	r3, #1
  401e24:	6163      	str	r3, [r4, #20]
  401e26:	b003      	add	sp, #12
  401e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401e2c:	4b22      	ldr	r3, [pc, #136]	; (401eb8 <setvbuf+0x154>)
  401e2e:	429c      	cmp	r4, r3
  401e30:	d101      	bne.n	401e36 <setvbuf+0xd2>
  401e32:	68b4      	ldr	r4, [r6, #8]
  401e34:	e7a8      	b.n	401d88 <setvbuf+0x24>
  401e36:	4b21      	ldr	r3, [pc, #132]	; (401ebc <setvbuf+0x158>)
  401e38:	429c      	cmp	r4, r3
  401e3a:	bf08      	it	eq
  401e3c:	68f4      	ldreq	r4, [r6, #12]
  401e3e:	e7a3      	b.n	401d88 <setvbuf+0x24>
  401e40:	2f00      	cmp	r7, #0
  401e42:	d0d8      	beq.n	401df6 <setvbuf+0x92>
  401e44:	69b3      	ldr	r3, [r6, #24]
  401e46:	b913      	cbnz	r3, 401e4e <setvbuf+0xea>
  401e48:	4630      	mov	r0, r6
  401e4a:	f000 ff91 	bl	402d70 <__sinit>
  401e4e:	f1b8 0f01 	cmp.w	r8, #1
  401e52:	bf08      	it	eq
  401e54:	89a3      	ldrheq	r3, [r4, #12]
  401e56:	6027      	str	r7, [r4, #0]
  401e58:	bf04      	itt	eq
  401e5a:	f043 0301 	orreq.w	r3, r3, #1
  401e5e:	81a3      	strheq	r3, [r4, #12]
  401e60:	89a3      	ldrh	r3, [r4, #12]
  401e62:	6127      	str	r7, [r4, #16]
  401e64:	f013 0008 	ands.w	r0, r3, #8
  401e68:	6165      	str	r5, [r4, #20]
  401e6a:	d01b      	beq.n	401ea4 <setvbuf+0x140>
  401e6c:	f013 0001 	ands.w	r0, r3, #1
  401e70:	bf18      	it	ne
  401e72:	426d      	negne	r5, r5
  401e74:	f04f 0300 	mov.w	r3, #0
  401e78:	bf1d      	ittte	ne
  401e7a:	60a3      	strne	r3, [r4, #8]
  401e7c:	61a5      	strne	r5, [r4, #24]
  401e7e:	4618      	movne	r0, r3
  401e80:	60a5      	streq	r5, [r4, #8]
  401e82:	e7d0      	b.n	401e26 <setvbuf+0xc2>
  401e84:	4648      	mov	r0, r9
  401e86:	f001 f86f 	bl	402f68 <malloc>
  401e8a:	4607      	mov	r7, r0
  401e8c:	2800      	cmp	r0, #0
  401e8e:	d0bc      	beq.n	401e0a <setvbuf+0xa6>
  401e90:	89a3      	ldrh	r3, [r4, #12]
  401e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401e96:	81a3      	strh	r3, [r4, #12]
  401e98:	464d      	mov	r5, r9
  401e9a:	e7d3      	b.n	401e44 <setvbuf+0xe0>
  401e9c:	2000      	movs	r0, #0
  401e9e:	e7b6      	b.n	401e0e <setvbuf+0xaa>
  401ea0:	46a9      	mov	r9, r5
  401ea2:	e7f5      	b.n	401e90 <setvbuf+0x12c>
  401ea4:	60a0      	str	r0, [r4, #8]
  401ea6:	e7be      	b.n	401e26 <setvbuf+0xc2>
  401ea8:	f04f 30ff 	mov.w	r0, #4294967295
  401eac:	e7bb      	b.n	401e26 <setvbuf+0xc2>
  401eae:	bf00      	nop
  401eb0:	20400000 	.word	0x20400000
  401eb4:	00404904 	.word	0x00404904
  401eb8:	00404924 	.word	0x00404924
  401ebc:	004048e4 	.word	0x004048e4

00401ec0 <strlen>:
  401ec0:	4603      	mov	r3, r0
  401ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
  401ec6:	2a00      	cmp	r2, #0
  401ec8:	d1fb      	bne.n	401ec2 <strlen+0x2>
  401eca:	1a18      	subs	r0, r3, r0
  401ecc:	3801      	subs	r0, #1
  401ece:	4770      	bx	lr

00401ed0 <quorem>:
  401ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ed4:	6903      	ldr	r3, [r0, #16]
  401ed6:	690c      	ldr	r4, [r1, #16]
  401ed8:	429c      	cmp	r4, r3
  401eda:	4680      	mov	r8, r0
  401edc:	f300 8082 	bgt.w	401fe4 <quorem+0x114>
  401ee0:	3c01      	subs	r4, #1
  401ee2:	f101 0714 	add.w	r7, r1, #20
  401ee6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  401eea:	f100 0614 	add.w	r6, r0, #20
  401eee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  401ef2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  401ef6:	eb06 030e 	add.w	r3, r6, lr
  401efa:	3501      	adds	r5, #1
  401efc:	eb07 090e 	add.w	r9, r7, lr
  401f00:	9301      	str	r3, [sp, #4]
  401f02:	fbb0 f5f5 	udiv	r5, r0, r5
  401f06:	b395      	cbz	r5, 401f6e <quorem+0x9e>
  401f08:	f04f 0a00 	mov.w	sl, #0
  401f0c:	4638      	mov	r0, r7
  401f0e:	46b4      	mov	ip, r6
  401f10:	46d3      	mov	fp, sl
  401f12:	f850 2b04 	ldr.w	r2, [r0], #4
  401f16:	b293      	uxth	r3, r2
  401f18:	fb05 a303 	mla	r3, r5, r3, sl
  401f1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  401f20:	b29b      	uxth	r3, r3
  401f22:	ebab 0303 	sub.w	r3, fp, r3
  401f26:	0c12      	lsrs	r2, r2, #16
  401f28:	f8bc b000 	ldrh.w	fp, [ip]
  401f2c:	fb05 a202 	mla	r2, r5, r2, sl
  401f30:	fa13 f38b 	uxtah	r3, r3, fp
  401f34:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  401f38:	fa1f fb82 	uxth.w	fp, r2
  401f3c:	f8dc 2000 	ldr.w	r2, [ip]
  401f40:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  401f44:	eb02 4223 	add.w	r2, r2, r3, asr #16
  401f48:	b29b      	uxth	r3, r3
  401f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401f4e:	4581      	cmp	r9, r0
  401f50:	ea4f 4b22 	mov.w	fp, r2, asr #16
  401f54:	f84c 3b04 	str.w	r3, [ip], #4
  401f58:	d2db      	bcs.n	401f12 <quorem+0x42>
  401f5a:	f856 300e 	ldr.w	r3, [r6, lr]
  401f5e:	b933      	cbnz	r3, 401f6e <quorem+0x9e>
  401f60:	9b01      	ldr	r3, [sp, #4]
  401f62:	3b04      	subs	r3, #4
  401f64:	429e      	cmp	r6, r3
  401f66:	461a      	mov	r2, r3
  401f68:	d330      	bcc.n	401fcc <quorem+0xfc>
  401f6a:	f8c8 4010 	str.w	r4, [r8, #16]
  401f6e:	4640      	mov	r0, r8
  401f70:	f001 fa5f 	bl	403432 <__mcmp>
  401f74:	2800      	cmp	r0, #0
  401f76:	db25      	blt.n	401fc4 <quorem+0xf4>
  401f78:	3501      	adds	r5, #1
  401f7a:	4630      	mov	r0, r6
  401f7c:	f04f 0e00 	mov.w	lr, #0
  401f80:	f857 2b04 	ldr.w	r2, [r7], #4
  401f84:	f8d0 c000 	ldr.w	ip, [r0]
  401f88:	b293      	uxth	r3, r2
  401f8a:	ebae 0303 	sub.w	r3, lr, r3
  401f8e:	0c12      	lsrs	r2, r2, #16
  401f90:	fa13 f38c 	uxtah	r3, r3, ip
  401f94:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  401f98:	eb02 4223 	add.w	r2, r2, r3, asr #16
  401f9c:	b29b      	uxth	r3, r3
  401f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401fa2:	45b9      	cmp	r9, r7
  401fa4:	ea4f 4e22 	mov.w	lr, r2, asr #16
  401fa8:	f840 3b04 	str.w	r3, [r0], #4
  401fac:	d2e8      	bcs.n	401f80 <quorem+0xb0>
  401fae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  401fb2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  401fb6:	b92a      	cbnz	r2, 401fc4 <quorem+0xf4>
  401fb8:	3b04      	subs	r3, #4
  401fba:	429e      	cmp	r6, r3
  401fbc:	461a      	mov	r2, r3
  401fbe:	d30b      	bcc.n	401fd8 <quorem+0x108>
  401fc0:	f8c8 4010 	str.w	r4, [r8, #16]
  401fc4:	4628      	mov	r0, r5
  401fc6:	b003      	add	sp, #12
  401fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fcc:	6812      	ldr	r2, [r2, #0]
  401fce:	3b04      	subs	r3, #4
  401fd0:	2a00      	cmp	r2, #0
  401fd2:	d1ca      	bne.n	401f6a <quorem+0x9a>
  401fd4:	3c01      	subs	r4, #1
  401fd6:	e7c5      	b.n	401f64 <quorem+0x94>
  401fd8:	6812      	ldr	r2, [r2, #0]
  401fda:	3b04      	subs	r3, #4
  401fdc:	2a00      	cmp	r2, #0
  401fde:	d1ef      	bne.n	401fc0 <quorem+0xf0>
  401fe0:	3c01      	subs	r4, #1
  401fe2:	e7ea      	b.n	401fba <quorem+0xea>
  401fe4:	2000      	movs	r0, #0
  401fe6:	e7ee      	b.n	401fc6 <quorem+0xf6>

00401fe8 <_dtoa_r>:
  401fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401fec:	6a46      	ldr	r6, [r0, #36]	; 0x24
  401fee:	b095      	sub	sp, #84	; 0x54
  401ff0:	4604      	mov	r4, r0
  401ff2:	9d21      	ldr	r5, [sp, #132]	; 0x84
  401ff4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  401ff8:	b93e      	cbnz	r6, 40200a <_dtoa_r+0x22>
  401ffa:	2010      	movs	r0, #16
  401ffc:	f000 ffb4 	bl	402f68 <malloc>
  402000:	6260      	str	r0, [r4, #36]	; 0x24
  402002:	6046      	str	r6, [r0, #4]
  402004:	6086      	str	r6, [r0, #8]
  402006:	6006      	str	r6, [r0, #0]
  402008:	60c6      	str	r6, [r0, #12]
  40200a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40200c:	6819      	ldr	r1, [r3, #0]
  40200e:	b151      	cbz	r1, 402026 <_dtoa_r+0x3e>
  402010:	685a      	ldr	r2, [r3, #4]
  402012:	604a      	str	r2, [r1, #4]
  402014:	2301      	movs	r3, #1
  402016:	4093      	lsls	r3, r2
  402018:	608b      	str	r3, [r1, #8]
  40201a:	4620      	mov	r0, r4
  40201c:	f001 f834 	bl	403088 <_Bfree>
  402020:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402022:	2200      	movs	r2, #0
  402024:	601a      	str	r2, [r3, #0]
  402026:	9b03      	ldr	r3, [sp, #12]
  402028:	2b00      	cmp	r3, #0
  40202a:	bfbf      	itttt	lt
  40202c:	2301      	movlt	r3, #1
  40202e:	602b      	strlt	r3, [r5, #0]
  402030:	9b03      	ldrlt	r3, [sp, #12]
  402032:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  402036:	bfb2      	itee	lt
  402038:	9303      	strlt	r3, [sp, #12]
  40203a:	2300      	movge	r3, #0
  40203c:	602b      	strge	r3, [r5, #0]
  40203e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  402042:	4ba9      	ldr	r3, [pc, #676]	; (4022e8 <_dtoa_r+0x300>)
  402044:	ea33 0309 	bics.w	r3, r3, r9
  402048:	d11b      	bne.n	402082 <_dtoa_r+0x9a>
  40204a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40204c:	f242 730f 	movw	r3, #9999	; 0x270f
  402050:	6013      	str	r3, [r2, #0]
  402052:	9b02      	ldr	r3, [sp, #8]
  402054:	b923      	cbnz	r3, 402060 <_dtoa_r+0x78>
  402056:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40205a:	2800      	cmp	r0, #0
  40205c:	f000 8581 	beq.w	402b62 <_dtoa_r+0xb7a>
  402060:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402062:	b953      	cbnz	r3, 40207a <_dtoa_r+0x92>
  402064:	4ba1      	ldr	r3, [pc, #644]	; (4022ec <_dtoa_r+0x304>)
  402066:	e021      	b.n	4020ac <_dtoa_r+0xc4>
  402068:	4ba1      	ldr	r3, [pc, #644]	; (4022f0 <_dtoa_r+0x308>)
  40206a:	9306      	str	r3, [sp, #24]
  40206c:	3308      	adds	r3, #8
  40206e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  402070:	6013      	str	r3, [r2, #0]
  402072:	9806      	ldr	r0, [sp, #24]
  402074:	b015      	add	sp, #84	; 0x54
  402076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40207a:	4b9c      	ldr	r3, [pc, #624]	; (4022ec <_dtoa_r+0x304>)
  40207c:	9306      	str	r3, [sp, #24]
  40207e:	3303      	adds	r3, #3
  402080:	e7f5      	b.n	40206e <_dtoa_r+0x86>
  402082:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  402086:	2200      	movs	r2, #0
  402088:	2300      	movs	r3, #0
  40208a:	4630      	mov	r0, r6
  40208c:	4639      	mov	r1, r7
  40208e:	f002 fa4d 	bl	40452c <__aeabi_dcmpeq>
  402092:	4680      	mov	r8, r0
  402094:	b160      	cbz	r0, 4020b0 <_dtoa_r+0xc8>
  402096:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402098:	2301      	movs	r3, #1
  40209a:	6013      	str	r3, [r2, #0]
  40209c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40209e:	2b00      	cmp	r3, #0
  4020a0:	f000 855c 	beq.w	402b5c <_dtoa_r+0xb74>
  4020a4:	4b93      	ldr	r3, [pc, #588]	; (4022f4 <_dtoa_r+0x30c>)
  4020a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4020a8:	6013      	str	r3, [r2, #0]
  4020aa:	3b01      	subs	r3, #1
  4020ac:	9306      	str	r3, [sp, #24]
  4020ae:	e7e0      	b.n	402072 <_dtoa_r+0x8a>
  4020b0:	ab12      	add	r3, sp, #72	; 0x48
  4020b2:	9301      	str	r3, [sp, #4]
  4020b4:	ab13      	add	r3, sp, #76	; 0x4c
  4020b6:	9300      	str	r3, [sp, #0]
  4020b8:	4632      	mov	r2, r6
  4020ba:	463b      	mov	r3, r7
  4020bc:	4620      	mov	r0, r4
  4020be:	f001 fa30 	bl	403522 <__d2b>
  4020c2:	f3c9 550a 	ubfx	r5, r9, #20, #11
  4020c6:	4682      	mov	sl, r0
  4020c8:	2d00      	cmp	r5, #0
  4020ca:	d07c      	beq.n	4021c6 <_dtoa_r+0x1de>
  4020cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
  4020d0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4020d4:	4630      	mov	r0, r6
  4020d6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4020da:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  4020de:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  4020e2:	2200      	movs	r2, #0
  4020e4:	4b84      	ldr	r3, [pc, #528]	; (4022f8 <_dtoa_r+0x310>)
  4020e6:	f001 fe05 	bl	403cf4 <__aeabi_dsub>
  4020ea:	a379      	add	r3, pc, #484	; (adr r3, 4022d0 <_dtoa_r+0x2e8>)
  4020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020f0:	f001 ffb4 	bl	40405c <__aeabi_dmul>
  4020f4:	a378      	add	r3, pc, #480	; (adr r3, 4022d8 <_dtoa_r+0x2f0>)
  4020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020fa:	f001 fdfd 	bl	403cf8 <__adddf3>
  4020fe:	4606      	mov	r6, r0
  402100:	4628      	mov	r0, r5
  402102:	460f      	mov	r7, r1
  402104:	f001 ff44 	bl	403f90 <__aeabi_i2d>
  402108:	a375      	add	r3, pc, #468	; (adr r3, 4022e0 <_dtoa_r+0x2f8>)
  40210a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40210e:	f001 ffa5 	bl	40405c <__aeabi_dmul>
  402112:	4602      	mov	r2, r0
  402114:	460b      	mov	r3, r1
  402116:	4630      	mov	r0, r6
  402118:	4639      	mov	r1, r7
  40211a:	f001 fded 	bl	403cf8 <__adddf3>
  40211e:	4606      	mov	r6, r0
  402120:	460f      	mov	r7, r1
  402122:	f002 fa4b 	bl	4045bc <__aeabi_d2iz>
  402126:	2200      	movs	r2, #0
  402128:	4683      	mov	fp, r0
  40212a:	2300      	movs	r3, #0
  40212c:	4630      	mov	r0, r6
  40212e:	4639      	mov	r1, r7
  402130:	f002 fa06 	bl	404540 <__aeabi_dcmplt>
  402134:	b158      	cbz	r0, 40214e <_dtoa_r+0x166>
  402136:	4658      	mov	r0, fp
  402138:	f001 ff2a 	bl	403f90 <__aeabi_i2d>
  40213c:	4602      	mov	r2, r0
  40213e:	460b      	mov	r3, r1
  402140:	4630      	mov	r0, r6
  402142:	4639      	mov	r1, r7
  402144:	f002 f9f2 	bl	40452c <__aeabi_dcmpeq>
  402148:	b908      	cbnz	r0, 40214e <_dtoa_r+0x166>
  40214a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40214e:	f1bb 0f16 	cmp.w	fp, #22
  402152:	d857      	bhi.n	402204 <_dtoa_r+0x21c>
  402154:	4969      	ldr	r1, [pc, #420]	; (4022fc <_dtoa_r+0x314>)
  402156:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40215a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40215e:	e9d1 0100 	ldrd	r0, r1, [r1]
  402162:	f002 fa0b 	bl	40457c <__aeabi_dcmpgt>
  402166:	2800      	cmp	r0, #0
  402168:	d04e      	beq.n	402208 <_dtoa_r+0x220>
  40216a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40216e:	2300      	movs	r3, #0
  402170:	930d      	str	r3, [sp, #52]	; 0x34
  402172:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402174:	1b5d      	subs	r5, r3, r5
  402176:	1e6b      	subs	r3, r5, #1
  402178:	9307      	str	r3, [sp, #28]
  40217a:	bf43      	ittte	mi
  40217c:	2300      	movmi	r3, #0
  40217e:	f1c5 0801 	rsbmi	r8, r5, #1
  402182:	9307      	strmi	r3, [sp, #28]
  402184:	f04f 0800 	movpl.w	r8, #0
  402188:	f1bb 0f00 	cmp.w	fp, #0
  40218c:	db3e      	blt.n	40220c <_dtoa_r+0x224>
  40218e:	9b07      	ldr	r3, [sp, #28]
  402190:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  402194:	445b      	add	r3, fp
  402196:	9307      	str	r3, [sp, #28]
  402198:	2300      	movs	r3, #0
  40219a:	9308      	str	r3, [sp, #32]
  40219c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40219e:	2b09      	cmp	r3, #9
  4021a0:	f200 80b0 	bhi.w	402304 <_dtoa_r+0x31c>
  4021a4:	2b05      	cmp	r3, #5
  4021a6:	bfc4      	itt	gt
  4021a8:	3b04      	subgt	r3, #4
  4021aa:	931e      	strgt	r3, [sp, #120]	; 0x78
  4021ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4021ae:	f1a3 0302 	sub.w	r3, r3, #2
  4021b2:	bfcc      	ite	gt
  4021b4:	2600      	movgt	r6, #0
  4021b6:	2601      	movle	r6, #1
  4021b8:	2b03      	cmp	r3, #3
  4021ba:	f200 80af 	bhi.w	40231c <_dtoa_r+0x334>
  4021be:	e8df f003 	tbb	[pc, r3]
  4021c2:	8583      	.short	0x8583
  4021c4:	772d      	.short	0x772d
  4021c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4021c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
  4021ca:	441d      	add	r5, r3
  4021cc:	f205 4332 	addw	r3, r5, #1074	; 0x432
  4021d0:	2b20      	cmp	r3, #32
  4021d2:	dd11      	ble.n	4021f8 <_dtoa_r+0x210>
  4021d4:	9a02      	ldr	r2, [sp, #8]
  4021d6:	f205 4012 	addw	r0, r5, #1042	; 0x412
  4021da:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4021de:	fa22 f000 	lsr.w	r0, r2, r0
  4021e2:	fa09 f303 	lsl.w	r3, r9, r3
  4021e6:	4318      	orrs	r0, r3
  4021e8:	f001 fec2 	bl	403f70 <__aeabi_ui2d>
  4021ec:	2301      	movs	r3, #1
  4021ee:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4021f2:	3d01      	subs	r5, #1
  4021f4:	9310      	str	r3, [sp, #64]	; 0x40
  4021f6:	e774      	b.n	4020e2 <_dtoa_r+0xfa>
  4021f8:	f1c3 0020 	rsb	r0, r3, #32
  4021fc:	9b02      	ldr	r3, [sp, #8]
  4021fe:	fa03 f000 	lsl.w	r0, r3, r0
  402202:	e7f1      	b.n	4021e8 <_dtoa_r+0x200>
  402204:	2301      	movs	r3, #1
  402206:	e7b3      	b.n	402170 <_dtoa_r+0x188>
  402208:	900d      	str	r0, [sp, #52]	; 0x34
  40220a:	e7b2      	b.n	402172 <_dtoa_r+0x18a>
  40220c:	f1cb 0300 	rsb	r3, fp, #0
  402210:	9308      	str	r3, [sp, #32]
  402212:	2300      	movs	r3, #0
  402214:	eba8 080b 	sub.w	r8, r8, fp
  402218:	930c      	str	r3, [sp, #48]	; 0x30
  40221a:	e7bf      	b.n	40219c <_dtoa_r+0x1b4>
  40221c:	2301      	movs	r3, #1
  40221e:	9309      	str	r3, [sp, #36]	; 0x24
  402220:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402222:	2b00      	cmp	r3, #0
  402224:	dd7d      	ble.n	402322 <_dtoa_r+0x33a>
  402226:	9304      	str	r3, [sp, #16]
  402228:	4699      	mov	r9, r3
  40222a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40222c:	2200      	movs	r2, #0
  40222e:	606a      	str	r2, [r5, #4]
  402230:	2104      	movs	r1, #4
  402232:	f101 0214 	add.w	r2, r1, #20
  402236:	429a      	cmp	r2, r3
  402238:	d978      	bls.n	40232c <_dtoa_r+0x344>
  40223a:	6869      	ldr	r1, [r5, #4]
  40223c:	4620      	mov	r0, r4
  40223e:	f000 feef 	bl	403020 <_Balloc>
  402242:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402244:	6028      	str	r0, [r5, #0]
  402246:	681b      	ldr	r3, [r3, #0]
  402248:	9306      	str	r3, [sp, #24]
  40224a:	f1b9 0f0e 	cmp.w	r9, #14
  40224e:	f200 80ee 	bhi.w	40242e <_dtoa_r+0x446>
  402252:	2e00      	cmp	r6, #0
  402254:	f000 80eb 	beq.w	40242e <_dtoa_r+0x446>
  402258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40225c:	f1bb 0f00 	cmp.w	fp, #0
  402260:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  402264:	dd77      	ble.n	402356 <_dtoa_r+0x36e>
  402266:	4a25      	ldr	r2, [pc, #148]	; (4022fc <_dtoa_r+0x314>)
  402268:	f00b 030f 	and.w	r3, fp, #15
  40226c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402270:	e9d3 2300 	ldrd	r2, r3, [r3]
  402274:	ea4f 162b 	mov.w	r6, fp, asr #4
  402278:	06f0      	lsls	r0, r6, #27
  40227a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40227e:	d55a      	bpl.n	402336 <_dtoa_r+0x34e>
  402280:	4b1f      	ldr	r3, [pc, #124]	; (402300 <_dtoa_r+0x318>)
  402282:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  402286:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40228a:	f002 f811 	bl	4042b0 <__aeabi_ddiv>
  40228e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402292:	f006 060f 	and.w	r6, r6, #15
  402296:	2503      	movs	r5, #3
  402298:	4f19      	ldr	r7, [pc, #100]	; (402300 <_dtoa_r+0x318>)
  40229a:	2e00      	cmp	r6, #0
  40229c:	d14d      	bne.n	40233a <_dtoa_r+0x352>
  40229e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4022a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4022a6:	f002 f803 	bl	4042b0 <__aeabi_ddiv>
  4022aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4022ae:	e06c      	b.n	40238a <_dtoa_r+0x3a2>
  4022b0:	2301      	movs	r3, #1
  4022b2:	9309      	str	r3, [sp, #36]	; 0x24
  4022b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4022b6:	445b      	add	r3, fp
  4022b8:	f103 0901 	add.w	r9, r3, #1
  4022bc:	9304      	str	r3, [sp, #16]
  4022be:	464b      	mov	r3, r9
  4022c0:	2b01      	cmp	r3, #1
  4022c2:	bfb8      	it	lt
  4022c4:	2301      	movlt	r3, #1
  4022c6:	e7b0      	b.n	40222a <_dtoa_r+0x242>
  4022c8:	2300      	movs	r3, #0
  4022ca:	e7a8      	b.n	40221e <_dtoa_r+0x236>
  4022cc:	2300      	movs	r3, #0
  4022ce:	e7f0      	b.n	4022b2 <_dtoa_r+0x2ca>
  4022d0:	636f4361 	.word	0x636f4361
  4022d4:	3fd287a7 	.word	0x3fd287a7
  4022d8:	8b60c8b3 	.word	0x8b60c8b3
  4022dc:	3fc68a28 	.word	0x3fc68a28
  4022e0:	509f79fb 	.word	0x509f79fb
  4022e4:	3fd34413 	.word	0x3fd34413
  4022e8:	7ff00000 	.word	0x7ff00000
  4022ec:	004048dd 	.word	0x004048dd
  4022f0:	004048d4 	.word	0x004048d4
  4022f4:	004048b1 	.word	0x004048b1
  4022f8:	3ff80000 	.word	0x3ff80000
  4022fc:	00404970 	.word	0x00404970
  402300:	00404948 	.word	0x00404948
  402304:	2601      	movs	r6, #1
  402306:	2300      	movs	r3, #0
  402308:	931e      	str	r3, [sp, #120]	; 0x78
  40230a:	9609      	str	r6, [sp, #36]	; 0x24
  40230c:	f04f 33ff 	mov.w	r3, #4294967295
  402310:	9304      	str	r3, [sp, #16]
  402312:	4699      	mov	r9, r3
  402314:	2200      	movs	r2, #0
  402316:	2312      	movs	r3, #18
  402318:	921f      	str	r2, [sp, #124]	; 0x7c
  40231a:	e786      	b.n	40222a <_dtoa_r+0x242>
  40231c:	2301      	movs	r3, #1
  40231e:	9309      	str	r3, [sp, #36]	; 0x24
  402320:	e7f4      	b.n	40230c <_dtoa_r+0x324>
  402322:	2301      	movs	r3, #1
  402324:	9304      	str	r3, [sp, #16]
  402326:	4699      	mov	r9, r3
  402328:	461a      	mov	r2, r3
  40232a:	e7f5      	b.n	402318 <_dtoa_r+0x330>
  40232c:	686a      	ldr	r2, [r5, #4]
  40232e:	3201      	adds	r2, #1
  402330:	606a      	str	r2, [r5, #4]
  402332:	0049      	lsls	r1, r1, #1
  402334:	e77d      	b.n	402232 <_dtoa_r+0x24a>
  402336:	2502      	movs	r5, #2
  402338:	e7ae      	b.n	402298 <_dtoa_r+0x2b0>
  40233a:	07f1      	lsls	r1, r6, #31
  40233c:	d508      	bpl.n	402350 <_dtoa_r+0x368>
  40233e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  402342:	e9d7 2300 	ldrd	r2, r3, [r7]
  402346:	f001 fe89 	bl	40405c <__aeabi_dmul>
  40234a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40234e:	3501      	adds	r5, #1
  402350:	1076      	asrs	r6, r6, #1
  402352:	3708      	adds	r7, #8
  402354:	e7a1      	b.n	40229a <_dtoa_r+0x2b2>
  402356:	f000 80a5 	beq.w	4024a4 <_dtoa_r+0x4bc>
  40235a:	f1cb 0600 	rsb	r6, fp, #0
  40235e:	4ba3      	ldr	r3, [pc, #652]	; (4025ec <_dtoa_r+0x604>)
  402360:	4fa3      	ldr	r7, [pc, #652]	; (4025f0 <_dtoa_r+0x608>)
  402362:	f006 020f 	and.w	r2, r6, #15
  402366:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40236a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40236e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  402372:	f001 fe73 	bl	40405c <__aeabi_dmul>
  402376:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40237a:	1136      	asrs	r6, r6, #4
  40237c:	2300      	movs	r3, #0
  40237e:	2502      	movs	r5, #2
  402380:	2e00      	cmp	r6, #0
  402382:	f040 8084 	bne.w	40248e <_dtoa_r+0x4a6>
  402386:	2b00      	cmp	r3, #0
  402388:	d18f      	bne.n	4022aa <_dtoa_r+0x2c2>
  40238a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40238c:	2b00      	cmp	r3, #0
  40238e:	f000 808b 	beq.w	4024a8 <_dtoa_r+0x4c0>
  402392:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402396:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40239a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40239e:	2200      	movs	r2, #0
  4023a0:	4b94      	ldr	r3, [pc, #592]	; (4025f4 <_dtoa_r+0x60c>)
  4023a2:	f002 f8cd 	bl	404540 <__aeabi_dcmplt>
  4023a6:	2800      	cmp	r0, #0
  4023a8:	d07e      	beq.n	4024a8 <_dtoa_r+0x4c0>
  4023aa:	f1b9 0f00 	cmp.w	r9, #0
  4023ae:	d07b      	beq.n	4024a8 <_dtoa_r+0x4c0>
  4023b0:	9b04      	ldr	r3, [sp, #16]
  4023b2:	2b00      	cmp	r3, #0
  4023b4:	dd37      	ble.n	402426 <_dtoa_r+0x43e>
  4023b6:	2200      	movs	r2, #0
  4023b8:	4b8f      	ldr	r3, [pc, #572]	; (4025f8 <_dtoa_r+0x610>)
  4023ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4023be:	f001 fe4d 	bl	40405c <__aeabi_dmul>
  4023c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4023c6:	9e04      	ldr	r6, [sp, #16]
  4023c8:	f10b 37ff 	add.w	r7, fp, #4294967295
  4023cc:	3501      	adds	r5, #1
  4023ce:	4628      	mov	r0, r5
  4023d0:	f001 fdde 	bl	403f90 <__aeabi_i2d>
  4023d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4023d8:	f001 fe40 	bl	40405c <__aeabi_dmul>
  4023dc:	4b87      	ldr	r3, [pc, #540]	; (4025fc <_dtoa_r+0x614>)
  4023de:	2200      	movs	r2, #0
  4023e0:	f001 fc8a 	bl	403cf8 <__adddf3>
  4023e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4023e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4023ea:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  4023ee:	950b      	str	r5, [sp, #44]	; 0x2c
  4023f0:	2e00      	cmp	r6, #0
  4023f2:	d15c      	bne.n	4024ae <_dtoa_r+0x4c6>
  4023f4:	2200      	movs	r2, #0
  4023f6:	4b82      	ldr	r3, [pc, #520]	; (402600 <_dtoa_r+0x618>)
  4023f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4023fc:	f001 fc7a 	bl	403cf4 <__aeabi_dsub>
  402400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402402:	462b      	mov	r3, r5
  402404:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402408:	f002 f8b8 	bl	40457c <__aeabi_dcmpgt>
  40240c:	2800      	cmp	r0, #0
  40240e:	f040 82f7 	bne.w	402a00 <_dtoa_r+0xa18>
  402412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402414:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  402418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40241c:	f002 f890 	bl	404540 <__aeabi_dcmplt>
  402420:	2800      	cmp	r0, #0
  402422:	f040 82eb 	bne.w	4029fc <_dtoa_r+0xa14>
  402426:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40242a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40242e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402430:	2b00      	cmp	r3, #0
  402432:	f2c0 8151 	blt.w	4026d8 <_dtoa_r+0x6f0>
  402436:	f1bb 0f0e 	cmp.w	fp, #14
  40243a:	f300 814d 	bgt.w	4026d8 <_dtoa_r+0x6f0>
  40243e:	4b6b      	ldr	r3, [pc, #428]	; (4025ec <_dtoa_r+0x604>)
  402440:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  402444:	e9d3 2300 	ldrd	r2, r3, [r3]
  402448:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40244c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40244e:	2b00      	cmp	r3, #0
  402450:	f280 80da 	bge.w	402608 <_dtoa_r+0x620>
  402454:	f1b9 0f00 	cmp.w	r9, #0
  402458:	f300 80d6 	bgt.w	402608 <_dtoa_r+0x620>
  40245c:	f040 82cd 	bne.w	4029fa <_dtoa_r+0xa12>
  402460:	2200      	movs	r2, #0
  402462:	4b67      	ldr	r3, [pc, #412]	; (402600 <_dtoa_r+0x618>)
  402464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402468:	f001 fdf8 	bl	40405c <__aeabi_dmul>
  40246c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402470:	f002 f87a 	bl	404568 <__aeabi_dcmpge>
  402474:	464e      	mov	r6, r9
  402476:	464f      	mov	r7, r9
  402478:	2800      	cmp	r0, #0
  40247a:	f040 82a4 	bne.w	4029c6 <_dtoa_r+0x9de>
  40247e:	9b06      	ldr	r3, [sp, #24]
  402480:	9a06      	ldr	r2, [sp, #24]
  402482:	1c5d      	adds	r5, r3, #1
  402484:	2331      	movs	r3, #49	; 0x31
  402486:	7013      	strb	r3, [r2, #0]
  402488:	f10b 0b01 	add.w	fp, fp, #1
  40248c:	e29f      	b.n	4029ce <_dtoa_r+0x9e6>
  40248e:	07f2      	lsls	r2, r6, #31
  402490:	d505      	bpl.n	40249e <_dtoa_r+0x4b6>
  402492:	e9d7 2300 	ldrd	r2, r3, [r7]
  402496:	f001 fde1 	bl	40405c <__aeabi_dmul>
  40249a:	3501      	adds	r5, #1
  40249c:	2301      	movs	r3, #1
  40249e:	1076      	asrs	r6, r6, #1
  4024a0:	3708      	adds	r7, #8
  4024a2:	e76d      	b.n	402380 <_dtoa_r+0x398>
  4024a4:	2502      	movs	r5, #2
  4024a6:	e770      	b.n	40238a <_dtoa_r+0x3a2>
  4024a8:	465f      	mov	r7, fp
  4024aa:	464e      	mov	r6, r9
  4024ac:	e78f      	b.n	4023ce <_dtoa_r+0x3e6>
  4024ae:	9a06      	ldr	r2, [sp, #24]
  4024b0:	4b4e      	ldr	r3, [pc, #312]	; (4025ec <_dtoa_r+0x604>)
  4024b2:	4432      	add	r2, r6
  4024b4:	9211      	str	r2, [sp, #68]	; 0x44
  4024b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4024b8:	1e71      	subs	r1, r6, #1
  4024ba:	2a00      	cmp	r2, #0
  4024bc:	d048      	beq.n	402550 <_dtoa_r+0x568>
  4024be:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  4024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024c6:	2000      	movs	r0, #0
  4024c8:	494e      	ldr	r1, [pc, #312]	; (402604 <_dtoa_r+0x61c>)
  4024ca:	f001 fef1 	bl	4042b0 <__aeabi_ddiv>
  4024ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4024d2:	f001 fc0f 	bl	403cf4 <__aeabi_dsub>
  4024d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4024da:	9d06      	ldr	r5, [sp, #24]
  4024dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4024e0:	f002 f86c 	bl	4045bc <__aeabi_d2iz>
  4024e4:	4606      	mov	r6, r0
  4024e6:	f001 fd53 	bl	403f90 <__aeabi_i2d>
  4024ea:	4602      	mov	r2, r0
  4024ec:	460b      	mov	r3, r1
  4024ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4024f2:	f001 fbff 	bl	403cf4 <__aeabi_dsub>
  4024f6:	3630      	adds	r6, #48	; 0x30
  4024f8:	f805 6b01 	strb.w	r6, [r5], #1
  4024fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  402500:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402504:	f002 f81c 	bl	404540 <__aeabi_dcmplt>
  402508:	2800      	cmp	r0, #0
  40250a:	d165      	bne.n	4025d8 <_dtoa_r+0x5f0>
  40250c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402510:	2000      	movs	r0, #0
  402512:	4938      	ldr	r1, [pc, #224]	; (4025f4 <_dtoa_r+0x60c>)
  402514:	f001 fbee 	bl	403cf4 <__aeabi_dsub>
  402518:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40251c:	f002 f810 	bl	404540 <__aeabi_dcmplt>
  402520:	2800      	cmp	r0, #0
  402522:	f040 80b9 	bne.w	402698 <_dtoa_r+0x6b0>
  402526:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402528:	429d      	cmp	r5, r3
  40252a:	f43f af7c 	beq.w	402426 <_dtoa_r+0x43e>
  40252e:	2200      	movs	r2, #0
  402530:	4b31      	ldr	r3, [pc, #196]	; (4025f8 <_dtoa_r+0x610>)
  402532:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  402536:	f001 fd91 	bl	40405c <__aeabi_dmul>
  40253a:	2200      	movs	r2, #0
  40253c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  402540:	4b2d      	ldr	r3, [pc, #180]	; (4025f8 <_dtoa_r+0x610>)
  402542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402546:	f001 fd89 	bl	40405c <__aeabi_dmul>
  40254a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40254e:	e7c5      	b.n	4024dc <_dtoa_r+0x4f4>
  402550:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  402554:	e9d1 0100 	ldrd	r0, r1, [r1]
  402558:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40255c:	f001 fd7e 	bl	40405c <__aeabi_dmul>
  402560:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  402564:	9d06      	ldr	r5, [sp, #24]
  402566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40256a:	f002 f827 	bl	4045bc <__aeabi_d2iz>
  40256e:	4606      	mov	r6, r0
  402570:	f001 fd0e 	bl	403f90 <__aeabi_i2d>
  402574:	3630      	adds	r6, #48	; 0x30
  402576:	4602      	mov	r2, r0
  402578:	460b      	mov	r3, r1
  40257a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40257e:	f001 fbb9 	bl	403cf4 <__aeabi_dsub>
  402582:	f805 6b01 	strb.w	r6, [r5], #1
  402586:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402588:	42ab      	cmp	r3, r5
  40258a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40258e:	f04f 0200 	mov.w	r2, #0
  402592:	d125      	bne.n	4025e0 <_dtoa_r+0x5f8>
  402594:	4b1b      	ldr	r3, [pc, #108]	; (402604 <_dtoa_r+0x61c>)
  402596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40259a:	f001 fbad 	bl	403cf8 <__adddf3>
  40259e:	4602      	mov	r2, r0
  4025a0:	460b      	mov	r3, r1
  4025a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4025a6:	f001 ffe9 	bl	40457c <__aeabi_dcmpgt>
  4025aa:	2800      	cmp	r0, #0
  4025ac:	d174      	bne.n	402698 <_dtoa_r+0x6b0>
  4025ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4025b2:	2000      	movs	r0, #0
  4025b4:	4913      	ldr	r1, [pc, #76]	; (402604 <_dtoa_r+0x61c>)
  4025b6:	f001 fb9d 	bl	403cf4 <__aeabi_dsub>
  4025ba:	4602      	mov	r2, r0
  4025bc:	460b      	mov	r3, r1
  4025be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4025c2:	f001 ffbd 	bl	404540 <__aeabi_dcmplt>
  4025c6:	2800      	cmp	r0, #0
  4025c8:	f43f af2d 	beq.w	402426 <_dtoa_r+0x43e>
  4025cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4025d0:	2b30      	cmp	r3, #48	; 0x30
  4025d2:	f105 32ff 	add.w	r2, r5, #4294967295
  4025d6:	d001      	beq.n	4025dc <_dtoa_r+0x5f4>
  4025d8:	46bb      	mov	fp, r7
  4025da:	e04c      	b.n	402676 <_dtoa_r+0x68e>
  4025dc:	4615      	mov	r5, r2
  4025de:	e7f5      	b.n	4025cc <_dtoa_r+0x5e4>
  4025e0:	4b05      	ldr	r3, [pc, #20]	; (4025f8 <_dtoa_r+0x610>)
  4025e2:	f001 fd3b 	bl	40405c <__aeabi_dmul>
  4025e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4025ea:	e7bc      	b.n	402566 <_dtoa_r+0x57e>
  4025ec:	00404970 	.word	0x00404970
  4025f0:	00404948 	.word	0x00404948
  4025f4:	3ff00000 	.word	0x3ff00000
  4025f8:	40240000 	.word	0x40240000
  4025fc:	401c0000 	.word	0x401c0000
  402600:	40140000 	.word	0x40140000
  402604:	3fe00000 	.word	0x3fe00000
  402608:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40260c:	9d06      	ldr	r5, [sp, #24]
  40260e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402612:	4630      	mov	r0, r6
  402614:	4639      	mov	r1, r7
  402616:	f001 fe4b 	bl	4042b0 <__aeabi_ddiv>
  40261a:	f001 ffcf 	bl	4045bc <__aeabi_d2iz>
  40261e:	4680      	mov	r8, r0
  402620:	f001 fcb6 	bl	403f90 <__aeabi_i2d>
  402624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402628:	f001 fd18 	bl	40405c <__aeabi_dmul>
  40262c:	4602      	mov	r2, r0
  40262e:	460b      	mov	r3, r1
  402630:	4630      	mov	r0, r6
  402632:	4639      	mov	r1, r7
  402634:	f108 0630 	add.w	r6, r8, #48	; 0x30
  402638:	f001 fb5c 	bl	403cf4 <__aeabi_dsub>
  40263c:	f805 6b01 	strb.w	r6, [r5], #1
  402640:	9e06      	ldr	r6, [sp, #24]
  402642:	1bae      	subs	r6, r5, r6
  402644:	45b1      	cmp	r9, r6
  402646:	4602      	mov	r2, r0
  402648:	460b      	mov	r3, r1
  40264a:	d138      	bne.n	4026be <_dtoa_r+0x6d6>
  40264c:	f001 fb54 	bl	403cf8 <__adddf3>
  402650:	4606      	mov	r6, r0
  402652:	460f      	mov	r7, r1
  402654:	4602      	mov	r2, r0
  402656:	460b      	mov	r3, r1
  402658:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40265c:	f001 ff70 	bl	404540 <__aeabi_dcmplt>
  402660:	b9c8      	cbnz	r0, 402696 <_dtoa_r+0x6ae>
  402662:	4632      	mov	r2, r6
  402664:	463b      	mov	r3, r7
  402666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40266a:	f001 ff5f 	bl	40452c <__aeabi_dcmpeq>
  40266e:	b110      	cbz	r0, 402676 <_dtoa_r+0x68e>
  402670:	f018 0f01 	tst.w	r8, #1
  402674:	d10f      	bne.n	402696 <_dtoa_r+0x6ae>
  402676:	4651      	mov	r1, sl
  402678:	4620      	mov	r0, r4
  40267a:	f000 fd05 	bl	403088 <_Bfree>
  40267e:	2300      	movs	r3, #0
  402680:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402682:	702b      	strb	r3, [r5, #0]
  402684:	f10b 0301 	add.w	r3, fp, #1
  402688:	6013      	str	r3, [r2, #0]
  40268a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40268c:	2b00      	cmp	r3, #0
  40268e:	f43f acf0 	beq.w	402072 <_dtoa_r+0x8a>
  402692:	601d      	str	r5, [r3, #0]
  402694:	e4ed      	b.n	402072 <_dtoa_r+0x8a>
  402696:	465f      	mov	r7, fp
  402698:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40269c:	2a39      	cmp	r2, #57	; 0x39
  40269e:	f105 33ff 	add.w	r3, r5, #4294967295
  4026a2:	d106      	bne.n	4026b2 <_dtoa_r+0x6ca>
  4026a4:	9a06      	ldr	r2, [sp, #24]
  4026a6:	429a      	cmp	r2, r3
  4026a8:	d107      	bne.n	4026ba <_dtoa_r+0x6d2>
  4026aa:	2330      	movs	r3, #48	; 0x30
  4026ac:	7013      	strb	r3, [r2, #0]
  4026ae:	3701      	adds	r7, #1
  4026b0:	4613      	mov	r3, r2
  4026b2:	781a      	ldrb	r2, [r3, #0]
  4026b4:	3201      	adds	r2, #1
  4026b6:	701a      	strb	r2, [r3, #0]
  4026b8:	e78e      	b.n	4025d8 <_dtoa_r+0x5f0>
  4026ba:	461d      	mov	r5, r3
  4026bc:	e7ec      	b.n	402698 <_dtoa_r+0x6b0>
  4026be:	2200      	movs	r2, #0
  4026c0:	4bb4      	ldr	r3, [pc, #720]	; (402994 <_dtoa_r+0x9ac>)
  4026c2:	f001 fccb 	bl	40405c <__aeabi_dmul>
  4026c6:	2200      	movs	r2, #0
  4026c8:	2300      	movs	r3, #0
  4026ca:	4606      	mov	r6, r0
  4026cc:	460f      	mov	r7, r1
  4026ce:	f001 ff2d 	bl	40452c <__aeabi_dcmpeq>
  4026d2:	2800      	cmp	r0, #0
  4026d4:	d09b      	beq.n	40260e <_dtoa_r+0x626>
  4026d6:	e7ce      	b.n	402676 <_dtoa_r+0x68e>
  4026d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4026da:	2a00      	cmp	r2, #0
  4026dc:	f000 8129 	beq.w	402932 <_dtoa_r+0x94a>
  4026e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4026e2:	2a01      	cmp	r2, #1
  4026e4:	f300 810e 	bgt.w	402904 <_dtoa_r+0x91c>
  4026e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4026ea:	2a00      	cmp	r2, #0
  4026ec:	f000 8106 	beq.w	4028fc <_dtoa_r+0x914>
  4026f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4026f4:	9e08      	ldr	r6, [sp, #32]
  4026f6:	4645      	mov	r5, r8
  4026f8:	9a07      	ldr	r2, [sp, #28]
  4026fa:	2101      	movs	r1, #1
  4026fc:	441a      	add	r2, r3
  4026fe:	4620      	mov	r0, r4
  402700:	4498      	add	r8, r3
  402702:	9207      	str	r2, [sp, #28]
  402704:	f000 fd60 	bl	4031c8 <__i2b>
  402708:	4607      	mov	r7, r0
  40270a:	2d00      	cmp	r5, #0
  40270c:	dd0b      	ble.n	402726 <_dtoa_r+0x73e>
  40270e:	9b07      	ldr	r3, [sp, #28]
  402710:	2b00      	cmp	r3, #0
  402712:	dd08      	ble.n	402726 <_dtoa_r+0x73e>
  402714:	42ab      	cmp	r3, r5
  402716:	9a07      	ldr	r2, [sp, #28]
  402718:	bfa8      	it	ge
  40271a:	462b      	movge	r3, r5
  40271c:	eba8 0803 	sub.w	r8, r8, r3
  402720:	1aed      	subs	r5, r5, r3
  402722:	1ad3      	subs	r3, r2, r3
  402724:	9307      	str	r3, [sp, #28]
  402726:	9b08      	ldr	r3, [sp, #32]
  402728:	b1fb      	cbz	r3, 40276a <_dtoa_r+0x782>
  40272a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40272c:	2b00      	cmp	r3, #0
  40272e:	f000 8104 	beq.w	40293a <_dtoa_r+0x952>
  402732:	2e00      	cmp	r6, #0
  402734:	dd11      	ble.n	40275a <_dtoa_r+0x772>
  402736:	4639      	mov	r1, r7
  402738:	4632      	mov	r2, r6
  40273a:	4620      	mov	r0, r4
  40273c:	f000 fdda 	bl	4032f4 <__pow5mult>
  402740:	4652      	mov	r2, sl
  402742:	4601      	mov	r1, r0
  402744:	4607      	mov	r7, r0
  402746:	4620      	mov	r0, r4
  402748:	f000 fd47 	bl	4031da <__multiply>
  40274c:	4651      	mov	r1, sl
  40274e:	900a      	str	r0, [sp, #40]	; 0x28
  402750:	4620      	mov	r0, r4
  402752:	f000 fc99 	bl	403088 <_Bfree>
  402756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402758:	469a      	mov	sl, r3
  40275a:	9b08      	ldr	r3, [sp, #32]
  40275c:	1b9a      	subs	r2, r3, r6
  40275e:	d004      	beq.n	40276a <_dtoa_r+0x782>
  402760:	4651      	mov	r1, sl
  402762:	4620      	mov	r0, r4
  402764:	f000 fdc6 	bl	4032f4 <__pow5mult>
  402768:	4682      	mov	sl, r0
  40276a:	2101      	movs	r1, #1
  40276c:	4620      	mov	r0, r4
  40276e:	f000 fd2b 	bl	4031c8 <__i2b>
  402772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402774:	2b00      	cmp	r3, #0
  402776:	4606      	mov	r6, r0
  402778:	f340 80e1 	ble.w	40293e <_dtoa_r+0x956>
  40277c:	461a      	mov	r2, r3
  40277e:	4601      	mov	r1, r0
  402780:	4620      	mov	r0, r4
  402782:	f000 fdb7 	bl	4032f4 <__pow5mult>
  402786:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402788:	2b01      	cmp	r3, #1
  40278a:	4606      	mov	r6, r0
  40278c:	f340 80da 	ble.w	402944 <_dtoa_r+0x95c>
  402790:	2300      	movs	r3, #0
  402792:	9308      	str	r3, [sp, #32]
  402794:	6933      	ldr	r3, [r6, #16]
  402796:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  40279a:	6918      	ldr	r0, [r3, #16]
  40279c:	f000 fcc6 	bl	40312c <__hi0bits>
  4027a0:	f1c0 0020 	rsb	r0, r0, #32
  4027a4:	9b07      	ldr	r3, [sp, #28]
  4027a6:	4418      	add	r0, r3
  4027a8:	f010 001f 	ands.w	r0, r0, #31
  4027ac:	f000 80f0 	beq.w	402990 <_dtoa_r+0x9a8>
  4027b0:	f1c0 0320 	rsb	r3, r0, #32
  4027b4:	2b04      	cmp	r3, #4
  4027b6:	f340 80e2 	ble.w	40297e <_dtoa_r+0x996>
  4027ba:	9b07      	ldr	r3, [sp, #28]
  4027bc:	f1c0 001c 	rsb	r0, r0, #28
  4027c0:	4480      	add	r8, r0
  4027c2:	4405      	add	r5, r0
  4027c4:	4403      	add	r3, r0
  4027c6:	9307      	str	r3, [sp, #28]
  4027c8:	f1b8 0f00 	cmp.w	r8, #0
  4027cc:	dd05      	ble.n	4027da <_dtoa_r+0x7f2>
  4027ce:	4651      	mov	r1, sl
  4027d0:	4642      	mov	r2, r8
  4027d2:	4620      	mov	r0, r4
  4027d4:	f000 fddc 	bl	403390 <__lshift>
  4027d8:	4682      	mov	sl, r0
  4027da:	9b07      	ldr	r3, [sp, #28]
  4027dc:	2b00      	cmp	r3, #0
  4027de:	dd05      	ble.n	4027ec <_dtoa_r+0x804>
  4027e0:	4631      	mov	r1, r6
  4027e2:	461a      	mov	r2, r3
  4027e4:	4620      	mov	r0, r4
  4027e6:	f000 fdd3 	bl	403390 <__lshift>
  4027ea:	4606      	mov	r6, r0
  4027ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4027ee:	2b00      	cmp	r3, #0
  4027f0:	f000 80d2 	beq.w	402998 <_dtoa_r+0x9b0>
  4027f4:	4631      	mov	r1, r6
  4027f6:	4650      	mov	r0, sl
  4027f8:	f000 fe1b 	bl	403432 <__mcmp>
  4027fc:	2800      	cmp	r0, #0
  4027fe:	f280 80cb 	bge.w	402998 <_dtoa_r+0x9b0>
  402802:	2300      	movs	r3, #0
  402804:	4651      	mov	r1, sl
  402806:	220a      	movs	r2, #10
  402808:	4620      	mov	r0, r4
  40280a:	f000 fc54 	bl	4030b6 <__multadd>
  40280e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402810:	f10b 3bff 	add.w	fp, fp, #4294967295
  402814:	4682      	mov	sl, r0
  402816:	2b00      	cmp	r3, #0
  402818:	f000 81aa 	beq.w	402b70 <_dtoa_r+0xb88>
  40281c:	2300      	movs	r3, #0
  40281e:	4639      	mov	r1, r7
  402820:	220a      	movs	r2, #10
  402822:	4620      	mov	r0, r4
  402824:	f000 fc47 	bl	4030b6 <__multadd>
  402828:	9b04      	ldr	r3, [sp, #16]
  40282a:	2b00      	cmp	r3, #0
  40282c:	4607      	mov	r7, r0
  40282e:	dc03      	bgt.n	402838 <_dtoa_r+0x850>
  402830:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402832:	2b02      	cmp	r3, #2
  402834:	f300 80b8 	bgt.w	4029a8 <_dtoa_r+0x9c0>
  402838:	2d00      	cmp	r5, #0
  40283a:	dd05      	ble.n	402848 <_dtoa_r+0x860>
  40283c:	4639      	mov	r1, r7
  40283e:	462a      	mov	r2, r5
  402840:	4620      	mov	r0, r4
  402842:	f000 fda5 	bl	403390 <__lshift>
  402846:	4607      	mov	r7, r0
  402848:	9b08      	ldr	r3, [sp, #32]
  40284a:	2b00      	cmp	r3, #0
  40284c:	f000 8110 	beq.w	402a70 <_dtoa_r+0xa88>
  402850:	6879      	ldr	r1, [r7, #4]
  402852:	4620      	mov	r0, r4
  402854:	f000 fbe4 	bl	403020 <_Balloc>
  402858:	693a      	ldr	r2, [r7, #16]
  40285a:	3202      	adds	r2, #2
  40285c:	4605      	mov	r5, r0
  40285e:	0092      	lsls	r2, r2, #2
  402860:	f107 010c 	add.w	r1, r7, #12
  402864:	300c      	adds	r0, #12
  402866:	f7fe fdeb 	bl	401440 <memcpy>
  40286a:	2201      	movs	r2, #1
  40286c:	4629      	mov	r1, r5
  40286e:	4620      	mov	r0, r4
  402870:	f000 fd8e 	bl	403390 <__lshift>
  402874:	9b02      	ldr	r3, [sp, #8]
  402876:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40287a:	9707      	str	r7, [sp, #28]
  40287c:	f003 0301 	and.w	r3, r3, #1
  402880:	4607      	mov	r7, r0
  402882:	9308      	str	r3, [sp, #32]
  402884:	4631      	mov	r1, r6
  402886:	4650      	mov	r0, sl
  402888:	f7ff fb22 	bl	401ed0 <quorem>
  40288c:	9907      	ldr	r1, [sp, #28]
  40288e:	4605      	mov	r5, r0
  402890:	f100 0930 	add.w	r9, r0, #48	; 0x30
  402894:	4650      	mov	r0, sl
  402896:	f000 fdcc 	bl	403432 <__mcmp>
  40289a:	463a      	mov	r2, r7
  40289c:	9002      	str	r0, [sp, #8]
  40289e:	4631      	mov	r1, r6
  4028a0:	4620      	mov	r0, r4
  4028a2:	f000 fde0 	bl	403466 <__mdiff>
  4028a6:	68c3      	ldr	r3, [r0, #12]
  4028a8:	4602      	mov	r2, r0
  4028aa:	2b00      	cmp	r3, #0
  4028ac:	f040 80e2 	bne.w	402a74 <_dtoa_r+0xa8c>
  4028b0:	4601      	mov	r1, r0
  4028b2:	9009      	str	r0, [sp, #36]	; 0x24
  4028b4:	4650      	mov	r0, sl
  4028b6:	f000 fdbc 	bl	403432 <__mcmp>
  4028ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4028bc:	4603      	mov	r3, r0
  4028be:	4611      	mov	r1, r2
  4028c0:	4620      	mov	r0, r4
  4028c2:	9309      	str	r3, [sp, #36]	; 0x24
  4028c4:	f000 fbe0 	bl	403088 <_Bfree>
  4028c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4028ca:	2b00      	cmp	r3, #0
  4028cc:	f040 80d4 	bne.w	402a78 <_dtoa_r+0xa90>
  4028d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4028d2:	2a00      	cmp	r2, #0
  4028d4:	f040 80d0 	bne.w	402a78 <_dtoa_r+0xa90>
  4028d8:	9a08      	ldr	r2, [sp, #32]
  4028da:	2a00      	cmp	r2, #0
  4028dc:	f040 80cc 	bne.w	402a78 <_dtoa_r+0xa90>
  4028e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4028e4:	f000 80e8 	beq.w	402ab8 <_dtoa_r+0xad0>
  4028e8:	9b02      	ldr	r3, [sp, #8]
  4028ea:	2b00      	cmp	r3, #0
  4028ec:	dd01      	ble.n	4028f2 <_dtoa_r+0x90a>
  4028ee:	f105 0931 	add.w	r9, r5, #49	; 0x31
  4028f2:	f108 0501 	add.w	r5, r8, #1
  4028f6:	f888 9000 	strb.w	r9, [r8]
  4028fa:	e06a      	b.n	4029d2 <_dtoa_r+0x9ea>
  4028fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4028fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  402902:	e6f7      	b.n	4026f4 <_dtoa_r+0x70c>
  402904:	9b08      	ldr	r3, [sp, #32]
  402906:	f109 36ff 	add.w	r6, r9, #4294967295
  40290a:	42b3      	cmp	r3, r6
  40290c:	bfbf      	itttt	lt
  40290e:	9b08      	ldrlt	r3, [sp, #32]
  402910:	9608      	strlt	r6, [sp, #32]
  402912:	1af2      	sublt	r2, r6, r3
  402914:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  402916:	bfb7      	itett	lt
  402918:	189b      	addlt	r3, r3, r2
  40291a:	1b9e      	subge	r6, r3, r6
  40291c:	930c      	strlt	r3, [sp, #48]	; 0x30
  40291e:	2600      	movlt	r6, #0
  402920:	f1b9 0f00 	cmp.w	r9, #0
  402924:	bfb9      	ittee	lt
  402926:	eba8 0509 	sublt.w	r5, r8, r9
  40292a:	2300      	movlt	r3, #0
  40292c:	4645      	movge	r5, r8
  40292e:	464b      	movge	r3, r9
  402930:	e6e2      	b.n	4026f8 <_dtoa_r+0x710>
  402932:	9e08      	ldr	r6, [sp, #32]
  402934:	9f09      	ldr	r7, [sp, #36]	; 0x24
  402936:	4645      	mov	r5, r8
  402938:	e6e7      	b.n	40270a <_dtoa_r+0x722>
  40293a:	9a08      	ldr	r2, [sp, #32]
  40293c:	e710      	b.n	402760 <_dtoa_r+0x778>
  40293e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402940:	2b01      	cmp	r3, #1
  402942:	dc18      	bgt.n	402976 <_dtoa_r+0x98e>
  402944:	9b02      	ldr	r3, [sp, #8]
  402946:	b9b3      	cbnz	r3, 402976 <_dtoa_r+0x98e>
  402948:	9b03      	ldr	r3, [sp, #12]
  40294a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40294e:	b9a3      	cbnz	r3, 40297a <_dtoa_r+0x992>
  402950:	9b03      	ldr	r3, [sp, #12]
  402952:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  402956:	0d1b      	lsrs	r3, r3, #20
  402958:	051b      	lsls	r3, r3, #20
  40295a:	b12b      	cbz	r3, 402968 <_dtoa_r+0x980>
  40295c:	9b07      	ldr	r3, [sp, #28]
  40295e:	3301      	adds	r3, #1
  402960:	9307      	str	r3, [sp, #28]
  402962:	f108 0801 	add.w	r8, r8, #1
  402966:	2301      	movs	r3, #1
  402968:	9308      	str	r3, [sp, #32]
  40296a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40296c:	2b00      	cmp	r3, #0
  40296e:	f47f af11 	bne.w	402794 <_dtoa_r+0x7ac>
  402972:	2001      	movs	r0, #1
  402974:	e716      	b.n	4027a4 <_dtoa_r+0x7bc>
  402976:	2300      	movs	r3, #0
  402978:	e7f6      	b.n	402968 <_dtoa_r+0x980>
  40297a:	9b02      	ldr	r3, [sp, #8]
  40297c:	e7f4      	b.n	402968 <_dtoa_r+0x980>
  40297e:	f43f af23 	beq.w	4027c8 <_dtoa_r+0x7e0>
  402982:	9a07      	ldr	r2, [sp, #28]
  402984:	331c      	adds	r3, #28
  402986:	441a      	add	r2, r3
  402988:	4498      	add	r8, r3
  40298a:	441d      	add	r5, r3
  40298c:	4613      	mov	r3, r2
  40298e:	e71a      	b.n	4027c6 <_dtoa_r+0x7de>
  402990:	4603      	mov	r3, r0
  402992:	e7f6      	b.n	402982 <_dtoa_r+0x99a>
  402994:	40240000 	.word	0x40240000
  402998:	f1b9 0f00 	cmp.w	r9, #0
  40299c:	dc33      	bgt.n	402a06 <_dtoa_r+0xa1e>
  40299e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4029a0:	2b02      	cmp	r3, #2
  4029a2:	dd30      	ble.n	402a06 <_dtoa_r+0xa1e>
  4029a4:	f8cd 9010 	str.w	r9, [sp, #16]
  4029a8:	9b04      	ldr	r3, [sp, #16]
  4029aa:	b963      	cbnz	r3, 4029c6 <_dtoa_r+0x9de>
  4029ac:	4631      	mov	r1, r6
  4029ae:	2205      	movs	r2, #5
  4029b0:	4620      	mov	r0, r4
  4029b2:	f000 fb80 	bl	4030b6 <__multadd>
  4029b6:	4601      	mov	r1, r0
  4029b8:	4606      	mov	r6, r0
  4029ba:	4650      	mov	r0, sl
  4029bc:	f000 fd39 	bl	403432 <__mcmp>
  4029c0:	2800      	cmp	r0, #0
  4029c2:	f73f ad5c 	bgt.w	40247e <_dtoa_r+0x496>
  4029c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4029c8:	9d06      	ldr	r5, [sp, #24]
  4029ca:	ea6f 0b03 	mvn.w	fp, r3
  4029ce:	2300      	movs	r3, #0
  4029d0:	9307      	str	r3, [sp, #28]
  4029d2:	4631      	mov	r1, r6
  4029d4:	4620      	mov	r0, r4
  4029d6:	f000 fb57 	bl	403088 <_Bfree>
  4029da:	2f00      	cmp	r7, #0
  4029dc:	f43f ae4b 	beq.w	402676 <_dtoa_r+0x68e>
  4029e0:	9b07      	ldr	r3, [sp, #28]
  4029e2:	b12b      	cbz	r3, 4029f0 <_dtoa_r+0xa08>
  4029e4:	42bb      	cmp	r3, r7
  4029e6:	d003      	beq.n	4029f0 <_dtoa_r+0xa08>
  4029e8:	4619      	mov	r1, r3
  4029ea:	4620      	mov	r0, r4
  4029ec:	f000 fb4c 	bl	403088 <_Bfree>
  4029f0:	4639      	mov	r1, r7
  4029f2:	4620      	mov	r0, r4
  4029f4:	f000 fb48 	bl	403088 <_Bfree>
  4029f8:	e63d      	b.n	402676 <_dtoa_r+0x68e>
  4029fa:	2600      	movs	r6, #0
  4029fc:	4637      	mov	r7, r6
  4029fe:	e7e2      	b.n	4029c6 <_dtoa_r+0x9de>
  402a00:	46bb      	mov	fp, r7
  402a02:	4637      	mov	r7, r6
  402a04:	e53b      	b.n	40247e <_dtoa_r+0x496>
  402a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402a08:	f8cd 9010 	str.w	r9, [sp, #16]
  402a0c:	2b00      	cmp	r3, #0
  402a0e:	f47f af13 	bne.w	402838 <_dtoa_r+0x850>
  402a12:	9d06      	ldr	r5, [sp, #24]
  402a14:	4631      	mov	r1, r6
  402a16:	4650      	mov	r0, sl
  402a18:	f7ff fa5a 	bl	401ed0 <quorem>
  402a1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
  402a20:	f805 9b01 	strb.w	r9, [r5], #1
  402a24:	9b06      	ldr	r3, [sp, #24]
  402a26:	9a04      	ldr	r2, [sp, #16]
  402a28:	1aeb      	subs	r3, r5, r3
  402a2a:	429a      	cmp	r2, r3
  402a2c:	f300 8083 	bgt.w	402b36 <_dtoa_r+0xb4e>
  402a30:	9b06      	ldr	r3, [sp, #24]
  402a32:	2a01      	cmp	r2, #1
  402a34:	bfac      	ite	ge
  402a36:	189b      	addge	r3, r3, r2
  402a38:	3301      	addlt	r3, #1
  402a3a:	4698      	mov	r8, r3
  402a3c:	2300      	movs	r3, #0
  402a3e:	9307      	str	r3, [sp, #28]
  402a40:	4651      	mov	r1, sl
  402a42:	2201      	movs	r2, #1
  402a44:	4620      	mov	r0, r4
  402a46:	f000 fca3 	bl	403390 <__lshift>
  402a4a:	4631      	mov	r1, r6
  402a4c:	4682      	mov	sl, r0
  402a4e:	f000 fcf0 	bl	403432 <__mcmp>
  402a52:	2800      	cmp	r0, #0
  402a54:	dc35      	bgt.n	402ac2 <_dtoa_r+0xada>
  402a56:	d102      	bne.n	402a5e <_dtoa_r+0xa76>
  402a58:	f019 0f01 	tst.w	r9, #1
  402a5c:	d131      	bne.n	402ac2 <_dtoa_r+0xada>
  402a5e:	4645      	mov	r5, r8
  402a60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  402a64:	2b30      	cmp	r3, #48	; 0x30
  402a66:	f105 32ff 	add.w	r2, r5, #4294967295
  402a6a:	d1b2      	bne.n	4029d2 <_dtoa_r+0x9ea>
  402a6c:	4615      	mov	r5, r2
  402a6e:	e7f7      	b.n	402a60 <_dtoa_r+0xa78>
  402a70:	4638      	mov	r0, r7
  402a72:	e6ff      	b.n	402874 <_dtoa_r+0x88c>
  402a74:	2301      	movs	r3, #1
  402a76:	e722      	b.n	4028be <_dtoa_r+0x8d6>
  402a78:	9a02      	ldr	r2, [sp, #8]
  402a7a:	2a00      	cmp	r2, #0
  402a7c:	db04      	blt.n	402a88 <_dtoa_r+0xaa0>
  402a7e:	d129      	bne.n	402ad4 <_dtoa_r+0xaec>
  402a80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  402a82:	bb3a      	cbnz	r2, 402ad4 <_dtoa_r+0xaec>
  402a84:	9a08      	ldr	r2, [sp, #32]
  402a86:	bb2a      	cbnz	r2, 402ad4 <_dtoa_r+0xaec>
  402a88:	2b00      	cmp	r3, #0
  402a8a:	f77f af32 	ble.w	4028f2 <_dtoa_r+0x90a>
  402a8e:	4651      	mov	r1, sl
  402a90:	2201      	movs	r2, #1
  402a92:	4620      	mov	r0, r4
  402a94:	f000 fc7c 	bl	403390 <__lshift>
  402a98:	4631      	mov	r1, r6
  402a9a:	4682      	mov	sl, r0
  402a9c:	f000 fcc9 	bl	403432 <__mcmp>
  402aa0:	2800      	cmp	r0, #0
  402aa2:	dc05      	bgt.n	402ab0 <_dtoa_r+0xac8>
  402aa4:	f47f af25 	bne.w	4028f2 <_dtoa_r+0x90a>
  402aa8:	f019 0f01 	tst.w	r9, #1
  402aac:	f43f af21 	beq.w	4028f2 <_dtoa_r+0x90a>
  402ab0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  402ab4:	f47f af1b 	bne.w	4028ee <_dtoa_r+0x906>
  402ab8:	2339      	movs	r3, #57	; 0x39
  402aba:	f888 3000 	strb.w	r3, [r8]
  402abe:	f108 0801 	add.w	r8, r8, #1
  402ac2:	4645      	mov	r5, r8
  402ac4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  402ac8:	2b39      	cmp	r3, #57	; 0x39
  402aca:	f105 32ff 	add.w	r2, r5, #4294967295
  402ace:	d03a      	beq.n	402b46 <_dtoa_r+0xb5e>
  402ad0:	3301      	adds	r3, #1
  402ad2:	e03f      	b.n	402b54 <_dtoa_r+0xb6c>
  402ad4:	2b00      	cmp	r3, #0
  402ad6:	f108 0501 	add.w	r5, r8, #1
  402ada:	dd05      	ble.n	402ae8 <_dtoa_r+0xb00>
  402adc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  402ae0:	d0ea      	beq.n	402ab8 <_dtoa_r+0xad0>
  402ae2:	f109 0901 	add.w	r9, r9, #1
  402ae6:	e706      	b.n	4028f6 <_dtoa_r+0x90e>
  402ae8:	9b06      	ldr	r3, [sp, #24]
  402aea:	9a04      	ldr	r2, [sp, #16]
  402aec:	f805 9c01 	strb.w	r9, [r5, #-1]
  402af0:	1aeb      	subs	r3, r5, r3
  402af2:	4293      	cmp	r3, r2
  402af4:	46a8      	mov	r8, r5
  402af6:	d0a3      	beq.n	402a40 <_dtoa_r+0xa58>
  402af8:	4651      	mov	r1, sl
  402afa:	2300      	movs	r3, #0
  402afc:	220a      	movs	r2, #10
  402afe:	4620      	mov	r0, r4
  402b00:	f000 fad9 	bl	4030b6 <__multadd>
  402b04:	9b07      	ldr	r3, [sp, #28]
  402b06:	9907      	ldr	r1, [sp, #28]
  402b08:	42bb      	cmp	r3, r7
  402b0a:	4682      	mov	sl, r0
  402b0c:	f04f 0300 	mov.w	r3, #0
  402b10:	f04f 020a 	mov.w	r2, #10
  402b14:	4620      	mov	r0, r4
  402b16:	d104      	bne.n	402b22 <_dtoa_r+0xb3a>
  402b18:	f000 facd 	bl	4030b6 <__multadd>
  402b1c:	9007      	str	r0, [sp, #28]
  402b1e:	4607      	mov	r7, r0
  402b20:	e6b0      	b.n	402884 <_dtoa_r+0x89c>
  402b22:	f000 fac8 	bl	4030b6 <__multadd>
  402b26:	2300      	movs	r3, #0
  402b28:	9007      	str	r0, [sp, #28]
  402b2a:	220a      	movs	r2, #10
  402b2c:	4639      	mov	r1, r7
  402b2e:	4620      	mov	r0, r4
  402b30:	f000 fac1 	bl	4030b6 <__multadd>
  402b34:	e7f3      	b.n	402b1e <_dtoa_r+0xb36>
  402b36:	4651      	mov	r1, sl
  402b38:	2300      	movs	r3, #0
  402b3a:	220a      	movs	r2, #10
  402b3c:	4620      	mov	r0, r4
  402b3e:	f000 faba 	bl	4030b6 <__multadd>
  402b42:	4682      	mov	sl, r0
  402b44:	e766      	b.n	402a14 <_dtoa_r+0xa2c>
  402b46:	9b06      	ldr	r3, [sp, #24]
  402b48:	4293      	cmp	r3, r2
  402b4a:	d105      	bne.n	402b58 <_dtoa_r+0xb70>
  402b4c:	9a06      	ldr	r2, [sp, #24]
  402b4e:	f10b 0b01 	add.w	fp, fp, #1
  402b52:	2331      	movs	r3, #49	; 0x31
  402b54:	7013      	strb	r3, [r2, #0]
  402b56:	e73c      	b.n	4029d2 <_dtoa_r+0x9ea>
  402b58:	4615      	mov	r5, r2
  402b5a:	e7b3      	b.n	402ac4 <_dtoa_r+0xadc>
  402b5c:	4b09      	ldr	r3, [pc, #36]	; (402b84 <_dtoa_r+0xb9c>)
  402b5e:	f7ff baa5 	b.w	4020ac <_dtoa_r+0xc4>
  402b62:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402b64:	2b00      	cmp	r3, #0
  402b66:	f47f aa7f 	bne.w	402068 <_dtoa_r+0x80>
  402b6a:	4b07      	ldr	r3, [pc, #28]	; (402b88 <_dtoa_r+0xba0>)
  402b6c:	f7ff ba9e 	b.w	4020ac <_dtoa_r+0xc4>
  402b70:	9b04      	ldr	r3, [sp, #16]
  402b72:	2b00      	cmp	r3, #0
  402b74:	f73f af4d 	bgt.w	402a12 <_dtoa_r+0xa2a>
  402b78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402b7a:	2b02      	cmp	r3, #2
  402b7c:	f77f af49 	ble.w	402a12 <_dtoa_r+0xa2a>
  402b80:	e712      	b.n	4029a8 <_dtoa_r+0x9c0>
  402b82:	bf00      	nop
  402b84:	004048b0 	.word	0x004048b0
  402b88:	004048d4 	.word	0x004048d4

00402b8c <__sflush_r>:
  402b8c:	898a      	ldrh	r2, [r1, #12]
  402b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b92:	4605      	mov	r5, r0
  402b94:	0710      	lsls	r0, r2, #28
  402b96:	460c      	mov	r4, r1
  402b98:	d45a      	bmi.n	402c50 <__sflush_r+0xc4>
  402b9a:	684b      	ldr	r3, [r1, #4]
  402b9c:	2b00      	cmp	r3, #0
  402b9e:	dc05      	bgt.n	402bac <__sflush_r+0x20>
  402ba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  402ba2:	2b00      	cmp	r3, #0
  402ba4:	dc02      	bgt.n	402bac <__sflush_r+0x20>
  402ba6:	2000      	movs	r0, #0
  402ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  402bae:	2e00      	cmp	r6, #0
  402bb0:	d0f9      	beq.n	402ba6 <__sflush_r+0x1a>
  402bb2:	2300      	movs	r3, #0
  402bb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  402bb8:	682f      	ldr	r7, [r5, #0]
  402bba:	602b      	str	r3, [r5, #0]
  402bbc:	d033      	beq.n	402c26 <__sflush_r+0x9a>
  402bbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
  402bc0:	89a3      	ldrh	r3, [r4, #12]
  402bc2:	075a      	lsls	r2, r3, #29
  402bc4:	d505      	bpl.n	402bd2 <__sflush_r+0x46>
  402bc6:	6863      	ldr	r3, [r4, #4]
  402bc8:	1ac0      	subs	r0, r0, r3
  402bca:	6b63      	ldr	r3, [r4, #52]	; 0x34
  402bcc:	b10b      	cbz	r3, 402bd2 <__sflush_r+0x46>
  402bce:	6c23      	ldr	r3, [r4, #64]	; 0x40
  402bd0:	1ac0      	subs	r0, r0, r3
  402bd2:	2300      	movs	r3, #0
  402bd4:	4602      	mov	r2, r0
  402bd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  402bd8:	6a21      	ldr	r1, [r4, #32]
  402bda:	4628      	mov	r0, r5
  402bdc:	47b0      	blx	r6
  402bde:	1c43      	adds	r3, r0, #1
  402be0:	89a3      	ldrh	r3, [r4, #12]
  402be2:	d106      	bne.n	402bf2 <__sflush_r+0x66>
  402be4:	6829      	ldr	r1, [r5, #0]
  402be6:	291d      	cmp	r1, #29
  402be8:	d84b      	bhi.n	402c82 <__sflush_r+0xf6>
  402bea:	4a2b      	ldr	r2, [pc, #172]	; (402c98 <__sflush_r+0x10c>)
  402bec:	40ca      	lsrs	r2, r1
  402bee:	07d6      	lsls	r6, r2, #31
  402bf0:	d547      	bpl.n	402c82 <__sflush_r+0xf6>
  402bf2:	2200      	movs	r2, #0
  402bf4:	6062      	str	r2, [r4, #4]
  402bf6:	04d9      	lsls	r1, r3, #19
  402bf8:	6922      	ldr	r2, [r4, #16]
  402bfa:	6022      	str	r2, [r4, #0]
  402bfc:	d504      	bpl.n	402c08 <__sflush_r+0x7c>
  402bfe:	1c42      	adds	r2, r0, #1
  402c00:	d101      	bne.n	402c06 <__sflush_r+0x7a>
  402c02:	682b      	ldr	r3, [r5, #0]
  402c04:	b903      	cbnz	r3, 402c08 <__sflush_r+0x7c>
  402c06:	6560      	str	r0, [r4, #84]	; 0x54
  402c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402c0a:	602f      	str	r7, [r5, #0]
  402c0c:	2900      	cmp	r1, #0
  402c0e:	d0ca      	beq.n	402ba6 <__sflush_r+0x1a>
  402c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
  402c14:	4299      	cmp	r1, r3
  402c16:	d002      	beq.n	402c1e <__sflush_r+0x92>
  402c18:	4628      	mov	r0, r5
  402c1a:	f000 fcdf 	bl	4035dc <_free_r>
  402c1e:	2000      	movs	r0, #0
  402c20:	6360      	str	r0, [r4, #52]	; 0x34
  402c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c26:	6a21      	ldr	r1, [r4, #32]
  402c28:	2301      	movs	r3, #1
  402c2a:	4628      	mov	r0, r5
  402c2c:	47b0      	blx	r6
  402c2e:	1c41      	adds	r1, r0, #1
  402c30:	d1c6      	bne.n	402bc0 <__sflush_r+0x34>
  402c32:	682b      	ldr	r3, [r5, #0]
  402c34:	2b00      	cmp	r3, #0
  402c36:	d0c3      	beq.n	402bc0 <__sflush_r+0x34>
  402c38:	2b1d      	cmp	r3, #29
  402c3a:	d001      	beq.n	402c40 <__sflush_r+0xb4>
  402c3c:	2b16      	cmp	r3, #22
  402c3e:	d101      	bne.n	402c44 <__sflush_r+0xb8>
  402c40:	602f      	str	r7, [r5, #0]
  402c42:	e7b0      	b.n	402ba6 <__sflush_r+0x1a>
  402c44:	89a3      	ldrh	r3, [r4, #12]
  402c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402c4a:	81a3      	strh	r3, [r4, #12]
  402c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c50:	690f      	ldr	r7, [r1, #16]
  402c52:	2f00      	cmp	r7, #0
  402c54:	d0a7      	beq.n	402ba6 <__sflush_r+0x1a>
  402c56:	0793      	lsls	r3, r2, #30
  402c58:	680e      	ldr	r6, [r1, #0]
  402c5a:	bf08      	it	eq
  402c5c:	694b      	ldreq	r3, [r1, #20]
  402c5e:	600f      	str	r7, [r1, #0]
  402c60:	bf18      	it	ne
  402c62:	2300      	movne	r3, #0
  402c64:	eba6 0807 	sub.w	r8, r6, r7
  402c68:	608b      	str	r3, [r1, #8]
  402c6a:	f1b8 0f00 	cmp.w	r8, #0
  402c6e:	dd9a      	ble.n	402ba6 <__sflush_r+0x1a>
  402c70:	4643      	mov	r3, r8
  402c72:	463a      	mov	r2, r7
  402c74:	6a21      	ldr	r1, [r4, #32]
  402c76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  402c78:	4628      	mov	r0, r5
  402c7a:	47b0      	blx	r6
  402c7c:	2800      	cmp	r0, #0
  402c7e:	dc07      	bgt.n	402c90 <__sflush_r+0x104>
  402c80:	89a3      	ldrh	r3, [r4, #12]
  402c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402c86:	81a3      	strh	r3, [r4, #12]
  402c88:	f04f 30ff 	mov.w	r0, #4294967295
  402c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c90:	4407      	add	r7, r0
  402c92:	eba8 0800 	sub.w	r8, r8, r0
  402c96:	e7e8      	b.n	402c6a <__sflush_r+0xde>
  402c98:	20400001 	.word	0x20400001

00402c9c <_fflush_r>:
  402c9c:	b538      	push	{r3, r4, r5, lr}
  402c9e:	690b      	ldr	r3, [r1, #16]
  402ca0:	4605      	mov	r5, r0
  402ca2:	460c      	mov	r4, r1
  402ca4:	b1db      	cbz	r3, 402cde <_fflush_r+0x42>
  402ca6:	b118      	cbz	r0, 402cb0 <_fflush_r+0x14>
  402ca8:	6983      	ldr	r3, [r0, #24]
  402caa:	b90b      	cbnz	r3, 402cb0 <_fflush_r+0x14>
  402cac:	f000 f860 	bl	402d70 <__sinit>
  402cb0:	4b0c      	ldr	r3, [pc, #48]	; (402ce4 <_fflush_r+0x48>)
  402cb2:	429c      	cmp	r4, r3
  402cb4:	d109      	bne.n	402cca <_fflush_r+0x2e>
  402cb6:	686c      	ldr	r4, [r5, #4]
  402cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402cbc:	b17b      	cbz	r3, 402cde <_fflush_r+0x42>
  402cbe:	4621      	mov	r1, r4
  402cc0:	4628      	mov	r0, r5
  402cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402cc6:	f7ff bf61 	b.w	402b8c <__sflush_r>
  402cca:	4b07      	ldr	r3, [pc, #28]	; (402ce8 <_fflush_r+0x4c>)
  402ccc:	429c      	cmp	r4, r3
  402cce:	d101      	bne.n	402cd4 <_fflush_r+0x38>
  402cd0:	68ac      	ldr	r4, [r5, #8]
  402cd2:	e7f1      	b.n	402cb8 <_fflush_r+0x1c>
  402cd4:	4b05      	ldr	r3, [pc, #20]	; (402cec <_fflush_r+0x50>)
  402cd6:	429c      	cmp	r4, r3
  402cd8:	bf08      	it	eq
  402cda:	68ec      	ldreq	r4, [r5, #12]
  402cdc:	e7ec      	b.n	402cb8 <_fflush_r+0x1c>
  402cde:	2000      	movs	r0, #0
  402ce0:	bd38      	pop	{r3, r4, r5, pc}
  402ce2:	bf00      	nop
  402ce4:	00404904 	.word	0x00404904
  402ce8:	00404924 	.word	0x00404924
  402cec:	004048e4 	.word	0x004048e4

00402cf0 <_cleanup_r>:
  402cf0:	4901      	ldr	r1, [pc, #4]	; (402cf8 <_cleanup_r+0x8>)
  402cf2:	f000 b8a9 	b.w	402e48 <_fwalk_reent>
  402cf6:	bf00      	nop
  402cf8:	00402c9d 	.word	0x00402c9d

00402cfc <std.isra.0>:
  402cfc:	2300      	movs	r3, #0
  402cfe:	b510      	push	{r4, lr}
  402d00:	4604      	mov	r4, r0
  402d02:	6003      	str	r3, [r0, #0]
  402d04:	6043      	str	r3, [r0, #4]
  402d06:	6083      	str	r3, [r0, #8]
  402d08:	8181      	strh	r1, [r0, #12]
  402d0a:	6643      	str	r3, [r0, #100]	; 0x64
  402d0c:	81c2      	strh	r2, [r0, #14]
  402d0e:	6103      	str	r3, [r0, #16]
  402d10:	6143      	str	r3, [r0, #20]
  402d12:	6183      	str	r3, [r0, #24]
  402d14:	4619      	mov	r1, r3
  402d16:	2208      	movs	r2, #8
  402d18:	305c      	adds	r0, #92	; 0x5c
  402d1a:	f7fe fb9c 	bl	401456 <memset>
  402d1e:	4b05      	ldr	r3, [pc, #20]	; (402d34 <std.isra.0+0x38>)
  402d20:	6263      	str	r3, [r4, #36]	; 0x24
  402d22:	4b05      	ldr	r3, [pc, #20]	; (402d38 <std.isra.0+0x3c>)
  402d24:	62a3      	str	r3, [r4, #40]	; 0x28
  402d26:	4b05      	ldr	r3, [pc, #20]	; (402d3c <std.isra.0+0x40>)
  402d28:	62e3      	str	r3, [r4, #44]	; 0x2c
  402d2a:	4b05      	ldr	r3, [pc, #20]	; (402d40 <std.isra.0+0x44>)
  402d2c:	6224      	str	r4, [r4, #32]
  402d2e:	6323      	str	r3, [r4, #48]	; 0x30
  402d30:	bd10      	pop	{r4, pc}
  402d32:	bf00      	nop
  402d34:	004039d1 	.word	0x004039d1
  402d38:	004039f3 	.word	0x004039f3
  402d3c:	00403a2b 	.word	0x00403a2b
  402d40:	00403a4f 	.word	0x00403a4f

00402d44 <__sfmoreglue>:
  402d44:	b570      	push	{r4, r5, r6, lr}
  402d46:	1e4a      	subs	r2, r1, #1
  402d48:	2568      	movs	r5, #104	; 0x68
  402d4a:	4355      	muls	r5, r2
  402d4c:	460e      	mov	r6, r1
  402d4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  402d52:	f000 fc91 	bl	403678 <_malloc_r>
  402d56:	4604      	mov	r4, r0
  402d58:	b140      	cbz	r0, 402d6c <__sfmoreglue+0x28>
  402d5a:	2100      	movs	r1, #0
  402d5c:	e880 0042 	stmia.w	r0, {r1, r6}
  402d60:	300c      	adds	r0, #12
  402d62:	60a0      	str	r0, [r4, #8]
  402d64:	f105 0268 	add.w	r2, r5, #104	; 0x68
  402d68:	f7fe fb75 	bl	401456 <memset>
  402d6c:	4620      	mov	r0, r4
  402d6e:	bd70      	pop	{r4, r5, r6, pc}

00402d70 <__sinit>:
  402d70:	6983      	ldr	r3, [r0, #24]
  402d72:	b510      	push	{r4, lr}
  402d74:	4604      	mov	r4, r0
  402d76:	bb33      	cbnz	r3, 402dc6 <__sinit+0x56>
  402d78:	6483      	str	r3, [r0, #72]	; 0x48
  402d7a:	64c3      	str	r3, [r0, #76]	; 0x4c
  402d7c:	6503      	str	r3, [r0, #80]	; 0x50
  402d7e:	4b12      	ldr	r3, [pc, #72]	; (402dc8 <__sinit+0x58>)
  402d80:	4a12      	ldr	r2, [pc, #72]	; (402dcc <__sinit+0x5c>)
  402d82:	681b      	ldr	r3, [r3, #0]
  402d84:	6282      	str	r2, [r0, #40]	; 0x28
  402d86:	4298      	cmp	r0, r3
  402d88:	bf04      	itt	eq
  402d8a:	2301      	moveq	r3, #1
  402d8c:	6183      	streq	r3, [r0, #24]
  402d8e:	f000 f81f 	bl	402dd0 <__sfp>
  402d92:	6060      	str	r0, [r4, #4]
  402d94:	4620      	mov	r0, r4
  402d96:	f000 f81b 	bl	402dd0 <__sfp>
  402d9a:	60a0      	str	r0, [r4, #8]
  402d9c:	4620      	mov	r0, r4
  402d9e:	f000 f817 	bl	402dd0 <__sfp>
  402da2:	2200      	movs	r2, #0
  402da4:	60e0      	str	r0, [r4, #12]
  402da6:	2104      	movs	r1, #4
  402da8:	6860      	ldr	r0, [r4, #4]
  402daa:	f7ff ffa7 	bl	402cfc <std.isra.0>
  402dae:	2201      	movs	r2, #1
  402db0:	2109      	movs	r1, #9
  402db2:	68a0      	ldr	r0, [r4, #8]
  402db4:	f7ff ffa2 	bl	402cfc <std.isra.0>
  402db8:	2202      	movs	r2, #2
  402dba:	2112      	movs	r1, #18
  402dbc:	68e0      	ldr	r0, [r4, #12]
  402dbe:	f7ff ff9d 	bl	402cfc <std.isra.0>
  402dc2:	2301      	movs	r3, #1
  402dc4:	61a3      	str	r3, [r4, #24]
  402dc6:	bd10      	pop	{r4, pc}
  402dc8:	0040489c 	.word	0x0040489c
  402dcc:	00402cf1 	.word	0x00402cf1

00402dd0 <__sfp>:
  402dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402dd2:	4b1c      	ldr	r3, [pc, #112]	; (402e44 <__sfp+0x74>)
  402dd4:	681e      	ldr	r6, [r3, #0]
  402dd6:	69b3      	ldr	r3, [r6, #24]
  402dd8:	4607      	mov	r7, r0
  402dda:	b913      	cbnz	r3, 402de2 <__sfp+0x12>
  402ddc:	4630      	mov	r0, r6
  402dde:	f7ff ffc7 	bl	402d70 <__sinit>
  402de2:	3648      	adds	r6, #72	; 0x48
  402de4:	68b4      	ldr	r4, [r6, #8]
  402de6:	6873      	ldr	r3, [r6, #4]
  402de8:	3b01      	subs	r3, #1
  402dea:	d503      	bpl.n	402df4 <__sfp+0x24>
  402dec:	6833      	ldr	r3, [r6, #0]
  402dee:	b133      	cbz	r3, 402dfe <__sfp+0x2e>
  402df0:	6836      	ldr	r6, [r6, #0]
  402df2:	e7f7      	b.n	402de4 <__sfp+0x14>
  402df4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  402df8:	b16d      	cbz	r5, 402e16 <__sfp+0x46>
  402dfa:	3468      	adds	r4, #104	; 0x68
  402dfc:	e7f4      	b.n	402de8 <__sfp+0x18>
  402dfe:	2104      	movs	r1, #4
  402e00:	4638      	mov	r0, r7
  402e02:	f7ff ff9f 	bl	402d44 <__sfmoreglue>
  402e06:	6030      	str	r0, [r6, #0]
  402e08:	2800      	cmp	r0, #0
  402e0a:	d1f1      	bne.n	402df0 <__sfp+0x20>
  402e0c:	230c      	movs	r3, #12
  402e0e:	603b      	str	r3, [r7, #0]
  402e10:	4604      	mov	r4, r0
  402e12:	4620      	mov	r0, r4
  402e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402e1a:	81e3      	strh	r3, [r4, #14]
  402e1c:	2301      	movs	r3, #1
  402e1e:	81a3      	strh	r3, [r4, #12]
  402e20:	6665      	str	r5, [r4, #100]	; 0x64
  402e22:	6025      	str	r5, [r4, #0]
  402e24:	60a5      	str	r5, [r4, #8]
  402e26:	6065      	str	r5, [r4, #4]
  402e28:	6125      	str	r5, [r4, #16]
  402e2a:	6165      	str	r5, [r4, #20]
  402e2c:	61a5      	str	r5, [r4, #24]
  402e2e:	2208      	movs	r2, #8
  402e30:	4629      	mov	r1, r5
  402e32:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  402e36:	f7fe fb0e 	bl	401456 <memset>
  402e3a:	6365      	str	r5, [r4, #52]	; 0x34
  402e3c:	63a5      	str	r5, [r4, #56]	; 0x38
  402e3e:	64a5      	str	r5, [r4, #72]	; 0x48
  402e40:	64e5      	str	r5, [r4, #76]	; 0x4c
  402e42:	e7e6      	b.n	402e12 <__sfp+0x42>
  402e44:	0040489c 	.word	0x0040489c

00402e48 <_fwalk_reent>:
  402e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402e4c:	4680      	mov	r8, r0
  402e4e:	4689      	mov	r9, r1
  402e50:	f100 0448 	add.w	r4, r0, #72	; 0x48
  402e54:	2600      	movs	r6, #0
  402e56:	b914      	cbnz	r4, 402e5e <_fwalk_reent+0x16>
  402e58:	4630      	mov	r0, r6
  402e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402e5e:	68a5      	ldr	r5, [r4, #8]
  402e60:	6867      	ldr	r7, [r4, #4]
  402e62:	3f01      	subs	r7, #1
  402e64:	d501      	bpl.n	402e6a <_fwalk_reent+0x22>
  402e66:	6824      	ldr	r4, [r4, #0]
  402e68:	e7f5      	b.n	402e56 <_fwalk_reent+0xe>
  402e6a:	89ab      	ldrh	r3, [r5, #12]
  402e6c:	2b01      	cmp	r3, #1
  402e6e:	d907      	bls.n	402e80 <_fwalk_reent+0x38>
  402e70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  402e74:	3301      	adds	r3, #1
  402e76:	d003      	beq.n	402e80 <_fwalk_reent+0x38>
  402e78:	4629      	mov	r1, r5
  402e7a:	4640      	mov	r0, r8
  402e7c:	47c8      	blx	r9
  402e7e:	4306      	orrs	r6, r0
  402e80:	3568      	adds	r5, #104	; 0x68
  402e82:	e7ee      	b.n	402e62 <_fwalk_reent+0x1a>

00402e84 <_localeconv_r>:
  402e84:	4b04      	ldr	r3, [pc, #16]	; (402e98 <_localeconv_r+0x14>)
  402e86:	681b      	ldr	r3, [r3, #0]
  402e88:	6a18      	ldr	r0, [r3, #32]
  402e8a:	4b04      	ldr	r3, [pc, #16]	; (402e9c <_localeconv_r+0x18>)
  402e8c:	2800      	cmp	r0, #0
  402e8e:	bf08      	it	eq
  402e90:	4618      	moveq	r0, r3
  402e92:	30f0      	adds	r0, #240	; 0xf0
  402e94:	4770      	bx	lr
  402e96:	bf00      	nop
  402e98:	20400000 	.word	0x20400000
  402e9c:	20400064 	.word	0x20400064

00402ea0 <__swhatbuf_r>:
  402ea0:	b570      	push	{r4, r5, r6, lr}
  402ea2:	460e      	mov	r6, r1
  402ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402ea8:	2900      	cmp	r1, #0
  402eaa:	b090      	sub	sp, #64	; 0x40
  402eac:	4614      	mov	r4, r2
  402eae:	461d      	mov	r5, r3
  402eb0:	da07      	bge.n	402ec2 <__swhatbuf_r+0x22>
  402eb2:	2300      	movs	r3, #0
  402eb4:	602b      	str	r3, [r5, #0]
  402eb6:	89b3      	ldrh	r3, [r6, #12]
  402eb8:	061a      	lsls	r2, r3, #24
  402eba:	d410      	bmi.n	402ede <__swhatbuf_r+0x3e>
  402ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402ec0:	e00e      	b.n	402ee0 <__swhatbuf_r+0x40>
  402ec2:	aa01      	add	r2, sp, #4
  402ec4:	f000 feaa 	bl	403c1c <_fstat_r>
  402ec8:	2800      	cmp	r0, #0
  402eca:	dbf2      	blt.n	402eb2 <__swhatbuf_r+0x12>
  402ecc:	9a02      	ldr	r2, [sp, #8]
  402ece:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402ed2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  402ed6:	425a      	negs	r2, r3
  402ed8:	415a      	adcs	r2, r3
  402eda:	602a      	str	r2, [r5, #0]
  402edc:	e7ee      	b.n	402ebc <__swhatbuf_r+0x1c>
  402ede:	2340      	movs	r3, #64	; 0x40
  402ee0:	2000      	movs	r0, #0
  402ee2:	6023      	str	r3, [r4, #0]
  402ee4:	b010      	add	sp, #64	; 0x40
  402ee6:	bd70      	pop	{r4, r5, r6, pc}

00402ee8 <__smakebuf_r>:
  402ee8:	898b      	ldrh	r3, [r1, #12]
  402eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  402eec:	079d      	lsls	r5, r3, #30
  402eee:	4606      	mov	r6, r0
  402ef0:	460c      	mov	r4, r1
  402ef2:	d507      	bpl.n	402f04 <__smakebuf_r+0x1c>
  402ef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
  402ef8:	6023      	str	r3, [r4, #0]
  402efa:	6123      	str	r3, [r4, #16]
  402efc:	2301      	movs	r3, #1
  402efe:	6163      	str	r3, [r4, #20]
  402f00:	b002      	add	sp, #8
  402f02:	bd70      	pop	{r4, r5, r6, pc}
  402f04:	ab01      	add	r3, sp, #4
  402f06:	466a      	mov	r2, sp
  402f08:	f7ff ffca 	bl	402ea0 <__swhatbuf_r>
  402f0c:	9900      	ldr	r1, [sp, #0]
  402f0e:	4605      	mov	r5, r0
  402f10:	4630      	mov	r0, r6
  402f12:	f000 fbb1 	bl	403678 <_malloc_r>
  402f16:	b948      	cbnz	r0, 402f2c <__smakebuf_r+0x44>
  402f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402f1c:	059a      	lsls	r2, r3, #22
  402f1e:	d4ef      	bmi.n	402f00 <__smakebuf_r+0x18>
  402f20:	f023 0303 	bic.w	r3, r3, #3
  402f24:	f043 0302 	orr.w	r3, r3, #2
  402f28:	81a3      	strh	r3, [r4, #12]
  402f2a:	e7e3      	b.n	402ef4 <__smakebuf_r+0xc>
  402f2c:	4b0d      	ldr	r3, [pc, #52]	; (402f64 <__smakebuf_r+0x7c>)
  402f2e:	62b3      	str	r3, [r6, #40]	; 0x28
  402f30:	89a3      	ldrh	r3, [r4, #12]
  402f32:	6020      	str	r0, [r4, #0]
  402f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402f38:	81a3      	strh	r3, [r4, #12]
  402f3a:	9b00      	ldr	r3, [sp, #0]
  402f3c:	6163      	str	r3, [r4, #20]
  402f3e:	9b01      	ldr	r3, [sp, #4]
  402f40:	6120      	str	r0, [r4, #16]
  402f42:	b15b      	cbz	r3, 402f5c <__smakebuf_r+0x74>
  402f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402f48:	4630      	mov	r0, r6
  402f4a:	f000 fe79 	bl	403c40 <_isatty_r>
  402f4e:	b128      	cbz	r0, 402f5c <__smakebuf_r+0x74>
  402f50:	89a3      	ldrh	r3, [r4, #12]
  402f52:	f023 0303 	bic.w	r3, r3, #3
  402f56:	f043 0301 	orr.w	r3, r3, #1
  402f5a:	81a3      	strh	r3, [r4, #12]
  402f5c:	89a3      	ldrh	r3, [r4, #12]
  402f5e:	431d      	orrs	r5, r3
  402f60:	81a5      	strh	r5, [r4, #12]
  402f62:	e7cd      	b.n	402f00 <__smakebuf_r+0x18>
  402f64:	00402cf1 	.word	0x00402cf1

00402f68 <malloc>:
  402f68:	4b02      	ldr	r3, [pc, #8]	; (402f74 <malloc+0xc>)
  402f6a:	4601      	mov	r1, r0
  402f6c:	6818      	ldr	r0, [r3, #0]
  402f6e:	f000 bb83 	b.w	403678 <_malloc_r>
  402f72:	bf00      	nop
  402f74:	20400000 	.word	0x20400000
	...

00402f80 <memchr>:
  402f80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402f84:	2a10      	cmp	r2, #16
  402f86:	db2b      	blt.n	402fe0 <memchr+0x60>
  402f88:	f010 0f07 	tst.w	r0, #7
  402f8c:	d008      	beq.n	402fa0 <memchr+0x20>
  402f8e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402f92:	3a01      	subs	r2, #1
  402f94:	428b      	cmp	r3, r1
  402f96:	d02d      	beq.n	402ff4 <memchr+0x74>
  402f98:	f010 0f07 	tst.w	r0, #7
  402f9c:	b342      	cbz	r2, 402ff0 <memchr+0x70>
  402f9e:	d1f6      	bne.n	402f8e <memchr+0xe>
  402fa0:	b4f0      	push	{r4, r5, r6, r7}
  402fa2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402fa6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  402faa:	f022 0407 	bic.w	r4, r2, #7
  402fae:	f07f 0700 	mvns.w	r7, #0
  402fb2:	2300      	movs	r3, #0
  402fb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402fb8:	3c08      	subs	r4, #8
  402fba:	ea85 0501 	eor.w	r5, r5, r1
  402fbe:	ea86 0601 	eor.w	r6, r6, r1
  402fc2:	fa85 f547 	uadd8	r5, r5, r7
  402fc6:	faa3 f587 	sel	r5, r3, r7
  402fca:	fa86 f647 	uadd8	r6, r6, r7
  402fce:	faa5 f687 	sel	r6, r5, r7
  402fd2:	b98e      	cbnz	r6, 402ff8 <memchr+0x78>
  402fd4:	d1ee      	bne.n	402fb4 <memchr+0x34>
  402fd6:	bcf0      	pop	{r4, r5, r6, r7}
  402fd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402fdc:	f002 0207 	and.w	r2, r2, #7
  402fe0:	b132      	cbz	r2, 402ff0 <memchr+0x70>
  402fe2:	f810 3b01 	ldrb.w	r3, [r0], #1
  402fe6:	3a01      	subs	r2, #1
  402fe8:	ea83 0301 	eor.w	r3, r3, r1
  402fec:	b113      	cbz	r3, 402ff4 <memchr+0x74>
  402fee:	d1f8      	bne.n	402fe2 <memchr+0x62>
  402ff0:	2000      	movs	r0, #0
  402ff2:	4770      	bx	lr
  402ff4:	3801      	subs	r0, #1
  402ff6:	4770      	bx	lr
  402ff8:	2d00      	cmp	r5, #0
  402ffa:	bf06      	itte	eq
  402ffc:	4635      	moveq	r5, r6
  402ffe:	3803      	subeq	r0, #3
  403000:	3807      	subne	r0, #7
  403002:	f015 0f01 	tst.w	r5, #1
  403006:	d107      	bne.n	403018 <memchr+0x98>
  403008:	3001      	adds	r0, #1
  40300a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40300e:	bf02      	ittt	eq
  403010:	3001      	addeq	r0, #1
  403012:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403016:	3001      	addeq	r0, #1
  403018:	bcf0      	pop	{r4, r5, r6, r7}
  40301a:	3801      	subs	r0, #1
  40301c:	4770      	bx	lr
  40301e:	bf00      	nop

00403020 <_Balloc>:
  403020:	b570      	push	{r4, r5, r6, lr}
  403022:	6a45      	ldr	r5, [r0, #36]	; 0x24
  403024:	4604      	mov	r4, r0
  403026:	460e      	mov	r6, r1
  403028:	b93d      	cbnz	r5, 40303a <_Balloc+0x1a>
  40302a:	2010      	movs	r0, #16
  40302c:	f7ff ff9c 	bl	402f68 <malloc>
  403030:	6260      	str	r0, [r4, #36]	; 0x24
  403032:	6045      	str	r5, [r0, #4]
  403034:	6085      	str	r5, [r0, #8]
  403036:	6005      	str	r5, [r0, #0]
  403038:	60c5      	str	r5, [r0, #12]
  40303a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40303c:	68eb      	ldr	r3, [r5, #12]
  40303e:	b183      	cbz	r3, 403062 <_Balloc+0x42>
  403040:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403042:	68db      	ldr	r3, [r3, #12]
  403044:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  403048:	b9b8      	cbnz	r0, 40307a <_Balloc+0x5a>
  40304a:	2101      	movs	r1, #1
  40304c:	fa01 f506 	lsl.w	r5, r1, r6
  403050:	1d6a      	adds	r2, r5, #5
  403052:	0092      	lsls	r2, r2, #2
  403054:	4620      	mov	r0, r4
  403056:	f000 fab3 	bl	4035c0 <_calloc_r>
  40305a:	b160      	cbz	r0, 403076 <_Balloc+0x56>
  40305c:	6046      	str	r6, [r0, #4]
  40305e:	6085      	str	r5, [r0, #8]
  403060:	e00e      	b.n	403080 <_Balloc+0x60>
  403062:	2221      	movs	r2, #33	; 0x21
  403064:	2104      	movs	r1, #4
  403066:	4620      	mov	r0, r4
  403068:	f000 faaa 	bl	4035c0 <_calloc_r>
  40306c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40306e:	60e8      	str	r0, [r5, #12]
  403070:	68db      	ldr	r3, [r3, #12]
  403072:	2b00      	cmp	r3, #0
  403074:	d1e4      	bne.n	403040 <_Balloc+0x20>
  403076:	2000      	movs	r0, #0
  403078:	bd70      	pop	{r4, r5, r6, pc}
  40307a:	6802      	ldr	r2, [r0, #0]
  40307c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  403080:	2300      	movs	r3, #0
  403082:	6103      	str	r3, [r0, #16]
  403084:	60c3      	str	r3, [r0, #12]
  403086:	bd70      	pop	{r4, r5, r6, pc}

00403088 <_Bfree>:
  403088:	b570      	push	{r4, r5, r6, lr}
  40308a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40308c:	4606      	mov	r6, r0
  40308e:	460d      	mov	r5, r1
  403090:	b93c      	cbnz	r4, 4030a2 <_Bfree+0x1a>
  403092:	2010      	movs	r0, #16
  403094:	f7ff ff68 	bl	402f68 <malloc>
  403098:	6270      	str	r0, [r6, #36]	; 0x24
  40309a:	6044      	str	r4, [r0, #4]
  40309c:	6084      	str	r4, [r0, #8]
  40309e:	6004      	str	r4, [r0, #0]
  4030a0:	60c4      	str	r4, [r0, #12]
  4030a2:	b13d      	cbz	r5, 4030b4 <_Bfree+0x2c>
  4030a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4030a6:	686a      	ldr	r2, [r5, #4]
  4030a8:	68db      	ldr	r3, [r3, #12]
  4030aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4030ae:	6029      	str	r1, [r5, #0]
  4030b0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4030b4:	bd70      	pop	{r4, r5, r6, pc}

004030b6 <__multadd>:
  4030b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4030ba:	690d      	ldr	r5, [r1, #16]
  4030bc:	461f      	mov	r7, r3
  4030be:	4606      	mov	r6, r0
  4030c0:	460c      	mov	r4, r1
  4030c2:	f101 0e14 	add.w	lr, r1, #20
  4030c6:	2300      	movs	r3, #0
  4030c8:	f8de 0000 	ldr.w	r0, [lr]
  4030cc:	b281      	uxth	r1, r0
  4030ce:	fb02 7101 	mla	r1, r2, r1, r7
  4030d2:	0c0f      	lsrs	r7, r1, #16
  4030d4:	0c00      	lsrs	r0, r0, #16
  4030d6:	fb02 7000 	mla	r0, r2, r0, r7
  4030da:	b289      	uxth	r1, r1
  4030dc:	3301      	adds	r3, #1
  4030de:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  4030e2:	429d      	cmp	r5, r3
  4030e4:	ea4f 4710 	mov.w	r7, r0, lsr #16
  4030e8:	f84e 1b04 	str.w	r1, [lr], #4
  4030ec:	dcec      	bgt.n	4030c8 <__multadd+0x12>
  4030ee:	b1d7      	cbz	r7, 403126 <__multadd+0x70>
  4030f0:	68a3      	ldr	r3, [r4, #8]
  4030f2:	429d      	cmp	r5, r3
  4030f4:	db12      	blt.n	40311c <__multadd+0x66>
  4030f6:	6861      	ldr	r1, [r4, #4]
  4030f8:	4630      	mov	r0, r6
  4030fa:	3101      	adds	r1, #1
  4030fc:	f7ff ff90 	bl	403020 <_Balloc>
  403100:	6922      	ldr	r2, [r4, #16]
  403102:	3202      	adds	r2, #2
  403104:	f104 010c 	add.w	r1, r4, #12
  403108:	4680      	mov	r8, r0
  40310a:	0092      	lsls	r2, r2, #2
  40310c:	300c      	adds	r0, #12
  40310e:	f7fe f997 	bl	401440 <memcpy>
  403112:	4621      	mov	r1, r4
  403114:	4630      	mov	r0, r6
  403116:	f7ff ffb7 	bl	403088 <_Bfree>
  40311a:	4644      	mov	r4, r8
  40311c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  403120:	3501      	adds	r5, #1
  403122:	615f      	str	r7, [r3, #20]
  403124:	6125      	str	r5, [r4, #16]
  403126:	4620      	mov	r0, r4
  403128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040312c <__hi0bits>:
  40312c:	0c02      	lsrs	r2, r0, #16
  40312e:	0412      	lsls	r2, r2, #16
  403130:	4603      	mov	r3, r0
  403132:	b9b2      	cbnz	r2, 403162 <__hi0bits+0x36>
  403134:	0403      	lsls	r3, r0, #16
  403136:	2010      	movs	r0, #16
  403138:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40313c:	bf04      	itt	eq
  40313e:	021b      	lsleq	r3, r3, #8
  403140:	3008      	addeq	r0, #8
  403142:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  403146:	bf04      	itt	eq
  403148:	011b      	lsleq	r3, r3, #4
  40314a:	3004      	addeq	r0, #4
  40314c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  403150:	bf04      	itt	eq
  403152:	009b      	lsleq	r3, r3, #2
  403154:	3002      	addeq	r0, #2
  403156:	2b00      	cmp	r3, #0
  403158:	db06      	blt.n	403168 <__hi0bits+0x3c>
  40315a:	005b      	lsls	r3, r3, #1
  40315c:	d503      	bpl.n	403166 <__hi0bits+0x3a>
  40315e:	3001      	adds	r0, #1
  403160:	4770      	bx	lr
  403162:	2000      	movs	r0, #0
  403164:	e7e8      	b.n	403138 <__hi0bits+0xc>
  403166:	2020      	movs	r0, #32
  403168:	4770      	bx	lr

0040316a <__lo0bits>:
  40316a:	6803      	ldr	r3, [r0, #0]
  40316c:	f013 0207 	ands.w	r2, r3, #7
  403170:	4601      	mov	r1, r0
  403172:	d00b      	beq.n	40318c <__lo0bits+0x22>
  403174:	07da      	lsls	r2, r3, #31
  403176:	d423      	bmi.n	4031c0 <__lo0bits+0x56>
  403178:	0798      	lsls	r0, r3, #30
  40317a:	bf49      	itett	mi
  40317c:	085b      	lsrmi	r3, r3, #1
  40317e:	089b      	lsrpl	r3, r3, #2
  403180:	2001      	movmi	r0, #1
  403182:	600b      	strmi	r3, [r1, #0]
  403184:	bf5c      	itt	pl
  403186:	600b      	strpl	r3, [r1, #0]
  403188:	2002      	movpl	r0, #2
  40318a:	4770      	bx	lr
  40318c:	b298      	uxth	r0, r3
  40318e:	b9a8      	cbnz	r0, 4031bc <__lo0bits+0x52>
  403190:	0c1b      	lsrs	r3, r3, #16
  403192:	2010      	movs	r0, #16
  403194:	f013 0fff 	tst.w	r3, #255	; 0xff
  403198:	bf04      	itt	eq
  40319a:	0a1b      	lsreq	r3, r3, #8
  40319c:	3008      	addeq	r0, #8
  40319e:	071a      	lsls	r2, r3, #28
  4031a0:	bf04      	itt	eq
  4031a2:	091b      	lsreq	r3, r3, #4
  4031a4:	3004      	addeq	r0, #4
  4031a6:	079a      	lsls	r2, r3, #30
  4031a8:	bf04      	itt	eq
  4031aa:	089b      	lsreq	r3, r3, #2
  4031ac:	3002      	addeq	r0, #2
  4031ae:	07da      	lsls	r2, r3, #31
  4031b0:	d402      	bmi.n	4031b8 <__lo0bits+0x4e>
  4031b2:	085b      	lsrs	r3, r3, #1
  4031b4:	d006      	beq.n	4031c4 <__lo0bits+0x5a>
  4031b6:	3001      	adds	r0, #1
  4031b8:	600b      	str	r3, [r1, #0]
  4031ba:	4770      	bx	lr
  4031bc:	4610      	mov	r0, r2
  4031be:	e7e9      	b.n	403194 <__lo0bits+0x2a>
  4031c0:	2000      	movs	r0, #0
  4031c2:	4770      	bx	lr
  4031c4:	2020      	movs	r0, #32
  4031c6:	4770      	bx	lr

004031c8 <__i2b>:
  4031c8:	b510      	push	{r4, lr}
  4031ca:	460c      	mov	r4, r1
  4031cc:	2101      	movs	r1, #1
  4031ce:	f7ff ff27 	bl	403020 <_Balloc>
  4031d2:	2201      	movs	r2, #1
  4031d4:	6144      	str	r4, [r0, #20]
  4031d6:	6102      	str	r2, [r0, #16]
  4031d8:	bd10      	pop	{r4, pc}

004031da <__multiply>:
  4031da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4031de:	4614      	mov	r4, r2
  4031e0:	690a      	ldr	r2, [r1, #16]
  4031e2:	6923      	ldr	r3, [r4, #16]
  4031e4:	429a      	cmp	r2, r3
  4031e6:	bfb8      	it	lt
  4031e8:	460b      	movlt	r3, r1
  4031ea:	4689      	mov	r9, r1
  4031ec:	bfbc      	itt	lt
  4031ee:	46a1      	movlt	r9, r4
  4031f0:	461c      	movlt	r4, r3
  4031f2:	f8d9 7010 	ldr.w	r7, [r9, #16]
  4031f6:	f8d4 a010 	ldr.w	sl, [r4, #16]
  4031fa:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4031fe:	f8d9 1004 	ldr.w	r1, [r9, #4]
  403202:	eb07 060a 	add.w	r6, r7, sl
  403206:	429e      	cmp	r6, r3
  403208:	bfc8      	it	gt
  40320a:	3101      	addgt	r1, #1
  40320c:	f7ff ff08 	bl	403020 <_Balloc>
  403210:	f100 0514 	add.w	r5, r0, #20
  403214:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  403218:	462b      	mov	r3, r5
  40321a:	2200      	movs	r2, #0
  40321c:	4543      	cmp	r3, r8
  40321e:	d316      	bcc.n	40324e <__multiply+0x74>
  403220:	f104 0214 	add.w	r2, r4, #20
  403224:	f109 0114 	add.w	r1, r9, #20
  403228:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  40322c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  403230:	9301      	str	r3, [sp, #4]
  403232:	9c01      	ldr	r4, [sp, #4]
  403234:	4294      	cmp	r4, r2
  403236:	4613      	mov	r3, r2
  403238:	d80c      	bhi.n	403254 <__multiply+0x7a>
  40323a:	2e00      	cmp	r6, #0
  40323c:	dd03      	ble.n	403246 <__multiply+0x6c>
  40323e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  403242:	2b00      	cmp	r3, #0
  403244:	d054      	beq.n	4032f0 <__multiply+0x116>
  403246:	6106      	str	r6, [r0, #16]
  403248:	b003      	add	sp, #12
  40324a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40324e:	f843 2b04 	str.w	r2, [r3], #4
  403252:	e7e3      	b.n	40321c <__multiply+0x42>
  403254:	f8b3 a000 	ldrh.w	sl, [r3]
  403258:	3204      	adds	r2, #4
  40325a:	f1ba 0f00 	cmp.w	sl, #0
  40325e:	d020      	beq.n	4032a2 <__multiply+0xc8>
  403260:	46ae      	mov	lr, r5
  403262:	4689      	mov	r9, r1
  403264:	f04f 0c00 	mov.w	ip, #0
  403268:	f859 4b04 	ldr.w	r4, [r9], #4
  40326c:	f8be b000 	ldrh.w	fp, [lr]
  403270:	b2a3      	uxth	r3, r4
  403272:	fb0a b303 	mla	r3, sl, r3, fp
  403276:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  40327a:	f8de 4000 	ldr.w	r4, [lr]
  40327e:	4463      	add	r3, ip
  403280:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  403284:	fb0a c40b 	mla	r4, sl, fp, ip
  403288:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40328c:	b29b      	uxth	r3, r3
  40328e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  403292:	454f      	cmp	r7, r9
  403294:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  403298:	f84e 3b04 	str.w	r3, [lr], #4
  40329c:	d8e4      	bhi.n	403268 <__multiply+0x8e>
  40329e:	f8ce c000 	str.w	ip, [lr]
  4032a2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  4032a6:	f1b9 0f00 	cmp.w	r9, #0
  4032aa:	d01f      	beq.n	4032ec <__multiply+0x112>
  4032ac:	682b      	ldr	r3, [r5, #0]
  4032ae:	46ae      	mov	lr, r5
  4032b0:	468c      	mov	ip, r1
  4032b2:	f04f 0a00 	mov.w	sl, #0
  4032b6:	f8bc 4000 	ldrh.w	r4, [ip]
  4032ba:	f8be b002 	ldrh.w	fp, [lr, #2]
  4032be:	fb09 b404 	mla	r4, r9, r4, fp
  4032c2:	44a2      	add	sl, r4
  4032c4:	b29b      	uxth	r3, r3
  4032c6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  4032ca:	f84e 3b04 	str.w	r3, [lr], #4
  4032ce:	f85c 3b04 	ldr.w	r3, [ip], #4
  4032d2:	f8be 4000 	ldrh.w	r4, [lr]
  4032d6:	0c1b      	lsrs	r3, r3, #16
  4032d8:	fb09 4303 	mla	r3, r9, r3, r4
  4032dc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  4032e0:	4567      	cmp	r7, ip
  4032e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4032e6:	d8e6      	bhi.n	4032b6 <__multiply+0xdc>
  4032e8:	f8ce 3000 	str.w	r3, [lr]
  4032ec:	3504      	adds	r5, #4
  4032ee:	e7a0      	b.n	403232 <__multiply+0x58>
  4032f0:	3e01      	subs	r6, #1
  4032f2:	e7a2      	b.n	40323a <__multiply+0x60>

004032f4 <__pow5mult>:
  4032f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4032f8:	4615      	mov	r5, r2
  4032fa:	f012 0203 	ands.w	r2, r2, #3
  4032fe:	4606      	mov	r6, r0
  403300:	460f      	mov	r7, r1
  403302:	d007      	beq.n	403314 <__pow5mult+0x20>
  403304:	3a01      	subs	r2, #1
  403306:	4c21      	ldr	r4, [pc, #132]	; (40338c <__pow5mult+0x98>)
  403308:	2300      	movs	r3, #0
  40330a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40330e:	f7ff fed2 	bl	4030b6 <__multadd>
  403312:	4607      	mov	r7, r0
  403314:	10ad      	asrs	r5, r5, #2
  403316:	d035      	beq.n	403384 <__pow5mult+0x90>
  403318:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40331a:	b93c      	cbnz	r4, 40332c <__pow5mult+0x38>
  40331c:	2010      	movs	r0, #16
  40331e:	f7ff fe23 	bl	402f68 <malloc>
  403322:	6270      	str	r0, [r6, #36]	; 0x24
  403324:	6044      	str	r4, [r0, #4]
  403326:	6084      	str	r4, [r0, #8]
  403328:	6004      	str	r4, [r0, #0]
  40332a:	60c4      	str	r4, [r0, #12]
  40332c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  403330:	f8d8 4008 	ldr.w	r4, [r8, #8]
  403334:	b94c      	cbnz	r4, 40334a <__pow5mult+0x56>
  403336:	f240 2171 	movw	r1, #625	; 0x271
  40333a:	4630      	mov	r0, r6
  40333c:	f7ff ff44 	bl	4031c8 <__i2b>
  403340:	2300      	movs	r3, #0
  403342:	f8c8 0008 	str.w	r0, [r8, #8]
  403346:	4604      	mov	r4, r0
  403348:	6003      	str	r3, [r0, #0]
  40334a:	f04f 0800 	mov.w	r8, #0
  40334e:	07eb      	lsls	r3, r5, #31
  403350:	d50a      	bpl.n	403368 <__pow5mult+0x74>
  403352:	4639      	mov	r1, r7
  403354:	4622      	mov	r2, r4
  403356:	4630      	mov	r0, r6
  403358:	f7ff ff3f 	bl	4031da <__multiply>
  40335c:	4639      	mov	r1, r7
  40335e:	4681      	mov	r9, r0
  403360:	4630      	mov	r0, r6
  403362:	f7ff fe91 	bl	403088 <_Bfree>
  403366:	464f      	mov	r7, r9
  403368:	106d      	asrs	r5, r5, #1
  40336a:	d00b      	beq.n	403384 <__pow5mult+0x90>
  40336c:	6820      	ldr	r0, [r4, #0]
  40336e:	b938      	cbnz	r0, 403380 <__pow5mult+0x8c>
  403370:	4622      	mov	r2, r4
  403372:	4621      	mov	r1, r4
  403374:	4630      	mov	r0, r6
  403376:	f7ff ff30 	bl	4031da <__multiply>
  40337a:	6020      	str	r0, [r4, #0]
  40337c:	f8c0 8000 	str.w	r8, [r0]
  403380:	4604      	mov	r4, r0
  403382:	e7e4      	b.n	40334e <__pow5mult+0x5a>
  403384:	4638      	mov	r0, r7
  403386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40338a:	bf00      	nop
  40338c:	00404a38 	.word	0x00404a38

00403390 <__lshift>:
  403390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403394:	460c      	mov	r4, r1
  403396:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40339a:	6923      	ldr	r3, [r4, #16]
  40339c:	6849      	ldr	r1, [r1, #4]
  40339e:	eb0a 0903 	add.w	r9, sl, r3
  4033a2:	68a3      	ldr	r3, [r4, #8]
  4033a4:	4607      	mov	r7, r0
  4033a6:	4616      	mov	r6, r2
  4033a8:	f109 0501 	add.w	r5, r9, #1
  4033ac:	42ab      	cmp	r3, r5
  4033ae:	db31      	blt.n	403414 <__lshift+0x84>
  4033b0:	4638      	mov	r0, r7
  4033b2:	f7ff fe35 	bl	403020 <_Balloc>
  4033b6:	2200      	movs	r2, #0
  4033b8:	4680      	mov	r8, r0
  4033ba:	f100 0314 	add.w	r3, r0, #20
  4033be:	4611      	mov	r1, r2
  4033c0:	4552      	cmp	r2, sl
  4033c2:	db2a      	blt.n	40341a <__lshift+0x8a>
  4033c4:	6920      	ldr	r0, [r4, #16]
  4033c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  4033ca:	f104 0114 	add.w	r1, r4, #20
  4033ce:	f016 021f 	ands.w	r2, r6, #31
  4033d2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  4033d6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  4033da:	d022      	beq.n	403422 <__lshift+0x92>
  4033dc:	f1c2 0c20 	rsb	ip, r2, #32
  4033e0:	2000      	movs	r0, #0
  4033e2:	680e      	ldr	r6, [r1, #0]
  4033e4:	4096      	lsls	r6, r2
  4033e6:	4330      	orrs	r0, r6
  4033e8:	f843 0b04 	str.w	r0, [r3], #4
  4033ec:	f851 0b04 	ldr.w	r0, [r1], #4
  4033f0:	458e      	cmp	lr, r1
  4033f2:	fa20 f00c 	lsr.w	r0, r0, ip
  4033f6:	d8f4      	bhi.n	4033e2 <__lshift+0x52>
  4033f8:	6018      	str	r0, [r3, #0]
  4033fa:	b108      	cbz	r0, 403400 <__lshift+0x70>
  4033fc:	f109 0502 	add.w	r5, r9, #2
  403400:	3d01      	subs	r5, #1
  403402:	4638      	mov	r0, r7
  403404:	f8c8 5010 	str.w	r5, [r8, #16]
  403408:	4621      	mov	r1, r4
  40340a:	f7ff fe3d 	bl	403088 <_Bfree>
  40340e:	4640      	mov	r0, r8
  403410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403414:	3101      	adds	r1, #1
  403416:	005b      	lsls	r3, r3, #1
  403418:	e7c8      	b.n	4033ac <__lshift+0x1c>
  40341a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40341e:	3201      	adds	r2, #1
  403420:	e7ce      	b.n	4033c0 <__lshift+0x30>
  403422:	3b04      	subs	r3, #4
  403424:	f851 2b04 	ldr.w	r2, [r1], #4
  403428:	f843 2f04 	str.w	r2, [r3, #4]!
  40342c:	458e      	cmp	lr, r1
  40342e:	d8f9      	bhi.n	403424 <__lshift+0x94>
  403430:	e7e6      	b.n	403400 <__lshift+0x70>

00403432 <__mcmp>:
  403432:	6903      	ldr	r3, [r0, #16]
  403434:	690a      	ldr	r2, [r1, #16]
  403436:	1a9b      	subs	r3, r3, r2
  403438:	b530      	push	{r4, r5, lr}
  40343a:	d10c      	bne.n	403456 <__mcmp+0x24>
  40343c:	0092      	lsls	r2, r2, #2
  40343e:	3014      	adds	r0, #20
  403440:	3114      	adds	r1, #20
  403442:	1884      	adds	r4, r0, r2
  403444:	4411      	add	r1, r2
  403446:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40344a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40344e:	4295      	cmp	r5, r2
  403450:	d003      	beq.n	40345a <__mcmp+0x28>
  403452:	d305      	bcc.n	403460 <__mcmp+0x2e>
  403454:	2301      	movs	r3, #1
  403456:	4618      	mov	r0, r3
  403458:	bd30      	pop	{r4, r5, pc}
  40345a:	42a0      	cmp	r0, r4
  40345c:	d3f3      	bcc.n	403446 <__mcmp+0x14>
  40345e:	e7fa      	b.n	403456 <__mcmp+0x24>
  403460:	f04f 33ff 	mov.w	r3, #4294967295
  403464:	e7f7      	b.n	403456 <__mcmp+0x24>

00403466 <__mdiff>:
  403466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40346a:	460d      	mov	r5, r1
  40346c:	4607      	mov	r7, r0
  40346e:	4611      	mov	r1, r2
  403470:	4628      	mov	r0, r5
  403472:	4614      	mov	r4, r2
  403474:	f7ff ffdd 	bl	403432 <__mcmp>
  403478:	1e06      	subs	r6, r0, #0
  40347a:	d108      	bne.n	40348e <__mdiff+0x28>
  40347c:	4631      	mov	r1, r6
  40347e:	4638      	mov	r0, r7
  403480:	f7ff fdce 	bl	403020 <_Balloc>
  403484:	2301      	movs	r3, #1
  403486:	6103      	str	r3, [r0, #16]
  403488:	6146      	str	r6, [r0, #20]
  40348a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40348e:	bfa4      	itt	ge
  403490:	4623      	movge	r3, r4
  403492:	462c      	movge	r4, r5
  403494:	4638      	mov	r0, r7
  403496:	6861      	ldr	r1, [r4, #4]
  403498:	bfa6      	itte	ge
  40349a:	461d      	movge	r5, r3
  40349c:	2600      	movge	r6, #0
  40349e:	2601      	movlt	r6, #1
  4034a0:	f7ff fdbe 	bl	403020 <_Balloc>
  4034a4:	692b      	ldr	r3, [r5, #16]
  4034a6:	60c6      	str	r6, [r0, #12]
  4034a8:	6926      	ldr	r6, [r4, #16]
  4034aa:	f105 0914 	add.w	r9, r5, #20
  4034ae:	f104 0214 	add.w	r2, r4, #20
  4034b2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  4034b6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  4034ba:	f100 0514 	add.w	r5, r0, #20
  4034be:	f04f 0c00 	mov.w	ip, #0
  4034c2:	f852 ab04 	ldr.w	sl, [r2], #4
  4034c6:	f859 4b04 	ldr.w	r4, [r9], #4
  4034ca:	fa1c f18a 	uxtah	r1, ip, sl
  4034ce:	b2a3      	uxth	r3, r4
  4034d0:	1ac9      	subs	r1, r1, r3
  4034d2:	0c23      	lsrs	r3, r4, #16
  4034d4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  4034d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
  4034dc:	b289      	uxth	r1, r1
  4034de:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4034e2:	45c8      	cmp	r8, r9
  4034e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  4034e8:	4696      	mov	lr, r2
  4034ea:	f845 3b04 	str.w	r3, [r5], #4
  4034ee:	d8e8      	bhi.n	4034c2 <__mdiff+0x5c>
  4034f0:	45be      	cmp	lr, r7
  4034f2:	d305      	bcc.n	403500 <__mdiff+0x9a>
  4034f4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4034f8:	b18b      	cbz	r3, 40351e <__mdiff+0xb8>
  4034fa:	6106      	str	r6, [r0, #16]
  4034fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403500:	f85e 1b04 	ldr.w	r1, [lr], #4
  403504:	fa1c f381 	uxtah	r3, ip, r1
  403508:	141a      	asrs	r2, r3, #16
  40350a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  40350e:	b29b      	uxth	r3, r3
  403510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403514:	ea4f 4c22 	mov.w	ip, r2, asr #16
  403518:	f845 3b04 	str.w	r3, [r5], #4
  40351c:	e7e8      	b.n	4034f0 <__mdiff+0x8a>
  40351e:	3e01      	subs	r6, #1
  403520:	e7e8      	b.n	4034f4 <__mdiff+0x8e>

00403522 <__d2b>:
  403522:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  403526:	2101      	movs	r1, #1
  403528:	461c      	mov	r4, r3
  40352a:	4690      	mov	r8, r2
  40352c:	9e08      	ldr	r6, [sp, #32]
  40352e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403530:	f7ff fd76 	bl	403020 <_Balloc>
  403534:	f3c4 0213 	ubfx	r2, r4, #0, #20
  403538:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40353c:	4607      	mov	r7, r0
  40353e:	bb34      	cbnz	r4, 40358e <__d2b+0x6c>
  403540:	9201      	str	r2, [sp, #4]
  403542:	f1b8 0f00 	cmp.w	r8, #0
  403546:	d027      	beq.n	403598 <__d2b+0x76>
  403548:	a802      	add	r0, sp, #8
  40354a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40354e:	f7ff fe0c 	bl	40316a <__lo0bits>
  403552:	9900      	ldr	r1, [sp, #0]
  403554:	b1f0      	cbz	r0, 403594 <__d2b+0x72>
  403556:	9a01      	ldr	r2, [sp, #4]
  403558:	f1c0 0320 	rsb	r3, r0, #32
  40355c:	fa02 f303 	lsl.w	r3, r2, r3
  403560:	430b      	orrs	r3, r1
  403562:	40c2      	lsrs	r2, r0
  403564:	617b      	str	r3, [r7, #20]
  403566:	9201      	str	r2, [sp, #4]
  403568:	9b01      	ldr	r3, [sp, #4]
  40356a:	61bb      	str	r3, [r7, #24]
  40356c:	2b00      	cmp	r3, #0
  40356e:	bf14      	ite	ne
  403570:	2102      	movne	r1, #2
  403572:	2101      	moveq	r1, #1
  403574:	6139      	str	r1, [r7, #16]
  403576:	b1c4      	cbz	r4, 4035aa <__d2b+0x88>
  403578:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40357c:	4404      	add	r4, r0
  40357e:	6034      	str	r4, [r6, #0]
  403580:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  403584:	6028      	str	r0, [r5, #0]
  403586:	4638      	mov	r0, r7
  403588:	b002      	add	sp, #8
  40358a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40358e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  403592:	e7d5      	b.n	403540 <__d2b+0x1e>
  403594:	6179      	str	r1, [r7, #20]
  403596:	e7e7      	b.n	403568 <__d2b+0x46>
  403598:	a801      	add	r0, sp, #4
  40359a:	f7ff fde6 	bl	40316a <__lo0bits>
  40359e:	9b01      	ldr	r3, [sp, #4]
  4035a0:	617b      	str	r3, [r7, #20]
  4035a2:	2101      	movs	r1, #1
  4035a4:	6139      	str	r1, [r7, #16]
  4035a6:	3020      	adds	r0, #32
  4035a8:	e7e5      	b.n	403576 <__d2b+0x54>
  4035aa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  4035ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4035b2:	6030      	str	r0, [r6, #0]
  4035b4:	6918      	ldr	r0, [r3, #16]
  4035b6:	f7ff fdb9 	bl	40312c <__hi0bits>
  4035ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4035be:	e7e1      	b.n	403584 <__d2b+0x62>

004035c0 <_calloc_r>:
  4035c0:	b538      	push	{r3, r4, r5, lr}
  4035c2:	fb02 f401 	mul.w	r4, r2, r1
  4035c6:	4621      	mov	r1, r4
  4035c8:	f000 f856 	bl	403678 <_malloc_r>
  4035cc:	4605      	mov	r5, r0
  4035ce:	b118      	cbz	r0, 4035d8 <_calloc_r+0x18>
  4035d0:	4622      	mov	r2, r4
  4035d2:	2100      	movs	r1, #0
  4035d4:	f7fd ff3f 	bl	401456 <memset>
  4035d8:	4628      	mov	r0, r5
  4035da:	bd38      	pop	{r3, r4, r5, pc}

004035dc <_free_r>:
  4035dc:	b538      	push	{r3, r4, r5, lr}
  4035de:	4605      	mov	r5, r0
  4035e0:	2900      	cmp	r1, #0
  4035e2:	d045      	beq.n	403670 <_free_r+0x94>
  4035e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4035e8:	1f0c      	subs	r4, r1, #4
  4035ea:	2b00      	cmp	r3, #0
  4035ec:	bfb8      	it	lt
  4035ee:	18e4      	addlt	r4, r4, r3
  4035f0:	f000 fb5a 	bl	403ca8 <__malloc_lock>
  4035f4:	4a1f      	ldr	r2, [pc, #124]	; (403674 <_free_r+0x98>)
  4035f6:	6813      	ldr	r3, [r2, #0]
  4035f8:	4610      	mov	r0, r2
  4035fa:	b933      	cbnz	r3, 40360a <_free_r+0x2e>
  4035fc:	6063      	str	r3, [r4, #4]
  4035fe:	6014      	str	r4, [r2, #0]
  403600:	4628      	mov	r0, r5
  403602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403606:	f000 bb50 	b.w	403caa <__malloc_unlock>
  40360a:	42a3      	cmp	r3, r4
  40360c:	d90c      	bls.n	403628 <_free_r+0x4c>
  40360e:	6821      	ldr	r1, [r4, #0]
  403610:	1862      	adds	r2, r4, r1
  403612:	4293      	cmp	r3, r2
  403614:	bf04      	itt	eq
  403616:	681a      	ldreq	r2, [r3, #0]
  403618:	685b      	ldreq	r3, [r3, #4]
  40361a:	6063      	str	r3, [r4, #4]
  40361c:	bf04      	itt	eq
  40361e:	1852      	addeq	r2, r2, r1
  403620:	6022      	streq	r2, [r4, #0]
  403622:	6004      	str	r4, [r0, #0]
  403624:	e7ec      	b.n	403600 <_free_r+0x24>
  403626:	4613      	mov	r3, r2
  403628:	685a      	ldr	r2, [r3, #4]
  40362a:	b10a      	cbz	r2, 403630 <_free_r+0x54>
  40362c:	42a2      	cmp	r2, r4
  40362e:	d9fa      	bls.n	403626 <_free_r+0x4a>
  403630:	6819      	ldr	r1, [r3, #0]
  403632:	1858      	adds	r0, r3, r1
  403634:	42a0      	cmp	r0, r4
  403636:	d10b      	bne.n	403650 <_free_r+0x74>
  403638:	6820      	ldr	r0, [r4, #0]
  40363a:	4401      	add	r1, r0
  40363c:	1858      	adds	r0, r3, r1
  40363e:	4282      	cmp	r2, r0
  403640:	6019      	str	r1, [r3, #0]
  403642:	d1dd      	bne.n	403600 <_free_r+0x24>
  403644:	6810      	ldr	r0, [r2, #0]
  403646:	6852      	ldr	r2, [r2, #4]
  403648:	605a      	str	r2, [r3, #4]
  40364a:	4401      	add	r1, r0
  40364c:	6019      	str	r1, [r3, #0]
  40364e:	e7d7      	b.n	403600 <_free_r+0x24>
  403650:	d902      	bls.n	403658 <_free_r+0x7c>
  403652:	230c      	movs	r3, #12
  403654:	602b      	str	r3, [r5, #0]
  403656:	e7d3      	b.n	403600 <_free_r+0x24>
  403658:	6820      	ldr	r0, [r4, #0]
  40365a:	1821      	adds	r1, r4, r0
  40365c:	428a      	cmp	r2, r1
  40365e:	bf04      	itt	eq
  403660:	6811      	ldreq	r1, [r2, #0]
  403662:	6852      	ldreq	r2, [r2, #4]
  403664:	6062      	str	r2, [r4, #4]
  403666:	bf04      	itt	eq
  403668:	1809      	addeq	r1, r1, r0
  40366a:	6021      	streq	r1, [r4, #0]
  40366c:	605c      	str	r4, [r3, #4]
  40366e:	e7c7      	b.n	403600 <_free_r+0x24>
  403670:	bd38      	pop	{r3, r4, r5, pc}
  403672:	bf00      	nop
  403674:	20400260 	.word	0x20400260

00403678 <_malloc_r>:
  403678:	b570      	push	{r4, r5, r6, lr}
  40367a:	1ccd      	adds	r5, r1, #3
  40367c:	f025 0503 	bic.w	r5, r5, #3
  403680:	3508      	adds	r5, #8
  403682:	2d0c      	cmp	r5, #12
  403684:	bf38      	it	cc
  403686:	250c      	movcc	r5, #12
  403688:	2d00      	cmp	r5, #0
  40368a:	4606      	mov	r6, r0
  40368c:	db01      	blt.n	403692 <_malloc_r+0x1a>
  40368e:	42a9      	cmp	r1, r5
  403690:	d903      	bls.n	40369a <_malloc_r+0x22>
  403692:	230c      	movs	r3, #12
  403694:	6033      	str	r3, [r6, #0]
  403696:	2000      	movs	r0, #0
  403698:	bd70      	pop	{r4, r5, r6, pc}
  40369a:	f000 fb05 	bl	403ca8 <__malloc_lock>
  40369e:	4a23      	ldr	r2, [pc, #140]	; (40372c <_malloc_r+0xb4>)
  4036a0:	6814      	ldr	r4, [r2, #0]
  4036a2:	4621      	mov	r1, r4
  4036a4:	b991      	cbnz	r1, 4036cc <_malloc_r+0x54>
  4036a6:	4c22      	ldr	r4, [pc, #136]	; (403730 <_malloc_r+0xb8>)
  4036a8:	6823      	ldr	r3, [r4, #0]
  4036aa:	b91b      	cbnz	r3, 4036b4 <_malloc_r+0x3c>
  4036ac:	4630      	mov	r0, r6
  4036ae:	f000 f97f 	bl	4039b0 <_sbrk_r>
  4036b2:	6020      	str	r0, [r4, #0]
  4036b4:	4629      	mov	r1, r5
  4036b6:	4630      	mov	r0, r6
  4036b8:	f000 f97a 	bl	4039b0 <_sbrk_r>
  4036bc:	1c43      	adds	r3, r0, #1
  4036be:	d126      	bne.n	40370e <_malloc_r+0x96>
  4036c0:	230c      	movs	r3, #12
  4036c2:	6033      	str	r3, [r6, #0]
  4036c4:	4630      	mov	r0, r6
  4036c6:	f000 faf0 	bl	403caa <__malloc_unlock>
  4036ca:	e7e4      	b.n	403696 <_malloc_r+0x1e>
  4036cc:	680b      	ldr	r3, [r1, #0]
  4036ce:	1b5b      	subs	r3, r3, r5
  4036d0:	d41a      	bmi.n	403708 <_malloc_r+0x90>
  4036d2:	2b0b      	cmp	r3, #11
  4036d4:	d90f      	bls.n	4036f6 <_malloc_r+0x7e>
  4036d6:	600b      	str	r3, [r1, #0]
  4036d8:	50cd      	str	r5, [r1, r3]
  4036da:	18cc      	adds	r4, r1, r3
  4036dc:	4630      	mov	r0, r6
  4036de:	f000 fae4 	bl	403caa <__malloc_unlock>
  4036e2:	f104 000b 	add.w	r0, r4, #11
  4036e6:	1d23      	adds	r3, r4, #4
  4036e8:	f020 0007 	bic.w	r0, r0, #7
  4036ec:	1ac3      	subs	r3, r0, r3
  4036ee:	d01b      	beq.n	403728 <_malloc_r+0xb0>
  4036f0:	425a      	negs	r2, r3
  4036f2:	50e2      	str	r2, [r4, r3]
  4036f4:	bd70      	pop	{r4, r5, r6, pc}
  4036f6:	428c      	cmp	r4, r1
  4036f8:	bf0d      	iteet	eq
  4036fa:	6863      	ldreq	r3, [r4, #4]
  4036fc:	684b      	ldrne	r3, [r1, #4]
  4036fe:	6063      	strne	r3, [r4, #4]
  403700:	6013      	streq	r3, [r2, #0]
  403702:	bf18      	it	ne
  403704:	460c      	movne	r4, r1
  403706:	e7e9      	b.n	4036dc <_malloc_r+0x64>
  403708:	460c      	mov	r4, r1
  40370a:	6849      	ldr	r1, [r1, #4]
  40370c:	e7ca      	b.n	4036a4 <_malloc_r+0x2c>
  40370e:	1cc4      	adds	r4, r0, #3
  403710:	f024 0403 	bic.w	r4, r4, #3
  403714:	42a0      	cmp	r0, r4
  403716:	d005      	beq.n	403724 <_malloc_r+0xac>
  403718:	1a21      	subs	r1, r4, r0
  40371a:	4630      	mov	r0, r6
  40371c:	f000 f948 	bl	4039b0 <_sbrk_r>
  403720:	3001      	adds	r0, #1
  403722:	d0cd      	beq.n	4036c0 <_malloc_r+0x48>
  403724:	6025      	str	r5, [r4, #0]
  403726:	e7d9      	b.n	4036dc <_malloc_r+0x64>
  403728:	bd70      	pop	{r4, r5, r6, pc}
  40372a:	bf00      	nop
  40372c:	20400260 	.word	0x20400260
  403730:	20400264 	.word	0x20400264

00403734 <__sfputc_r>:
  403734:	6893      	ldr	r3, [r2, #8]
  403736:	3b01      	subs	r3, #1
  403738:	2b00      	cmp	r3, #0
  40373a:	b410      	push	{r4}
  40373c:	6093      	str	r3, [r2, #8]
  40373e:	da08      	bge.n	403752 <__sfputc_r+0x1e>
  403740:	6994      	ldr	r4, [r2, #24]
  403742:	42a3      	cmp	r3, r4
  403744:	db02      	blt.n	40374c <__sfputc_r+0x18>
  403746:	b2cb      	uxtb	r3, r1
  403748:	2b0a      	cmp	r3, #10
  40374a:	d102      	bne.n	403752 <__sfputc_r+0x1e>
  40374c:	bc10      	pop	{r4}
  40374e:	f000 b983 	b.w	403a58 <__swbuf_r>
  403752:	6813      	ldr	r3, [r2, #0]
  403754:	1c58      	adds	r0, r3, #1
  403756:	6010      	str	r0, [r2, #0]
  403758:	7019      	strb	r1, [r3, #0]
  40375a:	b2c8      	uxtb	r0, r1
  40375c:	bc10      	pop	{r4}
  40375e:	4770      	bx	lr

00403760 <__sfputs_r>:
  403760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403762:	4606      	mov	r6, r0
  403764:	460f      	mov	r7, r1
  403766:	4614      	mov	r4, r2
  403768:	18d5      	adds	r5, r2, r3
  40376a:	42ac      	cmp	r4, r5
  40376c:	d101      	bne.n	403772 <__sfputs_r+0x12>
  40376e:	2000      	movs	r0, #0
  403770:	e007      	b.n	403782 <__sfputs_r+0x22>
  403772:	463a      	mov	r2, r7
  403774:	f814 1b01 	ldrb.w	r1, [r4], #1
  403778:	4630      	mov	r0, r6
  40377a:	f7ff ffdb 	bl	403734 <__sfputc_r>
  40377e:	1c43      	adds	r3, r0, #1
  403780:	d1f3      	bne.n	40376a <__sfputs_r+0xa>
  403782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00403784 <_vfiprintf_r>:
  403784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403788:	b09d      	sub	sp, #116	; 0x74
  40378a:	460c      	mov	r4, r1
  40378c:	4617      	mov	r7, r2
  40378e:	9303      	str	r3, [sp, #12]
  403790:	4606      	mov	r6, r0
  403792:	b118      	cbz	r0, 40379c <_vfiprintf_r+0x18>
  403794:	6983      	ldr	r3, [r0, #24]
  403796:	b90b      	cbnz	r3, 40379c <_vfiprintf_r+0x18>
  403798:	f7ff faea 	bl	402d70 <__sinit>
  40379c:	4b7c      	ldr	r3, [pc, #496]	; (403990 <_vfiprintf_r+0x20c>)
  40379e:	429c      	cmp	r4, r3
  4037a0:	d157      	bne.n	403852 <_vfiprintf_r+0xce>
  4037a2:	6874      	ldr	r4, [r6, #4]
  4037a4:	89a3      	ldrh	r3, [r4, #12]
  4037a6:	0718      	lsls	r0, r3, #28
  4037a8:	d55d      	bpl.n	403866 <_vfiprintf_r+0xe2>
  4037aa:	6923      	ldr	r3, [r4, #16]
  4037ac:	2b00      	cmp	r3, #0
  4037ae:	d05a      	beq.n	403866 <_vfiprintf_r+0xe2>
  4037b0:	2300      	movs	r3, #0
  4037b2:	9309      	str	r3, [sp, #36]	; 0x24
  4037b4:	2320      	movs	r3, #32
  4037b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  4037ba:	2330      	movs	r3, #48	; 0x30
  4037bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4037c0:	f04f 0b01 	mov.w	fp, #1
  4037c4:	46b8      	mov	r8, r7
  4037c6:	4645      	mov	r5, r8
  4037c8:	f815 3b01 	ldrb.w	r3, [r5], #1
  4037cc:	2b00      	cmp	r3, #0
  4037ce:	d155      	bne.n	40387c <_vfiprintf_r+0xf8>
  4037d0:	ebb8 0a07 	subs.w	sl, r8, r7
  4037d4:	d00b      	beq.n	4037ee <_vfiprintf_r+0x6a>
  4037d6:	4653      	mov	r3, sl
  4037d8:	463a      	mov	r2, r7
  4037da:	4621      	mov	r1, r4
  4037dc:	4630      	mov	r0, r6
  4037de:	f7ff ffbf 	bl	403760 <__sfputs_r>
  4037e2:	3001      	adds	r0, #1
  4037e4:	f000 80c4 	beq.w	403970 <_vfiprintf_r+0x1ec>
  4037e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4037ea:	4453      	add	r3, sl
  4037ec:	9309      	str	r3, [sp, #36]	; 0x24
  4037ee:	f898 3000 	ldrb.w	r3, [r8]
  4037f2:	2b00      	cmp	r3, #0
  4037f4:	f000 80bc 	beq.w	403970 <_vfiprintf_r+0x1ec>
  4037f8:	2300      	movs	r3, #0
  4037fa:	f04f 32ff 	mov.w	r2, #4294967295
  4037fe:	9304      	str	r3, [sp, #16]
  403800:	9307      	str	r3, [sp, #28]
  403802:	9205      	str	r2, [sp, #20]
  403804:	9306      	str	r3, [sp, #24]
  403806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40380a:	931a      	str	r3, [sp, #104]	; 0x68
  40380c:	2205      	movs	r2, #5
  40380e:	7829      	ldrb	r1, [r5, #0]
  403810:	4860      	ldr	r0, [pc, #384]	; (403994 <_vfiprintf_r+0x210>)
  403812:	f7ff fbb5 	bl	402f80 <memchr>
  403816:	f105 0801 	add.w	r8, r5, #1
  40381a:	9b04      	ldr	r3, [sp, #16]
  40381c:	2800      	cmp	r0, #0
  40381e:	d131      	bne.n	403884 <_vfiprintf_r+0x100>
  403820:	06d9      	lsls	r1, r3, #27
  403822:	bf44      	itt	mi
  403824:	2220      	movmi	r2, #32
  403826:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40382a:	071a      	lsls	r2, r3, #28
  40382c:	bf44      	itt	mi
  40382e:	222b      	movmi	r2, #43	; 0x2b
  403830:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  403834:	782a      	ldrb	r2, [r5, #0]
  403836:	2a2a      	cmp	r2, #42	; 0x2a
  403838:	d02c      	beq.n	403894 <_vfiprintf_r+0x110>
  40383a:	9a07      	ldr	r2, [sp, #28]
  40383c:	2100      	movs	r1, #0
  40383e:	200a      	movs	r0, #10
  403840:	46a8      	mov	r8, r5
  403842:	3501      	adds	r5, #1
  403844:	f898 3000 	ldrb.w	r3, [r8]
  403848:	3b30      	subs	r3, #48	; 0x30
  40384a:	2b09      	cmp	r3, #9
  40384c:	d96d      	bls.n	40392a <_vfiprintf_r+0x1a6>
  40384e:	b371      	cbz	r1, 4038ae <_vfiprintf_r+0x12a>
  403850:	e026      	b.n	4038a0 <_vfiprintf_r+0x11c>
  403852:	4b51      	ldr	r3, [pc, #324]	; (403998 <_vfiprintf_r+0x214>)
  403854:	429c      	cmp	r4, r3
  403856:	d101      	bne.n	40385c <_vfiprintf_r+0xd8>
  403858:	68b4      	ldr	r4, [r6, #8]
  40385a:	e7a3      	b.n	4037a4 <_vfiprintf_r+0x20>
  40385c:	4b4f      	ldr	r3, [pc, #316]	; (40399c <_vfiprintf_r+0x218>)
  40385e:	429c      	cmp	r4, r3
  403860:	bf08      	it	eq
  403862:	68f4      	ldreq	r4, [r6, #12]
  403864:	e79e      	b.n	4037a4 <_vfiprintf_r+0x20>
  403866:	4621      	mov	r1, r4
  403868:	4630      	mov	r0, r6
  40386a:	f000 f959 	bl	403b20 <__swsetup_r>
  40386e:	2800      	cmp	r0, #0
  403870:	d09e      	beq.n	4037b0 <_vfiprintf_r+0x2c>
  403872:	f04f 30ff 	mov.w	r0, #4294967295
  403876:	b01d      	add	sp, #116	; 0x74
  403878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40387c:	2b25      	cmp	r3, #37	; 0x25
  40387e:	d0a7      	beq.n	4037d0 <_vfiprintf_r+0x4c>
  403880:	46a8      	mov	r8, r5
  403882:	e7a0      	b.n	4037c6 <_vfiprintf_r+0x42>
  403884:	4a43      	ldr	r2, [pc, #268]	; (403994 <_vfiprintf_r+0x210>)
  403886:	1a80      	subs	r0, r0, r2
  403888:	fa0b f000 	lsl.w	r0, fp, r0
  40388c:	4318      	orrs	r0, r3
  40388e:	9004      	str	r0, [sp, #16]
  403890:	4645      	mov	r5, r8
  403892:	e7bb      	b.n	40380c <_vfiprintf_r+0x88>
  403894:	9a03      	ldr	r2, [sp, #12]
  403896:	1d11      	adds	r1, r2, #4
  403898:	6812      	ldr	r2, [r2, #0]
  40389a:	9103      	str	r1, [sp, #12]
  40389c:	2a00      	cmp	r2, #0
  40389e:	db01      	blt.n	4038a4 <_vfiprintf_r+0x120>
  4038a0:	9207      	str	r2, [sp, #28]
  4038a2:	e004      	b.n	4038ae <_vfiprintf_r+0x12a>
  4038a4:	4252      	negs	r2, r2
  4038a6:	f043 0302 	orr.w	r3, r3, #2
  4038aa:	9207      	str	r2, [sp, #28]
  4038ac:	9304      	str	r3, [sp, #16]
  4038ae:	f898 3000 	ldrb.w	r3, [r8]
  4038b2:	2b2e      	cmp	r3, #46	; 0x2e
  4038b4:	d110      	bne.n	4038d8 <_vfiprintf_r+0x154>
  4038b6:	f898 3001 	ldrb.w	r3, [r8, #1]
  4038ba:	2b2a      	cmp	r3, #42	; 0x2a
  4038bc:	f108 0101 	add.w	r1, r8, #1
  4038c0:	d137      	bne.n	403932 <_vfiprintf_r+0x1ae>
  4038c2:	9b03      	ldr	r3, [sp, #12]
  4038c4:	1d1a      	adds	r2, r3, #4
  4038c6:	681b      	ldr	r3, [r3, #0]
  4038c8:	9203      	str	r2, [sp, #12]
  4038ca:	2b00      	cmp	r3, #0
  4038cc:	bfb8      	it	lt
  4038ce:	f04f 33ff 	movlt.w	r3, #4294967295
  4038d2:	f108 0802 	add.w	r8, r8, #2
  4038d6:	9305      	str	r3, [sp, #20]
  4038d8:	4d31      	ldr	r5, [pc, #196]	; (4039a0 <_vfiprintf_r+0x21c>)
  4038da:	f898 1000 	ldrb.w	r1, [r8]
  4038de:	2203      	movs	r2, #3
  4038e0:	4628      	mov	r0, r5
  4038e2:	f7ff fb4d 	bl	402f80 <memchr>
  4038e6:	b140      	cbz	r0, 4038fa <_vfiprintf_r+0x176>
  4038e8:	2340      	movs	r3, #64	; 0x40
  4038ea:	1b40      	subs	r0, r0, r5
  4038ec:	fa03 f000 	lsl.w	r0, r3, r0
  4038f0:	9b04      	ldr	r3, [sp, #16]
  4038f2:	4303      	orrs	r3, r0
  4038f4:	9304      	str	r3, [sp, #16]
  4038f6:	f108 0801 	add.w	r8, r8, #1
  4038fa:	f898 1000 	ldrb.w	r1, [r8]
  4038fe:	4829      	ldr	r0, [pc, #164]	; (4039a4 <_vfiprintf_r+0x220>)
  403900:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  403904:	2206      	movs	r2, #6
  403906:	f108 0701 	add.w	r7, r8, #1
  40390a:	f7ff fb39 	bl	402f80 <memchr>
  40390e:	2800      	cmp	r0, #0
  403910:	d034      	beq.n	40397c <_vfiprintf_r+0x1f8>
  403912:	4b25      	ldr	r3, [pc, #148]	; (4039a8 <_vfiprintf_r+0x224>)
  403914:	bb03      	cbnz	r3, 403958 <_vfiprintf_r+0x1d4>
  403916:	9b03      	ldr	r3, [sp, #12]
  403918:	3307      	adds	r3, #7
  40391a:	f023 0307 	bic.w	r3, r3, #7
  40391e:	3308      	adds	r3, #8
  403920:	9303      	str	r3, [sp, #12]
  403922:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403924:	444b      	add	r3, r9
  403926:	9309      	str	r3, [sp, #36]	; 0x24
  403928:	e74c      	b.n	4037c4 <_vfiprintf_r+0x40>
  40392a:	fb00 3202 	mla	r2, r0, r2, r3
  40392e:	2101      	movs	r1, #1
  403930:	e786      	b.n	403840 <_vfiprintf_r+0xbc>
  403932:	2300      	movs	r3, #0
  403934:	9305      	str	r3, [sp, #20]
  403936:	4618      	mov	r0, r3
  403938:	250a      	movs	r5, #10
  40393a:	4688      	mov	r8, r1
  40393c:	3101      	adds	r1, #1
  40393e:	f898 2000 	ldrb.w	r2, [r8]
  403942:	3a30      	subs	r2, #48	; 0x30
  403944:	2a09      	cmp	r2, #9
  403946:	d903      	bls.n	403950 <_vfiprintf_r+0x1cc>
  403948:	2b00      	cmp	r3, #0
  40394a:	d0c5      	beq.n	4038d8 <_vfiprintf_r+0x154>
  40394c:	9005      	str	r0, [sp, #20]
  40394e:	e7c3      	b.n	4038d8 <_vfiprintf_r+0x154>
  403950:	fb05 2000 	mla	r0, r5, r0, r2
  403954:	2301      	movs	r3, #1
  403956:	e7f0      	b.n	40393a <_vfiprintf_r+0x1b6>
  403958:	ab03      	add	r3, sp, #12
  40395a:	9300      	str	r3, [sp, #0]
  40395c:	4622      	mov	r2, r4
  40395e:	4b13      	ldr	r3, [pc, #76]	; (4039ac <_vfiprintf_r+0x228>)
  403960:	a904      	add	r1, sp, #16
  403962:	4630      	mov	r0, r6
  403964:	f7fd fe10 	bl	401588 <_printf_float>
  403968:	f1b0 3fff 	cmp.w	r0, #4294967295
  40396c:	4681      	mov	r9, r0
  40396e:	d1d8      	bne.n	403922 <_vfiprintf_r+0x19e>
  403970:	89a3      	ldrh	r3, [r4, #12]
  403972:	065b      	lsls	r3, r3, #25
  403974:	f53f af7d 	bmi.w	403872 <_vfiprintf_r+0xee>
  403978:	9809      	ldr	r0, [sp, #36]	; 0x24
  40397a:	e77c      	b.n	403876 <_vfiprintf_r+0xf2>
  40397c:	ab03      	add	r3, sp, #12
  40397e:	9300      	str	r3, [sp, #0]
  403980:	4622      	mov	r2, r4
  403982:	4b0a      	ldr	r3, [pc, #40]	; (4039ac <_vfiprintf_r+0x228>)
  403984:	a904      	add	r1, sp, #16
  403986:	4630      	mov	r0, r6
  403988:	f7fe f8ac 	bl	401ae4 <_printf_i>
  40398c:	e7ec      	b.n	403968 <_vfiprintf_r+0x1e4>
  40398e:	bf00      	nop
  403990:	00404904 	.word	0x00404904
  403994:	00404a44 	.word	0x00404a44
  403998:	00404924 	.word	0x00404924
  40399c:	004048e4 	.word	0x004048e4
  4039a0:	00404a4a 	.word	0x00404a4a
  4039a4:	00404a4e 	.word	0x00404a4e
  4039a8:	00401589 	.word	0x00401589
  4039ac:	00403761 	.word	0x00403761

004039b0 <_sbrk_r>:
  4039b0:	b538      	push	{r3, r4, r5, lr}
  4039b2:	4c06      	ldr	r4, [pc, #24]	; (4039cc <_sbrk_r+0x1c>)
  4039b4:	2300      	movs	r3, #0
  4039b6:	4605      	mov	r5, r0
  4039b8:	4608      	mov	r0, r1
  4039ba:	6023      	str	r3, [r4, #0]
  4039bc:	f7fc ffc4 	bl	400948 <_sbrk>
  4039c0:	1c43      	adds	r3, r0, #1
  4039c2:	d102      	bne.n	4039ca <_sbrk_r+0x1a>
  4039c4:	6823      	ldr	r3, [r4, #0]
  4039c6:	b103      	cbz	r3, 4039ca <_sbrk_r+0x1a>
  4039c8:	602b      	str	r3, [r5, #0]
  4039ca:	bd38      	pop	{r3, r4, r5, pc}
  4039cc:	204002dc 	.word	0x204002dc

004039d0 <__sread>:
  4039d0:	b510      	push	{r4, lr}
  4039d2:	460c      	mov	r4, r1
  4039d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4039d8:	f000 f968 	bl	403cac <_read_r>
  4039dc:	2800      	cmp	r0, #0
  4039de:	bfab      	itete	ge
  4039e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  4039e2:	89a3      	ldrhlt	r3, [r4, #12]
  4039e4:	181b      	addge	r3, r3, r0
  4039e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  4039ea:	bfac      	ite	ge
  4039ec:	6563      	strge	r3, [r4, #84]	; 0x54
  4039ee:	81a3      	strhlt	r3, [r4, #12]
  4039f0:	bd10      	pop	{r4, pc}

004039f2 <__swrite>:
  4039f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4039f6:	461f      	mov	r7, r3
  4039f8:	898b      	ldrh	r3, [r1, #12]
  4039fa:	05db      	lsls	r3, r3, #23
  4039fc:	4605      	mov	r5, r0
  4039fe:	460c      	mov	r4, r1
  403a00:	4616      	mov	r6, r2
  403a02:	d505      	bpl.n	403a10 <__swrite+0x1e>
  403a04:	2302      	movs	r3, #2
  403a06:	2200      	movs	r2, #0
  403a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a0c:	f000 f928 	bl	403c60 <_lseek_r>
  403a10:	89a3      	ldrh	r3, [r4, #12]
  403a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403a1a:	81a3      	strh	r3, [r4, #12]
  403a1c:	4632      	mov	r2, r6
  403a1e:	463b      	mov	r3, r7
  403a20:	4628      	mov	r0, r5
  403a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403a26:	f000 b869 	b.w	403afc <_write_r>

00403a2a <__sseek>:
  403a2a:	b510      	push	{r4, lr}
  403a2c:	460c      	mov	r4, r1
  403a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a32:	f000 f915 	bl	403c60 <_lseek_r>
  403a36:	1c43      	adds	r3, r0, #1
  403a38:	89a3      	ldrh	r3, [r4, #12]
  403a3a:	bf15      	itete	ne
  403a3c:	6560      	strne	r0, [r4, #84]	; 0x54
  403a3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403a42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403a46:	81a3      	strheq	r3, [r4, #12]
  403a48:	bf18      	it	ne
  403a4a:	81a3      	strhne	r3, [r4, #12]
  403a4c:	bd10      	pop	{r4, pc}

00403a4e <__sclose>:
  403a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a52:	f000 b8d3 	b.w	403bfc <_close_r>
	...

00403a58 <__swbuf_r>:
  403a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403a5a:	460e      	mov	r6, r1
  403a5c:	4614      	mov	r4, r2
  403a5e:	4605      	mov	r5, r0
  403a60:	b118      	cbz	r0, 403a6a <__swbuf_r+0x12>
  403a62:	6983      	ldr	r3, [r0, #24]
  403a64:	b90b      	cbnz	r3, 403a6a <__swbuf_r+0x12>
  403a66:	f7ff f983 	bl	402d70 <__sinit>
  403a6a:	4b21      	ldr	r3, [pc, #132]	; (403af0 <__swbuf_r+0x98>)
  403a6c:	429c      	cmp	r4, r3
  403a6e:	d12a      	bne.n	403ac6 <__swbuf_r+0x6e>
  403a70:	686c      	ldr	r4, [r5, #4]
  403a72:	69a3      	ldr	r3, [r4, #24]
  403a74:	60a3      	str	r3, [r4, #8]
  403a76:	89a3      	ldrh	r3, [r4, #12]
  403a78:	071a      	lsls	r2, r3, #28
  403a7a:	d52e      	bpl.n	403ada <__swbuf_r+0x82>
  403a7c:	6923      	ldr	r3, [r4, #16]
  403a7e:	b363      	cbz	r3, 403ada <__swbuf_r+0x82>
  403a80:	6923      	ldr	r3, [r4, #16]
  403a82:	6820      	ldr	r0, [r4, #0]
  403a84:	1ac0      	subs	r0, r0, r3
  403a86:	6963      	ldr	r3, [r4, #20]
  403a88:	b2f6      	uxtb	r6, r6
  403a8a:	4298      	cmp	r0, r3
  403a8c:	4637      	mov	r7, r6
  403a8e:	db04      	blt.n	403a9a <__swbuf_r+0x42>
  403a90:	4621      	mov	r1, r4
  403a92:	4628      	mov	r0, r5
  403a94:	f7ff f902 	bl	402c9c <_fflush_r>
  403a98:	bb28      	cbnz	r0, 403ae6 <__swbuf_r+0x8e>
  403a9a:	68a3      	ldr	r3, [r4, #8]
  403a9c:	3b01      	subs	r3, #1
  403a9e:	60a3      	str	r3, [r4, #8]
  403aa0:	6823      	ldr	r3, [r4, #0]
  403aa2:	1c5a      	adds	r2, r3, #1
  403aa4:	6022      	str	r2, [r4, #0]
  403aa6:	701e      	strb	r6, [r3, #0]
  403aa8:	6963      	ldr	r3, [r4, #20]
  403aaa:	3001      	adds	r0, #1
  403aac:	4298      	cmp	r0, r3
  403aae:	d004      	beq.n	403aba <__swbuf_r+0x62>
  403ab0:	89a3      	ldrh	r3, [r4, #12]
  403ab2:	07db      	lsls	r3, r3, #31
  403ab4:	d519      	bpl.n	403aea <__swbuf_r+0x92>
  403ab6:	2e0a      	cmp	r6, #10
  403ab8:	d117      	bne.n	403aea <__swbuf_r+0x92>
  403aba:	4621      	mov	r1, r4
  403abc:	4628      	mov	r0, r5
  403abe:	f7ff f8ed 	bl	402c9c <_fflush_r>
  403ac2:	b190      	cbz	r0, 403aea <__swbuf_r+0x92>
  403ac4:	e00f      	b.n	403ae6 <__swbuf_r+0x8e>
  403ac6:	4b0b      	ldr	r3, [pc, #44]	; (403af4 <__swbuf_r+0x9c>)
  403ac8:	429c      	cmp	r4, r3
  403aca:	d101      	bne.n	403ad0 <__swbuf_r+0x78>
  403acc:	68ac      	ldr	r4, [r5, #8]
  403ace:	e7d0      	b.n	403a72 <__swbuf_r+0x1a>
  403ad0:	4b09      	ldr	r3, [pc, #36]	; (403af8 <__swbuf_r+0xa0>)
  403ad2:	429c      	cmp	r4, r3
  403ad4:	bf08      	it	eq
  403ad6:	68ec      	ldreq	r4, [r5, #12]
  403ad8:	e7cb      	b.n	403a72 <__swbuf_r+0x1a>
  403ada:	4621      	mov	r1, r4
  403adc:	4628      	mov	r0, r5
  403ade:	f000 f81f 	bl	403b20 <__swsetup_r>
  403ae2:	2800      	cmp	r0, #0
  403ae4:	d0cc      	beq.n	403a80 <__swbuf_r+0x28>
  403ae6:	f04f 37ff 	mov.w	r7, #4294967295
  403aea:	4638      	mov	r0, r7
  403aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403aee:	bf00      	nop
  403af0:	00404904 	.word	0x00404904
  403af4:	00404924 	.word	0x00404924
  403af8:	004048e4 	.word	0x004048e4

00403afc <_write_r>:
  403afc:	b538      	push	{r3, r4, r5, lr}
  403afe:	4c07      	ldr	r4, [pc, #28]	; (403b1c <_write_r+0x20>)
  403b00:	4605      	mov	r5, r0
  403b02:	4608      	mov	r0, r1
  403b04:	4611      	mov	r1, r2
  403b06:	2200      	movs	r2, #0
  403b08:	6022      	str	r2, [r4, #0]
  403b0a:	461a      	mov	r2, r3
  403b0c:	f7fd fc16 	bl	40133c <_write>
  403b10:	1c43      	adds	r3, r0, #1
  403b12:	d102      	bne.n	403b1a <_write_r+0x1e>
  403b14:	6823      	ldr	r3, [r4, #0]
  403b16:	b103      	cbz	r3, 403b1a <_write_r+0x1e>
  403b18:	602b      	str	r3, [r5, #0]
  403b1a:	bd38      	pop	{r3, r4, r5, pc}
  403b1c:	204002dc 	.word	0x204002dc

00403b20 <__swsetup_r>:
  403b20:	4b32      	ldr	r3, [pc, #200]	; (403bec <__swsetup_r+0xcc>)
  403b22:	b570      	push	{r4, r5, r6, lr}
  403b24:	681d      	ldr	r5, [r3, #0]
  403b26:	4606      	mov	r6, r0
  403b28:	460c      	mov	r4, r1
  403b2a:	b125      	cbz	r5, 403b36 <__swsetup_r+0x16>
  403b2c:	69ab      	ldr	r3, [r5, #24]
  403b2e:	b913      	cbnz	r3, 403b36 <__swsetup_r+0x16>
  403b30:	4628      	mov	r0, r5
  403b32:	f7ff f91d 	bl	402d70 <__sinit>
  403b36:	4b2e      	ldr	r3, [pc, #184]	; (403bf0 <__swsetup_r+0xd0>)
  403b38:	429c      	cmp	r4, r3
  403b3a:	d10f      	bne.n	403b5c <__swsetup_r+0x3c>
  403b3c:	686c      	ldr	r4, [r5, #4]
  403b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b42:	b29a      	uxth	r2, r3
  403b44:	0715      	lsls	r5, r2, #28
  403b46:	d42c      	bmi.n	403ba2 <__swsetup_r+0x82>
  403b48:	06d0      	lsls	r0, r2, #27
  403b4a:	d411      	bmi.n	403b70 <__swsetup_r+0x50>
  403b4c:	2209      	movs	r2, #9
  403b4e:	6032      	str	r2, [r6, #0]
  403b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403b54:	81a3      	strh	r3, [r4, #12]
  403b56:	f04f 30ff 	mov.w	r0, #4294967295
  403b5a:	bd70      	pop	{r4, r5, r6, pc}
  403b5c:	4b25      	ldr	r3, [pc, #148]	; (403bf4 <__swsetup_r+0xd4>)
  403b5e:	429c      	cmp	r4, r3
  403b60:	d101      	bne.n	403b66 <__swsetup_r+0x46>
  403b62:	68ac      	ldr	r4, [r5, #8]
  403b64:	e7eb      	b.n	403b3e <__swsetup_r+0x1e>
  403b66:	4b24      	ldr	r3, [pc, #144]	; (403bf8 <__swsetup_r+0xd8>)
  403b68:	429c      	cmp	r4, r3
  403b6a:	bf08      	it	eq
  403b6c:	68ec      	ldreq	r4, [r5, #12]
  403b6e:	e7e6      	b.n	403b3e <__swsetup_r+0x1e>
  403b70:	0751      	lsls	r1, r2, #29
  403b72:	d512      	bpl.n	403b9a <__swsetup_r+0x7a>
  403b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403b76:	b141      	cbz	r1, 403b8a <__swsetup_r+0x6a>
  403b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403b7c:	4299      	cmp	r1, r3
  403b7e:	d002      	beq.n	403b86 <__swsetup_r+0x66>
  403b80:	4630      	mov	r0, r6
  403b82:	f7ff fd2b 	bl	4035dc <_free_r>
  403b86:	2300      	movs	r3, #0
  403b88:	6363      	str	r3, [r4, #52]	; 0x34
  403b8a:	89a3      	ldrh	r3, [r4, #12]
  403b8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  403b90:	81a3      	strh	r3, [r4, #12]
  403b92:	2300      	movs	r3, #0
  403b94:	6063      	str	r3, [r4, #4]
  403b96:	6923      	ldr	r3, [r4, #16]
  403b98:	6023      	str	r3, [r4, #0]
  403b9a:	89a3      	ldrh	r3, [r4, #12]
  403b9c:	f043 0308 	orr.w	r3, r3, #8
  403ba0:	81a3      	strh	r3, [r4, #12]
  403ba2:	6923      	ldr	r3, [r4, #16]
  403ba4:	b94b      	cbnz	r3, 403bba <__swsetup_r+0x9a>
  403ba6:	89a3      	ldrh	r3, [r4, #12]
  403ba8:	f403 7320 	and.w	r3, r3, #640	; 0x280
  403bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403bb0:	d003      	beq.n	403bba <__swsetup_r+0x9a>
  403bb2:	4621      	mov	r1, r4
  403bb4:	4630      	mov	r0, r6
  403bb6:	f7ff f997 	bl	402ee8 <__smakebuf_r>
  403bba:	89a2      	ldrh	r2, [r4, #12]
  403bbc:	f012 0301 	ands.w	r3, r2, #1
  403bc0:	d00c      	beq.n	403bdc <__swsetup_r+0xbc>
  403bc2:	2300      	movs	r3, #0
  403bc4:	60a3      	str	r3, [r4, #8]
  403bc6:	6963      	ldr	r3, [r4, #20]
  403bc8:	425b      	negs	r3, r3
  403bca:	61a3      	str	r3, [r4, #24]
  403bcc:	6923      	ldr	r3, [r4, #16]
  403bce:	b953      	cbnz	r3, 403be6 <__swsetup_r+0xc6>
  403bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403bd4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  403bd8:	d1ba      	bne.n	403b50 <__swsetup_r+0x30>
  403bda:	bd70      	pop	{r4, r5, r6, pc}
  403bdc:	0792      	lsls	r2, r2, #30
  403bde:	bf58      	it	pl
  403be0:	6963      	ldrpl	r3, [r4, #20]
  403be2:	60a3      	str	r3, [r4, #8]
  403be4:	e7f2      	b.n	403bcc <__swsetup_r+0xac>
  403be6:	2000      	movs	r0, #0
  403be8:	e7f7      	b.n	403bda <__swsetup_r+0xba>
  403bea:	bf00      	nop
  403bec:	20400000 	.word	0x20400000
  403bf0:	00404904 	.word	0x00404904
  403bf4:	00404924 	.word	0x00404924
  403bf8:	004048e4 	.word	0x004048e4

00403bfc <_close_r>:
  403bfc:	b538      	push	{r3, r4, r5, lr}
  403bfe:	4c06      	ldr	r4, [pc, #24]	; (403c18 <_close_r+0x1c>)
  403c00:	2300      	movs	r3, #0
  403c02:	4605      	mov	r5, r0
  403c04:	4608      	mov	r0, r1
  403c06:	6023      	str	r3, [r4, #0]
  403c08:	f7fc feb0 	bl	40096c <_close>
  403c0c:	1c43      	adds	r3, r0, #1
  403c0e:	d102      	bne.n	403c16 <_close_r+0x1a>
  403c10:	6823      	ldr	r3, [r4, #0]
  403c12:	b103      	cbz	r3, 403c16 <_close_r+0x1a>
  403c14:	602b      	str	r3, [r5, #0]
  403c16:	bd38      	pop	{r3, r4, r5, pc}
  403c18:	204002dc 	.word	0x204002dc

00403c1c <_fstat_r>:
  403c1c:	b538      	push	{r3, r4, r5, lr}
  403c1e:	4c07      	ldr	r4, [pc, #28]	; (403c3c <_fstat_r+0x20>)
  403c20:	2300      	movs	r3, #0
  403c22:	4605      	mov	r5, r0
  403c24:	4608      	mov	r0, r1
  403c26:	4611      	mov	r1, r2
  403c28:	6023      	str	r3, [r4, #0]
  403c2a:	f7fc fea2 	bl	400972 <_fstat>
  403c2e:	1c43      	adds	r3, r0, #1
  403c30:	d102      	bne.n	403c38 <_fstat_r+0x1c>
  403c32:	6823      	ldr	r3, [r4, #0]
  403c34:	b103      	cbz	r3, 403c38 <_fstat_r+0x1c>
  403c36:	602b      	str	r3, [r5, #0]
  403c38:	bd38      	pop	{r3, r4, r5, pc}
  403c3a:	bf00      	nop
  403c3c:	204002dc 	.word	0x204002dc

00403c40 <_isatty_r>:
  403c40:	b538      	push	{r3, r4, r5, lr}
  403c42:	4c06      	ldr	r4, [pc, #24]	; (403c5c <_isatty_r+0x1c>)
  403c44:	2300      	movs	r3, #0
  403c46:	4605      	mov	r5, r0
  403c48:	4608      	mov	r0, r1
  403c4a:	6023      	str	r3, [r4, #0]
  403c4c:	f7fc fe96 	bl	40097c <_isatty>
  403c50:	1c43      	adds	r3, r0, #1
  403c52:	d102      	bne.n	403c5a <_isatty_r+0x1a>
  403c54:	6823      	ldr	r3, [r4, #0]
  403c56:	b103      	cbz	r3, 403c5a <_isatty_r+0x1a>
  403c58:	602b      	str	r3, [r5, #0]
  403c5a:	bd38      	pop	{r3, r4, r5, pc}
  403c5c:	204002dc 	.word	0x204002dc

00403c60 <_lseek_r>:
  403c60:	b538      	push	{r3, r4, r5, lr}
  403c62:	4c07      	ldr	r4, [pc, #28]	; (403c80 <_lseek_r+0x20>)
  403c64:	4605      	mov	r5, r0
  403c66:	4608      	mov	r0, r1
  403c68:	4611      	mov	r1, r2
  403c6a:	2200      	movs	r2, #0
  403c6c:	6022      	str	r2, [r4, #0]
  403c6e:	461a      	mov	r2, r3
  403c70:	f7fc fe86 	bl	400980 <_lseek>
  403c74:	1c43      	adds	r3, r0, #1
  403c76:	d102      	bne.n	403c7e <_lseek_r+0x1e>
  403c78:	6823      	ldr	r3, [r4, #0]
  403c7a:	b103      	cbz	r3, 403c7e <_lseek_r+0x1e>
  403c7c:	602b      	str	r3, [r5, #0]
  403c7e:	bd38      	pop	{r3, r4, r5, pc}
  403c80:	204002dc 	.word	0x204002dc

00403c84 <__ascii_mbtowc>:
  403c84:	b082      	sub	sp, #8
  403c86:	b901      	cbnz	r1, 403c8a <__ascii_mbtowc+0x6>
  403c88:	a901      	add	r1, sp, #4
  403c8a:	b142      	cbz	r2, 403c9e <__ascii_mbtowc+0x1a>
  403c8c:	b14b      	cbz	r3, 403ca2 <__ascii_mbtowc+0x1e>
  403c8e:	7813      	ldrb	r3, [r2, #0]
  403c90:	600b      	str	r3, [r1, #0]
  403c92:	7812      	ldrb	r2, [r2, #0]
  403c94:	1c10      	adds	r0, r2, #0
  403c96:	bf18      	it	ne
  403c98:	2001      	movne	r0, #1
  403c9a:	b002      	add	sp, #8
  403c9c:	4770      	bx	lr
  403c9e:	4610      	mov	r0, r2
  403ca0:	e7fb      	b.n	403c9a <__ascii_mbtowc+0x16>
  403ca2:	f06f 0001 	mvn.w	r0, #1
  403ca6:	e7f8      	b.n	403c9a <__ascii_mbtowc+0x16>

00403ca8 <__malloc_lock>:
  403ca8:	4770      	bx	lr

00403caa <__malloc_unlock>:
  403caa:	4770      	bx	lr

00403cac <_read_r>:
  403cac:	b538      	push	{r3, r4, r5, lr}
  403cae:	4c07      	ldr	r4, [pc, #28]	; (403ccc <_read_r+0x20>)
  403cb0:	4605      	mov	r5, r0
  403cb2:	4608      	mov	r0, r1
  403cb4:	4611      	mov	r1, r2
  403cb6:	2200      	movs	r2, #0
  403cb8:	6022      	str	r2, [r4, #0]
  403cba:	461a      	mov	r2, r3
  403cbc:	f7fd fb2c 	bl	401318 <_read>
  403cc0:	1c43      	adds	r3, r0, #1
  403cc2:	d102      	bne.n	403cca <_read_r+0x1e>
  403cc4:	6823      	ldr	r3, [r4, #0]
  403cc6:	b103      	cbz	r3, 403cca <_read_r+0x1e>
  403cc8:	602b      	str	r3, [r5, #0]
  403cca:	bd38      	pop	{r3, r4, r5, pc}
  403ccc:	204002dc 	.word	0x204002dc

00403cd0 <__ascii_wctomb>:
  403cd0:	b149      	cbz	r1, 403ce6 <__ascii_wctomb+0x16>
  403cd2:	2aff      	cmp	r2, #255	; 0xff
  403cd4:	bf85      	ittet	hi
  403cd6:	238a      	movhi	r3, #138	; 0x8a
  403cd8:	6003      	strhi	r3, [r0, #0]
  403cda:	700a      	strbls	r2, [r1, #0]
  403cdc:	f04f 30ff 	movhi.w	r0, #4294967295
  403ce0:	bf98      	it	ls
  403ce2:	2001      	movls	r0, #1
  403ce4:	4770      	bx	lr
  403ce6:	4608      	mov	r0, r1
  403ce8:	4770      	bx	lr
	...

00403cec <__aeabi_drsub>:
  403cec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403cf0:	e002      	b.n	403cf8 <__adddf3>
  403cf2:	bf00      	nop

00403cf4 <__aeabi_dsub>:
  403cf4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403cf8 <__adddf3>:
  403cf8:	b530      	push	{r4, r5, lr}
  403cfa:	ea4f 0441 	mov.w	r4, r1, lsl #1
  403cfe:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403d02:	ea94 0f05 	teq	r4, r5
  403d06:	bf08      	it	eq
  403d08:	ea90 0f02 	teqeq	r0, r2
  403d0c:	bf1f      	itttt	ne
  403d0e:	ea54 0c00 	orrsne.w	ip, r4, r0
  403d12:	ea55 0c02 	orrsne.w	ip, r5, r2
  403d16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403d1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403d1e:	f000 80e2 	beq.w	403ee6 <__adddf3+0x1ee>
  403d22:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403d26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403d2a:	bfb8      	it	lt
  403d2c:	426d      	neglt	r5, r5
  403d2e:	dd0c      	ble.n	403d4a <__adddf3+0x52>
  403d30:	442c      	add	r4, r5
  403d32:	ea80 0202 	eor.w	r2, r0, r2
  403d36:	ea81 0303 	eor.w	r3, r1, r3
  403d3a:	ea82 0000 	eor.w	r0, r2, r0
  403d3e:	ea83 0101 	eor.w	r1, r3, r1
  403d42:	ea80 0202 	eor.w	r2, r0, r2
  403d46:	ea81 0303 	eor.w	r3, r1, r3
  403d4a:	2d36      	cmp	r5, #54	; 0x36
  403d4c:	bf88      	it	hi
  403d4e:	bd30      	pophi	{r4, r5, pc}
  403d50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403d54:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403d58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403d5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403d60:	d002      	beq.n	403d68 <__adddf3+0x70>
  403d62:	4240      	negs	r0, r0
  403d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403d68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403d6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403d70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  403d74:	d002      	beq.n	403d7c <__adddf3+0x84>
  403d76:	4252      	negs	r2, r2
  403d78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403d7c:	ea94 0f05 	teq	r4, r5
  403d80:	f000 80a7 	beq.w	403ed2 <__adddf3+0x1da>
  403d84:	f1a4 0401 	sub.w	r4, r4, #1
  403d88:	f1d5 0e20 	rsbs	lr, r5, #32
  403d8c:	db0d      	blt.n	403daa <__adddf3+0xb2>
  403d8e:	fa02 fc0e 	lsl.w	ip, r2, lr
  403d92:	fa22 f205 	lsr.w	r2, r2, r5
  403d96:	1880      	adds	r0, r0, r2
  403d98:	f141 0100 	adc.w	r1, r1, #0
  403d9c:	fa03 f20e 	lsl.w	r2, r3, lr
  403da0:	1880      	adds	r0, r0, r2
  403da2:	fa43 f305 	asr.w	r3, r3, r5
  403da6:	4159      	adcs	r1, r3
  403da8:	e00e      	b.n	403dc8 <__adddf3+0xd0>
  403daa:	f1a5 0520 	sub.w	r5, r5, #32
  403dae:	f10e 0e20 	add.w	lr, lr, #32
  403db2:	2a01      	cmp	r2, #1
  403db4:	fa03 fc0e 	lsl.w	ip, r3, lr
  403db8:	bf28      	it	cs
  403dba:	f04c 0c02 	orrcs.w	ip, ip, #2
  403dbe:	fa43 f305 	asr.w	r3, r3, r5
  403dc2:	18c0      	adds	r0, r0, r3
  403dc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403dc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403dcc:	d507      	bpl.n	403dde <__adddf3+0xe6>
  403dce:	f04f 0e00 	mov.w	lr, #0
  403dd2:	f1dc 0c00 	rsbs	ip, ip, #0
  403dd6:	eb7e 0000 	sbcs.w	r0, lr, r0
  403dda:	eb6e 0101 	sbc.w	r1, lr, r1
  403dde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403de2:	d31b      	bcc.n	403e1c <__adddf3+0x124>
  403de4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403de8:	d30c      	bcc.n	403e04 <__adddf3+0x10c>
  403dea:	0849      	lsrs	r1, r1, #1
  403dec:	ea5f 0030 	movs.w	r0, r0, rrx
  403df0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403df4:	f104 0401 	add.w	r4, r4, #1
  403df8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403dfc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403e00:	f080 809a 	bcs.w	403f38 <__adddf3+0x240>
  403e04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403e08:	bf08      	it	eq
  403e0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403e0e:	f150 0000 	adcs.w	r0, r0, #0
  403e12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403e16:	ea41 0105 	orr.w	r1, r1, r5
  403e1a:	bd30      	pop	{r4, r5, pc}
  403e1c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403e20:	4140      	adcs	r0, r0
  403e22:	eb41 0101 	adc.w	r1, r1, r1
  403e26:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403e2a:	f1a4 0401 	sub.w	r4, r4, #1
  403e2e:	d1e9      	bne.n	403e04 <__adddf3+0x10c>
  403e30:	f091 0f00 	teq	r1, #0
  403e34:	bf04      	itt	eq
  403e36:	4601      	moveq	r1, r0
  403e38:	2000      	moveq	r0, #0
  403e3a:	fab1 f381 	clz	r3, r1
  403e3e:	bf08      	it	eq
  403e40:	3320      	addeq	r3, #32
  403e42:	f1a3 030b 	sub.w	r3, r3, #11
  403e46:	f1b3 0220 	subs.w	r2, r3, #32
  403e4a:	da0c      	bge.n	403e66 <__adddf3+0x16e>
  403e4c:	320c      	adds	r2, #12
  403e4e:	dd08      	ble.n	403e62 <__adddf3+0x16a>
  403e50:	f102 0c14 	add.w	ip, r2, #20
  403e54:	f1c2 020c 	rsb	r2, r2, #12
  403e58:	fa01 f00c 	lsl.w	r0, r1, ip
  403e5c:	fa21 f102 	lsr.w	r1, r1, r2
  403e60:	e00c      	b.n	403e7c <__adddf3+0x184>
  403e62:	f102 0214 	add.w	r2, r2, #20
  403e66:	bfd8      	it	le
  403e68:	f1c2 0c20 	rsble	ip, r2, #32
  403e6c:	fa01 f102 	lsl.w	r1, r1, r2
  403e70:	fa20 fc0c 	lsr.w	ip, r0, ip
  403e74:	bfdc      	itt	le
  403e76:	ea41 010c 	orrle.w	r1, r1, ip
  403e7a:	4090      	lslle	r0, r2
  403e7c:	1ae4      	subs	r4, r4, r3
  403e7e:	bfa2      	ittt	ge
  403e80:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403e84:	4329      	orrge	r1, r5
  403e86:	bd30      	popge	{r4, r5, pc}
  403e88:	ea6f 0404 	mvn.w	r4, r4
  403e8c:	3c1f      	subs	r4, #31
  403e8e:	da1c      	bge.n	403eca <__adddf3+0x1d2>
  403e90:	340c      	adds	r4, #12
  403e92:	dc0e      	bgt.n	403eb2 <__adddf3+0x1ba>
  403e94:	f104 0414 	add.w	r4, r4, #20
  403e98:	f1c4 0220 	rsb	r2, r4, #32
  403e9c:	fa20 f004 	lsr.w	r0, r0, r4
  403ea0:	fa01 f302 	lsl.w	r3, r1, r2
  403ea4:	ea40 0003 	orr.w	r0, r0, r3
  403ea8:	fa21 f304 	lsr.w	r3, r1, r4
  403eac:	ea45 0103 	orr.w	r1, r5, r3
  403eb0:	bd30      	pop	{r4, r5, pc}
  403eb2:	f1c4 040c 	rsb	r4, r4, #12
  403eb6:	f1c4 0220 	rsb	r2, r4, #32
  403eba:	fa20 f002 	lsr.w	r0, r0, r2
  403ebe:	fa01 f304 	lsl.w	r3, r1, r4
  403ec2:	ea40 0003 	orr.w	r0, r0, r3
  403ec6:	4629      	mov	r1, r5
  403ec8:	bd30      	pop	{r4, r5, pc}
  403eca:	fa21 f004 	lsr.w	r0, r1, r4
  403ece:	4629      	mov	r1, r5
  403ed0:	bd30      	pop	{r4, r5, pc}
  403ed2:	f094 0f00 	teq	r4, #0
  403ed6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403eda:	bf06      	itte	eq
  403edc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403ee0:	3401      	addeq	r4, #1
  403ee2:	3d01      	subne	r5, #1
  403ee4:	e74e      	b.n	403d84 <__adddf3+0x8c>
  403ee6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403eea:	bf18      	it	ne
  403eec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403ef0:	d029      	beq.n	403f46 <__adddf3+0x24e>
  403ef2:	ea94 0f05 	teq	r4, r5
  403ef6:	bf08      	it	eq
  403ef8:	ea90 0f02 	teqeq	r0, r2
  403efc:	d005      	beq.n	403f0a <__adddf3+0x212>
  403efe:	ea54 0c00 	orrs.w	ip, r4, r0
  403f02:	bf04      	itt	eq
  403f04:	4619      	moveq	r1, r3
  403f06:	4610      	moveq	r0, r2
  403f08:	bd30      	pop	{r4, r5, pc}
  403f0a:	ea91 0f03 	teq	r1, r3
  403f0e:	bf1e      	ittt	ne
  403f10:	2100      	movne	r1, #0
  403f12:	2000      	movne	r0, #0
  403f14:	bd30      	popne	{r4, r5, pc}
  403f16:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403f1a:	d105      	bne.n	403f28 <__adddf3+0x230>
  403f1c:	0040      	lsls	r0, r0, #1
  403f1e:	4149      	adcs	r1, r1
  403f20:	bf28      	it	cs
  403f22:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403f26:	bd30      	pop	{r4, r5, pc}
  403f28:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403f2c:	bf3c      	itt	cc
  403f2e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403f32:	bd30      	popcc	{r4, r5, pc}
  403f34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403f38:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403f3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403f40:	f04f 0000 	mov.w	r0, #0
  403f44:	bd30      	pop	{r4, r5, pc}
  403f46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403f4a:	bf1a      	itte	ne
  403f4c:	4619      	movne	r1, r3
  403f4e:	4610      	movne	r0, r2
  403f50:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403f54:	bf1c      	itt	ne
  403f56:	460b      	movne	r3, r1
  403f58:	4602      	movne	r2, r0
  403f5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403f5e:	bf06      	itte	eq
  403f60:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403f64:	ea91 0f03 	teqeq	r1, r3
  403f68:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403f6c:	bd30      	pop	{r4, r5, pc}
  403f6e:	bf00      	nop

00403f70 <__aeabi_ui2d>:
  403f70:	f090 0f00 	teq	r0, #0
  403f74:	bf04      	itt	eq
  403f76:	2100      	moveq	r1, #0
  403f78:	4770      	bxeq	lr
  403f7a:	b530      	push	{r4, r5, lr}
  403f7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403f80:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403f84:	f04f 0500 	mov.w	r5, #0
  403f88:	f04f 0100 	mov.w	r1, #0
  403f8c:	e750      	b.n	403e30 <__adddf3+0x138>
  403f8e:	bf00      	nop

00403f90 <__aeabi_i2d>:
  403f90:	f090 0f00 	teq	r0, #0
  403f94:	bf04      	itt	eq
  403f96:	2100      	moveq	r1, #0
  403f98:	4770      	bxeq	lr
  403f9a:	b530      	push	{r4, r5, lr}
  403f9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403fa0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403fa4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403fa8:	bf48      	it	mi
  403faa:	4240      	negmi	r0, r0
  403fac:	f04f 0100 	mov.w	r1, #0
  403fb0:	e73e      	b.n	403e30 <__adddf3+0x138>
  403fb2:	bf00      	nop

00403fb4 <__aeabi_f2d>:
  403fb4:	0042      	lsls	r2, r0, #1
  403fb6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403fba:	ea4f 0131 	mov.w	r1, r1, rrx
  403fbe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403fc2:	bf1f      	itttt	ne
  403fc4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403fc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403fcc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403fd0:	4770      	bxne	lr
  403fd2:	f092 0f00 	teq	r2, #0
  403fd6:	bf14      	ite	ne
  403fd8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403fdc:	4770      	bxeq	lr
  403fde:	b530      	push	{r4, r5, lr}
  403fe0:	f44f 7460 	mov.w	r4, #896	; 0x380
  403fe4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403fe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403fec:	e720      	b.n	403e30 <__adddf3+0x138>
  403fee:	bf00      	nop

00403ff0 <__aeabi_ul2d>:
  403ff0:	ea50 0201 	orrs.w	r2, r0, r1
  403ff4:	bf08      	it	eq
  403ff6:	4770      	bxeq	lr
  403ff8:	b530      	push	{r4, r5, lr}
  403ffa:	f04f 0500 	mov.w	r5, #0
  403ffe:	e00a      	b.n	404016 <__aeabi_l2d+0x16>

00404000 <__aeabi_l2d>:
  404000:	ea50 0201 	orrs.w	r2, r0, r1
  404004:	bf08      	it	eq
  404006:	4770      	bxeq	lr
  404008:	b530      	push	{r4, r5, lr}
  40400a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40400e:	d502      	bpl.n	404016 <__aeabi_l2d+0x16>
  404010:	4240      	negs	r0, r0
  404012:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404016:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40401a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40401e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  404022:	f43f aedc 	beq.w	403dde <__adddf3+0xe6>
  404026:	f04f 0203 	mov.w	r2, #3
  40402a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40402e:	bf18      	it	ne
  404030:	3203      	addne	r2, #3
  404032:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404036:	bf18      	it	ne
  404038:	3203      	addne	r2, #3
  40403a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40403e:	f1c2 0320 	rsb	r3, r2, #32
  404042:	fa00 fc03 	lsl.w	ip, r0, r3
  404046:	fa20 f002 	lsr.w	r0, r0, r2
  40404a:	fa01 fe03 	lsl.w	lr, r1, r3
  40404e:	ea40 000e 	orr.w	r0, r0, lr
  404052:	fa21 f102 	lsr.w	r1, r1, r2
  404056:	4414      	add	r4, r2
  404058:	e6c1      	b.n	403dde <__adddf3+0xe6>
  40405a:	bf00      	nop

0040405c <__aeabi_dmul>:
  40405c:	b570      	push	{r4, r5, r6, lr}
  40405e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404062:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404066:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40406a:	bf1d      	ittte	ne
  40406c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404070:	ea94 0f0c 	teqne	r4, ip
  404074:	ea95 0f0c 	teqne	r5, ip
  404078:	f000 f8de 	bleq	404238 <__aeabi_dmul+0x1dc>
  40407c:	442c      	add	r4, r5
  40407e:	ea81 0603 	eor.w	r6, r1, r3
  404082:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  404086:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40408a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40408e:	bf18      	it	ne
  404090:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  404094:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404098:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40409c:	d038      	beq.n	404110 <__aeabi_dmul+0xb4>
  40409e:	fba0 ce02 	umull	ip, lr, r0, r2
  4040a2:	f04f 0500 	mov.w	r5, #0
  4040a6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4040aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4040ae:	fbe0 e503 	umlal	lr, r5, r0, r3
  4040b2:	f04f 0600 	mov.w	r6, #0
  4040b6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4040ba:	f09c 0f00 	teq	ip, #0
  4040be:	bf18      	it	ne
  4040c0:	f04e 0e01 	orrne.w	lr, lr, #1
  4040c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4040c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4040cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4040d0:	d204      	bcs.n	4040dc <__aeabi_dmul+0x80>
  4040d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4040d6:	416d      	adcs	r5, r5
  4040d8:	eb46 0606 	adc.w	r6, r6, r6
  4040dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4040e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4040e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4040e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4040ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4040f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4040f4:	bf88      	it	hi
  4040f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4040fa:	d81e      	bhi.n	40413a <__aeabi_dmul+0xde>
  4040fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  404100:	bf08      	it	eq
  404102:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  404106:	f150 0000 	adcs.w	r0, r0, #0
  40410a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40410e:	bd70      	pop	{r4, r5, r6, pc}
  404110:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  404114:	ea46 0101 	orr.w	r1, r6, r1
  404118:	ea40 0002 	orr.w	r0, r0, r2
  40411c:	ea81 0103 	eor.w	r1, r1, r3
  404120:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  404124:	bfc2      	ittt	gt
  404126:	ebd4 050c 	rsbsgt	r5, r4, ip
  40412a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40412e:	bd70      	popgt	{r4, r5, r6, pc}
  404130:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404134:	f04f 0e00 	mov.w	lr, #0
  404138:	3c01      	subs	r4, #1
  40413a:	f300 80ab 	bgt.w	404294 <__aeabi_dmul+0x238>
  40413e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  404142:	bfde      	ittt	le
  404144:	2000      	movle	r0, #0
  404146:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40414a:	bd70      	pople	{r4, r5, r6, pc}
  40414c:	f1c4 0400 	rsb	r4, r4, #0
  404150:	3c20      	subs	r4, #32
  404152:	da35      	bge.n	4041c0 <__aeabi_dmul+0x164>
  404154:	340c      	adds	r4, #12
  404156:	dc1b      	bgt.n	404190 <__aeabi_dmul+0x134>
  404158:	f104 0414 	add.w	r4, r4, #20
  40415c:	f1c4 0520 	rsb	r5, r4, #32
  404160:	fa00 f305 	lsl.w	r3, r0, r5
  404164:	fa20 f004 	lsr.w	r0, r0, r4
  404168:	fa01 f205 	lsl.w	r2, r1, r5
  40416c:	ea40 0002 	orr.w	r0, r0, r2
  404170:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404174:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404178:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40417c:	fa21 f604 	lsr.w	r6, r1, r4
  404180:	eb42 0106 	adc.w	r1, r2, r6
  404184:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404188:	bf08      	it	eq
  40418a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40418e:	bd70      	pop	{r4, r5, r6, pc}
  404190:	f1c4 040c 	rsb	r4, r4, #12
  404194:	f1c4 0520 	rsb	r5, r4, #32
  404198:	fa00 f304 	lsl.w	r3, r0, r4
  40419c:	fa20 f005 	lsr.w	r0, r0, r5
  4041a0:	fa01 f204 	lsl.w	r2, r1, r4
  4041a4:	ea40 0002 	orr.w	r0, r0, r2
  4041a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4041ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4041b0:	f141 0100 	adc.w	r1, r1, #0
  4041b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4041b8:	bf08      	it	eq
  4041ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4041be:	bd70      	pop	{r4, r5, r6, pc}
  4041c0:	f1c4 0520 	rsb	r5, r4, #32
  4041c4:	fa00 f205 	lsl.w	r2, r0, r5
  4041c8:	ea4e 0e02 	orr.w	lr, lr, r2
  4041cc:	fa20 f304 	lsr.w	r3, r0, r4
  4041d0:	fa01 f205 	lsl.w	r2, r1, r5
  4041d4:	ea43 0302 	orr.w	r3, r3, r2
  4041d8:	fa21 f004 	lsr.w	r0, r1, r4
  4041dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4041e0:	fa21 f204 	lsr.w	r2, r1, r4
  4041e4:	ea20 0002 	bic.w	r0, r0, r2
  4041e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4041ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4041f0:	bf08      	it	eq
  4041f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4041f6:	bd70      	pop	{r4, r5, r6, pc}
  4041f8:	f094 0f00 	teq	r4, #0
  4041fc:	d10f      	bne.n	40421e <__aeabi_dmul+0x1c2>
  4041fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  404202:	0040      	lsls	r0, r0, #1
  404204:	eb41 0101 	adc.w	r1, r1, r1
  404208:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40420c:	bf08      	it	eq
  40420e:	3c01      	subeq	r4, #1
  404210:	d0f7      	beq.n	404202 <__aeabi_dmul+0x1a6>
  404212:	ea41 0106 	orr.w	r1, r1, r6
  404216:	f095 0f00 	teq	r5, #0
  40421a:	bf18      	it	ne
  40421c:	4770      	bxne	lr
  40421e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  404222:	0052      	lsls	r2, r2, #1
  404224:	eb43 0303 	adc.w	r3, r3, r3
  404228:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40422c:	bf08      	it	eq
  40422e:	3d01      	subeq	r5, #1
  404230:	d0f7      	beq.n	404222 <__aeabi_dmul+0x1c6>
  404232:	ea43 0306 	orr.w	r3, r3, r6
  404236:	4770      	bx	lr
  404238:	ea94 0f0c 	teq	r4, ip
  40423c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404240:	bf18      	it	ne
  404242:	ea95 0f0c 	teqne	r5, ip
  404246:	d00c      	beq.n	404262 <__aeabi_dmul+0x206>
  404248:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40424c:	bf18      	it	ne
  40424e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404252:	d1d1      	bne.n	4041f8 <__aeabi_dmul+0x19c>
  404254:	ea81 0103 	eor.w	r1, r1, r3
  404258:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40425c:	f04f 0000 	mov.w	r0, #0
  404260:	bd70      	pop	{r4, r5, r6, pc}
  404262:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404266:	bf06      	itte	eq
  404268:	4610      	moveq	r0, r2
  40426a:	4619      	moveq	r1, r3
  40426c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404270:	d019      	beq.n	4042a6 <__aeabi_dmul+0x24a>
  404272:	ea94 0f0c 	teq	r4, ip
  404276:	d102      	bne.n	40427e <__aeabi_dmul+0x222>
  404278:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40427c:	d113      	bne.n	4042a6 <__aeabi_dmul+0x24a>
  40427e:	ea95 0f0c 	teq	r5, ip
  404282:	d105      	bne.n	404290 <__aeabi_dmul+0x234>
  404284:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404288:	bf1c      	itt	ne
  40428a:	4610      	movne	r0, r2
  40428c:	4619      	movne	r1, r3
  40428e:	d10a      	bne.n	4042a6 <__aeabi_dmul+0x24a>
  404290:	ea81 0103 	eor.w	r1, r1, r3
  404294:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404298:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40429c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4042a0:	f04f 0000 	mov.w	r0, #0
  4042a4:	bd70      	pop	{r4, r5, r6, pc}
  4042a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4042aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4042ae:	bd70      	pop	{r4, r5, r6, pc}

004042b0 <__aeabi_ddiv>:
  4042b0:	b570      	push	{r4, r5, r6, lr}
  4042b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4042b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4042ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4042be:	bf1d      	ittte	ne
  4042c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4042c4:	ea94 0f0c 	teqne	r4, ip
  4042c8:	ea95 0f0c 	teqne	r5, ip
  4042cc:	f000 f8a7 	bleq	40441e <__aeabi_ddiv+0x16e>
  4042d0:	eba4 0405 	sub.w	r4, r4, r5
  4042d4:	ea81 0e03 	eor.w	lr, r1, r3
  4042d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4042dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4042e0:	f000 8088 	beq.w	4043f4 <__aeabi_ddiv+0x144>
  4042e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4042e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4042ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4042f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4042f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4042f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4042fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  404300:	ea4f 2600 	mov.w	r6, r0, lsl #8
  404304:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  404308:	429d      	cmp	r5, r3
  40430a:	bf08      	it	eq
  40430c:	4296      	cmpeq	r6, r2
  40430e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  404312:	f504 7440 	add.w	r4, r4, #768	; 0x300
  404316:	d202      	bcs.n	40431e <__aeabi_ddiv+0x6e>
  404318:	085b      	lsrs	r3, r3, #1
  40431a:	ea4f 0232 	mov.w	r2, r2, rrx
  40431e:	1ab6      	subs	r6, r6, r2
  404320:	eb65 0503 	sbc.w	r5, r5, r3
  404324:	085b      	lsrs	r3, r3, #1
  404326:	ea4f 0232 	mov.w	r2, r2, rrx
  40432a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40432e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404332:	ebb6 0e02 	subs.w	lr, r6, r2
  404336:	eb75 0e03 	sbcs.w	lr, r5, r3
  40433a:	bf22      	ittt	cs
  40433c:	1ab6      	subcs	r6, r6, r2
  40433e:	4675      	movcs	r5, lr
  404340:	ea40 000c 	orrcs.w	r0, r0, ip
  404344:	085b      	lsrs	r3, r3, #1
  404346:	ea4f 0232 	mov.w	r2, r2, rrx
  40434a:	ebb6 0e02 	subs.w	lr, r6, r2
  40434e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404352:	bf22      	ittt	cs
  404354:	1ab6      	subcs	r6, r6, r2
  404356:	4675      	movcs	r5, lr
  404358:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40435c:	085b      	lsrs	r3, r3, #1
  40435e:	ea4f 0232 	mov.w	r2, r2, rrx
  404362:	ebb6 0e02 	subs.w	lr, r6, r2
  404366:	eb75 0e03 	sbcs.w	lr, r5, r3
  40436a:	bf22      	ittt	cs
  40436c:	1ab6      	subcs	r6, r6, r2
  40436e:	4675      	movcs	r5, lr
  404370:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404374:	085b      	lsrs	r3, r3, #1
  404376:	ea4f 0232 	mov.w	r2, r2, rrx
  40437a:	ebb6 0e02 	subs.w	lr, r6, r2
  40437e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404382:	bf22      	ittt	cs
  404384:	1ab6      	subcs	r6, r6, r2
  404386:	4675      	movcs	r5, lr
  404388:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40438c:	ea55 0e06 	orrs.w	lr, r5, r6
  404390:	d018      	beq.n	4043c4 <__aeabi_ddiv+0x114>
  404392:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404396:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40439a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40439e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4043a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4043a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4043aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4043ae:	d1c0      	bne.n	404332 <__aeabi_ddiv+0x82>
  4043b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4043b4:	d10b      	bne.n	4043ce <__aeabi_ddiv+0x11e>
  4043b6:	ea41 0100 	orr.w	r1, r1, r0
  4043ba:	f04f 0000 	mov.w	r0, #0
  4043be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4043c2:	e7b6      	b.n	404332 <__aeabi_ddiv+0x82>
  4043c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4043c8:	bf04      	itt	eq
  4043ca:	4301      	orreq	r1, r0
  4043cc:	2000      	moveq	r0, #0
  4043ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4043d2:	bf88      	it	hi
  4043d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4043d8:	f63f aeaf 	bhi.w	40413a <__aeabi_dmul+0xde>
  4043dc:	ebb5 0c03 	subs.w	ip, r5, r3
  4043e0:	bf04      	itt	eq
  4043e2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4043e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4043ea:	f150 0000 	adcs.w	r0, r0, #0
  4043ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4043f2:	bd70      	pop	{r4, r5, r6, pc}
  4043f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4043f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4043fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  404400:	bfc2      	ittt	gt
  404402:	ebd4 050c 	rsbsgt	r5, r4, ip
  404406:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40440a:	bd70      	popgt	{r4, r5, r6, pc}
  40440c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404410:	f04f 0e00 	mov.w	lr, #0
  404414:	3c01      	subs	r4, #1
  404416:	e690      	b.n	40413a <__aeabi_dmul+0xde>
  404418:	ea45 0e06 	orr.w	lr, r5, r6
  40441c:	e68d      	b.n	40413a <__aeabi_dmul+0xde>
  40441e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404422:	ea94 0f0c 	teq	r4, ip
  404426:	bf08      	it	eq
  404428:	ea95 0f0c 	teqeq	r5, ip
  40442c:	f43f af3b 	beq.w	4042a6 <__aeabi_dmul+0x24a>
  404430:	ea94 0f0c 	teq	r4, ip
  404434:	d10a      	bne.n	40444c <__aeabi_ddiv+0x19c>
  404436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40443a:	f47f af34 	bne.w	4042a6 <__aeabi_dmul+0x24a>
  40443e:	ea95 0f0c 	teq	r5, ip
  404442:	f47f af25 	bne.w	404290 <__aeabi_dmul+0x234>
  404446:	4610      	mov	r0, r2
  404448:	4619      	mov	r1, r3
  40444a:	e72c      	b.n	4042a6 <__aeabi_dmul+0x24a>
  40444c:	ea95 0f0c 	teq	r5, ip
  404450:	d106      	bne.n	404460 <__aeabi_ddiv+0x1b0>
  404452:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404456:	f43f aefd 	beq.w	404254 <__aeabi_dmul+0x1f8>
  40445a:	4610      	mov	r0, r2
  40445c:	4619      	mov	r1, r3
  40445e:	e722      	b.n	4042a6 <__aeabi_dmul+0x24a>
  404460:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404464:	bf18      	it	ne
  404466:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40446a:	f47f aec5 	bne.w	4041f8 <__aeabi_dmul+0x19c>
  40446e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  404472:	f47f af0d 	bne.w	404290 <__aeabi_dmul+0x234>
  404476:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40447a:	f47f aeeb 	bne.w	404254 <__aeabi_dmul+0x1f8>
  40447e:	e712      	b.n	4042a6 <__aeabi_dmul+0x24a>

00404480 <__gedf2>:
  404480:	f04f 3cff 	mov.w	ip, #4294967295
  404484:	e006      	b.n	404494 <__cmpdf2+0x4>
  404486:	bf00      	nop

00404488 <__ledf2>:
  404488:	f04f 0c01 	mov.w	ip, #1
  40448c:	e002      	b.n	404494 <__cmpdf2+0x4>
  40448e:	bf00      	nop

00404490 <__cmpdf2>:
  404490:	f04f 0c01 	mov.w	ip, #1
  404494:	f84d cd04 	str.w	ip, [sp, #-4]!
  404498:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40449c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4044a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4044a4:	bf18      	it	ne
  4044a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4044aa:	d01b      	beq.n	4044e4 <__cmpdf2+0x54>
  4044ac:	b001      	add	sp, #4
  4044ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4044b2:	bf0c      	ite	eq
  4044b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4044b8:	ea91 0f03 	teqne	r1, r3
  4044bc:	bf02      	ittt	eq
  4044be:	ea90 0f02 	teqeq	r0, r2
  4044c2:	2000      	moveq	r0, #0
  4044c4:	4770      	bxeq	lr
  4044c6:	f110 0f00 	cmn.w	r0, #0
  4044ca:	ea91 0f03 	teq	r1, r3
  4044ce:	bf58      	it	pl
  4044d0:	4299      	cmppl	r1, r3
  4044d2:	bf08      	it	eq
  4044d4:	4290      	cmpeq	r0, r2
  4044d6:	bf2c      	ite	cs
  4044d8:	17d8      	asrcs	r0, r3, #31
  4044da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4044de:	f040 0001 	orr.w	r0, r0, #1
  4044e2:	4770      	bx	lr
  4044e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4044e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4044ec:	d102      	bne.n	4044f4 <__cmpdf2+0x64>
  4044ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4044f2:	d107      	bne.n	404504 <__cmpdf2+0x74>
  4044f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4044f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4044fc:	d1d6      	bne.n	4044ac <__cmpdf2+0x1c>
  4044fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404502:	d0d3      	beq.n	4044ac <__cmpdf2+0x1c>
  404504:	f85d 0b04 	ldr.w	r0, [sp], #4
  404508:	4770      	bx	lr
  40450a:	bf00      	nop

0040450c <__aeabi_cdrcmple>:
  40450c:	4684      	mov	ip, r0
  40450e:	4610      	mov	r0, r2
  404510:	4662      	mov	r2, ip
  404512:	468c      	mov	ip, r1
  404514:	4619      	mov	r1, r3
  404516:	4663      	mov	r3, ip
  404518:	e000      	b.n	40451c <__aeabi_cdcmpeq>
  40451a:	bf00      	nop

0040451c <__aeabi_cdcmpeq>:
  40451c:	b501      	push	{r0, lr}
  40451e:	f7ff ffb7 	bl	404490 <__cmpdf2>
  404522:	2800      	cmp	r0, #0
  404524:	bf48      	it	mi
  404526:	f110 0f00 	cmnmi.w	r0, #0
  40452a:	bd01      	pop	{r0, pc}

0040452c <__aeabi_dcmpeq>:
  40452c:	f84d ed08 	str.w	lr, [sp, #-8]!
  404530:	f7ff fff4 	bl	40451c <__aeabi_cdcmpeq>
  404534:	bf0c      	ite	eq
  404536:	2001      	moveq	r0, #1
  404538:	2000      	movne	r0, #0
  40453a:	f85d fb08 	ldr.w	pc, [sp], #8
  40453e:	bf00      	nop

00404540 <__aeabi_dcmplt>:
  404540:	f84d ed08 	str.w	lr, [sp, #-8]!
  404544:	f7ff ffea 	bl	40451c <__aeabi_cdcmpeq>
  404548:	bf34      	ite	cc
  40454a:	2001      	movcc	r0, #1
  40454c:	2000      	movcs	r0, #0
  40454e:	f85d fb08 	ldr.w	pc, [sp], #8
  404552:	bf00      	nop

00404554 <__aeabi_dcmple>:
  404554:	f84d ed08 	str.w	lr, [sp, #-8]!
  404558:	f7ff ffe0 	bl	40451c <__aeabi_cdcmpeq>
  40455c:	bf94      	ite	ls
  40455e:	2001      	movls	r0, #1
  404560:	2000      	movhi	r0, #0
  404562:	f85d fb08 	ldr.w	pc, [sp], #8
  404566:	bf00      	nop

00404568 <__aeabi_dcmpge>:
  404568:	f84d ed08 	str.w	lr, [sp, #-8]!
  40456c:	f7ff ffce 	bl	40450c <__aeabi_cdrcmple>
  404570:	bf94      	ite	ls
  404572:	2001      	movls	r0, #1
  404574:	2000      	movhi	r0, #0
  404576:	f85d fb08 	ldr.w	pc, [sp], #8
  40457a:	bf00      	nop

0040457c <__aeabi_dcmpgt>:
  40457c:	f84d ed08 	str.w	lr, [sp, #-8]!
  404580:	f7ff ffc4 	bl	40450c <__aeabi_cdrcmple>
  404584:	bf34      	ite	cc
  404586:	2001      	movcc	r0, #1
  404588:	2000      	movcs	r0, #0
  40458a:	f85d fb08 	ldr.w	pc, [sp], #8
  40458e:	bf00      	nop

00404590 <__aeabi_dcmpun>:
  404590:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404594:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404598:	d102      	bne.n	4045a0 <__aeabi_dcmpun+0x10>
  40459a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40459e:	d10a      	bne.n	4045b6 <__aeabi_dcmpun+0x26>
  4045a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4045a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4045a8:	d102      	bne.n	4045b0 <__aeabi_dcmpun+0x20>
  4045aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4045ae:	d102      	bne.n	4045b6 <__aeabi_dcmpun+0x26>
  4045b0:	f04f 0000 	mov.w	r0, #0
  4045b4:	4770      	bx	lr
  4045b6:	f04f 0001 	mov.w	r0, #1
  4045ba:	4770      	bx	lr

004045bc <__aeabi_d2iz>:
  4045bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4045c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4045c4:	d215      	bcs.n	4045f2 <__aeabi_d2iz+0x36>
  4045c6:	d511      	bpl.n	4045ec <__aeabi_d2iz+0x30>
  4045c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4045cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4045d0:	d912      	bls.n	4045f8 <__aeabi_d2iz+0x3c>
  4045d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4045d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4045da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4045de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4045e2:	fa23 f002 	lsr.w	r0, r3, r2
  4045e6:	bf18      	it	ne
  4045e8:	4240      	negne	r0, r0
  4045ea:	4770      	bx	lr
  4045ec:	f04f 0000 	mov.w	r0, #0
  4045f0:	4770      	bx	lr
  4045f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4045f6:	d105      	bne.n	404604 <__aeabi_d2iz+0x48>
  4045f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4045fc:	bf08      	it	eq
  4045fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  404602:	4770      	bx	lr
  404604:	f04f 0000 	mov.w	r0, #0
  404608:	4770      	bx	lr
  40460a:	bf00      	nop
  40460c:	682f2e2e 	.word	0x682f2e2e
  404610:	732f6c61 	.word	0x732f6c61
  404614:	682f6372 	.word	0x682f6372
  404618:	615f6c61 	.word	0x615f6c61
  40461c:	735f6364 	.word	0x735f6364
  404620:	2e636e79 	.word	0x2e636e79
  404624:	00000063 	.word	0x00000063
  404628:	682f2e2e 	.word	0x682f2e2e
  40462c:	732f6c61 	.word	0x732f6c61
  404630:	682f6372 	.word	0x682f6372
  404634:	695f6c61 	.word	0x695f6c61
  404638:	00632e6f 	.word	0x00632e6f
  40463c:	682f2e2e 	.word	0x682f2e2e
  404640:	732f6c61 	.word	0x732f6c61
  404644:	682f6372 	.word	0x682f6372
  404648:	705f6c61 	.word	0x705f6c61
  40464c:	632e6d77 	.word	0x632e6d77
  404650:	00000000 	.word	0x00000000
  404654:	682f2e2e 	.word	0x682f2e2e
  404658:	732f6c61 	.word	0x732f6c61
  40465c:	682f6372 	.word	0x682f6372
  404660:	755f6c61 	.word	0x755f6c61
  404664:	74726173 	.word	0x74726173
  404668:	6e79735f 	.word	0x6e79735f
  40466c:	00632e63 	.word	0x00632e63

00404670 <_afecs>:
  404670:	00000000 2f843100 03000000 ffffffff     .....1./........
  404680:	0000ffff 00000000 00000000 00000000     ................
  404690:	0000010c 00000000 00000000 00000000     ................
  4046a0:	00000000 00000200 00000200 00000200     ................
  4046b0:	00000200 00000200 00000200 00000200     ................
  4046c0:	00000200 00000200 00000200 00000200     ................
  4046d0:	00000200 00000001 2f843100 03000000     .........1./....
  4046e0:	ffffffff 0000ffff 00000000 00000000     ................
  4046f0:	00000000 0000010c 00000000 00000000     ................
	...
  404708:	00000200 00000200 00000200 00000200     ................
  404718:	00000200 00000200 00000200 00000200     ................
  404728:	00000200 00000200 00000200 00000200     ................
  404738:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  404748:	63656661 0000632e                       afec.c..

00404750 <_ext_irq>:
  404750:	00000000 00000024 00000000 00000000     ....$...........
	...
  40476c:	00000003 00080000 00000000 00000000     ................
	...

00404788 <_pio_irq_n>:
  404788:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  404798:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  4047a8:	00000000                                ....

004047ac <_pwms>:
  4047ac:	40020000 0000001f 00010005 00000001     ...@............
  4047bc:	00000001 000000ff 00000000 00000004     ................
	...
  4047d8:	00000002 00404834 00000000 20400250     ....4H@.....P.@ 
  4047e8:	4005c000 0000003c 00010005 00000001     ...@<...........
  4047f8:	00000001 000000ff 00000000 00000004     ................
	...
  404814:	00000001 00404824 00000000 20400244     ....$H@.....D.@ 

00404824 <_ch_cfg1>:
  404824:	00000000 0000010b 000003e8 00000200     ................

00404834 <_ch_cfg0>:
  404834:	00000000 0000010b 000003e8 00000200     ................
  404844:	00000002 0000010b 000003e8 00000200     ................
  404854:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  404864:	632e6d77 00000000                       wm.c....

0040486c <_usarts>:
  40486c:	00000001 001008c0 000100f4 682f2e2e     ............../h
  40487c:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  40488c:	632e7472 00000000 61796568 0000000a     rt.c....heya....

0040489c <_global_impure_ptr>:
  40489c:	20400004 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  4048ac:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  4048bc:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  4048cc:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  4048dc:	4e614e00 00000000                       .NaN....

004048e4 <__sf_fake_stderr>:
	...

00404904 <__sf_fake_stdin>:
	...

00404924 <__sf_fake_stdout>:
	...

00404948 <__mprec_bigtens>:
  404948:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  404958:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  404968:	7f73bf3c 75154fdd                       <.s..O.u

00404970 <__mprec_tens>:
  404970:	00000000 3ff00000 00000000 40240000     .......?......$@
  404980:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  404990:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4049a0:	00000000 412e8480 00000000 416312d0     .......A......cA
  4049b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4049c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4049d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4049e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4049f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  404a00:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  404a10:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  404a20:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  404a30:	79d99db4 44ea7843                       ...yCx.D

00404a38 <p05.6047>:
  404a38:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  404a48:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  404a58:	5849534f 00002e00                                OSIX...

00404a5f <_ctype_>:
  404a5f:	20202000 20202020 28282020 20282828     .         ((((( 
  404a6f:	20202020 20202020 20202020 20202020                     
  404a7f:	10108820 10101010 10101010 10101010      ...............
  404a8f:	04040410 04040404 10040404 10101010     ................
  404a9f:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404aaf:	01010101 01010101 01010101 10101010     ................
  404abf:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404acf:	02020202 02020202 02020202 10101010     ................
  404adf:	00000020 00000000 00000000 00000000      ...............
	...

00404b60 <_init>:
  404b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404b62:	bf00      	nop
  404b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404b66:	bc08      	pop	{r3}
  404b68:	469e      	mov	lr, r3
  404b6a:	4770      	bx	lr

00404b6c <__init_array_start>:
  404b6c:	0040018d 	.word	0x0040018d

00404b70 <_fini>:
  404b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404b72:	bf00      	nop
  404b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404b76:	bc08      	pop	{r3}
  404b78:	469e      	mov	lr, r3
  404b7a:	4770      	bx	lr

00404b7c <__fini_array_start>:
  404b7c:	00400169 	.word	0x00400169
