
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000067d8  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  004067d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000500  20400218  004069f0  00020218  2**2
                  ALLOC
  3 .heap         00000200  20400718  00406ef0  00020218  2**0
                  ALLOC
  4 .stack        00000400  20400918  004070f0  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002ddbd  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005a9f  00000000  00000000  0004e05c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d086  00000000  00000000  00053afb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ef0  00000000  00000000  00060b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000dd0  00000000  00000000  00061a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00049301  00000000  00000000  00062841  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00021f0f  00000000  00000000  000abb42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00159022  00000000  00000000  000cda51  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000032a4  00000000  00000000  00226a74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 0d 40 20 c9 0b 40 00 c5 0b 40 00 c5 0b 40 00     ..@ ..@...@...@.
  400010:	c5 0b 40 00 c5 0b 40 00 c5 0b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c5 0b 40 00 c5 0b 40 00 00 00 00 00 c5 0b 40 00     ..@...@.......@.
  40003c:	c5 0b 40 00 c5 0b 40 00 c5 0b 40 00 c5 0b 40 00     ..@...@...@...@.
  40004c:	c5 0b 40 00 c5 0b 40 00 c5 0b 40 00 c5 0b 40 00     ..@...@...@...@.
  40005c:	c5 0b 40 00 c5 0b 40 00 00 00 00 00 65 20 40 00     ..@...@.....e @.
  40006c:	59 20 40 00 c5 0b 40 00 c5 0b 40 00 c5 0b 40 00     Y @...@...@...@.
  40007c:	c5 0b 40 00 4d 20 40 00 c5 0b 40 00 c5 0b 40 00     ..@.M @...@...@.
  40008c:	c5 0b 40 00 c5 0b 40 00 c5 0b 40 00 c5 0b 40 00     ..@...@...@...@.
  40009c:	89 26 40 00 c5 0b 40 00 c5 0b 40 00 c5 0b 40 00     .&@...@...@...@.
  4000ac:	c5 0b 40 00 c5 0b 40 00 15 1c 40 00 c5 0b 40 00     ..@...@...@...@.
  4000bc:	19 22 40 00 c5 0b 40 00 c5 0b 40 00 c5 0b 40 00     ."@...@...@...@.
  4000cc:	c5 0b 40 00 c5 0b 40 00 fd 1d 40 00 c5 0b 40 00     ..@...@...@...@.
  4000dc:	c5 0b 40 00 29 1c 40 00 c5 0b 40 00 c5 0b 40 00     ..@.).@...@...@.
  4000ec:	c5 0b 40 00 c5 0b 40 00 c5 0b 40 00 c5 0b 40 00     ..@...@...@...@.
  4000fc:	c5 0b 40 00 c5 0b 40 00 c5 0b 40 00 9d 26 40 00     ..@...@...@..&@.
  40010c:	c5 0b 40 00 c5 0b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 c5 0b 40 00 c5 0b 40 00 f9 29 40 00     ......@...@..)@.
  40012c:	c5 0b 40 00 2d 22 40 00 c5 0b 40 00 c5 0b 40 00     ..@.-"@...@...@.
  40013c:	c5 0b 40 00 c5 0b 40 00 c5 0b 40 00 c5 0b 40 00     ..@...@...@...@.
  40014c:	c5 0b 40 00 c5 0b 40 00 c5 0b 40 00 c5 0b 40 00     ..@...@...@...@.
  40015c:	c5 0b 40 00 c5 0b 40 00 c5 0b 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	004067d8 	.word	0x004067d8

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004067d8 	.word	0x004067d8
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	004067d8 	.word	0x004067d8
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	004010a1 	.word	0x004010a1
  4001e4:	00402bd5 	.word	0x00402bd5

004001e8 <raw_data_to_voltage>:
	
	return 0;
}


float raw_data_to_voltage(uint32_t analog_data){
  4001e8:	b510      	push	{r4, lr}
	//12 bit ADCs
	//Vref = 3.3V
	float voltage = (((float) analog_data) / (4096)) * 3.3;
  4001ea:	ee07 0a90 	vmov	s15, r0
  4001ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  4001f2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 400220 <raw_data_to_voltage+0x38>
  4001f6:	ee67 7a27 	vmul.f32	s15, s14, s15
  4001fa:	ee17 0a90 	vmov	r0, s15
  4001fe:	4b09      	ldr	r3, [pc, #36]	; (400224 <raw_data_to_voltage+0x3c>)
  400200:	4798      	blx	r3
  400202:	a305      	add	r3, pc, #20	; (adr r3, 400218 <raw_data_to_voltage+0x30>)
  400204:	e9d3 2300 	ldrd	r2, r3, [r3]
  400208:	4c07      	ldr	r4, [pc, #28]	; (400228 <raw_data_to_voltage+0x40>)
  40020a:	47a0      	blx	r4
  40020c:	4b07      	ldr	r3, [pc, #28]	; (40022c <raw_data_to_voltage+0x44>)
  40020e:	4798      	blx	r3
	//printf("raw data - %i \t voltage - %f \n",(int) analog_data, voltage);
	return voltage;
  400210:	bd10      	pop	{r4, pc}
  400212:	bf00      	nop
  400214:	f3af 8000 	nop.w
  400218:	66666666 	.word	0x66666666
  40021c:	400a6666 	.word	0x400a6666
  400220:	39800000 	.word	0x39800000
  400224:	00402ebd 	.word	0x00402ebd
  400228:	00402f65 	.word	0x00402f65
  40022c:	00403515 	.word	0x00403515

00400230 <calibrate_curr_sensors>:
void calibrate_curr_sensors(void){
  400230:	b570      	push	{r4, r5, r6, lr}
	dma_adc_0_enable_for_one_transaction();
  400232:	4b0e      	ldr	r3, [pc, #56]	; (40026c <calibrate_curr_sensors+0x3c>)
  400234:	4798      	blx	r3
	dma_adc_1_enable_for_one_transaction();
  400236:	4b0e      	ldr	r3, [pc, #56]	; (400270 <calibrate_curr_sensors+0x40>)
  400238:	4798      	blx	r3
	delay_ms(1);
  40023a:	2001      	movs	r0, #1
  40023c:	4b0d      	ldr	r3, [pc, #52]	; (400274 <calibrate_curr_sensors+0x44>)
  40023e:	4798      	blx	r3
	curr_A_offset = raw_data_to_voltage(adc_read(ADC_CURRENT_A));
  400240:	4e0d      	ldr	r6, [pc, #52]	; (400278 <calibrate_curr_sensors+0x48>)
  400242:	2108      	movs	r1, #8
  400244:	4630      	mov	r0, r6
  400246:	4d0d      	ldr	r5, [pc, #52]	; (40027c <calibrate_curr_sensors+0x4c>)
  400248:	47a8      	blx	r5
  40024a:	4c0d      	ldr	r4, [pc, #52]	; (400280 <calibrate_curr_sensors+0x50>)
  40024c:	47a0      	blx	r4
  40024e:	4b0d      	ldr	r3, [pc, #52]	; (400284 <calibrate_curr_sensors+0x54>)
  400250:	6018      	str	r0, [r3, #0]
	curr_B_offset = raw_data_to_voltage(adc_read(ADC_CURRENT_A));
  400252:	2108      	movs	r1, #8
  400254:	4630      	mov	r0, r6
  400256:	47a8      	blx	r5
  400258:	47a0      	blx	r4
  40025a:	4b0b      	ldr	r3, [pc, #44]	; (400288 <calibrate_curr_sensors+0x58>)
  40025c:	6018      	str	r0, [r3, #0]
	curr_C_offset = raw_data_to_voltage(adc_read(ADC_CURRENT_A));
  40025e:	2108      	movs	r1, #8
  400260:	4630      	mov	r0, r6
  400262:	47a8      	blx	r5
  400264:	47a0      	blx	r4
  400266:	4b09      	ldr	r3, [pc, #36]	; (40028c <calibrate_curr_sensors+0x5c>)
  400268:	6018      	str	r0, [r3, #0]
  40026a:	bd70      	pop	{r4, r5, r6, pc}
  40026c:	0040066d 	.word	0x0040066d
  400270:	00400751 	.word	0x00400751
  400274:	00401401 	.word	0x00401401
  400278:	20400610 	.word	0x20400610
  40027c:	00400991 	.word	0x00400991
  400280:	004001e9 	.word	0x004001e9
  400284:	20400508 	.word	0x20400508
  400288:	20400510 	.word	0x20400510
  40028c:	204004ec 	.word	0x204004ec

00400290 <reconstruct_curr_B>:
float reconstruct_curr_B(uint32_t raw_current_data){
  400290:	b510      	push	{r4, lr}
	float I = (raw_data_to_voltage(raw_current_data)   -   curr_B_offset)/CURR_B_SLOPE;
  400292:	4b0d      	ldr	r3, [pc, #52]	; (4002c8 <reconstruct_curr_B+0x38>)
  400294:	4798      	blx	r3
  400296:	4b0d      	ldr	r3, [pc, #52]	; (4002cc <reconstruct_curr_B+0x3c>)
  400298:	edd3 7a00 	vldr	s15, [r3]
  40029c:	ee07 0a10 	vmov	s14, r0
  4002a0:	ee77 7a67 	vsub.f32	s15, s14, s15
  4002a4:	ee17 0a90 	vmov	r0, s15
  4002a8:	4b09      	ldr	r3, [pc, #36]	; (4002d0 <reconstruct_curr_B+0x40>)
  4002aa:	4798      	blx	r3
  4002ac:	a304      	add	r3, pc, #16	; (adr r3, 4002c0 <reconstruct_curr_B+0x30>)
  4002ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002b2:	4c08      	ldr	r4, [pc, #32]	; (4002d4 <reconstruct_curr_B+0x44>)
  4002b4:	47a0      	blx	r4
  4002b6:	4b08      	ldr	r3, [pc, #32]	; (4002d8 <reconstruct_curr_B+0x48>)
  4002b8:	4798      	blx	r3
}
  4002ba:	bd10      	pop	{r4, pc}
  4002bc:	f3af 8000 	nop.w
  4002c0:	47ae147b 	.word	0x47ae147b
  4002c4:	3f747ae1 	.word	0x3f747ae1
  4002c8:	004001e9 	.word	0x004001e9
  4002cc:	20400510 	.word	0x20400510
  4002d0:	00402ebd 	.word	0x00402ebd
  4002d4:	004031b9 	.word	0x004031b9
  4002d8:	00403515 	.word	0x00403515

004002dc <encoder_init>:
	
	//increment rotation counter
	encoder_num_Z_interrupts ++;
}

void encoder_init(void){
  4002dc:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002de:	4b56      	ldr	r3, [pc, #344]	; (400438 <encoder_init+0x15c>)
  4002e0:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4002e2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  4002e6:	d103      	bne.n	4002f0 <encoder_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4002ec:	4b52      	ldr	r3, [pc, #328]	; (400438 <encoder_init+0x15c>)
  4002ee:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002f0:	4b51      	ldr	r3, [pc, #324]	; (400438 <encoder_init+0x15c>)
  4002f2:	699b      	ldr	r3, [r3, #24]
  4002f4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4002f8:	d103      	bne.n	400302 <encoder_init+0x26>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4002fe:	4b4e      	ldr	r3, [pc, #312]	; (400438 <encoder_init+0x15c>)
  400300:	611a      	str	r2, [r3, #16]
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400302:	4b4d      	ldr	r3, [pc, #308]	; (400438 <encoder_init+0x15c>)
  400304:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400308:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  40030c:	d104      	bne.n	400318 <encoder_init+0x3c>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40030e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400312:	4b49      	ldr	r3, [pc, #292]	; (400438 <encoder_init+0x15c>)
  400314:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400318:	4b47      	ldr	r3, [pc, #284]	; (400438 <encoder_init+0x15c>)
  40031a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  40031e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  400322:	d104      	bne.n	40032e <encoder_init+0x52>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400324:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400328:	4b43      	ldr	r3, [pc, #268]	; (400438 <encoder_init+0x15c>)
  40032a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	_pmc_enable_periph_clock(ID_TC3_CHANNEL1);
	
	
	//enable external interrupt on the Z line 
	ext_irq_register(PIO_PB13_IDX,Encoder_Z_Interrupt);
  40032e:	4943      	ldr	r1, [pc, #268]	; (40043c <encoder_init+0x160>)
  400330:	202d      	movs	r0, #45	; 0x2d
  400332:	4b43      	ldr	r3, [pc, #268]	; (400440 <encoder_init+0x164>)
  400334:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400336:	4b43      	ldr	r3, [pc, #268]	; (400444 <encoder_init+0x168>)
  400338:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40033c:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40033e:	2240      	movs	r2, #64	; 0x40
  400340:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400344:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40034c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400350:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400354:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40035c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400360:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400364:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400368:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40036c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400374:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400378:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40037c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400380:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40038c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400390:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400394:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  40039c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003a0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4003ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4003b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003b4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4003c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4003c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003c8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003cc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4003d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4003d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003dc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003e0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4003e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4003ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003f0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003f4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4003fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400400:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400404:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400408:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40040c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400414:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400418:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40041c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400420:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400428:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40042c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400430:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400434:	bd08      	pop	{r3, pc}
  400436:	bf00      	nop
  400438:	400e0600 	.word	0x400e0600
  40043c:	0040046d 	.word	0x0040046d
  400440:	00401499 	.word	0x00401499
  400444:	e000e100 	.word	0xe000e100

00400448 <encoder_get_counter>:
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV(mask)) >> TC_CV_CV_Pos;
}

static inline hri_tc_cv_reg_t hri_tc_read_CV_CV_bf(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV_Msk) >> TC_CV_CV_Pos;
  400448:	4a06      	ldr	r2, [pc, #24]	; (400464 <encoder_get_counter+0x1c>)
  40044a:	6913      	ldr	r3, [r2, #16]
  40044c:	6d10      	ldr	r0, [r2, #80]	; 0x50
	//if starting offset is 0 (which is the case before it was recorded) then it returns the actual counter
	
	
	//get A (first line) and B (second line) counters
	//note that rising and falling edges could be the other way round. It doesn't matter for the current implementation
	int encoder_counter_no_offset =	  ( int) hri_tc_read_CV_CV_bf(TC0,0) + ( int) hri_tc_read_CV_CV_bf(TC0,1) \
  40044e:	4403      	add	r3, r0
  400450:	f502 2290 	add.w	r2, r2, #294912	; 0x48000
  400454:	6910      	ldr	r0, [r2, #16]
									+ ( int) hri_tc_read_CV_CV_bf(TC3,0) + ( int) hri_tc_read_CV_CV_bf(TC3,1) \
  400456:	4403      	add	r3, r0
  400458:	6d10      	ldr	r0, [r2, #80]	; 0x50
  40045a:	4403      	add	r3, r0
									- encoder_inital_offset;														//get the number of steps normalised to the starting offset
  40045c:	4a02      	ldr	r2, [pc, #8]	; (400468 <encoder_get_counter+0x20>)
  40045e:	6810      	ldr	r0, [r2, #0]
								
	
	return encoder_counter_no_offset;
}
  400460:	1a18      	subs	r0, r3, r0
  400462:	4770      	bx	lr
  400464:	4000c000 	.word	0x4000c000
  400468:	204004f8 	.word	0x204004f8

0040046c <Encoder_Z_Interrupt>:
static void Encoder_Z_Interrupt (void){
  40046c:	b508      	push	{r3, lr}
	int encoder_counter_no_offset = encoder_get_counter();
  40046e:	4b0b      	ldr	r3, [pc, #44]	; (40049c <Encoder_Z_Interrupt+0x30>)
  400470:	4798      	blx	r3
	if(encoder_num_Z_interrupts == 0){
  400472:	4b0b      	ldr	r3, [pc, #44]	; (4004a0 <Encoder_Z_Interrupt+0x34>)
  400474:	681b      	ldr	r3, [r3, #0]
  400476:	b15b      	cbz	r3, 400490 <Encoder_Z_Interrupt+0x24>
		unsigned int delta = encoder_counter_no_offset & (ENCODER_STEPS - 1);
  400478:	f3c0 000d 	ubfx	r0, r0, #0, #14
		if( (delta <= ENCODER_MAX_DELTA) || (delta >= ENCODER_STEPS-1 - ENCODER_MAX_DELTA) ){
  40047c:	1f81      	subs	r1, r0, #6
  40047e:	f643 72f3 	movw	r2, #16371	; 0x3ff3
  400482:	4291      	cmp	r1, r2
  400484:	d806      	bhi.n	400494 <Encoder_Z_Interrupt+0x28>
			encoder_inital_offset += delta;
  400486:	4907      	ldr	r1, [pc, #28]	; (4004a4 <Encoder_Z_Interrupt+0x38>)
  400488:	680a      	ldr	r2, [r1, #0]
  40048a:	4410      	add	r0, r2
  40048c:	6008      	str	r0, [r1, #0]
  40048e:	e001      	b.n	400494 <Encoder_Z_Interrupt+0x28>
		encoder_inital_offset = encoder_counter_no_offset;
  400490:	4a04      	ldr	r2, [pc, #16]	; (4004a4 <Encoder_Z_Interrupt+0x38>)
  400492:	6010      	str	r0, [r2, #0]
	encoder_num_Z_interrupts ++;
  400494:	3301      	adds	r3, #1
  400496:	4a02      	ldr	r2, [pc, #8]	; (4004a0 <Encoder_Z_Interrupt+0x34>)
  400498:	6013      	str	r3, [r2, #0]
  40049a:	bd08      	pop	{r3, pc}
  40049c:	00400449 	.word	0x00400449
  4004a0:	204004f4 	.word	0x204004f4
  4004a4:	204004f8 	.word	0x204004f8

004004a8 <Position_2_Interrupt>:
static void Position_1_Interrupt (void){
	Position_General_Interrupt();
	//printf("POS 1\n");
}

static void Position_2_Interrupt (void){
  4004a8:	b430      	push	{r4, r5}
	has_triggered = true;
  4004aa:	2201      	movs	r2, #1
  4004ac:	4b13      	ldr	r3, [pc, #76]	; (4004fc <Position_2_Interrupt+0x54>)
  4004ae:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  4004b0:	4b13      	ldr	r3, [pc, #76]	; (400500 <Position_2_Interrupt+0x58>)
  4004b2:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <Position_2_Interrupt+0x5c>)
  4004b6:	681b      	ldr	r3, [r3, #0]
  4004b8:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4004ba:	2b00      	cmp	r3, #0
  4004bc:	dd11      	ble.n	4004e2 <Position_2_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4004be:	2201      	movs	r2, #1
  4004c0:	2a00      	cmp	r2, #0
  4004c2:	dc11      	bgt.n	4004e8 <Position_2_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  4004c4:	ee07 3a90 	vmov	s15, r3
  4004c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4004cc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 400508 <Position_2_Interrupt+0x60>
  4004d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4004d4:	4b0d      	ldr	r3, [pc, #52]	; (40050c <Position_2_Interrupt+0x64>)
  4004d6:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  4004da:	4b0a      	ldr	r3, [pc, #40]	; (400504 <Position_2_Interrupt+0x5c>)
  4004dc:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	//printf("POS 2\n");
}
  4004de:	bc30      	pop	{r4, r5}
  4004e0:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4004e2:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  4004e6:	e7ea      	b.n	4004be <Position_2_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  4004e8:	1e54      	subs	r4, r2, #1
  4004ea:	4908      	ldr	r1, [pc, #32]	; (40050c <Position_2_Interrupt+0x64>)
  4004ec:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  4004f0:	682d      	ldr	r5, [r5, #0]
  4004f2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4004f6:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4004f8:	4622      	mov	r2, r4
  4004fa:	e7e1      	b.n	4004c0 <Position_2_Interrupt+0x18>
  4004fc:	204004f0 	.word	0x204004f0
  400500:	e000e010 	.word	0xe000e010
  400504:	20400504 	.word	0x20400504
  400508:	43960000 	.word	0x43960000
  40050c:	204004fc 	.word	0x204004fc

00400510 <Position_3_Interrupt>:
int cntr = 0;
static void Position_3_Interrupt (void){
  400510:	b430      	push	{r4, r5}
	has_triggered = true;
  400512:	2201      	movs	r2, #1
  400514:	4b13      	ldr	r3, [pc, #76]	; (400564 <Position_3_Interrupt+0x54>)
  400516:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400518:	4b13      	ldr	r3, [pc, #76]	; (400568 <Position_3_Interrupt+0x58>)
  40051a:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  40051c:	4b13      	ldr	r3, [pc, #76]	; (40056c <Position_3_Interrupt+0x5c>)
  40051e:	681b      	ldr	r3, [r3, #0]
  400520:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  400522:	2b00      	cmp	r3, #0
  400524:	dd11      	ble.n	40054a <Position_3_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400526:	2201      	movs	r2, #1
  400528:	2a00      	cmp	r2, #0
  40052a:	dc11      	bgt.n	400550 <Position_3_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  40052c:	ee07 3a90 	vmov	s15, r3
  400530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400534:	eddf 6a0e 	vldr	s13, [pc, #56]	; 400570 <Position_3_Interrupt+0x60>
  400538:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  40053c:	4b0d      	ldr	r3, [pc, #52]	; (400574 <Position_3_Interrupt+0x64>)
  40053e:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  400542:	4b0a      	ldr	r3, [pc, #40]	; (40056c <Position_3_Interrupt+0x5c>)
  400544:	6018      	str	r0, [r3, #0]
		
			printf("%f\n",angleee);
		}
	}
	*/
}
  400546:	bc30      	pop	{r4, r5}
  400548:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40054a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  40054e:	e7ea      	b.n	400526 <Position_3_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400550:	1e54      	subs	r4, r2, #1
  400552:	4908      	ldr	r1, [pc, #32]	; (400574 <Position_3_Interrupt+0x64>)
  400554:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400558:	682d      	ldr	r5, [r5, #0]
  40055a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40055e:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400560:	4622      	mov	r2, r4
  400562:	e7e1      	b.n	400528 <Position_3_Interrupt+0x18>
  400564:	204004f0 	.word	0x204004f0
  400568:	e000e010 	.word	0xe000e010
  40056c:	20400504 	.word	0x20400504
  400570:	43960000 	.word	0x43960000
  400574:	204004fc 	.word	0x204004fc

00400578 <Position_1_Interrupt>:
static void Position_1_Interrupt (void){
  400578:	b430      	push	{r4, r5}
	has_triggered = true;
  40057a:	2201      	movs	r2, #1
  40057c:	4b13      	ldr	r3, [pc, #76]	; (4005cc <Position_1_Interrupt+0x54>)
  40057e:	701a      	strb	r2, [r3, #0]
	int current_systick = SysTick->VAL;
  400580:	4b13      	ldr	r3, [pc, #76]	; (4005d0 <Position_1_Interrupt+0x58>)
  400582:	6898      	ldr	r0, [r3, #8]
	int delta = pos_sens_last_SysTick_count - current_systick;	//systick decrements
  400584:	4b13      	ldr	r3, [pc, #76]	; (4005d4 <Position_1_Interrupt+0x5c>)
  400586:	681b      	ldr	r3, [r3, #0]
  400588:	1a1b      	subs	r3, r3, r0
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  40058a:	2b00      	cmp	r3, #0
  40058c:	dd11      	ble.n	4005b2 <Position_1_Interrupt+0x3a>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40058e:	2201      	movs	r2, #1
  400590:	2a00      	cmp	r2, #0
  400592:	dc11      	bgt.n	4005b8 <Position_1_Interrupt+0x40>
	pos_sens_deltas [0] = (float) delta / 300;
  400594:	ee07 3a90 	vmov	s15, r3
  400598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40059c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 4005d8 <Position_1_Interrupt+0x60>
  4005a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4005a4:	4b0d      	ldr	r3, [pc, #52]	; (4005dc <Position_1_Interrupt+0x64>)
  4005a6:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  4005aa:	4b0a      	ldr	r3, [pc, #40]	; (4005d4 <Position_1_Interrupt+0x5c>)
  4005ac:	6018      	str	r0, [r3, #0]
}
  4005ae:	bc30      	pop	{r4, r5}
  4005b0:	4770      	bx	lr
	if(delta <= 0) delta += (1<<24);	//systick is 24 bit counter
  4005b2:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
  4005b6:	e7ea      	b.n	40058e <Position_1_Interrupt+0x16>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  4005b8:	1e54      	subs	r4, r2, #1
  4005ba:	4908      	ldr	r1, [pc, #32]	; (4005dc <Position_1_Interrupt+0x64>)
  4005bc:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  4005c0:	682d      	ldr	r5, [r5, #0]
  4005c2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4005c6:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4005c8:	4622      	mov	r2, r4
  4005ca:	e7e1      	b.n	400590 <Position_1_Interrupt+0x18>
  4005cc:	204004f0 	.word	0x204004f0
  4005d0:	e000e010 	.word	0xe000e010
  4005d4:	20400504 	.word	0x20400504
  4005d8:	43960000 	.word	0x43960000
  4005dc:	204004fc 	.word	0x204004fc

004005e0 <pos_sens_init>:

void pos_sens_init (void){
  4005e0:	b510      	push	{r4, lr}
	//set interrupt handlers
	ext_irq_register(PIO_PD19_IDX, Position_3_Interrupt);		//POS 3
  4005e2:	4919      	ldr	r1, [pc, #100]	; (400648 <pos_sens_init+0x68>)
  4005e4:	2073      	movs	r0, #115	; 0x73
  4005e6:	4c19      	ldr	r4, [pc, #100]	; (40064c <pos_sens_init+0x6c>)
  4005e8:	47a0      	blx	r4
	ext_irq_register(PIO_PA2_IDX, Position_2_Interrupt);		//POS 2
  4005ea:	4919      	ldr	r1, [pc, #100]	; (400650 <pos_sens_init+0x70>)
  4005ec:	2002      	movs	r0, #2
  4005ee:	47a0      	blx	r4
	ext_irq_register(PIO_PA5_IDX, Position_1_Interrupt);		//POS 1
  4005f0:	4918      	ldr	r1, [pc, #96]	; (400654 <pos_sens_init+0x74>)
  4005f2:	2005      	movs	r0, #5
  4005f4:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4005f6:	4b18      	ldr	r3, [pc, #96]	; (400658 <pos_sens_init+0x78>)
  4005f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4005fc:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4005fe:	2220      	movs	r2, #32
  400600:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400604:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400608:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40060a:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ	(PIOD_IRQn);
	NVIC_SetPriority(PIOD_IRQn, IRQ_PRIORITY_POSITION_SENS);

	
	//SysTick starting from 0
	pos_sens_last_SysTick_count = 0;
  40060e:	2200      	movs	r2, #0
  400610:	4b12      	ldr	r3, [pc, #72]	; (40065c <pos_sens_init+0x7c>)
  400612:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
  400614:	4b12      	ldr	r3, [pc, #72]	; (400660 <pos_sens_init+0x80>)
  400616:	609a      	str	r2, [r3, #8]
	//make the load value max, so that the overflows are as rare as possible
	SysTick->LOAD = (0xFFFFFF);
  400618:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  40061c:	6059      	str	r1, [r3, #4]

	this means that the moment we transition to state (POS1=1, POS2=0 POS3=0) we are at 0 electrical degrees
	*/

	// sector_lookup_table[POS3][POS2][POS1];
	sector_lookup_table[0][0][1] = 1;
  40061e:	4b11      	ldr	r3, [pc, #68]	; (400664 <pos_sens_init+0x84>)
  400620:	2101      	movs	r1, #1
  400622:	6059      	str	r1, [r3, #4]
	sector_lookup_table[0][1][1] = 2;
  400624:	2102      	movs	r1, #2
  400626:	60d9      	str	r1, [r3, #12]
	sector_lookup_table[0][1][0] = 3;
  400628:	2103      	movs	r1, #3
  40062a:	6099      	str	r1, [r3, #8]
	sector_lookup_table[1][1][0] = 4;
  40062c:	2104      	movs	r1, #4
  40062e:	6199      	str	r1, [r3, #24]
	sector_lookup_table[1][0][0] = 5;
  400630:	2105      	movs	r1, #5
  400632:	6119      	str	r1, [r3, #16]
	sector_lookup_table[1][0][1] = 6;
  400634:	2106      	movs	r1, #6
  400636:	6159      	str	r1, [r3, #20]
	//Error states
	sector_lookup_table[0][0][0] = -1;
  400638:	f04f 31ff 	mov.w	r1, #4294967295
  40063c:	6019      	str	r1, [r3, #0]
	sector_lookup_table[1][1][1] = -1;
  40063e:	61d9      	str	r1, [r3, #28]
	
	has_triggered = false;
  400640:	4b09      	ldr	r3, [pc, #36]	; (400668 <pos_sens_init+0x88>)
  400642:	701a      	strb	r2, [r3, #0]
  400644:	bd10      	pop	{r4, pc}
  400646:	bf00      	nop
  400648:	00400511 	.word	0x00400511
  40064c:	00401499 	.word	0x00401499
  400650:	004004a9 	.word	0x004004a9
  400654:	00400579 	.word	0x00400579
  400658:	e000e100 	.word	0xe000e100
  40065c:	20400504 	.word	0x20400504
  400660:	e000e010 	.word	0xe000e010
  400664:	204004c8 	.word	0x204004c8
  400668:	204004f0 	.word	0x204004f0

0040066c <dma_adc_0_enable_for_one_transaction>:
	
	has_0_triggered = false;
	has_1_triggered = false;
}

void dma_adc_0_enable_for_one_transaction(void){
  40066c:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  40066e:	4906      	ldr	r1, [pc, #24]	; (400688 <dma_adc_0_enable_for_one_transaction+0x1c>)
  400670:	2000      	movs	r0, #0
  400672:	4b06      	ldr	r3, [pc, #24]	; (40068c <dma_adc_0_enable_for_one_transaction+0x20>)
  400674:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  400676:	2118      	movs	r1, #24
  400678:	2000      	movs	r0, #0
  40067a:	4b05      	ldr	r3, [pc, #20]	; (400690 <dma_adc_0_enable_for_one_transaction+0x24>)
  40067c:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  40067e:	2101      	movs	r1, #1
  400680:	2000      	movs	r0, #0
  400682:	4b04      	ldr	r3, [pc, #16]	; (400694 <dma_adc_0_enable_for_one_transaction+0x28>)
  400684:	4798      	blx	r3
  400686:	bd08      	pop	{r3, pc}
  400688:	20400234 	.word	0x20400234
  40068c:	0040293d 	.word	0x0040293d
  400690:	0040295d 	.word	0x0040295d
  400694:	00402975 	.word	0x00402975

00400698 <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  400698:	b530      	push	{r4, r5, lr}
  40069a:	b083      	sub	sp, #12
	has_0_triggered = true;
  40069c:	2201      	movs	r2, #1
  40069e:	4b22      	ldr	r3, [pc, #136]	; (400728 <dma_adc_0_callback+0x90>)
  4006a0:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  4006a2:	2300      	movs	r3, #0
  4006a4:	e008      	b.n	4006b8 <dma_adc_0_callback+0x20>
				raw_currents[1] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  4006a6:	b292      	uxth	r2, r2
  4006a8:	4920      	ldr	r1, [pc, #128]	; (40072c <dma_adc_0_callback+0x94>)
  4006aa:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  4006ac:	4920      	ldr	r1, [pc, #128]	; (400730 <dma_adc_0_callback+0x98>)
  4006ae:	7e0a      	ldrb	r2, [r1, #24]
  4006b0:	f042 0202 	orr.w	r2, r2, #2
  4006b4:	760a      	strb	r2, [r1, #24]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  4006b6:	3301      	adds	r3, #1
  4006b8:	2b05      	cmp	r3, #5
  4006ba:	dc13      	bgt.n	4006e4 <dma_adc_0_callback+0x4c>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  4006bc:	4a1c      	ldr	r2, [pc, #112]	; (400730 <dma_adc_0_callback+0x98>)
  4006be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4006c2:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  4006c6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  4006ca:	d0ec      	beq.n	4006a6 <dma_adc_0_callback+0xe>
  4006cc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4006d0:	d1f1      	bne.n	4006b6 <dma_adc_0_callback+0x1e>
				raw_currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  4006d2:	b292      	uxth	r2, r2
  4006d4:	4915      	ldr	r1, [pc, #84]	; (40072c <dma_adc_0_callback+0x94>)
  4006d6:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  4006d8:	4915      	ldr	r1, [pc, #84]	; (400730 <dma_adc_0_callback+0x98>)
  4006da:	7e0a      	ldrb	r2, [r1, #24]
  4006dc:	f042 0201 	orr.w	r2, r2, #1
  4006e0:	760a      	strb	r2, [r1, #24]
				break;
  4006e2:	e7e8      	b.n	4006b6 <dma_adc_0_callback+0x1e>
	if(is_dma_adc_0_continuous){
  4006e4:	4b13      	ldr	r3, [pc, #76]	; (400734 <dma_adc_0_callback+0x9c>)
  4006e6:	781b      	ldrb	r3, [r3, #0]
  4006e8:	b92b      	cbnz	r3, 4006f6 <dma_adc_0_callback+0x5e>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  4006ea:	4b11      	ldr	r3, [pc, #68]	; (400730 <dma_adc_0_callback+0x98>)
  4006ec:	7e1b      	ldrb	r3, [r3, #24]
  4006ee:	2b0f      	cmp	r3, #15
  4006f0:	d004      	beq.n	4006fc <dma_adc_0_callback+0x64>
}
  4006f2:	b003      	add	sp, #12
  4006f4:	bd30      	pop	{r4, r5, pc}
		dma_adc_0_enable_for_one_transaction();
  4006f6:	4b10      	ldr	r3, [pc, #64]	; (400738 <dma_adc_0_callback+0xa0>)
  4006f8:	4798      	blx	r3
  4006fa:	e7f6      	b.n	4006ea <dma_adc_0_callback+0x52>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  4006fc:	4b0f      	ldr	r3, [pc, #60]	; (40073c <dma_adc_0_callback+0xa4>)
  4006fe:	781b      	ldrb	r3, [r3, #0]
  400700:	2b00      	cmp	r3, #0
  400702:	d0f6      	beq.n	4006f2 <dma_adc_0_callback+0x5a>
		ready_values = 0;
  400704:	2200      	movs	r2, #0
  400706:	4b0a      	ldr	r3, [pc, #40]	; (400730 <dma_adc_0_callback+0x98>)
  400708:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 0\n");
  40070a:	480d      	ldr	r0, [pc, #52]	; (400740 <dma_adc_0_callback+0xa8>)
  40070c:	4c0d      	ldr	r4, [pc, #52]	; (400744 <dma_adc_0_callback+0xac>)
  40070e:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  400710:	4806      	ldr	r0, [pc, #24]	; (40072c <dma_adc_0_callback+0x94>)
  400712:	6843      	ldr	r3, [r0, #4]
  400714:	6802      	ldr	r2, [r0, #0]
  400716:	490c      	ldr	r1, [pc, #48]	; (400748 <dma_adc_0_callback+0xb0>)
  400718:	6809      	ldr	r1, [r1, #0]
  40071a:	68c5      	ldr	r5, [r0, #12]
  40071c:	9501      	str	r5, [sp, #4]
  40071e:	6880      	ldr	r0, [r0, #8]
  400720:	9000      	str	r0, [sp, #0]
  400722:	480a      	ldr	r0, [pc, #40]	; (40074c <dma_adc_0_callback+0xb4>)
  400724:	47a0      	blx	r4
}
  400726:	e7e4      	b.n	4006f2 <dma_adc_0_callback+0x5a>
  400728:	2040050c 	.word	0x2040050c
  40072c:	20400518 	.word	0x20400518
  400730:	20400234 	.word	0x20400234
  400734:	20400515 	.word	0x20400515
  400738:	0040066d 	.word	0x0040066d
  40073c:	204004e8 	.word	0x204004e8
  400740:	00405eac 	.word	0x00405eac
  400744:	00403ee1 	.word	0x00403ee1
  400748:	20400524 	.word	0x20400524
  40074c:	00405ee0 	.word	0x00405ee0

00400750 <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  400750:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400752:	4906      	ldr	r1, [pc, #24]	; (40076c <dma_adc_1_enable_for_one_transaction+0x1c>)
  400754:	2001      	movs	r0, #1
  400756:	4b06      	ldr	r3, [pc, #24]	; (400770 <dma_adc_1_enable_for_one_transaction+0x20>)
  400758:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  40075a:	2110      	movs	r1, #16
  40075c:	2001      	movs	r0, #1
  40075e:	4b05      	ldr	r3, [pc, #20]	; (400774 <dma_adc_1_enable_for_one_transaction+0x24>)
  400760:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  400762:	2101      	movs	r1, #1
  400764:	4608      	mov	r0, r1
  400766:	4b04      	ldr	r3, [pc, #16]	; (400778 <dma_adc_1_enable_for_one_transaction+0x28>)
  400768:	4798      	blx	r3
  40076a:	bd08      	pop	{r3, pc}
  40076c:	20400250 	.word	0x20400250
  400770:	0040293d 	.word	0x0040293d
  400774:	0040295d 	.word	0x0040295d
  400778:	00402975 	.word	0x00402975

0040077c <dma_adc_1_callback>:
static void dma_adc_1_callback(struct _dma_resource *resource){
  40077c:	b530      	push	{r4, r5, lr}
  40077e:	b083      	sub	sp, #12
	has_1_triggered = true;
  400780:	2201      	movs	r2, #1
  400782:	4b23      	ldr	r3, [pc, #140]	; (400810 <dma_adc_1_callback+0x94>)
  400784:	701a      	strb	r2, [r3, #0]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400786:	2300      	movs	r3, #0
  400788:	e008      	b.n	40079c <dma_adc_1_callback+0x20>
				raw_currents[2] = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  40078a:	b292      	uxth	r2, r2
  40078c:	4921      	ldr	r1, [pc, #132]	; (400814 <dma_adc_1_callback+0x98>)
  40078e:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  400790:	4921      	ldr	r1, [pc, #132]	; (400818 <dma_adc_1_callback+0x9c>)
  400792:	7e0a      	ldrb	r2, [r1, #24]
  400794:	f042 0204 	orr.w	r2, r2, #4
  400798:	760a      	strb	r2, [r1, #24]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  40079a:	3301      	adds	r3, #1
  40079c:	2b03      	cmp	r3, #3
  40079e:	dc14      	bgt.n	4007ca <dma_adc_1_callback+0x4e>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  4007a0:	4a1d      	ldr	r2, [pc, #116]	; (400818 <dma_adc_1_callback+0x9c>)
  4007a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  4007a6:	69d2      	ldr	r2, [r2, #28]
  4007a8:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  4007ac:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  4007b0:	d0eb      	beq.n	40078a <dma_adc_1_callback+0xe>
  4007b2:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  4007b6:	d1f0      	bne.n	40079a <dma_adc_1_callback+0x1e>
				raw_voltage = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  4007b8:	b292      	uxth	r2, r2
  4007ba:	4918      	ldr	r1, [pc, #96]	; (40081c <dma_adc_1_callback+0xa0>)
  4007bc:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<3);
  4007be:	4916      	ldr	r1, [pc, #88]	; (400818 <dma_adc_1_callback+0x9c>)
  4007c0:	7e0a      	ldrb	r2, [r1, #24]
  4007c2:	f042 0208 	orr.w	r2, r2, #8
  4007c6:	760a      	strb	r2, [r1, #24]
				break;
  4007c8:	e7e7      	b.n	40079a <dma_adc_1_callback+0x1e>
	if(is_dma_adc_1_continuous){
  4007ca:	4b15      	ldr	r3, [pc, #84]	; (400820 <dma_adc_1_callback+0xa4>)
  4007cc:	781b      	ldrb	r3, [r3, #0]
  4007ce:	b92b      	cbnz	r3, 4007dc <dma_adc_1_callback+0x60>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  4007d0:	4b11      	ldr	r3, [pc, #68]	; (400818 <dma_adc_1_callback+0x9c>)
  4007d2:	7e1b      	ldrb	r3, [r3, #24]
  4007d4:	2b0f      	cmp	r3, #15
  4007d6:	d004      	beq.n	4007e2 <dma_adc_1_callback+0x66>
}
  4007d8:	b003      	add	sp, #12
  4007da:	bd30      	pop	{r4, r5, pc}
		dma_adc_1_enable_for_one_transaction();
  4007dc:	4b11      	ldr	r3, [pc, #68]	; (400824 <dma_adc_1_callback+0xa8>)
  4007de:	4798      	blx	r3
  4007e0:	e7f6      	b.n	4007d0 <dma_adc_1_callback+0x54>
	if(ready_values == ALL_VALUES_READY && is_control_enabled){
  4007e2:	4b11      	ldr	r3, [pc, #68]	; (400828 <dma_adc_1_callback+0xac>)
  4007e4:	781b      	ldrb	r3, [r3, #0]
  4007e6:	2b00      	cmp	r3, #0
  4007e8:	d0f6      	beq.n	4007d8 <dma_adc_1_callback+0x5c>
		ready_values = 0;
  4007ea:	2200      	movs	r2, #0
  4007ec:	4b0a      	ldr	r3, [pc, #40]	; (400818 <dma_adc_1_callback+0x9c>)
  4007ee:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 1 \n");
  4007f0:	480e      	ldr	r0, [pc, #56]	; (40082c <dma_adc_1_callback+0xb0>)
  4007f2:	4c0f      	ldr	r4, [pc, #60]	; (400830 <dma_adc_1_callback+0xb4>)
  4007f4:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  4007f6:	4807      	ldr	r0, [pc, #28]	; (400814 <dma_adc_1_callback+0x98>)
  4007f8:	6843      	ldr	r3, [r0, #4]
  4007fa:	6802      	ldr	r2, [r0, #0]
  4007fc:	4907      	ldr	r1, [pc, #28]	; (40081c <dma_adc_1_callback+0xa0>)
  4007fe:	6809      	ldr	r1, [r1, #0]
  400800:	68c5      	ldr	r5, [r0, #12]
  400802:	9501      	str	r5, [sp, #4]
  400804:	6880      	ldr	r0, [r0, #8]
  400806:	9000      	str	r0, [sp, #0]
  400808:	480a      	ldr	r0, [pc, #40]	; (400834 <dma_adc_1_callback+0xb8>)
  40080a:	47a0      	blx	r4
}
  40080c:	e7e4      	b.n	4007d8 <dma_adc_1_callback+0x5c>
  40080e:	bf00      	nop
  400810:	204004e9 	.word	0x204004e9
  400814:	20400518 	.word	0x20400518
  400818:	20400234 	.word	0x20400234
  40081c:	20400524 	.word	0x20400524
  400820:	20400514 	.word	0x20400514
  400824:	00400751 	.word	0x00400751
  400828:	204004e8 	.word	0x204004e8
  40082c:	00405ef0 	.word	0x00405ef0
  400830:	00403ee1 	.word	0x00403ee1
  400834:	00405ee0 	.word	0x00405ee0

00400838 <dma_adc_0_disable_continuously>:
	is_dma_adc_1_continuous = true;
	dma_adc_1_enable_for_one_transaction();
}

void dma_adc_0_disable_continuously(void){
	is_dma_adc_0_continuous = false;
  400838:	2200      	movs	r2, #0
  40083a:	4b01      	ldr	r3, [pc, #4]	; (400840 <dma_adc_0_disable_continuously+0x8>)
  40083c:	701a      	strb	r2, [r3, #0]
  40083e:	4770      	bx	lr
  400840:	20400515 	.word	0x20400515

00400844 <dma_adc_1_disable_continuously>:
}
void dma_adc_1_disable_continuously(void){
	is_dma_adc_1_continuous = false;
  400844:	2200      	movs	r2, #0
  400846:	4b01      	ldr	r3, [pc, #4]	; (40084c <dma_adc_1_disable_continuously+0x8>)
  400848:	701a      	strb	r2, [r3, #0]
  40084a:	4770      	bx	lr
  40084c:	20400514 	.word	0x20400514

00400850 <dma_adc_init>:
void dma_adc_init(void){
  400850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  400854:	492a      	ldr	r1, [pc, #168]	; (400900 <dma_adc_init+0xb0>)
  400856:	2000      	movs	r0, #0
  400858:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 400934 <dma_adc_init+0xe4>
  40085c:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  40085e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 400938 <dma_adc_init+0xe8>
  400862:	4641      	mov	r1, r8
  400864:	2000      	movs	r0, #0
  400866:	4f27      	ldr	r7, [pc, #156]	; (400904 <dma_adc_init+0xb4>)
  400868:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  40086a:	2118      	movs	r1, #24
  40086c:	2000      	movs	r0, #0
  40086e:	4d26      	ldr	r5, [pc, #152]	; (400908 <dma_adc_init+0xb8>)
  400870:	47a8      	blx	r5
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  400872:	2100      	movs	r1, #0
  400874:	460c      	mov	r4, r1
  400876:	4608      	mov	r0, r1
  400878:	4e24      	ldr	r6, [pc, #144]	; (40090c <dma_adc_init+0xbc>)
  40087a:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  40087c:	6823      	ldr	r3, [r4, #0]
  40087e:	4a24      	ldr	r2, [pc, #144]	; (400910 <dma_adc_init+0xc0>)
  400880:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400882:	2201      	movs	r2, #1
  400884:	4621      	mov	r1, r4
  400886:	4620      	mov	r0, r4
  400888:	4c22      	ldr	r4, [pc, #136]	; (400914 <dma_adc_init+0xc4>)
  40088a:	47a0      	blx	r4
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  40088c:	4922      	ldr	r1, [pc, #136]	; (400918 <dma_adc_init+0xc8>)
  40088e:	2001      	movs	r0, #1
  400890:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400892:	f108 011c 	add.w	r1, r8, #28
  400896:	2001      	movs	r0, #1
  400898:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  40089a:	2110      	movs	r1, #16
  40089c:	2001      	movs	r0, #1
  40089e:	47a8      	blx	r5
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  4008a0:	2101      	movs	r1, #1
  4008a2:	2500      	movs	r5, #0
  4008a4:	4628      	mov	r0, r5
  4008a6:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  4008a8:	682b      	ldr	r3, [r5, #0]
  4008aa:	4a1c      	ldr	r2, [pc, #112]	; (40091c <dma_adc_init+0xcc>)
  4008ac:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  4008ae:	2201      	movs	r2, #1
  4008b0:	4629      	mov	r1, r5
  4008b2:	4610      	mov	r0, r2
  4008b4:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4008b6:	4b1a      	ldr	r3, [pc, #104]	; (400920 <dma_adc_init+0xd0>)
  4008b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4008bc:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4008be:	2280      	movs	r2, #128	; 0x80
  4008c0:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4008c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4008c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4008cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4008d0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4008d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4008d8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4008dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4008e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4008e4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4008e8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	dma_adc_0_disable_continuously();
  4008ec:	4b0d      	ldr	r3, [pc, #52]	; (400924 <dma_adc_init+0xd4>)
  4008ee:	4798      	blx	r3
	dma_adc_1_disable_continuously();
  4008f0:	4b0d      	ldr	r3, [pc, #52]	; (400928 <dma_adc_init+0xd8>)
  4008f2:	4798      	blx	r3
	has_0_triggered = false;
  4008f4:	4a0d      	ldr	r2, [pc, #52]	; (40092c <dma_adc_init+0xdc>)
  4008f6:	7015      	strb	r5, [r2, #0]
	has_1_triggered = false;
  4008f8:	4a0d      	ldr	r2, [pc, #52]	; (400930 <dma_adc_init+0xe0>)
  4008fa:	7015      	strb	r5, [r2, #0]
  4008fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400900:	4003c020 	.word	0x4003c020
  400904:	0040293d 	.word	0x0040293d
  400908:	0040295d 	.word	0x0040295d
  40090c:	0040298d 	.word	0x0040298d
  400910:	00400699 	.word	0x00400699
  400914:	004029a1 	.word	0x004029a1
  400918:	40064020 	.word	0x40064020
  40091c:	0040077d 	.word	0x0040077d
  400920:	e000e100 	.word	0xe000e100
  400924:	00400839 	.word	0x00400839
  400928:	00400845 	.word	0x00400845
  40092c:	2040050c 	.word	0x2040050c
  400930:	204004e9 	.word	0x204004e9
  400934:	0040294d 	.word	0x0040294d
  400938:	20400234 	.word	0x20400234

0040093c <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  40093c:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  40093e:	4d11      	ldr	r5, [pc, #68]	; (400984 <adc_enable_all+0x48>)
  400940:	2108      	movs	r1, #8
  400942:	4628      	mov	r0, r5
  400944:	4c10      	ldr	r4, [pc, #64]	; (400988 <adc_enable_all+0x4c>)
  400946:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  400948:	2102      	movs	r1, #2
  40094a:	4628      	mov	r0, r5
  40094c:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  40094e:	4e0f      	ldr	r6, [pc, #60]	; (40098c <adc_enable_all+0x50>)
  400950:	2101      	movs	r1, #1
  400952:	4630      	mov	r0, r6
  400954:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  400956:	2106      	movs	r1, #6
  400958:	4630      	mov	r0, r6
  40095a:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  40095c:	2105      	movs	r1, #5
  40095e:	4630      	mov	r0, r6
  400960:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  400962:	2106      	movs	r1, #6
  400964:	4628      	mov	r0, r5
  400966:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  400968:	210a      	movs	r1, #10
  40096a:	4628      	mov	r0, r5
  40096c:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  40096e:	2100      	movs	r1, #0
  400970:	4630      	mov	r0, r6
  400972:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  400974:	2105      	movs	r1, #5
  400976:	4628      	mov	r0, r5
  400978:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  40097a:	2100      	movs	r1, #0
  40097c:	4628      	mov	r0, r5
  40097e:	47a0      	blx	r4
  400980:	bd70      	pop	{r4, r5, r6, pc}
  400982:	bf00      	nop
  400984:	20400610 	.word	0x20400610
  400988:	00401391 	.word	0x00401391
  40098c:	204006e8 	.word	0x204006e8

00400990 <adc_read>:
	adc_async_disable_channel(ADC_TEMP_MOTOR);
}


//reads data from the DMA buffers
int adc_read(struct adc_async_descriptor *const descr, const uint8_t channel){
  400990:	b410      	push	{r4}
	//null checking variable to see if a write has occured
	has_0_triggered = false;
  400992:	2300      	movs	r3, #0
  400994:	4a17      	ldr	r2, [pc, #92]	; (4009f4 <adc_read+0x64>)
  400996:	7013      	strb	r3, [r2, #0]
	has_1_triggered = false;
  400998:	4a17      	ldr	r2, [pc, #92]	; (4009f8 <adc_read+0x68>)
  40099a:	7013      	strb	r3, [r2, #0]
	
		
	if (descr == (&ADC_0)){
  40099c:	4b17      	ldr	r3, [pc, #92]	; (4009fc <adc_read+0x6c>)
  40099e:	4298      	cmp	r0, r3
  4009a0:	d008      	beq.n	4009b4 <adc_read+0x24>
				return temp;
			}
		}
	}
	
	if (descr == (&ADC_1)){
  4009a2:	4b17      	ldr	r3, [pc, #92]	; (400a00 <adc_read+0x70>)
  4009a4:	4298      	cmp	r0, r3
  4009a6:	d014      	beq.n	4009d2 <adc_read+0x42>
			}
		}
	}
	
	
	return 0;
  4009a8:	2000      	movs	r0, #0
  4009aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009ae:	4770      	bx	lr
				int temp = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  4009b0:	b298      	uxth	r0, r3
  4009b2:	e7fa      	b.n	4009aa <adc_read+0x1a>
  4009b4:	2200      	movs	r2, #0
		for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  4009b6:	2a05      	cmp	r2, #5
  4009b8:	dcf3      	bgt.n	4009a2 <adc_read+0x12>
			if((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk) == AFEC_LCDR_CHNB(channel)){
  4009ba:	4b12      	ldr	r3, [pc, #72]	; (400a04 <adc_read+0x74>)
  4009bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4009c0:	ea83 6401 	eor.w	r4, r3, r1, lsl #24
  4009c4:	f014 6f70 	tst.w	r4, #251658240	; 0xf000000
  4009c8:	d0f2      	beq.n	4009b0 <adc_read+0x20>
		for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  4009ca:	3201      	adds	r2, #1
  4009cc:	e7f3      	b.n	4009b6 <adc_read+0x26>
				int temp = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  4009ce:	b280      	uxth	r0, r0
  4009d0:	e7eb      	b.n	4009aa <adc_read+0x1a>
  4009d2:	2300      	movs	r3, #0
		for (int i =0; i<ADC_1_NUM_ACTIVE_CHANNELS; i++){
  4009d4:	2b03      	cmp	r3, #3
  4009d6:	dc0a      	bgt.n	4009ee <adc_read+0x5e>
			if((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk) == AFEC_LCDR_CHNB(channel)){
  4009d8:	4a0a      	ldr	r2, [pc, #40]	; (400a04 <adc_read+0x74>)
  4009da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  4009de:	69d0      	ldr	r0, [r2, #28]
  4009e0:	ea80 6201 	eor.w	r2, r0, r1, lsl #24
  4009e4:	f012 6f70 	tst.w	r2, #251658240	; 0xf000000
  4009e8:	d0f1      	beq.n	4009ce <adc_read+0x3e>
		for (int i =0; i<ADC_1_NUM_ACTIVE_CHANNELS; i++){
  4009ea:	3301      	adds	r3, #1
  4009ec:	e7f2      	b.n	4009d4 <adc_read+0x44>
	return 0;
  4009ee:	2000      	movs	r0, #0
  4009f0:	e7db      	b.n	4009aa <adc_read+0x1a>
  4009f2:	bf00      	nop
  4009f4:	2040050c 	.word	0x2040050c
  4009f8:	204004e9 	.word	0x204004e9
  4009fc:	20400610 	.word	0x20400610
  400a00:	204006e8 	.word	0x204006e8
  400a04:	20400234 	.word	0x20400234

00400a08 <pwm_0_callback>:
#include <hpl_pwm.h>
#include <hpl_pwm_config.h>

int counter = 0;

void pwm_0_callback(const struct pwm_descriptor *const descr){
  400a08:	4770      	bx	lr
	...

00400a0c <pwm_init_user>:
	}
	*/
}


void pwm_init_user(void){
  400a0c:	b508      	push	{r3, lr}
}

static inline void hri_pwm_set_CMR_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmr_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400a0e:	4b2e      	ldr	r3, [pc, #184]	; (400ac8 <pwm_init_user+0xbc>)
  400a10:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  400a14:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400a18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}

static inline void hri_pwm_set_DT_DTH_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400a1c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400a20:	f042 0222 	orr.w	r2, r2, #34	; 0x22
  400a24:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
}

static inline void hri_pwm_set_DT_DTL_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400a28:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400a2c:	f442 1208 	orr.w	r2, r2, #2228224	; 0x220000
  400a30:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400a34:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
  400a38:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400a3c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400a40:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400a44:	f042 0222 	orr.w	r2, r2, #34	; 0x22
  400a48:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400a4c:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400a50:	f442 1208 	orr.w	r2, r2, #2228224	; 0x220000
  400a54:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400a58:	4a1c      	ldr	r2, [pc, #112]	; (400acc <pwm_init_user+0xc0>)
  400a5a:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  400a5e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  400a62:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400a66:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400a6a:	f041 0122 	orr.w	r1, r1, #34	; 0x22
  400a6e:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400a72:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  400a76:	f441 1108 	orr.w	r1, r1, #2228224	; 0x220000
  400a7a:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
}

static inline void hri_pwm_set_CMPV_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmpv_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV |= mask;
  400a7e:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
  400a82:	f041 0101 	orr.w	r1, r1, #1
  400a86:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  400a8a:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
  400a8e:	f041 0101 	orr.w	r1, r1, #1
  400a92:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  400a96:	2201      	movs	r2, #1
  400a98:	611a      	str	r2, [r3, #16]
	
	
	//we want interrupt from one of the PWMs so that we can start the control loop
	//interrupt on PWM 0, channel 0 is enabled ; on PWM 1 is disabled
	hri_pwm_set_IMR1_CHID0_bit(PWM0);									//enable the interrupt from ADC 0, channel 0
	pwm_register_callback(&PWM_0, PWM_PERIOD_CB, pwm_0_callback);
  400a9a:	4a0d      	ldr	r2, [pc, #52]	; (400ad0 <pwm_init_user+0xc4>)
  400a9c:	2100      	movs	r1, #0
  400a9e:	480d      	ldr	r0, [pc, #52]	; (400ad4 <pwm_init_user+0xc8>)
  400aa0:	4b0d      	ldr	r3, [pc, #52]	; (400ad8 <pwm_init_user+0xcc>)
  400aa2:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400aa4:	4b0d      	ldr	r3, [pc, #52]	; (400adc <pwm_init_user+0xd0>)
  400aa6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400aaa:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400aac:	2260      	movs	r2, #96	; 0x60
  400aae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400aba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400abe:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ac2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400ac6:	bd08      	pop	{r3, pc}
  400ac8:	40020000 	.word	0x40020000
  400acc:	4005c000 	.word	0x4005c000
  400ad0:	00400a09 	.word	0x00400a09
  400ad4:	20400528 	.word	0x20400528
  400ad8:	0040165d 	.word	0x0040165d
  400adc:	e000e100 	.word	0xe000e100

00400ae0 <pwm_enable_all>:
}


//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400ae0:	b570      	push	{r4, r5, r6, lr}
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM |= mask;
  400ae2:	4a12      	ldr	r2, [pc, #72]	; (400b2c <pwm_enable_all+0x4c>)
  400ae4:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400ae8:	f043 0301 	orr.w	r3, r3, #1
  400aec:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
  400af0:	f502 3270 	add.w	r2, r2, #245760	; 0x3c000
  400af4:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400af8:	f043 0301 	orr.w	r3, r3, #1
  400afc:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	hri_pwm_set_CMPM_reg(PWM0, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	hri_pwm_set_CMPM_reg(PWM1, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  400b00:	4c0b      	ldr	r4, [pc, #44]	; (400b30 <pwm_enable_all+0x50>)
  400b02:	4620      	mov	r0, r4
  400b04:	4e0b      	ldr	r6, [pc, #44]	; (400b34 <pwm_enable_all+0x54>)
  400b06:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  400b08:	4d0b      	ldr	r5, [pc, #44]	; (400b38 <pwm_enable_all+0x58>)
  400b0a:	4628      	mov	r0, r5
  400b0c:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  400b0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400b12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400b16:	4620      	mov	r0, r4
  400b18:	4c08      	ldr	r4, [pc, #32]	; (400b3c <pwm_enable_all+0x5c>)
  400b1a:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD>>1);
  400b1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400b20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400b24:	4628      	mov	r0, r5
  400b26:	47a0      	blx	r4
  400b28:	bd70      	pop	{r4, r5, r6, pc}
  400b2a:	bf00      	nop
  400b2c:	40020000 	.word	0x40020000
  400b30:	20400528 	.word	0x20400528
  400b34:	00401621 	.word	0x00401621
  400b38:	204006cc 	.word	0x204006cc
  400b3c:	004016a5 	.word	0x004016a5

00400b40 <Current_Offset_Test>:
	printf("\n Current and Voltage Testing -----------------\n");
	printf("Raw Data \n");
	printf("CurrA = %i \t\t CurrB = %i \t\t CurrC = %i \n",current_test_data[0], current_test_data[1], current_test_data[2]);
	printf("Supply Voltage = %i  \n",voltage_test_data);
}
void Current_Offset_Test(void){
  400b40:	b580      	push	{r7, lr}
  400b42:	b084      	sub	sp, #16
	while(1){
		dma_adc_0_enable_for_one_transaction();
  400b44:	4b14      	ldr	r3, [pc, #80]	; (400b98 <Current_Offset_Test+0x58>)
  400b46:	4798      	blx	r3
		dma_adc_1_enable_for_one_transaction();
  400b48:	4b14      	ldr	r3, [pc, #80]	; (400b9c <Current_Offset_Test+0x5c>)
  400b4a:	4798      	blx	r3
		delay_ms(2);
  400b4c:	2002      	movs	r0, #2
  400b4e:	4d14      	ldr	r5, [pc, #80]	; (400ba0 <Current_Offset_Test+0x60>)
  400b50:	47a8      	blx	r5
		//printf("Curr A offset (V) - %f \t voltage -  %f  \t current - %f\n",curr_A_offset, raw_data_to_voltage(adc_read(ADC_CURRENT_A)), reconstruct_curr_A(adc_read(ADC_CURRENT_A)));
		printf("Curr B offset (V) - %f \t voltage -  %f  \t current - %f\n",curr_B_offset, raw_data_to_voltage(adc_read(ADC_CURRENT_B)), reconstruct_curr_B(adc_read(ADC_CURRENT_B)));
  400b52:	4c14      	ldr	r4, [pc, #80]	; (400ba4 <Current_Offset_Test+0x64>)
  400b54:	4b14      	ldr	r3, [pc, #80]	; (400ba8 <Current_Offset_Test+0x68>)
  400b56:	6818      	ldr	r0, [r3, #0]
  400b58:	47a0      	blx	r4
  400b5a:	4680      	mov	r8, r0
  400b5c:	4689      	mov	r9, r1
  400b5e:	4f13      	ldr	r7, [pc, #76]	; (400bac <Current_Offset_Test+0x6c>)
  400b60:	2102      	movs	r1, #2
  400b62:	4638      	mov	r0, r7
  400b64:	4e12      	ldr	r6, [pc, #72]	; (400bb0 <Current_Offset_Test+0x70>)
  400b66:	47b0      	blx	r6
  400b68:	4b12      	ldr	r3, [pc, #72]	; (400bb4 <Current_Offset_Test+0x74>)
  400b6a:	4798      	blx	r3
  400b6c:	4682      	mov	sl, r0
  400b6e:	2102      	movs	r1, #2
  400b70:	4638      	mov	r0, r7
  400b72:	47b0      	blx	r6
  400b74:	4b10      	ldr	r3, [pc, #64]	; (400bb8 <Current_Offset_Test+0x78>)
  400b76:	4798      	blx	r3
  400b78:	47a0      	blx	r4
  400b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400b7e:	4650      	mov	r0, sl
  400b80:	47a0      	blx	r4
  400b82:	e9cd 0100 	strd	r0, r1, [sp]
  400b86:	4642      	mov	r2, r8
  400b88:	464b      	mov	r3, r9
  400b8a:	480c      	ldr	r0, [pc, #48]	; (400bbc <Current_Offset_Test+0x7c>)
  400b8c:	490c      	ldr	r1, [pc, #48]	; (400bc0 <Current_Offset_Test+0x80>)
  400b8e:	4788      	blx	r1
		delay_ms(1000);
  400b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  400b94:	47a8      	blx	r5
  400b96:	e7d5      	b.n	400b44 <Current_Offset_Test+0x4>
  400b98:	0040066d 	.word	0x0040066d
  400b9c:	00400751 	.word	0x00400751
  400ba0:	00401401 	.word	0x00401401
  400ba4:	00402ebd 	.word	0x00402ebd
  400ba8:	20400510 	.word	0x20400510
  400bac:	20400610 	.word	0x20400610
  400bb0:	00400991 	.word	0x00400991
  400bb4:	004001e9 	.word	0x004001e9
  400bb8:	00400291 	.word	0x00400291
  400bbc:	00406044 	.word	0x00406044
  400bc0:	00403ee1 	.word	0x00403ee1

00400bc4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400bc4:	e7fe      	b.n	400bc4 <Dummy_Handler>
	...

00400bc8 <Reset_Handler>:
{
  400bc8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400bca:	4b10      	ldr	r3, [pc, #64]	; (400c0c <Reset_Handler+0x44>)
  400bcc:	4a10      	ldr	r2, [pc, #64]	; (400c10 <Reset_Handler+0x48>)
  400bce:	429a      	cmp	r2, r3
  400bd0:	d009      	beq.n	400be6 <Reset_Handler+0x1e>
  400bd2:	4b0e      	ldr	r3, [pc, #56]	; (400c0c <Reset_Handler+0x44>)
  400bd4:	4a0e      	ldr	r2, [pc, #56]	; (400c10 <Reset_Handler+0x48>)
  400bd6:	e003      	b.n	400be0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400bd8:	6811      	ldr	r1, [r2, #0]
  400bda:	6019      	str	r1, [r3, #0]
  400bdc:	3304      	adds	r3, #4
  400bde:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400be0:	490c      	ldr	r1, [pc, #48]	; (400c14 <Reset_Handler+0x4c>)
  400be2:	428b      	cmp	r3, r1
  400be4:	d3f8      	bcc.n	400bd8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400be6:	4b0c      	ldr	r3, [pc, #48]	; (400c18 <Reset_Handler+0x50>)
  400be8:	e002      	b.n	400bf0 <Reset_Handler+0x28>
                *pDest++ = 0;
  400bea:	2200      	movs	r2, #0
  400bec:	601a      	str	r2, [r3, #0]
  400bee:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400bf0:	4a0a      	ldr	r2, [pc, #40]	; (400c1c <Reset_Handler+0x54>)
  400bf2:	4293      	cmp	r3, r2
  400bf4:	d3f9      	bcc.n	400bea <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400bf6:	4a0a      	ldr	r2, [pc, #40]	; (400c20 <Reset_Handler+0x58>)
  400bf8:	4b0a      	ldr	r3, [pc, #40]	; (400c24 <Reset_Handler+0x5c>)
  400bfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400bfe:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400c00:	4b09      	ldr	r3, [pc, #36]	; (400c28 <Reset_Handler+0x60>)
  400c02:	4798      	blx	r3
        main();
  400c04:	4b09      	ldr	r3, [pc, #36]	; (400c2c <Reset_Handler+0x64>)
  400c06:	4798      	blx	r3
  400c08:	e7fe      	b.n	400c08 <Reset_Handler+0x40>
  400c0a:	bf00      	nop
  400c0c:	20400000 	.word	0x20400000
  400c10:	004067d8 	.word	0x004067d8
  400c14:	20400218 	.word	0x20400218
  400c18:	20400218 	.word	0x20400218
  400c1c:	20400718 	.word	0x20400718
  400c20:	e000ed00 	.word	0xe000ed00
  400c24:	00400000 	.word	0x00400000
  400c28:	004035b5 	.word	0x004035b5
  400c2c:	00402a65 	.word	0x00402a65

00400c30 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  400c30:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c32:	b085      	sub	sp, #20
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400c34:	4b20      	ldr	r3, [pc, #128]	; (400cb8 <ADC_1_init+0x88>)
  400c36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  400c3a:	f413 7f80 	tst.w	r3, #256	; 0x100
  400c3e:	d104      	bne.n	400c4a <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400c40:	f44f 7280 	mov.w	r2, #256	; 0x100
  400c44:	4b1c      	ldr	r3, [pc, #112]	; (400cb8 <ADC_1_init+0x88>)
  400c46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  400c4a:	4d1c      	ldr	r5, [pc, #112]	; (400cbc <ADC_1_init+0x8c>)
  400c4c:	4c1c      	ldr	r4, [pc, #112]	; (400cc0 <ADC_1_init+0x90>)
  400c4e:	2600      	movs	r6, #0
  400c50:	9602      	str	r6, [sp, #8]
  400c52:	4b1c      	ldr	r3, [pc, #112]	; (400cc4 <ADC_1_init+0x94>)
  400c54:	9301      	str	r3, [sp, #4]
  400c56:	2304      	movs	r3, #4
  400c58:	9300      	str	r3, [sp, #0]
  400c5a:	2306      	movs	r3, #6
  400c5c:	462a      	mov	r2, r5
  400c5e:	491a      	ldr	r1, [pc, #104]	; (400cc8 <ADC_1_init+0x98>)
  400c60:	4620      	mov	r0, r4
  400c62:	4f1a      	ldr	r7, [pc, #104]	; (400ccc <ADC_1_init+0x9c>)
  400c64:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  400c66:	2310      	movs	r3, #16
  400c68:	f105 0208 	add.w	r2, r5, #8
  400c6c:	4631      	mov	r1, r6
  400c6e:	4620      	mov	r0, r4
  400c70:	4e17      	ldr	r6, [pc, #92]	; (400cd0 <ADC_1_init+0xa0>)
  400c72:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  400c74:	2310      	movs	r3, #16
  400c76:	f105 0218 	add.w	r2, r5, #24
  400c7a:	2101      	movs	r1, #1
  400c7c:	4620      	mov	r0, r4
  400c7e:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  400c80:	2310      	movs	r3, #16
  400c82:	f105 0228 	add.w	r2, r5, #40	; 0x28
  400c86:	2105      	movs	r1, #5
  400c88:	4620      	mov	r0, r4
  400c8a:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  400c8c:	2310      	movs	r3, #16
  400c8e:	f105 0238 	add.w	r2, r5, #56	; 0x38
  400c92:	2106      	movs	r1, #6
  400c94:	4620      	mov	r0, r4
  400c96:	47b0      	blx	r6
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400c98:	2202      	movs	r2, #2
  400c9a:	4b0e      	ldr	r3, [pc, #56]	; (400cd4 <ADC_1_init+0xa4>)
  400c9c:	601a      	str	r2, [r3, #0]
  400c9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400ca6:	601a      	str	r2, [r3, #0]
  400ca8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400cac:	601a      	str	r2, [r3, #0]
  400cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400cb2:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  400cb4:	b005      	add	sp, #20
  400cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400cb8:	400e0600 	.word	0x400e0600
  400cbc:	20400260 	.word	0x20400260
  400cc0:	204006e8 	.word	0x204006e8
  400cc4:	20400588 	.word	0x20400588
  400cc8:	40064000 	.word	0x40064000
  400ccc:	00401231 	.word	0x00401231
  400cd0:	004012d9 	.word	0x004012d9
  400cd4:	400e1000 	.word	0x400e1000

00400cd8 <ADC_0_init>:
{
  400cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400cdc:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400cde:	4b2a      	ldr	r3, [pc, #168]	; (400d88 <ADC_0_init+0xb0>)
  400ce0:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400ce2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400ce6:	d103      	bne.n	400cf0 <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400ce8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400cec:	4b26      	ldr	r3, [pc, #152]	; (400d88 <ADC_0_init+0xb0>)
  400cee:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  400cf0:	4d26      	ldr	r5, [pc, #152]	; (400d8c <ADC_0_init+0xb4>)
  400cf2:	4c27      	ldr	r4, [pc, #156]	; (400d90 <ADC_0_init+0xb8>)
  400cf4:	2600      	movs	r6, #0
  400cf6:	9602      	str	r6, [sp, #8]
  400cf8:	4b26      	ldr	r3, [pc, #152]	; (400d94 <ADC_0_init+0xbc>)
  400cfa:	9301      	str	r3, [sp, #4]
  400cfc:	2706      	movs	r7, #6
  400cfe:	9700      	str	r7, [sp, #0]
  400d00:	230a      	movs	r3, #10
  400d02:	f105 0248 	add.w	r2, r5, #72	; 0x48
  400d06:	4924      	ldr	r1, [pc, #144]	; (400d98 <ADC_0_init+0xc0>)
  400d08:	4620      	mov	r0, r4
  400d0a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 400da8 <ADC_0_init+0xd0>
  400d0e:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  400d10:	2310      	movs	r3, #16
  400d12:	f105 0254 	add.w	r2, r5, #84	; 0x54
  400d16:	4631      	mov	r1, r6
  400d18:	4620      	mov	r0, r4
  400d1a:	4e20      	ldr	r6, [pc, #128]	; (400d9c <ADC_0_init+0xc4>)
  400d1c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  400d1e:	2310      	movs	r3, #16
  400d20:	f105 0264 	add.w	r2, r5, #100	; 0x64
  400d24:	2102      	movs	r1, #2
  400d26:	4620      	mov	r0, r4
  400d28:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  400d2a:	2310      	movs	r3, #16
  400d2c:	f105 0274 	add.w	r2, r5, #116	; 0x74
  400d30:	2105      	movs	r1, #5
  400d32:	4620      	mov	r0, r4
  400d34:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  400d36:	2310      	movs	r3, #16
  400d38:	f105 0284 	add.w	r2, r5, #132	; 0x84
  400d3c:	4639      	mov	r1, r7
  400d3e:	4620      	mov	r0, r4
  400d40:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  400d42:	2310      	movs	r3, #16
  400d44:	f105 0294 	add.w	r2, r5, #148	; 0x94
  400d48:	2108      	movs	r1, #8
  400d4a:	4620      	mov	r0, r4
  400d4c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  400d4e:	2310      	movs	r3, #16
  400d50:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  400d54:	210a      	movs	r1, #10
  400d56:	4620      	mov	r0, r4
  400d58:	47b0      	blx	r6
  400d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400d5e:	4b10      	ldr	r3, [pc, #64]	; (400da0 <ADC_0_init+0xc8>)
  400d60:	601a      	str	r2, [r3, #0]
  400d62:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400d66:	2208      	movs	r2, #8
  400d68:	601a      	str	r2, [r3, #0]
  400d6a:	2204      	movs	r2, #4
  400d6c:	601a      	str	r2, [r3, #0]
  400d6e:	4a0d      	ldr	r2, [pc, #52]	; (400da4 <ADC_0_init+0xcc>)
  400d70:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400d74:	6011      	str	r1, [r2, #0]
  400d76:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400d7a:	6011      	str	r1, [r2, #0]
  400d7c:	2201      	movs	r2, #1
  400d7e:	601a      	str	r2, [r3, #0]
}
  400d80:	b004      	add	sp, #16
  400d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d86:	bf00      	nop
  400d88:	400e0600 	.word	0x400e0600
  400d8c:	20400260 	.word	0x20400260
  400d90:	20400610 	.word	0x20400610
  400d94:	2040063c 	.word	0x2040063c
  400d98:	4003c000 	.word	0x4003c000
  400d9c:	004012d9 	.word	0x004012d9
  400da0:	400e1400 	.word	0x400e1400
  400da4:	400e0e00 	.word	0x400e0e00
  400da8:	00401231 	.word	0x00401231

00400dac <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400dac:	4b04      	ldr	r3, [pc, #16]	; (400dc0 <EXTERNAL_IRQ_D_init+0x14>)
  400dae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400db2:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  400db4:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  400db6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400dba:	601a      	str	r2, [r3, #0]
  400dbc:	4770      	bx	lr
  400dbe:	bf00      	nop
  400dc0:	400e1400 	.word	0x400e1400

00400dc4 <EXTERNAL_IRQ_B_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400dc4:	4b04      	ldr	r3, [pc, #16]	; (400dd8 <EXTERNAL_IRQ_B_init+0x14>)
  400dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400dca:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400dcc:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400dd2:	601a      	str	r2, [r3, #0]
  400dd4:	4770      	bx	lr
  400dd6:	bf00      	nop
  400dd8:	400e1000 	.word	0x400e1000

00400ddc <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400ddc:	4b06      	ldr	r3, [pc, #24]	; (400df8 <EXTERNAL_IRQ_A_init+0x1c>)
  400dde:	2204      	movs	r2, #4
  400de0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400de2:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400de4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400de8:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400dea:	2220      	movs	r2, #32
  400dec:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400dee:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400df0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400df4:	601a      	str	r2, [r3, #0]
  400df6:	4770      	bx	lr
  400df8:	400e0e00 	.word	0x400e0e00

00400dfc <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400dfc:	4b16      	ldr	r3, [pc, #88]	; (400e58 <PWM_0_PORT_init+0x5c>)
  400dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400e04:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400e06:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e08:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  400e0c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400e12:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400e14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e16:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  400e1a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400e1c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e1e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400e22:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400e28:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400e2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e2c:	f022 0202 	bic.w	r2, r2, #2
  400e30:	671a      	str	r2, [r3, #112]	; 0x70
  400e32:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e34:	f022 0202 	bic.w	r2, r2, #2
  400e38:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e3a:	2202      	movs	r2, #2
  400e3c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400e3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e40:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400e44:	671a      	str	r2, [r3, #112]	; 0x70
  400e46:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e48:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400e4c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400e52:	605a      	str	r2, [r3, #4]
  400e54:	4770      	bx	lr
  400e56:	bf00      	nop
  400e58:	400e0e00 	.word	0x400e0e00

00400e5c <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400e5c:	4b04      	ldr	r3, [pc, #16]	; (400e70 <PWM_0_CLOCK_init+0x14>)
  400e5e:	699b      	ldr	r3, [r3, #24]
  400e60:	2b00      	cmp	r3, #0
  400e62:	db03      	blt.n	400e6c <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400e64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400e68:	4b01      	ldr	r3, [pc, #4]	; (400e70 <PWM_0_CLOCK_init+0x14>)
  400e6a:	611a      	str	r2, [r3, #16]
  400e6c:	4770      	bx	lr
  400e6e:	bf00      	nop
  400e70:	400e0600 	.word	0x400e0600

00400e74 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400e74:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  400e76:	4b06      	ldr	r3, [pc, #24]	; (400e90 <PWM_0_init+0x1c>)
  400e78:	4798      	blx	r3
	PWM_0_PORT_init();
  400e7a:	4b06      	ldr	r3, [pc, #24]	; (400e94 <PWM_0_init+0x20>)
  400e7c:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400e7e:	4b06      	ldr	r3, [pc, #24]	; (400e98 <PWM_0_init+0x24>)
  400e80:	4798      	blx	r3
  400e82:	4602      	mov	r2, r0
  400e84:	4905      	ldr	r1, [pc, #20]	; (400e9c <PWM_0_init+0x28>)
  400e86:	4806      	ldr	r0, [pc, #24]	; (400ea0 <PWM_0_init+0x2c>)
  400e88:	4b06      	ldr	r3, [pc, #24]	; (400ea4 <PWM_0_init+0x30>)
  400e8a:	4798      	blx	r3
  400e8c:	bd08      	pop	{r3, pc}
  400e8e:	bf00      	nop
  400e90:	00400e5d 	.word	0x00400e5d
  400e94:	00400dfd 	.word	0x00400dfd
  400e98:	004024ad 	.word	0x004024ad
  400e9c:	40020000 	.word	0x40020000
  400ea0:	20400528 	.word	0x20400528
  400ea4:	004015dd 	.word	0x004015dd

00400ea8 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400ea8:	4b0c      	ldr	r3, [pc, #48]	; (400edc <PWM_1_PORT_init+0x34>)
  400eaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400eac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400eb0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400eb2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400eb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400eb8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400eba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400ebe:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400ec0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400ec4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400ec6:	f042 0201 	orr.w	r2, r2, #1
  400eca:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400ecc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400ece:	f022 0201 	bic.w	r2, r2, #1
  400ed2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400ed4:	2201      	movs	r2, #1
  400ed6:	605a      	str	r2, [r3, #4]
  400ed8:	4770      	bx	lr
  400eda:	bf00      	nop
  400edc:	400e0e00 	.word	0x400e0e00

00400ee0 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400ee0:	4b05      	ldr	r3, [pc, #20]	; (400ef8 <PWM_1_CLOCK_init+0x18>)
  400ee2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400ee6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  400eea:	d104      	bne.n	400ef6 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ef0:	4b01      	ldr	r3, [pc, #4]	; (400ef8 <PWM_1_CLOCK_init+0x18>)
  400ef2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400ef6:	4770      	bx	lr
  400ef8:	400e0600 	.word	0x400e0600

00400efc <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  400efc:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  400efe:	4b06      	ldr	r3, [pc, #24]	; (400f18 <PWM_1_init+0x1c>)
  400f00:	4798      	blx	r3
	PWM_1_PORT_init();
  400f02:	4b06      	ldr	r3, [pc, #24]	; (400f1c <PWM_1_init+0x20>)
  400f04:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400f06:	4b06      	ldr	r3, [pc, #24]	; (400f20 <PWM_1_init+0x24>)
  400f08:	4798      	blx	r3
  400f0a:	4602      	mov	r2, r0
  400f0c:	4905      	ldr	r1, [pc, #20]	; (400f24 <PWM_1_init+0x28>)
  400f0e:	4806      	ldr	r0, [pc, #24]	; (400f28 <PWM_1_init+0x2c>)
  400f10:	4b06      	ldr	r3, [pc, #24]	; (400f2c <PWM_1_init+0x30>)
  400f12:	4798      	blx	r3
  400f14:	bd08      	pop	{r3, pc}
  400f16:	bf00      	nop
  400f18:	00400ee1 	.word	0x00400ee1
  400f1c:	00400ea9 	.word	0x00400ea9
  400f20:	004024ad 	.word	0x004024ad
  400f24:	4005c000 	.word	0x4005c000
  400f28:	204006cc 	.word	0x204006cc
  400f2c:	004015dd 	.word	0x004015dd

00400f30 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400f30:	4b06      	ldr	r3, [pc, #24]	; (400f4c <ENCODER_A_PORT_init+0x1c>)
  400f32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f34:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400f38:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400f3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f3c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  400f40:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400f42:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400f46:	605a      	str	r2, [r3, #4]
  400f48:	4770      	bx	lr
  400f4a:	bf00      	nop
  400f4c:	400e0e00 	.word	0x400e0e00

00400f50 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  400f50:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400f52:	4b09      	ldr	r3, [pc, #36]	; (400f78 <ENCODER_A_init+0x28>)
  400f54:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400f56:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400f5a:	d103      	bne.n	400f64 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400f5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400f60:	4b05      	ldr	r3, [pc, #20]	; (400f78 <ENCODER_A_init+0x28>)
  400f62:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  400f64:	4b05      	ldr	r3, [pc, #20]	; (400f7c <ENCODER_A_init+0x2c>)
  400f66:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  400f68:	4b05      	ldr	r3, [pc, #20]	; (400f80 <ENCODER_A_init+0x30>)
  400f6a:	4798      	blx	r3
  400f6c:	4602      	mov	r2, r0
  400f6e:	4905      	ldr	r1, [pc, #20]	; (400f84 <ENCODER_A_init+0x34>)
  400f70:	4805      	ldr	r0, [pc, #20]	; (400f88 <ENCODER_A_init+0x38>)
  400f72:	4b06      	ldr	r3, [pc, #24]	; (400f8c <ENCODER_A_init+0x3c>)
  400f74:	4798      	blx	r3
  400f76:	bd08      	pop	{r3, pc}
  400f78:	400e0600 	.word	0x400e0600
  400f7c:	00400f31 	.word	0x00400f31
  400f80:	00402683 	.word	0x00402683
  400f84:	4000c000 	.word	0x4000c000
  400f88:	204005f4 	.word	0x204005f4
  400f8c:	0040178d 	.word	0x0040178d

00400f90 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400f90:	4b06      	ldr	r3, [pc, #24]	; (400fac <ENCODER_B_PORT_init+0x1c>)
  400f92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f94:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  400f98:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400f9a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f9c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  400fa0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400fa2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400fa6:	605a      	str	r2, [r3, #4]
  400fa8:	4770      	bx	lr
  400faa:	bf00      	nop
  400fac:	400e1400 	.word	0x400e1400

00400fb0 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  400fb0:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400fb2:	4b0a      	ldr	r3, [pc, #40]	; (400fdc <ENCODER_B_init+0x2c>)
  400fb4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400fb8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  400fbc:	d104      	bne.n	400fc8 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400fbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400fc2:	4b06      	ldr	r3, [pc, #24]	; (400fdc <ENCODER_B_init+0x2c>)
  400fc4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  400fc8:	4b05      	ldr	r3, [pc, #20]	; (400fe0 <ENCODER_B_init+0x30>)
  400fca:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  400fcc:	4b05      	ldr	r3, [pc, #20]	; (400fe4 <ENCODER_B_init+0x34>)
  400fce:	4798      	blx	r3
  400fd0:	4602      	mov	r2, r0
  400fd2:	4905      	ldr	r1, [pc, #20]	; (400fe8 <ENCODER_B_init+0x38>)
  400fd4:	4805      	ldr	r0, [pc, #20]	; (400fec <ENCODER_B_init+0x3c>)
  400fd6:	4b06      	ldr	r3, [pc, #24]	; (400ff0 <ENCODER_B_init+0x40>)
  400fd8:	4798      	blx	r3
  400fda:	bd08      	pop	{r3, pc}
  400fdc:	400e0600 	.word	0x400e0600
  400fe0:	00400f91 	.word	0x00400f91
  400fe4:	00402683 	.word	0x00402683
  400fe8:	40054000 	.word	0x40054000
  400fec:	20400544 	.word	0x20400544
  400ff0:	0040178d 	.word	0x0040178d

00400ff4 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400ff4:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400ff6:	4802      	ldr	r0, [pc, #8]	; (401000 <delay_driver_init+0xc>)
  400ff8:	4b02      	ldr	r3, [pc, #8]	; (401004 <delay_driver_init+0x10>)
  400ffa:	4798      	blx	r3
  400ffc:	bd08      	pop	{r3, pc}
  400ffe:	bf00      	nop
  401000:	e000e010 	.word	0xe000e010
  401004:	004013ed 	.word	0x004013ed

00401008 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401008:	4b0f      	ldr	r3, [pc, #60]	; (401048 <EDBG_COM_PORT_init+0x40>)
  40100a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40100c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401010:	671a      	str	r2, [r3, #112]	; 0x70
  401012:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401014:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401018:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40101a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40101e:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  401020:	4a0a      	ldr	r2, [pc, #40]	; (40104c <EDBG_COM_PORT_init+0x44>)
  401022:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  401026:	f043 0310 	orr.w	r3, r3, #16
  40102a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40102e:	4b08      	ldr	r3, [pc, #32]	; (401050 <EDBG_COM_PORT_init+0x48>)
  401030:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401032:	f042 0210 	orr.w	r2, r2, #16
  401036:	671a      	str	r2, [r3, #112]	; 0x70
  401038:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40103a:	f042 0210 	orr.w	r2, r2, #16
  40103e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  401040:	2210      	movs	r2, #16
  401042:	605a      	str	r2, [r3, #4]
  401044:	4770      	bx	lr
  401046:	bf00      	nop
  401048:	400e0e00 	.word	0x400e0e00
  40104c:	40088000 	.word	0x40088000
  401050:	400e1000 	.word	0x400e1000

00401054 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  401054:	4b04      	ldr	r3, [pc, #16]	; (401068 <EDBG_COM_CLOCK_init+0x14>)
  401056:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  401058:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  40105c:	d103      	bne.n	401066 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40105e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401062:	4b01      	ldr	r3, [pc, #4]	; (401068 <EDBG_COM_CLOCK_init+0x14>)
  401064:	611a      	str	r2, [r3, #16]
  401066:	4770      	bx	lr
  401068:	400e0600 	.word	0x400e0600

0040106c <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  40106c:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  40106e:	4b06      	ldr	r3, [pc, #24]	; (401088 <EDBG_COM_init+0x1c>)
  401070:	4798      	blx	r3
	EDBG_COM_PORT_init();
  401072:	4b06      	ldr	r3, [pc, #24]	; (40108c <EDBG_COM_init+0x20>)
  401074:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  401076:	4b06      	ldr	r3, [pc, #24]	; (401090 <EDBG_COM_init+0x24>)
  401078:	4798      	blx	r3
  40107a:	4602      	mov	r2, r0
  40107c:	4905      	ldr	r1, [pc, #20]	; (401094 <EDBG_COM_init+0x28>)
  40107e:	4806      	ldr	r0, [pc, #24]	; (401098 <EDBG_COM_init+0x2c>)
  401080:	4b06      	ldr	r3, [pc, #24]	; (40109c <EDBG_COM_init+0x30>)
  401082:	4798      	blx	r3
  401084:	bd08      	pop	{r3, pc}
  401086:	bf00      	nop
  401088:	00401055 	.word	0x00401055
  40108c:	00401009 	.word	0x00401009
  401090:	004028c5 	.word	0x004028c5
  401094:	40028000 	.word	0x40028000
  401098:	204005e8 	.word	0x204005e8
  40109c:	004018d5 	.word	0x004018d5

004010a0 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  4010a0:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4010a2:	4b37      	ldr	r3, [pc, #220]	; (401180 <system_init+0xe0>)
  4010a4:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4010a6:	4b37      	ldr	r3, [pc, #220]	; (401184 <system_init+0xe4>)
  4010a8:	699b      	ldr	r3, [r3, #24]
  4010aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4010ae:	d103      	bne.n	4010b8 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4010b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4010b4:	4b33      	ldr	r3, [pc, #204]	; (401184 <system_init+0xe4>)
  4010b6:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4010b8:	4b32      	ldr	r3, [pc, #200]	; (401184 <system_init+0xe4>)
  4010ba:	699b      	ldr	r3, [r3, #24]
  4010bc:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4010c0:	d103      	bne.n	4010ca <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4010c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4010c6:	4b2f      	ldr	r3, [pc, #188]	; (401184 <system_init+0xe4>)
  4010c8:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4010ca:	4b2e      	ldr	r3, [pc, #184]	; (401184 <system_init+0xe4>)
  4010cc:	699b      	ldr	r3, [r3, #24]
  4010ce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  4010d2:	d103      	bne.n	4010dc <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4010d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4010d8:	4b2a      	ldr	r3, [pc, #168]	; (401184 <system_init+0xe4>)
  4010da:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4010dc:	4b29      	ldr	r3, [pc, #164]	; (401184 <system_init+0xe4>)
  4010de:	699b      	ldr	r3, [r3, #24]
  4010e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4010e4:	d103      	bne.n	4010ee <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4010e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4010ea:	4b26      	ldr	r3, [pc, #152]	; (401184 <system_init+0xe4>)
  4010ec:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  4010ee:	4a26      	ldr	r2, [pc, #152]	; (401188 <system_init+0xe8>)
  4010f0:	6853      	ldr	r3, [r2, #4]
  4010f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4010f6:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  4010f8:	4b24      	ldr	r3, [pc, #144]	; (40118c <system_init+0xec>)
  4010fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4010fe:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  401100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  401104:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  401106:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401108:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40110c:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40110e:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401110:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401116:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401118:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40111a:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40111c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  401120:	f44f 7080 	mov.w	r0, #256	; 0x100
  401124:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401126:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401128:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40112a:	f44f 7000 	mov.w	r0, #512	; 0x200
  40112e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401130:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401132:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401134:	f503 7300 	add.w	r3, r3, #512	; 0x200
  401138:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40113a:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40113c:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40113e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401142:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  401144:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  401146:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401148:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  40114a:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40114c:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  40114e:	4b10      	ldr	r3, [pc, #64]	; (401190 <system_init+0xf0>)
  401150:	4798      	blx	r3
	ADC_1_init();
  401152:	4b10      	ldr	r3, [pc, #64]	; (401194 <system_init+0xf4>)
  401154:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  401156:	4b10      	ldr	r3, [pc, #64]	; (401198 <system_init+0xf8>)
  401158:	4798      	blx	r3
	EXTERNAL_IRQ_B_init();
  40115a:	4b10      	ldr	r3, [pc, #64]	; (40119c <system_init+0xfc>)
  40115c:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  40115e:	4b10      	ldr	r3, [pc, #64]	; (4011a0 <system_init+0x100>)
  401160:	4798      	blx	r3

	PWM_0_init();
  401162:	4b10      	ldr	r3, [pc, #64]	; (4011a4 <system_init+0x104>)
  401164:	4798      	blx	r3

	PWM_1_init();
  401166:	4b10      	ldr	r3, [pc, #64]	; (4011a8 <system_init+0x108>)
  401168:	4798      	blx	r3
	ENCODER_A_init();
  40116a:	4b10      	ldr	r3, [pc, #64]	; (4011ac <system_init+0x10c>)
  40116c:	4798      	blx	r3
	ENCODER_B_init();
  40116e:	4b10      	ldr	r3, [pc, #64]	; (4011b0 <system_init+0x110>)
  401170:	4798      	blx	r3

	delay_driver_init();
  401172:	4b10      	ldr	r3, [pc, #64]	; (4011b4 <system_init+0x114>)
  401174:	4798      	blx	r3

	EDBG_COM_init();
  401176:	4b10      	ldr	r3, [pc, #64]	; (4011b8 <system_init+0x118>)
  401178:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  40117a:	4b10      	ldr	r3, [pc, #64]	; (4011bc <system_init+0x11c>)
  40117c:	4798      	blx	r3
  40117e:	bd08      	pop	{r3, pc}
  401180:	00401d15 	.word	0x00401d15
  401184:	400e0600 	.word	0x400e0600
  401188:	400e1850 	.word	0x400e1850
  40118c:	400e0e00 	.word	0x400e0e00
  401190:	00400cd9 	.word	0x00400cd9
  401194:	00400c31 	.word	0x00400c31
  401198:	00400dad 	.word	0x00400dad
  40119c:	00400dc5 	.word	0x00400dc5
  4011a0:	00400ddd 	.word	0x00400ddd
  4011a4:	00400e75 	.word	0x00400e75
  4011a8:	00400efd 	.word	0x00400efd
  4011ac:	00400f51 	.word	0x00400f51
  4011b0:	00400fb1 	.word	0x00400fb1
  4011b4:	00400ff5 	.word	0x00400ff5
  4011b8:	0040106d 	.word	0x0040106d
  4011bc:	00401465 	.word	0x00401465

004011c0 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  4011c0:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  4011c2:	6983      	ldr	r3, [r0, #24]
  4011c4:	b103      	cbz	r3, 4011c8 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  4011c6:	4798      	blx	r3
  4011c8:	bd08      	pop	{r3, pc}

004011ca <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  4011ca:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  4011cc:	69c3      	ldr	r3, [r0, #28]
  4011ce:	b103      	cbz	r3, 4011d2 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  4011d0:	4798      	blx	r3
  4011d2:	bd08      	pop	{r3, pc}

004011d4 <adc_async_channel_conversion_done>:
{
  4011d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4011d8:	4605      	mov	r5, r0
  4011da:	4688      	mov	r8, r1
  4011dc:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  4011de:	6a03      	ldr	r3, [r0, #32]
  4011e0:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  4011e2:	6a87      	ldr	r7, [r0, #40]	; 0x28
  4011e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4011e8:	00de      	lsls	r6, r3, #3
  4011ea:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  4011ec:	f104 0a04 	add.w	sl, r4, #4
  4011f0:	b2d1      	uxtb	r1, r2
  4011f2:	4650      	mov	r0, sl
  4011f4:	4b0c      	ldr	r3, [pc, #48]	; (401228 <adc_async_channel_conversion_done+0x54>)
  4011f6:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  4011f8:	4628      	mov	r0, r5
  4011fa:	4b0c      	ldr	r3, [pc, #48]	; (40122c <adc_async_channel_conversion_done+0x58>)
  4011fc:	4798      	blx	r3
  4011fe:	2801      	cmp	r0, #1
  401200:	d907      	bls.n	401212 <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  401202:	ea4f 2119 	mov.w	r1, r9, lsr #8
  401206:	4650      	mov	r0, sl
  401208:	4b07      	ldr	r3, [pc, #28]	; (401228 <adc_async_channel_conversion_done+0x54>)
  40120a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  40120c:	8aa3      	ldrh	r3, [r4, #20]
  40120e:	3301      	adds	r3, #1
  401210:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  401212:	8aa3      	ldrh	r3, [r4, #20]
  401214:	3301      	adds	r3, #1
  401216:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  401218:	59bb      	ldr	r3, [r7, r6]
  40121a:	b113      	cbz	r3, 401222 <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  40121c:	4641      	mov	r1, r8
  40121e:	4628      	mov	r0, r5
  401220:	4798      	blx	r3
  401222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401226:	bf00      	nop
  401228:	004019ed 	.word	0x004019ed
  40122c:	00401cfd 	.word	0x00401cfd

00401230 <adc_async_init>:
{
  401230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401234:	4616      	mov	r6, r2
  401236:	461c      	mov	r4, r3
  401238:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  40123c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  40123e:	4607      	mov	r7, r0
  401240:	4689      	mov	r9, r1
  401242:	2800      	cmp	r0, #0
  401244:	bf18      	it	ne
  401246:	2900      	cmpne	r1, #0
  401248:	d00b      	beq.n	401262 <adc_async_init+0x32>
  40124a:	1c13      	adds	r3, r2, #0
  40124c:	bf18      	it	ne
  40124e:	2301      	movne	r3, #1
  401250:	f1b8 0f00 	cmp.w	r8, #0
  401254:	d017      	beq.n	401286 <adc_async_init+0x56>
  401256:	b1b3      	cbz	r3, 401286 <adc_async_init+0x56>
  401258:	b10d      	cbz	r5, 40125e <adc_async_init+0x2e>
  40125a:	2001      	movs	r0, #1
  40125c:	e002      	b.n	401264 <adc_async_init+0x34>
  40125e:	2000      	movs	r0, #0
  401260:	e000      	b.n	401264 <adc_async_init+0x34>
  401262:	2000      	movs	r0, #0
  401264:	f8df b068 	ldr.w	fp, [pc, #104]	; 4012d0 <adc_async_init+0xa0>
  401268:	223f      	movs	r2, #63	; 0x3f
  40126a:	4659      	mov	r1, fp
  40126c:	f8df a064 	ldr.w	sl, [pc, #100]	; 4012d4 <adc_async_init+0xa4>
  401270:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  401272:	1c60      	adds	r0, r4, #1
  401274:	2240      	movs	r2, #64	; 0x40
  401276:	4659      	mov	r1, fp
  401278:	4580      	cmp	r8, r0
  40127a:	bfcc      	ite	gt
  40127c:	2000      	movgt	r0, #0
  40127e:	2001      	movle	r0, #1
  401280:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  401282:	2300      	movs	r3, #0
  401284:	e005      	b.n	401292 <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  401286:	2000      	movs	r0, #0
  401288:	e7ec      	b.n	401264 <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  40128a:	22ff      	movs	r2, #255	; 0xff
  40128c:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  40128e:	3301      	adds	r3, #1
  401290:	b2db      	uxtb	r3, r3
  401292:	42a3      	cmp	r3, r4
  401294:	d9f9      	bls.n	40128a <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  401296:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  401298:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  40129c:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  4012a0:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  4012a2:	4649      	mov	r1, r9
  4012a4:	4638      	mov	r0, r7
  4012a6:	4b06      	ldr	r3, [pc, #24]	; (4012c0 <adc_async_init+0x90>)
  4012a8:	4798      	blx	r3
	if (init_status) {
  4012aa:	4603      	mov	r3, r0
  4012ac:	b928      	cbnz	r0, 4012ba <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  4012ae:	4a05      	ldr	r2, [pc, #20]	; (4012c4 <adc_async_init+0x94>)
  4012b0:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  4012b2:	4a05      	ldr	r2, [pc, #20]	; (4012c8 <adc_async_init+0x98>)
  4012b4:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  4012b6:	4a05      	ldr	r2, [pc, #20]	; (4012cc <adc_async_init+0x9c>)
  4012b8:	607a      	str	r2, [r7, #4]
}
  4012ba:	4618      	mov	r0, r3
  4012bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4012c0:	00401c3d 	.word	0x00401c3d
  4012c4:	004011d5 	.word	0x004011d5
  4012c8:	004011c1 	.word	0x004011c1
  4012cc:	004011cb 	.word	0x004011cb
  4012d0:	00406124 	.word	0x00406124
  4012d4:	00401949 	.word	0x00401949

004012d8 <adc_async_register_channel_buffer>:
{
  4012d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4012dc:	460e      	mov	r6, r1
  4012de:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  4012e0:	4605      	mov	r5, r0
  4012e2:	4690      	mov	r8, r2
  4012e4:	2800      	cmp	r0, #0
  4012e6:	bf18      	it	ne
  4012e8:	2a00      	cmpne	r2, #0
  4012ea:	d002      	beq.n	4012f2 <adc_async_register_channel_buffer+0x1a>
  4012ec:	b9c3      	cbnz	r3, 401320 <adc_async_register_channel_buffer+0x48>
  4012ee:	2000      	movs	r0, #0
  4012f0:	e000      	b.n	4012f4 <adc_async_register_channel_buffer+0x1c>
  4012f2:	2000      	movs	r0, #0
  4012f4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 40138c <adc_async_register_channel_buffer+0xb4>
  4012f8:	2266      	movs	r2, #102	; 0x66
  4012fa:	4649      	mov	r1, r9
  4012fc:	4c21      	ldr	r4, [pc, #132]	; (401384 <adc_async_register_channel_buffer+0xac>)
  4012fe:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  401300:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  401304:	2267      	movs	r2, #103	; 0x67
  401306:	4649      	mov	r1, r9
  401308:	42b0      	cmp	r0, r6
  40130a:	bf34      	ite	cc
  40130c:	2000      	movcc	r0, #0
  40130e:	2001      	movcs	r0, #1
  401310:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  401312:	6a29      	ldr	r1, [r5, #32]
  401314:	5d8b      	ldrb	r3, [r1, r6]
  401316:	2bff      	cmp	r3, #255	; 0xff
  401318:	d12b      	bne.n	401372 <adc_async_register_channel_buffer+0x9a>
  40131a:	2400      	movs	r4, #0
  40131c:	4623      	mov	r3, r4
  40131e:	e003      	b.n	401328 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  401320:	2001      	movs	r0, #1
  401322:	e7e7      	b.n	4012f4 <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  401324:	3301      	adds	r3, #1
  401326:	b2db      	uxtb	r3, r3
  401328:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  40132c:	4293      	cmp	r3, r2
  40132e:	d805      	bhi.n	40133c <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  401330:	5cca      	ldrb	r2, [r1, r3]
  401332:	2aff      	cmp	r2, #255	; 0xff
  401334:	d0f6      	beq.n	401324 <adc_async_register_channel_buffer+0x4c>
			index++;
  401336:	3401      	adds	r4, #1
  401338:	b2e4      	uxtb	r4, r4
  40133a:	e7f3      	b.n	401324 <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  40133c:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  401340:	429c      	cmp	r4, r3
  401342:	d819      	bhi.n	401378 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  401344:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  401346:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  40134a:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  40134e:	4448      	add	r0, r9
  401350:	463a      	mov	r2, r7
  401352:	4641      	mov	r1, r8
  401354:	3004      	adds	r0, #4
  401356:	4b0c      	ldr	r3, [pc, #48]	; (401388 <adc_async_register_channel_buffer+0xb0>)
  401358:	4798      	blx	r3
  40135a:	4602      	mov	r2, r0
  40135c:	b978      	cbnz	r0, 40137e <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  40135e:	6a2b      	ldr	r3, [r5, #32]
  401360:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  401362:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401364:	4499      	add	r9, r3
  401366:	2300      	movs	r3, #0
  401368:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  40136c:	4610      	mov	r0, r2
  40136e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  401372:	f06f 020c 	mvn.w	r2, #12
  401376:	e7f9      	b.n	40136c <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  401378:	f06f 021b 	mvn.w	r2, #27
  40137c:	e7f6      	b.n	40136c <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  40137e:	f06f 020c 	mvn.w	r2, #12
  401382:	e7f3      	b.n	40136c <adc_async_register_channel_buffer+0x94>
  401384:	00401949 	.word	0x00401949
  401388:	004019a9 	.word	0x004019a9
  40138c:	00406124 	.word	0x00406124

00401390 <adc_async_enable_channel>:
{
  401390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401392:	460d      	mov	r5, r1
	ASSERT(descr);
  401394:	4f0b      	ldr	r7, [pc, #44]	; (4013c4 <adc_async_enable_channel+0x34>)
  401396:	4604      	mov	r4, r0
  401398:	2283      	movs	r2, #131	; 0x83
  40139a:	4639      	mov	r1, r7
  40139c:	3000      	adds	r0, #0
  40139e:	bf18      	it	ne
  4013a0:	2001      	movne	r0, #1
  4013a2:	4e09      	ldr	r6, [pc, #36]	; (4013c8 <adc_async_enable_channel+0x38>)
  4013a4:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  4013a6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  4013aa:	2284      	movs	r2, #132	; 0x84
  4013ac:	4639      	mov	r1, r7
  4013ae:	42a8      	cmp	r0, r5
  4013b0:	bf34      	ite	cc
  4013b2:	2000      	movcc	r0, #0
  4013b4:	2001      	movcs	r0, #1
  4013b6:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  4013b8:	4629      	mov	r1, r5
  4013ba:	4620      	mov	r0, r4
  4013bc:	4b03      	ldr	r3, [pc, #12]	; (4013cc <adc_async_enable_channel+0x3c>)
  4013be:	4798      	blx	r3
}
  4013c0:	2000      	movs	r0, #0
  4013c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4013c4:	00406124 	.word	0x00406124
  4013c8:	00401949 	.word	0x00401949
  4013cc:	00401cf1 	.word	0x00401cf1

004013d0 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4013d0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4013d4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4013d6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4013d8:	f3bf 8f5f 	dmb	sy
  4013dc:	4770      	bx	lr

004013de <atomic_leave_critical>:
  4013de:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4013e2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4013e4:	f383 8810 	msr	PRIMASK, r3
  4013e8:	4770      	bx	lr
	...

004013ec <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4013ec:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4013ee:	4b02      	ldr	r3, [pc, #8]	; (4013f8 <delay_init+0xc>)
  4013f0:	6018      	str	r0, [r3, #0]
  4013f2:	4b02      	ldr	r3, [pc, #8]	; (4013fc <delay_init+0x10>)
  4013f4:	4798      	blx	r3
  4013f6:	bd08      	pop	{r3, pc}
  4013f8:	20400314 	.word	0x20400314
  4013fc:	004024c5 	.word	0x004024c5

00401400 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  401400:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  401402:	4b04      	ldr	r3, [pc, #16]	; (401414 <delay_ms+0x14>)
  401404:	681c      	ldr	r4, [r3, #0]
  401406:	4b04      	ldr	r3, [pc, #16]	; (401418 <delay_ms+0x18>)
  401408:	4798      	blx	r3
  40140a:	4601      	mov	r1, r0
  40140c:	4620      	mov	r0, r4
  40140e:	4b03      	ldr	r3, [pc, #12]	; (40141c <delay_ms+0x1c>)
  401410:	4798      	blx	r3
  401412:	bd10      	pop	{r4, pc}
  401414:	20400314 	.word	0x20400314
  401418:	00401d01 	.word	0x00401d01
  40141c:	004024d1 	.word	0x004024d1

00401420 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  401420:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  401422:	2504      	movs	r5, #4
  401424:	2400      	movs	r4, #0

	while (upper >= lower) {
  401426:	e007      	b.n	401438 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  401428:	4a0d      	ldr	r2, [pc, #52]	; (401460 <process_ext_irq+0x40>)
  40142a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40142e:	b1b3      	cbz	r3, 40145e <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  401430:	4798      	blx	r3
  401432:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  401434:	3a01      	subs	r2, #1
  401436:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  401438:	42ac      	cmp	r4, r5
  40143a:	d810      	bhi.n	40145e <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  40143c:	192b      	adds	r3, r5, r4
  40143e:	105b      	asrs	r3, r3, #1
  401440:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  401442:	2a03      	cmp	r2, #3
  401444:	d80b      	bhi.n	40145e <process_ext_irq+0x3e>
  401446:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  401448:	4905      	ldr	r1, [pc, #20]	; (401460 <process_ext_irq+0x40>)
  40144a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  40144e:	6849      	ldr	r1, [r1, #4]
  401450:	4281      	cmp	r1, r0
  401452:	d0e9      	beq.n	401428 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  401454:	4281      	cmp	r1, r0
  401456:	d2ed      	bcs.n	401434 <process_ext_irq+0x14>
			lower = middle + 1;
  401458:	3201      	adds	r2, #1
  40145a:	b2d4      	uxtb	r4, r2
  40145c:	e7ec      	b.n	401438 <process_ext_irq+0x18>
  40145e:	bd38      	pop	{r3, r4, r5, pc}
  401460:	20400318 	.word	0x20400318

00401464 <ext_irq_init>:
{
  401464:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401466:	2300      	movs	r3, #0
  401468:	e00a      	b.n	401480 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  40146a:	4a08      	ldr	r2, [pc, #32]	; (40148c <ext_irq_init+0x28>)
  40146c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  401470:	f04f 30ff 	mov.w	r0, #4294967295
  401474:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  401476:	2100      	movs	r1, #0
  401478:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40147c:	3301      	adds	r3, #1
  40147e:	b29b      	uxth	r3, r3
  401480:	2b03      	cmp	r3, #3
  401482:	d9f2      	bls.n	40146a <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  401484:	4802      	ldr	r0, [pc, #8]	; (401490 <ext_irq_init+0x2c>)
  401486:	4b03      	ldr	r3, [pc, #12]	; (401494 <ext_irq_init+0x30>)
  401488:	4798      	blx	r3
}
  40148a:	bd08      	pop	{r3, pc}
  40148c:	20400318 	.word	0x20400318
  401490:	00401421 	.word	0x00401421
  401494:	00402071 	.word	0x00402071

00401498 <ext_irq_register>:
{
  401498:	b5f0      	push	{r4, r5, r6, r7, lr}
  40149a:	b083      	sub	sp, #12
  40149c:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  40149e:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  4014a0:	2b03      	cmp	r3, #3
  4014a2:	d80e      	bhi.n	4014c2 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  4014a4:	4618      	mov	r0, r3
  4014a6:	4a2e      	ldr	r2, [pc, #184]	; (401560 <ext_irq_register+0xc8>)
  4014a8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4014ac:	6852      	ldr	r2, [r2, #4]
  4014ae:	42aa      	cmp	r2, r5
  4014b0:	d002      	beq.n	4014b8 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  4014b2:	3301      	adds	r3, #1
  4014b4:	b2db      	uxtb	r3, r3
  4014b6:	e7f3      	b.n	4014a0 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  4014b8:	4b29      	ldr	r3, [pc, #164]	; (401560 <ext_irq_register+0xc8>)
  4014ba:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  4014be:	2701      	movs	r7, #1
			break;
  4014c0:	e000      	b.n	4014c4 <ext_irq_register+0x2c>
	bool    found = false;
  4014c2:	2700      	movs	r7, #0
	if (NULL == cb) {
  4014c4:	b159      	cbz	r1, 4014de <ext_irq_register+0x46>
	if (!found) {
  4014c6:	2f00      	cmp	r7, #0
  4014c8:	d13d      	bne.n	401546 <ext_irq_register+0xae>
  4014ca:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4014cc:	2e03      	cmp	r6, #3
  4014ce:	d813      	bhi.n	4014f8 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  4014d0:	4b23      	ldr	r3, [pc, #140]	; (401560 <ext_irq_register+0xc8>)
  4014d2:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  4014d6:	b143      	cbz	r3, 4014ea <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4014d8:	3601      	adds	r6, #1
  4014da:	b2f6      	uxtb	r6, r6
  4014dc:	e7f6      	b.n	4014cc <ext_irq_register+0x34>
		if (!found) {
  4014de:	2f00      	cmp	r7, #0
  4014e0:	d038      	beq.n	401554 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  4014e2:	4628      	mov	r0, r5
  4014e4:	4b1f      	ldr	r3, [pc, #124]	; (401564 <ext_irq_register+0xcc>)
  4014e6:	4798      	blx	r3
  4014e8:	e032      	b.n	401550 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  4014ea:	4b1d      	ldr	r3, [pc, #116]	; (401560 <ext_irq_register+0xc8>)
  4014ec:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  4014f0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4014f4:	605d      	str	r5, [r3, #4]
				found           = true;
  4014f6:	2701      	movs	r7, #1
  4014f8:	2300      	movs	r3, #0
  4014fa:	e001      	b.n	401500 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  4014fc:	3301      	adds	r3, #1
  4014fe:	b2db      	uxtb	r3, r3
  401500:	2b03      	cmp	r3, #3
  401502:	bf98      	it	ls
  401504:	2e03      	cmpls	r6, #3
  401506:	d81e      	bhi.n	401546 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  401508:	46b6      	mov	lr, r6
  40150a:	4a15      	ldr	r2, [pc, #84]	; (401560 <ext_irq_register+0xc8>)
  40150c:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  401510:	6848      	ldr	r0, [r1, #4]
  401512:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  401516:	6852      	ldr	r2, [r2, #4]
  401518:	4290      	cmp	r0, r2
  40151a:	d2ef      	bcs.n	4014fc <ext_irq_register+0x64>
  40151c:	f1b2 3fff 	cmp.w	r2, #4294967295
  401520:	d0ec      	beq.n	4014fc <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  401522:	4c0f      	ldr	r4, [pc, #60]	; (401560 <ext_irq_register+0xc8>)
  401524:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  401528:	e892 0003 	ldmia.w	r2, {r0, r1}
  40152c:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  401530:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  401534:	e894 0003 	ldmia.w	r4, {r0, r1}
  401538:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  40153c:	e89d 0003 	ldmia.w	sp, {r0, r1}
  401540:	e884 0003 	stmia.w	r4, {r0, r1}
  401544:	e7da      	b.n	4014fc <ext_irq_register+0x64>
	if (!found) {
  401546:	b147      	cbz	r7, 40155a <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  401548:	2101      	movs	r1, #1
  40154a:	4628      	mov	r0, r5
  40154c:	4b05      	ldr	r3, [pc, #20]	; (401564 <ext_irq_register+0xcc>)
  40154e:	4798      	blx	r3
}
  401550:	b003      	add	sp, #12
  401552:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  401554:	f06f 000c 	mvn.w	r0, #12
  401558:	e7fa      	b.n	401550 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  40155a:	f06f 000c 	mvn.w	r0, #12
  40155e:	e7f7      	b.n	401550 <ext_irq_register+0xb8>
  401560:	20400318 	.word	0x20400318
  401564:	004020a1 	.word	0x004020a1

00401568 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401568:	b570      	push	{r4, r5, r6, lr}
  40156a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  40156c:	4604      	mov	r4, r0
  40156e:	460d      	mov	r5, r1
  401570:	2800      	cmp	r0, #0
  401572:	bf18      	it	ne
  401574:	2900      	cmpne	r1, #0
  401576:	bf14      	ite	ne
  401578:	2001      	movne	r0, #1
  40157a:	2000      	moveq	r0, #0
  40157c:	2234      	movs	r2, #52	; 0x34
  40157e:	4904      	ldr	r1, [pc, #16]	; (401590 <io_write+0x28>)
  401580:	4b04      	ldr	r3, [pc, #16]	; (401594 <io_write+0x2c>)
  401582:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  401584:	6823      	ldr	r3, [r4, #0]
  401586:	4632      	mov	r2, r6
  401588:	4629      	mov	r1, r5
  40158a:	4620      	mov	r0, r4
  40158c:	4798      	blx	r3
}
  40158e:	bd70      	pop	{r4, r5, r6, pc}
  401590:	00406140 	.word	0x00406140
  401594:	00401949 	.word	0x00401949

00401598 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401598:	b570      	push	{r4, r5, r6, lr}
  40159a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  40159c:	4604      	mov	r4, r0
  40159e:	460d      	mov	r5, r1
  4015a0:	2800      	cmp	r0, #0
  4015a2:	bf18      	it	ne
  4015a4:	2900      	cmpne	r1, #0
  4015a6:	bf14      	ite	ne
  4015a8:	2001      	movne	r0, #1
  4015aa:	2000      	moveq	r0, #0
  4015ac:	223d      	movs	r2, #61	; 0x3d
  4015ae:	4904      	ldr	r1, [pc, #16]	; (4015c0 <io_read+0x28>)
  4015b0:	4b04      	ldr	r3, [pc, #16]	; (4015c4 <io_read+0x2c>)
  4015b2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  4015b4:	6863      	ldr	r3, [r4, #4]
  4015b6:	4632      	mov	r2, r6
  4015b8:	4629      	mov	r1, r5
  4015ba:	4620      	mov	r0, r4
  4015bc:	4798      	blx	r3
}
  4015be:	bd70      	pop	{r4, r5, r6, pc}
  4015c0:	00406140 	.word	0x00406140
  4015c4:	00401949 	.word	0x00401949

004015c8 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  4015c8:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  4015ca:	6943      	ldr	r3, [r0, #20]
  4015cc:	b103      	cbz	r3, 4015d0 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  4015ce:	4798      	blx	r3
  4015d0:	bd08      	pop	{r3, pc}

004015d2 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  4015d2:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  4015d4:	6983      	ldr	r3, [r0, #24]
  4015d6:	b103      	cbz	r3, 4015da <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  4015d8:	4798      	blx	r3
  4015da:	bd08      	pop	{r3, pc}

004015dc <pwm_init>:
{
  4015dc:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4015de:	4604      	mov	r4, r0
  4015e0:	460d      	mov	r5, r1
  4015e2:	2800      	cmp	r0, #0
  4015e4:	bf18      	it	ne
  4015e6:	2900      	cmpne	r1, #0
  4015e8:	bf14      	ite	ne
  4015ea:	2001      	movne	r0, #1
  4015ec:	2000      	moveq	r0, #0
  4015ee:	2233      	movs	r2, #51	; 0x33
  4015f0:	4906      	ldr	r1, [pc, #24]	; (40160c <pwm_init+0x30>)
  4015f2:	4b07      	ldr	r3, [pc, #28]	; (401610 <pwm_init+0x34>)
  4015f4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  4015f6:	4629      	mov	r1, r5
  4015f8:	4620      	mov	r0, r4
  4015fa:	4b06      	ldr	r3, [pc, #24]	; (401614 <pwm_init+0x38>)
  4015fc:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  4015fe:	4b06      	ldr	r3, [pc, #24]	; (401618 <pwm_init+0x3c>)
  401600:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  401602:	4b06      	ldr	r3, [pc, #24]	; (40161c <pwm_init+0x40>)
  401604:	6063      	str	r3, [r4, #4]
}
  401606:	2000      	movs	r0, #0
  401608:	bd38      	pop	{r3, r4, r5, pc}
  40160a:	bf00      	nop
  40160c:	00406154 	.word	0x00406154
  401610:	00401949 	.word	0x00401949
  401614:	00402241 	.word	0x00402241
  401618:	004015c9 	.word	0x004015c9
  40161c:	004015d3 	.word	0x004015d3

00401620 <pwm_enable>:
{
  401620:	b510      	push	{r4, lr}
	ASSERT(descr);
  401622:	4604      	mov	r4, r0
  401624:	224a      	movs	r2, #74	; 0x4a
  401626:	4909      	ldr	r1, [pc, #36]	; (40164c <pwm_enable+0x2c>)
  401628:	3000      	adds	r0, #0
  40162a:	bf18      	it	ne
  40162c:	2001      	movne	r0, #1
  40162e:	4b08      	ldr	r3, [pc, #32]	; (401650 <pwm_enable+0x30>)
  401630:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  401632:	4620      	mov	r0, r4
  401634:	4b07      	ldr	r3, [pc, #28]	; (401654 <pwm_enable+0x34>)
  401636:	4798      	blx	r3
  401638:	b920      	cbnz	r0, 401644 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  40163a:	4620      	mov	r0, r4
  40163c:	4b06      	ldr	r3, [pc, #24]	; (401658 <pwm_enable+0x38>)
  40163e:	4798      	blx	r3
	return ERR_NONE;
  401640:	2000      	movs	r0, #0
  401642:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401644:	f06f 0010 	mvn.w	r0, #16
}
  401648:	bd10      	pop	{r4, pc}
  40164a:	bf00      	nop
  40164c:	00406154 	.word	0x00406154
  401650:	00401949 	.word	0x00401949
  401654:	0040241d 	.word	0x0040241d
  401658:	00402379 	.word	0x00402379

0040165c <pwm_register_callback>:
{
  40165c:	b570      	push	{r4, r5, r6, lr}
	switch (type) {
  40165e:	460d      	mov	r5, r1
  401660:	b121      	cbz	r1, 40166c <pwm_register_callback+0x10>
  401662:	2901      	cmp	r1, #1
  401664:	d015      	beq.n	401692 <pwm_register_callback+0x36>
		return ERR_INVALID_ARG;
  401666:	f06f 000c 	mvn.w	r0, #12
}
  40166a:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.period = cb;
  40166c:	6142      	str	r2, [r0, #20]
  40166e:	4616      	mov	r6, r2
  401670:	4604      	mov	r4, r0
	ASSERT(descr);
  401672:	2272      	movs	r2, #114	; 0x72
  401674:	4908      	ldr	r1, [pc, #32]	; (401698 <pwm_register_callback+0x3c>)
  401676:	3000      	adds	r0, #0
  401678:	bf18      	it	ne
  40167a:	2001      	movne	r0, #1
  40167c:	4b07      	ldr	r3, [pc, #28]	; (40169c <pwm_register_callback+0x40>)
  40167e:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
  401680:	1c32      	adds	r2, r6, #0
  401682:	bf18      	it	ne
  401684:	2201      	movne	r2, #1
  401686:	4629      	mov	r1, r5
  401688:	4620      	mov	r0, r4
  40168a:	4b05      	ldr	r3, [pc, #20]	; (4016a0 <pwm_register_callback+0x44>)
  40168c:	4798      	blx	r3
	return ERR_NONE;
  40168e:	2000      	movs	r0, #0
  401690:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
  401692:	6182      	str	r2, [r0, #24]
		break;
  401694:	e7eb      	b.n	40166e <pwm_register_callback+0x12>
  401696:	bf00      	nop
  401698:	00406154 	.word	0x00406154
  40169c:	00401949 	.word	0x00401949
  4016a0:	0040244d 	.word	0x0040244d

004016a4 <pwm_set_parameters>:
{
  4016a4:	b570      	push	{r4, r5, r6, lr}
  4016a6:	460d      	mov	r5, r1
  4016a8:	4616      	mov	r6, r2
	ASSERT(descr);
  4016aa:	4604      	mov	r4, r0
  4016ac:	227c      	movs	r2, #124	; 0x7c
  4016ae:	4906      	ldr	r1, [pc, #24]	; (4016c8 <pwm_set_parameters+0x24>)
  4016b0:	3000      	adds	r0, #0
  4016b2:	bf18      	it	ne
  4016b4:	2001      	movne	r0, #1
  4016b6:	4b05      	ldr	r3, [pc, #20]	; (4016cc <pwm_set_parameters+0x28>)
  4016b8:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  4016ba:	4632      	mov	r2, r6
  4016bc:	4629      	mov	r1, r5
  4016be:	4620      	mov	r0, r4
  4016c0:	4b03      	ldr	r3, [pc, #12]	; (4016d0 <pwm_set_parameters+0x2c>)
  4016c2:	4798      	blx	r3
}
  4016c4:	2000      	movs	r0, #0
  4016c6:	bd70      	pop	{r4, r5, r6, pc}
  4016c8:	00406154 	.word	0x00406154
  4016cc:	00401949 	.word	0x00401949
  4016d0:	004023bd 	.word	0x004023bd

004016d4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  4016d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  4016d6:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  4016d8:	b117      	cbz	r7, 4016e0 <timer_add_timer_task+0xc>
  4016da:	463c      	mov	r4, r7
  4016dc:	2600      	movs	r6, #0
  4016de:	e00b      	b.n	4016f8 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  4016e0:	4b0e      	ldr	r3, [pc, #56]	; (40171c <timer_add_timer_task+0x48>)
  4016e2:	4798      	blx	r3
		return;
  4016e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  4016e6:	68a5      	ldr	r5, [r4, #8]
  4016e8:	442b      	add	r3, r5
  4016ea:	1a9b      	subs	r3, r3, r2
  4016ec:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  4016ee:	688d      	ldr	r5, [r1, #8]
  4016f0:	42ab      	cmp	r3, r5
  4016f2:	d209      	bcs.n	401708 <timer_add_timer_task+0x34>
			break;
		prev = it;
  4016f4:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  4016f6:	6824      	ldr	r4, [r4, #0]
  4016f8:	b134      	cbz	r4, 401708 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  4016fa:	6863      	ldr	r3, [r4, #4]
  4016fc:	4293      	cmp	r3, r2
  4016fe:	d8f2      	bhi.n	4016e6 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  401700:	68a5      	ldr	r5, [r4, #8]
  401702:	1a9b      	subs	r3, r3, r2
  401704:	442b      	add	r3, r5
  401706:	e7f2      	b.n	4016ee <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  401708:	42bc      	cmp	r4, r7
  40170a:	d003      	beq.n	401714 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  40170c:	4630      	mov	r0, r6
  40170e:	4b04      	ldr	r3, [pc, #16]	; (401720 <timer_add_timer_task+0x4c>)
  401710:	4798      	blx	r3
  401712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  401714:	4b01      	ldr	r3, [pc, #4]	; (40171c <timer_add_timer_task+0x48>)
  401716:	4798      	blx	r3
  401718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40171a:	bf00      	nop
  40171c:	00401965 	.word	0x00401965
  401720:	00401991 	.word	0x00401991

00401724 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  401724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401726:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  401728:	6906      	ldr	r6, [r0, #16]
  40172a:	3601      	adds	r6, #1
  40172c:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  40172e:	7e03      	ldrb	r3, [r0, #24]
  401730:	f013 0f01 	tst.w	r3, #1
  401734:	d105      	bne.n	401742 <timer_process_counted+0x1e>
  401736:	7e03      	ldrb	r3, [r0, #24]
  401738:	f013 0f02 	tst.w	r3, #2
  40173c:	d101      	bne.n	401742 <timer_process_counted+0x1e>
  40173e:	4605      	mov	r5, r0
  401740:	e009      	b.n	401756 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  401742:	7e03      	ldrb	r3, [r0, #24]
  401744:	f043 0302 	orr.w	r3, r3, #2
  401748:	7603      	strb	r3, [r0, #24]
		return;
  40174a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40174c:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  40174e:	68e3      	ldr	r3, [r4, #12]
  401750:	4620      	mov	r0, r4
  401752:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  401754:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  401756:	b19c      	cbz	r4, 401780 <timer_process_counted+0x5c>
  401758:	6863      	ldr	r3, [r4, #4]
  40175a:	1af3      	subs	r3, r6, r3
  40175c:	68a2      	ldr	r2, [r4, #8]
  40175e:	4293      	cmp	r3, r2
  401760:	d30e      	bcc.n	401780 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  401762:	f105 0714 	add.w	r7, r5, #20
  401766:	4638      	mov	r0, r7
  401768:	4b06      	ldr	r3, [pc, #24]	; (401784 <timer_process_counted+0x60>)
  40176a:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  40176c:	7c23      	ldrb	r3, [r4, #16]
  40176e:	2b01      	cmp	r3, #1
  401770:	d1ec      	bne.n	40174c <timer_process_counted+0x28>
			tmp->time_label = time;
  401772:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  401774:	4632      	mov	r2, r6
  401776:	4621      	mov	r1, r4
  401778:	4638      	mov	r0, r7
  40177a:	4b03      	ldr	r3, [pc, #12]	; (401788 <timer_process_counted+0x64>)
  40177c:	4798      	blx	r3
  40177e:	e7e5      	b.n	40174c <timer_process_counted+0x28>
  401780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401782:	bf00      	nop
  401784:	00401999 	.word	0x00401999
  401788:	004016d5 	.word	0x004016d5

0040178c <timer_init>:
{
  40178c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40178e:	4604      	mov	r4, r0
  401790:	460d      	mov	r5, r1
  401792:	2800      	cmp	r0, #0
  401794:	bf18      	it	ne
  401796:	2900      	cmpne	r1, #0
  401798:	bf14      	ite	ne
  40179a:	2001      	movne	r0, #1
  40179c:	2000      	moveq	r0, #0
  40179e:	223b      	movs	r2, #59	; 0x3b
  4017a0:	4905      	ldr	r1, [pc, #20]	; (4017b8 <timer_init+0x2c>)
  4017a2:	4b06      	ldr	r3, [pc, #24]	; (4017bc <timer_init+0x30>)
  4017a4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  4017a6:	4629      	mov	r1, r5
  4017a8:	4620      	mov	r0, r4
  4017aa:	4b05      	ldr	r3, [pc, #20]	; (4017c0 <timer_init+0x34>)
  4017ac:	4798      	blx	r3
	descr->time                           = 0;
  4017ae:	2000      	movs	r0, #0
  4017b0:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  4017b2:	4b04      	ldr	r3, [pc, #16]	; (4017c4 <timer_init+0x38>)
  4017b4:	6023      	str	r3, [r4, #0]
}
  4017b6:	bd38      	pop	{r3, r4, r5, pc}
  4017b8:	0040616c 	.word	0x0040616c
  4017bc:	00401949 	.word	0x00401949
  4017c0:	00402589 	.word	0x00402589
  4017c4:	00401725 	.word	0x00401725

004017c8 <timer_start>:
{
  4017c8:	b510      	push	{r4, lr}
	ASSERT(descr);
  4017ca:	4604      	mov	r4, r0
  4017cc:	2253      	movs	r2, #83	; 0x53
  4017ce:	4909      	ldr	r1, [pc, #36]	; (4017f4 <timer_start+0x2c>)
  4017d0:	3000      	adds	r0, #0
  4017d2:	bf18      	it	ne
  4017d4:	2001      	movne	r0, #1
  4017d6:	4b08      	ldr	r3, [pc, #32]	; (4017f8 <timer_start+0x30>)
  4017d8:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  4017da:	4620      	mov	r0, r4
  4017dc:	4b07      	ldr	r3, [pc, #28]	; (4017fc <timer_start+0x34>)
  4017de:	4798      	blx	r3
  4017e0:	b920      	cbnz	r0, 4017ec <timer_start+0x24>
	_timer_start(&descr->device);
  4017e2:	4620      	mov	r0, r4
  4017e4:	4b06      	ldr	r3, [pc, #24]	; (401800 <timer_start+0x38>)
  4017e6:	4798      	blx	r3
	return ERR_NONE;
  4017e8:	2000      	movs	r0, #0
  4017ea:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4017ec:	f06f 0010 	mvn.w	r0, #16
}
  4017f0:	bd10      	pop	{r4, pc}
  4017f2:	bf00      	nop
  4017f4:	0040616c 	.word	0x0040616c
  4017f8:	00401949 	.word	0x00401949
  4017fc:	00402671 	.word	0x00402671
  401800:	00402665 	.word	0x00402665

00401804 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401806:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401808:	4605      	mov	r5, r0
  40180a:	460f      	mov	r7, r1
  40180c:	2800      	cmp	r0, #0
  40180e:	bf18      	it	ne
  401810:	2900      	cmpne	r1, #0
  401812:	d002      	beq.n	40181a <usart_sync_write+0x16>
  401814:	bb0a      	cbnz	r2, 40185a <usart_sync_write+0x56>
  401816:	2000      	movs	r0, #0
  401818:	e000      	b.n	40181c <usart_sync_write+0x18>
  40181a:	2000      	movs	r0, #0
  40181c:	22f1      	movs	r2, #241	; 0xf1
  40181e:	4910      	ldr	r1, [pc, #64]	; (401860 <usart_sync_write+0x5c>)
  401820:	4b10      	ldr	r3, [pc, #64]	; (401864 <usart_sync_write+0x60>)
  401822:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  401824:	f105 0408 	add.w	r4, r5, #8
  401828:	4620      	mov	r0, r4
  40182a:	4b0f      	ldr	r3, [pc, #60]	; (401868 <usart_sync_write+0x64>)
  40182c:	4798      	blx	r3
  40182e:	2800      	cmp	r0, #0
  401830:	d0f8      	beq.n	401824 <usart_sync_write+0x20>
  401832:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  401834:	5d79      	ldrb	r1, [r7, r5]
  401836:	4620      	mov	r0, r4
  401838:	4b0c      	ldr	r3, [pc, #48]	; (40186c <usart_sync_write+0x68>)
  40183a:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  40183c:	4620      	mov	r0, r4
  40183e:	4b0a      	ldr	r3, [pc, #40]	; (401868 <usart_sync_write+0x64>)
  401840:	4798      	blx	r3
  401842:	2800      	cmp	r0, #0
  401844:	d0fa      	beq.n	40183c <usart_sync_write+0x38>
			;
	} while (++offset < length);
  401846:	3501      	adds	r5, #1
  401848:	42b5      	cmp	r5, r6
  40184a:	d3f3      	bcc.n	401834 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  40184c:	4620      	mov	r0, r4
  40184e:	4b08      	ldr	r3, [pc, #32]	; (401870 <usart_sync_write+0x6c>)
  401850:	4798      	blx	r3
  401852:	2800      	cmp	r0, #0
  401854:	d0fa      	beq.n	40184c <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  401856:	4628      	mov	r0, r5
  401858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  40185a:	2001      	movs	r0, #1
  40185c:	e7de      	b.n	40181c <usart_sync_write+0x18>
  40185e:	bf00      	nop
  401860:	00406184 	.word	0x00406184
  401864:	00401949 	.word	0x00401949
  401868:	0040284d 	.word	0x0040284d
  40186c:	00402805 	.word	0x00402805
  401870:	00402875 	.word	0x00402875

00401874 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401878:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  40187a:	4605      	mov	r5, r0
  40187c:	4688      	mov	r8, r1
  40187e:	2800      	cmp	r0, #0
  401880:	bf18      	it	ne
  401882:	2900      	cmpne	r1, #0
  401884:	d002      	beq.n	40188c <usart_sync_read+0x18>
  401886:	b9d2      	cbnz	r2, 4018be <usart_sync_read+0x4a>
  401888:	2000      	movs	r0, #0
  40188a:	e000      	b.n	40188e <usart_sync_read+0x1a>
  40188c:	2000      	movs	r0, #0
  40188e:	f44f 7286 	mov.w	r2, #268	; 0x10c
  401892:	490c      	ldr	r1, [pc, #48]	; (4018c4 <usart_sync_read+0x50>)
  401894:	4b0c      	ldr	r3, [pc, #48]	; (4018c8 <usart_sync_read+0x54>)
  401896:	4798      	blx	r3
	uint32_t                      offset = 0;
  401898:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  40189a:	f105 0408 	add.w	r4, r5, #8
  40189e:	4620      	mov	r0, r4
  4018a0:	4b0a      	ldr	r3, [pc, #40]	; (4018cc <usart_sync_read+0x58>)
  4018a2:	4798      	blx	r3
  4018a4:	2800      	cmp	r0, #0
  4018a6:	d0f8      	beq.n	40189a <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  4018a8:	4620      	mov	r0, r4
  4018aa:	4b09      	ldr	r3, [pc, #36]	; (4018d0 <usart_sync_read+0x5c>)
  4018ac:	4798      	blx	r3
  4018ae:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  4018b2:	3601      	adds	r6, #1
  4018b4:	42be      	cmp	r6, r7
  4018b6:	d3f0      	bcc.n	40189a <usart_sync_read+0x26>

	return (int32_t)offset;
}
  4018b8:	4630      	mov	r0, r6
  4018ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  4018be:	2001      	movs	r0, #1
  4018c0:	e7e5      	b.n	40188e <usart_sync_read+0x1a>
  4018c2:	bf00      	nop
  4018c4:	00406184 	.word	0x00406184
  4018c8:	00401949 	.word	0x00401949
  4018cc:	0040289d 	.word	0x0040289d
  4018d0:	00402829 	.word	0x00402829

004018d4 <usart_sync_init>:
{
  4018d4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4018d6:	4604      	mov	r4, r0
  4018d8:	460d      	mov	r5, r1
  4018da:	2800      	cmp	r0, #0
  4018dc:	bf18      	it	ne
  4018de:	2900      	cmpne	r1, #0
  4018e0:	bf14      	ite	ne
  4018e2:	2001      	movne	r0, #1
  4018e4:	2000      	moveq	r0, #0
  4018e6:	2234      	movs	r2, #52	; 0x34
  4018e8:	4907      	ldr	r1, [pc, #28]	; (401908 <usart_sync_init+0x34>)
  4018ea:	4b08      	ldr	r3, [pc, #32]	; (40190c <usart_sync_init+0x38>)
  4018ec:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  4018ee:	4629      	mov	r1, r5
  4018f0:	f104 0008 	add.w	r0, r4, #8
  4018f4:	4b06      	ldr	r3, [pc, #24]	; (401910 <usart_sync_init+0x3c>)
  4018f6:	4798      	blx	r3
	if (init_status) {
  4018f8:	4603      	mov	r3, r0
  4018fa:	b918      	cbnz	r0, 401904 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  4018fc:	4a05      	ldr	r2, [pc, #20]	; (401914 <usart_sync_init+0x40>)
  4018fe:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  401900:	4a05      	ldr	r2, [pc, #20]	; (401918 <usart_sync_init+0x44>)
  401902:	6022      	str	r2, [r4, #0]
}
  401904:	4618      	mov	r0, r3
  401906:	bd38      	pop	{r3, r4, r5, pc}
  401908:	00406184 	.word	0x00406184
  40190c:	00401949 	.word	0x00401949
  401910:	00402799 	.word	0x00402799
  401914:	00401875 	.word	0x00401875
  401918:	00401805 	.word	0x00401805

0040191c <usart_sync_enable>:
{
  40191c:	b510      	push	{r4, lr}
	ASSERT(descr);
  40191e:	4604      	mov	r4, r0
  401920:	2253      	movs	r2, #83	; 0x53
  401922:	4906      	ldr	r1, [pc, #24]	; (40193c <usart_sync_enable+0x20>)
  401924:	3000      	adds	r0, #0
  401926:	bf18      	it	ne
  401928:	2001      	movne	r0, #1
  40192a:	4b05      	ldr	r3, [pc, #20]	; (401940 <usart_sync_enable+0x24>)
  40192c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  40192e:	f104 0008 	add.w	r0, r4, #8
  401932:	4b04      	ldr	r3, [pc, #16]	; (401944 <usart_sync_enable+0x28>)
  401934:	4798      	blx	r3
}
  401936:	2000      	movs	r0, #0
  401938:	bd10      	pop	{r4, pc}
  40193a:	bf00      	nop
  40193c:	00406184 	.word	0x00406184
  401940:	00401949 	.word	0x00401949
  401944:	004027d1 	.word	0x004027d1

00401948 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401948:	b900      	cbnz	r0, 40194c <assert+0x4>
		__asm("BKPT #0");
  40194a:	be00      	bkpt	0x0000
  40194c:	4770      	bx	lr

0040194e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  40194e:	6803      	ldr	r3, [r0, #0]
  401950:	b11b      	cbz	r3, 40195a <is_list_element+0xc>
		if (it == element) {
  401952:	428b      	cmp	r3, r1
  401954:	d003      	beq.n	40195e <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  401956:	681b      	ldr	r3, [r3, #0]
  401958:	e7fa      	b.n	401950 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  40195a:	2000      	movs	r0, #0
  40195c:	4770      	bx	lr
			return true;
  40195e:	2001      	movs	r0, #1
}
  401960:	4770      	bx	lr
	...

00401964 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  401964:	b538      	push	{r3, r4, r5, lr}
  401966:	4604      	mov	r4, r0
  401968:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  40196a:	4b06      	ldr	r3, [pc, #24]	; (401984 <list_insert_as_head+0x20>)
  40196c:	4798      	blx	r3
  40196e:	f080 0001 	eor.w	r0, r0, #1
  401972:	2239      	movs	r2, #57	; 0x39
  401974:	4904      	ldr	r1, [pc, #16]	; (401988 <list_insert_as_head+0x24>)
  401976:	b2c0      	uxtb	r0, r0
  401978:	4b04      	ldr	r3, [pc, #16]	; (40198c <list_insert_as_head+0x28>)
  40197a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  40197c:	6823      	ldr	r3, [r4, #0]
  40197e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  401980:	6025      	str	r5, [r4, #0]
  401982:	bd38      	pop	{r3, r4, r5, pc}
  401984:	0040194f 	.word	0x0040194f
  401988:	004061a0 	.word	0x004061a0
  40198c:	00401949 	.word	0x00401949

00401990 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  401990:	6803      	ldr	r3, [r0, #0]
  401992:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  401994:	6001      	str	r1, [r0, #0]
  401996:	4770      	bx	lr

00401998 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  401998:	6803      	ldr	r3, [r0, #0]
  40199a:	b11b      	cbz	r3, 4019a4 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  40199c:	681a      	ldr	r2, [r3, #0]
  40199e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  4019a0:	4618      	mov	r0, r3
  4019a2:	4770      	bx	lr
	}

	return NULL;
  4019a4:	2000      	movs	r0, #0
}
  4019a6:	4770      	bx	lr

004019a8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  4019a8:	b570      	push	{r4, r5, r6, lr}
  4019aa:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  4019ac:	4604      	mov	r4, r0
  4019ae:	460e      	mov	r6, r1
  4019b0:	2800      	cmp	r0, #0
  4019b2:	bf18      	it	ne
  4019b4:	2900      	cmpne	r1, #0
  4019b6:	d002      	beq.n	4019be <ringbuffer_init+0x16>
  4019b8:	b97a      	cbnz	r2, 4019da <ringbuffer_init+0x32>
  4019ba:	2000      	movs	r0, #0
  4019bc:	e000      	b.n	4019c0 <ringbuffer_init+0x18>
  4019be:	2000      	movs	r0, #0
  4019c0:	2228      	movs	r2, #40	; 0x28
  4019c2:	4908      	ldr	r1, [pc, #32]	; (4019e4 <ringbuffer_init+0x3c>)
  4019c4:	4b08      	ldr	r3, [pc, #32]	; (4019e8 <ringbuffer_init+0x40>)
  4019c6:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  4019c8:	1e6b      	subs	r3, r5, #1
  4019ca:	421d      	tst	r5, r3
  4019cc:	d107      	bne.n	4019de <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  4019ce:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  4019d0:	2000      	movs	r0, #0
  4019d2:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  4019d4:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  4019d6:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  4019d8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  4019da:	2001      	movs	r0, #1
  4019dc:	e7f0      	b.n	4019c0 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  4019de:	f06f 000c 	mvn.w	r0, #12
}
  4019e2:	bd70      	pop	{r4, r5, r6, pc}
  4019e4:	004061c0 	.word	0x004061c0
  4019e8:	00401949 	.word	0x00401949

004019ec <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  4019ec:	b538      	push	{r3, r4, r5, lr}
  4019ee:	460d      	mov	r5, r1
	ASSERT(rb);
  4019f0:	4604      	mov	r4, r0
  4019f2:	2251      	movs	r2, #81	; 0x51
  4019f4:	490b      	ldr	r1, [pc, #44]	; (401a24 <ringbuffer_put+0x38>)
  4019f6:	3000      	adds	r0, #0
  4019f8:	bf18      	it	ne
  4019fa:	2001      	movne	r0, #1
  4019fc:	4b0a      	ldr	r3, [pc, #40]	; (401a28 <ringbuffer_put+0x3c>)
  4019fe:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  401a00:	6822      	ldr	r2, [r4, #0]
  401a02:	68e3      	ldr	r3, [r4, #12]
  401a04:	6861      	ldr	r1, [r4, #4]
  401a06:	400b      	ands	r3, r1
  401a08:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  401a0a:	68e3      	ldr	r3, [r4, #12]
  401a0c:	68a2      	ldr	r2, [r4, #8]
  401a0e:	1a9a      	subs	r2, r3, r2
  401a10:	6861      	ldr	r1, [r4, #4]
  401a12:	428a      	cmp	r2, r1
  401a14:	d901      	bls.n	401a1a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  401a16:	1a59      	subs	r1, r3, r1
  401a18:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  401a1a:	3301      	adds	r3, #1
  401a1c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  401a1e:	2000      	movs	r0, #0
  401a20:	bd38      	pop	{r3, r4, r5, pc}
  401a22:	bf00      	nop
  401a24:	004061c0 	.word	0x004061c0
  401a28:	00401949 	.word	0x00401949

00401a2c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  401a2c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  401a2e:	4a06      	ldr	r2, [pc, #24]	; (401a48 <_sbrk+0x1c>)
  401a30:	6812      	ldr	r2, [r2, #0]
  401a32:	b122      	cbz	r2, 401a3e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401a34:	4a04      	ldr	r2, [pc, #16]	; (401a48 <_sbrk+0x1c>)
  401a36:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  401a38:	4403      	add	r3, r0
  401a3a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  401a3c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401a3e:	4903      	ldr	r1, [pc, #12]	; (401a4c <_sbrk+0x20>)
  401a40:	4a01      	ldr	r2, [pc, #4]	; (401a48 <_sbrk+0x1c>)
  401a42:	6011      	str	r1, [r2, #0]
  401a44:	e7f6      	b.n	401a34 <_sbrk+0x8>
  401a46:	bf00      	nop
  401a48:	20400338 	.word	0x20400338
  401a4c:	20400d18 	.word	0x20400d18

00401a50 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  401a50:	f04f 30ff 	mov.w	r0, #4294967295
  401a54:	4770      	bx	lr

00401a56 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  401a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401a5a:	604b      	str	r3, [r1, #4]

	return 0;
}
  401a5c:	2000      	movs	r0, #0
  401a5e:	4770      	bx	lr

00401a60 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  401a60:	2001      	movs	r0, #1
  401a62:	4770      	bx	lr

00401a64 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  401a64:	2000      	movs	r0, #0
  401a66:	4770      	bx	lr

00401a68 <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  401a68:	6943      	ldr	r3, [r0, #20]
  401a6a:	4a07      	ldr	r2, [pc, #28]	; (401a88 <_afec_get_irq_num+0x20>)
  401a6c:	4293      	cmp	r3, r2
  401a6e:	d005      	beq.n	401a7c <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  401a70:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  401a74:	4293      	cmp	r3, r2
  401a76:	d103      	bne.n	401a80 <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  401a78:	2028      	movs	r0, #40	; 0x28
  401a7a:	4770      	bx	lr
		return AFEC0_IRQn;
  401a7c:	201d      	movs	r0, #29
  401a7e:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  401a80:	f04f 30ff 	mov.w	r0, #4294967295
}
  401a84:	4770      	bx	lr
  401a86:	bf00      	nop
  401a88:	4003c000 	.word	0x4003c000

00401a8c <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  401a8c:	4b06      	ldr	r3, [pc, #24]	; (401aa8 <_afec_init_irq_param+0x1c>)
  401a8e:	4298      	cmp	r0, r3
  401a90:	d003      	beq.n	401a9a <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  401a92:	4b06      	ldr	r3, [pc, #24]	; (401aac <_afec_init_irq_param+0x20>)
  401a94:	4298      	cmp	r0, r3
  401a96:	d003      	beq.n	401aa0 <_afec_init_irq_param+0x14>
  401a98:	4770      	bx	lr
		_afec0_dev = dev;
  401a9a:	4b05      	ldr	r3, [pc, #20]	; (401ab0 <_afec_init_irq_param+0x24>)
  401a9c:	6019      	str	r1, [r3, #0]
  401a9e:	e7f8      	b.n	401a92 <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  401aa0:	4b03      	ldr	r3, [pc, #12]	; (401ab0 <_afec_init_irq_param+0x24>)
  401aa2:	6059      	str	r1, [r3, #4]
	}
}
  401aa4:	e7f8      	b.n	401a98 <_afec_init_irq_param+0xc>
  401aa6:	bf00      	nop
  401aa8:	4003c000 	.word	0x4003c000
  401aac:	40064000 	.word	0x40064000
  401ab0:	2040033c 	.word	0x2040033c

00401ab4 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  401ab4:	2364      	movs	r3, #100	; 0x64
  401ab6:	4a1d      	ldr	r2, [pc, #116]	; (401b2c <_afec_init+0x78>)
  401ab8:	fb03 2301 	mla	r3, r3, r1, r2
  401abc:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  401abe:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  401ac0:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  401ac2:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  401ac4:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  401ac6:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  401ac8:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  401aca:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  401acc:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  401ace:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  401ad0:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  401ad2:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  401ad4:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  401ad6:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  401ad8:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  401ada:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  401ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  401ae0:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  401ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  401ae6:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  401aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  401aec:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  401af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  401af2:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401af6:	2200      	movs	r2, #0
  401af8:	2a0b      	cmp	r2, #11
  401afa:	d814      	bhi.n	401b26 <_afec_init+0x72>
{
  401afc:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  401afe:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  401b00:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401b04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401b08:	4413      	add	r3, r2
  401b0a:	330c      	adds	r3, #12
  401b0c:	4c07      	ldr	r4, [pc, #28]	; (401b2c <_afec_init+0x78>)
  401b0e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  401b12:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  401b14:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  401b16:	3201      	adds	r2, #1
  401b18:	b2d2      	uxtb	r2, r2
  401b1a:	2a0b      	cmp	r2, #11
  401b1c:	d9ef      	bls.n	401afe <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  401b1e:	2000      	movs	r0, #0
  401b20:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b24:	4770      	bx	lr
  401b26:	2000      	movs	r0, #0
  401b28:	4770      	bx	lr
  401b2a:	bf00      	nop
  401b2c:	004061e4 	.word	0x004061e4

00401b30 <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  401b30:	b530      	push	{r4, r5, lr}
  401b32:	b083      	sub	sp, #12
  401b34:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  401b36:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  401b38:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  401b3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  401b3c:	400b      	ands	r3, r1
  401b3e:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  401b40:	9b01      	ldr	r3, [sp, #4]
  401b42:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401b46:	d10e      	bne.n	401b66 <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  401b48:	9b01      	ldr	r3, [sp, #4]
  401b4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  401b4e:	d10e      	bne.n	401b6e <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  401b50:	9b01      	ldr	r3, [sp, #4]
  401b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401b56:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  401b58:	9c01      	ldr	r4, [sp, #4]
  401b5a:	fab4 f484 	clz	r4, r4
  401b5e:	f1c4 0420 	rsb	r4, r4, #32
  401b62:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401b64:	e01f      	b.n	401ba6 <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  401b66:	6803      	ldr	r3, [r0, #0]
  401b68:	2100      	movs	r1, #0
  401b6a:	4798      	blx	r3
  401b6c:	e7ec      	b.n	401b48 <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  401b6e:	686b      	ldr	r3, [r5, #4]
  401b70:	2100      	movs	r1, #0
  401b72:	4628      	mov	r0, r5
  401b74:	4798      	blx	r3
  401b76:	e7eb      	b.n	401b50 <_afec_interrupt_handler+0x20>
		cnt--;
  401b78:	3c01      	subs	r4, #1
  401b7a:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  401b7c:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  401b7e:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  401b80:	68ab      	ldr	r3, [r5, #8]
  401b82:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  401b84:	6e92      	ldr	r2, [r2, #104]	; 0x68
  401b86:	b292      	uxth	r2, r2
  401b88:	4621      	mov	r1, r4
  401b8a:	4628      	mov	r0, r5
  401b8c:	4798      	blx	r3
		status &= ~(1 << cnt);
  401b8e:	2301      	movs	r3, #1
  401b90:	40a3      	lsls	r3, r4
  401b92:	9c01      	ldr	r4, [sp, #4]
  401b94:	ea24 0403 	bic.w	r4, r4, r3
  401b98:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  401b9a:	9c01      	ldr	r4, [sp, #4]
  401b9c:	fab4 f484 	clz	r4, r4
  401ba0:	f1c4 0420 	rsb	r4, r4, #32
  401ba4:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401ba6:	2c00      	cmp	r4, #0
  401ba8:	d1e6      	bne.n	401b78 <_afec_interrupt_handler+0x48>
	}
}
  401baa:	b003      	add	sp, #12
  401bac:	bd30      	pop	{r4, r5, pc}
	...

00401bb0 <_afec_get_hardware_index>:
{
  401bb0:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  401bb2:	4b09      	ldr	r3, [pc, #36]	; (401bd8 <_afec_get_hardware_index+0x28>)
  401bb4:	4298      	cmp	r0, r3
  401bb6:	d00a      	beq.n	401bce <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  401bb8:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  401bbc:	4298      	cmp	r0, r3
  401bbe:	d008      	beq.n	401bd2 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  401bc0:	22a7      	movs	r2, #167	; 0xa7
  401bc2:	4906      	ldr	r1, [pc, #24]	; (401bdc <_afec_get_hardware_index+0x2c>)
  401bc4:	2000      	movs	r0, #0
  401bc6:	4b06      	ldr	r3, [pc, #24]	; (401be0 <_afec_get_hardware_index+0x30>)
  401bc8:	4798      	blx	r3
	return 0;
  401bca:	2000      	movs	r0, #0
  401bcc:	bd08      	pop	{r3, pc}
		return 0;
  401bce:	2000      	movs	r0, #0
  401bd0:	bd08      	pop	{r3, pc}
		return 1;
  401bd2:	2001      	movs	r0, #1
}
  401bd4:	bd08      	pop	{r3, pc}
  401bd6:	bf00      	nop
  401bd8:	4003c000 	.word	0x4003c000
  401bdc:	004062ac 	.word	0x004062ac
  401be0:	00401949 	.word	0x00401949

00401be4 <_afec_get_regs>:
{
  401be4:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  401be6:	4b09      	ldr	r3, [pc, #36]	; (401c0c <_afec_get_regs+0x28>)
  401be8:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401bea:	2300      	movs	r3, #0
  401bec:	2b01      	cmp	r3, #1
  401bee:	d809      	bhi.n	401c04 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  401bf0:	2264      	movs	r2, #100	; 0x64
  401bf2:	fb02 f203 	mul.w	r2, r2, r3
  401bf6:	4906      	ldr	r1, [pc, #24]	; (401c10 <_afec_get_regs+0x2c>)
  401bf8:	5c8a      	ldrb	r2, [r1, r2]
  401bfa:	4290      	cmp	r0, r2
  401bfc:	d003      	beq.n	401c06 <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  401bfe:	3301      	adds	r3, #1
  401c00:	b2db      	uxtb	r3, r3
  401c02:	e7f3      	b.n	401bec <_afec_get_regs+0x8>
	return 0;
  401c04:	2300      	movs	r3, #0
}
  401c06:	4618      	mov	r0, r3
  401c08:	bd08      	pop	{r3, pc}
  401c0a:	bf00      	nop
  401c0c:	00401bb1 	.word	0x00401bb1
  401c10:	004061e4 	.word	0x004061e4

00401c14 <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  401c14:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  401c16:	4b02      	ldr	r3, [pc, #8]	; (401c20 <AFEC0_Handler+0xc>)
  401c18:	6818      	ldr	r0, [r3, #0]
  401c1a:	4b02      	ldr	r3, [pc, #8]	; (401c24 <AFEC0_Handler+0x10>)
  401c1c:	4798      	blx	r3
  401c1e:	bd08      	pop	{r3, pc}
  401c20:	2040033c 	.word	0x2040033c
  401c24:	00401b31 	.word	0x00401b31

00401c28 <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  401c28:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  401c2a:	4b02      	ldr	r3, [pc, #8]	; (401c34 <AFEC1_Handler+0xc>)
  401c2c:	6858      	ldr	r0, [r3, #4]
  401c2e:	4b02      	ldr	r3, [pc, #8]	; (401c38 <AFEC1_Handler+0x10>)
  401c30:	4798      	blx	r3
  401c32:	bd08      	pop	{r3, pc}
  401c34:	2040033c 	.word	0x2040033c
  401c38:	00401b31 	.word	0x00401b31

00401c3c <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  401c3c:	b570      	push	{r4, r5, r6, lr}
  401c3e:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  401c40:	4605      	mov	r5, r0
  401c42:	f44f 72a1 	mov.w	r2, #322	; 0x142
  401c46:	4923      	ldr	r1, [pc, #140]	; (401cd4 <_adc_async_init+0x98>)
  401c48:	3000      	adds	r0, #0
  401c4a:	bf18      	it	ne
  401c4c:	2001      	movne	r0, #1
  401c4e:	4b22      	ldr	r3, [pc, #136]	; (401cd8 <_adc_async_init+0x9c>)
  401c50:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  401c52:	4620      	mov	r0, r4
  401c54:	4b21      	ldr	r3, [pc, #132]	; (401cdc <_adc_async_init+0xa0>)
  401c56:	4798      	blx	r3
  401c58:	4601      	mov	r1, r0
  401c5a:	4620      	mov	r0, r4
  401c5c:	4b20      	ldr	r3, [pc, #128]	; (401ce0 <_adc_async_init+0xa4>)
  401c5e:	4798      	blx	r3
	if (init_status) {
  401c60:	4606      	mov	r6, r0
  401c62:	b108      	cbz	r0, 401c68 <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  401c64:	4630      	mov	r0, r6
  401c66:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  401c68:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  401c6a:	4629      	mov	r1, r5
  401c6c:	4620      	mov	r0, r4
  401c6e:	4b1d      	ldr	r3, [pc, #116]	; (401ce4 <_adc_async_init+0xa8>)
  401c70:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  401c72:	4628      	mov	r0, r5
  401c74:	4b1c      	ldr	r3, [pc, #112]	; (401ce8 <_adc_async_init+0xac>)
  401c76:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401c78:	2800      	cmp	r0, #0
  401c7a:	db0d      	blt.n	401c98 <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c7c:	0943      	lsrs	r3, r0, #5
  401c7e:	f000 001f 	and.w	r0, r0, #31
  401c82:	2201      	movs	r2, #1
  401c84:	fa02 f000 	lsl.w	r0, r2, r0
  401c88:	3320      	adds	r3, #32
  401c8a:	4a18      	ldr	r2, [pc, #96]	; (401cec <_adc_async_init+0xb0>)
  401c8c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401c90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401c94:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  401c98:	4628      	mov	r0, r5
  401c9a:	4b13      	ldr	r3, [pc, #76]	; (401ce8 <_adc_async_init+0xac>)
  401c9c:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401c9e:	2800      	cmp	r0, #0
  401ca0:	db09      	blt.n	401cb6 <_adc_async_init+0x7a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ca2:	0943      	lsrs	r3, r0, #5
  401ca4:	f000 001f 	and.w	r0, r0, #31
  401ca8:	2201      	movs	r2, #1
  401caa:	fa02 f000 	lsl.w	r0, r2, r0
  401cae:	3360      	adds	r3, #96	; 0x60
  401cb0:	4a0e      	ldr	r2, [pc, #56]	; (401cec <_adc_async_init+0xb0>)
  401cb2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  401cb6:	4628      	mov	r0, r5
  401cb8:	4b0b      	ldr	r3, [pc, #44]	; (401ce8 <_adc_async_init+0xac>)
  401cba:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401cbc:	2800      	cmp	r0, #0
  401cbe:	dbd1      	blt.n	401c64 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401cc0:	0942      	lsrs	r2, r0, #5
  401cc2:	f000 001f 	and.w	r0, r0, #31
  401cc6:	2301      	movs	r3, #1
  401cc8:	fa03 f000 	lsl.w	r0, r3, r0
  401ccc:	4b07      	ldr	r3, [pc, #28]	; (401cec <_adc_async_init+0xb0>)
  401cce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  401cd2:	e7c7      	b.n	401c64 <_adc_async_init+0x28>
  401cd4:	004062ac 	.word	0x004062ac
  401cd8:	00401949 	.word	0x00401949
  401cdc:	00401be5 	.word	0x00401be5
  401ce0:	00401ab5 	.word	0x00401ab5
  401ce4:	00401a8d 	.word	0x00401a8d
  401ce8:	00401a69 	.word	0x00401a69
  401cec:	e000e100 	.word	0xe000e100

00401cf0 <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  401cf0:	6942      	ldr	r2, [r0, #20]
  401cf2:	2301      	movs	r3, #1
  401cf4:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  401cf8:	6151      	str	r1, [r2, #20]
  401cfa:	4770      	bx	lr

00401cfc <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  401cfc:	2002      	movs	r0, #2
  401cfe:	4770      	bx	lr

00401d00 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  401d00:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401d04:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  401d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401d0c:	fb03 f000 	mul.w	r0, r3, r0
  401d10:	4770      	bx	lr
	...

00401d14 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  401d14:	b500      	push	{lr}
  401d16:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  401d18:	a801      	add	r0, sp, #4
  401d1a:	4b14      	ldr	r3, [pc, #80]	; (401d6c <_init_chip+0x58>)
  401d1c:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  401d1e:	4a14      	ldr	r2, [pc, #80]	; (401d70 <_init_chip+0x5c>)
  401d20:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  401d2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401d30:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  401d34:	a801      	add	r0, sp, #4
  401d36:	4b0f      	ldr	r3, [pc, #60]	; (401d74 <_init_chip+0x60>)
  401d38:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  401d3a:	4a0f      	ldr	r2, [pc, #60]	; (401d78 <_init_chip+0x64>)
  401d3c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  401d3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  401d42:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  401d46:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401d48:	4b0c      	ldr	r3, [pc, #48]	; (401d7c <_init_chip+0x68>)
  401d4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  401d4e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401d52:	d104      	bne.n	401d5e <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401d54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401d58:	4b08      	ldr	r3, [pc, #32]	; (401d7c <_init_chip+0x68>)
  401d5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  401d5e:	4b08      	ldr	r3, [pc, #32]	; (401d80 <_init_chip+0x6c>)
  401d60:	4798      	blx	r3

#endif
	_pmc_init();
  401d62:	4b08      	ldr	r3, [pc, #32]	; (401d84 <_init_chip+0x70>)
  401d64:	4798      	blx	r3
}
  401d66:	b003      	add	sp, #12
  401d68:	f85d fb04 	ldr.w	pc, [sp], #4
  401d6c:	004013d1 	.word	0x004013d1
  401d70:	e000ed00 	.word	0xe000ed00
  401d74:	004013df 	.word	0x004013df
  401d78:	400e0c00 	.word	0x400e0c00
  401d7c:	400e0600 	.word	0x400e0600
  401d80:	004028c9 	.word	0x004028c9
  401d84:	0040219d 	.word	0x0040219d

00401d88 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  401d88:	b538      	push	{r3, r4, r5, lr}
  401d8a:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  401d8c:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  401d8e:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  401d90:	f014 0f01 	tst.w	r4, #1
  401d94:	d11a      	bne.n	401dcc <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  401d96:	f414 7f00 	tst.w	r4, #512	; 0x200
  401d9a:	d11a      	bne.n	401dd2 <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  401d9c:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  401da0:	d11b      	bne.n	401dda <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  401da2:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  401da6:	d11d      	bne.n	401de4 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  401da8:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  401dac:	d008      	beq.n	401dc0 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401dae:	68eb      	ldr	r3, [r5, #12]
  401db0:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  401db2:	6c52      	ldr	r2, [r2, #68]	; 0x44
  401db4:	f012 0f20 	tst.w	r2, #32
  401db8:	d019      	beq.n	401dee <_can_irq_handler+0x66>
  401dba:	2102      	movs	r1, #2
  401dbc:	4628      	mov	r0, r5
  401dbe:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  401dc0:	f014 0f08 	tst.w	r4, #8
  401dc4:	d115      	bne.n	401df2 <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  401dc6:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  401dc8:	651c      	str	r4, [r3, #80]	; 0x50
  401dca:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  401dcc:	6883      	ldr	r3, [r0, #8]
  401dce:	4798      	blx	r3
  401dd0:	e7e1      	b.n	401d96 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  401dd2:	686b      	ldr	r3, [r5, #4]
  401dd4:	4628      	mov	r0, r5
  401dd6:	4798      	blx	r3
  401dd8:	e7e0      	b.n	401d9c <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  401dda:	68eb      	ldr	r3, [r5, #12]
  401ddc:	2103      	movs	r1, #3
  401dde:	4628      	mov	r0, r5
  401de0:	4798      	blx	r3
  401de2:	e7de      	b.n	401da2 <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  401de4:	68eb      	ldr	r3, [r5, #12]
  401de6:	2100      	movs	r1, #0
  401de8:	4628      	mov	r0, r5
  401dea:	4798      	blx	r3
  401dec:	e7dc      	b.n	401da8 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401dee:	2101      	movs	r1, #1
  401df0:	e7e4      	b.n	401dbc <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  401df2:	68eb      	ldr	r3, [r5, #12]
  401df4:	2104      	movs	r1, #4
  401df6:	4628      	mov	r0, r5
  401df8:	4798      	blx	r3
  401dfa:	e7e4      	b.n	401dc6 <_can_irq_handler+0x3e>

00401dfc <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  401dfc:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  401dfe:	4b02      	ldr	r3, [pc, #8]	; (401e08 <MCAN1_INT0_Handler+0xc>)
  401e00:	6a98      	ldr	r0, [r3, #40]	; 0x28
  401e02:	4b02      	ldr	r3, [pc, #8]	; (401e0c <MCAN1_INT0_Handler+0x10>)
  401e04:	4798      	blx	r3
  401e06:	bd08      	pop	{r3, pc}
  401e08:	20400344 	.word	0x20400344
  401e0c:	00401d89 	.word	0x00401d89

00401e10 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401e10:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  401e12:	2500      	movs	r5, #0
  401e14:	428d      	cmp	r5, r1
  401e16:	d210      	bcs.n	401e3a <_ffs+0x2a>
  401e18:	2201      	movs	r2, #1
  401e1a:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401e1c:	2b1f      	cmp	r3, #31
  401e1e:	d80a      	bhi.n	401e36 <_ffs+0x26>
			if (v[i] & bit) {
  401e20:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401e24:	4222      	tst	r2, r4
  401e26:	d102      	bne.n	401e2e <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401e28:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401e2a:	3301      	adds	r3, #1
  401e2c:	e7f6      	b.n	401e1c <_ffs+0xc>
				return i * 32 + j;
  401e2e:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401e32:	bc30      	pop	{r4, r5}
  401e34:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  401e36:	3501      	adds	r5, #1
  401e38:	e7ec      	b.n	401e14 <_ffs+0x4>
	return -1;
  401e3a:	f04f 30ff 	mov.w	r0, #4294967295
  401e3e:	e7f8      	b.n	401e32 <_ffs+0x22>

00401e40 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401e40:	b510      	push	{r4, lr}
  401e42:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401e44:	2300      	movs	r3, #0
  401e46:	9301      	str	r3, [sp, #4]
  401e48:	9302      	str	r3, [sp, #8]
  401e4a:	9303      	str	r3, [sp, #12]
  401e4c:	9304      	str	r3, [sp, #16]
  401e4e:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401e50:	4b28      	ldr	r3, [pc, #160]	; (401ef4 <_ext_irq_handler+0xb4>)
  401e52:	6818      	ldr	r0, [r3, #0]
  401e54:	22f8      	movs	r2, #248	; 0xf8
  401e56:	4928      	ldr	r1, [pc, #160]	; (401ef8 <_ext_irq_handler+0xb8>)
  401e58:	3000      	adds	r0, #0
  401e5a:	bf18      	it	ne
  401e5c:	2001      	movne	r0, #1
  401e5e:	4b27      	ldr	r3, [pc, #156]	; (401efc <_ext_irq_handler+0xbc>)
  401e60:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401e62:	4b27      	ldr	r3, [pc, #156]	; (401f00 <_ext_irq_handler+0xc0>)
  401e64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401e68:	4013      	ands	r3, r2
  401e6a:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401e6c:	4a25      	ldr	r2, [pc, #148]	; (401f04 <_ext_irq_handler+0xc4>)
  401e6e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401e70:	6c92      	ldr	r2, [r2, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401e72:	400a      	ands	r2, r1
  401e74:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  401e76:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  401e78:	4923      	ldr	r1, [pc, #140]	; (401f08 <_ext_irq_handler+0xc8>)
  401e7a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401e7c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401e7e:	400a      	ands	r2, r1
  401e80:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  401e82:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  401e84:	e02c      	b.n	401ee0 <_ext_irq_handler+0xa0>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  401e86:	4b1b      	ldr	r3, [pc, #108]	; (401ef4 <_ext_irq_handler+0xb4>)
  401e88:	681b      	ldr	r3, [r3, #0]
  401e8a:	4620      	mov	r0, r4
  401e8c:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  401e8e:	1163      	asrs	r3, r4, #5
  401e90:	f004 041f 	and.w	r4, r4, #31
  401e94:	2201      	movs	r2, #1
  401e96:	fa02 f404 	lsl.w	r4, r2, r4
  401e9a:	aa06      	add	r2, sp, #24
  401e9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401ea0:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401ea4:	ea22 0204 	bic.w	r2, r2, r4
  401ea8:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  401eac:	2105      	movs	r1, #5
  401eae:	a801      	add	r0, sp, #4
  401eb0:	4b16      	ldr	r3, [pc, #88]	; (401f0c <_ext_irq_handler+0xcc>)
  401eb2:	4798      	blx	r3
  401eb4:	4604      	mov	r4, r0
		while (-1 != pos) {
  401eb6:	f1b4 3fff 	cmp.w	r4, #4294967295
  401eba:	d1e4      	bne.n	401e86 <_ext_irq_handler+0x46>
	return ((Pio *)hw)->PIO_ISR;
  401ebc:	4a10      	ldr	r2, [pc, #64]	; (401f00 <_ext_irq_handler+0xc0>)
  401ebe:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401ec0:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401ec2:	400b      	ands	r3, r1
  401ec4:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401ec6:	490f      	ldr	r1, [pc, #60]	; (401f04 <_ext_irq_handler+0xc4>)
  401ec8:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401eca:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401ecc:	4002      	ands	r2, r0
  401ece:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  401ed0:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  401ed2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  401ed6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401ed8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401eda:	4002      	ands	r2, r0
  401edc:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  401ede:	4313      	orrs	r3, r2
	while (flag_total) {
  401ee0:	b12b      	cbz	r3, 401eee <_ext_irq_handler+0xae>
		pos = _ffs(flags, 5);
  401ee2:	2105      	movs	r1, #5
  401ee4:	a801      	add	r0, sp, #4
  401ee6:	4b09      	ldr	r3, [pc, #36]	; (401f0c <_ext_irq_handler+0xcc>)
  401ee8:	4798      	blx	r3
  401eea:	4604      	mov	r4, r0
		while (-1 != pos) {
  401eec:	e7e3      	b.n	401eb6 <_ext_irq_handler+0x76>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  401eee:	b006      	add	sp, #24
  401ef0:	bd10      	pop	{r4, pc}
  401ef2:	bf00      	nop
  401ef4:	20400370 	.word	0x20400370
  401ef8:	00406320 	.word	0x00406320
  401efc:	00401949 	.word	0x00401949
  401f00:	400e0e00 	.word	0x400e0e00
  401f04:	400e1000 	.word	0x400e1000
  401f08:	400e1400 	.word	0x400e1400
  401f0c:	00401e11 	.word	0x00401e11

00401f10 <_pio_get_hardware_index>:
{
  401f10:	b510      	push	{r4, lr}
	ASSERT(hw);
  401f12:	4604      	mov	r4, r0
  401f14:	22d2      	movs	r2, #210	; 0xd2
  401f16:	4905      	ldr	r1, [pc, #20]	; (401f2c <_pio_get_hardware_index+0x1c>)
  401f18:	3000      	adds	r0, #0
  401f1a:	bf18      	it	ne
  401f1c:	2001      	movne	r0, #1
  401f1e:	4b04      	ldr	r3, [pc, #16]	; (401f30 <_pio_get_hardware_index+0x20>)
  401f20:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  401f22:	4804      	ldr	r0, [pc, #16]	; (401f34 <_pio_get_hardware_index+0x24>)
  401f24:	4420      	add	r0, r4
}
  401f26:	f3c0 2047 	ubfx	r0, r0, #9, #8
  401f2a:	bd10      	pop	{r4, pc}
  401f2c:	00406320 	.word	0x00406320
  401f30:	00401949 	.word	0x00401949
  401f34:	bff1f200 	.word	0xbff1f200

00401f38 <_pio_get_index>:
{
  401f38:	b510      	push	{r4, lr}
	ASSERT(hw);
  401f3a:	4604      	mov	r4, r0
  401f3c:	22e0      	movs	r2, #224	; 0xe0
  401f3e:	490d      	ldr	r1, [pc, #52]	; (401f74 <_pio_get_index+0x3c>)
  401f40:	3000      	adds	r0, #0
  401f42:	bf18      	it	ne
  401f44:	2001      	movne	r0, #1
  401f46:	4b0c      	ldr	r3, [pc, #48]	; (401f78 <_pio_get_index+0x40>)
  401f48:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  401f4a:	4620      	mov	r0, r4
  401f4c:	4b0b      	ldr	r3, [pc, #44]	; (401f7c <_pio_get_index+0x44>)
  401f4e:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401f50:	2300      	movs	r3, #0
  401f52:	2b02      	cmp	r3, #2
  401f54:	d80b      	bhi.n	401f6e <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  401f56:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  401f5a:	008a      	lsls	r2, r1, #2
  401f5c:	4908      	ldr	r1, [pc, #32]	; (401f80 <_pio_get_index+0x48>)
  401f5e:	5c8a      	ldrb	r2, [r1, r2]
  401f60:	4290      	cmp	r0, r2
  401f62:	d002      	beq.n	401f6a <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401f64:	3301      	adds	r3, #1
  401f66:	b2db      	uxtb	r3, r3
  401f68:	e7f3      	b.n	401f52 <_pio_get_index+0x1a>
			return i;
  401f6a:	b258      	sxtb	r0, r3
  401f6c:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  401f6e:	f04f 30ff 	mov.w	r0, #4294967295
}
  401f72:	bd10      	pop	{r4, pc}
  401f74:	00406320 	.word	0x00406320
  401f78:	00401949 	.word	0x00401949
  401f7c:	00401f11 	.word	0x00401f11
  401f80:	004062c4 	.word	0x004062c4

00401f84 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401f84:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  401f86:	4604      	mov	r4, r0
  401f88:	f44f 72af 	mov.w	r2, #350	; 0x15e
  401f8c:	4929      	ldr	r1, [pc, #164]	; (402034 <_pio_init+0xb0>)
  401f8e:	3000      	adds	r0, #0
  401f90:	bf18      	it	ne
  401f92:	2001      	movne	r0, #1
  401f94:	4b28      	ldr	r3, [pc, #160]	; (402038 <_pio_init+0xb4>)
  401f96:	4798      	blx	r3

	i = _pio_get_index(hw);
  401f98:	4620      	mov	r0, r4
  401f9a:	4b28      	ldr	r3, [pc, #160]	; (40203c <_pio_init+0xb8>)
  401f9c:	4798      	blx	r3
	if (i < 0) {
  401f9e:	2800      	cmp	r0, #0
  401fa0:	db43      	blt.n	40202a <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  401fa2:	4d27      	ldr	r5, [pc, #156]	; (402040 <_pio_init+0xbc>)
  401fa4:	00c2      	lsls	r2, r0, #3
  401fa6:	1a11      	subs	r1, r2, r0
  401fa8:	008b      	lsls	r3, r1, #2
  401faa:	442b      	add	r3, r5
  401fac:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  401fae:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  401fb2:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  401fb4:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  401fb8:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  401fba:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  401fbe:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  401fc0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  401fc4:	1a10      	subs	r0, r2, r0
  401fc6:	0083      	lsls	r3, r0, #2
  401fc8:	442b      	add	r3, r5
  401fca:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  401fcc:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401fd0:	4620      	mov	r0, r4
  401fd2:	4b1c      	ldr	r3, [pc, #112]	; (402044 <_pio_init+0xc0>)
  401fd4:	4798      	blx	r3
  401fd6:	4428      	add	r0, r5
  401fd8:	f990 3054 	ldrsb.w	r3, [r0, #84]	; 0x54
  if ((int32_t)(IRQn) >= 0)
  401fdc:	2b00      	cmp	r3, #0
  401fde:	db0c      	blt.n	401ffa <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401fe0:	095a      	lsrs	r2, r3, #5
  401fe2:	f003 001f 	and.w	r0, r3, #31
  401fe6:	2101      	movs	r1, #1
  401fe8:	4081      	lsls	r1, r0
  401fea:	3220      	adds	r2, #32
  401fec:	4816      	ldr	r0, [pc, #88]	; (402048 <_pio_init+0xc4>)
  401fee:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401ff2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401ff6:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  401ffa:	2b00      	cmp	r3, #0
  401ffc:	db08      	blt.n	402010 <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401ffe:	095a      	lsrs	r2, r3, #5
  402000:	f003 001f 	and.w	r0, r3, #31
  402004:	2101      	movs	r1, #1
  402006:	4081      	lsls	r1, r0
  402008:	3260      	adds	r2, #96	; 0x60
  40200a:	480f      	ldr	r0, [pc, #60]	; (402048 <_pio_init+0xc4>)
  40200c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  402010:	2b00      	cmp	r3, #0
  402012:	db0d      	blt.n	402030 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402014:	0959      	lsrs	r1, r3, #5
  402016:	f003 031f 	and.w	r3, r3, #31
  40201a:	2201      	movs	r2, #1
  40201c:	fa02 f303 	lsl.w	r3, r2, r3
  402020:	4a09      	ldr	r2, [pc, #36]	; (402048 <_pio_init+0xc4>)
  402022:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  402026:	2000      	movs	r0, #0
  402028:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  40202a:	f06f 0010 	mvn.w	r0, #16
  40202e:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  402030:	2000      	movs	r0, #0
}
  402032:	bd38      	pop	{r3, r4, r5, pc}
  402034:	00406320 	.word	0x00406320
  402038:	00401949 	.word	0x00401949
  40203c:	00401f39 	.word	0x00401f39
  402040:	004062c4 	.word	0x004062c4
  402044:	00401f11 	.word	0x00401f11
  402048:	e000e100 	.word	0xe000e100

0040204c <PIOD_Handler>:
{
  40204c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40204e:	4b01      	ldr	r3, [pc, #4]	; (402054 <PIOD_Handler+0x8>)
  402050:	4798      	blx	r3
  402052:	bd08      	pop	{r3, pc}
  402054:	00401e41 	.word	0x00401e41

00402058 <PIOB_Handler>:
{
  402058:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40205a:	4b01      	ldr	r3, [pc, #4]	; (402060 <PIOB_Handler+0x8>)
  40205c:	4798      	blx	r3
  40205e:	bd08      	pop	{r3, pc}
  402060:	00401e41 	.word	0x00401e41

00402064 <PIOA_Handler>:
{
  402064:	b508      	push	{r3, lr}
	_ext_irq_handler();
  402066:	4b01      	ldr	r3, [pc, #4]	; (40206c <PIOA_Handler+0x8>)
  402068:	4798      	blx	r3
  40206a:	bd08      	pop	{r3, pc}
  40206c:	00401e41 	.word	0x00401e41

00402070 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  402070:	b538      	push	{r3, r4, r5, lr}
  402072:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  402074:	4805      	ldr	r0, [pc, #20]	; (40208c <_ext_irq_init+0x1c>)
  402076:	4c06      	ldr	r4, [pc, #24]	; (402090 <_ext_irq_init+0x20>)
  402078:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  40207a:	4806      	ldr	r0, [pc, #24]	; (402094 <_ext_irq_init+0x24>)
  40207c:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  40207e:	4806      	ldr	r0, [pc, #24]	; (402098 <_ext_irq_init+0x28>)
  402080:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  402082:	4b06      	ldr	r3, [pc, #24]	; (40209c <_ext_irq_init+0x2c>)
  402084:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  402086:	2000      	movs	r0, #0
  402088:	bd38      	pop	{r3, r4, r5, pc}
  40208a:	bf00      	nop
  40208c:	400e0e00 	.word	0x400e0e00
  402090:	00401f85 	.word	0x00401f85
  402094:	400e1000 	.word	0x400e1000
  402098:	400e1400 	.word	0x400e1400
  40209c:	20400370 	.word	0x20400370

004020a0 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  4020a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020a4:	4604      	mov	r4, r0
  4020a6:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  4020a8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4020fc <_ext_irq_enable+0x5c>
  4020ac:	f240 12ab 	movw	r2, #427	; 0x1ab
  4020b0:	4641      	mov	r1, r8
  4020b2:	289f      	cmp	r0, #159	; 0x9f
  4020b4:	bf8c      	ite	hi
  4020b6:	2000      	movhi	r0, #0
  4020b8:	2001      	movls	r0, #1
  4020ba:	4e0e      	ldr	r6, [pc, #56]	; (4020f4 <_ext_irq_enable+0x54>)
  4020bc:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  4020be:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  4020c0:	22c3      	movs	r2, #195	; 0xc3
  4020c2:	4641      	mov	r1, r8
  4020c4:	2d9f      	cmp	r5, #159	; 0x9f
  4020c6:	bf8c      	ite	hi
  4020c8:	2000      	movhi	r0, #0
  4020ca:	2001      	movls	r0, #1
  4020cc:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  4020ce:	096d      	lsrs	r5, r5, #5
  4020d0:	4b09      	ldr	r3, [pc, #36]	; (4020f8 <_ext_irq_enable+0x58>)
  4020d2:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  4020d6:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  4020da:	b937      	cbnz	r7, 4020ea <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  4020dc:	2301      	movs	r3, #1
  4020de:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  4020e2:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  4020e4:	2000      	movs	r0, #0
  4020e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  4020ea:	2301      	movs	r3, #1
  4020ec:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  4020f0:	642c      	str	r4, [r5, #64]	; 0x40
  4020f2:	e7f7      	b.n	4020e4 <_ext_irq_enable+0x44>
  4020f4:	00401949 	.word	0x00401949
  4020f8:	400e0e00 	.word	0x400e0e00
  4020fc:	00406320 	.word	0x00406320

00402100 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  402100:	490e      	ldr	r1, [pc, #56]	; (40213c <_pmc_init_sources+0x3c>)
  402102:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  402104:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  402108:	4b0d      	ldr	r3, [pc, #52]	; (402140 <_pmc_init_sources+0x40>)
  40210a:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  40210c:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40210e:	4b0b      	ldr	r3, [pc, #44]	; (40213c <_pmc_init_sources+0x3c>)
  402110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  402112:	f013 0f01 	tst.w	r3, #1
  402116:	d0fa      	beq.n	40210e <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  402118:	4b08      	ldr	r3, [pc, #32]	; (40213c <_pmc_init_sources+0x3c>)
  40211a:	6a19      	ldr	r1, [r3, #32]
  40211c:	4a09      	ldr	r2, [pc, #36]	; (402144 <_pmc_init_sources+0x44>)
  40211e:	430a      	orrs	r2, r1
  402120:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  402122:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  402124:	4a08      	ldr	r2, [pc, #32]	; (402148 <_pmc_init_sources+0x48>)
  402126:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  402128:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  40212a:	4a08      	ldr	r2, [pc, #32]	; (40214c <_pmc_init_sources+0x4c>)
  40212c:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  40212e:	4b03      	ldr	r3, [pc, #12]	; (40213c <_pmc_init_sources+0x3c>)
  402130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  402132:	f013 0f02 	tst.w	r3, #2
  402136:	d0fa      	beq.n	40212e <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  402138:	4770      	bx	lr
  40213a:	bf00      	nop
  40213c:	400e0600 	.word	0x400e0600
  402140:	00373e01 	.word	0x00373e01
  402144:	01370000 	.word	0x01370000
  402148:	f800ffff 	.word	0xf800ffff
  40214c:	20183f01 	.word	0x20183f01

00402150 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402150:	4a11      	ldr	r2, [pc, #68]	; (402198 <_pmc_init_master_clock+0x48>)
  402152:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  402154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  402158:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40215a:	4b0f      	ldr	r3, [pc, #60]	; (402198 <_pmc_init_master_clock+0x48>)
  40215c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40215e:	f013 0f08 	tst.w	r3, #8
  402162:	d0fa      	beq.n	40215a <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402164:	4a0c      	ldr	r2, [pc, #48]	; (402198 <_pmc_init_master_clock+0x48>)
  402166:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  402168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  40216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  402170:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  402172:	4b09      	ldr	r3, [pc, #36]	; (402198 <_pmc_init_master_clock+0x48>)
  402174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  402176:	f013 0f08 	tst.w	r3, #8
  40217a:	d0fa      	beq.n	402172 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40217c:	4a06      	ldr	r2, [pc, #24]	; (402198 <_pmc_init_master_clock+0x48>)
  40217e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  402180:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  402184:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  402188:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40218a:	4b03      	ldr	r3, [pc, #12]	; (402198 <_pmc_init_master_clock+0x48>)
  40218c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40218e:	f013 0f08 	tst.w	r3, #8
  402192:	d0fa      	beq.n	40218a <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  402194:	4770      	bx	lr
  402196:	bf00      	nop
  402198:	400e0600 	.word	0x400e0600

0040219c <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  40219c:	b508      	push	{r3, lr}
	_pmc_init_sources();
  40219e:	4b02      	ldr	r3, [pc, #8]	; (4021a8 <_pmc_init+0xc>)
  4021a0:	4798      	blx	r3
	_pmc_init_master_clock();
  4021a2:	4b02      	ldr	r3, [pc, #8]	; (4021ac <_pmc_init+0x10>)
  4021a4:	4798      	blx	r3
  4021a6:	bd08      	pop	{r3, pc}
  4021a8:	00402101 	.word	0x00402101
  4021ac:	00402151 	.word	0x00402151

004021b0 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4021b0:	2300      	movs	r3, #0
  4021b2:	2b01      	cmp	r3, #1
  4021b4:	d80f      	bhi.n	4021d6 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  4021b6:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  4021ba:	008a      	lsls	r2, r1, #2
  4021bc:	4907      	ldr	r1, [pc, #28]	; (4021dc <_pwm_get_cfg+0x2c>)
  4021be:	588a      	ldr	r2, [r1, r2]
  4021c0:	4282      	cmp	r2, r0
  4021c2:	d002      	beq.n	4021ca <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4021c4:	3301      	adds	r3, #1
  4021c6:	b2db      	uxtb	r3, r3
  4021c8:	e7f3      	b.n	4021b2 <_pwm_get_cfg+0x2>
			return (_pwms + i);
  4021ca:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4021ce:	009a      	lsls	r2, r3, #2
  4021d0:	4608      	mov	r0, r1
  4021d2:	4410      	add	r0, r2
  4021d4:	4770      	bx	lr
		}
	}

	return NULL;
  4021d6:	2000      	movs	r0, #0
}
  4021d8:	4770      	bx	lr
  4021da:	bf00      	nop
  4021dc:	0040633c 	.word	0x0040633c

004021e0 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  4021e0:	4b06      	ldr	r3, [pc, #24]	; (4021fc <_pwm_init_irq_param+0x1c>)
  4021e2:	4298      	cmp	r0, r3
  4021e4:	d003      	beq.n	4021ee <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  4021e6:	4b06      	ldr	r3, [pc, #24]	; (402200 <_pwm_init_irq_param+0x20>)
  4021e8:	4298      	cmp	r0, r3
  4021ea:	d003      	beq.n	4021f4 <_pwm_init_irq_param+0x14>
  4021ec:	4770      	bx	lr
		_pwm0_dev = dev;
  4021ee:	4b05      	ldr	r3, [pc, #20]	; (402204 <_pwm_init_irq_param+0x24>)
  4021f0:	6019      	str	r1, [r3, #0]
  4021f2:	e7f8      	b.n	4021e6 <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  4021f4:	4b03      	ldr	r3, [pc, #12]	; (402204 <_pwm_init_irq_param+0x24>)
  4021f6:	6059      	str	r1, [r3, #4]
	}
}
  4021f8:	e7f8      	b.n	4021ec <_pwm_init_irq_param+0xc>
  4021fa:	bf00      	nop
  4021fc:	40020000 	.word	0x40020000
  402200:	4005c000 	.word	0x4005c000
  402204:	20400374 	.word	0x20400374

00402208 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  402208:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  40220a:	6903      	ldr	r3, [r0, #16]
	return ((Pwm *)hw)->PWM_ISR1;
  40220c:	69db      	ldr	r3, [r3, #28]
  40220e:	b113      	cbz	r3, 402216 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  402210:	6803      	ldr	r3, [r0, #0]
  402212:	b103      	cbz	r3, 402216 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  402214:	4798      	blx	r3
  402216:	bd08      	pop	{r3, pc}

00402218 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  402218:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  40221a:	4b02      	ldr	r3, [pc, #8]	; (402224 <PWM0_Handler+0xc>)
  40221c:	6818      	ldr	r0, [r3, #0]
  40221e:	4b02      	ldr	r3, [pc, #8]	; (402228 <PWM0_Handler+0x10>)
  402220:	4798      	blx	r3
  402222:	bd08      	pop	{r3, pc}
  402224:	20400374 	.word	0x20400374
  402228:	00402209 	.word	0x00402209

0040222c <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  40222c:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  40222e:	4b02      	ldr	r3, [pc, #8]	; (402238 <PWM1_Handler+0xc>)
  402230:	6858      	ldr	r0, [r3, #4]
  402232:	4b02      	ldr	r3, [pc, #8]	; (40223c <PWM1_Handler+0x10>)
  402234:	4798      	blx	r3
  402236:	bd08      	pop	{r3, pc}
  402238:	20400374 	.word	0x20400374
  40223c:	00402209 	.word	0x00402209

00402240 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  402240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402242:	4606      	mov	r6, r0
	ASSERT(hw);
  402244:	460c      	mov	r4, r1
  402246:	1c08      	adds	r0, r1, #0
  402248:	bf18      	it	ne
  40224a:	2001      	movne	r0, #1
  40224c:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  402250:	4944      	ldr	r1, [pc, #272]	; (402364 <_pwm_init+0x124>)
  402252:	4b45      	ldr	r3, [pc, #276]	; (402368 <_pwm_init+0x128>)
  402254:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  402256:	4620      	mov	r0, r4
  402258:	4b44      	ldr	r3, [pc, #272]	; (40236c <_pwm_init+0x12c>)
  40225a:	4798      	blx	r3
  40225c:	4605      	mov	r5, r0

	device->hw = hw;
  40225e:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  402260:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  402262:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  402264:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  402266:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  402268:	6903      	ldr	r3, [r0, #16]
  40226a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  40226e:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  402270:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  402272:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  402274:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  402276:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  402278:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  40227c:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  40227e:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  402280:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  402282:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  402286:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  402288:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  40228c:	2300      	movs	r3, #0
  40228e:	e019      	b.n	4022c4 <_pwm_init+0x84>
		ch = cfg->ch + i;
  402290:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  402292:	0118      	lsls	r0, r3, #4
  402294:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  402298:	5c3a      	ldrb	r2, [r7, r0]
  40229a:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  40229e:	3210      	adds	r2, #16
  4022a0:	0152      	lsls	r2, r2, #5
  4022a2:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  4022a4:	5c3a      	ldrb	r2, [r7, r0]
  4022a6:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  4022aa:	3210      	adds	r2, #16
  4022ac:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4022b0:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  4022b2:	5c3a      	ldrb	r2, [r7, r0]
  4022b4:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  4022b8:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4022bc:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  4022c0:	3301      	adds	r3, #1
  4022c2:	b25b      	sxtb	r3, r3
  4022c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4022c6:	4293      	cmp	r3, r2
  4022c8:	d3e2      	bcc.n	402290 <_pwm_init+0x50>
  4022ca:	2300      	movs	r3, #0
  4022cc:	e014      	b.n	4022f8 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  4022ce:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4022d0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4022d4:	0082      	lsls	r2, r0, #2
  4022d6:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  4022da:	5c88      	ldrb	r0, [r1, r2]
  4022dc:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  4022e0:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  4022e4:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4022e8:	5c8a      	ldrb	r2, [r1, r2]
  4022ea:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4022ee:	3213      	adds	r2, #19
  4022f0:	0112      	lsls	r2, r2, #4
  4022f2:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  4022f4:	3301      	adds	r3, #1
  4022f6:	b25b      	sxtb	r3, r3
  4022f8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4022fa:	4293      	cmp	r3, r2
  4022fc:	d3e7      	bcc.n	4022ce <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  4022fe:	4631      	mov	r1, r6
  402300:	4620      	mov	r0, r4
  402302:	4b1b      	ldr	r3, [pc, #108]	; (402370 <_pwm_init+0x130>)
  402304:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  402306:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40230a:	2b00      	cmp	r3, #0
  40230c:	db0d      	blt.n	40232a <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40230e:	095a      	lsrs	r2, r3, #5
  402310:	f003 031f 	and.w	r3, r3, #31
  402314:	2101      	movs	r1, #1
  402316:	fa01 f303 	lsl.w	r3, r1, r3
  40231a:	3220      	adds	r2, #32
  40231c:	4915      	ldr	r1, [pc, #84]	; (402374 <_pwm_init+0x134>)
  40231e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  402322:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402326:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40232a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40232e:	2b00      	cmp	r3, #0
  402330:	db09      	blt.n	402346 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402332:	095a      	lsrs	r2, r3, #5
  402334:	f003 031f 	and.w	r3, r3, #31
  402338:	2101      	movs	r1, #1
  40233a:	fa01 f303 	lsl.w	r3, r1, r3
  40233e:	3260      	adds	r2, #96	; 0x60
  402340:	490c      	ldr	r1, [pc, #48]	; (402374 <_pwm_init+0x134>)
  402342:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  402346:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40234a:	2b00      	cmp	r3, #0
  40234c:	db08      	blt.n	402360 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40234e:	0959      	lsrs	r1, r3, #5
  402350:	f003 031f 	and.w	r3, r3, #31
  402354:	2201      	movs	r2, #1
  402356:	fa02 f303 	lsl.w	r3, r2, r3
  40235a:	4a06      	ldr	r2, [pc, #24]	; (402374 <_pwm_init+0x134>)
  40235c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  402360:	2000      	movs	r0, #0
  402362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402364:	004063e4 	.word	0x004063e4
  402368:	00401949 	.word	0x00401949
  40236c:	004021b1 	.word	0x004021b1
  402370:	004021e1 	.word	0x004021e1
  402374:	e000e100 	.word	0xe000e100

00402378 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  402378:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  40237a:	4604      	mov	r4, r0
  40237c:	f240 12b5 	movw	r2, #437	; 0x1b5
  402380:	490b      	ldr	r1, [pc, #44]	; (4023b0 <_pwm_enable+0x38>)
  402382:	3000      	adds	r0, #0
  402384:	bf18      	it	ne
  402386:	2001      	movne	r0, #1
  402388:	4b0a      	ldr	r3, [pc, #40]	; (4023b4 <_pwm_enable+0x3c>)
  40238a:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  40238c:	6920      	ldr	r0, [r4, #16]
  40238e:	4b0a      	ldr	r3, [pc, #40]	; (4023b8 <_pwm_enable+0x40>)
  402390:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  402392:	2300      	movs	r3, #0
  402394:	e008      	b.n	4023a8 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  402396:	6921      	ldr	r1, [r4, #16]
  402398:	6b05      	ldr	r5, [r0, #48]	; 0x30
  40239a:	011a      	lsls	r2, r3, #4
  40239c:	5cad      	ldrb	r5, [r5, r2]
  40239e:	2201      	movs	r2, #1
  4023a0:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  4023a2:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  4023a4:	3301      	adds	r3, #1
  4023a6:	b25b      	sxtb	r3, r3
  4023a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4023aa:	4293      	cmp	r3, r2
  4023ac:	d3f3      	bcc.n	402396 <_pwm_enable+0x1e>
	}
}
  4023ae:	bd38      	pop	{r3, r4, r5, pc}
  4023b0:	004063e4 	.word	0x004063e4
  4023b4:	00401949 	.word	0x00401949
  4023b8:	004021b1 	.word	0x004021b1

004023bc <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  4023bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4023be:	460d      	mov	r5, r1
  4023c0:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  4023c2:	4604      	mov	r4, r0
  4023c4:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  4023c8:	4911      	ldr	r1, [pc, #68]	; (402410 <_pwm_set_param+0x54>)
  4023ca:	2800      	cmp	r0, #0
  4023cc:	bf18      	it	ne
  4023ce:	42ae      	cmpne	r6, r5
  4023d0:	bf34      	ite	cc
  4023d2:	2001      	movcc	r0, #1
  4023d4:	2000      	movcs	r0, #0
  4023d6:	4b0f      	ldr	r3, [pc, #60]	; (402414 <_pwm_set_param+0x58>)
  4023d8:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  4023da:	6920      	ldr	r0, [r4, #16]
  4023dc:	4b0e      	ldr	r3, [pc, #56]	; (402418 <_pwm_set_param+0x5c>)
  4023de:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4023e0:	2300      	movs	r3, #0
  4023e2:	e010      	b.n	402406 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  4023e4:	6922      	ldr	r2, [r4, #16]
  4023e6:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4023e8:	0119      	lsls	r1, r3, #4
  4023ea:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  4023ec:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  4023f0:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  4023f4:	6922      	ldr	r2, [r4, #16]
  4023f6:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4023f8:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  4023fa:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  4023fe:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  402402:	3301      	adds	r3, #1
  402404:	b2db      	uxtb	r3, r3
  402406:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402408:	4293      	cmp	r3, r2
  40240a:	d3eb      	bcc.n	4023e4 <_pwm_set_param+0x28>
	}
}
  40240c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40240e:	bf00      	nop
  402410:	004063e4 	.word	0x004063e4
  402414:	00401949 	.word	0x00401949
  402418:	004021b1 	.word	0x004021b1

0040241c <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  40241c:	b510      	push	{r4, lr}
	ASSERT(device);
  40241e:	4604      	mov	r4, r0
  402420:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402424:	4907      	ldr	r1, [pc, #28]	; (402444 <_pwm_is_enabled+0x28>)
  402426:	3000      	adds	r0, #0
  402428:	bf18      	it	ne
  40242a:	2001      	movne	r0, #1
  40242c:	4b06      	ldr	r3, [pc, #24]	; (402448 <_pwm_is_enabled+0x2c>)
  40242e:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  402430:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  402432:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  402434:	f013 0f0f 	tst.w	r3, #15
  402438:	d001      	beq.n	40243e <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  40243a:	2001      	movs	r0, #1
	}
}
  40243c:	bd10      	pop	{r4, pc}
		return false;
  40243e:	2000      	movs	r0, #0
  402440:	bd10      	pop	{r4, pc}
  402442:	bf00      	nop
  402444:	004063e4 	.word	0x004063e4
  402448:	00401949 	.word	0x00401949

0040244c <_pwm_set_irq_state>:

	return hri_pwm_read_CDTY_reg(device->hw, cfg->ch[0].index);
}

void _pwm_set_irq_state(struct _pwm_device *const device, const enum _pwm_callback_type type, const bool disable)
{
  40244c:	b538      	push	{r3, r4, r5, lr}
  40244e:	460d      	mov	r5, r1
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device);
  402450:	4604      	mov	r4, r0
  402452:	f44f 7200 	mov.w	r2, #512	; 0x200
  402456:	4912      	ldr	r1, [pc, #72]	; (4024a0 <_pwm_set_irq_state+0x54>)
  402458:	3000      	adds	r0, #0
  40245a:	bf18      	it	ne
  40245c:	2001      	movne	r0, #1
  40245e:	4b11      	ldr	r3, [pc, #68]	; (4024a4 <_pwm_set_irq_state+0x58>)
  402460:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  402462:	6920      	ldr	r0, [r4, #16]
  402464:	4b10      	ldr	r3, [pc, #64]	; (4024a8 <_pwm_set_irq_state+0x5c>)
  402466:	4798      	blx	r3

	if (PWM_DEVICE_PERIOD_CB == type) {
  402468:	b18d      	cbz	r5, 40248e <_pwm_set_irq_state+0x42>
		for (i = 0; i < cfg->ch_num; i++) {
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
		}
	} else if (PWM_DEVICE_ERROR_CB == type) {
  40246a:	2d01      	cmp	r5, #1
  40246c:	d011      	beq.n	402492 <_pwm_set_irq_state+0x46>
  40246e:	bd38      	pop	{r3, r4, r5, pc}
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
  402470:	6921      	ldr	r1, [r4, #16]
  402472:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402474:	0113      	lsls	r3, r2, #4
  402476:	5ced      	ldrb	r5, [r5, r3]
  402478:	2301      	movs	r3, #1
  40247a:	40ab      	lsls	r3, r5
	((Pwm *)hw)->PWM_IER1 = data;
  40247c:	610b      	str	r3, [r1, #16]
	((Pwm *)hw)->PWM_IDR1 = ~data;
  40247e:	43db      	mvns	r3, r3
  402480:	614b      	str	r3, [r1, #20]
		for (i = 0; i < cfg->ch_num; i++) {
  402482:	3201      	adds	r2, #1
  402484:	b2d2      	uxtb	r2, r2
  402486:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402488:	429a      	cmp	r2, r3
  40248a:	d3f1      	bcc.n	402470 <_pwm_set_irq_state+0x24>
  40248c:	bd38      	pop	{r3, r4, r5, pc}
  40248e:	2200      	movs	r2, #0
  402490:	e7f9      	b.n	402486 <_pwm_set_irq_state+0x3a>
		ASSERT(false);
  402492:	f240 2209 	movw	r2, #521	; 0x209
  402496:	4902      	ldr	r1, [pc, #8]	; (4024a0 <_pwm_set_irq_state+0x54>)
  402498:	2000      	movs	r0, #0
  40249a:	4b02      	ldr	r3, [pc, #8]	; (4024a4 <_pwm_set_irq_state+0x58>)
  40249c:	4798      	blx	r3
	}
}
  40249e:	e7e6      	b.n	40246e <_pwm_set_irq_state+0x22>
  4024a0:	004063e4 	.word	0x004063e4
  4024a4:	00401949 	.word	0x00401949
  4024a8:	004021b1 	.word	0x004021b1

004024ac <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  4024ac:	2000      	movs	r0, #0
  4024ae:	4770      	bx	lr

004024b0 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  4024b0:	4b03      	ldr	r3, [pc, #12]	; (4024c0 <_system_time_init+0x10>)
  4024b2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4024b6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  4024b8:	2205      	movs	r2, #5
  4024ba:	601a      	str	r2, [r3, #0]
  4024bc:	4770      	bx	lr
  4024be:	bf00      	nop
  4024c0:	e000e010 	.word	0xe000e010

004024c4 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  4024c4:	b508      	push	{r3, lr}
	_system_time_init(hw);
  4024c6:	4b01      	ldr	r3, [pc, #4]	; (4024cc <_delay_init+0x8>)
  4024c8:	4798      	blx	r3
  4024ca:	bd08      	pop	{r3, pc}
  4024cc:	004024b1 	.word	0x004024b1

004024d0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  4024d0:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  4024d2:	e00d      	b.n	4024f0 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  4024d4:	4b0d      	ldr	r3, [pc, #52]	; (40250c <_delay_cycles+0x3c>)
  4024d6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  4024da:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  4024dc:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4024de:	4b0b      	ldr	r3, [pc, #44]	; (40250c <_delay_cycles+0x3c>)
  4024e0:	681b      	ldr	r3, [r3, #0]
  4024e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4024e6:	d0fa      	beq.n	4024de <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  4024e8:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4024ec:	3101      	adds	r1, #1
	while (n--) {
  4024ee:	4610      	mov	r0, r2
  4024f0:	1e43      	subs	r3, r0, #1
  4024f2:	b2da      	uxtb	r2, r3
  4024f4:	2800      	cmp	r0, #0
  4024f6:	d1ed      	bne.n	4024d4 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  4024f8:	4b04      	ldr	r3, [pc, #16]	; (40250c <_delay_cycles+0x3c>)
  4024fa:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4024fc:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4024fe:	4b03      	ldr	r3, [pc, #12]	; (40250c <_delay_cycles+0x3c>)
  402500:	681b      	ldr	r3, [r3, #0]
  402502:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  402506:	d0fa      	beq.n	4024fe <_delay_cycles+0x2e>
		;
}
  402508:	4770      	bx	lr
  40250a:	bf00      	nop
  40250c:	e000e010 	.word	0xe000e010

00402510 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  402510:	2300      	movs	r3, #0
  402512:	2b01      	cmp	r3, #1
  402514:	d815      	bhi.n	402542 <get_cfg+0x32>
{
  402516:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  402518:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  40251c:	008a      	lsls	r2, r1, #2
  40251e:	490a      	ldr	r1, [pc, #40]	; (402548 <get_cfg+0x38>)
  402520:	588a      	ldr	r2, [r1, r2]
  402522:	4282      	cmp	r2, r0
  402524:	d007      	beq.n	402536 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  402526:	3301      	adds	r3, #1
  402528:	b2db      	uxtb	r3, r3
  40252a:	2b01      	cmp	r3, #1
  40252c:	d9f4      	bls.n	402518 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  40252e:	2000      	movs	r0, #0
}
  402530:	f85d 4b04 	ldr.w	r4, [sp], #4
  402534:	4770      	bx	lr
			return &(_tcs[i]);
  402536:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  40253a:	00a3      	lsls	r3, r4, #2
  40253c:	4608      	mov	r0, r1
  40253e:	4418      	add	r0, r3
  402540:	e7f6      	b.n	402530 <get_cfg+0x20>
	return NULL;
  402542:	2000      	movs	r0, #0
  402544:	4770      	bx	lr
  402546:	bf00      	nop
  402548:	20400000 	.word	0x20400000

0040254c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  40254c:	4b06      	ldr	r3, [pc, #24]	; (402568 <_tc_init_irq_param+0x1c>)
  40254e:	4298      	cmp	r0, r3
  402550:	d003      	beq.n	40255a <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  402552:	4b06      	ldr	r3, [pc, #24]	; (40256c <_tc_init_irq_param+0x20>)
  402554:	4298      	cmp	r0, r3
  402556:	d003      	beq.n	402560 <_tc_init_irq_param+0x14>
  402558:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  40255a:	4b05      	ldr	r3, [pc, #20]	; (402570 <_tc_init_irq_param+0x24>)
  40255c:	6019      	str	r1, [r3, #0]
  40255e:	e7f8      	b.n	402552 <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  402560:	4b03      	ldr	r3, [pc, #12]	; (402570 <_tc_init_irq_param+0x24>)
  402562:	6059      	str	r1, [r3, #4]
	}
}
  402564:	e7f8      	b.n	402558 <_tc_init_irq_param+0xc>
  402566:	bf00      	nop
  402568:	4000c000 	.word	0x4000c000
  40256c:	40054000 	.word	0x40054000
  402570:	20400394 	.word	0x20400394

00402574 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  402574:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  402576:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  402578:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  40257a:	f013 0f10 	tst.w	r3, #16
  40257e:	d100      	bne.n	402582 <tc_interrupt_handler+0xe>
  402580:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  402582:	6803      	ldr	r3, [r0, #0]
  402584:	4798      	blx	r3
	}
}
  402586:	e7fb      	b.n	402580 <tc_interrupt_handler+0xc>

00402588 <_timer_init>:
{
  402588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40258c:	4606      	mov	r6, r0
  40258e:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  402590:	4608      	mov	r0, r1
  402592:	4b2f      	ldr	r3, [pc, #188]	; (402650 <_timer_init+0xc8>)
  402594:	4798      	blx	r3
  402596:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  402598:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  40259c:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  4025a0:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  4025a2:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  4025a6:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  4025a8:	22c3      	movs	r2, #195	; 0xc3
  4025aa:	492a      	ldr	r1, [pc, #168]	; (402654 <_timer_init+0xcc>)
  4025ac:	2001      	movs	r0, #1
  4025ae:	4b2a      	ldr	r3, [pc, #168]	; (402658 <_timer_init+0xd0>)
  4025b0:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  4025b2:	f248 0307 	movw	r3, #32775	; 0x8007
  4025b6:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4025b8:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4025bc:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4025c0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4025c4:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4025c6:	2300      	movs	r3, #0
  4025c8:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  4025ca:	f248 020f 	movw	r2, #32783	; 0x800f
  4025ce:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4025d0:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4025d4:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4025d8:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4025dc:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4025de:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  4025e0:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  4025e2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  4025e6:	4631      	mov	r1, r6
  4025e8:	4620      	mov	r0, r4
  4025ea:	4b1c      	ldr	r3, [pc, #112]	; (40265c <_timer_init+0xd4>)
  4025ec:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  4025ee:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4025f2:	2b00      	cmp	r3, #0
  4025f4:	db0d      	blt.n	402612 <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4025f6:	095a      	lsrs	r2, r3, #5
  4025f8:	f003 031f 	and.w	r3, r3, #31
  4025fc:	2101      	movs	r1, #1
  4025fe:	fa01 f303 	lsl.w	r3, r1, r3
  402602:	3220      	adds	r2, #32
  402604:	4916      	ldr	r1, [pc, #88]	; (402660 <_timer_init+0xd8>)
  402606:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40260a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40260e:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  402612:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402616:	2b00      	cmp	r3, #0
  402618:	db09      	blt.n	40262e <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40261a:	095a      	lsrs	r2, r3, #5
  40261c:	f003 031f 	and.w	r3, r3, #31
  402620:	2101      	movs	r1, #1
  402622:	fa01 f303 	lsl.w	r3, r1, r3
  402626:	3260      	adds	r2, #96	; 0x60
  402628:	490d      	ldr	r1, [pc, #52]	; (402660 <_timer_init+0xd8>)
  40262a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  40262e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402632:	2b00      	cmp	r3, #0
  402634:	db08      	blt.n	402648 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402636:	0959      	lsrs	r1, r3, #5
  402638:	f003 031f 	and.w	r3, r3, #31
  40263c:	2201      	movs	r2, #1
  40263e:	fa02 f303 	lsl.w	r3, r2, r3
  402642:	4a07      	ldr	r2, [pc, #28]	; (402660 <_timer_init+0xd8>)
  402644:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  402648:	2000      	movs	r0, #0
  40264a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40264e:	bf00      	nop
  402650:	00402511 	.word	0x00402511
  402654:	004063fc 	.word	0x004063fc
  402658:	00401949 	.word	0x00401949
  40265c:	0040254d 	.word	0x0040254d
  402660:	e000e100 	.word	0xe000e100

00402664 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402664:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  402666:	2305      	movs	r3, #5
  402668:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  40266a:	68c2      	ldr	r2, [r0, #12]
  40266c:	6413      	str	r3, [r2, #64]	; 0x40
  40266e:	4770      	bx	lr

00402670 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  402670:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  402672:	6a13      	ldr	r3, [r2, #32]
  402674:	f3c3 4300 	ubfx	r3, r3, #16, #1
  402678:	6e10      	ldr	r0, [r2, #96]	; 0x60
  40267a:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  40267e:	4318      	orrs	r0, r3
  402680:	4770      	bx	lr

00402682 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  402682:	2000      	movs	r0, #0
  402684:	4770      	bx	lr
	...

00402688 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  402688:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  40268a:	4b02      	ldr	r3, [pc, #8]	; (402694 <TC0_Handler+0xc>)
  40268c:	6818      	ldr	r0, [r3, #0]
  40268e:	4b02      	ldr	r3, [pc, #8]	; (402698 <TC0_Handler+0x10>)
  402690:	4798      	blx	r3
  402692:	bd08      	pop	{r3, pc}
  402694:	20400394 	.word	0x20400394
  402698:	00402575 	.word	0x00402575

0040269c <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  40269c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  40269e:	4b02      	ldr	r3, [pc, #8]	; (4026a8 <TC9_Handler+0xc>)
  4026a0:	6858      	ldr	r0, [r3, #4]
  4026a2:	4b02      	ldr	r3, [pc, #8]	; (4026ac <TC9_Handler+0x10>)
  4026a4:	4798      	blx	r3
  4026a6:	bd08      	pop	{r3, pc}
  4026a8:	20400394 	.word	0x20400394
  4026ac:	00402575 	.word	0x00402575

004026b0 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  4026b0:	b510      	push	{r4, lr}
	ASSERT(hw);
  4026b2:	4604      	mov	r4, r0
  4026b4:	f240 222b 	movw	r2, #555	; 0x22b
  4026b8:	4905      	ldr	r1, [pc, #20]	; (4026d0 <_usart_get_hardware_index+0x20>)
  4026ba:	3000      	adds	r0, #0
  4026bc:	bf18      	it	ne
  4026be:	2001      	movne	r0, #1
  4026c0:	4b04      	ldr	r3, [pc, #16]	; (4026d4 <_usart_get_hardware_index+0x24>)
  4026c2:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  4026c4:	4804      	ldr	r0, [pc, #16]	; (4026d8 <_usart_get_hardware_index+0x28>)
  4026c6:	4420      	add	r0, r4
}
  4026c8:	f3c0 3087 	ubfx	r0, r0, #14, #8
  4026cc:	bd10      	pop	{r4, pc}
  4026ce:	bf00      	nop
  4026d0:	0040641c 	.word	0x0040641c
  4026d4:	00401949 	.word	0x00401949
  4026d8:	bffdc000 	.word	0xbffdc000

004026dc <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  4026dc:	b510      	push	{r4, lr}
	ASSERT(hw);
  4026de:	4604      	mov	r4, r0
  4026e0:	f240 2287 	movw	r2, #647	; 0x287
  4026e4:	490e      	ldr	r1, [pc, #56]	; (402720 <_get_usart_index+0x44>)
  4026e6:	3000      	adds	r0, #0
  4026e8:	bf18      	it	ne
  4026ea:	2001      	movne	r0, #1
  4026ec:	4b0d      	ldr	r3, [pc, #52]	; (402724 <_get_usart_index+0x48>)
  4026ee:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  4026f0:	4620      	mov	r0, r4
  4026f2:	4b0d      	ldr	r3, [pc, #52]	; (402728 <_get_usart_index+0x4c>)
  4026f4:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4026f6:	2300      	movs	r3, #0
  4026f8:	b143      	cbz	r3, 40270c <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  4026fa:	f240 2291 	movw	r2, #657	; 0x291
  4026fe:	4908      	ldr	r1, [pc, #32]	; (402720 <_get_usart_index+0x44>)
  402700:	2000      	movs	r0, #0
  402702:	4b08      	ldr	r3, [pc, #32]	; (402724 <_get_usart_index+0x48>)
  402704:	4798      	blx	r3
	return 0;
  402706:	2300      	movs	r3, #0
}
  402708:	4618      	mov	r0, r3
  40270a:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  40270c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  402710:	008a      	lsls	r2, r1, #2
  402712:	4906      	ldr	r1, [pc, #24]	; (40272c <_get_usart_index+0x50>)
  402714:	5c8a      	ldrb	r2, [r1, r2]
  402716:	4290      	cmp	r0, r2
  402718:	d0f6      	beq.n	402708 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40271a:	3301      	adds	r3, #1
  40271c:	b2db      	uxtb	r3, r3
  40271e:	e7eb      	b.n	4026f8 <_get_usart_index+0x1c>
  402720:	0040641c 	.word	0x0040641c
  402724:	00401949 	.word	0x00401949
  402728:	004026b1 	.word	0x004026b1
  40272c:	00406410 	.word	0x00406410

00402730 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  402730:	b510      	push	{r4, lr}
	ASSERT(hw);
  402732:	4604      	mov	r4, r0
  402734:	f240 229e 	movw	r2, #670	; 0x29e
  402738:	4911      	ldr	r1, [pc, #68]	; (402780 <_usart_init+0x50>)
  40273a:	3000      	adds	r0, #0
  40273c:	bf18      	it	ne
  40273e:	2001      	movne	r0, #1
  402740:	4b10      	ldr	r3, [pc, #64]	; (402784 <_usart_init+0x54>)
  402742:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  402744:	4620      	mov	r0, r4
  402746:	4b10      	ldr	r3, [pc, #64]	; (402788 <_usart_init+0x58>)
  402748:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  40274a:	4b10      	ldr	r3, [pc, #64]	; (40278c <_usart_init+0x5c>)
  40274c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  402750:	2300      	movs	r3, #0
  402752:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  402754:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  402756:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  402758:	22ac      	movs	r2, #172	; 0xac
  40275a:	6022      	str	r2, [r4, #0]
  40275c:	f44f 7280 	mov.w	r2, #256	; 0x100
  402760:	6022      	str	r2, [r4, #0]
  402762:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402766:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  402768:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  40276c:	0081      	lsls	r1, r0, #2
  40276e:	4a08      	ldr	r2, [pc, #32]	; (402790 <_usart_init+0x60>)
  402770:	440a      	add	r2, r1
  402772:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  402774:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  402776:	4a07      	ldr	r2, [pc, #28]	; (402794 <_usart_init+0x64>)
  402778:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  40277a:	4618      	mov	r0, r3
  40277c:	bd10      	pop	{r4, pc}
  40277e:	bf00      	nop
  402780:	0040641c 	.word	0x0040641c
  402784:	00401949 	.word	0x00401949
  402788:	004026dd 	.word	0x004026dd
  40278c:	55534100 	.word	0x55534100
  402790:	00406410 	.word	0x00406410
  402794:	000100f4 	.word	0x000100f4

00402798 <_usart_sync_init>:
{
  402798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40279a:	460c      	mov	r4, r1
	ASSERT(device);
  40279c:	4e09      	ldr	r6, [pc, #36]	; (4027c4 <_usart_sync_init+0x2c>)
  40279e:	4607      	mov	r7, r0
  4027a0:	22bd      	movs	r2, #189	; 0xbd
  4027a2:	4631      	mov	r1, r6
  4027a4:	3000      	adds	r0, #0
  4027a6:	bf18      	it	ne
  4027a8:	2001      	movne	r0, #1
  4027aa:	4d07      	ldr	r5, [pc, #28]	; (4027c8 <_usart_sync_init+0x30>)
  4027ac:	47a8      	blx	r5
	ASSERT(hw);
  4027ae:	22be      	movs	r2, #190	; 0xbe
  4027b0:	4631      	mov	r1, r6
  4027b2:	1c20      	adds	r0, r4, #0
  4027b4:	bf18      	it	ne
  4027b6:	2001      	movne	r0, #1
  4027b8:	47a8      	blx	r5
	device->hw = hw;
  4027ba:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  4027bc:	4620      	mov	r0, r4
  4027be:	4b03      	ldr	r3, [pc, #12]	; (4027cc <_usart_sync_init+0x34>)
  4027c0:	4798      	blx	r3
}
  4027c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4027c4:	0040641c 	.word	0x0040641c
  4027c8:	00401949 	.word	0x00401949
  4027cc:	00402731 	.word	0x00402731

004027d0 <_usart_sync_enable>:
{
  4027d0:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4027d2:	4e0a      	ldr	r6, [pc, #40]	; (4027fc <_usart_sync_enable+0x2c>)
  4027d4:	4604      	mov	r4, r0
  4027d6:	f240 1205 	movw	r2, #261	; 0x105
  4027da:	4631      	mov	r1, r6
  4027dc:	3000      	adds	r0, #0
  4027de:	bf18      	it	ne
  4027e0:	2001      	movne	r0, #1
  4027e2:	4d07      	ldr	r5, [pc, #28]	; (402800 <_usart_sync_enable+0x30>)
  4027e4:	47a8      	blx	r5
	_usart_enable(device->hw);
  4027e6:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4027e8:	f240 22c7 	movw	r2, #711	; 0x2c7
  4027ec:	4631      	mov	r1, r6
  4027ee:	1c20      	adds	r0, r4, #0
  4027f0:	bf18      	it	ne
  4027f2:	2001      	movne	r0, #1
  4027f4:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  4027f6:	2350      	movs	r3, #80	; 0x50
  4027f8:	6023      	str	r3, [r4, #0]
  4027fa:	bd70      	pop	{r4, r5, r6, pc}
  4027fc:	0040641c 	.word	0x0040641c
  402800:	00401949 	.word	0x00401949

00402804 <_usart_sync_write_byte>:
{
  402804:	b538      	push	{r3, r4, r5, lr}
  402806:	460c      	mov	r4, r1
	ASSERT(device);
  402808:	4605      	mov	r5, r0
  40280a:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  40280e:	4904      	ldr	r1, [pc, #16]	; (402820 <_usart_sync_write_byte+0x1c>)
  402810:	3000      	adds	r0, #0
  402812:	bf18      	it	ne
  402814:	2001      	movne	r0, #1
  402816:	4b03      	ldr	r3, [pc, #12]	; (402824 <_usart_sync_write_byte+0x20>)
  402818:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  40281a:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  40281c:	61dc      	str	r4, [r3, #28]
  40281e:	bd38      	pop	{r3, r4, r5, pc}
  402820:	0040641c 	.word	0x0040641c
  402824:	00401949 	.word	0x00401949

00402828 <_usart_sync_read_byte>:
{
  402828:	b510      	push	{r4, lr}
	ASSERT(device);
  40282a:	4604      	mov	r4, r0
  40282c:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  402830:	4904      	ldr	r1, [pc, #16]	; (402844 <_usart_sync_read_byte+0x1c>)
  402832:	3000      	adds	r0, #0
  402834:	bf18      	it	ne
  402836:	2001      	movne	r0, #1
  402838:	4b03      	ldr	r3, [pc, #12]	; (402848 <_usart_sync_read_byte+0x20>)
  40283a:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  40283c:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  40283e:	6998      	ldr	r0, [r3, #24]
}
  402840:	b2c0      	uxtb	r0, r0
  402842:	bd10      	pop	{r4, pc}
  402844:	0040641c 	.word	0x0040641c
  402848:	00401949 	.word	0x00401949

0040284c <_usart_sync_is_ready_to_send>:
{
  40284c:	b510      	push	{r4, lr}
	ASSERT(device);
  40284e:	4604      	mov	r4, r0
  402850:	f240 12c3 	movw	r2, #451	; 0x1c3
  402854:	4905      	ldr	r1, [pc, #20]	; (40286c <_usart_sync_is_ready_to_send+0x20>)
  402856:	3000      	adds	r0, #0
  402858:	bf18      	it	ne
  40285a:	2001      	movne	r0, #1
  40285c:	4b04      	ldr	r3, [pc, #16]	; (402870 <_usart_sync_is_ready_to_send+0x24>)
  40285e:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  402860:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  402862:	6958      	ldr	r0, [r3, #20]
}
  402864:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402868:	bd10      	pop	{r4, pc}
  40286a:	bf00      	nop
  40286c:	0040641c 	.word	0x0040641c
  402870:	00401949 	.word	0x00401949

00402874 <_usart_sync_is_transmit_done>:
{
  402874:	b510      	push	{r4, lr}
	ASSERT(device);
  402876:	4604      	mov	r4, r0
  402878:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  40287c:	4905      	ldr	r1, [pc, #20]	; (402894 <_usart_sync_is_transmit_done+0x20>)
  40287e:	3000      	adds	r0, #0
  402880:	bf18      	it	ne
  402882:	2001      	movne	r0, #1
  402884:	4b04      	ldr	r3, [pc, #16]	; (402898 <_usart_sync_is_transmit_done+0x24>)
  402886:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  402888:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  40288a:	6958      	ldr	r0, [r3, #20]
}
  40288c:	f3c0 2040 	ubfx	r0, r0, #9, #1
  402890:	bd10      	pop	{r4, pc}
  402892:	bf00      	nop
  402894:	0040641c 	.word	0x0040641c
  402898:	00401949 	.word	0x00401949

0040289c <_usart_sync_is_byte_received>:
{
  40289c:	b510      	push	{r4, lr}
	ASSERT(device);
  40289e:	4604      	mov	r4, r0
  4028a0:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4028a4:	4905      	ldr	r1, [pc, #20]	; (4028bc <_usart_sync_is_byte_received+0x20>)
  4028a6:	3000      	adds	r0, #0
  4028a8:	bf18      	it	ne
  4028aa:	2001      	movne	r0, #1
  4028ac:	4b04      	ldr	r3, [pc, #16]	; (4028c0 <_usart_sync_is_byte_received+0x24>)
  4028ae:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  4028b0:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  4028b2:	6958      	ldr	r0, [r3, #20]
  4028b4:	f000 0001 	and.w	r0, r0, #1
}
  4028b8:	bd10      	pop	{r4, pc}
  4028ba:	bf00      	nop
  4028bc:	0040641c 	.word	0x0040641c
  4028c0:	00401949 	.word	0x00401949

004028c4 <_usart_get_usart_sync>:
}
  4028c4:	2000      	movs	r0, #0
  4028c6:	4770      	bx	lr

004028c8 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  4028c8:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4028ca:	2300      	movs	r3, #0
  4028cc:	e004      	b.n	4028d8 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  4028ce:	0199      	lsls	r1, r3, #6
  4028d0:	4a16      	ldr	r2, [pc, #88]	; (40292c <_dma_init+0x64>)
  4028d2:	5852      	ldr	r2, [r2, r1]
  4028d4:	3301      	adds	r3, #1
  4028d6:	b2db      	uxtb	r3, r3
  4028d8:	2b17      	cmp	r3, #23
  4028da:	d9f8      	bls.n	4028ce <_dma_init+0x6>
  4028dc:	2300      	movs	r3, #0
  4028de:	e014      	b.n	40290a <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  4028e0:	4c13      	ldr	r4, [pc, #76]	; (402930 <_dma_init+0x68>)
  4028e2:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  4028e6:	2100      	movs	r1, #0
  4028e8:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  4028ea:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  4028ec:	1c98      	adds	r0, r3, #2
  4028ee:	0180      	lsls	r0, r0, #6
  4028f0:	1825      	adds	r5, r4, r0
  4028f2:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  4028f4:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  4028f6:	490f      	ldr	r1, [pc, #60]	; (402934 <_dma_init+0x6c>)
  4028f8:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  4028fc:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  4028fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  402902:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  402904:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  402906:	3301      	adds	r3, #1
  402908:	b2db      	uxtb	r3, r3
  40290a:	2b17      	cmp	r3, #23
  40290c:	d9e8      	bls.n	4028e0 <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40290e:	4b0a      	ldr	r3, [pc, #40]	; (402938 <_dma_init+0x70>)
  402910:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  402918:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40291c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402920:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402924:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  402926:	2000      	movs	r0, #0
  402928:	bc30      	pop	{r4, r5}
  40292a:	4770      	bx	lr
  40292c:	4007805c 	.word	0x4007805c
  402930:	40078000 	.word	0x40078000
  402934:	00406438 	.word	0x00406438
  402938:	e000e100 	.word	0xe000e100

0040293c <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  40293c:	0180      	lsls	r0, r0, #6
  40293e:	4b02      	ldr	r3, [pc, #8]	; (402948 <_dma_set_destination_address+0xc>)
  402940:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  402942:	2000      	movs	r0, #0
  402944:	4770      	bx	lr
  402946:	bf00      	nop
  402948:	40078064 	.word	0x40078064

0040294c <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  40294c:	0180      	lsls	r0, r0, #6
  40294e:	4b02      	ldr	r3, [pc, #8]	; (402958 <_dma_set_source_address+0xc>)
  402950:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  402952:	2000      	movs	r0, #0
  402954:	4770      	bx	lr
  402956:	bf00      	nop
  402958:	40078060 	.word	0x40078060

0040295c <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  40295c:	0180      	lsls	r0, r0, #6
  40295e:	4a04      	ldr	r2, [pc, #16]	; (402970 <_dma_set_data_amount+0x14>)
  402960:	4402      	add	r2, r0
  402962:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  402964:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  402968:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  40296a:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  40296c:	2000      	movs	r0, #0
  40296e:	4770      	bx	lr
  402970:	40078000 	.word	0x40078000

00402974 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  402974:	2301      	movs	r3, #1
  402976:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  40297a:	4b03      	ldr	r3, [pc, #12]	; (402988 <_dma_enable_transaction+0x14>)
  40297c:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  40297e:	b101      	cbz	r1, 402982 <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  402980:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  402982:	2000      	movs	r0, #0
  402984:	4770      	bx	lr
  402986:	bf00      	nop
  402988:	40078000 	.word	0x40078000

0040298c <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  40298c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  402990:	008a      	lsls	r2, r1, #2
  402992:	4b02      	ldr	r3, [pc, #8]	; (40299c <_dma_get_channel_resource+0x10>)
  402994:	4413      	add	r3, r2
  402996:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  402998:	2000      	movs	r0, #0
  40299a:	4770      	bx	lr
  40299c:	2040039c 	.word	0x2040039c

004029a0 <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  4029a0:	b19a      	cbz	r2, 4029ca <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  4029a2:	b951      	cbnz	r1, 4029ba <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  4029a4:	0182      	lsls	r2, r0, #6
  4029a6:	4b13      	ldr	r3, [pc, #76]	; (4029f4 <_dma_set_irq_state+0x54>)
  4029a8:	4413      	add	r3, r2
  4029aa:	2201      	movs	r2, #1
  4029ac:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  4029ae:	2301      	movs	r3, #1
  4029b0:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  4029b4:	4b0f      	ldr	r3, [pc, #60]	; (4029f4 <_dma_set_irq_state+0x54>)
  4029b6:	60d8      	str	r0, [r3, #12]
  4029b8:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4029ba:	2901      	cmp	r1, #1
  4029bc:	d1f7      	bne.n	4029ae <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  4029be:	0182      	lsls	r2, r0, #6
  4029c0:	4b0c      	ldr	r3, [pc, #48]	; (4029f4 <_dma_set_irq_state+0x54>)
  4029c2:	4413      	add	r3, r2
  4029c4:	2270      	movs	r2, #112	; 0x70
  4029c6:	651a      	str	r2, [r3, #80]	; 0x50
  4029c8:	e7f1      	b.n	4029ae <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  4029ca:	b951      	cbnz	r1, 4029e2 <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4029cc:	0182      	lsls	r2, r0, #6
  4029ce:	4b09      	ldr	r3, [pc, #36]	; (4029f4 <_dma_set_irq_state+0x54>)
  4029d0:	4413      	add	r3, r2
  4029d2:	2201      	movs	r2, #1
  4029d4:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  4029d6:	2301      	movs	r3, #1
  4029d8:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  4029dc:	4b05      	ldr	r3, [pc, #20]	; (4029f4 <_dma_set_irq_state+0x54>)
  4029de:	6118      	str	r0, [r3, #16]
  4029e0:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4029e2:	2901      	cmp	r1, #1
  4029e4:	d1f7      	bne.n	4029d6 <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4029e6:	0182      	lsls	r2, r0, #6
  4029e8:	4b02      	ldr	r3, [pc, #8]	; (4029f4 <_dma_set_irq_state+0x54>)
  4029ea:	4413      	add	r3, r2
  4029ec:	2270      	movs	r2, #112	; 0x70
  4029ee:	655a      	str	r2, [r3, #84]	; 0x54
  4029f0:	e7f1      	b.n	4029d6 <_dma_set_irq_state+0x36>
  4029f2:	bf00      	nop
  4029f4:	40078000 	.word	0x40078000

004029f8 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  4029f8:	4b17      	ldr	r3, [pc, #92]	; (402a58 <XDMAC_Handler+0x60>)
  4029fa:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4029fc:	2300      	movs	r3, #0
  4029fe:	2b17      	cmp	r3, #23
  402a00:	d81b      	bhi.n	402a3a <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  402a02:	fa21 f203 	lsr.w	r2, r1, r3
  402a06:	f012 0f01 	tst.w	r2, #1
  402a0a:	d102      	bne.n	402a12 <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  402a0c:	3301      	adds	r3, #1
  402a0e:	b2db      	uxtb	r3, r3
  402a10:	e7f5      	b.n	4029fe <XDMAC_Handler+0x6>
			channel = i;
  402a12:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  402a14:	2b00      	cmp	r3, #0
  402a16:	db1d      	blt.n	402a54 <XDMAC_Handler+0x5c>
{
  402a18:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  402a1a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  402a1e:	0090      	lsls	r0, r2, #2
  402a20:	4a0e      	ldr	r2, [pc, #56]	; (402a5c <XDMAC_Handler+0x64>)
  402a22:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  402a24:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  402a26:	0189      	lsls	r1, r1, #6
  402a28:	4a0d      	ldr	r2, [pc, #52]	; (402a60 <XDMAC_Handler+0x68>)
  402a2a:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  402a2c:	f012 0f70 	tst.w	r2, #112	; 0x70
  402a30:	d106      	bne.n	402a40 <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  402a32:	f012 0f01 	tst.w	r2, #1
  402a36:	d106      	bne.n	402a46 <XDMAC_Handler+0x4e>
  402a38:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  402a3a:	f04f 33ff 	mov.w	r3, #4294967295
  402a3e:	e7e9      	b.n	402a14 <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  402a40:	6843      	ldr	r3, [r0, #4]
  402a42:	4798      	blx	r3
  402a44:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  402a46:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  402a4a:	00a3      	lsls	r3, r4, #2
  402a4c:	4a03      	ldr	r2, [pc, #12]	; (402a5c <XDMAC_Handler+0x64>)
  402a4e:	58d3      	ldr	r3, [r2, r3]
  402a50:	4798      	blx	r3
  402a52:	e7f1      	b.n	402a38 <XDMAC_Handler+0x40>
  402a54:	4770      	bx	lr
  402a56:	bf00      	nop
  402a58:	40078000 	.word	0x40078000
  402a5c:	2040039c 	.word	0x2040039c
  402a60:	4007805c 	.word	0x4007805c

00402a64 <main>:




int main(void)
{
  402a64:	b580      	push	{r7, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  402a66:	4b19      	ldr	r3, [pc, #100]	; (402acc <main+0x68>)
  402a68:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	/* Additional User initialisation */
	dma_adc_init();
  402a6a:	4b19      	ldr	r3, [pc, #100]	; (402ad0 <main+0x6c>)
  402a6c:	4798      	blx	r3
	pwm_init_user();
  402a6e:	4b19      	ldr	r3, [pc, #100]	; (402ad4 <main+0x70>)
  402a70:	4798      	blx	r3
	encoder_init();
  402a72:	4b19      	ldr	r3, [pc, #100]	; (402ad8 <main+0x74>)
  402a74:	4798      	blx	r3
	pos_sens_init();
  402a76:	4b19      	ldr	r3, [pc, #100]	; (402adc <main+0x78>)
  402a78:	4798      	blx	r3
	
	/* Enable all devices */
	pwm_enable_all();
  402a7a:	4b19      	ldr	r3, [pc, #100]	; (402ae0 <main+0x7c>)
  402a7c:	4798      	blx	r3
	adc_enable_all();
  402a7e:	4b19      	ldr	r3, [pc, #100]	; (402ae4 <main+0x80>)
  402a80:	4798      	blx	r3
	calibrate_curr_sensors();	//both PWM and ADC need to be enabled to calibrate the current sensors
  402a82:	4b19      	ldr	r3, [pc, #100]	; (402ae8 <main+0x84>)
  402a84:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  402a86:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  402a8a:	4b18      	ldr	r3, [pc, #96]	; (402aec <main+0x88>)
  402a8c:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);		//enables the DC-DC converter for the HV side
	
	timer_start(&ENCODER_A);
  402a8e:	4818      	ldr	r0, [pc, #96]	; (402af0 <main+0x8c>)
  402a90:	4c18      	ldr	r4, [pc, #96]	; (402af4 <main+0x90>)
  402a92:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  402a94:	4818      	ldr	r0, [pc, #96]	; (402af8 <main+0x94>)
  402a96:	47a0      	blx	r4
	//test position sensor
	//POS_Sensor_Initial_Test();
	
	
	
	Current_Offset_Test();
  402a98:	4b18      	ldr	r3, [pc, #96]	; (402afc <main+0x98>)
  402a9a:	4798      	blx	r3
  402a9c:	4f18      	ldr	r7, [pc, #96]	; (402b00 <main+0x9c>)
  402a9e:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
  402aa2:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
  402aa6:	4d17      	ldr	r5, [pc, #92]	; (402b04 <main+0xa0>)
  402aa8:	f44f 7680 	mov.w	r6, #256	; 0x100
  402aac:	632e      	str	r6, [r5, #48]	; 0x30
	/* Replace with your application code */
	while (1) {
		
		gpio_set_pin_level(PIN_GPIO_6,true);
		gpio_set_pin_level(PIN_USER_LED,true);
		delay_ms(500);
  402aae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402ab2:	4c15      	ldr	r4, [pc, #84]	; (402b08 <main+0xa4>)
  402ab4:	47a0      	blx	r4
		
		dma_adc_0_enable_for_one_transaction();
  402ab6:	4b15      	ldr	r3, [pc, #84]	; (402b0c <main+0xa8>)
  402ab8:	4798      	blx	r3
		dma_adc_1_enable_for_one_transaction();
  402aba:	4b15      	ldr	r3, [pc, #84]	; (402b10 <main+0xac>)
  402abc:	4798      	blx	r3
	((Pio *)hw)->PIO_CODR = mask;
  402abe:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  402ac2:	636e      	str	r6, [r5, #52]	; 0x34
		//printf("main - %i %i %i %i %i %i %i %i %i %i %i %i  \n", (int)afec_buf[0],(int)afec_buf[1],(int)afec_buf[2],(int)afec_buf[3],(int)afec_buf[4],(int)afec_buf[5],(int)afec_buf[6],(int)afec_buf[7],(int)afec_buf[8],(int)afec_buf[9],(int)afec_buf[10],(int)afec_buf[11]);
		//AFEC0_Handler
		
		gpio_set_pin_level(PIN_GPIO_6,false);
		gpio_set_pin_level(PIN_USER_LED,false);
		delay_ms(500);
  402ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402ac8:	47a0      	blx	r4
  402aca:	e7e7      	b.n	402a9c <main+0x38>
  402acc:	004001d5 	.word	0x004001d5
  402ad0:	00400851 	.word	0x00400851
  402ad4:	00400a0d 	.word	0x00400a0d
  402ad8:	004002dd 	.word	0x004002dd
  402adc:	004005e1 	.word	0x004005e1
  402ae0:	00400ae1 	.word	0x00400ae1
  402ae4:	0040093d 	.word	0x0040093d
  402ae8:	00400231 	.word	0x00400231
  402aec:	400e0e00 	.word	0x400e0e00
  402af0:	204005f4 	.word	0x204005f4
  402af4:	004017c9 	.word	0x004017c9
  402af8:	20400544 	.word	0x20400544
  402afc:	00400b41 	.word	0x00400b41
  402b00:	400e1400 	.word	0x400e1400
  402b04:	400e1200 	.word	0x400e1200
  402b08:	00401401 	.word	0x00401401
  402b0c:	0040066d 	.word	0x0040066d
  402b10:	00400751 	.word	0x00400751

00402b14 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  402b14:	b958      	cbnz	r0, 402b2e <_read+0x1a>
{
  402b16:	b508      	push	{r3, lr}
  402b18:	460b      	mov	r3, r1
  402b1a:	4611      	mov	r1, r2
  402b1c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  402b1e:	4b05      	ldr	r3, [pc, #20]	; (402b34 <_read+0x20>)
  402b20:	4798      	blx	r3
	if (n < 0) {
  402b22:	2800      	cmp	r0, #0
  402b24:	db00      	blt.n	402b28 <_read+0x14>
		return -1;
	}

	return n;
}
  402b26:	bd08      	pop	{r3, pc}
		return -1;
  402b28:	f04f 30ff 	mov.w	r0, #4294967295
  402b2c:	bd08      	pop	{r3, pc}
		return -1;
  402b2e:	f04f 30ff 	mov.w	r0, #4294967295
  402b32:	4770      	bx	lr
  402b34:	00402b8d 	.word	0x00402b8d

00402b38 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  402b38:	3801      	subs	r0, #1
  402b3a:	2802      	cmp	r0, #2
  402b3c:	d80b      	bhi.n	402b56 <_write+0x1e>
{
  402b3e:	b508      	push	{r3, lr}
  402b40:	460b      	mov	r3, r1
  402b42:	4611      	mov	r1, r2
  402b44:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  402b46:	4b05      	ldr	r3, [pc, #20]	; (402b5c <_write+0x24>)
  402b48:	4798      	blx	r3
	if (n < 0) {
  402b4a:	2800      	cmp	r0, #0
  402b4c:	db00      	blt.n	402b50 <_write+0x18>
		return -1;
	}

	return n;
}
  402b4e:	bd08      	pop	{r3, pc}
		return -1;
  402b50:	f04f 30ff 	mov.w	r0, #4294967295
  402b54:	bd08      	pop	{r3, pc}
		return -1;
  402b56:	f04f 30ff 	mov.w	r0, #4294967295
  402b5a:	4770      	bx	lr
  402b5c:	00402bb1 	.word	0x00402bb1

00402b60 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  402b60:	b570      	push	{r4, r5, r6, lr}
  402b62:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  402b64:	4d06      	ldr	r5, [pc, #24]	; (402b80 <stdio_io_init+0x20>)
  402b66:	682b      	ldr	r3, [r5, #0]
  402b68:	2100      	movs	r1, #0
  402b6a:	6898      	ldr	r0, [r3, #8]
  402b6c:	4c05      	ldr	r4, [pc, #20]	; (402b84 <stdio_io_init+0x24>)
  402b6e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  402b70:	682b      	ldr	r3, [r5, #0]
  402b72:	2100      	movs	r1, #0
  402b74:	6858      	ldr	r0, [r3, #4]
  402b76:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  402b78:	4b03      	ldr	r3, [pc, #12]	; (402b88 <stdio_io_init+0x28>)
  402b7a:	601e      	str	r6, [r3, #0]
  402b7c:	bd70      	pop	{r4, r5, r6, pc}
  402b7e:	bf00      	nop
  402b80:	20400048 	.word	0x20400048
  402b84:	00403f11 	.word	0x00403f11
  402b88:	204004bc 	.word	0x204004bc

00402b8c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  402b8c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  402b8e:	4b06      	ldr	r3, [pc, #24]	; (402ba8 <stdio_io_read+0x1c>)
  402b90:	681b      	ldr	r3, [r3, #0]
  402b92:	b133      	cbz	r3, 402ba2 <stdio_io_read+0x16>
  402b94:	460a      	mov	r2, r1
  402b96:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  402b98:	b292      	uxth	r2, r2
  402b9a:	4618      	mov	r0, r3
  402b9c:	4b03      	ldr	r3, [pc, #12]	; (402bac <stdio_io_read+0x20>)
  402b9e:	4798      	blx	r3
  402ba0:	bd08      	pop	{r3, pc}
		return 0;
  402ba2:	2000      	movs	r0, #0
}
  402ba4:	bd08      	pop	{r3, pc}
  402ba6:	bf00      	nop
  402ba8:	204004bc 	.word	0x204004bc
  402bac:	00401599 	.word	0x00401599

00402bb0 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  402bb0:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  402bb2:	4b06      	ldr	r3, [pc, #24]	; (402bcc <stdio_io_write+0x1c>)
  402bb4:	681b      	ldr	r3, [r3, #0]
  402bb6:	b133      	cbz	r3, 402bc6 <stdio_io_write+0x16>
  402bb8:	460a      	mov	r2, r1
  402bba:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  402bbc:	b292      	uxth	r2, r2
  402bbe:	4618      	mov	r0, r3
  402bc0:	4b03      	ldr	r3, [pc, #12]	; (402bd0 <stdio_io_write+0x20>)
  402bc2:	4798      	blx	r3
  402bc4:	bd08      	pop	{r3, pc}
		return 0;
  402bc6:	2000      	movs	r0, #0
}
  402bc8:	bd08      	pop	{r3, pc}
  402bca:	bf00      	nop
  402bcc:	204004bc 	.word	0x204004bc
  402bd0:	00401569 	.word	0x00401569

00402bd4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  402bd4:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  402bd6:	4c04      	ldr	r4, [pc, #16]	; (402be8 <stdio_redirect_init+0x14>)
  402bd8:	4620      	mov	r0, r4
  402bda:	4b04      	ldr	r3, [pc, #16]	; (402bec <stdio_redirect_init+0x18>)
  402bdc:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  402bde:	4620      	mov	r0, r4
  402be0:	4b03      	ldr	r3, [pc, #12]	; (402bf0 <stdio_redirect_init+0x1c>)
  402be2:	4798      	blx	r3
  402be4:	bd10      	pop	{r4, pc}
  402be6:	bf00      	nop
  402be8:	204005e8 	.word	0x204005e8
  402bec:	0040191d 	.word	0x0040191d
  402bf0:	00402b61 	.word	0x00402b61

00402bf4 <__aeabi_drsub>:
  402bf4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402bf8:	e002      	b.n	402c00 <__adddf3>
  402bfa:	bf00      	nop

00402bfc <__aeabi_dsub>:
  402bfc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402c00 <__adddf3>:
  402c00:	b530      	push	{r4, r5, lr}
  402c02:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402c06:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402c0a:	ea94 0f05 	teq	r4, r5
  402c0e:	bf08      	it	eq
  402c10:	ea90 0f02 	teqeq	r0, r2
  402c14:	bf1f      	itttt	ne
  402c16:	ea54 0c00 	orrsne.w	ip, r4, r0
  402c1a:	ea55 0c02 	orrsne.w	ip, r5, r2
  402c1e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402c22:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402c26:	f000 80e2 	beq.w	402dee <__adddf3+0x1ee>
  402c2a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402c2e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402c32:	bfb8      	it	lt
  402c34:	426d      	neglt	r5, r5
  402c36:	dd0c      	ble.n	402c52 <__adddf3+0x52>
  402c38:	442c      	add	r4, r5
  402c3a:	ea80 0202 	eor.w	r2, r0, r2
  402c3e:	ea81 0303 	eor.w	r3, r1, r3
  402c42:	ea82 0000 	eor.w	r0, r2, r0
  402c46:	ea83 0101 	eor.w	r1, r3, r1
  402c4a:	ea80 0202 	eor.w	r2, r0, r2
  402c4e:	ea81 0303 	eor.w	r3, r1, r3
  402c52:	2d36      	cmp	r5, #54	; 0x36
  402c54:	bf88      	it	hi
  402c56:	bd30      	pophi	{r4, r5, pc}
  402c58:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402c5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402c60:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402c64:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402c68:	d002      	beq.n	402c70 <__adddf3+0x70>
  402c6a:	4240      	negs	r0, r0
  402c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402c70:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402c74:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402c78:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402c7c:	d002      	beq.n	402c84 <__adddf3+0x84>
  402c7e:	4252      	negs	r2, r2
  402c80:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402c84:	ea94 0f05 	teq	r4, r5
  402c88:	f000 80a7 	beq.w	402dda <__adddf3+0x1da>
  402c8c:	f1a4 0401 	sub.w	r4, r4, #1
  402c90:	f1d5 0e20 	rsbs	lr, r5, #32
  402c94:	db0d      	blt.n	402cb2 <__adddf3+0xb2>
  402c96:	fa02 fc0e 	lsl.w	ip, r2, lr
  402c9a:	fa22 f205 	lsr.w	r2, r2, r5
  402c9e:	1880      	adds	r0, r0, r2
  402ca0:	f141 0100 	adc.w	r1, r1, #0
  402ca4:	fa03 f20e 	lsl.w	r2, r3, lr
  402ca8:	1880      	adds	r0, r0, r2
  402caa:	fa43 f305 	asr.w	r3, r3, r5
  402cae:	4159      	adcs	r1, r3
  402cb0:	e00e      	b.n	402cd0 <__adddf3+0xd0>
  402cb2:	f1a5 0520 	sub.w	r5, r5, #32
  402cb6:	f10e 0e20 	add.w	lr, lr, #32
  402cba:	2a01      	cmp	r2, #1
  402cbc:	fa03 fc0e 	lsl.w	ip, r3, lr
  402cc0:	bf28      	it	cs
  402cc2:	f04c 0c02 	orrcs.w	ip, ip, #2
  402cc6:	fa43 f305 	asr.w	r3, r3, r5
  402cca:	18c0      	adds	r0, r0, r3
  402ccc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402cd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402cd4:	d507      	bpl.n	402ce6 <__adddf3+0xe6>
  402cd6:	f04f 0e00 	mov.w	lr, #0
  402cda:	f1dc 0c00 	rsbs	ip, ip, #0
  402cde:	eb7e 0000 	sbcs.w	r0, lr, r0
  402ce2:	eb6e 0101 	sbc.w	r1, lr, r1
  402ce6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402cea:	d31b      	bcc.n	402d24 <__adddf3+0x124>
  402cec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402cf0:	d30c      	bcc.n	402d0c <__adddf3+0x10c>
  402cf2:	0849      	lsrs	r1, r1, #1
  402cf4:	ea5f 0030 	movs.w	r0, r0, rrx
  402cf8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402cfc:	f104 0401 	add.w	r4, r4, #1
  402d00:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402d04:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402d08:	f080 809a 	bcs.w	402e40 <__adddf3+0x240>
  402d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402d10:	bf08      	it	eq
  402d12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402d16:	f150 0000 	adcs.w	r0, r0, #0
  402d1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402d1e:	ea41 0105 	orr.w	r1, r1, r5
  402d22:	bd30      	pop	{r4, r5, pc}
  402d24:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402d28:	4140      	adcs	r0, r0
  402d2a:	eb41 0101 	adc.w	r1, r1, r1
  402d2e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402d32:	f1a4 0401 	sub.w	r4, r4, #1
  402d36:	d1e9      	bne.n	402d0c <__adddf3+0x10c>
  402d38:	f091 0f00 	teq	r1, #0
  402d3c:	bf04      	itt	eq
  402d3e:	4601      	moveq	r1, r0
  402d40:	2000      	moveq	r0, #0
  402d42:	fab1 f381 	clz	r3, r1
  402d46:	bf08      	it	eq
  402d48:	3320      	addeq	r3, #32
  402d4a:	f1a3 030b 	sub.w	r3, r3, #11
  402d4e:	f1b3 0220 	subs.w	r2, r3, #32
  402d52:	da0c      	bge.n	402d6e <__adddf3+0x16e>
  402d54:	320c      	adds	r2, #12
  402d56:	dd08      	ble.n	402d6a <__adddf3+0x16a>
  402d58:	f102 0c14 	add.w	ip, r2, #20
  402d5c:	f1c2 020c 	rsb	r2, r2, #12
  402d60:	fa01 f00c 	lsl.w	r0, r1, ip
  402d64:	fa21 f102 	lsr.w	r1, r1, r2
  402d68:	e00c      	b.n	402d84 <__adddf3+0x184>
  402d6a:	f102 0214 	add.w	r2, r2, #20
  402d6e:	bfd8      	it	le
  402d70:	f1c2 0c20 	rsble	ip, r2, #32
  402d74:	fa01 f102 	lsl.w	r1, r1, r2
  402d78:	fa20 fc0c 	lsr.w	ip, r0, ip
  402d7c:	bfdc      	itt	le
  402d7e:	ea41 010c 	orrle.w	r1, r1, ip
  402d82:	4090      	lslle	r0, r2
  402d84:	1ae4      	subs	r4, r4, r3
  402d86:	bfa2      	ittt	ge
  402d88:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402d8c:	4329      	orrge	r1, r5
  402d8e:	bd30      	popge	{r4, r5, pc}
  402d90:	ea6f 0404 	mvn.w	r4, r4
  402d94:	3c1f      	subs	r4, #31
  402d96:	da1c      	bge.n	402dd2 <__adddf3+0x1d2>
  402d98:	340c      	adds	r4, #12
  402d9a:	dc0e      	bgt.n	402dba <__adddf3+0x1ba>
  402d9c:	f104 0414 	add.w	r4, r4, #20
  402da0:	f1c4 0220 	rsb	r2, r4, #32
  402da4:	fa20 f004 	lsr.w	r0, r0, r4
  402da8:	fa01 f302 	lsl.w	r3, r1, r2
  402dac:	ea40 0003 	orr.w	r0, r0, r3
  402db0:	fa21 f304 	lsr.w	r3, r1, r4
  402db4:	ea45 0103 	orr.w	r1, r5, r3
  402db8:	bd30      	pop	{r4, r5, pc}
  402dba:	f1c4 040c 	rsb	r4, r4, #12
  402dbe:	f1c4 0220 	rsb	r2, r4, #32
  402dc2:	fa20 f002 	lsr.w	r0, r0, r2
  402dc6:	fa01 f304 	lsl.w	r3, r1, r4
  402dca:	ea40 0003 	orr.w	r0, r0, r3
  402dce:	4629      	mov	r1, r5
  402dd0:	bd30      	pop	{r4, r5, pc}
  402dd2:	fa21 f004 	lsr.w	r0, r1, r4
  402dd6:	4629      	mov	r1, r5
  402dd8:	bd30      	pop	{r4, r5, pc}
  402dda:	f094 0f00 	teq	r4, #0
  402dde:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402de2:	bf06      	itte	eq
  402de4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402de8:	3401      	addeq	r4, #1
  402dea:	3d01      	subne	r5, #1
  402dec:	e74e      	b.n	402c8c <__adddf3+0x8c>
  402dee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402df2:	bf18      	it	ne
  402df4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402df8:	d029      	beq.n	402e4e <__adddf3+0x24e>
  402dfa:	ea94 0f05 	teq	r4, r5
  402dfe:	bf08      	it	eq
  402e00:	ea90 0f02 	teqeq	r0, r2
  402e04:	d005      	beq.n	402e12 <__adddf3+0x212>
  402e06:	ea54 0c00 	orrs.w	ip, r4, r0
  402e0a:	bf04      	itt	eq
  402e0c:	4619      	moveq	r1, r3
  402e0e:	4610      	moveq	r0, r2
  402e10:	bd30      	pop	{r4, r5, pc}
  402e12:	ea91 0f03 	teq	r1, r3
  402e16:	bf1e      	ittt	ne
  402e18:	2100      	movne	r1, #0
  402e1a:	2000      	movne	r0, #0
  402e1c:	bd30      	popne	{r4, r5, pc}
  402e1e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402e22:	d105      	bne.n	402e30 <__adddf3+0x230>
  402e24:	0040      	lsls	r0, r0, #1
  402e26:	4149      	adcs	r1, r1
  402e28:	bf28      	it	cs
  402e2a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402e2e:	bd30      	pop	{r4, r5, pc}
  402e30:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402e34:	bf3c      	itt	cc
  402e36:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402e3a:	bd30      	popcc	{r4, r5, pc}
  402e3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402e40:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402e44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402e48:	f04f 0000 	mov.w	r0, #0
  402e4c:	bd30      	pop	{r4, r5, pc}
  402e4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402e52:	bf1a      	itte	ne
  402e54:	4619      	movne	r1, r3
  402e56:	4610      	movne	r0, r2
  402e58:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402e5c:	bf1c      	itt	ne
  402e5e:	460b      	movne	r3, r1
  402e60:	4602      	movne	r2, r0
  402e62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402e66:	bf06      	itte	eq
  402e68:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402e6c:	ea91 0f03 	teqeq	r1, r3
  402e70:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402e74:	bd30      	pop	{r4, r5, pc}
  402e76:	bf00      	nop

00402e78 <__aeabi_ui2d>:
  402e78:	f090 0f00 	teq	r0, #0
  402e7c:	bf04      	itt	eq
  402e7e:	2100      	moveq	r1, #0
  402e80:	4770      	bxeq	lr
  402e82:	b530      	push	{r4, r5, lr}
  402e84:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402e88:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402e8c:	f04f 0500 	mov.w	r5, #0
  402e90:	f04f 0100 	mov.w	r1, #0
  402e94:	e750      	b.n	402d38 <__adddf3+0x138>
  402e96:	bf00      	nop

00402e98 <__aeabi_i2d>:
  402e98:	f090 0f00 	teq	r0, #0
  402e9c:	bf04      	itt	eq
  402e9e:	2100      	moveq	r1, #0
  402ea0:	4770      	bxeq	lr
  402ea2:	b530      	push	{r4, r5, lr}
  402ea4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402ea8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402eac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402eb0:	bf48      	it	mi
  402eb2:	4240      	negmi	r0, r0
  402eb4:	f04f 0100 	mov.w	r1, #0
  402eb8:	e73e      	b.n	402d38 <__adddf3+0x138>
  402eba:	bf00      	nop

00402ebc <__aeabi_f2d>:
  402ebc:	0042      	lsls	r2, r0, #1
  402ebe:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402ec2:	ea4f 0131 	mov.w	r1, r1, rrx
  402ec6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402eca:	bf1f      	itttt	ne
  402ecc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402ed0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402ed4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402ed8:	4770      	bxne	lr
  402eda:	f092 0f00 	teq	r2, #0
  402ede:	bf14      	ite	ne
  402ee0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402ee4:	4770      	bxeq	lr
  402ee6:	b530      	push	{r4, r5, lr}
  402ee8:	f44f 7460 	mov.w	r4, #896	; 0x380
  402eec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402ef0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402ef4:	e720      	b.n	402d38 <__adddf3+0x138>
  402ef6:	bf00      	nop

00402ef8 <__aeabi_ul2d>:
  402ef8:	ea50 0201 	orrs.w	r2, r0, r1
  402efc:	bf08      	it	eq
  402efe:	4770      	bxeq	lr
  402f00:	b530      	push	{r4, r5, lr}
  402f02:	f04f 0500 	mov.w	r5, #0
  402f06:	e00a      	b.n	402f1e <__aeabi_l2d+0x16>

00402f08 <__aeabi_l2d>:
  402f08:	ea50 0201 	orrs.w	r2, r0, r1
  402f0c:	bf08      	it	eq
  402f0e:	4770      	bxeq	lr
  402f10:	b530      	push	{r4, r5, lr}
  402f12:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402f16:	d502      	bpl.n	402f1e <__aeabi_l2d+0x16>
  402f18:	4240      	negs	r0, r0
  402f1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402f1e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402f22:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402f26:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402f2a:	f43f aedc 	beq.w	402ce6 <__adddf3+0xe6>
  402f2e:	f04f 0203 	mov.w	r2, #3
  402f32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402f36:	bf18      	it	ne
  402f38:	3203      	addne	r2, #3
  402f3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402f3e:	bf18      	it	ne
  402f40:	3203      	addne	r2, #3
  402f42:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402f46:	f1c2 0320 	rsb	r3, r2, #32
  402f4a:	fa00 fc03 	lsl.w	ip, r0, r3
  402f4e:	fa20 f002 	lsr.w	r0, r0, r2
  402f52:	fa01 fe03 	lsl.w	lr, r1, r3
  402f56:	ea40 000e 	orr.w	r0, r0, lr
  402f5a:	fa21 f102 	lsr.w	r1, r1, r2
  402f5e:	4414      	add	r4, r2
  402f60:	e6c1      	b.n	402ce6 <__adddf3+0xe6>
  402f62:	bf00      	nop

00402f64 <__aeabi_dmul>:
  402f64:	b570      	push	{r4, r5, r6, lr}
  402f66:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402f6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402f6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402f72:	bf1d      	ittte	ne
  402f74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402f78:	ea94 0f0c 	teqne	r4, ip
  402f7c:	ea95 0f0c 	teqne	r5, ip
  402f80:	f000 f8de 	bleq	403140 <__aeabi_dmul+0x1dc>
  402f84:	442c      	add	r4, r5
  402f86:	ea81 0603 	eor.w	r6, r1, r3
  402f8a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402f8e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402f92:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402f96:	bf18      	it	ne
  402f98:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402f9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402fa4:	d038      	beq.n	403018 <__aeabi_dmul+0xb4>
  402fa6:	fba0 ce02 	umull	ip, lr, r0, r2
  402faa:	f04f 0500 	mov.w	r5, #0
  402fae:	fbe1 e502 	umlal	lr, r5, r1, r2
  402fb2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402fb6:	fbe0 e503 	umlal	lr, r5, r0, r3
  402fba:	f04f 0600 	mov.w	r6, #0
  402fbe:	fbe1 5603 	umlal	r5, r6, r1, r3
  402fc2:	f09c 0f00 	teq	ip, #0
  402fc6:	bf18      	it	ne
  402fc8:	f04e 0e01 	orrne.w	lr, lr, #1
  402fcc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402fd0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402fd4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402fd8:	d204      	bcs.n	402fe4 <__aeabi_dmul+0x80>
  402fda:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402fde:	416d      	adcs	r5, r5
  402fe0:	eb46 0606 	adc.w	r6, r6, r6
  402fe4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402fe8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402fec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402ff0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402ff4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402ff8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402ffc:	bf88      	it	hi
  402ffe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403002:	d81e      	bhi.n	403042 <__aeabi_dmul+0xde>
  403004:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403008:	bf08      	it	eq
  40300a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40300e:	f150 0000 	adcs.w	r0, r0, #0
  403012:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403016:	bd70      	pop	{r4, r5, r6, pc}
  403018:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40301c:	ea46 0101 	orr.w	r1, r6, r1
  403020:	ea40 0002 	orr.w	r0, r0, r2
  403024:	ea81 0103 	eor.w	r1, r1, r3
  403028:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40302c:	bfc2      	ittt	gt
  40302e:	ebd4 050c 	rsbsgt	r5, r4, ip
  403032:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403036:	bd70      	popgt	{r4, r5, r6, pc}
  403038:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40303c:	f04f 0e00 	mov.w	lr, #0
  403040:	3c01      	subs	r4, #1
  403042:	f300 80ab 	bgt.w	40319c <__aeabi_dmul+0x238>
  403046:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40304a:	bfde      	ittt	le
  40304c:	2000      	movle	r0, #0
  40304e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  403052:	bd70      	pople	{r4, r5, r6, pc}
  403054:	f1c4 0400 	rsb	r4, r4, #0
  403058:	3c20      	subs	r4, #32
  40305a:	da35      	bge.n	4030c8 <__aeabi_dmul+0x164>
  40305c:	340c      	adds	r4, #12
  40305e:	dc1b      	bgt.n	403098 <__aeabi_dmul+0x134>
  403060:	f104 0414 	add.w	r4, r4, #20
  403064:	f1c4 0520 	rsb	r5, r4, #32
  403068:	fa00 f305 	lsl.w	r3, r0, r5
  40306c:	fa20 f004 	lsr.w	r0, r0, r4
  403070:	fa01 f205 	lsl.w	r2, r1, r5
  403074:	ea40 0002 	orr.w	r0, r0, r2
  403078:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40307c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403080:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403084:	fa21 f604 	lsr.w	r6, r1, r4
  403088:	eb42 0106 	adc.w	r1, r2, r6
  40308c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403090:	bf08      	it	eq
  403092:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403096:	bd70      	pop	{r4, r5, r6, pc}
  403098:	f1c4 040c 	rsb	r4, r4, #12
  40309c:	f1c4 0520 	rsb	r5, r4, #32
  4030a0:	fa00 f304 	lsl.w	r3, r0, r4
  4030a4:	fa20 f005 	lsr.w	r0, r0, r5
  4030a8:	fa01 f204 	lsl.w	r2, r1, r4
  4030ac:	ea40 0002 	orr.w	r0, r0, r2
  4030b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4030b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4030b8:	f141 0100 	adc.w	r1, r1, #0
  4030bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4030c0:	bf08      	it	eq
  4030c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4030c6:	bd70      	pop	{r4, r5, r6, pc}
  4030c8:	f1c4 0520 	rsb	r5, r4, #32
  4030cc:	fa00 f205 	lsl.w	r2, r0, r5
  4030d0:	ea4e 0e02 	orr.w	lr, lr, r2
  4030d4:	fa20 f304 	lsr.w	r3, r0, r4
  4030d8:	fa01 f205 	lsl.w	r2, r1, r5
  4030dc:	ea43 0302 	orr.w	r3, r3, r2
  4030e0:	fa21 f004 	lsr.w	r0, r1, r4
  4030e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4030e8:	fa21 f204 	lsr.w	r2, r1, r4
  4030ec:	ea20 0002 	bic.w	r0, r0, r2
  4030f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4030f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4030f8:	bf08      	it	eq
  4030fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4030fe:	bd70      	pop	{r4, r5, r6, pc}
  403100:	f094 0f00 	teq	r4, #0
  403104:	d10f      	bne.n	403126 <__aeabi_dmul+0x1c2>
  403106:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40310a:	0040      	lsls	r0, r0, #1
  40310c:	eb41 0101 	adc.w	r1, r1, r1
  403110:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403114:	bf08      	it	eq
  403116:	3c01      	subeq	r4, #1
  403118:	d0f7      	beq.n	40310a <__aeabi_dmul+0x1a6>
  40311a:	ea41 0106 	orr.w	r1, r1, r6
  40311e:	f095 0f00 	teq	r5, #0
  403122:	bf18      	it	ne
  403124:	4770      	bxne	lr
  403126:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40312a:	0052      	lsls	r2, r2, #1
  40312c:	eb43 0303 	adc.w	r3, r3, r3
  403130:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403134:	bf08      	it	eq
  403136:	3d01      	subeq	r5, #1
  403138:	d0f7      	beq.n	40312a <__aeabi_dmul+0x1c6>
  40313a:	ea43 0306 	orr.w	r3, r3, r6
  40313e:	4770      	bx	lr
  403140:	ea94 0f0c 	teq	r4, ip
  403144:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403148:	bf18      	it	ne
  40314a:	ea95 0f0c 	teqne	r5, ip
  40314e:	d00c      	beq.n	40316a <__aeabi_dmul+0x206>
  403150:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403154:	bf18      	it	ne
  403156:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40315a:	d1d1      	bne.n	403100 <__aeabi_dmul+0x19c>
  40315c:	ea81 0103 	eor.w	r1, r1, r3
  403160:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403164:	f04f 0000 	mov.w	r0, #0
  403168:	bd70      	pop	{r4, r5, r6, pc}
  40316a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40316e:	bf06      	itte	eq
  403170:	4610      	moveq	r0, r2
  403172:	4619      	moveq	r1, r3
  403174:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403178:	d019      	beq.n	4031ae <__aeabi_dmul+0x24a>
  40317a:	ea94 0f0c 	teq	r4, ip
  40317e:	d102      	bne.n	403186 <__aeabi_dmul+0x222>
  403180:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403184:	d113      	bne.n	4031ae <__aeabi_dmul+0x24a>
  403186:	ea95 0f0c 	teq	r5, ip
  40318a:	d105      	bne.n	403198 <__aeabi_dmul+0x234>
  40318c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403190:	bf1c      	itt	ne
  403192:	4610      	movne	r0, r2
  403194:	4619      	movne	r1, r3
  403196:	d10a      	bne.n	4031ae <__aeabi_dmul+0x24a>
  403198:	ea81 0103 	eor.w	r1, r1, r3
  40319c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4031a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4031a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4031a8:	f04f 0000 	mov.w	r0, #0
  4031ac:	bd70      	pop	{r4, r5, r6, pc}
  4031ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4031b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4031b6:	bd70      	pop	{r4, r5, r6, pc}

004031b8 <__aeabi_ddiv>:
  4031b8:	b570      	push	{r4, r5, r6, lr}
  4031ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4031be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4031c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4031c6:	bf1d      	ittte	ne
  4031c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4031cc:	ea94 0f0c 	teqne	r4, ip
  4031d0:	ea95 0f0c 	teqne	r5, ip
  4031d4:	f000 f8a7 	bleq	403326 <__aeabi_ddiv+0x16e>
  4031d8:	eba4 0405 	sub.w	r4, r4, r5
  4031dc:	ea81 0e03 	eor.w	lr, r1, r3
  4031e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4031e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4031e8:	f000 8088 	beq.w	4032fc <__aeabi_ddiv+0x144>
  4031ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4031f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4031f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4031f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4031fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403200:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403204:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403208:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40320c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403210:	429d      	cmp	r5, r3
  403212:	bf08      	it	eq
  403214:	4296      	cmpeq	r6, r2
  403216:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40321a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40321e:	d202      	bcs.n	403226 <__aeabi_ddiv+0x6e>
  403220:	085b      	lsrs	r3, r3, #1
  403222:	ea4f 0232 	mov.w	r2, r2, rrx
  403226:	1ab6      	subs	r6, r6, r2
  403228:	eb65 0503 	sbc.w	r5, r5, r3
  40322c:	085b      	lsrs	r3, r3, #1
  40322e:	ea4f 0232 	mov.w	r2, r2, rrx
  403232:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403236:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40323a:	ebb6 0e02 	subs.w	lr, r6, r2
  40323e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403242:	bf22      	ittt	cs
  403244:	1ab6      	subcs	r6, r6, r2
  403246:	4675      	movcs	r5, lr
  403248:	ea40 000c 	orrcs.w	r0, r0, ip
  40324c:	085b      	lsrs	r3, r3, #1
  40324e:	ea4f 0232 	mov.w	r2, r2, rrx
  403252:	ebb6 0e02 	subs.w	lr, r6, r2
  403256:	eb75 0e03 	sbcs.w	lr, r5, r3
  40325a:	bf22      	ittt	cs
  40325c:	1ab6      	subcs	r6, r6, r2
  40325e:	4675      	movcs	r5, lr
  403260:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403264:	085b      	lsrs	r3, r3, #1
  403266:	ea4f 0232 	mov.w	r2, r2, rrx
  40326a:	ebb6 0e02 	subs.w	lr, r6, r2
  40326e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403272:	bf22      	ittt	cs
  403274:	1ab6      	subcs	r6, r6, r2
  403276:	4675      	movcs	r5, lr
  403278:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40327c:	085b      	lsrs	r3, r3, #1
  40327e:	ea4f 0232 	mov.w	r2, r2, rrx
  403282:	ebb6 0e02 	subs.w	lr, r6, r2
  403286:	eb75 0e03 	sbcs.w	lr, r5, r3
  40328a:	bf22      	ittt	cs
  40328c:	1ab6      	subcs	r6, r6, r2
  40328e:	4675      	movcs	r5, lr
  403290:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403294:	ea55 0e06 	orrs.w	lr, r5, r6
  403298:	d018      	beq.n	4032cc <__aeabi_ddiv+0x114>
  40329a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40329e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4032a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4032a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4032aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4032ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4032b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4032b6:	d1c0      	bne.n	40323a <__aeabi_ddiv+0x82>
  4032b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4032bc:	d10b      	bne.n	4032d6 <__aeabi_ddiv+0x11e>
  4032be:	ea41 0100 	orr.w	r1, r1, r0
  4032c2:	f04f 0000 	mov.w	r0, #0
  4032c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4032ca:	e7b6      	b.n	40323a <__aeabi_ddiv+0x82>
  4032cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4032d0:	bf04      	itt	eq
  4032d2:	4301      	orreq	r1, r0
  4032d4:	2000      	moveq	r0, #0
  4032d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4032da:	bf88      	it	hi
  4032dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4032e0:	f63f aeaf 	bhi.w	403042 <__aeabi_dmul+0xde>
  4032e4:	ebb5 0c03 	subs.w	ip, r5, r3
  4032e8:	bf04      	itt	eq
  4032ea:	ebb6 0c02 	subseq.w	ip, r6, r2
  4032ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4032f2:	f150 0000 	adcs.w	r0, r0, #0
  4032f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4032fa:	bd70      	pop	{r4, r5, r6, pc}
  4032fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403300:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403304:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403308:	bfc2      	ittt	gt
  40330a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40330e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403312:	bd70      	popgt	{r4, r5, r6, pc}
  403314:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403318:	f04f 0e00 	mov.w	lr, #0
  40331c:	3c01      	subs	r4, #1
  40331e:	e690      	b.n	403042 <__aeabi_dmul+0xde>
  403320:	ea45 0e06 	orr.w	lr, r5, r6
  403324:	e68d      	b.n	403042 <__aeabi_dmul+0xde>
  403326:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40332a:	ea94 0f0c 	teq	r4, ip
  40332e:	bf08      	it	eq
  403330:	ea95 0f0c 	teqeq	r5, ip
  403334:	f43f af3b 	beq.w	4031ae <__aeabi_dmul+0x24a>
  403338:	ea94 0f0c 	teq	r4, ip
  40333c:	d10a      	bne.n	403354 <__aeabi_ddiv+0x19c>
  40333e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403342:	f47f af34 	bne.w	4031ae <__aeabi_dmul+0x24a>
  403346:	ea95 0f0c 	teq	r5, ip
  40334a:	f47f af25 	bne.w	403198 <__aeabi_dmul+0x234>
  40334e:	4610      	mov	r0, r2
  403350:	4619      	mov	r1, r3
  403352:	e72c      	b.n	4031ae <__aeabi_dmul+0x24a>
  403354:	ea95 0f0c 	teq	r5, ip
  403358:	d106      	bne.n	403368 <__aeabi_ddiv+0x1b0>
  40335a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40335e:	f43f aefd 	beq.w	40315c <__aeabi_dmul+0x1f8>
  403362:	4610      	mov	r0, r2
  403364:	4619      	mov	r1, r3
  403366:	e722      	b.n	4031ae <__aeabi_dmul+0x24a>
  403368:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40336c:	bf18      	it	ne
  40336e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403372:	f47f aec5 	bne.w	403100 <__aeabi_dmul+0x19c>
  403376:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40337a:	f47f af0d 	bne.w	403198 <__aeabi_dmul+0x234>
  40337e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403382:	f47f aeeb 	bne.w	40315c <__aeabi_dmul+0x1f8>
  403386:	e712      	b.n	4031ae <__aeabi_dmul+0x24a>

00403388 <__gedf2>:
  403388:	f04f 3cff 	mov.w	ip, #4294967295
  40338c:	e006      	b.n	40339c <__cmpdf2+0x4>
  40338e:	bf00      	nop

00403390 <__ledf2>:
  403390:	f04f 0c01 	mov.w	ip, #1
  403394:	e002      	b.n	40339c <__cmpdf2+0x4>
  403396:	bf00      	nop

00403398 <__cmpdf2>:
  403398:	f04f 0c01 	mov.w	ip, #1
  40339c:	f84d cd04 	str.w	ip, [sp, #-4]!
  4033a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4033a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4033a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4033ac:	bf18      	it	ne
  4033ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4033b2:	d01b      	beq.n	4033ec <__cmpdf2+0x54>
  4033b4:	b001      	add	sp, #4
  4033b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4033ba:	bf0c      	ite	eq
  4033bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4033c0:	ea91 0f03 	teqne	r1, r3
  4033c4:	bf02      	ittt	eq
  4033c6:	ea90 0f02 	teqeq	r0, r2
  4033ca:	2000      	moveq	r0, #0
  4033cc:	4770      	bxeq	lr
  4033ce:	f110 0f00 	cmn.w	r0, #0
  4033d2:	ea91 0f03 	teq	r1, r3
  4033d6:	bf58      	it	pl
  4033d8:	4299      	cmppl	r1, r3
  4033da:	bf08      	it	eq
  4033dc:	4290      	cmpeq	r0, r2
  4033de:	bf2c      	ite	cs
  4033e0:	17d8      	asrcs	r0, r3, #31
  4033e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4033e6:	f040 0001 	orr.w	r0, r0, #1
  4033ea:	4770      	bx	lr
  4033ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4033f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4033f4:	d102      	bne.n	4033fc <__cmpdf2+0x64>
  4033f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4033fa:	d107      	bne.n	40340c <__cmpdf2+0x74>
  4033fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403400:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403404:	d1d6      	bne.n	4033b4 <__cmpdf2+0x1c>
  403406:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40340a:	d0d3      	beq.n	4033b4 <__cmpdf2+0x1c>
  40340c:	f85d 0b04 	ldr.w	r0, [sp], #4
  403410:	4770      	bx	lr
  403412:	bf00      	nop

00403414 <__aeabi_cdrcmple>:
  403414:	4684      	mov	ip, r0
  403416:	4610      	mov	r0, r2
  403418:	4662      	mov	r2, ip
  40341a:	468c      	mov	ip, r1
  40341c:	4619      	mov	r1, r3
  40341e:	4663      	mov	r3, ip
  403420:	e000      	b.n	403424 <__aeabi_cdcmpeq>
  403422:	bf00      	nop

00403424 <__aeabi_cdcmpeq>:
  403424:	b501      	push	{r0, lr}
  403426:	f7ff ffb7 	bl	403398 <__cmpdf2>
  40342a:	2800      	cmp	r0, #0
  40342c:	bf48      	it	mi
  40342e:	f110 0f00 	cmnmi.w	r0, #0
  403432:	bd01      	pop	{r0, pc}

00403434 <__aeabi_dcmpeq>:
  403434:	f84d ed08 	str.w	lr, [sp, #-8]!
  403438:	f7ff fff4 	bl	403424 <__aeabi_cdcmpeq>
  40343c:	bf0c      	ite	eq
  40343e:	2001      	moveq	r0, #1
  403440:	2000      	movne	r0, #0
  403442:	f85d fb08 	ldr.w	pc, [sp], #8
  403446:	bf00      	nop

00403448 <__aeabi_dcmplt>:
  403448:	f84d ed08 	str.w	lr, [sp, #-8]!
  40344c:	f7ff ffea 	bl	403424 <__aeabi_cdcmpeq>
  403450:	bf34      	ite	cc
  403452:	2001      	movcc	r0, #1
  403454:	2000      	movcs	r0, #0
  403456:	f85d fb08 	ldr.w	pc, [sp], #8
  40345a:	bf00      	nop

0040345c <__aeabi_dcmple>:
  40345c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403460:	f7ff ffe0 	bl	403424 <__aeabi_cdcmpeq>
  403464:	bf94      	ite	ls
  403466:	2001      	movls	r0, #1
  403468:	2000      	movhi	r0, #0
  40346a:	f85d fb08 	ldr.w	pc, [sp], #8
  40346e:	bf00      	nop

00403470 <__aeabi_dcmpge>:
  403470:	f84d ed08 	str.w	lr, [sp, #-8]!
  403474:	f7ff ffce 	bl	403414 <__aeabi_cdrcmple>
  403478:	bf94      	ite	ls
  40347a:	2001      	movls	r0, #1
  40347c:	2000      	movhi	r0, #0
  40347e:	f85d fb08 	ldr.w	pc, [sp], #8
  403482:	bf00      	nop

00403484 <__aeabi_dcmpgt>:
  403484:	f84d ed08 	str.w	lr, [sp, #-8]!
  403488:	f7ff ffc4 	bl	403414 <__aeabi_cdrcmple>
  40348c:	bf34      	ite	cc
  40348e:	2001      	movcc	r0, #1
  403490:	2000      	movcs	r0, #0
  403492:	f85d fb08 	ldr.w	pc, [sp], #8
  403496:	bf00      	nop

00403498 <__aeabi_dcmpun>:
  403498:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40349c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4034a0:	d102      	bne.n	4034a8 <__aeabi_dcmpun+0x10>
  4034a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4034a6:	d10a      	bne.n	4034be <__aeabi_dcmpun+0x26>
  4034a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4034ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4034b0:	d102      	bne.n	4034b8 <__aeabi_dcmpun+0x20>
  4034b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4034b6:	d102      	bne.n	4034be <__aeabi_dcmpun+0x26>
  4034b8:	f04f 0000 	mov.w	r0, #0
  4034bc:	4770      	bx	lr
  4034be:	f04f 0001 	mov.w	r0, #1
  4034c2:	4770      	bx	lr

004034c4 <__aeabi_d2iz>:
  4034c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4034c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4034cc:	d215      	bcs.n	4034fa <__aeabi_d2iz+0x36>
  4034ce:	d511      	bpl.n	4034f4 <__aeabi_d2iz+0x30>
  4034d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4034d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4034d8:	d912      	bls.n	403500 <__aeabi_d2iz+0x3c>
  4034da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4034de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4034e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4034e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4034ea:	fa23 f002 	lsr.w	r0, r3, r2
  4034ee:	bf18      	it	ne
  4034f0:	4240      	negne	r0, r0
  4034f2:	4770      	bx	lr
  4034f4:	f04f 0000 	mov.w	r0, #0
  4034f8:	4770      	bx	lr
  4034fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4034fe:	d105      	bne.n	40350c <__aeabi_d2iz+0x48>
  403500:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  403504:	bf08      	it	eq
  403506:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40350a:	4770      	bx	lr
  40350c:	f04f 0000 	mov.w	r0, #0
  403510:	4770      	bx	lr
  403512:	bf00      	nop

00403514 <__aeabi_d2f>:
  403514:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403518:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40351c:	bf24      	itt	cs
  40351e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  403522:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  403526:	d90d      	bls.n	403544 <__aeabi_d2f+0x30>
  403528:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40352c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  403530:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  403534:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  403538:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40353c:	bf08      	it	eq
  40353e:	f020 0001 	biceq.w	r0, r0, #1
  403542:	4770      	bx	lr
  403544:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  403548:	d121      	bne.n	40358e <__aeabi_d2f+0x7a>
  40354a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40354e:	bfbc      	itt	lt
  403550:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  403554:	4770      	bxlt	lr
  403556:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40355a:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40355e:	f1c2 0218 	rsb	r2, r2, #24
  403562:	f1c2 0c20 	rsb	ip, r2, #32
  403566:	fa10 f30c 	lsls.w	r3, r0, ip
  40356a:	fa20 f002 	lsr.w	r0, r0, r2
  40356e:	bf18      	it	ne
  403570:	f040 0001 	orrne.w	r0, r0, #1
  403574:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403578:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40357c:	fa03 fc0c 	lsl.w	ip, r3, ip
  403580:	ea40 000c 	orr.w	r0, r0, ip
  403584:	fa23 f302 	lsr.w	r3, r3, r2
  403588:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40358c:	e7cc      	b.n	403528 <__aeabi_d2f+0x14>
  40358e:	ea7f 5362 	mvns.w	r3, r2, asr #21
  403592:	d107      	bne.n	4035a4 <__aeabi_d2f+0x90>
  403594:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  403598:	bf1e      	ittt	ne
  40359a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40359e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4035a2:	4770      	bxne	lr
  4035a4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4035a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4035ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4035b0:	4770      	bx	lr
  4035b2:	bf00      	nop

004035b4 <__libc_init_array>:
  4035b4:	b570      	push	{r4, r5, r6, lr}
  4035b6:	4e0d      	ldr	r6, [pc, #52]	; (4035ec <__libc_init_array+0x38>)
  4035b8:	4c0d      	ldr	r4, [pc, #52]	; (4035f0 <__libc_init_array+0x3c>)
  4035ba:	1ba4      	subs	r4, r4, r6
  4035bc:	10a4      	asrs	r4, r4, #2
  4035be:	2500      	movs	r5, #0
  4035c0:	42a5      	cmp	r5, r4
  4035c2:	d109      	bne.n	4035d8 <__libc_init_array+0x24>
  4035c4:	4e0b      	ldr	r6, [pc, #44]	; (4035f4 <__libc_init_array+0x40>)
  4035c6:	4c0c      	ldr	r4, [pc, #48]	; (4035f8 <__libc_init_array+0x44>)
  4035c8:	f003 f8f6 	bl	4067b8 <_init>
  4035cc:	1ba4      	subs	r4, r4, r6
  4035ce:	10a4      	asrs	r4, r4, #2
  4035d0:	2500      	movs	r5, #0
  4035d2:	42a5      	cmp	r5, r4
  4035d4:	d105      	bne.n	4035e2 <__libc_init_array+0x2e>
  4035d6:	bd70      	pop	{r4, r5, r6, pc}
  4035d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4035dc:	4798      	blx	r3
  4035de:	3501      	adds	r5, #1
  4035e0:	e7ee      	b.n	4035c0 <__libc_init_array+0xc>
  4035e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4035e6:	4798      	blx	r3
  4035e8:	3501      	adds	r5, #1
  4035ea:	e7f2      	b.n	4035d2 <__libc_init_array+0x1e>
  4035ec:	004067c4 	.word	0x004067c4
  4035f0:	004067c4 	.word	0x004067c4
  4035f4:	004067c4 	.word	0x004067c4
  4035f8:	004067c8 	.word	0x004067c8

004035fc <memcpy>:
  4035fc:	b510      	push	{r4, lr}
  4035fe:	1e43      	subs	r3, r0, #1
  403600:	440a      	add	r2, r1
  403602:	4291      	cmp	r1, r2
  403604:	d100      	bne.n	403608 <memcpy+0xc>
  403606:	bd10      	pop	{r4, pc}
  403608:	f811 4b01 	ldrb.w	r4, [r1], #1
  40360c:	f803 4f01 	strb.w	r4, [r3, #1]!
  403610:	e7f7      	b.n	403602 <memcpy+0x6>

00403612 <memset>:
  403612:	4402      	add	r2, r0
  403614:	4603      	mov	r3, r0
  403616:	4293      	cmp	r3, r2
  403618:	d100      	bne.n	40361c <memset+0xa>
  40361a:	4770      	bx	lr
  40361c:	f803 1b01 	strb.w	r1, [r3], #1
  403620:	e7f9      	b.n	403616 <memset+0x4>

00403622 <__cvt>:
  403622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403626:	b088      	sub	sp, #32
  403628:	2b00      	cmp	r3, #0
  40362a:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40362c:	9912      	ldr	r1, [sp, #72]	; 0x48
  40362e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403630:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  403634:	461e      	mov	r6, r3
  403636:	f027 0720 	bic.w	r7, r7, #32
  40363a:	bfbb      	ittet	lt
  40363c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  403640:	461e      	movlt	r6, r3
  403642:	2300      	movge	r3, #0
  403644:	232d      	movlt	r3, #45	; 0x2d
  403646:	2f46      	cmp	r7, #70	; 0x46
  403648:	4614      	mov	r4, r2
  40364a:	700b      	strb	r3, [r1, #0]
  40364c:	d004      	beq.n	403658 <__cvt+0x36>
  40364e:	2f45      	cmp	r7, #69	; 0x45
  403650:	d100      	bne.n	403654 <__cvt+0x32>
  403652:	3501      	adds	r5, #1
  403654:	2302      	movs	r3, #2
  403656:	e000      	b.n	40365a <__cvt+0x38>
  403658:	2303      	movs	r3, #3
  40365a:	aa07      	add	r2, sp, #28
  40365c:	9204      	str	r2, [sp, #16]
  40365e:	aa06      	add	r2, sp, #24
  403660:	9203      	str	r2, [sp, #12]
  403662:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  403666:	4622      	mov	r2, r4
  403668:	4633      	mov	r3, r6
  40366a:	f000 fd9d 	bl	4041a8 <_dtoa_r>
  40366e:	2f47      	cmp	r7, #71	; 0x47
  403670:	4680      	mov	r8, r0
  403672:	d102      	bne.n	40367a <__cvt+0x58>
  403674:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403676:	07db      	lsls	r3, r3, #31
  403678:	d526      	bpl.n	4036c8 <__cvt+0xa6>
  40367a:	2f46      	cmp	r7, #70	; 0x46
  40367c:	eb08 0905 	add.w	r9, r8, r5
  403680:	d111      	bne.n	4036a6 <__cvt+0x84>
  403682:	f898 3000 	ldrb.w	r3, [r8]
  403686:	2b30      	cmp	r3, #48	; 0x30
  403688:	d10a      	bne.n	4036a0 <__cvt+0x7e>
  40368a:	2200      	movs	r2, #0
  40368c:	2300      	movs	r3, #0
  40368e:	4620      	mov	r0, r4
  403690:	4631      	mov	r1, r6
  403692:	f7ff fecf 	bl	403434 <__aeabi_dcmpeq>
  403696:	b918      	cbnz	r0, 4036a0 <__cvt+0x7e>
  403698:	f1c5 0501 	rsb	r5, r5, #1
  40369c:	f8ca 5000 	str.w	r5, [sl]
  4036a0:	f8da 3000 	ldr.w	r3, [sl]
  4036a4:	4499      	add	r9, r3
  4036a6:	2200      	movs	r2, #0
  4036a8:	2300      	movs	r3, #0
  4036aa:	4620      	mov	r0, r4
  4036ac:	4631      	mov	r1, r6
  4036ae:	f7ff fec1 	bl	403434 <__aeabi_dcmpeq>
  4036b2:	b938      	cbnz	r0, 4036c4 <__cvt+0xa2>
  4036b4:	2230      	movs	r2, #48	; 0x30
  4036b6:	9b07      	ldr	r3, [sp, #28]
  4036b8:	4599      	cmp	r9, r3
  4036ba:	d905      	bls.n	4036c8 <__cvt+0xa6>
  4036bc:	1c59      	adds	r1, r3, #1
  4036be:	9107      	str	r1, [sp, #28]
  4036c0:	701a      	strb	r2, [r3, #0]
  4036c2:	e7f8      	b.n	4036b6 <__cvt+0x94>
  4036c4:	f8cd 901c 	str.w	r9, [sp, #28]
  4036c8:	9b07      	ldr	r3, [sp, #28]
  4036ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4036cc:	eba3 0308 	sub.w	r3, r3, r8
  4036d0:	4640      	mov	r0, r8
  4036d2:	6013      	str	r3, [r2, #0]
  4036d4:	b008      	add	sp, #32
  4036d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004036da <__exponent>:
  4036da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  4036dc:	4603      	mov	r3, r0
  4036de:	2900      	cmp	r1, #0
  4036e0:	bfb8      	it	lt
  4036e2:	4249      	neglt	r1, r1
  4036e4:	f803 2b02 	strb.w	r2, [r3], #2
  4036e8:	bfb4      	ite	lt
  4036ea:	222d      	movlt	r2, #45	; 0x2d
  4036ec:	222b      	movge	r2, #43	; 0x2b
  4036ee:	2909      	cmp	r1, #9
  4036f0:	7042      	strb	r2, [r0, #1]
  4036f2:	dd20      	ble.n	403736 <__exponent+0x5c>
  4036f4:	f10d 0207 	add.w	r2, sp, #7
  4036f8:	4617      	mov	r7, r2
  4036fa:	260a      	movs	r6, #10
  4036fc:	fb91 f5f6 	sdiv	r5, r1, r6
  403700:	fb06 1115 	mls	r1, r6, r5, r1
  403704:	3130      	adds	r1, #48	; 0x30
  403706:	2d09      	cmp	r5, #9
  403708:	f802 1c01 	strb.w	r1, [r2, #-1]
  40370c:	f102 34ff 	add.w	r4, r2, #4294967295
  403710:	4629      	mov	r1, r5
  403712:	dc09      	bgt.n	403728 <__exponent+0x4e>
  403714:	3130      	adds	r1, #48	; 0x30
  403716:	3a02      	subs	r2, #2
  403718:	f804 1c01 	strb.w	r1, [r4, #-1]
  40371c:	42ba      	cmp	r2, r7
  40371e:	461c      	mov	r4, r3
  403720:	d304      	bcc.n	40372c <__exponent+0x52>
  403722:	1a20      	subs	r0, r4, r0
  403724:	b003      	add	sp, #12
  403726:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403728:	4622      	mov	r2, r4
  40372a:	e7e7      	b.n	4036fc <__exponent+0x22>
  40372c:	f812 1b01 	ldrb.w	r1, [r2], #1
  403730:	f803 1b01 	strb.w	r1, [r3], #1
  403734:	e7f2      	b.n	40371c <__exponent+0x42>
  403736:	2230      	movs	r2, #48	; 0x30
  403738:	461c      	mov	r4, r3
  40373a:	4411      	add	r1, r2
  40373c:	f804 2b02 	strb.w	r2, [r4], #2
  403740:	7059      	strb	r1, [r3, #1]
  403742:	e7ee      	b.n	403722 <__exponent+0x48>

00403744 <_printf_float>:
  403744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403748:	b091      	sub	sp, #68	; 0x44
  40374a:	460c      	mov	r4, r1
  40374c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  40374e:	4693      	mov	fp, r2
  403750:	461e      	mov	r6, r3
  403752:	4605      	mov	r5, r0
  403754:	f001 fc76 	bl	405044 <_localeconv_r>
  403758:	6803      	ldr	r3, [r0, #0]
  40375a:	9309      	str	r3, [sp, #36]	; 0x24
  40375c:	4618      	mov	r0, r3
  40375e:	f000 fc8d 	bl	40407c <strlen>
  403762:	2300      	movs	r3, #0
  403764:	930e      	str	r3, [sp, #56]	; 0x38
  403766:	683b      	ldr	r3, [r7, #0]
  403768:	900a      	str	r0, [sp, #40]	; 0x28
  40376a:	3307      	adds	r3, #7
  40376c:	f023 0307 	bic.w	r3, r3, #7
  403770:	f103 0208 	add.w	r2, r3, #8
  403774:	f894 8018 	ldrb.w	r8, [r4, #24]
  403778:	f8d4 a000 	ldr.w	sl, [r4]
  40377c:	603a      	str	r2, [r7, #0]
  40377e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403782:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  403786:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  40378a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  40378c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  403790:	930b      	str	r3, [sp, #44]	; 0x2c
  403792:	f04f 32ff 	mov.w	r2, #4294967295
  403796:	4ba6      	ldr	r3, [pc, #664]	; (403a30 <_printf_float+0x2ec>)
  403798:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40379a:	4638      	mov	r0, r7
  40379c:	f7ff fe7c 	bl	403498 <__aeabi_dcmpun>
  4037a0:	2800      	cmp	r0, #0
  4037a2:	f040 81f7 	bne.w	403b94 <_printf_float+0x450>
  4037a6:	f04f 32ff 	mov.w	r2, #4294967295
  4037aa:	4ba1      	ldr	r3, [pc, #644]	; (403a30 <_printf_float+0x2ec>)
  4037ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4037ae:	4638      	mov	r0, r7
  4037b0:	f7ff fe54 	bl	40345c <__aeabi_dcmple>
  4037b4:	2800      	cmp	r0, #0
  4037b6:	f040 81ed 	bne.w	403b94 <_printf_float+0x450>
  4037ba:	2200      	movs	r2, #0
  4037bc:	2300      	movs	r3, #0
  4037be:	4638      	mov	r0, r7
  4037c0:	4649      	mov	r1, r9
  4037c2:	f7ff fe41 	bl	403448 <__aeabi_dcmplt>
  4037c6:	b110      	cbz	r0, 4037ce <_printf_float+0x8a>
  4037c8:	232d      	movs	r3, #45	; 0x2d
  4037ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4037ce:	4b99      	ldr	r3, [pc, #612]	; (403a34 <_printf_float+0x2f0>)
  4037d0:	4f99      	ldr	r7, [pc, #612]	; (403a38 <_printf_float+0x2f4>)
  4037d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4037d6:	bf98      	it	ls
  4037d8:	461f      	movls	r7, r3
  4037da:	2303      	movs	r3, #3
  4037dc:	6123      	str	r3, [r4, #16]
  4037de:	f02a 0304 	bic.w	r3, sl, #4
  4037e2:	6023      	str	r3, [r4, #0]
  4037e4:	f04f 0900 	mov.w	r9, #0
  4037e8:	9600      	str	r6, [sp, #0]
  4037ea:	465b      	mov	r3, fp
  4037ec:	aa0f      	add	r2, sp, #60	; 0x3c
  4037ee:	4621      	mov	r1, r4
  4037f0:	4628      	mov	r0, r5
  4037f2:	f000 f9df 	bl	403bb4 <_printf_common>
  4037f6:	3001      	adds	r0, #1
  4037f8:	f040 809a 	bne.w	403930 <_printf_float+0x1ec>
  4037fc:	f04f 30ff 	mov.w	r0, #4294967295
  403800:	b011      	add	sp, #68	; 0x44
  403802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403806:	6862      	ldr	r2, [r4, #4]
  403808:	1c53      	adds	r3, r2, #1
  40380a:	a80e      	add	r0, sp, #56	; 0x38
  40380c:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  403810:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  403814:	d141      	bne.n	40389a <_printf_float+0x156>
  403816:	2206      	movs	r2, #6
  403818:	6062      	str	r2, [r4, #4]
  40381a:	6023      	str	r3, [r4, #0]
  40381c:	2100      	movs	r1, #0
  40381e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  403822:	9301      	str	r3, [sp, #4]
  403824:	6863      	ldr	r3, [r4, #4]
  403826:	9005      	str	r0, [sp, #20]
  403828:	9202      	str	r2, [sp, #8]
  40382a:	9300      	str	r3, [sp, #0]
  40382c:	463a      	mov	r2, r7
  40382e:	464b      	mov	r3, r9
  403830:	9106      	str	r1, [sp, #24]
  403832:	f8cd 8010 	str.w	r8, [sp, #16]
  403836:	f8cd e00c 	str.w	lr, [sp, #12]
  40383a:	4628      	mov	r0, r5
  40383c:	f7ff fef1 	bl	403622 <__cvt>
  403840:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  403844:	2b47      	cmp	r3, #71	; 0x47
  403846:	4607      	mov	r7, r0
  403848:	d109      	bne.n	40385e <_printf_float+0x11a>
  40384a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40384c:	1cd8      	adds	r0, r3, #3
  40384e:	db02      	blt.n	403856 <_printf_float+0x112>
  403850:	6862      	ldr	r2, [r4, #4]
  403852:	4293      	cmp	r3, r2
  403854:	dd59      	ble.n	40390a <_printf_float+0x1c6>
  403856:	f1a8 0802 	sub.w	r8, r8, #2
  40385a:	fa5f f888 	uxtb.w	r8, r8
  40385e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  403862:	990d      	ldr	r1, [sp, #52]	; 0x34
  403864:	d836      	bhi.n	4038d4 <_printf_float+0x190>
  403866:	3901      	subs	r1, #1
  403868:	4642      	mov	r2, r8
  40386a:	f104 0050 	add.w	r0, r4, #80	; 0x50
  40386e:	910d      	str	r1, [sp, #52]	; 0x34
  403870:	f7ff ff33 	bl	4036da <__exponent>
  403874:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403876:	1883      	adds	r3, r0, r2
  403878:	2a01      	cmp	r2, #1
  40387a:	4681      	mov	r9, r0
  40387c:	6123      	str	r3, [r4, #16]
  40387e:	dc02      	bgt.n	403886 <_printf_float+0x142>
  403880:	6822      	ldr	r2, [r4, #0]
  403882:	07d1      	lsls	r1, r2, #31
  403884:	d501      	bpl.n	40388a <_printf_float+0x146>
  403886:	3301      	adds	r3, #1
  403888:	6123      	str	r3, [r4, #16]
  40388a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  40388e:	2b00      	cmp	r3, #0
  403890:	d0aa      	beq.n	4037e8 <_printf_float+0xa4>
  403892:	232d      	movs	r3, #45	; 0x2d
  403894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403898:	e7a6      	b.n	4037e8 <_printf_float+0xa4>
  40389a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  40389e:	d002      	beq.n	4038a6 <_printf_float+0x162>
  4038a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4038a4:	d1b9      	bne.n	40381a <_printf_float+0xd6>
  4038a6:	b19a      	cbz	r2, 4038d0 <_printf_float+0x18c>
  4038a8:	2100      	movs	r1, #0
  4038aa:	9106      	str	r1, [sp, #24]
  4038ac:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  4038b0:	e88d 000c 	stmia.w	sp, {r2, r3}
  4038b4:	6023      	str	r3, [r4, #0]
  4038b6:	9005      	str	r0, [sp, #20]
  4038b8:	463a      	mov	r2, r7
  4038ba:	f8cd 8010 	str.w	r8, [sp, #16]
  4038be:	f8cd e00c 	str.w	lr, [sp, #12]
  4038c2:	9102      	str	r1, [sp, #8]
  4038c4:	464b      	mov	r3, r9
  4038c6:	4628      	mov	r0, r5
  4038c8:	f7ff feab 	bl	403622 <__cvt>
  4038cc:	4607      	mov	r7, r0
  4038ce:	e7bc      	b.n	40384a <_printf_float+0x106>
  4038d0:	2201      	movs	r2, #1
  4038d2:	e7a1      	b.n	403818 <_printf_float+0xd4>
  4038d4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  4038d8:	d119      	bne.n	40390e <_printf_float+0x1ca>
  4038da:	2900      	cmp	r1, #0
  4038dc:	6863      	ldr	r3, [r4, #4]
  4038de:	dd0c      	ble.n	4038fa <_printf_float+0x1b6>
  4038e0:	6121      	str	r1, [r4, #16]
  4038e2:	b913      	cbnz	r3, 4038ea <_printf_float+0x1a6>
  4038e4:	6822      	ldr	r2, [r4, #0]
  4038e6:	07d2      	lsls	r2, r2, #31
  4038e8:	d502      	bpl.n	4038f0 <_printf_float+0x1ac>
  4038ea:	3301      	adds	r3, #1
  4038ec:	440b      	add	r3, r1
  4038ee:	6123      	str	r3, [r4, #16]
  4038f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4038f2:	65a3      	str	r3, [r4, #88]	; 0x58
  4038f4:	f04f 0900 	mov.w	r9, #0
  4038f8:	e7c7      	b.n	40388a <_printf_float+0x146>
  4038fa:	b913      	cbnz	r3, 403902 <_printf_float+0x1be>
  4038fc:	6822      	ldr	r2, [r4, #0]
  4038fe:	07d0      	lsls	r0, r2, #31
  403900:	d501      	bpl.n	403906 <_printf_float+0x1c2>
  403902:	3302      	adds	r3, #2
  403904:	e7f3      	b.n	4038ee <_printf_float+0x1aa>
  403906:	2301      	movs	r3, #1
  403908:	e7f1      	b.n	4038ee <_printf_float+0x1aa>
  40390a:	f04f 0867 	mov.w	r8, #103	; 0x67
  40390e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403912:	4293      	cmp	r3, r2
  403914:	db05      	blt.n	403922 <_printf_float+0x1de>
  403916:	6822      	ldr	r2, [r4, #0]
  403918:	6123      	str	r3, [r4, #16]
  40391a:	07d1      	lsls	r1, r2, #31
  40391c:	d5e8      	bpl.n	4038f0 <_printf_float+0x1ac>
  40391e:	3301      	adds	r3, #1
  403920:	e7e5      	b.n	4038ee <_printf_float+0x1aa>
  403922:	2b00      	cmp	r3, #0
  403924:	bfd4      	ite	le
  403926:	f1c3 0302 	rsble	r3, r3, #2
  40392a:	2301      	movgt	r3, #1
  40392c:	4413      	add	r3, r2
  40392e:	e7de      	b.n	4038ee <_printf_float+0x1aa>
  403930:	6823      	ldr	r3, [r4, #0]
  403932:	055a      	lsls	r2, r3, #21
  403934:	d407      	bmi.n	403946 <_printf_float+0x202>
  403936:	6923      	ldr	r3, [r4, #16]
  403938:	463a      	mov	r2, r7
  40393a:	4659      	mov	r1, fp
  40393c:	4628      	mov	r0, r5
  40393e:	47b0      	blx	r6
  403940:	3001      	adds	r0, #1
  403942:	d12a      	bne.n	40399a <_printf_float+0x256>
  403944:	e75a      	b.n	4037fc <_printf_float+0xb8>
  403946:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40394a:	f240 80dc 	bls.w	403b06 <_printf_float+0x3c2>
  40394e:	2200      	movs	r2, #0
  403950:	2300      	movs	r3, #0
  403952:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403956:	f7ff fd6d 	bl	403434 <__aeabi_dcmpeq>
  40395a:	2800      	cmp	r0, #0
  40395c:	d039      	beq.n	4039d2 <_printf_float+0x28e>
  40395e:	2301      	movs	r3, #1
  403960:	4a36      	ldr	r2, [pc, #216]	; (403a3c <_printf_float+0x2f8>)
  403962:	4659      	mov	r1, fp
  403964:	4628      	mov	r0, r5
  403966:	47b0      	blx	r6
  403968:	3001      	adds	r0, #1
  40396a:	f43f af47 	beq.w	4037fc <_printf_float+0xb8>
  40396e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403972:	429a      	cmp	r2, r3
  403974:	db02      	blt.n	40397c <_printf_float+0x238>
  403976:	6823      	ldr	r3, [r4, #0]
  403978:	07d8      	lsls	r0, r3, #31
  40397a:	d50e      	bpl.n	40399a <_printf_float+0x256>
  40397c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40397e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403980:	4659      	mov	r1, fp
  403982:	4628      	mov	r0, r5
  403984:	47b0      	blx	r6
  403986:	3001      	adds	r0, #1
  403988:	f43f af38 	beq.w	4037fc <_printf_float+0xb8>
  40398c:	2700      	movs	r7, #0
  40398e:	f104 081a 	add.w	r8, r4, #26
  403992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403994:	3b01      	subs	r3, #1
  403996:	429f      	cmp	r7, r3
  403998:	db11      	blt.n	4039be <_printf_float+0x27a>
  40399a:	6823      	ldr	r3, [r4, #0]
  40399c:	079f      	lsls	r7, r3, #30
  40399e:	d508      	bpl.n	4039b2 <_printf_float+0x26e>
  4039a0:	2700      	movs	r7, #0
  4039a2:	f104 0819 	add.w	r8, r4, #25
  4039a6:	68e3      	ldr	r3, [r4, #12]
  4039a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4039aa:	1a9b      	subs	r3, r3, r2
  4039ac:	429f      	cmp	r7, r3
  4039ae:	f2c0 80e7 	blt.w	403b80 <_printf_float+0x43c>
  4039b2:	68e0      	ldr	r0, [r4, #12]
  4039b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4039b6:	4298      	cmp	r0, r3
  4039b8:	bfb8      	it	lt
  4039ba:	4618      	movlt	r0, r3
  4039bc:	e720      	b.n	403800 <_printf_float+0xbc>
  4039be:	2301      	movs	r3, #1
  4039c0:	4642      	mov	r2, r8
  4039c2:	4659      	mov	r1, fp
  4039c4:	4628      	mov	r0, r5
  4039c6:	47b0      	blx	r6
  4039c8:	3001      	adds	r0, #1
  4039ca:	f43f af17 	beq.w	4037fc <_printf_float+0xb8>
  4039ce:	3701      	adds	r7, #1
  4039d0:	e7df      	b.n	403992 <_printf_float+0x24e>
  4039d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4039d4:	2b00      	cmp	r3, #0
  4039d6:	dc33      	bgt.n	403a40 <_printf_float+0x2fc>
  4039d8:	2301      	movs	r3, #1
  4039da:	4a18      	ldr	r2, [pc, #96]	; (403a3c <_printf_float+0x2f8>)
  4039dc:	4659      	mov	r1, fp
  4039de:	4628      	mov	r0, r5
  4039e0:	47b0      	blx	r6
  4039e2:	3001      	adds	r0, #1
  4039e4:	f43f af0a 	beq.w	4037fc <_printf_float+0xb8>
  4039e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4039ea:	b923      	cbnz	r3, 4039f6 <_printf_float+0x2b2>
  4039ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4039ee:	b913      	cbnz	r3, 4039f6 <_printf_float+0x2b2>
  4039f0:	6823      	ldr	r3, [r4, #0]
  4039f2:	07d9      	lsls	r1, r3, #31
  4039f4:	d5d1      	bpl.n	40399a <_printf_float+0x256>
  4039f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4039f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4039fa:	4659      	mov	r1, fp
  4039fc:	4628      	mov	r0, r5
  4039fe:	47b0      	blx	r6
  403a00:	3001      	adds	r0, #1
  403a02:	f43f aefb 	beq.w	4037fc <_printf_float+0xb8>
  403a06:	f04f 0800 	mov.w	r8, #0
  403a0a:	f104 091a 	add.w	r9, r4, #26
  403a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403a10:	425b      	negs	r3, r3
  403a12:	4598      	cmp	r8, r3
  403a14:	db01      	blt.n	403a1a <_printf_float+0x2d6>
  403a16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a18:	e78e      	b.n	403938 <_printf_float+0x1f4>
  403a1a:	2301      	movs	r3, #1
  403a1c:	464a      	mov	r2, r9
  403a1e:	4659      	mov	r1, fp
  403a20:	4628      	mov	r0, r5
  403a22:	47b0      	blx	r6
  403a24:	3001      	adds	r0, #1
  403a26:	f43f aee9 	beq.w	4037fc <_printf_float+0xb8>
  403a2a:	f108 0801 	add.w	r8, r8, #1
  403a2e:	e7ee      	b.n	403a0e <_printf_float+0x2ca>
  403a30:	7fefffff 	.word	0x7fefffff
  403a34:	004064fc 	.word	0x004064fc
  403a38:	00406500 	.word	0x00406500
  403a3c:	0040650c 	.word	0x0040650c
  403a40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403a42:	6da3      	ldr	r3, [r4, #88]	; 0x58
  403a44:	429a      	cmp	r2, r3
  403a46:	bfa8      	it	ge
  403a48:	461a      	movge	r2, r3
  403a4a:	2a00      	cmp	r2, #0
  403a4c:	4690      	mov	r8, r2
  403a4e:	dc36      	bgt.n	403abe <_printf_float+0x37a>
  403a50:	f104 031a 	add.w	r3, r4, #26
  403a54:	f04f 0a00 	mov.w	sl, #0
  403a58:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  403a5c:	930b      	str	r3, [sp, #44]	; 0x2c
  403a5e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  403a62:	eba9 0308 	sub.w	r3, r9, r8
  403a66:	459a      	cmp	sl, r3
  403a68:	db31      	blt.n	403ace <_printf_float+0x38a>
  403a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403a6e:	429a      	cmp	r2, r3
  403a70:	db38      	blt.n	403ae4 <_printf_float+0x3a0>
  403a72:	6823      	ldr	r3, [r4, #0]
  403a74:	07da      	lsls	r2, r3, #31
  403a76:	d435      	bmi.n	403ae4 <_printf_float+0x3a0>
  403a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a7a:	990d      	ldr	r1, [sp, #52]	; 0x34
  403a7c:	eba3 0209 	sub.w	r2, r3, r9
  403a80:	eba3 0801 	sub.w	r8, r3, r1
  403a84:	4590      	cmp	r8, r2
  403a86:	bfa8      	it	ge
  403a88:	4690      	movge	r8, r2
  403a8a:	f1b8 0f00 	cmp.w	r8, #0
  403a8e:	dc31      	bgt.n	403af4 <_printf_float+0x3b0>
  403a90:	2700      	movs	r7, #0
  403a92:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  403a96:	f104 091a 	add.w	r9, r4, #26
  403a9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a9e:	1a9b      	subs	r3, r3, r2
  403aa0:	eba3 0308 	sub.w	r3, r3, r8
  403aa4:	429f      	cmp	r7, r3
  403aa6:	f6bf af78 	bge.w	40399a <_printf_float+0x256>
  403aaa:	2301      	movs	r3, #1
  403aac:	464a      	mov	r2, r9
  403aae:	4659      	mov	r1, fp
  403ab0:	4628      	mov	r0, r5
  403ab2:	47b0      	blx	r6
  403ab4:	3001      	adds	r0, #1
  403ab6:	f43f aea1 	beq.w	4037fc <_printf_float+0xb8>
  403aba:	3701      	adds	r7, #1
  403abc:	e7ed      	b.n	403a9a <_printf_float+0x356>
  403abe:	4613      	mov	r3, r2
  403ac0:	4659      	mov	r1, fp
  403ac2:	463a      	mov	r2, r7
  403ac4:	4628      	mov	r0, r5
  403ac6:	47b0      	blx	r6
  403ac8:	3001      	adds	r0, #1
  403aca:	d1c1      	bne.n	403a50 <_printf_float+0x30c>
  403acc:	e696      	b.n	4037fc <_printf_float+0xb8>
  403ace:	2301      	movs	r3, #1
  403ad0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403ad2:	4659      	mov	r1, fp
  403ad4:	4628      	mov	r0, r5
  403ad6:	47b0      	blx	r6
  403ad8:	3001      	adds	r0, #1
  403ada:	f43f ae8f 	beq.w	4037fc <_printf_float+0xb8>
  403ade:	f10a 0a01 	add.w	sl, sl, #1
  403ae2:	e7bc      	b.n	403a5e <_printf_float+0x31a>
  403ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403ae8:	4659      	mov	r1, fp
  403aea:	4628      	mov	r0, r5
  403aec:	47b0      	blx	r6
  403aee:	3001      	adds	r0, #1
  403af0:	d1c2      	bne.n	403a78 <_printf_float+0x334>
  403af2:	e683      	b.n	4037fc <_printf_float+0xb8>
  403af4:	4643      	mov	r3, r8
  403af6:	eb07 0209 	add.w	r2, r7, r9
  403afa:	4659      	mov	r1, fp
  403afc:	4628      	mov	r0, r5
  403afe:	47b0      	blx	r6
  403b00:	3001      	adds	r0, #1
  403b02:	d1c5      	bne.n	403a90 <_printf_float+0x34c>
  403b04:	e67a      	b.n	4037fc <_printf_float+0xb8>
  403b06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403b08:	2a01      	cmp	r2, #1
  403b0a:	dc01      	bgt.n	403b10 <_printf_float+0x3cc>
  403b0c:	07db      	lsls	r3, r3, #31
  403b0e:	d534      	bpl.n	403b7a <_printf_float+0x436>
  403b10:	2301      	movs	r3, #1
  403b12:	463a      	mov	r2, r7
  403b14:	4659      	mov	r1, fp
  403b16:	4628      	mov	r0, r5
  403b18:	47b0      	blx	r6
  403b1a:	3001      	adds	r0, #1
  403b1c:	f43f ae6e 	beq.w	4037fc <_printf_float+0xb8>
  403b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403b24:	4659      	mov	r1, fp
  403b26:	4628      	mov	r0, r5
  403b28:	47b0      	blx	r6
  403b2a:	3001      	adds	r0, #1
  403b2c:	f43f ae66 	beq.w	4037fc <_printf_float+0xb8>
  403b30:	2200      	movs	r2, #0
  403b32:	2300      	movs	r3, #0
  403b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403b38:	f7ff fc7c 	bl	403434 <__aeabi_dcmpeq>
  403b3c:	b150      	cbz	r0, 403b54 <_printf_float+0x410>
  403b3e:	2700      	movs	r7, #0
  403b40:	f104 081a 	add.w	r8, r4, #26
  403b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403b46:	3b01      	subs	r3, #1
  403b48:	429f      	cmp	r7, r3
  403b4a:	db0c      	blt.n	403b66 <_printf_float+0x422>
  403b4c:	464b      	mov	r3, r9
  403b4e:	f104 0250 	add.w	r2, r4, #80	; 0x50
  403b52:	e6f2      	b.n	40393a <_printf_float+0x1f6>
  403b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403b56:	1c7a      	adds	r2, r7, #1
  403b58:	3b01      	subs	r3, #1
  403b5a:	4659      	mov	r1, fp
  403b5c:	4628      	mov	r0, r5
  403b5e:	47b0      	blx	r6
  403b60:	3001      	adds	r0, #1
  403b62:	d1f3      	bne.n	403b4c <_printf_float+0x408>
  403b64:	e64a      	b.n	4037fc <_printf_float+0xb8>
  403b66:	2301      	movs	r3, #1
  403b68:	4642      	mov	r2, r8
  403b6a:	4659      	mov	r1, fp
  403b6c:	4628      	mov	r0, r5
  403b6e:	47b0      	blx	r6
  403b70:	3001      	adds	r0, #1
  403b72:	f43f ae43 	beq.w	4037fc <_printf_float+0xb8>
  403b76:	3701      	adds	r7, #1
  403b78:	e7e4      	b.n	403b44 <_printf_float+0x400>
  403b7a:	2301      	movs	r3, #1
  403b7c:	463a      	mov	r2, r7
  403b7e:	e7ec      	b.n	403b5a <_printf_float+0x416>
  403b80:	2301      	movs	r3, #1
  403b82:	4642      	mov	r2, r8
  403b84:	4659      	mov	r1, fp
  403b86:	4628      	mov	r0, r5
  403b88:	47b0      	blx	r6
  403b8a:	3001      	adds	r0, #1
  403b8c:	f43f ae36 	beq.w	4037fc <_printf_float+0xb8>
  403b90:	3701      	adds	r7, #1
  403b92:	e708      	b.n	4039a6 <_printf_float+0x262>
  403b94:	463a      	mov	r2, r7
  403b96:	464b      	mov	r3, r9
  403b98:	4638      	mov	r0, r7
  403b9a:	4649      	mov	r1, r9
  403b9c:	f7ff fc7c 	bl	403498 <__aeabi_dcmpun>
  403ba0:	2800      	cmp	r0, #0
  403ba2:	f43f ae30 	beq.w	403806 <_printf_float+0xc2>
  403ba6:	4b01      	ldr	r3, [pc, #4]	; (403bac <_printf_float+0x468>)
  403ba8:	4f01      	ldr	r7, [pc, #4]	; (403bb0 <_printf_float+0x46c>)
  403baa:	e612      	b.n	4037d2 <_printf_float+0x8e>
  403bac:	00406504 	.word	0x00406504
  403bb0:	00406508 	.word	0x00406508

00403bb4 <_printf_common>:
  403bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403bb8:	4691      	mov	r9, r2
  403bba:	461f      	mov	r7, r3
  403bbc:	688a      	ldr	r2, [r1, #8]
  403bbe:	690b      	ldr	r3, [r1, #16]
  403bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  403bc4:	4293      	cmp	r3, r2
  403bc6:	bfb8      	it	lt
  403bc8:	4613      	movlt	r3, r2
  403bca:	f8c9 3000 	str.w	r3, [r9]
  403bce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  403bd2:	4606      	mov	r6, r0
  403bd4:	460c      	mov	r4, r1
  403bd6:	b112      	cbz	r2, 403bde <_printf_common+0x2a>
  403bd8:	3301      	adds	r3, #1
  403bda:	f8c9 3000 	str.w	r3, [r9]
  403bde:	6823      	ldr	r3, [r4, #0]
  403be0:	0699      	lsls	r1, r3, #26
  403be2:	bf42      	ittt	mi
  403be4:	f8d9 3000 	ldrmi.w	r3, [r9]
  403be8:	3302      	addmi	r3, #2
  403bea:	f8c9 3000 	strmi.w	r3, [r9]
  403bee:	6825      	ldr	r5, [r4, #0]
  403bf0:	f015 0506 	ands.w	r5, r5, #6
  403bf4:	d107      	bne.n	403c06 <_printf_common+0x52>
  403bf6:	f104 0a19 	add.w	sl, r4, #25
  403bfa:	68e3      	ldr	r3, [r4, #12]
  403bfc:	f8d9 2000 	ldr.w	r2, [r9]
  403c00:	1a9b      	subs	r3, r3, r2
  403c02:	429d      	cmp	r5, r3
  403c04:	db29      	blt.n	403c5a <_printf_common+0xa6>
  403c06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  403c0a:	6822      	ldr	r2, [r4, #0]
  403c0c:	3300      	adds	r3, #0
  403c0e:	bf18      	it	ne
  403c10:	2301      	movne	r3, #1
  403c12:	0692      	lsls	r2, r2, #26
  403c14:	d42e      	bmi.n	403c74 <_printf_common+0xc0>
  403c16:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403c1a:	4639      	mov	r1, r7
  403c1c:	4630      	mov	r0, r6
  403c1e:	47c0      	blx	r8
  403c20:	3001      	adds	r0, #1
  403c22:	d021      	beq.n	403c68 <_printf_common+0xb4>
  403c24:	6823      	ldr	r3, [r4, #0]
  403c26:	68e5      	ldr	r5, [r4, #12]
  403c28:	f8d9 2000 	ldr.w	r2, [r9]
  403c2c:	f003 0306 	and.w	r3, r3, #6
  403c30:	2b04      	cmp	r3, #4
  403c32:	bf08      	it	eq
  403c34:	1aad      	subeq	r5, r5, r2
  403c36:	68a3      	ldr	r3, [r4, #8]
  403c38:	6922      	ldr	r2, [r4, #16]
  403c3a:	bf0c      	ite	eq
  403c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  403c40:	2500      	movne	r5, #0
  403c42:	4293      	cmp	r3, r2
  403c44:	bfc4      	itt	gt
  403c46:	1a9b      	subgt	r3, r3, r2
  403c48:	18ed      	addgt	r5, r5, r3
  403c4a:	f04f 0900 	mov.w	r9, #0
  403c4e:	341a      	adds	r4, #26
  403c50:	454d      	cmp	r5, r9
  403c52:	d11b      	bne.n	403c8c <_printf_common+0xd8>
  403c54:	2000      	movs	r0, #0
  403c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c5a:	2301      	movs	r3, #1
  403c5c:	4652      	mov	r2, sl
  403c5e:	4639      	mov	r1, r7
  403c60:	4630      	mov	r0, r6
  403c62:	47c0      	blx	r8
  403c64:	3001      	adds	r0, #1
  403c66:	d103      	bne.n	403c70 <_printf_common+0xbc>
  403c68:	f04f 30ff 	mov.w	r0, #4294967295
  403c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c70:	3501      	adds	r5, #1
  403c72:	e7c2      	b.n	403bfa <_printf_common+0x46>
  403c74:	18e1      	adds	r1, r4, r3
  403c76:	1c5a      	adds	r2, r3, #1
  403c78:	2030      	movs	r0, #48	; 0x30
  403c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  403c7e:	4422      	add	r2, r4
  403c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  403c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  403c88:	3302      	adds	r3, #2
  403c8a:	e7c4      	b.n	403c16 <_printf_common+0x62>
  403c8c:	2301      	movs	r3, #1
  403c8e:	4622      	mov	r2, r4
  403c90:	4639      	mov	r1, r7
  403c92:	4630      	mov	r0, r6
  403c94:	47c0      	blx	r8
  403c96:	3001      	adds	r0, #1
  403c98:	d0e6      	beq.n	403c68 <_printf_common+0xb4>
  403c9a:	f109 0901 	add.w	r9, r9, #1
  403c9e:	e7d7      	b.n	403c50 <_printf_common+0x9c>

00403ca0 <_printf_i>:
  403ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403ca4:	4617      	mov	r7, r2
  403ca6:	7e0a      	ldrb	r2, [r1, #24]
  403ca8:	b085      	sub	sp, #20
  403caa:	2a6e      	cmp	r2, #110	; 0x6e
  403cac:	4698      	mov	r8, r3
  403cae:	4606      	mov	r6, r0
  403cb0:	460c      	mov	r4, r1
  403cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403cb4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  403cb8:	f000 80bc 	beq.w	403e34 <_printf_i+0x194>
  403cbc:	d81a      	bhi.n	403cf4 <_printf_i+0x54>
  403cbe:	2a63      	cmp	r2, #99	; 0x63
  403cc0:	d02e      	beq.n	403d20 <_printf_i+0x80>
  403cc2:	d80a      	bhi.n	403cda <_printf_i+0x3a>
  403cc4:	2a00      	cmp	r2, #0
  403cc6:	f000 80c8 	beq.w	403e5a <_printf_i+0x1ba>
  403cca:	2a58      	cmp	r2, #88	; 0x58
  403ccc:	f000 808a 	beq.w	403de4 <_printf_i+0x144>
  403cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403cd4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  403cd8:	e02a      	b.n	403d30 <_printf_i+0x90>
  403cda:	2a64      	cmp	r2, #100	; 0x64
  403cdc:	d001      	beq.n	403ce2 <_printf_i+0x42>
  403cde:	2a69      	cmp	r2, #105	; 0x69
  403ce0:	d1f6      	bne.n	403cd0 <_printf_i+0x30>
  403ce2:	6821      	ldr	r1, [r4, #0]
  403ce4:	681a      	ldr	r2, [r3, #0]
  403ce6:	f011 0f80 	tst.w	r1, #128	; 0x80
  403cea:	d023      	beq.n	403d34 <_printf_i+0x94>
  403cec:	1d11      	adds	r1, r2, #4
  403cee:	6019      	str	r1, [r3, #0]
  403cf0:	6813      	ldr	r3, [r2, #0]
  403cf2:	e027      	b.n	403d44 <_printf_i+0xa4>
  403cf4:	2a73      	cmp	r2, #115	; 0x73
  403cf6:	f000 80b4 	beq.w	403e62 <_printf_i+0x1c2>
  403cfa:	d808      	bhi.n	403d0e <_printf_i+0x6e>
  403cfc:	2a6f      	cmp	r2, #111	; 0x6f
  403cfe:	d02a      	beq.n	403d56 <_printf_i+0xb6>
  403d00:	2a70      	cmp	r2, #112	; 0x70
  403d02:	d1e5      	bne.n	403cd0 <_printf_i+0x30>
  403d04:	680a      	ldr	r2, [r1, #0]
  403d06:	f042 0220 	orr.w	r2, r2, #32
  403d0a:	600a      	str	r2, [r1, #0]
  403d0c:	e003      	b.n	403d16 <_printf_i+0x76>
  403d0e:	2a75      	cmp	r2, #117	; 0x75
  403d10:	d021      	beq.n	403d56 <_printf_i+0xb6>
  403d12:	2a78      	cmp	r2, #120	; 0x78
  403d14:	d1dc      	bne.n	403cd0 <_printf_i+0x30>
  403d16:	2278      	movs	r2, #120	; 0x78
  403d18:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  403d1c:	496e      	ldr	r1, [pc, #440]	; (403ed8 <_printf_i+0x238>)
  403d1e:	e064      	b.n	403dea <_printf_i+0x14a>
  403d20:	681a      	ldr	r2, [r3, #0]
  403d22:	f101 0542 	add.w	r5, r1, #66	; 0x42
  403d26:	1d11      	adds	r1, r2, #4
  403d28:	6019      	str	r1, [r3, #0]
  403d2a:	6813      	ldr	r3, [r2, #0]
  403d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403d30:	2301      	movs	r3, #1
  403d32:	e0a3      	b.n	403e7c <_printf_i+0x1dc>
  403d34:	f011 0f40 	tst.w	r1, #64	; 0x40
  403d38:	f102 0104 	add.w	r1, r2, #4
  403d3c:	6019      	str	r1, [r3, #0]
  403d3e:	d0d7      	beq.n	403cf0 <_printf_i+0x50>
  403d40:	f9b2 3000 	ldrsh.w	r3, [r2]
  403d44:	2b00      	cmp	r3, #0
  403d46:	da03      	bge.n	403d50 <_printf_i+0xb0>
  403d48:	222d      	movs	r2, #45	; 0x2d
  403d4a:	425b      	negs	r3, r3
  403d4c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  403d50:	4962      	ldr	r1, [pc, #392]	; (403edc <_printf_i+0x23c>)
  403d52:	220a      	movs	r2, #10
  403d54:	e017      	b.n	403d86 <_printf_i+0xe6>
  403d56:	6820      	ldr	r0, [r4, #0]
  403d58:	6819      	ldr	r1, [r3, #0]
  403d5a:	f010 0f80 	tst.w	r0, #128	; 0x80
  403d5e:	d003      	beq.n	403d68 <_printf_i+0xc8>
  403d60:	1d08      	adds	r0, r1, #4
  403d62:	6018      	str	r0, [r3, #0]
  403d64:	680b      	ldr	r3, [r1, #0]
  403d66:	e006      	b.n	403d76 <_printf_i+0xd6>
  403d68:	f010 0f40 	tst.w	r0, #64	; 0x40
  403d6c:	f101 0004 	add.w	r0, r1, #4
  403d70:	6018      	str	r0, [r3, #0]
  403d72:	d0f7      	beq.n	403d64 <_printf_i+0xc4>
  403d74:	880b      	ldrh	r3, [r1, #0]
  403d76:	4959      	ldr	r1, [pc, #356]	; (403edc <_printf_i+0x23c>)
  403d78:	2a6f      	cmp	r2, #111	; 0x6f
  403d7a:	bf14      	ite	ne
  403d7c:	220a      	movne	r2, #10
  403d7e:	2208      	moveq	r2, #8
  403d80:	2000      	movs	r0, #0
  403d82:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  403d86:	6865      	ldr	r5, [r4, #4]
  403d88:	60a5      	str	r5, [r4, #8]
  403d8a:	2d00      	cmp	r5, #0
  403d8c:	f2c0 809c 	blt.w	403ec8 <_printf_i+0x228>
  403d90:	6820      	ldr	r0, [r4, #0]
  403d92:	f020 0004 	bic.w	r0, r0, #4
  403d96:	6020      	str	r0, [r4, #0]
  403d98:	2b00      	cmp	r3, #0
  403d9a:	d13f      	bne.n	403e1c <_printf_i+0x17c>
  403d9c:	2d00      	cmp	r5, #0
  403d9e:	f040 8095 	bne.w	403ecc <_printf_i+0x22c>
  403da2:	4675      	mov	r5, lr
  403da4:	2a08      	cmp	r2, #8
  403da6:	d10b      	bne.n	403dc0 <_printf_i+0x120>
  403da8:	6823      	ldr	r3, [r4, #0]
  403daa:	07da      	lsls	r2, r3, #31
  403dac:	d508      	bpl.n	403dc0 <_printf_i+0x120>
  403dae:	6923      	ldr	r3, [r4, #16]
  403db0:	6862      	ldr	r2, [r4, #4]
  403db2:	429a      	cmp	r2, r3
  403db4:	bfde      	ittt	le
  403db6:	2330      	movle	r3, #48	; 0x30
  403db8:	f805 3c01 	strble.w	r3, [r5, #-1]
  403dbc:	f105 35ff 	addle.w	r5, r5, #4294967295
  403dc0:	ebae 0305 	sub.w	r3, lr, r5
  403dc4:	6123      	str	r3, [r4, #16]
  403dc6:	f8cd 8000 	str.w	r8, [sp]
  403dca:	463b      	mov	r3, r7
  403dcc:	aa03      	add	r2, sp, #12
  403dce:	4621      	mov	r1, r4
  403dd0:	4630      	mov	r0, r6
  403dd2:	f7ff feef 	bl	403bb4 <_printf_common>
  403dd6:	3001      	adds	r0, #1
  403dd8:	d155      	bne.n	403e86 <_printf_i+0x1e6>
  403dda:	f04f 30ff 	mov.w	r0, #4294967295
  403dde:	b005      	add	sp, #20
  403de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403de4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  403de8:	493c      	ldr	r1, [pc, #240]	; (403edc <_printf_i+0x23c>)
  403dea:	6822      	ldr	r2, [r4, #0]
  403dec:	6818      	ldr	r0, [r3, #0]
  403dee:	f012 0f80 	tst.w	r2, #128	; 0x80
  403df2:	f100 0504 	add.w	r5, r0, #4
  403df6:	601d      	str	r5, [r3, #0]
  403df8:	d001      	beq.n	403dfe <_printf_i+0x15e>
  403dfa:	6803      	ldr	r3, [r0, #0]
  403dfc:	e002      	b.n	403e04 <_printf_i+0x164>
  403dfe:	0655      	lsls	r5, r2, #25
  403e00:	d5fb      	bpl.n	403dfa <_printf_i+0x15a>
  403e02:	8803      	ldrh	r3, [r0, #0]
  403e04:	07d0      	lsls	r0, r2, #31
  403e06:	bf44      	itt	mi
  403e08:	f042 0220 	orrmi.w	r2, r2, #32
  403e0c:	6022      	strmi	r2, [r4, #0]
  403e0e:	b91b      	cbnz	r3, 403e18 <_printf_i+0x178>
  403e10:	6822      	ldr	r2, [r4, #0]
  403e12:	f022 0220 	bic.w	r2, r2, #32
  403e16:	6022      	str	r2, [r4, #0]
  403e18:	2210      	movs	r2, #16
  403e1a:	e7b1      	b.n	403d80 <_printf_i+0xe0>
  403e1c:	4675      	mov	r5, lr
  403e1e:	fbb3 f0f2 	udiv	r0, r3, r2
  403e22:	fb02 3310 	mls	r3, r2, r0, r3
  403e26:	5ccb      	ldrb	r3, [r1, r3]
  403e28:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403e2c:	4603      	mov	r3, r0
  403e2e:	2800      	cmp	r0, #0
  403e30:	d1f5      	bne.n	403e1e <_printf_i+0x17e>
  403e32:	e7b7      	b.n	403da4 <_printf_i+0x104>
  403e34:	6808      	ldr	r0, [r1, #0]
  403e36:	681a      	ldr	r2, [r3, #0]
  403e38:	6949      	ldr	r1, [r1, #20]
  403e3a:	f010 0f80 	tst.w	r0, #128	; 0x80
  403e3e:	d004      	beq.n	403e4a <_printf_i+0x1aa>
  403e40:	1d10      	adds	r0, r2, #4
  403e42:	6018      	str	r0, [r3, #0]
  403e44:	6813      	ldr	r3, [r2, #0]
  403e46:	6019      	str	r1, [r3, #0]
  403e48:	e007      	b.n	403e5a <_printf_i+0x1ba>
  403e4a:	f010 0f40 	tst.w	r0, #64	; 0x40
  403e4e:	f102 0004 	add.w	r0, r2, #4
  403e52:	6018      	str	r0, [r3, #0]
  403e54:	6813      	ldr	r3, [r2, #0]
  403e56:	d0f6      	beq.n	403e46 <_printf_i+0x1a6>
  403e58:	8019      	strh	r1, [r3, #0]
  403e5a:	2300      	movs	r3, #0
  403e5c:	6123      	str	r3, [r4, #16]
  403e5e:	4675      	mov	r5, lr
  403e60:	e7b1      	b.n	403dc6 <_printf_i+0x126>
  403e62:	681a      	ldr	r2, [r3, #0]
  403e64:	1d11      	adds	r1, r2, #4
  403e66:	6019      	str	r1, [r3, #0]
  403e68:	6815      	ldr	r5, [r2, #0]
  403e6a:	6862      	ldr	r2, [r4, #4]
  403e6c:	2100      	movs	r1, #0
  403e6e:	4628      	mov	r0, r5
  403e70:	f001 f966 	bl	405140 <memchr>
  403e74:	b108      	cbz	r0, 403e7a <_printf_i+0x1da>
  403e76:	1b40      	subs	r0, r0, r5
  403e78:	6060      	str	r0, [r4, #4]
  403e7a:	6863      	ldr	r3, [r4, #4]
  403e7c:	6123      	str	r3, [r4, #16]
  403e7e:	2300      	movs	r3, #0
  403e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403e84:	e79f      	b.n	403dc6 <_printf_i+0x126>
  403e86:	6923      	ldr	r3, [r4, #16]
  403e88:	462a      	mov	r2, r5
  403e8a:	4639      	mov	r1, r7
  403e8c:	4630      	mov	r0, r6
  403e8e:	47c0      	blx	r8
  403e90:	3001      	adds	r0, #1
  403e92:	d0a2      	beq.n	403dda <_printf_i+0x13a>
  403e94:	6823      	ldr	r3, [r4, #0]
  403e96:	079b      	lsls	r3, r3, #30
  403e98:	d507      	bpl.n	403eaa <_printf_i+0x20a>
  403e9a:	2500      	movs	r5, #0
  403e9c:	f104 0919 	add.w	r9, r4, #25
  403ea0:	68e3      	ldr	r3, [r4, #12]
  403ea2:	9a03      	ldr	r2, [sp, #12]
  403ea4:	1a9b      	subs	r3, r3, r2
  403ea6:	429d      	cmp	r5, r3
  403ea8:	db05      	blt.n	403eb6 <_printf_i+0x216>
  403eaa:	68e0      	ldr	r0, [r4, #12]
  403eac:	9b03      	ldr	r3, [sp, #12]
  403eae:	4298      	cmp	r0, r3
  403eb0:	bfb8      	it	lt
  403eb2:	4618      	movlt	r0, r3
  403eb4:	e793      	b.n	403dde <_printf_i+0x13e>
  403eb6:	2301      	movs	r3, #1
  403eb8:	464a      	mov	r2, r9
  403eba:	4639      	mov	r1, r7
  403ebc:	4630      	mov	r0, r6
  403ebe:	47c0      	blx	r8
  403ec0:	3001      	adds	r0, #1
  403ec2:	d08a      	beq.n	403dda <_printf_i+0x13a>
  403ec4:	3501      	adds	r5, #1
  403ec6:	e7eb      	b.n	403ea0 <_printf_i+0x200>
  403ec8:	2b00      	cmp	r3, #0
  403eca:	d1a7      	bne.n	403e1c <_printf_i+0x17c>
  403ecc:	780b      	ldrb	r3, [r1, #0]
  403ece:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403ed2:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403ed6:	e765      	b.n	403da4 <_printf_i+0x104>
  403ed8:	0040651f 	.word	0x0040651f
  403edc:	0040650e 	.word	0x0040650e

00403ee0 <iprintf>:
  403ee0:	b40f      	push	{r0, r1, r2, r3}
  403ee2:	4b0a      	ldr	r3, [pc, #40]	; (403f0c <iprintf+0x2c>)
  403ee4:	b513      	push	{r0, r1, r4, lr}
  403ee6:	681c      	ldr	r4, [r3, #0]
  403ee8:	b124      	cbz	r4, 403ef4 <iprintf+0x14>
  403eea:	69a3      	ldr	r3, [r4, #24]
  403eec:	b913      	cbnz	r3, 403ef4 <iprintf+0x14>
  403eee:	4620      	mov	r0, r4
  403ef0:	f001 f81e 	bl	404f30 <__sinit>
  403ef4:	ab05      	add	r3, sp, #20
  403ef6:	9a04      	ldr	r2, [sp, #16]
  403ef8:	68a1      	ldr	r1, [r4, #8]
  403efa:	9301      	str	r3, [sp, #4]
  403efc:	4620      	mov	r0, r4
  403efe:	f001 fd21 	bl	405944 <_vfiprintf_r>
  403f02:	b002      	add	sp, #8
  403f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403f08:	b004      	add	sp, #16
  403f0a:	4770      	bx	lr
  403f0c:	20400048 	.word	0x20400048

00403f10 <setbuf>:
  403f10:	2900      	cmp	r1, #0
  403f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403f16:	bf0c      	ite	eq
  403f18:	2202      	moveq	r2, #2
  403f1a:	2200      	movne	r2, #0
  403f1c:	f000 b800 	b.w	403f20 <setvbuf>

00403f20 <setvbuf>:
  403f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403f24:	461d      	mov	r5, r3
  403f26:	4b51      	ldr	r3, [pc, #324]	; (40406c <setvbuf+0x14c>)
  403f28:	681e      	ldr	r6, [r3, #0]
  403f2a:	4604      	mov	r4, r0
  403f2c:	460f      	mov	r7, r1
  403f2e:	4690      	mov	r8, r2
  403f30:	b126      	cbz	r6, 403f3c <setvbuf+0x1c>
  403f32:	69b3      	ldr	r3, [r6, #24]
  403f34:	b913      	cbnz	r3, 403f3c <setvbuf+0x1c>
  403f36:	4630      	mov	r0, r6
  403f38:	f000 fffa 	bl	404f30 <__sinit>
  403f3c:	4b4c      	ldr	r3, [pc, #304]	; (404070 <setvbuf+0x150>)
  403f3e:	429c      	cmp	r4, r3
  403f40:	d152      	bne.n	403fe8 <setvbuf+0xc8>
  403f42:	6874      	ldr	r4, [r6, #4]
  403f44:	f1b8 0f02 	cmp.w	r8, #2
  403f48:	d006      	beq.n	403f58 <setvbuf+0x38>
  403f4a:	f1b8 0f01 	cmp.w	r8, #1
  403f4e:	f200 8089 	bhi.w	404064 <setvbuf+0x144>
  403f52:	2d00      	cmp	r5, #0
  403f54:	f2c0 8086 	blt.w	404064 <setvbuf+0x144>
  403f58:	4621      	mov	r1, r4
  403f5a:	4630      	mov	r0, r6
  403f5c:	f000 ff7e 	bl	404e5c <_fflush_r>
  403f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403f62:	b141      	cbz	r1, 403f76 <setvbuf+0x56>
  403f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403f68:	4299      	cmp	r1, r3
  403f6a:	d002      	beq.n	403f72 <setvbuf+0x52>
  403f6c:	4630      	mov	r0, r6
  403f6e:	f001 fc15 	bl	40579c <_free_r>
  403f72:	2300      	movs	r3, #0
  403f74:	6363      	str	r3, [r4, #52]	; 0x34
  403f76:	2300      	movs	r3, #0
  403f78:	61a3      	str	r3, [r4, #24]
  403f7a:	6063      	str	r3, [r4, #4]
  403f7c:	89a3      	ldrh	r3, [r4, #12]
  403f7e:	061b      	lsls	r3, r3, #24
  403f80:	d503      	bpl.n	403f8a <setvbuf+0x6a>
  403f82:	6921      	ldr	r1, [r4, #16]
  403f84:	4630      	mov	r0, r6
  403f86:	f001 fc09 	bl	40579c <_free_r>
  403f8a:	89a3      	ldrh	r3, [r4, #12]
  403f8c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403f90:	f023 0303 	bic.w	r3, r3, #3
  403f94:	f1b8 0f02 	cmp.w	r8, #2
  403f98:	81a3      	strh	r3, [r4, #12]
  403f9a:	d05d      	beq.n	404058 <setvbuf+0x138>
  403f9c:	ab01      	add	r3, sp, #4
  403f9e:	466a      	mov	r2, sp
  403fa0:	4621      	mov	r1, r4
  403fa2:	4630      	mov	r0, r6
  403fa4:	f001 f85c 	bl	405060 <__swhatbuf_r>
  403fa8:	89a3      	ldrh	r3, [r4, #12]
  403faa:	4318      	orrs	r0, r3
  403fac:	81a0      	strh	r0, [r4, #12]
  403fae:	bb2d      	cbnz	r5, 403ffc <setvbuf+0xdc>
  403fb0:	9d00      	ldr	r5, [sp, #0]
  403fb2:	4628      	mov	r0, r5
  403fb4:	f001 f8b8 	bl	405128 <malloc>
  403fb8:	4607      	mov	r7, r0
  403fba:	2800      	cmp	r0, #0
  403fbc:	d14e      	bne.n	40405c <setvbuf+0x13c>
  403fbe:	f8dd 9000 	ldr.w	r9, [sp]
  403fc2:	45a9      	cmp	r9, r5
  403fc4:	d13c      	bne.n	404040 <setvbuf+0x120>
  403fc6:	f04f 30ff 	mov.w	r0, #4294967295
  403fca:	89a3      	ldrh	r3, [r4, #12]
  403fcc:	f043 0302 	orr.w	r3, r3, #2
  403fd0:	81a3      	strh	r3, [r4, #12]
  403fd2:	2300      	movs	r3, #0
  403fd4:	60a3      	str	r3, [r4, #8]
  403fd6:	f104 0347 	add.w	r3, r4, #71	; 0x47
  403fda:	6023      	str	r3, [r4, #0]
  403fdc:	6123      	str	r3, [r4, #16]
  403fde:	2301      	movs	r3, #1
  403fe0:	6163      	str	r3, [r4, #20]
  403fe2:	b003      	add	sp, #12
  403fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403fe8:	4b22      	ldr	r3, [pc, #136]	; (404074 <setvbuf+0x154>)
  403fea:	429c      	cmp	r4, r3
  403fec:	d101      	bne.n	403ff2 <setvbuf+0xd2>
  403fee:	68b4      	ldr	r4, [r6, #8]
  403ff0:	e7a8      	b.n	403f44 <setvbuf+0x24>
  403ff2:	4b21      	ldr	r3, [pc, #132]	; (404078 <setvbuf+0x158>)
  403ff4:	429c      	cmp	r4, r3
  403ff6:	bf08      	it	eq
  403ff8:	68f4      	ldreq	r4, [r6, #12]
  403ffa:	e7a3      	b.n	403f44 <setvbuf+0x24>
  403ffc:	2f00      	cmp	r7, #0
  403ffe:	d0d8      	beq.n	403fb2 <setvbuf+0x92>
  404000:	69b3      	ldr	r3, [r6, #24]
  404002:	b913      	cbnz	r3, 40400a <setvbuf+0xea>
  404004:	4630      	mov	r0, r6
  404006:	f000 ff93 	bl	404f30 <__sinit>
  40400a:	f1b8 0f01 	cmp.w	r8, #1
  40400e:	bf08      	it	eq
  404010:	89a3      	ldrheq	r3, [r4, #12]
  404012:	6027      	str	r7, [r4, #0]
  404014:	bf04      	itt	eq
  404016:	f043 0301 	orreq.w	r3, r3, #1
  40401a:	81a3      	strheq	r3, [r4, #12]
  40401c:	89a3      	ldrh	r3, [r4, #12]
  40401e:	6127      	str	r7, [r4, #16]
  404020:	f013 0008 	ands.w	r0, r3, #8
  404024:	6165      	str	r5, [r4, #20]
  404026:	d01b      	beq.n	404060 <setvbuf+0x140>
  404028:	f013 0001 	ands.w	r0, r3, #1
  40402c:	bf18      	it	ne
  40402e:	426d      	negne	r5, r5
  404030:	f04f 0300 	mov.w	r3, #0
  404034:	bf1d      	ittte	ne
  404036:	60a3      	strne	r3, [r4, #8]
  404038:	61a5      	strne	r5, [r4, #24]
  40403a:	4618      	movne	r0, r3
  40403c:	60a5      	streq	r5, [r4, #8]
  40403e:	e7d0      	b.n	403fe2 <setvbuf+0xc2>
  404040:	4648      	mov	r0, r9
  404042:	f001 f871 	bl	405128 <malloc>
  404046:	4607      	mov	r7, r0
  404048:	2800      	cmp	r0, #0
  40404a:	d0bc      	beq.n	403fc6 <setvbuf+0xa6>
  40404c:	89a3      	ldrh	r3, [r4, #12]
  40404e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404052:	81a3      	strh	r3, [r4, #12]
  404054:	464d      	mov	r5, r9
  404056:	e7d3      	b.n	404000 <setvbuf+0xe0>
  404058:	2000      	movs	r0, #0
  40405a:	e7b6      	b.n	403fca <setvbuf+0xaa>
  40405c:	46a9      	mov	r9, r5
  40405e:	e7f5      	b.n	40404c <setvbuf+0x12c>
  404060:	60a0      	str	r0, [r4, #8]
  404062:	e7be      	b.n	403fe2 <setvbuf+0xc2>
  404064:	f04f 30ff 	mov.w	r0, #4294967295
  404068:	e7bb      	b.n	403fe2 <setvbuf+0xc2>
  40406a:	bf00      	nop
  40406c:	20400048 	.word	0x20400048
  404070:	00406560 	.word	0x00406560
  404074:	00406580 	.word	0x00406580
  404078:	00406540 	.word	0x00406540

0040407c <strlen>:
  40407c:	4603      	mov	r3, r0
  40407e:	f813 2b01 	ldrb.w	r2, [r3], #1
  404082:	2a00      	cmp	r2, #0
  404084:	d1fb      	bne.n	40407e <strlen+0x2>
  404086:	1a18      	subs	r0, r3, r0
  404088:	3801      	subs	r0, #1
  40408a:	4770      	bx	lr

0040408c <quorem>:
  40408c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404090:	6903      	ldr	r3, [r0, #16]
  404092:	690c      	ldr	r4, [r1, #16]
  404094:	429c      	cmp	r4, r3
  404096:	4680      	mov	r8, r0
  404098:	f300 8082 	bgt.w	4041a0 <quorem+0x114>
  40409c:	3c01      	subs	r4, #1
  40409e:	f101 0714 	add.w	r7, r1, #20
  4040a2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  4040a6:	f100 0614 	add.w	r6, r0, #20
  4040aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  4040ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  4040b2:	eb06 030e 	add.w	r3, r6, lr
  4040b6:	3501      	adds	r5, #1
  4040b8:	eb07 090e 	add.w	r9, r7, lr
  4040bc:	9301      	str	r3, [sp, #4]
  4040be:	fbb0 f5f5 	udiv	r5, r0, r5
  4040c2:	b395      	cbz	r5, 40412a <quorem+0x9e>
  4040c4:	f04f 0a00 	mov.w	sl, #0
  4040c8:	4638      	mov	r0, r7
  4040ca:	46b4      	mov	ip, r6
  4040cc:	46d3      	mov	fp, sl
  4040ce:	f850 2b04 	ldr.w	r2, [r0], #4
  4040d2:	b293      	uxth	r3, r2
  4040d4:	fb05 a303 	mla	r3, r5, r3, sl
  4040d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4040dc:	b29b      	uxth	r3, r3
  4040de:	ebab 0303 	sub.w	r3, fp, r3
  4040e2:	0c12      	lsrs	r2, r2, #16
  4040e4:	f8bc b000 	ldrh.w	fp, [ip]
  4040e8:	fb05 a202 	mla	r2, r5, r2, sl
  4040ec:	fa13 f38b 	uxtah	r3, r3, fp
  4040f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  4040f4:	fa1f fb82 	uxth.w	fp, r2
  4040f8:	f8dc 2000 	ldr.w	r2, [ip]
  4040fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  404100:	eb02 4223 	add.w	r2, r2, r3, asr #16
  404104:	b29b      	uxth	r3, r3
  404106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40410a:	4581      	cmp	r9, r0
  40410c:	ea4f 4b22 	mov.w	fp, r2, asr #16
  404110:	f84c 3b04 	str.w	r3, [ip], #4
  404114:	d2db      	bcs.n	4040ce <quorem+0x42>
  404116:	f856 300e 	ldr.w	r3, [r6, lr]
  40411a:	b933      	cbnz	r3, 40412a <quorem+0x9e>
  40411c:	9b01      	ldr	r3, [sp, #4]
  40411e:	3b04      	subs	r3, #4
  404120:	429e      	cmp	r6, r3
  404122:	461a      	mov	r2, r3
  404124:	d330      	bcc.n	404188 <quorem+0xfc>
  404126:	f8c8 4010 	str.w	r4, [r8, #16]
  40412a:	4640      	mov	r0, r8
  40412c:	f001 fa61 	bl	4055f2 <__mcmp>
  404130:	2800      	cmp	r0, #0
  404132:	db25      	blt.n	404180 <quorem+0xf4>
  404134:	3501      	adds	r5, #1
  404136:	4630      	mov	r0, r6
  404138:	f04f 0e00 	mov.w	lr, #0
  40413c:	f857 2b04 	ldr.w	r2, [r7], #4
  404140:	f8d0 c000 	ldr.w	ip, [r0]
  404144:	b293      	uxth	r3, r2
  404146:	ebae 0303 	sub.w	r3, lr, r3
  40414a:	0c12      	lsrs	r2, r2, #16
  40414c:	fa13 f38c 	uxtah	r3, r3, ip
  404150:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  404154:	eb02 4223 	add.w	r2, r2, r3, asr #16
  404158:	b29b      	uxth	r3, r3
  40415a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40415e:	45b9      	cmp	r9, r7
  404160:	ea4f 4e22 	mov.w	lr, r2, asr #16
  404164:	f840 3b04 	str.w	r3, [r0], #4
  404168:	d2e8      	bcs.n	40413c <quorem+0xb0>
  40416a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40416e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  404172:	b92a      	cbnz	r2, 404180 <quorem+0xf4>
  404174:	3b04      	subs	r3, #4
  404176:	429e      	cmp	r6, r3
  404178:	461a      	mov	r2, r3
  40417a:	d30b      	bcc.n	404194 <quorem+0x108>
  40417c:	f8c8 4010 	str.w	r4, [r8, #16]
  404180:	4628      	mov	r0, r5
  404182:	b003      	add	sp, #12
  404184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404188:	6812      	ldr	r2, [r2, #0]
  40418a:	3b04      	subs	r3, #4
  40418c:	2a00      	cmp	r2, #0
  40418e:	d1ca      	bne.n	404126 <quorem+0x9a>
  404190:	3c01      	subs	r4, #1
  404192:	e7c5      	b.n	404120 <quorem+0x94>
  404194:	6812      	ldr	r2, [r2, #0]
  404196:	3b04      	subs	r3, #4
  404198:	2a00      	cmp	r2, #0
  40419a:	d1ef      	bne.n	40417c <quorem+0xf0>
  40419c:	3c01      	subs	r4, #1
  40419e:	e7ea      	b.n	404176 <quorem+0xea>
  4041a0:	2000      	movs	r0, #0
  4041a2:	e7ee      	b.n	404182 <quorem+0xf6>
  4041a4:	0000      	movs	r0, r0
	...

004041a8 <_dtoa_r>:
  4041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041ac:	6a46      	ldr	r6, [r0, #36]	; 0x24
  4041ae:	b095      	sub	sp, #84	; 0x54
  4041b0:	4604      	mov	r4, r0
  4041b2:	9d21      	ldr	r5, [sp, #132]	; 0x84
  4041b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4041b8:	b93e      	cbnz	r6, 4041ca <_dtoa_r+0x22>
  4041ba:	2010      	movs	r0, #16
  4041bc:	f000 ffb4 	bl	405128 <malloc>
  4041c0:	6260      	str	r0, [r4, #36]	; 0x24
  4041c2:	6046      	str	r6, [r0, #4]
  4041c4:	6086      	str	r6, [r0, #8]
  4041c6:	6006      	str	r6, [r0, #0]
  4041c8:	60c6      	str	r6, [r0, #12]
  4041ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4041cc:	6819      	ldr	r1, [r3, #0]
  4041ce:	b151      	cbz	r1, 4041e6 <_dtoa_r+0x3e>
  4041d0:	685a      	ldr	r2, [r3, #4]
  4041d2:	604a      	str	r2, [r1, #4]
  4041d4:	2301      	movs	r3, #1
  4041d6:	4093      	lsls	r3, r2
  4041d8:	608b      	str	r3, [r1, #8]
  4041da:	4620      	mov	r0, r4
  4041dc:	f001 f834 	bl	405248 <_Bfree>
  4041e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4041e2:	2200      	movs	r2, #0
  4041e4:	601a      	str	r2, [r3, #0]
  4041e6:	9b03      	ldr	r3, [sp, #12]
  4041e8:	2b00      	cmp	r3, #0
  4041ea:	bfbf      	itttt	lt
  4041ec:	2301      	movlt	r3, #1
  4041ee:	602b      	strlt	r3, [r5, #0]
  4041f0:	9b03      	ldrlt	r3, [sp, #12]
  4041f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4041f6:	bfb2      	itee	lt
  4041f8:	9303      	strlt	r3, [sp, #12]
  4041fa:	2300      	movge	r3, #0
  4041fc:	602b      	strge	r3, [r5, #0]
  4041fe:	f8dd 900c 	ldr.w	r9, [sp, #12]
  404202:	4ba9      	ldr	r3, [pc, #676]	; (4044a8 <_dtoa_r+0x300>)
  404204:	ea33 0309 	bics.w	r3, r3, r9
  404208:	d11b      	bne.n	404242 <_dtoa_r+0x9a>
  40420a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40420c:	f242 730f 	movw	r3, #9999	; 0x270f
  404210:	6013      	str	r3, [r2, #0]
  404212:	9b02      	ldr	r3, [sp, #8]
  404214:	b923      	cbnz	r3, 404220 <_dtoa_r+0x78>
  404216:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40421a:	2800      	cmp	r0, #0
  40421c:	f000 8581 	beq.w	404d22 <_dtoa_r+0xb7a>
  404220:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404222:	b953      	cbnz	r3, 40423a <_dtoa_r+0x92>
  404224:	4ba1      	ldr	r3, [pc, #644]	; (4044ac <_dtoa_r+0x304>)
  404226:	e021      	b.n	40426c <_dtoa_r+0xc4>
  404228:	4ba1      	ldr	r3, [pc, #644]	; (4044b0 <_dtoa_r+0x308>)
  40422a:	9306      	str	r3, [sp, #24]
  40422c:	3308      	adds	r3, #8
  40422e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404230:	6013      	str	r3, [r2, #0]
  404232:	9806      	ldr	r0, [sp, #24]
  404234:	b015      	add	sp, #84	; 0x54
  404236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40423a:	4b9c      	ldr	r3, [pc, #624]	; (4044ac <_dtoa_r+0x304>)
  40423c:	9306      	str	r3, [sp, #24]
  40423e:	3303      	adds	r3, #3
  404240:	e7f5      	b.n	40422e <_dtoa_r+0x86>
  404242:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  404246:	2200      	movs	r2, #0
  404248:	2300      	movs	r3, #0
  40424a:	4630      	mov	r0, r6
  40424c:	4639      	mov	r1, r7
  40424e:	f7ff f8f1 	bl	403434 <__aeabi_dcmpeq>
  404252:	4680      	mov	r8, r0
  404254:	b160      	cbz	r0, 404270 <_dtoa_r+0xc8>
  404256:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404258:	2301      	movs	r3, #1
  40425a:	6013      	str	r3, [r2, #0]
  40425c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40425e:	2b00      	cmp	r3, #0
  404260:	f000 855c 	beq.w	404d1c <_dtoa_r+0xb74>
  404264:	4b93      	ldr	r3, [pc, #588]	; (4044b4 <_dtoa_r+0x30c>)
  404266:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404268:	6013      	str	r3, [r2, #0]
  40426a:	3b01      	subs	r3, #1
  40426c:	9306      	str	r3, [sp, #24]
  40426e:	e7e0      	b.n	404232 <_dtoa_r+0x8a>
  404270:	ab12      	add	r3, sp, #72	; 0x48
  404272:	9301      	str	r3, [sp, #4]
  404274:	ab13      	add	r3, sp, #76	; 0x4c
  404276:	9300      	str	r3, [sp, #0]
  404278:	4632      	mov	r2, r6
  40427a:	463b      	mov	r3, r7
  40427c:	4620      	mov	r0, r4
  40427e:	f001 fa30 	bl	4056e2 <__d2b>
  404282:	f3c9 550a 	ubfx	r5, r9, #20, #11
  404286:	4682      	mov	sl, r0
  404288:	2d00      	cmp	r5, #0
  40428a:	d07c      	beq.n	404386 <_dtoa_r+0x1de>
  40428c:	f3c7 0313 	ubfx	r3, r7, #0, #20
  404290:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  404294:	4630      	mov	r0, r6
  404296:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40429a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40429e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  4042a2:	2200      	movs	r2, #0
  4042a4:	4b84      	ldr	r3, [pc, #528]	; (4044b8 <_dtoa_r+0x310>)
  4042a6:	f7fe fca9 	bl	402bfc <__aeabi_dsub>
  4042aa:	a379      	add	r3, pc, #484	; (adr r3, 404490 <_dtoa_r+0x2e8>)
  4042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042b0:	f7fe fe58 	bl	402f64 <__aeabi_dmul>
  4042b4:	a378      	add	r3, pc, #480	; (adr r3, 404498 <_dtoa_r+0x2f0>)
  4042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042ba:	f7fe fca1 	bl	402c00 <__adddf3>
  4042be:	4606      	mov	r6, r0
  4042c0:	4628      	mov	r0, r5
  4042c2:	460f      	mov	r7, r1
  4042c4:	f7fe fde8 	bl	402e98 <__aeabi_i2d>
  4042c8:	a375      	add	r3, pc, #468	; (adr r3, 4044a0 <_dtoa_r+0x2f8>)
  4042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042ce:	f7fe fe49 	bl	402f64 <__aeabi_dmul>
  4042d2:	4602      	mov	r2, r0
  4042d4:	460b      	mov	r3, r1
  4042d6:	4630      	mov	r0, r6
  4042d8:	4639      	mov	r1, r7
  4042da:	f7fe fc91 	bl	402c00 <__adddf3>
  4042de:	4606      	mov	r6, r0
  4042e0:	460f      	mov	r7, r1
  4042e2:	f7ff f8ef 	bl	4034c4 <__aeabi_d2iz>
  4042e6:	2200      	movs	r2, #0
  4042e8:	4683      	mov	fp, r0
  4042ea:	2300      	movs	r3, #0
  4042ec:	4630      	mov	r0, r6
  4042ee:	4639      	mov	r1, r7
  4042f0:	f7ff f8aa 	bl	403448 <__aeabi_dcmplt>
  4042f4:	b158      	cbz	r0, 40430e <_dtoa_r+0x166>
  4042f6:	4658      	mov	r0, fp
  4042f8:	f7fe fdce 	bl	402e98 <__aeabi_i2d>
  4042fc:	4602      	mov	r2, r0
  4042fe:	460b      	mov	r3, r1
  404300:	4630      	mov	r0, r6
  404302:	4639      	mov	r1, r7
  404304:	f7ff f896 	bl	403434 <__aeabi_dcmpeq>
  404308:	b908      	cbnz	r0, 40430e <_dtoa_r+0x166>
  40430a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40430e:	f1bb 0f16 	cmp.w	fp, #22
  404312:	d857      	bhi.n	4043c4 <_dtoa_r+0x21c>
  404314:	4969      	ldr	r1, [pc, #420]	; (4044bc <_dtoa_r+0x314>)
  404316:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40431a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40431e:	e9d1 0100 	ldrd	r0, r1, [r1]
  404322:	f7ff f8af 	bl	403484 <__aeabi_dcmpgt>
  404326:	2800      	cmp	r0, #0
  404328:	d04e      	beq.n	4043c8 <_dtoa_r+0x220>
  40432a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40432e:	2300      	movs	r3, #0
  404330:	930d      	str	r3, [sp, #52]	; 0x34
  404332:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404334:	1b5d      	subs	r5, r3, r5
  404336:	1e6b      	subs	r3, r5, #1
  404338:	9307      	str	r3, [sp, #28]
  40433a:	bf43      	ittte	mi
  40433c:	2300      	movmi	r3, #0
  40433e:	f1c5 0801 	rsbmi	r8, r5, #1
  404342:	9307      	strmi	r3, [sp, #28]
  404344:	f04f 0800 	movpl.w	r8, #0
  404348:	f1bb 0f00 	cmp.w	fp, #0
  40434c:	db3e      	blt.n	4043cc <_dtoa_r+0x224>
  40434e:	9b07      	ldr	r3, [sp, #28]
  404350:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  404354:	445b      	add	r3, fp
  404356:	9307      	str	r3, [sp, #28]
  404358:	2300      	movs	r3, #0
  40435a:	9308      	str	r3, [sp, #32]
  40435c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40435e:	2b09      	cmp	r3, #9
  404360:	f200 80b0 	bhi.w	4044c4 <_dtoa_r+0x31c>
  404364:	2b05      	cmp	r3, #5
  404366:	bfc4      	itt	gt
  404368:	3b04      	subgt	r3, #4
  40436a:	931e      	strgt	r3, [sp, #120]	; 0x78
  40436c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40436e:	f1a3 0302 	sub.w	r3, r3, #2
  404372:	bfcc      	ite	gt
  404374:	2600      	movgt	r6, #0
  404376:	2601      	movle	r6, #1
  404378:	2b03      	cmp	r3, #3
  40437a:	f200 80af 	bhi.w	4044dc <_dtoa_r+0x334>
  40437e:	e8df f003 	tbb	[pc, r3]
  404382:	8583      	.short	0x8583
  404384:	772d      	.short	0x772d
  404386:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404388:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40438a:	441d      	add	r5, r3
  40438c:	f205 4332 	addw	r3, r5, #1074	; 0x432
  404390:	2b20      	cmp	r3, #32
  404392:	dd11      	ble.n	4043b8 <_dtoa_r+0x210>
  404394:	9a02      	ldr	r2, [sp, #8]
  404396:	f205 4012 	addw	r0, r5, #1042	; 0x412
  40439a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40439e:	fa22 f000 	lsr.w	r0, r2, r0
  4043a2:	fa09 f303 	lsl.w	r3, r9, r3
  4043a6:	4318      	orrs	r0, r3
  4043a8:	f7fe fd66 	bl	402e78 <__aeabi_ui2d>
  4043ac:	2301      	movs	r3, #1
  4043ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4043b2:	3d01      	subs	r5, #1
  4043b4:	9310      	str	r3, [sp, #64]	; 0x40
  4043b6:	e774      	b.n	4042a2 <_dtoa_r+0xfa>
  4043b8:	f1c3 0020 	rsb	r0, r3, #32
  4043bc:	9b02      	ldr	r3, [sp, #8]
  4043be:	fa03 f000 	lsl.w	r0, r3, r0
  4043c2:	e7f1      	b.n	4043a8 <_dtoa_r+0x200>
  4043c4:	2301      	movs	r3, #1
  4043c6:	e7b3      	b.n	404330 <_dtoa_r+0x188>
  4043c8:	900d      	str	r0, [sp, #52]	; 0x34
  4043ca:	e7b2      	b.n	404332 <_dtoa_r+0x18a>
  4043cc:	f1cb 0300 	rsb	r3, fp, #0
  4043d0:	9308      	str	r3, [sp, #32]
  4043d2:	2300      	movs	r3, #0
  4043d4:	eba8 080b 	sub.w	r8, r8, fp
  4043d8:	930c      	str	r3, [sp, #48]	; 0x30
  4043da:	e7bf      	b.n	40435c <_dtoa_r+0x1b4>
  4043dc:	2301      	movs	r3, #1
  4043de:	9309      	str	r3, [sp, #36]	; 0x24
  4043e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4043e2:	2b00      	cmp	r3, #0
  4043e4:	dd7d      	ble.n	4044e2 <_dtoa_r+0x33a>
  4043e6:	9304      	str	r3, [sp, #16]
  4043e8:	4699      	mov	r9, r3
  4043ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4043ec:	2200      	movs	r2, #0
  4043ee:	606a      	str	r2, [r5, #4]
  4043f0:	2104      	movs	r1, #4
  4043f2:	f101 0214 	add.w	r2, r1, #20
  4043f6:	429a      	cmp	r2, r3
  4043f8:	d978      	bls.n	4044ec <_dtoa_r+0x344>
  4043fa:	6869      	ldr	r1, [r5, #4]
  4043fc:	4620      	mov	r0, r4
  4043fe:	f000 feef 	bl	4051e0 <_Balloc>
  404402:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404404:	6028      	str	r0, [r5, #0]
  404406:	681b      	ldr	r3, [r3, #0]
  404408:	9306      	str	r3, [sp, #24]
  40440a:	f1b9 0f0e 	cmp.w	r9, #14
  40440e:	f200 80ee 	bhi.w	4045ee <_dtoa_r+0x446>
  404412:	2e00      	cmp	r6, #0
  404414:	f000 80eb 	beq.w	4045ee <_dtoa_r+0x446>
  404418:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40441c:	f1bb 0f00 	cmp.w	fp, #0
  404420:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  404424:	dd77      	ble.n	404516 <_dtoa_r+0x36e>
  404426:	4a25      	ldr	r2, [pc, #148]	; (4044bc <_dtoa_r+0x314>)
  404428:	f00b 030f 	and.w	r3, fp, #15
  40442c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404430:	e9d3 2300 	ldrd	r2, r3, [r3]
  404434:	ea4f 162b 	mov.w	r6, fp, asr #4
  404438:	06f0      	lsls	r0, r6, #27
  40443a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40443e:	d55a      	bpl.n	4044f6 <_dtoa_r+0x34e>
  404440:	4b1f      	ldr	r3, [pc, #124]	; (4044c0 <_dtoa_r+0x318>)
  404442:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404446:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40444a:	f7fe feb5 	bl	4031b8 <__aeabi_ddiv>
  40444e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404452:	f006 060f 	and.w	r6, r6, #15
  404456:	2503      	movs	r5, #3
  404458:	4f19      	ldr	r7, [pc, #100]	; (4044c0 <_dtoa_r+0x318>)
  40445a:	2e00      	cmp	r6, #0
  40445c:	d14d      	bne.n	4044fa <_dtoa_r+0x352>
  40445e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404466:	f7fe fea7 	bl	4031b8 <__aeabi_ddiv>
  40446a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40446e:	e06c      	b.n	40454a <_dtoa_r+0x3a2>
  404470:	2301      	movs	r3, #1
  404472:	9309      	str	r3, [sp, #36]	; 0x24
  404474:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404476:	445b      	add	r3, fp
  404478:	f103 0901 	add.w	r9, r3, #1
  40447c:	9304      	str	r3, [sp, #16]
  40447e:	464b      	mov	r3, r9
  404480:	2b01      	cmp	r3, #1
  404482:	bfb8      	it	lt
  404484:	2301      	movlt	r3, #1
  404486:	e7b0      	b.n	4043ea <_dtoa_r+0x242>
  404488:	2300      	movs	r3, #0
  40448a:	e7a8      	b.n	4043de <_dtoa_r+0x236>
  40448c:	2300      	movs	r3, #0
  40448e:	e7f0      	b.n	404472 <_dtoa_r+0x2ca>
  404490:	636f4361 	.word	0x636f4361
  404494:	3fd287a7 	.word	0x3fd287a7
  404498:	8b60c8b3 	.word	0x8b60c8b3
  40449c:	3fc68a28 	.word	0x3fc68a28
  4044a0:	509f79fb 	.word	0x509f79fb
  4044a4:	3fd34413 	.word	0x3fd34413
  4044a8:	7ff00000 	.word	0x7ff00000
  4044ac:	00406539 	.word	0x00406539
  4044b0:	00406530 	.word	0x00406530
  4044b4:	0040650d 	.word	0x0040650d
  4044b8:	3ff80000 	.word	0x3ff80000
  4044bc:	004065c8 	.word	0x004065c8
  4044c0:	004065a0 	.word	0x004065a0
  4044c4:	2601      	movs	r6, #1
  4044c6:	2300      	movs	r3, #0
  4044c8:	931e      	str	r3, [sp, #120]	; 0x78
  4044ca:	9609      	str	r6, [sp, #36]	; 0x24
  4044cc:	f04f 33ff 	mov.w	r3, #4294967295
  4044d0:	9304      	str	r3, [sp, #16]
  4044d2:	4699      	mov	r9, r3
  4044d4:	2200      	movs	r2, #0
  4044d6:	2312      	movs	r3, #18
  4044d8:	921f      	str	r2, [sp, #124]	; 0x7c
  4044da:	e786      	b.n	4043ea <_dtoa_r+0x242>
  4044dc:	2301      	movs	r3, #1
  4044de:	9309      	str	r3, [sp, #36]	; 0x24
  4044e0:	e7f4      	b.n	4044cc <_dtoa_r+0x324>
  4044e2:	2301      	movs	r3, #1
  4044e4:	9304      	str	r3, [sp, #16]
  4044e6:	4699      	mov	r9, r3
  4044e8:	461a      	mov	r2, r3
  4044ea:	e7f5      	b.n	4044d8 <_dtoa_r+0x330>
  4044ec:	686a      	ldr	r2, [r5, #4]
  4044ee:	3201      	adds	r2, #1
  4044f0:	606a      	str	r2, [r5, #4]
  4044f2:	0049      	lsls	r1, r1, #1
  4044f4:	e77d      	b.n	4043f2 <_dtoa_r+0x24a>
  4044f6:	2502      	movs	r5, #2
  4044f8:	e7ae      	b.n	404458 <_dtoa_r+0x2b0>
  4044fa:	07f1      	lsls	r1, r6, #31
  4044fc:	d508      	bpl.n	404510 <_dtoa_r+0x368>
  4044fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404502:	e9d7 2300 	ldrd	r2, r3, [r7]
  404506:	f7fe fd2d 	bl	402f64 <__aeabi_dmul>
  40450a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40450e:	3501      	adds	r5, #1
  404510:	1076      	asrs	r6, r6, #1
  404512:	3708      	adds	r7, #8
  404514:	e7a1      	b.n	40445a <_dtoa_r+0x2b2>
  404516:	f000 80a5 	beq.w	404664 <_dtoa_r+0x4bc>
  40451a:	f1cb 0600 	rsb	r6, fp, #0
  40451e:	4ba3      	ldr	r3, [pc, #652]	; (4047ac <_dtoa_r+0x604>)
  404520:	4fa3      	ldr	r7, [pc, #652]	; (4047b0 <_dtoa_r+0x608>)
  404522:	f006 020f 	and.w	r2, r6, #15
  404526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40452a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40452e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404532:	f7fe fd17 	bl	402f64 <__aeabi_dmul>
  404536:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40453a:	1136      	asrs	r6, r6, #4
  40453c:	2300      	movs	r3, #0
  40453e:	2502      	movs	r5, #2
  404540:	2e00      	cmp	r6, #0
  404542:	f040 8084 	bne.w	40464e <_dtoa_r+0x4a6>
  404546:	2b00      	cmp	r3, #0
  404548:	d18f      	bne.n	40446a <_dtoa_r+0x2c2>
  40454a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40454c:	2b00      	cmp	r3, #0
  40454e:	f000 808b 	beq.w	404668 <_dtoa_r+0x4c0>
  404552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404556:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40455a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40455e:	2200      	movs	r2, #0
  404560:	4b94      	ldr	r3, [pc, #592]	; (4047b4 <_dtoa_r+0x60c>)
  404562:	f7fe ff71 	bl	403448 <__aeabi_dcmplt>
  404566:	2800      	cmp	r0, #0
  404568:	d07e      	beq.n	404668 <_dtoa_r+0x4c0>
  40456a:	f1b9 0f00 	cmp.w	r9, #0
  40456e:	d07b      	beq.n	404668 <_dtoa_r+0x4c0>
  404570:	9b04      	ldr	r3, [sp, #16]
  404572:	2b00      	cmp	r3, #0
  404574:	dd37      	ble.n	4045e6 <_dtoa_r+0x43e>
  404576:	2200      	movs	r2, #0
  404578:	4b8f      	ldr	r3, [pc, #572]	; (4047b8 <_dtoa_r+0x610>)
  40457a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40457e:	f7fe fcf1 	bl	402f64 <__aeabi_dmul>
  404582:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404586:	9e04      	ldr	r6, [sp, #16]
  404588:	f10b 37ff 	add.w	r7, fp, #4294967295
  40458c:	3501      	adds	r5, #1
  40458e:	4628      	mov	r0, r5
  404590:	f7fe fc82 	bl	402e98 <__aeabi_i2d>
  404594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404598:	f7fe fce4 	bl	402f64 <__aeabi_dmul>
  40459c:	4b87      	ldr	r3, [pc, #540]	; (4047bc <_dtoa_r+0x614>)
  40459e:	2200      	movs	r2, #0
  4045a0:	f7fe fb2e 	bl	402c00 <__adddf3>
  4045a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4045a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4045aa:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  4045ae:	950b      	str	r5, [sp, #44]	; 0x2c
  4045b0:	2e00      	cmp	r6, #0
  4045b2:	d15c      	bne.n	40466e <_dtoa_r+0x4c6>
  4045b4:	2200      	movs	r2, #0
  4045b6:	4b82      	ldr	r3, [pc, #520]	; (4047c0 <_dtoa_r+0x618>)
  4045b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4045bc:	f7fe fb1e 	bl	402bfc <__aeabi_dsub>
  4045c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4045c2:	462b      	mov	r3, r5
  4045c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4045c8:	f7fe ff5c 	bl	403484 <__aeabi_dcmpgt>
  4045cc:	2800      	cmp	r0, #0
  4045ce:	f040 82f7 	bne.w	404bc0 <_dtoa_r+0xa18>
  4045d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4045d4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4045d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4045dc:	f7fe ff34 	bl	403448 <__aeabi_dcmplt>
  4045e0:	2800      	cmp	r0, #0
  4045e2:	f040 82eb 	bne.w	404bbc <_dtoa_r+0xa14>
  4045e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4045ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4045ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4045f0:	2b00      	cmp	r3, #0
  4045f2:	f2c0 8151 	blt.w	404898 <_dtoa_r+0x6f0>
  4045f6:	f1bb 0f0e 	cmp.w	fp, #14
  4045fa:	f300 814d 	bgt.w	404898 <_dtoa_r+0x6f0>
  4045fe:	4b6b      	ldr	r3, [pc, #428]	; (4047ac <_dtoa_r+0x604>)
  404600:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  404604:	e9d3 2300 	ldrd	r2, r3, [r3]
  404608:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40460c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40460e:	2b00      	cmp	r3, #0
  404610:	f280 80da 	bge.w	4047c8 <_dtoa_r+0x620>
  404614:	f1b9 0f00 	cmp.w	r9, #0
  404618:	f300 80d6 	bgt.w	4047c8 <_dtoa_r+0x620>
  40461c:	f040 82cd 	bne.w	404bba <_dtoa_r+0xa12>
  404620:	2200      	movs	r2, #0
  404622:	4b67      	ldr	r3, [pc, #412]	; (4047c0 <_dtoa_r+0x618>)
  404624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404628:	f7fe fc9c 	bl	402f64 <__aeabi_dmul>
  40462c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404630:	f7fe ff1e 	bl	403470 <__aeabi_dcmpge>
  404634:	464e      	mov	r6, r9
  404636:	464f      	mov	r7, r9
  404638:	2800      	cmp	r0, #0
  40463a:	f040 82a4 	bne.w	404b86 <_dtoa_r+0x9de>
  40463e:	9b06      	ldr	r3, [sp, #24]
  404640:	9a06      	ldr	r2, [sp, #24]
  404642:	1c5d      	adds	r5, r3, #1
  404644:	2331      	movs	r3, #49	; 0x31
  404646:	7013      	strb	r3, [r2, #0]
  404648:	f10b 0b01 	add.w	fp, fp, #1
  40464c:	e29f      	b.n	404b8e <_dtoa_r+0x9e6>
  40464e:	07f2      	lsls	r2, r6, #31
  404650:	d505      	bpl.n	40465e <_dtoa_r+0x4b6>
  404652:	e9d7 2300 	ldrd	r2, r3, [r7]
  404656:	f7fe fc85 	bl	402f64 <__aeabi_dmul>
  40465a:	3501      	adds	r5, #1
  40465c:	2301      	movs	r3, #1
  40465e:	1076      	asrs	r6, r6, #1
  404660:	3708      	adds	r7, #8
  404662:	e76d      	b.n	404540 <_dtoa_r+0x398>
  404664:	2502      	movs	r5, #2
  404666:	e770      	b.n	40454a <_dtoa_r+0x3a2>
  404668:	465f      	mov	r7, fp
  40466a:	464e      	mov	r6, r9
  40466c:	e78f      	b.n	40458e <_dtoa_r+0x3e6>
  40466e:	9a06      	ldr	r2, [sp, #24]
  404670:	4b4e      	ldr	r3, [pc, #312]	; (4047ac <_dtoa_r+0x604>)
  404672:	4432      	add	r2, r6
  404674:	9211      	str	r2, [sp, #68]	; 0x44
  404676:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404678:	1e71      	subs	r1, r6, #1
  40467a:	2a00      	cmp	r2, #0
  40467c:	d048      	beq.n	404710 <_dtoa_r+0x568>
  40467e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  404682:	e9d3 2300 	ldrd	r2, r3, [r3]
  404686:	2000      	movs	r0, #0
  404688:	494e      	ldr	r1, [pc, #312]	; (4047c4 <_dtoa_r+0x61c>)
  40468a:	f7fe fd95 	bl	4031b8 <__aeabi_ddiv>
  40468e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404692:	f7fe fab3 	bl	402bfc <__aeabi_dsub>
  404696:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40469a:	9d06      	ldr	r5, [sp, #24]
  40469c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4046a0:	f7fe ff10 	bl	4034c4 <__aeabi_d2iz>
  4046a4:	4606      	mov	r6, r0
  4046a6:	f7fe fbf7 	bl	402e98 <__aeabi_i2d>
  4046aa:	4602      	mov	r2, r0
  4046ac:	460b      	mov	r3, r1
  4046ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4046b2:	f7fe faa3 	bl	402bfc <__aeabi_dsub>
  4046b6:	3630      	adds	r6, #48	; 0x30
  4046b8:	f805 6b01 	strb.w	r6, [r5], #1
  4046bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4046c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4046c4:	f7fe fec0 	bl	403448 <__aeabi_dcmplt>
  4046c8:	2800      	cmp	r0, #0
  4046ca:	d165      	bne.n	404798 <_dtoa_r+0x5f0>
  4046cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4046d0:	2000      	movs	r0, #0
  4046d2:	4938      	ldr	r1, [pc, #224]	; (4047b4 <_dtoa_r+0x60c>)
  4046d4:	f7fe fa92 	bl	402bfc <__aeabi_dsub>
  4046d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4046dc:	f7fe feb4 	bl	403448 <__aeabi_dcmplt>
  4046e0:	2800      	cmp	r0, #0
  4046e2:	f040 80b9 	bne.w	404858 <_dtoa_r+0x6b0>
  4046e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4046e8:	429d      	cmp	r5, r3
  4046ea:	f43f af7c 	beq.w	4045e6 <_dtoa_r+0x43e>
  4046ee:	2200      	movs	r2, #0
  4046f0:	4b31      	ldr	r3, [pc, #196]	; (4047b8 <_dtoa_r+0x610>)
  4046f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4046f6:	f7fe fc35 	bl	402f64 <__aeabi_dmul>
  4046fa:	2200      	movs	r2, #0
  4046fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404700:	4b2d      	ldr	r3, [pc, #180]	; (4047b8 <_dtoa_r+0x610>)
  404702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404706:	f7fe fc2d 	bl	402f64 <__aeabi_dmul>
  40470a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40470e:	e7c5      	b.n	40469c <_dtoa_r+0x4f4>
  404710:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404714:	e9d1 0100 	ldrd	r0, r1, [r1]
  404718:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40471c:	f7fe fc22 	bl	402f64 <__aeabi_dmul>
  404720:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404724:	9d06      	ldr	r5, [sp, #24]
  404726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40472a:	f7fe fecb 	bl	4034c4 <__aeabi_d2iz>
  40472e:	4606      	mov	r6, r0
  404730:	f7fe fbb2 	bl	402e98 <__aeabi_i2d>
  404734:	3630      	adds	r6, #48	; 0x30
  404736:	4602      	mov	r2, r0
  404738:	460b      	mov	r3, r1
  40473a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40473e:	f7fe fa5d 	bl	402bfc <__aeabi_dsub>
  404742:	f805 6b01 	strb.w	r6, [r5], #1
  404746:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404748:	42ab      	cmp	r3, r5
  40474a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40474e:	f04f 0200 	mov.w	r2, #0
  404752:	d125      	bne.n	4047a0 <_dtoa_r+0x5f8>
  404754:	4b1b      	ldr	r3, [pc, #108]	; (4047c4 <_dtoa_r+0x61c>)
  404756:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40475a:	f7fe fa51 	bl	402c00 <__adddf3>
  40475e:	4602      	mov	r2, r0
  404760:	460b      	mov	r3, r1
  404762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404766:	f7fe fe8d 	bl	403484 <__aeabi_dcmpgt>
  40476a:	2800      	cmp	r0, #0
  40476c:	d174      	bne.n	404858 <_dtoa_r+0x6b0>
  40476e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404772:	2000      	movs	r0, #0
  404774:	4913      	ldr	r1, [pc, #76]	; (4047c4 <_dtoa_r+0x61c>)
  404776:	f7fe fa41 	bl	402bfc <__aeabi_dsub>
  40477a:	4602      	mov	r2, r0
  40477c:	460b      	mov	r3, r1
  40477e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404782:	f7fe fe61 	bl	403448 <__aeabi_dcmplt>
  404786:	2800      	cmp	r0, #0
  404788:	f43f af2d 	beq.w	4045e6 <_dtoa_r+0x43e>
  40478c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404790:	2b30      	cmp	r3, #48	; 0x30
  404792:	f105 32ff 	add.w	r2, r5, #4294967295
  404796:	d001      	beq.n	40479c <_dtoa_r+0x5f4>
  404798:	46bb      	mov	fp, r7
  40479a:	e04c      	b.n	404836 <_dtoa_r+0x68e>
  40479c:	4615      	mov	r5, r2
  40479e:	e7f5      	b.n	40478c <_dtoa_r+0x5e4>
  4047a0:	4b05      	ldr	r3, [pc, #20]	; (4047b8 <_dtoa_r+0x610>)
  4047a2:	f7fe fbdf 	bl	402f64 <__aeabi_dmul>
  4047a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4047aa:	e7bc      	b.n	404726 <_dtoa_r+0x57e>
  4047ac:	004065c8 	.word	0x004065c8
  4047b0:	004065a0 	.word	0x004065a0
  4047b4:	3ff00000 	.word	0x3ff00000
  4047b8:	40240000 	.word	0x40240000
  4047bc:	401c0000 	.word	0x401c0000
  4047c0:	40140000 	.word	0x40140000
  4047c4:	3fe00000 	.word	0x3fe00000
  4047c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4047cc:	9d06      	ldr	r5, [sp, #24]
  4047ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4047d2:	4630      	mov	r0, r6
  4047d4:	4639      	mov	r1, r7
  4047d6:	f7fe fcef 	bl	4031b8 <__aeabi_ddiv>
  4047da:	f7fe fe73 	bl	4034c4 <__aeabi_d2iz>
  4047de:	4680      	mov	r8, r0
  4047e0:	f7fe fb5a 	bl	402e98 <__aeabi_i2d>
  4047e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4047e8:	f7fe fbbc 	bl	402f64 <__aeabi_dmul>
  4047ec:	4602      	mov	r2, r0
  4047ee:	460b      	mov	r3, r1
  4047f0:	4630      	mov	r0, r6
  4047f2:	4639      	mov	r1, r7
  4047f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
  4047f8:	f7fe fa00 	bl	402bfc <__aeabi_dsub>
  4047fc:	f805 6b01 	strb.w	r6, [r5], #1
  404800:	9e06      	ldr	r6, [sp, #24]
  404802:	1bae      	subs	r6, r5, r6
  404804:	45b1      	cmp	r9, r6
  404806:	4602      	mov	r2, r0
  404808:	460b      	mov	r3, r1
  40480a:	d138      	bne.n	40487e <_dtoa_r+0x6d6>
  40480c:	f7fe f9f8 	bl	402c00 <__adddf3>
  404810:	4606      	mov	r6, r0
  404812:	460f      	mov	r7, r1
  404814:	4602      	mov	r2, r0
  404816:	460b      	mov	r3, r1
  404818:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40481c:	f7fe fe14 	bl	403448 <__aeabi_dcmplt>
  404820:	b9c8      	cbnz	r0, 404856 <_dtoa_r+0x6ae>
  404822:	4632      	mov	r2, r6
  404824:	463b      	mov	r3, r7
  404826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40482a:	f7fe fe03 	bl	403434 <__aeabi_dcmpeq>
  40482e:	b110      	cbz	r0, 404836 <_dtoa_r+0x68e>
  404830:	f018 0f01 	tst.w	r8, #1
  404834:	d10f      	bne.n	404856 <_dtoa_r+0x6ae>
  404836:	4651      	mov	r1, sl
  404838:	4620      	mov	r0, r4
  40483a:	f000 fd05 	bl	405248 <_Bfree>
  40483e:	2300      	movs	r3, #0
  404840:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404842:	702b      	strb	r3, [r5, #0]
  404844:	f10b 0301 	add.w	r3, fp, #1
  404848:	6013      	str	r3, [r2, #0]
  40484a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40484c:	2b00      	cmp	r3, #0
  40484e:	f43f acf0 	beq.w	404232 <_dtoa_r+0x8a>
  404852:	601d      	str	r5, [r3, #0]
  404854:	e4ed      	b.n	404232 <_dtoa_r+0x8a>
  404856:	465f      	mov	r7, fp
  404858:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40485c:	2a39      	cmp	r2, #57	; 0x39
  40485e:	f105 33ff 	add.w	r3, r5, #4294967295
  404862:	d106      	bne.n	404872 <_dtoa_r+0x6ca>
  404864:	9a06      	ldr	r2, [sp, #24]
  404866:	429a      	cmp	r2, r3
  404868:	d107      	bne.n	40487a <_dtoa_r+0x6d2>
  40486a:	2330      	movs	r3, #48	; 0x30
  40486c:	7013      	strb	r3, [r2, #0]
  40486e:	3701      	adds	r7, #1
  404870:	4613      	mov	r3, r2
  404872:	781a      	ldrb	r2, [r3, #0]
  404874:	3201      	adds	r2, #1
  404876:	701a      	strb	r2, [r3, #0]
  404878:	e78e      	b.n	404798 <_dtoa_r+0x5f0>
  40487a:	461d      	mov	r5, r3
  40487c:	e7ec      	b.n	404858 <_dtoa_r+0x6b0>
  40487e:	2200      	movs	r2, #0
  404880:	4bb4      	ldr	r3, [pc, #720]	; (404b54 <_dtoa_r+0x9ac>)
  404882:	f7fe fb6f 	bl	402f64 <__aeabi_dmul>
  404886:	2200      	movs	r2, #0
  404888:	2300      	movs	r3, #0
  40488a:	4606      	mov	r6, r0
  40488c:	460f      	mov	r7, r1
  40488e:	f7fe fdd1 	bl	403434 <__aeabi_dcmpeq>
  404892:	2800      	cmp	r0, #0
  404894:	d09b      	beq.n	4047ce <_dtoa_r+0x626>
  404896:	e7ce      	b.n	404836 <_dtoa_r+0x68e>
  404898:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40489a:	2a00      	cmp	r2, #0
  40489c:	f000 8129 	beq.w	404af2 <_dtoa_r+0x94a>
  4048a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4048a2:	2a01      	cmp	r2, #1
  4048a4:	f300 810e 	bgt.w	404ac4 <_dtoa_r+0x91c>
  4048a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4048aa:	2a00      	cmp	r2, #0
  4048ac:	f000 8106 	beq.w	404abc <_dtoa_r+0x914>
  4048b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4048b4:	9e08      	ldr	r6, [sp, #32]
  4048b6:	4645      	mov	r5, r8
  4048b8:	9a07      	ldr	r2, [sp, #28]
  4048ba:	2101      	movs	r1, #1
  4048bc:	441a      	add	r2, r3
  4048be:	4620      	mov	r0, r4
  4048c0:	4498      	add	r8, r3
  4048c2:	9207      	str	r2, [sp, #28]
  4048c4:	f000 fd60 	bl	405388 <__i2b>
  4048c8:	4607      	mov	r7, r0
  4048ca:	2d00      	cmp	r5, #0
  4048cc:	dd0b      	ble.n	4048e6 <_dtoa_r+0x73e>
  4048ce:	9b07      	ldr	r3, [sp, #28]
  4048d0:	2b00      	cmp	r3, #0
  4048d2:	dd08      	ble.n	4048e6 <_dtoa_r+0x73e>
  4048d4:	42ab      	cmp	r3, r5
  4048d6:	9a07      	ldr	r2, [sp, #28]
  4048d8:	bfa8      	it	ge
  4048da:	462b      	movge	r3, r5
  4048dc:	eba8 0803 	sub.w	r8, r8, r3
  4048e0:	1aed      	subs	r5, r5, r3
  4048e2:	1ad3      	subs	r3, r2, r3
  4048e4:	9307      	str	r3, [sp, #28]
  4048e6:	9b08      	ldr	r3, [sp, #32]
  4048e8:	b1fb      	cbz	r3, 40492a <_dtoa_r+0x782>
  4048ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4048ec:	2b00      	cmp	r3, #0
  4048ee:	f000 8104 	beq.w	404afa <_dtoa_r+0x952>
  4048f2:	2e00      	cmp	r6, #0
  4048f4:	dd11      	ble.n	40491a <_dtoa_r+0x772>
  4048f6:	4639      	mov	r1, r7
  4048f8:	4632      	mov	r2, r6
  4048fa:	4620      	mov	r0, r4
  4048fc:	f000 fdda 	bl	4054b4 <__pow5mult>
  404900:	4652      	mov	r2, sl
  404902:	4601      	mov	r1, r0
  404904:	4607      	mov	r7, r0
  404906:	4620      	mov	r0, r4
  404908:	f000 fd47 	bl	40539a <__multiply>
  40490c:	4651      	mov	r1, sl
  40490e:	900a      	str	r0, [sp, #40]	; 0x28
  404910:	4620      	mov	r0, r4
  404912:	f000 fc99 	bl	405248 <_Bfree>
  404916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404918:	469a      	mov	sl, r3
  40491a:	9b08      	ldr	r3, [sp, #32]
  40491c:	1b9a      	subs	r2, r3, r6
  40491e:	d004      	beq.n	40492a <_dtoa_r+0x782>
  404920:	4651      	mov	r1, sl
  404922:	4620      	mov	r0, r4
  404924:	f000 fdc6 	bl	4054b4 <__pow5mult>
  404928:	4682      	mov	sl, r0
  40492a:	2101      	movs	r1, #1
  40492c:	4620      	mov	r0, r4
  40492e:	f000 fd2b 	bl	405388 <__i2b>
  404932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404934:	2b00      	cmp	r3, #0
  404936:	4606      	mov	r6, r0
  404938:	f340 80e1 	ble.w	404afe <_dtoa_r+0x956>
  40493c:	461a      	mov	r2, r3
  40493e:	4601      	mov	r1, r0
  404940:	4620      	mov	r0, r4
  404942:	f000 fdb7 	bl	4054b4 <__pow5mult>
  404946:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404948:	2b01      	cmp	r3, #1
  40494a:	4606      	mov	r6, r0
  40494c:	f340 80da 	ble.w	404b04 <_dtoa_r+0x95c>
  404950:	2300      	movs	r3, #0
  404952:	9308      	str	r3, [sp, #32]
  404954:	6933      	ldr	r3, [r6, #16]
  404956:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  40495a:	6918      	ldr	r0, [r3, #16]
  40495c:	f000 fcc6 	bl	4052ec <__hi0bits>
  404960:	f1c0 0020 	rsb	r0, r0, #32
  404964:	9b07      	ldr	r3, [sp, #28]
  404966:	4418      	add	r0, r3
  404968:	f010 001f 	ands.w	r0, r0, #31
  40496c:	f000 80f0 	beq.w	404b50 <_dtoa_r+0x9a8>
  404970:	f1c0 0320 	rsb	r3, r0, #32
  404974:	2b04      	cmp	r3, #4
  404976:	f340 80e2 	ble.w	404b3e <_dtoa_r+0x996>
  40497a:	9b07      	ldr	r3, [sp, #28]
  40497c:	f1c0 001c 	rsb	r0, r0, #28
  404980:	4480      	add	r8, r0
  404982:	4405      	add	r5, r0
  404984:	4403      	add	r3, r0
  404986:	9307      	str	r3, [sp, #28]
  404988:	f1b8 0f00 	cmp.w	r8, #0
  40498c:	dd05      	ble.n	40499a <_dtoa_r+0x7f2>
  40498e:	4651      	mov	r1, sl
  404990:	4642      	mov	r2, r8
  404992:	4620      	mov	r0, r4
  404994:	f000 fddc 	bl	405550 <__lshift>
  404998:	4682      	mov	sl, r0
  40499a:	9b07      	ldr	r3, [sp, #28]
  40499c:	2b00      	cmp	r3, #0
  40499e:	dd05      	ble.n	4049ac <_dtoa_r+0x804>
  4049a0:	4631      	mov	r1, r6
  4049a2:	461a      	mov	r2, r3
  4049a4:	4620      	mov	r0, r4
  4049a6:	f000 fdd3 	bl	405550 <__lshift>
  4049aa:	4606      	mov	r6, r0
  4049ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4049ae:	2b00      	cmp	r3, #0
  4049b0:	f000 80d2 	beq.w	404b58 <_dtoa_r+0x9b0>
  4049b4:	4631      	mov	r1, r6
  4049b6:	4650      	mov	r0, sl
  4049b8:	f000 fe1b 	bl	4055f2 <__mcmp>
  4049bc:	2800      	cmp	r0, #0
  4049be:	f280 80cb 	bge.w	404b58 <_dtoa_r+0x9b0>
  4049c2:	2300      	movs	r3, #0
  4049c4:	4651      	mov	r1, sl
  4049c6:	220a      	movs	r2, #10
  4049c8:	4620      	mov	r0, r4
  4049ca:	f000 fc54 	bl	405276 <__multadd>
  4049ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4049d0:	f10b 3bff 	add.w	fp, fp, #4294967295
  4049d4:	4682      	mov	sl, r0
  4049d6:	2b00      	cmp	r3, #0
  4049d8:	f000 81aa 	beq.w	404d30 <_dtoa_r+0xb88>
  4049dc:	2300      	movs	r3, #0
  4049de:	4639      	mov	r1, r7
  4049e0:	220a      	movs	r2, #10
  4049e2:	4620      	mov	r0, r4
  4049e4:	f000 fc47 	bl	405276 <__multadd>
  4049e8:	9b04      	ldr	r3, [sp, #16]
  4049ea:	2b00      	cmp	r3, #0
  4049ec:	4607      	mov	r7, r0
  4049ee:	dc03      	bgt.n	4049f8 <_dtoa_r+0x850>
  4049f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4049f2:	2b02      	cmp	r3, #2
  4049f4:	f300 80b8 	bgt.w	404b68 <_dtoa_r+0x9c0>
  4049f8:	2d00      	cmp	r5, #0
  4049fa:	dd05      	ble.n	404a08 <_dtoa_r+0x860>
  4049fc:	4639      	mov	r1, r7
  4049fe:	462a      	mov	r2, r5
  404a00:	4620      	mov	r0, r4
  404a02:	f000 fda5 	bl	405550 <__lshift>
  404a06:	4607      	mov	r7, r0
  404a08:	9b08      	ldr	r3, [sp, #32]
  404a0a:	2b00      	cmp	r3, #0
  404a0c:	f000 8110 	beq.w	404c30 <_dtoa_r+0xa88>
  404a10:	6879      	ldr	r1, [r7, #4]
  404a12:	4620      	mov	r0, r4
  404a14:	f000 fbe4 	bl	4051e0 <_Balloc>
  404a18:	693a      	ldr	r2, [r7, #16]
  404a1a:	3202      	adds	r2, #2
  404a1c:	4605      	mov	r5, r0
  404a1e:	0092      	lsls	r2, r2, #2
  404a20:	f107 010c 	add.w	r1, r7, #12
  404a24:	300c      	adds	r0, #12
  404a26:	f7fe fde9 	bl	4035fc <memcpy>
  404a2a:	2201      	movs	r2, #1
  404a2c:	4629      	mov	r1, r5
  404a2e:	4620      	mov	r0, r4
  404a30:	f000 fd8e 	bl	405550 <__lshift>
  404a34:	9b02      	ldr	r3, [sp, #8]
  404a36:	f8dd 8018 	ldr.w	r8, [sp, #24]
  404a3a:	9707      	str	r7, [sp, #28]
  404a3c:	f003 0301 	and.w	r3, r3, #1
  404a40:	4607      	mov	r7, r0
  404a42:	9308      	str	r3, [sp, #32]
  404a44:	4631      	mov	r1, r6
  404a46:	4650      	mov	r0, sl
  404a48:	f7ff fb20 	bl	40408c <quorem>
  404a4c:	9907      	ldr	r1, [sp, #28]
  404a4e:	4605      	mov	r5, r0
  404a50:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404a54:	4650      	mov	r0, sl
  404a56:	f000 fdcc 	bl	4055f2 <__mcmp>
  404a5a:	463a      	mov	r2, r7
  404a5c:	9002      	str	r0, [sp, #8]
  404a5e:	4631      	mov	r1, r6
  404a60:	4620      	mov	r0, r4
  404a62:	f000 fde0 	bl	405626 <__mdiff>
  404a66:	68c3      	ldr	r3, [r0, #12]
  404a68:	4602      	mov	r2, r0
  404a6a:	2b00      	cmp	r3, #0
  404a6c:	f040 80e2 	bne.w	404c34 <_dtoa_r+0xa8c>
  404a70:	4601      	mov	r1, r0
  404a72:	9009      	str	r0, [sp, #36]	; 0x24
  404a74:	4650      	mov	r0, sl
  404a76:	f000 fdbc 	bl	4055f2 <__mcmp>
  404a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404a7c:	4603      	mov	r3, r0
  404a7e:	4611      	mov	r1, r2
  404a80:	4620      	mov	r0, r4
  404a82:	9309      	str	r3, [sp, #36]	; 0x24
  404a84:	f000 fbe0 	bl	405248 <_Bfree>
  404a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404a8a:	2b00      	cmp	r3, #0
  404a8c:	f040 80d4 	bne.w	404c38 <_dtoa_r+0xa90>
  404a90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404a92:	2a00      	cmp	r2, #0
  404a94:	f040 80d0 	bne.w	404c38 <_dtoa_r+0xa90>
  404a98:	9a08      	ldr	r2, [sp, #32]
  404a9a:	2a00      	cmp	r2, #0
  404a9c:	f040 80cc 	bne.w	404c38 <_dtoa_r+0xa90>
  404aa0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404aa4:	f000 80e8 	beq.w	404c78 <_dtoa_r+0xad0>
  404aa8:	9b02      	ldr	r3, [sp, #8]
  404aaa:	2b00      	cmp	r3, #0
  404aac:	dd01      	ble.n	404ab2 <_dtoa_r+0x90a>
  404aae:	f105 0931 	add.w	r9, r5, #49	; 0x31
  404ab2:	f108 0501 	add.w	r5, r8, #1
  404ab6:	f888 9000 	strb.w	r9, [r8]
  404aba:	e06a      	b.n	404b92 <_dtoa_r+0x9ea>
  404abc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404abe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404ac2:	e6f7      	b.n	4048b4 <_dtoa_r+0x70c>
  404ac4:	9b08      	ldr	r3, [sp, #32]
  404ac6:	f109 36ff 	add.w	r6, r9, #4294967295
  404aca:	42b3      	cmp	r3, r6
  404acc:	bfbf      	itttt	lt
  404ace:	9b08      	ldrlt	r3, [sp, #32]
  404ad0:	9608      	strlt	r6, [sp, #32]
  404ad2:	1af2      	sublt	r2, r6, r3
  404ad4:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  404ad6:	bfb7      	itett	lt
  404ad8:	189b      	addlt	r3, r3, r2
  404ada:	1b9e      	subge	r6, r3, r6
  404adc:	930c      	strlt	r3, [sp, #48]	; 0x30
  404ade:	2600      	movlt	r6, #0
  404ae0:	f1b9 0f00 	cmp.w	r9, #0
  404ae4:	bfb9      	ittee	lt
  404ae6:	eba8 0509 	sublt.w	r5, r8, r9
  404aea:	2300      	movlt	r3, #0
  404aec:	4645      	movge	r5, r8
  404aee:	464b      	movge	r3, r9
  404af0:	e6e2      	b.n	4048b8 <_dtoa_r+0x710>
  404af2:	9e08      	ldr	r6, [sp, #32]
  404af4:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404af6:	4645      	mov	r5, r8
  404af8:	e6e7      	b.n	4048ca <_dtoa_r+0x722>
  404afa:	9a08      	ldr	r2, [sp, #32]
  404afc:	e710      	b.n	404920 <_dtoa_r+0x778>
  404afe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404b00:	2b01      	cmp	r3, #1
  404b02:	dc18      	bgt.n	404b36 <_dtoa_r+0x98e>
  404b04:	9b02      	ldr	r3, [sp, #8]
  404b06:	b9b3      	cbnz	r3, 404b36 <_dtoa_r+0x98e>
  404b08:	9b03      	ldr	r3, [sp, #12]
  404b0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  404b0e:	b9a3      	cbnz	r3, 404b3a <_dtoa_r+0x992>
  404b10:	9b03      	ldr	r3, [sp, #12]
  404b12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  404b16:	0d1b      	lsrs	r3, r3, #20
  404b18:	051b      	lsls	r3, r3, #20
  404b1a:	b12b      	cbz	r3, 404b28 <_dtoa_r+0x980>
  404b1c:	9b07      	ldr	r3, [sp, #28]
  404b1e:	3301      	adds	r3, #1
  404b20:	9307      	str	r3, [sp, #28]
  404b22:	f108 0801 	add.w	r8, r8, #1
  404b26:	2301      	movs	r3, #1
  404b28:	9308      	str	r3, [sp, #32]
  404b2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404b2c:	2b00      	cmp	r3, #0
  404b2e:	f47f af11 	bne.w	404954 <_dtoa_r+0x7ac>
  404b32:	2001      	movs	r0, #1
  404b34:	e716      	b.n	404964 <_dtoa_r+0x7bc>
  404b36:	2300      	movs	r3, #0
  404b38:	e7f6      	b.n	404b28 <_dtoa_r+0x980>
  404b3a:	9b02      	ldr	r3, [sp, #8]
  404b3c:	e7f4      	b.n	404b28 <_dtoa_r+0x980>
  404b3e:	f43f af23 	beq.w	404988 <_dtoa_r+0x7e0>
  404b42:	9a07      	ldr	r2, [sp, #28]
  404b44:	331c      	adds	r3, #28
  404b46:	441a      	add	r2, r3
  404b48:	4498      	add	r8, r3
  404b4a:	441d      	add	r5, r3
  404b4c:	4613      	mov	r3, r2
  404b4e:	e71a      	b.n	404986 <_dtoa_r+0x7de>
  404b50:	4603      	mov	r3, r0
  404b52:	e7f6      	b.n	404b42 <_dtoa_r+0x99a>
  404b54:	40240000 	.word	0x40240000
  404b58:	f1b9 0f00 	cmp.w	r9, #0
  404b5c:	dc33      	bgt.n	404bc6 <_dtoa_r+0xa1e>
  404b5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404b60:	2b02      	cmp	r3, #2
  404b62:	dd30      	ble.n	404bc6 <_dtoa_r+0xa1e>
  404b64:	f8cd 9010 	str.w	r9, [sp, #16]
  404b68:	9b04      	ldr	r3, [sp, #16]
  404b6a:	b963      	cbnz	r3, 404b86 <_dtoa_r+0x9de>
  404b6c:	4631      	mov	r1, r6
  404b6e:	2205      	movs	r2, #5
  404b70:	4620      	mov	r0, r4
  404b72:	f000 fb80 	bl	405276 <__multadd>
  404b76:	4601      	mov	r1, r0
  404b78:	4606      	mov	r6, r0
  404b7a:	4650      	mov	r0, sl
  404b7c:	f000 fd39 	bl	4055f2 <__mcmp>
  404b80:	2800      	cmp	r0, #0
  404b82:	f73f ad5c 	bgt.w	40463e <_dtoa_r+0x496>
  404b86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404b88:	9d06      	ldr	r5, [sp, #24]
  404b8a:	ea6f 0b03 	mvn.w	fp, r3
  404b8e:	2300      	movs	r3, #0
  404b90:	9307      	str	r3, [sp, #28]
  404b92:	4631      	mov	r1, r6
  404b94:	4620      	mov	r0, r4
  404b96:	f000 fb57 	bl	405248 <_Bfree>
  404b9a:	2f00      	cmp	r7, #0
  404b9c:	f43f ae4b 	beq.w	404836 <_dtoa_r+0x68e>
  404ba0:	9b07      	ldr	r3, [sp, #28]
  404ba2:	b12b      	cbz	r3, 404bb0 <_dtoa_r+0xa08>
  404ba4:	42bb      	cmp	r3, r7
  404ba6:	d003      	beq.n	404bb0 <_dtoa_r+0xa08>
  404ba8:	4619      	mov	r1, r3
  404baa:	4620      	mov	r0, r4
  404bac:	f000 fb4c 	bl	405248 <_Bfree>
  404bb0:	4639      	mov	r1, r7
  404bb2:	4620      	mov	r0, r4
  404bb4:	f000 fb48 	bl	405248 <_Bfree>
  404bb8:	e63d      	b.n	404836 <_dtoa_r+0x68e>
  404bba:	2600      	movs	r6, #0
  404bbc:	4637      	mov	r7, r6
  404bbe:	e7e2      	b.n	404b86 <_dtoa_r+0x9de>
  404bc0:	46bb      	mov	fp, r7
  404bc2:	4637      	mov	r7, r6
  404bc4:	e53b      	b.n	40463e <_dtoa_r+0x496>
  404bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404bc8:	f8cd 9010 	str.w	r9, [sp, #16]
  404bcc:	2b00      	cmp	r3, #0
  404bce:	f47f af13 	bne.w	4049f8 <_dtoa_r+0x850>
  404bd2:	9d06      	ldr	r5, [sp, #24]
  404bd4:	4631      	mov	r1, r6
  404bd6:	4650      	mov	r0, sl
  404bd8:	f7ff fa58 	bl	40408c <quorem>
  404bdc:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404be0:	f805 9b01 	strb.w	r9, [r5], #1
  404be4:	9b06      	ldr	r3, [sp, #24]
  404be6:	9a04      	ldr	r2, [sp, #16]
  404be8:	1aeb      	subs	r3, r5, r3
  404bea:	429a      	cmp	r2, r3
  404bec:	f300 8083 	bgt.w	404cf6 <_dtoa_r+0xb4e>
  404bf0:	9b06      	ldr	r3, [sp, #24]
  404bf2:	2a01      	cmp	r2, #1
  404bf4:	bfac      	ite	ge
  404bf6:	189b      	addge	r3, r3, r2
  404bf8:	3301      	addlt	r3, #1
  404bfa:	4698      	mov	r8, r3
  404bfc:	2300      	movs	r3, #0
  404bfe:	9307      	str	r3, [sp, #28]
  404c00:	4651      	mov	r1, sl
  404c02:	2201      	movs	r2, #1
  404c04:	4620      	mov	r0, r4
  404c06:	f000 fca3 	bl	405550 <__lshift>
  404c0a:	4631      	mov	r1, r6
  404c0c:	4682      	mov	sl, r0
  404c0e:	f000 fcf0 	bl	4055f2 <__mcmp>
  404c12:	2800      	cmp	r0, #0
  404c14:	dc35      	bgt.n	404c82 <_dtoa_r+0xada>
  404c16:	d102      	bne.n	404c1e <_dtoa_r+0xa76>
  404c18:	f019 0f01 	tst.w	r9, #1
  404c1c:	d131      	bne.n	404c82 <_dtoa_r+0xada>
  404c1e:	4645      	mov	r5, r8
  404c20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404c24:	2b30      	cmp	r3, #48	; 0x30
  404c26:	f105 32ff 	add.w	r2, r5, #4294967295
  404c2a:	d1b2      	bne.n	404b92 <_dtoa_r+0x9ea>
  404c2c:	4615      	mov	r5, r2
  404c2e:	e7f7      	b.n	404c20 <_dtoa_r+0xa78>
  404c30:	4638      	mov	r0, r7
  404c32:	e6ff      	b.n	404a34 <_dtoa_r+0x88c>
  404c34:	2301      	movs	r3, #1
  404c36:	e722      	b.n	404a7e <_dtoa_r+0x8d6>
  404c38:	9a02      	ldr	r2, [sp, #8]
  404c3a:	2a00      	cmp	r2, #0
  404c3c:	db04      	blt.n	404c48 <_dtoa_r+0xaa0>
  404c3e:	d129      	bne.n	404c94 <_dtoa_r+0xaec>
  404c40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404c42:	bb3a      	cbnz	r2, 404c94 <_dtoa_r+0xaec>
  404c44:	9a08      	ldr	r2, [sp, #32]
  404c46:	bb2a      	cbnz	r2, 404c94 <_dtoa_r+0xaec>
  404c48:	2b00      	cmp	r3, #0
  404c4a:	f77f af32 	ble.w	404ab2 <_dtoa_r+0x90a>
  404c4e:	4651      	mov	r1, sl
  404c50:	2201      	movs	r2, #1
  404c52:	4620      	mov	r0, r4
  404c54:	f000 fc7c 	bl	405550 <__lshift>
  404c58:	4631      	mov	r1, r6
  404c5a:	4682      	mov	sl, r0
  404c5c:	f000 fcc9 	bl	4055f2 <__mcmp>
  404c60:	2800      	cmp	r0, #0
  404c62:	dc05      	bgt.n	404c70 <_dtoa_r+0xac8>
  404c64:	f47f af25 	bne.w	404ab2 <_dtoa_r+0x90a>
  404c68:	f019 0f01 	tst.w	r9, #1
  404c6c:	f43f af21 	beq.w	404ab2 <_dtoa_r+0x90a>
  404c70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404c74:	f47f af1b 	bne.w	404aae <_dtoa_r+0x906>
  404c78:	2339      	movs	r3, #57	; 0x39
  404c7a:	f888 3000 	strb.w	r3, [r8]
  404c7e:	f108 0801 	add.w	r8, r8, #1
  404c82:	4645      	mov	r5, r8
  404c84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404c88:	2b39      	cmp	r3, #57	; 0x39
  404c8a:	f105 32ff 	add.w	r2, r5, #4294967295
  404c8e:	d03a      	beq.n	404d06 <_dtoa_r+0xb5e>
  404c90:	3301      	adds	r3, #1
  404c92:	e03f      	b.n	404d14 <_dtoa_r+0xb6c>
  404c94:	2b00      	cmp	r3, #0
  404c96:	f108 0501 	add.w	r5, r8, #1
  404c9a:	dd05      	ble.n	404ca8 <_dtoa_r+0xb00>
  404c9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404ca0:	d0ea      	beq.n	404c78 <_dtoa_r+0xad0>
  404ca2:	f109 0901 	add.w	r9, r9, #1
  404ca6:	e706      	b.n	404ab6 <_dtoa_r+0x90e>
  404ca8:	9b06      	ldr	r3, [sp, #24]
  404caa:	9a04      	ldr	r2, [sp, #16]
  404cac:	f805 9c01 	strb.w	r9, [r5, #-1]
  404cb0:	1aeb      	subs	r3, r5, r3
  404cb2:	4293      	cmp	r3, r2
  404cb4:	46a8      	mov	r8, r5
  404cb6:	d0a3      	beq.n	404c00 <_dtoa_r+0xa58>
  404cb8:	4651      	mov	r1, sl
  404cba:	2300      	movs	r3, #0
  404cbc:	220a      	movs	r2, #10
  404cbe:	4620      	mov	r0, r4
  404cc0:	f000 fad9 	bl	405276 <__multadd>
  404cc4:	9b07      	ldr	r3, [sp, #28]
  404cc6:	9907      	ldr	r1, [sp, #28]
  404cc8:	42bb      	cmp	r3, r7
  404cca:	4682      	mov	sl, r0
  404ccc:	f04f 0300 	mov.w	r3, #0
  404cd0:	f04f 020a 	mov.w	r2, #10
  404cd4:	4620      	mov	r0, r4
  404cd6:	d104      	bne.n	404ce2 <_dtoa_r+0xb3a>
  404cd8:	f000 facd 	bl	405276 <__multadd>
  404cdc:	9007      	str	r0, [sp, #28]
  404cde:	4607      	mov	r7, r0
  404ce0:	e6b0      	b.n	404a44 <_dtoa_r+0x89c>
  404ce2:	f000 fac8 	bl	405276 <__multadd>
  404ce6:	2300      	movs	r3, #0
  404ce8:	9007      	str	r0, [sp, #28]
  404cea:	220a      	movs	r2, #10
  404cec:	4639      	mov	r1, r7
  404cee:	4620      	mov	r0, r4
  404cf0:	f000 fac1 	bl	405276 <__multadd>
  404cf4:	e7f3      	b.n	404cde <_dtoa_r+0xb36>
  404cf6:	4651      	mov	r1, sl
  404cf8:	2300      	movs	r3, #0
  404cfa:	220a      	movs	r2, #10
  404cfc:	4620      	mov	r0, r4
  404cfe:	f000 faba 	bl	405276 <__multadd>
  404d02:	4682      	mov	sl, r0
  404d04:	e766      	b.n	404bd4 <_dtoa_r+0xa2c>
  404d06:	9b06      	ldr	r3, [sp, #24]
  404d08:	4293      	cmp	r3, r2
  404d0a:	d105      	bne.n	404d18 <_dtoa_r+0xb70>
  404d0c:	9a06      	ldr	r2, [sp, #24]
  404d0e:	f10b 0b01 	add.w	fp, fp, #1
  404d12:	2331      	movs	r3, #49	; 0x31
  404d14:	7013      	strb	r3, [r2, #0]
  404d16:	e73c      	b.n	404b92 <_dtoa_r+0x9ea>
  404d18:	4615      	mov	r5, r2
  404d1a:	e7b3      	b.n	404c84 <_dtoa_r+0xadc>
  404d1c:	4b09      	ldr	r3, [pc, #36]	; (404d44 <_dtoa_r+0xb9c>)
  404d1e:	f7ff baa5 	b.w	40426c <_dtoa_r+0xc4>
  404d22:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404d24:	2b00      	cmp	r3, #0
  404d26:	f47f aa7f 	bne.w	404228 <_dtoa_r+0x80>
  404d2a:	4b07      	ldr	r3, [pc, #28]	; (404d48 <_dtoa_r+0xba0>)
  404d2c:	f7ff ba9e 	b.w	40426c <_dtoa_r+0xc4>
  404d30:	9b04      	ldr	r3, [sp, #16]
  404d32:	2b00      	cmp	r3, #0
  404d34:	f73f af4d 	bgt.w	404bd2 <_dtoa_r+0xa2a>
  404d38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404d3a:	2b02      	cmp	r3, #2
  404d3c:	f77f af49 	ble.w	404bd2 <_dtoa_r+0xa2a>
  404d40:	e712      	b.n	404b68 <_dtoa_r+0x9c0>
  404d42:	bf00      	nop
  404d44:	0040650c 	.word	0x0040650c
  404d48:	00406530 	.word	0x00406530

00404d4c <__sflush_r>:
  404d4c:	898a      	ldrh	r2, [r1, #12]
  404d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d52:	4605      	mov	r5, r0
  404d54:	0710      	lsls	r0, r2, #28
  404d56:	460c      	mov	r4, r1
  404d58:	d45a      	bmi.n	404e10 <__sflush_r+0xc4>
  404d5a:	684b      	ldr	r3, [r1, #4]
  404d5c:	2b00      	cmp	r3, #0
  404d5e:	dc05      	bgt.n	404d6c <__sflush_r+0x20>
  404d60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  404d62:	2b00      	cmp	r3, #0
  404d64:	dc02      	bgt.n	404d6c <__sflush_r+0x20>
  404d66:	2000      	movs	r0, #0
  404d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404d6e:	2e00      	cmp	r6, #0
  404d70:	d0f9      	beq.n	404d66 <__sflush_r+0x1a>
  404d72:	2300      	movs	r3, #0
  404d74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  404d78:	682f      	ldr	r7, [r5, #0]
  404d7a:	602b      	str	r3, [r5, #0]
  404d7c:	d033      	beq.n	404de6 <__sflush_r+0x9a>
  404d7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  404d80:	89a3      	ldrh	r3, [r4, #12]
  404d82:	075a      	lsls	r2, r3, #29
  404d84:	d505      	bpl.n	404d92 <__sflush_r+0x46>
  404d86:	6863      	ldr	r3, [r4, #4]
  404d88:	1ac0      	subs	r0, r0, r3
  404d8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  404d8c:	b10b      	cbz	r3, 404d92 <__sflush_r+0x46>
  404d8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  404d90:	1ac0      	subs	r0, r0, r3
  404d92:	2300      	movs	r3, #0
  404d94:	4602      	mov	r2, r0
  404d96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404d98:	6a21      	ldr	r1, [r4, #32]
  404d9a:	4628      	mov	r0, r5
  404d9c:	47b0      	blx	r6
  404d9e:	1c43      	adds	r3, r0, #1
  404da0:	89a3      	ldrh	r3, [r4, #12]
  404da2:	d106      	bne.n	404db2 <__sflush_r+0x66>
  404da4:	6829      	ldr	r1, [r5, #0]
  404da6:	291d      	cmp	r1, #29
  404da8:	d84b      	bhi.n	404e42 <__sflush_r+0xf6>
  404daa:	4a2b      	ldr	r2, [pc, #172]	; (404e58 <__sflush_r+0x10c>)
  404dac:	40ca      	lsrs	r2, r1
  404dae:	07d6      	lsls	r6, r2, #31
  404db0:	d547      	bpl.n	404e42 <__sflush_r+0xf6>
  404db2:	2200      	movs	r2, #0
  404db4:	6062      	str	r2, [r4, #4]
  404db6:	04d9      	lsls	r1, r3, #19
  404db8:	6922      	ldr	r2, [r4, #16]
  404dba:	6022      	str	r2, [r4, #0]
  404dbc:	d504      	bpl.n	404dc8 <__sflush_r+0x7c>
  404dbe:	1c42      	adds	r2, r0, #1
  404dc0:	d101      	bne.n	404dc6 <__sflush_r+0x7a>
  404dc2:	682b      	ldr	r3, [r5, #0]
  404dc4:	b903      	cbnz	r3, 404dc8 <__sflush_r+0x7c>
  404dc6:	6560      	str	r0, [r4, #84]	; 0x54
  404dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  404dca:	602f      	str	r7, [r5, #0]
  404dcc:	2900      	cmp	r1, #0
  404dce:	d0ca      	beq.n	404d66 <__sflush_r+0x1a>
  404dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404dd4:	4299      	cmp	r1, r3
  404dd6:	d002      	beq.n	404dde <__sflush_r+0x92>
  404dd8:	4628      	mov	r0, r5
  404dda:	f000 fcdf 	bl	40579c <_free_r>
  404dde:	2000      	movs	r0, #0
  404de0:	6360      	str	r0, [r4, #52]	; 0x34
  404de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404de6:	6a21      	ldr	r1, [r4, #32]
  404de8:	2301      	movs	r3, #1
  404dea:	4628      	mov	r0, r5
  404dec:	47b0      	blx	r6
  404dee:	1c41      	adds	r1, r0, #1
  404df0:	d1c6      	bne.n	404d80 <__sflush_r+0x34>
  404df2:	682b      	ldr	r3, [r5, #0]
  404df4:	2b00      	cmp	r3, #0
  404df6:	d0c3      	beq.n	404d80 <__sflush_r+0x34>
  404df8:	2b1d      	cmp	r3, #29
  404dfa:	d001      	beq.n	404e00 <__sflush_r+0xb4>
  404dfc:	2b16      	cmp	r3, #22
  404dfe:	d101      	bne.n	404e04 <__sflush_r+0xb8>
  404e00:	602f      	str	r7, [r5, #0]
  404e02:	e7b0      	b.n	404d66 <__sflush_r+0x1a>
  404e04:	89a3      	ldrh	r3, [r4, #12]
  404e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404e0a:	81a3      	strh	r3, [r4, #12]
  404e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e10:	690f      	ldr	r7, [r1, #16]
  404e12:	2f00      	cmp	r7, #0
  404e14:	d0a7      	beq.n	404d66 <__sflush_r+0x1a>
  404e16:	0793      	lsls	r3, r2, #30
  404e18:	680e      	ldr	r6, [r1, #0]
  404e1a:	bf08      	it	eq
  404e1c:	694b      	ldreq	r3, [r1, #20]
  404e1e:	600f      	str	r7, [r1, #0]
  404e20:	bf18      	it	ne
  404e22:	2300      	movne	r3, #0
  404e24:	eba6 0807 	sub.w	r8, r6, r7
  404e28:	608b      	str	r3, [r1, #8]
  404e2a:	f1b8 0f00 	cmp.w	r8, #0
  404e2e:	dd9a      	ble.n	404d66 <__sflush_r+0x1a>
  404e30:	4643      	mov	r3, r8
  404e32:	463a      	mov	r2, r7
  404e34:	6a21      	ldr	r1, [r4, #32]
  404e36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  404e38:	4628      	mov	r0, r5
  404e3a:	47b0      	blx	r6
  404e3c:	2800      	cmp	r0, #0
  404e3e:	dc07      	bgt.n	404e50 <__sflush_r+0x104>
  404e40:	89a3      	ldrh	r3, [r4, #12]
  404e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404e46:	81a3      	strh	r3, [r4, #12]
  404e48:	f04f 30ff 	mov.w	r0, #4294967295
  404e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e50:	4407      	add	r7, r0
  404e52:	eba8 0800 	sub.w	r8, r8, r0
  404e56:	e7e8      	b.n	404e2a <__sflush_r+0xde>
  404e58:	20400001 	.word	0x20400001

00404e5c <_fflush_r>:
  404e5c:	b538      	push	{r3, r4, r5, lr}
  404e5e:	690b      	ldr	r3, [r1, #16]
  404e60:	4605      	mov	r5, r0
  404e62:	460c      	mov	r4, r1
  404e64:	b1db      	cbz	r3, 404e9e <_fflush_r+0x42>
  404e66:	b118      	cbz	r0, 404e70 <_fflush_r+0x14>
  404e68:	6983      	ldr	r3, [r0, #24]
  404e6a:	b90b      	cbnz	r3, 404e70 <_fflush_r+0x14>
  404e6c:	f000 f860 	bl	404f30 <__sinit>
  404e70:	4b0c      	ldr	r3, [pc, #48]	; (404ea4 <_fflush_r+0x48>)
  404e72:	429c      	cmp	r4, r3
  404e74:	d109      	bne.n	404e8a <_fflush_r+0x2e>
  404e76:	686c      	ldr	r4, [r5, #4]
  404e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e7c:	b17b      	cbz	r3, 404e9e <_fflush_r+0x42>
  404e7e:	4621      	mov	r1, r4
  404e80:	4628      	mov	r0, r5
  404e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404e86:	f7ff bf61 	b.w	404d4c <__sflush_r>
  404e8a:	4b07      	ldr	r3, [pc, #28]	; (404ea8 <_fflush_r+0x4c>)
  404e8c:	429c      	cmp	r4, r3
  404e8e:	d101      	bne.n	404e94 <_fflush_r+0x38>
  404e90:	68ac      	ldr	r4, [r5, #8]
  404e92:	e7f1      	b.n	404e78 <_fflush_r+0x1c>
  404e94:	4b05      	ldr	r3, [pc, #20]	; (404eac <_fflush_r+0x50>)
  404e96:	429c      	cmp	r4, r3
  404e98:	bf08      	it	eq
  404e9a:	68ec      	ldreq	r4, [r5, #12]
  404e9c:	e7ec      	b.n	404e78 <_fflush_r+0x1c>
  404e9e:	2000      	movs	r0, #0
  404ea0:	bd38      	pop	{r3, r4, r5, pc}
  404ea2:	bf00      	nop
  404ea4:	00406560 	.word	0x00406560
  404ea8:	00406580 	.word	0x00406580
  404eac:	00406540 	.word	0x00406540

00404eb0 <_cleanup_r>:
  404eb0:	4901      	ldr	r1, [pc, #4]	; (404eb8 <_cleanup_r+0x8>)
  404eb2:	f000 b8a9 	b.w	405008 <_fwalk_reent>
  404eb6:	bf00      	nop
  404eb8:	00404e5d 	.word	0x00404e5d

00404ebc <std.isra.0>:
  404ebc:	2300      	movs	r3, #0
  404ebe:	b510      	push	{r4, lr}
  404ec0:	4604      	mov	r4, r0
  404ec2:	6003      	str	r3, [r0, #0]
  404ec4:	6043      	str	r3, [r0, #4]
  404ec6:	6083      	str	r3, [r0, #8]
  404ec8:	8181      	strh	r1, [r0, #12]
  404eca:	6643      	str	r3, [r0, #100]	; 0x64
  404ecc:	81c2      	strh	r2, [r0, #14]
  404ece:	6103      	str	r3, [r0, #16]
  404ed0:	6143      	str	r3, [r0, #20]
  404ed2:	6183      	str	r3, [r0, #24]
  404ed4:	4619      	mov	r1, r3
  404ed6:	2208      	movs	r2, #8
  404ed8:	305c      	adds	r0, #92	; 0x5c
  404eda:	f7fe fb9a 	bl	403612 <memset>
  404ede:	4b05      	ldr	r3, [pc, #20]	; (404ef4 <std.isra.0+0x38>)
  404ee0:	6263      	str	r3, [r4, #36]	; 0x24
  404ee2:	4b05      	ldr	r3, [pc, #20]	; (404ef8 <std.isra.0+0x3c>)
  404ee4:	62a3      	str	r3, [r4, #40]	; 0x28
  404ee6:	4b05      	ldr	r3, [pc, #20]	; (404efc <std.isra.0+0x40>)
  404ee8:	62e3      	str	r3, [r4, #44]	; 0x2c
  404eea:	4b05      	ldr	r3, [pc, #20]	; (404f00 <std.isra.0+0x44>)
  404eec:	6224      	str	r4, [r4, #32]
  404eee:	6323      	str	r3, [r4, #48]	; 0x30
  404ef0:	bd10      	pop	{r4, pc}
  404ef2:	bf00      	nop
  404ef4:	00405b91 	.word	0x00405b91
  404ef8:	00405bb3 	.word	0x00405bb3
  404efc:	00405beb 	.word	0x00405beb
  404f00:	00405c0f 	.word	0x00405c0f

00404f04 <__sfmoreglue>:
  404f04:	b570      	push	{r4, r5, r6, lr}
  404f06:	1e4a      	subs	r2, r1, #1
  404f08:	2568      	movs	r5, #104	; 0x68
  404f0a:	4355      	muls	r5, r2
  404f0c:	460e      	mov	r6, r1
  404f0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  404f12:	f000 fc91 	bl	405838 <_malloc_r>
  404f16:	4604      	mov	r4, r0
  404f18:	b140      	cbz	r0, 404f2c <__sfmoreglue+0x28>
  404f1a:	2100      	movs	r1, #0
  404f1c:	e880 0042 	stmia.w	r0, {r1, r6}
  404f20:	300c      	adds	r0, #12
  404f22:	60a0      	str	r0, [r4, #8]
  404f24:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404f28:	f7fe fb73 	bl	403612 <memset>
  404f2c:	4620      	mov	r0, r4
  404f2e:	bd70      	pop	{r4, r5, r6, pc}

00404f30 <__sinit>:
  404f30:	6983      	ldr	r3, [r0, #24]
  404f32:	b510      	push	{r4, lr}
  404f34:	4604      	mov	r4, r0
  404f36:	bb33      	cbnz	r3, 404f86 <__sinit+0x56>
  404f38:	6483      	str	r3, [r0, #72]	; 0x48
  404f3a:	64c3      	str	r3, [r0, #76]	; 0x4c
  404f3c:	6503      	str	r3, [r0, #80]	; 0x50
  404f3e:	4b12      	ldr	r3, [pc, #72]	; (404f88 <__sinit+0x58>)
  404f40:	4a12      	ldr	r2, [pc, #72]	; (404f8c <__sinit+0x5c>)
  404f42:	681b      	ldr	r3, [r3, #0]
  404f44:	6282      	str	r2, [r0, #40]	; 0x28
  404f46:	4298      	cmp	r0, r3
  404f48:	bf04      	itt	eq
  404f4a:	2301      	moveq	r3, #1
  404f4c:	6183      	streq	r3, [r0, #24]
  404f4e:	f000 f81f 	bl	404f90 <__sfp>
  404f52:	6060      	str	r0, [r4, #4]
  404f54:	4620      	mov	r0, r4
  404f56:	f000 f81b 	bl	404f90 <__sfp>
  404f5a:	60a0      	str	r0, [r4, #8]
  404f5c:	4620      	mov	r0, r4
  404f5e:	f000 f817 	bl	404f90 <__sfp>
  404f62:	2200      	movs	r2, #0
  404f64:	60e0      	str	r0, [r4, #12]
  404f66:	2104      	movs	r1, #4
  404f68:	6860      	ldr	r0, [r4, #4]
  404f6a:	f7ff ffa7 	bl	404ebc <std.isra.0>
  404f6e:	2201      	movs	r2, #1
  404f70:	2109      	movs	r1, #9
  404f72:	68a0      	ldr	r0, [r4, #8]
  404f74:	f7ff ffa2 	bl	404ebc <std.isra.0>
  404f78:	2202      	movs	r2, #2
  404f7a:	2112      	movs	r1, #18
  404f7c:	68e0      	ldr	r0, [r4, #12]
  404f7e:	f7ff ff9d 	bl	404ebc <std.isra.0>
  404f82:	2301      	movs	r3, #1
  404f84:	61a3      	str	r3, [r4, #24]
  404f86:	bd10      	pop	{r4, pc}
  404f88:	004064f8 	.word	0x004064f8
  404f8c:	00404eb1 	.word	0x00404eb1

00404f90 <__sfp>:
  404f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404f92:	4b1c      	ldr	r3, [pc, #112]	; (405004 <__sfp+0x74>)
  404f94:	681e      	ldr	r6, [r3, #0]
  404f96:	69b3      	ldr	r3, [r6, #24]
  404f98:	4607      	mov	r7, r0
  404f9a:	b913      	cbnz	r3, 404fa2 <__sfp+0x12>
  404f9c:	4630      	mov	r0, r6
  404f9e:	f7ff ffc7 	bl	404f30 <__sinit>
  404fa2:	3648      	adds	r6, #72	; 0x48
  404fa4:	68b4      	ldr	r4, [r6, #8]
  404fa6:	6873      	ldr	r3, [r6, #4]
  404fa8:	3b01      	subs	r3, #1
  404faa:	d503      	bpl.n	404fb4 <__sfp+0x24>
  404fac:	6833      	ldr	r3, [r6, #0]
  404fae:	b133      	cbz	r3, 404fbe <__sfp+0x2e>
  404fb0:	6836      	ldr	r6, [r6, #0]
  404fb2:	e7f7      	b.n	404fa4 <__sfp+0x14>
  404fb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  404fb8:	b16d      	cbz	r5, 404fd6 <__sfp+0x46>
  404fba:	3468      	adds	r4, #104	; 0x68
  404fbc:	e7f4      	b.n	404fa8 <__sfp+0x18>
  404fbe:	2104      	movs	r1, #4
  404fc0:	4638      	mov	r0, r7
  404fc2:	f7ff ff9f 	bl	404f04 <__sfmoreglue>
  404fc6:	6030      	str	r0, [r6, #0]
  404fc8:	2800      	cmp	r0, #0
  404fca:	d1f1      	bne.n	404fb0 <__sfp+0x20>
  404fcc:	230c      	movs	r3, #12
  404fce:	603b      	str	r3, [r7, #0]
  404fd0:	4604      	mov	r4, r0
  404fd2:	4620      	mov	r0, r4
  404fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404fd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404fda:	81e3      	strh	r3, [r4, #14]
  404fdc:	2301      	movs	r3, #1
  404fde:	81a3      	strh	r3, [r4, #12]
  404fe0:	6665      	str	r5, [r4, #100]	; 0x64
  404fe2:	6025      	str	r5, [r4, #0]
  404fe4:	60a5      	str	r5, [r4, #8]
  404fe6:	6065      	str	r5, [r4, #4]
  404fe8:	6125      	str	r5, [r4, #16]
  404fea:	6165      	str	r5, [r4, #20]
  404fec:	61a5      	str	r5, [r4, #24]
  404fee:	2208      	movs	r2, #8
  404ff0:	4629      	mov	r1, r5
  404ff2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  404ff6:	f7fe fb0c 	bl	403612 <memset>
  404ffa:	6365      	str	r5, [r4, #52]	; 0x34
  404ffc:	63a5      	str	r5, [r4, #56]	; 0x38
  404ffe:	64a5      	str	r5, [r4, #72]	; 0x48
  405000:	64e5      	str	r5, [r4, #76]	; 0x4c
  405002:	e7e6      	b.n	404fd2 <__sfp+0x42>
  405004:	004064f8 	.word	0x004064f8

00405008 <_fwalk_reent>:
  405008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40500c:	4680      	mov	r8, r0
  40500e:	4689      	mov	r9, r1
  405010:	f100 0448 	add.w	r4, r0, #72	; 0x48
  405014:	2600      	movs	r6, #0
  405016:	b914      	cbnz	r4, 40501e <_fwalk_reent+0x16>
  405018:	4630      	mov	r0, r6
  40501a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40501e:	68a5      	ldr	r5, [r4, #8]
  405020:	6867      	ldr	r7, [r4, #4]
  405022:	3f01      	subs	r7, #1
  405024:	d501      	bpl.n	40502a <_fwalk_reent+0x22>
  405026:	6824      	ldr	r4, [r4, #0]
  405028:	e7f5      	b.n	405016 <_fwalk_reent+0xe>
  40502a:	89ab      	ldrh	r3, [r5, #12]
  40502c:	2b01      	cmp	r3, #1
  40502e:	d907      	bls.n	405040 <_fwalk_reent+0x38>
  405030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  405034:	3301      	adds	r3, #1
  405036:	d003      	beq.n	405040 <_fwalk_reent+0x38>
  405038:	4629      	mov	r1, r5
  40503a:	4640      	mov	r0, r8
  40503c:	47c8      	blx	r9
  40503e:	4306      	orrs	r6, r0
  405040:	3568      	adds	r5, #104	; 0x68
  405042:	e7ee      	b.n	405022 <_fwalk_reent+0x1a>

00405044 <_localeconv_r>:
  405044:	4b04      	ldr	r3, [pc, #16]	; (405058 <_localeconv_r+0x14>)
  405046:	681b      	ldr	r3, [r3, #0]
  405048:	6a18      	ldr	r0, [r3, #32]
  40504a:	4b04      	ldr	r3, [pc, #16]	; (40505c <_localeconv_r+0x18>)
  40504c:	2800      	cmp	r0, #0
  40504e:	bf08      	it	eq
  405050:	4618      	moveq	r0, r3
  405052:	30f0      	adds	r0, #240	; 0xf0
  405054:	4770      	bx	lr
  405056:	bf00      	nop
  405058:	20400048 	.word	0x20400048
  40505c:	204000ac 	.word	0x204000ac

00405060 <__swhatbuf_r>:
  405060:	b570      	push	{r4, r5, r6, lr}
  405062:	460e      	mov	r6, r1
  405064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405068:	2900      	cmp	r1, #0
  40506a:	b090      	sub	sp, #64	; 0x40
  40506c:	4614      	mov	r4, r2
  40506e:	461d      	mov	r5, r3
  405070:	da07      	bge.n	405082 <__swhatbuf_r+0x22>
  405072:	2300      	movs	r3, #0
  405074:	602b      	str	r3, [r5, #0]
  405076:	89b3      	ldrh	r3, [r6, #12]
  405078:	061a      	lsls	r2, r3, #24
  40507a:	d410      	bmi.n	40509e <__swhatbuf_r+0x3e>
  40507c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405080:	e00e      	b.n	4050a0 <__swhatbuf_r+0x40>
  405082:	aa01      	add	r2, sp, #4
  405084:	f000 feaa 	bl	405ddc <_fstat_r>
  405088:	2800      	cmp	r0, #0
  40508a:	dbf2      	blt.n	405072 <__swhatbuf_r+0x12>
  40508c:	9a02      	ldr	r2, [sp, #8]
  40508e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405092:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  405096:	425a      	negs	r2, r3
  405098:	415a      	adcs	r2, r3
  40509a:	602a      	str	r2, [r5, #0]
  40509c:	e7ee      	b.n	40507c <__swhatbuf_r+0x1c>
  40509e:	2340      	movs	r3, #64	; 0x40
  4050a0:	2000      	movs	r0, #0
  4050a2:	6023      	str	r3, [r4, #0]
  4050a4:	b010      	add	sp, #64	; 0x40
  4050a6:	bd70      	pop	{r4, r5, r6, pc}

004050a8 <__smakebuf_r>:
  4050a8:	898b      	ldrh	r3, [r1, #12]
  4050aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  4050ac:	079d      	lsls	r5, r3, #30
  4050ae:	4606      	mov	r6, r0
  4050b0:	460c      	mov	r4, r1
  4050b2:	d507      	bpl.n	4050c4 <__smakebuf_r+0x1c>
  4050b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4050b8:	6023      	str	r3, [r4, #0]
  4050ba:	6123      	str	r3, [r4, #16]
  4050bc:	2301      	movs	r3, #1
  4050be:	6163      	str	r3, [r4, #20]
  4050c0:	b002      	add	sp, #8
  4050c2:	bd70      	pop	{r4, r5, r6, pc}
  4050c4:	ab01      	add	r3, sp, #4
  4050c6:	466a      	mov	r2, sp
  4050c8:	f7ff ffca 	bl	405060 <__swhatbuf_r>
  4050cc:	9900      	ldr	r1, [sp, #0]
  4050ce:	4605      	mov	r5, r0
  4050d0:	4630      	mov	r0, r6
  4050d2:	f000 fbb1 	bl	405838 <_malloc_r>
  4050d6:	b948      	cbnz	r0, 4050ec <__smakebuf_r+0x44>
  4050d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4050dc:	059a      	lsls	r2, r3, #22
  4050de:	d4ef      	bmi.n	4050c0 <__smakebuf_r+0x18>
  4050e0:	f023 0303 	bic.w	r3, r3, #3
  4050e4:	f043 0302 	orr.w	r3, r3, #2
  4050e8:	81a3      	strh	r3, [r4, #12]
  4050ea:	e7e3      	b.n	4050b4 <__smakebuf_r+0xc>
  4050ec:	4b0d      	ldr	r3, [pc, #52]	; (405124 <__smakebuf_r+0x7c>)
  4050ee:	62b3      	str	r3, [r6, #40]	; 0x28
  4050f0:	89a3      	ldrh	r3, [r4, #12]
  4050f2:	6020      	str	r0, [r4, #0]
  4050f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4050f8:	81a3      	strh	r3, [r4, #12]
  4050fa:	9b00      	ldr	r3, [sp, #0]
  4050fc:	6163      	str	r3, [r4, #20]
  4050fe:	9b01      	ldr	r3, [sp, #4]
  405100:	6120      	str	r0, [r4, #16]
  405102:	b15b      	cbz	r3, 40511c <__smakebuf_r+0x74>
  405104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405108:	4630      	mov	r0, r6
  40510a:	f000 fe79 	bl	405e00 <_isatty_r>
  40510e:	b128      	cbz	r0, 40511c <__smakebuf_r+0x74>
  405110:	89a3      	ldrh	r3, [r4, #12]
  405112:	f023 0303 	bic.w	r3, r3, #3
  405116:	f043 0301 	orr.w	r3, r3, #1
  40511a:	81a3      	strh	r3, [r4, #12]
  40511c:	89a3      	ldrh	r3, [r4, #12]
  40511e:	431d      	orrs	r5, r3
  405120:	81a5      	strh	r5, [r4, #12]
  405122:	e7cd      	b.n	4050c0 <__smakebuf_r+0x18>
  405124:	00404eb1 	.word	0x00404eb1

00405128 <malloc>:
  405128:	4b02      	ldr	r3, [pc, #8]	; (405134 <malloc+0xc>)
  40512a:	4601      	mov	r1, r0
  40512c:	6818      	ldr	r0, [r3, #0]
  40512e:	f000 bb83 	b.w	405838 <_malloc_r>
  405132:	bf00      	nop
  405134:	20400048 	.word	0x20400048
	...

00405140 <memchr>:
  405140:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405144:	2a10      	cmp	r2, #16
  405146:	db2b      	blt.n	4051a0 <memchr+0x60>
  405148:	f010 0f07 	tst.w	r0, #7
  40514c:	d008      	beq.n	405160 <memchr+0x20>
  40514e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405152:	3a01      	subs	r2, #1
  405154:	428b      	cmp	r3, r1
  405156:	d02d      	beq.n	4051b4 <memchr+0x74>
  405158:	f010 0f07 	tst.w	r0, #7
  40515c:	b342      	cbz	r2, 4051b0 <memchr+0x70>
  40515e:	d1f6      	bne.n	40514e <memchr+0xe>
  405160:	b4f0      	push	{r4, r5, r6, r7}
  405162:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405166:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40516a:	f022 0407 	bic.w	r4, r2, #7
  40516e:	f07f 0700 	mvns.w	r7, #0
  405172:	2300      	movs	r3, #0
  405174:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405178:	3c08      	subs	r4, #8
  40517a:	ea85 0501 	eor.w	r5, r5, r1
  40517e:	ea86 0601 	eor.w	r6, r6, r1
  405182:	fa85 f547 	uadd8	r5, r5, r7
  405186:	faa3 f587 	sel	r5, r3, r7
  40518a:	fa86 f647 	uadd8	r6, r6, r7
  40518e:	faa5 f687 	sel	r6, r5, r7
  405192:	b98e      	cbnz	r6, 4051b8 <memchr+0x78>
  405194:	d1ee      	bne.n	405174 <memchr+0x34>
  405196:	bcf0      	pop	{r4, r5, r6, r7}
  405198:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40519c:	f002 0207 	and.w	r2, r2, #7
  4051a0:	b132      	cbz	r2, 4051b0 <memchr+0x70>
  4051a2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4051a6:	3a01      	subs	r2, #1
  4051a8:	ea83 0301 	eor.w	r3, r3, r1
  4051ac:	b113      	cbz	r3, 4051b4 <memchr+0x74>
  4051ae:	d1f8      	bne.n	4051a2 <memchr+0x62>
  4051b0:	2000      	movs	r0, #0
  4051b2:	4770      	bx	lr
  4051b4:	3801      	subs	r0, #1
  4051b6:	4770      	bx	lr
  4051b8:	2d00      	cmp	r5, #0
  4051ba:	bf06      	itte	eq
  4051bc:	4635      	moveq	r5, r6
  4051be:	3803      	subeq	r0, #3
  4051c0:	3807      	subne	r0, #7
  4051c2:	f015 0f01 	tst.w	r5, #1
  4051c6:	d107      	bne.n	4051d8 <memchr+0x98>
  4051c8:	3001      	adds	r0, #1
  4051ca:	f415 7f80 	tst.w	r5, #256	; 0x100
  4051ce:	bf02      	ittt	eq
  4051d0:	3001      	addeq	r0, #1
  4051d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4051d6:	3001      	addeq	r0, #1
  4051d8:	bcf0      	pop	{r4, r5, r6, r7}
  4051da:	3801      	subs	r0, #1
  4051dc:	4770      	bx	lr
  4051de:	bf00      	nop

004051e0 <_Balloc>:
  4051e0:	b570      	push	{r4, r5, r6, lr}
  4051e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4051e4:	4604      	mov	r4, r0
  4051e6:	460e      	mov	r6, r1
  4051e8:	b93d      	cbnz	r5, 4051fa <_Balloc+0x1a>
  4051ea:	2010      	movs	r0, #16
  4051ec:	f7ff ff9c 	bl	405128 <malloc>
  4051f0:	6260      	str	r0, [r4, #36]	; 0x24
  4051f2:	6045      	str	r5, [r0, #4]
  4051f4:	6085      	str	r5, [r0, #8]
  4051f6:	6005      	str	r5, [r0, #0]
  4051f8:	60c5      	str	r5, [r0, #12]
  4051fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4051fc:	68eb      	ldr	r3, [r5, #12]
  4051fe:	b183      	cbz	r3, 405222 <_Balloc+0x42>
  405200:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405202:	68db      	ldr	r3, [r3, #12]
  405204:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  405208:	b9b8      	cbnz	r0, 40523a <_Balloc+0x5a>
  40520a:	2101      	movs	r1, #1
  40520c:	fa01 f506 	lsl.w	r5, r1, r6
  405210:	1d6a      	adds	r2, r5, #5
  405212:	0092      	lsls	r2, r2, #2
  405214:	4620      	mov	r0, r4
  405216:	f000 fab3 	bl	405780 <_calloc_r>
  40521a:	b160      	cbz	r0, 405236 <_Balloc+0x56>
  40521c:	6046      	str	r6, [r0, #4]
  40521e:	6085      	str	r5, [r0, #8]
  405220:	e00e      	b.n	405240 <_Balloc+0x60>
  405222:	2221      	movs	r2, #33	; 0x21
  405224:	2104      	movs	r1, #4
  405226:	4620      	mov	r0, r4
  405228:	f000 faaa 	bl	405780 <_calloc_r>
  40522c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40522e:	60e8      	str	r0, [r5, #12]
  405230:	68db      	ldr	r3, [r3, #12]
  405232:	2b00      	cmp	r3, #0
  405234:	d1e4      	bne.n	405200 <_Balloc+0x20>
  405236:	2000      	movs	r0, #0
  405238:	bd70      	pop	{r4, r5, r6, pc}
  40523a:	6802      	ldr	r2, [r0, #0]
  40523c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  405240:	2300      	movs	r3, #0
  405242:	6103      	str	r3, [r0, #16]
  405244:	60c3      	str	r3, [r0, #12]
  405246:	bd70      	pop	{r4, r5, r6, pc}

00405248 <_Bfree>:
  405248:	b570      	push	{r4, r5, r6, lr}
  40524a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40524c:	4606      	mov	r6, r0
  40524e:	460d      	mov	r5, r1
  405250:	b93c      	cbnz	r4, 405262 <_Bfree+0x1a>
  405252:	2010      	movs	r0, #16
  405254:	f7ff ff68 	bl	405128 <malloc>
  405258:	6270      	str	r0, [r6, #36]	; 0x24
  40525a:	6044      	str	r4, [r0, #4]
  40525c:	6084      	str	r4, [r0, #8]
  40525e:	6004      	str	r4, [r0, #0]
  405260:	60c4      	str	r4, [r0, #12]
  405262:	b13d      	cbz	r5, 405274 <_Bfree+0x2c>
  405264:	6a73      	ldr	r3, [r6, #36]	; 0x24
  405266:	686a      	ldr	r2, [r5, #4]
  405268:	68db      	ldr	r3, [r3, #12]
  40526a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40526e:	6029      	str	r1, [r5, #0]
  405270:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  405274:	bd70      	pop	{r4, r5, r6, pc}

00405276 <__multadd>:
  405276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40527a:	690d      	ldr	r5, [r1, #16]
  40527c:	461f      	mov	r7, r3
  40527e:	4606      	mov	r6, r0
  405280:	460c      	mov	r4, r1
  405282:	f101 0e14 	add.w	lr, r1, #20
  405286:	2300      	movs	r3, #0
  405288:	f8de 0000 	ldr.w	r0, [lr]
  40528c:	b281      	uxth	r1, r0
  40528e:	fb02 7101 	mla	r1, r2, r1, r7
  405292:	0c0f      	lsrs	r7, r1, #16
  405294:	0c00      	lsrs	r0, r0, #16
  405296:	fb02 7000 	mla	r0, r2, r0, r7
  40529a:	b289      	uxth	r1, r1
  40529c:	3301      	adds	r3, #1
  40529e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  4052a2:	429d      	cmp	r5, r3
  4052a4:	ea4f 4710 	mov.w	r7, r0, lsr #16
  4052a8:	f84e 1b04 	str.w	r1, [lr], #4
  4052ac:	dcec      	bgt.n	405288 <__multadd+0x12>
  4052ae:	b1d7      	cbz	r7, 4052e6 <__multadd+0x70>
  4052b0:	68a3      	ldr	r3, [r4, #8]
  4052b2:	429d      	cmp	r5, r3
  4052b4:	db12      	blt.n	4052dc <__multadd+0x66>
  4052b6:	6861      	ldr	r1, [r4, #4]
  4052b8:	4630      	mov	r0, r6
  4052ba:	3101      	adds	r1, #1
  4052bc:	f7ff ff90 	bl	4051e0 <_Balloc>
  4052c0:	6922      	ldr	r2, [r4, #16]
  4052c2:	3202      	adds	r2, #2
  4052c4:	f104 010c 	add.w	r1, r4, #12
  4052c8:	4680      	mov	r8, r0
  4052ca:	0092      	lsls	r2, r2, #2
  4052cc:	300c      	adds	r0, #12
  4052ce:	f7fe f995 	bl	4035fc <memcpy>
  4052d2:	4621      	mov	r1, r4
  4052d4:	4630      	mov	r0, r6
  4052d6:	f7ff ffb7 	bl	405248 <_Bfree>
  4052da:	4644      	mov	r4, r8
  4052dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4052e0:	3501      	adds	r5, #1
  4052e2:	615f      	str	r7, [r3, #20]
  4052e4:	6125      	str	r5, [r4, #16]
  4052e6:	4620      	mov	r0, r4
  4052e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004052ec <__hi0bits>:
  4052ec:	0c02      	lsrs	r2, r0, #16
  4052ee:	0412      	lsls	r2, r2, #16
  4052f0:	4603      	mov	r3, r0
  4052f2:	b9b2      	cbnz	r2, 405322 <__hi0bits+0x36>
  4052f4:	0403      	lsls	r3, r0, #16
  4052f6:	2010      	movs	r0, #16
  4052f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4052fc:	bf04      	itt	eq
  4052fe:	021b      	lsleq	r3, r3, #8
  405300:	3008      	addeq	r0, #8
  405302:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405306:	bf04      	itt	eq
  405308:	011b      	lsleq	r3, r3, #4
  40530a:	3004      	addeq	r0, #4
  40530c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  405310:	bf04      	itt	eq
  405312:	009b      	lsleq	r3, r3, #2
  405314:	3002      	addeq	r0, #2
  405316:	2b00      	cmp	r3, #0
  405318:	db06      	blt.n	405328 <__hi0bits+0x3c>
  40531a:	005b      	lsls	r3, r3, #1
  40531c:	d503      	bpl.n	405326 <__hi0bits+0x3a>
  40531e:	3001      	adds	r0, #1
  405320:	4770      	bx	lr
  405322:	2000      	movs	r0, #0
  405324:	e7e8      	b.n	4052f8 <__hi0bits+0xc>
  405326:	2020      	movs	r0, #32
  405328:	4770      	bx	lr

0040532a <__lo0bits>:
  40532a:	6803      	ldr	r3, [r0, #0]
  40532c:	f013 0207 	ands.w	r2, r3, #7
  405330:	4601      	mov	r1, r0
  405332:	d00b      	beq.n	40534c <__lo0bits+0x22>
  405334:	07da      	lsls	r2, r3, #31
  405336:	d423      	bmi.n	405380 <__lo0bits+0x56>
  405338:	0798      	lsls	r0, r3, #30
  40533a:	bf49      	itett	mi
  40533c:	085b      	lsrmi	r3, r3, #1
  40533e:	089b      	lsrpl	r3, r3, #2
  405340:	2001      	movmi	r0, #1
  405342:	600b      	strmi	r3, [r1, #0]
  405344:	bf5c      	itt	pl
  405346:	600b      	strpl	r3, [r1, #0]
  405348:	2002      	movpl	r0, #2
  40534a:	4770      	bx	lr
  40534c:	b298      	uxth	r0, r3
  40534e:	b9a8      	cbnz	r0, 40537c <__lo0bits+0x52>
  405350:	0c1b      	lsrs	r3, r3, #16
  405352:	2010      	movs	r0, #16
  405354:	f013 0fff 	tst.w	r3, #255	; 0xff
  405358:	bf04      	itt	eq
  40535a:	0a1b      	lsreq	r3, r3, #8
  40535c:	3008      	addeq	r0, #8
  40535e:	071a      	lsls	r2, r3, #28
  405360:	bf04      	itt	eq
  405362:	091b      	lsreq	r3, r3, #4
  405364:	3004      	addeq	r0, #4
  405366:	079a      	lsls	r2, r3, #30
  405368:	bf04      	itt	eq
  40536a:	089b      	lsreq	r3, r3, #2
  40536c:	3002      	addeq	r0, #2
  40536e:	07da      	lsls	r2, r3, #31
  405370:	d402      	bmi.n	405378 <__lo0bits+0x4e>
  405372:	085b      	lsrs	r3, r3, #1
  405374:	d006      	beq.n	405384 <__lo0bits+0x5a>
  405376:	3001      	adds	r0, #1
  405378:	600b      	str	r3, [r1, #0]
  40537a:	4770      	bx	lr
  40537c:	4610      	mov	r0, r2
  40537e:	e7e9      	b.n	405354 <__lo0bits+0x2a>
  405380:	2000      	movs	r0, #0
  405382:	4770      	bx	lr
  405384:	2020      	movs	r0, #32
  405386:	4770      	bx	lr

00405388 <__i2b>:
  405388:	b510      	push	{r4, lr}
  40538a:	460c      	mov	r4, r1
  40538c:	2101      	movs	r1, #1
  40538e:	f7ff ff27 	bl	4051e0 <_Balloc>
  405392:	2201      	movs	r2, #1
  405394:	6144      	str	r4, [r0, #20]
  405396:	6102      	str	r2, [r0, #16]
  405398:	bd10      	pop	{r4, pc}

0040539a <__multiply>:
  40539a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40539e:	4614      	mov	r4, r2
  4053a0:	690a      	ldr	r2, [r1, #16]
  4053a2:	6923      	ldr	r3, [r4, #16]
  4053a4:	429a      	cmp	r2, r3
  4053a6:	bfb8      	it	lt
  4053a8:	460b      	movlt	r3, r1
  4053aa:	4689      	mov	r9, r1
  4053ac:	bfbc      	itt	lt
  4053ae:	46a1      	movlt	r9, r4
  4053b0:	461c      	movlt	r4, r3
  4053b2:	f8d9 7010 	ldr.w	r7, [r9, #16]
  4053b6:	f8d4 a010 	ldr.w	sl, [r4, #16]
  4053ba:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4053be:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4053c2:	eb07 060a 	add.w	r6, r7, sl
  4053c6:	429e      	cmp	r6, r3
  4053c8:	bfc8      	it	gt
  4053ca:	3101      	addgt	r1, #1
  4053cc:	f7ff ff08 	bl	4051e0 <_Balloc>
  4053d0:	f100 0514 	add.w	r5, r0, #20
  4053d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  4053d8:	462b      	mov	r3, r5
  4053da:	2200      	movs	r2, #0
  4053dc:	4543      	cmp	r3, r8
  4053de:	d316      	bcc.n	40540e <__multiply+0x74>
  4053e0:	f104 0214 	add.w	r2, r4, #20
  4053e4:	f109 0114 	add.w	r1, r9, #20
  4053e8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  4053ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  4053f0:	9301      	str	r3, [sp, #4]
  4053f2:	9c01      	ldr	r4, [sp, #4]
  4053f4:	4294      	cmp	r4, r2
  4053f6:	4613      	mov	r3, r2
  4053f8:	d80c      	bhi.n	405414 <__multiply+0x7a>
  4053fa:	2e00      	cmp	r6, #0
  4053fc:	dd03      	ble.n	405406 <__multiply+0x6c>
  4053fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  405402:	2b00      	cmp	r3, #0
  405404:	d054      	beq.n	4054b0 <__multiply+0x116>
  405406:	6106      	str	r6, [r0, #16]
  405408:	b003      	add	sp, #12
  40540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40540e:	f843 2b04 	str.w	r2, [r3], #4
  405412:	e7e3      	b.n	4053dc <__multiply+0x42>
  405414:	f8b3 a000 	ldrh.w	sl, [r3]
  405418:	3204      	adds	r2, #4
  40541a:	f1ba 0f00 	cmp.w	sl, #0
  40541e:	d020      	beq.n	405462 <__multiply+0xc8>
  405420:	46ae      	mov	lr, r5
  405422:	4689      	mov	r9, r1
  405424:	f04f 0c00 	mov.w	ip, #0
  405428:	f859 4b04 	ldr.w	r4, [r9], #4
  40542c:	f8be b000 	ldrh.w	fp, [lr]
  405430:	b2a3      	uxth	r3, r4
  405432:	fb0a b303 	mla	r3, sl, r3, fp
  405436:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  40543a:	f8de 4000 	ldr.w	r4, [lr]
  40543e:	4463      	add	r3, ip
  405440:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  405444:	fb0a c40b 	mla	r4, sl, fp, ip
  405448:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40544c:	b29b      	uxth	r3, r3
  40544e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  405452:	454f      	cmp	r7, r9
  405454:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  405458:	f84e 3b04 	str.w	r3, [lr], #4
  40545c:	d8e4      	bhi.n	405428 <__multiply+0x8e>
  40545e:	f8ce c000 	str.w	ip, [lr]
  405462:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  405466:	f1b9 0f00 	cmp.w	r9, #0
  40546a:	d01f      	beq.n	4054ac <__multiply+0x112>
  40546c:	682b      	ldr	r3, [r5, #0]
  40546e:	46ae      	mov	lr, r5
  405470:	468c      	mov	ip, r1
  405472:	f04f 0a00 	mov.w	sl, #0
  405476:	f8bc 4000 	ldrh.w	r4, [ip]
  40547a:	f8be b002 	ldrh.w	fp, [lr, #2]
  40547e:	fb09 b404 	mla	r4, r9, r4, fp
  405482:	44a2      	add	sl, r4
  405484:	b29b      	uxth	r3, r3
  405486:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  40548a:	f84e 3b04 	str.w	r3, [lr], #4
  40548e:	f85c 3b04 	ldr.w	r3, [ip], #4
  405492:	f8be 4000 	ldrh.w	r4, [lr]
  405496:	0c1b      	lsrs	r3, r3, #16
  405498:	fb09 4303 	mla	r3, r9, r3, r4
  40549c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  4054a0:	4567      	cmp	r7, ip
  4054a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4054a6:	d8e6      	bhi.n	405476 <__multiply+0xdc>
  4054a8:	f8ce 3000 	str.w	r3, [lr]
  4054ac:	3504      	adds	r5, #4
  4054ae:	e7a0      	b.n	4053f2 <__multiply+0x58>
  4054b0:	3e01      	subs	r6, #1
  4054b2:	e7a2      	b.n	4053fa <__multiply+0x60>

004054b4 <__pow5mult>:
  4054b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4054b8:	4615      	mov	r5, r2
  4054ba:	f012 0203 	ands.w	r2, r2, #3
  4054be:	4606      	mov	r6, r0
  4054c0:	460f      	mov	r7, r1
  4054c2:	d007      	beq.n	4054d4 <__pow5mult+0x20>
  4054c4:	3a01      	subs	r2, #1
  4054c6:	4c21      	ldr	r4, [pc, #132]	; (40554c <__pow5mult+0x98>)
  4054c8:	2300      	movs	r3, #0
  4054ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  4054ce:	f7ff fed2 	bl	405276 <__multadd>
  4054d2:	4607      	mov	r7, r0
  4054d4:	10ad      	asrs	r5, r5, #2
  4054d6:	d035      	beq.n	405544 <__pow5mult+0x90>
  4054d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
  4054da:	b93c      	cbnz	r4, 4054ec <__pow5mult+0x38>
  4054dc:	2010      	movs	r0, #16
  4054de:	f7ff fe23 	bl	405128 <malloc>
  4054e2:	6270      	str	r0, [r6, #36]	; 0x24
  4054e4:	6044      	str	r4, [r0, #4]
  4054e6:	6084      	str	r4, [r0, #8]
  4054e8:	6004      	str	r4, [r0, #0]
  4054ea:	60c4      	str	r4, [r0, #12]
  4054ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  4054f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
  4054f4:	b94c      	cbnz	r4, 40550a <__pow5mult+0x56>
  4054f6:	f240 2171 	movw	r1, #625	; 0x271
  4054fa:	4630      	mov	r0, r6
  4054fc:	f7ff ff44 	bl	405388 <__i2b>
  405500:	2300      	movs	r3, #0
  405502:	f8c8 0008 	str.w	r0, [r8, #8]
  405506:	4604      	mov	r4, r0
  405508:	6003      	str	r3, [r0, #0]
  40550a:	f04f 0800 	mov.w	r8, #0
  40550e:	07eb      	lsls	r3, r5, #31
  405510:	d50a      	bpl.n	405528 <__pow5mult+0x74>
  405512:	4639      	mov	r1, r7
  405514:	4622      	mov	r2, r4
  405516:	4630      	mov	r0, r6
  405518:	f7ff ff3f 	bl	40539a <__multiply>
  40551c:	4639      	mov	r1, r7
  40551e:	4681      	mov	r9, r0
  405520:	4630      	mov	r0, r6
  405522:	f7ff fe91 	bl	405248 <_Bfree>
  405526:	464f      	mov	r7, r9
  405528:	106d      	asrs	r5, r5, #1
  40552a:	d00b      	beq.n	405544 <__pow5mult+0x90>
  40552c:	6820      	ldr	r0, [r4, #0]
  40552e:	b938      	cbnz	r0, 405540 <__pow5mult+0x8c>
  405530:	4622      	mov	r2, r4
  405532:	4621      	mov	r1, r4
  405534:	4630      	mov	r0, r6
  405536:	f7ff ff30 	bl	40539a <__multiply>
  40553a:	6020      	str	r0, [r4, #0]
  40553c:	f8c0 8000 	str.w	r8, [r0]
  405540:	4604      	mov	r4, r0
  405542:	e7e4      	b.n	40550e <__pow5mult+0x5a>
  405544:	4638      	mov	r0, r7
  405546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40554a:	bf00      	nop
  40554c:	00406690 	.word	0x00406690

00405550 <__lshift>:
  405550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405554:	460c      	mov	r4, r1
  405556:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40555a:	6923      	ldr	r3, [r4, #16]
  40555c:	6849      	ldr	r1, [r1, #4]
  40555e:	eb0a 0903 	add.w	r9, sl, r3
  405562:	68a3      	ldr	r3, [r4, #8]
  405564:	4607      	mov	r7, r0
  405566:	4616      	mov	r6, r2
  405568:	f109 0501 	add.w	r5, r9, #1
  40556c:	42ab      	cmp	r3, r5
  40556e:	db31      	blt.n	4055d4 <__lshift+0x84>
  405570:	4638      	mov	r0, r7
  405572:	f7ff fe35 	bl	4051e0 <_Balloc>
  405576:	2200      	movs	r2, #0
  405578:	4680      	mov	r8, r0
  40557a:	f100 0314 	add.w	r3, r0, #20
  40557e:	4611      	mov	r1, r2
  405580:	4552      	cmp	r2, sl
  405582:	db2a      	blt.n	4055da <__lshift+0x8a>
  405584:	6920      	ldr	r0, [r4, #16]
  405586:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  40558a:	f104 0114 	add.w	r1, r4, #20
  40558e:	f016 021f 	ands.w	r2, r6, #31
  405592:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  405596:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  40559a:	d022      	beq.n	4055e2 <__lshift+0x92>
  40559c:	f1c2 0c20 	rsb	ip, r2, #32
  4055a0:	2000      	movs	r0, #0
  4055a2:	680e      	ldr	r6, [r1, #0]
  4055a4:	4096      	lsls	r6, r2
  4055a6:	4330      	orrs	r0, r6
  4055a8:	f843 0b04 	str.w	r0, [r3], #4
  4055ac:	f851 0b04 	ldr.w	r0, [r1], #4
  4055b0:	458e      	cmp	lr, r1
  4055b2:	fa20 f00c 	lsr.w	r0, r0, ip
  4055b6:	d8f4      	bhi.n	4055a2 <__lshift+0x52>
  4055b8:	6018      	str	r0, [r3, #0]
  4055ba:	b108      	cbz	r0, 4055c0 <__lshift+0x70>
  4055bc:	f109 0502 	add.w	r5, r9, #2
  4055c0:	3d01      	subs	r5, #1
  4055c2:	4638      	mov	r0, r7
  4055c4:	f8c8 5010 	str.w	r5, [r8, #16]
  4055c8:	4621      	mov	r1, r4
  4055ca:	f7ff fe3d 	bl	405248 <_Bfree>
  4055ce:	4640      	mov	r0, r8
  4055d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055d4:	3101      	adds	r1, #1
  4055d6:	005b      	lsls	r3, r3, #1
  4055d8:	e7c8      	b.n	40556c <__lshift+0x1c>
  4055da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4055de:	3201      	adds	r2, #1
  4055e0:	e7ce      	b.n	405580 <__lshift+0x30>
  4055e2:	3b04      	subs	r3, #4
  4055e4:	f851 2b04 	ldr.w	r2, [r1], #4
  4055e8:	f843 2f04 	str.w	r2, [r3, #4]!
  4055ec:	458e      	cmp	lr, r1
  4055ee:	d8f9      	bhi.n	4055e4 <__lshift+0x94>
  4055f0:	e7e6      	b.n	4055c0 <__lshift+0x70>

004055f2 <__mcmp>:
  4055f2:	6903      	ldr	r3, [r0, #16]
  4055f4:	690a      	ldr	r2, [r1, #16]
  4055f6:	1a9b      	subs	r3, r3, r2
  4055f8:	b530      	push	{r4, r5, lr}
  4055fa:	d10c      	bne.n	405616 <__mcmp+0x24>
  4055fc:	0092      	lsls	r2, r2, #2
  4055fe:	3014      	adds	r0, #20
  405600:	3114      	adds	r1, #20
  405602:	1884      	adds	r4, r0, r2
  405604:	4411      	add	r1, r2
  405606:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40560a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40560e:	4295      	cmp	r5, r2
  405610:	d003      	beq.n	40561a <__mcmp+0x28>
  405612:	d305      	bcc.n	405620 <__mcmp+0x2e>
  405614:	2301      	movs	r3, #1
  405616:	4618      	mov	r0, r3
  405618:	bd30      	pop	{r4, r5, pc}
  40561a:	42a0      	cmp	r0, r4
  40561c:	d3f3      	bcc.n	405606 <__mcmp+0x14>
  40561e:	e7fa      	b.n	405616 <__mcmp+0x24>
  405620:	f04f 33ff 	mov.w	r3, #4294967295
  405624:	e7f7      	b.n	405616 <__mcmp+0x24>

00405626 <__mdiff>:
  405626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40562a:	460d      	mov	r5, r1
  40562c:	4607      	mov	r7, r0
  40562e:	4611      	mov	r1, r2
  405630:	4628      	mov	r0, r5
  405632:	4614      	mov	r4, r2
  405634:	f7ff ffdd 	bl	4055f2 <__mcmp>
  405638:	1e06      	subs	r6, r0, #0
  40563a:	d108      	bne.n	40564e <__mdiff+0x28>
  40563c:	4631      	mov	r1, r6
  40563e:	4638      	mov	r0, r7
  405640:	f7ff fdce 	bl	4051e0 <_Balloc>
  405644:	2301      	movs	r3, #1
  405646:	6103      	str	r3, [r0, #16]
  405648:	6146      	str	r6, [r0, #20]
  40564a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40564e:	bfa4      	itt	ge
  405650:	4623      	movge	r3, r4
  405652:	462c      	movge	r4, r5
  405654:	4638      	mov	r0, r7
  405656:	6861      	ldr	r1, [r4, #4]
  405658:	bfa6      	itte	ge
  40565a:	461d      	movge	r5, r3
  40565c:	2600      	movge	r6, #0
  40565e:	2601      	movlt	r6, #1
  405660:	f7ff fdbe 	bl	4051e0 <_Balloc>
  405664:	692b      	ldr	r3, [r5, #16]
  405666:	60c6      	str	r6, [r0, #12]
  405668:	6926      	ldr	r6, [r4, #16]
  40566a:	f105 0914 	add.w	r9, r5, #20
  40566e:	f104 0214 	add.w	r2, r4, #20
  405672:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  405676:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40567a:	f100 0514 	add.w	r5, r0, #20
  40567e:	f04f 0c00 	mov.w	ip, #0
  405682:	f852 ab04 	ldr.w	sl, [r2], #4
  405686:	f859 4b04 	ldr.w	r4, [r9], #4
  40568a:	fa1c f18a 	uxtah	r1, ip, sl
  40568e:	b2a3      	uxth	r3, r4
  405690:	1ac9      	subs	r1, r1, r3
  405692:	0c23      	lsrs	r3, r4, #16
  405694:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  405698:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40569c:	b289      	uxth	r1, r1
  40569e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4056a2:	45c8      	cmp	r8, r9
  4056a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  4056a8:	4696      	mov	lr, r2
  4056aa:	f845 3b04 	str.w	r3, [r5], #4
  4056ae:	d8e8      	bhi.n	405682 <__mdiff+0x5c>
  4056b0:	45be      	cmp	lr, r7
  4056b2:	d305      	bcc.n	4056c0 <__mdiff+0x9a>
  4056b4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4056b8:	b18b      	cbz	r3, 4056de <__mdiff+0xb8>
  4056ba:	6106      	str	r6, [r0, #16]
  4056bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4056c0:	f85e 1b04 	ldr.w	r1, [lr], #4
  4056c4:	fa1c f381 	uxtah	r3, ip, r1
  4056c8:	141a      	asrs	r2, r3, #16
  4056ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  4056ce:	b29b      	uxth	r3, r3
  4056d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4056d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
  4056d8:	f845 3b04 	str.w	r3, [r5], #4
  4056dc:	e7e8      	b.n	4056b0 <__mdiff+0x8a>
  4056de:	3e01      	subs	r6, #1
  4056e0:	e7e8      	b.n	4056b4 <__mdiff+0x8e>

004056e2 <__d2b>:
  4056e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  4056e6:	2101      	movs	r1, #1
  4056e8:	461c      	mov	r4, r3
  4056ea:	4690      	mov	r8, r2
  4056ec:	9e08      	ldr	r6, [sp, #32]
  4056ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4056f0:	f7ff fd76 	bl	4051e0 <_Balloc>
  4056f4:	f3c4 0213 	ubfx	r2, r4, #0, #20
  4056f8:	f3c4 540a 	ubfx	r4, r4, #20, #11
  4056fc:	4607      	mov	r7, r0
  4056fe:	bb34      	cbnz	r4, 40574e <__d2b+0x6c>
  405700:	9201      	str	r2, [sp, #4]
  405702:	f1b8 0f00 	cmp.w	r8, #0
  405706:	d027      	beq.n	405758 <__d2b+0x76>
  405708:	a802      	add	r0, sp, #8
  40570a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40570e:	f7ff fe0c 	bl	40532a <__lo0bits>
  405712:	9900      	ldr	r1, [sp, #0]
  405714:	b1f0      	cbz	r0, 405754 <__d2b+0x72>
  405716:	9a01      	ldr	r2, [sp, #4]
  405718:	f1c0 0320 	rsb	r3, r0, #32
  40571c:	fa02 f303 	lsl.w	r3, r2, r3
  405720:	430b      	orrs	r3, r1
  405722:	40c2      	lsrs	r2, r0
  405724:	617b      	str	r3, [r7, #20]
  405726:	9201      	str	r2, [sp, #4]
  405728:	9b01      	ldr	r3, [sp, #4]
  40572a:	61bb      	str	r3, [r7, #24]
  40572c:	2b00      	cmp	r3, #0
  40572e:	bf14      	ite	ne
  405730:	2102      	movne	r1, #2
  405732:	2101      	moveq	r1, #1
  405734:	6139      	str	r1, [r7, #16]
  405736:	b1c4      	cbz	r4, 40576a <__d2b+0x88>
  405738:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40573c:	4404      	add	r4, r0
  40573e:	6034      	str	r4, [r6, #0]
  405740:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405744:	6028      	str	r0, [r5, #0]
  405746:	4638      	mov	r0, r7
  405748:	b002      	add	sp, #8
  40574a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40574e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  405752:	e7d5      	b.n	405700 <__d2b+0x1e>
  405754:	6179      	str	r1, [r7, #20]
  405756:	e7e7      	b.n	405728 <__d2b+0x46>
  405758:	a801      	add	r0, sp, #4
  40575a:	f7ff fde6 	bl	40532a <__lo0bits>
  40575e:	9b01      	ldr	r3, [sp, #4]
  405760:	617b      	str	r3, [r7, #20]
  405762:	2101      	movs	r1, #1
  405764:	6139      	str	r1, [r7, #16]
  405766:	3020      	adds	r0, #32
  405768:	e7e5      	b.n	405736 <__d2b+0x54>
  40576a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40576e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405772:	6030      	str	r0, [r6, #0]
  405774:	6918      	ldr	r0, [r3, #16]
  405776:	f7ff fdb9 	bl	4052ec <__hi0bits>
  40577a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40577e:	e7e1      	b.n	405744 <__d2b+0x62>

00405780 <_calloc_r>:
  405780:	b538      	push	{r3, r4, r5, lr}
  405782:	fb02 f401 	mul.w	r4, r2, r1
  405786:	4621      	mov	r1, r4
  405788:	f000 f856 	bl	405838 <_malloc_r>
  40578c:	4605      	mov	r5, r0
  40578e:	b118      	cbz	r0, 405798 <_calloc_r+0x18>
  405790:	4622      	mov	r2, r4
  405792:	2100      	movs	r1, #0
  405794:	f7fd ff3d 	bl	403612 <memset>
  405798:	4628      	mov	r0, r5
  40579a:	bd38      	pop	{r3, r4, r5, pc}

0040579c <_free_r>:
  40579c:	b538      	push	{r3, r4, r5, lr}
  40579e:	4605      	mov	r5, r0
  4057a0:	2900      	cmp	r1, #0
  4057a2:	d045      	beq.n	405830 <_free_r+0x94>
  4057a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4057a8:	1f0c      	subs	r4, r1, #4
  4057aa:	2b00      	cmp	r3, #0
  4057ac:	bfb8      	it	lt
  4057ae:	18e4      	addlt	r4, r4, r3
  4057b0:	f000 fb5a 	bl	405e68 <__malloc_lock>
  4057b4:	4a1f      	ldr	r2, [pc, #124]	; (405834 <_free_r+0x98>)
  4057b6:	6813      	ldr	r3, [r2, #0]
  4057b8:	4610      	mov	r0, r2
  4057ba:	b933      	cbnz	r3, 4057ca <_free_r+0x2e>
  4057bc:	6063      	str	r3, [r4, #4]
  4057be:	6014      	str	r4, [r2, #0]
  4057c0:	4628      	mov	r0, r5
  4057c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4057c6:	f000 bb50 	b.w	405e6a <__malloc_unlock>
  4057ca:	42a3      	cmp	r3, r4
  4057cc:	d90c      	bls.n	4057e8 <_free_r+0x4c>
  4057ce:	6821      	ldr	r1, [r4, #0]
  4057d0:	1862      	adds	r2, r4, r1
  4057d2:	4293      	cmp	r3, r2
  4057d4:	bf04      	itt	eq
  4057d6:	681a      	ldreq	r2, [r3, #0]
  4057d8:	685b      	ldreq	r3, [r3, #4]
  4057da:	6063      	str	r3, [r4, #4]
  4057dc:	bf04      	itt	eq
  4057de:	1852      	addeq	r2, r2, r1
  4057e0:	6022      	streq	r2, [r4, #0]
  4057e2:	6004      	str	r4, [r0, #0]
  4057e4:	e7ec      	b.n	4057c0 <_free_r+0x24>
  4057e6:	4613      	mov	r3, r2
  4057e8:	685a      	ldr	r2, [r3, #4]
  4057ea:	b10a      	cbz	r2, 4057f0 <_free_r+0x54>
  4057ec:	42a2      	cmp	r2, r4
  4057ee:	d9fa      	bls.n	4057e6 <_free_r+0x4a>
  4057f0:	6819      	ldr	r1, [r3, #0]
  4057f2:	1858      	adds	r0, r3, r1
  4057f4:	42a0      	cmp	r0, r4
  4057f6:	d10b      	bne.n	405810 <_free_r+0x74>
  4057f8:	6820      	ldr	r0, [r4, #0]
  4057fa:	4401      	add	r1, r0
  4057fc:	1858      	adds	r0, r3, r1
  4057fe:	4282      	cmp	r2, r0
  405800:	6019      	str	r1, [r3, #0]
  405802:	d1dd      	bne.n	4057c0 <_free_r+0x24>
  405804:	6810      	ldr	r0, [r2, #0]
  405806:	6852      	ldr	r2, [r2, #4]
  405808:	605a      	str	r2, [r3, #4]
  40580a:	4401      	add	r1, r0
  40580c:	6019      	str	r1, [r3, #0]
  40580e:	e7d7      	b.n	4057c0 <_free_r+0x24>
  405810:	d902      	bls.n	405818 <_free_r+0x7c>
  405812:	230c      	movs	r3, #12
  405814:	602b      	str	r3, [r5, #0]
  405816:	e7d3      	b.n	4057c0 <_free_r+0x24>
  405818:	6820      	ldr	r0, [r4, #0]
  40581a:	1821      	adds	r1, r4, r0
  40581c:	428a      	cmp	r2, r1
  40581e:	bf04      	itt	eq
  405820:	6811      	ldreq	r1, [r2, #0]
  405822:	6852      	ldreq	r2, [r2, #4]
  405824:	6062      	str	r2, [r4, #4]
  405826:	bf04      	itt	eq
  405828:	1809      	addeq	r1, r1, r0
  40582a:	6021      	streq	r1, [r4, #0]
  40582c:	605c      	str	r4, [r3, #4]
  40582e:	e7c7      	b.n	4057c0 <_free_r+0x24>
  405830:	bd38      	pop	{r3, r4, r5, pc}
  405832:	bf00      	nop
  405834:	204004c0 	.word	0x204004c0

00405838 <_malloc_r>:
  405838:	b570      	push	{r4, r5, r6, lr}
  40583a:	1ccd      	adds	r5, r1, #3
  40583c:	f025 0503 	bic.w	r5, r5, #3
  405840:	3508      	adds	r5, #8
  405842:	2d0c      	cmp	r5, #12
  405844:	bf38      	it	cc
  405846:	250c      	movcc	r5, #12
  405848:	2d00      	cmp	r5, #0
  40584a:	4606      	mov	r6, r0
  40584c:	db01      	blt.n	405852 <_malloc_r+0x1a>
  40584e:	42a9      	cmp	r1, r5
  405850:	d903      	bls.n	40585a <_malloc_r+0x22>
  405852:	230c      	movs	r3, #12
  405854:	6033      	str	r3, [r6, #0]
  405856:	2000      	movs	r0, #0
  405858:	bd70      	pop	{r4, r5, r6, pc}
  40585a:	f000 fb05 	bl	405e68 <__malloc_lock>
  40585e:	4a23      	ldr	r2, [pc, #140]	; (4058ec <_malloc_r+0xb4>)
  405860:	6814      	ldr	r4, [r2, #0]
  405862:	4621      	mov	r1, r4
  405864:	b991      	cbnz	r1, 40588c <_malloc_r+0x54>
  405866:	4c22      	ldr	r4, [pc, #136]	; (4058f0 <_malloc_r+0xb8>)
  405868:	6823      	ldr	r3, [r4, #0]
  40586a:	b91b      	cbnz	r3, 405874 <_malloc_r+0x3c>
  40586c:	4630      	mov	r0, r6
  40586e:	f000 f97f 	bl	405b70 <_sbrk_r>
  405872:	6020      	str	r0, [r4, #0]
  405874:	4629      	mov	r1, r5
  405876:	4630      	mov	r0, r6
  405878:	f000 f97a 	bl	405b70 <_sbrk_r>
  40587c:	1c43      	adds	r3, r0, #1
  40587e:	d126      	bne.n	4058ce <_malloc_r+0x96>
  405880:	230c      	movs	r3, #12
  405882:	6033      	str	r3, [r6, #0]
  405884:	4630      	mov	r0, r6
  405886:	f000 faf0 	bl	405e6a <__malloc_unlock>
  40588a:	e7e4      	b.n	405856 <_malloc_r+0x1e>
  40588c:	680b      	ldr	r3, [r1, #0]
  40588e:	1b5b      	subs	r3, r3, r5
  405890:	d41a      	bmi.n	4058c8 <_malloc_r+0x90>
  405892:	2b0b      	cmp	r3, #11
  405894:	d90f      	bls.n	4058b6 <_malloc_r+0x7e>
  405896:	600b      	str	r3, [r1, #0]
  405898:	50cd      	str	r5, [r1, r3]
  40589a:	18cc      	adds	r4, r1, r3
  40589c:	4630      	mov	r0, r6
  40589e:	f000 fae4 	bl	405e6a <__malloc_unlock>
  4058a2:	f104 000b 	add.w	r0, r4, #11
  4058a6:	1d23      	adds	r3, r4, #4
  4058a8:	f020 0007 	bic.w	r0, r0, #7
  4058ac:	1ac3      	subs	r3, r0, r3
  4058ae:	d01b      	beq.n	4058e8 <_malloc_r+0xb0>
  4058b0:	425a      	negs	r2, r3
  4058b2:	50e2      	str	r2, [r4, r3]
  4058b4:	bd70      	pop	{r4, r5, r6, pc}
  4058b6:	428c      	cmp	r4, r1
  4058b8:	bf0d      	iteet	eq
  4058ba:	6863      	ldreq	r3, [r4, #4]
  4058bc:	684b      	ldrne	r3, [r1, #4]
  4058be:	6063      	strne	r3, [r4, #4]
  4058c0:	6013      	streq	r3, [r2, #0]
  4058c2:	bf18      	it	ne
  4058c4:	460c      	movne	r4, r1
  4058c6:	e7e9      	b.n	40589c <_malloc_r+0x64>
  4058c8:	460c      	mov	r4, r1
  4058ca:	6849      	ldr	r1, [r1, #4]
  4058cc:	e7ca      	b.n	405864 <_malloc_r+0x2c>
  4058ce:	1cc4      	adds	r4, r0, #3
  4058d0:	f024 0403 	bic.w	r4, r4, #3
  4058d4:	42a0      	cmp	r0, r4
  4058d6:	d005      	beq.n	4058e4 <_malloc_r+0xac>
  4058d8:	1a21      	subs	r1, r4, r0
  4058da:	4630      	mov	r0, r6
  4058dc:	f000 f948 	bl	405b70 <_sbrk_r>
  4058e0:	3001      	adds	r0, #1
  4058e2:	d0cd      	beq.n	405880 <_malloc_r+0x48>
  4058e4:	6025      	str	r5, [r4, #0]
  4058e6:	e7d9      	b.n	40589c <_malloc_r+0x64>
  4058e8:	bd70      	pop	{r4, r5, r6, pc}
  4058ea:	bf00      	nop
  4058ec:	204004c0 	.word	0x204004c0
  4058f0:	204004c4 	.word	0x204004c4

004058f4 <__sfputc_r>:
  4058f4:	6893      	ldr	r3, [r2, #8]
  4058f6:	3b01      	subs	r3, #1
  4058f8:	2b00      	cmp	r3, #0
  4058fa:	b410      	push	{r4}
  4058fc:	6093      	str	r3, [r2, #8]
  4058fe:	da08      	bge.n	405912 <__sfputc_r+0x1e>
  405900:	6994      	ldr	r4, [r2, #24]
  405902:	42a3      	cmp	r3, r4
  405904:	db02      	blt.n	40590c <__sfputc_r+0x18>
  405906:	b2cb      	uxtb	r3, r1
  405908:	2b0a      	cmp	r3, #10
  40590a:	d102      	bne.n	405912 <__sfputc_r+0x1e>
  40590c:	bc10      	pop	{r4}
  40590e:	f000 b983 	b.w	405c18 <__swbuf_r>
  405912:	6813      	ldr	r3, [r2, #0]
  405914:	1c58      	adds	r0, r3, #1
  405916:	6010      	str	r0, [r2, #0]
  405918:	7019      	strb	r1, [r3, #0]
  40591a:	b2c8      	uxtb	r0, r1
  40591c:	bc10      	pop	{r4}
  40591e:	4770      	bx	lr

00405920 <__sfputs_r>:
  405920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405922:	4606      	mov	r6, r0
  405924:	460f      	mov	r7, r1
  405926:	4614      	mov	r4, r2
  405928:	18d5      	adds	r5, r2, r3
  40592a:	42ac      	cmp	r4, r5
  40592c:	d101      	bne.n	405932 <__sfputs_r+0x12>
  40592e:	2000      	movs	r0, #0
  405930:	e007      	b.n	405942 <__sfputs_r+0x22>
  405932:	463a      	mov	r2, r7
  405934:	f814 1b01 	ldrb.w	r1, [r4], #1
  405938:	4630      	mov	r0, r6
  40593a:	f7ff ffdb 	bl	4058f4 <__sfputc_r>
  40593e:	1c43      	adds	r3, r0, #1
  405940:	d1f3      	bne.n	40592a <__sfputs_r+0xa>
  405942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00405944 <_vfiprintf_r>:
  405944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405948:	b09d      	sub	sp, #116	; 0x74
  40594a:	460c      	mov	r4, r1
  40594c:	4617      	mov	r7, r2
  40594e:	9303      	str	r3, [sp, #12]
  405950:	4606      	mov	r6, r0
  405952:	b118      	cbz	r0, 40595c <_vfiprintf_r+0x18>
  405954:	6983      	ldr	r3, [r0, #24]
  405956:	b90b      	cbnz	r3, 40595c <_vfiprintf_r+0x18>
  405958:	f7ff faea 	bl	404f30 <__sinit>
  40595c:	4b7c      	ldr	r3, [pc, #496]	; (405b50 <_vfiprintf_r+0x20c>)
  40595e:	429c      	cmp	r4, r3
  405960:	d157      	bne.n	405a12 <_vfiprintf_r+0xce>
  405962:	6874      	ldr	r4, [r6, #4]
  405964:	89a3      	ldrh	r3, [r4, #12]
  405966:	0718      	lsls	r0, r3, #28
  405968:	d55d      	bpl.n	405a26 <_vfiprintf_r+0xe2>
  40596a:	6923      	ldr	r3, [r4, #16]
  40596c:	2b00      	cmp	r3, #0
  40596e:	d05a      	beq.n	405a26 <_vfiprintf_r+0xe2>
  405970:	2300      	movs	r3, #0
  405972:	9309      	str	r3, [sp, #36]	; 0x24
  405974:	2320      	movs	r3, #32
  405976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40597a:	2330      	movs	r3, #48	; 0x30
  40597c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  405980:	f04f 0b01 	mov.w	fp, #1
  405984:	46b8      	mov	r8, r7
  405986:	4645      	mov	r5, r8
  405988:	f815 3b01 	ldrb.w	r3, [r5], #1
  40598c:	2b00      	cmp	r3, #0
  40598e:	d155      	bne.n	405a3c <_vfiprintf_r+0xf8>
  405990:	ebb8 0a07 	subs.w	sl, r8, r7
  405994:	d00b      	beq.n	4059ae <_vfiprintf_r+0x6a>
  405996:	4653      	mov	r3, sl
  405998:	463a      	mov	r2, r7
  40599a:	4621      	mov	r1, r4
  40599c:	4630      	mov	r0, r6
  40599e:	f7ff ffbf 	bl	405920 <__sfputs_r>
  4059a2:	3001      	adds	r0, #1
  4059a4:	f000 80c4 	beq.w	405b30 <_vfiprintf_r+0x1ec>
  4059a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4059aa:	4453      	add	r3, sl
  4059ac:	9309      	str	r3, [sp, #36]	; 0x24
  4059ae:	f898 3000 	ldrb.w	r3, [r8]
  4059b2:	2b00      	cmp	r3, #0
  4059b4:	f000 80bc 	beq.w	405b30 <_vfiprintf_r+0x1ec>
  4059b8:	2300      	movs	r3, #0
  4059ba:	f04f 32ff 	mov.w	r2, #4294967295
  4059be:	9304      	str	r3, [sp, #16]
  4059c0:	9307      	str	r3, [sp, #28]
  4059c2:	9205      	str	r2, [sp, #20]
  4059c4:	9306      	str	r3, [sp, #24]
  4059c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  4059ca:	931a      	str	r3, [sp, #104]	; 0x68
  4059cc:	2205      	movs	r2, #5
  4059ce:	7829      	ldrb	r1, [r5, #0]
  4059d0:	4860      	ldr	r0, [pc, #384]	; (405b54 <_vfiprintf_r+0x210>)
  4059d2:	f7ff fbb5 	bl	405140 <memchr>
  4059d6:	f105 0801 	add.w	r8, r5, #1
  4059da:	9b04      	ldr	r3, [sp, #16]
  4059dc:	2800      	cmp	r0, #0
  4059de:	d131      	bne.n	405a44 <_vfiprintf_r+0x100>
  4059e0:	06d9      	lsls	r1, r3, #27
  4059e2:	bf44      	itt	mi
  4059e4:	2220      	movmi	r2, #32
  4059e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4059ea:	071a      	lsls	r2, r3, #28
  4059ec:	bf44      	itt	mi
  4059ee:	222b      	movmi	r2, #43	; 0x2b
  4059f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4059f4:	782a      	ldrb	r2, [r5, #0]
  4059f6:	2a2a      	cmp	r2, #42	; 0x2a
  4059f8:	d02c      	beq.n	405a54 <_vfiprintf_r+0x110>
  4059fa:	9a07      	ldr	r2, [sp, #28]
  4059fc:	2100      	movs	r1, #0
  4059fe:	200a      	movs	r0, #10
  405a00:	46a8      	mov	r8, r5
  405a02:	3501      	adds	r5, #1
  405a04:	f898 3000 	ldrb.w	r3, [r8]
  405a08:	3b30      	subs	r3, #48	; 0x30
  405a0a:	2b09      	cmp	r3, #9
  405a0c:	d96d      	bls.n	405aea <_vfiprintf_r+0x1a6>
  405a0e:	b371      	cbz	r1, 405a6e <_vfiprintf_r+0x12a>
  405a10:	e026      	b.n	405a60 <_vfiprintf_r+0x11c>
  405a12:	4b51      	ldr	r3, [pc, #324]	; (405b58 <_vfiprintf_r+0x214>)
  405a14:	429c      	cmp	r4, r3
  405a16:	d101      	bne.n	405a1c <_vfiprintf_r+0xd8>
  405a18:	68b4      	ldr	r4, [r6, #8]
  405a1a:	e7a3      	b.n	405964 <_vfiprintf_r+0x20>
  405a1c:	4b4f      	ldr	r3, [pc, #316]	; (405b5c <_vfiprintf_r+0x218>)
  405a1e:	429c      	cmp	r4, r3
  405a20:	bf08      	it	eq
  405a22:	68f4      	ldreq	r4, [r6, #12]
  405a24:	e79e      	b.n	405964 <_vfiprintf_r+0x20>
  405a26:	4621      	mov	r1, r4
  405a28:	4630      	mov	r0, r6
  405a2a:	f000 f959 	bl	405ce0 <__swsetup_r>
  405a2e:	2800      	cmp	r0, #0
  405a30:	d09e      	beq.n	405970 <_vfiprintf_r+0x2c>
  405a32:	f04f 30ff 	mov.w	r0, #4294967295
  405a36:	b01d      	add	sp, #116	; 0x74
  405a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a3c:	2b25      	cmp	r3, #37	; 0x25
  405a3e:	d0a7      	beq.n	405990 <_vfiprintf_r+0x4c>
  405a40:	46a8      	mov	r8, r5
  405a42:	e7a0      	b.n	405986 <_vfiprintf_r+0x42>
  405a44:	4a43      	ldr	r2, [pc, #268]	; (405b54 <_vfiprintf_r+0x210>)
  405a46:	1a80      	subs	r0, r0, r2
  405a48:	fa0b f000 	lsl.w	r0, fp, r0
  405a4c:	4318      	orrs	r0, r3
  405a4e:	9004      	str	r0, [sp, #16]
  405a50:	4645      	mov	r5, r8
  405a52:	e7bb      	b.n	4059cc <_vfiprintf_r+0x88>
  405a54:	9a03      	ldr	r2, [sp, #12]
  405a56:	1d11      	adds	r1, r2, #4
  405a58:	6812      	ldr	r2, [r2, #0]
  405a5a:	9103      	str	r1, [sp, #12]
  405a5c:	2a00      	cmp	r2, #0
  405a5e:	db01      	blt.n	405a64 <_vfiprintf_r+0x120>
  405a60:	9207      	str	r2, [sp, #28]
  405a62:	e004      	b.n	405a6e <_vfiprintf_r+0x12a>
  405a64:	4252      	negs	r2, r2
  405a66:	f043 0302 	orr.w	r3, r3, #2
  405a6a:	9207      	str	r2, [sp, #28]
  405a6c:	9304      	str	r3, [sp, #16]
  405a6e:	f898 3000 	ldrb.w	r3, [r8]
  405a72:	2b2e      	cmp	r3, #46	; 0x2e
  405a74:	d110      	bne.n	405a98 <_vfiprintf_r+0x154>
  405a76:	f898 3001 	ldrb.w	r3, [r8, #1]
  405a7a:	2b2a      	cmp	r3, #42	; 0x2a
  405a7c:	f108 0101 	add.w	r1, r8, #1
  405a80:	d137      	bne.n	405af2 <_vfiprintf_r+0x1ae>
  405a82:	9b03      	ldr	r3, [sp, #12]
  405a84:	1d1a      	adds	r2, r3, #4
  405a86:	681b      	ldr	r3, [r3, #0]
  405a88:	9203      	str	r2, [sp, #12]
  405a8a:	2b00      	cmp	r3, #0
  405a8c:	bfb8      	it	lt
  405a8e:	f04f 33ff 	movlt.w	r3, #4294967295
  405a92:	f108 0802 	add.w	r8, r8, #2
  405a96:	9305      	str	r3, [sp, #20]
  405a98:	4d31      	ldr	r5, [pc, #196]	; (405b60 <_vfiprintf_r+0x21c>)
  405a9a:	f898 1000 	ldrb.w	r1, [r8]
  405a9e:	2203      	movs	r2, #3
  405aa0:	4628      	mov	r0, r5
  405aa2:	f7ff fb4d 	bl	405140 <memchr>
  405aa6:	b140      	cbz	r0, 405aba <_vfiprintf_r+0x176>
  405aa8:	2340      	movs	r3, #64	; 0x40
  405aaa:	1b40      	subs	r0, r0, r5
  405aac:	fa03 f000 	lsl.w	r0, r3, r0
  405ab0:	9b04      	ldr	r3, [sp, #16]
  405ab2:	4303      	orrs	r3, r0
  405ab4:	9304      	str	r3, [sp, #16]
  405ab6:	f108 0801 	add.w	r8, r8, #1
  405aba:	f898 1000 	ldrb.w	r1, [r8]
  405abe:	4829      	ldr	r0, [pc, #164]	; (405b64 <_vfiprintf_r+0x220>)
  405ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  405ac4:	2206      	movs	r2, #6
  405ac6:	f108 0701 	add.w	r7, r8, #1
  405aca:	f7ff fb39 	bl	405140 <memchr>
  405ace:	2800      	cmp	r0, #0
  405ad0:	d034      	beq.n	405b3c <_vfiprintf_r+0x1f8>
  405ad2:	4b25      	ldr	r3, [pc, #148]	; (405b68 <_vfiprintf_r+0x224>)
  405ad4:	bb03      	cbnz	r3, 405b18 <_vfiprintf_r+0x1d4>
  405ad6:	9b03      	ldr	r3, [sp, #12]
  405ad8:	3307      	adds	r3, #7
  405ada:	f023 0307 	bic.w	r3, r3, #7
  405ade:	3308      	adds	r3, #8
  405ae0:	9303      	str	r3, [sp, #12]
  405ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405ae4:	444b      	add	r3, r9
  405ae6:	9309      	str	r3, [sp, #36]	; 0x24
  405ae8:	e74c      	b.n	405984 <_vfiprintf_r+0x40>
  405aea:	fb00 3202 	mla	r2, r0, r2, r3
  405aee:	2101      	movs	r1, #1
  405af0:	e786      	b.n	405a00 <_vfiprintf_r+0xbc>
  405af2:	2300      	movs	r3, #0
  405af4:	9305      	str	r3, [sp, #20]
  405af6:	4618      	mov	r0, r3
  405af8:	250a      	movs	r5, #10
  405afa:	4688      	mov	r8, r1
  405afc:	3101      	adds	r1, #1
  405afe:	f898 2000 	ldrb.w	r2, [r8]
  405b02:	3a30      	subs	r2, #48	; 0x30
  405b04:	2a09      	cmp	r2, #9
  405b06:	d903      	bls.n	405b10 <_vfiprintf_r+0x1cc>
  405b08:	2b00      	cmp	r3, #0
  405b0a:	d0c5      	beq.n	405a98 <_vfiprintf_r+0x154>
  405b0c:	9005      	str	r0, [sp, #20]
  405b0e:	e7c3      	b.n	405a98 <_vfiprintf_r+0x154>
  405b10:	fb05 2000 	mla	r0, r5, r0, r2
  405b14:	2301      	movs	r3, #1
  405b16:	e7f0      	b.n	405afa <_vfiprintf_r+0x1b6>
  405b18:	ab03      	add	r3, sp, #12
  405b1a:	9300      	str	r3, [sp, #0]
  405b1c:	4622      	mov	r2, r4
  405b1e:	4b13      	ldr	r3, [pc, #76]	; (405b6c <_vfiprintf_r+0x228>)
  405b20:	a904      	add	r1, sp, #16
  405b22:	4630      	mov	r0, r6
  405b24:	f7fd fe0e 	bl	403744 <_printf_float>
  405b28:	f1b0 3fff 	cmp.w	r0, #4294967295
  405b2c:	4681      	mov	r9, r0
  405b2e:	d1d8      	bne.n	405ae2 <_vfiprintf_r+0x19e>
  405b30:	89a3      	ldrh	r3, [r4, #12]
  405b32:	065b      	lsls	r3, r3, #25
  405b34:	f53f af7d 	bmi.w	405a32 <_vfiprintf_r+0xee>
  405b38:	9809      	ldr	r0, [sp, #36]	; 0x24
  405b3a:	e77c      	b.n	405a36 <_vfiprintf_r+0xf2>
  405b3c:	ab03      	add	r3, sp, #12
  405b3e:	9300      	str	r3, [sp, #0]
  405b40:	4622      	mov	r2, r4
  405b42:	4b0a      	ldr	r3, [pc, #40]	; (405b6c <_vfiprintf_r+0x228>)
  405b44:	a904      	add	r1, sp, #16
  405b46:	4630      	mov	r0, r6
  405b48:	f7fe f8aa 	bl	403ca0 <_printf_i>
  405b4c:	e7ec      	b.n	405b28 <_vfiprintf_r+0x1e4>
  405b4e:	bf00      	nop
  405b50:	00406560 	.word	0x00406560
  405b54:	0040669c 	.word	0x0040669c
  405b58:	00406580 	.word	0x00406580
  405b5c:	00406540 	.word	0x00406540
  405b60:	004066a2 	.word	0x004066a2
  405b64:	004066a6 	.word	0x004066a6
  405b68:	00403745 	.word	0x00403745
  405b6c:	00405921 	.word	0x00405921

00405b70 <_sbrk_r>:
  405b70:	b538      	push	{r3, r4, r5, lr}
  405b72:	4c06      	ldr	r4, [pc, #24]	; (405b8c <_sbrk_r+0x1c>)
  405b74:	2300      	movs	r3, #0
  405b76:	4605      	mov	r5, r0
  405b78:	4608      	mov	r0, r1
  405b7a:	6023      	str	r3, [r4, #0]
  405b7c:	f7fb ff56 	bl	401a2c <_sbrk>
  405b80:	1c43      	adds	r3, r0, #1
  405b82:	d102      	bne.n	405b8a <_sbrk_r+0x1a>
  405b84:	6823      	ldr	r3, [r4, #0]
  405b86:	b103      	cbz	r3, 405b8a <_sbrk_r+0x1a>
  405b88:	602b      	str	r3, [r5, #0]
  405b8a:	bd38      	pop	{r3, r4, r5, pc}
  405b8c:	20400714 	.word	0x20400714

00405b90 <__sread>:
  405b90:	b510      	push	{r4, lr}
  405b92:	460c      	mov	r4, r1
  405b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405b98:	f000 f968 	bl	405e6c <_read_r>
  405b9c:	2800      	cmp	r0, #0
  405b9e:	bfab      	itete	ge
  405ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  405ba2:	89a3      	ldrhlt	r3, [r4, #12]
  405ba4:	181b      	addge	r3, r3, r0
  405ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  405baa:	bfac      	ite	ge
  405bac:	6563      	strge	r3, [r4, #84]	; 0x54
  405bae:	81a3      	strhlt	r3, [r4, #12]
  405bb0:	bd10      	pop	{r4, pc}

00405bb2 <__swrite>:
  405bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405bb6:	461f      	mov	r7, r3
  405bb8:	898b      	ldrh	r3, [r1, #12]
  405bba:	05db      	lsls	r3, r3, #23
  405bbc:	4605      	mov	r5, r0
  405bbe:	460c      	mov	r4, r1
  405bc0:	4616      	mov	r6, r2
  405bc2:	d505      	bpl.n	405bd0 <__swrite+0x1e>
  405bc4:	2302      	movs	r3, #2
  405bc6:	2200      	movs	r2, #0
  405bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405bcc:	f000 f928 	bl	405e20 <_lseek_r>
  405bd0:	89a3      	ldrh	r3, [r4, #12]
  405bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405bda:	81a3      	strh	r3, [r4, #12]
  405bdc:	4632      	mov	r2, r6
  405bde:	463b      	mov	r3, r7
  405be0:	4628      	mov	r0, r5
  405be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405be6:	f000 b869 	b.w	405cbc <_write_r>

00405bea <__sseek>:
  405bea:	b510      	push	{r4, lr}
  405bec:	460c      	mov	r4, r1
  405bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405bf2:	f000 f915 	bl	405e20 <_lseek_r>
  405bf6:	1c43      	adds	r3, r0, #1
  405bf8:	89a3      	ldrh	r3, [r4, #12]
  405bfa:	bf15      	itete	ne
  405bfc:	6560      	strne	r0, [r4, #84]	; 0x54
  405bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405c06:	81a3      	strheq	r3, [r4, #12]
  405c08:	bf18      	it	ne
  405c0a:	81a3      	strhne	r3, [r4, #12]
  405c0c:	bd10      	pop	{r4, pc}

00405c0e <__sclose>:
  405c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405c12:	f000 b8d3 	b.w	405dbc <_close_r>
	...

00405c18 <__swbuf_r>:
  405c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405c1a:	460e      	mov	r6, r1
  405c1c:	4614      	mov	r4, r2
  405c1e:	4605      	mov	r5, r0
  405c20:	b118      	cbz	r0, 405c2a <__swbuf_r+0x12>
  405c22:	6983      	ldr	r3, [r0, #24]
  405c24:	b90b      	cbnz	r3, 405c2a <__swbuf_r+0x12>
  405c26:	f7ff f983 	bl	404f30 <__sinit>
  405c2a:	4b21      	ldr	r3, [pc, #132]	; (405cb0 <__swbuf_r+0x98>)
  405c2c:	429c      	cmp	r4, r3
  405c2e:	d12a      	bne.n	405c86 <__swbuf_r+0x6e>
  405c30:	686c      	ldr	r4, [r5, #4]
  405c32:	69a3      	ldr	r3, [r4, #24]
  405c34:	60a3      	str	r3, [r4, #8]
  405c36:	89a3      	ldrh	r3, [r4, #12]
  405c38:	071a      	lsls	r2, r3, #28
  405c3a:	d52e      	bpl.n	405c9a <__swbuf_r+0x82>
  405c3c:	6923      	ldr	r3, [r4, #16]
  405c3e:	b363      	cbz	r3, 405c9a <__swbuf_r+0x82>
  405c40:	6923      	ldr	r3, [r4, #16]
  405c42:	6820      	ldr	r0, [r4, #0]
  405c44:	1ac0      	subs	r0, r0, r3
  405c46:	6963      	ldr	r3, [r4, #20]
  405c48:	b2f6      	uxtb	r6, r6
  405c4a:	4298      	cmp	r0, r3
  405c4c:	4637      	mov	r7, r6
  405c4e:	db04      	blt.n	405c5a <__swbuf_r+0x42>
  405c50:	4621      	mov	r1, r4
  405c52:	4628      	mov	r0, r5
  405c54:	f7ff f902 	bl	404e5c <_fflush_r>
  405c58:	bb28      	cbnz	r0, 405ca6 <__swbuf_r+0x8e>
  405c5a:	68a3      	ldr	r3, [r4, #8]
  405c5c:	3b01      	subs	r3, #1
  405c5e:	60a3      	str	r3, [r4, #8]
  405c60:	6823      	ldr	r3, [r4, #0]
  405c62:	1c5a      	adds	r2, r3, #1
  405c64:	6022      	str	r2, [r4, #0]
  405c66:	701e      	strb	r6, [r3, #0]
  405c68:	6963      	ldr	r3, [r4, #20]
  405c6a:	3001      	adds	r0, #1
  405c6c:	4298      	cmp	r0, r3
  405c6e:	d004      	beq.n	405c7a <__swbuf_r+0x62>
  405c70:	89a3      	ldrh	r3, [r4, #12]
  405c72:	07db      	lsls	r3, r3, #31
  405c74:	d519      	bpl.n	405caa <__swbuf_r+0x92>
  405c76:	2e0a      	cmp	r6, #10
  405c78:	d117      	bne.n	405caa <__swbuf_r+0x92>
  405c7a:	4621      	mov	r1, r4
  405c7c:	4628      	mov	r0, r5
  405c7e:	f7ff f8ed 	bl	404e5c <_fflush_r>
  405c82:	b190      	cbz	r0, 405caa <__swbuf_r+0x92>
  405c84:	e00f      	b.n	405ca6 <__swbuf_r+0x8e>
  405c86:	4b0b      	ldr	r3, [pc, #44]	; (405cb4 <__swbuf_r+0x9c>)
  405c88:	429c      	cmp	r4, r3
  405c8a:	d101      	bne.n	405c90 <__swbuf_r+0x78>
  405c8c:	68ac      	ldr	r4, [r5, #8]
  405c8e:	e7d0      	b.n	405c32 <__swbuf_r+0x1a>
  405c90:	4b09      	ldr	r3, [pc, #36]	; (405cb8 <__swbuf_r+0xa0>)
  405c92:	429c      	cmp	r4, r3
  405c94:	bf08      	it	eq
  405c96:	68ec      	ldreq	r4, [r5, #12]
  405c98:	e7cb      	b.n	405c32 <__swbuf_r+0x1a>
  405c9a:	4621      	mov	r1, r4
  405c9c:	4628      	mov	r0, r5
  405c9e:	f000 f81f 	bl	405ce0 <__swsetup_r>
  405ca2:	2800      	cmp	r0, #0
  405ca4:	d0cc      	beq.n	405c40 <__swbuf_r+0x28>
  405ca6:	f04f 37ff 	mov.w	r7, #4294967295
  405caa:	4638      	mov	r0, r7
  405cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405cae:	bf00      	nop
  405cb0:	00406560 	.word	0x00406560
  405cb4:	00406580 	.word	0x00406580
  405cb8:	00406540 	.word	0x00406540

00405cbc <_write_r>:
  405cbc:	b538      	push	{r3, r4, r5, lr}
  405cbe:	4c07      	ldr	r4, [pc, #28]	; (405cdc <_write_r+0x20>)
  405cc0:	4605      	mov	r5, r0
  405cc2:	4608      	mov	r0, r1
  405cc4:	4611      	mov	r1, r2
  405cc6:	2200      	movs	r2, #0
  405cc8:	6022      	str	r2, [r4, #0]
  405cca:	461a      	mov	r2, r3
  405ccc:	f7fc ff34 	bl	402b38 <_write>
  405cd0:	1c43      	adds	r3, r0, #1
  405cd2:	d102      	bne.n	405cda <_write_r+0x1e>
  405cd4:	6823      	ldr	r3, [r4, #0]
  405cd6:	b103      	cbz	r3, 405cda <_write_r+0x1e>
  405cd8:	602b      	str	r3, [r5, #0]
  405cda:	bd38      	pop	{r3, r4, r5, pc}
  405cdc:	20400714 	.word	0x20400714

00405ce0 <__swsetup_r>:
  405ce0:	4b32      	ldr	r3, [pc, #200]	; (405dac <__swsetup_r+0xcc>)
  405ce2:	b570      	push	{r4, r5, r6, lr}
  405ce4:	681d      	ldr	r5, [r3, #0]
  405ce6:	4606      	mov	r6, r0
  405ce8:	460c      	mov	r4, r1
  405cea:	b125      	cbz	r5, 405cf6 <__swsetup_r+0x16>
  405cec:	69ab      	ldr	r3, [r5, #24]
  405cee:	b913      	cbnz	r3, 405cf6 <__swsetup_r+0x16>
  405cf0:	4628      	mov	r0, r5
  405cf2:	f7ff f91d 	bl	404f30 <__sinit>
  405cf6:	4b2e      	ldr	r3, [pc, #184]	; (405db0 <__swsetup_r+0xd0>)
  405cf8:	429c      	cmp	r4, r3
  405cfa:	d10f      	bne.n	405d1c <__swsetup_r+0x3c>
  405cfc:	686c      	ldr	r4, [r5, #4]
  405cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405d02:	b29a      	uxth	r2, r3
  405d04:	0715      	lsls	r5, r2, #28
  405d06:	d42c      	bmi.n	405d62 <__swsetup_r+0x82>
  405d08:	06d0      	lsls	r0, r2, #27
  405d0a:	d411      	bmi.n	405d30 <__swsetup_r+0x50>
  405d0c:	2209      	movs	r2, #9
  405d0e:	6032      	str	r2, [r6, #0]
  405d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405d14:	81a3      	strh	r3, [r4, #12]
  405d16:	f04f 30ff 	mov.w	r0, #4294967295
  405d1a:	bd70      	pop	{r4, r5, r6, pc}
  405d1c:	4b25      	ldr	r3, [pc, #148]	; (405db4 <__swsetup_r+0xd4>)
  405d1e:	429c      	cmp	r4, r3
  405d20:	d101      	bne.n	405d26 <__swsetup_r+0x46>
  405d22:	68ac      	ldr	r4, [r5, #8]
  405d24:	e7eb      	b.n	405cfe <__swsetup_r+0x1e>
  405d26:	4b24      	ldr	r3, [pc, #144]	; (405db8 <__swsetup_r+0xd8>)
  405d28:	429c      	cmp	r4, r3
  405d2a:	bf08      	it	eq
  405d2c:	68ec      	ldreq	r4, [r5, #12]
  405d2e:	e7e6      	b.n	405cfe <__swsetup_r+0x1e>
  405d30:	0751      	lsls	r1, r2, #29
  405d32:	d512      	bpl.n	405d5a <__swsetup_r+0x7a>
  405d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405d36:	b141      	cbz	r1, 405d4a <__swsetup_r+0x6a>
  405d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405d3c:	4299      	cmp	r1, r3
  405d3e:	d002      	beq.n	405d46 <__swsetup_r+0x66>
  405d40:	4630      	mov	r0, r6
  405d42:	f7ff fd2b 	bl	40579c <_free_r>
  405d46:	2300      	movs	r3, #0
  405d48:	6363      	str	r3, [r4, #52]	; 0x34
  405d4a:	89a3      	ldrh	r3, [r4, #12]
  405d4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  405d50:	81a3      	strh	r3, [r4, #12]
  405d52:	2300      	movs	r3, #0
  405d54:	6063      	str	r3, [r4, #4]
  405d56:	6923      	ldr	r3, [r4, #16]
  405d58:	6023      	str	r3, [r4, #0]
  405d5a:	89a3      	ldrh	r3, [r4, #12]
  405d5c:	f043 0308 	orr.w	r3, r3, #8
  405d60:	81a3      	strh	r3, [r4, #12]
  405d62:	6923      	ldr	r3, [r4, #16]
  405d64:	b94b      	cbnz	r3, 405d7a <__swsetup_r+0x9a>
  405d66:	89a3      	ldrh	r3, [r4, #12]
  405d68:	f403 7320 	and.w	r3, r3, #640	; 0x280
  405d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405d70:	d003      	beq.n	405d7a <__swsetup_r+0x9a>
  405d72:	4621      	mov	r1, r4
  405d74:	4630      	mov	r0, r6
  405d76:	f7ff f997 	bl	4050a8 <__smakebuf_r>
  405d7a:	89a2      	ldrh	r2, [r4, #12]
  405d7c:	f012 0301 	ands.w	r3, r2, #1
  405d80:	d00c      	beq.n	405d9c <__swsetup_r+0xbc>
  405d82:	2300      	movs	r3, #0
  405d84:	60a3      	str	r3, [r4, #8]
  405d86:	6963      	ldr	r3, [r4, #20]
  405d88:	425b      	negs	r3, r3
  405d8a:	61a3      	str	r3, [r4, #24]
  405d8c:	6923      	ldr	r3, [r4, #16]
  405d8e:	b953      	cbnz	r3, 405da6 <__swsetup_r+0xc6>
  405d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405d94:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  405d98:	d1ba      	bne.n	405d10 <__swsetup_r+0x30>
  405d9a:	bd70      	pop	{r4, r5, r6, pc}
  405d9c:	0792      	lsls	r2, r2, #30
  405d9e:	bf58      	it	pl
  405da0:	6963      	ldrpl	r3, [r4, #20]
  405da2:	60a3      	str	r3, [r4, #8]
  405da4:	e7f2      	b.n	405d8c <__swsetup_r+0xac>
  405da6:	2000      	movs	r0, #0
  405da8:	e7f7      	b.n	405d9a <__swsetup_r+0xba>
  405daa:	bf00      	nop
  405dac:	20400048 	.word	0x20400048
  405db0:	00406560 	.word	0x00406560
  405db4:	00406580 	.word	0x00406580
  405db8:	00406540 	.word	0x00406540

00405dbc <_close_r>:
  405dbc:	b538      	push	{r3, r4, r5, lr}
  405dbe:	4c06      	ldr	r4, [pc, #24]	; (405dd8 <_close_r+0x1c>)
  405dc0:	2300      	movs	r3, #0
  405dc2:	4605      	mov	r5, r0
  405dc4:	4608      	mov	r0, r1
  405dc6:	6023      	str	r3, [r4, #0]
  405dc8:	f7fb fe42 	bl	401a50 <_close>
  405dcc:	1c43      	adds	r3, r0, #1
  405dce:	d102      	bne.n	405dd6 <_close_r+0x1a>
  405dd0:	6823      	ldr	r3, [r4, #0]
  405dd2:	b103      	cbz	r3, 405dd6 <_close_r+0x1a>
  405dd4:	602b      	str	r3, [r5, #0]
  405dd6:	bd38      	pop	{r3, r4, r5, pc}
  405dd8:	20400714 	.word	0x20400714

00405ddc <_fstat_r>:
  405ddc:	b538      	push	{r3, r4, r5, lr}
  405dde:	4c07      	ldr	r4, [pc, #28]	; (405dfc <_fstat_r+0x20>)
  405de0:	2300      	movs	r3, #0
  405de2:	4605      	mov	r5, r0
  405de4:	4608      	mov	r0, r1
  405de6:	4611      	mov	r1, r2
  405de8:	6023      	str	r3, [r4, #0]
  405dea:	f7fb fe34 	bl	401a56 <_fstat>
  405dee:	1c43      	adds	r3, r0, #1
  405df0:	d102      	bne.n	405df8 <_fstat_r+0x1c>
  405df2:	6823      	ldr	r3, [r4, #0]
  405df4:	b103      	cbz	r3, 405df8 <_fstat_r+0x1c>
  405df6:	602b      	str	r3, [r5, #0]
  405df8:	bd38      	pop	{r3, r4, r5, pc}
  405dfa:	bf00      	nop
  405dfc:	20400714 	.word	0x20400714

00405e00 <_isatty_r>:
  405e00:	b538      	push	{r3, r4, r5, lr}
  405e02:	4c06      	ldr	r4, [pc, #24]	; (405e1c <_isatty_r+0x1c>)
  405e04:	2300      	movs	r3, #0
  405e06:	4605      	mov	r5, r0
  405e08:	4608      	mov	r0, r1
  405e0a:	6023      	str	r3, [r4, #0]
  405e0c:	f7fb fe28 	bl	401a60 <_isatty>
  405e10:	1c43      	adds	r3, r0, #1
  405e12:	d102      	bne.n	405e1a <_isatty_r+0x1a>
  405e14:	6823      	ldr	r3, [r4, #0]
  405e16:	b103      	cbz	r3, 405e1a <_isatty_r+0x1a>
  405e18:	602b      	str	r3, [r5, #0]
  405e1a:	bd38      	pop	{r3, r4, r5, pc}
  405e1c:	20400714 	.word	0x20400714

00405e20 <_lseek_r>:
  405e20:	b538      	push	{r3, r4, r5, lr}
  405e22:	4c07      	ldr	r4, [pc, #28]	; (405e40 <_lseek_r+0x20>)
  405e24:	4605      	mov	r5, r0
  405e26:	4608      	mov	r0, r1
  405e28:	4611      	mov	r1, r2
  405e2a:	2200      	movs	r2, #0
  405e2c:	6022      	str	r2, [r4, #0]
  405e2e:	461a      	mov	r2, r3
  405e30:	f7fb fe18 	bl	401a64 <_lseek>
  405e34:	1c43      	adds	r3, r0, #1
  405e36:	d102      	bne.n	405e3e <_lseek_r+0x1e>
  405e38:	6823      	ldr	r3, [r4, #0]
  405e3a:	b103      	cbz	r3, 405e3e <_lseek_r+0x1e>
  405e3c:	602b      	str	r3, [r5, #0]
  405e3e:	bd38      	pop	{r3, r4, r5, pc}
  405e40:	20400714 	.word	0x20400714

00405e44 <__ascii_mbtowc>:
  405e44:	b082      	sub	sp, #8
  405e46:	b901      	cbnz	r1, 405e4a <__ascii_mbtowc+0x6>
  405e48:	a901      	add	r1, sp, #4
  405e4a:	b142      	cbz	r2, 405e5e <__ascii_mbtowc+0x1a>
  405e4c:	b14b      	cbz	r3, 405e62 <__ascii_mbtowc+0x1e>
  405e4e:	7813      	ldrb	r3, [r2, #0]
  405e50:	600b      	str	r3, [r1, #0]
  405e52:	7812      	ldrb	r2, [r2, #0]
  405e54:	1c10      	adds	r0, r2, #0
  405e56:	bf18      	it	ne
  405e58:	2001      	movne	r0, #1
  405e5a:	b002      	add	sp, #8
  405e5c:	4770      	bx	lr
  405e5e:	4610      	mov	r0, r2
  405e60:	e7fb      	b.n	405e5a <__ascii_mbtowc+0x16>
  405e62:	f06f 0001 	mvn.w	r0, #1
  405e66:	e7f8      	b.n	405e5a <__ascii_mbtowc+0x16>

00405e68 <__malloc_lock>:
  405e68:	4770      	bx	lr

00405e6a <__malloc_unlock>:
  405e6a:	4770      	bx	lr

00405e6c <_read_r>:
  405e6c:	b538      	push	{r3, r4, r5, lr}
  405e6e:	4c07      	ldr	r4, [pc, #28]	; (405e8c <_read_r+0x20>)
  405e70:	4605      	mov	r5, r0
  405e72:	4608      	mov	r0, r1
  405e74:	4611      	mov	r1, r2
  405e76:	2200      	movs	r2, #0
  405e78:	6022      	str	r2, [r4, #0]
  405e7a:	461a      	mov	r2, r3
  405e7c:	f7fc fe4a 	bl	402b14 <_read>
  405e80:	1c43      	adds	r3, r0, #1
  405e82:	d102      	bne.n	405e8a <_read_r+0x1e>
  405e84:	6823      	ldr	r3, [r4, #0]
  405e86:	b103      	cbz	r3, 405e8a <_read_r+0x1e>
  405e88:	602b      	str	r3, [r5, #0]
  405e8a:	bd38      	pop	{r3, r4, r5, pc}
  405e8c:	20400714 	.word	0x20400714

00405e90 <__ascii_wctomb>:
  405e90:	b149      	cbz	r1, 405ea6 <__ascii_wctomb+0x16>
  405e92:	2aff      	cmp	r2, #255	; 0xff
  405e94:	bf85      	ittet	hi
  405e96:	238a      	movhi	r3, #138	; 0x8a
  405e98:	6003      	strhi	r3, [r0, #0]
  405e9a:	700a      	strbls	r2, [r1, #0]
  405e9c:	f04f 30ff 	movhi.w	r0, #4294967295
  405ea0:	bf98      	it	ls
  405ea2:	2001      	movls	r0, #1
  405ea4:	4770      	bx	lr
  405ea6:	4608      	mov	r0, r1
  405ea8:	4770      	bx	lr
  405eaa:	0000      	movs	r0, r0
  405eac:	61746144 	.word	0x61746144
  405eb0:	6c6f6320 	.word	0x6c6f6320
  405eb4:	7463656c 	.word	0x7463656c
  405eb8:	202c6465 	.word	0x202c6465
  405ebc:	6e75616c 	.word	0x6e75616c
  405ec0:	6e696863 	.word	0x6e696863
  405ec4:	6f632067 	.word	0x6f632067
  405ec8:	6f72746e 	.word	0x6f72746e
  405ecc:	6f6c206c 	.word	0x6f6c206c
  405ed0:	6620706f 	.word	0x6620706f
  405ed4:	206d6f72 	.word	0x206d6f72
  405ed8:	20636461 	.word	0x20636461
  405edc:	00000a30 	.word	0x00000a30
  405ee0:	25206925 	.word	0x25206925
  405ee4:	69252069 	.word	0x69252069
  405ee8:	20692520 	.word	0x20692520
  405eec:	00000a20 	.word	0x00000a20
  405ef0:	61746144 	.word	0x61746144
  405ef4:	6c6f6320 	.word	0x6c6f6320
  405ef8:	7463656c 	.word	0x7463656c
  405efc:	202c6465 	.word	0x202c6465
  405f00:	6e75616c 	.word	0x6e75616c
  405f04:	6e696863 	.word	0x6e696863
  405f08:	6f632067 	.word	0x6f632067
  405f0c:	6f72746e 	.word	0x6f72746e
  405f10:	6f6c206c 	.word	0x6f6c206c
  405f14:	6620706f 	.word	0x6620706f
  405f18:	206d6f72 	.word	0x206d6f72
  405f1c:	20636461 	.word	0x20636461
  405f20:	000a2031 	.word	0x000a2031
  405f24:	4441200a 	.word	0x4441200a
  405f28:	65542043 	.word	0x65542043
  405f2c:	7265706d 	.word	0x7265706d
  405f30:	72757461 	.word	0x72757461
  405f34:	65542065 	.word	0x65542065
  405f38:	6e697473 	.word	0x6e697473
  405f3c:	2d2d2067 	.word	0x2d2d2067
  405f40:	2d2d2d2d 	.word	0x2d2d2d2d
  405f44:	2d2d2d2d 	.word	0x2d2d2d2d
  405f48:	2d2d2d2d 	.word	0x2d2d2d2d
  405f4c:	0a2d2d2d 	.word	0x0a2d2d2d
  405f50:	00000000 	.word	0x00000000
  405f54:	20776152 	.word	0x20776152
  405f58:	61746144 	.word	0x61746144
  405f5c:	00000a20 	.word	0x00000a20
  405f60:	706d6554 	.word	0x706d6554
  405f64:	203d2031 	.word	0x203d2031
  405f68:	09206925 	.word	0x09206925
  405f6c:	65542009 	.word	0x65542009
  405f70:	2032706d 	.word	0x2032706d
  405f74:	6925203d 	.word	0x6925203d
  405f78:	20090920 	.word	0x20090920
  405f7c:	706d6554 	.word	0x706d6554
  405f80:	203d2033 	.word	0x203d2033
  405f84:	0a206925 	.word	0x0a206925
  405f88:	00000000 	.word	0x00000000
  405f8c:	706d6554 	.word	0x706d6554
  405f90:	203d2034 	.word	0x203d2034
  405f94:	09206925 	.word	0x09206925
  405f98:	65542009 	.word	0x65542009
  405f9c:	2035706d 	.word	0x2035706d
  405fa0:	6925203d 	.word	0x6925203d
  405fa4:	20090920 	.word	0x20090920
  405fa8:	706d6554 	.word	0x706d6554
  405fac:	203d2036 	.word	0x203d2036
  405fb0:	0a206925 	.word	0x0a206925
  405fb4:	00000000 	.word	0x00000000
  405fb8:	706d6554 	.word	0x706d6554
  405fbc:	746f4d20 	.word	0x746f4d20
  405fc0:	3d20726f 	.word	0x3d20726f
  405fc4:	20692520 	.word	0x20692520
  405fc8:	00000a20 	.word	0x00000a20
  405fcc:	7543200a 	.word	0x7543200a
  405fd0:	6e657272 	.word	0x6e657272
  405fd4:	6e612074 	.word	0x6e612074
  405fd8:	6f562064 	.word	0x6f562064
  405fdc:	6761746c 	.word	0x6761746c
  405fe0:	65542065 	.word	0x65542065
  405fe4:	6e697473 	.word	0x6e697473
  405fe8:	2d2d2067 	.word	0x2d2d2067
  405fec:	2d2d2d2d 	.word	0x2d2d2d2d
  405ff0:	2d2d2d2d 	.word	0x2d2d2d2d
  405ff4:	2d2d2d2d 	.word	0x2d2d2d2d
  405ff8:	0a2d2d2d 	.word	0x0a2d2d2d
  405ffc:	00000000 	.word	0x00000000
  406000:	72727543 	.word	0x72727543
  406004:	203d2041 	.word	0x203d2041
  406008:	09206925 	.word	0x09206925
  40600c:	75432009 	.word	0x75432009
  406010:	20427272 	.word	0x20427272
  406014:	6925203d 	.word	0x6925203d
  406018:	20090920 	.word	0x20090920
  40601c:	72727543 	.word	0x72727543
  406020:	203d2043 	.word	0x203d2043
  406024:	0a206925 	.word	0x0a206925
  406028:	00000000 	.word	0x00000000
  40602c:	70707553 	.word	0x70707553
  406030:	5620796c 	.word	0x5620796c
  406034:	61746c6f 	.word	0x61746c6f
  406038:	3d206567 	.word	0x3d206567
  40603c:	20692520 	.word	0x20692520
  406040:	00000a20 	.word	0x00000a20
  406044:	72727543 	.word	0x72727543
  406048:	6f204220 	.word	0x6f204220
  40604c:	65736666 	.word	0x65736666
  406050:	56282074 	.word	0x56282074
  406054:	202d2029 	.word	0x202d2029
  406058:	09206625 	.word	0x09206625
  40605c:	6c6f7620 	.word	0x6c6f7620
  406060:	65676174 	.word	0x65676174
  406064:	20202d20 	.word	0x20202d20
  406068:	20206625 	.word	0x20206625
  40606c:	75632009 	.word	0x75632009
  406070:	6e657272 	.word	0x6e657272
  406074:	202d2074 	.word	0x202d2074
  406078:	000a6625 	.word	0x000a6625
  40607c:	746c6544 	.word	0x746c6544
  406080:	3d207361 	.word	0x3d207361
  406084:	20662520 	.word	0x20662520
  406088:	66252009 	.word	0x66252009
  40608c:	0000000a 	.word	0x0000000a
  406090:	72727543 	.word	0x72727543
  406094:	6d697420 	.word	0x6d697420
  406098:	203d2065 	.word	0x203d2065
  40609c:	000a6625 	.word	0x000a6625
  4060a0:	203d206b 	.word	0x203d206b
  4060a4:	0a206925 	.word	0x0a206925
  4060a8:	00000000 	.word	0x00000000
  4060ac:	74736554 	.word	0x74736554
  4060b0:	20676e69 	.word	0x20676e69
  4060b4:	656d6954 	.word	0x656d6954
  4060b8:	6f432072 	.word	0x6f432072
  4060bc:	65746e75 	.word	0x65746e75
  4060c0:	00007372 	.word	0x00007372
  4060c4:	6f636e45 	.word	0x6f636e45
  4060c8:	20726564 	.word	0x20726564
  4060cc:	203d2041 	.word	0x203d2041
  4060d0:	75252009 	.word	0x75252009
  4060d4:	09203b20 	.word	0x09203b20
  4060d8:	20752520 	.word	0x20752520
  4060dc:	0000000a 	.word	0x0000000a
  4060e0:	6f636e45 	.word	0x6f636e45
  4060e4:	20726564 	.word	0x20726564
  4060e8:	203d2042 	.word	0x203d2042
  4060ec:	75252009 	.word	0x75252009
  4060f0:	09203b20 	.word	0x09203b20
  4060f4:	20752520 	.word	0x20752520
  4060f8:	00000a0a 	.word	0x00000a0a
  4060fc:	6f636e45 	.word	0x6f636e45
  406100:	20726564 	.word	0x20726564
  406104:	6e756f63 	.word	0x6e756f63
  406108:	20726574 	.word	0x20726574
  40610c:	6925203d 	.word	0x6925203d
  406110:	203b0920 	.word	0x203b0920
  406114:	6c676e61 	.word	0x6c676e61
  406118:	203d2065 	.word	0x203d2065
  40611c:	0a206625 	.word	0x0a206625
  406120:	00000000 	.word	0x00000000
  406124:	682f2e2e 	.word	0x682f2e2e
  406128:	732f6c61 	.word	0x732f6c61
  40612c:	682f6372 	.word	0x682f6372
  406130:	615f6c61 	.word	0x615f6c61
  406134:	615f6364 	.word	0x615f6364
  406138:	636e7973 	.word	0x636e7973
  40613c:	0000632e 	.word	0x0000632e
  406140:	682f2e2e 	.word	0x682f2e2e
  406144:	732f6c61 	.word	0x732f6c61
  406148:	682f6372 	.word	0x682f6372
  40614c:	695f6c61 	.word	0x695f6c61
  406150:	00632e6f 	.word	0x00632e6f
  406154:	682f2e2e 	.word	0x682f2e2e
  406158:	732f6c61 	.word	0x732f6c61
  40615c:	682f6372 	.word	0x682f6372
  406160:	705f6c61 	.word	0x705f6c61
  406164:	632e6d77 	.word	0x632e6d77
  406168:	00000000 	.word	0x00000000
  40616c:	682f2e2e 	.word	0x682f2e2e
  406170:	732f6c61 	.word	0x732f6c61
  406174:	682f6372 	.word	0x682f6372
  406178:	745f6c61 	.word	0x745f6c61
  40617c:	72656d69 	.word	0x72656d69
  406180:	0000632e 	.word	0x0000632e
  406184:	682f2e2e 	.word	0x682f2e2e
  406188:	732f6c61 	.word	0x732f6c61
  40618c:	682f6372 	.word	0x682f6372
  406190:	755f6c61 	.word	0x755f6c61
  406194:	74726173 	.word	0x74726173
  406198:	6e79735f 	.word	0x6e79735f
  40619c:	00632e63 	.word	0x00632e63
  4061a0:	682f2e2e 	.word	0x682f2e2e
  4061a4:	752f6c61 	.word	0x752f6c61
  4061a8:	736c6974 	.word	0x736c6974
  4061ac:	6372732f 	.word	0x6372732f
  4061b0:	6974752f 	.word	0x6974752f
  4061b4:	6c5f736c 	.word	0x6c5f736c
  4061b8:	2e747369 	.word	0x2e747369
  4061bc:	00000063 	.word	0x00000063
  4061c0:	682f2e2e 	.word	0x682f2e2e
  4061c4:	752f6c61 	.word	0x752f6c61
  4061c8:	736c6974 	.word	0x736c6974
  4061cc:	6372732f 	.word	0x6372732f
  4061d0:	6974752f 	.word	0x6974752f
  4061d4:	725f736c 	.word	0x725f736c
  4061d8:	62676e69 	.word	0x62676e69
  4061dc:	65666675 	.word	0x65666675
  4061e0:	00632e72 	.word	0x00632e72

004061e4 <_afecs>:
  4061e4:	00000000 2f84310b 23000000 ffffffff     .....1./...#....
  4061f4:	0000ffff 00000000 00000000 00000000     ................
  406204:	0000010c 00000000 00000000 00000000     ................
  406214:	00000000 00000200 00000200 00000200     ................
  406224:	00000200 00000200 00000200 00000200     ................
  406234:	00000200 00000200 00000200 00000200     ................
  406244:	00000200 00000001 2f84310b 23000000     .........1./...#
  406254:	ffffffff 0000ffff 00000000 00000000     ................
  406264:	00000000 0000010c 00000000 00000000     ................
	...
  40627c:	00000200 00000200 00000200 00000200     ................
  40628c:	00000200 00000200 00000200 00000200     ................
  40629c:	00000200 00000200 00000200 00000200     ................
  4062ac:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  4062bc:	63656661 0000632e                       afec.c..

004062c4 <_ext_irq>:
  4062c4:	00000000 00000024 00000000 00000000     ....$...........
	...
  4062e0:	00000001 00002000 00002000 00002000     ..... ... ... ..
  4062f0:	00000000 00002000 00000000 00000003     ..... ..........
  406300:	00080000 00000000 00000000 00000000     ................
	...

00406318 <_pio_irq_n>:
  406318:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  406328:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  406338:	00000000                                ....

0040633c <_pwms>:
  40633c:	40020000 0000001f 00010005 00000001     ...@............
  40634c:	00000001 000000ff 00000000 00000004     ................
	...
  406368:	00000002 004063c4 00000001 20400388     .....c@.......@ 
  406378:	4005c000 0000003c 00010005 00000001     ...@<...........
  406388:	00000001 000000ff 00000000 00000004     ................
	...
  4063a4:	00000001 004063b4 00000001 2040037c     .....c@.....|.@ 

004063b4 <_ch_cfg1>:
  4063b4:	00000000 0000010b 000003e8 00000200     ................

004063c4 <_ch_cfg0>:
  4063c4:	00000000 0000010b 000003e8 00000200     ................
  4063d4:	00000002 0000010b 000003e8 00000200     ................
  4063e4:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  4063f4:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  406404:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00406410 <_usarts>:
  406410:	00000001 001008c0 000100f4 682f2e2e     ............../h
  406420:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  406430:	632e7472 00000000                       rt.c....

00406438 <_cfgs>:
  406438:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  406448:	00000040 00000000 00000040 00000000     @.......@.......
  406458:	00000040 00000000 00000040 00000000     @.......@.......
  406468:	00000040 00000000 00000040 00000000     @.......@.......
  406478:	00000040 00000000 00000040 00000000     @.......@.......
  406488:	00000040 00000000 00000040 00000000     @.......@.......
  406498:	00000040 00000000 00000040 00000000     @.......@.......
  4064a8:	00000040 00000000 00000040 00000000     @.......@.......
  4064b8:	00000040 00000000 00000040 00000000     @.......@.......
  4064c8:	00000040 00000000 00000040 00000000     @.......@.......
  4064d8:	00000040 00000000 00000040 00000000     @.......@.......
  4064e8:	00000040 00000000 00000040 00000000     @.......@.......

004064f8 <_global_impure_ptr>:
  4064f8:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  406508:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  406518:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  406528:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  406538:	4e614e00 00000000                       .NaN....

00406540 <__sf_fake_stderr>:
	...

00406560 <__sf_fake_stdin>:
	...

00406580 <__sf_fake_stdout>:
	...

004065a0 <__mprec_bigtens>:
  4065a0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4065b0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4065c0:	7f73bf3c 75154fdd                       <.s..O.u

004065c8 <__mprec_tens>:
  4065c8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4065d8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4065e8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4065f8:	00000000 412e8480 00000000 416312d0     .......A......cA
  406608:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  406618:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406628:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406638:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  406648:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406658:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  406668:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406678:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406688:	79d99db4 44ea7843                       ...yCx.D

00406690 <p05.6047>:
  406690:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  4066a0:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  4066b0:	5849534f 00002e00                                OSIX...

004066b7 <_ctype_>:
  4066b7:	20202000 20202020 28282020 20282828     .         ((((( 
  4066c7:	20202020 20202020 20202020 20202020                     
  4066d7:	10108820 10101010 10101010 10101010      ...............
  4066e7:	04040410 04040404 10040404 10101010     ................
  4066f7:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406707:	01010101 01010101 01010101 10101010     ................
  406717:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406727:	02020202 02020202 02020202 10101010     ................
  406737:	00000020 00000000 00000000 00000000      ...............
	...

004067b8 <_init>:
  4067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4067ba:	bf00      	nop
  4067bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4067be:	bc08      	pop	{r3}
  4067c0:	469e      	mov	lr, r3
  4067c2:	4770      	bx	lr

004067c4 <__init_array_start>:
  4067c4:	0040018d 	.word	0x0040018d

004067c8 <_fini>:
  4067c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4067ca:	bf00      	nop
  4067cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4067ce:	bc08      	pop	{r3}
  4067d0:	469e      	mov	lr, r3
  4067d2:	4770      	bx	lr

004067d4 <__fini_array_start>:
  4067d4:	00400169 	.word	0x00400169
