
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005df0  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  00405df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004b4  20400218  00406008  00020218  2**2
                  ALLOC
  3 .heap         00000204  204006cc  004064bc  00020218  2**0
                  ALLOC
  4 .stack        00000400  204008d0  004066c0  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   00024d71  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004b62  00000000  00000000  00045010  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000b8c7  00000000  00000000  00049b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d48  00000000  00000000  00055439  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b80  00000000  00000000  00056181  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00046372  00000000  00000000  00056d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001cb6e  00000000  00000000  0009d073  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00155aff  00000000  00000000  000b9be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002e80  00000000  00000000  0020f6e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 0c 40 20 69 05 40 00 65 05 40 00 65 05 40 00     ..@ i.@.e.@.e.@.
  400010:	65 05 40 00 65 05 40 00 65 05 40 00 00 00 00 00     e.@.e.@.e.@.....
	...
  40002c:	65 05 40 00 65 05 40 00 00 00 00 00 65 05 40 00     e.@.e.@.....e.@.
  40003c:	65 05 40 00 65 05 40 00 65 05 40 00 65 05 40 00     e.@.e.@.e.@.e.@.
  40004c:	65 05 40 00 65 05 40 00 65 05 40 00 65 05 40 00     e.@.e.@.e.@.e.@.
  40005c:	65 05 40 00 65 05 40 00 00 00 00 00 19 19 40 00     e.@.e.@.......@.
  40006c:	65 05 40 00 65 05 40 00 65 05 40 00 65 05 40 00     e.@.e.@.e.@.e.@.
  40007c:	65 05 40 00 0d 19 40 00 65 05 40 00 65 05 40 00     e.@...@.e.@.e.@.
  40008c:	65 05 40 00 65 05 40 00 65 05 40 00 65 05 40 00     e.@.e.@.e.@.e.@.
  40009c:	d5 1e 40 00 65 05 40 00 65 05 40 00 65 05 40 00     ..@.e.@.e.@.e.@.
  4000ac:	65 05 40 00 65 05 40 00 ed 14 40 00 65 05 40 00     e.@.e.@...@.e.@.
  4000bc:	65 1a 40 00 65 05 40 00 65 05 40 00 65 05 40 00     e.@.e.@.e.@.e.@.
  4000cc:	65 05 40 00 65 05 40 00 dd 16 40 00 65 05 40 00     e.@.e.@...@.e.@.
  4000dc:	65 05 40 00 01 15 40 00 65 05 40 00 65 05 40 00     e.@...@.e.@.e.@.
  4000ec:	65 05 40 00 65 05 40 00 65 05 40 00 65 05 40 00     e.@.e.@.e.@.e.@.
  4000fc:	65 05 40 00 65 05 40 00 65 05 40 00 e9 1e 40 00     e.@.e.@.e.@...@.
  40010c:	65 05 40 00 65 05 40 00 00 00 00 00 00 00 00 00     e.@.e.@.........
  40011c:	00 00 00 00 65 05 40 00 65 05 40 00 45 22 40 00     ....e.@.e.@.E"@.
  40012c:	65 05 40 00 79 1a 40 00 65 05 40 00 65 05 40 00     e.@.y.@.e.@.e.@.
  40013c:	65 05 40 00 65 05 40 00 65 05 40 00 65 05 40 00     e.@.e.@.e.@.e.@.
  40014c:	65 05 40 00 65 05 40 00 65 05 40 00 65 05 40 00     e.@.e.@.e.@.e.@.
  40015c:	65 05 40 00 65 05 40 00 65 05 40 00                 e.@.e.@.e.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	00405df0 	.word	0x00405df0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00405df0 	.word	0x00405df0
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	00405df0 	.word	0x00405df0
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400a39 	.word	0x00400a39
  4001e4:	0040243d 	.word	0x0040243d

004001e8 <dma_adc_1_callback>:
		printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
	}
	
}

static void dma_adc_1_callback(struct _dma_resource *resource){
  4001e8:	b530      	push	{r4, r5, lr}
  4001ea:	b083      	sub	sp, #12
	//just for testing
	printf("interrupt - ADC 1 - %i %i %i %i  \n", (int)dma_adc_1_buff[0],(int)dma_adc_1_buff[1],(int)dma_adc_1_buff[2],(int)dma_adc_1_buff[3]);
  4001ec:	4820      	ldr	r0, [pc, #128]	; (400270 <dma_adc_1_callback+0x88>)
  4001ee:	6801      	ldr	r1, [r0, #0]
  4001f0:	6842      	ldr	r2, [r0, #4]
  4001f2:	6883      	ldr	r3, [r0, #8]
  4001f4:	68c0      	ldr	r0, [r0, #12]
  4001f6:	9000      	str	r0, [sp, #0]
  4001f8:	481e      	ldr	r0, [pc, #120]	; (400274 <dma_adc_1_callback+0x8c>)
  4001fa:	4c1f      	ldr	r4, [pc, #124]	; (400278 <dma_adc_1_callback+0x90>)
  4001fc:	47a0      	blx	r4
	
	//go through the values that the DMA got and get the ones that we need (currents and bus voltage)
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  4001fe:	2300      	movs	r3, #0
  400200:	e008      	b.n	400214 <dma_adc_1_callback+0x2c>
		
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
			
			case AFEC_LCDR_CHNB(ADC_CURRENT_C_CHANNEL):
				currents[2] = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400202:	b292      	uxth	r2, r2
  400204:	491d      	ldr	r1, [pc, #116]	; (40027c <dma_adc_1_callback+0x94>)
  400206:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  400208:	4919      	ldr	r1, [pc, #100]	; (400270 <dma_adc_1_callback+0x88>)
  40020a:	7c0a      	ldrb	r2, [r1, #16]
  40020c:	f042 0204 	orr.w	r2, r2, #4
  400210:	740a      	strb	r2, [r1, #16]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400212:	3301      	adds	r3, #1
  400214:	2b03      	cmp	r3, #3
  400216:	dc13      	bgt.n	400240 <dma_adc_1_callback+0x58>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400218:	4a15      	ldr	r2, [pc, #84]	; (400270 <dma_adc_1_callback+0x88>)
  40021a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40021e:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400222:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  400226:	d0ec      	beq.n	400202 <dma_adc_1_callback+0x1a>
  400228:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  40022c:	d1f1      	bne.n	400212 <dma_adc_1_callback+0x2a>
				break;
			
			case AFEC_LCDR_CHNB(ADC_SUPPL_VOLTAGE_CHANNEL):
				voltage = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  40022e:	b292      	uxth	r2, r2
  400230:	4913      	ldr	r1, [pc, #76]	; (400280 <dma_adc_1_callback+0x98>)
  400232:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<3);
  400234:	490e      	ldr	r1, [pc, #56]	; (400270 <dma_adc_1_callback+0x88>)
  400236:	7c0a      	ldrb	r2, [r1, #16]
  400238:	f042 0208 	orr.w	r2, r2, #8
  40023c:	740a      	strb	r2, [r1, #16]
				break;
  40023e:	e7e8      	b.n	400212 <dma_adc_1_callback+0x2a>
			default:
				;
		}
	}
	
	if(ready_values == ALL_VALUES_READY){
  400240:	4b0b      	ldr	r3, [pc, #44]	; (400270 <dma_adc_1_callback+0x88>)
  400242:	7c1b      	ldrb	r3, [r3, #16]
  400244:	2b0f      	cmp	r3, #15
  400246:	d001      	beq.n	40024c <dma_adc_1_callback+0x64>
		
		//launch control loop
		printf("Data collected, launching control loop from adc 1 \n");
		printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
	}
}
  400248:	b003      	add	sp, #12
  40024a:	bd30      	pop	{r4, r5, pc}
		ready_values = 0;
  40024c:	2200      	movs	r2, #0
  40024e:	4b08      	ldr	r3, [pc, #32]	; (400270 <dma_adc_1_callback+0x88>)
  400250:	741a      	strb	r2, [r3, #16]
		printf("Data collected, launching control loop from adc 1 \n");
  400252:	480c      	ldr	r0, [pc, #48]	; (400284 <dma_adc_1_callback+0x9c>)
  400254:	4c08      	ldr	r4, [pc, #32]	; (400278 <dma_adc_1_callback+0x90>)
  400256:	47a0      	blx	r4
		printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
  400258:	4808      	ldr	r0, [pc, #32]	; (40027c <dma_adc_1_callback+0x94>)
  40025a:	6843      	ldr	r3, [r0, #4]
  40025c:	6802      	ldr	r2, [r0, #0]
  40025e:	4908      	ldr	r1, [pc, #32]	; (400280 <dma_adc_1_callback+0x98>)
  400260:	6809      	ldr	r1, [r1, #0]
  400262:	68c5      	ldr	r5, [r0, #12]
  400264:	9501      	str	r5, [sp, #4]
  400266:	6880      	ldr	r0, [r0, #8]
  400268:	9000      	str	r0, [sp, #0]
  40026a:	4807      	ldr	r0, [pc, #28]	; (400288 <dma_adc_1_callback+0xa0>)
  40026c:	47a0      	blx	r4
}
  40026e:	e7eb      	b.n	400248 <dma_adc_1_callback+0x60>
  400270:	20400234 	.word	0x20400234
  400274:	00405668 	.word	0x00405668
  400278:	0040367d 	.word	0x0040367d
  40027c:	204004d0 	.word	0x204004d0
  400280:	204004cc 	.word	0x204004cc
  400284:	0040568c 	.word	0x0040568c
  400288:	0040567c 	.word	0x0040567c

0040028c <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  40028c:	b530      	push	{r4, r5, lr}
  40028e:	b085      	sub	sp, #20
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3],\
  400290:	4823      	ldr	r0, [pc, #140]	; (400320 <dma_adc_0_callback+0x94>)
  400292:	6941      	ldr	r1, [r0, #20]
  400294:	6982      	ldr	r2, [r0, #24]
  400296:	69c3      	ldr	r3, [r0, #28]
  400298:	6a04      	ldr	r4, [r0, #32]
		(int)dma_adc_0_buff[4],(int)dma_adc_0_buff[5]);
  40029a:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40029c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3],\
  40029e:	9002      	str	r0, [sp, #8]
  4002a0:	9501      	str	r5, [sp, #4]
  4002a2:	9400      	str	r4, [sp, #0]
  4002a4:	481f      	ldr	r0, [pc, #124]	; (400324 <dma_adc_0_callback+0x98>)
  4002a6:	4c20      	ldr	r4, [pc, #128]	; (400328 <dma_adc_0_callback+0x9c>)
  4002a8:	47a0      	blx	r4
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  4002aa:	2300      	movs	r3, #0
  4002ac:	e008      	b.n	4002c0 <dma_adc_0_callback+0x34>
				currents[1] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  4002ae:	b292      	uxth	r2, r2
  4002b0:	491e      	ldr	r1, [pc, #120]	; (40032c <dma_adc_0_callback+0xa0>)
  4002b2:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  4002b4:	491a      	ldr	r1, [pc, #104]	; (400320 <dma_adc_0_callback+0x94>)
  4002b6:	7c0a      	ldrb	r2, [r1, #16]
  4002b8:	f042 0202 	orr.w	r2, r2, #2
  4002bc:	740a      	strb	r2, [r1, #16]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  4002be:	3301      	adds	r3, #1
  4002c0:	2b05      	cmp	r3, #5
  4002c2:	dc14      	bgt.n	4002ee <dma_adc_0_callback+0x62>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  4002c4:	4a16      	ldr	r2, [pc, #88]	; (400320 <dma_adc_0_callback+0x94>)
  4002c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  4002ca:	6952      	ldr	r2, [r2, #20]
  4002cc:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  4002d0:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  4002d4:	d0eb      	beq.n	4002ae <dma_adc_0_callback+0x22>
  4002d6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4002da:	d1f0      	bne.n	4002be <dma_adc_0_callback+0x32>
				currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  4002dc:	b292      	uxth	r2, r2
  4002de:	4913      	ldr	r1, [pc, #76]	; (40032c <dma_adc_0_callback+0xa0>)
  4002e0:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  4002e2:	490f      	ldr	r1, [pc, #60]	; (400320 <dma_adc_0_callback+0x94>)
  4002e4:	7c0a      	ldrb	r2, [r1, #16]
  4002e6:	f042 0201 	orr.w	r2, r2, #1
  4002ea:	740a      	strb	r2, [r1, #16]
				break;
  4002ec:	e7e7      	b.n	4002be <dma_adc_0_callback+0x32>
	if(ready_values == ALL_VALUES_READY){
  4002ee:	4b0c      	ldr	r3, [pc, #48]	; (400320 <dma_adc_0_callback+0x94>)
  4002f0:	7c1b      	ldrb	r3, [r3, #16]
  4002f2:	2b0f      	cmp	r3, #15
  4002f4:	d001      	beq.n	4002fa <dma_adc_0_callback+0x6e>
}
  4002f6:	b005      	add	sp, #20
  4002f8:	bd30      	pop	{r4, r5, pc}
		ready_values = 0;
  4002fa:	2200      	movs	r2, #0
  4002fc:	4b08      	ldr	r3, [pc, #32]	; (400320 <dma_adc_0_callback+0x94>)
  4002fe:	741a      	strb	r2, [r3, #16]
		printf("Data collected, launching control loop from adc 0\n");
  400300:	480b      	ldr	r0, [pc, #44]	; (400330 <dma_adc_0_callback+0xa4>)
  400302:	4c09      	ldr	r4, [pc, #36]	; (400328 <dma_adc_0_callback+0x9c>)
  400304:	47a0      	blx	r4
		printf("%i %i %i %i  \n", voltage, currents[0], currents[1], currents[2],currents[3]);
  400306:	4809      	ldr	r0, [pc, #36]	; (40032c <dma_adc_0_callback+0xa0>)
  400308:	6843      	ldr	r3, [r0, #4]
  40030a:	6802      	ldr	r2, [r0, #0]
  40030c:	4909      	ldr	r1, [pc, #36]	; (400334 <dma_adc_0_callback+0xa8>)
  40030e:	6809      	ldr	r1, [r1, #0]
  400310:	68c5      	ldr	r5, [r0, #12]
  400312:	9501      	str	r5, [sp, #4]
  400314:	6880      	ldr	r0, [r0, #8]
  400316:	9000      	str	r0, [sp, #0]
  400318:	4807      	ldr	r0, [pc, #28]	; (400338 <dma_adc_0_callback+0xac>)
  40031a:	47a0      	blx	r4
}
  40031c:	e7eb      	b.n	4002f6 <dma_adc_0_callback+0x6a>
  40031e:	bf00      	nop
  400320:	20400234 	.word	0x20400234
  400324:	004056c0 	.word	0x004056c0
  400328:	0040367d 	.word	0x0040367d
  40032c:	204004d0 	.word	0x204004d0
  400330:	004056ec 	.word	0x004056ec
  400334:	204004cc 	.word	0x204004cc
  400338:	0040567c 	.word	0x0040567c

0040033c <dma_adc_init>:


void dma_adc_init(void){
  40033c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	//channel 0 for ADC 0
	
	//source address = AFEC 0->LCDR
	//_dma_set_source_address(0,(void *) ((Afec *)((&ADC_0)->device.hw) + AFEC_LCDR_OFFSET));
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  400340:	4919      	ldr	r1, [pc, #100]	; (4003a8 <dma_adc_init+0x6c>)
  400342:	2000      	movs	r0, #0
  400344:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4003c8 <dma_adc_init+0x8c>
  400348:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  40034a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4003cc <dma_adc_init+0x90>
  40034e:	f108 0114 	add.w	r1, r8, #20
  400352:	2000      	movs	r0, #0
  400354:	4f15      	ldr	r7, [pc, #84]	; (4003ac <dma_adc_init+0x70>)
  400356:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  400358:	2118      	movs	r1, #24
  40035a:	2000      	movs	r0, #0
  40035c:	4d14      	ldr	r5, [pc, #80]	; (4003b0 <dma_adc_init+0x74>)
  40035e:	47a8      	blx	r5
	
	//set callback function
	struct _dma_resource **res0;
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  400360:	2100      	movs	r1, #0
  400362:	460c      	mov	r4, r1
  400364:	4608      	mov	r0, r1
  400366:	4e13      	ldr	r6, [pc, #76]	; (4003b4 <dma_adc_init+0x78>)
  400368:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  40036a:	6823      	ldr	r3, [r4, #0]
  40036c:	4a12      	ldr	r2, [pc, #72]	; (4003b8 <dma_adc_init+0x7c>)
  40036e:	601a      	str	r2, [r3, #0]
	
	//enable interrupt on successful transfer
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  400370:	2201      	movs	r2, #1
  400372:	4621      	mov	r1, r4
  400374:	4620      	mov	r0, r4
  400376:	4c11      	ldr	r4, [pc, #68]	; (4003bc <dma_adc_init+0x80>)
  400378:	47a0      	blx	r4
	
	//channel 0 for ADC 0
	
	//source address = AFEC 1->LCDR
	//_dma_set_source_address(0,(void *) ((Afec *)((&ADC_0)->device.hw) + AFEC_LCDR_OFFSET));
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  40037a:	4911      	ldr	r1, [pc, #68]	; (4003c0 <dma_adc_init+0x84>)
  40037c:	2001      	movs	r0, #1
  40037e:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  400380:	4641      	mov	r1, r8
  400382:	2001      	movs	r0, #1
  400384:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  400386:	2110      	movs	r1, #16
  400388:	2001      	movs	r0, #1
  40038a:	47a8      	blx	r5
	
	//set callback function
	struct _dma_resource **res1;
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  40038c:	2101      	movs	r1, #1
  40038e:	2500      	movs	r5, #0
  400390:	4628      	mov	r0, r5
  400392:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  400394:	682b      	ldr	r3, [r5, #0]
  400396:	4a0b      	ldr	r2, [pc, #44]	; (4003c4 <dma_adc_init+0x88>)
  400398:	601a      	str	r2, [r3, #0]
	
	//enable interrupt on successful transfer
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  40039a:	2201      	movs	r2, #1
  40039c:	4629      	mov	r1, r5
  40039e:	4610      	mov	r0, r2
  4003a0:	47a0      	blx	r4
  4003a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4003a6:	bf00      	nop
  4003a8:	4003c020 	.word	0x4003c020
  4003ac:	00402189 	.word	0x00402189
  4003b0:	004021a9 	.word	0x004021a9
  4003b4:	004021d9 	.word	0x004021d9
  4003b8:	0040028d 	.word	0x0040028d
  4003bc:	004021ed 	.word	0x004021ed
  4003c0:	40064020 	.word	0x40064020
  4003c4:	004001e9 	.word	0x004001e9
  4003c8:	00402199 	.word	0x00402199
  4003cc:	20400234 	.word	0x20400234

004003d0 <dma_adc_0_enable_for_one_transaction>:
	//_dma_set_irq_state(DMA_ADC_1_CHANNEL,DMA_TRANSFER_ERROR_CB,true);
		
	
}

void dma_adc_0_enable_for_one_transaction(void){
  4003d0:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  4003d2:	4906      	ldr	r1, [pc, #24]	; (4003ec <dma_adc_0_enable_for_one_transaction+0x1c>)
  4003d4:	2000      	movs	r0, #0
  4003d6:	4b06      	ldr	r3, [pc, #24]	; (4003f0 <dma_adc_0_enable_for_one_transaction+0x20>)
  4003d8:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  4003da:	2118      	movs	r1, #24
  4003dc:	2000      	movs	r0, #0
  4003de:	4b05      	ldr	r3, [pc, #20]	; (4003f4 <dma_adc_0_enable_for_one_transaction+0x24>)
  4003e0:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  4003e2:	2101      	movs	r1, #1
  4003e4:	2000      	movs	r0, #0
  4003e6:	4b04      	ldr	r3, [pc, #16]	; (4003f8 <dma_adc_0_enable_for_one_transaction+0x28>)
  4003e8:	4798      	blx	r3
  4003ea:	bd08      	pop	{r3, pc}
  4003ec:	20400248 	.word	0x20400248
  4003f0:	00402189 	.word	0x00402189
  4003f4:	004021a9 	.word	0x004021a9
  4003f8:	004021c1 	.word	0x004021c1

004003fc <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  4003fc:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  4003fe:	4906      	ldr	r1, [pc, #24]	; (400418 <dma_adc_1_enable_for_one_transaction+0x1c>)
  400400:	2001      	movs	r0, #1
  400402:	4b06      	ldr	r3, [pc, #24]	; (40041c <dma_adc_1_enable_for_one_transaction+0x20>)
  400404:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  400406:	2110      	movs	r1, #16
  400408:	2001      	movs	r0, #1
  40040a:	4b05      	ldr	r3, [pc, #20]	; (400420 <dma_adc_1_enable_for_one_transaction+0x24>)
  40040c:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  40040e:	2101      	movs	r1, #1
  400410:	4608      	mov	r0, r1
  400412:	4b04      	ldr	r3, [pc, #16]	; (400424 <dma_adc_1_enable_for_one_transaction+0x28>)
  400414:	4798      	blx	r3
  400416:	bd08      	pop	{r3, pc}
  400418:	20400234 	.word	0x20400234
  40041c:	00402189 	.word	0x00402189
  400420:	004021a9 	.word	0x004021a9
  400424:	004021c1 	.word	0x004021c1

00400428 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  400428:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  40042a:	4d11      	ldr	r5, [pc, #68]	; (400470 <adc_enable_all+0x48>)
  40042c:	2108      	movs	r1, #8
  40042e:	4628      	mov	r0, r5
  400430:	4c10      	ldr	r4, [pc, #64]	; (400474 <adc_enable_all+0x4c>)
  400432:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  400434:	2102      	movs	r1, #2
  400436:	4628      	mov	r0, r5
  400438:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  40043a:	4e0f      	ldr	r6, [pc, #60]	; (400478 <adc_enable_all+0x50>)
  40043c:	2101      	movs	r1, #1
  40043e:	4630      	mov	r0, r6
  400440:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  400442:	2106      	movs	r1, #6
  400444:	4630      	mov	r0, r6
  400446:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  400448:	2105      	movs	r1, #5
  40044a:	4630      	mov	r0, r6
  40044c:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  40044e:	2106      	movs	r1, #6
  400450:	4628      	mov	r0, r5
  400452:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  400454:	210a      	movs	r1, #10
  400456:	4628      	mov	r0, r5
  400458:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  40045a:	2100      	movs	r1, #0
  40045c:	4630      	mov	r0, r6
  40045e:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  400460:	2105      	movs	r1, #5
  400462:	4628      	mov	r0, r5
  400464:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  400466:	2100      	movs	r1, #0
  400468:	4628      	mov	r0, r5
  40046a:	47a0      	blx	r4
  40046c:	bd70      	pop	{r4, r5, r6, pc}
  40046e:	bf00      	nop
  400470:	204005c4 	.word	0x204005c4
  400474:	00400d11 	.word	0x00400d11
  400478:	2040069c 	.word	0x2040069c

0040047c <pwm_0_callback>:
#include <hpl_pwm_config.h>


int pwm_counter = 0;

void pwm_0_callback(void){
  40047c:	b508      	push	{r3, lr}
	pwm_counter++;
  40047e:	4a08      	ldr	r2, [pc, #32]	; (4004a0 <pwm_0_callback+0x24>)
  400480:	6813      	ldr	r3, [r2, #0]
  400482:	3301      	adds	r3, #1
  400484:	6013      	str	r3, [r2, #0]
	if (pwm_counter > 3000){
  400486:	f640 32b8 	movw	r2, #3000	; 0xbb8
  40048a:	4293      	cmp	r3, r2
  40048c:	dc00      	bgt.n	400490 <pwm_0_callback+0x14>
  40048e:	bd08      	pop	{r3, pc}
		pwm_counter = 0;
  400490:	2200      	movs	r2, #0
  400492:	4b03      	ldr	r3, [pc, #12]	; (4004a0 <pwm_0_callback+0x24>)
  400494:	601a      	str	r2, [r3, #0]
		printf("PWM 0 \n");
  400496:	4803      	ldr	r0, [pc, #12]	; (4004a4 <pwm_0_callback+0x28>)
  400498:	4b03      	ldr	r3, [pc, #12]	; (4004a8 <pwm_0_callback+0x2c>)
  40049a:	4798      	blx	r3
	}
}
  40049c:	e7f7      	b.n	40048e <pwm_0_callback+0x12>
  40049e:	bf00      	nop
  4004a0:	20400260 	.word	0x20400260
  4004a4:	00405720 	.word	0x00405720
  4004a8:	0040367d 	.word	0x0040367d

004004ac <pwm_init_user>:


void pwm_init_user(void){
  4004ac:	b570      	push	{r4, r5, r6, lr}
	pwm_register_callback(&PWM_0, PWM_PERIOD_CB, pwm_0_callback);
  4004ae:	4a0c      	ldr	r2, [pc, #48]	; (4004e0 <pwm_init_user+0x34>)
  4004b0:	2100      	movs	r1, #0
  4004b2:	480c      	ldr	r0, [pc, #48]	; (4004e4 <pwm_init_user+0x38>)
  4004b4:	4b0c      	ldr	r3, [pc, #48]	; (4004e8 <pwm_init_user+0x3c>)
  4004b6:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4004b8:	4c0c      	ldr	r4, [pc, #48]	; (4004ec <pwm_init_user+0x40>)
  4004ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  4004be:	6023      	str	r3, [r4, #0]
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
  4004c0:	f894 131f 	ldrb.w	r1, [r4, #799]	; 0x31f
	NVIC_EnableIRQ(PWM0_IRQn);
	printf("pwm priority %i\n", (int) NVIC_GetPriority(PWM0_IRQn));
  4004c4:	4e0a      	ldr	r6, [pc, #40]	; (4004f0 <pwm_init_user+0x44>)
  4004c6:	0949      	lsrs	r1, r1, #5
  4004c8:	4630      	mov	r0, r6
  4004ca:	4d0a      	ldr	r5, [pc, #40]	; (4004f4 <pwm_init_user+0x48>)
  4004cc:	47a8      	blx	r5
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4004ce:	2340      	movs	r3, #64	; 0x40
  4004d0:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
  4004d4:	f894 131f 	ldrb.w	r1, [r4, #799]	; 0x31f
	NVIC_SetPriority(PWM0_IRQn, 2);
	printf("pwm priority %i\n", (int) NVIC_GetPriority(PWM0_IRQn));
  4004d8:	0949      	lsrs	r1, r1, #5
  4004da:	4630      	mov	r0, r6
  4004dc:	47a8      	blx	r5
  4004de:	bd70      	pop	{r4, r5, r6, pc}
  4004e0:	0040047d 	.word	0x0040047d
  4004e4:	204004dc 	.word	0x204004dc
  4004e8:	00400f35 	.word	0x00400f35
  4004ec:	e000e100 	.word	0xe000e100
  4004f0:	00405728 	.word	0x00405728
  4004f4:	0040367d 	.word	0x0040367d

004004f8 <pwm_enable_all>:
}


//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  4004f8:	b570      	push	{r4, r5, r6, lr}
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  4004fa:	2201      	movs	r2, #1
  4004fc:	4b13      	ldr	r3, [pc, #76]	; (40054c <pwm_enable_all+0x54>)
  4004fe:	611a      	str	r2, [r3, #16]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400500:	4b13      	ldr	r3, [pc, #76]	; (400550 <pwm_enable_all+0x58>)
  400502:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40050a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40050e:	f3bf 8f6f 	isb	sy
  400512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40051a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40051e:	f3bf 8f6f 	isb	sy
	NVIC_DisableIRQ(PWM1_IRQn);
	
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  400522:	4c0c      	ldr	r4, [pc, #48]	; (400554 <pwm_enable_all+0x5c>)
  400524:	4620      	mov	r0, r4
  400526:	4e0c      	ldr	r6, [pc, #48]	; (400558 <pwm_enable_all+0x60>)
  400528:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  40052a:	4d0c      	ldr	r5, [pc, #48]	; (40055c <pwm_enable_all+0x64>)
  40052c:	4628      	mov	r0, r5
  40052e:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  400530:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400534:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400538:	4620      	mov	r0, r4
  40053a:	4c09      	ldr	r4, [pc, #36]	; (400560 <pwm_enable_all+0x68>)
  40053c:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD>>1);
  40053e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400542:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400546:	4628      	mov	r0, r5
  400548:	47a0      	blx	r4
  40054a:	bd70      	pop	{r4, r5, r6, pc}
  40054c:	40020000 	.word	0x40020000
  400550:	e000e100 	.word	0xe000e100
  400554:	204004dc 	.word	0x204004dc
  400558:	00400ef9 	.word	0x00400ef9
  40055c:	20400680 	.word	0x20400680
  400560:	00400f7d 	.word	0x00400f7d

00400564 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400564:	e7fe      	b.n	400564 <Dummy_Handler>
	...

00400568 <Reset_Handler>:
{
  400568:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40056a:	4b10      	ldr	r3, [pc, #64]	; (4005ac <Reset_Handler+0x44>)
  40056c:	4a10      	ldr	r2, [pc, #64]	; (4005b0 <Reset_Handler+0x48>)
  40056e:	429a      	cmp	r2, r3
  400570:	d009      	beq.n	400586 <Reset_Handler+0x1e>
  400572:	4b0e      	ldr	r3, [pc, #56]	; (4005ac <Reset_Handler+0x44>)
  400574:	4a0e      	ldr	r2, [pc, #56]	; (4005b0 <Reset_Handler+0x48>)
  400576:	e003      	b.n	400580 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400578:	6811      	ldr	r1, [r2, #0]
  40057a:	6019      	str	r1, [r3, #0]
  40057c:	3304      	adds	r3, #4
  40057e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400580:	490c      	ldr	r1, [pc, #48]	; (4005b4 <Reset_Handler+0x4c>)
  400582:	428b      	cmp	r3, r1
  400584:	d3f8      	bcc.n	400578 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400586:	4b0c      	ldr	r3, [pc, #48]	; (4005b8 <Reset_Handler+0x50>)
  400588:	e002      	b.n	400590 <Reset_Handler+0x28>
                *pDest++ = 0;
  40058a:	2200      	movs	r2, #0
  40058c:	601a      	str	r2, [r3, #0]
  40058e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400590:	4a0a      	ldr	r2, [pc, #40]	; (4005bc <Reset_Handler+0x54>)
  400592:	4293      	cmp	r3, r2
  400594:	d3f9      	bcc.n	40058a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400596:	4a0a      	ldr	r2, [pc, #40]	; (4005c0 <Reset_Handler+0x58>)
  400598:	4b0a      	ldr	r3, [pc, #40]	; (4005c4 <Reset_Handler+0x5c>)
  40059a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40059e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4005a0:	4b09      	ldr	r3, [pc, #36]	; (4005c8 <Reset_Handler+0x60>)
  4005a2:	4798      	blx	r3
        main();
  4005a4:	4b09      	ldr	r3, [pc, #36]	; (4005cc <Reset_Handler+0x64>)
  4005a6:	4798      	blx	r3
  4005a8:	e7fe      	b.n	4005a8 <Reset_Handler+0x40>
  4005aa:	bf00      	nop
  4005ac:	20400000 	.word	0x20400000
  4005b0:	00405df0 	.word	0x00405df0
  4005b4:	20400218 	.word	0x20400218
  4005b8:	20400218 	.word	0x20400218
  4005bc:	204006cc 	.word	0x204006cc
  4005c0:	e000ed00 	.word	0xe000ed00
  4005c4:	00400000 	.word	0x00400000
  4005c8:	00402d51 	.word	0x00402d51
  4005cc:	004022b1 	.word	0x004022b1

004005d0 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  4005d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4005d2:	b085      	sub	sp, #20
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4005d4:	4b20      	ldr	r3, [pc, #128]	; (400658 <ADC_1_init+0x88>)
  4005d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4005da:	f413 7f80 	tst.w	r3, #256	; 0x100
  4005de:	d104      	bne.n	4005ea <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4005e0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4005e4:	4b1c      	ldr	r3, [pc, #112]	; (400658 <ADC_1_init+0x88>)
  4005e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  4005ea:	4d1c      	ldr	r5, [pc, #112]	; (40065c <ADC_1_init+0x8c>)
  4005ec:	4c1c      	ldr	r4, [pc, #112]	; (400660 <ADC_1_init+0x90>)
  4005ee:	2600      	movs	r6, #0
  4005f0:	9602      	str	r6, [sp, #8]
  4005f2:	4b1c      	ldr	r3, [pc, #112]	; (400664 <ADC_1_init+0x94>)
  4005f4:	9301      	str	r3, [sp, #4]
  4005f6:	2304      	movs	r3, #4
  4005f8:	9300      	str	r3, [sp, #0]
  4005fa:	2306      	movs	r3, #6
  4005fc:	462a      	mov	r2, r5
  4005fe:	491a      	ldr	r1, [pc, #104]	; (400668 <ADC_1_init+0x98>)
  400600:	4620      	mov	r0, r4
  400602:	4f1a      	ldr	r7, [pc, #104]	; (40066c <ADC_1_init+0x9c>)
  400604:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  400606:	2310      	movs	r3, #16
  400608:	f105 0208 	add.w	r2, r5, #8
  40060c:	4631      	mov	r1, r6
  40060e:	4620      	mov	r0, r4
  400610:	4e17      	ldr	r6, [pc, #92]	; (400670 <ADC_1_init+0xa0>)
  400612:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  400614:	2310      	movs	r3, #16
  400616:	f105 0218 	add.w	r2, r5, #24
  40061a:	2101      	movs	r1, #1
  40061c:	4620      	mov	r0, r4
  40061e:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  400620:	2310      	movs	r3, #16
  400622:	f105 0228 	add.w	r2, r5, #40	; 0x28
  400626:	2105      	movs	r1, #5
  400628:	4620      	mov	r0, r4
  40062a:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  40062c:	2310      	movs	r3, #16
  40062e:	f105 0238 	add.w	r2, r5, #56	; 0x38
  400632:	2106      	movs	r1, #6
  400634:	4620      	mov	r0, r4
  400636:	47b0      	blx	r6
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400638:	2202      	movs	r2, #2
  40063a:	4b0e      	ldr	r3, [pc, #56]	; (400674 <ADC_1_init+0xa4>)
  40063c:	601a      	str	r2, [r3, #0]
  40063e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400646:	601a      	str	r2, [r3, #0]
  400648:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40064c:	601a      	str	r2, [r3, #0]
  40064e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400652:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  400654:	b005      	add	sp, #20
  400656:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400658:	400e0600 	.word	0x400e0600
  40065c:	20400264 	.word	0x20400264
  400660:	2040069c 	.word	0x2040069c
  400664:	2040053c 	.word	0x2040053c
  400668:	40064000 	.word	0x40064000
  40066c:	00400bb1 	.word	0x00400bb1
  400670:	00400c59 	.word	0x00400c59
  400674:	400e1000 	.word	0x400e1000

00400678 <ADC_0_init>:
{
  400678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40067c:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40067e:	4b2a      	ldr	r3, [pc, #168]	; (400728 <ADC_0_init+0xb0>)
  400680:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400682:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400686:	d103      	bne.n	400690 <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400688:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40068c:	4b26      	ldr	r3, [pc, #152]	; (400728 <ADC_0_init+0xb0>)
  40068e:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  400690:	4d26      	ldr	r5, [pc, #152]	; (40072c <ADC_0_init+0xb4>)
  400692:	4c27      	ldr	r4, [pc, #156]	; (400730 <ADC_0_init+0xb8>)
  400694:	2600      	movs	r6, #0
  400696:	9602      	str	r6, [sp, #8]
  400698:	4b26      	ldr	r3, [pc, #152]	; (400734 <ADC_0_init+0xbc>)
  40069a:	9301      	str	r3, [sp, #4]
  40069c:	2706      	movs	r7, #6
  40069e:	9700      	str	r7, [sp, #0]
  4006a0:	230a      	movs	r3, #10
  4006a2:	f105 0248 	add.w	r2, r5, #72	; 0x48
  4006a6:	4924      	ldr	r1, [pc, #144]	; (400738 <ADC_0_init+0xc0>)
  4006a8:	4620      	mov	r0, r4
  4006aa:	f8df 809c 	ldr.w	r8, [pc, #156]	; 400748 <ADC_0_init+0xd0>
  4006ae:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  4006b0:	2310      	movs	r3, #16
  4006b2:	f105 0254 	add.w	r2, r5, #84	; 0x54
  4006b6:	4631      	mov	r1, r6
  4006b8:	4620      	mov	r0, r4
  4006ba:	4e20      	ldr	r6, [pc, #128]	; (40073c <ADC_0_init+0xc4>)
  4006bc:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  4006be:	2310      	movs	r3, #16
  4006c0:	f105 0264 	add.w	r2, r5, #100	; 0x64
  4006c4:	2102      	movs	r1, #2
  4006c6:	4620      	mov	r0, r4
  4006c8:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  4006ca:	2310      	movs	r3, #16
  4006cc:	f105 0274 	add.w	r2, r5, #116	; 0x74
  4006d0:	2105      	movs	r1, #5
  4006d2:	4620      	mov	r0, r4
  4006d4:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  4006d6:	2310      	movs	r3, #16
  4006d8:	f105 0284 	add.w	r2, r5, #132	; 0x84
  4006dc:	4639      	mov	r1, r7
  4006de:	4620      	mov	r0, r4
  4006e0:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  4006e2:	2310      	movs	r3, #16
  4006e4:	f105 0294 	add.w	r2, r5, #148	; 0x94
  4006e8:	2108      	movs	r1, #8
  4006ea:	4620      	mov	r0, r4
  4006ec:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  4006ee:	2310      	movs	r3, #16
  4006f0:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  4006f4:	210a      	movs	r1, #10
  4006f6:	4620      	mov	r0, r4
  4006f8:	47b0      	blx	r6
  4006fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4006fe:	4b10      	ldr	r3, [pc, #64]	; (400740 <ADC_0_init+0xc8>)
  400700:	601a      	str	r2, [r3, #0]
  400702:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400706:	2208      	movs	r2, #8
  400708:	601a      	str	r2, [r3, #0]
  40070a:	2204      	movs	r2, #4
  40070c:	601a      	str	r2, [r3, #0]
  40070e:	4a0d      	ldr	r2, [pc, #52]	; (400744 <ADC_0_init+0xcc>)
  400710:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400714:	6011      	str	r1, [r2, #0]
  400716:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40071a:	6011      	str	r1, [r2, #0]
  40071c:	2201      	movs	r2, #1
  40071e:	601a      	str	r2, [r3, #0]
}
  400720:	b004      	add	sp, #16
  400722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400726:	bf00      	nop
  400728:	400e0600 	.word	0x400e0600
  40072c:	20400264 	.word	0x20400264
  400730:	204005c4 	.word	0x204005c4
  400734:	204005f0 	.word	0x204005f0
  400738:	4003c000 	.word	0x4003c000
  40073c:	00400c59 	.word	0x00400c59
  400740:	400e1400 	.word	0x400e1400
  400744:	400e0e00 	.word	0x400e0e00
  400748:	00400bb1 	.word	0x00400bb1

0040074c <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  40074c:	4b04      	ldr	r3, [pc, #16]	; (400760 <EXTERNAL_IRQ_D_init+0x14>)
  40074e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400752:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  400754:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  400756:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40075a:	601a      	str	r2, [r3, #0]
  40075c:	4770      	bx	lr
  40075e:	bf00      	nop
  400760:	400e1400 	.word	0x400e1400

00400764 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400764:	4b0a      	ldr	r3, [pc, #40]	; (400790 <EXTERNAL_IRQ_A_init+0x2c>)
  400766:	2204      	movs	r2, #4
  400768:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40076a:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40076c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400770:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400772:	2220      	movs	r2, #32
  400774:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400776:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400778:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40077c:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40077e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400782:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400784:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  40078a:	601a      	str	r2, [r3, #0]
  40078c:	4770      	bx	lr
  40078e:	bf00      	nop
  400790:	400e0e00 	.word	0x400e0e00

00400794 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400794:	4b16      	ldr	r3, [pc, #88]	; (4007f0 <PWM_0_PORT_init+0x5c>)
  400796:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400798:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  40079c:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40079e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007a0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  4007a4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4007a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4007aa:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4007ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4007ae:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  4007b2:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4007b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007b6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  4007ba:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4007bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4007c0:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4007c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4007c4:	f022 0202 	bic.w	r2, r2, #2
  4007c8:	671a      	str	r2, [r3, #112]	; 0x70
  4007ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007cc:	f022 0202 	bic.w	r2, r2, #2
  4007d0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4007d2:	2202      	movs	r2, #2
  4007d4:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4007d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4007d8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  4007dc:	671a      	str	r2, [r3, #112]	; 0x70
  4007de:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007e0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  4007e4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4007e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4007ea:	605a      	str	r2, [r3, #4]
  4007ec:	4770      	bx	lr
  4007ee:	bf00      	nop
  4007f0:	400e0e00 	.word	0x400e0e00

004007f4 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4007f4:	4b04      	ldr	r3, [pc, #16]	; (400808 <PWM_0_CLOCK_init+0x14>)
  4007f6:	699b      	ldr	r3, [r3, #24]
  4007f8:	2b00      	cmp	r3, #0
  4007fa:	db03      	blt.n	400804 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4007fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400800:	4b01      	ldr	r3, [pc, #4]	; (400808 <PWM_0_CLOCK_init+0x14>)
  400802:	611a      	str	r2, [r3, #16]
  400804:	4770      	bx	lr
  400806:	bf00      	nop
  400808:	400e0600 	.word	0x400e0600

0040080c <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  40080c:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  40080e:	4b06      	ldr	r3, [pc, #24]	; (400828 <PWM_0_init+0x1c>)
  400810:	4798      	blx	r3
	PWM_0_PORT_init();
  400812:	4b06      	ldr	r3, [pc, #24]	; (40082c <PWM_0_init+0x20>)
  400814:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400816:	4b06      	ldr	r3, [pc, #24]	; (400830 <PWM_0_init+0x24>)
  400818:	4798      	blx	r3
  40081a:	4602      	mov	r2, r0
  40081c:	4905      	ldr	r1, [pc, #20]	; (400834 <PWM_0_init+0x28>)
  40081e:	4806      	ldr	r0, [pc, #24]	; (400838 <PWM_0_init+0x2c>)
  400820:	4b06      	ldr	r3, [pc, #24]	; (40083c <PWM_0_init+0x30>)
  400822:	4798      	blx	r3
  400824:	bd08      	pop	{r3, pc}
  400826:	bf00      	nop
  400828:	004007f5 	.word	0x004007f5
  40082c:	00400795 	.word	0x00400795
  400830:	00401cf9 	.word	0x00401cf9
  400834:	40020000 	.word	0x40020000
  400838:	204004dc 	.word	0x204004dc
  40083c:	00400eb5 	.word	0x00400eb5

00400840 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400840:	4b0c      	ldr	r3, [pc, #48]	; (400874 <PWM_1_PORT_init+0x34>)
  400842:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400844:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400848:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40084a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40084c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400850:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400852:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400856:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400858:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  40085c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40085e:	f042 0201 	orr.w	r2, r2, #1
  400862:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400864:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400866:	f022 0201 	bic.w	r2, r2, #1
  40086a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40086c:	2201      	movs	r2, #1
  40086e:	605a      	str	r2, [r3, #4]
  400870:	4770      	bx	lr
  400872:	bf00      	nop
  400874:	400e0e00 	.word	0x400e0e00

00400878 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400878:	4b05      	ldr	r3, [pc, #20]	; (400890 <PWM_1_CLOCK_init+0x18>)
  40087a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40087e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  400882:	d104      	bne.n	40088e <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400888:	4b01      	ldr	r3, [pc, #4]	; (400890 <PWM_1_CLOCK_init+0x18>)
  40088a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40088e:	4770      	bx	lr
  400890:	400e0600 	.word	0x400e0600

00400894 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  400894:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  400896:	4b06      	ldr	r3, [pc, #24]	; (4008b0 <PWM_1_init+0x1c>)
  400898:	4798      	blx	r3
	PWM_1_PORT_init();
  40089a:	4b06      	ldr	r3, [pc, #24]	; (4008b4 <PWM_1_init+0x20>)
  40089c:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  40089e:	4b06      	ldr	r3, [pc, #24]	; (4008b8 <PWM_1_init+0x24>)
  4008a0:	4798      	blx	r3
  4008a2:	4602      	mov	r2, r0
  4008a4:	4905      	ldr	r1, [pc, #20]	; (4008bc <PWM_1_init+0x28>)
  4008a6:	4806      	ldr	r0, [pc, #24]	; (4008c0 <PWM_1_init+0x2c>)
  4008a8:	4b06      	ldr	r3, [pc, #24]	; (4008c4 <PWM_1_init+0x30>)
  4008aa:	4798      	blx	r3
  4008ac:	bd08      	pop	{r3, pc}
  4008ae:	bf00      	nop
  4008b0:	00400879 	.word	0x00400879
  4008b4:	00400841 	.word	0x00400841
  4008b8:	00401cf9 	.word	0x00401cf9
  4008bc:	4005c000 	.word	0x4005c000
  4008c0:	20400680 	.word	0x20400680
  4008c4:	00400eb5 	.word	0x00400eb5

004008c8 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4008c8:	4b06      	ldr	r3, [pc, #24]	; (4008e4 <ENCODER_A_PORT_init+0x1c>)
  4008ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4008cc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4008d0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4008d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4008d4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  4008d8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4008da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4008de:	605a      	str	r2, [r3, #4]
  4008e0:	4770      	bx	lr
  4008e2:	bf00      	nop
  4008e4:	400e0e00 	.word	0x400e0e00

004008e8 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  4008e8:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4008ea:	4b09      	ldr	r3, [pc, #36]	; (400910 <ENCODER_A_init+0x28>)
  4008ec:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4008ee:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  4008f2:	d103      	bne.n	4008fc <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4008f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4008f8:	4b05      	ldr	r3, [pc, #20]	; (400910 <ENCODER_A_init+0x28>)
  4008fa:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  4008fc:	4b05      	ldr	r3, [pc, #20]	; (400914 <ENCODER_A_init+0x2c>)
  4008fe:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  400900:	4b05      	ldr	r3, [pc, #20]	; (400918 <ENCODER_A_init+0x30>)
  400902:	4798      	blx	r3
  400904:	4602      	mov	r2, r0
  400906:	4905      	ldr	r1, [pc, #20]	; (40091c <ENCODER_A_init+0x34>)
  400908:	4805      	ldr	r0, [pc, #20]	; (400920 <ENCODER_A_init+0x38>)
  40090a:	4b06      	ldr	r3, [pc, #24]	; (400924 <ENCODER_A_init+0x3c>)
  40090c:	4798      	blx	r3
  40090e:	bd08      	pop	{r3, pc}
  400910:	400e0600 	.word	0x400e0600
  400914:	004008c9 	.word	0x004008c9
  400918:	00401ecf 	.word	0x00401ecf
  40091c:	4000c000 	.word	0x4000c000
  400920:	204005a8 	.word	0x204005a8
  400924:	00401065 	.word	0x00401065

00400928 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400928:	4b06      	ldr	r3, [pc, #24]	; (400944 <ENCODER_B_PORT_init+0x1c>)
  40092a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40092c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  400930:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400932:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400934:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  400938:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40093a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40093e:	605a      	str	r2, [r3, #4]
  400940:	4770      	bx	lr
  400942:	bf00      	nop
  400944:	400e1400 	.word	0x400e1400

00400948 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  400948:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40094a:	4b0a      	ldr	r3, [pc, #40]	; (400974 <ENCODER_B_init+0x2c>)
  40094c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400950:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  400954:	d104      	bne.n	400960 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400956:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40095a:	4b06      	ldr	r3, [pc, #24]	; (400974 <ENCODER_B_init+0x2c>)
  40095c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  400960:	4b05      	ldr	r3, [pc, #20]	; (400978 <ENCODER_B_init+0x30>)
  400962:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  400964:	4b05      	ldr	r3, [pc, #20]	; (40097c <ENCODER_B_init+0x34>)
  400966:	4798      	blx	r3
  400968:	4602      	mov	r2, r0
  40096a:	4905      	ldr	r1, [pc, #20]	; (400980 <ENCODER_B_init+0x38>)
  40096c:	4805      	ldr	r0, [pc, #20]	; (400984 <ENCODER_B_init+0x3c>)
  40096e:	4b06      	ldr	r3, [pc, #24]	; (400988 <ENCODER_B_init+0x40>)
  400970:	4798      	blx	r3
  400972:	bd08      	pop	{r3, pc}
  400974:	400e0600 	.word	0x400e0600
  400978:	00400929 	.word	0x00400929
  40097c:	00401ecf 	.word	0x00401ecf
  400980:	40054000 	.word	0x40054000
  400984:	204004f8 	.word	0x204004f8
  400988:	00401065 	.word	0x00401065

0040098c <delay_driver_init>:
}

void delay_driver_init(void)
{
  40098c:	b508      	push	{r3, lr}
	delay_init(SysTick);
  40098e:	4802      	ldr	r0, [pc, #8]	; (400998 <delay_driver_init+0xc>)
  400990:	4b02      	ldr	r3, [pc, #8]	; (40099c <delay_driver_init+0x10>)
  400992:	4798      	blx	r3
  400994:	bd08      	pop	{r3, pc}
  400996:	bf00      	nop
  400998:	e000e010 	.word	0xe000e010
  40099c:	00400d95 	.word	0x00400d95

004009a0 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4009a0:	4b0f      	ldr	r3, [pc, #60]	; (4009e0 <EDBG_COM_PORT_init+0x40>)
  4009a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4009a4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4009a8:	671a      	str	r2, [r3, #112]	; 0x70
  4009aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4009ac:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4009b0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4009b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4009b6:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  4009b8:	4a0a      	ldr	r2, [pc, #40]	; (4009e4 <EDBG_COM_PORT_init+0x44>)
  4009ba:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4009be:	f043 0310 	orr.w	r3, r3, #16
  4009c2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4009c6:	4b08      	ldr	r3, [pc, #32]	; (4009e8 <EDBG_COM_PORT_init+0x48>)
  4009c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4009ca:	f042 0210 	orr.w	r2, r2, #16
  4009ce:	671a      	str	r2, [r3, #112]	; 0x70
  4009d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4009d2:	f042 0210 	orr.w	r2, r2, #16
  4009d6:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4009d8:	2210      	movs	r2, #16
  4009da:	605a      	str	r2, [r3, #4]
  4009dc:	4770      	bx	lr
  4009de:	bf00      	nop
  4009e0:	400e0e00 	.word	0x400e0e00
  4009e4:	40088000 	.word	0x40088000
  4009e8:	400e1000 	.word	0x400e1000

004009ec <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4009ec:	4b04      	ldr	r3, [pc, #16]	; (400a00 <EDBG_COM_CLOCK_init+0x14>)
  4009ee:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4009f0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4009f4:	d103      	bne.n	4009fe <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4009f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4009fa:	4b01      	ldr	r3, [pc, #4]	; (400a00 <EDBG_COM_CLOCK_init+0x14>)
  4009fc:	611a      	str	r2, [r3, #16]
  4009fe:	4770      	bx	lr
  400a00:	400e0600 	.word	0x400e0600

00400a04 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  400a04:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  400a06:	4b06      	ldr	r3, [pc, #24]	; (400a20 <EDBG_COM_init+0x1c>)
  400a08:	4798      	blx	r3
	EDBG_COM_PORT_init();
  400a0a:	4b06      	ldr	r3, [pc, #24]	; (400a24 <EDBG_COM_init+0x20>)
  400a0c:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  400a0e:	4b06      	ldr	r3, [pc, #24]	; (400a28 <EDBG_COM_init+0x24>)
  400a10:	4798      	blx	r3
  400a12:	4602      	mov	r2, r0
  400a14:	4905      	ldr	r1, [pc, #20]	; (400a2c <EDBG_COM_init+0x28>)
  400a16:	4806      	ldr	r0, [pc, #24]	; (400a30 <EDBG_COM_init+0x2c>)
  400a18:	4b06      	ldr	r3, [pc, #24]	; (400a34 <EDBG_COM_init+0x30>)
  400a1a:	4798      	blx	r3
  400a1c:	bd08      	pop	{r3, pc}
  400a1e:	bf00      	nop
  400a20:	004009ed 	.word	0x004009ed
  400a24:	004009a1 	.word	0x004009a1
  400a28:	00402111 	.word	0x00402111
  400a2c:	40028000 	.word	0x40028000
  400a30:	2040059c 	.word	0x2040059c
  400a34:	004011ad 	.word	0x004011ad

00400a38 <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  400a38:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400a3a:	4b32      	ldr	r3, [pc, #200]	; (400b04 <system_init+0xcc>)
  400a3c:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400a3e:	4b32      	ldr	r3, [pc, #200]	; (400b08 <system_init+0xd0>)
  400a40:	699b      	ldr	r3, [r3, #24]
  400a42:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400a46:	d103      	bne.n	400a50 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400a4c:	4b2e      	ldr	r3, [pc, #184]	; (400b08 <system_init+0xd0>)
  400a4e:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400a50:	4b2d      	ldr	r3, [pc, #180]	; (400b08 <system_init+0xd0>)
  400a52:	699b      	ldr	r3, [r3, #24]
  400a54:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400a58:	d103      	bne.n	400a62 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400a5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400a5e:	4b2a      	ldr	r3, [pc, #168]	; (400b08 <system_init+0xd0>)
  400a60:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400a62:	4b29      	ldr	r3, [pc, #164]	; (400b08 <system_init+0xd0>)
  400a64:	699b      	ldr	r3, [r3, #24]
  400a66:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400a6a:	d103      	bne.n	400a74 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400a6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400a70:	4b25      	ldr	r3, [pc, #148]	; (400b08 <system_init+0xd0>)
  400a72:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400a74:	4a25      	ldr	r2, [pc, #148]	; (400b0c <system_init+0xd4>)
  400a76:	6853      	ldr	r3, [r2, #4]
  400a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400a7c:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  400a7e:	4b24      	ldr	r3, [pc, #144]	; (400b10 <system_init+0xd8>)
  400a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400a84:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  400a86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  400a8a:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  400a8c:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400a8e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  400a92:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400a94:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400a96:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400a9c:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400a9e:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400aa0:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400aa6:	f44f 7080 	mov.w	r0, #256	; 0x100
  400aaa:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400aac:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400aae:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400ab0:	f44f 7000 	mov.w	r0, #512	; 0x200
  400ab4:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400ab6:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400ab8:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400aba:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400abe:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400ac0:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400ac2:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400ac4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ac8:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400aca:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400acc:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400ace:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400ad0:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400ad2:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  400ad4:	4b0f      	ldr	r3, [pc, #60]	; (400b14 <system_init+0xdc>)
  400ad6:	4798      	blx	r3
	ADC_1_init();
  400ad8:	4b0f      	ldr	r3, [pc, #60]	; (400b18 <system_init+0xe0>)
  400ada:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  400adc:	4b0f      	ldr	r3, [pc, #60]	; (400b1c <system_init+0xe4>)
  400ade:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  400ae0:	4b0f      	ldr	r3, [pc, #60]	; (400b20 <system_init+0xe8>)
  400ae2:	4798      	blx	r3

	PWM_0_init();
  400ae4:	4b0f      	ldr	r3, [pc, #60]	; (400b24 <system_init+0xec>)
  400ae6:	4798      	blx	r3

	PWM_1_init();
  400ae8:	4b0f      	ldr	r3, [pc, #60]	; (400b28 <system_init+0xf0>)
  400aea:	4798      	blx	r3
	ENCODER_A_init();
  400aec:	4b0f      	ldr	r3, [pc, #60]	; (400b2c <system_init+0xf4>)
  400aee:	4798      	blx	r3
	ENCODER_B_init();
  400af0:	4b0f      	ldr	r3, [pc, #60]	; (400b30 <system_init+0xf8>)
  400af2:	4798      	blx	r3

	delay_driver_init();
  400af4:	4b0f      	ldr	r3, [pc, #60]	; (400b34 <system_init+0xfc>)
  400af6:	4798      	blx	r3

	EDBG_COM_init();
  400af8:	4b0f      	ldr	r3, [pc, #60]	; (400b38 <system_init+0x100>)
  400afa:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  400afc:	4b0f      	ldr	r3, [pc, #60]	; (400b3c <system_init+0x104>)
  400afe:	4798      	blx	r3
  400b00:	bd08      	pop	{r3, pc}
  400b02:	bf00      	nop
  400b04:	004015f5 	.word	0x004015f5
  400b08:	400e0600 	.word	0x400e0600
  400b0c:	400e1850 	.word	0x400e1850
  400b10:	400e0e00 	.word	0x400e0e00
  400b14:	00400679 	.word	0x00400679
  400b18:	004005d1 	.word	0x004005d1
  400b1c:	0040074d 	.word	0x0040074d
  400b20:	00400765 	.word	0x00400765
  400b24:	0040080d 	.word	0x0040080d
  400b28:	00400895 	.word	0x00400895
  400b2c:	004008e9 	.word	0x004008e9
  400b30:	00400949 	.word	0x00400949
  400b34:	0040098d 	.word	0x0040098d
  400b38:	00400a05 	.word	0x00400a05
  400b3c:	00400e0d 	.word	0x00400e0d

00400b40 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  400b40:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  400b42:	6983      	ldr	r3, [r0, #24]
  400b44:	b103      	cbz	r3, 400b48 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  400b46:	4798      	blx	r3
  400b48:	bd08      	pop	{r3, pc}

00400b4a <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  400b4a:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  400b4c:	69c3      	ldr	r3, [r0, #28]
  400b4e:	b103      	cbz	r3, 400b52 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  400b50:	4798      	blx	r3
  400b52:	bd08      	pop	{r3, pc}

00400b54 <adc_async_channel_conversion_done>:
{
  400b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400b58:	4605      	mov	r5, r0
  400b5a:	4688      	mov	r8, r1
  400b5c:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  400b5e:	6a03      	ldr	r3, [r0, #32]
  400b60:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  400b62:	6a87      	ldr	r7, [r0, #40]	; 0x28
  400b64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400b68:	00de      	lsls	r6, r3, #3
  400b6a:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  400b6c:	f104 0a04 	add.w	sl, r4, #4
  400b70:	b2d1      	uxtb	r1, r2
  400b72:	4650      	mov	r0, sl
  400b74:	4b0c      	ldr	r3, [pc, #48]	; (400ba8 <adc_async_channel_conversion_done+0x54>)
  400b76:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  400b78:	4628      	mov	r0, r5
  400b7a:	4b0c      	ldr	r3, [pc, #48]	; (400bac <adc_async_channel_conversion_done+0x58>)
  400b7c:	4798      	blx	r3
  400b7e:	2801      	cmp	r0, #1
  400b80:	d907      	bls.n	400b92 <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  400b82:	ea4f 2119 	mov.w	r1, r9, lsr #8
  400b86:	4650      	mov	r0, sl
  400b88:	4b07      	ldr	r3, [pc, #28]	; (400ba8 <adc_async_channel_conversion_done+0x54>)
  400b8a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  400b8c:	8aa3      	ldrh	r3, [r4, #20]
  400b8e:	3301      	adds	r3, #1
  400b90:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  400b92:	8aa3      	ldrh	r3, [r4, #20]
  400b94:	3301      	adds	r3, #1
  400b96:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  400b98:	59bb      	ldr	r3, [r7, r6]
  400b9a:	b113      	cbz	r3, 400ba2 <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  400b9c:	4641      	mov	r1, r8
  400b9e:	4628      	mov	r0, r5
  400ba0:	4798      	blx	r3
  400ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400ba6:	bf00      	nop
  400ba8:	004012c5 	.word	0x004012c5
  400bac:	004015d5 	.word	0x004015d5

00400bb0 <adc_async_init>:
{
  400bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400bb4:	4616      	mov	r6, r2
  400bb6:	461c      	mov	r4, r3
  400bb8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  400bbc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  400bbe:	4607      	mov	r7, r0
  400bc0:	4689      	mov	r9, r1
  400bc2:	2800      	cmp	r0, #0
  400bc4:	bf18      	it	ne
  400bc6:	2900      	cmpne	r1, #0
  400bc8:	d00b      	beq.n	400be2 <adc_async_init+0x32>
  400bca:	1c13      	adds	r3, r2, #0
  400bcc:	bf18      	it	ne
  400bce:	2301      	movne	r3, #1
  400bd0:	f1b8 0f00 	cmp.w	r8, #0
  400bd4:	d017      	beq.n	400c06 <adc_async_init+0x56>
  400bd6:	b1b3      	cbz	r3, 400c06 <adc_async_init+0x56>
  400bd8:	b10d      	cbz	r5, 400bde <adc_async_init+0x2e>
  400bda:	2001      	movs	r0, #1
  400bdc:	e002      	b.n	400be4 <adc_async_init+0x34>
  400bde:	2000      	movs	r0, #0
  400be0:	e000      	b.n	400be4 <adc_async_init+0x34>
  400be2:	2000      	movs	r0, #0
  400be4:	f8df b068 	ldr.w	fp, [pc, #104]	; 400c50 <adc_async_init+0xa0>
  400be8:	223f      	movs	r2, #63	; 0x3f
  400bea:	4659      	mov	r1, fp
  400bec:	f8df a064 	ldr.w	sl, [pc, #100]	; 400c54 <adc_async_init+0xa4>
  400bf0:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  400bf2:	1c60      	adds	r0, r4, #1
  400bf4:	2240      	movs	r2, #64	; 0x40
  400bf6:	4659      	mov	r1, fp
  400bf8:	4580      	cmp	r8, r0
  400bfa:	bfcc      	ite	gt
  400bfc:	2000      	movgt	r0, #0
  400bfe:	2001      	movle	r0, #1
  400c00:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  400c02:	2300      	movs	r3, #0
  400c04:	e005      	b.n	400c12 <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  400c06:	2000      	movs	r0, #0
  400c08:	e7ec      	b.n	400be4 <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  400c0a:	22ff      	movs	r2, #255	; 0xff
  400c0c:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  400c0e:	3301      	adds	r3, #1
  400c10:	b2db      	uxtb	r3, r3
  400c12:	42a3      	cmp	r3, r4
  400c14:	d9f9      	bls.n	400c0a <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  400c16:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  400c18:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  400c1c:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  400c20:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  400c22:	4649      	mov	r1, r9
  400c24:	4638      	mov	r0, r7
  400c26:	4b06      	ldr	r3, [pc, #24]	; (400c40 <adc_async_init+0x90>)
  400c28:	4798      	blx	r3
	if (init_status) {
  400c2a:	4603      	mov	r3, r0
  400c2c:	b928      	cbnz	r0, 400c3a <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  400c2e:	4a05      	ldr	r2, [pc, #20]	; (400c44 <adc_async_init+0x94>)
  400c30:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  400c32:	4a05      	ldr	r2, [pc, #20]	; (400c48 <adc_async_init+0x98>)
  400c34:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  400c36:	4a05      	ldr	r2, [pc, #20]	; (400c4c <adc_async_init+0x9c>)
  400c38:	607a      	str	r2, [r7, #4]
}
  400c3a:	4618      	mov	r0, r3
  400c3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400c40:	00401515 	.word	0x00401515
  400c44:	00400b55 	.word	0x00400b55
  400c48:	00400b41 	.word	0x00400b41
  400c4c:	00400b4b 	.word	0x00400b4b
  400c50:	0040573c 	.word	0x0040573c
  400c54:	00401221 	.word	0x00401221

00400c58 <adc_async_register_channel_buffer>:
{
  400c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c5c:	460e      	mov	r6, r1
  400c5e:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  400c60:	4605      	mov	r5, r0
  400c62:	4690      	mov	r8, r2
  400c64:	2800      	cmp	r0, #0
  400c66:	bf18      	it	ne
  400c68:	2a00      	cmpne	r2, #0
  400c6a:	d002      	beq.n	400c72 <adc_async_register_channel_buffer+0x1a>
  400c6c:	b9c3      	cbnz	r3, 400ca0 <adc_async_register_channel_buffer+0x48>
  400c6e:	2000      	movs	r0, #0
  400c70:	e000      	b.n	400c74 <adc_async_register_channel_buffer+0x1c>
  400c72:	2000      	movs	r0, #0
  400c74:	f8df 9094 	ldr.w	r9, [pc, #148]	; 400d0c <adc_async_register_channel_buffer+0xb4>
  400c78:	2266      	movs	r2, #102	; 0x66
  400c7a:	4649      	mov	r1, r9
  400c7c:	4c21      	ldr	r4, [pc, #132]	; (400d04 <adc_async_register_channel_buffer+0xac>)
  400c7e:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  400c80:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  400c84:	2267      	movs	r2, #103	; 0x67
  400c86:	4649      	mov	r1, r9
  400c88:	42b0      	cmp	r0, r6
  400c8a:	bf34      	ite	cc
  400c8c:	2000      	movcc	r0, #0
  400c8e:	2001      	movcs	r0, #1
  400c90:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  400c92:	6a29      	ldr	r1, [r5, #32]
  400c94:	5d8b      	ldrb	r3, [r1, r6]
  400c96:	2bff      	cmp	r3, #255	; 0xff
  400c98:	d12b      	bne.n	400cf2 <adc_async_register_channel_buffer+0x9a>
  400c9a:	2400      	movs	r4, #0
  400c9c:	4623      	mov	r3, r4
  400c9e:	e003      	b.n	400ca8 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  400ca0:	2001      	movs	r0, #1
  400ca2:	e7e7      	b.n	400c74 <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  400ca4:	3301      	adds	r3, #1
  400ca6:	b2db      	uxtb	r3, r3
  400ca8:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  400cac:	4293      	cmp	r3, r2
  400cae:	d805      	bhi.n	400cbc <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  400cb0:	5cca      	ldrb	r2, [r1, r3]
  400cb2:	2aff      	cmp	r2, #255	; 0xff
  400cb4:	d0f6      	beq.n	400ca4 <adc_async_register_channel_buffer+0x4c>
			index++;
  400cb6:	3401      	adds	r4, #1
  400cb8:	b2e4      	uxtb	r4, r4
  400cba:	e7f3      	b.n	400ca4 <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  400cbc:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  400cc0:	429c      	cmp	r4, r3
  400cc2:	d819      	bhi.n	400cf8 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  400cc4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  400cc6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  400cca:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  400cce:	4448      	add	r0, r9
  400cd0:	463a      	mov	r2, r7
  400cd2:	4641      	mov	r1, r8
  400cd4:	3004      	adds	r0, #4
  400cd6:	4b0c      	ldr	r3, [pc, #48]	; (400d08 <adc_async_register_channel_buffer+0xb0>)
  400cd8:	4798      	blx	r3
  400cda:	4602      	mov	r2, r0
  400cdc:	b978      	cbnz	r0, 400cfe <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  400cde:	6a2b      	ldr	r3, [r5, #32]
  400ce0:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  400ce2:	6aab      	ldr	r3, [r5, #40]	; 0x28
  400ce4:	4499      	add	r9, r3
  400ce6:	2300      	movs	r3, #0
  400ce8:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  400cec:	4610      	mov	r0, r2
  400cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  400cf2:	f06f 020c 	mvn.w	r2, #12
  400cf6:	e7f9      	b.n	400cec <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  400cf8:	f06f 021b 	mvn.w	r2, #27
  400cfc:	e7f6      	b.n	400cec <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  400cfe:	f06f 020c 	mvn.w	r2, #12
  400d02:	e7f3      	b.n	400cec <adc_async_register_channel_buffer+0x94>
  400d04:	00401221 	.word	0x00401221
  400d08:	00401281 	.word	0x00401281
  400d0c:	0040573c 	.word	0x0040573c

00400d10 <adc_async_enable_channel>:
{
  400d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400d12:	460d      	mov	r5, r1
	ASSERT(descr);
  400d14:	4f0b      	ldr	r7, [pc, #44]	; (400d44 <adc_async_enable_channel+0x34>)
  400d16:	4604      	mov	r4, r0
  400d18:	2283      	movs	r2, #131	; 0x83
  400d1a:	4639      	mov	r1, r7
  400d1c:	3000      	adds	r0, #0
  400d1e:	bf18      	it	ne
  400d20:	2001      	movne	r0, #1
  400d22:	4e09      	ldr	r6, [pc, #36]	; (400d48 <adc_async_enable_channel+0x38>)
  400d24:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  400d26:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  400d2a:	2284      	movs	r2, #132	; 0x84
  400d2c:	4639      	mov	r1, r7
  400d2e:	42a8      	cmp	r0, r5
  400d30:	bf34      	ite	cc
  400d32:	2000      	movcc	r0, #0
  400d34:	2001      	movcs	r0, #1
  400d36:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  400d38:	4629      	mov	r1, r5
  400d3a:	4620      	mov	r0, r4
  400d3c:	4b03      	ldr	r3, [pc, #12]	; (400d4c <adc_async_enable_channel+0x3c>)
  400d3e:	4798      	blx	r3
}
  400d40:	2000      	movs	r0, #0
  400d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d44:	0040573c 	.word	0x0040573c
  400d48:	00401221 	.word	0x00401221
  400d4c:	004015c9 	.word	0x004015c9

00400d50 <adc_async_start_conversion>:
{
  400d50:	b510      	push	{r4, lr}
	ASSERT(descr);
  400d52:	4604      	mov	r4, r0
  400d54:	22d6      	movs	r2, #214	; 0xd6
  400d56:	4905      	ldr	r1, [pc, #20]	; (400d6c <adc_async_start_conversion+0x1c>)
  400d58:	3000      	adds	r0, #0
  400d5a:	bf18      	it	ne
  400d5c:	2001      	movne	r0, #1
  400d5e:	4b04      	ldr	r3, [pc, #16]	; (400d70 <adc_async_start_conversion+0x20>)
  400d60:	4798      	blx	r3
	_adc_async_convert(&descr->device);
  400d62:	4620      	mov	r0, r4
  400d64:	4b03      	ldr	r3, [pc, #12]	; (400d74 <adc_async_start_conversion+0x24>)
  400d66:	4798      	blx	r3
}
  400d68:	2000      	movs	r0, #0
  400d6a:	bd10      	pop	{r4, pc}
  400d6c:	0040573c 	.word	0x0040573c
  400d70:	00401221 	.word	0x00401221
  400d74:	004015d9 	.word	0x004015d9

00400d78 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400d78:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400d7c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400d7e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400d80:	f3bf 8f5f 	dmb	sy
  400d84:	4770      	bx	lr

00400d86 <atomic_leave_critical>:
  400d86:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400d8a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400d8c:	f383 8810 	msr	PRIMASK, r3
  400d90:	4770      	bx	lr
	...

00400d94 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400d94:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400d96:	4b02      	ldr	r3, [pc, #8]	; (400da0 <delay_init+0xc>)
  400d98:	6018      	str	r0, [r3, #0]
  400d9a:	4b02      	ldr	r3, [pc, #8]	; (400da4 <delay_init+0x10>)
  400d9c:	4798      	blx	r3
  400d9e:	bd08      	pop	{r3, pc}
  400da0:	20400318 	.word	0x20400318
  400da4:	00401d11 	.word	0x00401d11

00400da8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400da8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  400daa:	4b04      	ldr	r3, [pc, #16]	; (400dbc <delay_ms+0x14>)
  400dac:	681c      	ldr	r4, [r3, #0]
  400dae:	4b04      	ldr	r3, [pc, #16]	; (400dc0 <delay_ms+0x18>)
  400db0:	4798      	blx	r3
  400db2:	4601      	mov	r1, r0
  400db4:	4620      	mov	r0, r4
  400db6:	4b03      	ldr	r3, [pc, #12]	; (400dc4 <delay_ms+0x1c>)
  400db8:	4798      	blx	r3
  400dba:	bd10      	pop	{r4, pc}
  400dbc:	20400318 	.word	0x20400318
  400dc0:	004015e1 	.word	0x004015e1
  400dc4:	00401d1d 	.word	0x00401d1d

00400dc8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400dc8:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400dca:	2504      	movs	r5, #4
  400dcc:	2400      	movs	r4, #0

	while (upper >= lower) {
  400dce:	e007      	b.n	400de0 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  400dd0:	4a0d      	ldr	r2, [pc, #52]	; (400e08 <process_ext_irq+0x40>)
  400dd2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400dd6:	b1b3      	cbz	r3, 400e06 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400dd8:	4798      	blx	r3
  400dda:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  400ddc:	3a01      	subs	r2, #1
  400dde:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  400de0:	42ac      	cmp	r4, r5
  400de2:	d810      	bhi.n	400e06 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400de4:	192b      	adds	r3, r5, r4
  400de6:	105b      	asrs	r3, r3, #1
  400de8:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400dea:	2a03      	cmp	r2, #3
  400dec:	d80b      	bhi.n	400e06 <process_ext_irq+0x3e>
  400dee:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  400df0:	4905      	ldr	r1, [pc, #20]	; (400e08 <process_ext_irq+0x40>)
  400df2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  400df6:	6849      	ldr	r1, [r1, #4]
  400df8:	4281      	cmp	r1, r0
  400dfa:	d0e9      	beq.n	400dd0 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  400dfc:	4281      	cmp	r1, r0
  400dfe:	d2ed      	bcs.n	400ddc <process_ext_irq+0x14>
			lower = middle + 1;
  400e00:	3201      	adds	r2, #1
  400e02:	b2d4      	uxtb	r4, r2
  400e04:	e7ec      	b.n	400de0 <process_ext_irq+0x18>
  400e06:	bd38      	pop	{r3, r4, r5, pc}
  400e08:	2040031c 	.word	0x2040031c

00400e0c <ext_irq_init>:
{
  400e0c:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400e0e:	2300      	movs	r3, #0
  400e10:	e00a      	b.n	400e28 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400e12:	4a08      	ldr	r2, [pc, #32]	; (400e34 <ext_irq_init+0x28>)
  400e14:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400e18:	f04f 30ff 	mov.w	r0, #4294967295
  400e1c:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400e1e:	2100      	movs	r1, #0
  400e20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400e24:	3301      	adds	r3, #1
  400e26:	b29b      	uxth	r3, r3
  400e28:	2b03      	cmp	r3, #3
  400e2a:	d9f2      	bls.n	400e12 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400e2c:	4802      	ldr	r0, [pc, #8]	; (400e38 <ext_irq_init+0x2c>)
  400e2e:	4b03      	ldr	r3, [pc, #12]	; (400e3c <ext_irq_init+0x30>)
  400e30:	4798      	blx	r3
}
  400e32:	bd08      	pop	{r3, pc}
  400e34:	2040031c 	.word	0x2040031c
  400e38:	00400dc9 	.word	0x00400dc9
  400e3c:	00401925 	.word	0x00401925

00400e40 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400e40:	b570      	push	{r4, r5, r6, lr}
  400e42:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400e44:	4604      	mov	r4, r0
  400e46:	460d      	mov	r5, r1
  400e48:	2800      	cmp	r0, #0
  400e4a:	bf18      	it	ne
  400e4c:	2900      	cmpne	r1, #0
  400e4e:	bf14      	ite	ne
  400e50:	2001      	movne	r0, #1
  400e52:	2000      	moveq	r0, #0
  400e54:	2234      	movs	r2, #52	; 0x34
  400e56:	4904      	ldr	r1, [pc, #16]	; (400e68 <io_write+0x28>)
  400e58:	4b04      	ldr	r3, [pc, #16]	; (400e6c <io_write+0x2c>)
  400e5a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400e5c:	6823      	ldr	r3, [r4, #0]
  400e5e:	4632      	mov	r2, r6
  400e60:	4629      	mov	r1, r5
  400e62:	4620      	mov	r0, r4
  400e64:	4798      	blx	r3
}
  400e66:	bd70      	pop	{r4, r5, r6, pc}
  400e68:	00405758 	.word	0x00405758
  400e6c:	00401221 	.word	0x00401221

00400e70 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400e70:	b570      	push	{r4, r5, r6, lr}
  400e72:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400e74:	4604      	mov	r4, r0
  400e76:	460d      	mov	r5, r1
  400e78:	2800      	cmp	r0, #0
  400e7a:	bf18      	it	ne
  400e7c:	2900      	cmpne	r1, #0
  400e7e:	bf14      	ite	ne
  400e80:	2001      	movne	r0, #1
  400e82:	2000      	moveq	r0, #0
  400e84:	223d      	movs	r2, #61	; 0x3d
  400e86:	4904      	ldr	r1, [pc, #16]	; (400e98 <io_read+0x28>)
  400e88:	4b04      	ldr	r3, [pc, #16]	; (400e9c <io_read+0x2c>)
  400e8a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400e8c:	6863      	ldr	r3, [r4, #4]
  400e8e:	4632      	mov	r2, r6
  400e90:	4629      	mov	r1, r5
  400e92:	4620      	mov	r0, r4
  400e94:	4798      	blx	r3
}
  400e96:	bd70      	pop	{r4, r5, r6, pc}
  400e98:	00405758 	.word	0x00405758
  400e9c:	00401221 	.word	0x00401221

00400ea0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400ea0:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400ea2:	6943      	ldr	r3, [r0, #20]
  400ea4:	b103      	cbz	r3, 400ea8 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400ea6:	4798      	blx	r3
  400ea8:	bd08      	pop	{r3, pc}

00400eaa <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400eaa:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400eac:	6983      	ldr	r3, [r0, #24]
  400eae:	b103      	cbz	r3, 400eb2 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400eb0:	4798      	blx	r3
  400eb2:	bd08      	pop	{r3, pc}

00400eb4 <pwm_init>:
{
  400eb4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400eb6:	4604      	mov	r4, r0
  400eb8:	460d      	mov	r5, r1
  400eba:	2800      	cmp	r0, #0
  400ebc:	bf18      	it	ne
  400ebe:	2900      	cmpne	r1, #0
  400ec0:	bf14      	ite	ne
  400ec2:	2001      	movne	r0, #1
  400ec4:	2000      	moveq	r0, #0
  400ec6:	2233      	movs	r2, #51	; 0x33
  400ec8:	4906      	ldr	r1, [pc, #24]	; (400ee4 <pwm_init+0x30>)
  400eca:	4b07      	ldr	r3, [pc, #28]	; (400ee8 <pwm_init+0x34>)
  400ecc:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  400ece:	4629      	mov	r1, r5
  400ed0:	4620      	mov	r0, r4
  400ed2:	4b06      	ldr	r3, [pc, #24]	; (400eec <pwm_init+0x38>)
  400ed4:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400ed6:	4b06      	ldr	r3, [pc, #24]	; (400ef0 <pwm_init+0x3c>)
  400ed8:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400eda:	4b06      	ldr	r3, [pc, #24]	; (400ef4 <pwm_init+0x40>)
  400edc:	6063      	str	r3, [r4, #4]
}
  400ede:	2000      	movs	r0, #0
  400ee0:	bd38      	pop	{r3, r4, r5, pc}
  400ee2:	bf00      	nop
  400ee4:	0040576c 	.word	0x0040576c
  400ee8:	00401221 	.word	0x00401221
  400eec:	00401a8d 	.word	0x00401a8d
  400ef0:	00400ea1 	.word	0x00400ea1
  400ef4:	00400eab 	.word	0x00400eab

00400ef8 <pwm_enable>:
{
  400ef8:	b510      	push	{r4, lr}
	ASSERT(descr);
  400efa:	4604      	mov	r4, r0
  400efc:	224a      	movs	r2, #74	; 0x4a
  400efe:	4909      	ldr	r1, [pc, #36]	; (400f24 <pwm_enable+0x2c>)
  400f00:	3000      	adds	r0, #0
  400f02:	bf18      	it	ne
  400f04:	2001      	movne	r0, #1
  400f06:	4b08      	ldr	r3, [pc, #32]	; (400f28 <pwm_enable+0x30>)
  400f08:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  400f0a:	4620      	mov	r0, r4
  400f0c:	4b07      	ldr	r3, [pc, #28]	; (400f2c <pwm_enable+0x34>)
  400f0e:	4798      	blx	r3
  400f10:	b920      	cbnz	r0, 400f1c <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  400f12:	4620      	mov	r0, r4
  400f14:	4b06      	ldr	r3, [pc, #24]	; (400f30 <pwm_enable+0x38>)
  400f16:	4798      	blx	r3
	return ERR_NONE;
  400f18:	2000      	movs	r0, #0
  400f1a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400f1c:	f06f 0010 	mvn.w	r0, #16
}
  400f20:	bd10      	pop	{r4, pc}
  400f22:	bf00      	nop
  400f24:	0040576c 	.word	0x0040576c
  400f28:	00401221 	.word	0x00401221
  400f2c:	00401c69 	.word	0x00401c69
  400f30:	00401bc5 	.word	0x00401bc5

00400f34 <pwm_register_callback>:
{
  400f34:	b570      	push	{r4, r5, r6, lr}
	switch (type) {
  400f36:	460d      	mov	r5, r1
  400f38:	b121      	cbz	r1, 400f44 <pwm_register_callback+0x10>
  400f3a:	2901      	cmp	r1, #1
  400f3c:	d015      	beq.n	400f6a <pwm_register_callback+0x36>
		return ERR_INVALID_ARG;
  400f3e:	f06f 000c 	mvn.w	r0, #12
}
  400f42:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.period = cb;
  400f44:	6142      	str	r2, [r0, #20]
  400f46:	4616      	mov	r6, r2
  400f48:	4604      	mov	r4, r0
	ASSERT(descr);
  400f4a:	2272      	movs	r2, #114	; 0x72
  400f4c:	4908      	ldr	r1, [pc, #32]	; (400f70 <pwm_register_callback+0x3c>)
  400f4e:	3000      	adds	r0, #0
  400f50:	bf18      	it	ne
  400f52:	2001      	movne	r0, #1
  400f54:	4b07      	ldr	r3, [pc, #28]	; (400f74 <pwm_register_callback+0x40>)
  400f56:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
  400f58:	1c32      	adds	r2, r6, #0
  400f5a:	bf18      	it	ne
  400f5c:	2201      	movne	r2, #1
  400f5e:	4629      	mov	r1, r5
  400f60:	4620      	mov	r0, r4
  400f62:	4b05      	ldr	r3, [pc, #20]	; (400f78 <pwm_register_callback+0x44>)
  400f64:	4798      	blx	r3
	return ERR_NONE;
  400f66:	2000      	movs	r0, #0
  400f68:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
  400f6a:	6182      	str	r2, [r0, #24]
		break;
  400f6c:	e7eb      	b.n	400f46 <pwm_register_callback+0x12>
  400f6e:	bf00      	nop
  400f70:	0040576c 	.word	0x0040576c
  400f74:	00401221 	.word	0x00401221
  400f78:	00401c99 	.word	0x00401c99

00400f7c <pwm_set_parameters>:
{
  400f7c:	b570      	push	{r4, r5, r6, lr}
  400f7e:	460d      	mov	r5, r1
  400f80:	4616      	mov	r6, r2
	ASSERT(descr);
  400f82:	4604      	mov	r4, r0
  400f84:	227c      	movs	r2, #124	; 0x7c
  400f86:	4906      	ldr	r1, [pc, #24]	; (400fa0 <pwm_set_parameters+0x24>)
  400f88:	3000      	adds	r0, #0
  400f8a:	bf18      	it	ne
  400f8c:	2001      	movne	r0, #1
  400f8e:	4b05      	ldr	r3, [pc, #20]	; (400fa4 <pwm_set_parameters+0x28>)
  400f90:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  400f92:	4632      	mov	r2, r6
  400f94:	4629      	mov	r1, r5
  400f96:	4620      	mov	r0, r4
  400f98:	4b03      	ldr	r3, [pc, #12]	; (400fa8 <pwm_set_parameters+0x2c>)
  400f9a:	4798      	blx	r3
}
  400f9c:	2000      	movs	r0, #0
  400f9e:	bd70      	pop	{r4, r5, r6, pc}
  400fa0:	0040576c 	.word	0x0040576c
  400fa4:	00401221 	.word	0x00401221
  400fa8:	00401c09 	.word	0x00401c09

00400fac <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400fae:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400fb0:	b117      	cbz	r7, 400fb8 <timer_add_timer_task+0xc>
  400fb2:	463c      	mov	r4, r7
  400fb4:	2600      	movs	r6, #0
  400fb6:	e00b      	b.n	400fd0 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400fb8:	4b0e      	ldr	r3, [pc, #56]	; (400ff4 <timer_add_timer_task+0x48>)
  400fba:	4798      	blx	r3
		return;
  400fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400fbe:	68a5      	ldr	r5, [r4, #8]
  400fc0:	442b      	add	r3, r5
  400fc2:	1a9b      	subs	r3, r3, r2
  400fc4:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400fc6:	688d      	ldr	r5, [r1, #8]
  400fc8:	42ab      	cmp	r3, r5
  400fca:	d209      	bcs.n	400fe0 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400fcc:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400fce:	6824      	ldr	r4, [r4, #0]
  400fd0:	b134      	cbz	r4, 400fe0 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400fd2:	6863      	ldr	r3, [r4, #4]
  400fd4:	4293      	cmp	r3, r2
  400fd6:	d8f2      	bhi.n	400fbe <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400fd8:	68a5      	ldr	r5, [r4, #8]
  400fda:	1a9b      	subs	r3, r3, r2
  400fdc:	442b      	add	r3, r5
  400fde:	e7f2      	b.n	400fc6 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400fe0:	42bc      	cmp	r4, r7
  400fe2:	d003      	beq.n	400fec <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400fe4:	4630      	mov	r0, r6
  400fe6:	4b04      	ldr	r3, [pc, #16]	; (400ff8 <timer_add_timer_task+0x4c>)
  400fe8:	4798      	blx	r3
  400fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400fec:	4b01      	ldr	r3, [pc, #4]	; (400ff4 <timer_add_timer_task+0x48>)
  400fee:	4798      	blx	r3
  400ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ff2:	bf00      	nop
  400ff4:	0040123d 	.word	0x0040123d
  400ff8:	00401269 	.word	0x00401269

00400ffc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ffe:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  401000:	6906      	ldr	r6, [r0, #16]
  401002:	3601      	adds	r6, #1
  401004:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  401006:	7e03      	ldrb	r3, [r0, #24]
  401008:	f013 0f01 	tst.w	r3, #1
  40100c:	d105      	bne.n	40101a <timer_process_counted+0x1e>
  40100e:	7e03      	ldrb	r3, [r0, #24]
  401010:	f013 0f02 	tst.w	r3, #2
  401014:	d101      	bne.n	40101a <timer_process_counted+0x1e>
  401016:	4605      	mov	r5, r0
  401018:	e009      	b.n	40102e <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  40101a:	7e03      	ldrb	r3, [r0, #24]
  40101c:	f043 0302 	orr.w	r3, r3, #2
  401020:	7603      	strb	r3, [r0, #24]
		return;
  401022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401024:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  401026:	68e3      	ldr	r3, [r4, #12]
  401028:	4620      	mov	r0, r4
  40102a:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  40102c:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  40102e:	b19c      	cbz	r4, 401058 <timer_process_counted+0x5c>
  401030:	6863      	ldr	r3, [r4, #4]
  401032:	1af3      	subs	r3, r6, r3
  401034:	68a2      	ldr	r2, [r4, #8]
  401036:	4293      	cmp	r3, r2
  401038:	d30e      	bcc.n	401058 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  40103a:	f105 0714 	add.w	r7, r5, #20
  40103e:	4638      	mov	r0, r7
  401040:	4b06      	ldr	r3, [pc, #24]	; (40105c <timer_process_counted+0x60>)
  401042:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  401044:	7c23      	ldrb	r3, [r4, #16]
  401046:	2b01      	cmp	r3, #1
  401048:	d1ec      	bne.n	401024 <timer_process_counted+0x28>
			tmp->time_label = time;
  40104a:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  40104c:	4632      	mov	r2, r6
  40104e:	4621      	mov	r1, r4
  401050:	4638      	mov	r0, r7
  401052:	4b03      	ldr	r3, [pc, #12]	; (401060 <timer_process_counted+0x64>)
  401054:	4798      	blx	r3
  401056:	e7e5      	b.n	401024 <timer_process_counted+0x28>
  401058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40105a:	bf00      	nop
  40105c:	00401271 	.word	0x00401271
  401060:	00400fad 	.word	0x00400fad

00401064 <timer_init>:
{
  401064:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  401066:	4604      	mov	r4, r0
  401068:	460d      	mov	r5, r1
  40106a:	2800      	cmp	r0, #0
  40106c:	bf18      	it	ne
  40106e:	2900      	cmpne	r1, #0
  401070:	bf14      	ite	ne
  401072:	2001      	movne	r0, #1
  401074:	2000      	moveq	r0, #0
  401076:	223b      	movs	r2, #59	; 0x3b
  401078:	4905      	ldr	r1, [pc, #20]	; (401090 <timer_init+0x2c>)
  40107a:	4b06      	ldr	r3, [pc, #24]	; (401094 <timer_init+0x30>)
  40107c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  40107e:	4629      	mov	r1, r5
  401080:	4620      	mov	r0, r4
  401082:	4b05      	ldr	r3, [pc, #20]	; (401098 <timer_init+0x34>)
  401084:	4798      	blx	r3
	descr->time                           = 0;
  401086:	2000      	movs	r0, #0
  401088:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  40108a:	4b04      	ldr	r3, [pc, #16]	; (40109c <timer_init+0x38>)
  40108c:	6023      	str	r3, [r4, #0]
}
  40108e:	bd38      	pop	{r3, r4, r5, pc}
  401090:	00405784 	.word	0x00405784
  401094:	00401221 	.word	0x00401221
  401098:	00401dd5 	.word	0x00401dd5
  40109c:	00400ffd 	.word	0x00400ffd

004010a0 <timer_start>:
{
  4010a0:	b510      	push	{r4, lr}
	ASSERT(descr);
  4010a2:	4604      	mov	r4, r0
  4010a4:	2253      	movs	r2, #83	; 0x53
  4010a6:	4909      	ldr	r1, [pc, #36]	; (4010cc <timer_start+0x2c>)
  4010a8:	3000      	adds	r0, #0
  4010aa:	bf18      	it	ne
  4010ac:	2001      	movne	r0, #1
  4010ae:	4b08      	ldr	r3, [pc, #32]	; (4010d0 <timer_start+0x30>)
  4010b0:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  4010b2:	4620      	mov	r0, r4
  4010b4:	4b07      	ldr	r3, [pc, #28]	; (4010d4 <timer_start+0x34>)
  4010b6:	4798      	blx	r3
  4010b8:	b920      	cbnz	r0, 4010c4 <timer_start+0x24>
	_timer_start(&descr->device);
  4010ba:	4620      	mov	r0, r4
  4010bc:	4b06      	ldr	r3, [pc, #24]	; (4010d8 <timer_start+0x38>)
  4010be:	4798      	blx	r3
	return ERR_NONE;
  4010c0:	2000      	movs	r0, #0
  4010c2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4010c4:	f06f 0010 	mvn.w	r0, #16
}
  4010c8:	bd10      	pop	{r4, pc}
  4010ca:	bf00      	nop
  4010cc:	00405784 	.word	0x00405784
  4010d0:	00401221 	.word	0x00401221
  4010d4:	00401ebd 	.word	0x00401ebd
  4010d8:	00401eb1 	.word	0x00401eb1

004010dc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4010de:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4010e0:	4605      	mov	r5, r0
  4010e2:	460f      	mov	r7, r1
  4010e4:	2800      	cmp	r0, #0
  4010e6:	bf18      	it	ne
  4010e8:	2900      	cmpne	r1, #0
  4010ea:	d002      	beq.n	4010f2 <usart_sync_write+0x16>
  4010ec:	bb0a      	cbnz	r2, 401132 <usart_sync_write+0x56>
  4010ee:	2000      	movs	r0, #0
  4010f0:	e000      	b.n	4010f4 <usart_sync_write+0x18>
  4010f2:	2000      	movs	r0, #0
  4010f4:	22f1      	movs	r2, #241	; 0xf1
  4010f6:	4910      	ldr	r1, [pc, #64]	; (401138 <usart_sync_write+0x5c>)
  4010f8:	4b10      	ldr	r3, [pc, #64]	; (40113c <usart_sync_write+0x60>)
  4010fa:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  4010fc:	f105 0408 	add.w	r4, r5, #8
  401100:	4620      	mov	r0, r4
  401102:	4b0f      	ldr	r3, [pc, #60]	; (401140 <usart_sync_write+0x64>)
  401104:	4798      	blx	r3
  401106:	2800      	cmp	r0, #0
  401108:	d0f8      	beq.n	4010fc <usart_sync_write+0x20>
  40110a:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  40110c:	5d79      	ldrb	r1, [r7, r5]
  40110e:	4620      	mov	r0, r4
  401110:	4b0c      	ldr	r3, [pc, #48]	; (401144 <usart_sync_write+0x68>)
  401112:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  401114:	4620      	mov	r0, r4
  401116:	4b0a      	ldr	r3, [pc, #40]	; (401140 <usart_sync_write+0x64>)
  401118:	4798      	blx	r3
  40111a:	2800      	cmp	r0, #0
  40111c:	d0fa      	beq.n	401114 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  40111e:	3501      	adds	r5, #1
  401120:	42b5      	cmp	r5, r6
  401122:	d3f3      	bcc.n	40110c <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  401124:	4620      	mov	r0, r4
  401126:	4b08      	ldr	r3, [pc, #32]	; (401148 <usart_sync_write+0x6c>)
  401128:	4798      	blx	r3
  40112a:	2800      	cmp	r0, #0
  40112c:	d0fa      	beq.n	401124 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  40112e:	4628      	mov	r0, r5
  401130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  401132:	2001      	movs	r0, #1
  401134:	e7de      	b.n	4010f4 <usart_sync_write+0x18>
  401136:	bf00      	nop
  401138:	0040579c 	.word	0x0040579c
  40113c:	00401221 	.word	0x00401221
  401140:	00402099 	.word	0x00402099
  401144:	00402051 	.word	0x00402051
  401148:	004020c1 	.word	0x004020c1

0040114c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  40114c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401150:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401152:	4605      	mov	r5, r0
  401154:	4688      	mov	r8, r1
  401156:	2800      	cmp	r0, #0
  401158:	bf18      	it	ne
  40115a:	2900      	cmpne	r1, #0
  40115c:	d002      	beq.n	401164 <usart_sync_read+0x18>
  40115e:	b9d2      	cbnz	r2, 401196 <usart_sync_read+0x4a>
  401160:	2000      	movs	r0, #0
  401162:	e000      	b.n	401166 <usart_sync_read+0x1a>
  401164:	2000      	movs	r0, #0
  401166:	f44f 7286 	mov.w	r2, #268	; 0x10c
  40116a:	490c      	ldr	r1, [pc, #48]	; (40119c <usart_sync_read+0x50>)
  40116c:	4b0c      	ldr	r3, [pc, #48]	; (4011a0 <usart_sync_read+0x54>)
  40116e:	4798      	blx	r3
	uint32_t                      offset = 0;
  401170:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  401172:	f105 0408 	add.w	r4, r5, #8
  401176:	4620      	mov	r0, r4
  401178:	4b0a      	ldr	r3, [pc, #40]	; (4011a4 <usart_sync_read+0x58>)
  40117a:	4798      	blx	r3
  40117c:	2800      	cmp	r0, #0
  40117e:	d0f8      	beq.n	401172 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  401180:	4620      	mov	r0, r4
  401182:	4b09      	ldr	r3, [pc, #36]	; (4011a8 <usart_sync_read+0x5c>)
  401184:	4798      	blx	r3
  401186:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  40118a:	3601      	adds	r6, #1
  40118c:	42be      	cmp	r6, r7
  40118e:	d3f0      	bcc.n	401172 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  401190:	4630      	mov	r0, r6
  401192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  401196:	2001      	movs	r0, #1
  401198:	e7e5      	b.n	401166 <usart_sync_read+0x1a>
  40119a:	bf00      	nop
  40119c:	0040579c 	.word	0x0040579c
  4011a0:	00401221 	.word	0x00401221
  4011a4:	004020e9 	.word	0x004020e9
  4011a8:	00402075 	.word	0x00402075

004011ac <usart_sync_init>:
{
  4011ac:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4011ae:	4604      	mov	r4, r0
  4011b0:	460d      	mov	r5, r1
  4011b2:	2800      	cmp	r0, #0
  4011b4:	bf18      	it	ne
  4011b6:	2900      	cmpne	r1, #0
  4011b8:	bf14      	ite	ne
  4011ba:	2001      	movne	r0, #1
  4011bc:	2000      	moveq	r0, #0
  4011be:	2234      	movs	r2, #52	; 0x34
  4011c0:	4907      	ldr	r1, [pc, #28]	; (4011e0 <usart_sync_init+0x34>)
  4011c2:	4b08      	ldr	r3, [pc, #32]	; (4011e4 <usart_sync_init+0x38>)
  4011c4:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  4011c6:	4629      	mov	r1, r5
  4011c8:	f104 0008 	add.w	r0, r4, #8
  4011cc:	4b06      	ldr	r3, [pc, #24]	; (4011e8 <usart_sync_init+0x3c>)
  4011ce:	4798      	blx	r3
	if (init_status) {
  4011d0:	4603      	mov	r3, r0
  4011d2:	b918      	cbnz	r0, 4011dc <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  4011d4:	4a05      	ldr	r2, [pc, #20]	; (4011ec <usart_sync_init+0x40>)
  4011d6:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  4011d8:	4a05      	ldr	r2, [pc, #20]	; (4011f0 <usart_sync_init+0x44>)
  4011da:	6022      	str	r2, [r4, #0]
}
  4011dc:	4618      	mov	r0, r3
  4011de:	bd38      	pop	{r3, r4, r5, pc}
  4011e0:	0040579c 	.word	0x0040579c
  4011e4:	00401221 	.word	0x00401221
  4011e8:	00401fe5 	.word	0x00401fe5
  4011ec:	0040114d 	.word	0x0040114d
  4011f0:	004010dd 	.word	0x004010dd

004011f4 <usart_sync_enable>:
{
  4011f4:	b510      	push	{r4, lr}
	ASSERT(descr);
  4011f6:	4604      	mov	r4, r0
  4011f8:	2253      	movs	r2, #83	; 0x53
  4011fa:	4906      	ldr	r1, [pc, #24]	; (401214 <usart_sync_enable+0x20>)
  4011fc:	3000      	adds	r0, #0
  4011fe:	bf18      	it	ne
  401200:	2001      	movne	r0, #1
  401202:	4b05      	ldr	r3, [pc, #20]	; (401218 <usart_sync_enable+0x24>)
  401204:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  401206:	f104 0008 	add.w	r0, r4, #8
  40120a:	4b04      	ldr	r3, [pc, #16]	; (40121c <usart_sync_enable+0x28>)
  40120c:	4798      	blx	r3
}
  40120e:	2000      	movs	r0, #0
  401210:	bd10      	pop	{r4, pc}
  401212:	bf00      	nop
  401214:	0040579c 	.word	0x0040579c
  401218:	00401221 	.word	0x00401221
  40121c:	0040201d 	.word	0x0040201d

00401220 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401220:	b900      	cbnz	r0, 401224 <assert+0x4>
		__asm("BKPT #0");
  401222:	be00      	bkpt	0x0000
  401224:	4770      	bx	lr

00401226 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  401226:	6803      	ldr	r3, [r0, #0]
  401228:	b11b      	cbz	r3, 401232 <is_list_element+0xc>
		if (it == element) {
  40122a:	428b      	cmp	r3, r1
  40122c:	d003      	beq.n	401236 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  40122e:	681b      	ldr	r3, [r3, #0]
  401230:	e7fa      	b.n	401228 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  401232:	2000      	movs	r0, #0
  401234:	4770      	bx	lr
			return true;
  401236:	2001      	movs	r0, #1
}
  401238:	4770      	bx	lr
	...

0040123c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  40123c:	b538      	push	{r3, r4, r5, lr}
  40123e:	4604      	mov	r4, r0
  401240:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  401242:	4b06      	ldr	r3, [pc, #24]	; (40125c <list_insert_as_head+0x20>)
  401244:	4798      	blx	r3
  401246:	f080 0001 	eor.w	r0, r0, #1
  40124a:	2239      	movs	r2, #57	; 0x39
  40124c:	4904      	ldr	r1, [pc, #16]	; (401260 <list_insert_as_head+0x24>)
  40124e:	b2c0      	uxtb	r0, r0
  401250:	4b04      	ldr	r3, [pc, #16]	; (401264 <list_insert_as_head+0x28>)
  401252:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  401254:	6823      	ldr	r3, [r4, #0]
  401256:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  401258:	6025      	str	r5, [r4, #0]
  40125a:	bd38      	pop	{r3, r4, r5, pc}
  40125c:	00401227 	.word	0x00401227
  401260:	004057b8 	.word	0x004057b8
  401264:	00401221 	.word	0x00401221

00401268 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  401268:	6803      	ldr	r3, [r0, #0]
  40126a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  40126c:	6001      	str	r1, [r0, #0]
  40126e:	4770      	bx	lr

00401270 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  401270:	6803      	ldr	r3, [r0, #0]
  401272:	b11b      	cbz	r3, 40127c <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  401274:	681a      	ldr	r2, [r3, #0]
  401276:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  401278:	4618      	mov	r0, r3
  40127a:	4770      	bx	lr
	}

	return NULL;
  40127c:	2000      	movs	r0, #0
}
  40127e:	4770      	bx	lr

00401280 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  401280:	b570      	push	{r4, r5, r6, lr}
  401282:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  401284:	4604      	mov	r4, r0
  401286:	460e      	mov	r6, r1
  401288:	2800      	cmp	r0, #0
  40128a:	bf18      	it	ne
  40128c:	2900      	cmpne	r1, #0
  40128e:	d002      	beq.n	401296 <ringbuffer_init+0x16>
  401290:	b97a      	cbnz	r2, 4012b2 <ringbuffer_init+0x32>
  401292:	2000      	movs	r0, #0
  401294:	e000      	b.n	401298 <ringbuffer_init+0x18>
  401296:	2000      	movs	r0, #0
  401298:	2228      	movs	r2, #40	; 0x28
  40129a:	4908      	ldr	r1, [pc, #32]	; (4012bc <ringbuffer_init+0x3c>)
  40129c:	4b08      	ldr	r3, [pc, #32]	; (4012c0 <ringbuffer_init+0x40>)
  40129e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  4012a0:	1e6b      	subs	r3, r5, #1
  4012a2:	421d      	tst	r5, r3
  4012a4:	d107      	bne.n	4012b6 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  4012a6:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  4012a8:	2000      	movs	r0, #0
  4012aa:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  4012ac:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  4012ae:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  4012b0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  4012b2:	2001      	movs	r0, #1
  4012b4:	e7f0      	b.n	401298 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  4012b6:	f06f 000c 	mvn.w	r0, #12
}
  4012ba:	bd70      	pop	{r4, r5, r6, pc}
  4012bc:	004057d8 	.word	0x004057d8
  4012c0:	00401221 	.word	0x00401221

004012c4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  4012c4:	b538      	push	{r3, r4, r5, lr}
  4012c6:	460d      	mov	r5, r1
	ASSERT(rb);
  4012c8:	4604      	mov	r4, r0
  4012ca:	2251      	movs	r2, #81	; 0x51
  4012cc:	490b      	ldr	r1, [pc, #44]	; (4012fc <ringbuffer_put+0x38>)
  4012ce:	3000      	adds	r0, #0
  4012d0:	bf18      	it	ne
  4012d2:	2001      	movne	r0, #1
  4012d4:	4b0a      	ldr	r3, [pc, #40]	; (401300 <ringbuffer_put+0x3c>)
  4012d6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  4012d8:	6822      	ldr	r2, [r4, #0]
  4012da:	68e3      	ldr	r3, [r4, #12]
  4012dc:	6861      	ldr	r1, [r4, #4]
  4012de:	400b      	ands	r3, r1
  4012e0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  4012e2:	68e3      	ldr	r3, [r4, #12]
  4012e4:	68a2      	ldr	r2, [r4, #8]
  4012e6:	1a9a      	subs	r2, r3, r2
  4012e8:	6861      	ldr	r1, [r4, #4]
  4012ea:	428a      	cmp	r2, r1
  4012ec:	d901      	bls.n	4012f2 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  4012ee:	1a59      	subs	r1, r3, r1
  4012f0:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  4012f2:	3301      	adds	r3, #1
  4012f4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  4012f6:	2000      	movs	r0, #0
  4012f8:	bd38      	pop	{r3, r4, r5, pc}
  4012fa:	bf00      	nop
  4012fc:	004057d8 	.word	0x004057d8
  401300:	00401221 	.word	0x00401221

00401304 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  401304:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  401306:	4a06      	ldr	r2, [pc, #24]	; (401320 <_sbrk+0x1c>)
  401308:	6812      	ldr	r2, [r2, #0]
  40130a:	b122      	cbz	r2, 401316 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40130c:	4a04      	ldr	r2, [pc, #16]	; (401320 <_sbrk+0x1c>)
  40130e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  401310:	4403      	add	r3, r0
  401312:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  401314:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401316:	4903      	ldr	r1, [pc, #12]	; (401324 <_sbrk+0x20>)
  401318:	4a01      	ldr	r2, [pc, #4]	; (401320 <_sbrk+0x1c>)
  40131a:	6011      	str	r1, [r2, #0]
  40131c:	e7f6      	b.n	40130c <_sbrk+0x8>
  40131e:	bf00      	nop
  401320:	2040033c 	.word	0x2040033c
  401324:	20400cd0 	.word	0x20400cd0

00401328 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  401328:	f04f 30ff 	mov.w	r0, #4294967295
  40132c:	4770      	bx	lr

0040132e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  40132e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401332:	604b      	str	r3, [r1, #4]

	return 0;
}
  401334:	2000      	movs	r0, #0
  401336:	4770      	bx	lr

00401338 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  401338:	2001      	movs	r0, #1
  40133a:	4770      	bx	lr

0040133c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  40133c:	2000      	movs	r0, #0
  40133e:	4770      	bx	lr

00401340 <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  401340:	6943      	ldr	r3, [r0, #20]
  401342:	4a07      	ldr	r2, [pc, #28]	; (401360 <_afec_get_irq_num+0x20>)
  401344:	4293      	cmp	r3, r2
  401346:	d005      	beq.n	401354 <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  401348:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  40134c:	4293      	cmp	r3, r2
  40134e:	d103      	bne.n	401358 <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  401350:	2028      	movs	r0, #40	; 0x28
  401352:	4770      	bx	lr
		return AFEC0_IRQn;
  401354:	201d      	movs	r0, #29
  401356:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  401358:	f04f 30ff 	mov.w	r0, #4294967295
}
  40135c:	4770      	bx	lr
  40135e:	bf00      	nop
  401360:	4003c000 	.word	0x4003c000

00401364 <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  401364:	4b06      	ldr	r3, [pc, #24]	; (401380 <_afec_init_irq_param+0x1c>)
  401366:	4298      	cmp	r0, r3
  401368:	d003      	beq.n	401372 <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  40136a:	4b06      	ldr	r3, [pc, #24]	; (401384 <_afec_init_irq_param+0x20>)
  40136c:	4298      	cmp	r0, r3
  40136e:	d003      	beq.n	401378 <_afec_init_irq_param+0x14>
  401370:	4770      	bx	lr
		_afec0_dev = dev;
  401372:	4b05      	ldr	r3, [pc, #20]	; (401388 <_afec_init_irq_param+0x24>)
  401374:	6019      	str	r1, [r3, #0]
  401376:	e7f8      	b.n	40136a <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  401378:	4b03      	ldr	r3, [pc, #12]	; (401388 <_afec_init_irq_param+0x24>)
  40137a:	6059      	str	r1, [r3, #4]
	}
}
  40137c:	e7f8      	b.n	401370 <_afec_init_irq_param+0xc>
  40137e:	bf00      	nop
  401380:	4003c000 	.word	0x4003c000
  401384:	40064000 	.word	0x40064000
  401388:	20400340 	.word	0x20400340

0040138c <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  40138c:	2364      	movs	r3, #100	; 0x64
  40138e:	4a1d      	ldr	r2, [pc, #116]	; (401404 <_afec_init+0x78>)
  401390:	fb03 2301 	mla	r3, r3, r1, r2
  401394:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  401396:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  401398:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  40139a:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  40139c:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  40139e:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  4013a0:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  4013a2:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  4013a4:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  4013a6:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  4013a8:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  4013aa:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  4013ac:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  4013ae:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  4013b0:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  4013b2:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  4013b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  4013b8:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  4013bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  4013be:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  4013c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  4013c4:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  4013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  4013ca:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  4013ce:	2200      	movs	r2, #0
  4013d0:	2a0b      	cmp	r2, #11
  4013d2:	d814      	bhi.n	4013fe <_afec_init+0x72>
{
  4013d4:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  4013d6:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  4013d8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4013dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4013e0:	4413      	add	r3, r2
  4013e2:	330c      	adds	r3, #12
  4013e4:	4c07      	ldr	r4, [pc, #28]	; (401404 <_afec_init+0x78>)
  4013e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4013ea:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  4013ec:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  4013ee:	3201      	adds	r2, #1
  4013f0:	b2d2      	uxtb	r2, r2
  4013f2:	2a0b      	cmp	r2, #11
  4013f4:	d9ef      	bls.n	4013d6 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  4013f6:	2000      	movs	r0, #0
  4013f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013fc:	4770      	bx	lr
  4013fe:	2000      	movs	r0, #0
  401400:	4770      	bx	lr
  401402:	bf00      	nop
  401404:	004057fc 	.word	0x004057fc

00401408 <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  401408:	b530      	push	{r4, r5, lr}
  40140a:	b083      	sub	sp, #12
  40140c:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  40140e:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  401410:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  401412:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  401414:	400b      	ands	r3, r1
  401416:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  401418:	9b01      	ldr	r3, [sp, #4]
  40141a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  40141e:	d10e      	bne.n	40143e <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  401420:	9b01      	ldr	r3, [sp, #4]
  401422:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  401426:	d10e      	bne.n	401446 <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  401428:	9b01      	ldr	r3, [sp, #4]
  40142a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40142e:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  401430:	9c01      	ldr	r4, [sp, #4]
  401432:	fab4 f484 	clz	r4, r4
  401436:	f1c4 0420 	rsb	r4, r4, #32
  40143a:	b2e4      	uxtb	r4, r4
	while (cnt) {
  40143c:	e01f      	b.n	40147e <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  40143e:	6803      	ldr	r3, [r0, #0]
  401440:	2100      	movs	r1, #0
  401442:	4798      	blx	r3
  401444:	e7ec      	b.n	401420 <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  401446:	686b      	ldr	r3, [r5, #4]
  401448:	2100      	movs	r1, #0
  40144a:	4628      	mov	r0, r5
  40144c:	4798      	blx	r3
  40144e:	e7eb      	b.n	401428 <_afec_interrupt_handler+0x20>
		cnt--;
  401450:	3c01      	subs	r4, #1
  401452:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  401454:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  401456:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  401458:	68ab      	ldr	r3, [r5, #8]
  40145a:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  40145c:	6e92      	ldr	r2, [r2, #104]	; 0x68
  40145e:	b292      	uxth	r2, r2
  401460:	4621      	mov	r1, r4
  401462:	4628      	mov	r0, r5
  401464:	4798      	blx	r3
		status &= ~(1 << cnt);
  401466:	2301      	movs	r3, #1
  401468:	40a3      	lsls	r3, r4
  40146a:	9c01      	ldr	r4, [sp, #4]
  40146c:	ea24 0403 	bic.w	r4, r4, r3
  401470:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  401472:	9c01      	ldr	r4, [sp, #4]
  401474:	fab4 f484 	clz	r4, r4
  401478:	f1c4 0420 	rsb	r4, r4, #32
  40147c:	b2e4      	uxtb	r4, r4
	while (cnt) {
  40147e:	2c00      	cmp	r4, #0
  401480:	d1e6      	bne.n	401450 <_afec_interrupt_handler+0x48>
	}
}
  401482:	b003      	add	sp, #12
  401484:	bd30      	pop	{r4, r5, pc}
	...

00401488 <_afec_get_hardware_index>:
{
  401488:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  40148a:	4b09      	ldr	r3, [pc, #36]	; (4014b0 <_afec_get_hardware_index+0x28>)
  40148c:	4298      	cmp	r0, r3
  40148e:	d00a      	beq.n	4014a6 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  401490:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  401494:	4298      	cmp	r0, r3
  401496:	d008      	beq.n	4014aa <_afec_get_hardware_index+0x22>
	ASSERT(false);
  401498:	22a7      	movs	r2, #167	; 0xa7
  40149a:	4906      	ldr	r1, [pc, #24]	; (4014b4 <_afec_get_hardware_index+0x2c>)
  40149c:	2000      	movs	r0, #0
  40149e:	4b06      	ldr	r3, [pc, #24]	; (4014b8 <_afec_get_hardware_index+0x30>)
  4014a0:	4798      	blx	r3
	return 0;
  4014a2:	2000      	movs	r0, #0
  4014a4:	bd08      	pop	{r3, pc}
		return 0;
  4014a6:	2000      	movs	r0, #0
  4014a8:	bd08      	pop	{r3, pc}
		return 1;
  4014aa:	2001      	movs	r0, #1
}
  4014ac:	bd08      	pop	{r3, pc}
  4014ae:	bf00      	nop
  4014b0:	4003c000 	.word	0x4003c000
  4014b4:	004058c4 	.word	0x004058c4
  4014b8:	00401221 	.word	0x00401221

004014bc <_afec_get_regs>:
{
  4014bc:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  4014be:	4b09      	ldr	r3, [pc, #36]	; (4014e4 <_afec_get_regs+0x28>)
  4014c0:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  4014c2:	2300      	movs	r3, #0
  4014c4:	2b01      	cmp	r3, #1
  4014c6:	d809      	bhi.n	4014dc <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  4014c8:	2264      	movs	r2, #100	; 0x64
  4014ca:	fb02 f203 	mul.w	r2, r2, r3
  4014ce:	4906      	ldr	r1, [pc, #24]	; (4014e8 <_afec_get_regs+0x2c>)
  4014d0:	5c8a      	ldrb	r2, [r1, r2]
  4014d2:	4290      	cmp	r0, r2
  4014d4:	d003      	beq.n	4014de <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  4014d6:	3301      	adds	r3, #1
  4014d8:	b2db      	uxtb	r3, r3
  4014da:	e7f3      	b.n	4014c4 <_afec_get_regs+0x8>
	return 0;
  4014dc:	2300      	movs	r3, #0
}
  4014de:	4618      	mov	r0, r3
  4014e0:	bd08      	pop	{r3, pc}
  4014e2:	bf00      	nop
  4014e4:	00401489 	.word	0x00401489
  4014e8:	004057fc 	.word	0x004057fc

004014ec <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  4014ec:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  4014ee:	4b02      	ldr	r3, [pc, #8]	; (4014f8 <AFEC0_Handler+0xc>)
  4014f0:	6818      	ldr	r0, [r3, #0]
  4014f2:	4b02      	ldr	r3, [pc, #8]	; (4014fc <AFEC0_Handler+0x10>)
  4014f4:	4798      	blx	r3
  4014f6:	bd08      	pop	{r3, pc}
  4014f8:	20400340 	.word	0x20400340
  4014fc:	00401409 	.word	0x00401409

00401500 <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  401500:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  401502:	4b02      	ldr	r3, [pc, #8]	; (40150c <AFEC1_Handler+0xc>)
  401504:	6858      	ldr	r0, [r3, #4]
  401506:	4b02      	ldr	r3, [pc, #8]	; (401510 <AFEC1_Handler+0x10>)
  401508:	4798      	blx	r3
  40150a:	bd08      	pop	{r3, pc}
  40150c:	20400340 	.word	0x20400340
  401510:	00401409 	.word	0x00401409

00401514 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  401514:	b570      	push	{r4, r5, r6, lr}
  401516:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  401518:	4605      	mov	r5, r0
  40151a:	f44f 72a1 	mov.w	r2, #322	; 0x142
  40151e:	4923      	ldr	r1, [pc, #140]	; (4015ac <_adc_async_init+0x98>)
  401520:	3000      	adds	r0, #0
  401522:	bf18      	it	ne
  401524:	2001      	movne	r0, #1
  401526:	4b22      	ldr	r3, [pc, #136]	; (4015b0 <_adc_async_init+0x9c>)
  401528:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  40152a:	4620      	mov	r0, r4
  40152c:	4b21      	ldr	r3, [pc, #132]	; (4015b4 <_adc_async_init+0xa0>)
  40152e:	4798      	blx	r3
  401530:	4601      	mov	r1, r0
  401532:	4620      	mov	r0, r4
  401534:	4b20      	ldr	r3, [pc, #128]	; (4015b8 <_adc_async_init+0xa4>)
  401536:	4798      	blx	r3
	if (init_status) {
  401538:	4606      	mov	r6, r0
  40153a:	b108      	cbz	r0, 401540 <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  40153c:	4630      	mov	r0, r6
  40153e:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  401540:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  401542:	4629      	mov	r1, r5
  401544:	4620      	mov	r0, r4
  401546:	4b1d      	ldr	r3, [pc, #116]	; (4015bc <_adc_async_init+0xa8>)
  401548:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  40154a:	4628      	mov	r0, r5
  40154c:	4b1c      	ldr	r3, [pc, #112]	; (4015c0 <_adc_async_init+0xac>)
  40154e:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401550:	2800      	cmp	r0, #0
  401552:	db0d      	blt.n	401570 <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401554:	0943      	lsrs	r3, r0, #5
  401556:	f000 001f 	and.w	r0, r0, #31
  40155a:	2201      	movs	r2, #1
  40155c:	fa02 f000 	lsl.w	r0, r2, r0
  401560:	3320      	adds	r3, #32
  401562:	4a18      	ldr	r2, [pc, #96]	; (4015c4 <_adc_async_init+0xb0>)
  401564:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401568:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40156c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  401570:	4628      	mov	r0, r5
  401572:	4b13      	ldr	r3, [pc, #76]	; (4015c0 <_adc_async_init+0xac>)
  401574:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401576:	2800      	cmp	r0, #0
  401578:	db09      	blt.n	40158e <_adc_async_init+0x7a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40157a:	0943      	lsrs	r3, r0, #5
  40157c:	f000 001f 	and.w	r0, r0, #31
  401580:	2201      	movs	r2, #1
  401582:	fa02 f000 	lsl.w	r0, r2, r0
  401586:	3360      	adds	r3, #96	; 0x60
  401588:	4a0e      	ldr	r2, [pc, #56]	; (4015c4 <_adc_async_init+0xb0>)
  40158a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  40158e:	4628      	mov	r0, r5
  401590:	4b0b      	ldr	r3, [pc, #44]	; (4015c0 <_adc_async_init+0xac>)
  401592:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401594:	2800      	cmp	r0, #0
  401596:	dbd1      	blt.n	40153c <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401598:	0942      	lsrs	r2, r0, #5
  40159a:	f000 001f 	and.w	r0, r0, #31
  40159e:	2301      	movs	r3, #1
  4015a0:	fa03 f000 	lsl.w	r0, r3, r0
  4015a4:	4b07      	ldr	r3, [pc, #28]	; (4015c4 <_adc_async_init+0xb0>)
  4015a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  4015aa:	e7c7      	b.n	40153c <_adc_async_init+0x28>
  4015ac:	004058c4 	.word	0x004058c4
  4015b0:	00401221 	.word	0x00401221
  4015b4:	004014bd 	.word	0x004014bd
  4015b8:	0040138d 	.word	0x0040138d
  4015bc:	00401365 	.word	0x00401365
  4015c0:	00401341 	.word	0x00401341
  4015c4:	e000e100 	.word	0xe000e100

004015c8 <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  4015c8:	6942      	ldr	r2, [r0, #20]
  4015ca:	2301      	movs	r3, #1
  4015cc:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  4015d0:	6151      	str	r1, [r2, #20]
  4015d2:	4770      	bx	lr

004015d4 <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  4015d4:	2002      	movs	r0, #2
  4015d6:	4770      	bx	lr

004015d8 <_adc_async_convert>:
/**
 * \brief Make conversion
 */
void _adc_async_convert(struct _adc_async_device *const device)
{
	hri_afec_write_CR_reg(device->hw, AFEC_CR_START);
  4015d8:	6943      	ldr	r3, [r0, #20]
}

static inline void hri_afec_write_CR_reg(const void *const hw, hri_afec_cr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CR = data;
  4015da:	2202      	movs	r2, #2
  4015dc:	601a      	str	r2, [r3, #0]
  4015de:	4770      	bx	lr

004015e0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  4015e0:	f44f 7396 	mov.w	r3, #300	; 0x12c
  4015e4:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  4015e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4015ec:	fb03 f000 	mul.w	r0, r3, r0
  4015f0:	4770      	bx	lr
	...

004015f4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  4015f4:	b500      	push	{lr}
  4015f6:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  4015f8:	a801      	add	r0, sp, #4
  4015fa:	4b14      	ldr	r3, [pc, #80]	; (40164c <_init_chip+0x58>)
  4015fc:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4015fe:	4a14      	ldr	r2, [pc, #80]	; (401650 <_init_chip+0x5c>)
  401600:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  40160c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401610:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  401614:	a801      	add	r0, sp, #4
  401616:	4b0f      	ldr	r3, [pc, #60]	; (401654 <_init_chip+0x60>)
  401618:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  40161a:	4a0f      	ldr	r2, [pc, #60]	; (401658 <_init_chip+0x64>)
  40161c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  40161e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  401622:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  401626:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401628:	4b0c      	ldr	r3, [pc, #48]	; (40165c <_init_chip+0x68>)
  40162a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40162e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401632:	d104      	bne.n	40163e <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401634:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401638:	4b08      	ldr	r3, [pc, #32]	; (40165c <_init_chip+0x68>)
  40163a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  40163e:	4b08      	ldr	r3, [pc, #32]	; (401660 <_init_chip+0x6c>)
  401640:	4798      	blx	r3

#endif
	_pmc_init();
  401642:	4b08      	ldr	r3, [pc, #32]	; (401664 <_init_chip+0x70>)
  401644:	4798      	blx	r3
}
  401646:	b003      	add	sp, #12
  401648:	f85d fb04 	ldr.w	pc, [sp], #4
  40164c:	00400d79 	.word	0x00400d79
  401650:	e000ed00 	.word	0xe000ed00
  401654:	00400d87 	.word	0x00400d87
  401658:	400e0c00 	.word	0x400e0c00
  40165c:	400e0600 	.word	0x400e0600
  401660:	00402115 	.word	0x00402115
  401664:	004019e9 	.word	0x004019e9

00401668 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  401668:	b538      	push	{r3, r4, r5, lr}
  40166a:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  40166c:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  40166e:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  401670:	f014 0f01 	tst.w	r4, #1
  401674:	d11a      	bne.n	4016ac <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  401676:	f414 7f00 	tst.w	r4, #512	; 0x200
  40167a:	d11a      	bne.n	4016b2 <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  40167c:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  401680:	d11b      	bne.n	4016ba <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  401682:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  401686:	d11d      	bne.n	4016c4 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  401688:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  40168c:	d008      	beq.n	4016a0 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  40168e:	68eb      	ldr	r3, [r5, #12]
  401690:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  401692:	6c52      	ldr	r2, [r2, #68]	; 0x44
  401694:	f012 0f20 	tst.w	r2, #32
  401698:	d019      	beq.n	4016ce <_can_irq_handler+0x66>
  40169a:	2102      	movs	r1, #2
  40169c:	4628      	mov	r0, r5
  40169e:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  4016a0:	f014 0f08 	tst.w	r4, #8
  4016a4:	d115      	bne.n	4016d2 <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  4016a6:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  4016a8:	651c      	str	r4, [r3, #80]	; 0x50
  4016aa:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  4016ac:	6883      	ldr	r3, [r0, #8]
  4016ae:	4798      	blx	r3
  4016b0:	e7e1      	b.n	401676 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  4016b2:	686b      	ldr	r3, [r5, #4]
  4016b4:	4628      	mov	r0, r5
  4016b6:	4798      	blx	r3
  4016b8:	e7e0      	b.n	40167c <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  4016ba:	68eb      	ldr	r3, [r5, #12]
  4016bc:	2103      	movs	r1, #3
  4016be:	4628      	mov	r0, r5
  4016c0:	4798      	blx	r3
  4016c2:	e7de      	b.n	401682 <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  4016c4:	68eb      	ldr	r3, [r5, #12]
  4016c6:	2100      	movs	r1, #0
  4016c8:	4628      	mov	r0, r5
  4016ca:	4798      	blx	r3
  4016cc:	e7dc      	b.n	401688 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  4016ce:	2101      	movs	r1, #1
  4016d0:	e7e4      	b.n	40169c <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  4016d2:	68eb      	ldr	r3, [r5, #12]
  4016d4:	2104      	movs	r1, #4
  4016d6:	4628      	mov	r0, r5
  4016d8:	4798      	blx	r3
  4016da:	e7e4      	b.n	4016a6 <_can_irq_handler+0x3e>

004016dc <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  4016dc:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  4016de:	4b02      	ldr	r3, [pc, #8]	; (4016e8 <MCAN1_INT0_Handler+0xc>)
  4016e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
  4016e2:	4b02      	ldr	r3, [pc, #8]	; (4016ec <MCAN1_INT0_Handler+0x10>)
  4016e4:	4798      	blx	r3
  4016e6:	bd08      	pop	{r3, pc}
  4016e8:	20400348 	.word	0x20400348
  4016ec:	00401669 	.word	0x00401669

004016f0 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  4016f0:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  4016f2:	2500      	movs	r5, #0
  4016f4:	428d      	cmp	r5, r1
  4016f6:	d210      	bcs.n	40171a <_ffs+0x2a>
  4016f8:	2201      	movs	r2, #1
  4016fa:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  4016fc:	2b1f      	cmp	r3, #31
  4016fe:	d80a      	bhi.n	401716 <_ffs+0x26>
			if (v[i] & bit) {
  401700:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401704:	4222      	tst	r2, r4
  401706:	d102      	bne.n	40170e <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401708:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40170a:	3301      	adds	r3, #1
  40170c:	e7f6      	b.n	4016fc <_ffs+0xc>
				return i * 32 + j;
  40170e:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401712:	bc30      	pop	{r4, r5}
  401714:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  401716:	3501      	adds	r5, #1
  401718:	e7ec      	b.n	4016f4 <_ffs+0x4>
	return -1;
  40171a:	f04f 30ff 	mov.w	r0, #4294967295
  40171e:	e7f8      	b.n	401712 <_ffs+0x22>

00401720 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401720:	b510      	push	{r4, lr}
  401722:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401724:	2300      	movs	r3, #0
  401726:	9301      	str	r3, [sp, #4]
  401728:	9302      	str	r3, [sp, #8]
  40172a:	9303      	str	r3, [sp, #12]
  40172c:	9304      	str	r3, [sp, #16]
  40172e:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401730:	4b21      	ldr	r3, [pc, #132]	; (4017b8 <_ext_irq_handler+0x98>)
  401732:	6818      	ldr	r0, [r3, #0]
  401734:	22f8      	movs	r2, #248	; 0xf8
  401736:	4921      	ldr	r1, [pc, #132]	; (4017bc <_ext_irq_handler+0x9c>)
  401738:	3000      	adds	r0, #0
  40173a:	bf18      	it	ne
  40173c:	2001      	movne	r0, #1
  40173e:	4b20      	ldr	r3, [pc, #128]	; (4017c0 <_ext_irq_handler+0xa0>)
  401740:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401742:	4b20      	ldr	r3, [pc, #128]	; (4017c4 <_ext_irq_handler+0xa4>)
  401744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401746:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401748:	4013      	ands	r3, r2
  40174a:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  40174c:	491e      	ldr	r1, [pc, #120]	; (4017c8 <_ext_irq_handler+0xa8>)
  40174e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401750:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401752:	400a      	ands	r2, r1
  401754:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  401756:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  401758:	e025      	b.n	4017a6 <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  40175a:	4b17      	ldr	r3, [pc, #92]	; (4017b8 <_ext_irq_handler+0x98>)
  40175c:	681b      	ldr	r3, [r3, #0]
  40175e:	4620      	mov	r0, r4
  401760:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  401762:	1163      	asrs	r3, r4, #5
  401764:	f004 041f 	and.w	r4, r4, #31
  401768:	2201      	movs	r2, #1
  40176a:	fa02 f404 	lsl.w	r4, r2, r4
  40176e:	aa06      	add	r2, sp, #24
  401770:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401774:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401778:	ea22 0204 	bic.w	r2, r2, r4
  40177c:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  401780:	2105      	movs	r1, #5
  401782:	a801      	add	r0, sp, #4
  401784:	4b11      	ldr	r3, [pc, #68]	; (4017cc <_ext_irq_handler+0xac>)
  401786:	4798      	blx	r3
  401788:	4604      	mov	r4, r0
		while (-1 != pos) {
  40178a:	f1b4 3fff 	cmp.w	r4, #4294967295
  40178e:	d1e4      	bne.n	40175a <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  401790:	4a0c      	ldr	r2, [pc, #48]	; (4017c4 <_ext_irq_handler+0xa4>)
  401792:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401794:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401796:	400b      	ands	r3, r1
  401798:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  40179a:	490b      	ldr	r1, [pc, #44]	; (4017c8 <_ext_irq_handler+0xa8>)
  40179c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40179e:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4017a0:	4002      	ands	r2, r0
  4017a2:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  4017a4:	4313      	orrs	r3, r2
	while (flag_total) {
  4017a6:	b12b      	cbz	r3, 4017b4 <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  4017a8:	2105      	movs	r1, #5
  4017aa:	a801      	add	r0, sp, #4
  4017ac:	4b07      	ldr	r3, [pc, #28]	; (4017cc <_ext_irq_handler+0xac>)
  4017ae:	4798      	blx	r3
  4017b0:	4604      	mov	r4, r0
		while (-1 != pos) {
  4017b2:	e7ea      	b.n	40178a <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  4017b4:	b006      	add	sp, #24
  4017b6:	bd10      	pop	{r4, pc}
  4017b8:	20400374 	.word	0x20400374
  4017bc:	0040591c 	.word	0x0040591c
  4017c0:	00401221 	.word	0x00401221
  4017c4:	400e0e00 	.word	0x400e0e00
  4017c8:	400e1400 	.word	0x400e1400
  4017cc:	004016f1 	.word	0x004016f1

004017d0 <_pio_get_hardware_index>:
{
  4017d0:	b510      	push	{r4, lr}
	ASSERT(hw);
  4017d2:	4604      	mov	r4, r0
  4017d4:	22d2      	movs	r2, #210	; 0xd2
  4017d6:	4905      	ldr	r1, [pc, #20]	; (4017ec <_pio_get_hardware_index+0x1c>)
  4017d8:	3000      	adds	r0, #0
  4017da:	bf18      	it	ne
  4017dc:	2001      	movne	r0, #1
  4017de:	4b04      	ldr	r3, [pc, #16]	; (4017f0 <_pio_get_hardware_index+0x20>)
  4017e0:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  4017e2:	4804      	ldr	r0, [pc, #16]	; (4017f4 <_pio_get_hardware_index+0x24>)
  4017e4:	4420      	add	r0, r4
}
  4017e6:	f3c0 2047 	ubfx	r0, r0, #9, #8
  4017ea:	bd10      	pop	{r4, pc}
  4017ec:	0040591c 	.word	0x0040591c
  4017f0:	00401221 	.word	0x00401221
  4017f4:	bff1f200 	.word	0xbff1f200

004017f8 <_pio_get_index>:
{
  4017f8:	b510      	push	{r4, lr}
	ASSERT(hw);
  4017fa:	4604      	mov	r4, r0
  4017fc:	22e0      	movs	r2, #224	; 0xe0
  4017fe:	490d      	ldr	r1, [pc, #52]	; (401834 <_pio_get_index+0x3c>)
  401800:	3000      	adds	r0, #0
  401802:	bf18      	it	ne
  401804:	2001      	movne	r0, #1
  401806:	4b0c      	ldr	r3, [pc, #48]	; (401838 <_pio_get_index+0x40>)
  401808:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  40180a:	4620      	mov	r0, r4
  40180c:	4b0b      	ldr	r3, [pc, #44]	; (40183c <_pio_get_index+0x44>)
  40180e:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401810:	2300      	movs	r3, #0
  401812:	2b01      	cmp	r3, #1
  401814:	d80b      	bhi.n	40182e <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  401816:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  40181a:	008a      	lsls	r2, r1, #2
  40181c:	4908      	ldr	r1, [pc, #32]	; (401840 <_pio_get_index+0x48>)
  40181e:	5c8a      	ldrb	r2, [r1, r2]
  401820:	4290      	cmp	r0, r2
  401822:	d002      	beq.n	40182a <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401824:	3301      	adds	r3, #1
  401826:	b2db      	uxtb	r3, r3
  401828:	e7f3      	b.n	401812 <_pio_get_index+0x1a>
			return i;
  40182a:	b258      	sxtb	r0, r3
  40182c:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  40182e:	f04f 30ff 	mov.w	r0, #4294967295
}
  401832:	bd10      	pop	{r4, pc}
  401834:	0040591c 	.word	0x0040591c
  401838:	00401221 	.word	0x00401221
  40183c:	004017d1 	.word	0x004017d1
  401840:	004058dc 	.word	0x004058dc

00401844 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401844:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  401846:	4604      	mov	r4, r0
  401848:	f240 1259 	movw	r2, #345	; 0x159
  40184c:	4929      	ldr	r1, [pc, #164]	; (4018f4 <_pio_init+0xb0>)
  40184e:	3000      	adds	r0, #0
  401850:	bf18      	it	ne
  401852:	2001      	movne	r0, #1
  401854:	4b28      	ldr	r3, [pc, #160]	; (4018f8 <_pio_init+0xb4>)
  401856:	4798      	blx	r3

	i = _pio_get_index(hw);
  401858:	4620      	mov	r0, r4
  40185a:	4b28      	ldr	r3, [pc, #160]	; (4018fc <_pio_init+0xb8>)
  40185c:	4798      	blx	r3
	if (i < 0) {
  40185e:	2800      	cmp	r0, #0
  401860:	db43      	blt.n	4018ea <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  401862:	4d27      	ldr	r5, [pc, #156]	; (401900 <_pio_init+0xbc>)
  401864:	00c2      	lsls	r2, r0, #3
  401866:	1a11      	subs	r1, r2, r0
  401868:	008b      	lsls	r3, r1, #2
  40186a:	442b      	add	r3, r5
  40186c:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  40186e:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  401872:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  401874:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  401878:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  40187a:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  40187e:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  401880:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  401884:	1a10      	subs	r0, r2, r0
  401886:	0083      	lsls	r3, r0, #2
  401888:	442b      	add	r3, r5
  40188a:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  40188c:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401890:	4620      	mov	r0, r4
  401892:	4b1c      	ldr	r3, [pc, #112]	; (401904 <_pio_init+0xc0>)
  401894:	4798      	blx	r3
  401896:	4428      	add	r0, r5
  401898:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  if ((int32_t)(IRQn) >= 0)
  40189c:	2b00      	cmp	r3, #0
  40189e:	db0c      	blt.n	4018ba <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4018a0:	095a      	lsrs	r2, r3, #5
  4018a2:	f003 001f 	and.w	r0, r3, #31
  4018a6:	2101      	movs	r1, #1
  4018a8:	4081      	lsls	r1, r0
  4018aa:	3220      	adds	r2, #32
  4018ac:	4816      	ldr	r0, [pc, #88]	; (401908 <_pio_init+0xc4>)
  4018ae:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4018b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4018b6:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  4018ba:	2b00      	cmp	r3, #0
  4018bc:	db08      	blt.n	4018d0 <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4018be:	095a      	lsrs	r2, r3, #5
  4018c0:	f003 001f 	and.w	r0, r3, #31
  4018c4:	2101      	movs	r1, #1
  4018c6:	4081      	lsls	r1, r0
  4018c8:	3260      	adds	r2, #96	; 0x60
  4018ca:	480f      	ldr	r0, [pc, #60]	; (401908 <_pio_init+0xc4>)
  4018cc:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  4018d0:	2b00      	cmp	r3, #0
  4018d2:	db0d      	blt.n	4018f0 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4018d4:	0959      	lsrs	r1, r3, #5
  4018d6:	f003 031f 	and.w	r3, r3, #31
  4018da:	2201      	movs	r2, #1
  4018dc:	fa02 f303 	lsl.w	r3, r2, r3
  4018e0:	4a09      	ldr	r2, [pc, #36]	; (401908 <_pio_init+0xc4>)
  4018e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  4018e6:	2000      	movs	r0, #0
  4018e8:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  4018ea:	f06f 0010 	mvn.w	r0, #16
  4018ee:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  4018f0:	2000      	movs	r0, #0
}
  4018f2:	bd38      	pop	{r3, r4, r5, pc}
  4018f4:	0040591c 	.word	0x0040591c
  4018f8:	00401221 	.word	0x00401221
  4018fc:	004017f9 	.word	0x004017f9
  401900:	004058dc 	.word	0x004058dc
  401904:	004017d1 	.word	0x004017d1
  401908:	e000e100 	.word	0xe000e100

0040190c <PIOD_Handler>:
{
  40190c:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40190e:	4b01      	ldr	r3, [pc, #4]	; (401914 <PIOD_Handler+0x8>)
  401910:	4798      	blx	r3
  401912:	bd08      	pop	{r3, pc}
  401914:	00401721 	.word	0x00401721

00401918 <PIOA_Handler>:
{
  401918:	b508      	push	{r3, lr}
	_ext_irq_handler();
  40191a:	4b01      	ldr	r3, [pc, #4]	; (401920 <PIOA_Handler+0x8>)
  40191c:	4798      	blx	r3
  40191e:	bd08      	pop	{r3, pc}
  401920:	00401721 	.word	0x00401721

00401924 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401924:	b538      	push	{r3, r4, r5, lr}
  401926:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401928:	4804      	ldr	r0, [pc, #16]	; (40193c <_ext_irq_init+0x18>)
  40192a:	4c05      	ldr	r4, [pc, #20]	; (401940 <_ext_irq_init+0x1c>)
  40192c:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  40192e:	4805      	ldr	r0, [pc, #20]	; (401944 <_ext_irq_init+0x20>)
  401930:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401932:	4b05      	ldr	r3, [pc, #20]	; (401948 <_ext_irq_init+0x24>)
  401934:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401936:	2000      	movs	r0, #0
  401938:	bd38      	pop	{r3, r4, r5, pc}
  40193a:	bf00      	nop
  40193c:	400e0e00 	.word	0x400e0e00
  401940:	00401845 	.word	0x00401845
  401944:	400e1400 	.word	0x400e1400
  401948:	20400374 	.word	0x20400374

0040194c <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  40194c:	490e      	ldr	r1, [pc, #56]	; (401988 <_pmc_init_sources+0x3c>)
  40194e:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401950:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  401954:	4b0d      	ldr	r3, [pc, #52]	; (40198c <_pmc_init_sources+0x40>)
  401956:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401958:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40195a:	4b0b      	ldr	r3, [pc, #44]	; (401988 <_pmc_init_sources+0x3c>)
  40195c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  40195e:	f013 0f01 	tst.w	r3, #1
  401962:	d0fa      	beq.n	40195a <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  401964:	4b08      	ldr	r3, [pc, #32]	; (401988 <_pmc_init_sources+0x3c>)
  401966:	6a19      	ldr	r1, [r3, #32]
  401968:	4a09      	ldr	r2, [pc, #36]	; (401990 <_pmc_init_sources+0x44>)
  40196a:	430a      	orrs	r2, r1
  40196c:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  40196e:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  401970:	4a08      	ldr	r2, [pc, #32]	; (401994 <_pmc_init_sources+0x48>)
  401972:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  401974:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  401976:	4a08      	ldr	r2, [pc, #32]	; (401998 <_pmc_init_sources+0x4c>)
  401978:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  40197a:	4b03      	ldr	r3, [pc, #12]	; (401988 <_pmc_init_sources+0x3c>)
  40197c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40197e:	f013 0f02 	tst.w	r3, #2
  401982:	d0fa      	beq.n	40197a <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  401984:	4770      	bx	lr
  401986:	bf00      	nop
  401988:	400e0600 	.word	0x400e0600
  40198c:	00373e01 	.word	0x00373e01
  401990:	01370000 	.word	0x01370000
  401994:	f800ffff 	.word	0xf800ffff
  401998:	20183f01 	.word	0x20183f01

0040199c <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40199c:	4a11      	ldr	r2, [pc, #68]	; (4019e4 <_pmc_init_master_clock+0x48>)
  40199e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  4019a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4019a4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4019a6:	4b0f      	ldr	r3, [pc, #60]	; (4019e4 <_pmc_init_master_clock+0x48>)
  4019a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4019aa:	f013 0f08 	tst.w	r3, #8
  4019ae:	d0fa      	beq.n	4019a6 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4019b0:	4a0c      	ldr	r2, [pc, #48]	; (4019e4 <_pmc_init_master_clock+0x48>)
  4019b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  4019b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  4019b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  4019bc:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4019be:	4b09      	ldr	r3, [pc, #36]	; (4019e4 <_pmc_init_master_clock+0x48>)
  4019c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4019c2:	f013 0f08 	tst.w	r3, #8
  4019c6:	d0fa      	beq.n	4019be <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4019c8:	4a06      	ldr	r2, [pc, #24]	; (4019e4 <_pmc_init_master_clock+0x48>)
  4019ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  4019cc:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  4019d0:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  4019d4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4019d6:	4b03      	ldr	r3, [pc, #12]	; (4019e4 <_pmc_init_master_clock+0x48>)
  4019d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4019da:	f013 0f08 	tst.w	r3, #8
  4019de:	d0fa      	beq.n	4019d6 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  4019e0:	4770      	bx	lr
  4019e2:	bf00      	nop
  4019e4:	400e0600 	.word	0x400e0600

004019e8 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  4019e8:	b508      	push	{r3, lr}
	_pmc_init_sources();
  4019ea:	4b02      	ldr	r3, [pc, #8]	; (4019f4 <_pmc_init+0xc>)
  4019ec:	4798      	blx	r3
	_pmc_init_master_clock();
  4019ee:	4b02      	ldr	r3, [pc, #8]	; (4019f8 <_pmc_init+0x10>)
  4019f0:	4798      	blx	r3
  4019f2:	bd08      	pop	{r3, pc}
  4019f4:	0040194d 	.word	0x0040194d
  4019f8:	0040199d 	.word	0x0040199d

004019fc <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4019fc:	2300      	movs	r3, #0
  4019fe:	2b01      	cmp	r3, #1
  401a00:	d80f      	bhi.n	401a22 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  401a02:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  401a06:	008a      	lsls	r2, r1, #2
  401a08:	4907      	ldr	r1, [pc, #28]	; (401a28 <_pwm_get_cfg+0x2c>)
  401a0a:	588a      	ldr	r2, [r1, r2]
  401a0c:	4282      	cmp	r2, r0
  401a0e:	d002      	beq.n	401a16 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401a10:	3301      	adds	r3, #1
  401a12:	b2db      	uxtb	r3, r3
  401a14:	e7f3      	b.n	4019fe <_pwm_get_cfg+0x2>
			return (_pwms + i);
  401a16:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  401a1a:	009a      	lsls	r2, r3, #2
  401a1c:	4608      	mov	r0, r1
  401a1e:	4410      	add	r0, r2
  401a20:	4770      	bx	lr
		}
	}

	return NULL;
  401a22:	2000      	movs	r0, #0
}
  401a24:	4770      	bx	lr
  401a26:	bf00      	nop
  401a28:	00405938 	.word	0x00405938

00401a2c <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  401a2c:	4b06      	ldr	r3, [pc, #24]	; (401a48 <_pwm_init_irq_param+0x1c>)
  401a2e:	4298      	cmp	r0, r3
  401a30:	d003      	beq.n	401a3a <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  401a32:	4b06      	ldr	r3, [pc, #24]	; (401a4c <_pwm_init_irq_param+0x20>)
  401a34:	4298      	cmp	r0, r3
  401a36:	d003      	beq.n	401a40 <_pwm_init_irq_param+0x14>
  401a38:	4770      	bx	lr
		_pwm0_dev = dev;
  401a3a:	4b05      	ldr	r3, [pc, #20]	; (401a50 <_pwm_init_irq_param+0x24>)
  401a3c:	6019      	str	r1, [r3, #0]
  401a3e:	e7f8      	b.n	401a32 <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  401a40:	4b03      	ldr	r3, [pc, #12]	; (401a50 <_pwm_init_irq_param+0x24>)
  401a42:	6059      	str	r1, [r3, #4]
	}
}
  401a44:	e7f8      	b.n	401a38 <_pwm_init_irq_param+0xc>
  401a46:	bf00      	nop
  401a48:	40020000 	.word	0x40020000
  401a4c:	4005c000 	.word	0x4005c000
  401a50:	20400378 	.word	0x20400378

00401a54 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  401a54:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  401a56:	6903      	ldr	r3, [r0, #16]
	return ((Pwm *)hw)->PWM_ISR1;
  401a58:	69db      	ldr	r3, [r3, #28]
  401a5a:	b113      	cbz	r3, 401a62 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  401a5c:	6803      	ldr	r3, [r0, #0]
  401a5e:	b103      	cbz	r3, 401a62 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  401a60:	4798      	blx	r3
  401a62:	bd08      	pop	{r3, pc}

00401a64 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  401a64:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  401a66:	4b02      	ldr	r3, [pc, #8]	; (401a70 <PWM0_Handler+0xc>)
  401a68:	6818      	ldr	r0, [r3, #0]
  401a6a:	4b02      	ldr	r3, [pc, #8]	; (401a74 <PWM0_Handler+0x10>)
  401a6c:	4798      	blx	r3
  401a6e:	bd08      	pop	{r3, pc}
  401a70:	20400378 	.word	0x20400378
  401a74:	00401a55 	.word	0x00401a55

00401a78 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  401a78:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  401a7a:	4b02      	ldr	r3, [pc, #8]	; (401a84 <PWM1_Handler+0xc>)
  401a7c:	6858      	ldr	r0, [r3, #4]
  401a7e:	4b02      	ldr	r3, [pc, #8]	; (401a88 <PWM1_Handler+0x10>)
  401a80:	4798      	blx	r3
  401a82:	bd08      	pop	{r3, pc}
  401a84:	20400378 	.word	0x20400378
  401a88:	00401a55 	.word	0x00401a55

00401a8c <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  401a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401a8e:	4606      	mov	r6, r0
	ASSERT(hw);
  401a90:	460c      	mov	r4, r1
  401a92:	1c08      	adds	r0, r1, #0
  401a94:	bf18      	it	ne
  401a96:	2001      	movne	r0, #1
  401a98:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  401a9c:	4944      	ldr	r1, [pc, #272]	; (401bb0 <_pwm_init+0x124>)
  401a9e:	4b45      	ldr	r3, [pc, #276]	; (401bb4 <_pwm_init+0x128>)
  401aa0:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  401aa2:	4620      	mov	r0, r4
  401aa4:	4b44      	ldr	r3, [pc, #272]	; (401bb8 <_pwm_init+0x12c>)
  401aa6:	4798      	blx	r3
  401aa8:	4605      	mov	r5, r0

	device->hw = hw;
  401aaa:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  401aac:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  401aae:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  401ab0:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  401ab2:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  401ab4:	6903      	ldr	r3, [r0, #16]
  401ab6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  401aba:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  401abc:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  401abe:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  401ac0:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  401ac2:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  401ac4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  401ac8:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  401aca:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  401acc:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  401ace:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  401ad2:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  401ad4:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  401ad8:	2300      	movs	r3, #0
  401ada:	e019      	b.n	401b10 <_pwm_init+0x84>
		ch = cfg->ch + i;
  401adc:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  401ade:	0118      	lsls	r0, r3, #4
  401ae0:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  401ae4:	5c3a      	ldrb	r2, [r7, r0]
  401ae6:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  401aea:	3210      	adds	r2, #16
  401aec:	0152      	lsls	r2, r2, #5
  401aee:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  401af0:	5c3a      	ldrb	r2, [r7, r0]
  401af2:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  401af6:	3210      	adds	r2, #16
  401af8:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401afc:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  401afe:	5c3a      	ldrb	r2, [r7, r0]
  401b00:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  401b04:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  401b08:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  401b0c:	3301      	adds	r3, #1
  401b0e:	b25b      	sxtb	r3, r3
  401b10:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401b12:	4293      	cmp	r3, r2
  401b14:	d3e2      	bcc.n	401adc <_pwm_init+0x50>
  401b16:	2300      	movs	r3, #0
  401b18:	e014      	b.n	401b44 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  401b1a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  401b1c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  401b20:	0082      	lsls	r2, r0, #2
  401b22:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  401b26:	5c88      	ldrb	r0, [r1, r2]
  401b28:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  401b2c:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  401b30:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  401b34:	5c8a      	ldrb	r2, [r1, r2]
  401b36:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  401b3a:	3213      	adds	r2, #19
  401b3c:	0112      	lsls	r2, r2, #4
  401b3e:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  401b40:	3301      	adds	r3, #1
  401b42:	b25b      	sxtb	r3, r3
  401b44:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  401b46:	4293      	cmp	r3, r2
  401b48:	d3e7      	bcc.n	401b1a <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  401b4a:	4631      	mov	r1, r6
  401b4c:	4620      	mov	r0, r4
  401b4e:	4b1b      	ldr	r3, [pc, #108]	; (401bbc <_pwm_init+0x130>)
  401b50:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  401b52:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401b56:	2b00      	cmp	r3, #0
  401b58:	db0d      	blt.n	401b76 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b5a:	095a      	lsrs	r2, r3, #5
  401b5c:	f003 031f 	and.w	r3, r3, #31
  401b60:	2101      	movs	r1, #1
  401b62:	fa01 f303 	lsl.w	r3, r1, r3
  401b66:	3220      	adds	r2, #32
  401b68:	4915      	ldr	r1, [pc, #84]	; (401bc0 <_pwm_init+0x134>)
  401b6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401b6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401b72:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  401b76:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401b7a:	2b00      	cmp	r3, #0
  401b7c:	db09      	blt.n	401b92 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b7e:	095a      	lsrs	r2, r3, #5
  401b80:	f003 031f 	and.w	r3, r3, #31
  401b84:	2101      	movs	r1, #1
  401b86:	fa01 f303 	lsl.w	r3, r1, r3
  401b8a:	3260      	adds	r2, #96	; 0x60
  401b8c:	490c      	ldr	r1, [pc, #48]	; (401bc0 <_pwm_init+0x134>)
  401b8e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  401b92:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401b96:	2b00      	cmp	r3, #0
  401b98:	db08      	blt.n	401bac <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401b9a:	0959      	lsrs	r1, r3, #5
  401b9c:	f003 031f 	and.w	r3, r3, #31
  401ba0:	2201      	movs	r2, #1
  401ba2:	fa02 f303 	lsl.w	r3, r2, r3
  401ba6:	4a06      	ldr	r2, [pc, #24]	; (401bc0 <_pwm_init+0x134>)
  401ba8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  401bac:	2000      	movs	r0, #0
  401bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401bb0:	004059e0 	.word	0x004059e0
  401bb4:	00401221 	.word	0x00401221
  401bb8:	004019fd 	.word	0x004019fd
  401bbc:	00401a2d 	.word	0x00401a2d
  401bc0:	e000e100 	.word	0xe000e100

00401bc4 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  401bc4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  401bc6:	4604      	mov	r4, r0
  401bc8:	f240 12b5 	movw	r2, #437	; 0x1b5
  401bcc:	490b      	ldr	r1, [pc, #44]	; (401bfc <_pwm_enable+0x38>)
  401bce:	3000      	adds	r0, #0
  401bd0:	bf18      	it	ne
  401bd2:	2001      	movne	r0, #1
  401bd4:	4b0a      	ldr	r3, [pc, #40]	; (401c00 <_pwm_enable+0x3c>)
  401bd6:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  401bd8:	6920      	ldr	r0, [r4, #16]
  401bda:	4b0a      	ldr	r3, [pc, #40]	; (401c04 <_pwm_enable+0x40>)
  401bdc:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401bde:	2300      	movs	r3, #0
  401be0:	e008      	b.n	401bf4 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  401be2:	6921      	ldr	r1, [r4, #16]
  401be4:	6b05      	ldr	r5, [r0, #48]	; 0x30
  401be6:	011a      	lsls	r2, r3, #4
  401be8:	5cad      	ldrb	r5, [r5, r2]
  401bea:	2201      	movs	r2, #1
  401bec:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  401bee:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  401bf0:	3301      	adds	r3, #1
  401bf2:	b25b      	sxtb	r3, r3
  401bf4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401bf6:	4293      	cmp	r3, r2
  401bf8:	d3f3      	bcc.n	401be2 <_pwm_enable+0x1e>
	}
}
  401bfa:	bd38      	pop	{r3, r4, r5, pc}
  401bfc:	004059e0 	.word	0x004059e0
  401c00:	00401221 	.word	0x00401221
  401c04:	004019fd 	.word	0x004019fd

00401c08 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  401c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401c0a:	460d      	mov	r5, r1
  401c0c:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  401c0e:	4604      	mov	r4, r0
  401c10:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  401c14:	4911      	ldr	r1, [pc, #68]	; (401c5c <_pwm_set_param+0x54>)
  401c16:	2800      	cmp	r0, #0
  401c18:	bf18      	it	ne
  401c1a:	42ae      	cmpne	r6, r5
  401c1c:	bf34      	ite	cc
  401c1e:	2001      	movcc	r0, #1
  401c20:	2000      	movcs	r0, #0
  401c22:	4b0f      	ldr	r3, [pc, #60]	; (401c60 <_pwm_set_param+0x58>)
  401c24:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  401c26:	6920      	ldr	r0, [r4, #16]
  401c28:	4b0e      	ldr	r3, [pc, #56]	; (401c64 <_pwm_set_param+0x5c>)
  401c2a:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401c2c:	2300      	movs	r3, #0
  401c2e:	e010      	b.n	401c52 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  401c30:	6922      	ldr	r2, [r4, #16]
  401c32:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401c34:	0119      	lsls	r1, r3, #4
  401c36:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  401c38:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  401c3c:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  401c40:	6922      	ldr	r2, [r4, #16]
  401c42:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401c44:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  401c46:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  401c4a:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  401c4e:	3301      	adds	r3, #1
  401c50:	b2db      	uxtb	r3, r3
  401c52:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401c54:	4293      	cmp	r3, r2
  401c56:	d3eb      	bcc.n	401c30 <_pwm_set_param+0x28>
	}
}
  401c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c5a:	bf00      	nop
  401c5c:	004059e0 	.word	0x004059e0
  401c60:	00401221 	.word	0x00401221
  401c64:	004019fd 	.word	0x004019fd

00401c68 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  401c68:	b510      	push	{r4, lr}
	ASSERT(device);
  401c6a:	4604      	mov	r4, r0
  401c6c:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401c70:	4907      	ldr	r1, [pc, #28]	; (401c90 <_pwm_is_enabled+0x28>)
  401c72:	3000      	adds	r0, #0
  401c74:	bf18      	it	ne
  401c76:	2001      	movne	r0, #1
  401c78:	4b06      	ldr	r3, [pc, #24]	; (401c94 <_pwm_is_enabled+0x2c>)
  401c7a:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  401c7c:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  401c7e:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  401c80:	f013 0f0f 	tst.w	r3, #15
  401c84:	d001      	beq.n	401c8a <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  401c86:	2001      	movs	r0, #1
	}
}
  401c88:	bd10      	pop	{r4, pc}
		return false;
  401c8a:	2000      	movs	r0, #0
  401c8c:	bd10      	pop	{r4, pc}
  401c8e:	bf00      	nop
  401c90:	004059e0 	.word	0x004059e0
  401c94:	00401221 	.word	0x00401221

00401c98 <_pwm_set_irq_state>:

	return hri_pwm_read_CDTY_reg(device->hw, cfg->ch[0].index);
}

void _pwm_set_irq_state(struct _pwm_device *const device, const enum _pwm_callback_type type, const bool disable)
{
  401c98:	b538      	push	{r3, r4, r5, lr}
  401c9a:	460d      	mov	r5, r1
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device);
  401c9c:	4604      	mov	r4, r0
  401c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
  401ca2:	4912      	ldr	r1, [pc, #72]	; (401cec <_pwm_set_irq_state+0x54>)
  401ca4:	3000      	adds	r0, #0
  401ca6:	bf18      	it	ne
  401ca8:	2001      	movne	r0, #1
  401caa:	4b11      	ldr	r3, [pc, #68]	; (401cf0 <_pwm_set_irq_state+0x58>)
  401cac:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  401cae:	6920      	ldr	r0, [r4, #16]
  401cb0:	4b10      	ldr	r3, [pc, #64]	; (401cf4 <_pwm_set_irq_state+0x5c>)
  401cb2:	4798      	blx	r3

	if (PWM_DEVICE_PERIOD_CB == type) {
  401cb4:	b18d      	cbz	r5, 401cda <_pwm_set_irq_state+0x42>
		for (i = 0; i < cfg->ch_num; i++) {
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
		}
	} else if (PWM_DEVICE_ERROR_CB == type) {
  401cb6:	2d01      	cmp	r5, #1
  401cb8:	d011      	beq.n	401cde <_pwm_set_irq_state+0x46>
  401cba:	bd38      	pop	{r3, r4, r5, pc}
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
  401cbc:	6921      	ldr	r1, [r4, #16]
  401cbe:	6b05      	ldr	r5, [r0, #48]	; 0x30
  401cc0:	0113      	lsls	r3, r2, #4
  401cc2:	5ced      	ldrb	r5, [r5, r3]
  401cc4:	2301      	movs	r3, #1
  401cc6:	40ab      	lsls	r3, r5
	((Pwm *)hw)->PWM_IER1 = data;
  401cc8:	610b      	str	r3, [r1, #16]
	((Pwm *)hw)->PWM_IDR1 = ~data;
  401cca:	43db      	mvns	r3, r3
  401ccc:	614b      	str	r3, [r1, #20]
		for (i = 0; i < cfg->ch_num; i++) {
  401cce:	3201      	adds	r2, #1
  401cd0:	b2d2      	uxtb	r2, r2
  401cd2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  401cd4:	429a      	cmp	r2, r3
  401cd6:	d3f1      	bcc.n	401cbc <_pwm_set_irq_state+0x24>
  401cd8:	bd38      	pop	{r3, r4, r5, pc}
  401cda:	2200      	movs	r2, #0
  401cdc:	e7f9      	b.n	401cd2 <_pwm_set_irq_state+0x3a>
		ASSERT(false);
  401cde:	f240 2209 	movw	r2, #521	; 0x209
  401ce2:	4902      	ldr	r1, [pc, #8]	; (401cec <_pwm_set_irq_state+0x54>)
  401ce4:	2000      	movs	r0, #0
  401ce6:	4b02      	ldr	r3, [pc, #8]	; (401cf0 <_pwm_set_irq_state+0x58>)
  401ce8:	4798      	blx	r3
	}
}
  401cea:	e7e6      	b.n	401cba <_pwm_set_irq_state+0x22>
  401cec:	004059e0 	.word	0x004059e0
  401cf0:	00401221 	.word	0x00401221
  401cf4:	004019fd 	.word	0x004019fd

00401cf8 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  401cf8:	2000      	movs	r0, #0
  401cfa:	4770      	bx	lr

00401cfc <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  401cfc:	4b03      	ldr	r3, [pc, #12]	; (401d0c <_system_time_init+0x10>)
  401cfe:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  401d02:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  401d04:	2205      	movs	r2, #5
  401d06:	601a      	str	r2, [r3, #0]
  401d08:	4770      	bx	lr
  401d0a:	bf00      	nop
  401d0c:	e000e010 	.word	0xe000e010

00401d10 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  401d10:	b508      	push	{r3, lr}
	_system_time_init(hw);
  401d12:	4b01      	ldr	r3, [pc, #4]	; (401d18 <_delay_init+0x8>)
  401d14:	4798      	blx	r3
  401d16:	bd08      	pop	{r3, pc}
  401d18:	00401cfd 	.word	0x00401cfd

00401d1c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  401d1c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  401d1e:	e00d      	b.n	401d3c <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  401d20:	4b0d      	ldr	r3, [pc, #52]	; (401d58 <_delay_cycles+0x3c>)
  401d22:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  401d26:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401d28:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401d2a:	4b0b      	ldr	r3, [pc, #44]	; (401d58 <_delay_cycles+0x3c>)
  401d2c:	681b      	ldr	r3, [r3, #0]
  401d2e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401d32:	d0fa      	beq.n	401d2a <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  401d34:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  401d38:	3101      	adds	r1, #1
	while (n--) {
  401d3a:	4610      	mov	r0, r2
  401d3c:	1e43      	subs	r3, r0, #1
  401d3e:	b2da      	uxtb	r2, r3
  401d40:	2800      	cmp	r0, #0
  401d42:	d1ed      	bne.n	401d20 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  401d44:	4b04      	ldr	r3, [pc, #16]	; (401d58 <_delay_cycles+0x3c>)
  401d46:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  401d48:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401d4a:	4b03      	ldr	r3, [pc, #12]	; (401d58 <_delay_cycles+0x3c>)
  401d4c:	681b      	ldr	r3, [r3, #0]
  401d4e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401d52:	d0fa      	beq.n	401d4a <_delay_cycles+0x2e>
		;
}
  401d54:	4770      	bx	lr
  401d56:	bf00      	nop
  401d58:	e000e010 	.word	0xe000e010

00401d5c <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401d5c:	2300      	movs	r3, #0
  401d5e:	2b01      	cmp	r3, #1
  401d60:	d815      	bhi.n	401d8e <get_cfg+0x32>
{
  401d62:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401d64:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401d68:	008a      	lsls	r2, r1, #2
  401d6a:	490a      	ldr	r1, [pc, #40]	; (401d94 <get_cfg+0x38>)
  401d6c:	588a      	ldr	r2, [r1, r2]
  401d6e:	4282      	cmp	r2, r0
  401d70:	d007      	beq.n	401d82 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401d72:	3301      	adds	r3, #1
  401d74:	b2db      	uxtb	r3, r3
  401d76:	2b01      	cmp	r3, #1
  401d78:	d9f4      	bls.n	401d64 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  401d7a:	2000      	movs	r0, #0
}
  401d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401d80:	4770      	bx	lr
			return &(_tcs[i]);
  401d82:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401d86:	00a3      	lsls	r3, r4, #2
  401d88:	4608      	mov	r0, r1
  401d8a:	4418      	add	r0, r3
  401d8c:	e7f6      	b.n	401d7c <get_cfg+0x20>
	return NULL;
  401d8e:	2000      	movs	r0, #0
  401d90:	4770      	bx	lr
  401d92:	bf00      	nop
  401d94:	20400000 	.word	0x20400000

00401d98 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  401d98:	4b06      	ldr	r3, [pc, #24]	; (401db4 <_tc_init_irq_param+0x1c>)
  401d9a:	4298      	cmp	r0, r3
  401d9c:	d003      	beq.n	401da6 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  401d9e:	4b06      	ldr	r3, [pc, #24]	; (401db8 <_tc_init_irq_param+0x20>)
  401da0:	4298      	cmp	r0, r3
  401da2:	d003      	beq.n	401dac <_tc_init_irq_param+0x14>
  401da4:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  401da6:	4b05      	ldr	r3, [pc, #20]	; (401dbc <_tc_init_irq_param+0x24>)
  401da8:	6019      	str	r1, [r3, #0]
  401daa:	e7f8      	b.n	401d9e <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  401dac:	4b03      	ldr	r3, [pc, #12]	; (401dbc <_tc_init_irq_param+0x24>)
  401dae:	6059      	str	r1, [r3, #4]
	}
}
  401db0:	e7f8      	b.n	401da4 <_tc_init_irq_param+0xc>
  401db2:	bf00      	nop
  401db4:	4000c000 	.word	0x4000c000
  401db8:	40054000 	.word	0x40054000
  401dbc:	20400398 	.word	0x20400398

00401dc0 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  401dc0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  401dc2:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  401dc4:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  401dc6:	f013 0f10 	tst.w	r3, #16
  401dca:	d100      	bne.n	401dce <tc_interrupt_handler+0xe>
  401dcc:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  401dce:	6803      	ldr	r3, [r0, #0]
  401dd0:	4798      	blx	r3
	}
}
  401dd2:	e7fb      	b.n	401dcc <tc_interrupt_handler+0xc>

00401dd4 <_timer_init>:
{
  401dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401dd8:	4606      	mov	r6, r0
  401dda:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  401ddc:	4608      	mov	r0, r1
  401dde:	4b2f      	ldr	r3, [pc, #188]	; (401e9c <_timer_init+0xc8>)
  401de0:	4798      	blx	r3
  401de2:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  401de4:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  401de8:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  401dec:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  401dee:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  401df2:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  401df4:	22c3      	movs	r2, #195	; 0xc3
  401df6:	492a      	ldr	r1, [pc, #168]	; (401ea0 <_timer_init+0xcc>)
  401df8:	2001      	movs	r0, #1
  401dfa:	4b2a      	ldr	r3, [pc, #168]	; (401ea4 <_timer_init+0xd0>)
  401dfc:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401dfe:	f248 0307 	movw	r3, #32775	; 0x8007
  401e02:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  401e04:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  401e08:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401e0c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401e10:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401e12:	2300      	movs	r3, #0
  401e14:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401e16:	f248 020f 	movw	r2, #32783	; 0x800f
  401e1a:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  401e1c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  401e20:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401e24:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401e28:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401e2a:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  401e2c:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  401e2e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  401e32:	4631      	mov	r1, r6
  401e34:	4620      	mov	r0, r4
  401e36:	4b1c      	ldr	r3, [pc, #112]	; (401ea8 <_timer_init+0xd4>)
  401e38:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  401e3a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401e3e:	2b00      	cmp	r3, #0
  401e40:	db0d      	blt.n	401e5e <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401e42:	095a      	lsrs	r2, r3, #5
  401e44:	f003 031f 	and.w	r3, r3, #31
  401e48:	2101      	movs	r1, #1
  401e4a:	fa01 f303 	lsl.w	r3, r1, r3
  401e4e:	3220      	adds	r2, #32
  401e50:	4916      	ldr	r1, [pc, #88]	; (401eac <_timer_init+0xd8>)
  401e52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401e56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401e5a:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  401e5e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401e62:	2b00      	cmp	r3, #0
  401e64:	db09      	blt.n	401e7a <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401e66:	095a      	lsrs	r2, r3, #5
  401e68:	f003 031f 	and.w	r3, r3, #31
  401e6c:	2101      	movs	r1, #1
  401e6e:	fa01 f303 	lsl.w	r3, r1, r3
  401e72:	3260      	adds	r2, #96	; 0x60
  401e74:	490d      	ldr	r1, [pc, #52]	; (401eac <_timer_init+0xd8>)
  401e76:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  401e7a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401e7e:	2b00      	cmp	r3, #0
  401e80:	db08      	blt.n	401e94 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401e82:	0959      	lsrs	r1, r3, #5
  401e84:	f003 031f 	and.w	r3, r3, #31
  401e88:	2201      	movs	r2, #1
  401e8a:	fa02 f303 	lsl.w	r3, r2, r3
  401e8e:	4a07      	ldr	r2, [pc, #28]	; (401eac <_timer_init+0xd8>)
  401e90:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  401e94:	2000      	movs	r0, #0
  401e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e9a:	bf00      	nop
  401e9c:	00401d5d 	.word	0x00401d5d
  401ea0:	004059f8 	.word	0x004059f8
  401ea4:	00401221 	.word	0x00401221
  401ea8:	00401d99 	.word	0x00401d99
  401eac:	e000e100 	.word	0xe000e100

00401eb0 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  401eb0:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  401eb2:	2305      	movs	r3, #5
  401eb4:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  401eb6:	68c2      	ldr	r2, [r0, #12]
  401eb8:	6413      	str	r3, [r2, #64]	; 0x40
  401eba:	4770      	bx	lr

00401ebc <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  401ebc:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  401ebe:	6a13      	ldr	r3, [r2, #32]
  401ec0:	f3c3 4300 	ubfx	r3, r3, #16, #1
  401ec4:	6e10      	ldr	r0, [r2, #96]	; 0x60
  401ec6:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  401eca:	4318      	orrs	r0, r3
  401ecc:	4770      	bx	lr

00401ece <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  401ece:	2000      	movs	r0, #0
  401ed0:	4770      	bx	lr
	...

00401ed4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  401ed4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  401ed6:	4b02      	ldr	r3, [pc, #8]	; (401ee0 <TC0_Handler+0xc>)
  401ed8:	6818      	ldr	r0, [r3, #0]
  401eda:	4b02      	ldr	r3, [pc, #8]	; (401ee4 <TC0_Handler+0x10>)
  401edc:	4798      	blx	r3
  401ede:	bd08      	pop	{r3, pc}
  401ee0:	20400398 	.word	0x20400398
  401ee4:	00401dc1 	.word	0x00401dc1

00401ee8 <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  401ee8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  401eea:	4b02      	ldr	r3, [pc, #8]	; (401ef4 <TC9_Handler+0xc>)
  401eec:	6858      	ldr	r0, [r3, #4]
  401eee:	4b02      	ldr	r3, [pc, #8]	; (401ef8 <TC9_Handler+0x10>)
  401ef0:	4798      	blx	r3
  401ef2:	bd08      	pop	{r3, pc}
  401ef4:	20400398 	.word	0x20400398
  401ef8:	00401dc1 	.word	0x00401dc1

00401efc <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  401efc:	b510      	push	{r4, lr}
	ASSERT(hw);
  401efe:	4604      	mov	r4, r0
  401f00:	f240 222b 	movw	r2, #555	; 0x22b
  401f04:	4905      	ldr	r1, [pc, #20]	; (401f1c <_usart_get_hardware_index+0x20>)
  401f06:	3000      	adds	r0, #0
  401f08:	bf18      	it	ne
  401f0a:	2001      	movne	r0, #1
  401f0c:	4b04      	ldr	r3, [pc, #16]	; (401f20 <_usart_get_hardware_index+0x24>)
  401f0e:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  401f10:	4804      	ldr	r0, [pc, #16]	; (401f24 <_usart_get_hardware_index+0x28>)
  401f12:	4420      	add	r0, r4
}
  401f14:	f3c0 3087 	ubfx	r0, r0, #14, #8
  401f18:	bd10      	pop	{r4, pc}
  401f1a:	bf00      	nop
  401f1c:	00405a18 	.word	0x00405a18
  401f20:	00401221 	.word	0x00401221
  401f24:	bffdc000 	.word	0xbffdc000

00401f28 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  401f28:	b510      	push	{r4, lr}
	ASSERT(hw);
  401f2a:	4604      	mov	r4, r0
  401f2c:	f240 2287 	movw	r2, #647	; 0x287
  401f30:	490e      	ldr	r1, [pc, #56]	; (401f6c <_get_usart_index+0x44>)
  401f32:	3000      	adds	r0, #0
  401f34:	bf18      	it	ne
  401f36:	2001      	movne	r0, #1
  401f38:	4b0d      	ldr	r3, [pc, #52]	; (401f70 <_get_usart_index+0x48>)
  401f3a:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  401f3c:	4620      	mov	r0, r4
  401f3e:	4b0d      	ldr	r3, [pc, #52]	; (401f74 <_get_usart_index+0x4c>)
  401f40:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401f42:	2300      	movs	r3, #0
  401f44:	b143      	cbz	r3, 401f58 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  401f46:	f240 2291 	movw	r2, #657	; 0x291
  401f4a:	4908      	ldr	r1, [pc, #32]	; (401f6c <_get_usart_index+0x44>)
  401f4c:	2000      	movs	r0, #0
  401f4e:	4b08      	ldr	r3, [pc, #32]	; (401f70 <_get_usart_index+0x48>)
  401f50:	4798      	blx	r3
	return 0;
  401f52:	2300      	movs	r3, #0
}
  401f54:	4618      	mov	r0, r3
  401f56:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  401f58:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401f5c:	008a      	lsls	r2, r1, #2
  401f5e:	4906      	ldr	r1, [pc, #24]	; (401f78 <_get_usart_index+0x50>)
  401f60:	5c8a      	ldrb	r2, [r1, r2]
  401f62:	4290      	cmp	r0, r2
  401f64:	d0f6      	beq.n	401f54 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  401f66:	3301      	adds	r3, #1
  401f68:	b2db      	uxtb	r3, r3
  401f6a:	e7eb      	b.n	401f44 <_get_usart_index+0x1c>
  401f6c:	00405a18 	.word	0x00405a18
  401f70:	00401221 	.word	0x00401221
  401f74:	00401efd 	.word	0x00401efd
  401f78:	00405a0c 	.word	0x00405a0c

00401f7c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  401f7c:	b510      	push	{r4, lr}
	ASSERT(hw);
  401f7e:	4604      	mov	r4, r0
  401f80:	f240 229e 	movw	r2, #670	; 0x29e
  401f84:	4911      	ldr	r1, [pc, #68]	; (401fcc <_usart_init+0x50>)
  401f86:	3000      	adds	r0, #0
  401f88:	bf18      	it	ne
  401f8a:	2001      	movne	r0, #1
  401f8c:	4b10      	ldr	r3, [pc, #64]	; (401fd0 <_usart_init+0x54>)
  401f8e:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  401f90:	4620      	mov	r0, r4
  401f92:	4b10      	ldr	r3, [pc, #64]	; (401fd4 <_usart_init+0x58>)
  401f94:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  401f96:	4b10      	ldr	r3, [pc, #64]	; (401fd8 <_usart_init+0x5c>)
  401f98:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  401f9c:	2300      	movs	r3, #0
  401f9e:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  401fa0:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  401fa2:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  401fa4:	22ac      	movs	r2, #172	; 0xac
  401fa6:	6022      	str	r2, [r4, #0]
  401fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
  401fac:	6022      	str	r2, [r4, #0]
  401fae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401fb2:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  401fb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401fb8:	0081      	lsls	r1, r0, #2
  401fba:	4a08      	ldr	r2, [pc, #32]	; (401fdc <_usart_init+0x60>)
  401fbc:	440a      	add	r2, r1
  401fbe:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  401fc0:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  401fc2:	4a07      	ldr	r2, [pc, #28]	; (401fe0 <_usart_init+0x64>)
  401fc4:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  401fc6:	4618      	mov	r0, r3
  401fc8:	bd10      	pop	{r4, pc}
  401fca:	bf00      	nop
  401fcc:	00405a18 	.word	0x00405a18
  401fd0:	00401221 	.word	0x00401221
  401fd4:	00401f29 	.word	0x00401f29
  401fd8:	55534100 	.word	0x55534100
  401fdc:	00405a0c 	.word	0x00405a0c
  401fe0:	000100f4 	.word	0x000100f4

00401fe4 <_usart_sync_init>:
{
  401fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401fe6:	460c      	mov	r4, r1
	ASSERT(device);
  401fe8:	4e09      	ldr	r6, [pc, #36]	; (402010 <_usart_sync_init+0x2c>)
  401fea:	4607      	mov	r7, r0
  401fec:	22bd      	movs	r2, #189	; 0xbd
  401fee:	4631      	mov	r1, r6
  401ff0:	3000      	adds	r0, #0
  401ff2:	bf18      	it	ne
  401ff4:	2001      	movne	r0, #1
  401ff6:	4d07      	ldr	r5, [pc, #28]	; (402014 <_usart_sync_init+0x30>)
  401ff8:	47a8      	blx	r5
	ASSERT(hw);
  401ffa:	22be      	movs	r2, #190	; 0xbe
  401ffc:	4631      	mov	r1, r6
  401ffe:	1c20      	adds	r0, r4, #0
  402000:	bf18      	it	ne
  402002:	2001      	movne	r0, #1
  402004:	47a8      	blx	r5
	device->hw = hw;
  402006:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  402008:	4620      	mov	r0, r4
  40200a:	4b03      	ldr	r3, [pc, #12]	; (402018 <_usart_sync_init+0x34>)
  40200c:	4798      	blx	r3
}
  40200e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402010:	00405a18 	.word	0x00405a18
  402014:	00401221 	.word	0x00401221
  402018:	00401f7d 	.word	0x00401f7d

0040201c <_usart_sync_enable>:
{
  40201c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  40201e:	4e0a      	ldr	r6, [pc, #40]	; (402048 <_usart_sync_enable+0x2c>)
  402020:	4604      	mov	r4, r0
  402022:	f240 1205 	movw	r2, #261	; 0x105
  402026:	4631      	mov	r1, r6
  402028:	3000      	adds	r0, #0
  40202a:	bf18      	it	ne
  40202c:	2001      	movne	r0, #1
  40202e:	4d07      	ldr	r5, [pc, #28]	; (40204c <_usart_sync_enable+0x30>)
  402030:	47a8      	blx	r5
	_usart_enable(device->hw);
  402032:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  402034:	f240 22c7 	movw	r2, #711	; 0x2c7
  402038:	4631      	mov	r1, r6
  40203a:	1c20      	adds	r0, r4, #0
  40203c:	bf18      	it	ne
  40203e:	2001      	movne	r0, #1
  402040:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  402042:	2350      	movs	r3, #80	; 0x50
  402044:	6023      	str	r3, [r4, #0]
  402046:	bd70      	pop	{r4, r5, r6, pc}
  402048:	00405a18 	.word	0x00405a18
  40204c:	00401221 	.word	0x00401221

00402050 <_usart_sync_write_byte>:
{
  402050:	b538      	push	{r3, r4, r5, lr}
  402052:	460c      	mov	r4, r1
	ASSERT(device);
  402054:	4605      	mov	r5, r0
  402056:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  40205a:	4904      	ldr	r1, [pc, #16]	; (40206c <_usart_sync_write_byte+0x1c>)
  40205c:	3000      	adds	r0, #0
  40205e:	bf18      	it	ne
  402060:	2001      	movne	r0, #1
  402062:	4b03      	ldr	r3, [pc, #12]	; (402070 <_usart_sync_write_byte+0x20>)
  402064:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  402066:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  402068:	61dc      	str	r4, [r3, #28]
  40206a:	bd38      	pop	{r3, r4, r5, pc}
  40206c:	00405a18 	.word	0x00405a18
  402070:	00401221 	.word	0x00401221

00402074 <_usart_sync_read_byte>:
{
  402074:	b510      	push	{r4, lr}
	ASSERT(device);
  402076:	4604      	mov	r4, r0
  402078:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  40207c:	4904      	ldr	r1, [pc, #16]	; (402090 <_usart_sync_read_byte+0x1c>)
  40207e:	3000      	adds	r0, #0
  402080:	bf18      	it	ne
  402082:	2001      	movne	r0, #1
  402084:	4b03      	ldr	r3, [pc, #12]	; (402094 <_usart_sync_read_byte+0x20>)
  402086:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  402088:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  40208a:	6998      	ldr	r0, [r3, #24]
}
  40208c:	b2c0      	uxtb	r0, r0
  40208e:	bd10      	pop	{r4, pc}
  402090:	00405a18 	.word	0x00405a18
  402094:	00401221 	.word	0x00401221

00402098 <_usart_sync_is_ready_to_send>:
{
  402098:	b510      	push	{r4, lr}
	ASSERT(device);
  40209a:	4604      	mov	r4, r0
  40209c:	f240 12c3 	movw	r2, #451	; 0x1c3
  4020a0:	4905      	ldr	r1, [pc, #20]	; (4020b8 <_usart_sync_is_ready_to_send+0x20>)
  4020a2:	3000      	adds	r0, #0
  4020a4:	bf18      	it	ne
  4020a6:	2001      	movne	r0, #1
  4020a8:	4b04      	ldr	r3, [pc, #16]	; (4020bc <_usart_sync_is_ready_to_send+0x24>)
  4020aa:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  4020ac:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  4020ae:	6958      	ldr	r0, [r3, #20]
}
  4020b0:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4020b4:	bd10      	pop	{r4, pc}
  4020b6:	bf00      	nop
  4020b8:	00405a18 	.word	0x00405a18
  4020bc:	00401221 	.word	0x00401221

004020c0 <_usart_sync_is_transmit_done>:
{
  4020c0:	b510      	push	{r4, lr}
	ASSERT(device);
  4020c2:	4604      	mov	r4, r0
  4020c4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  4020c8:	4905      	ldr	r1, [pc, #20]	; (4020e0 <_usart_sync_is_transmit_done+0x20>)
  4020ca:	3000      	adds	r0, #0
  4020cc:	bf18      	it	ne
  4020ce:	2001      	movne	r0, #1
  4020d0:	4b04      	ldr	r3, [pc, #16]	; (4020e4 <_usart_sync_is_transmit_done+0x24>)
  4020d2:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  4020d4:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  4020d6:	6958      	ldr	r0, [r3, #20]
}
  4020d8:	f3c0 2040 	ubfx	r0, r0, #9, #1
  4020dc:	bd10      	pop	{r4, pc}
  4020de:	bf00      	nop
  4020e0:	00405a18 	.word	0x00405a18
  4020e4:	00401221 	.word	0x00401221

004020e8 <_usart_sync_is_byte_received>:
{
  4020e8:	b510      	push	{r4, lr}
	ASSERT(device);
  4020ea:	4604      	mov	r4, r0
  4020ec:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4020f0:	4905      	ldr	r1, [pc, #20]	; (402108 <_usart_sync_is_byte_received+0x20>)
  4020f2:	3000      	adds	r0, #0
  4020f4:	bf18      	it	ne
  4020f6:	2001      	movne	r0, #1
  4020f8:	4b04      	ldr	r3, [pc, #16]	; (40210c <_usart_sync_is_byte_received+0x24>)
  4020fa:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  4020fc:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  4020fe:	6958      	ldr	r0, [r3, #20]
  402100:	f000 0001 	and.w	r0, r0, #1
}
  402104:	bd10      	pop	{r4, pc}
  402106:	bf00      	nop
  402108:	00405a18 	.word	0x00405a18
  40210c:	00401221 	.word	0x00401221

00402110 <_usart_get_usart_sync>:
}
  402110:	2000      	movs	r0, #0
  402112:	4770      	bx	lr

00402114 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  402114:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  402116:	2300      	movs	r3, #0
  402118:	e004      	b.n	402124 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  40211a:	0199      	lsls	r1, r3, #6
  40211c:	4a16      	ldr	r2, [pc, #88]	; (402178 <_dma_init+0x64>)
  40211e:	5852      	ldr	r2, [r2, r1]
  402120:	3301      	adds	r3, #1
  402122:	b2db      	uxtb	r3, r3
  402124:	2b17      	cmp	r3, #23
  402126:	d9f8      	bls.n	40211a <_dma_init+0x6>
  402128:	2300      	movs	r3, #0
  40212a:	e014      	b.n	402156 <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  40212c:	4c13      	ldr	r4, [pc, #76]	; (40217c <_dma_init+0x68>)
  40212e:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  402132:	2100      	movs	r1, #0
  402134:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  402136:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  402138:	1c98      	adds	r0, r3, #2
  40213a:	0180      	lsls	r0, r0, #6
  40213c:	1825      	adds	r5, r4, r0
  40213e:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  402140:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  402142:	490f      	ldr	r1, [pc, #60]	; (402180 <_dma_init+0x6c>)
  402144:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  402148:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  40214a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40214e:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  402150:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  402152:	3301      	adds	r3, #1
  402154:	b2db      	uxtb	r3, r3
  402156:	2b17      	cmp	r3, #23
  402158:	d9e8      	bls.n	40212c <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40215a:	4b0a      	ldr	r3, [pc, #40]	; (402184 <_dma_init+0x70>)
  40215c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  402164:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402168:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40216c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402170:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  402172:	2000      	movs	r0, #0
  402174:	bc30      	pop	{r4, r5}
  402176:	4770      	bx	lr
  402178:	4007805c 	.word	0x4007805c
  40217c:	40078000 	.word	0x40078000
  402180:	00405a34 	.word	0x00405a34
  402184:	e000e100 	.word	0xe000e100

00402188 <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  402188:	0180      	lsls	r0, r0, #6
  40218a:	4b02      	ldr	r3, [pc, #8]	; (402194 <_dma_set_destination_address+0xc>)
  40218c:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  40218e:	2000      	movs	r0, #0
  402190:	4770      	bx	lr
  402192:	bf00      	nop
  402194:	40078064 	.word	0x40078064

00402198 <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  402198:	0180      	lsls	r0, r0, #6
  40219a:	4b02      	ldr	r3, [pc, #8]	; (4021a4 <_dma_set_source_address+0xc>)
  40219c:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  40219e:	2000      	movs	r0, #0
  4021a0:	4770      	bx	lr
  4021a2:	bf00      	nop
  4021a4:	40078060 	.word	0x40078060

004021a8 <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  4021a8:	0180      	lsls	r0, r0, #6
  4021aa:	4a04      	ldr	r2, [pc, #16]	; (4021bc <_dma_set_data_amount+0x14>)
  4021ac:	4402      	add	r2, r0
  4021ae:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  4021b0:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  4021b4:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  4021b6:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  4021b8:	2000      	movs	r0, #0
  4021ba:	4770      	bx	lr
  4021bc:	40078000 	.word	0x40078000

004021c0 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  4021c0:	2301      	movs	r3, #1
  4021c2:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  4021c6:	4b03      	ldr	r3, [pc, #12]	; (4021d4 <_dma_enable_transaction+0x14>)
  4021c8:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  4021ca:	b101      	cbz	r1, 4021ce <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  4021cc:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  4021ce:	2000      	movs	r0, #0
  4021d0:	4770      	bx	lr
  4021d2:	bf00      	nop
  4021d4:	40078000 	.word	0x40078000

004021d8 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  4021d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4021dc:	008a      	lsls	r2, r1, #2
  4021de:	4b02      	ldr	r3, [pc, #8]	; (4021e8 <_dma_get_channel_resource+0x10>)
  4021e0:	4413      	add	r3, r2
  4021e2:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  4021e4:	2000      	movs	r0, #0
  4021e6:	4770      	bx	lr
  4021e8:	204003a0 	.word	0x204003a0

004021ec <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  4021ec:	b19a      	cbz	r2, 402216 <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  4021ee:	b951      	cbnz	r1, 402206 <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  4021f0:	0182      	lsls	r2, r0, #6
  4021f2:	4b13      	ldr	r3, [pc, #76]	; (402240 <_dma_set_irq_state+0x54>)
  4021f4:	4413      	add	r3, r2
  4021f6:	2201      	movs	r2, #1
  4021f8:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  4021fa:	2301      	movs	r3, #1
  4021fc:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  402200:	4b0f      	ldr	r3, [pc, #60]	; (402240 <_dma_set_irq_state+0x54>)
  402202:	60d8      	str	r0, [r3, #12]
  402204:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  402206:	2901      	cmp	r1, #1
  402208:	d1f7      	bne.n	4021fa <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  40220a:	0182      	lsls	r2, r0, #6
  40220c:	4b0c      	ldr	r3, [pc, #48]	; (402240 <_dma_set_irq_state+0x54>)
  40220e:	4413      	add	r3, r2
  402210:	2270      	movs	r2, #112	; 0x70
  402212:	651a      	str	r2, [r3, #80]	; 0x50
  402214:	e7f1      	b.n	4021fa <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  402216:	b951      	cbnz	r1, 40222e <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  402218:	0182      	lsls	r2, r0, #6
  40221a:	4b09      	ldr	r3, [pc, #36]	; (402240 <_dma_set_irq_state+0x54>)
  40221c:	4413      	add	r3, r2
  40221e:	2201      	movs	r2, #1
  402220:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  402222:	2301      	movs	r3, #1
  402224:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  402228:	4b05      	ldr	r3, [pc, #20]	; (402240 <_dma_set_irq_state+0x54>)
  40222a:	6118      	str	r0, [r3, #16]
  40222c:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  40222e:	2901      	cmp	r1, #1
  402230:	d1f7      	bne.n	402222 <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  402232:	0182      	lsls	r2, r0, #6
  402234:	4b02      	ldr	r3, [pc, #8]	; (402240 <_dma_set_irq_state+0x54>)
  402236:	4413      	add	r3, r2
  402238:	2270      	movs	r2, #112	; 0x70
  40223a:	655a      	str	r2, [r3, #84]	; 0x54
  40223c:	e7f1      	b.n	402222 <_dma_set_irq_state+0x36>
  40223e:	bf00      	nop
  402240:	40078000 	.word	0x40078000

00402244 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  402244:	4b17      	ldr	r3, [pc, #92]	; (4022a4 <XDMAC_Handler+0x60>)
  402246:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  402248:	2300      	movs	r3, #0
  40224a:	2b17      	cmp	r3, #23
  40224c:	d81b      	bhi.n	402286 <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  40224e:	fa21 f203 	lsr.w	r2, r1, r3
  402252:	f012 0f01 	tst.w	r2, #1
  402256:	d102      	bne.n	40225e <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  402258:	3301      	adds	r3, #1
  40225a:	b2db      	uxtb	r3, r3
  40225c:	e7f5      	b.n	40224a <XDMAC_Handler+0x6>
			channel = i;
  40225e:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  402260:	2b00      	cmp	r3, #0
  402262:	db1d      	blt.n	4022a0 <XDMAC_Handler+0x5c>
{
  402264:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  402266:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  40226a:	0090      	lsls	r0, r2, #2
  40226c:	4a0e      	ldr	r2, [pc, #56]	; (4022a8 <XDMAC_Handler+0x64>)
  40226e:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  402270:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  402272:	0189      	lsls	r1, r1, #6
  402274:	4a0d      	ldr	r2, [pc, #52]	; (4022ac <XDMAC_Handler+0x68>)
  402276:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  402278:	f012 0f70 	tst.w	r2, #112	; 0x70
  40227c:	d106      	bne.n	40228c <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  40227e:	f012 0f01 	tst.w	r2, #1
  402282:	d106      	bne.n	402292 <XDMAC_Handler+0x4e>
  402284:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  402286:	f04f 33ff 	mov.w	r3, #4294967295
  40228a:	e7e9      	b.n	402260 <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  40228c:	6843      	ldr	r3, [r0, #4]
  40228e:	4798      	blx	r3
  402290:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  402292:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  402296:	00a3      	lsls	r3, r4, #2
  402298:	4a03      	ldr	r2, [pc, #12]	; (4022a8 <XDMAC_Handler+0x64>)
  40229a:	58d3      	ldr	r3, [r2, r3]
  40229c:	4798      	blx	r3
  40229e:	e7f1      	b.n	402284 <XDMAC_Handler+0x40>
  4022a0:	4770      	bx	lr
  4022a2:	bf00      	nop
  4022a4:	40078000 	.word	0x40078000
  4022a8:	204003a0 	.word	0x204003a0
  4022ac:	4007805c 	.word	0x4007805c

004022b0 <main>:




int main(void)
{
  4022b0:	b580      	push	{r7, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  4022b2:	4b1d      	ldr	r3, [pc, #116]	; (402328 <main+0x78>)
  4022b4:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  4022b6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4022ba:	4b1c      	ldr	r3, [pc, #112]	; (40232c <main+0x7c>)
  4022bc:	631a      	str	r2, [r3, #48]	; 0x30
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
		
	gpio_set_pin_level(PIN_USER_LED, true);
	dma_adc_init();
  4022be:	4b1c      	ldr	r3, [pc, #112]	; (402330 <main+0x80>)
  4022c0:	4798      	blx	r3
	pwm_init_user();
  4022c2:	4b1c      	ldr	r3, [pc, #112]	; (402334 <main+0x84>)
  4022c4:	4798      	blx	r3
	
	pwm_enable_all();
  4022c6:	4b1c      	ldr	r3, [pc, #112]	; (402338 <main+0x88>)
  4022c8:	4798      	blx	r3
	adc_enable_all();
  4022ca:	4b1c      	ldr	r3, [pc, #112]	; (40233c <main+0x8c>)
  4022cc:	4798      	blx	r3
  4022ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4022d2:	4b1b      	ldr	r3, [pc, #108]	; (402340 <main+0x90>)
  4022d4:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);
	
	timer_start(&ENCODER_A);
  4022d6:	481b      	ldr	r0, [pc, #108]	; (402344 <main+0x94>)
  4022d8:	4c1b      	ldr	r4, [pc, #108]	; (402348 <main+0x98>)
  4022da:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  4022dc:	481b      	ldr	r0, [pc, #108]	; (40234c <main+0x9c>)
  4022de:	47a0      	blx	r4
  }
  else
  {
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
  4022e0:	4b1b      	ldr	r3, [pc, #108]	; (402350 <main+0xa0>)
  4022e2:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
	
	printf("systick priority %i\n", (int) NVIC_GetPriority(SysTick_IRQn));
  4022e6:	0949      	lsrs	r1, r1, #5
  4022e8:	481a      	ldr	r0, [pc, #104]	; (402354 <main+0xa4>)
  4022ea:	4c1b      	ldr	r4, [pc, #108]	; (402358 <main+0xa8>)
  4022ec:	47a0      	blx	r4
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
  4022ee:	4b1b      	ldr	r3, [pc, #108]	; (40235c <main+0xac>)
  4022f0:	f893 131f 	ldrb.w	r1, [r3, #799]	; 0x31f
	printf("pwm priority %i\n", (int) NVIC_GetPriority(PWM0_IRQn));
  4022f4:	0949      	lsrs	r1, r1, #5
  4022f6:	481a      	ldr	r0, [pc, #104]	; (402360 <main+0xb0>)
  4022f8:	47a0      	blx	r4
  4022fa:	4d0c      	ldr	r5, [pc, #48]	; (40232c <main+0x7c>)
  4022fc:	f44f 7680 	mov.w	r6, #256	; 0x100
  402300:	632e      	str	r6, [r5, #48]	; 0x30

	/* Replace with your application code */
	while (1) {
		
		gpio_set_pin_level(PIN_USER_LED,true);
		delay_ms(500);
  402302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402306:	4c17      	ldr	r4, [pc, #92]	; (402364 <main+0xb4>)
  402308:	47a0      	blx	r4
		
		dma_adc_0_enable_for_one_transaction();
  40230a:	4b17      	ldr	r3, [pc, #92]	; (402368 <main+0xb8>)
  40230c:	4798      	blx	r3
		dma_adc_1_enable_for_one_transaction();
  40230e:	4b17      	ldr	r3, [pc, #92]	; (40236c <main+0xbc>)
  402310:	4798      	blx	r3
		adc_async_start_conversion(&ADC_0);
  402312:	4817      	ldr	r0, [pc, #92]	; (402370 <main+0xc0>)
  402314:	4f17      	ldr	r7, [pc, #92]	; (402374 <main+0xc4>)
  402316:	47b8      	blx	r7
		adc_async_start_conversion(&ADC_1);
  402318:	4817      	ldr	r0, [pc, #92]	; (402378 <main+0xc8>)
  40231a:	47b8      	blx	r7
	((Pio *)hw)->PIO_CODR = mask;
  40231c:	636e      	str	r6, [r5, #52]	; 0x34
		//printf("main - %i %i %i %i %i %i %i %i %i %i %i %i  \n", (int)afec_buf[0],(int)afec_buf[1],(int)afec_buf[2],(int)afec_buf[3],(int)afec_buf[4],(int)afec_buf[5],(int)afec_buf[6],(int)afec_buf[7],(int)afec_buf[8],(int)afec_buf[9],(int)afec_buf[10],(int)afec_buf[11]);
		//AFEC0_Handler

		gpio_set_pin_level(PIN_USER_LED,false);
		delay_ms(500);
  40231e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402322:	47a0      	blx	r4
  402324:	e7e9      	b.n	4022fa <main+0x4a>
  402326:	bf00      	nop
  402328:	004001d5 	.word	0x004001d5
  40232c:	400e1200 	.word	0x400e1200
  402330:	0040033d 	.word	0x0040033d
  402334:	004004ad 	.word	0x004004ad
  402338:	004004f9 	.word	0x004004f9
  40233c:	00400429 	.word	0x00400429
  402340:	400e0e00 	.word	0x400e0e00
  402344:	204005a8 	.word	0x204005a8
  402348:	004010a1 	.word	0x004010a1
  40234c:	204004f8 	.word	0x204004f8
  402350:	e000ed00 	.word	0xe000ed00
  402354:	00405af4 	.word	0x00405af4
  402358:	0040367d 	.word	0x0040367d
  40235c:	e000e100 	.word	0xe000e100
  402360:	00405728 	.word	0x00405728
  402364:	00400da9 	.word	0x00400da9
  402368:	004003d1 	.word	0x004003d1
  40236c:	004003fd 	.word	0x004003fd
  402370:	204005c4 	.word	0x204005c4
  402374:	00400d51 	.word	0x00400d51
  402378:	2040069c 	.word	0x2040069c

0040237c <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  40237c:	b958      	cbnz	r0, 402396 <_read+0x1a>
{
  40237e:	b508      	push	{r3, lr}
  402380:	460b      	mov	r3, r1
  402382:	4611      	mov	r1, r2
  402384:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  402386:	4b05      	ldr	r3, [pc, #20]	; (40239c <_read+0x20>)
  402388:	4798      	blx	r3
	if (n < 0) {
  40238a:	2800      	cmp	r0, #0
  40238c:	db00      	blt.n	402390 <_read+0x14>
		return -1;
	}

	return n;
}
  40238e:	bd08      	pop	{r3, pc}
		return -1;
  402390:	f04f 30ff 	mov.w	r0, #4294967295
  402394:	bd08      	pop	{r3, pc}
		return -1;
  402396:	f04f 30ff 	mov.w	r0, #4294967295
  40239a:	4770      	bx	lr
  40239c:	004023f5 	.word	0x004023f5

004023a0 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  4023a0:	3801      	subs	r0, #1
  4023a2:	2802      	cmp	r0, #2
  4023a4:	d80b      	bhi.n	4023be <_write+0x1e>
{
  4023a6:	b508      	push	{r3, lr}
  4023a8:	460b      	mov	r3, r1
  4023aa:	4611      	mov	r1, r2
  4023ac:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  4023ae:	4b05      	ldr	r3, [pc, #20]	; (4023c4 <_write+0x24>)
  4023b0:	4798      	blx	r3
	if (n < 0) {
  4023b2:	2800      	cmp	r0, #0
  4023b4:	db00      	blt.n	4023b8 <_write+0x18>
		return -1;
	}

	return n;
}
  4023b6:	bd08      	pop	{r3, pc}
		return -1;
  4023b8:	f04f 30ff 	mov.w	r0, #4294967295
  4023bc:	bd08      	pop	{r3, pc}
		return -1;
  4023be:	f04f 30ff 	mov.w	r0, #4294967295
  4023c2:	4770      	bx	lr
  4023c4:	00402419 	.word	0x00402419

004023c8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  4023c8:	b570      	push	{r4, r5, r6, lr}
  4023ca:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  4023cc:	4d06      	ldr	r5, [pc, #24]	; (4023e8 <stdio_io_init+0x20>)
  4023ce:	682b      	ldr	r3, [r5, #0]
  4023d0:	2100      	movs	r1, #0
  4023d2:	6898      	ldr	r0, [r3, #8]
  4023d4:	4c05      	ldr	r4, [pc, #20]	; (4023ec <stdio_io_init+0x24>)
  4023d6:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4023d8:	682b      	ldr	r3, [r5, #0]
  4023da:	2100      	movs	r1, #0
  4023dc:	6858      	ldr	r0, [r3, #4]
  4023de:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  4023e0:	4b03      	ldr	r3, [pc, #12]	; (4023f0 <stdio_io_init+0x28>)
  4023e2:	601e      	str	r6, [r3, #0]
  4023e4:	bd70      	pop	{r4, r5, r6, pc}
  4023e6:	bf00      	nop
  4023e8:	20400048 	.word	0x20400048
  4023ec:	004036ad 	.word	0x004036ad
  4023f0:	204004c0 	.word	0x204004c0

004023f4 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  4023f4:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4023f6:	4b06      	ldr	r3, [pc, #24]	; (402410 <stdio_io_read+0x1c>)
  4023f8:	681b      	ldr	r3, [r3, #0]
  4023fa:	b133      	cbz	r3, 40240a <stdio_io_read+0x16>
  4023fc:	460a      	mov	r2, r1
  4023fe:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  402400:	b292      	uxth	r2, r2
  402402:	4618      	mov	r0, r3
  402404:	4b03      	ldr	r3, [pc, #12]	; (402414 <stdio_io_read+0x20>)
  402406:	4798      	blx	r3
  402408:	bd08      	pop	{r3, pc}
		return 0;
  40240a:	2000      	movs	r0, #0
}
  40240c:	bd08      	pop	{r3, pc}
  40240e:	bf00      	nop
  402410:	204004c0 	.word	0x204004c0
  402414:	00400e71 	.word	0x00400e71

00402418 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  402418:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40241a:	4b06      	ldr	r3, [pc, #24]	; (402434 <stdio_io_write+0x1c>)
  40241c:	681b      	ldr	r3, [r3, #0]
  40241e:	b133      	cbz	r3, 40242e <stdio_io_write+0x16>
  402420:	460a      	mov	r2, r1
  402422:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  402424:	b292      	uxth	r2, r2
  402426:	4618      	mov	r0, r3
  402428:	4b03      	ldr	r3, [pc, #12]	; (402438 <stdio_io_write+0x20>)
  40242a:	4798      	blx	r3
  40242c:	bd08      	pop	{r3, pc}
		return 0;
  40242e:	2000      	movs	r0, #0
}
  402430:	bd08      	pop	{r3, pc}
  402432:	bf00      	nop
  402434:	204004c0 	.word	0x204004c0
  402438:	00400e41 	.word	0x00400e41

0040243c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  40243c:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  40243e:	4c04      	ldr	r4, [pc, #16]	; (402450 <stdio_redirect_init+0x14>)
  402440:	4620      	mov	r0, r4
  402442:	4b04      	ldr	r3, [pc, #16]	; (402454 <stdio_redirect_init+0x18>)
  402444:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  402446:	4620      	mov	r0, r4
  402448:	4b03      	ldr	r3, [pc, #12]	; (402458 <stdio_redirect_init+0x1c>)
  40244a:	4798      	blx	r3
  40244c:	bd10      	pop	{r4, pc}
  40244e:	bf00      	nop
  402450:	2040059c 	.word	0x2040059c
  402454:	004011f5 	.word	0x004011f5
  402458:	004023c9 	.word	0x004023c9

0040245c <__aeabi_drsub>:
  40245c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402460:	e002      	b.n	402468 <__adddf3>
  402462:	bf00      	nop

00402464 <__aeabi_dsub>:
  402464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402468 <__adddf3>:
  402468:	b530      	push	{r4, r5, lr}
  40246a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40246e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402472:	ea94 0f05 	teq	r4, r5
  402476:	bf08      	it	eq
  402478:	ea90 0f02 	teqeq	r0, r2
  40247c:	bf1f      	itttt	ne
  40247e:	ea54 0c00 	orrsne.w	ip, r4, r0
  402482:	ea55 0c02 	orrsne.w	ip, r5, r2
  402486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40248a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40248e:	f000 80e2 	beq.w	402656 <__adddf3+0x1ee>
  402492:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40249a:	bfb8      	it	lt
  40249c:	426d      	neglt	r5, r5
  40249e:	dd0c      	ble.n	4024ba <__adddf3+0x52>
  4024a0:	442c      	add	r4, r5
  4024a2:	ea80 0202 	eor.w	r2, r0, r2
  4024a6:	ea81 0303 	eor.w	r3, r1, r3
  4024aa:	ea82 0000 	eor.w	r0, r2, r0
  4024ae:	ea83 0101 	eor.w	r1, r3, r1
  4024b2:	ea80 0202 	eor.w	r2, r0, r2
  4024b6:	ea81 0303 	eor.w	r3, r1, r3
  4024ba:	2d36      	cmp	r5, #54	; 0x36
  4024bc:	bf88      	it	hi
  4024be:	bd30      	pophi	{r4, r5, pc}
  4024c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4024c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4024c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4024cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4024d0:	d002      	beq.n	4024d8 <__adddf3+0x70>
  4024d2:	4240      	negs	r0, r0
  4024d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4024d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4024dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4024e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4024e4:	d002      	beq.n	4024ec <__adddf3+0x84>
  4024e6:	4252      	negs	r2, r2
  4024e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4024ec:	ea94 0f05 	teq	r4, r5
  4024f0:	f000 80a7 	beq.w	402642 <__adddf3+0x1da>
  4024f4:	f1a4 0401 	sub.w	r4, r4, #1
  4024f8:	f1d5 0e20 	rsbs	lr, r5, #32
  4024fc:	db0d      	blt.n	40251a <__adddf3+0xb2>
  4024fe:	fa02 fc0e 	lsl.w	ip, r2, lr
  402502:	fa22 f205 	lsr.w	r2, r2, r5
  402506:	1880      	adds	r0, r0, r2
  402508:	f141 0100 	adc.w	r1, r1, #0
  40250c:	fa03 f20e 	lsl.w	r2, r3, lr
  402510:	1880      	adds	r0, r0, r2
  402512:	fa43 f305 	asr.w	r3, r3, r5
  402516:	4159      	adcs	r1, r3
  402518:	e00e      	b.n	402538 <__adddf3+0xd0>
  40251a:	f1a5 0520 	sub.w	r5, r5, #32
  40251e:	f10e 0e20 	add.w	lr, lr, #32
  402522:	2a01      	cmp	r2, #1
  402524:	fa03 fc0e 	lsl.w	ip, r3, lr
  402528:	bf28      	it	cs
  40252a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40252e:	fa43 f305 	asr.w	r3, r3, r5
  402532:	18c0      	adds	r0, r0, r3
  402534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40253c:	d507      	bpl.n	40254e <__adddf3+0xe6>
  40253e:	f04f 0e00 	mov.w	lr, #0
  402542:	f1dc 0c00 	rsbs	ip, ip, #0
  402546:	eb7e 0000 	sbcs.w	r0, lr, r0
  40254a:	eb6e 0101 	sbc.w	r1, lr, r1
  40254e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402552:	d31b      	bcc.n	40258c <__adddf3+0x124>
  402554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402558:	d30c      	bcc.n	402574 <__adddf3+0x10c>
  40255a:	0849      	lsrs	r1, r1, #1
  40255c:	ea5f 0030 	movs.w	r0, r0, rrx
  402560:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402564:	f104 0401 	add.w	r4, r4, #1
  402568:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40256c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402570:	f080 809a 	bcs.w	4026a8 <__adddf3+0x240>
  402574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402578:	bf08      	it	eq
  40257a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40257e:	f150 0000 	adcs.w	r0, r0, #0
  402582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402586:	ea41 0105 	orr.w	r1, r1, r5
  40258a:	bd30      	pop	{r4, r5, pc}
  40258c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402590:	4140      	adcs	r0, r0
  402592:	eb41 0101 	adc.w	r1, r1, r1
  402596:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40259a:	f1a4 0401 	sub.w	r4, r4, #1
  40259e:	d1e9      	bne.n	402574 <__adddf3+0x10c>
  4025a0:	f091 0f00 	teq	r1, #0
  4025a4:	bf04      	itt	eq
  4025a6:	4601      	moveq	r1, r0
  4025a8:	2000      	moveq	r0, #0
  4025aa:	fab1 f381 	clz	r3, r1
  4025ae:	bf08      	it	eq
  4025b0:	3320      	addeq	r3, #32
  4025b2:	f1a3 030b 	sub.w	r3, r3, #11
  4025b6:	f1b3 0220 	subs.w	r2, r3, #32
  4025ba:	da0c      	bge.n	4025d6 <__adddf3+0x16e>
  4025bc:	320c      	adds	r2, #12
  4025be:	dd08      	ble.n	4025d2 <__adddf3+0x16a>
  4025c0:	f102 0c14 	add.w	ip, r2, #20
  4025c4:	f1c2 020c 	rsb	r2, r2, #12
  4025c8:	fa01 f00c 	lsl.w	r0, r1, ip
  4025cc:	fa21 f102 	lsr.w	r1, r1, r2
  4025d0:	e00c      	b.n	4025ec <__adddf3+0x184>
  4025d2:	f102 0214 	add.w	r2, r2, #20
  4025d6:	bfd8      	it	le
  4025d8:	f1c2 0c20 	rsble	ip, r2, #32
  4025dc:	fa01 f102 	lsl.w	r1, r1, r2
  4025e0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4025e4:	bfdc      	itt	le
  4025e6:	ea41 010c 	orrle.w	r1, r1, ip
  4025ea:	4090      	lslle	r0, r2
  4025ec:	1ae4      	subs	r4, r4, r3
  4025ee:	bfa2      	ittt	ge
  4025f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4025f4:	4329      	orrge	r1, r5
  4025f6:	bd30      	popge	{r4, r5, pc}
  4025f8:	ea6f 0404 	mvn.w	r4, r4
  4025fc:	3c1f      	subs	r4, #31
  4025fe:	da1c      	bge.n	40263a <__adddf3+0x1d2>
  402600:	340c      	adds	r4, #12
  402602:	dc0e      	bgt.n	402622 <__adddf3+0x1ba>
  402604:	f104 0414 	add.w	r4, r4, #20
  402608:	f1c4 0220 	rsb	r2, r4, #32
  40260c:	fa20 f004 	lsr.w	r0, r0, r4
  402610:	fa01 f302 	lsl.w	r3, r1, r2
  402614:	ea40 0003 	orr.w	r0, r0, r3
  402618:	fa21 f304 	lsr.w	r3, r1, r4
  40261c:	ea45 0103 	orr.w	r1, r5, r3
  402620:	bd30      	pop	{r4, r5, pc}
  402622:	f1c4 040c 	rsb	r4, r4, #12
  402626:	f1c4 0220 	rsb	r2, r4, #32
  40262a:	fa20 f002 	lsr.w	r0, r0, r2
  40262e:	fa01 f304 	lsl.w	r3, r1, r4
  402632:	ea40 0003 	orr.w	r0, r0, r3
  402636:	4629      	mov	r1, r5
  402638:	bd30      	pop	{r4, r5, pc}
  40263a:	fa21 f004 	lsr.w	r0, r1, r4
  40263e:	4629      	mov	r1, r5
  402640:	bd30      	pop	{r4, r5, pc}
  402642:	f094 0f00 	teq	r4, #0
  402646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40264a:	bf06      	itte	eq
  40264c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402650:	3401      	addeq	r4, #1
  402652:	3d01      	subne	r5, #1
  402654:	e74e      	b.n	4024f4 <__adddf3+0x8c>
  402656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40265a:	bf18      	it	ne
  40265c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402660:	d029      	beq.n	4026b6 <__adddf3+0x24e>
  402662:	ea94 0f05 	teq	r4, r5
  402666:	bf08      	it	eq
  402668:	ea90 0f02 	teqeq	r0, r2
  40266c:	d005      	beq.n	40267a <__adddf3+0x212>
  40266e:	ea54 0c00 	orrs.w	ip, r4, r0
  402672:	bf04      	itt	eq
  402674:	4619      	moveq	r1, r3
  402676:	4610      	moveq	r0, r2
  402678:	bd30      	pop	{r4, r5, pc}
  40267a:	ea91 0f03 	teq	r1, r3
  40267e:	bf1e      	ittt	ne
  402680:	2100      	movne	r1, #0
  402682:	2000      	movne	r0, #0
  402684:	bd30      	popne	{r4, r5, pc}
  402686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40268a:	d105      	bne.n	402698 <__adddf3+0x230>
  40268c:	0040      	lsls	r0, r0, #1
  40268e:	4149      	adcs	r1, r1
  402690:	bf28      	it	cs
  402692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402696:	bd30      	pop	{r4, r5, pc}
  402698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40269c:	bf3c      	itt	cc
  40269e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4026a2:	bd30      	popcc	{r4, r5, pc}
  4026a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4026a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4026ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4026b0:	f04f 0000 	mov.w	r0, #0
  4026b4:	bd30      	pop	{r4, r5, pc}
  4026b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4026ba:	bf1a      	itte	ne
  4026bc:	4619      	movne	r1, r3
  4026be:	4610      	movne	r0, r2
  4026c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4026c4:	bf1c      	itt	ne
  4026c6:	460b      	movne	r3, r1
  4026c8:	4602      	movne	r2, r0
  4026ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4026ce:	bf06      	itte	eq
  4026d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4026d4:	ea91 0f03 	teqeq	r1, r3
  4026d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4026dc:	bd30      	pop	{r4, r5, pc}
  4026de:	bf00      	nop

004026e0 <__aeabi_ui2d>:
  4026e0:	f090 0f00 	teq	r0, #0
  4026e4:	bf04      	itt	eq
  4026e6:	2100      	moveq	r1, #0
  4026e8:	4770      	bxeq	lr
  4026ea:	b530      	push	{r4, r5, lr}
  4026ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4026f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4026f4:	f04f 0500 	mov.w	r5, #0
  4026f8:	f04f 0100 	mov.w	r1, #0
  4026fc:	e750      	b.n	4025a0 <__adddf3+0x138>
  4026fe:	bf00      	nop

00402700 <__aeabi_i2d>:
  402700:	f090 0f00 	teq	r0, #0
  402704:	bf04      	itt	eq
  402706:	2100      	moveq	r1, #0
  402708:	4770      	bxeq	lr
  40270a:	b530      	push	{r4, r5, lr}
  40270c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402710:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402718:	bf48      	it	mi
  40271a:	4240      	negmi	r0, r0
  40271c:	f04f 0100 	mov.w	r1, #0
  402720:	e73e      	b.n	4025a0 <__adddf3+0x138>
  402722:	bf00      	nop

00402724 <__aeabi_f2d>:
  402724:	0042      	lsls	r2, r0, #1
  402726:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40272a:	ea4f 0131 	mov.w	r1, r1, rrx
  40272e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402732:	bf1f      	itttt	ne
  402734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40273c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402740:	4770      	bxne	lr
  402742:	f092 0f00 	teq	r2, #0
  402746:	bf14      	ite	ne
  402748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40274c:	4770      	bxeq	lr
  40274e:	b530      	push	{r4, r5, lr}
  402750:	f44f 7460 	mov.w	r4, #896	; 0x380
  402754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40275c:	e720      	b.n	4025a0 <__adddf3+0x138>
  40275e:	bf00      	nop

00402760 <__aeabi_ul2d>:
  402760:	ea50 0201 	orrs.w	r2, r0, r1
  402764:	bf08      	it	eq
  402766:	4770      	bxeq	lr
  402768:	b530      	push	{r4, r5, lr}
  40276a:	f04f 0500 	mov.w	r5, #0
  40276e:	e00a      	b.n	402786 <__aeabi_l2d+0x16>

00402770 <__aeabi_l2d>:
  402770:	ea50 0201 	orrs.w	r2, r0, r1
  402774:	bf08      	it	eq
  402776:	4770      	bxeq	lr
  402778:	b530      	push	{r4, r5, lr}
  40277a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40277e:	d502      	bpl.n	402786 <__aeabi_l2d+0x16>
  402780:	4240      	negs	r0, r0
  402782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402786:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40278a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40278e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402792:	f43f aedc 	beq.w	40254e <__adddf3+0xe6>
  402796:	f04f 0203 	mov.w	r2, #3
  40279a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40279e:	bf18      	it	ne
  4027a0:	3203      	addne	r2, #3
  4027a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4027a6:	bf18      	it	ne
  4027a8:	3203      	addne	r2, #3
  4027aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4027ae:	f1c2 0320 	rsb	r3, r2, #32
  4027b2:	fa00 fc03 	lsl.w	ip, r0, r3
  4027b6:	fa20 f002 	lsr.w	r0, r0, r2
  4027ba:	fa01 fe03 	lsl.w	lr, r1, r3
  4027be:	ea40 000e 	orr.w	r0, r0, lr
  4027c2:	fa21 f102 	lsr.w	r1, r1, r2
  4027c6:	4414      	add	r4, r2
  4027c8:	e6c1      	b.n	40254e <__adddf3+0xe6>
  4027ca:	bf00      	nop

004027cc <__aeabi_dmul>:
  4027cc:	b570      	push	{r4, r5, r6, lr}
  4027ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4027d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4027d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4027da:	bf1d      	ittte	ne
  4027dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4027e0:	ea94 0f0c 	teqne	r4, ip
  4027e4:	ea95 0f0c 	teqne	r5, ip
  4027e8:	f000 f8de 	bleq	4029a8 <__aeabi_dmul+0x1dc>
  4027ec:	442c      	add	r4, r5
  4027ee:	ea81 0603 	eor.w	r6, r1, r3
  4027f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4027f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4027fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4027fe:	bf18      	it	ne
  402800:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402804:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40280c:	d038      	beq.n	402880 <__aeabi_dmul+0xb4>
  40280e:	fba0 ce02 	umull	ip, lr, r0, r2
  402812:	f04f 0500 	mov.w	r5, #0
  402816:	fbe1 e502 	umlal	lr, r5, r1, r2
  40281a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40281e:	fbe0 e503 	umlal	lr, r5, r0, r3
  402822:	f04f 0600 	mov.w	r6, #0
  402826:	fbe1 5603 	umlal	r5, r6, r1, r3
  40282a:	f09c 0f00 	teq	ip, #0
  40282e:	bf18      	it	ne
  402830:	f04e 0e01 	orrne.w	lr, lr, #1
  402834:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402838:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40283c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402840:	d204      	bcs.n	40284c <__aeabi_dmul+0x80>
  402842:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402846:	416d      	adcs	r5, r5
  402848:	eb46 0606 	adc.w	r6, r6, r6
  40284c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402850:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402854:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402858:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40285c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402860:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402864:	bf88      	it	hi
  402866:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40286a:	d81e      	bhi.n	4028aa <__aeabi_dmul+0xde>
  40286c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402870:	bf08      	it	eq
  402872:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402876:	f150 0000 	adcs.w	r0, r0, #0
  40287a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40287e:	bd70      	pop	{r4, r5, r6, pc}
  402880:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402884:	ea46 0101 	orr.w	r1, r6, r1
  402888:	ea40 0002 	orr.w	r0, r0, r2
  40288c:	ea81 0103 	eor.w	r1, r1, r3
  402890:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402894:	bfc2      	ittt	gt
  402896:	ebd4 050c 	rsbsgt	r5, r4, ip
  40289a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40289e:	bd70      	popgt	{r4, r5, r6, pc}
  4028a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4028a4:	f04f 0e00 	mov.w	lr, #0
  4028a8:	3c01      	subs	r4, #1
  4028aa:	f300 80ab 	bgt.w	402a04 <__aeabi_dmul+0x238>
  4028ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4028b2:	bfde      	ittt	le
  4028b4:	2000      	movle	r0, #0
  4028b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4028ba:	bd70      	pople	{r4, r5, r6, pc}
  4028bc:	f1c4 0400 	rsb	r4, r4, #0
  4028c0:	3c20      	subs	r4, #32
  4028c2:	da35      	bge.n	402930 <__aeabi_dmul+0x164>
  4028c4:	340c      	adds	r4, #12
  4028c6:	dc1b      	bgt.n	402900 <__aeabi_dmul+0x134>
  4028c8:	f104 0414 	add.w	r4, r4, #20
  4028cc:	f1c4 0520 	rsb	r5, r4, #32
  4028d0:	fa00 f305 	lsl.w	r3, r0, r5
  4028d4:	fa20 f004 	lsr.w	r0, r0, r4
  4028d8:	fa01 f205 	lsl.w	r2, r1, r5
  4028dc:	ea40 0002 	orr.w	r0, r0, r2
  4028e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4028e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4028e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4028ec:	fa21 f604 	lsr.w	r6, r1, r4
  4028f0:	eb42 0106 	adc.w	r1, r2, r6
  4028f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4028f8:	bf08      	it	eq
  4028fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4028fe:	bd70      	pop	{r4, r5, r6, pc}
  402900:	f1c4 040c 	rsb	r4, r4, #12
  402904:	f1c4 0520 	rsb	r5, r4, #32
  402908:	fa00 f304 	lsl.w	r3, r0, r4
  40290c:	fa20 f005 	lsr.w	r0, r0, r5
  402910:	fa01 f204 	lsl.w	r2, r1, r4
  402914:	ea40 0002 	orr.w	r0, r0, r2
  402918:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40291c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402920:	f141 0100 	adc.w	r1, r1, #0
  402924:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402928:	bf08      	it	eq
  40292a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40292e:	bd70      	pop	{r4, r5, r6, pc}
  402930:	f1c4 0520 	rsb	r5, r4, #32
  402934:	fa00 f205 	lsl.w	r2, r0, r5
  402938:	ea4e 0e02 	orr.w	lr, lr, r2
  40293c:	fa20 f304 	lsr.w	r3, r0, r4
  402940:	fa01 f205 	lsl.w	r2, r1, r5
  402944:	ea43 0302 	orr.w	r3, r3, r2
  402948:	fa21 f004 	lsr.w	r0, r1, r4
  40294c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402950:	fa21 f204 	lsr.w	r2, r1, r4
  402954:	ea20 0002 	bic.w	r0, r0, r2
  402958:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40295c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402960:	bf08      	it	eq
  402962:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402966:	bd70      	pop	{r4, r5, r6, pc}
  402968:	f094 0f00 	teq	r4, #0
  40296c:	d10f      	bne.n	40298e <__aeabi_dmul+0x1c2>
  40296e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402972:	0040      	lsls	r0, r0, #1
  402974:	eb41 0101 	adc.w	r1, r1, r1
  402978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40297c:	bf08      	it	eq
  40297e:	3c01      	subeq	r4, #1
  402980:	d0f7      	beq.n	402972 <__aeabi_dmul+0x1a6>
  402982:	ea41 0106 	orr.w	r1, r1, r6
  402986:	f095 0f00 	teq	r5, #0
  40298a:	bf18      	it	ne
  40298c:	4770      	bxne	lr
  40298e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402992:	0052      	lsls	r2, r2, #1
  402994:	eb43 0303 	adc.w	r3, r3, r3
  402998:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40299c:	bf08      	it	eq
  40299e:	3d01      	subeq	r5, #1
  4029a0:	d0f7      	beq.n	402992 <__aeabi_dmul+0x1c6>
  4029a2:	ea43 0306 	orr.w	r3, r3, r6
  4029a6:	4770      	bx	lr
  4029a8:	ea94 0f0c 	teq	r4, ip
  4029ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4029b0:	bf18      	it	ne
  4029b2:	ea95 0f0c 	teqne	r5, ip
  4029b6:	d00c      	beq.n	4029d2 <__aeabi_dmul+0x206>
  4029b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4029bc:	bf18      	it	ne
  4029be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4029c2:	d1d1      	bne.n	402968 <__aeabi_dmul+0x19c>
  4029c4:	ea81 0103 	eor.w	r1, r1, r3
  4029c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4029cc:	f04f 0000 	mov.w	r0, #0
  4029d0:	bd70      	pop	{r4, r5, r6, pc}
  4029d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4029d6:	bf06      	itte	eq
  4029d8:	4610      	moveq	r0, r2
  4029da:	4619      	moveq	r1, r3
  4029dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4029e0:	d019      	beq.n	402a16 <__aeabi_dmul+0x24a>
  4029e2:	ea94 0f0c 	teq	r4, ip
  4029e6:	d102      	bne.n	4029ee <__aeabi_dmul+0x222>
  4029e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4029ec:	d113      	bne.n	402a16 <__aeabi_dmul+0x24a>
  4029ee:	ea95 0f0c 	teq	r5, ip
  4029f2:	d105      	bne.n	402a00 <__aeabi_dmul+0x234>
  4029f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4029f8:	bf1c      	itt	ne
  4029fa:	4610      	movne	r0, r2
  4029fc:	4619      	movne	r1, r3
  4029fe:	d10a      	bne.n	402a16 <__aeabi_dmul+0x24a>
  402a00:	ea81 0103 	eor.w	r1, r1, r3
  402a04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402a08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402a0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402a10:	f04f 0000 	mov.w	r0, #0
  402a14:	bd70      	pop	{r4, r5, r6, pc}
  402a16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402a1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402a1e:	bd70      	pop	{r4, r5, r6, pc}

00402a20 <__aeabi_ddiv>:
  402a20:	b570      	push	{r4, r5, r6, lr}
  402a22:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402a26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402a2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402a2e:	bf1d      	ittte	ne
  402a30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402a34:	ea94 0f0c 	teqne	r4, ip
  402a38:	ea95 0f0c 	teqne	r5, ip
  402a3c:	f000 f8a7 	bleq	402b8e <__aeabi_ddiv+0x16e>
  402a40:	eba4 0405 	sub.w	r4, r4, r5
  402a44:	ea81 0e03 	eor.w	lr, r1, r3
  402a48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402a4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402a50:	f000 8088 	beq.w	402b64 <__aeabi_ddiv+0x144>
  402a54:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402a58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402a5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402a60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402a64:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402a68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402a6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402a70:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402a74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402a78:	429d      	cmp	r5, r3
  402a7a:	bf08      	it	eq
  402a7c:	4296      	cmpeq	r6, r2
  402a7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402a82:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402a86:	d202      	bcs.n	402a8e <__aeabi_ddiv+0x6e>
  402a88:	085b      	lsrs	r3, r3, #1
  402a8a:	ea4f 0232 	mov.w	r2, r2, rrx
  402a8e:	1ab6      	subs	r6, r6, r2
  402a90:	eb65 0503 	sbc.w	r5, r5, r3
  402a94:	085b      	lsrs	r3, r3, #1
  402a96:	ea4f 0232 	mov.w	r2, r2, rrx
  402a9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402a9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402aa2:	ebb6 0e02 	subs.w	lr, r6, r2
  402aa6:	eb75 0e03 	sbcs.w	lr, r5, r3
  402aaa:	bf22      	ittt	cs
  402aac:	1ab6      	subcs	r6, r6, r2
  402aae:	4675      	movcs	r5, lr
  402ab0:	ea40 000c 	orrcs.w	r0, r0, ip
  402ab4:	085b      	lsrs	r3, r3, #1
  402ab6:	ea4f 0232 	mov.w	r2, r2, rrx
  402aba:	ebb6 0e02 	subs.w	lr, r6, r2
  402abe:	eb75 0e03 	sbcs.w	lr, r5, r3
  402ac2:	bf22      	ittt	cs
  402ac4:	1ab6      	subcs	r6, r6, r2
  402ac6:	4675      	movcs	r5, lr
  402ac8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402acc:	085b      	lsrs	r3, r3, #1
  402ace:	ea4f 0232 	mov.w	r2, r2, rrx
  402ad2:	ebb6 0e02 	subs.w	lr, r6, r2
  402ad6:	eb75 0e03 	sbcs.w	lr, r5, r3
  402ada:	bf22      	ittt	cs
  402adc:	1ab6      	subcs	r6, r6, r2
  402ade:	4675      	movcs	r5, lr
  402ae0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402ae4:	085b      	lsrs	r3, r3, #1
  402ae6:	ea4f 0232 	mov.w	r2, r2, rrx
  402aea:	ebb6 0e02 	subs.w	lr, r6, r2
  402aee:	eb75 0e03 	sbcs.w	lr, r5, r3
  402af2:	bf22      	ittt	cs
  402af4:	1ab6      	subcs	r6, r6, r2
  402af6:	4675      	movcs	r5, lr
  402af8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402afc:	ea55 0e06 	orrs.w	lr, r5, r6
  402b00:	d018      	beq.n	402b34 <__aeabi_ddiv+0x114>
  402b02:	ea4f 1505 	mov.w	r5, r5, lsl #4
  402b06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402b0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402b0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402b12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  402b16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402b1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402b1e:	d1c0      	bne.n	402aa2 <__aeabi_ddiv+0x82>
  402b20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402b24:	d10b      	bne.n	402b3e <__aeabi_ddiv+0x11e>
  402b26:	ea41 0100 	orr.w	r1, r1, r0
  402b2a:	f04f 0000 	mov.w	r0, #0
  402b2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402b32:	e7b6      	b.n	402aa2 <__aeabi_ddiv+0x82>
  402b34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402b38:	bf04      	itt	eq
  402b3a:	4301      	orreq	r1, r0
  402b3c:	2000      	moveq	r0, #0
  402b3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402b42:	bf88      	it	hi
  402b44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402b48:	f63f aeaf 	bhi.w	4028aa <__aeabi_dmul+0xde>
  402b4c:	ebb5 0c03 	subs.w	ip, r5, r3
  402b50:	bf04      	itt	eq
  402b52:	ebb6 0c02 	subseq.w	ip, r6, r2
  402b56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402b5a:	f150 0000 	adcs.w	r0, r0, #0
  402b5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402b62:	bd70      	pop	{r4, r5, r6, pc}
  402b64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402b68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  402b6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402b70:	bfc2      	ittt	gt
  402b72:	ebd4 050c 	rsbsgt	r5, r4, ip
  402b76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402b7a:	bd70      	popgt	{r4, r5, r6, pc}
  402b7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402b80:	f04f 0e00 	mov.w	lr, #0
  402b84:	3c01      	subs	r4, #1
  402b86:	e690      	b.n	4028aa <__aeabi_dmul+0xde>
  402b88:	ea45 0e06 	orr.w	lr, r5, r6
  402b8c:	e68d      	b.n	4028aa <__aeabi_dmul+0xde>
  402b8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402b92:	ea94 0f0c 	teq	r4, ip
  402b96:	bf08      	it	eq
  402b98:	ea95 0f0c 	teqeq	r5, ip
  402b9c:	f43f af3b 	beq.w	402a16 <__aeabi_dmul+0x24a>
  402ba0:	ea94 0f0c 	teq	r4, ip
  402ba4:	d10a      	bne.n	402bbc <__aeabi_ddiv+0x19c>
  402ba6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402baa:	f47f af34 	bne.w	402a16 <__aeabi_dmul+0x24a>
  402bae:	ea95 0f0c 	teq	r5, ip
  402bb2:	f47f af25 	bne.w	402a00 <__aeabi_dmul+0x234>
  402bb6:	4610      	mov	r0, r2
  402bb8:	4619      	mov	r1, r3
  402bba:	e72c      	b.n	402a16 <__aeabi_dmul+0x24a>
  402bbc:	ea95 0f0c 	teq	r5, ip
  402bc0:	d106      	bne.n	402bd0 <__aeabi_ddiv+0x1b0>
  402bc2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402bc6:	f43f aefd 	beq.w	4029c4 <__aeabi_dmul+0x1f8>
  402bca:	4610      	mov	r0, r2
  402bcc:	4619      	mov	r1, r3
  402bce:	e722      	b.n	402a16 <__aeabi_dmul+0x24a>
  402bd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402bd4:	bf18      	it	ne
  402bd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402bda:	f47f aec5 	bne.w	402968 <__aeabi_dmul+0x19c>
  402bde:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402be2:	f47f af0d 	bne.w	402a00 <__aeabi_dmul+0x234>
  402be6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402bea:	f47f aeeb 	bne.w	4029c4 <__aeabi_dmul+0x1f8>
  402bee:	e712      	b.n	402a16 <__aeabi_dmul+0x24a>

00402bf0 <__gedf2>:
  402bf0:	f04f 3cff 	mov.w	ip, #4294967295
  402bf4:	e006      	b.n	402c04 <__cmpdf2+0x4>
  402bf6:	bf00      	nop

00402bf8 <__ledf2>:
  402bf8:	f04f 0c01 	mov.w	ip, #1
  402bfc:	e002      	b.n	402c04 <__cmpdf2+0x4>
  402bfe:	bf00      	nop

00402c00 <__cmpdf2>:
  402c00:	f04f 0c01 	mov.w	ip, #1
  402c04:	f84d cd04 	str.w	ip, [sp, #-4]!
  402c08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402c0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402c10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402c14:	bf18      	it	ne
  402c16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  402c1a:	d01b      	beq.n	402c54 <__cmpdf2+0x54>
  402c1c:	b001      	add	sp, #4
  402c1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  402c22:	bf0c      	ite	eq
  402c24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  402c28:	ea91 0f03 	teqne	r1, r3
  402c2c:	bf02      	ittt	eq
  402c2e:	ea90 0f02 	teqeq	r0, r2
  402c32:	2000      	moveq	r0, #0
  402c34:	4770      	bxeq	lr
  402c36:	f110 0f00 	cmn.w	r0, #0
  402c3a:	ea91 0f03 	teq	r1, r3
  402c3e:	bf58      	it	pl
  402c40:	4299      	cmppl	r1, r3
  402c42:	bf08      	it	eq
  402c44:	4290      	cmpeq	r0, r2
  402c46:	bf2c      	ite	cs
  402c48:	17d8      	asrcs	r0, r3, #31
  402c4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  402c4e:	f040 0001 	orr.w	r0, r0, #1
  402c52:	4770      	bx	lr
  402c54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402c58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402c5c:	d102      	bne.n	402c64 <__cmpdf2+0x64>
  402c5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  402c62:	d107      	bne.n	402c74 <__cmpdf2+0x74>
  402c64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402c68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402c6c:	d1d6      	bne.n	402c1c <__cmpdf2+0x1c>
  402c6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  402c72:	d0d3      	beq.n	402c1c <__cmpdf2+0x1c>
  402c74:	f85d 0b04 	ldr.w	r0, [sp], #4
  402c78:	4770      	bx	lr
  402c7a:	bf00      	nop

00402c7c <__aeabi_cdrcmple>:
  402c7c:	4684      	mov	ip, r0
  402c7e:	4610      	mov	r0, r2
  402c80:	4662      	mov	r2, ip
  402c82:	468c      	mov	ip, r1
  402c84:	4619      	mov	r1, r3
  402c86:	4663      	mov	r3, ip
  402c88:	e000      	b.n	402c8c <__aeabi_cdcmpeq>
  402c8a:	bf00      	nop

00402c8c <__aeabi_cdcmpeq>:
  402c8c:	b501      	push	{r0, lr}
  402c8e:	f7ff ffb7 	bl	402c00 <__cmpdf2>
  402c92:	2800      	cmp	r0, #0
  402c94:	bf48      	it	mi
  402c96:	f110 0f00 	cmnmi.w	r0, #0
  402c9a:	bd01      	pop	{r0, pc}

00402c9c <__aeabi_dcmpeq>:
  402c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
  402ca0:	f7ff fff4 	bl	402c8c <__aeabi_cdcmpeq>
  402ca4:	bf0c      	ite	eq
  402ca6:	2001      	moveq	r0, #1
  402ca8:	2000      	movne	r0, #0
  402caa:	f85d fb08 	ldr.w	pc, [sp], #8
  402cae:	bf00      	nop

00402cb0 <__aeabi_dcmplt>:
  402cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
  402cb4:	f7ff ffea 	bl	402c8c <__aeabi_cdcmpeq>
  402cb8:	bf34      	ite	cc
  402cba:	2001      	movcc	r0, #1
  402cbc:	2000      	movcs	r0, #0
  402cbe:	f85d fb08 	ldr.w	pc, [sp], #8
  402cc2:	bf00      	nop

00402cc4 <__aeabi_dcmple>:
  402cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
  402cc8:	f7ff ffe0 	bl	402c8c <__aeabi_cdcmpeq>
  402ccc:	bf94      	ite	ls
  402cce:	2001      	movls	r0, #1
  402cd0:	2000      	movhi	r0, #0
  402cd2:	f85d fb08 	ldr.w	pc, [sp], #8
  402cd6:	bf00      	nop

00402cd8 <__aeabi_dcmpge>:
  402cd8:	f84d ed08 	str.w	lr, [sp, #-8]!
  402cdc:	f7ff ffce 	bl	402c7c <__aeabi_cdrcmple>
  402ce0:	bf94      	ite	ls
  402ce2:	2001      	movls	r0, #1
  402ce4:	2000      	movhi	r0, #0
  402ce6:	f85d fb08 	ldr.w	pc, [sp], #8
  402cea:	bf00      	nop

00402cec <__aeabi_dcmpgt>:
  402cec:	f84d ed08 	str.w	lr, [sp, #-8]!
  402cf0:	f7ff ffc4 	bl	402c7c <__aeabi_cdrcmple>
  402cf4:	bf34      	ite	cc
  402cf6:	2001      	movcc	r0, #1
  402cf8:	2000      	movcs	r0, #0
  402cfa:	f85d fb08 	ldr.w	pc, [sp], #8
  402cfe:	bf00      	nop

00402d00 <__aeabi_d2iz>:
  402d00:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402d04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  402d08:	d215      	bcs.n	402d36 <__aeabi_d2iz+0x36>
  402d0a:	d511      	bpl.n	402d30 <__aeabi_d2iz+0x30>
  402d0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402d10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  402d14:	d912      	bls.n	402d3c <__aeabi_d2iz+0x3c>
  402d16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402d1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402d1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  402d22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402d26:	fa23 f002 	lsr.w	r0, r3, r2
  402d2a:	bf18      	it	ne
  402d2c:	4240      	negne	r0, r0
  402d2e:	4770      	bx	lr
  402d30:	f04f 0000 	mov.w	r0, #0
  402d34:	4770      	bx	lr
  402d36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  402d3a:	d105      	bne.n	402d48 <__aeabi_d2iz+0x48>
  402d3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  402d40:	bf08      	it	eq
  402d42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  402d46:	4770      	bx	lr
  402d48:	f04f 0000 	mov.w	r0, #0
  402d4c:	4770      	bx	lr
  402d4e:	bf00      	nop

00402d50 <__libc_init_array>:
  402d50:	b570      	push	{r4, r5, r6, lr}
  402d52:	4e0d      	ldr	r6, [pc, #52]	; (402d88 <__libc_init_array+0x38>)
  402d54:	4c0d      	ldr	r4, [pc, #52]	; (402d8c <__libc_init_array+0x3c>)
  402d56:	1ba4      	subs	r4, r4, r6
  402d58:	10a4      	asrs	r4, r4, #2
  402d5a:	2500      	movs	r5, #0
  402d5c:	42a5      	cmp	r5, r4
  402d5e:	d109      	bne.n	402d74 <__libc_init_array+0x24>
  402d60:	4e0b      	ldr	r6, [pc, #44]	; (402d90 <__libc_init_array+0x40>)
  402d62:	4c0c      	ldr	r4, [pc, #48]	; (402d94 <__libc_init_array+0x44>)
  402d64:	f003 f834 	bl	405dd0 <_init>
  402d68:	1ba4      	subs	r4, r4, r6
  402d6a:	10a4      	asrs	r4, r4, #2
  402d6c:	2500      	movs	r5, #0
  402d6e:	42a5      	cmp	r5, r4
  402d70:	d105      	bne.n	402d7e <__libc_init_array+0x2e>
  402d72:	bd70      	pop	{r4, r5, r6, pc}
  402d74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402d78:	4798      	blx	r3
  402d7a:	3501      	adds	r5, #1
  402d7c:	e7ee      	b.n	402d5c <__libc_init_array+0xc>
  402d7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402d82:	4798      	blx	r3
  402d84:	3501      	adds	r5, #1
  402d86:	e7f2      	b.n	402d6e <__libc_init_array+0x1e>
  402d88:	00405ddc 	.word	0x00405ddc
  402d8c:	00405ddc 	.word	0x00405ddc
  402d90:	00405ddc 	.word	0x00405ddc
  402d94:	00405de0 	.word	0x00405de0

00402d98 <memcpy>:
  402d98:	b510      	push	{r4, lr}
  402d9a:	1e43      	subs	r3, r0, #1
  402d9c:	440a      	add	r2, r1
  402d9e:	4291      	cmp	r1, r2
  402da0:	d100      	bne.n	402da4 <memcpy+0xc>
  402da2:	bd10      	pop	{r4, pc}
  402da4:	f811 4b01 	ldrb.w	r4, [r1], #1
  402da8:	f803 4f01 	strb.w	r4, [r3, #1]!
  402dac:	e7f7      	b.n	402d9e <memcpy+0x6>

00402dae <memset>:
  402dae:	4402      	add	r2, r0
  402db0:	4603      	mov	r3, r0
  402db2:	4293      	cmp	r3, r2
  402db4:	d100      	bne.n	402db8 <memset+0xa>
  402db6:	4770      	bx	lr
  402db8:	f803 1b01 	strb.w	r1, [r3], #1
  402dbc:	e7f9      	b.n	402db2 <memset+0x4>

00402dbe <__cvt>:
  402dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402dc2:	b088      	sub	sp, #32
  402dc4:	2b00      	cmp	r3, #0
  402dc6:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402dc8:	9912      	ldr	r1, [sp, #72]	; 0x48
  402dca:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402dcc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402dd0:	461e      	mov	r6, r3
  402dd2:	f027 0720 	bic.w	r7, r7, #32
  402dd6:	bfbb      	ittet	lt
  402dd8:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  402ddc:	461e      	movlt	r6, r3
  402dde:	2300      	movge	r3, #0
  402de0:	232d      	movlt	r3, #45	; 0x2d
  402de2:	2f46      	cmp	r7, #70	; 0x46
  402de4:	4614      	mov	r4, r2
  402de6:	700b      	strb	r3, [r1, #0]
  402de8:	d004      	beq.n	402df4 <__cvt+0x36>
  402dea:	2f45      	cmp	r7, #69	; 0x45
  402dec:	d100      	bne.n	402df0 <__cvt+0x32>
  402dee:	3501      	adds	r5, #1
  402df0:	2302      	movs	r3, #2
  402df2:	e000      	b.n	402df6 <__cvt+0x38>
  402df4:	2303      	movs	r3, #3
  402df6:	aa07      	add	r2, sp, #28
  402df8:	9204      	str	r2, [sp, #16]
  402dfa:	aa06      	add	r2, sp, #24
  402dfc:	9203      	str	r2, [sp, #12]
  402dfe:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  402e02:	4622      	mov	r2, r4
  402e04:	4633      	mov	r3, r6
  402e06:	f000 fd9b 	bl	403940 <_dtoa_r>
  402e0a:	2f47      	cmp	r7, #71	; 0x47
  402e0c:	4680      	mov	r8, r0
  402e0e:	d102      	bne.n	402e16 <__cvt+0x58>
  402e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402e12:	07db      	lsls	r3, r3, #31
  402e14:	d526      	bpl.n	402e64 <__cvt+0xa6>
  402e16:	2f46      	cmp	r7, #70	; 0x46
  402e18:	eb08 0905 	add.w	r9, r8, r5
  402e1c:	d111      	bne.n	402e42 <__cvt+0x84>
  402e1e:	f898 3000 	ldrb.w	r3, [r8]
  402e22:	2b30      	cmp	r3, #48	; 0x30
  402e24:	d10a      	bne.n	402e3c <__cvt+0x7e>
  402e26:	2200      	movs	r2, #0
  402e28:	2300      	movs	r3, #0
  402e2a:	4620      	mov	r0, r4
  402e2c:	4631      	mov	r1, r6
  402e2e:	f7ff ff35 	bl	402c9c <__aeabi_dcmpeq>
  402e32:	b918      	cbnz	r0, 402e3c <__cvt+0x7e>
  402e34:	f1c5 0501 	rsb	r5, r5, #1
  402e38:	f8ca 5000 	str.w	r5, [sl]
  402e3c:	f8da 3000 	ldr.w	r3, [sl]
  402e40:	4499      	add	r9, r3
  402e42:	2200      	movs	r2, #0
  402e44:	2300      	movs	r3, #0
  402e46:	4620      	mov	r0, r4
  402e48:	4631      	mov	r1, r6
  402e4a:	f7ff ff27 	bl	402c9c <__aeabi_dcmpeq>
  402e4e:	b938      	cbnz	r0, 402e60 <__cvt+0xa2>
  402e50:	2230      	movs	r2, #48	; 0x30
  402e52:	9b07      	ldr	r3, [sp, #28]
  402e54:	4599      	cmp	r9, r3
  402e56:	d905      	bls.n	402e64 <__cvt+0xa6>
  402e58:	1c59      	adds	r1, r3, #1
  402e5a:	9107      	str	r1, [sp, #28]
  402e5c:	701a      	strb	r2, [r3, #0]
  402e5e:	e7f8      	b.n	402e52 <__cvt+0x94>
  402e60:	f8cd 901c 	str.w	r9, [sp, #28]
  402e64:	9b07      	ldr	r3, [sp, #28]
  402e66:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402e68:	eba3 0308 	sub.w	r3, r3, r8
  402e6c:	4640      	mov	r0, r8
  402e6e:	6013      	str	r3, [r2, #0]
  402e70:	b008      	add	sp, #32
  402e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402e76 <__exponent>:
  402e76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  402e78:	4603      	mov	r3, r0
  402e7a:	2900      	cmp	r1, #0
  402e7c:	bfb8      	it	lt
  402e7e:	4249      	neglt	r1, r1
  402e80:	f803 2b02 	strb.w	r2, [r3], #2
  402e84:	bfb4      	ite	lt
  402e86:	222d      	movlt	r2, #45	; 0x2d
  402e88:	222b      	movge	r2, #43	; 0x2b
  402e8a:	2909      	cmp	r1, #9
  402e8c:	7042      	strb	r2, [r0, #1]
  402e8e:	dd20      	ble.n	402ed2 <__exponent+0x5c>
  402e90:	f10d 0207 	add.w	r2, sp, #7
  402e94:	4617      	mov	r7, r2
  402e96:	260a      	movs	r6, #10
  402e98:	fb91 f5f6 	sdiv	r5, r1, r6
  402e9c:	fb06 1115 	mls	r1, r6, r5, r1
  402ea0:	3130      	adds	r1, #48	; 0x30
  402ea2:	2d09      	cmp	r5, #9
  402ea4:	f802 1c01 	strb.w	r1, [r2, #-1]
  402ea8:	f102 34ff 	add.w	r4, r2, #4294967295
  402eac:	4629      	mov	r1, r5
  402eae:	dc09      	bgt.n	402ec4 <__exponent+0x4e>
  402eb0:	3130      	adds	r1, #48	; 0x30
  402eb2:	3a02      	subs	r2, #2
  402eb4:	f804 1c01 	strb.w	r1, [r4, #-1]
  402eb8:	42ba      	cmp	r2, r7
  402eba:	461c      	mov	r4, r3
  402ebc:	d304      	bcc.n	402ec8 <__exponent+0x52>
  402ebe:	1a20      	subs	r0, r4, r0
  402ec0:	b003      	add	sp, #12
  402ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402ec4:	4622      	mov	r2, r4
  402ec6:	e7e7      	b.n	402e98 <__exponent+0x22>
  402ec8:	f812 1b01 	ldrb.w	r1, [r2], #1
  402ecc:	f803 1b01 	strb.w	r1, [r3], #1
  402ed0:	e7f2      	b.n	402eb8 <__exponent+0x42>
  402ed2:	2230      	movs	r2, #48	; 0x30
  402ed4:	461c      	mov	r4, r3
  402ed6:	4411      	add	r1, r2
  402ed8:	f804 2b02 	strb.w	r2, [r4], #2
  402edc:	7059      	strb	r1, [r3, #1]
  402ede:	e7ee      	b.n	402ebe <__exponent+0x48>

00402ee0 <_printf_float>:
  402ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ee4:	b091      	sub	sp, #68	; 0x44
  402ee6:	460c      	mov	r4, r1
  402ee8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  402eea:	4693      	mov	fp, r2
  402eec:	461e      	mov	r6, r3
  402eee:	4605      	mov	r5, r0
  402ef0:	f001 fc74 	bl	4047dc <_localeconv_r>
  402ef4:	6803      	ldr	r3, [r0, #0]
  402ef6:	9309      	str	r3, [sp, #36]	; 0x24
  402ef8:	4618      	mov	r0, r3
  402efa:	f000 fc8d 	bl	403818 <strlen>
  402efe:	2300      	movs	r3, #0
  402f00:	930e      	str	r3, [sp, #56]	; 0x38
  402f02:	683b      	ldr	r3, [r7, #0]
  402f04:	900a      	str	r0, [sp, #40]	; 0x28
  402f06:	3307      	adds	r3, #7
  402f08:	f023 0307 	bic.w	r3, r3, #7
  402f0c:	f103 0208 	add.w	r2, r3, #8
  402f10:	f894 8018 	ldrb.w	r8, [r4, #24]
  402f14:	f8d4 a000 	ldr.w	sl, [r4]
  402f18:	603a      	str	r2, [r7, #0]
  402f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402f22:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  402f26:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  402f28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  402f2c:	930b      	str	r3, [sp, #44]	; 0x2c
  402f2e:	f04f 32ff 	mov.w	r2, #4294967295
  402f32:	4ba6      	ldr	r3, [pc, #664]	; (4031cc <_printf_float+0x2ec>)
  402f34:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f36:	4638      	mov	r0, r7
  402f38:	f002 fb80 	bl	40563c <__aeabi_dcmpun>
  402f3c:	2800      	cmp	r0, #0
  402f3e:	f040 81f7 	bne.w	403330 <_printf_float+0x450>
  402f42:	f04f 32ff 	mov.w	r2, #4294967295
  402f46:	4ba1      	ldr	r3, [pc, #644]	; (4031cc <_printf_float+0x2ec>)
  402f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f4a:	4638      	mov	r0, r7
  402f4c:	f7ff feba 	bl	402cc4 <__aeabi_dcmple>
  402f50:	2800      	cmp	r0, #0
  402f52:	f040 81ed 	bne.w	403330 <_printf_float+0x450>
  402f56:	2200      	movs	r2, #0
  402f58:	2300      	movs	r3, #0
  402f5a:	4638      	mov	r0, r7
  402f5c:	4649      	mov	r1, r9
  402f5e:	f7ff fea7 	bl	402cb0 <__aeabi_dcmplt>
  402f62:	b110      	cbz	r0, 402f6a <_printf_float+0x8a>
  402f64:	232d      	movs	r3, #45	; 0x2d
  402f66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402f6a:	4b99      	ldr	r3, [pc, #612]	; (4031d0 <_printf_float+0x2f0>)
  402f6c:	4f99      	ldr	r7, [pc, #612]	; (4031d4 <_printf_float+0x2f4>)
  402f6e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  402f72:	bf98      	it	ls
  402f74:	461f      	movls	r7, r3
  402f76:	2303      	movs	r3, #3
  402f78:	6123      	str	r3, [r4, #16]
  402f7a:	f02a 0304 	bic.w	r3, sl, #4
  402f7e:	6023      	str	r3, [r4, #0]
  402f80:	f04f 0900 	mov.w	r9, #0
  402f84:	9600      	str	r6, [sp, #0]
  402f86:	465b      	mov	r3, fp
  402f88:	aa0f      	add	r2, sp, #60	; 0x3c
  402f8a:	4621      	mov	r1, r4
  402f8c:	4628      	mov	r0, r5
  402f8e:	f000 f9df 	bl	403350 <_printf_common>
  402f92:	3001      	adds	r0, #1
  402f94:	f040 809a 	bne.w	4030cc <_printf_float+0x1ec>
  402f98:	f04f 30ff 	mov.w	r0, #4294967295
  402f9c:	b011      	add	sp, #68	; 0x44
  402f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fa2:	6862      	ldr	r2, [r4, #4]
  402fa4:	1c53      	adds	r3, r2, #1
  402fa6:	a80e      	add	r0, sp, #56	; 0x38
  402fa8:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  402fac:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  402fb0:	d141      	bne.n	403036 <_printf_float+0x156>
  402fb2:	2206      	movs	r2, #6
  402fb4:	6062      	str	r2, [r4, #4]
  402fb6:	6023      	str	r3, [r4, #0]
  402fb8:	2100      	movs	r1, #0
  402fba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  402fbe:	9301      	str	r3, [sp, #4]
  402fc0:	6863      	ldr	r3, [r4, #4]
  402fc2:	9005      	str	r0, [sp, #20]
  402fc4:	9202      	str	r2, [sp, #8]
  402fc6:	9300      	str	r3, [sp, #0]
  402fc8:	463a      	mov	r2, r7
  402fca:	464b      	mov	r3, r9
  402fcc:	9106      	str	r1, [sp, #24]
  402fce:	f8cd 8010 	str.w	r8, [sp, #16]
  402fd2:	f8cd e00c 	str.w	lr, [sp, #12]
  402fd6:	4628      	mov	r0, r5
  402fd8:	f7ff fef1 	bl	402dbe <__cvt>
  402fdc:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  402fe0:	2b47      	cmp	r3, #71	; 0x47
  402fe2:	4607      	mov	r7, r0
  402fe4:	d109      	bne.n	402ffa <_printf_float+0x11a>
  402fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402fe8:	1cd8      	adds	r0, r3, #3
  402fea:	db02      	blt.n	402ff2 <_printf_float+0x112>
  402fec:	6862      	ldr	r2, [r4, #4]
  402fee:	4293      	cmp	r3, r2
  402ff0:	dd59      	ble.n	4030a6 <_printf_float+0x1c6>
  402ff2:	f1a8 0802 	sub.w	r8, r8, #2
  402ff6:	fa5f f888 	uxtb.w	r8, r8
  402ffa:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  402ffe:	990d      	ldr	r1, [sp, #52]	; 0x34
  403000:	d836      	bhi.n	403070 <_printf_float+0x190>
  403002:	3901      	subs	r1, #1
  403004:	4642      	mov	r2, r8
  403006:	f104 0050 	add.w	r0, r4, #80	; 0x50
  40300a:	910d      	str	r1, [sp, #52]	; 0x34
  40300c:	f7ff ff33 	bl	402e76 <__exponent>
  403010:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403012:	1883      	adds	r3, r0, r2
  403014:	2a01      	cmp	r2, #1
  403016:	4681      	mov	r9, r0
  403018:	6123      	str	r3, [r4, #16]
  40301a:	dc02      	bgt.n	403022 <_printf_float+0x142>
  40301c:	6822      	ldr	r2, [r4, #0]
  40301e:	07d1      	lsls	r1, r2, #31
  403020:	d501      	bpl.n	403026 <_printf_float+0x146>
  403022:	3301      	adds	r3, #1
  403024:	6123      	str	r3, [r4, #16]
  403026:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  40302a:	2b00      	cmp	r3, #0
  40302c:	d0aa      	beq.n	402f84 <_printf_float+0xa4>
  40302e:	232d      	movs	r3, #45	; 0x2d
  403030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403034:	e7a6      	b.n	402f84 <_printf_float+0xa4>
  403036:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  40303a:	d002      	beq.n	403042 <_printf_float+0x162>
  40303c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403040:	d1b9      	bne.n	402fb6 <_printf_float+0xd6>
  403042:	b19a      	cbz	r2, 40306c <_printf_float+0x18c>
  403044:	2100      	movs	r1, #0
  403046:	9106      	str	r1, [sp, #24]
  403048:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  40304c:	e88d 000c 	stmia.w	sp, {r2, r3}
  403050:	6023      	str	r3, [r4, #0]
  403052:	9005      	str	r0, [sp, #20]
  403054:	463a      	mov	r2, r7
  403056:	f8cd 8010 	str.w	r8, [sp, #16]
  40305a:	f8cd e00c 	str.w	lr, [sp, #12]
  40305e:	9102      	str	r1, [sp, #8]
  403060:	464b      	mov	r3, r9
  403062:	4628      	mov	r0, r5
  403064:	f7ff feab 	bl	402dbe <__cvt>
  403068:	4607      	mov	r7, r0
  40306a:	e7bc      	b.n	402fe6 <_printf_float+0x106>
  40306c:	2201      	movs	r2, #1
  40306e:	e7a1      	b.n	402fb4 <_printf_float+0xd4>
  403070:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  403074:	d119      	bne.n	4030aa <_printf_float+0x1ca>
  403076:	2900      	cmp	r1, #0
  403078:	6863      	ldr	r3, [r4, #4]
  40307a:	dd0c      	ble.n	403096 <_printf_float+0x1b6>
  40307c:	6121      	str	r1, [r4, #16]
  40307e:	b913      	cbnz	r3, 403086 <_printf_float+0x1a6>
  403080:	6822      	ldr	r2, [r4, #0]
  403082:	07d2      	lsls	r2, r2, #31
  403084:	d502      	bpl.n	40308c <_printf_float+0x1ac>
  403086:	3301      	adds	r3, #1
  403088:	440b      	add	r3, r1
  40308a:	6123      	str	r3, [r4, #16]
  40308c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40308e:	65a3      	str	r3, [r4, #88]	; 0x58
  403090:	f04f 0900 	mov.w	r9, #0
  403094:	e7c7      	b.n	403026 <_printf_float+0x146>
  403096:	b913      	cbnz	r3, 40309e <_printf_float+0x1be>
  403098:	6822      	ldr	r2, [r4, #0]
  40309a:	07d0      	lsls	r0, r2, #31
  40309c:	d501      	bpl.n	4030a2 <_printf_float+0x1c2>
  40309e:	3302      	adds	r3, #2
  4030a0:	e7f3      	b.n	40308a <_printf_float+0x1aa>
  4030a2:	2301      	movs	r3, #1
  4030a4:	e7f1      	b.n	40308a <_printf_float+0x1aa>
  4030a6:	f04f 0867 	mov.w	r8, #103	; 0x67
  4030aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4030ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4030ae:	4293      	cmp	r3, r2
  4030b0:	db05      	blt.n	4030be <_printf_float+0x1de>
  4030b2:	6822      	ldr	r2, [r4, #0]
  4030b4:	6123      	str	r3, [r4, #16]
  4030b6:	07d1      	lsls	r1, r2, #31
  4030b8:	d5e8      	bpl.n	40308c <_printf_float+0x1ac>
  4030ba:	3301      	adds	r3, #1
  4030bc:	e7e5      	b.n	40308a <_printf_float+0x1aa>
  4030be:	2b00      	cmp	r3, #0
  4030c0:	bfd4      	ite	le
  4030c2:	f1c3 0302 	rsble	r3, r3, #2
  4030c6:	2301      	movgt	r3, #1
  4030c8:	4413      	add	r3, r2
  4030ca:	e7de      	b.n	40308a <_printf_float+0x1aa>
  4030cc:	6823      	ldr	r3, [r4, #0]
  4030ce:	055a      	lsls	r2, r3, #21
  4030d0:	d407      	bmi.n	4030e2 <_printf_float+0x202>
  4030d2:	6923      	ldr	r3, [r4, #16]
  4030d4:	463a      	mov	r2, r7
  4030d6:	4659      	mov	r1, fp
  4030d8:	4628      	mov	r0, r5
  4030da:	47b0      	blx	r6
  4030dc:	3001      	adds	r0, #1
  4030de:	d12a      	bne.n	403136 <_printf_float+0x256>
  4030e0:	e75a      	b.n	402f98 <_printf_float+0xb8>
  4030e2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4030e6:	f240 80dc 	bls.w	4032a2 <_printf_float+0x3c2>
  4030ea:	2200      	movs	r2, #0
  4030ec:	2300      	movs	r3, #0
  4030ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4030f2:	f7ff fdd3 	bl	402c9c <__aeabi_dcmpeq>
  4030f6:	2800      	cmp	r0, #0
  4030f8:	d039      	beq.n	40316e <_printf_float+0x28e>
  4030fa:	2301      	movs	r3, #1
  4030fc:	4a36      	ldr	r2, [pc, #216]	; (4031d8 <_printf_float+0x2f8>)
  4030fe:	4659      	mov	r1, fp
  403100:	4628      	mov	r0, r5
  403102:	47b0      	blx	r6
  403104:	3001      	adds	r0, #1
  403106:	f43f af47 	beq.w	402f98 <_printf_float+0xb8>
  40310a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40310c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40310e:	429a      	cmp	r2, r3
  403110:	db02      	blt.n	403118 <_printf_float+0x238>
  403112:	6823      	ldr	r3, [r4, #0]
  403114:	07d8      	lsls	r0, r3, #31
  403116:	d50e      	bpl.n	403136 <_printf_float+0x256>
  403118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40311a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40311c:	4659      	mov	r1, fp
  40311e:	4628      	mov	r0, r5
  403120:	47b0      	blx	r6
  403122:	3001      	adds	r0, #1
  403124:	f43f af38 	beq.w	402f98 <_printf_float+0xb8>
  403128:	2700      	movs	r7, #0
  40312a:	f104 081a 	add.w	r8, r4, #26
  40312e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403130:	3b01      	subs	r3, #1
  403132:	429f      	cmp	r7, r3
  403134:	db11      	blt.n	40315a <_printf_float+0x27a>
  403136:	6823      	ldr	r3, [r4, #0]
  403138:	079f      	lsls	r7, r3, #30
  40313a:	d508      	bpl.n	40314e <_printf_float+0x26e>
  40313c:	2700      	movs	r7, #0
  40313e:	f104 0819 	add.w	r8, r4, #25
  403142:	68e3      	ldr	r3, [r4, #12]
  403144:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403146:	1a9b      	subs	r3, r3, r2
  403148:	429f      	cmp	r7, r3
  40314a:	f2c0 80e7 	blt.w	40331c <_printf_float+0x43c>
  40314e:	68e0      	ldr	r0, [r4, #12]
  403150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403152:	4298      	cmp	r0, r3
  403154:	bfb8      	it	lt
  403156:	4618      	movlt	r0, r3
  403158:	e720      	b.n	402f9c <_printf_float+0xbc>
  40315a:	2301      	movs	r3, #1
  40315c:	4642      	mov	r2, r8
  40315e:	4659      	mov	r1, fp
  403160:	4628      	mov	r0, r5
  403162:	47b0      	blx	r6
  403164:	3001      	adds	r0, #1
  403166:	f43f af17 	beq.w	402f98 <_printf_float+0xb8>
  40316a:	3701      	adds	r7, #1
  40316c:	e7df      	b.n	40312e <_printf_float+0x24e>
  40316e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403170:	2b00      	cmp	r3, #0
  403172:	dc33      	bgt.n	4031dc <_printf_float+0x2fc>
  403174:	2301      	movs	r3, #1
  403176:	4a18      	ldr	r2, [pc, #96]	; (4031d8 <_printf_float+0x2f8>)
  403178:	4659      	mov	r1, fp
  40317a:	4628      	mov	r0, r5
  40317c:	47b0      	blx	r6
  40317e:	3001      	adds	r0, #1
  403180:	f43f af0a 	beq.w	402f98 <_printf_float+0xb8>
  403184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403186:	b923      	cbnz	r3, 403192 <_printf_float+0x2b2>
  403188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40318a:	b913      	cbnz	r3, 403192 <_printf_float+0x2b2>
  40318c:	6823      	ldr	r3, [r4, #0]
  40318e:	07d9      	lsls	r1, r3, #31
  403190:	d5d1      	bpl.n	403136 <_printf_float+0x256>
  403192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403194:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403196:	4659      	mov	r1, fp
  403198:	4628      	mov	r0, r5
  40319a:	47b0      	blx	r6
  40319c:	3001      	adds	r0, #1
  40319e:	f43f aefb 	beq.w	402f98 <_printf_float+0xb8>
  4031a2:	f04f 0800 	mov.w	r8, #0
  4031a6:	f104 091a 	add.w	r9, r4, #26
  4031aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4031ac:	425b      	negs	r3, r3
  4031ae:	4598      	cmp	r8, r3
  4031b0:	db01      	blt.n	4031b6 <_printf_float+0x2d6>
  4031b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4031b4:	e78e      	b.n	4030d4 <_printf_float+0x1f4>
  4031b6:	2301      	movs	r3, #1
  4031b8:	464a      	mov	r2, r9
  4031ba:	4659      	mov	r1, fp
  4031bc:	4628      	mov	r0, r5
  4031be:	47b0      	blx	r6
  4031c0:	3001      	adds	r0, #1
  4031c2:	f43f aee9 	beq.w	402f98 <_printf_float+0xb8>
  4031c6:	f108 0801 	add.w	r8, r8, #1
  4031ca:	e7ee      	b.n	4031aa <_printf_float+0x2ca>
  4031cc:	7fefffff 	.word	0x7fefffff
  4031d0:	00405b10 	.word	0x00405b10
  4031d4:	00405b14 	.word	0x00405b14
  4031d8:	00405b20 	.word	0x00405b20
  4031dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4031de:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4031e0:	429a      	cmp	r2, r3
  4031e2:	bfa8      	it	ge
  4031e4:	461a      	movge	r2, r3
  4031e6:	2a00      	cmp	r2, #0
  4031e8:	4690      	mov	r8, r2
  4031ea:	dc36      	bgt.n	40325a <_printf_float+0x37a>
  4031ec:	f104 031a 	add.w	r3, r4, #26
  4031f0:	f04f 0a00 	mov.w	sl, #0
  4031f4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4031f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4031fa:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  4031fe:	eba9 0308 	sub.w	r3, r9, r8
  403202:	459a      	cmp	sl, r3
  403204:	db31      	blt.n	40326a <_printf_float+0x38a>
  403206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40320a:	429a      	cmp	r2, r3
  40320c:	db38      	blt.n	403280 <_printf_float+0x3a0>
  40320e:	6823      	ldr	r3, [r4, #0]
  403210:	07da      	lsls	r2, r3, #31
  403212:	d435      	bmi.n	403280 <_printf_float+0x3a0>
  403214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403216:	990d      	ldr	r1, [sp, #52]	; 0x34
  403218:	eba3 0209 	sub.w	r2, r3, r9
  40321c:	eba3 0801 	sub.w	r8, r3, r1
  403220:	4590      	cmp	r8, r2
  403222:	bfa8      	it	ge
  403224:	4690      	movge	r8, r2
  403226:	f1b8 0f00 	cmp.w	r8, #0
  40322a:	dc31      	bgt.n	403290 <_printf_float+0x3b0>
  40322c:	2700      	movs	r7, #0
  40322e:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  403232:	f104 091a 	add.w	r9, r4, #26
  403236:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40323a:	1a9b      	subs	r3, r3, r2
  40323c:	eba3 0308 	sub.w	r3, r3, r8
  403240:	429f      	cmp	r7, r3
  403242:	f6bf af78 	bge.w	403136 <_printf_float+0x256>
  403246:	2301      	movs	r3, #1
  403248:	464a      	mov	r2, r9
  40324a:	4659      	mov	r1, fp
  40324c:	4628      	mov	r0, r5
  40324e:	47b0      	blx	r6
  403250:	3001      	adds	r0, #1
  403252:	f43f aea1 	beq.w	402f98 <_printf_float+0xb8>
  403256:	3701      	adds	r7, #1
  403258:	e7ed      	b.n	403236 <_printf_float+0x356>
  40325a:	4613      	mov	r3, r2
  40325c:	4659      	mov	r1, fp
  40325e:	463a      	mov	r2, r7
  403260:	4628      	mov	r0, r5
  403262:	47b0      	blx	r6
  403264:	3001      	adds	r0, #1
  403266:	d1c1      	bne.n	4031ec <_printf_float+0x30c>
  403268:	e696      	b.n	402f98 <_printf_float+0xb8>
  40326a:	2301      	movs	r3, #1
  40326c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40326e:	4659      	mov	r1, fp
  403270:	4628      	mov	r0, r5
  403272:	47b0      	blx	r6
  403274:	3001      	adds	r0, #1
  403276:	f43f ae8f 	beq.w	402f98 <_printf_float+0xb8>
  40327a:	f10a 0a01 	add.w	sl, sl, #1
  40327e:	e7bc      	b.n	4031fa <_printf_float+0x31a>
  403280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403282:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403284:	4659      	mov	r1, fp
  403286:	4628      	mov	r0, r5
  403288:	47b0      	blx	r6
  40328a:	3001      	adds	r0, #1
  40328c:	d1c2      	bne.n	403214 <_printf_float+0x334>
  40328e:	e683      	b.n	402f98 <_printf_float+0xb8>
  403290:	4643      	mov	r3, r8
  403292:	eb07 0209 	add.w	r2, r7, r9
  403296:	4659      	mov	r1, fp
  403298:	4628      	mov	r0, r5
  40329a:	47b0      	blx	r6
  40329c:	3001      	adds	r0, #1
  40329e:	d1c5      	bne.n	40322c <_printf_float+0x34c>
  4032a0:	e67a      	b.n	402f98 <_printf_float+0xb8>
  4032a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4032a4:	2a01      	cmp	r2, #1
  4032a6:	dc01      	bgt.n	4032ac <_printf_float+0x3cc>
  4032a8:	07db      	lsls	r3, r3, #31
  4032aa:	d534      	bpl.n	403316 <_printf_float+0x436>
  4032ac:	2301      	movs	r3, #1
  4032ae:	463a      	mov	r2, r7
  4032b0:	4659      	mov	r1, fp
  4032b2:	4628      	mov	r0, r5
  4032b4:	47b0      	blx	r6
  4032b6:	3001      	adds	r0, #1
  4032b8:	f43f ae6e 	beq.w	402f98 <_printf_float+0xb8>
  4032bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4032be:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4032c0:	4659      	mov	r1, fp
  4032c2:	4628      	mov	r0, r5
  4032c4:	47b0      	blx	r6
  4032c6:	3001      	adds	r0, #1
  4032c8:	f43f ae66 	beq.w	402f98 <_printf_float+0xb8>
  4032cc:	2200      	movs	r2, #0
  4032ce:	2300      	movs	r3, #0
  4032d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4032d4:	f7ff fce2 	bl	402c9c <__aeabi_dcmpeq>
  4032d8:	b150      	cbz	r0, 4032f0 <_printf_float+0x410>
  4032da:	2700      	movs	r7, #0
  4032dc:	f104 081a 	add.w	r8, r4, #26
  4032e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4032e2:	3b01      	subs	r3, #1
  4032e4:	429f      	cmp	r7, r3
  4032e6:	db0c      	blt.n	403302 <_printf_float+0x422>
  4032e8:	464b      	mov	r3, r9
  4032ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
  4032ee:	e6f2      	b.n	4030d6 <_printf_float+0x1f6>
  4032f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4032f2:	1c7a      	adds	r2, r7, #1
  4032f4:	3b01      	subs	r3, #1
  4032f6:	4659      	mov	r1, fp
  4032f8:	4628      	mov	r0, r5
  4032fa:	47b0      	blx	r6
  4032fc:	3001      	adds	r0, #1
  4032fe:	d1f3      	bne.n	4032e8 <_printf_float+0x408>
  403300:	e64a      	b.n	402f98 <_printf_float+0xb8>
  403302:	2301      	movs	r3, #1
  403304:	4642      	mov	r2, r8
  403306:	4659      	mov	r1, fp
  403308:	4628      	mov	r0, r5
  40330a:	47b0      	blx	r6
  40330c:	3001      	adds	r0, #1
  40330e:	f43f ae43 	beq.w	402f98 <_printf_float+0xb8>
  403312:	3701      	adds	r7, #1
  403314:	e7e4      	b.n	4032e0 <_printf_float+0x400>
  403316:	2301      	movs	r3, #1
  403318:	463a      	mov	r2, r7
  40331a:	e7ec      	b.n	4032f6 <_printf_float+0x416>
  40331c:	2301      	movs	r3, #1
  40331e:	4642      	mov	r2, r8
  403320:	4659      	mov	r1, fp
  403322:	4628      	mov	r0, r5
  403324:	47b0      	blx	r6
  403326:	3001      	adds	r0, #1
  403328:	f43f ae36 	beq.w	402f98 <_printf_float+0xb8>
  40332c:	3701      	adds	r7, #1
  40332e:	e708      	b.n	403142 <_printf_float+0x262>
  403330:	463a      	mov	r2, r7
  403332:	464b      	mov	r3, r9
  403334:	4638      	mov	r0, r7
  403336:	4649      	mov	r1, r9
  403338:	f002 f980 	bl	40563c <__aeabi_dcmpun>
  40333c:	2800      	cmp	r0, #0
  40333e:	f43f ae30 	beq.w	402fa2 <_printf_float+0xc2>
  403342:	4b01      	ldr	r3, [pc, #4]	; (403348 <_printf_float+0x468>)
  403344:	4f01      	ldr	r7, [pc, #4]	; (40334c <_printf_float+0x46c>)
  403346:	e612      	b.n	402f6e <_printf_float+0x8e>
  403348:	00405b18 	.word	0x00405b18
  40334c:	00405b1c 	.word	0x00405b1c

00403350 <_printf_common>:
  403350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403354:	4691      	mov	r9, r2
  403356:	461f      	mov	r7, r3
  403358:	688a      	ldr	r2, [r1, #8]
  40335a:	690b      	ldr	r3, [r1, #16]
  40335c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  403360:	4293      	cmp	r3, r2
  403362:	bfb8      	it	lt
  403364:	4613      	movlt	r3, r2
  403366:	f8c9 3000 	str.w	r3, [r9]
  40336a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  40336e:	4606      	mov	r6, r0
  403370:	460c      	mov	r4, r1
  403372:	b112      	cbz	r2, 40337a <_printf_common+0x2a>
  403374:	3301      	adds	r3, #1
  403376:	f8c9 3000 	str.w	r3, [r9]
  40337a:	6823      	ldr	r3, [r4, #0]
  40337c:	0699      	lsls	r1, r3, #26
  40337e:	bf42      	ittt	mi
  403380:	f8d9 3000 	ldrmi.w	r3, [r9]
  403384:	3302      	addmi	r3, #2
  403386:	f8c9 3000 	strmi.w	r3, [r9]
  40338a:	6825      	ldr	r5, [r4, #0]
  40338c:	f015 0506 	ands.w	r5, r5, #6
  403390:	d107      	bne.n	4033a2 <_printf_common+0x52>
  403392:	f104 0a19 	add.w	sl, r4, #25
  403396:	68e3      	ldr	r3, [r4, #12]
  403398:	f8d9 2000 	ldr.w	r2, [r9]
  40339c:	1a9b      	subs	r3, r3, r2
  40339e:	429d      	cmp	r5, r3
  4033a0:	db29      	blt.n	4033f6 <_printf_common+0xa6>
  4033a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4033a6:	6822      	ldr	r2, [r4, #0]
  4033a8:	3300      	adds	r3, #0
  4033aa:	bf18      	it	ne
  4033ac:	2301      	movne	r3, #1
  4033ae:	0692      	lsls	r2, r2, #26
  4033b0:	d42e      	bmi.n	403410 <_printf_common+0xc0>
  4033b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4033b6:	4639      	mov	r1, r7
  4033b8:	4630      	mov	r0, r6
  4033ba:	47c0      	blx	r8
  4033bc:	3001      	adds	r0, #1
  4033be:	d021      	beq.n	403404 <_printf_common+0xb4>
  4033c0:	6823      	ldr	r3, [r4, #0]
  4033c2:	68e5      	ldr	r5, [r4, #12]
  4033c4:	f8d9 2000 	ldr.w	r2, [r9]
  4033c8:	f003 0306 	and.w	r3, r3, #6
  4033cc:	2b04      	cmp	r3, #4
  4033ce:	bf08      	it	eq
  4033d0:	1aad      	subeq	r5, r5, r2
  4033d2:	68a3      	ldr	r3, [r4, #8]
  4033d4:	6922      	ldr	r2, [r4, #16]
  4033d6:	bf0c      	ite	eq
  4033d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  4033dc:	2500      	movne	r5, #0
  4033de:	4293      	cmp	r3, r2
  4033e0:	bfc4      	itt	gt
  4033e2:	1a9b      	subgt	r3, r3, r2
  4033e4:	18ed      	addgt	r5, r5, r3
  4033e6:	f04f 0900 	mov.w	r9, #0
  4033ea:	341a      	adds	r4, #26
  4033ec:	454d      	cmp	r5, r9
  4033ee:	d11b      	bne.n	403428 <_printf_common+0xd8>
  4033f0:	2000      	movs	r0, #0
  4033f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4033f6:	2301      	movs	r3, #1
  4033f8:	4652      	mov	r2, sl
  4033fa:	4639      	mov	r1, r7
  4033fc:	4630      	mov	r0, r6
  4033fe:	47c0      	blx	r8
  403400:	3001      	adds	r0, #1
  403402:	d103      	bne.n	40340c <_printf_common+0xbc>
  403404:	f04f 30ff 	mov.w	r0, #4294967295
  403408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40340c:	3501      	adds	r5, #1
  40340e:	e7c2      	b.n	403396 <_printf_common+0x46>
  403410:	18e1      	adds	r1, r4, r3
  403412:	1c5a      	adds	r2, r3, #1
  403414:	2030      	movs	r0, #48	; 0x30
  403416:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  40341a:	4422      	add	r2, r4
  40341c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  403420:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  403424:	3302      	adds	r3, #2
  403426:	e7c4      	b.n	4033b2 <_printf_common+0x62>
  403428:	2301      	movs	r3, #1
  40342a:	4622      	mov	r2, r4
  40342c:	4639      	mov	r1, r7
  40342e:	4630      	mov	r0, r6
  403430:	47c0      	blx	r8
  403432:	3001      	adds	r0, #1
  403434:	d0e6      	beq.n	403404 <_printf_common+0xb4>
  403436:	f109 0901 	add.w	r9, r9, #1
  40343a:	e7d7      	b.n	4033ec <_printf_common+0x9c>

0040343c <_printf_i>:
  40343c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403440:	4617      	mov	r7, r2
  403442:	7e0a      	ldrb	r2, [r1, #24]
  403444:	b085      	sub	sp, #20
  403446:	2a6e      	cmp	r2, #110	; 0x6e
  403448:	4698      	mov	r8, r3
  40344a:	4606      	mov	r6, r0
  40344c:	460c      	mov	r4, r1
  40344e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403450:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  403454:	f000 80bc 	beq.w	4035d0 <_printf_i+0x194>
  403458:	d81a      	bhi.n	403490 <_printf_i+0x54>
  40345a:	2a63      	cmp	r2, #99	; 0x63
  40345c:	d02e      	beq.n	4034bc <_printf_i+0x80>
  40345e:	d80a      	bhi.n	403476 <_printf_i+0x3a>
  403460:	2a00      	cmp	r2, #0
  403462:	f000 80c8 	beq.w	4035f6 <_printf_i+0x1ba>
  403466:	2a58      	cmp	r2, #88	; 0x58
  403468:	f000 808a 	beq.w	403580 <_printf_i+0x144>
  40346c:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403470:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  403474:	e02a      	b.n	4034cc <_printf_i+0x90>
  403476:	2a64      	cmp	r2, #100	; 0x64
  403478:	d001      	beq.n	40347e <_printf_i+0x42>
  40347a:	2a69      	cmp	r2, #105	; 0x69
  40347c:	d1f6      	bne.n	40346c <_printf_i+0x30>
  40347e:	6821      	ldr	r1, [r4, #0]
  403480:	681a      	ldr	r2, [r3, #0]
  403482:	f011 0f80 	tst.w	r1, #128	; 0x80
  403486:	d023      	beq.n	4034d0 <_printf_i+0x94>
  403488:	1d11      	adds	r1, r2, #4
  40348a:	6019      	str	r1, [r3, #0]
  40348c:	6813      	ldr	r3, [r2, #0]
  40348e:	e027      	b.n	4034e0 <_printf_i+0xa4>
  403490:	2a73      	cmp	r2, #115	; 0x73
  403492:	f000 80b4 	beq.w	4035fe <_printf_i+0x1c2>
  403496:	d808      	bhi.n	4034aa <_printf_i+0x6e>
  403498:	2a6f      	cmp	r2, #111	; 0x6f
  40349a:	d02a      	beq.n	4034f2 <_printf_i+0xb6>
  40349c:	2a70      	cmp	r2, #112	; 0x70
  40349e:	d1e5      	bne.n	40346c <_printf_i+0x30>
  4034a0:	680a      	ldr	r2, [r1, #0]
  4034a2:	f042 0220 	orr.w	r2, r2, #32
  4034a6:	600a      	str	r2, [r1, #0]
  4034a8:	e003      	b.n	4034b2 <_printf_i+0x76>
  4034aa:	2a75      	cmp	r2, #117	; 0x75
  4034ac:	d021      	beq.n	4034f2 <_printf_i+0xb6>
  4034ae:	2a78      	cmp	r2, #120	; 0x78
  4034b0:	d1dc      	bne.n	40346c <_printf_i+0x30>
  4034b2:	2278      	movs	r2, #120	; 0x78
  4034b4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  4034b8:	496e      	ldr	r1, [pc, #440]	; (403674 <_printf_i+0x238>)
  4034ba:	e064      	b.n	403586 <_printf_i+0x14a>
  4034bc:	681a      	ldr	r2, [r3, #0]
  4034be:	f101 0542 	add.w	r5, r1, #66	; 0x42
  4034c2:	1d11      	adds	r1, r2, #4
  4034c4:	6019      	str	r1, [r3, #0]
  4034c6:	6813      	ldr	r3, [r2, #0]
  4034c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4034cc:	2301      	movs	r3, #1
  4034ce:	e0a3      	b.n	403618 <_printf_i+0x1dc>
  4034d0:	f011 0f40 	tst.w	r1, #64	; 0x40
  4034d4:	f102 0104 	add.w	r1, r2, #4
  4034d8:	6019      	str	r1, [r3, #0]
  4034da:	d0d7      	beq.n	40348c <_printf_i+0x50>
  4034dc:	f9b2 3000 	ldrsh.w	r3, [r2]
  4034e0:	2b00      	cmp	r3, #0
  4034e2:	da03      	bge.n	4034ec <_printf_i+0xb0>
  4034e4:	222d      	movs	r2, #45	; 0x2d
  4034e6:	425b      	negs	r3, r3
  4034e8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  4034ec:	4962      	ldr	r1, [pc, #392]	; (403678 <_printf_i+0x23c>)
  4034ee:	220a      	movs	r2, #10
  4034f0:	e017      	b.n	403522 <_printf_i+0xe6>
  4034f2:	6820      	ldr	r0, [r4, #0]
  4034f4:	6819      	ldr	r1, [r3, #0]
  4034f6:	f010 0f80 	tst.w	r0, #128	; 0x80
  4034fa:	d003      	beq.n	403504 <_printf_i+0xc8>
  4034fc:	1d08      	adds	r0, r1, #4
  4034fe:	6018      	str	r0, [r3, #0]
  403500:	680b      	ldr	r3, [r1, #0]
  403502:	e006      	b.n	403512 <_printf_i+0xd6>
  403504:	f010 0f40 	tst.w	r0, #64	; 0x40
  403508:	f101 0004 	add.w	r0, r1, #4
  40350c:	6018      	str	r0, [r3, #0]
  40350e:	d0f7      	beq.n	403500 <_printf_i+0xc4>
  403510:	880b      	ldrh	r3, [r1, #0]
  403512:	4959      	ldr	r1, [pc, #356]	; (403678 <_printf_i+0x23c>)
  403514:	2a6f      	cmp	r2, #111	; 0x6f
  403516:	bf14      	ite	ne
  403518:	220a      	movne	r2, #10
  40351a:	2208      	moveq	r2, #8
  40351c:	2000      	movs	r0, #0
  40351e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  403522:	6865      	ldr	r5, [r4, #4]
  403524:	60a5      	str	r5, [r4, #8]
  403526:	2d00      	cmp	r5, #0
  403528:	f2c0 809c 	blt.w	403664 <_printf_i+0x228>
  40352c:	6820      	ldr	r0, [r4, #0]
  40352e:	f020 0004 	bic.w	r0, r0, #4
  403532:	6020      	str	r0, [r4, #0]
  403534:	2b00      	cmp	r3, #0
  403536:	d13f      	bne.n	4035b8 <_printf_i+0x17c>
  403538:	2d00      	cmp	r5, #0
  40353a:	f040 8095 	bne.w	403668 <_printf_i+0x22c>
  40353e:	4675      	mov	r5, lr
  403540:	2a08      	cmp	r2, #8
  403542:	d10b      	bne.n	40355c <_printf_i+0x120>
  403544:	6823      	ldr	r3, [r4, #0]
  403546:	07da      	lsls	r2, r3, #31
  403548:	d508      	bpl.n	40355c <_printf_i+0x120>
  40354a:	6923      	ldr	r3, [r4, #16]
  40354c:	6862      	ldr	r2, [r4, #4]
  40354e:	429a      	cmp	r2, r3
  403550:	bfde      	ittt	le
  403552:	2330      	movle	r3, #48	; 0x30
  403554:	f805 3c01 	strble.w	r3, [r5, #-1]
  403558:	f105 35ff 	addle.w	r5, r5, #4294967295
  40355c:	ebae 0305 	sub.w	r3, lr, r5
  403560:	6123      	str	r3, [r4, #16]
  403562:	f8cd 8000 	str.w	r8, [sp]
  403566:	463b      	mov	r3, r7
  403568:	aa03      	add	r2, sp, #12
  40356a:	4621      	mov	r1, r4
  40356c:	4630      	mov	r0, r6
  40356e:	f7ff feef 	bl	403350 <_printf_common>
  403572:	3001      	adds	r0, #1
  403574:	d155      	bne.n	403622 <_printf_i+0x1e6>
  403576:	f04f 30ff 	mov.w	r0, #4294967295
  40357a:	b005      	add	sp, #20
  40357c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403580:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  403584:	493c      	ldr	r1, [pc, #240]	; (403678 <_printf_i+0x23c>)
  403586:	6822      	ldr	r2, [r4, #0]
  403588:	6818      	ldr	r0, [r3, #0]
  40358a:	f012 0f80 	tst.w	r2, #128	; 0x80
  40358e:	f100 0504 	add.w	r5, r0, #4
  403592:	601d      	str	r5, [r3, #0]
  403594:	d001      	beq.n	40359a <_printf_i+0x15e>
  403596:	6803      	ldr	r3, [r0, #0]
  403598:	e002      	b.n	4035a0 <_printf_i+0x164>
  40359a:	0655      	lsls	r5, r2, #25
  40359c:	d5fb      	bpl.n	403596 <_printf_i+0x15a>
  40359e:	8803      	ldrh	r3, [r0, #0]
  4035a0:	07d0      	lsls	r0, r2, #31
  4035a2:	bf44      	itt	mi
  4035a4:	f042 0220 	orrmi.w	r2, r2, #32
  4035a8:	6022      	strmi	r2, [r4, #0]
  4035aa:	b91b      	cbnz	r3, 4035b4 <_printf_i+0x178>
  4035ac:	6822      	ldr	r2, [r4, #0]
  4035ae:	f022 0220 	bic.w	r2, r2, #32
  4035b2:	6022      	str	r2, [r4, #0]
  4035b4:	2210      	movs	r2, #16
  4035b6:	e7b1      	b.n	40351c <_printf_i+0xe0>
  4035b8:	4675      	mov	r5, lr
  4035ba:	fbb3 f0f2 	udiv	r0, r3, r2
  4035be:	fb02 3310 	mls	r3, r2, r0, r3
  4035c2:	5ccb      	ldrb	r3, [r1, r3]
  4035c4:	f805 3d01 	strb.w	r3, [r5, #-1]!
  4035c8:	4603      	mov	r3, r0
  4035ca:	2800      	cmp	r0, #0
  4035cc:	d1f5      	bne.n	4035ba <_printf_i+0x17e>
  4035ce:	e7b7      	b.n	403540 <_printf_i+0x104>
  4035d0:	6808      	ldr	r0, [r1, #0]
  4035d2:	681a      	ldr	r2, [r3, #0]
  4035d4:	6949      	ldr	r1, [r1, #20]
  4035d6:	f010 0f80 	tst.w	r0, #128	; 0x80
  4035da:	d004      	beq.n	4035e6 <_printf_i+0x1aa>
  4035dc:	1d10      	adds	r0, r2, #4
  4035de:	6018      	str	r0, [r3, #0]
  4035e0:	6813      	ldr	r3, [r2, #0]
  4035e2:	6019      	str	r1, [r3, #0]
  4035e4:	e007      	b.n	4035f6 <_printf_i+0x1ba>
  4035e6:	f010 0f40 	tst.w	r0, #64	; 0x40
  4035ea:	f102 0004 	add.w	r0, r2, #4
  4035ee:	6018      	str	r0, [r3, #0]
  4035f0:	6813      	ldr	r3, [r2, #0]
  4035f2:	d0f6      	beq.n	4035e2 <_printf_i+0x1a6>
  4035f4:	8019      	strh	r1, [r3, #0]
  4035f6:	2300      	movs	r3, #0
  4035f8:	6123      	str	r3, [r4, #16]
  4035fa:	4675      	mov	r5, lr
  4035fc:	e7b1      	b.n	403562 <_printf_i+0x126>
  4035fe:	681a      	ldr	r2, [r3, #0]
  403600:	1d11      	adds	r1, r2, #4
  403602:	6019      	str	r1, [r3, #0]
  403604:	6815      	ldr	r5, [r2, #0]
  403606:	6862      	ldr	r2, [r4, #4]
  403608:	2100      	movs	r1, #0
  40360a:	4628      	mov	r0, r5
  40360c:	f001 f960 	bl	4048d0 <memchr>
  403610:	b108      	cbz	r0, 403616 <_printf_i+0x1da>
  403612:	1b40      	subs	r0, r0, r5
  403614:	6060      	str	r0, [r4, #4]
  403616:	6863      	ldr	r3, [r4, #4]
  403618:	6123      	str	r3, [r4, #16]
  40361a:	2300      	movs	r3, #0
  40361c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403620:	e79f      	b.n	403562 <_printf_i+0x126>
  403622:	6923      	ldr	r3, [r4, #16]
  403624:	462a      	mov	r2, r5
  403626:	4639      	mov	r1, r7
  403628:	4630      	mov	r0, r6
  40362a:	47c0      	blx	r8
  40362c:	3001      	adds	r0, #1
  40362e:	d0a2      	beq.n	403576 <_printf_i+0x13a>
  403630:	6823      	ldr	r3, [r4, #0]
  403632:	079b      	lsls	r3, r3, #30
  403634:	d507      	bpl.n	403646 <_printf_i+0x20a>
  403636:	2500      	movs	r5, #0
  403638:	f104 0919 	add.w	r9, r4, #25
  40363c:	68e3      	ldr	r3, [r4, #12]
  40363e:	9a03      	ldr	r2, [sp, #12]
  403640:	1a9b      	subs	r3, r3, r2
  403642:	429d      	cmp	r5, r3
  403644:	db05      	blt.n	403652 <_printf_i+0x216>
  403646:	68e0      	ldr	r0, [r4, #12]
  403648:	9b03      	ldr	r3, [sp, #12]
  40364a:	4298      	cmp	r0, r3
  40364c:	bfb8      	it	lt
  40364e:	4618      	movlt	r0, r3
  403650:	e793      	b.n	40357a <_printf_i+0x13e>
  403652:	2301      	movs	r3, #1
  403654:	464a      	mov	r2, r9
  403656:	4639      	mov	r1, r7
  403658:	4630      	mov	r0, r6
  40365a:	47c0      	blx	r8
  40365c:	3001      	adds	r0, #1
  40365e:	d08a      	beq.n	403576 <_printf_i+0x13a>
  403660:	3501      	adds	r5, #1
  403662:	e7eb      	b.n	40363c <_printf_i+0x200>
  403664:	2b00      	cmp	r3, #0
  403666:	d1a7      	bne.n	4035b8 <_printf_i+0x17c>
  403668:	780b      	ldrb	r3, [r1, #0]
  40366a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  40366e:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403672:	e765      	b.n	403540 <_printf_i+0x104>
  403674:	00405b33 	.word	0x00405b33
  403678:	00405b22 	.word	0x00405b22

0040367c <iprintf>:
  40367c:	b40f      	push	{r0, r1, r2, r3}
  40367e:	4b0a      	ldr	r3, [pc, #40]	; (4036a8 <iprintf+0x2c>)
  403680:	b513      	push	{r0, r1, r4, lr}
  403682:	681c      	ldr	r4, [r3, #0]
  403684:	b124      	cbz	r4, 403690 <iprintf+0x14>
  403686:	69a3      	ldr	r3, [r4, #24]
  403688:	b913      	cbnz	r3, 403690 <iprintf+0x14>
  40368a:	4620      	mov	r0, r4
  40368c:	f001 f81c 	bl	4046c8 <__sinit>
  403690:	ab05      	add	r3, sp, #20
  403692:	9a04      	ldr	r2, [sp, #16]
  403694:	68a1      	ldr	r1, [r4, #8]
  403696:	9301      	str	r3, [sp, #4]
  403698:	4620      	mov	r0, r4
  40369a:	f001 fd1b 	bl	4050d4 <_vfiprintf_r>
  40369e:	b002      	add	sp, #8
  4036a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4036a4:	b004      	add	sp, #16
  4036a6:	4770      	bx	lr
  4036a8:	20400048 	.word	0x20400048

004036ac <setbuf>:
  4036ac:	2900      	cmp	r1, #0
  4036ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4036b2:	bf0c      	ite	eq
  4036b4:	2202      	moveq	r2, #2
  4036b6:	2200      	movne	r2, #0
  4036b8:	f000 b800 	b.w	4036bc <setvbuf>

004036bc <setvbuf>:
  4036bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4036c0:	461d      	mov	r5, r3
  4036c2:	4b51      	ldr	r3, [pc, #324]	; (403808 <setvbuf+0x14c>)
  4036c4:	681e      	ldr	r6, [r3, #0]
  4036c6:	4604      	mov	r4, r0
  4036c8:	460f      	mov	r7, r1
  4036ca:	4690      	mov	r8, r2
  4036cc:	b126      	cbz	r6, 4036d8 <setvbuf+0x1c>
  4036ce:	69b3      	ldr	r3, [r6, #24]
  4036d0:	b913      	cbnz	r3, 4036d8 <setvbuf+0x1c>
  4036d2:	4630      	mov	r0, r6
  4036d4:	f000 fff8 	bl	4046c8 <__sinit>
  4036d8:	4b4c      	ldr	r3, [pc, #304]	; (40380c <setvbuf+0x150>)
  4036da:	429c      	cmp	r4, r3
  4036dc:	d152      	bne.n	403784 <setvbuf+0xc8>
  4036de:	6874      	ldr	r4, [r6, #4]
  4036e0:	f1b8 0f02 	cmp.w	r8, #2
  4036e4:	d006      	beq.n	4036f4 <setvbuf+0x38>
  4036e6:	f1b8 0f01 	cmp.w	r8, #1
  4036ea:	f200 8089 	bhi.w	403800 <setvbuf+0x144>
  4036ee:	2d00      	cmp	r5, #0
  4036f0:	f2c0 8086 	blt.w	403800 <setvbuf+0x144>
  4036f4:	4621      	mov	r1, r4
  4036f6:	4630      	mov	r0, r6
  4036f8:	f000 ff7c 	bl	4045f4 <_fflush_r>
  4036fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4036fe:	b141      	cbz	r1, 403712 <setvbuf+0x56>
  403700:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403704:	4299      	cmp	r1, r3
  403706:	d002      	beq.n	40370e <setvbuf+0x52>
  403708:	4630      	mov	r0, r6
  40370a:	f001 fc0f 	bl	404f2c <_free_r>
  40370e:	2300      	movs	r3, #0
  403710:	6363      	str	r3, [r4, #52]	; 0x34
  403712:	2300      	movs	r3, #0
  403714:	61a3      	str	r3, [r4, #24]
  403716:	6063      	str	r3, [r4, #4]
  403718:	89a3      	ldrh	r3, [r4, #12]
  40371a:	061b      	lsls	r3, r3, #24
  40371c:	d503      	bpl.n	403726 <setvbuf+0x6a>
  40371e:	6921      	ldr	r1, [r4, #16]
  403720:	4630      	mov	r0, r6
  403722:	f001 fc03 	bl	404f2c <_free_r>
  403726:	89a3      	ldrh	r3, [r4, #12]
  403728:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40372c:	f023 0303 	bic.w	r3, r3, #3
  403730:	f1b8 0f02 	cmp.w	r8, #2
  403734:	81a3      	strh	r3, [r4, #12]
  403736:	d05d      	beq.n	4037f4 <setvbuf+0x138>
  403738:	ab01      	add	r3, sp, #4
  40373a:	466a      	mov	r2, sp
  40373c:	4621      	mov	r1, r4
  40373e:	4630      	mov	r0, r6
  403740:	f001 f85a 	bl	4047f8 <__swhatbuf_r>
  403744:	89a3      	ldrh	r3, [r4, #12]
  403746:	4318      	orrs	r0, r3
  403748:	81a0      	strh	r0, [r4, #12]
  40374a:	bb2d      	cbnz	r5, 403798 <setvbuf+0xdc>
  40374c:	9d00      	ldr	r5, [sp, #0]
  40374e:	4628      	mov	r0, r5
  403750:	f001 f8b6 	bl	4048c0 <malloc>
  403754:	4607      	mov	r7, r0
  403756:	2800      	cmp	r0, #0
  403758:	d14e      	bne.n	4037f8 <setvbuf+0x13c>
  40375a:	f8dd 9000 	ldr.w	r9, [sp]
  40375e:	45a9      	cmp	r9, r5
  403760:	d13c      	bne.n	4037dc <setvbuf+0x120>
  403762:	f04f 30ff 	mov.w	r0, #4294967295
  403766:	89a3      	ldrh	r3, [r4, #12]
  403768:	f043 0302 	orr.w	r3, r3, #2
  40376c:	81a3      	strh	r3, [r4, #12]
  40376e:	2300      	movs	r3, #0
  403770:	60a3      	str	r3, [r4, #8]
  403772:	f104 0347 	add.w	r3, r4, #71	; 0x47
  403776:	6023      	str	r3, [r4, #0]
  403778:	6123      	str	r3, [r4, #16]
  40377a:	2301      	movs	r3, #1
  40377c:	6163      	str	r3, [r4, #20]
  40377e:	b003      	add	sp, #12
  403780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403784:	4b22      	ldr	r3, [pc, #136]	; (403810 <setvbuf+0x154>)
  403786:	429c      	cmp	r4, r3
  403788:	d101      	bne.n	40378e <setvbuf+0xd2>
  40378a:	68b4      	ldr	r4, [r6, #8]
  40378c:	e7a8      	b.n	4036e0 <setvbuf+0x24>
  40378e:	4b21      	ldr	r3, [pc, #132]	; (403814 <setvbuf+0x158>)
  403790:	429c      	cmp	r4, r3
  403792:	bf08      	it	eq
  403794:	68f4      	ldreq	r4, [r6, #12]
  403796:	e7a3      	b.n	4036e0 <setvbuf+0x24>
  403798:	2f00      	cmp	r7, #0
  40379a:	d0d8      	beq.n	40374e <setvbuf+0x92>
  40379c:	69b3      	ldr	r3, [r6, #24]
  40379e:	b913      	cbnz	r3, 4037a6 <setvbuf+0xea>
  4037a0:	4630      	mov	r0, r6
  4037a2:	f000 ff91 	bl	4046c8 <__sinit>
  4037a6:	f1b8 0f01 	cmp.w	r8, #1
  4037aa:	bf08      	it	eq
  4037ac:	89a3      	ldrheq	r3, [r4, #12]
  4037ae:	6027      	str	r7, [r4, #0]
  4037b0:	bf04      	itt	eq
  4037b2:	f043 0301 	orreq.w	r3, r3, #1
  4037b6:	81a3      	strheq	r3, [r4, #12]
  4037b8:	89a3      	ldrh	r3, [r4, #12]
  4037ba:	6127      	str	r7, [r4, #16]
  4037bc:	f013 0008 	ands.w	r0, r3, #8
  4037c0:	6165      	str	r5, [r4, #20]
  4037c2:	d01b      	beq.n	4037fc <setvbuf+0x140>
  4037c4:	f013 0001 	ands.w	r0, r3, #1
  4037c8:	bf18      	it	ne
  4037ca:	426d      	negne	r5, r5
  4037cc:	f04f 0300 	mov.w	r3, #0
  4037d0:	bf1d      	ittte	ne
  4037d2:	60a3      	strne	r3, [r4, #8]
  4037d4:	61a5      	strne	r5, [r4, #24]
  4037d6:	4618      	movne	r0, r3
  4037d8:	60a5      	streq	r5, [r4, #8]
  4037da:	e7d0      	b.n	40377e <setvbuf+0xc2>
  4037dc:	4648      	mov	r0, r9
  4037de:	f001 f86f 	bl	4048c0 <malloc>
  4037e2:	4607      	mov	r7, r0
  4037e4:	2800      	cmp	r0, #0
  4037e6:	d0bc      	beq.n	403762 <setvbuf+0xa6>
  4037e8:	89a3      	ldrh	r3, [r4, #12]
  4037ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4037ee:	81a3      	strh	r3, [r4, #12]
  4037f0:	464d      	mov	r5, r9
  4037f2:	e7d3      	b.n	40379c <setvbuf+0xe0>
  4037f4:	2000      	movs	r0, #0
  4037f6:	e7b6      	b.n	403766 <setvbuf+0xaa>
  4037f8:	46a9      	mov	r9, r5
  4037fa:	e7f5      	b.n	4037e8 <setvbuf+0x12c>
  4037fc:	60a0      	str	r0, [r4, #8]
  4037fe:	e7be      	b.n	40377e <setvbuf+0xc2>
  403800:	f04f 30ff 	mov.w	r0, #4294967295
  403804:	e7bb      	b.n	40377e <setvbuf+0xc2>
  403806:	bf00      	nop
  403808:	20400048 	.word	0x20400048
  40380c:	00405b74 	.word	0x00405b74
  403810:	00405b94 	.word	0x00405b94
  403814:	00405b54 	.word	0x00405b54

00403818 <strlen>:
  403818:	4603      	mov	r3, r0
  40381a:	f813 2b01 	ldrb.w	r2, [r3], #1
  40381e:	2a00      	cmp	r2, #0
  403820:	d1fb      	bne.n	40381a <strlen+0x2>
  403822:	1a18      	subs	r0, r3, r0
  403824:	3801      	subs	r0, #1
  403826:	4770      	bx	lr

00403828 <quorem>:
  403828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40382c:	6903      	ldr	r3, [r0, #16]
  40382e:	690c      	ldr	r4, [r1, #16]
  403830:	429c      	cmp	r4, r3
  403832:	4680      	mov	r8, r0
  403834:	f300 8082 	bgt.w	40393c <quorem+0x114>
  403838:	3c01      	subs	r4, #1
  40383a:	f101 0714 	add.w	r7, r1, #20
  40383e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  403842:	f100 0614 	add.w	r6, r0, #20
  403846:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  40384a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  40384e:	eb06 030e 	add.w	r3, r6, lr
  403852:	3501      	adds	r5, #1
  403854:	eb07 090e 	add.w	r9, r7, lr
  403858:	9301      	str	r3, [sp, #4]
  40385a:	fbb0 f5f5 	udiv	r5, r0, r5
  40385e:	b395      	cbz	r5, 4038c6 <quorem+0x9e>
  403860:	f04f 0a00 	mov.w	sl, #0
  403864:	4638      	mov	r0, r7
  403866:	46b4      	mov	ip, r6
  403868:	46d3      	mov	fp, sl
  40386a:	f850 2b04 	ldr.w	r2, [r0], #4
  40386e:	b293      	uxth	r3, r2
  403870:	fb05 a303 	mla	r3, r5, r3, sl
  403874:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  403878:	b29b      	uxth	r3, r3
  40387a:	ebab 0303 	sub.w	r3, fp, r3
  40387e:	0c12      	lsrs	r2, r2, #16
  403880:	f8bc b000 	ldrh.w	fp, [ip]
  403884:	fb05 a202 	mla	r2, r5, r2, sl
  403888:	fa13 f38b 	uxtah	r3, r3, fp
  40388c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  403890:	fa1f fb82 	uxth.w	fp, r2
  403894:	f8dc 2000 	ldr.w	r2, [ip]
  403898:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  40389c:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4038a0:	b29b      	uxth	r3, r3
  4038a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4038a6:	4581      	cmp	r9, r0
  4038a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
  4038ac:	f84c 3b04 	str.w	r3, [ip], #4
  4038b0:	d2db      	bcs.n	40386a <quorem+0x42>
  4038b2:	f856 300e 	ldr.w	r3, [r6, lr]
  4038b6:	b933      	cbnz	r3, 4038c6 <quorem+0x9e>
  4038b8:	9b01      	ldr	r3, [sp, #4]
  4038ba:	3b04      	subs	r3, #4
  4038bc:	429e      	cmp	r6, r3
  4038be:	461a      	mov	r2, r3
  4038c0:	d330      	bcc.n	403924 <quorem+0xfc>
  4038c2:	f8c8 4010 	str.w	r4, [r8, #16]
  4038c6:	4640      	mov	r0, r8
  4038c8:	f001 fa5b 	bl	404d82 <__mcmp>
  4038cc:	2800      	cmp	r0, #0
  4038ce:	db25      	blt.n	40391c <quorem+0xf4>
  4038d0:	3501      	adds	r5, #1
  4038d2:	4630      	mov	r0, r6
  4038d4:	f04f 0e00 	mov.w	lr, #0
  4038d8:	f857 2b04 	ldr.w	r2, [r7], #4
  4038dc:	f8d0 c000 	ldr.w	ip, [r0]
  4038e0:	b293      	uxth	r3, r2
  4038e2:	ebae 0303 	sub.w	r3, lr, r3
  4038e6:	0c12      	lsrs	r2, r2, #16
  4038e8:	fa13 f38c 	uxtah	r3, r3, ip
  4038ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  4038f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4038f4:	b29b      	uxth	r3, r3
  4038f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4038fa:	45b9      	cmp	r9, r7
  4038fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403900:	f840 3b04 	str.w	r3, [r0], #4
  403904:	d2e8      	bcs.n	4038d8 <quorem+0xb0>
  403906:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40390a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  40390e:	b92a      	cbnz	r2, 40391c <quorem+0xf4>
  403910:	3b04      	subs	r3, #4
  403912:	429e      	cmp	r6, r3
  403914:	461a      	mov	r2, r3
  403916:	d30b      	bcc.n	403930 <quorem+0x108>
  403918:	f8c8 4010 	str.w	r4, [r8, #16]
  40391c:	4628      	mov	r0, r5
  40391e:	b003      	add	sp, #12
  403920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403924:	6812      	ldr	r2, [r2, #0]
  403926:	3b04      	subs	r3, #4
  403928:	2a00      	cmp	r2, #0
  40392a:	d1ca      	bne.n	4038c2 <quorem+0x9a>
  40392c:	3c01      	subs	r4, #1
  40392e:	e7c5      	b.n	4038bc <quorem+0x94>
  403930:	6812      	ldr	r2, [r2, #0]
  403932:	3b04      	subs	r3, #4
  403934:	2a00      	cmp	r2, #0
  403936:	d1ef      	bne.n	403918 <quorem+0xf0>
  403938:	3c01      	subs	r4, #1
  40393a:	e7ea      	b.n	403912 <quorem+0xea>
  40393c:	2000      	movs	r0, #0
  40393e:	e7ee      	b.n	40391e <quorem+0xf6>

00403940 <_dtoa_r>:
  403940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403944:	6a46      	ldr	r6, [r0, #36]	; 0x24
  403946:	b095      	sub	sp, #84	; 0x54
  403948:	4604      	mov	r4, r0
  40394a:	9d21      	ldr	r5, [sp, #132]	; 0x84
  40394c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403950:	b93e      	cbnz	r6, 403962 <_dtoa_r+0x22>
  403952:	2010      	movs	r0, #16
  403954:	f000 ffb4 	bl	4048c0 <malloc>
  403958:	6260      	str	r0, [r4, #36]	; 0x24
  40395a:	6046      	str	r6, [r0, #4]
  40395c:	6086      	str	r6, [r0, #8]
  40395e:	6006      	str	r6, [r0, #0]
  403960:	60c6      	str	r6, [r0, #12]
  403962:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403964:	6819      	ldr	r1, [r3, #0]
  403966:	b151      	cbz	r1, 40397e <_dtoa_r+0x3e>
  403968:	685a      	ldr	r2, [r3, #4]
  40396a:	604a      	str	r2, [r1, #4]
  40396c:	2301      	movs	r3, #1
  40396e:	4093      	lsls	r3, r2
  403970:	608b      	str	r3, [r1, #8]
  403972:	4620      	mov	r0, r4
  403974:	f001 f830 	bl	4049d8 <_Bfree>
  403978:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40397a:	2200      	movs	r2, #0
  40397c:	601a      	str	r2, [r3, #0]
  40397e:	9b03      	ldr	r3, [sp, #12]
  403980:	2b00      	cmp	r3, #0
  403982:	bfbf      	itttt	lt
  403984:	2301      	movlt	r3, #1
  403986:	602b      	strlt	r3, [r5, #0]
  403988:	9b03      	ldrlt	r3, [sp, #12]
  40398a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  40398e:	bfb2      	itee	lt
  403990:	9303      	strlt	r3, [sp, #12]
  403992:	2300      	movge	r3, #0
  403994:	602b      	strge	r3, [r5, #0]
  403996:	f8dd 900c 	ldr.w	r9, [sp, #12]
  40399a:	4ba9      	ldr	r3, [pc, #676]	; (403c40 <_dtoa_r+0x300>)
  40399c:	ea33 0309 	bics.w	r3, r3, r9
  4039a0:	d11b      	bne.n	4039da <_dtoa_r+0x9a>
  4039a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4039a4:	f242 730f 	movw	r3, #9999	; 0x270f
  4039a8:	6013      	str	r3, [r2, #0]
  4039aa:	9b02      	ldr	r3, [sp, #8]
  4039ac:	b923      	cbnz	r3, 4039b8 <_dtoa_r+0x78>
  4039ae:	f3c9 0013 	ubfx	r0, r9, #0, #20
  4039b2:	2800      	cmp	r0, #0
  4039b4:	f000 8581 	beq.w	4044ba <_dtoa_r+0xb7a>
  4039b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4039ba:	b953      	cbnz	r3, 4039d2 <_dtoa_r+0x92>
  4039bc:	4ba1      	ldr	r3, [pc, #644]	; (403c44 <_dtoa_r+0x304>)
  4039be:	e021      	b.n	403a04 <_dtoa_r+0xc4>
  4039c0:	4ba1      	ldr	r3, [pc, #644]	; (403c48 <_dtoa_r+0x308>)
  4039c2:	9306      	str	r3, [sp, #24]
  4039c4:	3308      	adds	r3, #8
  4039c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4039c8:	6013      	str	r3, [r2, #0]
  4039ca:	9806      	ldr	r0, [sp, #24]
  4039cc:	b015      	add	sp, #84	; 0x54
  4039ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039d2:	4b9c      	ldr	r3, [pc, #624]	; (403c44 <_dtoa_r+0x304>)
  4039d4:	9306      	str	r3, [sp, #24]
  4039d6:	3303      	adds	r3, #3
  4039d8:	e7f5      	b.n	4039c6 <_dtoa_r+0x86>
  4039da:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4039de:	2200      	movs	r2, #0
  4039e0:	2300      	movs	r3, #0
  4039e2:	4630      	mov	r0, r6
  4039e4:	4639      	mov	r1, r7
  4039e6:	f7ff f959 	bl	402c9c <__aeabi_dcmpeq>
  4039ea:	4680      	mov	r8, r0
  4039ec:	b160      	cbz	r0, 403a08 <_dtoa_r+0xc8>
  4039ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4039f0:	2301      	movs	r3, #1
  4039f2:	6013      	str	r3, [r2, #0]
  4039f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4039f6:	2b00      	cmp	r3, #0
  4039f8:	f000 855c 	beq.w	4044b4 <_dtoa_r+0xb74>
  4039fc:	4b93      	ldr	r3, [pc, #588]	; (403c4c <_dtoa_r+0x30c>)
  4039fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403a00:	6013      	str	r3, [r2, #0]
  403a02:	3b01      	subs	r3, #1
  403a04:	9306      	str	r3, [sp, #24]
  403a06:	e7e0      	b.n	4039ca <_dtoa_r+0x8a>
  403a08:	ab12      	add	r3, sp, #72	; 0x48
  403a0a:	9301      	str	r3, [sp, #4]
  403a0c:	ab13      	add	r3, sp, #76	; 0x4c
  403a0e:	9300      	str	r3, [sp, #0]
  403a10:	4632      	mov	r2, r6
  403a12:	463b      	mov	r3, r7
  403a14:	4620      	mov	r0, r4
  403a16:	f001 fa2c 	bl	404e72 <__d2b>
  403a1a:	f3c9 550a 	ubfx	r5, r9, #20, #11
  403a1e:	4682      	mov	sl, r0
  403a20:	2d00      	cmp	r5, #0
  403a22:	d07c      	beq.n	403b1e <_dtoa_r+0x1de>
  403a24:	f3c7 0313 	ubfx	r3, r7, #0, #20
  403a28:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  403a2c:	4630      	mov	r0, r6
  403a2e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403a32:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  403a36:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  403a3a:	2200      	movs	r2, #0
  403a3c:	4b84      	ldr	r3, [pc, #528]	; (403c50 <_dtoa_r+0x310>)
  403a3e:	f7fe fd11 	bl	402464 <__aeabi_dsub>
  403a42:	a379      	add	r3, pc, #484	; (adr r3, 403c28 <_dtoa_r+0x2e8>)
  403a44:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a48:	f7fe fec0 	bl	4027cc <__aeabi_dmul>
  403a4c:	a378      	add	r3, pc, #480	; (adr r3, 403c30 <_dtoa_r+0x2f0>)
  403a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a52:	f7fe fd09 	bl	402468 <__adddf3>
  403a56:	4606      	mov	r6, r0
  403a58:	4628      	mov	r0, r5
  403a5a:	460f      	mov	r7, r1
  403a5c:	f7fe fe50 	bl	402700 <__aeabi_i2d>
  403a60:	a375      	add	r3, pc, #468	; (adr r3, 403c38 <_dtoa_r+0x2f8>)
  403a62:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a66:	f7fe feb1 	bl	4027cc <__aeabi_dmul>
  403a6a:	4602      	mov	r2, r0
  403a6c:	460b      	mov	r3, r1
  403a6e:	4630      	mov	r0, r6
  403a70:	4639      	mov	r1, r7
  403a72:	f7fe fcf9 	bl	402468 <__adddf3>
  403a76:	4606      	mov	r6, r0
  403a78:	460f      	mov	r7, r1
  403a7a:	f7ff f941 	bl	402d00 <__aeabi_d2iz>
  403a7e:	2200      	movs	r2, #0
  403a80:	4683      	mov	fp, r0
  403a82:	2300      	movs	r3, #0
  403a84:	4630      	mov	r0, r6
  403a86:	4639      	mov	r1, r7
  403a88:	f7ff f912 	bl	402cb0 <__aeabi_dcmplt>
  403a8c:	b158      	cbz	r0, 403aa6 <_dtoa_r+0x166>
  403a8e:	4658      	mov	r0, fp
  403a90:	f7fe fe36 	bl	402700 <__aeabi_i2d>
  403a94:	4602      	mov	r2, r0
  403a96:	460b      	mov	r3, r1
  403a98:	4630      	mov	r0, r6
  403a9a:	4639      	mov	r1, r7
  403a9c:	f7ff f8fe 	bl	402c9c <__aeabi_dcmpeq>
  403aa0:	b908      	cbnz	r0, 403aa6 <_dtoa_r+0x166>
  403aa2:	f10b 3bff 	add.w	fp, fp, #4294967295
  403aa6:	f1bb 0f16 	cmp.w	fp, #22
  403aaa:	d857      	bhi.n	403b5c <_dtoa_r+0x21c>
  403aac:	4969      	ldr	r1, [pc, #420]	; (403c54 <_dtoa_r+0x314>)
  403aae:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  403ab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
  403aba:	f7ff f917 	bl	402cec <__aeabi_dcmpgt>
  403abe:	2800      	cmp	r0, #0
  403ac0:	d04e      	beq.n	403b60 <_dtoa_r+0x220>
  403ac2:	f10b 3bff 	add.w	fp, fp, #4294967295
  403ac6:	2300      	movs	r3, #0
  403ac8:	930d      	str	r3, [sp, #52]	; 0x34
  403aca:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403acc:	1b5d      	subs	r5, r3, r5
  403ace:	1e6b      	subs	r3, r5, #1
  403ad0:	9307      	str	r3, [sp, #28]
  403ad2:	bf43      	ittte	mi
  403ad4:	2300      	movmi	r3, #0
  403ad6:	f1c5 0801 	rsbmi	r8, r5, #1
  403ada:	9307      	strmi	r3, [sp, #28]
  403adc:	f04f 0800 	movpl.w	r8, #0
  403ae0:	f1bb 0f00 	cmp.w	fp, #0
  403ae4:	db3e      	blt.n	403b64 <_dtoa_r+0x224>
  403ae6:	9b07      	ldr	r3, [sp, #28]
  403ae8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  403aec:	445b      	add	r3, fp
  403aee:	9307      	str	r3, [sp, #28]
  403af0:	2300      	movs	r3, #0
  403af2:	9308      	str	r3, [sp, #32]
  403af4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403af6:	2b09      	cmp	r3, #9
  403af8:	f200 80b0 	bhi.w	403c5c <_dtoa_r+0x31c>
  403afc:	2b05      	cmp	r3, #5
  403afe:	bfc4      	itt	gt
  403b00:	3b04      	subgt	r3, #4
  403b02:	931e      	strgt	r3, [sp, #120]	; 0x78
  403b04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403b06:	f1a3 0302 	sub.w	r3, r3, #2
  403b0a:	bfcc      	ite	gt
  403b0c:	2600      	movgt	r6, #0
  403b0e:	2601      	movle	r6, #1
  403b10:	2b03      	cmp	r3, #3
  403b12:	f200 80af 	bhi.w	403c74 <_dtoa_r+0x334>
  403b16:	e8df f003 	tbb	[pc, r3]
  403b1a:	8583      	.short	0x8583
  403b1c:	772d      	.short	0x772d
  403b1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403b20:	9d12      	ldr	r5, [sp, #72]	; 0x48
  403b22:	441d      	add	r5, r3
  403b24:	f205 4332 	addw	r3, r5, #1074	; 0x432
  403b28:	2b20      	cmp	r3, #32
  403b2a:	dd11      	ble.n	403b50 <_dtoa_r+0x210>
  403b2c:	9a02      	ldr	r2, [sp, #8]
  403b2e:	f205 4012 	addw	r0, r5, #1042	; 0x412
  403b32:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  403b36:	fa22 f000 	lsr.w	r0, r2, r0
  403b3a:	fa09 f303 	lsl.w	r3, r9, r3
  403b3e:	4318      	orrs	r0, r3
  403b40:	f7fe fdce 	bl	4026e0 <__aeabi_ui2d>
  403b44:	2301      	movs	r3, #1
  403b46:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403b4a:	3d01      	subs	r5, #1
  403b4c:	9310      	str	r3, [sp, #64]	; 0x40
  403b4e:	e774      	b.n	403a3a <_dtoa_r+0xfa>
  403b50:	f1c3 0020 	rsb	r0, r3, #32
  403b54:	9b02      	ldr	r3, [sp, #8]
  403b56:	fa03 f000 	lsl.w	r0, r3, r0
  403b5a:	e7f1      	b.n	403b40 <_dtoa_r+0x200>
  403b5c:	2301      	movs	r3, #1
  403b5e:	e7b3      	b.n	403ac8 <_dtoa_r+0x188>
  403b60:	900d      	str	r0, [sp, #52]	; 0x34
  403b62:	e7b2      	b.n	403aca <_dtoa_r+0x18a>
  403b64:	f1cb 0300 	rsb	r3, fp, #0
  403b68:	9308      	str	r3, [sp, #32]
  403b6a:	2300      	movs	r3, #0
  403b6c:	eba8 080b 	sub.w	r8, r8, fp
  403b70:	930c      	str	r3, [sp, #48]	; 0x30
  403b72:	e7bf      	b.n	403af4 <_dtoa_r+0x1b4>
  403b74:	2301      	movs	r3, #1
  403b76:	9309      	str	r3, [sp, #36]	; 0x24
  403b78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403b7a:	2b00      	cmp	r3, #0
  403b7c:	dd7d      	ble.n	403c7a <_dtoa_r+0x33a>
  403b7e:	9304      	str	r3, [sp, #16]
  403b80:	4699      	mov	r9, r3
  403b82:	6a65      	ldr	r5, [r4, #36]	; 0x24
  403b84:	2200      	movs	r2, #0
  403b86:	606a      	str	r2, [r5, #4]
  403b88:	2104      	movs	r1, #4
  403b8a:	f101 0214 	add.w	r2, r1, #20
  403b8e:	429a      	cmp	r2, r3
  403b90:	d978      	bls.n	403c84 <_dtoa_r+0x344>
  403b92:	6869      	ldr	r1, [r5, #4]
  403b94:	4620      	mov	r0, r4
  403b96:	f000 feeb 	bl	404970 <_Balloc>
  403b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403b9c:	6028      	str	r0, [r5, #0]
  403b9e:	681b      	ldr	r3, [r3, #0]
  403ba0:	9306      	str	r3, [sp, #24]
  403ba2:	f1b9 0f0e 	cmp.w	r9, #14
  403ba6:	f200 80ee 	bhi.w	403d86 <_dtoa_r+0x446>
  403baa:	2e00      	cmp	r6, #0
  403bac:	f000 80eb 	beq.w	403d86 <_dtoa_r+0x446>
  403bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403bb4:	f1bb 0f00 	cmp.w	fp, #0
  403bb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  403bbc:	dd77      	ble.n	403cae <_dtoa_r+0x36e>
  403bbe:	4a25      	ldr	r2, [pc, #148]	; (403c54 <_dtoa_r+0x314>)
  403bc0:	f00b 030f 	and.w	r3, fp, #15
  403bc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
  403bcc:	ea4f 162b 	mov.w	r6, fp, asr #4
  403bd0:	06f0      	lsls	r0, r6, #27
  403bd2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  403bd6:	d55a      	bpl.n	403c8e <_dtoa_r+0x34e>
  403bd8:	4b1f      	ldr	r3, [pc, #124]	; (403c58 <_dtoa_r+0x318>)
  403bda:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403bde:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403be2:	f7fe ff1d 	bl	402a20 <__aeabi_ddiv>
  403be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403bea:	f006 060f 	and.w	r6, r6, #15
  403bee:	2503      	movs	r5, #3
  403bf0:	4f19      	ldr	r7, [pc, #100]	; (403c58 <_dtoa_r+0x318>)
  403bf2:	2e00      	cmp	r6, #0
  403bf4:	d14d      	bne.n	403c92 <_dtoa_r+0x352>
  403bf6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403bfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403bfe:	f7fe ff0f 	bl	402a20 <__aeabi_ddiv>
  403c02:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403c06:	e06c      	b.n	403ce2 <_dtoa_r+0x3a2>
  403c08:	2301      	movs	r3, #1
  403c0a:	9309      	str	r3, [sp, #36]	; 0x24
  403c0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403c0e:	445b      	add	r3, fp
  403c10:	f103 0901 	add.w	r9, r3, #1
  403c14:	9304      	str	r3, [sp, #16]
  403c16:	464b      	mov	r3, r9
  403c18:	2b01      	cmp	r3, #1
  403c1a:	bfb8      	it	lt
  403c1c:	2301      	movlt	r3, #1
  403c1e:	e7b0      	b.n	403b82 <_dtoa_r+0x242>
  403c20:	2300      	movs	r3, #0
  403c22:	e7a8      	b.n	403b76 <_dtoa_r+0x236>
  403c24:	2300      	movs	r3, #0
  403c26:	e7f0      	b.n	403c0a <_dtoa_r+0x2ca>
  403c28:	636f4361 	.word	0x636f4361
  403c2c:	3fd287a7 	.word	0x3fd287a7
  403c30:	8b60c8b3 	.word	0x8b60c8b3
  403c34:	3fc68a28 	.word	0x3fc68a28
  403c38:	509f79fb 	.word	0x509f79fb
  403c3c:	3fd34413 	.word	0x3fd34413
  403c40:	7ff00000 	.word	0x7ff00000
  403c44:	00405b4d 	.word	0x00405b4d
  403c48:	00405b44 	.word	0x00405b44
  403c4c:	00405b21 	.word	0x00405b21
  403c50:	3ff80000 	.word	0x3ff80000
  403c54:	00405be0 	.word	0x00405be0
  403c58:	00405bb8 	.word	0x00405bb8
  403c5c:	2601      	movs	r6, #1
  403c5e:	2300      	movs	r3, #0
  403c60:	931e      	str	r3, [sp, #120]	; 0x78
  403c62:	9609      	str	r6, [sp, #36]	; 0x24
  403c64:	f04f 33ff 	mov.w	r3, #4294967295
  403c68:	9304      	str	r3, [sp, #16]
  403c6a:	4699      	mov	r9, r3
  403c6c:	2200      	movs	r2, #0
  403c6e:	2312      	movs	r3, #18
  403c70:	921f      	str	r2, [sp, #124]	; 0x7c
  403c72:	e786      	b.n	403b82 <_dtoa_r+0x242>
  403c74:	2301      	movs	r3, #1
  403c76:	9309      	str	r3, [sp, #36]	; 0x24
  403c78:	e7f4      	b.n	403c64 <_dtoa_r+0x324>
  403c7a:	2301      	movs	r3, #1
  403c7c:	9304      	str	r3, [sp, #16]
  403c7e:	4699      	mov	r9, r3
  403c80:	461a      	mov	r2, r3
  403c82:	e7f5      	b.n	403c70 <_dtoa_r+0x330>
  403c84:	686a      	ldr	r2, [r5, #4]
  403c86:	3201      	adds	r2, #1
  403c88:	606a      	str	r2, [r5, #4]
  403c8a:	0049      	lsls	r1, r1, #1
  403c8c:	e77d      	b.n	403b8a <_dtoa_r+0x24a>
  403c8e:	2502      	movs	r5, #2
  403c90:	e7ae      	b.n	403bf0 <_dtoa_r+0x2b0>
  403c92:	07f1      	lsls	r1, r6, #31
  403c94:	d508      	bpl.n	403ca8 <_dtoa_r+0x368>
  403c96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
  403c9e:	f7fe fd95 	bl	4027cc <__aeabi_dmul>
  403ca2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403ca6:	3501      	adds	r5, #1
  403ca8:	1076      	asrs	r6, r6, #1
  403caa:	3708      	adds	r7, #8
  403cac:	e7a1      	b.n	403bf2 <_dtoa_r+0x2b2>
  403cae:	f000 80a5 	beq.w	403dfc <_dtoa_r+0x4bc>
  403cb2:	f1cb 0600 	rsb	r6, fp, #0
  403cb6:	4ba3      	ldr	r3, [pc, #652]	; (403f44 <_dtoa_r+0x604>)
  403cb8:	4fa3      	ldr	r7, [pc, #652]	; (403f48 <_dtoa_r+0x608>)
  403cba:	f006 020f 	and.w	r2, r6, #15
  403cbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
  403cc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403cca:	f7fe fd7f 	bl	4027cc <__aeabi_dmul>
  403cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403cd2:	1136      	asrs	r6, r6, #4
  403cd4:	2300      	movs	r3, #0
  403cd6:	2502      	movs	r5, #2
  403cd8:	2e00      	cmp	r6, #0
  403cda:	f040 8084 	bne.w	403de6 <_dtoa_r+0x4a6>
  403cde:	2b00      	cmp	r3, #0
  403ce0:	d18f      	bne.n	403c02 <_dtoa_r+0x2c2>
  403ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403ce4:	2b00      	cmp	r3, #0
  403ce6:	f000 808b 	beq.w	403e00 <_dtoa_r+0x4c0>
  403cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403cee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  403cf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403cf6:	2200      	movs	r2, #0
  403cf8:	4b94      	ldr	r3, [pc, #592]	; (403f4c <_dtoa_r+0x60c>)
  403cfa:	f7fe ffd9 	bl	402cb0 <__aeabi_dcmplt>
  403cfe:	2800      	cmp	r0, #0
  403d00:	d07e      	beq.n	403e00 <_dtoa_r+0x4c0>
  403d02:	f1b9 0f00 	cmp.w	r9, #0
  403d06:	d07b      	beq.n	403e00 <_dtoa_r+0x4c0>
  403d08:	9b04      	ldr	r3, [sp, #16]
  403d0a:	2b00      	cmp	r3, #0
  403d0c:	dd37      	ble.n	403d7e <_dtoa_r+0x43e>
  403d0e:	2200      	movs	r2, #0
  403d10:	4b8f      	ldr	r3, [pc, #572]	; (403f50 <_dtoa_r+0x610>)
  403d12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403d16:	f7fe fd59 	bl	4027cc <__aeabi_dmul>
  403d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403d1e:	9e04      	ldr	r6, [sp, #16]
  403d20:	f10b 37ff 	add.w	r7, fp, #4294967295
  403d24:	3501      	adds	r5, #1
  403d26:	4628      	mov	r0, r5
  403d28:	f7fe fcea 	bl	402700 <__aeabi_i2d>
  403d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403d30:	f7fe fd4c 	bl	4027cc <__aeabi_dmul>
  403d34:	4b87      	ldr	r3, [pc, #540]	; (403f54 <_dtoa_r+0x614>)
  403d36:	2200      	movs	r2, #0
  403d38:	f7fe fb96 	bl	402468 <__adddf3>
  403d3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403d42:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  403d46:	950b      	str	r5, [sp, #44]	; 0x2c
  403d48:	2e00      	cmp	r6, #0
  403d4a:	d15c      	bne.n	403e06 <_dtoa_r+0x4c6>
  403d4c:	2200      	movs	r2, #0
  403d4e:	4b82      	ldr	r3, [pc, #520]	; (403f58 <_dtoa_r+0x618>)
  403d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403d54:	f7fe fb86 	bl	402464 <__aeabi_dsub>
  403d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403d5a:	462b      	mov	r3, r5
  403d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403d60:	f7fe ffc4 	bl	402cec <__aeabi_dcmpgt>
  403d64:	2800      	cmp	r0, #0
  403d66:	f040 82f7 	bne.w	404358 <_dtoa_r+0xa18>
  403d6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403d6c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  403d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403d74:	f7fe ff9c 	bl	402cb0 <__aeabi_dcmplt>
  403d78:	2800      	cmp	r0, #0
  403d7a:	f040 82eb 	bne.w	404354 <_dtoa_r+0xa14>
  403d7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  403d82:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403d86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403d88:	2b00      	cmp	r3, #0
  403d8a:	f2c0 8151 	blt.w	404030 <_dtoa_r+0x6f0>
  403d8e:	f1bb 0f0e 	cmp.w	fp, #14
  403d92:	f300 814d 	bgt.w	404030 <_dtoa_r+0x6f0>
  403d96:	4b6b      	ldr	r3, [pc, #428]	; (403f44 <_dtoa_r+0x604>)
  403d98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  403d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403da0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  403da4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403da6:	2b00      	cmp	r3, #0
  403da8:	f280 80da 	bge.w	403f60 <_dtoa_r+0x620>
  403dac:	f1b9 0f00 	cmp.w	r9, #0
  403db0:	f300 80d6 	bgt.w	403f60 <_dtoa_r+0x620>
  403db4:	f040 82cd 	bne.w	404352 <_dtoa_r+0xa12>
  403db8:	2200      	movs	r2, #0
  403dba:	4b67      	ldr	r3, [pc, #412]	; (403f58 <_dtoa_r+0x618>)
  403dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403dc0:	f7fe fd04 	bl	4027cc <__aeabi_dmul>
  403dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403dc8:	f7fe ff86 	bl	402cd8 <__aeabi_dcmpge>
  403dcc:	464e      	mov	r6, r9
  403dce:	464f      	mov	r7, r9
  403dd0:	2800      	cmp	r0, #0
  403dd2:	f040 82a4 	bne.w	40431e <_dtoa_r+0x9de>
  403dd6:	9b06      	ldr	r3, [sp, #24]
  403dd8:	9a06      	ldr	r2, [sp, #24]
  403dda:	1c5d      	adds	r5, r3, #1
  403ddc:	2331      	movs	r3, #49	; 0x31
  403dde:	7013      	strb	r3, [r2, #0]
  403de0:	f10b 0b01 	add.w	fp, fp, #1
  403de4:	e29f      	b.n	404326 <_dtoa_r+0x9e6>
  403de6:	07f2      	lsls	r2, r6, #31
  403de8:	d505      	bpl.n	403df6 <_dtoa_r+0x4b6>
  403dea:	e9d7 2300 	ldrd	r2, r3, [r7]
  403dee:	f7fe fced 	bl	4027cc <__aeabi_dmul>
  403df2:	3501      	adds	r5, #1
  403df4:	2301      	movs	r3, #1
  403df6:	1076      	asrs	r6, r6, #1
  403df8:	3708      	adds	r7, #8
  403dfa:	e76d      	b.n	403cd8 <_dtoa_r+0x398>
  403dfc:	2502      	movs	r5, #2
  403dfe:	e770      	b.n	403ce2 <_dtoa_r+0x3a2>
  403e00:	465f      	mov	r7, fp
  403e02:	464e      	mov	r6, r9
  403e04:	e78f      	b.n	403d26 <_dtoa_r+0x3e6>
  403e06:	9a06      	ldr	r2, [sp, #24]
  403e08:	4b4e      	ldr	r3, [pc, #312]	; (403f44 <_dtoa_r+0x604>)
  403e0a:	4432      	add	r2, r6
  403e0c:	9211      	str	r2, [sp, #68]	; 0x44
  403e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403e10:	1e71      	subs	r1, r6, #1
  403e12:	2a00      	cmp	r2, #0
  403e14:	d048      	beq.n	403ea8 <_dtoa_r+0x568>
  403e16:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  403e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e1e:	2000      	movs	r0, #0
  403e20:	494e      	ldr	r1, [pc, #312]	; (403f5c <_dtoa_r+0x61c>)
  403e22:	f7fe fdfd 	bl	402a20 <__aeabi_ddiv>
  403e26:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403e2a:	f7fe fb1b 	bl	402464 <__aeabi_dsub>
  403e2e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403e32:	9d06      	ldr	r5, [sp, #24]
  403e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403e38:	f7fe ff62 	bl	402d00 <__aeabi_d2iz>
  403e3c:	4606      	mov	r6, r0
  403e3e:	f7fe fc5f 	bl	402700 <__aeabi_i2d>
  403e42:	4602      	mov	r2, r0
  403e44:	460b      	mov	r3, r1
  403e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403e4a:	f7fe fb0b 	bl	402464 <__aeabi_dsub>
  403e4e:	3630      	adds	r6, #48	; 0x30
  403e50:	f805 6b01 	strb.w	r6, [r5], #1
  403e54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403e5c:	f7fe ff28 	bl	402cb0 <__aeabi_dcmplt>
  403e60:	2800      	cmp	r0, #0
  403e62:	d165      	bne.n	403f30 <_dtoa_r+0x5f0>
  403e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403e68:	2000      	movs	r0, #0
  403e6a:	4938      	ldr	r1, [pc, #224]	; (403f4c <_dtoa_r+0x60c>)
  403e6c:	f7fe fafa 	bl	402464 <__aeabi_dsub>
  403e70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403e74:	f7fe ff1c 	bl	402cb0 <__aeabi_dcmplt>
  403e78:	2800      	cmp	r0, #0
  403e7a:	f040 80b9 	bne.w	403ff0 <_dtoa_r+0x6b0>
  403e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403e80:	429d      	cmp	r5, r3
  403e82:	f43f af7c 	beq.w	403d7e <_dtoa_r+0x43e>
  403e86:	2200      	movs	r2, #0
  403e88:	4b31      	ldr	r3, [pc, #196]	; (403f50 <_dtoa_r+0x610>)
  403e8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403e8e:	f7fe fc9d 	bl	4027cc <__aeabi_dmul>
  403e92:	2200      	movs	r2, #0
  403e94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403e98:	4b2d      	ldr	r3, [pc, #180]	; (403f50 <_dtoa_r+0x610>)
  403e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403e9e:	f7fe fc95 	bl	4027cc <__aeabi_dmul>
  403ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403ea6:	e7c5      	b.n	403e34 <_dtoa_r+0x4f4>
  403ea8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  403eac:	e9d1 0100 	ldrd	r0, r1, [r1]
  403eb0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403eb4:	f7fe fc8a 	bl	4027cc <__aeabi_dmul>
  403eb8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403ebc:	9d06      	ldr	r5, [sp, #24]
  403ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403ec2:	f7fe ff1d 	bl	402d00 <__aeabi_d2iz>
  403ec6:	4606      	mov	r6, r0
  403ec8:	f7fe fc1a 	bl	402700 <__aeabi_i2d>
  403ecc:	3630      	adds	r6, #48	; 0x30
  403ece:	4602      	mov	r2, r0
  403ed0:	460b      	mov	r3, r1
  403ed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403ed6:	f7fe fac5 	bl	402464 <__aeabi_dsub>
  403eda:	f805 6b01 	strb.w	r6, [r5], #1
  403ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403ee0:	42ab      	cmp	r3, r5
  403ee2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403ee6:	f04f 0200 	mov.w	r2, #0
  403eea:	d125      	bne.n	403f38 <_dtoa_r+0x5f8>
  403eec:	4b1b      	ldr	r3, [pc, #108]	; (403f5c <_dtoa_r+0x61c>)
  403eee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403ef2:	f7fe fab9 	bl	402468 <__adddf3>
  403ef6:	4602      	mov	r2, r0
  403ef8:	460b      	mov	r3, r1
  403efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403efe:	f7fe fef5 	bl	402cec <__aeabi_dcmpgt>
  403f02:	2800      	cmp	r0, #0
  403f04:	d174      	bne.n	403ff0 <_dtoa_r+0x6b0>
  403f06:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403f0a:	2000      	movs	r0, #0
  403f0c:	4913      	ldr	r1, [pc, #76]	; (403f5c <_dtoa_r+0x61c>)
  403f0e:	f7fe faa9 	bl	402464 <__aeabi_dsub>
  403f12:	4602      	mov	r2, r0
  403f14:	460b      	mov	r3, r1
  403f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403f1a:	f7fe fec9 	bl	402cb0 <__aeabi_dcmplt>
  403f1e:	2800      	cmp	r0, #0
  403f20:	f43f af2d 	beq.w	403d7e <_dtoa_r+0x43e>
  403f24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  403f28:	2b30      	cmp	r3, #48	; 0x30
  403f2a:	f105 32ff 	add.w	r2, r5, #4294967295
  403f2e:	d001      	beq.n	403f34 <_dtoa_r+0x5f4>
  403f30:	46bb      	mov	fp, r7
  403f32:	e04c      	b.n	403fce <_dtoa_r+0x68e>
  403f34:	4615      	mov	r5, r2
  403f36:	e7f5      	b.n	403f24 <_dtoa_r+0x5e4>
  403f38:	4b05      	ldr	r3, [pc, #20]	; (403f50 <_dtoa_r+0x610>)
  403f3a:	f7fe fc47 	bl	4027cc <__aeabi_dmul>
  403f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403f42:	e7bc      	b.n	403ebe <_dtoa_r+0x57e>
  403f44:	00405be0 	.word	0x00405be0
  403f48:	00405bb8 	.word	0x00405bb8
  403f4c:	3ff00000 	.word	0x3ff00000
  403f50:	40240000 	.word	0x40240000
  403f54:	401c0000 	.word	0x401c0000
  403f58:	40140000 	.word	0x40140000
  403f5c:	3fe00000 	.word	0x3fe00000
  403f60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  403f64:	9d06      	ldr	r5, [sp, #24]
  403f66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403f6a:	4630      	mov	r0, r6
  403f6c:	4639      	mov	r1, r7
  403f6e:	f7fe fd57 	bl	402a20 <__aeabi_ddiv>
  403f72:	f7fe fec5 	bl	402d00 <__aeabi_d2iz>
  403f76:	4680      	mov	r8, r0
  403f78:	f7fe fbc2 	bl	402700 <__aeabi_i2d>
  403f7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403f80:	f7fe fc24 	bl	4027cc <__aeabi_dmul>
  403f84:	4602      	mov	r2, r0
  403f86:	460b      	mov	r3, r1
  403f88:	4630      	mov	r0, r6
  403f8a:	4639      	mov	r1, r7
  403f8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
  403f90:	f7fe fa68 	bl	402464 <__aeabi_dsub>
  403f94:	f805 6b01 	strb.w	r6, [r5], #1
  403f98:	9e06      	ldr	r6, [sp, #24]
  403f9a:	1bae      	subs	r6, r5, r6
  403f9c:	45b1      	cmp	r9, r6
  403f9e:	4602      	mov	r2, r0
  403fa0:	460b      	mov	r3, r1
  403fa2:	d138      	bne.n	404016 <_dtoa_r+0x6d6>
  403fa4:	f7fe fa60 	bl	402468 <__adddf3>
  403fa8:	4606      	mov	r6, r0
  403faa:	460f      	mov	r7, r1
  403fac:	4602      	mov	r2, r0
  403fae:	460b      	mov	r3, r1
  403fb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403fb4:	f7fe fe7c 	bl	402cb0 <__aeabi_dcmplt>
  403fb8:	b9c8      	cbnz	r0, 403fee <_dtoa_r+0x6ae>
  403fba:	4632      	mov	r2, r6
  403fbc:	463b      	mov	r3, r7
  403fbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403fc2:	f7fe fe6b 	bl	402c9c <__aeabi_dcmpeq>
  403fc6:	b110      	cbz	r0, 403fce <_dtoa_r+0x68e>
  403fc8:	f018 0f01 	tst.w	r8, #1
  403fcc:	d10f      	bne.n	403fee <_dtoa_r+0x6ae>
  403fce:	4651      	mov	r1, sl
  403fd0:	4620      	mov	r0, r4
  403fd2:	f000 fd01 	bl	4049d8 <_Bfree>
  403fd6:	2300      	movs	r3, #0
  403fd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403fda:	702b      	strb	r3, [r5, #0]
  403fdc:	f10b 0301 	add.w	r3, fp, #1
  403fe0:	6013      	str	r3, [r2, #0]
  403fe2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403fe4:	2b00      	cmp	r3, #0
  403fe6:	f43f acf0 	beq.w	4039ca <_dtoa_r+0x8a>
  403fea:	601d      	str	r5, [r3, #0]
  403fec:	e4ed      	b.n	4039ca <_dtoa_r+0x8a>
  403fee:	465f      	mov	r7, fp
  403ff0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  403ff4:	2a39      	cmp	r2, #57	; 0x39
  403ff6:	f105 33ff 	add.w	r3, r5, #4294967295
  403ffa:	d106      	bne.n	40400a <_dtoa_r+0x6ca>
  403ffc:	9a06      	ldr	r2, [sp, #24]
  403ffe:	429a      	cmp	r2, r3
  404000:	d107      	bne.n	404012 <_dtoa_r+0x6d2>
  404002:	2330      	movs	r3, #48	; 0x30
  404004:	7013      	strb	r3, [r2, #0]
  404006:	3701      	adds	r7, #1
  404008:	4613      	mov	r3, r2
  40400a:	781a      	ldrb	r2, [r3, #0]
  40400c:	3201      	adds	r2, #1
  40400e:	701a      	strb	r2, [r3, #0]
  404010:	e78e      	b.n	403f30 <_dtoa_r+0x5f0>
  404012:	461d      	mov	r5, r3
  404014:	e7ec      	b.n	403ff0 <_dtoa_r+0x6b0>
  404016:	2200      	movs	r2, #0
  404018:	4bb4      	ldr	r3, [pc, #720]	; (4042ec <_dtoa_r+0x9ac>)
  40401a:	f7fe fbd7 	bl	4027cc <__aeabi_dmul>
  40401e:	2200      	movs	r2, #0
  404020:	2300      	movs	r3, #0
  404022:	4606      	mov	r6, r0
  404024:	460f      	mov	r7, r1
  404026:	f7fe fe39 	bl	402c9c <__aeabi_dcmpeq>
  40402a:	2800      	cmp	r0, #0
  40402c:	d09b      	beq.n	403f66 <_dtoa_r+0x626>
  40402e:	e7ce      	b.n	403fce <_dtoa_r+0x68e>
  404030:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404032:	2a00      	cmp	r2, #0
  404034:	f000 8129 	beq.w	40428a <_dtoa_r+0x94a>
  404038:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40403a:	2a01      	cmp	r2, #1
  40403c:	f300 810e 	bgt.w	40425c <_dtoa_r+0x91c>
  404040:	9a10      	ldr	r2, [sp, #64]	; 0x40
  404042:	2a00      	cmp	r2, #0
  404044:	f000 8106 	beq.w	404254 <_dtoa_r+0x914>
  404048:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40404c:	9e08      	ldr	r6, [sp, #32]
  40404e:	4645      	mov	r5, r8
  404050:	9a07      	ldr	r2, [sp, #28]
  404052:	2101      	movs	r1, #1
  404054:	441a      	add	r2, r3
  404056:	4620      	mov	r0, r4
  404058:	4498      	add	r8, r3
  40405a:	9207      	str	r2, [sp, #28]
  40405c:	f000 fd5c 	bl	404b18 <__i2b>
  404060:	4607      	mov	r7, r0
  404062:	2d00      	cmp	r5, #0
  404064:	dd0b      	ble.n	40407e <_dtoa_r+0x73e>
  404066:	9b07      	ldr	r3, [sp, #28]
  404068:	2b00      	cmp	r3, #0
  40406a:	dd08      	ble.n	40407e <_dtoa_r+0x73e>
  40406c:	42ab      	cmp	r3, r5
  40406e:	9a07      	ldr	r2, [sp, #28]
  404070:	bfa8      	it	ge
  404072:	462b      	movge	r3, r5
  404074:	eba8 0803 	sub.w	r8, r8, r3
  404078:	1aed      	subs	r5, r5, r3
  40407a:	1ad3      	subs	r3, r2, r3
  40407c:	9307      	str	r3, [sp, #28]
  40407e:	9b08      	ldr	r3, [sp, #32]
  404080:	b1fb      	cbz	r3, 4040c2 <_dtoa_r+0x782>
  404082:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404084:	2b00      	cmp	r3, #0
  404086:	f000 8104 	beq.w	404292 <_dtoa_r+0x952>
  40408a:	2e00      	cmp	r6, #0
  40408c:	dd11      	ble.n	4040b2 <_dtoa_r+0x772>
  40408e:	4639      	mov	r1, r7
  404090:	4632      	mov	r2, r6
  404092:	4620      	mov	r0, r4
  404094:	f000 fdd6 	bl	404c44 <__pow5mult>
  404098:	4652      	mov	r2, sl
  40409a:	4601      	mov	r1, r0
  40409c:	4607      	mov	r7, r0
  40409e:	4620      	mov	r0, r4
  4040a0:	f000 fd43 	bl	404b2a <__multiply>
  4040a4:	4651      	mov	r1, sl
  4040a6:	900a      	str	r0, [sp, #40]	; 0x28
  4040a8:	4620      	mov	r0, r4
  4040aa:	f000 fc95 	bl	4049d8 <_Bfree>
  4040ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4040b0:	469a      	mov	sl, r3
  4040b2:	9b08      	ldr	r3, [sp, #32]
  4040b4:	1b9a      	subs	r2, r3, r6
  4040b6:	d004      	beq.n	4040c2 <_dtoa_r+0x782>
  4040b8:	4651      	mov	r1, sl
  4040ba:	4620      	mov	r0, r4
  4040bc:	f000 fdc2 	bl	404c44 <__pow5mult>
  4040c0:	4682      	mov	sl, r0
  4040c2:	2101      	movs	r1, #1
  4040c4:	4620      	mov	r0, r4
  4040c6:	f000 fd27 	bl	404b18 <__i2b>
  4040ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4040cc:	2b00      	cmp	r3, #0
  4040ce:	4606      	mov	r6, r0
  4040d0:	f340 80e1 	ble.w	404296 <_dtoa_r+0x956>
  4040d4:	461a      	mov	r2, r3
  4040d6:	4601      	mov	r1, r0
  4040d8:	4620      	mov	r0, r4
  4040da:	f000 fdb3 	bl	404c44 <__pow5mult>
  4040de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4040e0:	2b01      	cmp	r3, #1
  4040e2:	4606      	mov	r6, r0
  4040e4:	f340 80da 	ble.w	40429c <_dtoa_r+0x95c>
  4040e8:	2300      	movs	r3, #0
  4040ea:	9308      	str	r3, [sp, #32]
  4040ec:	6933      	ldr	r3, [r6, #16]
  4040ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4040f2:	6918      	ldr	r0, [r3, #16]
  4040f4:	f000 fcc2 	bl	404a7c <__hi0bits>
  4040f8:	f1c0 0020 	rsb	r0, r0, #32
  4040fc:	9b07      	ldr	r3, [sp, #28]
  4040fe:	4418      	add	r0, r3
  404100:	f010 001f 	ands.w	r0, r0, #31
  404104:	f000 80f0 	beq.w	4042e8 <_dtoa_r+0x9a8>
  404108:	f1c0 0320 	rsb	r3, r0, #32
  40410c:	2b04      	cmp	r3, #4
  40410e:	f340 80e2 	ble.w	4042d6 <_dtoa_r+0x996>
  404112:	9b07      	ldr	r3, [sp, #28]
  404114:	f1c0 001c 	rsb	r0, r0, #28
  404118:	4480      	add	r8, r0
  40411a:	4405      	add	r5, r0
  40411c:	4403      	add	r3, r0
  40411e:	9307      	str	r3, [sp, #28]
  404120:	f1b8 0f00 	cmp.w	r8, #0
  404124:	dd05      	ble.n	404132 <_dtoa_r+0x7f2>
  404126:	4651      	mov	r1, sl
  404128:	4642      	mov	r2, r8
  40412a:	4620      	mov	r0, r4
  40412c:	f000 fdd8 	bl	404ce0 <__lshift>
  404130:	4682      	mov	sl, r0
  404132:	9b07      	ldr	r3, [sp, #28]
  404134:	2b00      	cmp	r3, #0
  404136:	dd05      	ble.n	404144 <_dtoa_r+0x804>
  404138:	4631      	mov	r1, r6
  40413a:	461a      	mov	r2, r3
  40413c:	4620      	mov	r0, r4
  40413e:	f000 fdcf 	bl	404ce0 <__lshift>
  404142:	4606      	mov	r6, r0
  404144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404146:	2b00      	cmp	r3, #0
  404148:	f000 80d2 	beq.w	4042f0 <_dtoa_r+0x9b0>
  40414c:	4631      	mov	r1, r6
  40414e:	4650      	mov	r0, sl
  404150:	f000 fe17 	bl	404d82 <__mcmp>
  404154:	2800      	cmp	r0, #0
  404156:	f280 80cb 	bge.w	4042f0 <_dtoa_r+0x9b0>
  40415a:	2300      	movs	r3, #0
  40415c:	4651      	mov	r1, sl
  40415e:	220a      	movs	r2, #10
  404160:	4620      	mov	r0, r4
  404162:	f000 fc50 	bl	404a06 <__multadd>
  404166:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404168:	f10b 3bff 	add.w	fp, fp, #4294967295
  40416c:	4682      	mov	sl, r0
  40416e:	2b00      	cmp	r3, #0
  404170:	f000 81aa 	beq.w	4044c8 <_dtoa_r+0xb88>
  404174:	2300      	movs	r3, #0
  404176:	4639      	mov	r1, r7
  404178:	220a      	movs	r2, #10
  40417a:	4620      	mov	r0, r4
  40417c:	f000 fc43 	bl	404a06 <__multadd>
  404180:	9b04      	ldr	r3, [sp, #16]
  404182:	2b00      	cmp	r3, #0
  404184:	4607      	mov	r7, r0
  404186:	dc03      	bgt.n	404190 <_dtoa_r+0x850>
  404188:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40418a:	2b02      	cmp	r3, #2
  40418c:	f300 80b8 	bgt.w	404300 <_dtoa_r+0x9c0>
  404190:	2d00      	cmp	r5, #0
  404192:	dd05      	ble.n	4041a0 <_dtoa_r+0x860>
  404194:	4639      	mov	r1, r7
  404196:	462a      	mov	r2, r5
  404198:	4620      	mov	r0, r4
  40419a:	f000 fda1 	bl	404ce0 <__lshift>
  40419e:	4607      	mov	r7, r0
  4041a0:	9b08      	ldr	r3, [sp, #32]
  4041a2:	2b00      	cmp	r3, #0
  4041a4:	f000 8110 	beq.w	4043c8 <_dtoa_r+0xa88>
  4041a8:	6879      	ldr	r1, [r7, #4]
  4041aa:	4620      	mov	r0, r4
  4041ac:	f000 fbe0 	bl	404970 <_Balloc>
  4041b0:	693a      	ldr	r2, [r7, #16]
  4041b2:	3202      	adds	r2, #2
  4041b4:	4605      	mov	r5, r0
  4041b6:	0092      	lsls	r2, r2, #2
  4041b8:	f107 010c 	add.w	r1, r7, #12
  4041bc:	300c      	adds	r0, #12
  4041be:	f7fe fdeb 	bl	402d98 <memcpy>
  4041c2:	2201      	movs	r2, #1
  4041c4:	4629      	mov	r1, r5
  4041c6:	4620      	mov	r0, r4
  4041c8:	f000 fd8a 	bl	404ce0 <__lshift>
  4041cc:	9b02      	ldr	r3, [sp, #8]
  4041ce:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4041d2:	9707      	str	r7, [sp, #28]
  4041d4:	f003 0301 	and.w	r3, r3, #1
  4041d8:	4607      	mov	r7, r0
  4041da:	9308      	str	r3, [sp, #32]
  4041dc:	4631      	mov	r1, r6
  4041de:	4650      	mov	r0, sl
  4041e0:	f7ff fb22 	bl	403828 <quorem>
  4041e4:	9907      	ldr	r1, [sp, #28]
  4041e6:	4605      	mov	r5, r0
  4041e8:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4041ec:	4650      	mov	r0, sl
  4041ee:	f000 fdc8 	bl	404d82 <__mcmp>
  4041f2:	463a      	mov	r2, r7
  4041f4:	9002      	str	r0, [sp, #8]
  4041f6:	4631      	mov	r1, r6
  4041f8:	4620      	mov	r0, r4
  4041fa:	f000 fddc 	bl	404db6 <__mdiff>
  4041fe:	68c3      	ldr	r3, [r0, #12]
  404200:	4602      	mov	r2, r0
  404202:	2b00      	cmp	r3, #0
  404204:	f040 80e2 	bne.w	4043cc <_dtoa_r+0xa8c>
  404208:	4601      	mov	r1, r0
  40420a:	9009      	str	r0, [sp, #36]	; 0x24
  40420c:	4650      	mov	r0, sl
  40420e:	f000 fdb8 	bl	404d82 <__mcmp>
  404212:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404214:	4603      	mov	r3, r0
  404216:	4611      	mov	r1, r2
  404218:	4620      	mov	r0, r4
  40421a:	9309      	str	r3, [sp, #36]	; 0x24
  40421c:	f000 fbdc 	bl	4049d8 <_Bfree>
  404220:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404222:	2b00      	cmp	r3, #0
  404224:	f040 80d4 	bne.w	4043d0 <_dtoa_r+0xa90>
  404228:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40422a:	2a00      	cmp	r2, #0
  40422c:	f040 80d0 	bne.w	4043d0 <_dtoa_r+0xa90>
  404230:	9a08      	ldr	r2, [sp, #32]
  404232:	2a00      	cmp	r2, #0
  404234:	f040 80cc 	bne.w	4043d0 <_dtoa_r+0xa90>
  404238:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40423c:	f000 80e8 	beq.w	404410 <_dtoa_r+0xad0>
  404240:	9b02      	ldr	r3, [sp, #8]
  404242:	2b00      	cmp	r3, #0
  404244:	dd01      	ble.n	40424a <_dtoa_r+0x90a>
  404246:	f105 0931 	add.w	r9, r5, #49	; 0x31
  40424a:	f108 0501 	add.w	r5, r8, #1
  40424e:	f888 9000 	strb.w	r9, [r8]
  404252:	e06a      	b.n	40432a <_dtoa_r+0x9ea>
  404254:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404256:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40425a:	e6f7      	b.n	40404c <_dtoa_r+0x70c>
  40425c:	9b08      	ldr	r3, [sp, #32]
  40425e:	f109 36ff 	add.w	r6, r9, #4294967295
  404262:	42b3      	cmp	r3, r6
  404264:	bfbf      	itttt	lt
  404266:	9b08      	ldrlt	r3, [sp, #32]
  404268:	9608      	strlt	r6, [sp, #32]
  40426a:	1af2      	sublt	r2, r6, r3
  40426c:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  40426e:	bfb7      	itett	lt
  404270:	189b      	addlt	r3, r3, r2
  404272:	1b9e      	subge	r6, r3, r6
  404274:	930c      	strlt	r3, [sp, #48]	; 0x30
  404276:	2600      	movlt	r6, #0
  404278:	f1b9 0f00 	cmp.w	r9, #0
  40427c:	bfb9      	ittee	lt
  40427e:	eba8 0509 	sublt.w	r5, r8, r9
  404282:	2300      	movlt	r3, #0
  404284:	4645      	movge	r5, r8
  404286:	464b      	movge	r3, r9
  404288:	e6e2      	b.n	404050 <_dtoa_r+0x710>
  40428a:	9e08      	ldr	r6, [sp, #32]
  40428c:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40428e:	4645      	mov	r5, r8
  404290:	e6e7      	b.n	404062 <_dtoa_r+0x722>
  404292:	9a08      	ldr	r2, [sp, #32]
  404294:	e710      	b.n	4040b8 <_dtoa_r+0x778>
  404296:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404298:	2b01      	cmp	r3, #1
  40429a:	dc18      	bgt.n	4042ce <_dtoa_r+0x98e>
  40429c:	9b02      	ldr	r3, [sp, #8]
  40429e:	b9b3      	cbnz	r3, 4042ce <_dtoa_r+0x98e>
  4042a0:	9b03      	ldr	r3, [sp, #12]
  4042a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4042a6:	b9a3      	cbnz	r3, 4042d2 <_dtoa_r+0x992>
  4042a8:	9b03      	ldr	r3, [sp, #12]
  4042aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  4042ae:	0d1b      	lsrs	r3, r3, #20
  4042b0:	051b      	lsls	r3, r3, #20
  4042b2:	b12b      	cbz	r3, 4042c0 <_dtoa_r+0x980>
  4042b4:	9b07      	ldr	r3, [sp, #28]
  4042b6:	3301      	adds	r3, #1
  4042b8:	9307      	str	r3, [sp, #28]
  4042ba:	f108 0801 	add.w	r8, r8, #1
  4042be:	2301      	movs	r3, #1
  4042c0:	9308      	str	r3, [sp, #32]
  4042c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4042c4:	2b00      	cmp	r3, #0
  4042c6:	f47f af11 	bne.w	4040ec <_dtoa_r+0x7ac>
  4042ca:	2001      	movs	r0, #1
  4042cc:	e716      	b.n	4040fc <_dtoa_r+0x7bc>
  4042ce:	2300      	movs	r3, #0
  4042d0:	e7f6      	b.n	4042c0 <_dtoa_r+0x980>
  4042d2:	9b02      	ldr	r3, [sp, #8]
  4042d4:	e7f4      	b.n	4042c0 <_dtoa_r+0x980>
  4042d6:	f43f af23 	beq.w	404120 <_dtoa_r+0x7e0>
  4042da:	9a07      	ldr	r2, [sp, #28]
  4042dc:	331c      	adds	r3, #28
  4042de:	441a      	add	r2, r3
  4042e0:	4498      	add	r8, r3
  4042e2:	441d      	add	r5, r3
  4042e4:	4613      	mov	r3, r2
  4042e6:	e71a      	b.n	40411e <_dtoa_r+0x7de>
  4042e8:	4603      	mov	r3, r0
  4042ea:	e7f6      	b.n	4042da <_dtoa_r+0x99a>
  4042ec:	40240000 	.word	0x40240000
  4042f0:	f1b9 0f00 	cmp.w	r9, #0
  4042f4:	dc33      	bgt.n	40435e <_dtoa_r+0xa1e>
  4042f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4042f8:	2b02      	cmp	r3, #2
  4042fa:	dd30      	ble.n	40435e <_dtoa_r+0xa1e>
  4042fc:	f8cd 9010 	str.w	r9, [sp, #16]
  404300:	9b04      	ldr	r3, [sp, #16]
  404302:	b963      	cbnz	r3, 40431e <_dtoa_r+0x9de>
  404304:	4631      	mov	r1, r6
  404306:	2205      	movs	r2, #5
  404308:	4620      	mov	r0, r4
  40430a:	f000 fb7c 	bl	404a06 <__multadd>
  40430e:	4601      	mov	r1, r0
  404310:	4606      	mov	r6, r0
  404312:	4650      	mov	r0, sl
  404314:	f000 fd35 	bl	404d82 <__mcmp>
  404318:	2800      	cmp	r0, #0
  40431a:	f73f ad5c 	bgt.w	403dd6 <_dtoa_r+0x496>
  40431e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404320:	9d06      	ldr	r5, [sp, #24]
  404322:	ea6f 0b03 	mvn.w	fp, r3
  404326:	2300      	movs	r3, #0
  404328:	9307      	str	r3, [sp, #28]
  40432a:	4631      	mov	r1, r6
  40432c:	4620      	mov	r0, r4
  40432e:	f000 fb53 	bl	4049d8 <_Bfree>
  404332:	2f00      	cmp	r7, #0
  404334:	f43f ae4b 	beq.w	403fce <_dtoa_r+0x68e>
  404338:	9b07      	ldr	r3, [sp, #28]
  40433a:	b12b      	cbz	r3, 404348 <_dtoa_r+0xa08>
  40433c:	42bb      	cmp	r3, r7
  40433e:	d003      	beq.n	404348 <_dtoa_r+0xa08>
  404340:	4619      	mov	r1, r3
  404342:	4620      	mov	r0, r4
  404344:	f000 fb48 	bl	4049d8 <_Bfree>
  404348:	4639      	mov	r1, r7
  40434a:	4620      	mov	r0, r4
  40434c:	f000 fb44 	bl	4049d8 <_Bfree>
  404350:	e63d      	b.n	403fce <_dtoa_r+0x68e>
  404352:	2600      	movs	r6, #0
  404354:	4637      	mov	r7, r6
  404356:	e7e2      	b.n	40431e <_dtoa_r+0x9de>
  404358:	46bb      	mov	fp, r7
  40435a:	4637      	mov	r7, r6
  40435c:	e53b      	b.n	403dd6 <_dtoa_r+0x496>
  40435e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404360:	f8cd 9010 	str.w	r9, [sp, #16]
  404364:	2b00      	cmp	r3, #0
  404366:	f47f af13 	bne.w	404190 <_dtoa_r+0x850>
  40436a:	9d06      	ldr	r5, [sp, #24]
  40436c:	4631      	mov	r1, r6
  40436e:	4650      	mov	r0, sl
  404370:	f7ff fa5a 	bl	403828 <quorem>
  404374:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404378:	f805 9b01 	strb.w	r9, [r5], #1
  40437c:	9b06      	ldr	r3, [sp, #24]
  40437e:	9a04      	ldr	r2, [sp, #16]
  404380:	1aeb      	subs	r3, r5, r3
  404382:	429a      	cmp	r2, r3
  404384:	f300 8083 	bgt.w	40448e <_dtoa_r+0xb4e>
  404388:	9b06      	ldr	r3, [sp, #24]
  40438a:	2a01      	cmp	r2, #1
  40438c:	bfac      	ite	ge
  40438e:	189b      	addge	r3, r3, r2
  404390:	3301      	addlt	r3, #1
  404392:	4698      	mov	r8, r3
  404394:	2300      	movs	r3, #0
  404396:	9307      	str	r3, [sp, #28]
  404398:	4651      	mov	r1, sl
  40439a:	2201      	movs	r2, #1
  40439c:	4620      	mov	r0, r4
  40439e:	f000 fc9f 	bl	404ce0 <__lshift>
  4043a2:	4631      	mov	r1, r6
  4043a4:	4682      	mov	sl, r0
  4043a6:	f000 fcec 	bl	404d82 <__mcmp>
  4043aa:	2800      	cmp	r0, #0
  4043ac:	dc35      	bgt.n	40441a <_dtoa_r+0xada>
  4043ae:	d102      	bne.n	4043b6 <_dtoa_r+0xa76>
  4043b0:	f019 0f01 	tst.w	r9, #1
  4043b4:	d131      	bne.n	40441a <_dtoa_r+0xada>
  4043b6:	4645      	mov	r5, r8
  4043b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4043bc:	2b30      	cmp	r3, #48	; 0x30
  4043be:	f105 32ff 	add.w	r2, r5, #4294967295
  4043c2:	d1b2      	bne.n	40432a <_dtoa_r+0x9ea>
  4043c4:	4615      	mov	r5, r2
  4043c6:	e7f7      	b.n	4043b8 <_dtoa_r+0xa78>
  4043c8:	4638      	mov	r0, r7
  4043ca:	e6ff      	b.n	4041cc <_dtoa_r+0x88c>
  4043cc:	2301      	movs	r3, #1
  4043ce:	e722      	b.n	404216 <_dtoa_r+0x8d6>
  4043d0:	9a02      	ldr	r2, [sp, #8]
  4043d2:	2a00      	cmp	r2, #0
  4043d4:	db04      	blt.n	4043e0 <_dtoa_r+0xaa0>
  4043d6:	d129      	bne.n	40442c <_dtoa_r+0xaec>
  4043d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4043da:	bb3a      	cbnz	r2, 40442c <_dtoa_r+0xaec>
  4043dc:	9a08      	ldr	r2, [sp, #32]
  4043de:	bb2a      	cbnz	r2, 40442c <_dtoa_r+0xaec>
  4043e0:	2b00      	cmp	r3, #0
  4043e2:	f77f af32 	ble.w	40424a <_dtoa_r+0x90a>
  4043e6:	4651      	mov	r1, sl
  4043e8:	2201      	movs	r2, #1
  4043ea:	4620      	mov	r0, r4
  4043ec:	f000 fc78 	bl	404ce0 <__lshift>
  4043f0:	4631      	mov	r1, r6
  4043f2:	4682      	mov	sl, r0
  4043f4:	f000 fcc5 	bl	404d82 <__mcmp>
  4043f8:	2800      	cmp	r0, #0
  4043fa:	dc05      	bgt.n	404408 <_dtoa_r+0xac8>
  4043fc:	f47f af25 	bne.w	40424a <_dtoa_r+0x90a>
  404400:	f019 0f01 	tst.w	r9, #1
  404404:	f43f af21 	beq.w	40424a <_dtoa_r+0x90a>
  404408:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40440c:	f47f af1b 	bne.w	404246 <_dtoa_r+0x906>
  404410:	2339      	movs	r3, #57	; 0x39
  404412:	f888 3000 	strb.w	r3, [r8]
  404416:	f108 0801 	add.w	r8, r8, #1
  40441a:	4645      	mov	r5, r8
  40441c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404420:	2b39      	cmp	r3, #57	; 0x39
  404422:	f105 32ff 	add.w	r2, r5, #4294967295
  404426:	d03a      	beq.n	40449e <_dtoa_r+0xb5e>
  404428:	3301      	adds	r3, #1
  40442a:	e03f      	b.n	4044ac <_dtoa_r+0xb6c>
  40442c:	2b00      	cmp	r3, #0
  40442e:	f108 0501 	add.w	r5, r8, #1
  404432:	dd05      	ble.n	404440 <_dtoa_r+0xb00>
  404434:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404438:	d0ea      	beq.n	404410 <_dtoa_r+0xad0>
  40443a:	f109 0901 	add.w	r9, r9, #1
  40443e:	e706      	b.n	40424e <_dtoa_r+0x90e>
  404440:	9b06      	ldr	r3, [sp, #24]
  404442:	9a04      	ldr	r2, [sp, #16]
  404444:	f805 9c01 	strb.w	r9, [r5, #-1]
  404448:	1aeb      	subs	r3, r5, r3
  40444a:	4293      	cmp	r3, r2
  40444c:	46a8      	mov	r8, r5
  40444e:	d0a3      	beq.n	404398 <_dtoa_r+0xa58>
  404450:	4651      	mov	r1, sl
  404452:	2300      	movs	r3, #0
  404454:	220a      	movs	r2, #10
  404456:	4620      	mov	r0, r4
  404458:	f000 fad5 	bl	404a06 <__multadd>
  40445c:	9b07      	ldr	r3, [sp, #28]
  40445e:	9907      	ldr	r1, [sp, #28]
  404460:	42bb      	cmp	r3, r7
  404462:	4682      	mov	sl, r0
  404464:	f04f 0300 	mov.w	r3, #0
  404468:	f04f 020a 	mov.w	r2, #10
  40446c:	4620      	mov	r0, r4
  40446e:	d104      	bne.n	40447a <_dtoa_r+0xb3a>
  404470:	f000 fac9 	bl	404a06 <__multadd>
  404474:	9007      	str	r0, [sp, #28]
  404476:	4607      	mov	r7, r0
  404478:	e6b0      	b.n	4041dc <_dtoa_r+0x89c>
  40447a:	f000 fac4 	bl	404a06 <__multadd>
  40447e:	2300      	movs	r3, #0
  404480:	9007      	str	r0, [sp, #28]
  404482:	220a      	movs	r2, #10
  404484:	4639      	mov	r1, r7
  404486:	4620      	mov	r0, r4
  404488:	f000 fabd 	bl	404a06 <__multadd>
  40448c:	e7f3      	b.n	404476 <_dtoa_r+0xb36>
  40448e:	4651      	mov	r1, sl
  404490:	2300      	movs	r3, #0
  404492:	220a      	movs	r2, #10
  404494:	4620      	mov	r0, r4
  404496:	f000 fab6 	bl	404a06 <__multadd>
  40449a:	4682      	mov	sl, r0
  40449c:	e766      	b.n	40436c <_dtoa_r+0xa2c>
  40449e:	9b06      	ldr	r3, [sp, #24]
  4044a0:	4293      	cmp	r3, r2
  4044a2:	d105      	bne.n	4044b0 <_dtoa_r+0xb70>
  4044a4:	9a06      	ldr	r2, [sp, #24]
  4044a6:	f10b 0b01 	add.w	fp, fp, #1
  4044aa:	2331      	movs	r3, #49	; 0x31
  4044ac:	7013      	strb	r3, [r2, #0]
  4044ae:	e73c      	b.n	40432a <_dtoa_r+0x9ea>
  4044b0:	4615      	mov	r5, r2
  4044b2:	e7b3      	b.n	40441c <_dtoa_r+0xadc>
  4044b4:	4b09      	ldr	r3, [pc, #36]	; (4044dc <_dtoa_r+0xb9c>)
  4044b6:	f7ff baa5 	b.w	403a04 <_dtoa_r+0xc4>
  4044ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4044bc:	2b00      	cmp	r3, #0
  4044be:	f47f aa7f 	bne.w	4039c0 <_dtoa_r+0x80>
  4044c2:	4b07      	ldr	r3, [pc, #28]	; (4044e0 <_dtoa_r+0xba0>)
  4044c4:	f7ff ba9e 	b.w	403a04 <_dtoa_r+0xc4>
  4044c8:	9b04      	ldr	r3, [sp, #16]
  4044ca:	2b00      	cmp	r3, #0
  4044cc:	f73f af4d 	bgt.w	40436a <_dtoa_r+0xa2a>
  4044d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4044d2:	2b02      	cmp	r3, #2
  4044d4:	f77f af49 	ble.w	40436a <_dtoa_r+0xa2a>
  4044d8:	e712      	b.n	404300 <_dtoa_r+0x9c0>
  4044da:	bf00      	nop
  4044dc:	00405b20 	.word	0x00405b20
  4044e0:	00405b44 	.word	0x00405b44

004044e4 <__sflush_r>:
  4044e4:	898a      	ldrh	r2, [r1, #12]
  4044e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4044ea:	4605      	mov	r5, r0
  4044ec:	0710      	lsls	r0, r2, #28
  4044ee:	460c      	mov	r4, r1
  4044f0:	d45a      	bmi.n	4045a8 <__sflush_r+0xc4>
  4044f2:	684b      	ldr	r3, [r1, #4]
  4044f4:	2b00      	cmp	r3, #0
  4044f6:	dc05      	bgt.n	404504 <__sflush_r+0x20>
  4044f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4044fa:	2b00      	cmp	r3, #0
  4044fc:	dc02      	bgt.n	404504 <__sflush_r+0x20>
  4044fe:	2000      	movs	r0, #0
  404500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404506:	2e00      	cmp	r6, #0
  404508:	d0f9      	beq.n	4044fe <__sflush_r+0x1a>
  40450a:	2300      	movs	r3, #0
  40450c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  404510:	682f      	ldr	r7, [r5, #0]
  404512:	602b      	str	r3, [r5, #0]
  404514:	d033      	beq.n	40457e <__sflush_r+0x9a>
  404516:	6d60      	ldr	r0, [r4, #84]	; 0x54
  404518:	89a3      	ldrh	r3, [r4, #12]
  40451a:	075a      	lsls	r2, r3, #29
  40451c:	d505      	bpl.n	40452a <__sflush_r+0x46>
  40451e:	6863      	ldr	r3, [r4, #4]
  404520:	1ac0      	subs	r0, r0, r3
  404522:	6b63      	ldr	r3, [r4, #52]	; 0x34
  404524:	b10b      	cbz	r3, 40452a <__sflush_r+0x46>
  404526:	6c23      	ldr	r3, [r4, #64]	; 0x40
  404528:	1ac0      	subs	r0, r0, r3
  40452a:	2300      	movs	r3, #0
  40452c:	4602      	mov	r2, r0
  40452e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404530:	6a21      	ldr	r1, [r4, #32]
  404532:	4628      	mov	r0, r5
  404534:	47b0      	blx	r6
  404536:	1c43      	adds	r3, r0, #1
  404538:	89a3      	ldrh	r3, [r4, #12]
  40453a:	d106      	bne.n	40454a <__sflush_r+0x66>
  40453c:	6829      	ldr	r1, [r5, #0]
  40453e:	291d      	cmp	r1, #29
  404540:	d84b      	bhi.n	4045da <__sflush_r+0xf6>
  404542:	4a2b      	ldr	r2, [pc, #172]	; (4045f0 <__sflush_r+0x10c>)
  404544:	40ca      	lsrs	r2, r1
  404546:	07d6      	lsls	r6, r2, #31
  404548:	d547      	bpl.n	4045da <__sflush_r+0xf6>
  40454a:	2200      	movs	r2, #0
  40454c:	6062      	str	r2, [r4, #4]
  40454e:	04d9      	lsls	r1, r3, #19
  404550:	6922      	ldr	r2, [r4, #16]
  404552:	6022      	str	r2, [r4, #0]
  404554:	d504      	bpl.n	404560 <__sflush_r+0x7c>
  404556:	1c42      	adds	r2, r0, #1
  404558:	d101      	bne.n	40455e <__sflush_r+0x7a>
  40455a:	682b      	ldr	r3, [r5, #0]
  40455c:	b903      	cbnz	r3, 404560 <__sflush_r+0x7c>
  40455e:	6560      	str	r0, [r4, #84]	; 0x54
  404560:	6b61      	ldr	r1, [r4, #52]	; 0x34
  404562:	602f      	str	r7, [r5, #0]
  404564:	2900      	cmp	r1, #0
  404566:	d0ca      	beq.n	4044fe <__sflush_r+0x1a>
  404568:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40456c:	4299      	cmp	r1, r3
  40456e:	d002      	beq.n	404576 <__sflush_r+0x92>
  404570:	4628      	mov	r0, r5
  404572:	f000 fcdb 	bl	404f2c <_free_r>
  404576:	2000      	movs	r0, #0
  404578:	6360      	str	r0, [r4, #52]	; 0x34
  40457a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40457e:	6a21      	ldr	r1, [r4, #32]
  404580:	2301      	movs	r3, #1
  404582:	4628      	mov	r0, r5
  404584:	47b0      	blx	r6
  404586:	1c41      	adds	r1, r0, #1
  404588:	d1c6      	bne.n	404518 <__sflush_r+0x34>
  40458a:	682b      	ldr	r3, [r5, #0]
  40458c:	2b00      	cmp	r3, #0
  40458e:	d0c3      	beq.n	404518 <__sflush_r+0x34>
  404590:	2b1d      	cmp	r3, #29
  404592:	d001      	beq.n	404598 <__sflush_r+0xb4>
  404594:	2b16      	cmp	r3, #22
  404596:	d101      	bne.n	40459c <__sflush_r+0xb8>
  404598:	602f      	str	r7, [r5, #0]
  40459a:	e7b0      	b.n	4044fe <__sflush_r+0x1a>
  40459c:	89a3      	ldrh	r3, [r4, #12]
  40459e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4045a2:	81a3      	strh	r3, [r4, #12]
  4045a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4045a8:	690f      	ldr	r7, [r1, #16]
  4045aa:	2f00      	cmp	r7, #0
  4045ac:	d0a7      	beq.n	4044fe <__sflush_r+0x1a>
  4045ae:	0793      	lsls	r3, r2, #30
  4045b0:	680e      	ldr	r6, [r1, #0]
  4045b2:	bf08      	it	eq
  4045b4:	694b      	ldreq	r3, [r1, #20]
  4045b6:	600f      	str	r7, [r1, #0]
  4045b8:	bf18      	it	ne
  4045ba:	2300      	movne	r3, #0
  4045bc:	eba6 0807 	sub.w	r8, r6, r7
  4045c0:	608b      	str	r3, [r1, #8]
  4045c2:	f1b8 0f00 	cmp.w	r8, #0
  4045c6:	dd9a      	ble.n	4044fe <__sflush_r+0x1a>
  4045c8:	4643      	mov	r3, r8
  4045ca:	463a      	mov	r2, r7
  4045cc:	6a21      	ldr	r1, [r4, #32]
  4045ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4045d0:	4628      	mov	r0, r5
  4045d2:	47b0      	blx	r6
  4045d4:	2800      	cmp	r0, #0
  4045d6:	dc07      	bgt.n	4045e8 <__sflush_r+0x104>
  4045d8:	89a3      	ldrh	r3, [r4, #12]
  4045da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4045de:	81a3      	strh	r3, [r4, #12]
  4045e0:	f04f 30ff 	mov.w	r0, #4294967295
  4045e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4045e8:	4407      	add	r7, r0
  4045ea:	eba8 0800 	sub.w	r8, r8, r0
  4045ee:	e7e8      	b.n	4045c2 <__sflush_r+0xde>
  4045f0:	20400001 	.word	0x20400001

004045f4 <_fflush_r>:
  4045f4:	b538      	push	{r3, r4, r5, lr}
  4045f6:	690b      	ldr	r3, [r1, #16]
  4045f8:	4605      	mov	r5, r0
  4045fa:	460c      	mov	r4, r1
  4045fc:	b1db      	cbz	r3, 404636 <_fflush_r+0x42>
  4045fe:	b118      	cbz	r0, 404608 <_fflush_r+0x14>
  404600:	6983      	ldr	r3, [r0, #24]
  404602:	b90b      	cbnz	r3, 404608 <_fflush_r+0x14>
  404604:	f000 f860 	bl	4046c8 <__sinit>
  404608:	4b0c      	ldr	r3, [pc, #48]	; (40463c <_fflush_r+0x48>)
  40460a:	429c      	cmp	r4, r3
  40460c:	d109      	bne.n	404622 <_fflush_r+0x2e>
  40460e:	686c      	ldr	r4, [r5, #4]
  404610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404614:	b17b      	cbz	r3, 404636 <_fflush_r+0x42>
  404616:	4621      	mov	r1, r4
  404618:	4628      	mov	r0, r5
  40461a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40461e:	f7ff bf61 	b.w	4044e4 <__sflush_r>
  404622:	4b07      	ldr	r3, [pc, #28]	; (404640 <_fflush_r+0x4c>)
  404624:	429c      	cmp	r4, r3
  404626:	d101      	bne.n	40462c <_fflush_r+0x38>
  404628:	68ac      	ldr	r4, [r5, #8]
  40462a:	e7f1      	b.n	404610 <_fflush_r+0x1c>
  40462c:	4b05      	ldr	r3, [pc, #20]	; (404644 <_fflush_r+0x50>)
  40462e:	429c      	cmp	r4, r3
  404630:	bf08      	it	eq
  404632:	68ec      	ldreq	r4, [r5, #12]
  404634:	e7ec      	b.n	404610 <_fflush_r+0x1c>
  404636:	2000      	movs	r0, #0
  404638:	bd38      	pop	{r3, r4, r5, pc}
  40463a:	bf00      	nop
  40463c:	00405b74 	.word	0x00405b74
  404640:	00405b94 	.word	0x00405b94
  404644:	00405b54 	.word	0x00405b54

00404648 <_cleanup_r>:
  404648:	4901      	ldr	r1, [pc, #4]	; (404650 <_cleanup_r+0x8>)
  40464a:	f000 b8a9 	b.w	4047a0 <_fwalk_reent>
  40464e:	bf00      	nop
  404650:	004045f5 	.word	0x004045f5

00404654 <std.isra.0>:
  404654:	2300      	movs	r3, #0
  404656:	b510      	push	{r4, lr}
  404658:	4604      	mov	r4, r0
  40465a:	6003      	str	r3, [r0, #0]
  40465c:	6043      	str	r3, [r0, #4]
  40465e:	6083      	str	r3, [r0, #8]
  404660:	8181      	strh	r1, [r0, #12]
  404662:	6643      	str	r3, [r0, #100]	; 0x64
  404664:	81c2      	strh	r2, [r0, #14]
  404666:	6103      	str	r3, [r0, #16]
  404668:	6143      	str	r3, [r0, #20]
  40466a:	6183      	str	r3, [r0, #24]
  40466c:	4619      	mov	r1, r3
  40466e:	2208      	movs	r2, #8
  404670:	305c      	adds	r0, #92	; 0x5c
  404672:	f7fe fb9c 	bl	402dae <memset>
  404676:	4b05      	ldr	r3, [pc, #20]	; (40468c <std.isra.0+0x38>)
  404678:	6263      	str	r3, [r4, #36]	; 0x24
  40467a:	4b05      	ldr	r3, [pc, #20]	; (404690 <std.isra.0+0x3c>)
  40467c:	62a3      	str	r3, [r4, #40]	; 0x28
  40467e:	4b05      	ldr	r3, [pc, #20]	; (404694 <std.isra.0+0x40>)
  404680:	62e3      	str	r3, [r4, #44]	; 0x2c
  404682:	4b05      	ldr	r3, [pc, #20]	; (404698 <std.isra.0+0x44>)
  404684:	6224      	str	r4, [r4, #32]
  404686:	6323      	str	r3, [r4, #48]	; 0x30
  404688:	bd10      	pop	{r4, pc}
  40468a:	bf00      	nop
  40468c:	00405321 	.word	0x00405321
  404690:	00405343 	.word	0x00405343
  404694:	0040537b 	.word	0x0040537b
  404698:	0040539f 	.word	0x0040539f

0040469c <__sfmoreglue>:
  40469c:	b570      	push	{r4, r5, r6, lr}
  40469e:	1e4a      	subs	r2, r1, #1
  4046a0:	2568      	movs	r5, #104	; 0x68
  4046a2:	4355      	muls	r5, r2
  4046a4:	460e      	mov	r6, r1
  4046a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4046aa:	f000 fc8d 	bl	404fc8 <_malloc_r>
  4046ae:	4604      	mov	r4, r0
  4046b0:	b140      	cbz	r0, 4046c4 <__sfmoreglue+0x28>
  4046b2:	2100      	movs	r1, #0
  4046b4:	e880 0042 	stmia.w	r0, {r1, r6}
  4046b8:	300c      	adds	r0, #12
  4046ba:	60a0      	str	r0, [r4, #8]
  4046bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4046c0:	f7fe fb75 	bl	402dae <memset>
  4046c4:	4620      	mov	r0, r4
  4046c6:	bd70      	pop	{r4, r5, r6, pc}

004046c8 <__sinit>:
  4046c8:	6983      	ldr	r3, [r0, #24]
  4046ca:	b510      	push	{r4, lr}
  4046cc:	4604      	mov	r4, r0
  4046ce:	bb33      	cbnz	r3, 40471e <__sinit+0x56>
  4046d0:	6483      	str	r3, [r0, #72]	; 0x48
  4046d2:	64c3      	str	r3, [r0, #76]	; 0x4c
  4046d4:	6503      	str	r3, [r0, #80]	; 0x50
  4046d6:	4b12      	ldr	r3, [pc, #72]	; (404720 <__sinit+0x58>)
  4046d8:	4a12      	ldr	r2, [pc, #72]	; (404724 <__sinit+0x5c>)
  4046da:	681b      	ldr	r3, [r3, #0]
  4046dc:	6282      	str	r2, [r0, #40]	; 0x28
  4046de:	4298      	cmp	r0, r3
  4046e0:	bf04      	itt	eq
  4046e2:	2301      	moveq	r3, #1
  4046e4:	6183      	streq	r3, [r0, #24]
  4046e6:	f000 f81f 	bl	404728 <__sfp>
  4046ea:	6060      	str	r0, [r4, #4]
  4046ec:	4620      	mov	r0, r4
  4046ee:	f000 f81b 	bl	404728 <__sfp>
  4046f2:	60a0      	str	r0, [r4, #8]
  4046f4:	4620      	mov	r0, r4
  4046f6:	f000 f817 	bl	404728 <__sfp>
  4046fa:	2200      	movs	r2, #0
  4046fc:	60e0      	str	r0, [r4, #12]
  4046fe:	2104      	movs	r1, #4
  404700:	6860      	ldr	r0, [r4, #4]
  404702:	f7ff ffa7 	bl	404654 <std.isra.0>
  404706:	2201      	movs	r2, #1
  404708:	2109      	movs	r1, #9
  40470a:	68a0      	ldr	r0, [r4, #8]
  40470c:	f7ff ffa2 	bl	404654 <std.isra.0>
  404710:	2202      	movs	r2, #2
  404712:	2112      	movs	r1, #18
  404714:	68e0      	ldr	r0, [r4, #12]
  404716:	f7ff ff9d 	bl	404654 <std.isra.0>
  40471a:	2301      	movs	r3, #1
  40471c:	61a3      	str	r3, [r4, #24]
  40471e:	bd10      	pop	{r4, pc}
  404720:	00405b0c 	.word	0x00405b0c
  404724:	00404649 	.word	0x00404649

00404728 <__sfp>:
  404728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40472a:	4b1c      	ldr	r3, [pc, #112]	; (40479c <__sfp+0x74>)
  40472c:	681e      	ldr	r6, [r3, #0]
  40472e:	69b3      	ldr	r3, [r6, #24]
  404730:	4607      	mov	r7, r0
  404732:	b913      	cbnz	r3, 40473a <__sfp+0x12>
  404734:	4630      	mov	r0, r6
  404736:	f7ff ffc7 	bl	4046c8 <__sinit>
  40473a:	3648      	adds	r6, #72	; 0x48
  40473c:	68b4      	ldr	r4, [r6, #8]
  40473e:	6873      	ldr	r3, [r6, #4]
  404740:	3b01      	subs	r3, #1
  404742:	d503      	bpl.n	40474c <__sfp+0x24>
  404744:	6833      	ldr	r3, [r6, #0]
  404746:	b133      	cbz	r3, 404756 <__sfp+0x2e>
  404748:	6836      	ldr	r6, [r6, #0]
  40474a:	e7f7      	b.n	40473c <__sfp+0x14>
  40474c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  404750:	b16d      	cbz	r5, 40476e <__sfp+0x46>
  404752:	3468      	adds	r4, #104	; 0x68
  404754:	e7f4      	b.n	404740 <__sfp+0x18>
  404756:	2104      	movs	r1, #4
  404758:	4638      	mov	r0, r7
  40475a:	f7ff ff9f 	bl	40469c <__sfmoreglue>
  40475e:	6030      	str	r0, [r6, #0]
  404760:	2800      	cmp	r0, #0
  404762:	d1f1      	bne.n	404748 <__sfp+0x20>
  404764:	230c      	movs	r3, #12
  404766:	603b      	str	r3, [r7, #0]
  404768:	4604      	mov	r4, r0
  40476a:	4620      	mov	r0, r4
  40476c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40476e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404772:	81e3      	strh	r3, [r4, #14]
  404774:	2301      	movs	r3, #1
  404776:	81a3      	strh	r3, [r4, #12]
  404778:	6665      	str	r5, [r4, #100]	; 0x64
  40477a:	6025      	str	r5, [r4, #0]
  40477c:	60a5      	str	r5, [r4, #8]
  40477e:	6065      	str	r5, [r4, #4]
  404780:	6125      	str	r5, [r4, #16]
  404782:	6165      	str	r5, [r4, #20]
  404784:	61a5      	str	r5, [r4, #24]
  404786:	2208      	movs	r2, #8
  404788:	4629      	mov	r1, r5
  40478a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  40478e:	f7fe fb0e 	bl	402dae <memset>
  404792:	6365      	str	r5, [r4, #52]	; 0x34
  404794:	63a5      	str	r5, [r4, #56]	; 0x38
  404796:	64a5      	str	r5, [r4, #72]	; 0x48
  404798:	64e5      	str	r5, [r4, #76]	; 0x4c
  40479a:	e7e6      	b.n	40476a <__sfp+0x42>
  40479c:	00405b0c 	.word	0x00405b0c

004047a0 <_fwalk_reent>:
  4047a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4047a4:	4680      	mov	r8, r0
  4047a6:	4689      	mov	r9, r1
  4047a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
  4047ac:	2600      	movs	r6, #0
  4047ae:	b914      	cbnz	r4, 4047b6 <_fwalk_reent+0x16>
  4047b0:	4630      	mov	r0, r6
  4047b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4047b6:	68a5      	ldr	r5, [r4, #8]
  4047b8:	6867      	ldr	r7, [r4, #4]
  4047ba:	3f01      	subs	r7, #1
  4047bc:	d501      	bpl.n	4047c2 <_fwalk_reent+0x22>
  4047be:	6824      	ldr	r4, [r4, #0]
  4047c0:	e7f5      	b.n	4047ae <_fwalk_reent+0xe>
  4047c2:	89ab      	ldrh	r3, [r5, #12]
  4047c4:	2b01      	cmp	r3, #1
  4047c6:	d907      	bls.n	4047d8 <_fwalk_reent+0x38>
  4047c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4047cc:	3301      	adds	r3, #1
  4047ce:	d003      	beq.n	4047d8 <_fwalk_reent+0x38>
  4047d0:	4629      	mov	r1, r5
  4047d2:	4640      	mov	r0, r8
  4047d4:	47c8      	blx	r9
  4047d6:	4306      	orrs	r6, r0
  4047d8:	3568      	adds	r5, #104	; 0x68
  4047da:	e7ee      	b.n	4047ba <_fwalk_reent+0x1a>

004047dc <_localeconv_r>:
  4047dc:	4b04      	ldr	r3, [pc, #16]	; (4047f0 <_localeconv_r+0x14>)
  4047de:	681b      	ldr	r3, [r3, #0]
  4047e0:	6a18      	ldr	r0, [r3, #32]
  4047e2:	4b04      	ldr	r3, [pc, #16]	; (4047f4 <_localeconv_r+0x18>)
  4047e4:	2800      	cmp	r0, #0
  4047e6:	bf08      	it	eq
  4047e8:	4618      	moveq	r0, r3
  4047ea:	30f0      	adds	r0, #240	; 0xf0
  4047ec:	4770      	bx	lr
  4047ee:	bf00      	nop
  4047f0:	20400048 	.word	0x20400048
  4047f4:	204000ac 	.word	0x204000ac

004047f8 <__swhatbuf_r>:
  4047f8:	b570      	push	{r4, r5, r6, lr}
  4047fa:	460e      	mov	r6, r1
  4047fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404800:	2900      	cmp	r1, #0
  404802:	b090      	sub	sp, #64	; 0x40
  404804:	4614      	mov	r4, r2
  404806:	461d      	mov	r5, r3
  404808:	da07      	bge.n	40481a <__swhatbuf_r+0x22>
  40480a:	2300      	movs	r3, #0
  40480c:	602b      	str	r3, [r5, #0]
  40480e:	89b3      	ldrh	r3, [r6, #12]
  404810:	061a      	lsls	r2, r3, #24
  404812:	d410      	bmi.n	404836 <__swhatbuf_r+0x3e>
  404814:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404818:	e00e      	b.n	404838 <__swhatbuf_r+0x40>
  40481a:	aa01      	add	r2, sp, #4
  40481c:	f000 fea6 	bl	40556c <_fstat_r>
  404820:	2800      	cmp	r0, #0
  404822:	dbf2      	blt.n	40480a <__swhatbuf_r+0x12>
  404824:	9a02      	ldr	r2, [sp, #8]
  404826:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40482a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  40482e:	425a      	negs	r2, r3
  404830:	415a      	adcs	r2, r3
  404832:	602a      	str	r2, [r5, #0]
  404834:	e7ee      	b.n	404814 <__swhatbuf_r+0x1c>
  404836:	2340      	movs	r3, #64	; 0x40
  404838:	2000      	movs	r0, #0
  40483a:	6023      	str	r3, [r4, #0]
  40483c:	b010      	add	sp, #64	; 0x40
  40483e:	bd70      	pop	{r4, r5, r6, pc}

00404840 <__smakebuf_r>:
  404840:	898b      	ldrh	r3, [r1, #12]
  404842:	b573      	push	{r0, r1, r4, r5, r6, lr}
  404844:	079d      	lsls	r5, r3, #30
  404846:	4606      	mov	r6, r0
  404848:	460c      	mov	r4, r1
  40484a:	d507      	bpl.n	40485c <__smakebuf_r+0x1c>
  40484c:	f104 0347 	add.w	r3, r4, #71	; 0x47
  404850:	6023      	str	r3, [r4, #0]
  404852:	6123      	str	r3, [r4, #16]
  404854:	2301      	movs	r3, #1
  404856:	6163      	str	r3, [r4, #20]
  404858:	b002      	add	sp, #8
  40485a:	bd70      	pop	{r4, r5, r6, pc}
  40485c:	ab01      	add	r3, sp, #4
  40485e:	466a      	mov	r2, sp
  404860:	f7ff ffca 	bl	4047f8 <__swhatbuf_r>
  404864:	9900      	ldr	r1, [sp, #0]
  404866:	4605      	mov	r5, r0
  404868:	4630      	mov	r0, r6
  40486a:	f000 fbad 	bl	404fc8 <_malloc_r>
  40486e:	b948      	cbnz	r0, 404884 <__smakebuf_r+0x44>
  404870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404874:	059a      	lsls	r2, r3, #22
  404876:	d4ef      	bmi.n	404858 <__smakebuf_r+0x18>
  404878:	f023 0303 	bic.w	r3, r3, #3
  40487c:	f043 0302 	orr.w	r3, r3, #2
  404880:	81a3      	strh	r3, [r4, #12]
  404882:	e7e3      	b.n	40484c <__smakebuf_r+0xc>
  404884:	4b0d      	ldr	r3, [pc, #52]	; (4048bc <__smakebuf_r+0x7c>)
  404886:	62b3      	str	r3, [r6, #40]	; 0x28
  404888:	89a3      	ldrh	r3, [r4, #12]
  40488a:	6020      	str	r0, [r4, #0]
  40488c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404890:	81a3      	strh	r3, [r4, #12]
  404892:	9b00      	ldr	r3, [sp, #0]
  404894:	6163      	str	r3, [r4, #20]
  404896:	9b01      	ldr	r3, [sp, #4]
  404898:	6120      	str	r0, [r4, #16]
  40489a:	b15b      	cbz	r3, 4048b4 <__smakebuf_r+0x74>
  40489c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4048a0:	4630      	mov	r0, r6
  4048a2:	f000 fe75 	bl	405590 <_isatty_r>
  4048a6:	b128      	cbz	r0, 4048b4 <__smakebuf_r+0x74>
  4048a8:	89a3      	ldrh	r3, [r4, #12]
  4048aa:	f023 0303 	bic.w	r3, r3, #3
  4048ae:	f043 0301 	orr.w	r3, r3, #1
  4048b2:	81a3      	strh	r3, [r4, #12]
  4048b4:	89a3      	ldrh	r3, [r4, #12]
  4048b6:	431d      	orrs	r5, r3
  4048b8:	81a5      	strh	r5, [r4, #12]
  4048ba:	e7cd      	b.n	404858 <__smakebuf_r+0x18>
  4048bc:	00404649 	.word	0x00404649

004048c0 <malloc>:
  4048c0:	4b02      	ldr	r3, [pc, #8]	; (4048cc <malloc+0xc>)
  4048c2:	4601      	mov	r1, r0
  4048c4:	6818      	ldr	r0, [r3, #0]
  4048c6:	f000 bb7f 	b.w	404fc8 <_malloc_r>
  4048ca:	bf00      	nop
  4048cc:	20400048 	.word	0x20400048

004048d0 <memchr>:
  4048d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4048d4:	2a10      	cmp	r2, #16
  4048d6:	db2b      	blt.n	404930 <memchr+0x60>
  4048d8:	f010 0f07 	tst.w	r0, #7
  4048dc:	d008      	beq.n	4048f0 <memchr+0x20>
  4048de:	f810 3b01 	ldrb.w	r3, [r0], #1
  4048e2:	3a01      	subs	r2, #1
  4048e4:	428b      	cmp	r3, r1
  4048e6:	d02d      	beq.n	404944 <memchr+0x74>
  4048e8:	f010 0f07 	tst.w	r0, #7
  4048ec:	b342      	cbz	r2, 404940 <memchr+0x70>
  4048ee:	d1f6      	bne.n	4048de <memchr+0xe>
  4048f0:	b4f0      	push	{r4, r5, r6, r7}
  4048f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4048f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4048fa:	f022 0407 	bic.w	r4, r2, #7
  4048fe:	f07f 0700 	mvns.w	r7, #0
  404902:	2300      	movs	r3, #0
  404904:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404908:	3c08      	subs	r4, #8
  40490a:	ea85 0501 	eor.w	r5, r5, r1
  40490e:	ea86 0601 	eor.w	r6, r6, r1
  404912:	fa85 f547 	uadd8	r5, r5, r7
  404916:	faa3 f587 	sel	r5, r3, r7
  40491a:	fa86 f647 	uadd8	r6, r6, r7
  40491e:	faa5 f687 	sel	r6, r5, r7
  404922:	b98e      	cbnz	r6, 404948 <memchr+0x78>
  404924:	d1ee      	bne.n	404904 <memchr+0x34>
  404926:	bcf0      	pop	{r4, r5, r6, r7}
  404928:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40492c:	f002 0207 	and.w	r2, r2, #7
  404930:	b132      	cbz	r2, 404940 <memchr+0x70>
  404932:	f810 3b01 	ldrb.w	r3, [r0], #1
  404936:	3a01      	subs	r2, #1
  404938:	ea83 0301 	eor.w	r3, r3, r1
  40493c:	b113      	cbz	r3, 404944 <memchr+0x74>
  40493e:	d1f8      	bne.n	404932 <memchr+0x62>
  404940:	2000      	movs	r0, #0
  404942:	4770      	bx	lr
  404944:	3801      	subs	r0, #1
  404946:	4770      	bx	lr
  404948:	2d00      	cmp	r5, #0
  40494a:	bf06      	itte	eq
  40494c:	4635      	moveq	r5, r6
  40494e:	3803      	subeq	r0, #3
  404950:	3807      	subne	r0, #7
  404952:	f015 0f01 	tst.w	r5, #1
  404956:	d107      	bne.n	404968 <memchr+0x98>
  404958:	3001      	adds	r0, #1
  40495a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40495e:	bf02      	ittt	eq
  404960:	3001      	addeq	r0, #1
  404962:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404966:	3001      	addeq	r0, #1
  404968:	bcf0      	pop	{r4, r5, r6, r7}
  40496a:	3801      	subs	r0, #1
  40496c:	4770      	bx	lr
  40496e:	bf00      	nop

00404970 <_Balloc>:
  404970:	b570      	push	{r4, r5, r6, lr}
  404972:	6a45      	ldr	r5, [r0, #36]	; 0x24
  404974:	4604      	mov	r4, r0
  404976:	460e      	mov	r6, r1
  404978:	b93d      	cbnz	r5, 40498a <_Balloc+0x1a>
  40497a:	2010      	movs	r0, #16
  40497c:	f7ff ffa0 	bl	4048c0 <malloc>
  404980:	6260      	str	r0, [r4, #36]	; 0x24
  404982:	6045      	str	r5, [r0, #4]
  404984:	6085      	str	r5, [r0, #8]
  404986:	6005      	str	r5, [r0, #0]
  404988:	60c5      	str	r5, [r0, #12]
  40498a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40498c:	68eb      	ldr	r3, [r5, #12]
  40498e:	b183      	cbz	r3, 4049b2 <_Balloc+0x42>
  404990:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404992:	68db      	ldr	r3, [r3, #12]
  404994:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  404998:	b9b8      	cbnz	r0, 4049ca <_Balloc+0x5a>
  40499a:	2101      	movs	r1, #1
  40499c:	fa01 f506 	lsl.w	r5, r1, r6
  4049a0:	1d6a      	adds	r2, r5, #5
  4049a2:	0092      	lsls	r2, r2, #2
  4049a4:	4620      	mov	r0, r4
  4049a6:	f000 fab3 	bl	404f10 <_calloc_r>
  4049aa:	b160      	cbz	r0, 4049c6 <_Balloc+0x56>
  4049ac:	6046      	str	r6, [r0, #4]
  4049ae:	6085      	str	r5, [r0, #8]
  4049b0:	e00e      	b.n	4049d0 <_Balloc+0x60>
  4049b2:	2221      	movs	r2, #33	; 0x21
  4049b4:	2104      	movs	r1, #4
  4049b6:	4620      	mov	r0, r4
  4049b8:	f000 faaa 	bl	404f10 <_calloc_r>
  4049bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4049be:	60e8      	str	r0, [r5, #12]
  4049c0:	68db      	ldr	r3, [r3, #12]
  4049c2:	2b00      	cmp	r3, #0
  4049c4:	d1e4      	bne.n	404990 <_Balloc+0x20>
  4049c6:	2000      	movs	r0, #0
  4049c8:	bd70      	pop	{r4, r5, r6, pc}
  4049ca:	6802      	ldr	r2, [r0, #0]
  4049cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  4049d0:	2300      	movs	r3, #0
  4049d2:	6103      	str	r3, [r0, #16]
  4049d4:	60c3      	str	r3, [r0, #12]
  4049d6:	bd70      	pop	{r4, r5, r6, pc}

004049d8 <_Bfree>:
  4049d8:	b570      	push	{r4, r5, r6, lr}
  4049da:	6a44      	ldr	r4, [r0, #36]	; 0x24
  4049dc:	4606      	mov	r6, r0
  4049de:	460d      	mov	r5, r1
  4049e0:	b93c      	cbnz	r4, 4049f2 <_Bfree+0x1a>
  4049e2:	2010      	movs	r0, #16
  4049e4:	f7ff ff6c 	bl	4048c0 <malloc>
  4049e8:	6270      	str	r0, [r6, #36]	; 0x24
  4049ea:	6044      	str	r4, [r0, #4]
  4049ec:	6084      	str	r4, [r0, #8]
  4049ee:	6004      	str	r4, [r0, #0]
  4049f0:	60c4      	str	r4, [r0, #12]
  4049f2:	b13d      	cbz	r5, 404a04 <_Bfree+0x2c>
  4049f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4049f6:	686a      	ldr	r2, [r5, #4]
  4049f8:	68db      	ldr	r3, [r3, #12]
  4049fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4049fe:	6029      	str	r1, [r5, #0]
  404a00:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  404a04:	bd70      	pop	{r4, r5, r6, pc}

00404a06 <__multadd>:
  404a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404a0a:	690d      	ldr	r5, [r1, #16]
  404a0c:	461f      	mov	r7, r3
  404a0e:	4606      	mov	r6, r0
  404a10:	460c      	mov	r4, r1
  404a12:	f101 0e14 	add.w	lr, r1, #20
  404a16:	2300      	movs	r3, #0
  404a18:	f8de 0000 	ldr.w	r0, [lr]
  404a1c:	b281      	uxth	r1, r0
  404a1e:	fb02 7101 	mla	r1, r2, r1, r7
  404a22:	0c0f      	lsrs	r7, r1, #16
  404a24:	0c00      	lsrs	r0, r0, #16
  404a26:	fb02 7000 	mla	r0, r2, r0, r7
  404a2a:	b289      	uxth	r1, r1
  404a2c:	3301      	adds	r3, #1
  404a2e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  404a32:	429d      	cmp	r5, r3
  404a34:	ea4f 4710 	mov.w	r7, r0, lsr #16
  404a38:	f84e 1b04 	str.w	r1, [lr], #4
  404a3c:	dcec      	bgt.n	404a18 <__multadd+0x12>
  404a3e:	b1d7      	cbz	r7, 404a76 <__multadd+0x70>
  404a40:	68a3      	ldr	r3, [r4, #8]
  404a42:	429d      	cmp	r5, r3
  404a44:	db12      	blt.n	404a6c <__multadd+0x66>
  404a46:	6861      	ldr	r1, [r4, #4]
  404a48:	4630      	mov	r0, r6
  404a4a:	3101      	adds	r1, #1
  404a4c:	f7ff ff90 	bl	404970 <_Balloc>
  404a50:	6922      	ldr	r2, [r4, #16]
  404a52:	3202      	adds	r2, #2
  404a54:	f104 010c 	add.w	r1, r4, #12
  404a58:	4680      	mov	r8, r0
  404a5a:	0092      	lsls	r2, r2, #2
  404a5c:	300c      	adds	r0, #12
  404a5e:	f7fe f99b 	bl	402d98 <memcpy>
  404a62:	4621      	mov	r1, r4
  404a64:	4630      	mov	r0, r6
  404a66:	f7ff ffb7 	bl	4049d8 <_Bfree>
  404a6a:	4644      	mov	r4, r8
  404a6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  404a70:	3501      	adds	r5, #1
  404a72:	615f      	str	r7, [r3, #20]
  404a74:	6125      	str	r5, [r4, #16]
  404a76:	4620      	mov	r0, r4
  404a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404a7c <__hi0bits>:
  404a7c:	0c02      	lsrs	r2, r0, #16
  404a7e:	0412      	lsls	r2, r2, #16
  404a80:	4603      	mov	r3, r0
  404a82:	b9b2      	cbnz	r2, 404ab2 <__hi0bits+0x36>
  404a84:	0403      	lsls	r3, r0, #16
  404a86:	2010      	movs	r0, #16
  404a88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  404a8c:	bf04      	itt	eq
  404a8e:	021b      	lsleq	r3, r3, #8
  404a90:	3008      	addeq	r0, #8
  404a92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  404a96:	bf04      	itt	eq
  404a98:	011b      	lsleq	r3, r3, #4
  404a9a:	3004      	addeq	r0, #4
  404a9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  404aa0:	bf04      	itt	eq
  404aa2:	009b      	lsleq	r3, r3, #2
  404aa4:	3002      	addeq	r0, #2
  404aa6:	2b00      	cmp	r3, #0
  404aa8:	db06      	blt.n	404ab8 <__hi0bits+0x3c>
  404aaa:	005b      	lsls	r3, r3, #1
  404aac:	d503      	bpl.n	404ab6 <__hi0bits+0x3a>
  404aae:	3001      	adds	r0, #1
  404ab0:	4770      	bx	lr
  404ab2:	2000      	movs	r0, #0
  404ab4:	e7e8      	b.n	404a88 <__hi0bits+0xc>
  404ab6:	2020      	movs	r0, #32
  404ab8:	4770      	bx	lr

00404aba <__lo0bits>:
  404aba:	6803      	ldr	r3, [r0, #0]
  404abc:	f013 0207 	ands.w	r2, r3, #7
  404ac0:	4601      	mov	r1, r0
  404ac2:	d00b      	beq.n	404adc <__lo0bits+0x22>
  404ac4:	07da      	lsls	r2, r3, #31
  404ac6:	d423      	bmi.n	404b10 <__lo0bits+0x56>
  404ac8:	0798      	lsls	r0, r3, #30
  404aca:	bf49      	itett	mi
  404acc:	085b      	lsrmi	r3, r3, #1
  404ace:	089b      	lsrpl	r3, r3, #2
  404ad0:	2001      	movmi	r0, #1
  404ad2:	600b      	strmi	r3, [r1, #0]
  404ad4:	bf5c      	itt	pl
  404ad6:	600b      	strpl	r3, [r1, #0]
  404ad8:	2002      	movpl	r0, #2
  404ada:	4770      	bx	lr
  404adc:	b298      	uxth	r0, r3
  404ade:	b9a8      	cbnz	r0, 404b0c <__lo0bits+0x52>
  404ae0:	0c1b      	lsrs	r3, r3, #16
  404ae2:	2010      	movs	r0, #16
  404ae4:	f013 0fff 	tst.w	r3, #255	; 0xff
  404ae8:	bf04      	itt	eq
  404aea:	0a1b      	lsreq	r3, r3, #8
  404aec:	3008      	addeq	r0, #8
  404aee:	071a      	lsls	r2, r3, #28
  404af0:	bf04      	itt	eq
  404af2:	091b      	lsreq	r3, r3, #4
  404af4:	3004      	addeq	r0, #4
  404af6:	079a      	lsls	r2, r3, #30
  404af8:	bf04      	itt	eq
  404afa:	089b      	lsreq	r3, r3, #2
  404afc:	3002      	addeq	r0, #2
  404afe:	07da      	lsls	r2, r3, #31
  404b00:	d402      	bmi.n	404b08 <__lo0bits+0x4e>
  404b02:	085b      	lsrs	r3, r3, #1
  404b04:	d006      	beq.n	404b14 <__lo0bits+0x5a>
  404b06:	3001      	adds	r0, #1
  404b08:	600b      	str	r3, [r1, #0]
  404b0a:	4770      	bx	lr
  404b0c:	4610      	mov	r0, r2
  404b0e:	e7e9      	b.n	404ae4 <__lo0bits+0x2a>
  404b10:	2000      	movs	r0, #0
  404b12:	4770      	bx	lr
  404b14:	2020      	movs	r0, #32
  404b16:	4770      	bx	lr

00404b18 <__i2b>:
  404b18:	b510      	push	{r4, lr}
  404b1a:	460c      	mov	r4, r1
  404b1c:	2101      	movs	r1, #1
  404b1e:	f7ff ff27 	bl	404970 <_Balloc>
  404b22:	2201      	movs	r2, #1
  404b24:	6144      	str	r4, [r0, #20]
  404b26:	6102      	str	r2, [r0, #16]
  404b28:	bd10      	pop	{r4, pc}

00404b2a <__multiply>:
  404b2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b2e:	4614      	mov	r4, r2
  404b30:	690a      	ldr	r2, [r1, #16]
  404b32:	6923      	ldr	r3, [r4, #16]
  404b34:	429a      	cmp	r2, r3
  404b36:	bfb8      	it	lt
  404b38:	460b      	movlt	r3, r1
  404b3a:	4689      	mov	r9, r1
  404b3c:	bfbc      	itt	lt
  404b3e:	46a1      	movlt	r9, r4
  404b40:	461c      	movlt	r4, r3
  404b42:	f8d9 7010 	ldr.w	r7, [r9, #16]
  404b46:	f8d4 a010 	ldr.w	sl, [r4, #16]
  404b4a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  404b4e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  404b52:	eb07 060a 	add.w	r6, r7, sl
  404b56:	429e      	cmp	r6, r3
  404b58:	bfc8      	it	gt
  404b5a:	3101      	addgt	r1, #1
  404b5c:	f7ff ff08 	bl	404970 <_Balloc>
  404b60:	f100 0514 	add.w	r5, r0, #20
  404b64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  404b68:	462b      	mov	r3, r5
  404b6a:	2200      	movs	r2, #0
  404b6c:	4543      	cmp	r3, r8
  404b6e:	d316      	bcc.n	404b9e <__multiply+0x74>
  404b70:	f104 0214 	add.w	r2, r4, #20
  404b74:	f109 0114 	add.w	r1, r9, #20
  404b78:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  404b7c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  404b80:	9301      	str	r3, [sp, #4]
  404b82:	9c01      	ldr	r4, [sp, #4]
  404b84:	4294      	cmp	r4, r2
  404b86:	4613      	mov	r3, r2
  404b88:	d80c      	bhi.n	404ba4 <__multiply+0x7a>
  404b8a:	2e00      	cmp	r6, #0
  404b8c:	dd03      	ble.n	404b96 <__multiply+0x6c>
  404b8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  404b92:	2b00      	cmp	r3, #0
  404b94:	d054      	beq.n	404c40 <__multiply+0x116>
  404b96:	6106      	str	r6, [r0, #16]
  404b98:	b003      	add	sp, #12
  404b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b9e:	f843 2b04 	str.w	r2, [r3], #4
  404ba2:	e7e3      	b.n	404b6c <__multiply+0x42>
  404ba4:	f8b3 a000 	ldrh.w	sl, [r3]
  404ba8:	3204      	adds	r2, #4
  404baa:	f1ba 0f00 	cmp.w	sl, #0
  404bae:	d020      	beq.n	404bf2 <__multiply+0xc8>
  404bb0:	46ae      	mov	lr, r5
  404bb2:	4689      	mov	r9, r1
  404bb4:	f04f 0c00 	mov.w	ip, #0
  404bb8:	f859 4b04 	ldr.w	r4, [r9], #4
  404bbc:	f8be b000 	ldrh.w	fp, [lr]
  404bc0:	b2a3      	uxth	r3, r4
  404bc2:	fb0a b303 	mla	r3, sl, r3, fp
  404bc6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  404bca:	f8de 4000 	ldr.w	r4, [lr]
  404bce:	4463      	add	r3, ip
  404bd0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  404bd4:	fb0a c40b 	mla	r4, sl, fp, ip
  404bd8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  404bdc:	b29b      	uxth	r3, r3
  404bde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  404be2:	454f      	cmp	r7, r9
  404be4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  404be8:	f84e 3b04 	str.w	r3, [lr], #4
  404bec:	d8e4      	bhi.n	404bb8 <__multiply+0x8e>
  404bee:	f8ce c000 	str.w	ip, [lr]
  404bf2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  404bf6:	f1b9 0f00 	cmp.w	r9, #0
  404bfa:	d01f      	beq.n	404c3c <__multiply+0x112>
  404bfc:	682b      	ldr	r3, [r5, #0]
  404bfe:	46ae      	mov	lr, r5
  404c00:	468c      	mov	ip, r1
  404c02:	f04f 0a00 	mov.w	sl, #0
  404c06:	f8bc 4000 	ldrh.w	r4, [ip]
  404c0a:	f8be b002 	ldrh.w	fp, [lr, #2]
  404c0e:	fb09 b404 	mla	r4, r9, r4, fp
  404c12:	44a2      	add	sl, r4
  404c14:	b29b      	uxth	r3, r3
  404c16:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  404c1a:	f84e 3b04 	str.w	r3, [lr], #4
  404c1e:	f85c 3b04 	ldr.w	r3, [ip], #4
  404c22:	f8be 4000 	ldrh.w	r4, [lr]
  404c26:	0c1b      	lsrs	r3, r3, #16
  404c28:	fb09 4303 	mla	r3, r9, r3, r4
  404c2c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  404c30:	4567      	cmp	r7, ip
  404c32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  404c36:	d8e6      	bhi.n	404c06 <__multiply+0xdc>
  404c38:	f8ce 3000 	str.w	r3, [lr]
  404c3c:	3504      	adds	r5, #4
  404c3e:	e7a0      	b.n	404b82 <__multiply+0x58>
  404c40:	3e01      	subs	r6, #1
  404c42:	e7a2      	b.n	404b8a <__multiply+0x60>

00404c44 <__pow5mult>:
  404c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404c48:	4615      	mov	r5, r2
  404c4a:	f012 0203 	ands.w	r2, r2, #3
  404c4e:	4606      	mov	r6, r0
  404c50:	460f      	mov	r7, r1
  404c52:	d007      	beq.n	404c64 <__pow5mult+0x20>
  404c54:	3a01      	subs	r2, #1
  404c56:	4c21      	ldr	r4, [pc, #132]	; (404cdc <__pow5mult+0x98>)
  404c58:	2300      	movs	r3, #0
  404c5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  404c5e:	f7ff fed2 	bl	404a06 <__multadd>
  404c62:	4607      	mov	r7, r0
  404c64:	10ad      	asrs	r5, r5, #2
  404c66:	d035      	beq.n	404cd4 <__pow5mult+0x90>
  404c68:	6a74      	ldr	r4, [r6, #36]	; 0x24
  404c6a:	b93c      	cbnz	r4, 404c7c <__pow5mult+0x38>
  404c6c:	2010      	movs	r0, #16
  404c6e:	f7ff fe27 	bl	4048c0 <malloc>
  404c72:	6270      	str	r0, [r6, #36]	; 0x24
  404c74:	6044      	str	r4, [r0, #4]
  404c76:	6084      	str	r4, [r0, #8]
  404c78:	6004      	str	r4, [r0, #0]
  404c7a:	60c4      	str	r4, [r0, #12]
  404c7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  404c80:	f8d8 4008 	ldr.w	r4, [r8, #8]
  404c84:	b94c      	cbnz	r4, 404c9a <__pow5mult+0x56>
  404c86:	f240 2171 	movw	r1, #625	; 0x271
  404c8a:	4630      	mov	r0, r6
  404c8c:	f7ff ff44 	bl	404b18 <__i2b>
  404c90:	2300      	movs	r3, #0
  404c92:	f8c8 0008 	str.w	r0, [r8, #8]
  404c96:	4604      	mov	r4, r0
  404c98:	6003      	str	r3, [r0, #0]
  404c9a:	f04f 0800 	mov.w	r8, #0
  404c9e:	07eb      	lsls	r3, r5, #31
  404ca0:	d50a      	bpl.n	404cb8 <__pow5mult+0x74>
  404ca2:	4639      	mov	r1, r7
  404ca4:	4622      	mov	r2, r4
  404ca6:	4630      	mov	r0, r6
  404ca8:	f7ff ff3f 	bl	404b2a <__multiply>
  404cac:	4639      	mov	r1, r7
  404cae:	4681      	mov	r9, r0
  404cb0:	4630      	mov	r0, r6
  404cb2:	f7ff fe91 	bl	4049d8 <_Bfree>
  404cb6:	464f      	mov	r7, r9
  404cb8:	106d      	asrs	r5, r5, #1
  404cba:	d00b      	beq.n	404cd4 <__pow5mult+0x90>
  404cbc:	6820      	ldr	r0, [r4, #0]
  404cbe:	b938      	cbnz	r0, 404cd0 <__pow5mult+0x8c>
  404cc0:	4622      	mov	r2, r4
  404cc2:	4621      	mov	r1, r4
  404cc4:	4630      	mov	r0, r6
  404cc6:	f7ff ff30 	bl	404b2a <__multiply>
  404cca:	6020      	str	r0, [r4, #0]
  404ccc:	f8c0 8000 	str.w	r8, [r0]
  404cd0:	4604      	mov	r4, r0
  404cd2:	e7e4      	b.n	404c9e <__pow5mult+0x5a>
  404cd4:	4638      	mov	r0, r7
  404cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404cda:	bf00      	nop
  404cdc:	00405ca8 	.word	0x00405ca8

00404ce0 <__lshift>:
  404ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404ce4:	460c      	mov	r4, r1
  404ce6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  404cea:	6923      	ldr	r3, [r4, #16]
  404cec:	6849      	ldr	r1, [r1, #4]
  404cee:	eb0a 0903 	add.w	r9, sl, r3
  404cf2:	68a3      	ldr	r3, [r4, #8]
  404cf4:	4607      	mov	r7, r0
  404cf6:	4616      	mov	r6, r2
  404cf8:	f109 0501 	add.w	r5, r9, #1
  404cfc:	42ab      	cmp	r3, r5
  404cfe:	db31      	blt.n	404d64 <__lshift+0x84>
  404d00:	4638      	mov	r0, r7
  404d02:	f7ff fe35 	bl	404970 <_Balloc>
  404d06:	2200      	movs	r2, #0
  404d08:	4680      	mov	r8, r0
  404d0a:	f100 0314 	add.w	r3, r0, #20
  404d0e:	4611      	mov	r1, r2
  404d10:	4552      	cmp	r2, sl
  404d12:	db2a      	blt.n	404d6a <__lshift+0x8a>
  404d14:	6920      	ldr	r0, [r4, #16]
  404d16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  404d1a:	f104 0114 	add.w	r1, r4, #20
  404d1e:	f016 021f 	ands.w	r2, r6, #31
  404d22:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  404d26:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  404d2a:	d022      	beq.n	404d72 <__lshift+0x92>
  404d2c:	f1c2 0c20 	rsb	ip, r2, #32
  404d30:	2000      	movs	r0, #0
  404d32:	680e      	ldr	r6, [r1, #0]
  404d34:	4096      	lsls	r6, r2
  404d36:	4330      	orrs	r0, r6
  404d38:	f843 0b04 	str.w	r0, [r3], #4
  404d3c:	f851 0b04 	ldr.w	r0, [r1], #4
  404d40:	458e      	cmp	lr, r1
  404d42:	fa20 f00c 	lsr.w	r0, r0, ip
  404d46:	d8f4      	bhi.n	404d32 <__lshift+0x52>
  404d48:	6018      	str	r0, [r3, #0]
  404d4a:	b108      	cbz	r0, 404d50 <__lshift+0x70>
  404d4c:	f109 0502 	add.w	r5, r9, #2
  404d50:	3d01      	subs	r5, #1
  404d52:	4638      	mov	r0, r7
  404d54:	f8c8 5010 	str.w	r5, [r8, #16]
  404d58:	4621      	mov	r1, r4
  404d5a:	f7ff fe3d 	bl	4049d8 <_Bfree>
  404d5e:	4640      	mov	r0, r8
  404d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404d64:	3101      	adds	r1, #1
  404d66:	005b      	lsls	r3, r3, #1
  404d68:	e7c8      	b.n	404cfc <__lshift+0x1c>
  404d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  404d6e:	3201      	adds	r2, #1
  404d70:	e7ce      	b.n	404d10 <__lshift+0x30>
  404d72:	3b04      	subs	r3, #4
  404d74:	f851 2b04 	ldr.w	r2, [r1], #4
  404d78:	f843 2f04 	str.w	r2, [r3, #4]!
  404d7c:	458e      	cmp	lr, r1
  404d7e:	d8f9      	bhi.n	404d74 <__lshift+0x94>
  404d80:	e7e6      	b.n	404d50 <__lshift+0x70>

00404d82 <__mcmp>:
  404d82:	6903      	ldr	r3, [r0, #16]
  404d84:	690a      	ldr	r2, [r1, #16]
  404d86:	1a9b      	subs	r3, r3, r2
  404d88:	b530      	push	{r4, r5, lr}
  404d8a:	d10c      	bne.n	404da6 <__mcmp+0x24>
  404d8c:	0092      	lsls	r2, r2, #2
  404d8e:	3014      	adds	r0, #20
  404d90:	3114      	adds	r1, #20
  404d92:	1884      	adds	r4, r0, r2
  404d94:	4411      	add	r1, r2
  404d96:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  404d9a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  404d9e:	4295      	cmp	r5, r2
  404da0:	d003      	beq.n	404daa <__mcmp+0x28>
  404da2:	d305      	bcc.n	404db0 <__mcmp+0x2e>
  404da4:	2301      	movs	r3, #1
  404da6:	4618      	mov	r0, r3
  404da8:	bd30      	pop	{r4, r5, pc}
  404daa:	42a0      	cmp	r0, r4
  404dac:	d3f3      	bcc.n	404d96 <__mcmp+0x14>
  404dae:	e7fa      	b.n	404da6 <__mcmp+0x24>
  404db0:	f04f 33ff 	mov.w	r3, #4294967295
  404db4:	e7f7      	b.n	404da6 <__mcmp+0x24>

00404db6 <__mdiff>:
  404db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404dba:	460d      	mov	r5, r1
  404dbc:	4607      	mov	r7, r0
  404dbe:	4611      	mov	r1, r2
  404dc0:	4628      	mov	r0, r5
  404dc2:	4614      	mov	r4, r2
  404dc4:	f7ff ffdd 	bl	404d82 <__mcmp>
  404dc8:	1e06      	subs	r6, r0, #0
  404dca:	d108      	bne.n	404dde <__mdiff+0x28>
  404dcc:	4631      	mov	r1, r6
  404dce:	4638      	mov	r0, r7
  404dd0:	f7ff fdce 	bl	404970 <_Balloc>
  404dd4:	2301      	movs	r3, #1
  404dd6:	6103      	str	r3, [r0, #16]
  404dd8:	6146      	str	r6, [r0, #20]
  404dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404dde:	bfa4      	itt	ge
  404de0:	4623      	movge	r3, r4
  404de2:	462c      	movge	r4, r5
  404de4:	4638      	mov	r0, r7
  404de6:	6861      	ldr	r1, [r4, #4]
  404de8:	bfa6      	itte	ge
  404dea:	461d      	movge	r5, r3
  404dec:	2600      	movge	r6, #0
  404dee:	2601      	movlt	r6, #1
  404df0:	f7ff fdbe 	bl	404970 <_Balloc>
  404df4:	692b      	ldr	r3, [r5, #16]
  404df6:	60c6      	str	r6, [r0, #12]
  404df8:	6926      	ldr	r6, [r4, #16]
  404dfa:	f105 0914 	add.w	r9, r5, #20
  404dfe:	f104 0214 	add.w	r2, r4, #20
  404e02:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  404e06:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  404e0a:	f100 0514 	add.w	r5, r0, #20
  404e0e:	f04f 0c00 	mov.w	ip, #0
  404e12:	f852 ab04 	ldr.w	sl, [r2], #4
  404e16:	f859 4b04 	ldr.w	r4, [r9], #4
  404e1a:	fa1c f18a 	uxtah	r1, ip, sl
  404e1e:	b2a3      	uxth	r3, r4
  404e20:	1ac9      	subs	r1, r1, r3
  404e22:	0c23      	lsrs	r3, r4, #16
  404e24:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  404e28:	eb03 4321 	add.w	r3, r3, r1, asr #16
  404e2c:	b289      	uxth	r1, r1
  404e2e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  404e32:	45c8      	cmp	r8, r9
  404e34:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  404e38:	4696      	mov	lr, r2
  404e3a:	f845 3b04 	str.w	r3, [r5], #4
  404e3e:	d8e8      	bhi.n	404e12 <__mdiff+0x5c>
  404e40:	45be      	cmp	lr, r7
  404e42:	d305      	bcc.n	404e50 <__mdiff+0x9a>
  404e44:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404e48:	b18b      	cbz	r3, 404e6e <__mdiff+0xb8>
  404e4a:	6106      	str	r6, [r0, #16]
  404e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404e50:	f85e 1b04 	ldr.w	r1, [lr], #4
  404e54:	fa1c f381 	uxtah	r3, ip, r1
  404e58:	141a      	asrs	r2, r3, #16
  404e5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  404e5e:	b29b      	uxth	r3, r3
  404e60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404e64:	ea4f 4c22 	mov.w	ip, r2, asr #16
  404e68:	f845 3b04 	str.w	r3, [r5], #4
  404e6c:	e7e8      	b.n	404e40 <__mdiff+0x8a>
  404e6e:	3e01      	subs	r6, #1
  404e70:	e7e8      	b.n	404e44 <__mdiff+0x8e>

00404e72 <__d2b>:
  404e72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  404e76:	2101      	movs	r1, #1
  404e78:	461c      	mov	r4, r3
  404e7a:	4690      	mov	r8, r2
  404e7c:	9e08      	ldr	r6, [sp, #32]
  404e7e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404e80:	f7ff fd76 	bl	404970 <_Balloc>
  404e84:	f3c4 0213 	ubfx	r2, r4, #0, #20
  404e88:	f3c4 540a 	ubfx	r4, r4, #20, #11
  404e8c:	4607      	mov	r7, r0
  404e8e:	bb34      	cbnz	r4, 404ede <__d2b+0x6c>
  404e90:	9201      	str	r2, [sp, #4]
  404e92:	f1b8 0f00 	cmp.w	r8, #0
  404e96:	d027      	beq.n	404ee8 <__d2b+0x76>
  404e98:	a802      	add	r0, sp, #8
  404e9a:	f840 8d08 	str.w	r8, [r0, #-8]!
  404e9e:	f7ff fe0c 	bl	404aba <__lo0bits>
  404ea2:	9900      	ldr	r1, [sp, #0]
  404ea4:	b1f0      	cbz	r0, 404ee4 <__d2b+0x72>
  404ea6:	9a01      	ldr	r2, [sp, #4]
  404ea8:	f1c0 0320 	rsb	r3, r0, #32
  404eac:	fa02 f303 	lsl.w	r3, r2, r3
  404eb0:	430b      	orrs	r3, r1
  404eb2:	40c2      	lsrs	r2, r0
  404eb4:	617b      	str	r3, [r7, #20]
  404eb6:	9201      	str	r2, [sp, #4]
  404eb8:	9b01      	ldr	r3, [sp, #4]
  404eba:	61bb      	str	r3, [r7, #24]
  404ebc:	2b00      	cmp	r3, #0
  404ebe:	bf14      	ite	ne
  404ec0:	2102      	movne	r1, #2
  404ec2:	2101      	moveq	r1, #1
  404ec4:	6139      	str	r1, [r7, #16]
  404ec6:	b1c4      	cbz	r4, 404efa <__d2b+0x88>
  404ec8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  404ecc:	4404      	add	r4, r0
  404ece:	6034      	str	r4, [r6, #0]
  404ed0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  404ed4:	6028      	str	r0, [r5, #0]
  404ed6:	4638      	mov	r0, r7
  404ed8:	b002      	add	sp, #8
  404eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404ede:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  404ee2:	e7d5      	b.n	404e90 <__d2b+0x1e>
  404ee4:	6179      	str	r1, [r7, #20]
  404ee6:	e7e7      	b.n	404eb8 <__d2b+0x46>
  404ee8:	a801      	add	r0, sp, #4
  404eea:	f7ff fde6 	bl	404aba <__lo0bits>
  404eee:	9b01      	ldr	r3, [sp, #4]
  404ef0:	617b      	str	r3, [r7, #20]
  404ef2:	2101      	movs	r1, #1
  404ef4:	6139      	str	r1, [r7, #16]
  404ef6:	3020      	adds	r0, #32
  404ef8:	e7e5      	b.n	404ec6 <__d2b+0x54>
  404efa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  404efe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  404f02:	6030      	str	r0, [r6, #0]
  404f04:	6918      	ldr	r0, [r3, #16]
  404f06:	f7ff fdb9 	bl	404a7c <__hi0bits>
  404f0a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  404f0e:	e7e1      	b.n	404ed4 <__d2b+0x62>

00404f10 <_calloc_r>:
  404f10:	b538      	push	{r3, r4, r5, lr}
  404f12:	fb02 f401 	mul.w	r4, r2, r1
  404f16:	4621      	mov	r1, r4
  404f18:	f000 f856 	bl	404fc8 <_malloc_r>
  404f1c:	4605      	mov	r5, r0
  404f1e:	b118      	cbz	r0, 404f28 <_calloc_r+0x18>
  404f20:	4622      	mov	r2, r4
  404f22:	2100      	movs	r1, #0
  404f24:	f7fd ff43 	bl	402dae <memset>
  404f28:	4628      	mov	r0, r5
  404f2a:	bd38      	pop	{r3, r4, r5, pc}

00404f2c <_free_r>:
  404f2c:	b538      	push	{r3, r4, r5, lr}
  404f2e:	4605      	mov	r5, r0
  404f30:	2900      	cmp	r1, #0
  404f32:	d045      	beq.n	404fc0 <_free_r+0x94>
  404f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
  404f38:	1f0c      	subs	r4, r1, #4
  404f3a:	2b00      	cmp	r3, #0
  404f3c:	bfb8      	it	lt
  404f3e:	18e4      	addlt	r4, r4, r3
  404f40:	f000 fb5a 	bl	4055f8 <__malloc_lock>
  404f44:	4a1f      	ldr	r2, [pc, #124]	; (404fc4 <_free_r+0x98>)
  404f46:	6813      	ldr	r3, [r2, #0]
  404f48:	4610      	mov	r0, r2
  404f4a:	b933      	cbnz	r3, 404f5a <_free_r+0x2e>
  404f4c:	6063      	str	r3, [r4, #4]
  404f4e:	6014      	str	r4, [r2, #0]
  404f50:	4628      	mov	r0, r5
  404f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404f56:	f000 bb50 	b.w	4055fa <__malloc_unlock>
  404f5a:	42a3      	cmp	r3, r4
  404f5c:	d90c      	bls.n	404f78 <_free_r+0x4c>
  404f5e:	6821      	ldr	r1, [r4, #0]
  404f60:	1862      	adds	r2, r4, r1
  404f62:	4293      	cmp	r3, r2
  404f64:	bf04      	itt	eq
  404f66:	681a      	ldreq	r2, [r3, #0]
  404f68:	685b      	ldreq	r3, [r3, #4]
  404f6a:	6063      	str	r3, [r4, #4]
  404f6c:	bf04      	itt	eq
  404f6e:	1852      	addeq	r2, r2, r1
  404f70:	6022      	streq	r2, [r4, #0]
  404f72:	6004      	str	r4, [r0, #0]
  404f74:	e7ec      	b.n	404f50 <_free_r+0x24>
  404f76:	4613      	mov	r3, r2
  404f78:	685a      	ldr	r2, [r3, #4]
  404f7a:	b10a      	cbz	r2, 404f80 <_free_r+0x54>
  404f7c:	42a2      	cmp	r2, r4
  404f7e:	d9fa      	bls.n	404f76 <_free_r+0x4a>
  404f80:	6819      	ldr	r1, [r3, #0]
  404f82:	1858      	adds	r0, r3, r1
  404f84:	42a0      	cmp	r0, r4
  404f86:	d10b      	bne.n	404fa0 <_free_r+0x74>
  404f88:	6820      	ldr	r0, [r4, #0]
  404f8a:	4401      	add	r1, r0
  404f8c:	1858      	adds	r0, r3, r1
  404f8e:	4282      	cmp	r2, r0
  404f90:	6019      	str	r1, [r3, #0]
  404f92:	d1dd      	bne.n	404f50 <_free_r+0x24>
  404f94:	6810      	ldr	r0, [r2, #0]
  404f96:	6852      	ldr	r2, [r2, #4]
  404f98:	605a      	str	r2, [r3, #4]
  404f9a:	4401      	add	r1, r0
  404f9c:	6019      	str	r1, [r3, #0]
  404f9e:	e7d7      	b.n	404f50 <_free_r+0x24>
  404fa0:	d902      	bls.n	404fa8 <_free_r+0x7c>
  404fa2:	230c      	movs	r3, #12
  404fa4:	602b      	str	r3, [r5, #0]
  404fa6:	e7d3      	b.n	404f50 <_free_r+0x24>
  404fa8:	6820      	ldr	r0, [r4, #0]
  404faa:	1821      	adds	r1, r4, r0
  404fac:	428a      	cmp	r2, r1
  404fae:	bf04      	itt	eq
  404fb0:	6811      	ldreq	r1, [r2, #0]
  404fb2:	6852      	ldreq	r2, [r2, #4]
  404fb4:	6062      	str	r2, [r4, #4]
  404fb6:	bf04      	itt	eq
  404fb8:	1809      	addeq	r1, r1, r0
  404fba:	6021      	streq	r1, [r4, #0]
  404fbc:	605c      	str	r4, [r3, #4]
  404fbe:	e7c7      	b.n	404f50 <_free_r+0x24>
  404fc0:	bd38      	pop	{r3, r4, r5, pc}
  404fc2:	bf00      	nop
  404fc4:	204004c4 	.word	0x204004c4

00404fc8 <_malloc_r>:
  404fc8:	b570      	push	{r4, r5, r6, lr}
  404fca:	1ccd      	adds	r5, r1, #3
  404fcc:	f025 0503 	bic.w	r5, r5, #3
  404fd0:	3508      	adds	r5, #8
  404fd2:	2d0c      	cmp	r5, #12
  404fd4:	bf38      	it	cc
  404fd6:	250c      	movcc	r5, #12
  404fd8:	2d00      	cmp	r5, #0
  404fda:	4606      	mov	r6, r0
  404fdc:	db01      	blt.n	404fe2 <_malloc_r+0x1a>
  404fde:	42a9      	cmp	r1, r5
  404fe0:	d903      	bls.n	404fea <_malloc_r+0x22>
  404fe2:	230c      	movs	r3, #12
  404fe4:	6033      	str	r3, [r6, #0]
  404fe6:	2000      	movs	r0, #0
  404fe8:	bd70      	pop	{r4, r5, r6, pc}
  404fea:	f000 fb05 	bl	4055f8 <__malloc_lock>
  404fee:	4a23      	ldr	r2, [pc, #140]	; (40507c <_malloc_r+0xb4>)
  404ff0:	6814      	ldr	r4, [r2, #0]
  404ff2:	4621      	mov	r1, r4
  404ff4:	b991      	cbnz	r1, 40501c <_malloc_r+0x54>
  404ff6:	4c22      	ldr	r4, [pc, #136]	; (405080 <_malloc_r+0xb8>)
  404ff8:	6823      	ldr	r3, [r4, #0]
  404ffa:	b91b      	cbnz	r3, 405004 <_malloc_r+0x3c>
  404ffc:	4630      	mov	r0, r6
  404ffe:	f000 f97f 	bl	405300 <_sbrk_r>
  405002:	6020      	str	r0, [r4, #0]
  405004:	4629      	mov	r1, r5
  405006:	4630      	mov	r0, r6
  405008:	f000 f97a 	bl	405300 <_sbrk_r>
  40500c:	1c43      	adds	r3, r0, #1
  40500e:	d126      	bne.n	40505e <_malloc_r+0x96>
  405010:	230c      	movs	r3, #12
  405012:	6033      	str	r3, [r6, #0]
  405014:	4630      	mov	r0, r6
  405016:	f000 faf0 	bl	4055fa <__malloc_unlock>
  40501a:	e7e4      	b.n	404fe6 <_malloc_r+0x1e>
  40501c:	680b      	ldr	r3, [r1, #0]
  40501e:	1b5b      	subs	r3, r3, r5
  405020:	d41a      	bmi.n	405058 <_malloc_r+0x90>
  405022:	2b0b      	cmp	r3, #11
  405024:	d90f      	bls.n	405046 <_malloc_r+0x7e>
  405026:	600b      	str	r3, [r1, #0]
  405028:	50cd      	str	r5, [r1, r3]
  40502a:	18cc      	adds	r4, r1, r3
  40502c:	4630      	mov	r0, r6
  40502e:	f000 fae4 	bl	4055fa <__malloc_unlock>
  405032:	f104 000b 	add.w	r0, r4, #11
  405036:	1d23      	adds	r3, r4, #4
  405038:	f020 0007 	bic.w	r0, r0, #7
  40503c:	1ac3      	subs	r3, r0, r3
  40503e:	d01b      	beq.n	405078 <_malloc_r+0xb0>
  405040:	425a      	negs	r2, r3
  405042:	50e2      	str	r2, [r4, r3]
  405044:	bd70      	pop	{r4, r5, r6, pc}
  405046:	428c      	cmp	r4, r1
  405048:	bf0d      	iteet	eq
  40504a:	6863      	ldreq	r3, [r4, #4]
  40504c:	684b      	ldrne	r3, [r1, #4]
  40504e:	6063      	strne	r3, [r4, #4]
  405050:	6013      	streq	r3, [r2, #0]
  405052:	bf18      	it	ne
  405054:	460c      	movne	r4, r1
  405056:	e7e9      	b.n	40502c <_malloc_r+0x64>
  405058:	460c      	mov	r4, r1
  40505a:	6849      	ldr	r1, [r1, #4]
  40505c:	e7ca      	b.n	404ff4 <_malloc_r+0x2c>
  40505e:	1cc4      	adds	r4, r0, #3
  405060:	f024 0403 	bic.w	r4, r4, #3
  405064:	42a0      	cmp	r0, r4
  405066:	d005      	beq.n	405074 <_malloc_r+0xac>
  405068:	1a21      	subs	r1, r4, r0
  40506a:	4630      	mov	r0, r6
  40506c:	f000 f948 	bl	405300 <_sbrk_r>
  405070:	3001      	adds	r0, #1
  405072:	d0cd      	beq.n	405010 <_malloc_r+0x48>
  405074:	6025      	str	r5, [r4, #0]
  405076:	e7d9      	b.n	40502c <_malloc_r+0x64>
  405078:	bd70      	pop	{r4, r5, r6, pc}
  40507a:	bf00      	nop
  40507c:	204004c4 	.word	0x204004c4
  405080:	204004c8 	.word	0x204004c8

00405084 <__sfputc_r>:
  405084:	6893      	ldr	r3, [r2, #8]
  405086:	3b01      	subs	r3, #1
  405088:	2b00      	cmp	r3, #0
  40508a:	b410      	push	{r4}
  40508c:	6093      	str	r3, [r2, #8]
  40508e:	da08      	bge.n	4050a2 <__sfputc_r+0x1e>
  405090:	6994      	ldr	r4, [r2, #24]
  405092:	42a3      	cmp	r3, r4
  405094:	db02      	blt.n	40509c <__sfputc_r+0x18>
  405096:	b2cb      	uxtb	r3, r1
  405098:	2b0a      	cmp	r3, #10
  40509a:	d102      	bne.n	4050a2 <__sfputc_r+0x1e>
  40509c:	bc10      	pop	{r4}
  40509e:	f000 b983 	b.w	4053a8 <__swbuf_r>
  4050a2:	6813      	ldr	r3, [r2, #0]
  4050a4:	1c58      	adds	r0, r3, #1
  4050a6:	6010      	str	r0, [r2, #0]
  4050a8:	7019      	strb	r1, [r3, #0]
  4050aa:	b2c8      	uxtb	r0, r1
  4050ac:	bc10      	pop	{r4}
  4050ae:	4770      	bx	lr

004050b0 <__sfputs_r>:
  4050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4050b2:	4606      	mov	r6, r0
  4050b4:	460f      	mov	r7, r1
  4050b6:	4614      	mov	r4, r2
  4050b8:	18d5      	adds	r5, r2, r3
  4050ba:	42ac      	cmp	r4, r5
  4050bc:	d101      	bne.n	4050c2 <__sfputs_r+0x12>
  4050be:	2000      	movs	r0, #0
  4050c0:	e007      	b.n	4050d2 <__sfputs_r+0x22>
  4050c2:	463a      	mov	r2, r7
  4050c4:	f814 1b01 	ldrb.w	r1, [r4], #1
  4050c8:	4630      	mov	r0, r6
  4050ca:	f7ff ffdb 	bl	405084 <__sfputc_r>
  4050ce:	1c43      	adds	r3, r0, #1
  4050d0:	d1f3      	bne.n	4050ba <__sfputs_r+0xa>
  4050d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004050d4 <_vfiprintf_r>:
  4050d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4050d8:	b09d      	sub	sp, #116	; 0x74
  4050da:	460c      	mov	r4, r1
  4050dc:	4617      	mov	r7, r2
  4050de:	9303      	str	r3, [sp, #12]
  4050e0:	4606      	mov	r6, r0
  4050e2:	b118      	cbz	r0, 4050ec <_vfiprintf_r+0x18>
  4050e4:	6983      	ldr	r3, [r0, #24]
  4050e6:	b90b      	cbnz	r3, 4050ec <_vfiprintf_r+0x18>
  4050e8:	f7ff faee 	bl	4046c8 <__sinit>
  4050ec:	4b7c      	ldr	r3, [pc, #496]	; (4052e0 <_vfiprintf_r+0x20c>)
  4050ee:	429c      	cmp	r4, r3
  4050f0:	d157      	bne.n	4051a2 <_vfiprintf_r+0xce>
  4050f2:	6874      	ldr	r4, [r6, #4]
  4050f4:	89a3      	ldrh	r3, [r4, #12]
  4050f6:	0718      	lsls	r0, r3, #28
  4050f8:	d55d      	bpl.n	4051b6 <_vfiprintf_r+0xe2>
  4050fa:	6923      	ldr	r3, [r4, #16]
  4050fc:	2b00      	cmp	r3, #0
  4050fe:	d05a      	beq.n	4051b6 <_vfiprintf_r+0xe2>
  405100:	2300      	movs	r3, #0
  405102:	9309      	str	r3, [sp, #36]	; 0x24
  405104:	2320      	movs	r3, #32
  405106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40510a:	2330      	movs	r3, #48	; 0x30
  40510c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  405110:	f04f 0b01 	mov.w	fp, #1
  405114:	46b8      	mov	r8, r7
  405116:	4645      	mov	r5, r8
  405118:	f815 3b01 	ldrb.w	r3, [r5], #1
  40511c:	2b00      	cmp	r3, #0
  40511e:	d155      	bne.n	4051cc <_vfiprintf_r+0xf8>
  405120:	ebb8 0a07 	subs.w	sl, r8, r7
  405124:	d00b      	beq.n	40513e <_vfiprintf_r+0x6a>
  405126:	4653      	mov	r3, sl
  405128:	463a      	mov	r2, r7
  40512a:	4621      	mov	r1, r4
  40512c:	4630      	mov	r0, r6
  40512e:	f7ff ffbf 	bl	4050b0 <__sfputs_r>
  405132:	3001      	adds	r0, #1
  405134:	f000 80c4 	beq.w	4052c0 <_vfiprintf_r+0x1ec>
  405138:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40513a:	4453      	add	r3, sl
  40513c:	9309      	str	r3, [sp, #36]	; 0x24
  40513e:	f898 3000 	ldrb.w	r3, [r8]
  405142:	2b00      	cmp	r3, #0
  405144:	f000 80bc 	beq.w	4052c0 <_vfiprintf_r+0x1ec>
  405148:	2300      	movs	r3, #0
  40514a:	f04f 32ff 	mov.w	r2, #4294967295
  40514e:	9304      	str	r3, [sp, #16]
  405150:	9307      	str	r3, [sp, #28]
  405152:	9205      	str	r2, [sp, #20]
  405154:	9306      	str	r3, [sp, #24]
  405156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40515a:	931a      	str	r3, [sp, #104]	; 0x68
  40515c:	2205      	movs	r2, #5
  40515e:	7829      	ldrb	r1, [r5, #0]
  405160:	4860      	ldr	r0, [pc, #384]	; (4052e4 <_vfiprintf_r+0x210>)
  405162:	f7ff fbb5 	bl	4048d0 <memchr>
  405166:	f105 0801 	add.w	r8, r5, #1
  40516a:	9b04      	ldr	r3, [sp, #16]
  40516c:	2800      	cmp	r0, #0
  40516e:	d131      	bne.n	4051d4 <_vfiprintf_r+0x100>
  405170:	06d9      	lsls	r1, r3, #27
  405172:	bf44      	itt	mi
  405174:	2220      	movmi	r2, #32
  405176:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40517a:	071a      	lsls	r2, r3, #28
  40517c:	bf44      	itt	mi
  40517e:	222b      	movmi	r2, #43	; 0x2b
  405180:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  405184:	782a      	ldrb	r2, [r5, #0]
  405186:	2a2a      	cmp	r2, #42	; 0x2a
  405188:	d02c      	beq.n	4051e4 <_vfiprintf_r+0x110>
  40518a:	9a07      	ldr	r2, [sp, #28]
  40518c:	2100      	movs	r1, #0
  40518e:	200a      	movs	r0, #10
  405190:	46a8      	mov	r8, r5
  405192:	3501      	adds	r5, #1
  405194:	f898 3000 	ldrb.w	r3, [r8]
  405198:	3b30      	subs	r3, #48	; 0x30
  40519a:	2b09      	cmp	r3, #9
  40519c:	d96d      	bls.n	40527a <_vfiprintf_r+0x1a6>
  40519e:	b371      	cbz	r1, 4051fe <_vfiprintf_r+0x12a>
  4051a0:	e026      	b.n	4051f0 <_vfiprintf_r+0x11c>
  4051a2:	4b51      	ldr	r3, [pc, #324]	; (4052e8 <_vfiprintf_r+0x214>)
  4051a4:	429c      	cmp	r4, r3
  4051a6:	d101      	bne.n	4051ac <_vfiprintf_r+0xd8>
  4051a8:	68b4      	ldr	r4, [r6, #8]
  4051aa:	e7a3      	b.n	4050f4 <_vfiprintf_r+0x20>
  4051ac:	4b4f      	ldr	r3, [pc, #316]	; (4052ec <_vfiprintf_r+0x218>)
  4051ae:	429c      	cmp	r4, r3
  4051b0:	bf08      	it	eq
  4051b2:	68f4      	ldreq	r4, [r6, #12]
  4051b4:	e79e      	b.n	4050f4 <_vfiprintf_r+0x20>
  4051b6:	4621      	mov	r1, r4
  4051b8:	4630      	mov	r0, r6
  4051ba:	f000 f959 	bl	405470 <__swsetup_r>
  4051be:	2800      	cmp	r0, #0
  4051c0:	d09e      	beq.n	405100 <_vfiprintf_r+0x2c>
  4051c2:	f04f 30ff 	mov.w	r0, #4294967295
  4051c6:	b01d      	add	sp, #116	; 0x74
  4051c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051cc:	2b25      	cmp	r3, #37	; 0x25
  4051ce:	d0a7      	beq.n	405120 <_vfiprintf_r+0x4c>
  4051d0:	46a8      	mov	r8, r5
  4051d2:	e7a0      	b.n	405116 <_vfiprintf_r+0x42>
  4051d4:	4a43      	ldr	r2, [pc, #268]	; (4052e4 <_vfiprintf_r+0x210>)
  4051d6:	1a80      	subs	r0, r0, r2
  4051d8:	fa0b f000 	lsl.w	r0, fp, r0
  4051dc:	4318      	orrs	r0, r3
  4051de:	9004      	str	r0, [sp, #16]
  4051e0:	4645      	mov	r5, r8
  4051e2:	e7bb      	b.n	40515c <_vfiprintf_r+0x88>
  4051e4:	9a03      	ldr	r2, [sp, #12]
  4051e6:	1d11      	adds	r1, r2, #4
  4051e8:	6812      	ldr	r2, [r2, #0]
  4051ea:	9103      	str	r1, [sp, #12]
  4051ec:	2a00      	cmp	r2, #0
  4051ee:	db01      	blt.n	4051f4 <_vfiprintf_r+0x120>
  4051f0:	9207      	str	r2, [sp, #28]
  4051f2:	e004      	b.n	4051fe <_vfiprintf_r+0x12a>
  4051f4:	4252      	negs	r2, r2
  4051f6:	f043 0302 	orr.w	r3, r3, #2
  4051fa:	9207      	str	r2, [sp, #28]
  4051fc:	9304      	str	r3, [sp, #16]
  4051fe:	f898 3000 	ldrb.w	r3, [r8]
  405202:	2b2e      	cmp	r3, #46	; 0x2e
  405204:	d110      	bne.n	405228 <_vfiprintf_r+0x154>
  405206:	f898 3001 	ldrb.w	r3, [r8, #1]
  40520a:	2b2a      	cmp	r3, #42	; 0x2a
  40520c:	f108 0101 	add.w	r1, r8, #1
  405210:	d137      	bne.n	405282 <_vfiprintf_r+0x1ae>
  405212:	9b03      	ldr	r3, [sp, #12]
  405214:	1d1a      	adds	r2, r3, #4
  405216:	681b      	ldr	r3, [r3, #0]
  405218:	9203      	str	r2, [sp, #12]
  40521a:	2b00      	cmp	r3, #0
  40521c:	bfb8      	it	lt
  40521e:	f04f 33ff 	movlt.w	r3, #4294967295
  405222:	f108 0802 	add.w	r8, r8, #2
  405226:	9305      	str	r3, [sp, #20]
  405228:	4d31      	ldr	r5, [pc, #196]	; (4052f0 <_vfiprintf_r+0x21c>)
  40522a:	f898 1000 	ldrb.w	r1, [r8]
  40522e:	2203      	movs	r2, #3
  405230:	4628      	mov	r0, r5
  405232:	f7ff fb4d 	bl	4048d0 <memchr>
  405236:	b140      	cbz	r0, 40524a <_vfiprintf_r+0x176>
  405238:	2340      	movs	r3, #64	; 0x40
  40523a:	1b40      	subs	r0, r0, r5
  40523c:	fa03 f000 	lsl.w	r0, r3, r0
  405240:	9b04      	ldr	r3, [sp, #16]
  405242:	4303      	orrs	r3, r0
  405244:	9304      	str	r3, [sp, #16]
  405246:	f108 0801 	add.w	r8, r8, #1
  40524a:	f898 1000 	ldrb.w	r1, [r8]
  40524e:	4829      	ldr	r0, [pc, #164]	; (4052f4 <_vfiprintf_r+0x220>)
  405250:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  405254:	2206      	movs	r2, #6
  405256:	f108 0701 	add.w	r7, r8, #1
  40525a:	f7ff fb39 	bl	4048d0 <memchr>
  40525e:	2800      	cmp	r0, #0
  405260:	d034      	beq.n	4052cc <_vfiprintf_r+0x1f8>
  405262:	4b25      	ldr	r3, [pc, #148]	; (4052f8 <_vfiprintf_r+0x224>)
  405264:	bb03      	cbnz	r3, 4052a8 <_vfiprintf_r+0x1d4>
  405266:	9b03      	ldr	r3, [sp, #12]
  405268:	3307      	adds	r3, #7
  40526a:	f023 0307 	bic.w	r3, r3, #7
  40526e:	3308      	adds	r3, #8
  405270:	9303      	str	r3, [sp, #12]
  405272:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405274:	444b      	add	r3, r9
  405276:	9309      	str	r3, [sp, #36]	; 0x24
  405278:	e74c      	b.n	405114 <_vfiprintf_r+0x40>
  40527a:	fb00 3202 	mla	r2, r0, r2, r3
  40527e:	2101      	movs	r1, #1
  405280:	e786      	b.n	405190 <_vfiprintf_r+0xbc>
  405282:	2300      	movs	r3, #0
  405284:	9305      	str	r3, [sp, #20]
  405286:	4618      	mov	r0, r3
  405288:	250a      	movs	r5, #10
  40528a:	4688      	mov	r8, r1
  40528c:	3101      	adds	r1, #1
  40528e:	f898 2000 	ldrb.w	r2, [r8]
  405292:	3a30      	subs	r2, #48	; 0x30
  405294:	2a09      	cmp	r2, #9
  405296:	d903      	bls.n	4052a0 <_vfiprintf_r+0x1cc>
  405298:	2b00      	cmp	r3, #0
  40529a:	d0c5      	beq.n	405228 <_vfiprintf_r+0x154>
  40529c:	9005      	str	r0, [sp, #20]
  40529e:	e7c3      	b.n	405228 <_vfiprintf_r+0x154>
  4052a0:	fb05 2000 	mla	r0, r5, r0, r2
  4052a4:	2301      	movs	r3, #1
  4052a6:	e7f0      	b.n	40528a <_vfiprintf_r+0x1b6>
  4052a8:	ab03      	add	r3, sp, #12
  4052aa:	9300      	str	r3, [sp, #0]
  4052ac:	4622      	mov	r2, r4
  4052ae:	4b13      	ldr	r3, [pc, #76]	; (4052fc <_vfiprintf_r+0x228>)
  4052b0:	a904      	add	r1, sp, #16
  4052b2:	4630      	mov	r0, r6
  4052b4:	f7fd fe14 	bl	402ee0 <_printf_float>
  4052b8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4052bc:	4681      	mov	r9, r0
  4052be:	d1d8      	bne.n	405272 <_vfiprintf_r+0x19e>
  4052c0:	89a3      	ldrh	r3, [r4, #12]
  4052c2:	065b      	lsls	r3, r3, #25
  4052c4:	f53f af7d 	bmi.w	4051c2 <_vfiprintf_r+0xee>
  4052c8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4052ca:	e77c      	b.n	4051c6 <_vfiprintf_r+0xf2>
  4052cc:	ab03      	add	r3, sp, #12
  4052ce:	9300      	str	r3, [sp, #0]
  4052d0:	4622      	mov	r2, r4
  4052d2:	4b0a      	ldr	r3, [pc, #40]	; (4052fc <_vfiprintf_r+0x228>)
  4052d4:	a904      	add	r1, sp, #16
  4052d6:	4630      	mov	r0, r6
  4052d8:	f7fe f8b0 	bl	40343c <_printf_i>
  4052dc:	e7ec      	b.n	4052b8 <_vfiprintf_r+0x1e4>
  4052de:	bf00      	nop
  4052e0:	00405b74 	.word	0x00405b74
  4052e4:	00405cb4 	.word	0x00405cb4
  4052e8:	00405b94 	.word	0x00405b94
  4052ec:	00405b54 	.word	0x00405b54
  4052f0:	00405cba 	.word	0x00405cba
  4052f4:	00405cbe 	.word	0x00405cbe
  4052f8:	00402ee1 	.word	0x00402ee1
  4052fc:	004050b1 	.word	0x004050b1

00405300 <_sbrk_r>:
  405300:	b538      	push	{r3, r4, r5, lr}
  405302:	4c06      	ldr	r4, [pc, #24]	; (40531c <_sbrk_r+0x1c>)
  405304:	2300      	movs	r3, #0
  405306:	4605      	mov	r5, r0
  405308:	4608      	mov	r0, r1
  40530a:	6023      	str	r3, [r4, #0]
  40530c:	f7fb fffa 	bl	401304 <_sbrk>
  405310:	1c43      	adds	r3, r0, #1
  405312:	d102      	bne.n	40531a <_sbrk_r+0x1a>
  405314:	6823      	ldr	r3, [r4, #0]
  405316:	b103      	cbz	r3, 40531a <_sbrk_r+0x1a>
  405318:	602b      	str	r3, [r5, #0]
  40531a:	bd38      	pop	{r3, r4, r5, pc}
  40531c:	204006c8 	.word	0x204006c8

00405320 <__sread>:
  405320:	b510      	push	{r4, lr}
  405322:	460c      	mov	r4, r1
  405324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405328:	f000 f968 	bl	4055fc <_read_r>
  40532c:	2800      	cmp	r0, #0
  40532e:	bfab      	itete	ge
  405330:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  405332:	89a3      	ldrhlt	r3, [r4, #12]
  405334:	181b      	addge	r3, r3, r0
  405336:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  40533a:	bfac      	ite	ge
  40533c:	6563      	strge	r3, [r4, #84]	; 0x54
  40533e:	81a3      	strhlt	r3, [r4, #12]
  405340:	bd10      	pop	{r4, pc}

00405342 <__swrite>:
  405342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405346:	461f      	mov	r7, r3
  405348:	898b      	ldrh	r3, [r1, #12]
  40534a:	05db      	lsls	r3, r3, #23
  40534c:	4605      	mov	r5, r0
  40534e:	460c      	mov	r4, r1
  405350:	4616      	mov	r6, r2
  405352:	d505      	bpl.n	405360 <__swrite+0x1e>
  405354:	2302      	movs	r3, #2
  405356:	2200      	movs	r2, #0
  405358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40535c:	f000 f928 	bl	4055b0 <_lseek_r>
  405360:	89a3      	ldrh	r3, [r4, #12]
  405362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40536a:	81a3      	strh	r3, [r4, #12]
  40536c:	4632      	mov	r2, r6
  40536e:	463b      	mov	r3, r7
  405370:	4628      	mov	r0, r5
  405372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405376:	f000 b869 	b.w	40544c <_write_r>

0040537a <__sseek>:
  40537a:	b510      	push	{r4, lr}
  40537c:	460c      	mov	r4, r1
  40537e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405382:	f000 f915 	bl	4055b0 <_lseek_r>
  405386:	1c43      	adds	r3, r0, #1
  405388:	89a3      	ldrh	r3, [r4, #12]
  40538a:	bf15      	itete	ne
  40538c:	6560      	strne	r0, [r4, #84]	; 0x54
  40538e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  405392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  405396:	81a3      	strheq	r3, [r4, #12]
  405398:	bf18      	it	ne
  40539a:	81a3      	strhne	r3, [r4, #12]
  40539c:	bd10      	pop	{r4, pc}

0040539e <__sclose>:
  40539e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4053a2:	f000 b8d3 	b.w	40554c <_close_r>
	...

004053a8 <__swbuf_r>:
  4053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4053aa:	460e      	mov	r6, r1
  4053ac:	4614      	mov	r4, r2
  4053ae:	4605      	mov	r5, r0
  4053b0:	b118      	cbz	r0, 4053ba <__swbuf_r+0x12>
  4053b2:	6983      	ldr	r3, [r0, #24]
  4053b4:	b90b      	cbnz	r3, 4053ba <__swbuf_r+0x12>
  4053b6:	f7ff f987 	bl	4046c8 <__sinit>
  4053ba:	4b21      	ldr	r3, [pc, #132]	; (405440 <__swbuf_r+0x98>)
  4053bc:	429c      	cmp	r4, r3
  4053be:	d12a      	bne.n	405416 <__swbuf_r+0x6e>
  4053c0:	686c      	ldr	r4, [r5, #4]
  4053c2:	69a3      	ldr	r3, [r4, #24]
  4053c4:	60a3      	str	r3, [r4, #8]
  4053c6:	89a3      	ldrh	r3, [r4, #12]
  4053c8:	071a      	lsls	r2, r3, #28
  4053ca:	d52e      	bpl.n	40542a <__swbuf_r+0x82>
  4053cc:	6923      	ldr	r3, [r4, #16]
  4053ce:	b363      	cbz	r3, 40542a <__swbuf_r+0x82>
  4053d0:	6923      	ldr	r3, [r4, #16]
  4053d2:	6820      	ldr	r0, [r4, #0]
  4053d4:	1ac0      	subs	r0, r0, r3
  4053d6:	6963      	ldr	r3, [r4, #20]
  4053d8:	b2f6      	uxtb	r6, r6
  4053da:	4298      	cmp	r0, r3
  4053dc:	4637      	mov	r7, r6
  4053de:	db04      	blt.n	4053ea <__swbuf_r+0x42>
  4053e0:	4621      	mov	r1, r4
  4053e2:	4628      	mov	r0, r5
  4053e4:	f7ff f906 	bl	4045f4 <_fflush_r>
  4053e8:	bb28      	cbnz	r0, 405436 <__swbuf_r+0x8e>
  4053ea:	68a3      	ldr	r3, [r4, #8]
  4053ec:	3b01      	subs	r3, #1
  4053ee:	60a3      	str	r3, [r4, #8]
  4053f0:	6823      	ldr	r3, [r4, #0]
  4053f2:	1c5a      	adds	r2, r3, #1
  4053f4:	6022      	str	r2, [r4, #0]
  4053f6:	701e      	strb	r6, [r3, #0]
  4053f8:	6963      	ldr	r3, [r4, #20]
  4053fa:	3001      	adds	r0, #1
  4053fc:	4298      	cmp	r0, r3
  4053fe:	d004      	beq.n	40540a <__swbuf_r+0x62>
  405400:	89a3      	ldrh	r3, [r4, #12]
  405402:	07db      	lsls	r3, r3, #31
  405404:	d519      	bpl.n	40543a <__swbuf_r+0x92>
  405406:	2e0a      	cmp	r6, #10
  405408:	d117      	bne.n	40543a <__swbuf_r+0x92>
  40540a:	4621      	mov	r1, r4
  40540c:	4628      	mov	r0, r5
  40540e:	f7ff f8f1 	bl	4045f4 <_fflush_r>
  405412:	b190      	cbz	r0, 40543a <__swbuf_r+0x92>
  405414:	e00f      	b.n	405436 <__swbuf_r+0x8e>
  405416:	4b0b      	ldr	r3, [pc, #44]	; (405444 <__swbuf_r+0x9c>)
  405418:	429c      	cmp	r4, r3
  40541a:	d101      	bne.n	405420 <__swbuf_r+0x78>
  40541c:	68ac      	ldr	r4, [r5, #8]
  40541e:	e7d0      	b.n	4053c2 <__swbuf_r+0x1a>
  405420:	4b09      	ldr	r3, [pc, #36]	; (405448 <__swbuf_r+0xa0>)
  405422:	429c      	cmp	r4, r3
  405424:	bf08      	it	eq
  405426:	68ec      	ldreq	r4, [r5, #12]
  405428:	e7cb      	b.n	4053c2 <__swbuf_r+0x1a>
  40542a:	4621      	mov	r1, r4
  40542c:	4628      	mov	r0, r5
  40542e:	f000 f81f 	bl	405470 <__swsetup_r>
  405432:	2800      	cmp	r0, #0
  405434:	d0cc      	beq.n	4053d0 <__swbuf_r+0x28>
  405436:	f04f 37ff 	mov.w	r7, #4294967295
  40543a:	4638      	mov	r0, r7
  40543c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40543e:	bf00      	nop
  405440:	00405b74 	.word	0x00405b74
  405444:	00405b94 	.word	0x00405b94
  405448:	00405b54 	.word	0x00405b54

0040544c <_write_r>:
  40544c:	b538      	push	{r3, r4, r5, lr}
  40544e:	4c07      	ldr	r4, [pc, #28]	; (40546c <_write_r+0x20>)
  405450:	4605      	mov	r5, r0
  405452:	4608      	mov	r0, r1
  405454:	4611      	mov	r1, r2
  405456:	2200      	movs	r2, #0
  405458:	6022      	str	r2, [r4, #0]
  40545a:	461a      	mov	r2, r3
  40545c:	f7fc ffa0 	bl	4023a0 <_write>
  405460:	1c43      	adds	r3, r0, #1
  405462:	d102      	bne.n	40546a <_write_r+0x1e>
  405464:	6823      	ldr	r3, [r4, #0]
  405466:	b103      	cbz	r3, 40546a <_write_r+0x1e>
  405468:	602b      	str	r3, [r5, #0]
  40546a:	bd38      	pop	{r3, r4, r5, pc}
  40546c:	204006c8 	.word	0x204006c8

00405470 <__swsetup_r>:
  405470:	4b32      	ldr	r3, [pc, #200]	; (40553c <__swsetup_r+0xcc>)
  405472:	b570      	push	{r4, r5, r6, lr}
  405474:	681d      	ldr	r5, [r3, #0]
  405476:	4606      	mov	r6, r0
  405478:	460c      	mov	r4, r1
  40547a:	b125      	cbz	r5, 405486 <__swsetup_r+0x16>
  40547c:	69ab      	ldr	r3, [r5, #24]
  40547e:	b913      	cbnz	r3, 405486 <__swsetup_r+0x16>
  405480:	4628      	mov	r0, r5
  405482:	f7ff f921 	bl	4046c8 <__sinit>
  405486:	4b2e      	ldr	r3, [pc, #184]	; (405540 <__swsetup_r+0xd0>)
  405488:	429c      	cmp	r4, r3
  40548a:	d10f      	bne.n	4054ac <__swsetup_r+0x3c>
  40548c:	686c      	ldr	r4, [r5, #4]
  40548e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405492:	b29a      	uxth	r2, r3
  405494:	0715      	lsls	r5, r2, #28
  405496:	d42c      	bmi.n	4054f2 <__swsetup_r+0x82>
  405498:	06d0      	lsls	r0, r2, #27
  40549a:	d411      	bmi.n	4054c0 <__swsetup_r+0x50>
  40549c:	2209      	movs	r2, #9
  40549e:	6032      	str	r2, [r6, #0]
  4054a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4054a4:	81a3      	strh	r3, [r4, #12]
  4054a6:	f04f 30ff 	mov.w	r0, #4294967295
  4054aa:	bd70      	pop	{r4, r5, r6, pc}
  4054ac:	4b25      	ldr	r3, [pc, #148]	; (405544 <__swsetup_r+0xd4>)
  4054ae:	429c      	cmp	r4, r3
  4054b0:	d101      	bne.n	4054b6 <__swsetup_r+0x46>
  4054b2:	68ac      	ldr	r4, [r5, #8]
  4054b4:	e7eb      	b.n	40548e <__swsetup_r+0x1e>
  4054b6:	4b24      	ldr	r3, [pc, #144]	; (405548 <__swsetup_r+0xd8>)
  4054b8:	429c      	cmp	r4, r3
  4054ba:	bf08      	it	eq
  4054bc:	68ec      	ldreq	r4, [r5, #12]
  4054be:	e7e6      	b.n	40548e <__swsetup_r+0x1e>
  4054c0:	0751      	lsls	r1, r2, #29
  4054c2:	d512      	bpl.n	4054ea <__swsetup_r+0x7a>
  4054c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4054c6:	b141      	cbz	r1, 4054da <__swsetup_r+0x6a>
  4054c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4054cc:	4299      	cmp	r1, r3
  4054ce:	d002      	beq.n	4054d6 <__swsetup_r+0x66>
  4054d0:	4630      	mov	r0, r6
  4054d2:	f7ff fd2b 	bl	404f2c <_free_r>
  4054d6:	2300      	movs	r3, #0
  4054d8:	6363      	str	r3, [r4, #52]	; 0x34
  4054da:	89a3      	ldrh	r3, [r4, #12]
  4054dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4054e0:	81a3      	strh	r3, [r4, #12]
  4054e2:	2300      	movs	r3, #0
  4054e4:	6063      	str	r3, [r4, #4]
  4054e6:	6923      	ldr	r3, [r4, #16]
  4054e8:	6023      	str	r3, [r4, #0]
  4054ea:	89a3      	ldrh	r3, [r4, #12]
  4054ec:	f043 0308 	orr.w	r3, r3, #8
  4054f0:	81a3      	strh	r3, [r4, #12]
  4054f2:	6923      	ldr	r3, [r4, #16]
  4054f4:	b94b      	cbnz	r3, 40550a <__swsetup_r+0x9a>
  4054f6:	89a3      	ldrh	r3, [r4, #12]
  4054f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
  4054fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405500:	d003      	beq.n	40550a <__swsetup_r+0x9a>
  405502:	4621      	mov	r1, r4
  405504:	4630      	mov	r0, r6
  405506:	f7ff f99b 	bl	404840 <__smakebuf_r>
  40550a:	89a2      	ldrh	r2, [r4, #12]
  40550c:	f012 0301 	ands.w	r3, r2, #1
  405510:	d00c      	beq.n	40552c <__swsetup_r+0xbc>
  405512:	2300      	movs	r3, #0
  405514:	60a3      	str	r3, [r4, #8]
  405516:	6963      	ldr	r3, [r4, #20]
  405518:	425b      	negs	r3, r3
  40551a:	61a3      	str	r3, [r4, #24]
  40551c:	6923      	ldr	r3, [r4, #16]
  40551e:	b953      	cbnz	r3, 405536 <__swsetup_r+0xc6>
  405520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405524:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  405528:	d1ba      	bne.n	4054a0 <__swsetup_r+0x30>
  40552a:	bd70      	pop	{r4, r5, r6, pc}
  40552c:	0792      	lsls	r2, r2, #30
  40552e:	bf58      	it	pl
  405530:	6963      	ldrpl	r3, [r4, #20]
  405532:	60a3      	str	r3, [r4, #8]
  405534:	e7f2      	b.n	40551c <__swsetup_r+0xac>
  405536:	2000      	movs	r0, #0
  405538:	e7f7      	b.n	40552a <__swsetup_r+0xba>
  40553a:	bf00      	nop
  40553c:	20400048 	.word	0x20400048
  405540:	00405b74 	.word	0x00405b74
  405544:	00405b94 	.word	0x00405b94
  405548:	00405b54 	.word	0x00405b54

0040554c <_close_r>:
  40554c:	b538      	push	{r3, r4, r5, lr}
  40554e:	4c06      	ldr	r4, [pc, #24]	; (405568 <_close_r+0x1c>)
  405550:	2300      	movs	r3, #0
  405552:	4605      	mov	r5, r0
  405554:	4608      	mov	r0, r1
  405556:	6023      	str	r3, [r4, #0]
  405558:	f7fb fee6 	bl	401328 <_close>
  40555c:	1c43      	adds	r3, r0, #1
  40555e:	d102      	bne.n	405566 <_close_r+0x1a>
  405560:	6823      	ldr	r3, [r4, #0]
  405562:	b103      	cbz	r3, 405566 <_close_r+0x1a>
  405564:	602b      	str	r3, [r5, #0]
  405566:	bd38      	pop	{r3, r4, r5, pc}
  405568:	204006c8 	.word	0x204006c8

0040556c <_fstat_r>:
  40556c:	b538      	push	{r3, r4, r5, lr}
  40556e:	4c07      	ldr	r4, [pc, #28]	; (40558c <_fstat_r+0x20>)
  405570:	2300      	movs	r3, #0
  405572:	4605      	mov	r5, r0
  405574:	4608      	mov	r0, r1
  405576:	4611      	mov	r1, r2
  405578:	6023      	str	r3, [r4, #0]
  40557a:	f7fb fed8 	bl	40132e <_fstat>
  40557e:	1c43      	adds	r3, r0, #1
  405580:	d102      	bne.n	405588 <_fstat_r+0x1c>
  405582:	6823      	ldr	r3, [r4, #0]
  405584:	b103      	cbz	r3, 405588 <_fstat_r+0x1c>
  405586:	602b      	str	r3, [r5, #0]
  405588:	bd38      	pop	{r3, r4, r5, pc}
  40558a:	bf00      	nop
  40558c:	204006c8 	.word	0x204006c8

00405590 <_isatty_r>:
  405590:	b538      	push	{r3, r4, r5, lr}
  405592:	4c06      	ldr	r4, [pc, #24]	; (4055ac <_isatty_r+0x1c>)
  405594:	2300      	movs	r3, #0
  405596:	4605      	mov	r5, r0
  405598:	4608      	mov	r0, r1
  40559a:	6023      	str	r3, [r4, #0]
  40559c:	f7fb fecc 	bl	401338 <_isatty>
  4055a0:	1c43      	adds	r3, r0, #1
  4055a2:	d102      	bne.n	4055aa <_isatty_r+0x1a>
  4055a4:	6823      	ldr	r3, [r4, #0]
  4055a6:	b103      	cbz	r3, 4055aa <_isatty_r+0x1a>
  4055a8:	602b      	str	r3, [r5, #0]
  4055aa:	bd38      	pop	{r3, r4, r5, pc}
  4055ac:	204006c8 	.word	0x204006c8

004055b0 <_lseek_r>:
  4055b0:	b538      	push	{r3, r4, r5, lr}
  4055b2:	4c07      	ldr	r4, [pc, #28]	; (4055d0 <_lseek_r+0x20>)
  4055b4:	4605      	mov	r5, r0
  4055b6:	4608      	mov	r0, r1
  4055b8:	4611      	mov	r1, r2
  4055ba:	2200      	movs	r2, #0
  4055bc:	6022      	str	r2, [r4, #0]
  4055be:	461a      	mov	r2, r3
  4055c0:	f7fb febc 	bl	40133c <_lseek>
  4055c4:	1c43      	adds	r3, r0, #1
  4055c6:	d102      	bne.n	4055ce <_lseek_r+0x1e>
  4055c8:	6823      	ldr	r3, [r4, #0]
  4055ca:	b103      	cbz	r3, 4055ce <_lseek_r+0x1e>
  4055cc:	602b      	str	r3, [r5, #0]
  4055ce:	bd38      	pop	{r3, r4, r5, pc}
  4055d0:	204006c8 	.word	0x204006c8

004055d4 <__ascii_mbtowc>:
  4055d4:	b082      	sub	sp, #8
  4055d6:	b901      	cbnz	r1, 4055da <__ascii_mbtowc+0x6>
  4055d8:	a901      	add	r1, sp, #4
  4055da:	b142      	cbz	r2, 4055ee <__ascii_mbtowc+0x1a>
  4055dc:	b14b      	cbz	r3, 4055f2 <__ascii_mbtowc+0x1e>
  4055de:	7813      	ldrb	r3, [r2, #0]
  4055e0:	600b      	str	r3, [r1, #0]
  4055e2:	7812      	ldrb	r2, [r2, #0]
  4055e4:	1c10      	adds	r0, r2, #0
  4055e6:	bf18      	it	ne
  4055e8:	2001      	movne	r0, #1
  4055ea:	b002      	add	sp, #8
  4055ec:	4770      	bx	lr
  4055ee:	4610      	mov	r0, r2
  4055f0:	e7fb      	b.n	4055ea <__ascii_mbtowc+0x16>
  4055f2:	f06f 0001 	mvn.w	r0, #1
  4055f6:	e7f8      	b.n	4055ea <__ascii_mbtowc+0x16>

004055f8 <__malloc_lock>:
  4055f8:	4770      	bx	lr

004055fa <__malloc_unlock>:
  4055fa:	4770      	bx	lr

004055fc <_read_r>:
  4055fc:	b538      	push	{r3, r4, r5, lr}
  4055fe:	4c07      	ldr	r4, [pc, #28]	; (40561c <_read_r+0x20>)
  405600:	4605      	mov	r5, r0
  405602:	4608      	mov	r0, r1
  405604:	4611      	mov	r1, r2
  405606:	2200      	movs	r2, #0
  405608:	6022      	str	r2, [r4, #0]
  40560a:	461a      	mov	r2, r3
  40560c:	f7fc feb6 	bl	40237c <_read>
  405610:	1c43      	adds	r3, r0, #1
  405612:	d102      	bne.n	40561a <_read_r+0x1e>
  405614:	6823      	ldr	r3, [r4, #0]
  405616:	b103      	cbz	r3, 40561a <_read_r+0x1e>
  405618:	602b      	str	r3, [r5, #0]
  40561a:	bd38      	pop	{r3, r4, r5, pc}
  40561c:	204006c8 	.word	0x204006c8

00405620 <__ascii_wctomb>:
  405620:	b149      	cbz	r1, 405636 <__ascii_wctomb+0x16>
  405622:	2aff      	cmp	r2, #255	; 0xff
  405624:	bf85      	ittet	hi
  405626:	238a      	movhi	r3, #138	; 0x8a
  405628:	6003      	strhi	r3, [r0, #0]
  40562a:	700a      	strbls	r2, [r1, #0]
  40562c:	f04f 30ff 	movhi.w	r0, #4294967295
  405630:	bf98      	it	ls
  405632:	2001      	movls	r0, #1
  405634:	4770      	bx	lr
  405636:	4608      	mov	r0, r1
  405638:	4770      	bx	lr
	...

0040563c <__aeabi_dcmpun>:
  40563c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405640:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405644:	d102      	bne.n	40564c <__aeabi_dcmpun+0x10>
  405646:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40564a:	d10a      	bne.n	405662 <__aeabi_dcmpun+0x26>
  40564c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405650:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405654:	d102      	bne.n	40565c <__aeabi_dcmpun+0x20>
  405656:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40565a:	d102      	bne.n	405662 <__aeabi_dcmpun+0x26>
  40565c:	f04f 0000 	mov.w	r0, #0
  405660:	4770      	bx	lr
  405662:	f04f 0001 	mov.w	r0, #1
  405666:	4770      	bx	lr
  405668:	65746e69 	.word	0x65746e69
  40566c:	70757272 	.word	0x70757272
  405670:	202d2074 	.word	0x202d2074
  405674:	20434441 	.word	0x20434441
  405678:	202d2031 	.word	0x202d2031
  40567c:	25206925 	.word	0x25206925
  405680:	69252069 	.word	0x69252069
  405684:	20692520 	.word	0x20692520
  405688:	00000a20 	.word	0x00000a20
  40568c:	61746144 	.word	0x61746144
  405690:	6c6f6320 	.word	0x6c6f6320
  405694:	7463656c 	.word	0x7463656c
  405698:	202c6465 	.word	0x202c6465
  40569c:	6e75616c 	.word	0x6e75616c
  4056a0:	6e696863 	.word	0x6e696863
  4056a4:	6f632067 	.word	0x6f632067
  4056a8:	6f72746e 	.word	0x6f72746e
  4056ac:	6f6c206c 	.word	0x6f6c206c
  4056b0:	6620706f 	.word	0x6620706f
  4056b4:	206d6f72 	.word	0x206d6f72
  4056b8:	20636461 	.word	0x20636461
  4056bc:	000a2031 	.word	0x000a2031
  4056c0:	65746e69 	.word	0x65746e69
  4056c4:	70757272 	.word	0x70757272
  4056c8:	202d2074 	.word	0x202d2074
  4056cc:	20434441 	.word	0x20434441
  4056d0:	202d2030 	.word	0x202d2030
  4056d4:	25206925 	.word	0x25206925
  4056d8:	69252069 	.word	0x69252069
  4056dc:	20692520 	.word	0x20692520
  4056e0:	25206925 	.word	0x25206925
  4056e4:	0a202069 	.word	0x0a202069
  4056e8:	00000000 	.word	0x00000000
  4056ec:	61746144 	.word	0x61746144
  4056f0:	6c6f6320 	.word	0x6c6f6320
  4056f4:	7463656c 	.word	0x7463656c
  4056f8:	202c6465 	.word	0x202c6465
  4056fc:	6e75616c 	.word	0x6e75616c
  405700:	6e696863 	.word	0x6e696863
  405704:	6f632067 	.word	0x6f632067
  405708:	6f72746e 	.word	0x6f72746e
  40570c:	6f6c206c 	.word	0x6f6c206c
  405710:	6620706f 	.word	0x6620706f
  405714:	206d6f72 	.word	0x206d6f72
  405718:	20636461 	.word	0x20636461
  40571c:	00000a30 	.word	0x00000a30
  405720:	204d5750 	.word	0x204d5750
  405724:	000a2030 	.word	0x000a2030
  405728:	206d7770 	.word	0x206d7770
  40572c:	6f697270 	.word	0x6f697270
  405730:	79746972 	.word	0x79746972
  405734:	0a692520 	.word	0x0a692520
  405738:	00000000 	.word	0x00000000
  40573c:	682f2e2e 	.word	0x682f2e2e
  405740:	732f6c61 	.word	0x732f6c61
  405744:	682f6372 	.word	0x682f6372
  405748:	615f6c61 	.word	0x615f6c61
  40574c:	615f6364 	.word	0x615f6364
  405750:	636e7973 	.word	0x636e7973
  405754:	0000632e 	.word	0x0000632e
  405758:	682f2e2e 	.word	0x682f2e2e
  40575c:	732f6c61 	.word	0x732f6c61
  405760:	682f6372 	.word	0x682f6372
  405764:	695f6c61 	.word	0x695f6c61
  405768:	00632e6f 	.word	0x00632e6f
  40576c:	682f2e2e 	.word	0x682f2e2e
  405770:	732f6c61 	.word	0x732f6c61
  405774:	682f6372 	.word	0x682f6372
  405778:	705f6c61 	.word	0x705f6c61
  40577c:	632e6d77 	.word	0x632e6d77
  405780:	00000000 	.word	0x00000000
  405784:	682f2e2e 	.word	0x682f2e2e
  405788:	732f6c61 	.word	0x732f6c61
  40578c:	682f6372 	.word	0x682f6372
  405790:	745f6c61 	.word	0x745f6c61
  405794:	72656d69 	.word	0x72656d69
  405798:	0000632e 	.word	0x0000632e
  40579c:	682f2e2e 	.word	0x682f2e2e
  4057a0:	732f6c61 	.word	0x732f6c61
  4057a4:	682f6372 	.word	0x682f6372
  4057a8:	755f6c61 	.word	0x755f6c61
  4057ac:	74726173 	.word	0x74726173
  4057b0:	6e79735f 	.word	0x6e79735f
  4057b4:	00632e63 	.word	0x00632e63
  4057b8:	682f2e2e 	.word	0x682f2e2e
  4057bc:	752f6c61 	.word	0x752f6c61
  4057c0:	736c6974 	.word	0x736c6974
  4057c4:	6372732f 	.word	0x6372732f
  4057c8:	6974752f 	.word	0x6974752f
  4057cc:	6c5f736c 	.word	0x6c5f736c
  4057d0:	2e747369 	.word	0x2e747369
  4057d4:	00000063 	.word	0x00000063
  4057d8:	682f2e2e 	.word	0x682f2e2e
  4057dc:	752f6c61 	.word	0x752f6c61
  4057e0:	736c6974 	.word	0x736c6974
  4057e4:	6372732f 	.word	0x6372732f
  4057e8:	6974752f 	.word	0x6974752f
  4057ec:	725f736c 	.word	0x725f736c
  4057f0:	62676e69 	.word	0x62676e69
  4057f4:	65666675 	.word	0x65666675
  4057f8:	00632e72 	.word	0x00632e72

004057fc <_afecs>:
  4057fc:	00000000 2f843100 23000000 ffffffff     .....1./...#....
  40580c:	0000ffff 00000000 00000000 00000000     ................
  40581c:	0000010c 00000000 00000000 00000000     ................
  40582c:	00000000 00000200 00000200 00000200     ................
  40583c:	00000200 00000200 00000200 00000200     ................
  40584c:	00000200 00000200 00000200 00000200     ................
  40585c:	00000200 00000001 2f843100 23000000     .........1./...#
  40586c:	ffffffff 0000ffff 00000000 00000000     ................
  40587c:	00000000 0000010c 00000000 00000000     ................
	...
  405894:	00000200 00000200 00000200 00000200     ................
  4058a4:	00000200 00000200 00000200 00000200     ................
  4058b4:	00000200 00000200 00000200 00000200     ................
  4058c4:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  4058d4:	63656661 0000632e                       afec.c..

004058dc <_ext_irq>:
  4058dc:	00000000 00000024 00000000 00000000     ....$...........
	...
  4058f8:	00000003 00080000 00000000 00000000     ................
	...

00405914 <_pio_irq_n>:
  405914:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  405924:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  405934:	00000000                                ....

00405938 <_pwms>:
  405938:	40020000 0000001f 00010019 00000001     ...@............
  405948:	00000001 000000ff 00000000 00000004     ................
	...
  405964:	00000002 004059c0 00000000 2040038c     .....Y@.......@ 
  405974:	4005c000 0000003c 00010019 00000001     ...@<...........
  405984:	00000001 000000ff 00000000 00000004     ................
	...
  4059a0:	00000001 004059b0 00000000 20400380     .....Y@.......@ 

004059b0 <_ch_cfg1>:
  4059b0:	00000000 0000010b 000003e8 00000200     ................

004059c0 <_ch_cfg0>:
  4059c0:	00000000 0000010b 000003e8 00000200     ................
  4059d0:	00000002 0000010b 000003e8 00000200     ................
  4059e0:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  4059f0:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  405a00:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00405a0c <_usarts>:
  405a0c:	00000001 001008c0 000100f4 682f2e2e     ............../h
  405a1c:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  405a2c:	632e7472 00000000                       rt.c....

00405a34 <_cfgs>:
  405a34:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  405a44:	00000040 00000000 00000040 00000000     @.......@.......
  405a54:	00000040 00000000 00000040 00000000     @.......@.......
  405a64:	00000040 00000000 00000040 00000000     @.......@.......
  405a74:	00000040 00000000 00000040 00000000     @.......@.......
  405a84:	00000040 00000000 00000040 00000000     @.......@.......
  405a94:	00000040 00000000 00000040 00000000     @.......@.......
  405aa4:	00000040 00000000 00000040 00000000     @.......@.......
  405ab4:	00000040 00000000 00000040 00000000     @.......@.......
  405ac4:	00000040 00000000 00000040 00000000     @.......@.......
  405ad4:	00000040 00000000 00000040 00000000     @.......@.......
  405ae4:	00000040 00000000 00000040 00000000     @.......@.......
  405af4:	74737973 206b6369 6f697270 79746972     systick priority
  405b04:	0a692520 00000000                        %i.....

00405b0c <_global_impure_ptr>:
  405b0c:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  405b1c:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  405b2c:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  405b3c:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  405b4c:	4e614e00 00000000                       .NaN....

00405b54 <__sf_fake_stderr>:
	...

00405b74 <__sf_fake_stdin>:
	...

00405b94 <__sf_fake_stdout>:
	...

00405bb8 <__mprec_bigtens>:
  405bb8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  405bc8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  405bd8:	7f73bf3c 75154fdd                       <.s..O.u

00405be0 <__mprec_tens>:
  405be0:	00000000 3ff00000 00000000 40240000     .......?......$@
  405bf0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  405c00:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  405c10:	00000000 412e8480 00000000 416312d0     .......A......cA
  405c20:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  405c30:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  405c40:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  405c50:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  405c60:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  405c70:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  405c80:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  405c90:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  405ca0:	79d99db4 44ea7843                       ...yCx.D

00405ca8 <p05.6047>:
  405ca8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  405cb8:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  405cc8:	5849534f 00002e00                                OSIX...

00405ccf <_ctype_>:
  405ccf:	20202000 20202020 28282020 20282828     .         ((((( 
  405cdf:	20202020 20202020 20202020 20202020                     
  405cef:	10108820 10101010 10101010 10101010      ...............
  405cff:	04040410 04040404 10040404 10101010     ................
  405d0f:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405d1f:	01010101 01010101 01010101 10101010     ................
  405d2f:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405d3f:	02020202 02020202 02020202 10101010     ................
  405d4f:	00000020 00000000 00000000 00000000      ...............
	...

00405dd0 <_init>:
  405dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405dd2:	bf00      	nop
  405dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405dd6:	bc08      	pop	{r3}
  405dd8:	469e      	mov	lr, r3
  405dda:	4770      	bx	lr

00405ddc <__init_array_start>:
  405ddc:	0040018d 	.word	0x0040018d

00405de0 <_fini>:
  405de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405de2:	bf00      	nop
  405de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405de6:	bc08      	pop	{r3}
  405de8:	469e      	mov	lr, r3
  405dea:	4770      	bx	lr

00405dec <__fini_array_start>:
  405dec:	00400169 	.word	0x00400169
