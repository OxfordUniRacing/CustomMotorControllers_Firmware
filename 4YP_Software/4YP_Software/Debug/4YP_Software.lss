
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004fc0  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e4  20400000  00404fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d0  204001e4  004051a4  000201e4  2**2
                  ALLOC
  3 .heap         00000204  204003b4  00405374  000201e4  2**0
                  ALLOC
  4 .stack        00000400  204005b8  00405578  000201e4  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001da2d  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003ead  00000000  00000000  0003dc98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000920f  00000000  00000000  00041b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b60  00000000  00000000  0004ad54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009a8  00000000  00000000  0004b8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000445ca  00000000  00000000  0004c25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00018e2f  00000000  00000000  00090826  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00153429  00000000  00000000  000a9655  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002944  00000000  00000000  001fca80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 09 40 20 7d 02 40 00 79 02 40 00 79 02 40 00     ..@ }.@.y.@.y.@.
  400010:	79 02 40 00 79 02 40 00 79 02 40 00 00 00 00 00     y.@.y.@.y.@.....
	...
  40002c:	79 02 40 00 79 02 40 00 00 00 00 00 79 02 40 00     y.@.y.@.....y.@.
  40003c:	79 02 40 00 79 02 40 00 79 02 40 00 79 02 40 00     y.@.y.@.y.@.y.@.
  40004c:	79 02 40 00 79 02 40 00 79 02 40 00 79 02 40 00     y.@.y.@.y.@.y.@.
  40005c:	79 02 40 00 79 02 40 00 00 00 00 00 e1 10 40 00     y.@.y.@.......@.
  40006c:	79 02 40 00 79 02 40 00 79 02 40 00 79 02 40 00     y.@.y.@.y.@.y.@.
  40007c:	79 02 40 00 d5 10 40 00 79 02 40 00 79 02 40 00     y.@...@.y.@.y.@.
  40008c:	79 02 40 00 79 02 40 00 79 02 40 00 79 02 40 00     y.@.y.@.y.@.y.@.
  40009c:	79 02 40 00 79 02 40 00 79 02 40 00 79 02 40 00     y.@.y.@.y.@.y.@.
  4000ac:	79 02 40 00 79 02 40 00 79 02 40 00 79 02 40 00     y.@.y.@.y.@.y.@.
  4000bc:	2d 12 40 00 79 02 40 00 79 02 40 00 79 02 40 00     -.@.y.@.y.@.y.@.
  4000cc:	79 02 40 00 79 02 40 00 a5 0e 40 00 79 02 40 00     y.@.y.@...@.y.@.
  4000dc:	79 02 40 00 79 02 40 00 79 02 40 00 79 02 40 00     y.@.y.@.y.@.y.@.
  4000ec:	79 02 40 00 79 02 40 00 79 02 40 00 79 02 40 00     y.@.y.@.y.@.y.@.
  4000fc:	79 02 40 00 79 02 40 00 79 02 40 00 79 02 40 00     y.@.y.@.y.@.y.@.
  40010c:	79 02 40 00 79 02 40 00 00 00 00 00 00 00 00 00     y.@.y.@.........
  40011c:	00 00 00 00 79 02 40 00 79 02 40 00 79 02 40 00     ....y.@.y.@.y.@.
  40012c:	79 02 40 00 41 12 40 00 79 02 40 00 79 02 40 00     y.@.A.@.y.@.y.@.
  40013c:	79 02 40 00 79 02 40 00 79 02 40 00 79 02 40 00     y.@.y.@.y.@.y.@.
  40014c:	79 02 40 00 79 02 40 00 79 02 40 00 79 02 40 00     y.@.y.@.y.@.y.@.
  40015c:	79 02 40 00 79 02 40 00 79 02 40 00                 y.@.y.@.y.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204001e4 	.word	0x204001e4
  400184:	00000000 	.word	0x00000000
  400188:	00404fc0 	.word	0x00404fc0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00404fc0 	.word	0x00404fc0
  4001c8:	204001e8 	.word	0x204001e8
  4001cc:	00404fc0 	.word	0x00404fc0
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400655 	.word	0x00400655
  4001e4:	004017f5 	.word	0x004017f5

004001e8 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  4001e8:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_sync_enable_channel(ADC_CURRENT_A);
  4001ea:	4d11      	ldr	r5, [pc, #68]	; (400230 <adc_enable_all+0x48>)
  4001ec:	2108      	movs	r1, #8
  4001ee:	4628      	mov	r0, r5
  4001f0:	4c10      	ldr	r4, [pc, #64]	; (400234 <adc_enable_all+0x4c>)
  4001f2:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_CURRENT_B);
  4001f4:	2102      	movs	r1, #2
  4001f6:	4628      	mov	r0, r5
  4001f8:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_CURRENT_C);
  4001fa:	4e0f      	ldr	r6, [pc, #60]	; (400238 <adc_enable_all+0x50>)
  4001fc:	2101      	movs	r1, #1
  4001fe:	4630      	mov	r0, r6
  400200:	47a0      	blx	r4
	
	adc_sync_enable_channel(ADC_SUPPL_VOLTAGE);
  400202:	2106      	movs	r1, #6
  400204:	4630      	mov	r0, r6
  400206:	47a0      	blx	r4
	
	adc_sync_enable_channel(ADC_TEMP_1);
  400208:	2105      	movs	r1, #5
  40020a:	4630      	mov	r0, r6
  40020c:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_2);
  40020e:	2106      	movs	r1, #6
  400210:	4628      	mov	r0, r5
  400212:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_sync_enable_channel(ADC_TEMP_4);
  400214:	210a      	movs	r1, #10
  400216:	4628      	mov	r0, r5
  400218:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_5);
  40021a:	2100      	movs	r1, #0
  40021c:	4630      	mov	r0, r6
  40021e:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_6);
  400220:	2105      	movs	r1, #5
  400222:	4628      	mov	r0, r5
  400224:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_MOTOR);
  400226:	2100      	movs	r1, #0
  400228:	4628      	mov	r0, r5
  40022a:	47a0      	blx	r4
  40022c:	bd70      	pop	{r4, r5, r6, pc}
  40022e:	bf00      	nop
  400230:	204002cc 	.word	0x204002cc
  400234:	0040078d 	.word	0x0040078d
  400238:	204002ec 	.word	0x204002ec

0040023c <pwm_enable_all>:



//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  40023c:	b570      	push	{r4, r5, r6, lr}
	//note it's possible to individual channels, but not through these functions
	//functions from hal_pwm.h
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  40023e:	4c0a      	ldr	r4, [pc, #40]	; (400268 <pwm_enable_all+0x2c>)
  400240:	4620      	mov	r0, r4
  400242:	4e0a      	ldr	r6, [pc, #40]	; (40026c <pwm_enable_all+0x30>)
  400244:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  400246:	4d0a      	ldr	r5, [pc, #40]	; (400270 <pwm_enable_all+0x34>)
  400248:	4628      	mov	r0, r5
  40024a:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  40024c:	f241 3288 	movw	r2, #5000	; 0x1388
  400250:	f242 7110 	movw	r1, #10000	; 0x2710
  400254:	4620      	mov	r0, r4
  400256:	4c07      	ldr	r4, [pc, #28]	; (400274 <pwm_enable_all+0x38>)
  400258:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1  , PWM_PERIOD, PWM_PERIOD>>1);
  40025a:	f241 3288 	movw	r2, #5000	; 0x1388
  40025e:	f242 7110 	movw	r1, #10000	; 0x2710
  400262:	4628      	mov	r0, r5
  400264:	47a0      	blx	r4
  400266:	bd70      	pop	{r4, r5, r6, pc}
  400268:	2040027c 	.word	0x2040027c
  40026c:	004009a5 	.word	0x004009a5
  400270:	204002d0 	.word	0x204002d0
  400274:	004009e1 	.word	0x004009e1

00400278 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400278:	e7fe      	b.n	400278 <Dummy_Handler>
	...

0040027c <Reset_Handler>:
{
  40027c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40027e:	4b10      	ldr	r3, [pc, #64]	; (4002c0 <Reset_Handler+0x44>)
  400280:	4a10      	ldr	r2, [pc, #64]	; (4002c4 <Reset_Handler+0x48>)
  400282:	429a      	cmp	r2, r3
  400284:	d009      	beq.n	40029a <Reset_Handler+0x1e>
  400286:	4b0e      	ldr	r3, [pc, #56]	; (4002c0 <Reset_Handler+0x44>)
  400288:	4a0e      	ldr	r2, [pc, #56]	; (4002c4 <Reset_Handler+0x48>)
  40028a:	e003      	b.n	400294 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  40028c:	6811      	ldr	r1, [r2, #0]
  40028e:	6019      	str	r1, [r3, #0]
  400290:	3304      	adds	r3, #4
  400292:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400294:	490c      	ldr	r1, [pc, #48]	; (4002c8 <Reset_Handler+0x4c>)
  400296:	428b      	cmp	r3, r1
  400298:	d3f8      	bcc.n	40028c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40029a:	4b0c      	ldr	r3, [pc, #48]	; (4002cc <Reset_Handler+0x50>)
  40029c:	e002      	b.n	4002a4 <Reset_Handler+0x28>
                *pDest++ = 0;
  40029e:	2200      	movs	r2, #0
  4002a0:	601a      	str	r2, [r3, #0]
  4002a2:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4002a4:	4a0a      	ldr	r2, [pc, #40]	; (4002d0 <Reset_Handler+0x54>)
  4002a6:	4293      	cmp	r3, r2
  4002a8:	d3f9      	bcc.n	40029e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4002aa:	4a0a      	ldr	r2, [pc, #40]	; (4002d4 <Reset_Handler+0x58>)
  4002ac:	4b0a      	ldr	r3, [pc, #40]	; (4002d8 <Reset_Handler+0x5c>)
  4002ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4002b2:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4002b4:	4b09      	ldr	r3, [pc, #36]	; (4002dc <Reset_Handler+0x60>)
  4002b6:	4798      	blx	r3
        main();
  4002b8:	4b09      	ldr	r3, [pc, #36]	; (4002e0 <Reset_Handler+0x64>)
  4002ba:	4798      	blx	r3
  4002bc:	e7fe      	b.n	4002bc <Reset_Handler+0x40>
  4002be:	bf00      	nop
  4002c0:	20400000 	.word	0x20400000
  4002c4:	00404fc0 	.word	0x00404fc0
  4002c8:	204001e4 	.word	0x204001e4
  4002cc:	204001e4 	.word	0x204001e4
  4002d0:	204003b4 	.word	0x204003b4
  4002d4:	e000ed00 	.word	0xe000ed00
  4002d8:	00400000 	.word	0x00400000
  4002dc:	00402109 	.word	0x00402109
  4002e0:	004016dd 	.word	0x004016dd

004002e4 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  4002e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4002e8:	4b08      	ldr	r3, [pc, #32]	; (40030c <ADC_0_PORT_init+0x28>)
  4002ea:	601a      	str	r2, [r3, #0]
  4002ec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4002f0:	2208      	movs	r2, #8
  4002f2:	601a      	str	r2, [r3, #0]
  4002f4:	2204      	movs	r2, #4
  4002f6:	601a      	str	r2, [r3, #0]
  4002f8:	4a05      	ldr	r2, [pc, #20]	; (400310 <ADC_0_PORT_init+0x2c>)
  4002fa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4002fe:	6011      	str	r1, [r2, #0]
  400300:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400304:	6011      	str	r1, [r2, #0]
  400306:	2201      	movs	r2, #1
  400308:	601a      	str	r2, [r3, #0]
  40030a:	4770      	bx	lr
  40030c:	400e1400 	.word	0x400e1400
  400310:	400e0e00 	.word	0x400e0e00

00400314 <ADC_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400314:	4b04      	ldr	r3, [pc, #16]	; (400328 <ADC_0_CLOCK_init+0x14>)
  400316:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400318:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40031c:	d103      	bne.n	400326 <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40031e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400322:	4b01      	ldr	r3, [pc, #4]	; (400328 <ADC_0_CLOCK_init+0x14>)
  400324:	611a      	str	r2, [r3, #16]
  400326:	4770      	bx	lr
  400328:	400e0600 	.word	0x400e0600

0040032c <ADC_0_init>:

	_pmc_enable_periph_clock(ID_AFEC0);
}

void ADC_0_init(void)
{
  40032c:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  40032e:	4b05      	ldr	r3, [pc, #20]	; (400344 <ADC_0_init+0x18>)
  400330:	4798      	blx	r3
	ADC_0_PORT_init();
  400332:	4b05      	ldr	r3, [pc, #20]	; (400348 <ADC_0_init+0x1c>)
  400334:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  400336:	2200      	movs	r2, #0
  400338:	4904      	ldr	r1, [pc, #16]	; (40034c <ADC_0_init+0x20>)
  40033a:	4805      	ldr	r0, [pc, #20]	; (400350 <ADC_0_init+0x24>)
  40033c:	4b05      	ldr	r3, [pc, #20]	; (400354 <ADC_0_init+0x28>)
  40033e:	4798      	blx	r3
  400340:	bd08      	pop	{r3, pc}
  400342:	bf00      	nop
  400344:	00400315 	.word	0x00400315
  400348:	004002e5 	.word	0x004002e5
  40034c:	4003c000 	.word	0x4003c000
  400350:	204002cc 	.word	0x204002cc
  400354:	0040075d 	.word	0x0040075d

00400358 <ADC_1_PORT_init>:
  400358:	2202      	movs	r2, #2
  40035a:	4b07      	ldr	r3, [pc, #28]	; (400378 <ADC_1_PORT_init+0x20>)
  40035c:	601a      	str	r2, [r3, #0]
  40035e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400366:	601a      	str	r2, [r3, #0]
  400368:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40036c:	601a      	str	r2, [r3, #0]
  40036e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400372:	601a      	str	r2, [r3, #0]
  400374:	4770      	bx	lr
  400376:	bf00      	nop
  400378:	400e1000 	.word	0x400e1000

0040037c <ADC_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40037c:	4b05      	ldr	r3, [pc, #20]	; (400394 <ADC_1_CLOCK_init+0x18>)
  40037e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400382:	f413 7f80 	tst.w	r3, #256	; 0x100
  400386:	d104      	bne.n	400392 <ADC_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400388:	f44f 7280 	mov.w	r2, #256	; 0x100
  40038c:	4b01      	ldr	r3, [pc, #4]	; (400394 <ADC_1_CLOCK_init+0x18>)
  40038e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400392:	4770      	bx	lr
  400394:	400e0600 	.word	0x400e0600

00400398 <ADC_1_init>:

	_pmc_enable_periph_clock(ID_AFEC1);
}

void ADC_1_init(void)
{
  400398:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
  40039a:	4b05      	ldr	r3, [pc, #20]	; (4003b0 <ADC_1_init+0x18>)
  40039c:	4798      	blx	r3
	ADC_1_PORT_init();
  40039e:	4b05      	ldr	r3, [pc, #20]	; (4003b4 <ADC_1_init+0x1c>)
  4003a0:	4798      	blx	r3
	adc_sync_init(&ADC_1, AFEC1, (void *)NULL);
  4003a2:	2200      	movs	r2, #0
  4003a4:	4904      	ldr	r1, [pc, #16]	; (4003b8 <ADC_1_init+0x20>)
  4003a6:	4805      	ldr	r0, [pc, #20]	; (4003bc <ADC_1_init+0x24>)
  4003a8:	4b05      	ldr	r3, [pc, #20]	; (4003c0 <ADC_1_init+0x28>)
  4003aa:	4798      	blx	r3
  4003ac:	bd08      	pop	{r3, pc}
  4003ae:	bf00      	nop
  4003b0:	0040037d 	.word	0x0040037d
  4003b4:	00400359 	.word	0x00400359
  4003b8:	40064000 	.word	0x40064000
  4003bc:	204002ec 	.word	0x204002ec
  4003c0:	0040075d 	.word	0x0040075d

004003c4 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  4003c4:	4b04      	ldr	r3, [pc, #16]	; (4003d8 <EXTERNAL_IRQ_D_init+0x14>)
  4003c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4003ca:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  4003cc:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  4003ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003d2:	601a      	str	r2, [r3, #0]
  4003d4:	4770      	bx	lr
  4003d6:	bf00      	nop
  4003d8:	400e1400 	.word	0x400e1400

004003dc <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  4003dc:	4b06      	ldr	r3, [pc, #24]	; (4003f8 <EXTERNAL_IRQ_A_init+0x1c>)
  4003de:	2204      	movs	r2, #4
  4003e0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4003e2:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4003e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003e8:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4003ea:	2220      	movs	r2, #32
  4003ec:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  4003ee:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  4003f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4003f4:	601a      	str	r2, [r3, #0]
  4003f6:	4770      	bx	lr
  4003f8:	400e0e00 	.word	0x400e0e00

004003fc <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003fc:	4b16      	ldr	r3, [pc, #88]	; (400458 <PWM_0_PORT_init+0x5c>)
  4003fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400400:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400404:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400406:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400408:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  40040c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40040e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400412:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400414:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400416:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  40041a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40041c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40041e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400422:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400424:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400428:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40042a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40042c:	f022 0202 	bic.w	r2, r2, #2
  400430:	671a      	str	r2, [r3, #112]	; 0x70
  400432:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400434:	f022 0202 	bic.w	r2, r2, #2
  400438:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40043a:	2202      	movs	r2, #2
  40043c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40043e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400440:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400444:	671a      	str	r2, [r3, #112]	; 0x70
  400446:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400448:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  40044c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40044e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400452:	605a      	str	r2, [r3, #4]
  400454:	4770      	bx	lr
  400456:	bf00      	nop
  400458:	400e0e00 	.word	0x400e0e00

0040045c <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40045c:	4b04      	ldr	r3, [pc, #16]	; (400470 <PWM_0_CLOCK_init+0x14>)
  40045e:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400460:	2b00      	cmp	r3, #0
  400462:	db03      	blt.n	40046c <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400464:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400468:	4b01      	ldr	r3, [pc, #4]	; (400470 <PWM_0_CLOCK_init+0x14>)
  40046a:	611a      	str	r2, [r3, #16]
  40046c:	4770      	bx	lr
  40046e:	bf00      	nop
  400470:	400e0600 	.word	0x400e0600

00400474 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400474:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  400476:	4b06      	ldr	r3, [pc, #24]	; (400490 <PWM_0_init+0x1c>)
  400478:	4798      	blx	r3
	PWM_0_PORT_init();
  40047a:	4b06      	ldr	r3, [pc, #24]	; (400494 <PWM_0_init+0x20>)
  40047c:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  40047e:	4b06      	ldr	r3, [pc, #24]	; (400498 <PWM_0_init+0x24>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	4905      	ldr	r1, [pc, #20]	; (40049c <PWM_0_init+0x28>)
  400486:	4806      	ldr	r0, [pc, #24]	; (4004a0 <PWM_0_init+0x2c>)
  400488:	4b06      	ldr	r3, [pc, #24]	; (4004a4 <PWM_0_init+0x30>)
  40048a:	4798      	blx	r3
  40048c:	bd08      	pop	{r3, pc}
  40048e:	bf00      	nop
  400490:	0040045d 	.word	0x0040045d
  400494:	004003fd 	.word	0x004003fd
  400498:	00401461 	.word	0x00401461
  40049c:	40020000 	.word	0x40020000
  4004a0:	2040027c 	.word	0x2040027c
  4004a4:	00400961 	.word	0x00400961

004004a8 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004a8:	4b0c      	ldr	r3, [pc, #48]	; (4004dc <PWM_1_PORT_init+0x34>)
  4004aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4004b0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4004b2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4004b8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4004be:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4004c0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4004c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004c6:	f042 0201 	orr.w	r2, r2, #1
  4004ca:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4004cc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004ce:	f022 0201 	bic.w	r2, r2, #1
  4004d2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004d4:	2201      	movs	r2, #1
  4004d6:	605a      	str	r2, [r3, #4]
  4004d8:	4770      	bx	lr
  4004da:	bf00      	nop
  4004dc:	400e0e00 	.word	0x400e0e00

004004e0 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4004e0:	4b05      	ldr	r3, [pc, #20]	; (4004f8 <PWM_1_CLOCK_init+0x18>)
  4004e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4004e6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  4004ea:	d104      	bne.n	4004f6 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4004ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4004f0:	4b01      	ldr	r3, [pc, #4]	; (4004f8 <PWM_1_CLOCK_init+0x18>)
  4004f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4004f6:	4770      	bx	lr
  4004f8:	400e0600 	.word	0x400e0600

004004fc <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  4004fc:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  4004fe:	4b06      	ldr	r3, [pc, #24]	; (400518 <PWM_1_init+0x1c>)
  400500:	4798      	blx	r3
	PWM_1_PORT_init();
  400502:	4b06      	ldr	r3, [pc, #24]	; (40051c <PWM_1_init+0x20>)
  400504:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400506:	4b06      	ldr	r3, [pc, #24]	; (400520 <PWM_1_init+0x24>)
  400508:	4798      	blx	r3
  40050a:	4602      	mov	r2, r0
  40050c:	4905      	ldr	r1, [pc, #20]	; (400524 <PWM_1_init+0x28>)
  40050e:	4806      	ldr	r0, [pc, #24]	; (400528 <PWM_1_init+0x2c>)
  400510:	4b06      	ldr	r3, [pc, #24]	; (40052c <PWM_1_init+0x30>)
  400512:	4798      	blx	r3
  400514:	bd08      	pop	{r3, pc}
  400516:	bf00      	nop
  400518:	004004e1 	.word	0x004004e1
  40051c:	004004a9 	.word	0x004004a9
  400520:	00401461 	.word	0x00401461
  400524:	4005c000 	.word	0x4005c000
  400528:	204002d0 	.word	0x204002d0
  40052c:	00400961 	.word	0x00400961

00400530 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400530:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400532:	4802      	ldr	r0, [pc, #8]	; (40053c <delay_driver_init+0xc>)
  400534:	4b02      	ldr	r3, [pc, #8]	; (400540 <delay_driver_init+0x10>)
  400536:	4798      	blx	r3
  400538:	bd08      	pop	{r3, pc}
  40053a:	bf00      	nop
  40053c:	e000e010 	.word	0xe000e010
  400540:	00400841 	.word	0x00400841

00400544 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400544:	4b0f      	ldr	r3, [pc, #60]	; (400584 <EDBG_COM_PORT_init+0x40>)
  400546:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400548:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40054c:	671a      	str	r2, [r3, #112]	; 0x70
  40054e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400550:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400554:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400556:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40055a:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  40055c:	4a0a      	ldr	r2, [pc, #40]	; (400588 <EDBG_COM_PORT_init+0x44>)
  40055e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400562:	f043 0310 	orr.w	r3, r3, #16
  400566:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40056a:	4b08      	ldr	r3, [pc, #32]	; (40058c <EDBG_COM_PORT_init+0x48>)
  40056c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40056e:	f042 0210 	orr.w	r2, r2, #16
  400572:	671a      	str	r2, [r3, #112]	; 0x70
  400574:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400576:	f042 0210 	orr.w	r2, r2, #16
  40057a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40057c:	2210      	movs	r2, #16
  40057e:	605a      	str	r2, [r3, #4]
  400580:	4770      	bx	lr
  400582:	bf00      	nop
  400584:	400e0e00 	.word	0x400e0e00
  400588:	40088000 	.word	0x40088000
  40058c:	400e1000 	.word	0x400e1000

00400590 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400590:	4b04      	ldr	r3, [pc, #16]	; (4005a4 <EDBG_COM_CLOCK_init+0x14>)
  400592:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400594:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400598:	d103      	bne.n	4005a2 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40059a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40059e:	4b01      	ldr	r3, [pc, #4]	; (4005a4 <EDBG_COM_CLOCK_init+0x14>)
  4005a0:	611a      	str	r2, [r3, #16]
  4005a2:	4770      	bx	lr
  4005a4:	400e0600 	.word	0x400e0600

004005a8 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  4005a8:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  4005aa:	4b06      	ldr	r3, [pc, #24]	; (4005c4 <EDBG_COM_init+0x1c>)
  4005ac:	4798      	blx	r3
	EDBG_COM_PORT_init();
  4005ae:	4b06      	ldr	r3, [pc, #24]	; (4005c8 <EDBG_COM_init+0x20>)
  4005b0:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  4005b2:	4b06      	ldr	r3, [pc, #24]	; (4005cc <EDBG_COM_init+0x24>)
  4005b4:	4798      	blx	r3
  4005b6:	4602      	mov	r2, r0
  4005b8:	4905      	ldr	r1, [pc, #20]	; (4005d0 <EDBG_COM_init+0x28>)
  4005ba:	4806      	ldr	r0, [pc, #24]	; (4005d4 <EDBG_COM_init+0x2c>)
  4005bc:	4b06      	ldr	r3, [pc, #24]	; (4005d8 <EDBG_COM_init+0x30>)
  4005be:	4798      	blx	r3
  4005c0:	bd08      	pop	{r3, pc}
  4005c2:	bf00      	nop
  4005c4:	00400591 	.word	0x00400591
  4005c8:	00400545 	.word	0x00400545
  4005cc:	004016d9 	.word	0x004016d9
  4005d0:	40028000 	.word	0x40028000
  4005d4:	204002c0 	.word	0x204002c0
  4005d8:	00400ae1 	.word	0x00400ae1

004005dc <CAN_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4005dc:	4b05      	ldr	r3, [pc, #20]	; (4005f4 <CAN_1_CLOCK_init+0x18>)
  4005de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4005e2:	f013 0f20 	tst.w	r3, #32
  4005e6:	d103      	bne.n	4005f0 <CAN_1_CLOCK_init+0x14>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4005e8:	2220      	movs	r2, #32
  4005ea:	4b02      	ldr	r3, [pc, #8]	; (4005f4 <CAN_1_CLOCK_init+0x18>)
  4005ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4005f0:	4770      	bx	lr
  4005f2:	bf00      	nop
  4005f4:	400e0600 	.word	0x400e0600

004005f8 <CAN_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4005f8:	4b0b      	ldr	r3, [pc, #44]	; (400628 <CAN_1_PORT_init+0x30>)
  4005fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4005fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400600:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400602:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400604:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400608:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40060a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40060e:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400610:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400612:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  400616:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400618:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40061a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40061e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400620:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400624:	605a      	str	r2, [r3, #4]
  400626:	4770      	bx	lr
  400628:	400e1200 	.word	0x400e1200

0040062c <CAN_1_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_1_init(void)
{
  40062c:	b508      	push	{r3, lr}
	CAN_1_CLOCK_init();
  40062e:	4b04      	ldr	r3, [pc, #16]	; (400640 <CAN_1_init+0x14>)
  400630:	4798      	blx	r3
	CAN_1_PORT_init();
  400632:	4b04      	ldr	r3, [pc, #16]	; (400644 <CAN_1_init+0x18>)
  400634:	4798      	blx	r3
	can_async_init(&CAN_1, MCAN1);
  400636:	4904      	ldr	r1, [pc, #16]	; (400648 <CAN_1_init+0x1c>)
  400638:	4804      	ldr	r0, [pc, #16]	; (40064c <CAN_1_init+0x20>)
  40063a:	4b05      	ldr	r3, [pc, #20]	; (400650 <CAN_1_init+0x24>)
  40063c:	4798      	blx	r3
  40063e:	bd08      	pop	{r3, pc}
  400640:	004005dd 	.word	0x004005dd
  400644:	004005f9 	.word	0x004005f9
  400648:	40034000 	.word	0x40034000
  40064c:	20400298 	.word	0x20400298
  400650:	004007f1 	.word	0x004007f1

00400654 <system_init>:
}

void system_init(void)
{
  400654:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400656:	4b33      	ldr	r3, [pc, #204]	; (400724 <system_init+0xd0>)
  400658:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40065a:	4b33      	ldr	r3, [pc, #204]	; (400728 <system_init+0xd4>)
  40065c:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40065e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400662:	d103      	bne.n	40066c <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400664:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400668:	4b2f      	ldr	r3, [pc, #188]	; (400728 <system_init+0xd4>)
  40066a:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40066c:	4b2e      	ldr	r3, [pc, #184]	; (400728 <system_init+0xd4>)
  40066e:	699b      	ldr	r3, [r3, #24]
  400670:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400674:	d103      	bne.n	40067e <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400676:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40067a:	4b2b      	ldr	r3, [pc, #172]	; (400728 <system_init+0xd4>)
  40067c:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40067e:	4b2a      	ldr	r3, [pc, #168]	; (400728 <system_init+0xd4>)
  400680:	699b      	ldr	r3, [r3, #24]
  400682:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400686:	d103      	bne.n	400690 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400688:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40068c:	4b26      	ldr	r3, [pc, #152]	; (400728 <system_init+0xd4>)
  40068e:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400690:	4a26      	ldr	r2, [pc, #152]	; (40072c <system_init+0xd8>)
  400692:	6853      	ldr	r3, [r2, #4]
  400694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400698:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  40069a:	4b25      	ldr	r3, [pc, #148]	; (400730 <system_init+0xdc>)
  40069c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4006a0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  4006a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  4006a6:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  4006a8:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4006aa:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  4006ae:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4006b0:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006b2:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4006b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4006b8:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4006ba:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006bc:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4006be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4006c2:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4006c4:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006c6:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4006c8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  4006cc:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4006ce:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006d0:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4006d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4006d6:	f44f 7080 	mov.w	r0, #256	; 0x100
  4006da:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4006dc:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006de:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4006e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4006e4:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4006e6:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006e8:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4006ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4006ee:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4006f0:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006f2:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4006f4:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4006f6:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4006f8:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  4006fa:	4b0e      	ldr	r3, [pc, #56]	; (400734 <system_init+0xe0>)
  4006fc:	4798      	blx	r3

	ADC_1_init();
  4006fe:	4b0e      	ldr	r3, [pc, #56]	; (400738 <system_init+0xe4>)
  400700:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  400702:	4b0e      	ldr	r3, [pc, #56]	; (40073c <system_init+0xe8>)
  400704:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  400706:	4b0e      	ldr	r3, [pc, #56]	; (400740 <system_init+0xec>)
  400708:	4798      	blx	r3

	PWM_0_init();
  40070a:	4b0e      	ldr	r3, [pc, #56]	; (400744 <system_init+0xf0>)
  40070c:	4798      	blx	r3

	PWM_1_init();
  40070e:	4b0e      	ldr	r3, [pc, #56]	; (400748 <system_init+0xf4>)
  400710:	4798      	blx	r3

	delay_driver_init();
  400712:	4b0e      	ldr	r3, [pc, #56]	; (40074c <system_init+0xf8>)
  400714:	4798      	blx	r3

	EDBG_COM_init();
  400716:	4b0e      	ldr	r3, [pc, #56]	; (400750 <system_init+0xfc>)
  400718:	4798      	blx	r3

	CAN_1_init();
  40071a:	4b0e      	ldr	r3, [pc, #56]	; (400754 <system_init+0x100>)
  40071c:	4798      	blx	r3

	ext_irq_init();
  40071e:	4b0e      	ldr	r3, [pc, #56]	; (400758 <system_init+0x104>)
  400720:	4798      	blx	r3
  400722:	bd08      	pop	{r3, pc}
  400724:	00400cd1 	.word	0x00400cd1
  400728:	400e0600 	.word	0x400e0600
  40072c:	400e1850 	.word	0x400e1850
  400730:	400e0e00 	.word	0x400e0e00
  400734:	0040032d 	.word	0x0040032d
  400738:	00400399 	.word	0x00400399
  40073c:	004003c5 	.word	0x004003c5
  400740:	004003dd 	.word	0x004003dd
  400744:	00400475 	.word	0x00400475
  400748:	004004fd 	.word	0x004004fd
  40074c:	00400531 	.word	0x00400531
  400750:	004005a9 	.word	0x004005a9
  400754:	0040062d 	.word	0x0040062d
  400758:	004008b9 	.word	0x004008b9

0040075c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  40075c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40075e:	4604      	mov	r4, r0
  400760:	460d      	mov	r5, r1
  400762:	2800      	cmp	r0, #0
  400764:	bf18      	it	ne
  400766:	2900      	cmpne	r1, #0
  400768:	bf14      	ite	ne
  40076a:	2001      	movne	r0, #1
  40076c:	2000      	moveq	r0, #0
  40076e:	2239      	movs	r2, #57	; 0x39
  400770:	4903      	ldr	r1, [pc, #12]	; (400780 <adc_sync_init+0x24>)
  400772:	4b04      	ldr	r3, [pc, #16]	; (400784 <adc_sync_init+0x28>)
  400774:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  400776:	4629      	mov	r1, r5
  400778:	4620      	mov	r0, r4
  40077a:	4b03      	ldr	r3, [pc, #12]	; (400788 <adc_sync_init+0x2c>)
  40077c:	4798      	blx	r3
}
  40077e:	bd38      	pop	{r3, r4, r5, pc}
  400780:	00404a28 	.word	0x00404a28
  400784:	00400b55 	.word	0x00400b55
  400788:	00400c79 	.word	0x00400c79

0040078c <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
  40078c:	b538      	push	{r3, r4, r5, lr}
  40078e:	460d      	mov	r5, r1
	ASSERT(descr);
  400790:	4604      	mov	r4, r0
  400792:	224e      	movs	r2, #78	; 0x4e
  400794:	4905      	ldr	r1, [pc, #20]	; (4007ac <adc_sync_enable_channel+0x20>)
  400796:	3000      	adds	r0, #0
  400798:	bf18      	it	ne
  40079a:	2001      	movne	r0, #1
  40079c:	4b04      	ldr	r3, [pc, #16]	; (4007b0 <adc_sync_enable_channel+0x24>)
  40079e:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
  4007a0:	4629      	mov	r1, r5
  4007a2:	4620      	mov	r0, r4
  4007a4:	4b03      	ldr	r3, [pc, #12]	; (4007b4 <adc_sync_enable_channel+0x28>)
  4007a6:	4798      	blx	r3

	return ERR_NONE;
}
  4007a8:	2000      	movs	r0, #0
  4007aa:	bd38      	pop	{r3, r4, r5, pc}
  4007ac:	00404a28 	.word	0x00404a28
  4007b0:	00400b55 	.word	0x00400b55
  4007b4:	00400cb1 	.word	0x00400cb1

004007b8 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4007b8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4007bc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4007be:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4007c0:	f3bf 8f5f 	dmb	sy
  4007c4:	4770      	bx	lr

004007c6 <atomic_leave_critical>:
  4007c6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4007ca:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4007cc:	f383 8810 	msr	PRIMASK, r3
  4007d0:	4770      	bx	lr

004007d2 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
  4007d2:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
  4007d4:	69c3      	ldr	r3, [r0, #28]
  4007d6:	b103      	cbz	r3, 4007da <can_tx_done+0x8>
		descr->cb.tx_done(descr);
  4007d8:	4798      	blx	r3
  4007da:	bd08      	pop	{r3, pc}

004007dc <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
  4007dc:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
  4007de:	6a03      	ldr	r3, [r0, #32]
  4007e0:	b103      	cbz	r3, 4007e4 <can_rx_done+0x8>
		descr->cb.rx_done(descr);
  4007e2:	4798      	blx	r3
  4007e4:	bd08      	pop	{r3, pc}

004007e6 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
  4007e6:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
  4007e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
  4007ea:	b103      	cbz	r3, 4007ee <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
  4007ec:	4798      	blx	r3
  4007ee:	bd08      	pop	{r3, pc}

004007f0 <can_async_init>:
{
  4007f0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4007f2:	4604      	mov	r4, r0
  4007f4:	460d      	mov	r5, r1
  4007f6:	2800      	cmp	r0, #0
  4007f8:	bf18      	it	ne
  4007fa:	2900      	cmpne	r1, #0
  4007fc:	bf14      	ite	ne
  4007fe:	2001      	movne	r0, #1
  400800:	2000      	moveq	r0, #0
  400802:	2241      	movs	r2, #65	; 0x41
  400804:	4908      	ldr	r1, [pc, #32]	; (400828 <can_async_init+0x38>)
  400806:	4b09      	ldr	r3, [pc, #36]	; (40082c <can_async_init+0x3c>)
  400808:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
  40080a:	4629      	mov	r1, r5
  40080c:	4620      	mov	r0, r4
  40080e:	4b08      	ldr	r3, [pc, #32]	; (400830 <can_async_init+0x40>)
  400810:	4798      	blx	r3
	if (rc) {
  400812:	4603      	mov	r3, r0
  400814:	b928      	cbnz	r0, 400822 <can_async_init+0x32>
	descr->dev.cb.tx_done     = can_tx_done;
  400816:	4a07      	ldr	r2, [pc, #28]	; (400834 <can_async_init+0x44>)
  400818:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
  40081a:	4a07      	ldr	r2, [pc, #28]	; (400838 <can_async_init+0x48>)
  40081c:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
  40081e:	4a07      	ldr	r2, [pc, #28]	; (40083c <can_async_init+0x4c>)
  400820:	60e2      	str	r2, [r4, #12]
}
  400822:	4618      	mov	r0, r3
  400824:	bd38      	pop	{r3, r4, r5, pc}
  400826:	bf00      	nop
  400828:	00404a44 	.word	0x00404a44
  40082c:	00400b55 	.word	0x00400b55
  400830:	00400d99 	.word	0x00400d99
  400834:	004007d3 	.word	0x004007d3
  400838:	004007dd 	.word	0x004007dd
  40083c:	004007e7 	.word	0x004007e7

00400840 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  400840:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  400842:	4b02      	ldr	r3, [pc, #8]	; (40084c <delay_init+0xc>)
  400844:	6018      	str	r0, [r3, #0]
  400846:	4b02      	ldr	r3, [pc, #8]	; (400850 <delay_init+0x10>)
  400848:	4798      	blx	r3
  40084a:	bd08      	pop	{r3, pc}
  40084c:	20400200 	.word	0x20400200
  400850:	00401479 	.word	0x00401479

00400854 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400854:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  400856:	4b04      	ldr	r3, [pc, #16]	; (400868 <delay_ms+0x14>)
  400858:	681c      	ldr	r4, [r3, #0]
  40085a:	4b04      	ldr	r3, [pc, #16]	; (40086c <delay_ms+0x18>)
  40085c:	4798      	blx	r3
  40085e:	4601      	mov	r1, r0
  400860:	4620      	mov	r0, r4
  400862:	4b03      	ldr	r3, [pc, #12]	; (400870 <delay_ms+0x1c>)
  400864:	4798      	blx	r3
  400866:	bd10      	pop	{r4, pc}
  400868:	20400200 	.word	0x20400200
  40086c:	00400cbd 	.word	0x00400cbd
  400870:	00401485 	.word	0x00401485

00400874 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400874:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400876:	2503      	movs	r5, #3
  400878:	2400      	movs	r4, #0

	while (upper >= lower) {
  40087a:	e007      	b.n	40088c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  40087c:	4a0d      	ldr	r2, [pc, #52]	; (4008b4 <process_ext_irq+0x40>)
  40087e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400882:	b1b3      	cbz	r3, 4008b2 <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  400884:	4798      	blx	r3
  400886:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  400888:	3a01      	subs	r2, #1
  40088a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  40088c:	42ac      	cmp	r4, r5
  40088e:	d810      	bhi.n	4008b2 <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  400890:	192b      	adds	r3, r5, r4
  400892:	105b      	asrs	r3, r3, #1
  400894:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  400896:	2a02      	cmp	r2, #2
  400898:	d80b      	bhi.n	4008b2 <process_ext_irq+0x3e>
  40089a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  40089c:	4905      	ldr	r1, [pc, #20]	; (4008b4 <process_ext_irq+0x40>)
  40089e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  4008a2:	6849      	ldr	r1, [r1, #4]
  4008a4:	4281      	cmp	r1, r0
  4008a6:	d0e9      	beq.n	40087c <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  4008a8:	4281      	cmp	r1, r0
  4008aa:	d2ed      	bcs.n	400888 <process_ext_irq+0x14>
			lower = middle + 1;
  4008ac:	3201      	adds	r2, #1
  4008ae:	b2d4      	uxtb	r4, r2
  4008b0:	e7ec      	b.n	40088c <process_ext_irq+0x18>
  4008b2:	bd38      	pop	{r3, r4, r5, pc}
  4008b4:	20400204 	.word	0x20400204

004008b8 <ext_irq_init>:
{
  4008b8:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4008ba:	2300      	movs	r3, #0
  4008bc:	e00a      	b.n	4008d4 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  4008be:	4a08      	ldr	r2, [pc, #32]	; (4008e0 <ext_irq_init+0x28>)
  4008c0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  4008c4:	f04f 30ff 	mov.w	r0, #4294967295
  4008c8:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  4008ca:	2100      	movs	r1, #0
  4008cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4008d0:	3301      	adds	r3, #1
  4008d2:	b29b      	uxth	r3, r3
  4008d4:	2b02      	cmp	r3, #2
  4008d6:	d9f2      	bls.n	4008be <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  4008d8:	4802      	ldr	r0, [pc, #8]	; (4008e4 <ext_irq_init+0x2c>)
  4008da:	4b03      	ldr	r3, [pc, #12]	; (4008e8 <ext_irq_init+0x30>)
  4008dc:	4798      	blx	r3
}
  4008de:	bd08      	pop	{r3, pc}
  4008e0:	20400204 	.word	0x20400204
  4008e4:	00400875 	.word	0x00400875
  4008e8:	004010ed 	.word	0x004010ed

004008ec <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4008ec:	b570      	push	{r4, r5, r6, lr}
  4008ee:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4008f0:	4604      	mov	r4, r0
  4008f2:	460d      	mov	r5, r1
  4008f4:	2800      	cmp	r0, #0
  4008f6:	bf18      	it	ne
  4008f8:	2900      	cmpne	r1, #0
  4008fa:	bf14      	ite	ne
  4008fc:	2001      	movne	r0, #1
  4008fe:	2000      	moveq	r0, #0
  400900:	2234      	movs	r2, #52	; 0x34
  400902:	4904      	ldr	r1, [pc, #16]	; (400914 <io_write+0x28>)
  400904:	4b04      	ldr	r3, [pc, #16]	; (400918 <io_write+0x2c>)
  400906:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400908:	6823      	ldr	r3, [r4, #0]
  40090a:	4632      	mov	r2, r6
  40090c:	4629      	mov	r1, r5
  40090e:	4620      	mov	r0, r4
  400910:	4798      	blx	r3
}
  400912:	bd70      	pop	{r4, r5, r6, pc}
  400914:	00404a60 	.word	0x00404a60
  400918:	00400b55 	.word	0x00400b55

0040091c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  40091c:	b570      	push	{r4, r5, r6, lr}
  40091e:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400920:	4604      	mov	r4, r0
  400922:	460d      	mov	r5, r1
  400924:	2800      	cmp	r0, #0
  400926:	bf18      	it	ne
  400928:	2900      	cmpne	r1, #0
  40092a:	bf14      	ite	ne
  40092c:	2001      	movne	r0, #1
  40092e:	2000      	moveq	r0, #0
  400930:	223d      	movs	r2, #61	; 0x3d
  400932:	4904      	ldr	r1, [pc, #16]	; (400944 <io_read+0x28>)
  400934:	4b04      	ldr	r3, [pc, #16]	; (400948 <io_read+0x2c>)
  400936:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400938:	6863      	ldr	r3, [r4, #4]
  40093a:	4632      	mov	r2, r6
  40093c:	4629      	mov	r1, r5
  40093e:	4620      	mov	r0, r4
  400940:	4798      	blx	r3
}
  400942:	bd70      	pop	{r4, r5, r6, pc}
  400944:	00404a60 	.word	0x00404a60
  400948:	00400b55 	.word	0x00400b55

0040094c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  40094c:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  40094e:	6943      	ldr	r3, [r0, #20]
  400950:	b103      	cbz	r3, 400954 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  400952:	4798      	blx	r3
  400954:	bd08      	pop	{r3, pc}

00400956 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400956:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400958:	6983      	ldr	r3, [r0, #24]
  40095a:	b103      	cbz	r3, 40095e <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  40095c:	4798      	blx	r3
  40095e:	bd08      	pop	{r3, pc}

00400960 <pwm_init>:
{
  400960:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400962:	4604      	mov	r4, r0
  400964:	460d      	mov	r5, r1
  400966:	2800      	cmp	r0, #0
  400968:	bf18      	it	ne
  40096a:	2900      	cmpne	r1, #0
  40096c:	bf14      	ite	ne
  40096e:	2001      	movne	r0, #1
  400970:	2000      	moveq	r0, #0
  400972:	2233      	movs	r2, #51	; 0x33
  400974:	4906      	ldr	r1, [pc, #24]	; (400990 <pwm_init+0x30>)
  400976:	4b07      	ldr	r3, [pc, #28]	; (400994 <pwm_init+0x34>)
  400978:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  40097a:	4629      	mov	r1, r5
  40097c:	4620      	mov	r0, r4
  40097e:	4b06      	ldr	r3, [pc, #24]	; (400998 <pwm_init+0x38>)
  400980:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  400982:	4b06      	ldr	r3, [pc, #24]	; (40099c <pwm_init+0x3c>)
  400984:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400986:	4b06      	ldr	r3, [pc, #24]	; (4009a0 <pwm_init+0x40>)
  400988:	6063      	str	r3, [r4, #4]
}
  40098a:	2000      	movs	r0, #0
  40098c:	bd38      	pop	{r3, r4, r5, pc}
  40098e:	bf00      	nop
  400990:	00404a74 	.word	0x00404a74
  400994:	00400b55 	.word	0x00400b55
  400998:	00401255 	.word	0x00401255
  40099c:	0040094d 	.word	0x0040094d
  4009a0:	00400957 	.word	0x00400957

004009a4 <pwm_enable>:
{
  4009a4:	b510      	push	{r4, lr}
	ASSERT(descr);
  4009a6:	4604      	mov	r4, r0
  4009a8:	224a      	movs	r2, #74	; 0x4a
  4009aa:	4909      	ldr	r1, [pc, #36]	; (4009d0 <pwm_enable+0x2c>)
  4009ac:	3000      	adds	r0, #0
  4009ae:	bf18      	it	ne
  4009b0:	2001      	movne	r0, #1
  4009b2:	4b08      	ldr	r3, [pc, #32]	; (4009d4 <pwm_enable+0x30>)
  4009b4:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  4009b6:	4620      	mov	r0, r4
  4009b8:	4b07      	ldr	r3, [pc, #28]	; (4009d8 <pwm_enable+0x34>)
  4009ba:	4798      	blx	r3
  4009bc:	b920      	cbnz	r0, 4009c8 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  4009be:	4620      	mov	r0, r4
  4009c0:	4b06      	ldr	r3, [pc, #24]	; (4009dc <pwm_enable+0x38>)
  4009c2:	4798      	blx	r3
	return ERR_NONE;
  4009c4:	2000      	movs	r0, #0
  4009c6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4009c8:	f06f 0010 	mvn.w	r0, #16
}
  4009cc:	bd10      	pop	{r4, pc}
  4009ce:	bf00      	nop
  4009d0:	00404a74 	.word	0x00404a74
  4009d4:	00400b55 	.word	0x00400b55
  4009d8:	00401431 	.word	0x00401431
  4009dc:	0040138d 	.word	0x0040138d

004009e0 <pwm_set_parameters>:
{
  4009e0:	b570      	push	{r4, r5, r6, lr}
  4009e2:	460d      	mov	r5, r1
  4009e4:	4616      	mov	r6, r2
	ASSERT(descr);
  4009e6:	4604      	mov	r4, r0
  4009e8:	227c      	movs	r2, #124	; 0x7c
  4009ea:	4906      	ldr	r1, [pc, #24]	; (400a04 <pwm_set_parameters+0x24>)
  4009ec:	3000      	adds	r0, #0
  4009ee:	bf18      	it	ne
  4009f0:	2001      	movne	r0, #1
  4009f2:	4b05      	ldr	r3, [pc, #20]	; (400a08 <pwm_set_parameters+0x28>)
  4009f4:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  4009f6:	4632      	mov	r2, r6
  4009f8:	4629      	mov	r1, r5
  4009fa:	4620      	mov	r0, r4
  4009fc:	4b03      	ldr	r3, [pc, #12]	; (400a0c <pwm_set_parameters+0x2c>)
  4009fe:	4798      	blx	r3
}
  400a00:	2000      	movs	r0, #0
  400a02:	bd70      	pop	{r4, r5, r6, pc}
  400a04:	00404a74 	.word	0x00404a74
  400a08:	00400b55 	.word	0x00400b55
  400a0c:	004013d1 	.word	0x004013d1

00400a10 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400a12:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400a14:	4605      	mov	r5, r0
  400a16:	460f      	mov	r7, r1
  400a18:	2800      	cmp	r0, #0
  400a1a:	bf18      	it	ne
  400a1c:	2900      	cmpne	r1, #0
  400a1e:	d002      	beq.n	400a26 <usart_sync_write+0x16>
  400a20:	bb0a      	cbnz	r2, 400a66 <usart_sync_write+0x56>
  400a22:	2000      	movs	r0, #0
  400a24:	e000      	b.n	400a28 <usart_sync_write+0x18>
  400a26:	2000      	movs	r0, #0
  400a28:	22f1      	movs	r2, #241	; 0xf1
  400a2a:	4910      	ldr	r1, [pc, #64]	; (400a6c <usart_sync_write+0x5c>)
  400a2c:	4b10      	ldr	r3, [pc, #64]	; (400a70 <usart_sync_write+0x60>)
  400a2e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400a30:	f105 0408 	add.w	r4, r5, #8
  400a34:	4620      	mov	r0, r4
  400a36:	4b0f      	ldr	r3, [pc, #60]	; (400a74 <usart_sync_write+0x64>)
  400a38:	4798      	blx	r3
  400a3a:	2800      	cmp	r0, #0
  400a3c:	d0f8      	beq.n	400a30 <usart_sync_write+0x20>
  400a3e:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400a40:	5d79      	ldrb	r1, [r7, r5]
  400a42:	4620      	mov	r0, r4
  400a44:	4b0c      	ldr	r3, [pc, #48]	; (400a78 <usart_sync_write+0x68>)
  400a46:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400a48:	4620      	mov	r0, r4
  400a4a:	4b0a      	ldr	r3, [pc, #40]	; (400a74 <usart_sync_write+0x64>)
  400a4c:	4798      	blx	r3
  400a4e:	2800      	cmp	r0, #0
  400a50:	d0fa      	beq.n	400a48 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  400a52:	3501      	adds	r5, #1
  400a54:	42b5      	cmp	r5, r6
  400a56:	d3f3      	bcc.n	400a40 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400a58:	4620      	mov	r0, r4
  400a5a:	4b08      	ldr	r3, [pc, #32]	; (400a7c <usart_sync_write+0x6c>)
  400a5c:	4798      	blx	r3
  400a5e:	2800      	cmp	r0, #0
  400a60:	d0fa      	beq.n	400a58 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  400a62:	4628      	mov	r0, r5
  400a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400a66:	2001      	movs	r0, #1
  400a68:	e7de      	b.n	400a28 <usart_sync_write+0x18>
  400a6a:	bf00      	nop
  400a6c:	00404a8c 	.word	0x00404a8c
  400a70:	00400b55 	.word	0x00400b55
  400a74:	00401661 	.word	0x00401661
  400a78:	00401619 	.word	0x00401619
  400a7c:	00401689 	.word	0x00401689

00400a80 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a84:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400a86:	4605      	mov	r5, r0
  400a88:	4688      	mov	r8, r1
  400a8a:	2800      	cmp	r0, #0
  400a8c:	bf18      	it	ne
  400a8e:	2900      	cmpne	r1, #0
  400a90:	d002      	beq.n	400a98 <usart_sync_read+0x18>
  400a92:	b9d2      	cbnz	r2, 400aca <usart_sync_read+0x4a>
  400a94:	2000      	movs	r0, #0
  400a96:	e000      	b.n	400a9a <usart_sync_read+0x1a>
  400a98:	2000      	movs	r0, #0
  400a9a:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400a9e:	490c      	ldr	r1, [pc, #48]	; (400ad0 <usart_sync_read+0x50>)
  400aa0:	4b0c      	ldr	r3, [pc, #48]	; (400ad4 <usart_sync_read+0x54>)
  400aa2:	4798      	blx	r3
	uint32_t                      offset = 0;
  400aa4:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400aa6:	f105 0408 	add.w	r4, r5, #8
  400aaa:	4620      	mov	r0, r4
  400aac:	4b0a      	ldr	r3, [pc, #40]	; (400ad8 <usart_sync_read+0x58>)
  400aae:	4798      	blx	r3
  400ab0:	2800      	cmp	r0, #0
  400ab2:	d0f8      	beq.n	400aa6 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400ab4:	4620      	mov	r0, r4
  400ab6:	4b09      	ldr	r3, [pc, #36]	; (400adc <usart_sync_read+0x5c>)
  400ab8:	4798      	blx	r3
  400aba:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400abe:	3601      	adds	r6, #1
  400ac0:	42be      	cmp	r6, r7
  400ac2:	d3f0      	bcc.n	400aa6 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400ac4:	4630      	mov	r0, r6
  400ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400aca:	2001      	movs	r0, #1
  400acc:	e7e5      	b.n	400a9a <usart_sync_read+0x1a>
  400ace:	bf00      	nop
  400ad0:	00404a8c 	.word	0x00404a8c
  400ad4:	00400b55 	.word	0x00400b55
  400ad8:	004016b1 	.word	0x004016b1
  400adc:	0040163d 	.word	0x0040163d

00400ae0 <usart_sync_init>:
{
  400ae0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400ae2:	4604      	mov	r4, r0
  400ae4:	460d      	mov	r5, r1
  400ae6:	2800      	cmp	r0, #0
  400ae8:	bf18      	it	ne
  400aea:	2900      	cmpne	r1, #0
  400aec:	bf14      	ite	ne
  400aee:	2001      	movne	r0, #1
  400af0:	2000      	moveq	r0, #0
  400af2:	2234      	movs	r2, #52	; 0x34
  400af4:	4907      	ldr	r1, [pc, #28]	; (400b14 <usart_sync_init+0x34>)
  400af6:	4b08      	ldr	r3, [pc, #32]	; (400b18 <usart_sync_init+0x38>)
  400af8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400afa:	4629      	mov	r1, r5
  400afc:	f104 0008 	add.w	r0, r4, #8
  400b00:	4b06      	ldr	r3, [pc, #24]	; (400b1c <usart_sync_init+0x3c>)
  400b02:	4798      	blx	r3
	if (init_status) {
  400b04:	4603      	mov	r3, r0
  400b06:	b918      	cbnz	r0, 400b10 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400b08:	4a05      	ldr	r2, [pc, #20]	; (400b20 <usart_sync_init+0x40>)
  400b0a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400b0c:	4a05      	ldr	r2, [pc, #20]	; (400b24 <usart_sync_init+0x44>)
  400b0e:	6022      	str	r2, [r4, #0]
}
  400b10:	4618      	mov	r0, r3
  400b12:	bd38      	pop	{r3, r4, r5, pc}
  400b14:	00404a8c 	.word	0x00404a8c
  400b18:	00400b55 	.word	0x00400b55
  400b1c:	004015ad 	.word	0x004015ad
  400b20:	00400a81 	.word	0x00400a81
  400b24:	00400a11 	.word	0x00400a11

00400b28 <usart_sync_enable>:
{
  400b28:	b510      	push	{r4, lr}
	ASSERT(descr);
  400b2a:	4604      	mov	r4, r0
  400b2c:	2253      	movs	r2, #83	; 0x53
  400b2e:	4906      	ldr	r1, [pc, #24]	; (400b48 <usart_sync_enable+0x20>)
  400b30:	3000      	adds	r0, #0
  400b32:	bf18      	it	ne
  400b34:	2001      	movne	r0, #1
  400b36:	4b05      	ldr	r3, [pc, #20]	; (400b4c <usart_sync_enable+0x24>)
  400b38:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400b3a:	f104 0008 	add.w	r0, r4, #8
  400b3e:	4b04      	ldr	r3, [pc, #16]	; (400b50 <usart_sync_enable+0x28>)
  400b40:	4798      	blx	r3
}
  400b42:	2000      	movs	r0, #0
  400b44:	bd10      	pop	{r4, pc}
  400b46:	bf00      	nop
  400b48:	00404a8c 	.word	0x00404a8c
  400b4c:	00400b55 	.word	0x00400b55
  400b50:	004015e5 	.word	0x004015e5

00400b54 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400b54:	b900      	cbnz	r0, 400b58 <assert+0x4>
		__asm("BKPT #0");
  400b56:	be00      	bkpt	0x0000
  400b58:	4770      	bx	lr
	...

00400b5c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  400b5c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  400b5e:	4a06      	ldr	r2, [pc, #24]	; (400b78 <_sbrk+0x1c>)
  400b60:	6812      	ldr	r2, [r2, #0]
  400b62:	b122      	cbz	r2, 400b6e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400b64:	4a04      	ldr	r2, [pc, #16]	; (400b78 <_sbrk+0x1c>)
  400b66:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400b68:	4403      	add	r3, r0
  400b6a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  400b6c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400b6e:	4903      	ldr	r1, [pc, #12]	; (400b7c <_sbrk+0x20>)
  400b70:	4a01      	ldr	r2, [pc, #4]	; (400b78 <_sbrk+0x1c>)
  400b72:	6011      	str	r1, [r2, #0]
  400b74:	e7f6      	b.n	400b64 <_sbrk+0x8>
  400b76:	bf00      	nop
  400b78:	2040021c 	.word	0x2040021c
  400b7c:	204009b8 	.word	0x204009b8

00400b80 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  400b80:	f04f 30ff 	mov.w	r0, #4294967295
  400b84:	4770      	bx	lr

00400b86 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400b86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400b8a:	604b      	str	r3, [r1, #4]

	return 0;
}
  400b8c:	2000      	movs	r0, #0
  400b8e:	4770      	bx	lr

00400b90 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  400b90:	2001      	movs	r0, #1
  400b92:	4770      	bx	lr

00400b94 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400b94:	2000      	movs	r0, #0
  400b96:	4770      	bx	lr

00400b98 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  400b98:	2364      	movs	r3, #100	; 0x64
  400b9a:	4a1d      	ldr	r2, [pc, #116]	; (400c10 <_afec_init+0x78>)
  400b9c:	fb03 2301 	mla	r3, r3, r1, r2
  400ba0:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  400ba2:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  400ba4:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  400ba6:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  400ba8:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  400baa:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  400bac:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  400bae:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  400bb0:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  400bb2:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  400bb4:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  400bb6:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  400bb8:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  400bba:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  400bbc:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  400bbe:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  400bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  400bc4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  400bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  400bca:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  400bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  400bd0:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  400bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  400bd6:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400bda:	2200      	movs	r2, #0
  400bdc:	2a0b      	cmp	r2, #11
  400bde:	d814      	bhi.n	400c0a <_afec_init+0x72>
{
  400be0:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  400be2:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  400be4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400be8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400bec:	4413      	add	r3, r2
  400bee:	330c      	adds	r3, #12
  400bf0:	4c07      	ldr	r4, [pc, #28]	; (400c10 <_afec_init+0x78>)
  400bf2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  400bf6:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  400bf8:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400bfa:	3201      	adds	r2, #1
  400bfc:	b2d2      	uxtb	r2, r2
  400bfe:	2a0b      	cmp	r2, #11
  400c00:	d9ef      	bls.n	400be2 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  400c02:	2000      	movs	r0, #0
  400c04:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c08:	4770      	bx	lr
  400c0a:	2000      	movs	r0, #0
  400c0c:	4770      	bx	lr
  400c0e:	bf00      	nop
  400c10:	00404aa8 	.word	0x00404aa8

00400c14 <_afec_get_hardware_index>:
{
  400c14:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  400c16:	4b09      	ldr	r3, [pc, #36]	; (400c3c <_afec_get_hardware_index+0x28>)
  400c18:	4298      	cmp	r0, r3
  400c1a:	d00a      	beq.n	400c32 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  400c1c:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400c20:	4298      	cmp	r0, r3
  400c22:	d008      	beq.n	400c36 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  400c24:	22a3      	movs	r2, #163	; 0xa3
  400c26:	4906      	ldr	r1, [pc, #24]	; (400c40 <_afec_get_hardware_index+0x2c>)
  400c28:	2000      	movs	r0, #0
  400c2a:	4b06      	ldr	r3, [pc, #24]	; (400c44 <_afec_get_hardware_index+0x30>)
  400c2c:	4798      	blx	r3
	return 0;
  400c2e:	2000      	movs	r0, #0
  400c30:	bd08      	pop	{r3, pc}
		return 0;
  400c32:	2000      	movs	r0, #0
  400c34:	bd08      	pop	{r3, pc}
		return 1;
  400c36:	2001      	movs	r0, #1
}
  400c38:	bd08      	pop	{r3, pc}
  400c3a:	bf00      	nop
  400c3c:	4003c000 	.word	0x4003c000
  400c40:	00404b70 	.word	0x00404b70
  400c44:	00400b55 	.word	0x00400b55

00400c48 <_afec_get_regs>:
{
  400c48:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  400c4a:	4b09      	ldr	r3, [pc, #36]	; (400c70 <_afec_get_regs+0x28>)
  400c4c:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400c4e:	2300      	movs	r3, #0
  400c50:	2b01      	cmp	r3, #1
  400c52:	d809      	bhi.n	400c68 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  400c54:	2264      	movs	r2, #100	; 0x64
  400c56:	fb02 f203 	mul.w	r2, r2, r3
  400c5a:	4906      	ldr	r1, [pc, #24]	; (400c74 <_afec_get_regs+0x2c>)
  400c5c:	5c8a      	ldrb	r2, [r1, r2]
  400c5e:	4290      	cmp	r0, r2
  400c60:	d003      	beq.n	400c6a <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400c62:	3301      	adds	r3, #1
  400c64:	b2db      	uxtb	r3, r3
  400c66:	e7f3      	b.n	400c50 <_afec_get_regs+0x8>
	return 0;
  400c68:	2300      	movs	r3, #0
}
  400c6a:	4618      	mov	r0, r3
  400c6c:	bd08      	pop	{r3, pc}
  400c6e:	bf00      	nop
  400c70:	00400c15 	.word	0x00400c15
  400c74:	00404aa8 	.word	0x00404aa8

00400c78 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
  400c78:	b538      	push	{r3, r4, r5, lr}
  400c7a:	460c      	mov	r4, r1
	ASSERT(device);
  400c7c:	4605      	mov	r5, r0
  400c7e:	f44f 728d 	mov.w	r2, #282	; 0x11a
  400c82:	4907      	ldr	r1, [pc, #28]	; (400ca0 <_adc_sync_init+0x28>)
  400c84:	3000      	adds	r0, #0
  400c86:	bf18      	it	ne
  400c88:	2001      	movne	r0, #1
  400c8a:	4b06      	ldr	r3, [pc, #24]	; (400ca4 <_adc_sync_init+0x2c>)
  400c8c:	4798      	blx	r3

	device->hw = hw;
  400c8e:	602c      	str	r4, [r5, #0]

	return _afec_init(hw, _afec_get_regs((uint32_t)hw));
  400c90:	4620      	mov	r0, r4
  400c92:	4b05      	ldr	r3, [pc, #20]	; (400ca8 <_adc_sync_init+0x30>)
  400c94:	4798      	blx	r3
  400c96:	4601      	mov	r1, r0
  400c98:	4620      	mov	r0, r4
  400c9a:	4b04      	ldr	r3, [pc, #16]	; (400cac <_adc_sync_init+0x34>)
  400c9c:	4798      	blx	r3
}
  400c9e:	bd38      	pop	{r3, r4, r5, pc}
  400ca0:	00404b70 	.word	0x00404b70
  400ca4:	00400b55 	.word	0x00400b55
  400ca8:	00400c49 	.word	0x00400c49
  400cac:	00400b99 	.word	0x00400b99

00400cb0 <_adc_sync_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  400cb0:	6802      	ldr	r2, [r0, #0]
  400cb2:	2301      	movs	r3, #1
  400cb4:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  400cb8:	6151      	str	r1, [r2, #20]
  400cba:	4770      	bx	lr

00400cbc <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  400cbc:	f44f 7396 	mov.w	r3, #300	; 0x12c
  400cc0:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  400cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400cc8:	fb03 f000 	mul.w	r0, r3, r0
  400ccc:	4770      	bx	lr
	...

00400cd0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400cd0:	b500      	push	{lr}
  400cd2:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400cd4:	a801      	add	r0, sp, #4
  400cd6:	4b0e      	ldr	r3, [pc, #56]	; (400d10 <_init_chip+0x40>)
  400cd8:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400cda:	4a0e      	ldr	r2, [pc, #56]	; (400d14 <_init_chip+0x44>)
  400cdc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400ce8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400cec:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400cf0:	a801      	add	r0, sp, #4
  400cf2:	4b09      	ldr	r3, [pc, #36]	; (400d18 <_init_chip+0x48>)
  400cf4:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400cf6:	4a09      	ldr	r2, [pc, #36]	; (400d1c <_init_chip+0x4c>)
  400cf8:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400cfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400cfe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400d02:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400d04:	4b06      	ldr	r3, [pc, #24]	; (400d20 <_init_chip+0x50>)
  400d06:	4798      	blx	r3
}
  400d08:	b003      	add	sp, #12
  400d0a:	f85d fb04 	ldr.w	pc, [sp], #4
  400d0e:	bf00      	nop
  400d10:	004007b9 	.word	0x004007b9
  400d14:	e000ed00 	.word	0xe000ed00
  400d18:	004007c7 	.word	0x004007c7
  400d1c:	400e0c00 	.word	0x400e0c00
  400d20:	004011b1 	.word	0x004011b1

00400d24 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  400d24:	b538      	push	{r3, r4, r5, lr}
  400d26:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  400d28:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  400d2a:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  400d2c:	f014 0f01 	tst.w	r4, #1
  400d30:	d11a      	bne.n	400d68 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  400d32:	f414 7f00 	tst.w	r4, #512	; 0x200
  400d36:	d11a      	bne.n	400d6e <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  400d38:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  400d3c:	d11b      	bne.n	400d76 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  400d3e:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  400d42:	d11d      	bne.n	400d80 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  400d44:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  400d48:	d008      	beq.n	400d5c <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400d4a:	68eb      	ldr	r3, [r5, #12]
  400d4c:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  400d4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
  400d50:	f012 0f20 	tst.w	r2, #32
  400d54:	d019      	beq.n	400d8a <_can_irq_handler+0x66>
  400d56:	2102      	movs	r1, #2
  400d58:	4628      	mov	r0, r5
  400d5a:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  400d5c:	f014 0f08 	tst.w	r4, #8
  400d60:	d115      	bne.n	400d8e <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  400d62:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  400d64:	651c      	str	r4, [r3, #80]	; 0x50
  400d66:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  400d68:	6883      	ldr	r3, [r0, #8]
  400d6a:	4798      	blx	r3
  400d6c:	e7e1      	b.n	400d32 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  400d6e:	686b      	ldr	r3, [r5, #4]
  400d70:	4628      	mov	r0, r5
  400d72:	4798      	blx	r3
  400d74:	e7e0      	b.n	400d38 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  400d76:	68eb      	ldr	r3, [r5, #12]
  400d78:	2103      	movs	r1, #3
  400d7a:	4628      	mov	r0, r5
  400d7c:	4798      	blx	r3
  400d7e:	e7de      	b.n	400d3e <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  400d80:	68eb      	ldr	r3, [r5, #12]
  400d82:	2100      	movs	r1, #0
  400d84:	4628      	mov	r0, r5
  400d86:	4798      	blx	r3
  400d88:	e7dc      	b.n	400d44 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400d8a:	2101      	movs	r1, #1
  400d8c:	e7e4      	b.n	400d58 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  400d8e:	68eb      	ldr	r3, [r5, #12]
  400d90:	2104      	movs	r1, #4
  400d92:	4628      	mov	r0, r5
  400d94:	4798      	blx	r3
  400d96:	e7e4      	b.n	400d62 <_can_irq_handler+0x3e>

00400d98 <_can_async_init>:
{
  400d98:	b410      	push	{r4}
	dev->hw = hw;
  400d9a:	6001      	str	r1, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= MCAN_CCCR_INIT;
  400d9c:	698b      	ldr	r3, [r1, #24]
  400d9e:	f043 0301 	orr.w	r3, r3, #1
  400da2:	618b      	str	r3, [r1, #24]
	while (hri_mcan_get_CCCR_INIT_bit(dev->hw) == 0)
  400da4:	6803      	ldr	r3, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400da6:	699a      	ldr	r2, [r3, #24]
  400da8:	f012 0f01 	tst.w	r2, #1
  400dac:	d0fa      	beq.n	400da4 <_can_async_init+0xc>
	((Mcan *)hw)->MCAN_CCCR |= MCAN_CCCR_CCE;
  400dae:	699a      	ldr	r2, [r3, #24]
  400db0:	f042 0202 	orr.w	r2, r2, #2
  400db4:	619a      	str	r2, [r3, #24]
	if (hw == MCAN1) {
  400db6:	4b34      	ldr	r3, [pc, #208]	; (400e88 <_can_async_init+0xf0>)
  400db8:	4299      	cmp	r1, r3
  400dba:	d012      	beq.n	400de2 <_can_async_init+0x4a>
	hri_mcan_clear_CCCR_CCE_bit(dev->hw);
  400dbc:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_CCE;
  400dbe:	6993      	ldr	r3, [r2, #24]
  400dc0:	f023 0302 	bic.w	r3, r3, #2
  400dc4:	6193      	str	r3, [r2, #24]
	hri_mcan_clear_CCCR_INIT_bit(dev->hw);
  400dc6:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400dc8:	6993      	ldr	r3, [r2, #24]
  400dca:	f023 0301 	bic.w	r3, r3, #1
  400dce:	6193      	str	r3, [r2, #24]
	while (hri_mcan_get_CCCR_INIT_bit(dev->hw)) {
  400dd0:	6803      	ldr	r3, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400dd2:	699b      	ldr	r3, [r3, #24]
  400dd4:	f013 0f01 	tst.w	r3, #1
  400dd8:	d1fa      	bne.n	400dd0 <_can_async_init+0x38>
}
  400dda:	2000      	movs	r0, #0
  400ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400de0:	4770      	bx	lr
		dev->context = (void *)&_can1_context;
  400de2:	4b2a      	ldr	r3, [pc, #168]	; (400e8c <_can_async_init+0xf4>)
  400de4:	6183      	str	r3, [r0, #24]
		hri_mcan_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
  400de6:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= mask;
  400de8:	699a      	ldr	r2, [r3, #24]
  400dea:	619a      	str	r2, [r3, #24]
		hri_mcan_write_NBTP_reg(dev->hw, CONF_CAN1_NBTP_REG);
  400dec:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_NBTP = data;
  400dee:	4a28      	ldr	r2, [pc, #160]	; (400e90 <_can_async_init+0xf8>)
  400df0:	61da      	str	r2, [r3, #28]
		hri_mcan_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
  400df2:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_DBTP = data;
  400df4:	f640 1233 	movw	r2, #2355	; 0x933
  400df8:	60da      	str	r2, [r3, #12]
		hri_mcan_write_TDCR_reg(dev->hw, CONF_CAN1_TDCR_REG);
  400dfa:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TDCR = data;
  400dfc:	f640 320b 	movw	r2, #2827	; 0xb0b
  400e00:	649a      	str	r2, [r3, #72]	; 0x48
		hri_mcan_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | (((uint32_t)can1_rx_fifo) & 0xFFFF));
  400e02:	6802      	ldr	r2, [r0, #0]
  400e04:	4b23      	ldr	r3, [pc, #140]	; (400e94 <_can_async_init+0xfc>)
  400e06:	b29b      	uxth	r3, r3
  400e08:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
}

static inline void hri_mcan_write_RXF0C_reg(const void *const hw, hri_mcan_rxf0c_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_RXF0C = data;
  400e0c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		hri_mcan_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
  400e10:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_mcan_write_RXESC_reg(const void *const hw, hri_mcan_rxesc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_RXESC = data;
  400e12:	2100      	movs	r1, #0
  400e14:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
		hri_mcan_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
  400e18:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_mcan_write_TXESC_reg(const void *const hw, hri_mcan_txesc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_TXESC = data;
  400e1a:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
		hri_mcan_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | (((uint32_t)can1_tx_fifo) & 0xFFFF));
  400e1e:	6802      	ldr	r2, [r0, #0]
  400e20:	4b1d      	ldr	r3, [pc, #116]	; (400e98 <_can_async_init+0x100>)
  400e22:	b29b      	uxth	r3, r3
  400e24:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
	((Mcan *)hw)->MCAN_TXBC = data;
  400e28:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		hri_mcan_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | (((uint32_t)can1_tx_event_fifo) & 0xFFFF));
  400e2c:	6804      	ldr	r4, [r0, #0]
  400e2e:	4a1b      	ldr	r2, [pc, #108]	; (400e9c <_can_async_init+0x104>)
  400e30:	b293      	uxth	r3, r2
  400e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
}

static inline void hri_mcan_write_TXEFC_reg(const void *const hw, hri_mcan_txefc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_TXEFC = data;
  400e36:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		hri_mcan_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
  400e3a:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_GFC = data;
  400e3c:	242b      	movs	r4, #43	; 0x2b
  400e3e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		hri_mcan_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | (((uint32_t)can1_rx_std_filter) & 0xFFFF));
  400e42:	6804      	ldr	r4, [r0, #0]
  400e44:	f102 0310 	add.w	r3, r2, #16
  400e48:	b29b      	uxth	r3, r3
  400e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_SIDFC = data;
  400e4e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		hri_mcan_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | (((uint32_t)can1_rx_ext_filter) & 0xFFFF));
  400e52:	6804      	ldr	r4, [r0, #0]
  400e54:	f102 0318 	add.w	r3, r2, #24
  400e58:	b29b      	uxth	r3, r3
  400e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_XIDFC = data;
  400e5e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		hri_mcan_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
  400e62:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_XIDAM = data;
  400e64:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		_can1_dev = dev;
  400e68:	6290      	str	r0, [r2, #40]	; 0x28
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e6a:	4b0d      	ldr	r3, [pc, #52]	; (400ea0 <_can_async_init+0x108>)
  400e6c:	2220      	movs	r2, #32
  400e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400e72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400e76:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e7a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e7e:	605a      	str	r2, [r3, #4]
		hri_mcan_write_ILE_reg(dev->hw, MCAN_ILE_EINT0);
  400e80:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_ILE = data;
  400e82:	2201      	movs	r2, #1
  400e84:	65da      	str	r2, [r3, #92]	; 0x5c
  400e86:	e799      	b.n	400dbc <_can_async_init+0x24>
  400e88:	40034000 	.word	0x40034000
  400e8c:	20400000 	.word	0x20400000
  400e90:	06020a07 	.word	0x06020a07
  400e94:	20400350 	.word	0x20400350
  400e98:	204002f0 	.word	0x204002f0
  400e9c:	20400220 	.word	0x20400220
  400ea0:	e000e100 	.word	0xe000e100

00400ea4 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  400ea4:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  400ea6:	4b02      	ldr	r3, [pc, #8]	; (400eb0 <MCAN1_INT0_Handler+0xc>)
  400ea8:	6a98      	ldr	r0, [r3, #40]	; 0x28
  400eaa:	4b02      	ldr	r3, [pc, #8]	; (400eb4 <MCAN1_INT0_Handler+0x10>)
  400eac:	4798      	blx	r3
  400eae:	bd08      	pop	{r3, pc}
  400eb0:	20400220 	.word	0x20400220
  400eb4:	00400d25 	.word	0x00400d25

00400eb8 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  400eb8:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  400eba:	2500      	movs	r5, #0
  400ebc:	428d      	cmp	r5, r1
  400ebe:	d210      	bcs.n	400ee2 <_ffs+0x2a>
  400ec0:	2201      	movs	r2, #1
  400ec2:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400ec4:	2b1f      	cmp	r3, #31
  400ec6:	d80a      	bhi.n	400ede <_ffs+0x26>
			if (v[i] & bit) {
  400ec8:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  400ecc:	4222      	tst	r2, r4
  400ece:	d102      	bne.n	400ed6 <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  400ed0:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400ed2:	3301      	adds	r3, #1
  400ed4:	e7f6      	b.n	400ec4 <_ffs+0xc>
				return i * 32 + j;
  400ed6:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  400eda:	bc30      	pop	{r4, r5}
  400edc:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  400ede:	3501      	adds	r5, #1
  400ee0:	e7ec      	b.n	400ebc <_ffs+0x4>
	return -1;
  400ee2:	f04f 30ff 	mov.w	r0, #4294967295
  400ee6:	e7f8      	b.n	400eda <_ffs+0x22>

00400ee8 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  400ee8:	b510      	push	{r4, lr}
  400eea:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  400eec:	2300      	movs	r3, #0
  400eee:	9301      	str	r3, [sp, #4]
  400ef0:	9302      	str	r3, [sp, #8]
  400ef2:	9303      	str	r3, [sp, #12]
  400ef4:	9304      	str	r3, [sp, #16]
  400ef6:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  400ef8:	4b21      	ldr	r3, [pc, #132]	; (400f80 <_ext_irq_handler+0x98>)
  400efa:	6818      	ldr	r0, [r3, #0]
  400efc:	22f8      	movs	r2, #248	; 0xf8
  400efe:	4921      	ldr	r1, [pc, #132]	; (400f84 <_ext_irq_handler+0x9c>)
  400f00:	3000      	adds	r0, #0
  400f02:	bf18      	it	ne
  400f04:	2001      	movne	r0, #1
  400f06:	4b20      	ldr	r3, [pc, #128]	; (400f88 <_ext_irq_handler+0xa0>)
  400f08:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  400f0a:	4b20      	ldr	r3, [pc, #128]	; (400f8c <_ext_irq_handler+0xa4>)
  400f0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400f10:	4013      	ands	r3, r2
  400f12:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400f14:	491e      	ldr	r1, [pc, #120]	; (400f90 <_ext_irq_handler+0xa8>)
  400f16:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400f18:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  400f1a:	400a      	ands	r2, r1
  400f1c:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  400f1e:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  400f20:	e025      	b.n	400f6e <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  400f22:	4b17      	ldr	r3, [pc, #92]	; (400f80 <_ext_irq_handler+0x98>)
  400f24:	681b      	ldr	r3, [r3, #0]
  400f26:	4620      	mov	r0, r4
  400f28:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  400f2a:	1163      	asrs	r3, r4, #5
  400f2c:	f004 041f 	and.w	r4, r4, #31
  400f30:	2201      	movs	r2, #1
  400f32:	fa02 f404 	lsl.w	r4, r2, r4
  400f36:	aa06      	add	r2, sp, #24
  400f38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400f3c:	f853 2c14 	ldr.w	r2, [r3, #-20]
  400f40:	ea22 0204 	bic.w	r2, r2, r4
  400f44:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  400f48:	2105      	movs	r1, #5
  400f4a:	a801      	add	r0, sp, #4
  400f4c:	4b11      	ldr	r3, [pc, #68]	; (400f94 <_ext_irq_handler+0xac>)
  400f4e:	4798      	blx	r3
  400f50:	4604      	mov	r4, r0
		while (-1 != pos) {
  400f52:	f1b4 3fff 	cmp.w	r4, #4294967295
  400f56:	d1e4      	bne.n	400f22 <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  400f58:	4a0c      	ldr	r2, [pc, #48]	; (400f8c <_ext_irq_handler+0xa4>)
  400f5a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400f5c:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400f5e:	400b      	ands	r3, r1
  400f60:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400f62:	490b      	ldr	r1, [pc, #44]	; (400f90 <_ext_irq_handler+0xa8>)
  400f64:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400f66:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  400f68:	4002      	ands	r2, r0
  400f6a:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  400f6c:	4313      	orrs	r3, r2
	while (flag_total) {
  400f6e:	b12b      	cbz	r3, 400f7c <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  400f70:	2105      	movs	r1, #5
  400f72:	a801      	add	r0, sp, #4
  400f74:	4b07      	ldr	r3, [pc, #28]	; (400f94 <_ext_irq_handler+0xac>)
  400f76:	4798      	blx	r3
  400f78:	4604      	mov	r4, r0
		while (-1 != pos) {
  400f7a:	e7ea      	b.n	400f52 <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  400f7c:	b006      	add	sp, #24
  400f7e:	bd10      	pop	{r4, pc}
  400f80:	2040024c 	.word	0x2040024c
  400f84:	00404bc8 	.word	0x00404bc8
  400f88:	00400b55 	.word	0x00400b55
  400f8c:	400e0e00 	.word	0x400e0e00
  400f90:	400e1400 	.word	0x400e1400
  400f94:	00400eb9 	.word	0x00400eb9

00400f98 <_pio_get_hardware_index>:
{
  400f98:	b510      	push	{r4, lr}
	ASSERT(hw);
  400f9a:	4604      	mov	r4, r0
  400f9c:	22d2      	movs	r2, #210	; 0xd2
  400f9e:	4905      	ldr	r1, [pc, #20]	; (400fb4 <_pio_get_hardware_index+0x1c>)
  400fa0:	3000      	adds	r0, #0
  400fa2:	bf18      	it	ne
  400fa4:	2001      	movne	r0, #1
  400fa6:	4b04      	ldr	r3, [pc, #16]	; (400fb8 <_pio_get_hardware_index+0x20>)
  400fa8:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  400faa:	4804      	ldr	r0, [pc, #16]	; (400fbc <_pio_get_hardware_index+0x24>)
  400fac:	4420      	add	r0, r4
}
  400fae:	f3c0 2047 	ubfx	r0, r0, #9, #8
  400fb2:	bd10      	pop	{r4, pc}
  400fb4:	00404bc8 	.word	0x00404bc8
  400fb8:	00400b55 	.word	0x00400b55
  400fbc:	bff1f200 	.word	0xbff1f200

00400fc0 <_pio_get_index>:
{
  400fc0:	b510      	push	{r4, lr}
	ASSERT(hw);
  400fc2:	4604      	mov	r4, r0
  400fc4:	22e0      	movs	r2, #224	; 0xe0
  400fc6:	490d      	ldr	r1, [pc, #52]	; (400ffc <_pio_get_index+0x3c>)
  400fc8:	3000      	adds	r0, #0
  400fca:	bf18      	it	ne
  400fcc:	2001      	movne	r0, #1
  400fce:	4b0c      	ldr	r3, [pc, #48]	; (401000 <_pio_get_index+0x40>)
  400fd0:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  400fd2:	4620      	mov	r0, r4
  400fd4:	4b0b      	ldr	r3, [pc, #44]	; (401004 <_pio_get_index+0x44>)
  400fd6:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400fd8:	2300      	movs	r3, #0
  400fda:	2b01      	cmp	r3, #1
  400fdc:	d80b      	bhi.n	400ff6 <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  400fde:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  400fe2:	008a      	lsls	r2, r1, #2
  400fe4:	4908      	ldr	r1, [pc, #32]	; (401008 <_pio_get_index+0x48>)
  400fe6:	5c8a      	ldrb	r2, [r1, r2]
  400fe8:	4290      	cmp	r0, r2
  400fea:	d002      	beq.n	400ff2 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  400fec:	3301      	adds	r3, #1
  400fee:	b2db      	uxtb	r3, r3
  400ff0:	e7f3      	b.n	400fda <_pio_get_index+0x1a>
			return i;
  400ff2:	b258      	sxtb	r0, r3
  400ff4:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  400ff6:	f04f 30ff 	mov.w	r0, #4294967295
}
  400ffa:	bd10      	pop	{r4, pc}
  400ffc:	00404bc8 	.word	0x00404bc8
  401000:	00400b55 	.word	0x00400b55
  401004:	00400f99 	.word	0x00400f99
  401008:	00404b88 	.word	0x00404b88

0040100c <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  40100c:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  40100e:	4604      	mov	r4, r0
  401010:	f240 1259 	movw	r2, #345	; 0x159
  401014:	4929      	ldr	r1, [pc, #164]	; (4010bc <_pio_init+0xb0>)
  401016:	3000      	adds	r0, #0
  401018:	bf18      	it	ne
  40101a:	2001      	movne	r0, #1
  40101c:	4b28      	ldr	r3, [pc, #160]	; (4010c0 <_pio_init+0xb4>)
  40101e:	4798      	blx	r3

	i = _pio_get_index(hw);
  401020:	4620      	mov	r0, r4
  401022:	4b28      	ldr	r3, [pc, #160]	; (4010c4 <_pio_init+0xb8>)
  401024:	4798      	blx	r3
	if (i < 0) {
  401026:	2800      	cmp	r0, #0
  401028:	db43      	blt.n	4010b2 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  40102a:	4d27      	ldr	r5, [pc, #156]	; (4010c8 <_pio_init+0xbc>)
  40102c:	00c2      	lsls	r2, r0, #3
  40102e:	1a11      	subs	r1, r2, r0
  401030:	008b      	lsls	r3, r1, #2
  401032:	442b      	add	r3, r5
  401034:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  401036:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  40103a:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  40103c:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  401040:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  401042:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  401046:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  401048:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  40104c:	1a10      	subs	r0, r2, r0
  40104e:	0083      	lsls	r3, r0, #2
  401050:	442b      	add	r3, r5
  401052:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  401054:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401058:	4620      	mov	r0, r4
  40105a:	4b1c      	ldr	r3, [pc, #112]	; (4010cc <_pio_init+0xc0>)
  40105c:	4798      	blx	r3
  40105e:	4428      	add	r0, r5
  401060:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  if ((int32_t)(IRQn) >= 0)
  401064:	2b00      	cmp	r3, #0
  401066:	db0c      	blt.n	401082 <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401068:	095a      	lsrs	r2, r3, #5
  40106a:	f003 001f 	and.w	r0, r3, #31
  40106e:	2101      	movs	r1, #1
  401070:	4081      	lsls	r1, r0
  401072:	3220      	adds	r2, #32
  401074:	4816      	ldr	r0, [pc, #88]	; (4010d0 <_pio_init+0xc4>)
  401076:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40107a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40107e:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  401082:	2b00      	cmp	r3, #0
  401084:	db08      	blt.n	401098 <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401086:	095a      	lsrs	r2, r3, #5
  401088:	f003 001f 	and.w	r0, r3, #31
  40108c:	2101      	movs	r1, #1
  40108e:	4081      	lsls	r1, r0
  401090:	3260      	adds	r2, #96	; 0x60
  401092:	480f      	ldr	r0, [pc, #60]	; (4010d0 <_pio_init+0xc4>)
  401094:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401098:	2b00      	cmp	r3, #0
  40109a:	db0d      	blt.n	4010b8 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40109c:	0959      	lsrs	r1, r3, #5
  40109e:	f003 031f 	and.w	r3, r3, #31
  4010a2:	2201      	movs	r2, #1
  4010a4:	fa02 f303 	lsl.w	r3, r2, r3
  4010a8:	4a09      	ldr	r2, [pc, #36]	; (4010d0 <_pio_init+0xc4>)
  4010aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  4010ae:	2000      	movs	r0, #0
  4010b0:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  4010b2:	f06f 0010 	mvn.w	r0, #16
  4010b6:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  4010b8:	2000      	movs	r0, #0
}
  4010ba:	bd38      	pop	{r3, r4, r5, pc}
  4010bc:	00404bc8 	.word	0x00404bc8
  4010c0:	00400b55 	.word	0x00400b55
  4010c4:	00400fc1 	.word	0x00400fc1
  4010c8:	00404b88 	.word	0x00404b88
  4010cc:	00400f99 	.word	0x00400f99
  4010d0:	e000e100 	.word	0xe000e100

004010d4 <PIOD_Handler>:
{
  4010d4:	b508      	push	{r3, lr}
	_ext_irq_handler();
  4010d6:	4b01      	ldr	r3, [pc, #4]	; (4010dc <PIOD_Handler+0x8>)
  4010d8:	4798      	blx	r3
  4010da:	bd08      	pop	{r3, pc}
  4010dc:	00400ee9 	.word	0x00400ee9

004010e0 <PIOA_Handler>:
{
  4010e0:	b508      	push	{r3, lr}
	_ext_irq_handler();
  4010e2:	4b01      	ldr	r3, [pc, #4]	; (4010e8 <PIOA_Handler+0x8>)
  4010e4:	4798      	blx	r3
  4010e6:	bd08      	pop	{r3, pc}
  4010e8:	00400ee9 	.word	0x00400ee9

004010ec <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  4010ec:	b538      	push	{r3, r4, r5, lr}
  4010ee:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  4010f0:	4804      	ldr	r0, [pc, #16]	; (401104 <_ext_irq_init+0x18>)
  4010f2:	4c05      	ldr	r4, [pc, #20]	; (401108 <_ext_irq_init+0x1c>)
  4010f4:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  4010f6:	4805      	ldr	r0, [pc, #20]	; (40110c <_ext_irq_init+0x20>)
  4010f8:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  4010fa:	4b05      	ldr	r3, [pc, #20]	; (401110 <_ext_irq_init+0x24>)
  4010fc:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  4010fe:	2000      	movs	r0, #0
  401100:	bd38      	pop	{r3, r4, r5, pc}
  401102:	bf00      	nop
  401104:	400e0e00 	.word	0x400e0e00
  401108:	0040100d 	.word	0x0040100d
  40110c:	400e1400 	.word	0x400e1400
  401110:	2040024c 	.word	0x2040024c

00401114 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  401114:	490e      	ldr	r1, [pc, #56]	; (401150 <_pmc_init_sources+0x3c>)
  401116:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401118:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  40111c:	4b0d      	ldr	r3, [pc, #52]	; (401154 <_pmc_init_sources+0x40>)
  40111e:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401120:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  401122:	4b0b      	ldr	r3, [pc, #44]	; (401150 <_pmc_init_sources+0x3c>)
  401124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  401126:	f013 0f01 	tst.w	r3, #1
  40112a:	d0fa      	beq.n	401122 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  40112c:	4b08      	ldr	r3, [pc, #32]	; (401150 <_pmc_init_sources+0x3c>)
  40112e:	6a19      	ldr	r1, [r3, #32]
  401130:	4a09      	ldr	r2, [pc, #36]	; (401158 <_pmc_init_sources+0x44>)
  401132:	430a      	orrs	r2, r1
  401134:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  401136:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  401138:	4a08      	ldr	r2, [pc, #32]	; (40115c <_pmc_init_sources+0x48>)
  40113a:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  40113c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  40113e:	4a08      	ldr	r2, [pc, #32]	; (401160 <_pmc_init_sources+0x4c>)
  401140:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  401142:	4b03      	ldr	r3, [pc, #12]	; (401150 <_pmc_init_sources+0x3c>)
  401144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  401146:	f013 0f02 	tst.w	r3, #2
  40114a:	d0fa      	beq.n	401142 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  40114c:	4770      	bx	lr
  40114e:	bf00      	nop
  401150:	400e0600 	.word	0x400e0600
  401154:	00373e01 	.word	0x00373e01
  401158:	01370000 	.word	0x01370000
  40115c:	f800ffff 	.word	0xf800ffff
  401160:	20183f01 	.word	0x20183f01

00401164 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401164:	4a11      	ldr	r2, [pc, #68]	; (4011ac <_pmc_init_master_clock+0x48>)
  401166:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  40116c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40116e:	4b0f      	ldr	r3, [pc, #60]	; (4011ac <_pmc_init_master_clock+0x48>)
  401170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401172:	f013 0f08 	tst.w	r3, #8
  401176:	d0fa      	beq.n	40116e <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401178:	4a0c      	ldr	r2, [pc, #48]	; (4011ac <_pmc_init_master_clock+0x48>)
  40117a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  40117c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401184:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401186:	4b09      	ldr	r3, [pc, #36]	; (4011ac <_pmc_init_master_clock+0x48>)
  401188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40118a:	f013 0f08 	tst.w	r3, #8
  40118e:	d0fa      	beq.n	401186 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401190:	4a06      	ldr	r2, [pc, #24]	; (4011ac <_pmc_init_master_clock+0x48>)
  401192:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401194:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401198:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  40119c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40119e:	4b03      	ldr	r3, [pc, #12]	; (4011ac <_pmc_init_master_clock+0x48>)
  4011a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4011a2:	f013 0f08 	tst.w	r3, #8
  4011a6:	d0fa      	beq.n	40119e <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  4011a8:	4770      	bx	lr
  4011aa:	bf00      	nop
  4011ac:	400e0600 	.word	0x400e0600

004011b0 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  4011b0:	b508      	push	{r3, lr}
	_pmc_init_sources();
  4011b2:	4b02      	ldr	r3, [pc, #8]	; (4011bc <_pmc_init+0xc>)
  4011b4:	4798      	blx	r3
	_pmc_init_master_clock();
  4011b6:	4b02      	ldr	r3, [pc, #8]	; (4011c0 <_pmc_init+0x10>)
  4011b8:	4798      	blx	r3
  4011ba:	bd08      	pop	{r3, pc}
  4011bc:	00401115 	.word	0x00401115
  4011c0:	00401165 	.word	0x00401165

004011c4 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4011c4:	2300      	movs	r3, #0
  4011c6:	2b01      	cmp	r3, #1
  4011c8:	d80f      	bhi.n	4011ea <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  4011ca:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  4011ce:	008a      	lsls	r2, r1, #2
  4011d0:	4907      	ldr	r1, [pc, #28]	; (4011f0 <_pwm_get_cfg+0x2c>)
  4011d2:	588a      	ldr	r2, [r1, r2]
  4011d4:	4282      	cmp	r2, r0
  4011d6:	d002      	beq.n	4011de <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4011d8:	3301      	adds	r3, #1
  4011da:	b2db      	uxtb	r3, r3
  4011dc:	e7f3      	b.n	4011c6 <_pwm_get_cfg+0x2>
			return (_pwms + i);
  4011de:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4011e2:	009a      	lsls	r2, r3, #2
  4011e4:	4608      	mov	r0, r1
  4011e6:	4410      	add	r0, r2
  4011e8:	4770      	bx	lr
		}
	}

	return NULL;
  4011ea:	2000      	movs	r0, #0
}
  4011ec:	4770      	bx	lr
  4011ee:	bf00      	nop
  4011f0:	00404be4 	.word	0x00404be4

004011f4 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  4011f4:	4b06      	ldr	r3, [pc, #24]	; (401210 <_pwm_init_irq_param+0x1c>)
  4011f6:	4298      	cmp	r0, r3
  4011f8:	d003      	beq.n	401202 <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  4011fa:	4b06      	ldr	r3, [pc, #24]	; (401214 <_pwm_init_irq_param+0x20>)
  4011fc:	4298      	cmp	r0, r3
  4011fe:	d003      	beq.n	401208 <_pwm_init_irq_param+0x14>
  401200:	4770      	bx	lr
		_pwm0_dev = dev;
  401202:	4b05      	ldr	r3, [pc, #20]	; (401218 <_pwm_init_irq_param+0x24>)
  401204:	6019      	str	r1, [r3, #0]
  401206:	e7f8      	b.n	4011fa <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  401208:	4b03      	ldr	r3, [pc, #12]	; (401218 <_pwm_init_irq_param+0x24>)
  40120a:	6059      	str	r1, [r3, #4]
	}
}
  40120c:	e7f8      	b.n	401200 <_pwm_init_irq_param+0xc>
  40120e:	bf00      	nop
  401210:	40020000 	.word	0x40020000
  401214:	4005c000 	.word	0x4005c000
  401218:	20400250 	.word	0x20400250

0040121c <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  40121c:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  40121e:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  401220:	69db      	ldr	r3, [r3, #28]
  401222:	b113      	cbz	r3, 40122a <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  401224:	6803      	ldr	r3, [r0, #0]
  401226:	b103      	cbz	r3, 40122a <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  401228:	4798      	blx	r3
  40122a:	bd08      	pop	{r3, pc}

0040122c <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  40122c:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  40122e:	4b02      	ldr	r3, [pc, #8]	; (401238 <PWM0_Handler+0xc>)
  401230:	6818      	ldr	r0, [r3, #0]
  401232:	4b02      	ldr	r3, [pc, #8]	; (40123c <PWM0_Handler+0x10>)
  401234:	4798      	blx	r3
  401236:	bd08      	pop	{r3, pc}
  401238:	20400250 	.word	0x20400250
  40123c:	0040121d 	.word	0x0040121d

00401240 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  401240:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  401242:	4b02      	ldr	r3, [pc, #8]	; (40124c <PWM1_Handler+0xc>)
  401244:	6858      	ldr	r0, [r3, #4]
  401246:	4b02      	ldr	r3, [pc, #8]	; (401250 <PWM1_Handler+0x10>)
  401248:	4798      	blx	r3
  40124a:	bd08      	pop	{r3, pc}
  40124c:	20400250 	.word	0x20400250
  401250:	0040121d 	.word	0x0040121d

00401254 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  401254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401256:	4606      	mov	r6, r0
	ASSERT(hw);
  401258:	460c      	mov	r4, r1
  40125a:	1c08      	adds	r0, r1, #0
  40125c:	bf18      	it	ne
  40125e:	2001      	movne	r0, #1
  401260:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  401264:	4944      	ldr	r1, [pc, #272]	; (401378 <_pwm_init+0x124>)
  401266:	4b45      	ldr	r3, [pc, #276]	; (40137c <_pwm_init+0x128>)
  401268:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  40126a:	4620      	mov	r0, r4
  40126c:	4b44      	ldr	r3, [pc, #272]	; (401380 <_pwm_init+0x12c>)
  40126e:	4798      	blx	r3
  401270:	4605      	mov	r5, r0

	device->hw = hw;
  401272:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  401274:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  401276:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  401278:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  40127a:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  40127c:	6903      	ldr	r3, [r0, #16]
  40127e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  401282:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  401284:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  401286:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  401288:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  40128a:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  40128c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  401290:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  401292:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  401294:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  401296:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  40129a:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  40129c:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  4012a0:	2300      	movs	r3, #0
  4012a2:	e019      	b.n	4012d8 <_pwm_init+0x84>
		ch = cfg->ch + i;
  4012a4:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  4012a6:	0118      	lsls	r0, r3, #4
  4012a8:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  4012ac:	5c3a      	ldrb	r2, [r7, r0]
  4012ae:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  4012b2:	3210      	adds	r2, #16
  4012b4:	0152      	lsls	r2, r2, #5
  4012b6:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  4012b8:	5c3a      	ldrb	r2, [r7, r0]
  4012ba:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  4012be:	3210      	adds	r2, #16
  4012c0:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4012c4:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  4012c6:	5c3a      	ldrb	r2, [r7, r0]
  4012c8:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  4012cc:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4012d0:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  4012d4:	3301      	adds	r3, #1
  4012d6:	b25b      	sxtb	r3, r3
  4012d8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4012da:	4293      	cmp	r3, r2
  4012dc:	d3e2      	bcc.n	4012a4 <_pwm_init+0x50>
  4012de:	2300      	movs	r3, #0
  4012e0:	e014      	b.n	40130c <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  4012e2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4012e4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4012e8:	0082      	lsls	r2, r0, #2
  4012ea:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  4012ee:	5c88      	ldrb	r0, [r1, r2]
  4012f0:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  4012f4:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  4012f8:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4012fc:	5c8a      	ldrb	r2, [r1, r2]
  4012fe:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  401302:	3213      	adds	r2, #19
  401304:	0112      	lsls	r2, r2, #4
  401306:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  401308:	3301      	adds	r3, #1
  40130a:	b25b      	sxtb	r3, r3
  40130c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  40130e:	4293      	cmp	r3, r2
  401310:	d3e7      	bcc.n	4012e2 <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  401312:	4631      	mov	r1, r6
  401314:	4620      	mov	r0, r4
  401316:	4b1b      	ldr	r3, [pc, #108]	; (401384 <_pwm_init+0x130>)
  401318:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  40131a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40131e:	2b00      	cmp	r3, #0
  401320:	db0d      	blt.n	40133e <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401322:	095a      	lsrs	r2, r3, #5
  401324:	f003 031f 	and.w	r3, r3, #31
  401328:	2101      	movs	r1, #1
  40132a:	fa01 f303 	lsl.w	r3, r1, r3
  40132e:	3220      	adds	r2, #32
  401330:	4915      	ldr	r1, [pc, #84]	; (401388 <_pwm_init+0x134>)
  401332:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401336:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40133a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40133e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401342:	2b00      	cmp	r3, #0
  401344:	db09      	blt.n	40135a <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401346:	095a      	lsrs	r2, r3, #5
  401348:	f003 031f 	and.w	r3, r3, #31
  40134c:	2101      	movs	r1, #1
  40134e:	fa01 f303 	lsl.w	r3, r1, r3
  401352:	3260      	adds	r2, #96	; 0x60
  401354:	490c      	ldr	r1, [pc, #48]	; (401388 <_pwm_init+0x134>)
  401356:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  40135a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40135e:	2b00      	cmp	r3, #0
  401360:	db08      	blt.n	401374 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401362:	0959      	lsrs	r1, r3, #5
  401364:	f003 031f 	and.w	r3, r3, #31
  401368:	2201      	movs	r2, #1
  40136a:	fa02 f303 	lsl.w	r3, r2, r3
  40136e:	4a06      	ldr	r2, [pc, #24]	; (401388 <_pwm_init+0x134>)
  401370:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  401374:	2000      	movs	r0, #0
  401376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401378:	00404c8c 	.word	0x00404c8c
  40137c:	00400b55 	.word	0x00400b55
  401380:	004011c5 	.word	0x004011c5
  401384:	004011f5 	.word	0x004011f5
  401388:	e000e100 	.word	0xe000e100

0040138c <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  40138c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  40138e:	4604      	mov	r4, r0
  401390:	f240 12b5 	movw	r2, #437	; 0x1b5
  401394:	490b      	ldr	r1, [pc, #44]	; (4013c4 <_pwm_enable+0x38>)
  401396:	3000      	adds	r0, #0
  401398:	bf18      	it	ne
  40139a:	2001      	movne	r0, #1
  40139c:	4b0a      	ldr	r3, [pc, #40]	; (4013c8 <_pwm_enable+0x3c>)
  40139e:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  4013a0:	6920      	ldr	r0, [r4, #16]
  4013a2:	4b0a      	ldr	r3, [pc, #40]	; (4013cc <_pwm_enable+0x40>)
  4013a4:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4013a6:	2300      	movs	r3, #0
  4013a8:	e008      	b.n	4013bc <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  4013aa:	6921      	ldr	r1, [r4, #16]
  4013ac:	6b05      	ldr	r5, [r0, #48]	; 0x30
  4013ae:	011a      	lsls	r2, r3, #4
  4013b0:	5cad      	ldrb	r5, [r5, r2]
  4013b2:	2201      	movs	r2, #1
  4013b4:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  4013b6:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  4013b8:	3301      	adds	r3, #1
  4013ba:	b25b      	sxtb	r3, r3
  4013bc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4013be:	4293      	cmp	r3, r2
  4013c0:	d3f3      	bcc.n	4013aa <_pwm_enable+0x1e>
	}
}
  4013c2:	bd38      	pop	{r3, r4, r5, pc}
  4013c4:	00404c8c 	.word	0x00404c8c
  4013c8:	00400b55 	.word	0x00400b55
  4013cc:	004011c5 	.word	0x004011c5

004013d0 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  4013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4013d2:	460d      	mov	r5, r1
  4013d4:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  4013d6:	4604      	mov	r4, r0
  4013d8:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  4013dc:	4911      	ldr	r1, [pc, #68]	; (401424 <_pwm_set_param+0x54>)
  4013de:	2800      	cmp	r0, #0
  4013e0:	bf18      	it	ne
  4013e2:	42ae      	cmpne	r6, r5
  4013e4:	bf34      	ite	cc
  4013e6:	2001      	movcc	r0, #1
  4013e8:	2000      	movcs	r0, #0
  4013ea:	4b0f      	ldr	r3, [pc, #60]	; (401428 <_pwm_set_param+0x58>)
  4013ec:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  4013ee:	6920      	ldr	r0, [r4, #16]
  4013f0:	4b0e      	ldr	r3, [pc, #56]	; (40142c <_pwm_set_param+0x5c>)
  4013f2:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4013f4:	2300      	movs	r3, #0
  4013f6:	e010      	b.n	40141a <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  4013f8:	6922      	ldr	r2, [r4, #16]
  4013fa:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4013fc:	0119      	lsls	r1, r3, #4
  4013fe:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  401400:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  401404:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  401408:	6922      	ldr	r2, [r4, #16]
  40140a:	6b07      	ldr	r7, [r0, #48]	; 0x30
  40140c:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  40140e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  401412:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  401416:	3301      	adds	r3, #1
  401418:	b2db      	uxtb	r3, r3
  40141a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40141c:	4293      	cmp	r3, r2
  40141e:	d3eb      	bcc.n	4013f8 <_pwm_set_param+0x28>
	}
}
  401420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401422:	bf00      	nop
  401424:	00404c8c 	.word	0x00404c8c
  401428:	00400b55 	.word	0x00400b55
  40142c:	004011c5 	.word	0x004011c5

00401430 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  401430:	b510      	push	{r4, lr}
	ASSERT(device);
  401432:	4604      	mov	r4, r0
  401434:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401438:	4907      	ldr	r1, [pc, #28]	; (401458 <_pwm_is_enabled+0x28>)
  40143a:	3000      	adds	r0, #0
  40143c:	bf18      	it	ne
  40143e:	2001      	movne	r0, #1
  401440:	4b06      	ldr	r3, [pc, #24]	; (40145c <_pwm_is_enabled+0x2c>)
  401442:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  401444:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  401446:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  401448:	f013 0f0f 	tst.w	r3, #15
  40144c:	d001      	beq.n	401452 <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  40144e:	2001      	movs	r0, #1
	}
}
  401450:	bd10      	pop	{r4, pc}
		return false;
  401452:	2000      	movs	r0, #0
  401454:	bd10      	pop	{r4, pc}
  401456:	bf00      	nop
  401458:	00404c8c 	.word	0x00404c8c
  40145c:	00400b55 	.word	0x00400b55

00401460 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  401460:	2000      	movs	r0, #0
  401462:	4770      	bx	lr

00401464 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  401464:	4b03      	ldr	r3, [pc, #12]	; (401474 <_system_time_init+0x10>)
  401466:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  40146a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  40146c:	2205      	movs	r2, #5
  40146e:	601a      	str	r2, [r3, #0]
  401470:	4770      	bx	lr
  401472:	bf00      	nop
  401474:	e000e010 	.word	0xe000e010

00401478 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  401478:	b508      	push	{r3, lr}
	_system_time_init(hw);
  40147a:	4b01      	ldr	r3, [pc, #4]	; (401480 <_delay_init+0x8>)
  40147c:	4798      	blx	r3
  40147e:	bd08      	pop	{r3, pc}
  401480:	00401465 	.word	0x00401465

00401484 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  401484:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  401486:	e00d      	b.n	4014a4 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  401488:	4b0d      	ldr	r3, [pc, #52]	; (4014c0 <_delay_cycles+0x3c>)
  40148a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  40148e:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401490:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401492:	4b0b      	ldr	r3, [pc, #44]	; (4014c0 <_delay_cycles+0x3c>)
  401494:	681b      	ldr	r3, [r3, #0]
  401496:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40149a:	d0fa      	beq.n	401492 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  40149c:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4014a0:	3101      	adds	r1, #1
	while (n--) {
  4014a2:	4610      	mov	r0, r2
  4014a4:	1e43      	subs	r3, r0, #1
  4014a6:	b2da      	uxtb	r2, r3
  4014a8:	2800      	cmp	r0, #0
  4014aa:	d1ed      	bne.n	401488 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  4014ac:	4b04      	ldr	r3, [pc, #16]	; (4014c0 <_delay_cycles+0x3c>)
  4014ae:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4014b0:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4014b2:	4b03      	ldr	r3, [pc, #12]	; (4014c0 <_delay_cycles+0x3c>)
  4014b4:	681b      	ldr	r3, [r3, #0]
  4014b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4014ba:	d0fa      	beq.n	4014b2 <_delay_cycles+0x2e>
		;
}
  4014bc:	4770      	bx	lr
  4014be:	bf00      	nop
  4014c0:	e000e010 	.word	0xe000e010

004014c4 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  4014c4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4014c6:	4604      	mov	r4, r0
  4014c8:	f240 222b 	movw	r2, #555	; 0x22b
  4014cc:	4905      	ldr	r1, [pc, #20]	; (4014e4 <_usart_get_hardware_index+0x20>)
  4014ce:	3000      	adds	r0, #0
  4014d0:	bf18      	it	ne
  4014d2:	2001      	movne	r0, #1
  4014d4:	4b04      	ldr	r3, [pc, #16]	; (4014e8 <_usart_get_hardware_index+0x24>)
  4014d6:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  4014d8:	4804      	ldr	r0, [pc, #16]	; (4014ec <_usart_get_hardware_index+0x28>)
  4014da:	4420      	add	r0, r4
}
  4014dc:	f3c0 3087 	ubfx	r0, r0, #14, #8
  4014e0:	bd10      	pop	{r4, pc}
  4014e2:	bf00      	nop
  4014e4:	00404cb0 	.word	0x00404cb0
  4014e8:	00400b55 	.word	0x00400b55
  4014ec:	bffdc000 	.word	0xbffdc000

004014f0 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  4014f0:	b510      	push	{r4, lr}
	ASSERT(hw);
  4014f2:	4604      	mov	r4, r0
  4014f4:	f240 2287 	movw	r2, #647	; 0x287
  4014f8:	490e      	ldr	r1, [pc, #56]	; (401534 <_get_usart_index+0x44>)
  4014fa:	3000      	adds	r0, #0
  4014fc:	bf18      	it	ne
  4014fe:	2001      	movne	r0, #1
  401500:	4b0d      	ldr	r3, [pc, #52]	; (401538 <_get_usart_index+0x48>)
  401502:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  401504:	4620      	mov	r0, r4
  401506:	4b0d      	ldr	r3, [pc, #52]	; (40153c <_get_usart_index+0x4c>)
  401508:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40150a:	2300      	movs	r3, #0
  40150c:	b143      	cbz	r3, 401520 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  40150e:	f240 2291 	movw	r2, #657	; 0x291
  401512:	4908      	ldr	r1, [pc, #32]	; (401534 <_get_usart_index+0x44>)
  401514:	2000      	movs	r0, #0
  401516:	4b08      	ldr	r3, [pc, #32]	; (401538 <_get_usart_index+0x48>)
  401518:	4798      	blx	r3
	return 0;
  40151a:	2300      	movs	r3, #0
}
  40151c:	4618      	mov	r0, r3
  40151e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  401520:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401524:	008a      	lsls	r2, r1, #2
  401526:	4906      	ldr	r1, [pc, #24]	; (401540 <_get_usart_index+0x50>)
  401528:	5c8a      	ldrb	r2, [r1, r2]
  40152a:	4290      	cmp	r0, r2
  40152c:	d0f6      	beq.n	40151c <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40152e:	3301      	adds	r3, #1
  401530:	b2db      	uxtb	r3, r3
  401532:	e7eb      	b.n	40150c <_get_usart_index+0x1c>
  401534:	00404cb0 	.word	0x00404cb0
  401538:	00400b55 	.word	0x00400b55
  40153c:	004014c5 	.word	0x004014c5
  401540:	00404ca4 	.word	0x00404ca4

00401544 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  401544:	b510      	push	{r4, lr}
	ASSERT(hw);
  401546:	4604      	mov	r4, r0
  401548:	f240 229e 	movw	r2, #670	; 0x29e
  40154c:	4911      	ldr	r1, [pc, #68]	; (401594 <_usart_init+0x50>)
  40154e:	3000      	adds	r0, #0
  401550:	bf18      	it	ne
  401552:	2001      	movne	r0, #1
  401554:	4b10      	ldr	r3, [pc, #64]	; (401598 <_usart_init+0x54>)
  401556:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  401558:	4620      	mov	r0, r4
  40155a:	4b10      	ldr	r3, [pc, #64]	; (40159c <_usart_init+0x58>)
  40155c:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  40155e:	4b10      	ldr	r3, [pc, #64]	; (4015a0 <_usart_init+0x5c>)
  401560:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  401564:	2300      	movs	r3, #0
  401566:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  401568:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  40156a:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  40156c:	22ac      	movs	r2, #172	; 0xac
  40156e:	6022      	str	r2, [r4, #0]
  401570:	f44f 7280 	mov.w	r2, #256	; 0x100
  401574:	6022      	str	r2, [r4, #0]
  401576:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40157a:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  40157c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  401580:	0081      	lsls	r1, r0, #2
  401582:	4a08      	ldr	r2, [pc, #32]	; (4015a4 <_usart_init+0x60>)
  401584:	440a      	add	r2, r1
  401586:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  401588:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  40158a:	4a07      	ldr	r2, [pc, #28]	; (4015a8 <_usart_init+0x64>)
  40158c:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  40158e:	4618      	mov	r0, r3
  401590:	bd10      	pop	{r4, pc}
  401592:	bf00      	nop
  401594:	00404cb0 	.word	0x00404cb0
  401598:	00400b55 	.word	0x00400b55
  40159c:	004014f1 	.word	0x004014f1
  4015a0:	55534100 	.word	0x55534100
  4015a4:	00404ca4 	.word	0x00404ca4
  4015a8:	000100f4 	.word	0x000100f4

004015ac <_usart_sync_init>:
{
  4015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4015ae:	460c      	mov	r4, r1
	ASSERT(device);
  4015b0:	4e09      	ldr	r6, [pc, #36]	; (4015d8 <_usart_sync_init+0x2c>)
  4015b2:	4607      	mov	r7, r0
  4015b4:	22bd      	movs	r2, #189	; 0xbd
  4015b6:	4631      	mov	r1, r6
  4015b8:	3000      	adds	r0, #0
  4015ba:	bf18      	it	ne
  4015bc:	2001      	movne	r0, #1
  4015be:	4d07      	ldr	r5, [pc, #28]	; (4015dc <_usart_sync_init+0x30>)
  4015c0:	47a8      	blx	r5
	ASSERT(hw);
  4015c2:	22be      	movs	r2, #190	; 0xbe
  4015c4:	4631      	mov	r1, r6
  4015c6:	1c20      	adds	r0, r4, #0
  4015c8:	bf18      	it	ne
  4015ca:	2001      	movne	r0, #1
  4015cc:	47a8      	blx	r5
	device->hw = hw;
  4015ce:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  4015d0:	4620      	mov	r0, r4
  4015d2:	4b03      	ldr	r3, [pc, #12]	; (4015e0 <_usart_sync_init+0x34>)
  4015d4:	4798      	blx	r3
}
  4015d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4015d8:	00404cb0 	.word	0x00404cb0
  4015dc:	00400b55 	.word	0x00400b55
  4015e0:	00401545 	.word	0x00401545

004015e4 <_usart_sync_enable>:
{
  4015e4:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4015e6:	4e0a      	ldr	r6, [pc, #40]	; (401610 <_usart_sync_enable+0x2c>)
  4015e8:	4604      	mov	r4, r0
  4015ea:	f240 1205 	movw	r2, #261	; 0x105
  4015ee:	4631      	mov	r1, r6
  4015f0:	3000      	adds	r0, #0
  4015f2:	bf18      	it	ne
  4015f4:	2001      	movne	r0, #1
  4015f6:	4d07      	ldr	r5, [pc, #28]	; (401614 <_usart_sync_enable+0x30>)
  4015f8:	47a8      	blx	r5
	_usart_enable(device->hw);
  4015fa:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4015fc:	f240 22c7 	movw	r2, #711	; 0x2c7
  401600:	4631      	mov	r1, r6
  401602:	1c20      	adds	r0, r4, #0
  401604:	bf18      	it	ne
  401606:	2001      	movne	r0, #1
  401608:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  40160a:	2350      	movs	r3, #80	; 0x50
  40160c:	6023      	str	r3, [r4, #0]
  40160e:	bd70      	pop	{r4, r5, r6, pc}
  401610:	00404cb0 	.word	0x00404cb0
  401614:	00400b55 	.word	0x00400b55

00401618 <_usart_sync_write_byte>:
{
  401618:	b538      	push	{r3, r4, r5, lr}
  40161a:	460c      	mov	r4, r1
	ASSERT(device);
  40161c:	4605      	mov	r5, r0
  40161e:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  401622:	4904      	ldr	r1, [pc, #16]	; (401634 <_usart_sync_write_byte+0x1c>)
  401624:	3000      	adds	r0, #0
  401626:	bf18      	it	ne
  401628:	2001      	movne	r0, #1
  40162a:	4b03      	ldr	r3, [pc, #12]	; (401638 <_usart_sync_write_byte+0x20>)
  40162c:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  40162e:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  401630:	61dc      	str	r4, [r3, #28]
  401632:	bd38      	pop	{r3, r4, r5, pc}
  401634:	00404cb0 	.word	0x00404cb0
  401638:	00400b55 	.word	0x00400b55

0040163c <_usart_sync_read_byte>:
{
  40163c:	b510      	push	{r4, lr}
	ASSERT(device);
  40163e:	4604      	mov	r4, r0
  401640:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  401644:	4904      	ldr	r1, [pc, #16]	; (401658 <_usart_sync_read_byte+0x1c>)
  401646:	3000      	adds	r0, #0
  401648:	bf18      	it	ne
  40164a:	2001      	movne	r0, #1
  40164c:	4b03      	ldr	r3, [pc, #12]	; (40165c <_usart_sync_read_byte+0x20>)
  40164e:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  401650:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  401652:	6998      	ldr	r0, [r3, #24]
}
  401654:	b2c0      	uxtb	r0, r0
  401656:	bd10      	pop	{r4, pc}
  401658:	00404cb0 	.word	0x00404cb0
  40165c:	00400b55 	.word	0x00400b55

00401660 <_usart_sync_is_ready_to_send>:
{
  401660:	b510      	push	{r4, lr}
	ASSERT(device);
  401662:	4604      	mov	r4, r0
  401664:	f240 12c3 	movw	r2, #451	; 0x1c3
  401668:	4905      	ldr	r1, [pc, #20]	; (401680 <_usart_sync_is_ready_to_send+0x20>)
  40166a:	3000      	adds	r0, #0
  40166c:	bf18      	it	ne
  40166e:	2001      	movne	r0, #1
  401670:	4b04      	ldr	r3, [pc, #16]	; (401684 <_usart_sync_is_ready_to_send+0x24>)
  401672:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  401674:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  401676:	6958      	ldr	r0, [r3, #20]
}
  401678:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40167c:	bd10      	pop	{r4, pc}
  40167e:	bf00      	nop
  401680:	00404cb0 	.word	0x00404cb0
  401684:	00400b55 	.word	0x00400b55

00401688 <_usart_sync_is_transmit_done>:
{
  401688:	b510      	push	{r4, lr}
	ASSERT(device);
  40168a:	4604      	mov	r4, r0
  40168c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  401690:	4905      	ldr	r1, [pc, #20]	; (4016a8 <_usart_sync_is_transmit_done+0x20>)
  401692:	3000      	adds	r0, #0
  401694:	bf18      	it	ne
  401696:	2001      	movne	r0, #1
  401698:	4b04      	ldr	r3, [pc, #16]	; (4016ac <_usart_sync_is_transmit_done+0x24>)
  40169a:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  40169c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  40169e:	6958      	ldr	r0, [r3, #20]
}
  4016a0:	f3c0 2040 	ubfx	r0, r0, #9, #1
  4016a4:	bd10      	pop	{r4, pc}
  4016a6:	bf00      	nop
  4016a8:	00404cb0 	.word	0x00404cb0
  4016ac:	00400b55 	.word	0x00400b55

004016b0 <_usart_sync_is_byte_received>:
{
  4016b0:	b510      	push	{r4, lr}
	ASSERT(device);
  4016b2:	4604      	mov	r4, r0
  4016b4:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4016b8:	4905      	ldr	r1, [pc, #20]	; (4016d0 <_usart_sync_is_byte_received+0x20>)
  4016ba:	3000      	adds	r0, #0
  4016bc:	bf18      	it	ne
  4016be:	2001      	movne	r0, #1
  4016c0:	4b04      	ldr	r3, [pc, #16]	; (4016d4 <_usart_sync_is_byte_received+0x24>)
  4016c2:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  4016c4:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  4016c6:	6958      	ldr	r0, [r3, #20]
  4016c8:	f000 0001 	and.w	r0, r0, #1
}
  4016cc:	bd10      	pop	{r4, pc}
  4016ce:	bf00      	nop
  4016d0:	00404cb0 	.word	0x00404cb0
  4016d4:	00400b55 	.word	0x00400b55

004016d8 <_usart_get_usart_sync>:
}
  4016d8:	2000      	movs	r0, #0
  4016da:	4770      	bx	lr

004016dc <main>:
#include "arm_math.h"



int main(void)
{
  4016dc:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  4016de:	4b0d      	ldr	r3, [pc, #52]	; (401714 <main+0x38>)
  4016e0:	4798      	blx	r3
	//CAN is currently disabled
	
	pwm_enable_all();
  4016e2:	4b0d      	ldr	r3, [pc, #52]	; (401718 <main+0x3c>)
  4016e4:	4798      	blx	r3
	adc_enable_all();
  4016e6:	4b0d      	ldr	r3, [pc, #52]	; (40171c <main+0x40>)
  4016e8:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  4016ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4016ee:	4b0c      	ldr	r3, [pc, #48]	; (401720 <main+0x44>)
  4016f0:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  4016f2:	4d0c      	ldr	r5, [pc, #48]	; (401724 <main+0x48>)
  4016f4:	f44f 7680 	mov.w	r6, #256	; 0x100
  4016f8:	636e      	str	r6, [r5, #52]	; 0x34
	/* Replace with your application code */
	while (1) {
		
		gpio_set_pin_level(PIN_USER_LED, false);
		//pwm_set_duty(PWM_PHASE_A, 8000);
		delay_ms(2000);
  4016fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  4016fe:	4c0a      	ldr	r4, [pc, #40]	; (401728 <main+0x4c>)
  401700:	47a0      	blx	r4
		printf("this is \tworking\n");
  401702:	480a      	ldr	r0, [pc, #40]	; (40172c <main+0x50>)
  401704:	4b0a      	ldr	r3, [pc, #40]	; (401730 <main+0x54>)
  401706:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  401708:	632e      	str	r6, [r5, #48]	; 0x30
		
		gpio_set_pin_level(PIN_USER_LED, true);
		//pwm_set_duty(PWM_PHASE_A, 3000);
		delay_ms(2000);
  40170a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  40170e:	47a0      	blx	r4
  401710:	e7ef      	b.n	4016f2 <main+0x16>
  401712:	bf00      	nop
  401714:	004001d5 	.word	0x004001d5
  401718:	0040023d 	.word	0x0040023d
  40171c:	004001e9 	.word	0x004001e9
  401720:	400e0e00 	.word	0x400e0e00
  401724:	400e1200 	.word	0x400e1200
  401728:	00400855 	.word	0x00400855
  40172c:	00404ccc 	.word	0x00404ccc
  401730:	00402a35 	.word	0x00402a35

00401734 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  401734:	b958      	cbnz	r0, 40174e <_read+0x1a>
{
  401736:	b508      	push	{r3, lr}
  401738:	460b      	mov	r3, r1
  40173a:	4611      	mov	r1, r2
  40173c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  40173e:	4b05      	ldr	r3, [pc, #20]	; (401754 <_read+0x20>)
  401740:	4798      	blx	r3
	if (n < 0) {
  401742:	2800      	cmp	r0, #0
  401744:	db00      	blt.n	401748 <_read+0x14>
		return -1;
	}

	return n;
}
  401746:	bd08      	pop	{r3, pc}
		return -1;
  401748:	f04f 30ff 	mov.w	r0, #4294967295
  40174c:	bd08      	pop	{r3, pc}
		return -1;
  40174e:	f04f 30ff 	mov.w	r0, #4294967295
  401752:	4770      	bx	lr
  401754:	004017ad 	.word	0x004017ad

00401758 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  401758:	3801      	subs	r0, #1
  40175a:	2802      	cmp	r0, #2
  40175c:	d80b      	bhi.n	401776 <_write+0x1e>
{
  40175e:	b508      	push	{r3, lr}
  401760:	460b      	mov	r3, r1
  401762:	4611      	mov	r1, r2
  401764:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  401766:	4b05      	ldr	r3, [pc, #20]	; (40177c <_write+0x24>)
  401768:	4798      	blx	r3
	if (n < 0) {
  40176a:	2800      	cmp	r0, #0
  40176c:	db00      	blt.n	401770 <_write+0x18>
		return -1;
	}

	return n;
}
  40176e:	bd08      	pop	{r3, pc}
		return -1;
  401770:	f04f 30ff 	mov.w	r0, #4294967295
  401774:	bd08      	pop	{r3, pc}
		return -1;
  401776:	f04f 30ff 	mov.w	r0, #4294967295
  40177a:	4770      	bx	lr
  40177c:	004017d1 	.word	0x004017d1

00401780 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  401780:	b570      	push	{r4, r5, r6, lr}
  401782:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  401784:	4d06      	ldr	r5, [pc, #24]	; (4017a0 <stdio_io_init+0x20>)
  401786:	682b      	ldr	r3, [r5, #0]
  401788:	2100      	movs	r1, #0
  40178a:	6898      	ldr	r0, [r3, #8]
  40178c:	4c05      	ldr	r4, [pc, #20]	; (4017a4 <stdio_io_init+0x24>)
  40178e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  401790:	682b      	ldr	r3, [r5, #0]
  401792:	2100      	movs	r1, #0
  401794:	6858      	ldr	r0, [r3, #4]
  401796:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  401798:	4b03      	ldr	r3, [pc, #12]	; (4017a8 <stdio_io_init+0x28>)
  40179a:	601e      	str	r6, [r3, #0]
  40179c:	bd70      	pop	{r4, r5, r6, pc}
  40179e:	bf00      	nop
  4017a0:	20400014 	.word	0x20400014
  4017a4:	00402a65 	.word	0x00402a65
  4017a8:	20400270 	.word	0x20400270

004017ac <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  4017ac:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4017ae:	4b06      	ldr	r3, [pc, #24]	; (4017c8 <stdio_io_read+0x1c>)
  4017b0:	681b      	ldr	r3, [r3, #0]
  4017b2:	b133      	cbz	r3, 4017c2 <stdio_io_read+0x16>
  4017b4:	460a      	mov	r2, r1
  4017b6:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  4017b8:	b292      	uxth	r2, r2
  4017ba:	4618      	mov	r0, r3
  4017bc:	4b03      	ldr	r3, [pc, #12]	; (4017cc <stdio_io_read+0x20>)
  4017be:	4798      	blx	r3
  4017c0:	bd08      	pop	{r3, pc}
		return 0;
  4017c2:	2000      	movs	r0, #0
}
  4017c4:	bd08      	pop	{r3, pc}
  4017c6:	bf00      	nop
  4017c8:	20400270 	.word	0x20400270
  4017cc:	0040091d 	.word	0x0040091d

004017d0 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  4017d0:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  4017d2:	4b06      	ldr	r3, [pc, #24]	; (4017ec <stdio_io_write+0x1c>)
  4017d4:	681b      	ldr	r3, [r3, #0]
  4017d6:	b133      	cbz	r3, 4017e6 <stdio_io_write+0x16>
  4017d8:	460a      	mov	r2, r1
  4017da:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  4017dc:	b292      	uxth	r2, r2
  4017de:	4618      	mov	r0, r3
  4017e0:	4b03      	ldr	r3, [pc, #12]	; (4017f0 <stdio_io_write+0x20>)
  4017e2:	4798      	blx	r3
  4017e4:	bd08      	pop	{r3, pc}
		return 0;
  4017e6:	2000      	movs	r0, #0
}
  4017e8:	bd08      	pop	{r3, pc}
  4017ea:	bf00      	nop
  4017ec:	20400270 	.word	0x20400270
  4017f0:	004008ed 	.word	0x004008ed

004017f4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  4017f4:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  4017f6:	4c04      	ldr	r4, [pc, #16]	; (401808 <stdio_redirect_init+0x14>)
  4017f8:	4620      	mov	r0, r4
  4017fa:	4b04      	ldr	r3, [pc, #16]	; (40180c <stdio_redirect_init+0x18>)
  4017fc:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  4017fe:	4620      	mov	r0, r4
  401800:	4b03      	ldr	r3, [pc, #12]	; (401810 <stdio_redirect_init+0x1c>)
  401802:	4798      	blx	r3
  401804:	bd10      	pop	{r4, pc}
  401806:	bf00      	nop
  401808:	204002c0 	.word	0x204002c0
  40180c:	00400b29 	.word	0x00400b29
  401810:	00401781 	.word	0x00401781

00401814 <__aeabi_drsub>:
  401814:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401818:	e002      	b.n	401820 <__adddf3>
  40181a:	bf00      	nop

0040181c <__aeabi_dsub>:
  40181c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401820 <__adddf3>:
  401820:	b530      	push	{r4, r5, lr}
  401822:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401826:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40182a:	ea94 0f05 	teq	r4, r5
  40182e:	bf08      	it	eq
  401830:	ea90 0f02 	teqeq	r0, r2
  401834:	bf1f      	itttt	ne
  401836:	ea54 0c00 	orrsne.w	ip, r4, r0
  40183a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40183e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401842:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401846:	f000 80e2 	beq.w	401a0e <__adddf3+0x1ee>
  40184a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40184e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401852:	bfb8      	it	lt
  401854:	426d      	neglt	r5, r5
  401856:	dd0c      	ble.n	401872 <__adddf3+0x52>
  401858:	442c      	add	r4, r5
  40185a:	ea80 0202 	eor.w	r2, r0, r2
  40185e:	ea81 0303 	eor.w	r3, r1, r3
  401862:	ea82 0000 	eor.w	r0, r2, r0
  401866:	ea83 0101 	eor.w	r1, r3, r1
  40186a:	ea80 0202 	eor.w	r2, r0, r2
  40186e:	ea81 0303 	eor.w	r3, r1, r3
  401872:	2d36      	cmp	r5, #54	; 0x36
  401874:	bf88      	it	hi
  401876:	bd30      	pophi	{r4, r5, pc}
  401878:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40187c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401880:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401884:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401888:	d002      	beq.n	401890 <__adddf3+0x70>
  40188a:	4240      	negs	r0, r0
  40188c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401890:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401894:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401898:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40189c:	d002      	beq.n	4018a4 <__adddf3+0x84>
  40189e:	4252      	negs	r2, r2
  4018a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4018a4:	ea94 0f05 	teq	r4, r5
  4018a8:	f000 80a7 	beq.w	4019fa <__adddf3+0x1da>
  4018ac:	f1a4 0401 	sub.w	r4, r4, #1
  4018b0:	f1d5 0e20 	rsbs	lr, r5, #32
  4018b4:	db0d      	blt.n	4018d2 <__adddf3+0xb2>
  4018b6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4018ba:	fa22 f205 	lsr.w	r2, r2, r5
  4018be:	1880      	adds	r0, r0, r2
  4018c0:	f141 0100 	adc.w	r1, r1, #0
  4018c4:	fa03 f20e 	lsl.w	r2, r3, lr
  4018c8:	1880      	adds	r0, r0, r2
  4018ca:	fa43 f305 	asr.w	r3, r3, r5
  4018ce:	4159      	adcs	r1, r3
  4018d0:	e00e      	b.n	4018f0 <__adddf3+0xd0>
  4018d2:	f1a5 0520 	sub.w	r5, r5, #32
  4018d6:	f10e 0e20 	add.w	lr, lr, #32
  4018da:	2a01      	cmp	r2, #1
  4018dc:	fa03 fc0e 	lsl.w	ip, r3, lr
  4018e0:	bf28      	it	cs
  4018e2:	f04c 0c02 	orrcs.w	ip, ip, #2
  4018e6:	fa43 f305 	asr.w	r3, r3, r5
  4018ea:	18c0      	adds	r0, r0, r3
  4018ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4018f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4018f4:	d507      	bpl.n	401906 <__adddf3+0xe6>
  4018f6:	f04f 0e00 	mov.w	lr, #0
  4018fa:	f1dc 0c00 	rsbs	ip, ip, #0
  4018fe:	eb7e 0000 	sbcs.w	r0, lr, r0
  401902:	eb6e 0101 	sbc.w	r1, lr, r1
  401906:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40190a:	d31b      	bcc.n	401944 <__adddf3+0x124>
  40190c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401910:	d30c      	bcc.n	40192c <__adddf3+0x10c>
  401912:	0849      	lsrs	r1, r1, #1
  401914:	ea5f 0030 	movs.w	r0, r0, rrx
  401918:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40191c:	f104 0401 	add.w	r4, r4, #1
  401920:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401924:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401928:	f080 809a 	bcs.w	401a60 <__adddf3+0x240>
  40192c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401930:	bf08      	it	eq
  401932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401936:	f150 0000 	adcs.w	r0, r0, #0
  40193a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40193e:	ea41 0105 	orr.w	r1, r1, r5
  401942:	bd30      	pop	{r4, r5, pc}
  401944:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401948:	4140      	adcs	r0, r0
  40194a:	eb41 0101 	adc.w	r1, r1, r1
  40194e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401952:	f1a4 0401 	sub.w	r4, r4, #1
  401956:	d1e9      	bne.n	40192c <__adddf3+0x10c>
  401958:	f091 0f00 	teq	r1, #0
  40195c:	bf04      	itt	eq
  40195e:	4601      	moveq	r1, r0
  401960:	2000      	moveq	r0, #0
  401962:	fab1 f381 	clz	r3, r1
  401966:	bf08      	it	eq
  401968:	3320      	addeq	r3, #32
  40196a:	f1a3 030b 	sub.w	r3, r3, #11
  40196e:	f1b3 0220 	subs.w	r2, r3, #32
  401972:	da0c      	bge.n	40198e <__adddf3+0x16e>
  401974:	320c      	adds	r2, #12
  401976:	dd08      	ble.n	40198a <__adddf3+0x16a>
  401978:	f102 0c14 	add.w	ip, r2, #20
  40197c:	f1c2 020c 	rsb	r2, r2, #12
  401980:	fa01 f00c 	lsl.w	r0, r1, ip
  401984:	fa21 f102 	lsr.w	r1, r1, r2
  401988:	e00c      	b.n	4019a4 <__adddf3+0x184>
  40198a:	f102 0214 	add.w	r2, r2, #20
  40198e:	bfd8      	it	le
  401990:	f1c2 0c20 	rsble	ip, r2, #32
  401994:	fa01 f102 	lsl.w	r1, r1, r2
  401998:	fa20 fc0c 	lsr.w	ip, r0, ip
  40199c:	bfdc      	itt	le
  40199e:	ea41 010c 	orrle.w	r1, r1, ip
  4019a2:	4090      	lslle	r0, r2
  4019a4:	1ae4      	subs	r4, r4, r3
  4019a6:	bfa2      	ittt	ge
  4019a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4019ac:	4329      	orrge	r1, r5
  4019ae:	bd30      	popge	{r4, r5, pc}
  4019b0:	ea6f 0404 	mvn.w	r4, r4
  4019b4:	3c1f      	subs	r4, #31
  4019b6:	da1c      	bge.n	4019f2 <__adddf3+0x1d2>
  4019b8:	340c      	adds	r4, #12
  4019ba:	dc0e      	bgt.n	4019da <__adddf3+0x1ba>
  4019bc:	f104 0414 	add.w	r4, r4, #20
  4019c0:	f1c4 0220 	rsb	r2, r4, #32
  4019c4:	fa20 f004 	lsr.w	r0, r0, r4
  4019c8:	fa01 f302 	lsl.w	r3, r1, r2
  4019cc:	ea40 0003 	orr.w	r0, r0, r3
  4019d0:	fa21 f304 	lsr.w	r3, r1, r4
  4019d4:	ea45 0103 	orr.w	r1, r5, r3
  4019d8:	bd30      	pop	{r4, r5, pc}
  4019da:	f1c4 040c 	rsb	r4, r4, #12
  4019de:	f1c4 0220 	rsb	r2, r4, #32
  4019e2:	fa20 f002 	lsr.w	r0, r0, r2
  4019e6:	fa01 f304 	lsl.w	r3, r1, r4
  4019ea:	ea40 0003 	orr.w	r0, r0, r3
  4019ee:	4629      	mov	r1, r5
  4019f0:	bd30      	pop	{r4, r5, pc}
  4019f2:	fa21 f004 	lsr.w	r0, r1, r4
  4019f6:	4629      	mov	r1, r5
  4019f8:	bd30      	pop	{r4, r5, pc}
  4019fa:	f094 0f00 	teq	r4, #0
  4019fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401a02:	bf06      	itte	eq
  401a04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401a08:	3401      	addeq	r4, #1
  401a0a:	3d01      	subne	r5, #1
  401a0c:	e74e      	b.n	4018ac <__adddf3+0x8c>
  401a0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401a12:	bf18      	it	ne
  401a14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401a18:	d029      	beq.n	401a6e <__adddf3+0x24e>
  401a1a:	ea94 0f05 	teq	r4, r5
  401a1e:	bf08      	it	eq
  401a20:	ea90 0f02 	teqeq	r0, r2
  401a24:	d005      	beq.n	401a32 <__adddf3+0x212>
  401a26:	ea54 0c00 	orrs.w	ip, r4, r0
  401a2a:	bf04      	itt	eq
  401a2c:	4619      	moveq	r1, r3
  401a2e:	4610      	moveq	r0, r2
  401a30:	bd30      	pop	{r4, r5, pc}
  401a32:	ea91 0f03 	teq	r1, r3
  401a36:	bf1e      	ittt	ne
  401a38:	2100      	movne	r1, #0
  401a3a:	2000      	movne	r0, #0
  401a3c:	bd30      	popne	{r4, r5, pc}
  401a3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401a42:	d105      	bne.n	401a50 <__adddf3+0x230>
  401a44:	0040      	lsls	r0, r0, #1
  401a46:	4149      	adcs	r1, r1
  401a48:	bf28      	it	cs
  401a4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401a4e:	bd30      	pop	{r4, r5, pc}
  401a50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401a54:	bf3c      	itt	cc
  401a56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401a5a:	bd30      	popcc	{r4, r5, pc}
  401a5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401a60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401a64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401a68:	f04f 0000 	mov.w	r0, #0
  401a6c:	bd30      	pop	{r4, r5, pc}
  401a6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401a72:	bf1a      	itte	ne
  401a74:	4619      	movne	r1, r3
  401a76:	4610      	movne	r0, r2
  401a78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401a7c:	bf1c      	itt	ne
  401a7e:	460b      	movne	r3, r1
  401a80:	4602      	movne	r2, r0
  401a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401a86:	bf06      	itte	eq
  401a88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401a8c:	ea91 0f03 	teqeq	r1, r3
  401a90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401a94:	bd30      	pop	{r4, r5, pc}
  401a96:	bf00      	nop

00401a98 <__aeabi_ui2d>:
  401a98:	f090 0f00 	teq	r0, #0
  401a9c:	bf04      	itt	eq
  401a9e:	2100      	moveq	r1, #0
  401aa0:	4770      	bxeq	lr
  401aa2:	b530      	push	{r4, r5, lr}
  401aa4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401aa8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401aac:	f04f 0500 	mov.w	r5, #0
  401ab0:	f04f 0100 	mov.w	r1, #0
  401ab4:	e750      	b.n	401958 <__adddf3+0x138>
  401ab6:	bf00      	nop

00401ab8 <__aeabi_i2d>:
  401ab8:	f090 0f00 	teq	r0, #0
  401abc:	bf04      	itt	eq
  401abe:	2100      	moveq	r1, #0
  401ac0:	4770      	bxeq	lr
  401ac2:	b530      	push	{r4, r5, lr}
  401ac4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401ac8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401acc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401ad0:	bf48      	it	mi
  401ad2:	4240      	negmi	r0, r0
  401ad4:	f04f 0100 	mov.w	r1, #0
  401ad8:	e73e      	b.n	401958 <__adddf3+0x138>
  401ada:	bf00      	nop

00401adc <__aeabi_f2d>:
  401adc:	0042      	lsls	r2, r0, #1
  401ade:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401ae2:	ea4f 0131 	mov.w	r1, r1, rrx
  401ae6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401aea:	bf1f      	itttt	ne
  401aec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401af0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401af4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401af8:	4770      	bxne	lr
  401afa:	f092 0f00 	teq	r2, #0
  401afe:	bf14      	ite	ne
  401b00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401b04:	4770      	bxeq	lr
  401b06:	b530      	push	{r4, r5, lr}
  401b08:	f44f 7460 	mov.w	r4, #896	; 0x380
  401b0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401b10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401b14:	e720      	b.n	401958 <__adddf3+0x138>
  401b16:	bf00      	nop

00401b18 <__aeabi_ul2d>:
  401b18:	ea50 0201 	orrs.w	r2, r0, r1
  401b1c:	bf08      	it	eq
  401b1e:	4770      	bxeq	lr
  401b20:	b530      	push	{r4, r5, lr}
  401b22:	f04f 0500 	mov.w	r5, #0
  401b26:	e00a      	b.n	401b3e <__aeabi_l2d+0x16>

00401b28 <__aeabi_l2d>:
  401b28:	ea50 0201 	orrs.w	r2, r0, r1
  401b2c:	bf08      	it	eq
  401b2e:	4770      	bxeq	lr
  401b30:	b530      	push	{r4, r5, lr}
  401b32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  401b36:	d502      	bpl.n	401b3e <__aeabi_l2d+0x16>
  401b38:	4240      	negs	r0, r0
  401b3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401b3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401b42:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401b46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401b4a:	f43f aedc 	beq.w	401906 <__adddf3+0xe6>
  401b4e:	f04f 0203 	mov.w	r2, #3
  401b52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401b56:	bf18      	it	ne
  401b58:	3203      	addne	r2, #3
  401b5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401b5e:	bf18      	it	ne
  401b60:	3203      	addne	r2, #3
  401b62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401b66:	f1c2 0320 	rsb	r3, r2, #32
  401b6a:	fa00 fc03 	lsl.w	ip, r0, r3
  401b6e:	fa20 f002 	lsr.w	r0, r0, r2
  401b72:	fa01 fe03 	lsl.w	lr, r1, r3
  401b76:	ea40 000e 	orr.w	r0, r0, lr
  401b7a:	fa21 f102 	lsr.w	r1, r1, r2
  401b7e:	4414      	add	r4, r2
  401b80:	e6c1      	b.n	401906 <__adddf3+0xe6>
  401b82:	bf00      	nop

00401b84 <__aeabi_dmul>:
  401b84:	b570      	push	{r4, r5, r6, lr}
  401b86:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401b8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401b8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401b92:	bf1d      	ittte	ne
  401b94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401b98:	ea94 0f0c 	teqne	r4, ip
  401b9c:	ea95 0f0c 	teqne	r5, ip
  401ba0:	f000 f8de 	bleq	401d60 <__aeabi_dmul+0x1dc>
  401ba4:	442c      	add	r4, r5
  401ba6:	ea81 0603 	eor.w	r6, r1, r3
  401baa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401bae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401bb2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  401bb6:	bf18      	it	ne
  401bb8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401bbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401bc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401bc4:	d038      	beq.n	401c38 <__aeabi_dmul+0xb4>
  401bc6:	fba0 ce02 	umull	ip, lr, r0, r2
  401bca:	f04f 0500 	mov.w	r5, #0
  401bce:	fbe1 e502 	umlal	lr, r5, r1, r2
  401bd2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  401bd6:	fbe0 e503 	umlal	lr, r5, r0, r3
  401bda:	f04f 0600 	mov.w	r6, #0
  401bde:	fbe1 5603 	umlal	r5, r6, r1, r3
  401be2:	f09c 0f00 	teq	ip, #0
  401be6:	bf18      	it	ne
  401be8:	f04e 0e01 	orrne.w	lr, lr, #1
  401bec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  401bf0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401bf4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  401bf8:	d204      	bcs.n	401c04 <__aeabi_dmul+0x80>
  401bfa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  401bfe:	416d      	adcs	r5, r5
  401c00:	eb46 0606 	adc.w	r6, r6, r6
  401c04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  401c08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  401c0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  401c10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  401c14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  401c18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401c1c:	bf88      	it	hi
  401c1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401c22:	d81e      	bhi.n	401c62 <__aeabi_dmul+0xde>
  401c24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  401c28:	bf08      	it	eq
  401c2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  401c2e:	f150 0000 	adcs.w	r0, r0, #0
  401c32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401c36:	bd70      	pop	{r4, r5, r6, pc}
  401c38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  401c3c:	ea46 0101 	orr.w	r1, r6, r1
  401c40:	ea40 0002 	orr.w	r0, r0, r2
  401c44:	ea81 0103 	eor.w	r1, r1, r3
  401c48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  401c4c:	bfc2      	ittt	gt
  401c4e:	ebd4 050c 	rsbsgt	r5, r4, ip
  401c52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401c56:	bd70      	popgt	{r4, r5, r6, pc}
  401c58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401c5c:	f04f 0e00 	mov.w	lr, #0
  401c60:	3c01      	subs	r4, #1
  401c62:	f300 80ab 	bgt.w	401dbc <__aeabi_dmul+0x238>
  401c66:	f114 0f36 	cmn.w	r4, #54	; 0x36
  401c6a:	bfde      	ittt	le
  401c6c:	2000      	movle	r0, #0
  401c6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  401c72:	bd70      	pople	{r4, r5, r6, pc}
  401c74:	f1c4 0400 	rsb	r4, r4, #0
  401c78:	3c20      	subs	r4, #32
  401c7a:	da35      	bge.n	401ce8 <__aeabi_dmul+0x164>
  401c7c:	340c      	adds	r4, #12
  401c7e:	dc1b      	bgt.n	401cb8 <__aeabi_dmul+0x134>
  401c80:	f104 0414 	add.w	r4, r4, #20
  401c84:	f1c4 0520 	rsb	r5, r4, #32
  401c88:	fa00 f305 	lsl.w	r3, r0, r5
  401c8c:	fa20 f004 	lsr.w	r0, r0, r4
  401c90:	fa01 f205 	lsl.w	r2, r1, r5
  401c94:	ea40 0002 	orr.w	r0, r0, r2
  401c98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  401c9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401ca0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401ca4:	fa21 f604 	lsr.w	r6, r1, r4
  401ca8:	eb42 0106 	adc.w	r1, r2, r6
  401cac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401cb0:	bf08      	it	eq
  401cb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401cb6:	bd70      	pop	{r4, r5, r6, pc}
  401cb8:	f1c4 040c 	rsb	r4, r4, #12
  401cbc:	f1c4 0520 	rsb	r5, r4, #32
  401cc0:	fa00 f304 	lsl.w	r3, r0, r4
  401cc4:	fa20 f005 	lsr.w	r0, r0, r5
  401cc8:	fa01 f204 	lsl.w	r2, r1, r4
  401ccc:	ea40 0002 	orr.w	r0, r0, r2
  401cd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401cd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401cd8:	f141 0100 	adc.w	r1, r1, #0
  401cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401ce0:	bf08      	it	eq
  401ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401ce6:	bd70      	pop	{r4, r5, r6, pc}
  401ce8:	f1c4 0520 	rsb	r5, r4, #32
  401cec:	fa00 f205 	lsl.w	r2, r0, r5
  401cf0:	ea4e 0e02 	orr.w	lr, lr, r2
  401cf4:	fa20 f304 	lsr.w	r3, r0, r4
  401cf8:	fa01 f205 	lsl.w	r2, r1, r5
  401cfc:	ea43 0302 	orr.w	r3, r3, r2
  401d00:	fa21 f004 	lsr.w	r0, r1, r4
  401d04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401d08:	fa21 f204 	lsr.w	r2, r1, r4
  401d0c:	ea20 0002 	bic.w	r0, r0, r2
  401d10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  401d14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401d18:	bf08      	it	eq
  401d1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401d1e:	bd70      	pop	{r4, r5, r6, pc}
  401d20:	f094 0f00 	teq	r4, #0
  401d24:	d10f      	bne.n	401d46 <__aeabi_dmul+0x1c2>
  401d26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  401d2a:	0040      	lsls	r0, r0, #1
  401d2c:	eb41 0101 	adc.w	r1, r1, r1
  401d30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401d34:	bf08      	it	eq
  401d36:	3c01      	subeq	r4, #1
  401d38:	d0f7      	beq.n	401d2a <__aeabi_dmul+0x1a6>
  401d3a:	ea41 0106 	orr.w	r1, r1, r6
  401d3e:	f095 0f00 	teq	r5, #0
  401d42:	bf18      	it	ne
  401d44:	4770      	bxne	lr
  401d46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  401d4a:	0052      	lsls	r2, r2, #1
  401d4c:	eb43 0303 	adc.w	r3, r3, r3
  401d50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  401d54:	bf08      	it	eq
  401d56:	3d01      	subeq	r5, #1
  401d58:	d0f7      	beq.n	401d4a <__aeabi_dmul+0x1c6>
  401d5a:	ea43 0306 	orr.w	r3, r3, r6
  401d5e:	4770      	bx	lr
  401d60:	ea94 0f0c 	teq	r4, ip
  401d64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401d68:	bf18      	it	ne
  401d6a:	ea95 0f0c 	teqne	r5, ip
  401d6e:	d00c      	beq.n	401d8a <__aeabi_dmul+0x206>
  401d70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401d74:	bf18      	it	ne
  401d76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401d7a:	d1d1      	bne.n	401d20 <__aeabi_dmul+0x19c>
  401d7c:	ea81 0103 	eor.w	r1, r1, r3
  401d80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401d84:	f04f 0000 	mov.w	r0, #0
  401d88:	bd70      	pop	{r4, r5, r6, pc}
  401d8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401d8e:	bf06      	itte	eq
  401d90:	4610      	moveq	r0, r2
  401d92:	4619      	moveq	r1, r3
  401d94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401d98:	d019      	beq.n	401dce <__aeabi_dmul+0x24a>
  401d9a:	ea94 0f0c 	teq	r4, ip
  401d9e:	d102      	bne.n	401da6 <__aeabi_dmul+0x222>
  401da0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  401da4:	d113      	bne.n	401dce <__aeabi_dmul+0x24a>
  401da6:	ea95 0f0c 	teq	r5, ip
  401daa:	d105      	bne.n	401db8 <__aeabi_dmul+0x234>
  401dac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  401db0:	bf1c      	itt	ne
  401db2:	4610      	movne	r0, r2
  401db4:	4619      	movne	r1, r3
  401db6:	d10a      	bne.n	401dce <__aeabi_dmul+0x24a>
  401db8:	ea81 0103 	eor.w	r1, r1, r3
  401dbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401dc0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401dc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401dc8:	f04f 0000 	mov.w	r0, #0
  401dcc:	bd70      	pop	{r4, r5, r6, pc}
  401dce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401dd2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  401dd6:	bd70      	pop	{r4, r5, r6, pc}

00401dd8 <__aeabi_ddiv>:
  401dd8:	b570      	push	{r4, r5, r6, lr}
  401dda:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401dde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401de2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401de6:	bf1d      	ittte	ne
  401de8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401dec:	ea94 0f0c 	teqne	r4, ip
  401df0:	ea95 0f0c 	teqne	r5, ip
  401df4:	f000 f8a7 	bleq	401f46 <__aeabi_ddiv+0x16e>
  401df8:	eba4 0405 	sub.w	r4, r4, r5
  401dfc:	ea81 0e03 	eor.w	lr, r1, r3
  401e00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401e04:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401e08:	f000 8088 	beq.w	401f1c <__aeabi_ddiv+0x144>
  401e0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401e10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  401e14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  401e18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  401e1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  401e20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  401e24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  401e28:	ea4f 2600 	mov.w	r6, r0, lsl #8
  401e2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  401e30:	429d      	cmp	r5, r3
  401e32:	bf08      	it	eq
  401e34:	4296      	cmpeq	r6, r2
  401e36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  401e3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  401e3e:	d202      	bcs.n	401e46 <__aeabi_ddiv+0x6e>
  401e40:	085b      	lsrs	r3, r3, #1
  401e42:	ea4f 0232 	mov.w	r2, r2, rrx
  401e46:	1ab6      	subs	r6, r6, r2
  401e48:	eb65 0503 	sbc.w	r5, r5, r3
  401e4c:	085b      	lsrs	r3, r3, #1
  401e4e:	ea4f 0232 	mov.w	r2, r2, rrx
  401e52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  401e56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  401e5a:	ebb6 0e02 	subs.w	lr, r6, r2
  401e5e:	eb75 0e03 	sbcs.w	lr, r5, r3
  401e62:	bf22      	ittt	cs
  401e64:	1ab6      	subcs	r6, r6, r2
  401e66:	4675      	movcs	r5, lr
  401e68:	ea40 000c 	orrcs.w	r0, r0, ip
  401e6c:	085b      	lsrs	r3, r3, #1
  401e6e:	ea4f 0232 	mov.w	r2, r2, rrx
  401e72:	ebb6 0e02 	subs.w	lr, r6, r2
  401e76:	eb75 0e03 	sbcs.w	lr, r5, r3
  401e7a:	bf22      	ittt	cs
  401e7c:	1ab6      	subcs	r6, r6, r2
  401e7e:	4675      	movcs	r5, lr
  401e80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  401e84:	085b      	lsrs	r3, r3, #1
  401e86:	ea4f 0232 	mov.w	r2, r2, rrx
  401e8a:	ebb6 0e02 	subs.w	lr, r6, r2
  401e8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  401e92:	bf22      	ittt	cs
  401e94:	1ab6      	subcs	r6, r6, r2
  401e96:	4675      	movcs	r5, lr
  401e98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  401e9c:	085b      	lsrs	r3, r3, #1
  401e9e:	ea4f 0232 	mov.w	r2, r2, rrx
  401ea2:	ebb6 0e02 	subs.w	lr, r6, r2
  401ea6:	eb75 0e03 	sbcs.w	lr, r5, r3
  401eaa:	bf22      	ittt	cs
  401eac:	1ab6      	subcs	r6, r6, r2
  401eae:	4675      	movcs	r5, lr
  401eb0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  401eb4:	ea55 0e06 	orrs.w	lr, r5, r6
  401eb8:	d018      	beq.n	401eec <__aeabi_ddiv+0x114>
  401eba:	ea4f 1505 	mov.w	r5, r5, lsl #4
  401ebe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  401ec2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  401ec6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  401eca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  401ece:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  401ed2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  401ed6:	d1c0      	bne.n	401e5a <__aeabi_ddiv+0x82>
  401ed8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401edc:	d10b      	bne.n	401ef6 <__aeabi_ddiv+0x11e>
  401ede:	ea41 0100 	orr.w	r1, r1, r0
  401ee2:	f04f 0000 	mov.w	r0, #0
  401ee6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  401eea:	e7b6      	b.n	401e5a <__aeabi_ddiv+0x82>
  401eec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401ef0:	bf04      	itt	eq
  401ef2:	4301      	orreq	r1, r0
  401ef4:	2000      	moveq	r0, #0
  401ef6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401efa:	bf88      	it	hi
  401efc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401f00:	f63f aeaf 	bhi.w	401c62 <__aeabi_dmul+0xde>
  401f04:	ebb5 0c03 	subs.w	ip, r5, r3
  401f08:	bf04      	itt	eq
  401f0a:	ebb6 0c02 	subseq.w	ip, r6, r2
  401f0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401f12:	f150 0000 	adcs.w	r0, r0, #0
  401f16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401f1a:	bd70      	pop	{r4, r5, r6, pc}
  401f1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  401f20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  401f24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  401f28:	bfc2      	ittt	gt
  401f2a:	ebd4 050c 	rsbsgt	r5, r4, ip
  401f2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401f32:	bd70      	popgt	{r4, r5, r6, pc}
  401f34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401f38:	f04f 0e00 	mov.w	lr, #0
  401f3c:	3c01      	subs	r4, #1
  401f3e:	e690      	b.n	401c62 <__aeabi_dmul+0xde>
  401f40:	ea45 0e06 	orr.w	lr, r5, r6
  401f44:	e68d      	b.n	401c62 <__aeabi_dmul+0xde>
  401f46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401f4a:	ea94 0f0c 	teq	r4, ip
  401f4e:	bf08      	it	eq
  401f50:	ea95 0f0c 	teqeq	r5, ip
  401f54:	f43f af3b 	beq.w	401dce <__aeabi_dmul+0x24a>
  401f58:	ea94 0f0c 	teq	r4, ip
  401f5c:	d10a      	bne.n	401f74 <__aeabi_ddiv+0x19c>
  401f5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401f62:	f47f af34 	bne.w	401dce <__aeabi_dmul+0x24a>
  401f66:	ea95 0f0c 	teq	r5, ip
  401f6a:	f47f af25 	bne.w	401db8 <__aeabi_dmul+0x234>
  401f6e:	4610      	mov	r0, r2
  401f70:	4619      	mov	r1, r3
  401f72:	e72c      	b.n	401dce <__aeabi_dmul+0x24a>
  401f74:	ea95 0f0c 	teq	r5, ip
  401f78:	d106      	bne.n	401f88 <__aeabi_ddiv+0x1b0>
  401f7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401f7e:	f43f aefd 	beq.w	401d7c <__aeabi_dmul+0x1f8>
  401f82:	4610      	mov	r0, r2
  401f84:	4619      	mov	r1, r3
  401f86:	e722      	b.n	401dce <__aeabi_dmul+0x24a>
  401f88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401f8c:	bf18      	it	ne
  401f8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401f92:	f47f aec5 	bne.w	401d20 <__aeabi_dmul+0x19c>
  401f96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  401f9a:	f47f af0d 	bne.w	401db8 <__aeabi_dmul+0x234>
  401f9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  401fa2:	f47f aeeb 	bne.w	401d7c <__aeabi_dmul+0x1f8>
  401fa6:	e712      	b.n	401dce <__aeabi_dmul+0x24a>

00401fa8 <__gedf2>:
  401fa8:	f04f 3cff 	mov.w	ip, #4294967295
  401fac:	e006      	b.n	401fbc <__cmpdf2+0x4>
  401fae:	bf00      	nop

00401fb0 <__ledf2>:
  401fb0:	f04f 0c01 	mov.w	ip, #1
  401fb4:	e002      	b.n	401fbc <__cmpdf2+0x4>
  401fb6:	bf00      	nop

00401fb8 <__cmpdf2>:
  401fb8:	f04f 0c01 	mov.w	ip, #1
  401fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
  401fc0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  401fc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  401fc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  401fcc:	bf18      	it	ne
  401fce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  401fd2:	d01b      	beq.n	40200c <__cmpdf2+0x54>
  401fd4:	b001      	add	sp, #4
  401fd6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  401fda:	bf0c      	ite	eq
  401fdc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  401fe0:	ea91 0f03 	teqne	r1, r3
  401fe4:	bf02      	ittt	eq
  401fe6:	ea90 0f02 	teqeq	r0, r2
  401fea:	2000      	moveq	r0, #0
  401fec:	4770      	bxeq	lr
  401fee:	f110 0f00 	cmn.w	r0, #0
  401ff2:	ea91 0f03 	teq	r1, r3
  401ff6:	bf58      	it	pl
  401ff8:	4299      	cmppl	r1, r3
  401ffa:	bf08      	it	eq
  401ffc:	4290      	cmpeq	r0, r2
  401ffe:	bf2c      	ite	cs
  402000:	17d8      	asrcs	r0, r3, #31
  402002:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  402006:	f040 0001 	orr.w	r0, r0, #1
  40200a:	4770      	bx	lr
  40200c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402010:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402014:	d102      	bne.n	40201c <__cmpdf2+0x64>
  402016:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40201a:	d107      	bne.n	40202c <__cmpdf2+0x74>
  40201c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402020:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402024:	d1d6      	bne.n	401fd4 <__cmpdf2+0x1c>
  402026:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40202a:	d0d3      	beq.n	401fd4 <__cmpdf2+0x1c>
  40202c:	f85d 0b04 	ldr.w	r0, [sp], #4
  402030:	4770      	bx	lr
  402032:	bf00      	nop

00402034 <__aeabi_cdrcmple>:
  402034:	4684      	mov	ip, r0
  402036:	4610      	mov	r0, r2
  402038:	4662      	mov	r2, ip
  40203a:	468c      	mov	ip, r1
  40203c:	4619      	mov	r1, r3
  40203e:	4663      	mov	r3, ip
  402040:	e000      	b.n	402044 <__aeabi_cdcmpeq>
  402042:	bf00      	nop

00402044 <__aeabi_cdcmpeq>:
  402044:	b501      	push	{r0, lr}
  402046:	f7ff ffb7 	bl	401fb8 <__cmpdf2>
  40204a:	2800      	cmp	r0, #0
  40204c:	bf48      	it	mi
  40204e:	f110 0f00 	cmnmi.w	r0, #0
  402052:	bd01      	pop	{r0, pc}

00402054 <__aeabi_dcmpeq>:
  402054:	f84d ed08 	str.w	lr, [sp, #-8]!
  402058:	f7ff fff4 	bl	402044 <__aeabi_cdcmpeq>
  40205c:	bf0c      	ite	eq
  40205e:	2001      	moveq	r0, #1
  402060:	2000      	movne	r0, #0
  402062:	f85d fb08 	ldr.w	pc, [sp], #8
  402066:	bf00      	nop

00402068 <__aeabi_dcmplt>:
  402068:	f84d ed08 	str.w	lr, [sp, #-8]!
  40206c:	f7ff ffea 	bl	402044 <__aeabi_cdcmpeq>
  402070:	bf34      	ite	cc
  402072:	2001      	movcc	r0, #1
  402074:	2000      	movcs	r0, #0
  402076:	f85d fb08 	ldr.w	pc, [sp], #8
  40207a:	bf00      	nop

0040207c <__aeabi_dcmple>:
  40207c:	f84d ed08 	str.w	lr, [sp, #-8]!
  402080:	f7ff ffe0 	bl	402044 <__aeabi_cdcmpeq>
  402084:	bf94      	ite	ls
  402086:	2001      	movls	r0, #1
  402088:	2000      	movhi	r0, #0
  40208a:	f85d fb08 	ldr.w	pc, [sp], #8
  40208e:	bf00      	nop

00402090 <__aeabi_dcmpge>:
  402090:	f84d ed08 	str.w	lr, [sp, #-8]!
  402094:	f7ff ffce 	bl	402034 <__aeabi_cdrcmple>
  402098:	bf94      	ite	ls
  40209a:	2001      	movls	r0, #1
  40209c:	2000      	movhi	r0, #0
  40209e:	f85d fb08 	ldr.w	pc, [sp], #8
  4020a2:	bf00      	nop

004020a4 <__aeabi_dcmpgt>:
  4020a4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4020a8:	f7ff ffc4 	bl	402034 <__aeabi_cdrcmple>
  4020ac:	bf34      	ite	cc
  4020ae:	2001      	movcc	r0, #1
  4020b0:	2000      	movcs	r0, #0
  4020b2:	f85d fb08 	ldr.w	pc, [sp], #8
  4020b6:	bf00      	nop

004020b8 <__aeabi_d2iz>:
  4020b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4020bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4020c0:	d215      	bcs.n	4020ee <__aeabi_d2iz+0x36>
  4020c2:	d511      	bpl.n	4020e8 <__aeabi_d2iz+0x30>
  4020c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4020c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4020cc:	d912      	bls.n	4020f4 <__aeabi_d2iz+0x3c>
  4020ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4020d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4020d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4020da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4020de:	fa23 f002 	lsr.w	r0, r3, r2
  4020e2:	bf18      	it	ne
  4020e4:	4240      	negne	r0, r0
  4020e6:	4770      	bx	lr
  4020e8:	f04f 0000 	mov.w	r0, #0
  4020ec:	4770      	bx	lr
  4020ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4020f2:	d105      	bne.n	402100 <__aeabi_d2iz+0x48>
  4020f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4020f8:	bf08      	it	eq
  4020fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4020fe:	4770      	bx	lr
  402100:	f04f 0000 	mov.w	r0, #0
  402104:	4770      	bx	lr
  402106:	bf00      	nop

00402108 <__libc_init_array>:
  402108:	b570      	push	{r4, r5, r6, lr}
  40210a:	4e0d      	ldr	r6, [pc, #52]	; (402140 <__libc_init_array+0x38>)
  40210c:	4c0d      	ldr	r4, [pc, #52]	; (402144 <__libc_init_array+0x3c>)
  40210e:	1ba4      	subs	r4, r4, r6
  402110:	10a4      	asrs	r4, r4, #2
  402112:	2500      	movs	r5, #0
  402114:	42a5      	cmp	r5, r4
  402116:	d109      	bne.n	40212c <__libc_init_array+0x24>
  402118:	4e0b      	ldr	r6, [pc, #44]	; (402148 <__libc_init_array+0x40>)
  40211a:	4c0c      	ldr	r4, [pc, #48]	; (40214c <__libc_init_array+0x44>)
  40211c:	f002 ff40 	bl	404fa0 <_init>
  402120:	1ba4      	subs	r4, r4, r6
  402122:	10a4      	asrs	r4, r4, #2
  402124:	2500      	movs	r5, #0
  402126:	42a5      	cmp	r5, r4
  402128:	d105      	bne.n	402136 <__libc_init_array+0x2e>
  40212a:	bd70      	pop	{r4, r5, r6, pc}
  40212c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402130:	4798      	blx	r3
  402132:	3501      	adds	r5, #1
  402134:	e7ee      	b.n	402114 <__libc_init_array+0xc>
  402136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40213a:	4798      	blx	r3
  40213c:	3501      	adds	r5, #1
  40213e:	e7f2      	b.n	402126 <__libc_init_array+0x1e>
  402140:	00404fac 	.word	0x00404fac
  402144:	00404fac 	.word	0x00404fac
  402148:	00404fac 	.word	0x00404fac
  40214c:	00404fb0 	.word	0x00404fb0

00402150 <memcpy>:
  402150:	b510      	push	{r4, lr}
  402152:	1e43      	subs	r3, r0, #1
  402154:	440a      	add	r2, r1
  402156:	4291      	cmp	r1, r2
  402158:	d100      	bne.n	40215c <memcpy+0xc>
  40215a:	bd10      	pop	{r4, pc}
  40215c:	f811 4b01 	ldrb.w	r4, [r1], #1
  402160:	f803 4f01 	strb.w	r4, [r3, #1]!
  402164:	e7f7      	b.n	402156 <memcpy+0x6>

00402166 <memset>:
  402166:	4402      	add	r2, r0
  402168:	4603      	mov	r3, r0
  40216a:	4293      	cmp	r3, r2
  40216c:	d100      	bne.n	402170 <memset+0xa>
  40216e:	4770      	bx	lr
  402170:	f803 1b01 	strb.w	r1, [r3], #1
  402174:	e7f9      	b.n	40216a <memset+0x4>

00402176 <__cvt>:
  402176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40217a:	b088      	sub	sp, #32
  40217c:	2b00      	cmp	r3, #0
  40217e:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402180:	9912      	ldr	r1, [sp, #72]	; 0x48
  402182:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402184:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402188:	461e      	mov	r6, r3
  40218a:	f027 0720 	bic.w	r7, r7, #32
  40218e:	bfbb      	ittet	lt
  402190:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  402194:	461e      	movlt	r6, r3
  402196:	2300      	movge	r3, #0
  402198:	232d      	movlt	r3, #45	; 0x2d
  40219a:	2f46      	cmp	r7, #70	; 0x46
  40219c:	4614      	mov	r4, r2
  40219e:	700b      	strb	r3, [r1, #0]
  4021a0:	d004      	beq.n	4021ac <__cvt+0x36>
  4021a2:	2f45      	cmp	r7, #69	; 0x45
  4021a4:	d100      	bne.n	4021a8 <__cvt+0x32>
  4021a6:	3501      	adds	r5, #1
  4021a8:	2302      	movs	r3, #2
  4021aa:	e000      	b.n	4021ae <__cvt+0x38>
  4021ac:	2303      	movs	r3, #3
  4021ae:	aa07      	add	r2, sp, #28
  4021b0:	9204      	str	r2, [sp, #16]
  4021b2:	aa06      	add	r2, sp, #24
  4021b4:	9203      	str	r2, [sp, #12]
  4021b6:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  4021ba:	4622      	mov	r2, r4
  4021bc:	4633      	mov	r3, r6
  4021be:	f000 fd9b 	bl	402cf8 <_dtoa_r>
  4021c2:	2f47      	cmp	r7, #71	; 0x47
  4021c4:	4680      	mov	r8, r0
  4021c6:	d102      	bne.n	4021ce <__cvt+0x58>
  4021c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4021ca:	07db      	lsls	r3, r3, #31
  4021cc:	d526      	bpl.n	40221c <__cvt+0xa6>
  4021ce:	2f46      	cmp	r7, #70	; 0x46
  4021d0:	eb08 0905 	add.w	r9, r8, r5
  4021d4:	d111      	bne.n	4021fa <__cvt+0x84>
  4021d6:	f898 3000 	ldrb.w	r3, [r8]
  4021da:	2b30      	cmp	r3, #48	; 0x30
  4021dc:	d10a      	bne.n	4021f4 <__cvt+0x7e>
  4021de:	2200      	movs	r2, #0
  4021e0:	2300      	movs	r3, #0
  4021e2:	4620      	mov	r0, r4
  4021e4:	4631      	mov	r1, r6
  4021e6:	f7ff ff35 	bl	402054 <__aeabi_dcmpeq>
  4021ea:	b918      	cbnz	r0, 4021f4 <__cvt+0x7e>
  4021ec:	f1c5 0501 	rsb	r5, r5, #1
  4021f0:	f8ca 5000 	str.w	r5, [sl]
  4021f4:	f8da 3000 	ldr.w	r3, [sl]
  4021f8:	4499      	add	r9, r3
  4021fa:	2200      	movs	r2, #0
  4021fc:	2300      	movs	r3, #0
  4021fe:	4620      	mov	r0, r4
  402200:	4631      	mov	r1, r6
  402202:	f7ff ff27 	bl	402054 <__aeabi_dcmpeq>
  402206:	b938      	cbnz	r0, 402218 <__cvt+0xa2>
  402208:	2230      	movs	r2, #48	; 0x30
  40220a:	9b07      	ldr	r3, [sp, #28]
  40220c:	4599      	cmp	r9, r3
  40220e:	d905      	bls.n	40221c <__cvt+0xa6>
  402210:	1c59      	adds	r1, r3, #1
  402212:	9107      	str	r1, [sp, #28]
  402214:	701a      	strb	r2, [r3, #0]
  402216:	e7f8      	b.n	40220a <__cvt+0x94>
  402218:	f8cd 901c 	str.w	r9, [sp, #28]
  40221c:	9b07      	ldr	r3, [sp, #28]
  40221e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402220:	eba3 0308 	sub.w	r3, r3, r8
  402224:	4640      	mov	r0, r8
  402226:	6013      	str	r3, [r2, #0]
  402228:	b008      	add	sp, #32
  40222a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040222e <__exponent>:
  40222e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  402230:	4603      	mov	r3, r0
  402232:	2900      	cmp	r1, #0
  402234:	bfb8      	it	lt
  402236:	4249      	neglt	r1, r1
  402238:	f803 2b02 	strb.w	r2, [r3], #2
  40223c:	bfb4      	ite	lt
  40223e:	222d      	movlt	r2, #45	; 0x2d
  402240:	222b      	movge	r2, #43	; 0x2b
  402242:	2909      	cmp	r1, #9
  402244:	7042      	strb	r2, [r0, #1]
  402246:	dd20      	ble.n	40228a <__exponent+0x5c>
  402248:	f10d 0207 	add.w	r2, sp, #7
  40224c:	4617      	mov	r7, r2
  40224e:	260a      	movs	r6, #10
  402250:	fb91 f5f6 	sdiv	r5, r1, r6
  402254:	fb06 1115 	mls	r1, r6, r5, r1
  402258:	3130      	adds	r1, #48	; 0x30
  40225a:	2d09      	cmp	r5, #9
  40225c:	f802 1c01 	strb.w	r1, [r2, #-1]
  402260:	f102 34ff 	add.w	r4, r2, #4294967295
  402264:	4629      	mov	r1, r5
  402266:	dc09      	bgt.n	40227c <__exponent+0x4e>
  402268:	3130      	adds	r1, #48	; 0x30
  40226a:	3a02      	subs	r2, #2
  40226c:	f804 1c01 	strb.w	r1, [r4, #-1]
  402270:	42ba      	cmp	r2, r7
  402272:	461c      	mov	r4, r3
  402274:	d304      	bcc.n	402280 <__exponent+0x52>
  402276:	1a20      	subs	r0, r4, r0
  402278:	b003      	add	sp, #12
  40227a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40227c:	4622      	mov	r2, r4
  40227e:	e7e7      	b.n	402250 <__exponent+0x22>
  402280:	f812 1b01 	ldrb.w	r1, [r2], #1
  402284:	f803 1b01 	strb.w	r1, [r3], #1
  402288:	e7f2      	b.n	402270 <__exponent+0x42>
  40228a:	2230      	movs	r2, #48	; 0x30
  40228c:	461c      	mov	r4, r3
  40228e:	4411      	add	r1, r2
  402290:	f804 2b02 	strb.w	r2, [r4], #2
  402294:	7059      	strb	r1, [r3, #1]
  402296:	e7ee      	b.n	402276 <__exponent+0x48>

00402298 <_printf_float>:
  402298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40229c:	b091      	sub	sp, #68	; 0x44
  40229e:	460c      	mov	r4, r1
  4022a0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  4022a2:	4693      	mov	fp, r2
  4022a4:	461e      	mov	r6, r3
  4022a6:	4605      	mov	r5, r0
  4022a8:	f001 fc74 	bl	403b94 <_localeconv_r>
  4022ac:	6803      	ldr	r3, [r0, #0]
  4022ae:	9309      	str	r3, [sp, #36]	; 0x24
  4022b0:	4618      	mov	r0, r3
  4022b2:	f000 fc8d 	bl	402bd0 <strlen>
  4022b6:	2300      	movs	r3, #0
  4022b8:	930e      	str	r3, [sp, #56]	; 0x38
  4022ba:	683b      	ldr	r3, [r7, #0]
  4022bc:	900a      	str	r0, [sp, #40]	; 0x28
  4022be:	3307      	adds	r3, #7
  4022c0:	f023 0307 	bic.w	r3, r3, #7
  4022c4:	f103 0208 	add.w	r2, r3, #8
  4022c8:	f894 8018 	ldrb.w	r8, [r4, #24]
  4022cc:	f8d4 a000 	ldr.w	sl, [r4]
  4022d0:	603a      	str	r2, [r7, #0]
  4022d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  4022da:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  4022de:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  4022e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4022e4:	930b      	str	r3, [sp, #44]	; 0x2c
  4022e6:	f04f 32ff 	mov.w	r2, #4294967295
  4022ea:	4ba6      	ldr	r3, [pc, #664]	; (402584 <_printf_float+0x2ec>)
  4022ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4022ee:	4638      	mov	r0, r7
  4022f0:	f002 fb84 	bl	4049fc <__aeabi_dcmpun>
  4022f4:	2800      	cmp	r0, #0
  4022f6:	f040 81f7 	bne.w	4026e8 <_printf_float+0x450>
  4022fa:	f04f 32ff 	mov.w	r2, #4294967295
  4022fe:	4ba1      	ldr	r3, [pc, #644]	; (402584 <_printf_float+0x2ec>)
  402300:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402302:	4638      	mov	r0, r7
  402304:	f7ff feba 	bl	40207c <__aeabi_dcmple>
  402308:	2800      	cmp	r0, #0
  40230a:	f040 81ed 	bne.w	4026e8 <_printf_float+0x450>
  40230e:	2200      	movs	r2, #0
  402310:	2300      	movs	r3, #0
  402312:	4638      	mov	r0, r7
  402314:	4649      	mov	r1, r9
  402316:	f7ff fea7 	bl	402068 <__aeabi_dcmplt>
  40231a:	b110      	cbz	r0, 402322 <_printf_float+0x8a>
  40231c:	232d      	movs	r3, #45	; 0x2d
  40231e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402322:	4b99      	ldr	r3, [pc, #612]	; (402588 <_printf_float+0x2f0>)
  402324:	4f99      	ldr	r7, [pc, #612]	; (40258c <_printf_float+0x2f4>)
  402326:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40232a:	bf98      	it	ls
  40232c:	461f      	movls	r7, r3
  40232e:	2303      	movs	r3, #3
  402330:	6123      	str	r3, [r4, #16]
  402332:	f02a 0304 	bic.w	r3, sl, #4
  402336:	6023      	str	r3, [r4, #0]
  402338:	f04f 0900 	mov.w	r9, #0
  40233c:	9600      	str	r6, [sp, #0]
  40233e:	465b      	mov	r3, fp
  402340:	aa0f      	add	r2, sp, #60	; 0x3c
  402342:	4621      	mov	r1, r4
  402344:	4628      	mov	r0, r5
  402346:	f000 f9df 	bl	402708 <_printf_common>
  40234a:	3001      	adds	r0, #1
  40234c:	f040 809a 	bne.w	402484 <_printf_float+0x1ec>
  402350:	f04f 30ff 	mov.w	r0, #4294967295
  402354:	b011      	add	sp, #68	; 0x44
  402356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40235a:	6862      	ldr	r2, [r4, #4]
  40235c:	1c53      	adds	r3, r2, #1
  40235e:	a80e      	add	r0, sp, #56	; 0x38
  402360:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  402364:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  402368:	d141      	bne.n	4023ee <_printf_float+0x156>
  40236a:	2206      	movs	r2, #6
  40236c:	6062      	str	r2, [r4, #4]
  40236e:	6023      	str	r3, [r4, #0]
  402370:	2100      	movs	r1, #0
  402372:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  402376:	9301      	str	r3, [sp, #4]
  402378:	6863      	ldr	r3, [r4, #4]
  40237a:	9005      	str	r0, [sp, #20]
  40237c:	9202      	str	r2, [sp, #8]
  40237e:	9300      	str	r3, [sp, #0]
  402380:	463a      	mov	r2, r7
  402382:	464b      	mov	r3, r9
  402384:	9106      	str	r1, [sp, #24]
  402386:	f8cd 8010 	str.w	r8, [sp, #16]
  40238a:	f8cd e00c 	str.w	lr, [sp, #12]
  40238e:	4628      	mov	r0, r5
  402390:	f7ff fef1 	bl	402176 <__cvt>
  402394:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  402398:	2b47      	cmp	r3, #71	; 0x47
  40239a:	4607      	mov	r7, r0
  40239c:	d109      	bne.n	4023b2 <_printf_float+0x11a>
  40239e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4023a0:	1cd8      	adds	r0, r3, #3
  4023a2:	db02      	blt.n	4023aa <_printf_float+0x112>
  4023a4:	6862      	ldr	r2, [r4, #4]
  4023a6:	4293      	cmp	r3, r2
  4023a8:	dd59      	ble.n	40245e <_printf_float+0x1c6>
  4023aa:	f1a8 0802 	sub.w	r8, r8, #2
  4023ae:	fa5f f888 	uxtb.w	r8, r8
  4023b2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4023b6:	990d      	ldr	r1, [sp, #52]	; 0x34
  4023b8:	d836      	bhi.n	402428 <_printf_float+0x190>
  4023ba:	3901      	subs	r1, #1
  4023bc:	4642      	mov	r2, r8
  4023be:	f104 0050 	add.w	r0, r4, #80	; 0x50
  4023c2:	910d      	str	r1, [sp, #52]	; 0x34
  4023c4:	f7ff ff33 	bl	40222e <__exponent>
  4023c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4023ca:	1883      	adds	r3, r0, r2
  4023cc:	2a01      	cmp	r2, #1
  4023ce:	4681      	mov	r9, r0
  4023d0:	6123      	str	r3, [r4, #16]
  4023d2:	dc02      	bgt.n	4023da <_printf_float+0x142>
  4023d4:	6822      	ldr	r2, [r4, #0]
  4023d6:	07d1      	lsls	r1, r2, #31
  4023d8:	d501      	bpl.n	4023de <_printf_float+0x146>
  4023da:	3301      	adds	r3, #1
  4023dc:	6123      	str	r3, [r4, #16]
  4023de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  4023e2:	2b00      	cmp	r3, #0
  4023e4:	d0aa      	beq.n	40233c <_printf_float+0xa4>
  4023e6:	232d      	movs	r3, #45	; 0x2d
  4023e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4023ec:	e7a6      	b.n	40233c <_printf_float+0xa4>
  4023ee:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  4023f2:	d002      	beq.n	4023fa <_printf_float+0x162>
  4023f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4023f8:	d1b9      	bne.n	40236e <_printf_float+0xd6>
  4023fa:	b19a      	cbz	r2, 402424 <_printf_float+0x18c>
  4023fc:	2100      	movs	r1, #0
  4023fe:	9106      	str	r1, [sp, #24]
  402400:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  402404:	e88d 000c 	stmia.w	sp, {r2, r3}
  402408:	6023      	str	r3, [r4, #0]
  40240a:	9005      	str	r0, [sp, #20]
  40240c:	463a      	mov	r2, r7
  40240e:	f8cd 8010 	str.w	r8, [sp, #16]
  402412:	f8cd e00c 	str.w	lr, [sp, #12]
  402416:	9102      	str	r1, [sp, #8]
  402418:	464b      	mov	r3, r9
  40241a:	4628      	mov	r0, r5
  40241c:	f7ff feab 	bl	402176 <__cvt>
  402420:	4607      	mov	r7, r0
  402422:	e7bc      	b.n	40239e <_printf_float+0x106>
  402424:	2201      	movs	r2, #1
  402426:	e7a1      	b.n	40236c <_printf_float+0xd4>
  402428:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  40242c:	d119      	bne.n	402462 <_printf_float+0x1ca>
  40242e:	2900      	cmp	r1, #0
  402430:	6863      	ldr	r3, [r4, #4]
  402432:	dd0c      	ble.n	40244e <_printf_float+0x1b6>
  402434:	6121      	str	r1, [r4, #16]
  402436:	b913      	cbnz	r3, 40243e <_printf_float+0x1a6>
  402438:	6822      	ldr	r2, [r4, #0]
  40243a:	07d2      	lsls	r2, r2, #31
  40243c:	d502      	bpl.n	402444 <_printf_float+0x1ac>
  40243e:	3301      	adds	r3, #1
  402440:	440b      	add	r3, r1
  402442:	6123      	str	r3, [r4, #16]
  402444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402446:	65a3      	str	r3, [r4, #88]	; 0x58
  402448:	f04f 0900 	mov.w	r9, #0
  40244c:	e7c7      	b.n	4023de <_printf_float+0x146>
  40244e:	b913      	cbnz	r3, 402456 <_printf_float+0x1be>
  402450:	6822      	ldr	r2, [r4, #0]
  402452:	07d0      	lsls	r0, r2, #31
  402454:	d501      	bpl.n	40245a <_printf_float+0x1c2>
  402456:	3302      	adds	r3, #2
  402458:	e7f3      	b.n	402442 <_printf_float+0x1aa>
  40245a:	2301      	movs	r3, #1
  40245c:	e7f1      	b.n	402442 <_printf_float+0x1aa>
  40245e:	f04f 0867 	mov.w	r8, #103	; 0x67
  402462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402464:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402466:	4293      	cmp	r3, r2
  402468:	db05      	blt.n	402476 <_printf_float+0x1de>
  40246a:	6822      	ldr	r2, [r4, #0]
  40246c:	6123      	str	r3, [r4, #16]
  40246e:	07d1      	lsls	r1, r2, #31
  402470:	d5e8      	bpl.n	402444 <_printf_float+0x1ac>
  402472:	3301      	adds	r3, #1
  402474:	e7e5      	b.n	402442 <_printf_float+0x1aa>
  402476:	2b00      	cmp	r3, #0
  402478:	bfd4      	ite	le
  40247a:	f1c3 0302 	rsble	r3, r3, #2
  40247e:	2301      	movgt	r3, #1
  402480:	4413      	add	r3, r2
  402482:	e7de      	b.n	402442 <_printf_float+0x1aa>
  402484:	6823      	ldr	r3, [r4, #0]
  402486:	055a      	lsls	r2, r3, #21
  402488:	d407      	bmi.n	40249a <_printf_float+0x202>
  40248a:	6923      	ldr	r3, [r4, #16]
  40248c:	463a      	mov	r2, r7
  40248e:	4659      	mov	r1, fp
  402490:	4628      	mov	r0, r5
  402492:	47b0      	blx	r6
  402494:	3001      	adds	r0, #1
  402496:	d12a      	bne.n	4024ee <_printf_float+0x256>
  402498:	e75a      	b.n	402350 <_printf_float+0xb8>
  40249a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40249e:	f240 80dc 	bls.w	40265a <_printf_float+0x3c2>
  4024a2:	2200      	movs	r2, #0
  4024a4:	2300      	movs	r3, #0
  4024a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4024aa:	f7ff fdd3 	bl	402054 <__aeabi_dcmpeq>
  4024ae:	2800      	cmp	r0, #0
  4024b0:	d039      	beq.n	402526 <_printf_float+0x28e>
  4024b2:	2301      	movs	r3, #1
  4024b4:	4a36      	ldr	r2, [pc, #216]	; (402590 <_printf_float+0x2f8>)
  4024b6:	4659      	mov	r1, fp
  4024b8:	4628      	mov	r0, r5
  4024ba:	47b0      	blx	r6
  4024bc:	3001      	adds	r0, #1
  4024be:	f43f af47 	beq.w	402350 <_printf_float+0xb8>
  4024c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4024c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4024c6:	429a      	cmp	r2, r3
  4024c8:	db02      	blt.n	4024d0 <_printf_float+0x238>
  4024ca:	6823      	ldr	r3, [r4, #0]
  4024cc:	07d8      	lsls	r0, r3, #31
  4024ce:	d50e      	bpl.n	4024ee <_printf_float+0x256>
  4024d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4024d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4024d4:	4659      	mov	r1, fp
  4024d6:	4628      	mov	r0, r5
  4024d8:	47b0      	blx	r6
  4024da:	3001      	adds	r0, #1
  4024dc:	f43f af38 	beq.w	402350 <_printf_float+0xb8>
  4024e0:	2700      	movs	r7, #0
  4024e2:	f104 081a 	add.w	r8, r4, #26
  4024e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4024e8:	3b01      	subs	r3, #1
  4024ea:	429f      	cmp	r7, r3
  4024ec:	db11      	blt.n	402512 <_printf_float+0x27a>
  4024ee:	6823      	ldr	r3, [r4, #0]
  4024f0:	079f      	lsls	r7, r3, #30
  4024f2:	d508      	bpl.n	402506 <_printf_float+0x26e>
  4024f4:	2700      	movs	r7, #0
  4024f6:	f104 0819 	add.w	r8, r4, #25
  4024fa:	68e3      	ldr	r3, [r4, #12]
  4024fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4024fe:	1a9b      	subs	r3, r3, r2
  402500:	429f      	cmp	r7, r3
  402502:	f2c0 80e7 	blt.w	4026d4 <_printf_float+0x43c>
  402506:	68e0      	ldr	r0, [r4, #12]
  402508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40250a:	4298      	cmp	r0, r3
  40250c:	bfb8      	it	lt
  40250e:	4618      	movlt	r0, r3
  402510:	e720      	b.n	402354 <_printf_float+0xbc>
  402512:	2301      	movs	r3, #1
  402514:	4642      	mov	r2, r8
  402516:	4659      	mov	r1, fp
  402518:	4628      	mov	r0, r5
  40251a:	47b0      	blx	r6
  40251c:	3001      	adds	r0, #1
  40251e:	f43f af17 	beq.w	402350 <_printf_float+0xb8>
  402522:	3701      	adds	r7, #1
  402524:	e7df      	b.n	4024e6 <_printf_float+0x24e>
  402526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402528:	2b00      	cmp	r3, #0
  40252a:	dc33      	bgt.n	402594 <_printf_float+0x2fc>
  40252c:	2301      	movs	r3, #1
  40252e:	4a18      	ldr	r2, [pc, #96]	; (402590 <_printf_float+0x2f8>)
  402530:	4659      	mov	r1, fp
  402532:	4628      	mov	r0, r5
  402534:	47b0      	blx	r6
  402536:	3001      	adds	r0, #1
  402538:	f43f af0a 	beq.w	402350 <_printf_float+0xb8>
  40253c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40253e:	b923      	cbnz	r3, 40254a <_printf_float+0x2b2>
  402540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402542:	b913      	cbnz	r3, 40254a <_printf_float+0x2b2>
  402544:	6823      	ldr	r3, [r4, #0]
  402546:	07d9      	lsls	r1, r3, #31
  402548:	d5d1      	bpl.n	4024ee <_printf_float+0x256>
  40254a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40254c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40254e:	4659      	mov	r1, fp
  402550:	4628      	mov	r0, r5
  402552:	47b0      	blx	r6
  402554:	3001      	adds	r0, #1
  402556:	f43f aefb 	beq.w	402350 <_printf_float+0xb8>
  40255a:	f04f 0800 	mov.w	r8, #0
  40255e:	f104 091a 	add.w	r9, r4, #26
  402562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402564:	425b      	negs	r3, r3
  402566:	4598      	cmp	r8, r3
  402568:	db01      	blt.n	40256e <_printf_float+0x2d6>
  40256a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40256c:	e78e      	b.n	40248c <_printf_float+0x1f4>
  40256e:	2301      	movs	r3, #1
  402570:	464a      	mov	r2, r9
  402572:	4659      	mov	r1, fp
  402574:	4628      	mov	r0, r5
  402576:	47b0      	blx	r6
  402578:	3001      	adds	r0, #1
  40257a:	f43f aee9 	beq.w	402350 <_printf_float+0xb8>
  40257e:	f108 0801 	add.w	r8, r8, #1
  402582:	e7ee      	b.n	402562 <_printf_float+0x2ca>
  402584:	7fefffff 	.word	0x7fefffff
  402588:	00404ce4 	.word	0x00404ce4
  40258c:	00404ce8 	.word	0x00404ce8
  402590:	00404cf4 	.word	0x00404cf4
  402594:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402596:	6da3      	ldr	r3, [r4, #88]	; 0x58
  402598:	429a      	cmp	r2, r3
  40259a:	bfa8      	it	ge
  40259c:	461a      	movge	r2, r3
  40259e:	2a00      	cmp	r2, #0
  4025a0:	4690      	mov	r8, r2
  4025a2:	dc36      	bgt.n	402612 <_printf_float+0x37a>
  4025a4:	f104 031a 	add.w	r3, r4, #26
  4025a8:	f04f 0a00 	mov.w	sl, #0
  4025ac:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4025b0:	930b      	str	r3, [sp, #44]	; 0x2c
  4025b2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  4025b6:	eba9 0308 	sub.w	r3, r9, r8
  4025ba:	459a      	cmp	sl, r3
  4025bc:	db31      	blt.n	402622 <_printf_float+0x38a>
  4025be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4025c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4025c2:	429a      	cmp	r2, r3
  4025c4:	db38      	blt.n	402638 <_printf_float+0x3a0>
  4025c6:	6823      	ldr	r3, [r4, #0]
  4025c8:	07da      	lsls	r2, r3, #31
  4025ca:	d435      	bmi.n	402638 <_printf_float+0x3a0>
  4025cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4025ce:	990d      	ldr	r1, [sp, #52]	; 0x34
  4025d0:	eba3 0209 	sub.w	r2, r3, r9
  4025d4:	eba3 0801 	sub.w	r8, r3, r1
  4025d8:	4590      	cmp	r8, r2
  4025da:	bfa8      	it	ge
  4025dc:	4690      	movge	r8, r2
  4025de:	f1b8 0f00 	cmp.w	r8, #0
  4025e2:	dc31      	bgt.n	402648 <_printf_float+0x3b0>
  4025e4:	2700      	movs	r7, #0
  4025e6:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4025ea:	f104 091a 	add.w	r9, r4, #26
  4025ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4025f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4025f2:	1a9b      	subs	r3, r3, r2
  4025f4:	eba3 0308 	sub.w	r3, r3, r8
  4025f8:	429f      	cmp	r7, r3
  4025fa:	f6bf af78 	bge.w	4024ee <_printf_float+0x256>
  4025fe:	2301      	movs	r3, #1
  402600:	464a      	mov	r2, r9
  402602:	4659      	mov	r1, fp
  402604:	4628      	mov	r0, r5
  402606:	47b0      	blx	r6
  402608:	3001      	adds	r0, #1
  40260a:	f43f aea1 	beq.w	402350 <_printf_float+0xb8>
  40260e:	3701      	adds	r7, #1
  402610:	e7ed      	b.n	4025ee <_printf_float+0x356>
  402612:	4613      	mov	r3, r2
  402614:	4659      	mov	r1, fp
  402616:	463a      	mov	r2, r7
  402618:	4628      	mov	r0, r5
  40261a:	47b0      	blx	r6
  40261c:	3001      	adds	r0, #1
  40261e:	d1c1      	bne.n	4025a4 <_printf_float+0x30c>
  402620:	e696      	b.n	402350 <_printf_float+0xb8>
  402622:	2301      	movs	r3, #1
  402624:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402626:	4659      	mov	r1, fp
  402628:	4628      	mov	r0, r5
  40262a:	47b0      	blx	r6
  40262c:	3001      	adds	r0, #1
  40262e:	f43f ae8f 	beq.w	402350 <_printf_float+0xb8>
  402632:	f10a 0a01 	add.w	sl, sl, #1
  402636:	e7bc      	b.n	4025b2 <_printf_float+0x31a>
  402638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40263a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40263c:	4659      	mov	r1, fp
  40263e:	4628      	mov	r0, r5
  402640:	47b0      	blx	r6
  402642:	3001      	adds	r0, #1
  402644:	d1c2      	bne.n	4025cc <_printf_float+0x334>
  402646:	e683      	b.n	402350 <_printf_float+0xb8>
  402648:	4643      	mov	r3, r8
  40264a:	eb07 0209 	add.w	r2, r7, r9
  40264e:	4659      	mov	r1, fp
  402650:	4628      	mov	r0, r5
  402652:	47b0      	blx	r6
  402654:	3001      	adds	r0, #1
  402656:	d1c5      	bne.n	4025e4 <_printf_float+0x34c>
  402658:	e67a      	b.n	402350 <_printf_float+0xb8>
  40265a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40265c:	2a01      	cmp	r2, #1
  40265e:	dc01      	bgt.n	402664 <_printf_float+0x3cc>
  402660:	07db      	lsls	r3, r3, #31
  402662:	d534      	bpl.n	4026ce <_printf_float+0x436>
  402664:	2301      	movs	r3, #1
  402666:	463a      	mov	r2, r7
  402668:	4659      	mov	r1, fp
  40266a:	4628      	mov	r0, r5
  40266c:	47b0      	blx	r6
  40266e:	3001      	adds	r0, #1
  402670:	f43f ae6e 	beq.w	402350 <_printf_float+0xb8>
  402674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402676:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402678:	4659      	mov	r1, fp
  40267a:	4628      	mov	r0, r5
  40267c:	47b0      	blx	r6
  40267e:	3001      	adds	r0, #1
  402680:	f43f ae66 	beq.w	402350 <_printf_float+0xb8>
  402684:	2200      	movs	r2, #0
  402686:	2300      	movs	r3, #0
  402688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40268c:	f7ff fce2 	bl	402054 <__aeabi_dcmpeq>
  402690:	b150      	cbz	r0, 4026a8 <_printf_float+0x410>
  402692:	2700      	movs	r7, #0
  402694:	f104 081a 	add.w	r8, r4, #26
  402698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40269a:	3b01      	subs	r3, #1
  40269c:	429f      	cmp	r7, r3
  40269e:	db0c      	blt.n	4026ba <_printf_float+0x422>
  4026a0:	464b      	mov	r3, r9
  4026a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
  4026a6:	e6f2      	b.n	40248e <_printf_float+0x1f6>
  4026a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4026aa:	1c7a      	adds	r2, r7, #1
  4026ac:	3b01      	subs	r3, #1
  4026ae:	4659      	mov	r1, fp
  4026b0:	4628      	mov	r0, r5
  4026b2:	47b0      	blx	r6
  4026b4:	3001      	adds	r0, #1
  4026b6:	d1f3      	bne.n	4026a0 <_printf_float+0x408>
  4026b8:	e64a      	b.n	402350 <_printf_float+0xb8>
  4026ba:	2301      	movs	r3, #1
  4026bc:	4642      	mov	r2, r8
  4026be:	4659      	mov	r1, fp
  4026c0:	4628      	mov	r0, r5
  4026c2:	47b0      	blx	r6
  4026c4:	3001      	adds	r0, #1
  4026c6:	f43f ae43 	beq.w	402350 <_printf_float+0xb8>
  4026ca:	3701      	adds	r7, #1
  4026cc:	e7e4      	b.n	402698 <_printf_float+0x400>
  4026ce:	2301      	movs	r3, #1
  4026d0:	463a      	mov	r2, r7
  4026d2:	e7ec      	b.n	4026ae <_printf_float+0x416>
  4026d4:	2301      	movs	r3, #1
  4026d6:	4642      	mov	r2, r8
  4026d8:	4659      	mov	r1, fp
  4026da:	4628      	mov	r0, r5
  4026dc:	47b0      	blx	r6
  4026de:	3001      	adds	r0, #1
  4026e0:	f43f ae36 	beq.w	402350 <_printf_float+0xb8>
  4026e4:	3701      	adds	r7, #1
  4026e6:	e708      	b.n	4024fa <_printf_float+0x262>
  4026e8:	463a      	mov	r2, r7
  4026ea:	464b      	mov	r3, r9
  4026ec:	4638      	mov	r0, r7
  4026ee:	4649      	mov	r1, r9
  4026f0:	f002 f984 	bl	4049fc <__aeabi_dcmpun>
  4026f4:	2800      	cmp	r0, #0
  4026f6:	f43f ae30 	beq.w	40235a <_printf_float+0xc2>
  4026fa:	4b01      	ldr	r3, [pc, #4]	; (402700 <_printf_float+0x468>)
  4026fc:	4f01      	ldr	r7, [pc, #4]	; (402704 <_printf_float+0x46c>)
  4026fe:	e612      	b.n	402326 <_printf_float+0x8e>
  402700:	00404cec 	.word	0x00404cec
  402704:	00404cf0 	.word	0x00404cf0

00402708 <_printf_common>:
  402708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40270c:	4691      	mov	r9, r2
  40270e:	461f      	mov	r7, r3
  402710:	688a      	ldr	r2, [r1, #8]
  402712:	690b      	ldr	r3, [r1, #16]
  402714:	f8dd 8020 	ldr.w	r8, [sp, #32]
  402718:	4293      	cmp	r3, r2
  40271a:	bfb8      	it	lt
  40271c:	4613      	movlt	r3, r2
  40271e:	f8c9 3000 	str.w	r3, [r9]
  402722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  402726:	4606      	mov	r6, r0
  402728:	460c      	mov	r4, r1
  40272a:	b112      	cbz	r2, 402732 <_printf_common+0x2a>
  40272c:	3301      	adds	r3, #1
  40272e:	f8c9 3000 	str.w	r3, [r9]
  402732:	6823      	ldr	r3, [r4, #0]
  402734:	0699      	lsls	r1, r3, #26
  402736:	bf42      	ittt	mi
  402738:	f8d9 3000 	ldrmi.w	r3, [r9]
  40273c:	3302      	addmi	r3, #2
  40273e:	f8c9 3000 	strmi.w	r3, [r9]
  402742:	6825      	ldr	r5, [r4, #0]
  402744:	f015 0506 	ands.w	r5, r5, #6
  402748:	d107      	bne.n	40275a <_printf_common+0x52>
  40274a:	f104 0a19 	add.w	sl, r4, #25
  40274e:	68e3      	ldr	r3, [r4, #12]
  402750:	f8d9 2000 	ldr.w	r2, [r9]
  402754:	1a9b      	subs	r3, r3, r2
  402756:	429d      	cmp	r5, r3
  402758:	db29      	blt.n	4027ae <_printf_common+0xa6>
  40275a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  40275e:	6822      	ldr	r2, [r4, #0]
  402760:	3300      	adds	r3, #0
  402762:	bf18      	it	ne
  402764:	2301      	movne	r3, #1
  402766:	0692      	lsls	r2, r2, #26
  402768:	d42e      	bmi.n	4027c8 <_printf_common+0xc0>
  40276a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40276e:	4639      	mov	r1, r7
  402770:	4630      	mov	r0, r6
  402772:	47c0      	blx	r8
  402774:	3001      	adds	r0, #1
  402776:	d021      	beq.n	4027bc <_printf_common+0xb4>
  402778:	6823      	ldr	r3, [r4, #0]
  40277a:	68e5      	ldr	r5, [r4, #12]
  40277c:	f8d9 2000 	ldr.w	r2, [r9]
  402780:	f003 0306 	and.w	r3, r3, #6
  402784:	2b04      	cmp	r3, #4
  402786:	bf08      	it	eq
  402788:	1aad      	subeq	r5, r5, r2
  40278a:	68a3      	ldr	r3, [r4, #8]
  40278c:	6922      	ldr	r2, [r4, #16]
  40278e:	bf0c      	ite	eq
  402790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  402794:	2500      	movne	r5, #0
  402796:	4293      	cmp	r3, r2
  402798:	bfc4      	itt	gt
  40279a:	1a9b      	subgt	r3, r3, r2
  40279c:	18ed      	addgt	r5, r5, r3
  40279e:	f04f 0900 	mov.w	r9, #0
  4027a2:	341a      	adds	r4, #26
  4027a4:	454d      	cmp	r5, r9
  4027a6:	d11b      	bne.n	4027e0 <_printf_common+0xd8>
  4027a8:	2000      	movs	r0, #0
  4027aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4027ae:	2301      	movs	r3, #1
  4027b0:	4652      	mov	r2, sl
  4027b2:	4639      	mov	r1, r7
  4027b4:	4630      	mov	r0, r6
  4027b6:	47c0      	blx	r8
  4027b8:	3001      	adds	r0, #1
  4027ba:	d103      	bne.n	4027c4 <_printf_common+0xbc>
  4027bc:	f04f 30ff 	mov.w	r0, #4294967295
  4027c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4027c4:	3501      	adds	r5, #1
  4027c6:	e7c2      	b.n	40274e <_printf_common+0x46>
  4027c8:	18e1      	adds	r1, r4, r3
  4027ca:	1c5a      	adds	r2, r3, #1
  4027cc:	2030      	movs	r0, #48	; 0x30
  4027ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4027d2:	4422      	add	r2, r4
  4027d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4027d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4027dc:	3302      	adds	r3, #2
  4027de:	e7c4      	b.n	40276a <_printf_common+0x62>
  4027e0:	2301      	movs	r3, #1
  4027e2:	4622      	mov	r2, r4
  4027e4:	4639      	mov	r1, r7
  4027e6:	4630      	mov	r0, r6
  4027e8:	47c0      	blx	r8
  4027ea:	3001      	adds	r0, #1
  4027ec:	d0e6      	beq.n	4027bc <_printf_common+0xb4>
  4027ee:	f109 0901 	add.w	r9, r9, #1
  4027f2:	e7d7      	b.n	4027a4 <_printf_common+0x9c>

004027f4 <_printf_i>:
  4027f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4027f8:	4617      	mov	r7, r2
  4027fa:	7e0a      	ldrb	r2, [r1, #24]
  4027fc:	b085      	sub	sp, #20
  4027fe:	2a6e      	cmp	r2, #110	; 0x6e
  402800:	4698      	mov	r8, r3
  402802:	4606      	mov	r6, r0
  402804:	460c      	mov	r4, r1
  402806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402808:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  40280c:	f000 80bc 	beq.w	402988 <_printf_i+0x194>
  402810:	d81a      	bhi.n	402848 <_printf_i+0x54>
  402812:	2a63      	cmp	r2, #99	; 0x63
  402814:	d02e      	beq.n	402874 <_printf_i+0x80>
  402816:	d80a      	bhi.n	40282e <_printf_i+0x3a>
  402818:	2a00      	cmp	r2, #0
  40281a:	f000 80c8 	beq.w	4029ae <_printf_i+0x1ba>
  40281e:	2a58      	cmp	r2, #88	; 0x58
  402820:	f000 808a 	beq.w	402938 <_printf_i+0x144>
  402824:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402828:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  40282c:	e02a      	b.n	402884 <_printf_i+0x90>
  40282e:	2a64      	cmp	r2, #100	; 0x64
  402830:	d001      	beq.n	402836 <_printf_i+0x42>
  402832:	2a69      	cmp	r2, #105	; 0x69
  402834:	d1f6      	bne.n	402824 <_printf_i+0x30>
  402836:	6821      	ldr	r1, [r4, #0]
  402838:	681a      	ldr	r2, [r3, #0]
  40283a:	f011 0f80 	tst.w	r1, #128	; 0x80
  40283e:	d023      	beq.n	402888 <_printf_i+0x94>
  402840:	1d11      	adds	r1, r2, #4
  402842:	6019      	str	r1, [r3, #0]
  402844:	6813      	ldr	r3, [r2, #0]
  402846:	e027      	b.n	402898 <_printf_i+0xa4>
  402848:	2a73      	cmp	r2, #115	; 0x73
  40284a:	f000 80b4 	beq.w	4029b6 <_printf_i+0x1c2>
  40284e:	d808      	bhi.n	402862 <_printf_i+0x6e>
  402850:	2a6f      	cmp	r2, #111	; 0x6f
  402852:	d02a      	beq.n	4028aa <_printf_i+0xb6>
  402854:	2a70      	cmp	r2, #112	; 0x70
  402856:	d1e5      	bne.n	402824 <_printf_i+0x30>
  402858:	680a      	ldr	r2, [r1, #0]
  40285a:	f042 0220 	orr.w	r2, r2, #32
  40285e:	600a      	str	r2, [r1, #0]
  402860:	e003      	b.n	40286a <_printf_i+0x76>
  402862:	2a75      	cmp	r2, #117	; 0x75
  402864:	d021      	beq.n	4028aa <_printf_i+0xb6>
  402866:	2a78      	cmp	r2, #120	; 0x78
  402868:	d1dc      	bne.n	402824 <_printf_i+0x30>
  40286a:	2278      	movs	r2, #120	; 0x78
  40286c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  402870:	496e      	ldr	r1, [pc, #440]	; (402a2c <_printf_i+0x238>)
  402872:	e064      	b.n	40293e <_printf_i+0x14a>
  402874:	681a      	ldr	r2, [r3, #0]
  402876:	f101 0542 	add.w	r5, r1, #66	; 0x42
  40287a:	1d11      	adds	r1, r2, #4
  40287c:	6019      	str	r1, [r3, #0]
  40287e:	6813      	ldr	r3, [r2, #0]
  402880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402884:	2301      	movs	r3, #1
  402886:	e0a3      	b.n	4029d0 <_printf_i+0x1dc>
  402888:	f011 0f40 	tst.w	r1, #64	; 0x40
  40288c:	f102 0104 	add.w	r1, r2, #4
  402890:	6019      	str	r1, [r3, #0]
  402892:	d0d7      	beq.n	402844 <_printf_i+0x50>
  402894:	f9b2 3000 	ldrsh.w	r3, [r2]
  402898:	2b00      	cmp	r3, #0
  40289a:	da03      	bge.n	4028a4 <_printf_i+0xb0>
  40289c:	222d      	movs	r2, #45	; 0x2d
  40289e:	425b      	negs	r3, r3
  4028a0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  4028a4:	4962      	ldr	r1, [pc, #392]	; (402a30 <_printf_i+0x23c>)
  4028a6:	220a      	movs	r2, #10
  4028a8:	e017      	b.n	4028da <_printf_i+0xe6>
  4028aa:	6820      	ldr	r0, [r4, #0]
  4028ac:	6819      	ldr	r1, [r3, #0]
  4028ae:	f010 0f80 	tst.w	r0, #128	; 0x80
  4028b2:	d003      	beq.n	4028bc <_printf_i+0xc8>
  4028b4:	1d08      	adds	r0, r1, #4
  4028b6:	6018      	str	r0, [r3, #0]
  4028b8:	680b      	ldr	r3, [r1, #0]
  4028ba:	e006      	b.n	4028ca <_printf_i+0xd6>
  4028bc:	f010 0f40 	tst.w	r0, #64	; 0x40
  4028c0:	f101 0004 	add.w	r0, r1, #4
  4028c4:	6018      	str	r0, [r3, #0]
  4028c6:	d0f7      	beq.n	4028b8 <_printf_i+0xc4>
  4028c8:	880b      	ldrh	r3, [r1, #0]
  4028ca:	4959      	ldr	r1, [pc, #356]	; (402a30 <_printf_i+0x23c>)
  4028cc:	2a6f      	cmp	r2, #111	; 0x6f
  4028ce:	bf14      	ite	ne
  4028d0:	220a      	movne	r2, #10
  4028d2:	2208      	moveq	r2, #8
  4028d4:	2000      	movs	r0, #0
  4028d6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  4028da:	6865      	ldr	r5, [r4, #4]
  4028dc:	60a5      	str	r5, [r4, #8]
  4028de:	2d00      	cmp	r5, #0
  4028e0:	f2c0 809c 	blt.w	402a1c <_printf_i+0x228>
  4028e4:	6820      	ldr	r0, [r4, #0]
  4028e6:	f020 0004 	bic.w	r0, r0, #4
  4028ea:	6020      	str	r0, [r4, #0]
  4028ec:	2b00      	cmp	r3, #0
  4028ee:	d13f      	bne.n	402970 <_printf_i+0x17c>
  4028f0:	2d00      	cmp	r5, #0
  4028f2:	f040 8095 	bne.w	402a20 <_printf_i+0x22c>
  4028f6:	4675      	mov	r5, lr
  4028f8:	2a08      	cmp	r2, #8
  4028fa:	d10b      	bne.n	402914 <_printf_i+0x120>
  4028fc:	6823      	ldr	r3, [r4, #0]
  4028fe:	07da      	lsls	r2, r3, #31
  402900:	d508      	bpl.n	402914 <_printf_i+0x120>
  402902:	6923      	ldr	r3, [r4, #16]
  402904:	6862      	ldr	r2, [r4, #4]
  402906:	429a      	cmp	r2, r3
  402908:	bfde      	ittt	le
  40290a:	2330      	movle	r3, #48	; 0x30
  40290c:	f805 3c01 	strble.w	r3, [r5, #-1]
  402910:	f105 35ff 	addle.w	r5, r5, #4294967295
  402914:	ebae 0305 	sub.w	r3, lr, r5
  402918:	6123      	str	r3, [r4, #16]
  40291a:	f8cd 8000 	str.w	r8, [sp]
  40291e:	463b      	mov	r3, r7
  402920:	aa03      	add	r2, sp, #12
  402922:	4621      	mov	r1, r4
  402924:	4630      	mov	r0, r6
  402926:	f7ff feef 	bl	402708 <_printf_common>
  40292a:	3001      	adds	r0, #1
  40292c:	d155      	bne.n	4029da <_printf_i+0x1e6>
  40292e:	f04f 30ff 	mov.w	r0, #4294967295
  402932:	b005      	add	sp, #20
  402934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402938:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  40293c:	493c      	ldr	r1, [pc, #240]	; (402a30 <_printf_i+0x23c>)
  40293e:	6822      	ldr	r2, [r4, #0]
  402940:	6818      	ldr	r0, [r3, #0]
  402942:	f012 0f80 	tst.w	r2, #128	; 0x80
  402946:	f100 0504 	add.w	r5, r0, #4
  40294a:	601d      	str	r5, [r3, #0]
  40294c:	d001      	beq.n	402952 <_printf_i+0x15e>
  40294e:	6803      	ldr	r3, [r0, #0]
  402950:	e002      	b.n	402958 <_printf_i+0x164>
  402952:	0655      	lsls	r5, r2, #25
  402954:	d5fb      	bpl.n	40294e <_printf_i+0x15a>
  402956:	8803      	ldrh	r3, [r0, #0]
  402958:	07d0      	lsls	r0, r2, #31
  40295a:	bf44      	itt	mi
  40295c:	f042 0220 	orrmi.w	r2, r2, #32
  402960:	6022      	strmi	r2, [r4, #0]
  402962:	b91b      	cbnz	r3, 40296c <_printf_i+0x178>
  402964:	6822      	ldr	r2, [r4, #0]
  402966:	f022 0220 	bic.w	r2, r2, #32
  40296a:	6022      	str	r2, [r4, #0]
  40296c:	2210      	movs	r2, #16
  40296e:	e7b1      	b.n	4028d4 <_printf_i+0xe0>
  402970:	4675      	mov	r5, lr
  402972:	fbb3 f0f2 	udiv	r0, r3, r2
  402976:	fb02 3310 	mls	r3, r2, r0, r3
  40297a:	5ccb      	ldrb	r3, [r1, r3]
  40297c:	f805 3d01 	strb.w	r3, [r5, #-1]!
  402980:	4603      	mov	r3, r0
  402982:	2800      	cmp	r0, #0
  402984:	d1f5      	bne.n	402972 <_printf_i+0x17e>
  402986:	e7b7      	b.n	4028f8 <_printf_i+0x104>
  402988:	6808      	ldr	r0, [r1, #0]
  40298a:	681a      	ldr	r2, [r3, #0]
  40298c:	6949      	ldr	r1, [r1, #20]
  40298e:	f010 0f80 	tst.w	r0, #128	; 0x80
  402992:	d004      	beq.n	40299e <_printf_i+0x1aa>
  402994:	1d10      	adds	r0, r2, #4
  402996:	6018      	str	r0, [r3, #0]
  402998:	6813      	ldr	r3, [r2, #0]
  40299a:	6019      	str	r1, [r3, #0]
  40299c:	e007      	b.n	4029ae <_printf_i+0x1ba>
  40299e:	f010 0f40 	tst.w	r0, #64	; 0x40
  4029a2:	f102 0004 	add.w	r0, r2, #4
  4029a6:	6018      	str	r0, [r3, #0]
  4029a8:	6813      	ldr	r3, [r2, #0]
  4029aa:	d0f6      	beq.n	40299a <_printf_i+0x1a6>
  4029ac:	8019      	strh	r1, [r3, #0]
  4029ae:	2300      	movs	r3, #0
  4029b0:	6123      	str	r3, [r4, #16]
  4029b2:	4675      	mov	r5, lr
  4029b4:	e7b1      	b.n	40291a <_printf_i+0x126>
  4029b6:	681a      	ldr	r2, [r3, #0]
  4029b8:	1d11      	adds	r1, r2, #4
  4029ba:	6019      	str	r1, [r3, #0]
  4029bc:	6815      	ldr	r5, [r2, #0]
  4029be:	6862      	ldr	r2, [r4, #4]
  4029c0:	2100      	movs	r1, #0
  4029c2:	4628      	mov	r0, r5
  4029c4:	f001 f964 	bl	403c90 <memchr>
  4029c8:	b108      	cbz	r0, 4029ce <_printf_i+0x1da>
  4029ca:	1b40      	subs	r0, r0, r5
  4029cc:	6060      	str	r0, [r4, #4]
  4029ce:	6863      	ldr	r3, [r4, #4]
  4029d0:	6123      	str	r3, [r4, #16]
  4029d2:	2300      	movs	r3, #0
  4029d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4029d8:	e79f      	b.n	40291a <_printf_i+0x126>
  4029da:	6923      	ldr	r3, [r4, #16]
  4029dc:	462a      	mov	r2, r5
  4029de:	4639      	mov	r1, r7
  4029e0:	4630      	mov	r0, r6
  4029e2:	47c0      	blx	r8
  4029e4:	3001      	adds	r0, #1
  4029e6:	d0a2      	beq.n	40292e <_printf_i+0x13a>
  4029e8:	6823      	ldr	r3, [r4, #0]
  4029ea:	079b      	lsls	r3, r3, #30
  4029ec:	d507      	bpl.n	4029fe <_printf_i+0x20a>
  4029ee:	2500      	movs	r5, #0
  4029f0:	f104 0919 	add.w	r9, r4, #25
  4029f4:	68e3      	ldr	r3, [r4, #12]
  4029f6:	9a03      	ldr	r2, [sp, #12]
  4029f8:	1a9b      	subs	r3, r3, r2
  4029fa:	429d      	cmp	r5, r3
  4029fc:	db05      	blt.n	402a0a <_printf_i+0x216>
  4029fe:	68e0      	ldr	r0, [r4, #12]
  402a00:	9b03      	ldr	r3, [sp, #12]
  402a02:	4298      	cmp	r0, r3
  402a04:	bfb8      	it	lt
  402a06:	4618      	movlt	r0, r3
  402a08:	e793      	b.n	402932 <_printf_i+0x13e>
  402a0a:	2301      	movs	r3, #1
  402a0c:	464a      	mov	r2, r9
  402a0e:	4639      	mov	r1, r7
  402a10:	4630      	mov	r0, r6
  402a12:	47c0      	blx	r8
  402a14:	3001      	adds	r0, #1
  402a16:	d08a      	beq.n	40292e <_printf_i+0x13a>
  402a18:	3501      	adds	r5, #1
  402a1a:	e7eb      	b.n	4029f4 <_printf_i+0x200>
  402a1c:	2b00      	cmp	r3, #0
  402a1e:	d1a7      	bne.n	402970 <_printf_i+0x17c>
  402a20:	780b      	ldrb	r3, [r1, #0]
  402a22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402a26:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402a2a:	e765      	b.n	4028f8 <_printf_i+0x104>
  402a2c:	00404d07 	.word	0x00404d07
  402a30:	00404cf6 	.word	0x00404cf6

00402a34 <iprintf>:
  402a34:	b40f      	push	{r0, r1, r2, r3}
  402a36:	4b0a      	ldr	r3, [pc, #40]	; (402a60 <iprintf+0x2c>)
  402a38:	b513      	push	{r0, r1, r4, lr}
  402a3a:	681c      	ldr	r4, [r3, #0]
  402a3c:	b124      	cbz	r4, 402a48 <iprintf+0x14>
  402a3e:	69a3      	ldr	r3, [r4, #24]
  402a40:	b913      	cbnz	r3, 402a48 <iprintf+0x14>
  402a42:	4620      	mov	r0, r4
  402a44:	f001 f81c 	bl	403a80 <__sinit>
  402a48:	ab05      	add	r3, sp, #20
  402a4a:	9a04      	ldr	r2, [sp, #16]
  402a4c:	68a1      	ldr	r1, [r4, #8]
  402a4e:	9301      	str	r3, [sp, #4]
  402a50:	4620      	mov	r0, r4
  402a52:	f001 fd1f 	bl	404494 <_vfiprintf_r>
  402a56:	b002      	add	sp, #8
  402a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402a5c:	b004      	add	sp, #16
  402a5e:	4770      	bx	lr
  402a60:	20400014 	.word	0x20400014

00402a64 <setbuf>:
  402a64:	2900      	cmp	r1, #0
  402a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402a6a:	bf0c      	ite	eq
  402a6c:	2202      	moveq	r2, #2
  402a6e:	2200      	movne	r2, #0
  402a70:	f000 b800 	b.w	402a74 <setvbuf>

00402a74 <setvbuf>:
  402a74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  402a78:	461d      	mov	r5, r3
  402a7a:	4b51      	ldr	r3, [pc, #324]	; (402bc0 <setvbuf+0x14c>)
  402a7c:	681e      	ldr	r6, [r3, #0]
  402a7e:	4604      	mov	r4, r0
  402a80:	460f      	mov	r7, r1
  402a82:	4690      	mov	r8, r2
  402a84:	b126      	cbz	r6, 402a90 <setvbuf+0x1c>
  402a86:	69b3      	ldr	r3, [r6, #24]
  402a88:	b913      	cbnz	r3, 402a90 <setvbuf+0x1c>
  402a8a:	4630      	mov	r0, r6
  402a8c:	f000 fff8 	bl	403a80 <__sinit>
  402a90:	4b4c      	ldr	r3, [pc, #304]	; (402bc4 <setvbuf+0x150>)
  402a92:	429c      	cmp	r4, r3
  402a94:	d152      	bne.n	402b3c <setvbuf+0xc8>
  402a96:	6874      	ldr	r4, [r6, #4]
  402a98:	f1b8 0f02 	cmp.w	r8, #2
  402a9c:	d006      	beq.n	402aac <setvbuf+0x38>
  402a9e:	f1b8 0f01 	cmp.w	r8, #1
  402aa2:	f200 8089 	bhi.w	402bb8 <setvbuf+0x144>
  402aa6:	2d00      	cmp	r5, #0
  402aa8:	f2c0 8086 	blt.w	402bb8 <setvbuf+0x144>
  402aac:	4621      	mov	r1, r4
  402aae:	4630      	mov	r0, r6
  402ab0:	f000 ff7c 	bl	4039ac <_fflush_r>
  402ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402ab6:	b141      	cbz	r1, 402aca <setvbuf+0x56>
  402ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  402abc:	4299      	cmp	r1, r3
  402abe:	d002      	beq.n	402ac6 <setvbuf+0x52>
  402ac0:	4630      	mov	r0, r6
  402ac2:	f001 fc13 	bl	4042ec <_free_r>
  402ac6:	2300      	movs	r3, #0
  402ac8:	6363      	str	r3, [r4, #52]	; 0x34
  402aca:	2300      	movs	r3, #0
  402acc:	61a3      	str	r3, [r4, #24]
  402ace:	6063      	str	r3, [r4, #4]
  402ad0:	89a3      	ldrh	r3, [r4, #12]
  402ad2:	061b      	lsls	r3, r3, #24
  402ad4:	d503      	bpl.n	402ade <setvbuf+0x6a>
  402ad6:	6921      	ldr	r1, [r4, #16]
  402ad8:	4630      	mov	r0, r6
  402ada:	f001 fc07 	bl	4042ec <_free_r>
  402ade:	89a3      	ldrh	r3, [r4, #12]
  402ae0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402ae4:	f023 0303 	bic.w	r3, r3, #3
  402ae8:	f1b8 0f02 	cmp.w	r8, #2
  402aec:	81a3      	strh	r3, [r4, #12]
  402aee:	d05d      	beq.n	402bac <setvbuf+0x138>
  402af0:	ab01      	add	r3, sp, #4
  402af2:	466a      	mov	r2, sp
  402af4:	4621      	mov	r1, r4
  402af6:	4630      	mov	r0, r6
  402af8:	f001 f85a 	bl	403bb0 <__swhatbuf_r>
  402afc:	89a3      	ldrh	r3, [r4, #12]
  402afe:	4318      	orrs	r0, r3
  402b00:	81a0      	strh	r0, [r4, #12]
  402b02:	bb2d      	cbnz	r5, 402b50 <setvbuf+0xdc>
  402b04:	9d00      	ldr	r5, [sp, #0]
  402b06:	4628      	mov	r0, r5
  402b08:	f001 f8b6 	bl	403c78 <malloc>
  402b0c:	4607      	mov	r7, r0
  402b0e:	2800      	cmp	r0, #0
  402b10:	d14e      	bne.n	402bb0 <setvbuf+0x13c>
  402b12:	f8dd 9000 	ldr.w	r9, [sp]
  402b16:	45a9      	cmp	r9, r5
  402b18:	d13c      	bne.n	402b94 <setvbuf+0x120>
  402b1a:	f04f 30ff 	mov.w	r0, #4294967295
  402b1e:	89a3      	ldrh	r3, [r4, #12]
  402b20:	f043 0302 	orr.w	r3, r3, #2
  402b24:	81a3      	strh	r3, [r4, #12]
  402b26:	2300      	movs	r3, #0
  402b28:	60a3      	str	r3, [r4, #8]
  402b2a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  402b2e:	6023      	str	r3, [r4, #0]
  402b30:	6123      	str	r3, [r4, #16]
  402b32:	2301      	movs	r3, #1
  402b34:	6163      	str	r3, [r4, #20]
  402b36:	b003      	add	sp, #12
  402b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402b3c:	4b22      	ldr	r3, [pc, #136]	; (402bc8 <setvbuf+0x154>)
  402b3e:	429c      	cmp	r4, r3
  402b40:	d101      	bne.n	402b46 <setvbuf+0xd2>
  402b42:	68b4      	ldr	r4, [r6, #8]
  402b44:	e7a8      	b.n	402a98 <setvbuf+0x24>
  402b46:	4b21      	ldr	r3, [pc, #132]	; (402bcc <setvbuf+0x158>)
  402b48:	429c      	cmp	r4, r3
  402b4a:	bf08      	it	eq
  402b4c:	68f4      	ldreq	r4, [r6, #12]
  402b4e:	e7a3      	b.n	402a98 <setvbuf+0x24>
  402b50:	2f00      	cmp	r7, #0
  402b52:	d0d8      	beq.n	402b06 <setvbuf+0x92>
  402b54:	69b3      	ldr	r3, [r6, #24]
  402b56:	b913      	cbnz	r3, 402b5e <setvbuf+0xea>
  402b58:	4630      	mov	r0, r6
  402b5a:	f000 ff91 	bl	403a80 <__sinit>
  402b5e:	f1b8 0f01 	cmp.w	r8, #1
  402b62:	bf08      	it	eq
  402b64:	89a3      	ldrheq	r3, [r4, #12]
  402b66:	6027      	str	r7, [r4, #0]
  402b68:	bf04      	itt	eq
  402b6a:	f043 0301 	orreq.w	r3, r3, #1
  402b6e:	81a3      	strheq	r3, [r4, #12]
  402b70:	89a3      	ldrh	r3, [r4, #12]
  402b72:	6127      	str	r7, [r4, #16]
  402b74:	f013 0008 	ands.w	r0, r3, #8
  402b78:	6165      	str	r5, [r4, #20]
  402b7a:	d01b      	beq.n	402bb4 <setvbuf+0x140>
  402b7c:	f013 0001 	ands.w	r0, r3, #1
  402b80:	bf18      	it	ne
  402b82:	426d      	negne	r5, r5
  402b84:	f04f 0300 	mov.w	r3, #0
  402b88:	bf1d      	ittte	ne
  402b8a:	60a3      	strne	r3, [r4, #8]
  402b8c:	61a5      	strne	r5, [r4, #24]
  402b8e:	4618      	movne	r0, r3
  402b90:	60a5      	streq	r5, [r4, #8]
  402b92:	e7d0      	b.n	402b36 <setvbuf+0xc2>
  402b94:	4648      	mov	r0, r9
  402b96:	f001 f86f 	bl	403c78 <malloc>
  402b9a:	4607      	mov	r7, r0
  402b9c:	2800      	cmp	r0, #0
  402b9e:	d0bc      	beq.n	402b1a <setvbuf+0xa6>
  402ba0:	89a3      	ldrh	r3, [r4, #12]
  402ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402ba6:	81a3      	strh	r3, [r4, #12]
  402ba8:	464d      	mov	r5, r9
  402baa:	e7d3      	b.n	402b54 <setvbuf+0xe0>
  402bac:	2000      	movs	r0, #0
  402bae:	e7b6      	b.n	402b1e <setvbuf+0xaa>
  402bb0:	46a9      	mov	r9, r5
  402bb2:	e7f5      	b.n	402ba0 <setvbuf+0x12c>
  402bb4:	60a0      	str	r0, [r4, #8]
  402bb6:	e7be      	b.n	402b36 <setvbuf+0xc2>
  402bb8:	f04f 30ff 	mov.w	r0, #4294967295
  402bbc:	e7bb      	b.n	402b36 <setvbuf+0xc2>
  402bbe:	bf00      	nop
  402bc0:	20400014 	.word	0x20400014
  402bc4:	00404d48 	.word	0x00404d48
  402bc8:	00404d68 	.word	0x00404d68
  402bcc:	00404d28 	.word	0x00404d28

00402bd0 <strlen>:
  402bd0:	4603      	mov	r3, r0
  402bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
  402bd6:	2a00      	cmp	r2, #0
  402bd8:	d1fb      	bne.n	402bd2 <strlen+0x2>
  402bda:	1a18      	subs	r0, r3, r0
  402bdc:	3801      	subs	r0, #1
  402bde:	4770      	bx	lr

00402be0 <quorem>:
  402be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402be4:	6903      	ldr	r3, [r0, #16]
  402be6:	690c      	ldr	r4, [r1, #16]
  402be8:	429c      	cmp	r4, r3
  402bea:	4680      	mov	r8, r0
  402bec:	f300 8082 	bgt.w	402cf4 <quorem+0x114>
  402bf0:	3c01      	subs	r4, #1
  402bf2:	f101 0714 	add.w	r7, r1, #20
  402bf6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  402bfa:	f100 0614 	add.w	r6, r0, #20
  402bfe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  402c02:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  402c06:	eb06 030e 	add.w	r3, r6, lr
  402c0a:	3501      	adds	r5, #1
  402c0c:	eb07 090e 	add.w	r9, r7, lr
  402c10:	9301      	str	r3, [sp, #4]
  402c12:	fbb0 f5f5 	udiv	r5, r0, r5
  402c16:	b395      	cbz	r5, 402c7e <quorem+0x9e>
  402c18:	f04f 0a00 	mov.w	sl, #0
  402c1c:	4638      	mov	r0, r7
  402c1e:	46b4      	mov	ip, r6
  402c20:	46d3      	mov	fp, sl
  402c22:	f850 2b04 	ldr.w	r2, [r0], #4
  402c26:	b293      	uxth	r3, r2
  402c28:	fb05 a303 	mla	r3, r5, r3, sl
  402c2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  402c30:	b29b      	uxth	r3, r3
  402c32:	ebab 0303 	sub.w	r3, fp, r3
  402c36:	0c12      	lsrs	r2, r2, #16
  402c38:	f8bc b000 	ldrh.w	fp, [ip]
  402c3c:	fb05 a202 	mla	r2, r5, r2, sl
  402c40:	fa13 f38b 	uxtah	r3, r3, fp
  402c44:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  402c48:	fa1f fb82 	uxth.w	fp, r2
  402c4c:	f8dc 2000 	ldr.w	r2, [ip]
  402c50:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  402c54:	eb02 4223 	add.w	r2, r2, r3, asr #16
  402c58:	b29b      	uxth	r3, r3
  402c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402c5e:	4581      	cmp	r9, r0
  402c60:	ea4f 4b22 	mov.w	fp, r2, asr #16
  402c64:	f84c 3b04 	str.w	r3, [ip], #4
  402c68:	d2db      	bcs.n	402c22 <quorem+0x42>
  402c6a:	f856 300e 	ldr.w	r3, [r6, lr]
  402c6e:	b933      	cbnz	r3, 402c7e <quorem+0x9e>
  402c70:	9b01      	ldr	r3, [sp, #4]
  402c72:	3b04      	subs	r3, #4
  402c74:	429e      	cmp	r6, r3
  402c76:	461a      	mov	r2, r3
  402c78:	d330      	bcc.n	402cdc <quorem+0xfc>
  402c7a:	f8c8 4010 	str.w	r4, [r8, #16]
  402c7e:	4640      	mov	r0, r8
  402c80:	f001 fa5f 	bl	404142 <__mcmp>
  402c84:	2800      	cmp	r0, #0
  402c86:	db25      	blt.n	402cd4 <quorem+0xf4>
  402c88:	3501      	adds	r5, #1
  402c8a:	4630      	mov	r0, r6
  402c8c:	f04f 0e00 	mov.w	lr, #0
  402c90:	f857 2b04 	ldr.w	r2, [r7], #4
  402c94:	f8d0 c000 	ldr.w	ip, [r0]
  402c98:	b293      	uxth	r3, r2
  402c9a:	ebae 0303 	sub.w	r3, lr, r3
  402c9e:	0c12      	lsrs	r2, r2, #16
  402ca0:	fa13 f38c 	uxtah	r3, r3, ip
  402ca4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  402ca8:	eb02 4223 	add.w	r2, r2, r3, asr #16
  402cac:	b29b      	uxth	r3, r3
  402cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402cb2:	45b9      	cmp	r9, r7
  402cb4:	ea4f 4e22 	mov.w	lr, r2, asr #16
  402cb8:	f840 3b04 	str.w	r3, [r0], #4
  402cbc:	d2e8      	bcs.n	402c90 <quorem+0xb0>
  402cbe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  402cc2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  402cc6:	b92a      	cbnz	r2, 402cd4 <quorem+0xf4>
  402cc8:	3b04      	subs	r3, #4
  402cca:	429e      	cmp	r6, r3
  402ccc:	461a      	mov	r2, r3
  402cce:	d30b      	bcc.n	402ce8 <quorem+0x108>
  402cd0:	f8c8 4010 	str.w	r4, [r8, #16]
  402cd4:	4628      	mov	r0, r5
  402cd6:	b003      	add	sp, #12
  402cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cdc:	6812      	ldr	r2, [r2, #0]
  402cde:	3b04      	subs	r3, #4
  402ce0:	2a00      	cmp	r2, #0
  402ce2:	d1ca      	bne.n	402c7a <quorem+0x9a>
  402ce4:	3c01      	subs	r4, #1
  402ce6:	e7c5      	b.n	402c74 <quorem+0x94>
  402ce8:	6812      	ldr	r2, [r2, #0]
  402cea:	3b04      	subs	r3, #4
  402cec:	2a00      	cmp	r2, #0
  402cee:	d1ef      	bne.n	402cd0 <quorem+0xf0>
  402cf0:	3c01      	subs	r4, #1
  402cf2:	e7ea      	b.n	402cca <quorem+0xea>
  402cf4:	2000      	movs	r0, #0
  402cf6:	e7ee      	b.n	402cd6 <quorem+0xf6>

00402cf8 <_dtoa_r>:
  402cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402cfc:	6a46      	ldr	r6, [r0, #36]	; 0x24
  402cfe:	b095      	sub	sp, #84	; 0x54
  402d00:	4604      	mov	r4, r0
  402d02:	9d21      	ldr	r5, [sp, #132]	; 0x84
  402d04:	e9cd 2302 	strd	r2, r3, [sp, #8]
  402d08:	b93e      	cbnz	r6, 402d1a <_dtoa_r+0x22>
  402d0a:	2010      	movs	r0, #16
  402d0c:	f000 ffb4 	bl	403c78 <malloc>
  402d10:	6260      	str	r0, [r4, #36]	; 0x24
  402d12:	6046      	str	r6, [r0, #4]
  402d14:	6086      	str	r6, [r0, #8]
  402d16:	6006      	str	r6, [r0, #0]
  402d18:	60c6      	str	r6, [r0, #12]
  402d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402d1c:	6819      	ldr	r1, [r3, #0]
  402d1e:	b151      	cbz	r1, 402d36 <_dtoa_r+0x3e>
  402d20:	685a      	ldr	r2, [r3, #4]
  402d22:	604a      	str	r2, [r1, #4]
  402d24:	2301      	movs	r3, #1
  402d26:	4093      	lsls	r3, r2
  402d28:	608b      	str	r3, [r1, #8]
  402d2a:	4620      	mov	r0, r4
  402d2c:	f001 f834 	bl	403d98 <_Bfree>
  402d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402d32:	2200      	movs	r2, #0
  402d34:	601a      	str	r2, [r3, #0]
  402d36:	9b03      	ldr	r3, [sp, #12]
  402d38:	2b00      	cmp	r3, #0
  402d3a:	bfbf      	itttt	lt
  402d3c:	2301      	movlt	r3, #1
  402d3e:	602b      	strlt	r3, [r5, #0]
  402d40:	9b03      	ldrlt	r3, [sp, #12]
  402d42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  402d46:	bfb2      	itee	lt
  402d48:	9303      	strlt	r3, [sp, #12]
  402d4a:	2300      	movge	r3, #0
  402d4c:	602b      	strge	r3, [r5, #0]
  402d4e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  402d52:	4ba9      	ldr	r3, [pc, #676]	; (402ff8 <_dtoa_r+0x300>)
  402d54:	ea33 0309 	bics.w	r3, r3, r9
  402d58:	d11b      	bne.n	402d92 <_dtoa_r+0x9a>
  402d5a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402d5c:	f242 730f 	movw	r3, #9999	; 0x270f
  402d60:	6013      	str	r3, [r2, #0]
  402d62:	9b02      	ldr	r3, [sp, #8]
  402d64:	b923      	cbnz	r3, 402d70 <_dtoa_r+0x78>
  402d66:	f3c9 0013 	ubfx	r0, r9, #0, #20
  402d6a:	2800      	cmp	r0, #0
  402d6c:	f000 8581 	beq.w	403872 <_dtoa_r+0xb7a>
  402d70:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402d72:	b953      	cbnz	r3, 402d8a <_dtoa_r+0x92>
  402d74:	4ba1      	ldr	r3, [pc, #644]	; (402ffc <_dtoa_r+0x304>)
  402d76:	e021      	b.n	402dbc <_dtoa_r+0xc4>
  402d78:	4ba1      	ldr	r3, [pc, #644]	; (403000 <_dtoa_r+0x308>)
  402d7a:	9306      	str	r3, [sp, #24]
  402d7c:	3308      	adds	r3, #8
  402d7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  402d80:	6013      	str	r3, [r2, #0]
  402d82:	9806      	ldr	r0, [sp, #24]
  402d84:	b015      	add	sp, #84	; 0x54
  402d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d8a:	4b9c      	ldr	r3, [pc, #624]	; (402ffc <_dtoa_r+0x304>)
  402d8c:	9306      	str	r3, [sp, #24]
  402d8e:	3303      	adds	r3, #3
  402d90:	e7f5      	b.n	402d7e <_dtoa_r+0x86>
  402d92:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  402d96:	2200      	movs	r2, #0
  402d98:	2300      	movs	r3, #0
  402d9a:	4630      	mov	r0, r6
  402d9c:	4639      	mov	r1, r7
  402d9e:	f7ff f959 	bl	402054 <__aeabi_dcmpeq>
  402da2:	4680      	mov	r8, r0
  402da4:	b160      	cbz	r0, 402dc0 <_dtoa_r+0xc8>
  402da6:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402da8:	2301      	movs	r3, #1
  402daa:	6013      	str	r3, [r2, #0]
  402dac:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402dae:	2b00      	cmp	r3, #0
  402db0:	f000 855c 	beq.w	40386c <_dtoa_r+0xb74>
  402db4:	4b93      	ldr	r3, [pc, #588]	; (403004 <_dtoa_r+0x30c>)
  402db6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  402db8:	6013      	str	r3, [r2, #0]
  402dba:	3b01      	subs	r3, #1
  402dbc:	9306      	str	r3, [sp, #24]
  402dbe:	e7e0      	b.n	402d82 <_dtoa_r+0x8a>
  402dc0:	ab12      	add	r3, sp, #72	; 0x48
  402dc2:	9301      	str	r3, [sp, #4]
  402dc4:	ab13      	add	r3, sp, #76	; 0x4c
  402dc6:	9300      	str	r3, [sp, #0]
  402dc8:	4632      	mov	r2, r6
  402dca:	463b      	mov	r3, r7
  402dcc:	4620      	mov	r0, r4
  402dce:	f001 fa30 	bl	404232 <__d2b>
  402dd2:	f3c9 550a 	ubfx	r5, r9, #20, #11
  402dd6:	4682      	mov	sl, r0
  402dd8:	2d00      	cmp	r5, #0
  402dda:	d07c      	beq.n	402ed6 <_dtoa_r+0x1de>
  402ddc:	f3c7 0313 	ubfx	r3, r7, #0, #20
  402de0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  402de4:	4630      	mov	r0, r6
  402de6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  402dea:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  402dee:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  402df2:	2200      	movs	r2, #0
  402df4:	4b84      	ldr	r3, [pc, #528]	; (403008 <_dtoa_r+0x310>)
  402df6:	f7fe fd11 	bl	40181c <__aeabi_dsub>
  402dfa:	a379      	add	r3, pc, #484	; (adr r3, 402fe0 <_dtoa_r+0x2e8>)
  402dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
  402e00:	f7fe fec0 	bl	401b84 <__aeabi_dmul>
  402e04:	a378      	add	r3, pc, #480	; (adr r3, 402fe8 <_dtoa_r+0x2f0>)
  402e06:	e9d3 2300 	ldrd	r2, r3, [r3]
  402e0a:	f7fe fd09 	bl	401820 <__adddf3>
  402e0e:	4606      	mov	r6, r0
  402e10:	4628      	mov	r0, r5
  402e12:	460f      	mov	r7, r1
  402e14:	f7fe fe50 	bl	401ab8 <__aeabi_i2d>
  402e18:	a375      	add	r3, pc, #468	; (adr r3, 402ff0 <_dtoa_r+0x2f8>)
  402e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402e1e:	f7fe feb1 	bl	401b84 <__aeabi_dmul>
  402e22:	4602      	mov	r2, r0
  402e24:	460b      	mov	r3, r1
  402e26:	4630      	mov	r0, r6
  402e28:	4639      	mov	r1, r7
  402e2a:	f7fe fcf9 	bl	401820 <__adddf3>
  402e2e:	4606      	mov	r6, r0
  402e30:	460f      	mov	r7, r1
  402e32:	f7ff f941 	bl	4020b8 <__aeabi_d2iz>
  402e36:	2200      	movs	r2, #0
  402e38:	4683      	mov	fp, r0
  402e3a:	2300      	movs	r3, #0
  402e3c:	4630      	mov	r0, r6
  402e3e:	4639      	mov	r1, r7
  402e40:	f7ff f912 	bl	402068 <__aeabi_dcmplt>
  402e44:	b158      	cbz	r0, 402e5e <_dtoa_r+0x166>
  402e46:	4658      	mov	r0, fp
  402e48:	f7fe fe36 	bl	401ab8 <__aeabi_i2d>
  402e4c:	4602      	mov	r2, r0
  402e4e:	460b      	mov	r3, r1
  402e50:	4630      	mov	r0, r6
  402e52:	4639      	mov	r1, r7
  402e54:	f7ff f8fe 	bl	402054 <__aeabi_dcmpeq>
  402e58:	b908      	cbnz	r0, 402e5e <_dtoa_r+0x166>
  402e5a:	f10b 3bff 	add.w	fp, fp, #4294967295
  402e5e:	f1bb 0f16 	cmp.w	fp, #22
  402e62:	d857      	bhi.n	402f14 <_dtoa_r+0x21c>
  402e64:	4969      	ldr	r1, [pc, #420]	; (40300c <_dtoa_r+0x314>)
  402e66:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  402e6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
  402e72:	f7ff f917 	bl	4020a4 <__aeabi_dcmpgt>
  402e76:	2800      	cmp	r0, #0
  402e78:	d04e      	beq.n	402f18 <_dtoa_r+0x220>
  402e7a:	f10b 3bff 	add.w	fp, fp, #4294967295
  402e7e:	2300      	movs	r3, #0
  402e80:	930d      	str	r3, [sp, #52]	; 0x34
  402e82:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402e84:	1b5d      	subs	r5, r3, r5
  402e86:	1e6b      	subs	r3, r5, #1
  402e88:	9307      	str	r3, [sp, #28]
  402e8a:	bf43      	ittte	mi
  402e8c:	2300      	movmi	r3, #0
  402e8e:	f1c5 0801 	rsbmi	r8, r5, #1
  402e92:	9307      	strmi	r3, [sp, #28]
  402e94:	f04f 0800 	movpl.w	r8, #0
  402e98:	f1bb 0f00 	cmp.w	fp, #0
  402e9c:	db3e      	blt.n	402f1c <_dtoa_r+0x224>
  402e9e:	9b07      	ldr	r3, [sp, #28]
  402ea0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  402ea4:	445b      	add	r3, fp
  402ea6:	9307      	str	r3, [sp, #28]
  402ea8:	2300      	movs	r3, #0
  402eaa:	9308      	str	r3, [sp, #32]
  402eac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402eae:	2b09      	cmp	r3, #9
  402eb0:	f200 80b0 	bhi.w	403014 <_dtoa_r+0x31c>
  402eb4:	2b05      	cmp	r3, #5
  402eb6:	bfc4      	itt	gt
  402eb8:	3b04      	subgt	r3, #4
  402eba:	931e      	strgt	r3, [sp, #120]	; 0x78
  402ebc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402ebe:	f1a3 0302 	sub.w	r3, r3, #2
  402ec2:	bfcc      	ite	gt
  402ec4:	2600      	movgt	r6, #0
  402ec6:	2601      	movle	r6, #1
  402ec8:	2b03      	cmp	r3, #3
  402eca:	f200 80af 	bhi.w	40302c <_dtoa_r+0x334>
  402ece:	e8df f003 	tbb	[pc, r3]
  402ed2:	8583      	.short	0x8583
  402ed4:	772d      	.short	0x772d
  402ed6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402ed8:	9d12      	ldr	r5, [sp, #72]	; 0x48
  402eda:	441d      	add	r5, r3
  402edc:	f205 4332 	addw	r3, r5, #1074	; 0x432
  402ee0:	2b20      	cmp	r3, #32
  402ee2:	dd11      	ble.n	402f08 <_dtoa_r+0x210>
  402ee4:	9a02      	ldr	r2, [sp, #8]
  402ee6:	f205 4012 	addw	r0, r5, #1042	; 0x412
  402eea:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  402eee:	fa22 f000 	lsr.w	r0, r2, r0
  402ef2:	fa09 f303 	lsl.w	r3, r9, r3
  402ef6:	4318      	orrs	r0, r3
  402ef8:	f7fe fdce 	bl	401a98 <__aeabi_ui2d>
  402efc:	2301      	movs	r3, #1
  402efe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  402f02:	3d01      	subs	r5, #1
  402f04:	9310      	str	r3, [sp, #64]	; 0x40
  402f06:	e774      	b.n	402df2 <_dtoa_r+0xfa>
  402f08:	f1c3 0020 	rsb	r0, r3, #32
  402f0c:	9b02      	ldr	r3, [sp, #8]
  402f0e:	fa03 f000 	lsl.w	r0, r3, r0
  402f12:	e7f1      	b.n	402ef8 <_dtoa_r+0x200>
  402f14:	2301      	movs	r3, #1
  402f16:	e7b3      	b.n	402e80 <_dtoa_r+0x188>
  402f18:	900d      	str	r0, [sp, #52]	; 0x34
  402f1a:	e7b2      	b.n	402e82 <_dtoa_r+0x18a>
  402f1c:	f1cb 0300 	rsb	r3, fp, #0
  402f20:	9308      	str	r3, [sp, #32]
  402f22:	2300      	movs	r3, #0
  402f24:	eba8 080b 	sub.w	r8, r8, fp
  402f28:	930c      	str	r3, [sp, #48]	; 0x30
  402f2a:	e7bf      	b.n	402eac <_dtoa_r+0x1b4>
  402f2c:	2301      	movs	r3, #1
  402f2e:	9309      	str	r3, [sp, #36]	; 0x24
  402f30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402f32:	2b00      	cmp	r3, #0
  402f34:	dd7d      	ble.n	403032 <_dtoa_r+0x33a>
  402f36:	9304      	str	r3, [sp, #16]
  402f38:	4699      	mov	r9, r3
  402f3a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  402f3c:	2200      	movs	r2, #0
  402f3e:	606a      	str	r2, [r5, #4]
  402f40:	2104      	movs	r1, #4
  402f42:	f101 0214 	add.w	r2, r1, #20
  402f46:	429a      	cmp	r2, r3
  402f48:	d978      	bls.n	40303c <_dtoa_r+0x344>
  402f4a:	6869      	ldr	r1, [r5, #4]
  402f4c:	4620      	mov	r0, r4
  402f4e:	f000 feef 	bl	403d30 <_Balloc>
  402f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402f54:	6028      	str	r0, [r5, #0]
  402f56:	681b      	ldr	r3, [r3, #0]
  402f58:	9306      	str	r3, [sp, #24]
  402f5a:	f1b9 0f0e 	cmp.w	r9, #14
  402f5e:	f200 80ee 	bhi.w	40313e <_dtoa_r+0x446>
  402f62:	2e00      	cmp	r6, #0
  402f64:	f000 80eb 	beq.w	40313e <_dtoa_r+0x446>
  402f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402f6c:	f1bb 0f00 	cmp.w	fp, #0
  402f70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  402f74:	dd77      	ble.n	403066 <_dtoa_r+0x36e>
  402f76:	4a25      	ldr	r2, [pc, #148]	; (40300c <_dtoa_r+0x314>)
  402f78:	f00b 030f 	and.w	r3, fp, #15
  402f7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402f80:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f84:	ea4f 162b 	mov.w	r6, fp, asr #4
  402f88:	06f0      	lsls	r0, r6, #27
  402f8a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  402f8e:	d55a      	bpl.n	403046 <_dtoa_r+0x34e>
  402f90:	4b1f      	ldr	r3, [pc, #124]	; (403010 <_dtoa_r+0x318>)
  402f92:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  402f96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  402f9a:	f7fe ff1d 	bl	401dd8 <__aeabi_ddiv>
  402f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402fa2:	f006 060f 	and.w	r6, r6, #15
  402fa6:	2503      	movs	r5, #3
  402fa8:	4f19      	ldr	r7, [pc, #100]	; (403010 <_dtoa_r+0x318>)
  402faa:	2e00      	cmp	r6, #0
  402fac:	d14d      	bne.n	40304a <_dtoa_r+0x352>
  402fae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  402fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402fb6:	f7fe ff0f 	bl	401dd8 <__aeabi_ddiv>
  402fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402fbe:	e06c      	b.n	40309a <_dtoa_r+0x3a2>
  402fc0:	2301      	movs	r3, #1
  402fc2:	9309      	str	r3, [sp, #36]	; 0x24
  402fc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402fc6:	445b      	add	r3, fp
  402fc8:	f103 0901 	add.w	r9, r3, #1
  402fcc:	9304      	str	r3, [sp, #16]
  402fce:	464b      	mov	r3, r9
  402fd0:	2b01      	cmp	r3, #1
  402fd2:	bfb8      	it	lt
  402fd4:	2301      	movlt	r3, #1
  402fd6:	e7b0      	b.n	402f3a <_dtoa_r+0x242>
  402fd8:	2300      	movs	r3, #0
  402fda:	e7a8      	b.n	402f2e <_dtoa_r+0x236>
  402fdc:	2300      	movs	r3, #0
  402fde:	e7f0      	b.n	402fc2 <_dtoa_r+0x2ca>
  402fe0:	636f4361 	.word	0x636f4361
  402fe4:	3fd287a7 	.word	0x3fd287a7
  402fe8:	8b60c8b3 	.word	0x8b60c8b3
  402fec:	3fc68a28 	.word	0x3fc68a28
  402ff0:	509f79fb 	.word	0x509f79fb
  402ff4:	3fd34413 	.word	0x3fd34413
  402ff8:	7ff00000 	.word	0x7ff00000
  402ffc:	00404d21 	.word	0x00404d21
  403000:	00404d18 	.word	0x00404d18
  403004:	00404cf5 	.word	0x00404cf5
  403008:	3ff80000 	.word	0x3ff80000
  40300c:	00404db0 	.word	0x00404db0
  403010:	00404d88 	.word	0x00404d88
  403014:	2601      	movs	r6, #1
  403016:	2300      	movs	r3, #0
  403018:	931e      	str	r3, [sp, #120]	; 0x78
  40301a:	9609      	str	r6, [sp, #36]	; 0x24
  40301c:	f04f 33ff 	mov.w	r3, #4294967295
  403020:	9304      	str	r3, [sp, #16]
  403022:	4699      	mov	r9, r3
  403024:	2200      	movs	r2, #0
  403026:	2312      	movs	r3, #18
  403028:	921f      	str	r2, [sp, #124]	; 0x7c
  40302a:	e786      	b.n	402f3a <_dtoa_r+0x242>
  40302c:	2301      	movs	r3, #1
  40302e:	9309      	str	r3, [sp, #36]	; 0x24
  403030:	e7f4      	b.n	40301c <_dtoa_r+0x324>
  403032:	2301      	movs	r3, #1
  403034:	9304      	str	r3, [sp, #16]
  403036:	4699      	mov	r9, r3
  403038:	461a      	mov	r2, r3
  40303a:	e7f5      	b.n	403028 <_dtoa_r+0x330>
  40303c:	686a      	ldr	r2, [r5, #4]
  40303e:	3201      	adds	r2, #1
  403040:	606a      	str	r2, [r5, #4]
  403042:	0049      	lsls	r1, r1, #1
  403044:	e77d      	b.n	402f42 <_dtoa_r+0x24a>
  403046:	2502      	movs	r5, #2
  403048:	e7ae      	b.n	402fa8 <_dtoa_r+0x2b0>
  40304a:	07f1      	lsls	r1, r6, #31
  40304c:	d508      	bpl.n	403060 <_dtoa_r+0x368>
  40304e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403052:	e9d7 2300 	ldrd	r2, r3, [r7]
  403056:	f7fe fd95 	bl	401b84 <__aeabi_dmul>
  40305a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40305e:	3501      	adds	r5, #1
  403060:	1076      	asrs	r6, r6, #1
  403062:	3708      	adds	r7, #8
  403064:	e7a1      	b.n	402faa <_dtoa_r+0x2b2>
  403066:	f000 80a5 	beq.w	4031b4 <_dtoa_r+0x4bc>
  40306a:	f1cb 0600 	rsb	r6, fp, #0
  40306e:	4ba3      	ldr	r3, [pc, #652]	; (4032fc <_dtoa_r+0x604>)
  403070:	4fa3      	ldr	r7, [pc, #652]	; (403300 <_dtoa_r+0x608>)
  403072:	f006 020f 	and.w	r2, r6, #15
  403076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40307a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40307e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403082:	f7fe fd7f 	bl	401b84 <__aeabi_dmul>
  403086:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40308a:	1136      	asrs	r6, r6, #4
  40308c:	2300      	movs	r3, #0
  40308e:	2502      	movs	r5, #2
  403090:	2e00      	cmp	r6, #0
  403092:	f040 8084 	bne.w	40319e <_dtoa_r+0x4a6>
  403096:	2b00      	cmp	r3, #0
  403098:	d18f      	bne.n	402fba <_dtoa_r+0x2c2>
  40309a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40309c:	2b00      	cmp	r3, #0
  40309e:	f000 808b 	beq.w	4031b8 <_dtoa_r+0x4c0>
  4030a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4030a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  4030aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4030ae:	2200      	movs	r2, #0
  4030b0:	4b94      	ldr	r3, [pc, #592]	; (403304 <_dtoa_r+0x60c>)
  4030b2:	f7fe ffd9 	bl	402068 <__aeabi_dcmplt>
  4030b6:	2800      	cmp	r0, #0
  4030b8:	d07e      	beq.n	4031b8 <_dtoa_r+0x4c0>
  4030ba:	f1b9 0f00 	cmp.w	r9, #0
  4030be:	d07b      	beq.n	4031b8 <_dtoa_r+0x4c0>
  4030c0:	9b04      	ldr	r3, [sp, #16]
  4030c2:	2b00      	cmp	r3, #0
  4030c4:	dd37      	ble.n	403136 <_dtoa_r+0x43e>
  4030c6:	2200      	movs	r2, #0
  4030c8:	4b8f      	ldr	r3, [pc, #572]	; (403308 <_dtoa_r+0x610>)
  4030ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4030ce:	f7fe fd59 	bl	401b84 <__aeabi_dmul>
  4030d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4030d6:	9e04      	ldr	r6, [sp, #16]
  4030d8:	f10b 37ff 	add.w	r7, fp, #4294967295
  4030dc:	3501      	adds	r5, #1
  4030de:	4628      	mov	r0, r5
  4030e0:	f7fe fcea 	bl	401ab8 <__aeabi_i2d>
  4030e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4030e8:	f7fe fd4c 	bl	401b84 <__aeabi_dmul>
  4030ec:	4b87      	ldr	r3, [pc, #540]	; (40330c <_dtoa_r+0x614>)
  4030ee:	2200      	movs	r2, #0
  4030f0:	f7fe fb96 	bl	401820 <__adddf3>
  4030f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4030f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4030fa:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  4030fe:	950b      	str	r5, [sp, #44]	; 0x2c
  403100:	2e00      	cmp	r6, #0
  403102:	d15c      	bne.n	4031be <_dtoa_r+0x4c6>
  403104:	2200      	movs	r2, #0
  403106:	4b82      	ldr	r3, [pc, #520]	; (403310 <_dtoa_r+0x618>)
  403108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40310c:	f7fe fb86 	bl	40181c <__aeabi_dsub>
  403110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403112:	462b      	mov	r3, r5
  403114:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403118:	f7fe ffc4 	bl	4020a4 <__aeabi_dcmpgt>
  40311c:	2800      	cmp	r0, #0
  40311e:	f040 82f7 	bne.w	403710 <_dtoa_r+0xa18>
  403122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403124:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  403128:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40312c:	f7fe ff9c 	bl	402068 <__aeabi_dcmplt>
  403130:	2800      	cmp	r0, #0
  403132:	f040 82eb 	bne.w	40370c <_dtoa_r+0xa14>
  403136:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40313a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40313e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403140:	2b00      	cmp	r3, #0
  403142:	f2c0 8151 	blt.w	4033e8 <_dtoa_r+0x6f0>
  403146:	f1bb 0f0e 	cmp.w	fp, #14
  40314a:	f300 814d 	bgt.w	4033e8 <_dtoa_r+0x6f0>
  40314e:	4b6b      	ldr	r3, [pc, #428]	; (4032fc <_dtoa_r+0x604>)
  403150:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  403154:	e9d3 2300 	ldrd	r2, r3, [r3]
  403158:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40315c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40315e:	2b00      	cmp	r3, #0
  403160:	f280 80da 	bge.w	403318 <_dtoa_r+0x620>
  403164:	f1b9 0f00 	cmp.w	r9, #0
  403168:	f300 80d6 	bgt.w	403318 <_dtoa_r+0x620>
  40316c:	f040 82cd 	bne.w	40370a <_dtoa_r+0xa12>
  403170:	2200      	movs	r2, #0
  403172:	4b67      	ldr	r3, [pc, #412]	; (403310 <_dtoa_r+0x618>)
  403174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403178:	f7fe fd04 	bl	401b84 <__aeabi_dmul>
  40317c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403180:	f7fe ff86 	bl	402090 <__aeabi_dcmpge>
  403184:	464e      	mov	r6, r9
  403186:	464f      	mov	r7, r9
  403188:	2800      	cmp	r0, #0
  40318a:	f040 82a4 	bne.w	4036d6 <_dtoa_r+0x9de>
  40318e:	9b06      	ldr	r3, [sp, #24]
  403190:	9a06      	ldr	r2, [sp, #24]
  403192:	1c5d      	adds	r5, r3, #1
  403194:	2331      	movs	r3, #49	; 0x31
  403196:	7013      	strb	r3, [r2, #0]
  403198:	f10b 0b01 	add.w	fp, fp, #1
  40319c:	e29f      	b.n	4036de <_dtoa_r+0x9e6>
  40319e:	07f2      	lsls	r2, r6, #31
  4031a0:	d505      	bpl.n	4031ae <_dtoa_r+0x4b6>
  4031a2:	e9d7 2300 	ldrd	r2, r3, [r7]
  4031a6:	f7fe fced 	bl	401b84 <__aeabi_dmul>
  4031aa:	3501      	adds	r5, #1
  4031ac:	2301      	movs	r3, #1
  4031ae:	1076      	asrs	r6, r6, #1
  4031b0:	3708      	adds	r7, #8
  4031b2:	e76d      	b.n	403090 <_dtoa_r+0x398>
  4031b4:	2502      	movs	r5, #2
  4031b6:	e770      	b.n	40309a <_dtoa_r+0x3a2>
  4031b8:	465f      	mov	r7, fp
  4031ba:	464e      	mov	r6, r9
  4031bc:	e78f      	b.n	4030de <_dtoa_r+0x3e6>
  4031be:	9a06      	ldr	r2, [sp, #24]
  4031c0:	4b4e      	ldr	r3, [pc, #312]	; (4032fc <_dtoa_r+0x604>)
  4031c2:	4432      	add	r2, r6
  4031c4:	9211      	str	r2, [sp, #68]	; 0x44
  4031c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4031c8:	1e71      	subs	r1, r6, #1
  4031ca:	2a00      	cmp	r2, #0
  4031cc:	d048      	beq.n	403260 <_dtoa_r+0x568>
  4031ce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  4031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4031d6:	2000      	movs	r0, #0
  4031d8:	494e      	ldr	r1, [pc, #312]	; (403314 <_dtoa_r+0x61c>)
  4031da:	f7fe fdfd 	bl	401dd8 <__aeabi_ddiv>
  4031de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4031e2:	f7fe fb1b 	bl	40181c <__aeabi_dsub>
  4031e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4031ea:	9d06      	ldr	r5, [sp, #24]
  4031ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4031f0:	f7fe ff62 	bl	4020b8 <__aeabi_d2iz>
  4031f4:	4606      	mov	r6, r0
  4031f6:	f7fe fc5f 	bl	401ab8 <__aeabi_i2d>
  4031fa:	4602      	mov	r2, r0
  4031fc:	460b      	mov	r3, r1
  4031fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403202:	f7fe fb0b 	bl	40181c <__aeabi_dsub>
  403206:	3630      	adds	r6, #48	; 0x30
  403208:	f805 6b01 	strb.w	r6, [r5], #1
  40320c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403210:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403214:	f7fe ff28 	bl	402068 <__aeabi_dcmplt>
  403218:	2800      	cmp	r0, #0
  40321a:	d165      	bne.n	4032e8 <_dtoa_r+0x5f0>
  40321c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403220:	2000      	movs	r0, #0
  403222:	4938      	ldr	r1, [pc, #224]	; (403304 <_dtoa_r+0x60c>)
  403224:	f7fe fafa 	bl	40181c <__aeabi_dsub>
  403228:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40322c:	f7fe ff1c 	bl	402068 <__aeabi_dcmplt>
  403230:	2800      	cmp	r0, #0
  403232:	f040 80b9 	bne.w	4033a8 <_dtoa_r+0x6b0>
  403236:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403238:	429d      	cmp	r5, r3
  40323a:	f43f af7c 	beq.w	403136 <_dtoa_r+0x43e>
  40323e:	2200      	movs	r2, #0
  403240:	4b31      	ldr	r3, [pc, #196]	; (403308 <_dtoa_r+0x610>)
  403242:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403246:	f7fe fc9d 	bl	401b84 <__aeabi_dmul>
  40324a:	2200      	movs	r2, #0
  40324c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403250:	4b2d      	ldr	r3, [pc, #180]	; (403308 <_dtoa_r+0x610>)
  403252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403256:	f7fe fc95 	bl	401b84 <__aeabi_dmul>
  40325a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40325e:	e7c5      	b.n	4031ec <_dtoa_r+0x4f4>
  403260:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  403264:	e9d1 0100 	ldrd	r0, r1, [r1]
  403268:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40326c:	f7fe fc8a 	bl	401b84 <__aeabi_dmul>
  403270:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403274:	9d06      	ldr	r5, [sp, #24]
  403276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40327a:	f7fe ff1d 	bl	4020b8 <__aeabi_d2iz>
  40327e:	4606      	mov	r6, r0
  403280:	f7fe fc1a 	bl	401ab8 <__aeabi_i2d>
  403284:	3630      	adds	r6, #48	; 0x30
  403286:	4602      	mov	r2, r0
  403288:	460b      	mov	r3, r1
  40328a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40328e:	f7fe fac5 	bl	40181c <__aeabi_dsub>
  403292:	f805 6b01 	strb.w	r6, [r5], #1
  403296:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403298:	42ab      	cmp	r3, r5
  40329a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40329e:	f04f 0200 	mov.w	r2, #0
  4032a2:	d125      	bne.n	4032f0 <_dtoa_r+0x5f8>
  4032a4:	4b1b      	ldr	r3, [pc, #108]	; (403314 <_dtoa_r+0x61c>)
  4032a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4032aa:	f7fe fab9 	bl	401820 <__adddf3>
  4032ae:	4602      	mov	r2, r0
  4032b0:	460b      	mov	r3, r1
  4032b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4032b6:	f7fe fef5 	bl	4020a4 <__aeabi_dcmpgt>
  4032ba:	2800      	cmp	r0, #0
  4032bc:	d174      	bne.n	4033a8 <_dtoa_r+0x6b0>
  4032be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4032c2:	2000      	movs	r0, #0
  4032c4:	4913      	ldr	r1, [pc, #76]	; (403314 <_dtoa_r+0x61c>)
  4032c6:	f7fe faa9 	bl	40181c <__aeabi_dsub>
  4032ca:	4602      	mov	r2, r0
  4032cc:	460b      	mov	r3, r1
  4032ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4032d2:	f7fe fec9 	bl	402068 <__aeabi_dcmplt>
  4032d6:	2800      	cmp	r0, #0
  4032d8:	f43f af2d 	beq.w	403136 <_dtoa_r+0x43e>
  4032dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4032e0:	2b30      	cmp	r3, #48	; 0x30
  4032e2:	f105 32ff 	add.w	r2, r5, #4294967295
  4032e6:	d001      	beq.n	4032ec <_dtoa_r+0x5f4>
  4032e8:	46bb      	mov	fp, r7
  4032ea:	e04c      	b.n	403386 <_dtoa_r+0x68e>
  4032ec:	4615      	mov	r5, r2
  4032ee:	e7f5      	b.n	4032dc <_dtoa_r+0x5e4>
  4032f0:	4b05      	ldr	r3, [pc, #20]	; (403308 <_dtoa_r+0x610>)
  4032f2:	f7fe fc47 	bl	401b84 <__aeabi_dmul>
  4032f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4032fa:	e7bc      	b.n	403276 <_dtoa_r+0x57e>
  4032fc:	00404db0 	.word	0x00404db0
  403300:	00404d88 	.word	0x00404d88
  403304:	3ff00000 	.word	0x3ff00000
  403308:	40240000 	.word	0x40240000
  40330c:	401c0000 	.word	0x401c0000
  403310:	40140000 	.word	0x40140000
  403314:	3fe00000 	.word	0x3fe00000
  403318:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40331c:	9d06      	ldr	r5, [sp, #24]
  40331e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403322:	4630      	mov	r0, r6
  403324:	4639      	mov	r1, r7
  403326:	f7fe fd57 	bl	401dd8 <__aeabi_ddiv>
  40332a:	f7fe fec5 	bl	4020b8 <__aeabi_d2iz>
  40332e:	4680      	mov	r8, r0
  403330:	f7fe fbc2 	bl	401ab8 <__aeabi_i2d>
  403334:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403338:	f7fe fc24 	bl	401b84 <__aeabi_dmul>
  40333c:	4602      	mov	r2, r0
  40333e:	460b      	mov	r3, r1
  403340:	4630      	mov	r0, r6
  403342:	4639      	mov	r1, r7
  403344:	f108 0630 	add.w	r6, r8, #48	; 0x30
  403348:	f7fe fa68 	bl	40181c <__aeabi_dsub>
  40334c:	f805 6b01 	strb.w	r6, [r5], #1
  403350:	9e06      	ldr	r6, [sp, #24]
  403352:	1bae      	subs	r6, r5, r6
  403354:	45b1      	cmp	r9, r6
  403356:	4602      	mov	r2, r0
  403358:	460b      	mov	r3, r1
  40335a:	d138      	bne.n	4033ce <_dtoa_r+0x6d6>
  40335c:	f7fe fa60 	bl	401820 <__adddf3>
  403360:	4606      	mov	r6, r0
  403362:	460f      	mov	r7, r1
  403364:	4602      	mov	r2, r0
  403366:	460b      	mov	r3, r1
  403368:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40336c:	f7fe fe7c 	bl	402068 <__aeabi_dcmplt>
  403370:	b9c8      	cbnz	r0, 4033a6 <_dtoa_r+0x6ae>
  403372:	4632      	mov	r2, r6
  403374:	463b      	mov	r3, r7
  403376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40337a:	f7fe fe6b 	bl	402054 <__aeabi_dcmpeq>
  40337e:	b110      	cbz	r0, 403386 <_dtoa_r+0x68e>
  403380:	f018 0f01 	tst.w	r8, #1
  403384:	d10f      	bne.n	4033a6 <_dtoa_r+0x6ae>
  403386:	4651      	mov	r1, sl
  403388:	4620      	mov	r0, r4
  40338a:	f000 fd05 	bl	403d98 <_Bfree>
  40338e:	2300      	movs	r3, #0
  403390:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403392:	702b      	strb	r3, [r5, #0]
  403394:	f10b 0301 	add.w	r3, fp, #1
  403398:	6013      	str	r3, [r2, #0]
  40339a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40339c:	2b00      	cmp	r3, #0
  40339e:	f43f acf0 	beq.w	402d82 <_dtoa_r+0x8a>
  4033a2:	601d      	str	r5, [r3, #0]
  4033a4:	e4ed      	b.n	402d82 <_dtoa_r+0x8a>
  4033a6:	465f      	mov	r7, fp
  4033a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4033ac:	2a39      	cmp	r2, #57	; 0x39
  4033ae:	f105 33ff 	add.w	r3, r5, #4294967295
  4033b2:	d106      	bne.n	4033c2 <_dtoa_r+0x6ca>
  4033b4:	9a06      	ldr	r2, [sp, #24]
  4033b6:	429a      	cmp	r2, r3
  4033b8:	d107      	bne.n	4033ca <_dtoa_r+0x6d2>
  4033ba:	2330      	movs	r3, #48	; 0x30
  4033bc:	7013      	strb	r3, [r2, #0]
  4033be:	3701      	adds	r7, #1
  4033c0:	4613      	mov	r3, r2
  4033c2:	781a      	ldrb	r2, [r3, #0]
  4033c4:	3201      	adds	r2, #1
  4033c6:	701a      	strb	r2, [r3, #0]
  4033c8:	e78e      	b.n	4032e8 <_dtoa_r+0x5f0>
  4033ca:	461d      	mov	r5, r3
  4033cc:	e7ec      	b.n	4033a8 <_dtoa_r+0x6b0>
  4033ce:	2200      	movs	r2, #0
  4033d0:	4bb4      	ldr	r3, [pc, #720]	; (4036a4 <_dtoa_r+0x9ac>)
  4033d2:	f7fe fbd7 	bl	401b84 <__aeabi_dmul>
  4033d6:	2200      	movs	r2, #0
  4033d8:	2300      	movs	r3, #0
  4033da:	4606      	mov	r6, r0
  4033dc:	460f      	mov	r7, r1
  4033de:	f7fe fe39 	bl	402054 <__aeabi_dcmpeq>
  4033e2:	2800      	cmp	r0, #0
  4033e4:	d09b      	beq.n	40331e <_dtoa_r+0x626>
  4033e6:	e7ce      	b.n	403386 <_dtoa_r+0x68e>
  4033e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4033ea:	2a00      	cmp	r2, #0
  4033ec:	f000 8129 	beq.w	403642 <_dtoa_r+0x94a>
  4033f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4033f2:	2a01      	cmp	r2, #1
  4033f4:	f300 810e 	bgt.w	403614 <_dtoa_r+0x91c>
  4033f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4033fa:	2a00      	cmp	r2, #0
  4033fc:	f000 8106 	beq.w	40360c <_dtoa_r+0x914>
  403400:	f203 4333 	addw	r3, r3, #1075	; 0x433
  403404:	9e08      	ldr	r6, [sp, #32]
  403406:	4645      	mov	r5, r8
  403408:	9a07      	ldr	r2, [sp, #28]
  40340a:	2101      	movs	r1, #1
  40340c:	441a      	add	r2, r3
  40340e:	4620      	mov	r0, r4
  403410:	4498      	add	r8, r3
  403412:	9207      	str	r2, [sp, #28]
  403414:	f000 fd60 	bl	403ed8 <__i2b>
  403418:	4607      	mov	r7, r0
  40341a:	2d00      	cmp	r5, #0
  40341c:	dd0b      	ble.n	403436 <_dtoa_r+0x73e>
  40341e:	9b07      	ldr	r3, [sp, #28]
  403420:	2b00      	cmp	r3, #0
  403422:	dd08      	ble.n	403436 <_dtoa_r+0x73e>
  403424:	42ab      	cmp	r3, r5
  403426:	9a07      	ldr	r2, [sp, #28]
  403428:	bfa8      	it	ge
  40342a:	462b      	movge	r3, r5
  40342c:	eba8 0803 	sub.w	r8, r8, r3
  403430:	1aed      	subs	r5, r5, r3
  403432:	1ad3      	subs	r3, r2, r3
  403434:	9307      	str	r3, [sp, #28]
  403436:	9b08      	ldr	r3, [sp, #32]
  403438:	b1fb      	cbz	r3, 40347a <_dtoa_r+0x782>
  40343a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40343c:	2b00      	cmp	r3, #0
  40343e:	f000 8104 	beq.w	40364a <_dtoa_r+0x952>
  403442:	2e00      	cmp	r6, #0
  403444:	dd11      	ble.n	40346a <_dtoa_r+0x772>
  403446:	4639      	mov	r1, r7
  403448:	4632      	mov	r2, r6
  40344a:	4620      	mov	r0, r4
  40344c:	f000 fdda 	bl	404004 <__pow5mult>
  403450:	4652      	mov	r2, sl
  403452:	4601      	mov	r1, r0
  403454:	4607      	mov	r7, r0
  403456:	4620      	mov	r0, r4
  403458:	f000 fd47 	bl	403eea <__multiply>
  40345c:	4651      	mov	r1, sl
  40345e:	900a      	str	r0, [sp, #40]	; 0x28
  403460:	4620      	mov	r0, r4
  403462:	f000 fc99 	bl	403d98 <_Bfree>
  403466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403468:	469a      	mov	sl, r3
  40346a:	9b08      	ldr	r3, [sp, #32]
  40346c:	1b9a      	subs	r2, r3, r6
  40346e:	d004      	beq.n	40347a <_dtoa_r+0x782>
  403470:	4651      	mov	r1, sl
  403472:	4620      	mov	r0, r4
  403474:	f000 fdc6 	bl	404004 <__pow5mult>
  403478:	4682      	mov	sl, r0
  40347a:	2101      	movs	r1, #1
  40347c:	4620      	mov	r0, r4
  40347e:	f000 fd2b 	bl	403ed8 <__i2b>
  403482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403484:	2b00      	cmp	r3, #0
  403486:	4606      	mov	r6, r0
  403488:	f340 80e1 	ble.w	40364e <_dtoa_r+0x956>
  40348c:	461a      	mov	r2, r3
  40348e:	4601      	mov	r1, r0
  403490:	4620      	mov	r0, r4
  403492:	f000 fdb7 	bl	404004 <__pow5mult>
  403496:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403498:	2b01      	cmp	r3, #1
  40349a:	4606      	mov	r6, r0
  40349c:	f340 80da 	ble.w	403654 <_dtoa_r+0x95c>
  4034a0:	2300      	movs	r3, #0
  4034a2:	9308      	str	r3, [sp, #32]
  4034a4:	6933      	ldr	r3, [r6, #16]
  4034a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4034aa:	6918      	ldr	r0, [r3, #16]
  4034ac:	f000 fcc6 	bl	403e3c <__hi0bits>
  4034b0:	f1c0 0020 	rsb	r0, r0, #32
  4034b4:	9b07      	ldr	r3, [sp, #28]
  4034b6:	4418      	add	r0, r3
  4034b8:	f010 001f 	ands.w	r0, r0, #31
  4034bc:	f000 80f0 	beq.w	4036a0 <_dtoa_r+0x9a8>
  4034c0:	f1c0 0320 	rsb	r3, r0, #32
  4034c4:	2b04      	cmp	r3, #4
  4034c6:	f340 80e2 	ble.w	40368e <_dtoa_r+0x996>
  4034ca:	9b07      	ldr	r3, [sp, #28]
  4034cc:	f1c0 001c 	rsb	r0, r0, #28
  4034d0:	4480      	add	r8, r0
  4034d2:	4405      	add	r5, r0
  4034d4:	4403      	add	r3, r0
  4034d6:	9307      	str	r3, [sp, #28]
  4034d8:	f1b8 0f00 	cmp.w	r8, #0
  4034dc:	dd05      	ble.n	4034ea <_dtoa_r+0x7f2>
  4034de:	4651      	mov	r1, sl
  4034e0:	4642      	mov	r2, r8
  4034e2:	4620      	mov	r0, r4
  4034e4:	f000 fddc 	bl	4040a0 <__lshift>
  4034e8:	4682      	mov	sl, r0
  4034ea:	9b07      	ldr	r3, [sp, #28]
  4034ec:	2b00      	cmp	r3, #0
  4034ee:	dd05      	ble.n	4034fc <_dtoa_r+0x804>
  4034f0:	4631      	mov	r1, r6
  4034f2:	461a      	mov	r2, r3
  4034f4:	4620      	mov	r0, r4
  4034f6:	f000 fdd3 	bl	4040a0 <__lshift>
  4034fa:	4606      	mov	r6, r0
  4034fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4034fe:	2b00      	cmp	r3, #0
  403500:	f000 80d2 	beq.w	4036a8 <_dtoa_r+0x9b0>
  403504:	4631      	mov	r1, r6
  403506:	4650      	mov	r0, sl
  403508:	f000 fe1b 	bl	404142 <__mcmp>
  40350c:	2800      	cmp	r0, #0
  40350e:	f280 80cb 	bge.w	4036a8 <_dtoa_r+0x9b0>
  403512:	2300      	movs	r3, #0
  403514:	4651      	mov	r1, sl
  403516:	220a      	movs	r2, #10
  403518:	4620      	mov	r0, r4
  40351a:	f000 fc54 	bl	403dc6 <__multadd>
  40351e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403520:	f10b 3bff 	add.w	fp, fp, #4294967295
  403524:	4682      	mov	sl, r0
  403526:	2b00      	cmp	r3, #0
  403528:	f000 81aa 	beq.w	403880 <_dtoa_r+0xb88>
  40352c:	2300      	movs	r3, #0
  40352e:	4639      	mov	r1, r7
  403530:	220a      	movs	r2, #10
  403532:	4620      	mov	r0, r4
  403534:	f000 fc47 	bl	403dc6 <__multadd>
  403538:	9b04      	ldr	r3, [sp, #16]
  40353a:	2b00      	cmp	r3, #0
  40353c:	4607      	mov	r7, r0
  40353e:	dc03      	bgt.n	403548 <_dtoa_r+0x850>
  403540:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403542:	2b02      	cmp	r3, #2
  403544:	f300 80b8 	bgt.w	4036b8 <_dtoa_r+0x9c0>
  403548:	2d00      	cmp	r5, #0
  40354a:	dd05      	ble.n	403558 <_dtoa_r+0x860>
  40354c:	4639      	mov	r1, r7
  40354e:	462a      	mov	r2, r5
  403550:	4620      	mov	r0, r4
  403552:	f000 fda5 	bl	4040a0 <__lshift>
  403556:	4607      	mov	r7, r0
  403558:	9b08      	ldr	r3, [sp, #32]
  40355a:	2b00      	cmp	r3, #0
  40355c:	f000 8110 	beq.w	403780 <_dtoa_r+0xa88>
  403560:	6879      	ldr	r1, [r7, #4]
  403562:	4620      	mov	r0, r4
  403564:	f000 fbe4 	bl	403d30 <_Balloc>
  403568:	693a      	ldr	r2, [r7, #16]
  40356a:	3202      	adds	r2, #2
  40356c:	4605      	mov	r5, r0
  40356e:	0092      	lsls	r2, r2, #2
  403570:	f107 010c 	add.w	r1, r7, #12
  403574:	300c      	adds	r0, #12
  403576:	f7fe fdeb 	bl	402150 <memcpy>
  40357a:	2201      	movs	r2, #1
  40357c:	4629      	mov	r1, r5
  40357e:	4620      	mov	r0, r4
  403580:	f000 fd8e 	bl	4040a0 <__lshift>
  403584:	9b02      	ldr	r3, [sp, #8]
  403586:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40358a:	9707      	str	r7, [sp, #28]
  40358c:	f003 0301 	and.w	r3, r3, #1
  403590:	4607      	mov	r7, r0
  403592:	9308      	str	r3, [sp, #32]
  403594:	4631      	mov	r1, r6
  403596:	4650      	mov	r0, sl
  403598:	f7ff fb22 	bl	402be0 <quorem>
  40359c:	9907      	ldr	r1, [sp, #28]
  40359e:	4605      	mov	r5, r0
  4035a0:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4035a4:	4650      	mov	r0, sl
  4035a6:	f000 fdcc 	bl	404142 <__mcmp>
  4035aa:	463a      	mov	r2, r7
  4035ac:	9002      	str	r0, [sp, #8]
  4035ae:	4631      	mov	r1, r6
  4035b0:	4620      	mov	r0, r4
  4035b2:	f000 fde0 	bl	404176 <__mdiff>
  4035b6:	68c3      	ldr	r3, [r0, #12]
  4035b8:	4602      	mov	r2, r0
  4035ba:	2b00      	cmp	r3, #0
  4035bc:	f040 80e2 	bne.w	403784 <_dtoa_r+0xa8c>
  4035c0:	4601      	mov	r1, r0
  4035c2:	9009      	str	r0, [sp, #36]	; 0x24
  4035c4:	4650      	mov	r0, sl
  4035c6:	f000 fdbc 	bl	404142 <__mcmp>
  4035ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4035cc:	4603      	mov	r3, r0
  4035ce:	4611      	mov	r1, r2
  4035d0:	4620      	mov	r0, r4
  4035d2:	9309      	str	r3, [sp, #36]	; 0x24
  4035d4:	f000 fbe0 	bl	403d98 <_Bfree>
  4035d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4035da:	2b00      	cmp	r3, #0
  4035dc:	f040 80d4 	bne.w	403788 <_dtoa_r+0xa90>
  4035e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4035e2:	2a00      	cmp	r2, #0
  4035e4:	f040 80d0 	bne.w	403788 <_dtoa_r+0xa90>
  4035e8:	9a08      	ldr	r2, [sp, #32]
  4035ea:	2a00      	cmp	r2, #0
  4035ec:	f040 80cc 	bne.w	403788 <_dtoa_r+0xa90>
  4035f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4035f4:	f000 80e8 	beq.w	4037c8 <_dtoa_r+0xad0>
  4035f8:	9b02      	ldr	r3, [sp, #8]
  4035fa:	2b00      	cmp	r3, #0
  4035fc:	dd01      	ble.n	403602 <_dtoa_r+0x90a>
  4035fe:	f105 0931 	add.w	r9, r5, #49	; 0x31
  403602:	f108 0501 	add.w	r5, r8, #1
  403606:	f888 9000 	strb.w	r9, [r8]
  40360a:	e06a      	b.n	4036e2 <_dtoa_r+0x9ea>
  40360c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40360e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  403612:	e6f7      	b.n	403404 <_dtoa_r+0x70c>
  403614:	9b08      	ldr	r3, [sp, #32]
  403616:	f109 36ff 	add.w	r6, r9, #4294967295
  40361a:	42b3      	cmp	r3, r6
  40361c:	bfbf      	itttt	lt
  40361e:	9b08      	ldrlt	r3, [sp, #32]
  403620:	9608      	strlt	r6, [sp, #32]
  403622:	1af2      	sublt	r2, r6, r3
  403624:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  403626:	bfb7      	itett	lt
  403628:	189b      	addlt	r3, r3, r2
  40362a:	1b9e      	subge	r6, r3, r6
  40362c:	930c      	strlt	r3, [sp, #48]	; 0x30
  40362e:	2600      	movlt	r6, #0
  403630:	f1b9 0f00 	cmp.w	r9, #0
  403634:	bfb9      	ittee	lt
  403636:	eba8 0509 	sublt.w	r5, r8, r9
  40363a:	2300      	movlt	r3, #0
  40363c:	4645      	movge	r5, r8
  40363e:	464b      	movge	r3, r9
  403640:	e6e2      	b.n	403408 <_dtoa_r+0x710>
  403642:	9e08      	ldr	r6, [sp, #32]
  403644:	9f09      	ldr	r7, [sp, #36]	; 0x24
  403646:	4645      	mov	r5, r8
  403648:	e6e7      	b.n	40341a <_dtoa_r+0x722>
  40364a:	9a08      	ldr	r2, [sp, #32]
  40364c:	e710      	b.n	403470 <_dtoa_r+0x778>
  40364e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403650:	2b01      	cmp	r3, #1
  403652:	dc18      	bgt.n	403686 <_dtoa_r+0x98e>
  403654:	9b02      	ldr	r3, [sp, #8]
  403656:	b9b3      	cbnz	r3, 403686 <_dtoa_r+0x98e>
  403658:	9b03      	ldr	r3, [sp, #12]
  40365a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40365e:	b9a3      	cbnz	r3, 40368a <_dtoa_r+0x992>
  403660:	9b03      	ldr	r3, [sp, #12]
  403662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  403666:	0d1b      	lsrs	r3, r3, #20
  403668:	051b      	lsls	r3, r3, #20
  40366a:	b12b      	cbz	r3, 403678 <_dtoa_r+0x980>
  40366c:	9b07      	ldr	r3, [sp, #28]
  40366e:	3301      	adds	r3, #1
  403670:	9307      	str	r3, [sp, #28]
  403672:	f108 0801 	add.w	r8, r8, #1
  403676:	2301      	movs	r3, #1
  403678:	9308      	str	r3, [sp, #32]
  40367a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40367c:	2b00      	cmp	r3, #0
  40367e:	f47f af11 	bne.w	4034a4 <_dtoa_r+0x7ac>
  403682:	2001      	movs	r0, #1
  403684:	e716      	b.n	4034b4 <_dtoa_r+0x7bc>
  403686:	2300      	movs	r3, #0
  403688:	e7f6      	b.n	403678 <_dtoa_r+0x980>
  40368a:	9b02      	ldr	r3, [sp, #8]
  40368c:	e7f4      	b.n	403678 <_dtoa_r+0x980>
  40368e:	f43f af23 	beq.w	4034d8 <_dtoa_r+0x7e0>
  403692:	9a07      	ldr	r2, [sp, #28]
  403694:	331c      	adds	r3, #28
  403696:	441a      	add	r2, r3
  403698:	4498      	add	r8, r3
  40369a:	441d      	add	r5, r3
  40369c:	4613      	mov	r3, r2
  40369e:	e71a      	b.n	4034d6 <_dtoa_r+0x7de>
  4036a0:	4603      	mov	r3, r0
  4036a2:	e7f6      	b.n	403692 <_dtoa_r+0x99a>
  4036a4:	40240000 	.word	0x40240000
  4036a8:	f1b9 0f00 	cmp.w	r9, #0
  4036ac:	dc33      	bgt.n	403716 <_dtoa_r+0xa1e>
  4036ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4036b0:	2b02      	cmp	r3, #2
  4036b2:	dd30      	ble.n	403716 <_dtoa_r+0xa1e>
  4036b4:	f8cd 9010 	str.w	r9, [sp, #16]
  4036b8:	9b04      	ldr	r3, [sp, #16]
  4036ba:	b963      	cbnz	r3, 4036d6 <_dtoa_r+0x9de>
  4036bc:	4631      	mov	r1, r6
  4036be:	2205      	movs	r2, #5
  4036c0:	4620      	mov	r0, r4
  4036c2:	f000 fb80 	bl	403dc6 <__multadd>
  4036c6:	4601      	mov	r1, r0
  4036c8:	4606      	mov	r6, r0
  4036ca:	4650      	mov	r0, sl
  4036cc:	f000 fd39 	bl	404142 <__mcmp>
  4036d0:	2800      	cmp	r0, #0
  4036d2:	f73f ad5c 	bgt.w	40318e <_dtoa_r+0x496>
  4036d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4036d8:	9d06      	ldr	r5, [sp, #24]
  4036da:	ea6f 0b03 	mvn.w	fp, r3
  4036de:	2300      	movs	r3, #0
  4036e0:	9307      	str	r3, [sp, #28]
  4036e2:	4631      	mov	r1, r6
  4036e4:	4620      	mov	r0, r4
  4036e6:	f000 fb57 	bl	403d98 <_Bfree>
  4036ea:	2f00      	cmp	r7, #0
  4036ec:	f43f ae4b 	beq.w	403386 <_dtoa_r+0x68e>
  4036f0:	9b07      	ldr	r3, [sp, #28]
  4036f2:	b12b      	cbz	r3, 403700 <_dtoa_r+0xa08>
  4036f4:	42bb      	cmp	r3, r7
  4036f6:	d003      	beq.n	403700 <_dtoa_r+0xa08>
  4036f8:	4619      	mov	r1, r3
  4036fa:	4620      	mov	r0, r4
  4036fc:	f000 fb4c 	bl	403d98 <_Bfree>
  403700:	4639      	mov	r1, r7
  403702:	4620      	mov	r0, r4
  403704:	f000 fb48 	bl	403d98 <_Bfree>
  403708:	e63d      	b.n	403386 <_dtoa_r+0x68e>
  40370a:	2600      	movs	r6, #0
  40370c:	4637      	mov	r7, r6
  40370e:	e7e2      	b.n	4036d6 <_dtoa_r+0x9de>
  403710:	46bb      	mov	fp, r7
  403712:	4637      	mov	r7, r6
  403714:	e53b      	b.n	40318e <_dtoa_r+0x496>
  403716:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403718:	f8cd 9010 	str.w	r9, [sp, #16]
  40371c:	2b00      	cmp	r3, #0
  40371e:	f47f af13 	bne.w	403548 <_dtoa_r+0x850>
  403722:	9d06      	ldr	r5, [sp, #24]
  403724:	4631      	mov	r1, r6
  403726:	4650      	mov	r0, sl
  403728:	f7ff fa5a 	bl	402be0 <quorem>
  40372c:	f100 0930 	add.w	r9, r0, #48	; 0x30
  403730:	f805 9b01 	strb.w	r9, [r5], #1
  403734:	9b06      	ldr	r3, [sp, #24]
  403736:	9a04      	ldr	r2, [sp, #16]
  403738:	1aeb      	subs	r3, r5, r3
  40373a:	429a      	cmp	r2, r3
  40373c:	f300 8083 	bgt.w	403846 <_dtoa_r+0xb4e>
  403740:	9b06      	ldr	r3, [sp, #24]
  403742:	2a01      	cmp	r2, #1
  403744:	bfac      	ite	ge
  403746:	189b      	addge	r3, r3, r2
  403748:	3301      	addlt	r3, #1
  40374a:	4698      	mov	r8, r3
  40374c:	2300      	movs	r3, #0
  40374e:	9307      	str	r3, [sp, #28]
  403750:	4651      	mov	r1, sl
  403752:	2201      	movs	r2, #1
  403754:	4620      	mov	r0, r4
  403756:	f000 fca3 	bl	4040a0 <__lshift>
  40375a:	4631      	mov	r1, r6
  40375c:	4682      	mov	sl, r0
  40375e:	f000 fcf0 	bl	404142 <__mcmp>
  403762:	2800      	cmp	r0, #0
  403764:	dc35      	bgt.n	4037d2 <_dtoa_r+0xada>
  403766:	d102      	bne.n	40376e <_dtoa_r+0xa76>
  403768:	f019 0f01 	tst.w	r9, #1
  40376c:	d131      	bne.n	4037d2 <_dtoa_r+0xada>
  40376e:	4645      	mov	r5, r8
  403770:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  403774:	2b30      	cmp	r3, #48	; 0x30
  403776:	f105 32ff 	add.w	r2, r5, #4294967295
  40377a:	d1b2      	bne.n	4036e2 <_dtoa_r+0x9ea>
  40377c:	4615      	mov	r5, r2
  40377e:	e7f7      	b.n	403770 <_dtoa_r+0xa78>
  403780:	4638      	mov	r0, r7
  403782:	e6ff      	b.n	403584 <_dtoa_r+0x88c>
  403784:	2301      	movs	r3, #1
  403786:	e722      	b.n	4035ce <_dtoa_r+0x8d6>
  403788:	9a02      	ldr	r2, [sp, #8]
  40378a:	2a00      	cmp	r2, #0
  40378c:	db04      	blt.n	403798 <_dtoa_r+0xaa0>
  40378e:	d129      	bne.n	4037e4 <_dtoa_r+0xaec>
  403790:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403792:	bb3a      	cbnz	r2, 4037e4 <_dtoa_r+0xaec>
  403794:	9a08      	ldr	r2, [sp, #32]
  403796:	bb2a      	cbnz	r2, 4037e4 <_dtoa_r+0xaec>
  403798:	2b00      	cmp	r3, #0
  40379a:	f77f af32 	ble.w	403602 <_dtoa_r+0x90a>
  40379e:	4651      	mov	r1, sl
  4037a0:	2201      	movs	r2, #1
  4037a2:	4620      	mov	r0, r4
  4037a4:	f000 fc7c 	bl	4040a0 <__lshift>
  4037a8:	4631      	mov	r1, r6
  4037aa:	4682      	mov	sl, r0
  4037ac:	f000 fcc9 	bl	404142 <__mcmp>
  4037b0:	2800      	cmp	r0, #0
  4037b2:	dc05      	bgt.n	4037c0 <_dtoa_r+0xac8>
  4037b4:	f47f af25 	bne.w	403602 <_dtoa_r+0x90a>
  4037b8:	f019 0f01 	tst.w	r9, #1
  4037bc:	f43f af21 	beq.w	403602 <_dtoa_r+0x90a>
  4037c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4037c4:	f47f af1b 	bne.w	4035fe <_dtoa_r+0x906>
  4037c8:	2339      	movs	r3, #57	; 0x39
  4037ca:	f888 3000 	strb.w	r3, [r8]
  4037ce:	f108 0801 	add.w	r8, r8, #1
  4037d2:	4645      	mov	r5, r8
  4037d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4037d8:	2b39      	cmp	r3, #57	; 0x39
  4037da:	f105 32ff 	add.w	r2, r5, #4294967295
  4037de:	d03a      	beq.n	403856 <_dtoa_r+0xb5e>
  4037e0:	3301      	adds	r3, #1
  4037e2:	e03f      	b.n	403864 <_dtoa_r+0xb6c>
  4037e4:	2b00      	cmp	r3, #0
  4037e6:	f108 0501 	add.w	r5, r8, #1
  4037ea:	dd05      	ble.n	4037f8 <_dtoa_r+0xb00>
  4037ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  4037f0:	d0ea      	beq.n	4037c8 <_dtoa_r+0xad0>
  4037f2:	f109 0901 	add.w	r9, r9, #1
  4037f6:	e706      	b.n	403606 <_dtoa_r+0x90e>
  4037f8:	9b06      	ldr	r3, [sp, #24]
  4037fa:	9a04      	ldr	r2, [sp, #16]
  4037fc:	f805 9c01 	strb.w	r9, [r5, #-1]
  403800:	1aeb      	subs	r3, r5, r3
  403802:	4293      	cmp	r3, r2
  403804:	46a8      	mov	r8, r5
  403806:	d0a3      	beq.n	403750 <_dtoa_r+0xa58>
  403808:	4651      	mov	r1, sl
  40380a:	2300      	movs	r3, #0
  40380c:	220a      	movs	r2, #10
  40380e:	4620      	mov	r0, r4
  403810:	f000 fad9 	bl	403dc6 <__multadd>
  403814:	9b07      	ldr	r3, [sp, #28]
  403816:	9907      	ldr	r1, [sp, #28]
  403818:	42bb      	cmp	r3, r7
  40381a:	4682      	mov	sl, r0
  40381c:	f04f 0300 	mov.w	r3, #0
  403820:	f04f 020a 	mov.w	r2, #10
  403824:	4620      	mov	r0, r4
  403826:	d104      	bne.n	403832 <_dtoa_r+0xb3a>
  403828:	f000 facd 	bl	403dc6 <__multadd>
  40382c:	9007      	str	r0, [sp, #28]
  40382e:	4607      	mov	r7, r0
  403830:	e6b0      	b.n	403594 <_dtoa_r+0x89c>
  403832:	f000 fac8 	bl	403dc6 <__multadd>
  403836:	2300      	movs	r3, #0
  403838:	9007      	str	r0, [sp, #28]
  40383a:	220a      	movs	r2, #10
  40383c:	4639      	mov	r1, r7
  40383e:	4620      	mov	r0, r4
  403840:	f000 fac1 	bl	403dc6 <__multadd>
  403844:	e7f3      	b.n	40382e <_dtoa_r+0xb36>
  403846:	4651      	mov	r1, sl
  403848:	2300      	movs	r3, #0
  40384a:	220a      	movs	r2, #10
  40384c:	4620      	mov	r0, r4
  40384e:	f000 faba 	bl	403dc6 <__multadd>
  403852:	4682      	mov	sl, r0
  403854:	e766      	b.n	403724 <_dtoa_r+0xa2c>
  403856:	9b06      	ldr	r3, [sp, #24]
  403858:	4293      	cmp	r3, r2
  40385a:	d105      	bne.n	403868 <_dtoa_r+0xb70>
  40385c:	9a06      	ldr	r2, [sp, #24]
  40385e:	f10b 0b01 	add.w	fp, fp, #1
  403862:	2331      	movs	r3, #49	; 0x31
  403864:	7013      	strb	r3, [r2, #0]
  403866:	e73c      	b.n	4036e2 <_dtoa_r+0x9ea>
  403868:	4615      	mov	r5, r2
  40386a:	e7b3      	b.n	4037d4 <_dtoa_r+0xadc>
  40386c:	4b09      	ldr	r3, [pc, #36]	; (403894 <_dtoa_r+0xb9c>)
  40386e:	f7ff baa5 	b.w	402dbc <_dtoa_r+0xc4>
  403872:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403874:	2b00      	cmp	r3, #0
  403876:	f47f aa7f 	bne.w	402d78 <_dtoa_r+0x80>
  40387a:	4b07      	ldr	r3, [pc, #28]	; (403898 <_dtoa_r+0xba0>)
  40387c:	f7ff ba9e 	b.w	402dbc <_dtoa_r+0xc4>
  403880:	9b04      	ldr	r3, [sp, #16]
  403882:	2b00      	cmp	r3, #0
  403884:	f73f af4d 	bgt.w	403722 <_dtoa_r+0xa2a>
  403888:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40388a:	2b02      	cmp	r3, #2
  40388c:	f77f af49 	ble.w	403722 <_dtoa_r+0xa2a>
  403890:	e712      	b.n	4036b8 <_dtoa_r+0x9c0>
  403892:	bf00      	nop
  403894:	00404cf4 	.word	0x00404cf4
  403898:	00404d18 	.word	0x00404d18

0040389c <__sflush_r>:
  40389c:	898a      	ldrh	r2, [r1, #12]
  40389e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4038a2:	4605      	mov	r5, r0
  4038a4:	0710      	lsls	r0, r2, #28
  4038a6:	460c      	mov	r4, r1
  4038a8:	d45a      	bmi.n	403960 <__sflush_r+0xc4>
  4038aa:	684b      	ldr	r3, [r1, #4]
  4038ac:	2b00      	cmp	r3, #0
  4038ae:	dc05      	bgt.n	4038bc <__sflush_r+0x20>
  4038b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4038b2:	2b00      	cmp	r3, #0
  4038b4:	dc02      	bgt.n	4038bc <__sflush_r+0x20>
  4038b6:	2000      	movs	r0, #0
  4038b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4038bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4038be:	2e00      	cmp	r6, #0
  4038c0:	d0f9      	beq.n	4038b6 <__sflush_r+0x1a>
  4038c2:	2300      	movs	r3, #0
  4038c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  4038c8:	682f      	ldr	r7, [r5, #0]
  4038ca:	602b      	str	r3, [r5, #0]
  4038cc:	d033      	beq.n	403936 <__sflush_r+0x9a>
  4038ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4038d0:	89a3      	ldrh	r3, [r4, #12]
  4038d2:	075a      	lsls	r2, r3, #29
  4038d4:	d505      	bpl.n	4038e2 <__sflush_r+0x46>
  4038d6:	6863      	ldr	r3, [r4, #4]
  4038d8:	1ac0      	subs	r0, r0, r3
  4038da:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4038dc:	b10b      	cbz	r3, 4038e2 <__sflush_r+0x46>
  4038de:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4038e0:	1ac0      	subs	r0, r0, r3
  4038e2:	2300      	movs	r3, #0
  4038e4:	4602      	mov	r2, r0
  4038e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4038e8:	6a21      	ldr	r1, [r4, #32]
  4038ea:	4628      	mov	r0, r5
  4038ec:	47b0      	blx	r6
  4038ee:	1c43      	adds	r3, r0, #1
  4038f0:	89a3      	ldrh	r3, [r4, #12]
  4038f2:	d106      	bne.n	403902 <__sflush_r+0x66>
  4038f4:	6829      	ldr	r1, [r5, #0]
  4038f6:	291d      	cmp	r1, #29
  4038f8:	d84b      	bhi.n	403992 <__sflush_r+0xf6>
  4038fa:	4a2b      	ldr	r2, [pc, #172]	; (4039a8 <__sflush_r+0x10c>)
  4038fc:	40ca      	lsrs	r2, r1
  4038fe:	07d6      	lsls	r6, r2, #31
  403900:	d547      	bpl.n	403992 <__sflush_r+0xf6>
  403902:	2200      	movs	r2, #0
  403904:	6062      	str	r2, [r4, #4]
  403906:	04d9      	lsls	r1, r3, #19
  403908:	6922      	ldr	r2, [r4, #16]
  40390a:	6022      	str	r2, [r4, #0]
  40390c:	d504      	bpl.n	403918 <__sflush_r+0x7c>
  40390e:	1c42      	adds	r2, r0, #1
  403910:	d101      	bne.n	403916 <__sflush_r+0x7a>
  403912:	682b      	ldr	r3, [r5, #0]
  403914:	b903      	cbnz	r3, 403918 <__sflush_r+0x7c>
  403916:	6560      	str	r0, [r4, #84]	; 0x54
  403918:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40391a:	602f      	str	r7, [r5, #0]
  40391c:	2900      	cmp	r1, #0
  40391e:	d0ca      	beq.n	4038b6 <__sflush_r+0x1a>
  403920:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403924:	4299      	cmp	r1, r3
  403926:	d002      	beq.n	40392e <__sflush_r+0x92>
  403928:	4628      	mov	r0, r5
  40392a:	f000 fcdf 	bl	4042ec <_free_r>
  40392e:	2000      	movs	r0, #0
  403930:	6360      	str	r0, [r4, #52]	; 0x34
  403932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403936:	6a21      	ldr	r1, [r4, #32]
  403938:	2301      	movs	r3, #1
  40393a:	4628      	mov	r0, r5
  40393c:	47b0      	blx	r6
  40393e:	1c41      	adds	r1, r0, #1
  403940:	d1c6      	bne.n	4038d0 <__sflush_r+0x34>
  403942:	682b      	ldr	r3, [r5, #0]
  403944:	2b00      	cmp	r3, #0
  403946:	d0c3      	beq.n	4038d0 <__sflush_r+0x34>
  403948:	2b1d      	cmp	r3, #29
  40394a:	d001      	beq.n	403950 <__sflush_r+0xb4>
  40394c:	2b16      	cmp	r3, #22
  40394e:	d101      	bne.n	403954 <__sflush_r+0xb8>
  403950:	602f      	str	r7, [r5, #0]
  403952:	e7b0      	b.n	4038b6 <__sflush_r+0x1a>
  403954:	89a3      	ldrh	r3, [r4, #12]
  403956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40395a:	81a3      	strh	r3, [r4, #12]
  40395c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403960:	690f      	ldr	r7, [r1, #16]
  403962:	2f00      	cmp	r7, #0
  403964:	d0a7      	beq.n	4038b6 <__sflush_r+0x1a>
  403966:	0793      	lsls	r3, r2, #30
  403968:	680e      	ldr	r6, [r1, #0]
  40396a:	bf08      	it	eq
  40396c:	694b      	ldreq	r3, [r1, #20]
  40396e:	600f      	str	r7, [r1, #0]
  403970:	bf18      	it	ne
  403972:	2300      	movne	r3, #0
  403974:	eba6 0807 	sub.w	r8, r6, r7
  403978:	608b      	str	r3, [r1, #8]
  40397a:	f1b8 0f00 	cmp.w	r8, #0
  40397e:	dd9a      	ble.n	4038b6 <__sflush_r+0x1a>
  403980:	4643      	mov	r3, r8
  403982:	463a      	mov	r2, r7
  403984:	6a21      	ldr	r1, [r4, #32]
  403986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  403988:	4628      	mov	r0, r5
  40398a:	47b0      	blx	r6
  40398c:	2800      	cmp	r0, #0
  40398e:	dc07      	bgt.n	4039a0 <__sflush_r+0x104>
  403990:	89a3      	ldrh	r3, [r4, #12]
  403992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403996:	81a3      	strh	r3, [r4, #12]
  403998:	f04f 30ff 	mov.w	r0, #4294967295
  40399c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4039a0:	4407      	add	r7, r0
  4039a2:	eba8 0800 	sub.w	r8, r8, r0
  4039a6:	e7e8      	b.n	40397a <__sflush_r+0xde>
  4039a8:	20400001 	.word	0x20400001

004039ac <_fflush_r>:
  4039ac:	b538      	push	{r3, r4, r5, lr}
  4039ae:	690b      	ldr	r3, [r1, #16]
  4039b0:	4605      	mov	r5, r0
  4039b2:	460c      	mov	r4, r1
  4039b4:	b1db      	cbz	r3, 4039ee <_fflush_r+0x42>
  4039b6:	b118      	cbz	r0, 4039c0 <_fflush_r+0x14>
  4039b8:	6983      	ldr	r3, [r0, #24]
  4039ba:	b90b      	cbnz	r3, 4039c0 <_fflush_r+0x14>
  4039bc:	f000 f860 	bl	403a80 <__sinit>
  4039c0:	4b0c      	ldr	r3, [pc, #48]	; (4039f4 <_fflush_r+0x48>)
  4039c2:	429c      	cmp	r4, r3
  4039c4:	d109      	bne.n	4039da <_fflush_r+0x2e>
  4039c6:	686c      	ldr	r4, [r5, #4]
  4039c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039cc:	b17b      	cbz	r3, 4039ee <_fflush_r+0x42>
  4039ce:	4621      	mov	r1, r4
  4039d0:	4628      	mov	r0, r5
  4039d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4039d6:	f7ff bf61 	b.w	40389c <__sflush_r>
  4039da:	4b07      	ldr	r3, [pc, #28]	; (4039f8 <_fflush_r+0x4c>)
  4039dc:	429c      	cmp	r4, r3
  4039de:	d101      	bne.n	4039e4 <_fflush_r+0x38>
  4039e0:	68ac      	ldr	r4, [r5, #8]
  4039e2:	e7f1      	b.n	4039c8 <_fflush_r+0x1c>
  4039e4:	4b05      	ldr	r3, [pc, #20]	; (4039fc <_fflush_r+0x50>)
  4039e6:	429c      	cmp	r4, r3
  4039e8:	bf08      	it	eq
  4039ea:	68ec      	ldreq	r4, [r5, #12]
  4039ec:	e7ec      	b.n	4039c8 <_fflush_r+0x1c>
  4039ee:	2000      	movs	r0, #0
  4039f0:	bd38      	pop	{r3, r4, r5, pc}
  4039f2:	bf00      	nop
  4039f4:	00404d48 	.word	0x00404d48
  4039f8:	00404d68 	.word	0x00404d68
  4039fc:	00404d28 	.word	0x00404d28

00403a00 <_cleanup_r>:
  403a00:	4901      	ldr	r1, [pc, #4]	; (403a08 <_cleanup_r+0x8>)
  403a02:	f000 b8a9 	b.w	403b58 <_fwalk_reent>
  403a06:	bf00      	nop
  403a08:	004039ad 	.word	0x004039ad

00403a0c <std.isra.0>:
  403a0c:	2300      	movs	r3, #0
  403a0e:	b510      	push	{r4, lr}
  403a10:	4604      	mov	r4, r0
  403a12:	6003      	str	r3, [r0, #0]
  403a14:	6043      	str	r3, [r0, #4]
  403a16:	6083      	str	r3, [r0, #8]
  403a18:	8181      	strh	r1, [r0, #12]
  403a1a:	6643      	str	r3, [r0, #100]	; 0x64
  403a1c:	81c2      	strh	r2, [r0, #14]
  403a1e:	6103      	str	r3, [r0, #16]
  403a20:	6143      	str	r3, [r0, #20]
  403a22:	6183      	str	r3, [r0, #24]
  403a24:	4619      	mov	r1, r3
  403a26:	2208      	movs	r2, #8
  403a28:	305c      	adds	r0, #92	; 0x5c
  403a2a:	f7fe fb9c 	bl	402166 <memset>
  403a2e:	4b05      	ldr	r3, [pc, #20]	; (403a44 <std.isra.0+0x38>)
  403a30:	6263      	str	r3, [r4, #36]	; 0x24
  403a32:	4b05      	ldr	r3, [pc, #20]	; (403a48 <std.isra.0+0x3c>)
  403a34:	62a3      	str	r3, [r4, #40]	; 0x28
  403a36:	4b05      	ldr	r3, [pc, #20]	; (403a4c <std.isra.0+0x40>)
  403a38:	62e3      	str	r3, [r4, #44]	; 0x2c
  403a3a:	4b05      	ldr	r3, [pc, #20]	; (403a50 <std.isra.0+0x44>)
  403a3c:	6224      	str	r4, [r4, #32]
  403a3e:	6323      	str	r3, [r4, #48]	; 0x30
  403a40:	bd10      	pop	{r4, pc}
  403a42:	bf00      	nop
  403a44:	004046e1 	.word	0x004046e1
  403a48:	00404703 	.word	0x00404703
  403a4c:	0040473b 	.word	0x0040473b
  403a50:	0040475f 	.word	0x0040475f

00403a54 <__sfmoreglue>:
  403a54:	b570      	push	{r4, r5, r6, lr}
  403a56:	1e4a      	subs	r2, r1, #1
  403a58:	2568      	movs	r5, #104	; 0x68
  403a5a:	4355      	muls	r5, r2
  403a5c:	460e      	mov	r6, r1
  403a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  403a62:	f000 fc91 	bl	404388 <_malloc_r>
  403a66:	4604      	mov	r4, r0
  403a68:	b140      	cbz	r0, 403a7c <__sfmoreglue+0x28>
  403a6a:	2100      	movs	r1, #0
  403a6c:	e880 0042 	stmia.w	r0, {r1, r6}
  403a70:	300c      	adds	r0, #12
  403a72:	60a0      	str	r0, [r4, #8]
  403a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
  403a78:	f7fe fb75 	bl	402166 <memset>
  403a7c:	4620      	mov	r0, r4
  403a7e:	bd70      	pop	{r4, r5, r6, pc}

00403a80 <__sinit>:
  403a80:	6983      	ldr	r3, [r0, #24]
  403a82:	b510      	push	{r4, lr}
  403a84:	4604      	mov	r4, r0
  403a86:	bb33      	cbnz	r3, 403ad6 <__sinit+0x56>
  403a88:	6483      	str	r3, [r0, #72]	; 0x48
  403a8a:	64c3      	str	r3, [r0, #76]	; 0x4c
  403a8c:	6503      	str	r3, [r0, #80]	; 0x50
  403a8e:	4b12      	ldr	r3, [pc, #72]	; (403ad8 <__sinit+0x58>)
  403a90:	4a12      	ldr	r2, [pc, #72]	; (403adc <__sinit+0x5c>)
  403a92:	681b      	ldr	r3, [r3, #0]
  403a94:	6282      	str	r2, [r0, #40]	; 0x28
  403a96:	4298      	cmp	r0, r3
  403a98:	bf04      	itt	eq
  403a9a:	2301      	moveq	r3, #1
  403a9c:	6183      	streq	r3, [r0, #24]
  403a9e:	f000 f81f 	bl	403ae0 <__sfp>
  403aa2:	6060      	str	r0, [r4, #4]
  403aa4:	4620      	mov	r0, r4
  403aa6:	f000 f81b 	bl	403ae0 <__sfp>
  403aaa:	60a0      	str	r0, [r4, #8]
  403aac:	4620      	mov	r0, r4
  403aae:	f000 f817 	bl	403ae0 <__sfp>
  403ab2:	2200      	movs	r2, #0
  403ab4:	60e0      	str	r0, [r4, #12]
  403ab6:	2104      	movs	r1, #4
  403ab8:	6860      	ldr	r0, [r4, #4]
  403aba:	f7ff ffa7 	bl	403a0c <std.isra.0>
  403abe:	2201      	movs	r2, #1
  403ac0:	2109      	movs	r1, #9
  403ac2:	68a0      	ldr	r0, [r4, #8]
  403ac4:	f7ff ffa2 	bl	403a0c <std.isra.0>
  403ac8:	2202      	movs	r2, #2
  403aca:	2112      	movs	r1, #18
  403acc:	68e0      	ldr	r0, [r4, #12]
  403ace:	f7ff ff9d 	bl	403a0c <std.isra.0>
  403ad2:	2301      	movs	r3, #1
  403ad4:	61a3      	str	r3, [r4, #24]
  403ad6:	bd10      	pop	{r4, pc}
  403ad8:	00404ce0 	.word	0x00404ce0
  403adc:	00403a01 	.word	0x00403a01

00403ae0 <__sfp>:
  403ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403ae2:	4b1c      	ldr	r3, [pc, #112]	; (403b54 <__sfp+0x74>)
  403ae4:	681e      	ldr	r6, [r3, #0]
  403ae6:	69b3      	ldr	r3, [r6, #24]
  403ae8:	4607      	mov	r7, r0
  403aea:	b913      	cbnz	r3, 403af2 <__sfp+0x12>
  403aec:	4630      	mov	r0, r6
  403aee:	f7ff ffc7 	bl	403a80 <__sinit>
  403af2:	3648      	adds	r6, #72	; 0x48
  403af4:	68b4      	ldr	r4, [r6, #8]
  403af6:	6873      	ldr	r3, [r6, #4]
  403af8:	3b01      	subs	r3, #1
  403afa:	d503      	bpl.n	403b04 <__sfp+0x24>
  403afc:	6833      	ldr	r3, [r6, #0]
  403afe:	b133      	cbz	r3, 403b0e <__sfp+0x2e>
  403b00:	6836      	ldr	r6, [r6, #0]
  403b02:	e7f7      	b.n	403af4 <__sfp+0x14>
  403b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  403b08:	b16d      	cbz	r5, 403b26 <__sfp+0x46>
  403b0a:	3468      	adds	r4, #104	; 0x68
  403b0c:	e7f4      	b.n	403af8 <__sfp+0x18>
  403b0e:	2104      	movs	r1, #4
  403b10:	4638      	mov	r0, r7
  403b12:	f7ff ff9f 	bl	403a54 <__sfmoreglue>
  403b16:	6030      	str	r0, [r6, #0]
  403b18:	2800      	cmp	r0, #0
  403b1a:	d1f1      	bne.n	403b00 <__sfp+0x20>
  403b1c:	230c      	movs	r3, #12
  403b1e:	603b      	str	r3, [r7, #0]
  403b20:	4604      	mov	r4, r0
  403b22:	4620      	mov	r0, r4
  403b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403b2a:	81e3      	strh	r3, [r4, #14]
  403b2c:	2301      	movs	r3, #1
  403b2e:	81a3      	strh	r3, [r4, #12]
  403b30:	6665      	str	r5, [r4, #100]	; 0x64
  403b32:	6025      	str	r5, [r4, #0]
  403b34:	60a5      	str	r5, [r4, #8]
  403b36:	6065      	str	r5, [r4, #4]
  403b38:	6125      	str	r5, [r4, #16]
  403b3a:	6165      	str	r5, [r4, #20]
  403b3c:	61a5      	str	r5, [r4, #24]
  403b3e:	2208      	movs	r2, #8
  403b40:	4629      	mov	r1, r5
  403b42:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  403b46:	f7fe fb0e 	bl	402166 <memset>
  403b4a:	6365      	str	r5, [r4, #52]	; 0x34
  403b4c:	63a5      	str	r5, [r4, #56]	; 0x38
  403b4e:	64a5      	str	r5, [r4, #72]	; 0x48
  403b50:	64e5      	str	r5, [r4, #76]	; 0x4c
  403b52:	e7e6      	b.n	403b22 <__sfp+0x42>
  403b54:	00404ce0 	.word	0x00404ce0

00403b58 <_fwalk_reent>:
  403b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403b5c:	4680      	mov	r8, r0
  403b5e:	4689      	mov	r9, r1
  403b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
  403b64:	2600      	movs	r6, #0
  403b66:	b914      	cbnz	r4, 403b6e <_fwalk_reent+0x16>
  403b68:	4630      	mov	r0, r6
  403b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403b6e:	68a5      	ldr	r5, [r4, #8]
  403b70:	6867      	ldr	r7, [r4, #4]
  403b72:	3f01      	subs	r7, #1
  403b74:	d501      	bpl.n	403b7a <_fwalk_reent+0x22>
  403b76:	6824      	ldr	r4, [r4, #0]
  403b78:	e7f5      	b.n	403b66 <_fwalk_reent+0xe>
  403b7a:	89ab      	ldrh	r3, [r5, #12]
  403b7c:	2b01      	cmp	r3, #1
  403b7e:	d907      	bls.n	403b90 <_fwalk_reent+0x38>
  403b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  403b84:	3301      	adds	r3, #1
  403b86:	d003      	beq.n	403b90 <_fwalk_reent+0x38>
  403b88:	4629      	mov	r1, r5
  403b8a:	4640      	mov	r0, r8
  403b8c:	47c8      	blx	r9
  403b8e:	4306      	orrs	r6, r0
  403b90:	3568      	adds	r5, #104	; 0x68
  403b92:	e7ee      	b.n	403b72 <_fwalk_reent+0x1a>

00403b94 <_localeconv_r>:
  403b94:	4b04      	ldr	r3, [pc, #16]	; (403ba8 <_localeconv_r+0x14>)
  403b96:	681b      	ldr	r3, [r3, #0]
  403b98:	6a18      	ldr	r0, [r3, #32]
  403b9a:	4b04      	ldr	r3, [pc, #16]	; (403bac <_localeconv_r+0x18>)
  403b9c:	2800      	cmp	r0, #0
  403b9e:	bf08      	it	eq
  403ba0:	4618      	moveq	r0, r3
  403ba2:	30f0      	adds	r0, #240	; 0xf0
  403ba4:	4770      	bx	lr
  403ba6:	bf00      	nop
  403ba8:	20400014 	.word	0x20400014
  403bac:	20400078 	.word	0x20400078

00403bb0 <__swhatbuf_r>:
  403bb0:	b570      	push	{r4, r5, r6, lr}
  403bb2:	460e      	mov	r6, r1
  403bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403bb8:	2900      	cmp	r1, #0
  403bba:	b090      	sub	sp, #64	; 0x40
  403bbc:	4614      	mov	r4, r2
  403bbe:	461d      	mov	r5, r3
  403bc0:	da07      	bge.n	403bd2 <__swhatbuf_r+0x22>
  403bc2:	2300      	movs	r3, #0
  403bc4:	602b      	str	r3, [r5, #0]
  403bc6:	89b3      	ldrh	r3, [r6, #12]
  403bc8:	061a      	lsls	r2, r3, #24
  403bca:	d410      	bmi.n	403bee <__swhatbuf_r+0x3e>
  403bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403bd0:	e00e      	b.n	403bf0 <__swhatbuf_r+0x40>
  403bd2:	aa01      	add	r2, sp, #4
  403bd4:	f000 feaa 	bl	40492c <_fstat_r>
  403bd8:	2800      	cmp	r0, #0
  403bda:	dbf2      	blt.n	403bc2 <__swhatbuf_r+0x12>
  403bdc:	9a02      	ldr	r2, [sp, #8]
  403bde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403be2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  403be6:	425a      	negs	r2, r3
  403be8:	415a      	adcs	r2, r3
  403bea:	602a      	str	r2, [r5, #0]
  403bec:	e7ee      	b.n	403bcc <__swhatbuf_r+0x1c>
  403bee:	2340      	movs	r3, #64	; 0x40
  403bf0:	2000      	movs	r0, #0
  403bf2:	6023      	str	r3, [r4, #0]
  403bf4:	b010      	add	sp, #64	; 0x40
  403bf6:	bd70      	pop	{r4, r5, r6, pc}

00403bf8 <__smakebuf_r>:
  403bf8:	898b      	ldrh	r3, [r1, #12]
  403bfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  403bfc:	079d      	lsls	r5, r3, #30
  403bfe:	4606      	mov	r6, r0
  403c00:	460c      	mov	r4, r1
  403c02:	d507      	bpl.n	403c14 <__smakebuf_r+0x1c>
  403c04:	f104 0347 	add.w	r3, r4, #71	; 0x47
  403c08:	6023      	str	r3, [r4, #0]
  403c0a:	6123      	str	r3, [r4, #16]
  403c0c:	2301      	movs	r3, #1
  403c0e:	6163      	str	r3, [r4, #20]
  403c10:	b002      	add	sp, #8
  403c12:	bd70      	pop	{r4, r5, r6, pc}
  403c14:	ab01      	add	r3, sp, #4
  403c16:	466a      	mov	r2, sp
  403c18:	f7ff ffca 	bl	403bb0 <__swhatbuf_r>
  403c1c:	9900      	ldr	r1, [sp, #0]
  403c1e:	4605      	mov	r5, r0
  403c20:	4630      	mov	r0, r6
  403c22:	f000 fbb1 	bl	404388 <_malloc_r>
  403c26:	b948      	cbnz	r0, 403c3c <__smakebuf_r+0x44>
  403c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c2c:	059a      	lsls	r2, r3, #22
  403c2e:	d4ef      	bmi.n	403c10 <__smakebuf_r+0x18>
  403c30:	f023 0303 	bic.w	r3, r3, #3
  403c34:	f043 0302 	orr.w	r3, r3, #2
  403c38:	81a3      	strh	r3, [r4, #12]
  403c3a:	e7e3      	b.n	403c04 <__smakebuf_r+0xc>
  403c3c:	4b0d      	ldr	r3, [pc, #52]	; (403c74 <__smakebuf_r+0x7c>)
  403c3e:	62b3      	str	r3, [r6, #40]	; 0x28
  403c40:	89a3      	ldrh	r3, [r4, #12]
  403c42:	6020      	str	r0, [r4, #0]
  403c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403c48:	81a3      	strh	r3, [r4, #12]
  403c4a:	9b00      	ldr	r3, [sp, #0]
  403c4c:	6163      	str	r3, [r4, #20]
  403c4e:	9b01      	ldr	r3, [sp, #4]
  403c50:	6120      	str	r0, [r4, #16]
  403c52:	b15b      	cbz	r3, 403c6c <__smakebuf_r+0x74>
  403c54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403c58:	4630      	mov	r0, r6
  403c5a:	f000 fe79 	bl	404950 <_isatty_r>
  403c5e:	b128      	cbz	r0, 403c6c <__smakebuf_r+0x74>
  403c60:	89a3      	ldrh	r3, [r4, #12]
  403c62:	f023 0303 	bic.w	r3, r3, #3
  403c66:	f043 0301 	orr.w	r3, r3, #1
  403c6a:	81a3      	strh	r3, [r4, #12]
  403c6c:	89a3      	ldrh	r3, [r4, #12]
  403c6e:	431d      	orrs	r5, r3
  403c70:	81a5      	strh	r5, [r4, #12]
  403c72:	e7cd      	b.n	403c10 <__smakebuf_r+0x18>
  403c74:	00403a01 	.word	0x00403a01

00403c78 <malloc>:
  403c78:	4b02      	ldr	r3, [pc, #8]	; (403c84 <malloc+0xc>)
  403c7a:	4601      	mov	r1, r0
  403c7c:	6818      	ldr	r0, [r3, #0]
  403c7e:	f000 bb83 	b.w	404388 <_malloc_r>
  403c82:	bf00      	nop
  403c84:	20400014 	.word	0x20400014
	...

00403c90 <memchr>:
  403c90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403c94:	2a10      	cmp	r2, #16
  403c96:	db2b      	blt.n	403cf0 <memchr+0x60>
  403c98:	f010 0f07 	tst.w	r0, #7
  403c9c:	d008      	beq.n	403cb0 <memchr+0x20>
  403c9e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403ca2:	3a01      	subs	r2, #1
  403ca4:	428b      	cmp	r3, r1
  403ca6:	d02d      	beq.n	403d04 <memchr+0x74>
  403ca8:	f010 0f07 	tst.w	r0, #7
  403cac:	b342      	cbz	r2, 403d00 <memchr+0x70>
  403cae:	d1f6      	bne.n	403c9e <memchr+0xe>
  403cb0:	b4f0      	push	{r4, r5, r6, r7}
  403cb2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403cb6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403cba:	f022 0407 	bic.w	r4, r2, #7
  403cbe:	f07f 0700 	mvns.w	r7, #0
  403cc2:	2300      	movs	r3, #0
  403cc4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403cc8:	3c08      	subs	r4, #8
  403cca:	ea85 0501 	eor.w	r5, r5, r1
  403cce:	ea86 0601 	eor.w	r6, r6, r1
  403cd2:	fa85 f547 	uadd8	r5, r5, r7
  403cd6:	faa3 f587 	sel	r5, r3, r7
  403cda:	fa86 f647 	uadd8	r6, r6, r7
  403cde:	faa5 f687 	sel	r6, r5, r7
  403ce2:	b98e      	cbnz	r6, 403d08 <memchr+0x78>
  403ce4:	d1ee      	bne.n	403cc4 <memchr+0x34>
  403ce6:	bcf0      	pop	{r4, r5, r6, r7}
  403ce8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403cec:	f002 0207 	and.w	r2, r2, #7
  403cf0:	b132      	cbz	r2, 403d00 <memchr+0x70>
  403cf2:	f810 3b01 	ldrb.w	r3, [r0], #1
  403cf6:	3a01      	subs	r2, #1
  403cf8:	ea83 0301 	eor.w	r3, r3, r1
  403cfc:	b113      	cbz	r3, 403d04 <memchr+0x74>
  403cfe:	d1f8      	bne.n	403cf2 <memchr+0x62>
  403d00:	2000      	movs	r0, #0
  403d02:	4770      	bx	lr
  403d04:	3801      	subs	r0, #1
  403d06:	4770      	bx	lr
  403d08:	2d00      	cmp	r5, #0
  403d0a:	bf06      	itte	eq
  403d0c:	4635      	moveq	r5, r6
  403d0e:	3803      	subeq	r0, #3
  403d10:	3807      	subne	r0, #7
  403d12:	f015 0f01 	tst.w	r5, #1
  403d16:	d107      	bne.n	403d28 <memchr+0x98>
  403d18:	3001      	adds	r0, #1
  403d1a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403d1e:	bf02      	ittt	eq
  403d20:	3001      	addeq	r0, #1
  403d22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403d26:	3001      	addeq	r0, #1
  403d28:	bcf0      	pop	{r4, r5, r6, r7}
  403d2a:	3801      	subs	r0, #1
  403d2c:	4770      	bx	lr
  403d2e:	bf00      	nop

00403d30 <_Balloc>:
  403d30:	b570      	push	{r4, r5, r6, lr}
  403d32:	6a45      	ldr	r5, [r0, #36]	; 0x24
  403d34:	4604      	mov	r4, r0
  403d36:	460e      	mov	r6, r1
  403d38:	b93d      	cbnz	r5, 403d4a <_Balloc+0x1a>
  403d3a:	2010      	movs	r0, #16
  403d3c:	f7ff ff9c 	bl	403c78 <malloc>
  403d40:	6260      	str	r0, [r4, #36]	; 0x24
  403d42:	6045      	str	r5, [r0, #4]
  403d44:	6085      	str	r5, [r0, #8]
  403d46:	6005      	str	r5, [r0, #0]
  403d48:	60c5      	str	r5, [r0, #12]
  403d4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  403d4c:	68eb      	ldr	r3, [r5, #12]
  403d4e:	b183      	cbz	r3, 403d72 <_Balloc+0x42>
  403d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403d52:	68db      	ldr	r3, [r3, #12]
  403d54:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  403d58:	b9b8      	cbnz	r0, 403d8a <_Balloc+0x5a>
  403d5a:	2101      	movs	r1, #1
  403d5c:	fa01 f506 	lsl.w	r5, r1, r6
  403d60:	1d6a      	adds	r2, r5, #5
  403d62:	0092      	lsls	r2, r2, #2
  403d64:	4620      	mov	r0, r4
  403d66:	f000 fab3 	bl	4042d0 <_calloc_r>
  403d6a:	b160      	cbz	r0, 403d86 <_Balloc+0x56>
  403d6c:	6046      	str	r6, [r0, #4]
  403d6e:	6085      	str	r5, [r0, #8]
  403d70:	e00e      	b.n	403d90 <_Balloc+0x60>
  403d72:	2221      	movs	r2, #33	; 0x21
  403d74:	2104      	movs	r1, #4
  403d76:	4620      	mov	r0, r4
  403d78:	f000 faaa 	bl	4042d0 <_calloc_r>
  403d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403d7e:	60e8      	str	r0, [r5, #12]
  403d80:	68db      	ldr	r3, [r3, #12]
  403d82:	2b00      	cmp	r3, #0
  403d84:	d1e4      	bne.n	403d50 <_Balloc+0x20>
  403d86:	2000      	movs	r0, #0
  403d88:	bd70      	pop	{r4, r5, r6, pc}
  403d8a:	6802      	ldr	r2, [r0, #0]
  403d8c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  403d90:	2300      	movs	r3, #0
  403d92:	6103      	str	r3, [r0, #16]
  403d94:	60c3      	str	r3, [r0, #12]
  403d96:	bd70      	pop	{r4, r5, r6, pc}

00403d98 <_Bfree>:
  403d98:	b570      	push	{r4, r5, r6, lr}
  403d9a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  403d9c:	4606      	mov	r6, r0
  403d9e:	460d      	mov	r5, r1
  403da0:	b93c      	cbnz	r4, 403db2 <_Bfree+0x1a>
  403da2:	2010      	movs	r0, #16
  403da4:	f7ff ff68 	bl	403c78 <malloc>
  403da8:	6270      	str	r0, [r6, #36]	; 0x24
  403daa:	6044      	str	r4, [r0, #4]
  403dac:	6084      	str	r4, [r0, #8]
  403dae:	6004      	str	r4, [r0, #0]
  403db0:	60c4      	str	r4, [r0, #12]
  403db2:	b13d      	cbz	r5, 403dc4 <_Bfree+0x2c>
  403db4:	6a73      	ldr	r3, [r6, #36]	; 0x24
  403db6:	686a      	ldr	r2, [r5, #4]
  403db8:	68db      	ldr	r3, [r3, #12]
  403dba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  403dbe:	6029      	str	r1, [r5, #0]
  403dc0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  403dc4:	bd70      	pop	{r4, r5, r6, pc}

00403dc6 <__multadd>:
  403dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403dca:	690d      	ldr	r5, [r1, #16]
  403dcc:	461f      	mov	r7, r3
  403dce:	4606      	mov	r6, r0
  403dd0:	460c      	mov	r4, r1
  403dd2:	f101 0e14 	add.w	lr, r1, #20
  403dd6:	2300      	movs	r3, #0
  403dd8:	f8de 0000 	ldr.w	r0, [lr]
  403ddc:	b281      	uxth	r1, r0
  403dde:	fb02 7101 	mla	r1, r2, r1, r7
  403de2:	0c0f      	lsrs	r7, r1, #16
  403de4:	0c00      	lsrs	r0, r0, #16
  403de6:	fb02 7000 	mla	r0, r2, r0, r7
  403dea:	b289      	uxth	r1, r1
  403dec:	3301      	adds	r3, #1
  403dee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  403df2:	429d      	cmp	r5, r3
  403df4:	ea4f 4710 	mov.w	r7, r0, lsr #16
  403df8:	f84e 1b04 	str.w	r1, [lr], #4
  403dfc:	dcec      	bgt.n	403dd8 <__multadd+0x12>
  403dfe:	b1d7      	cbz	r7, 403e36 <__multadd+0x70>
  403e00:	68a3      	ldr	r3, [r4, #8]
  403e02:	429d      	cmp	r5, r3
  403e04:	db12      	blt.n	403e2c <__multadd+0x66>
  403e06:	6861      	ldr	r1, [r4, #4]
  403e08:	4630      	mov	r0, r6
  403e0a:	3101      	adds	r1, #1
  403e0c:	f7ff ff90 	bl	403d30 <_Balloc>
  403e10:	6922      	ldr	r2, [r4, #16]
  403e12:	3202      	adds	r2, #2
  403e14:	f104 010c 	add.w	r1, r4, #12
  403e18:	4680      	mov	r8, r0
  403e1a:	0092      	lsls	r2, r2, #2
  403e1c:	300c      	adds	r0, #12
  403e1e:	f7fe f997 	bl	402150 <memcpy>
  403e22:	4621      	mov	r1, r4
  403e24:	4630      	mov	r0, r6
  403e26:	f7ff ffb7 	bl	403d98 <_Bfree>
  403e2a:	4644      	mov	r4, r8
  403e2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  403e30:	3501      	adds	r5, #1
  403e32:	615f      	str	r7, [r3, #20]
  403e34:	6125      	str	r5, [r4, #16]
  403e36:	4620      	mov	r0, r4
  403e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403e3c <__hi0bits>:
  403e3c:	0c02      	lsrs	r2, r0, #16
  403e3e:	0412      	lsls	r2, r2, #16
  403e40:	4603      	mov	r3, r0
  403e42:	b9b2      	cbnz	r2, 403e72 <__hi0bits+0x36>
  403e44:	0403      	lsls	r3, r0, #16
  403e46:	2010      	movs	r0, #16
  403e48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  403e4c:	bf04      	itt	eq
  403e4e:	021b      	lsleq	r3, r3, #8
  403e50:	3008      	addeq	r0, #8
  403e52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  403e56:	bf04      	itt	eq
  403e58:	011b      	lsleq	r3, r3, #4
  403e5a:	3004      	addeq	r0, #4
  403e5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  403e60:	bf04      	itt	eq
  403e62:	009b      	lsleq	r3, r3, #2
  403e64:	3002      	addeq	r0, #2
  403e66:	2b00      	cmp	r3, #0
  403e68:	db06      	blt.n	403e78 <__hi0bits+0x3c>
  403e6a:	005b      	lsls	r3, r3, #1
  403e6c:	d503      	bpl.n	403e76 <__hi0bits+0x3a>
  403e6e:	3001      	adds	r0, #1
  403e70:	4770      	bx	lr
  403e72:	2000      	movs	r0, #0
  403e74:	e7e8      	b.n	403e48 <__hi0bits+0xc>
  403e76:	2020      	movs	r0, #32
  403e78:	4770      	bx	lr

00403e7a <__lo0bits>:
  403e7a:	6803      	ldr	r3, [r0, #0]
  403e7c:	f013 0207 	ands.w	r2, r3, #7
  403e80:	4601      	mov	r1, r0
  403e82:	d00b      	beq.n	403e9c <__lo0bits+0x22>
  403e84:	07da      	lsls	r2, r3, #31
  403e86:	d423      	bmi.n	403ed0 <__lo0bits+0x56>
  403e88:	0798      	lsls	r0, r3, #30
  403e8a:	bf49      	itett	mi
  403e8c:	085b      	lsrmi	r3, r3, #1
  403e8e:	089b      	lsrpl	r3, r3, #2
  403e90:	2001      	movmi	r0, #1
  403e92:	600b      	strmi	r3, [r1, #0]
  403e94:	bf5c      	itt	pl
  403e96:	600b      	strpl	r3, [r1, #0]
  403e98:	2002      	movpl	r0, #2
  403e9a:	4770      	bx	lr
  403e9c:	b298      	uxth	r0, r3
  403e9e:	b9a8      	cbnz	r0, 403ecc <__lo0bits+0x52>
  403ea0:	0c1b      	lsrs	r3, r3, #16
  403ea2:	2010      	movs	r0, #16
  403ea4:	f013 0fff 	tst.w	r3, #255	; 0xff
  403ea8:	bf04      	itt	eq
  403eaa:	0a1b      	lsreq	r3, r3, #8
  403eac:	3008      	addeq	r0, #8
  403eae:	071a      	lsls	r2, r3, #28
  403eb0:	bf04      	itt	eq
  403eb2:	091b      	lsreq	r3, r3, #4
  403eb4:	3004      	addeq	r0, #4
  403eb6:	079a      	lsls	r2, r3, #30
  403eb8:	bf04      	itt	eq
  403eba:	089b      	lsreq	r3, r3, #2
  403ebc:	3002      	addeq	r0, #2
  403ebe:	07da      	lsls	r2, r3, #31
  403ec0:	d402      	bmi.n	403ec8 <__lo0bits+0x4e>
  403ec2:	085b      	lsrs	r3, r3, #1
  403ec4:	d006      	beq.n	403ed4 <__lo0bits+0x5a>
  403ec6:	3001      	adds	r0, #1
  403ec8:	600b      	str	r3, [r1, #0]
  403eca:	4770      	bx	lr
  403ecc:	4610      	mov	r0, r2
  403ece:	e7e9      	b.n	403ea4 <__lo0bits+0x2a>
  403ed0:	2000      	movs	r0, #0
  403ed2:	4770      	bx	lr
  403ed4:	2020      	movs	r0, #32
  403ed6:	4770      	bx	lr

00403ed8 <__i2b>:
  403ed8:	b510      	push	{r4, lr}
  403eda:	460c      	mov	r4, r1
  403edc:	2101      	movs	r1, #1
  403ede:	f7ff ff27 	bl	403d30 <_Balloc>
  403ee2:	2201      	movs	r2, #1
  403ee4:	6144      	str	r4, [r0, #20]
  403ee6:	6102      	str	r2, [r0, #16]
  403ee8:	bd10      	pop	{r4, pc}

00403eea <__multiply>:
  403eea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403eee:	4614      	mov	r4, r2
  403ef0:	690a      	ldr	r2, [r1, #16]
  403ef2:	6923      	ldr	r3, [r4, #16]
  403ef4:	429a      	cmp	r2, r3
  403ef6:	bfb8      	it	lt
  403ef8:	460b      	movlt	r3, r1
  403efa:	4689      	mov	r9, r1
  403efc:	bfbc      	itt	lt
  403efe:	46a1      	movlt	r9, r4
  403f00:	461c      	movlt	r4, r3
  403f02:	f8d9 7010 	ldr.w	r7, [r9, #16]
  403f06:	f8d4 a010 	ldr.w	sl, [r4, #16]
  403f0a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  403f0e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  403f12:	eb07 060a 	add.w	r6, r7, sl
  403f16:	429e      	cmp	r6, r3
  403f18:	bfc8      	it	gt
  403f1a:	3101      	addgt	r1, #1
  403f1c:	f7ff ff08 	bl	403d30 <_Balloc>
  403f20:	f100 0514 	add.w	r5, r0, #20
  403f24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  403f28:	462b      	mov	r3, r5
  403f2a:	2200      	movs	r2, #0
  403f2c:	4543      	cmp	r3, r8
  403f2e:	d316      	bcc.n	403f5e <__multiply+0x74>
  403f30:	f104 0214 	add.w	r2, r4, #20
  403f34:	f109 0114 	add.w	r1, r9, #20
  403f38:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  403f3c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  403f40:	9301      	str	r3, [sp, #4]
  403f42:	9c01      	ldr	r4, [sp, #4]
  403f44:	4294      	cmp	r4, r2
  403f46:	4613      	mov	r3, r2
  403f48:	d80c      	bhi.n	403f64 <__multiply+0x7a>
  403f4a:	2e00      	cmp	r6, #0
  403f4c:	dd03      	ble.n	403f56 <__multiply+0x6c>
  403f4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  403f52:	2b00      	cmp	r3, #0
  403f54:	d054      	beq.n	404000 <__multiply+0x116>
  403f56:	6106      	str	r6, [r0, #16]
  403f58:	b003      	add	sp, #12
  403f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f5e:	f843 2b04 	str.w	r2, [r3], #4
  403f62:	e7e3      	b.n	403f2c <__multiply+0x42>
  403f64:	f8b3 a000 	ldrh.w	sl, [r3]
  403f68:	3204      	adds	r2, #4
  403f6a:	f1ba 0f00 	cmp.w	sl, #0
  403f6e:	d020      	beq.n	403fb2 <__multiply+0xc8>
  403f70:	46ae      	mov	lr, r5
  403f72:	4689      	mov	r9, r1
  403f74:	f04f 0c00 	mov.w	ip, #0
  403f78:	f859 4b04 	ldr.w	r4, [r9], #4
  403f7c:	f8be b000 	ldrh.w	fp, [lr]
  403f80:	b2a3      	uxth	r3, r4
  403f82:	fb0a b303 	mla	r3, sl, r3, fp
  403f86:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  403f8a:	f8de 4000 	ldr.w	r4, [lr]
  403f8e:	4463      	add	r3, ip
  403f90:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  403f94:	fb0a c40b 	mla	r4, sl, fp, ip
  403f98:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  403f9c:	b29b      	uxth	r3, r3
  403f9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  403fa2:	454f      	cmp	r7, r9
  403fa4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  403fa8:	f84e 3b04 	str.w	r3, [lr], #4
  403fac:	d8e4      	bhi.n	403f78 <__multiply+0x8e>
  403fae:	f8ce c000 	str.w	ip, [lr]
  403fb2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  403fb6:	f1b9 0f00 	cmp.w	r9, #0
  403fba:	d01f      	beq.n	403ffc <__multiply+0x112>
  403fbc:	682b      	ldr	r3, [r5, #0]
  403fbe:	46ae      	mov	lr, r5
  403fc0:	468c      	mov	ip, r1
  403fc2:	f04f 0a00 	mov.w	sl, #0
  403fc6:	f8bc 4000 	ldrh.w	r4, [ip]
  403fca:	f8be b002 	ldrh.w	fp, [lr, #2]
  403fce:	fb09 b404 	mla	r4, r9, r4, fp
  403fd2:	44a2      	add	sl, r4
  403fd4:	b29b      	uxth	r3, r3
  403fd6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  403fda:	f84e 3b04 	str.w	r3, [lr], #4
  403fde:	f85c 3b04 	ldr.w	r3, [ip], #4
  403fe2:	f8be 4000 	ldrh.w	r4, [lr]
  403fe6:	0c1b      	lsrs	r3, r3, #16
  403fe8:	fb09 4303 	mla	r3, r9, r3, r4
  403fec:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  403ff0:	4567      	cmp	r7, ip
  403ff2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  403ff6:	d8e6      	bhi.n	403fc6 <__multiply+0xdc>
  403ff8:	f8ce 3000 	str.w	r3, [lr]
  403ffc:	3504      	adds	r5, #4
  403ffe:	e7a0      	b.n	403f42 <__multiply+0x58>
  404000:	3e01      	subs	r6, #1
  404002:	e7a2      	b.n	403f4a <__multiply+0x60>

00404004 <__pow5mult>:
  404004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404008:	4615      	mov	r5, r2
  40400a:	f012 0203 	ands.w	r2, r2, #3
  40400e:	4606      	mov	r6, r0
  404010:	460f      	mov	r7, r1
  404012:	d007      	beq.n	404024 <__pow5mult+0x20>
  404014:	3a01      	subs	r2, #1
  404016:	4c21      	ldr	r4, [pc, #132]	; (40409c <__pow5mult+0x98>)
  404018:	2300      	movs	r3, #0
  40401a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40401e:	f7ff fed2 	bl	403dc6 <__multadd>
  404022:	4607      	mov	r7, r0
  404024:	10ad      	asrs	r5, r5, #2
  404026:	d035      	beq.n	404094 <__pow5mult+0x90>
  404028:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40402a:	b93c      	cbnz	r4, 40403c <__pow5mult+0x38>
  40402c:	2010      	movs	r0, #16
  40402e:	f7ff fe23 	bl	403c78 <malloc>
  404032:	6270      	str	r0, [r6, #36]	; 0x24
  404034:	6044      	str	r4, [r0, #4]
  404036:	6084      	str	r4, [r0, #8]
  404038:	6004      	str	r4, [r0, #0]
  40403a:	60c4      	str	r4, [r0, #12]
  40403c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  404040:	f8d8 4008 	ldr.w	r4, [r8, #8]
  404044:	b94c      	cbnz	r4, 40405a <__pow5mult+0x56>
  404046:	f240 2171 	movw	r1, #625	; 0x271
  40404a:	4630      	mov	r0, r6
  40404c:	f7ff ff44 	bl	403ed8 <__i2b>
  404050:	2300      	movs	r3, #0
  404052:	f8c8 0008 	str.w	r0, [r8, #8]
  404056:	4604      	mov	r4, r0
  404058:	6003      	str	r3, [r0, #0]
  40405a:	f04f 0800 	mov.w	r8, #0
  40405e:	07eb      	lsls	r3, r5, #31
  404060:	d50a      	bpl.n	404078 <__pow5mult+0x74>
  404062:	4639      	mov	r1, r7
  404064:	4622      	mov	r2, r4
  404066:	4630      	mov	r0, r6
  404068:	f7ff ff3f 	bl	403eea <__multiply>
  40406c:	4639      	mov	r1, r7
  40406e:	4681      	mov	r9, r0
  404070:	4630      	mov	r0, r6
  404072:	f7ff fe91 	bl	403d98 <_Bfree>
  404076:	464f      	mov	r7, r9
  404078:	106d      	asrs	r5, r5, #1
  40407a:	d00b      	beq.n	404094 <__pow5mult+0x90>
  40407c:	6820      	ldr	r0, [r4, #0]
  40407e:	b938      	cbnz	r0, 404090 <__pow5mult+0x8c>
  404080:	4622      	mov	r2, r4
  404082:	4621      	mov	r1, r4
  404084:	4630      	mov	r0, r6
  404086:	f7ff ff30 	bl	403eea <__multiply>
  40408a:	6020      	str	r0, [r4, #0]
  40408c:	f8c0 8000 	str.w	r8, [r0]
  404090:	4604      	mov	r4, r0
  404092:	e7e4      	b.n	40405e <__pow5mult+0x5a>
  404094:	4638      	mov	r0, r7
  404096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40409a:	bf00      	nop
  40409c:	00404e78 	.word	0x00404e78

004040a0 <__lshift>:
  4040a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4040a4:	460c      	mov	r4, r1
  4040a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4040aa:	6923      	ldr	r3, [r4, #16]
  4040ac:	6849      	ldr	r1, [r1, #4]
  4040ae:	eb0a 0903 	add.w	r9, sl, r3
  4040b2:	68a3      	ldr	r3, [r4, #8]
  4040b4:	4607      	mov	r7, r0
  4040b6:	4616      	mov	r6, r2
  4040b8:	f109 0501 	add.w	r5, r9, #1
  4040bc:	42ab      	cmp	r3, r5
  4040be:	db31      	blt.n	404124 <__lshift+0x84>
  4040c0:	4638      	mov	r0, r7
  4040c2:	f7ff fe35 	bl	403d30 <_Balloc>
  4040c6:	2200      	movs	r2, #0
  4040c8:	4680      	mov	r8, r0
  4040ca:	f100 0314 	add.w	r3, r0, #20
  4040ce:	4611      	mov	r1, r2
  4040d0:	4552      	cmp	r2, sl
  4040d2:	db2a      	blt.n	40412a <__lshift+0x8a>
  4040d4:	6920      	ldr	r0, [r4, #16]
  4040d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  4040da:	f104 0114 	add.w	r1, r4, #20
  4040de:	f016 021f 	ands.w	r2, r6, #31
  4040e2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  4040e6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  4040ea:	d022      	beq.n	404132 <__lshift+0x92>
  4040ec:	f1c2 0c20 	rsb	ip, r2, #32
  4040f0:	2000      	movs	r0, #0
  4040f2:	680e      	ldr	r6, [r1, #0]
  4040f4:	4096      	lsls	r6, r2
  4040f6:	4330      	orrs	r0, r6
  4040f8:	f843 0b04 	str.w	r0, [r3], #4
  4040fc:	f851 0b04 	ldr.w	r0, [r1], #4
  404100:	458e      	cmp	lr, r1
  404102:	fa20 f00c 	lsr.w	r0, r0, ip
  404106:	d8f4      	bhi.n	4040f2 <__lshift+0x52>
  404108:	6018      	str	r0, [r3, #0]
  40410a:	b108      	cbz	r0, 404110 <__lshift+0x70>
  40410c:	f109 0502 	add.w	r5, r9, #2
  404110:	3d01      	subs	r5, #1
  404112:	4638      	mov	r0, r7
  404114:	f8c8 5010 	str.w	r5, [r8, #16]
  404118:	4621      	mov	r1, r4
  40411a:	f7ff fe3d 	bl	403d98 <_Bfree>
  40411e:	4640      	mov	r0, r8
  404120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404124:	3101      	adds	r1, #1
  404126:	005b      	lsls	r3, r3, #1
  404128:	e7c8      	b.n	4040bc <__lshift+0x1c>
  40412a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40412e:	3201      	adds	r2, #1
  404130:	e7ce      	b.n	4040d0 <__lshift+0x30>
  404132:	3b04      	subs	r3, #4
  404134:	f851 2b04 	ldr.w	r2, [r1], #4
  404138:	f843 2f04 	str.w	r2, [r3, #4]!
  40413c:	458e      	cmp	lr, r1
  40413e:	d8f9      	bhi.n	404134 <__lshift+0x94>
  404140:	e7e6      	b.n	404110 <__lshift+0x70>

00404142 <__mcmp>:
  404142:	6903      	ldr	r3, [r0, #16]
  404144:	690a      	ldr	r2, [r1, #16]
  404146:	1a9b      	subs	r3, r3, r2
  404148:	b530      	push	{r4, r5, lr}
  40414a:	d10c      	bne.n	404166 <__mcmp+0x24>
  40414c:	0092      	lsls	r2, r2, #2
  40414e:	3014      	adds	r0, #20
  404150:	3114      	adds	r1, #20
  404152:	1884      	adds	r4, r0, r2
  404154:	4411      	add	r1, r2
  404156:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  40415a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40415e:	4295      	cmp	r5, r2
  404160:	d003      	beq.n	40416a <__mcmp+0x28>
  404162:	d305      	bcc.n	404170 <__mcmp+0x2e>
  404164:	2301      	movs	r3, #1
  404166:	4618      	mov	r0, r3
  404168:	bd30      	pop	{r4, r5, pc}
  40416a:	42a0      	cmp	r0, r4
  40416c:	d3f3      	bcc.n	404156 <__mcmp+0x14>
  40416e:	e7fa      	b.n	404166 <__mcmp+0x24>
  404170:	f04f 33ff 	mov.w	r3, #4294967295
  404174:	e7f7      	b.n	404166 <__mcmp+0x24>

00404176 <__mdiff>:
  404176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40417a:	460d      	mov	r5, r1
  40417c:	4607      	mov	r7, r0
  40417e:	4611      	mov	r1, r2
  404180:	4628      	mov	r0, r5
  404182:	4614      	mov	r4, r2
  404184:	f7ff ffdd 	bl	404142 <__mcmp>
  404188:	1e06      	subs	r6, r0, #0
  40418a:	d108      	bne.n	40419e <__mdiff+0x28>
  40418c:	4631      	mov	r1, r6
  40418e:	4638      	mov	r0, r7
  404190:	f7ff fdce 	bl	403d30 <_Balloc>
  404194:	2301      	movs	r3, #1
  404196:	6103      	str	r3, [r0, #16]
  404198:	6146      	str	r6, [r0, #20]
  40419a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40419e:	bfa4      	itt	ge
  4041a0:	4623      	movge	r3, r4
  4041a2:	462c      	movge	r4, r5
  4041a4:	4638      	mov	r0, r7
  4041a6:	6861      	ldr	r1, [r4, #4]
  4041a8:	bfa6      	itte	ge
  4041aa:	461d      	movge	r5, r3
  4041ac:	2600      	movge	r6, #0
  4041ae:	2601      	movlt	r6, #1
  4041b0:	f7ff fdbe 	bl	403d30 <_Balloc>
  4041b4:	692b      	ldr	r3, [r5, #16]
  4041b6:	60c6      	str	r6, [r0, #12]
  4041b8:	6926      	ldr	r6, [r4, #16]
  4041ba:	f105 0914 	add.w	r9, r5, #20
  4041be:	f104 0214 	add.w	r2, r4, #20
  4041c2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  4041c6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  4041ca:	f100 0514 	add.w	r5, r0, #20
  4041ce:	f04f 0c00 	mov.w	ip, #0
  4041d2:	f852 ab04 	ldr.w	sl, [r2], #4
  4041d6:	f859 4b04 	ldr.w	r4, [r9], #4
  4041da:	fa1c f18a 	uxtah	r1, ip, sl
  4041de:	b2a3      	uxth	r3, r4
  4041e0:	1ac9      	subs	r1, r1, r3
  4041e2:	0c23      	lsrs	r3, r4, #16
  4041e4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  4041e8:	eb03 4321 	add.w	r3, r3, r1, asr #16
  4041ec:	b289      	uxth	r1, r1
  4041ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4041f2:	45c8      	cmp	r8, r9
  4041f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  4041f8:	4696      	mov	lr, r2
  4041fa:	f845 3b04 	str.w	r3, [r5], #4
  4041fe:	d8e8      	bhi.n	4041d2 <__mdiff+0x5c>
  404200:	45be      	cmp	lr, r7
  404202:	d305      	bcc.n	404210 <__mdiff+0x9a>
  404204:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404208:	b18b      	cbz	r3, 40422e <__mdiff+0xb8>
  40420a:	6106      	str	r6, [r0, #16]
  40420c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404210:	f85e 1b04 	ldr.w	r1, [lr], #4
  404214:	fa1c f381 	uxtah	r3, ip, r1
  404218:	141a      	asrs	r2, r3, #16
  40421a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  40421e:	b29b      	uxth	r3, r3
  404220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404224:	ea4f 4c22 	mov.w	ip, r2, asr #16
  404228:	f845 3b04 	str.w	r3, [r5], #4
  40422c:	e7e8      	b.n	404200 <__mdiff+0x8a>
  40422e:	3e01      	subs	r6, #1
  404230:	e7e8      	b.n	404204 <__mdiff+0x8e>

00404232 <__d2b>:
  404232:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  404236:	2101      	movs	r1, #1
  404238:	461c      	mov	r4, r3
  40423a:	4690      	mov	r8, r2
  40423c:	9e08      	ldr	r6, [sp, #32]
  40423e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404240:	f7ff fd76 	bl	403d30 <_Balloc>
  404244:	f3c4 0213 	ubfx	r2, r4, #0, #20
  404248:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40424c:	4607      	mov	r7, r0
  40424e:	bb34      	cbnz	r4, 40429e <__d2b+0x6c>
  404250:	9201      	str	r2, [sp, #4]
  404252:	f1b8 0f00 	cmp.w	r8, #0
  404256:	d027      	beq.n	4042a8 <__d2b+0x76>
  404258:	a802      	add	r0, sp, #8
  40425a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40425e:	f7ff fe0c 	bl	403e7a <__lo0bits>
  404262:	9900      	ldr	r1, [sp, #0]
  404264:	b1f0      	cbz	r0, 4042a4 <__d2b+0x72>
  404266:	9a01      	ldr	r2, [sp, #4]
  404268:	f1c0 0320 	rsb	r3, r0, #32
  40426c:	fa02 f303 	lsl.w	r3, r2, r3
  404270:	430b      	orrs	r3, r1
  404272:	40c2      	lsrs	r2, r0
  404274:	617b      	str	r3, [r7, #20]
  404276:	9201      	str	r2, [sp, #4]
  404278:	9b01      	ldr	r3, [sp, #4]
  40427a:	61bb      	str	r3, [r7, #24]
  40427c:	2b00      	cmp	r3, #0
  40427e:	bf14      	ite	ne
  404280:	2102      	movne	r1, #2
  404282:	2101      	moveq	r1, #1
  404284:	6139      	str	r1, [r7, #16]
  404286:	b1c4      	cbz	r4, 4042ba <__d2b+0x88>
  404288:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40428c:	4404      	add	r4, r0
  40428e:	6034      	str	r4, [r6, #0]
  404290:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  404294:	6028      	str	r0, [r5, #0]
  404296:	4638      	mov	r0, r7
  404298:	b002      	add	sp, #8
  40429a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40429e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4042a2:	e7d5      	b.n	404250 <__d2b+0x1e>
  4042a4:	6179      	str	r1, [r7, #20]
  4042a6:	e7e7      	b.n	404278 <__d2b+0x46>
  4042a8:	a801      	add	r0, sp, #4
  4042aa:	f7ff fde6 	bl	403e7a <__lo0bits>
  4042ae:	9b01      	ldr	r3, [sp, #4]
  4042b0:	617b      	str	r3, [r7, #20]
  4042b2:	2101      	movs	r1, #1
  4042b4:	6139      	str	r1, [r7, #16]
  4042b6:	3020      	adds	r0, #32
  4042b8:	e7e5      	b.n	404286 <__d2b+0x54>
  4042ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  4042be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4042c2:	6030      	str	r0, [r6, #0]
  4042c4:	6918      	ldr	r0, [r3, #16]
  4042c6:	f7ff fdb9 	bl	403e3c <__hi0bits>
  4042ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4042ce:	e7e1      	b.n	404294 <__d2b+0x62>

004042d0 <_calloc_r>:
  4042d0:	b538      	push	{r3, r4, r5, lr}
  4042d2:	fb02 f401 	mul.w	r4, r2, r1
  4042d6:	4621      	mov	r1, r4
  4042d8:	f000 f856 	bl	404388 <_malloc_r>
  4042dc:	4605      	mov	r5, r0
  4042de:	b118      	cbz	r0, 4042e8 <_calloc_r+0x18>
  4042e0:	4622      	mov	r2, r4
  4042e2:	2100      	movs	r1, #0
  4042e4:	f7fd ff3f 	bl	402166 <memset>
  4042e8:	4628      	mov	r0, r5
  4042ea:	bd38      	pop	{r3, r4, r5, pc}

004042ec <_free_r>:
  4042ec:	b538      	push	{r3, r4, r5, lr}
  4042ee:	4605      	mov	r5, r0
  4042f0:	2900      	cmp	r1, #0
  4042f2:	d045      	beq.n	404380 <_free_r+0x94>
  4042f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4042f8:	1f0c      	subs	r4, r1, #4
  4042fa:	2b00      	cmp	r3, #0
  4042fc:	bfb8      	it	lt
  4042fe:	18e4      	addlt	r4, r4, r3
  404300:	f000 fb5a 	bl	4049b8 <__malloc_lock>
  404304:	4a1f      	ldr	r2, [pc, #124]	; (404384 <_free_r+0x98>)
  404306:	6813      	ldr	r3, [r2, #0]
  404308:	4610      	mov	r0, r2
  40430a:	b933      	cbnz	r3, 40431a <_free_r+0x2e>
  40430c:	6063      	str	r3, [r4, #4]
  40430e:	6014      	str	r4, [r2, #0]
  404310:	4628      	mov	r0, r5
  404312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404316:	f000 bb50 	b.w	4049ba <__malloc_unlock>
  40431a:	42a3      	cmp	r3, r4
  40431c:	d90c      	bls.n	404338 <_free_r+0x4c>
  40431e:	6821      	ldr	r1, [r4, #0]
  404320:	1862      	adds	r2, r4, r1
  404322:	4293      	cmp	r3, r2
  404324:	bf04      	itt	eq
  404326:	681a      	ldreq	r2, [r3, #0]
  404328:	685b      	ldreq	r3, [r3, #4]
  40432a:	6063      	str	r3, [r4, #4]
  40432c:	bf04      	itt	eq
  40432e:	1852      	addeq	r2, r2, r1
  404330:	6022      	streq	r2, [r4, #0]
  404332:	6004      	str	r4, [r0, #0]
  404334:	e7ec      	b.n	404310 <_free_r+0x24>
  404336:	4613      	mov	r3, r2
  404338:	685a      	ldr	r2, [r3, #4]
  40433a:	b10a      	cbz	r2, 404340 <_free_r+0x54>
  40433c:	42a2      	cmp	r2, r4
  40433e:	d9fa      	bls.n	404336 <_free_r+0x4a>
  404340:	6819      	ldr	r1, [r3, #0]
  404342:	1858      	adds	r0, r3, r1
  404344:	42a0      	cmp	r0, r4
  404346:	d10b      	bne.n	404360 <_free_r+0x74>
  404348:	6820      	ldr	r0, [r4, #0]
  40434a:	4401      	add	r1, r0
  40434c:	1858      	adds	r0, r3, r1
  40434e:	4282      	cmp	r2, r0
  404350:	6019      	str	r1, [r3, #0]
  404352:	d1dd      	bne.n	404310 <_free_r+0x24>
  404354:	6810      	ldr	r0, [r2, #0]
  404356:	6852      	ldr	r2, [r2, #4]
  404358:	605a      	str	r2, [r3, #4]
  40435a:	4401      	add	r1, r0
  40435c:	6019      	str	r1, [r3, #0]
  40435e:	e7d7      	b.n	404310 <_free_r+0x24>
  404360:	d902      	bls.n	404368 <_free_r+0x7c>
  404362:	230c      	movs	r3, #12
  404364:	602b      	str	r3, [r5, #0]
  404366:	e7d3      	b.n	404310 <_free_r+0x24>
  404368:	6820      	ldr	r0, [r4, #0]
  40436a:	1821      	adds	r1, r4, r0
  40436c:	428a      	cmp	r2, r1
  40436e:	bf04      	itt	eq
  404370:	6811      	ldreq	r1, [r2, #0]
  404372:	6852      	ldreq	r2, [r2, #4]
  404374:	6062      	str	r2, [r4, #4]
  404376:	bf04      	itt	eq
  404378:	1809      	addeq	r1, r1, r0
  40437a:	6021      	streq	r1, [r4, #0]
  40437c:	605c      	str	r4, [r3, #4]
  40437e:	e7c7      	b.n	404310 <_free_r+0x24>
  404380:	bd38      	pop	{r3, r4, r5, pc}
  404382:	bf00      	nop
  404384:	20400274 	.word	0x20400274

00404388 <_malloc_r>:
  404388:	b570      	push	{r4, r5, r6, lr}
  40438a:	1ccd      	adds	r5, r1, #3
  40438c:	f025 0503 	bic.w	r5, r5, #3
  404390:	3508      	adds	r5, #8
  404392:	2d0c      	cmp	r5, #12
  404394:	bf38      	it	cc
  404396:	250c      	movcc	r5, #12
  404398:	2d00      	cmp	r5, #0
  40439a:	4606      	mov	r6, r0
  40439c:	db01      	blt.n	4043a2 <_malloc_r+0x1a>
  40439e:	42a9      	cmp	r1, r5
  4043a0:	d903      	bls.n	4043aa <_malloc_r+0x22>
  4043a2:	230c      	movs	r3, #12
  4043a4:	6033      	str	r3, [r6, #0]
  4043a6:	2000      	movs	r0, #0
  4043a8:	bd70      	pop	{r4, r5, r6, pc}
  4043aa:	f000 fb05 	bl	4049b8 <__malloc_lock>
  4043ae:	4a23      	ldr	r2, [pc, #140]	; (40443c <_malloc_r+0xb4>)
  4043b0:	6814      	ldr	r4, [r2, #0]
  4043b2:	4621      	mov	r1, r4
  4043b4:	b991      	cbnz	r1, 4043dc <_malloc_r+0x54>
  4043b6:	4c22      	ldr	r4, [pc, #136]	; (404440 <_malloc_r+0xb8>)
  4043b8:	6823      	ldr	r3, [r4, #0]
  4043ba:	b91b      	cbnz	r3, 4043c4 <_malloc_r+0x3c>
  4043bc:	4630      	mov	r0, r6
  4043be:	f000 f97f 	bl	4046c0 <_sbrk_r>
  4043c2:	6020      	str	r0, [r4, #0]
  4043c4:	4629      	mov	r1, r5
  4043c6:	4630      	mov	r0, r6
  4043c8:	f000 f97a 	bl	4046c0 <_sbrk_r>
  4043cc:	1c43      	adds	r3, r0, #1
  4043ce:	d126      	bne.n	40441e <_malloc_r+0x96>
  4043d0:	230c      	movs	r3, #12
  4043d2:	6033      	str	r3, [r6, #0]
  4043d4:	4630      	mov	r0, r6
  4043d6:	f000 faf0 	bl	4049ba <__malloc_unlock>
  4043da:	e7e4      	b.n	4043a6 <_malloc_r+0x1e>
  4043dc:	680b      	ldr	r3, [r1, #0]
  4043de:	1b5b      	subs	r3, r3, r5
  4043e0:	d41a      	bmi.n	404418 <_malloc_r+0x90>
  4043e2:	2b0b      	cmp	r3, #11
  4043e4:	d90f      	bls.n	404406 <_malloc_r+0x7e>
  4043e6:	600b      	str	r3, [r1, #0]
  4043e8:	50cd      	str	r5, [r1, r3]
  4043ea:	18cc      	adds	r4, r1, r3
  4043ec:	4630      	mov	r0, r6
  4043ee:	f000 fae4 	bl	4049ba <__malloc_unlock>
  4043f2:	f104 000b 	add.w	r0, r4, #11
  4043f6:	1d23      	adds	r3, r4, #4
  4043f8:	f020 0007 	bic.w	r0, r0, #7
  4043fc:	1ac3      	subs	r3, r0, r3
  4043fe:	d01b      	beq.n	404438 <_malloc_r+0xb0>
  404400:	425a      	negs	r2, r3
  404402:	50e2      	str	r2, [r4, r3]
  404404:	bd70      	pop	{r4, r5, r6, pc}
  404406:	428c      	cmp	r4, r1
  404408:	bf0d      	iteet	eq
  40440a:	6863      	ldreq	r3, [r4, #4]
  40440c:	684b      	ldrne	r3, [r1, #4]
  40440e:	6063      	strne	r3, [r4, #4]
  404410:	6013      	streq	r3, [r2, #0]
  404412:	bf18      	it	ne
  404414:	460c      	movne	r4, r1
  404416:	e7e9      	b.n	4043ec <_malloc_r+0x64>
  404418:	460c      	mov	r4, r1
  40441a:	6849      	ldr	r1, [r1, #4]
  40441c:	e7ca      	b.n	4043b4 <_malloc_r+0x2c>
  40441e:	1cc4      	adds	r4, r0, #3
  404420:	f024 0403 	bic.w	r4, r4, #3
  404424:	42a0      	cmp	r0, r4
  404426:	d005      	beq.n	404434 <_malloc_r+0xac>
  404428:	1a21      	subs	r1, r4, r0
  40442a:	4630      	mov	r0, r6
  40442c:	f000 f948 	bl	4046c0 <_sbrk_r>
  404430:	3001      	adds	r0, #1
  404432:	d0cd      	beq.n	4043d0 <_malloc_r+0x48>
  404434:	6025      	str	r5, [r4, #0]
  404436:	e7d9      	b.n	4043ec <_malloc_r+0x64>
  404438:	bd70      	pop	{r4, r5, r6, pc}
  40443a:	bf00      	nop
  40443c:	20400274 	.word	0x20400274
  404440:	20400278 	.word	0x20400278

00404444 <__sfputc_r>:
  404444:	6893      	ldr	r3, [r2, #8]
  404446:	3b01      	subs	r3, #1
  404448:	2b00      	cmp	r3, #0
  40444a:	b410      	push	{r4}
  40444c:	6093      	str	r3, [r2, #8]
  40444e:	da08      	bge.n	404462 <__sfputc_r+0x1e>
  404450:	6994      	ldr	r4, [r2, #24]
  404452:	42a3      	cmp	r3, r4
  404454:	db02      	blt.n	40445c <__sfputc_r+0x18>
  404456:	b2cb      	uxtb	r3, r1
  404458:	2b0a      	cmp	r3, #10
  40445a:	d102      	bne.n	404462 <__sfputc_r+0x1e>
  40445c:	bc10      	pop	{r4}
  40445e:	f000 b983 	b.w	404768 <__swbuf_r>
  404462:	6813      	ldr	r3, [r2, #0]
  404464:	1c58      	adds	r0, r3, #1
  404466:	6010      	str	r0, [r2, #0]
  404468:	7019      	strb	r1, [r3, #0]
  40446a:	b2c8      	uxtb	r0, r1
  40446c:	bc10      	pop	{r4}
  40446e:	4770      	bx	lr

00404470 <__sfputs_r>:
  404470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404472:	4606      	mov	r6, r0
  404474:	460f      	mov	r7, r1
  404476:	4614      	mov	r4, r2
  404478:	18d5      	adds	r5, r2, r3
  40447a:	42ac      	cmp	r4, r5
  40447c:	d101      	bne.n	404482 <__sfputs_r+0x12>
  40447e:	2000      	movs	r0, #0
  404480:	e007      	b.n	404492 <__sfputs_r+0x22>
  404482:	463a      	mov	r2, r7
  404484:	f814 1b01 	ldrb.w	r1, [r4], #1
  404488:	4630      	mov	r0, r6
  40448a:	f7ff ffdb 	bl	404444 <__sfputc_r>
  40448e:	1c43      	adds	r3, r0, #1
  404490:	d1f3      	bne.n	40447a <__sfputs_r+0xa>
  404492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00404494 <_vfiprintf_r>:
  404494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404498:	b09d      	sub	sp, #116	; 0x74
  40449a:	460c      	mov	r4, r1
  40449c:	4617      	mov	r7, r2
  40449e:	9303      	str	r3, [sp, #12]
  4044a0:	4606      	mov	r6, r0
  4044a2:	b118      	cbz	r0, 4044ac <_vfiprintf_r+0x18>
  4044a4:	6983      	ldr	r3, [r0, #24]
  4044a6:	b90b      	cbnz	r3, 4044ac <_vfiprintf_r+0x18>
  4044a8:	f7ff faea 	bl	403a80 <__sinit>
  4044ac:	4b7c      	ldr	r3, [pc, #496]	; (4046a0 <_vfiprintf_r+0x20c>)
  4044ae:	429c      	cmp	r4, r3
  4044b0:	d157      	bne.n	404562 <_vfiprintf_r+0xce>
  4044b2:	6874      	ldr	r4, [r6, #4]
  4044b4:	89a3      	ldrh	r3, [r4, #12]
  4044b6:	0718      	lsls	r0, r3, #28
  4044b8:	d55d      	bpl.n	404576 <_vfiprintf_r+0xe2>
  4044ba:	6923      	ldr	r3, [r4, #16]
  4044bc:	2b00      	cmp	r3, #0
  4044be:	d05a      	beq.n	404576 <_vfiprintf_r+0xe2>
  4044c0:	2300      	movs	r3, #0
  4044c2:	9309      	str	r3, [sp, #36]	; 0x24
  4044c4:	2320      	movs	r3, #32
  4044c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  4044ca:	2330      	movs	r3, #48	; 0x30
  4044cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4044d0:	f04f 0b01 	mov.w	fp, #1
  4044d4:	46b8      	mov	r8, r7
  4044d6:	4645      	mov	r5, r8
  4044d8:	f815 3b01 	ldrb.w	r3, [r5], #1
  4044dc:	2b00      	cmp	r3, #0
  4044de:	d155      	bne.n	40458c <_vfiprintf_r+0xf8>
  4044e0:	ebb8 0a07 	subs.w	sl, r8, r7
  4044e4:	d00b      	beq.n	4044fe <_vfiprintf_r+0x6a>
  4044e6:	4653      	mov	r3, sl
  4044e8:	463a      	mov	r2, r7
  4044ea:	4621      	mov	r1, r4
  4044ec:	4630      	mov	r0, r6
  4044ee:	f7ff ffbf 	bl	404470 <__sfputs_r>
  4044f2:	3001      	adds	r0, #1
  4044f4:	f000 80c4 	beq.w	404680 <_vfiprintf_r+0x1ec>
  4044f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4044fa:	4453      	add	r3, sl
  4044fc:	9309      	str	r3, [sp, #36]	; 0x24
  4044fe:	f898 3000 	ldrb.w	r3, [r8]
  404502:	2b00      	cmp	r3, #0
  404504:	f000 80bc 	beq.w	404680 <_vfiprintf_r+0x1ec>
  404508:	2300      	movs	r3, #0
  40450a:	f04f 32ff 	mov.w	r2, #4294967295
  40450e:	9304      	str	r3, [sp, #16]
  404510:	9307      	str	r3, [sp, #28]
  404512:	9205      	str	r2, [sp, #20]
  404514:	9306      	str	r3, [sp, #24]
  404516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40451a:	931a      	str	r3, [sp, #104]	; 0x68
  40451c:	2205      	movs	r2, #5
  40451e:	7829      	ldrb	r1, [r5, #0]
  404520:	4860      	ldr	r0, [pc, #384]	; (4046a4 <_vfiprintf_r+0x210>)
  404522:	f7ff fbb5 	bl	403c90 <memchr>
  404526:	f105 0801 	add.w	r8, r5, #1
  40452a:	9b04      	ldr	r3, [sp, #16]
  40452c:	2800      	cmp	r0, #0
  40452e:	d131      	bne.n	404594 <_vfiprintf_r+0x100>
  404530:	06d9      	lsls	r1, r3, #27
  404532:	bf44      	itt	mi
  404534:	2220      	movmi	r2, #32
  404536:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40453a:	071a      	lsls	r2, r3, #28
  40453c:	bf44      	itt	mi
  40453e:	222b      	movmi	r2, #43	; 0x2b
  404540:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404544:	782a      	ldrb	r2, [r5, #0]
  404546:	2a2a      	cmp	r2, #42	; 0x2a
  404548:	d02c      	beq.n	4045a4 <_vfiprintf_r+0x110>
  40454a:	9a07      	ldr	r2, [sp, #28]
  40454c:	2100      	movs	r1, #0
  40454e:	200a      	movs	r0, #10
  404550:	46a8      	mov	r8, r5
  404552:	3501      	adds	r5, #1
  404554:	f898 3000 	ldrb.w	r3, [r8]
  404558:	3b30      	subs	r3, #48	; 0x30
  40455a:	2b09      	cmp	r3, #9
  40455c:	d96d      	bls.n	40463a <_vfiprintf_r+0x1a6>
  40455e:	b371      	cbz	r1, 4045be <_vfiprintf_r+0x12a>
  404560:	e026      	b.n	4045b0 <_vfiprintf_r+0x11c>
  404562:	4b51      	ldr	r3, [pc, #324]	; (4046a8 <_vfiprintf_r+0x214>)
  404564:	429c      	cmp	r4, r3
  404566:	d101      	bne.n	40456c <_vfiprintf_r+0xd8>
  404568:	68b4      	ldr	r4, [r6, #8]
  40456a:	e7a3      	b.n	4044b4 <_vfiprintf_r+0x20>
  40456c:	4b4f      	ldr	r3, [pc, #316]	; (4046ac <_vfiprintf_r+0x218>)
  40456e:	429c      	cmp	r4, r3
  404570:	bf08      	it	eq
  404572:	68f4      	ldreq	r4, [r6, #12]
  404574:	e79e      	b.n	4044b4 <_vfiprintf_r+0x20>
  404576:	4621      	mov	r1, r4
  404578:	4630      	mov	r0, r6
  40457a:	f000 f959 	bl	404830 <__swsetup_r>
  40457e:	2800      	cmp	r0, #0
  404580:	d09e      	beq.n	4044c0 <_vfiprintf_r+0x2c>
  404582:	f04f 30ff 	mov.w	r0, #4294967295
  404586:	b01d      	add	sp, #116	; 0x74
  404588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40458c:	2b25      	cmp	r3, #37	; 0x25
  40458e:	d0a7      	beq.n	4044e0 <_vfiprintf_r+0x4c>
  404590:	46a8      	mov	r8, r5
  404592:	e7a0      	b.n	4044d6 <_vfiprintf_r+0x42>
  404594:	4a43      	ldr	r2, [pc, #268]	; (4046a4 <_vfiprintf_r+0x210>)
  404596:	1a80      	subs	r0, r0, r2
  404598:	fa0b f000 	lsl.w	r0, fp, r0
  40459c:	4318      	orrs	r0, r3
  40459e:	9004      	str	r0, [sp, #16]
  4045a0:	4645      	mov	r5, r8
  4045a2:	e7bb      	b.n	40451c <_vfiprintf_r+0x88>
  4045a4:	9a03      	ldr	r2, [sp, #12]
  4045a6:	1d11      	adds	r1, r2, #4
  4045a8:	6812      	ldr	r2, [r2, #0]
  4045aa:	9103      	str	r1, [sp, #12]
  4045ac:	2a00      	cmp	r2, #0
  4045ae:	db01      	blt.n	4045b4 <_vfiprintf_r+0x120>
  4045b0:	9207      	str	r2, [sp, #28]
  4045b2:	e004      	b.n	4045be <_vfiprintf_r+0x12a>
  4045b4:	4252      	negs	r2, r2
  4045b6:	f043 0302 	orr.w	r3, r3, #2
  4045ba:	9207      	str	r2, [sp, #28]
  4045bc:	9304      	str	r3, [sp, #16]
  4045be:	f898 3000 	ldrb.w	r3, [r8]
  4045c2:	2b2e      	cmp	r3, #46	; 0x2e
  4045c4:	d110      	bne.n	4045e8 <_vfiprintf_r+0x154>
  4045c6:	f898 3001 	ldrb.w	r3, [r8, #1]
  4045ca:	2b2a      	cmp	r3, #42	; 0x2a
  4045cc:	f108 0101 	add.w	r1, r8, #1
  4045d0:	d137      	bne.n	404642 <_vfiprintf_r+0x1ae>
  4045d2:	9b03      	ldr	r3, [sp, #12]
  4045d4:	1d1a      	adds	r2, r3, #4
  4045d6:	681b      	ldr	r3, [r3, #0]
  4045d8:	9203      	str	r2, [sp, #12]
  4045da:	2b00      	cmp	r3, #0
  4045dc:	bfb8      	it	lt
  4045de:	f04f 33ff 	movlt.w	r3, #4294967295
  4045e2:	f108 0802 	add.w	r8, r8, #2
  4045e6:	9305      	str	r3, [sp, #20]
  4045e8:	4d31      	ldr	r5, [pc, #196]	; (4046b0 <_vfiprintf_r+0x21c>)
  4045ea:	f898 1000 	ldrb.w	r1, [r8]
  4045ee:	2203      	movs	r2, #3
  4045f0:	4628      	mov	r0, r5
  4045f2:	f7ff fb4d 	bl	403c90 <memchr>
  4045f6:	b140      	cbz	r0, 40460a <_vfiprintf_r+0x176>
  4045f8:	2340      	movs	r3, #64	; 0x40
  4045fa:	1b40      	subs	r0, r0, r5
  4045fc:	fa03 f000 	lsl.w	r0, r3, r0
  404600:	9b04      	ldr	r3, [sp, #16]
  404602:	4303      	orrs	r3, r0
  404604:	9304      	str	r3, [sp, #16]
  404606:	f108 0801 	add.w	r8, r8, #1
  40460a:	f898 1000 	ldrb.w	r1, [r8]
  40460e:	4829      	ldr	r0, [pc, #164]	; (4046b4 <_vfiprintf_r+0x220>)
  404610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  404614:	2206      	movs	r2, #6
  404616:	f108 0701 	add.w	r7, r8, #1
  40461a:	f7ff fb39 	bl	403c90 <memchr>
  40461e:	2800      	cmp	r0, #0
  404620:	d034      	beq.n	40468c <_vfiprintf_r+0x1f8>
  404622:	4b25      	ldr	r3, [pc, #148]	; (4046b8 <_vfiprintf_r+0x224>)
  404624:	bb03      	cbnz	r3, 404668 <_vfiprintf_r+0x1d4>
  404626:	9b03      	ldr	r3, [sp, #12]
  404628:	3307      	adds	r3, #7
  40462a:	f023 0307 	bic.w	r3, r3, #7
  40462e:	3308      	adds	r3, #8
  404630:	9303      	str	r3, [sp, #12]
  404632:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404634:	444b      	add	r3, r9
  404636:	9309      	str	r3, [sp, #36]	; 0x24
  404638:	e74c      	b.n	4044d4 <_vfiprintf_r+0x40>
  40463a:	fb00 3202 	mla	r2, r0, r2, r3
  40463e:	2101      	movs	r1, #1
  404640:	e786      	b.n	404550 <_vfiprintf_r+0xbc>
  404642:	2300      	movs	r3, #0
  404644:	9305      	str	r3, [sp, #20]
  404646:	4618      	mov	r0, r3
  404648:	250a      	movs	r5, #10
  40464a:	4688      	mov	r8, r1
  40464c:	3101      	adds	r1, #1
  40464e:	f898 2000 	ldrb.w	r2, [r8]
  404652:	3a30      	subs	r2, #48	; 0x30
  404654:	2a09      	cmp	r2, #9
  404656:	d903      	bls.n	404660 <_vfiprintf_r+0x1cc>
  404658:	2b00      	cmp	r3, #0
  40465a:	d0c5      	beq.n	4045e8 <_vfiprintf_r+0x154>
  40465c:	9005      	str	r0, [sp, #20]
  40465e:	e7c3      	b.n	4045e8 <_vfiprintf_r+0x154>
  404660:	fb05 2000 	mla	r0, r5, r0, r2
  404664:	2301      	movs	r3, #1
  404666:	e7f0      	b.n	40464a <_vfiprintf_r+0x1b6>
  404668:	ab03      	add	r3, sp, #12
  40466a:	9300      	str	r3, [sp, #0]
  40466c:	4622      	mov	r2, r4
  40466e:	4b13      	ldr	r3, [pc, #76]	; (4046bc <_vfiprintf_r+0x228>)
  404670:	a904      	add	r1, sp, #16
  404672:	4630      	mov	r0, r6
  404674:	f7fd fe10 	bl	402298 <_printf_float>
  404678:	f1b0 3fff 	cmp.w	r0, #4294967295
  40467c:	4681      	mov	r9, r0
  40467e:	d1d8      	bne.n	404632 <_vfiprintf_r+0x19e>
  404680:	89a3      	ldrh	r3, [r4, #12]
  404682:	065b      	lsls	r3, r3, #25
  404684:	f53f af7d 	bmi.w	404582 <_vfiprintf_r+0xee>
  404688:	9809      	ldr	r0, [sp, #36]	; 0x24
  40468a:	e77c      	b.n	404586 <_vfiprintf_r+0xf2>
  40468c:	ab03      	add	r3, sp, #12
  40468e:	9300      	str	r3, [sp, #0]
  404690:	4622      	mov	r2, r4
  404692:	4b0a      	ldr	r3, [pc, #40]	; (4046bc <_vfiprintf_r+0x228>)
  404694:	a904      	add	r1, sp, #16
  404696:	4630      	mov	r0, r6
  404698:	f7fe f8ac 	bl	4027f4 <_printf_i>
  40469c:	e7ec      	b.n	404678 <_vfiprintf_r+0x1e4>
  40469e:	bf00      	nop
  4046a0:	00404d48 	.word	0x00404d48
  4046a4:	00404e84 	.word	0x00404e84
  4046a8:	00404d68 	.word	0x00404d68
  4046ac:	00404d28 	.word	0x00404d28
  4046b0:	00404e8a 	.word	0x00404e8a
  4046b4:	00404e8e 	.word	0x00404e8e
  4046b8:	00402299 	.word	0x00402299
  4046bc:	00404471 	.word	0x00404471

004046c0 <_sbrk_r>:
  4046c0:	b538      	push	{r3, r4, r5, lr}
  4046c2:	4c06      	ldr	r4, [pc, #24]	; (4046dc <_sbrk_r+0x1c>)
  4046c4:	2300      	movs	r3, #0
  4046c6:	4605      	mov	r5, r0
  4046c8:	4608      	mov	r0, r1
  4046ca:	6023      	str	r3, [r4, #0]
  4046cc:	f7fc fa46 	bl	400b5c <_sbrk>
  4046d0:	1c43      	adds	r3, r0, #1
  4046d2:	d102      	bne.n	4046da <_sbrk_r+0x1a>
  4046d4:	6823      	ldr	r3, [r4, #0]
  4046d6:	b103      	cbz	r3, 4046da <_sbrk_r+0x1a>
  4046d8:	602b      	str	r3, [r5, #0]
  4046da:	bd38      	pop	{r3, r4, r5, pc}
  4046dc:	204003b0 	.word	0x204003b0

004046e0 <__sread>:
  4046e0:	b510      	push	{r4, lr}
  4046e2:	460c      	mov	r4, r1
  4046e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4046e8:	f000 f968 	bl	4049bc <_read_r>
  4046ec:	2800      	cmp	r0, #0
  4046ee:	bfab      	itete	ge
  4046f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  4046f2:	89a3      	ldrhlt	r3, [r4, #12]
  4046f4:	181b      	addge	r3, r3, r0
  4046f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  4046fa:	bfac      	ite	ge
  4046fc:	6563      	strge	r3, [r4, #84]	; 0x54
  4046fe:	81a3      	strhlt	r3, [r4, #12]
  404700:	bd10      	pop	{r4, pc}

00404702 <__swrite>:
  404702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404706:	461f      	mov	r7, r3
  404708:	898b      	ldrh	r3, [r1, #12]
  40470a:	05db      	lsls	r3, r3, #23
  40470c:	4605      	mov	r5, r0
  40470e:	460c      	mov	r4, r1
  404710:	4616      	mov	r6, r2
  404712:	d505      	bpl.n	404720 <__swrite+0x1e>
  404714:	2302      	movs	r3, #2
  404716:	2200      	movs	r2, #0
  404718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40471c:	f000 f928 	bl	404970 <_lseek_r>
  404720:	89a3      	ldrh	r3, [r4, #12]
  404722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40472a:	81a3      	strh	r3, [r4, #12]
  40472c:	4632      	mov	r2, r6
  40472e:	463b      	mov	r3, r7
  404730:	4628      	mov	r0, r5
  404732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404736:	f000 b869 	b.w	40480c <_write_r>

0040473a <__sseek>:
  40473a:	b510      	push	{r4, lr}
  40473c:	460c      	mov	r4, r1
  40473e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404742:	f000 f915 	bl	404970 <_lseek_r>
  404746:	1c43      	adds	r3, r0, #1
  404748:	89a3      	ldrh	r3, [r4, #12]
  40474a:	bf15      	itete	ne
  40474c:	6560      	strne	r0, [r4, #84]	; 0x54
  40474e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404756:	81a3      	strheq	r3, [r4, #12]
  404758:	bf18      	it	ne
  40475a:	81a3      	strhne	r3, [r4, #12]
  40475c:	bd10      	pop	{r4, pc}

0040475e <__sclose>:
  40475e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404762:	f000 b8d3 	b.w	40490c <_close_r>
	...

00404768 <__swbuf_r>:
  404768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40476a:	460e      	mov	r6, r1
  40476c:	4614      	mov	r4, r2
  40476e:	4605      	mov	r5, r0
  404770:	b118      	cbz	r0, 40477a <__swbuf_r+0x12>
  404772:	6983      	ldr	r3, [r0, #24]
  404774:	b90b      	cbnz	r3, 40477a <__swbuf_r+0x12>
  404776:	f7ff f983 	bl	403a80 <__sinit>
  40477a:	4b21      	ldr	r3, [pc, #132]	; (404800 <__swbuf_r+0x98>)
  40477c:	429c      	cmp	r4, r3
  40477e:	d12a      	bne.n	4047d6 <__swbuf_r+0x6e>
  404780:	686c      	ldr	r4, [r5, #4]
  404782:	69a3      	ldr	r3, [r4, #24]
  404784:	60a3      	str	r3, [r4, #8]
  404786:	89a3      	ldrh	r3, [r4, #12]
  404788:	071a      	lsls	r2, r3, #28
  40478a:	d52e      	bpl.n	4047ea <__swbuf_r+0x82>
  40478c:	6923      	ldr	r3, [r4, #16]
  40478e:	b363      	cbz	r3, 4047ea <__swbuf_r+0x82>
  404790:	6923      	ldr	r3, [r4, #16]
  404792:	6820      	ldr	r0, [r4, #0]
  404794:	1ac0      	subs	r0, r0, r3
  404796:	6963      	ldr	r3, [r4, #20]
  404798:	b2f6      	uxtb	r6, r6
  40479a:	4298      	cmp	r0, r3
  40479c:	4637      	mov	r7, r6
  40479e:	db04      	blt.n	4047aa <__swbuf_r+0x42>
  4047a0:	4621      	mov	r1, r4
  4047a2:	4628      	mov	r0, r5
  4047a4:	f7ff f902 	bl	4039ac <_fflush_r>
  4047a8:	bb28      	cbnz	r0, 4047f6 <__swbuf_r+0x8e>
  4047aa:	68a3      	ldr	r3, [r4, #8]
  4047ac:	3b01      	subs	r3, #1
  4047ae:	60a3      	str	r3, [r4, #8]
  4047b0:	6823      	ldr	r3, [r4, #0]
  4047b2:	1c5a      	adds	r2, r3, #1
  4047b4:	6022      	str	r2, [r4, #0]
  4047b6:	701e      	strb	r6, [r3, #0]
  4047b8:	6963      	ldr	r3, [r4, #20]
  4047ba:	3001      	adds	r0, #1
  4047bc:	4298      	cmp	r0, r3
  4047be:	d004      	beq.n	4047ca <__swbuf_r+0x62>
  4047c0:	89a3      	ldrh	r3, [r4, #12]
  4047c2:	07db      	lsls	r3, r3, #31
  4047c4:	d519      	bpl.n	4047fa <__swbuf_r+0x92>
  4047c6:	2e0a      	cmp	r6, #10
  4047c8:	d117      	bne.n	4047fa <__swbuf_r+0x92>
  4047ca:	4621      	mov	r1, r4
  4047cc:	4628      	mov	r0, r5
  4047ce:	f7ff f8ed 	bl	4039ac <_fflush_r>
  4047d2:	b190      	cbz	r0, 4047fa <__swbuf_r+0x92>
  4047d4:	e00f      	b.n	4047f6 <__swbuf_r+0x8e>
  4047d6:	4b0b      	ldr	r3, [pc, #44]	; (404804 <__swbuf_r+0x9c>)
  4047d8:	429c      	cmp	r4, r3
  4047da:	d101      	bne.n	4047e0 <__swbuf_r+0x78>
  4047dc:	68ac      	ldr	r4, [r5, #8]
  4047de:	e7d0      	b.n	404782 <__swbuf_r+0x1a>
  4047e0:	4b09      	ldr	r3, [pc, #36]	; (404808 <__swbuf_r+0xa0>)
  4047e2:	429c      	cmp	r4, r3
  4047e4:	bf08      	it	eq
  4047e6:	68ec      	ldreq	r4, [r5, #12]
  4047e8:	e7cb      	b.n	404782 <__swbuf_r+0x1a>
  4047ea:	4621      	mov	r1, r4
  4047ec:	4628      	mov	r0, r5
  4047ee:	f000 f81f 	bl	404830 <__swsetup_r>
  4047f2:	2800      	cmp	r0, #0
  4047f4:	d0cc      	beq.n	404790 <__swbuf_r+0x28>
  4047f6:	f04f 37ff 	mov.w	r7, #4294967295
  4047fa:	4638      	mov	r0, r7
  4047fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4047fe:	bf00      	nop
  404800:	00404d48 	.word	0x00404d48
  404804:	00404d68 	.word	0x00404d68
  404808:	00404d28 	.word	0x00404d28

0040480c <_write_r>:
  40480c:	b538      	push	{r3, r4, r5, lr}
  40480e:	4c07      	ldr	r4, [pc, #28]	; (40482c <_write_r+0x20>)
  404810:	4605      	mov	r5, r0
  404812:	4608      	mov	r0, r1
  404814:	4611      	mov	r1, r2
  404816:	2200      	movs	r2, #0
  404818:	6022      	str	r2, [r4, #0]
  40481a:	461a      	mov	r2, r3
  40481c:	f7fc ff9c 	bl	401758 <_write>
  404820:	1c43      	adds	r3, r0, #1
  404822:	d102      	bne.n	40482a <_write_r+0x1e>
  404824:	6823      	ldr	r3, [r4, #0]
  404826:	b103      	cbz	r3, 40482a <_write_r+0x1e>
  404828:	602b      	str	r3, [r5, #0]
  40482a:	bd38      	pop	{r3, r4, r5, pc}
  40482c:	204003b0 	.word	0x204003b0

00404830 <__swsetup_r>:
  404830:	4b32      	ldr	r3, [pc, #200]	; (4048fc <__swsetup_r+0xcc>)
  404832:	b570      	push	{r4, r5, r6, lr}
  404834:	681d      	ldr	r5, [r3, #0]
  404836:	4606      	mov	r6, r0
  404838:	460c      	mov	r4, r1
  40483a:	b125      	cbz	r5, 404846 <__swsetup_r+0x16>
  40483c:	69ab      	ldr	r3, [r5, #24]
  40483e:	b913      	cbnz	r3, 404846 <__swsetup_r+0x16>
  404840:	4628      	mov	r0, r5
  404842:	f7ff f91d 	bl	403a80 <__sinit>
  404846:	4b2e      	ldr	r3, [pc, #184]	; (404900 <__swsetup_r+0xd0>)
  404848:	429c      	cmp	r4, r3
  40484a:	d10f      	bne.n	40486c <__swsetup_r+0x3c>
  40484c:	686c      	ldr	r4, [r5, #4]
  40484e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404852:	b29a      	uxth	r2, r3
  404854:	0715      	lsls	r5, r2, #28
  404856:	d42c      	bmi.n	4048b2 <__swsetup_r+0x82>
  404858:	06d0      	lsls	r0, r2, #27
  40485a:	d411      	bmi.n	404880 <__swsetup_r+0x50>
  40485c:	2209      	movs	r2, #9
  40485e:	6032      	str	r2, [r6, #0]
  404860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404864:	81a3      	strh	r3, [r4, #12]
  404866:	f04f 30ff 	mov.w	r0, #4294967295
  40486a:	bd70      	pop	{r4, r5, r6, pc}
  40486c:	4b25      	ldr	r3, [pc, #148]	; (404904 <__swsetup_r+0xd4>)
  40486e:	429c      	cmp	r4, r3
  404870:	d101      	bne.n	404876 <__swsetup_r+0x46>
  404872:	68ac      	ldr	r4, [r5, #8]
  404874:	e7eb      	b.n	40484e <__swsetup_r+0x1e>
  404876:	4b24      	ldr	r3, [pc, #144]	; (404908 <__swsetup_r+0xd8>)
  404878:	429c      	cmp	r4, r3
  40487a:	bf08      	it	eq
  40487c:	68ec      	ldreq	r4, [r5, #12]
  40487e:	e7e6      	b.n	40484e <__swsetup_r+0x1e>
  404880:	0751      	lsls	r1, r2, #29
  404882:	d512      	bpl.n	4048aa <__swsetup_r+0x7a>
  404884:	6b61      	ldr	r1, [r4, #52]	; 0x34
  404886:	b141      	cbz	r1, 40489a <__swsetup_r+0x6a>
  404888:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40488c:	4299      	cmp	r1, r3
  40488e:	d002      	beq.n	404896 <__swsetup_r+0x66>
  404890:	4630      	mov	r0, r6
  404892:	f7ff fd2b 	bl	4042ec <_free_r>
  404896:	2300      	movs	r3, #0
  404898:	6363      	str	r3, [r4, #52]	; 0x34
  40489a:	89a3      	ldrh	r3, [r4, #12]
  40489c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4048a0:	81a3      	strh	r3, [r4, #12]
  4048a2:	2300      	movs	r3, #0
  4048a4:	6063      	str	r3, [r4, #4]
  4048a6:	6923      	ldr	r3, [r4, #16]
  4048a8:	6023      	str	r3, [r4, #0]
  4048aa:	89a3      	ldrh	r3, [r4, #12]
  4048ac:	f043 0308 	orr.w	r3, r3, #8
  4048b0:	81a3      	strh	r3, [r4, #12]
  4048b2:	6923      	ldr	r3, [r4, #16]
  4048b4:	b94b      	cbnz	r3, 4048ca <__swsetup_r+0x9a>
  4048b6:	89a3      	ldrh	r3, [r4, #12]
  4048b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
  4048bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4048c0:	d003      	beq.n	4048ca <__swsetup_r+0x9a>
  4048c2:	4621      	mov	r1, r4
  4048c4:	4630      	mov	r0, r6
  4048c6:	f7ff f997 	bl	403bf8 <__smakebuf_r>
  4048ca:	89a2      	ldrh	r2, [r4, #12]
  4048cc:	f012 0301 	ands.w	r3, r2, #1
  4048d0:	d00c      	beq.n	4048ec <__swsetup_r+0xbc>
  4048d2:	2300      	movs	r3, #0
  4048d4:	60a3      	str	r3, [r4, #8]
  4048d6:	6963      	ldr	r3, [r4, #20]
  4048d8:	425b      	negs	r3, r3
  4048da:	61a3      	str	r3, [r4, #24]
  4048dc:	6923      	ldr	r3, [r4, #16]
  4048de:	b953      	cbnz	r3, 4048f6 <__swsetup_r+0xc6>
  4048e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4048e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  4048e8:	d1ba      	bne.n	404860 <__swsetup_r+0x30>
  4048ea:	bd70      	pop	{r4, r5, r6, pc}
  4048ec:	0792      	lsls	r2, r2, #30
  4048ee:	bf58      	it	pl
  4048f0:	6963      	ldrpl	r3, [r4, #20]
  4048f2:	60a3      	str	r3, [r4, #8]
  4048f4:	e7f2      	b.n	4048dc <__swsetup_r+0xac>
  4048f6:	2000      	movs	r0, #0
  4048f8:	e7f7      	b.n	4048ea <__swsetup_r+0xba>
  4048fa:	bf00      	nop
  4048fc:	20400014 	.word	0x20400014
  404900:	00404d48 	.word	0x00404d48
  404904:	00404d68 	.word	0x00404d68
  404908:	00404d28 	.word	0x00404d28

0040490c <_close_r>:
  40490c:	b538      	push	{r3, r4, r5, lr}
  40490e:	4c06      	ldr	r4, [pc, #24]	; (404928 <_close_r+0x1c>)
  404910:	2300      	movs	r3, #0
  404912:	4605      	mov	r5, r0
  404914:	4608      	mov	r0, r1
  404916:	6023      	str	r3, [r4, #0]
  404918:	f7fc f932 	bl	400b80 <_close>
  40491c:	1c43      	adds	r3, r0, #1
  40491e:	d102      	bne.n	404926 <_close_r+0x1a>
  404920:	6823      	ldr	r3, [r4, #0]
  404922:	b103      	cbz	r3, 404926 <_close_r+0x1a>
  404924:	602b      	str	r3, [r5, #0]
  404926:	bd38      	pop	{r3, r4, r5, pc}
  404928:	204003b0 	.word	0x204003b0

0040492c <_fstat_r>:
  40492c:	b538      	push	{r3, r4, r5, lr}
  40492e:	4c07      	ldr	r4, [pc, #28]	; (40494c <_fstat_r+0x20>)
  404930:	2300      	movs	r3, #0
  404932:	4605      	mov	r5, r0
  404934:	4608      	mov	r0, r1
  404936:	4611      	mov	r1, r2
  404938:	6023      	str	r3, [r4, #0]
  40493a:	f7fc f924 	bl	400b86 <_fstat>
  40493e:	1c43      	adds	r3, r0, #1
  404940:	d102      	bne.n	404948 <_fstat_r+0x1c>
  404942:	6823      	ldr	r3, [r4, #0]
  404944:	b103      	cbz	r3, 404948 <_fstat_r+0x1c>
  404946:	602b      	str	r3, [r5, #0]
  404948:	bd38      	pop	{r3, r4, r5, pc}
  40494a:	bf00      	nop
  40494c:	204003b0 	.word	0x204003b0

00404950 <_isatty_r>:
  404950:	b538      	push	{r3, r4, r5, lr}
  404952:	4c06      	ldr	r4, [pc, #24]	; (40496c <_isatty_r+0x1c>)
  404954:	2300      	movs	r3, #0
  404956:	4605      	mov	r5, r0
  404958:	4608      	mov	r0, r1
  40495a:	6023      	str	r3, [r4, #0]
  40495c:	f7fc f918 	bl	400b90 <_isatty>
  404960:	1c43      	adds	r3, r0, #1
  404962:	d102      	bne.n	40496a <_isatty_r+0x1a>
  404964:	6823      	ldr	r3, [r4, #0]
  404966:	b103      	cbz	r3, 40496a <_isatty_r+0x1a>
  404968:	602b      	str	r3, [r5, #0]
  40496a:	bd38      	pop	{r3, r4, r5, pc}
  40496c:	204003b0 	.word	0x204003b0

00404970 <_lseek_r>:
  404970:	b538      	push	{r3, r4, r5, lr}
  404972:	4c07      	ldr	r4, [pc, #28]	; (404990 <_lseek_r+0x20>)
  404974:	4605      	mov	r5, r0
  404976:	4608      	mov	r0, r1
  404978:	4611      	mov	r1, r2
  40497a:	2200      	movs	r2, #0
  40497c:	6022      	str	r2, [r4, #0]
  40497e:	461a      	mov	r2, r3
  404980:	f7fc f908 	bl	400b94 <_lseek>
  404984:	1c43      	adds	r3, r0, #1
  404986:	d102      	bne.n	40498e <_lseek_r+0x1e>
  404988:	6823      	ldr	r3, [r4, #0]
  40498a:	b103      	cbz	r3, 40498e <_lseek_r+0x1e>
  40498c:	602b      	str	r3, [r5, #0]
  40498e:	bd38      	pop	{r3, r4, r5, pc}
  404990:	204003b0 	.word	0x204003b0

00404994 <__ascii_mbtowc>:
  404994:	b082      	sub	sp, #8
  404996:	b901      	cbnz	r1, 40499a <__ascii_mbtowc+0x6>
  404998:	a901      	add	r1, sp, #4
  40499a:	b142      	cbz	r2, 4049ae <__ascii_mbtowc+0x1a>
  40499c:	b14b      	cbz	r3, 4049b2 <__ascii_mbtowc+0x1e>
  40499e:	7813      	ldrb	r3, [r2, #0]
  4049a0:	600b      	str	r3, [r1, #0]
  4049a2:	7812      	ldrb	r2, [r2, #0]
  4049a4:	1c10      	adds	r0, r2, #0
  4049a6:	bf18      	it	ne
  4049a8:	2001      	movne	r0, #1
  4049aa:	b002      	add	sp, #8
  4049ac:	4770      	bx	lr
  4049ae:	4610      	mov	r0, r2
  4049b0:	e7fb      	b.n	4049aa <__ascii_mbtowc+0x16>
  4049b2:	f06f 0001 	mvn.w	r0, #1
  4049b6:	e7f8      	b.n	4049aa <__ascii_mbtowc+0x16>

004049b8 <__malloc_lock>:
  4049b8:	4770      	bx	lr

004049ba <__malloc_unlock>:
  4049ba:	4770      	bx	lr

004049bc <_read_r>:
  4049bc:	b538      	push	{r3, r4, r5, lr}
  4049be:	4c07      	ldr	r4, [pc, #28]	; (4049dc <_read_r+0x20>)
  4049c0:	4605      	mov	r5, r0
  4049c2:	4608      	mov	r0, r1
  4049c4:	4611      	mov	r1, r2
  4049c6:	2200      	movs	r2, #0
  4049c8:	6022      	str	r2, [r4, #0]
  4049ca:	461a      	mov	r2, r3
  4049cc:	f7fc feb2 	bl	401734 <_read>
  4049d0:	1c43      	adds	r3, r0, #1
  4049d2:	d102      	bne.n	4049da <_read_r+0x1e>
  4049d4:	6823      	ldr	r3, [r4, #0]
  4049d6:	b103      	cbz	r3, 4049da <_read_r+0x1e>
  4049d8:	602b      	str	r3, [r5, #0]
  4049da:	bd38      	pop	{r3, r4, r5, pc}
  4049dc:	204003b0 	.word	0x204003b0

004049e0 <__ascii_wctomb>:
  4049e0:	b149      	cbz	r1, 4049f6 <__ascii_wctomb+0x16>
  4049e2:	2aff      	cmp	r2, #255	; 0xff
  4049e4:	bf85      	ittet	hi
  4049e6:	238a      	movhi	r3, #138	; 0x8a
  4049e8:	6003      	strhi	r3, [r0, #0]
  4049ea:	700a      	strbls	r2, [r1, #0]
  4049ec:	f04f 30ff 	movhi.w	r0, #4294967295
  4049f0:	bf98      	it	ls
  4049f2:	2001      	movls	r0, #1
  4049f4:	4770      	bx	lr
  4049f6:	4608      	mov	r0, r1
  4049f8:	4770      	bx	lr
	...

004049fc <__aeabi_dcmpun>:
  4049fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404a04:	d102      	bne.n	404a0c <__aeabi_dcmpun+0x10>
  404a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404a0a:	d10a      	bne.n	404a22 <__aeabi_dcmpun+0x26>
  404a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404a14:	d102      	bne.n	404a1c <__aeabi_dcmpun+0x20>
  404a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404a1a:	d102      	bne.n	404a22 <__aeabi_dcmpun+0x26>
  404a1c:	f04f 0000 	mov.w	r0, #0
  404a20:	4770      	bx	lr
  404a22:	f04f 0001 	mov.w	r0, #1
  404a26:	4770      	bx	lr
  404a28:	682f2e2e 	.word	0x682f2e2e
  404a2c:	732f6c61 	.word	0x732f6c61
  404a30:	682f6372 	.word	0x682f6372
  404a34:	615f6c61 	.word	0x615f6c61
  404a38:	735f6364 	.word	0x735f6364
  404a3c:	2e636e79 	.word	0x2e636e79
  404a40:	00000063 	.word	0x00000063
  404a44:	682f2e2e 	.word	0x682f2e2e
  404a48:	732f6c61 	.word	0x732f6c61
  404a4c:	682f6372 	.word	0x682f6372
  404a50:	635f6c61 	.word	0x635f6c61
  404a54:	615f6e61 	.word	0x615f6e61
  404a58:	636e7973 	.word	0x636e7973
  404a5c:	0000632e 	.word	0x0000632e
  404a60:	682f2e2e 	.word	0x682f2e2e
  404a64:	732f6c61 	.word	0x732f6c61
  404a68:	682f6372 	.word	0x682f6372
  404a6c:	695f6c61 	.word	0x695f6c61
  404a70:	00632e6f 	.word	0x00632e6f
  404a74:	682f2e2e 	.word	0x682f2e2e
  404a78:	732f6c61 	.word	0x732f6c61
  404a7c:	682f6372 	.word	0x682f6372
  404a80:	705f6c61 	.word	0x705f6c61
  404a84:	632e6d77 	.word	0x632e6d77
  404a88:	00000000 	.word	0x00000000
  404a8c:	682f2e2e 	.word	0x682f2e2e
  404a90:	732f6c61 	.word	0x732f6c61
  404a94:	682f6372 	.word	0x682f6372
  404a98:	755f6c61 	.word	0x755f6c61
  404a9c:	74726173 	.word	0x74726173
  404aa0:	6e79735f 	.word	0x6e79735f
  404aa4:	00632e63 	.word	0x00632e63

00404aa8 <_afecs>:
  404aa8:	00000000 2f843100 03000000 ffffffff     .....1./........
  404ab8:	0000ffff 00000000 00000000 00000000     ................
  404ac8:	0000010c 00000000 00000000 00000000     ................
  404ad8:	00000000 00000200 00000200 00000200     ................
  404ae8:	00000200 00000200 00000200 00000200     ................
  404af8:	00000200 00000200 00000200 00000200     ................
  404b08:	00000200 00000001 2f843100 03000000     .........1./....
  404b18:	ffffffff 0000ffff 00000000 00000000     ................
  404b28:	00000000 0000010c 00000000 00000000     ................
	...
  404b40:	00000200 00000200 00000200 00000200     ................
  404b50:	00000200 00000200 00000200 00000200     ................
  404b60:	00000200 00000200 00000200 00000200     ................
  404b70:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  404b80:	63656661 0000632e                       afec.c..

00404b88 <_ext_irq>:
  404b88:	00000000 00000024 00000000 00000000     ....$...........
	...
  404ba4:	00000003 00080000 00000000 00000000     ................
	...

00404bc0 <_pio_irq_n>:
  404bc0:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  404bd0:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  404be0:	00000000                                ....

00404be4 <_pwms>:
  404be4:	40020000 0000001f 00010019 00000001     ...@............
  404bf4:	00000001 000000ff 00000000 00000004     ................
	...
  404c10:	00000002 00404c6c 00000000 20400264     ....lL@.....d.@ 
  404c20:	4005c000 0000003c 00010019 00000001     ...@<...........
  404c30:	00000001 000000ff 00000000 00000004     ................
	...
  404c4c:	00000001 00404c5c 00000000 20400258     ....\L@.....X.@ 

00404c5c <_ch_cfg1>:
  404c5c:	00000000 0000010b 000003e8 00000200     ................

00404c6c <_ch_cfg0>:
  404c6c:	00000000 0000010b 000003e8 00000200     ................
  404c7c:	00000002 0000010b 000003e8 00000200     ................
  404c8c:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  404c9c:	632e6d77 00000000                       wm.c....

00404ca4 <_usarts>:
  404ca4:	00000001 001008c0 000100f4 682f2e2e     ............../h
  404cb4:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  404cc4:	632e7472 00000000 73696874 20736920     rt.c....this is 
  404cd4:	726f7709 676e696b 0000000a              .working....

00404ce0 <_global_impure_ptr>:
  404ce0:	20400018 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  404cf0:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  404d00:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  404d10:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  404d20:	4e614e00 00000000                       .NaN....

00404d28 <__sf_fake_stderr>:
	...

00404d48 <__sf_fake_stdin>:
	...

00404d68 <__sf_fake_stdout>:
	...

00404d88 <__mprec_bigtens>:
  404d88:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  404d98:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  404da8:	7f73bf3c 75154fdd                       <.s..O.u

00404db0 <__mprec_tens>:
  404db0:	00000000 3ff00000 00000000 40240000     .......?......$@
  404dc0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  404dd0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  404de0:	00000000 412e8480 00000000 416312d0     .......A......cA
  404df0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  404e00:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  404e10:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  404e20:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  404e30:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  404e40:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  404e50:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  404e60:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  404e70:	79d99db4 44ea7843                       ...yCx.D

00404e78 <p05.6047>:
  404e78:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  404e88:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  404e98:	5849534f 00002e00                                OSIX...

00404e9f <_ctype_>:
  404e9f:	20202000 20202020 28282020 20282828     .         ((((( 
  404eaf:	20202020 20202020 20202020 20202020                     
  404ebf:	10108820 10101010 10101010 10101010      ...............
  404ecf:	04040410 04040404 10040404 10101010     ................
  404edf:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404eef:	01010101 01010101 01010101 10101010     ................
  404eff:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404f0f:	02020202 02020202 02020202 10101010     ................
  404f1f:	00000020 00000000 00000000 00000000      ...............
	...

00404fa0 <_init>:
  404fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404fa2:	bf00      	nop
  404fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404fa6:	bc08      	pop	{r3}
  404fa8:	469e      	mov	lr, r3
  404faa:	4770      	bx	lr

00404fac <__init_array_start>:
  404fac:	0040018d 	.word	0x0040018d

00404fb0 <_fini>:
  404fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404fb2:	bf00      	nop
  404fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404fb6:	bc08      	pop	{r3}
  404fb8:	469e      	mov	lr, r3
  404fba:	4770      	bx	lr

00404fbc <__fini_array_start>:
  404fbc:	00400169 	.word	0x00400169
