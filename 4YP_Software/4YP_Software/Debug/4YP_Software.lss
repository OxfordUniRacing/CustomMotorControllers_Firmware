
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049a8  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  004049a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000154  20400218  00404bc0  00020218  2**2
                  ALLOC
  3 .heap         00000204  2040036c  00404d14  00020218  2**0
                  ALLOC
  4 .stack        00000400  20400570  00404f18  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001fe3a  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000042ff  00000000  00000000  000400d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009ef1  00000000  00000000  000443d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000bb8  00000000  00000000  0004e2c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a20  00000000  00000000  0004ee81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00044e7f  00000000  00000000  0004f8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00019e44  00000000  00000000  00094720  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0015431d  00000000  00000000  000ae564  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002874  00000000  00000000  00202884  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 09 40 20 cd 02 40 00 c9 02 40 00 c9 02 40 00     p.@ ..@...@...@.
  400010:	c9 02 40 00 c9 02 40 00 c9 02 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c9 02 40 00 c9 02 40 00 00 00 00 00 c9 02 40 00     ..@...@.......@.
  40003c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40004c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40005c:	c9 02 40 00 c9 02 40 00 00 00 00 00 91 11 40 00     ..@...@.......@.
  40006c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40007c:	c9 02 40 00 85 11 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40008c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40009c:	59 16 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     Y.@...@...@...@.
  4000ac:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  4000bc:	3d 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     =.@...@...@...@.
  4000cc:	c9 02 40 00 c9 02 40 00 55 0f 40 00 c9 02 40 00     ..@...@.U.@...@.
  4000dc:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  4000ec:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  4000fc:	c9 02 40 00 c9 02 40 00 c9 02 40 00 6d 16 40 00     ..@...@...@.m.@.
  40010c:	c9 02 40 00 c9 02 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ......@...@...@.
  40012c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40013c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40014c:	c9 02 40 00 c9 02 40 00 c9 02 40 00 c9 02 40 00     ..@...@...@...@.
  40015c:	c9 02 40 00 c9 02 40 00 c9 02 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	004049a8 	.word	0x004049a8

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004049a8 	.word	0x004049a8
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	004049a8 	.word	0x004049a8
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	0040072d 	.word	0x0040072d
  4001e4:	004019a5 	.word	0x004019a5

004001e8 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  4001e8:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_sync_enable_channel(ADC_CURRENT_A);
  4001ea:	4d11      	ldr	r5, [pc, #68]	; (400230 <adc_enable_all+0x48>)
  4001ec:	2108      	movs	r1, #8
  4001ee:	4628      	mov	r0, r5
  4001f0:	4c10      	ldr	r4, [pc, #64]	; (400234 <adc_enable_all+0x4c>)
  4001f2:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_CURRENT_B);
  4001f4:	2102      	movs	r1, #2
  4001f6:	4628      	mov	r0, r5
  4001f8:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_CURRENT_C);
  4001fa:	4e0f      	ldr	r6, [pc, #60]	; (400238 <adc_enable_all+0x50>)
  4001fc:	2101      	movs	r1, #1
  4001fe:	4630      	mov	r0, r6
  400200:	47a0      	blx	r4
	
	adc_sync_enable_channel(ADC_SUPPL_VOLTAGE);
  400202:	2106      	movs	r1, #6
  400204:	4630      	mov	r0, r6
  400206:	47a0      	blx	r4
	
	adc_sync_enable_channel(ADC_TEMP_1);
  400208:	2105      	movs	r1, #5
  40020a:	4630      	mov	r0, r6
  40020c:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_2);
  40020e:	2106      	movs	r1, #6
  400210:	4628      	mov	r0, r5
  400212:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_sync_enable_channel(ADC_TEMP_4);
  400214:	210a      	movs	r1, #10
  400216:	4628      	mov	r0, r5
  400218:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_5);
  40021a:	2100      	movs	r1, #0
  40021c:	4630      	mov	r0, r6
  40021e:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_6);
  400220:	2105      	movs	r1, #5
  400222:	4628      	mov	r0, r5
  400224:	47a0      	blx	r4
	adc_sync_enable_channel(ADC_TEMP_MOTOR);
  400226:	2100      	movs	r1, #0
  400228:	4628      	mov	r0, r5
  40022a:	47a0      	blx	r4
  40022c:	bd70      	pop	{r4, r5, r6, pc}
  40022e:	bf00      	nop
  400230:	20400344 	.word	0x20400344
  400234:	00400865 	.word	0x00400865
  400238:	20400364 	.word	0x20400364

0040023c <PWM0_Handler>:
#include <hpl_pwm_config.h>


bool led = false;
void PWM0_Handler(void){
	led = !led;
  40023c:	4a07      	ldr	r2, [pc, #28]	; (40025c <PWM0_Handler+0x20>)
  40023e:	7813      	ldrb	r3, [r2, #0]
  400240:	f083 0301 	eor.w	r3, r3, #1
  400244:	7013      	strb	r3, [r2, #0]
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	void *const hw = port_to_reg(port);
	if (level) {
  400246:	b923      	cbnz	r3, 400252 <PWM0_Handler+0x16>
	((Pio *)hw)->PIO_CODR = ~data;
}

static inline void hri_pio_clear_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
	((Pio *)hw)->PIO_CODR = mask;
  400248:	f44f 7280 	mov.w	r2, #256	; 0x100
  40024c:	4b04      	ldr	r3, [pc, #16]	; (400260 <PWM0_Handler+0x24>)
  40024e:	635a      	str	r2, [r3, #52]	; 0x34
  400250:	4770      	bx	lr
	((Pio *)hw)->PIO_SODR = mask;
  400252:	f44f 7280 	mov.w	r2, #256	; 0x100
  400256:	4b02      	ldr	r3, [pc, #8]	; (400260 <PWM0_Handler+0x24>)
  400258:	631a      	str	r2, [r3, #48]	; 0x30
  40025a:	4770      	bx	lr
  40025c:	20400234 	.word	0x20400234
  400260:	400e1200 	.word	0x400e1200

00400264 <pwm_enable_all>:



//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400264:	b570      	push	{r4, r5, r6, lr}
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  400266:	2201      	movs	r2, #1
  400268:	4b11      	ldr	r3, [pc, #68]	; (4002b0 <pwm_enable_all+0x4c>)
  40026a:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40026c:	4b11      	ldr	r3, [pc, #68]	; (4002b4 <pwm_enable_all+0x50>)
  40026e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400272:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40027c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400280:	f3bf 8f6f 	isb	sy
	NVIC_DisableIRQ(PWM1_IRQn);
	
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  400284:	4c0c      	ldr	r4, [pc, #48]	; (4002b8 <pwm_enable_all+0x54>)
  400286:	4620      	mov	r0, r4
  400288:	4e0c      	ldr	r6, [pc, #48]	; (4002bc <pwm_enable_all+0x58>)
  40028a:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  40028c:	4d0c      	ldr	r5, [pc, #48]	; (4002c0 <pwm_enable_all+0x5c>)
  40028e:	4628      	mov	r0, r5
  400290:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  400292:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400296:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40029a:	4620      	mov	r0, r4
  40029c:	4c09      	ldr	r4, [pc, #36]	; (4002c4 <pwm_enable_all+0x60>)
  40029e:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1  , PWM_PERIOD, PWM_PERIOD>>1);
  4002a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4002a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4002a8:	4628      	mov	r0, r5
  4002aa:	47a0      	blx	r4
  4002ac:	bd70      	pop	{r4, r5, r6, pc}
  4002ae:	bf00      	nop
  4002b0:	40020000 	.word	0x40020000
  4002b4:	e000e100 	.word	0xe000e100
  4002b8:	204002bc 	.word	0x204002bc
  4002bc:	004009f1 	.word	0x004009f1
  4002c0:	20400348 	.word	0x20400348
  4002c4:	00400a2d 	.word	0x00400a2d

004002c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4002c8:	e7fe      	b.n	4002c8 <Dummy_Handler>
	...

004002cc <Reset_Handler>:
{
  4002cc:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4002ce:	4b10      	ldr	r3, [pc, #64]	; (400310 <Reset_Handler+0x44>)
  4002d0:	4a10      	ldr	r2, [pc, #64]	; (400314 <Reset_Handler+0x48>)
  4002d2:	429a      	cmp	r2, r3
  4002d4:	d009      	beq.n	4002ea <Reset_Handler+0x1e>
  4002d6:	4b0e      	ldr	r3, [pc, #56]	; (400310 <Reset_Handler+0x44>)
  4002d8:	4a0e      	ldr	r2, [pc, #56]	; (400314 <Reset_Handler+0x48>)
  4002da:	e003      	b.n	4002e4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4002dc:	6811      	ldr	r1, [r2, #0]
  4002de:	6019      	str	r1, [r3, #0]
  4002e0:	3304      	adds	r3, #4
  4002e2:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4002e4:	490c      	ldr	r1, [pc, #48]	; (400318 <Reset_Handler+0x4c>)
  4002e6:	428b      	cmp	r3, r1
  4002e8:	d3f8      	bcc.n	4002dc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4002ea:	4b0c      	ldr	r3, [pc, #48]	; (40031c <Reset_Handler+0x50>)
  4002ec:	e002      	b.n	4002f4 <Reset_Handler+0x28>
                *pDest++ = 0;
  4002ee:	2200      	movs	r2, #0
  4002f0:	601a      	str	r2, [r3, #0]
  4002f2:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4002f4:	4a0a      	ldr	r2, [pc, #40]	; (400320 <Reset_Handler+0x54>)
  4002f6:	4293      	cmp	r3, r2
  4002f8:	d3f9      	bcc.n	4002ee <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4002fa:	4a0a      	ldr	r2, [pc, #40]	; (400324 <Reset_Handler+0x58>)
  4002fc:	4b0a      	ldr	r3, [pc, #40]	; (400328 <Reset_Handler+0x5c>)
  4002fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400302:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400304:	4b09      	ldr	r3, [pc, #36]	; (40032c <Reset_Handler+0x60>)
  400306:	4798      	blx	r3
        main();
  400308:	4b09      	ldr	r3, [pc, #36]	; (400330 <Reset_Handler+0x64>)
  40030a:	4798      	blx	r3
  40030c:	e7fe      	b.n	40030c <Reset_Handler+0x40>
  40030e:	bf00      	nop
  400310:	20400000 	.word	0x20400000
  400314:	004049a8 	.word	0x004049a8
  400318:	20400218 	.word	0x20400218
  40031c:	20400218 	.word	0x20400218
  400320:	2040036c 	.word	0x2040036c
  400324:	e000ed00 	.word	0xe000ed00
  400328:	00400000 	.word	0x00400000
  40032c:	004022b9 	.word	0x004022b9
  400330:	00401899 	.word	0x00401899

00400334 <ADC_0_PORT_init>:
	((Pio *)hw)->PIO_PER = mask;
  400334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400338:	4b08      	ldr	r3, [pc, #32]	; (40035c <ADC_0_PORT_init+0x28>)
  40033a:	601a      	str	r2, [r3, #0]
  40033c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400340:	2208      	movs	r2, #8
  400342:	601a      	str	r2, [r3, #0]
  400344:	2204      	movs	r2, #4
  400346:	601a      	str	r2, [r3, #0]
  400348:	4a05      	ldr	r2, [pc, #20]	; (400360 <ADC_0_PORT_init+0x2c>)
  40034a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40034e:	6011      	str	r1, [r2, #0]
  400350:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400354:	6011      	str	r1, [r2, #0]
  400356:	2201      	movs	r2, #1
  400358:	601a      	str	r2, [r3, #0]
  40035a:	4770      	bx	lr
  40035c:	400e1400 	.word	0x400e1400
  400360:	400e0e00 	.word	0x400e0e00

00400364 <ADC_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400364:	4b04      	ldr	r3, [pc, #16]	; (400378 <ADC_0_CLOCK_init+0x14>)
  400366:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400368:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  40036c:	d103      	bne.n	400376 <ADC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40036e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400372:	4b01      	ldr	r3, [pc, #4]	; (400378 <ADC_0_CLOCK_init+0x14>)
  400374:	611a      	str	r2, [r3, #16]
  400376:	4770      	bx	lr
  400378:	400e0600 	.word	0x400e0600

0040037c <ADC_0_init>:

	_pmc_enable_periph_clock(ID_AFEC0);
}

void ADC_0_init(void)
{
  40037c:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
  40037e:	4b05      	ldr	r3, [pc, #20]	; (400394 <ADC_0_init+0x18>)
  400380:	4798      	blx	r3
	ADC_0_PORT_init();
  400382:	4b05      	ldr	r3, [pc, #20]	; (400398 <ADC_0_init+0x1c>)
  400384:	4798      	blx	r3
	adc_sync_init(&ADC_0, AFEC0, (void *)NULL);
  400386:	2200      	movs	r2, #0
  400388:	4904      	ldr	r1, [pc, #16]	; (40039c <ADC_0_init+0x20>)
  40038a:	4805      	ldr	r0, [pc, #20]	; (4003a0 <ADC_0_init+0x24>)
  40038c:	4b05      	ldr	r3, [pc, #20]	; (4003a4 <ADC_0_init+0x28>)
  40038e:	4798      	blx	r3
  400390:	bd08      	pop	{r3, pc}
  400392:	bf00      	nop
  400394:	00400365 	.word	0x00400365
  400398:	00400335 	.word	0x00400335
  40039c:	4003c000 	.word	0x4003c000
  4003a0:	20400344 	.word	0x20400344
  4003a4:	00400835 	.word	0x00400835

004003a8 <ADC_1_PORT_init>:
  4003a8:	2202      	movs	r2, #2
  4003aa:	4b07      	ldr	r3, [pc, #28]	; (4003c8 <ADC_1_PORT_init+0x20>)
  4003ac:	601a      	str	r2, [r3, #0]
  4003ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4003b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4003b6:	601a      	str	r2, [r3, #0]
  4003b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4003bc:	601a      	str	r2, [r3, #0]
  4003be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4003c2:	601a      	str	r2, [r3, #0]
  4003c4:	4770      	bx	lr
  4003c6:	bf00      	nop
  4003c8:	400e1000 	.word	0x400e1000

004003cc <ADC_1_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4003cc:	4b05      	ldr	r3, [pc, #20]	; (4003e4 <ADC_1_CLOCK_init+0x18>)
  4003ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4003d2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4003d6:	d104      	bne.n	4003e2 <ADC_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4003d8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003dc:	4b01      	ldr	r3, [pc, #4]	; (4003e4 <ADC_1_CLOCK_init+0x18>)
  4003de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4003e2:	4770      	bx	lr
  4003e4:	400e0600 	.word	0x400e0600

004003e8 <ADC_1_init>:

	_pmc_enable_periph_clock(ID_AFEC1);
}

void ADC_1_init(void)
{
  4003e8:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
  4003ea:	4b05      	ldr	r3, [pc, #20]	; (400400 <ADC_1_init+0x18>)
  4003ec:	4798      	blx	r3
	ADC_1_PORT_init();
  4003ee:	4b05      	ldr	r3, [pc, #20]	; (400404 <ADC_1_init+0x1c>)
  4003f0:	4798      	blx	r3
	adc_sync_init(&ADC_1, AFEC1, (void *)NULL);
  4003f2:	2200      	movs	r2, #0
  4003f4:	4904      	ldr	r1, [pc, #16]	; (400408 <ADC_1_init+0x20>)
  4003f6:	4805      	ldr	r0, [pc, #20]	; (40040c <ADC_1_init+0x24>)
  4003f8:	4b05      	ldr	r3, [pc, #20]	; (400410 <ADC_1_init+0x28>)
  4003fa:	4798      	blx	r3
  4003fc:	bd08      	pop	{r3, pc}
  4003fe:	bf00      	nop
  400400:	004003cd 	.word	0x004003cd
  400404:	004003a9 	.word	0x004003a9
  400408:	40064000 	.word	0x40064000
  40040c:	20400364 	.word	0x20400364
  400410:	00400835 	.word	0x00400835

00400414 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400414:	4b04      	ldr	r3, [pc, #16]	; (400428 <EXTERNAL_IRQ_D_init+0x14>)
  400416:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40041a:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  40041c:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  40041e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400422:	601a      	str	r2, [r3, #0]
  400424:	4770      	bx	lr
  400426:	bf00      	nop
  400428:	400e1400 	.word	0x400e1400

0040042c <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  40042c:	4b0a      	ldr	r3, [pc, #40]	; (400458 <EXTERNAL_IRQ_A_init+0x2c>)
  40042e:	2204      	movs	r2, #4
  400430:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400432:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400434:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400438:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40043a:	2220      	movs	r2, #32
  40043c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40043e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400440:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400444:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400446:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40044a:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  40044c:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40044e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400452:	601a      	str	r2, [r3, #0]
  400454:	4770      	bx	lr
  400456:	bf00      	nop
  400458:	400e0e00 	.word	0x400e0e00

0040045c <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40045c:	4b16      	ldr	r3, [pc, #88]	; (4004b8 <PWM_0_PORT_init+0x5c>)
  40045e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400460:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400464:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400466:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400468:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  40046c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40046e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400472:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400474:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400476:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  40047a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40047c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40047e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400482:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400484:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400488:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40048a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40048c:	f022 0202 	bic.w	r2, r2, #2
  400490:	671a      	str	r2, [r3, #112]	; 0x70
  400492:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400494:	f022 0202 	bic.w	r2, r2, #2
  400498:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40049a:	2202      	movs	r2, #2
  40049c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40049e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004a0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  4004a4:	671a      	str	r2, [r3, #112]	; 0x70
  4004a6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004a8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  4004ac:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4004b2:	605a      	str	r2, [r3, #4]
  4004b4:	4770      	bx	lr
  4004b6:	bf00      	nop
  4004b8:	400e0e00 	.word	0x400e0e00

004004bc <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4004bc:	4b04      	ldr	r3, [pc, #16]	; (4004d0 <PWM_0_CLOCK_init+0x14>)
  4004be:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4004c0:	2b00      	cmp	r3, #0
  4004c2:	db03      	blt.n	4004cc <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4004c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4004c8:	4b01      	ldr	r3, [pc, #4]	; (4004d0 <PWM_0_CLOCK_init+0x14>)
  4004ca:	611a      	str	r2, [r3, #16]
  4004cc:	4770      	bx	lr
  4004ce:	bf00      	nop
  4004d0:	400e0600 	.word	0x400e0600

004004d4 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  4004d4:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  4004d6:	4b06      	ldr	r3, [pc, #24]	; (4004f0 <PWM_0_init+0x1c>)
  4004d8:	4798      	blx	r3
	PWM_0_PORT_init();
  4004da:	4b06      	ldr	r3, [pc, #24]	; (4004f4 <PWM_0_init+0x20>)
  4004dc:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  4004de:	4b06      	ldr	r3, [pc, #24]	; (4004f8 <PWM_0_init+0x24>)
  4004e0:	4798      	blx	r3
  4004e2:	4602      	mov	r2, r0
  4004e4:	4905      	ldr	r1, [pc, #20]	; (4004fc <PWM_0_init+0x28>)
  4004e6:	4806      	ldr	r0, [pc, #24]	; (400500 <PWM_0_init+0x2c>)
  4004e8:	4b06      	ldr	r3, [pc, #24]	; (400504 <PWM_0_init+0x30>)
  4004ea:	4798      	blx	r3
  4004ec:	bd08      	pop	{r3, pc}
  4004ee:	bf00      	nop
  4004f0:	004004bd 	.word	0x004004bd
  4004f4:	0040045d 	.word	0x0040045d
  4004f8:	004014bd 	.word	0x004014bd
  4004fc:	40020000 	.word	0x40020000
  400500:	204002bc 	.word	0x204002bc
  400504:	004009ad 	.word	0x004009ad

00400508 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400508:	4b0c      	ldr	r3, [pc, #48]	; (40053c <PWM_1_PORT_init+0x34>)
  40050a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40050c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400510:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400512:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400514:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400518:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40051a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40051e:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400520:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400524:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400526:	f042 0201 	orr.w	r2, r2, #1
  40052a:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40052c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40052e:	f022 0201 	bic.w	r2, r2, #1
  400532:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400534:	2201      	movs	r2, #1
  400536:	605a      	str	r2, [r3, #4]
  400538:	4770      	bx	lr
  40053a:	bf00      	nop
  40053c:	400e0e00 	.word	0x400e0e00

00400540 <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400540:	4b05      	ldr	r3, [pc, #20]	; (400558 <PWM_1_CLOCK_init+0x18>)
  400542:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400546:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  40054a:	d104      	bne.n	400556 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  40054c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400550:	4b01      	ldr	r3, [pc, #4]	; (400558 <PWM_1_CLOCK_init+0x18>)
  400552:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400556:	4770      	bx	lr
  400558:	400e0600 	.word	0x400e0600

0040055c <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  40055c:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  40055e:	4b06      	ldr	r3, [pc, #24]	; (400578 <PWM_1_init+0x1c>)
  400560:	4798      	blx	r3
	PWM_1_PORT_init();
  400562:	4b06      	ldr	r3, [pc, #24]	; (40057c <PWM_1_init+0x20>)
  400564:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400566:	4b06      	ldr	r3, [pc, #24]	; (400580 <PWM_1_init+0x24>)
  400568:	4798      	blx	r3
  40056a:	4602      	mov	r2, r0
  40056c:	4905      	ldr	r1, [pc, #20]	; (400584 <PWM_1_init+0x28>)
  40056e:	4806      	ldr	r0, [pc, #24]	; (400588 <PWM_1_init+0x2c>)
  400570:	4b06      	ldr	r3, [pc, #24]	; (40058c <PWM_1_init+0x30>)
  400572:	4798      	blx	r3
  400574:	bd08      	pop	{r3, pc}
  400576:	bf00      	nop
  400578:	00400541 	.word	0x00400541
  40057c:	00400509 	.word	0x00400509
  400580:	004014bd 	.word	0x004014bd
  400584:	4005c000 	.word	0x4005c000
  400588:	20400348 	.word	0x20400348
  40058c:	004009ad 	.word	0x004009ad

00400590 <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400590:	4b06      	ldr	r3, [pc, #24]	; (4005ac <ENCODER_A_PORT_init+0x1c>)
  400592:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400594:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400598:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40059a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40059c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  4005a0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4005a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4005a6:	605a      	str	r2, [r3, #4]
  4005a8:	4770      	bx	lr
  4005aa:	bf00      	nop
  4005ac:	400e0e00 	.word	0x400e0e00

004005b0 <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  4005b0:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005b2:	4b0e      	ldr	r3, [pc, #56]	; (4005ec <ENCODER_A_init+0x3c>)
  4005b4:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4005b6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  4005ba:	d103      	bne.n	4005c4 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4005c0:	4b0a      	ldr	r3, [pc, #40]	; (4005ec <ENCODER_A_init+0x3c>)
  4005c2:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005c4:	4b09      	ldr	r3, [pc, #36]	; (4005ec <ENCODER_A_init+0x3c>)
  4005c6:	699b      	ldr	r3, [r3, #24]
  4005c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4005cc:	d103      	bne.n	4005d6 <ENCODER_A_init+0x26>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4005d2:	4b06      	ldr	r3, [pc, #24]	; (4005ec <ENCODER_A_init+0x3c>)
  4005d4:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	_pmc_enable_periph_clock(ID_TC0_CHANNEL1);
	ENCODER_A_PORT_init();
  4005d6:	4b06      	ldr	r3, [pc, #24]	; (4005f0 <ENCODER_A_init+0x40>)
  4005d8:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  4005da:	4b06      	ldr	r3, [pc, #24]	; (4005f4 <ENCODER_A_init+0x44>)
  4005dc:	4798      	blx	r3
  4005de:	4602      	mov	r2, r0
  4005e0:	4905      	ldr	r1, [pc, #20]	; (4005f8 <ENCODER_A_init+0x48>)
  4005e2:	4806      	ldr	r0, [pc, #24]	; (4005fc <ENCODER_A_init+0x4c>)
  4005e4:	4b06      	ldr	r3, [pc, #24]	; (400600 <ENCODER_A_init+0x50>)
  4005e6:	4798      	blx	r3
  4005e8:	bd08      	pop	{r3, pc}
  4005ea:	bf00      	nop
  4005ec:	400e0600 	.word	0x400e0600
  4005f0:	00400591 	.word	0x00400591
  4005f4:	00401653 	.word	0x00401653
  4005f8:	4000c000 	.word	0x4000c000
  4005fc:	20400328 	.word	0x20400328
  400600:	00400b15 	.word	0x00400b15

00400604 <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400604:	4b06      	ldr	r3, [pc, #24]	; (400620 <ENCODER_B_PORT_init+0x1c>)
  400606:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400608:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  40060c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40060e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400610:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  400614:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400616:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40061a:	605a      	str	r2, [r3, #4]
  40061c:	4770      	bx	lr
  40061e:	bf00      	nop
  400620:	400e1400 	.word	0x400e1400

00400624 <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  400624:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400626:	4b10      	ldr	r3, [pc, #64]	; (400668 <ENCODER_B_init+0x44>)
  400628:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40062c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  400630:	d104      	bne.n	40063c <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400632:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400636:	4b0c      	ldr	r3, [pc, #48]	; (400668 <ENCODER_B_init+0x44>)
  400638:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40063c:	4b0a      	ldr	r3, [pc, #40]	; (400668 <ENCODER_B_init+0x44>)
  40063e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  400642:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  400646:	d104      	bne.n	400652 <ENCODER_B_init+0x2e>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400648:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40064c:	4b06      	ldr	r3, [pc, #24]	; (400668 <ENCODER_B_init+0x44>)
  40064e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	_pmc_enable_periph_clock(ID_TC3_CHANNEL1);
	ENCODER_B_PORT_init();
  400652:	4b06      	ldr	r3, [pc, #24]	; (40066c <ENCODER_B_init+0x48>)
  400654:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  400656:	4b06      	ldr	r3, [pc, #24]	; (400670 <ENCODER_B_init+0x4c>)
  400658:	4798      	blx	r3
  40065a:	4602      	mov	r2, r0
  40065c:	4905      	ldr	r1, [pc, #20]	; (400674 <ENCODER_B_init+0x50>)
  40065e:	4806      	ldr	r0, [pc, #24]	; (400678 <ENCODER_B_init+0x54>)
  400660:	4b06      	ldr	r3, [pc, #24]	; (40067c <ENCODER_B_init+0x58>)
  400662:	4798      	blx	r3
  400664:	bd08      	pop	{r3, pc}
  400666:	bf00      	nop
  400668:	400e0600 	.word	0x400e0600
  40066c:	00400605 	.word	0x00400605
  400670:	00401653 	.word	0x00401653
  400674:	40054000 	.word	0x40054000
  400678:	204002d8 	.word	0x204002d8
  40067c:	00400b15 	.word	0x00400b15

00400680 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400680:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400682:	4802      	ldr	r0, [pc, #8]	; (40068c <delay_driver_init+0xc>)
  400684:	4b02      	ldr	r3, [pc, #8]	; (400690 <delay_driver_init+0x10>)
  400686:	4798      	blx	r3
  400688:	bd08      	pop	{r3, pc}
  40068a:	bf00      	nop
  40068c:	e000e010 	.word	0xe000e010
  400690:	004008ad 	.word	0x004008ad

00400694 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400694:	4b0f      	ldr	r3, [pc, #60]	; (4006d4 <EDBG_COM_PORT_init+0x40>)
  400696:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400698:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40069c:	671a      	str	r2, [r3, #112]	; 0x70
  40069e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006a0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4006a4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4006a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4006aa:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  4006ac:	4a0a      	ldr	r2, [pc, #40]	; (4006d8 <EDBG_COM_PORT_init+0x44>)
  4006ae:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4006b2:	f043 0310 	orr.w	r3, r3, #16
  4006b6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4006ba:	4b08      	ldr	r3, [pc, #32]	; (4006dc <EDBG_COM_PORT_init+0x48>)
  4006bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006be:	f042 0210 	orr.w	r2, r2, #16
  4006c2:	671a      	str	r2, [r3, #112]	; 0x70
  4006c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006c6:	f042 0210 	orr.w	r2, r2, #16
  4006ca:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4006cc:	2210      	movs	r2, #16
  4006ce:	605a      	str	r2, [r3, #4]
  4006d0:	4770      	bx	lr
  4006d2:	bf00      	nop
  4006d4:	400e0e00 	.word	0x400e0e00
  4006d8:	40088000 	.word	0x40088000
  4006dc:	400e1000 	.word	0x400e1000

004006e0 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4006e0:	4b04      	ldr	r3, [pc, #16]	; (4006f4 <EDBG_COM_CLOCK_init+0x14>)
  4006e2:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4006e4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4006e8:	d103      	bne.n	4006f2 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4006ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4006ee:	4b01      	ldr	r3, [pc, #4]	; (4006f4 <EDBG_COM_CLOCK_init+0x14>)
  4006f0:	611a      	str	r2, [r3, #16]
  4006f2:	4770      	bx	lr
  4006f4:	400e0600 	.word	0x400e0600

004006f8 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  4006f8:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  4006fa:	4b06      	ldr	r3, [pc, #24]	; (400714 <EDBG_COM_init+0x1c>)
  4006fc:	4798      	blx	r3
	EDBG_COM_PORT_init();
  4006fe:	4b06      	ldr	r3, [pc, #24]	; (400718 <EDBG_COM_init+0x20>)
  400700:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  400702:	4b06      	ldr	r3, [pc, #24]	; (40071c <EDBG_COM_init+0x24>)
  400704:	4798      	blx	r3
  400706:	4602      	mov	r2, r0
  400708:	4905      	ldr	r1, [pc, #20]	; (400720 <EDBG_COM_init+0x28>)
  40070a:	4806      	ldr	r0, [pc, #24]	; (400724 <EDBG_COM_init+0x2c>)
  40070c:	4b06      	ldr	r3, [pc, #24]	; (400728 <EDBG_COM_init+0x30>)
  40070e:	4798      	blx	r3
  400710:	bd08      	pop	{r3, pc}
  400712:	bf00      	nop
  400714:	004006e1 	.word	0x004006e1
  400718:	00400695 	.word	0x00400695
  40071c:	00401895 	.word	0x00401895
  400720:	40028000 	.word	0x40028000
  400724:	2040031c 	.word	0x2040031c
  400728:	00400c5d 	.word	0x00400c5d

0040072c <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  40072c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  40072e:	4b32      	ldr	r3, [pc, #200]	; (4007f8 <system_init+0xcc>)
  400730:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400732:	4b32      	ldr	r3, [pc, #200]	; (4007fc <system_init+0xd0>)
  400734:	699b      	ldr	r3, [r3, #24]
  400736:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40073a:	d103      	bne.n	400744 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40073c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400740:	4b2e      	ldr	r3, [pc, #184]	; (4007fc <system_init+0xd0>)
  400742:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400744:	4b2d      	ldr	r3, [pc, #180]	; (4007fc <system_init+0xd0>)
  400746:	699b      	ldr	r3, [r3, #24]
  400748:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  40074c:	d103      	bne.n	400756 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40074e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400752:	4b2a      	ldr	r3, [pc, #168]	; (4007fc <system_init+0xd0>)
  400754:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400756:	4b29      	ldr	r3, [pc, #164]	; (4007fc <system_init+0xd0>)
  400758:	699b      	ldr	r3, [r3, #24]
  40075a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40075e:	d103      	bne.n	400768 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400760:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400764:	4b25      	ldr	r3, [pc, #148]	; (4007fc <system_init+0xd0>)
  400766:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400768:	4a25      	ldr	r2, [pc, #148]	; (400800 <system_init+0xd4>)
  40076a:	6853      	ldr	r3, [r2, #4]
  40076c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400770:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  400772:	4b24      	ldr	r3, [pc, #144]	; (400804 <system_init+0xd8>)
  400774:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400778:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  40077a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  40077e:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  400780:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400782:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  400786:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400788:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  40078a:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40078c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400790:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400792:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400794:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40079a:	f44f 7080 	mov.w	r0, #256	; 0x100
  40079e:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007a0:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007a2:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007a4:	f44f 7000 	mov.w	r0, #512	; 0x200
  4007a8:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007aa:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007ac:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4007b2:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007b4:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007b6:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4007bc:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007be:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007c0:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4007c2:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4007c4:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4007c6:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  4007c8:	4b0f      	ldr	r3, [pc, #60]	; (400808 <system_init+0xdc>)
  4007ca:	4798      	blx	r3

	ADC_1_init();
  4007cc:	4b0f      	ldr	r3, [pc, #60]	; (40080c <system_init+0xe0>)
  4007ce:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  4007d0:	4b0f      	ldr	r3, [pc, #60]	; (400810 <system_init+0xe4>)
  4007d2:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  4007d4:	4b0f      	ldr	r3, [pc, #60]	; (400814 <system_init+0xe8>)
  4007d6:	4798      	blx	r3

	PWM_0_init();
  4007d8:	4b0f      	ldr	r3, [pc, #60]	; (400818 <system_init+0xec>)
  4007da:	4798      	blx	r3

	PWM_1_init();
  4007dc:	4b0f      	ldr	r3, [pc, #60]	; (40081c <system_init+0xf0>)
  4007de:	4798      	blx	r3
	ENCODER_A_init();
  4007e0:	4b0f      	ldr	r3, [pc, #60]	; (400820 <system_init+0xf4>)
  4007e2:	4798      	blx	r3
	ENCODER_B_init();
  4007e4:	4b0f      	ldr	r3, [pc, #60]	; (400824 <system_init+0xf8>)
  4007e6:	4798      	blx	r3

	delay_driver_init();
  4007e8:	4b0f      	ldr	r3, [pc, #60]	; (400828 <system_init+0xfc>)
  4007ea:	4798      	blx	r3

	EDBG_COM_init();
  4007ec:	4b0f      	ldr	r3, [pc, #60]	; (40082c <system_init+0x100>)
  4007ee:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  4007f0:	4b0f      	ldr	r3, [pc, #60]	; (400830 <system_init+0x104>)
  4007f2:	4798      	blx	r3
  4007f4:	bd08      	pop	{r3, pc}
  4007f6:	bf00      	nop
  4007f8:	00400e8d 	.word	0x00400e8d
  4007fc:	400e0600 	.word	0x400e0600
  400800:	400e1850 	.word	0x400e1850
  400804:	400e0e00 	.word	0x400e0e00
  400808:	0040037d 	.word	0x0040037d
  40080c:	004003e9 	.word	0x004003e9
  400810:	00400415 	.word	0x00400415
  400814:	0040042d 	.word	0x0040042d
  400818:	004004d5 	.word	0x004004d5
  40081c:	0040055d 	.word	0x0040055d
  400820:	004005b1 	.word	0x004005b1
  400824:	00400625 	.word	0x00400625
  400828:	00400681 	.word	0x00400681
  40082c:	004006f9 	.word	0x004006f9
  400830:	00400905 	.word	0x00400905

00400834 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
  400834:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400836:	4604      	mov	r4, r0
  400838:	460d      	mov	r5, r1
  40083a:	2800      	cmp	r0, #0
  40083c:	bf18      	it	ne
  40083e:	2900      	cmpne	r1, #0
  400840:	bf14      	ite	ne
  400842:	2001      	movne	r0, #1
  400844:	2000      	moveq	r0, #0
  400846:	2239      	movs	r2, #57	; 0x39
  400848:	4903      	ldr	r1, [pc, #12]	; (400858 <adc_sync_init+0x24>)
  40084a:	4b04      	ldr	r3, [pc, #16]	; (40085c <adc_sync_init+0x28>)
  40084c:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
  40084e:	4629      	mov	r1, r5
  400850:	4620      	mov	r0, r4
  400852:	4b03      	ldr	r3, [pc, #12]	; (400860 <adc_sync_init+0x2c>)
  400854:	4798      	blx	r3
}
  400856:	bd38      	pop	{r3, r4, r5, pc}
  400858:	00404424 	.word	0x00404424
  40085c:	00400cd1 	.word	0x00400cd1
  400860:	00400e49 	.word	0x00400e49

00400864 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
  400864:	b538      	push	{r3, r4, r5, lr}
  400866:	460d      	mov	r5, r1
	ASSERT(descr);
  400868:	4604      	mov	r4, r0
  40086a:	224e      	movs	r2, #78	; 0x4e
  40086c:	4905      	ldr	r1, [pc, #20]	; (400884 <adc_sync_enable_channel+0x20>)
  40086e:	3000      	adds	r0, #0
  400870:	bf18      	it	ne
  400872:	2001      	movne	r0, #1
  400874:	4b04      	ldr	r3, [pc, #16]	; (400888 <adc_sync_enable_channel+0x24>)
  400876:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
  400878:	4629      	mov	r1, r5
  40087a:	4620      	mov	r0, r4
  40087c:	4b03      	ldr	r3, [pc, #12]	; (40088c <adc_sync_enable_channel+0x28>)
  40087e:	4798      	blx	r3

	return ERR_NONE;
}
  400880:	2000      	movs	r0, #0
  400882:	bd38      	pop	{r3, r4, r5, pc}
  400884:	00404424 	.word	0x00404424
  400888:	00400cd1 	.word	0x00400cd1
  40088c:	00400e81 	.word	0x00400e81

00400890 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400890:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400894:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400896:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400898:	f3bf 8f5f 	dmb	sy
  40089c:	4770      	bx	lr

0040089e <atomic_leave_critical>:
  40089e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4008a2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4008a4:	f383 8810 	msr	PRIMASK, r3
  4008a8:	4770      	bx	lr
	...

004008ac <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4008ac:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4008ae:	4b02      	ldr	r3, [pc, #8]	; (4008b8 <delay_init+0xc>)
  4008b0:	6018      	str	r0, [r3, #0]
  4008b2:	4b02      	ldr	r3, [pc, #8]	; (4008bc <delay_init+0x10>)
  4008b4:	4798      	blx	r3
  4008b6:	bd08      	pop	{r3, pc}
  4008b8:	20400238 	.word	0x20400238
  4008bc:	004014d5 	.word	0x004014d5

004008c0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  4008c0:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  4008c2:	2504      	movs	r5, #4
  4008c4:	2400      	movs	r4, #0

	while (upper >= lower) {
  4008c6:	e007      	b.n	4008d8 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  4008c8:	4a0d      	ldr	r2, [pc, #52]	; (400900 <process_ext_irq+0x40>)
  4008ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4008ce:	b1b3      	cbz	r3, 4008fe <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  4008d0:	4798      	blx	r3
  4008d2:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  4008d4:	3a01      	subs	r2, #1
  4008d6:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  4008d8:	42ac      	cmp	r4, r5
  4008da:	d810      	bhi.n	4008fe <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  4008dc:	192b      	adds	r3, r5, r4
  4008de:	105b      	asrs	r3, r3, #1
  4008e0:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  4008e2:	2a03      	cmp	r2, #3
  4008e4:	d80b      	bhi.n	4008fe <process_ext_irq+0x3e>
  4008e6:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  4008e8:	4905      	ldr	r1, [pc, #20]	; (400900 <process_ext_irq+0x40>)
  4008ea:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  4008ee:	6849      	ldr	r1, [r1, #4]
  4008f0:	4281      	cmp	r1, r0
  4008f2:	d0e9      	beq.n	4008c8 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  4008f4:	4281      	cmp	r1, r0
  4008f6:	d2ed      	bcs.n	4008d4 <process_ext_irq+0x14>
			lower = middle + 1;
  4008f8:	3201      	adds	r2, #1
  4008fa:	b2d4      	uxtb	r4, r2
  4008fc:	e7ec      	b.n	4008d8 <process_ext_irq+0x18>
  4008fe:	bd38      	pop	{r3, r4, r5, pc}
  400900:	2040023c 	.word	0x2040023c

00400904 <ext_irq_init>:
{
  400904:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400906:	2300      	movs	r3, #0
  400908:	e00a      	b.n	400920 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  40090a:	4a08      	ldr	r2, [pc, #32]	; (40092c <ext_irq_init+0x28>)
  40090c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  400910:	f04f 30ff 	mov.w	r0, #4294967295
  400914:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  400916:	2100      	movs	r1, #0
  400918:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40091c:	3301      	adds	r3, #1
  40091e:	b29b      	uxth	r3, r3
  400920:	2b03      	cmp	r3, #3
  400922:	d9f2      	bls.n	40090a <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  400924:	4802      	ldr	r0, [pc, #8]	; (400930 <ext_irq_init+0x2c>)
  400926:	4b03      	ldr	r3, [pc, #12]	; (400934 <ext_irq_init+0x30>)
  400928:	4798      	blx	r3
}
  40092a:	bd08      	pop	{r3, pc}
  40092c:	2040023c 	.word	0x2040023c
  400930:	004008c1 	.word	0x004008c1
  400934:	0040119d 	.word	0x0040119d

00400938 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400938:	b570      	push	{r4, r5, r6, lr}
  40093a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  40093c:	4604      	mov	r4, r0
  40093e:	460d      	mov	r5, r1
  400940:	2800      	cmp	r0, #0
  400942:	bf18      	it	ne
  400944:	2900      	cmpne	r1, #0
  400946:	bf14      	ite	ne
  400948:	2001      	movne	r0, #1
  40094a:	2000      	moveq	r0, #0
  40094c:	2234      	movs	r2, #52	; 0x34
  40094e:	4904      	ldr	r1, [pc, #16]	; (400960 <io_write+0x28>)
  400950:	4b04      	ldr	r3, [pc, #16]	; (400964 <io_write+0x2c>)
  400952:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400954:	6823      	ldr	r3, [r4, #0]
  400956:	4632      	mov	r2, r6
  400958:	4629      	mov	r1, r5
  40095a:	4620      	mov	r0, r4
  40095c:	4798      	blx	r3
}
  40095e:	bd70      	pop	{r4, r5, r6, pc}
  400960:	00404440 	.word	0x00404440
  400964:	00400cd1 	.word	0x00400cd1

00400968 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400968:	b570      	push	{r4, r5, r6, lr}
  40096a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  40096c:	4604      	mov	r4, r0
  40096e:	460d      	mov	r5, r1
  400970:	2800      	cmp	r0, #0
  400972:	bf18      	it	ne
  400974:	2900      	cmpne	r1, #0
  400976:	bf14      	ite	ne
  400978:	2001      	movne	r0, #1
  40097a:	2000      	moveq	r0, #0
  40097c:	223d      	movs	r2, #61	; 0x3d
  40097e:	4904      	ldr	r1, [pc, #16]	; (400990 <io_read+0x28>)
  400980:	4b04      	ldr	r3, [pc, #16]	; (400994 <io_read+0x2c>)
  400982:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400984:	6863      	ldr	r3, [r4, #4]
  400986:	4632      	mov	r2, r6
  400988:	4629      	mov	r1, r5
  40098a:	4620      	mov	r0, r4
  40098c:	4798      	blx	r3
}
  40098e:	bd70      	pop	{r4, r5, r6, pc}
  400990:	00404440 	.word	0x00404440
  400994:	00400cd1 	.word	0x00400cd1

00400998 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400998:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  40099a:	6943      	ldr	r3, [r0, #20]
  40099c:	b103      	cbz	r3, 4009a0 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  40099e:	4798      	blx	r3
  4009a0:	bd08      	pop	{r3, pc}

004009a2 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  4009a2:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  4009a4:	6983      	ldr	r3, [r0, #24]
  4009a6:	b103      	cbz	r3, 4009aa <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  4009a8:	4798      	blx	r3
  4009aa:	bd08      	pop	{r3, pc}

004009ac <pwm_init>:
{
  4009ac:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4009ae:	4604      	mov	r4, r0
  4009b0:	460d      	mov	r5, r1
  4009b2:	2800      	cmp	r0, #0
  4009b4:	bf18      	it	ne
  4009b6:	2900      	cmpne	r1, #0
  4009b8:	bf14      	ite	ne
  4009ba:	2001      	movne	r0, #1
  4009bc:	2000      	moveq	r0, #0
  4009be:	2233      	movs	r2, #51	; 0x33
  4009c0:	4906      	ldr	r1, [pc, #24]	; (4009dc <pwm_init+0x30>)
  4009c2:	4b07      	ldr	r3, [pc, #28]	; (4009e0 <pwm_init+0x34>)
  4009c4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  4009c6:	4629      	mov	r1, r5
  4009c8:	4620      	mov	r0, r4
  4009ca:	4b06      	ldr	r3, [pc, #24]	; (4009e4 <pwm_init+0x38>)
  4009cc:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  4009ce:	4b06      	ldr	r3, [pc, #24]	; (4009e8 <pwm_init+0x3c>)
  4009d0:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  4009d2:	4b06      	ldr	r3, [pc, #24]	; (4009ec <pwm_init+0x40>)
  4009d4:	6063      	str	r3, [r4, #4]
}
  4009d6:	2000      	movs	r0, #0
  4009d8:	bd38      	pop	{r3, r4, r5, pc}
  4009da:	bf00      	nop
  4009dc:	00404454 	.word	0x00404454
  4009e0:	00400cd1 	.word	0x00400cd1
  4009e4:	004012a5 	.word	0x004012a5
  4009e8:	00400999 	.word	0x00400999
  4009ec:	004009a3 	.word	0x004009a3

004009f0 <pwm_enable>:
{
  4009f0:	b510      	push	{r4, lr}
	ASSERT(descr);
  4009f2:	4604      	mov	r4, r0
  4009f4:	224a      	movs	r2, #74	; 0x4a
  4009f6:	4909      	ldr	r1, [pc, #36]	; (400a1c <pwm_enable+0x2c>)
  4009f8:	3000      	adds	r0, #0
  4009fa:	bf18      	it	ne
  4009fc:	2001      	movne	r0, #1
  4009fe:	4b08      	ldr	r3, [pc, #32]	; (400a20 <pwm_enable+0x30>)
  400a00:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  400a02:	4620      	mov	r0, r4
  400a04:	4b07      	ldr	r3, [pc, #28]	; (400a24 <pwm_enable+0x34>)
  400a06:	4798      	blx	r3
  400a08:	b920      	cbnz	r0, 400a14 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  400a0a:	4620      	mov	r0, r4
  400a0c:	4b06      	ldr	r3, [pc, #24]	; (400a28 <pwm_enable+0x38>)
  400a0e:	4798      	blx	r3
	return ERR_NONE;
  400a10:	2000      	movs	r0, #0
  400a12:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400a14:	f06f 0010 	mvn.w	r0, #16
}
  400a18:	bd10      	pop	{r4, pc}
  400a1a:	bf00      	nop
  400a1c:	00404454 	.word	0x00404454
  400a20:	00400cd1 	.word	0x00400cd1
  400a24:	0040148d 	.word	0x0040148d
  400a28:	004013e9 	.word	0x004013e9

00400a2c <pwm_set_parameters>:
{
  400a2c:	b570      	push	{r4, r5, r6, lr}
  400a2e:	460d      	mov	r5, r1
  400a30:	4616      	mov	r6, r2
	ASSERT(descr);
  400a32:	4604      	mov	r4, r0
  400a34:	227c      	movs	r2, #124	; 0x7c
  400a36:	4906      	ldr	r1, [pc, #24]	; (400a50 <pwm_set_parameters+0x24>)
  400a38:	3000      	adds	r0, #0
  400a3a:	bf18      	it	ne
  400a3c:	2001      	movne	r0, #1
  400a3e:	4b05      	ldr	r3, [pc, #20]	; (400a54 <pwm_set_parameters+0x28>)
  400a40:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  400a42:	4632      	mov	r2, r6
  400a44:	4629      	mov	r1, r5
  400a46:	4620      	mov	r0, r4
  400a48:	4b03      	ldr	r3, [pc, #12]	; (400a58 <pwm_set_parameters+0x2c>)
  400a4a:	4798      	blx	r3
}
  400a4c:	2000      	movs	r0, #0
  400a4e:	bd70      	pop	{r4, r5, r6, pc}
  400a50:	00404454 	.word	0x00404454
  400a54:	00400cd1 	.word	0x00400cd1
  400a58:	0040142d 	.word	0x0040142d

00400a5c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  400a5e:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400a60:	b117      	cbz	r7, 400a68 <timer_add_timer_task+0xc>
  400a62:	463c      	mov	r4, r7
  400a64:	2600      	movs	r6, #0
  400a66:	e00b      	b.n	400a80 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400a68:	4b0e      	ldr	r3, [pc, #56]	; (400aa4 <timer_add_timer_task+0x48>)
  400a6a:	4798      	blx	r3
		return;
  400a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  400a6e:	68a5      	ldr	r5, [r4, #8]
  400a70:	442b      	add	r3, r5
  400a72:	1a9b      	subs	r3, r3, r2
  400a74:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400a76:	688d      	ldr	r5, [r1, #8]
  400a78:	42ab      	cmp	r3, r5
  400a7a:	d209      	bcs.n	400a90 <timer_add_timer_task+0x34>
			break;
		prev = it;
  400a7c:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  400a7e:	6824      	ldr	r4, [r4, #0]
  400a80:	b134      	cbz	r4, 400a90 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  400a82:	6863      	ldr	r3, [r4, #4]
  400a84:	4293      	cmp	r3, r2
  400a86:	d8f2      	bhi.n	400a6e <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400a88:	68a5      	ldr	r5, [r4, #8]
  400a8a:	1a9b      	subs	r3, r3, r2
  400a8c:	442b      	add	r3, r5
  400a8e:	e7f2      	b.n	400a76 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  400a90:	42bc      	cmp	r4, r7
  400a92:	d003      	beq.n	400a9c <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400a94:	4630      	mov	r0, r6
  400a96:	4b04      	ldr	r3, [pc, #16]	; (400aa8 <timer_add_timer_task+0x4c>)
  400a98:	4798      	blx	r3
  400a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400a9c:	4b01      	ldr	r3, [pc, #4]	; (400aa4 <timer_add_timer_task+0x48>)
  400a9e:	4798      	blx	r3
  400aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400aa2:	bf00      	nop
  400aa4:	00400ced 	.word	0x00400ced
  400aa8:	00400d19 	.word	0x00400d19

00400aac <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400aae:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  400ab0:	6906      	ldr	r6, [r0, #16]
  400ab2:	3601      	adds	r6, #1
  400ab4:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400ab6:	7e03      	ldrb	r3, [r0, #24]
  400ab8:	f013 0f01 	tst.w	r3, #1
  400abc:	d105      	bne.n	400aca <timer_process_counted+0x1e>
  400abe:	7e03      	ldrb	r3, [r0, #24]
  400ac0:	f013 0f02 	tst.w	r3, #2
  400ac4:	d101      	bne.n	400aca <timer_process_counted+0x1e>
  400ac6:	4605      	mov	r5, r0
  400ac8:	e009      	b.n	400ade <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  400aca:	7e03      	ldrb	r3, [r0, #24]
  400acc:	f043 0302 	orr.w	r3, r3, #2
  400ad0:	7603      	strb	r3, [r0, #24]
		return;
  400ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ad4:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  400ad6:	68e3      	ldr	r3, [r4, #12]
  400ad8:	4620      	mov	r0, r4
  400ada:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  400adc:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  400ade:	b19c      	cbz	r4, 400b08 <timer_process_counted+0x5c>
  400ae0:	6863      	ldr	r3, [r4, #4]
  400ae2:	1af3      	subs	r3, r6, r3
  400ae4:	68a2      	ldr	r2, [r4, #8]
  400ae6:	4293      	cmp	r3, r2
  400ae8:	d30e      	bcc.n	400b08 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  400aea:	f105 0714 	add.w	r7, r5, #20
  400aee:	4638      	mov	r0, r7
  400af0:	4b06      	ldr	r3, [pc, #24]	; (400b0c <timer_process_counted+0x60>)
  400af2:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400af4:	7c23      	ldrb	r3, [r4, #16]
  400af6:	2b01      	cmp	r3, #1
  400af8:	d1ec      	bne.n	400ad4 <timer_process_counted+0x28>
			tmp->time_label = time;
  400afa:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400afc:	4632      	mov	r2, r6
  400afe:	4621      	mov	r1, r4
  400b00:	4638      	mov	r0, r7
  400b02:	4b03      	ldr	r3, [pc, #12]	; (400b10 <timer_process_counted+0x64>)
  400b04:	4798      	blx	r3
  400b06:	e7e5      	b.n	400ad4 <timer_process_counted+0x28>
  400b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b0a:	bf00      	nop
  400b0c:	00400d21 	.word	0x00400d21
  400b10:	00400a5d 	.word	0x00400a5d

00400b14 <timer_init>:
{
  400b14:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400b16:	4604      	mov	r4, r0
  400b18:	460d      	mov	r5, r1
  400b1a:	2800      	cmp	r0, #0
  400b1c:	bf18      	it	ne
  400b1e:	2900      	cmpne	r1, #0
  400b20:	bf14      	ite	ne
  400b22:	2001      	movne	r0, #1
  400b24:	2000      	moveq	r0, #0
  400b26:	223b      	movs	r2, #59	; 0x3b
  400b28:	4905      	ldr	r1, [pc, #20]	; (400b40 <timer_init+0x2c>)
  400b2a:	4b06      	ldr	r3, [pc, #24]	; (400b44 <timer_init+0x30>)
  400b2c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  400b2e:	4629      	mov	r1, r5
  400b30:	4620      	mov	r0, r4
  400b32:	4b05      	ldr	r3, [pc, #20]	; (400b48 <timer_init+0x34>)
  400b34:	4798      	blx	r3
	descr->time                           = 0;
  400b36:	2000      	movs	r0, #0
  400b38:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400b3a:	4b04      	ldr	r3, [pc, #16]	; (400b4c <timer_init+0x38>)
  400b3c:	6023      	str	r3, [r4, #0]
}
  400b3e:	bd38      	pop	{r3, r4, r5, pc}
  400b40:	0040446c 	.word	0x0040446c
  400b44:	00400cd1 	.word	0x00400cd1
  400b48:	00401559 	.word	0x00401559
  400b4c:	00400aad 	.word	0x00400aad

00400b50 <timer_start>:
{
  400b50:	b510      	push	{r4, lr}
	ASSERT(descr);
  400b52:	4604      	mov	r4, r0
  400b54:	2253      	movs	r2, #83	; 0x53
  400b56:	4909      	ldr	r1, [pc, #36]	; (400b7c <timer_start+0x2c>)
  400b58:	3000      	adds	r0, #0
  400b5a:	bf18      	it	ne
  400b5c:	2001      	movne	r0, #1
  400b5e:	4b08      	ldr	r3, [pc, #32]	; (400b80 <timer_start+0x30>)
  400b60:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  400b62:	4620      	mov	r0, r4
  400b64:	4b07      	ldr	r3, [pc, #28]	; (400b84 <timer_start+0x34>)
  400b66:	4798      	blx	r3
  400b68:	b920      	cbnz	r0, 400b74 <timer_start+0x24>
	_timer_start(&descr->device);
  400b6a:	4620      	mov	r0, r4
  400b6c:	4b06      	ldr	r3, [pc, #24]	; (400b88 <timer_start+0x38>)
  400b6e:	4798      	blx	r3
	return ERR_NONE;
  400b70:	2000      	movs	r0, #0
  400b72:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400b74:	f06f 0010 	mvn.w	r0, #16
}
  400b78:	bd10      	pop	{r4, pc}
  400b7a:	bf00      	nop
  400b7c:	0040446c 	.word	0x0040446c
  400b80:	00400cd1 	.word	0x00400cd1
  400b84:	00401641 	.word	0x00401641
  400b88:	00401635 	.word	0x00401635

00400b8c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b8e:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400b90:	4605      	mov	r5, r0
  400b92:	460f      	mov	r7, r1
  400b94:	2800      	cmp	r0, #0
  400b96:	bf18      	it	ne
  400b98:	2900      	cmpne	r1, #0
  400b9a:	d002      	beq.n	400ba2 <usart_sync_write+0x16>
  400b9c:	bb0a      	cbnz	r2, 400be2 <usart_sync_write+0x56>
  400b9e:	2000      	movs	r0, #0
  400ba0:	e000      	b.n	400ba4 <usart_sync_write+0x18>
  400ba2:	2000      	movs	r0, #0
  400ba4:	22f1      	movs	r2, #241	; 0xf1
  400ba6:	4910      	ldr	r1, [pc, #64]	; (400be8 <usart_sync_write+0x5c>)
  400ba8:	4b10      	ldr	r3, [pc, #64]	; (400bec <usart_sync_write+0x60>)
  400baa:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400bac:	f105 0408 	add.w	r4, r5, #8
  400bb0:	4620      	mov	r0, r4
  400bb2:	4b0f      	ldr	r3, [pc, #60]	; (400bf0 <usart_sync_write+0x64>)
  400bb4:	4798      	blx	r3
  400bb6:	2800      	cmp	r0, #0
  400bb8:	d0f8      	beq.n	400bac <usart_sync_write+0x20>
  400bba:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400bbc:	5d79      	ldrb	r1, [r7, r5]
  400bbe:	4620      	mov	r0, r4
  400bc0:	4b0c      	ldr	r3, [pc, #48]	; (400bf4 <usart_sync_write+0x68>)
  400bc2:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400bc4:	4620      	mov	r0, r4
  400bc6:	4b0a      	ldr	r3, [pc, #40]	; (400bf0 <usart_sync_write+0x64>)
  400bc8:	4798      	blx	r3
  400bca:	2800      	cmp	r0, #0
  400bcc:	d0fa      	beq.n	400bc4 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  400bce:	3501      	adds	r5, #1
  400bd0:	42b5      	cmp	r5, r6
  400bd2:	d3f3      	bcc.n	400bbc <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400bd4:	4620      	mov	r0, r4
  400bd6:	4b08      	ldr	r3, [pc, #32]	; (400bf8 <usart_sync_write+0x6c>)
  400bd8:	4798      	blx	r3
  400bda:	2800      	cmp	r0, #0
  400bdc:	d0fa      	beq.n	400bd4 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  400bde:	4628      	mov	r0, r5
  400be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400be2:	2001      	movs	r0, #1
  400be4:	e7de      	b.n	400ba4 <usart_sync_write+0x18>
  400be6:	bf00      	nop
  400be8:	00404484 	.word	0x00404484
  400bec:	00400cd1 	.word	0x00400cd1
  400bf0:	0040181d 	.word	0x0040181d
  400bf4:	004017d5 	.word	0x004017d5
  400bf8:	00401845 	.word	0x00401845

00400bfc <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c00:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400c02:	4605      	mov	r5, r0
  400c04:	4688      	mov	r8, r1
  400c06:	2800      	cmp	r0, #0
  400c08:	bf18      	it	ne
  400c0a:	2900      	cmpne	r1, #0
  400c0c:	d002      	beq.n	400c14 <usart_sync_read+0x18>
  400c0e:	b9d2      	cbnz	r2, 400c46 <usart_sync_read+0x4a>
  400c10:	2000      	movs	r0, #0
  400c12:	e000      	b.n	400c16 <usart_sync_read+0x1a>
  400c14:	2000      	movs	r0, #0
  400c16:	f44f 7286 	mov.w	r2, #268	; 0x10c
  400c1a:	490c      	ldr	r1, [pc, #48]	; (400c4c <usart_sync_read+0x50>)
  400c1c:	4b0c      	ldr	r3, [pc, #48]	; (400c50 <usart_sync_read+0x54>)
  400c1e:	4798      	blx	r3
	uint32_t                      offset = 0;
  400c20:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400c22:	f105 0408 	add.w	r4, r5, #8
  400c26:	4620      	mov	r0, r4
  400c28:	4b0a      	ldr	r3, [pc, #40]	; (400c54 <usart_sync_read+0x58>)
  400c2a:	4798      	blx	r3
  400c2c:	2800      	cmp	r0, #0
  400c2e:	d0f8      	beq.n	400c22 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400c30:	4620      	mov	r0, r4
  400c32:	4b09      	ldr	r3, [pc, #36]	; (400c58 <usart_sync_read+0x5c>)
  400c34:	4798      	blx	r3
  400c36:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400c3a:	3601      	adds	r6, #1
  400c3c:	42be      	cmp	r6, r7
  400c3e:	d3f0      	bcc.n	400c22 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400c40:	4630      	mov	r0, r6
  400c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400c46:	2001      	movs	r0, #1
  400c48:	e7e5      	b.n	400c16 <usart_sync_read+0x1a>
  400c4a:	bf00      	nop
  400c4c:	00404484 	.word	0x00404484
  400c50:	00400cd1 	.word	0x00400cd1
  400c54:	0040186d 	.word	0x0040186d
  400c58:	004017f9 	.word	0x004017f9

00400c5c <usart_sync_init>:
{
  400c5c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400c5e:	4604      	mov	r4, r0
  400c60:	460d      	mov	r5, r1
  400c62:	2800      	cmp	r0, #0
  400c64:	bf18      	it	ne
  400c66:	2900      	cmpne	r1, #0
  400c68:	bf14      	ite	ne
  400c6a:	2001      	movne	r0, #1
  400c6c:	2000      	moveq	r0, #0
  400c6e:	2234      	movs	r2, #52	; 0x34
  400c70:	4907      	ldr	r1, [pc, #28]	; (400c90 <usart_sync_init+0x34>)
  400c72:	4b08      	ldr	r3, [pc, #32]	; (400c94 <usart_sync_init+0x38>)
  400c74:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400c76:	4629      	mov	r1, r5
  400c78:	f104 0008 	add.w	r0, r4, #8
  400c7c:	4b06      	ldr	r3, [pc, #24]	; (400c98 <usart_sync_init+0x3c>)
  400c7e:	4798      	blx	r3
	if (init_status) {
  400c80:	4603      	mov	r3, r0
  400c82:	b918      	cbnz	r0, 400c8c <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400c84:	4a05      	ldr	r2, [pc, #20]	; (400c9c <usart_sync_init+0x40>)
  400c86:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400c88:	4a05      	ldr	r2, [pc, #20]	; (400ca0 <usart_sync_init+0x44>)
  400c8a:	6022      	str	r2, [r4, #0]
}
  400c8c:	4618      	mov	r0, r3
  400c8e:	bd38      	pop	{r3, r4, r5, pc}
  400c90:	00404484 	.word	0x00404484
  400c94:	00400cd1 	.word	0x00400cd1
  400c98:	00401769 	.word	0x00401769
  400c9c:	00400bfd 	.word	0x00400bfd
  400ca0:	00400b8d 	.word	0x00400b8d

00400ca4 <usart_sync_enable>:
{
  400ca4:	b510      	push	{r4, lr}
	ASSERT(descr);
  400ca6:	4604      	mov	r4, r0
  400ca8:	2253      	movs	r2, #83	; 0x53
  400caa:	4906      	ldr	r1, [pc, #24]	; (400cc4 <usart_sync_enable+0x20>)
  400cac:	3000      	adds	r0, #0
  400cae:	bf18      	it	ne
  400cb0:	2001      	movne	r0, #1
  400cb2:	4b05      	ldr	r3, [pc, #20]	; (400cc8 <usart_sync_enable+0x24>)
  400cb4:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400cb6:	f104 0008 	add.w	r0, r4, #8
  400cba:	4b04      	ldr	r3, [pc, #16]	; (400ccc <usart_sync_enable+0x28>)
  400cbc:	4798      	blx	r3
}
  400cbe:	2000      	movs	r0, #0
  400cc0:	bd10      	pop	{r4, pc}
  400cc2:	bf00      	nop
  400cc4:	00404484 	.word	0x00404484
  400cc8:	00400cd1 	.word	0x00400cd1
  400ccc:	004017a1 	.word	0x004017a1

00400cd0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400cd0:	b900      	cbnz	r0, 400cd4 <assert+0x4>
		__asm("BKPT #0");
  400cd2:	be00      	bkpt	0x0000
  400cd4:	4770      	bx	lr

00400cd6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  400cd6:	6803      	ldr	r3, [r0, #0]
  400cd8:	b11b      	cbz	r3, 400ce2 <is_list_element+0xc>
		if (it == element) {
  400cda:	428b      	cmp	r3, r1
  400cdc:	d003      	beq.n	400ce6 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  400cde:	681b      	ldr	r3, [r3, #0]
  400ce0:	e7fa      	b.n	400cd8 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  400ce2:	2000      	movs	r0, #0
  400ce4:	4770      	bx	lr
			return true;
  400ce6:	2001      	movs	r0, #1
}
  400ce8:	4770      	bx	lr
	...

00400cec <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400cec:	b538      	push	{r3, r4, r5, lr}
  400cee:	4604      	mov	r4, r0
  400cf0:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  400cf2:	4b06      	ldr	r3, [pc, #24]	; (400d0c <list_insert_as_head+0x20>)
  400cf4:	4798      	blx	r3
  400cf6:	f080 0001 	eor.w	r0, r0, #1
  400cfa:	2239      	movs	r2, #57	; 0x39
  400cfc:	4904      	ldr	r1, [pc, #16]	; (400d10 <list_insert_as_head+0x24>)
  400cfe:	b2c0      	uxtb	r0, r0
  400d00:	4b04      	ldr	r3, [pc, #16]	; (400d14 <list_insert_as_head+0x28>)
  400d02:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  400d04:	6823      	ldr	r3, [r4, #0]
  400d06:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  400d08:	6025      	str	r5, [r4, #0]
  400d0a:	bd38      	pop	{r3, r4, r5, pc}
  400d0c:	00400cd7 	.word	0x00400cd7
  400d10:	004044a0 	.word	0x004044a0
  400d14:	00400cd1 	.word	0x00400cd1

00400d18 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  400d18:	6803      	ldr	r3, [r0, #0]
  400d1a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400d1c:	6001      	str	r1, [r0, #0]
  400d1e:	4770      	bx	lr

00400d20 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  400d20:	6803      	ldr	r3, [r0, #0]
  400d22:	b11b      	cbz	r3, 400d2c <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400d24:	681a      	ldr	r2, [r3, #0]
  400d26:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400d28:	4618      	mov	r0, r3
  400d2a:	4770      	bx	lr
	}

	return NULL;
  400d2c:	2000      	movs	r0, #0
}
  400d2e:	4770      	bx	lr

00400d30 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  400d30:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  400d32:	4a06      	ldr	r2, [pc, #24]	; (400d4c <_sbrk+0x1c>)
  400d34:	6812      	ldr	r2, [r2, #0]
  400d36:	b122      	cbz	r2, 400d42 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400d38:	4a04      	ldr	r2, [pc, #16]	; (400d4c <_sbrk+0x1c>)
  400d3a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  400d3c:	4403      	add	r3, r0
  400d3e:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  400d40:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400d42:	4903      	ldr	r1, [pc, #12]	; (400d50 <_sbrk+0x20>)
  400d44:	4a01      	ldr	r2, [pc, #4]	; (400d4c <_sbrk+0x1c>)
  400d46:	6011      	str	r1, [r2, #0]
  400d48:	e7f6      	b.n	400d38 <_sbrk+0x8>
  400d4a:	bf00      	nop
  400d4c:	2040025c 	.word	0x2040025c
  400d50:	20400970 	.word	0x20400970

00400d54 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  400d54:	f04f 30ff 	mov.w	r0, #4294967295
  400d58:	4770      	bx	lr

00400d5a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  400d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400d5e:	604b      	str	r3, [r1, #4]

	return 0;
}
  400d60:	2000      	movs	r0, #0
  400d62:	4770      	bx	lr

00400d64 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  400d64:	2000      	movs	r0, #0
  400d66:	4770      	bx	lr

00400d68 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  400d68:	2364      	movs	r3, #100	; 0x64
  400d6a:	4a1d      	ldr	r2, [pc, #116]	; (400de0 <_afec_init+0x78>)
  400d6c:	fb03 2301 	mla	r3, r3, r1, r2
  400d70:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  400d72:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  400d74:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  400d76:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  400d78:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  400d7a:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  400d7c:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  400d7e:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  400d80:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  400d82:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  400d84:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  400d86:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  400d88:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  400d8a:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  400d8c:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  400d8e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  400d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  400d94:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  400d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  400d9a:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  400d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  400da0:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  400da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  400da6:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400daa:	2200      	movs	r2, #0
  400dac:	2a0b      	cmp	r2, #11
  400dae:	d814      	bhi.n	400dda <_afec_init+0x72>
{
  400db0:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  400db2:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  400db4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  400db8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400dbc:	4413      	add	r3, r2
  400dbe:	330c      	adds	r3, #12
  400dc0:	4c07      	ldr	r4, [pc, #28]	; (400de0 <_afec_init+0x78>)
  400dc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  400dc6:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  400dc8:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  400dca:	3201      	adds	r2, #1
  400dcc:	b2d2      	uxtb	r2, r2
  400dce:	2a0b      	cmp	r2, #11
  400dd0:	d9ef      	bls.n	400db2 <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  400dd2:	2000      	movs	r0, #0
  400dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400dd8:	4770      	bx	lr
  400dda:	2000      	movs	r0, #0
  400ddc:	4770      	bx	lr
  400dde:	bf00      	nop
  400de0:	004044c0 	.word	0x004044c0

00400de4 <_afec_get_hardware_index>:
{
  400de4:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  400de6:	4b09      	ldr	r3, [pc, #36]	; (400e0c <_afec_get_hardware_index+0x28>)
  400de8:	4298      	cmp	r0, r3
  400dea:	d00a      	beq.n	400e02 <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  400dec:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400df0:	4298      	cmp	r0, r3
  400df2:	d008      	beq.n	400e06 <_afec_get_hardware_index+0x22>
	ASSERT(false);
  400df4:	22a3      	movs	r2, #163	; 0xa3
  400df6:	4906      	ldr	r1, [pc, #24]	; (400e10 <_afec_get_hardware_index+0x2c>)
  400df8:	2000      	movs	r0, #0
  400dfa:	4b06      	ldr	r3, [pc, #24]	; (400e14 <_afec_get_hardware_index+0x30>)
  400dfc:	4798      	blx	r3
	return 0;
  400dfe:	2000      	movs	r0, #0
  400e00:	bd08      	pop	{r3, pc}
		return 0;
  400e02:	2000      	movs	r0, #0
  400e04:	bd08      	pop	{r3, pc}
		return 1;
  400e06:	2001      	movs	r0, #1
}
  400e08:	bd08      	pop	{r3, pc}
  400e0a:	bf00      	nop
  400e0c:	4003c000 	.word	0x4003c000
  400e10:	00404588 	.word	0x00404588
  400e14:	00400cd1 	.word	0x00400cd1

00400e18 <_afec_get_regs>:
{
  400e18:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  400e1a:	4b09      	ldr	r3, [pc, #36]	; (400e40 <_afec_get_regs+0x28>)
  400e1c:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400e1e:	2300      	movs	r3, #0
  400e20:	2b01      	cmp	r3, #1
  400e22:	d809      	bhi.n	400e38 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  400e24:	2264      	movs	r2, #100	; 0x64
  400e26:	fb02 f203 	mul.w	r2, r2, r3
  400e2a:	4906      	ldr	r1, [pc, #24]	; (400e44 <_afec_get_regs+0x2c>)
  400e2c:	5c8a      	ldrb	r2, [r1, r2]
  400e2e:	4290      	cmp	r0, r2
  400e30:	d003      	beq.n	400e3a <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  400e32:	3301      	adds	r3, #1
  400e34:	b2db      	uxtb	r3, r3
  400e36:	e7f3      	b.n	400e20 <_afec_get_regs+0x8>
	return 0;
  400e38:	2300      	movs	r3, #0
}
  400e3a:	4618      	mov	r0, r3
  400e3c:	bd08      	pop	{r3, pc}
  400e3e:	bf00      	nop
  400e40:	00400de5 	.word	0x00400de5
  400e44:	004044c0 	.word	0x004044c0

00400e48 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
  400e48:	b538      	push	{r3, r4, r5, lr}
  400e4a:	460c      	mov	r4, r1
	ASSERT(device);
  400e4c:	4605      	mov	r5, r0
  400e4e:	f44f 728d 	mov.w	r2, #282	; 0x11a
  400e52:	4907      	ldr	r1, [pc, #28]	; (400e70 <_adc_sync_init+0x28>)
  400e54:	3000      	adds	r0, #0
  400e56:	bf18      	it	ne
  400e58:	2001      	movne	r0, #1
  400e5a:	4b06      	ldr	r3, [pc, #24]	; (400e74 <_adc_sync_init+0x2c>)
  400e5c:	4798      	blx	r3

	device->hw = hw;
  400e5e:	602c      	str	r4, [r5, #0]

	return _afec_init(hw, _afec_get_regs((uint32_t)hw));
  400e60:	4620      	mov	r0, r4
  400e62:	4b05      	ldr	r3, [pc, #20]	; (400e78 <_adc_sync_init+0x30>)
  400e64:	4798      	blx	r3
  400e66:	4601      	mov	r1, r0
  400e68:	4620      	mov	r0, r4
  400e6a:	4b04      	ldr	r3, [pc, #16]	; (400e7c <_adc_sync_init+0x34>)
  400e6c:	4798      	blx	r3
}
  400e6e:	bd38      	pop	{r3, r4, r5, pc}
  400e70:	00404588 	.word	0x00404588
  400e74:	00400cd1 	.word	0x00400cd1
  400e78:	00400e19 	.word	0x00400e19
  400e7c:	00400d69 	.word	0x00400d69

00400e80 <_adc_sync_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  400e80:	6802      	ldr	r2, [r0, #0]
  400e82:	2301      	movs	r3, #1
  400e84:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  400e88:	6151      	str	r1, [r2, #20]
  400e8a:	4770      	bx	lr

00400e8c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400e8c:	b500      	push	{lr}
  400e8e:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400e90:	a801      	add	r0, sp, #4
  400e92:	4b0e      	ldr	r3, [pc, #56]	; (400ecc <_init_chip+0x40>)
  400e94:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400e96:	4a0e      	ldr	r2, [pc, #56]	; (400ed0 <_init_chip+0x44>)
  400e98:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400ea4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ea8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400eac:	a801      	add	r0, sp, #4
  400eae:	4b09      	ldr	r3, [pc, #36]	; (400ed4 <_init_chip+0x48>)
  400eb0:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400eb2:	4a09      	ldr	r2, [pc, #36]	; (400ed8 <_init_chip+0x4c>)
  400eb4:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400eb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400eba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400ebe:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400ec0:	4b06      	ldr	r3, [pc, #24]	; (400edc <_init_chip+0x50>)
  400ec2:	4798      	blx	r3
}
  400ec4:	b003      	add	sp, #12
  400ec6:	f85d fb04 	ldr.w	pc, [sp], #4
  400eca:	bf00      	nop
  400ecc:	00400891 	.word	0x00400891
  400ed0:	e000ed00 	.word	0xe000ed00
  400ed4:	0040089f 	.word	0x0040089f
  400ed8:	400e0c00 	.word	0x400e0c00
  400edc:	00401261 	.word	0x00401261

00400ee0 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  400ee0:	b538      	push	{r3, r4, r5, lr}
  400ee2:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  400ee4:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  400ee6:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  400ee8:	f014 0f01 	tst.w	r4, #1
  400eec:	d11a      	bne.n	400f24 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  400eee:	f414 7f00 	tst.w	r4, #512	; 0x200
  400ef2:	d11a      	bne.n	400f2a <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  400ef4:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  400ef8:	d11b      	bne.n	400f32 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  400efa:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  400efe:	d11d      	bne.n	400f3c <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  400f00:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  400f04:	d008      	beq.n	400f18 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400f06:	68eb      	ldr	r3, [r5, #12]
  400f08:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  400f0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
  400f0c:	f012 0f20 	tst.w	r2, #32
  400f10:	d019      	beq.n	400f46 <_can_irq_handler+0x66>
  400f12:	2102      	movs	r1, #2
  400f14:	4628      	mov	r0, r5
  400f16:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  400f18:	f014 0f08 	tst.w	r4, #8
  400f1c:	d115      	bne.n	400f4a <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  400f1e:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  400f20:	651c      	str	r4, [r3, #80]	; 0x50
  400f22:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  400f24:	6883      	ldr	r3, [r0, #8]
  400f26:	4798      	blx	r3
  400f28:	e7e1      	b.n	400eee <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  400f2a:	686b      	ldr	r3, [r5, #4]
  400f2c:	4628      	mov	r0, r5
  400f2e:	4798      	blx	r3
  400f30:	e7e0      	b.n	400ef4 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  400f32:	68eb      	ldr	r3, [r5, #12]
  400f34:	2103      	movs	r1, #3
  400f36:	4628      	mov	r0, r5
  400f38:	4798      	blx	r3
  400f3a:	e7de      	b.n	400efa <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  400f3c:	68eb      	ldr	r3, [r5, #12]
  400f3e:	2100      	movs	r1, #0
  400f40:	4628      	mov	r0, r5
  400f42:	4798      	blx	r3
  400f44:	e7dc      	b.n	400f00 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400f46:	2101      	movs	r1, #1
  400f48:	e7e4      	b.n	400f14 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  400f4a:	68eb      	ldr	r3, [r5, #12]
  400f4c:	2104      	movs	r1, #4
  400f4e:	4628      	mov	r0, r5
  400f50:	4798      	blx	r3
  400f52:	e7e4      	b.n	400f1e <_can_irq_handler+0x3e>

00400f54 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  400f54:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  400f56:	4b02      	ldr	r3, [pc, #8]	; (400f60 <MCAN1_INT0_Handler+0xc>)
  400f58:	6a98      	ldr	r0, [r3, #40]	; 0x28
  400f5a:	4b02      	ldr	r3, [pc, #8]	; (400f64 <MCAN1_INT0_Handler+0x10>)
  400f5c:	4798      	blx	r3
  400f5e:	bd08      	pop	{r3, pc}
  400f60:	20400260 	.word	0x20400260
  400f64:	00400ee1 	.word	0x00400ee1

00400f68 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  400f68:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  400f6a:	2500      	movs	r5, #0
  400f6c:	428d      	cmp	r5, r1
  400f6e:	d210      	bcs.n	400f92 <_ffs+0x2a>
  400f70:	2201      	movs	r2, #1
  400f72:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400f74:	2b1f      	cmp	r3, #31
  400f76:	d80a      	bhi.n	400f8e <_ffs+0x26>
			if (v[i] & bit) {
  400f78:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  400f7c:	4222      	tst	r2, r4
  400f7e:	d102      	bne.n	400f86 <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  400f80:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400f82:	3301      	adds	r3, #1
  400f84:	e7f6      	b.n	400f74 <_ffs+0xc>
				return i * 32 + j;
  400f86:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  400f8a:	bc30      	pop	{r4, r5}
  400f8c:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  400f8e:	3501      	adds	r5, #1
  400f90:	e7ec      	b.n	400f6c <_ffs+0x4>
	return -1;
  400f92:	f04f 30ff 	mov.w	r0, #4294967295
  400f96:	e7f8      	b.n	400f8a <_ffs+0x22>

00400f98 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  400f98:	b510      	push	{r4, lr}
  400f9a:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  400f9c:	2300      	movs	r3, #0
  400f9e:	9301      	str	r3, [sp, #4]
  400fa0:	9302      	str	r3, [sp, #8]
  400fa2:	9303      	str	r3, [sp, #12]
  400fa4:	9304      	str	r3, [sp, #16]
  400fa6:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  400fa8:	4b21      	ldr	r3, [pc, #132]	; (401030 <_ext_irq_handler+0x98>)
  400faa:	6818      	ldr	r0, [r3, #0]
  400fac:	22f8      	movs	r2, #248	; 0xf8
  400fae:	4921      	ldr	r1, [pc, #132]	; (401034 <_ext_irq_handler+0x9c>)
  400fb0:	3000      	adds	r0, #0
  400fb2:	bf18      	it	ne
  400fb4:	2001      	movne	r0, #1
  400fb6:	4b20      	ldr	r3, [pc, #128]	; (401038 <_ext_irq_handler+0xa0>)
  400fb8:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  400fba:	4b20      	ldr	r3, [pc, #128]	; (40103c <_ext_irq_handler+0xa4>)
  400fbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  400fc0:	4013      	ands	r3, r2
  400fc2:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  400fc4:	491e      	ldr	r1, [pc, #120]	; (401040 <_ext_irq_handler+0xa8>)
  400fc6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400fc8:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  400fca:	400a      	ands	r2, r1
  400fcc:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  400fce:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  400fd0:	e025      	b.n	40101e <_ext_irq_handler+0x86>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  400fd2:	4b17      	ldr	r3, [pc, #92]	; (401030 <_ext_irq_handler+0x98>)
  400fd4:	681b      	ldr	r3, [r3, #0]
  400fd6:	4620      	mov	r0, r4
  400fd8:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  400fda:	1163      	asrs	r3, r4, #5
  400fdc:	f004 041f 	and.w	r4, r4, #31
  400fe0:	2201      	movs	r2, #1
  400fe2:	fa02 f404 	lsl.w	r4, r2, r4
  400fe6:	aa06      	add	r2, sp, #24
  400fe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400fec:	f853 2c14 	ldr.w	r2, [r3, #-20]
  400ff0:	ea22 0204 	bic.w	r2, r2, r4
  400ff4:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  400ff8:	2105      	movs	r1, #5
  400ffa:	a801      	add	r0, sp, #4
  400ffc:	4b11      	ldr	r3, [pc, #68]	; (401044 <_ext_irq_handler+0xac>)
  400ffe:	4798      	blx	r3
  401000:	4604      	mov	r4, r0
		while (-1 != pos) {
  401002:	f1b4 3fff 	cmp.w	r4, #4294967295
  401006:	d1e4      	bne.n	400fd2 <_ext_irq_handler+0x3a>
	return ((Pio *)hw)->PIO_ISR;
  401008:	4a0c      	ldr	r2, [pc, #48]	; (40103c <_ext_irq_handler+0xa4>)
  40100a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  40100c:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  40100e:	400b      	ands	r3, r1
  401010:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401012:	490b      	ldr	r1, [pc, #44]	; (401040 <_ext_irq_handler+0xa8>)
  401014:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401016:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401018:	4002      	ands	r2, r0
  40101a:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  40101c:	4313      	orrs	r3, r2
	while (flag_total) {
  40101e:	b12b      	cbz	r3, 40102c <_ext_irq_handler+0x94>
		pos = _ffs(flags, 5);
  401020:	2105      	movs	r1, #5
  401022:	a801      	add	r0, sp, #4
  401024:	4b07      	ldr	r3, [pc, #28]	; (401044 <_ext_irq_handler+0xac>)
  401026:	4798      	blx	r3
  401028:	4604      	mov	r4, r0
		while (-1 != pos) {
  40102a:	e7ea      	b.n	401002 <_ext_irq_handler+0x6a>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  40102c:	b006      	add	sp, #24
  40102e:	bd10      	pop	{r4, pc}
  401030:	2040028c 	.word	0x2040028c
  401034:	004045e0 	.word	0x004045e0
  401038:	00400cd1 	.word	0x00400cd1
  40103c:	400e0e00 	.word	0x400e0e00
  401040:	400e1400 	.word	0x400e1400
  401044:	00400f69 	.word	0x00400f69

00401048 <_pio_get_hardware_index>:
{
  401048:	b510      	push	{r4, lr}
	ASSERT(hw);
  40104a:	4604      	mov	r4, r0
  40104c:	22d2      	movs	r2, #210	; 0xd2
  40104e:	4905      	ldr	r1, [pc, #20]	; (401064 <_pio_get_hardware_index+0x1c>)
  401050:	3000      	adds	r0, #0
  401052:	bf18      	it	ne
  401054:	2001      	movne	r0, #1
  401056:	4b04      	ldr	r3, [pc, #16]	; (401068 <_pio_get_hardware_index+0x20>)
  401058:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  40105a:	4804      	ldr	r0, [pc, #16]	; (40106c <_pio_get_hardware_index+0x24>)
  40105c:	4420      	add	r0, r4
}
  40105e:	f3c0 2047 	ubfx	r0, r0, #9, #8
  401062:	bd10      	pop	{r4, pc}
  401064:	004045e0 	.word	0x004045e0
  401068:	00400cd1 	.word	0x00400cd1
  40106c:	bff1f200 	.word	0xbff1f200

00401070 <_pio_get_index>:
{
  401070:	b510      	push	{r4, lr}
	ASSERT(hw);
  401072:	4604      	mov	r4, r0
  401074:	22e0      	movs	r2, #224	; 0xe0
  401076:	490d      	ldr	r1, [pc, #52]	; (4010ac <_pio_get_index+0x3c>)
  401078:	3000      	adds	r0, #0
  40107a:	bf18      	it	ne
  40107c:	2001      	movne	r0, #1
  40107e:	4b0c      	ldr	r3, [pc, #48]	; (4010b0 <_pio_get_index+0x40>)
  401080:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  401082:	4620      	mov	r0, r4
  401084:	4b0b      	ldr	r3, [pc, #44]	; (4010b4 <_pio_get_index+0x44>)
  401086:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401088:	2300      	movs	r3, #0
  40108a:	2b01      	cmp	r3, #1
  40108c:	d80b      	bhi.n	4010a6 <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  40108e:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  401092:	008a      	lsls	r2, r1, #2
  401094:	4908      	ldr	r1, [pc, #32]	; (4010b8 <_pio_get_index+0x48>)
  401096:	5c8a      	ldrb	r2, [r1, r2]
  401098:	4290      	cmp	r0, r2
  40109a:	d002      	beq.n	4010a2 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  40109c:	3301      	adds	r3, #1
  40109e:	b2db      	uxtb	r3, r3
  4010a0:	e7f3      	b.n	40108a <_pio_get_index+0x1a>
			return i;
  4010a2:	b258      	sxtb	r0, r3
  4010a4:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  4010a6:	f04f 30ff 	mov.w	r0, #4294967295
}
  4010aa:	bd10      	pop	{r4, pc}
  4010ac:	004045e0 	.word	0x004045e0
  4010b0:	00400cd1 	.word	0x00400cd1
  4010b4:	00401049 	.word	0x00401049
  4010b8:	004045a0 	.word	0x004045a0

004010bc <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  4010bc:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  4010be:	4604      	mov	r4, r0
  4010c0:	f240 1259 	movw	r2, #345	; 0x159
  4010c4:	4929      	ldr	r1, [pc, #164]	; (40116c <_pio_init+0xb0>)
  4010c6:	3000      	adds	r0, #0
  4010c8:	bf18      	it	ne
  4010ca:	2001      	movne	r0, #1
  4010cc:	4b28      	ldr	r3, [pc, #160]	; (401170 <_pio_init+0xb4>)
  4010ce:	4798      	blx	r3

	i = _pio_get_index(hw);
  4010d0:	4620      	mov	r0, r4
  4010d2:	4b28      	ldr	r3, [pc, #160]	; (401174 <_pio_init+0xb8>)
  4010d4:	4798      	blx	r3
	if (i < 0) {
  4010d6:	2800      	cmp	r0, #0
  4010d8:	db43      	blt.n	401162 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  4010da:	4d27      	ldr	r5, [pc, #156]	; (401178 <_pio_init+0xbc>)
  4010dc:	00c2      	lsls	r2, r0, #3
  4010de:	1a11      	subs	r1, r2, r0
  4010e0:	008b      	lsls	r3, r1, #2
  4010e2:	442b      	add	r3, r5
  4010e4:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  4010e6:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  4010ea:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  4010ec:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  4010f0:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  4010f2:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  4010f6:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  4010f8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  4010fc:	1a10      	subs	r0, r2, r0
  4010fe:	0083      	lsls	r3, r0, #2
  401100:	442b      	add	r3, r5
  401102:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  401104:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401108:	4620      	mov	r0, r4
  40110a:	4b1c      	ldr	r3, [pc, #112]	; (40117c <_pio_init+0xc0>)
  40110c:	4798      	blx	r3
  40110e:	4428      	add	r0, r5
  401110:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
  if ((int32_t)(IRQn) >= 0)
  401114:	2b00      	cmp	r3, #0
  401116:	db0c      	blt.n	401132 <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401118:	095a      	lsrs	r2, r3, #5
  40111a:	f003 001f 	and.w	r0, r3, #31
  40111e:	2101      	movs	r1, #1
  401120:	4081      	lsls	r1, r0
  401122:	3220      	adds	r2, #32
  401124:	4816      	ldr	r0, [pc, #88]	; (401180 <_pio_init+0xc4>)
  401126:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40112a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40112e:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  401132:	2b00      	cmp	r3, #0
  401134:	db08      	blt.n	401148 <_pio_init+0x8c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401136:	095a      	lsrs	r2, r3, #5
  401138:	f003 001f 	and.w	r0, r3, #31
  40113c:	2101      	movs	r1, #1
  40113e:	4081      	lsls	r1, r0
  401140:	3260      	adds	r2, #96	; 0x60
  401142:	480f      	ldr	r0, [pc, #60]	; (401180 <_pio_init+0xc4>)
  401144:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401148:	2b00      	cmp	r3, #0
  40114a:	db0d      	blt.n	401168 <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40114c:	0959      	lsrs	r1, r3, #5
  40114e:	f003 031f 	and.w	r3, r3, #31
  401152:	2201      	movs	r2, #1
  401154:	fa02 f303 	lsl.w	r3, r2, r3
  401158:	4a09      	ldr	r2, [pc, #36]	; (401180 <_pio_init+0xc4>)
  40115a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  40115e:	2000      	movs	r0, #0
  401160:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  401162:	f06f 0010 	mvn.w	r0, #16
  401166:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401168:	2000      	movs	r0, #0
}
  40116a:	bd38      	pop	{r3, r4, r5, pc}
  40116c:	004045e0 	.word	0x004045e0
  401170:	00400cd1 	.word	0x00400cd1
  401174:	00401071 	.word	0x00401071
  401178:	004045a0 	.word	0x004045a0
  40117c:	00401049 	.word	0x00401049
  401180:	e000e100 	.word	0xe000e100

00401184 <PIOD_Handler>:
{
  401184:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401186:	4b01      	ldr	r3, [pc, #4]	; (40118c <PIOD_Handler+0x8>)
  401188:	4798      	blx	r3
  40118a:	bd08      	pop	{r3, pc}
  40118c:	00400f99 	.word	0x00400f99

00401190 <PIOA_Handler>:
{
  401190:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401192:	4b01      	ldr	r3, [pc, #4]	; (401198 <PIOA_Handler+0x8>)
  401194:	4798      	blx	r3
  401196:	bd08      	pop	{r3, pc}
  401198:	00400f99 	.word	0x00400f99

0040119c <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  40119c:	b538      	push	{r3, r4, r5, lr}
  40119e:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  4011a0:	4804      	ldr	r0, [pc, #16]	; (4011b4 <_ext_irq_init+0x18>)
  4011a2:	4c05      	ldr	r4, [pc, #20]	; (4011b8 <_ext_irq_init+0x1c>)
  4011a4:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  4011a6:	4805      	ldr	r0, [pc, #20]	; (4011bc <_ext_irq_init+0x20>)
  4011a8:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  4011aa:	4b05      	ldr	r3, [pc, #20]	; (4011c0 <_ext_irq_init+0x24>)
  4011ac:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  4011ae:	2000      	movs	r0, #0
  4011b0:	bd38      	pop	{r3, r4, r5, pc}
  4011b2:	bf00      	nop
  4011b4:	400e0e00 	.word	0x400e0e00
  4011b8:	004010bd 	.word	0x004010bd
  4011bc:	400e1400 	.word	0x400e1400
  4011c0:	2040028c 	.word	0x2040028c

004011c4 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  4011c4:	490e      	ldr	r1, [pc, #56]	; (401200 <_pmc_init_sources+0x3c>)
  4011c6:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  4011c8:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  4011cc:	4b0d      	ldr	r3, [pc, #52]	; (401204 <_pmc_init_sources+0x40>)
  4011ce:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  4011d0:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  4011d2:	4b0b      	ldr	r3, [pc, #44]	; (401200 <_pmc_init_sources+0x3c>)
  4011d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  4011d6:	f013 0f01 	tst.w	r3, #1
  4011da:	d0fa      	beq.n	4011d2 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  4011dc:	4b08      	ldr	r3, [pc, #32]	; (401200 <_pmc_init_sources+0x3c>)
  4011de:	6a19      	ldr	r1, [r3, #32]
  4011e0:	4a09      	ldr	r2, [pc, #36]	; (401208 <_pmc_init_sources+0x44>)
  4011e2:	430a      	orrs	r2, r1
  4011e4:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4011e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4011e8:	4a08      	ldr	r2, [pc, #32]	; (40120c <_pmc_init_sources+0x48>)
  4011ea:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4011ec:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  4011ee:	4a08      	ldr	r2, [pc, #32]	; (401210 <_pmc_init_sources+0x4c>)
  4011f0:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4011f2:	4b03      	ldr	r3, [pc, #12]	; (401200 <_pmc_init_sources+0x3c>)
  4011f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4011f6:	f013 0f02 	tst.w	r3, #2
  4011fa:	d0fa      	beq.n	4011f2 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4011fc:	4770      	bx	lr
  4011fe:	bf00      	nop
  401200:	400e0600 	.word	0x400e0600
  401204:	00373e01 	.word	0x00373e01
  401208:	01370000 	.word	0x01370000
  40120c:	f800ffff 	.word	0xf800ffff
  401210:	20183f01 	.word	0x20183f01

00401214 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401214:	4a11      	ldr	r2, [pc, #68]	; (40125c <_pmc_init_master_clock+0x48>)
  401216:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  40121c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40121e:	4b0f      	ldr	r3, [pc, #60]	; (40125c <_pmc_init_master_clock+0x48>)
  401220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401222:	f013 0f08 	tst.w	r3, #8
  401226:	d0fa      	beq.n	40121e <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401228:	4a0c      	ldr	r2, [pc, #48]	; (40125c <_pmc_init_master_clock+0x48>)
  40122a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  40122c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401234:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401236:	4b09      	ldr	r3, [pc, #36]	; (40125c <_pmc_init_master_clock+0x48>)
  401238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40123a:	f013 0f08 	tst.w	r3, #8
  40123e:	d0fa      	beq.n	401236 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401240:	4a06      	ldr	r2, [pc, #24]	; (40125c <_pmc_init_master_clock+0x48>)
  401242:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401244:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401248:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  40124c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40124e:	4b03      	ldr	r3, [pc, #12]	; (40125c <_pmc_init_master_clock+0x48>)
  401250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401252:	f013 0f08 	tst.w	r3, #8
  401256:	d0fa      	beq.n	40124e <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401258:	4770      	bx	lr
  40125a:	bf00      	nop
  40125c:	400e0600 	.word	0x400e0600

00401260 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401260:	b508      	push	{r3, lr}
	_pmc_init_sources();
  401262:	4b02      	ldr	r3, [pc, #8]	; (40126c <_pmc_init+0xc>)
  401264:	4798      	blx	r3
	_pmc_init_master_clock();
  401266:	4b02      	ldr	r3, [pc, #8]	; (401270 <_pmc_init+0x10>)
  401268:	4798      	blx	r3
  40126a:	bd08      	pop	{r3, pc}
  40126c:	004011c5 	.word	0x004011c5
  401270:	00401215 	.word	0x00401215

00401274 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401274:	2300      	movs	r3, #0
  401276:	2b01      	cmp	r3, #1
  401278:	d80f      	bhi.n	40129a <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  40127a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  40127e:	008a      	lsls	r2, r1, #2
  401280:	4907      	ldr	r1, [pc, #28]	; (4012a0 <_pwm_get_cfg+0x2c>)
  401282:	588a      	ldr	r2, [r1, r2]
  401284:	4282      	cmp	r2, r0
  401286:	d002      	beq.n	40128e <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401288:	3301      	adds	r3, #1
  40128a:	b2db      	uxtb	r3, r3
  40128c:	e7f3      	b.n	401276 <_pwm_get_cfg+0x2>
			return (_pwms + i);
  40128e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  401292:	009a      	lsls	r2, r3, #2
  401294:	4608      	mov	r0, r1
  401296:	4410      	add	r0, r2
  401298:	4770      	bx	lr
		}
	}

	return NULL;
  40129a:	2000      	movs	r0, #0
}
  40129c:	4770      	bx	lr
  40129e:	bf00      	nop
  4012a0:	004045fc 	.word	0x004045fc

004012a4 <_pwm_init>:
		_pwm1_dev = dev;
	}
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  4012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4012a6:	4605      	mov	r5, r0
	
	ASSERT(hw);
  4012a8:	460c      	mov	r4, r1
  4012aa:	1c08      	adds	r0, r1, #0
  4012ac:	bf18      	it	ne
  4012ae:	2001      	movne	r0, #1
  4012b0:	f240 1261 	movw	r2, #353	; 0x161
  4012b4:	4948      	ldr	r1, [pc, #288]	; (4013d8 <_pwm_init+0x134>)
  4012b6:	4b49      	ldr	r3, [pc, #292]	; (4013dc <_pwm_init+0x138>)
  4012b8:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  4012ba:	4620      	mov	r0, r4
  4012bc:	4b48      	ldr	r3, [pc, #288]	; (4013e0 <_pwm_init+0x13c>)
  4012be:	4798      	blx	r3

	device->hw = hw;
  4012c0:	612c      	str	r4, [r5, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  4012c2:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  4012c4:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  4012c6:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  4012c8:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  4012ca:	6903      	ldr	r3, [r0, #16]
  4012cc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  4012d0:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  4012d2:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  4012d4:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  4012d6:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  4012d8:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  4012da:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  4012de:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  4012e0:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  4012e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  4012e4:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  4012e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  4012ea:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
	

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  4012ee:	2100      	movs	r1, #0
  4012f0:	e029      	b.n	401346 <_pwm_init+0xa2>
		ch = cfg->ch + i;
  4012f2:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4012f4:	010b      	lsls	r3, r1, #4
  4012f6:	18d7      	adds	r7, r2, r3
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode | PWM_CMR_DTE);					//enable dead time
  4012f8:	5cd5      	ldrb	r5, [r2, r3]
  4012fa:	687e      	ldr	r6, [r7, #4]
  4012fc:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  401300:	3510      	adds	r5, #16
  401302:	016d      	lsls	r5, r5, #5
  401304:	5166      	str	r6, [r4, r5]
		//hri_pwmchnum_set_CMR_DTE_bit((void *) &((Pwm *)hw)->PwmChNum[ch->index]);		//another less elegant way of enabling dead time
		hri_pwm_set_DT_DTH_bf(hw, ch->index, 10);										//set high side deadtime in PWM clock counts
  401306:	5cd5      	ldrb	r5, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  401308:	eb04 1545 	add.w	r5, r4, r5, lsl #5
  40130c:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  401310:	f046 060a 	orr.w	r6, r6, #10
  401314:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
		hri_pwm_set_DT_DTL_bf(hw, ch->index, 10);										//set high side deadtime in PWM clock counts
  401318:	5cd5      	ldrb	r5, [r2, r3]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  40131a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
  40131e:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  401322:	f446 2620 	orr.w	r6, r6, #655360	; 0xa0000
  401326:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  40132a:	5cd5      	ldrb	r5, [r2, r3]
  40132c:	68fe      	ldr	r6, [r7, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  40132e:	3510      	adds	r5, #16
  401330:	eb04 1545 	add.w	r5, r4, r5, lsl #5
  401334:	606e      	str	r6, [r5, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  401336:	5cd3      	ldrb	r3, [r2, r3]
  401338:	68ba      	ldr	r2, [r7, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  40133a:	eb04 1343 	add.w	r3, r4, r3, lsl #5
  40133e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  401342:	3101      	adds	r1, #1
  401344:	b249      	sxtb	r1, r1
  401346:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  401348:	4299      	cmp	r1, r3
  40134a:	d3d2      	bcc.n	4012f2 <_pwm_init+0x4e>
  40134c:	2300      	movs	r3, #0
  40134e:	e011      	b.n	401374 <_pwm_init+0xd0>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  401350:	6b81      	ldr	r1, [r0, #56]	; 0x38
  401352:	eb03 0543 	add.w	r5, r3, r3, lsl #1
  401356:	00aa      	lsls	r2, r5, #2
  401358:	188f      	adds	r7, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  40135a:	5c8d      	ldrb	r5, [r1, r2]
  40135c:	687e      	ldr	r6, [r7, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  40135e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
  401362:	f8c5 6138 	str.w	r6, [r5, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  401366:	5c8a      	ldrb	r2, [r1, r2]
  401368:	68b9      	ldr	r1, [r7, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  40136a:	3213      	adds	r2, #19
  40136c:	0112      	lsls	r2, r2, #4
  40136e:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  401370:	3301      	adds	r3, #1
  401372:	b25b      	sxtb	r3, r3
  401374:	6b42      	ldr	r2, [r0, #52]	; 0x34
  401376:	4293      	cmp	r3, r2
  401378:	d3ea      	bcc.n	401350 <_pwm_init+0xac>
	}
	//hri_pwm_set_IMR1_CHID1_bit

	_pwm_init_irq_param(hw, device);
	NVIC_DisableIRQ(cfg->irq);
  40137a:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  40137e:	2b00      	cmp	r3, #0
  401380:	db0d      	blt.n	40139e <_pwm_init+0xfa>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401382:	095a      	lsrs	r2, r3, #5
  401384:	f003 031f 	and.w	r3, r3, #31
  401388:	2101      	movs	r1, #1
  40138a:	fa01 f303 	lsl.w	r3, r1, r3
  40138e:	3220      	adds	r2, #32
  401390:	4914      	ldr	r1, [pc, #80]	; (4013e4 <_pwm_init+0x140>)
  401392:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401396:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40139a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40139e:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  4013a2:	2b00      	cmp	r3, #0
  4013a4:	db09      	blt.n	4013ba <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013a6:	095a      	lsrs	r2, r3, #5
  4013a8:	f003 031f 	and.w	r3, r3, #31
  4013ac:	2101      	movs	r1, #1
  4013ae:	fa01 f303 	lsl.w	r3, r1, r3
  4013b2:	3260      	adds	r2, #96	; 0x60
  4013b4:	490b      	ldr	r1, [pc, #44]	; (4013e4 <_pwm_init+0x140>)
  4013b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  4013ba:	f990 3004 	ldrsb.w	r3, [r0, #4]
  if ((int32_t)(IRQn) >= 0)
  4013be:	2b00      	cmp	r3, #0
  4013c0:	db08      	blt.n	4013d4 <_pwm_init+0x130>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013c2:	0959      	lsrs	r1, r3, #5
  4013c4:	f003 031f 	and.w	r3, r3, #31
  4013c8:	2201      	movs	r2, #1
  4013ca:	fa02 f303 	lsl.w	r3, r2, r3
  4013ce:	4a05      	ldr	r2, [pc, #20]	; (4013e4 <_pwm_init+0x140>)
  4013d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  4013d4:	2000      	movs	r0, #0
  4013d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4013d8:	004046a4 	.word	0x004046a4
  4013dc:	00400cd1 	.word	0x00400cd1
  4013e0:	00401275 	.word	0x00401275
  4013e4:	e000e100 	.word	0xe000e100

004013e8 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  4013e8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  4013ea:	4604      	mov	r4, r0
  4013ec:	f240 129d 	movw	r2, #413	; 0x19d
  4013f0:	490b      	ldr	r1, [pc, #44]	; (401420 <_pwm_enable+0x38>)
  4013f2:	3000      	adds	r0, #0
  4013f4:	bf18      	it	ne
  4013f6:	2001      	movne	r0, #1
  4013f8:	4b0a      	ldr	r3, [pc, #40]	; (401424 <_pwm_enable+0x3c>)
  4013fa:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  4013fc:	6920      	ldr	r0, [r4, #16]
  4013fe:	4b0a      	ldr	r3, [pc, #40]	; (401428 <_pwm_enable+0x40>)
  401400:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401402:	2300      	movs	r3, #0
  401404:	e008      	b.n	401418 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  401406:	6921      	ldr	r1, [r4, #16]
  401408:	6b05      	ldr	r5, [r0, #48]	; 0x30
  40140a:	011a      	lsls	r2, r3, #4
  40140c:	5cad      	ldrb	r5, [r5, r2]
  40140e:	2201      	movs	r2, #1
  401410:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  401412:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  401414:	3301      	adds	r3, #1
  401416:	b25b      	sxtb	r3, r3
  401418:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40141a:	4293      	cmp	r3, r2
  40141c:	d3f3      	bcc.n	401406 <_pwm_enable+0x1e>
	}
}
  40141e:	bd38      	pop	{r3, r4, r5, pc}
  401420:	004046a4 	.word	0x004046a4
  401424:	00400cd1 	.word	0x00400cd1
  401428:	00401275 	.word	0x00401275

0040142c <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  40142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40142e:	460d      	mov	r5, r1
  401430:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  401432:	4604      	mov	r4, r0
  401434:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  401438:	4911      	ldr	r1, [pc, #68]	; (401480 <_pwm_set_param+0x54>)
  40143a:	2800      	cmp	r0, #0
  40143c:	bf18      	it	ne
  40143e:	42ae      	cmpne	r6, r5
  401440:	bf34      	ite	cc
  401442:	2001      	movcc	r0, #1
  401444:	2000      	movcs	r0, #0
  401446:	4b0f      	ldr	r3, [pc, #60]	; (401484 <_pwm_set_param+0x58>)
  401448:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  40144a:	6920      	ldr	r0, [r4, #16]
  40144c:	4b0e      	ldr	r3, [pc, #56]	; (401488 <_pwm_set_param+0x5c>)
  40144e:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  401450:	2300      	movs	r3, #0
  401452:	e010      	b.n	401476 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  401454:	6922      	ldr	r2, [r4, #16]
  401456:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401458:	0119      	lsls	r1, r3, #4
  40145a:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  40145c:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  401460:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  401464:	6922      	ldr	r2, [r4, #16]
  401466:	6b07      	ldr	r7, [r0, #48]	; 0x30
  401468:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  40146a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  40146e:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  401472:	3301      	adds	r3, #1
  401474:	b2db      	uxtb	r3, r3
  401476:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401478:	4293      	cmp	r3, r2
  40147a:	d3eb      	bcc.n	401454 <_pwm_set_param+0x28>
	}
}
  40147c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40147e:	bf00      	nop
  401480:	004046a4 	.word	0x004046a4
  401484:	00400cd1 	.word	0x00400cd1
  401488:	00401275 	.word	0x00401275

0040148c <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  40148c:	b510      	push	{r4, lr}
	ASSERT(device);
  40148e:	4604      	mov	r4, r0
  401490:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
  401494:	4907      	ldr	r1, [pc, #28]	; (4014b4 <_pwm_is_enabled+0x28>)
  401496:	3000      	adds	r0, #0
  401498:	bf18      	it	ne
  40149a:	2001      	movne	r0, #1
  40149c:	4b06      	ldr	r3, [pc, #24]	; (4014b8 <_pwm_is_enabled+0x2c>)
  40149e:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  4014a0:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  4014a2:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  4014a4:	f013 0f0f 	tst.w	r3, #15
  4014a8:	d001      	beq.n	4014ae <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  4014aa:	2001      	movs	r0, #1
	}
}
  4014ac:	bd10      	pop	{r4, pc}
		return false;
  4014ae:	2000      	movs	r0, #0
  4014b0:	bd10      	pop	{r4, pc}
  4014b2:	bf00      	nop
  4014b4:	004046a4 	.word	0x004046a4
  4014b8:	00400cd1 	.word	0x00400cd1

004014bc <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  4014bc:	2000      	movs	r0, #0
  4014be:	4770      	bx	lr

004014c0 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  4014c0:	4b03      	ldr	r3, [pc, #12]	; (4014d0 <_system_time_init+0x10>)
  4014c2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4014c6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  4014c8:	2205      	movs	r2, #5
  4014ca:	601a      	str	r2, [r3, #0]
  4014cc:	4770      	bx	lr
  4014ce:	bf00      	nop
  4014d0:	e000e010 	.word	0xe000e010

004014d4 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  4014d4:	b508      	push	{r3, lr}
	_system_time_init(hw);
  4014d6:	4b01      	ldr	r3, [pc, #4]	; (4014dc <_delay_init+0x8>)
  4014d8:	4798      	blx	r3
  4014da:	bd08      	pop	{r3, pc}
  4014dc:	004014c1 	.word	0x004014c1

004014e0 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4014e0:	2300      	movs	r3, #0
  4014e2:	2b01      	cmp	r3, #1
  4014e4:	d815      	bhi.n	401512 <get_cfg+0x32>
{
  4014e6:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  4014e8:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  4014ec:	008a      	lsls	r2, r1, #2
  4014ee:	490a      	ldr	r1, [pc, #40]	; (401518 <get_cfg+0x38>)
  4014f0:	588a      	ldr	r2, [r1, r2]
  4014f2:	4282      	cmp	r2, r0
  4014f4:	d007      	beq.n	401506 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4014f6:	3301      	adds	r3, #1
  4014f8:	b2db      	uxtb	r3, r3
  4014fa:	2b01      	cmp	r3, #1
  4014fc:	d9f4      	bls.n	4014e8 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  4014fe:	2000      	movs	r0, #0
}
  401500:	f85d 4b04 	ldr.w	r4, [sp], #4
  401504:	4770      	bx	lr
			return &(_tcs[i]);
  401506:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  40150a:	00a3      	lsls	r3, r4, #2
  40150c:	4608      	mov	r0, r1
  40150e:	4418      	add	r0, r3
  401510:	e7f6      	b.n	401500 <get_cfg+0x20>
	return NULL;
  401512:	2000      	movs	r0, #0
  401514:	4770      	bx	lr
  401516:	bf00      	nop
  401518:	20400000 	.word	0x20400000

0040151c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  40151c:	4b06      	ldr	r3, [pc, #24]	; (401538 <_tc_init_irq_param+0x1c>)
  40151e:	4298      	cmp	r0, r3
  401520:	d003      	beq.n	40152a <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  401522:	4b06      	ldr	r3, [pc, #24]	; (40153c <_tc_init_irq_param+0x20>)
  401524:	4298      	cmp	r0, r3
  401526:	d003      	beq.n	401530 <_tc_init_irq_param+0x14>
  401528:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  40152a:	4b05      	ldr	r3, [pc, #20]	; (401540 <_tc_init_irq_param+0x24>)
  40152c:	6019      	str	r1, [r3, #0]
  40152e:	e7f8      	b.n	401522 <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  401530:	4b03      	ldr	r3, [pc, #12]	; (401540 <_tc_init_irq_param+0x24>)
  401532:	6059      	str	r1, [r3, #4]
	}
}
  401534:	e7f8      	b.n	401528 <_tc_init_irq_param+0xc>
  401536:	bf00      	nop
  401538:	4000c000 	.word	0x4000c000
  40153c:	40054000 	.word	0x40054000
  401540:	204002a8 	.word	0x204002a8

00401544 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  401544:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  401546:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  401548:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  40154a:	f013 0f10 	tst.w	r3, #16
  40154e:	d100      	bne.n	401552 <tc_interrupt_handler+0xe>
  401550:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  401552:	6803      	ldr	r3, [r0, #0]
  401554:	4798      	blx	r3
	}
}
  401556:	e7fb      	b.n	401550 <tc_interrupt_handler+0xc>

00401558 <_timer_init>:
{
  401558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40155c:	4606      	mov	r6, r0
  40155e:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  401560:	4608      	mov	r0, r1
  401562:	4b2f      	ldr	r3, [pc, #188]	; (401620 <_timer_init+0xc8>)
  401564:	4798      	blx	r3
  401566:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  401568:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  40156c:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  401570:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  401572:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  401576:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  401578:	22c3      	movs	r2, #195	; 0xc3
  40157a:	492a      	ldr	r1, [pc, #168]	; (401624 <_timer_init+0xcc>)
  40157c:	2001      	movs	r0, #1
  40157e:	4b2a      	ldr	r3, [pc, #168]	; (401628 <_timer_init+0xd0>)
  401580:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  401582:	f248 0307 	movw	r3, #32775	; 0x8007
  401586:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  401588:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  40158c:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  401590:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  401594:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  401596:	2300      	movs	r3, #0
  401598:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  40159a:	f248 020f 	movw	r2, #32783	; 0x800f
  40159e:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4015a0:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4015a4:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4015a8:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4015ac:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4015ae:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  4015b0:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  4015b2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  4015b6:	4631      	mov	r1, r6
  4015b8:	4620      	mov	r0, r4
  4015ba:	4b1c      	ldr	r3, [pc, #112]	; (40162c <_timer_init+0xd4>)
  4015bc:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  4015be:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4015c2:	2b00      	cmp	r3, #0
  4015c4:	db0d      	blt.n	4015e2 <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4015c6:	095a      	lsrs	r2, r3, #5
  4015c8:	f003 031f 	and.w	r3, r3, #31
  4015cc:	2101      	movs	r1, #1
  4015ce:	fa01 f303 	lsl.w	r3, r1, r3
  4015d2:	3220      	adds	r2, #32
  4015d4:	4916      	ldr	r1, [pc, #88]	; (401630 <_timer_init+0xd8>)
  4015d6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4015da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4015de:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  4015e2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4015e6:	2b00      	cmp	r3, #0
  4015e8:	db09      	blt.n	4015fe <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4015ea:	095a      	lsrs	r2, r3, #5
  4015ec:	f003 031f 	and.w	r3, r3, #31
  4015f0:	2101      	movs	r1, #1
  4015f2:	fa01 f303 	lsl.w	r3, r1, r3
  4015f6:	3260      	adds	r2, #96	; 0x60
  4015f8:	490d      	ldr	r1, [pc, #52]	; (401630 <_timer_init+0xd8>)
  4015fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  4015fe:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  401602:	2b00      	cmp	r3, #0
  401604:	db08      	blt.n	401618 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401606:	0959      	lsrs	r1, r3, #5
  401608:	f003 031f 	and.w	r3, r3, #31
  40160c:	2201      	movs	r2, #1
  40160e:	fa02 f303 	lsl.w	r3, r2, r3
  401612:	4a07      	ldr	r2, [pc, #28]	; (401630 <_timer_init+0xd8>)
  401614:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  401618:	2000      	movs	r0, #0
  40161a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40161e:	bf00      	nop
  401620:	004014e1 	.word	0x004014e1
  401624:	004046bc 	.word	0x004046bc
  401628:	00400cd1 	.word	0x00400cd1
  40162c:	0040151d 	.word	0x0040151d
  401630:	e000e100 	.word	0xe000e100

00401634 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  401634:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  401636:	2305      	movs	r3, #5
  401638:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  40163a:	68c2      	ldr	r2, [r0, #12]
  40163c:	6413      	str	r3, [r2, #64]	; 0x40
  40163e:	4770      	bx	lr

00401640 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  401640:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  401642:	6a13      	ldr	r3, [r2, #32]
  401644:	f3c3 4300 	ubfx	r3, r3, #16, #1
  401648:	6e10      	ldr	r0, [r2, #96]	; 0x60
  40164a:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  40164e:	4318      	orrs	r0, r3
  401650:	4770      	bx	lr

00401652 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  401652:	2000      	movs	r0, #0
  401654:	4770      	bx	lr
	...

00401658 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  401658:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  40165a:	4b02      	ldr	r3, [pc, #8]	; (401664 <TC0_Handler+0xc>)
  40165c:	6818      	ldr	r0, [r3, #0]
  40165e:	4b02      	ldr	r3, [pc, #8]	; (401668 <TC0_Handler+0x10>)
  401660:	4798      	blx	r3
  401662:	bd08      	pop	{r3, pc}
  401664:	204002a8 	.word	0x204002a8
  401668:	00401545 	.word	0x00401545

0040166c <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  40166c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  40166e:	4b02      	ldr	r3, [pc, #8]	; (401678 <TC9_Handler+0xc>)
  401670:	6858      	ldr	r0, [r3, #4]
  401672:	4b02      	ldr	r3, [pc, #8]	; (40167c <TC9_Handler+0x10>)
  401674:	4798      	blx	r3
  401676:	bd08      	pop	{r3, pc}
  401678:	204002a8 	.word	0x204002a8
  40167c:	00401545 	.word	0x00401545

00401680 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  401680:	b510      	push	{r4, lr}
	ASSERT(hw);
  401682:	4604      	mov	r4, r0
  401684:	f240 222b 	movw	r2, #555	; 0x22b
  401688:	4905      	ldr	r1, [pc, #20]	; (4016a0 <_usart_get_hardware_index+0x20>)
  40168a:	3000      	adds	r0, #0
  40168c:	bf18      	it	ne
  40168e:	2001      	movne	r0, #1
  401690:	4b04      	ldr	r3, [pc, #16]	; (4016a4 <_usart_get_hardware_index+0x24>)
  401692:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  401694:	4804      	ldr	r0, [pc, #16]	; (4016a8 <_usart_get_hardware_index+0x28>)
  401696:	4420      	add	r0, r4
}
  401698:	f3c0 3087 	ubfx	r0, r0, #14, #8
  40169c:	bd10      	pop	{r4, pc}
  40169e:	bf00      	nop
  4016a0:	004046dc 	.word	0x004046dc
  4016a4:	00400cd1 	.word	0x00400cd1
  4016a8:	bffdc000 	.word	0xbffdc000

004016ac <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  4016ac:	b510      	push	{r4, lr}
	ASSERT(hw);
  4016ae:	4604      	mov	r4, r0
  4016b0:	f240 2287 	movw	r2, #647	; 0x287
  4016b4:	490e      	ldr	r1, [pc, #56]	; (4016f0 <_get_usart_index+0x44>)
  4016b6:	3000      	adds	r0, #0
  4016b8:	bf18      	it	ne
  4016ba:	2001      	movne	r0, #1
  4016bc:	4b0d      	ldr	r3, [pc, #52]	; (4016f4 <_get_usart_index+0x48>)
  4016be:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  4016c0:	4620      	mov	r0, r4
  4016c2:	4b0d      	ldr	r3, [pc, #52]	; (4016f8 <_get_usart_index+0x4c>)
  4016c4:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4016c6:	2300      	movs	r3, #0
  4016c8:	b143      	cbz	r3, 4016dc <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  4016ca:	f240 2291 	movw	r2, #657	; 0x291
  4016ce:	4908      	ldr	r1, [pc, #32]	; (4016f0 <_get_usart_index+0x44>)
  4016d0:	2000      	movs	r0, #0
  4016d2:	4b08      	ldr	r3, [pc, #32]	; (4016f4 <_get_usart_index+0x48>)
  4016d4:	4798      	blx	r3
	return 0;
  4016d6:	2300      	movs	r3, #0
}
  4016d8:	4618      	mov	r0, r3
  4016da:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  4016dc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4016e0:	008a      	lsls	r2, r1, #2
  4016e2:	4906      	ldr	r1, [pc, #24]	; (4016fc <_get_usart_index+0x50>)
  4016e4:	5c8a      	ldrb	r2, [r1, r2]
  4016e6:	4290      	cmp	r0, r2
  4016e8:	d0f6      	beq.n	4016d8 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4016ea:	3301      	adds	r3, #1
  4016ec:	b2db      	uxtb	r3, r3
  4016ee:	e7eb      	b.n	4016c8 <_get_usart_index+0x1c>
  4016f0:	004046dc 	.word	0x004046dc
  4016f4:	00400cd1 	.word	0x00400cd1
  4016f8:	00401681 	.word	0x00401681
  4016fc:	004046d0 	.word	0x004046d0

00401700 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  401700:	b510      	push	{r4, lr}
	ASSERT(hw);
  401702:	4604      	mov	r4, r0
  401704:	f240 229e 	movw	r2, #670	; 0x29e
  401708:	4911      	ldr	r1, [pc, #68]	; (401750 <_usart_init+0x50>)
  40170a:	3000      	adds	r0, #0
  40170c:	bf18      	it	ne
  40170e:	2001      	movne	r0, #1
  401710:	4b10      	ldr	r3, [pc, #64]	; (401754 <_usart_init+0x54>)
  401712:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  401714:	4620      	mov	r0, r4
  401716:	4b10      	ldr	r3, [pc, #64]	; (401758 <_usart_init+0x58>)
  401718:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  40171a:	4b10      	ldr	r3, [pc, #64]	; (40175c <_usart_init+0x5c>)
  40171c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  401720:	2300      	movs	r3, #0
  401722:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  401724:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  401726:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  401728:	22ac      	movs	r2, #172	; 0xac
  40172a:	6022      	str	r2, [r4, #0]
  40172c:	f44f 7280 	mov.w	r2, #256	; 0x100
  401730:	6022      	str	r2, [r4, #0]
  401732:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401736:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  401738:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  40173c:	0081      	lsls	r1, r0, #2
  40173e:	4a08      	ldr	r2, [pc, #32]	; (401760 <_usart_init+0x60>)
  401740:	440a      	add	r2, r1
  401742:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  401744:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  401746:	4a07      	ldr	r2, [pc, #28]	; (401764 <_usart_init+0x64>)
  401748:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  40174a:	4618      	mov	r0, r3
  40174c:	bd10      	pop	{r4, pc}
  40174e:	bf00      	nop
  401750:	004046dc 	.word	0x004046dc
  401754:	00400cd1 	.word	0x00400cd1
  401758:	004016ad 	.word	0x004016ad
  40175c:	55534100 	.word	0x55534100
  401760:	004046d0 	.word	0x004046d0
  401764:	000100f4 	.word	0x000100f4

00401768 <_usart_sync_init>:
{
  401768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40176a:	460c      	mov	r4, r1
	ASSERT(device);
  40176c:	4e09      	ldr	r6, [pc, #36]	; (401794 <_usart_sync_init+0x2c>)
  40176e:	4607      	mov	r7, r0
  401770:	22bd      	movs	r2, #189	; 0xbd
  401772:	4631      	mov	r1, r6
  401774:	3000      	adds	r0, #0
  401776:	bf18      	it	ne
  401778:	2001      	movne	r0, #1
  40177a:	4d07      	ldr	r5, [pc, #28]	; (401798 <_usart_sync_init+0x30>)
  40177c:	47a8      	blx	r5
	ASSERT(hw);
  40177e:	22be      	movs	r2, #190	; 0xbe
  401780:	4631      	mov	r1, r6
  401782:	1c20      	adds	r0, r4, #0
  401784:	bf18      	it	ne
  401786:	2001      	movne	r0, #1
  401788:	47a8      	blx	r5
	device->hw = hw;
  40178a:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  40178c:	4620      	mov	r0, r4
  40178e:	4b03      	ldr	r3, [pc, #12]	; (40179c <_usart_sync_init+0x34>)
  401790:	4798      	blx	r3
}
  401792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401794:	004046dc 	.word	0x004046dc
  401798:	00400cd1 	.word	0x00400cd1
  40179c:	00401701 	.word	0x00401701

004017a0 <_usart_sync_enable>:
{
  4017a0:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4017a2:	4e0a      	ldr	r6, [pc, #40]	; (4017cc <_usart_sync_enable+0x2c>)
  4017a4:	4604      	mov	r4, r0
  4017a6:	f240 1205 	movw	r2, #261	; 0x105
  4017aa:	4631      	mov	r1, r6
  4017ac:	3000      	adds	r0, #0
  4017ae:	bf18      	it	ne
  4017b0:	2001      	movne	r0, #1
  4017b2:	4d07      	ldr	r5, [pc, #28]	; (4017d0 <_usart_sync_enable+0x30>)
  4017b4:	47a8      	blx	r5
	_usart_enable(device->hw);
  4017b6:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4017b8:	f240 22c7 	movw	r2, #711	; 0x2c7
  4017bc:	4631      	mov	r1, r6
  4017be:	1c20      	adds	r0, r4, #0
  4017c0:	bf18      	it	ne
  4017c2:	2001      	movne	r0, #1
  4017c4:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  4017c6:	2350      	movs	r3, #80	; 0x50
  4017c8:	6023      	str	r3, [r4, #0]
  4017ca:	bd70      	pop	{r4, r5, r6, pc}
  4017cc:	004046dc 	.word	0x004046dc
  4017d0:	00400cd1 	.word	0x00400cd1

004017d4 <_usart_sync_write_byte>:
{
  4017d4:	b538      	push	{r3, r4, r5, lr}
  4017d6:	460c      	mov	r4, r1
	ASSERT(device);
  4017d8:	4605      	mov	r5, r0
  4017da:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4017de:	4904      	ldr	r1, [pc, #16]	; (4017f0 <_usart_sync_write_byte+0x1c>)
  4017e0:	3000      	adds	r0, #0
  4017e2:	bf18      	it	ne
  4017e4:	2001      	movne	r0, #1
  4017e6:	4b03      	ldr	r3, [pc, #12]	; (4017f4 <_usart_sync_write_byte+0x20>)
  4017e8:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  4017ea:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  4017ec:	61dc      	str	r4, [r3, #28]
  4017ee:	bd38      	pop	{r3, r4, r5, pc}
  4017f0:	004046dc 	.word	0x004046dc
  4017f4:	00400cd1 	.word	0x00400cd1

004017f8 <_usart_sync_read_byte>:
{
  4017f8:	b510      	push	{r4, lr}
	ASSERT(device);
  4017fa:	4604      	mov	r4, r0
  4017fc:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  401800:	4904      	ldr	r1, [pc, #16]	; (401814 <_usart_sync_read_byte+0x1c>)
  401802:	3000      	adds	r0, #0
  401804:	bf18      	it	ne
  401806:	2001      	movne	r0, #1
  401808:	4b03      	ldr	r3, [pc, #12]	; (401818 <_usart_sync_read_byte+0x20>)
  40180a:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  40180c:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  40180e:	6998      	ldr	r0, [r3, #24]
}
  401810:	b2c0      	uxtb	r0, r0
  401812:	bd10      	pop	{r4, pc}
  401814:	004046dc 	.word	0x004046dc
  401818:	00400cd1 	.word	0x00400cd1

0040181c <_usart_sync_is_ready_to_send>:
{
  40181c:	b510      	push	{r4, lr}
	ASSERT(device);
  40181e:	4604      	mov	r4, r0
  401820:	f240 12c3 	movw	r2, #451	; 0x1c3
  401824:	4905      	ldr	r1, [pc, #20]	; (40183c <_usart_sync_is_ready_to_send+0x20>)
  401826:	3000      	adds	r0, #0
  401828:	bf18      	it	ne
  40182a:	2001      	movne	r0, #1
  40182c:	4b04      	ldr	r3, [pc, #16]	; (401840 <_usart_sync_is_ready_to_send+0x24>)
  40182e:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  401830:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  401832:	6958      	ldr	r0, [r3, #20]
}
  401834:	f3c0 0040 	ubfx	r0, r0, #1, #1
  401838:	bd10      	pop	{r4, pc}
  40183a:	bf00      	nop
  40183c:	004046dc 	.word	0x004046dc
  401840:	00400cd1 	.word	0x00400cd1

00401844 <_usart_sync_is_transmit_done>:
{
  401844:	b510      	push	{r4, lr}
	ASSERT(device);
  401846:	4604      	mov	r4, r0
  401848:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  40184c:	4905      	ldr	r1, [pc, #20]	; (401864 <_usart_sync_is_transmit_done+0x20>)
  40184e:	3000      	adds	r0, #0
  401850:	bf18      	it	ne
  401852:	2001      	movne	r0, #1
  401854:	4b04      	ldr	r3, [pc, #16]	; (401868 <_usart_sync_is_transmit_done+0x24>)
  401856:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  401858:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  40185a:	6958      	ldr	r0, [r3, #20]
}
  40185c:	f3c0 2040 	ubfx	r0, r0, #9, #1
  401860:	bd10      	pop	{r4, pc}
  401862:	bf00      	nop
  401864:	004046dc 	.word	0x004046dc
  401868:	00400cd1 	.word	0x00400cd1

0040186c <_usart_sync_is_byte_received>:
{
  40186c:	b510      	push	{r4, lr}
	ASSERT(device);
  40186e:	4604      	mov	r4, r0
  401870:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  401874:	4905      	ldr	r1, [pc, #20]	; (40188c <_usart_sync_is_byte_received+0x20>)
  401876:	3000      	adds	r0, #0
  401878:	bf18      	it	ne
  40187a:	2001      	movne	r0, #1
  40187c:	4b04      	ldr	r3, [pc, #16]	; (401890 <_usart_sync_is_byte_received+0x24>)
  40187e:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  401880:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  401882:	6958      	ldr	r0, [r3, #20]
  401884:	f000 0001 	and.w	r0, r0, #1
}
  401888:	bd10      	pop	{r4, pc}
  40188a:	bf00      	nop
  40188c:	004046dc 	.word	0x004046dc
  401890:	00400cd1 	.word	0x00400cd1

00401894 <_usart_get_usart_sync>:
}
  401894:	2000      	movs	r0, #0
  401896:	4770      	bx	lr

00401898 <main>:
#include "arm_math.h"



int main(void)
{
  401898:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  40189a:	4b0a      	ldr	r3, [pc, #40]	; (4018c4 <main+0x2c>)
  40189c:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  40189e:	f44f 7280 	mov.w	r2, #256	; 0x100
  4018a2:	4b09      	ldr	r3, [pc, #36]	; (4018c8 <main+0x30>)
  4018a4:	631a      	str	r2, [r3, #48]	; 0x30
	//Temp 3 currently disabled as pin is shared with edbg com
	
		
	gpio_set_pin_level(PIN_USER_LED, true);
	
	pwm_enable_all();
  4018a6:	4b09      	ldr	r3, [pc, #36]	; (4018cc <main+0x34>)
  4018a8:	4798      	blx	r3
	adc_enable_all();
  4018aa:	4b09      	ldr	r3, [pc, #36]	; (4018d0 <main+0x38>)
  4018ac:	4798      	blx	r3
  4018ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4018b2:	4b08      	ldr	r3, [pc, #32]	; (4018d4 <main+0x3c>)
  4018b4:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);
	
	timer_start(&ENCODER_A);
  4018b6:	4808      	ldr	r0, [pc, #32]	; (4018d8 <main+0x40>)
  4018b8:	4c08      	ldr	r4, [pc, #32]	; (4018dc <main+0x44>)
  4018ba:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  4018bc:	4808      	ldr	r0, [pc, #32]	; (4018e0 <main+0x48>)
  4018be:	47a0      	blx	r4
  4018c0:	e7fe      	b.n	4018c0 <main+0x28>
  4018c2:	bf00      	nop
  4018c4:	004001d5 	.word	0x004001d5
  4018c8:	400e1200 	.word	0x400e1200
  4018cc:	00400265 	.word	0x00400265
  4018d0:	004001e9 	.word	0x004001e9
  4018d4:	400e0e00 	.word	0x400e0e00
  4018d8:	20400328 	.word	0x20400328
  4018dc:	00400b51 	.word	0x00400b51
  4018e0:	204002d8 	.word	0x204002d8

004018e4 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  4018e4:	b958      	cbnz	r0, 4018fe <_read+0x1a>
{
  4018e6:	b508      	push	{r3, lr}
  4018e8:	460b      	mov	r3, r1
  4018ea:	4611      	mov	r1, r2
  4018ec:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  4018ee:	4b05      	ldr	r3, [pc, #20]	; (401904 <_read+0x20>)
  4018f0:	4798      	blx	r3
	if (n < 0) {
  4018f2:	2800      	cmp	r0, #0
  4018f4:	db00      	blt.n	4018f8 <_read+0x14>
		return -1;
	}

	return n;
}
  4018f6:	bd08      	pop	{r3, pc}
		return -1;
  4018f8:	f04f 30ff 	mov.w	r0, #4294967295
  4018fc:	bd08      	pop	{r3, pc}
		return -1;
  4018fe:	f04f 30ff 	mov.w	r0, #4294967295
  401902:	4770      	bx	lr
  401904:	0040195d 	.word	0x0040195d

00401908 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  401908:	3801      	subs	r0, #1
  40190a:	2802      	cmp	r0, #2
  40190c:	d80b      	bhi.n	401926 <_write+0x1e>
{
  40190e:	b508      	push	{r3, lr}
  401910:	460b      	mov	r3, r1
  401912:	4611      	mov	r1, r2
  401914:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  401916:	4b05      	ldr	r3, [pc, #20]	; (40192c <_write+0x24>)
  401918:	4798      	blx	r3
	if (n < 0) {
  40191a:	2800      	cmp	r0, #0
  40191c:	db00      	blt.n	401920 <_write+0x18>
		return -1;
	}

	return n;
}
  40191e:	bd08      	pop	{r3, pc}
		return -1;
  401920:	f04f 30ff 	mov.w	r0, #4294967295
  401924:	bd08      	pop	{r3, pc}
		return -1;
  401926:	f04f 30ff 	mov.w	r0, #4294967295
  40192a:	4770      	bx	lr
  40192c:	00401981 	.word	0x00401981

00401930 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  401930:	b570      	push	{r4, r5, r6, lr}
  401932:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  401934:	4d06      	ldr	r5, [pc, #24]	; (401950 <stdio_io_init+0x20>)
  401936:	682b      	ldr	r3, [r5, #0]
  401938:	2100      	movs	r1, #0
  40193a:	6898      	ldr	r0, [r3, #8]
  40193c:	4c05      	ldr	r4, [pc, #20]	; (401954 <stdio_io_init+0x24>)
  40193e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  401940:	682b      	ldr	r3, [r5, #0]
  401942:	2100      	movs	r1, #0
  401944:	6858      	ldr	r0, [r3, #4]
  401946:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  401948:	4b03      	ldr	r3, [pc, #12]	; (401958 <stdio_io_init+0x28>)
  40194a:	601e      	str	r6, [r3, #0]
  40194c:	bd70      	pop	{r4, r5, r6, pc}
  40194e:	bf00      	nop
  401950:	20400048 	.word	0x20400048
  401954:	004029a5 	.word	0x004029a5
  401958:	204002b0 	.word	0x204002b0

0040195c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  40195c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40195e:	4b06      	ldr	r3, [pc, #24]	; (401978 <stdio_io_read+0x1c>)
  401960:	681b      	ldr	r3, [r3, #0]
  401962:	b133      	cbz	r3, 401972 <stdio_io_read+0x16>
  401964:	460a      	mov	r2, r1
  401966:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  401968:	b292      	uxth	r2, r2
  40196a:	4618      	mov	r0, r3
  40196c:	4b03      	ldr	r3, [pc, #12]	; (40197c <stdio_io_read+0x20>)
  40196e:	4798      	blx	r3
  401970:	bd08      	pop	{r3, pc}
		return 0;
  401972:	2000      	movs	r0, #0
}
  401974:	bd08      	pop	{r3, pc}
  401976:	bf00      	nop
  401978:	204002b0 	.word	0x204002b0
  40197c:	00400969 	.word	0x00400969

00401980 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  401980:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401982:	4b06      	ldr	r3, [pc, #24]	; (40199c <stdio_io_write+0x1c>)
  401984:	681b      	ldr	r3, [r3, #0]
  401986:	b133      	cbz	r3, 401996 <stdio_io_write+0x16>
  401988:	460a      	mov	r2, r1
  40198a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  40198c:	b292      	uxth	r2, r2
  40198e:	4618      	mov	r0, r3
  401990:	4b03      	ldr	r3, [pc, #12]	; (4019a0 <stdio_io_write+0x20>)
  401992:	4798      	blx	r3
  401994:	bd08      	pop	{r3, pc}
		return 0;
  401996:	2000      	movs	r0, #0
}
  401998:	bd08      	pop	{r3, pc}
  40199a:	bf00      	nop
  40199c:	204002b0 	.word	0x204002b0
  4019a0:	00400939 	.word	0x00400939

004019a4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  4019a4:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  4019a6:	4c04      	ldr	r4, [pc, #16]	; (4019b8 <stdio_redirect_init+0x14>)
  4019a8:	4620      	mov	r0, r4
  4019aa:	4b04      	ldr	r3, [pc, #16]	; (4019bc <stdio_redirect_init+0x18>)
  4019ac:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  4019ae:	4620      	mov	r0, r4
  4019b0:	4b03      	ldr	r3, [pc, #12]	; (4019c0 <stdio_redirect_init+0x1c>)
  4019b2:	4798      	blx	r3
  4019b4:	bd10      	pop	{r4, pc}
  4019b6:	bf00      	nop
  4019b8:	2040031c 	.word	0x2040031c
  4019bc:	00400ca5 	.word	0x00400ca5
  4019c0:	00401931 	.word	0x00401931

004019c4 <__aeabi_drsub>:
  4019c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4019c8:	e002      	b.n	4019d0 <__adddf3>
  4019ca:	bf00      	nop

004019cc <__aeabi_dsub>:
  4019cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004019d0 <__adddf3>:
  4019d0:	b530      	push	{r4, r5, lr}
  4019d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4019d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4019da:	ea94 0f05 	teq	r4, r5
  4019de:	bf08      	it	eq
  4019e0:	ea90 0f02 	teqeq	r0, r2
  4019e4:	bf1f      	itttt	ne
  4019e6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4019ea:	ea55 0c02 	orrsne.w	ip, r5, r2
  4019ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4019f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4019f6:	f000 80e2 	beq.w	401bbe <__adddf3+0x1ee>
  4019fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4019fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401a02:	bfb8      	it	lt
  401a04:	426d      	neglt	r5, r5
  401a06:	dd0c      	ble.n	401a22 <__adddf3+0x52>
  401a08:	442c      	add	r4, r5
  401a0a:	ea80 0202 	eor.w	r2, r0, r2
  401a0e:	ea81 0303 	eor.w	r3, r1, r3
  401a12:	ea82 0000 	eor.w	r0, r2, r0
  401a16:	ea83 0101 	eor.w	r1, r3, r1
  401a1a:	ea80 0202 	eor.w	r2, r0, r2
  401a1e:	ea81 0303 	eor.w	r3, r1, r3
  401a22:	2d36      	cmp	r5, #54	; 0x36
  401a24:	bf88      	it	hi
  401a26:	bd30      	pophi	{r4, r5, pc}
  401a28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401a2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401a30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401a34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401a38:	d002      	beq.n	401a40 <__adddf3+0x70>
  401a3a:	4240      	negs	r0, r0
  401a3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401a40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401a44:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401a48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401a4c:	d002      	beq.n	401a54 <__adddf3+0x84>
  401a4e:	4252      	negs	r2, r2
  401a50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401a54:	ea94 0f05 	teq	r4, r5
  401a58:	f000 80a7 	beq.w	401baa <__adddf3+0x1da>
  401a5c:	f1a4 0401 	sub.w	r4, r4, #1
  401a60:	f1d5 0e20 	rsbs	lr, r5, #32
  401a64:	db0d      	blt.n	401a82 <__adddf3+0xb2>
  401a66:	fa02 fc0e 	lsl.w	ip, r2, lr
  401a6a:	fa22 f205 	lsr.w	r2, r2, r5
  401a6e:	1880      	adds	r0, r0, r2
  401a70:	f141 0100 	adc.w	r1, r1, #0
  401a74:	fa03 f20e 	lsl.w	r2, r3, lr
  401a78:	1880      	adds	r0, r0, r2
  401a7a:	fa43 f305 	asr.w	r3, r3, r5
  401a7e:	4159      	adcs	r1, r3
  401a80:	e00e      	b.n	401aa0 <__adddf3+0xd0>
  401a82:	f1a5 0520 	sub.w	r5, r5, #32
  401a86:	f10e 0e20 	add.w	lr, lr, #32
  401a8a:	2a01      	cmp	r2, #1
  401a8c:	fa03 fc0e 	lsl.w	ip, r3, lr
  401a90:	bf28      	it	cs
  401a92:	f04c 0c02 	orrcs.w	ip, ip, #2
  401a96:	fa43 f305 	asr.w	r3, r3, r5
  401a9a:	18c0      	adds	r0, r0, r3
  401a9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401aa0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401aa4:	d507      	bpl.n	401ab6 <__adddf3+0xe6>
  401aa6:	f04f 0e00 	mov.w	lr, #0
  401aaa:	f1dc 0c00 	rsbs	ip, ip, #0
  401aae:	eb7e 0000 	sbcs.w	r0, lr, r0
  401ab2:	eb6e 0101 	sbc.w	r1, lr, r1
  401ab6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401aba:	d31b      	bcc.n	401af4 <__adddf3+0x124>
  401abc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401ac0:	d30c      	bcc.n	401adc <__adddf3+0x10c>
  401ac2:	0849      	lsrs	r1, r1, #1
  401ac4:	ea5f 0030 	movs.w	r0, r0, rrx
  401ac8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401acc:	f104 0401 	add.w	r4, r4, #1
  401ad0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401ad4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401ad8:	f080 809a 	bcs.w	401c10 <__adddf3+0x240>
  401adc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401ae0:	bf08      	it	eq
  401ae2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401ae6:	f150 0000 	adcs.w	r0, r0, #0
  401aea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401aee:	ea41 0105 	orr.w	r1, r1, r5
  401af2:	bd30      	pop	{r4, r5, pc}
  401af4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401af8:	4140      	adcs	r0, r0
  401afa:	eb41 0101 	adc.w	r1, r1, r1
  401afe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401b02:	f1a4 0401 	sub.w	r4, r4, #1
  401b06:	d1e9      	bne.n	401adc <__adddf3+0x10c>
  401b08:	f091 0f00 	teq	r1, #0
  401b0c:	bf04      	itt	eq
  401b0e:	4601      	moveq	r1, r0
  401b10:	2000      	moveq	r0, #0
  401b12:	fab1 f381 	clz	r3, r1
  401b16:	bf08      	it	eq
  401b18:	3320      	addeq	r3, #32
  401b1a:	f1a3 030b 	sub.w	r3, r3, #11
  401b1e:	f1b3 0220 	subs.w	r2, r3, #32
  401b22:	da0c      	bge.n	401b3e <__adddf3+0x16e>
  401b24:	320c      	adds	r2, #12
  401b26:	dd08      	ble.n	401b3a <__adddf3+0x16a>
  401b28:	f102 0c14 	add.w	ip, r2, #20
  401b2c:	f1c2 020c 	rsb	r2, r2, #12
  401b30:	fa01 f00c 	lsl.w	r0, r1, ip
  401b34:	fa21 f102 	lsr.w	r1, r1, r2
  401b38:	e00c      	b.n	401b54 <__adddf3+0x184>
  401b3a:	f102 0214 	add.w	r2, r2, #20
  401b3e:	bfd8      	it	le
  401b40:	f1c2 0c20 	rsble	ip, r2, #32
  401b44:	fa01 f102 	lsl.w	r1, r1, r2
  401b48:	fa20 fc0c 	lsr.w	ip, r0, ip
  401b4c:	bfdc      	itt	le
  401b4e:	ea41 010c 	orrle.w	r1, r1, ip
  401b52:	4090      	lslle	r0, r2
  401b54:	1ae4      	subs	r4, r4, r3
  401b56:	bfa2      	ittt	ge
  401b58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401b5c:	4329      	orrge	r1, r5
  401b5e:	bd30      	popge	{r4, r5, pc}
  401b60:	ea6f 0404 	mvn.w	r4, r4
  401b64:	3c1f      	subs	r4, #31
  401b66:	da1c      	bge.n	401ba2 <__adddf3+0x1d2>
  401b68:	340c      	adds	r4, #12
  401b6a:	dc0e      	bgt.n	401b8a <__adddf3+0x1ba>
  401b6c:	f104 0414 	add.w	r4, r4, #20
  401b70:	f1c4 0220 	rsb	r2, r4, #32
  401b74:	fa20 f004 	lsr.w	r0, r0, r4
  401b78:	fa01 f302 	lsl.w	r3, r1, r2
  401b7c:	ea40 0003 	orr.w	r0, r0, r3
  401b80:	fa21 f304 	lsr.w	r3, r1, r4
  401b84:	ea45 0103 	orr.w	r1, r5, r3
  401b88:	bd30      	pop	{r4, r5, pc}
  401b8a:	f1c4 040c 	rsb	r4, r4, #12
  401b8e:	f1c4 0220 	rsb	r2, r4, #32
  401b92:	fa20 f002 	lsr.w	r0, r0, r2
  401b96:	fa01 f304 	lsl.w	r3, r1, r4
  401b9a:	ea40 0003 	orr.w	r0, r0, r3
  401b9e:	4629      	mov	r1, r5
  401ba0:	bd30      	pop	{r4, r5, pc}
  401ba2:	fa21 f004 	lsr.w	r0, r1, r4
  401ba6:	4629      	mov	r1, r5
  401ba8:	bd30      	pop	{r4, r5, pc}
  401baa:	f094 0f00 	teq	r4, #0
  401bae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401bb2:	bf06      	itte	eq
  401bb4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401bb8:	3401      	addeq	r4, #1
  401bba:	3d01      	subne	r5, #1
  401bbc:	e74e      	b.n	401a5c <__adddf3+0x8c>
  401bbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401bc2:	bf18      	it	ne
  401bc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401bc8:	d029      	beq.n	401c1e <__adddf3+0x24e>
  401bca:	ea94 0f05 	teq	r4, r5
  401bce:	bf08      	it	eq
  401bd0:	ea90 0f02 	teqeq	r0, r2
  401bd4:	d005      	beq.n	401be2 <__adddf3+0x212>
  401bd6:	ea54 0c00 	orrs.w	ip, r4, r0
  401bda:	bf04      	itt	eq
  401bdc:	4619      	moveq	r1, r3
  401bde:	4610      	moveq	r0, r2
  401be0:	bd30      	pop	{r4, r5, pc}
  401be2:	ea91 0f03 	teq	r1, r3
  401be6:	bf1e      	ittt	ne
  401be8:	2100      	movne	r1, #0
  401bea:	2000      	movne	r0, #0
  401bec:	bd30      	popne	{r4, r5, pc}
  401bee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401bf2:	d105      	bne.n	401c00 <__adddf3+0x230>
  401bf4:	0040      	lsls	r0, r0, #1
  401bf6:	4149      	adcs	r1, r1
  401bf8:	bf28      	it	cs
  401bfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401bfe:	bd30      	pop	{r4, r5, pc}
  401c00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401c04:	bf3c      	itt	cc
  401c06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401c0a:	bd30      	popcc	{r4, r5, pc}
  401c0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401c10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401c14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401c18:	f04f 0000 	mov.w	r0, #0
  401c1c:	bd30      	pop	{r4, r5, pc}
  401c1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401c22:	bf1a      	itte	ne
  401c24:	4619      	movne	r1, r3
  401c26:	4610      	movne	r0, r2
  401c28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401c2c:	bf1c      	itt	ne
  401c2e:	460b      	movne	r3, r1
  401c30:	4602      	movne	r2, r0
  401c32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401c36:	bf06      	itte	eq
  401c38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401c3c:	ea91 0f03 	teqeq	r1, r3
  401c40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401c44:	bd30      	pop	{r4, r5, pc}
  401c46:	bf00      	nop

00401c48 <__aeabi_ui2d>:
  401c48:	f090 0f00 	teq	r0, #0
  401c4c:	bf04      	itt	eq
  401c4e:	2100      	moveq	r1, #0
  401c50:	4770      	bxeq	lr
  401c52:	b530      	push	{r4, r5, lr}
  401c54:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401c58:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401c5c:	f04f 0500 	mov.w	r5, #0
  401c60:	f04f 0100 	mov.w	r1, #0
  401c64:	e750      	b.n	401b08 <__adddf3+0x138>
  401c66:	bf00      	nop

00401c68 <__aeabi_i2d>:
  401c68:	f090 0f00 	teq	r0, #0
  401c6c:	bf04      	itt	eq
  401c6e:	2100      	moveq	r1, #0
  401c70:	4770      	bxeq	lr
  401c72:	b530      	push	{r4, r5, lr}
  401c74:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401c78:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401c7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401c80:	bf48      	it	mi
  401c82:	4240      	negmi	r0, r0
  401c84:	f04f 0100 	mov.w	r1, #0
  401c88:	e73e      	b.n	401b08 <__adddf3+0x138>
  401c8a:	bf00      	nop

00401c8c <__aeabi_f2d>:
  401c8c:	0042      	lsls	r2, r0, #1
  401c8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401c92:	ea4f 0131 	mov.w	r1, r1, rrx
  401c96:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401c9a:	bf1f      	itttt	ne
  401c9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401ca0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401ca4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401ca8:	4770      	bxne	lr
  401caa:	f092 0f00 	teq	r2, #0
  401cae:	bf14      	ite	ne
  401cb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401cb4:	4770      	bxeq	lr
  401cb6:	b530      	push	{r4, r5, lr}
  401cb8:	f44f 7460 	mov.w	r4, #896	; 0x380
  401cbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401cc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401cc4:	e720      	b.n	401b08 <__adddf3+0x138>
  401cc6:	bf00      	nop

00401cc8 <__aeabi_ul2d>:
  401cc8:	ea50 0201 	orrs.w	r2, r0, r1
  401ccc:	bf08      	it	eq
  401cce:	4770      	bxeq	lr
  401cd0:	b530      	push	{r4, r5, lr}
  401cd2:	f04f 0500 	mov.w	r5, #0
  401cd6:	e00a      	b.n	401cee <__aeabi_l2d+0x16>

00401cd8 <__aeabi_l2d>:
  401cd8:	ea50 0201 	orrs.w	r2, r0, r1
  401cdc:	bf08      	it	eq
  401cde:	4770      	bxeq	lr
  401ce0:	b530      	push	{r4, r5, lr}
  401ce2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  401ce6:	d502      	bpl.n	401cee <__aeabi_l2d+0x16>
  401ce8:	4240      	negs	r0, r0
  401cea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401cee:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401cf2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401cf6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401cfa:	f43f aedc 	beq.w	401ab6 <__adddf3+0xe6>
  401cfe:	f04f 0203 	mov.w	r2, #3
  401d02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401d06:	bf18      	it	ne
  401d08:	3203      	addne	r2, #3
  401d0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401d0e:	bf18      	it	ne
  401d10:	3203      	addne	r2, #3
  401d12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401d16:	f1c2 0320 	rsb	r3, r2, #32
  401d1a:	fa00 fc03 	lsl.w	ip, r0, r3
  401d1e:	fa20 f002 	lsr.w	r0, r0, r2
  401d22:	fa01 fe03 	lsl.w	lr, r1, r3
  401d26:	ea40 000e 	orr.w	r0, r0, lr
  401d2a:	fa21 f102 	lsr.w	r1, r1, r2
  401d2e:	4414      	add	r4, r2
  401d30:	e6c1      	b.n	401ab6 <__adddf3+0xe6>
  401d32:	bf00      	nop

00401d34 <__aeabi_dmul>:
  401d34:	b570      	push	{r4, r5, r6, lr}
  401d36:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401d3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401d3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401d42:	bf1d      	ittte	ne
  401d44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401d48:	ea94 0f0c 	teqne	r4, ip
  401d4c:	ea95 0f0c 	teqne	r5, ip
  401d50:	f000 f8de 	bleq	401f10 <__aeabi_dmul+0x1dc>
  401d54:	442c      	add	r4, r5
  401d56:	ea81 0603 	eor.w	r6, r1, r3
  401d5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401d5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401d62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  401d66:	bf18      	it	ne
  401d68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401d6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401d74:	d038      	beq.n	401de8 <__aeabi_dmul+0xb4>
  401d76:	fba0 ce02 	umull	ip, lr, r0, r2
  401d7a:	f04f 0500 	mov.w	r5, #0
  401d7e:	fbe1 e502 	umlal	lr, r5, r1, r2
  401d82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  401d86:	fbe0 e503 	umlal	lr, r5, r0, r3
  401d8a:	f04f 0600 	mov.w	r6, #0
  401d8e:	fbe1 5603 	umlal	r5, r6, r1, r3
  401d92:	f09c 0f00 	teq	ip, #0
  401d96:	bf18      	it	ne
  401d98:	f04e 0e01 	orrne.w	lr, lr, #1
  401d9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  401da0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401da4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  401da8:	d204      	bcs.n	401db4 <__aeabi_dmul+0x80>
  401daa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  401dae:	416d      	adcs	r5, r5
  401db0:	eb46 0606 	adc.w	r6, r6, r6
  401db4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  401db8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  401dbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  401dc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  401dc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  401dc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401dcc:	bf88      	it	hi
  401dce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401dd2:	d81e      	bhi.n	401e12 <__aeabi_dmul+0xde>
  401dd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  401dd8:	bf08      	it	eq
  401dda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  401dde:	f150 0000 	adcs.w	r0, r0, #0
  401de2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401de6:	bd70      	pop	{r4, r5, r6, pc}
  401de8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  401dec:	ea46 0101 	orr.w	r1, r6, r1
  401df0:	ea40 0002 	orr.w	r0, r0, r2
  401df4:	ea81 0103 	eor.w	r1, r1, r3
  401df8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  401dfc:	bfc2      	ittt	gt
  401dfe:	ebd4 050c 	rsbsgt	r5, r4, ip
  401e02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401e06:	bd70      	popgt	{r4, r5, r6, pc}
  401e08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401e0c:	f04f 0e00 	mov.w	lr, #0
  401e10:	3c01      	subs	r4, #1
  401e12:	f300 80ab 	bgt.w	401f6c <__aeabi_dmul+0x238>
  401e16:	f114 0f36 	cmn.w	r4, #54	; 0x36
  401e1a:	bfde      	ittt	le
  401e1c:	2000      	movle	r0, #0
  401e1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  401e22:	bd70      	pople	{r4, r5, r6, pc}
  401e24:	f1c4 0400 	rsb	r4, r4, #0
  401e28:	3c20      	subs	r4, #32
  401e2a:	da35      	bge.n	401e98 <__aeabi_dmul+0x164>
  401e2c:	340c      	adds	r4, #12
  401e2e:	dc1b      	bgt.n	401e68 <__aeabi_dmul+0x134>
  401e30:	f104 0414 	add.w	r4, r4, #20
  401e34:	f1c4 0520 	rsb	r5, r4, #32
  401e38:	fa00 f305 	lsl.w	r3, r0, r5
  401e3c:	fa20 f004 	lsr.w	r0, r0, r4
  401e40:	fa01 f205 	lsl.w	r2, r1, r5
  401e44:	ea40 0002 	orr.w	r0, r0, r2
  401e48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  401e4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401e50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401e54:	fa21 f604 	lsr.w	r6, r1, r4
  401e58:	eb42 0106 	adc.w	r1, r2, r6
  401e5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401e60:	bf08      	it	eq
  401e62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401e66:	bd70      	pop	{r4, r5, r6, pc}
  401e68:	f1c4 040c 	rsb	r4, r4, #12
  401e6c:	f1c4 0520 	rsb	r5, r4, #32
  401e70:	fa00 f304 	lsl.w	r3, r0, r4
  401e74:	fa20 f005 	lsr.w	r0, r0, r5
  401e78:	fa01 f204 	lsl.w	r2, r1, r4
  401e7c:	ea40 0002 	orr.w	r0, r0, r2
  401e80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401e84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401e88:	f141 0100 	adc.w	r1, r1, #0
  401e8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401e90:	bf08      	it	eq
  401e92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401e96:	bd70      	pop	{r4, r5, r6, pc}
  401e98:	f1c4 0520 	rsb	r5, r4, #32
  401e9c:	fa00 f205 	lsl.w	r2, r0, r5
  401ea0:	ea4e 0e02 	orr.w	lr, lr, r2
  401ea4:	fa20 f304 	lsr.w	r3, r0, r4
  401ea8:	fa01 f205 	lsl.w	r2, r1, r5
  401eac:	ea43 0302 	orr.w	r3, r3, r2
  401eb0:	fa21 f004 	lsr.w	r0, r1, r4
  401eb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401eb8:	fa21 f204 	lsr.w	r2, r1, r4
  401ebc:	ea20 0002 	bic.w	r0, r0, r2
  401ec0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  401ec4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401ec8:	bf08      	it	eq
  401eca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401ece:	bd70      	pop	{r4, r5, r6, pc}
  401ed0:	f094 0f00 	teq	r4, #0
  401ed4:	d10f      	bne.n	401ef6 <__aeabi_dmul+0x1c2>
  401ed6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  401eda:	0040      	lsls	r0, r0, #1
  401edc:	eb41 0101 	adc.w	r1, r1, r1
  401ee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401ee4:	bf08      	it	eq
  401ee6:	3c01      	subeq	r4, #1
  401ee8:	d0f7      	beq.n	401eda <__aeabi_dmul+0x1a6>
  401eea:	ea41 0106 	orr.w	r1, r1, r6
  401eee:	f095 0f00 	teq	r5, #0
  401ef2:	bf18      	it	ne
  401ef4:	4770      	bxne	lr
  401ef6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  401efa:	0052      	lsls	r2, r2, #1
  401efc:	eb43 0303 	adc.w	r3, r3, r3
  401f00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  401f04:	bf08      	it	eq
  401f06:	3d01      	subeq	r5, #1
  401f08:	d0f7      	beq.n	401efa <__aeabi_dmul+0x1c6>
  401f0a:	ea43 0306 	orr.w	r3, r3, r6
  401f0e:	4770      	bx	lr
  401f10:	ea94 0f0c 	teq	r4, ip
  401f14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401f18:	bf18      	it	ne
  401f1a:	ea95 0f0c 	teqne	r5, ip
  401f1e:	d00c      	beq.n	401f3a <__aeabi_dmul+0x206>
  401f20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401f24:	bf18      	it	ne
  401f26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401f2a:	d1d1      	bne.n	401ed0 <__aeabi_dmul+0x19c>
  401f2c:	ea81 0103 	eor.w	r1, r1, r3
  401f30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401f34:	f04f 0000 	mov.w	r0, #0
  401f38:	bd70      	pop	{r4, r5, r6, pc}
  401f3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401f3e:	bf06      	itte	eq
  401f40:	4610      	moveq	r0, r2
  401f42:	4619      	moveq	r1, r3
  401f44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401f48:	d019      	beq.n	401f7e <__aeabi_dmul+0x24a>
  401f4a:	ea94 0f0c 	teq	r4, ip
  401f4e:	d102      	bne.n	401f56 <__aeabi_dmul+0x222>
  401f50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  401f54:	d113      	bne.n	401f7e <__aeabi_dmul+0x24a>
  401f56:	ea95 0f0c 	teq	r5, ip
  401f5a:	d105      	bne.n	401f68 <__aeabi_dmul+0x234>
  401f5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  401f60:	bf1c      	itt	ne
  401f62:	4610      	movne	r0, r2
  401f64:	4619      	movne	r1, r3
  401f66:	d10a      	bne.n	401f7e <__aeabi_dmul+0x24a>
  401f68:	ea81 0103 	eor.w	r1, r1, r3
  401f6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401f70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401f74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401f78:	f04f 0000 	mov.w	r0, #0
  401f7c:	bd70      	pop	{r4, r5, r6, pc}
  401f7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401f82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  401f86:	bd70      	pop	{r4, r5, r6, pc}

00401f88 <__aeabi_ddiv>:
  401f88:	b570      	push	{r4, r5, r6, lr}
  401f8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401f8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401f92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401f96:	bf1d      	ittte	ne
  401f98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401f9c:	ea94 0f0c 	teqne	r4, ip
  401fa0:	ea95 0f0c 	teqne	r5, ip
  401fa4:	f000 f8a7 	bleq	4020f6 <__aeabi_ddiv+0x16e>
  401fa8:	eba4 0405 	sub.w	r4, r4, r5
  401fac:	ea81 0e03 	eor.w	lr, r1, r3
  401fb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401fb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401fb8:	f000 8088 	beq.w	4020cc <__aeabi_ddiv+0x144>
  401fbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401fc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  401fc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  401fc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  401fcc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  401fd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  401fd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  401fd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  401fdc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  401fe0:	429d      	cmp	r5, r3
  401fe2:	bf08      	it	eq
  401fe4:	4296      	cmpeq	r6, r2
  401fe6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  401fea:	f504 7440 	add.w	r4, r4, #768	; 0x300
  401fee:	d202      	bcs.n	401ff6 <__aeabi_ddiv+0x6e>
  401ff0:	085b      	lsrs	r3, r3, #1
  401ff2:	ea4f 0232 	mov.w	r2, r2, rrx
  401ff6:	1ab6      	subs	r6, r6, r2
  401ff8:	eb65 0503 	sbc.w	r5, r5, r3
  401ffc:	085b      	lsrs	r3, r3, #1
  401ffe:	ea4f 0232 	mov.w	r2, r2, rrx
  402002:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402006:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40200a:	ebb6 0e02 	subs.w	lr, r6, r2
  40200e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402012:	bf22      	ittt	cs
  402014:	1ab6      	subcs	r6, r6, r2
  402016:	4675      	movcs	r5, lr
  402018:	ea40 000c 	orrcs.w	r0, r0, ip
  40201c:	085b      	lsrs	r3, r3, #1
  40201e:	ea4f 0232 	mov.w	r2, r2, rrx
  402022:	ebb6 0e02 	subs.w	lr, r6, r2
  402026:	eb75 0e03 	sbcs.w	lr, r5, r3
  40202a:	bf22      	ittt	cs
  40202c:	1ab6      	subcs	r6, r6, r2
  40202e:	4675      	movcs	r5, lr
  402030:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402034:	085b      	lsrs	r3, r3, #1
  402036:	ea4f 0232 	mov.w	r2, r2, rrx
  40203a:	ebb6 0e02 	subs.w	lr, r6, r2
  40203e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402042:	bf22      	ittt	cs
  402044:	1ab6      	subcs	r6, r6, r2
  402046:	4675      	movcs	r5, lr
  402048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40204c:	085b      	lsrs	r3, r3, #1
  40204e:	ea4f 0232 	mov.w	r2, r2, rrx
  402052:	ebb6 0e02 	subs.w	lr, r6, r2
  402056:	eb75 0e03 	sbcs.w	lr, r5, r3
  40205a:	bf22      	ittt	cs
  40205c:	1ab6      	subcs	r6, r6, r2
  40205e:	4675      	movcs	r5, lr
  402060:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402064:	ea55 0e06 	orrs.w	lr, r5, r6
  402068:	d018      	beq.n	40209c <__aeabi_ddiv+0x114>
  40206a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40206e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  402072:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402076:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40207a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40207e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  402082:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402086:	d1c0      	bne.n	40200a <__aeabi_ddiv+0x82>
  402088:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40208c:	d10b      	bne.n	4020a6 <__aeabi_ddiv+0x11e>
  40208e:	ea41 0100 	orr.w	r1, r1, r0
  402092:	f04f 0000 	mov.w	r0, #0
  402096:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40209a:	e7b6      	b.n	40200a <__aeabi_ddiv+0x82>
  40209c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4020a0:	bf04      	itt	eq
  4020a2:	4301      	orreq	r1, r0
  4020a4:	2000      	moveq	r0, #0
  4020a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4020aa:	bf88      	it	hi
  4020ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4020b0:	f63f aeaf 	bhi.w	401e12 <__aeabi_dmul+0xde>
  4020b4:	ebb5 0c03 	subs.w	ip, r5, r3
  4020b8:	bf04      	itt	eq
  4020ba:	ebb6 0c02 	subseq.w	ip, r6, r2
  4020be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4020c2:	f150 0000 	adcs.w	r0, r0, #0
  4020c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4020ca:	bd70      	pop	{r4, r5, r6, pc}
  4020cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4020d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4020d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4020d8:	bfc2      	ittt	gt
  4020da:	ebd4 050c 	rsbsgt	r5, r4, ip
  4020de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4020e2:	bd70      	popgt	{r4, r5, r6, pc}
  4020e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4020e8:	f04f 0e00 	mov.w	lr, #0
  4020ec:	3c01      	subs	r4, #1
  4020ee:	e690      	b.n	401e12 <__aeabi_dmul+0xde>
  4020f0:	ea45 0e06 	orr.w	lr, r5, r6
  4020f4:	e68d      	b.n	401e12 <__aeabi_dmul+0xde>
  4020f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4020fa:	ea94 0f0c 	teq	r4, ip
  4020fe:	bf08      	it	eq
  402100:	ea95 0f0c 	teqeq	r5, ip
  402104:	f43f af3b 	beq.w	401f7e <__aeabi_dmul+0x24a>
  402108:	ea94 0f0c 	teq	r4, ip
  40210c:	d10a      	bne.n	402124 <__aeabi_ddiv+0x19c>
  40210e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402112:	f47f af34 	bne.w	401f7e <__aeabi_dmul+0x24a>
  402116:	ea95 0f0c 	teq	r5, ip
  40211a:	f47f af25 	bne.w	401f68 <__aeabi_dmul+0x234>
  40211e:	4610      	mov	r0, r2
  402120:	4619      	mov	r1, r3
  402122:	e72c      	b.n	401f7e <__aeabi_dmul+0x24a>
  402124:	ea95 0f0c 	teq	r5, ip
  402128:	d106      	bne.n	402138 <__aeabi_ddiv+0x1b0>
  40212a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40212e:	f43f aefd 	beq.w	401f2c <__aeabi_dmul+0x1f8>
  402132:	4610      	mov	r0, r2
  402134:	4619      	mov	r1, r3
  402136:	e722      	b.n	401f7e <__aeabi_dmul+0x24a>
  402138:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40213c:	bf18      	it	ne
  40213e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402142:	f47f aec5 	bne.w	401ed0 <__aeabi_dmul+0x19c>
  402146:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40214a:	f47f af0d 	bne.w	401f68 <__aeabi_dmul+0x234>
  40214e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  402152:	f47f aeeb 	bne.w	401f2c <__aeabi_dmul+0x1f8>
  402156:	e712      	b.n	401f7e <__aeabi_dmul+0x24a>

00402158 <__gedf2>:
  402158:	f04f 3cff 	mov.w	ip, #4294967295
  40215c:	e006      	b.n	40216c <__cmpdf2+0x4>
  40215e:	bf00      	nop

00402160 <__ledf2>:
  402160:	f04f 0c01 	mov.w	ip, #1
  402164:	e002      	b.n	40216c <__cmpdf2+0x4>
  402166:	bf00      	nop

00402168 <__cmpdf2>:
  402168:	f04f 0c01 	mov.w	ip, #1
  40216c:	f84d cd04 	str.w	ip, [sp, #-4]!
  402170:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402174:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402178:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40217c:	bf18      	it	ne
  40217e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  402182:	d01b      	beq.n	4021bc <__cmpdf2+0x54>
  402184:	b001      	add	sp, #4
  402186:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40218a:	bf0c      	ite	eq
  40218c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  402190:	ea91 0f03 	teqne	r1, r3
  402194:	bf02      	ittt	eq
  402196:	ea90 0f02 	teqeq	r0, r2
  40219a:	2000      	moveq	r0, #0
  40219c:	4770      	bxeq	lr
  40219e:	f110 0f00 	cmn.w	r0, #0
  4021a2:	ea91 0f03 	teq	r1, r3
  4021a6:	bf58      	it	pl
  4021a8:	4299      	cmppl	r1, r3
  4021aa:	bf08      	it	eq
  4021ac:	4290      	cmpeq	r0, r2
  4021ae:	bf2c      	ite	cs
  4021b0:	17d8      	asrcs	r0, r3, #31
  4021b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4021b6:	f040 0001 	orr.w	r0, r0, #1
  4021ba:	4770      	bx	lr
  4021bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4021c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4021c4:	d102      	bne.n	4021cc <__cmpdf2+0x64>
  4021c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4021ca:	d107      	bne.n	4021dc <__cmpdf2+0x74>
  4021cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4021d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4021d4:	d1d6      	bne.n	402184 <__cmpdf2+0x1c>
  4021d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4021da:	d0d3      	beq.n	402184 <__cmpdf2+0x1c>
  4021dc:	f85d 0b04 	ldr.w	r0, [sp], #4
  4021e0:	4770      	bx	lr
  4021e2:	bf00      	nop

004021e4 <__aeabi_cdrcmple>:
  4021e4:	4684      	mov	ip, r0
  4021e6:	4610      	mov	r0, r2
  4021e8:	4662      	mov	r2, ip
  4021ea:	468c      	mov	ip, r1
  4021ec:	4619      	mov	r1, r3
  4021ee:	4663      	mov	r3, ip
  4021f0:	e000      	b.n	4021f4 <__aeabi_cdcmpeq>
  4021f2:	bf00      	nop

004021f4 <__aeabi_cdcmpeq>:
  4021f4:	b501      	push	{r0, lr}
  4021f6:	f7ff ffb7 	bl	402168 <__cmpdf2>
  4021fa:	2800      	cmp	r0, #0
  4021fc:	bf48      	it	mi
  4021fe:	f110 0f00 	cmnmi.w	r0, #0
  402202:	bd01      	pop	{r0, pc}

00402204 <__aeabi_dcmpeq>:
  402204:	f84d ed08 	str.w	lr, [sp, #-8]!
  402208:	f7ff fff4 	bl	4021f4 <__aeabi_cdcmpeq>
  40220c:	bf0c      	ite	eq
  40220e:	2001      	moveq	r0, #1
  402210:	2000      	movne	r0, #0
  402212:	f85d fb08 	ldr.w	pc, [sp], #8
  402216:	bf00      	nop

00402218 <__aeabi_dcmplt>:
  402218:	f84d ed08 	str.w	lr, [sp, #-8]!
  40221c:	f7ff ffea 	bl	4021f4 <__aeabi_cdcmpeq>
  402220:	bf34      	ite	cc
  402222:	2001      	movcc	r0, #1
  402224:	2000      	movcs	r0, #0
  402226:	f85d fb08 	ldr.w	pc, [sp], #8
  40222a:	bf00      	nop

0040222c <__aeabi_dcmple>:
  40222c:	f84d ed08 	str.w	lr, [sp, #-8]!
  402230:	f7ff ffe0 	bl	4021f4 <__aeabi_cdcmpeq>
  402234:	bf94      	ite	ls
  402236:	2001      	movls	r0, #1
  402238:	2000      	movhi	r0, #0
  40223a:	f85d fb08 	ldr.w	pc, [sp], #8
  40223e:	bf00      	nop

00402240 <__aeabi_dcmpge>:
  402240:	f84d ed08 	str.w	lr, [sp, #-8]!
  402244:	f7ff ffce 	bl	4021e4 <__aeabi_cdrcmple>
  402248:	bf94      	ite	ls
  40224a:	2001      	movls	r0, #1
  40224c:	2000      	movhi	r0, #0
  40224e:	f85d fb08 	ldr.w	pc, [sp], #8
  402252:	bf00      	nop

00402254 <__aeabi_dcmpgt>:
  402254:	f84d ed08 	str.w	lr, [sp, #-8]!
  402258:	f7ff ffc4 	bl	4021e4 <__aeabi_cdrcmple>
  40225c:	bf34      	ite	cc
  40225e:	2001      	movcc	r0, #1
  402260:	2000      	movcs	r0, #0
  402262:	f85d fb08 	ldr.w	pc, [sp], #8
  402266:	bf00      	nop

00402268 <__aeabi_d2iz>:
  402268:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40226c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  402270:	d215      	bcs.n	40229e <__aeabi_d2iz+0x36>
  402272:	d511      	bpl.n	402298 <__aeabi_d2iz+0x30>
  402274:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402278:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40227c:	d912      	bls.n	4022a4 <__aeabi_d2iz+0x3c>
  40227e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402286:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40228a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40228e:	fa23 f002 	lsr.w	r0, r3, r2
  402292:	bf18      	it	ne
  402294:	4240      	negne	r0, r0
  402296:	4770      	bx	lr
  402298:	f04f 0000 	mov.w	r0, #0
  40229c:	4770      	bx	lr
  40229e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4022a2:	d105      	bne.n	4022b0 <__aeabi_d2iz+0x48>
  4022a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4022a8:	bf08      	it	eq
  4022aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4022ae:	4770      	bx	lr
  4022b0:	f04f 0000 	mov.w	r0, #0
  4022b4:	4770      	bx	lr
  4022b6:	bf00      	nop

004022b8 <__libc_init_array>:
  4022b8:	b570      	push	{r4, r5, r6, lr}
  4022ba:	4e0d      	ldr	r6, [pc, #52]	; (4022f0 <__libc_init_array+0x38>)
  4022bc:	4c0d      	ldr	r4, [pc, #52]	; (4022f4 <__libc_init_array+0x3c>)
  4022be:	1ba4      	subs	r4, r4, r6
  4022c0:	10a4      	asrs	r4, r4, #2
  4022c2:	2500      	movs	r5, #0
  4022c4:	42a5      	cmp	r5, r4
  4022c6:	d109      	bne.n	4022dc <__libc_init_array+0x24>
  4022c8:	4e0b      	ldr	r6, [pc, #44]	; (4022f8 <__libc_init_array+0x40>)
  4022ca:	4c0c      	ldr	r4, [pc, #48]	; (4022fc <__libc_init_array+0x44>)
  4022cc:	f002 fb5c 	bl	404988 <_init>
  4022d0:	1ba4      	subs	r4, r4, r6
  4022d2:	10a4      	asrs	r4, r4, #2
  4022d4:	2500      	movs	r5, #0
  4022d6:	42a5      	cmp	r5, r4
  4022d8:	d105      	bne.n	4022e6 <__libc_init_array+0x2e>
  4022da:	bd70      	pop	{r4, r5, r6, pc}
  4022dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4022e0:	4798      	blx	r3
  4022e2:	3501      	adds	r5, #1
  4022e4:	e7ee      	b.n	4022c4 <__libc_init_array+0xc>
  4022e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4022ea:	4798      	blx	r3
  4022ec:	3501      	adds	r5, #1
  4022ee:	e7f2      	b.n	4022d6 <__libc_init_array+0x1e>
  4022f0:	00404994 	.word	0x00404994
  4022f4:	00404994 	.word	0x00404994
  4022f8:	00404994 	.word	0x00404994
  4022fc:	00404998 	.word	0x00404998

00402300 <memcpy>:
  402300:	b510      	push	{r4, lr}
  402302:	1e43      	subs	r3, r0, #1
  402304:	440a      	add	r2, r1
  402306:	4291      	cmp	r1, r2
  402308:	d100      	bne.n	40230c <memcpy+0xc>
  40230a:	bd10      	pop	{r4, pc}
  40230c:	f811 4b01 	ldrb.w	r4, [r1], #1
  402310:	f803 4f01 	strb.w	r4, [r3, #1]!
  402314:	e7f7      	b.n	402306 <memcpy+0x6>

00402316 <memset>:
  402316:	4402      	add	r2, r0
  402318:	4603      	mov	r3, r0
  40231a:	4293      	cmp	r3, r2
  40231c:	d100      	bne.n	402320 <memset+0xa>
  40231e:	4770      	bx	lr
  402320:	f803 1b01 	strb.w	r1, [r3], #1
  402324:	e7f9      	b.n	40231a <memset+0x4>

00402326 <__cvt>:
  402326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40232a:	b088      	sub	sp, #32
  40232c:	2b00      	cmp	r3, #0
  40232e:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402330:	9912      	ldr	r1, [sp, #72]	; 0x48
  402332:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402334:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402338:	461e      	mov	r6, r3
  40233a:	f027 0720 	bic.w	r7, r7, #32
  40233e:	bfbb      	ittet	lt
  402340:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  402344:	461e      	movlt	r6, r3
  402346:	2300      	movge	r3, #0
  402348:	232d      	movlt	r3, #45	; 0x2d
  40234a:	2f46      	cmp	r7, #70	; 0x46
  40234c:	4614      	mov	r4, r2
  40234e:	700b      	strb	r3, [r1, #0]
  402350:	d004      	beq.n	40235c <__cvt+0x36>
  402352:	2f45      	cmp	r7, #69	; 0x45
  402354:	d100      	bne.n	402358 <__cvt+0x32>
  402356:	3501      	adds	r5, #1
  402358:	2302      	movs	r3, #2
  40235a:	e000      	b.n	40235e <__cvt+0x38>
  40235c:	2303      	movs	r3, #3
  40235e:	aa07      	add	r2, sp, #28
  402360:	9204      	str	r2, [sp, #16]
  402362:	aa06      	add	r2, sp, #24
  402364:	9203      	str	r2, [sp, #12]
  402366:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  40236a:	4622      	mov	r2, r4
  40236c:	4633      	mov	r3, r6
  40236e:	f000 fc63 	bl	402c38 <_dtoa_r>
  402372:	2f47      	cmp	r7, #71	; 0x47
  402374:	4680      	mov	r8, r0
  402376:	d102      	bne.n	40237e <__cvt+0x58>
  402378:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40237a:	07db      	lsls	r3, r3, #31
  40237c:	d526      	bpl.n	4023cc <__cvt+0xa6>
  40237e:	2f46      	cmp	r7, #70	; 0x46
  402380:	eb08 0905 	add.w	r9, r8, r5
  402384:	d111      	bne.n	4023aa <__cvt+0x84>
  402386:	f898 3000 	ldrb.w	r3, [r8]
  40238a:	2b30      	cmp	r3, #48	; 0x30
  40238c:	d10a      	bne.n	4023a4 <__cvt+0x7e>
  40238e:	2200      	movs	r2, #0
  402390:	2300      	movs	r3, #0
  402392:	4620      	mov	r0, r4
  402394:	4631      	mov	r1, r6
  402396:	f7ff ff35 	bl	402204 <__aeabi_dcmpeq>
  40239a:	b918      	cbnz	r0, 4023a4 <__cvt+0x7e>
  40239c:	f1c5 0501 	rsb	r5, r5, #1
  4023a0:	f8ca 5000 	str.w	r5, [sl]
  4023a4:	f8da 3000 	ldr.w	r3, [sl]
  4023a8:	4499      	add	r9, r3
  4023aa:	2200      	movs	r2, #0
  4023ac:	2300      	movs	r3, #0
  4023ae:	4620      	mov	r0, r4
  4023b0:	4631      	mov	r1, r6
  4023b2:	f7ff ff27 	bl	402204 <__aeabi_dcmpeq>
  4023b6:	b938      	cbnz	r0, 4023c8 <__cvt+0xa2>
  4023b8:	2230      	movs	r2, #48	; 0x30
  4023ba:	9b07      	ldr	r3, [sp, #28]
  4023bc:	4599      	cmp	r9, r3
  4023be:	d905      	bls.n	4023cc <__cvt+0xa6>
  4023c0:	1c59      	adds	r1, r3, #1
  4023c2:	9107      	str	r1, [sp, #28]
  4023c4:	701a      	strb	r2, [r3, #0]
  4023c6:	e7f8      	b.n	4023ba <__cvt+0x94>
  4023c8:	f8cd 901c 	str.w	r9, [sp, #28]
  4023cc:	9b07      	ldr	r3, [sp, #28]
  4023ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4023d0:	eba3 0308 	sub.w	r3, r3, r8
  4023d4:	4640      	mov	r0, r8
  4023d6:	6013      	str	r3, [r2, #0]
  4023d8:	b008      	add	sp, #32
  4023da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004023de <__exponent>:
  4023de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  4023e0:	4603      	mov	r3, r0
  4023e2:	2900      	cmp	r1, #0
  4023e4:	bfb8      	it	lt
  4023e6:	4249      	neglt	r1, r1
  4023e8:	f803 2b02 	strb.w	r2, [r3], #2
  4023ec:	bfb4      	ite	lt
  4023ee:	222d      	movlt	r2, #45	; 0x2d
  4023f0:	222b      	movge	r2, #43	; 0x2b
  4023f2:	2909      	cmp	r1, #9
  4023f4:	7042      	strb	r2, [r0, #1]
  4023f6:	dd20      	ble.n	40243a <__exponent+0x5c>
  4023f8:	f10d 0207 	add.w	r2, sp, #7
  4023fc:	4617      	mov	r7, r2
  4023fe:	260a      	movs	r6, #10
  402400:	fb91 f5f6 	sdiv	r5, r1, r6
  402404:	fb06 1115 	mls	r1, r6, r5, r1
  402408:	3130      	adds	r1, #48	; 0x30
  40240a:	2d09      	cmp	r5, #9
  40240c:	f802 1c01 	strb.w	r1, [r2, #-1]
  402410:	f102 34ff 	add.w	r4, r2, #4294967295
  402414:	4629      	mov	r1, r5
  402416:	dc09      	bgt.n	40242c <__exponent+0x4e>
  402418:	3130      	adds	r1, #48	; 0x30
  40241a:	3a02      	subs	r2, #2
  40241c:	f804 1c01 	strb.w	r1, [r4, #-1]
  402420:	42ba      	cmp	r2, r7
  402422:	461c      	mov	r4, r3
  402424:	d304      	bcc.n	402430 <__exponent+0x52>
  402426:	1a20      	subs	r0, r4, r0
  402428:	b003      	add	sp, #12
  40242a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40242c:	4622      	mov	r2, r4
  40242e:	e7e7      	b.n	402400 <__exponent+0x22>
  402430:	f812 1b01 	ldrb.w	r1, [r2], #1
  402434:	f803 1b01 	strb.w	r1, [r3], #1
  402438:	e7f2      	b.n	402420 <__exponent+0x42>
  40243a:	2230      	movs	r2, #48	; 0x30
  40243c:	461c      	mov	r4, r3
  40243e:	4411      	add	r1, r2
  402440:	f804 2b02 	strb.w	r2, [r4], #2
  402444:	7059      	strb	r1, [r3, #1]
  402446:	e7ee      	b.n	402426 <__exponent+0x48>

00402448 <_printf_float>:
  402448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40244c:	b091      	sub	sp, #68	; 0x44
  40244e:	460c      	mov	r4, r1
  402450:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  402452:	4693      	mov	fp, r2
  402454:	461e      	mov	r6, r3
  402456:	4605      	mov	r5, r0
  402458:	f001 fb3c 	bl	403ad4 <_localeconv_r>
  40245c:	6803      	ldr	r3, [r0, #0]
  40245e:	9309      	str	r3, [sp, #36]	; 0x24
  402460:	4618      	mov	r0, r3
  402462:	f000 fb55 	bl	402b10 <strlen>
  402466:	2300      	movs	r3, #0
  402468:	930e      	str	r3, [sp, #56]	; 0x38
  40246a:	683b      	ldr	r3, [r7, #0]
  40246c:	900a      	str	r0, [sp, #40]	; 0x28
  40246e:	3307      	adds	r3, #7
  402470:	f023 0307 	bic.w	r3, r3, #7
  402474:	f103 0208 	add.w	r2, r3, #8
  402478:	f894 8018 	ldrb.w	r8, [r4, #24]
  40247c:	f8d4 a000 	ldr.w	sl, [r4]
  402480:	603a      	str	r2, [r7, #0]
  402482:	e9d3 2300 	ldrd	r2, r3, [r3]
  402486:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  40248a:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  40248e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  402490:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  402494:	930b      	str	r3, [sp, #44]	; 0x2c
  402496:	f04f 32ff 	mov.w	r2, #4294967295
  40249a:	4ba6      	ldr	r3, [pc, #664]	; (402734 <_printf_float+0x2ec>)
  40249c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40249e:	4638      	mov	r0, r7
  4024a0:	f001 ffaa 	bl	4043f8 <__aeabi_dcmpun>
  4024a4:	2800      	cmp	r0, #0
  4024a6:	f040 81f7 	bne.w	402898 <_printf_float+0x450>
  4024aa:	f04f 32ff 	mov.w	r2, #4294967295
  4024ae:	4ba1      	ldr	r3, [pc, #644]	; (402734 <_printf_float+0x2ec>)
  4024b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4024b2:	4638      	mov	r0, r7
  4024b4:	f7ff feba 	bl	40222c <__aeabi_dcmple>
  4024b8:	2800      	cmp	r0, #0
  4024ba:	f040 81ed 	bne.w	402898 <_printf_float+0x450>
  4024be:	2200      	movs	r2, #0
  4024c0:	2300      	movs	r3, #0
  4024c2:	4638      	mov	r0, r7
  4024c4:	4649      	mov	r1, r9
  4024c6:	f7ff fea7 	bl	402218 <__aeabi_dcmplt>
  4024ca:	b110      	cbz	r0, 4024d2 <_printf_float+0x8a>
  4024cc:	232d      	movs	r3, #45	; 0x2d
  4024ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4024d2:	4b99      	ldr	r3, [pc, #612]	; (402738 <_printf_float+0x2f0>)
  4024d4:	4f99      	ldr	r7, [pc, #612]	; (40273c <_printf_float+0x2f4>)
  4024d6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4024da:	bf98      	it	ls
  4024dc:	461f      	movls	r7, r3
  4024de:	2303      	movs	r3, #3
  4024e0:	6123      	str	r3, [r4, #16]
  4024e2:	f02a 0304 	bic.w	r3, sl, #4
  4024e6:	6023      	str	r3, [r4, #0]
  4024e8:	f04f 0900 	mov.w	r9, #0
  4024ec:	9600      	str	r6, [sp, #0]
  4024ee:	465b      	mov	r3, fp
  4024f0:	aa0f      	add	r2, sp, #60	; 0x3c
  4024f2:	4621      	mov	r1, r4
  4024f4:	4628      	mov	r0, r5
  4024f6:	f000 f9df 	bl	4028b8 <_printf_common>
  4024fa:	3001      	adds	r0, #1
  4024fc:	f040 809a 	bne.w	402634 <_printf_float+0x1ec>
  402500:	f04f 30ff 	mov.w	r0, #4294967295
  402504:	b011      	add	sp, #68	; 0x44
  402506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40250a:	6862      	ldr	r2, [r4, #4]
  40250c:	1c53      	adds	r3, r2, #1
  40250e:	a80e      	add	r0, sp, #56	; 0x38
  402510:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  402514:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  402518:	d141      	bne.n	40259e <_printf_float+0x156>
  40251a:	2206      	movs	r2, #6
  40251c:	6062      	str	r2, [r4, #4]
  40251e:	6023      	str	r3, [r4, #0]
  402520:	2100      	movs	r1, #0
  402522:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  402526:	9301      	str	r3, [sp, #4]
  402528:	6863      	ldr	r3, [r4, #4]
  40252a:	9005      	str	r0, [sp, #20]
  40252c:	9202      	str	r2, [sp, #8]
  40252e:	9300      	str	r3, [sp, #0]
  402530:	463a      	mov	r2, r7
  402532:	464b      	mov	r3, r9
  402534:	9106      	str	r1, [sp, #24]
  402536:	f8cd 8010 	str.w	r8, [sp, #16]
  40253a:	f8cd e00c 	str.w	lr, [sp, #12]
  40253e:	4628      	mov	r0, r5
  402540:	f7ff fef1 	bl	402326 <__cvt>
  402544:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  402548:	2b47      	cmp	r3, #71	; 0x47
  40254a:	4607      	mov	r7, r0
  40254c:	d109      	bne.n	402562 <_printf_float+0x11a>
  40254e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402550:	1cd8      	adds	r0, r3, #3
  402552:	db02      	blt.n	40255a <_printf_float+0x112>
  402554:	6862      	ldr	r2, [r4, #4]
  402556:	4293      	cmp	r3, r2
  402558:	dd59      	ble.n	40260e <_printf_float+0x1c6>
  40255a:	f1a8 0802 	sub.w	r8, r8, #2
  40255e:	fa5f f888 	uxtb.w	r8, r8
  402562:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  402566:	990d      	ldr	r1, [sp, #52]	; 0x34
  402568:	d836      	bhi.n	4025d8 <_printf_float+0x190>
  40256a:	3901      	subs	r1, #1
  40256c:	4642      	mov	r2, r8
  40256e:	f104 0050 	add.w	r0, r4, #80	; 0x50
  402572:	910d      	str	r1, [sp, #52]	; 0x34
  402574:	f7ff ff33 	bl	4023de <__exponent>
  402578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40257a:	1883      	adds	r3, r0, r2
  40257c:	2a01      	cmp	r2, #1
  40257e:	4681      	mov	r9, r0
  402580:	6123      	str	r3, [r4, #16]
  402582:	dc02      	bgt.n	40258a <_printf_float+0x142>
  402584:	6822      	ldr	r2, [r4, #0]
  402586:	07d1      	lsls	r1, r2, #31
  402588:	d501      	bpl.n	40258e <_printf_float+0x146>
  40258a:	3301      	adds	r3, #1
  40258c:	6123      	str	r3, [r4, #16]
  40258e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  402592:	2b00      	cmp	r3, #0
  402594:	d0aa      	beq.n	4024ec <_printf_float+0xa4>
  402596:	232d      	movs	r3, #45	; 0x2d
  402598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40259c:	e7a6      	b.n	4024ec <_printf_float+0xa4>
  40259e:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  4025a2:	d002      	beq.n	4025aa <_printf_float+0x162>
  4025a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4025a8:	d1b9      	bne.n	40251e <_printf_float+0xd6>
  4025aa:	b19a      	cbz	r2, 4025d4 <_printf_float+0x18c>
  4025ac:	2100      	movs	r1, #0
  4025ae:	9106      	str	r1, [sp, #24]
  4025b0:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  4025b4:	e88d 000c 	stmia.w	sp, {r2, r3}
  4025b8:	6023      	str	r3, [r4, #0]
  4025ba:	9005      	str	r0, [sp, #20]
  4025bc:	463a      	mov	r2, r7
  4025be:	f8cd 8010 	str.w	r8, [sp, #16]
  4025c2:	f8cd e00c 	str.w	lr, [sp, #12]
  4025c6:	9102      	str	r1, [sp, #8]
  4025c8:	464b      	mov	r3, r9
  4025ca:	4628      	mov	r0, r5
  4025cc:	f7ff feab 	bl	402326 <__cvt>
  4025d0:	4607      	mov	r7, r0
  4025d2:	e7bc      	b.n	40254e <_printf_float+0x106>
  4025d4:	2201      	movs	r2, #1
  4025d6:	e7a1      	b.n	40251c <_printf_float+0xd4>
  4025d8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  4025dc:	d119      	bne.n	402612 <_printf_float+0x1ca>
  4025de:	2900      	cmp	r1, #0
  4025e0:	6863      	ldr	r3, [r4, #4]
  4025e2:	dd0c      	ble.n	4025fe <_printf_float+0x1b6>
  4025e4:	6121      	str	r1, [r4, #16]
  4025e6:	b913      	cbnz	r3, 4025ee <_printf_float+0x1a6>
  4025e8:	6822      	ldr	r2, [r4, #0]
  4025ea:	07d2      	lsls	r2, r2, #31
  4025ec:	d502      	bpl.n	4025f4 <_printf_float+0x1ac>
  4025ee:	3301      	adds	r3, #1
  4025f0:	440b      	add	r3, r1
  4025f2:	6123      	str	r3, [r4, #16]
  4025f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4025f6:	65a3      	str	r3, [r4, #88]	; 0x58
  4025f8:	f04f 0900 	mov.w	r9, #0
  4025fc:	e7c7      	b.n	40258e <_printf_float+0x146>
  4025fe:	b913      	cbnz	r3, 402606 <_printf_float+0x1be>
  402600:	6822      	ldr	r2, [r4, #0]
  402602:	07d0      	lsls	r0, r2, #31
  402604:	d501      	bpl.n	40260a <_printf_float+0x1c2>
  402606:	3302      	adds	r3, #2
  402608:	e7f3      	b.n	4025f2 <_printf_float+0x1aa>
  40260a:	2301      	movs	r3, #1
  40260c:	e7f1      	b.n	4025f2 <_printf_float+0x1aa>
  40260e:	f04f 0867 	mov.w	r8, #103	; 0x67
  402612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402616:	4293      	cmp	r3, r2
  402618:	db05      	blt.n	402626 <_printf_float+0x1de>
  40261a:	6822      	ldr	r2, [r4, #0]
  40261c:	6123      	str	r3, [r4, #16]
  40261e:	07d1      	lsls	r1, r2, #31
  402620:	d5e8      	bpl.n	4025f4 <_printf_float+0x1ac>
  402622:	3301      	adds	r3, #1
  402624:	e7e5      	b.n	4025f2 <_printf_float+0x1aa>
  402626:	2b00      	cmp	r3, #0
  402628:	bfd4      	ite	le
  40262a:	f1c3 0302 	rsble	r3, r3, #2
  40262e:	2301      	movgt	r3, #1
  402630:	4413      	add	r3, r2
  402632:	e7de      	b.n	4025f2 <_printf_float+0x1aa>
  402634:	6823      	ldr	r3, [r4, #0]
  402636:	055a      	lsls	r2, r3, #21
  402638:	d407      	bmi.n	40264a <_printf_float+0x202>
  40263a:	6923      	ldr	r3, [r4, #16]
  40263c:	463a      	mov	r2, r7
  40263e:	4659      	mov	r1, fp
  402640:	4628      	mov	r0, r5
  402642:	47b0      	blx	r6
  402644:	3001      	adds	r0, #1
  402646:	d12a      	bne.n	40269e <_printf_float+0x256>
  402648:	e75a      	b.n	402500 <_printf_float+0xb8>
  40264a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40264e:	f240 80dc 	bls.w	40280a <_printf_float+0x3c2>
  402652:	2200      	movs	r2, #0
  402654:	2300      	movs	r3, #0
  402656:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40265a:	f7ff fdd3 	bl	402204 <__aeabi_dcmpeq>
  40265e:	2800      	cmp	r0, #0
  402660:	d039      	beq.n	4026d6 <_printf_float+0x28e>
  402662:	2301      	movs	r3, #1
  402664:	4a36      	ldr	r2, [pc, #216]	; (402740 <_printf_float+0x2f8>)
  402666:	4659      	mov	r1, fp
  402668:	4628      	mov	r0, r5
  40266a:	47b0      	blx	r6
  40266c:	3001      	adds	r0, #1
  40266e:	f43f af47 	beq.w	402500 <_printf_float+0xb8>
  402672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402676:	429a      	cmp	r2, r3
  402678:	db02      	blt.n	402680 <_printf_float+0x238>
  40267a:	6823      	ldr	r3, [r4, #0]
  40267c:	07d8      	lsls	r0, r3, #31
  40267e:	d50e      	bpl.n	40269e <_printf_float+0x256>
  402680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402682:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402684:	4659      	mov	r1, fp
  402686:	4628      	mov	r0, r5
  402688:	47b0      	blx	r6
  40268a:	3001      	adds	r0, #1
  40268c:	f43f af38 	beq.w	402500 <_printf_float+0xb8>
  402690:	2700      	movs	r7, #0
  402692:	f104 081a 	add.w	r8, r4, #26
  402696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402698:	3b01      	subs	r3, #1
  40269a:	429f      	cmp	r7, r3
  40269c:	db11      	blt.n	4026c2 <_printf_float+0x27a>
  40269e:	6823      	ldr	r3, [r4, #0]
  4026a0:	079f      	lsls	r7, r3, #30
  4026a2:	d508      	bpl.n	4026b6 <_printf_float+0x26e>
  4026a4:	2700      	movs	r7, #0
  4026a6:	f104 0819 	add.w	r8, r4, #25
  4026aa:	68e3      	ldr	r3, [r4, #12]
  4026ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4026ae:	1a9b      	subs	r3, r3, r2
  4026b0:	429f      	cmp	r7, r3
  4026b2:	f2c0 80e7 	blt.w	402884 <_printf_float+0x43c>
  4026b6:	68e0      	ldr	r0, [r4, #12]
  4026b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4026ba:	4298      	cmp	r0, r3
  4026bc:	bfb8      	it	lt
  4026be:	4618      	movlt	r0, r3
  4026c0:	e720      	b.n	402504 <_printf_float+0xbc>
  4026c2:	2301      	movs	r3, #1
  4026c4:	4642      	mov	r2, r8
  4026c6:	4659      	mov	r1, fp
  4026c8:	4628      	mov	r0, r5
  4026ca:	47b0      	blx	r6
  4026cc:	3001      	adds	r0, #1
  4026ce:	f43f af17 	beq.w	402500 <_printf_float+0xb8>
  4026d2:	3701      	adds	r7, #1
  4026d4:	e7df      	b.n	402696 <_printf_float+0x24e>
  4026d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4026d8:	2b00      	cmp	r3, #0
  4026da:	dc33      	bgt.n	402744 <_printf_float+0x2fc>
  4026dc:	2301      	movs	r3, #1
  4026de:	4a18      	ldr	r2, [pc, #96]	; (402740 <_printf_float+0x2f8>)
  4026e0:	4659      	mov	r1, fp
  4026e2:	4628      	mov	r0, r5
  4026e4:	47b0      	blx	r6
  4026e6:	3001      	adds	r0, #1
  4026e8:	f43f af0a 	beq.w	402500 <_printf_float+0xb8>
  4026ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4026ee:	b923      	cbnz	r3, 4026fa <_printf_float+0x2b2>
  4026f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4026f2:	b913      	cbnz	r3, 4026fa <_printf_float+0x2b2>
  4026f4:	6823      	ldr	r3, [r4, #0]
  4026f6:	07d9      	lsls	r1, r3, #31
  4026f8:	d5d1      	bpl.n	40269e <_printf_float+0x256>
  4026fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4026fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4026fe:	4659      	mov	r1, fp
  402700:	4628      	mov	r0, r5
  402702:	47b0      	blx	r6
  402704:	3001      	adds	r0, #1
  402706:	f43f aefb 	beq.w	402500 <_printf_float+0xb8>
  40270a:	f04f 0800 	mov.w	r8, #0
  40270e:	f104 091a 	add.w	r9, r4, #26
  402712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402714:	425b      	negs	r3, r3
  402716:	4598      	cmp	r8, r3
  402718:	db01      	blt.n	40271e <_printf_float+0x2d6>
  40271a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40271c:	e78e      	b.n	40263c <_printf_float+0x1f4>
  40271e:	2301      	movs	r3, #1
  402720:	464a      	mov	r2, r9
  402722:	4659      	mov	r1, fp
  402724:	4628      	mov	r0, r5
  402726:	47b0      	blx	r6
  402728:	3001      	adds	r0, #1
  40272a:	f43f aee9 	beq.w	402500 <_printf_float+0xb8>
  40272e:	f108 0801 	add.w	r8, r8, #1
  402732:	e7ee      	b.n	402712 <_printf_float+0x2ca>
  402734:	7fefffff 	.word	0x7fefffff
  402738:	004046fc 	.word	0x004046fc
  40273c:	00404700 	.word	0x00404700
  402740:	0040470c 	.word	0x0040470c
  402744:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402746:	6da3      	ldr	r3, [r4, #88]	; 0x58
  402748:	429a      	cmp	r2, r3
  40274a:	bfa8      	it	ge
  40274c:	461a      	movge	r2, r3
  40274e:	2a00      	cmp	r2, #0
  402750:	4690      	mov	r8, r2
  402752:	dc36      	bgt.n	4027c2 <_printf_float+0x37a>
  402754:	f104 031a 	add.w	r3, r4, #26
  402758:	f04f 0a00 	mov.w	sl, #0
  40275c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  402760:	930b      	str	r3, [sp, #44]	; 0x2c
  402762:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  402766:	eba9 0308 	sub.w	r3, r9, r8
  40276a:	459a      	cmp	sl, r3
  40276c:	db31      	blt.n	4027d2 <_printf_float+0x38a>
  40276e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402770:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402772:	429a      	cmp	r2, r3
  402774:	db38      	blt.n	4027e8 <_printf_float+0x3a0>
  402776:	6823      	ldr	r3, [r4, #0]
  402778:	07da      	lsls	r2, r3, #31
  40277a:	d435      	bmi.n	4027e8 <_printf_float+0x3a0>
  40277c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40277e:	990d      	ldr	r1, [sp, #52]	; 0x34
  402780:	eba3 0209 	sub.w	r2, r3, r9
  402784:	eba3 0801 	sub.w	r8, r3, r1
  402788:	4590      	cmp	r8, r2
  40278a:	bfa8      	it	ge
  40278c:	4690      	movge	r8, r2
  40278e:	f1b8 0f00 	cmp.w	r8, #0
  402792:	dc31      	bgt.n	4027f8 <_printf_float+0x3b0>
  402794:	2700      	movs	r7, #0
  402796:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  40279a:	f104 091a 	add.w	r9, r4, #26
  40279e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4027a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4027a2:	1a9b      	subs	r3, r3, r2
  4027a4:	eba3 0308 	sub.w	r3, r3, r8
  4027a8:	429f      	cmp	r7, r3
  4027aa:	f6bf af78 	bge.w	40269e <_printf_float+0x256>
  4027ae:	2301      	movs	r3, #1
  4027b0:	464a      	mov	r2, r9
  4027b2:	4659      	mov	r1, fp
  4027b4:	4628      	mov	r0, r5
  4027b6:	47b0      	blx	r6
  4027b8:	3001      	adds	r0, #1
  4027ba:	f43f aea1 	beq.w	402500 <_printf_float+0xb8>
  4027be:	3701      	adds	r7, #1
  4027c0:	e7ed      	b.n	40279e <_printf_float+0x356>
  4027c2:	4613      	mov	r3, r2
  4027c4:	4659      	mov	r1, fp
  4027c6:	463a      	mov	r2, r7
  4027c8:	4628      	mov	r0, r5
  4027ca:	47b0      	blx	r6
  4027cc:	3001      	adds	r0, #1
  4027ce:	d1c1      	bne.n	402754 <_printf_float+0x30c>
  4027d0:	e696      	b.n	402500 <_printf_float+0xb8>
  4027d2:	2301      	movs	r3, #1
  4027d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4027d6:	4659      	mov	r1, fp
  4027d8:	4628      	mov	r0, r5
  4027da:	47b0      	blx	r6
  4027dc:	3001      	adds	r0, #1
  4027de:	f43f ae8f 	beq.w	402500 <_printf_float+0xb8>
  4027e2:	f10a 0a01 	add.w	sl, sl, #1
  4027e6:	e7bc      	b.n	402762 <_printf_float+0x31a>
  4027e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4027ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4027ec:	4659      	mov	r1, fp
  4027ee:	4628      	mov	r0, r5
  4027f0:	47b0      	blx	r6
  4027f2:	3001      	adds	r0, #1
  4027f4:	d1c2      	bne.n	40277c <_printf_float+0x334>
  4027f6:	e683      	b.n	402500 <_printf_float+0xb8>
  4027f8:	4643      	mov	r3, r8
  4027fa:	eb07 0209 	add.w	r2, r7, r9
  4027fe:	4659      	mov	r1, fp
  402800:	4628      	mov	r0, r5
  402802:	47b0      	blx	r6
  402804:	3001      	adds	r0, #1
  402806:	d1c5      	bne.n	402794 <_printf_float+0x34c>
  402808:	e67a      	b.n	402500 <_printf_float+0xb8>
  40280a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40280c:	2a01      	cmp	r2, #1
  40280e:	dc01      	bgt.n	402814 <_printf_float+0x3cc>
  402810:	07db      	lsls	r3, r3, #31
  402812:	d534      	bpl.n	40287e <_printf_float+0x436>
  402814:	2301      	movs	r3, #1
  402816:	463a      	mov	r2, r7
  402818:	4659      	mov	r1, fp
  40281a:	4628      	mov	r0, r5
  40281c:	47b0      	blx	r6
  40281e:	3001      	adds	r0, #1
  402820:	f43f ae6e 	beq.w	402500 <_printf_float+0xb8>
  402824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402826:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402828:	4659      	mov	r1, fp
  40282a:	4628      	mov	r0, r5
  40282c:	47b0      	blx	r6
  40282e:	3001      	adds	r0, #1
  402830:	f43f ae66 	beq.w	402500 <_printf_float+0xb8>
  402834:	2200      	movs	r2, #0
  402836:	2300      	movs	r3, #0
  402838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40283c:	f7ff fce2 	bl	402204 <__aeabi_dcmpeq>
  402840:	b150      	cbz	r0, 402858 <_printf_float+0x410>
  402842:	2700      	movs	r7, #0
  402844:	f104 081a 	add.w	r8, r4, #26
  402848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40284a:	3b01      	subs	r3, #1
  40284c:	429f      	cmp	r7, r3
  40284e:	db0c      	blt.n	40286a <_printf_float+0x422>
  402850:	464b      	mov	r3, r9
  402852:	f104 0250 	add.w	r2, r4, #80	; 0x50
  402856:	e6f2      	b.n	40263e <_printf_float+0x1f6>
  402858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40285a:	1c7a      	adds	r2, r7, #1
  40285c:	3b01      	subs	r3, #1
  40285e:	4659      	mov	r1, fp
  402860:	4628      	mov	r0, r5
  402862:	47b0      	blx	r6
  402864:	3001      	adds	r0, #1
  402866:	d1f3      	bne.n	402850 <_printf_float+0x408>
  402868:	e64a      	b.n	402500 <_printf_float+0xb8>
  40286a:	2301      	movs	r3, #1
  40286c:	4642      	mov	r2, r8
  40286e:	4659      	mov	r1, fp
  402870:	4628      	mov	r0, r5
  402872:	47b0      	blx	r6
  402874:	3001      	adds	r0, #1
  402876:	f43f ae43 	beq.w	402500 <_printf_float+0xb8>
  40287a:	3701      	adds	r7, #1
  40287c:	e7e4      	b.n	402848 <_printf_float+0x400>
  40287e:	2301      	movs	r3, #1
  402880:	463a      	mov	r2, r7
  402882:	e7ec      	b.n	40285e <_printf_float+0x416>
  402884:	2301      	movs	r3, #1
  402886:	4642      	mov	r2, r8
  402888:	4659      	mov	r1, fp
  40288a:	4628      	mov	r0, r5
  40288c:	47b0      	blx	r6
  40288e:	3001      	adds	r0, #1
  402890:	f43f ae36 	beq.w	402500 <_printf_float+0xb8>
  402894:	3701      	adds	r7, #1
  402896:	e708      	b.n	4026aa <_printf_float+0x262>
  402898:	463a      	mov	r2, r7
  40289a:	464b      	mov	r3, r9
  40289c:	4638      	mov	r0, r7
  40289e:	4649      	mov	r1, r9
  4028a0:	f001 fdaa 	bl	4043f8 <__aeabi_dcmpun>
  4028a4:	2800      	cmp	r0, #0
  4028a6:	f43f ae30 	beq.w	40250a <_printf_float+0xc2>
  4028aa:	4b01      	ldr	r3, [pc, #4]	; (4028b0 <_printf_float+0x468>)
  4028ac:	4f01      	ldr	r7, [pc, #4]	; (4028b4 <_printf_float+0x46c>)
  4028ae:	e612      	b.n	4024d6 <_printf_float+0x8e>
  4028b0:	00404704 	.word	0x00404704
  4028b4:	00404708 	.word	0x00404708

004028b8 <_printf_common>:
  4028b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4028bc:	4691      	mov	r9, r2
  4028be:	461f      	mov	r7, r3
  4028c0:	688a      	ldr	r2, [r1, #8]
  4028c2:	690b      	ldr	r3, [r1, #16]
  4028c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4028c8:	4293      	cmp	r3, r2
  4028ca:	bfb8      	it	lt
  4028cc:	4613      	movlt	r3, r2
  4028ce:	f8c9 3000 	str.w	r3, [r9]
  4028d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4028d6:	4606      	mov	r6, r0
  4028d8:	460c      	mov	r4, r1
  4028da:	b112      	cbz	r2, 4028e2 <_printf_common+0x2a>
  4028dc:	3301      	adds	r3, #1
  4028de:	f8c9 3000 	str.w	r3, [r9]
  4028e2:	6823      	ldr	r3, [r4, #0]
  4028e4:	0699      	lsls	r1, r3, #26
  4028e6:	bf42      	ittt	mi
  4028e8:	f8d9 3000 	ldrmi.w	r3, [r9]
  4028ec:	3302      	addmi	r3, #2
  4028ee:	f8c9 3000 	strmi.w	r3, [r9]
  4028f2:	6825      	ldr	r5, [r4, #0]
  4028f4:	f015 0506 	ands.w	r5, r5, #6
  4028f8:	d107      	bne.n	40290a <_printf_common+0x52>
  4028fa:	f104 0a19 	add.w	sl, r4, #25
  4028fe:	68e3      	ldr	r3, [r4, #12]
  402900:	f8d9 2000 	ldr.w	r2, [r9]
  402904:	1a9b      	subs	r3, r3, r2
  402906:	429d      	cmp	r5, r3
  402908:	db29      	blt.n	40295e <_printf_common+0xa6>
  40290a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  40290e:	6822      	ldr	r2, [r4, #0]
  402910:	3300      	adds	r3, #0
  402912:	bf18      	it	ne
  402914:	2301      	movne	r3, #1
  402916:	0692      	lsls	r2, r2, #26
  402918:	d42e      	bmi.n	402978 <_printf_common+0xc0>
  40291a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40291e:	4639      	mov	r1, r7
  402920:	4630      	mov	r0, r6
  402922:	47c0      	blx	r8
  402924:	3001      	adds	r0, #1
  402926:	d021      	beq.n	40296c <_printf_common+0xb4>
  402928:	6823      	ldr	r3, [r4, #0]
  40292a:	68e5      	ldr	r5, [r4, #12]
  40292c:	f8d9 2000 	ldr.w	r2, [r9]
  402930:	f003 0306 	and.w	r3, r3, #6
  402934:	2b04      	cmp	r3, #4
  402936:	bf08      	it	eq
  402938:	1aad      	subeq	r5, r5, r2
  40293a:	68a3      	ldr	r3, [r4, #8]
  40293c:	6922      	ldr	r2, [r4, #16]
  40293e:	bf0c      	ite	eq
  402940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  402944:	2500      	movne	r5, #0
  402946:	4293      	cmp	r3, r2
  402948:	bfc4      	itt	gt
  40294a:	1a9b      	subgt	r3, r3, r2
  40294c:	18ed      	addgt	r5, r5, r3
  40294e:	f04f 0900 	mov.w	r9, #0
  402952:	341a      	adds	r4, #26
  402954:	454d      	cmp	r5, r9
  402956:	d11b      	bne.n	402990 <_printf_common+0xd8>
  402958:	2000      	movs	r0, #0
  40295a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40295e:	2301      	movs	r3, #1
  402960:	4652      	mov	r2, sl
  402962:	4639      	mov	r1, r7
  402964:	4630      	mov	r0, r6
  402966:	47c0      	blx	r8
  402968:	3001      	adds	r0, #1
  40296a:	d103      	bne.n	402974 <_printf_common+0xbc>
  40296c:	f04f 30ff 	mov.w	r0, #4294967295
  402970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402974:	3501      	adds	r5, #1
  402976:	e7c2      	b.n	4028fe <_printf_common+0x46>
  402978:	18e1      	adds	r1, r4, r3
  40297a:	1c5a      	adds	r2, r3, #1
  40297c:	2030      	movs	r0, #48	; 0x30
  40297e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  402982:	4422      	add	r2, r4
  402984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  402988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  40298c:	3302      	adds	r3, #2
  40298e:	e7c4      	b.n	40291a <_printf_common+0x62>
  402990:	2301      	movs	r3, #1
  402992:	4622      	mov	r2, r4
  402994:	4639      	mov	r1, r7
  402996:	4630      	mov	r0, r6
  402998:	47c0      	blx	r8
  40299a:	3001      	adds	r0, #1
  40299c:	d0e6      	beq.n	40296c <_printf_common+0xb4>
  40299e:	f109 0901 	add.w	r9, r9, #1
  4029a2:	e7d7      	b.n	402954 <_printf_common+0x9c>

004029a4 <setbuf>:
  4029a4:	2900      	cmp	r1, #0
  4029a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4029aa:	bf0c      	ite	eq
  4029ac:	2202      	moveq	r2, #2
  4029ae:	2200      	movne	r2, #0
  4029b0:	f000 b800 	b.w	4029b4 <setvbuf>

004029b4 <setvbuf>:
  4029b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4029b8:	461d      	mov	r5, r3
  4029ba:	4b51      	ldr	r3, [pc, #324]	; (402b00 <setvbuf+0x14c>)
  4029bc:	681e      	ldr	r6, [r3, #0]
  4029be:	4604      	mov	r4, r0
  4029c0:	460f      	mov	r7, r1
  4029c2:	4690      	mov	r8, r2
  4029c4:	b126      	cbz	r6, 4029d0 <setvbuf+0x1c>
  4029c6:	69b3      	ldr	r3, [r6, #24]
  4029c8:	b913      	cbnz	r3, 4029d0 <setvbuf+0x1c>
  4029ca:	4630      	mov	r0, r6
  4029cc:	f000 fff8 	bl	4039c0 <__sinit>
  4029d0:	4b4c      	ldr	r3, [pc, #304]	; (402b04 <setvbuf+0x150>)
  4029d2:	429c      	cmp	r4, r3
  4029d4:	d152      	bne.n	402a7c <setvbuf+0xc8>
  4029d6:	6874      	ldr	r4, [r6, #4]
  4029d8:	f1b8 0f02 	cmp.w	r8, #2
  4029dc:	d006      	beq.n	4029ec <setvbuf+0x38>
  4029de:	f1b8 0f01 	cmp.w	r8, #1
  4029e2:	f200 8089 	bhi.w	402af8 <setvbuf+0x144>
  4029e6:	2d00      	cmp	r5, #0
  4029e8:	f2c0 8086 	blt.w	402af8 <setvbuf+0x144>
  4029ec:	4621      	mov	r1, r4
  4029ee:	4630      	mov	r0, r6
  4029f0:	f000 ff7c 	bl	4038ec <_fflush_r>
  4029f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4029f6:	b141      	cbz	r1, 402a0a <setvbuf+0x56>
  4029f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4029fc:	4299      	cmp	r1, r3
  4029fe:	d002      	beq.n	402a06 <setvbuf+0x52>
  402a00:	4630      	mov	r0, r6
  402a02:	f001 fb7f 	bl	404104 <_free_r>
  402a06:	2300      	movs	r3, #0
  402a08:	6363      	str	r3, [r4, #52]	; 0x34
  402a0a:	2300      	movs	r3, #0
  402a0c:	61a3      	str	r3, [r4, #24]
  402a0e:	6063      	str	r3, [r4, #4]
  402a10:	89a3      	ldrh	r3, [r4, #12]
  402a12:	061b      	lsls	r3, r3, #24
  402a14:	d503      	bpl.n	402a1e <setvbuf+0x6a>
  402a16:	6921      	ldr	r1, [r4, #16]
  402a18:	4630      	mov	r0, r6
  402a1a:	f001 fb73 	bl	404104 <_free_r>
  402a1e:	89a3      	ldrh	r3, [r4, #12]
  402a20:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402a24:	f023 0303 	bic.w	r3, r3, #3
  402a28:	f1b8 0f02 	cmp.w	r8, #2
  402a2c:	81a3      	strh	r3, [r4, #12]
  402a2e:	d05d      	beq.n	402aec <setvbuf+0x138>
  402a30:	ab01      	add	r3, sp, #4
  402a32:	466a      	mov	r2, sp
  402a34:	4621      	mov	r1, r4
  402a36:	4630      	mov	r0, r6
  402a38:	f001 f85a 	bl	403af0 <__swhatbuf_r>
  402a3c:	89a3      	ldrh	r3, [r4, #12]
  402a3e:	4318      	orrs	r0, r3
  402a40:	81a0      	strh	r0, [r4, #12]
  402a42:	bb2d      	cbnz	r5, 402a90 <setvbuf+0xdc>
  402a44:	9d00      	ldr	r5, [sp, #0]
  402a46:	4628      	mov	r0, r5
  402a48:	f001 f876 	bl	403b38 <malloc>
  402a4c:	4607      	mov	r7, r0
  402a4e:	2800      	cmp	r0, #0
  402a50:	d14e      	bne.n	402af0 <setvbuf+0x13c>
  402a52:	f8dd 9000 	ldr.w	r9, [sp]
  402a56:	45a9      	cmp	r9, r5
  402a58:	d13c      	bne.n	402ad4 <setvbuf+0x120>
  402a5a:	f04f 30ff 	mov.w	r0, #4294967295
  402a5e:	89a3      	ldrh	r3, [r4, #12]
  402a60:	f043 0302 	orr.w	r3, r3, #2
  402a64:	81a3      	strh	r3, [r4, #12]
  402a66:	2300      	movs	r3, #0
  402a68:	60a3      	str	r3, [r4, #8]
  402a6a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  402a6e:	6023      	str	r3, [r4, #0]
  402a70:	6123      	str	r3, [r4, #16]
  402a72:	2301      	movs	r3, #1
  402a74:	6163      	str	r3, [r4, #20]
  402a76:	b003      	add	sp, #12
  402a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402a7c:	4b22      	ldr	r3, [pc, #136]	; (402b08 <setvbuf+0x154>)
  402a7e:	429c      	cmp	r4, r3
  402a80:	d101      	bne.n	402a86 <setvbuf+0xd2>
  402a82:	68b4      	ldr	r4, [r6, #8]
  402a84:	e7a8      	b.n	4029d8 <setvbuf+0x24>
  402a86:	4b21      	ldr	r3, [pc, #132]	; (402b0c <setvbuf+0x158>)
  402a88:	429c      	cmp	r4, r3
  402a8a:	bf08      	it	eq
  402a8c:	68f4      	ldreq	r4, [r6, #12]
  402a8e:	e7a3      	b.n	4029d8 <setvbuf+0x24>
  402a90:	2f00      	cmp	r7, #0
  402a92:	d0d8      	beq.n	402a46 <setvbuf+0x92>
  402a94:	69b3      	ldr	r3, [r6, #24]
  402a96:	b913      	cbnz	r3, 402a9e <setvbuf+0xea>
  402a98:	4630      	mov	r0, r6
  402a9a:	f000 ff91 	bl	4039c0 <__sinit>
  402a9e:	f1b8 0f01 	cmp.w	r8, #1
  402aa2:	bf08      	it	eq
  402aa4:	89a3      	ldrheq	r3, [r4, #12]
  402aa6:	6027      	str	r7, [r4, #0]
  402aa8:	bf04      	itt	eq
  402aaa:	f043 0301 	orreq.w	r3, r3, #1
  402aae:	81a3      	strheq	r3, [r4, #12]
  402ab0:	89a3      	ldrh	r3, [r4, #12]
  402ab2:	6127      	str	r7, [r4, #16]
  402ab4:	f013 0008 	ands.w	r0, r3, #8
  402ab8:	6165      	str	r5, [r4, #20]
  402aba:	d01b      	beq.n	402af4 <setvbuf+0x140>
  402abc:	f013 0001 	ands.w	r0, r3, #1
  402ac0:	bf18      	it	ne
  402ac2:	426d      	negne	r5, r5
  402ac4:	f04f 0300 	mov.w	r3, #0
  402ac8:	bf1d      	ittte	ne
  402aca:	60a3      	strne	r3, [r4, #8]
  402acc:	61a5      	strne	r5, [r4, #24]
  402ace:	4618      	movne	r0, r3
  402ad0:	60a5      	streq	r5, [r4, #8]
  402ad2:	e7d0      	b.n	402a76 <setvbuf+0xc2>
  402ad4:	4648      	mov	r0, r9
  402ad6:	f001 f82f 	bl	403b38 <malloc>
  402ada:	4607      	mov	r7, r0
  402adc:	2800      	cmp	r0, #0
  402ade:	d0bc      	beq.n	402a5a <setvbuf+0xa6>
  402ae0:	89a3      	ldrh	r3, [r4, #12]
  402ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402ae6:	81a3      	strh	r3, [r4, #12]
  402ae8:	464d      	mov	r5, r9
  402aea:	e7d3      	b.n	402a94 <setvbuf+0xe0>
  402aec:	2000      	movs	r0, #0
  402aee:	e7b6      	b.n	402a5e <setvbuf+0xaa>
  402af0:	46a9      	mov	r9, r5
  402af2:	e7f5      	b.n	402ae0 <setvbuf+0x12c>
  402af4:	60a0      	str	r0, [r4, #8]
  402af6:	e7be      	b.n	402a76 <setvbuf+0xc2>
  402af8:	f04f 30ff 	mov.w	r0, #4294967295
  402afc:	e7bb      	b.n	402a76 <setvbuf+0xc2>
  402afe:	bf00      	nop
  402b00:	20400048 	.word	0x20400048
  402b04:	0040473c 	.word	0x0040473c
  402b08:	0040475c 	.word	0x0040475c
  402b0c:	0040471c 	.word	0x0040471c

00402b10 <strlen>:
  402b10:	4603      	mov	r3, r0
  402b12:	f813 2b01 	ldrb.w	r2, [r3], #1
  402b16:	2a00      	cmp	r2, #0
  402b18:	d1fb      	bne.n	402b12 <strlen+0x2>
  402b1a:	1a18      	subs	r0, r3, r0
  402b1c:	3801      	subs	r0, #1
  402b1e:	4770      	bx	lr

00402b20 <quorem>:
  402b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b24:	6903      	ldr	r3, [r0, #16]
  402b26:	690c      	ldr	r4, [r1, #16]
  402b28:	429c      	cmp	r4, r3
  402b2a:	4680      	mov	r8, r0
  402b2c:	f300 8082 	bgt.w	402c34 <quorem+0x114>
  402b30:	3c01      	subs	r4, #1
  402b32:	f101 0714 	add.w	r7, r1, #20
  402b36:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  402b3a:	f100 0614 	add.w	r6, r0, #20
  402b3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  402b42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  402b46:	eb06 030e 	add.w	r3, r6, lr
  402b4a:	3501      	adds	r5, #1
  402b4c:	eb07 090e 	add.w	r9, r7, lr
  402b50:	9301      	str	r3, [sp, #4]
  402b52:	fbb0 f5f5 	udiv	r5, r0, r5
  402b56:	b395      	cbz	r5, 402bbe <quorem+0x9e>
  402b58:	f04f 0a00 	mov.w	sl, #0
  402b5c:	4638      	mov	r0, r7
  402b5e:	46b4      	mov	ip, r6
  402b60:	46d3      	mov	fp, sl
  402b62:	f850 2b04 	ldr.w	r2, [r0], #4
  402b66:	b293      	uxth	r3, r2
  402b68:	fb05 a303 	mla	r3, r5, r3, sl
  402b6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  402b70:	b29b      	uxth	r3, r3
  402b72:	ebab 0303 	sub.w	r3, fp, r3
  402b76:	0c12      	lsrs	r2, r2, #16
  402b78:	f8bc b000 	ldrh.w	fp, [ip]
  402b7c:	fb05 a202 	mla	r2, r5, r2, sl
  402b80:	fa13 f38b 	uxtah	r3, r3, fp
  402b84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  402b88:	fa1f fb82 	uxth.w	fp, r2
  402b8c:	f8dc 2000 	ldr.w	r2, [ip]
  402b90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  402b94:	eb02 4223 	add.w	r2, r2, r3, asr #16
  402b98:	b29b      	uxth	r3, r3
  402b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402b9e:	4581      	cmp	r9, r0
  402ba0:	ea4f 4b22 	mov.w	fp, r2, asr #16
  402ba4:	f84c 3b04 	str.w	r3, [ip], #4
  402ba8:	d2db      	bcs.n	402b62 <quorem+0x42>
  402baa:	f856 300e 	ldr.w	r3, [r6, lr]
  402bae:	b933      	cbnz	r3, 402bbe <quorem+0x9e>
  402bb0:	9b01      	ldr	r3, [sp, #4]
  402bb2:	3b04      	subs	r3, #4
  402bb4:	429e      	cmp	r6, r3
  402bb6:	461a      	mov	r2, r3
  402bb8:	d330      	bcc.n	402c1c <quorem+0xfc>
  402bba:	f8c8 4010 	str.w	r4, [r8, #16]
  402bbe:	4640      	mov	r0, r8
  402bc0:	f001 f9cb 	bl	403f5a <__mcmp>
  402bc4:	2800      	cmp	r0, #0
  402bc6:	db25      	blt.n	402c14 <quorem+0xf4>
  402bc8:	3501      	adds	r5, #1
  402bca:	4630      	mov	r0, r6
  402bcc:	f04f 0e00 	mov.w	lr, #0
  402bd0:	f857 2b04 	ldr.w	r2, [r7], #4
  402bd4:	f8d0 c000 	ldr.w	ip, [r0]
  402bd8:	b293      	uxth	r3, r2
  402bda:	ebae 0303 	sub.w	r3, lr, r3
  402bde:	0c12      	lsrs	r2, r2, #16
  402be0:	fa13 f38c 	uxtah	r3, r3, ip
  402be4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  402be8:	eb02 4223 	add.w	r2, r2, r3, asr #16
  402bec:	b29b      	uxth	r3, r3
  402bee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402bf2:	45b9      	cmp	r9, r7
  402bf4:	ea4f 4e22 	mov.w	lr, r2, asr #16
  402bf8:	f840 3b04 	str.w	r3, [r0], #4
  402bfc:	d2e8      	bcs.n	402bd0 <quorem+0xb0>
  402bfe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  402c02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  402c06:	b92a      	cbnz	r2, 402c14 <quorem+0xf4>
  402c08:	3b04      	subs	r3, #4
  402c0a:	429e      	cmp	r6, r3
  402c0c:	461a      	mov	r2, r3
  402c0e:	d30b      	bcc.n	402c28 <quorem+0x108>
  402c10:	f8c8 4010 	str.w	r4, [r8, #16]
  402c14:	4628      	mov	r0, r5
  402c16:	b003      	add	sp, #12
  402c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c1c:	6812      	ldr	r2, [r2, #0]
  402c1e:	3b04      	subs	r3, #4
  402c20:	2a00      	cmp	r2, #0
  402c22:	d1ca      	bne.n	402bba <quorem+0x9a>
  402c24:	3c01      	subs	r4, #1
  402c26:	e7c5      	b.n	402bb4 <quorem+0x94>
  402c28:	6812      	ldr	r2, [r2, #0]
  402c2a:	3b04      	subs	r3, #4
  402c2c:	2a00      	cmp	r2, #0
  402c2e:	d1ef      	bne.n	402c10 <quorem+0xf0>
  402c30:	3c01      	subs	r4, #1
  402c32:	e7ea      	b.n	402c0a <quorem+0xea>
  402c34:	2000      	movs	r0, #0
  402c36:	e7ee      	b.n	402c16 <quorem+0xf6>

00402c38 <_dtoa_r>:
  402c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c3c:	6a46      	ldr	r6, [r0, #36]	; 0x24
  402c3e:	b095      	sub	sp, #84	; 0x54
  402c40:	4604      	mov	r4, r0
  402c42:	9d21      	ldr	r5, [sp, #132]	; 0x84
  402c44:	e9cd 2302 	strd	r2, r3, [sp, #8]
  402c48:	b93e      	cbnz	r6, 402c5a <_dtoa_r+0x22>
  402c4a:	2010      	movs	r0, #16
  402c4c:	f000 ff74 	bl	403b38 <malloc>
  402c50:	6260      	str	r0, [r4, #36]	; 0x24
  402c52:	6046      	str	r6, [r0, #4]
  402c54:	6086      	str	r6, [r0, #8]
  402c56:	6006      	str	r6, [r0, #0]
  402c58:	60c6      	str	r6, [r0, #12]
  402c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402c5c:	6819      	ldr	r1, [r3, #0]
  402c5e:	b151      	cbz	r1, 402c76 <_dtoa_r+0x3e>
  402c60:	685a      	ldr	r2, [r3, #4]
  402c62:	604a      	str	r2, [r1, #4]
  402c64:	2301      	movs	r3, #1
  402c66:	4093      	lsls	r3, r2
  402c68:	608b      	str	r3, [r1, #8]
  402c6a:	4620      	mov	r0, r4
  402c6c:	f000 ffa0 	bl	403bb0 <_Bfree>
  402c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402c72:	2200      	movs	r2, #0
  402c74:	601a      	str	r2, [r3, #0]
  402c76:	9b03      	ldr	r3, [sp, #12]
  402c78:	2b00      	cmp	r3, #0
  402c7a:	bfbf      	itttt	lt
  402c7c:	2301      	movlt	r3, #1
  402c7e:	602b      	strlt	r3, [r5, #0]
  402c80:	9b03      	ldrlt	r3, [sp, #12]
  402c82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  402c86:	bfb2      	itee	lt
  402c88:	9303      	strlt	r3, [sp, #12]
  402c8a:	2300      	movge	r3, #0
  402c8c:	602b      	strge	r3, [r5, #0]
  402c8e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  402c92:	4ba9      	ldr	r3, [pc, #676]	; (402f38 <_dtoa_r+0x300>)
  402c94:	ea33 0309 	bics.w	r3, r3, r9
  402c98:	d11b      	bne.n	402cd2 <_dtoa_r+0x9a>
  402c9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402c9c:	f242 730f 	movw	r3, #9999	; 0x270f
  402ca0:	6013      	str	r3, [r2, #0]
  402ca2:	9b02      	ldr	r3, [sp, #8]
  402ca4:	b923      	cbnz	r3, 402cb0 <_dtoa_r+0x78>
  402ca6:	f3c9 0013 	ubfx	r0, r9, #0, #20
  402caa:	2800      	cmp	r0, #0
  402cac:	f000 8581 	beq.w	4037b2 <_dtoa_r+0xb7a>
  402cb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402cb2:	b953      	cbnz	r3, 402cca <_dtoa_r+0x92>
  402cb4:	4ba1      	ldr	r3, [pc, #644]	; (402f3c <_dtoa_r+0x304>)
  402cb6:	e021      	b.n	402cfc <_dtoa_r+0xc4>
  402cb8:	4ba1      	ldr	r3, [pc, #644]	; (402f40 <_dtoa_r+0x308>)
  402cba:	9306      	str	r3, [sp, #24]
  402cbc:	3308      	adds	r3, #8
  402cbe:	9a22      	ldr	r2, [sp, #136]	; 0x88
  402cc0:	6013      	str	r3, [r2, #0]
  402cc2:	9806      	ldr	r0, [sp, #24]
  402cc4:	b015      	add	sp, #84	; 0x54
  402cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cca:	4b9c      	ldr	r3, [pc, #624]	; (402f3c <_dtoa_r+0x304>)
  402ccc:	9306      	str	r3, [sp, #24]
  402cce:	3303      	adds	r3, #3
  402cd0:	e7f5      	b.n	402cbe <_dtoa_r+0x86>
  402cd2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  402cd6:	2200      	movs	r2, #0
  402cd8:	2300      	movs	r3, #0
  402cda:	4630      	mov	r0, r6
  402cdc:	4639      	mov	r1, r7
  402cde:	f7ff fa91 	bl	402204 <__aeabi_dcmpeq>
  402ce2:	4680      	mov	r8, r0
  402ce4:	b160      	cbz	r0, 402d00 <_dtoa_r+0xc8>
  402ce6:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402ce8:	2301      	movs	r3, #1
  402cea:	6013      	str	r3, [r2, #0]
  402cec:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402cee:	2b00      	cmp	r3, #0
  402cf0:	f000 855c 	beq.w	4037ac <_dtoa_r+0xb74>
  402cf4:	4b93      	ldr	r3, [pc, #588]	; (402f44 <_dtoa_r+0x30c>)
  402cf6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  402cf8:	6013      	str	r3, [r2, #0]
  402cfa:	3b01      	subs	r3, #1
  402cfc:	9306      	str	r3, [sp, #24]
  402cfe:	e7e0      	b.n	402cc2 <_dtoa_r+0x8a>
  402d00:	ab12      	add	r3, sp, #72	; 0x48
  402d02:	9301      	str	r3, [sp, #4]
  402d04:	ab13      	add	r3, sp, #76	; 0x4c
  402d06:	9300      	str	r3, [sp, #0]
  402d08:	4632      	mov	r2, r6
  402d0a:	463b      	mov	r3, r7
  402d0c:	4620      	mov	r0, r4
  402d0e:	f001 f99c 	bl	40404a <__d2b>
  402d12:	f3c9 550a 	ubfx	r5, r9, #20, #11
  402d16:	4682      	mov	sl, r0
  402d18:	2d00      	cmp	r5, #0
  402d1a:	d07c      	beq.n	402e16 <_dtoa_r+0x1de>
  402d1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
  402d20:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  402d24:	4630      	mov	r0, r6
  402d26:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  402d2a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  402d2e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  402d32:	2200      	movs	r2, #0
  402d34:	4b84      	ldr	r3, [pc, #528]	; (402f48 <_dtoa_r+0x310>)
  402d36:	f7fe fe49 	bl	4019cc <__aeabi_dsub>
  402d3a:	a379      	add	r3, pc, #484	; (adr r3, 402f20 <_dtoa_r+0x2e8>)
  402d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d40:	f7fe fff8 	bl	401d34 <__aeabi_dmul>
  402d44:	a378      	add	r3, pc, #480	; (adr r3, 402f28 <_dtoa_r+0x2f0>)
  402d46:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d4a:	f7fe fe41 	bl	4019d0 <__adddf3>
  402d4e:	4606      	mov	r6, r0
  402d50:	4628      	mov	r0, r5
  402d52:	460f      	mov	r7, r1
  402d54:	f7fe ff88 	bl	401c68 <__aeabi_i2d>
  402d58:	a375      	add	r3, pc, #468	; (adr r3, 402f30 <_dtoa_r+0x2f8>)
  402d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d5e:	f7fe ffe9 	bl	401d34 <__aeabi_dmul>
  402d62:	4602      	mov	r2, r0
  402d64:	460b      	mov	r3, r1
  402d66:	4630      	mov	r0, r6
  402d68:	4639      	mov	r1, r7
  402d6a:	f7fe fe31 	bl	4019d0 <__adddf3>
  402d6e:	4606      	mov	r6, r0
  402d70:	460f      	mov	r7, r1
  402d72:	f7ff fa79 	bl	402268 <__aeabi_d2iz>
  402d76:	2200      	movs	r2, #0
  402d78:	4683      	mov	fp, r0
  402d7a:	2300      	movs	r3, #0
  402d7c:	4630      	mov	r0, r6
  402d7e:	4639      	mov	r1, r7
  402d80:	f7ff fa4a 	bl	402218 <__aeabi_dcmplt>
  402d84:	b158      	cbz	r0, 402d9e <_dtoa_r+0x166>
  402d86:	4658      	mov	r0, fp
  402d88:	f7fe ff6e 	bl	401c68 <__aeabi_i2d>
  402d8c:	4602      	mov	r2, r0
  402d8e:	460b      	mov	r3, r1
  402d90:	4630      	mov	r0, r6
  402d92:	4639      	mov	r1, r7
  402d94:	f7ff fa36 	bl	402204 <__aeabi_dcmpeq>
  402d98:	b908      	cbnz	r0, 402d9e <_dtoa_r+0x166>
  402d9a:	f10b 3bff 	add.w	fp, fp, #4294967295
  402d9e:	f1bb 0f16 	cmp.w	fp, #22
  402da2:	d857      	bhi.n	402e54 <_dtoa_r+0x21c>
  402da4:	4969      	ldr	r1, [pc, #420]	; (402f4c <_dtoa_r+0x314>)
  402da6:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  402daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402dae:	e9d1 0100 	ldrd	r0, r1, [r1]
  402db2:	f7ff fa4f 	bl	402254 <__aeabi_dcmpgt>
  402db6:	2800      	cmp	r0, #0
  402db8:	d04e      	beq.n	402e58 <_dtoa_r+0x220>
  402dba:	f10b 3bff 	add.w	fp, fp, #4294967295
  402dbe:	2300      	movs	r3, #0
  402dc0:	930d      	str	r3, [sp, #52]	; 0x34
  402dc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402dc4:	1b5d      	subs	r5, r3, r5
  402dc6:	1e6b      	subs	r3, r5, #1
  402dc8:	9307      	str	r3, [sp, #28]
  402dca:	bf43      	ittte	mi
  402dcc:	2300      	movmi	r3, #0
  402dce:	f1c5 0801 	rsbmi	r8, r5, #1
  402dd2:	9307      	strmi	r3, [sp, #28]
  402dd4:	f04f 0800 	movpl.w	r8, #0
  402dd8:	f1bb 0f00 	cmp.w	fp, #0
  402ddc:	db3e      	blt.n	402e5c <_dtoa_r+0x224>
  402dde:	9b07      	ldr	r3, [sp, #28]
  402de0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  402de4:	445b      	add	r3, fp
  402de6:	9307      	str	r3, [sp, #28]
  402de8:	2300      	movs	r3, #0
  402dea:	9308      	str	r3, [sp, #32]
  402dec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402dee:	2b09      	cmp	r3, #9
  402df0:	f200 80b0 	bhi.w	402f54 <_dtoa_r+0x31c>
  402df4:	2b05      	cmp	r3, #5
  402df6:	bfc4      	itt	gt
  402df8:	3b04      	subgt	r3, #4
  402dfa:	931e      	strgt	r3, [sp, #120]	; 0x78
  402dfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402dfe:	f1a3 0302 	sub.w	r3, r3, #2
  402e02:	bfcc      	ite	gt
  402e04:	2600      	movgt	r6, #0
  402e06:	2601      	movle	r6, #1
  402e08:	2b03      	cmp	r3, #3
  402e0a:	f200 80af 	bhi.w	402f6c <_dtoa_r+0x334>
  402e0e:	e8df f003 	tbb	[pc, r3]
  402e12:	8583      	.short	0x8583
  402e14:	772d      	.short	0x772d
  402e16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402e18:	9d12      	ldr	r5, [sp, #72]	; 0x48
  402e1a:	441d      	add	r5, r3
  402e1c:	f205 4332 	addw	r3, r5, #1074	; 0x432
  402e20:	2b20      	cmp	r3, #32
  402e22:	dd11      	ble.n	402e48 <_dtoa_r+0x210>
  402e24:	9a02      	ldr	r2, [sp, #8]
  402e26:	f205 4012 	addw	r0, r5, #1042	; 0x412
  402e2a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  402e2e:	fa22 f000 	lsr.w	r0, r2, r0
  402e32:	fa09 f303 	lsl.w	r3, r9, r3
  402e36:	4318      	orrs	r0, r3
  402e38:	f7fe ff06 	bl	401c48 <__aeabi_ui2d>
  402e3c:	2301      	movs	r3, #1
  402e3e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  402e42:	3d01      	subs	r5, #1
  402e44:	9310      	str	r3, [sp, #64]	; 0x40
  402e46:	e774      	b.n	402d32 <_dtoa_r+0xfa>
  402e48:	f1c3 0020 	rsb	r0, r3, #32
  402e4c:	9b02      	ldr	r3, [sp, #8]
  402e4e:	fa03 f000 	lsl.w	r0, r3, r0
  402e52:	e7f1      	b.n	402e38 <_dtoa_r+0x200>
  402e54:	2301      	movs	r3, #1
  402e56:	e7b3      	b.n	402dc0 <_dtoa_r+0x188>
  402e58:	900d      	str	r0, [sp, #52]	; 0x34
  402e5a:	e7b2      	b.n	402dc2 <_dtoa_r+0x18a>
  402e5c:	f1cb 0300 	rsb	r3, fp, #0
  402e60:	9308      	str	r3, [sp, #32]
  402e62:	2300      	movs	r3, #0
  402e64:	eba8 080b 	sub.w	r8, r8, fp
  402e68:	930c      	str	r3, [sp, #48]	; 0x30
  402e6a:	e7bf      	b.n	402dec <_dtoa_r+0x1b4>
  402e6c:	2301      	movs	r3, #1
  402e6e:	9309      	str	r3, [sp, #36]	; 0x24
  402e70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402e72:	2b00      	cmp	r3, #0
  402e74:	dd7d      	ble.n	402f72 <_dtoa_r+0x33a>
  402e76:	9304      	str	r3, [sp, #16]
  402e78:	4699      	mov	r9, r3
  402e7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  402e7c:	2200      	movs	r2, #0
  402e7e:	606a      	str	r2, [r5, #4]
  402e80:	2104      	movs	r1, #4
  402e82:	f101 0214 	add.w	r2, r1, #20
  402e86:	429a      	cmp	r2, r3
  402e88:	d978      	bls.n	402f7c <_dtoa_r+0x344>
  402e8a:	6869      	ldr	r1, [r5, #4]
  402e8c:	4620      	mov	r0, r4
  402e8e:	f000 fe5b 	bl	403b48 <_Balloc>
  402e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402e94:	6028      	str	r0, [r5, #0]
  402e96:	681b      	ldr	r3, [r3, #0]
  402e98:	9306      	str	r3, [sp, #24]
  402e9a:	f1b9 0f0e 	cmp.w	r9, #14
  402e9e:	f200 80ee 	bhi.w	40307e <_dtoa_r+0x446>
  402ea2:	2e00      	cmp	r6, #0
  402ea4:	f000 80eb 	beq.w	40307e <_dtoa_r+0x446>
  402ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402eac:	f1bb 0f00 	cmp.w	fp, #0
  402eb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  402eb4:	dd77      	ble.n	402fa6 <_dtoa_r+0x36e>
  402eb6:	4a25      	ldr	r2, [pc, #148]	; (402f4c <_dtoa_r+0x314>)
  402eb8:	f00b 030f 	and.w	r3, fp, #15
  402ebc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ec4:	ea4f 162b 	mov.w	r6, fp, asr #4
  402ec8:	06f0      	lsls	r0, r6, #27
  402eca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  402ece:	d55a      	bpl.n	402f86 <_dtoa_r+0x34e>
  402ed0:	4b1f      	ldr	r3, [pc, #124]	; (402f50 <_dtoa_r+0x318>)
  402ed2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  402ed6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  402eda:	f7ff f855 	bl	401f88 <__aeabi_ddiv>
  402ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402ee2:	f006 060f 	and.w	r6, r6, #15
  402ee6:	2503      	movs	r5, #3
  402ee8:	4f19      	ldr	r7, [pc, #100]	; (402f50 <_dtoa_r+0x318>)
  402eea:	2e00      	cmp	r6, #0
  402eec:	d14d      	bne.n	402f8a <_dtoa_r+0x352>
  402eee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  402ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402ef6:	f7ff f847 	bl	401f88 <__aeabi_ddiv>
  402efa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402efe:	e06c      	b.n	402fda <_dtoa_r+0x3a2>
  402f00:	2301      	movs	r3, #1
  402f02:	9309      	str	r3, [sp, #36]	; 0x24
  402f04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402f06:	445b      	add	r3, fp
  402f08:	f103 0901 	add.w	r9, r3, #1
  402f0c:	9304      	str	r3, [sp, #16]
  402f0e:	464b      	mov	r3, r9
  402f10:	2b01      	cmp	r3, #1
  402f12:	bfb8      	it	lt
  402f14:	2301      	movlt	r3, #1
  402f16:	e7b0      	b.n	402e7a <_dtoa_r+0x242>
  402f18:	2300      	movs	r3, #0
  402f1a:	e7a8      	b.n	402e6e <_dtoa_r+0x236>
  402f1c:	2300      	movs	r3, #0
  402f1e:	e7f0      	b.n	402f02 <_dtoa_r+0x2ca>
  402f20:	636f4361 	.word	0x636f4361
  402f24:	3fd287a7 	.word	0x3fd287a7
  402f28:	8b60c8b3 	.word	0x8b60c8b3
  402f2c:	3fc68a28 	.word	0x3fc68a28
  402f30:	509f79fb 	.word	0x509f79fb
  402f34:	3fd34413 	.word	0x3fd34413
  402f38:	7ff00000 	.word	0x7ff00000
  402f3c:	00404717 	.word	0x00404717
  402f40:	0040470e 	.word	0x0040470e
  402f44:	0040470d 	.word	0x0040470d
  402f48:	3ff80000 	.word	0x3ff80000
  402f4c:	004047a8 	.word	0x004047a8
  402f50:	00404780 	.word	0x00404780
  402f54:	2601      	movs	r6, #1
  402f56:	2300      	movs	r3, #0
  402f58:	931e      	str	r3, [sp, #120]	; 0x78
  402f5a:	9609      	str	r6, [sp, #36]	; 0x24
  402f5c:	f04f 33ff 	mov.w	r3, #4294967295
  402f60:	9304      	str	r3, [sp, #16]
  402f62:	4699      	mov	r9, r3
  402f64:	2200      	movs	r2, #0
  402f66:	2312      	movs	r3, #18
  402f68:	921f      	str	r2, [sp, #124]	; 0x7c
  402f6a:	e786      	b.n	402e7a <_dtoa_r+0x242>
  402f6c:	2301      	movs	r3, #1
  402f6e:	9309      	str	r3, [sp, #36]	; 0x24
  402f70:	e7f4      	b.n	402f5c <_dtoa_r+0x324>
  402f72:	2301      	movs	r3, #1
  402f74:	9304      	str	r3, [sp, #16]
  402f76:	4699      	mov	r9, r3
  402f78:	461a      	mov	r2, r3
  402f7a:	e7f5      	b.n	402f68 <_dtoa_r+0x330>
  402f7c:	686a      	ldr	r2, [r5, #4]
  402f7e:	3201      	adds	r2, #1
  402f80:	606a      	str	r2, [r5, #4]
  402f82:	0049      	lsls	r1, r1, #1
  402f84:	e77d      	b.n	402e82 <_dtoa_r+0x24a>
  402f86:	2502      	movs	r5, #2
  402f88:	e7ae      	b.n	402ee8 <_dtoa_r+0x2b0>
  402f8a:	07f1      	lsls	r1, r6, #31
  402f8c:	d508      	bpl.n	402fa0 <_dtoa_r+0x368>
  402f8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  402f92:	e9d7 2300 	ldrd	r2, r3, [r7]
  402f96:	f7fe fecd 	bl	401d34 <__aeabi_dmul>
  402f9a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  402f9e:	3501      	adds	r5, #1
  402fa0:	1076      	asrs	r6, r6, #1
  402fa2:	3708      	adds	r7, #8
  402fa4:	e7a1      	b.n	402eea <_dtoa_r+0x2b2>
  402fa6:	f000 80a5 	beq.w	4030f4 <_dtoa_r+0x4bc>
  402faa:	f1cb 0600 	rsb	r6, fp, #0
  402fae:	4ba3      	ldr	r3, [pc, #652]	; (40323c <_dtoa_r+0x604>)
  402fb0:	4fa3      	ldr	r7, [pc, #652]	; (403240 <_dtoa_r+0x608>)
  402fb2:	f006 020f 	and.w	r2, r6, #15
  402fb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  402fba:	e9d3 2300 	ldrd	r2, r3, [r3]
  402fbe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  402fc2:	f7fe feb7 	bl	401d34 <__aeabi_dmul>
  402fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402fca:	1136      	asrs	r6, r6, #4
  402fcc:	2300      	movs	r3, #0
  402fce:	2502      	movs	r5, #2
  402fd0:	2e00      	cmp	r6, #0
  402fd2:	f040 8084 	bne.w	4030de <_dtoa_r+0x4a6>
  402fd6:	2b00      	cmp	r3, #0
  402fd8:	d18f      	bne.n	402efa <_dtoa_r+0x2c2>
  402fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402fdc:	2b00      	cmp	r3, #0
  402fde:	f000 808b 	beq.w	4030f8 <_dtoa_r+0x4c0>
  402fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402fe6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  402fea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  402fee:	2200      	movs	r2, #0
  402ff0:	4b94      	ldr	r3, [pc, #592]	; (403244 <_dtoa_r+0x60c>)
  402ff2:	f7ff f911 	bl	402218 <__aeabi_dcmplt>
  402ff6:	2800      	cmp	r0, #0
  402ff8:	d07e      	beq.n	4030f8 <_dtoa_r+0x4c0>
  402ffa:	f1b9 0f00 	cmp.w	r9, #0
  402ffe:	d07b      	beq.n	4030f8 <_dtoa_r+0x4c0>
  403000:	9b04      	ldr	r3, [sp, #16]
  403002:	2b00      	cmp	r3, #0
  403004:	dd37      	ble.n	403076 <_dtoa_r+0x43e>
  403006:	2200      	movs	r2, #0
  403008:	4b8f      	ldr	r3, [pc, #572]	; (403248 <_dtoa_r+0x610>)
  40300a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40300e:	f7fe fe91 	bl	401d34 <__aeabi_dmul>
  403012:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403016:	9e04      	ldr	r6, [sp, #16]
  403018:	f10b 37ff 	add.w	r7, fp, #4294967295
  40301c:	3501      	adds	r5, #1
  40301e:	4628      	mov	r0, r5
  403020:	f7fe fe22 	bl	401c68 <__aeabi_i2d>
  403024:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403028:	f7fe fe84 	bl	401d34 <__aeabi_dmul>
  40302c:	4b87      	ldr	r3, [pc, #540]	; (40324c <_dtoa_r+0x614>)
  40302e:	2200      	movs	r2, #0
  403030:	f7fe fcce 	bl	4019d0 <__adddf3>
  403034:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40303a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  40303e:	950b      	str	r5, [sp, #44]	; 0x2c
  403040:	2e00      	cmp	r6, #0
  403042:	d15c      	bne.n	4030fe <_dtoa_r+0x4c6>
  403044:	2200      	movs	r2, #0
  403046:	4b82      	ldr	r3, [pc, #520]	; (403250 <_dtoa_r+0x618>)
  403048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40304c:	f7fe fcbe 	bl	4019cc <__aeabi_dsub>
  403050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403052:	462b      	mov	r3, r5
  403054:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403058:	f7ff f8fc 	bl	402254 <__aeabi_dcmpgt>
  40305c:	2800      	cmp	r0, #0
  40305e:	f040 82f7 	bne.w	403650 <_dtoa_r+0xa18>
  403062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403064:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  403068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40306c:	f7ff f8d4 	bl	402218 <__aeabi_dcmplt>
  403070:	2800      	cmp	r0, #0
  403072:	f040 82eb 	bne.w	40364c <_dtoa_r+0xa14>
  403076:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40307a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40307e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403080:	2b00      	cmp	r3, #0
  403082:	f2c0 8151 	blt.w	403328 <_dtoa_r+0x6f0>
  403086:	f1bb 0f0e 	cmp.w	fp, #14
  40308a:	f300 814d 	bgt.w	403328 <_dtoa_r+0x6f0>
  40308e:	4b6b      	ldr	r3, [pc, #428]	; (40323c <_dtoa_r+0x604>)
  403090:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  403094:	e9d3 2300 	ldrd	r2, r3, [r3]
  403098:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40309c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40309e:	2b00      	cmp	r3, #0
  4030a0:	f280 80da 	bge.w	403258 <_dtoa_r+0x620>
  4030a4:	f1b9 0f00 	cmp.w	r9, #0
  4030a8:	f300 80d6 	bgt.w	403258 <_dtoa_r+0x620>
  4030ac:	f040 82cd 	bne.w	40364a <_dtoa_r+0xa12>
  4030b0:	2200      	movs	r2, #0
  4030b2:	4b67      	ldr	r3, [pc, #412]	; (403250 <_dtoa_r+0x618>)
  4030b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4030b8:	f7fe fe3c 	bl	401d34 <__aeabi_dmul>
  4030bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4030c0:	f7ff f8be 	bl	402240 <__aeabi_dcmpge>
  4030c4:	464e      	mov	r6, r9
  4030c6:	464f      	mov	r7, r9
  4030c8:	2800      	cmp	r0, #0
  4030ca:	f040 82a4 	bne.w	403616 <_dtoa_r+0x9de>
  4030ce:	9b06      	ldr	r3, [sp, #24]
  4030d0:	9a06      	ldr	r2, [sp, #24]
  4030d2:	1c5d      	adds	r5, r3, #1
  4030d4:	2331      	movs	r3, #49	; 0x31
  4030d6:	7013      	strb	r3, [r2, #0]
  4030d8:	f10b 0b01 	add.w	fp, fp, #1
  4030dc:	e29f      	b.n	40361e <_dtoa_r+0x9e6>
  4030de:	07f2      	lsls	r2, r6, #31
  4030e0:	d505      	bpl.n	4030ee <_dtoa_r+0x4b6>
  4030e2:	e9d7 2300 	ldrd	r2, r3, [r7]
  4030e6:	f7fe fe25 	bl	401d34 <__aeabi_dmul>
  4030ea:	3501      	adds	r5, #1
  4030ec:	2301      	movs	r3, #1
  4030ee:	1076      	asrs	r6, r6, #1
  4030f0:	3708      	adds	r7, #8
  4030f2:	e76d      	b.n	402fd0 <_dtoa_r+0x398>
  4030f4:	2502      	movs	r5, #2
  4030f6:	e770      	b.n	402fda <_dtoa_r+0x3a2>
  4030f8:	465f      	mov	r7, fp
  4030fa:	464e      	mov	r6, r9
  4030fc:	e78f      	b.n	40301e <_dtoa_r+0x3e6>
  4030fe:	9a06      	ldr	r2, [sp, #24]
  403100:	4b4e      	ldr	r3, [pc, #312]	; (40323c <_dtoa_r+0x604>)
  403102:	4432      	add	r2, r6
  403104:	9211      	str	r2, [sp, #68]	; 0x44
  403106:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403108:	1e71      	subs	r1, r6, #1
  40310a:	2a00      	cmp	r2, #0
  40310c:	d048      	beq.n	4031a0 <_dtoa_r+0x568>
  40310e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  403112:	e9d3 2300 	ldrd	r2, r3, [r3]
  403116:	2000      	movs	r0, #0
  403118:	494e      	ldr	r1, [pc, #312]	; (403254 <_dtoa_r+0x61c>)
  40311a:	f7fe ff35 	bl	401f88 <__aeabi_ddiv>
  40311e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403122:	f7fe fc53 	bl	4019cc <__aeabi_dsub>
  403126:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40312a:	9d06      	ldr	r5, [sp, #24]
  40312c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403130:	f7ff f89a 	bl	402268 <__aeabi_d2iz>
  403134:	4606      	mov	r6, r0
  403136:	f7fe fd97 	bl	401c68 <__aeabi_i2d>
  40313a:	4602      	mov	r2, r0
  40313c:	460b      	mov	r3, r1
  40313e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403142:	f7fe fc43 	bl	4019cc <__aeabi_dsub>
  403146:	3630      	adds	r6, #48	; 0x30
  403148:	f805 6b01 	strb.w	r6, [r5], #1
  40314c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403150:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403154:	f7ff f860 	bl	402218 <__aeabi_dcmplt>
  403158:	2800      	cmp	r0, #0
  40315a:	d165      	bne.n	403228 <_dtoa_r+0x5f0>
  40315c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403160:	2000      	movs	r0, #0
  403162:	4938      	ldr	r1, [pc, #224]	; (403244 <_dtoa_r+0x60c>)
  403164:	f7fe fc32 	bl	4019cc <__aeabi_dsub>
  403168:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40316c:	f7ff f854 	bl	402218 <__aeabi_dcmplt>
  403170:	2800      	cmp	r0, #0
  403172:	f040 80b9 	bne.w	4032e8 <_dtoa_r+0x6b0>
  403176:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403178:	429d      	cmp	r5, r3
  40317a:	f43f af7c 	beq.w	403076 <_dtoa_r+0x43e>
  40317e:	2200      	movs	r2, #0
  403180:	4b31      	ldr	r3, [pc, #196]	; (403248 <_dtoa_r+0x610>)
  403182:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  403186:	f7fe fdd5 	bl	401d34 <__aeabi_dmul>
  40318a:	2200      	movs	r2, #0
  40318c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  403190:	4b2d      	ldr	r3, [pc, #180]	; (403248 <_dtoa_r+0x610>)
  403192:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403196:	f7fe fdcd 	bl	401d34 <__aeabi_dmul>
  40319a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40319e:	e7c5      	b.n	40312c <_dtoa_r+0x4f4>
  4031a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4031a4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4031a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4031ac:	f7fe fdc2 	bl	401d34 <__aeabi_dmul>
  4031b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4031b4:	9d06      	ldr	r5, [sp, #24]
  4031b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4031ba:	f7ff f855 	bl	402268 <__aeabi_d2iz>
  4031be:	4606      	mov	r6, r0
  4031c0:	f7fe fd52 	bl	401c68 <__aeabi_i2d>
  4031c4:	3630      	adds	r6, #48	; 0x30
  4031c6:	4602      	mov	r2, r0
  4031c8:	460b      	mov	r3, r1
  4031ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4031ce:	f7fe fbfd 	bl	4019cc <__aeabi_dsub>
  4031d2:	f805 6b01 	strb.w	r6, [r5], #1
  4031d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4031d8:	42ab      	cmp	r3, r5
  4031da:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4031de:	f04f 0200 	mov.w	r2, #0
  4031e2:	d125      	bne.n	403230 <_dtoa_r+0x5f8>
  4031e4:	4b1b      	ldr	r3, [pc, #108]	; (403254 <_dtoa_r+0x61c>)
  4031e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4031ea:	f7fe fbf1 	bl	4019d0 <__adddf3>
  4031ee:	4602      	mov	r2, r0
  4031f0:	460b      	mov	r3, r1
  4031f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4031f6:	f7ff f82d 	bl	402254 <__aeabi_dcmpgt>
  4031fa:	2800      	cmp	r0, #0
  4031fc:	d174      	bne.n	4032e8 <_dtoa_r+0x6b0>
  4031fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  403202:	2000      	movs	r0, #0
  403204:	4913      	ldr	r1, [pc, #76]	; (403254 <_dtoa_r+0x61c>)
  403206:	f7fe fbe1 	bl	4019cc <__aeabi_dsub>
  40320a:	4602      	mov	r2, r0
  40320c:	460b      	mov	r3, r1
  40320e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403212:	f7ff f801 	bl	402218 <__aeabi_dcmplt>
  403216:	2800      	cmp	r0, #0
  403218:	f43f af2d 	beq.w	403076 <_dtoa_r+0x43e>
  40321c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  403220:	2b30      	cmp	r3, #48	; 0x30
  403222:	f105 32ff 	add.w	r2, r5, #4294967295
  403226:	d001      	beq.n	40322c <_dtoa_r+0x5f4>
  403228:	46bb      	mov	fp, r7
  40322a:	e04c      	b.n	4032c6 <_dtoa_r+0x68e>
  40322c:	4615      	mov	r5, r2
  40322e:	e7f5      	b.n	40321c <_dtoa_r+0x5e4>
  403230:	4b05      	ldr	r3, [pc, #20]	; (403248 <_dtoa_r+0x610>)
  403232:	f7fe fd7f 	bl	401d34 <__aeabi_dmul>
  403236:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40323a:	e7bc      	b.n	4031b6 <_dtoa_r+0x57e>
  40323c:	004047a8 	.word	0x004047a8
  403240:	00404780 	.word	0x00404780
  403244:	3ff00000 	.word	0x3ff00000
  403248:	40240000 	.word	0x40240000
  40324c:	401c0000 	.word	0x401c0000
  403250:	40140000 	.word	0x40140000
  403254:	3fe00000 	.word	0x3fe00000
  403258:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40325c:	9d06      	ldr	r5, [sp, #24]
  40325e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403262:	4630      	mov	r0, r6
  403264:	4639      	mov	r1, r7
  403266:	f7fe fe8f 	bl	401f88 <__aeabi_ddiv>
  40326a:	f7fe fffd 	bl	402268 <__aeabi_d2iz>
  40326e:	4680      	mov	r8, r0
  403270:	f7fe fcfa 	bl	401c68 <__aeabi_i2d>
  403274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403278:	f7fe fd5c 	bl	401d34 <__aeabi_dmul>
  40327c:	4602      	mov	r2, r0
  40327e:	460b      	mov	r3, r1
  403280:	4630      	mov	r0, r6
  403282:	4639      	mov	r1, r7
  403284:	f108 0630 	add.w	r6, r8, #48	; 0x30
  403288:	f7fe fba0 	bl	4019cc <__aeabi_dsub>
  40328c:	f805 6b01 	strb.w	r6, [r5], #1
  403290:	9e06      	ldr	r6, [sp, #24]
  403292:	1bae      	subs	r6, r5, r6
  403294:	45b1      	cmp	r9, r6
  403296:	4602      	mov	r2, r0
  403298:	460b      	mov	r3, r1
  40329a:	d138      	bne.n	40330e <_dtoa_r+0x6d6>
  40329c:	f7fe fb98 	bl	4019d0 <__adddf3>
  4032a0:	4606      	mov	r6, r0
  4032a2:	460f      	mov	r7, r1
  4032a4:	4602      	mov	r2, r0
  4032a6:	460b      	mov	r3, r1
  4032a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4032ac:	f7fe ffb4 	bl	402218 <__aeabi_dcmplt>
  4032b0:	b9c8      	cbnz	r0, 4032e6 <_dtoa_r+0x6ae>
  4032b2:	4632      	mov	r2, r6
  4032b4:	463b      	mov	r3, r7
  4032b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4032ba:	f7fe ffa3 	bl	402204 <__aeabi_dcmpeq>
  4032be:	b110      	cbz	r0, 4032c6 <_dtoa_r+0x68e>
  4032c0:	f018 0f01 	tst.w	r8, #1
  4032c4:	d10f      	bne.n	4032e6 <_dtoa_r+0x6ae>
  4032c6:	4651      	mov	r1, sl
  4032c8:	4620      	mov	r0, r4
  4032ca:	f000 fc71 	bl	403bb0 <_Bfree>
  4032ce:	2300      	movs	r3, #0
  4032d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4032d2:	702b      	strb	r3, [r5, #0]
  4032d4:	f10b 0301 	add.w	r3, fp, #1
  4032d8:	6013      	str	r3, [r2, #0]
  4032da:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4032dc:	2b00      	cmp	r3, #0
  4032de:	f43f acf0 	beq.w	402cc2 <_dtoa_r+0x8a>
  4032e2:	601d      	str	r5, [r3, #0]
  4032e4:	e4ed      	b.n	402cc2 <_dtoa_r+0x8a>
  4032e6:	465f      	mov	r7, fp
  4032e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4032ec:	2a39      	cmp	r2, #57	; 0x39
  4032ee:	f105 33ff 	add.w	r3, r5, #4294967295
  4032f2:	d106      	bne.n	403302 <_dtoa_r+0x6ca>
  4032f4:	9a06      	ldr	r2, [sp, #24]
  4032f6:	429a      	cmp	r2, r3
  4032f8:	d107      	bne.n	40330a <_dtoa_r+0x6d2>
  4032fa:	2330      	movs	r3, #48	; 0x30
  4032fc:	7013      	strb	r3, [r2, #0]
  4032fe:	3701      	adds	r7, #1
  403300:	4613      	mov	r3, r2
  403302:	781a      	ldrb	r2, [r3, #0]
  403304:	3201      	adds	r2, #1
  403306:	701a      	strb	r2, [r3, #0]
  403308:	e78e      	b.n	403228 <_dtoa_r+0x5f0>
  40330a:	461d      	mov	r5, r3
  40330c:	e7ec      	b.n	4032e8 <_dtoa_r+0x6b0>
  40330e:	2200      	movs	r2, #0
  403310:	4bb4      	ldr	r3, [pc, #720]	; (4035e4 <_dtoa_r+0x9ac>)
  403312:	f7fe fd0f 	bl	401d34 <__aeabi_dmul>
  403316:	2200      	movs	r2, #0
  403318:	2300      	movs	r3, #0
  40331a:	4606      	mov	r6, r0
  40331c:	460f      	mov	r7, r1
  40331e:	f7fe ff71 	bl	402204 <__aeabi_dcmpeq>
  403322:	2800      	cmp	r0, #0
  403324:	d09b      	beq.n	40325e <_dtoa_r+0x626>
  403326:	e7ce      	b.n	4032c6 <_dtoa_r+0x68e>
  403328:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40332a:	2a00      	cmp	r2, #0
  40332c:	f000 8129 	beq.w	403582 <_dtoa_r+0x94a>
  403330:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403332:	2a01      	cmp	r2, #1
  403334:	f300 810e 	bgt.w	403554 <_dtoa_r+0x91c>
  403338:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40333a:	2a00      	cmp	r2, #0
  40333c:	f000 8106 	beq.w	40354c <_dtoa_r+0x914>
  403340:	f203 4333 	addw	r3, r3, #1075	; 0x433
  403344:	9e08      	ldr	r6, [sp, #32]
  403346:	4645      	mov	r5, r8
  403348:	9a07      	ldr	r2, [sp, #28]
  40334a:	2101      	movs	r1, #1
  40334c:	441a      	add	r2, r3
  40334e:	4620      	mov	r0, r4
  403350:	4498      	add	r8, r3
  403352:	9207      	str	r2, [sp, #28]
  403354:	f000 fccc 	bl	403cf0 <__i2b>
  403358:	4607      	mov	r7, r0
  40335a:	2d00      	cmp	r5, #0
  40335c:	dd0b      	ble.n	403376 <_dtoa_r+0x73e>
  40335e:	9b07      	ldr	r3, [sp, #28]
  403360:	2b00      	cmp	r3, #0
  403362:	dd08      	ble.n	403376 <_dtoa_r+0x73e>
  403364:	42ab      	cmp	r3, r5
  403366:	9a07      	ldr	r2, [sp, #28]
  403368:	bfa8      	it	ge
  40336a:	462b      	movge	r3, r5
  40336c:	eba8 0803 	sub.w	r8, r8, r3
  403370:	1aed      	subs	r5, r5, r3
  403372:	1ad3      	subs	r3, r2, r3
  403374:	9307      	str	r3, [sp, #28]
  403376:	9b08      	ldr	r3, [sp, #32]
  403378:	b1fb      	cbz	r3, 4033ba <_dtoa_r+0x782>
  40337a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40337c:	2b00      	cmp	r3, #0
  40337e:	f000 8104 	beq.w	40358a <_dtoa_r+0x952>
  403382:	2e00      	cmp	r6, #0
  403384:	dd11      	ble.n	4033aa <_dtoa_r+0x772>
  403386:	4639      	mov	r1, r7
  403388:	4632      	mov	r2, r6
  40338a:	4620      	mov	r0, r4
  40338c:	f000 fd46 	bl	403e1c <__pow5mult>
  403390:	4652      	mov	r2, sl
  403392:	4601      	mov	r1, r0
  403394:	4607      	mov	r7, r0
  403396:	4620      	mov	r0, r4
  403398:	f000 fcb3 	bl	403d02 <__multiply>
  40339c:	4651      	mov	r1, sl
  40339e:	900a      	str	r0, [sp, #40]	; 0x28
  4033a0:	4620      	mov	r0, r4
  4033a2:	f000 fc05 	bl	403bb0 <_Bfree>
  4033a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4033a8:	469a      	mov	sl, r3
  4033aa:	9b08      	ldr	r3, [sp, #32]
  4033ac:	1b9a      	subs	r2, r3, r6
  4033ae:	d004      	beq.n	4033ba <_dtoa_r+0x782>
  4033b0:	4651      	mov	r1, sl
  4033b2:	4620      	mov	r0, r4
  4033b4:	f000 fd32 	bl	403e1c <__pow5mult>
  4033b8:	4682      	mov	sl, r0
  4033ba:	2101      	movs	r1, #1
  4033bc:	4620      	mov	r0, r4
  4033be:	f000 fc97 	bl	403cf0 <__i2b>
  4033c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4033c4:	2b00      	cmp	r3, #0
  4033c6:	4606      	mov	r6, r0
  4033c8:	f340 80e1 	ble.w	40358e <_dtoa_r+0x956>
  4033cc:	461a      	mov	r2, r3
  4033ce:	4601      	mov	r1, r0
  4033d0:	4620      	mov	r0, r4
  4033d2:	f000 fd23 	bl	403e1c <__pow5mult>
  4033d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4033d8:	2b01      	cmp	r3, #1
  4033da:	4606      	mov	r6, r0
  4033dc:	f340 80da 	ble.w	403594 <_dtoa_r+0x95c>
  4033e0:	2300      	movs	r3, #0
  4033e2:	9308      	str	r3, [sp, #32]
  4033e4:	6933      	ldr	r3, [r6, #16]
  4033e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4033ea:	6918      	ldr	r0, [r3, #16]
  4033ec:	f000 fc32 	bl	403c54 <__hi0bits>
  4033f0:	f1c0 0020 	rsb	r0, r0, #32
  4033f4:	9b07      	ldr	r3, [sp, #28]
  4033f6:	4418      	add	r0, r3
  4033f8:	f010 001f 	ands.w	r0, r0, #31
  4033fc:	f000 80f0 	beq.w	4035e0 <_dtoa_r+0x9a8>
  403400:	f1c0 0320 	rsb	r3, r0, #32
  403404:	2b04      	cmp	r3, #4
  403406:	f340 80e2 	ble.w	4035ce <_dtoa_r+0x996>
  40340a:	9b07      	ldr	r3, [sp, #28]
  40340c:	f1c0 001c 	rsb	r0, r0, #28
  403410:	4480      	add	r8, r0
  403412:	4405      	add	r5, r0
  403414:	4403      	add	r3, r0
  403416:	9307      	str	r3, [sp, #28]
  403418:	f1b8 0f00 	cmp.w	r8, #0
  40341c:	dd05      	ble.n	40342a <_dtoa_r+0x7f2>
  40341e:	4651      	mov	r1, sl
  403420:	4642      	mov	r2, r8
  403422:	4620      	mov	r0, r4
  403424:	f000 fd48 	bl	403eb8 <__lshift>
  403428:	4682      	mov	sl, r0
  40342a:	9b07      	ldr	r3, [sp, #28]
  40342c:	2b00      	cmp	r3, #0
  40342e:	dd05      	ble.n	40343c <_dtoa_r+0x804>
  403430:	4631      	mov	r1, r6
  403432:	461a      	mov	r2, r3
  403434:	4620      	mov	r0, r4
  403436:	f000 fd3f 	bl	403eb8 <__lshift>
  40343a:	4606      	mov	r6, r0
  40343c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40343e:	2b00      	cmp	r3, #0
  403440:	f000 80d2 	beq.w	4035e8 <_dtoa_r+0x9b0>
  403444:	4631      	mov	r1, r6
  403446:	4650      	mov	r0, sl
  403448:	f000 fd87 	bl	403f5a <__mcmp>
  40344c:	2800      	cmp	r0, #0
  40344e:	f280 80cb 	bge.w	4035e8 <_dtoa_r+0x9b0>
  403452:	2300      	movs	r3, #0
  403454:	4651      	mov	r1, sl
  403456:	220a      	movs	r2, #10
  403458:	4620      	mov	r0, r4
  40345a:	f000 fbc0 	bl	403bde <__multadd>
  40345e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403460:	f10b 3bff 	add.w	fp, fp, #4294967295
  403464:	4682      	mov	sl, r0
  403466:	2b00      	cmp	r3, #0
  403468:	f000 81aa 	beq.w	4037c0 <_dtoa_r+0xb88>
  40346c:	2300      	movs	r3, #0
  40346e:	4639      	mov	r1, r7
  403470:	220a      	movs	r2, #10
  403472:	4620      	mov	r0, r4
  403474:	f000 fbb3 	bl	403bde <__multadd>
  403478:	9b04      	ldr	r3, [sp, #16]
  40347a:	2b00      	cmp	r3, #0
  40347c:	4607      	mov	r7, r0
  40347e:	dc03      	bgt.n	403488 <_dtoa_r+0x850>
  403480:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403482:	2b02      	cmp	r3, #2
  403484:	f300 80b8 	bgt.w	4035f8 <_dtoa_r+0x9c0>
  403488:	2d00      	cmp	r5, #0
  40348a:	dd05      	ble.n	403498 <_dtoa_r+0x860>
  40348c:	4639      	mov	r1, r7
  40348e:	462a      	mov	r2, r5
  403490:	4620      	mov	r0, r4
  403492:	f000 fd11 	bl	403eb8 <__lshift>
  403496:	4607      	mov	r7, r0
  403498:	9b08      	ldr	r3, [sp, #32]
  40349a:	2b00      	cmp	r3, #0
  40349c:	f000 8110 	beq.w	4036c0 <_dtoa_r+0xa88>
  4034a0:	6879      	ldr	r1, [r7, #4]
  4034a2:	4620      	mov	r0, r4
  4034a4:	f000 fb50 	bl	403b48 <_Balloc>
  4034a8:	693a      	ldr	r2, [r7, #16]
  4034aa:	3202      	adds	r2, #2
  4034ac:	4605      	mov	r5, r0
  4034ae:	0092      	lsls	r2, r2, #2
  4034b0:	f107 010c 	add.w	r1, r7, #12
  4034b4:	300c      	adds	r0, #12
  4034b6:	f7fe ff23 	bl	402300 <memcpy>
  4034ba:	2201      	movs	r2, #1
  4034bc:	4629      	mov	r1, r5
  4034be:	4620      	mov	r0, r4
  4034c0:	f000 fcfa 	bl	403eb8 <__lshift>
  4034c4:	9b02      	ldr	r3, [sp, #8]
  4034c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4034ca:	9707      	str	r7, [sp, #28]
  4034cc:	f003 0301 	and.w	r3, r3, #1
  4034d0:	4607      	mov	r7, r0
  4034d2:	9308      	str	r3, [sp, #32]
  4034d4:	4631      	mov	r1, r6
  4034d6:	4650      	mov	r0, sl
  4034d8:	f7ff fb22 	bl	402b20 <quorem>
  4034dc:	9907      	ldr	r1, [sp, #28]
  4034de:	4605      	mov	r5, r0
  4034e0:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4034e4:	4650      	mov	r0, sl
  4034e6:	f000 fd38 	bl	403f5a <__mcmp>
  4034ea:	463a      	mov	r2, r7
  4034ec:	9002      	str	r0, [sp, #8]
  4034ee:	4631      	mov	r1, r6
  4034f0:	4620      	mov	r0, r4
  4034f2:	f000 fd4c 	bl	403f8e <__mdiff>
  4034f6:	68c3      	ldr	r3, [r0, #12]
  4034f8:	4602      	mov	r2, r0
  4034fa:	2b00      	cmp	r3, #0
  4034fc:	f040 80e2 	bne.w	4036c4 <_dtoa_r+0xa8c>
  403500:	4601      	mov	r1, r0
  403502:	9009      	str	r0, [sp, #36]	; 0x24
  403504:	4650      	mov	r0, sl
  403506:	f000 fd28 	bl	403f5a <__mcmp>
  40350a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40350c:	4603      	mov	r3, r0
  40350e:	4611      	mov	r1, r2
  403510:	4620      	mov	r0, r4
  403512:	9309      	str	r3, [sp, #36]	; 0x24
  403514:	f000 fb4c 	bl	403bb0 <_Bfree>
  403518:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40351a:	2b00      	cmp	r3, #0
  40351c:	f040 80d4 	bne.w	4036c8 <_dtoa_r+0xa90>
  403520:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403522:	2a00      	cmp	r2, #0
  403524:	f040 80d0 	bne.w	4036c8 <_dtoa_r+0xa90>
  403528:	9a08      	ldr	r2, [sp, #32]
  40352a:	2a00      	cmp	r2, #0
  40352c:	f040 80cc 	bne.w	4036c8 <_dtoa_r+0xa90>
  403530:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  403534:	f000 80e8 	beq.w	403708 <_dtoa_r+0xad0>
  403538:	9b02      	ldr	r3, [sp, #8]
  40353a:	2b00      	cmp	r3, #0
  40353c:	dd01      	ble.n	403542 <_dtoa_r+0x90a>
  40353e:	f105 0931 	add.w	r9, r5, #49	; 0x31
  403542:	f108 0501 	add.w	r5, r8, #1
  403546:	f888 9000 	strb.w	r9, [r8]
  40354a:	e06a      	b.n	403622 <_dtoa_r+0x9ea>
  40354c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40354e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  403552:	e6f7      	b.n	403344 <_dtoa_r+0x70c>
  403554:	9b08      	ldr	r3, [sp, #32]
  403556:	f109 36ff 	add.w	r6, r9, #4294967295
  40355a:	42b3      	cmp	r3, r6
  40355c:	bfbf      	itttt	lt
  40355e:	9b08      	ldrlt	r3, [sp, #32]
  403560:	9608      	strlt	r6, [sp, #32]
  403562:	1af2      	sublt	r2, r6, r3
  403564:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  403566:	bfb7      	itett	lt
  403568:	189b      	addlt	r3, r3, r2
  40356a:	1b9e      	subge	r6, r3, r6
  40356c:	930c      	strlt	r3, [sp, #48]	; 0x30
  40356e:	2600      	movlt	r6, #0
  403570:	f1b9 0f00 	cmp.w	r9, #0
  403574:	bfb9      	ittee	lt
  403576:	eba8 0509 	sublt.w	r5, r8, r9
  40357a:	2300      	movlt	r3, #0
  40357c:	4645      	movge	r5, r8
  40357e:	464b      	movge	r3, r9
  403580:	e6e2      	b.n	403348 <_dtoa_r+0x710>
  403582:	9e08      	ldr	r6, [sp, #32]
  403584:	9f09      	ldr	r7, [sp, #36]	; 0x24
  403586:	4645      	mov	r5, r8
  403588:	e6e7      	b.n	40335a <_dtoa_r+0x722>
  40358a:	9a08      	ldr	r2, [sp, #32]
  40358c:	e710      	b.n	4033b0 <_dtoa_r+0x778>
  40358e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403590:	2b01      	cmp	r3, #1
  403592:	dc18      	bgt.n	4035c6 <_dtoa_r+0x98e>
  403594:	9b02      	ldr	r3, [sp, #8]
  403596:	b9b3      	cbnz	r3, 4035c6 <_dtoa_r+0x98e>
  403598:	9b03      	ldr	r3, [sp, #12]
  40359a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40359e:	b9a3      	cbnz	r3, 4035ca <_dtoa_r+0x992>
  4035a0:	9b03      	ldr	r3, [sp, #12]
  4035a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  4035a6:	0d1b      	lsrs	r3, r3, #20
  4035a8:	051b      	lsls	r3, r3, #20
  4035aa:	b12b      	cbz	r3, 4035b8 <_dtoa_r+0x980>
  4035ac:	9b07      	ldr	r3, [sp, #28]
  4035ae:	3301      	adds	r3, #1
  4035b0:	9307      	str	r3, [sp, #28]
  4035b2:	f108 0801 	add.w	r8, r8, #1
  4035b6:	2301      	movs	r3, #1
  4035b8:	9308      	str	r3, [sp, #32]
  4035ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4035bc:	2b00      	cmp	r3, #0
  4035be:	f47f af11 	bne.w	4033e4 <_dtoa_r+0x7ac>
  4035c2:	2001      	movs	r0, #1
  4035c4:	e716      	b.n	4033f4 <_dtoa_r+0x7bc>
  4035c6:	2300      	movs	r3, #0
  4035c8:	e7f6      	b.n	4035b8 <_dtoa_r+0x980>
  4035ca:	9b02      	ldr	r3, [sp, #8]
  4035cc:	e7f4      	b.n	4035b8 <_dtoa_r+0x980>
  4035ce:	f43f af23 	beq.w	403418 <_dtoa_r+0x7e0>
  4035d2:	9a07      	ldr	r2, [sp, #28]
  4035d4:	331c      	adds	r3, #28
  4035d6:	441a      	add	r2, r3
  4035d8:	4498      	add	r8, r3
  4035da:	441d      	add	r5, r3
  4035dc:	4613      	mov	r3, r2
  4035de:	e71a      	b.n	403416 <_dtoa_r+0x7de>
  4035e0:	4603      	mov	r3, r0
  4035e2:	e7f6      	b.n	4035d2 <_dtoa_r+0x99a>
  4035e4:	40240000 	.word	0x40240000
  4035e8:	f1b9 0f00 	cmp.w	r9, #0
  4035ec:	dc33      	bgt.n	403656 <_dtoa_r+0xa1e>
  4035ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4035f0:	2b02      	cmp	r3, #2
  4035f2:	dd30      	ble.n	403656 <_dtoa_r+0xa1e>
  4035f4:	f8cd 9010 	str.w	r9, [sp, #16]
  4035f8:	9b04      	ldr	r3, [sp, #16]
  4035fa:	b963      	cbnz	r3, 403616 <_dtoa_r+0x9de>
  4035fc:	4631      	mov	r1, r6
  4035fe:	2205      	movs	r2, #5
  403600:	4620      	mov	r0, r4
  403602:	f000 faec 	bl	403bde <__multadd>
  403606:	4601      	mov	r1, r0
  403608:	4606      	mov	r6, r0
  40360a:	4650      	mov	r0, sl
  40360c:	f000 fca5 	bl	403f5a <__mcmp>
  403610:	2800      	cmp	r0, #0
  403612:	f73f ad5c 	bgt.w	4030ce <_dtoa_r+0x496>
  403616:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403618:	9d06      	ldr	r5, [sp, #24]
  40361a:	ea6f 0b03 	mvn.w	fp, r3
  40361e:	2300      	movs	r3, #0
  403620:	9307      	str	r3, [sp, #28]
  403622:	4631      	mov	r1, r6
  403624:	4620      	mov	r0, r4
  403626:	f000 fac3 	bl	403bb0 <_Bfree>
  40362a:	2f00      	cmp	r7, #0
  40362c:	f43f ae4b 	beq.w	4032c6 <_dtoa_r+0x68e>
  403630:	9b07      	ldr	r3, [sp, #28]
  403632:	b12b      	cbz	r3, 403640 <_dtoa_r+0xa08>
  403634:	42bb      	cmp	r3, r7
  403636:	d003      	beq.n	403640 <_dtoa_r+0xa08>
  403638:	4619      	mov	r1, r3
  40363a:	4620      	mov	r0, r4
  40363c:	f000 fab8 	bl	403bb0 <_Bfree>
  403640:	4639      	mov	r1, r7
  403642:	4620      	mov	r0, r4
  403644:	f000 fab4 	bl	403bb0 <_Bfree>
  403648:	e63d      	b.n	4032c6 <_dtoa_r+0x68e>
  40364a:	2600      	movs	r6, #0
  40364c:	4637      	mov	r7, r6
  40364e:	e7e2      	b.n	403616 <_dtoa_r+0x9de>
  403650:	46bb      	mov	fp, r7
  403652:	4637      	mov	r7, r6
  403654:	e53b      	b.n	4030ce <_dtoa_r+0x496>
  403656:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403658:	f8cd 9010 	str.w	r9, [sp, #16]
  40365c:	2b00      	cmp	r3, #0
  40365e:	f47f af13 	bne.w	403488 <_dtoa_r+0x850>
  403662:	9d06      	ldr	r5, [sp, #24]
  403664:	4631      	mov	r1, r6
  403666:	4650      	mov	r0, sl
  403668:	f7ff fa5a 	bl	402b20 <quorem>
  40366c:	f100 0930 	add.w	r9, r0, #48	; 0x30
  403670:	f805 9b01 	strb.w	r9, [r5], #1
  403674:	9b06      	ldr	r3, [sp, #24]
  403676:	9a04      	ldr	r2, [sp, #16]
  403678:	1aeb      	subs	r3, r5, r3
  40367a:	429a      	cmp	r2, r3
  40367c:	f300 8083 	bgt.w	403786 <_dtoa_r+0xb4e>
  403680:	9b06      	ldr	r3, [sp, #24]
  403682:	2a01      	cmp	r2, #1
  403684:	bfac      	ite	ge
  403686:	189b      	addge	r3, r3, r2
  403688:	3301      	addlt	r3, #1
  40368a:	4698      	mov	r8, r3
  40368c:	2300      	movs	r3, #0
  40368e:	9307      	str	r3, [sp, #28]
  403690:	4651      	mov	r1, sl
  403692:	2201      	movs	r2, #1
  403694:	4620      	mov	r0, r4
  403696:	f000 fc0f 	bl	403eb8 <__lshift>
  40369a:	4631      	mov	r1, r6
  40369c:	4682      	mov	sl, r0
  40369e:	f000 fc5c 	bl	403f5a <__mcmp>
  4036a2:	2800      	cmp	r0, #0
  4036a4:	dc35      	bgt.n	403712 <_dtoa_r+0xada>
  4036a6:	d102      	bne.n	4036ae <_dtoa_r+0xa76>
  4036a8:	f019 0f01 	tst.w	r9, #1
  4036ac:	d131      	bne.n	403712 <_dtoa_r+0xada>
  4036ae:	4645      	mov	r5, r8
  4036b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4036b4:	2b30      	cmp	r3, #48	; 0x30
  4036b6:	f105 32ff 	add.w	r2, r5, #4294967295
  4036ba:	d1b2      	bne.n	403622 <_dtoa_r+0x9ea>
  4036bc:	4615      	mov	r5, r2
  4036be:	e7f7      	b.n	4036b0 <_dtoa_r+0xa78>
  4036c0:	4638      	mov	r0, r7
  4036c2:	e6ff      	b.n	4034c4 <_dtoa_r+0x88c>
  4036c4:	2301      	movs	r3, #1
  4036c6:	e722      	b.n	40350e <_dtoa_r+0x8d6>
  4036c8:	9a02      	ldr	r2, [sp, #8]
  4036ca:	2a00      	cmp	r2, #0
  4036cc:	db04      	blt.n	4036d8 <_dtoa_r+0xaa0>
  4036ce:	d129      	bne.n	403724 <_dtoa_r+0xaec>
  4036d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4036d2:	bb3a      	cbnz	r2, 403724 <_dtoa_r+0xaec>
  4036d4:	9a08      	ldr	r2, [sp, #32]
  4036d6:	bb2a      	cbnz	r2, 403724 <_dtoa_r+0xaec>
  4036d8:	2b00      	cmp	r3, #0
  4036da:	f77f af32 	ble.w	403542 <_dtoa_r+0x90a>
  4036de:	4651      	mov	r1, sl
  4036e0:	2201      	movs	r2, #1
  4036e2:	4620      	mov	r0, r4
  4036e4:	f000 fbe8 	bl	403eb8 <__lshift>
  4036e8:	4631      	mov	r1, r6
  4036ea:	4682      	mov	sl, r0
  4036ec:	f000 fc35 	bl	403f5a <__mcmp>
  4036f0:	2800      	cmp	r0, #0
  4036f2:	dc05      	bgt.n	403700 <_dtoa_r+0xac8>
  4036f4:	f47f af25 	bne.w	403542 <_dtoa_r+0x90a>
  4036f8:	f019 0f01 	tst.w	r9, #1
  4036fc:	f43f af21 	beq.w	403542 <_dtoa_r+0x90a>
  403700:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  403704:	f47f af1b 	bne.w	40353e <_dtoa_r+0x906>
  403708:	2339      	movs	r3, #57	; 0x39
  40370a:	f888 3000 	strb.w	r3, [r8]
  40370e:	f108 0801 	add.w	r8, r8, #1
  403712:	4645      	mov	r5, r8
  403714:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  403718:	2b39      	cmp	r3, #57	; 0x39
  40371a:	f105 32ff 	add.w	r2, r5, #4294967295
  40371e:	d03a      	beq.n	403796 <_dtoa_r+0xb5e>
  403720:	3301      	adds	r3, #1
  403722:	e03f      	b.n	4037a4 <_dtoa_r+0xb6c>
  403724:	2b00      	cmp	r3, #0
  403726:	f108 0501 	add.w	r5, r8, #1
  40372a:	dd05      	ble.n	403738 <_dtoa_r+0xb00>
  40372c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  403730:	d0ea      	beq.n	403708 <_dtoa_r+0xad0>
  403732:	f109 0901 	add.w	r9, r9, #1
  403736:	e706      	b.n	403546 <_dtoa_r+0x90e>
  403738:	9b06      	ldr	r3, [sp, #24]
  40373a:	9a04      	ldr	r2, [sp, #16]
  40373c:	f805 9c01 	strb.w	r9, [r5, #-1]
  403740:	1aeb      	subs	r3, r5, r3
  403742:	4293      	cmp	r3, r2
  403744:	46a8      	mov	r8, r5
  403746:	d0a3      	beq.n	403690 <_dtoa_r+0xa58>
  403748:	4651      	mov	r1, sl
  40374a:	2300      	movs	r3, #0
  40374c:	220a      	movs	r2, #10
  40374e:	4620      	mov	r0, r4
  403750:	f000 fa45 	bl	403bde <__multadd>
  403754:	9b07      	ldr	r3, [sp, #28]
  403756:	9907      	ldr	r1, [sp, #28]
  403758:	42bb      	cmp	r3, r7
  40375a:	4682      	mov	sl, r0
  40375c:	f04f 0300 	mov.w	r3, #0
  403760:	f04f 020a 	mov.w	r2, #10
  403764:	4620      	mov	r0, r4
  403766:	d104      	bne.n	403772 <_dtoa_r+0xb3a>
  403768:	f000 fa39 	bl	403bde <__multadd>
  40376c:	9007      	str	r0, [sp, #28]
  40376e:	4607      	mov	r7, r0
  403770:	e6b0      	b.n	4034d4 <_dtoa_r+0x89c>
  403772:	f000 fa34 	bl	403bde <__multadd>
  403776:	2300      	movs	r3, #0
  403778:	9007      	str	r0, [sp, #28]
  40377a:	220a      	movs	r2, #10
  40377c:	4639      	mov	r1, r7
  40377e:	4620      	mov	r0, r4
  403780:	f000 fa2d 	bl	403bde <__multadd>
  403784:	e7f3      	b.n	40376e <_dtoa_r+0xb36>
  403786:	4651      	mov	r1, sl
  403788:	2300      	movs	r3, #0
  40378a:	220a      	movs	r2, #10
  40378c:	4620      	mov	r0, r4
  40378e:	f000 fa26 	bl	403bde <__multadd>
  403792:	4682      	mov	sl, r0
  403794:	e766      	b.n	403664 <_dtoa_r+0xa2c>
  403796:	9b06      	ldr	r3, [sp, #24]
  403798:	4293      	cmp	r3, r2
  40379a:	d105      	bne.n	4037a8 <_dtoa_r+0xb70>
  40379c:	9a06      	ldr	r2, [sp, #24]
  40379e:	f10b 0b01 	add.w	fp, fp, #1
  4037a2:	2331      	movs	r3, #49	; 0x31
  4037a4:	7013      	strb	r3, [r2, #0]
  4037a6:	e73c      	b.n	403622 <_dtoa_r+0x9ea>
  4037a8:	4615      	mov	r5, r2
  4037aa:	e7b3      	b.n	403714 <_dtoa_r+0xadc>
  4037ac:	4b09      	ldr	r3, [pc, #36]	; (4037d4 <_dtoa_r+0xb9c>)
  4037ae:	f7ff baa5 	b.w	402cfc <_dtoa_r+0xc4>
  4037b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4037b4:	2b00      	cmp	r3, #0
  4037b6:	f47f aa7f 	bne.w	402cb8 <_dtoa_r+0x80>
  4037ba:	4b07      	ldr	r3, [pc, #28]	; (4037d8 <_dtoa_r+0xba0>)
  4037bc:	f7ff ba9e 	b.w	402cfc <_dtoa_r+0xc4>
  4037c0:	9b04      	ldr	r3, [sp, #16]
  4037c2:	2b00      	cmp	r3, #0
  4037c4:	f73f af4d 	bgt.w	403662 <_dtoa_r+0xa2a>
  4037c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4037ca:	2b02      	cmp	r3, #2
  4037cc:	f77f af49 	ble.w	403662 <_dtoa_r+0xa2a>
  4037d0:	e712      	b.n	4035f8 <_dtoa_r+0x9c0>
  4037d2:	bf00      	nop
  4037d4:	0040470c 	.word	0x0040470c
  4037d8:	0040470e 	.word	0x0040470e

004037dc <__sflush_r>:
  4037dc:	898a      	ldrh	r2, [r1, #12]
  4037de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4037e2:	4605      	mov	r5, r0
  4037e4:	0710      	lsls	r0, r2, #28
  4037e6:	460c      	mov	r4, r1
  4037e8:	d45a      	bmi.n	4038a0 <__sflush_r+0xc4>
  4037ea:	684b      	ldr	r3, [r1, #4]
  4037ec:	2b00      	cmp	r3, #0
  4037ee:	dc05      	bgt.n	4037fc <__sflush_r+0x20>
  4037f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4037f2:	2b00      	cmp	r3, #0
  4037f4:	dc02      	bgt.n	4037fc <__sflush_r+0x20>
  4037f6:	2000      	movs	r0, #0
  4037f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4037fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4037fe:	2e00      	cmp	r6, #0
  403800:	d0f9      	beq.n	4037f6 <__sflush_r+0x1a>
  403802:	2300      	movs	r3, #0
  403804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  403808:	682f      	ldr	r7, [r5, #0]
  40380a:	602b      	str	r3, [r5, #0]
  40380c:	d033      	beq.n	403876 <__sflush_r+0x9a>
  40380e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  403810:	89a3      	ldrh	r3, [r4, #12]
  403812:	075a      	lsls	r2, r3, #29
  403814:	d505      	bpl.n	403822 <__sflush_r+0x46>
  403816:	6863      	ldr	r3, [r4, #4]
  403818:	1ac0      	subs	r0, r0, r3
  40381a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40381c:	b10b      	cbz	r3, 403822 <__sflush_r+0x46>
  40381e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  403820:	1ac0      	subs	r0, r0, r3
  403822:	2300      	movs	r3, #0
  403824:	4602      	mov	r2, r0
  403826:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403828:	6a21      	ldr	r1, [r4, #32]
  40382a:	4628      	mov	r0, r5
  40382c:	47b0      	blx	r6
  40382e:	1c43      	adds	r3, r0, #1
  403830:	89a3      	ldrh	r3, [r4, #12]
  403832:	d106      	bne.n	403842 <__sflush_r+0x66>
  403834:	6829      	ldr	r1, [r5, #0]
  403836:	291d      	cmp	r1, #29
  403838:	d84b      	bhi.n	4038d2 <__sflush_r+0xf6>
  40383a:	4a2b      	ldr	r2, [pc, #172]	; (4038e8 <__sflush_r+0x10c>)
  40383c:	40ca      	lsrs	r2, r1
  40383e:	07d6      	lsls	r6, r2, #31
  403840:	d547      	bpl.n	4038d2 <__sflush_r+0xf6>
  403842:	2200      	movs	r2, #0
  403844:	6062      	str	r2, [r4, #4]
  403846:	04d9      	lsls	r1, r3, #19
  403848:	6922      	ldr	r2, [r4, #16]
  40384a:	6022      	str	r2, [r4, #0]
  40384c:	d504      	bpl.n	403858 <__sflush_r+0x7c>
  40384e:	1c42      	adds	r2, r0, #1
  403850:	d101      	bne.n	403856 <__sflush_r+0x7a>
  403852:	682b      	ldr	r3, [r5, #0]
  403854:	b903      	cbnz	r3, 403858 <__sflush_r+0x7c>
  403856:	6560      	str	r0, [r4, #84]	; 0x54
  403858:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40385a:	602f      	str	r7, [r5, #0]
  40385c:	2900      	cmp	r1, #0
  40385e:	d0ca      	beq.n	4037f6 <__sflush_r+0x1a>
  403860:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403864:	4299      	cmp	r1, r3
  403866:	d002      	beq.n	40386e <__sflush_r+0x92>
  403868:	4628      	mov	r0, r5
  40386a:	f000 fc4b 	bl	404104 <_free_r>
  40386e:	2000      	movs	r0, #0
  403870:	6360      	str	r0, [r4, #52]	; 0x34
  403872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403876:	6a21      	ldr	r1, [r4, #32]
  403878:	2301      	movs	r3, #1
  40387a:	4628      	mov	r0, r5
  40387c:	47b0      	blx	r6
  40387e:	1c41      	adds	r1, r0, #1
  403880:	d1c6      	bne.n	403810 <__sflush_r+0x34>
  403882:	682b      	ldr	r3, [r5, #0]
  403884:	2b00      	cmp	r3, #0
  403886:	d0c3      	beq.n	403810 <__sflush_r+0x34>
  403888:	2b1d      	cmp	r3, #29
  40388a:	d001      	beq.n	403890 <__sflush_r+0xb4>
  40388c:	2b16      	cmp	r3, #22
  40388e:	d101      	bne.n	403894 <__sflush_r+0xb8>
  403890:	602f      	str	r7, [r5, #0]
  403892:	e7b0      	b.n	4037f6 <__sflush_r+0x1a>
  403894:	89a3      	ldrh	r3, [r4, #12]
  403896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40389a:	81a3      	strh	r3, [r4, #12]
  40389c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4038a0:	690f      	ldr	r7, [r1, #16]
  4038a2:	2f00      	cmp	r7, #0
  4038a4:	d0a7      	beq.n	4037f6 <__sflush_r+0x1a>
  4038a6:	0793      	lsls	r3, r2, #30
  4038a8:	680e      	ldr	r6, [r1, #0]
  4038aa:	bf08      	it	eq
  4038ac:	694b      	ldreq	r3, [r1, #20]
  4038ae:	600f      	str	r7, [r1, #0]
  4038b0:	bf18      	it	ne
  4038b2:	2300      	movne	r3, #0
  4038b4:	eba6 0807 	sub.w	r8, r6, r7
  4038b8:	608b      	str	r3, [r1, #8]
  4038ba:	f1b8 0f00 	cmp.w	r8, #0
  4038be:	dd9a      	ble.n	4037f6 <__sflush_r+0x1a>
  4038c0:	4643      	mov	r3, r8
  4038c2:	463a      	mov	r2, r7
  4038c4:	6a21      	ldr	r1, [r4, #32]
  4038c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4038c8:	4628      	mov	r0, r5
  4038ca:	47b0      	blx	r6
  4038cc:	2800      	cmp	r0, #0
  4038ce:	dc07      	bgt.n	4038e0 <__sflush_r+0x104>
  4038d0:	89a3      	ldrh	r3, [r4, #12]
  4038d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4038d6:	81a3      	strh	r3, [r4, #12]
  4038d8:	f04f 30ff 	mov.w	r0, #4294967295
  4038dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4038e0:	4407      	add	r7, r0
  4038e2:	eba8 0800 	sub.w	r8, r8, r0
  4038e6:	e7e8      	b.n	4038ba <__sflush_r+0xde>
  4038e8:	20400001 	.word	0x20400001

004038ec <_fflush_r>:
  4038ec:	b538      	push	{r3, r4, r5, lr}
  4038ee:	690b      	ldr	r3, [r1, #16]
  4038f0:	4605      	mov	r5, r0
  4038f2:	460c      	mov	r4, r1
  4038f4:	b1db      	cbz	r3, 40392e <_fflush_r+0x42>
  4038f6:	b118      	cbz	r0, 403900 <_fflush_r+0x14>
  4038f8:	6983      	ldr	r3, [r0, #24]
  4038fa:	b90b      	cbnz	r3, 403900 <_fflush_r+0x14>
  4038fc:	f000 f860 	bl	4039c0 <__sinit>
  403900:	4b0c      	ldr	r3, [pc, #48]	; (403934 <_fflush_r+0x48>)
  403902:	429c      	cmp	r4, r3
  403904:	d109      	bne.n	40391a <_fflush_r+0x2e>
  403906:	686c      	ldr	r4, [r5, #4]
  403908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40390c:	b17b      	cbz	r3, 40392e <_fflush_r+0x42>
  40390e:	4621      	mov	r1, r4
  403910:	4628      	mov	r0, r5
  403912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403916:	f7ff bf61 	b.w	4037dc <__sflush_r>
  40391a:	4b07      	ldr	r3, [pc, #28]	; (403938 <_fflush_r+0x4c>)
  40391c:	429c      	cmp	r4, r3
  40391e:	d101      	bne.n	403924 <_fflush_r+0x38>
  403920:	68ac      	ldr	r4, [r5, #8]
  403922:	e7f1      	b.n	403908 <_fflush_r+0x1c>
  403924:	4b05      	ldr	r3, [pc, #20]	; (40393c <_fflush_r+0x50>)
  403926:	429c      	cmp	r4, r3
  403928:	bf08      	it	eq
  40392a:	68ec      	ldreq	r4, [r5, #12]
  40392c:	e7ec      	b.n	403908 <_fflush_r+0x1c>
  40392e:	2000      	movs	r0, #0
  403930:	bd38      	pop	{r3, r4, r5, pc}
  403932:	bf00      	nop
  403934:	0040473c 	.word	0x0040473c
  403938:	0040475c 	.word	0x0040475c
  40393c:	0040471c 	.word	0x0040471c

00403940 <_cleanup_r>:
  403940:	4901      	ldr	r1, [pc, #4]	; (403948 <_cleanup_r+0x8>)
  403942:	f000 b8a9 	b.w	403a98 <_fwalk_reent>
  403946:	bf00      	nop
  403948:	004038ed 	.word	0x004038ed

0040394c <std.isra.0>:
  40394c:	2300      	movs	r3, #0
  40394e:	b510      	push	{r4, lr}
  403950:	4604      	mov	r4, r0
  403952:	6003      	str	r3, [r0, #0]
  403954:	6043      	str	r3, [r0, #4]
  403956:	6083      	str	r3, [r0, #8]
  403958:	8181      	strh	r1, [r0, #12]
  40395a:	6643      	str	r3, [r0, #100]	; 0x64
  40395c:	81c2      	strh	r2, [r0, #14]
  40395e:	6103      	str	r3, [r0, #16]
  403960:	6143      	str	r3, [r0, #20]
  403962:	6183      	str	r3, [r0, #24]
  403964:	4619      	mov	r1, r3
  403966:	2208      	movs	r2, #8
  403968:	305c      	adds	r0, #92	; 0x5c
  40396a:	f7fe fcd4 	bl	402316 <memset>
  40396e:	4b05      	ldr	r3, [pc, #20]	; (403984 <std.isra.0+0x38>)
  403970:	6263      	str	r3, [r4, #36]	; 0x24
  403972:	4b05      	ldr	r3, [pc, #20]	; (403988 <std.isra.0+0x3c>)
  403974:	62a3      	str	r3, [r4, #40]	; 0x28
  403976:	4b05      	ldr	r3, [pc, #20]	; (40398c <std.isra.0+0x40>)
  403978:	62e3      	str	r3, [r4, #44]	; 0x2c
  40397a:	4b05      	ldr	r3, [pc, #20]	; (403990 <std.isra.0+0x44>)
  40397c:	6224      	str	r4, [r4, #32]
  40397e:	6323      	str	r3, [r4, #48]	; 0x30
  403980:	bd10      	pop	{r4, pc}
  403982:	bf00      	nop
  403984:	0040427d 	.word	0x0040427d
  403988:	0040429f 	.word	0x0040429f
  40398c:	004042d7 	.word	0x004042d7
  403990:	004042fb 	.word	0x004042fb

00403994 <__sfmoreglue>:
  403994:	b570      	push	{r4, r5, r6, lr}
  403996:	1e4a      	subs	r2, r1, #1
  403998:	2568      	movs	r5, #104	; 0x68
  40399a:	4355      	muls	r5, r2
  40399c:	460e      	mov	r6, r1
  40399e:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4039a2:	f000 fbfd 	bl	4041a0 <_malloc_r>
  4039a6:	4604      	mov	r4, r0
  4039a8:	b140      	cbz	r0, 4039bc <__sfmoreglue+0x28>
  4039aa:	2100      	movs	r1, #0
  4039ac:	e880 0042 	stmia.w	r0, {r1, r6}
  4039b0:	300c      	adds	r0, #12
  4039b2:	60a0      	str	r0, [r4, #8]
  4039b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4039b8:	f7fe fcad 	bl	402316 <memset>
  4039bc:	4620      	mov	r0, r4
  4039be:	bd70      	pop	{r4, r5, r6, pc}

004039c0 <__sinit>:
  4039c0:	6983      	ldr	r3, [r0, #24]
  4039c2:	b510      	push	{r4, lr}
  4039c4:	4604      	mov	r4, r0
  4039c6:	bb33      	cbnz	r3, 403a16 <__sinit+0x56>
  4039c8:	6483      	str	r3, [r0, #72]	; 0x48
  4039ca:	64c3      	str	r3, [r0, #76]	; 0x4c
  4039cc:	6503      	str	r3, [r0, #80]	; 0x50
  4039ce:	4b12      	ldr	r3, [pc, #72]	; (403a18 <__sinit+0x58>)
  4039d0:	4a12      	ldr	r2, [pc, #72]	; (403a1c <__sinit+0x5c>)
  4039d2:	681b      	ldr	r3, [r3, #0]
  4039d4:	6282      	str	r2, [r0, #40]	; 0x28
  4039d6:	4298      	cmp	r0, r3
  4039d8:	bf04      	itt	eq
  4039da:	2301      	moveq	r3, #1
  4039dc:	6183      	streq	r3, [r0, #24]
  4039de:	f000 f81f 	bl	403a20 <__sfp>
  4039e2:	6060      	str	r0, [r4, #4]
  4039e4:	4620      	mov	r0, r4
  4039e6:	f000 f81b 	bl	403a20 <__sfp>
  4039ea:	60a0      	str	r0, [r4, #8]
  4039ec:	4620      	mov	r0, r4
  4039ee:	f000 f817 	bl	403a20 <__sfp>
  4039f2:	2200      	movs	r2, #0
  4039f4:	60e0      	str	r0, [r4, #12]
  4039f6:	2104      	movs	r1, #4
  4039f8:	6860      	ldr	r0, [r4, #4]
  4039fa:	f7ff ffa7 	bl	40394c <std.isra.0>
  4039fe:	2201      	movs	r2, #1
  403a00:	2109      	movs	r1, #9
  403a02:	68a0      	ldr	r0, [r4, #8]
  403a04:	f7ff ffa2 	bl	40394c <std.isra.0>
  403a08:	2202      	movs	r2, #2
  403a0a:	2112      	movs	r1, #18
  403a0c:	68e0      	ldr	r0, [r4, #12]
  403a0e:	f7ff ff9d 	bl	40394c <std.isra.0>
  403a12:	2301      	movs	r3, #1
  403a14:	61a3      	str	r3, [r4, #24]
  403a16:	bd10      	pop	{r4, pc}
  403a18:	004046f8 	.word	0x004046f8
  403a1c:	00403941 	.word	0x00403941

00403a20 <__sfp>:
  403a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403a22:	4b1c      	ldr	r3, [pc, #112]	; (403a94 <__sfp+0x74>)
  403a24:	681e      	ldr	r6, [r3, #0]
  403a26:	69b3      	ldr	r3, [r6, #24]
  403a28:	4607      	mov	r7, r0
  403a2a:	b913      	cbnz	r3, 403a32 <__sfp+0x12>
  403a2c:	4630      	mov	r0, r6
  403a2e:	f7ff ffc7 	bl	4039c0 <__sinit>
  403a32:	3648      	adds	r6, #72	; 0x48
  403a34:	68b4      	ldr	r4, [r6, #8]
  403a36:	6873      	ldr	r3, [r6, #4]
  403a38:	3b01      	subs	r3, #1
  403a3a:	d503      	bpl.n	403a44 <__sfp+0x24>
  403a3c:	6833      	ldr	r3, [r6, #0]
  403a3e:	b133      	cbz	r3, 403a4e <__sfp+0x2e>
  403a40:	6836      	ldr	r6, [r6, #0]
  403a42:	e7f7      	b.n	403a34 <__sfp+0x14>
  403a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  403a48:	b16d      	cbz	r5, 403a66 <__sfp+0x46>
  403a4a:	3468      	adds	r4, #104	; 0x68
  403a4c:	e7f4      	b.n	403a38 <__sfp+0x18>
  403a4e:	2104      	movs	r1, #4
  403a50:	4638      	mov	r0, r7
  403a52:	f7ff ff9f 	bl	403994 <__sfmoreglue>
  403a56:	6030      	str	r0, [r6, #0]
  403a58:	2800      	cmp	r0, #0
  403a5a:	d1f1      	bne.n	403a40 <__sfp+0x20>
  403a5c:	230c      	movs	r3, #12
  403a5e:	603b      	str	r3, [r7, #0]
  403a60:	4604      	mov	r4, r0
  403a62:	4620      	mov	r0, r4
  403a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403a6a:	81e3      	strh	r3, [r4, #14]
  403a6c:	2301      	movs	r3, #1
  403a6e:	81a3      	strh	r3, [r4, #12]
  403a70:	6665      	str	r5, [r4, #100]	; 0x64
  403a72:	6025      	str	r5, [r4, #0]
  403a74:	60a5      	str	r5, [r4, #8]
  403a76:	6065      	str	r5, [r4, #4]
  403a78:	6125      	str	r5, [r4, #16]
  403a7a:	6165      	str	r5, [r4, #20]
  403a7c:	61a5      	str	r5, [r4, #24]
  403a7e:	2208      	movs	r2, #8
  403a80:	4629      	mov	r1, r5
  403a82:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  403a86:	f7fe fc46 	bl	402316 <memset>
  403a8a:	6365      	str	r5, [r4, #52]	; 0x34
  403a8c:	63a5      	str	r5, [r4, #56]	; 0x38
  403a8e:	64a5      	str	r5, [r4, #72]	; 0x48
  403a90:	64e5      	str	r5, [r4, #76]	; 0x4c
  403a92:	e7e6      	b.n	403a62 <__sfp+0x42>
  403a94:	004046f8 	.word	0x004046f8

00403a98 <_fwalk_reent>:
  403a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403a9c:	4680      	mov	r8, r0
  403a9e:	4689      	mov	r9, r1
  403aa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
  403aa4:	2600      	movs	r6, #0
  403aa6:	b914      	cbnz	r4, 403aae <_fwalk_reent+0x16>
  403aa8:	4630      	mov	r0, r6
  403aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403aae:	68a5      	ldr	r5, [r4, #8]
  403ab0:	6867      	ldr	r7, [r4, #4]
  403ab2:	3f01      	subs	r7, #1
  403ab4:	d501      	bpl.n	403aba <_fwalk_reent+0x22>
  403ab6:	6824      	ldr	r4, [r4, #0]
  403ab8:	e7f5      	b.n	403aa6 <_fwalk_reent+0xe>
  403aba:	89ab      	ldrh	r3, [r5, #12]
  403abc:	2b01      	cmp	r3, #1
  403abe:	d907      	bls.n	403ad0 <_fwalk_reent+0x38>
  403ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  403ac4:	3301      	adds	r3, #1
  403ac6:	d003      	beq.n	403ad0 <_fwalk_reent+0x38>
  403ac8:	4629      	mov	r1, r5
  403aca:	4640      	mov	r0, r8
  403acc:	47c8      	blx	r9
  403ace:	4306      	orrs	r6, r0
  403ad0:	3568      	adds	r5, #104	; 0x68
  403ad2:	e7ee      	b.n	403ab2 <_fwalk_reent+0x1a>

00403ad4 <_localeconv_r>:
  403ad4:	4b04      	ldr	r3, [pc, #16]	; (403ae8 <_localeconv_r+0x14>)
  403ad6:	681b      	ldr	r3, [r3, #0]
  403ad8:	6a18      	ldr	r0, [r3, #32]
  403ada:	4b04      	ldr	r3, [pc, #16]	; (403aec <_localeconv_r+0x18>)
  403adc:	2800      	cmp	r0, #0
  403ade:	bf08      	it	eq
  403ae0:	4618      	moveq	r0, r3
  403ae2:	30f0      	adds	r0, #240	; 0xf0
  403ae4:	4770      	bx	lr
  403ae6:	bf00      	nop
  403ae8:	20400048 	.word	0x20400048
  403aec:	204000ac 	.word	0x204000ac

00403af0 <__swhatbuf_r>:
  403af0:	b570      	push	{r4, r5, r6, lr}
  403af2:	460e      	mov	r6, r1
  403af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403af8:	2900      	cmp	r1, #0
  403afa:	b090      	sub	sp, #64	; 0x40
  403afc:	4614      	mov	r4, r2
  403afe:	461d      	mov	r5, r3
  403b00:	da07      	bge.n	403b12 <__swhatbuf_r+0x22>
  403b02:	2300      	movs	r3, #0
  403b04:	602b      	str	r3, [r5, #0]
  403b06:	89b3      	ldrh	r3, [r6, #12]
  403b08:	061a      	lsls	r2, r3, #24
  403b0a:	d410      	bmi.n	403b2e <__swhatbuf_r+0x3e>
  403b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403b10:	e00e      	b.n	403b30 <__swhatbuf_r+0x40>
  403b12:	aa01      	add	r2, sp, #4
  403b14:	f000 fc18 	bl	404348 <_fstat_r>
  403b18:	2800      	cmp	r0, #0
  403b1a:	dbf2      	blt.n	403b02 <__swhatbuf_r+0x12>
  403b1c:	9a02      	ldr	r2, [sp, #8]
  403b1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403b22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  403b26:	425a      	negs	r2, r3
  403b28:	415a      	adcs	r2, r3
  403b2a:	602a      	str	r2, [r5, #0]
  403b2c:	e7ee      	b.n	403b0c <__swhatbuf_r+0x1c>
  403b2e:	2340      	movs	r3, #64	; 0x40
  403b30:	2000      	movs	r0, #0
  403b32:	6023      	str	r3, [r4, #0]
  403b34:	b010      	add	sp, #64	; 0x40
  403b36:	bd70      	pop	{r4, r5, r6, pc}

00403b38 <malloc>:
  403b38:	4b02      	ldr	r3, [pc, #8]	; (403b44 <malloc+0xc>)
  403b3a:	4601      	mov	r1, r0
  403b3c:	6818      	ldr	r0, [r3, #0]
  403b3e:	f000 bb2f 	b.w	4041a0 <_malloc_r>
  403b42:	bf00      	nop
  403b44:	20400048 	.word	0x20400048

00403b48 <_Balloc>:
  403b48:	b570      	push	{r4, r5, r6, lr}
  403b4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
  403b4c:	4604      	mov	r4, r0
  403b4e:	460e      	mov	r6, r1
  403b50:	b93d      	cbnz	r5, 403b62 <_Balloc+0x1a>
  403b52:	2010      	movs	r0, #16
  403b54:	f7ff fff0 	bl	403b38 <malloc>
  403b58:	6260      	str	r0, [r4, #36]	; 0x24
  403b5a:	6045      	str	r5, [r0, #4]
  403b5c:	6085      	str	r5, [r0, #8]
  403b5e:	6005      	str	r5, [r0, #0]
  403b60:	60c5      	str	r5, [r0, #12]
  403b62:	6a65      	ldr	r5, [r4, #36]	; 0x24
  403b64:	68eb      	ldr	r3, [r5, #12]
  403b66:	b183      	cbz	r3, 403b8a <_Balloc+0x42>
  403b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403b6a:	68db      	ldr	r3, [r3, #12]
  403b6c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  403b70:	b9b8      	cbnz	r0, 403ba2 <_Balloc+0x5a>
  403b72:	2101      	movs	r1, #1
  403b74:	fa01 f506 	lsl.w	r5, r1, r6
  403b78:	1d6a      	adds	r2, r5, #5
  403b7a:	0092      	lsls	r2, r2, #2
  403b7c:	4620      	mov	r0, r4
  403b7e:	f000 fab3 	bl	4040e8 <_calloc_r>
  403b82:	b160      	cbz	r0, 403b9e <_Balloc+0x56>
  403b84:	6046      	str	r6, [r0, #4]
  403b86:	6085      	str	r5, [r0, #8]
  403b88:	e00e      	b.n	403ba8 <_Balloc+0x60>
  403b8a:	2221      	movs	r2, #33	; 0x21
  403b8c:	2104      	movs	r1, #4
  403b8e:	4620      	mov	r0, r4
  403b90:	f000 faaa 	bl	4040e8 <_calloc_r>
  403b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403b96:	60e8      	str	r0, [r5, #12]
  403b98:	68db      	ldr	r3, [r3, #12]
  403b9a:	2b00      	cmp	r3, #0
  403b9c:	d1e4      	bne.n	403b68 <_Balloc+0x20>
  403b9e:	2000      	movs	r0, #0
  403ba0:	bd70      	pop	{r4, r5, r6, pc}
  403ba2:	6802      	ldr	r2, [r0, #0]
  403ba4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  403ba8:	2300      	movs	r3, #0
  403baa:	6103      	str	r3, [r0, #16]
  403bac:	60c3      	str	r3, [r0, #12]
  403bae:	bd70      	pop	{r4, r5, r6, pc}

00403bb0 <_Bfree>:
  403bb0:	b570      	push	{r4, r5, r6, lr}
  403bb2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  403bb4:	4606      	mov	r6, r0
  403bb6:	460d      	mov	r5, r1
  403bb8:	b93c      	cbnz	r4, 403bca <_Bfree+0x1a>
  403bba:	2010      	movs	r0, #16
  403bbc:	f7ff ffbc 	bl	403b38 <malloc>
  403bc0:	6270      	str	r0, [r6, #36]	; 0x24
  403bc2:	6044      	str	r4, [r0, #4]
  403bc4:	6084      	str	r4, [r0, #8]
  403bc6:	6004      	str	r4, [r0, #0]
  403bc8:	60c4      	str	r4, [r0, #12]
  403bca:	b13d      	cbz	r5, 403bdc <_Bfree+0x2c>
  403bcc:	6a73      	ldr	r3, [r6, #36]	; 0x24
  403bce:	686a      	ldr	r2, [r5, #4]
  403bd0:	68db      	ldr	r3, [r3, #12]
  403bd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  403bd6:	6029      	str	r1, [r5, #0]
  403bd8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  403bdc:	bd70      	pop	{r4, r5, r6, pc}

00403bde <__multadd>:
  403bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403be2:	690d      	ldr	r5, [r1, #16]
  403be4:	461f      	mov	r7, r3
  403be6:	4606      	mov	r6, r0
  403be8:	460c      	mov	r4, r1
  403bea:	f101 0e14 	add.w	lr, r1, #20
  403bee:	2300      	movs	r3, #0
  403bf0:	f8de 0000 	ldr.w	r0, [lr]
  403bf4:	b281      	uxth	r1, r0
  403bf6:	fb02 7101 	mla	r1, r2, r1, r7
  403bfa:	0c0f      	lsrs	r7, r1, #16
  403bfc:	0c00      	lsrs	r0, r0, #16
  403bfe:	fb02 7000 	mla	r0, r2, r0, r7
  403c02:	b289      	uxth	r1, r1
  403c04:	3301      	adds	r3, #1
  403c06:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  403c0a:	429d      	cmp	r5, r3
  403c0c:	ea4f 4710 	mov.w	r7, r0, lsr #16
  403c10:	f84e 1b04 	str.w	r1, [lr], #4
  403c14:	dcec      	bgt.n	403bf0 <__multadd+0x12>
  403c16:	b1d7      	cbz	r7, 403c4e <__multadd+0x70>
  403c18:	68a3      	ldr	r3, [r4, #8]
  403c1a:	429d      	cmp	r5, r3
  403c1c:	db12      	blt.n	403c44 <__multadd+0x66>
  403c1e:	6861      	ldr	r1, [r4, #4]
  403c20:	4630      	mov	r0, r6
  403c22:	3101      	adds	r1, #1
  403c24:	f7ff ff90 	bl	403b48 <_Balloc>
  403c28:	6922      	ldr	r2, [r4, #16]
  403c2a:	3202      	adds	r2, #2
  403c2c:	f104 010c 	add.w	r1, r4, #12
  403c30:	4680      	mov	r8, r0
  403c32:	0092      	lsls	r2, r2, #2
  403c34:	300c      	adds	r0, #12
  403c36:	f7fe fb63 	bl	402300 <memcpy>
  403c3a:	4621      	mov	r1, r4
  403c3c:	4630      	mov	r0, r6
  403c3e:	f7ff ffb7 	bl	403bb0 <_Bfree>
  403c42:	4644      	mov	r4, r8
  403c44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  403c48:	3501      	adds	r5, #1
  403c4a:	615f      	str	r7, [r3, #20]
  403c4c:	6125      	str	r5, [r4, #16]
  403c4e:	4620      	mov	r0, r4
  403c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403c54 <__hi0bits>:
  403c54:	0c02      	lsrs	r2, r0, #16
  403c56:	0412      	lsls	r2, r2, #16
  403c58:	4603      	mov	r3, r0
  403c5a:	b9b2      	cbnz	r2, 403c8a <__hi0bits+0x36>
  403c5c:	0403      	lsls	r3, r0, #16
  403c5e:	2010      	movs	r0, #16
  403c60:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  403c64:	bf04      	itt	eq
  403c66:	021b      	lsleq	r3, r3, #8
  403c68:	3008      	addeq	r0, #8
  403c6a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  403c6e:	bf04      	itt	eq
  403c70:	011b      	lsleq	r3, r3, #4
  403c72:	3004      	addeq	r0, #4
  403c74:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  403c78:	bf04      	itt	eq
  403c7a:	009b      	lsleq	r3, r3, #2
  403c7c:	3002      	addeq	r0, #2
  403c7e:	2b00      	cmp	r3, #0
  403c80:	db06      	blt.n	403c90 <__hi0bits+0x3c>
  403c82:	005b      	lsls	r3, r3, #1
  403c84:	d503      	bpl.n	403c8e <__hi0bits+0x3a>
  403c86:	3001      	adds	r0, #1
  403c88:	4770      	bx	lr
  403c8a:	2000      	movs	r0, #0
  403c8c:	e7e8      	b.n	403c60 <__hi0bits+0xc>
  403c8e:	2020      	movs	r0, #32
  403c90:	4770      	bx	lr

00403c92 <__lo0bits>:
  403c92:	6803      	ldr	r3, [r0, #0]
  403c94:	f013 0207 	ands.w	r2, r3, #7
  403c98:	4601      	mov	r1, r0
  403c9a:	d00b      	beq.n	403cb4 <__lo0bits+0x22>
  403c9c:	07da      	lsls	r2, r3, #31
  403c9e:	d423      	bmi.n	403ce8 <__lo0bits+0x56>
  403ca0:	0798      	lsls	r0, r3, #30
  403ca2:	bf49      	itett	mi
  403ca4:	085b      	lsrmi	r3, r3, #1
  403ca6:	089b      	lsrpl	r3, r3, #2
  403ca8:	2001      	movmi	r0, #1
  403caa:	600b      	strmi	r3, [r1, #0]
  403cac:	bf5c      	itt	pl
  403cae:	600b      	strpl	r3, [r1, #0]
  403cb0:	2002      	movpl	r0, #2
  403cb2:	4770      	bx	lr
  403cb4:	b298      	uxth	r0, r3
  403cb6:	b9a8      	cbnz	r0, 403ce4 <__lo0bits+0x52>
  403cb8:	0c1b      	lsrs	r3, r3, #16
  403cba:	2010      	movs	r0, #16
  403cbc:	f013 0fff 	tst.w	r3, #255	; 0xff
  403cc0:	bf04      	itt	eq
  403cc2:	0a1b      	lsreq	r3, r3, #8
  403cc4:	3008      	addeq	r0, #8
  403cc6:	071a      	lsls	r2, r3, #28
  403cc8:	bf04      	itt	eq
  403cca:	091b      	lsreq	r3, r3, #4
  403ccc:	3004      	addeq	r0, #4
  403cce:	079a      	lsls	r2, r3, #30
  403cd0:	bf04      	itt	eq
  403cd2:	089b      	lsreq	r3, r3, #2
  403cd4:	3002      	addeq	r0, #2
  403cd6:	07da      	lsls	r2, r3, #31
  403cd8:	d402      	bmi.n	403ce0 <__lo0bits+0x4e>
  403cda:	085b      	lsrs	r3, r3, #1
  403cdc:	d006      	beq.n	403cec <__lo0bits+0x5a>
  403cde:	3001      	adds	r0, #1
  403ce0:	600b      	str	r3, [r1, #0]
  403ce2:	4770      	bx	lr
  403ce4:	4610      	mov	r0, r2
  403ce6:	e7e9      	b.n	403cbc <__lo0bits+0x2a>
  403ce8:	2000      	movs	r0, #0
  403cea:	4770      	bx	lr
  403cec:	2020      	movs	r0, #32
  403cee:	4770      	bx	lr

00403cf0 <__i2b>:
  403cf0:	b510      	push	{r4, lr}
  403cf2:	460c      	mov	r4, r1
  403cf4:	2101      	movs	r1, #1
  403cf6:	f7ff ff27 	bl	403b48 <_Balloc>
  403cfa:	2201      	movs	r2, #1
  403cfc:	6144      	str	r4, [r0, #20]
  403cfe:	6102      	str	r2, [r0, #16]
  403d00:	bd10      	pop	{r4, pc}

00403d02 <__multiply>:
  403d02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d06:	4614      	mov	r4, r2
  403d08:	690a      	ldr	r2, [r1, #16]
  403d0a:	6923      	ldr	r3, [r4, #16]
  403d0c:	429a      	cmp	r2, r3
  403d0e:	bfb8      	it	lt
  403d10:	460b      	movlt	r3, r1
  403d12:	4689      	mov	r9, r1
  403d14:	bfbc      	itt	lt
  403d16:	46a1      	movlt	r9, r4
  403d18:	461c      	movlt	r4, r3
  403d1a:	f8d9 7010 	ldr.w	r7, [r9, #16]
  403d1e:	f8d4 a010 	ldr.w	sl, [r4, #16]
  403d22:	f8d9 3008 	ldr.w	r3, [r9, #8]
  403d26:	f8d9 1004 	ldr.w	r1, [r9, #4]
  403d2a:	eb07 060a 	add.w	r6, r7, sl
  403d2e:	429e      	cmp	r6, r3
  403d30:	bfc8      	it	gt
  403d32:	3101      	addgt	r1, #1
  403d34:	f7ff ff08 	bl	403b48 <_Balloc>
  403d38:	f100 0514 	add.w	r5, r0, #20
  403d3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  403d40:	462b      	mov	r3, r5
  403d42:	2200      	movs	r2, #0
  403d44:	4543      	cmp	r3, r8
  403d46:	d316      	bcc.n	403d76 <__multiply+0x74>
  403d48:	f104 0214 	add.w	r2, r4, #20
  403d4c:	f109 0114 	add.w	r1, r9, #20
  403d50:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  403d54:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  403d58:	9301      	str	r3, [sp, #4]
  403d5a:	9c01      	ldr	r4, [sp, #4]
  403d5c:	4294      	cmp	r4, r2
  403d5e:	4613      	mov	r3, r2
  403d60:	d80c      	bhi.n	403d7c <__multiply+0x7a>
  403d62:	2e00      	cmp	r6, #0
  403d64:	dd03      	ble.n	403d6e <__multiply+0x6c>
  403d66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  403d6a:	2b00      	cmp	r3, #0
  403d6c:	d054      	beq.n	403e18 <__multiply+0x116>
  403d6e:	6106      	str	r6, [r0, #16]
  403d70:	b003      	add	sp, #12
  403d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d76:	f843 2b04 	str.w	r2, [r3], #4
  403d7a:	e7e3      	b.n	403d44 <__multiply+0x42>
  403d7c:	f8b3 a000 	ldrh.w	sl, [r3]
  403d80:	3204      	adds	r2, #4
  403d82:	f1ba 0f00 	cmp.w	sl, #0
  403d86:	d020      	beq.n	403dca <__multiply+0xc8>
  403d88:	46ae      	mov	lr, r5
  403d8a:	4689      	mov	r9, r1
  403d8c:	f04f 0c00 	mov.w	ip, #0
  403d90:	f859 4b04 	ldr.w	r4, [r9], #4
  403d94:	f8be b000 	ldrh.w	fp, [lr]
  403d98:	b2a3      	uxth	r3, r4
  403d9a:	fb0a b303 	mla	r3, sl, r3, fp
  403d9e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  403da2:	f8de 4000 	ldr.w	r4, [lr]
  403da6:	4463      	add	r3, ip
  403da8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  403dac:	fb0a c40b 	mla	r4, sl, fp, ip
  403db0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  403db4:	b29b      	uxth	r3, r3
  403db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  403dba:	454f      	cmp	r7, r9
  403dbc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  403dc0:	f84e 3b04 	str.w	r3, [lr], #4
  403dc4:	d8e4      	bhi.n	403d90 <__multiply+0x8e>
  403dc6:	f8ce c000 	str.w	ip, [lr]
  403dca:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  403dce:	f1b9 0f00 	cmp.w	r9, #0
  403dd2:	d01f      	beq.n	403e14 <__multiply+0x112>
  403dd4:	682b      	ldr	r3, [r5, #0]
  403dd6:	46ae      	mov	lr, r5
  403dd8:	468c      	mov	ip, r1
  403dda:	f04f 0a00 	mov.w	sl, #0
  403dde:	f8bc 4000 	ldrh.w	r4, [ip]
  403de2:	f8be b002 	ldrh.w	fp, [lr, #2]
  403de6:	fb09 b404 	mla	r4, r9, r4, fp
  403dea:	44a2      	add	sl, r4
  403dec:	b29b      	uxth	r3, r3
  403dee:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  403df2:	f84e 3b04 	str.w	r3, [lr], #4
  403df6:	f85c 3b04 	ldr.w	r3, [ip], #4
  403dfa:	f8be 4000 	ldrh.w	r4, [lr]
  403dfe:	0c1b      	lsrs	r3, r3, #16
  403e00:	fb09 4303 	mla	r3, r9, r3, r4
  403e04:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  403e08:	4567      	cmp	r7, ip
  403e0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  403e0e:	d8e6      	bhi.n	403dde <__multiply+0xdc>
  403e10:	f8ce 3000 	str.w	r3, [lr]
  403e14:	3504      	adds	r5, #4
  403e16:	e7a0      	b.n	403d5a <__multiply+0x58>
  403e18:	3e01      	subs	r6, #1
  403e1a:	e7a2      	b.n	403d62 <__multiply+0x60>

00403e1c <__pow5mult>:
  403e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403e20:	4615      	mov	r5, r2
  403e22:	f012 0203 	ands.w	r2, r2, #3
  403e26:	4606      	mov	r6, r0
  403e28:	460f      	mov	r7, r1
  403e2a:	d007      	beq.n	403e3c <__pow5mult+0x20>
  403e2c:	3a01      	subs	r2, #1
  403e2e:	4c21      	ldr	r4, [pc, #132]	; (403eb4 <__pow5mult+0x98>)
  403e30:	2300      	movs	r3, #0
  403e32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  403e36:	f7ff fed2 	bl	403bde <__multadd>
  403e3a:	4607      	mov	r7, r0
  403e3c:	10ad      	asrs	r5, r5, #2
  403e3e:	d035      	beq.n	403eac <__pow5mult+0x90>
  403e40:	6a74      	ldr	r4, [r6, #36]	; 0x24
  403e42:	b93c      	cbnz	r4, 403e54 <__pow5mult+0x38>
  403e44:	2010      	movs	r0, #16
  403e46:	f7ff fe77 	bl	403b38 <malloc>
  403e4a:	6270      	str	r0, [r6, #36]	; 0x24
  403e4c:	6044      	str	r4, [r0, #4]
  403e4e:	6084      	str	r4, [r0, #8]
  403e50:	6004      	str	r4, [r0, #0]
  403e52:	60c4      	str	r4, [r0, #12]
  403e54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  403e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
  403e5c:	b94c      	cbnz	r4, 403e72 <__pow5mult+0x56>
  403e5e:	f240 2171 	movw	r1, #625	; 0x271
  403e62:	4630      	mov	r0, r6
  403e64:	f7ff ff44 	bl	403cf0 <__i2b>
  403e68:	2300      	movs	r3, #0
  403e6a:	f8c8 0008 	str.w	r0, [r8, #8]
  403e6e:	4604      	mov	r4, r0
  403e70:	6003      	str	r3, [r0, #0]
  403e72:	f04f 0800 	mov.w	r8, #0
  403e76:	07eb      	lsls	r3, r5, #31
  403e78:	d50a      	bpl.n	403e90 <__pow5mult+0x74>
  403e7a:	4639      	mov	r1, r7
  403e7c:	4622      	mov	r2, r4
  403e7e:	4630      	mov	r0, r6
  403e80:	f7ff ff3f 	bl	403d02 <__multiply>
  403e84:	4639      	mov	r1, r7
  403e86:	4681      	mov	r9, r0
  403e88:	4630      	mov	r0, r6
  403e8a:	f7ff fe91 	bl	403bb0 <_Bfree>
  403e8e:	464f      	mov	r7, r9
  403e90:	106d      	asrs	r5, r5, #1
  403e92:	d00b      	beq.n	403eac <__pow5mult+0x90>
  403e94:	6820      	ldr	r0, [r4, #0]
  403e96:	b938      	cbnz	r0, 403ea8 <__pow5mult+0x8c>
  403e98:	4622      	mov	r2, r4
  403e9a:	4621      	mov	r1, r4
  403e9c:	4630      	mov	r0, r6
  403e9e:	f7ff ff30 	bl	403d02 <__multiply>
  403ea2:	6020      	str	r0, [r4, #0]
  403ea4:	f8c0 8000 	str.w	r8, [r0]
  403ea8:	4604      	mov	r4, r0
  403eaa:	e7e4      	b.n	403e76 <__pow5mult+0x5a>
  403eac:	4638      	mov	r0, r7
  403eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403eb2:	bf00      	nop
  403eb4:	00404870 	.word	0x00404870

00403eb8 <__lshift>:
  403eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403ebc:	460c      	mov	r4, r1
  403ebe:	ea4f 1a62 	mov.w	sl, r2, asr #5
  403ec2:	6923      	ldr	r3, [r4, #16]
  403ec4:	6849      	ldr	r1, [r1, #4]
  403ec6:	eb0a 0903 	add.w	r9, sl, r3
  403eca:	68a3      	ldr	r3, [r4, #8]
  403ecc:	4607      	mov	r7, r0
  403ece:	4616      	mov	r6, r2
  403ed0:	f109 0501 	add.w	r5, r9, #1
  403ed4:	42ab      	cmp	r3, r5
  403ed6:	db31      	blt.n	403f3c <__lshift+0x84>
  403ed8:	4638      	mov	r0, r7
  403eda:	f7ff fe35 	bl	403b48 <_Balloc>
  403ede:	2200      	movs	r2, #0
  403ee0:	4680      	mov	r8, r0
  403ee2:	f100 0314 	add.w	r3, r0, #20
  403ee6:	4611      	mov	r1, r2
  403ee8:	4552      	cmp	r2, sl
  403eea:	db2a      	blt.n	403f42 <__lshift+0x8a>
  403eec:	6920      	ldr	r0, [r4, #16]
  403eee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  403ef2:	f104 0114 	add.w	r1, r4, #20
  403ef6:	f016 021f 	ands.w	r2, r6, #31
  403efa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  403efe:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  403f02:	d022      	beq.n	403f4a <__lshift+0x92>
  403f04:	f1c2 0c20 	rsb	ip, r2, #32
  403f08:	2000      	movs	r0, #0
  403f0a:	680e      	ldr	r6, [r1, #0]
  403f0c:	4096      	lsls	r6, r2
  403f0e:	4330      	orrs	r0, r6
  403f10:	f843 0b04 	str.w	r0, [r3], #4
  403f14:	f851 0b04 	ldr.w	r0, [r1], #4
  403f18:	458e      	cmp	lr, r1
  403f1a:	fa20 f00c 	lsr.w	r0, r0, ip
  403f1e:	d8f4      	bhi.n	403f0a <__lshift+0x52>
  403f20:	6018      	str	r0, [r3, #0]
  403f22:	b108      	cbz	r0, 403f28 <__lshift+0x70>
  403f24:	f109 0502 	add.w	r5, r9, #2
  403f28:	3d01      	subs	r5, #1
  403f2a:	4638      	mov	r0, r7
  403f2c:	f8c8 5010 	str.w	r5, [r8, #16]
  403f30:	4621      	mov	r1, r4
  403f32:	f7ff fe3d 	bl	403bb0 <_Bfree>
  403f36:	4640      	mov	r0, r8
  403f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f3c:	3101      	adds	r1, #1
  403f3e:	005b      	lsls	r3, r3, #1
  403f40:	e7c8      	b.n	403ed4 <__lshift+0x1c>
  403f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403f46:	3201      	adds	r2, #1
  403f48:	e7ce      	b.n	403ee8 <__lshift+0x30>
  403f4a:	3b04      	subs	r3, #4
  403f4c:	f851 2b04 	ldr.w	r2, [r1], #4
  403f50:	f843 2f04 	str.w	r2, [r3, #4]!
  403f54:	458e      	cmp	lr, r1
  403f56:	d8f9      	bhi.n	403f4c <__lshift+0x94>
  403f58:	e7e6      	b.n	403f28 <__lshift+0x70>

00403f5a <__mcmp>:
  403f5a:	6903      	ldr	r3, [r0, #16]
  403f5c:	690a      	ldr	r2, [r1, #16]
  403f5e:	1a9b      	subs	r3, r3, r2
  403f60:	b530      	push	{r4, r5, lr}
  403f62:	d10c      	bne.n	403f7e <__mcmp+0x24>
  403f64:	0092      	lsls	r2, r2, #2
  403f66:	3014      	adds	r0, #20
  403f68:	3114      	adds	r1, #20
  403f6a:	1884      	adds	r4, r0, r2
  403f6c:	4411      	add	r1, r2
  403f6e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  403f72:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  403f76:	4295      	cmp	r5, r2
  403f78:	d003      	beq.n	403f82 <__mcmp+0x28>
  403f7a:	d305      	bcc.n	403f88 <__mcmp+0x2e>
  403f7c:	2301      	movs	r3, #1
  403f7e:	4618      	mov	r0, r3
  403f80:	bd30      	pop	{r4, r5, pc}
  403f82:	42a0      	cmp	r0, r4
  403f84:	d3f3      	bcc.n	403f6e <__mcmp+0x14>
  403f86:	e7fa      	b.n	403f7e <__mcmp+0x24>
  403f88:	f04f 33ff 	mov.w	r3, #4294967295
  403f8c:	e7f7      	b.n	403f7e <__mcmp+0x24>

00403f8e <__mdiff>:
  403f8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403f92:	460d      	mov	r5, r1
  403f94:	4607      	mov	r7, r0
  403f96:	4611      	mov	r1, r2
  403f98:	4628      	mov	r0, r5
  403f9a:	4614      	mov	r4, r2
  403f9c:	f7ff ffdd 	bl	403f5a <__mcmp>
  403fa0:	1e06      	subs	r6, r0, #0
  403fa2:	d108      	bne.n	403fb6 <__mdiff+0x28>
  403fa4:	4631      	mov	r1, r6
  403fa6:	4638      	mov	r0, r7
  403fa8:	f7ff fdce 	bl	403b48 <_Balloc>
  403fac:	2301      	movs	r3, #1
  403fae:	6103      	str	r3, [r0, #16]
  403fb0:	6146      	str	r6, [r0, #20]
  403fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403fb6:	bfa4      	itt	ge
  403fb8:	4623      	movge	r3, r4
  403fba:	462c      	movge	r4, r5
  403fbc:	4638      	mov	r0, r7
  403fbe:	6861      	ldr	r1, [r4, #4]
  403fc0:	bfa6      	itte	ge
  403fc2:	461d      	movge	r5, r3
  403fc4:	2600      	movge	r6, #0
  403fc6:	2601      	movlt	r6, #1
  403fc8:	f7ff fdbe 	bl	403b48 <_Balloc>
  403fcc:	692b      	ldr	r3, [r5, #16]
  403fce:	60c6      	str	r6, [r0, #12]
  403fd0:	6926      	ldr	r6, [r4, #16]
  403fd2:	f105 0914 	add.w	r9, r5, #20
  403fd6:	f104 0214 	add.w	r2, r4, #20
  403fda:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  403fde:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  403fe2:	f100 0514 	add.w	r5, r0, #20
  403fe6:	f04f 0c00 	mov.w	ip, #0
  403fea:	f852 ab04 	ldr.w	sl, [r2], #4
  403fee:	f859 4b04 	ldr.w	r4, [r9], #4
  403ff2:	fa1c f18a 	uxtah	r1, ip, sl
  403ff6:	b2a3      	uxth	r3, r4
  403ff8:	1ac9      	subs	r1, r1, r3
  403ffa:	0c23      	lsrs	r3, r4, #16
  403ffc:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  404000:	eb03 4321 	add.w	r3, r3, r1, asr #16
  404004:	b289      	uxth	r1, r1
  404006:	ea4f 4c23 	mov.w	ip, r3, asr #16
  40400a:	45c8      	cmp	r8, r9
  40400c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  404010:	4696      	mov	lr, r2
  404012:	f845 3b04 	str.w	r3, [r5], #4
  404016:	d8e8      	bhi.n	403fea <__mdiff+0x5c>
  404018:	45be      	cmp	lr, r7
  40401a:	d305      	bcc.n	404028 <__mdiff+0x9a>
  40401c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404020:	b18b      	cbz	r3, 404046 <__mdiff+0xb8>
  404022:	6106      	str	r6, [r0, #16]
  404024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404028:	f85e 1b04 	ldr.w	r1, [lr], #4
  40402c:	fa1c f381 	uxtah	r3, ip, r1
  404030:	141a      	asrs	r2, r3, #16
  404032:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  404036:	b29b      	uxth	r3, r3
  404038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40403c:	ea4f 4c22 	mov.w	ip, r2, asr #16
  404040:	f845 3b04 	str.w	r3, [r5], #4
  404044:	e7e8      	b.n	404018 <__mdiff+0x8a>
  404046:	3e01      	subs	r6, #1
  404048:	e7e8      	b.n	40401c <__mdiff+0x8e>

0040404a <__d2b>:
  40404a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  40404e:	2101      	movs	r1, #1
  404050:	461c      	mov	r4, r3
  404052:	4690      	mov	r8, r2
  404054:	9e08      	ldr	r6, [sp, #32]
  404056:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404058:	f7ff fd76 	bl	403b48 <_Balloc>
  40405c:	f3c4 0213 	ubfx	r2, r4, #0, #20
  404060:	f3c4 540a 	ubfx	r4, r4, #20, #11
  404064:	4607      	mov	r7, r0
  404066:	bb34      	cbnz	r4, 4040b6 <__d2b+0x6c>
  404068:	9201      	str	r2, [sp, #4]
  40406a:	f1b8 0f00 	cmp.w	r8, #0
  40406e:	d027      	beq.n	4040c0 <__d2b+0x76>
  404070:	a802      	add	r0, sp, #8
  404072:	f840 8d08 	str.w	r8, [r0, #-8]!
  404076:	f7ff fe0c 	bl	403c92 <__lo0bits>
  40407a:	9900      	ldr	r1, [sp, #0]
  40407c:	b1f0      	cbz	r0, 4040bc <__d2b+0x72>
  40407e:	9a01      	ldr	r2, [sp, #4]
  404080:	f1c0 0320 	rsb	r3, r0, #32
  404084:	fa02 f303 	lsl.w	r3, r2, r3
  404088:	430b      	orrs	r3, r1
  40408a:	40c2      	lsrs	r2, r0
  40408c:	617b      	str	r3, [r7, #20]
  40408e:	9201      	str	r2, [sp, #4]
  404090:	9b01      	ldr	r3, [sp, #4]
  404092:	61bb      	str	r3, [r7, #24]
  404094:	2b00      	cmp	r3, #0
  404096:	bf14      	ite	ne
  404098:	2102      	movne	r1, #2
  40409a:	2101      	moveq	r1, #1
  40409c:	6139      	str	r1, [r7, #16]
  40409e:	b1c4      	cbz	r4, 4040d2 <__d2b+0x88>
  4040a0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  4040a4:	4404      	add	r4, r0
  4040a6:	6034      	str	r4, [r6, #0]
  4040a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4040ac:	6028      	str	r0, [r5, #0]
  4040ae:	4638      	mov	r0, r7
  4040b0:	b002      	add	sp, #8
  4040b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4040b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4040ba:	e7d5      	b.n	404068 <__d2b+0x1e>
  4040bc:	6179      	str	r1, [r7, #20]
  4040be:	e7e7      	b.n	404090 <__d2b+0x46>
  4040c0:	a801      	add	r0, sp, #4
  4040c2:	f7ff fde6 	bl	403c92 <__lo0bits>
  4040c6:	9b01      	ldr	r3, [sp, #4]
  4040c8:	617b      	str	r3, [r7, #20]
  4040ca:	2101      	movs	r1, #1
  4040cc:	6139      	str	r1, [r7, #16]
  4040ce:	3020      	adds	r0, #32
  4040d0:	e7e5      	b.n	40409e <__d2b+0x54>
  4040d2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  4040d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4040da:	6030      	str	r0, [r6, #0]
  4040dc:	6918      	ldr	r0, [r3, #16]
  4040de:	f7ff fdb9 	bl	403c54 <__hi0bits>
  4040e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4040e6:	e7e1      	b.n	4040ac <__d2b+0x62>

004040e8 <_calloc_r>:
  4040e8:	b538      	push	{r3, r4, r5, lr}
  4040ea:	fb02 f401 	mul.w	r4, r2, r1
  4040ee:	4621      	mov	r1, r4
  4040f0:	f000 f856 	bl	4041a0 <_malloc_r>
  4040f4:	4605      	mov	r5, r0
  4040f6:	b118      	cbz	r0, 404100 <_calloc_r+0x18>
  4040f8:	4622      	mov	r2, r4
  4040fa:	2100      	movs	r1, #0
  4040fc:	f7fe f90b 	bl	402316 <memset>
  404100:	4628      	mov	r0, r5
  404102:	bd38      	pop	{r3, r4, r5, pc}

00404104 <_free_r>:
  404104:	b538      	push	{r3, r4, r5, lr}
  404106:	4605      	mov	r5, r0
  404108:	2900      	cmp	r1, #0
  40410a:	d045      	beq.n	404198 <_free_r+0x94>
  40410c:	f851 3c04 	ldr.w	r3, [r1, #-4]
  404110:	1f0c      	subs	r4, r1, #4
  404112:	2b00      	cmp	r3, #0
  404114:	bfb8      	it	lt
  404116:	18e4      	addlt	r4, r4, r3
  404118:	f000 f94c 	bl	4043b4 <__malloc_lock>
  40411c:	4a1f      	ldr	r2, [pc, #124]	; (40419c <_free_r+0x98>)
  40411e:	6813      	ldr	r3, [r2, #0]
  404120:	4610      	mov	r0, r2
  404122:	b933      	cbnz	r3, 404132 <_free_r+0x2e>
  404124:	6063      	str	r3, [r4, #4]
  404126:	6014      	str	r4, [r2, #0]
  404128:	4628      	mov	r0, r5
  40412a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40412e:	f000 b942 	b.w	4043b6 <__malloc_unlock>
  404132:	42a3      	cmp	r3, r4
  404134:	d90c      	bls.n	404150 <_free_r+0x4c>
  404136:	6821      	ldr	r1, [r4, #0]
  404138:	1862      	adds	r2, r4, r1
  40413a:	4293      	cmp	r3, r2
  40413c:	bf04      	itt	eq
  40413e:	681a      	ldreq	r2, [r3, #0]
  404140:	685b      	ldreq	r3, [r3, #4]
  404142:	6063      	str	r3, [r4, #4]
  404144:	bf04      	itt	eq
  404146:	1852      	addeq	r2, r2, r1
  404148:	6022      	streq	r2, [r4, #0]
  40414a:	6004      	str	r4, [r0, #0]
  40414c:	e7ec      	b.n	404128 <_free_r+0x24>
  40414e:	4613      	mov	r3, r2
  404150:	685a      	ldr	r2, [r3, #4]
  404152:	b10a      	cbz	r2, 404158 <_free_r+0x54>
  404154:	42a2      	cmp	r2, r4
  404156:	d9fa      	bls.n	40414e <_free_r+0x4a>
  404158:	6819      	ldr	r1, [r3, #0]
  40415a:	1858      	adds	r0, r3, r1
  40415c:	42a0      	cmp	r0, r4
  40415e:	d10b      	bne.n	404178 <_free_r+0x74>
  404160:	6820      	ldr	r0, [r4, #0]
  404162:	4401      	add	r1, r0
  404164:	1858      	adds	r0, r3, r1
  404166:	4282      	cmp	r2, r0
  404168:	6019      	str	r1, [r3, #0]
  40416a:	d1dd      	bne.n	404128 <_free_r+0x24>
  40416c:	6810      	ldr	r0, [r2, #0]
  40416e:	6852      	ldr	r2, [r2, #4]
  404170:	605a      	str	r2, [r3, #4]
  404172:	4401      	add	r1, r0
  404174:	6019      	str	r1, [r3, #0]
  404176:	e7d7      	b.n	404128 <_free_r+0x24>
  404178:	d902      	bls.n	404180 <_free_r+0x7c>
  40417a:	230c      	movs	r3, #12
  40417c:	602b      	str	r3, [r5, #0]
  40417e:	e7d3      	b.n	404128 <_free_r+0x24>
  404180:	6820      	ldr	r0, [r4, #0]
  404182:	1821      	adds	r1, r4, r0
  404184:	428a      	cmp	r2, r1
  404186:	bf04      	itt	eq
  404188:	6811      	ldreq	r1, [r2, #0]
  40418a:	6852      	ldreq	r2, [r2, #4]
  40418c:	6062      	str	r2, [r4, #4]
  40418e:	bf04      	itt	eq
  404190:	1809      	addeq	r1, r1, r0
  404192:	6021      	streq	r1, [r4, #0]
  404194:	605c      	str	r4, [r3, #4]
  404196:	e7c7      	b.n	404128 <_free_r+0x24>
  404198:	bd38      	pop	{r3, r4, r5, pc}
  40419a:	bf00      	nop
  40419c:	204002b4 	.word	0x204002b4

004041a0 <_malloc_r>:
  4041a0:	b570      	push	{r4, r5, r6, lr}
  4041a2:	1ccd      	adds	r5, r1, #3
  4041a4:	f025 0503 	bic.w	r5, r5, #3
  4041a8:	3508      	adds	r5, #8
  4041aa:	2d0c      	cmp	r5, #12
  4041ac:	bf38      	it	cc
  4041ae:	250c      	movcc	r5, #12
  4041b0:	2d00      	cmp	r5, #0
  4041b2:	4606      	mov	r6, r0
  4041b4:	db01      	blt.n	4041ba <_malloc_r+0x1a>
  4041b6:	42a9      	cmp	r1, r5
  4041b8:	d903      	bls.n	4041c2 <_malloc_r+0x22>
  4041ba:	230c      	movs	r3, #12
  4041bc:	6033      	str	r3, [r6, #0]
  4041be:	2000      	movs	r0, #0
  4041c0:	bd70      	pop	{r4, r5, r6, pc}
  4041c2:	f000 f8f7 	bl	4043b4 <__malloc_lock>
  4041c6:	4a23      	ldr	r2, [pc, #140]	; (404254 <_malloc_r+0xb4>)
  4041c8:	6814      	ldr	r4, [r2, #0]
  4041ca:	4621      	mov	r1, r4
  4041cc:	b991      	cbnz	r1, 4041f4 <_malloc_r+0x54>
  4041ce:	4c22      	ldr	r4, [pc, #136]	; (404258 <_malloc_r+0xb8>)
  4041d0:	6823      	ldr	r3, [r4, #0]
  4041d2:	b91b      	cbnz	r3, 4041dc <_malloc_r+0x3c>
  4041d4:	4630      	mov	r0, r6
  4041d6:	f000 f841 	bl	40425c <_sbrk_r>
  4041da:	6020      	str	r0, [r4, #0]
  4041dc:	4629      	mov	r1, r5
  4041de:	4630      	mov	r0, r6
  4041e0:	f000 f83c 	bl	40425c <_sbrk_r>
  4041e4:	1c43      	adds	r3, r0, #1
  4041e6:	d126      	bne.n	404236 <_malloc_r+0x96>
  4041e8:	230c      	movs	r3, #12
  4041ea:	6033      	str	r3, [r6, #0]
  4041ec:	4630      	mov	r0, r6
  4041ee:	f000 f8e2 	bl	4043b6 <__malloc_unlock>
  4041f2:	e7e4      	b.n	4041be <_malloc_r+0x1e>
  4041f4:	680b      	ldr	r3, [r1, #0]
  4041f6:	1b5b      	subs	r3, r3, r5
  4041f8:	d41a      	bmi.n	404230 <_malloc_r+0x90>
  4041fa:	2b0b      	cmp	r3, #11
  4041fc:	d90f      	bls.n	40421e <_malloc_r+0x7e>
  4041fe:	600b      	str	r3, [r1, #0]
  404200:	50cd      	str	r5, [r1, r3]
  404202:	18cc      	adds	r4, r1, r3
  404204:	4630      	mov	r0, r6
  404206:	f000 f8d6 	bl	4043b6 <__malloc_unlock>
  40420a:	f104 000b 	add.w	r0, r4, #11
  40420e:	1d23      	adds	r3, r4, #4
  404210:	f020 0007 	bic.w	r0, r0, #7
  404214:	1ac3      	subs	r3, r0, r3
  404216:	d01b      	beq.n	404250 <_malloc_r+0xb0>
  404218:	425a      	negs	r2, r3
  40421a:	50e2      	str	r2, [r4, r3]
  40421c:	bd70      	pop	{r4, r5, r6, pc}
  40421e:	428c      	cmp	r4, r1
  404220:	bf0d      	iteet	eq
  404222:	6863      	ldreq	r3, [r4, #4]
  404224:	684b      	ldrne	r3, [r1, #4]
  404226:	6063      	strne	r3, [r4, #4]
  404228:	6013      	streq	r3, [r2, #0]
  40422a:	bf18      	it	ne
  40422c:	460c      	movne	r4, r1
  40422e:	e7e9      	b.n	404204 <_malloc_r+0x64>
  404230:	460c      	mov	r4, r1
  404232:	6849      	ldr	r1, [r1, #4]
  404234:	e7ca      	b.n	4041cc <_malloc_r+0x2c>
  404236:	1cc4      	adds	r4, r0, #3
  404238:	f024 0403 	bic.w	r4, r4, #3
  40423c:	42a0      	cmp	r0, r4
  40423e:	d005      	beq.n	40424c <_malloc_r+0xac>
  404240:	1a21      	subs	r1, r4, r0
  404242:	4630      	mov	r0, r6
  404244:	f000 f80a 	bl	40425c <_sbrk_r>
  404248:	3001      	adds	r0, #1
  40424a:	d0cd      	beq.n	4041e8 <_malloc_r+0x48>
  40424c:	6025      	str	r5, [r4, #0]
  40424e:	e7d9      	b.n	404204 <_malloc_r+0x64>
  404250:	bd70      	pop	{r4, r5, r6, pc}
  404252:	bf00      	nop
  404254:	204002b4 	.word	0x204002b4
  404258:	204002b8 	.word	0x204002b8

0040425c <_sbrk_r>:
  40425c:	b538      	push	{r3, r4, r5, lr}
  40425e:	4c06      	ldr	r4, [pc, #24]	; (404278 <_sbrk_r+0x1c>)
  404260:	2300      	movs	r3, #0
  404262:	4605      	mov	r5, r0
  404264:	4608      	mov	r0, r1
  404266:	6023      	str	r3, [r4, #0]
  404268:	f7fc fd62 	bl	400d30 <_sbrk>
  40426c:	1c43      	adds	r3, r0, #1
  40426e:	d102      	bne.n	404276 <_sbrk_r+0x1a>
  404270:	6823      	ldr	r3, [r4, #0]
  404272:	b103      	cbz	r3, 404276 <_sbrk_r+0x1a>
  404274:	602b      	str	r3, [r5, #0]
  404276:	bd38      	pop	{r3, r4, r5, pc}
  404278:	20400368 	.word	0x20400368

0040427c <__sread>:
  40427c:	b510      	push	{r4, lr}
  40427e:	460c      	mov	r4, r1
  404280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404284:	f000 f898 	bl	4043b8 <_read_r>
  404288:	2800      	cmp	r0, #0
  40428a:	bfab      	itete	ge
  40428c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  40428e:	89a3      	ldrhlt	r3, [r4, #12]
  404290:	181b      	addge	r3, r3, r0
  404292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  404296:	bfac      	ite	ge
  404298:	6563      	strge	r3, [r4, #84]	; 0x54
  40429a:	81a3      	strhlt	r3, [r4, #12]
  40429c:	bd10      	pop	{r4, pc}

0040429e <__swrite>:
  40429e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4042a2:	461f      	mov	r7, r3
  4042a4:	898b      	ldrh	r3, [r1, #12]
  4042a6:	05db      	lsls	r3, r3, #23
  4042a8:	4605      	mov	r5, r0
  4042aa:	460c      	mov	r4, r1
  4042ac:	4616      	mov	r6, r2
  4042ae:	d505      	bpl.n	4042bc <__swrite+0x1e>
  4042b0:	2302      	movs	r3, #2
  4042b2:	2200      	movs	r2, #0
  4042b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4042b8:	f000 f858 	bl	40436c <_lseek_r>
  4042bc:	89a3      	ldrh	r3, [r4, #12]
  4042be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4042c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4042c6:	81a3      	strh	r3, [r4, #12]
  4042c8:	4632      	mov	r2, r6
  4042ca:	463b      	mov	r3, r7
  4042cc:	4628      	mov	r0, r5
  4042ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4042d2:	f000 b817 	b.w	404304 <_write_r>

004042d6 <__sseek>:
  4042d6:	b510      	push	{r4, lr}
  4042d8:	460c      	mov	r4, r1
  4042da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4042de:	f000 f845 	bl	40436c <_lseek_r>
  4042e2:	1c43      	adds	r3, r0, #1
  4042e4:	89a3      	ldrh	r3, [r4, #12]
  4042e6:	bf15      	itete	ne
  4042e8:	6560      	strne	r0, [r4, #84]	; 0x54
  4042ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4042ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4042f2:	81a3      	strheq	r3, [r4, #12]
  4042f4:	bf18      	it	ne
  4042f6:	81a3      	strhne	r3, [r4, #12]
  4042f8:	bd10      	pop	{r4, pc}

004042fa <__sclose>:
  4042fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4042fe:	f000 b813 	b.w	404328 <_close_r>
	...

00404304 <_write_r>:
  404304:	b538      	push	{r3, r4, r5, lr}
  404306:	4c07      	ldr	r4, [pc, #28]	; (404324 <_write_r+0x20>)
  404308:	4605      	mov	r5, r0
  40430a:	4608      	mov	r0, r1
  40430c:	4611      	mov	r1, r2
  40430e:	2200      	movs	r2, #0
  404310:	6022      	str	r2, [r4, #0]
  404312:	461a      	mov	r2, r3
  404314:	f7fd faf8 	bl	401908 <_write>
  404318:	1c43      	adds	r3, r0, #1
  40431a:	d102      	bne.n	404322 <_write_r+0x1e>
  40431c:	6823      	ldr	r3, [r4, #0]
  40431e:	b103      	cbz	r3, 404322 <_write_r+0x1e>
  404320:	602b      	str	r3, [r5, #0]
  404322:	bd38      	pop	{r3, r4, r5, pc}
  404324:	20400368 	.word	0x20400368

00404328 <_close_r>:
  404328:	b538      	push	{r3, r4, r5, lr}
  40432a:	4c06      	ldr	r4, [pc, #24]	; (404344 <_close_r+0x1c>)
  40432c:	2300      	movs	r3, #0
  40432e:	4605      	mov	r5, r0
  404330:	4608      	mov	r0, r1
  404332:	6023      	str	r3, [r4, #0]
  404334:	f7fc fd0e 	bl	400d54 <_close>
  404338:	1c43      	adds	r3, r0, #1
  40433a:	d102      	bne.n	404342 <_close_r+0x1a>
  40433c:	6823      	ldr	r3, [r4, #0]
  40433e:	b103      	cbz	r3, 404342 <_close_r+0x1a>
  404340:	602b      	str	r3, [r5, #0]
  404342:	bd38      	pop	{r3, r4, r5, pc}
  404344:	20400368 	.word	0x20400368

00404348 <_fstat_r>:
  404348:	b538      	push	{r3, r4, r5, lr}
  40434a:	4c07      	ldr	r4, [pc, #28]	; (404368 <_fstat_r+0x20>)
  40434c:	2300      	movs	r3, #0
  40434e:	4605      	mov	r5, r0
  404350:	4608      	mov	r0, r1
  404352:	4611      	mov	r1, r2
  404354:	6023      	str	r3, [r4, #0]
  404356:	f7fc fd00 	bl	400d5a <_fstat>
  40435a:	1c43      	adds	r3, r0, #1
  40435c:	d102      	bne.n	404364 <_fstat_r+0x1c>
  40435e:	6823      	ldr	r3, [r4, #0]
  404360:	b103      	cbz	r3, 404364 <_fstat_r+0x1c>
  404362:	602b      	str	r3, [r5, #0]
  404364:	bd38      	pop	{r3, r4, r5, pc}
  404366:	bf00      	nop
  404368:	20400368 	.word	0x20400368

0040436c <_lseek_r>:
  40436c:	b538      	push	{r3, r4, r5, lr}
  40436e:	4c07      	ldr	r4, [pc, #28]	; (40438c <_lseek_r+0x20>)
  404370:	4605      	mov	r5, r0
  404372:	4608      	mov	r0, r1
  404374:	4611      	mov	r1, r2
  404376:	2200      	movs	r2, #0
  404378:	6022      	str	r2, [r4, #0]
  40437a:	461a      	mov	r2, r3
  40437c:	f7fc fcf2 	bl	400d64 <_lseek>
  404380:	1c43      	adds	r3, r0, #1
  404382:	d102      	bne.n	40438a <_lseek_r+0x1e>
  404384:	6823      	ldr	r3, [r4, #0]
  404386:	b103      	cbz	r3, 40438a <_lseek_r+0x1e>
  404388:	602b      	str	r3, [r5, #0]
  40438a:	bd38      	pop	{r3, r4, r5, pc}
  40438c:	20400368 	.word	0x20400368

00404390 <__ascii_mbtowc>:
  404390:	b082      	sub	sp, #8
  404392:	b901      	cbnz	r1, 404396 <__ascii_mbtowc+0x6>
  404394:	a901      	add	r1, sp, #4
  404396:	b142      	cbz	r2, 4043aa <__ascii_mbtowc+0x1a>
  404398:	b14b      	cbz	r3, 4043ae <__ascii_mbtowc+0x1e>
  40439a:	7813      	ldrb	r3, [r2, #0]
  40439c:	600b      	str	r3, [r1, #0]
  40439e:	7812      	ldrb	r2, [r2, #0]
  4043a0:	1c10      	adds	r0, r2, #0
  4043a2:	bf18      	it	ne
  4043a4:	2001      	movne	r0, #1
  4043a6:	b002      	add	sp, #8
  4043a8:	4770      	bx	lr
  4043aa:	4610      	mov	r0, r2
  4043ac:	e7fb      	b.n	4043a6 <__ascii_mbtowc+0x16>
  4043ae:	f06f 0001 	mvn.w	r0, #1
  4043b2:	e7f8      	b.n	4043a6 <__ascii_mbtowc+0x16>

004043b4 <__malloc_lock>:
  4043b4:	4770      	bx	lr

004043b6 <__malloc_unlock>:
  4043b6:	4770      	bx	lr

004043b8 <_read_r>:
  4043b8:	b538      	push	{r3, r4, r5, lr}
  4043ba:	4c07      	ldr	r4, [pc, #28]	; (4043d8 <_read_r+0x20>)
  4043bc:	4605      	mov	r5, r0
  4043be:	4608      	mov	r0, r1
  4043c0:	4611      	mov	r1, r2
  4043c2:	2200      	movs	r2, #0
  4043c4:	6022      	str	r2, [r4, #0]
  4043c6:	461a      	mov	r2, r3
  4043c8:	f7fd fa8c 	bl	4018e4 <_read>
  4043cc:	1c43      	adds	r3, r0, #1
  4043ce:	d102      	bne.n	4043d6 <_read_r+0x1e>
  4043d0:	6823      	ldr	r3, [r4, #0]
  4043d2:	b103      	cbz	r3, 4043d6 <_read_r+0x1e>
  4043d4:	602b      	str	r3, [r5, #0]
  4043d6:	bd38      	pop	{r3, r4, r5, pc}
  4043d8:	20400368 	.word	0x20400368

004043dc <__ascii_wctomb>:
  4043dc:	b149      	cbz	r1, 4043f2 <__ascii_wctomb+0x16>
  4043de:	2aff      	cmp	r2, #255	; 0xff
  4043e0:	bf85      	ittet	hi
  4043e2:	238a      	movhi	r3, #138	; 0x8a
  4043e4:	6003      	strhi	r3, [r0, #0]
  4043e6:	700a      	strbls	r2, [r1, #0]
  4043e8:	f04f 30ff 	movhi.w	r0, #4294967295
  4043ec:	bf98      	it	ls
  4043ee:	2001      	movls	r0, #1
  4043f0:	4770      	bx	lr
  4043f2:	4608      	mov	r0, r1
  4043f4:	4770      	bx	lr
	...

004043f8 <__aeabi_dcmpun>:
  4043f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4043fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404400:	d102      	bne.n	404408 <__aeabi_dcmpun+0x10>
  404402:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404406:	d10a      	bne.n	40441e <__aeabi_dcmpun+0x26>
  404408:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40440c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404410:	d102      	bne.n	404418 <__aeabi_dcmpun+0x20>
  404412:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404416:	d102      	bne.n	40441e <__aeabi_dcmpun+0x26>
  404418:	f04f 0000 	mov.w	r0, #0
  40441c:	4770      	bx	lr
  40441e:	f04f 0001 	mov.w	r0, #1
  404422:	4770      	bx	lr
  404424:	682f2e2e 	.word	0x682f2e2e
  404428:	732f6c61 	.word	0x732f6c61
  40442c:	682f6372 	.word	0x682f6372
  404430:	615f6c61 	.word	0x615f6c61
  404434:	735f6364 	.word	0x735f6364
  404438:	2e636e79 	.word	0x2e636e79
  40443c:	00000063 	.word	0x00000063
  404440:	682f2e2e 	.word	0x682f2e2e
  404444:	732f6c61 	.word	0x732f6c61
  404448:	682f6372 	.word	0x682f6372
  40444c:	695f6c61 	.word	0x695f6c61
  404450:	00632e6f 	.word	0x00632e6f
  404454:	682f2e2e 	.word	0x682f2e2e
  404458:	732f6c61 	.word	0x732f6c61
  40445c:	682f6372 	.word	0x682f6372
  404460:	705f6c61 	.word	0x705f6c61
  404464:	632e6d77 	.word	0x632e6d77
  404468:	00000000 	.word	0x00000000
  40446c:	682f2e2e 	.word	0x682f2e2e
  404470:	732f6c61 	.word	0x732f6c61
  404474:	682f6372 	.word	0x682f6372
  404478:	745f6c61 	.word	0x745f6c61
  40447c:	72656d69 	.word	0x72656d69
  404480:	0000632e 	.word	0x0000632e
  404484:	682f2e2e 	.word	0x682f2e2e
  404488:	732f6c61 	.word	0x732f6c61
  40448c:	682f6372 	.word	0x682f6372
  404490:	755f6c61 	.word	0x755f6c61
  404494:	74726173 	.word	0x74726173
  404498:	6e79735f 	.word	0x6e79735f
  40449c:	00632e63 	.word	0x00632e63
  4044a0:	682f2e2e 	.word	0x682f2e2e
  4044a4:	752f6c61 	.word	0x752f6c61
  4044a8:	736c6974 	.word	0x736c6974
  4044ac:	6372732f 	.word	0x6372732f
  4044b0:	6974752f 	.word	0x6974752f
  4044b4:	6c5f736c 	.word	0x6c5f736c
  4044b8:	2e747369 	.word	0x2e747369
  4044bc:	00000063 	.word	0x00000063

004044c0 <_afecs>:
  4044c0:	00000000 2f843100 03000000 ffffffff     .....1./........
  4044d0:	0000ffff 00000000 00000000 00000000     ................
  4044e0:	0000010c 00000000 00000000 00000000     ................
  4044f0:	00000000 00000200 00000200 00000200     ................
  404500:	00000200 00000200 00000200 00000200     ................
  404510:	00000200 00000200 00000200 00000200     ................
  404520:	00000200 00000001 2f843100 03000000     .........1./....
  404530:	ffffffff 0000ffff 00000000 00000000     ................
  404540:	00000000 0000010c 00000000 00000000     ................
	...
  404558:	00000200 00000200 00000200 00000200     ................
  404568:	00000200 00000200 00000200 00000200     ................
  404578:	00000200 00000200 00000200 00000200     ................
  404588:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  404598:	63656661 0000632e                       afec.c..

004045a0 <_ext_irq>:
  4045a0:	00000000 00000024 00000000 00000000     ....$...........
	...
  4045bc:	00000003 00080000 00000000 00000000     ................
	...

004045d8 <_pio_irq_n>:
  4045d8:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  4045e8:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  4045f8:	00000000                                ....

004045fc <_pwms>:
  4045fc:	40020000 0000001f 00010019 00000001     ...@............
  40460c:	00000001 000000ff 00000000 00000004     ................
	...
  404628:	00000002 00404684 00000000 2040029c     .....F@.......@ 
  404638:	4005c000 0000003c 00010019 00000001     ...@<...........
  404648:	00000001 000000ff 00000000 00000004     ................
	...
  404664:	00000001 00404674 00000000 20400290     ....tF@.......@ 

00404674 <_ch_cfg1>:
  404674:	00000000 0000010b 000003e8 00000200     ................

00404684 <_ch_cfg0>:
  404684:	00000000 0000010b 000003e8 00000200     ................
  404694:	00000002 0000010b 000003e8 00000200     ................
  4046a4:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  4046b4:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  4046c4:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

004046d0 <_usarts>:
  4046d0:	00000001 001008c0 000100f4 682f2e2e     ............../h
  4046e0:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  4046f0:	632e7472 00000000                       rt.c....

004046f8 <_global_impure_ptr>:
  4046f8:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  404708:	006e616e 6e490030 696e6966 4e007974     nan.0.Infinity.N
  404718:	00004e61                                aN..

0040471c <__sf_fake_stderr>:
	...

0040473c <__sf_fake_stdin>:
	...

0040475c <__sf_fake_stdout>:
	...

00404780 <__mprec_bigtens>:
  404780:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  404790:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4047a0:	7f73bf3c 75154fdd                       <.s..O.u

004047a8 <__mprec_tens>:
  4047a8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4047b8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4047c8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4047d8:	00000000 412e8480 00000000 416312d0     .......A......cA
  4047e8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4047f8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  404808:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  404818:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  404828:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  404838:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  404848:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  404858:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  404868:	79d99db4 44ea7843                       ...yCx.D

00404870 <p05.6047>:
  404870:	00000005 00000019 0000007d 4f500043     ........}...C.PO
  404880:	00584953 2000002e                                SIX...

00404886 <_ctype_>:
  404886:	20202000 20202020 28282020 20282828     .         ((((( 
  404896:	20202020 20202020 20202020 20202020                     
  4048a6:	10108820 10101010 10101010 10101010      ...............
  4048b6:	04040410 04040404 10040404 10101010     ................
  4048c6:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4048d6:	01010101 01010101 01010101 10101010     ................
  4048e6:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4048f6:	02020202 02020202 02020202 10101010     ................
  404906:	00000020 00000000 00000000 00000000      ...............
	...

00404988 <_init>:
  404988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40498a:	bf00      	nop
  40498c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40498e:	bc08      	pop	{r3}
  404990:	469e      	mov	lr, r3
  404992:	4770      	bx	lr

00404994 <__init_array_start>:
  404994:	0040018d 	.word	0x0040018d

00404998 <_fini>:
  404998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40499a:	bf00      	nop
  40499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40499e:	bc08      	pop	{r3}
  4049a0:	469e      	mov	lr, r3
  4049a2:	4770      	bx	lr

004049a4 <__fini_array_start>:
  4049a4:	00400169 	.word	0x00400169
