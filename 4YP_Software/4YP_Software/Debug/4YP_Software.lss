
4YP_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006360  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000218  20400000  00406360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000578  20400218  00406578  00020218  2**2
                  ALLOC
  3 .heap         00000200  20400790  00406af0  00020218  2**0
                  ALLOC
  4 .stack        00000400  20400990  00406cf0  00020218  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002b315  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000056a3  00000000  00000000  0004b5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cacd  00000000  00000000  00050c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e40  00000000  00000000  0005d724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cf0  00000000  00000000  0005e564  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000487f3  00000000  00000000  0005f254  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ff41  00000000  00000000  000a7a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00158e96  00000000  00000000  000c7988  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000030b0  00000000  00000000  00220820  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	90 0d 40 20 95 09 40 00 91 09 40 00 91 09 40 00     ..@ ..@...@...@.
  400010:	91 09 40 00 91 09 40 00 91 09 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	91 09 40 00 91 09 40 00 00 00 00 00 91 09 40 00     ..@...@.......@.
  40003c:	91 09 40 00 91 09 40 00 91 09 40 00 91 09 40 00     ..@...@...@...@.
  40004c:	91 09 40 00 91 09 40 00 91 09 40 00 91 09 40 00     ..@...@...@...@.
  40005c:	91 09 40 00 91 09 40 00 00 00 00 00 25 1e 40 00     ..@...@.....%.@.
  40006c:	31 1e 40 00 91 09 40 00 91 09 40 00 91 09 40 00     1.@...@...@...@.
  40007c:	91 09 40 00 19 1e 40 00 91 09 40 00 91 09 40 00     ..@...@...@...@.
  40008c:	91 09 40 00 91 09 40 00 91 09 40 00 91 09 40 00     ..@...@...@...@.
  40009c:	55 24 40 00 91 09 40 00 91 09 40 00 91 09 40 00     U$@...@...@...@.
  4000ac:	91 09 40 00 91 09 40 00 e1 19 40 00 91 09 40 00     ..@...@...@...@.
  4000bc:	e5 1f 40 00 91 09 40 00 91 09 40 00 91 09 40 00     ..@...@...@...@.
  4000cc:	91 09 40 00 91 09 40 00 c9 1b 40 00 91 09 40 00     ..@...@...@...@.
  4000dc:	91 09 40 00 f5 19 40 00 91 09 40 00 91 09 40 00     ..@...@...@...@.
  4000ec:	91 09 40 00 91 09 40 00 91 09 40 00 91 09 40 00     ..@...@...@...@.
  4000fc:	91 09 40 00 91 09 40 00 91 09 40 00 69 24 40 00     ..@...@...@.i$@.
  40010c:	91 09 40 00 91 09 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 91 09 40 00 91 09 40 00 c5 27 40 00     ......@...@..'@.
  40012c:	91 09 40 00 f9 1f 40 00 91 09 40 00 91 09 40 00     ..@...@...@...@.
  40013c:	91 09 40 00 91 09 40 00 91 09 40 00 91 09 40 00     ..@...@...@...@.
  40014c:	91 09 40 00 91 09 40 00 91 09 40 00 91 09 40 00     ..@...@...@...@.
  40015c:	91 09 40 00 91 09 40 00 91 09 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400218 	.word	0x20400218
  400184:	00000000 	.word	0x00000000
  400188:	00406360 	.word	0x00406360

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406360 	.word	0x00406360
  4001c8:	2040021c 	.word	0x2040021c
  4001cc:	00406360 	.word	0x00406360
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	00400e6d 	.word	0x00400e6d
  4001e4:	00402991 	.word	0x00402991

004001e8 <encoder_get_counter>:
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV(mask)) >> TC_CV_CV_Pos;
}

static inline hri_tc_cv_reg_t hri_tc_read_CV_CV_bf(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_CV & TC_CV_CV_Msk) >> TC_CV_CV_Pos;
  4001e8:	4a06      	ldr	r2, [pc, #24]	; (400204 <encoder_get_counter+0x1c>)
  4001ea:	6913      	ldr	r3, [r2, #16]
  4001ec:	6d10      	ldr	r0, [r2, #80]	; 0x50
	//if starting offset is 0 (which is the case before it was recorded) then it returns the actual counter
	
	
	//get A (first line) and B (second line) counters
	//note that rising and falling edges could be the other way round. It doesn't matter for the current implementation
	int encoder_counter_no_offset =	  ( int) hri_tc_read_CV_CV_bf(TC0,0) + ( int) hri_tc_read_CV_CV_bf(TC0,1) \
  4001ee:	4403      	add	r3, r0
  4001f0:	f502 2290 	add.w	r2, r2, #294912	; 0x48000
  4001f4:	6910      	ldr	r0, [r2, #16]
									+ ( int) hri_tc_read_CV_CV_bf(TC3,0) + ( int) hri_tc_read_CV_CV_bf(TC3,1) \
  4001f6:	4403      	add	r3, r0
  4001f8:	6d10      	ldr	r0, [r2, #80]	; 0x50
  4001fa:	4403      	add	r3, r0
									- encoder_inital_offset;														//get the number of steps normalised to the starting offset
  4001fc:	4a02      	ldr	r2, [pc, #8]	; (400208 <encoder_get_counter+0x20>)
  4001fe:	6810      	ldr	r0, [r2, #0]
								
	return encoder_counter_no_offset;
}
  400200:	1a18      	subs	r0, r3, r0
  400202:	4770      	bx	lr
  400204:	4000c000 	.word	0x4000c000
  400208:	20400560 	.word	0x20400560

0040020c <Encoder_Z_Interrupt>:
static void Encoder_Z_Interrupt (void){
  40020c:	b508      	push	{r3, lr}
	int encoder_counter_no_offset = encoder_get_counter();
  40020e:	4b05      	ldr	r3, [pc, #20]	; (400224 <Encoder_Z_Interrupt+0x18>)
  400210:	4798      	blx	r3
	if(encoder_num_Z_interrupts == 0){
  400212:	4b05      	ldr	r3, [pc, #20]	; (400228 <Encoder_Z_Interrupt+0x1c>)
  400214:	681b      	ldr	r3, [r3, #0]
  400216:	b90b      	cbnz	r3, 40021c <Encoder_Z_Interrupt+0x10>
		encoder_inital_offset = encoder_counter_no_offset;
  400218:	4a04      	ldr	r2, [pc, #16]	; (40022c <Encoder_Z_Interrupt+0x20>)
  40021a:	6010      	str	r0, [r2, #0]
	encoder_num_Z_interrupts ++;
  40021c:	3301      	adds	r3, #1
  40021e:	4a02      	ldr	r2, [pc, #8]	; (400228 <Encoder_Z_Interrupt+0x1c>)
  400220:	6013      	str	r3, [r2, #0]
  400222:	bd08      	pop	{r3, pc}
  400224:	004001e9 	.word	0x004001e9
  400228:	2040055c 	.word	0x2040055c
  40022c:	20400560 	.word	0x20400560

00400230 <encoder_init>:
void encoder_init(void){
  400230:	b508      	push	{r3, lr}
	ext_irq_register(PIO_PB13_IDX,Encoder_Z_Interrupt);
  400232:	4942      	ldr	r1, [pc, #264]	; (40033c <encoder_init+0x10c>)
  400234:	202d      	movs	r0, #45	; 0x2d
  400236:	4b42      	ldr	r3, [pc, #264]	; (400340 <encoder_init+0x110>)
  400238:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40023a:	4b42      	ldr	r3, [pc, #264]	; (400344 <encoder_init+0x114>)
  40023c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400240:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400242:	2240      	movs	r2, #64	; 0x40
  400244:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400248:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40024c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400250:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400254:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400258:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40025c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400264:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400268:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40026c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400278:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40027c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400280:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400284:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  40028c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400290:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400294:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400298:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40029c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4002a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002a4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4002b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4002b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002b8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002cc:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4002d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002e0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002e4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4002ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4002f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002f4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002f8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4002fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400304:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400308:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40030c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400310:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400318:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40031c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400320:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400324:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40032c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400330:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400334:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400338:	bd08      	pop	{r3, pc}
  40033a:	bf00      	nop
  40033c:	0040020d 	.word	0x0040020d
  400340:	00401265 	.word	0x00401265
  400344:	e000e100 	.word	0xe000e100

00400348 <Position_1_Interrupt>:
	
	// update previous systick value
	pos_sens_last_SysTick_count = current_systick;
}

static void Position_1_Interrupt (void){
  400348:	b538      	push	{r3, r4, r5, lr}
	int current_systick = SysTick->VAL;
  40034a:	4b14      	ldr	r3, [pc, #80]	; (40039c <Position_1_Interrupt+0x54>)
  40034c:	6898      	ldr	r0, [r3, #8]
	int delta = current_systick - pos_sens_last_SysTick_count;
  40034e:	4b14      	ldr	r3, [pc, #80]	; (4003a0 <Position_1_Interrupt+0x58>)
  400350:	681b      	ldr	r3, [r3, #0]
  400352:	1ac3      	subs	r3, r0, r3
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  400354:	2b00      	cmp	r3, #0
  400356:	dd13      	ble.n	400380 <Position_1_Interrupt+0x38>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400358:	2201      	movs	r2, #1
  40035a:	2a00      	cmp	r2, #0
  40035c:	dc13      	bgt.n	400386 <Position_1_Interrupt+0x3e>
	pos_sens_deltas [0] = (float) delta / 300;
  40035e:	ee07 3a90 	vmov	s15, r3
  400362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400366:	eddf 6a0f 	vldr	s13, [pc, #60]	; 4003a4 <Position_1_Interrupt+0x5c>
  40036a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  40036e:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <Position_1_Interrupt+0x60>)
  400370:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  400374:	4b0a      	ldr	r3, [pc, #40]	; (4003a0 <Position_1_Interrupt+0x58>)
  400376:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	printf("POS 1\n");
  400378:	480c      	ldr	r0, [pc, #48]	; (4003ac <Position_1_Interrupt+0x64>)
  40037a:	4b0d      	ldr	r3, [pc, #52]	; (4003b0 <Position_1_Interrupt+0x68>)
  40037c:	4798      	blx	r3
  40037e:	bd38      	pop	{r3, r4, r5, pc}
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  400380:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
  400384:	e7e8      	b.n	400358 <Position_1_Interrupt+0x10>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  400386:	1e54      	subs	r4, r2, #1
  400388:	4907      	ldr	r1, [pc, #28]	; (4003a8 <Position_1_Interrupt+0x60>)
  40038a:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  40038e:	682d      	ldr	r5, [r5, #0]
  400390:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400394:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400396:	4622      	mov	r2, r4
  400398:	e7df      	b.n	40035a <Position_1_Interrupt+0x12>
  40039a:	bf00      	nop
  40039c:	e000e010 	.word	0xe000e010
  4003a0:	2040058c 	.word	0x2040058c
  4003a4:	43960000 	.word	0x43960000
  4003a8:	20400584 	.word	0x20400584
  4003ac:	00405bc8 	.word	0x00405bc8
  4003b0:	00403bd1 	.word	0x00403bd1

004003b4 <Position_2_Interrupt>:
}

static void Position_2_Interrupt (void){
  4003b4:	b538      	push	{r3, r4, r5, lr}
	int current_systick = SysTick->VAL;
  4003b6:	4b14      	ldr	r3, [pc, #80]	; (400408 <Position_2_Interrupt+0x54>)
  4003b8:	6898      	ldr	r0, [r3, #8]
	int delta = current_systick - pos_sens_last_SysTick_count;
  4003ba:	4b14      	ldr	r3, [pc, #80]	; (40040c <Position_2_Interrupt+0x58>)
  4003bc:	681b      	ldr	r3, [r3, #0]
  4003be:	1ac3      	subs	r3, r0, r3
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  4003c0:	2b00      	cmp	r3, #0
  4003c2:	dd13      	ble.n	4003ec <Position_2_Interrupt+0x38>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  4003c4:	2201      	movs	r2, #1
  4003c6:	2a00      	cmp	r2, #0
  4003c8:	dc13      	bgt.n	4003f2 <Position_2_Interrupt+0x3e>
	pos_sens_deltas [0] = (float) delta / 300;
  4003ca:	ee07 3a90 	vmov	s15, r3
  4003ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4003d2:	eddf 6a0f 	vldr	s13, [pc, #60]	; 400410 <Position_2_Interrupt+0x5c>
  4003d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4003da:	4b0e      	ldr	r3, [pc, #56]	; (400414 <Position_2_Interrupt+0x60>)
  4003dc:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  4003e0:	4b0a      	ldr	r3, [pc, #40]	; (40040c <Position_2_Interrupt+0x58>)
  4003e2:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	printf("POS 2\n");
  4003e4:	480c      	ldr	r0, [pc, #48]	; (400418 <Position_2_Interrupt+0x64>)
  4003e6:	4b0d      	ldr	r3, [pc, #52]	; (40041c <Position_2_Interrupt+0x68>)
  4003e8:	4798      	blx	r3
  4003ea:	bd38      	pop	{r3, r4, r5, pc}
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  4003ec:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
  4003f0:	e7e8      	b.n	4003c4 <Position_2_Interrupt+0x10>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  4003f2:	1e54      	subs	r4, r2, #1
  4003f4:	4907      	ldr	r1, [pc, #28]	; (400414 <Position_2_Interrupt+0x60>)
  4003f6:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  4003fa:	682d      	ldr	r5, [r5, #0]
  4003fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  400400:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400402:	4622      	mov	r2, r4
  400404:	e7df      	b.n	4003c6 <Position_2_Interrupt+0x12>
  400406:	bf00      	nop
  400408:	e000e010 	.word	0xe000e010
  40040c:	2040058c 	.word	0x2040058c
  400410:	43960000 	.word	0x43960000
  400414:	20400584 	.word	0x20400584
  400418:	00405bd0 	.word	0x00405bd0
  40041c:	00403bd1 	.word	0x00403bd1

00400420 <Position_3_Interrupt>:
}

static void Position_3_Interrupt (void){
  400420:	b538      	push	{r3, r4, r5, lr}
	int current_systick = SysTick->VAL;
  400422:	4b14      	ldr	r3, [pc, #80]	; (400474 <Position_3_Interrupt+0x54>)
  400424:	6898      	ldr	r0, [r3, #8]
	int delta = current_systick - pos_sens_last_SysTick_count;
  400426:	4b14      	ldr	r3, [pc, #80]	; (400478 <Position_3_Interrupt+0x58>)
  400428:	681b      	ldr	r3, [r3, #0]
  40042a:	1ac3      	subs	r3, r0, r3
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  40042c:	2b00      	cmp	r3, #0
  40042e:	dd13      	ble.n	400458 <Position_3_Interrupt+0x38>
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  400430:	2201      	movs	r2, #1
  400432:	2a00      	cmp	r2, #0
  400434:	dc13      	bgt.n	40045e <Position_3_Interrupt+0x3e>
	pos_sens_deltas [0] = (float) delta / 300;
  400436:	ee07 3a90 	vmov	s15, r3
  40043a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40043e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 40047c <Position_3_Interrupt+0x5c>
  400442:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400446:	4b0e      	ldr	r3, [pc, #56]	; (400480 <Position_3_Interrupt+0x60>)
  400448:	ed83 7a00 	vstr	s14, [r3]
	pos_sens_last_SysTick_count = current_systick;
  40044c:	4b0a      	ldr	r3, [pc, #40]	; (400478 <Position_3_Interrupt+0x58>)
  40044e:	6018      	str	r0, [r3, #0]
	Position_General_Interrupt();
	printf("POS 3\n");
  400450:	480c      	ldr	r0, [pc, #48]	; (400484 <Position_3_Interrupt+0x64>)
  400452:	4b0d      	ldr	r3, [pc, #52]	; (400488 <Position_3_Interrupt+0x68>)
  400454:	4798      	blx	r3
  400456:	bd38      	pop	{r3, r4, r5, pc}
	if(delta <= 0) delta += (1<<25);	//systick is 24 bit counter
  400458:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
  40045c:	e7e8      	b.n	400430 <Position_3_Interrupt+0x10>
		pos_sens_deltas[i] = pos_sens_deltas[i-1];
  40045e:	1e54      	subs	r4, r2, #1
  400460:	4907      	ldr	r1, [pc, #28]	; (400480 <Position_3_Interrupt+0x60>)
  400462:	eb01 0584 	add.w	r5, r1, r4, lsl #2
  400466:	682d      	ldr	r5, [r5, #0]
  400468:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40046c:	6015      	str	r5, [r2, #0]
	for (int i = POS_SENS_DELTAS_SIZE-1 ; i > 0; i--){
  40046e:	4622      	mov	r2, r4
  400470:	e7df      	b.n	400432 <Position_3_Interrupt+0x12>
  400472:	bf00      	nop
  400474:	e000e010 	.word	0xe000e010
  400478:	2040058c 	.word	0x2040058c
  40047c:	43960000 	.word	0x43960000
  400480:	20400584 	.word	0x20400584
  400484:	00405bd8 	.word	0x00405bd8
  400488:	00403bd1 	.word	0x00403bd1

0040048c <pos_sens_init>:
}

void pos_sens_init (void){
  40048c:	b510      	push	{r4, lr}
	//set interrupt handlers
	ext_irq_register(PIO_PD19_IDX, Position_3_Interrupt);		//POS 3
  40048e:	4918      	ldr	r1, [pc, #96]	; (4004f0 <pos_sens_init+0x64>)
  400490:	2073      	movs	r0, #115	; 0x73
  400492:	4c18      	ldr	r4, [pc, #96]	; (4004f4 <pos_sens_init+0x68>)
  400494:	47a0      	blx	r4
	ext_irq_register(PIO_PA2_IDX, Position_2_Interrupt);		//POS 2
  400496:	4918      	ldr	r1, [pc, #96]	; (4004f8 <pos_sens_init+0x6c>)
  400498:	2002      	movs	r0, #2
  40049a:	47a0      	blx	r4
	ext_irq_register(PIO_PA5_IDX, Position_1_Interrupt);		//POS 1
  40049c:	4917      	ldr	r1, [pc, #92]	; (4004fc <pos_sens_init+0x70>)
  40049e:	2005      	movs	r0, #5
  4004a0:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4004a2:	4b17      	ldr	r3, [pc, #92]	; (400500 <pos_sens_init+0x74>)
  4004a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4004a8:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4004aa:	2220      	movs	r2, #32
  4004ac:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4004b0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4004b4:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4004b6:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ	(PIOD_IRQn);
	NVIC_SetPriority(PIOD_IRQn, IRQ_PRIORITY_POSITION_SENS);

	
	//SysTick starting from 0
	pos_sens_last_SysTick_count = 0;
  4004ba:	2200      	movs	r2, #0
  4004bc:	4b11      	ldr	r3, [pc, #68]	; (400504 <pos_sens_init+0x78>)
  4004be:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
  4004c0:	4b11      	ldr	r3, [pc, #68]	; (400508 <pos_sens_init+0x7c>)
  4004c2:	609a      	str	r2, [r3, #8]
	//make the load value max, so that the overflows are as rare as possible
	SysTick->LOAD = (0xFFFFFF);
  4004c4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  4004c8:	605a      	str	r2, [r3, #4]

	this means that the moment we transition to state (POS1=1, POS2=0 POS3=0) we are at 0 electrical degrees
	*/

	// sector_lookup_table[POS3][POS2][POS1];
	sector_lookup_table[0][0][1] = 1;
  4004ca:	4b10      	ldr	r3, [pc, #64]	; (40050c <pos_sens_init+0x80>)
  4004cc:	2201      	movs	r2, #1
  4004ce:	605a      	str	r2, [r3, #4]
	sector_lookup_table[0][1][1] = 2;
  4004d0:	2202      	movs	r2, #2
  4004d2:	60da      	str	r2, [r3, #12]
	sector_lookup_table[0][1][0] = 3;
  4004d4:	2203      	movs	r2, #3
  4004d6:	609a      	str	r2, [r3, #8]
	sector_lookup_table[1][1][0] = 4;
  4004d8:	2204      	movs	r2, #4
  4004da:	619a      	str	r2, [r3, #24]
	sector_lookup_table[1][0][0] = 5;
  4004dc:	2205      	movs	r2, #5
  4004de:	611a      	str	r2, [r3, #16]
	sector_lookup_table[1][0][1] = 6;
  4004e0:	2206      	movs	r2, #6
  4004e2:	615a      	str	r2, [r3, #20]
	//Error states
	sector_lookup_table[0][0][0] = -1;
  4004e4:	f04f 32ff 	mov.w	r2, #4294967295
  4004e8:	601a      	str	r2, [r3, #0]
	sector_lookup_table[1][1][1] = -1;
  4004ea:	61da      	str	r2, [r3, #28]
  4004ec:	bd10      	pop	{r4, pc}
  4004ee:	bf00      	nop
  4004f0:	00400421 	.word	0x00400421
  4004f4:	00401265 	.word	0x00401265
  4004f8:	004003b5 	.word	0x004003b5
  4004fc:	00400349 	.word	0x00400349
  400500:	e000e100 	.word	0xe000e100
  400504:	2040058c 	.word	0x2040058c
  400508:	e000e010 	.word	0xe000e010
  40050c:	20400564 	.word	0x20400564

00400510 <dma_adc_0_enable_for_one_transaction>:
	//DMAs are single transaction by default
	dma_adc_0_disable_continuously();
	dma_adc_1_disable_continuously();
}

void dma_adc_0_enable_for_one_transaction(void){
  400510:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  400512:	4906      	ldr	r1, [pc, #24]	; (40052c <dma_adc_0_enable_for_one_transaction+0x1c>)
  400514:	2000      	movs	r0, #0
  400516:	4b06      	ldr	r3, [pc, #24]	; (400530 <dma_adc_0_enable_for_one_transaction+0x20>)
  400518:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL, ADC_0_SIZE_OF_GENERATED_DATA);
  40051a:	2118      	movs	r1, #24
  40051c:	2000      	movs	r0, #0
  40051e:	4b05      	ldr	r3, [pc, #20]	; (400534 <dma_adc_0_enable_for_one_transaction+0x24>)
  400520:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_0_CHANNEL, true);
  400522:	2101      	movs	r1, #1
  400524:	2000      	movs	r0, #0
  400526:	4b04      	ldr	r3, [pc, #16]	; (400538 <dma_adc_0_enable_for_one_transaction+0x28>)
  400528:	4798      	blx	r3
  40052a:	bd08      	pop	{r3, pc}
  40052c:	20400234 	.word	0x20400234
  400530:	00402709 	.word	0x00402709
  400534:	00402729 	.word	0x00402729
  400538:	00402741 	.word	0x00402741

0040053c <dma_adc_0_callback>:
static void dma_adc_0_callback(struct _dma_resource *resource){
  40053c:	b530      	push	{r4, r5, lr}
  40053e:	b085      	sub	sp, #20
	printf("interrupt - ADC 0 - %i %i %i %i %i %i  \n", (int)dma_adc_0_buff[0],(int)dma_adc_0_buff[1],(int)dma_adc_0_buff[2],(int)dma_adc_0_buff[3], (int)dma_adc_0_buff[4],(int)dma_adc_0_buff[5]);
  400540:	4825      	ldr	r0, [pc, #148]	; (4005d8 <dma_adc_0_callback+0x9c>)
  400542:	6801      	ldr	r1, [r0, #0]
  400544:	6842      	ldr	r2, [r0, #4]
  400546:	6883      	ldr	r3, [r0, #8]
  400548:	68c4      	ldr	r4, [r0, #12]
  40054a:	6905      	ldr	r5, [r0, #16]
  40054c:	6940      	ldr	r0, [r0, #20]
  40054e:	9002      	str	r0, [sp, #8]
  400550:	9501      	str	r5, [sp, #4]
  400552:	9400      	str	r4, [sp, #0]
  400554:	4821      	ldr	r0, [pc, #132]	; (4005dc <dma_adc_0_callback+0xa0>)
  400556:	4c22      	ldr	r4, [pc, #136]	; (4005e0 <dma_adc_0_callback+0xa4>)
  400558:	47a0      	blx	r4
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  40055a:	2300      	movs	r3, #0
  40055c:	e008      	b.n	400570 <dma_adc_0_callback+0x34>
				raw_currents[1] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  40055e:	b292      	uxth	r2, r2
  400560:	4920      	ldr	r1, [pc, #128]	; (4005e4 <dma_adc_0_callback+0xa8>)
  400562:	604a      	str	r2, [r1, #4]
				ready_values |= (1<<1);
  400564:	491c      	ldr	r1, [pc, #112]	; (4005d8 <dma_adc_0_callback+0x9c>)
  400566:	7e0a      	ldrb	r2, [r1, #24]
  400568:	f042 0202 	orr.w	r2, r2, #2
  40056c:	760a      	strb	r2, [r1, #24]
	for (int i =0; i<ADC_0_NUM_ACTIVE_CHANNELS; i++){
  40056e:	3301      	adds	r3, #1
  400570:	2b05      	cmp	r3, #5
  400572:	dc13      	bgt.n	40059c <dma_adc_0_callback+0x60>
		switch((dma_adc_0_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400574:	4a18      	ldr	r2, [pc, #96]	; (4005d8 <dma_adc_0_callback+0x9c>)
  400576:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40057a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  40057e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
  400582:	d0ec      	beq.n	40055e <dma_adc_0_callback+0x22>
  400584:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400588:	d1f1      	bne.n	40056e <dma_adc_0_callback+0x32>
				raw_currents[0] = (int) (dma_adc_0_buff[i] & AFEC_LCDR_LDATA_Msk);
  40058a:	b292      	uxth	r2, r2
  40058c:	4915      	ldr	r1, [pc, #84]	; (4005e4 <dma_adc_0_callback+0xa8>)
  40058e:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<0);
  400590:	4911      	ldr	r1, [pc, #68]	; (4005d8 <dma_adc_0_callback+0x9c>)
  400592:	7e0a      	ldrb	r2, [r1, #24]
  400594:	f042 0201 	orr.w	r2, r2, #1
  400598:	760a      	strb	r2, [r1, #24]
				break;
  40059a:	e7e8      	b.n	40056e <dma_adc_0_callback+0x32>
	if(is_dma_adc_0_continuous){
  40059c:	4b12      	ldr	r3, [pc, #72]	; (4005e8 <dma_adc_0_callback+0xac>)
  40059e:	781b      	ldrb	r3, [r3, #0]
  4005a0:	b92b      	cbnz	r3, 4005ae <dma_adc_0_callback+0x72>
	if(ready_values == ALL_VALUES_READY){
  4005a2:	4b0d      	ldr	r3, [pc, #52]	; (4005d8 <dma_adc_0_callback+0x9c>)
  4005a4:	7e1b      	ldrb	r3, [r3, #24]
  4005a6:	2b0f      	cmp	r3, #15
  4005a8:	d004      	beq.n	4005b4 <dma_adc_0_callback+0x78>
}
  4005aa:	b005      	add	sp, #20
  4005ac:	bd30      	pop	{r4, r5, pc}
		dma_adc_0_enable_for_one_transaction();
  4005ae:	4b0f      	ldr	r3, [pc, #60]	; (4005ec <dma_adc_0_callback+0xb0>)
  4005b0:	4798      	blx	r3
  4005b2:	e7f6      	b.n	4005a2 <dma_adc_0_callback+0x66>
		ready_values = 0;
  4005b4:	2200      	movs	r2, #0
  4005b6:	4b08      	ldr	r3, [pc, #32]	; (4005d8 <dma_adc_0_callback+0x9c>)
  4005b8:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 0\n");
  4005ba:	480d      	ldr	r0, [pc, #52]	; (4005f0 <dma_adc_0_callback+0xb4>)
  4005bc:	4c08      	ldr	r4, [pc, #32]	; (4005e0 <dma_adc_0_callback+0xa4>)
  4005be:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  4005c0:	4808      	ldr	r0, [pc, #32]	; (4005e4 <dma_adc_0_callback+0xa8>)
  4005c2:	6843      	ldr	r3, [r0, #4]
  4005c4:	6802      	ldr	r2, [r0, #0]
  4005c6:	490b      	ldr	r1, [pc, #44]	; (4005f4 <dma_adc_0_callback+0xb8>)
  4005c8:	6809      	ldr	r1, [r1, #0]
  4005ca:	68c5      	ldr	r5, [r0, #12]
  4005cc:	9501      	str	r5, [sp, #4]
  4005ce:	6880      	ldr	r0, [r0, #8]
  4005d0:	9000      	str	r0, [sp, #0]
  4005d2:	4809      	ldr	r0, [pc, #36]	; (4005f8 <dma_adc_0_callback+0xbc>)
  4005d4:	47a0      	blx	r4
}
  4005d6:	e7e8      	b.n	4005aa <dma_adc_0_callback+0x6e>
  4005d8:	20400234 	.word	0x20400234
  4005dc:	00405be0 	.word	0x00405be0
  4005e0:	00403bd1 	.word	0x00403bd1
  4005e4:	20400590 	.word	0x20400590
  4005e8:	20400559 	.word	0x20400559
  4005ec:	00400511 	.word	0x00400511
  4005f0:	00405c0c 	.word	0x00405c0c
  4005f4:	2040059c 	.word	0x2040059c
  4005f8:	00405c54 	.word	0x00405c54

004005fc <dma_adc_1_enable_for_one_transaction>:
}

void dma_adc_1_enable_for_one_transaction(void){
  4005fc:	b508      	push	{r3, lr}
	//reset to base address
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  4005fe:	4906      	ldr	r1, [pc, #24]	; (400618 <dma_adc_1_enable_for_one_transaction+0x1c>)
  400600:	2001      	movs	r0, #1
  400602:	4b06      	ldr	r3, [pc, #24]	; (40061c <dma_adc_1_enable_for_one_transaction+0x20>)
  400604:	4798      	blx	r3
	//set how much data to move (in bytes)
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL, ADC_1_SIZE_OF_GENERATED_DATA);
  400606:	2110      	movs	r1, #16
  400608:	2001      	movs	r0, #1
  40060a:	4b05      	ldr	r3, [pc, #20]	; (400620 <dma_adc_1_enable_for_one_transaction+0x24>)
  40060c:	4798      	blx	r3
	//enable for one transaction
	_dma_enable_transaction			(DMA_ADC_1_CHANNEL, true);
  40060e:	2101      	movs	r1, #1
  400610:	4608      	mov	r0, r1
  400612:	4b04      	ldr	r3, [pc, #16]	; (400624 <dma_adc_1_enable_for_one_transaction+0x28>)
  400614:	4798      	blx	r3
  400616:	bd08      	pop	{r3, pc}
  400618:	20400250 	.word	0x20400250
  40061c:	00402709 	.word	0x00402709
  400620:	00402729 	.word	0x00402729
  400624:	00402741 	.word	0x00402741

00400628 <dma_adc_1_callback>:
static void dma_adc_1_callback(struct _dma_resource *resource){
  400628:	b530      	push	{r4, r5, lr}
  40062a:	b083      	sub	sp, #12
	printf("interrupt - ADC 1 - %i %i %i %i  \n", (int)dma_adc_1_buff[0],(int)dma_adc_1_buff[1],(int)dma_adc_1_buff[2],(int)dma_adc_1_buff[3]);
  40062c:	4824      	ldr	r0, [pc, #144]	; (4006c0 <dma_adc_1_callback+0x98>)
  40062e:	69c1      	ldr	r1, [r0, #28]
  400630:	6a02      	ldr	r2, [r0, #32]
  400632:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400634:	6a80      	ldr	r0, [r0, #40]	; 0x28
  400636:	9000      	str	r0, [sp, #0]
  400638:	4822      	ldr	r0, [pc, #136]	; (4006c4 <dma_adc_1_callback+0x9c>)
  40063a:	4c23      	ldr	r4, [pc, #140]	; (4006c8 <dma_adc_1_callback+0xa0>)
  40063c:	47a0      	blx	r4
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  40063e:	2300      	movs	r3, #0
  400640:	e008      	b.n	400654 <dma_adc_1_callback+0x2c>
				raw_currents[2] = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400642:	b292      	uxth	r2, r2
  400644:	4921      	ldr	r1, [pc, #132]	; (4006cc <dma_adc_1_callback+0xa4>)
  400646:	608a      	str	r2, [r1, #8]
				ready_values |= (1<<2);
  400648:	491d      	ldr	r1, [pc, #116]	; (4006c0 <dma_adc_1_callback+0x98>)
  40064a:	7e0a      	ldrb	r2, [r1, #24]
  40064c:	f042 0204 	orr.w	r2, r2, #4
  400650:	760a      	strb	r2, [r1, #24]
	for (int i =0; i < ADC_1_NUM_ACTIVE_CHANNELS; i++){
  400652:	3301      	adds	r3, #1
  400654:	2b03      	cmp	r3, #3
  400656:	dc14      	bgt.n	400682 <dma_adc_1_callback+0x5a>
		switch((dma_adc_1_buff[i] & AFEC_LCDR_CHNB_Msk)){
  400658:	4a19      	ldr	r2, [pc, #100]	; (4006c0 <dma_adc_1_callback+0x98>)
  40065a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  40065e:	69d2      	ldr	r2, [r2, #28]
  400660:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
  400664:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
  400668:	d0eb      	beq.n	400642 <dma_adc_1_callback+0x1a>
  40066a:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
  40066e:	d1f0      	bne.n	400652 <dma_adc_1_callback+0x2a>
				raw_voltage = (int) (dma_adc_1_buff[i] & AFEC_LCDR_LDATA_Msk);
  400670:	b292      	uxth	r2, r2
  400672:	4917      	ldr	r1, [pc, #92]	; (4006d0 <dma_adc_1_callback+0xa8>)
  400674:	600a      	str	r2, [r1, #0]
				ready_values |= (1<<3);
  400676:	4912      	ldr	r1, [pc, #72]	; (4006c0 <dma_adc_1_callback+0x98>)
  400678:	7e0a      	ldrb	r2, [r1, #24]
  40067a:	f042 0208 	orr.w	r2, r2, #8
  40067e:	760a      	strb	r2, [r1, #24]
				break;
  400680:	e7e7      	b.n	400652 <dma_adc_1_callback+0x2a>
	if(is_dma_adc_1_continuous){
  400682:	4b14      	ldr	r3, [pc, #80]	; (4006d4 <dma_adc_1_callback+0xac>)
  400684:	781b      	ldrb	r3, [r3, #0]
  400686:	b92b      	cbnz	r3, 400694 <dma_adc_1_callback+0x6c>
	if(ready_values == ALL_VALUES_READY){
  400688:	4b0d      	ldr	r3, [pc, #52]	; (4006c0 <dma_adc_1_callback+0x98>)
  40068a:	7e1b      	ldrb	r3, [r3, #24]
  40068c:	2b0f      	cmp	r3, #15
  40068e:	d004      	beq.n	40069a <dma_adc_1_callback+0x72>
}
  400690:	b003      	add	sp, #12
  400692:	bd30      	pop	{r4, r5, pc}
		dma_adc_1_enable_for_one_transaction();
  400694:	4b10      	ldr	r3, [pc, #64]	; (4006d8 <dma_adc_1_callback+0xb0>)
  400696:	4798      	blx	r3
  400698:	e7f6      	b.n	400688 <dma_adc_1_callback+0x60>
		ready_values = 0;
  40069a:	2200      	movs	r2, #0
  40069c:	4b08      	ldr	r3, [pc, #32]	; (4006c0 <dma_adc_1_callback+0x98>)
  40069e:	761a      	strb	r2, [r3, #24]
		printf("Data collected, launching control loop from adc 1 \n");
  4006a0:	480e      	ldr	r0, [pc, #56]	; (4006dc <dma_adc_1_callback+0xb4>)
  4006a2:	4c09      	ldr	r4, [pc, #36]	; (4006c8 <dma_adc_1_callback+0xa0>)
  4006a4:	47a0      	blx	r4
		printf("%i %i %i %i  \n", raw_voltage, raw_currents[0], raw_currents[1], raw_currents[2], raw_currents[3]);
  4006a6:	4809      	ldr	r0, [pc, #36]	; (4006cc <dma_adc_1_callback+0xa4>)
  4006a8:	6843      	ldr	r3, [r0, #4]
  4006aa:	6802      	ldr	r2, [r0, #0]
  4006ac:	4908      	ldr	r1, [pc, #32]	; (4006d0 <dma_adc_1_callback+0xa8>)
  4006ae:	6809      	ldr	r1, [r1, #0]
  4006b0:	68c5      	ldr	r5, [r0, #12]
  4006b2:	9501      	str	r5, [sp, #4]
  4006b4:	6880      	ldr	r0, [r0, #8]
  4006b6:	9000      	str	r0, [sp, #0]
  4006b8:	4809      	ldr	r0, [pc, #36]	; (4006e0 <dma_adc_1_callback+0xb8>)
  4006ba:	47a0      	blx	r4
}
  4006bc:	e7e8      	b.n	400690 <dma_adc_1_callback+0x68>
  4006be:	bf00      	nop
  4006c0:	20400234 	.word	0x20400234
  4006c4:	00405c40 	.word	0x00405c40
  4006c8:	00403bd1 	.word	0x00403bd1
  4006cc:	20400590 	.word	0x20400590
  4006d0:	2040059c 	.word	0x2040059c
  4006d4:	20400558 	.word	0x20400558
  4006d8:	004005fd 	.word	0x004005fd
  4006dc:	00405c64 	.word	0x00405c64
  4006e0:	00405c54 	.word	0x00405c54

004006e4 <dma_adc_0_disable_continuously>:
	is_dma_adc_1_continuous = true;
	dma_adc_1_enable_for_one_transaction();
}

void dma_adc_0_disable_continuously(void){
	is_dma_adc_0_continuous = false;
  4006e4:	2200      	movs	r2, #0
  4006e6:	4b01      	ldr	r3, [pc, #4]	; (4006ec <dma_adc_0_disable_continuously+0x8>)
  4006e8:	701a      	strb	r2, [r3, #0]
  4006ea:	4770      	bx	lr
  4006ec:	20400559 	.word	0x20400559

004006f0 <dma_adc_1_disable_continuously>:
}
void dma_adc_1_disable_continuously(void){
	is_dma_adc_1_continuous = false;
  4006f0:	2200      	movs	r2, #0
  4006f2:	4b01      	ldr	r3, [pc, #4]	; (4006f8 <dma_adc_1_disable_continuously+0x8>)
  4006f4:	701a      	strb	r2, [r3, #0]
  4006f6:	4770      	bx	lr
  4006f8:	20400558 	.word	0x20400558

004006fc <dma_adc_init>:
void dma_adc_init(void){
  4006fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_dma_set_source_address			(DMA_ADC_0_CHANNEL,(void *)0x4003C020);	//there is a more adequate way of defining this, but I coundt get it to work
  400700:	4928      	ldr	r1, [pc, #160]	; (4007a4 <dma_adc_init+0xa8>)
  400702:	2000      	movs	r0, #0
  400704:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 4007d0 <dma_adc_init+0xd4>
  400708:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_0_CHANNEL, dma_adc_0_buff);
  40070a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 4007d4 <dma_adc_init+0xd8>
  40070e:	4641      	mov	r1, r8
  400710:	2000      	movs	r0, #0
  400712:	4f25      	ldr	r7, [pc, #148]	; (4007a8 <dma_adc_init+0xac>)
  400714:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_0_CHANNEL , ADC_0_SIZE_OF_GENERATED_DATA);
  400716:	2118      	movs	r1, #24
  400718:	2000      	movs	r0, #0
  40071a:	4d24      	ldr	r5, [pc, #144]	; (4007ac <dma_adc_init+0xb0>)
  40071c:	47a8      	blx	r5
	_dma_get_channel_resource(res0, DMA_ADC_0_CHANNEL);
  40071e:	2100      	movs	r1, #0
  400720:	460c      	mov	r4, r1
  400722:	4608      	mov	r0, r1
  400724:	4e22      	ldr	r6, [pc, #136]	; (4007b0 <dma_adc_init+0xb4>)
  400726:	47b0      	blx	r6
	(*res0)->dma_cb.transfer_done = dma_adc_0_callback;
  400728:	6823      	ldr	r3, [r4, #0]
  40072a:	4a22      	ldr	r2, [pc, #136]	; (4007b4 <dma_adc_init+0xb8>)
  40072c:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_0_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  40072e:	2201      	movs	r2, #1
  400730:	4621      	mov	r1, r4
  400732:	4620      	mov	r0, r4
  400734:	4c20      	ldr	r4, [pc, #128]	; (4007b8 <dma_adc_init+0xbc>)
  400736:	47a0      	blx	r4
	_dma_set_source_address			(DMA_ADC_1_CHANNEL,(void *)0x40064020);	//there is a more adequate way of defining this, but I coundt get it to work
  400738:	4920      	ldr	r1, [pc, #128]	; (4007bc <dma_adc_init+0xc0>)
  40073a:	2001      	movs	r0, #1
  40073c:	47c8      	blx	r9
	_dma_set_destination_address	(DMA_ADC_1_CHANNEL, dma_adc_1_buff);
  40073e:	f108 011c 	add.w	r1, r8, #28
  400742:	2001      	movs	r0, #1
  400744:	47b8      	blx	r7
	_dma_set_data_amount			(DMA_ADC_1_CHANNEL , ADC_1_SIZE_OF_GENERATED_DATA);
  400746:	2110      	movs	r1, #16
  400748:	2001      	movs	r0, #1
  40074a:	47a8      	blx	r5
	_dma_get_channel_resource(res1, DMA_ADC_1_CHANNEL);
  40074c:	2101      	movs	r1, #1
  40074e:	2500      	movs	r5, #0
  400750:	4628      	mov	r0, r5
  400752:	47b0      	blx	r6
	(*res1)->dma_cb.transfer_done = dma_adc_1_callback;
  400754:	682b      	ldr	r3, [r5, #0]
  400756:	4a1a      	ldr	r2, [pc, #104]	; (4007c0 <dma_adc_init+0xc4>)
  400758:	601a      	str	r2, [r3, #0]
	_dma_set_irq_state(DMA_ADC_1_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
  40075a:	2201      	movs	r2, #1
  40075c:	4629      	mov	r1, r5
  40075e:	4610      	mov	r0, r2
  400760:	47a0      	blx	r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400762:	4b18      	ldr	r3, [pc, #96]	; (4007c4 <dma_adc_init+0xc8>)
  400764:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400768:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40076a:	2280      	movs	r2, #128	; 0x80
  40076c:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400770:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400778:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40077c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400780:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400784:	f44f 7280 	mov.w	r2, #256	; 0x100
  400788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40078c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400790:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400794:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	dma_adc_0_disable_continuously();
  400798:	4b0b      	ldr	r3, [pc, #44]	; (4007c8 <dma_adc_init+0xcc>)
  40079a:	4798      	blx	r3
	dma_adc_1_disable_continuously();
  40079c:	4b0b      	ldr	r3, [pc, #44]	; (4007cc <dma_adc_init+0xd0>)
  40079e:	4798      	blx	r3
  4007a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4007a4:	4003c020 	.word	0x4003c020
  4007a8:	00402709 	.word	0x00402709
  4007ac:	00402729 	.word	0x00402729
  4007b0:	00402759 	.word	0x00402759
  4007b4:	0040053d 	.word	0x0040053d
  4007b8:	0040276d 	.word	0x0040276d
  4007bc:	40064020 	.word	0x40064020
  4007c0:	00400629 	.word	0x00400629
  4007c4:	e000e100 	.word	0xe000e100
  4007c8:	004006e5 	.word	0x004006e5
  4007cc:	004006f1 	.word	0x004006f1
  4007d0:	00402719 	.word	0x00402719
  4007d4:	20400234 	.word	0x20400234

004007d8 <adc_enable_all>:
const uint16_t length);
*/


//enables/disables all AFECs
void adc_enable_all(void){
  4007d8:	b570      	push	{r4, r5, r6, lr}
	//note that it is possible to enable individual channels
	//functions from hal_adc_sync.h
	adc_async_enable_channel(ADC_CURRENT_A);
  4007da:	4d11      	ldr	r5, [pc, #68]	; (400820 <adc_enable_all+0x48>)
  4007dc:	2108      	movs	r1, #8
  4007de:	4628      	mov	r0, r5
  4007e0:	4c10      	ldr	r4, [pc, #64]	; (400824 <adc_enable_all+0x4c>)
  4007e2:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_B);
  4007e4:	2102      	movs	r1, #2
  4007e6:	4628      	mov	r0, r5
  4007e8:	47a0      	blx	r4
	adc_async_enable_channel(ADC_CURRENT_C);
  4007ea:	4e0f      	ldr	r6, [pc, #60]	; (400828 <adc_enable_all+0x50>)
  4007ec:	2101      	movs	r1, #1
  4007ee:	4630      	mov	r0, r6
  4007f0:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_SUPPL_VOLTAGE);
  4007f2:	2106      	movs	r1, #6
  4007f4:	4630      	mov	r0, r6
  4007f6:	47a0      	blx	r4
	
	adc_async_enable_channel(ADC_TEMP_1);
  4007f8:	2105      	movs	r1, #5
  4007fa:	4630      	mov	r0, r6
  4007fc:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_2);
  4007fe:	2106      	movs	r1, #6
  400800:	4628      	mov	r0, r5
  400802:	47a0      	blx	r4
	//adc_sync_enable_channel(ADC_TEMP_3);
	adc_async_enable_channel(ADC_TEMP_4);
  400804:	210a      	movs	r1, #10
  400806:	4628      	mov	r0, r5
  400808:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_5);
  40080a:	2100      	movs	r1, #0
  40080c:	4630      	mov	r0, r6
  40080e:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_6);
  400810:	2105      	movs	r1, #5
  400812:	4628      	mov	r0, r5
  400814:	47a0      	blx	r4
	adc_async_enable_channel(ADC_TEMP_MOTOR);
  400816:	2100      	movs	r1, #0
  400818:	4628      	mov	r0, r5
  40081a:	47a0      	blx	r4
  40081c:	bd70      	pop	{r4, r5, r6, pc}
  40081e:	bf00      	nop
  400820:	20400688 	.word	0x20400688
  400824:	0040115d 	.word	0x0040115d
  400828:	20400760 	.word	0x20400760

0040082c <pwm_0_callback>:
#include <hpl_pwm.h>
#include <hpl_pwm_config.h>

int counter = 0;

void pwm_0_callback(const struct pwm_descriptor *const descr){
  40082c:	b508      	push	{r3, lr}
	counter ++;
  40082e:	4a08      	ldr	r2, [pc, #32]	; (400850 <pwm_0_callback+0x24>)
  400830:	6813      	ldr	r3, [r2, #0]
  400832:	3301      	adds	r3, #1
  400834:	6013      	str	r3, [r2, #0]
	if (counter > 3000){
  400836:	f640 32b8 	movw	r2, #3000	; 0xbb8
  40083a:	4293      	cmp	r3, r2
  40083c:	dc00      	bgt.n	400840 <pwm_0_callback+0x14>
  40083e:	bd08      	pop	{r3, pc}
		counter = 0;
  400840:	2200      	movs	r2, #0
  400842:	4b03      	ldr	r3, [pc, #12]	; (400850 <pwm_0_callback+0x24>)
  400844:	601a      	str	r2, [r3, #0]
		printf("PWM Interrupt \n");
  400846:	4803      	ldr	r0, [pc, #12]	; (400854 <pwm_0_callback+0x28>)
  400848:	4b03      	ldr	r3, [pc, #12]	; (400858 <pwm_0_callback+0x2c>)
  40084a:	4798      	blx	r3
	}
}
  40084c:	e7f7      	b.n	40083e <pwm_0_callback+0x12>
  40084e:	bf00      	nop
  400850:	20400260 	.word	0x20400260
  400854:	00405c98 	.word	0x00405c98
  400858:	00403bd1 	.word	0x00403bd1

0040085c <pwm_init_user>:


void pwm_init_user(void){
  40085c:	b508      	push	{r3, lr}
}

static inline void hri_pwm_set_CMR_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmr_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  40085e:	4b2e      	ldr	r3, [pc, #184]	; (400918 <pwm_init_user+0xbc>)
  400860:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  400864:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400868:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}

static inline void hri_pwm_set_DT_DTH_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  40086c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  400870:	f042 020a 	orr.w	r2, r2, #10
  400874:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
}

static inline void hri_pwm_set_DT_DTL_bf(const void *const hw, uint8_t submodule_index, hri_pwm_dt_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  400878:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  40087c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  400880:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  400884:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
  400888:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40088c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  400890:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  400894:	f042 020a 	orr.w	r2, r2, #10
  400898:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  40089c:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
  4008a0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  4008a4:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR |= mask;
  4008a8:	4a1c      	ldr	r2, [pc, #112]	; (40091c <pwm_init_user+0xc0>)
  4008aa:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  4008ae:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4008b2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTH(mask);
  4008b6:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  4008ba:	f041 010a 	orr.w	r1, r1, #10
  4008be:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_DT |= PWM_DT_DTL(mask);
  4008c2:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
  4008c6:	f441 2120 	orr.w	r1, r1, #655360	; 0xa0000
  4008ca:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
}

static inline void hri_pwm_set_CMPV_reg(const void *const hw, uint8_t submodule_index, hri_pwm_cmpv_reg_t mask)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV |= mask;
  4008ce:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
  4008d2:	f041 0101 	orr.w	r1, r1, #1
  4008d6:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  4008da:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
  4008de:	f041 0101 	orr.w	r1, r1, #1
  4008e2:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
	return ((Pwm *)hw)->PWM_ISR2;
}

static inline void hri_pwm_set_IMR1_CHID0_bit(const void *const hw)
{
	((Pwm *)hw)->PWM_IER1 = PWM_IMR1_CHID0;
  4008e6:	2201      	movs	r2, #1
  4008e8:	611a      	str	r2, [r3, #16]
	
	
	//we want interrupt from one of the PWMs so that we can start the control loop
	//interrupt on PWM 0, channel 0 is enabled ; on PWM 1 is disabled
	hri_pwm_set_IMR1_CHID0_bit(PWM0);									//enable the interrupt from ADC 0, channel 0
	pwm_register_callback(&PWM_0, PWM_PERIOD_CB, pwm_0_callback);
  4008ea:	4a0d      	ldr	r2, [pc, #52]	; (400920 <pwm_init_user+0xc4>)
  4008ec:	2100      	movs	r1, #0
  4008ee:	480d      	ldr	r0, [pc, #52]	; (400924 <pwm_init_user+0xc8>)
  4008f0:	4b0d      	ldr	r3, [pc, #52]	; (400928 <pwm_init_user+0xcc>)
  4008f2:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4008f4:	4b0d      	ldr	r3, [pc, #52]	; (40092c <pwm_init_user+0xd0>)
  4008f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4008fa:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4008fc:	2260      	movs	r2, #96	; 0x60
  4008fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40090a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40090e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400912:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  400916:	bd08      	pop	{r3, pc}
  400918:	40020000 	.word	0x40020000
  40091c:	4005c000 	.word	0x4005c000
  400920:	0040082d 	.word	0x0040082d
  400924:	204005a0 	.word	0x204005a0
  400928:	00401429 	.word	0x00401429
  40092c:	e000e100 	.word	0xe000e100

00400930 <pwm_enable_all>:
}


//enable/disable pwm pins
//also sets periods and other variables which might not have been set at initialization
void pwm_enable_all(void){
  400930:	b570      	push	{r4, r5, r6, lr}
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM |= mask;
  400932:	4a12      	ldr	r2, [pc, #72]	; (40097c <pwm_enable_all+0x4c>)
  400934:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400938:	f043 0301 	orr.w	r3, r3, #1
  40093c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
  400940:	f502 3270 	add.w	r2, r2, #245760	; 0x3c000
  400944:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
  400948:	f043 0301 	orr.w	r3, r3, #1
  40094c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	hri_pwm_set_CMPM_reg(PWM0, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	hri_pwm_set_CMPM_reg(PWM1, PWM_COMPARISON_UNIT_CHANNEL, PWM_CMPM_CEN_Msk);
	
	
	//enable PWM0 and PWM1
	pwm_enable(&PWM_0);
  400950:	4c0b      	ldr	r4, [pc, #44]	; (400980 <pwm_enable_all+0x50>)
  400952:	4620      	mov	r0, r4
  400954:	4e0b      	ldr	r6, [pc, #44]	; (400984 <pwm_enable_all+0x54>)
  400956:	47b0      	blx	r6
	pwm_enable(&PWM_1);
  400958:	4d0b      	ldr	r5, [pc, #44]	; (400988 <pwm_enable_all+0x58>)
  40095a:	4628      	mov	r0, r5
  40095c:	47b0      	blx	r6
		
	//set period and initial duty cycle
	//initial duty cycle = 0.5 * period <=> no current output for an H-bridge type driver
	pwm_set_parameters(&PWM_0, PWM_PERIOD, PWM_PERIOD>>1);
  40095e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400962:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400966:	4620      	mov	r0, r4
  400968:	4c08      	ldr	r4, [pc, #32]	; (40098c <pwm_enable_all+0x5c>)
  40096a:	47a0      	blx	r4
	pwm_set_parameters(&PWM_1, PWM_PERIOD, PWM_PERIOD>>1);
  40096c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  400970:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400974:	4628      	mov	r0, r5
  400976:	47a0      	blx	r4
  400978:	bd70      	pop	{r4, r5, r6, pc}
  40097a:	bf00      	nop
  40097c:	40020000 	.word	0x40020000
  400980:	204005a0 	.word	0x204005a0
  400984:	004013ed 	.word	0x004013ed
  400988:	20400744 	.word	0x20400744
  40098c:	00401471 	.word	0x00401471

00400990 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400990:	e7fe      	b.n	400990 <Dummy_Handler>
	...

00400994 <Reset_Handler>:
{
  400994:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  400996:	4b10      	ldr	r3, [pc, #64]	; (4009d8 <Reset_Handler+0x44>)
  400998:	4a10      	ldr	r2, [pc, #64]	; (4009dc <Reset_Handler+0x48>)
  40099a:	429a      	cmp	r2, r3
  40099c:	d009      	beq.n	4009b2 <Reset_Handler+0x1e>
  40099e:	4b0e      	ldr	r3, [pc, #56]	; (4009d8 <Reset_Handler+0x44>)
  4009a0:	4a0e      	ldr	r2, [pc, #56]	; (4009dc <Reset_Handler+0x48>)
  4009a2:	e003      	b.n	4009ac <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4009a4:	6811      	ldr	r1, [r2, #0]
  4009a6:	6019      	str	r1, [r3, #0]
  4009a8:	3304      	adds	r3, #4
  4009aa:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4009ac:	490c      	ldr	r1, [pc, #48]	; (4009e0 <Reset_Handler+0x4c>)
  4009ae:	428b      	cmp	r3, r1
  4009b0:	d3f8      	bcc.n	4009a4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4009b2:	4b0c      	ldr	r3, [pc, #48]	; (4009e4 <Reset_Handler+0x50>)
  4009b4:	e002      	b.n	4009bc <Reset_Handler+0x28>
                *pDest++ = 0;
  4009b6:	2200      	movs	r2, #0
  4009b8:	601a      	str	r2, [r3, #0]
  4009ba:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4009bc:	4a0a      	ldr	r2, [pc, #40]	; (4009e8 <Reset_Handler+0x54>)
  4009be:	4293      	cmp	r3, r2
  4009c0:	d3f9      	bcc.n	4009b6 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4009c2:	4a0a      	ldr	r2, [pc, #40]	; (4009ec <Reset_Handler+0x58>)
  4009c4:	4b0a      	ldr	r3, [pc, #40]	; (4009f0 <Reset_Handler+0x5c>)
  4009c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4009ca:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4009cc:	4b09      	ldr	r3, [pc, #36]	; (4009f4 <Reset_Handler+0x60>)
  4009ce:	4798      	blx	r3
        main();
  4009d0:	4b09      	ldr	r3, [pc, #36]	; (4009f8 <Reset_Handler+0x64>)
  4009d2:	4798      	blx	r3
  4009d4:	e7fe      	b.n	4009d4 <Reset_Handler+0x40>
  4009d6:	bf00      	nop
  4009d8:	20400000 	.word	0x20400000
  4009dc:	00406360 	.word	0x00406360
  4009e0:	20400218 	.word	0x20400218
  4009e4:	20400218 	.word	0x20400218
  4009e8:	20400790 	.word	0x20400790
  4009ec:	e000ed00 	.word	0xe000ed00
  4009f0:	00400000 	.word	0x00400000
  4009f4:	004032a5 	.word	0x004032a5
  4009f8:	00402831 	.word	0x00402831

004009fc <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
static void ADC_1_init(void)
{
  4009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4009fe:	b085      	sub	sp, #20
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400a00:	4b20      	ldr	r3, [pc, #128]	; (400a84 <ADC_1_init+0x88>)
  400a02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400a06:	f413 7f80 	tst.w	r3, #256	; 0x100
  400a0a:	d104      	bne.n	400a16 <ADC_1_init+0x1a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400a10:	4b1c      	ldr	r3, [pc, #112]	; (400a84 <ADC_1_init+0x88>)
  400a12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_AFEC1);
#ifdef ADC_1_CH_MAX
	adc_async_init(&ADC_1, AFEC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
  400a16:	4d1c      	ldr	r5, [pc, #112]	; (400a88 <ADC_1_init+0x8c>)
  400a18:	4c1c      	ldr	r4, [pc, #112]	; (400a8c <ADC_1_init+0x90>)
  400a1a:	2600      	movs	r6, #0
  400a1c:	9602      	str	r6, [sp, #8]
  400a1e:	4b1c      	ldr	r3, [pc, #112]	; (400a90 <ADC_1_init+0x94>)
  400a20:	9301      	str	r3, [sp, #4]
  400a22:	2304      	movs	r3, #4
  400a24:	9300      	str	r3, [sp, #0]
  400a26:	2306      	movs	r3, #6
  400a28:	462a      	mov	r2, r5
  400a2a:	491a      	ldr	r1, [pc, #104]	; (400a94 <ADC_1_init+0x98>)
  400a2c:	4620      	mov	r0, r4
  400a2e:	4f1a      	ldr	r7, [pc, #104]	; (400a98 <ADC_1_init+0x9c>)
  400a30:	47b8      	blx	r7
#endif
	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_0, ADC_1_ch0_buf, ADC_1_CH0_BUF_SIZE);
  400a32:	2310      	movs	r3, #16
  400a34:	f105 0208 	add.w	r2, r5, #8
  400a38:	4631      	mov	r1, r6
  400a3a:	4620      	mov	r0, r4
  400a3c:	4e17      	ldr	r6, [pc, #92]	; (400a9c <ADC_1_init+0xa0>)
  400a3e:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_1, ADC_1_ch1_buf, ADC_1_CH1_BUF_SIZE);
  400a40:	2310      	movs	r3, #16
  400a42:	f105 0218 	add.w	r2, r5, #24
  400a46:	2101      	movs	r1, #1
  400a48:	4620      	mov	r0, r4
  400a4a:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_5, ADC_1_ch5_buf, ADC_1_CH5_BUF_SIZE);
  400a4c:	2310      	movs	r3, #16
  400a4e:	f105 0228 	add.w	r2, r5, #40	; 0x28
  400a52:	2105      	movs	r1, #5
  400a54:	4620      	mov	r0, r4
  400a56:	47b0      	blx	r6

	adc_async_register_channel_buffer(&ADC_1, CONF_ADC_1_CHANNEL_6, ADC_1_ch6_buf, ADC_1_CH6_BUF_SIZE);
  400a58:	2310      	movs	r3, #16
  400a5a:	f105 0238 	add.w	r2, r5, #56	; 0x38
  400a5e:	2106      	movs	r1, #6
  400a60:	4620      	mov	r0, r4
  400a62:	47b0      	blx	r6
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400a64:	2202      	movs	r2, #2
  400a66:	4b0e      	ldr	r3, [pc, #56]	; (400aa0 <ADC_1_init+0xa4>)
  400a68:	601a      	str	r2, [r3, #0]
  400a6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400a72:	601a      	str	r2, [r3, #0]
  400a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400a78:	601a      	str	r2, [r3, #0]
  400a7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400a7e:	601a      	str	r2, [r3, #0]
	gpio_set_pin_function(PIN_ADC_CURR_C, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_TEMP_1, GPIO_PIN_FUNCTION_OFF);

	gpio_set_pin_function(PIN_ADC_SUPPL_VOLTAGE, GPIO_PIN_FUNCTION_OFF);
}
  400a80:	b005      	add	sp, #20
  400a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400a84:	400e0600 	.word	0x400e0600
  400a88:	20400264 	.word	0x20400264
  400a8c:	20400760 	.word	0x20400760
  400a90:	20400600 	.word	0x20400600
  400a94:	40064000 	.word	0x40064000
  400a98:	00400ffd 	.word	0x00400ffd
  400a9c:	004010a5 	.word	0x004010a5
  400aa0:	400e1000 	.word	0x400e1000

00400aa4 <ADC_0_init>:
{
  400aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400aa8:	b084      	sub	sp, #16
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400aaa:	4b2a      	ldr	r3, [pc, #168]	; (400b54 <ADC_0_init+0xb0>)
  400aac:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400aae:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400ab2:	d103      	bne.n	400abc <ADC_0_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400ab4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ab8:	4b26      	ldr	r3, [pc, #152]	; (400b54 <ADC_0_init+0xb0>)
  400aba:	611a      	str	r2, [r3, #16]
	adc_async_init(&ADC_0, AFEC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
  400abc:	4d26      	ldr	r5, [pc, #152]	; (400b58 <ADC_0_init+0xb4>)
  400abe:	4c27      	ldr	r4, [pc, #156]	; (400b5c <ADC_0_init+0xb8>)
  400ac0:	2600      	movs	r6, #0
  400ac2:	9602      	str	r6, [sp, #8]
  400ac4:	4b26      	ldr	r3, [pc, #152]	; (400b60 <ADC_0_init+0xbc>)
  400ac6:	9301      	str	r3, [sp, #4]
  400ac8:	2706      	movs	r7, #6
  400aca:	9700      	str	r7, [sp, #0]
  400acc:	230a      	movs	r3, #10
  400ace:	f105 0248 	add.w	r2, r5, #72	; 0x48
  400ad2:	4924      	ldr	r1, [pc, #144]	; (400b64 <ADC_0_init+0xc0>)
  400ad4:	4620      	mov	r0, r4
  400ad6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 400b74 <ADC_0_init+0xd0>
  400ada:	47c0      	blx	r8
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_0, ADC_0_ch0_buf, ADC_0_CH0_BUF_SIZE);
  400adc:	2310      	movs	r3, #16
  400ade:	f105 0254 	add.w	r2, r5, #84	; 0x54
  400ae2:	4631      	mov	r1, r6
  400ae4:	4620      	mov	r0, r4
  400ae6:	4e20      	ldr	r6, [pc, #128]	; (400b68 <ADC_0_init+0xc4>)
  400ae8:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_2, ADC_0_ch2_buf, ADC_0_CH2_BUF_SIZE);
  400aea:	2310      	movs	r3, #16
  400aec:	f105 0264 	add.w	r2, r5, #100	; 0x64
  400af0:	2102      	movs	r1, #2
  400af2:	4620      	mov	r0, r4
  400af4:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_5, ADC_0_ch5_buf, ADC_0_CH5_BUF_SIZE);
  400af6:	2310      	movs	r3, #16
  400af8:	f105 0274 	add.w	r2, r5, #116	; 0x74
  400afc:	2105      	movs	r1, #5
  400afe:	4620      	mov	r0, r4
  400b00:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_6, ADC_0_ch6_buf, ADC_0_CH6_BUF_SIZE);
  400b02:	2310      	movs	r3, #16
  400b04:	f105 0284 	add.w	r2, r5, #132	; 0x84
  400b08:	4639      	mov	r1, r7
  400b0a:	4620      	mov	r0, r4
  400b0c:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_8, ADC_0_ch8_buf, ADC_0_CH8_BUF_SIZE);
  400b0e:	2310      	movs	r3, #16
  400b10:	f105 0294 	add.w	r2, r5, #148	; 0x94
  400b14:	2108      	movs	r1, #8
  400b16:	4620      	mov	r0, r4
  400b18:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, CONF_ADC_0_CHANNEL_10, ADC_0_ch10_buf, ADC_0_CH10_BUF_SIZE);
  400b1a:	2310      	movs	r3, #16
  400b1c:	f105 02a4 	add.w	r2, r5, #164	; 0xa4
  400b20:	210a      	movs	r1, #10
  400b22:	4620      	mov	r0, r4
  400b24:	47b0      	blx	r6
  400b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400b2a:	4b10      	ldr	r3, [pc, #64]	; (400b6c <ADC_0_init+0xc8>)
  400b2c:	601a      	str	r2, [r3, #0]
  400b2e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400b32:	2208      	movs	r2, #8
  400b34:	601a      	str	r2, [r3, #0]
  400b36:	2204      	movs	r2, #4
  400b38:	601a      	str	r2, [r3, #0]
  400b3a:	4a0d      	ldr	r2, [pc, #52]	; (400b70 <ADC_0_init+0xcc>)
  400b3c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400b40:	6011      	str	r1, [r2, #0]
  400b42:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400b46:	6011      	str	r1, [r2, #0]
  400b48:	2201      	movs	r2, #1
  400b4a:	601a      	str	r2, [r3, #0]
}
  400b4c:	b004      	add	sp, #16
  400b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b52:	bf00      	nop
  400b54:	400e0600 	.word	0x400e0600
  400b58:	20400264 	.word	0x20400264
  400b5c:	20400688 	.word	0x20400688
  400b60:	204006b4 	.word	0x204006b4
  400b64:	4003c000 	.word	0x4003c000
  400b68:	004010a5 	.word	0x004010a5
  400b6c:	400e1400 	.word	0x400e1400
  400b70:	400e0e00 	.word	0x400e0e00
  400b74:	00400ffd 	.word	0x00400ffd

00400b78 <EXTERNAL_IRQ_D_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400b78:	4b04      	ldr	r3, [pc, #16]	; (400b8c <EXTERNAL_IRQ_D_init+0x14>)
  400b7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400b7e:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  400b80:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  400b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400b86:	601a      	str	r2, [r3, #0]
  400b88:	4770      	bx	lr
  400b8a:	bf00      	nop
  400b8c:	400e1400 	.word	0x400e1400

00400b90 <EXTERNAL_IRQ_A_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400b90:	4b06      	ldr	r3, [pc, #24]	; (400bac <EXTERNAL_IRQ_A_init+0x1c>)
  400b92:	2204      	movs	r2, #4
  400b94:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400b96:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400b98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400b9c:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400b9e:	2220      	movs	r2, #32
  400ba0:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400ba2:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400ba4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400ba8:	601a      	str	r2, [r3, #0]
  400baa:	4770      	bx	lr
  400bac:	400e0e00 	.word	0x400e0e00

00400bb0 <EXTERNAL_IRQ_B_init>:
	((Pio *)hw)->PIO_ODR = mask;
  400bb0:	4b04      	ldr	r3, [pc, #16]	; (400bc4 <EXTERNAL_IRQ_B_init+0x14>)
  400bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400bb6:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = mask;
  400bb8:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  400bba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  400bbe:	601a      	str	r2, [r3, #0]
  400bc0:	4770      	bx	lr
  400bc2:	bf00      	nop
  400bc4:	400e1000 	.word	0x400e1000

00400bc8 <PWM_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400bc8:	4b16      	ldr	r3, [pc, #88]	; (400c24 <PWM_0_PORT_init+0x5c>)
  400bca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400bcc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  400bd0:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400bd2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400bd4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  400bd8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400bda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400bde:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400be0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400be2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  400be6:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400be8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400bea:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  400bee:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400bf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400bf4:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400bf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400bf8:	f022 0202 	bic.w	r2, r2, #2
  400bfc:	671a      	str	r2, [r3, #112]	; 0x70
  400bfe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c00:	f022 0202 	bic.w	r2, r2, #2
  400c04:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400c06:	2202      	movs	r2, #2
  400c08:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400c0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c0c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400c10:	671a      	str	r2, [r3, #112]	; 0x70
  400c12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c14:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400c18:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400c1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400c1e:	605a      	str	r2, [r3, #4]
  400c20:	4770      	bx	lr
  400c22:	bf00      	nop
  400c24:	400e0e00 	.word	0x400e0e00

00400c28 <PWM_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400c28:	4b04      	ldr	r3, [pc, #16]	; (400c3c <PWM_0_CLOCK_init+0x14>)
  400c2a:	699b      	ldr	r3, [r3, #24]
  400c2c:	2b00      	cmp	r3, #0
  400c2e:	db03      	blt.n	400c38 <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400c30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400c34:	4b01      	ldr	r3, [pc, #4]	; (400c3c <PWM_0_CLOCK_init+0x14>)
  400c36:	611a      	str	r2, [r3, #16]
  400c38:	4770      	bx	lr
  400c3a:	bf00      	nop
  400c3c:	400e0600 	.word	0x400e0600

00400c40 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  400c40:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  400c42:	4b06      	ldr	r3, [pc, #24]	; (400c5c <PWM_0_init+0x1c>)
  400c44:	4798      	blx	r3
	PWM_0_PORT_init();
  400c46:	4b06      	ldr	r3, [pc, #24]	; (400c60 <PWM_0_init+0x20>)
  400c48:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  400c4a:	4b06      	ldr	r3, [pc, #24]	; (400c64 <PWM_0_init+0x24>)
  400c4c:	4798      	blx	r3
  400c4e:	4602      	mov	r2, r0
  400c50:	4905      	ldr	r1, [pc, #20]	; (400c68 <PWM_0_init+0x28>)
  400c52:	4806      	ldr	r0, [pc, #24]	; (400c6c <PWM_0_init+0x2c>)
  400c54:	4b06      	ldr	r3, [pc, #24]	; (400c70 <PWM_0_init+0x30>)
  400c56:	4798      	blx	r3
  400c58:	bd08      	pop	{r3, pc}
  400c5a:	bf00      	nop
  400c5c:	00400c29 	.word	0x00400c29
  400c60:	00400bc9 	.word	0x00400bc9
  400c64:	00402279 	.word	0x00402279
  400c68:	40020000 	.word	0x40020000
  400c6c:	204005a0 	.word	0x204005a0
  400c70:	004013a9 	.word	0x004013a9

00400c74 <PWM_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400c74:	4b0c      	ldr	r3, [pc, #48]	; (400ca8 <PWM_1_PORT_init+0x34>)
  400c76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400c7c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400c7e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400c84:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400c86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400c8a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400c8c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400c92:	f042 0201 	orr.w	r2, r2, #1
  400c96:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400c98:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400c9a:	f022 0201 	bic.w	r2, r2, #1
  400c9e:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400ca0:	2201      	movs	r2, #1
  400ca2:	605a      	str	r2, [r3, #4]
  400ca4:	4770      	bx	lr
  400ca6:	bf00      	nop
  400ca8:	400e0e00 	.word	0x400e0e00

00400cac <PWM_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400cac:	4b05      	ldr	r3, [pc, #20]	; (400cc4 <PWM_1_CLOCK_init+0x18>)
  400cae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400cb2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  400cb6:	d104      	bne.n	400cc2 <PWM_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cbc:	4b01      	ldr	r3, [pc, #4]	; (400cc4 <PWM_1_CLOCK_init+0x18>)
  400cbe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400cc2:	4770      	bx	lr
  400cc4:	400e0600 	.word	0x400e0600

00400cc8 <PWM_1_init>:
{
	_pmc_enable_periph_clock(ID_PWM1);
}

void PWM_1_init(void)
{
  400cc8:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
  400cca:	4b06      	ldr	r3, [pc, #24]	; (400ce4 <PWM_1_init+0x1c>)
  400ccc:	4798      	blx	r3
	PWM_1_PORT_init();
  400cce:	4b06      	ldr	r3, [pc, #24]	; (400ce8 <PWM_1_init+0x20>)
  400cd0:	4798      	blx	r3
	pwm_init(&PWM_1, PWM1, _pwm_get_pwm());
  400cd2:	4b06      	ldr	r3, [pc, #24]	; (400cec <PWM_1_init+0x24>)
  400cd4:	4798      	blx	r3
  400cd6:	4602      	mov	r2, r0
  400cd8:	4905      	ldr	r1, [pc, #20]	; (400cf0 <PWM_1_init+0x28>)
  400cda:	4806      	ldr	r0, [pc, #24]	; (400cf4 <PWM_1_init+0x2c>)
  400cdc:	4b06      	ldr	r3, [pc, #24]	; (400cf8 <PWM_1_init+0x30>)
  400cde:	4798      	blx	r3
  400ce0:	bd08      	pop	{r3, pc}
  400ce2:	bf00      	nop
  400ce4:	00400cad 	.word	0x00400cad
  400ce8:	00400c75 	.word	0x00400c75
  400cec:	00402279 	.word	0x00402279
  400cf0:	4005c000 	.word	0x4005c000
  400cf4:	20400744 	.word	0x20400744
  400cf8:	004013a9 	.word	0x004013a9

00400cfc <ENCODER_A_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400cfc:	4b06      	ldr	r3, [pc, #24]	; (400d18 <ENCODER_A_PORT_init+0x1c>)
  400cfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d00:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400d04:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d06:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d08:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  400d0c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400d12:	605a      	str	r2, [r3, #4]
  400d14:	4770      	bx	lr
  400d16:	bf00      	nop
  400d18:	400e0e00 	.word	0x400e0e00

00400d1c <ENCODER_A_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_A_init(void)
{
  400d1c:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400d1e:	4b09      	ldr	r3, [pc, #36]	; (400d44 <ENCODER_A_init+0x28>)
  400d20:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400d22:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400d26:	d103      	bne.n	400d30 <ENCODER_A_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400d28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400d2c:	4b05      	ldr	r3, [pc, #20]	; (400d44 <ENCODER_A_init+0x28>)
  400d2e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	ENCODER_A_PORT_init();
  400d30:	4b05      	ldr	r3, [pc, #20]	; (400d48 <ENCODER_A_init+0x2c>)
  400d32:	4798      	blx	r3
	timer_init(&ENCODER_A, TC0, _tc_get_timer());
  400d34:	4b05      	ldr	r3, [pc, #20]	; (400d4c <ENCODER_A_init+0x30>)
  400d36:	4798      	blx	r3
  400d38:	4602      	mov	r2, r0
  400d3a:	4905      	ldr	r1, [pc, #20]	; (400d50 <ENCODER_A_init+0x34>)
  400d3c:	4805      	ldr	r0, [pc, #20]	; (400d54 <ENCODER_A_init+0x38>)
  400d3e:	4b06      	ldr	r3, [pc, #24]	; (400d58 <ENCODER_A_init+0x3c>)
  400d40:	4798      	blx	r3
  400d42:	bd08      	pop	{r3, pc}
  400d44:	400e0600 	.word	0x400e0600
  400d48:	00400cfd 	.word	0x00400cfd
  400d4c:	0040244f 	.word	0x0040244f
  400d50:	4000c000 	.word	0x4000c000
  400d54:	2040066c 	.word	0x2040066c
  400d58:	00401559 	.word	0x00401559

00400d5c <ENCODER_B_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d5c:	4b06      	ldr	r3, [pc, #24]	; (400d78 <ENCODER_B_PORT_init+0x1c>)
  400d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d60:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  400d64:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400d66:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d68:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  400d6c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400d6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400d72:	605a      	str	r2, [r3, #4]
  400d74:	4770      	bx	lr
  400d76:	bf00      	nop
  400d78:	400e1400 	.word	0x400e1400

00400d7c <ENCODER_B_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void ENCODER_B_init(void)
{
  400d7c:	b508      	push	{r3, lr}
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400d7e:	4b0a      	ldr	r3, [pc, #40]	; (400da8 <ENCODER_B_init+0x2c>)
  400d80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400d84:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  400d88:	d104      	bne.n	400d94 <ENCODER_B_init+0x18>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400d8a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400d8e:	4b06      	ldr	r3, [pc, #24]	; (400da8 <ENCODER_B_init+0x2c>)
  400d90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_pmc_enable_periph_clock(ID_TC3_CHANNEL0);
	ENCODER_B_PORT_init();
  400d94:	4b05      	ldr	r3, [pc, #20]	; (400dac <ENCODER_B_init+0x30>)
  400d96:	4798      	blx	r3
	timer_init(&ENCODER_B, TC3, _tc_get_timer());
  400d98:	4b05      	ldr	r3, [pc, #20]	; (400db0 <ENCODER_B_init+0x34>)
  400d9a:	4798      	blx	r3
  400d9c:	4602      	mov	r2, r0
  400d9e:	4905      	ldr	r1, [pc, #20]	; (400db4 <ENCODER_B_init+0x38>)
  400da0:	4805      	ldr	r0, [pc, #20]	; (400db8 <ENCODER_B_init+0x3c>)
  400da2:	4b06      	ldr	r3, [pc, #24]	; (400dbc <ENCODER_B_init+0x40>)
  400da4:	4798      	blx	r3
  400da6:	bd08      	pop	{r3, pc}
  400da8:	400e0600 	.word	0x400e0600
  400dac:	00400d5d 	.word	0x00400d5d
  400db0:	0040244f 	.word	0x0040244f
  400db4:	40054000 	.word	0x40054000
  400db8:	204005bc 	.word	0x204005bc
  400dbc:	00401559 	.word	0x00401559

00400dc0 <delay_driver_init>:
}

void delay_driver_init(void)
{
  400dc0:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400dc2:	4802      	ldr	r0, [pc, #8]	; (400dcc <delay_driver_init+0xc>)
  400dc4:	4b02      	ldr	r3, [pc, #8]	; (400dd0 <delay_driver_init+0x10>)
  400dc6:	4798      	blx	r3
  400dc8:	bd08      	pop	{r3, pc}
  400dca:	bf00      	nop
  400dcc:	e000e010 	.word	0xe000e010
  400dd0:	004011b9 	.word	0x004011b9

00400dd4 <EDBG_COM_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400dd4:	4b0f      	ldr	r3, [pc, #60]	; (400e14 <EDBG_COM_PORT_init+0x40>)
  400dd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400dd8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400ddc:	671a      	str	r2, [r3, #112]	; 0x70
  400dde:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400de0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400de4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400de6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400dea:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400dec:	4a0a      	ldr	r2, [pc, #40]	; (400e18 <EDBG_COM_PORT_init+0x44>)
  400dee:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400df2:	f043 0310 	orr.w	r3, r3, #16
  400df6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400dfa:	4b08      	ldr	r3, [pc, #32]	; (400e1c <EDBG_COM_PORT_init+0x48>)
  400dfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400dfe:	f042 0210 	orr.w	r2, r2, #16
  400e02:	671a      	str	r2, [r3, #112]	; 0x70
  400e04:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400e06:	f042 0210 	orr.w	r2, r2, #16
  400e0a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400e0c:	2210      	movs	r2, #16
  400e0e:	605a      	str	r2, [r3, #4]
  400e10:	4770      	bx	lr
  400e12:	bf00      	nop
  400e14:	400e0e00 	.word	0x400e0e00
  400e18:	40088000 	.word	0x40088000
  400e1c:	400e1000 	.word	0x400e1000

00400e20 <EDBG_COM_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400e20:	4b04      	ldr	r3, [pc, #16]	; (400e34 <EDBG_COM_CLOCK_init+0x14>)
  400e22:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400e24:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400e28:	d103      	bne.n	400e32 <EDBG_COM_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400e2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400e2e:	4b01      	ldr	r3, [pc, #4]	; (400e34 <EDBG_COM_CLOCK_init+0x14>)
  400e30:	611a      	str	r2, [r3, #16]
  400e32:	4770      	bx	lr
  400e34:	400e0600 	.word	0x400e0600

00400e38 <EDBG_COM_init>:
{
	_pmc_enable_periph_clock(ID_USART1);
}

void EDBG_COM_init(void)
{
  400e38:	b508      	push	{r3, lr}
	EDBG_COM_CLOCK_init();
  400e3a:	4b06      	ldr	r3, [pc, #24]	; (400e54 <EDBG_COM_init+0x1c>)
  400e3c:	4798      	blx	r3
	EDBG_COM_PORT_init();
  400e3e:	4b06      	ldr	r3, [pc, #24]	; (400e58 <EDBG_COM_init+0x20>)
  400e40:	4798      	blx	r3
	usart_sync_init(&EDBG_COM, USART1, _usart_get_usart_sync());
  400e42:	4b06      	ldr	r3, [pc, #24]	; (400e5c <EDBG_COM_init+0x24>)
  400e44:	4798      	blx	r3
  400e46:	4602      	mov	r2, r0
  400e48:	4905      	ldr	r1, [pc, #20]	; (400e60 <EDBG_COM_init+0x28>)
  400e4a:	4806      	ldr	r0, [pc, #24]	; (400e64 <EDBG_COM_init+0x2c>)
  400e4c:	4b06      	ldr	r3, [pc, #24]	; (400e68 <EDBG_COM_init+0x30>)
  400e4e:	4798      	blx	r3
  400e50:	bd08      	pop	{r3, pc}
  400e52:	bf00      	nop
  400e54:	00400e21 	.word	0x00400e21
  400e58:	00400dd5 	.word	0x00400dd5
  400e5c:	00402691 	.word	0x00402691
  400e60:	40028000 	.word	0x40028000
  400e64:	20400660 	.word	0x20400660
  400e68:	004016a1 	.word	0x004016a1

00400e6c <system_init>:
	CAN_1_PORT_init();
	can_async_init(&CAN_1, MCAN1);
}

void system_init(void)
{
  400e6c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400e6e:	4b37      	ldr	r3, [pc, #220]	; (400f4c <system_init+0xe0>)
  400e70:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400e72:	4b37      	ldr	r3, [pc, #220]	; (400f50 <system_init+0xe4>)
  400e74:	699b      	ldr	r3, [r3, #24]
  400e76:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400e7a:	d103      	bne.n	400e84 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400e80:	4b33      	ldr	r3, [pc, #204]	; (400f50 <system_init+0xe4>)
  400e82:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400e84:	4b32      	ldr	r3, [pc, #200]	; (400f50 <system_init+0xe4>)
  400e86:	699b      	ldr	r3, [r3, #24]
  400e88:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400e8c:	d103      	bne.n	400e96 <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400e92:	4b2f      	ldr	r3, [pc, #188]	; (400f50 <system_init+0xe4>)
  400e94:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400e96:	4b2e      	ldr	r3, [pc, #184]	; (400f50 <system_init+0xe4>)
  400e98:	699b      	ldr	r3, [r3, #24]
  400e9a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400e9e:	d103      	bne.n	400ea8 <system_init+0x3c>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400ea4:	4b2a      	ldr	r3, [pc, #168]	; (400f50 <system_init+0xe4>)
  400ea6:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400ea8:	4b29      	ldr	r3, [pc, #164]	; (400f50 <system_init+0xe4>)
  400eaa:	699b      	ldr	r3, [r3, #24]
  400eac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400eb0:	d103      	bne.n	400eba <system_init+0x4e>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400eb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400eb6:	4b26      	ldr	r3, [pc, #152]	; (400f50 <system_init+0xe4>)
  400eb8:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400eba:	4a26      	ldr	r2, [pc, #152]	; (400f54 <system_init+0xe8>)
  400ebc:	6853      	ldr	r3, [r2, #4]
  400ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400ec2:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ODR = mask;
  400ec4:	4b24      	ldr	r3, [pc, #144]	; (400f58 <system_init+0xec>)
  400ec6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400eca:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PPDDR = mask;
  400ecc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PUER = mask;
  400ed0:	665a      	str	r2, [r3, #100]	; 0x64
	((Pio *)hw)->PIO_PER = mask;
  400ed2:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400ed4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  400ed8:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400eda:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400edc:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ee2:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400ee4:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400ee6:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  400eec:	f44f 7080 	mov.w	r0, #256	; 0x100
  400ef0:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400ef2:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400ef4:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400ef6:	f44f 7000 	mov.w	r0, #512	; 0x200
  400efa:	6358      	str	r0, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400efc:	6118      	str	r0, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400efe:	6018      	str	r0, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400f00:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400f04:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400f06:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400f08:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400f0a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f0e:	6359      	str	r1, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400f10:	6119      	str	r1, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400f12:	6019      	str	r1, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400f14:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400f16:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400f18:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(PIN_GPIO_6, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PIN_GPIO_6, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
  400f1a:	4b10      	ldr	r3, [pc, #64]	; (400f5c <system_init+0xf0>)
  400f1c:	4798      	blx	r3
	ADC_1_init();
  400f1e:	4b10      	ldr	r3, [pc, #64]	; (400f60 <system_init+0xf4>)
  400f20:	4798      	blx	r3
	EXTERNAL_IRQ_D_init();
  400f22:	4b10      	ldr	r3, [pc, #64]	; (400f64 <system_init+0xf8>)
  400f24:	4798      	blx	r3
	EXTERNAL_IRQ_A_init();
  400f26:	4b10      	ldr	r3, [pc, #64]	; (400f68 <system_init+0xfc>)
  400f28:	4798      	blx	r3
	EXTERNAL_IRQ_B_init();
  400f2a:	4b10      	ldr	r3, [pc, #64]	; (400f6c <system_init+0x100>)
  400f2c:	4798      	blx	r3

	PWM_0_init();
  400f2e:	4b10      	ldr	r3, [pc, #64]	; (400f70 <system_init+0x104>)
  400f30:	4798      	blx	r3

	PWM_1_init();
  400f32:	4b10      	ldr	r3, [pc, #64]	; (400f74 <system_init+0x108>)
  400f34:	4798      	blx	r3
	ENCODER_A_init();
  400f36:	4b10      	ldr	r3, [pc, #64]	; (400f78 <system_init+0x10c>)
  400f38:	4798      	blx	r3
	ENCODER_B_init();
  400f3a:	4b10      	ldr	r3, [pc, #64]	; (400f7c <system_init+0x110>)
  400f3c:	4798      	blx	r3

	delay_driver_init();
  400f3e:	4b10      	ldr	r3, [pc, #64]	; (400f80 <system_init+0x114>)
  400f40:	4798      	blx	r3

	EDBG_COM_init();
  400f42:	4b10      	ldr	r3, [pc, #64]	; (400f84 <system_init+0x118>)
  400f44:	4798      	blx	r3

	//CAN_1_init();

	ext_irq_init();
  400f46:	4b10      	ldr	r3, [pc, #64]	; (400f88 <system_init+0x11c>)
  400f48:	4798      	blx	r3
  400f4a:	bd08      	pop	{r3, pc}
  400f4c:	00401ae1 	.word	0x00401ae1
  400f50:	400e0600 	.word	0x400e0600
  400f54:	400e1850 	.word	0x400e1850
  400f58:	400e0e00 	.word	0x400e0e00
  400f5c:	00400aa5 	.word	0x00400aa5
  400f60:	004009fd 	.word	0x004009fd
  400f64:	00400b79 	.word	0x00400b79
  400f68:	00400b91 	.word	0x00400b91
  400f6c:	00400bb1 	.word	0x00400bb1
  400f70:	00400c41 	.word	0x00400c41
  400f74:	00400cc9 	.word	0x00400cc9
  400f78:	00400d1d 	.word	0x00400d1d
  400f7c:	00400d7d 	.word	0x00400d7d
  400f80:	00400dc1 	.word	0x00400dc1
  400f84:	00400e39 	.word	0x00400e39
  400f88:	00401231 	.word	0x00401231

00400f8c <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
  400f8c:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
  400f8e:	6983      	ldr	r3, [r0, #24]
  400f90:	b103      	cbz	r3, 400f94 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
  400f92:	4798      	blx	r3
  400f94:	bd08      	pop	{r3, pc}

00400f96 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
  400f96:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
  400f98:	69c3      	ldr	r3, [r0, #28]
  400f9a:	b103      	cbz	r3, 400f9e <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
  400f9c:	4798      	blx	r3
  400f9e:	bd08      	pop	{r3, pc}

00400fa0 <adc_async_channel_conversion_done>:
{
  400fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400fa4:	4605      	mov	r5, r0
  400fa6:	4688      	mov	r8, r1
  400fa8:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
  400faa:	6a03      	ldr	r3, [r0, #32]
  400fac:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
  400fae:	6a87      	ldr	r7, [r0, #40]	; 0x28
  400fb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400fb4:	00de      	lsls	r6, r3, #3
  400fb6:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
  400fb8:	f104 0a04 	add.w	sl, r4, #4
  400fbc:	b2d1      	uxtb	r1, r2
  400fbe:	4650      	mov	r0, sl
  400fc0:	4b0c      	ldr	r3, [pc, #48]	; (400ff4 <adc_async_channel_conversion_done+0x54>)
  400fc2:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
  400fc4:	4628      	mov	r0, r5
  400fc6:	4b0c      	ldr	r3, [pc, #48]	; (400ff8 <adc_async_channel_conversion_done+0x58>)
  400fc8:	4798      	blx	r3
  400fca:	2801      	cmp	r0, #1
  400fcc:	d907      	bls.n	400fde <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
  400fce:	ea4f 2119 	mov.w	r1, r9, lsr #8
  400fd2:	4650      	mov	r0, sl
  400fd4:	4b07      	ldr	r3, [pc, #28]	; (400ff4 <adc_async_channel_conversion_done+0x54>)
  400fd6:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
  400fd8:	8aa3      	ldrh	r3, [r4, #20]
  400fda:	3301      	adds	r3, #1
  400fdc:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
  400fde:	8aa3      	ldrh	r3, [r4, #20]
  400fe0:	3301      	adds	r3, #1
  400fe2:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
  400fe4:	59bb      	ldr	r3, [r7, r6]
  400fe6:	b113      	cbz	r3, 400fee <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
  400fe8:	4641      	mov	r1, r8
  400fea:	4628      	mov	r0, r5
  400fec:	4798      	blx	r3
  400fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400ff2:	bf00      	nop
  400ff4:	004017b9 	.word	0x004017b9
  400ff8:	00401ac9 	.word	0x00401ac9

00400ffc <adc_async_init>:
{
  400ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401000:	4616      	mov	r6, r2
  401002:	461c      	mov	r4, r3
  401004:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  401008:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  40100a:	4607      	mov	r7, r0
  40100c:	4689      	mov	r9, r1
  40100e:	2800      	cmp	r0, #0
  401010:	bf18      	it	ne
  401012:	2900      	cmpne	r1, #0
  401014:	d00b      	beq.n	40102e <adc_async_init+0x32>
  401016:	1c13      	adds	r3, r2, #0
  401018:	bf18      	it	ne
  40101a:	2301      	movne	r3, #1
  40101c:	f1b8 0f00 	cmp.w	r8, #0
  401020:	d017      	beq.n	401052 <adc_async_init+0x56>
  401022:	b1b3      	cbz	r3, 401052 <adc_async_init+0x56>
  401024:	b10d      	cbz	r5, 40102a <adc_async_init+0x2e>
  401026:	2001      	movs	r0, #1
  401028:	e002      	b.n	401030 <adc_async_init+0x34>
  40102a:	2000      	movs	r0, #0
  40102c:	e000      	b.n	401030 <adc_async_init+0x34>
  40102e:	2000      	movs	r0, #0
  401030:	f8df b068 	ldr.w	fp, [pc, #104]	; 40109c <adc_async_init+0xa0>
  401034:	223f      	movs	r2, #63	; 0x3f
  401036:	4659      	mov	r1, fp
  401038:	f8df a064 	ldr.w	sl, [pc, #100]	; 4010a0 <adc_async_init+0xa4>
  40103c:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
  40103e:	1c60      	adds	r0, r4, #1
  401040:	2240      	movs	r2, #64	; 0x40
  401042:	4659      	mov	r1, fp
  401044:	4580      	cmp	r8, r0
  401046:	bfcc      	ite	gt
  401048:	2000      	movgt	r0, #0
  40104a:	2001      	movle	r0, #1
  40104c:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
  40104e:	2300      	movs	r3, #0
  401050:	e005      	b.n	40105e <adc_async_init+0x62>
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
  401052:	2000      	movs	r0, #0
  401054:	e7ec      	b.n	401030 <adc_async_init+0x34>
		channel_map[i] = 0xFF;
  401056:	22ff      	movs	r2, #255	; 0xff
  401058:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
  40105a:	3301      	adds	r3, #1
  40105c:	b2db      	uxtb	r3, r3
  40105e:	42a3      	cmp	r3, r4
  401060:	d9f9      	bls.n	401056 <adc_async_init+0x5a>
	descr->channel_map    = channel_map;
  401062:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
  401064:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
  401068:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
  40106c:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
  40106e:	4649      	mov	r1, r9
  401070:	4638      	mov	r0, r7
  401072:	4b06      	ldr	r3, [pc, #24]	; (40108c <adc_async_init+0x90>)
  401074:	4798      	blx	r3
	if (init_status) {
  401076:	4603      	mov	r3, r0
  401078:	b928      	cbnz	r0, 401086 <adc_async_init+0x8a>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
  40107a:	4a05      	ldr	r2, [pc, #20]	; (401090 <adc_async_init+0x94>)
  40107c:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
  40107e:	4a05      	ldr	r2, [pc, #20]	; (401094 <adc_async_init+0x98>)
  401080:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
  401082:	4a05      	ldr	r2, [pc, #20]	; (401098 <adc_async_init+0x9c>)
  401084:	607a      	str	r2, [r7, #4]
}
  401086:	4618      	mov	r0, r3
  401088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40108c:	00401a09 	.word	0x00401a09
  401090:	00400fa1 	.word	0x00400fa1
  401094:	00400f8d 	.word	0x00400f8d
  401098:	00400f97 	.word	0x00400f97
  40109c:	00405ca8 	.word	0x00405ca8
  4010a0:	00401715 	.word	0x00401715

004010a4 <adc_async_register_channel_buffer>:
{
  4010a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4010a8:	460e      	mov	r6, r1
  4010aa:	461f      	mov	r7, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
  4010ac:	4605      	mov	r5, r0
  4010ae:	4690      	mov	r8, r2
  4010b0:	2800      	cmp	r0, #0
  4010b2:	bf18      	it	ne
  4010b4:	2a00      	cmpne	r2, #0
  4010b6:	d002      	beq.n	4010be <adc_async_register_channel_buffer+0x1a>
  4010b8:	b9c3      	cbnz	r3, 4010ec <adc_async_register_channel_buffer+0x48>
  4010ba:	2000      	movs	r0, #0
  4010bc:	e000      	b.n	4010c0 <adc_async_register_channel_buffer+0x1c>
  4010be:	2000      	movs	r0, #0
  4010c0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 401158 <adc_async_register_channel_buffer+0xb4>
  4010c4:	2266      	movs	r2, #102	; 0x66
  4010c6:	4649      	mov	r1, r9
  4010c8:	4c21      	ldr	r4, [pc, #132]	; (401150 <adc_async_register_channel_buffer+0xac>)
  4010ca:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
  4010cc:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  4010d0:	2267      	movs	r2, #103	; 0x67
  4010d2:	4649      	mov	r1, r9
  4010d4:	42b0      	cmp	r0, r6
  4010d6:	bf34      	ite	cc
  4010d8:	2000      	movcc	r0, #0
  4010da:	2001      	movcs	r0, #1
  4010dc:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
  4010de:	6a29      	ldr	r1, [r5, #32]
  4010e0:	5d8b      	ldrb	r3, [r1, r6]
  4010e2:	2bff      	cmp	r3, #255	; 0xff
  4010e4:	d12b      	bne.n	40113e <adc_async_register_channel_buffer+0x9a>
  4010e6:	2400      	movs	r4, #0
  4010e8:	4623      	mov	r3, r4
  4010ea:	e003      	b.n	4010f4 <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
  4010ec:	2001      	movs	r0, #1
  4010ee:	e7e7      	b.n	4010c0 <adc_async_register_channel_buffer+0x1c>
	for (i = 0; i <= descr->channel_max; i++) {
  4010f0:	3301      	adds	r3, #1
  4010f2:	b2db      	uxtb	r3, r3
  4010f4:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  4010f8:	4293      	cmp	r3, r2
  4010fa:	d805      	bhi.n	401108 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
  4010fc:	5cca      	ldrb	r2, [r1, r3]
  4010fe:	2aff      	cmp	r2, #255	; 0xff
  401100:	d0f6      	beq.n	4010f0 <adc_async_register_channel_buffer+0x4c>
			index++;
  401102:	3401      	adds	r4, #1
  401104:	b2e4      	uxtb	r4, r4
  401106:	e7f3      	b.n	4010f0 <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
  401108:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
  40110c:	429c      	cmp	r4, r3
  40110e:	d819      	bhi.n	401144 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
  401110:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  401112:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  401116:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  40111a:	4448      	add	r0, r9
  40111c:	463a      	mov	r2, r7
  40111e:	4641      	mov	r1, r8
  401120:	3004      	adds	r0, #4
  401122:	4b0c      	ldr	r3, [pc, #48]	; (401154 <adc_async_register_channel_buffer+0xb0>)
  401124:	4798      	blx	r3
  401126:	4602      	mov	r2, r0
  401128:	b978      	cbnz	r0, 40114a <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
  40112a:	6a2b      	ldr	r3, [r5, #32]
  40112c:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
  40112e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401130:	4499      	add	r9, r3
  401132:	2300      	movs	r3, #0
  401134:	f8a9 3014 	strh.w	r3, [r9, #20]
}
  401138:	4610      	mov	r0, r2
  40113a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
  40113e:	f06f 020c 	mvn.w	r2, #12
  401142:	e7f9      	b.n	401138 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
  401144:	f06f 021b 	mvn.w	r2, #27
  401148:	e7f6      	b.n	401138 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
  40114a:	f06f 020c 	mvn.w	r2, #12
  40114e:	e7f3      	b.n	401138 <adc_async_register_channel_buffer+0x94>
  401150:	00401715 	.word	0x00401715
  401154:	00401775 	.word	0x00401775
  401158:	00405ca8 	.word	0x00405ca8

0040115c <adc_async_enable_channel>:
{
  40115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40115e:	460d      	mov	r5, r1
	ASSERT(descr);
  401160:	4f0b      	ldr	r7, [pc, #44]	; (401190 <adc_async_enable_channel+0x34>)
  401162:	4604      	mov	r4, r0
  401164:	2283      	movs	r2, #131	; 0x83
  401166:	4639      	mov	r1, r7
  401168:	3000      	adds	r0, #0
  40116a:	bf18      	it	ne
  40116c:	2001      	movne	r0, #1
  40116e:	4e09      	ldr	r6, [pc, #36]	; (401194 <adc_async_enable_channel+0x38>)
  401170:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
  401172:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  401176:	2284      	movs	r2, #132	; 0x84
  401178:	4639      	mov	r1, r7
  40117a:	42a8      	cmp	r0, r5
  40117c:	bf34      	ite	cc
  40117e:	2000      	movcc	r0, #0
  401180:	2001      	movcs	r0, #1
  401182:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
  401184:	4629      	mov	r1, r5
  401186:	4620      	mov	r0, r4
  401188:	4b03      	ldr	r3, [pc, #12]	; (401198 <adc_async_enable_channel+0x3c>)
  40118a:	4798      	blx	r3
}
  40118c:	2000      	movs	r0, #0
  40118e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401190:	00405ca8 	.word	0x00405ca8
  401194:	00401715 	.word	0x00401715
  401198:	00401abd 	.word	0x00401abd

0040119c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40119c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4011a0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4011a2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4011a4:	f3bf 8f5f 	dmb	sy
  4011a8:	4770      	bx	lr

004011aa <atomic_leave_critical>:
  4011aa:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4011ae:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4011b0:	f383 8810 	msr	PRIMASK, r3
  4011b4:	4770      	bx	lr
	...

004011b8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4011b8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4011ba:	4b02      	ldr	r3, [pc, #8]	; (4011c4 <delay_init+0xc>)
  4011bc:	6018      	str	r0, [r3, #0]
  4011be:	4b02      	ldr	r3, [pc, #8]	; (4011c8 <delay_init+0x10>)
  4011c0:	4798      	blx	r3
  4011c2:	bd08      	pop	{r3, pc}
  4011c4:	20400318 	.word	0x20400318
  4011c8:	00402291 	.word	0x00402291

004011cc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4011cc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4011ce:	4b04      	ldr	r3, [pc, #16]	; (4011e0 <delay_ms+0x14>)
  4011d0:	681c      	ldr	r4, [r3, #0]
  4011d2:	4b04      	ldr	r3, [pc, #16]	; (4011e4 <delay_ms+0x18>)
  4011d4:	4798      	blx	r3
  4011d6:	4601      	mov	r1, r0
  4011d8:	4620      	mov	r0, r4
  4011da:	4b03      	ldr	r3, [pc, #12]	; (4011e8 <delay_ms+0x1c>)
  4011dc:	4798      	blx	r3
  4011de:	bd10      	pop	{r4, pc}
  4011e0:	20400318 	.word	0x20400318
  4011e4:	00401acd 	.word	0x00401acd
  4011e8:	0040229d 	.word	0x0040229d

004011ec <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  4011ec:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  4011ee:	2504      	movs	r5, #4
  4011f0:	2400      	movs	r4, #0

	while (upper >= lower) {
  4011f2:	e007      	b.n	401204 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
  4011f4:	4a0d      	ldr	r2, [pc, #52]	; (40122c <process_ext_irq+0x40>)
  4011f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4011fa:	b1b3      	cbz	r3, 40122a <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
  4011fc:	4798      	blx	r3
  4011fe:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
  401200:	3a01      	subs	r2, #1
  401202:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
  401204:	42ac      	cmp	r4, r5
  401206:	d810      	bhi.n	40122a <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
  401208:	192b      	adds	r3, r5, r4
  40120a:	105b      	asrs	r3, r3, #1
  40120c:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
  40120e:	2a03      	cmp	r2, #3
  401210:	d80b      	bhi.n	40122a <process_ext_irq+0x3e>
  401212:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
  401214:	4905      	ldr	r1, [pc, #20]	; (40122c <process_ext_irq+0x40>)
  401216:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
  40121a:	6849      	ldr	r1, [r1, #4]
  40121c:	4281      	cmp	r1, r0
  40121e:	d0e9      	beq.n	4011f4 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
  401220:	4281      	cmp	r1, r0
  401222:	d2ed      	bcs.n	401200 <process_ext_irq+0x14>
			lower = middle + 1;
  401224:	3201      	adds	r2, #1
  401226:	b2d4      	uxtb	r4, r2
  401228:	e7ec      	b.n	401204 <process_ext_irq+0x18>
  40122a:	bd38      	pop	{r3, r4, r5, pc}
  40122c:	2040031c 	.word	0x2040031c

00401230 <ext_irq_init>:
{
  401230:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401232:	2300      	movs	r3, #0
  401234:	e00a      	b.n	40124c <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
  401236:	4a08      	ldr	r2, [pc, #32]	; (401258 <ext_irq_init+0x28>)
  401238:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  40123c:	f04f 30ff 	mov.w	r0, #4294967295
  401240:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
  401242:	2100      	movs	r1, #0
  401244:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401248:	3301      	adds	r3, #1
  40124a:	b29b      	uxth	r3, r3
  40124c:	2b03      	cmp	r3, #3
  40124e:	d9f2      	bls.n	401236 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
  401250:	4802      	ldr	r0, [pc, #8]	; (40125c <ext_irq_init+0x2c>)
  401252:	4b03      	ldr	r3, [pc, #12]	; (401260 <ext_irq_init+0x30>)
  401254:	4798      	blx	r3
}
  401256:	bd08      	pop	{r3, pc}
  401258:	2040031c 	.word	0x2040031c
  40125c:	004011ed 	.word	0x004011ed
  401260:	00401e3d 	.word	0x00401e3d

00401264 <ext_irq_register>:
{
  401264:	b5f0      	push	{r4, r5, r6, r7, lr}
  401266:	b083      	sub	sp, #12
  401268:	4605      	mov	r5, r0
	uint8_t i = 0, j = 0;
  40126a:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
  40126c:	2b03      	cmp	r3, #3
  40126e:	d80e      	bhi.n	40128e <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
  401270:	4618      	mov	r0, r3
  401272:	4a2e      	ldr	r2, [pc, #184]	; (40132c <ext_irq_register+0xc8>)
  401274:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  401278:	6852      	ldr	r2, [r2, #4]
  40127a:	42aa      	cmp	r2, r5
  40127c:	d002      	beq.n	401284 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  40127e:	3301      	adds	r3, #1
  401280:	b2db      	uxtb	r3, r3
  401282:	e7f3      	b.n	40126c <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
  401284:	4b29      	ldr	r3, [pc, #164]	; (40132c <ext_irq_register+0xc8>)
  401286:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
  40128a:	2701      	movs	r7, #1
			break;
  40128c:	e000      	b.n	401290 <ext_irq_register+0x2c>
	bool    found = false;
  40128e:	2700      	movs	r7, #0
	if (NULL == cb) {
  401290:	b159      	cbz	r1, 4012aa <ext_irq_register+0x46>
	if (!found) {
  401292:	2f00      	cmp	r7, #0
  401294:	d13d      	bne.n	401312 <ext_irq_register+0xae>
  401296:	2600      	movs	r6, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401298:	2e03      	cmp	r6, #3
  40129a:	d813      	bhi.n	4012c4 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
  40129c:	4b23      	ldr	r3, [pc, #140]	; (40132c <ext_irq_register+0xc8>)
  40129e:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
  4012a2:	b143      	cbz	r3, 4012b6 <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4012a4:	3601      	adds	r6, #1
  4012a6:	b2f6      	uxtb	r6, r6
  4012a8:	e7f6      	b.n	401298 <ext_irq_register+0x34>
		if (!found) {
  4012aa:	2f00      	cmp	r7, #0
  4012ac:	d038      	beq.n	401320 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
  4012ae:	4628      	mov	r0, r5
  4012b0:	4b1f      	ldr	r3, [pc, #124]	; (401330 <ext_irq_register+0xcc>)
  4012b2:	4798      	blx	r3
  4012b4:	e032      	b.n	40131c <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
  4012b6:	4b1d      	ldr	r3, [pc, #116]	; (40132c <ext_irq_register+0xc8>)
  4012b8:	f843 1036 	str.w	r1, [r3, r6, lsl #3]
				ext_irqs[i].pin = pin;
  4012bc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4012c0:	605d      	str	r5, [r3, #4]
				found           = true;
  4012c2:	2701      	movs	r7, #1
  4012c4:	2300      	movs	r3, #0
  4012c6:	e001      	b.n	4012cc <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  4012c8:	3301      	adds	r3, #1
  4012ca:	b2db      	uxtb	r3, r3
  4012cc:	2b03      	cmp	r3, #3
  4012ce:	bf98      	it	ls
  4012d0:	2e03      	cmpls	r6, #3
  4012d2:	d81e      	bhi.n	401312 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  4012d4:	46b6      	mov	lr, r6
  4012d6:	4a15      	ldr	r2, [pc, #84]	; (40132c <ext_irq_register+0xc8>)
  4012d8:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
  4012dc:	6848      	ldr	r0, [r1, #4]
  4012de:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4012e2:	6852      	ldr	r2, [r2, #4]
  4012e4:	4290      	cmp	r0, r2
  4012e6:	d2ef      	bcs.n	4012c8 <ext_irq_register+0x64>
  4012e8:	f1b2 3fff 	cmp.w	r2, #4294967295
  4012ec:	d0ec      	beq.n	4012c8 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
  4012ee:	4c0f      	ldr	r4, [pc, #60]	; (40132c <ext_irq_register+0xc8>)
  4012f0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
  4012f4:	e892 0003 	ldmia.w	r2, {r0, r1}
  4012f8:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
  4012fc:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  401300:	e894 0003 	ldmia.w	r4, {r0, r1}
  401304:	e882 0003 	stmia.w	r2, {r0, r1}
				ext_irqs[i] = tmp;
  401308:	e89d 0003 	ldmia.w	sp, {r0, r1}
  40130c:	e884 0003 	stmia.w	r4, {r0, r1}
  401310:	e7da      	b.n	4012c8 <ext_irq_register+0x64>
	if (!found) {
  401312:	b147      	cbz	r7, 401326 <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
  401314:	2101      	movs	r1, #1
  401316:	4628      	mov	r0, r5
  401318:	4b05      	ldr	r3, [pc, #20]	; (401330 <ext_irq_register+0xcc>)
  40131a:	4798      	blx	r3
}
  40131c:	b003      	add	sp, #12
  40131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
  401320:	f06f 000c 	mvn.w	r0, #12
  401324:	e7fa      	b.n	40131c <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
  401326:	f06f 000c 	mvn.w	r0, #12
  40132a:	e7f7      	b.n	40131c <ext_irq_register+0xb8>
  40132c:	2040031c 	.word	0x2040031c
  401330:	00401e6d 	.word	0x00401e6d

00401334 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401334:	b570      	push	{r4, r5, r6, lr}
  401336:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  401338:	4604      	mov	r4, r0
  40133a:	460d      	mov	r5, r1
  40133c:	2800      	cmp	r0, #0
  40133e:	bf18      	it	ne
  401340:	2900      	cmpne	r1, #0
  401342:	bf14      	ite	ne
  401344:	2001      	movne	r0, #1
  401346:	2000      	moveq	r0, #0
  401348:	2234      	movs	r2, #52	; 0x34
  40134a:	4904      	ldr	r1, [pc, #16]	; (40135c <io_write+0x28>)
  40134c:	4b04      	ldr	r3, [pc, #16]	; (401360 <io_write+0x2c>)
  40134e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  401350:	6823      	ldr	r3, [r4, #0]
  401352:	4632      	mov	r2, r6
  401354:	4629      	mov	r1, r5
  401356:	4620      	mov	r0, r4
  401358:	4798      	blx	r3
}
  40135a:	bd70      	pop	{r4, r5, r6, pc}
  40135c:	00405cc4 	.word	0x00405cc4
  401360:	00401715 	.word	0x00401715

00401364 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401364:	b570      	push	{r4, r5, r6, lr}
  401366:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  401368:	4604      	mov	r4, r0
  40136a:	460d      	mov	r5, r1
  40136c:	2800      	cmp	r0, #0
  40136e:	bf18      	it	ne
  401370:	2900      	cmpne	r1, #0
  401372:	bf14      	ite	ne
  401374:	2001      	movne	r0, #1
  401376:	2000      	moveq	r0, #0
  401378:	223d      	movs	r2, #61	; 0x3d
  40137a:	4904      	ldr	r1, [pc, #16]	; (40138c <io_read+0x28>)
  40137c:	4b04      	ldr	r3, [pc, #16]	; (401390 <io_read+0x2c>)
  40137e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  401380:	6863      	ldr	r3, [r4, #4]
  401382:	4632      	mov	r2, r6
  401384:	4629      	mov	r1, r5
  401386:	4620      	mov	r0, r4
  401388:	4798      	blx	r3
}
  40138a:	bd70      	pop	{r4, r5, r6, pc}
  40138c:	00405cc4 	.word	0x00405cc4
  401390:	00401715 	.word	0x00401715

00401394 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  401394:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  401396:	6943      	ldr	r3, [r0, #20]
  401398:	b103      	cbz	r3, 40139c <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  40139a:	4798      	blx	r3
  40139c:	bd08      	pop	{r3, pc}

0040139e <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  40139e:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  4013a0:	6983      	ldr	r3, [r0, #24]
  4013a2:	b103      	cbz	r3, 4013a6 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  4013a4:	4798      	blx	r3
  4013a6:	bd08      	pop	{r3, pc}

004013a8 <pwm_init>:
{
  4013a8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4013aa:	4604      	mov	r4, r0
  4013ac:	460d      	mov	r5, r1
  4013ae:	2800      	cmp	r0, #0
  4013b0:	bf18      	it	ne
  4013b2:	2900      	cmpne	r1, #0
  4013b4:	bf14      	ite	ne
  4013b6:	2001      	movne	r0, #1
  4013b8:	2000      	moveq	r0, #0
  4013ba:	2233      	movs	r2, #51	; 0x33
  4013bc:	4906      	ldr	r1, [pc, #24]	; (4013d8 <pwm_init+0x30>)
  4013be:	4b07      	ldr	r3, [pc, #28]	; (4013dc <pwm_init+0x34>)
  4013c0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  4013c2:	4629      	mov	r1, r5
  4013c4:	4620      	mov	r0, r4
  4013c6:	4b06      	ldr	r3, [pc, #24]	; (4013e0 <pwm_init+0x38>)
  4013c8:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  4013ca:	4b06      	ldr	r3, [pc, #24]	; (4013e4 <pwm_init+0x3c>)
  4013cc:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  4013ce:	4b06      	ldr	r3, [pc, #24]	; (4013e8 <pwm_init+0x40>)
  4013d0:	6063      	str	r3, [r4, #4]
}
  4013d2:	2000      	movs	r0, #0
  4013d4:	bd38      	pop	{r3, r4, r5, pc}
  4013d6:	bf00      	nop
  4013d8:	00405cd8 	.word	0x00405cd8
  4013dc:	00401715 	.word	0x00401715
  4013e0:	0040200d 	.word	0x0040200d
  4013e4:	00401395 	.word	0x00401395
  4013e8:	0040139f 	.word	0x0040139f

004013ec <pwm_enable>:
{
  4013ec:	b510      	push	{r4, lr}
	ASSERT(descr);
  4013ee:	4604      	mov	r4, r0
  4013f0:	224a      	movs	r2, #74	; 0x4a
  4013f2:	4909      	ldr	r1, [pc, #36]	; (401418 <pwm_enable+0x2c>)
  4013f4:	3000      	adds	r0, #0
  4013f6:	bf18      	it	ne
  4013f8:	2001      	movne	r0, #1
  4013fa:	4b08      	ldr	r3, [pc, #32]	; (40141c <pwm_enable+0x30>)
  4013fc:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  4013fe:	4620      	mov	r0, r4
  401400:	4b07      	ldr	r3, [pc, #28]	; (401420 <pwm_enable+0x34>)
  401402:	4798      	blx	r3
  401404:	b920      	cbnz	r0, 401410 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  401406:	4620      	mov	r0, r4
  401408:	4b06      	ldr	r3, [pc, #24]	; (401424 <pwm_enable+0x38>)
  40140a:	4798      	blx	r3
	return ERR_NONE;
  40140c:	2000      	movs	r0, #0
  40140e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  401410:	f06f 0010 	mvn.w	r0, #16
}
  401414:	bd10      	pop	{r4, pc}
  401416:	bf00      	nop
  401418:	00405cd8 	.word	0x00405cd8
  40141c:	00401715 	.word	0x00401715
  401420:	004021e9 	.word	0x004021e9
  401424:	00402145 	.word	0x00402145

00401428 <pwm_register_callback>:
{
  401428:	b570      	push	{r4, r5, r6, lr}
	switch (type) {
  40142a:	460d      	mov	r5, r1
  40142c:	b121      	cbz	r1, 401438 <pwm_register_callback+0x10>
  40142e:	2901      	cmp	r1, #1
  401430:	d015      	beq.n	40145e <pwm_register_callback+0x36>
		return ERR_INVALID_ARG;
  401432:	f06f 000c 	mvn.w	r0, #12
}
  401436:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.period = cb;
  401438:	6142      	str	r2, [r0, #20]
  40143a:	4616      	mov	r6, r2
  40143c:	4604      	mov	r4, r0
	ASSERT(descr);
  40143e:	2272      	movs	r2, #114	; 0x72
  401440:	4908      	ldr	r1, [pc, #32]	; (401464 <pwm_register_callback+0x3c>)
  401442:	3000      	adds	r0, #0
  401444:	bf18      	it	ne
  401446:	2001      	movne	r0, #1
  401448:	4b07      	ldr	r3, [pc, #28]	; (401468 <pwm_register_callback+0x40>)
  40144a:	4798      	blx	r3
	_pwm_set_irq_state(&descr->device, (enum _pwm_callback_type)type, NULL != cb);
  40144c:	1c32      	adds	r2, r6, #0
  40144e:	bf18      	it	ne
  401450:	2201      	movne	r2, #1
  401452:	4629      	mov	r1, r5
  401454:	4620      	mov	r0, r4
  401456:	4b05      	ldr	r3, [pc, #20]	; (40146c <pwm_register_callback+0x44>)
  401458:	4798      	blx	r3
	return ERR_NONE;
  40145a:	2000      	movs	r0, #0
  40145c:	bd70      	pop	{r4, r5, r6, pc}
		descr->pwm_cb.error = cb;
  40145e:	6182      	str	r2, [r0, #24]
		break;
  401460:	e7eb      	b.n	40143a <pwm_register_callback+0x12>
  401462:	bf00      	nop
  401464:	00405cd8 	.word	0x00405cd8
  401468:	00401715 	.word	0x00401715
  40146c:	00402219 	.word	0x00402219

00401470 <pwm_set_parameters>:
{
  401470:	b570      	push	{r4, r5, r6, lr}
  401472:	460d      	mov	r5, r1
  401474:	4616      	mov	r6, r2
	ASSERT(descr);
  401476:	4604      	mov	r4, r0
  401478:	227c      	movs	r2, #124	; 0x7c
  40147a:	4906      	ldr	r1, [pc, #24]	; (401494 <pwm_set_parameters+0x24>)
  40147c:	3000      	adds	r0, #0
  40147e:	bf18      	it	ne
  401480:	2001      	movne	r0, #1
  401482:	4b05      	ldr	r3, [pc, #20]	; (401498 <pwm_set_parameters+0x28>)
  401484:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
  401486:	4632      	mov	r2, r6
  401488:	4629      	mov	r1, r5
  40148a:	4620      	mov	r0, r4
  40148c:	4b03      	ldr	r3, [pc, #12]	; (40149c <pwm_set_parameters+0x2c>)
  40148e:	4798      	blx	r3
}
  401490:	2000      	movs	r0, #0
  401492:	bd70      	pop	{r4, r5, r6, pc}
  401494:	00405cd8 	.word	0x00405cd8
  401498:	00401715 	.word	0x00401715
  40149c:	00402189 	.word	0x00402189

004014a0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  4014a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  4014a2:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  4014a4:	b117      	cbz	r7, 4014ac <timer_add_timer_task+0xc>
  4014a6:	463c      	mov	r4, r7
  4014a8:	2600      	movs	r6, #0
  4014aa:	e00b      	b.n	4014c4 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  4014ac:	4b0e      	ldr	r3, [pc, #56]	; (4014e8 <timer_add_timer_task+0x48>)
  4014ae:	4798      	blx	r3
		return;
  4014b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  4014b2:	68a5      	ldr	r5, [r4, #8]
  4014b4:	442b      	add	r3, r5
  4014b6:	1a9b      	subs	r3, r3, r2
  4014b8:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  4014ba:	688d      	ldr	r5, [r1, #8]
  4014bc:	42ab      	cmp	r3, r5
  4014be:	d209      	bcs.n	4014d4 <timer_add_timer_task+0x34>
			break;
		prev = it;
  4014c0:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  4014c2:	6824      	ldr	r4, [r4, #0]
  4014c4:	b134      	cbz	r4, 4014d4 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  4014c6:	6863      	ldr	r3, [r4, #4]
  4014c8:	4293      	cmp	r3, r2
  4014ca:	d8f2      	bhi.n	4014b2 <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  4014cc:	68a5      	ldr	r5, [r4, #8]
  4014ce:	1a9b      	subs	r3, r3, r2
  4014d0:	442b      	add	r3, r5
  4014d2:	e7f2      	b.n	4014ba <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  4014d4:	42bc      	cmp	r4, r7
  4014d6:	d003      	beq.n	4014e0 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  4014d8:	4630      	mov	r0, r6
  4014da:	4b04      	ldr	r3, [pc, #16]	; (4014ec <timer_add_timer_task+0x4c>)
  4014dc:	4798      	blx	r3
  4014de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  4014e0:	4b01      	ldr	r3, [pc, #4]	; (4014e8 <timer_add_timer_task+0x48>)
  4014e2:	4798      	blx	r3
  4014e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4014e6:	bf00      	nop
  4014e8:	00401731 	.word	0x00401731
  4014ec:	0040175d 	.word	0x0040175d

004014f0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  4014f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4014f2:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  4014f4:	6906      	ldr	r6, [r0, #16]
  4014f6:	3601      	adds	r6, #1
  4014f8:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  4014fa:	7e03      	ldrb	r3, [r0, #24]
  4014fc:	f013 0f01 	tst.w	r3, #1
  401500:	d105      	bne.n	40150e <timer_process_counted+0x1e>
  401502:	7e03      	ldrb	r3, [r0, #24]
  401504:	f013 0f02 	tst.w	r3, #2
  401508:	d101      	bne.n	40150e <timer_process_counted+0x1e>
  40150a:	4605      	mov	r5, r0
  40150c:	e009      	b.n	401522 <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  40150e:	7e03      	ldrb	r3, [r0, #24]
  401510:	f043 0302 	orr.w	r3, r3, #2
  401514:	7603      	strb	r3, [r0, #24]
		return;
  401516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401518:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  40151a:	68e3      	ldr	r3, [r4, #12]
  40151c:	4620      	mov	r0, r4
  40151e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  401520:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  401522:	b19c      	cbz	r4, 40154c <timer_process_counted+0x5c>
  401524:	6863      	ldr	r3, [r4, #4]
  401526:	1af3      	subs	r3, r6, r3
  401528:	68a2      	ldr	r2, [r4, #8]
  40152a:	4293      	cmp	r3, r2
  40152c:	d30e      	bcc.n	40154c <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  40152e:	f105 0714 	add.w	r7, r5, #20
  401532:	4638      	mov	r0, r7
  401534:	4b06      	ldr	r3, [pc, #24]	; (401550 <timer_process_counted+0x60>)
  401536:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  401538:	7c23      	ldrb	r3, [r4, #16]
  40153a:	2b01      	cmp	r3, #1
  40153c:	d1ec      	bne.n	401518 <timer_process_counted+0x28>
			tmp->time_label = time;
  40153e:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  401540:	4632      	mov	r2, r6
  401542:	4621      	mov	r1, r4
  401544:	4638      	mov	r0, r7
  401546:	4b03      	ldr	r3, [pc, #12]	; (401554 <timer_process_counted+0x64>)
  401548:	4798      	blx	r3
  40154a:	e7e5      	b.n	401518 <timer_process_counted+0x28>
  40154c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40154e:	bf00      	nop
  401550:	00401765 	.word	0x00401765
  401554:	004014a1 	.word	0x004014a1

00401558 <timer_init>:
{
  401558:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40155a:	4604      	mov	r4, r0
  40155c:	460d      	mov	r5, r1
  40155e:	2800      	cmp	r0, #0
  401560:	bf18      	it	ne
  401562:	2900      	cmpne	r1, #0
  401564:	bf14      	ite	ne
  401566:	2001      	movne	r0, #1
  401568:	2000      	moveq	r0, #0
  40156a:	223b      	movs	r2, #59	; 0x3b
  40156c:	4905      	ldr	r1, [pc, #20]	; (401584 <timer_init+0x2c>)
  40156e:	4b06      	ldr	r3, [pc, #24]	; (401588 <timer_init+0x30>)
  401570:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  401572:	4629      	mov	r1, r5
  401574:	4620      	mov	r0, r4
  401576:	4b05      	ldr	r3, [pc, #20]	; (40158c <timer_init+0x34>)
  401578:	4798      	blx	r3
	descr->time                           = 0;
  40157a:	2000      	movs	r0, #0
  40157c:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  40157e:	4b04      	ldr	r3, [pc, #16]	; (401590 <timer_init+0x38>)
  401580:	6023      	str	r3, [r4, #0]
}
  401582:	bd38      	pop	{r3, r4, r5, pc}
  401584:	00405cf0 	.word	0x00405cf0
  401588:	00401715 	.word	0x00401715
  40158c:	00402355 	.word	0x00402355
  401590:	004014f1 	.word	0x004014f1

00401594 <timer_start>:
{
  401594:	b510      	push	{r4, lr}
	ASSERT(descr);
  401596:	4604      	mov	r4, r0
  401598:	2253      	movs	r2, #83	; 0x53
  40159a:	4909      	ldr	r1, [pc, #36]	; (4015c0 <timer_start+0x2c>)
  40159c:	3000      	adds	r0, #0
  40159e:	bf18      	it	ne
  4015a0:	2001      	movne	r0, #1
  4015a2:	4b08      	ldr	r3, [pc, #32]	; (4015c4 <timer_start+0x30>)
  4015a4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  4015a6:	4620      	mov	r0, r4
  4015a8:	4b07      	ldr	r3, [pc, #28]	; (4015c8 <timer_start+0x34>)
  4015aa:	4798      	blx	r3
  4015ac:	b920      	cbnz	r0, 4015b8 <timer_start+0x24>
	_timer_start(&descr->device);
  4015ae:	4620      	mov	r0, r4
  4015b0:	4b06      	ldr	r3, [pc, #24]	; (4015cc <timer_start+0x38>)
  4015b2:	4798      	blx	r3
	return ERR_NONE;
  4015b4:	2000      	movs	r0, #0
  4015b6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4015b8:	f06f 0010 	mvn.w	r0, #16
}
  4015bc:	bd10      	pop	{r4, pc}
  4015be:	bf00      	nop
  4015c0:	00405cf0 	.word	0x00405cf0
  4015c4:	00401715 	.word	0x00401715
  4015c8:	0040243d 	.word	0x0040243d
  4015cc:	00402431 	.word	0x00402431

004015d0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4015d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4015d2:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4015d4:	4605      	mov	r5, r0
  4015d6:	460f      	mov	r7, r1
  4015d8:	2800      	cmp	r0, #0
  4015da:	bf18      	it	ne
  4015dc:	2900      	cmpne	r1, #0
  4015de:	d002      	beq.n	4015e6 <usart_sync_write+0x16>
  4015e0:	bb0a      	cbnz	r2, 401626 <usart_sync_write+0x56>
  4015e2:	2000      	movs	r0, #0
  4015e4:	e000      	b.n	4015e8 <usart_sync_write+0x18>
  4015e6:	2000      	movs	r0, #0
  4015e8:	22f1      	movs	r2, #241	; 0xf1
  4015ea:	4910      	ldr	r1, [pc, #64]	; (40162c <usart_sync_write+0x5c>)
  4015ec:	4b10      	ldr	r3, [pc, #64]	; (401630 <usart_sync_write+0x60>)
  4015ee:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  4015f0:	f105 0408 	add.w	r4, r5, #8
  4015f4:	4620      	mov	r0, r4
  4015f6:	4b0f      	ldr	r3, [pc, #60]	; (401634 <usart_sync_write+0x64>)
  4015f8:	4798      	blx	r3
  4015fa:	2800      	cmp	r0, #0
  4015fc:	d0f8      	beq.n	4015f0 <usart_sync_write+0x20>
  4015fe:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  401600:	5d79      	ldrb	r1, [r7, r5]
  401602:	4620      	mov	r0, r4
  401604:	4b0c      	ldr	r3, [pc, #48]	; (401638 <usart_sync_write+0x68>)
  401606:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  401608:	4620      	mov	r0, r4
  40160a:	4b0a      	ldr	r3, [pc, #40]	; (401634 <usart_sync_write+0x64>)
  40160c:	4798      	blx	r3
  40160e:	2800      	cmp	r0, #0
  401610:	d0fa      	beq.n	401608 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  401612:	3501      	adds	r5, #1
  401614:	42b5      	cmp	r5, r6
  401616:	d3f3      	bcc.n	401600 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  401618:	4620      	mov	r0, r4
  40161a:	4b08      	ldr	r3, [pc, #32]	; (40163c <usart_sync_write+0x6c>)
  40161c:	4798      	blx	r3
  40161e:	2800      	cmp	r0, #0
  401620:	d0fa      	beq.n	401618 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  401622:	4628      	mov	r0, r5
  401624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  401626:	2001      	movs	r0, #1
  401628:	e7de      	b.n	4015e8 <usart_sync_write+0x18>
  40162a:	bf00      	nop
  40162c:	00405d08 	.word	0x00405d08
  401630:	00401715 	.word	0x00401715
  401634:	00402619 	.word	0x00402619
  401638:	004025d1 	.word	0x004025d1
  40163c:	00402641 	.word	0x00402641

00401640 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401644:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  401646:	4605      	mov	r5, r0
  401648:	4688      	mov	r8, r1
  40164a:	2800      	cmp	r0, #0
  40164c:	bf18      	it	ne
  40164e:	2900      	cmpne	r1, #0
  401650:	d002      	beq.n	401658 <usart_sync_read+0x18>
  401652:	b9d2      	cbnz	r2, 40168a <usart_sync_read+0x4a>
  401654:	2000      	movs	r0, #0
  401656:	e000      	b.n	40165a <usart_sync_read+0x1a>
  401658:	2000      	movs	r0, #0
  40165a:	f44f 7286 	mov.w	r2, #268	; 0x10c
  40165e:	490c      	ldr	r1, [pc, #48]	; (401690 <usart_sync_read+0x50>)
  401660:	4b0c      	ldr	r3, [pc, #48]	; (401694 <usart_sync_read+0x54>)
  401662:	4798      	blx	r3
	uint32_t                      offset = 0;
  401664:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  401666:	f105 0408 	add.w	r4, r5, #8
  40166a:	4620      	mov	r0, r4
  40166c:	4b0a      	ldr	r3, [pc, #40]	; (401698 <usart_sync_read+0x58>)
  40166e:	4798      	blx	r3
  401670:	2800      	cmp	r0, #0
  401672:	d0f8      	beq.n	401666 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  401674:	4620      	mov	r0, r4
  401676:	4b09      	ldr	r3, [pc, #36]	; (40169c <usart_sync_read+0x5c>)
  401678:	4798      	blx	r3
  40167a:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  40167e:	3601      	adds	r6, #1
  401680:	42be      	cmp	r6, r7
  401682:	d3f0      	bcc.n	401666 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  401684:	4630      	mov	r0, r6
  401686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  40168a:	2001      	movs	r0, #1
  40168c:	e7e5      	b.n	40165a <usart_sync_read+0x1a>
  40168e:	bf00      	nop
  401690:	00405d08 	.word	0x00405d08
  401694:	00401715 	.word	0x00401715
  401698:	00402669 	.word	0x00402669
  40169c:	004025f5 	.word	0x004025f5

004016a0 <usart_sync_init>:
{
  4016a0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4016a2:	4604      	mov	r4, r0
  4016a4:	460d      	mov	r5, r1
  4016a6:	2800      	cmp	r0, #0
  4016a8:	bf18      	it	ne
  4016aa:	2900      	cmpne	r1, #0
  4016ac:	bf14      	ite	ne
  4016ae:	2001      	movne	r0, #1
  4016b0:	2000      	moveq	r0, #0
  4016b2:	2234      	movs	r2, #52	; 0x34
  4016b4:	4907      	ldr	r1, [pc, #28]	; (4016d4 <usart_sync_init+0x34>)
  4016b6:	4b08      	ldr	r3, [pc, #32]	; (4016d8 <usart_sync_init+0x38>)
  4016b8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  4016ba:	4629      	mov	r1, r5
  4016bc:	f104 0008 	add.w	r0, r4, #8
  4016c0:	4b06      	ldr	r3, [pc, #24]	; (4016dc <usart_sync_init+0x3c>)
  4016c2:	4798      	blx	r3
	if (init_status) {
  4016c4:	4603      	mov	r3, r0
  4016c6:	b918      	cbnz	r0, 4016d0 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  4016c8:	4a05      	ldr	r2, [pc, #20]	; (4016e0 <usart_sync_init+0x40>)
  4016ca:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  4016cc:	4a05      	ldr	r2, [pc, #20]	; (4016e4 <usart_sync_init+0x44>)
  4016ce:	6022      	str	r2, [r4, #0]
}
  4016d0:	4618      	mov	r0, r3
  4016d2:	bd38      	pop	{r3, r4, r5, pc}
  4016d4:	00405d08 	.word	0x00405d08
  4016d8:	00401715 	.word	0x00401715
  4016dc:	00402565 	.word	0x00402565
  4016e0:	00401641 	.word	0x00401641
  4016e4:	004015d1 	.word	0x004015d1

004016e8 <usart_sync_enable>:
{
  4016e8:	b510      	push	{r4, lr}
	ASSERT(descr);
  4016ea:	4604      	mov	r4, r0
  4016ec:	2253      	movs	r2, #83	; 0x53
  4016ee:	4906      	ldr	r1, [pc, #24]	; (401708 <usart_sync_enable+0x20>)
  4016f0:	3000      	adds	r0, #0
  4016f2:	bf18      	it	ne
  4016f4:	2001      	movne	r0, #1
  4016f6:	4b05      	ldr	r3, [pc, #20]	; (40170c <usart_sync_enable+0x24>)
  4016f8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  4016fa:	f104 0008 	add.w	r0, r4, #8
  4016fe:	4b04      	ldr	r3, [pc, #16]	; (401710 <usart_sync_enable+0x28>)
  401700:	4798      	blx	r3
}
  401702:	2000      	movs	r0, #0
  401704:	bd10      	pop	{r4, pc}
  401706:	bf00      	nop
  401708:	00405d08 	.word	0x00405d08
  40170c:	00401715 	.word	0x00401715
  401710:	0040259d 	.word	0x0040259d

00401714 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  401714:	b900      	cbnz	r0, 401718 <assert+0x4>
		__asm("BKPT #0");
  401716:	be00      	bkpt	0x0000
  401718:	4770      	bx	lr

0040171a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  40171a:	6803      	ldr	r3, [r0, #0]
  40171c:	b11b      	cbz	r3, 401726 <is_list_element+0xc>
		if (it == element) {
  40171e:	428b      	cmp	r3, r1
  401720:	d003      	beq.n	40172a <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  401722:	681b      	ldr	r3, [r3, #0]
  401724:	e7fa      	b.n	40171c <is_list_element+0x2>
			return true;
		}
	}

	return false;
  401726:	2000      	movs	r0, #0
  401728:	4770      	bx	lr
			return true;
  40172a:	2001      	movs	r0, #1
}
  40172c:	4770      	bx	lr
	...

00401730 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  401730:	b538      	push	{r3, r4, r5, lr}
  401732:	4604      	mov	r4, r0
  401734:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  401736:	4b06      	ldr	r3, [pc, #24]	; (401750 <list_insert_as_head+0x20>)
  401738:	4798      	blx	r3
  40173a:	f080 0001 	eor.w	r0, r0, #1
  40173e:	2239      	movs	r2, #57	; 0x39
  401740:	4904      	ldr	r1, [pc, #16]	; (401754 <list_insert_as_head+0x24>)
  401742:	b2c0      	uxtb	r0, r0
  401744:	4b04      	ldr	r3, [pc, #16]	; (401758 <list_insert_as_head+0x28>)
  401746:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  401748:	6823      	ldr	r3, [r4, #0]
  40174a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  40174c:	6025      	str	r5, [r4, #0]
  40174e:	bd38      	pop	{r3, r4, r5, pc}
  401750:	0040171b 	.word	0x0040171b
  401754:	00405d24 	.word	0x00405d24
  401758:	00401715 	.word	0x00401715

0040175c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  40175c:	6803      	ldr	r3, [r0, #0]
  40175e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  401760:	6001      	str	r1, [r0, #0]
  401762:	4770      	bx	lr

00401764 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  401764:	6803      	ldr	r3, [r0, #0]
  401766:	b11b      	cbz	r3, 401770 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  401768:	681a      	ldr	r2, [r3, #0]
  40176a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  40176c:	4618      	mov	r0, r3
  40176e:	4770      	bx	lr
	}

	return NULL;
  401770:	2000      	movs	r0, #0
}
  401772:	4770      	bx	lr

00401774 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  401774:	b570      	push	{r4, r5, r6, lr}
  401776:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  401778:	4604      	mov	r4, r0
  40177a:	460e      	mov	r6, r1
  40177c:	2800      	cmp	r0, #0
  40177e:	bf18      	it	ne
  401780:	2900      	cmpne	r1, #0
  401782:	d002      	beq.n	40178a <ringbuffer_init+0x16>
  401784:	b97a      	cbnz	r2, 4017a6 <ringbuffer_init+0x32>
  401786:	2000      	movs	r0, #0
  401788:	e000      	b.n	40178c <ringbuffer_init+0x18>
  40178a:	2000      	movs	r0, #0
  40178c:	2228      	movs	r2, #40	; 0x28
  40178e:	4908      	ldr	r1, [pc, #32]	; (4017b0 <ringbuffer_init+0x3c>)
  401790:	4b08      	ldr	r3, [pc, #32]	; (4017b4 <ringbuffer_init+0x40>)
  401792:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  401794:	1e6b      	subs	r3, r5, #1
  401796:	421d      	tst	r5, r3
  401798:	d107      	bne.n	4017aa <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  40179a:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  40179c:	2000      	movs	r0, #0
  40179e:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  4017a0:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  4017a2:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  4017a4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  4017a6:	2001      	movs	r0, #1
  4017a8:	e7f0      	b.n	40178c <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  4017aa:	f06f 000c 	mvn.w	r0, #12
}
  4017ae:	bd70      	pop	{r4, r5, r6, pc}
  4017b0:	00405d44 	.word	0x00405d44
  4017b4:	00401715 	.word	0x00401715

004017b8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  4017b8:	b538      	push	{r3, r4, r5, lr}
  4017ba:	460d      	mov	r5, r1
	ASSERT(rb);
  4017bc:	4604      	mov	r4, r0
  4017be:	2251      	movs	r2, #81	; 0x51
  4017c0:	490b      	ldr	r1, [pc, #44]	; (4017f0 <ringbuffer_put+0x38>)
  4017c2:	3000      	adds	r0, #0
  4017c4:	bf18      	it	ne
  4017c6:	2001      	movne	r0, #1
  4017c8:	4b0a      	ldr	r3, [pc, #40]	; (4017f4 <ringbuffer_put+0x3c>)
  4017ca:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  4017cc:	6822      	ldr	r2, [r4, #0]
  4017ce:	68e3      	ldr	r3, [r4, #12]
  4017d0:	6861      	ldr	r1, [r4, #4]
  4017d2:	400b      	ands	r3, r1
  4017d4:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  4017d6:	68e3      	ldr	r3, [r4, #12]
  4017d8:	68a2      	ldr	r2, [r4, #8]
  4017da:	1a9a      	subs	r2, r3, r2
  4017dc:	6861      	ldr	r1, [r4, #4]
  4017de:	428a      	cmp	r2, r1
  4017e0:	d901      	bls.n	4017e6 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  4017e2:	1a59      	subs	r1, r3, r1
  4017e4:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  4017e6:	3301      	adds	r3, #1
  4017e8:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  4017ea:	2000      	movs	r0, #0
  4017ec:	bd38      	pop	{r3, r4, r5, pc}
  4017ee:	bf00      	nop
  4017f0:	00405d44 	.word	0x00405d44
  4017f4:	00401715 	.word	0x00401715

004017f8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  4017f8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  4017fa:	4a06      	ldr	r2, [pc, #24]	; (401814 <_sbrk+0x1c>)
  4017fc:	6812      	ldr	r2, [r2, #0]
  4017fe:	b122      	cbz	r2, 40180a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401800:	4a04      	ldr	r2, [pc, #16]	; (401814 <_sbrk+0x1c>)
  401802:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  401804:	4403      	add	r3, r0
  401806:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  401808:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40180a:	4903      	ldr	r1, [pc, #12]	; (401818 <_sbrk+0x20>)
  40180c:	4a01      	ldr	r2, [pc, #4]	; (401814 <_sbrk+0x1c>)
  40180e:	6011      	str	r1, [r2, #0]
  401810:	e7f6      	b.n	401800 <_sbrk+0x8>
  401812:	bf00      	nop
  401814:	2040033c 	.word	0x2040033c
  401818:	20400d90 	.word	0x20400d90

0040181c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  40181c:	f04f 30ff 	mov.w	r0, #4294967295
  401820:	4770      	bx	lr

00401822 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  401822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401826:	604b      	str	r3, [r1, #4]

	return 0;
}
  401828:	2000      	movs	r0, #0
  40182a:	4770      	bx	lr

0040182c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  40182c:	2001      	movs	r0, #1
  40182e:	4770      	bx	lr

00401830 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  401830:	2000      	movs	r0, #0
  401832:	4770      	bx	lr

00401834 <_afec_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _afec_get_irq_num(const struct _adc_async_device *const device)
{
	if (device->hw == AFEC0) {
  401834:	6943      	ldr	r3, [r0, #20]
  401836:	4a07      	ldr	r2, [pc, #28]	; (401854 <_afec_get_irq_num+0x20>)
  401838:	4293      	cmp	r3, r2
  40183a:	d005      	beq.n	401848 <_afec_get_irq_num+0x14>
		return AFEC0_IRQn;
	} else if (device->hw == AFEC1) {
  40183c:	f502 3220 	add.w	r2, r2, #163840	; 0x28000
  401840:	4293      	cmp	r3, r2
  401842:	d103      	bne.n	40184c <_afec_get_irq_num+0x18>
		return AFEC1_IRQn;
  401844:	2028      	movs	r0, #40	; 0x28
  401846:	4770      	bx	lr
		return AFEC0_IRQn;
  401848:	201d      	movs	r0, #29
  40184a:	4770      	bx	lr
	}

	return (IRQn_Type)-1;
  40184c:	f04f 30ff 	mov.w	r0, #4294967295
}
  401850:	4770      	bx	lr
  401852:	bf00      	nop
  401854:	4003c000 	.word	0x4003c000

00401858 <_afec_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _afec_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == AFEC0) {
  401858:	4b06      	ldr	r3, [pc, #24]	; (401874 <_afec_init_irq_param+0x1c>)
  40185a:	4298      	cmp	r0, r3
  40185c:	d003      	beq.n	401866 <_afec_init_irq_param+0xe>
		_afec0_dev = dev;
	}
	if (hw == AFEC1) {
  40185e:	4b06      	ldr	r3, [pc, #24]	; (401878 <_afec_init_irq_param+0x20>)
  401860:	4298      	cmp	r0, r3
  401862:	d003      	beq.n	40186c <_afec_init_irq_param+0x14>
  401864:	4770      	bx	lr
		_afec0_dev = dev;
  401866:	4b05      	ldr	r3, [pc, #20]	; (40187c <_afec_init_irq_param+0x24>)
  401868:	6019      	str	r1, [r3, #0]
  40186a:	e7f8      	b.n	40185e <_afec_init_irq_param+0x6>
		_afec1_dev = dev;
  40186c:	4b03      	ldr	r3, [pc, #12]	; (40187c <_afec_init_irq_param+0x24>)
  40186e:	6059      	str	r1, [r3, #4]
	}
}
  401870:	e7f8      	b.n	401864 <_afec_init_irq_param+0xc>
  401872:	bf00      	nop
  401874:	4003c000 	.word	0x4003c000
  401878:	40064000 	.word	0x40064000
  40187c:	20400340 	.word	0x20400340

00401880 <_afec_init>:
 */
static int32_t _afec_init(void *const hw, const uint8_t i)
{
	uint8_t cnt;

	hri_afec_write_MR_reg(hw, _afecs[i].mr);
  401880:	2364      	movs	r3, #100	; 0x64
  401882:	4a1d      	ldr	r2, [pc, #116]	; (4018f8 <_afec_init+0x78>)
  401884:	fb03 2301 	mla	r3, r3, r1, r2
  401888:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_afec_write_MR_reg(const void *const hw, hri_afec_mr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_MR = data;
  40188a:	6042      	str	r2, [r0, #4]
	hri_afec_write_EMR_reg(hw, _afecs[i].emr);
  40188c:	689a      	ldr	r2, [r3, #8]
}

static inline void hri_afec_write_EMR_reg(const void *const hw, hri_afec_emr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_EMR = data;
  40188e:	6082      	str	r2, [r0, #8]
	hri_afec_write_SEQ1R_reg(hw, _afecs[i].seq1r);
  401890:	68da      	ldr	r2, [r3, #12]
}

static inline void hri_afec_write_SEQ1R_reg(const void *const hw, hri_afec_seq1r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ1R = data;
  401892:	60c2      	str	r2, [r0, #12]
	hri_afec_write_SEQ2R_reg(hw, _afecs[i].seq2r);
  401894:	691a      	ldr	r2, [r3, #16]
}

static inline void hri_afec_write_SEQ2R_reg(const void *const hw, hri_afec_seq2r_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SEQ2R = data;
  401896:	6102      	str	r2, [r0, #16]
	hri_afec_write_CWR_reg(hw, _afecs[i].cwr);
  401898:	695a      	ldr	r2, [r3, #20]
}

static inline void hri_afec_write_CWR_reg(const void *const hw, hri_afec_cwr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CWR = data;
  40189a:	6502      	str	r2, [r0, #80]	; 0x50
	hri_afec_write_CGR_reg(hw, _afecs[i].cgr);
  40189c:	699a      	ldr	r2, [r3, #24]
}

static inline void hri_afec_write_CGR_reg(const void *const hw, hri_afec_cgr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CGR = data;
  40189e:	6542      	str	r2, [r0, #84]	; 0x54
	hri_afec_write_DIFFR_reg(hw, _afecs[i].diffr);
  4018a0:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_afec_write_DIFFR_reg(const void *const hw, hri_afec_diffr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_DIFFR = data;
  4018a2:	6602      	str	r2, [r0, #96]	; 0x60
	hri_afec_write_ACR_reg(hw, _afecs[i].acr);
  4018a4:	6a1a      	ldr	r2, [r3, #32]
}

static inline void hri_afec_write_ACR_reg(const void *const hw, hri_afec_acr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_ACR = data;
  4018a6:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	hri_afec_write_SHMR_reg(hw, _afecs[i].shmr);
  4018aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
}

static inline void hri_afec_write_SHMR_reg(const void *const hw, hri_afec_shmr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_SHMR = data;
  4018ac:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	hri_afec_write_COSR_reg(hw, _afecs[i].cosr);
  4018b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

static inline void hri_afec_write_COSR_reg(const void *const hw, hri_afec_cosr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_COSR = data;
  4018b2:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
	hri_afec_write_CVR_reg(hw, _afecs[i].cvr);
  4018b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_afec_write_CVR_reg(const void *const hw, hri_afec_cvr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CVR = data;
  4018b8:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
	hri_afec_write_CECR_reg(hw, _afecs[i].cecr);
  4018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}

static inline void hri_afec_write_CECR_reg(const void *const hw, hri_afec_cecr_reg_t data)
{
	AFEC_CRITICAL_SECTION_ENTER();
	((Afec *)hw)->AFEC_CECR = data;
  4018be:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  4018c2:	2200      	movs	r2, #0
  4018c4:	2a0b      	cmp	r2, #11
  4018c6:	d814      	bhi.n	4018f2 <_afec_init+0x72>
{
  4018c8:	b410      	push	{r4}
	((Afec *)hw)->AFEC_CSELR = data;
  4018ca:	6642      	str	r2, [r0, #100]	; 0x64
		hri_afec_write_CSELR_reg(hw, cnt);
		hri_afec_write_COCR_reg(hw, _afecs[i].cocr[cnt]);
  4018cc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  4018d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4018d4:	4413      	add	r3, r2
  4018d6:	330c      	adds	r3, #12
  4018d8:	4c07      	ldr	r4, [pc, #28]	; (4018f8 <_afec_init+0x78>)
  4018da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4018de:	685b      	ldr	r3, [r3, #4]
	((Afec *)hw)->AFEC_COCR = data;
  4018e0:	66c3      	str	r3, [r0, #108]	; 0x6c
	for (cnt = 0; cnt < AFEC_CHANNEL_AMOUNT; cnt++) {
  4018e2:	3201      	adds	r2, #1
  4018e4:	b2d2      	uxtb	r2, r2
  4018e6:	2a0b      	cmp	r2, #11
  4018e8:	d9ef      	bls.n	4018ca <_afec_init+0x4a>
	}

	return ERR_NONE;
}
  4018ea:	2000      	movs	r0, #0
  4018ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4018f0:	4770      	bx	lr
  4018f2:	2000      	movs	r0, #0
  4018f4:	4770      	bx	lr
  4018f6:	bf00      	nop
  4018f8:	00405d68 	.word	0x00405d68

004018fc <_afec_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _afec_interrupt_handler(struct _adc_async_device *device)
{
  4018fc:	b530      	push	{r4, r5, lr}
  4018fe:	b083      	sub	sp, #12
  401900:	4605      	mov	r5, r0
	void *const       hw = device->hw;
  401902:	6942      	ldr	r2, [r0, #20]
	return ((Afec *)hw)->AFEC_ISR;
  401904:	6b11      	ldr	r1, [r2, #48]	; 0x30
	return ((Afec *)hw)->AFEC_IMR;
  401906:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	volatile uint32_t status;
	uint8_t           cnt = 0;

	status = hri_afec_read_ISR_reg(hw) & hri_afec_read_IMR_reg(hw);
  401908:	400b      	ands	r3, r1
  40190a:	9301      	str	r3, [sp, #4]
	if (status & AFEC_IMR_COMPE) {
  40190c:	9b01      	ldr	r3, [sp, #4]
  40190e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401912:	d10e      	bne.n	401932 <_afec_interrupt_handler+0x36>
		device->adc_async_cb.window_cb(device, cnt);
	}
	if (status & AFEC_IMR_GOVRE) {
  401914:	9b01      	ldr	r3, [sp, #4]
  401916:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  40191a:	d10e      	bne.n	40193a <_afec_interrupt_handler+0x3e>
		device->adc_async_cb.error_cb(device, cnt);
	}
	status &= 0xFFFu;
  40191c:	9b01      	ldr	r3, [sp, #4]
  40191e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401922:	9301      	str	r3, [sp, #4]
	cnt = 32 - clz(status);
  401924:	9c01      	ldr	r4, [sp, #4]
  401926:	fab4 f484 	clz	r4, r4
  40192a:	f1c4 0420 	rsb	r4, r4, #32
  40192e:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401930:	e01f      	b.n	401972 <_afec_interrupt_handler+0x76>
		device->adc_async_cb.window_cb(device, cnt);
  401932:	6803      	ldr	r3, [r0, #0]
  401934:	2100      	movs	r1, #0
  401936:	4798      	blx	r3
  401938:	e7ec      	b.n	401914 <_afec_interrupt_handler+0x18>
		device->adc_async_cb.error_cb(device, cnt);
  40193a:	686b      	ldr	r3, [r5, #4]
  40193c:	2100      	movs	r1, #0
  40193e:	4628      	mov	r0, r5
  401940:	4798      	blx	r3
  401942:	e7eb      	b.n	40191c <_afec_interrupt_handler+0x20>
		cnt--;
  401944:	3c01      	subs	r4, #1
  401946:	b2e4      	uxtb	r4, r4
		hri_afec_write_CSELR_reg(device->hw, cnt);
  401948:	696b      	ldr	r3, [r5, #20]
	((Afec *)hw)->AFEC_CSELR = data;
  40194a:	665c      	str	r4, [r3, #100]	; 0x64
		device->adc_async_ch_cb.convert_done(device, cnt, hri_afec_read_CDR_reg(device->hw));
  40194c:	68ab      	ldr	r3, [r5, #8]
  40194e:	696a      	ldr	r2, [r5, #20]
	return ((Afec *)hw)->AFEC_CDR;
  401950:	6e92      	ldr	r2, [r2, #104]	; 0x68
  401952:	b292      	uxth	r2, r2
  401954:	4621      	mov	r1, r4
  401956:	4628      	mov	r0, r5
  401958:	4798      	blx	r3
		status &= ~(1 << cnt);
  40195a:	2301      	movs	r3, #1
  40195c:	40a3      	lsls	r3, r4
  40195e:	9c01      	ldr	r4, [sp, #4]
  401960:	ea24 0403 	bic.w	r4, r4, r3
  401964:	9401      	str	r4, [sp, #4]
		cnt = 32 - clz(status);
  401966:	9c01      	ldr	r4, [sp, #4]
  401968:	fab4 f484 	clz	r4, r4
  40196c:	f1c4 0420 	rsb	r4, r4, #32
  401970:	b2e4      	uxtb	r4, r4
	while (cnt) {
  401972:	2c00      	cmp	r4, #0
  401974:	d1e6      	bne.n	401944 <_afec_interrupt_handler+0x48>
	}
}
  401976:	b003      	add	sp, #12
  401978:	bd30      	pop	{r4, r5, pc}
	...

0040197c <_afec_get_hardware_index>:
{
  40197c:	b508      	push	{r3, lr}
	if (hw == AFEC0) {
  40197e:	4b09      	ldr	r3, [pc, #36]	; (4019a4 <_afec_get_hardware_index+0x28>)
  401980:	4298      	cmp	r0, r3
  401982:	d00a      	beq.n	40199a <_afec_get_hardware_index+0x1e>
	} else if (hw == AFEC1) {
  401984:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  401988:	4298      	cmp	r0, r3
  40198a:	d008      	beq.n	40199e <_afec_get_hardware_index+0x22>
	ASSERT(false);
  40198c:	22a7      	movs	r2, #167	; 0xa7
  40198e:	4906      	ldr	r1, [pc, #24]	; (4019a8 <_afec_get_hardware_index+0x2c>)
  401990:	2000      	movs	r0, #0
  401992:	4b06      	ldr	r3, [pc, #24]	; (4019ac <_afec_get_hardware_index+0x30>)
  401994:	4798      	blx	r3
	return 0;
  401996:	2000      	movs	r0, #0
  401998:	bd08      	pop	{r3, pc}
		return 0;
  40199a:	2000      	movs	r0, #0
  40199c:	bd08      	pop	{r3, pc}
		return 1;
  40199e:	2001      	movs	r0, #1
}
  4019a0:	bd08      	pop	{r3, pc}
  4019a2:	bf00      	nop
  4019a4:	4003c000 	.word	0x4003c000
  4019a8:	00405e30 	.word	0x00405e30
  4019ac:	00401715 	.word	0x00401715

004019b0 <_afec_get_regs>:
{
  4019b0:	b508      	push	{r3, lr}
	uint8_t n = _afec_get_hardware_index((const void *)hw_addr);
  4019b2:	4b09      	ldr	r3, [pc, #36]	; (4019d8 <_afec_get_regs+0x28>)
  4019b4:	4798      	blx	r3
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  4019b6:	2300      	movs	r3, #0
  4019b8:	2b01      	cmp	r3, #1
  4019ba:	d809      	bhi.n	4019d0 <_afec_get_regs+0x20>
		if (_afecs[i].number == n) {
  4019bc:	2264      	movs	r2, #100	; 0x64
  4019be:	fb02 f203 	mul.w	r2, r2, r3
  4019c2:	4906      	ldr	r1, [pc, #24]	; (4019dc <_afec_get_regs+0x2c>)
  4019c4:	5c8a      	ldrb	r2, [r1, r2]
  4019c6:	4290      	cmp	r0, r2
  4019c8:	d003      	beq.n	4019d2 <_afec_get_regs+0x22>
	for (i = 0; i < sizeof(_afecs) / sizeof(struct afec_configuration); i++) {
  4019ca:	3301      	adds	r3, #1
  4019cc:	b2db      	uxtb	r3, r3
  4019ce:	e7f3      	b.n	4019b8 <_afec_get_regs+0x8>
	return 0;
  4019d0:	2300      	movs	r3, #0
}
  4019d2:	4618      	mov	r0, r3
  4019d4:	bd08      	pop	{r3, pc}
  4019d6:	bf00      	nop
  4019d8:	0040197d 	.word	0x0040197d
  4019dc:	00405d68 	.word	0x00405d68

004019e0 <AFEC0_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC0_Handler(void)
{
  4019e0:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec0_dev);
  4019e2:	4b02      	ldr	r3, [pc, #8]	; (4019ec <AFEC0_Handler+0xc>)
  4019e4:	6818      	ldr	r0, [r3, #0]
  4019e6:	4b02      	ldr	r3, [pc, #8]	; (4019f0 <AFEC0_Handler+0x10>)
  4019e8:	4798      	blx	r3
  4019ea:	bd08      	pop	{r3, pc}
  4019ec:	20400340 	.word	0x20400340
  4019f0:	004018fd 	.word	0x004018fd

004019f4 <AFEC1_Handler>:

/**
 * \internal ADC interrupt handler
 */
void AFEC1_Handler(void)
{
  4019f4:	b508      	push	{r3, lr}
	_afec_interrupt_handler(_afec1_dev);
  4019f6:	4b02      	ldr	r3, [pc, #8]	; (401a00 <AFEC1_Handler+0xc>)
  4019f8:	6858      	ldr	r0, [r3, #4]
  4019fa:	4b02      	ldr	r3, [pc, #8]	; (401a04 <AFEC1_Handler+0x10>)
  4019fc:	4798      	blx	r3
  4019fe:	bd08      	pop	{r3, pc}
  401a00:	20400340 	.word	0x20400340
  401a04:	004018fd 	.word	0x004018fd

00401a08 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
  401a08:	b570      	push	{r4, r5, r6, lr}
  401a0a:	460c      	mov	r4, r1
	int32_t init_status;

	ASSERT(device);
  401a0c:	4605      	mov	r5, r0
  401a0e:	f44f 72a1 	mov.w	r2, #322	; 0x142
  401a12:	4923      	ldr	r1, [pc, #140]	; (401aa0 <_adc_async_init+0x98>)
  401a14:	3000      	adds	r0, #0
  401a16:	bf18      	it	ne
  401a18:	2001      	movne	r0, #1
  401a1a:	4b22      	ldr	r3, [pc, #136]	; (401aa4 <_adc_async_init+0x9c>)
  401a1c:	4798      	blx	r3

	init_status = _afec_init(hw, _afec_get_regs((uint32_t)hw));
  401a1e:	4620      	mov	r0, r4
  401a20:	4b21      	ldr	r3, [pc, #132]	; (401aa8 <_adc_async_init+0xa0>)
  401a22:	4798      	blx	r3
  401a24:	4601      	mov	r1, r0
  401a26:	4620      	mov	r0, r4
  401a28:	4b20      	ldr	r3, [pc, #128]	; (401aac <_adc_async_init+0xa4>)
  401a2a:	4798      	blx	r3
	if (init_status) {
  401a2c:	4606      	mov	r6, r0
  401a2e:	b108      	cbz	r0, 401a34 <_adc_async_init+0x2c>
	NVIC_DisableIRQ(_afec_get_irq_num(device));
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
	NVIC_EnableIRQ(_afec_get_irq_num(device));

	return ERR_NONE;
}
  401a30:	4630      	mov	r0, r6
  401a32:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  401a34:	616c      	str	r4, [r5, #20]
	_afec_init_irq_param(hw, device);
  401a36:	4629      	mov	r1, r5
  401a38:	4620      	mov	r0, r4
  401a3a:	4b1d      	ldr	r3, [pc, #116]	; (401ab0 <_adc_async_init+0xa8>)
  401a3c:	4798      	blx	r3
	NVIC_DisableIRQ(_afec_get_irq_num(device));
  401a3e:	4628      	mov	r0, r5
  401a40:	4b1c      	ldr	r3, [pc, #112]	; (401ab4 <_adc_async_init+0xac>)
  401a42:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401a44:	2800      	cmp	r0, #0
  401a46:	db0d      	blt.n	401a64 <_adc_async_init+0x5c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a48:	0943      	lsrs	r3, r0, #5
  401a4a:	f000 001f 	and.w	r0, r0, #31
  401a4e:	2201      	movs	r2, #1
  401a50:	fa02 f000 	lsl.w	r0, r2, r0
  401a54:	3320      	adds	r3, #32
  401a56:	4a18      	ldr	r2, [pc, #96]	; (401ab8 <_adc_async_init+0xb0>)
  401a58:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401a5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401a60:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_afec_get_irq_num(device));
  401a64:	4628      	mov	r0, r5
  401a66:	4b13      	ldr	r3, [pc, #76]	; (401ab4 <_adc_async_init+0xac>)
  401a68:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401a6a:	2800      	cmp	r0, #0
  401a6c:	db09      	blt.n	401a82 <_adc_async_init+0x7a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a6e:	0943      	lsrs	r3, r0, #5
  401a70:	f000 001f 	and.w	r0, r0, #31
  401a74:	2201      	movs	r2, #1
  401a76:	fa02 f000 	lsl.w	r0, r2, r0
  401a7a:	3360      	adds	r3, #96	; 0x60
  401a7c:	4a0e      	ldr	r2, [pc, #56]	; (401ab8 <_adc_async_init+0xb0>)
  401a7e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_afec_get_irq_num(device));
  401a82:	4628      	mov	r0, r5
  401a84:	4b0b      	ldr	r3, [pc, #44]	; (401ab4 <_adc_async_init+0xac>)
  401a86:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
  401a88:	2800      	cmp	r0, #0
  401a8a:	dbd1      	blt.n	401a30 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401a8c:	0942      	lsrs	r2, r0, #5
  401a8e:	f000 001f 	and.w	r0, r0, #31
  401a92:	2301      	movs	r3, #1
  401a94:	fa03 f000 	lsl.w	r0, r3, r0
  401a98:	4b07      	ldr	r3, [pc, #28]	; (401ab8 <_adc_async_init+0xb0>)
  401a9a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  401a9e:	e7c7      	b.n	401a30 <_adc_async_init+0x28>
  401aa0:	00405e30 	.word	0x00405e30
  401aa4:	00401715 	.word	0x00401715
  401aa8:	004019b1 	.word	0x004019b1
  401aac:	00401881 	.word	0x00401881
  401ab0:	00401859 	.word	0x00401859
  401ab4:	00401835 	.word	0x00401835
  401ab8:	e000e100 	.word	0xe000e100

00401abc <_adc_async_enable_channel>:
/**
 * \brief Enable ADC
 */
void _adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel)
{
	hri_afec_set_CHSR_reg(device->hw, (1 << channel));
  401abc:	6942      	ldr	r2, [r0, #20]
  401abe:	2301      	movs	r3, #1
  401ac0:	fa03 f101 	lsl.w	r1, r3, r1
	((Afec *)hw)->AFEC_CHER = mask;
  401ac4:	6151      	str	r1, [r2, #20]
  401ac6:	4770      	bx	lr

00401ac8 <_adc_async_get_data_size>:
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	(void)device;

	return 2;
}
  401ac8:	2002      	movs	r0, #2
  401aca:	4770      	bx	lr

00401acc <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  401acc:	f44f 7396 	mov.w	r3, #300	; 0x12c
  401ad0:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  401ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401ad8:	fb03 f000 	mul.w	r0, r3, r0
  401adc:	4770      	bx	lr
	...

00401ae0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  401ae0:	b500      	push	{lr}
  401ae2:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  401ae4:	a801      	add	r0, sp, #4
  401ae6:	4b14      	ldr	r3, [pc, #80]	; (401b38 <_init_chip+0x58>)
  401ae8:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  401aea:	4a14      	ldr	r2, [pc, #80]	; (401b3c <_init_chip+0x5c>)
  401aec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  401af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  401af8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401afc:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  401b00:	a801      	add	r0, sp, #4
  401b02:	4b0f      	ldr	r3, [pc, #60]	; (401b40 <_init_chip+0x60>)
  401b04:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  401b06:	4a0f      	ldr	r2, [pc, #60]	; (401b44 <_init_chip+0x64>)
  401b08:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  401b0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  401b0e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  401b12:	6013      	str	r3, [r2, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  401b14:	4b0c      	ldr	r3, [pc, #48]	; (401b48 <_init_chip+0x68>)
  401b16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  401b1a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
  401b1e:	d104      	bne.n	401b2a <_init_chip+0x4a>
	((Pmc *)hw)->PMC_PCER1 = mask;
  401b20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401b24:	4b08      	ldr	r3, [pc, #32]	; (401b48 <_init_chip+0x68>)
  401b26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	_fpu_enable();
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
  401b2a:	4b08      	ldr	r3, [pc, #32]	; (401b4c <_init_chip+0x6c>)
  401b2c:	4798      	blx	r3

#endif
	_pmc_init();
  401b2e:	4b08      	ldr	r3, [pc, #32]	; (401b50 <_init_chip+0x70>)
  401b30:	4798      	blx	r3
}
  401b32:	b003      	add	sp, #12
  401b34:	f85d fb04 	ldr.w	pc, [sp], #4
  401b38:	0040119d 	.word	0x0040119d
  401b3c:	e000ed00 	.word	0xe000ed00
  401b40:	004011ab 	.word	0x004011ab
  401b44:	400e0c00 	.word	0x400e0c00
  401b48:	400e0600 	.word	0x400e0600
  401b4c:	00402695 	.word	0x00402695
  401b50:	00401f69 	.word	0x00401f69

00401b54 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  401b54:	b538      	push	{r3, r4, r5, lr}
  401b56:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  401b58:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  401b5a:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  401b5c:	f014 0f01 	tst.w	r4, #1
  401b60:	d11a      	bne.n	401b98 <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  401b62:	f414 7f00 	tst.w	r4, #512	; 0x200
  401b66:	d11a      	bne.n	401b9e <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  401b68:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  401b6c:	d11b      	bne.n	401ba6 <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  401b6e:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  401b72:	d11d      	bne.n	401bb0 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  401b74:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  401b78:	d008      	beq.n	401b8c <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401b7a:	68eb      	ldr	r3, [r5, #12]
  401b7c:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  401b7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
  401b80:	f012 0f20 	tst.w	r2, #32
  401b84:	d019      	beq.n	401bba <_can_irq_handler+0x66>
  401b86:	2102      	movs	r1, #2
  401b88:	4628      	mov	r0, r5
  401b8a:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  401b8c:	f014 0f08 	tst.w	r4, #8
  401b90:	d115      	bne.n	401bbe <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  401b92:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  401b94:	651c      	str	r4, [r3, #80]	; 0x50
  401b96:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  401b98:	6883      	ldr	r3, [r0, #8]
  401b9a:	4798      	blx	r3
  401b9c:	e7e1      	b.n	401b62 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  401b9e:	686b      	ldr	r3, [r5, #4]
  401ba0:	4628      	mov	r0, r5
  401ba2:	4798      	blx	r3
  401ba4:	e7e0      	b.n	401b68 <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  401ba6:	68eb      	ldr	r3, [r5, #12]
  401ba8:	2103      	movs	r1, #3
  401baa:	4628      	mov	r0, r5
  401bac:	4798      	blx	r3
  401bae:	e7de      	b.n	401b6e <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  401bb0:	68eb      	ldr	r3, [r5, #12]
  401bb2:	2100      	movs	r1, #0
  401bb4:	4628      	mov	r0, r5
  401bb6:	4798      	blx	r3
  401bb8:	e7dc      	b.n	401b74 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  401bba:	2101      	movs	r1, #1
  401bbc:	e7e4      	b.n	401b88 <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  401bbe:	68eb      	ldr	r3, [r5, #12]
  401bc0:	2104      	movs	r1, #4
  401bc2:	4628      	mov	r0, r5
  401bc4:	4798      	blx	r3
  401bc6:	e7e4      	b.n	401b92 <_can_irq_handler+0x3e>

00401bc8 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  401bc8:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  401bca:	4b02      	ldr	r3, [pc, #8]	; (401bd4 <MCAN1_INT0_Handler+0xc>)
  401bcc:	6a98      	ldr	r0, [r3, #40]	; 0x28
  401bce:	4b02      	ldr	r3, [pc, #8]	; (401bd8 <MCAN1_INT0_Handler+0x10>)
  401bd0:	4798      	blx	r3
  401bd2:	bd08      	pop	{r3, pc}
  401bd4:	20400348 	.word	0x20400348
  401bd8:	00401b55 	.word	0x00401b55

00401bdc <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401bdc:	b430      	push	{r4, r5}
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  401bde:	2500      	movs	r5, #0
  401be0:	428d      	cmp	r5, r1
  401be2:	d210      	bcs.n	401c06 <_ffs+0x2a>
  401be4:	2201      	movs	r2, #1
  401be6:	2300      	movs	r3, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401be8:	2b1f      	cmp	r3, #31
  401bea:	d80a      	bhi.n	401c02 <_ffs+0x26>
			if (v[i] & bit) {
  401bec:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  401bf0:	4222      	tst	r2, r4
  401bf2:	d102      	bne.n	401bfa <_ffs+0x1e>
				return i * 32 + j;
			}
			bit <<= 1;
  401bf4:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401bf6:	3301      	adds	r3, #1
  401bf8:	e7f6      	b.n	401be8 <_ffs+0xc>
				return i * 32 + j;
  401bfa:	eb03 1045 	add.w	r0, r3, r5, lsl #5
		}
	}

	return -1;
}
  401bfe:	bc30      	pop	{r4, r5}
  401c00:	4770      	bx	lr
	for (i = 0; i < len; i++) {
  401c02:	3501      	adds	r5, #1
  401c04:	e7ec      	b.n	401be0 <_ffs+0x4>
	return -1;
  401c06:	f04f 30ff 	mov.w	r0, #4294967295
  401c0a:	e7f8      	b.n	401bfe <_ffs+0x22>

00401c0c <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401c0c:	b510      	push	{r4, lr}
  401c0e:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  401c10:	2300      	movs	r3, #0
  401c12:	9301      	str	r3, [sp, #4]
  401c14:	9302      	str	r3, [sp, #8]
  401c16:	9303      	str	r3, [sp, #12]
  401c18:	9304      	str	r3, [sp, #16]
  401c1a:	9305      	str	r3, [sp, #20]
	                             0,
	                         };
	int pos;

	ASSERT(callback);
  401c1c:	4b28      	ldr	r3, [pc, #160]	; (401cc0 <_ext_irq_handler+0xb4>)
  401c1e:	6818      	ldr	r0, [r3, #0]
  401c20:	22f8      	movs	r2, #248	; 0xf8
  401c22:	4928      	ldr	r1, [pc, #160]	; (401cc4 <_ext_irq_handler+0xb8>)
  401c24:	3000      	adds	r0, #0
  401c26:	bf18      	it	ne
  401c28:	2001      	movne	r0, #1
  401c2a:	4b27      	ldr	r3, [pc, #156]	; (401cc8 <_ext_irq_handler+0xbc>)
  401c2c:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  401c2e:	4b27      	ldr	r3, [pc, #156]	; (401ccc <_ext_irq_handler+0xc0>)
  401c30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	flags[0] = hri_pio_read_ISR_reg(PIOA);
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401c34:	4013      	ands	r3, r2
  401c36:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401c38:	4a25      	ldr	r2, [pc, #148]	; (401cd0 <_ext_irq_handler+0xc4>)
  401c3a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401c3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401c3e:	400a      	ands	r2, r1
  401c40:	9202      	str	r2, [sp, #8]
	flag_total |= flags[1];
  401c42:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  401c44:	4923      	ldr	r1, [pc, #140]	; (401cd4 <_ext_irq_handler+0xc8>)
  401c46:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401c48:	6c89      	ldr	r1, [r1, #72]	; 0x48
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401c4a:	400a      	ands	r2, r1
  401c4c:	9204      	str	r2, [sp, #16]
	flag_total |= flags[3];
  401c4e:	4313      	orrs	r3, r2
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  401c50:	e02c      	b.n	401cac <_ext_irq_handler+0xa0>
		pos = _ffs(flags, 5);
		while (-1 != pos) {
			callback(pos);
  401c52:	4b1b      	ldr	r3, [pc, #108]	; (401cc0 <_ext_irq_handler+0xb4>)
  401c54:	681b      	ldr	r3, [r3, #0]
  401c56:	4620      	mov	r0, r4
  401c58:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  401c5a:	1163      	asrs	r3, r4, #5
  401c5c:	f004 041f 	and.w	r4, r4, #31
  401c60:	2201      	movs	r2, #1
  401c62:	fa02 f404 	lsl.w	r4, r2, r4
  401c66:	aa06      	add	r2, sp, #24
  401c68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401c6c:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401c70:	ea22 0204 	bic.w	r2, r2, r4
  401c74:	f843 2c14 	str.w	r2, [r3, #-20]
			pos = _ffs(flags, 5);
  401c78:	2105      	movs	r1, #5
  401c7a:	a801      	add	r0, sp, #4
  401c7c:	4b16      	ldr	r3, [pc, #88]	; (401cd8 <_ext_irq_handler+0xcc>)
  401c7e:	4798      	blx	r3
  401c80:	4604      	mov	r4, r0
		while (-1 != pos) {
  401c82:	f1b4 3fff 	cmp.w	r4, #4294967295
  401c86:	d1e4      	bne.n	401c52 <_ext_irq_handler+0x46>
	return ((Pio *)hw)->PIO_ISR;
  401c88:	4a10      	ldr	r2, [pc, #64]	; (401ccc <_ext_irq_handler+0xc0>)
  401c8a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401c8c:	6c93      	ldr	r3, [r2, #72]	; 0x48
		}
		flag_total = 0;

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
		flags[0] = hri_pio_read_ISR_reg(PIOA);
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
  401c8e:	400b      	ands	r3, r1
  401c90:	9301      	str	r3, [sp, #4]
	return ((Pio *)hw)->PIO_ISR;
  401c92:	490f      	ldr	r1, [pc, #60]	; (401cd0 <_ext_irq_handler+0xc4>)
  401c94:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401c96:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401c98:	4002      	ands	r2, r0
  401c9a:	9202      	str	r2, [sp, #8]
		flag_total |= flags[1];
  401c9c:	4313      	orrs	r3, r2
	return ((Pio *)hw)->PIO_ISR;
  401c9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  401ca2:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401ca4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  401ca6:	4002      	ands	r2, r0
  401ca8:	9204      	str	r2, [sp, #16]
		flag_total |= flags[3];
  401caa:	4313      	orrs	r3, r2
	while (flag_total) {
  401cac:	b12b      	cbz	r3, 401cba <_ext_irq_handler+0xae>
		pos = _ffs(flags, 5);
  401cae:	2105      	movs	r1, #5
  401cb0:	a801      	add	r0, sp, #4
  401cb2:	4b09      	ldr	r3, [pc, #36]	; (401cd8 <_ext_irq_handler+0xcc>)
  401cb4:	4798      	blx	r3
  401cb6:	4604      	mov	r4, r0
		while (-1 != pos) {
  401cb8:	e7e3      	b.n	401c82 <_ext_irq_handler+0x76>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  401cba:	b006      	add	sp, #24
  401cbc:	bd10      	pop	{r4, pc}
  401cbe:	bf00      	nop
  401cc0:	20400374 	.word	0x20400374
  401cc4:	00405ea4 	.word	0x00405ea4
  401cc8:	00401715 	.word	0x00401715
  401ccc:	400e0e00 	.word	0x400e0e00
  401cd0:	400e1000 	.word	0x400e1000
  401cd4:	400e1400 	.word	0x400e1400
  401cd8:	00401bdd 	.word	0x00401bdd

00401cdc <_pio_get_hardware_index>:
{
  401cdc:	b510      	push	{r4, lr}
	ASSERT(hw);
  401cde:	4604      	mov	r4, r0
  401ce0:	22d2      	movs	r2, #210	; 0xd2
  401ce2:	4905      	ldr	r1, [pc, #20]	; (401cf8 <_pio_get_hardware_index+0x1c>)
  401ce4:	3000      	adds	r0, #0
  401ce6:	bf18      	it	ne
  401ce8:	2001      	movne	r0, #1
  401cea:	4b04      	ldr	r3, [pc, #16]	; (401cfc <_pio_get_hardware_index+0x20>)
  401cec:	4798      	blx	r3
	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  401cee:	4804      	ldr	r0, [pc, #16]	; (401d00 <_pio_get_hardware_index+0x24>)
  401cf0:	4420      	add	r0, r4
}
  401cf2:	f3c0 2047 	ubfx	r0, r0, #9, #8
  401cf6:	bd10      	pop	{r4, pc}
  401cf8:	00405ea4 	.word	0x00405ea4
  401cfc:	00401715 	.word	0x00401715
  401d00:	bff1f200 	.word	0xbff1f200

00401d04 <_pio_get_index>:
{
  401d04:	b510      	push	{r4, lr}
	ASSERT(hw);
  401d06:	4604      	mov	r4, r0
  401d08:	22e0      	movs	r2, #224	; 0xe0
  401d0a:	490d      	ldr	r1, [pc, #52]	; (401d40 <_pio_get_index+0x3c>)
  401d0c:	3000      	adds	r0, #0
  401d0e:	bf18      	it	ne
  401d10:	2001      	movne	r0, #1
  401d12:	4b0c      	ldr	r3, [pc, #48]	; (401d44 <_pio_get_index+0x40>)
  401d14:	4798      	blx	r3
	uint8_t offset = _pio_get_hardware_index(hw);
  401d16:	4620      	mov	r0, r4
  401d18:	4b0b      	ldr	r3, [pc, #44]	; (401d48 <_pio_get_index+0x44>)
  401d1a:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401d1c:	2300      	movs	r3, #0
  401d1e:	2b02      	cmp	r3, #2
  401d20:	d80b      	bhi.n	401d3a <_pio_get_index+0x36>
		if (_ext_irq[i].number == offset) {
  401d22:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  401d26:	008a      	lsls	r2, r1, #2
  401d28:	4908      	ldr	r1, [pc, #32]	; (401d4c <_pio_get_index+0x48>)
  401d2a:	5c8a      	ldrb	r2, [r1, r2]
  401d2c:	4290      	cmp	r0, r2
  401d2e:	d002      	beq.n	401d36 <_pio_get_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401d30:	3301      	adds	r3, #1
  401d32:	b2db      	uxtb	r3, r3
  401d34:	e7f3      	b.n	401d1e <_pio_get_index+0x1a>
			return i;
  401d36:	b258      	sxtb	r0, r3
  401d38:	bd10      	pop	{r4, pc}
	return ERR_INVALID_DATA;
  401d3a:	f04f 30ff 	mov.w	r0, #4294967295
}
  401d3e:	bd10      	pop	{r4, pc}
  401d40:	00405ea4 	.word	0x00405ea4
  401d44:	00401715 	.word	0x00401715
  401d48:	00401cdd 	.word	0x00401cdd
  401d4c:	00405e48 	.word	0x00405e48

00401d50 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  401d50:	b538      	push	{r3, r4, r5, lr}
	int8_t i;

	ASSERT(hw);
  401d52:	4604      	mov	r4, r0
  401d54:	f44f 72af 	mov.w	r2, #350	; 0x15e
  401d58:	4929      	ldr	r1, [pc, #164]	; (401e00 <_pio_init+0xb0>)
  401d5a:	3000      	adds	r0, #0
  401d5c:	bf18      	it	ne
  401d5e:	2001      	movne	r0, #1
  401d60:	4b28      	ldr	r3, [pc, #160]	; (401e04 <_pio_init+0xb4>)
  401d62:	4798      	blx	r3

	i = _pio_get_index(hw);
  401d64:	4620      	mov	r0, r4
  401d66:	4b28      	ldr	r3, [pc, #160]	; (401e08 <_pio_init+0xb8>)
  401d68:	4798      	blx	r3
	if (i < 0) {
  401d6a:	2800      	cmp	r0, #0
  401d6c:	db43      	blt.n	401df6 <_pio_init+0xa6>
		return ERR_DENIED;
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  401d6e:	4d27      	ldr	r5, [pc, #156]	; (401e0c <_pio_init+0xbc>)
  401d70:	00c2      	lsls	r2, r0, #3
  401d72:	1a11      	subs	r1, r2, r0
  401d74:	008b      	lsls	r3, r1, #2
  401d76:	442b      	add	r3, r5
  401d78:	6899      	ldr	r1, [r3, #8]
	((Pio *)hw)->PIO_AIMER = mask;
  401d7a:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  401d7e:	68d9      	ldr	r1, [r3, #12]
	((Pio *)hw)->PIO_ESR = mask;
  401d80:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  401d84:	6919      	ldr	r1, [r3, #16]
	((Pio *)hw)->PIO_LSR = mask;
  401d86:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  401d8a:	699b      	ldr	r3, [r3, #24]
	((Pio *)hw)->PIO_FELLSR = mask;
  401d8c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  401d90:	1a10      	subs	r0, r2, r0
  401d92:	0083      	lsls	r3, r0, #2
  401d94:	442b      	add	r3, r5
  401d96:	695b      	ldr	r3, [r3, #20]
	((Pio *)hw)->PIO_REHLSR = mask;
  401d98:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  401d9c:	4620      	mov	r0, r4
  401d9e:	4b1c      	ldr	r3, [pc, #112]	; (401e10 <_pio_init+0xc0>)
  401da0:	4798      	blx	r3
  401da2:	4428      	add	r0, r5
  401da4:	f990 3054 	ldrsb.w	r3, [r0, #84]	; 0x54
  if ((int32_t)(IRQn) >= 0)
  401da8:	2b00      	cmp	r3, #0
  401daa:	db0c      	blt.n	401dc6 <_pio_init+0x76>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401dac:	095a      	lsrs	r2, r3, #5
  401dae:	f003 001f 	and.w	r0, r3, #31
  401db2:	2101      	movs	r1, #1
  401db4:	4081      	lsls	r1, r0
  401db6:	3220      	adds	r2, #32
  401db8:	4816      	ldr	r0, [pc, #88]	; (401e14 <_pio_init+0xc4>)
  401dba:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401dbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401dc2:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
  401dc6:	2b00      	cmp	r3, #0
  401dc8:	db08      	blt.n	401ddc <_pio_init+0x8c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401dca:	095a      	lsrs	r2, r3, #5
  401dcc:	f003 001f 	and.w	r0, r3, #31
  401dd0:	2101      	movs	r1, #1
  401dd2:	4081      	lsls	r1, r0
  401dd4:	3260      	adds	r2, #96	; 0x60
  401dd6:	480f      	ldr	r0, [pc, #60]	; (401e14 <_pio_init+0xc4>)
  401dd8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
  401ddc:	2b00      	cmp	r3, #0
  401dde:	db0d      	blt.n	401dfc <_pio_init+0xac>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401de0:	0959      	lsrs	r1, r3, #5
  401de2:	f003 031f 	and.w	r3, r3, #31
  401de6:	2201      	movs	r2, #1
  401de8:	fa02 f303 	lsl.w	r3, r2, r3
  401dec:	4a09      	ldr	r2, [pc, #36]	; (401e14 <_pio_init+0xc4>)
  401dee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	NVIC_DisableIRQ((IRQn_Type)i);
	NVIC_ClearPendingIRQ((IRQn_Type)i);
	NVIC_EnableIRQ((IRQn_Type)i);

	return ERR_NONE;
  401df2:	2000      	movs	r0, #0
  401df4:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
  401df6:	f06f 0010 	mvn.w	r0, #16
  401dfa:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NONE;
  401dfc:	2000      	movs	r0, #0
}
  401dfe:	bd38      	pop	{r3, r4, r5, pc}
  401e00:	00405ea4 	.word	0x00405ea4
  401e04:	00401715 	.word	0x00401715
  401e08:	00401d05 	.word	0x00401d05
  401e0c:	00405e48 	.word	0x00405e48
  401e10:	00401cdd 	.word	0x00401cdd
  401e14:	e000e100 	.word	0xe000e100

00401e18 <PIOD_Handler>:
{
  401e18:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401e1a:	4b01      	ldr	r3, [pc, #4]	; (401e20 <PIOD_Handler+0x8>)
  401e1c:	4798      	blx	r3
  401e1e:	bd08      	pop	{r3, pc}
  401e20:	00401c0d 	.word	0x00401c0d

00401e24 <PIOA_Handler>:
{
  401e24:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401e26:	4b01      	ldr	r3, [pc, #4]	; (401e2c <PIOA_Handler+0x8>)
  401e28:	4798      	blx	r3
  401e2a:	bd08      	pop	{r3, pc}
  401e2c:	00401c0d 	.word	0x00401c0d

00401e30 <PIOB_Handler>:
{
  401e30:	b508      	push	{r3, lr}
	_ext_irq_handler();
  401e32:	4b01      	ldr	r3, [pc, #4]	; (401e38 <PIOB_Handler+0x8>)
  401e34:	4798      	blx	r3
  401e36:	bd08      	pop	{r3, pc}
  401e38:	00401c0d 	.word	0x00401c0d

00401e3c <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401e3c:	b538      	push	{r3, r4, r5, lr}
  401e3e:	4605      	mov	r5, r0

#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
  401e40:	4805      	ldr	r0, [pc, #20]	; (401e58 <_ext_irq_init+0x1c>)
  401e42:	4c06      	ldr	r4, [pc, #24]	; (401e5c <_ext_irq_init+0x20>)
  401e44:	47a0      	blx	r4
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  401e46:	4806      	ldr	r0, [pc, #24]	; (401e60 <_ext_irq_init+0x24>)
  401e48:	47a0      	blx	r4
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  401e4a:	4806      	ldr	r0, [pc, #24]	; (401e64 <_ext_irq_init+0x28>)
  401e4c:	47a0      	blx	r4

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  401e4e:	4b06      	ldr	r3, [pc, #24]	; (401e68 <_ext_irq_init+0x2c>)
  401e50:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
  401e52:	2000      	movs	r0, #0
  401e54:	bd38      	pop	{r3, r4, r5, pc}
  401e56:	bf00      	nop
  401e58:	400e0e00 	.word	0x400e0e00
  401e5c:	00401d51 	.word	0x00401d51
  401e60:	400e1000 	.word	0x400e1000
  401e64:	400e1400 	.word	0x400e1400
  401e68:	20400374 	.word	0x20400374

00401e6c <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  401e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e70:	4604      	mov	r4, r0
  401e72:	460f      	mov	r7, r1
	void *   hw   = PIOA;
	uint32_t temp = 0;

	ASSERT(pin < 160);
  401e74:	f8df 8050 	ldr.w	r8, [pc, #80]	; 401ec8 <_ext_irq_enable+0x5c>
  401e78:	f240 12ab 	movw	r2, #427	; 0x1ab
  401e7c:	4641      	mov	r1, r8
  401e7e:	289f      	cmp	r0, #159	; 0x9f
  401e80:	bf8c      	ite	hi
  401e82:	2000      	movhi	r0, #0
  401e84:	2001      	movls	r0, #1
  401e86:	4e0e      	ldr	r6, [pc, #56]	; (401ec0 <_ext_irq_enable+0x54>)
  401e88:	47b0      	blx	r6

	hw   = _get_hardware_instance(pin);
  401e8a:	b2e5      	uxtb	r5, r4
	ASSERT(pin < 160);
  401e8c:	22c3      	movs	r2, #195	; 0xc3
  401e8e:	4641      	mov	r1, r8
  401e90:	2d9f      	cmp	r5, #159	; 0x9f
  401e92:	bf8c      	ite	hi
  401e94:	2000      	movhi	r0, #0
  401e96:	2001      	movls	r0, #1
  401e98:	47b0      	blx	r6
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  401e9a:	096d      	lsrs	r5, r5, #5
  401e9c:	4b09      	ldr	r3, [pc, #36]	; (401ec4 <_ext_irq_enable+0x58>)
  401e9e:	eb03 2545 	add.w	r5, r3, r5, lsl #9
	temp = pin & 31;
  401ea2:	f004 041f 	and.w	r4, r4, #31

	if (enable) {
  401ea6:	b937      	cbnz	r7, 401eb6 <_ext_irq_enable+0x4a>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  401ea8:	2301      	movs	r3, #1
  401eaa:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IDR = mask;
  401eae:	646c      	str	r4, [r5, #68]	; 0x44
	}

	return ERR_NONE;
}
  401eb0:	2000      	movs	r0, #0
  401eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  401eb6:	2301      	movs	r3, #1
  401eb8:	fa03 f404 	lsl.w	r4, r3, r4
	((Pio *)hw)->PIO_IER = mask;
  401ebc:	642c      	str	r4, [r5, #64]	; 0x40
  401ebe:	e7f7      	b.n	401eb0 <_ext_irq_enable+0x44>
  401ec0:	00401715 	.word	0x00401715
  401ec4:	400e0e00 	.word	0x400e0e00
  401ec8:	00405ea4 	.word	0x00405ea4

00401ecc <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  401ecc:	490e      	ldr	r1, [pc, #56]	; (401f08 <_pmc_init_sources+0x3c>)
  401ece:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  401ed0:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  401ed4:	4b0d      	ldr	r3, [pc, #52]	; (401f0c <_pmc_init_sources+0x40>)
  401ed6:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  401ed8:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  401eda:	4b0b      	ldr	r3, [pc, #44]	; (401f08 <_pmc_init_sources+0x3c>)
  401edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  401ede:	f013 0f01 	tst.w	r3, #1
  401ee2:	d0fa      	beq.n	401eda <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  401ee4:	4b08      	ldr	r3, [pc, #32]	; (401f08 <_pmc_init_sources+0x3c>)
  401ee6:	6a19      	ldr	r1, [r3, #32]
  401ee8:	4a09      	ldr	r2, [pc, #36]	; (401f10 <_pmc_init_sources+0x44>)
  401eea:	430a      	orrs	r2, r1
  401eec:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  401eee:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  401ef0:	4a08      	ldr	r2, [pc, #32]	; (401f14 <_pmc_init_sources+0x48>)
  401ef2:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  401ef4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  401ef6:	4a08      	ldr	r2, [pc, #32]	; (401f18 <_pmc_init_sources+0x4c>)
  401ef8:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  401efa:	4b03      	ldr	r3, [pc, #12]	; (401f08 <_pmc_init_sources+0x3c>)
  401efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  401efe:	f013 0f02 	tst.w	r3, #2
  401f02:	d0fa      	beq.n	401efa <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  401f04:	4770      	bx	lr
  401f06:	bf00      	nop
  401f08:	400e0600 	.word	0x400e0600
  401f0c:	00373e01 	.word	0x00373e01
  401f10:	01370000 	.word	0x01370000
  401f14:	f800ffff 	.word	0xf800ffff
  401f18:	20183f01 	.word	0x20183f01

00401f1c <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401f1c:	4a11      	ldr	r2, [pc, #68]	; (401f64 <_pmc_init_master_clock+0x48>)
  401f1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  401f24:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401f26:	4b0f      	ldr	r3, [pc, #60]	; (401f64 <_pmc_init_master_clock+0x48>)
  401f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401f2a:	f013 0f08 	tst.w	r3, #8
  401f2e:	d0fa      	beq.n	401f26 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401f30:	4a0c      	ldr	r2, [pc, #48]	; (401f64 <_pmc_init_master_clock+0x48>)
  401f32:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  401f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  401f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401f3c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401f3e:	4b09      	ldr	r3, [pc, #36]	; (401f64 <_pmc_init_master_clock+0x48>)
  401f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401f42:	f013 0f08 	tst.w	r3, #8
  401f46:	d0fa      	beq.n	401f3e <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401f48:	4a06      	ldr	r2, [pc, #24]	; (401f64 <_pmc_init_master_clock+0x48>)
  401f4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401f4c:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401f50:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401f54:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401f56:	4b03      	ldr	r3, [pc, #12]	; (401f64 <_pmc_init_master_clock+0x48>)
  401f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401f5a:	f013 0f08 	tst.w	r3, #8
  401f5e:	d0fa      	beq.n	401f56 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401f60:	4770      	bx	lr
  401f62:	bf00      	nop
  401f64:	400e0600 	.word	0x400e0600

00401f68 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401f68:	b508      	push	{r3, lr}
	_pmc_init_sources();
  401f6a:	4b02      	ldr	r3, [pc, #8]	; (401f74 <_pmc_init+0xc>)
  401f6c:	4798      	blx	r3
	_pmc_init_master_clock();
  401f6e:	4b02      	ldr	r3, [pc, #8]	; (401f78 <_pmc_init+0x10>)
  401f70:	4798      	blx	r3
  401f72:	bd08      	pop	{r3, pc}
  401f74:	00401ecd 	.word	0x00401ecd
  401f78:	00401f1d 	.word	0x00401f1d

00401f7c <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401f7c:	2300      	movs	r3, #0
  401f7e:	2b01      	cmp	r3, #1
  401f80:	d80f      	bhi.n	401fa2 <_pwm_get_cfg+0x26>
		if (_pwms[i].hw == hw) {
  401f82:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  401f86:	008a      	lsls	r2, r1, #2
  401f88:	4907      	ldr	r1, [pc, #28]	; (401fa8 <_pwm_get_cfg+0x2c>)
  401f8a:	588a      	ldr	r2, [r1, r2]
  401f8c:	4282      	cmp	r2, r0
  401f8e:	d002      	beq.n	401f96 <_pwm_get_cfg+0x1a>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  401f90:	3301      	adds	r3, #1
  401f92:	b2db      	uxtb	r3, r3
  401f94:	e7f3      	b.n	401f7e <_pwm_get_cfg+0x2>
			return (_pwms + i);
  401f96:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  401f9a:	009a      	lsls	r2, r3, #2
  401f9c:	4608      	mov	r0, r1
  401f9e:	4410      	add	r0, r2
  401fa0:	4770      	bx	lr
		}
	}

	return NULL;
  401fa2:	2000      	movs	r0, #0
}
  401fa4:	4770      	bx	lr
  401fa6:	bf00      	nop
  401fa8:	00405ec0 	.word	0x00405ec0

00401fac <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  401fac:	4b06      	ldr	r3, [pc, #24]	; (401fc8 <_pwm_init_irq_param+0x1c>)
  401fae:	4298      	cmp	r0, r3
  401fb0:	d003      	beq.n	401fba <_pwm_init_irq_param+0xe>
		_pwm0_dev = dev;
	}
	if (hw == PWM1) {
  401fb2:	4b06      	ldr	r3, [pc, #24]	; (401fcc <_pwm_init_irq_param+0x20>)
  401fb4:	4298      	cmp	r0, r3
  401fb6:	d003      	beq.n	401fc0 <_pwm_init_irq_param+0x14>
  401fb8:	4770      	bx	lr
		_pwm0_dev = dev;
  401fba:	4b05      	ldr	r3, [pc, #20]	; (401fd0 <_pwm_init_irq_param+0x24>)
  401fbc:	6019      	str	r1, [r3, #0]
  401fbe:	e7f8      	b.n	401fb2 <_pwm_init_irq_param+0x6>
		_pwm1_dev = dev;
  401fc0:	4b03      	ldr	r3, [pc, #12]	; (401fd0 <_pwm_init_irq_param+0x24>)
  401fc2:	6059      	str	r1, [r3, #4]
	}
}
  401fc4:	e7f8      	b.n	401fb8 <_pwm_init_irq_param+0xc>
  401fc6:	bf00      	nop
  401fc8:	40020000 	.word	0x40020000
  401fcc:	4005c000 	.word	0x4005c000
  401fd0:	20400378 	.word	0x20400378

00401fd4 <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  401fd4:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  401fd6:	6903      	ldr	r3, [r0, #16]
	return ((Pwm *)hw)->PWM_ISR1;
  401fd8:	69db      	ldr	r3, [r3, #28]
  401fda:	b113      	cbz	r3, 401fe2 <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  401fdc:	6803      	ldr	r3, [r0, #0]
  401fde:	b103      	cbz	r3, 401fe2 <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  401fe0:	4798      	blx	r3
  401fe2:	bd08      	pop	{r3, pc}

00401fe4 <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  401fe4:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  401fe6:	4b02      	ldr	r3, [pc, #8]	; (401ff0 <PWM0_Handler+0xc>)
  401fe8:	6818      	ldr	r0, [r3, #0]
  401fea:	4b02      	ldr	r3, [pc, #8]	; (401ff4 <PWM0_Handler+0x10>)
  401fec:	4798      	blx	r3
  401fee:	bd08      	pop	{r3, pc}
  401ff0:	20400378 	.word	0x20400378
  401ff4:	00401fd5 	.word	0x00401fd5

00401ff8 <PWM1_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM1_Handler(void)
{
  401ff8:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm1_dev);
  401ffa:	4b02      	ldr	r3, [pc, #8]	; (402004 <PWM1_Handler+0xc>)
  401ffc:	6858      	ldr	r0, [r3, #4]
  401ffe:	4b02      	ldr	r3, [pc, #8]	; (402008 <PWM1_Handler+0x10>)
  402000:	4798      	blx	r3
  402002:	bd08      	pop	{r3, pc}
  402004:	20400378 	.word	0x20400378
  402008:	00401fd5 	.word	0x00401fd5

0040200c <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  40200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40200e:	4606      	mov	r6, r0
	ASSERT(hw);
  402010:	460c      	mov	r4, r1
  402012:	1c08      	adds	r0, r1, #0
  402014:	bf18      	it	ne
  402016:	2001      	movne	r0, #1
  402018:	f44f 72bf 	mov.w	r2, #382	; 0x17e
  40201c:	4944      	ldr	r1, [pc, #272]	; (402130 <_pwm_init+0x124>)
  40201e:	4b45      	ldr	r3, [pc, #276]	; (402134 <_pwm_init+0x128>)
  402020:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  402022:	4620      	mov	r0, r4
  402024:	4b44      	ldr	r3, [pc, #272]	; (402138 <_pwm_init+0x12c>)
  402026:	4798      	blx	r3
  402028:	4605      	mov	r5, r0

	device->hw = hw;
  40202a:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  40202c:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  40202e:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  402030:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  402032:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  402034:	6903      	ldr	r3, [r0, #16]
  402036:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  40203a:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  40203c:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  40203e:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  402040:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  402042:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  402044:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  402048:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  40204a:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  40204c:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  40204e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  402052:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  402054:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  402058:	2300      	movs	r3, #0
  40205a:	e019      	b.n	402090 <_pwm_init+0x84>
		ch = cfg->ch + i;
  40205c:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  40205e:	0118      	lsls	r0, r3, #4
  402060:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  402064:	5c3a      	ldrb	r2, [r7, r0]
  402066:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  40206a:	3210      	adds	r2, #16
  40206c:	0152      	lsls	r2, r2, #5
  40206e:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  402070:	5c3a      	ldrb	r2, [r7, r0]
  402072:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  402076:	3210      	adds	r2, #16
  402078:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  40207c:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  40207e:	5c3a      	ldrb	r2, [r7, r0]
  402080:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  402084:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  402088:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  40208c:	3301      	adds	r3, #1
  40208e:	b25b      	sxtb	r3, r3
  402090:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402092:	4293      	cmp	r3, r2
  402094:	d3e2      	bcc.n	40205c <_pwm_init+0x50>
  402096:	2300      	movs	r3, #0
  402098:	e014      	b.n	4020c4 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  40209a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  40209c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4020a0:	0082      	lsls	r2, r0, #2
  4020a2:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  4020a6:	5c88      	ldrb	r0, [r1, r2]
  4020a8:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  4020ac:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  4020b0:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4020b4:	5c8a      	ldrb	r2, [r1, r2]
  4020b6:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4020ba:	3213      	adds	r2, #19
  4020bc:	0112      	lsls	r2, r2, #4
  4020be:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  4020c0:	3301      	adds	r3, #1
  4020c2:	b25b      	sxtb	r3, r3
  4020c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4020c6:	4293      	cmp	r3, r2
  4020c8:	d3e7      	bcc.n	40209a <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  4020ca:	4631      	mov	r1, r6
  4020cc:	4620      	mov	r0, r4
  4020ce:	4b1b      	ldr	r3, [pc, #108]	; (40213c <_pwm_init+0x130>)
  4020d0:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  4020d2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4020d6:	2b00      	cmp	r3, #0
  4020d8:	db0d      	blt.n	4020f6 <_pwm_init+0xea>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4020da:	095a      	lsrs	r2, r3, #5
  4020dc:	f003 031f 	and.w	r3, r3, #31
  4020e0:	2101      	movs	r1, #1
  4020e2:	fa01 f303 	lsl.w	r3, r1, r3
  4020e6:	3220      	adds	r2, #32
  4020e8:	4915      	ldr	r1, [pc, #84]	; (402140 <_pwm_init+0x134>)
  4020ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4020ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4020f2:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  4020f6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4020fa:	2b00      	cmp	r3, #0
  4020fc:	db09      	blt.n	402112 <_pwm_init+0x106>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4020fe:	095a      	lsrs	r2, r3, #5
  402100:	f003 031f 	and.w	r3, r3, #31
  402104:	2101      	movs	r1, #1
  402106:	fa01 f303 	lsl.w	r3, r1, r3
  40210a:	3260      	adds	r2, #96	; 0x60
  40210c:	490c      	ldr	r1, [pc, #48]	; (402140 <_pwm_init+0x134>)
  40210e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  402112:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  402116:	2b00      	cmp	r3, #0
  402118:	db08      	blt.n	40212c <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40211a:	0959      	lsrs	r1, r3, #5
  40211c:	f003 031f 	and.w	r3, r3, #31
  402120:	2201      	movs	r2, #1
  402122:	fa02 f303 	lsl.w	r3, r2, r3
  402126:	4a06      	ldr	r2, [pc, #24]	; (402140 <_pwm_init+0x134>)
  402128:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  40212c:	2000      	movs	r0, #0
  40212e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402130:	00405f68 	.word	0x00405f68
  402134:	00401715 	.word	0x00401715
  402138:	00401f7d 	.word	0x00401f7d
  40213c:	00401fad 	.word	0x00401fad
  402140:	e000e100 	.word	0xe000e100

00402144 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  402144:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  402146:	4604      	mov	r4, r0
  402148:	f240 12b5 	movw	r2, #437	; 0x1b5
  40214c:	490b      	ldr	r1, [pc, #44]	; (40217c <_pwm_enable+0x38>)
  40214e:	3000      	adds	r0, #0
  402150:	bf18      	it	ne
  402152:	2001      	movne	r0, #1
  402154:	4b0a      	ldr	r3, [pc, #40]	; (402180 <_pwm_enable+0x3c>)
  402156:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  402158:	6920      	ldr	r0, [r4, #16]
  40215a:	4b0a      	ldr	r3, [pc, #40]	; (402184 <_pwm_enable+0x40>)
  40215c:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  40215e:	2300      	movs	r3, #0
  402160:	e008      	b.n	402174 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  402162:	6921      	ldr	r1, [r4, #16]
  402164:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402166:	011a      	lsls	r2, r3, #4
  402168:	5cad      	ldrb	r5, [r5, r2]
  40216a:	2201      	movs	r2, #1
  40216c:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  40216e:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  402170:	3301      	adds	r3, #1
  402172:	b25b      	sxtb	r3, r3
  402174:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402176:	4293      	cmp	r3, r2
  402178:	d3f3      	bcc.n	402162 <_pwm_enable+0x1e>
	}
}
  40217a:	bd38      	pop	{r3, r4, r5, pc}
  40217c:	00405f68 	.word	0x00405f68
  402180:	00401715 	.word	0x00401715
  402184:	00401f7d 	.word	0x00401f7d

00402188 <_pwm_set_param>:
		hri_pwm_write_DIS_reg(device->hw, 0x1u << cfg->ch[i].index);
	}
}

void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
  402188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40218a:	460d      	mov	r5, r1
  40218c:	4616      	mov	r6, r2
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device && (duty_cycle < period));
  40218e:	4604      	mov	r4, r0
  402190:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
  402194:	4911      	ldr	r1, [pc, #68]	; (4021dc <_pwm_set_param+0x54>)
  402196:	2800      	cmp	r0, #0
  402198:	bf18      	it	ne
  40219a:	42ae      	cmpne	r6, r5
  40219c:	bf34      	ite	cc
  40219e:	2001      	movcc	r0, #1
  4021a0:	2000      	movcs	r0, #0
  4021a2:	4b0f      	ldr	r3, [pc, #60]	; (4021e0 <_pwm_set_param+0x58>)
  4021a4:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  4021a6:	6920      	ldr	r0, [r4, #16]
  4021a8:	4b0e      	ldr	r3, [pc, #56]	; (4021e4 <_pwm_set_param+0x5c>)
  4021aa:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  4021ac:	2300      	movs	r3, #0
  4021ae:	e010      	b.n	4021d2 <_pwm_set_param+0x4a>
		hri_pwm_write_CDTYUPD_reg(device->hw, cfg->ch[i].index, duty_cycle);
  4021b0:	6922      	ldr	r2, [r4, #16]
  4021b2:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4021b4:	0119      	lsls	r1, r3, #4
  4021b6:	5c7f      	ldrb	r7, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTYUPD = data;
  4021b8:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  4021bc:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
  4021c0:	6922      	ldr	r2, [r4, #16]
  4021c2:	6b07      	ldr	r7, [r0, #48]	; 0x30
  4021c4:	5c79      	ldrb	r1, [r7, r1]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRDUPD = data;
  4021c6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  4021ca:	f8c2 5210 	str.w	r5, [r2, #528]	; 0x210
	for (i = 0; i < cfg->ch_num; i++) {
  4021ce:	3301      	adds	r3, #1
  4021d0:	b2db      	uxtb	r3, r3
  4021d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4021d4:	4293      	cmp	r3, r2
  4021d6:	d3eb      	bcc.n	4021b0 <_pwm_set_param+0x28>
	}
}
  4021d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021da:	bf00      	nop
  4021dc:	00405f68 	.word	0x00405f68
  4021e0:	00401715 	.word	0x00401715
  4021e4:	00401f7d 	.word	0x00401f7d

004021e8 <_pwm_is_enabled>:

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  4021e8:	b510      	push	{r4, lr}
	ASSERT(device);
  4021ea:	4604      	mov	r4, r0
  4021ec:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  4021f0:	4907      	ldr	r1, [pc, #28]	; (402210 <_pwm_is_enabled+0x28>)
  4021f2:	3000      	adds	r0, #0
  4021f4:	bf18      	it	ne
  4021f6:	2001      	movne	r0, #1
  4021f8:	4b06      	ldr	r3, [pc, #24]	; (402214 <_pwm_is_enabled+0x2c>)
  4021fa:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  4021fc:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  4021fe:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  402200:	f013 0f0f 	tst.w	r3, #15
  402204:	d001      	beq.n	40220a <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  402206:	2001      	movs	r0, #1
	}
}
  402208:	bd10      	pop	{r4, pc}
		return false;
  40220a:	2000      	movs	r0, #0
  40220c:	bd10      	pop	{r4, pc}
  40220e:	bf00      	nop
  402210:	00405f68 	.word	0x00405f68
  402214:	00401715 	.word	0x00401715

00402218 <_pwm_set_irq_state>:

	return hri_pwm_read_CDTY_reg(device->hw, cfg->ch[0].index);
}

void _pwm_set_irq_state(struct _pwm_device *const device, const enum _pwm_callback_type type, const bool disable)
{
  402218:	b538      	push	{r3, r4, r5, lr}
  40221a:	460d      	mov	r5, r1
	uint8_t                i;
	const struct _pwm_cfg *cfg;

	ASSERT(device);
  40221c:	4604      	mov	r4, r0
  40221e:	f44f 7200 	mov.w	r2, #512	; 0x200
  402222:	4912      	ldr	r1, [pc, #72]	; (40226c <_pwm_set_irq_state+0x54>)
  402224:	3000      	adds	r0, #0
  402226:	bf18      	it	ne
  402228:	2001      	movne	r0, #1
  40222a:	4b11      	ldr	r3, [pc, #68]	; (402270 <_pwm_set_irq_state+0x58>)
  40222c:	4798      	blx	r3

	cfg = _pwm_get_cfg(device->hw);
  40222e:	6920      	ldr	r0, [r4, #16]
  402230:	4b10      	ldr	r3, [pc, #64]	; (402274 <_pwm_set_irq_state+0x5c>)
  402232:	4798      	blx	r3

	if (PWM_DEVICE_PERIOD_CB == type) {
  402234:	b18d      	cbz	r5, 40225a <_pwm_set_irq_state+0x42>
		for (i = 0; i < cfg->ch_num; i++) {
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
		}
	} else if (PWM_DEVICE_ERROR_CB == type) {
  402236:	2d01      	cmp	r5, #1
  402238:	d011      	beq.n	40225e <_pwm_set_irq_state+0x46>
  40223a:	bd38      	pop	{r3, r4, r5, pc}
			hri_pwm_write_IMR1_reg(device->hw, 0x1u << cfg->ch[i].index);
  40223c:	6921      	ldr	r1, [r4, #16]
  40223e:	6b05      	ldr	r5, [r0, #48]	; 0x30
  402240:	0113      	lsls	r3, r2, #4
  402242:	5ced      	ldrb	r5, [r5, r3]
  402244:	2301      	movs	r3, #1
  402246:	40ab      	lsls	r3, r5
	((Pwm *)hw)->PWM_IER1 = data;
  402248:	610b      	str	r3, [r1, #16]
	((Pwm *)hw)->PWM_IDR1 = ~data;
  40224a:	43db      	mvns	r3, r3
  40224c:	614b      	str	r3, [r1, #20]
		for (i = 0; i < cfg->ch_num; i++) {
  40224e:	3201      	adds	r2, #1
  402250:	b2d2      	uxtb	r2, r2
  402252:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402254:	429a      	cmp	r2, r3
  402256:	d3f1      	bcc.n	40223c <_pwm_set_irq_state+0x24>
  402258:	bd38      	pop	{r3, r4, r5, pc}
  40225a:	2200      	movs	r2, #0
  40225c:	e7f9      	b.n	402252 <_pwm_set_irq_state+0x3a>
		ASSERT(false);
  40225e:	f240 2209 	movw	r2, #521	; 0x209
  402262:	4902      	ldr	r1, [pc, #8]	; (40226c <_pwm_set_irq_state+0x54>)
  402264:	2000      	movs	r0, #0
  402266:	4b02      	ldr	r3, [pc, #8]	; (402270 <_pwm_set_irq_state+0x58>)
  402268:	4798      	blx	r3
	}
}
  40226a:	e7e6      	b.n	40223a <_pwm_set_irq_state+0x22>
  40226c:	00405f68 	.word	0x00405f68
  402270:	00401715 	.word	0x00401715
  402274:	00401f7d 	.word	0x00401f7d

00402278 <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  402278:	2000      	movs	r0, #0
  40227a:	4770      	bx	lr

0040227c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  40227c:	4b03      	ldr	r3, [pc, #12]	; (40228c <_system_time_init+0x10>)
  40227e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  402282:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  402284:	2205      	movs	r2, #5
  402286:	601a      	str	r2, [r3, #0]
  402288:	4770      	bx	lr
  40228a:	bf00      	nop
  40228c:	e000e010 	.word	0xe000e010

00402290 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  402290:	b508      	push	{r3, lr}
	_system_time_init(hw);
  402292:	4b01      	ldr	r3, [pc, #4]	; (402298 <_delay_init+0x8>)
  402294:	4798      	blx	r3
  402296:	bd08      	pop	{r3, pc}
  402298:	0040227d 	.word	0x0040227d

0040229c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  40229c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  40229e:	e00d      	b.n	4022bc <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  4022a0:	4b0d      	ldr	r3, [pc, #52]	; (4022d8 <_delay_cycles+0x3c>)
  4022a2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  4022a6:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  4022a8:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4022aa:	4b0b      	ldr	r3, [pc, #44]	; (4022d8 <_delay_cycles+0x3c>)
  4022ac:	681b      	ldr	r3, [r3, #0]
  4022ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4022b2:	d0fa      	beq.n	4022aa <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  4022b4:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4022b8:	3101      	adds	r1, #1
	while (n--) {
  4022ba:	4610      	mov	r0, r2
  4022bc:	1e43      	subs	r3, r0, #1
  4022be:	b2da      	uxtb	r2, r3
  4022c0:	2800      	cmp	r0, #0
  4022c2:	d1ed      	bne.n	4022a0 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  4022c4:	4b04      	ldr	r3, [pc, #16]	; (4022d8 <_delay_cycles+0x3c>)
  4022c6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4022c8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4022ca:	4b03      	ldr	r3, [pc, #12]	; (4022d8 <_delay_cycles+0x3c>)
  4022cc:	681b      	ldr	r3, [r3, #0]
  4022ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4022d2:	d0fa      	beq.n	4022ca <_delay_cycles+0x2e>
		;
}
  4022d4:	4770      	bx	lr
  4022d6:	bf00      	nop
  4022d8:	e000e010 	.word	0xe000e010

004022dc <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4022dc:	2300      	movs	r3, #0
  4022de:	2b01      	cmp	r3, #1
  4022e0:	d815      	bhi.n	40230e <get_cfg+0x32>
{
  4022e2:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  4022e4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  4022e8:	008a      	lsls	r2, r1, #2
  4022ea:	490a      	ldr	r1, [pc, #40]	; (402314 <get_cfg+0x38>)
  4022ec:	588a      	ldr	r2, [r1, r2]
  4022ee:	4282      	cmp	r2, r0
  4022f0:	d007      	beq.n	402302 <get_cfg+0x26>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  4022f2:	3301      	adds	r3, #1
  4022f4:	b2db      	uxtb	r3, r3
  4022f6:	2b01      	cmp	r3, #1
  4022f8:	d9f4      	bls.n	4022e4 <get_cfg+0x8>
			return &(_tcs[i]);
		}
	}

	return NULL;
  4022fa:	2000      	movs	r0, #0
}
  4022fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  402300:	4770      	bx	lr
			return &(_tcs[i]);
  402302:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  402306:	00a3      	lsls	r3, r4, #2
  402308:	4608      	mov	r0, r1
  40230a:	4418      	add	r0, r3
  40230c:	e7f6      	b.n	4022fc <get_cfg+0x20>
	return NULL;
  40230e:	2000      	movs	r0, #0
  402310:	4770      	bx	lr
  402312:	bf00      	nop
  402314:	20400000 	.word	0x20400000

00402318 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  402318:	4b06      	ldr	r3, [pc, #24]	; (402334 <_tc_init_irq_param+0x1c>)
  40231a:	4298      	cmp	r0, r3
  40231c:	d003      	beq.n	402326 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC3) {
  40231e:	4b06      	ldr	r3, [pc, #24]	; (402338 <_tc_init_irq_param+0x20>)
  402320:	4298      	cmp	r0, r3
  402322:	d003      	beq.n	40232c <_tc_init_irq_param+0x14>
  402324:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  402326:	4b05      	ldr	r3, [pc, #20]	; (40233c <_tc_init_irq_param+0x24>)
  402328:	6019      	str	r1, [r3, #0]
  40232a:	e7f8      	b.n	40231e <_tc_init_irq_param+0x6>
		_tc3_dev = (struct _timer_device *)dev;
  40232c:	4b03      	ldr	r3, [pc, #12]	; (40233c <_tc_init_irq_param+0x24>)
  40232e:	6059      	str	r1, [r3, #4]
	}
}
  402330:	e7f8      	b.n	402324 <_tc_init_irq_param+0xc>
  402332:	bf00      	nop
  402334:	4000c000 	.word	0x4000c000
  402338:	40054000 	.word	0x40054000
  40233c:	20400398 	.word	0x20400398

00402340 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  402340:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  402342:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  402344:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  402346:	f013 0f10 	tst.w	r3, #16
  40234a:	d100      	bne.n	40234e <tc_interrupt_handler+0xe>
  40234c:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  40234e:	6803      	ldr	r3, [r0, #0]
  402350:	4798      	blx	r3
	}
}
  402352:	e7fb      	b.n	40234c <tc_interrupt_handler+0xc>

00402354 <_timer_init>:
{
  402354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402358:	4606      	mov	r6, r0
  40235a:	460c      	mov	r4, r1
		struct tc_configuration *cfg     = get_cfg(hw);
  40235c:	4608      	mov	r0, r1
  40235e:	4b2f      	ldr	r3, [pc, #188]	; (40241c <_timer_init+0xc8>)
  402360:	4798      	blx	r3
  402362:	4605      	mov	r5, r0
		uint32_t ra = cfg->ra;
  402364:	f8d0 a014 	ldr.w	sl, [r0, #20]
		uint32_t rb = cfg->rb;
  402368:	f8d0 9018 	ldr.w	r9, [r0, #24]
		uint32_t rc = cfg->rc;
  40236c:	69c7      	ldr	r7, [r0, #28]
		uint32_t ext_mode = cfg->ext_mode;
  40236e:	f8d0 800c 	ldr.w	r8, [r0, #12]
		device->hw = hw;
  402372:	60f4      	str	r4, [r6, #12]
		ASSERT(ARRAY_SIZE(_tcs));
  402374:	22c3      	movs	r2, #195	; 0xc3
  402376:	492a      	ldr	r1, [pc, #168]	; (402420 <_timer_init+0xcc>)
  402378:	2001      	movs	r0, #1
  40237a:	4b2a      	ldr	r3, [pc, #168]	; (402424 <_timer_init+0xd0>)
  40237c:	4798      	blx	r3
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  40237e:	f248 0307 	movw	r3, #32775	; 0x8007
  402382:	6063      	str	r3, [r4, #4]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  402384:	f8c4 a014 	str.w	sl, [r4, #20]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  402388:	f8c4 9018 	str.w	r9, [r4, #24]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  40238c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  402390:	61e7      	str	r7, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  402392:	2300      	movs	r3, #0
  402394:	6263      	str	r3, [r4, #36]	; 0x24
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  402396:	f248 020f 	movw	r2, #32783	; 0x800f
  40239a:	6462      	str	r2, [r4, #68]	; 0x44
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  40239c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4023a0:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4023a4:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4023a8:	65e7      	str	r7, [r4, #92]	; 0x5c
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4023aa:	6663      	str	r3, [r4, #100]	; 0x64
		hri_tc_write_FMR_reg(hw, cfg->fmr);
  4023ac:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  4023ae:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		_tc_init_irq_param(hw, device);
  4023b2:	4631      	mov	r1, r6
  4023b4:	4620      	mov	r0, r4
  4023b6:	4b1c      	ldr	r3, [pc, #112]	; (402428 <_timer_init+0xd4>)
  4023b8:	4798      	blx	r3
		NVIC_DisableIRQ(cfg->irq);
  4023ba:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4023be:	2b00      	cmp	r3, #0
  4023c0:	db0d      	blt.n	4023de <_timer_init+0x8a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4023c2:	095a      	lsrs	r2, r3, #5
  4023c4:	f003 031f 	and.w	r3, r3, #31
  4023c8:	2101      	movs	r1, #1
  4023ca:	fa01 f303 	lsl.w	r3, r1, r3
  4023ce:	3220      	adds	r2, #32
  4023d0:	4916      	ldr	r1, [pc, #88]	; (40242c <_timer_init+0xd8>)
  4023d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4023d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4023da:	f3bf 8f6f 	isb	sy
		NVIC_ClearPendingIRQ(cfg->irq);
  4023de:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4023e2:	2b00      	cmp	r3, #0
  4023e4:	db09      	blt.n	4023fa <_timer_init+0xa6>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4023e6:	095a      	lsrs	r2, r3, #5
  4023e8:	f003 031f 	and.w	r3, r3, #31
  4023ec:	2101      	movs	r1, #1
  4023ee:	fa01 f303 	lsl.w	r3, r1, r3
  4023f2:	3260      	adds	r2, #96	; 0x60
  4023f4:	490d      	ldr	r1, [pc, #52]	; (40242c <_timer_init+0xd8>)
  4023f6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		NVIC_EnableIRQ(cfg->irq);
  4023fa:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4023fe:	2b00      	cmp	r3, #0
  402400:	db08      	blt.n	402414 <_timer_init+0xc0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402402:	0959      	lsrs	r1, r3, #5
  402404:	f003 031f 	and.w	r3, r3, #31
  402408:	2201      	movs	r2, #1
  40240a:	fa02 f303 	lsl.w	r3, r2, r3
  40240e:	4a07      	ldr	r2, [pc, #28]	; (40242c <_timer_init+0xd8>)
  402410:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  402414:	2000      	movs	r0, #0
  402416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40241a:	bf00      	nop
  40241c:	004022dd 	.word	0x004022dd
  402420:	00405f80 	.word	0x00405f80
  402424:	00401715 	.word	0x00401715
  402428:	00402319 	.word	0x00402319
  40242c:	e000e100 	.word	0xe000e100

00402430 <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402430:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  402432:	2305      	movs	r3, #5
  402434:	6013      	str	r3, [r2, #0]
	hri_tc_write_CCR_reg(device->hw, 1, TC_CCR_CLKEN | TC_CCR_SWTRG);
  402436:	68c2      	ldr	r2, [r0, #12]
  402438:	6413      	str	r3, [r2, #64]	; 0x40
  40243a:	4770      	bx	lr

0040243c <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0) | hri_tc_get_SR_CLKSTA_bit(device->hw, 1);
  40243c:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  40243e:	6a13      	ldr	r3, [r2, #32]
  402440:	f3c3 4300 	ubfx	r3, r3, #16, #1
  402444:	6e10      	ldr	r0, [r2, #96]	; 0x60
  402446:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
  40244a:	4318      	orrs	r0, r3
  40244c:	4770      	bx	lr

0040244e <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  40244e:	2000      	movs	r0, #0
  402450:	4770      	bx	lr
	...

00402454 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  402454:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  402456:	4b02      	ldr	r3, [pc, #8]	; (402460 <TC0_Handler+0xc>)
  402458:	6818      	ldr	r0, [r3, #0]
  40245a:	4b02      	ldr	r3, [pc, #8]	; (402464 <TC0_Handler+0x10>)
  40245c:	4798      	blx	r3
  40245e:	bd08      	pop	{r3, pc}
  402460:	20400398 	.word	0x20400398
  402464:	00402341 	.word	0x00402341

00402468 <TC9_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC9_Handler(void)
{
  402468:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
  40246a:	4b02      	ldr	r3, [pc, #8]	; (402474 <TC9_Handler+0xc>)
  40246c:	6858      	ldr	r0, [r3, #4]
  40246e:	4b02      	ldr	r3, [pc, #8]	; (402478 <TC9_Handler+0x10>)
  402470:	4798      	blx	r3
  402472:	bd08      	pop	{r3, pc}
  402474:	20400398 	.word	0x20400398
  402478:	00402341 	.word	0x00402341

0040247c <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  40247c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40247e:	4604      	mov	r4, r0
  402480:	f240 222b 	movw	r2, #555	; 0x22b
  402484:	4905      	ldr	r1, [pc, #20]	; (40249c <_usart_get_hardware_index+0x20>)
  402486:	3000      	adds	r0, #0
  402488:	bf18      	it	ne
  40248a:	2001      	movne	r0, #1
  40248c:	4b04      	ldr	r3, [pc, #16]	; (4024a0 <_usart_get_hardware_index+0x24>)
  40248e:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  402490:	4804      	ldr	r0, [pc, #16]	; (4024a4 <_usart_get_hardware_index+0x28>)
  402492:	4420      	add	r0, r4
}
  402494:	f3c0 3087 	ubfx	r0, r0, #14, #8
  402498:	bd10      	pop	{r4, pc}
  40249a:	bf00      	nop
  40249c:	00405fa0 	.word	0x00405fa0
  4024a0:	00401715 	.word	0x00401715
  4024a4:	bffdc000 	.word	0xbffdc000

004024a8 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  4024a8:	b510      	push	{r4, lr}
	ASSERT(hw);
  4024aa:	4604      	mov	r4, r0
  4024ac:	f240 2287 	movw	r2, #647	; 0x287
  4024b0:	490e      	ldr	r1, [pc, #56]	; (4024ec <_get_usart_index+0x44>)
  4024b2:	3000      	adds	r0, #0
  4024b4:	bf18      	it	ne
  4024b6:	2001      	movne	r0, #1
  4024b8:	4b0d      	ldr	r3, [pc, #52]	; (4024f0 <_get_usart_index+0x48>)
  4024ba:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  4024bc:	4620      	mov	r0, r4
  4024be:	4b0d      	ldr	r3, [pc, #52]	; (4024f4 <_get_usart_index+0x4c>)
  4024c0:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4024c2:	2300      	movs	r3, #0
  4024c4:	b143      	cbz	r3, 4024d8 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  4024c6:	f240 2291 	movw	r2, #657	; 0x291
  4024ca:	4908      	ldr	r1, [pc, #32]	; (4024ec <_get_usart_index+0x44>)
  4024cc:	2000      	movs	r0, #0
  4024ce:	4b08      	ldr	r3, [pc, #32]	; (4024f0 <_get_usart_index+0x48>)
  4024d0:	4798      	blx	r3
	return 0;
  4024d2:	2300      	movs	r3, #0
}
  4024d4:	4618      	mov	r0, r3
  4024d6:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  4024d8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  4024dc:	008a      	lsls	r2, r1, #2
  4024de:	4906      	ldr	r1, [pc, #24]	; (4024f8 <_get_usart_index+0x50>)
  4024e0:	5c8a      	ldrb	r2, [r1, r2]
  4024e2:	4290      	cmp	r0, r2
  4024e4:	d0f6      	beq.n	4024d4 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  4024e6:	3301      	adds	r3, #1
  4024e8:	b2db      	uxtb	r3, r3
  4024ea:	e7eb      	b.n	4024c4 <_get_usart_index+0x1c>
  4024ec:	00405fa0 	.word	0x00405fa0
  4024f0:	00401715 	.word	0x00401715
  4024f4:	0040247d 	.word	0x0040247d
  4024f8:	00405f94 	.word	0x00405f94

004024fc <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  4024fc:	b510      	push	{r4, lr}
	ASSERT(hw);
  4024fe:	4604      	mov	r4, r0
  402500:	f240 229e 	movw	r2, #670	; 0x29e
  402504:	4911      	ldr	r1, [pc, #68]	; (40254c <_usart_init+0x50>)
  402506:	3000      	adds	r0, #0
  402508:	bf18      	it	ne
  40250a:	2001      	movne	r0, #1
  40250c:	4b10      	ldr	r3, [pc, #64]	; (402550 <_usart_init+0x54>)
  40250e:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  402510:	4620      	mov	r0, r4
  402512:	4b10      	ldr	r3, [pc, #64]	; (402554 <_usart_init+0x58>)
  402514:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  402516:	4b10      	ldr	r3, [pc, #64]	; (402558 <_usart_init+0x5c>)
  402518:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  40251c:	2300      	movs	r3, #0
  40251e:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  402520:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  402522:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  402524:	22ac      	movs	r2, #172	; 0xac
  402526:	6022      	str	r2, [r4, #0]
  402528:	f44f 7280 	mov.w	r2, #256	; 0x100
  40252c:	6022      	str	r2, [r4, #0]
  40252e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402532:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  402534:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  402538:	0081      	lsls	r1, r0, #2
  40253a:	4a08      	ldr	r2, [pc, #32]	; (40255c <_usart_init+0x60>)
  40253c:	440a      	add	r2, r1
  40253e:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  402540:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  402542:	4a07      	ldr	r2, [pc, #28]	; (402560 <_usart_init+0x64>)
  402544:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  402546:	4618      	mov	r0, r3
  402548:	bd10      	pop	{r4, pc}
  40254a:	bf00      	nop
  40254c:	00405fa0 	.word	0x00405fa0
  402550:	00401715 	.word	0x00401715
  402554:	004024a9 	.word	0x004024a9
  402558:	55534100 	.word	0x55534100
  40255c:	00405f94 	.word	0x00405f94
  402560:	000100f4 	.word	0x000100f4

00402564 <_usart_sync_init>:
{
  402564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402566:	460c      	mov	r4, r1
	ASSERT(device);
  402568:	4e09      	ldr	r6, [pc, #36]	; (402590 <_usart_sync_init+0x2c>)
  40256a:	4607      	mov	r7, r0
  40256c:	22bd      	movs	r2, #189	; 0xbd
  40256e:	4631      	mov	r1, r6
  402570:	3000      	adds	r0, #0
  402572:	bf18      	it	ne
  402574:	2001      	movne	r0, #1
  402576:	4d07      	ldr	r5, [pc, #28]	; (402594 <_usart_sync_init+0x30>)
  402578:	47a8      	blx	r5
	ASSERT(hw);
  40257a:	22be      	movs	r2, #190	; 0xbe
  40257c:	4631      	mov	r1, r6
  40257e:	1c20      	adds	r0, r4, #0
  402580:	bf18      	it	ne
  402582:	2001      	movne	r0, #1
  402584:	47a8      	blx	r5
	device->hw = hw;
  402586:	603c      	str	r4, [r7, #0]
	return _usart_init(hw);
  402588:	4620      	mov	r0, r4
  40258a:	4b03      	ldr	r3, [pc, #12]	; (402598 <_usart_sync_init+0x34>)
  40258c:	4798      	blx	r3
}
  40258e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402590:	00405fa0 	.word	0x00405fa0
  402594:	00401715 	.word	0x00401715
  402598:	004024fd 	.word	0x004024fd

0040259c <_usart_sync_enable>:
{
  40259c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  40259e:	4e0a      	ldr	r6, [pc, #40]	; (4025c8 <_usart_sync_enable+0x2c>)
  4025a0:	4604      	mov	r4, r0
  4025a2:	f240 1205 	movw	r2, #261	; 0x105
  4025a6:	4631      	mov	r1, r6
  4025a8:	3000      	adds	r0, #0
  4025aa:	bf18      	it	ne
  4025ac:	2001      	movne	r0, #1
  4025ae:	4d07      	ldr	r5, [pc, #28]	; (4025cc <_usart_sync_enable+0x30>)
  4025b0:	47a8      	blx	r5
	_usart_enable(device->hw);
  4025b2:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4025b4:	f240 22c7 	movw	r2, #711	; 0x2c7
  4025b8:	4631      	mov	r1, r6
  4025ba:	1c20      	adds	r0, r4, #0
  4025bc:	bf18      	it	ne
  4025be:	2001      	movne	r0, #1
  4025c0:	47a8      	blx	r5
	((Usart *)hw)->US_CR = data;
  4025c2:	2350      	movs	r3, #80	; 0x50
  4025c4:	6023      	str	r3, [r4, #0]
  4025c6:	bd70      	pop	{r4, r5, r6, pc}
  4025c8:	00405fa0 	.word	0x00405fa0
  4025cc:	00401715 	.word	0x00401715

004025d0 <_usart_sync_write_byte>:
{
  4025d0:	b538      	push	{r3, r4, r5, lr}
  4025d2:	460c      	mov	r4, r1
	ASSERT(device);
  4025d4:	4605      	mov	r5, r0
  4025d6:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4025da:	4904      	ldr	r1, [pc, #16]	; (4025ec <_usart_sync_write_byte+0x1c>)
  4025dc:	3000      	adds	r0, #0
  4025de:	bf18      	it	ne
  4025e0:	2001      	movne	r0, #1
  4025e2:	4b03      	ldr	r3, [pc, #12]	; (4025f0 <_usart_sync_write_byte+0x20>)
  4025e4:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  4025e6:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  4025e8:	61dc      	str	r4, [r3, #28]
  4025ea:	bd38      	pop	{r3, r4, r5, pc}
  4025ec:	00405fa0 	.word	0x00405fa0
  4025f0:	00401715 	.word	0x00401715

004025f4 <_usart_sync_read_byte>:
{
  4025f4:	b510      	push	{r4, lr}
	ASSERT(device);
  4025f6:	4604      	mov	r4, r0
  4025f8:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
  4025fc:	4904      	ldr	r1, [pc, #16]	; (402610 <_usart_sync_read_byte+0x1c>)
  4025fe:	3000      	adds	r0, #0
  402600:	bf18      	it	ne
  402602:	2001      	movne	r0, #1
  402604:	4b03      	ldr	r3, [pc, #12]	; (402614 <_usart_sync_read_byte+0x20>)
  402606:	4798      	blx	r3
	return (uint8_t)(hri_usart_read_US_RHR_reg(device->hw) & 0xff);
  402608:	6823      	ldr	r3, [r4, #0]
	return ((Usart *)hw)->US_RHR;
  40260a:	6998      	ldr	r0, [r3, #24]
}
  40260c:	b2c0      	uxtb	r0, r0
  40260e:	bd10      	pop	{r4, pc}
  402610:	00405fa0 	.word	0x00405fa0
  402614:	00401715 	.word	0x00401715

00402618 <_usart_sync_is_ready_to_send>:
{
  402618:	b510      	push	{r4, lr}
	ASSERT(device);
  40261a:	4604      	mov	r4, r0
  40261c:	f240 12c3 	movw	r2, #451	; 0x1c3
  402620:	4905      	ldr	r1, [pc, #20]	; (402638 <_usart_sync_is_ready_to_send+0x20>)
  402622:	3000      	adds	r0, #0
  402624:	bf18      	it	ne
  402626:	2001      	movne	r0, #1
  402628:	4b04      	ldr	r3, [pc, #16]	; (40263c <_usart_sync_is_ready_to_send+0x24>)
  40262a:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXRDY_bit(device->hw);
  40262c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  40262e:	6958      	ldr	r0, [r3, #20]
}
  402630:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402634:	bd10      	pop	{r4, pc}
  402636:	bf00      	nop
  402638:	00405fa0 	.word	0x00405fa0
  40263c:	00401715 	.word	0x00401715

00402640 <_usart_sync_is_transmit_done>:
{
  402640:	b510      	push	{r4, lr}
	ASSERT(device);
  402642:	4604      	mov	r4, r0
  402644:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
  402648:	4905      	ldr	r1, [pc, #20]	; (402660 <_usart_sync_is_transmit_done+0x20>)
  40264a:	3000      	adds	r0, #0
  40264c:	bf18      	it	ne
  40264e:	2001      	movne	r0, #1
  402650:	4b04      	ldr	r3, [pc, #16]	; (402664 <_usart_sync_is_transmit_done+0x24>)
  402652:	4798      	blx	r3
	return hri_usart_get_US_CSR_TXEMPTY_bit(device->hw);
  402654:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  402656:	6958      	ldr	r0, [r3, #20]
}
  402658:	f3c0 2040 	ubfx	r0, r0, #9, #1
  40265c:	bd10      	pop	{r4, pc}
  40265e:	bf00      	nop
  402660:	00405fa0 	.word	0x00405fa0
  402664:	00401715 	.word	0x00401715

00402668 <_usart_sync_is_byte_received>:
{
  402668:	b510      	push	{r4, lr}
	ASSERT(device);
  40266a:	4604      	mov	r4, r0
  40266c:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  402670:	4905      	ldr	r1, [pc, #20]	; (402688 <_usart_sync_is_byte_received+0x20>)
  402672:	3000      	adds	r0, #0
  402674:	bf18      	it	ne
  402676:	2001      	movne	r0, #1
  402678:	4b04      	ldr	r3, [pc, #16]	; (40268c <_usart_sync_is_byte_received+0x24>)
  40267a:	4798      	blx	r3
	return hri_usart_get_US_CSR_RXRDY_bit(device->hw);
  40267c:	6823      	ldr	r3, [r4, #0]
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  40267e:	6958      	ldr	r0, [r3, #20]
  402680:	f000 0001 	and.w	r0, r0, #1
}
  402684:	bd10      	pop	{r4, pc}
  402686:	bf00      	nop
  402688:	00405fa0 	.word	0x00405fa0
  40268c:	00401715 	.word	0x00401715

00402690 <_usart_get_usart_sync>:
}
  402690:	2000      	movs	r0, #0
  402692:	4770      	bx	lr

00402694 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  402694:	b430      	push	{r4, r5}
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  402696:	2300      	movs	r3, #0
  402698:	e004      	b.n	4026a4 <_dma_init+0x10>
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  40269a:	0199      	lsls	r1, r3, #6
  40269c:	4a16      	ldr	r2, [pc, #88]	; (4026f8 <_dma_init+0x64>)
  40269e:	5852      	ldr	r2, [r2, r1]
  4026a0:	3301      	adds	r3, #1
  4026a2:	b2db      	uxtb	r3, r3
  4026a4:	2b17      	cmp	r3, #23
  4026a6:	d9f8      	bls.n	40269a <_dma_init+0x6>
  4026a8:	2300      	movs	r3, #0
  4026aa:	e014      	b.n	4026d6 <_dma_init+0x42>
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CNDC = data;
  4026ac:	4c13      	ldr	r4, [pc, #76]	; (4026fc <_dma_init+0x68>)
  4026ae:	eb04 1283 	add.w	r2, r4, r3, lsl #6
  4026b2:	2100      	movs	r1, #0
  4026b4:	66d1      	str	r1, [r2, #108]	; 0x6c
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CBC = data;
  4026b6:	6751      	str	r1, [r2, #116]	; 0x74
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSUS = data;
  4026b8:	1c98      	adds	r0, r3, #2
  4026ba:	0180      	lsls	r0, r0, #6
  4026bc:	1825      	adds	r5, r4, r0
  4026be:	5021      	str	r1, [r4, r0]
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDUS = data;
  4026c0:	6069      	str	r1, [r5, #4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  4026c2:	490f      	ldr	r1, [pc, #60]	; (402700 <_dma_init+0x6c>)
  4026c4:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC = data;
  4026c8:	6790      	str	r0, [r2, #120]	; 0x78
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  4026ca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4026ce:	6849      	ldr	r1, [r1, #4]
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDS_MSP = data;
  4026d0:	67d1      	str	r1, [r2, #124]	; 0x7c
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4026d2:	3301      	adds	r3, #1
  4026d4:	b2db      	uxtb	r3, r3
  4026d6:	2b17      	cmp	r3, #23
  4026d8:	d9e8      	bls.n	4026ac <_dma_init+0x18>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4026da:	4b0a      	ldr	r3, [pc, #40]	; (402704 <_dma_init+0x70>)
  4026dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4026e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4026e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4026e8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4026ec:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4026f0:	605a      	str	r2, [r3, #4]
	NVIC_DisableIRQ(XDMAC_IRQn);
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
	NVIC_EnableIRQ(XDMAC_IRQn);

	return ERR_NONE;
}
  4026f2:	2000      	movs	r0, #0
  4026f4:	bc30      	pop	{r4, r5}
  4026f6:	4770      	bx	lr
  4026f8:	4007805c 	.word	0x4007805c
  4026fc:	40078000 	.word	0x40078000
  402700:	00405fbc 	.word	0x00405fbc
  402704:	e000e100 	.word	0xe000e100

00402708 <_dma_set_destination_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CDA = data;
  402708:	0180      	lsls	r0, r0, #6
  40270a:	4b02      	ldr	r3, [pc, #8]	; (402714 <_dma_set_destination_address+0xc>)
  40270c:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  40270e:	2000      	movs	r0, #0
  402710:	4770      	bx	lr
  402712:	bf00      	nop
  402714:	40078064 	.word	0x40078064

00402718 <_dma_set_source_address>:
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CSA = data;
  402718:	0180      	lsls	r0, r0, #6
  40271a:	4b02      	ldr	r3, [pc, #8]	; (402724 <_dma_set_source_address+0xc>)
  40271c:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  40271e:	2000      	movs	r0, #0
  402720:	4770      	bx	lr
  402722:	bf00      	nop
  402724:	40078060 	.word	0x40078060

00402728 <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CC;
  402728:	0180      	lsls	r0, r0, #6
  40272a:	4a04      	ldr	r2, [pc, #16]	; (40273c <_dma_set_data_amount+0x14>)
  40272c:	4402      	add	r2, r0
  40272e:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  402730:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  402734:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CUBC = data;
  402736:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  402738:	2000      	movs	r0, #0
  40273a:	4770      	bx	lr
  40273c:	40078000 	.word	0x40078000

00402740 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  402740:	2301      	movs	r3, #1
  402742:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  402746:	4b03      	ldr	r3, [pc, #12]	; (402754 <_dma_enable_transaction+0x14>)
  402748:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  40274a:	b101      	cbz	r1, 40274e <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  40274c:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  40274e:	2000      	movs	r0, #0
  402750:	4770      	bx	lr
  402752:	bf00      	nop
  402754:	40078000 	.word	0x40078000

00402758 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  402758:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  40275c:	008a      	lsls	r2, r1, #2
  40275e:	4b02      	ldr	r3, [pc, #8]	; (402768 <_dma_get_channel_resource+0x10>)
  402760:	4413      	add	r3, r2
  402762:	6003      	str	r3, [r0, #0]

	return ERR_NONE;
}
  402764:	2000      	movs	r0, #0
  402766:	4770      	bx	lr
  402768:	204003a0 	.word	0x204003a0

0040276c <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
	if (state) {
  40276c:	b19a      	cbz	r2, 402796 <_dma_set_irq_state+0x2a>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  40276e:	b951      	cbnz	r1, 402786 <_dma_set_irq_state+0x1a>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  402770:	0182      	lsls	r2, r0, #6
  402772:	4b13      	ldr	r3, [pc, #76]	; (4027c0 <_dma_set_irq_state+0x54>)
  402774:	4413      	add	r3, r2
  402776:	2201      	movs	r2, #1
  402778:	651a      	str	r2, [r3, #80]	; 0x50
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  40277a:	2301      	movs	r3, #1
  40277c:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GIE = mask;
  402780:	4b0f      	ldr	r3, [pc, #60]	; (4027c0 <_dma_set_irq_state+0x54>)
  402782:	60d8      	str	r0, [r3, #12]
  402784:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  402786:	2901      	cmp	r1, #1
  402788:	d1f7      	bne.n	40277a <_dma_set_irq_state+0xe>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIE = mask;
  40278a:	0182      	lsls	r2, r0, #6
  40278c:	4b0c      	ldr	r3, [pc, #48]	; (4027c0 <_dma_set_irq_state+0x54>)
  40278e:	4413      	add	r3, r2
  402790:	2270      	movs	r2, #112	; 0x70
  402792:	651a      	str	r2, [r3, #80]	; 0x50
  402794:	e7f1      	b.n	40277a <_dma_set_irq_state+0xe>
	} else {
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  402796:	b951      	cbnz	r1, 4027ae <_dma_set_irq_state+0x42>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  402798:	0182      	lsls	r2, r0, #6
  40279a:	4b09      	ldr	r3, [pc, #36]	; (4027c0 <_dma_set_irq_state+0x54>)
  40279c:	4413      	add	r3, r2
  40279e:	2201      	movs	r2, #1
  4027a0:	655a      	str	r2, [r3, #84]	; 0x54
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  4027a2:	2301      	movs	r3, #1
  4027a4:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GID = mask;
  4027a8:	4b05      	ldr	r3, [pc, #20]	; (4027c0 <_dma_set_irq_state+0x54>)
  4027aa:	6118      	str	r0, [r3, #16]
  4027ac:	4770      	bx	lr
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4027ae:	2901      	cmp	r1, #1
  4027b0:	d1f7      	bne.n	4027a2 <_dma_set_irq_state+0x36>
	((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CID = mask;
  4027b2:	0182      	lsls	r2, r0, #6
  4027b4:	4b02      	ldr	r3, [pc, #8]	; (4027c0 <_dma_set_irq_state+0x54>)
  4027b6:	4413      	add	r3, r2
  4027b8:	2270      	movs	r2, #112	; 0x70
  4027ba:	655a      	str	r2, [r3, #84]	; 0x54
  4027bc:	e7f1      	b.n	4027a2 <_dma_set_irq_state+0x36>
  4027be:	bf00      	nop
  4027c0:	40078000 	.word	0x40078000

004027c4 <XDMAC_Handler>:
	return ((Xdmac *)hw)->XDMAC_GIS;
  4027c4:	4b17      	ldr	r3, [pc, #92]	; (402824 <XDMAC_Handler+0x60>)
  4027c6:	6999      	ldr	r1, [r3, #24]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4027c8:	2300      	movs	r3, #0
  4027ca:	2b17      	cmp	r3, #23
  4027cc:	d81b      	bhi.n	402806 <XDMAC_Handler+0x42>
		if ((pend >> i) & 1) {
  4027ce:	fa21 f203 	lsr.w	r2, r1, r3
  4027d2:	f012 0f01 	tst.w	r2, #1
  4027d6:	d102      	bne.n	4027de <XDMAC_Handler+0x1a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4027d8:	3301      	adds	r3, #1
  4027da:	b2db      	uxtb	r3, r3
  4027dc:	e7f5      	b.n	4027ca <XDMAC_Handler+0x6>
			channel = i;
  4027de:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  4027e0:	2b00      	cmp	r3, #0
  4027e2:	db1d      	blt.n	402820 <XDMAC_Handler+0x5c>
{
  4027e4:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  4027e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  4027ea:	0090      	lsls	r0, r2, #2
  4027ec:	4a0e      	ldr	r2, [pc, #56]	; (402828 <XDMAC_Handler+0x64>)
  4027ee:	4410      	add	r0, r2
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  4027f0:	b2d9      	uxtb	r1, r3
	return ((Xdmac *)hw)->XdmacChid[submodule_index].XDMAC_CIS;
  4027f2:	0189      	lsls	r1, r1, #6
  4027f4:	4a0d      	ldr	r2, [pc, #52]	; (40282c <XDMAC_Handler+0x68>)
  4027f6:	5852      	ldr	r2, [r2, r1]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  4027f8:	f012 0f70 	tst.w	r2, #112	; 0x70
  4027fc:	d106      	bne.n	40280c <XDMAC_Handler+0x48>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  4027fe:	f012 0f01 	tst.w	r2, #1
  402802:	d106      	bne.n	402812 <XDMAC_Handler+0x4e>
  402804:	bd10      	pop	{r4, pc}
	int8_t                channel = -1;
  402806:	f04f 33ff 	mov.w	r3, #4294967295
  40280a:	e7e9      	b.n	4027e0 <XDMAC_Handler+0x1c>
		tmp_resource->dma_cb.error(tmp_resource);
  40280c:	6843      	ldr	r3, [r0, #4]
  40280e:	4798      	blx	r3
  402810:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  402812:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  402816:	00a3      	lsls	r3, r4, #2
  402818:	4a03      	ldr	r2, [pc, #12]	; (402828 <XDMAC_Handler+0x64>)
  40281a:	58d3      	ldr	r3, [r2, r3]
  40281c:	4798      	blx	r3
  40281e:	e7f1      	b.n	402804 <XDMAC_Handler+0x40>
  402820:	4770      	bx	lr
  402822:	bf00      	nop
  402824:	40078000 	.word	0x40078000
  402828:	204003a0 	.word	0x204003a0
  40282c:	4007805c 	.word	0x4007805c

00402830 <main>:




int main(void)
{
  402830:	b580      	push	{r7, lr}
	
	
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  402832:	4b17      	ldr	r3, [pc, #92]	; (402890 <main+0x60>)
  402834:	4798      	blx	r3
	//CAN is currently disabled
	//Temp 3 currently disabled as pin is shared with edbg com
	
	/* Additional User initialisation */
	dma_adc_init();
  402836:	4b17      	ldr	r3, [pc, #92]	; (402894 <main+0x64>)
  402838:	4798      	blx	r3
	pwm_init_user();
  40283a:	4b17      	ldr	r3, [pc, #92]	; (402898 <main+0x68>)
  40283c:	4798      	blx	r3
	encoder_init();
  40283e:	4b17      	ldr	r3, [pc, #92]	; (40289c <main+0x6c>)
  402840:	4798      	blx	r3
	pos_sens_init();
  402842:	4b17      	ldr	r3, [pc, #92]	; (4028a0 <main+0x70>)
  402844:	4798      	blx	r3
	
	/* Enable all devices */
	pwm_enable_all();
  402846:	4b17      	ldr	r3, [pc, #92]	; (4028a4 <main+0x74>)
  402848:	4798      	blx	r3
	adc_enable_all();
  40284a:	4b17      	ldr	r3, [pc, #92]	; (4028a8 <main+0x78>)
  40284c:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  40284e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  402852:	4b16      	ldr	r3, [pc, #88]	; (4028ac <main+0x7c>)
  402854:	631a      	str	r2, [r3, #48]	; 0x30
	gpio_set_pin_level(PIN_GPIO_DCDC_ON_OFF, true);		//enables the DC-DC converter for the HV side
	
	timer_start(&ENCODER_A);
  402856:	4816      	ldr	r0, [pc, #88]	; (4028b0 <main+0x80>)
  402858:	4c16      	ldr	r4, [pc, #88]	; (4028b4 <main+0x84>)
  40285a:	47a0      	blx	r4
	timer_start(&ENCODER_B);
  40285c:	4816      	ldr	r0, [pc, #88]	; (4028b8 <main+0x88>)
  40285e:	47a0      	blx	r4
  402860:	4f16      	ldr	r7, [pc, #88]	; (4028bc <main+0x8c>)
  402862:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
  402866:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
  40286a:	4d15      	ldr	r5, [pc, #84]	; (4028c0 <main+0x90>)
  40286c:	f44f 7680 	mov.w	r6, #256	; 0x100
  402870:	632e      	str	r6, [r5, #48]	; 0x30
	/* Replace with your application code */
	while (1) {
		
		gpio_set_pin_level(PIN_GPIO_6,true);
		gpio_set_pin_level(PIN_USER_LED,true);
		delay_ms(500);
  402872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402876:	4c13      	ldr	r4, [pc, #76]	; (4028c4 <main+0x94>)
  402878:	47a0      	blx	r4
		
		dma_adc_0_enable_for_one_transaction();
  40287a:	4b13      	ldr	r3, [pc, #76]	; (4028c8 <main+0x98>)
  40287c:	4798      	blx	r3
		dma_adc_1_enable_for_one_transaction();
  40287e:	4b13      	ldr	r3, [pc, #76]	; (4028cc <main+0x9c>)
  402880:	4798      	blx	r3
	((Pio *)hw)->PIO_CODR = mask;
  402882:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  402886:	636e      	str	r6, [r5, #52]	; 0x34
		//printf("main - %i %i %i %i %i %i %i %i %i %i %i %i  \n", (int)afec_buf[0],(int)afec_buf[1],(int)afec_buf[2],(int)afec_buf[3],(int)afec_buf[4],(int)afec_buf[5],(int)afec_buf[6],(int)afec_buf[7],(int)afec_buf[8],(int)afec_buf[9],(int)afec_buf[10],(int)afec_buf[11]);
		//AFEC0_Handler
		
		gpio_set_pin_level(PIN_GPIO_6,false);
		gpio_set_pin_level(PIN_USER_LED,false);
		delay_ms(500);
  402888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  40288c:	47a0      	blx	r4
  40288e:	e7e7      	b.n	402860 <main+0x30>
  402890:	004001d5 	.word	0x004001d5
  402894:	004006fd 	.word	0x004006fd
  402898:	0040085d 	.word	0x0040085d
  40289c:	00400231 	.word	0x00400231
  4028a0:	0040048d 	.word	0x0040048d
  4028a4:	00400931 	.word	0x00400931
  4028a8:	004007d9 	.word	0x004007d9
  4028ac:	400e0e00 	.word	0x400e0e00
  4028b0:	2040066c 	.word	0x2040066c
  4028b4:	00401595 	.word	0x00401595
  4028b8:	204005bc 	.word	0x204005bc
  4028bc:	400e1400 	.word	0x400e1400
  4028c0:	400e1200 	.word	0x400e1200
  4028c4:	004011cd 	.word	0x004011cd
  4028c8:	00400511 	.word	0x00400511
  4028cc:	004005fd 	.word	0x004005fd

004028d0 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  4028d0:	b958      	cbnz	r0, 4028ea <_read+0x1a>
{
  4028d2:	b508      	push	{r3, lr}
  4028d4:	460b      	mov	r3, r1
  4028d6:	4611      	mov	r1, r2
  4028d8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  4028da:	4b05      	ldr	r3, [pc, #20]	; (4028f0 <_read+0x20>)
  4028dc:	4798      	blx	r3
	if (n < 0) {
  4028de:	2800      	cmp	r0, #0
  4028e0:	db00      	blt.n	4028e4 <_read+0x14>
		return -1;
	}

	return n;
}
  4028e2:	bd08      	pop	{r3, pc}
		return -1;
  4028e4:	f04f 30ff 	mov.w	r0, #4294967295
  4028e8:	bd08      	pop	{r3, pc}
		return -1;
  4028ea:	f04f 30ff 	mov.w	r0, #4294967295
  4028ee:	4770      	bx	lr
  4028f0:	00402949 	.word	0x00402949

004028f4 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  4028f4:	3801      	subs	r0, #1
  4028f6:	2802      	cmp	r0, #2
  4028f8:	d80b      	bhi.n	402912 <_write+0x1e>
{
  4028fa:	b508      	push	{r3, lr}
  4028fc:	460b      	mov	r3, r1
  4028fe:	4611      	mov	r1, r2
  402900:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  402902:	4b05      	ldr	r3, [pc, #20]	; (402918 <_write+0x24>)
  402904:	4798      	blx	r3
	if (n < 0) {
  402906:	2800      	cmp	r0, #0
  402908:	db00      	blt.n	40290c <_write+0x18>
		return -1;
	}

	return n;
}
  40290a:	bd08      	pop	{r3, pc}
		return -1;
  40290c:	f04f 30ff 	mov.w	r0, #4294967295
  402910:	bd08      	pop	{r3, pc}
		return -1;
  402912:	f04f 30ff 	mov.w	r0, #4294967295
  402916:	4770      	bx	lr
  402918:	0040296d 	.word	0x0040296d

0040291c <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  40291c:	b570      	push	{r4, r5, r6, lr}
  40291e:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  402920:	4d06      	ldr	r5, [pc, #24]	; (40293c <stdio_io_init+0x20>)
  402922:	682b      	ldr	r3, [r5, #0]
  402924:	2100      	movs	r1, #0
  402926:	6898      	ldr	r0, [r3, #8]
  402928:	4c05      	ldr	r4, [pc, #20]	; (402940 <stdio_io_init+0x24>)
  40292a:	47a0      	blx	r4
	setbuf(stdin, NULL);
  40292c:	682b      	ldr	r3, [r5, #0]
  40292e:	2100      	movs	r1, #0
  402930:	6858      	ldr	r0, [r3, #4]
  402932:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  402934:	4b03      	ldr	r3, [pc, #12]	; (402944 <stdio_io_init+0x28>)
  402936:	601e      	str	r6, [r3, #0]
  402938:	bd70      	pop	{r4, r5, r6, pc}
  40293a:	bf00      	nop
  40293c:	20400048 	.word	0x20400048
  402940:	00403c01 	.word	0x00403c01
  402944:	204004c0 	.word	0x204004c0

00402948 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  402948:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40294a:	4b06      	ldr	r3, [pc, #24]	; (402964 <stdio_io_read+0x1c>)
  40294c:	681b      	ldr	r3, [r3, #0]
  40294e:	b133      	cbz	r3, 40295e <stdio_io_read+0x16>
  402950:	460a      	mov	r2, r1
  402952:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  402954:	b292      	uxth	r2, r2
  402956:	4618      	mov	r0, r3
  402958:	4b03      	ldr	r3, [pc, #12]	; (402968 <stdio_io_read+0x20>)
  40295a:	4798      	blx	r3
  40295c:	bd08      	pop	{r3, pc}
		return 0;
  40295e:	2000      	movs	r0, #0
}
  402960:	bd08      	pop	{r3, pc}
  402962:	bf00      	nop
  402964:	204004c0 	.word	0x204004c0
  402968:	00401365 	.word	0x00401365

0040296c <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  40296c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40296e:	4b06      	ldr	r3, [pc, #24]	; (402988 <stdio_io_write+0x1c>)
  402970:	681b      	ldr	r3, [r3, #0]
  402972:	b133      	cbz	r3, 402982 <stdio_io_write+0x16>
  402974:	460a      	mov	r2, r1
  402976:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  402978:	b292      	uxth	r2, r2
  40297a:	4618      	mov	r0, r3
  40297c:	4b03      	ldr	r3, [pc, #12]	; (40298c <stdio_io_write+0x20>)
  40297e:	4798      	blx	r3
  402980:	bd08      	pop	{r3, pc}
		return 0;
  402982:	2000      	movs	r0, #0
}
  402984:	bd08      	pop	{r3, pc}
  402986:	bf00      	nop
  402988:	204004c0 	.word	0x204004c0
  40298c:	00401335 	.word	0x00401335

00402990 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  402990:	b510      	push	{r4, lr}

	usart_sync_enable(&EDBG_COM);
  402992:	4c04      	ldr	r4, [pc, #16]	; (4029a4 <stdio_redirect_init+0x14>)
  402994:	4620      	mov	r0, r4
  402996:	4b04      	ldr	r3, [pc, #16]	; (4029a8 <stdio_redirect_init+0x18>)
  402998:	4798      	blx	r3
	stdio_io_init(&EDBG_COM.io);
  40299a:	4620      	mov	r0, r4
  40299c:	4b03      	ldr	r3, [pc, #12]	; (4029ac <stdio_redirect_init+0x1c>)
  40299e:	4798      	blx	r3
  4029a0:	bd10      	pop	{r4, pc}
  4029a2:	bf00      	nop
  4029a4:	20400660 	.word	0x20400660
  4029a8:	004016e9 	.word	0x004016e9
  4029ac:	0040291d 	.word	0x0040291d

004029b0 <__aeabi_drsub>:
  4029b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4029b4:	e002      	b.n	4029bc <__adddf3>
  4029b6:	bf00      	nop

004029b8 <__aeabi_dsub>:
  4029b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004029bc <__adddf3>:
  4029bc:	b530      	push	{r4, r5, lr}
  4029be:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4029c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4029c6:	ea94 0f05 	teq	r4, r5
  4029ca:	bf08      	it	eq
  4029cc:	ea90 0f02 	teqeq	r0, r2
  4029d0:	bf1f      	itttt	ne
  4029d2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4029d6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4029da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4029de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4029e2:	f000 80e2 	beq.w	402baa <__adddf3+0x1ee>
  4029e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4029ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4029ee:	bfb8      	it	lt
  4029f0:	426d      	neglt	r5, r5
  4029f2:	dd0c      	ble.n	402a0e <__adddf3+0x52>
  4029f4:	442c      	add	r4, r5
  4029f6:	ea80 0202 	eor.w	r2, r0, r2
  4029fa:	ea81 0303 	eor.w	r3, r1, r3
  4029fe:	ea82 0000 	eor.w	r0, r2, r0
  402a02:	ea83 0101 	eor.w	r1, r3, r1
  402a06:	ea80 0202 	eor.w	r2, r0, r2
  402a0a:	ea81 0303 	eor.w	r3, r1, r3
  402a0e:	2d36      	cmp	r5, #54	; 0x36
  402a10:	bf88      	it	hi
  402a12:	bd30      	pophi	{r4, r5, pc}
  402a14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402a18:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402a1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402a20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402a24:	d002      	beq.n	402a2c <__adddf3+0x70>
  402a26:	4240      	negs	r0, r0
  402a28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402a2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402a30:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402a34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402a38:	d002      	beq.n	402a40 <__adddf3+0x84>
  402a3a:	4252      	negs	r2, r2
  402a3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402a40:	ea94 0f05 	teq	r4, r5
  402a44:	f000 80a7 	beq.w	402b96 <__adddf3+0x1da>
  402a48:	f1a4 0401 	sub.w	r4, r4, #1
  402a4c:	f1d5 0e20 	rsbs	lr, r5, #32
  402a50:	db0d      	blt.n	402a6e <__adddf3+0xb2>
  402a52:	fa02 fc0e 	lsl.w	ip, r2, lr
  402a56:	fa22 f205 	lsr.w	r2, r2, r5
  402a5a:	1880      	adds	r0, r0, r2
  402a5c:	f141 0100 	adc.w	r1, r1, #0
  402a60:	fa03 f20e 	lsl.w	r2, r3, lr
  402a64:	1880      	adds	r0, r0, r2
  402a66:	fa43 f305 	asr.w	r3, r3, r5
  402a6a:	4159      	adcs	r1, r3
  402a6c:	e00e      	b.n	402a8c <__adddf3+0xd0>
  402a6e:	f1a5 0520 	sub.w	r5, r5, #32
  402a72:	f10e 0e20 	add.w	lr, lr, #32
  402a76:	2a01      	cmp	r2, #1
  402a78:	fa03 fc0e 	lsl.w	ip, r3, lr
  402a7c:	bf28      	it	cs
  402a7e:	f04c 0c02 	orrcs.w	ip, ip, #2
  402a82:	fa43 f305 	asr.w	r3, r3, r5
  402a86:	18c0      	adds	r0, r0, r3
  402a88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402a8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402a90:	d507      	bpl.n	402aa2 <__adddf3+0xe6>
  402a92:	f04f 0e00 	mov.w	lr, #0
  402a96:	f1dc 0c00 	rsbs	ip, ip, #0
  402a9a:	eb7e 0000 	sbcs.w	r0, lr, r0
  402a9e:	eb6e 0101 	sbc.w	r1, lr, r1
  402aa2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402aa6:	d31b      	bcc.n	402ae0 <__adddf3+0x124>
  402aa8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402aac:	d30c      	bcc.n	402ac8 <__adddf3+0x10c>
  402aae:	0849      	lsrs	r1, r1, #1
  402ab0:	ea5f 0030 	movs.w	r0, r0, rrx
  402ab4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402ab8:	f104 0401 	add.w	r4, r4, #1
  402abc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402ac0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402ac4:	f080 809a 	bcs.w	402bfc <__adddf3+0x240>
  402ac8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402acc:	bf08      	it	eq
  402ace:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402ad2:	f150 0000 	adcs.w	r0, r0, #0
  402ad6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402ada:	ea41 0105 	orr.w	r1, r1, r5
  402ade:	bd30      	pop	{r4, r5, pc}
  402ae0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402ae4:	4140      	adcs	r0, r0
  402ae6:	eb41 0101 	adc.w	r1, r1, r1
  402aea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402aee:	f1a4 0401 	sub.w	r4, r4, #1
  402af2:	d1e9      	bne.n	402ac8 <__adddf3+0x10c>
  402af4:	f091 0f00 	teq	r1, #0
  402af8:	bf04      	itt	eq
  402afa:	4601      	moveq	r1, r0
  402afc:	2000      	moveq	r0, #0
  402afe:	fab1 f381 	clz	r3, r1
  402b02:	bf08      	it	eq
  402b04:	3320      	addeq	r3, #32
  402b06:	f1a3 030b 	sub.w	r3, r3, #11
  402b0a:	f1b3 0220 	subs.w	r2, r3, #32
  402b0e:	da0c      	bge.n	402b2a <__adddf3+0x16e>
  402b10:	320c      	adds	r2, #12
  402b12:	dd08      	ble.n	402b26 <__adddf3+0x16a>
  402b14:	f102 0c14 	add.w	ip, r2, #20
  402b18:	f1c2 020c 	rsb	r2, r2, #12
  402b1c:	fa01 f00c 	lsl.w	r0, r1, ip
  402b20:	fa21 f102 	lsr.w	r1, r1, r2
  402b24:	e00c      	b.n	402b40 <__adddf3+0x184>
  402b26:	f102 0214 	add.w	r2, r2, #20
  402b2a:	bfd8      	it	le
  402b2c:	f1c2 0c20 	rsble	ip, r2, #32
  402b30:	fa01 f102 	lsl.w	r1, r1, r2
  402b34:	fa20 fc0c 	lsr.w	ip, r0, ip
  402b38:	bfdc      	itt	le
  402b3a:	ea41 010c 	orrle.w	r1, r1, ip
  402b3e:	4090      	lslle	r0, r2
  402b40:	1ae4      	subs	r4, r4, r3
  402b42:	bfa2      	ittt	ge
  402b44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402b48:	4329      	orrge	r1, r5
  402b4a:	bd30      	popge	{r4, r5, pc}
  402b4c:	ea6f 0404 	mvn.w	r4, r4
  402b50:	3c1f      	subs	r4, #31
  402b52:	da1c      	bge.n	402b8e <__adddf3+0x1d2>
  402b54:	340c      	adds	r4, #12
  402b56:	dc0e      	bgt.n	402b76 <__adddf3+0x1ba>
  402b58:	f104 0414 	add.w	r4, r4, #20
  402b5c:	f1c4 0220 	rsb	r2, r4, #32
  402b60:	fa20 f004 	lsr.w	r0, r0, r4
  402b64:	fa01 f302 	lsl.w	r3, r1, r2
  402b68:	ea40 0003 	orr.w	r0, r0, r3
  402b6c:	fa21 f304 	lsr.w	r3, r1, r4
  402b70:	ea45 0103 	orr.w	r1, r5, r3
  402b74:	bd30      	pop	{r4, r5, pc}
  402b76:	f1c4 040c 	rsb	r4, r4, #12
  402b7a:	f1c4 0220 	rsb	r2, r4, #32
  402b7e:	fa20 f002 	lsr.w	r0, r0, r2
  402b82:	fa01 f304 	lsl.w	r3, r1, r4
  402b86:	ea40 0003 	orr.w	r0, r0, r3
  402b8a:	4629      	mov	r1, r5
  402b8c:	bd30      	pop	{r4, r5, pc}
  402b8e:	fa21 f004 	lsr.w	r0, r1, r4
  402b92:	4629      	mov	r1, r5
  402b94:	bd30      	pop	{r4, r5, pc}
  402b96:	f094 0f00 	teq	r4, #0
  402b9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402b9e:	bf06      	itte	eq
  402ba0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402ba4:	3401      	addeq	r4, #1
  402ba6:	3d01      	subne	r5, #1
  402ba8:	e74e      	b.n	402a48 <__adddf3+0x8c>
  402baa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402bae:	bf18      	it	ne
  402bb0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402bb4:	d029      	beq.n	402c0a <__adddf3+0x24e>
  402bb6:	ea94 0f05 	teq	r4, r5
  402bba:	bf08      	it	eq
  402bbc:	ea90 0f02 	teqeq	r0, r2
  402bc0:	d005      	beq.n	402bce <__adddf3+0x212>
  402bc2:	ea54 0c00 	orrs.w	ip, r4, r0
  402bc6:	bf04      	itt	eq
  402bc8:	4619      	moveq	r1, r3
  402bca:	4610      	moveq	r0, r2
  402bcc:	bd30      	pop	{r4, r5, pc}
  402bce:	ea91 0f03 	teq	r1, r3
  402bd2:	bf1e      	ittt	ne
  402bd4:	2100      	movne	r1, #0
  402bd6:	2000      	movne	r0, #0
  402bd8:	bd30      	popne	{r4, r5, pc}
  402bda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402bde:	d105      	bne.n	402bec <__adddf3+0x230>
  402be0:	0040      	lsls	r0, r0, #1
  402be2:	4149      	adcs	r1, r1
  402be4:	bf28      	it	cs
  402be6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402bea:	bd30      	pop	{r4, r5, pc}
  402bec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402bf0:	bf3c      	itt	cc
  402bf2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402bf6:	bd30      	popcc	{r4, r5, pc}
  402bf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402bfc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402c00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402c04:	f04f 0000 	mov.w	r0, #0
  402c08:	bd30      	pop	{r4, r5, pc}
  402c0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402c0e:	bf1a      	itte	ne
  402c10:	4619      	movne	r1, r3
  402c12:	4610      	movne	r0, r2
  402c14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402c18:	bf1c      	itt	ne
  402c1a:	460b      	movne	r3, r1
  402c1c:	4602      	movne	r2, r0
  402c1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402c22:	bf06      	itte	eq
  402c24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402c28:	ea91 0f03 	teqeq	r1, r3
  402c2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402c30:	bd30      	pop	{r4, r5, pc}
  402c32:	bf00      	nop

00402c34 <__aeabi_ui2d>:
  402c34:	f090 0f00 	teq	r0, #0
  402c38:	bf04      	itt	eq
  402c3a:	2100      	moveq	r1, #0
  402c3c:	4770      	bxeq	lr
  402c3e:	b530      	push	{r4, r5, lr}
  402c40:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402c44:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402c48:	f04f 0500 	mov.w	r5, #0
  402c4c:	f04f 0100 	mov.w	r1, #0
  402c50:	e750      	b.n	402af4 <__adddf3+0x138>
  402c52:	bf00      	nop

00402c54 <__aeabi_i2d>:
  402c54:	f090 0f00 	teq	r0, #0
  402c58:	bf04      	itt	eq
  402c5a:	2100      	moveq	r1, #0
  402c5c:	4770      	bxeq	lr
  402c5e:	b530      	push	{r4, r5, lr}
  402c60:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402c64:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402c68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402c6c:	bf48      	it	mi
  402c6e:	4240      	negmi	r0, r0
  402c70:	f04f 0100 	mov.w	r1, #0
  402c74:	e73e      	b.n	402af4 <__adddf3+0x138>
  402c76:	bf00      	nop

00402c78 <__aeabi_f2d>:
  402c78:	0042      	lsls	r2, r0, #1
  402c7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402c7e:	ea4f 0131 	mov.w	r1, r1, rrx
  402c82:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402c86:	bf1f      	itttt	ne
  402c88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402c8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402c90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402c94:	4770      	bxne	lr
  402c96:	f092 0f00 	teq	r2, #0
  402c9a:	bf14      	ite	ne
  402c9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402ca0:	4770      	bxeq	lr
  402ca2:	b530      	push	{r4, r5, lr}
  402ca4:	f44f 7460 	mov.w	r4, #896	; 0x380
  402ca8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402cac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402cb0:	e720      	b.n	402af4 <__adddf3+0x138>
  402cb2:	bf00      	nop

00402cb4 <__aeabi_ul2d>:
  402cb4:	ea50 0201 	orrs.w	r2, r0, r1
  402cb8:	bf08      	it	eq
  402cba:	4770      	bxeq	lr
  402cbc:	b530      	push	{r4, r5, lr}
  402cbe:	f04f 0500 	mov.w	r5, #0
  402cc2:	e00a      	b.n	402cda <__aeabi_l2d+0x16>

00402cc4 <__aeabi_l2d>:
  402cc4:	ea50 0201 	orrs.w	r2, r0, r1
  402cc8:	bf08      	it	eq
  402cca:	4770      	bxeq	lr
  402ccc:	b530      	push	{r4, r5, lr}
  402cce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402cd2:	d502      	bpl.n	402cda <__aeabi_l2d+0x16>
  402cd4:	4240      	negs	r0, r0
  402cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402cda:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402cde:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402ce2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402ce6:	f43f aedc 	beq.w	402aa2 <__adddf3+0xe6>
  402cea:	f04f 0203 	mov.w	r2, #3
  402cee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402cf2:	bf18      	it	ne
  402cf4:	3203      	addne	r2, #3
  402cf6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402cfa:	bf18      	it	ne
  402cfc:	3203      	addne	r2, #3
  402cfe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402d02:	f1c2 0320 	rsb	r3, r2, #32
  402d06:	fa00 fc03 	lsl.w	ip, r0, r3
  402d0a:	fa20 f002 	lsr.w	r0, r0, r2
  402d0e:	fa01 fe03 	lsl.w	lr, r1, r3
  402d12:	ea40 000e 	orr.w	r0, r0, lr
  402d16:	fa21 f102 	lsr.w	r1, r1, r2
  402d1a:	4414      	add	r4, r2
  402d1c:	e6c1      	b.n	402aa2 <__adddf3+0xe6>
  402d1e:	bf00      	nop

00402d20 <__aeabi_dmul>:
  402d20:	b570      	push	{r4, r5, r6, lr}
  402d22:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402d26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402d2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402d2e:	bf1d      	ittte	ne
  402d30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402d34:	ea94 0f0c 	teqne	r4, ip
  402d38:	ea95 0f0c 	teqne	r5, ip
  402d3c:	f000 f8de 	bleq	402efc <__aeabi_dmul+0x1dc>
  402d40:	442c      	add	r4, r5
  402d42:	ea81 0603 	eor.w	r6, r1, r3
  402d46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402d4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402d4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402d52:	bf18      	it	ne
  402d54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402d58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402d60:	d038      	beq.n	402dd4 <__aeabi_dmul+0xb4>
  402d62:	fba0 ce02 	umull	ip, lr, r0, r2
  402d66:	f04f 0500 	mov.w	r5, #0
  402d6a:	fbe1 e502 	umlal	lr, r5, r1, r2
  402d6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402d72:	fbe0 e503 	umlal	lr, r5, r0, r3
  402d76:	f04f 0600 	mov.w	r6, #0
  402d7a:	fbe1 5603 	umlal	r5, r6, r1, r3
  402d7e:	f09c 0f00 	teq	ip, #0
  402d82:	bf18      	it	ne
  402d84:	f04e 0e01 	orrne.w	lr, lr, #1
  402d88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402d8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402d90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402d94:	d204      	bcs.n	402da0 <__aeabi_dmul+0x80>
  402d96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402d9a:	416d      	adcs	r5, r5
  402d9c:	eb46 0606 	adc.w	r6, r6, r6
  402da0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402da4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402da8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402dac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402db0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402db4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402db8:	bf88      	it	hi
  402dba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402dbe:	d81e      	bhi.n	402dfe <__aeabi_dmul+0xde>
  402dc0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402dc4:	bf08      	it	eq
  402dc6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402dca:	f150 0000 	adcs.w	r0, r0, #0
  402dce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402dd2:	bd70      	pop	{r4, r5, r6, pc}
  402dd4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402dd8:	ea46 0101 	orr.w	r1, r6, r1
  402ddc:	ea40 0002 	orr.w	r0, r0, r2
  402de0:	ea81 0103 	eor.w	r1, r1, r3
  402de4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402de8:	bfc2      	ittt	gt
  402dea:	ebd4 050c 	rsbsgt	r5, r4, ip
  402dee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402df2:	bd70      	popgt	{r4, r5, r6, pc}
  402df4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402df8:	f04f 0e00 	mov.w	lr, #0
  402dfc:	3c01      	subs	r4, #1
  402dfe:	f300 80ab 	bgt.w	402f58 <__aeabi_dmul+0x238>
  402e02:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402e06:	bfde      	ittt	le
  402e08:	2000      	movle	r0, #0
  402e0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402e0e:	bd70      	pople	{r4, r5, r6, pc}
  402e10:	f1c4 0400 	rsb	r4, r4, #0
  402e14:	3c20      	subs	r4, #32
  402e16:	da35      	bge.n	402e84 <__aeabi_dmul+0x164>
  402e18:	340c      	adds	r4, #12
  402e1a:	dc1b      	bgt.n	402e54 <__aeabi_dmul+0x134>
  402e1c:	f104 0414 	add.w	r4, r4, #20
  402e20:	f1c4 0520 	rsb	r5, r4, #32
  402e24:	fa00 f305 	lsl.w	r3, r0, r5
  402e28:	fa20 f004 	lsr.w	r0, r0, r4
  402e2c:	fa01 f205 	lsl.w	r2, r1, r5
  402e30:	ea40 0002 	orr.w	r0, r0, r2
  402e34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402e38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402e3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402e40:	fa21 f604 	lsr.w	r6, r1, r4
  402e44:	eb42 0106 	adc.w	r1, r2, r6
  402e48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402e4c:	bf08      	it	eq
  402e4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402e52:	bd70      	pop	{r4, r5, r6, pc}
  402e54:	f1c4 040c 	rsb	r4, r4, #12
  402e58:	f1c4 0520 	rsb	r5, r4, #32
  402e5c:	fa00 f304 	lsl.w	r3, r0, r4
  402e60:	fa20 f005 	lsr.w	r0, r0, r5
  402e64:	fa01 f204 	lsl.w	r2, r1, r4
  402e68:	ea40 0002 	orr.w	r0, r0, r2
  402e6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402e70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402e74:	f141 0100 	adc.w	r1, r1, #0
  402e78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402e7c:	bf08      	it	eq
  402e7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402e82:	bd70      	pop	{r4, r5, r6, pc}
  402e84:	f1c4 0520 	rsb	r5, r4, #32
  402e88:	fa00 f205 	lsl.w	r2, r0, r5
  402e8c:	ea4e 0e02 	orr.w	lr, lr, r2
  402e90:	fa20 f304 	lsr.w	r3, r0, r4
  402e94:	fa01 f205 	lsl.w	r2, r1, r5
  402e98:	ea43 0302 	orr.w	r3, r3, r2
  402e9c:	fa21 f004 	lsr.w	r0, r1, r4
  402ea0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402ea4:	fa21 f204 	lsr.w	r2, r1, r4
  402ea8:	ea20 0002 	bic.w	r0, r0, r2
  402eac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  402eb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402eb4:	bf08      	it	eq
  402eb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402eba:	bd70      	pop	{r4, r5, r6, pc}
  402ebc:	f094 0f00 	teq	r4, #0
  402ec0:	d10f      	bne.n	402ee2 <__aeabi_dmul+0x1c2>
  402ec2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402ec6:	0040      	lsls	r0, r0, #1
  402ec8:	eb41 0101 	adc.w	r1, r1, r1
  402ecc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402ed0:	bf08      	it	eq
  402ed2:	3c01      	subeq	r4, #1
  402ed4:	d0f7      	beq.n	402ec6 <__aeabi_dmul+0x1a6>
  402ed6:	ea41 0106 	orr.w	r1, r1, r6
  402eda:	f095 0f00 	teq	r5, #0
  402ede:	bf18      	it	ne
  402ee0:	4770      	bxne	lr
  402ee2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402ee6:	0052      	lsls	r2, r2, #1
  402ee8:	eb43 0303 	adc.w	r3, r3, r3
  402eec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  402ef0:	bf08      	it	eq
  402ef2:	3d01      	subeq	r5, #1
  402ef4:	d0f7      	beq.n	402ee6 <__aeabi_dmul+0x1c6>
  402ef6:	ea43 0306 	orr.w	r3, r3, r6
  402efa:	4770      	bx	lr
  402efc:	ea94 0f0c 	teq	r4, ip
  402f00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402f04:	bf18      	it	ne
  402f06:	ea95 0f0c 	teqne	r5, ip
  402f0a:	d00c      	beq.n	402f26 <__aeabi_dmul+0x206>
  402f0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402f10:	bf18      	it	ne
  402f12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402f16:	d1d1      	bne.n	402ebc <__aeabi_dmul+0x19c>
  402f18:	ea81 0103 	eor.w	r1, r1, r3
  402f1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402f20:	f04f 0000 	mov.w	r0, #0
  402f24:	bd70      	pop	{r4, r5, r6, pc}
  402f26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402f2a:	bf06      	itte	eq
  402f2c:	4610      	moveq	r0, r2
  402f2e:	4619      	moveq	r1, r3
  402f30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402f34:	d019      	beq.n	402f6a <__aeabi_dmul+0x24a>
  402f36:	ea94 0f0c 	teq	r4, ip
  402f3a:	d102      	bne.n	402f42 <__aeabi_dmul+0x222>
  402f3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402f40:	d113      	bne.n	402f6a <__aeabi_dmul+0x24a>
  402f42:	ea95 0f0c 	teq	r5, ip
  402f46:	d105      	bne.n	402f54 <__aeabi_dmul+0x234>
  402f48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402f4c:	bf1c      	itt	ne
  402f4e:	4610      	movne	r0, r2
  402f50:	4619      	movne	r1, r3
  402f52:	d10a      	bne.n	402f6a <__aeabi_dmul+0x24a>
  402f54:	ea81 0103 	eor.w	r1, r1, r3
  402f58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402f5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402f60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402f64:	f04f 0000 	mov.w	r0, #0
  402f68:	bd70      	pop	{r4, r5, r6, pc}
  402f6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402f6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402f72:	bd70      	pop	{r4, r5, r6, pc}

00402f74 <__aeabi_ddiv>:
  402f74:	b570      	push	{r4, r5, r6, lr}
  402f76:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402f7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402f7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402f82:	bf1d      	ittte	ne
  402f84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402f88:	ea94 0f0c 	teqne	r4, ip
  402f8c:	ea95 0f0c 	teqne	r5, ip
  402f90:	f000 f8a7 	bleq	4030e2 <__aeabi_ddiv+0x16e>
  402f94:	eba4 0405 	sub.w	r4, r4, r5
  402f98:	ea81 0e03 	eor.w	lr, r1, r3
  402f9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402fa0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402fa4:	f000 8088 	beq.w	4030b8 <__aeabi_ddiv+0x144>
  402fa8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402fac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  402fb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402fb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402fb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402fbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  402fc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402fc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402fc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402fcc:	429d      	cmp	r5, r3
  402fce:	bf08      	it	eq
  402fd0:	4296      	cmpeq	r6, r2
  402fd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402fd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402fda:	d202      	bcs.n	402fe2 <__aeabi_ddiv+0x6e>
  402fdc:	085b      	lsrs	r3, r3, #1
  402fde:	ea4f 0232 	mov.w	r2, r2, rrx
  402fe2:	1ab6      	subs	r6, r6, r2
  402fe4:	eb65 0503 	sbc.w	r5, r5, r3
  402fe8:	085b      	lsrs	r3, r3, #1
  402fea:	ea4f 0232 	mov.w	r2, r2, rrx
  402fee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402ff2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402ff6:	ebb6 0e02 	subs.w	lr, r6, r2
  402ffa:	eb75 0e03 	sbcs.w	lr, r5, r3
  402ffe:	bf22      	ittt	cs
  403000:	1ab6      	subcs	r6, r6, r2
  403002:	4675      	movcs	r5, lr
  403004:	ea40 000c 	orrcs.w	r0, r0, ip
  403008:	085b      	lsrs	r3, r3, #1
  40300a:	ea4f 0232 	mov.w	r2, r2, rrx
  40300e:	ebb6 0e02 	subs.w	lr, r6, r2
  403012:	eb75 0e03 	sbcs.w	lr, r5, r3
  403016:	bf22      	ittt	cs
  403018:	1ab6      	subcs	r6, r6, r2
  40301a:	4675      	movcs	r5, lr
  40301c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403020:	085b      	lsrs	r3, r3, #1
  403022:	ea4f 0232 	mov.w	r2, r2, rrx
  403026:	ebb6 0e02 	subs.w	lr, r6, r2
  40302a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40302e:	bf22      	ittt	cs
  403030:	1ab6      	subcs	r6, r6, r2
  403032:	4675      	movcs	r5, lr
  403034:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403038:	085b      	lsrs	r3, r3, #1
  40303a:	ea4f 0232 	mov.w	r2, r2, rrx
  40303e:	ebb6 0e02 	subs.w	lr, r6, r2
  403042:	eb75 0e03 	sbcs.w	lr, r5, r3
  403046:	bf22      	ittt	cs
  403048:	1ab6      	subcs	r6, r6, r2
  40304a:	4675      	movcs	r5, lr
  40304c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403050:	ea55 0e06 	orrs.w	lr, r5, r6
  403054:	d018      	beq.n	403088 <__aeabi_ddiv+0x114>
  403056:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40305a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40305e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403062:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403066:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40306a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40306e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403072:	d1c0      	bne.n	402ff6 <__aeabi_ddiv+0x82>
  403074:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403078:	d10b      	bne.n	403092 <__aeabi_ddiv+0x11e>
  40307a:	ea41 0100 	orr.w	r1, r1, r0
  40307e:	f04f 0000 	mov.w	r0, #0
  403082:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403086:	e7b6      	b.n	402ff6 <__aeabi_ddiv+0x82>
  403088:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40308c:	bf04      	itt	eq
  40308e:	4301      	orreq	r1, r0
  403090:	2000      	moveq	r0, #0
  403092:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403096:	bf88      	it	hi
  403098:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40309c:	f63f aeaf 	bhi.w	402dfe <__aeabi_dmul+0xde>
  4030a0:	ebb5 0c03 	subs.w	ip, r5, r3
  4030a4:	bf04      	itt	eq
  4030a6:	ebb6 0c02 	subseq.w	ip, r6, r2
  4030aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4030ae:	f150 0000 	adcs.w	r0, r0, #0
  4030b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4030b6:	bd70      	pop	{r4, r5, r6, pc}
  4030b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4030bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4030c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4030c4:	bfc2      	ittt	gt
  4030c6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4030ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4030ce:	bd70      	popgt	{r4, r5, r6, pc}
  4030d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4030d4:	f04f 0e00 	mov.w	lr, #0
  4030d8:	3c01      	subs	r4, #1
  4030da:	e690      	b.n	402dfe <__aeabi_dmul+0xde>
  4030dc:	ea45 0e06 	orr.w	lr, r5, r6
  4030e0:	e68d      	b.n	402dfe <__aeabi_dmul+0xde>
  4030e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4030e6:	ea94 0f0c 	teq	r4, ip
  4030ea:	bf08      	it	eq
  4030ec:	ea95 0f0c 	teqeq	r5, ip
  4030f0:	f43f af3b 	beq.w	402f6a <__aeabi_dmul+0x24a>
  4030f4:	ea94 0f0c 	teq	r4, ip
  4030f8:	d10a      	bne.n	403110 <__aeabi_ddiv+0x19c>
  4030fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4030fe:	f47f af34 	bne.w	402f6a <__aeabi_dmul+0x24a>
  403102:	ea95 0f0c 	teq	r5, ip
  403106:	f47f af25 	bne.w	402f54 <__aeabi_dmul+0x234>
  40310a:	4610      	mov	r0, r2
  40310c:	4619      	mov	r1, r3
  40310e:	e72c      	b.n	402f6a <__aeabi_dmul+0x24a>
  403110:	ea95 0f0c 	teq	r5, ip
  403114:	d106      	bne.n	403124 <__aeabi_ddiv+0x1b0>
  403116:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40311a:	f43f aefd 	beq.w	402f18 <__aeabi_dmul+0x1f8>
  40311e:	4610      	mov	r0, r2
  403120:	4619      	mov	r1, r3
  403122:	e722      	b.n	402f6a <__aeabi_dmul+0x24a>
  403124:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403128:	bf18      	it	ne
  40312a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40312e:	f47f aec5 	bne.w	402ebc <__aeabi_dmul+0x19c>
  403132:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403136:	f47f af0d 	bne.w	402f54 <__aeabi_dmul+0x234>
  40313a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40313e:	f47f aeeb 	bne.w	402f18 <__aeabi_dmul+0x1f8>
  403142:	e712      	b.n	402f6a <__aeabi_dmul+0x24a>

00403144 <__gedf2>:
  403144:	f04f 3cff 	mov.w	ip, #4294967295
  403148:	e006      	b.n	403158 <__cmpdf2+0x4>
  40314a:	bf00      	nop

0040314c <__ledf2>:
  40314c:	f04f 0c01 	mov.w	ip, #1
  403150:	e002      	b.n	403158 <__cmpdf2+0x4>
  403152:	bf00      	nop

00403154 <__cmpdf2>:
  403154:	f04f 0c01 	mov.w	ip, #1
  403158:	f84d cd04 	str.w	ip, [sp, #-4]!
  40315c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403160:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403164:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403168:	bf18      	it	ne
  40316a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40316e:	d01b      	beq.n	4031a8 <__cmpdf2+0x54>
  403170:	b001      	add	sp, #4
  403172:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403176:	bf0c      	ite	eq
  403178:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40317c:	ea91 0f03 	teqne	r1, r3
  403180:	bf02      	ittt	eq
  403182:	ea90 0f02 	teqeq	r0, r2
  403186:	2000      	moveq	r0, #0
  403188:	4770      	bxeq	lr
  40318a:	f110 0f00 	cmn.w	r0, #0
  40318e:	ea91 0f03 	teq	r1, r3
  403192:	bf58      	it	pl
  403194:	4299      	cmppl	r1, r3
  403196:	bf08      	it	eq
  403198:	4290      	cmpeq	r0, r2
  40319a:	bf2c      	ite	cs
  40319c:	17d8      	asrcs	r0, r3, #31
  40319e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4031a2:	f040 0001 	orr.w	r0, r0, #1
  4031a6:	4770      	bx	lr
  4031a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4031ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4031b0:	d102      	bne.n	4031b8 <__cmpdf2+0x64>
  4031b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4031b6:	d107      	bne.n	4031c8 <__cmpdf2+0x74>
  4031b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4031bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4031c0:	d1d6      	bne.n	403170 <__cmpdf2+0x1c>
  4031c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4031c6:	d0d3      	beq.n	403170 <__cmpdf2+0x1c>
  4031c8:	f85d 0b04 	ldr.w	r0, [sp], #4
  4031cc:	4770      	bx	lr
  4031ce:	bf00      	nop

004031d0 <__aeabi_cdrcmple>:
  4031d0:	4684      	mov	ip, r0
  4031d2:	4610      	mov	r0, r2
  4031d4:	4662      	mov	r2, ip
  4031d6:	468c      	mov	ip, r1
  4031d8:	4619      	mov	r1, r3
  4031da:	4663      	mov	r3, ip
  4031dc:	e000      	b.n	4031e0 <__aeabi_cdcmpeq>
  4031de:	bf00      	nop

004031e0 <__aeabi_cdcmpeq>:
  4031e0:	b501      	push	{r0, lr}
  4031e2:	f7ff ffb7 	bl	403154 <__cmpdf2>
  4031e6:	2800      	cmp	r0, #0
  4031e8:	bf48      	it	mi
  4031ea:	f110 0f00 	cmnmi.w	r0, #0
  4031ee:	bd01      	pop	{r0, pc}

004031f0 <__aeabi_dcmpeq>:
  4031f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4031f4:	f7ff fff4 	bl	4031e0 <__aeabi_cdcmpeq>
  4031f8:	bf0c      	ite	eq
  4031fa:	2001      	moveq	r0, #1
  4031fc:	2000      	movne	r0, #0
  4031fe:	f85d fb08 	ldr.w	pc, [sp], #8
  403202:	bf00      	nop

00403204 <__aeabi_dcmplt>:
  403204:	f84d ed08 	str.w	lr, [sp, #-8]!
  403208:	f7ff ffea 	bl	4031e0 <__aeabi_cdcmpeq>
  40320c:	bf34      	ite	cc
  40320e:	2001      	movcc	r0, #1
  403210:	2000      	movcs	r0, #0
  403212:	f85d fb08 	ldr.w	pc, [sp], #8
  403216:	bf00      	nop

00403218 <__aeabi_dcmple>:
  403218:	f84d ed08 	str.w	lr, [sp, #-8]!
  40321c:	f7ff ffe0 	bl	4031e0 <__aeabi_cdcmpeq>
  403220:	bf94      	ite	ls
  403222:	2001      	movls	r0, #1
  403224:	2000      	movhi	r0, #0
  403226:	f85d fb08 	ldr.w	pc, [sp], #8
  40322a:	bf00      	nop

0040322c <__aeabi_dcmpge>:
  40322c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403230:	f7ff ffce 	bl	4031d0 <__aeabi_cdrcmple>
  403234:	bf94      	ite	ls
  403236:	2001      	movls	r0, #1
  403238:	2000      	movhi	r0, #0
  40323a:	f85d fb08 	ldr.w	pc, [sp], #8
  40323e:	bf00      	nop

00403240 <__aeabi_dcmpgt>:
  403240:	f84d ed08 	str.w	lr, [sp, #-8]!
  403244:	f7ff ffc4 	bl	4031d0 <__aeabi_cdrcmple>
  403248:	bf34      	ite	cc
  40324a:	2001      	movcc	r0, #1
  40324c:	2000      	movcs	r0, #0
  40324e:	f85d fb08 	ldr.w	pc, [sp], #8
  403252:	bf00      	nop

00403254 <__aeabi_d2iz>:
  403254:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403258:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40325c:	d215      	bcs.n	40328a <__aeabi_d2iz+0x36>
  40325e:	d511      	bpl.n	403284 <__aeabi_d2iz+0x30>
  403260:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403264:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403268:	d912      	bls.n	403290 <__aeabi_d2iz+0x3c>
  40326a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40326e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403272:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403276:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40327a:	fa23 f002 	lsr.w	r0, r3, r2
  40327e:	bf18      	it	ne
  403280:	4240      	negne	r0, r0
  403282:	4770      	bx	lr
  403284:	f04f 0000 	mov.w	r0, #0
  403288:	4770      	bx	lr
  40328a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40328e:	d105      	bne.n	40329c <__aeabi_d2iz+0x48>
  403290:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  403294:	bf08      	it	eq
  403296:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40329a:	4770      	bx	lr
  40329c:	f04f 0000 	mov.w	r0, #0
  4032a0:	4770      	bx	lr
  4032a2:	bf00      	nop

004032a4 <__libc_init_array>:
  4032a4:	b570      	push	{r4, r5, r6, lr}
  4032a6:	4e0d      	ldr	r6, [pc, #52]	; (4032dc <__libc_init_array+0x38>)
  4032a8:	4c0d      	ldr	r4, [pc, #52]	; (4032e0 <__libc_init_array+0x3c>)
  4032aa:	1ba4      	subs	r4, r4, r6
  4032ac:	10a4      	asrs	r4, r4, #2
  4032ae:	2500      	movs	r5, #0
  4032b0:	42a5      	cmp	r5, r4
  4032b2:	d109      	bne.n	4032c8 <__libc_init_array+0x24>
  4032b4:	4e0b      	ldr	r6, [pc, #44]	; (4032e4 <__libc_init_array+0x40>)
  4032b6:	4c0c      	ldr	r4, [pc, #48]	; (4032e8 <__libc_init_array+0x44>)
  4032b8:	f003 f842 	bl	406340 <_init>
  4032bc:	1ba4      	subs	r4, r4, r6
  4032be:	10a4      	asrs	r4, r4, #2
  4032c0:	2500      	movs	r5, #0
  4032c2:	42a5      	cmp	r5, r4
  4032c4:	d105      	bne.n	4032d2 <__libc_init_array+0x2e>
  4032c6:	bd70      	pop	{r4, r5, r6, pc}
  4032c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4032cc:	4798      	blx	r3
  4032ce:	3501      	adds	r5, #1
  4032d0:	e7ee      	b.n	4032b0 <__libc_init_array+0xc>
  4032d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4032d6:	4798      	blx	r3
  4032d8:	3501      	adds	r5, #1
  4032da:	e7f2      	b.n	4032c2 <__libc_init_array+0x1e>
  4032dc:	0040634c 	.word	0x0040634c
  4032e0:	0040634c 	.word	0x0040634c
  4032e4:	0040634c 	.word	0x0040634c
  4032e8:	00406350 	.word	0x00406350

004032ec <memcpy>:
  4032ec:	b510      	push	{r4, lr}
  4032ee:	1e43      	subs	r3, r0, #1
  4032f0:	440a      	add	r2, r1
  4032f2:	4291      	cmp	r1, r2
  4032f4:	d100      	bne.n	4032f8 <memcpy+0xc>
  4032f6:	bd10      	pop	{r4, pc}
  4032f8:	f811 4b01 	ldrb.w	r4, [r1], #1
  4032fc:	f803 4f01 	strb.w	r4, [r3, #1]!
  403300:	e7f7      	b.n	4032f2 <memcpy+0x6>

00403302 <memset>:
  403302:	4402      	add	r2, r0
  403304:	4603      	mov	r3, r0
  403306:	4293      	cmp	r3, r2
  403308:	d100      	bne.n	40330c <memset+0xa>
  40330a:	4770      	bx	lr
  40330c:	f803 1b01 	strb.w	r1, [r3], #1
  403310:	e7f9      	b.n	403306 <memset+0x4>

00403312 <__cvt>:
  403312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403316:	b088      	sub	sp, #32
  403318:	2b00      	cmp	r3, #0
  40331a:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40331c:	9912      	ldr	r1, [sp, #72]	; 0x48
  40331e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403320:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  403324:	461e      	mov	r6, r3
  403326:	f027 0720 	bic.w	r7, r7, #32
  40332a:	bfbb      	ittet	lt
  40332c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  403330:	461e      	movlt	r6, r3
  403332:	2300      	movge	r3, #0
  403334:	232d      	movlt	r3, #45	; 0x2d
  403336:	2f46      	cmp	r7, #70	; 0x46
  403338:	4614      	mov	r4, r2
  40333a:	700b      	strb	r3, [r1, #0]
  40333c:	d004      	beq.n	403348 <__cvt+0x36>
  40333e:	2f45      	cmp	r7, #69	; 0x45
  403340:	d100      	bne.n	403344 <__cvt+0x32>
  403342:	3501      	adds	r5, #1
  403344:	2302      	movs	r3, #2
  403346:	e000      	b.n	40334a <__cvt+0x38>
  403348:	2303      	movs	r3, #3
  40334a:	aa07      	add	r2, sp, #28
  40334c:	9204      	str	r2, [sp, #16]
  40334e:	aa06      	add	r2, sp, #24
  403350:	9203      	str	r2, [sp, #12]
  403352:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  403356:	4622      	mov	r2, r4
  403358:	4633      	mov	r3, r6
  40335a:	f000 fd9d 	bl	403e98 <_dtoa_r>
  40335e:	2f47      	cmp	r7, #71	; 0x47
  403360:	4680      	mov	r8, r0
  403362:	d102      	bne.n	40336a <__cvt+0x58>
  403364:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403366:	07db      	lsls	r3, r3, #31
  403368:	d526      	bpl.n	4033b8 <__cvt+0xa6>
  40336a:	2f46      	cmp	r7, #70	; 0x46
  40336c:	eb08 0905 	add.w	r9, r8, r5
  403370:	d111      	bne.n	403396 <__cvt+0x84>
  403372:	f898 3000 	ldrb.w	r3, [r8]
  403376:	2b30      	cmp	r3, #48	; 0x30
  403378:	d10a      	bne.n	403390 <__cvt+0x7e>
  40337a:	2200      	movs	r2, #0
  40337c:	2300      	movs	r3, #0
  40337e:	4620      	mov	r0, r4
  403380:	4631      	mov	r1, r6
  403382:	f7ff ff35 	bl	4031f0 <__aeabi_dcmpeq>
  403386:	b918      	cbnz	r0, 403390 <__cvt+0x7e>
  403388:	f1c5 0501 	rsb	r5, r5, #1
  40338c:	f8ca 5000 	str.w	r5, [sl]
  403390:	f8da 3000 	ldr.w	r3, [sl]
  403394:	4499      	add	r9, r3
  403396:	2200      	movs	r2, #0
  403398:	2300      	movs	r3, #0
  40339a:	4620      	mov	r0, r4
  40339c:	4631      	mov	r1, r6
  40339e:	f7ff ff27 	bl	4031f0 <__aeabi_dcmpeq>
  4033a2:	b938      	cbnz	r0, 4033b4 <__cvt+0xa2>
  4033a4:	2230      	movs	r2, #48	; 0x30
  4033a6:	9b07      	ldr	r3, [sp, #28]
  4033a8:	4599      	cmp	r9, r3
  4033aa:	d905      	bls.n	4033b8 <__cvt+0xa6>
  4033ac:	1c59      	adds	r1, r3, #1
  4033ae:	9107      	str	r1, [sp, #28]
  4033b0:	701a      	strb	r2, [r3, #0]
  4033b2:	e7f8      	b.n	4033a6 <__cvt+0x94>
  4033b4:	f8cd 901c 	str.w	r9, [sp, #28]
  4033b8:	9b07      	ldr	r3, [sp, #28]
  4033ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4033bc:	eba3 0308 	sub.w	r3, r3, r8
  4033c0:	4640      	mov	r0, r8
  4033c2:	6013      	str	r3, [r2, #0]
  4033c4:	b008      	add	sp, #32
  4033c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004033ca <__exponent>:
  4033ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  4033cc:	4603      	mov	r3, r0
  4033ce:	2900      	cmp	r1, #0
  4033d0:	bfb8      	it	lt
  4033d2:	4249      	neglt	r1, r1
  4033d4:	f803 2b02 	strb.w	r2, [r3], #2
  4033d8:	bfb4      	ite	lt
  4033da:	222d      	movlt	r2, #45	; 0x2d
  4033dc:	222b      	movge	r2, #43	; 0x2b
  4033de:	2909      	cmp	r1, #9
  4033e0:	7042      	strb	r2, [r0, #1]
  4033e2:	dd20      	ble.n	403426 <__exponent+0x5c>
  4033e4:	f10d 0207 	add.w	r2, sp, #7
  4033e8:	4617      	mov	r7, r2
  4033ea:	260a      	movs	r6, #10
  4033ec:	fb91 f5f6 	sdiv	r5, r1, r6
  4033f0:	fb06 1115 	mls	r1, r6, r5, r1
  4033f4:	3130      	adds	r1, #48	; 0x30
  4033f6:	2d09      	cmp	r5, #9
  4033f8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4033fc:	f102 34ff 	add.w	r4, r2, #4294967295
  403400:	4629      	mov	r1, r5
  403402:	dc09      	bgt.n	403418 <__exponent+0x4e>
  403404:	3130      	adds	r1, #48	; 0x30
  403406:	3a02      	subs	r2, #2
  403408:	f804 1c01 	strb.w	r1, [r4, #-1]
  40340c:	42ba      	cmp	r2, r7
  40340e:	461c      	mov	r4, r3
  403410:	d304      	bcc.n	40341c <__exponent+0x52>
  403412:	1a20      	subs	r0, r4, r0
  403414:	b003      	add	sp, #12
  403416:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403418:	4622      	mov	r2, r4
  40341a:	e7e7      	b.n	4033ec <__exponent+0x22>
  40341c:	f812 1b01 	ldrb.w	r1, [r2], #1
  403420:	f803 1b01 	strb.w	r1, [r3], #1
  403424:	e7f2      	b.n	40340c <__exponent+0x42>
  403426:	2230      	movs	r2, #48	; 0x30
  403428:	461c      	mov	r4, r3
  40342a:	4411      	add	r1, r2
  40342c:	f804 2b02 	strb.w	r2, [r4], #2
  403430:	7059      	strb	r1, [r3, #1]
  403432:	e7ee      	b.n	403412 <__exponent+0x48>

00403434 <_printf_float>:
  403434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403438:	b091      	sub	sp, #68	; 0x44
  40343a:	460c      	mov	r4, r1
  40343c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  40343e:	4693      	mov	fp, r2
  403440:	461e      	mov	r6, r3
  403442:	4605      	mov	r5, r0
  403444:	f001 fc76 	bl	404d34 <_localeconv_r>
  403448:	6803      	ldr	r3, [r0, #0]
  40344a:	9309      	str	r3, [sp, #36]	; 0x24
  40344c:	4618      	mov	r0, r3
  40344e:	f000 fc8d 	bl	403d6c <strlen>
  403452:	2300      	movs	r3, #0
  403454:	930e      	str	r3, [sp, #56]	; 0x38
  403456:	683b      	ldr	r3, [r7, #0]
  403458:	900a      	str	r0, [sp, #40]	; 0x28
  40345a:	3307      	adds	r3, #7
  40345c:	f023 0307 	bic.w	r3, r3, #7
  403460:	f103 0208 	add.w	r2, r3, #8
  403464:	f894 8018 	ldrb.w	r8, [r4, #24]
  403468:	f8d4 a000 	ldr.w	sl, [r4]
  40346c:	603a      	str	r2, [r7, #0]
  40346e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403472:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  403476:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
  40347a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
  40347c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  403480:	930b      	str	r3, [sp, #44]	; 0x2c
  403482:	f04f 32ff 	mov.w	r2, #4294967295
  403486:	4ba6      	ldr	r3, [pc, #664]	; (403720 <_printf_float+0x2ec>)
  403488:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40348a:	4638      	mov	r0, r7
  40348c:	f002 fb86 	bl	405b9c <__aeabi_dcmpun>
  403490:	2800      	cmp	r0, #0
  403492:	f040 81f7 	bne.w	403884 <_printf_float+0x450>
  403496:	f04f 32ff 	mov.w	r2, #4294967295
  40349a:	4ba1      	ldr	r3, [pc, #644]	; (403720 <_printf_float+0x2ec>)
  40349c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40349e:	4638      	mov	r0, r7
  4034a0:	f7ff feba 	bl	403218 <__aeabi_dcmple>
  4034a4:	2800      	cmp	r0, #0
  4034a6:	f040 81ed 	bne.w	403884 <_printf_float+0x450>
  4034aa:	2200      	movs	r2, #0
  4034ac:	2300      	movs	r3, #0
  4034ae:	4638      	mov	r0, r7
  4034b0:	4649      	mov	r1, r9
  4034b2:	f7ff fea7 	bl	403204 <__aeabi_dcmplt>
  4034b6:	b110      	cbz	r0, 4034be <_printf_float+0x8a>
  4034b8:	232d      	movs	r3, #45	; 0x2d
  4034ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4034be:	4b99      	ldr	r3, [pc, #612]	; (403724 <_printf_float+0x2f0>)
  4034c0:	4f99      	ldr	r7, [pc, #612]	; (403728 <_printf_float+0x2f4>)
  4034c2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4034c6:	bf98      	it	ls
  4034c8:	461f      	movls	r7, r3
  4034ca:	2303      	movs	r3, #3
  4034cc:	6123      	str	r3, [r4, #16]
  4034ce:	f02a 0304 	bic.w	r3, sl, #4
  4034d2:	6023      	str	r3, [r4, #0]
  4034d4:	f04f 0900 	mov.w	r9, #0
  4034d8:	9600      	str	r6, [sp, #0]
  4034da:	465b      	mov	r3, fp
  4034dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4034de:	4621      	mov	r1, r4
  4034e0:	4628      	mov	r0, r5
  4034e2:	f000 f9df 	bl	4038a4 <_printf_common>
  4034e6:	3001      	adds	r0, #1
  4034e8:	f040 809a 	bne.w	403620 <_printf_float+0x1ec>
  4034ec:	f04f 30ff 	mov.w	r0, #4294967295
  4034f0:	b011      	add	sp, #68	; 0x44
  4034f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034f6:	6862      	ldr	r2, [r4, #4]
  4034f8:	1c53      	adds	r3, r2, #1
  4034fa:	a80e      	add	r0, sp, #56	; 0x38
  4034fc:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
  403500:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  403504:	d141      	bne.n	40358a <_printf_float+0x156>
  403506:	2206      	movs	r2, #6
  403508:	6062      	str	r2, [r4, #4]
  40350a:	6023      	str	r3, [r4, #0]
  40350c:	2100      	movs	r1, #0
  40350e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  403512:	9301      	str	r3, [sp, #4]
  403514:	6863      	ldr	r3, [r4, #4]
  403516:	9005      	str	r0, [sp, #20]
  403518:	9202      	str	r2, [sp, #8]
  40351a:	9300      	str	r3, [sp, #0]
  40351c:	463a      	mov	r2, r7
  40351e:	464b      	mov	r3, r9
  403520:	9106      	str	r1, [sp, #24]
  403522:	f8cd 8010 	str.w	r8, [sp, #16]
  403526:	f8cd e00c 	str.w	lr, [sp, #12]
  40352a:	4628      	mov	r0, r5
  40352c:	f7ff fef1 	bl	403312 <__cvt>
  403530:	f008 03df 	and.w	r3, r8, #223	; 0xdf
  403534:	2b47      	cmp	r3, #71	; 0x47
  403536:	4607      	mov	r7, r0
  403538:	d109      	bne.n	40354e <_printf_float+0x11a>
  40353a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40353c:	1cd8      	adds	r0, r3, #3
  40353e:	db02      	blt.n	403546 <_printf_float+0x112>
  403540:	6862      	ldr	r2, [r4, #4]
  403542:	4293      	cmp	r3, r2
  403544:	dd59      	ble.n	4035fa <_printf_float+0x1c6>
  403546:	f1a8 0802 	sub.w	r8, r8, #2
  40354a:	fa5f f888 	uxtb.w	r8, r8
  40354e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  403552:	990d      	ldr	r1, [sp, #52]	; 0x34
  403554:	d836      	bhi.n	4035c4 <_printf_float+0x190>
  403556:	3901      	subs	r1, #1
  403558:	4642      	mov	r2, r8
  40355a:	f104 0050 	add.w	r0, r4, #80	; 0x50
  40355e:	910d      	str	r1, [sp, #52]	; 0x34
  403560:	f7ff ff33 	bl	4033ca <__exponent>
  403564:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403566:	1883      	adds	r3, r0, r2
  403568:	2a01      	cmp	r2, #1
  40356a:	4681      	mov	r9, r0
  40356c:	6123      	str	r3, [r4, #16]
  40356e:	dc02      	bgt.n	403576 <_printf_float+0x142>
  403570:	6822      	ldr	r2, [r4, #0]
  403572:	07d1      	lsls	r1, r2, #31
  403574:	d501      	bpl.n	40357a <_printf_float+0x146>
  403576:	3301      	adds	r3, #1
  403578:	6123      	str	r3, [r4, #16]
  40357a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  40357e:	2b00      	cmp	r3, #0
  403580:	d0aa      	beq.n	4034d8 <_printf_float+0xa4>
  403582:	232d      	movs	r3, #45	; 0x2d
  403584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403588:	e7a6      	b.n	4034d8 <_printf_float+0xa4>
  40358a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  40358e:	d002      	beq.n	403596 <_printf_float+0x162>
  403590:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403594:	d1b9      	bne.n	40350a <_printf_float+0xd6>
  403596:	b19a      	cbz	r2, 4035c0 <_printf_float+0x18c>
  403598:	2100      	movs	r1, #0
  40359a:	9106      	str	r1, [sp, #24]
  40359c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  4035a0:	e88d 000c 	stmia.w	sp, {r2, r3}
  4035a4:	6023      	str	r3, [r4, #0]
  4035a6:	9005      	str	r0, [sp, #20]
  4035a8:	463a      	mov	r2, r7
  4035aa:	f8cd 8010 	str.w	r8, [sp, #16]
  4035ae:	f8cd e00c 	str.w	lr, [sp, #12]
  4035b2:	9102      	str	r1, [sp, #8]
  4035b4:	464b      	mov	r3, r9
  4035b6:	4628      	mov	r0, r5
  4035b8:	f7ff feab 	bl	403312 <__cvt>
  4035bc:	4607      	mov	r7, r0
  4035be:	e7bc      	b.n	40353a <_printf_float+0x106>
  4035c0:	2201      	movs	r2, #1
  4035c2:	e7a1      	b.n	403508 <_printf_float+0xd4>
  4035c4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  4035c8:	d119      	bne.n	4035fe <_printf_float+0x1ca>
  4035ca:	2900      	cmp	r1, #0
  4035cc:	6863      	ldr	r3, [r4, #4]
  4035ce:	dd0c      	ble.n	4035ea <_printf_float+0x1b6>
  4035d0:	6121      	str	r1, [r4, #16]
  4035d2:	b913      	cbnz	r3, 4035da <_printf_float+0x1a6>
  4035d4:	6822      	ldr	r2, [r4, #0]
  4035d6:	07d2      	lsls	r2, r2, #31
  4035d8:	d502      	bpl.n	4035e0 <_printf_float+0x1ac>
  4035da:	3301      	adds	r3, #1
  4035dc:	440b      	add	r3, r1
  4035de:	6123      	str	r3, [r4, #16]
  4035e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4035e2:	65a3      	str	r3, [r4, #88]	; 0x58
  4035e4:	f04f 0900 	mov.w	r9, #0
  4035e8:	e7c7      	b.n	40357a <_printf_float+0x146>
  4035ea:	b913      	cbnz	r3, 4035f2 <_printf_float+0x1be>
  4035ec:	6822      	ldr	r2, [r4, #0]
  4035ee:	07d0      	lsls	r0, r2, #31
  4035f0:	d501      	bpl.n	4035f6 <_printf_float+0x1c2>
  4035f2:	3302      	adds	r3, #2
  4035f4:	e7f3      	b.n	4035de <_printf_float+0x1aa>
  4035f6:	2301      	movs	r3, #1
  4035f8:	e7f1      	b.n	4035de <_printf_float+0x1aa>
  4035fa:	f04f 0867 	mov.w	r8, #103	; 0x67
  4035fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403602:	4293      	cmp	r3, r2
  403604:	db05      	blt.n	403612 <_printf_float+0x1de>
  403606:	6822      	ldr	r2, [r4, #0]
  403608:	6123      	str	r3, [r4, #16]
  40360a:	07d1      	lsls	r1, r2, #31
  40360c:	d5e8      	bpl.n	4035e0 <_printf_float+0x1ac>
  40360e:	3301      	adds	r3, #1
  403610:	e7e5      	b.n	4035de <_printf_float+0x1aa>
  403612:	2b00      	cmp	r3, #0
  403614:	bfd4      	ite	le
  403616:	f1c3 0302 	rsble	r3, r3, #2
  40361a:	2301      	movgt	r3, #1
  40361c:	4413      	add	r3, r2
  40361e:	e7de      	b.n	4035de <_printf_float+0x1aa>
  403620:	6823      	ldr	r3, [r4, #0]
  403622:	055a      	lsls	r2, r3, #21
  403624:	d407      	bmi.n	403636 <_printf_float+0x202>
  403626:	6923      	ldr	r3, [r4, #16]
  403628:	463a      	mov	r2, r7
  40362a:	4659      	mov	r1, fp
  40362c:	4628      	mov	r0, r5
  40362e:	47b0      	blx	r6
  403630:	3001      	adds	r0, #1
  403632:	d12a      	bne.n	40368a <_printf_float+0x256>
  403634:	e75a      	b.n	4034ec <_printf_float+0xb8>
  403636:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40363a:	f240 80dc 	bls.w	4037f6 <_printf_float+0x3c2>
  40363e:	2200      	movs	r2, #0
  403640:	2300      	movs	r3, #0
  403642:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403646:	f7ff fdd3 	bl	4031f0 <__aeabi_dcmpeq>
  40364a:	2800      	cmp	r0, #0
  40364c:	d039      	beq.n	4036c2 <_printf_float+0x28e>
  40364e:	2301      	movs	r3, #1
  403650:	4a36      	ldr	r2, [pc, #216]	; (40372c <_printf_float+0x2f8>)
  403652:	4659      	mov	r1, fp
  403654:	4628      	mov	r0, r5
  403656:	47b0      	blx	r6
  403658:	3001      	adds	r0, #1
  40365a:	f43f af47 	beq.w	4034ec <_printf_float+0xb8>
  40365e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403662:	429a      	cmp	r2, r3
  403664:	db02      	blt.n	40366c <_printf_float+0x238>
  403666:	6823      	ldr	r3, [r4, #0]
  403668:	07d8      	lsls	r0, r3, #31
  40366a:	d50e      	bpl.n	40368a <_printf_float+0x256>
  40366c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40366e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403670:	4659      	mov	r1, fp
  403672:	4628      	mov	r0, r5
  403674:	47b0      	blx	r6
  403676:	3001      	adds	r0, #1
  403678:	f43f af38 	beq.w	4034ec <_printf_float+0xb8>
  40367c:	2700      	movs	r7, #0
  40367e:	f104 081a 	add.w	r8, r4, #26
  403682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403684:	3b01      	subs	r3, #1
  403686:	429f      	cmp	r7, r3
  403688:	db11      	blt.n	4036ae <_printf_float+0x27a>
  40368a:	6823      	ldr	r3, [r4, #0]
  40368c:	079f      	lsls	r7, r3, #30
  40368e:	d508      	bpl.n	4036a2 <_printf_float+0x26e>
  403690:	2700      	movs	r7, #0
  403692:	f104 0819 	add.w	r8, r4, #25
  403696:	68e3      	ldr	r3, [r4, #12]
  403698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40369a:	1a9b      	subs	r3, r3, r2
  40369c:	429f      	cmp	r7, r3
  40369e:	f2c0 80e7 	blt.w	403870 <_printf_float+0x43c>
  4036a2:	68e0      	ldr	r0, [r4, #12]
  4036a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4036a6:	4298      	cmp	r0, r3
  4036a8:	bfb8      	it	lt
  4036aa:	4618      	movlt	r0, r3
  4036ac:	e720      	b.n	4034f0 <_printf_float+0xbc>
  4036ae:	2301      	movs	r3, #1
  4036b0:	4642      	mov	r2, r8
  4036b2:	4659      	mov	r1, fp
  4036b4:	4628      	mov	r0, r5
  4036b6:	47b0      	blx	r6
  4036b8:	3001      	adds	r0, #1
  4036ba:	f43f af17 	beq.w	4034ec <_printf_float+0xb8>
  4036be:	3701      	adds	r7, #1
  4036c0:	e7df      	b.n	403682 <_printf_float+0x24e>
  4036c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4036c4:	2b00      	cmp	r3, #0
  4036c6:	dc33      	bgt.n	403730 <_printf_float+0x2fc>
  4036c8:	2301      	movs	r3, #1
  4036ca:	4a18      	ldr	r2, [pc, #96]	; (40372c <_printf_float+0x2f8>)
  4036cc:	4659      	mov	r1, fp
  4036ce:	4628      	mov	r0, r5
  4036d0:	47b0      	blx	r6
  4036d2:	3001      	adds	r0, #1
  4036d4:	f43f af0a 	beq.w	4034ec <_printf_float+0xb8>
  4036d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4036da:	b923      	cbnz	r3, 4036e6 <_printf_float+0x2b2>
  4036dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4036de:	b913      	cbnz	r3, 4036e6 <_printf_float+0x2b2>
  4036e0:	6823      	ldr	r3, [r4, #0]
  4036e2:	07d9      	lsls	r1, r3, #31
  4036e4:	d5d1      	bpl.n	40368a <_printf_float+0x256>
  4036e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4036e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4036ea:	4659      	mov	r1, fp
  4036ec:	4628      	mov	r0, r5
  4036ee:	47b0      	blx	r6
  4036f0:	3001      	adds	r0, #1
  4036f2:	f43f aefb 	beq.w	4034ec <_printf_float+0xb8>
  4036f6:	f04f 0800 	mov.w	r8, #0
  4036fa:	f104 091a 	add.w	r9, r4, #26
  4036fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403700:	425b      	negs	r3, r3
  403702:	4598      	cmp	r8, r3
  403704:	db01      	blt.n	40370a <_printf_float+0x2d6>
  403706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403708:	e78e      	b.n	403628 <_printf_float+0x1f4>
  40370a:	2301      	movs	r3, #1
  40370c:	464a      	mov	r2, r9
  40370e:	4659      	mov	r1, fp
  403710:	4628      	mov	r0, r5
  403712:	47b0      	blx	r6
  403714:	3001      	adds	r0, #1
  403716:	f43f aee9 	beq.w	4034ec <_printf_float+0xb8>
  40371a:	f108 0801 	add.w	r8, r8, #1
  40371e:	e7ee      	b.n	4036fe <_printf_float+0x2ca>
  403720:	7fefffff 	.word	0x7fefffff
  403724:	00406080 	.word	0x00406080
  403728:	00406084 	.word	0x00406084
  40372c:	00406090 	.word	0x00406090
  403730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403732:	6da3      	ldr	r3, [r4, #88]	; 0x58
  403734:	429a      	cmp	r2, r3
  403736:	bfa8      	it	ge
  403738:	461a      	movge	r2, r3
  40373a:	2a00      	cmp	r2, #0
  40373c:	4690      	mov	r8, r2
  40373e:	dc36      	bgt.n	4037ae <_printf_float+0x37a>
  403740:	f104 031a 	add.w	r3, r4, #26
  403744:	f04f 0a00 	mov.w	sl, #0
  403748:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  40374c:	930b      	str	r3, [sp, #44]	; 0x2c
  40374e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  403752:	eba9 0308 	sub.w	r3, r9, r8
  403756:	459a      	cmp	sl, r3
  403758:	db31      	blt.n	4037be <_printf_float+0x38a>
  40375a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40375c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40375e:	429a      	cmp	r2, r3
  403760:	db38      	blt.n	4037d4 <_printf_float+0x3a0>
  403762:	6823      	ldr	r3, [r4, #0]
  403764:	07da      	lsls	r2, r3, #31
  403766:	d435      	bmi.n	4037d4 <_printf_float+0x3a0>
  403768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40376a:	990d      	ldr	r1, [sp, #52]	; 0x34
  40376c:	eba3 0209 	sub.w	r2, r3, r9
  403770:	eba3 0801 	sub.w	r8, r3, r1
  403774:	4590      	cmp	r8, r2
  403776:	bfa8      	it	ge
  403778:	4690      	movge	r8, r2
  40377a:	f1b8 0f00 	cmp.w	r8, #0
  40377e:	dc31      	bgt.n	4037e4 <_printf_float+0x3b0>
  403780:	2700      	movs	r7, #0
  403782:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  403786:	f104 091a 	add.w	r9, r4, #26
  40378a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40378c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40378e:	1a9b      	subs	r3, r3, r2
  403790:	eba3 0308 	sub.w	r3, r3, r8
  403794:	429f      	cmp	r7, r3
  403796:	f6bf af78 	bge.w	40368a <_printf_float+0x256>
  40379a:	2301      	movs	r3, #1
  40379c:	464a      	mov	r2, r9
  40379e:	4659      	mov	r1, fp
  4037a0:	4628      	mov	r0, r5
  4037a2:	47b0      	blx	r6
  4037a4:	3001      	adds	r0, #1
  4037a6:	f43f aea1 	beq.w	4034ec <_printf_float+0xb8>
  4037aa:	3701      	adds	r7, #1
  4037ac:	e7ed      	b.n	40378a <_printf_float+0x356>
  4037ae:	4613      	mov	r3, r2
  4037b0:	4659      	mov	r1, fp
  4037b2:	463a      	mov	r2, r7
  4037b4:	4628      	mov	r0, r5
  4037b6:	47b0      	blx	r6
  4037b8:	3001      	adds	r0, #1
  4037ba:	d1c1      	bne.n	403740 <_printf_float+0x30c>
  4037bc:	e696      	b.n	4034ec <_printf_float+0xb8>
  4037be:	2301      	movs	r3, #1
  4037c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4037c2:	4659      	mov	r1, fp
  4037c4:	4628      	mov	r0, r5
  4037c6:	47b0      	blx	r6
  4037c8:	3001      	adds	r0, #1
  4037ca:	f43f ae8f 	beq.w	4034ec <_printf_float+0xb8>
  4037ce:	f10a 0a01 	add.w	sl, sl, #1
  4037d2:	e7bc      	b.n	40374e <_printf_float+0x31a>
  4037d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4037d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4037d8:	4659      	mov	r1, fp
  4037da:	4628      	mov	r0, r5
  4037dc:	47b0      	blx	r6
  4037de:	3001      	adds	r0, #1
  4037e0:	d1c2      	bne.n	403768 <_printf_float+0x334>
  4037e2:	e683      	b.n	4034ec <_printf_float+0xb8>
  4037e4:	4643      	mov	r3, r8
  4037e6:	eb07 0209 	add.w	r2, r7, r9
  4037ea:	4659      	mov	r1, fp
  4037ec:	4628      	mov	r0, r5
  4037ee:	47b0      	blx	r6
  4037f0:	3001      	adds	r0, #1
  4037f2:	d1c5      	bne.n	403780 <_printf_float+0x34c>
  4037f4:	e67a      	b.n	4034ec <_printf_float+0xb8>
  4037f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4037f8:	2a01      	cmp	r2, #1
  4037fa:	dc01      	bgt.n	403800 <_printf_float+0x3cc>
  4037fc:	07db      	lsls	r3, r3, #31
  4037fe:	d534      	bpl.n	40386a <_printf_float+0x436>
  403800:	2301      	movs	r3, #1
  403802:	463a      	mov	r2, r7
  403804:	4659      	mov	r1, fp
  403806:	4628      	mov	r0, r5
  403808:	47b0      	blx	r6
  40380a:	3001      	adds	r0, #1
  40380c:	f43f ae6e 	beq.w	4034ec <_printf_float+0xb8>
  403810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403812:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403814:	4659      	mov	r1, fp
  403816:	4628      	mov	r0, r5
  403818:	47b0      	blx	r6
  40381a:	3001      	adds	r0, #1
  40381c:	f43f ae66 	beq.w	4034ec <_printf_float+0xb8>
  403820:	2200      	movs	r2, #0
  403822:	2300      	movs	r3, #0
  403824:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403828:	f7ff fce2 	bl	4031f0 <__aeabi_dcmpeq>
  40382c:	b150      	cbz	r0, 403844 <_printf_float+0x410>
  40382e:	2700      	movs	r7, #0
  403830:	f104 081a 	add.w	r8, r4, #26
  403834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403836:	3b01      	subs	r3, #1
  403838:	429f      	cmp	r7, r3
  40383a:	db0c      	blt.n	403856 <_printf_float+0x422>
  40383c:	464b      	mov	r3, r9
  40383e:	f104 0250 	add.w	r2, r4, #80	; 0x50
  403842:	e6f2      	b.n	40362a <_printf_float+0x1f6>
  403844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403846:	1c7a      	adds	r2, r7, #1
  403848:	3b01      	subs	r3, #1
  40384a:	4659      	mov	r1, fp
  40384c:	4628      	mov	r0, r5
  40384e:	47b0      	blx	r6
  403850:	3001      	adds	r0, #1
  403852:	d1f3      	bne.n	40383c <_printf_float+0x408>
  403854:	e64a      	b.n	4034ec <_printf_float+0xb8>
  403856:	2301      	movs	r3, #1
  403858:	4642      	mov	r2, r8
  40385a:	4659      	mov	r1, fp
  40385c:	4628      	mov	r0, r5
  40385e:	47b0      	blx	r6
  403860:	3001      	adds	r0, #1
  403862:	f43f ae43 	beq.w	4034ec <_printf_float+0xb8>
  403866:	3701      	adds	r7, #1
  403868:	e7e4      	b.n	403834 <_printf_float+0x400>
  40386a:	2301      	movs	r3, #1
  40386c:	463a      	mov	r2, r7
  40386e:	e7ec      	b.n	40384a <_printf_float+0x416>
  403870:	2301      	movs	r3, #1
  403872:	4642      	mov	r2, r8
  403874:	4659      	mov	r1, fp
  403876:	4628      	mov	r0, r5
  403878:	47b0      	blx	r6
  40387a:	3001      	adds	r0, #1
  40387c:	f43f ae36 	beq.w	4034ec <_printf_float+0xb8>
  403880:	3701      	adds	r7, #1
  403882:	e708      	b.n	403696 <_printf_float+0x262>
  403884:	463a      	mov	r2, r7
  403886:	464b      	mov	r3, r9
  403888:	4638      	mov	r0, r7
  40388a:	4649      	mov	r1, r9
  40388c:	f002 f986 	bl	405b9c <__aeabi_dcmpun>
  403890:	2800      	cmp	r0, #0
  403892:	f43f ae30 	beq.w	4034f6 <_printf_float+0xc2>
  403896:	4b01      	ldr	r3, [pc, #4]	; (40389c <_printf_float+0x468>)
  403898:	4f01      	ldr	r7, [pc, #4]	; (4038a0 <_printf_float+0x46c>)
  40389a:	e612      	b.n	4034c2 <_printf_float+0x8e>
  40389c:	00406088 	.word	0x00406088
  4038a0:	0040608c 	.word	0x0040608c

004038a4 <_printf_common>:
  4038a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4038a8:	4691      	mov	r9, r2
  4038aa:	461f      	mov	r7, r3
  4038ac:	688a      	ldr	r2, [r1, #8]
  4038ae:	690b      	ldr	r3, [r1, #16]
  4038b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4038b4:	4293      	cmp	r3, r2
  4038b6:	bfb8      	it	lt
  4038b8:	4613      	movlt	r3, r2
  4038ba:	f8c9 3000 	str.w	r3, [r9]
  4038be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4038c2:	4606      	mov	r6, r0
  4038c4:	460c      	mov	r4, r1
  4038c6:	b112      	cbz	r2, 4038ce <_printf_common+0x2a>
  4038c8:	3301      	adds	r3, #1
  4038ca:	f8c9 3000 	str.w	r3, [r9]
  4038ce:	6823      	ldr	r3, [r4, #0]
  4038d0:	0699      	lsls	r1, r3, #26
  4038d2:	bf42      	ittt	mi
  4038d4:	f8d9 3000 	ldrmi.w	r3, [r9]
  4038d8:	3302      	addmi	r3, #2
  4038da:	f8c9 3000 	strmi.w	r3, [r9]
  4038de:	6825      	ldr	r5, [r4, #0]
  4038e0:	f015 0506 	ands.w	r5, r5, #6
  4038e4:	d107      	bne.n	4038f6 <_printf_common+0x52>
  4038e6:	f104 0a19 	add.w	sl, r4, #25
  4038ea:	68e3      	ldr	r3, [r4, #12]
  4038ec:	f8d9 2000 	ldr.w	r2, [r9]
  4038f0:	1a9b      	subs	r3, r3, r2
  4038f2:	429d      	cmp	r5, r3
  4038f4:	db29      	blt.n	40394a <_printf_common+0xa6>
  4038f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4038fa:	6822      	ldr	r2, [r4, #0]
  4038fc:	3300      	adds	r3, #0
  4038fe:	bf18      	it	ne
  403900:	2301      	movne	r3, #1
  403902:	0692      	lsls	r2, r2, #26
  403904:	d42e      	bmi.n	403964 <_printf_common+0xc0>
  403906:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40390a:	4639      	mov	r1, r7
  40390c:	4630      	mov	r0, r6
  40390e:	47c0      	blx	r8
  403910:	3001      	adds	r0, #1
  403912:	d021      	beq.n	403958 <_printf_common+0xb4>
  403914:	6823      	ldr	r3, [r4, #0]
  403916:	68e5      	ldr	r5, [r4, #12]
  403918:	f8d9 2000 	ldr.w	r2, [r9]
  40391c:	f003 0306 	and.w	r3, r3, #6
  403920:	2b04      	cmp	r3, #4
  403922:	bf08      	it	eq
  403924:	1aad      	subeq	r5, r5, r2
  403926:	68a3      	ldr	r3, [r4, #8]
  403928:	6922      	ldr	r2, [r4, #16]
  40392a:	bf0c      	ite	eq
  40392c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  403930:	2500      	movne	r5, #0
  403932:	4293      	cmp	r3, r2
  403934:	bfc4      	itt	gt
  403936:	1a9b      	subgt	r3, r3, r2
  403938:	18ed      	addgt	r5, r5, r3
  40393a:	f04f 0900 	mov.w	r9, #0
  40393e:	341a      	adds	r4, #26
  403940:	454d      	cmp	r5, r9
  403942:	d11b      	bne.n	40397c <_printf_common+0xd8>
  403944:	2000      	movs	r0, #0
  403946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40394a:	2301      	movs	r3, #1
  40394c:	4652      	mov	r2, sl
  40394e:	4639      	mov	r1, r7
  403950:	4630      	mov	r0, r6
  403952:	47c0      	blx	r8
  403954:	3001      	adds	r0, #1
  403956:	d103      	bne.n	403960 <_printf_common+0xbc>
  403958:	f04f 30ff 	mov.w	r0, #4294967295
  40395c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403960:	3501      	adds	r5, #1
  403962:	e7c2      	b.n	4038ea <_printf_common+0x46>
  403964:	18e1      	adds	r1, r4, r3
  403966:	1c5a      	adds	r2, r3, #1
  403968:	2030      	movs	r0, #48	; 0x30
  40396a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  40396e:	4422      	add	r2, r4
  403970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  403974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  403978:	3302      	adds	r3, #2
  40397a:	e7c4      	b.n	403906 <_printf_common+0x62>
  40397c:	2301      	movs	r3, #1
  40397e:	4622      	mov	r2, r4
  403980:	4639      	mov	r1, r7
  403982:	4630      	mov	r0, r6
  403984:	47c0      	blx	r8
  403986:	3001      	adds	r0, #1
  403988:	d0e6      	beq.n	403958 <_printf_common+0xb4>
  40398a:	f109 0901 	add.w	r9, r9, #1
  40398e:	e7d7      	b.n	403940 <_printf_common+0x9c>

00403990 <_printf_i>:
  403990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403994:	4617      	mov	r7, r2
  403996:	7e0a      	ldrb	r2, [r1, #24]
  403998:	b085      	sub	sp, #20
  40399a:	2a6e      	cmp	r2, #110	; 0x6e
  40399c:	4698      	mov	r8, r3
  40399e:	4606      	mov	r6, r0
  4039a0:	460c      	mov	r4, r1
  4039a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4039a4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  4039a8:	f000 80bc 	beq.w	403b24 <_printf_i+0x194>
  4039ac:	d81a      	bhi.n	4039e4 <_printf_i+0x54>
  4039ae:	2a63      	cmp	r2, #99	; 0x63
  4039b0:	d02e      	beq.n	403a10 <_printf_i+0x80>
  4039b2:	d80a      	bhi.n	4039ca <_printf_i+0x3a>
  4039b4:	2a00      	cmp	r2, #0
  4039b6:	f000 80c8 	beq.w	403b4a <_printf_i+0x1ba>
  4039ba:	2a58      	cmp	r2, #88	; 0x58
  4039bc:	f000 808a 	beq.w	403ad4 <_printf_i+0x144>
  4039c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4039c4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  4039c8:	e02a      	b.n	403a20 <_printf_i+0x90>
  4039ca:	2a64      	cmp	r2, #100	; 0x64
  4039cc:	d001      	beq.n	4039d2 <_printf_i+0x42>
  4039ce:	2a69      	cmp	r2, #105	; 0x69
  4039d0:	d1f6      	bne.n	4039c0 <_printf_i+0x30>
  4039d2:	6821      	ldr	r1, [r4, #0]
  4039d4:	681a      	ldr	r2, [r3, #0]
  4039d6:	f011 0f80 	tst.w	r1, #128	; 0x80
  4039da:	d023      	beq.n	403a24 <_printf_i+0x94>
  4039dc:	1d11      	adds	r1, r2, #4
  4039de:	6019      	str	r1, [r3, #0]
  4039e0:	6813      	ldr	r3, [r2, #0]
  4039e2:	e027      	b.n	403a34 <_printf_i+0xa4>
  4039e4:	2a73      	cmp	r2, #115	; 0x73
  4039e6:	f000 80b4 	beq.w	403b52 <_printf_i+0x1c2>
  4039ea:	d808      	bhi.n	4039fe <_printf_i+0x6e>
  4039ec:	2a6f      	cmp	r2, #111	; 0x6f
  4039ee:	d02a      	beq.n	403a46 <_printf_i+0xb6>
  4039f0:	2a70      	cmp	r2, #112	; 0x70
  4039f2:	d1e5      	bne.n	4039c0 <_printf_i+0x30>
  4039f4:	680a      	ldr	r2, [r1, #0]
  4039f6:	f042 0220 	orr.w	r2, r2, #32
  4039fa:	600a      	str	r2, [r1, #0]
  4039fc:	e003      	b.n	403a06 <_printf_i+0x76>
  4039fe:	2a75      	cmp	r2, #117	; 0x75
  403a00:	d021      	beq.n	403a46 <_printf_i+0xb6>
  403a02:	2a78      	cmp	r2, #120	; 0x78
  403a04:	d1dc      	bne.n	4039c0 <_printf_i+0x30>
  403a06:	2278      	movs	r2, #120	; 0x78
  403a08:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  403a0c:	496e      	ldr	r1, [pc, #440]	; (403bc8 <_printf_i+0x238>)
  403a0e:	e064      	b.n	403ada <_printf_i+0x14a>
  403a10:	681a      	ldr	r2, [r3, #0]
  403a12:	f101 0542 	add.w	r5, r1, #66	; 0x42
  403a16:	1d11      	adds	r1, r2, #4
  403a18:	6019      	str	r1, [r3, #0]
  403a1a:	6813      	ldr	r3, [r2, #0]
  403a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403a20:	2301      	movs	r3, #1
  403a22:	e0a3      	b.n	403b6c <_printf_i+0x1dc>
  403a24:	f011 0f40 	tst.w	r1, #64	; 0x40
  403a28:	f102 0104 	add.w	r1, r2, #4
  403a2c:	6019      	str	r1, [r3, #0]
  403a2e:	d0d7      	beq.n	4039e0 <_printf_i+0x50>
  403a30:	f9b2 3000 	ldrsh.w	r3, [r2]
  403a34:	2b00      	cmp	r3, #0
  403a36:	da03      	bge.n	403a40 <_printf_i+0xb0>
  403a38:	222d      	movs	r2, #45	; 0x2d
  403a3a:	425b      	negs	r3, r3
  403a3c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  403a40:	4962      	ldr	r1, [pc, #392]	; (403bcc <_printf_i+0x23c>)
  403a42:	220a      	movs	r2, #10
  403a44:	e017      	b.n	403a76 <_printf_i+0xe6>
  403a46:	6820      	ldr	r0, [r4, #0]
  403a48:	6819      	ldr	r1, [r3, #0]
  403a4a:	f010 0f80 	tst.w	r0, #128	; 0x80
  403a4e:	d003      	beq.n	403a58 <_printf_i+0xc8>
  403a50:	1d08      	adds	r0, r1, #4
  403a52:	6018      	str	r0, [r3, #0]
  403a54:	680b      	ldr	r3, [r1, #0]
  403a56:	e006      	b.n	403a66 <_printf_i+0xd6>
  403a58:	f010 0f40 	tst.w	r0, #64	; 0x40
  403a5c:	f101 0004 	add.w	r0, r1, #4
  403a60:	6018      	str	r0, [r3, #0]
  403a62:	d0f7      	beq.n	403a54 <_printf_i+0xc4>
  403a64:	880b      	ldrh	r3, [r1, #0]
  403a66:	4959      	ldr	r1, [pc, #356]	; (403bcc <_printf_i+0x23c>)
  403a68:	2a6f      	cmp	r2, #111	; 0x6f
  403a6a:	bf14      	ite	ne
  403a6c:	220a      	movne	r2, #10
  403a6e:	2208      	moveq	r2, #8
  403a70:	2000      	movs	r0, #0
  403a72:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  403a76:	6865      	ldr	r5, [r4, #4]
  403a78:	60a5      	str	r5, [r4, #8]
  403a7a:	2d00      	cmp	r5, #0
  403a7c:	f2c0 809c 	blt.w	403bb8 <_printf_i+0x228>
  403a80:	6820      	ldr	r0, [r4, #0]
  403a82:	f020 0004 	bic.w	r0, r0, #4
  403a86:	6020      	str	r0, [r4, #0]
  403a88:	2b00      	cmp	r3, #0
  403a8a:	d13f      	bne.n	403b0c <_printf_i+0x17c>
  403a8c:	2d00      	cmp	r5, #0
  403a8e:	f040 8095 	bne.w	403bbc <_printf_i+0x22c>
  403a92:	4675      	mov	r5, lr
  403a94:	2a08      	cmp	r2, #8
  403a96:	d10b      	bne.n	403ab0 <_printf_i+0x120>
  403a98:	6823      	ldr	r3, [r4, #0]
  403a9a:	07da      	lsls	r2, r3, #31
  403a9c:	d508      	bpl.n	403ab0 <_printf_i+0x120>
  403a9e:	6923      	ldr	r3, [r4, #16]
  403aa0:	6862      	ldr	r2, [r4, #4]
  403aa2:	429a      	cmp	r2, r3
  403aa4:	bfde      	ittt	le
  403aa6:	2330      	movle	r3, #48	; 0x30
  403aa8:	f805 3c01 	strble.w	r3, [r5, #-1]
  403aac:	f105 35ff 	addle.w	r5, r5, #4294967295
  403ab0:	ebae 0305 	sub.w	r3, lr, r5
  403ab4:	6123      	str	r3, [r4, #16]
  403ab6:	f8cd 8000 	str.w	r8, [sp]
  403aba:	463b      	mov	r3, r7
  403abc:	aa03      	add	r2, sp, #12
  403abe:	4621      	mov	r1, r4
  403ac0:	4630      	mov	r0, r6
  403ac2:	f7ff feef 	bl	4038a4 <_printf_common>
  403ac6:	3001      	adds	r0, #1
  403ac8:	d155      	bne.n	403b76 <_printf_i+0x1e6>
  403aca:	f04f 30ff 	mov.w	r0, #4294967295
  403ace:	b005      	add	sp, #20
  403ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403ad4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  403ad8:	493c      	ldr	r1, [pc, #240]	; (403bcc <_printf_i+0x23c>)
  403ada:	6822      	ldr	r2, [r4, #0]
  403adc:	6818      	ldr	r0, [r3, #0]
  403ade:	f012 0f80 	tst.w	r2, #128	; 0x80
  403ae2:	f100 0504 	add.w	r5, r0, #4
  403ae6:	601d      	str	r5, [r3, #0]
  403ae8:	d001      	beq.n	403aee <_printf_i+0x15e>
  403aea:	6803      	ldr	r3, [r0, #0]
  403aec:	e002      	b.n	403af4 <_printf_i+0x164>
  403aee:	0655      	lsls	r5, r2, #25
  403af0:	d5fb      	bpl.n	403aea <_printf_i+0x15a>
  403af2:	8803      	ldrh	r3, [r0, #0]
  403af4:	07d0      	lsls	r0, r2, #31
  403af6:	bf44      	itt	mi
  403af8:	f042 0220 	orrmi.w	r2, r2, #32
  403afc:	6022      	strmi	r2, [r4, #0]
  403afe:	b91b      	cbnz	r3, 403b08 <_printf_i+0x178>
  403b00:	6822      	ldr	r2, [r4, #0]
  403b02:	f022 0220 	bic.w	r2, r2, #32
  403b06:	6022      	str	r2, [r4, #0]
  403b08:	2210      	movs	r2, #16
  403b0a:	e7b1      	b.n	403a70 <_printf_i+0xe0>
  403b0c:	4675      	mov	r5, lr
  403b0e:	fbb3 f0f2 	udiv	r0, r3, r2
  403b12:	fb02 3310 	mls	r3, r2, r0, r3
  403b16:	5ccb      	ldrb	r3, [r1, r3]
  403b18:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403b1c:	4603      	mov	r3, r0
  403b1e:	2800      	cmp	r0, #0
  403b20:	d1f5      	bne.n	403b0e <_printf_i+0x17e>
  403b22:	e7b7      	b.n	403a94 <_printf_i+0x104>
  403b24:	6808      	ldr	r0, [r1, #0]
  403b26:	681a      	ldr	r2, [r3, #0]
  403b28:	6949      	ldr	r1, [r1, #20]
  403b2a:	f010 0f80 	tst.w	r0, #128	; 0x80
  403b2e:	d004      	beq.n	403b3a <_printf_i+0x1aa>
  403b30:	1d10      	adds	r0, r2, #4
  403b32:	6018      	str	r0, [r3, #0]
  403b34:	6813      	ldr	r3, [r2, #0]
  403b36:	6019      	str	r1, [r3, #0]
  403b38:	e007      	b.n	403b4a <_printf_i+0x1ba>
  403b3a:	f010 0f40 	tst.w	r0, #64	; 0x40
  403b3e:	f102 0004 	add.w	r0, r2, #4
  403b42:	6018      	str	r0, [r3, #0]
  403b44:	6813      	ldr	r3, [r2, #0]
  403b46:	d0f6      	beq.n	403b36 <_printf_i+0x1a6>
  403b48:	8019      	strh	r1, [r3, #0]
  403b4a:	2300      	movs	r3, #0
  403b4c:	6123      	str	r3, [r4, #16]
  403b4e:	4675      	mov	r5, lr
  403b50:	e7b1      	b.n	403ab6 <_printf_i+0x126>
  403b52:	681a      	ldr	r2, [r3, #0]
  403b54:	1d11      	adds	r1, r2, #4
  403b56:	6019      	str	r1, [r3, #0]
  403b58:	6815      	ldr	r5, [r2, #0]
  403b5a:	6862      	ldr	r2, [r4, #4]
  403b5c:	2100      	movs	r1, #0
  403b5e:	4628      	mov	r0, r5
  403b60:	f001 f966 	bl	404e30 <memchr>
  403b64:	b108      	cbz	r0, 403b6a <_printf_i+0x1da>
  403b66:	1b40      	subs	r0, r0, r5
  403b68:	6060      	str	r0, [r4, #4]
  403b6a:	6863      	ldr	r3, [r4, #4]
  403b6c:	6123      	str	r3, [r4, #16]
  403b6e:	2300      	movs	r3, #0
  403b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  403b74:	e79f      	b.n	403ab6 <_printf_i+0x126>
  403b76:	6923      	ldr	r3, [r4, #16]
  403b78:	462a      	mov	r2, r5
  403b7a:	4639      	mov	r1, r7
  403b7c:	4630      	mov	r0, r6
  403b7e:	47c0      	blx	r8
  403b80:	3001      	adds	r0, #1
  403b82:	d0a2      	beq.n	403aca <_printf_i+0x13a>
  403b84:	6823      	ldr	r3, [r4, #0]
  403b86:	079b      	lsls	r3, r3, #30
  403b88:	d507      	bpl.n	403b9a <_printf_i+0x20a>
  403b8a:	2500      	movs	r5, #0
  403b8c:	f104 0919 	add.w	r9, r4, #25
  403b90:	68e3      	ldr	r3, [r4, #12]
  403b92:	9a03      	ldr	r2, [sp, #12]
  403b94:	1a9b      	subs	r3, r3, r2
  403b96:	429d      	cmp	r5, r3
  403b98:	db05      	blt.n	403ba6 <_printf_i+0x216>
  403b9a:	68e0      	ldr	r0, [r4, #12]
  403b9c:	9b03      	ldr	r3, [sp, #12]
  403b9e:	4298      	cmp	r0, r3
  403ba0:	bfb8      	it	lt
  403ba2:	4618      	movlt	r0, r3
  403ba4:	e793      	b.n	403ace <_printf_i+0x13e>
  403ba6:	2301      	movs	r3, #1
  403ba8:	464a      	mov	r2, r9
  403baa:	4639      	mov	r1, r7
  403bac:	4630      	mov	r0, r6
  403bae:	47c0      	blx	r8
  403bb0:	3001      	adds	r0, #1
  403bb2:	d08a      	beq.n	403aca <_printf_i+0x13a>
  403bb4:	3501      	adds	r5, #1
  403bb6:	e7eb      	b.n	403b90 <_printf_i+0x200>
  403bb8:	2b00      	cmp	r3, #0
  403bba:	d1a7      	bne.n	403b0c <_printf_i+0x17c>
  403bbc:	780b      	ldrb	r3, [r1, #0]
  403bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403bc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403bc6:	e765      	b.n	403a94 <_printf_i+0x104>
  403bc8:	004060a3 	.word	0x004060a3
  403bcc:	00406092 	.word	0x00406092

00403bd0 <iprintf>:
  403bd0:	b40f      	push	{r0, r1, r2, r3}
  403bd2:	4b0a      	ldr	r3, [pc, #40]	; (403bfc <iprintf+0x2c>)
  403bd4:	b513      	push	{r0, r1, r4, lr}
  403bd6:	681c      	ldr	r4, [r3, #0]
  403bd8:	b124      	cbz	r4, 403be4 <iprintf+0x14>
  403bda:	69a3      	ldr	r3, [r4, #24]
  403bdc:	b913      	cbnz	r3, 403be4 <iprintf+0x14>
  403bde:	4620      	mov	r0, r4
  403be0:	f001 f81e 	bl	404c20 <__sinit>
  403be4:	ab05      	add	r3, sp, #20
  403be6:	9a04      	ldr	r2, [sp, #16]
  403be8:	68a1      	ldr	r1, [r4, #8]
  403bea:	9301      	str	r3, [sp, #4]
  403bec:	4620      	mov	r0, r4
  403bee:	f001 fd21 	bl	405634 <_vfiprintf_r>
  403bf2:	b002      	add	sp, #8
  403bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403bf8:	b004      	add	sp, #16
  403bfa:	4770      	bx	lr
  403bfc:	20400048 	.word	0x20400048

00403c00 <setbuf>:
  403c00:	2900      	cmp	r1, #0
  403c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403c06:	bf0c      	ite	eq
  403c08:	2202      	moveq	r2, #2
  403c0a:	2200      	movne	r2, #0
  403c0c:	f000 b800 	b.w	403c10 <setvbuf>

00403c10 <setvbuf>:
  403c10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403c14:	461d      	mov	r5, r3
  403c16:	4b51      	ldr	r3, [pc, #324]	; (403d5c <setvbuf+0x14c>)
  403c18:	681e      	ldr	r6, [r3, #0]
  403c1a:	4604      	mov	r4, r0
  403c1c:	460f      	mov	r7, r1
  403c1e:	4690      	mov	r8, r2
  403c20:	b126      	cbz	r6, 403c2c <setvbuf+0x1c>
  403c22:	69b3      	ldr	r3, [r6, #24]
  403c24:	b913      	cbnz	r3, 403c2c <setvbuf+0x1c>
  403c26:	4630      	mov	r0, r6
  403c28:	f000 fffa 	bl	404c20 <__sinit>
  403c2c:	4b4c      	ldr	r3, [pc, #304]	; (403d60 <setvbuf+0x150>)
  403c2e:	429c      	cmp	r4, r3
  403c30:	d152      	bne.n	403cd8 <setvbuf+0xc8>
  403c32:	6874      	ldr	r4, [r6, #4]
  403c34:	f1b8 0f02 	cmp.w	r8, #2
  403c38:	d006      	beq.n	403c48 <setvbuf+0x38>
  403c3a:	f1b8 0f01 	cmp.w	r8, #1
  403c3e:	f200 8089 	bhi.w	403d54 <setvbuf+0x144>
  403c42:	2d00      	cmp	r5, #0
  403c44:	f2c0 8086 	blt.w	403d54 <setvbuf+0x144>
  403c48:	4621      	mov	r1, r4
  403c4a:	4630      	mov	r0, r6
  403c4c:	f000 ff7e 	bl	404b4c <_fflush_r>
  403c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403c52:	b141      	cbz	r1, 403c66 <setvbuf+0x56>
  403c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403c58:	4299      	cmp	r1, r3
  403c5a:	d002      	beq.n	403c62 <setvbuf+0x52>
  403c5c:	4630      	mov	r0, r6
  403c5e:	f001 fc15 	bl	40548c <_free_r>
  403c62:	2300      	movs	r3, #0
  403c64:	6363      	str	r3, [r4, #52]	; 0x34
  403c66:	2300      	movs	r3, #0
  403c68:	61a3      	str	r3, [r4, #24]
  403c6a:	6063      	str	r3, [r4, #4]
  403c6c:	89a3      	ldrh	r3, [r4, #12]
  403c6e:	061b      	lsls	r3, r3, #24
  403c70:	d503      	bpl.n	403c7a <setvbuf+0x6a>
  403c72:	6921      	ldr	r1, [r4, #16]
  403c74:	4630      	mov	r0, r6
  403c76:	f001 fc09 	bl	40548c <_free_r>
  403c7a:	89a3      	ldrh	r3, [r4, #12]
  403c7c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403c80:	f023 0303 	bic.w	r3, r3, #3
  403c84:	f1b8 0f02 	cmp.w	r8, #2
  403c88:	81a3      	strh	r3, [r4, #12]
  403c8a:	d05d      	beq.n	403d48 <setvbuf+0x138>
  403c8c:	ab01      	add	r3, sp, #4
  403c8e:	466a      	mov	r2, sp
  403c90:	4621      	mov	r1, r4
  403c92:	4630      	mov	r0, r6
  403c94:	f001 f85c 	bl	404d50 <__swhatbuf_r>
  403c98:	89a3      	ldrh	r3, [r4, #12]
  403c9a:	4318      	orrs	r0, r3
  403c9c:	81a0      	strh	r0, [r4, #12]
  403c9e:	bb2d      	cbnz	r5, 403cec <setvbuf+0xdc>
  403ca0:	9d00      	ldr	r5, [sp, #0]
  403ca2:	4628      	mov	r0, r5
  403ca4:	f001 f8b8 	bl	404e18 <malloc>
  403ca8:	4607      	mov	r7, r0
  403caa:	2800      	cmp	r0, #0
  403cac:	d14e      	bne.n	403d4c <setvbuf+0x13c>
  403cae:	f8dd 9000 	ldr.w	r9, [sp]
  403cb2:	45a9      	cmp	r9, r5
  403cb4:	d13c      	bne.n	403d30 <setvbuf+0x120>
  403cb6:	f04f 30ff 	mov.w	r0, #4294967295
  403cba:	89a3      	ldrh	r3, [r4, #12]
  403cbc:	f043 0302 	orr.w	r3, r3, #2
  403cc0:	81a3      	strh	r3, [r4, #12]
  403cc2:	2300      	movs	r3, #0
  403cc4:	60a3      	str	r3, [r4, #8]
  403cc6:	f104 0347 	add.w	r3, r4, #71	; 0x47
  403cca:	6023      	str	r3, [r4, #0]
  403ccc:	6123      	str	r3, [r4, #16]
  403cce:	2301      	movs	r3, #1
  403cd0:	6163      	str	r3, [r4, #20]
  403cd2:	b003      	add	sp, #12
  403cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403cd8:	4b22      	ldr	r3, [pc, #136]	; (403d64 <setvbuf+0x154>)
  403cda:	429c      	cmp	r4, r3
  403cdc:	d101      	bne.n	403ce2 <setvbuf+0xd2>
  403cde:	68b4      	ldr	r4, [r6, #8]
  403ce0:	e7a8      	b.n	403c34 <setvbuf+0x24>
  403ce2:	4b21      	ldr	r3, [pc, #132]	; (403d68 <setvbuf+0x158>)
  403ce4:	429c      	cmp	r4, r3
  403ce6:	bf08      	it	eq
  403ce8:	68f4      	ldreq	r4, [r6, #12]
  403cea:	e7a3      	b.n	403c34 <setvbuf+0x24>
  403cec:	2f00      	cmp	r7, #0
  403cee:	d0d8      	beq.n	403ca2 <setvbuf+0x92>
  403cf0:	69b3      	ldr	r3, [r6, #24]
  403cf2:	b913      	cbnz	r3, 403cfa <setvbuf+0xea>
  403cf4:	4630      	mov	r0, r6
  403cf6:	f000 ff93 	bl	404c20 <__sinit>
  403cfa:	f1b8 0f01 	cmp.w	r8, #1
  403cfe:	bf08      	it	eq
  403d00:	89a3      	ldrheq	r3, [r4, #12]
  403d02:	6027      	str	r7, [r4, #0]
  403d04:	bf04      	itt	eq
  403d06:	f043 0301 	orreq.w	r3, r3, #1
  403d0a:	81a3      	strheq	r3, [r4, #12]
  403d0c:	89a3      	ldrh	r3, [r4, #12]
  403d0e:	6127      	str	r7, [r4, #16]
  403d10:	f013 0008 	ands.w	r0, r3, #8
  403d14:	6165      	str	r5, [r4, #20]
  403d16:	d01b      	beq.n	403d50 <setvbuf+0x140>
  403d18:	f013 0001 	ands.w	r0, r3, #1
  403d1c:	bf18      	it	ne
  403d1e:	426d      	negne	r5, r5
  403d20:	f04f 0300 	mov.w	r3, #0
  403d24:	bf1d      	ittte	ne
  403d26:	60a3      	strne	r3, [r4, #8]
  403d28:	61a5      	strne	r5, [r4, #24]
  403d2a:	4618      	movne	r0, r3
  403d2c:	60a5      	streq	r5, [r4, #8]
  403d2e:	e7d0      	b.n	403cd2 <setvbuf+0xc2>
  403d30:	4648      	mov	r0, r9
  403d32:	f001 f871 	bl	404e18 <malloc>
  403d36:	4607      	mov	r7, r0
  403d38:	2800      	cmp	r0, #0
  403d3a:	d0bc      	beq.n	403cb6 <setvbuf+0xa6>
  403d3c:	89a3      	ldrh	r3, [r4, #12]
  403d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403d42:	81a3      	strh	r3, [r4, #12]
  403d44:	464d      	mov	r5, r9
  403d46:	e7d3      	b.n	403cf0 <setvbuf+0xe0>
  403d48:	2000      	movs	r0, #0
  403d4a:	e7b6      	b.n	403cba <setvbuf+0xaa>
  403d4c:	46a9      	mov	r9, r5
  403d4e:	e7f5      	b.n	403d3c <setvbuf+0x12c>
  403d50:	60a0      	str	r0, [r4, #8]
  403d52:	e7be      	b.n	403cd2 <setvbuf+0xc2>
  403d54:	f04f 30ff 	mov.w	r0, #4294967295
  403d58:	e7bb      	b.n	403cd2 <setvbuf+0xc2>
  403d5a:	bf00      	nop
  403d5c:	20400048 	.word	0x20400048
  403d60:	004060e4 	.word	0x004060e4
  403d64:	00406104 	.word	0x00406104
  403d68:	004060c4 	.word	0x004060c4

00403d6c <strlen>:
  403d6c:	4603      	mov	r3, r0
  403d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
  403d72:	2a00      	cmp	r2, #0
  403d74:	d1fb      	bne.n	403d6e <strlen+0x2>
  403d76:	1a18      	subs	r0, r3, r0
  403d78:	3801      	subs	r0, #1
  403d7a:	4770      	bx	lr

00403d7c <quorem>:
  403d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d80:	6903      	ldr	r3, [r0, #16]
  403d82:	690c      	ldr	r4, [r1, #16]
  403d84:	429c      	cmp	r4, r3
  403d86:	4680      	mov	r8, r0
  403d88:	f300 8082 	bgt.w	403e90 <quorem+0x114>
  403d8c:	3c01      	subs	r4, #1
  403d8e:	f101 0714 	add.w	r7, r1, #20
  403d92:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  403d96:	f100 0614 	add.w	r6, r0, #20
  403d9a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  403d9e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  403da2:	eb06 030e 	add.w	r3, r6, lr
  403da6:	3501      	adds	r5, #1
  403da8:	eb07 090e 	add.w	r9, r7, lr
  403dac:	9301      	str	r3, [sp, #4]
  403dae:	fbb0 f5f5 	udiv	r5, r0, r5
  403db2:	b395      	cbz	r5, 403e1a <quorem+0x9e>
  403db4:	f04f 0a00 	mov.w	sl, #0
  403db8:	4638      	mov	r0, r7
  403dba:	46b4      	mov	ip, r6
  403dbc:	46d3      	mov	fp, sl
  403dbe:	f850 2b04 	ldr.w	r2, [r0], #4
  403dc2:	b293      	uxth	r3, r2
  403dc4:	fb05 a303 	mla	r3, r5, r3, sl
  403dc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  403dcc:	b29b      	uxth	r3, r3
  403dce:	ebab 0303 	sub.w	r3, fp, r3
  403dd2:	0c12      	lsrs	r2, r2, #16
  403dd4:	f8bc b000 	ldrh.w	fp, [ip]
  403dd8:	fb05 a202 	mla	r2, r5, r2, sl
  403ddc:	fa13 f38b 	uxtah	r3, r3, fp
  403de0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  403de4:	fa1f fb82 	uxth.w	fp, r2
  403de8:	f8dc 2000 	ldr.w	r2, [ip]
  403dec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  403df0:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403df4:	b29b      	uxth	r3, r3
  403df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403dfa:	4581      	cmp	r9, r0
  403dfc:	ea4f 4b22 	mov.w	fp, r2, asr #16
  403e00:	f84c 3b04 	str.w	r3, [ip], #4
  403e04:	d2db      	bcs.n	403dbe <quorem+0x42>
  403e06:	f856 300e 	ldr.w	r3, [r6, lr]
  403e0a:	b933      	cbnz	r3, 403e1a <quorem+0x9e>
  403e0c:	9b01      	ldr	r3, [sp, #4]
  403e0e:	3b04      	subs	r3, #4
  403e10:	429e      	cmp	r6, r3
  403e12:	461a      	mov	r2, r3
  403e14:	d330      	bcc.n	403e78 <quorem+0xfc>
  403e16:	f8c8 4010 	str.w	r4, [r8, #16]
  403e1a:	4640      	mov	r0, r8
  403e1c:	f001 fa61 	bl	4052e2 <__mcmp>
  403e20:	2800      	cmp	r0, #0
  403e22:	db25      	blt.n	403e70 <quorem+0xf4>
  403e24:	3501      	adds	r5, #1
  403e26:	4630      	mov	r0, r6
  403e28:	f04f 0e00 	mov.w	lr, #0
  403e2c:	f857 2b04 	ldr.w	r2, [r7], #4
  403e30:	f8d0 c000 	ldr.w	ip, [r0]
  403e34:	b293      	uxth	r3, r2
  403e36:	ebae 0303 	sub.w	r3, lr, r3
  403e3a:	0c12      	lsrs	r2, r2, #16
  403e3c:	fa13 f38c 	uxtah	r3, r3, ip
  403e40:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
  403e44:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403e48:	b29b      	uxth	r3, r3
  403e4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403e4e:	45b9      	cmp	r9, r7
  403e50:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403e54:	f840 3b04 	str.w	r3, [r0], #4
  403e58:	d2e8      	bcs.n	403e2c <quorem+0xb0>
  403e5a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403e5e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  403e62:	b92a      	cbnz	r2, 403e70 <quorem+0xf4>
  403e64:	3b04      	subs	r3, #4
  403e66:	429e      	cmp	r6, r3
  403e68:	461a      	mov	r2, r3
  403e6a:	d30b      	bcc.n	403e84 <quorem+0x108>
  403e6c:	f8c8 4010 	str.w	r4, [r8, #16]
  403e70:	4628      	mov	r0, r5
  403e72:	b003      	add	sp, #12
  403e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e78:	6812      	ldr	r2, [r2, #0]
  403e7a:	3b04      	subs	r3, #4
  403e7c:	2a00      	cmp	r2, #0
  403e7e:	d1ca      	bne.n	403e16 <quorem+0x9a>
  403e80:	3c01      	subs	r4, #1
  403e82:	e7c5      	b.n	403e10 <quorem+0x94>
  403e84:	6812      	ldr	r2, [r2, #0]
  403e86:	3b04      	subs	r3, #4
  403e88:	2a00      	cmp	r2, #0
  403e8a:	d1ef      	bne.n	403e6c <quorem+0xf0>
  403e8c:	3c01      	subs	r4, #1
  403e8e:	e7ea      	b.n	403e66 <quorem+0xea>
  403e90:	2000      	movs	r0, #0
  403e92:	e7ee      	b.n	403e72 <quorem+0xf6>
  403e94:	0000      	movs	r0, r0
	...

00403e98 <_dtoa_r>:
  403e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e9c:	6a46      	ldr	r6, [r0, #36]	; 0x24
  403e9e:	b095      	sub	sp, #84	; 0x54
  403ea0:	4604      	mov	r4, r0
  403ea2:	9d21      	ldr	r5, [sp, #132]	; 0x84
  403ea4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403ea8:	b93e      	cbnz	r6, 403eba <_dtoa_r+0x22>
  403eaa:	2010      	movs	r0, #16
  403eac:	f000 ffb4 	bl	404e18 <malloc>
  403eb0:	6260      	str	r0, [r4, #36]	; 0x24
  403eb2:	6046      	str	r6, [r0, #4]
  403eb4:	6086      	str	r6, [r0, #8]
  403eb6:	6006      	str	r6, [r0, #0]
  403eb8:	60c6      	str	r6, [r0, #12]
  403eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403ebc:	6819      	ldr	r1, [r3, #0]
  403ebe:	b151      	cbz	r1, 403ed6 <_dtoa_r+0x3e>
  403ec0:	685a      	ldr	r2, [r3, #4]
  403ec2:	604a      	str	r2, [r1, #4]
  403ec4:	2301      	movs	r3, #1
  403ec6:	4093      	lsls	r3, r2
  403ec8:	608b      	str	r3, [r1, #8]
  403eca:	4620      	mov	r0, r4
  403ecc:	f001 f834 	bl	404f38 <_Bfree>
  403ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403ed2:	2200      	movs	r2, #0
  403ed4:	601a      	str	r2, [r3, #0]
  403ed6:	9b03      	ldr	r3, [sp, #12]
  403ed8:	2b00      	cmp	r3, #0
  403eda:	bfbf      	itttt	lt
  403edc:	2301      	movlt	r3, #1
  403ede:	602b      	strlt	r3, [r5, #0]
  403ee0:	9b03      	ldrlt	r3, [sp, #12]
  403ee2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  403ee6:	bfb2      	itee	lt
  403ee8:	9303      	strlt	r3, [sp, #12]
  403eea:	2300      	movge	r3, #0
  403eec:	602b      	strge	r3, [r5, #0]
  403eee:	f8dd 900c 	ldr.w	r9, [sp, #12]
  403ef2:	4ba9      	ldr	r3, [pc, #676]	; (404198 <_dtoa_r+0x300>)
  403ef4:	ea33 0309 	bics.w	r3, r3, r9
  403ef8:	d11b      	bne.n	403f32 <_dtoa_r+0x9a>
  403efa:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403efc:	f242 730f 	movw	r3, #9999	; 0x270f
  403f00:	6013      	str	r3, [r2, #0]
  403f02:	9b02      	ldr	r3, [sp, #8]
  403f04:	b923      	cbnz	r3, 403f10 <_dtoa_r+0x78>
  403f06:	f3c9 0013 	ubfx	r0, r9, #0, #20
  403f0a:	2800      	cmp	r0, #0
  403f0c:	f000 8581 	beq.w	404a12 <_dtoa_r+0xb7a>
  403f10:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403f12:	b953      	cbnz	r3, 403f2a <_dtoa_r+0x92>
  403f14:	4ba1      	ldr	r3, [pc, #644]	; (40419c <_dtoa_r+0x304>)
  403f16:	e021      	b.n	403f5c <_dtoa_r+0xc4>
  403f18:	4ba1      	ldr	r3, [pc, #644]	; (4041a0 <_dtoa_r+0x308>)
  403f1a:	9306      	str	r3, [sp, #24]
  403f1c:	3308      	adds	r3, #8
  403f1e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403f20:	6013      	str	r3, [r2, #0]
  403f22:	9806      	ldr	r0, [sp, #24]
  403f24:	b015      	add	sp, #84	; 0x54
  403f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f2a:	4b9c      	ldr	r3, [pc, #624]	; (40419c <_dtoa_r+0x304>)
  403f2c:	9306      	str	r3, [sp, #24]
  403f2e:	3303      	adds	r3, #3
  403f30:	e7f5      	b.n	403f1e <_dtoa_r+0x86>
  403f32:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  403f36:	2200      	movs	r2, #0
  403f38:	2300      	movs	r3, #0
  403f3a:	4630      	mov	r0, r6
  403f3c:	4639      	mov	r1, r7
  403f3e:	f7ff f957 	bl	4031f0 <__aeabi_dcmpeq>
  403f42:	4680      	mov	r8, r0
  403f44:	b160      	cbz	r0, 403f60 <_dtoa_r+0xc8>
  403f46:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403f48:	2301      	movs	r3, #1
  403f4a:	6013      	str	r3, [r2, #0]
  403f4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403f4e:	2b00      	cmp	r3, #0
  403f50:	f000 855c 	beq.w	404a0c <_dtoa_r+0xb74>
  403f54:	4b93      	ldr	r3, [pc, #588]	; (4041a4 <_dtoa_r+0x30c>)
  403f56:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403f58:	6013      	str	r3, [r2, #0]
  403f5a:	3b01      	subs	r3, #1
  403f5c:	9306      	str	r3, [sp, #24]
  403f5e:	e7e0      	b.n	403f22 <_dtoa_r+0x8a>
  403f60:	ab12      	add	r3, sp, #72	; 0x48
  403f62:	9301      	str	r3, [sp, #4]
  403f64:	ab13      	add	r3, sp, #76	; 0x4c
  403f66:	9300      	str	r3, [sp, #0]
  403f68:	4632      	mov	r2, r6
  403f6a:	463b      	mov	r3, r7
  403f6c:	4620      	mov	r0, r4
  403f6e:	f001 fa30 	bl	4053d2 <__d2b>
  403f72:	f3c9 550a 	ubfx	r5, r9, #20, #11
  403f76:	4682      	mov	sl, r0
  403f78:	2d00      	cmp	r5, #0
  403f7a:	d07c      	beq.n	404076 <_dtoa_r+0x1de>
  403f7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
  403f80:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  403f84:	4630      	mov	r0, r6
  403f86:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403f8a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  403f8e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  403f92:	2200      	movs	r2, #0
  403f94:	4b84      	ldr	r3, [pc, #528]	; (4041a8 <_dtoa_r+0x310>)
  403f96:	f7fe fd0f 	bl	4029b8 <__aeabi_dsub>
  403f9a:	a379      	add	r3, pc, #484	; (adr r3, 404180 <_dtoa_r+0x2e8>)
  403f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403fa0:	f7fe febe 	bl	402d20 <__aeabi_dmul>
  403fa4:	a378      	add	r3, pc, #480	; (adr r3, 404188 <_dtoa_r+0x2f0>)
  403fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
  403faa:	f7fe fd07 	bl	4029bc <__adddf3>
  403fae:	4606      	mov	r6, r0
  403fb0:	4628      	mov	r0, r5
  403fb2:	460f      	mov	r7, r1
  403fb4:	f7fe fe4e 	bl	402c54 <__aeabi_i2d>
  403fb8:	a375      	add	r3, pc, #468	; (adr r3, 404190 <_dtoa_r+0x2f8>)
  403fba:	e9d3 2300 	ldrd	r2, r3, [r3]
  403fbe:	f7fe feaf 	bl	402d20 <__aeabi_dmul>
  403fc2:	4602      	mov	r2, r0
  403fc4:	460b      	mov	r3, r1
  403fc6:	4630      	mov	r0, r6
  403fc8:	4639      	mov	r1, r7
  403fca:	f7fe fcf7 	bl	4029bc <__adddf3>
  403fce:	4606      	mov	r6, r0
  403fd0:	460f      	mov	r7, r1
  403fd2:	f7ff f93f 	bl	403254 <__aeabi_d2iz>
  403fd6:	2200      	movs	r2, #0
  403fd8:	4683      	mov	fp, r0
  403fda:	2300      	movs	r3, #0
  403fdc:	4630      	mov	r0, r6
  403fde:	4639      	mov	r1, r7
  403fe0:	f7ff f910 	bl	403204 <__aeabi_dcmplt>
  403fe4:	b158      	cbz	r0, 403ffe <_dtoa_r+0x166>
  403fe6:	4658      	mov	r0, fp
  403fe8:	f7fe fe34 	bl	402c54 <__aeabi_i2d>
  403fec:	4602      	mov	r2, r0
  403fee:	460b      	mov	r3, r1
  403ff0:	4630      	mov	r0, r6
  403ff2:	4639      	mov	r1, r7
  403ff4:	f7ff f8fc 	bl	4031f0 <__aeabi_dcmpeq>
  403ff8:	b908      	cbnz	r0, 403ffe <_dtoa_r+0x166>
  403ffa:	f10b 3bff 	add.w	fp, fp, #4294967295
  403ffe:	f1bb 0f16 	cmp.w	fp, #22
  404002:	d857      	bhi.n	4040b4 <_dtoa_r+0x21c>
  404004:	4969      	ldr	r1, [pc, #420]	; (4041ac <_dtoa_r+0x314>)
  404006:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40400a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40400e:	e9d1 0100 	ldrd	r0, r1, [r1]
  404012:	f7ff f915 	bl	403240 <__aeabi_dcmpgt>
  404016:	2800      	cmp	r0, #0
  404018:	d04e      	beq.n	4040b8 <_dtoa_r+0x220>
  40401a:	f10b 3bff 	add.w	fp, fp, #4294967295
  40401e:	2300      	movs	r3, #0
  404020:	930d      	str	r3, [sp, #52]	; 0x34
  404022:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404024:	1b5d      	subs	r5, r3, r5
  404026:	1e6b      	subs	r3, r5, #1
  404028:	9307      	str	r3, [sp, #28]
  40402a:	bf43      	ittte	mi
  40402c:	2300      	movmi	r3, #0
  40402e:	f1c5 0801 	rsbmi	r8, r5, #1
  404032:	9307      	strmi	r3, [sp, #28]
  404034:	f04f 0800 	movpl.w	r8, #0
  404038:	f1bb 0f00 	cmp.w	fp, #0
  40403c:	db3e      	blt.n	4040bc <_dtoa_r+0x224>
  40403e:	9b07      	ldr	r3, [sp, #28]
  404040:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  404044:	445b      	add	r3, fp
  404046:	9307      	str	r3, [sp, #28]
  404048:	2300      	movs	r3, #0
  40404a:	9308      	str	r3, [sp, #32]
  40404c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40404e:	2b09      	cmp	r3, #9
  404050:	f200 80b0 	bhi.w	4041b4 <_dtoa_r+0x31c>
  404054:	2b05      	cmp	r3, #5
  404056:	bfc4      	itt	gt
  404058:	3b04      	subgt	r3, #4
  40405a:	931e      	strgt	r3, [sp, #120]	; 0x78
  40405c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40405e:	f1a3 0302 	sub.w	r3, r3, #2
  404062:	bfcc      	ite	gt
  404064:	2600      	movgt	r6, #0
  404066:	2601      	movle	r6, #1
  404068:	2b03      	cmp	r3, #3
  40406a:	f200 80af 	bhi.w	4041cc <_dtoa_r+0x334>
  40406e:	e8df f003 	tbb	[pc, r3]
  404072:	8583      	.short	0x8583
  404074:	772d      	.short	0x772d
  404076:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404078:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40407a:	441d      	add	r5, r3
  40407c:	f205 4332 	addw	r3, r5, #1074	; 0x432
  404080:	2b20      	cmp	r3, #32
  404082:	dd11      	ble.n	4040a8 <_dtoa_r+0x210>
  404084:	9a02      	ldr	r2, [sp, #8]
  404086:	f205 4012 	addw	r0, r5, #1042	; 0x412
  40408a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40408e:	fa22 f000 	lsr.w	r0, r2, r0
  404092:	fa09 f303 	lsl.w	r3, r9, r3
  404096:	4318      	orrs	r0, r3
  404098:	f7fe fdcc 	bl	402c34 <__aeabi_ui2d>
  40409c:	2301      	movs	r3, #1
  40409e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4040a2:	3d01      	subs	r5, #1
  4040a4:	9310      	str	r3, [sp, #64]	; 0x40
  4040a6:	e774      	b.n	403f92 <_dtoa_r+0xfa>
  4040a8:	f1c3 0020 	rsb	r0, r3, #32
  4040ac:	9b02      	ldr	r3, [sp, #8]
  4040ae:	fa03 f000 	lsl.w	r0, r3, r0
  4040b2:	e7f1      	b.n	404098 <_dtoa_r+0x200>
  4040b4:	2301      	movs	r3, #1
  4040b6:	e7b3      	b.n	404020 <_dtoa_r+0x188>
  4040b8:	900d      	str	r0, [sp, #52]	; 0x34
  4040ba:	e7b2      	b.n	404022 <_dtoa_r+0x18a>
  4040bc:	f1cb 0300 	rsb	r3, fp, #0
  4040c0:	9308      	str	r3, [sp, #32]
  4040c2:	2300      	movs	r3, #0
  4040c4:	eba8 080b 	sub.w	r8, r8, fp
  4040c8:	930c      	str	r3, [sp, #48]	; 0x30
  4040ca:	e7bf      	b.n	40404c <_dtoa_r+0x1b4>
  4040cc:	2301      	movs	r3, #1
  4040ce:	9309      	str	r3, [sp, #36]	; 0x24
  4040d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4040d2:	2b00      	cmp	r3, #0
  4040d4:	dd7d      	ble.n	4041d2 <_dtoa_r+0x33a>
  4040d6:	9304      	str	r3, [sp, #16]
  4040d8:	4699      	mov	r9, r3
  4040da:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4040dc:	2200      	movs	r2, #0
  4040de:	606a      	str	r2, [r5, #4]
  4040e0:	2104      	movs	r1, #4
  4040e2:	f101 0214 	add.w	r2, r1, #20
  4040e6:	429a      	cmp	r2, r3
  4040e8:	d978      	bls.n	4041dc <_dtoa_r+0x344>
  4040ea:	6869      	ldr	r1, [r5, #4]
  4040ec:	4620      	mov	r0, r4
  4040ee:	f000 feef 	bl	404ed0 <_Balloc>
  4040f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4040f4:	6028      	str	r0, [r5, #0]
  4040f6:	681b      	ldr	r3, [r3, #0]
  4040f8:	9306      	str	r3, [sp, #24]
  4040fa:	f1b9 0f0e 	cmp.w	r9, #14
  4040fe:	f200 80ee 	bhi.w	4042de <_dtoa_r+0x446>
  404102:	2e00      	cmp	r6, #0
  404104:	f000 80eb 	beq.w	4042de <_dtoa_r+0x446>
  404108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40410c:	f1bb 0f00 	cmp.w	fp, #0
  404110:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  404114:	dd77      	ble.n	404206 <_dtoa_r+0x36e>
  404116:	4a25      	ldr	r2, [pc, #148]	; (4041ac <_dtoa_r+0x314>)
  404118:	f00b 030f 	and.w	r3, fp, #15
  40411c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404120:	e9d3 2300 	ldrd	r2, r3, [r3]
  404124:	ea4f 162b 	mov.w	r6, fp, asr #4
  404128:	06f0      	lsls	r0, r6, #27
  40412a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40412e:	d55a      	bpl.n	4041e6 <_dtoa_r+0x34e>
  404130:	4b1f      	ldr	r3, [pc, #124]	; (4041b0 <_dtoa_r+0x318>)
  404132:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404136:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40413a:	f7fe ff1b 	bl	402f74 <__aeabi_ddiv>
  40413e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404142:	f006 060f 	and.w	r6, r6, #15
  404146:	2503      	movs	r5, #3
  404148:	4f19      	ldr	r7, [pc, #100]	; (4041b0 <_dtoa_r+0x318>)
  40414a:	2e00      	cmp	r6, #0
  40414c:	d14d      	bne.n	4041ea <_dtoa_r+0x352>
  40414e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404156:	f7fe ff0d 	bl	402f74 <__aeabi_ddiv>
  40415a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40415e:	e06c      	b.n	40423a <_dtoa_r+0x3a2>
  404160:	2301      	movs	r3, #1
  404162:	9309      	str	r3, [sp, #36]	; 0x24
  404164:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404166:	445b      	add	r3, fp
  404168:	f103 0901 	add.w	r9, r3, #1
  40416c:	9304      	str	r3, [sp, #16]
  40416e:	464b      	mov	r3, r9
  404170:	2b01      	cmp	r3, #1
  404172:	bfb8      	it	lt
  404174:	2301      	movlt	r3, #1
  404176:	e7b0      	b.n	4040da <_dtoa_r+0x242>
  404178:	2300      	movs	r3, #0
  40417a:	e7a8      	b.n	4040ce <_dtoa_r+0x236>
  40417c:	2300      	movs	r3, #0
  40417e:	e7f0      	b.n	404162 <_dtoa_r+0x2ca>
  404180:	636f4361 	.word	0x636f4361
  404184:	3fd287a7 	.word	0x3fd287a7
  404188:	8b60c8b3 	.word	0x8b60c8b3
  40418c:	3fc68a28 	.word	0x3fc68a28
  404190:	509f79fb 	.word	0x509f79fb
  404194:	3fd34413 	.word	0x3fd34413
  404198:	7ff00000 	.word	0x7ff00000
  40419c:	004060bd 	.word	0x004060bd
  4041a0:	004060b4 	.word	0x004060b4
  4041a4:	00406091 	.word	0x00406091
  4041a8:	3ff80000 	.word	0x3ff80000
  4041ac:	00406150 	.word	0x00406150
  4041b0:	00406128 	.word	0x00406128
  4041b4:	2601      	movs	r6, #1
  4041b6:	2300      	movs	r3, #0
  4041b8:	931e      	str	r3, [sp, #120]	; 0x78
  4041ba:	9609      	str	r6, [sp, #36]	; 0x24
  4041bc:	f04f 33ff 	mov.w	r3, #4294967295
  4041c0:	9304      	str	r3, [sp, #16]
  4041c2:	4699      	mov	r9, r3
  4041c4:	2200      	movs	r2, #0
  4041c6:	2312      	movs	r3, #18
  4041c8:	921f      	str	r2, [sp, #124]	; 0x7c
  4041ca:	e786      	b.n	4040da <_dtoa_r+0x242>
  4041cc:	2301      	movs	r3, #1
  4041ce:	9309      	str	r3, [sp, #36]	; 0x24
  4041d0:	e7f4      	b.n	4041bc <_dtoa_r+0x324>
  4041d2:	2301      	movs	r3, #1
  4041d4:	9304      	str	r3, [sp, #16]
  4041d6:	4699      	mov	r9, r3
  4041d8:	461a      	mov	r2, r3
  4041da:	e7f5      	b.n	4041c8 <_dtoa_r+0x330>
  4041dc:	686a      	ldr	r2, [r5, #4]
  4041de:	3201      	adds	r2, #1
  4041e0:	606a      	str	r2, [r5, #4]
  4041e2:	0049      	lsls	r1, r1, #1
  4041e4:	e77d      	b.n	4040e2 <_dtoa_r+0x24a>
  4041e6:	2502      	movs	r5, #2
  4041e8:	e7ae      	b.n	404148 <_dtoa_r+0x2b0>
  4041ea:	07f1      	lsls	r1, r6, #31
  4041ec:	d508      	bpl.n	404200 <_dtoa_r+0x368>
  4041ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4041f2:	e9d7 2300 	ldrd	r2, r3, [r7]
  4041f6:	f7fe fd93 	bl	402d20 <__aeabi_dmul>
  4041fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4041fe:	3501      	adds	r5, #1
  404200:	1076      	asrs	r6, r6, #1
  404202:	3708      	adds	r7, #8
  404204:	e7a1      	b.n	40414a <_dtoa_r+0x2b2>
  404206:	f000 80a5 	beq.w	404354 <_dtoa_r+0x4bc>
  40420a:	f1cb 0600 	rsb	r6, fp, #0
  40420e:	4ba3      	ldr	r3, [pc, #652]	; (40449c <_dtoa_r+0x604>)
  404210:	4fa3      	ldr	r7, [pc, #652]	; (4044a0 <_dtoa_r+0x608>)
  404212:	f006 020f 	and.w	r2, r6, #15
  404216:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40421a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40421e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404222:	f7fe fd7d 	bl	402d20 <__aeabi_dmul>
  404226:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40422a:	1136      	asrs	r6, r6, #4
  40422c:	2300      	movs	r3, #0
  40422e:	2502      	movs	r5, #2
  404230:	2e00      	cmp	r6, #0
  404232:	f040 8084 	bne.w	40433e <_dtoa_r+0x4a6>
  404236:	2b00      	cmp	r3, #0
  404238:	d18f      	bne.n	40415a <_dtoa_r+0x2c2>
  40423a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40423c:	2b00      	cmp	r3, #0
  40423e:	f000 808b 	beq.w	404358 <_dtoa_r+0x4c0>
  404242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404246:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  40424a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40424e:	2200      	movs	r2, #0
  404250:	4b94      	ldr	r3, [pc, #592]	; (4044a4 <_dtoa_r+0x60c>)
  404252:	f7fe ffd7 	bl	403204 <__aeabi_dcmplt>
  404256:	2800      	cmp	r0, #0
  404258:	d07e      	beq.n	404358 <_dtoa_r+0x4c0>
  40425a:	f1b9 0f00 	cmp.w	r9, #0
  40425e:	d07b      	beq.n	404358 <_dtoa_r+0x4c0>
  404260:	9b04      	ldr	r3, [sp, #16]
  404262:	2b00      	cmp	r3, #0
  404264:	dd37      	ble.n	4042d6 <_dtoa_r+0x43e>
  404266:	2200      	movs	r2, #0
  404268:	4b8f      	ldr	r3, [pc, #572]	; (4044a8 <_dtoa_r+0x610>)
  40426a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40426e:	f7fe fd57 	bl	402d20 <__aeabi_dmul>
  404272:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404276:	9e04      	ldr	r6, [sp, #16]
  404278:	f10b 37ff 	add.w	r7, fp, #4294967295
  40427c:	3501      	adds	r5, #1
  40427e:	4628      	mov	r0, r5
  404280:	f7fe fce8 	bl	402c54 <__aeabi_i2d>
  404284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404288:	f7fe fd4a 	bl	402d20 <__aeabi_dmul>
  40428c:	4b87      	ldr	r3, [pc, #540]	; (4044ac <_dtoa_r+0x614>)
  40428e:	2200      	movs	r2, #0
  404290:	f7fe fb94 	bl	4029bc <__adddf3>
  404294:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40429a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
  40429e:	950b      	str	r5, [sp, #44]	; 0x2c
  4042a0:	2e00      	cmp	r6, #0
  4042a2:	d15c      	bne.n	40435e <_dtoa_r+0x4c6>
  4042a4:	2200      	movs	r2, #0
  4042a6:	4b82      	ldr	r3, [pc, #520]	; (4044b0 <_dtoa_r+0x618>)
  4042a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4042ac:	f7fe fb84 	bl	4029b8 <__aeabi_dsub>
  4042b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4042b2:	462b      	mov	r3, r5
  4042b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4042b8:	f7fe ffc2 	bl	403240 <__aeabi_dcmpgt>
  4042bc:	2800      	cmp	r0, #0
  4042be:	f040 82f7 	bne.w	4048b0 <_dtoa_r+0xa18>
  4042c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4042c4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4042c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4042cc:	f7fe ff9a 	bl	403204 <__aeabi_dcmplt>
  4042d0:	2800      	cmp	r0, #0
  4042d2:	f040 82eb 	bne.w	4048ac <_dtoa_r+0xa14>
  4042d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4042da:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4042de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4042e0:	2b00      	cmp	r3, #0
  4042e2:	f2c0 8151 	blt.w	404588 <_dtoa_r+0x6f0>
  4042e6:	f1bb 0f0e 	cmp.w	fp, #14
  4042ea:	f300 814d 	bgt.w	404588 <_dtoa_r+0x6f0>
  4042ee:	4b6b      	ldr	r3, [pc, #428]	; (40449c <_dtoa_r+0x604>)
  4042f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  4042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  4042fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4042fe:	2b00      	cmp	r3, #0
  404300:	f280 80da 	bge.w	4044b8 <_dtoa_r+0x620>
  404304:	f1b9 0f00 	cmp.w	r9, #0
  404308:	f300 80d6 	bgt.w	4044b8 <_dtoa_r+0x620>
  40430c:	f040 82cd 	bne.w	4048aa <_dtoa_r+0xa12>
  404310:	2200      	movs	r2, #0
  404312:	4b67      	ldr	r3, [pc, #412]	; (4044b0 <_dtoa_r+0x618>)
  404314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404318:	f7fe fd02 	bl	402d20 <__aeabi_dmul>
  40431c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404320:	f7fe ff84 	bl	40322c <__aeabi_dcmpge>
  404324:	464e      	mov	r6, r9
  404326:	464f      	mov	r7, r9
  404328:	2800      	cmp	r0, #0
  40432a:	f040 82a4 	bne.w	404876 <_dtoa_r+0x9de>
  40432e:	9b06      	ldr	r3, [sp, #24]
  404330:	9a06      	ldr	r2, [sp, #24]
  404332:	1c5d      	adds	r5, r3, #1
  404334:	2331      	movs	r3, #49	; 0x31
  404336:	7013      	strb	r3, [r2, #0]
  404338:	f10b 0b01 	add.w	fp, fp, #1
  40433c:	e29f      	b.n	40487e <_dtoa_r+0x9e6>
  40433e:	07f2      	lsls	r2, r6, #31
  404340:	d505      	bpl.n	40434e <_dtoa_r+0x4b6>
  404342:	e9d7 2300 	ldrd	r2, r3, [r7]
  404346:	f7fe fceb 	bl	402d20 <__aeabi_dmul>
  40434a:	3501      	adds	r5, #1
  40434c:	2301      	movs	r3, #1
  40434e:	1076      	asrs	r6, r6, #1
  404350:	3708      	adds	r7, #8
  404352:	e76d      	b.n	404230 <_dtoa_r+0x398>
  404354:	2502      	movs	r5, #2
  404356:	e770      	b.n	40423a <_dtoa_r+0x3a2>
  404358:	465f      	mov	r7, fp
  40435a:	464e      	mov	r6, r9
  40435c:	e78f      	b.n	40427e <_dtoa_r+0x3e6>
  40435e:	9a06      	ldr	r2, [sp, #24]
  404360:	4b4e      	ldr	r3, [pc, #312]	; (40449c <_dtoa_r+0x604>)
  404362:	4432      	add	r2, r6
  404364:	9211      	str	r2, [sp, #68]	; 0x44
  404366:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404368:	1e71      	subs	r1, r6, #1
  40436a:	2a00      	cmp	r2, #0
  40436c:	d048      	beq.n	404400 <_dtoa_r+0x568>
  40436e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  404372:	e9d3 2300 	ldrd	r2, r3, [r3]
  404376:	2000      	movs	r0, #0
  404378:	494e      	ldr	r1, [pc, #312]	; (4044b4 <_dtoa_r+0x61c>)
  40437a:	f7fe fdfb 	bl	402f74 <__aeabi_ddiv>
  40437e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404382:	f7fe fb19 	bl	4029b8 <__aeabi_dsub>
  404386:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40438a:	9d06      	ldr	r5, [sp, #24]
  40438c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404390:	f7fe ff60 	bl	403254 <__aeabi_d2iz>
  404394:	4606      	mov	r6, r0
  404396:	f7fe fc5d 	bl	402c54 <__aeabi_i2d>
  40439a:	4602      	mov	r2, r0
  40439c:	460b      	mov	r3, r1
  40439e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4043a2:	f7fe fb09 	bl	4029b8 <__aeabi_dsub>
  4043a6:	3630      	adds	r6, #48	; 0x30
  4043a8:	f805 6b01 	strb.w	r6, [r5], #1
  4043ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4043b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4043b4:	f7fe ff26 	bl	403204 <__aeabi_dcmplt>
  4043b8:	2800      	cmp	r0, #0
  4043ba:	d165      	bne.n	404488 <_dtoa_r+0x5f0>
  4043bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4043c0:	2000      	movs	r0, #0
  4043c2:	4938      	ldr	r1, [pc, #224]	; (4044a4 <_dtoa_r+0x60c>)
  4043c4:	f7fe faf8 	bl	4029b8 <__aeabi_dsub>
  4043c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4043cc:	f7fe ff1a 	bl	403204 <__aeabi_dcmplt>
  4043d0:	2800      	cmp	r0, #0
  4043d2:	f040 80b9 	bne.w	404548 <_dtoa_r+0x6b0>
  4043d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4043d8:	429d      	cmp	r5, r3
  4043da:	f43f af7c 	beq.w	4042d6 <_dtoa_r+0x43e>
  4043de:	2200      	movs	r2, #0
  4043e0:	4b31      	ldr	r3, [pc, #196]	; (4044a8 <_dtoa_r+0x610>)
  4043e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4043e6:	f7fe fc9b 	bl	402d20 <__aeabi_dmul>
  4043ea:	2200      	movs	r2, #0
  4043ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4043f0:	4b2d      	ldr	r3, [pc, #180]	; (4044a8 <_dtoa_r+0x610>)
  4043f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4043f6:	f7fe fc93 	bl	402d20 <__aeabi_dmul>
  4043fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4043fe:	e7c5      	b.n	40438c <_dtoa_r+0x4f4>
  404400:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404404:	e9d1 0100 	ldrd	r0, r1, [r1]
  404408:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40440c:	f7fe fc88 	bl	402d20 <__aeabi_dmul>
  404410:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404414:	9d06      	ldr	r5, [sp, #24]
  404416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40441a:	f7fe ff1b 	bl	403254 <__aeabi_d2iz>
  40441e:	4606      	mov	r6, r0
  404420:	f7fe fc18 	bl	402c54 <__aeabi_i2d>
  404424:	3630      	adds	r6, #48	; 0x30
  404426:	4602      	mov	r2, r0
  404428:	460b      	mov	r3, r1
  40442a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40442e:	f7fe fac3 	bl	4029b8 <__aeabi_dsub>
  404432:	f805 6b01 	strb.w	r6, [r5], #1
  404436:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404438:	42ab      	cmp	r3, r5
  40443a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40443e:	f04f 0200 	mov.w	r2, #0
  404442:	d125      	bne.n	404490 <_dtoa_r+0x5f8>
  404444:	4b1b      	ldr	r3, [pc, #108]	; (4044b4 <_dtoa_r+0x61c>)
  404446:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40444a:	f7fe fab7 	bl	4029bc <__adddf3>
  40444e:	4602      	mov	r2, r0
  404450:	460b      	mov	r3, r1
  404452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404456:	f7fe fef3 	bl	403240 <__aeabi_dcmpgt>
  40445a:	2800      	cmp	r0, #0
  40445c:	d174      	bne.n	404548 <_dtoa_r+0x6b0>
  40445e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404462:	2000      	movs	r0, #0
  404464:	4913      	ldr	r1, [pc, #76]	; (4044b4 <_dtoa_r+0x61c>)
  404466:	f7fe faa7 	bl	4029b8 <__aeabi_dsub>
  40446a:	4602      	mov	r2, r0
  40446c:	460b      	mov	r3, r1
  40446e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404472:	f7fe fec7 	bl	403204 <__aeabi_dcmplt>
  404476:	2800      	cmp	r0, #0
  404478:	f43f af2d 	beq.w	4042d6 <_dtoa_r+0x43e>
  40447c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404480:	2b30      	cmp	r3, #48	; 0x30
  404482:	f105 32ff 	add.w	r2, r5, #4294967295
  404486:	d001      	beq.n	40448c <_dtoa_r+0x5f4>
  404488:	46bb      	mov	fp, r7
  40448a:	e04c      	b.n	404526 <_dtoa_r+0x68e>
  40448c:	4615      	mov	r5, r2
  40448e:	e7f5      	b.n	40447c <_dtoa_r+0x5e4>
  404490:	4b05      	ldr	r3, [pc, #20]	; (4044a8 <_dtoa_r+0x610>)
  404492:	f7fe fc45 	bl	402d20 <__aeabi_dmul>
  404496:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40449a:	e7bc      	b.n	404416 <_dtoa_r+0x57e>
  40449c:	00406150 	.word	0x00406150
  4044a0:	00406128 	.word	0x00406128
  4044a4:	3ff00000 	.word	0x3ff00000
  4044a8:	40240000 	.word	0x40240000
  4044ac:	401c0000 	.word	0x401c0000
  4044b0:	40140000 	.word	0x40140000
  4044b4:	3fe00000 	.word	0x3fe00000
  4044b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4044bc:	9d06      	ldr	r5, [sp, #24]
  4044be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4044c2:	4630      	mov	r0, r6
  4044c4:	4639      	mov	r1, r7
  4044c6:	f7fe fd55 	bl	402f74 <__aeabi_ddiv>
  4044ca:	f7fe fec3 	bl	403254 <__aeabi_d2iz>
  4044ce:	4680      	mov	r8, r0
  4044d0:	f7fe fbc0 	bl	402c54 <__aeabi_i2d>
  4044d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4044d8:	f7fe fc22 	bl	402d20 <__aeabi_dmul>
  4044dc:	4602      	mov	r2, r0
  4044de:	460b      	mov	r3, r1
  4044e0:	4630      	mov	r0, r6
  4044e2:	4639      	mov	r1, r7
  4044e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
  4044e8:	f7fe fa66 	bl	4029b8 <__aeabi_dsub>
  4044ec:	f805 6b01 	strb.w	r6, [r5], #1
  4044f0:	9e06      	ldr	r6, [sp, #24]
  4044f2:	1bae      	subs	r6, r5, r6
  4044f4:	45b1      	cmp	r9, r6
  4044f6:	4602      	mov	r2, r0
  4044f8:	460b      	mov	r3, r1
  4044fa:	d138      	bne.n	40456e <_dtoa_r+0x6d6>
  4044fc:	f7fe fa5e 	bl	4029bc <__adddf3>
  404500:	4606      	mov	r6, r0
  404502:	460f      	mov	r7, r1
  404504:	4602      	mov	r2, r0
  404506:	460b      	mov	r3, r1
  404508:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40450c:	f7fe fe7a 	bl	403204 <__aeabi_dcmplt>
  404510:	b9c8      	cbnz	r0, 404546 <_dtoa_r+0x6ae>
  404512:	4632      	mov	r2, r6
  404514:	463b      	mov	r3, r7
  404516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40451a:	f7fe fe69 	bl	4031f0 <__aeabi_dcmpeq>
  40451e:	b110      	cbz	r0, 404526 <_dtoa_r+0x68e>
  404520:	f018 0f01 	tst.w	r8, #1
  404524:	d10f      	bne.n	404546 <_dtoa_r+0x6ae>
  404526:	4651      	mov	r1, sl
  404528:	4620      	mov	r0, r4
  40452a:	f000 fd05 	bl	404f38 <_Bfree>
  40452e:	2300      	movs	r3, #0
  404530:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404532:	702b      	strb	r3, [r5, #0]
  404534:	f10b 0301 	add.w	r3, fp, #1
  404538:	6013      	str	r3, [r2, #0]
  40453a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40453c:	2b00      	cmp	r3, #0
  40453e:	f43f acf0 	beq.w	403f22 <_dtoa_r+0x8a>
  404542:	601d      	str	r5, [r3, #0]
  404544:	e4ed      	b.n	403f22 <_dtoa_r+0x8a>
  404546:	465f      	mov	r7, fp
  404548:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40454c:	2a39      	cmp	r2, #57	; 0x39
  40454e:	f105 33ff 	add.w	r3, r5, #4294967295
  404552:	d106      	bne.n	404562 <_dtoa_r+0x6ca>
  404554:	9a06      	ldr	r2, [sp, #24]
  404556:	429a      	cmp	r2, r3
  404558:	d107      	bne.n	40456a <_dtoa_r+0x6d2>
  40455a:	2330      	movs	r3, #48	; 0x30
  40455c:	7013      	strb	r3, [r2, #0]
  40455e:	3701      	adds	r7, #1
  404560:	4613      	mov	r3, r2
  404562:	781a      	ldrb	r2, [r3, #0]
  404564:	3201      	adds	r2, #1
  404566:	701a      	strb	r2, [r3, #0]
  404568:	e78e      	b.n	404488 <_dtoa_r+0x5f0>
  40456a:	461d      	mov	r5, r3
  40456c:	e7ec      	b.n	404548 <_dtoa_r+0x6b0>
  40456e:	2200      	movs	r2, #0
  404570:	4bb4      	ldr	r3, [pc, #720]	; (404844 <_dtoa_r+0x9ac>)
  404572:	f7fe fbd5 	bl	402d20 <__aeabi_dmul>
  404576:	2200      	movs	r2, #0
  404578:	2300      	movs	r3, #0
  40457a:	4606      	mov	r6, r0
  40457c:	460f      	mov	r7, r1
  40457e:	f7fe fe37 	bl	4031f0 <__aeabi_dcmpeq>
  404582:	2800      	cmp	r0, #0
  404584:	d09b      	beq.n	4044be <_dtoa_r+0x626>
  404586:	e7ce      	b.n	404526 <_dtoa_r+0x68e>
  404588:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40458a:	2a00      	cmp	r2, #0
  40458c:	f000 8129 	beq.w	4047e2 <_dtoa_r+0x94a>
  404590:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404592:	2a01      	cmp	r2, #1
  404594:	f300 810e 	bgt.w	4047b4 <_dtoa_r+0x91c>
  404598:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40459a:	2a00      	cmp	r2, #0
  40459c:	f000 8106 	beq.w	4047ac <_dtoa_r+0x914>
  4045a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4045a4:	9e08      	ldr	r6, [sp, #32]
  4045a6:	4645      	mov	r5, r8
  4045a8:	9a07      	ldr	r2, [sp, #28]
  4045aa:	2101      	movs	r1, #1
  4045ac:	441a      	add	r2, r3
  4045ae:	4620      	mov	r0, r4
  4045b0:	4498      	add	r8, r3
  4045b2:	9207      	str	r2, [sp, #28]
  4045b4:	f000 fd60 	bl	405078 <__i2b>
  4045b8:	4607      	mov	r7, r0
  4045ba:	2d00      	cmp	r5, #0
  4045bc:	dd0b      	ble.n	4045d6 <_dtoa_r+0x73e>
  4045be:	9b07      	ldr	r3, [sp, #28]
  4045c0:	2b00      	cmp	r3, #0
  4045c2:	dd08      	ble.n	4045d6 <_dtoa_r+0x73e>
  4045c4:	42ab      	cmp	r3, r5
  4045c6:	9a07      	ldr	r2, [sp, #28]
  4045c8:	bfa8      	it	ge
  4045ca:	462b      	movge	r3, r5
  4045cc:	eba8 0803 	sub.w	r8, r8, r3
  4045d0:	1aed      	subs	r5, r5, r3
  4045d2:	1ad3      	subs	r3, r2, r3
  4045d4:	9307      	str	r3, [sp, #28]
  4045d6:	9b08      	ldr	r3, [sp, #32]
  4045d8:	b1fb      	cbz	r3, 40461a <_dtoa_r+0x782>
  4045da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4045dc:	2b00      	cmp	r3, #0
  4045de:	f000 8104 	beq.w	4047ea <_dtoa_r+0x952>
  4045e2:	2e00      	cmp	r6, #0
  4045e4:	dd11      	ble.n	40460a <_dtoa_r+0x772>
  4045e6:	4639      	mov	r1, r7
  4045e8:	4632      	mov	r2, r6
  4045ea:	4620      	mov	r0, r4
  4045ec:	f000 fdda 	bl	4051a4 <__pow5mult>
  4045f0:	4652      	mov	r2, sl
  4045f2:	4601      	mov	r1, r0
  4045f4:	4607      	mov	r7, r0
  4045f6:	4620      	mov	r0, r4
  4045f8:	f000 fd47 	bl	40508a <__multiply>
  4045fc:	4651      	mov	r1, sl
  4045fe:	900a      	str	r0, [sp, #40]	; 0x28
  404600:	4620      	mov	r0, r4
  404602:	f000 fc99 	bl	404f38 <_Bfree>
  404606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404608:	469a      	mov	sl, r3
  40460a:	9b08      	ldr	r3, [sp, #32]
  40460c:	1b9a      	subs	r2, r3, r6
  40460e:	d004      	beq.n	40461a <_dtoa_r+0x782>
  404610:	4651      	mov	r1, sl
  404612:	4620      	mov	r0, r4
  404614:	f000 fdc6 	bl	4051a4 <__pow5mult>
  404618:	4682      	mov	sl, r0
  40461a:	2101      	movs	r1, #1
  40461c:	4620      	mov	r0, r4
  40461e:	f000 fd2b 	bl	405078 <__i2b>
  404622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404624:	2b00      	cmp	r3, #0
  404626:	4606      	mov	r6, r0
  404628:	f340 80e1 	ble.w	4047ee <_dtoa_r+0x956>
  40462c:	461a      	mov	r2, r3
  40462e:	4601      	mov	r1, r0
  404630:	4620      	mov	r0, r4
  404632:	f000 fdb7 	bl	4051a4 <__pow5mult>
  404636:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404638:	2b01      	cmp	r3, #1
  40463a:	4606      	mov	r6, r0
  40463c:	f340 80da 	ble.w	4047f4 <_dtoa_r+0x95c>
  404640:	2300      	movs	r3, #0
  404642:	9308      	str	r3, [sp, #32]
  404644:	6933      	ldr	r3, [r6, #16]
  404646:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  40464a:	6918      	ldr	r0, [r3, #16]
  40464c:	f000 fcc6 	bl	404fdc <__hi0bits>
  404650:	f1c0 0020 	rsb	r0, r0, #32
  404654:	9b07      	ldr	r3, [sp, #28]
  404656:	4418      	add	r0, r3
  404658:	f010 001f 	ands.w	r0, r0, #31
  40465c:	f000 80f0 	beq.w	404840 <_dtoa_r+0x9a8>
  404660:	f1c0 0320 	rsb	r3, r0, #32
  404664:	2b04      	cmp	r3, #4
  404666:	f340 80e2 	ble.w	40482e <_dtoa_r+0x996>
  40466a:	9b07      	ldr	r3, [sp, #28]
  40466c:	f1c0 001c 	rsb	r0, r0, #28
  404670:	4480      	add	r8, r0
  404672:	4405      	add	r5, r0
  404674:	4403      	add	r3, r0
  404676:	9307      	str	r3, [sp, #28]
  404678:	f1b8 0f00 	cmp.w	r8, #0
  40467c:	dd05      	ble.n	40468a <_dtoa_r+0x7f2>
  40467e:	4651      	mov	r1, sl
  404680:	4642      	mov	r2, r8
  404682:	4620      	mov	r0, r4
  404684:	f000 fddc 	bl	405240 <__lshift>
  404688:	4682      	mov	sl, r0
  40468a:	9b07      	ldr	r3, [sp, #28]
  40468c:	2b00      	cmp	r3, #0
  40468e:	dd05      	ble.n	40469c <_dtoa_r+0x804>
  404690:	4631      	mov	r1, r6
  404692:	461a      	mov	r2, r3
  404694:	4620      	mov	r0, r4
  404696:	f000 fdd3 	bl	405240 <__lshift>
  40469a:	4606      	mov	r6, r0
  40469c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40469e:	2b00      	cmp	r3, #0
  4046a0:	f000 80d2 	beq.w	404848 <_dtoa_r+0x9b0>
  4046a4:	4631      	mov	r1, r6
  4046a6:	4650      	mov	r0, sl
  4046a8:	f000 fe1b 	bl	4052e2 <__mcmp>
  4046ac:	2800      	cmp	r0, #0
  4046ae:	f280 80cb 	bge.w	404848 <_dtoa_r+0x9b0>
  4046b2:	2300      	movs	r3, #0
  4046b4:	4651      	mov	r1, sl
  4046b6:	220a      	movs	r2, #10
  4046b8:	4620      	mov	r0, r4
  4046ba:	f000 fc54 	bl	404f66 <__multadd>
  4046be:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4046c0:	f10b 3bff 	add.w	fp, fp, #4294967295
  4046c4:	4682      	mov	sl, r0
  4046c6:	2b00      	cmp	r3, #0
  4046c8:	f000 81aa 	beq.w	404a20 <_dtoa_r+0xb88>
  4046cc:	2300      	movs	r3, #0
  4046ce:	4639      	mov	r1, r7
  4046d0:	220a      	movs	r2, #10
  4046d2:	4620      	mov	r0, r4
  4046d4:	f000 fc47 	bl	404f66 <__multadd>
  4046d8:	9b04      	ldr	r3, [sp, #16]
  4046da:	2b00      	cmp	r3, #0
  4046dc:	4607      	mov	r7, r0
  4046de:	dc03      	bgt.n	4046e8 <_dtoa_r+0x850>
  4046e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4046e2:	2b02      	cmp	r3, #2
  4046e4:	f300 80b8 	bgt.w	404858 <_dtoa_r+0x9c0>
  4046e8:	2d00      	cmp	r5, #0
  4046ea:	dd05      	ble.n	4046f8 <_dtoa_r+0x860>
  4046ec:	4639      	mov	r1, r7
  4046ee:	462a      	mov	r2, r5
  4046f0:	4620      	mov	r0, r4
  4046f2:	f000 fda5 	bl	405240 <__lshift>
  4046f6:	4607      	mov	r7, r0
  4046f8:	9b08      	ldr	r3, [sp, #32]
  4046fa:	2b00      	cmp	r3, #0
  4046fc:	f000 8110 	beq.w	404920 <_dtoa_r+0xa88>
  404700:	6879      	ldr	r1, [r7, #4]
  404702:	4620      	mov	r0, r4
  404704:	f000 fbe4 	bl	404ed0 <_Balloc>
  404708:	693a      	ldr	r2, [r7, #16]
  40470a:	3202      	adds	r2, #2
  40470c:	4605      	mov	r5, r0
  40470e:	0092      	lsls	r2, r2, #2
  404710:	f107 010c 	add.w	r1, r7, #12
  404714:	300c      	adds	r0, #12
  404716:	f7fe fde9 	bl	4032ec <memcpy>
  40471a:	2201      	movs	r2, #1
  40471c:	4629      	mov	r1, r5
  40471e:	4620      	mov	r0, r4
  404720:	f000 fd8e 	bl	405240 <__lshift>
  404724:	9b02      	ldr	r3, [sp, #8]
  404726:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40472a:	9707      	str	r7, [sp, #28]
  40472c:	f003 0301 	and.w	r3, r3, #1
  404730:	4607      	mov	r7, r0
  404732:	9308      	str	r3, [sp, #32]
  404734:	4631      	mov	r1, r6
  404736:	4650      	mov	r0, sl
  404738:	f7ff fb20 	bl	403d7c <quorem>
  40473c:	9907      	ldr	r1, [sp, #28]
  40473e:	4605      	mov	r5, r0
  404740:	f100 0930 	add.w	r9, r0, #48	; 0x30
  404744:	4650      	mov	r0, sl
  404746:	f000 fdcc 	bl	4052e2 <__mcmp>
  40474a:	463a      	mov	r2, r7
  40474c:	9002      	str	r0, [sp, #8]
  40474e:	4631      	mov	r1, r6
  404750:	4620      	mov	r0, r4
  404752:	f000 fde0 	bl	405316 <__mdiff>
  404756:	68c3      	ldr	r3, [r0, #12]
  404758:	4602      	mov	r2, r0
  40475a:	2b00      	cmp	r3, #0
  40475c:	f040 80e2 	bne.w	404924 <_dtoa_r+0xa8c>
  404760:	4601      	mov	r1, r0
  404762:	9009      	str	r0, [sp, #36]	; 0x24
  404764:	4650      	mov	r0, sl
  404766:	f000 fdbc 	bl	4052e2 <__mcmp>
  40476a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40476c:	4603      	mov	r3, r0
  40476e:	4611      	mov	r1, r2
  404770:	4620      	mov	r0, r4
  404772:	9309      	str	r3, [sp, #36]	; 0x24
  404774:	f000 fbe0 	bl	404f38 <_Bfree>
  404778:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40477a:	2b00      	cmp	r3, #0
  40477c:	f040 80d4 	bne.w	404928 <_dtoa_r+0xa90>
  404780:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404782:	2a00      	cmp	r2, #0
  404784:	f040 80d0 	bne.w	404928 <_dtoa_r+0xa90>
  404788:	9a08      	ldr	r2, [sp, #32]
  40478a:	2a00      	cmp	r2, #0
  40478c:	f040 80cc 	bne.w	404928 <_dtoa_r+0xa90>
  404790:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404794:	f000 80e8 	beq.w	404968 <_dtoa_r+0xad0>
  404798:	9b02      	ldr	r3, [sp, #8]
  40479a:	2b00      	cmp	r3, #0
  40479c:	dd01      	ble.n	4047a2 <_dtoa_r+0x90a>
  40479e:	f105 0931 	add.w	r9, r5, #49	; 0x31
  4047a2:	f108 0501 	add.w	r5, r8, #1
  4047a6:	f888 9000 	strb.w	r9, [r8]
  4047aa:	e06a      	b.n	404882 <_dtoa_r+0x9ea>
  4047ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4047ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4047b2:	e6f7      	b.n	4045a4 <_dtoa_r+0x70c>
  4047b4:	9b08      	ldr	r3, [sp, #32]
  4047b6:	f109 36ff 	add.w	r6, r9, #4294967295
  4047ba:	42b3      	cmp	r3, r6
  4047bc:	bfbf      	itttt	lt
  4047be:	9b08      	ldrlt	r3, [sp, #32]
  4047c0:	9608      	strlt	r6, [sp, #32]
  4047c2:	1af2      	sublt	r2, r6, r3
  4047c4:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
  4047c6:	bfb7      	itett	lt
  4047c8:	189b      	addlt	r3, r3, r2
  4047ca:	1b9e      	subge	r6, r3, r6
  4047cc:	930c      	strlt	r3, [sp, #48]	; 0x30
  4047ce:	2600      	movlt	r6, #0
  4047d0:	f1b9 0f00 	cmp.w	r9, #0
  4047d4:	bfb9      	ittee	lt
  4047d6:	eba8 0509 	sublt.w	r5, r8, r9
  4047da:	2300      	movlt	r3, #0
  4047dc:	4645      	movge	r5, r8
  4047de:	464b      	movge	r3, r9
  4047e0:	e6e2      	b.n	4045a8 <_dtoa_r+0x710>
  4047e2:	9e08      	ldr	r6, [sp, #32]
  4047e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4047e6:	4645      	mov	r5, r8
  4047e8:	e6e7      	b.n	4045ba <_dtoa_r+0x722>
  4047ea:	9a08      	ldr	r2, [sp, #32]
  4047ec:	e710      	b.n	404610 <_dtoa_r+0x778>
  4047ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4047f0:	2b01      	cmp	r3, #1
  4047f2:	dc18      	bgt.n	404826 <_dtoa_r+0x98e>
  4047f4:	9b02      	ldr	r3, [sp, #8]
  4047f6:	b9b3      	cbnz	r3, 404826 <_dtoa_r+0x98e>
  4047f8:	9b03      	ldr	r3, [sp, #12]
  4047fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4047fe:	b9a3      	cbnz	r3, 40482a <_dtoa_r+0x992>
  404800:	9b03      	ldr	r3, [sp, #12]
  404802:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  404806:	0d1b      	lsrs	r3, r3, #20
  404808:	051b      	lsls	r3, r3, #20
  40480a:	b12b      	cbz	r3, 404818 <_dtoa_r+0x980>
  40480c:	9b07      	ldr	r3, [sp, #28]
  40480e:	3301      	adds	r3, #1
  404810:	9307      	str	r3, [sp, #28]
  404812:	f108 0801 	add.w	r8, r8, #1
  404816:	2301      	movs	r3, #1
  404818:	9308      	str	r3, [sp, #32]
  40481a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40481c:	2b00      	cmp	r3, #0
  40481e:	f47f af11 	bne.w	404644 <_dtoa_r+0x7ac>
  404822:	2001      	movs	r0, #1
  404824:	e716      	b.n	404654 <_dtoa_r+0x7bc>
  404826:	2300      	movs	r3, #0
  404828:	e7f6      	b.n	404818 <_dtoa_r+0x980>
  40482a:	9b02      	ldr	r3, [sp, #8]
  40482c:	e7f4      	b.n	404818 <_dtoa_r+0x980>
  40482e:	f43f af23 	beq.w	404678 <_dtoa_r+0x7e0>
  404832:	9a07      	ldr	r2, [sp, #28]
  404834:	331c      	adds	r3, #28
  404836:	441a      	add	r2, r3
  404838:	4498      	add	r8, r3
  40483a:	441d      	add	r5, r3
  40483c:	4613      	mov	r3, r2
  40483e:	e71a      	b.n	404676 <_dtoa_r+0x7de>
  404840:	4603      	mov	r3, r0
  404842:	e7f6      	b.n	404832 <_dtoa_r+0x99a>
  404844:	40240000 	.word	0x40240000
  404848:	f1b9 0f00 	cmp.w	r9, #0
  40484c:	dc33      	bgt.n	4048b6 <_dtoa_r+0xa1e>
  40484e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404850:	2b02      	cmp	r3, #2
  404852:	dd30      	ble.n	4048b6 <_dtoa_r+0xa1e>
  404854:	f8cd 9010 	str.w	r9, [sp, #16]
  404858:	9b04      	ldr	r3, [sp, #16]
  40485a:	b963      	cbnz	r3, 404876 <_dtoa_r+0x9de>
  40485c:	4631      	mov	r1, r6
  40485e:	2205      	movs	r2, #5
  404860:	4620      	mov	r0, r4
  404862:	f000 fb80 	bl	404f66 <__multadd>
  404866:	4601      	mov	r1, r0
  404868:	4606      	mov	r6, r0
  40486a:	4650      	mov	r0, sl
  40486c:	f000 fd39 	bl	4052e2 <__mcmp>
  404870:	2800      	cmp	r0, #0
  404872:	f73f ad5c 	bgt.w	40432e <_dtoa_r+0x496>
  404876:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404878:	9d06      	ldr	r5, [sp, #24]
  40487a:	ea6f 0b03 	mvn.w	fp, r3
  40487e:	2300      	movs	r3, #0
  404880:	9307      	str	r3, [sp, #28]
  404882:	4631      	mov	r1, r6
  404884:	4620      	mov	r0, r4
  404886:	f000 fb57 	bl	404f38 <_Bfree>
  40488a:	2f00      	cmp	r7, #0
  40488c:	f43f ae4b 	beq.w	404526 <_dtoa_r+0x68e>
  404890:	9b07      	ldr	r3, [sp, #28]
  404892:	b12b      	cbz	r3, 4048a0 <_dtoa_r+0xa08>
  404894:	42bb      	cmp	r3, r7
  404896:	d003      	beq.n	4048a0 <_dtoa_r+0xa08>
  404898:	4619      	mov	r1, r3
  40489a:	4620      	mov	r0, r4
  40489c:	f000 fb4c 	bl	404f38 <_Bfree>
  4048a0:	4639      	mov	r1, r7
  4048a2:	4620      	mov	r0, r4
  4048a4:	f000 fb48 	bl	404f38 <_Bfree>
  4048a8:	e63d      	b.n	404526 <_dtoa_r+0x68e>
  4048aa:	2600      	movs	r6, #0
  4048ac:	4637      	mov	r7, r6
  4048ae:	e7e2      	b.n	404876 <_dtoa_r+0x9de>
  4048b0:	46bb      	mov	fp, r7
  4048b2:	4637      	mov	r7, r6
  4048b4:	e53b      	b.n	40432e <_dtoa_r+0x496>
  4048b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4048b8:	f8cd 9010 	str.w	r9, [sp, #16]
  4048bc:	2b00      	cmp	r3, #0
  4048be:	f47f af13 	bne.w	4046e8 <_dtoa_r+0x850>
  4048c2:	9d06      	ldr	r5, [sp, #24]
  4048c4:	4631      	mov	r1, r6
  4048c6:	4650      	mov	r0, sl
  4048c8:	f7ff fa58 	bl	403d7c <quorem>
  4048cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4048d0:	f805 9b01 	strb.w	r9, [r5], #1
  4048d4:	9b06      	ldr	r3, [sp, #24]
  4048d6:	9a04      	ldr	r2, [sp, #16]
  4048d8:	1aeb      	subs	r3, r5, r3
  4048da:	429a      	cmp	r2, r3
  4048dc:	f300 8083 	bgt.w	4049e6 <_dtoa_r+0xb4e>
  4048e0:	9b06      	ldr	r3, [sp, #24]
  4048e2:	2a01      	cmp	r2, #1
  4048e4:	bfac      	ite	ge
  4048e6:	189b      	addge	r3, r3, r2
  4048e8:	3301      	addlt	r3, #1
  4048ea:	4698      	mov	r8, r3
  4048ec:	2300      	movs	r3, #0
  4048ee:	9307      	str	r3, [sp, #28]
  4048f0:	4651      	mov	r1, sl
  4048f2:	2201      	movs	r2, #1
  4048f4:	4620      	mov	r0, r4
  4048f6:	f000 fca3 	bl	405240 <__lshift>
  4048fa:	4631      	mov	r1, r6
  4048fc:	4682      	mov	sl, r0
  4048fe:	f000 fcf0 	bl	4052e2 <__mcmp>
  404902:	2800      	cmp	r0, #0
  404904:	dc35      	bgt.n	404972 <_dtoa_r+0xada>
  404906:	d102      	bne.n	40490e <_dtoa_r+0xa76>
  404908:	f019 0f01 	tst.w	r9, #1
  40490c:	d131      	bne.n	404972 <_dtoa_r+0xada>
  40490e:	4645      	mov	r5, r8
  404910:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404914:	2b30      	cmp	r3, #48	; 0x30
  404916:	f105 32ff 	add.w	r2, r5, #4294967295
  40491a:	d1b2      	bne.n	404882 <_dtoa_r+0x9ea>
  40491c:	4615      	mov	r5, r2
  40491e:	e7f7      	b.n	404910 <_dtoa_r+0xa78>
  404920:	4638      	mov	r0, r7
  404922:	e6ff      	b.n	404724 <_dtoa_r+0x88c>
  404924:	2301      	movs	r3, #1
  404926:	e722      	b.n	40476e <_dtoa_r+0x8d6>
  404928:	9a02      	ldr	r2, [sp, #8]
  40492a:	2a00      	cmp	r2, #0
  40492c:	db04      	blt.n	404938 <_dtoa_r+0xaa0>
  40492e:	d129      	bne.n	404984 <_dtoa_r+0xaec>
  404930:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404932:	bb3a      	cbnz	r2, 404984 <_dtoa_r+0xaec>
  404934:	9a08      	ldr	r2, [sp, #32]
  404936:	bb2a      	cbnz	r2, 404984 <_dtoa_r+0xaec>
  404938:	2b00      	cmp	r3, #0
  40493a:	f77f af32 	ble.w	4047a2 <_dtoa_r+0x90a>
  40493e:	4651      	mov	r1, sl
  404940:	2201      	movs	r2, #1
  404942:	4620      	mov	r0, r4
  404944:	f000 fc7c 	bl	405240 <__lshift>
  404948:	4631      	mov	r1, r6
  40494a:	4682      	mov	sl, r0
  40494c:	f000 fcc9 	bl	4052e2 <__mcmp>
  404950:	2800      	cmp	r0, #0
  404952:	dc05      	bgt.n	404960 <_dtoa_r+0xac8>
  404954:	f47f af25 	bne.w	4047a2 <_dtoa_r+0x90a>
  404958:	f019 0f01 	tst.w	r9, #1
  40495c:	f43f af21 	beq.w	4047a2 <_dtoa_r+0x90a>
  404960:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404964:	f47f af1b 	bne.w	40479e <_dtoa_r+0x906>
  404968:	2339      	movs	r3, #57	; 0x39
  40496a:	f888 3000 	strb.w	r3, [r8]
  40496e:	f108 0801 	add.w	r8, r8, #1
  404972:	4645      	mov	r5, r8
  404974:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404978:	2b39      	cmp	r3, #57	; 0x39
  40497a:	f105 32ff 	add.w	r2, r5, #4294967295
  40497e:	d03a      	beq.n	4049f6 <_dtoa_r+0xb5e>
  404980:	3301      	adds	r3, #1
  404982:	e03f      	b.n	404a04 <_dtoa_r+0xb6c>
  404984:	2b00      	cmp	r3, #0
  404986:	f108 0501 	add.w	r5, r8, #1
  40498a:	dd05      	ble.n	404998 <_dtoa_r+0xb00>
  40498c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  404990:	d0ea      	beq.n	404968 <_dtoa_r+0xad0>
  404992:	f109 0901 	add.w	r9, r9, #1
  404996:	e706      	b.n	4047a6 <_dtoa_r+0x90e>
  404998:	9b06      	ldr	r3, [sp, #24]
  40499a:	9a04      	ldr	r2, [sp, #16]
  40499c:	f805 9c01 	strb.w	r9, [r5, #-1]
  4049a0:	1aeb      	subs	r3, r5, r3
  4049a2:	4293      	cmp	r3, r2
  4049a4:	46a8      	mov	r8, r5
  4049a6:	d0a3      	beq.n	4048f0 <_dtoa_r+0xa58>
  4049a8:	4651      	mov	r1, sl
  4049aa:	2300      	movs	r3, #0
  4049ac:	220a      	movs	r2, #10
  4049ae:	4620      	mov	r0, r4
  4049b0:	f000 fad9 	bl	404f66 <__multadd>
  4049b4:	9b07      	ldr	r3, [sp, #28]
  4049b6:	9907      	ldr	r1, [sp, #28]
  4049b8:	42bb      	cmp	r3, r7
  4049ba:	4682      	mov	sl, r0
  4049bc:	f04f 0300 	mov.w	r3, #0
  4049c0:	f04f 020a 	mov.w	r2, #10
  4049c4:	4620      	mov	r0, r4
  4049c6:	d104      	bne.n	4049d2 <_dtoa_r+0xb3a>
  4049c8:	f000 facd 	bl	404f66 <__multadd>
  4049cc:	9007      	str	r0, [sp, #28]
  4049ce:	4607      	mov	r7, r0
  4049d0:	e6b0      	b.n	404734 <_dtoa_r+0x89c>
  4049d2:	f000 fac8 	bl	404f66 <__multadd>
  4049d6:	2300      	movs	r3, #0
  4049d8:	9007      	str	r0, [sp, #28]
  4049da:	220a      	movs	r2, #10
  4049dc:	4639      	mov	r1, r7
  4049de:	4620      	mov	r0, r4
  4049e0:	f000 fac1 	bl	404f66 <__multadd>
  4049e4:	e7f3      	b.n	4049ce <_dtoa_r+0xb36>
  4049e6:	4651      	mov	r1, sl
  4049e8:	2300      	movs	r3, #0
  4049ea:	220a      	movs	r2, #10
  4049ec:	4620      	mov	r0, r4
  4049ee:	f000 faba 	bl	404f66 <__multadd>
  4049f2:	4682      	mov	sl, r0
  4049f4:	e766      	b.n	4048c4 <_dtoa_r+0xa2c>
  4049f6:	9b06      	ldr	r3, [sp, #24]
  4049f8:	4293      	cmp	r3, r2
  4049fa:	d105      	bne.n	404a08 <_dtoa_r+0xb70>
  4049fc:	9a06      	ldr	r2, [sp, #24]
  4049fe:	f10b 0b01 	add.w	fp, fp, #1
  404a02:	2331      	movs	r3, #49	; 0x31
  404a04:	7013      	strb	r3, [r2, #0]
  404a06:	e73c      	b.n	404882 <_dtoa_r+0x9ea>
  404a08:	4615      	mov	r5, r2
  404a0a:	e7b3      	b.n	404974 <_dtoa_r+0xadc>
  404a0c:	4b09      	ldr	r3, [pc, #36]	; (404a34 <_dtoa_r+0xb9c>)
  404a0e:	f7ff baa5 	b.w	403f5c <_dtoa_r+0xc4>
  404a12:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404a14:	2b00      	cmp	r3, #0
  404a16:	f47f aa7f 	bne.w	403f18 <_dtoa_r+0x80>
  404a1a:	4b07      	ldr	r3, [pc, #28]	; (404a38 <_dtoa_r+0xba0>)
  404a1c:	f7ff ba9e 	b.w	403f5c <_dtoa_r+0xc4>
  404a20:	9b04      	ldr	r3, [sp, #16]
  404a22:	2b00      	cmp	r3, #0
  404a24:	f73f af4d 	bgt.w	4048c2 <_dtoa_r+0xa2a>
  404a28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404a2a:	2b02      	cmp	r3, #2
  404a2c:	f77f af49 	ble.w	4048c2 <_dtoa_r+0xa2a>
  404a30:	e712      	b.n	404858 <_dtoa_r+0x9c0>
  404a32:	bf00      	nop
  404a34:	00406090 	.word	0x00406090
  404a38:	004060b4 	.word	0x004060b4

00404a3c <__sflush_r>:
  404a3c:	898a      	ldrh	r2, [r1, #12]
  404a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404a42:	4605      	mov	r5, r0
  404a44:	0710      	lsls	r0, r2, #28
  404a46:	460c      	mov	r4, r1
  404a48:	d45a      	bmi.n	404b00 <__sflush_r+0xc4>
  404a4a:	684b      	ldr	r3, [r1, #4]
  404a4c:	2b00      	cmp	r3, #0
  404a4e:	dc05      	bgt.n	404a5c <__sflush_r+0x20>
  404a50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  404a52:	2b00      	cmp	r3, #0
  404a54:	dc02      	bgt.n	404a5c <__sflush_r+0x20>
  404a56:	2000      	movs	r0, #0
  404a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404a5e:	2e00      	cmp	r6, #0
  404a60:	d0f9      	beq.n	404a56 <__sflush_r+0x1a>
  404a62:	2300      	movs	r3, #0
  404a64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  404a68:	682f      	ldr	r7, [r5, #0]
  404a6a:	602b      	str	r3, [r5, #0]
  404a6c:	d033      	beq.n	404ad6 <__sflush_r+0x9a>
  404a6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  404a70:	89a3      	ldrh	r3, [r4, #12]
  404a72:	075a      	lsls	r2, r3, #29
  404a74:	d505      	bpl.n	404a82 <__sflush_r+0x46>
  404a76:	6863      	ldr	r3, [r4, #4]
  404a78:	1ac0      	subs	r0, r0, r3
  404a7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  404a7c:	b10b      	cbz	r3, 404a82 <__sflush_r+0x46>
  404a7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  404a80:	1ac0      	subs	r0, r0, r3
  404a82:	2300      	movs	r3, #0
  404a84:	4602      	mov	r2, r0
  404a86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404a88:	6a21      	ldr	r1, [r4, #32]
  404a8a:	4628      	mov	r0, r5
  404a8c:	47b0      	blx	r6
  404a8e:	1c43      	adds	r3, r0, #1
  404a90:	89a3      	ldrh	r3, [r4, #12]
  404a92:	d106      	bne.n	404aa2 <__sflush_r+0x66>
  404a94:	6829      	ldr	r1, [r5, #0]
  404a96:	291d      	cmp	r1, #29
  404a98:	d84b      	bhi.n	404b32 <__sflush_r+0xf6>
  404a9a:	4a2b      	ldr	r2, [pc, #172]	; (404b48 <__sflush_r+0x10c>)
  404a9c:	40ca      	lsrs	r2, r1
  404a9e:	07d6      	lsls	r6, r2, #31
  404aa0:	d547      	bpl.n	404b32 <__sflush_r+0xf6>
  404aa2:	2200      	movs	r2, #0
  404aa4:	6062      	str	r2, [r4, #4]
  404aa6:	04d9      	lsls	r1, r3, #19
  404aa8:	6922      	ldr	r2, [r4, #16]
  404aaa:	6022      	str	r2, [r4, #0]
  404aac:	d504      	bpl.n	404ab8 <__sflush_r+0x7c>
  404aae:	1c42      	adds	r2, r0, #1
  404ab0:	d101      	bne.n	404ab6 <__sflush_r+0x7a>
  404ab2:	682b      	ldr	r3, [r5, #0]
  404ab4:	b903      	cbnz	r3, 404ab8 <__sflush_r+0x7c>
  404ab6:	6560      	str	r0, [r4, #84]	; 0x54
  404ab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
  404aba:	602f      	str	r7, [r5, #0]
  404abc:	2900      	cmp	r1, #0
  404abe:	d0ca      	beq.n	404a56 <__sflush_r+0x1a>
  404ac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404ac4:	4299      	cmp	r1, r3
  404ac6:	d002      	beq.n	404ace <__sflush_r+0x92>
  404ac8:	4628      	mov	r0, r5
  404aca:	f000 fcdf 	bl	40548c <_free_r>
  404ace:	2000      	movs	r0, #0
  404ad0:	6360      	str	r0, [r4, #52]	; 0x34
  404ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404ad6:	6a21      	ldr	r1, [r4, #32]
  404ad8:	2301      	movs	r3, #1
  404ada:	4628      	mov	r0, r5
  404adc:	47b0      	blx	r6
  404ade:	1c41      	adds	r1, r0, #1
  404ae0:	d1c6      	bne.n	404a70 <__sflush_r+0x34>
  404ae2:	682b      	ldr	r3, [r5, #0]
  404ae4:	2b00      	cmp	r3, #0
  404ae6:	d0c3      	beq.n	404a70 <__sflush_r+0x34>
  404ae8:	2b1d      	cmp	r3, #29
  404aea:	d001      	beq.n	404af0 <__sflush_r+0xb4>
  404aec:	2b16      	cmp	r3, #22
  404aee:	d101      	bne.n	404af4 <__sflush_r+0xb8>
  404af0:	602f      	str	r7, [r5, #0]
  404af2:	e7b0      	b.n	404a56 <__sflush_r+0x1a>
  404af4:	89a3      	ldrh	r3, [r4, #12]
  404af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404afa:	81a3      	strh	r3, [r4, #12]
  404afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b00:	690f      	ldr	r7, [r1, #16]
  404b02:	2f00      	cmp	r7, #0
  404b04:	d0a7      	beq.n	404a56 <__sflush_r+0x1a>
  404b06:	0793      	lsls	r3, r2, #30
  404b08:	680e      	ldr	r6, [r1, #0]
  404b0a:	bf08      	it	eq
  404b0c:	694b      	ldreq	r3, [r1, #20]
  404b0e:	600f      	str	r7, [r1, #0]
  404b10:	bf18      	it	ne
  404b12:	2300      	movne	r3, #0
  404b14:	eba6 0807 	sub.w	r8, r6, r7
  404b18:	608b      	str	r3, [r1, #8]
  404b1a:	f1b8 0f00 	cmp.w	r8, #0
  404b1e:	dd9a      	ble.n	404a56 <__sflush_r+0x1a>
  404b20:	4643      	mov	r3, r8
  404b22:	463a      	mov	r2, r7
  404b24:	6a21      	ldr	r1, [r4, #32]
  404b26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  404b28:	4628      	mov	r0, r5
  404b2a:	47b0      	blx	r6
  404b2c:	2800      	cmp	r0, #0
  404b2e:	dc07      	bgt.n	404b40 <__sflush_r+0x104>
  404b30:	89a3      	ldrh	r3, [r4, #12]
  404b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b36:	81a3      	strh	r3, [r4, #12]
  404b38:	f04f 30ff 	mov.w	r0, #4294967295
  404b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404b40:	4407      	add	r7, r0
  404b42:	eba8 0800 	sub.w	r8, r8, r0
  404b46:	e7e8      	b.n	404b1a <__sflush_r+0xde>
  404b48:	20400001 	.word	0x20400001

00404b4c <_fflush_r>:
  404b4c:	b538      	push	{r3, r4, r5, lr}
  404b4e:	690b      	ldr	r3, [r1, #16]
  404b50:	4605      	mov	r5, r0
  404b52:	460c      	mov	r4, r1
  404b54:	b1db      	cbz	r3, 404b8e <_fflush_r+0x42>
  404b56:	b118      	cbz	r0, 404b60 <_fflush_r+0x14>
  404b58:	6983      	ldr	r3, [r0, #24]
  404b5a:	b90b      	cbnz	r3, 404b60 <_fflush_r+0x14>
  404b5c:	f000 f860 	bl	404c20 <__sinit>
  404b60:	4b0c      	ldr	r3, [pc, #48]	; (404b94 <_fflush_r+0x48>)
  404b62:	429c      	cmp	r4, r3
  404b64:	d109      	bne.n	404b7a <_fflush_r+0x2e>
  404b66:	686c      	ldr	r4, [r5, #4]
  404b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b6c:	b17b      	cbz	r3, 404b8e <_fflush_r+0x42>
  404b6e:	4621      	mov	r1, r4
  404b70:	4628      	mov	r0, r5
  404b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404b76:	f7ff bf61 	b.w	404a3c <__sflush_r>
  404b7a:	4b07      	ldr	r3, [pc, #28]	; (404b98 <_fflush_r+0x4c>)
  404b7c:	429c      	cmp	r4, r3
  404b7e:	d101      	bne.n	404b84 <_fflush_r+0x38>
  404b80:	68ac      	ldr	r4, [r5, #8]
  404b82:	e7f1      	b.n	404b68 <_fflush_r+0x1c>
  404b84:	4b05      	ldr	r3, [pc, #20]	; (404b9c <_fflush_r+0x50>)
  404b86:	429c      	cmp	r4, r3
  404b88:	bf08      	it	eq
  404b8a:	68ec      	ldreq	r4, [r5, #12]
  404b8c:	e7ec      	b.n	404b68 <_fflush_r+0x1c>
  404b8e:	2000      	movs	r0, #0
  404b90:	bd38      	pop	{r3, r4, r5, pc}
  404b92:	bf00      	nop
  404b94:	004060e4 	.word	0x004060e4
  404b98:	00406104 	.word	0x00406104
  404b9c:	004060c4 	.word	0x004060c4

00404ba0 <_cleanup_r>:
  404ba0:	4901      	ldr	r1, [pc, #4]	; (404ba8 <_cleanup_r+0x8>)
  404ba2:	f000 b8a9 	b.w	404cf8 <_fwalk_reent>
  404ba6:	bf00      	nop
  404ba8:	00404b4d 	.word	0x00404b4d

00404bac <std.isra.0>:
  404bac:	2300      	movs	r3, #0
  404bae:	b510      	push	{r4, lr}
  404bb0:	4604      	mov	r4, r0
  404bb2:	6003      	str	r3, [r0, #0]
  404bb4:	6043      	str	r3, [r0, #4]
  404bb6:	6083      	str	r3, [r0, #8]
  404bb8:	8181      	strh	r1, [r0, #12]
  404bba:	6643      	str	r3, [r0, #100]	; 0x64
  404bbc:	81c2      	strh	r2, [r0, #14]
  404bbe:	6103      	str	r3, [r0, #16]
  404bc0:	6143      	str	r3, [r0, #20]
  404bc2:	6183      	str	r3, [r0, #24]
  404bc4:	4619      	mov	r1, r3
  404bc6:	2208      	movs	r2, #8
  404bc8:	305c      	adds	r0, #92	; 0x5c
  404bca:	f7fe fb9a 	bl	403302 <memset>
  404bce:	4b05      	ldr	r3, [pc, #20]	; (404be4 <std.isra.0+0x38>)
  404bd0:	6263      	str	r3, [r4, #36]	; 0x24
  404bd2:	4b05      	ldr	r3, [pc, #20]	; (404be8 <std.isra.0+0x3c>)
  404bd4:	62a3      	str	r3, [r4, #40]	; 0x28
  404bd6:	4b05      	ldr	r3, [pc, #20]	; (404bec <std.isra.0+0x40>)
  404bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
  404bda:	4b05      	ldr	r3, [pc, #20]	; (404bf0 <std.isra.0+0x44>)
  404bdc:	6224      	str	r4, [r4, #32]
  404bde:	6323      	str	r3, [r4, #48]	; 0x30
  404be0:	bd10      	pop	{r4, pc}
  404be2:	bf00      	nop
  404be4:	00405881 	.word	0x00405881
  404be8:	004058a3 	.word	0x004058a3
  404bec:	004058db 	.word	0x004058db
  404bf0:	004058ff 	.word	0x004058ff

00404bf4 <__sfmoreglue>:
  404bf4:	b570      	push	{r4, r5, r6, lr}
  404bf6:	1e4a      	subs	r2, r1, #1
  404bf8:	2568      	movs	r5, #104	; 0x68
  404bfa:	4355      	muls	r5, r2
  404bfc:	460e      	mov	r6, r1
  404bfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
  404c02:	f000 fc91 	bl	405528 <_malloc_r>
  404c06:	4604      	mov	r4, r0
  404c08:	b140      	cbz	r0, 404c1c <__sfmoreglue+0x28>
  404c0a:	2100      	movs	r1, #0
  404c0c:	e880 0042 	stmia.w	r0, {r1, r6}
  404c10:	300c      	adds	r0, #12
  404c12:	60a0      	str	r0, [r4, #8]
  404c14:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404c18:	f7fe fb73 	bl	403302 <memset>
  404c1c:	4620      	mov	r0, r4
  404c1e:	bd70      	pop	{r4, r5, r6, pc}

00404c20 <__sinit>:
  404c20:	6983      	ldr	r3, [r0, #24]
  404c22:	b510      	push	{r4, lr}
  404c24:	4604      	mov	r4, r0
  404c26:	bb33      	cbnz	r3, 404c76 <__sinit+0x56>
  404c28:	6483      	str	r3, [r0, #72]	; 0x48
  404c2a:	64c3      	str	r3, [r0, #76]	; 0x4c
  404c2c:	6503      	str	r3, [r0, #80]	; 0x50
  404c2e:	4b12      	ldr	r3, [pc, #72]	; (404c78 <__sinit+0x58>)
  404c30:	4a12      	ldr	r2, [pc, #72]	; (404c7c <__sinit+0x5c>)
  404c32:	681b      	ldr	r3, [r3, #0]
  404c34:	6282      	str	r2, [r0, #40]	; 0x28
  404c36:	4298      	cmp	r0, r3
  404c38:	bf04      	itt	eq
  404c3a:	2301      	moveq	r3, #1
  404c3c:	6183      	streq	r3, [r0, #24]
  404c3e:	f000 f81f 	bl	404c80 <__sfp>
  404c42:	6060      	str	r0, [r4, #4]
  404c44:	4620      	mov	r0, r4
  404c46:	f000 f81b 	bl	404c80 <__sfp>
  404c4a:	60a0      	str	r0, [r4, #8]
  404c4c:	4620      	mov	r0, r4
  404c4e:	f000 f817 	bl	404c80 <__sfp>
  404c52:	2200      	movs	r2, #0
  404c54:	60e0      	str	r0, [r4, #12]
  404c56:	2104      	movs	r1, #4
  404c58:	6860      	ldr	r0, [r4, #4]
  404c5a:	f7ff ffa7 	bl	404bac <std.isra.0>
  404c5e:	2201      	movs	r2, #1
  404c60:	2109      	movs	r1, #9
  404c62:	68a0      	ldr	r0, [r4, #8]
  404c64:	f7ff ffa2 	bl	404bac <std.isra.0>
  404c68:	2202      	movs	r2, #2
  404c6a:	2112      	movs	r1, #18
  404c6c:	68e0      	ldr	r0, [r4, #12]
  404c6e:	f7ff ff9d 	bl	404bac <std.isra.0>
  404c72:	2301      	movs	r3, #1
  404c74:	61a3      	str	r3, [r4, #24]
  404c76:	bd10      	pop	{r4, pc}
  404c78:	0040607c 	.word	0x0040607c
  404c7c:	00404ba1 	.word	0x00404ba1

00404c80 <__sfp>:
  404c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404c82:	4b1c      	ldr	r3, [pc, #112]	; (404cf4 <__sfp+0x74>)
  404c84:	681e      	ldr	r6, [r3, #0]
  404c86:	69b3      	ldr	r3, [r6, #24]
  404c88:	4607      	mov	r7, r0
  404c8a:	b913      	cbnz	r3, 404c92 <__sfp+0x12>
  404c8c:	4630      	mov	r0, r6
  404c8e:	f7ff ffc7 	bl	404c20 <__sinit>
  404c92:	3648      	adds	r6, #72	; 0x48
  404c94:	68b4      	ldr	r4, [r6, #8]
  404c96:	6873      	ldr	r3, [r6, #4]
  404c98:	3b01      	subs	r3, #1
  404c9a:	d503      	bpl.n	404ca4 <__sfp+0x24>
  404c9c:	6833      	ldr	r3, [r6, #0]
  404c9e:	b133      	cbz	r3, 404cae <__sfp+0x2e>
  404ca0:	6836      	ldr	r6, [r6, #0]
  404ca2:	e7f7      	b.n	404c94 <__sfp+0x14>
  404ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  404ca8:	b16d      	cbz	r5, 404cc6 <__sfp+0x46>
  404caa:	3468      	adds	r4, #104	; 0x68
  404cac:	e7f4      	b.n	404c98 <__sfp+0x18>
  404cae:	2104      	movs	r1, #4
  404cb0:	4638      	mov	r0, r7
  404cb2:	f7ff ff9f 	bl	404bf4 <__sfmoreglue>
  404cb6:	6030      	str	r0, [r6, #0]
  404cb8:	2800      	cmp	r0, #0
  404cba:	d1f1      	bne.n	404ca0 <__sfp+0x20>
  404cbc:	230c      	movs	r3, #12
  404cbe:	603b      	str	r3, [r7, #0]
  404cc0:	4604      	mov	r4, r0
  404cc2:	4620      	mov	r0, r4
  404cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404cca:	81e3      	strh	r3, [r4, #14]
  404ccc:	2301      	movs	r3, #1
  404cce:	81a3      	strh	r3, [r4, #12]
  404cd0:	6665      	str	r5, [r4, #100]	; 0x64
  404cd2:	6025      	str	r5, [r4, #0]
  404cd4:	60a5      	str	r5, [r4, #8]
  404cd6:	6065      	str	r5, [r4, #4]
  404cd8:	6125      	str	r5, [r4, #16]
  404cda:	6165      	str	r5, [r4, #20]
  404cdc:	61a5      	str	r5, [r4, #24]
  404cde:	2208      	movs	r2, #8
  404ce0:	4629      	mov	r1, r5
  404ce2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  404ce6:	f7fe fb0c 	bl	403302 <memset>
  404cea:	6365      	str	r5, [r4, #52]	; 0x34
  404cec:	63a5      	str	r5, [r4, #56]	; 0x38
  404cee:	64a5      	str	r5, [r4, #72]	; 0x48
  404cf0:	64e5      	str	r5, [r4, #76]	; 0x4c
  404cf2:	e7e6      	b.n	404cc2 <__sfp+0x42>
  404cf4:	0040607c 	.word	0x0040607c

00404cf8 <_fwalk_reent>:
  404cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404cfc:	4680      	mov	r8, r0
  404cfe:	4689      	mov	r9, r1
  404d00:	f100 0448 	add.w	r4, r0, #72	; 0x48
  404d04:	2600      	movs	r6, #0
  404d06:	b914      	cbnz	r4, 404d0e <_fwalk_reent+0x16>
  404d08:	4630      	mov	r0, r6
  404d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404d0e:	68a5      	ldr	r5, [r4, #8]
  404d10:	6867      	ldr	r7, [r4, #4]
  404d12:	3f01      	subs	r7, #1
  404d14:	d501      	bpl.n	404d1a <_fwalk_reent+0x22>
  404d16:	6824      	ldr	r4, [r4, #0]
  404d18:	e7f5      	b.n	404d06 <_fwalk_reent+0xe>
  404d1a:	89ab      	ldrh	r3, [r5, #12]
  404d1c:	2b01      	cmp	r3, #1
  404d1e:	d907      	bls.n	404d30 <_fwalk_reent+0x38>
  404d20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  404d24:	3301      	adds	r3, #1
  404d26:	d003      	beq.n	404d30 <_fwalk_reent+0x38>
  404d28:	4629      	mov	r1, r5
  404d2a:	4640      	mov	r0, r8
  404d2c:	47c8      	blx	r9
  404d2e:	4306      	orrs	r6, r0
  404d30:	3568      	adds	r5, #104	; 0x68
  404d32:	e7ee      	b.n	404d12 <_fwalk_reent+0x1a>

00404d34 <_localeconv_r>:
  404d34:	4b04      	ldr	r3, [pc, #16]	; (404d48 <_localeconv_r+0x14>)
  404d36:	681b      	ldr	r3, [r3, #0]
  404d38:	6a18      	ldr	r0, [r3, #32]
  404d3a:	4b04      	ldr	r3, [pc, #16]	; (404d4c <_localeconv_r+0x18>)
  404d3c:	2800      	cmp	r0, #0
  404d3e:	bf08      	it	eq
  404d40:	4618      	moveq	r0, r3
  404d42:	30f0      	adds	r0, #240	; 0xf0
  404d44:	4770      	bx	lr
  404d46:	bf00      	nop
  404d48:	20400048 	.word	0x20400048
  404d4c:	204000ac 	.word	0x204000ac

00404d50 <__swhatbuf_r>:
  404d50:	b570      	push	{r4, r5, r6, lr}
  404d52:	460e      	mov	r6, r1
  404d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404d58:	2900      	cmp	r1, #0
  404d5a:	b090      	sub	sp, #64	; 0x40
  404d5c:	4614      	mov	r4, r2
  404d5e:	461d      	mov	r5, r3
  404d60:	da07      	bge.n	404d72 <__swhatbuf_r+0x22>
  404d62:	2300      	movs	r3, #0
  404d64:	602b      	str	r3, [r5, #0]
  404d66:	89b3      	ldrh	r3, [r6, #12]
  404d68:	061a      	lsls	r2, r3, #24
  404d6a:	d410      	bmi.n	404d8e <__swhatbuf_r+0x3e>
  404d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404d70:	e00e      	b.n	404d90 <__swhatbuf_r+0x40>
  404d72:	aa01      	add	r2, sp, #4
  404d74:	f000 feaa 	bl	405acc <_fstat_r>
  404d78:	2800      	cmp	r0, #0
  404d7a:	dbf2      	blt.n	404d62 <__swhatbuf_r+0x12>
  404d7c:	9a02      	ldr	r2, [sp, #8]
  404d7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404d82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  404d86:	425a      	negs	r2, r3
  404d88:	415a      	adcs	r2, r3
  404d8a:	602a      	str	r2, [r5, #0]
  404d8c:	e7ee      	b.n	404d6c <__swhatbuf_r+0x1c>
  404d8e:	2340      	movs	r3, #64	; 0x40
  404d90:	2000      	movs	r0, #0
  404d92:	6023      	str	r3, [r4, #0]
  404d94:	b010      	add	sp, #64	; 0x40
  404d96:	bd70      	pop	{r4, r5, r6, pc}

00404d98 <__smakebuf_r>:
  404d98:	898b      	ldrh	r3, [r1, #12]
  404d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  404d9c:	079d      	lsls	r5, r3, #30
  404d9e:	4606      	mov	r6, r0
  404da0:	460c      	mov	r4, r1
  404da2:	d507      	bpl.n	404db4 <__smakebuf_r+0x1c>
  404da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
  404da8:	6023      	str	r3, [r4, #0]
  404daa:	6123      	str	r3, [r4, #16]
  404dac:	2301      	movs	r3, #1
  404dae:	6163      	str	r3, [r4, #20]
  404db0:	b002      	add	sp, #8
  404db2:	bd70      	pop	{r4, r5, r6, pc}
  404db4:	ab01      	add	r3, sp, #4
  404db6:	466a      	mov	r2, sp
  404db8:	f7ff ffca 	bl	404d50 <__swhatbuf_r>
  404dbc:	9900      	ldr	r1, [sp, #0]
  404dbe:	4605      	mov	r5, r0
  404dc0:	4630      	mov	r0, r6
  404dc2:	f000 fbb1 	bl	405528 <_malloc_r>
  404dc6:	b948      	cbnz	r0, 404ddc <__smakebuf_r+0x44>
  404dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404dcc:	059a      	lsls	r2, r3, #22
  404dce:	d4ef      	bmi.n	404db0 <__smakebuf_r+0x18>
  404dd0:	f023 0303 	bic.w	r3, r3, #3
  404dd4:	f043 0302 	orr.w	r3, r3, #2
  404dd8:	81a3      	strh	r3, [r4, #12]
  404dda:	e7e3      	b.n	404da4 <__smakebuf_r+0xc>
  404ddc:	4b0d      	ldr	r3, [pc, #52]	; (404e14 <__smakebuf_r+0x7c>)
  404dde:	62b3      	str	r3, [r6, #40]	; 0x28
  404de0:	89a3      	ldrh	r3, [r4, #12]
  404de2:	6020      	str	r0, [r4, #0]
  404de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404de8:	81a3      	strh	r3, [r4, #12]
  404dea:	9b00      	ldr	r3, [sp, #0]
  404dec:	6163      	str	r3, [r4, #20]
  404dee:	9b01      	ldr	r3, [sp, #4]
  404df0:	6120      	str	r0, [r4, #16]
  404df2:	b15b      	cbz	r3, 404e0c <__smakebuf_r+0x74>
  404df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404df8:	4630      	mov	r0, r6
  404dfa:	f000 fe79 	bl	405af0 <_isatty_r>
  404dfe:	b128      	cbz	r0, 404e0c <__smakebuf_r+0x74>
  404e00:	89a3      	ldrh	r3, [r4, #12]
  404e02:	f023 0303 	bic.w	r3, r3, #3
  404e06:	f043 0301 	orr.w	r3, r3, #1
  404e0a:	81a3      	strh	r3, [r4, #12]
  404e0c:	89a3      	ldrh	r3, [r4, #12]
  404e0e:	431d      	orrs	r5, r3
  404e10:	81a5      	strh	r5, [r4, #12]
  404e12:	e7cd      	b.n	404db0 <__smakebuf_r+0x18>
  404e14:	00404ba1 	.word	0x00404ba1

00404e18 <malloc>:
  404e18:	4b02      	ldr	r3, [pc, #8]	; (404e24 <malloc+0xc>)
  404e1a:	4601      	mov	r1, r0
  404e1c:	6818      	ldr	r0, [r3, #0]
  404e1e:	f000 bb83 	b.w	405528 <_malloc_r>
  404e22:	bf00      	nop
  404e24:	20400048 	.word	0x20400048
	...

00404e30 <memchr>:
  404e30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404e34:	2a10      	cmp	r2, #16
  404e36:	db2b      	blt.n	404e90 <memchr+0x60>
  404e38:	f010 0f07 	tst.w	r0, #7
  404e3c:	d008      	beq.n	404e50 <memchr+0x20>
  404e3e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404e42:	3a01      	subs	r2, #1
  404e44:	428b      	cmp	r3, r1
  404e46:	d02d      	beq.n	404ea4 <memchr+0x74>
  404e48:	f010 0f07 	tst.w	r0, #7
  404e4c:	b342      	cbz	r2, 404ea0 <memchr+0x70>
  404e4e:	d1f6      	bne.n	404e3e <memchr+0xe>
  404e50:	b4f0      	push	{r4, r5, r6, r7}
  404e52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404e56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404e5a:	f022 0407 	bic.w	r4, r2, #7
  404e5e:	f07f 0700 	mvns.w	r7, #0
  404e62:	2300      	movs	r3, #0
  404e64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404e68:	3c08      	subs	r4, #8
  404e6a:	ea85 0501 	eor.w	r5, r5, r1
  404e6e:	ea86 0601 	eor.w	r6, r6, r1
  404e72:	fa85 f547 	uadd8	r5, r5, r7
  404e76:	faa3 f587 	sel	r5, r3, r7
  404e7a:	fa86 f647 	uadd8	r6, r6, r7
  404e7e:	faa5 f687 	sel	r6, r5, r7
  404e82:	b98e      	cbnz	r6, 404ea8 <memchr+0x78>
  404e84:	d1ee      	bne.n	404e64 <memchr+0x34>
  404e86:	bcf0      	pop	{r4, r5, r6, r7}
  404e88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404e8c:	f002 0207 	and.w	r2, r2, #7
  404e90:	b132      	cbz	r2, 404ea0 <memchr+0x70>
  404e92:	f810 3b01 	ldrb.w	r3, [r0], #1
  404e96:	3a01      	subs	r2, #1
  404e98:	ea83 0301 	eor.w	r3, r3, r1
  404e9c:	b113      	cbz	r3, 404ea4 <memchr+0x74>
  404e9e:	d1f8      	bne.n	404e92 <memchr+0x62>
  404ea0:	2000      	movs	r0, #0
  404ea2:	4770      	bx	lr
  404ea4:	3801      	subs	r0, #1
  404ea6:	4770      	bx	lr
  404ea8:	2d00      	cmp	r5, #0
  404eaa:	bf06      	itte	eq
  404eac:	4635      	moveq	r5, r6
  404eae:	3803      	subeq	r0, #3
  404eb0:	3807      	subne	r0, #7
  404eb2:	f015 0f01 	tst.w	r5, #1
  404eb6:	d107      	bne.n	404ec8 <memchr+0x98>
  404eb8:	3001      	adds	r0, #1
  404eba:	f415 7f80 	tst.w	r5, #256	; 0x100
  404ebe:	bf02      	ittt	eq
  404ec0:	3001      	addeq	r0, #1
  404ec2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404ec6:	3001      	addeq	r0, #1
  404ec8:	bcf0      	pop	{r4, r5, r6, r7}
  404eca:	3801      	subs	r0, #1
  404ecc:	4770      	bx	lr
  404ece:	bf00      	nop

00404ed0 <_Balloc>:
  404ed0:	b570      	push	{r4, r5, r6, lr}
  404ed2:	6a45      	ldr	r5, [r0, #36]	; 0x24
  404ed4:	4604      	mov	r4, r0
  404ed6:	460e      	mov	r6, r1
  404ed8:	b93d      	cbnz	r5, 404eea <_Balloc+0x1a>
  404eda:	2010      	movs	r0, #16
  404edc:	f7ff ff9c 	bl	404e18 <malloc>
  404ee0:	6260      	str	r0, [r4, #36]	; 0x24
  404ee2:	6045      	str	r5, [r0, #4]
  404ee4:	6085      	str	r5, [r0, #8]
  404ee6:	6005      	str	r5, [r0, #0]
  404ee8:	60c5      	str	r5, [r0, #12]
  404eea:	6a65      	ldr	r5, [r4, #36]	; 0x24
  404eec:	68eb      	ldr	r3, [r5, #12]
  404eee:	b183      	cbz	r3, 404f12 <_Balloc+0x42>
  404ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404ef2:	68db      	ldr	r3, [r3, #12]
  404ef4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  404ef8:	b9b8      	cbnz	r0, 404f2a <_Balloc+0x5a>
  404efa:	2101      	movs	r1, #1
  404efc:	fa01 f506 	lsl.w	r5, r1, r6
  404f00:	1d6a      	adds	r2, r5, #5
  404f02:	0092      	lsls	r2, r2, #2
  404f04:	4620      	mov	r0, r4
  404f06:	f000 fab3 	bl	405470 <_calloc_r>
  404f0a:	b160      	cbz	r0, 404f26 <_Balloc+0x56>
  404f0c:	6046      	str	r6, [r0, #4]
  404f0e:	6085      	str	r5, [r0, #8]
  404f10:	e00e      	b.n	404f30 <_Balloc+0x60>
  404f12:	2221      	movs	r2, #33	; 0x21
  404f14:	2104      	movs	r1, #4
  404f16:	4620      	mov	r0, r4
  404f18:	f000 faaa 	bl	405470 <_calloc_r>
  404f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404f1e:	60e8      	str	r0, [r5, #12]
  404f20:	68db      	ldr	r3, [r3, #12]
  404f22:	2b00      	cmp	r3, #0
  404f24:	d1e4      	bne.n	404ef0 <_Balloc+0x20>
  404f26:	2000      	movs	r0, #0
  404f28:	bd70      	pop	{r4, r5, r6, pc}
  404f2a:	6802      	ldr	r2, [r0, #0]
  404f2c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  404f30:	2300      	movs	r3, #0
  404f32:	6103      	str	r3, [r0, #16]
  404f34:	60c3      	str	r3, [r0, #12]
  404f36:	bd70      	pop	{r4, r5, r6, pc}

00404f38 <_Bfree>:
  404f38:	b570      	push	{r4, r5, r6, lr}
  404f3a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  404f3c:	4606      	mov	r6, r0
  404f3e:	460d      	mov	r5, r1
  404f40:	b93c      	cbnz	r4, 404f52 <_Bfree+0x1a>
  404f42:	2010      	movs	r0, #16
  404f44:	f7ff ff68 	bl	404e18 <malloc>
  404f48:	6270      	str	r0, [r6, #36]	; 0x24
  404f4a:	6044      	str	r4, [r0, #4]
  404f4c:	6084      	str	r4, [r0, #8]
  404f4e:	6004      	str	r4, [r0, #0]
  404f50:	60c4      	str	r4, [r0, #12]
  404f52:	b13d      	cbz	r5, 404f64 <_Bfree+0x2c>
  404f54:	6a73      	ldr	r3, [r6, #36]	; 0x24
  404f56:	686a      	ldr	r2, [r5, #4]
  404f58:	68db      	ldr	r3, [r3, #12]
  404f5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404f5e:	6029      	str	r1, [r5, #0]
  404f60:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  404f64:	bd70      	pop	{r4, r5, r6, pc}

00404f66 <__multadd>:
  404f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f6a:	690d      	ldr	r5, [r1, #16]
  404f6c:	461f      	mov	r7, r3
  404f6e:	4606      	mov	r6, r0
  404f70:	460c      	mov	r4, r1
  404f72:	f101 0e14 	add.w	lr, r1, #20
  404f76:	2300      	movs	r3, #0
  404f78:	f8de 0000 	ldr.w	r0, [lr]
  404f7c:	b281      	uxth	r1, r0
  404f7e:	fb02 7101 	mla	r1, r2, r1, r7
  404f82:	0c0f      	lsrs	r7, r1, #16
  404f84:	0c00      	lsrs	r0, r0, #16
  404f86:	fb02 7000 	mla	r0, r2, r0, r7
  404f8a:	b289      	uxth	r1, r1
  404f8c:	3301      	adds	r3, #1
  404f8e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  404f92:	429d      	cmp	r5, r3
  404f94:	ea4f 4710 	mov.w	r7, r0, lsr #16
  404f98:	f84e 1b04 	str.w	r1, [lr], #4
  404f9c:	dcec      	bgt.n	404f78 <__multadd+0x12>
  404f9e:	b1d7      	cbz	r7, 404fd6 <__multadd+0x70>
  404fa0:	68a3      	ldr	r3, [r4, #8]
  404fa2:	429d      	cmp	r5, r3
  404fa4:	db12      	blt.n	404fcc <__multadd+0x66>
  404fa6:	6861      	ldr	r1, [r4, #4]
  404fa8:	4630      	mov	r0, r6
  404faa:	3101      	adds	r1, #1
  404fac:	f7ff ff90 	bl	404ed0 <_Balloc>
  404fb0:	6922      	ldr	r2, [r4, #16]
  404fb2:	3202      	adds	r2, #2
  404fb4:	f104 010c 	add.w	r1, r4, #12
  404fb8:	4680      	mov	r8, r0
  404fba:	0092      	lsls	r2, r2, #2
  404fbc:	300c      	adds	r0, #12
  404fbe:	f7fe f995 	bl	4032ec <memcpy>
  404fc2:	4621      	mov	r1, r4
  404fc4:	4630      	mov	r0, r6
  404fc6:	f7ff ffb7 	bl	404f38 <_Bfree>
  404fca:	4644      	mov	r4, r8
  404fcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  404fd0:	3501      	adds	r5, #1
  404fd2:	615f      	str	r7, [r3, #20]
  404fd4:	6125      	str	r5, [r4, #16]
  404fd6:	4620      	mov	r0, r4
  404fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404fdc <__hi0bits>:
  404fdc:	0c02      	lsrs	r2, r0, #16
  404fde:	0412      	lsls	r2, r2, #16
  404fe0:	4603      	mov	r3, r0
  404fe2:	b9b2      	cbnz	r2, 405012 <__hi0bits+0x36>
  404fe4:	0403      	lsls	r3, r0, #16
  404fe6:	2010      	movs	r0, #16
  404fe8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  404fec:	bf04      	itt	eq
  404fee:	021b      	lsleq	r3, r3, #8
  404ff0:	3008      	addeq	r0, #8
  404ff2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  404ff6:	bf04      	itt	eq
  404ff8:	011b      	lsleq	r3, r3, #4
  404ffa:	3004      	addeq	r0, #4
  404ffc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  405000:	bf04      	itt	eq
  405002:	009b      	lsleq	r3, r3, #2
  405004:	3002      	addeq	r0, #2
  405006:	2b00      	cmp	r3, #0
  405008:	db06      	blt.n	405018 <__hi0bits+0x3c>
  40500a:	005b      	lsls	r3, r3, #1
  40500c:	d503      	bpl.n	405016 <__hi0bits+0x3a>
  40500e:	3001      	adds	r0, #1
  405010:	4770      	bx	lr
  405012:	2000      	movs	r0, #0
  405014:	e7e8      	b.n	404fe8 <__hi0bits+0xc>
  405016:	2020      	movs	r0, #32
  405018:	4770      	bx	lr

0040501a <__lo0bits>:
  40501a:	6803      	ldr	r3, [r0, #0]
  40501c:	f013 0207 	ands.w	r2, r3, #7
  405020:	4601      	mov	r1, r0
  405022:	d00b      	beq.n	40503c <__lo0bits+0x22>
  405024:	07da      	lsls	r2, r3, #31
  405026:	d423      	bmi.n	405070 <__lo0bits+0x56>
  405028:	0798      	lsls	r0, r3, #30
  40502a:	bf49      	itett	mi
  40502c:	085b      	lsrmi	r3, r3, #1
  40502e:	089b      	lsrpl	r3, r3, #2
  405030:	2001      	movmi	r0, #1
  405032:	600b      	strmi	r3, [r1, #0]
  405034:	bf5c      	itt	pl
  405036:	600b      	strpl	r3, [r1, #0]
  405038:	2002      	movpl	r0, #2
  40503a:	4770      	bx	lr
  40503c:	b298      	uxth	r0, r3
  40503e:	b9a8      	cbnz	r0, 40506c <__lo0bits+0x52>
  405040:	0c1b      	lsrs	r3, r3, #16
  405042:	2010      	movs	r0, #16
  405044:	f013 0fff 	tst.w	r3, #255	; 0xff
  405048:	bf04      	itt	eq
  40504a:	0a1b      	lsreq	r3, r3, #8
  40504c:	3008      	addeq	r0, #8
  40504e:	071a      	lsls	r2, r3, #28
  405050:	bf04      	itt	eq
  405052:	091b      	lsreq	r3, r3, #4
  405054:	3004      	addeq	r0, #4
  405056:	079a      	lsls	r2, r3, #30
  405058:	bf04      	itt	eq
  40505a:	089b      	lsreq	r3, r3, #2
  40505c:	3002      	addeq	r0, #2
  40505e:	07da      	lsls	r2, r3, #31
  405060:	d402      	bmi.n	405068 <__lo0bits+0x4e>
  405062:	085b      	lsrs	r3, r3, #1
  405064:	d006      	beq.n	405074 <__lo0bits+0x5a>
  405066:	3001      	adds	r0, #1
  405068:	600b      	str	r3, [r1, #0]
  40506a:	4770      	bx	lr
  40506c:	4610      	mov	r0, r2
  40506e:	e7e9      	b.n	405044 <__lo0bits+0x2a>
  405070:	2000      	movs	r0, #0
  405072:	4770      	bx	lr
  405074:	2020      	movs	r0, #32
  405076:	4770      	bx	lr

00405078 <__i2b>:
  405078:	b510      	push	{r4, lr}
  40507a:	460c      	mov	r4, r1
  40507c:	2101      	movs	r1, #1
  40507e:	f7ff ff27 	bl	404ed0 <_Balloc>
  405082:	2201      	movs	r2, #1
  405084:	6144      	str	r4, [r0, #20]
  405086:	6102      	str	r2, [r0, #16]
  405088:	bd10      	pop	{r4, pc}

0040508a <__multiply>:
  40508a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40508e:	4614      	mov	r4, r2
  405090:	690a      	ldr	r2, [r1, #16]
  405092:	6923      	ldr	r3, [r4, #16]
  405094:	429a      	cmp	r2, r3
  405096:	bfb8      	it	lt
  405098:	460b      	movlt	r3, r1
  40509a:	4689      	mov	r9, r1
  40509c:	bfbc      	itt	lt
  40509e:	46a1      	movlt	r9, r4
  4050a0:	461c      	movlt	r4, r3
  4050a2:	f8d9 7010 	ldr.w	r7, [r9, #16]
  4050a6:	f8d4 a010 	ldr.w	sl, [r4, #16]
  4050aa:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4050ae:	f8d9 1004 	ldr.w	r1, [r9, #4]
  4050b2:	eb07 060a 	add.w	r6, r7, sl
  4050b6:	429e      	cmp	r6, r3
  4050b8:	bfc8      	it	gt
  4050ba:	3101      	addgt	r1, #1
  4050bc:	f7ff ff08 	bl	404ed0 <_Balloc>
  4050c0:	f100 0514 	add.w	r5, r0, #20
  4050c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
  4050c8:	462b      	mov	r3, r5
  4050ca:	2200      	movs	r2, #0
  4050cc:	4543      	cmp	r3, r8
  4050ce:	d316      	bcc.n	4050fe <__multiply+0x74>
  4050d0:	f104 0214 	add.w	r2, r4, #20
  4050d4:	f109 0114 	add.w	r1, r9, #20
  4050d8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
  4050dc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  4050e0:	9301      	str	r3, [sp, #4]
  4050e2:	9c01      	ldr	r4, [sp, #4]
  4050e4:	4294      	cmp	r4, r2
  4050e6:	4613      	mov	r3, r2
  4050e8:	d80c      	bhi.n	405104 <__multiply+0x7a>
  4050ea:	2e00      	cmp	r6, #0
  4050ec:	dd03      	ble.n	4050f6 <__multiply+0x6c>
  4050ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  4050f2:	2b00      	cmp	r3, #0
  4050f4:	d054      	beq.n	4051a0 <__multiply+0x116>
  4050f6:	6106      	str	r6, [r0, #16]
  4050f8:	b003      	add	sp, #12
  4050fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050fe:	f843 2b04 	str.w	r2, [r3], #4
  405102:	e7e3      	b.n	4050cc <__multiply+0x42>
  405104:	f8b3 a000 	ldrh.w	sl, [r3]
  405108:	3204      	adds	r2, #4
  40510a:	f1ba 0f00 	cmp.w	sl, #0
  40510e:	d020      	beq.n	405152 <__multiply+0xc8>
  405110:	46ae      	mov	lr, r5
  405112:	4689      	mov	r9, r1
  405114:	f04f 0c00 	mov.w	ip, #0
  405118:	f859 4b04 	ldr.w	r4, [r9], #4
  40511c:	f8be b000 	ldrh.w	fp, [lr]
  405120:	b2a3      	uxth	r3, r4
  405122:	fb0a b303 	mla	r3, sl, r3, fp
  405126:	ea4f 4b14 	mov.w	fp, r4, lsr #16
  40512a:	f8de 4000 	ldr.w	r4, [lr]
  40512e:	4463      	add	r3, ip
  405130:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  405134:	fb0a c40b 	mla	r4, sl, fp, ip
  405138:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40513c:	b29b      	uxth	r3, r3
  40513e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  405142:	454f      	cmp	r7, r9
  405144:	ea4f 4c14 	mov.w	ip, r4, lsr #16
  405148:	f84e 3b04 	str.w	r3, [lr], #4
  40514c:	d8e4      	bhi.n	405118 <__multiply+0x8e>
  40514e:	f8ce c000 	str.w	ip, [lr]
  405152:	f832 9c02 	ldrh.w	r9, [r2, #-2]
  405156:	f1b9 0f00 	cmp.w	r9, #0
  40515a:	d01f      	beq.n	40519c <__multiply+0x112>
  40515c:	682b      	ldr	r3, [r5, #0]
  40515e:	46ae      	mov	lr, r5
  405160:	468c      	mov	ip, r1
  405162:	f04f 0a00 	mov.w	sl, #0
  405166:	f8bc 4000 	ldrh.w	r4, [ip]
  40516a:	f8be b002 	ldrh.w	fp, [lr, #2]
  40516e:	fb09 b404 	mla	r4, r9, r4, fp
  405172:	44a2      	add	sl, r4
  405174:	b29b      	uxth	r3, r3
  405176:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  40517a:	f84e 3b04 	str.w	r3, [lr], #4
  40517e:	f85c 3b04 	ldr.w	r3, [ip], #4
  405182:	f8be 4000 	ldrh.w	r4, [lr]
  405186:	0c1b      	lsrs	r3, r3, #16
  405188:	fb09 4303 	mla	r3, r9, r3, r4
  40518c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
  405190:	4567      	cmp	r7, ip
  405192:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  405196:	d8e6      	bhi.n	405166 <__multiply+0xdc>
  405198:	f8ce 3000 	str.w	r3, [lr]
  40519c:	3504      	adds	r5, #4
  40519e:	e7a0      	b.n	4050e2 <__multiply+0x58>
  4051a0:	3e01      	subs	r6, #1
  4051a2:	e7a2      	b.n	4050ea <__multiply+0x60>

004051a4 <__pow5mult>:
  4051a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4051a8:	4615      	mov	r5, r2
  4051aa:	f012 0203 	ands.w	r2, r2, #3
  4051ae:	4606      	mov	r6, r0
  4051b0:	460f      	mov	r7, r1
  4051b2:	d007      	beq.n	4051c4 <__pow5mult+0x20>
  4051b4:	3a01      	subs	r2, #1
  4051b6:	4c21      	ldr	r4, [pc, #132]	; (40523c <__pow5mult+0x98>)
  4051b8:	2300      	movs	r3, #0
  4051ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  4051be:	f7ff fed2 	bl	404f66 <__multadd>
  4051c2:	4607      	mov	r7, r0
  4051c4:	10ad      	asrs	r5, r5, #2
  4051c6:	d035      	beq.n	405234 <__pow5mult+0x90>
  4051c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
  4051ca:	b93c      	cbnz	r4, 4051dc <__pow5mult+0x38>
  4051cc:	2010      	movs	r0, #16
  4051ce:	f7ff fe23 	bl	404e18 <malloc>
  4051d2:	6270      	str	r0, [r6, #36]	; 0x24
  4051d4:	6044      	str	r4, [r0, #4]
  4051d6:	6084      	str	r4, [r0, #8]
  4051d8:	6004      	str	r4, [r0, #0]
  4051da:	60c4      	str	r4, [r0, #12]
  4051dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  4051e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
  4051e4:	b94c      	cbnz	r4, 4051fa <__pow5mult+0x56>
  4051e6:	f240 2171 	movw	r1, #625	; 0x271
  4051ea:	4630      	mov	r0, r6
  4051ec:	f7ff ff44 	bl	405078 <__i2b>
  4051f0:	2300      	movs	r3, #0
  4051f2:	f8c8 0008 	str.w	r0, [r8, #8]
  4051f6:	4604      	mov	r4, r0
  4051f8:	6003      	str	r3, [r0, #0]
  4051fa:	f04f 0800 	mov.w	r8, #0
  4051fe:	07eb      	lsls	r3, r5, #31
  405200:	d50a      	bpl.n	405218 <__pow5mult+0x74>
  405202:	4639      	mov	r1, r7
  405204:	4622      	mov	r2, r4
  405206:	4630      	mov	r0, r6
  405208:	f7ff ff3f 	bl	40508a <__multiply>
  40520c:	4639      	mov	r1, r7
  40520e:	4681      	mov	r9, r0
  405210:	4630      	mov	r0, r6
  405212:	f7ff fe91 	bl	404f38 <_Bfree>
  405216:	464f      	mov	r7, r9
  405218:	106d      	asrs	r5, r5, #1
  40521a:	d00b      	beq.n	405234 <__pow5mult+0x90>
  40521c:	6820      	ldr	r0, [r4, #0]
  40521e:	b938      	cbnz	r0, 405230 <__pow5mult+0x8c>
  405220:	4622      	mov	r2, r4
  405222:	4621      	mov	r1, r4
  405224:	4630      	mov	r0, r6
  405226:	f7ff ff30 	bl	40508a <__multiply>
  40522a:	6020      	str	r0, [r4, #0]
  40522c:	f8c0 8000 	str.w	r8, [r0]
  405230:	4604      	mov	r4, r0
  405232:	e7e4      	b.n	4051fe <__pow5mult+0x5a>
  405234:	4638      	mov	r0, r7
  405236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40523a:	bf00      	nop
  40523c:	00406218 	.word	0x00406218

00405240 <__lshift>:
  405240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405244:	460c      	mov	r4, r1
  405246:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40524a:	6923      	ldr	r3, [r4, #16]
  40524c:	6849      	ldr	r1, [r1, #4]
  40524e:	eb0a 0903 	add.w	r9, sl, r3
  405252:	68a3      	ldr	r3, [r4, #8]
  405254:	4607      	mov	r7, r0
  405256:	4616      	mov	r6, r2
  405258:	f109 0501 	add.w	r5, r9, #1
  40525c:	42ab      	cmp	r3, r5
  40525e:	db31      	blt.n	4052c4 <__lshift+0x84>
  405260:	4638      	mov	r0, r7
  405262:	f7ff fe35 	bl	404ed0 <_Balloc>
  405266:	2200      	movs	r2, #0
  405268:	4680      	mov	r8, r0
  40526a:	f100 0314 	add.w	r3, r0, #20
  40526e:	4611      	mov	r1, r2
  405270:	4552      	cmp	r2, sl
  405272:	db2a      	blt.n	4052ca <__lshift+0x8a>
  405274:	6920      	ldr	r0, [r4, #16]
  405276:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  40527a:	f104 0114 	add.w	r1, r4, #20
  40527e:	f016 021f 	ands.w	r2, r6, #31
  405282:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  405286:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  40528a:	d022      	beq.n	4052d2 <__lshift+0x92>
  40528c:	f1c2 0c20 	rsb	ip, r2, #32
  405290:	2000      	movs	r0, #0
  405292:	680e      	ldr	r6, [r1, #0]
  405294:	4096      	lsls	r6, r2
  405296:	4330      	orrs	r0, r6
  405298:	f843 0b04 	str.w	r0, [r3], #4
  40529c:	f851 0b04 	ldr.w	r0, [r1], #4
  4052a0:	458e      	cmp	lr, r1
  4052a2:	fa20 f00c 	lsr.w	r0, r0, ip
  4052a6:	d8f4      	bhi.n	405292 <__lshift+0x52>
  4052a8:	6018      	str	r0, [r3, #0]
  4052aa:	b108      	cbz	r0, 4052b0 <__lshift+0x70>
  4052ac:	f109 0502 	add.w	r5, r9, #2
  4052b0:	3d01      	subs	r5, #1
  4052b2:	4638      	mov	r0, r7
  4052b4:	f8c8 5010 	str.w	r5, [r8, #16]
  4052b8:	4621      	mov	r1, r4
  4052ba:	f7ff fe3d 	bl	404f38 <_Bfree>
  4052be:	4640      	mov	r0, r8
  4052c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4052c4:	3101      	adds	r1, #1
  4052c6:	005b      	lsls	r3, r3, #1
  4052c8:	e7c8      	b.n	40525c <__lshift+0x1c>
  4052ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4052ce:	3201      	adds	r2, #1
  4052d0:	e7ce      	b.n	405270 <__lshift+0x30>
  4052d2:	3b04      	subs	r3, #4
  4052d4:	f851 2b04 	ldr.w	r2, [r1], #4
  4052d8:	f843 2f04 	str.w	r2, [r3, #4]!
  4052dc:	458e      	cmp	lr, r1
  4052de:	d8f9      	bhi.n	4052d4 <__lshift+0x94>
  4052e0:	e7e6      	b.n	4052b0 <__lshift+0x70>

004052e2 <__mcmp>:
  4052e2:	6903      	ldr	r3, [r0, #16]
  4052e4:	690a      	ldr	r2, [r1, #16]
  4052e6:	1a9b      	subs	r3, r3, r2
  4052e8:	b530      	push	{r4, r5, lr}
  4052ea:	d10c      	bne.n	405306 <__mcmp+0x24>
  4052ec:	0092      	lsls	r2, r2, #2
  4052ee:	3014      	adds	r0, #20
  4052f0:	3114      	adds	r1, #20
  4052f2:	1884      	adds	r4, r0, r2
  4052f4:	4411      	add	r1, r2
  4052f6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
  4052fa:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4052fe:	4295      	cmp	r5, r2
  405300:	d003      	beq.n	40530a <__mcmp+0x28>
  405302:	d305      	bcc.n	405310 <__mcmp+0x2e>
  405304:	2301      	movs	r3, #1
  405306:	4618      	mov	r0, r3
  405308:	bd30      	pop	{r4, r5, pc}
  40530a:	42a0      	cmp	r0, r4
  40530c:	d3f3      	bcc.n	4052f6 <__mcmp+0x14>
  40530e:	e7fa      	b.n	405306 <__mcmp+0x24>
  405310:	f04f 33ff 	mov.w	r3, #4294967295
  405314:	e7f7      	b.n	405306 <__mcmp+0x24>

00405316 <__mdiff>:
  405316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40531a:	460d      	mov	r5, r1
  40531c:	4607      	mov	r7, r0
  40531e:	4611      	mov	r1, r2
  405320:	4628      	mov	r0, r5
  405322:	4614      	mov	r4, r2
  405324:	f7ff ffdd 	bl	4052e2 <__mcmp>
  405328:	1e06      	subs	r6, r0, #0
  40532a:	d108      	bne.n	40533e <__mdiff+0x28>
  40532c:	4631      	mov	r1, r6
  40532e:	4638      	mov	r0, r7
  405330:	f7ff fdce 	bl	404ed0 <_Balloc>
  405334:	2301      	movs	r3, #1
  405336:	6103      	str	r3, [r0, #16]
  405338:	6146      	str	r6, [r0, #20]
  40533a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40533e:	bfa4      	itt	ge
  405340:	4623      	movge	r3, r4
  405342:	462c      	movge	r4, r5
  405344:	4638      	mov	r0, r7
  405346:	6861      	ldr	r1, [r4, #4]
  405348:	bfa6      	itte	ge
  40534a:	461d      	movge	r5, r3
  40534c:	2600      	movge	r6, #0
  40534e:	2601      	movlt	r6, #1
  405350:	f7ff fdbe 	bl	404ed0 <_Balloc>
  405354:	692b      	ldr	r3, [r5, #16]
  405356:	60c6      	str	r6, [r0, #12]
  405358:	6926      	ldr	r6, [r4, #16]
  40535a:	f105 0914 	add.w	r9, r5, #20
  40535e:	f104 0214 	add.w	r2, r4, #20
  405362:	eb02 0786 	add.w	r7, r2, r6, lsl #2
  405366:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40536a:	f100 0514 	add.w	r5, r0, #20
  40536e:	f04f 0c00 	mov.w	ip, #0
  405372:	f852 ab04 	ldr.w	sl, [r2], #4
  405376:	f859 4b04 	ldr.w	r4, [r9], #4
  40537a:	fa1c f18a 	uxtah	r1, ip, sl
  40537e:	b2a3      	uxth	r3, r4
  405380:	1ac9      	subs	r1, r1, r3
  405382:	0c23      	lsrs	r3, r4, #16
  405384:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
  405388:	eb03 4321 	add.w	r3, r3, r1, asr #16
  40538c:	b289      	uxth	r1, r1
  40538e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  405392:	45c8      	cmp	r8, r9
  405394:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  405398:	4696      	mov	lr, r2
  40539a:	f845 3b04 	str.w	r3, [r5], #4
  40539e:	d8e8      	bhi.n	405372 <__mdiff+0x5c>
  4053a0:	45be      	cmp	lr, r7
  4053a2:	d305      	bcc.n	4053b0 <__mdiff+0x9a>
  4053a4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4053a8:	b18b      	cbz	r3, 4053ce <__mdiff+0xb8>
  4053aa:	6106      	str	r6, [r0, #16]
  4053ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053b0:	f85e 1b04 	ldr.w	r1, [lr], #4
  4053b4:	fa1c f381 	uxtah	r3, ip, r1
  4053b8:	141a      	asrs	r2, r3, #16
  4053ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
  4053be:	b29b      	uxth	r3, r3
  4053c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4053c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
  4053c8:	f845 3b04 	str.w	r3, [r5], #4
  4053cc:	e7e8      	b.n	4053a0 <__mdiff+0x8a>
  4053ce:	3e01      	subs	r6, #1
  4053d0:	e7e8      	b.n	4053a4 <__mdiff+0x8e>

004053d2 <__d2b>:
  4053d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  4053d6:	2101      	movs	r1, #1
  4053d8:	461c      	mov	r4, r3
  4053da:	4690      	mov	r8, r2
  4053dc:	9e08      	ldr	r6, [sp, #32]
  4053de:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4053e0:	f7ff fd76 	bl	404ed0 <_Balloc>
  4053e4:	f3c4 0213 	ubfx	r2, r4, #0, #20
  4053e8:	f3c4 540a 	ubfx	r4, r4, #20, #11
  4053ec:	4607      	mov	r7, r0
  4053ee:	bb34      	cbnz	r4, 40543e <__d2b+0x6c>
  4053f0:	9201      	str	r2, [sp, #4]
  4053f2:	f1b8 0f00 	cmp.w	r8, #0
  4053f6:	d027      	beq.n	405448 <__d2b+0x76>
  4053f8:	a802      	add	r0, sp, #8
  4053fa:	f840 8d08 	str.w	r8, [r0, #-8]!
  4053fe:	f7ff fe0c 	bl	40501a <__lo0bits>
  405402:	9900      	ldr	r1, [sp, #0]
  405404:	b1f0      	cbz	r0, 405444 <__d2b+0x72>
  405406:	9a01      	ldr	r2, [sp, #4]
  405408:	f1c0 0320 	rsb	r3, r0, #32
  40540c:	fa02 f303 	lsl.w	r3, r2, r3
  405410:	430b      	orrs	r3, r1
  405412:	40c2      	lsrs	r2, r0
  405414:	617b      	str	r3, [r7, #20]
  405416:	9201      	str	r2, [sp, #4]
  405418:	9b01      	ldr	r3, [sp, #4]
  40541a:	61bb      	str	r3, [r7, #24]
  40541c:	2b00      	cmp	r3, #0
  40541e:	bf14      	ite	ne
  405420:	2102      	movne	r1, #2
  405422:	2101      	moveq	r1, #1
  405424:	6139      	str	r1, [r7, #16]
  405426:	b1c4      	cbz	r4, 40545a <__d2b+0x88>
  405428:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40542c:	4404      	add	r4, r0
  40542e:	6034      	str	r4, [r6, #0]
  405430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405434:	6028      	str	r0, [r5, #0]
  405436:	4638      	mov	r0, r7
  405438:	b002      	add	sp, #8
  40543a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40543e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  405442:	e7d5      	b.n	4053f0 <__d2b+0x1e>
  405444:	6179      	str	r1, [r7, #20]
  405446:	e7e7      	b.n	405418 <__d2b+0x46>
  405448:	a801      	add	r0, sp, #4
  40544a:	f7ff fde6 	bl	40501a <__lo0bits>
  40544e:	9b01      	ldr	r3, [sp, #4]
  405450:	617b      	str	r3, [r7, #20]
  405452:	2101      	movs	r1, #1
  405454:	6139      	str	r1, [r7, #16]
  405456:	3020      	adds	r0, #32
  405458:	e7e5      	b.n	405426 <__d2b+0x54>
  40545a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40545e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405462:	6030      	str	r0, [r6, #0]
  405464:	6918      	ldr	r0, [r3, #16]
  405466:	f7ff fdb9 	bl	404fdc <__hi0bits>
  40546a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40546e:	e7e1      	b.n	405434 <__d2b+0x62>

00405470 <_calloc_r>:
  405470:	b538      	push	{r3, r4, r5, lr}
  405472:	fb02 f401 	mul.w	r4, r2, r1
  405476:	4621      	mov	r1, r4
  405478:	f000 f856 	bl	405528 <_malloc_r>
  40547c:	4605      	mov	r5, r0
  40547e:	b118      	cbz	r0, 405488 <_calloc_r+0x18>
  405480:	4622      	mov	r2, r4
  405482:	2100      	movs	r1, #0
  405484:	f7fd ff3d 	bl	403302 <memset>
  405488:	4628      	mov	r0, r5
  40548a:	bd38      	pop	{r3, r4, r5, pc}

0040548c <_free_r>:
  40548c:	b538      	push	{r3, r4, r5, lr}
  40548e:	4605      	mov	r5, r0
  405490:	2900      	cmp	r1, #0
  405492:	d045      	beq.n	405520 <_free_r+0x94>
  405494:	f851 3c04 	ldr.w	r3, [r1, #-4]
  405498:	1f0c      	subs	r4, r1, #4
  40549a:	2b00      	cmp	r3, #0
  40549c:	bfb8      	it	lt
  40549e:	18e4      	addlt	r4, r4, r3
  4054a0:	f000 fb5a 	bl	405b58 <__malloc_lock>
  4054a4:	4a1f      	ldr	r2, [pc, #124]	; (405524 <_free_r+0x98>)
  4054a6:	6813      	ldr	r3, [r2, #0]
  4054a8:	4610      	mov	r0, r2
  4054aa:	b933      	cbnz	r3, 4054ba <_free_r+0x2e>
  4054ac:	6063      	str	r3, [r4, #4]
  4054ae:	6014      	str	r4, [r2, #0]
  4054b0:	4628      	mov	r0, r5
  4054b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4054b6:	f000 bb50 	b.w	405b5a <__malloc_unlock>
  4054ba:	42a3      	cmp	r3, r4
  4054bc:	d90c      	bls.n	4054d8 <_free_r+0x4c>
  4054be:	6821      	ldr	r1, [r4, #0]
  4054c0:	1862      	adds	r2, r4, r1
  4054c2:	4293      	cmp	r3, r2
  4054c4:	bf04      	itt	eq
  4054c6:	681a      	ldreq	r2, [r3, #0]
  4054c8:	685b      	ldreq	r3, [r3, #4]
  4054ca:	6063      	str	r3, [r4, #4]
  4054cc:	bf04      	itt	eq
  4054ce:	1852      	addeq	r2, r2, r1
  4054d0:	6022      	streq	r2, [r4, #0]
  4054d2:	6004      	str	r4, [r0, #0]
  4054d4:	e7ec      	b.n	4054b0 <_free_r+0x24>
  4054d6:	4613      	mov	r3, r2
  4054d8:	685a      	ldr	r2, [r3, #4]
  4054da:	b10a      	cbz	r2, 4054e0 <_free_r+0x54>
  4054dc:	42a2      	cmp	r2, r4
  4054de:	d9fa      	bls.n	4054d6 <_free_r+0x4a>
  4054e0:	6819      	ldr	r1, [r3, #0]
  4054e2:	1858      	adds	r0, r3, r1
  4054e4:	42a0      	cmp	r0, r4
  4054e6:	d10b      	bne.n	405500 <_free_r+0x74>
  4054e8:	6820      	ldr	r0, [r4, #0]
  4054ea:	4401      	add	r1, r0
  4054ec:	1858      	adds	r0, r3, r1
  4054ee:	4282      	cmp	r2, r0
  4054f0:	6019      	str	r1, [r3, #0]
  4054f2:	d1dd      	bne.n	4054b0 <_free_r+0x24>
  4054f4:	6810      	ldr	r0, [r2, #0]
  4054f6:	6852      	ldr	r2, [r2, #4]
  4054f8:	605a      	str	r2, [r3, #4]
  4054fa:	4401      	add	r1, r0
  4054fc:	6019      	str	r1, [r3, #0]
  4054fe:	e7d7      	b.n	4054b0 <_free_r+0x24>
  405500:	d902      	bls.n	405508 <_free_r+0x7c>
  405502:	230c      	movs	r3, #12
  405504:	602b      	str	r3, [r5, #0]
  405506:	e7d3      	b.n	4054b0 <_free_r+0x24>
  405508:	6820      	ldr	r0, [r4, #0]
  40550a:	1821      	adds	r1, r4, r0
  40550c:	428a      	cmp	r2, r1
  40550e:	bf04      	itt	eq
  405510:	6811      	ldreq	r1, [r2, #0]
  405512:	6852      	ldreq	r2, [r2, #4]
  405514:	6062      	str	r2, [r4, #4]
  405516:	bf04      	itt	eq
  405518:	1809      	addeq	r1, r1, r0
  40551a:	6021      	streq	r1, [r4, #0]
  40551c:	605c      	str	r4, [r3, #4]
  40551e:	e7c7      	b.n	4054b0 <_free_r+0x24>
  405520:	bd38      	pop	{r3, r4, r5, pc}
  405522:	bf00      	nop
  405524:	204004c4 	.word	0x204004c4

00405528 <_malloc_r>:
  405528:	b570      	push	{r4, r5, r6, lr}
  40552a:	1ccd      	adds	r5, r1, #3
  40552c:	f025 0503 	bic.w	r5, r5, #3
  405530:	3508      	adds	r5, #8
  405532:	2d0c      	cmp	r5, #12
  405534:	bf38      	it	cc
  405536:	250c      	movcc	r5, #12
  405538:	2d00      	cmp	r5, #0
  40553a:	4606      	mov	r6, r0
  40553c:	db01      	blt.n	405542 <_malloc_r+0x1a>
  40553e:	42a9      	cmp	r1, r5
  405540:	d903      	bls.n	40554a <_malloc_r+0x22>
  405542:	230c      	movs	r3, #12
  405544:	6033      	str	r3, [r6, #0]
  405546:	2000      	movs	r0, #0
  405548:	bd70      	pop	{r4, r5, r6, pc}
  40554a:	f000 fb05 	bl	405b58 <__malloc_lock>
  40554e:	4a23      	ldr	r2, [pc, #140]	; (4055dc <_malloc_r+0xb4>)
  405550:	6814      	ldr	r4, [r2, #0]
  405552:	4621      	mov	r1, r4
  405554:	b991      	cbnz	r1, 40557c <_malloc_r+0x54>
  405556:	4c22      	ldr	r4, [pc, #136]	; (4055e0 <_malloc_r+0xb8>)
  405558:	6823      	ldr	r3, [r4, #0]
  40555a:	b91b      	cbnz	r3, 405564 <_malloc_r+0x3c>
  40555c:	4630      	mov	r0, r6
  40555e:	f000 f97f 	bl	405860 <_sbrk_r>
  405562:	6020      	str	r0, [r4, #0]
  405564:	4629      	mov	r1, r5
  405566:	4630      	mov	r0, r6
  405568:	f000 f97a 	bl	405860 <_sbrk_r>
  40556c:	1c43      	adds	r3, r0, #1
  40556e:	d126      	bne.n	4055be <_malloc_r+0x96>
  405570:	230c      	movs	r3, #12
  405572:	6033      	str	r3, [r6, #0]
  405574:	4630      	mov	r0, r6
  405576:	f000 faf0 	bl	405b5a <__malloc_unlock>
  40557a:	e7e4      	b.n	405546 <_malloc_r+0x1e>
  40557c:	680b      	ldr	r3, [r1, #0]
  40557e:	1b5b      	subs	r3, r3, r5
  405580:	d41a      	bmi.n	4055b8 <_malloc_r+0x90>
  405582:	2b0b      	cmp	r3, #11
  405584:	d90f      	bls.n	4055a6 <_malloc_r+0x7e>
  405586:	600b      	str	r3, [r1, #0]
  405588:	50cd      	str	r5, [r1, r3]
  40558a:	18cc      	adds	r4, r1, r3
  40558c:	4630      	mov	r0, r6
  40558e:	f000 fae4 	bl	405b5a <__malloc_unlock>
  405592:	f104 000b 	add.w	r0, r4, #11
  405596:	1d23      	adds	r3, r4, #4
  405598:	f020 0007 	bic.w	r0, r0, #7
  40559c:	1ac3      	subs	r3, r0, r3
  40559e:	d01b      	beq.n	4055d8 <_malloc_r+0xb0>
  4055a0:	425a      	negs	r2, r3
  4055a2:	50e2      	str	r2, [r4, r3]
  4055a4:	bd70      	pop	{r4, r5, r6, pc}
  4055a6:	428c      	cmp	r4, r1
  4055a8:	bf0d      	iteet	eq
  4055aa:	6863      	ldreq	r3, [r4, #4]
  4055ac:	684b      	ldrne	r3, [r1, #4]
  4055ae:	6063      	strne	r3, [r4, #4]
  4055b0:	6013      	streq	r3, [r2, #0]
  4055b2:	bf18      	it	ne
  4055b4:	460c      	movne	r4, r1
  4055b6:	e7e9      	b.n	40558c <_malloc_r+0x64>
  4055b8:	460c      	mov	r4, r1
  4055ba:	6849      	ldr	r1, [r1, #4]
  4055bc:	e7ca      	b.n	405554 <_malloc_r+0x2c>
  4055be:	1cc4      	adds	r4, r0, #3
  4055c0:	f024 0403 	bic.w	r4, r4, #3
  4055c4:	42a0      	cmp	r0, r4
  4055c6:	d005      	beq.n	4055d4 <_malloc_r+0xac>
  4055c8:	1a21      	subs	r1, r4, r0
  4055ca:	4630      	mov	r0, r6
  4055cc:	f000 f948 	bl	405860 <_sbrk_r>
  4055d0:	3001      	adds	r0, #1
  4055d2:	d0cd      	beq.n	405570 <_malloc_r+0x48>
  4055d4:	6025      	str	r5, [r4, #0]
  4055d6:	e7d9      	b.n	40558c <_malloc_r+0x64>
  4055d8:	bd70      	pop	{r4, r5, r6, pc}
  4055da:	bf00      	nop
  4055dc:	204004c4 	.word	0x204004c4
  4055e0:	204004c8 	.word	0x204004c8

004055e4 <__sfputc_r>:
  4055e4:	6893      	ldr	r3, [r2, #8]
  4055e6:	3b01      	subs	r3, #1
  4055e8:	2b00      	cmp	r3, #0
  4055ea:	b410      	push	{r4}
  4055ec:	6093      	str	r3, [r2, #8]
  4055ee:	da08      	bge.n	405602 <__sfputc_r+0x1e>
  4055f0:	6994      	ldr	r4, [r2, #24]
  4055f2:	42a3      	cmp	r3, r4
  4055f4:	db02      	blt.n	4055fc <__sfputc_r+0x18>
  4055f6:	b2cb      	uxtb	r3, r1
  4055f8:	2b0a      	cmp	r3, #10
  4055fa:	d102      	bne.n	405602 <__sfputc_r+0x1e>
  4055fc:	bc10      	pop	{r4}
  4055fe:	f000 b983 	b.w	405908 <__swbuf_r>
  405602:	6813      	ldr	r3, [r2, #0]
  405604:	1c58      	adds	r0, r3, #1
  405606:	6010      	str	r0, [r2, #0]
  405608:	7019      	strb	r1, [r3, #0]
  40560a:	b2c8      	uxtb	r0, r1
  40560c:	bc10      	pop	{r4}
  40560e:	4770      	bx	lr

00405610 <__sfputs_r>:
  405610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405612:	4606      	mov	r6, r0
  405614:	460f      	mov	r7, r1
  405616:	4614      	mov	r4, r2
  405618:	18d5      	adds	r5, r2, r3
  40561a:	42ac      	cmp	r4, r5
  40561c:	d101      	bne.n	405622 <__sfputs_r+0x12>
  40561e:	2000      	movs	r0, #0
  405620:	e007      	b.n	405632 <__sfputs_r+0x22>
  405622:	463a      	mov	r2, r7
  405624:	f814 1b01 	ldrb.w	r1, [r4], #1
  405628:	4630      	mov	r0, r6
  40562a:	f7ff ffdb 	bl	4055e4 <__sfputc_r>
  40562e:	1c43      	adds	r3, r0, #1
  405630:	d1f3      	bne.n	40561a <__sfputs_r+0xa>
  405632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00405634 <_vfiprintf_r>:
  405634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405638:	b09d      	sub	sp, #116	; 0x74
  40563a:	460c      	mov	r4, r1
  40563c:	4617      	mov	r7, r2
  40563e:	9303      	str	r3, [sp, #12]
  405640:	4606      	mov	r6, r0
  405642:	b118      	cbz	r0, 40564c <_vfiprintf_r+0x18>
  405644:	6983      	ldr	r3, [r0, #24]
  405646:	b90b      	cbnz	r3, 40564c <_vfiprintf_r+0x18>
  405648:	f7ff faea 	bl	404c20 <__sinit>
  40564c:	4b7c      	ldr	r3, [pc, #496]	; (405840 <_vfiprintf_r+0x20c>)
  40564e:	429c      	cmp	r4, r3
  405650:	d157      	bne.n	405702 <_vfiprintf_r+0xce>
  405652:	6874      	ldr	r4, [r6, #4]
  405654:	89a3      	ldrh	r3, [r4, #12]
  405656:	0718      	lsls	r0, r3, #28
  405658:	d55d      	bpl.n	405716 <_vfiprintf_r+0xe2>
  40565a:	6923      	ldr	r3, [r4, #16]
  40565c:	2b00      	cmp	r3, #0
  40565e:	d05a      	beq.n	405716 <_vfiprintf_r+0xe2>
  405660:	2300      	movs	r3, #0
  405662:	9309      	str	r3, [sp, #36]	; 0x24
  405664:	2320      	movs	r3, #32
  405666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  40566a:	2330      	movs	r3, #48	; 0x30
  40566c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  405670:	f04f 0b01 	mov.w	fp, #1
  405674:	46b8      	mov	r8, r7
  405676:	4645      	mov	r5, r8
  405678:	f815 3b01 	ldrb.w	r3, [r5], #1
  40567c:	2b00      	cmp	r3, #0
  40567e:	d155      	bne.n	40572c <_vfiprintf_r+0xf8>
  405680:	ebb8 0a07 	subs.w	sl, r8, r7
  405684:	d00b      	beq.n	40569e <_vfiprintf_r+0x6a>
  405686:	4653      	mov	r3, sl
  405688:	463a      	mov	r2, r7
  40568a:	4621      	mov	r1, r4
  40568c:	4630      	mov	r0, r6
  40568e:	f7ff ffbf 	bl	405610 <__sfputs_r>
  405692:	3001      	adds	r0, #1
  405694:	f000 80c4 	beq.w	405820 <_vfiprintf_r+0x1ec>
  405698:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40569a:	4453      	add	r3, sl
  40569c:	9309      	str	r3, [sp, #36]	; 0x24
  40569e:	f898 3000 	ldrb.w	r3, [r8]
  4056a2:	2b00      	cmp	r3, #0
  4056a4:	f000 80bc 	beq.w	405820 <_vfiprintf_r+0x1ec>
  4056a8:	2300      	movs	r3, #0
  4056aa:	f04f 32ff 	mov.w	r2, #4294967295
  4056ae:	9304      	str	r3, [sp, #16]
  4056b0:	9307      	str	r3, [sp, #28]
  4056b2:	9205      	str	r2, [sp, #20]
  4056b4:	9306      	str	r3, [sp, #24]
  4056b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  4056ba:	931a      	str	r3, [sp, #104]	; 0x68
  4056bc:	2205      	movs	r2, #5
  4056be:	7829      	ldrb	r1, [r5, #0]
  4056c0:	4860      	ldr	r0, [pc, #384]	; (405844 <_vfiprintf_r+0x210>)
  4056c2:	f7ff fbb5 	bl	404e30 <memchr>
  4056c6:	f105 0801 	add.w	r8, r5, #1
  4056ca:	9b04      	ldr	r3, [sp, #16]
  4056cc:	2800      	cmp	r0, #0
  4056ce:	d131      	bne.n	405734 <_vfiprintf_r+0x100>
  4056d0:	06d9      	lsls	r1, r3, #27
  4056d2:	bf44      	itt	mi
  4056d4:	2220      	movmi	r2, #32
  4056d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4056da:	071a      	lsls	r2, r3, #28
  4056dc:	bf44      	itt	mi
  4056de:	222b      	movmi	r2, #43	; 0x2b
  4056e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4056e4:	782a      	ldrb	r2, [r5, #0]
  4056e6:	2a2a      	cmp	r2, #42	; 0x2a
  4056e8:	d02c      	beq.n	405744 <_vfiprintf_r+0x110>
  4056ea:	9a07      	ldr	r2, [sp, #28]
  4056ec:	2100      	movs	r1, #0
  4056ee:	200a      	movs	r0, #10
  4056f0:	46a8      	mov	r8, r5
  4056f2:	3501      	adds	r5, #1
  4056f4:	f898 3000 	ldrb.w	r3, [r8]
  4056f8:	3b30      	subs	r3, #48	; 0x30
  4056fa:	2b09      	cmp	r3, #9
  4056fc:	d96d      	bls.n	4057da <_vfiprintf_r+0x1a6>
  4056fe:	b371      	cbz	r1, 40575e <_vfiprintf_r+0x12a>
  405700:	e026      	b.n	405750 <_vfiprintf_r+0x11c>
  405702:	4b51      	ldr	r3, [pc, #324]	; (405848 <_vfiprintf_r+0x214>)
  405704:	429c      	cmp	r4, r3
  405706:	d101      	bne.n	40570c <_vfiprintf_r+0xd8>
  405708:	68b4      	ldr	r4, [r6, #8]
  40570a:	e7a3      	b.n	405654 <_vfiprintf_r+0x20>
  40570c:	4b4f      	ldr	r3, [pc, #316]	; (40584c <_vfiprintf_r+0x218>)
  40570e:	429c      	cmp	r4, r3
  405710:	bf08      	it	eq
  405712:	68f4      	ldreq	r4, [r6, #12]
  405714:	e79e      	b.n	405654 <_vfiprintf_r+0x20>
  405716:	4621      	mov	r1, r4
  405718:	4630      	mov	r0, r6
  40571a:	f000 f959 	bl	4059d0 <__swsetup_r>
  40571e:	2800      	cmp	r0, #0
  405720:	d09e      	beq.n	405660 <_vfiprintf_r+0x2c>
  405722:	f04f 30ff 	mov.w	r0, #4294967295
  405726:	b01d      	add	sp, #116	; 0x74
  405728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40572c:	2b25      	cmp	r3, #37	; 0x25
  40572e:	d0a7      	beq.n	405680 <_vfiprintf_r+0x4c>
  405730:	46a8      	mov	r8, r5
  405732:	e7a0      	b.n	405676 <_vfiprintf_r+0x42>
  405734:	4a43      	ldr	r2, [pc, #268]	; (405844 <_vfiprintf_r+0x210>)
  405736:	1a80      	subs	r0, r0, r2
  405738:	fa0b f000 	lsl.w	r0, fp, r0
  40573c:	4318      	orrs	r0, r3
  40573e:	9004      	str	r0, [sp, #16]
  405740:	4645      	mov	r5, r8
  405742:	e7bb      	b.n	4056bc <_vfiprintf_r+0x88>
  405744:	9a03      	ldr	r2, [sp, #12]
  405746:	1d11      	adds	r1, r2, #4
  405748:	6812      	ldr	r2, [r2, #0]
  40574a:	9103      	str	r1, [sp, #12]
  40574c:	2a00      	cmp	r2, #0
  40574e:	db01      	blt.n	405754 <_vfiprintf_r+0x120>
  405750:	9207      	str	r2, [sp, #28]
  405752:	e004      	b.n	40575e <_vfiprintf_r+0x12a>
  405754:	4252      	negs	r2, r2
  405756:	f043 0302 	orr.w	r3, r3, #2
  40575a:	9207      	str	r2, [sp, #28]
  40575c:	9304      	str	r3, [sp, #16]
  40575e:	f898 3000 	ldrb.w	r3, [r8]
  405762:	2b2e      	cmp	r3, #46	; 0x2e
  405764:	d110      	bne.n	405788 <_vfiprintf_r+0x154>
  405766:	f898 3001 	ldrb.w	r3, [r8, #1]
  40576a:	2b2a      	cmp	r3, #42	; 0x2a
  40576c:	f108 0101 	add.w	r1, r8, #1
  405770:	d137      	bne.n	4057e2 <_vfiprintf_r+0x1ae>
  405772:	9b03      	ldr	r3, [sp, #12]
  405774:	1d1a      	adds	r2, r3, #4
  405776:	681b      	ldr	r3, [r3, #0]
  405778:	9203      	str	r2, [sp, #12]
  40577a:	2b00      	cmp	r3, #0
  40577c:	bfb8      	it	lt
  40577e:	f04f 33ff 	movlt.w	r3, #4294967295
  405782:	f108 0802 	add.w	r8, r8, #2
  405786:	9305      	str	r3, [sp, #20]
  405788:	4d31      	ldr	r5, [pc, #196]	; (405850 <_vfiprintf_r+0x21c>)
  40578a:	f898 1000 	ldrb.w	r1, [r8]
  40578e:	2203      	movs	r2, #3
  405790:	4628      	mov	r0, r5
  405792:	f7ff fb4d 	bl	404e30 <memchr>
  405796:	b140      	cbz	r0, 4057aa <_vfiprintf_r+0x176>
  405798:	2340      	movs	r3, #64	; 0x40
  40579a:	1b40      	subs	r0, r0, r5
  40579c:	fa03 f000 	lsl.w	r0, r3, r0
  4057a0:	9b04      	ldr	r3, [sp, #16]
  4057a2:	4303      	orrs	r3, r0
  4057a4:	9304      	str	r3, [sp, #16]
  4057a6:	f108 0801 	add.w	r8, r8, #1
  4057aa:	f898 1000 	ldrb.w	r1, [r8]
  4057ae:	4829      	ldr	r0, [pc, #164]	; (405854 <_vfiprintf_r+0x220>)
  4057b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  4057b4:	2206      	movs	r2, #6
  4057b6:	f108 0701 	add.w	r7, r8, #1
  4057ba:	f7ff fb39 	bl	404e30 <memchr>
  4057be:	2800      	cmp	r0, #0
  4057c0:	d034      	beq.n	40582c <_vfiprintf_r+0x1f8>
  4057c2:	4b25      	ldr	r3, [pc, #148]	; (405858 <_vfiprintf_r+0x224>)
  4057c4:	bb03      	cbnz	r3, 405808 <_vfiprintf_r+0x1d4>
  4057c6:	9b03      	ldr	r3, [sp, #12]
  4057c8:	3307      	adds	r3, #7
  4057ca:	f023 0307 	bic.w	r3, r3, #7
  4057ce:	3308      	adds	r3, #8
  4057d0:	9303      	str	r3, [sp, #12]
  4057d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4057d4:	444b      	add	r3, r9
  4057d6:	9309      	str	r3, [sp, #36]	; 0x24
  4057d8:	e74c      	b.n	405674 <_vfiprintf_r+0x40>
  4057da:	fb00 3202 	mla	r2, r0, r2, r3
  4057de:	2101      	movs	r1, #1
  4057e0:	e786      	b.n	4056f0 <_vfiprintf_r+0xbc>
  4057e2:	2300      	movs	r3, #0
  4057e4:	9305      	str	r3, [sp, #20]
  4057e6:	4618      	mov	r0, r3
  4057e8:	250a      	movs	r5, #10
  4057ea:	4688      	mov	r8, r1
  4057ec:	3101      	adds	r1, #1
  4057ee:	f898 2000 	ldrb.w	r2, [r8]
  4057f2:	3a30      	subs	r2, #48	; 0x30
  4057f4:	2a09      	cmp	r2, #9
  4057f6:	d903      	bls.n	405800 <_vfiprintf_r+0x1cc>
  4057f8:	2b00      	cmp	r3, #0
  4057fa:	d0c5      	beq.n	405788 <_vfiprintf_r+0x154>
  4057fc:	9005      	str	r0, [sp, #20]
  4057fe:	e7c3      	b.n	405788 <_vfiprintf_r+0x154>
  405800:	fb05 2000 	mla	r0, r5, r0, r2
  405804:	2301      	movs	r3, #1
  405806:	e7f0      	b.n	4057ea <_vfiprintf_r+0x1b6>
  405808:	ab03      	add	r3, sp, #12
  40580a:	9300      	str	r3, [sp, #0]
  40580c:	4622      	mov	r2, r4
  40580e:	4b13      	ldr	r3, [pc, #76]	; (40585c <_vfiprintf_r+0x228>)
  405810:	a904      	add	r1, sp, #16
  405812:	4630      	mov	r0, r6
  405814:	f7fd fe0e 	bl	403434 <_printf_float>
  405818:	f1b0 3fff 	cmp.w	r0, #4294967295
  40581c:	4681      	mov	r9, r0
  40581e:	d1d8      	bne.n	4057d2 <_vfiprintf_r+0x19e>
  405820:	89a3      	ldrh	r3, [r4, #12]
  405822:	065b      	lsls	r3, r3, #25
  405824:	f53f af7d 	bmi.w	405722 <_vfiprintf_r+0xee>
  405828:	9809      	ldr	r0, [sp, #36]	; 0x24
  40582a:	e77c      	b.n	405726 <_vfiprintf_r+0xf2>
  40582c:	ab03      	add	r3, sp, #12
  40582e:	9300      	str	r3, [sp, #0]
  405830:	4622      	mov	r2, r4
  405832:	4b0a      	ldr	r3, [pc, #40]	; (40585c <_vfiprintf_r+0x228>)
  405834:	a904      	add	r1, sp, #16
  405836:	4630      	mov	r0, r6
  405838:	f7fe f8aa 	bl	403990 <_printf_i>
  40583c:	e7ec      	b.n	405818 <_vfiprintf_r+0x1e4>
  40583e:	bf00      	nop
  405840:	004060e4 	.word	0x004060e4
  405844:	00406224 	.word	0x00406224
  405848:	00406104 	.word	0x00406104
  40584c:	004060c4 	.word	0x004060c4
  405850:	0040622a 	.word	0x0040622a
  405854:	0040622e 	.word	0x0040622e
  405858:	00403435 	.word	0x00403435
  40585c:	00405611 	.word	0x00405611

00405860 <_sbrk_r>:
  405860:	b538      	push	{r3, r4, r5, lr}
  405862:	4c06      	ldr	r4, [pc, #24]	; (40587c <_sbrk_r+0x1c>)
  405864:	2300      	movs	r3, #0
  405866:	4605      	mov	r5, r0
  405868:	4608      	mov	r0, r1
  40586a:	6023      	str	r3, [r4, #0]
  40586c:	f7fb ffc4 	bl	4017f8 <_sbrk>
  405870:	1c43      	adds	r3, r0, #1
  405872:	d102      	bne.n	40587a <_sbrk_r+0x1a>
  405874:	6823      	ldr	r3, [r4, #0]
  405876:	b103      	cbz	r3, 40587a <_sbrk_r+0x1a>
  405878:	602b      	str	r3, [r5, #0]
  40587a:	bd38      	pop	{r3, r4, r5, pc}
  40587c:	2040078c 	.word	0x2040078c

00405880 <__sread>:
  405880:	b510      	push	{r4, lr}
  405882:	460c      	mov	r4, r1
  405884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405888:	f000 f968 	bl	405b5c <_read_r>
  40588c:	2800      	cmp	r0, #0
  40588e:	bfab      	itete	ge
  405890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  405892:	89a3      	ldrhlt	r3, [r4, #12]
  405894:	181b      	addge	r3, r3, r0
  405896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  40589a:	bfac      	ite	ge
  40589c:	6563      	strge	r3, [r4, #84]	; 0x54
  40589e:	81a3      	strhlt	r3, [r4, #12]
  4058a0:	bd10      	pop	{r4, pc}

004058a2 <__swrite>:
  4058a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4058a6:	461f      	mov	r7, r3
  4058a8:	898b      	ldrh	r3, [r1, #12]
  4058aa:	05db      	lsls	r3, r3, #23
  4058ac:	4605      	mov	r5, r0
  4058ae:	460c      	mov	r4, r1
  4058b0:	4616      	mov	r6, r2
  4058b2:	d505      	bpl.n	4058c0 <__swrite+0x1e>
  4058b4:	2302      	movs	r3, #2
  4058b6:	2200      	movs	r2, #0
  4058b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4058bc:	f000 f928 	bl	405b10 <_lseek_r>
  4058c0:	89a3      	ldrh	r3, [r4, #12]
  4058c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4058c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4058ca:	81a3      	strh	r3, [r4, #12]
  4058cc:	4632      	mov	r2, r6
  4058ce:	463b      	mov	r3, r7
  4058d0:	4628      	mov	r0, r5
  4058d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4058d6:	f000 b869 	b.w	4059ac <_write_r>

004058da <__sseek>:
  4058da:	b510      	push	{r4, lr}
  4058dc:	460c      	mov	r4, r1
  4058de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4058e2:	f000 f915 	bl	405b10 <_lseek_r>
  4058e6:	1c43      	adds	r3, r0, #1
  4058e8:	89a3      	ldrh	r3, [r4, #12]
  4058ea:	bf15      	itete	ne
  4058ec:	6560      	strne	r0, [r4, #84]	; 0x54
  4058ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4058f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4058f6:	81a3      	strheq	r3, [r4, #12]
  4058f8:	bf18      	it	ne
  4058fa:	81a3      	strhne	r3, [r4, #12]
  4058fc:	bd10      	pop	{r4, pc}

004058fe <__sclose>:
  4058fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405902:	f000 b8d3 	b.w	405aac <_close_r>
	...

00405908 <__swbuf_r>:
  405908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40590a:	460e      	mov	r6, r1
  40590c:	4614      	mov	r4, r2
  40590e:	4605      	mov	r5, r0
  405910:	b118      	cbz	r0, 40591a <__swbuf_r+0x12>
  405912:	6983      	ldr	r3, [r0, #24]
  405914:	b90b      	cbnz	r3, 40591a <__swbuf_r+0x12>
  405916:	f7ff f983 	bl	404c20 <__sinit>
  40591a:	4b21      	ldr	r3, [pc, #132]	; (4059a0 <__swbuf_r+0x98>)
  40591c:	429c      	cmp	r4, r3
  40591e:	d12a      	bne.n	405976 <__swbuf_r+0x6e>
  405920:	686c      	ldr	r4, [r5, #4]
  405922:	69a3      	ldr	r3, [r4, #24]
  405924:	60a3      	str	r3, [r4, #8]
  405926:	89a3      	ldrh	r3, [r4, #12]
  405928:	071a      	lsls	r2, r3, #28
  40592a:	d52e      	bpl.n	40598a <__swbuf_r+0x82>
  40592c:	6923      	ldr	r3, [r4, #16]
  40592e:	b363      	cbz	r3, 40598a <__swbuf_r+0x82>
  405930:	6923      	ldr	r3, [r4, #16]
  405932:	6820      	ldr	r0, [r4, #0]
  405934:	1ac0      	subs	r0, r0, r3
  405936:	6963      	ldr	r3, [r4, #20]
  405938:	b2f6      	uxtb	r6, r6
  40593a:	4298      	cmp	r0, r3
  40593c:	4637      	mov	r7, r6
  40593e:	db04      	blt.n	40594a <__swbuf_r+0x42>
  405940:	4621      	mov	r1, r4
  405942:	4628      	mov	r0, r5
  405944:	f7ff f902 	bl	404b4c <_fflush_r>
  405948:	bb28      	cbnz	r0, 405996 <__swbuf_r+0x8e>
  40594a:	68a3      	ldr	r3, [r4, #8]
  40594c:	3b01      	subs	r3, #1
  40594e:	60a3      	str	r3, [r4, #8]
  405950:	6823      	ldr	r3, [r4, #0]
  405952:	1c5a      	adds	r2, r3, #1
  405954:	6022      	str	r2, [r4, #0]
  405956:	701e      	strb	r6, [r3, #0]
  405958:	6963      	ldr	r3, [r4, #20]
  40595a:	3001      	adds	r0, #1
  40595c:	4298      	cmp	r0, r3
  40595e:	d004      	beq.n	40596a <__swbuf_r+0x62>
  405960:	89a3      	ldrh	r3, [r4, #12]
  405962:	07db      	lsls	r3, r3, #31
  405964:	d519      	bpl.n	40599a <__swbuf_r+0x92>
  405966:	2e0a      	cmp	r6, #10
  405968:	d117      	bne.n	40599a <__swbuf_r+0x92>
  40596a:	4621      	mov	r1, r4
  40596c:	4628      	mov	r0, r5
  40596e:	f7ff f8ed 	bl	404b4c <_fflush_r>
  405972:	b190      	cbz	r0, 40599a <__swbuf_r+0x92>
  405974:	e00f      	b.n	405996 <__swbuf_r+0x8e>
  405976:	4b0b      	ldr	r3, [pc, #44]	; (4059a4 <__swbuf_r+0x9c>)
  405978:	429c      	cmp	r4, r3
  40597a:	d101      	bne.n	405980 <__swbuf_r+0x78>
  40597c:	68ac      	ldr	r4, [r5, #8]
  40597e:	e7d0      	b.n	405922 <__swbuf_r+0x1a>
  405980:	4b09      	ldr	r3, [pc, #36]	; (4059a8 <__swbuf_r+0xa0>)
  405982:	429c      	cmp	r4, r3
  405984:	bf08      	it	eq
  405986:	68ec      	ldreq	r4, [r5, #12]
  405988:	e7cb      	b.n	405922 <__swbuf_r+0x1a>
  40598a:	4621      	mov	r1, r4
  40598c:	4628      	mov	r0, r5
  40598e:	f000 f81f 	bl	4059d0 <__swsetup_r>
  405992:	2800      	cmp	r0, #0
  405994:	d0cc      	beq.n	405930 <__swbuf_r+0x28>
  405996:	f04f 37ff 	mov.w	r7, #4294967295
  40599a:	4638      	mov	r0, r7
  40599c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40599e:	bf00      	nop
  4059a0:	004060e4 	.word	0x004060e4
  4059a4:	00406104 	.word	0x00406104
  4059a8:	004060c4 	.word	0x004060c4

004059ac <_write_r>:
  4059ac:	b538      	push	{r3, r4, r5, lr}
  4059ae:	4c07      	ldr	r4, [pc, #28]	; (4059cc <_write_r+0x20>)
  4059b0:	4605      	mov	r5, r0
  4059b2:	4608      	mov	r0, r1
  4059b4:	4611      	mov	r1, r2
  4059b6:	2200      	movs	r2, #0
  4059b8:	6022      	str	r2, [r4, #0]
  4059ba:	461a      	mov	r2, r3
  4059bc:	f7fc ff9a 	bl	4028f4 <_write>
  4059c0:	1c43      	adds	r3, r0, #1
  4059c2:	d102      	bne.n	4059ca <_write_r+0x1e>
  4059c4:	6823      	ldr	r3, [r4, #0]
  4059c6:	b103      	cbz	r3, 4059ca <_write_r+0x1e>
  4059c8:	602b      	str	r3, [r5, #0]
  4059ca:	bd38      	pop	{r3, r4, r5, pc}
  4059cc:	2040078c 	.word	0x2040078c

004059d0 <__swsetup_r>:
  4059d0:	4b32      	ldr	r3, [pc, #200]	; (405a9c <__swsetup_r+0xcc>)
  4059d2:	b570      	push	{r4, r5, r6, lr}
  4059d4:	681d      	ldr	r5, [r3, #0]
  4059d6:	4606      	mov	r6, r0
  4059d8:	460c      	mov	r4, r1
  4059da:	b125      	cbz	r5, 4059e6 <__swsetup_r+0x16>
  4059dc:	69ab      	ldr	r3, [r5, #24]
  4059de:	b913      	cbnz	r3, 4059e6 <__swsetup_r+0x16>
  4059e0:	4628      	mov	r0, r5
  4059e2:	f7ff f91d 	bl	404c20 <__sinit>
  4059e6:	4b2e      	ldr	r3, [pc, #184]	; (405aa0 <__swsetup_r+0xd0>)
  4059e8:	429c      	cmp	r4, r3
  4059ea:	d10f      	bne.n	405a0c <__swsetup_r+0x3c>
  4059ec:	686c      	ldr	r4, [r5, #4]
  4059ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059f2:	b29a      	uxth	r2, r3
  4059f4:	0715      	lsls	r5, r2, #28
  4059f6:	d42c      	bmi.n	405a52 <__swsetup_r+0x82>
  4059f8:	06d0      	lsls	r0, r2, #27
  4059fa:	d411      	bmi.n	405a20 <__swsetup_r+0x50>
  4059fc:	2209      	movs	r2, #9
  4059fe:	6032      	str	r2, [r6, #0]
  405a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405a04:	81a3      	strh	r3, [r4, #12]
  405a06:	f04f 30ff 	mov.w	r0, #4294967295
  405a0a:	bd70      	pop	{r4, r5, r6, pc}
  405a0c:	4b25      	ldr	r3, [pc, #148]	; (405aa4 <__swsetup_r+0xd4>)
  405a0e:	429c      	cmp	r4, r3
  405a10:	d101      	bne.n	405a16 <__swsetup_r+0x46>
  405a12:	68ac      	ldr	r4, [r5, #8]
  405a14:	e7eb      	b.n	4059ee <__swsetup_r+0x1e>
  405a16:	4b24      	ldr	r3, [pc, #144]	; (405aa8 <__swsetup_r+0xd8>)
  405a18:	429c      	cmp	r4, r3
  405a1a:	bf08      	it	eq
  405a1c:	68ec      	ldreq	r4, [r5, #12]
  405a1e:	e7e6      	b.n	4059ee <__swsetup_r+0x1e>
  405a20:	0751      	lsls	r1, r2, #29
  405a22:	d512      	bpl.n	405a4a <__swsetup_r+0x7a>
  405a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405a26:	b141      	cbz	r1, 405a3a <__swsetup_r+0x6a>
  405a28:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405a2c:	4299      	cmp	r1, r3
  405a2e:	d002      	beq.n	405a36 <__swsetup_r+0x66>
  405a30:	4630      	mov	r0, r6
  405a32:	f7ff fd2b 	bl	40548c <_free_r>
  405a36:	2300      	movs	r3, #0
  405a38:	6363      	str	r3, [r4, #52]	; 0x34
  405a3a:	89a3      	ldrh	r3, [r4, #12]
  405a3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  405a40:	81a3      	strh	r3, [r4, #12]
  405a42:	2300      	movs	r3, #0
  405a44:	6063      	str	r3, [r4, #4]
  405a46:	6923      	ldr	r3, [r4, #16]
  405a48:	6023      	str	r3, [r4, #0]
  405a4a:	89a3      	ldrh	r3, [r4, #12]
  405a4c:	f043 0308 	orr.w	r3, r3, #8
  405a50:	81a3      	strh	r3, [r4, #12]
  405a52:	6923      	ldr	r3, [r4, #16]
  405a54:	b94b      	cbnz	r3, 405a6a <__swsetup_r+0x9a>
  405a56:	89a3      	ldrh	r3, [r4, #12]
  405a58:	f403 7320 	and.w	r3, r3, #640	; 0x280
  405a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405a60:	d003      	beq.n	405a6a <__swsetup_r+0x9a>
  405a62:	4621      	mov	r1, r4
  405a64:	4630      	mov	r0, r6
  405a66:	f7ff f997 	bl	404d98 <__smakebuf_r>
  405a6a:	89a2      	ldrh	r2, [r4, #12]
  405a6c:	f012 0301 	ands.w	r3, r2, #1
  405a70:	d00c      	beq.n	405a8c <__swsetup_r+0xbc>
  405a72:	2300      	movs	r3, #0
  405a74:	60a3      	str	r3, [r4, #8]
  405a76:	6963      	ldr	r3, [r4, #20]
  405a78:	425b      	negs	r3, r3
  405a7a:	61a3      	str	r3, [r4, #24]
  405a7c:	6923      	ldr	r3, [r4, #16]
  405a7e:	b953      	cbnz	r3, 405a96 <__swsetup_r+0xc6>
  405a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405a84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  405a88:	d1ba      	bne.n	405a00 <__swsetup_r+0x30>
  405a8a:	bd70      	pop	{r4, r5, r6, pc}
  405a8c:	0792      	lsls	r2, r2, #30
  405a8e:	bf58      	it	pl
  405a90:	6963      	ldrpl	r3, [r4, #20]
  405a92:	60a3      	str	r3, [r4, #8]
  405a94:	e7f2      	b.n	405a7c <__swsetup_r+0xac>
  405a96:	2000      	movs	r0, #0
  405a98:	e7f7      	b.n	405a8a <__swsetup_r+0xba>
  405a9a:	bf00      	nop
  405a9c:	20400048 	.word	0x20400048
  405aa0:	004060e4 	.word	0x004060e4
  405aa4:	00406104 	.word	0x00406104
  405aa8:	004060c4 	.word	0x004060c4

00405aac <_close_r>:
  405aac:	b538      	push	{r3, r4, r5, lr}
  405aae:	4c06      	ldr	r4, [pc, #24]	; (405ac8 <_close_r+0x1c>)
  405ab0:	2300      	movs	r3, #0
  405ab2:	4605      	mov	r5, r0
  405ab4:	4608      	mov	r0, r1
  405ab6:	6023      	str	r3, [r4, #0]
  405ab8:	f7fb feb0 	bl	40181c <_close>
  405abc:	1c43      	adds	r3, r0, #1
  405abe:	d102      	bne.n	405ac6 <_close_r+0x1a>
  405ac0:	6823      	ldr	r3, [r4, #0]
  405ac2:	b103      	cbz	r3, 405ac6 <_close_r+0x1a>
  405ac4:	602b      	str	r3, [r5, #0]
  405ac6:	bd38      	pop	{r3, r4, r5, pc}
  405ac8:	2040078c 	.word	0x2040078c

00405acc <_fstat_r>:
  405acc:	b538      	push	{r3, r4, r5, lr}
  405ace:	4c07      	ldr	r4, [pc, #28]	; (405aec <_fstat_r+0x20>)
  405ad0:	2300      	movs	r3, #0
  405ad2:	4605      	mov	r5, r0
  405ad4:	4608      	mov	r0, r1
  405ad6:	4611      	mov	r1, r2
  405ad8:	6023      	str	r3, [r4, #0]
  405ada:	f7fb fea2 	bl	401822 <_fstat>
  405ade:	1c43      	adds	r3, r0, #1
  405ae0:	d102      	bne.n	405ae8 <_fstat_r+0x1c>
  405ae2:	6823      	ldr	r3, [r4, #0]
  405ae4:	b103      	cbz	r3, 405ae8 <_fstat_r+0x1c>
  405ae6:	602b      	str	r3, [r5, #0]
  405ae8:	bd38      	pop	{r3, r4, r5, pc}
  405aea:	bf00      	nop
  405aec:	2040078c 	.word	0x2040078c

00405af0 <_isatty_r>:
  405af0:	b538      	push	{r3, r4, r5, lr}
  405af2:	4c06      	ldr	r4, [pc, #24]	; (405b0c <_isatty_r+0x1c>)
  405af4:	2300      	movs	r3, #0
  405af6:	4605      	mov	r5, r0
  405af8:	4608      	mov	r0, r1
  405afa:	6023      	str	r3, [r4, #0]
  405afc:	f7fb fe96 	bl	40182c <_isatty>
  405b00:	1c43      	adds	r3, r0, #1
  405b02:	d102      	bne.n	405b0a <_isatty_r+0x1a>
  405b04:	6823      	ldr	r3, [r4, #0]
  405b06:	b103      	cbz	r3, 405b0a <_isatty_r+0x1a>
  405b08:	602b      	str	r3, [r5, #0]
  405b0a:	bd38      	pop	{r3, r4, r5, pc}
  405b0c:	2040078c 	.word	0x2040078c

00405b10 <_lseek_r>:
  405b10:	b538      	push	{r3, r4, r5, lr}
  405b12:	4c07      	ldr	r4, [pc, #28]	; (405b30 <_lseek_r+0x20>)
  405b14:	4605      	mov	r5, r0
  405b16:	4608      	mov	r0, r1
  405b18:	4611      	mov	r1, r2
  405b1a:	2200      	movs	r2, #0
  405b1c:	6022      	str	r2, [r4, #0]
  405b1e:	461a      	mov	r2, r3
  405b20:	f7fb fe86 	bl	401830 <_lseek>
  405b24:	1c43      	adds	r3, r0, #1
  405b26:	d102      	bne.n	405b2e <_lseek_r+0x1e>
  405b28:	6823      	ldr	r3, [r4, #0]
  405b2a:	b103      	cbz	r3, 405b2e <_lseek_r+0x1e>
  405b2c:	602b      	str	r3, [r5, #0]
  405b2e:	bd38      	pop	{r3, r4, r5, pc}
  405b30:	2040078c 	.word	0x2040078c

00405b34 <__ascii_mbtowc>:
  405b34:	b082      	sub	sp, #8
  405b36:	b901      	cbnz	r1, 405b3a <__ascii_mbtowc+0x6>
  405b38:	a901      	add	r1, sp, #4
  405b3a:	b142      	cbz	r2, 405b4e <__ascii_mbtowc+0x1a>
  405b3c:	b14b      	cbz	r3, 405b52 <__ascii_mbtowc+0x1e>
  405b3e:	7813      	ldrb	r3, [r2, #0]
  405b40:	600b      	str	r3, [r1, #0]
  405b42:	7812      	ldrb	r2, [r2, #0]
  405b44:	1c10      	adds	r0, r2, #0
  405b46:	bf18      	it	ne
  405b48:	2001      	movne	r0, #1
  405b4a:	b002      	add	sp, #8
  405b4c:	4770      	bx	lr
  405b4e:	4610      	mov	r0, r2
  405b50:	e7fb      	b.n	405b4a <__ascii_mbtowc+0x16>
  405b52:	f06f 0001 	mvn.w	r0, #1
  405b56:	e7f8      	b.n	405b4a <__ascii_mbtowc+0x16>

00405b58 <__malloc_lock>:
  405b58:	4770      	bx	lr

00405b5a <__malloc_unlock>:
  405b5a:	4770      	bx	lr

00405b5c <_read_r>:
  405b5c:	b538      	push	{r3, r4, r5, lr}
  405b5e:	4c07      	ldr	r4, [pc, #28]	; (405b7c <_read_r+0x20>)
  405b60:	4605      	mov	r5, r0
  405b62:	4608      	mov	r0, r1
  405b64:	4611      	mov	r1, r2
  405b66:	2200      	movs	r2, #0
  405b68:	6022      	str	r2, [r4, #0]
  405b6a:	461a      	mov	r2, r3
  405b6c:	f7fc feb0 	bl	4028d0 <_read>
  405b70:	1c43      	adds	r3, r0, #1
  405b72:	d102      	bne.n	405b7a <_read_r+0x1e>
  405b74:	6823      	ldr	r3, [r4, #0]
  405b76:	b103      	cbz	r3, 405b7a <_read_r+0x1e>
  405b78:	602b      	str	r3, [r5, #0]
  405b7a:	bd38      	pop	{r3, r4, r5, pc}
  405b7c:	2040078c 	.word	0x2040078c

00405b80 <__ascii_wctomb>:
  405b80:	b149      	cbz	r1, 405b96 <__ascii_wctomb+0x16>
  405b82:	2aff      	cmp	r2, #255	; 0xff
  405b84:	bf85      	ittet	hi
  405b86:	238a      	movhi	r3, #138	; 0x8a
  405b88:	6003      	strhi	r3, [r0, #0]
  405b8a:	700a      	strbls	r2, [r1, #0]
  405b8c:	f04f 30ff 	movhi.w	r0, #4294967295
  405b90:	bf98      	it	ls
  405b92:	2001      	movls	r0, #1
  405b94:	4770      	bx	lr
  405b96:	4608      	mov	r0, r1
  405b98:	4770      	bx	lr
	...

00405b9c <__aeabi_dcmpun>:
  405b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405ba4:	d102      	bne.n	405bac <__aeabi_dcmpun+0x10>
  405ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405baa:	d10a      	bne.n	405bc2 <__aeabi_dcmpun+0x26>
  405bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405bb4:	d102      	bne.n	405bbc <__aeabi_dcmpun+0x20>
  405bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405bba:	d102      	bne.n	405bc2 <__aeabi_dcmpun+0x26>
  405bbc:	f04f 0000 	mov.w	r0, #0
  405bc0:	4770      	bx	lr
  405bc2:	f04f 0001 	mov.w	r0, #1
  405bc6:	4770      	bx	lr
  405bc8:	20534f50 	.word	0x20534f50
  405bcc:	00000a31 	.word	0x00000a31
  405bd0:	20534f50 	.word	0x20534f50
  405bd4:	00000a32 	.word	0x00000a32
  405bd8:	20534f50 	.word	0x20534f50
  405bdc:	00000a33 	.word	0x00000a33
  405be0:	65746e69 	.word	0x65746e69
  405be4:	70757272 	.word	0x70757272
  405be8:	202d2074 	.word	0x202d2074
  405bec:	20434441 	.word	0x20434441
  405bf0:	202d2030 	.word	0x202d2030
  405bf4:	25206925 	.word	0x25206925
  405bf8:	69252069 	.word	0x69252069
  405bfc:	20692520 	.word	0x20692520
  405c00:	25206925 	.word	0x25206925
  405c04:	0a202069 	.word	0x0a202069
  405c08:	00000000 	.word	0x00000000
  405c0c:	61746144 	.word	0x61746144
  405c10:	6c6f6320 	.word	0x6c6f6320
  405c14:	7463656c 	.word	0x7463656c
  405c18:	202c6465 	.word	0x202c6465
  405c1c:	6e75616c 	.word	0x6e75616c
  405c20:	6e696863 	.word	0x6e696863
  405c24:	6f632067 	.word	0x6f632067
  405c28:	6f72746e 	.word	0x6f72746e
  405c2c:	6f6c206c 	.word	0x6f6c206c
  405c30:	6620706f 	.word	0x6620706f
  405c34:	206d6f72 	.word	0x206d6f72
  405c38:	20636461 	.word	0x20636461
  405c3c:	00000a30 	.word	0x00000a30
  405c40:	65746e69 	.word	0x65746e69
  405c44:	70757272 	.word	0x70757272
  405c48:	202d2074 	.word	0x202d2074
  405c4c:	20434441 	.word	0x20434441
  405c50:	202d2031 	.word	0x202d2031
  405c54:	25206925 	.word	0x25206925
  405c58:	69252069 	.word	0x69252069
  405c5c:	20692520 	.word	0x20692520
  405c60:	00000a20 	.word	0x00000a20
  405c64:	61746144 	.word	0x61746144
  405c68:	6c6f6320 	.word	0x6c6f6320
  405c6c:	7463656c 	.word	0x7463656c
  405c70:	202c6465 	.word	0x202c6465
  405c74:	6e75616c 	.word	0x6e75616c
  405c78:	6e696863 	.word	0x6e696863
  405c7c:	6f632067 	.word	0x6f632067
  405c80:	6f72746e 	.word	0x6f72746e
  405c84:	6f6c206c 	.word	0x6f6c206c
  405c88:	6620706f 	.word	0x6620706f
  405c8c:	206d6f72 	.word	0x206d6f72
  405c90:	20636461 	.word	0x20636461
  405c94:	000a2031 	.word	0x000a2031
  405c98:	204d5750 	.word	0x204d5750
  405c9c:	65746e49 	.word	0x65746e49
  405ca0:	70757272 	.word	0x70757272
  405ca4:	000a2074 	.word	0x000a2074
  405ca8:	682f2e2e 	.word	0x682f2e2e
  405cac:	732f6c61 	.word	0x732f6c61
  405cb0:	682f6372 	.word	0x682f6372
  405cb4:	615f6c61 	.word	0x615f6c61
  405cb8:	615f6364 	.word	0x615f6364
  405cbc:	636e7973 	.word	0x636e7973
  405cc0:	0000632e 	.word	0x0000632e
  405cc4:	682f2e2e 	.word	0x682f2e2e
  405cc8:	732f6c61 	.word	0x732f6c61
  405ccc:	682f6372 	.word	0x682f6372
  405cd0:	695f6c61 	.word	0x695f6c61
  405cd4:	00632e6f 	.word	0x00632e6f
  405cd8:	682f2e2e 	.word	0x682f2e2e
  405cdc:	732f6c61 	.word	0x732f6c61
  405ce0:	682f6372 	.word	0x682f6372
  405ce4:	705f6c61 	.word	0x705f6c61
  405ce8:	632e6d77 	.word	0x632e6d77
  405cec:	00000000 	.word	0x00000000
  405cf0:	682f2e2e 	.word	0x682f2e2e
  405cf4:	732f6c61 	.word	0x732f6c61
  405cf8:	682f6372 	.word	0x682f6372
  405cfc:	745f6c61 	.word	0x745f6c61
  405d00:	72656d69 	.word	0x72656d69
  405d04:	0000632e 	.word	0x0000632e
  405d08:	682f2e2e 	.word	0x682f2e2e
  405d0c:	732f6c61 	.word	0x732f6c61
  405d10:	682f6372 	.word	0x682f6372
  405d14:	755f6c61 	.word	0x755f6c61
  405d18:	74726173 	.word	0x74726173
  405d1c:	6e79735f 	.word	0x6e79735f
  405d20:	00632e63 	.word	0x00632e63
  405d24:	682f2e2e 	.word	0x682f2e2e
  405d28:	752f6c61 	.word	0x752f6c61
  405d2c:	736c6974 	.word	0x736c6974
  405d30:	6372732f 	.word	0x6372732f
  405d34:	6974752f 	.word	0x6974752f
  405d38:	6c5f736c 	.word	0x6c5f736c
  405d3c:	2e747369 	.word	0x2e747369
  405d40:	00000063 	.word	0x00000063
  405d44:	682f2e2e 	.word	0x682f2e2e
  405d48:	752f6c61 	.word	0x752f6c61
  405d4c:	736c6974 	.word	0x736c6974
  405d50:	6372732f 	.word	0x6372732f
  405d54:	6974752f 	.word	0x6974752f
  405d58:	725f736c 	.word	0x725f736c
  405d5c:	62676e69 	.word	0x62676e69
  405d60:	65666675 	.word	0x65666675
  405d64:	00632e72 	.word	0x00632e72

00405d68 <_afecs>:
  405d68:	00000000 2f84310b 23000000 ffffffff     .....1./...#....
  405d78:	0000ffff 00000000 00000000 00000000     ................
  405d88:	0000010c 00000000 00000000 00000000     ................
  405d98:	00000000 00000200 00000200 00000200     ................
  405da8:	00000200 00000200 00000200 00000200     ................
  405db8:	00000200 00000200 00000200 00000200     ................
  405dc8:	00000200 00000001 2f84310b 23000000     .........1./...#
  405dd8:	ffffffff 0000ffff 00000000 00000000     ................
  405de8:	00000000 0000010c 00000000 00000000     ................
	...
  405e00:	00000200 00000200 00000200 00000200     ................
  405e10:	00000200 00000200 00000200 00000200     ................
  405e20:	00000200 00000200 00000200 00000200     ................
  405e30:	682f2e2e 612f6c70 2f636566 5f6c7068     ../hpl/afec/hpl_
  405e40:	63656661 0000632e                       afec.c..

00405e48 <_ext_irq>:
  405e48:	00000000 00000024 00000000 00000000     ....$...........
	...
  405e64:	00000001 00002000 00002000 00002000     ..... ... ... ..
  405e74:	00000000 00002000 00000000 00000003     ..... ..........
  405e84:	00080000 00000000 00000000 00000000     ................
	...

00405e9c <_pio_irq_n>:
  405e9c:	100c0b0a 00000011 682f2e2e 702f6c70     ........../hpl/p
  405eac:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  405ebc:	00000000                                ....

00405ec0 <_pwms>:
  405ec0:	40020000 0000001f 00010019 00000001     ...@............
  405ed0:	00000001 000000ff 00000000 00000004     ................
	...
  405eec:	00000002 00405f48 00000001 2040038c     ....H_@.......@ 
  405efc:	4005c000 0000003c 00010019 00000001     ...@<...........
  405f0c:	00000001 000000ff 00000000 00000004     ................
	...
  405f28:	00000001 00405f38 00000001 20400380     ....8_@.......@ 

00405f38 <_ch_cfg1>:
  405f38:	00000000 0000010b 000003e8 00000200     ................

00405f48 <_ch_cfg0>:
  405f48:	00000000 0000010b 000003e8 00000200     ................
  405f58:	00000002 0000010b 000003e8 00000200     ................
  405f68:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  405f78:	632e6d77 00000000 682f2e2e 742f6c70     wm.c....../hpl/t
  405f88:	70682f63 63745f6c 0000632e              c/hpl_tc.c..

00405f94 <_usarts>:
  405f94:	00000001 001008c0 000100f4 682f2e2e     ............../h
  405fa4:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  405fb4:	632e7472 00000000                       rt.c....

00405fbc <_cfgs>:
  405fbc:	23043001 00000000 24043001 00000000     .0.#.....0.$....
  405fcc:	00000040 00000000 00000040 00000000     @.......@.......
  405fdc:	00000040 00000000 00000040 00000000     @.......@.......
  405fec:	00000040 00000000 00000040 00000000     @.......@.......
  405ffc:	00000040 00000000 00000040 00000000     @.......@.......
  40600c:	00000040 00000000 00000040 00000000     @.......@.......
  40601c:	00000040 00000000 00000040 00000000     @.......@.......
  40602c:	00000040 00000000 00000040 00000000     @.......@.......
  40603c:	00000040 00000000 00000040 00000000     @.......@.......
  40604c:	00000040 00000000 00000040 00000000     @.......@.......
  40605c:	00000040 00000000 00000040 00000000     @.......@.......
  40606c:	00000040 00000000 00000040 00000000     @.......@.......

0040607c <_global_impure_ptr>:
  40607c:	2040004c 00464e49 00666e69 004e414e     L.@ INF.inf.NAN.
  40608c:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  40609c:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  4060ac:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  4060bc:	4e614e00 00000000                       .NaN....

004060c4 <__sf_fake_stderr>:
	...

004060e4 <__sf_fake_stdin>:
	...

00406104 <__sf_fake_stdout>:
	...

00406128 <__mprec_bigtens>:
  406128:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  406138:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  406148:	7f73bf3c 75154fdd                       <.s..O.u

00406150 <__mprec_tens>:
  406150:	00000000 3ff00000 00000000 40240000     .......?......$@
  406160:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  406170:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  406180:	00000000 412e8480 00000000 416312d0     .......A......cA
  406190:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4061a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4061b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4061c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4061d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4061e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4061f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406200:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406210:	79d99db4 44ea7843                       ...yCx.D

00406218 <p05.6047>:
  406218:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  406228:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  406238:	5849534f 00002e00                                OSIX...

0040623f <_ctype_>:
  40623f:	20202000 20202020 28282020 20282828     .         ((((( 
  40624f:	20202020 20202020 20202020 20202020                     
  40625f:	10108820 10101010 10101010 10101010      ...............
  40626f:	04040410 04040404 10040404 10101010     ................
  40627f:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40628f:	01010101 01010101 01010101 10101010     ................
  40629f:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4062af:	02020202 02020202 02020202 10101010     ................
  4062bf:	00000020 00000000 00000000 00000000      ...............
	...

00406340 <_init>:
  406340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406342:	bf00      	nop
  406344:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406346:	bc08      	pop	{r3}
  406348:	469e      	mov	lr, r3
  40634a:	4770      	bx	lr

0040634c <__init_array_start>:
  40634c:	0040018d 	.word	0x0040018d

00406350 <_fini>:
  406350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406352:	bf00      	nop
  406354:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406356:	bc08      	pop	{r3}
  406358:	469e      	mov	lr, r3
  40635a:	4770      	bx	lr

0040635c <__fini_array_start>:
  40635c:	00400169 	.word	0x00400169
